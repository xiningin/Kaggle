{"cell_type":{"5a6864c4":"code","f81d6476":"code","d928553d":"code","d81960e0":"code","414ef2f5":"code","c6a47083":"code","86103d61":"code","d96ac7da":"code","3a74f267":"code","141aa4a3":"code","03f6cd92":"code","a222672f":"code","73ed2111":"code","25dbcf2d":"code","21f1bccb":"code","d8a194dd":"code","1cb23f88":"code","9c07435b":"code","8aa8ba69":"code","17e97957":"code","2df3b8a6":"code","0ffe4ef5":"code","e7c4a21f":"code","d2a63f68":"code","22646844":"code","f3ef6883":"code","4ac678d4":"code","1ae8f1b0":"code","377c1dfd":"code","bffe7886":"code","2d5b46b2":"code","849aae1e":"code","5b40342e":"code","14462ba4":"code","31575737":"code","162875d5":"code","6ac5bb11":"code","1d5cfb1b":"code","0d5a6257":"code","7ed09fe5":"code","83060f4c":"code","16566bd8":"code","913f254a":"code","e95b4ffb":"code","8d171ebe":"code","8fa88bb1":"code","85eef151":"code","c264dc8c":"code","bcc62ac0":"code","978bb75c":"code","e5b6fbeb":"code","988c1a4f":"code","d467909d":"code","b79dd5e1":"code","b652584f":"code","6b10e165":"code","532b4373":"code","f9368c21":"code","dbf4dfd4":"code","10dc21eb":"code","a4606683":"code","8c2cb0a5":"code","1ffb1206":"code","3e5c24b1":"code","ffbe6f6e":"code","d4819d27":"code","21d9d979":"code","8b3cb119":"code","49a3379e":"code","6399f618":"code","c0a83928":"code","ca80a510":"code","f2f977e4":"code","2637513b":"markdown","622265da":"markdown","dd25f659":"markdown","b83a7274":"markdown","8fb94cbf":"markdown","0eb566b0":"markdown","1a7ed443":"markdown","35679628":"markdown","372c99b3":"markdown","dc7abd74":"markdown","495a410e":"markdown","21badb13":"markdown","2453f7ad":"markdown","201260ce":"markdown","07b39599":"markdown","43820c05":"markdown","5a2e3a20":"markdown","041df6a6":"markdown","b7f1ad7f":"markdown","2a617fd7":"markdown","dc3ee98a":"markdown","2f83751a":"markdown","5b0c52ec":"markdown","1447f2f8":"markdown","789cbde9":"markdown","0a2554ee":"markdown","f6e9c352":"markdown","3ffaacb3":"markdown","d6255a89":"markdown"},"source":{"5a6864c4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('darkgrid')","f81d6476":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","d928553d":"train.info()","d81960e0":"train.describe()","414ef2f5":"plt.figure(figsize=(10,6))\nsns.heatmap(train.isnull(),cbar=False,yticklabels=False,cmap='plasma')\nplt.show()","c6a47083":"sns.countplot(train['Survived'],palette='autumn')\nplt.show()","86103d61":"sns.countplot(train['Survived'],palette='rocket',hue=train['Sex'])\nplt.show()","d96ac7da":"sns.set_style('white')\nsns.countplot(train['Survived'],palette='rainbow',hue=train['Pclass'])\nplt.show()","3a74f267":"sns.distplot(train['Age'].dropna(),color='purple',kde=False,bins=15)\nplt.show()","141aa4a3":"sns.countplot(train['SibSp'])\nplt.show()","03f6cd92":"import cufflinks as cf\ncf.go_offline()\ntrain['Fare'].iplot(kind='hist',color='red')","a222672f":"plt.figure(figsize=(10,6))\n\nsns.boxplot(y='Age',x='Pclass',data=train,palette='icefire')\n\nplt.show()","73ed2111":"def impute(x):\n    Age = x[0]\n    \n    Pclass = x[1]\n    \n    if pd.isnull(Age):\n        if Pclass ==1:\n            return 35\n        elif Pclass == 2:\n            return 28\n        elif Pclass == 3:\n            return 25\n    else:\n        return Age    ","25dbcf2d":"train['Age'] = train[['Age','Pclass']].apply(impute,axis=1)","21f1bccb":"sns.heatmap(train.isnull(), cbar=False, yticklabels = False, cmap='seismic',alpha=0.3)\nplt.show()","d8a194dd":"train.drop('Cabin',inplace = True,axis=1)","1cb23f88":"sns.heatmap(train.isnull(), cbar=False, yticklabels = False, cmap='copper')\nplt.show()","9c07435b":"sex = pd.get_dummies(train['Sex'], drop_first=True)\nembarked = pd.get_dummies(train['Embarked'],drop_first=True)","8aa8ba69":"train=pd.concat([train,sex,embarked],axis=1)\ntrain.drop(['Sex','Embarked','Ticket','Name'],axis=1,inplace=True)\ntrain.head()","17e97957":"X = train.drop('Survived',axis=1)\n\nY = train['Survived']","2df3b8a6":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3, random_state=101)","0ffe4ef5":"from sklearn.neighbors import KNeighborsClassifier","e7c4a21f":"knn = KNeighborsClassifier(n_neighbors=1)","d2a63f68":"knn.fit(X_train,Y_train)","22646844":"knnpredict = knn.predict(X_test)\nknnpredict","f3ef6883":"from sklearn.metrics import accuracy_score,classification_report,confusion_matrix","4ac678d4":"print(accuracy_score(Y_test,knnpredict))","1ae8f1b0":"print(classification_report(Y_test,knnpredict))","377c1dfd":"sns.heatmap(confusion_matrix(Y_test,knnpredict),annot=True)\nplt.show()","bffe7886":"from sklearn.tree import DecisionTreeClassifier","2d5b46b2":"dtree = DecisionTreeClassifier()","849aae1e":"dtree.fit(X_train,Y_train)","5b40342e":"treepredict = dtree.predict(X_test)\ntreepredict","14462ba4":"print(accuracy_score(Y_test,treepredict))","31575737":"print(classification_report(Y_test,treepredict))","162875d5":"sns.heatmap(confusion_matrix(Y_test,treepredict),cmap='coolwarm',annot=True)\nplt.show()","6ac5bb11":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators= 10)\nrfc.fit(X_train,Y_train)","1d5cfb1b":"rfcpredict_10 = rfc.predict(X_test)\nrfcpredict_10","0d5a6257":"print(accuracy_score(Y_test,rfcpredict_10))","7ed09fe5":"print(classification_report(Y_test,rfcpredict_10))","83060f4c":"sns.heatmap(confusion_matrix(Y_test,rfcpredict_10),cmap='rainbow',annot=True)\nplt.show()","16566bd8":"rfc_100 = RandomForestClassifier(n_estimators=100)\nrfc_100.fit(X_train,Y_train)","913f254a":"rfcpredict_100 = rfc_100.predict(X_test)\nrfcpredict_100","e95b4ffb":"print(accuracy_score(Y_test,rfcpredict_100))","8d171ebe":"print(classification_report(Y_test,rfcpredict_100))","8fa88bb1":"sns.heatmap(confusion_matrix(Y_test,rfcpredict_100),annot= True, cmap='magma')\nplt.show()","85eef151":"from sklearn.svm import SVC","c264dc8c":"svc = SVC()\nsvc.fit(X_train, Y_train)","bcc62ac0":"svc_predict = svc.predict(X_test)\nsvc_predict","978bb75c":"print(accuracy_score(Y_test,svc_predict))","e5b6fbeb":"print(classification_report(Y_test,svc_predict))","988c1a4f":"sns.heatmap(confusion_matrix(Y_test,svc_predict),cmap='Dark2',annot=True)\nplt.show()","d467909d":"from sklearn.model_selection import GridSearchCV","b79dd5e1":"param_grid= param_grid = {'C':[0.1,1,10,100,1000], 'gamma':[1,0.1,0.01,0.001,0.0001]}","b652584f":"grid = GridSearchCV(SVC(),param_grid,verbose=3)","6b10e165":"grid.fit(X_train,Y_train)","532b4373":"grid.best_params_","f9368c21":"grid.best_estimator_","dbf4dfd4":"grid_predict = grid.predict(X_test)\ngrid_predict","10dc21eb":"print(accuracy_score(Y_test,grid_predict))","a4606683":"print(classification_report(Y_test,grid_predict))","8c2cb0a5":"sns.heatmap(confusion_matrix(Y_test,grid_predict),cmap='seismic',annot=True)\nplt.show()","1ffb1206":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","3e5c24b1":"plt.figure(figsize=(10,8))\nsns.heatmap(test.isnull(),cbar=False,yticklabels=False)\nplt.show()","ffbe6f6e":"test['Age'] = test[['Age','Pclass']].apply(impute,axis=1)\ntest['Fare'] = test['Fare'].mean()","d4819d27":"plt.figure(figsize=(10,8))\nsns.heatmap(test.isnull(),cbar=False,yticklabels=False)\nplt.show()","21d9d979":"test.drop('Cabin',inplace=True,axis=1)","8b3cb119":"sex_test=pd.get_dummies(test['Sex'],drop_first=True)\nembarked_test = pd.get_dummies(test['Embarked'],drop_first=True)","49a3379e":"test = pd.concat([test,sex_test,embarked_test],axis=1)\ntest.head()","6399f618":"test_1 = test.drop(['PassengerId','Name','Sex','Ticket','Embarked'],axis=1)","c0a83928":"test","ca80a510":"x_test = test.drop(['Name','Sex','Ticket','Embarked'],axis=1)\ny_pred =rfc.predict(x_test)\noriginaltest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.DataFrame({\n        \"PassengerId\": originaltest_data[\"PassengerId\"],\n        \"Survived\": y_pred\n    })\nsubmission.head(20)","f2f977e4":"submission.to_csv('TitanicePredictionRandomForest.csv',index=False)","2637513b":"#### From COUNTPLOT with Passenger Class separation, we realise that number of deads are higher from 3rd class passengers and most of these passengers are male travellers","622265da":"#### COUNT PLOT of Siblings and Spouse tells us that majority of passengers were solo travellers followed by travellers with their spouse","dd25f659":"### 4 - Support Vector Machines","b83a7274":"### PREDICTIONS","8fb94cbf":"### <center> 4.1 Using GridSearchSV","0eb566b0":"### 2| - Decision Tree","1a7ed443":"### DATA VISUALISATION & EXPLORATORY ANALYSIS","35679628":"   #### Age of the passengers from given data is mainly distributed in the range of 20-35 years old.","372c99b3":"### CONVERTING CATEGORICAL VARIABLES","dc7abd74":"#### From COUNT PLOT with separation of SEX, we visualising that number of deads mainly comprise of MALE passengers","495a410e":"### IMPORTING LIBRARIES","21badb13":"##  ","2453f7ad":"#### To find out NULL values, we are using heatmap which tells us that Age and Cabin column has NULL values","201260ce":"### From our different models, we understand that the best model to be used for our prediction is Random Forest with large number of estimators such as 100 to reach accuracy score of minimum 81%.","07b39599":"#### From below BOX PLOT we realise that the selection of PClass is very much correlated to Age which is obvious as with increasing Age, the income capacity increases so the expenditure capacity. ","43820c05":"### <center> 3.1 Random Forest with 10 estimators","5a2e3a20":"### READING & EXPLORING DATA","041df6a6":"### TRAIN - TEST - SPLIT","b7f1ad7f":"#### 2. CLEANING DATA","2a617fd7":"#### 1. READING TEST DATA","dc3ee98a":"### <center> 3.2 Random Forest with 100 estimators","2f83751a":"## FINAL PREDICTIONS WITH TEST MODEL ","5b0c52ec":"#### From COUNT PLOT , we understand that number of deads were more that number of survivors","1447f2f8":"# 1. K-Nearest Neighbors","789cbde9":"### DATA CLEANING","0a2554ee":"#### Since, we are getting highest accuracy with Random Forest model, we will be using that for our final prediction","f6e9c352":"### 3 - Random Forest","3ffaacb3":"#### 3. CONVERTING CATEGORICAL VARIABLES","d6255a89":"#### Distribution of Fares using plotly & cufflinks shows that fare is ranging from 120-450"}}