{"cell_type":{"14fa64d8":"code","de55ee24":"code","9e4d57fa":"code","c909fa7b":"code","147c3090":"code","abf8f673":"code","22221b25":"code","a5d401d6":"code","cca38d0e":"code","35845c54":"code","907e3afc":"code","fe93b2f5":"code","c3f6dce8":"code","05edff0f":"code","a9b0bac8":"code","1f6a8a94":"code","163b5158":"code","2adf67f6":"code","6e96c46b":"code","fba5b809":"code","29303d00":"code","e7b7d77f":"code","2514819d":"code","19b772e3":"code","ac31c962":"code","708b5b72":"markdown","8f173ed2":"markdown","e164f525":"markdown","f37bcfb8":"markdown"},"source":{"14fa64d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","de55ee24":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom numba import njit\nfrom itertools import product\nfrom ortools.linear_solver import pywraplp\n%matplotlib inline","9e4d57fa":"df = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col = 'family_id')\nsubmission_df = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv', index_col = 'family_id')\nprediction = submission_df.assigned_day.values","c909fa7b":"df.head(10)","147c3090":"df.shape","abf8f673":"df.describe()","22221b25":"submission_df.shape","a5d401d6":"submission_df.head(10)","cca38d0e":"# Choice columns list\nchoice_cols = list(df.columns)\nchoice_cols.remove('n_people')\nchoice_dict = df[choice_cols].to_dict()","35845c54":"# Distribution plot for choice columns\nfig, axes = plt.subplots(5, 2, figsize = (16,12))\naxes = axes.ravel()\nfor i, choice in enumerate(choice_cols):\n    ax = axes[i]\n    sns.distplot(df.loc[:, choice], ax = ax, label = choice, color = 'blue')\nplt.tight_layout()","907e3afc":"# Family size Distribution\nfamily_size = df['n_people'].value_counts().sort_index()\nplt.figure(figsize = (17,8))\nax = sns.barplot(x = family_size.index, y = family_size.values)\nfor p in ax.patches:\n    ax.annotate(f'{p.get_height():.0f}', xy = (p.get_x() + p.get_width()\/ 2., p.get_height()), xytext = (-10, 5), textcoords = 'offset points')\nplt.xlabel('Family Size', fontsize = 14)\nplt.ylabel('No of families', fontsize = 14)\nplt.title('Family Members Distribution', fontsize = 14)\nplt.show()","fe93b2f5":"N_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# In reverse order from 100 to 0\ndays = list(range(N_DAYS,0,-1))","c3f6dce8":"# Wednesday is 0th day since 25th Dec 2019 is Wednesday\ndef dayofweek(days):\n    dayofweek = []\n    for day in days:\n        if day%7 == 2:\n            dayofweek.append('Monday')\n        elif day%7 == 1:\n            dayofweek.append('Tuesday')\n        elif day%7 == 0:\n            dayofweek.append('Wednesday')\n        elif day%7 == 6:\n            dayofweek.append('Thursday')\n        elif day%7 == 5:\n            dayofweek.append('Friday')\n        elif day%7 == 4:\n            dayofweek.append('Saturday')\n        else:\n            dayofweek.append('Sunday')\n    return dayofweek","05edff0f":"dayofweeklist = [dayofweek(df[choice_cols].values[i][:].tolist()) for i in range(5000)]\ndayofweek_df = pd.DataFrame(dayofweeklist, columns = ['dayofweek' + choice_cols[i] for i in range(10)])\ndayofweek_df","a9b0bac8":"plt.figure(figsize = (17,8))\nsns.countplot(dayofweek_df['dayofweekchoice_0'], order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.xlabel('Choice 0', fontsize = 14)\nplt.ylabel('Count', fontsize = 14)\nplt.title('Weekday concentration for Choice 0', fontsize = 14)\nplt.show()","1f6a8a94":"plt.figure(figsize = (17,8))\nsns.countplot(dayofweek_df['dayofweekchoice_9'], order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\nplt.xlabel('Choice 9', fontsize = 14)\nplt.ylabel('Count', fontsize = 14)\nplt.title('Weekday concentration for Choice 9', fontsize = 14)\nplt.show()","163b5158":"def penalty_for_cost(family_members):\n    choice_penalty = {}\n    choice_penalty[1] = 50\n    choice_penalty[2] = 50 + 9 * family_members\n    choice_penalty[3] = 100 + 9 * family_members\n    choice_penalty[4] = 200 + 9 * family_members\n    choice_penalty[5] = 200 + 18 * family_members\n    choice_penalty[6] = 300 + 18 * family_members\n    choice_penalty[7] = 400 + 36 * family_members\n    choice_penalty[8] = 500 + (36 + 199) * family_members\n    choice_penalty[9] = 500 + (36 + 398) * family_members\n    \n    items = choice_penalty.items()\n    return list(zip(*items))","2adf67f6":"plt.figure(figsize = (17, 8))\nfor i in range(2,9,1):\n    indices, cost = penalty_for_cost(i)\n    plt.plot(indices, cost, label = f'{i} family members')\nplt.xlabel('Choice', fontsize = 14)\nplt.ylabel('Cost', fontsize = 14)\nplt.title('Choice vs Cost plot for all family sizes', fontsize = 14)\nplt.legend()\nplt.show()","6e96c46b":"penalties = np.asarray([\n    [\n        0,\n        50,\n        50 + 9 * n,\n        100 + 9 * n,\n        200 + 9 * n,\n        200 + 18 * n,\n        300 + 18 * n,\n        300 + 36 * n,\n        400 + 36 * n,\n        500 + 36 * n + 199 * n,\n        500 + 36 * n + 398 * n\n    ] for n in range(family_size.max() + 1)\n])\n\nfamily_cost_matrix = np.concatenate(df.n_people.apply(lambda n: np.repeat(penalties[n, 10], 100).reshape(1, 100)))\nfor family in df.index:\n    for choice_order, day in enumerate(df.loc[family].drop('n_people')):\n        family_cost_matrix[family, day - 1] = penalties[df.loc[family, 'n_people'], choice_order]","fba5b809":"accounting_cost_matrix = np.zeros((500, 500))\nfor n in range(accounting_cost_matrix.shape[0]):\n    for diff in range(accounting_cost_matrix.shape[1]):\n        accounting_cost_matrix[n, diff] = max(0, (n - 125.0) \/ 400.0 * n ** (0.5 + diff \/ 50.0))","29303d00":"@njit(fastmath = True)\ndef cost_function(prediction, family_size, family_cost_matrix, accounting_cost_matrix):\n    N_DAYS = family_cost_matrix.shape[1]\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    daily_occupancy = np.zeros(N_DAYS + 1, dtype = np.int16)\n    for i, (pred, n) in enumerate(zip(prediction, family_size)):\n        daily_occupancy[pred - 1] += n\n        penalty += family_cost_matrix[i, pred - 1]\n    accounting_cost = 0\n    n_high = 0\n    n_low = 0\n    daily_occupancy[-1] = daily_occupancy[-2]\n    for day in range(N_DAYS):\n        n_next = daily_occupancy[day + 1]\n        n = daily_occupancy[day]\n        n_high += (n > MAX_OCCUPANCY)\n        n_low += (n < MIN_OCCUPANCY)\n        diff = abs(n - n_next)\n        accounting_cost += accounting_cost_matrix[n, diff]\n    return np.asarray([penalty, accounting_cost, n_high, n_low])","e7b7d77f":"family_size = df.n_people.values.astype(np.int16)","2514819d":"start_penalty, accounting_cost, high, low = cost_function(prediction, family_size, family_cost_matrix, accounting_cost_matrix)\nstart_cost = start_penalty + accounting_cost","19b772e3":"new = list(prediction)\nfor family_id, _ in enumerate(new):\n    for choice_pick in range(10):\n        day = choice_dict[f'choice_{choice_pick}'][family_id]\n        temp = new.copy()\n        temp[family_id] = day\n        temp = np.asarray(temp)\n        cur_penalty, cur_accounting_cost ,h,l = cost_function(temp, family_size, family_cost_matrix, accounting_cost_matrix)\n        cur_cost = cur_penalty + cur_accounting_cost\n        if cur_cost < start_cost:\n            new = temp.copy()\n            start_cost = cur_cost","ac31c962":"submission_df['assigned_day'] = new\nscore = start_cost\nsubmission_df.to_csv(f'submission_{score}.csv')\nprint(f'Score : {score}')","708b5b72":"**Investigate Features**","8f173ed2":"**Lets find where exactly cost increases significantly**","e164f525":"**Thus people's choices are more concentrated on weekends. Tuesdays is slightly higher becuase of it being Christmas eve**","f37bcfb8":"**As we can see that cost suddenly explodes after choice number 7 for all family sizes**"}}