{"cell_type":{"924964d4":"code","f4e73e05":"code","d7b2d7f6":"code","5d1adccc":"code","79f4bff8":"code","f0ac779b":"code","c5f721ed":"code","033cba72":"code","19073a8d":"code","a7db171a":"code","81a2e9e3":"code","74ec5b8f":"code","3d68ea1e":"code","7e1c7eee":"markdown","d63c5fdf":"markdown","b91de949":"markdown","9a8eb8bc":"markdown","c6ad9dab":"markdown","e492c3e0":"markdown","dd4cfb1c":"markdown","f28c313d":"markdown","769c94fb":"markdown"},"source":{"924964d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4e73e05":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\n# For reading stock data from yahoo\nfrom pandas_datareader.data import DataReader\n\n# For time stamps\nfrom datetime import datetime\nfrom math import sqrt\n\n\n#ignore the warnings\nimport warnings\nwarnings.filterwarnings('ignore')","d7b2d7f6":"!pip install fbprophet fpdf neuralprophet\n","5d1adccc":"from fpdf import FPDF\n","79f4bff8":"#import Facebook prophet libraries that uses sklearn\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\n\n#import neuralprophet libraries that uses PyTorch\nfrom neuralprophet import NeuralProphet\n#, set_log_level\n#set_log_level(\"ERROR\")","f0ac779b":"def collect_data(Symbol, start_date):\n    stock_data = DataReader(Symbol, data_source='yahoo', start=start_date, end=datetime.now())\n    return stock_data    \n","c5f721ed":"def plot_close_val(data_frame, column, stock):\n    plt.figure(figsize=(16,6))\n    plt.title(column + ' Price History for ' + stock )\n    plt.plot(data_frame[column])\n    plt.xlabel('Date', fontsize=18)\n    plt.ylabel(column + ' Price USD ($) for ' + stock, fontsize=18)\n    plt.show()","033cba72":"def fb_prophet_plot(df, param, stock, image_no):\n    # Check the dataset\n    #df.head()\n    # Create Dataset based on the FB Prophet standard ds\/y\n    df2 = pd.DataFrame([], columns = ['ds', 'y'])\n    df2.columns=['ds','y']\n    df2['ds']=pd.to_datetime(df.index,format='%Y-%m')\n    #Assign the Parameter\n    df2['y']=df[param].values\n    \n    #create a new Prophet Model\n    model=Prophet(interval_width=0.95,yearly_seasonality=True)\n    model.add_seasonality(name='monthly', period=30.5, fourier_order=5)\n\n    #Fit the Model\n    model.fit(df2)\n    #Predict the future for 50 periods\n    future=model.make_future_dataframe(periods=50, freq='MS')\n    forecast=model.predict(future)\n    #Save the predicted model\n    preds= forecast['yhat'][:-50]\n    #plot the graph\n    title = 'FB Prophet predictions for ==> ' + stock\n    plt.figure(figsize=(16,8))\n    plt.plot(df2.ds,preds,color='#555555',label=' Predictions')\n    plt.plot(df2.ds,df2.y,color='#1155FF',label='Actual')\n    plt.title(title)\n    plt.legend()\n    plt.show()\n    figure=model.plot(forecast,xlabel='Date',ylabel='Price')\n    a = add_changepoints_to_plot(figure.gca(), model, forecast)\n    figure.set_size_inches(16,8)\n    plt.title(title)\n    model.plot_components(forecast)\n    filename = '\/kaggle\/working\/png\/'+ str(image_no) + '_' + stock + '_fb_prophet_forecast.png'\n    model.plot_components(forecast).savefig(filename)\n\n    plt.show()","19073a8d":"def images_to_pdf_np(stock_list,output_file):\n    pdf = FPDF('P','mm','A4') # create an A4-size pdf document \n    x,y,w,h = 5,5,200,250 #define margins\n    # imagelist is the list with all image filenames\n    filenamelist = []\n    for dirname, _, filenames in os.walk('\/kaggle\/working\/png2'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n            filenamelist.append(os.path.join(dirname, filename))\n        #print(filenames)\n    stock_ticker = ''\n    for stock in stock_list:\n        if any(stock in s for s in filename):\n            stock_ticker = stock\n        # whatever\n    for filenames in filenamelist:\n        print(filenames)\n    # Begin with regular font\n        pdf.set_font('Arial', '', 14)\n        pdf.set_text_color(0, 0, 255)\n        pdf.set_font('', 'U')\n        pdf.add_page()\n        pdf.write(5, filenames)\n        pdf.add_page()\n        pdf.write(5, stock_ticker)\n        pdf.add_page()\n        pdf.image(filenames,x,y,w,h)\n    pdf.output(output_file, \"F\")\n","a7db171a":"def images_to_pdf(stock_list,output_file):\n    pdf = FPDF('P','mm','A4') # create an A4-size pdf document \n    x,y,w,h = 5,5,200,250 #define margins\n    # imagelist is the list with all image filenames\n    filenamelist = []\n    for dirname, _, filenames in os.walk('\/kaggle\/working\/png'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n            filenamelist.append(os.path.join(dirname, filename))\n        #print(filenames)\n    stock_ticker = ''\n    for stock in stock_list:\n        if any(stock in s for s in filename):\n            stock_ticker = stock\n        # whatever\n    for filenames in filenamelist:\n        print(filenames)\n    # Begin with regular font\n        pdf.set_font('Arial', '', 14)\n        pdf.set_text_color(0, 0, 255)\n        pdf.set_font('', 'U')\n        pdf.add_page()\n        pdf.write(5, filenames)\n        pdf.add_page()\n        pdf.write(5, stock_ticker)\n        pdf.add_page()\n        pdf.image(filenames,x,y,w,h)\n    pdf.output(output_file, \"F\")\n","81a2e9e3":"def neural_prophet_plot(df, param, stock, image_no):\n    # Check the dataset\n    #df.head()\n    # Create Dataset based on the FB Prophet standard ds\/y\n    df2 = pd.DataFrame([], columns = ['ds', 'y'])\n    df2.columns=['ds','y']\n    df2['ds']=pd.to_datetime(df.index,format='%Y-%m')\n    #Assign the Parameter\n    df2['y']=df[param].values\n    \n    #create a new Neural Prophet Model\n    model=NeuralProphet(n_changepoints=30,\n                        changepoints_range=0.90,) \n    metrics = model.fit(df2, freq=\"D\")\n    metrics.head(3)\n    #Build the future dataframe\n    future = model.make_future_dataframe(df2, periods=365, n_historic_predictions=len(df2))\n    future.tail(3)\n    #Build the forecast\n    forecast = model.predict(future)\n    print(list(forecast.columns))\n    # plots the model predictions\n    fig1 = model.plot(forecast)\n    \n    # plots the individual forecast components for the given time period.\n    fig = model.plot_components(forecast, residuals=True)\n   \n    # visualizes the model parameters.\n    fig2 = model.plot_parameters()\n \n    filename = '\/kaggle\/working\/png2\/'+ str(image_no) + '_' + stock + '_natural_prophet_forecast.png'\n    model.plot_components(forecast).savefig(filename)\n\n    plt.show()","74ec5b8f":"Symbols = ['MMM','AXP','AAPL','BA',\n           'CAT','CVX','CSCO','KO',\n           'DOW','XOM','GS','HD',\n           'INTC','IBM','JNJ','JPM',\n           'MCD','MRK','MSFT','NKE',\n           'PFE','PG','RTX','TSLA',\n           'TRV','UNH','VZ','V',\n           'WBA','WMT']\n\n#Create output directory to save images\npath = '\/kaggle\/working\/png'\npath2 = '\/kaggle\/working\/png2'\n# Check whether the specified path exists or not\nisExist = os.path.exists(path)\nif not isExist:\n  os.makedirs(path)\n  print(\"The new png directory is created!\")\n# Check whether the specified path exists or not\nisExist = os.path.exists(path2)\nif not isExist:\n  os.makedirs(path2)\n  print(\"The new png directory is created!\")\n\nstart_date='2015-01-01'\nprint(\"Let us evaluate for all of DJIA components from 2015\")\n","3d68ea1e":"i=0\nfor stock in Symbols:\n    df = collect_data(stock,start_date) #Collect the data\n    plot_close_val(df, 'Close', stock) # Plot the Closing Price\n    i = i + 1\n    fb_prophet_plot(df, 'Close', stock, i)\n    neural_prophet_plot(df, 'Close', stock, i)\n\nimages_to_pdf(Symbols,\"FB_Prophet_Forecast_Outputs_DJIA.pdf\")\nimages_to_pdf_np(Symbols,\"Natural_Prophet_Forecast_Outputs_DJIA.pdf\")\nprint(\"All forecasting done!\")","7e1c7eee":"## Let us try the visualizations","d63c5fdf":"### Define a function to let out a Line plots for the data passed","b91de949":"## Let us define some functions first","9a8eb8bc":"## Let us try Facebook Prophet","c6ad9dab":"### Define a facebook plot. \n#### Do the following\n* > _Create a dataset on FB Prophet standard with 'DS'and 'Y' value_\n* > _Create a new Prophet Model with interval_width=0.95,yearly_seasonality=True_\n* > _Fit the Model_\n* > _Predict the future for 50 periods_\n* > _Save the predicted Model_\n* > _Plot the Model with the following types of plots_\n* >> _Prediction Vs Actual Value for data Shared for 50 periods_\n* >> _Future Forecast_\n* >> _Seasonality Trends_\n* >>> _Weekly_ \n* >>> _Yearly_\n* >>> _Monthly_\n","e492c3e0":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.8px\">\n<p style=\"padding: 32px;   color:white;\"><br><center>Dow Jones Industrial Average(DJIA) Stock Prediction of National Stock Exchange Using Facebook Prophet and Neural Prophet Libraries<\/center><br><be>\n<\/p>\n<\/div>\n\n## Use of Facebook and Neural Prophet for Stock Forecasting\u00b6\n### Dow Jones Industrial Average(DJIA) Stock forecast\n\n<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#01234FF;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.8px\">\n<p style=\"padding: 12px;   color:white;\">\nThis kernel uses Facebook Prophet (which uses SKLEARN) and Neural Prophet (which uses PyTorch) libraries to predict stocks. This kernel splits the NSE 500 stocks into ten folds and creates 10 output files each for the stocks in a PDF Format\n<\/p>\n<\/div>\n\n\n<div class=\"alert alert-block alert-info\"> \n    <b> Task-1 \ud83d\udccc<\/b> Yahoo! DataReader Download <br><br>\n    <b> Task-2 \ud83d\udccc<\/b> Facebook Prophet Modeling and Forecast<br><br>\n    <b> Task-3 \ud83d\udccc<\/b> Neural Prophet Modeling and Forecast<br><br>\n<\/div>\n\n###  Yahoo! DataReader Download\n<div class=\"alert alert-block alert-info\">\n<b>Step-1:<\/b> Download data using Yahoo! Finance Data Reader<\/div>\n\n###  Facebook Prophet Models\n<div class=\"alert alert-block alert-info\">\n<b>Step-2:<\/b> Build Facebook Prophet Input dataset<\/div>\n<div class=\"alert alert-block alert-info\">\n<b>Step-3:<\/b> Run Prophet Model<\/div>\n<div class=\"alert alert-block alert-info\">\n<b>Step-4:<\/b> Generate Model Visualization <\/div>\n<div class=\"alert alert-block alert-info\">\n<b>Step-5:<\/b> Generate the Image Files <\/div>\n<div class=\"alert alert-block alert-info\">\n<b>Step-6:<\/b> Consolidate Image Files for Facebook Prophet Model <\/div>\n\n###  Neural Prophet Models\n<div class=\"alert alert-block alert-warning\">\n<b>Step-7-11:<\/b> Repeat Steps 2-6 for Neural Prophet Model <\/div>\n\n\n\n\n\n<h1 id=\"heading\">\nIntroductory Markup\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/kalilurrahman\/nifty-50-stock-pred-fb-neural-prophet-lib\/#heading\">\u00b6<\/a>\n<\/h1>\n","dd4cfb1c":"## Use Yahoo Reader to fetch the data","f28c313d":"## Define an image to PDF function\n","769c94fb":"## Try Natural Prophet Library"}}