{"cell_type":{"51334143":"code","89103db8":"code","000fd1e8":"code","e07323d7":"code","84217cab":"code","fa548c9c":"code","7a900c26":"code","4cc2498d":"code","f679ac64":"code","61ba7789":"code","de6de7d3":"code","4499673c":"code","2173020e":"code","ff4fb1ad":"code","aeb28513":"code","3f56ecec":"markdown","9bdc63ca":"markdown","f0418ccf":"markdown","dad8c20c":"markdown","9c362d48":"markdown","da83c5ff":"markdown","78d819ec":"markdown","10036c0c":"markdown"},"source":{"51334143":"import re\nimport nltk\nimport spacy\nimport plotly as plt\nimport scipy as sp\nimport pandas as pd\nimport en_core_web_sm\nimport en_core_web_lg\nfrom re import search\nfrom ipywidgets import *\nfrom spacy.matcher import PhraseMatcher\nfrom IPython.display import display, HTML","89103db8":"nlp = en_core_web_sm.load()","000fd1e8":"data = pd.DataFrame(\n    [\"\"\"RASPBERRY FILLING (INVERT SUGAR, CORN SYRUP, SUGAR, RASPBERRY PUREE, GLYCERIN, \n    MALTODEXTRIN, MODIFIED CORN STARCH, RASPBERRY JUICE CONCENTRATE, SODIUM ALGINATE, \n    METHYLCELLULOSE, VEGETABLE JUICE FOR COLOR (RADISH, CARROT, APPLE, BLACKCURRANT, \n    HIBISCUS CONCENTRATES), MONOCALCIUM PHOSPHATE, XANTHAN GUM, DICALCIUM PHOSPHATE, \n    CITRIC ACID, NATURAL FLAVORS, MALIC ACID), WHOLE GRAIN ROLLED OATS, \n    WHOLE GRAIN WHEAT FLOUR, ENRICHED WHEAT FLOUR (BLEACHED WHEAT FLOUR, \n    MALTED BARLEY FLOUR, NIACIN, REDUCED IRON, THIAMIN MONONITRATE, RIBOFLAVIN, \n    FOLIC ACID), VEGETABLE OIL BLEND (CANOLA, PALM, PALM KERNEL), INVERT SUGAR, \n    SUGAR, GLYCERIN, CONTAINS LESS THAN 2% OF THE FOLLOWING: WHEY, SOLUBLE CORN FIBER, \n    CALCIUM CARBONATE HONEY, WHEAT BRAN, SALT, POTASSIUM BICARBONATE (LEAVENING), \n    SORBITAN MONOSTEARATE, VITAL WHEAT GLUTEN, CORN STARCH, XANTHAN GUM, REDUCED IRON, \n    NIACINAMIDE, PYRIDOXINE HYDROCHLORIDE (VITAMIN B6), DICALCIUM PHOSPHATE, ZINC OXIDE, \n    VITAMIN A PALMITATE, FOLIC ACID, THIAMIN HYDROCHLORIDE (VITAMIN B1), RIBOFLAVIN \n    (VITAMIN B2), CYANOCOBALAMIN (VITAMIN B12), NATURAL FLAVOR, MOLASSES,]\"\"\", \n     \"\"\"MILK, CREAM, SKIM MILK, SUGAR, BLUE FROSTING (CORN SYRUP, \n     HIGH FRUCTOSE CORN SYRUP, WATER, STABILIZERS (FOOD STARCH-MODIFIED, CELLULOSE GUM, \n     DEXTROSE, CARRAGEENAN, GUM ARABIC, CITRIC ACID, TRICALCIUM PHOSPHATE, \n     SILICON DIOXIDE), TITANIUM DIOXIDE FOR COLOR, ARTIFICIAL FLAVOR, CITRIC ACID, \n     BLUE #1), CORN SYRUP, SEQUIN CANDY (SUGAR, CORN STARCH, RICE FLOUR, \n     PARTIALLY HYDROGENATED VEGETABLE OIL (SOYBEAN, COTTONSEED), GUM ARABIC, XANTHAN GUM, \n     CONFECTIONER GLAZE, NATURAL AND ARTIFICIAL FLAVORS, MONO & DIGLYCERIDES, \n     POLYSORBATE 60, TITANIUM DIOXIDE FOR COLOR, YELLOW 5, YELLOW 6, BLUE 1, RED 3, \n     BLUE 1 LAKE), CONTAINS 1% OR LESS OF THE FOLLOWING: NATURAL AND ARTIFICIAL FLAVORS, \n     CAROB BEAN GUM, GUAR GUM, MONO & DIGLYCERIDES, CARRAGEENAN CELLULOSE GEL, \n     CELLULOSE GUM,\"\"\", \n     \"\"\"CREAM, SKIM MILK, LIQUID SUGAR, SEA SALT CARAMEL (CORN SYRUP, WATER, \n     SWEETENED CONDENSED SKIM MILK (SUGAR, WATER, NONFAT MILK SOLIDS), BUTTER (CREAM, \n     SALT), SEA SALT, CARRAGEENAN SODIUM BICARBONATE), MILK, CARAMEL BASE (CORN SYRUP, \n     SUGAR, WATER, NONFAT MILK SOLIDS, BUTTER (CREAM, SALT), SALT), \n     CARAMEL SEA SALT TRUFFLES (SUGAR, COCONUT OIL, CORN SYRUP, SWEETENED CONDENSED MILK \n     (MILK, SUGAR), CREAM, NONFAT MILK, MILK, WATER, COCOA (PROCESSED WITH ALKALI), \n     BUTTER (CREAM, SALT), SEA SALT, SOY LECITHIN, NATURAL FLAVORS), EGG YOLK, \n     CARAMEL COLOR,\"\"\"], \n    columns = [\"ingredients\"])","e07323d7":"data[\"tokenized\"] = [nlp(text) for text in data.ingredients]\ndata","84217cab":"#This is a function to extract 'root ingredients' from ingredient lists\n#A 'root ingredient' is defined as a basic component of an item\n#(similar to a factor in mathematics)\n\ndef transform(data, index):\n    columns = [\"ingredient\", \"subingredient_1\", \"subingredient_2\", \"root_ingredient\"]\n    new_data = pd.DataFrame(columns=columns)\n    ingredient = ''\n    subingredient_1 = ''\n    subingredient_2 = ''\n    paren_count = 0\n    to_append = pd.DataFrame(columns=columns)\n    for token in data:\n        if str(token) ==  '(':\n            paren_count = paren_count + 1\n        elif str(token) ==  ')':\n            paren_count = paren_count - 1\n\n        if str(token) not in ['(', ')', ',', ':']:\n            if paren_count == 0:\n                ingredient = ingredient + ' ' + str(token)\n            elif paren_count == 1:   \n                subingredient_1 = subingredient_1 + ' ' + str(token)\n            elif paren_count == 2:\n                subingredient_2 = subingredient_2 + ' ' + str(token)        \n\n        elif str(token) in [',', ':']:\n            if (ingredient != '') | (subingredient_1 != '') | (subingredient_2 != ''):\n                new_data=new_data.append(to_append)\n                to_append = pd.DataFrame({'ingredient': ingredient.strip(), \n                                          'subingredient_1': subingredient_1.strip(),\n                                          'subingredient_2': subingredient_2.strip()},\n                                         index=[index])\n            if paren_count == 0:\n                ingredient = ''\n                subingredient_1 = ''\n                subingredient_2 = ''\n            elif paren_count == 1:\n                subingredient_1 = ''\n                subingredient_2 = ''\n            elif paren_count == 2:\n                subingredient_2 = ''\n    return new_data","fa548c9c":"new_data = pd.DataFrame()\n\nfor i in [0, 1, 2]:\n    new_data = new_data.append(transform(data.tokenized[i], i))\n    \nnew_data","7a900c26":"def get_root(new_data):\n    new_data.root_ingredient = new_data.subingredient_2\n    new_data.root_ingredient[new_data.root_ingredient == ''] = new_data[new_data.root_ingredient == ''].subingredient_1\n    new_data.root_ingredient[new_data.root_ingredient == ''] = new_data[new_data.root_ingredient == ''].ingredient\n    return new_data.root_ingredient","4cc2498d":"i_data = get_root(new_data)\ni_data","f679ac64":"def clean(i_data):\n    booleans = [[False if search(\"CONTAIN\", x) != None else True for x in i_data],\n               [False if search(\"WITH ALKALI\", x) != None else True for x in i_data]]\n    indexes = list(map(all, zip(*booleans)))\n    fin_data = i_data[indexes]\n    return fin_data     ","61ba7789":"fin_data = clean(i_data)\nfin_data","de6de7d3":"print('Here are the items in list 1: \\n' + \n      str(list(fin_data[fin_data.index==0].unique())), end = ' ')","4499673c":"print('Here are the items in list 2: \\n' + \n      str(list(fin_data[fin_data.index==1].unique())), end = ' ')","2173020e":"print('Here are the items in list 3: \\n' + \n      str(list(fin_data[fin_data.index==2].unique())), end = ' ')","ff4fb1ad":"synonyms = pd.DataFrame(columns=[\"syn1\", \"syn2\"])\ningredient = ''\nsubingredient = ''\n\nfor i in range(1, len(new_data.ingredient)-1):\n    if (ingredient != new_data.ingredient.iloc[i]) & (new_data.ingredient.iloc[i+1] != new_data.ingredient.iloc[i]):\n        if new_data.subingredient_1.iloc[i] != '':\n            synonyms = synonyms.append({\"syn1\": new_data.ingredient.iloc[i],\n                                       \"syn2\": new_data.subingredient_1.iloc[i]},\n                                      ignore_index=[1])\n    if (subingredient != new_data.subingredient_1.iloc[i]) & (new_data.subingredient_1.iloc[i+1] != new_data.subingredient_1.iloc[i]):\n        if new_data.subingredient_2.iloc[i] != '':\n            synonyms = synonyms.append({\"syn1\": new_data.subingredient_1.iloc[i],\n                                        \"syn2\": new_data.subingredient_2.iloc[i]},\n                                       ignore_index=[1])\n    ingredient = new_data.ingredient.iloc[i]\n    subingredient = new_data.subingredient_1.iloc[i]\n    \nsynonyms","aeb28513":"fin_toke = [nlp(text) for text in fin_data]\n\ncolumns = [\"descriptor\", \"type\"]\ndescriptors = pd.DataFrame(columns=columns)\nfor i in range(0, len(fin_toke)):\n    for token in fin_toke[i]:\n        print('%r (%s)' % (str(token), token.dep_))\n        descriptors = descriptors.append({\"descriptor\": token,\n                                          \"type\": token.dep_}, ignore_index=True)","3f56ecec":"# Identify descriptors\n\nTo address this task, I used spaCy's dependency parser. To understand which words are used as descriptors, we want to focus on the words in the list labeled \"compound\" and \"amod,\" as shown below. Words labeled \"ROOT\" are either being described or stand alone.","9bdc63ca":"## Minor transformation function\n\nThis function takes the innermost ingredients (i.e., the elemental components of the list of ingredients nested within the highest number of parentheses) and returns a list of root ingredients.","f0418ccf":"## Cleaning function\n\nThis function removes explanatory text that does not pertain to the ingredients, such as \"CONTAINS LESS THAN 2 % OF THE FOLLOWING,\" by using regular expressions.","dad8c20c":"# Identify synonyms\n\nFor this task, I looked for instances in which a parent ingredient has only one item in parenthesis next it (e.g., \"CYANOCOBALAMIN (VITAMIN B12)\"), because I took this convention to indicate an alternate name for the parent ingredient. \n\nAs shown below, there are two instances in which the text in parentheses contains additional information rather than a synonym (although perhaps \"LEAVENING\" could be considered a synonym representing a broader category, in which case there is only one such instance). This is an issue that can be addressed by combining the method used for this task with the methods used in task 1.","9c362d48":"# Introduction\n\nIn this notebook, some functions are developed to parse the ingredients in lists of ingredients. ","da83c5ff":"# Identify unique ingredients\n\nFor this task, I created three functions: a major transformation function, a minor transformation function, and a cleaning function. ","78d819ec":"## Major transformation function\n\nThe goal of this function is to create a dataframe that can be used to obtain a list of \"root\" ingredients based on a complex list of ingredients. For example, for the first list, \"RASPBERRY FILLING\" is a multi-ingredient component composed of several \"root\" ingredients, such as \"SUGAR.\" Rather than include compound ingredients such as \"RASPBERRY FILLING\" in the final output of unique ingredients, I chose to output only the unique root components.\n\nThe output dataframe has ingredient, sub-ingredient 1, sub-ingredient 2, and root ingredient columns; however, the root ingredient column is filled with the next function.","10036c0c":"## Results of Task 1"}}