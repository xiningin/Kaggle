{"cell_type":{"e03312a4":"code","f3eb27a1":"code","6231caa6":"code","a36b6c06":"code","fbd89ff6":"code","d8194436":"code","119b5304":"code","f1161d73":"code","cce507af":"code","fb46b1f8":"code","29483b0a":"code","5b8ab2be":"code","c9901e21":"code","7b8f6473":"code","1411611c":"code","9434b121":"code","5bf8ad69":"code","a54d7723":"code","c4308c20":"code","19f96b4a":"code","577a1124":"code","360436fb":"code","a8619564":"code","96903c88":"code","8d0040bb":"code","6587d874":"code","8fd18b65":"code","55d8a63d":"code","302521cd":"code","d97855a3":"code","51e07ca1":"code","465e158f":"code","94de2064":"code","8d9b3f0a":"code","6bb58868":"code","6343cb27":"code","07b0f2fd":"code","d085cfc3":"code","105f0bd2":"code","6f7962de":"code","2ab1c9b7":"code","ca916c0d":"code","7dcea8ca":"code","7d4dfe33":"code","464c0ebc":"code","c217add3":"code","c706a84a":"code","c354a28b":"code","265d9c09":"markdown","b47987ed":"markdown","1cc12341":"markdown","40276127":"markdown","6ba74d7b":"markdown","93d89baa":"markdown","72a2fd49":"markdown","a661d090":"markdown","e9c908be":"markdown","6101895f":"markdown","9e308683":"markdown","a0fe94e7":"markdown","6ca9b6e8":"markdown","345b4596":"markdown","23795c72":"markdown","a719622e":"markdown","4213b44e":"markdown","5c9d2179":"markdown","71d36dca":"markdown","0599665e":"markdown","90c9a361":"markdown","5efa7a33":"markdown","e63eb9ea":"markdown","49769a18":"markdown","00a3179b":"markdown","d174734f":"markdown","a0dae0c7":"markdown"},"source":{"e03312a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import model_selection\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom mlxtend.preprocessing import minmax_scaling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.decomposition import PCA\nimport pylab as pl\nfrom kmodes.kmodes import KModes\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3eb27a1":"train = pd.read_csv('..\/input\/telecom-churn-datasets\/churn-bigml-80.csv')\ntest = pd.read_csv('..\/input\/telecom-churn-datasets\/churn-bigml-20.csv')","6231caa6":"train.sample(10)","a36b6c06":"train.describe()","fbd89ff6":"test.sample(10)","d8194436":"test.describe()","119b5304":"train.info()","f1161d73":"test.info()","cce507af":"train['State'].nunique()","fb46b1f8":"train['State'].value_counts()","29483b0a":"print('The percentage of customers churning from the company is: %{}'.format((train['Churn'].sum()) *100\/train.shape[0]) ) # as the Churn column data type is boolean, every True value will be summed as '1'...I'll convert them later into binary 0's and 1's when I do the data cleaning part","5b8ab2be":"plt.figure(figsize=(20,6))\nsns.set_style('whitegrid')\nsns.barplot(x='State',y='Churn', data=train)","c9901e21":"sns.barplot(x='Churn', y='Customer service calls',data=train)","7b8f6473":"sns.barplot(x='Churn', y='Account length',data=train)","1411611c":"plt.hist(train['Account length'], bins=400)\nplt.show()","9434b121":"churn_intl = train.groupby(['Churn','International plan']).size()\nchurn_intl.plot()\nplt.show()\n","5bf8ad69":"churn_voicem = train.groupby(['Churn','Voice mail plan']).size()\nchurn_voicem.plot()\nplt.show()","a54d7723":"train.head()","c4308c20":"train['Total charge'] = train['Total day charge'] + train['Total eve charge'] + train['Total night charge'] + train['Total intl charge']\ntest['Total charge'] = test['Total day charge'] + test['Total eve charge'] + test['Total night charge'] + test['Total intl charge']","19f96b4a":"sns.boxplot(x='Churn',y='Total charge', data = train)","577a1124":"train2 = train.copy()\ntest2 = test.copy()\ntrain2","360436fb":"train2['Churn'] = train2['Churn'].map({True:1,False:0}) # no need to do it for test dataset because Churn column will be dropped later.\n\ntrain2['International plan'].replace(['No','Yes'],[0,1],inplace=True)\ntest2['International plan'].replace(['No','Yes'],[0,1],inplace=True)\n\n# Now, I'll use the label encoder preprocessing technique:\n\nencoder = LabelEncoder()\ncoded_voicem_train = encoder.fit_transform(train2['Voice mail plan'])\ntrain2['Voice mail plan'] = coded_voicem_train\ncoded_voicem_test = encoder.transform(test2['Voice mail plan'])\ntest2['Voice mail plan'] = coded_voicem_test","a8619564":"train2.head()","96903c88":"test2.head()","8d0040bb":"train2.corr()","6587d874":"plt.figure(figsize=(15,15))\nsns.heatmap(train2.corr() , annot =True)","8fd18b65":"train3 = train2.drop(['Total day minutes','Total eve minutes','Total night minutes', 'Total intl minutes'], axis=1)\n","55d8a63d":"features = ['International plan','Total charge','Customer service calls']\nX_init = train3[features]\ny = train3['Churn']\nXtest_init = test2[features]\nytest = test2['Churn']","302521cd":"X_init.head()","d97855a3":"# mix-max scale the data between 0 and 1\nX = minmax_scaling(X_init, columns = features)\nXtest = minmax_scaling(Xtest_init, columns = features)\nXtest","51e07ca1":"Xtrain,Xval,ytrain,yval = train_test_split(X,y,train_size=0.8)","465e158f":"Xtrain.shape","94de2064":"Xval.shape","8d9b3f0a":"ytrain.shape","6bb58868":"yval.shape","6343cb27":"models = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\nresults = []\nnames = []\nfor name,model in models:\n    kfold = model_selection.KFold(n_splits=10)\n    cv_result = model_selection.cross_val_score(model,Xtrain,ytrain, cv = kfold, scoring = \"accuracy\")\n    names.append(name)\n    results.append(cv_result)\nfor i in range(len(names)):\n    print(names[i],results[i].mean())","07b0f2fd":"chosen_model = KNeighborsClassifier()\nparam = {'n_neighbors': [1,2,3,4,5,6,7]}\ngrid = GridSearchCV(estimator= chosen_model, param_grid=param, cv=5)\ngrid.fit(Xtrain,ytrain)\nprint(grid.best_params_)\n","d085cfc3":"best_model = KNeighborsClassifier(n_neighbors=5)\nbest_model.fit(Xtrain,ytrain)\npred_val = best_model.predict(Xval)\npred = best_model.predict(Xtest)","105f0bd2":"print(\"Accuracy Score is:\")\nprint(accuracy_score(ytest, pred))\nprint(accuracy_score(yval, pred_val))\nprint()","6f7962de":"print(\"Classification Report:\")\nprint(classification_report(ytest, pred))","2ab1c9b7":"conf = confusion_matrix(ytest,pred)\nlabel = [\"0\",\"1\"]\nsns.heatmap(conf, annot=True, xticklabels=label, yticklabels=label)\nplt.show()","ca916c0d":"# train3 is fine for this.\nclust_data = train3.drop(['Churn','State'], axis=1)\ninertia = []\nfor i in range(1,11):\n    clust_model = KMeans(n_clusters= i , init='k-means++', n_init=10)\n    clust_model.fit(clust_data)\n    inertia.append(clust_model.inertia_)\n\nplt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","7dcea8ca":"clust_model = KMeans(n_clusters= 4 , init='k-means++', n_init=10)\nclusters = clust_model.fit_predict(clust_data)\nprint(silhouette_score(clust_data, clusters))\n","7d4dfe33":"train['clusters'] = pd.Series(clusters,index=train.index)\ntrain","464c0ebc":"clust_churn = train.groupby('clusters').Churn.sum()\nclust_churn","c217add3":"train['clusters'].value_counts()","c706a84a":"train.head()","c354a28b":"train['charge'] = train['Total charge']\ncharge_clust = train.groupby('clusters').charge.mean()\ncharge_clust","265d9c09":"# Feature Selection","b47987ed":"# Model Selection","1cc12341":"Here comes the scaling part...\nThe data range in 'Total charge' is higher that other features, so we'll scale it.\n","40276127":"We can also plot the correlation in heatmap to make it easier for us:","6ba74d7b":"# Load libraries","93d89baa":"Feature selection means choosing the best features that highly affects the target and not redundant with each other.","72a2fd49":"# Introduction\nThis is a comprehensive notebook that might be useful to data scientists in Telecom industry. It studies the case of Customers Churning which is very common in Telecommunication companies. In this project, I did EDA, perdictive modelling and customers clustering. Churn analysis is the evaluation of a company\u2019s customer loss rate in order to reduce it. Also referred to as customer attrition rate. It's importatnt because keeping an existing customer saves more money to the company than attracting a new one. Churn rate has strong impact on the life time value of the customer because it affects the length of service and the future revenue of the company.","a661d090":"# Customers Clustering","e9c908be":"Let's add the clusters to the original train data","6101895f":"We'll make a list of tuples. Each tuple contains the model name and the model creation instance. Then, we'll use each model with cross validation technique k-folds to avoid over-fitting. The choice of the best model will depend on its score.","9e308683":"# Data cleaning","a0fe94e7":"Here comes the juicy part !\nNow that our data is ready, lets build our model, but first we'll split X into training data(80%) and validation data(20%)","6ca9b6e8":"Now,we'll clean the data and prepare it for prediction.\n\n\nAs you noticed earlier, when we used .info() with both train and test datasets, we haven't found any null values ( luckily!), but if we had found them, we would either drop columns with the missing values or impute the missing values to the mean, median or mode of the values in the same column.\n\nWe still have columns with categorical values though (dtype = object), so we should deal with them because predictive models deal only with numerical values.\n\nFor 'Churn', 'International plan' and 'Voice mail plan' columns, I will use multiple techniques to deal with categorical values for illustration purpose, but you can use only one of them if you want, since each of the 3 column has only 2 unique values.\n\nBut first, let's work on a copy of the original dataset. ( It's always a good idea to work on copies, not on the original data)","345b4596":"# EDA","23795c72":"We can notice that:\nSome features are correlated to each other (have a high coefficient with each other).\n\n'Total day minutes' and 'Total day charge' for example are directly related because their coeff is 1, so we'll delete one of them. I choose to delete all the columns with the minutes count because they are redundant.","a719622e":"Now, we'll select the best features that have the highest correlation with the target 'Churn'.","4213b44e":"From the previous analysis we knew the following insights:\n* 14% of customers have churned.\n* Texas has the highest number of customer churns.\n* Churned customers have called customer service more than remaining customers. Maybe that means that customer service in this company needs more training in retaining customers.\n* Churned customers had higher charges to pay than remaining cutomers. Maybe that means that the company needs to work in more effective plans to facilitate late payments.\n* Account length (Account duration) is normally distributed.\n","5c9d2179":"A good method we can use to study features correlation is .corr()","71d36dca":"Telecom companies use recommendation engines to suggest the best packages for the clients based on their history. Customer clustering helps alot in segmentation of customers into groups of similarities. I'm not going to build a recommendation engine here, but rather I'll do the clustering.","0599665e":"Let's further inspect those clusters:","90c9a361":"KNeighboursClassifier model has the highest score, hence it will be chosen. We'll choose the best n_neighbours parameter using Grid Search which is a class used to fine-tune your model to get the best results.","5efa7a33":"# Explore train and test data","e63eb9ea":"Let's evaluate our model:","49769a18":"# Read the data\n\nThe author has divided the original data into two datasets, train and test, where he sampled 80% of the data into train and validation data and 20% into test data.","00a3179b":"I'll start with k-means clustering which requires the data to be numerical, so I'll deal with the processed dataset.\nAlso, we'll make an elbow curve to determine the optimal number of clusters.","d174734f":"The optimal number of clusters is 4.","a0dae0c7":"Now, some data might need scaling. I usually delay that until I choose the features that has higher correlation with the target ( aka feature selection or dimensionality reduction), then scale whatever data needs scaling in the features that I chose. That will lead us to the next step which is:"}}