{"cell_type":{"a09bfb93":"code","0f6808f7":"code","2205fcb4":"code","8e8ec118":"code","3f0660df":"code","736324a6":"code","309d77ad":"code","12ee2520":"code","56e43164":"code","e317341e":"code","fce33532":"code","e0e47040":"code","67e9714a":"code","6f90f4f2":"code","c7f20587":"code","42815b07":"code","1008a5ee":"code","3f2335ec":"code","1ddcfc2c":"code","bcc36070":"code","e7f3ceb8":"code","5a2689e7":"markdown","66d4a1dd":"markdown","4f076ff4":"markdown","7cace7f5":"markdown","5c7852af":"markdown","8e759033":"markdown","aa3890b1":"markdown","98b84b3f":"markdown"},"source":{"a09bfb93":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nimport keras.models as M\nimport keras.layers as L\nimport tensorflow as tf\nimport keras.optimizers as opt\nimport keras.initializers as init\nfrom column_encoder import *\nimport seaborn as sns\nfrom numpy.random import randn\nfrom numpy import hstack","0f6808f7":"data=pd.read_csv('..\/input\/churn-for-bank-customers\/churn.csv')","2205fcb4":"data.head()","8e8ec118":"# In this data the first three columns are not needed for the model so we will drop them\ndata.drop(columns=data.columns[:4],axis=1,inplace=True)","3f0660df":"# Using column encoder to transform categorical data to numerics\nfit(data,['Geography','Gender'])\ntransform(data)","736324a6":"# Having another look at the data\ndata.head()","309d77ad":"# Let's see the composition of the exited customers\nsns.countplot(x='Exited',data=data)","12ee2520":"# Since we have a lot less data for 1 let's make synthetic data for 1 in this file :)\ndef make_determinator_model(input_shape=9):\n    model=M.Sequential(name='Determinator_Model')\n    model.add(L.Dense(1000,input_dim=input_shape,activation='relu'))\n    model.add(L.Dense(100,'relu'))\n    model.add(L.Dense(1,'sigmoid'))\n    model.compile(loss='binary_crossentropy',metrics=['accuracy'],optimizer='adam')\n    return model","56e43164":"# Make a function to create random latent dimension points for us\ndef make_random_latent(latent_dim=6,n=100):\n    X=randn(latent_dim*n)\n    X=np.absolute(X)*-10\n    X=X.reshape((n,latent_dim))\n    return X","e317341e":"# Making Generator model Function for creating samples for class 1\ndef make_generator_model(input_shape,output_shape=9):\n    model=M.Sequential(name=\"Generator_Model\")\n    model.add(L.Dense(1000,activation='relu',input_dim=input_shape))\n    model.add(L.Dense(output_shape,activation='linear'))\n    return model","fce33532":"# Making Fake Samples \ndef make_fake_samples(generator,latent_dim,n):\n    fake=make_random_latent(latent_dim,n)\n    predictions=generator.predict(fake)\n    y=np.ones((n,1))\n    return predictions,y","e0e47040":"# Making GAN model Function\ndef make_gan_model(generator,discriminator):\n    discriminator.trainable=False\n    model=M.Sequential(name='GAN_Model')\n    model.add(generator)\n    model.add(discriminator)\n    model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n    return model","67e9714a":"# Making a function to get the data from the dataframe\ndef get_data(data,target='Exited',batch_size=128):\n    X=data.drop(target,axis=1).values\n    y=data[target].values\n    random_list=np.random.choice(len(data),batch_size)\n    X=X[random_list]\n    y=y[random_list]\n    return X,y","6f90f4f2":"# Making a function to train the model\ndef train_model(g_model,d_model,gan_model,data,epochs=1000,n_counter=200,latent_dim=16,n=100,batch_size=128):\n    for i in range(epochs):\n        X,y=get_data(data,batch_size=128)\n        d_model.train_on_batch(X,y)\n        fake_x=make_random_latent(latent_dim,n)\n        fake_y=np.ones((n,1))\n        gan_model.train_on_batch(fake_x,fake_y)\n        if i%n_counter==0:\n            fake_x2=make_random_latent(latent_dim,n)\n            fake_y2=np.ones((n,1))\n            loss,acc=gan_model.evaluate(fake_x2,fake_y2,verbose=0)\n            print('Epoch number is :',i,' The accuracy of the gan model for now is :',acc,'  Loss of the gan model is :',loss)\n        ","c7f20587":"# Let's make the models now\nlatent_dim=16\nd_model=make_determinator_model()\ng_model=make_generator_model(latent_dim,output_shape=9)\ngan_model=make_gan_model(g_model,d_model)","42815b07":"# Let's look at the summary of the models\nd_model.summary()","1008a5ee":"# Let's look at the summary of the generator model\ng_model.summary()","3f2335ec":"# Sumamry of the gan model\ngan_model.summary()","1ddcfc2c":"# Calling the train model which will train the model\ntrain_model(g_model,d_model,gan_model,data,latent_dim=latent_dim)","bcc36070":"# The model has worked perfectly . Let's have a look at the random samples that we have made now\ntest_data,y=make_fake_samples(g_model,16,4)","e7f3ceb8":"# Let's try predictions on our already made model\nd_model.predict_classes(test_data)","5a2689e7":"## Reference taken from https:\/\/machinelearningmastery.com\/how-to-develop-a-generative-adversarial-network-for-a-1-dimensional-function-from-scratch-in-keras\/","66d4a1dd":"# Thank you","4f076ff4":"# Making models and some functions","7cace7f5":"# Having a look and preprocessing data ","5c7852af":"# Importing Packages","8e759033":"# The Samples might not be perfect but they are able to fool our model perfectly . The better the discriminator model the better the random fake samples will be too :)","aa3890b1":"# Reading Data","98b84b3f":"# Calling the functions and having a look at the models"}}