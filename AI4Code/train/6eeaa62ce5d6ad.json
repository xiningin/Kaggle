{"cell_type":{"a1c21f70":"code","28225edf":"code","3da8a985":"code","05cd56e4":"code","089a13a4":"code","941b3acb":"code","1233fa2f":"code","d0d74984":"code","5c963195":"code","c3803b05":"code","72973d76":"code","3f21d648":"code","2841f247":"code","32abf1f4":"code","32734011":"code","f2f67d4d":"code","f618dfcc":"code","41b277e1":"code","a0634cf2":"code","37866d08":"code","2283ab4f":"code","e06ecbf6":"code","453636cd":"code","41f000ca":"code","cc624036":"code","6e3d4741":"code","8c0ae3ff":"code","1c591b87":"code","558ccd73":"code","13c4ad63":"code","c113a81b":"code","deb38cd4":"code","b08c2ca1":"code","c411d85f":"code","be0a8ab1":"code","fe6dca22":"code","148f5e86":"code","b32c25dc":"code","8afe71d8":"code","524df041":"code","efc4e976":"code","ffafed43":"code","658c1f9a":"code","725645b2":"markdown","df4c3e83":"markdown","176ed827":"markdown","cb6089d9":"markdown","191b9904":"markdown","1aeda7a0":"markdown","b1097447":"markdown"},"source":{"a1c21f70":"import tensorflow as tf\nfrom tensorflow import keras \n\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nimport seaborn as sns\n\nimport numpy as np","28225edf":"data = keras.datasets.mnist","3da8a985":"data","05cd56e4":"(x_train, y_train),(x_test, y_test) = data.load_data()","089a13a4":"x_train.shape","941b3acb":"x_train[0] #matrix of 0th image (2D)","1233fa2f":"x_train[0][5] #5th row (if occupied, it will have numbers)","d0d74984":"x_train[0][0] #not occupied with a number","5c963195":"plt.matshow(x_train[0])","c3803b05":"y_train[0]","72973d76":"for i in range(10):\n  plt.matshow(x_train[i])\n","3f21d648":"x_test.shape","2841f247":"y_train[:10]  #images ","32abf1f4":"x_train = x_train\/255\nx_test = x_test\/255","32734011":"x_train[0][5]","f2f67d4d":"#flatten the matrix\n\n#1) numpy (np.flatten)\n#2) np.ravel\n#3) np.reshape()\n#4) keras","f618dfcc":"x_train_flattened = x_train.reshape(len(x_train), 28*28)","41b277e1":"x_test_flattened = x_test.reshape(len(x_test), 28*28)","a0634cf2":"x_train_flattened.shape","37866d08":"x_train_flattened[0]  #1D matrix","2283ab4f":"model = keras.Sequential([keras.layers.Dense(10, input_shape = (784,), activation = 'sigmoid')])\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(x_train_flattened, y_train, epochs = 10)\n\n#Dense - network will become more dense and more combinations will be made\n#10 - number of neurons (each feature will get 10 neurons)\n#input_shape - 784 flattened values\n#metrics - for accuracy\n#optimizer - how many times you have to go back and improve (optimizer is reducing the loss -> feedback is checked -> increasing the efficiency)\n#loss - less the loss, more good the model is (number of times it has not worked well) \n#epochs - number of times the model is looking at the data (10 - 10 times the model is running -> kind of training the model)","e06ecbf6":"model.evaluate(x_test_flattened, y_test)","453636cd":"y_pred = model.predict(x_test_flattened)","41f000ca":"y_pred[0] #probability of the output","cc624036":"#np.argmax -> finds the maximum element from array and returns the index of it\n\nnp.argmax(y_pred[0])  #39.9984276e-01 -> max","6e3d4741":"plt.matshow(x_test[0])","8c0ae3ff":"y_test[0]","1c591b87":"y_pred_label = [np.argmax(i) for i in y_pred] #extracting the labels\/numbers","558ccd73":"y_pred_label","13c4ad63":"cm =  tf.math.confusion_matrix(y_test, y_pred_label)","c113a81b":"cm","deb38cd4":"plt.figure(figsize = (10,7))\nsns.heatmap(cm, annot = True, fmt = 'd')\nplt.xlabel('predicted')\nplt.ylabel('actual')","b08c2ca1":"#adding one more hidden layer\n\nmodel= keras.Sequential([keras.layers.Dense(100,input_shape=(784,),activation='relu'),keras.layers.Dense(10,input_shape=(784,),activation='sigmoid')])\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nmodel.fit(x_train_flattened,y_train,epochs=20)\n","c411d85f":"model.evaluate(x_test_flattened, y_test)","be0a8ab1":"y_pred = model.predict(x_test_flattened)","fe6dca22":"y_pred[0]","148f5e86":"y_pred_label = [np.argmax(i) for i in y_pred]","b32c25dc":"y_pred_label","8afe71d8":"cm =  tf.math.confusion_matrix(y_test, y_pred_label)","524df041":"cm","efc4e976":"plt.figure(figsize = (10,7))\nsns.heatmap(cm, annot = True, fmt = 'd')\nplt.xlabel('predicted')\nplt.ylabel('actual')","ffafed43":"#flattening using keras \nmodel= keras.Sequential([keras.layers.Flatten(input_shape = (28,28)), keras.layers.Dense(100,activation='relu'),keras.layers.Dense(10,activation='sigmoid')])\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nmodel.fit(x_train,y_train,epochs=20)    #not x_train_flattened\n\n#model will flatten the image of 28*28 pixel","658c1f9a":"  model.evaluate(x_test, y_test)","725645b2":"# Implementation of very simple neural network ","df4c3e83":"# Feature Scaling","176ed827":"# Hand-written digit classification using ANN (neural network)","cb6089d9":"in y_train and y_test, the data is already in 1D\n\nbut in x_train and x_test we have images","191b9904":"# Sequential model","1aeda7a0":"actual value 0 and model predicted 0 -> 966 number of times","b1097447":"60000 are data points and 28*28 pixel matrix"}}