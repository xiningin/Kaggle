{"cell_type":{"2d8f7ad1":"code","81481daa":"code","4369a805":"code","7a0e0232":"code","3c02e7db":"code","85b21cf5":"code","78cb7445":"code","ed4cae9a":"code","3a96d8d7":"code","8a254466":"code","3ba61a04":"code","3d05ea60":"code","8f4a5552":"markdown","113ccb7a":"markdown","a5300f17":"markdown","cc99bc83":"markdown","43b60604":"markdown","acd228c3":"markdown","23b0e76f":"markdown","57b6c448":"markdown","fd383e15":"markdown","82bd0e5c":"markdown"},"source":{"2d8f7ad1":"import os,math,random,gc\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pickle\n\nfrom sklearn.preprocessing import normalize as norm\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import backend as K","81481daa":"directory='..\/input\/particle-collisions'","4369a805":"def load_files(directory):\n    X,y=[],[]        \n    #loading images:\n    for f in os.listdir(directory):\n        file=open(directory + '\/' + f,'rb')\n        data=pickle.load(file)\n        file.close()\n        \n        \n        images,targets= data[0],data[1]\n        \n        X += [img for img in images]\n        y += [tar for tar in targets]\n        \n    return np.array(X),np.array(y)\n\nX,y=load_files(directory)\ngc.collect()","7a0e0232":"y=pd.Series(y)\ny=np.array(y.replace({11:0,13:1,211:2,321:3,2212:4}))\nparticle_name={0:'electron',1:'muon',2:'pion',3:'kaon',4:'proton'}","3c02e7db":"def show_images(X,y,n):\n    fig,axes=plt.subplots(math.floor(n\/4),4,figsize=(14,math.floor(n\/4)*8))\n    \n    #sampling examples from data\n    for i in range(n):\n        sample_id=random.choice([i for i in range(len(os.listdir(directory)))])\n        \n        #plotting image with particle name:\n        plt.subplot(math.floor(n\/4),4,i+1)\n        plt.imshow(X[i],cmap='gray')\n        plt.title(f'{particle_name[y[i]]}')\n        plt.colorbar(label='intensity',\n                     fraction=0.4,orientation='horizontal') \n        plt.axis('off')\n        \n    plt.tight_layout()\n    plt.grid('off')\n    plt.show()\n    \nshow_images(X,y,16)","85b21cf5":"print('The counts of particles:')\npd.Series([particle_name[i] for i in y]).value_counts()","78cb7445":"def prepare_images(X):\n    inputs=[]\n    for image in X:\n        image=image\/ 12   # scaling using maximum value.\n        image=np.expand_dims(image,axis=0)\n        inputs.append(image)\n    X_t = np.array(inputs)\n    X_t=X_t.reshape(X_t.shape[0],X_t.shape[2],X_t.shape[3],X_t.shape[1])\n    return X_t \nX_t=prepare_images(X)","ed4cae9a":"print('shape of images: {}'.format(X_t.shape[1:]))\nprint('Number of images: {}'.format(X_t.shape[0]))","3a96d8d7":"x_train,x_val,y_train,y_val=train_test_split(X_t,y,test_size=0.3,shuffle=True)","8a254466":"def build_model(dense,dropout):\n    \n    \n    inp=layers.Input(shape=X_t.shape[1:])\n    \n    \n    #conv block:\n    x=layers.Conv2D(8,(1,1),activation='relu',padding='same')(inp)\n    x=layers.MaxPooling2D(pool_size=(1,1),strides=(1,1))(x)\n    \n    x=layers.Flatten()(x)\n    #Bidirectional Long Short Term Memory\n    x=tf.expand_dims(x,axis=-1)\n    x=layers.Bidirectional(layers.LSTM(8,activation='relu'))(x)\n    \n    for i in range(len(dense)):\n        x=layers.Dense(dense[i],activation='relu')(x)\n        x=layers.Dropout(rate=dropout[i])(x)\n        x=layers.BatchNormalization()(x)\n    \n    out= layers.Dense(5,activation='softmax')(x)\n    \n    model=keras.Model(inputs=inp,outputs=out)\n    \n    return model\n    ","3ba61a04":"dense=[8]\ndropout=[0.5]\n\nmodel=build_model(dense,dropout)\n\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',\n             metrics=['accuracy'])\n\n#callbacks:\nreduce_lr=keras.callbacks.ReduceLROnPlateau(factor=0.5,min_delta=1e-2,patience=2,monitor='val_accuracy',verbose=1)\n\nearly_stopping=keras.callbacks.EarlyStopping(min_delta=1e-3,patience=10,monitor='val_loss',\n                                             restore_best_weights=True)\n","3d05ea60":"#params\nEpochs=30\nbatch=5096\n\nhistory=model.fit(x_train,y_train,batch_size=batch,validation_data=(x_val,y_val),\n                 callbacks=[reduce_lr,early_stopping],epochs=Epochs)\n\nK.clear_session()\ngc.collect()","8f4a5552":"The particle types and their associated labels are as follows:\n\n11: electron\n\n13: muon\n\n211: pion\n\n321: kaon\n\n2212: proton","113ccb7a":"# Imports","a5300f17":"* **Electrons:** Particles that revolve around nuclei of an atom. Has a charge of -e and are the most common type of leptons.\n* **Muons:** Particles similar to electons(class- leptons), but with a higher mass. Have a charge of -e and 1\/2 spin. [ https:\/\/en.wikipedia.org\/wiki\/Muon ]\n* **Pions:** These are Mesons with a Quark and Anti-Quark pair. They are of 3 types : pi+,pi0(nuetral), and pi-. Read more [ https:\/\/en.wikipedia.org\/wiki\/Pion ].\n* **Kaons:** These are Mesons with a Quark and anti-Quark pair, with a 'Strange' Quark or Anti-Quark being one of the pair. They are of 4 types : K+,K- (anti- K+), K0 (nuetral) and  anti - K0 (nuetral).[ https:\/\/en.wikipedia.org\/wiki\/Kaon ].\n* **Protons:** They are centre of nuclei of an atom along with nuetrons. Have a charge of 1e+ and are the heaviest among given particles.\n","cc99bc83":"**Lets visualize the data to see if there are some patterns.**","43b60604":"# loading files.","acd228c3":"**Lets see how many instances of each class we have**","23b0e76f":"**Order of rest mass energies:**\n* **Protons > Kaons > Pions > Muons > Electrons.**\n* So we can expect the intensity of data to be diffrent according to the type of particle in picture.\n","57b6c448":"**Train Test split**","fd383e15":"# Building Model and training.","82bd0e5c":"# Preparing and Splitting Data ."}}