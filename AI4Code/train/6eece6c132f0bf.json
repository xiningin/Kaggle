{"cell_type":{"89d04940":"code","ddb0cd9a":"code","37d69e89":"code","2e215598":"code","d3be8157":"code","2f6f829e":"code","a6d33f3d":"code","5903e85f":"code","d85f5ace":"code","ca936e8c":"code","a5c0fdaf":"code","6f580cfc":"code","cf44993b":"code","d460edbf":"code","a881f04f":"code","efd65488":"code","36584f26":"code","6d8ee82a":"code","73278f41":"code","f4fb8531":"code","ba31618c":"code","4c5982a2":"code","3f150ec8":"code","c783a14a":"code","b995f632":"code","d96819bc":"code","193873c0":"code","ab384b02":"code","17b151b4":"code","92182736":"code","f835f220":"code","302ddc42":"code","59e64855":"code","e316d495":"code","c3848cb3":"code","550337e3":"code","b67441fe":"code","4ecf1680":"code","9e6bd3c5":"code","d48382ad":"code","9dff9319":"code","58b76cd3":"code","f33b1e2d":"code","39ca7529":"code","0e9f6b39":"code","280f795d":"code","983831af":"code","efebb672":"code","81e159a3":"code","4ca25eb0":"code","87b435f3":"code","a19373b8":"code","68aa1658":"code","4e1e6a22":"code","6069c638":"code","32e1c5cb":"code","ea4d120c":"code","524b738b":"code","1f4bf695":"code","a2184827":"code","ae1d3ec4":"code","1caf55a3":"code","a8284f77":"code","805cf46e":"code","049a8428":"code","12b3d2da":"code","5b9e7aa4":"code","e303a383":"code","9265ed84":"code","def06a5f":"code","1c3a9ad9":"code","c7504c4d":"code","3848f1bf":"code","1ff8dcb9":"code","998b0ef4":"code","602359fb":"code","16f552eb":"code","72fee501":"code","411122ec":"code","75bd1f5f":"code","cecab415":"code","041437a4":"code","809db705":"code","420869b6":"code","713df64d":"code","74b25749":"code","f15f61c6":"code","0c6aabff":"code","5c8c0116":"code","34d1d4d5":"code","6eb9b9e8":"code","332aeec8":"code","3abbaaf2":"code","6d2df13f":"code","67ab53b1":"code","22170e6b":"code","886b6bba":"code","000e03ba":"code","8588f29b":"code","0b167c0c":"code","7c82bdc5":"code","440be7f9":"code","15a064b2":"code","57f087a8":"code","47227def":"code","7f52b2f3":"code","e5095a78":"code","367c959d":"code","72e23c0d":"code","a35d3257":"code","fe8b61b3":"code","a14b8e29":"code","05510235":"code","9c6bc0d9":"code","e7d90922":"code","ab8f622e":"code","b88cddad":"code","9e8190bf":"code","d7e0204d":"code","a702ed35":"code","e892bfbb":"code","cd3a8e9d":"code","babff591":"code","8a2c3d72":"code","cc7ffbd1":"code","362d20df":"code","cf57e2f1":"code","06595f8b":"code","9a659c8a":"code","f89fc4a8":"code","eef49db1":"code","07388d5f":"code","daf69fd3":"code","c9462da8":"code","d3434c3c":"code","f6211fba":"code","f1d48b46":"code","0c9b0e62":"code","c915d276":"code","ec505de9":"code","653db7c2":"code","260ca260":"code","37d57c34":"code","0c4fb337":"code","34fa89a8":"code","a728cef4":"code","e13390a7":"code","37e78638":"code","333126f4":"code","921d6254":"code","02a2807d":"code","34f3759a":"code","15a64770":"code","28941978":"code","1a1298b0":"code","9ab0f9a5":"code","1606415c":"code","030a6695":"code","a548868a":"code","59f0377d":"code","8ebb8ca7":"code","41a3e906":"code","f55f660e":"code","27df2000":"code","197c9193":"code","a11ca6c2":"code","41682cb9":"code","6b5cf319":"code","5c2cfb17":"code","f3796d36":"code","901e9891":"code","a6225b06":"code","19623ad1":"code","cddb6f21":"code","cff2c5ec":"code","96481f11":"code","a472a3bd":"code","e5e0b901":"code","bedfdb03":"code","b0c64cb5":"code","1d19320e":"code","54cfcdf5":"code","6fca96a0":"code","01c7086a":"code","a5a2be8a":"code","0a33250a":"code","09f53acd":"code","2aa559b1":"code","cc11ba99":"code","da8ebaf7":"code","9d24ff3b":"code","66960ea0":"code","8f53fcff":"code","414a10a7":"code","7382c3c6":"code","02b3fb5e":"code","12e6b501":"code","109f7175":"code","11e8bab9":"code","28c37d2d":"code","73d8746a":"code","482d80d3":"code","6c742480":"code","9dc0e7a1":"code","2f2a8ab8":"code","6dc14844":"code","934ec2c6":"code","de5ad150":"markdown","67a79754":"markdown","c988db57":"markdown","4003ad82":"markdown","a98ec499":"markdown","856237c7":"markdown","b72d1b0d":"markdown","d1011bae":"markdown","53eeef02":"markdown","1b2663cc":"markdown","4d5c728d":"markdown","dd2504d3":"markdown","5ad83948":"markdown","9c022e7d":"markdown","bb363312":"markdown","53dee1c6":"markdown","336873d8":"markdown","3d243f79":"markdown","2efb618b":"markdown","78db919c":"markdown","ea36a453":"markdown","852890dc":"markdown","d9506946":"markdown","faf73610":"markdown","1c5249dc":"markdown","901767d3":"markdown","4b3d279f":"markdown","ee3df8e4":"markdown","c77e745f":"markdown","a405ef69":"markdown","f1a3da75":"markdown","613567c9":"markdown","7bc07ccd":"markdown","e517fbb0":"markdown","46bc7394":"markdown","4cd313cb":"markdown","208b6561":"markdown","1e54699a":"markdown","7b379a54":"markdown","a6150482":"markdown","192be090":"markdown","df2c90c4":"markdown","ab466a06":"markdown","f35f19ad":"markdown","28359880":"markdown","626837cf":"markdown","1602bc7b":"markdown","9bcc1f8d":"markdown","a0f24d0b":"markdown","f2972f8d":"markdown","ec7877f4":"markdown","bce5316d":"markdown","35fe58b2":"markdown","cbfd6a89":"markdown","96f555c4":"markdown","c115d23f":"markdown","d95b25f9":"markdown","4362d453":"markdown","1a682047":"markdown","31a73f39":"markdown","52e6ce30":"markdown","98d113f8":"markdown","b566ee93":"markdown","b054858d":"markdown","c40cac8e":"markdown","761bd447":"markdown","1edb7d30":"markdown","0da96957":"markdown","c8bd8f28":"markdown","f6916318":"markdown","c0eb22f7":"markdown","eb66e7fe":"markdown","f66bb920":"markdown"},"source":{"89d04940":"import pandas as pd\nimport numpy as np\nimport math\nimport json\n\n# read in the json files\nportfolio = pd.read_json('..\/input\/starbucks-app-customer-reward-program-data\/portfolio.json', orient='records', lines=True)\nprofile = pd.read_json('..\/input\/starbucks-app-customer-reward-program-data\/profile.json', orient='records', lines=True)\ntranscript = pd.read_json('..\/input\/starbucks-app-customer-reward-program-data\/transcript.json', orient='records', lines=True)","ddb0cd9a":"if(pd.unique(transcript['person']).shape == pd.unique(profile['id']).shape):\n    print(\"Success\")\nelse:\n    print(\"Failure\")","37d69e89":"customer_ids = pd.unique(transcript['person'])\n\n#encode customer ids which is in string format to integers\ncustomer_ids_dict = pd.Series(customer_ids).to_dict()\ncustomer_ids_dict = dict([(value, key) for key, value in customer_ids_dict.items()]) \nitr = iter(customer_ids_dict.items())\nlst = [next(itr) for i in range(10)]\nprint(lst)","2e215598":"#map encoded customer ids to ids in transcrpt and profile dataframes\ntranscript['person'] = transcript['person'].map(customer_ids_dict)\nprofile['id'] = profile['id'].map(customer_ids_dict)","d3be8157":"profile.head()","2f6f829e":"transcript.head()","a6d33f3d":"portfolio.head()","5903e85f":"#sort transcript and profile dataframe rows based on customer ids\nsorted_transcript = transcript.sort_values('person', axis=0, ascending=True, inplace=False, kind='quicksort')\nsorted_profile = profile.sort_values('id', axis=0, ascending=True, inplace=False, kind='quicksort')","d85f5ace":"#reset index to the current form i.e. after sort\nsorted_transcript.reset_index(inplace=True)","ca936e8c":"#drop the column index as it is not required\nsorted_transcript = sorted_transcript.drop(labels=['index'], axis=1)","a5c0fdaf":"sorted_transcript.head()","6f580cfc":"#reset index to the current form i.e. after sort\nsorted_profile.reset_index(inplace=True)","cf44993b":"#drop the column index as it is not required\nsorted_profile = sorted_profile.drop(labels=['index'], axis=1)","d460edbf":"sorted_profile.head()","a881f04f":"#find frequency of each customer ids in the transcript dataframe\ncustomer_ids_frequency = sorted_transcript['person'].value_counts(sort=False)","efd65488":"#to perform repeatation of records, the repeat count is to be added along each corresponding rows\nsorted_profile = pd.concat([sorted_profile, customer_ids_frequency], axis=1)","36584f26":"sorted_profile.head()","6d8ee82a":"#duplicate each rows in sorted profile based on the frequency of each customer ids in transcript\nprofile_with_duplicate_rows = sorted_profile.reindex(sorted_profile.index.repeat(sorted_profile.person))","73278f41":"#reset index to the current form i.e. after sort\nprofile_with_duplicate_rows.reset_index(inplace=True)","f4fb8531":"#drop the columns index and person as they aren't anymore required\nprofile_with_duplicate_rows = profile_with_duplicate_rows.drop(labels=['index', 'person'], axis=1)","ba31618c":"profile_with_duplicate_rows.head()","4c5982a2":"#concatenate sorted transcript and profile with duplicate rows\ntranscript_profile_concatenated = pd.concat([sorted_transcript, profile_with_duplicate_rows], axis=1)","3f150ec8":"transcript_profile_concatenated.tail()","c783a14a":"#verify whether customer ids from transcript and profile are aligned correctly\n(transcript_profile_concatenated['person'] == transcript_profile_concatenated['id']).all()","b995f632":"#drop the column person as it is not anymore required\ntranscript_profile_concatenated = transcript_profile_concatenated.drop(labels=['person'], axis=1)","d96819bc":"transcript_profile_concatenated","193873c0":"portfolio.head()","ab384b02":"#encode offer ids in portfolio dataframe from string format to integer\noffer_ids = portfolio['id'].unique()\noffer_ids_dict = pd.Series(offer_ids).to_dict()\noffer_ids_dict = dict([(value, key) for key, value in offer_ids_dict.items()]) ","17b151b4":"offer_ids_dict","92182736":"#map ids in portfolio to encoded offer ids\nportfolio['id'] = portfolio['id'].map(offer_ids_dict)","f835f220":"portfolio","302ddc42":"#inspect random rows for any error\nfraction_of_rows = transcript_profile_concatenated.sample(frac=0.003)\nfraction_of_rows","59e64855":"transcript_profile_concatenated.tail()","e316d495":"transcript_profile_concatenated.head()","c3848cb3":"#get a series of offer ids from the concatenated dataframe\noffer_id_series = transcript_profile_concatenated['value']","550337e3":"def get_dict_values(x):\n    \"\"\"Finds the first value of the key from a single key-value pair.\n    \n    Args:\n        x (dictionary object): Expects a dictionary key-value pair.\n    \n    Returns:\n        value: First value from the passed key-value pair.\n        \n    \"\"\"\n    key = list(x.keys())[0]\n    value = x[key]\n    return value","b67441fe":"#map every element of offer id series to the function get_dict_values(). This step is essential as every \n#element in offer id series exists as a dictionary key-value pair.\noffer_id_series = pd.DataFrame(offer_id_series).applymap(lambda x: get_dict_values(x))","4ecf1680":"offer_id_series.head()","9e6bd3c5":"def encode_offer_id(x):\n    \"\"\"Encode the given string into a integer based on the dictionary offer_ids_dict.\n    \n    Args:\n        x (str or int): Expects an integer or string value from offer_id_series.\n    \n    Return:\n        10 or offer_id_dict[x]: 10 is returned if the passed argument is integer and if the argument is a string,\n                                the value for the key, x in offer_id_dict is returned.\n    \"\"\"\n    if(type(x) is str):\n        return offer_ids_dict[x]\n    else:\n        return 10","d48382ad":"#map offer id series to the function encode_offer_id()\nencoded_offer_id_series = offer_id_series.applymap(lambda x: encode_offer_id(x))","9dff9319":"encoded_offer_id_series.head()","58b76cd3":"#add the column, offer_id with values from encoded_offer_id_series dataframe to the dataframe \n#transcript_profile_portfolio_concatenated\ntranscript_profile_portfolio_concatenated = transcript_profile_concatenated\ntranscript_profile_portfolio_concatenated['offer_id'] = encoded_offer_id_series['value']","f33b1e2d":"transcript_profile_portfolio_concatenated.head(10)","39ca7529":"portfolio.head(10)","0e9f6b39":"#convert the columns reward, difficulty and duration of portfolio dataframe into dictionaries \nportfolio_reward_dict = portfolio['reward'].to_dict()\nportfolio_difficulty_dict = portfolio['difficulty'].to_dict()\nportfolio_duration_dict = portfolio['duration'].to_dict()","280f795d":"def add_column(column_name, column_dict):\n    \"\"\"To add new column to the transcript_profile_portfolio_concatenated dataframe.\n    \n    Args:\n        column_name (str): Name of the column to be added.\n        column_dict (dict): Dictionary with column name as the key and values as data to the column.\n        \n    Return:\n        None\n    \"\"\"\n    transcript_profile_portfolio_concatenated[column_name] = transcript_profile_portfolio_concatenated['offer_id'].map(column_dict)","983831af":"add_column('reward', portfolio_reward_dict)\nadd_column('difficulty', portfolio_difficulty_dict)\nadd_column('duration', portfolio_duration_dict)","efebb672":"transcript_profile_portfolio_concatenated.head()","81e159a3":"#inspect random rows to find the basic structure of the column became_member_on\ntranscript_profile_portfolio_concatenated['became_member_on'].sample(frac=.003)","4ca25eb0":"def find_month(x):\n    \"\"\"To find month from the passed numerical date of the format YYYYMMDD.\n    \n    Args:\n        x (int): Date which is of the form YYYYMMDD.\n        \n    Return:\n        x%100 (int): MM of the date is returned.\n    \"\"\"\n    x = x\/100\n    x = int(x)\n    return x%100","87b435f3":"#map the column reg_month to the find_month() function\ntranscript_profile_portfolio_concatenated['reg_month'] = transcript_profile_portfolio_concatenated['became_member_on'].map(lambda x: find_month(x))","a19373b8":"transcript_profile_portfolio_concatenated.head()","68aa1658":"#encode event ids in string format to integer\nevent_ids = transcript_profile_portfolio_concatenated['event'].unique()\nevent_ids_dict = pd.Series(event_ids).to_dict()\nevent_ids_dict = dict([(value, key) for key, value in event_ids_dict.items()]) ","4e1e6a22":"#add one more event to the dictionary, green flag which indicates the customer does not view the \n#offer but completes the offer. Thus, it's a green flag in a business perspective.\nevent_ids_dict['green flag'] = 4\nevent_ids_dict","6069c638":"#map event_ids to the encoded event ids\ntranscript_profile_portfolio_concatenated['event_id'] = transcript_profile_portfolio_concatenated['event'].map(event_ids_dict)","32e1c5cb":"transcript_profile_portfolio_concatenated","ea4d120c":"#sort the transcript_profile_portfolio_concatenated dataframe based on id, offer_id and event_id for easy feature engineering later\nsorted_dataset = transcript_profile_portfolio_concatenated.sort_values(by=['id', 'offer_id', 'event_id'], ascending=[True, True, False])","524b738b":"sorted_dataset.head(20)","1f4bf695":"#reset index to the current form i.e. after sort\nsorted_dataset.reset_index(inplace=True)","a2184827":"#form the dataset with only columns that are required for later cases\ncolumns=['id', 'offer_id', 'event_id', 'gender', 'age', 'income', 'reward', 'difficulty', 'reg_month']\ndataset = sorted_dataset[columns]","ae1d3ec4":"dataset.shape","1caf55a3":"#dataframe for storing dataframe from dataset after filtering out unwanted rows\ndataset_after_filter = pd.DataFrame()","a8284f77":"def aggregate(x):\n    \"\"\"To find sum of the current element and all the previous elements and storing it in the current position.\n       This is to be done from start of the list to the end.\n       \n    Args:\n        x (list): List of integer values.\n        \n    Returns:\n        x (list): Function will be performed to every element from start to end. Last element will be removed \n        from the list before returning.\n    \n    \"\"\"\n    for i in range(1, len(x)):\n        x[i] = x[i] + x[i-1]\n    x.pop()\n    return x","805cf46e":"import warnings\nwarnings.simplefilter('ignore')","049a8428":"%%time\n\n#find and select only the records from the dataset for which the event performed by the customer for each offers\n#send to them is the highest. And, change the event id of those selected records with event id = 1 into \n#event id = 2 if there is a transaction event happened for the same customer; otherwise, it's not changed. \n#Similarly, if in the selected records, if there is event id = 3 and the event id of the next data record in the \n#dataset is zero then the erecord with event id = 3 is changed to event id = 4\n\n#loop through each customer ids\nfor i in range(len(dataset['id'].unique())):    \n    #select the data records of i th customer from dataset \n    dataset_temp = dataset[dataset['id'] == i]\n    customer_id_index = dataset_temp['id'].index\n    #start index of dataframe of i th customer\n    start_index = customer_id_index[0] \n    \n    #find the frequency of each offer ids such that sorting of these values is set to false\n    offer_count = dataset_temp['offer_id'].value_counts(sort=False)\n    #find the index of offer ids with just a single record\n    single_offer_index = offer_count[offer_count == 1].index\n    #add 0 to the 0th index of the offer_count_list \n    offer_count_list = offer_count.to_list()\n    offer_count_list.insert(0, 0)\n    offer_index = pd.Series(aggregate(offer_count_list))\n    #start index for each customer while each iteration is added\n    offer_index = offer_index.apply(lambda x: x + start_index)\n    \n    #check whether 1 exist at any indexes specified by the series offer_index and if there is any, store \n    #those indexes to the variable event_one_exist.\n    event_one_exist = dataset.iloc[offer_index, dataset.columns.get_loc('event_id')] == 1\n    event_one_exist = event_one_exist[event_one_exist==1].index\n    \n    #check whether 10 exist in the i th dataframe and if there is any, store those indexes to the \n    #variable offer_ten_exist\n    offer_ten_exist = dataset_temp[dataset_temp['offer_id']==10].index\n    \n    #when index of offer_count_list increased by one by adding zero, offer count hadn't increased the index.\n    if(len(single_offer_index)!=0):\n        single_offer_index = list(single_offer_index.map(lambda x: x+1))\n    \n    #check whether 3 exist at any indexes specified by the series offer_index and if there is any, store \n    #those indexes to the variable event_three_exist\n    event_three_exist = dataset.iloc[offer_index, dataset.columns.get_loc('event_id')] == 3\n    event_three_exist = event_three_exist[event_three_exist==1].index\n    \n    #find if the records specified in event_three_exist is a single offer record or not; if yes, pass the \n    #common value to the common_index variable\n    common_index = set(event_three_exist).intersection(single_offer_index)\n    common_index = list(common_index)\n    \n    #if there is any elements in common_index, remove those from the event_three_exist variable\n    if(len(common_index)!=0):\n        indices_B = [event_three_exist.index(x) for x in common_index]\n        event_three_exist = [i for j, i in enumerate(event_three_exist) if j not in indices_B]\n        \n    #pointer to the record next to the records with event_id = 3\n    event_three_next = pd.Series(event_three_exist).apply(lambda x: x+1)\n    \n    #check whether 0 exist at any indexes specified by the series event_three_next and if there is any, store \n    #those indexes to the variable event_zero_exist\n    event_zero_exist = dataset.iloc[event_three_next, dataset.columns.get_loc('event_id')] == 0\n    event_zero_exist = event_zero_exist[event_zero_exist==1].index\n\n    #If any event_id = 1 and offer ten exist, then the event_ids are made to 2 for all index values in \n    #event_one_exist\n    if(len(event_one_exist)!=0 and len(offer_ten_exist)!=0):\n        dataset.iloc[event_one_exist, dataset.columns.get_loc('event_id')] = 2\n    \n    #If any event_id = 3 and the next record's event_id = 0, then the event_ids are made to 4 for all \n    #index values in event_zero_exist(values of event_zero_exist are reduced by one)\n    if(len(event_three_exist)!=0 and len(event_zero_exist)!=0):\n        event_zero_exist = pd.Series(event_zero_exist).apply(lambda x: x-1)\n        dataset.iloc[list(event_zero_exist), dataset.columns.get_loc('event_id')] = 4    \n    \n    #For each iteration or customer ids, records of the dataset at the indexes specified by offer_index is appended\n    #to the dataframe dataset_after_filter\n    dataset_after_filter = dataset_after_filter.append(dataset[dataset.index.isin(offer_index)], ignore_index=True)\n    ","12b3d2da":"dataset_after_filter.shape","5b9e7aa4":"dataset_after_filter.head(100)","e303a383":"#as offer_id = 10 doesn't actually represent any offer by itself, all the rows containing offer_id = 10 is dropped\ndataset_after_filter = dataset_after_filter.drop(dataset_after_filter[dataset_after_filter['offer_id']==10].index, axis=0)","9265ed84":"dataset_after_filter.head()","def06a5f":"dataset_after_filter.shape","1c3a9ad9":"#reset index to the current form i.e. after sort\ndataset_after_filter.reset_index(inplace=True)","c7504c4d":"#drop the column index as it is not required\ndataset_after_filter = dataset_after_filter.drop(labels=['index'], axis=1)","3848f1bf":"dataset_after_filter.isna().sum()","1ff8dcb9":"#encode the column 'gender' in the string format to integer\ngender_dict = {'O': 0, 'M': 1, 'F': 2}\ndataset_after_filter['gender'] = dataset_after_filter['gender'].map(gender_dict)","998b0ef4":"dataset_after_filter","602359fb":"dataset_after_filter.isna().sum()","16f552eb":"dataset_after_filter.describe()","72fee501":"dataset_after_filter.to_csv('data.csv', index=False)","411122ec":"portfolio.head()","75bd1f5f":"profile.head()","cecab415":"transcript.head()","041437a4":"data = pd.read_csv('data.csv')","809db705":"data.head()","420869b6":"#Find the sum of all null or missing values in each variable of the dataset\ndata.isna().sum()","713df64d":"data[data['gender'].isna()]","74b25749":"data = data.dropna()","f15f61c6":"#reset the index \ndata.reset_index(inplace=True)","0c6aabff":"#drop the column index as it is not required\ndata = data.drop(labels=['index'], axis=1)","5c8c0116":"data.isna().sum()","34d1d4d5":"data.head()","6eb9b9e8":"from matplotlib import pyplot as plt\n%matplotlib inline","332aeec8":"#Converting each column into numpy\nincome_np = data['income'].to_numpy()\noffer_id_np = data['offer_id'].to_numpy()\nevent_id_np = data['event_id'].to_numpy()\nage_np = data['age'].to_numpy()\ngender_np = data['gender'].to_numpy()\nreward_np = data['reward'].to_numpy()\ndifficulty_np = data['difficulty'].to_numpy()\nreg_month_np = data['reg_month'].to_numpy()","3abbaaf2":"data.describe()","6d2df13f":"plt.figure(figsize=[10, 8])\nn, bins, patches = plt.hist(x=income_np, bins='auto', color='#0504aa',alpha=0.7, rwidth=0.85)\nplt.xlabel('Value',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Data Distribution Histogram - Income',fontsize=15)\nplt.show()","67ab53b1":"plt.figure(figsize=[10, 8])\nn, bins, patches = plt.hist(x=age_np, bins='auto', color='#0504aa',alpha=0.7, rwidth=0.85)\nplt.xlabel('Value',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Data Distribution Histogram - Age',fontsize=15)\nplt.show()","22170e6b":"plt.figure(figsize=[10, 8])\nn, bins, patches = plt.hist(x=reg_month_np, bins='auto', color='#0504aa',alpha=0.7, rwidth=0.85)\nplt.xlabel('Value',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Data Distribution Histogram - Registration Month',fontsize=15)\nplt.show()","886b6bba":"unique_elements, counts_elements = np.unique(reward_np, return_counts=True)\n\nplt.figure(figsize=[10, 8])\np = plt.bar(unique_elements, counts_elements, color='#0504aa',alpha=0.7, width=.4)\nplt.xlabel('Value',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Categorical Distribution Bar Chart - Reward',fontsize=15)\nplt.show()","000e03ba":"unique_elements, counts_elements = np.unique(difficulty_np, return_counts=True)\n\nplt.figure(figsize=[10, 8])\np = plt.bar(unique_elements, counts_elements, color='#0504aa',alpha=0.7, width=.4)\nplt.xlabel('Value',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Categorical Distribution Bar Chart - Difficulty',fontsize=15)\nplt.show()","8588f29b":"unique_elements, counts_elements = np.unique(offer_id_np, return_counts=True)\n\nplt.figure(figsize=[12, 8])\np = plt.bar(unique_elements, counts_elements, color='#0504aa',alpha=0.7, width=.4)\nplt.xlabel('Category',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Categorical Distribution Bar Chart - Offers',fontsize=15)\nplt.show()","0b167c0c":"unique_elements, counts_elements = np.unique(gender_np, return_counts=True)\n\nplt.figure(figsize=[8, 8])\np = plt.bar(unique_elements, counts_elements, color='#0504aa',alpha=0.7, width=.4)\nplt.xlabel('Category',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Categorical Distribution Bar Chart - Gender',fontsize=15)\nplt.show()","7c82bdc5":"unique_elements, counts_elements = np.unique(event_id_np, return_counts=True)\n\nplt.figure(figsize=[10, 8])\np = plt.bar(unique_elements, counts_elements, color='#0504aa',alpha=0.7, width=.4)\nplt.xlabel('Category',fontsize=15)\nplt.ylabel('Frequency',fontsize=15)\nplt.title('Categorical Distribution Bar Chart - Events',fontsize=15)\nplt.show()","440be7f9":"event_ids = np.unique(event_id_np)\n\nother_list = np.empty(shape=0, dtype=np.int64)\nmale_list = np.empty(shape=0, dtype=np.int64)\nfemale_list = np.empty(shape=0, dtype=np.int64)\n\nfor i in range(len(event_ids)):\n    gender_count = data[data['event_id']==i].gender.value_counts(sort=False)\n    \n    other_list = np.append(other_list, gender_count[0])\n    male_list = np.append(male_list, gender_count[1])\n    female_list = np.append(female_list, gender_count[2])","15a064b2":"plt.figure(figsize=[12, 8])\np1 = plt.bar(event_ids, male_list, alpha=0.5, color='#8b008b')\np2 = plt.bar(event_ids, female_list, bottom=male_list, alpha=0.5, color='#ffe4e1')\np3 = plt.bar(event_ids, other_list, bottom=male_list+female_list, alpha=0.5, color='#4682b4')\nplt.ylabel('Scores', fontsize=15)\nplt.title('Scores on Events & Gender', fontsize=15)\nplt.legend((p1[0], p2[0], p3[0]), ('Male', 'Female', 'Others'))\nplt.xticks(event_ids, ('Event 1', 'Event 2', 'Event 3', 'Event 4', 'Event 5'))\nplt.show()","57f087a8":"fig = plt.figure(figsize=[10, 8])\nplt.scatter(income_np, age_np, color='#0504aa', alpha=0.5)\nplt.title('Scatter Plot - Income & Age')\nplt.xlabel('Income')\nplt.ylabel('Age')\nplt.show()","47227def":"fig = plt.figure(figsize=[10, 8])\nplt.scatter(income_np, age_np, color='#0504aa', alpha=0.5)\nplt.title('Scatter Plot - Income & Age')\nplt.xlabel('Income')\nplt.ylabel('Age')\nplt.show()","7f52b2f3":"fig, ax = plt.subplots(figsize=[10, 8])\ndata.boxplot(column='reg_month', by='offer_id', ax=ax, grid=False, fontsize=15)","e5095a78":"from scipy import stats","367c959d":"z_score_data = np.abs(stats.zscore(data))\nthreshold = 3\nprint(np.where(z_score_data > 3))","72e23c0d":"from sklearn.manifold import MDS","a35d3257":"#seperate the inputs and output from the dataset.\ntarget = data['event_id']\npredictors = data.drop(['id', 'event_id'], axis=1)","fe8b61b3":"def scatter_plot(event, event_name):\n    \"\"\"To plot records of the passed class or event.\n    \n    The function perform MDS on the data and scatter plot the same into the 2d space.\n    \n    Args : \n        \n        event (dataframe) - It's the records of the corresponding event.\n        event_name (str) - Specifies event name. \n           \n    Returns:\n        \n        None.\n        \n    \"\"\"\n    sample = event.head(600)\n    clf = MDS(n_components=2, n_init=2, max_iter=100, dissimilarity='euclidean')\n    X_mds = clf.fit_transform(sample.values)\n    cords = X_mds\n    scatter = plt.scatter(cords[:, 0], cords[:, 1], label=event_name)  \n\nplt.figure(figsize=[10, 8])\n\n#selecting records corresponding to each event or class and passing it to the function 'scatter_plot'\nclass_name = ['Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5']\nfor i in range(5):\n    event = predictors[target==i]\n    scatter_plot(event, class_name[i])\n    \nplt.legend()\n","a14b8e29":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split","05510235":"#split the dataset into test and train sets.\nX_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.25, random_state=111)","9c6bc0d9":"std = preprocessing.StandardScaler()\nX_train.income = std.fit_transform(X_train.income.values.reshape(-1, 1))\nX_test.income = std.transform(X_test.income.values.reshape(-1, 1))\nX_train.age = std.fit_transform(X_train.age.values.reshape(-1, 1))\nX_test.age = std.fit_transform(X_test.age.values.reshape(-1, 1))\n\nnorm = preprocessing.MinMaxScaler()\nX_train.reward = norm.fit_transform(X_train.reward.values.reshape(-1, 1))\nX_train.difficulty = norm.fit_transform(X_train.difficulty.values.reshape(-1, 1))\nX_train.reg_month = norm.fit_transform(X_train.reg_month.values.reshape(-1, 1))\nX_test.reward = norm.transform(X_test.reward.values.reshape(-1, 1), )\nX_test.difficulty = norm.transform(X_test.difficulty.values.reshape(-1, 1))\nX_test.reg_month = norm.transform(X_test.reg_month.values.reshape(-1, 1))","e7d90922":"#X_train and X_test indexes are out of order so reset the indexes. Otherwise, there will be NaN values in the dataset after encoding.\nX_train.reset_index(inplace=True)\nX_test.reset_index(inplace=True)\n\nX_train = X_train.drop(['index'], axis=1)\nX_test = X_test.drop(['index'], axis=1)","ab8f622e":"X_test.shape, X_train.shape","b88cddad":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix\nfrom keras.utils import plot_model\nimport tensorflow as tf\nimport keras\nimport itertools","9e8190bf":"classes=['offer recieved', 'offer viewed', 'transaction', 'offer completed', 'green flag']\n\nmodel = Sequential([Dense(32, input_dim=7, activation='relu'),\n                    Dropout(0.3),\n                    Dense(16, activation='relu'),\n                    Dense(5, activation='softmax')])\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=15, batch_size=15)","d7e0204d":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train', 'test'])\nplt.show()","a702ed35":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'test'])\nplt.show()","e892bfbb":"predicted = model.predict(X_test)\npredicted = np.argmax(predicted, axis=1)","cd3a8e9d":"print(f1_score(y_test, predicted, average='micro'))","babff591":"def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    # print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","8a2c3d72":"cnf_matrix = confusion_matrix(y_test, predicted)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","cc7ffbd1":"NUMERICAL_COLUMNS = ['age', 'income', 'reward', 'difficulty', 'reg_month']\nCATEGORICAL_COLUMNS = ['offer_id', 'gender']\nmodels = []\ninputs = []\n\nnumeric_features = X_train[NUMERICAL_COLUMNS]\ncategorical_features = X_train[CATEGORICAL_COLUMNS]\n\nfor cat in categorical_features:\n    vocab_size = data[cat].nunique()\n    inpt = tf.keras.layers.Input(shape=(1,), name='input_' + '_'.join(cat.split(' ')))\n    \n    embed = tf.keras.layers.Embedding(vocab_size, 200,trainable=True,\\\n                                      embeddings_initializer=tf.random_normal_initializer())(inpt)\n    embed_rehsaped = tf.keras.layers.Reshape(target_shape=(200,))(embed)\n    models.append(embed_rehsaped)\n    inputs.append(inpt)\n    \nnum_input = tf.keras.layers.Input(shape=(len(NUMERICAL_COLUMNS)),\\\n                                  name='input_number_features')\n# append this model to the list of models\nmodels.append(num_input)\n# keep track of the input, we are going to feed them later to the #final model\ninputs.append(num_input)\n\nmerge_models = tf.keras.layers.concatenate(models)","362d20df":"pre_preds = tf.keras.layers.Dense(128, activation='relu')(merge_models)\npre_preds = tf.keras.layers.Dense(128, activation='relu')(pre_preds)\npre_preds = tf.keras.layers.Dropout(.2)(pre_preds)\npre_preds = tf.keras.layers.Dense(64, activation='relu')(pre_preds)\n\npred = tf.keras.layers.Dense(5, activation='softmax')(pre_preds)\n\nmodel = tf.keras.models.Model(inputs= inputs,\\\n                                       outputs =pred)\nmodel.compile(loss=tf.keras.losses.sparse_categorical_crossentropy,\\\n                       metrics=['accuracy'],\n                       optimizer='adam')\n\n#Since we have used a multi input neural network, it is best practice to feed your train data as a dictionary, \n#where your keys are the name of the Input layer and the values are what each layer is expected to have.\n\ninput_dict = {\n    \"input_offer_id\":X_train[\"offer_id\"],\n    \"input_gender\":X_train[\"gender\"],\n    \"input_number_features\": X_train[NUMERICAL_COLUMNS]\n}\n\ninput_dict_test = {\n    \"input_offer_id\":X_test[\"offer_id\"],\n    \"input_gender\":X_test[\"gender\"],\n    \"input_number_features\": X_test[NUMERICAL_COLUMNS]\n}\n\nhistory = model.fit(input_dict, y_train, epochs=15, validation_data=(input_dict_test, y_test), batch_size=32)\n","cf57e2f1":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train', 'test'])\nplt.show()","06595f8b":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'test'])\nplt.show()","9a659c8a":"predicted = model.predict(input_dict_test)\npredicted = np.argmax(predicted, axis=1)\nprint(f1_score(y_test, predicted, average='micro'))","f89fc4a8":"cnf_matrix = confusion_matrix(y_test, predicted)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","eef49db1":"enc = preprocessing.OneHotEncoder()\nonehot_df_train = enc.fit_transform(X_train.offer_id.values.reshape(-1, 1))\nonehot_df_test = enc.transform(X_test.offer_id.values.reshape(-1, 1))","07388d5f":"onehot_df_train = onehot_df_train.toarray()\nonehot_df_test = onehot_df_test.toarray()","daf69fd3":"onehot_df_train = pd.DataFrame(onehot_df_train)\nonehot_df_test = pd.DataFrame(onehot_df_test)","c9462da8":"X_train = pd.concat([X_train, onehot_df_train], axis=1)\nX_test = pd.concat([X_test, onehot_df_test], axis=1)","d3434c3c":"X_train = X_train.drop(['offer_id'], axis=1)\nX_test = X_test.drop(['offer_id'], axis=1)","f6211fba":"model = Sequential([Dense(8, input_dim=16, activation='relu'),\n                    Dense(8, activation='relu'),\n                    Dense(5, activation='softmax')])\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=20)","f1d48b46":"plt.figure(figsize=[10, 8])\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train', 'test'])\nplt.show()","0c9b0e62":"plt.figure(figsize=[10, 8])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'test'])\nplt.show()","c915d276":"predicted = model.predict(X_test)\npredicted = np.argmax(predicted, axis=1)\nprint(f1_score(y_test, predicted, average='micro'))","ec505de9":"cnf_matrix = confusion_matrix(y_test, predicted)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","653db7c2":"import xgboost as xgb\nfrom sklearn.metrics import classification_report, confusion_matrix, recall_score, f1_score\nimport itertools","260ca260":"X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.25, random_state=111)","37d57c34":"#X_train and X_test indexes are out of order so reset the indexes\nX_train.reset_index(inplace=True)\nX_test.reset_index(inplace=True)\n\nX_train = X_train.drop(['index'], axis=1)\nX_test = X_test.drop(['index'], axis=1)","0c4fb337":"X_train.shape, X_test.shape","34fa89a8":"params = {  \n    'max_depth' : 10,\n    'gamma'     : 5,\n    'objective' : 'multi:softmax',\n    'num_class' : 5,\n    'eval_metric' : [\"merror\", 'mlogloss'],\n    'n_gpus' : 0\n}","a728cef4":"model = xgb.XGBClassifier(**params)","e13390a7":"evallist = [(X_train, y_train), (X_test, y_test)]","37e78638":"model.fit(X_train, y_train, eval_set=evallist, eval_metric=[\"merror\", 'mlogloss'], verbose=False)","333126f4":"predictions = model.predict(X_test)","921d6254":"# retrieve performance metrics\nresults = model.evals_result_\nepochs = len(results['validation_0']['merror'])\nx_axis = range(0, epochs)\nfig, ax = plt.subplots(figsize=(10,8))\nplt.plot(x_axis, results['validation_0']['merror'], label = 'Train')\nplt.plot(x_axis, results['validation_1']['merror'], label = 'Test')\nax.legend()\nplt.ylabel('Classification Error')\nplt.title('XGBoost Classification Error')\nplt.show()","02a2807d":"# retrieve performance metrics\nresults = model.evals_result_\nepochs = len(results['validation_0']['mlogloss'])\nx_axis = range(0, epochs)\nfig, ax = plt.subplots(figsize=(10,8))\nplt.plot(x_axis, results['validation_0']['mlogloss'], label = 'Train')\nplt.plot(x_axis, results['validation_1']['mlogloss'], label = 'Test')\nax.legend()\nplt.ylabel('Classification Loss')\nplt.title('XGBoost Classification Loss')\nplt.show()","34f3759a":"print(f1_score(y_test, predictions, average='micro'))","15a64770":"cnf_matrix = confusion_matrix(y_test, predictions)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","28941978":"from imblearn.over_sampling import RandomOverSampler","1a1298b0":"sm = RandomOverSampler(sampling_strategy='not majority')\nX_train, y_train = sm.fit_sample(X_train, y_train)","9ab0f9a5":"params = {\n    'max_depth' : 14,\n    'gamma'     : 5,\n    'objective' : 'multi:softmax',\n    'num_class' : 5,\n    'eval_metric' : [\"merror\", 'mlogloss'],\n    'n_gpus' : 0\n}","1606415c":"model = xgb.XGBClassifier(**params)","030a6695":"evallist = [(X_train, y_train), (X_test, y_test)]","a548868a":"model.fit(X_train, y_train, eval_set=evallist, eval_metric=[\"merror\", 'mlogloss'], verbose=False)","59f0377d":"predictions = model.predict(X_test)","8ebb8ca7":"# retrieve performance metrics\nresults = model.evals_result_\nepochs = len(results['validation_0']['merror'])\nx_axis = range(0, epochs)\nfig, ax = plt.subplots(figsize=(10,8))\nplt.plot(x_axis, results['validation_0']['merror'], label = 'Train')\nplt.plot(x_axis, results['validation_1']['merror'], label = 'Test')\nax.legend()\nplt.ylabel('Classification Loss')\nplt.title('XGBoost Classification Loss')\nplt.show()","41a3e906":"# retrieve performance metrics\nresults = model.evals_result_\nepochs = len(results['validation_0']['mlogloss'])\nx_axis = range(0, epochs)\nfig, ax = plt.subplots(figsize=(10,8))\nplt.plot(x_axis, results['validation_0']['mlogloss'], label = 'Train')\nplt.plot(x_axis, results['validation_1']['mlogloss'], label = 'Test')\nax.legend()\nplt.ylabel('Classification Loss')\nplt.title('XGBoost Classification Loss')\nplt.show()","f55f660e":"print(recall_score(y_test, predictions, average='micro'))","27df2000":"cnf_matrix = confusion_matrix(y_test, predictions)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","197c9193":"std = preprocessing.StandardScaler()\nX_train.income = std.fit_transform(X_train.income.values.reshape(-1, 1))\nX_test.income = std.transform(X_test.income.values.reshape(-1, 1))\nX_train.age = std.fit_transform(X_train.age.values.reshape(-1, 1))\nX_test.age = std.fit_transform(X_test.age.values.reshape(-1, 1))\n\nnorm = preprocessing.MinMaxScaler()\nX_train.reward = norm.fit_transform(X_train.reward.values.reshape(-1, 1))\nX_train.difficulty = norm.fit_transform(X_train.difficulty.values.reshape(-1, 1))\nX_train.reg_month = norm.fit_transform(X_train.reg_month.values.reshape(-1, 1))\nX_test.reward = norm.transform(X_test.reward.values.reshape(-1, 1), )\nX_test.difficulty = norm.transform(X_test.difficulty.values.reshape(-1, 1))\nX_test.reg_month = norm.transform(X_test.reg_month.values.reshape(-1, 1))","a11ca6c2":"NUMERICAL_COLUMNS = ['age', 'income', 'reward', 'difficulty', 'reg_month']\nCATEGORICAL_COLUMNS = ['offer_id', 'gender']\nmodels = []\ninputs = []\n\nnumeric_features = X_train[NUMERICAL_COLUMNS]\ncategorical_features = X_train[CATEGORICAL_COLUMNS]\n\nfor cat in categorical_features:\n    vocab_size = data[cat].nunique()\n    inpt = tf.keras.layers.Input(shape=(1,), name='input_' + '_'.join(cat.split(' ')))\n    \n    embed = tf.keras.layers.Embedding(vocab_size, 200,trainable=True,\\\n                                      embeddings_initializer=tf.random_normal_initializer)(inpt)\n    embed_rehsaped = tf.keras.layers.Reshape(target_shape=(200,))(embed)\n    models.append(embed_rehsaped)\n    inputs.append(inpt)\n    \nnum_input = tf.keras.layers.Input(shape=(len(NUMERICAL_COLUMNS)),\\\n                                  name='input_number_features')\n# append this model to the list of models\nmodels.append(num_input)\n# keep track of the input, we are going to feed them later to the #final model\ninputs.append(num_input)\n\nmerge_models = tf.keras.layers.concatenate(models)","41682cb9":"pre_preds = tf.keras.layers.Dense(32, activation='relu')(merge_models)\npre_preds = tf.keras.layers.Dense(32, activation='relu')(pre_preds)\npre_preds = tf.keras.layers.Dropout(.2)(pre_preds)\npre_preds = tf.keras.layers.Dense(32, activation='relu')(pre_preds)\n\npred = tf.keras.layers.Dense(5, activation='softmax')(pre_preds)\n\nmodel = tf.keras.models.Model(inputs= inputs,\\\n                                       outputs =pred)\nmodel.compile(loss=tf.keras.losses.sparse_categorical_crossentropy,\\\n                       metrics=['accuracy'],\n                       optimizer='adam')\n\n#Since we have used a multi input neural network, it is best practice to feed your train data as a dictionary, \n#where your keys are the name of the Input layer and the values are what each layer is expected to have.\n\ninput_dict= {\n    \"input_offer_id\":X_train[\"offer_id\"],\n    \"input_gender\":X_train[\"gender\"],\n    \"input_number_features\": X_train[NUMERICAL_COLUMNS]\n}\n\ninput_dict_test= {\n    \"input_offer_id\":X_test[\"offer_id\"],\n    \"input_gender\":X_test[\"gender\"],\n    \"input_number_features\": X_test[NUMERICAL_COLUMNS]\n}\n\nhistory = model.fit(input_dict, y_train, epochs=15, validation_data=(input_dict_test, y_test), batch_size=64)\n\n","6b5cf319":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train', 'test'])\nplt.show()","5c2cfb17":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'test'])\nplt.show()","f3796d36":"predicted = model.predict(input_dict_test)\npredicted = np.argmax(predicted, axis=1)\nprint(f1_score(y_test, predicted, average='micro'))","901e9891":"cnf_matrix = confusion_matrix(y_test, predicted)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","a6225b06":"class_weights = {\n    0 : 3.2,\n    1 : 39.,\n    2 : 1.4,\n    3 : 1.,\n    4 : 6.\n}","19623ad1":"NUMERICAL_COLUMNS = ['age', 'income', 'reward', 'difficulty', 'reg_month']\nCATEGORICAL_COLUMNS = ['offer_id', 'gender']\nmodels = []\ninputs = []\n\nnumeric_features = X_train[NUMERICAL_COLUMNS]\ncategorical_features = X_train[CATEGORICAL_COLUMNS]\n\nfor cat in categorical_features:\n    vocab_size = data[cat].nunique()\n    inpt = tf.keras.layers.Input(shape=(1,), name='input_' + '_'.join(cat.split(' ')))\n    \n    embed = tf.keras.layers.Embedding(vocab_size, 200,trainable=True,\\\n                                      embeddings_initializer=tf.random_normal_initializer)(inpt)\n    embed_rehsaped = tf.keras.layers.Reshape(target_shape=(200,))(embed)\n    models.append(embed_rehsaped)\n    inputs.append(inpt)\n    \nnum_input = tf.keras.layers.Input(shape=(len(NUMERICAL_COLUMNS)),\\\n                                  name='input_number_features')\n# append this model to the list of models\nmodels.append(num_input)\n# keep track of the input, we are going to feed them later to the #final model\ninputs.append(num_input)\n\nmerge_models = tf.keras.layers.concatenate(models)","cddb6f21":"pre_preds = tf.keras.layers.Dense(64, activation='relu')(merge_models)\npre_preds = tf.keras.layers.Dense(64, activation='relu')(pre_preds)\npre_preds = tf.keras.layers.Dropout(.2)(pre_preds)\npre_preds = tf.keras.layers.Dense(32, activation='relu')(pre_preds)\n\npred = tf.keras.layers.Dense(5, activation='softmax')(pre_preds)\n\nmodel = tf.keras.models.Model(inputs= inputs,\\\n                                       outputs =pred)\nmodel.compile(loss=tf.keras.losses.sparse_categorical_crossentropy,\\\n                       metrics=['accuracy'],\n                       optimizer='adam')\n\n#Since we have used a multi input neural network, it is best practice to feed your train data as a dictionary, \n#where your keys are the name of the Input layer and the values are what each layer is expected to have.\n\ninput_dict= {\n    \"input_offer_id\":X_train[\"offer_id\"],\n    \"input_gender\":X_train[\"gender\"],\n    \"input_number_features\": X_train[NUMERICAL_COLUMNS]\n}\n\ninput_dict_test= {\n    \"input_offer_id\":X_test[\"offer_id\"],\n    \"input_gender\":X_test[\"gender\"],\n    \"input_number_features\": X_test[NUMERICAL_COLUMNS]\n}\n\nhistory = model.fit(input_dict, y_train, epochs=15, validation_data=(input_dict_test, y_test), batch_size=32, class_weight=class_weights)\n","cff2c5ec":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train', 'test'])\nplt.show()","96481f11":"plt.figure(figsize=[10, 6])\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'test'])\nplt.show()","a472a3bd":"predicted = model.predict(input_dict_test)\npredicted = np.argmax(predicted, axis=1)\nprint(f1_score(y_test, predicted, average='micro'))","e5e0b901":"cnf_matrix = confusion_matrix(y_test, predicted)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","bedfdb03":"from sklearn.ensemble import RandomForestClassifier","b0c64cb5":"X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.25, random_state=111)","1d19320e":"X_train = X_train.drop(['offer_id'], axis=1)\nX_test = X_test.drop(['offer_id'], axis=1)","54cfcdf5":"model = RandomForestClassifier(n_estimators=150, class_weight='balanced_subsample')\nhistory = model.fit(X_train, y_train)\nprediction = model.predict(X_test)","6fca96a0":"print(f1_score(y_test, prediction, average='micro'))","01c7086a":"cnf_matrix = confusion_matrix(y_test, prediction)\n\n# Plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes), normalize=True)","a5a2be8a":"# scikit-learn k-fold cross-validation\nfrom numpy import array\nfrom sklearn.model_selection import StratifiedKFold","0a33250a":"predictors_temp = predictors\npredictors_temp = np.array(predictors_temp)\ntarget_temp = target\ntarget_temp = np.array(target_temp)\nvalidation_scores = list()","09f53acd":" params = {\n    \n    'max_depth' : 10,\n    'gamma'     : 5,\n    'objective' : 'multi:softmax',\n    'num_class' : 5,\n    'eval_metric' : [\"merror\", 'mlogloss'],\n    'n_gpus' : 0,\n    'n_estimators' : 100\n     \n          }\n    \ndef create_and_validate_model(X_train, y_train, X_test, y_test):\n    model = xgb.XGBClassifier(**params)\n    evallist = [(X_train, y_train), (X_test, y_test)]\n    model.fit(X_train, y_train, eval_set=evallist, eval_metric=[\"merror\", 'mlogloss'], verbose=False)\n    predictions = model.predict(X_test)\n    validation_scores.append(f1_score(y_test, predictions, average='micro'))\n    return model\n    ","2aa559b1":"skfold = StratifiedKFold(n_splits=10, random_state=111)\nfor train_index, test_index in skfold.split(predictors_temp, target_temp):\n    X_train, X_test = predictors_temp[train_index], predictors_temp[test_index]\n    y_train, y_test = target_temp[train_index], target_temp[test_index]\n    model = create_and_validate_model(X_train, y_train, X_test, y_test)\n    ","cc11ba99":"print(validation_scores)\nprint(np.mean(validation_scores))","da8ebaf7":"import shap","9d24ff3b":"#attempt to use SHAP on multi-class\nX_rand = predictors.sample(1, random_state=42)\nidx = X_rand.index.values[0]","66960ea0":"X_rand","8f53fcff":"print(target[X_rand.index])","414a10a7":"#define the explainer and find force plot for each class on the same sample\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(predictors.iloc[idx])\nshap.initjs()\nfor which_class in range(0,5):\n    display(shap.force_plot(explainer.expected_value[which_class], shap_values[which_class], X_rand))","7382c3c6":"shap_values = shap.TreeExplainer(model).shap_values(X_rand)\nshap.summary_plot(shap_values, X_rand)","02b3fb5e":"filter_1 = data['event_id'] != 1\nfilter_2 = data['event_id'] != 4\n\ndata_after_filter = data.where(filter_1 & filter_2, axis=0)\ndata_after_filter.dropna(inplace=True)\ndata_after_filter.reset_index(inplace=True)\ntarget_filtered = data_after_filter['event_id']\npredictor_filtered = data_after_filter.drop(['index', 'event_id', 'id'], axis=1)","12e6b501":"X_train_filtered, X_test_filtered, y_train_filtered, y_test_filtered = train_test_split(predictor_filtered, target_filtered, test_size=.25)","109f7175":"params = {\n    \n    'max_depth' : 5,\n    'objective' : 'multi:softmax',\n    'num_class' : 3,\n    'eval_metric' : [\"merror\", 'mlogloss'],\n    'n_gpus' : 0,\n    'n_estimators' : 60\n}","11e8bab9":"model = xgb.XGBClassifier(**params)","28c37d2d":"evallist = [(X_train_filtered, y_train_filtered), (X_test_filtered, y_test_filtered)]","73d8746a":"model.fit(X_train_filtered, y_train_filtered, eval_set=evallist, eval_metric=[\"merror\", 'mlogloss'], verbose=False)","482d80d3":"predictions = model.predict(X_test_filtered)","6c742480":"# retrieve performance metrics\nresults = model.evals_result_\nepochs = len(results['validation_0']['mlogloss'])\nx_axis = range(0, epochs)\nfig, ax = plt.subplots(figsize=(10,8))\nplt.plot(x_axis, results['validation_0']['mlogloss'], label = 'Train')\nplt.plot(x_axis, results['validation_1']['mlogloss'], label = 'Test')\nax.legend()\nplt.ylabel('Classification Loss')\nplt.title('XGBoost Classification Loss')\nplt.show()","9dc0e7a1":"# retrieve performance metrics\nresults = model.evals_result_\nepochs = len(results['validation_0']['merror'])\nx_axis = range(0, epochs)\nfig, ax = plt.subplots(figsize=(10,8))\nplt.plot(x_axis, results['validation_0']['merror'], label = 'Train')\nplt.plot(x_axis, results['validation_1']['merror'], label = 'Test')\nax.legend()\nplt.ylabel('Classification Error')\nplt.title('XGBoost Classification Error')\nplt.show()","2f2a8ab8":"print(f1_score(y_test_filtered, predictions, average='micro'))","6dc14844":"print(classification_report(y_test_filtered, predictions))","934ec2c6":"classes_filtered = ['offer recieved', 'transaction', 'offer completed']\n\ncnf_matrix = confusion_matrix(y_test_filtered, predictions)\n\n#plot normalized confusion matrix\nfig = plt.figure(figsize=[10, 8])\nplot_confusion_matrix(cnf_matrix, classes=np.asarray(classes_filtered), normalize=True)","de5ad150":"# Modeling\n\nWe already know that our dataset is imbalanced but we may still try to train and classify on the same dataset and check how rightly the classes are classified. If the minority classes are only misclassified, then we may perform some techniques to balance the dataset and may try to increase the recall of the minority classes and the precision of the majority classes. If the model is not even able to predict the majority classes correctly, then we may keep the dataset as it is but fine tune the model.\n\nAs mentioned earlier, since this is a classification problem, the evaluation metric 'accuracy' is not a good choice as accuracy can be a useful measure only if we have the same amount of samples per class but we have an imbalanced set. Other metrics like precision, recall, f1-score are by itself suitable only for binary classification but we could use the same for multiclass classification by the 'one vs all' method, but still it may not work well for an imbalanced dataset. The best metric option available for imbalanced dataset multiclass classification problems are 'confusion matrix', 'macro averaging' and 'micro averaging' of the earlier basic metrics. In 'macro-averaging', we average the performances, e.g., precision or f1-score of each individual class. In 'micro averaging', we calculate the performance, e.g., precision, from the individual true positives, true negatives, false positives, and false negatives of the k-class model. And hence, 'micro averaging' is the best choice to go with.\n","67a79754":"Cross-validation is primarily used in applied machine learning to estimate the skill of a machine learning model on unseen data. That is, to use a limited sample in order to estimate how the model is expected to perform in general when used to make predictions on data not used during the training of the model. We may use the Stratified-K-Fold cross-validation method to test the effectiveness of our XGBoost model. Stratified-K-fold is best suited for imbalanced dataset classification so as in our case. It returns stratified folds, i.e while making the folds it maintains the percentage of samples for each class in every fold. So that model gets equally distributed data for training\/test folds. I have set the parameter \u2018K\u2019 to 10 i.e. we may split the dataset into 10 parts or folds. Each time on the loop we may consider a single fold for testing and rest for training, non-repeatedly. We may evaluate the model on micro-average f1-score each time on the respective test set and all the scores are averaged to obtain a more comprehensive model validation score.\n","c988db57":"## 2. K-Fold Cross-Validation","4003ad82":"# Exploratory Data Analysis (EDA)\n\n\n## 1. Variable Identification\n\nIdentify the types and categories of all the data variables. \n\nFirst, let's inspect the data variables that exists in the three files that is available to us from Starbucks.","a98ec499":"# Problem Statement\nPredict the purchace offer to which a possible higher level of response or user actions like \u2018offer\nreceived\u2019, \u2018offer viewed\u2019, \u2018transaction\u2019, \u2018offer completed\u2019, \u2018green flag\u2019 (in order from the\ntop priority to low) can be achieved based on the demographic attributes of the\ncustomer and other attributes of the companies purchase offers. If the customer response is not the\nmaximum i.e. \u2018green flag\u2019 then execute the preset procedures to elevate the response\nfrom its current value to the next higher possible value.","856237c7":"Correlation among the variables can be inferred from the graph, thus we may try\nmodeling without and with the variable \u2018reg_month\u2019. We can also infer that there are no\noutliers.","b72d1b0d":"Problem of imbalanced dataset can be inferred from the confusion matrix. Most of the events are wrongly predicted as 'offer completed'; offer completed is the most occuring event or class.","d1011bae":"## Random Over-Sampling - DNN","53eeef02":"Let\u2019s use the mathematical function \u2018Z-score\u2019 to detect the outliers in the dataset. While\ncalculating the \u2018Z-score\u2019 we re-scale and center the data and look for data points which\nare too far from zero. These data points which are way too far from zero will be treated\nas the outliers. We have set a threshold of 3 and -3 i.e. if the Z-score value is greater\nthan or less than 3 or -3 respectively, that data point will be identified as outliers.","1b2663cc":"## 2. XGBoost (Our Model)\n\nLet's use the XGBoost machine learning technique to build our model. One could find it less trivial to implement XGBoost for multiclass classification as it\u2019s not directly implemented to the Python API XGBClassifier. To use XGBoost main module for a multiclass classification problem, it is required to change the value of two parameters: objective and num_class. Features are not normalised as this method is based on decision trees.\n","4d5c728d":"From the confusion matrix it's evident that the classes are wrongly classified as our dataset is imbalanced. The least occuring classes, 'offer viewed' and 'green flag' are the ones which are mostly wrongly predicted or classified.","dd2504d3":"No correlation.","5ad83948":"## 3. SHAP","9c022e7d":"Since our dataset has both numerical columns and categorical columns, we may build a multi input neural net, one input for each categorical feature, as for the numerical features; all of them will be fed from a single input. ","bb363312":"## 3. Univariate Analysis\n\nAt this stage, we explore variables one by one. Method to perform uni-variate analysis will depend on whether the variable type is categorical or continuous.\n\nContinuous Variables:- We need to understand the central tendency and spread of the variable. \n\nCategorical Variable:- We\u2019ll use frequency table to understand distribution of each category.\n\n\n","53dee1c6":"In this method, we may provide a weight for each class which places more emphasis on the minority classes such that the end result is a classifier which can learn equally from all classes. The class weights can be set by assigning a dictionary of class number and its corresponding weights to the argument \u2018class_weight\u2019 of fit function provided in keras.\n","336873d8":"We have a balanced categorical data distribution\nfor the variable \u2018offers\u2019 which can be encoded later using any suitable encoding scheme.","3d243f79":"Multidimensional scaling is a means of visualizing the level of similarity of individual objects of a dataset. It is used to translate information about the pairwise distances among a set of n objects or individuals into a configuration of n points mapped into an abstract Cartesian space. \n\nWe may use this method to scale our dataset dimension into just two components such that the relative distance between the data points are maintained. And then we may scatter plot each class in the dataset into the x-y plane. This may give us a narrow idea about the underlying structure of each class in the dataset.\n\n","2efb618b":"# Objective\nThrough this project, I am going to build a machine learning model that\npredicts whether or not a customer will respond to a purchase offer sent by Starbucks through their mobile app. And, to determine the possible\nlevel of response or user actions like offer received, offer viewed, transaction, offer\ncompleted etc. Such that, the company can send each offer to the respective targeted audience where it can get the possible maximum reponse as predicted. I will be using the dataset 'Starbucks app customer rewards program data' which contains simulated data that mimics\ncustomer behaviour on the Starbucks rewards mobile app for this machine learning problem.\n\n### Possible User Actions or Responses:\n1. **offer recieved** - Indicates that the offer has reached the customer.\n2. **offer viewed** - Indicates that the customer has viewed the offer.\n3. **transaction** - Indicates that the customer has performed a transaction but were not eligible for the offer.\n4. **offer completed** - Indicates that the customer has performed a transaction using the sent offer.\n5. **green flag** - Indicates that the customer has performed a transaction without using the offer, eventhough they were eligible for the offer.(From a business perspective, it's a good sign. We could restrict senting offers to those people in the future.)","78db919c":"We had encoded the offer_id and gender feature columns earlier itself, but there is a chance that the model could find a false relation between the labels while learing\/training, as we had used label encoding (This type of encoding is really only appropriate if there is a known relationship between the categories). One-hot encoding of 'offer_id' won't be a good idea as it could lead to dimensionality explosion. So, let's perform entity embedding on this categorical column.","ea36a453":"## 6. Outliers Detection","852890dc":"A summary plot with plot type equal to bar or variable importance plot lists the most significant variables in descending order. The top variables contribute more to the model than the bottom ones and thus have high predictive power. Since our\u2019s is a multi-class classification model, we have stacked bars for each feature.\n","d9506946":"## 1. Random Over-Sampling - XGBoost","faf73610":"As expected, the label encoded model has performed the least. The feature embedded model has performed better than both the label encoded and one hot encoded model. An embedding is actually a mapping of a discrete categorical variable to a vector of continuous numbers. Entity embedding not only reduces memory usage and speeds up neural networks compared with one-hot encoding, but more importantly by mapping similar values close to each other in the embedding space it reveals the intrinsic properties of the categorical variables. It can rapidly generate great results on structured data without having to resort to feature engineering or apply domain specific knowledge. \n","1c5249dc":"The SHAP allows us to show how much each predictor contributes, either positively or negatively, to the target variable. This is like the variable importance plot but it is able to show the positive or negative relationship for each variable with the target. We may use the Tree Explainer function available in SHAP for interpreting our XGBoost machine learning model. Since our\u2019s is a multi-class classification model, we have to show the model\u2019s multiple outputs for a single observation. This means we may have 5 plots (since we have 5 classes) to look at instead of just one (as in the case of binary classification and regression problems). This is useful because we could know why the model made a decision as they are in and why it didn't make another. \n","901767d3":"As the data distribution cannot be assumed as a gaussian distribution, we\nmay not standardise the variable but we may normalize it to a normal scale such that there won\u2019t be varying scales in the dataset and the algorithm we are using does not\nmake assumptions about the distribution of the data.","4b3d279f":"## Random Forest for Imbalanced Classification\n","ee3df8e4":"We have reward (int), difficulty (int) and duration (int) as continuous values; where as channels (list of strings), offer_type (str) and id (str) as categorical data.","c77e745f":"### The identified input and output features\/variables for our model are:\n\n#### Predictor variables:\n\n -  Difficulty\n -  Reward\n -  Gender\n -  Age\n -  Became_member_on (Only the month is considered and the feature name is changed to reg_month)\n -  Income\n -  Value (Feature name is changed to offer_id)\n\n#### Target:\n\n -  Event (Feature name is changed to event_id)\n \n ","a405ef69":"### 1.3. One-Hot Encoded categorical data.","f1a3da75":"### 3.1. Central Tendency \n\nThe mean is most likely the measure of central tendency, but there are others, such as\nthe median and the mode. One of the main disadvantages of mean is that it is\nparticularly susceptible to the influence of outliers. Since our dataset has no outliers we\nmay use the mean and also, the histogram to visualize the same.\n","613567c9":"We have seen how model perform on the imbalanced data and balanced data through sampling. Let's try another way of understanding how well the model performs; Let's try classifying the majority classes only by dropping the minority classes. We expect a greater classification score than that of random over-sampled XGBoost model, as we don't have any sampled data anymore.","7bc07ccd":"## 5. Multi-dimensional Scaling","e517fbb0":"we can observe that the variable \u2018offer_id\u2019 is influencing the model\nthe most; whereas the variable \u2018reg_month\u2019 is influencing the model the least. And also,\nwe can infer the stacked bars which indicate the predictive power of each feature on\neach class. The variable offer_id has a greater impact on the target \u2018Class 0\u2019, whereas it\nhas least impact on the target \u2018Class 1\u2019. It\u2019s strange to see that the variable \u2018income\u2019\ndoesn't have any influence on the target \u2018Class 0\u2019.","46bc7394":"### 1.2. Embedded categorical data. ","4cd313cb":"We can observe from the figure that there is a stepwise increase in the income as the age value increases. But we may not be bothered about the same as it\u2019s not a linear correlation.","208b6561":"Normalization is to be done.","1e54699a":"Average validation score after cross-validation is 63.62, which is quite impressive as our\nmodel is having a similar micro-average f1-score of 63.45. And, from the validation\nscore of each model, we can infer that there is much less variance among them, which\u2019s\na positive indication. A good model is not the one that gives accurate predictions on the\nknown data or training data but the one which gives good predictions on the new data\nand avoids overfitting and underfitting. Thus, we may possibly consider our model as a\ngood model. (Keeping the problems due to the imbalanced dataset aside.)","7b379a54":"# Feature Engineering\n\nIn Feature Engineering we are not going to add any new data, but we are going to make the data that we already have useful.","a6150482":"### 4.1. Categorical & Categorical\n\nTo find the relationship between two categorical variables\n\n - Event ID & Gender","192be090":"###  3.2 Variable Importance Plot","df2c90c4":"From the figure, we can observe that each class in the dataset is separable and is suitable for classification problems. And, from the structure of the data points we can infer that we may need to use a nonlinear function or model to solve the same.\n","ab466a06":"#### Majority classes are performing well but the minorities are not.\n\nProblem of imbalanced dataset can be inferred from the confusion matrix. Most of the events are wrongly predicted as 'offer completed'; offer completed is the most occuring event or class.","f35f19ad":"## 2. Missing Value Treatment\n\nMissing data in the training dataset can reduce the power \/ fit of a model or can lead to a biased model because we have not analysed the behavior and relationship with other variables correctly. It can lead to wrong prediction or classification.\n\nLet's analyse the missing values in our dataset.","28359880":"Normalization is to be done.","626837cf":"To start with, let's check whether the unique values in profile equals unique values in transcript to make sure that there are no additional customer records in the profile which are not in transcript.","1602bc7b":"We have age (int), became_member_on (int) and income (float) as continuous values; where as gender (str) and id (str) as categorical data.","9bcc1f8d":"Ensure that we apply oversampling technique only on the train set, because oversampling on the dataset may allow the exact same observations to be present in both the test and train sets. This can make our model to simply memorize specific data points and cause overfitting and poor generalization to the test data.\nNow, let's treat the imbalanced dataset by using the RandomOverSampler (Random Over-sampling Technique) for over-sampling and see how the confusion matrix changes for the benchmark model and our model.\n","a0f24d0b":"From the above dataframe we can understand that even the age from these records are quite unreal. It's most probable that those missing records are because customers were not ready to submit the details and hence, the gender and income became missing values and age got its set default value i.e. 118.\n\nReplacing missing values with mean\/mode\/median wouldn't be a good choice; as there are a large amount of records with missing values, mean\/mode\/median imputation could convey false information to the model. Since there are three features to be identified KNN imputation would also be riskful and inefficient. Thus, the better option would be to delete those records. (Even after deleting those records with missing value, we will have 55296 records for modeling)","f2972f8d":"# Dataset Formation\n\nFirst of all, let's discuss what is so strange about our dataset and how to handle it. The Starbucks dataset exists as three separate files i.e. portfolio.json (), profile.json and transcript.json. So, we have to identify a way to combine the required data variables from these data files to form a single dataset.  \n","ec7877f4":"## Class Weight Adjustment - DNN\n","bce5316d":"# Handling Imbalanced Dataset\n\nWith the imbalanced dataset, we are getting a micro-average f1-score of around 63.45% for the XGB model; In reality this value cannot be taken into consideration for determining the performance of the model as that value would be more representative of the majority class, i.e. the true predictions of the majority classes 'offer received', 'offer transaction' and 'offer completed' are 0.48, 0.57 and 0.87 respectively; where as the true predictions of the minority classes 'offer viewed' and 'green flag' are 0.0 and 0.07 respectively; Thus, if we classify the records from the class 'offer viewed' by just seeing the f1-score of the model, then obviously the model is never going to predict it correct as that class is having a true score of exact zero.\n\n\nThe micro-average f1-score of different models on imbalanced dataset are:\n\n - DNN (Label Enoded categorical data) &emsp;  &ensp; &nbsp; - 61.89%\n - DNN (Embedded categorical data) &emsp; &emsp; &ensp; &nbsp; - 63.12%\n - DNN (One-Hot Encoded categorical data) &ensp; - 62.30%\n - XGBoost (Non-Normalized) &emsp; &emsp; &emsp; &emsp; &emsp; &ensp; - 63.45%\n \n##### From the confusion matrices we can infer that most of the wrong classifications are made from the minority classes. And the majority classes are having higher rate of true predictions. Thus, it's comprehensible that we can get higher true predictions from the same model if we have more datapoints or records for the minority classes. Getting new intended data from the customers would not be a hardship for Starbucks, when we already have a model which can perform well with enough data. But, for the time being we may use imbalanced dataset handling techniques on the dataset to prove that we can get atleast average true predictions for all the classes with just these sampled data.\n\nIt's known that the newly sampled data can never represent the original data, hence we aren't expecting to get a greater accuracy or precision but just to check whether an average amount of data can be classified into its true classes; If yes, more data of the minority classes from starbucks in the future can make the model much more accurate; Otherwise, we may have to understand that wrong classification are because the datapoints or records of 'offer viewed' and 'green flag' are so similar such that the model cannot distinguish among them and even new data cannot help the model to perform well.\n \nNow, let's treat the imbalanced dataset by using the RandomOverSampler (Random Over-sampling Technique) for over-sampling and see how the confusion matrix changes for the models.","35fe58b2":"# End\n\nIf you get to takeaway any information from this notebook, please **UPVOTE** the notebook. It keeps me motivated. Thank you!","cbfd6a89":"### 4.3. Continuous & Categorical\n\nTo find the relationship between a continuous and a catagorical variables.\n\n - Offer ID & Registration Month","96f555c4":"There are 8,078 missing values in each of the data variables 'gender' and 'income' (Both are part of the same record) of our dataset. Let's analyze these records alone to identify the reasons for occurrence of these missing values and the ways to treat it.","c115d23f":"We have an imbalanced categorical data\ndistribution for the variable \u2018gender\u2019 which can be encoded later using any suitableencoding scheme. The first category (\u2018other\u2019) is the least occuring and hence, its\ninfluence on the target class can be assumed to be low. Also, just because the variable\nhas a class imbalance, doesn't necessarily mean it isn't correlated with the target\nvariable.","d95b25f9":"Here, we have all the output and input features combined together and an additional variable 'id' which is nothing but the customer id.","4362d453":"## 1. DNN (Benchmark Models)\nLet's use the DNN model trained and tested on the Starbucks dataset as the\nbenchmark model. Models built using DNN are considered as the benchmark because it\ncan perform well on huge datasets and it\u2019s well suited for multiclass classification. As\nwe already know, DNNs can only accept numerical inputs, so we may have to encode\neach categorical input into numerical input. Our dataset has two categorical features:\n'gender\u2019 and \u2018offer_id\u2019, which are label encoded, i.e. since the variable \u2018offer_id\u2019 has 10\ncategories, each category is denoted by any unique numbers from 0 to 9. The problem\nof using label encoding in DNN is that sometimes the model may learn a false relation\nbetween the categories as they are represented in numbers, i.e. when the category -1\nrepresented as 0 is compared to the category-2 represented as 10, since there is a\ncomparable relation between the numbers 0 and 10, the model may assume that there\nis the same relation between the categories 1 and 2, which is obviously misleading.\nThus, label encoding is only recommended when there is a known relationship between\nthe categories or labels. So now, we have the option to still use the label encoding, or to\nuse any other encoding schemes like embedding, one hot encoding etc. or to use all the\nearlier mentioned schemes and find the respective model performance. Let\u2019s go with\nthe latter and create a larger space for comparison to our model.\n\n### 1.1. Label Encoded categorical data. ","1a682047":"This histogram gives us the idea that our dataset lacks records or datapoints of customers who has income between 70,000 and 120,000. It's essentially a distribution which is positively skewed or right skewed. So in skewed data, the tail region may act as an outlier for the statistical model and we know that outliers adversely affect the model\u2019s performance. Hence, we may need to normalize the data afterwards.","31a73f39":"## 1. Variable Standardization & Normalization\n\nWe may use this methods for many reasons such as to scale the data variable, to transform complex non-linear relationships into linear relationships, to normalize skewed distributions etc. \n\nAs we have analyzed in the univariate analysis stage, some of our data variables requires standardization so as to avoid its skewed nature and some requires normalization for scaling down the data.","52e6ce30":"### 3.1 Force Plot","98d113f8":"The distribution of the variable \u2018age\u2019\nin the dataset is positively skewed or right skewed. Hence, we may need to standardize\nthe same.","b566ee93":"### 4.2. Continuous & Continuous\n\nTo find the relationship between two continuous variables.\n\n - Age & Income","b054858d":"As mentioned earlier, we weren't expecting to get a greater accuracy, recall or precision for the model (As we\u2019re using imbalanced dataset) but we were to check whether an average amount of data can be classified into its true classes; since now we know it's possible, more data of the minority classes from starbucks in the future can make the model perform much more accurately. Otherwise, we have to understand that the wrong classifications are because the data points or records of each class are so similar that the model is not able to distinguish among them and even a new set of data records cannot make the model perform well. To our expectation, we were able to prove that half the amount of records from each class are classified correctly. And, using our model evaluation framework, we made it clear that a higher accuracy is possible in the future with enough data. (The majority class was classified with a recall of 88%) \n\n# Conclusion\nProblem of imbalanced dataset can be inferred from the confusion matrices of the benchmark models 1\nto 3 and our Model, that is, all the minority classes are wrongly predicted as\n'offer completed', which is the most occuring event or majority class. In\nessence, it is possibly because the models have over learned the majority class and\nthey aren't anymore able to predict the minority classes. This problem is handled in Model 4\nto Model 6 using imbalanced dataset handling techniques. The smooth growth in learning curve and abrupt or no growth in validation curve of Model 4 indicates that the test set is not a representative of the oversampled data. At the same time, the confusion matrix of the Model 5 built using XGBoost on the same oversampled data indicates that 50% of the records from each class are correctly\nclassified and is working well as expected. From the confusion matrix of Model 6, we can infer that the\nmodel has done pretty well when compared to Model 4 but not as good as Model 5 where class \u2018offer viewed\u2019, which is having the least number of data points of all is not predicted at all, which is possibly\nbecause the data points are so little that even the class weight adjustment couldn't prioratize it. The Model 7 is essentially an evaluation framework where we have dropped the minority classes and have made the model to learn and validate on the\nmajority class alone. Hence why the model witnessed an increase in micro-average f1-score\ncompared to all other models, even after new dataset being imbalanced again.\n","c40cac8e":"Problem of imbalanced dataset can be inferred from the confusion matrix. Most of the events are wrongly predicted as 'offer completed'; offer completed is the most occuring event or class.","761bd447":"### Let's import our combined dataset.","1edb7d30":"## 4. Bi-variate Analysis\n\nBi-variate Analysis finds out the relationship between two variables. Here, we look for association and disassociation between variables at a pre-defined significance level. We can perform bi-variate analysis for any combination of categorical and continuous variables.\n\nWe will be considering the following combination of variables:\n\n1. Age & Income.\n2. Offer ID & Registration Month\n3. Event ID & Gender","0da96957":"### Our dataset is imbalanced. The event 'offer viewed' and 'green flag' are the least occuring events compared to the other events. ","c8bd8f28":"###### As we thought, the model is able to classify 50% of all the records from each class correctly. As said earlier, we should not be concerned about the classification score right now, as we already know that the sampled data cannot give much precision as compared to the original data. ","f6916318":"## 2. Dropping Least Occuring Classes ","c0eb22f7":"There aren't any outliers to treat using the mathematical function z-score and from the above visualizations.","eb66e7fe":"We have time (int) as continuous value; where as person (str), event (str) and value (dict of strings) as categorical data.","f66bb920":"### 2.2. Frequency Table"}}