{"cell_type":{"ccceb3b5":"code","4391018d":"code","24a19c7d":"code","6b6cb3d4":"code","fb92ae02":"code","d583e13e":"code","21573e79":"code","1cc3f3a3":"markdown","38d1c28e":"markdown"},"source":{"ccceb3b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4391018d":"df_nba=pd.read_csv('..\/input\/nba2k20-player-dataset\/nba2k20-full.csv')","24a19c7d":"df_nba.info()","6b6cb3d4":"def from_date_to_age(date):\n    born=datetime.datetime.strptime(date, '%m\/%d\/%y')\n    today = datetime.date.today()\n    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\ndef int_weight(weight):\n    return weight.split(\"\/\")[1].split(\" \")[1]\ndef int_height(height):\n    return height.split(\"\/\")[1].split(\" \")[1]\n\n\n###### Convertion of type ########\n\n# convert height and weight to float values and rename \ndf_nba[\"height\"]=df_nba[\"height\"].apply(lambda x: int_height(x)).astype(\"float\")\ndf_nba[\"weight\"]=df_nba[\"weight\"].apply(lambda x: int_weight(x)).astype(\"float\")\ndf_nba.rename({\"height\":\"height_in_m\",\"weight\":\"weight_in_kg\"},axis='columns',inplace=True)\n\n# convert salary to int values\ndf_nba[\"salary\"] = df_nba[\"salary\"].str[1:].astype(\"int64\")\n\n# convert draft round,peak to int and handle missing value\ndf_nba[\"draft_round\"] = df_nba[\"draft_round\"].replace({\"Undrafted\": 0}).astype(\"int8\")\ndf_nba[\"draft_peak\"] = df_nba[\"draft_peak\"].replace({\"Undrafted\": 0}).astype(\"int8\")\n\n# \ndf_nba[\"jersey\"] = df_nba[\"jersey\"].str[1:].astype('int8')\n\n\n####### New columns ########\n\n\n# Compute the body mass for all players\ndf_nba[\"body_mass_index\"] = np.round(df_nba[\"weight_in_kg\"] \/ ((df_nba[\"height_in_m\"])**2),1)\n\n# Associate a label to a certain amount of body mass\ndf_nba.loc[(df_nba[\"body_mass_index\"]>=18.5) & (df_nba[\"body_mass_index\"]<=24.9),\"bmi_class\"] = \"Normal\"\ndf_nba.loc[(df_nba[\"body_mass_index\"]>=25) & (df_nba[\"body_mass_index\"]<=29.9),\"bmi_class\"] = \"Overweight\"\ndf_nba.loc[df_nba[\"body_mass_index\"]>=30,\"bmi_class\"] = \"Obese\"\n\n\n\n\n# Indicate if a mba players attended college \ndf_nba['college'].isna().astype('int').value_counts() \ndf_nba[\"attended_college\"] = df_nba['college'].isna().astype('int')\n\n# Indicate their current age\ndf_nba[\"current_age\"]=df_nba[\"b_day\"].apply(lambda x: from_date_to_age(x))\n\n# indicate the numbers of years played since they started nba\ndf_nba[\"year_played\"] = df_nba[\"current_age\"] - (df_nba[\"draft_year\"] - pd.to_datetime(df_nba[\"b_day\"]).dt.year)\ndf_nba.drop(columns=['b_day'])\n","fb92ae02":"df_nba[\"bmi_class\"] = df_nba[\"bmi_class\"].astype('category')\ndf_nba[\"bmi_class\"] = df_nba[\"bmi_class\"].cat.codes","d583e13e":"df_nba[\"team\"] = df_nba[\"team\"].astype('category')\ndf_nba[\"team\"] = df_nba[\"team\"].cat.codes","21573e79":"from sklearn import preprocessing\nfrom scipy import stats\n\ndata_dummy = pd.get_dummies(df_nba, columns=['team', 'position','draft_round', 'country', 'bmi_class'], drop_first= True)\ndata_dummy = data_dummy.drop(['full_name', 'draft_peak', 'b_day', 'college'], axis = 1)\nX, y = data_dummy.drop(['salary'], axis = 1), data_dummy['salary']\n\nprint(data_dummy)\n#normalizing input features\nnormalizer = preprocessing.Normalizer().fit(X)\nX = normalizer.transform(X)","1cc3f3a3":"Work in proress..","38d1c28e":"From the dataframe info, we can see that we have two columns with numerical data and the others are strings. We will need to convert to columns to numerical data in order to work\nwith. Therefore we observe that in the columns college and team their is some missing values we will also need to handle that."}}