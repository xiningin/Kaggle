{"cell_type":{"fda41f26":"code","4d183928":"code","3c4e7e85":"code","a7665c86":"code","8b78f468":"code","462280d0":"code","b5056a8e":"code","9a7a1c51":"code","0307285b":"code","e111f8a7":"code","9a3eecf0":"code","7be70dec":"code","ec67df35":"code","02481cca":"code","d44948b0":"code","cc76934a":"code","2f947610":"code","8d480d13":"code","5d30d3ed":"code","55c0a75b":"code","25da3b17":"code","80c127a2":"code","d80fb662":"code","52c80ddf":"code","4e92ac77":"markdown","0593f5a3":"markdown","5dc0688b":"markdown","ab9fc315":"markdown"},"source":{"fda41f26":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport string\nimport re\nimport gc\n\nfrom nltk.corpus import stopwords\nfrom tqdm import tqdm\nsns.set()\n\nstopwords = set(stopwords.words('english'))\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub","4d183928":"# # detect and init the TPU\n# tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n# tf.config.experimental_connect_to_cluster(tpu)\n# tf.tpu.experimental.initialize_tpu_system(tpu)\n\n# # instantiate a distribution strategy\n# tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","3c4e7e85":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a7665c86":"tweet = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","8b78f468":"df = pd.concat([tweet,test])","462280d0":"df.fillna('', inplace=True)\ndf['text'] = df['keyword']+' '+df['text']\n\ndf['text'] = df['text'].str.replace('\\%20',' ')\ndf['text'] = df['text'].str.replace('\\x89\u00fb\u00f2','')","b5056a8e":"maxlen = df.text.str.len().max()","9a7a1c51":"def remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\ndef remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\n\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\ndef remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)","0307285b":"df['text'] = df['text'].apply(lambda x : remove_URL(x))\ndf['text'] = df['text'].apply(lambda x : remove_html(x))\ndf['text'] = df['text'].apply(lambda x : remove_emoji(x))\ndf['text'] = df['text'].apply(lambda x : remove_punct(x))","e111f8a7":"df['text'] = df['text'].apply(lambda x: x.lower())","9a3eecf0":"train = df[:tweet.shape[0]]\ntest = df[tweet.shape[0]:]\n\ndel df\ngc.collect()","7be70dec":"from shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/tokenization\/tokenization.py\", dst = \"..\/working\/tokenization.py\")\n\nimport tokenization","ec67df35":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","02481cca":"def build_model(bert_layer, max_len=512):\n#     with tpu_strategy.scope():\n\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n\n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n\n    return model","d44948b0":"%%time\nmodule_url = \"\/kaggle\/input\/bert-uncased-l24-h1024-a16\/\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","cc76934a":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","2f947610":"train_input = bert_encode(train.text.values, tokenizer, max_len=maxlen)\n\ntrain_labels = train.target.values\ntrain_labels = train_labels.astype(np.int8)\n\ntest_input = bert_encode(test.text.values, tokenizer, max_len=maxlen)\n\ndel train, test\ngc.collect()","8d480d13":"model = build_model(bert_layer, max_len=maxlen)","5d30d3ed":"gc.collect()","55c0a75b":"callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)\n\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=20,\n    callbacks = [callback],\n    batch_size=32,\n    verbose=1,\n)\n\nmodel.save('model.h5')","25da3b17":"test_pred = model.predict(test_input)","80c127a2":"gc.collect()","d80fb662":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","52c80ddf":"submission.head()","4e92ac77":"This Kernel is based on the code and lessons from the following kernels:\n\n[In-Depth Guide to Google's BERT ](https:\/\/www.kaggle.com\/ratan123\/in-depth-guide-to-google-s-bert)\n\n[Disaster NLP: Keras BERT using TFHub](https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub)\n\n[Basic EDA,Cleaning and GloVe](https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove)","0593f5a3":"## Tokenization","5dc0688b":"## Data Cleaning","ab9fc315":"## Data Preparation"}}