{"cell_type":{"7d5b0aac":"code","a031b8cd":"code","570dcd6b":"code","f87d3128":"code","5315d70d":"code","f840bcf3":"code","1526041d":"code","cc71a65c":"code","13839246":"code","285e86a8":"code","866b6cac":"code","2ce97590":"code","5b6d356e":"code","fd82ba92":"code","56729e86":"code","4225a9dc":"code","73cc35bb":"code","1ea6a502":"code","1bd1b6d7":"code","f35e66b5":"code","638544ff":"code","c4681559":"markdown","704b957f":"markdown","965402a7":"markdown","e42a1db4":"markdown","5fda31b6":"markdown","8539b381":"markdown","4b699c9b":"markdown","13a274ff":"markdown","9ef8f8b8":"markdown"},"source":{"7d5b0aac":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nimport warnings\nimport matplotlib.pyplot as plt\n%matplotlib inline","a031b8cd":"warnings.filterwarnings('ignore')","570dcd6b":"housing_datasets = pd.read_csv('..\/input\/boston-housing\/housing.data', delim_whitespace=True, header = None)","f87d3128":"housing_datasets.head()","5315d70d":"columns_names = ['CRIM', 'ZN' , 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']","f840bcf3":"housing_datasets.columns = columns_names","1526041d":"sns.pairplot(housing_datasets, size=1.5)\nplt.tight_layout()\nplt.show()","cc71a65c":"column_analysis = ['ZN', 'INDUS','NOX', 'RM']\nsns.pairplot(housing_datasets[column_analysis],size = (2.5))\nplt.tight_layout()\nplt.show()","13839246":"housing_datasets.corr()","285e86a8":"plt.figure(figsize = (10, 8))\nsns.heatmap(housing_datasets.corr(), annot=True)\nplt.tight_layout()\nplt.show()","866b6cac":"model = LinearRegression()","2ce97590":"independent_attribute = housing_datasets['RM'].values.reshape(-1, 1)\ndependent_attribute = housing_datasets['MEDV'].values","5b6d356e":"model.fit(independent_attribute, dependent_attribute)","fd82ba92":"model.intercept_","56729e86":"model.coef_","4225a9dc":"plt.figure(figsize=(10, 8))\nsns.regplot(independent_attribute, dependent_attribute)\nplt.xlabel('Average Number of rooms per dwelling (Independent Attribute)')\nplt.ylabel('Median value of Owner-occupid homes in $1000\\'s (Dependent Attribute)')\nplt.tight_layout()\nplt.show()","73cc35bb":"sns.jointplot(x = 'MEDV', y = 'RM', data = housing_datasets, kind = 'reg', size = 10)\nplt.show()","1ea6a502":"plt.scatter('MEDV', 'RM',\n             s=100,\n             c='blue',\n             alpha=0.5, data=housing_datasets)\nplt.xlabel(\"MEDV\", size=16)\nplt.ylabel(\"RM\", size=16)\nplt.title(\"Bubble Plot with Colors: Matplotlib\", size=18)","1bd1b6d7":"sns.set_context(\"talk\", font_scale=1.1)\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='MEDV', \n                y='RM',\n                size=80,\n                sizes=(20,500),\n                alpha=0.5,\n                hue=\"RAD\",\n                c='blue',\n                data=housing_datasets)\n# Put the legend out of the figure\nplt.legend(bbox_to_anchor=(1.1, 1),borderaxespad=0)\n# Put the legend out of the figure\n#plt.legend(bbox_to_anchor=(1.01, 0.54),  borderaxespad=0.)\nplt.xlabel(\"MEDV\")\nplt.ylabel(\"RM\")\nplt.title(\"Bubble plot with Colors in Seaborn\")\nplt.tight_layout()\nplt.show()","f35e66b5":"import plotly.graph_objects as go\n\nimport pandas as pd\n\n# load dataset\ndf = housing_datasets\n\n# create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(go.Surface(z=df.values.tolist(), colorscale=\"Viridis\"))\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=0, b=0, l=0, r=0),\n    template=\"plotly_white\",\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add dropdown\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type = \"buttons\",\n            direction = \"left\",\n            buttons=list([\n                dict(\n                    args=[\"type\", \"surface\"],\n                    label=\"3D Surface\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"type\", \"heatmap\"],\n                    label=\"Heatmap\",\n                    method=\"restyle\"\n                )\n            ]),\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.11,\n            xanchor=\"left\",\n            y=1.1,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\n# Add annotation\nfig.update_layout(\n    annotations=[\n        dict(text=\"Trace type:\", showarrow=False,\n                             x=0, y=1.08, yref=\"paper\", align=\"left\")\n    ]\n)\n\nfig.show()","638544ff":"import plotly.graph_objects as go\n\n# Generate dataset\nimport numpy as np\nnp.random.seed(1)\n\nx0 = housing_datasets['MEDV']\ny0 = housing_datasets['RM']\nx1 = housing_datasets['CHAS']\ny1 = housing_datasets['RM']\nx2 = housing_datasets['CRIM']\ny2 = housing_datasets['RM']\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(\n    go.Scatter(\n        x=x0,\n        y=y0,\n        mode=\"markers\",\n        marker=dict(color=\"DarkOrange\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x1,\n        y=y1,\n        mode=\"markers\",\n        marker=dict(color=\"Crimson\")\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=x2,\n        y=y2,\n        mode=\"markers\",\n        marker=dict(color=\"RebeccaPurple\")\n    )\n)\n\n# Add buttons that add shapes\ncluster0 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x0), y0=min(y0),\n                            x1=max(x0), y1=max(y0),\n                            line=dict(color=\"DarkOrange\"))]\ncluster1 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x1), y0=min(y1),\n                            x1=max(x1), y1=max(y1),\n                            line=dict(color=\"Crimson\"))]\ncluster2 = [dict(type=\"circle\",\n                            xref=\"x\", yref=\"y\",\n                            x0=min(x2), y0=min(y2),\n                            x1=max(x2), y1=max(y2),\n                            line=dict(color=\"RebeccaPurple\"))]\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            buttons=[\n                dict(label=\"None\",\n                     method=\"relayout\",\n                     args=[\"shapes\", []]),\n                dict(label=\"Cluster 0\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster0]),\n                dict(label=\"Cluster 1\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster1]),\n                dict(label=\"Cluster 2\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster2]),\n                dict(label=\"All\",\n                     method=\"relayout\",\n                     args=[\"shapes\", cluster0 + cluster1 + cluster2])\n            ],\n        )\n    ]\n)\n\n# Update remaining layout properties\nfig.update_layout(\n    title_text=\"Highlight Clusters\",\n    showlegend=False,\n)\n\nfig.show()","c4681559":"### Create Linear Regression Model","704b957f":"# Import Necessary Libraries Python","965402a7":"# Exploratory Data Analysis: \n\n### In statistics, exploratory data analysis is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. A statistical model can be used or not, but primarily EDA is for seeing what the data can tell us beyond the formal modeling or hypothesis testing task.\n<img src=\"https:\/\/fiverr-res.cloudinary.com\/images\/t_main1,q_auto,f_auto,q_auto,f_auto\/gigs\/125813460\/original\/b181b396fd3ab88aa130a856f09817a958e29294\/do-exploratory-data-analysis.png\" alt=\"EDA\">","e42a1db4":"# Clustering Using Plotly","5fda31b6":"# Visualize the model","8539b381":"# Correlation","4b699c9b":"# Linear Regression","13a274ff":"# Load Boston Housing Data","9ef8f8b8":"# Join Plot"}}