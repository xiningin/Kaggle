{"cell_type":{"b8aca0b1":"code","6fcef605":"code","72b9555e":"code","71e16b68":"code","49e6911e":"code","bd9f2422":"code","99b1fff0":"code","920a7f41":"code","d59582c0":"code","466f4d70":"markdown","aa917d8c":"markdown","4a183a1c":"markdown","0b0c3d6e":"markdown","ab2d06f2":"markdown","f4100fa2":"markdown","18f29139":"markdown","99766de3":"markdown","cf6d5c73":"markdown","2519a09e":"markdown","81fbd7a2":"markdown","67a1e55b":"markdown","0421aeb2":"markdown","40b55115":"markdown","ea807e20":"markdown","deb8e1d6":"markdown","551094a6":"markdown"},"source":{"b8aca0b1":"class QuickUnionFind():\n    def __init__(self, N):\n        self.N =  N\n        self.ID = list(range(N))\n       \n    def root(self, i):\n        while i != self.ID[i]:\n            i = self.ID[i]\n        return i\n    \n    def connected(self, p, q):\n        return self.root(p) == self.root(q)\n    \n    def union(self, p, q):\n        i = self.root(p)\n        j = self.root(q)\n        if i == j: return\n        self.ID[i] = j","6fcef605":"# define the class\nQUF = QuickUnionFind(10)\n# define some unions\nQUF.union(1,4)\nQUF.union(1,5)\n# check the connections\nprint(QUF.connected(1,4))\nprint(QUF.connected(3,5))\nprint(QUF.connected(4,5))","72b9555e":"class WeightedQuickUnionFind():\n    def __init__(self, N):\n        self.N =  N\n        self.ID = list(range(N))\n        self.SZ = [1] * N\n       \n    def root(self, i):\n        while i != self.ID[i]:\n            i = self.ID[i]\n        return i\n    \n    def connected(self, p, q):\n        return self.root(p) == self.root(q)\n    \n    def union(self, p, q):\n        i = self.root(p)\n        j = self.root(q)\n        if i == j: return\n        if self.SZ[i] < self.SZ[j]:\n            self.SZ[j] += self.SZ[i]\n            self.ID[i] = j\n        else:\n            self.SZ[i] += self.SZ[j]\n            self.ID[j] = i","71e16b68":"class WeightedQuickUnionFindPathCompression():\n    def __init__(self, N):\n        self.N =  N\n        self.ID = list(range(N))\n        self.SZ = [1] * N\n       \n    def root(self, i):\n        while i != self.ID[i]:\n            self.ID[i] = self.ID[self.ID[i]]\n            i = self.ID[i]\n        return i\n    \n    def connected(self, p, q):\n        return self.root(p) == self.root(q)\n    \n    def union(self, p, q):\n        i = self.root(p)\n        j = self.root(q)\n        if i == j: return\n        if self.SZ[i] < self.SZ[j]:\n            self.SZ[j] += self.SZ[i]\n            self.ID[i] = j\n        else:\n            self.SZ[i] += self.SZ[j]\n            self.ID[j] = i","49e6911e":"import numpy as np\nimport random","bd9f2422":"%%time\nrepeat = 100\nSITE_SIZE = 50\nQU_prob_list = []\nlen_indices = SITE_SIZE*SITE_SIZE\n    \nfor i in range(repeat):\n    Site = np.zeros((SITE_SIZE, SITE_SIZE))\n    indices = list(range(SITE_SIZE*SITE_SIZE))\n    random.shuffle(indices)\n    len_indices = SITE_SIZE*SITE_SIZE\n    ## Use the basic\/simple Quick Union approach\n    Percolate = QuickUnionFind(len_indices + 2)\n    \n    for i in range(SITE_SIZE):\n        Percolate.union(0, i+1)\n        Percolate.union(len_indices+1, len_indices+1-i-1)\n\n    counter = 0\n    while not Percolate.connected(0, len_indices + 1):\n        rand_indx = indices[counter]\n        counter +=1\n        jj = rand_indx \/\/ SITE_SIZE\n        ii = rand_indx % SITE_SIZE\n        Site[jj, ii] = 1\n        # check left:\n        if ii>0:\n            if Site[jj, ii-1] ==1:\n                Percolate.union(rand_indx, rand_indx-1)\n        # check right\n        if ii<SITE_SIZE-1:\n             if Site[jj, ii+1] ==1:\n                Percolate.union(rand_indx, rand_indx+1)\n        # check above\n        if jj>0:\n             if Site[jj-1, ii] ==1:\n                Percolate.union(rand_indx, rand_indx-SITE_SIZE)   \n        # check below\n        if jj>SITE_SIZE-1:\n             if Site[jj+1, ii] ==1:\n                Percolate.union(rand_indx, rand_indx+SITE_SIZE)               \n\n    QU_prob_list.append(counter\/ len_indices)","99b1fff0":"%%time\nrepeat = 100\nSITE_SIZE = 50\nWQU_prob_list = []\nlen_indices = SITE_SIZE*SITE_SIZE\n    \nfor i in range(repeat):\n    Site = np.zeros((SITE_SIZE, SITE_SIZE))\n    indices = list(range(SITE_SIZE*SITE_SIZE))\n    random.shuffle(indices)\n\n    # Use the weighted Quick Union Approach\n    Percolate = WeightedQuickUnionFind(len_indices + 2)\n    for i in range(SITE_SIZE):\n        Percolate.union(0, i+1)\n        Percolate.union(len_indices+1, len_indices+1-i-1)\n\n    counter = 0\n    while not Percolate.connected(0, len_indices + 1):\n        rand_indx = indices[counter]\n        counter +=1\n        jj = rand_indx \/\/ SITE_SIZE\n        ii = rand_indx % SITE_SIZE\n        Site[jj, ii] = 1\n        # check left:\n        if ii>0:\n            if Site[jj, ii-1] ==1:\n                Percolate.union(rand_indx, rand_indx-1)\n        # check right\n        if ii<SITE_SIZE-1:\n             if Site[jj, ii+1] ==1:\n                Percolate.union(rand_indx, rand_indx+1)\n        # check above\n        if jj>0:\n             if Site[jj-1, ii] ==1:\n                Percolate.union(rand_indx, rand_indx-SITE_SIZE)   \n        # check below\n        if jj>SITE_SIZE-1:\n             if Site[jj+1, ii] ==1:\n                Percolate.union(rand_indx, rand_indx+SITE_SIZE)               \n\n    WQU_prob_list.append(counter\/ len_indices)","920a7f41":"%%time\nrepeat = 100\nSITE_SIZE = 50\nWQUPC_prob_list = []\nlen_indices = SITE_SIZE*SITE_SIZE\n\nfor i in range(repeat):\n    Site = np.zeros((SITE_SIZE, SITE_SIZE))\n    indices = list(range(SITE_SIZE*SITE_SIZE))\n    random.shuffle(indices)\n    \n    # Use the weighted QU with Path Compression \n    Percolate = WeightedQuickUnionFindPathCompression(len_indices + 2)\n    for i in range(SITE_SIZE):\n        Percolate.union(0, i+1)\n        Percolate.union(len_indices+1, len_indices+1-i-1)\n\n    counter = 0\n    while not Percolate.connected(0, len_indices + 1):\n        rand_indx = indices[counter]\n        counter +=1\n        jj = rand_indx \/\/ SITE_SIZE\n        ii = rand_indx % SITE_SIZE\n        Site[jj, ii] = 1\n        # check left:\n        if ii>0:\n            if Site[jj, ii-1] ==1:\n                Percolate.union(rand_indx, rand_indx-1)\n        # check right\n        if ii<SITE_SIZE-1:\n             if Site[jj, ii+1] ==1:\n                Percolate.union(rand_indx, rand_indx+1)\n        # check above\n        if jj>0:\n             if Site[jj-1, ii] ==1:\n                Percolate.union(rand_indx, rand_indx-SITE_SIZE)   \n        # check below\n        if jj>SITE_SIZE-1:\n             if Site[jj+1, ii] ==1:\n                Percolate.union(rand_indx, rand_indx+SITE_SIZE)               \n\n    WQUPC_prob_list.append(counter\/ len_indices)","d59582c0":"print(round(np.median(QU_prob_list), 4))\nprint(round(np.median(WQU_prob_list), 4))\nprint(round(np.median(WQUPC_prob_list), 4))","466f4d70":"#### Use the weighted Quick Union Approach","aa917d8c":"The basic algorithm suffers from the root fuction. We can make the chains smaller (basically lower the average of distance between the nodes and their root, or make the graphs shallower). That is the weighted Quick Union algorithm. At the time of union we bring the smaller trees\/graphs under the larger trees.","4a183a1c":"In computing and graph theory, a dynamic connectivity structure is a data structure that dynamically maintains information about the connected components of a graph ([source](https:\/\/en.wikipedia.org\/wiki\/Dynamic_connectivity)). We need some algorithms to efficiently union the nodes and later check if two given nodes are (directly or indirectly) conneced to each other. Basically, if two nodes are connected, they belong to one chain\/parent. ","0b0c3d6e":"# Monte Carlo simulation","ab2d06f2":"![image.png](attachment:c9e6ee11-b41e-4c7a-865e-f46e96f40fb9.png)![image.png](attachment:ab2f7f89-3362-4596-85bc-a7ea28263937.png)","f4100fa2":"#### Use the weighted QU with Path Compression ","18f29139":"In this notebook, I will code up the quick-union algorithm (and the improved versions) to solve Dynamic Conectivity problem. \nAt the end, the designed functions will be used to solve a real-world problem so called Percolation. This is also one of the assignment of this [course](https:\/\/coursera.cs.princeton.edu\/algs4\/assignments\/percolation\/specification.php). The problem statement comes directly from this website.","99766de3":"### Percolation: \nGiven a composite systems comprised of randomly distributed insulating and metallic materials: what fraction of the materials need to be metallic so that the composite system is an electrical conductor? Given a porous landscape with water on the surface (or oil below), under what conditions will the water be able to drain through to the bottom (or the oil to gush through to the surface)? Scientists have defined an abstract process known as percolation to model such situations.","cf6d5c73":"# Define Classes","2519a09e":"#### Use the basic\/simple Quick Union approach","81fbd7a2":"### The model:\nWe model a percolation system using an n-by-n grid of sites. Each site is either open or blocked. A full site is an open site that can be connected to an open site in the top row via a chain of neighboring (left, right, up, down) open sites. We say the system percolates if there is a full site in the bottom row. In other words, a system percolates if we fill all open sites connected to the top row and that process fills some open site on the bottom row. (For the insulating\/metallic materials example, the open sites correspond to metallic materials, so that a system that percolates has a metallic path from top to bottom, with full sites conducting. For the porous substance example, the open sites correspond to empty space through which water might flow, so that a system that percolates lets water fill open sites, flowing from top to bottom.)\n","67a1e55b":"# Percolates Problem\n\n[SOURCE](https:\/\/coursera.cs.princeton.edu\/algs4\/assignments\/percolation\/specification.php)","0421aeb2":"As we observed, the improved versions of QU are much faster than the basic algorithm (1.6 seconds vs. 5.4 seconds). Now, let's get the median of their probability lists.","40b55115":"# Introduction","ea807e20":"Let's see how this class and its methods work:","deb8e1d6":"### The problem:\nIn a famous scientific problem, researchers are interested in the following question: if sites are independently set to be open with probability p (and therefore blocked with probability 1 \u2212 p), what is the probability that the system percolates? When p equals 0, the system does not percolate; when p equals 1, the system percolates. \n\n![image.png](attachment:776d8f6b-b802-4390-8ddf-d34897d3e16f.png)![image.png](attachment:2faa8467-1860-42e8-b98d-e8005e88e572.png)","551094a6":"There is one more improvement idea, called Path Compression. As we walk through one path to find the root of a node, we can update the parents list (id[] array). This will improve the efficiency of of method significantly comparing with the basic approach. I will test that when I code up the Percolate solution. "}}