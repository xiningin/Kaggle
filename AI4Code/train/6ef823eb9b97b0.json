{"cell_type":{"aa9e9391":"code","a3256c29":"code","e158ae7b":"code","b09bdd42":"code","34d149ac":"code","3765dacf":"code","5871aea2":"markdown","7d3f1cdb":"markdown","e57a51fb":"markdown","14a68d9b":"markdown","80a508cc":"markdown","cc3477a1":"markdown"},"source":{"aa9e9391":"directory = \"..\/input\/plantvillage-dataset\/plantvillage dataset\/segmented\"\ndiseases = [\"Strawberry___healthy\", \"Strawberry___Leaf_scorch\"]\nbatch_size = 32\ntarget_size = (299, 299)\nkeras_model = \"strawberry_model.h5\"\nconverted_model = \"strawberry_converted.tflite\"\nepochs = 30","a3256c29":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2)\n\ntrain_generator = datagen.flow_from_directory(\n    directory,\n    target_size=target_size,\n    classes=diseases,\n    batch_size=batch_size,\n    subset='training')\n\nvalidation_generator = datagen.flow_from_directory(\n    directory,\n    target_size=target_size,\n    classes=diseases,\n    batch_size=batch_size,\n    subset='validation')","e158ae7b":"from keras.applications.inception_v3 import InceptionV3\nfrom keras.models import Model\nfrom keras.layers import Dense, GlobalAveragePooling2D\n\nbase_model = InceptionV3(weights='imagenet', include_top=False)\n\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\npredictions = Dense(len(diseases), activation='softmax')(x)\n                    \nmodel = Model(inputs=base_model.input, outputs=predictions)\n\nmodel.summary()\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nhistory = model.fit_generator(\n    train_generator,\n    validation_data=validation_generator,\n    steps_per_epoch=train_generator.samples\/\/batch_size,\n    epochs=epochs,\n    validation_steps=validation_generator.samples\/\/batch_size)\n\nmodel.save(keras_model)","b09bdd42":"import matplotlib.pyplot as plt\n\n# Plot training & validation accuracy values\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","34d149ac":"import tensorflow as tf\n\nconverter = tf.lite.TFLiteConverter.from_keras_model_file(\n    keras_model, \n    input_shapes={'input_1': [1, 299, 299, 3]}, \n    input_arrays=['input_1'], \n    output_arrays=['dense_2\/Softmax'])\n\nconverter.post_training_quantize=True\ntflite_model = converter.convert()\nopen(converted_model, \"wb\").write(tflite_model)","3765dacf":"import tensorflow as tf\n\ninterpreter = tf.lite.Interpreter(model_path=converted_model)\ninterpreter.allocate_tensors()\n\n# Print input shape and type\nprint(interpreter.get_input_details()[0]['shape'])\nprint(interpreter.get_input_details()[0]['dtype'])\n\n# Print output shape and type\nprint(interpreter.get_output_details()[0]['shape'])\nprint(interpreter.get_output_details()[0]['dtype'])","5871aea2":"**Converting to TFLite**","7d3f1cdb":"**Specify model input and output**","e57a51fb":"**Training history visualization**","14a68d9b":"**Image Preprocessing**","80a508cc":"**Initalizing Variables**","cc3477a1":"**Training CNN model based on InceptionV3**"}}