{"cell_type":{"c0c7d00c":"code","407a64d4":"code","00e7b692":"code","e74bafef":"code","fb12c55b":"code","5c180487":"code","43e5c663":"code","c70f9370":"markdown","8bb05b9f":"markdown","5e15fb55":"markdown","ba12eac9":"markdown"},"source":{"c0c7d00c":"import torch\nimport torch.nn as nn\nimport torch\nimport torchvision\nimport torch.nn as nn  # All neural network modules, nn.Linear, nn.Conv2d, BatchNorm, Loss functions\nimport torch.optim as optim  # For all Optimization algorithms, SGD, Adam, etc.\nimport torchvision.datasets as datasets  # Has standard datasets we can import in a nice way\nimport torchvision.transforms as transforms  # Transformations we can perform on our dataset\nfrom torch.utils.data import (\n    DataLoader,\n)  # Gives easier dataset managment and creates mini batches\nfrom torch.utils.tensorboard import SummaryWriter  # to print to tensorboard\n# Import our models we've defined (from DCGAN paper)\n","407a64d4":"#### write discriminator class and generator class\n\nclass Discriminator(nn.Module):\n    def __init__(self, channels_img, features_d):\n        super(Discriminator, self).__init__()\n        self.net = nn.Sequential(\n            # N x channels_img x 64 x 64\n            nn.Conv2d(channels_img, features_d, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            # N x features_d x 32 x 32\n            nn.Conv2d(features_d, features_d * 2, kernel_size=4, stride=2, padding=1),\n            nn.BatchNorm2d(features_d * 2),\n            nn.LeakyReLU(0.2),\n            nn.Conv2d(\n                features_d * 2, features_d * 4, kernel_size=4, stride=2, padding=1\n            ),\n            nn.BatchNorm2d(features_d * 4),\n            nn.LeakyReLU(0.2),\n            nn.Conv2d(\n                features_d * 4, features_d * 8, kernel_size=4, stride=2, padding=1\n            ),\n            nn.BatchNorm2d(features_d * 8),\n            nn.LeakyReLU(0.2),\n            # N x features_d*8 x 4 x 4\n            nn.Conv2d(features_d * 8, 1, kernel_size=4, stride=2, padding=0),\n            # N x 1 x 1 x 1\n            nn.Sigmoid(),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\nclass Generator(nn.Module):\n    def __init__(self, channels_noise, channels_img, features_g):\n        super(Generator, self).__init__()\n\n        self.net = nn.Sequential(\n            # N x channels_noise x 1 x 1\n            nn.ConvTranspose2d(\n                channels_noise, features_g * 16, kernel_size=4, stride=1, padding=0\n            ),\n            nn.BatchNorm2d(features_g * 16),\n            nn.ReLU(),\n            # N x features_g*16 x 4 x 4\n            nn.ConvTranspose2d(\n                features_g * 16, features_g * 8, kernel_size=4, stride=2, padding=1\n            ),\n            nn.BatchNorm2d(features_g * 8),\n            nn.ReLU(),\n            nn.ConvTranspose2d(\n                features_g * 8, features_g * 4, kernel_size=4, stride=2, padding=1\n            ),\n            nn.BatchNorm2d(features_g * 4),\n            nn.ReLU(),\n            nn.ConvTranspose2d(\n                features_g * 4, features_g * 2, kernel_size=4, stride=2, padding=1\n            ),\n            nn.BatchNorm2d(features_g * 2),\n            nn.ReLU(),\n            nn.ConvTranspose2d(\n                features_g * 2, channels_img, kernel_size=4, stride=2, padding=1\n            ),\n            # N x channels_img x 64 x 64\n            nn.Tanh(),\n        )\n\n    def forward(self, x):\n        return self.net(x)","00e7b692":"# Hyperparameters\nlr = 0.0005\nbatch_size = 64\nimage_size = 64\nchannels_img = 1\nchannels_noise = 256\nnum_epochs = 10\n\n# For how many channels Generator and Discriminator should use\nfeatures_d = 16\nfeatures_g = 16","e74bafef":"my_transforms = transforms.Compose(\n    [\n        transforms.Resize(image_size),\n        transforms.ToTensor(),\n        transforms.Normalize((0.5,), (0.5,)),\n    ]\n)\n\ndataset = datasets.MNIST(\n    root=\"dataset\/\", train=True, transform=my_transforms, download=True\n)\ndataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","fb12c55b":"# Create discriminator and generator\nnetD = Discriminator(channels_img, features_d).to(device)\nnetG = Generator(channels_noise, channels_img, features_g).to(device)\n\n# Setup Optimizer for G and D\noptimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(0.5, 0.999))\noptimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(0.5, 0.999))\n\nnetG.train()\nnetD.train()\n\ncriterion = nn.BCELoss()","5c180487":"real_label = 1\nfake_label = 0\n\nfixed_noise = torch.randn(64, channels_noise, 1, 1).to(device)\nwriter_real = SummaryWriter(f\"runs\/GAN_MNIST\/test_real\")\nwriter_fake = SummaryWriter(f\"runs\/GAN_MNIST\/test_fake\")\nstep = 0\n","43e5c663":"print(\"Starting Training...\")\n\nfor epoch in range(num_epochs):\n    for batch_idx, (data, targets) in enumerate(dataloader):\n        data = data.to(device)\n        batch_size = data.shape[0]\n\n        ### Train Discriminator: max log(D(x)) + log(1 - D(G(z)))\n        netD.zero_grad()\n        label = (torch.ones(batch_size) * 0.9).to(device)\n        output = netD(data).reshape(-1)\n        lossD_real = criterion(output, label)\n        D_x = output.mean().item()\n\n        noise = torch.randn(batch_size, channels_noise, 1, 1).to(device)\n        fake = netG(noise)\n        label = (torch.ones(batch_size) * 0.1).to(device)\n\n        output = netD(fake.detach()).reshape(-1)\n        lossD_fake = criterion(output, label)\n\n        lossD = lossD_real + lossD_fake\n        lossD.backward()\n        optimizerD.step()\n\n        ### Train Generator: max log(D(G(z)))\n        netG.zero_grad()\n        label = torch.ones(batch_size).to(device)\n        output = netD(fake).reshape(-1)\n        lossG = criterion(output, label)\n        lossG.backward()\n        optimizerG.step()\n\n        # Print losses ocassionally and print to tensorboard\n        if batch_idx % 100 == 0:\n            step += 1\n            print(\n                f\"Epoch [{epoch}\/{num_epochs}] Batch {batch_idx}\/{len(dataloader)} \\\n                  Loss D: {lossD:.4f}, loss G: {lossG:.4f} D(x): {D_x:.4f}\"\n            )\n\n            with torch.no_grad():\n                fake = netG(fixed_noise)\n                img_grid_real = torchvision.utils.make_grid(data[:32], normalize=True)\n                img_grid_fake = torchvision.utils.make_grid(fake[:32], normalize=True)\n                writer_real.add_image(\n                    \"Mnist Real Images\", img_grid_real, global_step=step\n                )\n                writer_fake.add_image(\n                    \"Mnist Fake Images\", img_grid_fake, global_step=step\n                )","c70f9370":"# ### Transformations, dataloaders and device below","8bb05b9f":"### Define Hyperparameters","5e15fb55":"### Define Discriminator and Generator Nets below","ba12eac9":"### This is an implementation of DCGAN paper https:\/\/arxiv.org\/abs\/1511.06434"}}