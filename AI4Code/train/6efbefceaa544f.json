{"cell_type":{"4c89a80b":"code","ead547b0":"code","e39ed7f0":"code","fa9fafcc":"code","5ee82198":"code","2c70cdf5":"code","f41df278":"code","4bc2fe00":"code","6351777b":"code","daafa8a9":"code","a085f9c8":"code","3076ac74":"code","63cd102e":"code","d9587fad":"code","6e8faa24":"code","86cebc00":"code","a6e2e121":"code","b1006389":"code","7fada831":"code","a43e7ffc":"code","487d29d3":"code","c205bbd6":"code","a33f64d7":"code","eae8aebb":"code","da8e6013":"code","dfe3ef88":"code","b12e9d8e":"code","09504846":"code","b4fca55a":"code","28662899":"code","ba719836":"code","13504dc2":"code","da84e4c0":"code","66fc4d1c":"code","5966ed32":"code","f148ed6c":"code","083fba9c":"code","52a75dd4":"code","14b7058f":"code","b9b56c74":"markdown","38b85c49":"markdown","3cf330d9":"markdown","8573a790":"markdown","70b8c8a5":"markdown","86d9df13":"markdown"},"source":{"4c89a80b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ead547b0":"import datetime as dt\nimport logging\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nimport catboost\nfrom catboost import CatBoostRegressor\nfrom catboost import Pool, cv\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","e39ed7f0":"### Read Data \nitems=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_cat=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ntrain_df=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsubmission=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')","fa9fafcc":"display(items.shape)\ndisplay(item_cat.shape)\ndisplay(train_df.shape)\ndisplay(shops.shape)\ndisplay(test_df.shape)\ndisplay(submission.shape)","5ee82198":"print(items.head())\nprint(item_cat.head())\nprint(train_df.head())\nprint(shops.head())\nprint(test_df.head())\nprint(submission.head())","2c70cdf5":"train_df.describe()","f41df278":"train_df.isnull().sum()## No nulls present","4bc2fe00":"train_df.head()\n## dropping the columns not required\ntrain_df.drop(['date_block_num','item_price'],axis=1,inplace=True)","6351777b":"### Convert the date column to pandas datetime type\ntrain_df['date'] = pd.to_datetime(train_df['date'])","daafa8a9":"train_df.head()\n## Get month,year only\ntrain_df['month']=train_df['date'].dt.month\ntrain_df['year']=train_df['date'].dt.year","a085f9c8":"train_df","3076ac74":"# train_df.drop('date',axis=1,inplace=True)\ntrain_df['date'] = train_df['date'].apply(lambda x: x.strftime('%Y-%m'))","63cd102e":"train_df.head()","d9587fad":"### Aggregate the data by date,shopid and item id\ndata = train_df.groupby(['date','shop_id','item_id']).sum()","6e8faa24":"data = data.pivot_table(index=['shop_id','item_id'], columns='date', values='item_cnt_day', fill_value=0)","86cebc00":"data.reset_index(inplace=True)","a6e2e121":"data","b1006389":"display(test_df.shape)\ntest_df=pd.merge(test_df, data, on=['shop_id','item_id'], how='left')\ndisplay(test_df.shape)\ntest_df = test_df.fillna(0)","7fada831":"test_df.T","a43e7ffc":"data.T","487d29d3":"# split into train and test sets\nY_train = data['2015-12'].values\nX_train = data.drop(['2015-12'], axis = 1)\nX_test = test_df\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","c205bbd6":"x_train, x_test, y_train, y_test = train_test_split( X_train, Y_train, test_size=0.20, random_state=123)","a33f64d7":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","eae8aebb":"## Prepara a pool of train and validation set\npool_train=Pool(x_train,y_train)\npool_val=Pool(x_test,y_test)","da8e6013":"### Define a cv function to fit on data and find the optimal number of iteration keeping other parameters fixed\n### Function takes input = catboost object with default params , train data ,train y data \ndef modelfit(params,poolX,useTrainCV=True,cv_folds=5,early_stopping_rounds=40):\n    if useTrainCV:\n        cvresult = cv(params=params, pool=poolX,nfold=cv_folds,early_stopping_rounds=early_stopping_rounds,plot=True)\n    return cvresult ## return dataframe for the iteration till the optimal iteration is reached","dfe3ef88":"## Prepara a cv class\nparams={\n    'loss_function':'RMSE'\n}","b12e9d8e":"### Object return the optimal number of trees to grow\nn_est=modelfit(params,pool_train)","09504846":"n_est.shape[0]### best iteration =664","b4fca55a":"### Fit the model with iteration=664\ncboost1=CatBoostRegressor(iterations=664,loss_function='RMSE',random_seed=123)\ncboost1.fit(x_train,y_train)","28662899":"#Predict training set:\ntrain_predictions = cboost1.predict(x_train)\n#Print model report:\nprint(\"\\nModel Report Train\")\nprint(\"Root Mean Square Error : %.4g\" % metrics.mean_squared_error(y_train, train_predictions))\nprint(\"R^2 Score (Train): %f\" % metrics.r2_score(y_train, train_predictions))","ba719836":"#Predict training set:\ntest_predictions = cboost1.predict(x_test)\n#Print model report:\nprint(\"\\nModel Report Test\")\nprint(\"Root Mean Square Error : %.4g\" % metrics.mean_squared_error(y_test, test_predictions))\nprint(\"R^2 Score (Train): %f\" % metrics.r2_score(y_test, test_predictions))","13504dc2":"X_train","da84e4c0":"prediction = cboost1.predict(X_test)","66fc4d1c":"prediction = list(map(round, prediction))","5966ed32":"len(prediction)","f148ed6c":"submission.shape","083fba9c":"submission\nsubmission['item_cnt_month'] = prediction\nsubmission.to_csv('prediction.csv', index=False)","52a75dd4":"submission.tail()","14b7058f":"submission.head(50)","b9b56c74":"### Prediction on X_test","38b85c49":"### Fit the model with 600 iteration","3cf330d9":"#### On Test set","8573a790":"### Submission Data","70b8c8a5":"### Create a benchmark Catboost regressor model","86d9df13":"### Split the data into train and test set from train_df"}}