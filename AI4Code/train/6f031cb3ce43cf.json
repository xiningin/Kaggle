{"cell_type":{"05d4a955":"code","300da4dc":"code","35ffb3c7":"code","0640e63a":"code","84ef2bf7":"code","5cbd27d3":"code","b5cf64fc":"code","8cb9f301":"code","c434458c":"code","6100b781":"code","451ec4fc":"code","29ae9e17":"code","2f7ea748":"code","16b57f0b":"code","01bb7927":"code","09002537":"code","c94a328a":"code","1161d336":"code","549b5d6c":"code","2e86e342":"code","774881b6":"code","9941012e":"code","b8ecb24b":"code","5bfa259d":"code","a87611d7":"code","4464fd53":"code","55e4294c":"code","c9891026":"code","a5d8ebf7":"code","3143bde7":"code","3bcc8203":"code","f8966810":"code","0bddffee":"code","dd786cf9":"code","3ecc50d7":"code","1e8f3853":"code","a07d9076":"code","d4c9fbc6":"code","693ccdce":"code","9274c45a":"code","d57846c6":"code","5f9af048":"code","85191c82":"code","7ba65f78":"code","d139fad2":"code","704adc1b":"code","b1969116":"code","203cfbb9":"code","1e7c1560":"code","90fb4ee5":"code","07d2f8a4":"code","260ee21d":"code","fd4a587d":"code","1c26e818":"code","c078525a":"code","6e80bfe1":"code","896aa246":"code","ab4a77ec":"code","d04f4765":"code","9a093d73":"code","08138b21":"code","1eba5a34":"code","d7435935":"code","e5a1a8a4":"code","14278d2a":"code","0b101172":"code","3d356dbb":"markdown","cf79cf77":"markdown","b0721558":"markdown","fd12c179":"markdown","c4f87738":"markdown","63b57b05":"markdown","d6703658":"markdown","8d9b028d":"markdown","e3dcf0ca":"markdown","2bbfc170":"markdown","2b1b8584":"markdown","9aeaba4a":"markdown","4a755c78":"markdown","acfccb97":"markdown","69c2e4f7":"markdown","a752cdd9":"markdown","b3824220":"markdown","c24dc5fa":"markdown","68e609f8":"markdown","e902478d":"markdown","cfe3b0db":"markdown","6e485601":"markdown","9070b13b":"markdown","0329aac0":"markdown","c1aacc04":"markdown","7d69110c":"markdown","0efc11dd":"markdown","e4198d4b":"markdown","08733ad5":"markdown","23aaaa25":"markdown","1a479ab1":"markdown","dc4aacc3":"markdown","06baa937":"markdown","53d769ae":"markdown","4176e62e":"markdown","981b38dd":"markdown","a70bdefc":"markdown","ecf55693":"markdown","cc5a059b":"markdown"},"source":{"05d4a955":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport string\nimport nltk\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport plotly.express as ex\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nimport plotly.offline as pyo\nfrom plotly.subplots import make_subplots\npyo.init_notebook_mode()\n\nfrom sklearn.cluster import KMeans\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\n\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import plot_tree,DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.kernel_approximation import RBFSampler\n\nimport os\ndef set_seed(seed=31415):\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\nset_seed()\n\nplt.rc('figure',figsize=(15,13))","300da4dc":"c_data = pd.read_csv('\/kaggle\/input\/israeli-corona-tested-individuals\/corona_tested_individuals.csv')\n#Translate From Hebrew To English\nc_data.gender= c_data.gender.replace({'\u05d6\u05db\u05e8':'Male','\u05e0\u05e7\u05d1\u05d4':'Female'})\nc_data.corona_result= c_data.corona_result.replace({'\u05e9\u05dc\u05d9\u05dc\u05d9':'Negative','\u05d7\u05d9\u05d5\u05d1\u05d9':'Positive','\u05d0\u05d7\u05e8':'Other'})\nc_data.head(4)","35ffb3c7":"#Preprocessing\nc_data.gender= c_data.gender.replace({'Male':1,'Female':0})\nc_data.corona_result= c_data.corona_result.replace({'Negative':0,'Positive':1,'Other':-1})\n\n\n#Feature Engineering\nc_data['number_of_symptomps'] = c_data.cough+c_data.fever+c_data.sore_throat+c_data.shortness_of_breath+c_data.head_ache\n\nc_data['year']          = pd.DatetimeIndex(c_data['test_date']).year\nc_data['month']         = pd.DatetimeIndex(c_data['test_date']).month\nc_data['day']           = pd.DatetimeIndex(c_data['test_date']).day\nc_data['day_of_year']   = pd.DatetimeIndex(c_data['test_date']).dayofyear\nc_data['quarter']       = pd.DatetimeIndex(c_data['test_date']).quarter\nc_data['season']        =                  c_data.month%12 \/\/ 3 + 1 \n\nc_data.test_date = pd.to_datetime(c_data.test_date)\nmean_date = c_data.groupby('test_date').mean().reset_index()","0640e63a":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Corona Test Result | Had Cough<b>','<b>Corona Test Result |Didnt Have Cough<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.cough.value_counts().values,labels=['<b>Didnt Have Cough<b>','<b>Had Cough<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query('cough==1').corona_result.value_counts().values,\n        pull=[0,0.05,0.5],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query('cough==0').corona_result.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total Cough Complaints<b>\",\n)\n\nfig.show()","84ef2bf7":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Gender Distribution | Had Cough<b>','<b>Gender Distribution | Didnt Have Cough<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.cough.value_counts().values,labels=['<b>Didnt Have Cough<b>','<b>Had Cough<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query('cough==1').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query('cough==0').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3, marker_colors=['pink','lightblue']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total Cough Complaints<b>\",\n)\n\nfig.show()","5cbd27d3":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Test Indication | Had Cough<b>','<b>Test Indication | Didnt Have Cough<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.cough.value_counts().values,labels=['<b>Didnt Have Cough<b>','<b>Had Cough<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query('cough==1').test_indication.value_counts().index,\n        values=c_data.query('cough==1').test_indication.value_counts().values,\n        pull=[0,0.09,0.2],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query('cough==0').test_indication.value_counts().index,\n        values=c_data.query('cough==0').test_indication.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3, marker_colors=['salmon','goldenrod']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total Cough Complaints<b>\",\n)\n\nfig.show()","b5cf64fc":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Number Of Symptoms Beside Coughing Distribution<b>'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"histogram\",\"rowspan\": 2}] ,\n           [None                               ,None]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.cough.value_counts().values,labels=['<b>Didnt Have Cough<b>','<b>Had Cough<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Histogram(\n        x=c_data.query('cough==1')['number_of_symptomps']-1        \n    ),\n    row=1, col=2\n)\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total Cough Complaints<b>\",\n)\n\nfig['layout']['xaxis']['title']='Number Of Other Symptoms'\nfig['layout']['yaxis']['title']='Number Of Samples'\n\nfig.show()","8cb9f301":"f_data=mean_date.copy()\npartitions = []\npartitions.append(f_data.loc[44:np.round(len(f_data)\/3,0)-1,:])\npartitions.append(f_data.loc[np.round(len(f_data)\/3,0):2*int(len(f_data)\/3)-1,:])\npartitions.append(f_data.loc[2*np.round(len(f_data)\/3,0):3*int(len(f_data)\/3)-1,:])\n\n\n\ncough_part_means =[]\ncough_part_std   =[]\n\nfor part in partitions:\n    cough_part_means.append(part['cough'].mean())\n    cough_part_std.append(part['cough'].std())\n\nres_df = pd.DataFrame({'Cough Mean':cough_part_means,'Cough SD':cough_part_std},\n                     index = [f'Partition_{i}' for i in range(1,4)])\n\n\n\nres_df = res_df.T\nres_df = res_df.reset_index()\n\n\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Statistic<b>', '<b>Partition_1<b>','<b>Partition_2<b>','<b>Partition_3<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     ['<b>Cough Mean<b>', '<b>Cough SD<b>'],np.round(res_df.iloc[:,1],2),np.round(res_df.iloc[:,2],2),np.round(res_df.iloc[:,3],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Different Partitions Mean And Standard Deviation')\nfig.show()\n","c434458c":"fig = make_subplots(rows=3, cols=1)\n\nfor idx,prt in enumerate(partitions):\n    fig.add_trace(\n    go.Scatter(x=prt['test_date'], y=prt['cough'],name=f'Cough Partition {idx+1}'),\n    row=idx+1, col=1)\n\n\nfig.update_layout(height=600, width=900, title_text=\"Distibution Of Daily Average Precennt Of Cough Complaints For Each Partition\")\nfig.show()","6100b781":"result = adfuller(mean_date.cough.values)\nadf_stat = result[0]\np_val = np.round(result[1],2)\nprint('Augmented Dickey-Fuller (ADF) test P-Value: [{}]'.format(p_val))\n","451ec4fc":"fig = make_subplots(rows=4, cols=1, subplot_titles=('Observed Cough', 'Trend Cough','Seasonal Cough','Residual Cough'))\nb_date_mean = mean_date\n\nlbl = ['Cough']\n\nfor idx,column in enumerate(['cough']):\n    res = seasonal_decompose(b_date_mean[column], period=60, model='additive', extrapolate_trend='freq')\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.observed)), y=res.observed,name='{} Observed'.format(lbl[idx])),\n    row=1, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.trend)), y=res.trend,name='{} Trend'.format(lbl[idx])),\n    row=2, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.seasonal)), y=res.seasonal,name='{} Seasonal'.format(lbl[idx])),\n    row=3, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.resid)), y=res.resid,name='{} Residual'.format(lbl[idx])),\n    row=4, col=idx+1)\n            \nfig.update_layout(height=600, width=900, title_text=\"Decomposition Of Daily Average Cough Complients Precentage into Trend,Level,Seasonality and Residuals\")\nfig.show()","29ae9e17":"f, ax = plt.subplots(nrows=3, ncols=1, figsize=(16, 10))\n\nax[0].set_title('Cough Autocorrelation Analysis ',fontsize=18,fontweight='bold')\nautocorrelation_plot(b_date_mean['cough'],ax=ax[0],lw=3)\nplot_acf(b_date_mean['cough'],lags=20, ax=ax[1],title='Cough Autocorrelation',color='tab:red')\nplot_pacf(b_date_mean['cough'],lags=20, ax=ax[2],title='Cough Partial Autocorrelation',color='tab:green')\n\nf.subplots_adjust(hspace=0.4)\n\nplt.show()","2f7ea748":"fig = make_subplots(rows=4, cols=1, subplot_titles=('Daily Average', 'Monthly Average','Seasonal Average','Yearly Average'))\nb_date_mean = mean_date\n\nlbl = ['Cough']\n\n\nDAY = c_data.groupby(by='day').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=DAY.day, y=DAY.cough,name='Average Cough Complient Prcentage Over Days '),\nrow=1, col=1)\n\nMONTH = c_data.groupby(by='month').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=MONTH.month, y=MONTH.cough,name='Average Cough Complient Prcentage Over Months '),\nrow=2, col=1)\n\nYEAR = c_data.groupby(by='year').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=YEAR.year, y=YEAR.cough,name='Average Cough Complient Prcentage Over Years '),\nrow=4, col=1)\n\nSEASON = c_data.groupby(by='season').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=SEASON.season, y=SEASON.cough,name='Average Cough Complient Prcentage Over Season '),\nrow=3, col=1)\n\nfig.update_layout(height=600, width=900, title_text=\"Different Resolutions Of Average Cough Complient Precentage\")\nfig.show()","16b57f0b":"FET = c_data.fever\nF_FET = 'Fever'\nL_FET = 'fever'\nFET_ING = 'Fever'\n\nfig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Corona Test Result | Had {}<b>'.format(F_FET),'<b>Corona Test Result | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=FET.value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==1').corona_result.value_counts().values,\n        pull=[0,0.05,0.5],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==0').corona_result.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total {} Complaints<b>\".format(F_FET),\n)\n\nfig.show()","01bb7927":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Gender Distribution | Had {}<b>'.format(F_FET),'<b>Gender Distribution | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.fever.value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==1').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==0').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3, marker_colors=['pink','lightblue']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","09002537":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Test Indication | Had {F_FET} <b>',f'<b>Test Indication | Didnt Have {F_FET}<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.cough.value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==1').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==1').test_indication.value_counts().values,\n        pull=[0,0.09,0.2],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==0').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==0').test_indication.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3, marker_colors=['salmon','goldenrod']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","c94a328a":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Number Of Symptoms Beside {FET_ING} Distribution<b>'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"histogram\",\"rowspan\": 2}] ,\n           [None                               ,None]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data.cough.value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Histogram(\n        x=c_data.query(f'{L_FET}==1')['number_of_symptomps']-1        \n    ),\n    row=1, col=2\n)\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig['layout']['xaxis']['title']='Number Of Other Symptoms'\nfig['layout']['yaxis']['title']='Number Of Samples'\n\nfig.show()","1161d336":"f_data=mean_date.copy()\npartitions = []\npartitions.append(f_data.loc[44:np.round(len(f_data)\/3,0)-1,:])\npartitions.append(f_data.loc[np.round(len(f_data)\/3,0):2*int(len(f_data)\/3)-1,:])\npartitions.append(f_data.loc[2*np.round(len(f_data)\/3,0):3*int(len(f_data)\/3)-1,:])\n\n\n\ncough_part_means =[]\ncough_part_std   =[]\n\nfor part in partitions:\n    cough_part_means.append(part[L_FET].mean())\n    cough_part_std.append(part[L_FET].std())\n\nres_df = pd.DataFrame({f'{F_FET} Mean':cough_part_means,f'{F_FET} SD':cough_part_std},\n                     index = [f'Partition_{i}' for i in range(1,4)])\n\n\n\nres_df = res_df.T\nres_df = res_df.reset_index()\n\n\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Statistic<b>', '<b>Partition_1<b>','<b>Partition_2<b>','<b>Partition_3<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>{F_FET} Mean<b>', f'<b>{F_FET} SD<b>'],np.round(res_df.iloc[:,1],2),np.round(res_df.iloc[:,2],2),np.round(res_df.iloc[:,3],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Different Partitions Mean And Standard Deviation')\nfig.show()\n","549b5d6c":"fig = make_subplots(rows=3, cols=1)\n\nfor idx,prt in enumerate(partitions):\n    fig.add_trace(\n    go.Scatter(x=prt['test_date'], y=prt[L_FET],name=f'{F_FET} Partition {idx+1}'),\n    row=idx+1, col=1)\n\n\nfig.update_layout(height=600, width=900, title_text=f\"Distibution Of Daily Average Precennt Of {F_FET} Complaints For Each Partition\")\nfig.show()","2e86e342":"result = adfuller(mean_date[L_FET].values)\nadf_stat = result[0]\np_val = np.round(result[1],2)\nprint('Augmented Dickey-Fuller (ADF) test P-Value: [{}]'.format(p_val))\n","774881b6":"fig = make_subplots(rows=4, cols=1, subplot_titles=(f'Observed {F_FET}', f'Trend {F_FET}',f'Seasonal {F_FET}',f'Residual {F_FET}'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\nfor idx,column in enumerate([L_FET]):\n    res = seasonal_decompose(b_date_mean[column], period=60, model='additive', extrapolate_trend='freq')\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.observed)), y=res.observed,name='{} Observed'.format(lbl[idx])),\n    row=1, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.trend)), y=res.trend,name='{} Trend'.format(lbl[idx])),\n    row=2, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.seasonal)), y=res.seasonal,name='{} Seasonal'.format(lbl[idx])),\n    row=3, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.resid)), y=res.resid,name='{} Residual'.format(lbl[idx])),\n    row=4, col=idx+1)\n            \nfig.update_layout(height=600, width=900, title_text=f\"Decomposition Of Daily Average {F_FET} Complients Precentage into Trend,Level,Seasonality and Residuals\")\nfig.show()","9941012e":"f, ax = plt.subplots(nrows=3, ncols=1, figsize=(16, 10))\n\nax[0].set_title(f'{F_FET} Autocorrelation Analysis ',fontsize=18,fontweight='bold')\nautocorrelation_plot(b_date_mean[L_FET],ax=ax[0],lw=3)\nplot_acf(b_date_mean[L_FET],lags=20, ax=ax[1],title=f'{F_FET} Autocorrelation',color='tab:red')\nplot_pacf(b_date_mean[L_FET],lags=20, ax=ax[2],title=f'{F_FET} Partial Autocorrelation',color='tab:green')\n\nf.subplots_adjust(hspace=0.4)\n\nplt.show()","b8ecb24b":"fig = make_subplots(rows=4, cols=1, subplot_titles=('Daily Average', 'Monthly Average','Seasonal Average','Yearly Average'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\n\nDAY = c_data.groupby(by='day').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=DAY.day, y=DAY[L_FET],name=f'Average {F_FET} Complient Prcentage Over Days '),\nrow=1, col=1)\n\nMONTH = c_data.groupby(by='month').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=MONTH.month, y=MONTH[L_FET],name=f'Average {F_FET} Complient Prcentage Over Months '),\nrow=2, col=1)\n\nYEAR = c_data.groupby(by='year').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=YEAR.year, y=YEAR[L_FET],name=f'Average {F_FET} Complient Prcentage Over Years '),\nrow=4, col=1)\n\nSEASON = c_data.groupby(by='season').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=SEASON.season, y=SEASON[L_FET],name=f'Average {F_FET} Complient Prcentage Over Season '),\nrow=3, col=1)\n\nfig.update_layout(height=600, width=900, title_text=f\"Different Resolutions Of Average {F_FET} Complient Precentage\")\nfig.show()","5bfa259d":"FET = c_data.sore_throat\nF_FET = 'Sore Throat'\nL_FET = 'sore_throat'\nFET_ING = 'Sore Throat'\n\nfig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Corona Test Result | Had {}<b>'.format(F_FET),'<b>Corona Test Result | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=FET.value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==1').corona_result.value_counts().values,\n        pull=[0,0.05,0.5],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==0').corona_result.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total {} Complaints<b>\".format(F_FET),\n)\n\nfig.show()","a87611d7":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Gender Distribution | Had {}<b>'.format(F_FET),'<b>Gender Distribution | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==1').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==0').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3, marker_colors=['pink','lightblue']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","4464fd53":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Test Indication | Had {F_FET} <b>',f'<b>Test Indication | Didnt Have {F_FET}<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==1').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==1').test_indication.value_counts().values,\n        pull=[0,0.09,0.2],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==0').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==0').test_indication.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3, marker_colors=['salmon','goldenrod']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","55e4294c":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Number Of Symptoms Beside {FET_ING} Distribution<b>'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"histogram\",\"rowspan\": 2}] ,\n           [None                               ,None]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Histogram(\n        x=c_data.query(f'{L_FET}==1')['number_of_symptomps']-1        \n    ),\n    row=1, col=2\n)\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig['layout']['xaxis']['title']='Number Of Other Symptoms'\nfig['layout']['yaxis']['title']='Number Of Samples'\n\nfig.show()","c9891026":"f_data=mean_date.copy()\npartitions = []\npartitions.append(f_data.loc[44:np.round(len(f_data)\/3,0)-1,:])\npartitions.append(f_data.loc[np.round(len(f_data)\/3,0):2*int(len(f_data)\/3)-1,:])\npartitions.append(f_data.loc[2*np.round(len(f_data)\/3,0):3*int(len(f_data)\/3)-1,:])\n\n\n\ncough_part_means =[]\ncough_part_std   =[]\n\nfor part in partitions:\n    cough_part_means.append(part[L_FET].mean())\n    cough_part_std.append(part[L_FET].std())\n\nres_df = pd.DataFrame({f'{F_FET} Mean':cough_part_means,f'{F_FET} SD':cough_part_std},\n                     index = [f'Partition_{i}' for i in range(1,4)])\n\n\n\nres_df = res_df.T\nres_df = res_df.reset_index()\n\n\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Statistic<b>', '<b>Partition_1<b>','<b>Partition_2<b>','<b>Partition_3<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>{F_FET} Mean<b>', f'<b>{F_FET} SD<b>'],np.round(res_df.iloc[:,1],2),np.round(res_df.iloc[:,2],2),np.round(res_df.iloc[:,3],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Different Partitions Mean And Standard Deviation')\nfig.show()\n","a5d8ebf7":"fig = make_subplots(rows=3, cols=1)\n\nfor idx,prt in enumerate(partitions):\n    fig.add_trace(\n    go.Scatter(x=prt['test_date'], y=prt[L_FET],name=f'{F_FET} Partition {idx+1}'),\n    row=idx+1, col=1)\n\n\nfig.update_layout(height=600, width=900, title_text=f\"Distibution Of Daily Average Precennt Of {F_FET} Complaints For Each Partition\")\nfig.show()","3143bde7":"result = adfuller(mean_date[L_FET].values)\nadf_stat = result[0]\np_val = np.round(result[1],2)\nprint('Augmented Dickey-Fuller (ADF) test P-Value: [{}]'.format(p_val))\n","3bcc8203":"fig = make_subplots(rows=4, cols=1, subplot_titles=(f'Observed {F_FET}', f'Trend {F_FET}',f'Seasonal {F_FET}',f'Residual {F_FET}'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\nfor idx,column in enumerate([L_FET]):\n    res = seasonal_decompose(b_date_mean[column], period=60, model='additive', extrapolate_trend='freq')\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.observed)), y=res.observed,name='{} Observed'.format(lbl[idx])),\n    row=1, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.trend)), y=res.trend,name='{} Trend'.format(lbl[idx])),\n    row=2, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.seasonal)), y=res.seasonal,name='{} Seasonal'.format(lbl[idx])),\n    row=3, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.resid)), y=res.resid,name='{} Residual'.format(lbl[idx])),\n    row=4, col=idx+1)\n            \nfig.update_layout(height=600, width=900, title_text=f\"Decomposition Of Daily Average {F_FET} Complients Precentage into Trend,Level,Seasonality and Residuals\")\nfig.show()","f8966810":"f, ax = plt.subplots(nrows=3, ncols=1, figsize=(16, 10))\n\nax[0].set_title(f'{F_FET} Autocorrelation Analysis ',fontsize=18,fontweight='bold')\nautocorrelation_plot(b_date_mean[L_FET],ax=ax[0],lw=3)\nplot_acf(b_date_mean[L_FET],lags=20, ax=ax[1],title=f'{F_FET} Autocorrelation',color='tab:red')\nplot_pacf(b_date_mean[L_FET],lags=20, ax=ax[2],title=f'{F_FET} Partial Autocorrelation',color='tab:green')\n\nf.subplots_adjust(hspace=0.4)\n\nplt.show()","0bddffee":"fig = make_subplots(rows=4, cols=1, subplot_titles=('Daily Average', 'Monthly Average','Seasonal Average','Yearly Average'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\n\nDAY = c_data.groupby(by='day').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=DAY.day, y=DAY[L_FET],name=f'Average {F_FET} Complient Prcentage Over Days '),\nrow=1, col=1)\n\nMONTH = c_data.groupby(by='month').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=MONTH.month, y=MONTH[L_FET],name=f'Average {F_FET} Complient Prcentage Over Months '),\nrow=2, col=1)\n\nYEAR = c_data.groupby(by='year').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=YEAR.year, y=YEAR[L_FET],name=f'Average {F_FET} Complient Prcentage Over Years '),\nrow=4, col=1)\n\nSEASON = c_data.groupby(by='season').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=SEASON.season, y=SEASON[L_FET],name=f'Average {F_FET} Complient Prcentage Over Season '),\nrow=3, col=1)\n\nfig.update_layout(height=600, width=900, title_text=f\"Different Resolutions Of Average {F_FET} Complient Precentage\")\nfig.show()","dd786cf9":"FET = c_data.shortness_of_breath\nF_FET = 'Shortness Of Breath'\nL_FET = 'shortness_of_breath'\nFET_ING = 'Shortness Of Breath'\n\nfig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Corona Test Result | Had {}<b>'.format(F_FET),'<b>Corona Test Result | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=FET.value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==1').corona_result.value_counts().values,\n        pull=[0,0.05,0.5],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==0').corona_result.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total {} Complaints<b>\".format(F_FET),\n)\n\nfig.show()","3ecc50d7":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Gender Distribution | Had {}<b>'.format(F_FET),'<b>Gender Distribution | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==1').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==0').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3, marker_colors=['pink','lightblue']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","1e8f3853":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Test Indication | Had {F_FET} <b>',f'<b>Test Indication | Didnt Have {F_FET}<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==1').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==1').test_indication.value_counts().values,\n        pull=[0,0.09,0.2],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==0').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==0').test_indication.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3, marker_colors=['salmon','goldenrod']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","a07d9076":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Number Of Symptoms Beside {FET_ING} Distribution<b>'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"histogram\",\"rowspan\": 2}] ,\n           [None                               ,None]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Histogram(\n        x=c_data.query(f'{L_FET}==1')['number_of_symptomps']-1        \n    ),\n    row=1, col=2\n)\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig['layout']['xaxis']['title']='Number Of Other Symptoms'\nfig['layout']['yaxis']['title']='Number Of Samples'\n\nfig.show()","d4c9fbc6":"f_data=mean_date.copy()\npartitions = []\npartitions.append(f_data.loc[44:np.round(len(f_data)\/3,0)-1,:])\npartitions.append(f_data.loc[np.round(len(f_data)\/3,0):2*int(len(f_data)\/3)-1,:])\npartitions.append(f_data.loc[2*np.round(len(f_data)\/3,0):3*int(len(f_data)\/3)-1,:])\n\n\n\ncough_part_means =[]\ncough_part_std   =[]\n\nfor part in partitions:\n    cough_part_means.append(part[L_FET].mean())\n    cough_part_std.append(part[L_FET].std())\n\nres_df = pd.DataFrame({f'{F_FET} Mean':cough_part_means,f'{F_FET} SD':cough_part_std},\n                     index = [f'Partition_{i}' for i in range(1,4)])\n\n\n\nres_df = res_df.T\nres_df = res_df.reset_index()\n\n\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Statistic<b>', '<b>Partition_1<b>','<b>Partition_2<b>','<b>Partition_3<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>{F_FET} Mean<b>', f'<b>{F_FET} SD<b>'],np.round(res_df.iloc[:,1],2),np.round(res_df.iloc[:,2],2),np.round(res_df.iloc[:,3],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Different Partitions Mean And Standard Deviation')\nfig.show()\n","693ccdce":"fig = make_subplots(rows=3, cols=1)\n\nfor idx,prt in enumerate(partitions):\n    fig.add_trace(\n    go.Scatter(x=prt['test_date'], y=prt[L_FET],name=f'{F_FET} Partition {idx+1}'),\n    row=idx+1, col=1)\n\n\nfig.update_layout(height=600, width=900, title_text=f\"Distibution Of Daily Average Precennt Of {F_FET} Complaints For Each Partition\")\nfig.show()","9274c45a":"result = adfuller(mean_date[L_FET].values)\nadf_stat = result[0]\np_val = np.round(result[1],2)\nprint('Augmented Dickey-Fuller (ADF) test P-Value: [{}]'.format(p_val))\n","d57846c6":"fig = make_subplots(rows=4, cols=1, subplot_titles=(f'Observed {F_FET}', f'Trend {F_FET}',f'Seasonal {F_FET}',f'Residual {F_FET}'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\nfor idx,column in enumerate([L_FET]):\n    res = seasonal_decompose(b_date_mean[column], period=60, model='additive', extrapolate_trend='freq')\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.observed)), y=res.observed,name='{} Observed'.format(lbl[idx])),\n    row=1, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.trend)), y=res.trend,name='{} Trend'.format(lbl[idx])),\n    row=2, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.seasonal)), y=res.seasonal,name='{} Seasonal'.format(lbl[idx])),\n    row=3, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.resid)), y=res.resid,name='{} Residual'.format(lbl[idx])),\n    row=4, col=idx+1)\n            \nfig.update_layout(height=600, width=900, title_text=f\"Decomposition Of Daily Average {F_FET} Complients Precentage into Trend,Level,Seasonality and Residuals\")\nfig.show()","5f9af048":"f, ax = plt.subplots(nrows=3, ncols=1, figsize=(16, 10))\n\nax[0].set_title(f'{F_FET} Autocorrelation Analysis ',fontsize=18,fontweight='bold')\nautocorrelation_plot(b_date_mean[L_FET],ax=ax[0],lw=3)\nplot_acf(b_date_mean[L_FET],lags=20, ax=ax[1],title=f'{F_FET} Autocorrelation',color='tab:red')\nplot_pacf(b_date_mean[L_FET],lags=20, ax=ax[2],title=f'{F_FET} Partial Autocorrelation',color='tab:green')\n\nf.subplots_adjust(hspace=0.4)\n\nplt.show()","85191c82":"fig = make_subplots(rows=4, cols=1, subplot_titles=('Daily Average', 'Monthly Average','Seasonal Average','Yearly Average'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\n\nDAY = c_data.groupby(by='day').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=DAY.day, y=DAY[L_FET],name=f'Average {F_FET} Complient Prcentage Over Days '),\nrow=1, col=1)\n\nMONTH = c_data.groupby(by='month').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=MONTH.month, y=MONTH[L_FET],name=f'Average {F_FET} Complient Prcentage Over Months '),\nrow=2, col=1)\n\nYEAR = c_data.groupby(by='year').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=YEAR.year, y=YEAR[L_FET],name=f'Average {F_FET} Complient Prcentage Over Years '),\nrow=4, col=1)\n\nSEASON = c_data.groupby(by='season').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=SEASON.season, y=SEASON[L_FET],name=f'Average {F_FET} Complient Prcentage Over Season '),\nrow=3, col=1)\n\nfig.update_layout(height=600, width=900, title_text=f\"Different Resolutions Of Average {F_FET} Complient Precentage\")\nfig.show()","7ba65f78":"FET = c_data.head_ache\nF_FET = 'Head Ache'\nL_FET = 'head_ache'\nFET_ING = 'Head Ache'\n\nfig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Corona Test Result | Had {}<b>'.format(F_FET),'<b>Corona Test Result | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=FET.value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==1').corona_result.value_counts().values,\n        pull=[0,0.05,0.5],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Negative<b>','<b>Positive<b>','<b>Other<b>'],\n        values=c_data.query(f'{L_FET}==0').corona_result.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=\"<b>Distribution Of Total {} Complaints<b>\".format(F_FET),\n)\n\nfig.show()","d139fad2":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('','<b>Gender Distribution | Had {}<b>'.format(F_FET),'<b>Gender Distribution | Didnt Have {}<b>'.format(F_FET),'Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=['<b>Didnt Have {}<b>'.format(F_FET),'<b>Had {}<b>'.format(F_FET)],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==1').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=['<b>Female<b>','<b>Male<b>'],\n        values=c_data.query(f'{L_FET}==0').gender.value_counts().values,\n        pull=[0,0.09],\n        hole=0.3, marker_colors=['pink','lightblue']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","704adc1b":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Test Indication | Had {F_FET} <b>',f'<b>Test Indication | Didnt Have {F_FET}<b>','Residuals'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"pie\"}] ,\n           [None                               ,{\"type\": \"pie\"}]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==1').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==1').test_indication.value_counts().values,\n        pull=[0,0.09,0.2],\n        hole=0.3\n        \n    ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Pie(\n        labels=c_data.query(f'{L_FET}==0').test_indication.value_counts().index,\n        values=c_data.query(f'{L_FET}==0').test_indication.value_counts().values,\n        pull=[0,0.2,0.5],\n        hole=0.3, marker_colors=['salmon','goldenrod']\n    ),\n    row=2, col=2\n)\n\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig.show()","b1969116":"fig = make_subplots(\n    rows=2, cols=2,subplot_titles=('',f'<b>Number Of Symptoms Beside {FET_ING} Distribution<b>'),\n    vertical_spacing=0.09,\n    specs=[[{\"type\": \"pie\",\"rowspan\": 2}       ,{\"type\": \"histogram\",\"rowspan\": 2}] ,\n           [None                               ,None]            ,                                      \n          ]\n)\n\nfig.add_trace(\n    go.Pie(values=c_data[L_FET].value_counts().values,labels=[f'<b>Didnt Have {F_FET}<b>',f'<b>Had {F_FET}<b>'],hole=0.3,pull=[0,0.3]),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Histogram(\n        x=c_data.query(f'{L_FET}==1')['number_of_symptomps']-1        \n    ),\n    row=1, col=2\n)\n\n\nfig.update_layout(\n    height=800,\n    showlegend=True,\n    title_text=f\"<b>Distribution Of Total {F_FET} Complaints<b>\",\n)\n\nfig['layout']['xaxis']['title']='Number Of Other Symptoms'\nfig['layout']['yaxis']['title']='Number Of Samples'\n\nfig.show()","203cfbb9":"f_data=mean_date.copy()\npartitions = []\npartitions.append(f_data.loc[44:np.round(len(f_data)\/3,0)-1,:])\npartitions.append(f_data.loc[np.round(len(f_data)\/3,0):2*int(len(f_data)\/3)-1,:])\npartitions.append(f_data.loc[2*np.round(len(f_data)\/3,0):3*int(len(f_data)\/3)-1,:])\n\n\n\ncough_part_means =[]\ncough_part_std   =[]\n\nfor part in partitions:\n    cough_part_means.append(part[L_FET].mean())\n    cough_part_std.append(part[L_FET].std())\n\nres_df = pd.DataFrame({f'{F_FET} Mean':cough_part_means,f'{F_FET} SD':cough_part_std},\n                     index = [f'Partition_{i}' for i in range(1,4)])\n\n\n\nres_df = res_df.T\nres_df = res_df.reset_index()\n\n\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Statistic<b>', '<b>Partition_1<b>','<b>Partition_2<b>','<b>Partition_3<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>{F_FET} Mean<b>', f'<b>{F_FET} SD<b>'],np.round(res_df.iloc[:,1],2),np.round(res_df.iloc[:,2],2),np.round(res_df.iloc[:,3],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Different Partitions Mean And Standard Deviation')\nfig.show()\n","1e7c1560":"fig = make_subplots(rows=3, cols=1)\n\nfor idx,prt in enumerate(partitions):\n    fig.add_trace(\n    go.Scatter(x=prt['test_date'], y=prt[L_FET],name=f'{F_FET} Partition {idx+1}'),\n    row=idx+1, col=1)\n\n\nfig.update_layout(height=600, width=900, title_text=f\"Distibution Of Daily Average Precennt Of {F_FET} Complaints For Each Partition\")\nfig.show()","90fb4ee5":"result = adfuller(mean_date[L_FET].values)\nadf_stat = result[0]\np_val = np.round(result[1],2)\nprint('Augmented Dickey-Fuller (ADF) test P-Value: [{}]'.format(p_val))\n","07d2f8a4":"fig = make_subplots(rows=4, cols=1, subplot_titles=(f'Observed {F_FET}', f'Trend {F_FET}',f'Seasonal {F_FET}',f'Residual {F_FET}'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\nfor idx,column in enumerate([L_FET]):\n    res = seasonal_decompose(b_date_mean[column], period=60, model='additive', extrapolate_trend='freq')\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.observed)), y=res.observed,name='{} Observed'.format(lbl[idx])),\n    row=1, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.trend)), y=res.trend,name='{} Trend'.format(lbl[idx])),\n    row=2, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.seasonal)), y=res.seasonal,name='{} Seasonal'.format(lbl[idx])),\n    row=3, col=idx+1)\n    \n    fig.add_trace(\n    go.Scatter(x=np.arange(0,len(res.resid)), y=res.resid,name='{} Residual'.format(lbl[idx])),\n    row=4, col=idx+1)\n            \nfig.update_layout(height=600, width=900, title_text=f\"Decomposition Of Daily Average {F_FET} Complients Precentage into Trend,Level,Seasonality and Residuals\")\nfig.show()","260ee21d":"f, ax = plt.subplots(nrows=3, ncols=1, figsize=(16, 10))\n\nax[0].set_title(f'{F_FET} Autocorrelation Analysis ',fontsize=18,fontweight='bold')\nautocorrelation_plot(b_date_mean[L_FET],ax=ax[0],lw=3)\nplot_acf(b_date_mean[L_FET],lags=20, ax=ax[1],title=f'{F_FET} Autocorrelation',color='tab:red')\nplot_pacf(b_date_mean[L_FET],lags=20, ax=ax[2],title=f'{F_FET} Partial Autocorrelation',color='tab:green')\n\nf.subplots_adjust(hspace=0.4)\n\nplt.show()","fd4a587d":"fig = make_subplots(rows=4, cols=1, subplot_titles=('Daily Average', 'Monthly Average','Seasonal Average','Yearly Average'))\nb_date_mean = mean_date\n\nlbl = [F_FET]\n\n\nDAY = c_data.groupby(by='day').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=DAY.day, y=DAY[L_FET],name=f'Average {F_FET} Complient Prcentage Over Days '),\nrow=1, col=1)\n\nMONTH = c_data.groupby(by='month').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=MONTH.month, y=MONTH[L_FET],name=f'Average {F_FET} Complient Prcentage Over Months '),\nrow=2, col=1)\n\nYEAR = c_data.groupby(by='year').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=YEAR.year, y=YEAR[L_FET],name=f'Average {F_FET} Complient Prcentage Over Years '),\nrow=4, col=1)\n\nSEASON = c_data.groupby(by='season').mean().reset_index()\nfig.add_trace(\ngo.Scatter(x=SEASON.season, y=SEASON[L_FET],name=f'Average {F_FET} Complient Prcentage Over Season '),\nrow=3, col=1)\n\nfig.update_layout(height=600, width=900, title_text=f\"Different Resolutions Of Average {F_FET} Complient Precentage\")\nfig.show()","1c26e818":"not_na = c_data[c_data.age_60_and_above.notna()].copy()\nnot_na = not_na[not_na.gender.notna()].copy()\nnot_na = not_na[not_na.corona_result != -1].copy()\nnot_na.age_60_and_above = not_na.age_60_and_above.replace({'No':0,'Yes':1})\n#Train Test Splitting\nX = not_na[['cough','fever','sore_throat','shortness_of_breath','head_ache','gender']]\nY = not_na.corona_result\ntrain_x,test_x,train_y,test_y = train_test_split(X,Y,random_state=42)","c078525a":"DT_Classifier = DecisionTreeClassifier()\nDT_Classifier.fit(train_x,train_y)\nDT_Prediction = DT_Classifier.predict(test_x)\nDT_Confusion_Matrix = confusion_matrix(DT_Prediction,test_y)\nDT_DF = pd.DataFrame(classification_report(DT_Prediction,test_y,output_dict=True)).T","6e80bfe1":"GN_Classifier = GaussianNB()\nGN_Classifier.fit(train_x,train_y)\nGN_Prediction = GN_Classifier.predict(test_x)\nGN_Confusion_Matrix = confusion_matrix(GN_Prediction,test_y)\nGN_DF = pd.DataFrame(classification_report(GN_Prediction,test_y,output_dict=True)).T","896aa246":"SGD_Classifier = SGDClassifier()\nSGD_Classifier.fit(train_x,train_y)\nSGD_Prediction = SGD_Classifier.predict(test_x)\nSGD_Confusion_Matrix = confusion_matrix(SGD_Prediction,test_y)\nSGD_DF  = pd.DataFrame(classification_report(SGD_Prediction,test_y,output_dict=True)).T","ab4a77ec":"rbf_feature = RBFSampler(gamma=1, random_state=1)\nX_features = rbf_feature.fit_transform(X)\ntrain_x,test_x,train_y,test_y = train_test_split(X_features,Y,random_state=42)\n\nSGD_Classifier_W_RBFK = SGDClassifier(max_iter=10)\nSGD_Classifier_W_RBFK.fit(train_x, train_y)\n\nSGD_W_RBFK_Prediction = SGD_Classifier_W_RBFK.predict(test_x)\nSGD_W_RBFK_Confusion_Matrix = confusion_matrix(SGD_W_RBFK_Prediction,test_y)\nSGD_W_RBFK_DF = pd.DataFrame(classification_report(SGD_W_RBFK_Prediction,test_y,output_dict=True)).T","d04f4765":"z=DT_Confusion_Matrix\nfig = ff.create_annotated_heatmap(z, x=['<b>Negative<b>','<b>Positive<b>'], y=['<b>Predicted Negative<b>','<b>Predicted Positive<b>'], colorscale='Fall',xgap=3,ygap=3)\nfig['data'][0]['showscale'] = True\nfig.update_layout(title='<b>Decision Tree Model On Test Data Confusion Matrix<b>')\nfig['layout']['xaxis']['side'] = 'bottom'\n\nfig.show()","9a093d73":"fig = go.Figure(data=[go.Table(header=dict(values=['<b>Class<b>','<b>Precision<b>', '<b>Recall<b>','<b>F1-Score<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>Negative<b>', f'<b>Positive<b>'],np.round(DT_DF.loc[[\"0\",'1'],'precision'],2),np.round(DT_DF.loc[[\"0\",'1'],'recall'],2),np.round(DT_DF.loc[[\"0\",'1'],'f1-score'],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Class Evaluation Table')\nfig.show()","08138b21":"z=GN_Confusion_Matrix\nfig = ff.create_annotated_heatmap(z, x=['<b>Negative<b>','<b>Positive<b>'], y=['<b>Predicted Negative<b>','<b>Predicted Positive<b>'], colorscale='Fall',xgap=3,ygap=3)\nfig['data'][0]['showscale'] = True\nfig.update_layout(title='<b>Naive Bayes Model On Test Data Confusion Matrix<b>')\nfig['layout']['xaxis']['side'] = 'bottom'\n\nfig.show()","1eba5a34":"DT_DF = GN_DF\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Class<b>','<b>Precision<b>', '<b>Recall<b>','<b>F1-Score<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>Negative<b>', f'<b>Positive<b>'],np.round(DT_DF.loc[[\"0\",'1'],'precision'],2),np.round(DT_DF.loc[[\"0\",'1'],'recall'],2),np.round(DT_DF.loc[[\"0\",'1'],'f1-score'],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Class Evaluation Table')\nfig.show()","d7435935":"z=SGD_Confusion_Matrix\nfig = ff.create_annotated_heatmap(z, x=['<b>Negative<b>','<b>Positive<b>'], y=['<b>Predicted Negative<b>','<b>Predicted Positive<b>'], colorscale='Fall',xgap=3,ygap=3)\nfig['data'][0]['showscale'] = True\nfig.update_layout(title='<b>Regularized Linear Models With Stochastic Gradient Descent Model On Test Data Confusion Matrix<b>')\nfig['layout']['xaxis']['side'] = 'bottom'\n\nfig.show()","e5a1a8a4":"DT_DF = SGD_DF\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Class<b>','<b>Precision<b>', '<b>Recall<b>','<b>F1-Score<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>Negative<b>', f'<b>Positive<b>'],np.round(DT_DF.loc[[\"0\",'1'],'precision'],2),np.round(DT_DF.loc[[\"0\",'1'],'recall'],2),np.round(DT_DF.loc[[\"0\",'1'],'f1-score'],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Class Evaluation Table')\nfig.show()","14278d2a":"z=SGD_W_RBFK_Confusion_Matrix\nfig = ff.create_annotated_heatmap(z, x=['<b>Negative<b>','<b>Positive<b>'], y=['<b>Predicted Negative<b>','<b>Predicted Positive<b>'], colorscale='Fall',xgap=3,ygap=3)\nfig['data'][0]['showscale'] = True\nfig.update_layout(title='<b>Regularized Linear Models With Stochastic Gradient Descent and RBF Kernel Approximation Model On Test Data Confusion Matrix<b>')\nfig['layout']['xaxis']['side'] = 'bottom'\n\nfig.show()","0b101172":"DT_DF = SGD_W_RBFK_DF\nfig = go.Figure(data=[go.Table(header=dict(values=['<b>Class<b>','<b>Precision<b>', '<b>Recall<b>','<b>F1-Score<b>'],\n                                           line_color='darkslategray',\n    fill_color='whitesmoke',\n    align=['center','center'],\n    font=dict(color='black', size=18),\n    height=40),\n                               \n    cells=dict(values=[\n                     [f'<b>Negative<b>', f'<b>Positive<b>'],np.round(DT_DF.loc[[\"0\",'1'],'precision'],2),np.round(DT_DF.loc[[\"0\",'1'],'recall'],2),np.round(DT_DF.loc[[\"0\",'1'],'f1-score'],2)\n                                   ],\n               \n               font=dict(color='black', size=18)\n                           ))\n                     ])\n\nfig.update_layout(title='Class Evaluation Table')\nfig.show()","3d356dbb":"<a id=\"4.1.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Regularized Linear Models With Stochastic Gradient Descent<\/h1>\n","cf79cf77":"<a id=\"3.3.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Sore Throat Decomposition<\/h1>\n","b0721558":"<a id=\"3.4.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Shortness Of Breath Stationarity<\/h1>\n","fd12c179":"<a id=\"3.2.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Fever Decomposition<\/h1>\n","c4f87738":"<a id=\"3.5\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Head Ache Analysis<\/h1>\n","63b57b05":"<a id=\"4.1.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Decision Tree<\/h1>\n","d6703658":"<a id=\"3.2.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Fever Stationarity<\/h1>\n","8d9b028d":"<a id=\"3.5.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Head Ache Decomposition<\/h1>\n","e3dcf0ca":"<a id=\"3.4\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Shortness Of Breath Analysis<\/h1>\n","2bbfc170":"<a id=\"4.2.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Decision Tree Evaluation<\/h1>\n","2b1b8584":"<a id=\"3.4.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Shortness Of Breath Decomposition<\/h1>\n","9aeaba4a":"<a id=\"3.1.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Cough Decomposition<\/h1>\n","4a755c78":"<a id=\"1.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Libraries and Utilities<\/h1>\n","acfccb97":"<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:350%;color:whitesmoke;text-align:center\">Table Of Content<\/h1>\n\n\n* [1. Introduction](#1)\n    * [1.1 Libraries And Utilities](#1.1)\n    * [1.2 Data Loading](#1.2)\n* [2. Preprocessing and Feature Engineering](#2)\n* [3. Exploratory Data Analysis](#3)\n    * [3.1 Cough Analysis](#3.1)\n        * [3.1.1 Cough Stationarity](#3.1.1)\n        * [3.1.2 Cough Decomposition](#3.1.2)\n        * [3.1.3 Cough Autocorrelation](#3.1.3)\n    * [3.2 Fever Analysis](#3.2)\n        * [3.2.1 Fever Stationarity](#3.2.1)\n        * [3.2.2 Fever Decomposition](#3.2.2)\n        * [3.2.3 Fever Autocorrelation](#3.2.3)\n    * [3.3 Sore Throat Analysis](#3.3)\n        * [3.3.1 Sore Throat Stationarity](#3.3.1)\n        * [3.3.2 Sore Throat Decomposition](#3.3.2)\n        * [3.3.3 Sore Throat Autocorrelation](#3.3.3)\n    * [3.4 Shortness Of Breathing Analysis](#3.4)\n        * [3.4.1 Shortness Of Breathing Stationarity](#3.4.1)\n        * [3.4.2 Shortness Of Breathing Decomposition](#3.4.2)\n        * [3.4.3 Shortness Of Breathing Autocorrelation](#3.4.3)\n    * [3.5 Head Ache Analysis](#3.5)\n        * [3.5.1 Head Ache Stationarity](#3.5.1)\n        * [3.5.2 Head Ache Decomposition](#3.5.2)\n        * [3.5.3 Head Ache Autocorrelation](#3.5.3)\n* [4. Model Selection And Evaluation](#4)\n    * [4.1 Model Selection](#4.1)\n        * [4.1.1 Decision Tree](#4.1.1)\n        * [4.1.2 Naive Bayes](#4.1.2)\n        * [4.1.3 Regularized Linear Models With Stochastic Gradient Descent](#4.1.3)\n        * [4.1.4 Regularized Linear Models With Stochastic Gradient Descent and RBF Kernel Approximation](#4.1.4)\n    * [4.2 Model Evaluation](#4.2)\n        * [4.2.1 Decision Tree Evaluation](#4.2.1)\n        * [4.2.2 Naive Bayes Evaluation](#4.2.2)\n        * [4.2.3 Regularized Linear Models With Stochastic Gradient Descent Evaluation](#4.2.3)\n        * [4.2.4 Regularized Linear Models With Stochastic Gradient Descent and RBF Kernel Approximation Evaluation](#4.2.4)","69c2e4f7":"<a id=\"4.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Model Selection<\/h1>\n","a752cdd9":"<a id=\"2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Preprocessing and Feature Engineering<\/h1>\n","b3824220":"<a id=\"3.5.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Head Ache Autocorrelation<\/h1>\n","c24dc5fa":"<a id=\"4.2.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Naive Bayes Evaluation<\/h1>\n","68e609f8":"<a id=\"3.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Fever Analysis<\/h1>\n","e902478d":"<a id=\"1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:320%;color:whitesmoke;text-align:center\">Introduction<\/h1>\n","cfe3b0db":"<a id=\"4\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:350%;color:whitesmoke;text-align:center\">Model Selection And Evaluation<\/h1>\n","6e485601":"<a id=\"3.5.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Head Ache Stationarity<\/h1>\n","9070b13b":"<a id=\"1.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Data Loading<\/h1>\n","0329aac0":"<a id=\"3.1.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Cough Autocorrelation<\/h1>\n","c1aacc04":"<a id=\"4.2.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Regularized Linear Models With Stochastic Gradient Descent Evaluation<\/h1>\n","7d69110c":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>In the following notebook is an analysis of COVID-19 related data provided by the Israeli government.<\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">The data revolves around the COVID-19 tests performed since the start of the epidemic. The purpose of this analysis is to uncover any time-based trends regarding the symptoms reported by the tested patients.<\/span><\/span><\/p>\n<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Can we better understand symptoms, which affect males more than females ? or symptoms that are more common during certain periods of the year.<\/span><\/span><\/p>\n<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 24px;'>The last part of this notebook will focus on testing east to interpret models to derive a function that takes in the symptoms as input and outputs a probability that someone is positive to the COVID-19.<\/span><\/p>","0efc11dd":"<a id=\"3.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Sore Throat Analysis<\/h1>\n","e4198d4b":"<a id=\"3.3.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Sore Throat Autocorrelation<\/h1>\n","08733ad5":"<a id=\"3.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Cough Analysis<\/h1>\n","23aaaa25":"<a id=\"3.1.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Cough Stationarity<\/h1>\n","1a479ab1":"<a id=\"4.1.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Regularized Linear Models With Stochastic Gradient Descent and RBF Kernel Approximation<\/h1>\n","dc4aacc3":"<a id=\"3.3.1\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Sore Throat Stationarity<\/h1>\n","06baa937":"<a id=\"4.1.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Naive Bayes<\/h1>\n","53d769ae":"<p style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 30px;'><strong>Explanation of variables in the table:<\/strong><\/span><\/p>\n<table style=\"width: 100%;\">\n    <tbody>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">test_date<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">The arrival date of the test at the lab in DD\/MM\/YY format<\/span><\/span><\/p>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">gender<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">test taker&apos;s sex: male\/female\/ NULL (unknown); appears from March 22nd 2020<\/span><\/span><\/p>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Corona_result<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Results of first Covid-19 test, by category:<\/span><\/span><\/p>\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">a. Positive &ndash; carrying Covid-19<\/span><\/span><\/p>\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">b. Negative &ndash; not carrying Covid-19<\/span><\/span><\/p>\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">c. Other &ndash; Not tested, in testing, inconclusive<\/span><\/span><\/p>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Age_60_and_above<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Indicator of the test taker&apos;s age - 60 or over (1) or below 60 (0). Appears from March 17th, 2020.<\/span><\/span><\/p>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">cough<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Did cough symptoms appear before testing? 1 &ndash; Yes, 0 &ndash; No, NULL &ndash; Unknown<\/span><\/span><\/p>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">fever<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <p style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Did fever appear before testing? 1 &ndash; Yes, 0 &ndash; No, NULL - Unknown<\/span><\/span><\/p>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Sore_throat<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Did sore throat symptoms appear before testing? 1 -Yes,0 -No<\/span><\/span><\/div>\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">NULL - Unkown&nbsp;<\/span><\/span><\/div>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Shortness_of_breath<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Did shortness of breath symptoms appear before testing 1-Yes, 0- No<\/span><\/span><\/div>\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">NULL - Unkown<\/span><\/span><\/div>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Head_ache<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Did Headache Symptoms appear before testing 1-Yes, 0-No<\/span><\/span><\/div>\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">NULL - Unkown&nbsp;<\/span><\/span><\/div>\n            <\/td>\n        <\/tr>\n        <tr>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">Test_indication<\/span><\/span><\/div>\n            <\/td>\n            <td style=\"width: 50.0000%;\">\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">What is the test indication? abroad - arrived from abroad, <\/span><\/span><\/div>\n                <div style=\"text-align: center;\"><span style=\"font-size: 19px;\"><span style=\"font-family: 'Times New Roman', Times, serif;\">contact_with_confirmed - contact with a confirmed case ,other-<\/span><\/span><\/div>\n                <div style=\"text-align: center;\"><span style='font-family: \"Times New Roman\", Times, serif; font-size: 19px;'>other indication or not specified.<\/span><\/div>\n            <\/td>\n        <\/tr>\n    <\/tbody>\n<\/table>","4176e62e":"<a id=\"4.2\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:250%;color:whitesmoke;text-align:center\">Model Evaluation<\/h1>\n","981b38dd":"<a id=\"3.2.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Fever Autocorrelation<\/h1>\n","a70bdefc":"<a id=\"3.4.3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:200%;color:whitesmoke;text-align:center\">Shortness Of Breath Autocorrelation<\/h1>\n","ecf55693":"<a id=\"3\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:320%;color:whitesmoke;text-align:center\">Exploratory Data Analysis<\/h1>\n","cc5a059b":"<a id=\"4.2.4\"><\/a>\n\n<h1 style=\"background-color:gray;font-family:newtimeroman;font-size:180%;color:whitesmoke;text-align:center\">Regularized Linear Models With Stochastic Gradient Descent and RBF Kernel Approximation Evaluation<\/h1>\n"}}