{"cell_type":{"44d24e93":"code","fed28cb5":"code","1abb9ec1":"code","26f2c452":"code","9029f7cd":"code","f49c1b40":"code","4ee49c4f":"code","6cb540b5":"code","692cccd5":"code","7fca5341":"code","9a1b8243":"code","8a56611c":"code","34f81fc9":"code","094055db":"code","4390866f":"code","585fce13":"code","e0df33e9":"code","32bed95f":"code","5b69d176":"code","3ee237fc":"code","ebfb9db9":"code","010fbf0f":"code","d25eaf37":"code","9afc209e":"markdown","a1b52702":"markdown","ff1006d6":"markdown","ff3896ae":"markdown","56c1e106":"markdown","422e808e":"markdown","68d87d86":"markdown","da8613bb":"markdown","afb28bdc":"markdown","33915191":"markdown","a44bc74c":"markdown","9d33d162":"markdown","c2f6a24b":"markdown","c72c5c7f":"markdown","5529c69b":"markdown","71f7d282":"markdown","f1f49ca6":"markdown","6da9417c":"markdown","56a73779":"markdown","38e1e955":"markdown","fcda7463":"markdown","67242d45":"markdown","cae85bbc":"markdown","8a22c7b2":"markdown","1475f992":"markdown","fe047066":"markdown","9f91a95f":"markdown","eacb94a3":"markdown","62367f99":"markdown"},"source":{"44d24e93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fed28cb5":"data=pd.read_csv(\"..\/input\/Pokemon.csv\", index_col=0)","1abb9ec1":"data.info()","26f2c452":"a = data.head(10)\nb = data.tail(10)\nresult=pd.concat([a,b])\ndisplay(result)","9029f7cd":"print(data['Type 1'].value_counts(dropna=False))","f49c1b40":"# try:\n#    print(\"Choose generation (1-6): \")\n#    selection=int(input())\n#except ValueError:\n#    selection=0\n\nselection=3\n\nif (selection>=1)and(selection<=6):\n    display(data[(data.Legendary)&(data.Generation==selection)])\nelse:\n    print(\"Invalid generation\")","4ee49c4f":"data[data.Attack==max(data.Attack)]","6cb540b5":"data[data.Defense==min(data.Defense)]","692cccd5":"data.corr()","7fca5341":"sns.lmplot(x=\"Attack\",y=\"Defense\", fit_reg=False, hue='Generation', data=data)\n# x=\"Attack\",y=\"Defense\" : We write x and y axis tags. \n# fit_reg=False : We remove the regression line.\n# hue='Generation': We color according to the generation.\n# data=data : We determine the dataset.\nplt.ylim(0, None) # We start 0 of y-axis value.\nplt.xlim(0, None) # We start 0 of x-axis value.\nplt.show() ","9a1b8243":"feature_data = data.drop(['Total', 'Generation', 'Legendary'], axis = 1) # We have removed 3 columns. Because it's not war values.\nsns.boxplot(data = feature_data, notch = True, linewidth = 0.5, width = 0.6)\n# notch: With this argument we show the limits of the media in the 95% confidence interval.\n# linewidth: With this argument, we determine the line thickness of each box.\n# width: With this argument we determine the width of each box.\nplt.show()","8a56611c":"f,ax=plt.subplots(figsize=(15,15)) #boyut ayarl\u0131yoruz\npkmn_type_colors = ['#78C850',  # Grass\n                    '#F08030',  # Fire\n                    '#6890F0',  # Water\n                    '#A8B820',  # Bug\n                    '#A8A878',  # Normal\n                    '#A040A0',  # Poison\n                    '#F8D030',  # Electric\n                    '#E0C068',  # Ground\n                    '#EE99AC',  # Fairy\n                    '#C03028',  # Fighting\n                    '#F85888',  # Psychic\n                    '#B8A038',  # Rock\n                    '#705898',  # Ghost\n                    '#98D8D8',  # Ice\n                    '#7038F8',  # Dragon\n                    '#390072',  # Dark\n                    '#6a776c',  # Steel\n                    '#5dc6c3',  # Flying\n                   ] # We have set a special color according to the type of Pokemon.\nsns.set_style(\"whitegrid\")\nsns.violinplot(x=\"Type 1\",y=\"Attack\",data=data,fmt='.1f',ax=ax, linewidth = 1.0, palette=pkmn_type_colors)\n\nplt.show()","34f81fc9":"sns.set_style(\"whitegrid\")\n#sns.swarmplot(x=\"Type 1\",y=\"Attack\",data=data, palette=pkmn_type_colors, size=3)\nsns.catplot(x=\"Type 1\",y=\"Attack\",data=data, kind=\"swarm\", palette=pkmn_type_colors, height=6, aspect=4)\nplt.show()","094055db":"sns.violinplot(x = 'Type 1', y = 'Attack', data = data, inner = None, palette=pkmn_type_colors)\nsns.swarmplot(x = 'Type 1', y = 'Attack', data = data, color = 'k', alpha = 0.7)\nplt.title('Attack by Type')\nplt.show()","4390866f":"melted_df = pd.melt(data, \n                    id_vars=[\"Name\", \"Type 1\", \"Type 2\"], # Variables to keep\n                    var_name=\"Stat\") # Name of melted variable\nmelted_df.head()","585fce13":"print( data.shape )\nprint( melted_df.shape )","e0df33e9":"plt.figure(figsize=(10,6))\n \nsns.swarmplot(x='Stat', y='value', data=melted_df, hue='Type 1', dodge=True, palette=pkmn_type_colors)\n \nplt.ylim(0, 260)\n \nplt.legend(bbox_to_anchor=(1, 1), loc=2)\nplt.show()","32bed95f":"corr = data.corr()\n\nsns.heatmap(corr)\n\nplt.show()","5b69d176":"sns.distplot(data.Attack)\nplt.show()","3ee237fc":"sns.countplot(x='Type 1', data=data, palette=pkmn_type_colors)\n \n# X eksenindeki etiketleri d\u00f6nd\u00fcr\nplt.xticks(rotation=-45)\nplt.show()","ebfb9db9":"g = sns.factorplot(x = 'Type 1', y = 'Attack', data = data, hue = 'Generation', col = 'Generation', kind = 'swarm')\ng.set_xticklabels(rotation = -45)\nplt.show()","010fbf0f":"sns.kdeplot(data.Attack, data.Defense)\nplt.show()","d25eaf37":"sns.jointplot(x = 'Attack', y = 'Defense', data = data)\nplt.show()","9afc209e":"Find the Pokemon(s) with the lowest defense value.","a1b52702":"**Column Chart**\n\nThe column graph is used to visualize categorical variables.","ff1006d6":"**Merge charts**","ff3896ae":"In the chart above, we can see the distribution of Attack values of all Pokemon by type.","56c1e106":"It is seen that the first generation is 1 and the last generation is 6. It can be said that the dataset contains **6 different generations.**","422e808e":"As you can see, we have melted all the variables except \"Name\", \"Type 1\", \"Type 2\" into a single column.","68d87d86":"We can make a swarm chart.","da8613bb":"Violin Graph\nShow the distribution of Pokemon attack values according to Type 1.","afb28bdc":"By looking at this diagram, it can be said that the attack values are mainly between 50 and 100.","33915191":"Let's print the dimensions of the DataFrames:","a44bc74c":"Swarm Graph\nShow the distribution of Pokemon attack values according to Type 1.","9d33d162":"**Pokemon quantities by type**","c2f6a24b":"Let's learn about the dataset.\nThis dataset have;\n* 1 Id Column (integer)\n* 3 String Columns (object)\n* 8 Feature Columns (integer)\n* 1 Feature Column (bool)\n\n**Total Entry quantity : 800**\n","c72c5c7f":"Find the Pokemon(s) with the highest attack value.","5529c69b":"Show the relationship between attack and defender with scatter graph.","71f7d282":"**Heat Map**\n\nHeat maps are used as a matrix to visualize data.","f1f49ca6":"**Melt Function**","6da9417c":"**Factor Chart**\n\nThe factor graph allows you to easily separate graphs of factor classes.","56a73779":"**Let's see the correlation between the data.**\n\n* If value -1, there is a full negative linear relationship. (inverse ratio)\n* If value +1, there is a full positive linear relationship. (direct ratio)\n* If value  0, there is no relationship between the two variables.\n----\n* 0.00 - no relationship\n* 0.01 - 0.29 low level relationship\n* 0.30 - 0.70 medium level relationship\n* 0.71 - 0.99 high level of relationship\n* 1.00 - Perfect relationship","38e1e955":"The melted_df table is 9 times the data table.","fcda7463":"Learn the top 10 entry and last 10 entry\nAlso let's combine this data and see it as a single table. (Pandas Concat)","67242d45":"**Histogram**\n\nThe histogram is used to visualize the distribution of numerical variables.","cae85bbc":"Read the dataset\n\nSet the first column is index.","8a22c7b2":"Pokemon Dataset Statistics\n\nLet's create and interpret various statistics through Pokemon data.\n\n","1475f992":"Show the battle features of Pokemon on the box graph.","fe047066":"**Learn legendary pokemons by generation.**","9f91a95f":"For example, the ratio between attack and defense is 0.438687. Medium level.","eacb94a3":"**Common Distribution Graph**\n\nThe common scatter plot combines the scatter plot and histogram to give us detailed information about the two-variable distributions.","62367f99":"**Density Chart**\n\nThe density graph shows the distribution between the two variables."}}