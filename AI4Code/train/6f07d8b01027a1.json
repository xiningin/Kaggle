{"cell_type":{"462e6826":"code","03644a86":"code","8d649fba":"code","bb84422a":"code","2756641d":"code","81c5b50b":"code","7acc5b3a":"code","5c3e329f":"code","b57982a3":"code","819310df":"code","632120d4":"code","44c0f3b6":"code","0a616a10":"code","436dffe7":"code","0c8e2272":"code","e382fd74":"code","2710b461":"code","7febcd09":"code","109a7f9e":"code","01500a0c":"code","8f7b60bc":"code","167271ab":"code","113ad33f":"code","36947c82":"code","c039184b":"code","8ff592c0":"code","edfc6e3c":"code","f8dd3d2a":"code","1b2117d6":"code","ca8e68cb":"code","75b34f37":"code","5e12bfb1":"code","10ccfb58":"code","da60ac18":"code","e7cea8f3":"code","76d551eb":"code","fd5876de":"code","d82d3615":"code","041d2cae":"code","defc2eb5":"code","3a5155ab":"code","ae0cc5a3":"code","5ec190ce":"code","de944a66":"code","15f3285c":"code","3393186a":"markdown","3ec35e58":"markdown","de1294a4":"markdown","790b32d2":"markdown","ae91834c":"markdown","42905f76":"markdown","dc789e00":"markdown","83ebe54f":"markdown","ff2a217d":"markdown","990adf75":"markdown","a81134cc":"markdown","ed0fec18":"markdown","1907ee28":"markdown","ae46e2a8":"markdown","794f279c":"markdown","ad82675d":"markdown","0100b903":"markdown","5ccd6ad9":"markdown","c9461d24":"markdown","b4000ff6":"markdown","341c3db9":"markdown","40526b58":"markdown","af9bc278":"markdown"},"source":{"462e6826":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03644a86":"import math\nfrom collections import Counter, defaultdict\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n\nstyle.use('seaborn-whitegrid')\nplt.rcParams['figure.figsize'] = (15, 8)\nplt.rcParams.update({'font.size': 22})\n\nfrom sklearn.linear_model import LogisticRegression","8d649fba":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","bb84422a":"print(train.isna().sum() \/ len(train) * 100, '\\n')\nprint('-'*36, '\\n')\nprint(train.isna().sum())","2756641d":"print(test.isna().sum() \/ len(test) * 100, '\\n')\nprint('-'*36, '\\n')\nprint(test.isna().sum())","81c5b50b":"print(train[train.Cabin.isna()].Survived.value_counts(), '\\n')\nprint(train[train.Cabin.notna()].Survived.value_counts())","7acc5b3a":"## for training\n\ntrain.Cabin.fillna(0, inplace = True)\ntrain['Cabin'] = train.Cabin.map(lambda x: 'U' if x == 0\n                                               else 'K')\n\n## for testing\n\ntest.Cabin.fillna(0, inplace = True)\ntest['Cabin'] = test.Cabin.map(lambda x: 'U' if x == 0\n                                             else 'K')","5c3e329f":"print(train[train.Cabin == 'U'].Survived.value_counts(), '\\n')\nprint('-'*36, '\\n')\nprint(train[train.Cabin == 'K'].Survived.value_counts())","b57982a3":"train['Surname'] = train.Name.map(lambda x: x.split(',')[0])","819310df":"train[train.Embarked.isna()]","632120d4":"to_map = {'Icard': 'C',\n          'Stone': 'S'}\n\ntrain.Embarked.fillna(train.Surname.map(to_map),\n                      inplace = True)","44c0f3b6":"x = train[train.Survived == 0].Surname.value_counts(ascending = False)[:5]\nx.plot(kind = 'bar', cmap = 'Spectral')","0a616a10":"x = train[train.Survived == 1].Surname.value_counts(ascending = False)[:5]\nx.plot(kind = 'bar', cmap = 'Spectral')","436dffe7":"train['Title'] = train.Name.map(lambda x: x.split(',')[1].split( )[0])\ntest['Title'] = test.Name.map(lambda x: x.split(',')[1].split( )[0])","0c8e2272":"print(train[train.Age.isna()].Title.value_counts(), '\\n')\nprint('-'*36)\nprint(test[test.Age.isna()].Title.value_counts(), '\\n')","e382fd74":"titles = ['Mr.', 'Miss.', 'Mrs.', 'Master.', 'Dr.', 'Ms.']\n\nfill_val_train = {}\nfill_val_test = {}\n\n## for training\n\nX = train.copy()\nX.Age.fillna(0.0, inplace = True)\n\nfor title in titles:\n    x = X[X.Title == title].Age.median()\n    fill_val_train[title] = x\n    \ntrain.Age.fillna(train.Title.map(fill_val_train), inplace = True)\n\n## for testing\n\nX = test.copy()\nX.Age.fillna(0.0, inplace = True)\n\nfor title in titles:\n    x = X[X.Title == title].Age.median()\n    fill_val_test[title] = x\n    \ntest.Age.fillna(test.Title.map(fill_val_test), inplace = True)","2710b461":"print('Null values in Age(Train): ', train.Age.isna().sum())\nprint('Null values in Age(Test): ', test.Age.isna().sum())","7febcd09":"test[test.Fare.isna()]","109a7f9e":"X = test.copy()\nX = X[X.Pclass == 3]\nX = X[X.Embarked == 'S']\nX = X[X.Age >= 18.0]\nfare = X.Fare.median()\n\nprint('Most probable fare paid by the old man: ', fare)\n\ntest.fillna(fare, inplace = True)","01500a0c":"print('Null values in Fare(Test): ', test.Fare.isna().sum())","8f7b60bc":"print(test.isna().sum() \/ len(test) * 100, '\\n')\nprint('-'*36, '\\n')\nprint(test.isna().sum())","167271ab":"train['Age'] = train['Age'].map(lambda x: round(x))\ntrain['Fare'] = train['Fare'].map(lambda x: round(x))\n\ntest['Age'] = test['Age'].map(lambda x: round(x))\ntest['Fare'] = test['Fare'].map(lambda x: round(x))","113ad33f":"train['Family'] = train['SibSp'] + train['Parch']\ntest['Family'] = test['SibSp'] + test['Parch']","36947c82":"train['Sex'] = train['Sex'].map(lambda x: 1 if x == 'male'\n                                            else 0)\ntest['Sex'] = test['Sex'].map(lambda x: 1 if x == 'male'\n                                          else 0)","c039184b":"train['Cabin'] = train['Cabin'].map(lambda x: 1 if x == 'K'\n                                            else 0)\ntest['Cabin'] = test['Cabin'].map(lambda x: 1 if x == 'K'\n                                          else 0)","8ff592c0":"train.head()","edfc6e3c":"train[train.Survived == 1].Family.value_counts().sort_index().plot(kind = 'bar', title = 'Survived')\n\nvalues = train[train.Survived == 1].Family.value_counts().sort_index().values\n\nfor num, value in enumerate(values):\n    plt.annotate(value, \n                 (train[train.Survived == 1].Family.value_counts().sort_index().index[num], train[train.Survived == 1].Family.value_counts().sort_index().values[num]),)","f8dd3d2a":"train[train.Survived == 0].Family.value_counts().sort_index().plot(kind = 'bar', title = 'Not Survived')\n\nvalues = train[train.Survived == 0].Family.value_counts().sort_index().values\n\nfor num, value in enumerate(values):\n    plt.annotate(value, \n                 (train[train.Survived == 0].Family.value_counts().sort_index().index[num], train[train.Survived == 0].Family.value_counts().sort_index().values[num]),)","1b2117d6":"family_bucket = {0: 0,\n                 1: 1,\n                 2: 1,\n                 3: 1,\n                 4: 0,\n                 5: 0,\n                 6: 0,\n                 7: 0,\n                 10: 0}\n\ntrain['FamilyBucket'] = train['Family'].map(family_bucket)\ntest['FamilyBucket'] = test['Family'].map(family_bucket)","ca8e68cb":"def EvalCdf(sample, x):\n    count = 0\n    for i in sample:\n        if i <= x:\n            count += 1\n    return count \/ len(sample)","75b34f37":"age_sur = train[train['Survived'] == 1].Age.values\nage_notsur = train[train['Survived'] == 0].Age.values\n\nage_sur.sort()\nage_notsur.sort()\n\ncdf_sur = [EvalCdf(age_sur, x) for x in age_sur]\ncdf_notsur = [EvalCdf(age_notsur, x) for x in age_notsur]\n\nplt.plot(age_sur, cdf_sur, label = 'Survived')\nplt.plot(age_notsur, cdf_notsur, label = 'Not Survived')\nplt.legend()","5e12bfb1":"age_sur = train[train['Survived'] == 1].Fare.values\nage_notsur = train[train['Survived'] == 0].Fare.values\n\nage_sur.sort()\nage_notsur.sort()\n\ncdf_sur = [EvalCdf(age_sur, x) for x in age_sur]\ncdf_notsur = [EvalCdf(age_notsur, x) for x in age_notsur]\n\nplt.plot(age_sur, cdf_sur, label = 'Survived')\nplt.plot(age_notsur, cdf_notsur, label = 'Not Survived')\nplt.legend()","10ccfb58":"print(train.Age.min(), ',', train.Age.max())\nprint(test.Age.min(), ',', test.Age.max())","da60ac18":"age_sur = list(train[train.Survived == 1].Age.values)\nage_not_sur = list(train[train.Survived == 0].Age.values)\n\nsns.histplot(age_sur, stat = 'probability', element = 'step', color = 'orange', label = 'Survived')\nsns.histplot(age_not_sur, stat = 'probability', element = 'step', color = 'blue', label = 'Not Survived')\nplt.legend()","e7cea8f3":"c_sur = Counter(age_sur)\nn_sur = len(age_sur)\n\nc_not_sur = Counter(age_not_sur)\nn_not_sur = len(age_not_sur)\n\nrng = np.arange(max(age_sur) + 1)\ndiffs = []\n\nfor item, count in c_sur.items():\n    c_sur[item] \/= n_sur\n    \nfor item, count in c_not_sur.items():\n    c_not_sur[item] \/= n_not_sur\n    \nfor i in rng:\n    diff = c_sur[i] - c_not_sur[i]\n    diffs.append(diff*100)\n    \nplt.bar(rng, diffs, color = pd.Series(diffs).map(lambda x: 'green' if x>=0\n                                                else 'maroon'))","76d551eb":"to_map = {}\n\nfor age, diff in zip(rng, diffs):\n    if diff < 0:\n        to_map[age] = 0\n    else:\n        to_map[age] = 1\n        \ntrain['Age'] = train['Age'].map(to_map)\ntest['Age'] = test['Age'].map(to_map)","fd5876de":"train.Age.value_counts()","d82d3615":"test.Age.value_counts()","041d2cae":"train.isna().sum()","defc2eb5":"train.head()","3a5155ab":"features = ['Pclass', 'Sex', 'Cabin', 'FamilyBucket', 'Age']\n\nX = train[features].copy()\ny = train['Survived'].copy()","ae0cc5a3":"##lr = LogisticRegression(random_state = 0).fit(X, y)\n\n##predictions = lr.predict(test[features])\n##print(lr.score(X, y))","5ec190ce":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X, y)\npredictions = model.predict(test[features])\nprint(model.score(X, y))","de944a66":"len(predictions)","15f3285c":"submission['Survived'] = predictions\nsubmission.to_csv('submission.csv', index = False)","3393186a":"## Nan in training data","3ec35e58":"# 1. How many variables are there with nan values?","de1294a4":"## The Embarked variable","790b32d2":"# 3. Some more transformations","ae91834c":"# CDFs of Numerical (continuous) variables","42905f76":"In the training dataset; the 'Cabin' variable has 77% of its data - null. There are 177 and 2 null values in the 'Age' and the 'Embarked' variables","dc789e00":"# 2. Dealing with the Nans","83ebe54f":"Ho! we have successfully eliminated all null values both the training and testing dataset","ff2a217d":"## The Age Variable","990adf75":"# 4. Apply ML","a81134cc":"Let's not get into the explorations in this part... Let's make predictions and see how good our model is... ","ed0fec18":"## Let's see if there's some null values still remaining","1907ee28":"## The Fare variable","ae46e2a8":"In my opinion, surnames must make for real good predictor of the 'embarked' variable, as from a preson's surname, we can acknowledge their origin. This may award the highest probability of that person embarking\/boarding from that place.","794f279c":"Now, for fun let's visualize the surnames that were most dead and most alive","ad82675d":"From the name of a passenger, if we know their title (Mr., Mrs., Master, Miss,...), we can quite well guess their age with a lot of credence. However, there's a constrain; let's say if a person is Master, we could certainly guess the range of age that the person must belong to (below 18), but we cannot predict the accurate age with a lot of precision. Therefore, I use the average age of the title that is missing to fill the null values in the 'Age' variable","0100b903":"The old man, aged just above 60 had Embarked from Southampton, and was lodged in 3rd passenger class. I use these details to predict the most probable fare that the passenger must have paid","5ccd6ad9":"## Beginning with the cabin variable","c9461d24":"It is evident that people whose cabin was known are more likely to survive than that of the people whose cabin was unknown. Therefore, I categorize the cabins in 2 categories - 'K' for known, and 'U' for unknown ","b4000ff6":"The fraction of missing data within the 'cabin' and the 'age' variables is certainly more than that of their training counterparts. Moreover, there is 1 missing value in the 'fare' variable also.","341c3db9":"It is evident that the missing vaues in the 'Embarked' variable correspoind to passengers with surnames 'Icard' and 'Stone'. From Google, I found out that these surnames most commonly occur in France and Ireland, respectively. Therefore, it is wise to assign 'C' and 'S' in the corresponding rows of 'Embarked'. ","40526b58":"## Nan in testing data","af9bc278":"# Bucketizing variables"}}