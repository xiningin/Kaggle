{"cell_type":{"e98105fe":"code","665f2d11":"code","52259d57":"code","ee3ec285":"code","da5509dc":"code","c08e9520":"code","882fbe85":"code","7c0285e5":"code","8f93881d":"code","b7937ba0":"code","4ba3c284":"code","26de9a94":"code","f0a4c67b":"code","7ec31f05":"code","39eb909f":"code","d0ee0e70":"markdown","d495068b":"markdown","1c0f907f":"markdown","6ef9e95d":"markdown","bd4b6c05":"markdown","a355761f":"markdown","9fd5752b":"markdown"},"source":{"e98105fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","665f2d11":"ratings_df = pd.read_csv(\"\/kaggle\/input\/anime-recommendations-database\/rating.csv\")\nanime_df = pd.read_csv(\"\/kaggle\/input\/anime-recommendations-database\/anime.csv\")","52259d57":"print(ratings_df.describe())\nprint(ratings_df.head())\nprint(np.sum(ratings_df.isnull()*1))","ee3ec285":"print(anime_df.describe())\nprint(anime_df.head())\nprint(np.sum(anime_df.isnull()*1))","da5509dc":"import scipy.sparse as sparse\nfrom implicit import nearest_neighbours as nn","c08e9520":"sparse_item_user = sparse.csr_matrix(\n    (ratings_df['rating'].astype(float),\n     (ratings_df['anime_id'], ratings_df['user_id'])))","882fbe85":"model = nn.CosineRecommender()\n\n# Calculate the confidence by multiplying it by our alpha value.\nalpha_val = 15\ndata_conf = (sparse_item_user * alpha_val).astype('double')\nmodel.fit(data_conf)","7c0285e5":"item_id = ratings_df.anime_id.unique()","8f93881d":"item_similarity_dic = {}\n\nfor i in item_id:\n    item_similarity_dic[i] = model.similar_items(i)[1:]\n","b7937ba0":"for x in item_id[:3]:\n    info = anime_df[anime_df['anime_id']==x]\n    print(f'Name of the show is, ***{info[\"name\"].values[0]}*** and the Genre is -----> {info[\"genre\"].values[0]}')\n    for i,c in enumerate(item_similarity_dic[x]):\n        if i > 2:\n            break\n        else:\n            info = anime_df[anime_df['anime_id']==c[0]]\n            print(f'similarity rank {i+1}')\n            print(f'Name of the show is, ***{info[\"name\"].values[0]}*** and the Genre is -----> {info[\"genre\"].values[0]}')\n    print(\"______________________________________________________________\")\n","4ba3c284":"user_watched_items = ratings_df.groupby('user_id')['anime_id'].apply(lambda g: g.values\n                                                  .tolist()).to_dict()","26de9a94":"def merged_list(user_id):\n    merge_list = {}\n    for x in user_watched_items[user_id]:\n        merge_list[x] = item_similarity_dic[x]\n    \n    return merge_list","f0a4c67b":"def top_recommendations(user_id,no_of_recommendation):\n    merge_list = merged_list(user_id)\n    t = list(merge_list.values())\n    flat_list = [item for sublist in t for item in sublist]\n    top_recommendations = pd.DataFrame(flat_list,columns=['item_id','sim_rating']).sort_values('sim_rating',ascending=False).head(no_of_recommendation).item_id.values\n    \n    return top_recommendations \n    \n    ","7ec31f05":"import random","39eb909f":"for x in range(3):\n    random_user = random.choice(ratings_df.user_id.unique())\n    top_recomm = top_recommendations(2,5)\n    print(f'userid : {random_user}')\n    for i,c in enumerate(top_recomm):\n        info = anime_df[anime_df['anime_id']==c]\n        print(f'recommendation rank {i+1}')\n        print(f'Name of the show is, ***{info[\"name\"].values[0]}*** and the Genre is -----> {info[\"genre\"].values[0]}')\n    print(\"______________________________________________________________\")\n","d0ee0e70":"#### Based on the cos distance of the two vectors. Our model will create a simmilarity score","d495068b":"# cross-validating","1c0f907f":"## Working Perfectly!! Lets build a recommender system. ","6ef9e95d":"# Cheers!!!","bd4b6c05":"# We will create an expilict recommender system which is based on the expicit past data in this case \"ratings\" given by the user for each movie.!!   ","a355761f":"## we will convert rating_df into a 2-dim matrix where rows are anime-id and columns are user-id, then it will be saved in a sparse format. Saving us compuatational time while fitting the model.","9fd5752b":"\n\n<p><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAa0AAAB1CAMAAADKkk7zAAAAgVBMVEX\/\/\/8AAAD5+fnFxcWtra3z8\/Pw8PD7+\/u+vr7c3Nzr6+vn5+fu7u7j4+NtbW1ycnLS0tKnp6eYmJjW1tZ7e3u5ubmKiopkZGRFRUVRUVGDg4Ofn5+xsbGQkJDLy8teXl4gICBPT08zMzNBQUEZGRkvLy83NzcNDQ0dHR0nJycTExOM3Fw3AAARVklEQVR4nO1diXajOgy1zQ5hMzsGk4SGLP\/\/gc82gUDDa7O1nZn6njNNE1JguEi6kmUDgISEhISEhMRvg13qEU5++iwkbkMRwzI4RT99GhK3QA\/9BhhH86fPQ+I2nCpgQWD89GlI3AIEdVAWdvDT5yFxC6ojMDZpaf\/0eUjcgqQCIPKVnz4NCQkJiR+BZr+D1IV\/MMwmi8szYr9pvPcpsu7M3iKtB\/q+U5QY4R5hHAU9FOJ1MJ1v1+pmam2IEoJDNSRVJPn6AZgQTsyJNt18swKLqbUhxYPHOMRlu6skXT+AEu5Wl3d2M6s\/2TEsrNnX6S7lNCVvhcylfwIb6E2cHQ0nm4ykLXI6+3YFxRfMbSGLwD8Baw3V\/9vkhdlxtlGrj3xkRUsh1r\/+1CSuUcH9slfTwlqL52xFzUbRHYs0qfst5yZxhRJuFg2FZq6G95j\/apydpXLc4BA3x1rUFGVy9gMwNrBcuPB2GQIN95reSnoJWEE\/qSrVa3g0i0xZB\/4BBEfoXH1oJFvVrPyeraAPU1r9JhoCzDefeUKTXP+VxNej9bSrz1wPM8SwZL+jc0UqanrhziRhANBKesKfgNlcGwkKOU0ggjEAehL2WZdyKDmtBoa1tlJU6+qvJL4cQX6dO6GkEVxQ6CFAS09ojXO25ag5My2TNNW3nqYERzSrXwjhgCjedAk3qvTUYsWtMvYGBaSBWRiSsogDA1hqJvtuvh2rZlq+UIS9IBqqYWWAVRWqakiB6tlIlHQJwZiovRYksSUD13fDJ5M3VrE03u\/GZXQVo7QypL82cLnLNW3dFfg6qYzLy+\/I9Lslc3HjLLzKn504Tn6rgq+8xZBtkMzzfS9japooXzFGQWCl9DDVMO24AryGFpjXVmQEya+tPuVwu\/i5EuYQZpUaZrAlr6crOq2LTY\/8eID7Lf38bySCNYT\/c6E8+Mblc8T4fH0PmZWYM3yJ\/f5z8CGE3uIWdGZLZ6\/p4jckvhn6Md1DuFgjHdjSCniUk3b+CBBoFxCSpU2MrVPpWlF62JHrYt7TKKd3gBGZ+PWH+OeQZ0Ddw93SJsbWvvOyhnnKr+iE8Kc7RWW5eA4SU1AYAOM41Rl2Ogh6blt+QKnZbP0vEGyr2buILCtTiQk8SKqkZUp9\/ESB6\/NvQ9xilMKFcY3nQMN3wkWVtvUZVtu3tm13cKIzdG9iWz1bDoTtq\/uMYgUCgEmPkAUuydanwJBGUWQxnXGJ8c5QARrZsiDMX1w80JT6CIA74JewhSZ1Ge3+XoW8z7SSPVwvVOl8eGBs2ZTpjMWy0BMwAGSSkJ47q6M\/gC0UfHk1azXI4CBBwK3vG\/WJsg08tSwgxSxwwU0732rUG\/bpuijaIzzi1fIuHgeFoAZV0oOfd\/UtKiOtrz9DSm2DKO8WNgGbVC+L2HrtiXqN48dljUByn9LWLIaI2ZQl8D4yuZE1wH19upXA0gL6ed6IBlBawPTrhxgN+HZ9idxmHQKU7Jf8R7UW7SDmK8J2tBGO0PE8XdlUQCPlX1NsQ+Z8zMNxXecbenDT+Nrja1XMLqO1WWLLKlV+p9YvqJOuSnEALcwpsApmyMrm76kQ\/czgL1q6nQ1OiFUsxmbEzzPKXsCWuxW+wzqy4wSHknvEJd8rwZCkJKAgChQbuJQJigoz26YVMyqDvXcGtmySho74jDoW1ZAVRDpw4jcSWMgJAmoZDv\/xwYEMM62Fk3BC0uuWsA6ZjjKSlnsTjaxVHrUZW0aY\/dYx1U\/QphU5paBZbymoj13cpH5OvBgfa2CX67w6s0U7r4o3Jljh47bx2jTx1k1klye462JH7Y7HcoW7\/UcLRrhtm\/g7ynxup1Y5t6BNXdU7AnS\/ENtz3pNnQm5WZiubgZbAFCgwfB\/oGaRMq8PWRu5pGxpuUehME57UM1smu+ctr2GWoEK\/ajzLqPMAGHidcCXkNrxI0CRnzZUU+YhuyKS20AAx46KCtmE4pxrULZ+bxm6KzOfbI\/jGvn488v4hpR0CV3LZU9582fQ0LWzHo7Txn9vZEsDMXGkRr7Sx217nhTb7tOGXkV\/\/aGRLD1iqQjqTa1YighxmbAGy7uNWDSMQeMN\/c5gJLXB2jiofK0QhSyd5QoSKLcLQV1YrCzi5YEuBKdKCXMxBU9bD2IexsCugBcprMPIyPWM0HMamLzrMs7jcPh2EB+6JzmzVM7aCkS1gxbu3U3tmi2PGltKWWpp8pLtjyJ2bAVYw51fHewv0HdwfGVHujrOl4UPIbx7RQHRhaxFKDl+D8qOjgHD3osM8i4nKU+ITv+3PbOEzW3rZBlO2zBPzghXva0jW6pwtl0sH\/41e1h6Y3pRDAIphz6s9sEWZvGjgPj17Qg3nEUCkl4fKgSzsio6JjIFeg1EUOZM7OdJefJSnMZ6myXnz9ku2NWXLKlgubJdtnayu2Eo5DeSwKUcdR2N\/xMCh2ndNBEAMGaLuaMfMluzCY4fi4xwaYWxZXX+3K+1QQDe9y67KLwsoWnU5jIf\/TD3KgzYv+APcMePgkzENblvaG\/OMWpbzxPiNXTWnYAIjbyxgNXmJbXPfs8WvLiCQGjXfzyqDn2gAKI7kMZXhcgtLQcaMzIg9oKWNOJttZNSbXtonndSE71BCofXeYp9JBOYdTzhlP1uT\/6h5ZPBi9qOMxIcm3PpFy97W7G2XAFqw14QRuMv7dR\/K\/JM7Hx1hlnGFQWDhs4ihNXAXF63NswPOkeNvm6InCxGZb71HAw+AFySTm8o8Gg8bzhUjOg16bVGbn9b23OQ80E6F4HA1OxGxzN1W\/REG63Szz2sZJtOo5mJFzmVH6XMJlafki18JmK782yaRtp9\/5SbQ2p03k9wHjWTzD8zt5zcQj4fNZSinvnRcmGxvmdjBibta9o+aTO1wxXM+Rz0kwCofqkdblXoXkusxGvfOXYT9\/9Lurvb0GFIY1OSJyrObz6i2yxvKhDy5y0a2kj0cTdvkCleY1Jo5VRYctYkYFipGD0NgpQ+xld0pvtvrvp3qXgHfzzc6vSqUB8UpfsqvBMW0wKh6N+xszhaLouOqFHO2xB1prOGGv4Z9n80TbG2eH8up\/m8plA\/hfpwbfidQ5V\/e0PKWseoZWw7LY4\/DdVxgS1+LLA847DV4jq2nR5\/d+u8ZDnoZZmzFR+YwBm96Yev4ni33AHne8ThbSvz08HOEf+FqXDO2tnGzh9nZm05sSwFItEkItgzDoBByI36cLYyf9oQK\/tvE6AswZSuElrKG8Hzbz9niOTln6+D7fgYPolfzcbY85emx4urDEug\/iilbRYtAPvYSLrN1rNO0zN9EIexxtp4PW0D95Wy5a6wb5DTojAlb9MKW0IR6C\/nDRh5nqxjYEiM5+gNu0cZDCdT4RevrTtiKIa\/GnoY5CxOVsbqwJVQGCsWUvIfZCrIhqwyLXRx\/PK6zDGvsO0qKPCtz\/AWTlP48+Be2uqaua8x0hqgOv9OEc7aISLgeZitMh2vrKTACsf\/htxehjCV+s24qQLI\/d6T6hRjYMoC6FzYVHCAUrmniCYOeLcPmbCGErEw0WT\/MVpkMIkNPGf278MNvL6K6dOqHWQTS32VbStjuMfs9qJgrLHkz1VXcMirMkueQhLiAa99+gq3NRXy3NbChfb9hTNiqU93Kku9oFv1xDGylm6LJ2S1PiqJpilZZ8IRasWGb+BoJhSfmsr6CLeYIWeJwd98jCkd7XPkVqIr6VyxwMq8TTrEQt97hUbbcZhTwFouRge\/fnX25eGyXtTBlZ1H\/igVObmFr92K2zPLpIEPTX6Eq3uMWtgrG1tJ0qkfZKtU7siNtMSAl9R27MJx\/pUjFezS9RbYUpqv7B5fFjK1m4Ru6ytiq77\/JG06woekTsBR5+bt2UtcL90MvMtC7XSwziCguzX9jSTy+wl+yeKWshG0RVCT\/M9KPggDYyv33rRAZOsEk7EEwrnF9VVLnc2g1HAf+9bxZQ+UiQ0\/q+S6URQ9rNgGB8nl5DwI1nC1tA3fna43L2Dvn3RNY3EnbRQzc09VCRf3gllPCbar2bKWx100edYICSnkLJQ00ULYItO3vKE29HmYsbFnZTW\/4KoNzC0fxvuKr6ibAWl8J\/CAVlhg1kIwuzlDiy5OS7bqDW8\/3s45olCCQ5\/+GK\/x+1OcF8wg8TmKes5lbkCLKJYCnVpur0Kj0j1gAZjdtFFqVkwnRNeRlXyMTrQuBXJnqUXhDR4wPs0mgsWbVQn3TnHqTUhbWOE7OlQxE9s1Eg1jhJcJ5UPxe8pVY7EyuGvUoiqHq4Gxm639NpZ9ReaoYnzYCEoD3otAYB7ecGMaTIsZqjE5a0fHPjYaZmEMqIBenfAxoZAsob\/+3cqWVW4noqwqymqrvVcZlcAtEBVxcidTc8RTcIV2MUOybSiFVxkOg\/iW4YLhbLO8ZJQYWH7nRcFfkzXtXaE2aVJNtt5RM1Xu\/Sio\/VzWg8NVfa6kyHkI4GdwwPLhYI6R89AzyGopimiZ9nw8OIoNDw\/tmIUH3YE0IqTPGVsBXfv2VhaoXIJ6agtvChbxbK7IkCfuugiUkU0nv+PB6cEsrdoLQDCbSqB7AeNHmT+vES2ypbRzHPrzKkYb31UziJd31wwjNbd+oHMPnK8i\/EfQcrYxiGqm0eEFbu23guE50EjPj9Wpk1zkXp7RwOtiskfo69rFsS8iKBobsNXm+Ie53wRnmvkez7vx04Vl2qBQaEHVbzo4TD\/p9hc\/MWtOVe1C1NHjiQf6hoZ7E\/Jm4kmzdBTyUmdR64raIf1UT1kgKyxUwIrzelyafnzZsCdbnGQd0+mRP83pKEkrIFtZhGKbbfoKVJeX7XXB7l8RQTp79nUxmjjFDEC82C1mpw6t+cRkTYKmDWF\/Vg35MJvkXLScZG+qn\/ukkLgVCMfy\/qqTSuA+4OZwnO00qRXT2GHDSL2WJHMfhjxvU2auz0jEeniUQbLrzsOlEElrl1MmZvdEZttPjfOxqJ5XGPVjVJD+PUhWjOUXNdNBJXRyC0tT6zNZKTbNWfGUiMtw0nDg5mi8OSidVJ9m6B5rrNm9CDLjjxHU9S8XalMCyXKVK10udH8x4hsWPNMsqD4Ima1zU1K5j6vLVLW3LohXeHJYnCTXyQR73oldpICkHJR\/DTcFRFkWzPUxXNZ8AVYU9DHYYqlhqjIWqswjUyL5r2B4aLyuKnO9isWXBWTv3NIJIAJ6nilifhoNXUubPBFquDWm4G2UGUM7rIQ01PxTNnytkLms\/esRSwd8J3NeHsjtbpKwwGK80hR5X\/+advaJ6aMq4dSfUo0iLm3u7NCcXOur4ynAovHdKiiYt617Qli+VY19Wx7HelYOqT3m0Gr4S0mR6uEPnybXyG7qrvwVGxmWGeVliop41cCbl8dMmMrs8MbOKLr1syqzopJQLq2pIPAafs4Uvj+6yZ4bgWDe0\/CVcFCrj5C+gOVPCV0kruwZfBSEKL4svXi1OcgNbYm1nc8yeaDX3fMvPSJZ4BOTEROE4zFspzG0puIcY8riJLW9ljINbSlirIBh2wR8Bv5FsvQrJ1rO1MX9VI+j0tUAO7tBuYMvKi8jGg1FaqhcyZ3iGBiRbLwTNO4f6g+9CePNOV9\/Alut1ppWOUqLK5qpCsvVCZNANx0oG6JQKVHUPUTq\/gS273IfBuFg+quvACoZdUEPGrVfCg86lg8Y90RhpqzMMEAUQf66\/TVjTUWQ4ZVxFxrALBOxqmwayavEilLCadLTj+TpNYRImn7c\/M1E4qTuZ6azmTiu1UmV+\/CKQQ9le6hVobgUIGcbndhEc8nJs0wUGmoU+9taQtfZXQWmPzZNTSq1i38jY9C2wNjB9clELJ\/6fMSyJlyODz44K6viTp3BIvAw+fLobXYFyJtY3IT0+zRbtHlr7WOJ+kLuHIq9AX\/HIRolb4NCnc1fngQUfJP5q\/Af6kyIB9bjRwAAAAABJRU5ErkJggg==\" alt=\"Alt Text\" title=\"Optional Title\"><\/p>\n"}}