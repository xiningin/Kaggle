{"cell_type":{"bfc91c73":"code","36a56d50":"code","3a703a00":"code","7e9a65fc":"code","c0b395b2":"code","c0c07f00":"code","4e904a97":"code","45b26703":"code","450c9adc":"code","3c32cd2a":"code","11006ae7":"code","ddfdead7":"code","377f0ce7":"code","7e64fddc":"code","a13905b3":"code","31e9defc":"code","dab099a3":"code","61f30d51":"code","49c552fe":"code","e172e592":"code","d9e9a4aa":"code","5c89dce5":"code","d646e63f":"code","bf5d2ebf":"code","4b556016":"code","dcdc9981":"code","59253186":"code","bc5bd671":"code","5cb91e4f":"code","1cbc1685":"code","4d2a6e29":"code","d7c06e6d":"code","25f9040b":"code","b03058c9":"code","e9b9294c":"code","bd3edcd8":"code","a673e2a0":"code","3352be0e":"code","e95bd92e":"code","c836c766":"code","30d491fc":"code","07758638":"code","150303b0":"code","eee27a96":"code","8563f0c5":"code","65105277":"code","c0aedf51":"code","7316af1b":"code","29a74d53":"code","950bb201":"code","5151141b":"code","e3cf62ce":"code","88c74336":"code","06ef3ce6":"code","3a976bb5":"code","f19e7b14":"code","ccdb9fd5":"code","a4bd39df":"code","68d703b0":"code","ce022ab2":"code","f1d4cf46":"code","64ae7679":"code","d83bd7c0":"code","88356b84":"code","328a671f":"code","211e73e3":"code","64d98a96":"code","aebdd09f":"code","9794cad9":"code","9eeebb92":"code","d7d52169":"code","3c96b3f5":"code","7d9bf4d8":"code","70ec6340":"code","996196ce":"code","212a57dd":"code","917d5a58":"code","da9b3193":"code","57241e43":"code","69101077":"code","deeca8ed":"code","097e2ec2":"code","4a49dcb0":"code","376c4d8c":"code","bf23a3a8":"code","7fa1d2ce":"code","8200bbb8":"code","1806b8c4":"code","f8cfb29a":"code","07fcb78e":"code","e44c2bd1":"code","b52beaef":"code","b5357bcb":"code","76ce9461":"code","bab63cb6":"code","26acf6ce":"code","07da2eab":"code","09f692be":"code","9e45cace":"code","d8fc8aa0":"code","5b48655d":"code","0185430b":"code","5895c68e":"code","94f842cb":"code","f2e7e076":"code","36cb5d10":"code","c0443736":"code","c027e422":"code","d94844cc":"code","b38b9301":"code","9a3d50af":"code","2812553b":"code","f3ca2261":"code","e75c6e1b":"code","55795be1":"code","82d93047":"code","2ee5f666":"code","7a417ba9":"code","c9769232":"code","4ab1d834":"code","54240589":"code","1c6f0b97":"code","605c7b94":"code","57664dd1":"code","de733826":"code","110ffb11":"markdown","fb347dcf":"markdown","32b4be78":"markdown","3fa301a5":"markdown","576396ca":"markdown","deaeb7c2":"markdown","c7410cf8":"markdown","11e4f36f":"markdown","ce23eda6":"markdown","4e2990ef":"markdown","f757e7e2":"markdown","d5fea2fa":"markdown","055c7285":"markdown","c0095f8e":"markdown","cd5503a8":"markdown","e9b003f7":"markdown","e45961ca":"markdown","4377219a":"markdown","75793c4f":"markdown","6bb5eb4a":"markdown","6869ea86":"markdown","bf9f9e32":"markdown","d3495f2e":"markdown","3c0c69c2":"markdown","f06f714b":"markdown","3ec2facc":"markdown","b244efd1":"markdown","f75bcc28":"markdown","b776f0e7":"markdown","d649546b":"markdown","ee17f316":"markdown","b224fa12":"markdown","748e8f8b":"markdown","26365445":"markdown","d42c235c":"markdown","c036a1ce":"markdown","e8b1a0ff":"markdown","d233c5d3":"markdown","42992d95":"markdown","f0dfb717":"markdown","ce6b3f00":"markdown","56cddba1":"markdown","af373af1":"markdown","84cda424":"markdown","37704cf9":"markdown","22ee0c25":"markdown","46fa9da5":"markdown","f34fac74":"markdown","42cd4af5":"markdown"},"source":{"bfc91c73":"# import packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n% matplotlib inline","36a56d50":"# Load data\ndf = pd.read_csv('..\/input\/KaggleV2-May-2016.csv')\ndf.head()","3a703a00":"# Check size of dataframe\ndf.shape","7e9a65fc":"# Info about the data\ndf.info()","c0b395b2":"# General descriptive summary about the data\ndf.describe()","c0c07f00":"# Create a copy of data to work with\n# Copied data can be manipulated and changed as per the requirement of analysis\n# Original data source remains unchanged and available at all times.\ndf_med_app = df.copy()","4e904a97":"df_med_app.head()","45b26703":"# Checking for null values if any\nsum(df_med_app.isnull().any())","450c9adc":"# Checking for duplicate rows in data\nsum(df_med_app.duplicated())","3c32cd2a":"# Checking data types of all columns\ndf_med_app.dtypes","11006ae7":"# Get descriptive summary of data\ndf_med_app.describe()","ddfdead7":"# Drop the columns PatientId and AppointmentID\ndf_med_app.drop(['PatientId', 'AppointmentID'], axis=1, inplace=True)","377f0ce7":"# Check whether the columns have been dropped successfully\ndf_med_app.head(2)","7e64fddc":"# Correcting spelling names\ndf_med_app.rename(columns={'Hipertension': 'Hypertension', 'Handcap': 'Handicap'}, inplace=True)","a13905b3":"# confirm changes\ndf_med_app.head(2)","31e9defc":"df_med_app['ScheduledDay'] = pd.to_datetime(df_med_app.ScheduledDay)","dab099a3":"df_med_app['AppointmentDay'] = pd.to_datetime(df_med_app.AppointmentDay)","61f30d51":"# check the changed data types\ndf_med_app[['ScheduledDay', 'AppointmentDay']].dtypes","49c552fe":"df_med_app[['ScheduledDay', 'AppointmentDay']].head(2)","e172e592":"df_med_app['ScheduledDay'] = df_med_app['ScheduledDay'].dt.normalize()","d9e9a4aa":"# Check both columns - ScheduledDay and AppointmentDay after normalization\ndf_med_app[['ScheduledDay', 'AppointmentDay']].head(2)","5c89dce5":"df_med_app[df_med_app['AppointmentDay'] < df_med_app['ScheduledDay']]","d646e63f":"df_med_app['Days_To_Wait'] = df_med_app['AppointmentDay'] - df_med_app['ScheduledDay']","bf5d2ebf":"df_med_app['Days_To_Wait'].head(2)","4b556016":"df_med_app.dtypes","dcdc9981":"df_med_app['Days_To_Wait'] = (df_med_app['Days_To_Wait'].apply(lambda x: str(x))).apply(lambda x: x.split(\" \")[0])\ndf_med_app['Days_To_Wait'] = df_med_app['Days_To_Wait'].apply(lambda x: int(x))","59253186":"# Check the changes for 'Days_To_Wait' column values\ndf_med_app.dtypes","bc5bd671":"df_med_app['Days_To_Wait'].min(), df_med_app['Days_To_Wait'].max()","5cb91e4f":"# Drop rows for which 'Days_To_Wait' value is negative\ndf_med_app.drop(df_med_app[df_med_app['Days_To_Wait'] < 0].index, inplace=True)","1cbc1685":"# Verify there are no more columns for which 'Days_To_Wait' value is negative\ndf_med_app[df_med_app['Days_To_Wait'] < 0]","4d2a6e29":"# Check the unique values for 'Scholarship'\ndf_med_app.Scholarship.unique()","d7c06e6d":"# Check the unique values for 'Hypertension'\ndf_med_app.Hypertension.unique()","25f9040b":"# Check the unique values for 'Diabetes'\ndf_med_app.Diabetes.unique()","b03058c9":"# Check the unique values for 'Alcoholism'\ndf_med_app.Alcoholism.unique()","e9b9294c":"# Check the unique values for 'SMS_received'\ndf_med_app.SMS_received.unique()","bd3edcd8":"# Check the unique values for 'Handicap'\ndf_med_app.Handicap.unique()","a673e2a0":"# Using the loc function which takes index (row label as index) as an argument\ndf_med_app.loc[df_med_app[df_med_app.Handicap > 0].index, 'Handicap'] = 1","3352be0e":"# Checking the unique values for handicap column\ndf_med_app.Handicap.unique()","e95bd92e":"# Rows containing negative age values\ndf_med_app[df_med_app.Age < 0]","c836c766":"# Using loc function which takes label (index label) as an argument to update with mean value\ndf_med_app.loc[99832, 'Age'] = df_med_app.Age.mean()","30d491fc":"# Cross check for any negative values\ndf_med_app[df_med_app.Age < 0]","07758638":"# Using the loc function which takes index (row label as index) as an argument\ndf_med_app.loc[df_med_app[df_med_app['No-show'] == 'Yes'].index, 'No-show'] = 1\ndf_med_app.loc[df_med_app[df_med_app['No-show'] == 'No'].index, 'No-show'] = 0","150303b0":"df_med_app.dtypes","eee27a96":"# Change string values for column 'No-show' to integer values\ndf_med_app['No-show'] = df_med_app['No-show'].apply(lambda x: int(x))","8563f0c5":"# Check data types\ndf_med_app.dtypes","65105277":"# Verify the change has been made correctly\ndf_med_app[df_med_app['No-show'] == 1].shape[0] + \\\ndf_med_app[df_med_app['No-show'] == 0].shape[0] == df_med_app.shape[0]","c0aedf51":"# Changing column names to lower case characters\n# replace hyphens with underscores\ndf_med_app.rename(columns=lambda x: x.strip().lower().replace(\"-\", \"_\"), inplace=True)","7316af1b":"# confirm changes\ndf_med_app.head()","29a74d53":"no_show = df_med_app.no_show == 1","950bb201":"show_up = df_med_app.no_show == 0","5151141b":"# Get the count of no_show and appointment_completed after classifying the data into these 2 categories\ndf_med_app[no_show].shape[0], df_med_app[show_up].shape[0]","e3cf62ce":"# Get the proportion of no_show and appointment_completed\ndf_med_app[no_show].shape[0] \/ df_med_app.shape[0], df_med_app[show_up].shape[0] \/ df_med_app.shape[0]","88c74336":"# Checking for accuracy of proportions\ndf_med_app[no_show].shape[0] + df_med_app[show_up].shape[0] == df_med_app.shape[0]","06ef3ce6":"# Pie graph for proportion of appointments completed and no-shows\nsns.set(style='darkgrid')\nplt.pie(df_med_app.no_show.value_counts(), \\\n        labels=['Show_up', 'No_shows'], \\\n        explode=[0.1, 0], autopct=\"%.2f%%\")\nplt.axis('equal');","3a976bb5":"# Pie graph for proportion of male and female\nplt.pie(df_med_app.gender.value_counts(), \\\n        labels=['Female', 'Male'], \\\n        autopct=\"%.2f%%\")\nplt.axis('equal');","f19e7b14":"# Find the poportion of females in the categories 'no_show' and 'appointment_completed' using masks\nbar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_female_no_show = df_med_app[no_show].query('gender == \"F\"').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_female_show_up = df_med_app[show_up].query('gender == \"F\"').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_female = proportion_female_no_show, proportion_female_show_up\nproportion_vals_female","ccdb9fd5":"# plotting the bar chart\nplt.bar(x_pos, proportion_vals_female, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Proportion of females for categories - no show and show up');","a4bd39df":"# Find the poportion of males in the categories 'no_show' and 'appointment_completed' using masks\nbar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_male_no_show = df_med_app[no_show].query('gender == \"M\"').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_male_show_up = df_med_app[show_up].query('gender == \"M\"').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_male = proportion_male_no_show, proportion_male_show_up\nproportion_vals_male","68d703b0":"# plotting the bar chart\nplt.bar(x_pos, proportion_vals_male, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Proportion of males for categories - no show and show up');","ce022ab2":"scholarship = df_med_app.scholarship == 1","f1d4cf46":"no_scholarship = df_med_app.scholarship == 0","64ae7679":"# Get the count of scholarship and no_scholarship after classifying the data into these 2 categories\ndf_med_app[scholarship].shape[0], df_med_app[no_scholarship].shape[0]","d83bd7c0":"# Get the proportion of scholarship and no_scholarship\ndf_med_app[scholarship].shape[0] \/ df_med_app.shape[0], df_med_app[no_scholarship].shape[0] \/ df_med_app.shape[0]","88356b84":"# Checking for accuracy of proportions\ndf_med_app[scholarship].shape[0] + df_med_app[no_scholarship].shape[0] == df_med_app.shape[0]","328a671f":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_scholarship_no_show = df_med_app[no_show].query('scholarship == 1').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_scholarship_show_up = df_med_app[show_up].query('scholarship == 1').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_scholarship = proportion_scholarship_no_show, proportion_scholarship_show_up\nproportion_vals_scholarship","211e73e3":"plt.bar(x_pos, proportion_vals_scholarship, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Scholarship proportions for categories - no show and show up');","64d98a96":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_no_scholarship_no_show = df_med_app[no_show].query('scholarship == 0').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_no_scholarship_show_up = df_med_app[show_up].query('scholarship == 0').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_no_scholarship = proportion_no_scholarship_no_show, proportion_no_scholarship_show_up\nproportion_vals_no_scholarship","aebdd09f":"plt.bar(x_pos, proportion_vals_no_scholarship, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('No scholarship proportions for categories - no show and show up');","9794cad9":"hypertension = df_med_app.hypertension == 1","9eeebb92":"no_hypertension = df_med_app.hypertension == 0","d7d52169":"# Get the count of hypertension and no_hypertension after classifying the data into these 2 categories\ndf_med_app[hypertension].shape[0], df_med_app[no_hypertension].shape[0]","3c96b3f5":"# Get the proportion of hypertension and no_hypertension\ndf_med_app[hypertension].shape[0] \/ df_med_app.shape[0], df_med_app[no_hypertension].shape[0] \/ df_med_app.shape[0]","7d9bf4d8":"# Checking for accuracy of proportions\ndf_med_app[hypertension].shape[0] + df_med_app[no_hypertension].shape[0] == df_med_app.shape[0]","70ec6340":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_hypertension_no_show = df_med_app[no_show].query('hypertension == 1').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_hypertension_show_up = df_med_app[show_up].query('hypertension == 1').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_hypertension = proportion_hypertension_no_show, proportion_hypertension_show_up\nproportion_vals_hypertension","996196ce":"plt.bar(x_pos, proportion_vals_hypertension, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Hypertension proportions for categories - no show and show up');","212a57dd":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_no_hypertension_no_show = df_med_app[no_show].query('hypertension == 0').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_no_hypertension_show_up = df_med_app[show_up].query('hypertension == 0').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_no_hypertension = proportion_no_hypertension_no_show, proportion_no_hypertension_show_up\nproportion_vals_no_hypertension","917d5a58":"plt.bar(x_pos, proportion_vals_no_hypertension, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('No hypertension proportions for categories - no show and show up');","da9b3193":"diabetes = df_med_app.diabetes == 1","57241e43":"no_diabetes = df_med_app.diabetes == 0","69101077":"# Get the count of diabetes and no_diabetes after classifying the data into these 2 categories\ndf_med_app[diabetes].shape[0], df_med_app[no_diabetes].shape[0]","deeca8ed":"# Get the proportion of diabetes and no_diabetes\ndf_med_app[diabetes].shape[0] \/ df_med_app.shape[0], df_med_app[no_diabetes].shape[0] \/ df_med_app.shape[0]","097e2ec2":"# Checking for accuracy of proportions\ndf_med_app[diabetes].shape[0] + df_med_app[no_diabetes].shape[0] == df_med_app.shape[0]","4a49dcb0":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_diabetes_no_show = df_med_app[no_show].query('diabetes == 1').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_diabetes_show_up = df_med_app[show_up].query('diabetes == 1').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_diabetes = proportion_diabetes_no_show, proportion_diabetes_show_up\nproportion_vals_diabetes","376c4d8c":"plt.bar(x_pos, proportion_vals_diabetes, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Diabetes proportions for categories - no show and show up');","bf23a3a8":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_no_diabetes_no_show = df_med_app[no_show].query('diabetes == 0').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_no_diabetes_show_up = df_med_app[show_up].query('diabetes == 0').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_diabetes = proportion_no_diabetes_no_show, proportion_no_diabetes_show_up\nproportion_vals_diabetes","7fa1d2ce":"plt.bar(x_pos, proportion_vals_diabetes, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('No diabetes proportions for categories - no show and show up');","8200bbb8":"alcoholism = df_med_app.alcoholism == 1","1806b8c4":"no_alcoholism = df_med_app.alcoholism == 0","f8cfb29a":"# Get the count of alcoholism and no_alcoholism after classifying the data into these 2 categories\ndf_med_app[alcoholism].shape[0], df_med_app[no_alcoholism].shape[0]","07fcb78e":"# Get the proportion of alcoholism and no_alcoholism\ndf_med_app[alcoholism].shape[0] \/ df_med_app.shape[0], df_med_app[no_alcoholism].shape[0] \/ df_med_app.shape[0]","e44c2bd1":"# Checking for accuracy of proportions\ndf_med_app[alcoholism].shape[0] + df_med_app[no_alcoholism].shape[0] == df_med_app.shape[0]","b52beaef":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_alcoholism_no_show = df_med_app[no_show].query('alcoholism == 1').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_alcoholism_show_up = df_med_app[show_up].query('alcoholism == 1').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_alcoholism = proportion_alcoholism_no_show, proportion_alcoholism_show_up\nproportion_vals_alcoholism","b5357bcb":"plt.bar(x_pos, proportion_vals_alcoholism, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Alcoholism proportions for categories - no show and show up');","76ce9461":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_no_alcoholism_no_show = df_med_app[no_show].query('alcoholism == 0').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_no_alcoholism_show_up = df_med_app[show_up].query('alcoholism == 0').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_no_alcoholism = proportion_no_alcoholism_no_show, proportion_no_alcoholism_show_up\nproportion_vals_no_alcoholism","bab63cb6":"plt.bar(x_pos, proportion_vals_no_alcoholism, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('No alcoholism proportions for categories - no show and show up');","26acf6ce":"handicap = df_med_app.handicap == 1","07da2eab":"no_handicap = df_med_app.handicap == 0","09f692be":"# Get the count of handicap and no_handicap after classifying the data into these 2 categories\ndf_med_app[handicap].shape[0], df_med_app[no_handicap].shape[0]","9e45cace":"# Get the proportion of handicap and no_handicap\ndf_med_app[handicap].shape[0] \/ df_med_app.shape[0], df_med_app[no_handicap].shape[0] \/ df_med_app.shape[0]","d8fc8aa0":"# Checking for accuracy of proportions\ndf_med_app[handicap].shape[0] + df_med_app[no_handicap].shape[0] == df_med_app.shape[0]","5b48655d":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_handicap_no_show = df_med_app[no_show].query('handicap == 1').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_handicap_show_up = df_med_app[show_up].query('handicap == 1').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_handicap = proportion_handicap_no_show, proportion_handicap_show_up\nproportion_vals_handicap","0185430b":"plt.bar(x_pos, proportion_vals_handicap, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Handicap proportions for categories - no show and show up');","5895c68e":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_no_handicap_no_show = df_med_app[no_show].query('handicap == 0').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_no_handicap_show_up = df_med_app[show_up].query('handicap == 0').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_no_handicap = proportion_no_handicap_no_show, proportion_no_handicap_show_up\nproportion_vals_no_handicap","94f842cb":"plt.bar(x_pos, proportion_vals_no_handicap, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('No handicap proportions for categories - no show and show up');","f2e7e076":"sms_received = df_med_app.sms_received == 1","36cb5d10":"sms_not_received = df_med_app.sms_received == 0","c0443736":"# Get the count of sms_received and sms_not_received after classifying the data into these 2 categories\ndf_med_app[sms_received].shape[0], df_med_app[sms_not_received].shape[0]","c027e422":"# Get the proportion of sms_received and sms_not_received\ndf_med_app[sms_received].shape[0] \/ df_med_app.shape[0], df_med_app[sms_not_received].shape[0] \/ df_med_app.shape[0]","d94844cc":"# Checking for accuracy of proportions\ndf_med_app[sms_received].shape[0] + df_med_app[sms_not_received].shape[0] == df_med_app.shape[0]","b38b9301":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_sms_received_no_show = df_med_app[no_show].query('sms_received == 1').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_sms_received_show_up = df_med_app[show_up].query('sms_received == 1').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_sms_received = proportion_sms_received_no_show, proportion_sms_received_show_up\nproportion_vals_sms_received","9a3d50af":"plt.bar(x_pos, proportion_vals_sms_received, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Sms received proportions for categories - no show and show up');","2812553b":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_sms_not_received_no_show = df_med_app[no_show].query('sms_received == 0').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_sms_not_received_show_up = df_med_app[show_up].query('sms_received == 0').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_sms_not_received = proportion_sms_not_received_no_show, proportion_sms_not_received_show_up\nproportion_vals_sms_not_received","f3ca2261":"plt.bar(x_pos, proportion_vals_sms_not_received, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Sms not received proportions for categories - no show and show up');","e75c6e1b":"df_med_app['days_to_wait'].describe()","55795be1":"days_to_wait_below_mean = df_med_app['days_to_wait'] < df_med_app['days_to_wait'].mean()","82d93047":"days_to_wait_above_mean = df_med_app['days_to_wait'] > df_med_app['days_to_wait'].mean()","2ee5f666":"# Get the count of days_to_wait_below_mean and days_to_wait_above_mean after classifying data into these 2 categories\ndf_med_app[days_to_wait_below_mean].shape[0], df_med_app[days_to_wait_above_mean].shape[0]","7a417ba9":"# Get the proportion of days_to_wait_below_mean and days_to_wait_above_mean\ndf_med_app[days_to_wait_below_mean].shape[0] \/ df_med_app.shape[0], df_med_app[days_to_wait_above_mean].shape[0] \/ df_med_app.shape[0]","c9769232":"# Checking for accuracy of proportions\ndf_med_app[days_to_wait_below_mean].shape[0] + df_med_app[days_to_wait_above_mean].shape[0] == df_med_app.shape[0]","4ab1d834":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_wait_below_mean_no_show = df_med_app[no_show].query('days_to_wait < 10').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_wait_below_mean_show_up = df_med_app[show_up].query('days_to_wait < 10').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_wait_below_mean = proportion_wait_below_mean_no_show, proportion_wait_below_mean_show_up\nproportion_vals_wait_below_mean","54240589":"plt.bar(x_pos, proportion_vals_wait_below_mean, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Days to wait below mean proportions for categories - no show and show up');","1c6f0b97":"bar_labels = ['No show', 'Show up']\nx_pos = list(range(len(bar_labels)))\nproportion_wait_above_mean_no_show = df_med_app[no_show].query('days_to_wait > 10').shape[0] \/ df_med_app[no_show].shape[0]\nproportion_wait_above_mean_show_up = df_med_app[show_up].query('days_to_wait > 10').shape[0] \/ df_med_app[show_up].shape[0]\nproportion_vals_wait_above_mean = proportion_wait_above_mean_no_show, proportion_wait_above_mean_show_up\nproportion_vals_wait_above_mean","605c7b94":"plt.bar(x_pos, proportion_vals_wait_above_mean, align='center', alpha=0.5)\nplt.grid()\nplt.ylabel('Proportions')\nplt.xticks(x_pos, bar_labels)\nplt.title('Days to wait above mean proportions for categories - no show and show up');","57664dd1":"no_show_neighbourhoods = df_med_app.groupby('neighbourhood').sum()['no_show']\ntop_10_no_show_neighbourhoods = no_show_neighbourhoods.sort_values(ascending=False).head(10)\ntop_10_no_show_neighbourhoods","de733826":"# Plot the graph\ntop_10_no_show_neighbourhoods.plot(kind='bar',figsize=(8, 8),\\\n                  title = 'Top 10 no show neighbourhoods');\nplt.xlabel('Neighbourhoods')\nplt.ylabel('No show count')","110ffb11":"#### Setting values in the 'Handicap' column to 1 for all non-zero values.","fb347dcf":"#### Observation: 80% of all the total entries are without hypertension and approximately 20% of them are having hypertension.\n- In light of this fact, we cannot be comparing trends for patients with and without hypertension against each other. This is because the proportion of entries without hypertension is much higher for both the categories as compared to proportion with hypertension.\n- However, it would be interesting and sensible to view trends among hypertension and no hypertension groups for the categories namely no show and show up (masks have been created above).","32b4be78":"#### Observations and issues with data\n- There are no null values in the data.\n- There are no duplicate rows in the data.\n- PatientId and AppointmentID variables will not have any impact on the patient making an appointment or not and hence those columns can be dropped safely.\n- Spelling names for columns 'Hipertension' and 'Handcap' is incorrect. Correct the spelling of the column names to 'Hypertension' and 'Handicap' respectively.\n- Change the string values of columns 'ScheduledDay' and 'AppointmentDay' to datetime object values. Also need to check that 'AppointmentDay' should either fall after 'ScheduledDay' or on the same day as 'ScheduledDay'. There should be no entries of 'AppointmentDay' which are prior to the 'ScheduledDay'. If there are any such entries, delete them.\n- From the descriptive summary table it appears that the columns 'Scholarship', 'Hipertension', 'Diabetes', 'Alcoholism', 'SMS_received' have only two values as 0 (min) and 1 (max).\n- It appears that column 'Handcap' has multiple values between values 0 (min) and 4 (max). Now there are two approaches to follow here.\n    - Approach 1 - These values need to be set to True and False only i.e. 1 for True (for all non-zero values) and 0 for False.\n    - Approach 2 - These values can mean 0 for False, and 1 or 2 or 3 or 4 for True, where 1, 2, 3, and 4 could be 4 different kinds of handicaps.\n    - I have followed the first approach wherein values are set to True or False only i.e. 1 for True (for all non-zero values) and 0 for False.\n    - Neither the first nor the second approach can be assumed to be right. This can only be decided by the data provider.\n- Column 'Age' has a minimum value of -1 which is not possible and hence needs to be corrected for e.g. we can replace the negative value with the mean age value.\n- Column values for 'No-show' should be changed from strings to integer which will work data analysis much easier. Hence, the values 'Yes' and 'No' should be changed to 1 and 0 respectively.\n- Column names need to be uniform. Hence change column names to lower case characters and replace hyphens with underscores to be able to reference using df.column_name function.","3fa301a5":"#### Check to see if there are any entries of 'AppointmentDay' which are prior to the 'ScheduledDay'.","576396ca":"#### Verify that the columns 'Scholarship', 'Hipertension', 'Diabetes', 'Alcoholism', 'SMS_received' have only two values 0 and 1.","deaeb7c2":"- Question 2 - How does enrolment in scholarship program or otherwise affect the no show and show up rates?\n> ##### Answer 2: - Contrary to what is expected, patients with scholarship have higher proportions of no show than show up and patients without scholarship have a slightly higher proportion of show up than no show. Scholarship program doesn't seem to be effective in encouraging patients to show up for their medical appointments.","c7410cf8":"#### Observation: 90% of all the total entries are without scholarship and only 10% of them are having scholarship.\n- In light of this fact, we cannot be comparing trends for patients with and without scholarship against each other. This is because the proportion of entries without scholarship is much higher for both the categories as compared to proportion with scholarship.\n- However, it would be interesting and sensible to view trends among scholarship and no scholarship groups for the categories namely no show and show up (masks have been created above).","11e4f36f":"#### Data Dictionary\n- PatientId - Key for the identification of a patient.\n- AppointmentID - Key for identification of an appointment.\n- Gender - Male or Female.\n- ScheduledDay - The day someone called or registered an appointment, this is before appointment of course.\n- AppointmentDay - The day of the actual appointment, when they have to visit the doctor.\n- Age - Patient's age.\n- Neighbourhood - Where the appointment takes place. \n- Scholarship - Ture of False . Observation, this is a broad topic, consider reading [this](https:\/\/en.wikipedia.org\/wiki\/Bolsa_Fam%C3%ADlia) article.  \n- Hipertension - True or False. \n- Diabetes - True or False. \n- Alcoholism - True or False. \n- Handcap - True or False. \n- SMS_received = 1 or more messages sent to the patient. \n- No-show - True or False where True means that the patient did not show up for the appointment and False means that the patient did show up for the appointment.","ce23eda6":"#### Now we can drop the rows for which 'Days_To_Wait' value is negative.","4e2990ef":"#### Change column names to lower case with underscores to follow uniformity.","f757e7e2":"- Question 7 - Does sending sms messages for upcoming medical appointments to patients affect the no show and show up rates?\n> ##### Answer 7: - Contrary to what's expected, patients receiving sms message have higher proportions of no show than show up whereas patients not receiving sms message have higher proportion of show up than no show. Hence, sending sms messages is not that big a factor in decreasing the count of no show.","d5fea2fa":"- Question 3 - How do patients with and without hypertension fare in terms of no show and show up rates?\n> ##### Answer 3: - Patients with hypertension have higher proportions of show up than no show whereas patients without hypertension have a slightly higher proportion of no shows than show ups. Patients with hypertension are more inclined to show up for their medical appointments.","055c7285":"- Question 9 - What are the neighbourhood associated with the highest no shows?\n> ##### Answer 9: The top 10 no show neighbourhoods (with no show counts) are as mentioned below:\n> 1. JARDIM CAMBURI       1465\n> 2. MARIA ORTIZ          1219\n> 3. ITARAR\u00c9               923\n> 4. RESIST\u00caNCIA           905\n> 5. CENTRO                703\n> 6. JESUS DE NAZARETH     696\n> 7. JARDIM DA PENHA       631\n> 8. CARATO\u00cdRA             591\n> 9. TABUAZEIRO            572\n> 10. BONFIM                550","c0095f8e":"#### Creating masks for sms received and sms not received to classify data into the 2 categories with same names.","cd5503a8":"#### Observation: Approximately 97% of all the total entries are without alcoholism and only 3% of them are with alcoholism.\n- In light of this fact, we cannot be comparing trends for patients with and without alcoholism against each other. This is because the proportion of entries without alcoholism is much higher for both the categories as compared to proportion with alcoholism.\n- However, it would be interesting and sensible to view trends among alcoholism and no alcoholism groups for the categories namely no show and show up (masks have been created above).","e9b003f7":"#### Let's try and find top 10 no show neighbourhoods from the given data.","e45961ca":"#### Investigating data type for 'Days_To_Wait' column","4377219a":"# Project: Data Analysis for No-shows in medical appointments\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","75793c4f":"#### Correct the negative age value\nUpdating all the negative values in the 'Age' column with mean age value.","6bb5eb4a":"#### Change the 'Yes' and 'No' values for 'No-show' column to 1 and 0 respectively.","6869ea86":"### Data Cleaning","bf9f9e32":"- Question 4 - How do patients with and without diabetes fare in terms of no show and show up rates?\n> ##### Answer 4: - Patients with diabetes have higher proportions of show up than no show whereas patients without diabetes have a slightly higher proportion of no show than show up. Patients with diabetes are more inclined to show up for their medical appointments.","d3495f2e":"#### Creating masks for diabetes and no_diabetes to classify data into the 2 categories with same names.","3c0c69c2":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n> After cleaning the data, we're ready to move on to exploration. We will try to answer each of the research questions posed in the 'Introduction' from above.","f06f714b":"- Question 5 - How do patients with and without alcoholism fare in terms of no show and show up rates?\n> ##### Answer 5: - Patients with alcoholism have almost similar proportion of no show and show up. Patients without alcoholism also have almost similar proportion of no show and show up. We cannot conclude anything with certainity based on this data related to alcoholism.","3ec2facc":"#### Observation: 65 % of all the total data comes from females and 35% from males. It is clear that females account for more than 50% of all the medical appointments.\n- In light of this fact, we cannot be comparing trends for females and males against each other. This is because the proportion of females is much higher for both the categories as compared to proportion of males.\n- However, it would be interesting and sensible to view trends among each of the genders (females and males) for the categories namely no show and show up (masks have been created above).","b244efd1":"#### Observation: Approximately 68% of the patients do not receive sms message prior to appointment and 32% of them do receive sms message prior to appointment.\n- In light of this fact, we cannot be comparing trends for entries with and without 'sms_received' against each other. This is because the proportion of entries for sms_not_received is much higher for both the categories as compared to proportion with sms_received.\n- However, it would be interesting and sensible to view trends among sms_received and sms_not_received groups for the categories namely no show and show up (masks have been created above).","f75bcc28":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n> In this section of the report, we will load in the data, check for cleanliness, and then trim and clean our dataset for analysis.\n\n### General Properties","b776f0e7":"#### Let us now find what is the proportion of females for categories 'no_show' and 'show_up' for which masks have been created above. Also, let's compare that with the proportion of males for categories 'no_show' and 'show_up'.","d649546b":"#### Creating masks for scholarship and no_scholarship to classify data into the 2 categories with same names.","ee17f316":"#### Observe that the data type of No-show column is showing as object i.e. string. This is because we are adding integer values to a column whose data type is string and hence the integer values get converted to string as well.","b224fa12":"#### Observation: Approximately 69% of appointments have been booked less than 10 days prior where 10 is the approximate mean value of days_to_wait.  And 32% appointments have been booked prior to days greater than 10.\n- It would be interesting to view trends among days_to_wait_below_mean and days_to_wait_above_mean groups for the categories namely no show and show up (masks have been created above).","748e8f8b":"### Questions\n\nFrom a quick review of the descriptive summary of data from the table above, we can ask the following questions:\n- Question 1 - How do both females and males fare in terms of no show and show up rates?\n- Question 2 - How does enrolment in scholarship program or otherwise affect the no show and show up rates?\n- Question 3 - How do patients with and without hypertension fare in terms of no show and show up rates?\n- Question 4 - How do patients with and without diabetes fare in terms of no show and show up rates?\n- Question 5 - How do patients with and without alcoholism fare in terms of no show and show up rates?\n- Question 6 - How do patients with and without handicap fare in terms of no show and show up rates?\n- Question 7 - Does sending sms messages for upcoming medical appointments to patients affect the no show and show up rates?\n- Question 8 - How does waiting time for an appointment (i.e. difference between the days of 'AppointmentDay' and 'ScheduledDay') affect no show and show up rates?\n- Question 9 - What are the neighbourhood associated with the highest no shows?","26365445":"#### Observation: 20 % of all the medical appointments result in no show.","d42c235c":"- Question 1 - How do both females and males fare in terms of no show and show up rates?\n> ##### Answer 1: Females not showing up for appointments are a slight bit higher than those showing up for appointments whereas males showing up for appointments are a slight bit higher than those not showing up for appointments.","c036a1ce":"#### Changing 'Days_To_Wait' column values to integer values.","e8b1a0ff":"#### We find that 'ScheduledDay' column values also contains time in addition to date information, while 'AppointmentDay' column only contains date information. Hence we need to normalize this.","d233c5d3":"#### Creating masks for alcoholism and no_alcoholism to classify data into the 2 categories with same names.","42992d95":"#### Observation: Approximately 98% of all the total entries are without handicap and only 2% of them are with handicap.\n- In light of this fact, we cannot be comparing trends for patients with and without handicap against each other. This is because the proportion of entries without handicap is much higher for both the categories as compared to proportion with handicap.\n- However, it would be interesting and sensible to view trends among handicap and no handicap groups for the categories namely no show and show up (masks have been created above).","f0dfb717":"#### Observation: 92% of all the total entries are without diabetes and only 7% of them are having diabetes.\n- In light of this fact, we cannot be comparing trends for pateients with and without diabetes against each other. This is because the proportion of entries without diabetes is much higher for both the categories as compared to proportion with diabetes.\n- However, it would be interesting and sensible to view trends among diabetes and no diabetes groups for the categories namely no show and show up (masks have been created above).","ce6b3f00":"#### Creating masks for hypertension and no_hypertension to classify data into the 2 categories with same names.","56cddba1":"#### Change the string values of columns 'ScheduledDay' and 'AppointmentDay' to datetime object values.","af373af1":"- Question 8 - How does waiting time for an appointment (i.e. difference between the days of 'AppointmentDay' and 'ScheduledDay') affect no show and show up rates?\n> ##### Answer 8: - Patients having less than 10 days waiting for their medical appointment have higher proportions of show up than no show whereas patients having more than 10 days waiting have higher proportions of no show than show up. Hence, patient who have less than 10 days waiting for a medical appointment are more likely to show up.","84cda424":"- Question 6 - How do patients with and without handicap fare in terms of no show and show up rates?\n> ##### Answer 6: - Patients with handicap have higher proportions of show up than no show whereas patients without handicap have a slightly higher proportion of no show than show up. Patients with handicap are more inclined to show up for their medical appointments.","37704cf9":"#### Creating masks for no_show and appointment_completed to classify data into the 2 categories with same names.","22ee0c25":"<a id='intro'><\/a>\n## Introduction\n\nWe will be doing exploratory data analysis on the medical appointment dataset by the name \"No-show appointments\". This dataset collects information from 100k medical appointments in Brazil and provides data on patients not showing up and also those showing up for their respective medical appointments. Our task will be to find certain trends or pattern, if any, which would help us determine as to what are the charectersitcs which are affecting no shows in medical appointments.","46fa9da5":"#### Creating masks for handicap and no_handicap to classify data into the 2 categories with same names.","f34fac74":"#### Dropping the columns 'PatientId' and 'AppointmentID'\nPatientId and AppointmentID variables will not have any impact on the patient making an appointment or not and hence those columns can be dropped safely.","42cd4af5":"<a id='conclusions'><\/a>\n## Conclusions\n\n##### After concluding the analysis of the given data set, we arrive at the following conclusions about the questions posed in 'Introduction' section above.\n\n> - Contrary to what is expected, patients with scholarship have higher proportions of no show than show up and patients without scholarship have a slightly higher proportion of show up than no show. Scholarship program doesn't seem to be effective in encouraging patients to show up for their medical appointments.\n> - Patients with either of the conditions namely hypertension or diabetes or handicap have higher proportions of show up than no show as compared to patients without these conditions. This is an indication of increased awareness and proactiveness in the society about the treatment for these medical conditons.\n> - Contrary to what's expected, patients receiving sms message have higher proportions of no show than show up whereas patients not receiving sms message have higher proportion of show up than no show. Hence, sending sms messages is not that big a factor in decreasing the count of no show.\n> - Patients having less than 10 days waiting for their medical appointment have higher proportions of show up than no show whereas patients having more than 10 days waiting have higher proportions of no show than show up. Hence, patient who have less than 10 days waiting for a medical appointment are more likely to show up.\n\nLimitations: The above analysis was my individual view on how to handle this medical data. There could be different approaches to the analysis if the research is focussed on different relationship between the variables. For example, we could be interested in knowing gender specific results for particular age groups which have not been covered in this particular analysis. Another example is the way in which handicap data has been handled in this analysis.  Here the 'Handcap' colulmn had multiple values between values 0 (min) and 4 (max). Now there were two approaches to follow here.\n    - Approach 1 - These values need to be set to True and False only i.e. 1 for True (for all non-zero values) and 0 for False.\n    - Approach 2 - These values can mean 0 for False, and 1 or 2 or 3 or 4 for True, where 1, 2, 3, and 4 could be 4 different kinds of handicaps.\n    - I have followed the first approach wherein values are set to True or False only i.e. 1 for True (for all non-zero values) and 0 for False.\n    - Neither the first nor the second approach can be assumed to be right. This can only be decided by the data provider.\n\nHence this analysis, although highlighting some signficant relationships cannot be considered the complete analysis of this dataset."}}