{"cell_type":{"263cc47c":"code","e22bf7a9":"code","a247f73b":"code","0072643f":"code","528876ac":"markdown"},"source":{"263cc47c":"import keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nimport numpy as np","e22bf7a9":"batch_size = 128\nnum_classes = 10\nepochs = 12\n\n# input image dimensions (28,28)\nimg_rows, img_cols = 28, 28\n\n# split between train and test sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nx_train = x_train.reshape(60000,28,28,1)\nx_test = x_test.reshape(10000,28,28,1)\n\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train data sample')\nprint(x_test.shape[0], 'test data samples')\n\n# converting class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)","a247f73b":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(28,28,1)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.30))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.55))\nmodel.add(Dense(num_classes, activation='softmax'))","0072643f":"model.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=2,\n          validation_data=(x_test, y_test))\nscore = model.evaluate(x_test, y_test, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","528876ac":"# The End"}}