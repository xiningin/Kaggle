{"cell_type":{"a1998ff0":"code","8440f759":"code","b749fb7f":"code","ebd25937":"code","65ae6e30":"code","01388c6c":"code","172419a1":"code","1e569a58":"code","3d1f3bf2":"code","6a7f1c87":"code","168907bf":"code","78131eb8":"code","ec74b8ca":"code","d18dc5fb":"code","7082325a":"code","252a1bd2":"code","5370ab47":"code","82e5838c":"code","23da4fb8":"code","820424db":"code","9e327a65":"code","584961fd":"code","da237213":"code","acbaed49":"code","1e42b85f":"code","e172cd0e":"code","589f40ed":"code","6761409b":"code","ece27533":"code","7d0813be":"code","3976da28":"code","89755489":"code","34a5eef4":"code","6c6d9b39":"code","ef15a994":"code","c502c7ca":"code","652ac2f0":"code","c349d098":"code","17479ba1":"code","cfef4eba":"code","b05d5903":"code","88ac1bb1":"code","e808df98":"code","c286aa30":"code","8ca2ecac":"code","268ee581":"code","7eb8ecd9":"code","40eaa79b":"code","6463da0d":"code","d300cc48":"code","6f9cc992":"code","4ebe00c5":"code","54007a5a":"code","0e727542":"code","8bcfa1af":"code","0d1c4426":"code","cdfb9a84":"code","c88eae22":"code","a1740ccc":"markdown","d324b68d":"markdown","cd96ebaf":"markdown","7b889716":"markdown","fd549a7a":"markdown","621c1584":"markdown","3a2ea1a4":"markdown","e48369b3":"markdown","3c2106d1":"markdown","9903fa6c":"markdown","59e1abe9":"markdown","8309dbc8":"markdown","29074d11":"markdown","7421011f":"markdown","ba3b4fa0":"markdown","ccb68877":"markdown","8ed92d87":"markdown","589454b3":"markdown","3e7df42a":"markdown","6170f025":"markdown","8417fe9e":"markdown","120aa215":"markdown","03c3f219":"markdown","e945a63f":"markdown","e6d65f12":"markdown","ca4f98f6":"markdown","80515828":"markdown"},"source":{"a1998ff0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nimport matplotlib as p\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.graph_objs as gobj\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\n\nimport plotly.express as px       \nimport plotly.offline as py       \nimport plotly.graph_objects as go \nfrom plotly.subplots import make_subplots","8440f759":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n    df = reduce_mem_usage(df)\n    return df","b749fb7f":"# To use for Mem Reduction: Limit issue possible when trying to groupby values\n#pd.set_option('display.max_columns', 200)\n#situation_report = import_data('\/kaggle\/input\/uncover\/UNCOVER\/WHO\/who-situation-reports-covid-19.csv')\n#situation_report.head()","ebd25937":"situation_report = pd.read_csv('\/kaggle\/input\/uncover\/UNCOVER\/WHO\/who-situation-reports-covid-19.csv')\nsituation_report.dtypes","65ae6e30":"situation_report['date'] = situation_report['reported_date'].astype('datetime64[ns]')\nsituation_report['month'] = situation_report['date'].dt.month\nsituation_report.head()","01388c6c":"situation_report['confirmed_cases'] = situation_report['confirmed_cases'].str.replace(' ', '')\nsituation_report.confirmed_cases = situation_report.confirmed_cases.astype(float)\nsituation_report.dtypes","172419a1":"confirmed_by_country = situation_report.groupby('reporting_country_territory')['confirmed_cases'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ngrouped_by_country_nonzero = confirmed_by_country[confirmed_by_country['sum'] != 0]\nplt.figure(figsize=(20,40))\nplt.barh('reporting_country_territory', 'sum', data=grouped_by_country_nonzero)\nplt.xlabel(\"confirmed_cases\", size=15)\nplt.ylabel(\"reporting_country_territory\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"Total Confirmed Cases by Country\", size=18)","1e569a58":"jan = situation_report[situation_report['month'] == 1]\njan_grouped = jan.groupby('reported_date')['confirmed_cases'].sum().to_frame(name = 'sum')\njan_grouped = jan_grouped[jan_grouped['sum'] != 0].reset_index()\njan_grouped","3d1f3bf2":"feb = situation_report[(situation_report['month'] == 2)]\nfeb_grouped = feb.groupby('reported_date')['confirmed_cases'].sum().to_frame(name = 'sum')\nfeb_grouped = feb_grouped[feb_grouped['sum'] != 0].reset_index()\nfeb_grouped","6a7f1c87":"mar = situation_report[(situation_report['month'] == 3)]\nmar_grouped = mar.groupby('reported_date')['confirmed_cases'].sum().to_frame(name = 'sum')\nmar_grouped = mar_grouped[mar_grouped['sum'] != 0].reset_index()\nmar_grouped","168907bf":"apr = situation_report[(situation_report['month'] == 4)]\napr_grouped = apr.groupby('reported_date')['confirmed_cases'].sum().to_frame(name = 'sum')\napr_grouped = apr_grouped[apr_grouped['sum'] != 0].reset_index()\napr_grouped['log'] = np.log(apr_grouped['sum'])\napr_grouped","78131eb8":"plt.figure(figsize=(15,8))\nax = sns.lineplot(x=\"reported_date\", y=\"sum\", data=jan_grouped, linewidth = 3)\nplt.xlabel(\"reported_date\", size=14)\nplt.ylabel(\"sum\", size=14)\nplt.tick_params(axis='x', labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title('January - confirmed cases', size = 14)\nplt.show()","ec74b8ca":"plt.figure(figsize=(15,8))\nax = sns.lineplot(x=\"reported_date\", y=\"sum\", data=feb_grouped, c = 'yellow', linewidth = 3)\nplt.xlabel(\"reported_date\", size=14)\nplt.ylabel(\"sum\", size=14)\nplt.tick_params(axis='x', rotation = 45,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title('February - confirmed cases', size = 14)\nplt.show()","d18dc5fb":"plt.figure(figsize=(15,8))\nax = sns.lineplot(x=\"reported_date\", y=\"sum\", data=mar_grouped, c = 'red', linewidth = 3)\nplt.xlabel(\"reported_date\", size=14)\nplt.ylabel(\"sum\", size=14)\nplt.tick_params(axis='x', rotation = 45,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title('March - confirmed cases', size = 14)\nplt.show()","7082325a":"plt.figure(figsize=(15,8))\n# datelist = ['2020-04-01', '2020-04-02', '2020-04-03', '2020-04-04', '2020-04-05']\nax = sns.lineplot(x= 'reported_date', y= 'log', data=apr_grouped.sort_values('reported_date'), c = 'green', linewidth = 3)\nplt.xlabel(\"reported_date\", size=14)\nplt.ylabel(\"sum\", size=14)\nplt.tick_params(axis='x', rotation = 45,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title('April - confirmed cases', size = 14)\nplt.show()","252a1bd2":"situation_report['new_confirmed_cases'] = situation_report['new_confirmed_cases'].fillna(0)\ndf = situation_report[(situation_report['confirmed_cases'] ==0) & (situation_report['new_confirmed_cases'] != 0)]\ndf","5370ab47":"situation_report['new_confirmed_cases'] = situation_report['new_confirmed_cases'].fillna(0)\nnew_confirmed_by_country = situation_report.groupby('reporting_country_territory')['new_confirmed_cases'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ngrouped_by_country_nonzero = new_confirmed_by_country[new_confirmed_by_country['sum'] != 0]\nplt.figure(figsize=(20,40))\nplt.barh('reporting_country_territory', 'sum', data=grouped_by_country_nonzero)\nplt.xlabel(\"new_confirmed_cases\", size=15)\nplt.ylabel(\"reporting_country_territory\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"Total New Confirmed Cases by Country\", size=18)","82e5838c":"new_confirmed_by_date = situation_report.groupby('reported_date')['new_confirmed_cases'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ngrouped_by_date_nonzero = new_confirmed_by_date[new_confirmed_by_date['sum'] != 0]\nplt.figure(figsize=(20,40))\nplt.barh('reported_date', 'sum', data=grouped_by_date_nonzero)\nplt.xlabel(\"new_confirmed_cases\", size=15)\nplt.ylabel(\"reported_date\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"Total New Confirmed Cases by Reported Date\", size=18)","23da4fb8":"situation_report[['total_deaths', 'new_total_deaths']] = situation_report[['total_deaths', 'new_total_deaths']].fillna(0)\ntotal_deaths_by_country = situation_report.groupby('reporting_country_territory')['total_deaths'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ngrouped_by_country_nonzero = total_deaths_by_country[total_deaths_by_country['sum'] != 0]\nplt.figure(figsize=(20,40))\nplt.barh('reporting_country_territory', 'sum', data=grouped_by_country_nonzero)\nplt.xlabel(\"total_deaths\", size=15)\nplt.ylabel(\"reporting_country_territory\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"Total Deaths by Country\", size=18)","820424db":"data = dict(type = 'choropleth',\n            locations = grouped_by_country_nonzero['reporting_country_territory'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= grouped_by_country_nonzero['reporting_country_territory'],\n            z= grouped_by_country_nonzero['sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Total Deaths by Country','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","9e327a65":"py.init_notebook_mode(connected=True)\n\n#GroupingBy the dataset for the map\nformated_gdf = situation_report.groupby(['reported_date', 'reporting_country_territory']).sum()['total_deaths'].to_frame(name = 'sum').reset_index()\nformated_gdf['sum'] = formated_gdf['sum'].fillna(0)\nformated_gdf['reported_date'] = pd.to_datetime(formated_gdf['reported_date'])\nformated_gdf['reported_date'] = formated_gdf['reported_date'].dt.strftime('%m\/%d\/%Y')\n\nformated_gdf['log_confirmedCases'] = np.log(formated_gdf['sum'] + 2)\n\n#Plotting the figure\nfig = px.choropleth(formated_gdf, locations=\"reporting_country_territory\", locationmode='country names', \n                     color=\"log_confirmedCases\", hover_name=\"reporting_country_territory\",projection=\"mercator\",\n                     animation_frame=\"reported_date\",width=1000, height=800,\n                     color_continuous_scale=px.colors.sequential.Viridis,\n                     title='Total Deaths by Country')\n\n#Showing the figure\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","584961fd":"next_list = ['United Kingdom', 'Netherlands', 'Germany', 'Belgium', 'Republic of Korea', 'Switzerland']\nnext_in_line = situation_report[situation_report['reporting_country_territory'].isin(next_list)]\nnext_in_line = next_in_line[next_in_line['total_deaths'] != 0]","da237213":"uk = next_in_line[next_in_line['reporting_country_territory'] == next_list[0]].sort_values('reported_date')\nned = next_in_line[next_in_line['reporting_country_territory'] == next_list[1]].sort_values('reported_date')\nger = next_in_line[next_in_line['reporting_country_territory'] == next_list[2]].sort_values('reported_date')\nbel = next_in_line[next_in_line['reporting_country_territory'] == next_list[3]].sort_values('reported_date')\nkorea = next_in_line[next_in_line['reporting_country_territory'] == next_list[4]].sort_values('reported_date')\nswit = next_in_line[next_in_line['reporting_country_territory'] == next_list[5]].sort_values('reported_date')","acbaed49":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=uk, c='blue')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('United Kingdom', 'Netherlands', 'Germany', 'Belgium', 'Republic of Korea', 'Switzerland'))\nplt.show()","1e42b85f":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=ned, c='red')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \n#plt.title('Netherlands')\nplt.legend(('Netherlands', 'United Kingdom','Germany', 'Belgium', 'Republic of Korea', 'Switzerland'))\nplt.show()","e172cd0e":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=ger, c='green')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \n#plt.title('Germany')\nplt.legend(('Germany','Netherlands', 'United Kingdom', 'Belgium', 'Republic of Korea', 'Switzerland'))\nplt.show()","589f40ed":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=bel, c='purple')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \n#plt.title('Belgium')\nplt.legend(('Belgium','Netherlands', 'United Kingdom','Germany',  'Republic of Korea', 'Switzerland'))\nplt.show()","6761409b":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=korea, c='orange')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \n#plt.title('Republic of Korea')\nplt.legend(('Republic of Korea', 'Netherlands', 'United Kingdom','Germany', 'Belgium', 'Switzerland'))\nplt.show()","ece27533":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=swit, c='brown')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \n#plt.title('Switzerland')\nplt.legend(('Switzerland','Belgium','Netherlands', 'United Kingdom','Germany',  'Republic of Korea'))\nplt.show()","7d0813be":"next_list = ['Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Portugal', 'Japan']\nnext_in_line = situation_report[situation_report['reporting_country_territory'].isin(next_list)]\nnext_in_line = next_in_line[next_in_line['total_deaths'] != 0]","3976da28":"turk = next_in_line[next_in_line['reporting_country_territory'] == next_list[0]].sort_values('reported_date')\nbraz = next_in_line[next_in_line['reporting_country_territory'] == next_list[1]].sort_values('reported_date')\nswed = next_in_line[next_in_line['reporting_country_territory'] == next_list[2]].sort_values('reported_date')\nindo = next_in_line[next_in_line['reporting_country_territory'] == next_list[3]].sort_values('reported_date')\nport = next_in_line[next_in_line['reporting_country_territory'] == next_list[4]].sort_values('reported_date')\njapn = next_in_line[next_in_line['reporting_country_territory'] == next_list[5]].sort_values('reported_date')","89755489":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=turk, c='blue')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Portugal', 'Japan'))\nplt.show()","34a5eef4":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=braz, c='red')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Brazil', 'Turkey', 'Sweden', 'Indonesia', 'Portugal', 'Japan'))\nplt.show()","6c6d9b39":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=swed, c='green')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Sweden','Turkey', 'Brazil',  'Indonesia', 'Portugal', 'Japan'))\nplt.show()","ef15a994":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=indo, c='purple')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Indonesia', 'Turkey', 'Brazil', 'Sweden', 'Portugal', 'Japan'))\nplt.show()","c502c7ca":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=port, c='orange')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Portugal', 'Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Japan'))\nplt.show()","652ac2f0":"plt.figure(figsize=(25,8))\nplt.plot('reported_date','total_deaths', data=japn, c='brown')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Japan', 'Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Portugal'))\nplt.show()","c349d098":"situation_report[['total_deaths', 'new_total_deaths']] = situation_report[['total_deaths', 'new_total_deaths']].fillna(0)\nnew_total_deaths_by_country = situation_report.groupby('reporting_country_territory')['new_total_deaths'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\nnew_grouped_by_country_nonzero = new_total_deaths_by_country[new_total_deaths_by_country['sum'] != 0]\nplt.figure(figsize=(20,40))\nplt.barh('reporting_country_territory', 'sum', data=new_grouped_by_country_nonzero)\nplt.xlabel(\"new_total_deaths\", size=15)\nplt.ylabel(\"reporting_country_territory\", size=15)\nplt.tick_params(axis='x', rotation = 90, labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.title(\"New Total Deaths by Country\", size=18)","17479ba1":"data = dict(type = 'choropleth',\n            locations = new_grouped_by_country_nonzero['reporting_country_territory'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= new_grouped_by_country_nonzero['reporting_country_territory'],\n            z= new_grouped_by_country_nonzero['sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'New Total Deaths by Country','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","cfef4eba":"py.init_notebook_mode(connected=True)\n\n#GroupingBy the dataset for the map\nformated_gdf = situation_report.groupby(['reported_date', 'reporting_country_territory']).sum()['new_total_deaths'].to_frame(name = 'sum').reset_index()\nformated_gdf['sum'] = formated_gdf['sum'].fillna(0)\nformated_gdf['reported_date'] = pd.to_datetime(formated_gdf['reported_date'])\nformated_gdf['reported_date'] = formated_gdf['reported_date'].dt.strftime('%m\/%d\/%Y')\n\nformated_gdf['log_confirmedCases'] = np.log(formated_gdf['sum'] + 2)\n\n#Plotting the figure\nfig = px.choropleth(formated_gdf, locations=\"reporting_country_territory\", locationmode='country names', \n                     color=\"log_confirmedCases\", hover_name=\"reporting_country_territory\",projection=\"mercator\",\n                     animation_frame=\"reported_date\",width=1000, height=800,\n                     color_continuous_scale=px.colors.sequential.Viridis,\n                     title='New Total Deaths by Country')\n\n#Showing the figure\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","b05d5903":"new_grouped_by_country_nonzero = new_grouped_by_country_nonzero.sort_values('sum', ascending = False)\ntop7_newdeaths_list = new_grouped_by_country_nonzero.nlargest(7, ['sum']).reporting_country_territory.to_list()\ntop7_newdeaths = situation_report[situation_report['reporting_country_territory'].isin(top7_newdeaths_list)]\ntop7_newdeaths_list","88ac1bb1":"italy = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[0]].sort_values('reported_date')\nspain = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[1]].sort_values('reported_date')\nusa = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[2]].sort_values('reported_date')\nfrance = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[3]].sort_values('reported_date')\niran = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[4]].sort_values('reported_date')\nchina = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[5]].sort_values('reported_date')\nuk = top7_newdeaths[top7_newdeaths['reporting_country_territory'] == top7_newdeaths_list[6]].sort_values('reported_date')","e808df98":"# Grouping if multiple entries occuring for single date\nitaly = italy.groupby('reported_date').sum()['new_total_deaths'].to_frame(name = 'sum')\nitaly = italy.sort_values('reported_date').reset_index()\nplt.figure(figsize=(25,8))\nplt.plot('reported_date','sum', data=italy, c='blue')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Italy', ''))\nplt.show()","c286aa30":"spain = spain.groupby('reported_date').sum()['new_total_deaths'].to_frame(name = 'sum')\nspain = spain.sort_values('reported_date').reset_index()\nplt.figure(figsize=(25,8))\nplt.plot('reported_date','sum', data=spain, c='red')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Spain', ''))\nplt.show()","8ca2ecac":"usa = usa.groupby('reported_date').sum()['new_total_deaths'].to_frame(name = 'sum')\nusa = usa.sort_values('reported_date').reset_index()\nplt.figure(figsize=(25,8))\nplt.plot('reported_date','sum', data=usa, c='green')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('USA', ''))\nplt.show()","268ee581":"iran = iran.groupby('reported_date').sum()['new_total_deaths'].to_frame(name = 'sum')\niran = iran.sort_values('reported_date').reset_index()\nplt.figure(figsize=(25,8))\nplt.plot('reported_date','sum', data=iran, c='purple')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('Iran', ''))\nplt.show()","7eb8ecd9":"china = china.groupby('reported_date').sum()['new_total_deaths'].to_frame(name = 'sum')\nchina = china.sort_values('reported_date').reset_index()\nplt.figure(figsize=(25,8))\nplt.plot('reported_date','sum', data=china, c='orange')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('China', ''))\nplt.show()","40eaa79b":"uk = uk.groupby('reported_date').sum()['new_total_deaths'].to_frame(name = 'sum')\nuk = uk.sort_values('reported_date').reset_index()\nplt.figure(figsize=(25,8))\nplt.plot('reported_date','sum', data=uk, c='brown')\nplt.tick_params(axis='x', rotation = 90,  labelsize = 12)\nplt.tick_params(axis='y', labelsize = 12) \nplt.legend(('UK', ''))\nplt.show()","6463da0d":"situation_report.transmission_classification = situation_report.transmission_classification.replace({'Local transmission': 'Local Transmission'})\nsituation_report.transmission_classification = situation_report.transmission_classification.fillna('Unknown')","d300cc48":"sns.catplot('transmission_classification', data= situation_report, kind='count', alpha=0.7, height=4, aspect= 3)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# Max value to be set\ny_max = situation_report.transmission_classification.value_counts().max() \n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/5., p.get_height(),'%d' % int(p.get_height()),\n            fontsize=13, color='blue', ha='center', va='bottom')\nplt.title('Frequency plot of Transmission Types', fontsize = 20, color = 'black')\nplt.show()","6f9cc992":"deathgrouped_by_transmission = situation_report.groupby('transmission_classification').sum()['total_deaths'].to_frame(name = 'sum')\ndeathgrouped_by_transmission = deathgrouped_by_transmission.sort_values('sum', ascending = False).reset_index()\ndeathgrouped_by_transmission","4ebe00c5":"# Places where the 11 deaths occurred are Under investigation\ndf = situation_report[(situation_report['transmission_classification'] == 'Under investigation') & (situation_report['total_deaths'] != 0) ]\ndf","54007a5a":"df_ico = situation_report[(situation_report['transmission_classification'] == 'Imported cases only') & (situation_report['total_deaths'] != 0) ]\ndf_ico.head()","0e727542":"df_ico_by_country = df_ico.groupby('reporting_country_territory')['total_deaths'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ndata = dict(type = 'choropleth',\n            locations = df_ico_by_country['reporting_country_territory'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= df_ico_by_country['reporting_country_territory'],\n            z= df_ico_by_country['sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Total Deaths by Country\/Territory for Imported Cases only','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","8bcfa1af":"df_unknown = situation_report[(situation_report['transmission_classification'] == 'Unknown') & (situation_report['total_deaths'] != 0) ]\ndf_unknown.head()","0d1c4426":"df_unknown_by_country = df_unknown.groupby('reporting_country_territory')['total_deaths'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ndata = dict(type = 'choropleth',\n            locations = df_unknown_by_country['reporting_country_territory'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= df_unknown_by_country['reporting_country_territory'],\n            z= df_unknown_by_country['sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Total Deaths by Country\/Territory for Unknown','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","cdfb9a84":"df_lt = situation_report[(situation_report['transmission_classification'] == 'Local Transmission') & (situation_report['total_deaths'] != 0) ]\ndf_lt.head()","c88eae22":"df_lt_by_country = df_lt.groupby('reporting_country_territory')['total_deaths'].sum().sort_values(ascending=True).to_frame(name = 'sum').reset_index()\ndata = dict(type = 'choropleth',\n            locations = df_lt_by_country['reporting_country_territory'],\n            locationmode = 'country names',\n            autocolorscale = False,\n            colorscale = 'Rainbow',\n            text= df_lt_by_country['reporting_country_territory'],\n            z= df_lt_by_country['sum'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':'Total Deaths by Country\/Territory for Unknown','len':0.25,'lenmode':'fraction'})\nlayout = dict(geo = dict(scope='world'), width = 1500, height = 1000)\n\nworldmap = gobj.Figure(data = [data],layout = layout)\niplot(worldmap)","a1740ccc":"## 6.3 Total Deaths for Local Transmission <a class=\"anchor\" id=\"6.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","d324b68d":"## 6.1 Total Deaths for Imported Cases only <a class=\"anchor\" id=\"6.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","cd96ebaf":"## 3.2 New Confirmed Case by Date <a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","7b889716":"### Dropping countries with 0 confirmed cases","fd549a7a":"## 6 Analyzing Transmission <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","621c1584":"## 6.2 Total Deaths for Unknown Transmission Classification <a class=\"anchor\" id=\"6.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","3a2ea1a4":"## 5 Analyzing New Total Deaths <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","e48369b3":"### Removing space in confirmed_cases column and changing it to numeric type","3c2106d1":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Libraries, Mem Reduction, Reading Files](#1)\n1. [Analyzing Confirmed Cases](#2)\n    -  [2.1 Confirmed Cases by Month](#2.1)\n1. [Analyzing New Confirmed Cases](#3)\n    -  [3.1 New Confirmed Case by Country](#3.1)\n    -  [3.2 New Confirmed Case by Date](#3.2) \n1. [Analyzing Total Deaths](#4)\n    -  [4.1 'United Kingdom', 'Netherlands', 'Germany', 'Belgium', 'Republic of Korea', 'Switzerland'](#4.1)\n    -  [4.2 'Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Portugal', 'Japan'](#4.2) \n1. [Analyzing New Total Deaths](#5)\n    -  [5.1 New Total Deaths - Top 7](#5.1)\n1. [Analyzing Transmission](#6)\n    -  [6.1 Total Deaths for Imported Cases only](#6.1)\n    -  [6.2 Total Deaths for Unknown Transmission Classification](#6.2) \n    -  [6.3 Total Deaths for Local Transmission](#6.3) ","9903fa6c":"### Clear indication of the gradual rise in New Confirmed Cases with time","59e1abe9":"### Italy, Spain, USA, and UK exhibited rise in New Total Death counts\n### Iran showed a steady rise with a spike on 03\/16 and then fluctuating betwee 100-150\n### China showed high New Total Death counts in Feb and from end of Feb onwards the counts has declined gradually","8309dbc8":"## 3.1 New Confirmed Case by Country <a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","29074d11":"### Still a large number of deaths for which the Transmission Classification is Unknown (NA in the dataset)","7421011f":"## 4.1 'United Kingdom', 'Netherlands', 'Germany', 'Belgium', 'Republic of Korea', 'Switzerland' <a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","ba3b4fa0":"### We see a constant rise in the number of confirmed cases month on month","ccb68877":"### Clearly China & Italy have witnessed the highest number of Deaths followed by Spain, Iran, France, and USA","8ed92d87":"## 1. Libraries, Mem Reduction, Reading Files <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","589454b3":"## 2. Analyzing Confirmed Cases <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","3e7df42a":"## 3. Analyzing New Confirmed Case <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","6170f025":"### Excluding the drop in count and\/or missing data for 04\/03 the next list of countries - 'Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Portugal', 'Japan' - also exhibit steady rise of Total Death counts. Japan relatively has lesser rise in counts. ","8417fe9e":"## 2.1 Confirmed Cases by Month <a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","120aa215":"## 5.1 New Total Deaths - Top 7 <a class=\"anchor\" id=\"5.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","03c3f219":"### We can see China is the only entry with a list of days where New Confirmed Cases were cited against 0 corresponding Confirmed Cases","e945a63f":"# Which patient populations pass away from COVID-19?","e6d65f12":"## 4. Analyzing Total Deaths <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","ca4f98f6":"## 4.2 'Turkey', 'Brazil', 'Sweden', 'Indonesia', 'Portugal', 'Japan' <a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","80515828":"### Considering the next in line countries - 'United Kingdom', 'Netherlands', 'Germany', 'Belgium', 'Republic of Korea', 'Switzerland' - all of them have exhibited similar rise in Total Death counts. Republic of Korea shows relatively gradual growth than others.  "}}