{"cell_type":{"33573cbc":"code","159da88a":"code","40961c3f":"code","aa4ddf92":"code","77945ed9":"code","423815b2":"code","2a659827":"code","3cb4a246":"code","9abcce62":"code","537ae490":"code","a8999d76":"code","a85aff2a":"code","5e133577":"code","a7f45128":"code","6da3c495":"code","11963f25":"code","bd73ec7b":"code","0071dc65":"code","f30aa593":"code","23d020c8":"code","e91be589":"code","3e766aa5":"code","b7b90e96":"code","f4bcb846":"code","0282ed7f":"code","11619437":"code","71df4b91":"code","dadd2962":"code","85ea533e":"code","0e94c3fc":"code","360acc36":"markdown","5deae3c5":"markdown","4cba72a4":"markdown","c950f2ff":"markdown","dc7dcab4":"markdown","b1ed691f":"markdown","f63ba42b":"markdown","2737a85f":"markdown","57e3e860":"markdown","65370d2a":"markdown","5a883bf7":"markdown","68429d01":"markdown","7113acaa":"markdown","a743ae69":"markdown","8c71983e":"markdown","464cf641":"markdown"},"source":{"33573cbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","159da88a":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","40961c3f":"train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\") \ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\") ","aa4ddf92":"train.info()","77945ed9":"train.head()","423815b2":"train.columns","2a659827":"# Deaths bigger than 10.000 and ConfirmedCases higher than 100.000 \ntrain[(train['Fatalities']>10000) & (train['ConfirmedCases']>100000) ]","3cb4a246":"confirmed_value = train.ConfirmedCases.values.reshape(-1,1)\ndead_value = train.Fatalities.values.reshape(-1,1)\n\nregression = LinearRegression()\nregression.fit(confirmed_value,dead_value)\n\nprint(regression.predict([[4000000]]).reshape(-1,1))\n\nprint(regression.predict([[3511229]]).reshape(-1,1))\nplt.scatter(train.ConfirmedCases,train.Fatalities)\n\nx = np.arange(min(train.ConfirmedCases),max(train.ConfirmedCases)).reshape(-1,1)\n\nplt.plot(x,regression.predict(x),color=\"r\")\n\nplt.xlabel('Confirmed')\nplt.ylabel('Deaths')\nplt.show()","9abcce62":"print(r2_score(dead_value,regression.predict(confirmed_value)))\n# 0.80 very good accuracy i think","537ae490":"train.head()","a8999d76":"train.columns","a85aff2a":"Deaths_data = train.iloc[:,5].values.reshape(-1,1)\n\nConfirmed_data = train.iloc[:,4].values.reshape(-1,1)\n","5e133577":"Poly_regression = PolynomialFeatures(degree = 4)\n\nDeaths_data_poly = Poly_regression.fit_transform(Deaths_data)","a7f45128":"regression2 = LinearRegression() \nregression2.fit(Deaths_data_poly,Confirmed_data)","6da3c495":"plt.scatter(Deaths_data,Confirmed_data,color='red')\nplt.plot(Deaths_data,regression2.predict(Deaths_data_poly))\n\nplt.show()","11963f25":"plt.plot(Deaths_data,regression2.predict(Deaths_data_poly))\n\nplt.show()","bd73ec7b":"print(r2_score(Confirmed_data,regression2.predict(Deaths_data_poly)))","0071dc65":"Deaths_data_value = train.iloc[:,5].values.reshape(-1,1)\n\nConfirmed_data_value = train.iloc[:,4].values.reshape(-1,1)","f30aa593":"Desicion_regression = DecisionTreeRegressor()\nDesicion_regression.fit(Deaths_data_value,Confirmed_data_value)","23d020c8":"# this means\n# 1000 dead in 24551 confirmed data \nprint(Desicion_regression.predict(np.array([[1000]])))","e91be589":"plt.scatter(Deaths_data_value,Confirmed_data_value,color='red')","3e766aa5":"x = np.arange(min(Deaths_data_value),max(Deaths_data_value),0.01).reshape(-1,1)\n\nplt.scatter(Deaths_data_value,Confirmed_data_value,color='red')\nplt.plot(x,Desicion_regression.predict(x),color='blue')\nplt.xlabel('Deaths_data_value')\nplt.ylabel('Confirmed_data_value')\nplt.title('Decision tree model')\nplt.show()","b7b90e96":"plt.plot(x,Desicion_regression.predict(x),color='blue')\nplt.xlabel('Deaths_data_value')\nplt.ylabel('Confirmed_data_value')\nplt.title('Decision tree model')\nplt.show()","f4bcb846":"print(r2_score(Confirmed_data_value,Desicion_regression.predict(Deaths_data_value)))","0282ed7f":"Deaths_data_value = train.iloc[:,5].values.reshape(-1,1)\n\nConfirmed_data_value = train.iloc[:,4].values.reshape(-1,1)\n\nR_regression = RandomForestRegressor(n_estimators=10,random_state=0)\n\n\nR_regression.fit(Deaths_data_value,Confirmed_data_value)\n\nprint(R_regression.predict(np.array([[1000]])))","11619437":"print(r2_score(Confirmed_data_value,R_regression.predict(Deaths_data_value)))","71df4b91":"train.corr()","dadd2962":"# correlation map\n# train data \nf,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(train.corr(),annot=True,linewidth=10,fmt='.1f',ax=ax)\nplt.show()","85ea533e":"# line plot \n# deaths and confirmed\ntrain.Fatalities.plot(kind = 'line', color = 'r', label = ' Fatalities', linewidth=1,alpha =0.7  ,grid = True, linestyle = ':')\ntrain.ConfirmedCases.plot(color = 'b',label = 'ConfirmedCases',linewidth=1,alpha = 0.5,grid = True, linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel(' Fatalities ')\nplt.ylabel(' ConfirmedCases ')\nplt.title('Fatalities and ConfirmedCases')\nplt.show()","0e94c3fc":"# histogram \n# values of Deaths \ntrain.Fatalities.plot(kind = 'hist',bins = 100,figsize = (10,10))\nplt.show()","360acc36":"# Desicion Tree model","5deae3c5":"# Visualizations","4cba72a4":"# Normal plot","c950f2ff":"# **Thanks for looking at**","dc7dcab4":"# only Desicion Tree model","b1ed691f":"# Polynomial Regression Model ACCURACY\n# %88 accuracy","f63ba42b":"# Importing data and libraries all I need","2737a85f":"# Polynomial Regression\n# Confirmed vs Deaths","57e3e860":"# Desicion Tree model ACCURACY\u00b6\n# %99 accuracy","65370d2a":"# scikit learn Linear Regression ACCURACY\n# %80 accuracy","5a883bf7":"# confirmed_value vs dead_Value\n# with scikit learn Linear Regression","68429d01":"# before everything\n# look data ","7113acaa":"# Normal with Desicion Tree model","a743ae69":"# CHECK THE ACCURACY\n# %96 accuracy ","8c71983e":"# RandomForestRegressor model","464cf641":"# Read data"}}