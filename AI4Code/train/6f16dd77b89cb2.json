{"cell_type":{"b5a3d1c3":"code","5b72d275":"code","fb56f016":"code","85e27427":"code","ab802cf7":"code","7dd5fb17":"code","a5f007bc":"code","450c45b0":"code","3c8097ce":"code","5c8e7950":"code","e7a7648d":"code","864fb18c":"code","641283c8":"code","56656125":"code","4c40acdc":"code","30be8fbd":"code","ba32d603":"code","bf16e537":"code","1c2d538c":"code","4266a199":"code","1aa7759b":"code","22fa5d32":"code","ecc951e6":"code","4f9b02f4":"code","168c2d63":"code","9e803e01":"code","eed70bdf":"code","c19f3ae6":"code","53b34fc7":"code","be0b4349":"code","49bdc86a":"code","03bbca5c":"code","0798846f":"code","f033eca3":"code","78ad942e":"code","563b676c":"code","b4dc3d86":"code","771d7465":"code","e22a4485":"code","2fdfd33f":"code","56df255b":"code","c3f4cd52":"code","92124f52":"code","8aca7dd1":"code","974e6d2c":"markdown","a9229765":"markdown","7329c03c":"markdown","868c1522":"markdown","fa13508c":"markdown","d955f15d":"markdown","04cb5c8b":"markdown","57416b38":"markdown","73ecf251":"markdown","cd7c6b9c":"markdown","6733ee97":"markdown","ef7ab3ed":"markdown","8eec157a":"markdown","ed5907d2":"markdown","0e34efe4":"markdown"},"source":{"b5a3d1c3":"#Import pandas and numpy\nimport pandas as pd\nimport numpy as np","5b72d275":"#Import training data to pandas dataframe\ndf = pd.read_csv('..\/input\/titanic\/train.csv')","fb56f016":"#Get info of the dataframe\ndf.info()","85e27427":"#Preview the data\ndf.head()","ab802cf7":"#Import seaborn and matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')","7dd5fb17":"#See the distribution of the target\nsns.countplot(x='Survived', data=df)\nplt.show()","a5f007bc":"#See number of people survived based on Pclass\nsns.countplot(x='Pclass', data=df, hue='Survived')\nplt.show()","450c45b0":"#See the distribution of age\nsns.displot(data=df, x='Age', hue='Survived')\nplt.show()","3c8097ce":"#See number of people survived based on Sex\nsns.countplot(x='Sex', data=df, hue='Survived')\nplt.show()","5c8e7950":"sns.countplot(x='Embarked', data=df, hue='Survived')\nplt.show()","e7a7648d":"plt.figure(figsize=(8,8))\nsns.scatterplot(x='Age', y='Fare', data=df, hue='Survived')\nplt.show()","864fb18c":"#Exclude passengers who paid fare more than 500\ndf = df[df['Fare']<500]","641283c8":"#Count value in cabin column\ndf['Cabin'].value_counts()","56656125":"df.drop('Cabin', axis=1, inplace=True)","4c40acdc":"#Fill null values in Embarked column\ndf['Embarked'].fillna('S', inplace=True)","30be8fbd":"#Check the correlation with age column\ndf.corr()['Age']","ba32d603":"df.loc[(df['Age'].isnull()) & ((df['Pclass'] == 1) & (df['Sex'] == 'male')), 'Age'] = df[(df['Pclass'] == 1) & (df['Sex'] == 'male')]['Age'].mean()\ndf.loc[(df['Age'].isnull()) & ((df['Pclass'] == 2) & (df['Sex'] == 'male')), 'Age'] = df[(df['Pclass'] == 2) & (df['Sex'] == 'male')]['Age'].mean()\ndf.loc[(df['Age'].isnull()) & ((df['Pclass'] == 3) & (df['Sex'] == 'male')), 'Age'] = df[(df['Pclass'] == 3) & (df['Sex'] == 'male')]['Age'].mean()\ndf.loc[(df['Age'].isnull()) & ((df['Pclass'] == 1) & (df['Sex'] == 'female')), 'Age'] = df[(df['Pclass'] == 1) & (df['Sex'] == 'female')]['Age'].mean()\ndf.loc[(df['Age'].isnull()) & ((df['Pclass'] == 2) & (df['Sex'] == 'female')), 'Age'] = df[(df['Pclass'] == 2) & (df['Sex'] == 'female')]['Age'].mean()\ndf.loc[(df['Age'].isnull()) & ((df['Pclass'] == 3) & (df['Sex'] == 'female')), 'Age'] = df[(df['Pclass'] == 3) & (df['Sex'] == 'female')]['Age'].mean()\n","bf16e537":"#check the null values again\ndf.isnull().sum()","1c2d538c":"#Check non-numerical columns\ndf.select_dtypes('object').columns","4266a199":"#Check value count in name column\ndf['Name'].value_counts()","1aa7759b":"df['Title'] = df['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]","22fa5d32":"#Change misc titles to others\ntitle_names = (df['Title'].value_counts() < 10)\ndf['Title'] = df['Title'].apply(lambda x: 'Others' if title_names.loc[x] == True else x)","ecc951e6":"#Drop PassengerId, ticket, and name column\ndf.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)","4f9b02f4":"#Make dummy of sex, embarked, and title columns\ndf = pd.get_dummies(df, drop_first=True)","168c2d63":"df","9e803e01":"#Split the target and features\nX = df.drop('Survived', axis=1)\ny = df['Survived']","eed70bdf":"X.shape","c19f3ae6":"#First, I want to try the simplest logistic regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nXscale = scaler.fit_transform(X)\nlogmodel = LogisticRegression()\nlogmodel.fit(Xscale,y)","53b34fc7":"#View the test score of logistic regression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\ncv = KFold(n_splits=5, random_state=1, shuffle=True)\nlog_acc = cross_val_score(logmodel, Xscale, y, scoring='accuracy', cv=cv, n_jobs=-1)\nlog_acc = np.mean(log_acc)\nprint(log_acc)","be0b4349":"#Try Random Forest model\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_features='sqrt', n_estimators=1000, max_depth=10, min_samples_split=9)\nrf.fit(X, y)","49bdc86a":"#View the test score of random forest\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\ncv = KFold(n_splits=5, random_state=1, shuffle=True)\nrfscore = cross_val_score(rf, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\nrfscore = np.mean(rfscore)\nprint(rfscore)","03bbca5c":"#Try the gradient boosting model\nfrom sklearn.ensemble import GradientBoostingClassifier\nGBoost = GradientBoostingClassifier(learning_rate=0.01, max_depth=5, max_features='sqrt',\n                                    min_samples_split=40, n_estimators=1000)\nGBoost.fit(X,y)","0798846f":"#View the test score of gradient boosting\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\ncv = KFold(n_splits=5, random_state=1, shuffle=True)\ngbscore = cross_val_score(GBoost, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\ngbscore = np.mean(gbscore)\nprint(gbscore)","f033eca3":"d = {'Accuracy':[log_acc, rfscore, gbscore]}\nindex = ['Logistic Regression', 'Random Forest', 'Gradient Boosting']\nresults = pd.DataFrame(d)\nresults.index = index\nresults.sort_values(by=['Accuracy'], ascending=False)","78ad942e":"#Read the test set\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","563b676c":"#Get info of the test dataset\ntest.info()","b4dc3d86":"test.drop('Cabin', axis=1, inplace=True)\n#Fill null values in Embarked column\ntest['Embarked'].fillna(test['Embarked'].mode()[0], inplace=True)\n#Fill null values in Fare column\ntest['Fare'].fillna(test['Fare'].median(), inplace=True)","771d7465":"#Fill test age column\ntest.loc[(test['Age'].isnull()) & ((test['Pclass'] == 1) & (test['Sex'] == 'male')), 'Age'] = test[(test['Pclass'] == 1) & (test['Sex'] == 'male')]['Age'].mean()\ntest.loc[(test['Age'].isnull()) & ((test['Pclass'] == 2) & (test['Sex'] == 'male')), 'Age'] = test[(test['Pclass'] == 2) & (test['Sex'] == 'male')]['Age'].mean()\ntest.loc[(test['Age'].isnull()) & ((test['Pclass'] == 3) & (test['Sex'] == 'male')), 'Age'] = test[(test['Pclass'] == 3) & (test['Sex'] == 'male')]['Age'].mean()\ntest.loc[(test['Age'].isnull()) & ((test['Pclass'] == 1) & (test['Sex'] == 'female')), 'Age'] = test[(test['Pclass'] == 1) & (test['Sex'] == 'female')]['Age'].mean()\ntest.loc[(test['Age'].isnull()) & ((test['Pclass'] == 2) & (test['Sex'] == 'female')), 'Age'] = test[(test['Pclass'] == 2) & (test['Sex'] == 'female')]['Age'].mean()\ntest.loc[(test['Age'].isnull()) & ((test['Pclass'] == 3) & (test['Sex'] == 'female')), 'Age'] = test[(test['Pclass'] == 3) & (test['Sex'] == 'female')]['Age'].mean()","e22a4485":"#check the null values again\ntest.isnull().sum()","2fdfd33f":"test['Title'] = test['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]","56df255b":"#Change misc titles to others\ntitle_names = (test['Title'].value_counts() < 10)\ntest['Title'] = test['Title'].apply(lambda x: 'Others' if title_names.loc[x] == True else x)","c3f4cd52":"#Drop PassengerId, ticket, and name column\ntest.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)\n#Make dummy of sex, embarked, and title columns\ntest = pd.get_dummies(test, drop_first=True)","92124f52":"#Predict the test set\nprediction = rf.predict(test)","8aca7dd1":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.drop('Survived', axis=1, inplace=True)\nsubmission['Survived'] = prediction\nsubmission","974e6d2c":"**FEATURE ENGINEERING**","a9229765":"As we can see that female passengers mostly survived while male passengers mostly didn't survive","7329c03c":"The Logistic Regression Model perform pretty good and has 82.20% accuracy","868c1522":"Name is unique in each passenger. But we can see there is a title in name. I can extract the title in name column","fa13508c":"Passengers whose age below 10 years has higher survival rate than other passengers","d955f15d":"As we can see there are 12 columns in the dataset. \nThere are 891 entries and the are some columns contain null values.\nColumn Age, Cabin, and Embarked has null values. There are 5 columns which data type is an object.","04cb5c8b":"Passengers from Pclass 3 mostly didn't survive while passengers from Pclass 1 mostly survived.","57416b38":"The distribution of the target is not really well balance since most passengers didn't survive (almost twice of survived passangers)","73ecf251":"Random Forest model has the highest accuracy score, so I will use this model to predict the test set","cd7c6b9c":"There are too much variations in cabin column. Just drop the cabin column","6733ee97":"**MODEL DEVELOPMENT**","ef7ab3ed":"Passengers who paid higher fare had higher survival rate. There are some outliers who paid fare more than 500","8eec157a":"Pclass has the highest correlation among others. It has negative correlation which means the higher in age, the lower in Pclass. Make sense. Let's fill the age null values based on Pclass and passenger's sex","ed5907d2":"Passengers embarked from C has higher survival rate than others","0e34efe4":"**EXPLORATORY DATA ANALYSIS**"}}