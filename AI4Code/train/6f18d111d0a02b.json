{"cell_type":{"f5722f7b":"code","4f608182":"code","dc69efab":"markdown"},"source":{"f5722f7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f608182":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nplt.rcParams['font.sans-serif']=['SimHei']\nplt.rcParams['axes.unicode_minus']=False\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n\n\ndata = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\ncols = ['OverallQual','GrLivArea', 'FullBath' , 'TotRmsAbvGrd', 'YearBuilt' ,'GarageCars','TotalBsmtSF']\nx = data[cols].values\ny = data['SalePrice'].values\n#\u53d6log1p\nylog = np.log1p(y)\nx_scaled = preprocessing.StandardScaler().fit_transform(x)#\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1\ny_scaled = preprocessing.StandardScaler().fit_transform(ylog.reshape(-1,1))#1\u5217 \u81ea\u9002\u5e94\u884c\n\nX_train,X_test, y_train, y_test = train_test_split(x_scaled, y_scaled, test_size=0.25, random_state=42)\n\nlinreg = LinearRegression()\nmodel=linreg.fit(X_train, y_train)\n\ny_predict=linreg.predict(X_test)\nprint(linreg.score(X_test,y_test))\n\nrfr = linreg\ndata_test = pd.read_csv(r'..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ncols2 = ['OverallQual','GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\ncars = data_test['GarageCars'].fillna(data_test.GarageCars.mean())\nbsmt = data_test['TotalBsmtSF'].fillna(data_test.TotalBsmtSF.mean())\ndata_test_x = pd.concat( [data_test[cols2], cars, bsmt] ,axis=1)\n\n\nx1 = data_test_x.values\nx_scaled1 = preprocessing.StandardScaler().fit_transform(x1)\ny_te_pred = rfr.predict(x_scaled1)\ny_resc = preprocessing.StandardScaler().fit(ylog.reshape(-1,1)).inverse_transform(y_te_pred)\ny_exp = np.expm1(y_resc)\nprint(y_exp)\n\nprediction = pd.DataFrame(y_exp, columns=['SalePrice'])\nresult = pd.concat([ data_test['Id'], prediction], axis=1)\nresult.to_csv('.\/Predictions.csv', index=False)\n\n\n\n\n\n\n\n\n\n\n\n","dc69efab":"main"}}