{"cell_type":{"23457c94":"code","698e22b4":"code","d33affc7":"code","93f18295":"code","663bb652":"code","02421fed":"code","ac4d0f85":"code","747f01dd":"code","2151aa1b":"code","ac8d6249":"code","6315ebf4":"code","ee356206":"code","c17c9d42":"code","07985e57":"code","e1f8782b":"code","f7c9514c":"code","5240bfc7":"code","ec442639":"code","826983e2":"code","846cd08f":"code","7752c944":"code","741fde73":"code","6d20308b":"code","0260c931":"code","4fe4c7c6":"code","7eb505f9":"code","a55b35b8":"code","f092100d":"code","f56308e1":"code","d88f3e6c":"code","c04759a5":"code","cc550282":"code","c87f43c0":"code","317c9ba5":"code","eb868ee8":"code","c6a3d421":"code","59c646e3":"code","2a1e1fc7":"code","2f3e45c2":"code","37154471":"code","cd8d7f0f":"code","35b2da9e":"code","8748c93c":"code","930a25cc":"code","9b40cd13":"code","92538311":"code","c27050d8":"code","5fa521e9":"code","6333d5f0":"code","11d85091":"code","e77adb5f":"code","4389dd42":"code","102cf2b7":"code","53239d15":"code","c24ecccc":"code","04a1db67":"markdown","753cdb17":"markdown","9a44bdc6":"markdown","7687cb18":"markdown","5754e05f":"markdown","f78df328":"markdown","78a9679d":"markdown","e9c8f9af":"markdown","df6ed177":"markdown","8a263a9e":"markdown","6683bb6d":"markdown","df5103ad":"markdown","516bfcec":"markdown","f4184c52":"markdown","e95dbd4c":"markdown","414e6a2f":"markdown","c37261de":"markdown","8c4059c9":"markdown","3f0a8693":"markdown"},"source":{"23457c94":"# Import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#linear regression\nfrom sklearn import linear_model\nimport statsmodels.api as sm","698e22b4":"df_train =  pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsample_submission= pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","d33affc7":"df_train.head(10) #this is used to display the first 10 rows of the data","93f18295":"df_train.shape","663bb652":"df_test.shape","02421fed":"df_train.info()","ac4d0f85":"df_train.isnull().sum()[df_train.isnull().sum()>0]","747f01dd":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)\n","2151aa1b":"df_train['LotFrontage']=df_train['LotFrontage'].fillna(df_train['LotFrontage'].mean())","ac8d6249":"df_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","6315ebf4":"df_train.Alley.value_counts()","ee356206":"df_train.drop(['Alley'],axis=1,inplace=True)","c17c9d42":"df_test.drop(['Alley'],axis=1,inplace=True)","07985e57":"df_train.MasVnrType.value_counts()","e1f8782b":"df_train.MasVnrArea.value_counts()","f7c9514c":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])","5240bfc7":"df_test['MasVnrType']=df_test['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])","ec442639":"#df_train.BsmtQual.value_counts()\ndf_train.BsmtCond.value_counts()\n#df_train.BsmtExposure.value_counts()\n#df_train.BsmtFinType1.value_counts()","826983e2":"df_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType1']=df_train['BsmtFinType1'].fillna(df_train['BsmtFinType1'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","846cd08f":"df_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_train['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])","7752c944":"df_train.Electrical.value_counts()\ndf_train.FireplaceQu.value_counts()","741fde73":"df_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","6d20308b":"df_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\n","0260c931":"df_test['Electrical']=df_test['Electrical'].fillna(df_test['Electrical'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\n","4fe4c7c6":"df_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])","7eb505f9":"df_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])","a55b35b8":"df_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_train.drop(['Id'],axis=1,inplace=True)","f092100d":"df_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)","f56308e1":"df_train.isnull().sum()[df_train.isnull().sum()>0]","d88f3e6c":"index = df_test.isnull().sum()[df_test.isnull().sum()>0].index","c04759a5":"df_test['BsmtFinSF1'].value_counts()\ndf_test['BsmtFinSF2'].value_counts()\ndf_test['BsmtUnfSF'].value_counts()\ndf_test['BsmtFullBath'].value_counts()\ndf_test['BsmtHalfBath'].value_counts()\ndf_test['GarageCars'].value_counts()\ndf_test['GarageArea'].value_counts()","cc550282":"for i in index:\n    df_test[i]=df_test[i].fillna(df_test[i].mode()[0])\n","c87f43c0":"df_test.isnull().sum()[df_test.isnull().sum()>0].index","317c9ba5":"#df_train.corr(\"SalePrice\")\n","eb868ee8":"df_train.MSZoning.value_counts()","c6a3d421":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']","59c646e3":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","2a1e1fc7":"final_df=pd.concat([df_train,df_test],axis=0)\nfinal_df=category_onehot_multcols(columns)\nfinal_df =final_df.loc[:,~final_df.columns.duplicated()]\n\ndf_train=final_df.iloc[:1460,:]\ndf_test=final_df.iloc[1460:,:]","2f3e45c2":"df_test[\"Shed\"]","37154471":"train_variables = df_train.drop('SalePrice',axis='columns')\nprice = df_train.SalePrice\ntrain_variables =sm.add_constant(train_variables)\ntest_variables = df_test.drop('SalePrice',axis='columns')\ntest_variables=sm.add_constant(test_variables)","cd8d7f0f":"est = sm.OLS(price, train_variables)\nmodel= est.fit()\nmodel.summary()\n","35b2da9e":"index = model.pvalues[model.pvalues > 0.05].index\ntrain_variables.drop(index, axis = 1, inplace = True)\ntest_variables.drop(index, axis = 1, inplace = True)\n","8748c93c":"while len(index) > 0 :\n    \n    est = sm.OLS(price, train_variables)\n    model= est.fit()\n    index = model.pvalues[model.pvalues > 0.05].index\n    train_variables.drop(index, axis = 1, inplace = True)\n    test_variables.drop(index, axis = 1, inplace = True)","930a25cc":"est = sm.OLS(price, train_variables)\nmodel= est.fit()\nmodel.summary()","9b40cd13":"SalePrice_prediction = model.predict(test_variables)","92538311":"submission_df = pd.DataFrame({'Id': sample_submission.Id, 'SalePrice': SalePrice_prediction.values})","c27050d8":"submission_df.to_csv('submission.csv',index = False)","5fa521e9":"train_variables = df_train.drop('SalePrice',axis='columns')\nprice = df_train.SalePrice\ntrain_variables =sm.add_constant(train_variables)\ntest_variables = df_test.drop('SalePrice',axis='columns')\ntest_variables=sm.add_constant(test_variables)","6333d5f0":"column_list = []\nall_columns = train_variables.columns\nbest_aic = 100000\nlocal_best_aic = 99999\nwhile local_best_aic != best_aic:\n    local_best_aic = best_aic\n\n    for i in all_columns:\n        index = column_list + [i]\n        train_variables\n        est = sm.OLS(price, train_variables[index])\n        model= est.fit()\n        AIC = model.aic\n        if AIC < best_aic:\n            best_index = index\n            best_aic = AIC\n            best_i = i\n    if local_best_aic == best_aic:\n        break\n    \n    column_list = best_index\n    all_columns.drop(best_i)\n    print(best_i)\n\nlen(column_list)\n\n","11d85091":"est = sm.OLS(price, train_variables[column_list])\nmodel= est.fit()\nSalePrice_prediction = model.predict(test_variables[column_list])\nsubmission_df = pd.DataFrame({'Id': sample_submission.Id, 'SalePrice': SalePrice_prediction.values})\nsubmission_df.to_csv('submission.csv',index = False)","e77adb5f":"from sklearn.linear_model import Ridge, ElasticNet, Lasso\nfrom sklearn.model_selection import cross_val_score\ntrain_variables = df_train.drop('SalePrice',axis='columns')\nprice = df_train.SalePrice\ntest_variables = df_test.drop('SalePrice',axis='columns')\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, train_variables, price, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","4389dd42":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]\ncv_ridge  #best alpha = 10","102cf2b7":"alphas = [ 75, 100, 125, 150, 200, 250]\ncv_lasso = [rmse_cv(Lasso(alpha = alpha)).mean() \n            for alpha in alphas]\ncv_lasso  #best alpha = 125","53239d15":"alphas = [0.0001, 0.001,0.005, 0.01, 0.1]\ncv_elastic = [rmse_cv(ElasticNet(alpha = alpha)).mean() \n            for alpha in alphas]\ncv_elastic  #best alpha = 1","c24ecccc":"lassoreg = Lasso(alpha = 125)\nlassoreg.fit(train_variables,price)\nSalePrice_prediction = lassoreg.predict(test_variables)\n\nsubmission_df = pd.DataFrame({'Id': sample_submission.Id, 'SalePrice': SalePrice_prediction})\nsubmission_df.to_csv('submission.csv',index = False)","04a1db67":"## Garage Variables","753cdb17":"It looks like Lot Frontage is numerical value, so I fill it up with the mean value","9a44bdc6":"# Try to run a forward search by AIC","7687cb18":"## MasVnrType & MasVnrArea         ","5754e05f":"# Checking to see how many null values are there:","f78df328":"## Alley           ","78a9679d":"## LotFrontage      ","e9c8f9af":"# EDA","df6ed177":"# View the data","8a263a9e":"# Look at all variables with NA values","6683bb6d":"# Import library","df5103ad":"## dropping the rest of variables because they have too many missing values","516bfcec":"## BsmtQual\/BsmtCond\/BsmtExposure\/BsmtFinType1\/BsmtFinType2 ","f4184c52":"# Load data","e95dbd4c":"# One hot encoding for categorical variables","414e6a2f":"## Linear regression model","c37261de":"## Electrical & FireplaceQu             ","8c4059c9":"# Regularized Linear models","3f0a8693":"## Looking at the data again"}}