{"cell_type":{"b011c6c5":"code","1bc5face":"code","499b9cb9":"code","29beb11a":"code","b8df09c9":"code","c187e813":"code","ef3081b2":"code","6750d146":"code","9605531a":"code","bfd8f5c5":"code","14b39c87":"code","5eb2ce35":"code","491333b4":"code","7fbe96de":"code","999c96ca":"code","469de825":"markdown","335dd323":"markdown","4891a732":"markdown","e7f09425":"markdown"},"source":{"b011c6c5":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error,confusion_matrix,accuracy_score","1bc5face":"data = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndata.head()","499b9cb9":"data.shape","29beb11a":"features = data.columns\nfeatures","b8df09c9":"#We can observe that we have categorical values for 22 features (independant variables) and one class (dependant variable). \n#Let's review the distribution of class, meaning poisonous or edible.\n\nlabels = ['Edible', 'Poisonous']\nvalues = [data.describe()['class']['freq'], data.describe()['class']['count']-data.describe()['class']['freq']]\ncolors = ['yellow', 'blue']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, opacity=1)])\nfig.update_traces(textinfo='percent+label', marker=dict(line=dict(color='#000000', width=1), colors=colors))\nfig.update_layout(title_text='Mushroom Distribution by Class', title_x=0.5, title_font=dict(size=18))\nfig.show()\n","c187e813":"#PLotting the features to get an overview of the data\n\nf, axes = plt.subplots(22,1, figsize=(15,150), sharey = True) \nk = 1\n\nfor i in range(0,22):\n    s = sns.countplot(x = features[k], data = data, ax=axes[i], palette = 'dark')\n    axes[i].set_xlabel(features[k], fontsize=20)\n    axes[i].set_ylabel(\"Count\", fontsize=20)\n    axes[i].tick_params(labelsize=15)\n    k = k+1\n    for p in s.patches:\n        s.annotate(format(p.get_height(), '.1f'), \n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center', va = 'center', \n        xytext = (0, 9), \n        fontsize = 15,\n        textcoords = 'offset points')\n\n","ef3081b2":"#Finding missing values\n\ndata.isnull().sum()","6750d146":"# There are no missing values, so we can move on to preparing the data for testing and training\n# Separating the features and class \n\nX=data.drop('class',axis=1)\ny=data['class']\n\n# Encoding the categorical values\n\nEncoder_x=LabelEncoder()\nfor col in X.columns:\n    X[col]=Encoder_x.fit_transform(X[col])\nEncoder_y=LabelEncoder()\ny=Encoder_y.fit_transform(y)\n\nX.head()","9605531a":"y","bfd8f5c5":"#Splitting the data for training and testing\n\ntrain_x,test_x,train_y,test_y=train_test_split(X,y)\ntrain_x.head()","14b39c87":"print(train_y)","5eb2ce35":"#Importing and training the RFC model\n\nmodel=RandomForestClassifier(random_state=1)\nmodel.fit(train_x,train_y)\npred=model.predict(test_x)","491333b4":"#Getting the accuracy score\nprint(\"Model score:\",model.score(test_x,test_y))\nprint(\"Mean absolute error:\",mean_absolute_error(pred,test_y))\nprint(\"Accuracy score:\",accuracy_score(pred,test_y))","7fbe96de":"# Reviewing predictions for the first 5 mushrooms\n\nX.head()\nprint(model.predict(X.head()))","999c96ca":"# Confusion matrix\n\nrf = RandomForestClassifier(oob_score=True)\nrf.fit(train_x, train_y)\n\npredictions_rf = pd.DataFrame(rf.predict(test_x))\nplt.figure(figsize=(12, 8))\nconf_mat = confusion_matrix(y_true=test_y, y_pred=predictions_rf[0])\nsns.heatmap(conf_mat, annot=True, fmt='g')\nplt.title('Confusion Matrix of the Test Data', fontsize=14)\nplt.ylabel('Real Class', fontsize=12)\nplt.xlabel('Predicted Class', fontsize=12)\nplt.show()","469de825":"**Random Forest Classifier**","335dd323":"**Exploring the data**","4891a732":"**Importing Libraries**","e7f09425":"**Pre-processing the data**"}}