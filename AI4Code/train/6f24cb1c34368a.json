{"cell_type":{"fec5c53d":"code","f3eccaa1":"code","63618d6e":"code","0bcf299a":"code","bfd694ff":"code","57428525":"code","21966e0e":"code","d6deb293":"code","027be63e":"code","ffb9bded":"code","db1105b8":"code","76d74f19":"code","d0072eb5":"code","efec4a95":"code","4282af9c":"code","885e4da8":"code","449aa3c6":"code","eb0026c7":"code","d69b7417":"code","d4e5c1f0":"code","e0a23e3b":"code","abdcef61":"code","d10fa12a":"code","41612af7":"code","48b4285c":"code","4060742f":"code","3d042b16":"code","5db4562e":"code","cc341273":"code","26c68875":"code","519214df":"code","3d3ffd07":"code","1b99681e":"code","3232bd1d":"code","68235afa":"code","525aac68":"markdown","38e865f2":"markdown","ad8c2ada":"markdown","7faaa4f9":"markdown","ea4b5b75":"markdown","3c6bed94":"markdown","23ea958e":"markdown"},"source":{"fec5c53d":"import pandas as pd\nimport seaborn as sn\ndf = pd.read_csv(\"..\/input\/House_prediction.csv\")\ndf","f3eccaa1":"df.rename(columns={'parking spaces':'parking_spaces','hoa (R$)':'hoa','rent amount (R$)':'rent',\n                   'property tax (R$)':'property_tax','fire insurance (R$)':'fire_insurance','total (R$)':'total'},inplace = True)","63618d6e":"df['floor'].replace(to_replace='-',value='0',inplace=True)\ndf","0bcf299a":"df.sort_values(by=['city'],inplace=True)\ndf.reset_index(drop=True, inplace=True)\ndf","bfd694ff":"import matplotlib.pyplot as plt\nimport numpy as np","57428525":"df2=df.groupby(by=['city'])\ntype(df2)","21966e0e":"from scipy import stats","d6deb293":"fig, ax = plt.subplots(figsize=(15,7))\n#df.groupby(['city']).apply(lambda x: x.mode())['rent'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['rent'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['rent'].plot(ax=ax,label='mean',legend=True)\n","027be63e":"fig, ax = plt.subplots(figsize=(15,7))\n#df.groupby(['city']).apply(lambda x: x.mode())['rooms'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['rooms'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['rooms'].plot(ax=ax,label='mean',legend=True)","ffb9bded":"fig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['hoa'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['hoa'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['hoa'].plot(ax=ax,label='mean',legend=True)","db1105b8":"fig, ax = plt.subplots(figsize=(15,7))\n#df.groupby(['city']).apply(lambda x: x.mode())['property_tax'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['property_tax'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['property_tax'].plot(ax=ax,label='mean',legend=True)","76d74f19":"fig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['fire_insurance'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['fire_insurance'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['fire_insurance'].plot(ax=ax,label='mean',legend=True)","d0072eb5":"fig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['area'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['area'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['area'].plot(ax=ax,label='mean',legend=True)","efec4a95":"fig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['parking_spaces'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['parking_spaces'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['parking_spaces'].plot(ax=ax,label='mean',legend=True)","4282af9c":"fig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['bathroom'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['bathroom'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['bathroom'].plot(ax=ax,label='mean',legend=True)","885e4da8":"df['floor']=df['floor'].astype('int')\nfig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['floor'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['floor'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['floor'].plot(ax=ax,label='mean',legend=True)","449aa3c6":"fig, ax = plt.subplots(figsize=(15,7))\ndf.groupby(['city']).apply(lambda x: x.mode())['total'].unstack().plot(ax=ax,label='mode',legend=True)\ndf.groupby(['city']).median()['total'].plot(ax=ax,label=\"median\",legend=True)\ndf.groupby(['city']).mean()['total'].plot(ax=ax,label='mean',legend=True)","eb0026c7":"#correlation between hoa,pt,fi with rent\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','rent'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","d69b7417":"#correlation between hoa,pt,fi with area\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','area'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","d4e5c1f0":"#correlation between hoa,pt,fi with floor\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','floor'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","e0a23e3b":"#correlation between hoa,pt,fi with rooms\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','rooms'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","abdcef61":"#correlation between hoa,pt,fi with bathroom\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','bathroom'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","d10fa12a":"#correlation between hoa,pt,fi with parking_spaces\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','parking_spaces'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","41612af7":"#correlation between hoa,pt,fi with total\ndf_cor_rent = df.filter(['hoa','property_tax','fire_insurance','total'], axis=1)\ncorrMatrix=df_cor_rent.corr()\nsn.heatmap(corrMatrix, annot=True)\nplt.show()","48b4285c":"# Manually catogerizing the 'city', 'furniture', 'animal' columns similar to ohe\n\ncitydummies=pd.get_dummies(df.city)\ncityjoined=pd.concat([df,citydummies],axis='columns')\ncityfinal=cityjoined.drop(['city','Campinas'], axis='columns')\nanimaldummies=pd.get_dummies(cityfinal.animal)\nanimalsjoined=pd.concat([cityfinal,animaldummies],axis='columns')\nanimalfinal = animalsjoined.drop(['animal','acept'],axis='columns')\nfurnituredummies = pd.get_dummies(animalfinal.furniture)\nfurniturejoined = pd.concat([animalfinal,furnituredummies],axis='columns')\ndf_final = furniturejoined.drop(['furniture','not furnished'],axis = 'columns')\ndf_final","4060742f":"df_final.rename(columns={'Belo Horizonte':'Belo','Porto Alegre':'Porto','Rio de Janeiro':'Rio','S\u00e3o Paulo':'Sao',\n                         'not acept':'not_acept'}, inplace = True)","3d042b16":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nmodel = LinearRegression()","5db4562e":"#X = df_final[['hoa','fire_insurance','property_tax']].values\nX = df_final[['fire_insurance']].values\nY = df_final[['rent']].values","cc341273":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state = 0)","26c68875":"model.fit(X_train, Y_train)","519214df":"model.score(X_test,Y_test)","3d3ffd07":"Y_pred = model.predict(X_test) \ndf_compare = pd.DataFrame({'actual':Y_test.flatten(), 'predicted':Y_pred.flatten()})\ndf_compare\ndf_compare.head(20).plot(kind='bar',figsize=(10,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","1b99681e":"X = df_final[['hoa','fire_insurance','property_tax','floor','rooms','bathroom','area','floor','Rio','Sao','Porto','Belo','furnished','not_acept']].values\nY = df_final[['rent']].values","3232bd1d":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state = 0)\nmodel.fit(X_train, Y_train)\nmodel.score(X_test,Y_test)","68235afa":"Y_pred = model.predict(X_test) \ndf_compare = pd.DataFrame({'actual':Y_test.flatten(), 'predicted':Y_pred.flatten()})\ndf_compare\ndf_compare.head(20).plot(kind='bar',figsize=(10,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","525aac68":"## As we can see fire_insurance is most correlated with the rent. Hence considering fire_insurance model alone might give better result of prediction","38e865f2":"score = 0.9807962273866995","ad8c2ada":"Model with only fire_insurance","7faaa4f9":"## With just fire_insurance, this model predicts the rent amount accurately with the score approximately '0.95'. This we have expected from the correlation matrix. Including other features slightly increases score. With all the features considered(after ohe (ohe done manually in this case)) the model score improved to '0.98' from the previous value '0.95'","ea4b5b75":"# 1. City wise plotting of mean of features such as rent amount, rooms, area, floor, etc. Through this you will be able to analyse which choice is the most possible(not the most preferable).","3c6bed94":"# 3. After the dependence of taxes is done, find the dependence of rent amount on other features through Linear Regression.You can use libraries for the results but I would recommend you to go through the maths once.Perform training on first 10000 data rows and predict the rest and compare with the original rent values.","23ea958e":"# 2. Try to find a dependence of House Association Tax, property tax and fire insurance on other features. Not a formula but something intuitive like if it is increasing\/decreasing with no of rooms or being furnished or not.\n"}}