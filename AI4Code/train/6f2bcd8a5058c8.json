{"cell_type":{"55efe5e3":"code","60a79aab":"code","3538f3b9":"code","18fc879a":"code","9fda861f":"code","87f77a07":"code","f9134966":"code","cfbfdf24":"code","362106de":"code","9dddf2ab":"code","d6f7a316":"code","d68f2a8c":"code","ddc89766":"code","ae2b352c":"code","ae181f4e":"code","6a5c65ff":"code","1003fafb":"code","9f3c8b85":"code","26e1a7e5":"code","271295ee":"code","2e56153d":"code","b1746ff5":"code","2debc56b":"code","3c49a3f4":"code","4b9b6d46":"code","656e5afa":"code","4abc2917":"code","33c35641":"code","9705e79c":"code","2cf28274":"code","311e7ba6":"code","20cc689d":"code","3e165262":"code","6487300e":"code","018d608c":"code","c56d3605":"code","b01ebbc6":"code","1a9f9f19":"code","9e41bce9":"markdown"},"source":{"55efe5e3":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","60a79aab":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","3538f3b9":"df.head()","18fc879a":"f = plt.figure(figsize=(14,6))\n\nsns.boxplot(x=df['sex'], y=df['charges'],)\n\nplt.title('box plot sex vs charges')\nplt.show()","9fda861f":"f = plt.figure(figsize=(14,6))\n\nsns.lineplot(x=df['age'], y=df['charges'],)\n\nplt.title('line plot age vs charges')\nplt.show()","87f77a07":"f = plt.figure(figsize=(14,6))\n\nsns.lineplot(x=df['bmi'], y=df['charges'],)\n\nplt.title('box plot sex vs charges')\nplt.show()","f9134966":"f = plt.figure(figsize=(9,6))\n\nsns.boxplot(y=df['bmi'])\n\nplt.title('box plot sex vs charges')\nplt.show()","cfbfdf24":"f = plt.figure(figsize=(14,6))\n\nsns.boxplot(x=df['children'], y=df['charges'],)\n\nplt.title('box plot sex vs charges')\nplt.show()","362106de":"f = plt.figure(figsize=(14,6))\n\nsns.boxplot(x=df['smoker'], y=df['charges'],)\n\nplt.title('box plot sex vs charges')\nplt.show()","9dddf2ab":"f = plt.figure(figsize=(14,6))\n\nsns.boxplot(x=df['region'], y=df['charges'],)\n\nplt.title('box plot sex vs charges')\nplt.show()","d6f7a316":"f = plt.figure(figsize=(9,6))\n\nsns.boxplot(y=df['charges'],)\n\nplt.title('box plot sex vs charges')\nplt.show()","d68f2a8c":"f = plt.figure(figsize=(12,4))\n\nsns.heatmap(df.isnull(), cmap='viridis', cbar=False, yticklabels=False)\n\nplt.show()","ddc89766":"f = plt.figure(figsize=(12,4))\n\nsns.heatmap(df.corr(), annot=True, cmap='viridis', )\nplt.show()","ae2b352c":"f= plt.figure(figsize=(12,4))\n\nax=f.add_subplot(121)\n\nsns.distplot(df['charges'],bins=50,color='r',ax=ax)\nax.set_title('Distribution of insurance charges')\n\nax=f.add_subplot(122)\n\nsns.distplot(np.log10(df['charges']),bins=40,color='b',ax=ax)\nax.set_title('Distribution of insurance charges in $log$ sacle')\nax.set_xscale('log');","ae181f4e":"df.head()","6a5c65ff":"categorical_columns = ['sex', 'children','smoker','region']\n\ndf_encoded = pd.get_dummies(df, prefix='OHE', columns=categorical_columns, drop_first=True)","1003fafb":"df_encoded.head()","9f3c8b85":"## Log transform\ndf_encoded['charges'] = np.log(df_encoded['charges'])","26e1a7e5":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model    import LinearRegression\nfrom sklearn.metrics         import mean_squared_error","271295ee":"X = df_encoded.drop('charges', axis=1)\ny = df_encoded['charges']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.3, random_state=23)","2e56153d":"line_reg = LinearRegression()\n\nline_reg.fit(X_train,y_train)","b1746ff5":"predict = line_reg.predict(X_test)","2debc56b":"f = plt.figure(figsize=(14,6))\n\nsns.scatterplot(x=y_test, y=predict , color='red')\nsns.lineplot(x=y_test, y=y_test , color='green')\nplt.show()","3c49a3f4":"#  Check for Linearity\nf = plt.figure(figsize=(14,5))\n\nax = f.add_subplot(121)\nsns.scatterplot(y_test,predict,ax=ax,color='r', )\nax.set_title('Check for Linearity:\\n Actual Vs Predicted value')\n\n# Check for Residual normality & mean\nax = f.add_subplot(122)\nsns.distplot((y_test - predict),ax=ax,color='b')\nax.axvline((y_test - predict).mean(),color='k',linestyle='--')\nax.set_title('Check for Residual normality & mean: \\n Residual eror');","4b9b6d46":"# Check for Multivariate Normality\n# Quantile-Quantile plot \nf,ax = plt.subplots(1,2,figsize=(14,6))\n\nimport scipy as sp\n\n_,(_,_,r) = sp.stats.probplot((y_test - predict), fit=True , plot=ax[0])\nax[0].set_title(\"Check for Multivariate Normality: \\nQ-Q Plot\")\n\n#Check for Homoscedasticity\nsns.scatterplot(y = (y_test - predict), x= predict, ax = ax[1],color='r') \nax[1].set_title('Check for Homoscedasticity: \\nResidual Vs Predicted');","656e5afa":"print('Mean Squre Error (MSE) :' , np.round(mean_squared_error(predict,y_test) *100,2),'%')","4abc2917":"R_square_sk = line_reg.score(X_test,y_test)\nR_square_sk *100","33c35641":"1\/(1-R_square_sk)","9705e79c":"from sklearn.preprocessing import PolynomialFeatures","2cf28274":"poly = PolynomialFeatures(8)","311e7ba6":"x_poly = poly.fit_transform(X)","20cc689d":"line_reg2  = LinearRegression()","3e165262":"line_reg2.fit(x_poly, y)","6487300e":"predict2 = line_reg2.predict(x_poly)","018d608c":"sns.scatterplot(y,predict2)\nsns.scatterplot(y,y)","c56d3605":"print('Mean Squre Error (MSE) :' , np.round(mean_squared_error(predict2,y) *100,2),'%')","b01ebbc6":"plt.figure(figsize=(10,5))\n\nimport scipy as sp\n\nsp.stats.probplot((y - predict2), fit=True, plot=plt )\nplt.title('Check for Multivariate Normality: \\nQ-Q Plot')\n\nplt.show()","1a9f9f19":"f = plt.figure(figsize=(14,5))\n\nax = f.add_subplot(121)\nsns.scatterplot(y,predict2,ax=ax,color='r', )\nax.set_title('Check for Linearity:\\n Actual Vs Predicted value')\n\n# Check for Residual normality & mean\nax = f.add_subplot(122)\nsns.distplot((y-predict2),ax=ax,color='b')\nax.axvline((y - predict2).mean(),color='k',linestyle='--')\nax.set_title('Check for Residual normality & mean: \\n Residual eror');","9e41bce9":"_____________\n\n# Polynomial Regression:\n_________"}}