{"cell_type":{"155d84c0":"code","6c388f16":"code","413f95a0":"code","b7e3160d":"code","1b188835":"code","4322cfa3":"code","76c42265":"code","511d377b":"code","15afdffd":"code","66aa698e":"code","80765aba":"code","c7b43223":"code","5d0ce907":"code","03017be2":"code","632bf277":"code","e80ce2e1":"code","cae7a4f7":"code","30455919":"code","5e07300e":"code","d50de481":"code","eff26e6d":"code","218f40f4":"code","9ca9365b":"code","daa8dc1f":"code","564b4baa":"code","94d47b90":"code","567e9577":"code","b7e77226":"code","ab929cba":"code","ff5b88ed":"code","ff91b6e1":"code","e91a1a34":"code","f09cb532":"code","b499ec63":"code","71420862":"code","40532236":"code","cc28a001":"code","9249cf1e":"code","3b61aa67":"code","83baecfc":"code","04a95d14":"code","39a7676a":"code","dfc8f7a6":"code","ffda10dd":"code","b890a57f":"markdown","a83e69ce":"markdown","a411033c":"markdown","605f7433":"markdown","ec2bda6d":"markdown","5193e14f":"markdown","87568239":"markdown","1ece1805":"markdown","002a079e":"markdown","13cb168d":"markdown","05262092":"markdown","f082e0e6":"markdown","e156ac08":"markdown","f20e2b60":"markdown","3bd06dee":"markdown","54bbd067":"markdown","2743f3f1":"markdown","c43924c7":"markdown","f8061ce5":"markdown","8d45b840":"markdown","5b2ef632":"markdown","bbbb30fc":"markdown","8b19364c":"markdown","287e1fce":"markdown","05e37c5a":"markdown","f3cfd02d":"markdown","fe61a0ac":"markdown","cf5615f9":"markdown","8bc331fd":"markdown","baca7499":"markdown","5de0464b":"markdown","35b0534d":"markdown","b8258854":"markdown","33b466a0":"markdown","8239e45a":"markdown"},"source":{"155d84c0":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras as keras\n\n\nimport plotly.offline as py \npy.init_notebook_mode(connected=True) \nimport plotly.graph_objs as go \nimport plotly.tools as tls \nimport plotly.figure_factory as ff \nimport warnings\nwarnings.filterwarnings('ignore')","6c388f16":"dataset = pd.read_csv(\"\/input\/Churn-Modelling\/Churn_Modelling.csv\")","413f95a0":"dataset.head()","b7e3160d":"dataset.columns","1b188835":"dataset.shape","4322cfa3":"dataset.isna().sum()","76c42265":"dataset.describe().T","511d377b":"dataset.nunique()","15afdffd":"dataset = dataset.drop([\"RowNumber\", \"CustomerId\",\"Surname\"], axis = 1)","66aa698e":"churn     = dataset[dataset[\"Exited\"] == 1]\nnot_churn = dataset[dataset[\"Exited\"] == 0]","80765aba":"target_column = [\"Exited\"]\ncategorical_column   = dataset.nunique()[dataset.nunique() < 6].keys().tolist()\ncategorical_column   = [x for x in categorical_column if x not in target_column]\nnumerical_column   = [x for x in dataset.columns if x not in categorical_column + target_column]","c7b43223":"print(\"\\tCategorical Featuers\")\nprint(categorical_column)\nprint(\"\\n**********************************************\")\nprint(\"\\tNumerical Featuers\")\nprint(numerical_column)","5d0ce907":"def plot_pie(column) :\n    \n    trace1 = go.Pie(values  = churn[column].value_counts().values.tolist(),\n                    labels  = churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [0,.48]),\n                    name    = \"Churn Customers\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    hole    = .6\n                   )\n    \n    trace2 = go.Pie(values  = not_churn[column].value_counts().values.tolist(),\n                    labels  = not_churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    domain  = dict(x = [.52,1]),\n                    hole    = .6,\n                    name    = \"Non churn customers\" \n                   )\n\n\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5),\n                                           dict(text = \"Non churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .88,y = .5\n                                               )\n                                          ]\n                           )\n                      )\n    data = [trace1,trace2]\n    fig  = go.Figure(data = data,layout = layout)\n    py.iplot(fig)","03017be2":"plot_pie(categorical_column[0])","632bf277":"plot_pie(categorical_column[1])","e80ce2e1":"plot_pie(categorical_column[2])","cae7a4f7":"plot_pie(categorical_column[3])","30455919":"plot_pie(categorical_column[4])","5e07300e":"def histogram(column) :\n    trace1 = go.Histogram(x  = churn[column],\n                          histnorm= \"percent\",\n                          name = \"Churn Customers\",\n                          marker = dict(line = dict(width = .5,\n                                                    color = \"black\"\n                                                    )\n                                        ),\n                         opacity = .9 \n                         ) \n    \n    trace2 = go.Histogram(x  = not_churn[column],\n                          histnorm = \"percent\",\n                          name = \"Non churn customers\",\n                          marker = dict(line = dict(width = .5,\n                                              color = \"black\"\n                                             )\n                                 ),\n                          opacity = .9\n                         )\n    \n    data = [trace1,trace2]\n    layout = go.Layout(dict(title =column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = column,\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = \"percent\",\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                           )\n                      )\n    fig  = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)","d50de481":"histogram(numerical_column[0])","eff26e6d":"histogram(numerical_column[1])","218f40f4":"histogram(numerical_column[2])","9ca9365b":"histogram(numerical_column[3])","daa8dc1f":"histogram(numerical_column[4])","564b4baa":"sns.pairplot(dataset, kind ='scatter', hue= \"Exited\")","94d47b90":"\"\"\"\nGender_division = dataset[\"Gender\"].value_counts()\nprint(\"Gender Division\\n\")\nprint(Gender_division)\nprint(\"*****************************************************\")\nHas_card = dataset[\"HasCrCard\"].value_counts()\nprint(\"Customer having the cards\\n\")\nprint(Has_card)\nprint(\"1 = Yes, 0 = No\")\nprint(\"*****************************************************\")\nnum_prod = dataset[\"NumOfProducts\"].value_counts()\nprint(num_prod)\nprint(\"*****************************************************\")\ncountry = dataset[\"Geography\"].value_counts()\nprint(country)\nprint(\"*****************************************************\")\ntenure = dataset[\"Tenure\"].value_counts()\nprint(tenure)\nprint(\"*****************************************************\")\nactive_member = dataset[\"IsActiveMember\"].value_counts()\nprint(active_member)\nprint(\"1 = Active, 0 = Not Active\")\nprint(\"*****************************************************\")\ncust_status = dataset[\"Exited\"].value_counts()\nprint(cust_status)\nprint(\"1 = Customer Left, 0 = Not Left\")\n\"\"\"","567e9577":"\"\"\"\n#Gender_division = Gender_division.to_frame()\n#Gender_division.insert(0, column=\"Gender_Type\" , value = (\"Male\",\"Female\"))\n#Gender_division\n\nHas_card = Has_card.to_frame()\nHas_card.insert(0, column =\"Taken_Card\", value = (\"Yes\",\"No\"))\n\ncountry = country.to_frame()\ncountry.insert(0, column=\"Country_Name\", value= (\"France\", \"Germany\", \"Spain\"))\n\"\"\"","b7e77226":"\"\"\"\nlabels = [\"France\", \"Germany\",\"Spain\"]\nsize = country.iloc[:,1]\nexplode = (0.1,0.1,0.1)\ncolors = [\"c\",\"r\",\"g\"]\n\nfig1, ax1 = plt.subplots()\nax1.pie(size, explode= explode, labels= labels, colors=colors,\n       autopct = \"%1.1f%%\", shadow = True, startangle = 90)\nax1.axis = (\"equal\")\nplt.tight_layout()\nplt.show()\n\"\"\"","ab929cba":"\"\"\"\nlabels = [\"Yes\", \"No\"]\nsize = Has_card.iloc[:,1]\nexplode = (0.1,0)\ncolors = [\"#ff9999\",\"#99ff99\"]\n\nfig1, ax1 = plt.subplots()\nax1.pie(size, explode= explode, labels= labels, colors=colors,\n       autopct = \"%1.1f%%\", shadow = True, startangle = 90)\nax1.axis = (\"equal\")\nplt.tight_layout()\nplt.show()\n\"\"\"","ff5b88ed":"\"\"\"\nlabels = [\"Male\", \"Female\"]\nsize = Gender_division.iloc[:,1]\nexplode = (0.1,0)\ncolors = [\"#ff9999\",\"#99ff99\"]\n\nfig1, ax1 = plt.subplots()\nax1.pie(size, explode= explode, labels= labels, colors=colors,\n       autopct = \"%1.1f%%\", shadow = True, startangle = 90)\nax1.axis = (\"equal\")\nplt.tight_layout()\nplt.show()\n\"\"\"","ff91b6e1":"\"\"\"\ndataset[\"Age\"].value_counts()\ndataset[\"EstimatedSalary\"].value_counts()\n\"\"\"","e91a1a34":"\"\"\"\ntenure = tenure.to_frame()\ntenure.insert(0, column=\"Tenure_Year\", value=(2,1,7,8,5,3,4,9,6,10,0))\n\"\"\"","f09cb532":"\"\"\"\ntenure_plot = sns.barplot(tenure.iloc[:,0],tenure.iloc[:,1], data = tenure, palette=\"Paired\")\ntenure_plot.set(xlabel = \"Tenure Year of Customers\" , ylabel = \"Count\"  )\nplt.show()\n\"\"\"","b499ec63":"dataset[dataset.columns].corr()","71420862":"sns.set()\nsns.set(font_scale = 1.25)\nsns.heatmap(dataset.corr(), annot = True,fmt = \".1f\")\nplt.show()","40532236":"trace = []\ndef gen_boxplot(df):\n    for feature in df:\n        trace.append(\n            go.Box(\n                name = feature,\n                y = df[feature]\n            )\n        )\n\nnew_df = dataset[numerical_column[:1]]\ngen_boxplot(new_df)\ndata = trace\npy.iplot(data)","cc28a001":"trace = []\ndef gen_boxplot(df):\n    for feature in df:\n        trace.append(\n            go.Box(\n                name = feature,\n                y = df[feature]\n            )\n        )\nnew_df = dataset[numerical_column[1:3]]\ngen_boxplot(new_df)\ndata = trace\npy.iplot(data)","9249cf1e":"trace = []\ndef gen_boxplot(df):\n    for feature in df:\n        trace.append(\n            go.Box(\n                name = feature,\n                y = df[feature]\n            )\n        )\nnew_df = dataset[numerical_column[3:]]\ngen_boxplot(new_df)\ndata = trace\npy.iplot(data)","3b61aa67":"ageNew = []\nfor val in dataset.Age:\n    if val <= 85:\n        ageNew.append(val)\n    else:\n        ageNew.append(dataset.Age.median())\n        \ndataset.Age = ageNew","83baecfc":"dataset1 = dataset","04a95d14":"list_cat = ['Geography', 'Gender']\ndataset1 = pd.get_dummies(dataset1, columns = list_cat, prefix = list_cat)","39a7676a":"from sklearn.ensemble import RandomForestClassifier\nimport numpy as np","dfc8f7a6":"X1 = dataset1.drop('Exited', axis=1)\ny1 = dataset1.Exited\n\nfeatures_label = X1.columns\n\nforest = RandomForestClassifier (n_estimators = 10000, random_state = 0, n_jobs = -1)\nforest.fit(X1, y1)\n\nimportances = forest.feature_importances_\n\nindices = np.argsort(importances)[::-1]\n\nfor i in range(X1.shape[1]):\n    print (\"%2d) %-*s %f\" % (i + 1, 30, features_label[i], importances[indices[i]]))","ffda10dd":"plt.title('Feature Importances')\nplt.bar(range(X1.shape[1]), importances[indices], color = \"red\", align = \"center\")\nplt.xticks(range(X1.shape[1]), features_label, rotation = 90)\nplt.show()","b890a57f":"<h3><b>:::::The function is called to visualize the numerical feature (Tenure):::::<\/b><\/h3><br>","a83e69ce":"<h3><b>:::::The user-defined function to visualize the numerical features in the histogram plots:::::<\/b><\/h3><br>\nThe customized histogram function using the plotly library will generate the histogram charts for the numerical featuers in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","a411033c":"<h3><b>:::::The snapshot of the imported data:::::<\/b><\/h3><br>\nAs the dataset variable of DATA_FRAME type so we can use the head() function to show the top 5 rows\/tuples of the whole dataset.","605f7433":"<h3><b>:::::The visualization of the dataset on the pair-plot:::::<\/b><\/h3><br>\n A pairs plot allows us to see both distribution of single variables and relationships between two variables. Pair plots are a great method to identify trends for follow-up analysis.","ec2bda6d":"<h3><b>:::::Importing following libraries:::::<\/b><\/h3>\n<ol>\n    <li><b>Pandas::<\/b> For the data manipulation and analysis.<\/li>\n    <li><b>Matplotlib::<\/b> For the data visualization.<\/li>\n    <li><b>Seaborn::<\/b> For the data visualization built on the top of the matplotlib library.<\/li>\n    <li><b>Keras::<\/b> For building the neural network built on the Tensorflow backend.<\/li>\n    <li><b>Plotly::<\/b> For the data visualization but creates more creative plots and provides a lot of custom ability.<\/li>\n    <li><b>Warning::<\/b> For dealing with the warnings coming while execution of the lines of code.<\/li>\n<\/ol>","5193e14f":"<h3><b>:::::The function is called to visualize the numerical feature (Credit Score):::::<\/b><\/h3><br>\n<ol>\n    <li>The mean of the churn customers credit score is 625-629. <\/li>\n    <li>The mean of the Non churn customers credit score is 680-684. <\/li>\n<\/ol>","87568239":"<h1><center> BANK CUSTOMER CHURN PREDICTION <\/center><\/h1><br>\n<b>Customer churn <\/b> can be defined as the customer terminates any relationship with a company that provides services either online or offline. Churn prediction can be referred to as the prediction of customers who are likely to cancel a subscription, product or service. ","1ece1805":"<h3><b>:::::The function is called to visualize the numerical feature (Age):::::<\/b><\/h3><br>\n<ol>\n    <li>The mean of the churn customers age is 46. <\/li>\n    <li>The mean of the Non churn customers age is 35. <\/li>\n<\/ol>","002a079e":"<h3><b>:::::The function to visualize the box plot for the outlier detection for the Balance and EstimatedSalary features:::::<\/b><\/h3><br>","13cb168d":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","05262092":"<h3><b>:::::The categorical and numerical featuers:::::<\/b><\/h3><br>\n\nThe <b>categorical featuers<\/b> are:\n<ol>\n    <li>Geography <b>(Geography)<\/b><\/li>\n    <li>Gender <b>(Gender)<\/b><\/li>\n    <li>Number of Products <b>(NumOfProducts)<\/b><\/li>\n    <li>Customer having the credit card or not <b>(HasCrCard)<\/b><\/li>\n    <li>Customer is active with bank or not <b>(IsActiveMember)<\/b><\/li>\n<\/ol>\n\nThe <b>numerical featuers<\/b> are:\n<ol>\n    <li>The credit score of the customer <b>(CreditScore)<\/b><\/li>\n    <li>The age of the customer <b>(Age)<\/b><\/li>\n    <li>The tenure of the customer with the bank <b>(Tenure)<\/b><\/li>\n    <li>The balance of the customer's account <b>(Balance)<\/b><\/li>\n    <li>The estimated salary of the customer <b>(EstimatedSalary)<\/b><\/li>\n<\/ol>\n    ","f082e0e6":"<h3><b>:::::The correlation table for the dataset:::::<\/b><\/h3><br>\nA correlation coefficient is a way to put a value to the relationship. Correlation coefficients have a value of between -1 and 1. A \u201c0\u201d means there is no relationship between the variables at all, while -1 or 1 means that there is a perfect negative or positive correlation (negative or positive correlation here refers to the type of graph the relationship will produce).","e156ac08":"<h3><b>:::::Dropping the unsignificant featuers:::::<\/b><\/h3><br>\nThe function dataset_name.drop([\"LIST_OF_FEATUERS\"], axis = 0\/1) will drop the columns (when axis=1) and rows (when axis=0).","f20e2b60":"<h3><b>:::::The function to visualize the box plot for the outlier detection for the CreditScore features:::::<\/b><\/h3><br>","3bd06dee":"<h3><b>:::::The feature division on the basis of the unqiues:::::<\/b><\/h3><br>\nThe fetuers will be divided on the basis of the number of the uniques (uniques less than 6) into categorical featuers and remaining the numerical featuers.","54bbd067":"<h3><b>:::::The featuers and Class_Label of the data:::::<\/b><\/h3><br>\n<ol>\n    <li><b>RowNumber:<\/b> The index number of the row.<\/li>\n    <li><b>CusomerId:<\/b> The customer ID. <\/li>\n    <li><b>Surname:<\/b> The last name of the customer.<\/li>\n    <li><b>CreditScore:<\/b> The credit score given by the bank.<\/li>\n    <li><b>Geography:<\/b> Country that customer belongs.\\begin{equation}\nGeography \\: \\: \\epsilon \\: \\:  R^{\\{France,Germany,Spain\\}}\n\\end{equation}<\/li>\n    <li><b>Gender:<\/b> The gender of the customer. \\begin{equation}\nGender \\: \\: \\epsilon \\: \\:  R^{\\{Male\\:,\\:Female\\}}\n\\end{equation}<\/li>\n    <li><b>Age:<\/b>The age of the customer.<\/li>\n    <li><b>Tenure:<\/b>Number of years customer is with the bank.<\/li>\n    <li><b>Balance:<\/b>The current balance of the account.<\/li>\n    <li><b>NumOfProducts:<\/b>The number of the products taken by the customer.\\begin{equation}\nNumOfProducts \\: \\: \\epsilon \\: \\:  R^{\\{1\\:,\\:2\\:,\\:3\\:,\\:4\\:\\}}\n\\end{equation}<\/li>\n    <li><b>HasCrCard:<\/b> Is customer owing a credit card or not. \\begin{equation}\nHasCrCard \\: \\: \\epsilon \\: \\:  R^{\\{\\:0\\: = \\:No\\:,\\: 1\\: =\\: Yes\\:\\}}\n\\end{equation}<\/li>\n    <li><b>IsActiveMember:<\/b>Is customer is active or not.\\begin{equation}\nIsActiveMember \\: \\: \\epsilon \\: \\:  R^{\\{\\:0\\: = \\:No\\:,\\: 1\\: =\\: Yes\\:\\}}\n\\end{equation}<\/li>\n    <li><b>EstimatedSalary:<\/b>The annual salary of the customers.<\/li>\n    <li><b>Exited:<\/b>The <b>CLASS LABEL<\/b> whether customer still with bank or not.\\begin{equation}\nExited \\: \\: \\epsilon \\: \\:  R^{\\{\\:0\\: = \\:No\\:,\\: 1\\: =\\: Yes\\:\\}}\n\\end{equation}<\/li>\n<\/ol>","2743f3f1":"<h3><b>:::::The function to to remove outlier values from  Age Feature:::::<\/b><\/h3><br>\nThe function will remove the outliers value from the dataset and add the median values instead of the outlier's value.","c43924c7":"<h3><b>:::::To check the missing values:::::<\/b><\/h3><br>\nThe function isna() will check the missing values column wise (default axis = 0 (column-wise)) and sum() will do the submission at the end.\n\n<h4><b>:::::Our Analysis on the missing values:::::<\/b><\/h4><br>\nThe data contains the 0 missing values.","f8061ce5":"<h3><b>:::::To check the uniques terms in the each features:::::<\/b><\/h3><br>\nThe function nunique() will check the unique values column wise (default axis = 0 (column-wise)).","8d45b840":"<h3><b>:::::Data Division on the basis of class label:::::<\/b><\/h3><br>","5b2ef632":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","bbbb30fc":"<h3><b>:::::The visualization (Heat Map) of the correlation table for the dataset:::::<\/b><\/h3><br>","8b19364c":"<h3><b>:::::The function is called to visualize the numerical feature (Estimated Salary):::::<\/b><\/h3><br>","287e1fce":"<h3><b>:::::The dimension of the dataframe in the matrix format (rows,columns):::::<\/b><\/h3>","05e37c5a":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","f3cfd02d":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function using the plotly library will generate the pie charts for the categorical featuers in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","fe61a0ac":"<h3><b>:::::Visualizing the Importance of the featuers on the basis of the Gini Index of the dataset:::::<\/b><\/h3><br>\n<b>CreditScore<\/b> feature comes at the top while <b>Gender<\/b> features showed lowest importance.","cf5615f9":"<h3><b>::::: Importing dataset:::::<\/b><\/h3><br>\nThe data is imported using the pandas (alias name pd) pre-defined function read_csv() as our data file format is csv (comma-seprated values) in the dataset variable.","8bc331fd":"<h3><b>:::::The feature Selection:::::<\/b><\/h3><br>\nThe feature selection using the Random Forest Classifier algorithm by computing the Gini Scores.","baca7499":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","5de0464b":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","35b0534d":"<h3><b>:::::The Data in the form of the Descriptive Statistics:::::<\/b><\/h3><br>\nThe descriptive statistics provide us a information of numerical featuers in the term of the Mean, Standard Deviation and 5 elements of the box plot (Min, Max, Q1, Q2, Q3).","b8258854":"<h3><b>:::::The conversion of the categorical features into numerical using the One-Hot coding Technique.:::::<\/b><\/h3><br>\nThe conversion of the categorical featuers into numerical featuers using the one-hot encoding technique in which each unique value in the feature will be converted into a seperate column.","33b466a0":"<h3><b>:::::The function is called to visualize the numerical feature (Balance):::::<\/b><\/h3><br>\n<ol>\n    <li>The mean of the churn customers balance came 107.5k - 112.5k. <\/li>\n    <li>The mean of the Non churn customers balance came 112.5k - 117.5k. <\/li>\n<\/ol>\nBalance value in $ (dollars).","8239e45a":"<h3><b>:::::The function to visualize the box plot for the outlier detection for the Age and Tenure features:::::<\/b><\/h3><br>"}}