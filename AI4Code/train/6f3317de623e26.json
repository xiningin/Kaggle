{"cell_type":{"c27c3ccf":"code","e0d2a279":"code","0b6c28b5":"code","07527156":"code","725baffe":"code","a5c050bb":"code","6c685926":"code","b97ddc74":"code","e537f0b9":"code","804728e3":"code","84aa4f31":"code","96b4ebef":"code","728494c3":"code","322284a3":"code","59ea557b":"code","96648ecc":"markdown","218ce3ab":"markdown","180d4f86":"markdown","5bf3eef4":"markdown","9c7ba056":"markdown","98fb9f59":"markdown","e7a8d8f1":"markdown","037f04f9":"markdown","da688d16":"markdown","552017c4":"markdown","d83fd645":"markdown","89c1b655":"markdown","4e37d7aa":"markdown","e12a27b5":"markdown","9c6d07e8":"markdown","dd2caf52":"markdown","27b296ce":"markdown","7ab79711":"markdown","882dd20c":"markdown","9456dc08":"markdown","c335bce1":"markdown","ec532e22":"markdown"},"source":{"c27c3ccf":"import pandas as pd\nimport numpy as np\nfrom statistics import mode\nimport matplotlib.pyplot as plt\n%matplotlib inline","e0d2a279":"df = pd.read_csv('..\/input\/loans-train\/loans_train.csv')","0b6c28b5":"# Find the number of nulls\/NaNs in the dataset\n\ndf.apply(lambda x: sum(x.isnull()), axis=0)","07527156":"df.boxplot(column='LoanAmount', by=['Education','Self_Employed'], rot=45)\n\nplt.title(\"Boxplot of LoanAmount grouped by Education and Self_Emlpoyed\")\n\n# get rid of the automatic 'Boxplot grouped by group_by_column_name' title\nplt.suptitle(\"\")","725baffe":"df['Self_Employed'].value_counts()","a5c050bb":"df['Self_Employed'].fillna('No', inplace=True)","6c685926":"table = df.pivot_table(values='LoanAmount', \n                       index='Self_Employed', \n                       columns='Education', \n                       aggfunc=np.median)\nprint(table)","b97ddc74":"# Define function to return an element of the pivot table\ndef get_element(x):\n    return table.loc[x['Self_Employed'], x['Education']]\n\n# Replace missing values\ndf['LoanAmount'].fillna(df[df['LoanAmount'].isnull()].apply(get_element, axis=1), inplace=True)","e537f0b9":"# Verify there are no missing values in column LoanAmount\n\ndf['LoanAmount'].describe()","804728e3":"table2 = df.pivot_table(values='Dependents', \n                       index='Property_Area', \n                       columns='Education', \n                       aggfunc=lambda x: mode(x))\n\n# Define function to return an element of the pivot table\ndef get_element2(x):\n    return table2.loc[x['Property_Area'], x['Education']]\n\n# Replace missing values\ndf['Dependents'].fillna(df[df['Dependents'].isnull()].apply(get_element2, axis=1), inplace=True)","84aa4f31":"# Verify there are no missing values in column Dependents\n\ndf['Dependents'].describe()","96b4ebef":"# Create figure with two subplots\nfig = plt.figure(figsize=(16,4))\n\n# Plot LoanAmount\nax1 = fig.add_subplot(1, 2, 1)\nax1.set_title(\"Histogram of LoanAmount\")\nax1.set_xlabel('LoanAmount')\nax1.set_ylabel('Number of Applicants')\ndf['LoanAmount'].hist(bins=20)\n\n# Plot LoanAmount_log\nax2 = fig.add_subplot(1, 2, 2)\nax2.set_title(\"Histogram of ApplicantIncome\")\nax2.set_xlabel('ApplicantIncome')\nax2.set_ylabel('Number of Applicants')\ndf['ApplicantIncome'].hist(bins=20) ","728494c3":"# Use a log transformation to decrease the impact of extreme values in column LoanAmount\ndf['LoanAmount_log'] = np.log(df['LoanAmount'])","322284a3":"# Create TotalIncome column and apply a log transformation\ndf['TotalIncome'] = df['ApplicantIncome'] + df['CoapplicantIncome']\ndf['TotalIncome_log'] = np.log(df['TotalIncome'])","59ea557b":"# Create figure with four subplots\nfig = plt.figure(figsize=(16,10))\n\n# Plot LoanAmount\nax1 = fig.add_subplot(2, 2, 1)\nax1.set_title(\"Histogram of LoanAmount\")\nax1.set_xlabel('LoanAmount')\nax1.set_ylabel('Number of Applicants')\ndf['LoanAmount'].hist(bins=20)\n\n# Plot LoanAmount_log\nax2 = fig.add_subplot(2, 2, 2)\nax2.set_title(\"Histogram of ApplicantIncome\")\nax2.set_xlabel('ApplicantIncome')\nax2.set_ylabel('Number of Applicants')\ndf['ApplicantIncome'].hist(bins=20)\n\n# Plot LoanAmount_log\nax3 = fig.add_subplot(2, 2, 3)\nax3.set_title(\"Histogram of LoanAmount_log\")\nax3.set_xlabel('log(LoanAmount)')\nax3.set_ylabel('Number of Applicants')\ndf['LoanAmount_log'].hist(bins=20)\n\n# Plot LoanAmount_log\nax4 = fig.add_subplot(2, 2, 4)\nax4.set_title(\"Histogram of TotalIncome_log\")\nax4.set_xlabel('log(ApplicantIncome + CoapplicantIncome)')\nax4.set_ylabel('Number of Applicants')\ndf['TotalIncome_log'].hist(bins=20) ","96648ecc":"Similarly, the missing values for Gender, Married, Loan_Amount_Term and Credit_History can be imputed as well.","218ce3ab":"[Continue with Tutorial 4: Comparison of Classifiers](https:\/\/www.kaggle.com\/nikniko101v\/tutorial-4-comparison-of-classifiers)","180d4f86":"```pyton\ndf['LoanAmount'].fillna(df['LoanAmount'].mean(), inplace=True)\n```","5bf3eef4":"# C. Treatment of Outliers and Creation of Derived Features\n\nIn the previous lab exercise, we observed that `LoanAmount` and `ApplicantIncome` contain some outliers, i.e. extreme values. Let's take a look at their histograms again.","9c7ba056":"Similar to the example above we can fill in missing values in categorical columns based on the values in other categorical columns. For example, we may want to fill in the missing values in column Dependents with the most frequent value of Dependents per Property_Area and Education. We can use the mode() function from the Python module statistics to find the most frequent value in a list\/column.","98fb9f59":"At the other extreme, we could build an ML model to predict `LoanAmount` on the basis of other columns and then use the model to predict the missing values.\n\nSince, the purpose now is to practice data munging prior applying ML algorithms, we can take an approach, which lies somewhere in between these 2 extremes. We may hypothesise that attributes `Education` and `Self_Employed` combined can give a good estimate of `LoanAmount`.\n\nFirst, let\u2019s look at the boxplot to see if a trend exists:","e7a8d8f1":"## Impute Missing Values in Column LoanAmount\n\nThere are numerous ways to impute, i.e. fill in the missing values in column `LoanAmount` \u2013 the simplest being replacement by mean, which can be done with the following code:](http:\/\/)","037f04f9":"We can see some variation in the median of `LoanAmount` for each group and these medians can be used for imputing the missing values in each group. But first, we have to ensure that `Self_Employed` and `Education` do not have missing values.\n\nWe know already that `Education` has no missing values, while `Self_Employed` has 32 missing values. Let\u2019s look at the frequency table for `Self_Employed`:","da688d16":"# B. Treatment of Missing Values","552017c4":"# TUTORIAL 3: DATA PREPARATION","d83fd645":"The histograms show that both new features have distribution closer to normal than the original features `LoanAmount` and `ApplicantIncome`.\n\nSimilar to `TotalIncome_log`, it is possible to derive other additional information from the data. For example, a feature for `LoanAmount\/TotalIncome` can be created, which might make sense as it gives an idea of how well the applicant is suited to pay back the loan.","89c1b655":"## Check for Missing Values\n\nIt is often useful to impute missing values as many ML algorithms do not work with missing data and even if they do, imputing these values often helps to build a more accurate predictive model.","4e37d7aa":"## Impute Missing Values in Column Dependents","e12a27b5":"Regarding `ApplicantIncome`, one intuition can be that some applicants have a low income but a co-applicant with a high income. So, it might be a good idea to combine both incomes as total income and take a log transformation of it.","9c6d07e8":"Since ~86% of the values are \u201cNo\u201d, it is safe to impute the missing values as \u201cNo\u201d as there is a high probability of guessing correctly. This can be done using the following code:","dd2caf52":"Let's plot again histograms for LoanAmount and ApplicantIncome as well as histograms for the two new attributes we created.","27b296ce":"# A. Import Python Modules and Dataset","7ab79711":"Next, we create a pivot table, which contains the median values for all four groups.","882dd20c":"Finally, we define a function, which returns the values in the pivot table and apply it to fill the missing values of `LoanAmount`.","9456dc08":"This is an extended version of section 4 of the tutorial at https:\/\/www.analyticsvidhya.com\/blog\/2016\/01\/complete-tutorial-learn-data-science-python-scratch-2\/. I publush it for educational purpuses only.\n\nIn Tutorial 2, we discovered a few problems in the loans dataset, which need to be resolved before the dataset is ready for building a predictive model. This exercise is typically referred as either *data preparation*, or *data munging*, or *data wrangling*. \n\nThe problems identified in Tutorial 2 are:\n\n- There are missing values in some columns. We can estimate these values depending on the number of missing values and the expected importance of the column.\n\n- We observed that ApplicantIncome and LoanAmount seem to contain extreme values at either end. Although they might make intuitive sense, they should be treated appropriately.","c335bce1":"Note that missing values may not always be nulls\/NaNs. For instance, if `Loan_Amount_Term` is 0, does this value make sense or should it be considered missing? That is, we need to understand the dataset well in order to deterime which values are actually missing.","ec532e22":"Let\u2019s analyse LoanAmount first. Since the extreme values are practically possible, i.e. some people might apply for high-value loans, instead of ignoring the data rows with extreme LoanAmount values, we can use a log transformation to decrease any negative impact they may have later on when applying a ML algorithm to build a predictive model."}}