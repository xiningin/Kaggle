{"cell_type":{"3fd27719":"code","29c92150":"code","abdc8001":"code","450c26c4":"code","30918c53":"code","90565e95":"code","968a2043":"code","28f6de48":"code","564ebe48":"code","6af2d772":"code","a26611a7":"code","2790f3d9":"code","3e7eb44a":"code","f53c6db7":"code","ccd5ffcb":"code","59bbc2c8":"code","9be2ef02":"code","05e53f1c":"code","4d2c46bf":"markdown","4d2ef264":"markdown","89fdd122":"markdown","1ef774a4":"markdown","6beff99b":"markdown","8d20bb8b":"markdown","1dfb0590":"markdown","700e2739":"markdown","9b9e7ea5":"markdown","215ad2c0":"markdown","3ce55377":"markdown","ac890dbf":"markdown","421ae2b5":"markdown","a4bc723c":"markdown","a53ca65d":"markdown","d1bf38ee":"markdown"},"source":{"3fd27719":"import os #paths to file\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport warnings# warning filter\n\n\n#ploting libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n#relevant ML libraries\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n\n#ML models\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\n\n#default theme\nsns.set(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=False, rc=None)\n\n#warning hadle\nwarnings.filterwarnings(\"ignore\")","29c92150":"#list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","abdc8001":"# read in csv file as a DataFrame\niris_df = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\n#explore the first 5 lines\niris_df.head()","450c26c4":"#the Id column is not needed, let's drop it\niris_df.drop('Id',axis=1,inplace=True)","30918c53":"#summary statistics\niris_df.describe()","90565e95":"#column information\niris_df.info(verbose=True, null_counts=True)","968a2043":"iris_df.shape # shape of dataset","28f6de48":"iris_df['Species'].value_counts()#counting the species","564ebe48":"#Checking the diffrences for each feature divided by species\nsns.pairplot(iris_df, hue='Species', markers='.')\nplt.show()","6af2d772":"#getting a list of features\nfeatures = list(iris_df.columns[:-1])\n\nfor feature in features: \n    sns.violinplot(y='Species', x=feature, data=iris_df, inner='quartile')\n    plt.show()","a26611a7":"#plotting the correlation matrix\nsns.heatmap(iris_df.corr(),annot=True,cmap='cubehelix_r')","2790f3d9":"X = iris_df[features]\ny = iris_df['Species']\n#label encoder\nencoder = LabelEncoder()\ny = encoder.fit_transform(y)","3e7eb44a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","f53c6db7":"#setting 2-10 neighbors for putting the new data into a class\naccuracy = []\nneighbors = []\nfor n_neighbor in range(2,11):\n    model=KNeighborsClassifier(n_neighbors=n_neighbor) \n    model.fit(X_train,y_train)\n    prediction=model.predict(X_test)\n    knn = accuracy_score(prediction,y_test)\n    accuracy.append(knn)\n    neighbors.append(n_neighbor)\n    print(f'knn with {n_neighbor} n_neighbors has The accuracy of {knn*100}%')\n    ","ccd5ffcb":"KN = KNeighborsClassifier(n_neighbors=4)\nKN.fit(X_train, y_train)\n\ny_predict = KN.predict(X_test)\n\n#  prediction Summary by species\nprint(classification_report(y_test, y_predict))\n\n# Accuracy score\nKN_SC = accuracy_score(y_predict,y_test)\nprint('accuracy is',KN_SC)","59bbc2c8":"LR = LogisticRegression()\nLR.fit(X_train, y_train)\n\ny_predict = LR.predict(X_test)\n\n#  prediction Summary by species\nprint(classification_report(y_test, y_predict))\n\n# Accuracy score\nLR_SC = accuracy_score(y_predict,y_test)\nprint('accuracy is',accuracy_score(y_predict,y_test))","9be2ef02":"NB = GaussianNB()\nNB.fit(X_train, y_train)\n\ny_predict = NB.predict(X_test)\n\n#prediction Summary by species\nprint(classification_report(y_test, y_predict))\n\n# Accuracy score\nNB_SC = accuracy_score(y_predict,y_test)\nprint('accuracy is',NB_SC)","05e53f1c":"score = [KN_SC,LR_SC,NB_SC]\nModels = pd.DataFrame({\n    'n_neighbors': [\"K - Nearest Neighbors\",\"Logistic Regression\",\"Naive Bayes\"],\n    'Score': score})\nModels.sort_values(by='Score', ascending=False)","4d2c46bf":"#  Introduction\n\nThis notebook is exploring various data science and machine learning applications by classifying 3 types of the iris flower:\n\n1. **Iris setosa**\n<table>\n  <tr><td>\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/56\/Kosaciec_szczecinkowaty_Iris_setosa.jpg\"\n         width=\"250\" height=\"200\">\n      <tr><td align=\"center\">\n  <\/td><\/tr>\n  <\/td><\/tr>\n<\/table>\n2. **Iris virginica**\n<table>\n  <tr><td>\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/38\/Iris_virginica_-_NRCS.jpg\"\n         width=\"250\" height=\"200\">\n      <tr><td align=\"center\">\n  <\/td><\/tr>\n  <\/td><\/tr>  \n<\/table>\n\n3. **Iris versicolor**\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/c\/cd\/Iris_versicolor_FWS.jpg\"\n         width=\"250\" height=\"200\">\n      <tr><td align=\"center\">\n  <\/td><\/tr>\n  <\/td><\/tr>  \n<\/table>\n\n# Data Id \ud83d\udccb\nThis dataset is named [Iris flower data set](https:\/\/en.wikipedia.org\/wiki\/Iris_flower_data_set). The dataset contains a set of **150** records under **5 attributes**: \n1. **sepal length in cm** \n2. **sepal width in cm**  \n3. **petal length in cm**  \n4. **petal width in cm** \n5. **species** -  Iris setosa, Iris virginica, Iris versicolor.\n\n## The main objective for this dataset:\nusing machine learning techniques to categorize Iris flowers by species.\n\n\n# Libraries \ud83d\udcd5\ud83d\udcd7\ud83d\udcd8","4d2ef264":"# Exploratory data analysis \ud83d\udcbb","89fdd122":"# Machine learning models\n\n## the models i am using in this notebook:\n\n* ### K - Nearest Neighbors\n\n* ### Logistic Regression\n\n* ### Naive Bayes\n\n## The Process of Modeling the Data:\n\n1. Importing the model\n\n2. Fitting the model\n\n3. Predicting the species\n\n4. Classification report by species of iris\n\n5. Overall accuracy\n\n\n## K - Nearest Neighbors\nFirst, I will explore the knn method with different n_neighbors.\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/d9\/K-nearest_Neighbors.png\"\n         >\n      <tr><td align=\"center\">\n  <\/td><\/tr>\n  <\/td><\/tr>\n<\/table>\n\n[Click here for knn model info](https:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm)\n","1ef774a4":"## Logistic Regression\nNow, I will explore the Logistic Regression model.\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/files.realpython.com\/media\/log-reg-2.e88a21607ba3.png\"\n          width=\"500\" height=\"400\">\n      <tr><td align=\"center\">\n  <\/td><\/tr>\n  <\/td><\/tr>\n<\/table>\n\n[Click here for Logistic Regression model info](https:\/\/en.wikipedia.org\/wiki\/Logistic_regression)\n","6beff99b":"## Summary of the data acquired so far:\n* Overall there are 150 observations with 4 features each (sepal length, sepal width, petal length, petal width). \u2705\n* There are no null values, therefore no need to handle any missing values. \u2705\n* each species (setosa, versicolor, virginica) has an even amount of  observations in the dataset (50 each). \u2705","8d20bb8b":"4,6,7,8,9,10 n_neighbors match 100%\n\nI chose 4 n_neighbors ","1dfb0590":"# Conclusion\n\nthe scores of the models:","700e2739":"## Conclusions from the visualizations:\n1. Iris setosa is very distinguishable in the feature values.\n2. Iris versicolor and iris virginica overlap with similar data, the latter is tending to be slightly larger overall.","9b9e7ea5":"## Correlation matrix","215ad2c0":"## Naive Bayes\nFinally, I will explore the Naive Bayes model.\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/b\/b4\/Naive_Bayes_Classifier.gif\"\n          width=\"500\" height=\"400\">\n      <tr><td align=\"center\">\n  <\/td><\/tr>\n  <\/td><\/tr>\n<\/table>\n\n[Click here for Naive Bayes model info](https:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier)\n","3ce55377":"# \ud83d\udd3c\nThis concludes the iris Dataset with knn for now, please upvote if you found this intresting!\n\nThis is my first publish of a notebook so i would love to read comments for improvement","ac890dbf":"Iris-setosa Iris-versicolor Iris-virginica are converted to 0, 1, 2 respectively\n\nNow i will split the dataset into training data and testing data which is 8:2 ratio:","421ae2b5":"# building ML model fundementals\n\nfirst of all we will divide our dataset into two variables `X` as the features we defined earlier and `y` as the column of species we want to define:\n\n`features = ['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']` \n\n`X = iris_df[features]`\n\n`y = iris_df['Species']`","a4bc723c":"# Ploting visuals for the data \ud83d\udcca\n\nwe want to see the diffrences for each feature per speceis of iris:","a53ca65d":"We want to see if there is some overlap in the relationships of different species:","d1bf38ee":"# File path"}}