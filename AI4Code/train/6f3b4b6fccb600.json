{"cell_type":{"420ab6b7":"code","0207a65f":"code","e5705a0e":"code","85ff0fa9":"code","65050e39":"code","769d0369":"code","2cd589f2":"code","7d9d80f8":"code","1fde19e4":"code","200cb329":"code","9eecd6cb":"code","e62d8ea7":"code","286433f9":"code","05d24ad8":"code","37536ed5":"code","33e63561":"code","0e331f2a":"code","f3c90786":"code","fa7a055e":"code","b3458dbb":"code","44e1660b":"code","8ea925c3":"code","7c08a5fb":"markdown","88eb9754":"markdown","7d8642df":"markdown","fba2350e":"markdown","8a1eb908":"markdown"},"source":{"420ab6b7":"# coding: utf-8\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.preprocessing import LabelEncoder\nimport gc\nimport os\n\nfrom sklearn.model_selection import KFold\n\nimport time\nimport lightgbm as lgb\n\nfrom sklearn.metrics import mean_squared_error\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns ","0207a65f":"train = pd.read_csv(\"..\/input\/train.csv\", parse_dates=[\"first_active_month\"])\nprint(\"shape of train : \",train.shape)\ntest = pd.read_csv(\"..\/input\/test.csv\", parse_dates=[\"first_active_month\"])\nprint(\"shape of test : \",test.shape)\n\nht = pd.read_csv(\"..\/input\/historical_transactions.csv\")","e5705a0e":"import datetime\n\nfor df in [train,test]:\n    df['first_active_month'] = pd.to_datetime(df['first_active_month'])\n    df['start_year'] = df['first_active_month'].dt.year\n    df['start_month'] = df['first_active_month'].dt.month\n    df['elapsed_time'] = (datetime.date(2018, 2, 1) - df['first_active_month'].dt.date).dt.days\n\nytrain = train['target']\ndel train['target']","85ff0fa9":"# binarize the categorical variables where it makes sense\nht['authorized_flag'] = ht['authorized_flag'].map({'Y':1, 'N':0})\nht['category_1'] = ht['category_1'].map({'Y':1, 'N':0})\n","65050e39":"ht['category_2x1'] = (ht['category_2'] == 1) + 0\nht['category_2x2'] = (ht['category_2'] == 2) + 0\nht['category_2x3'] = (ht['category_2'] == 3) + 0\nht['category_2x4'] = (ht['category_2'] == 4) + 0\nht['category_2x5'] = (ht['category_2'] == 5) + 0","769d0369":"ht['category_3A'] = (ht['category_3'].astype(str) == 'A') + 0\nht['category_3B'] = (ht['category_3'].astype(str) == 'B') + 0\nht['category_3C'] = (ht['category_3'].astype(str) == 'C') + 0","2cd589f2":"def aggregate_historical_transactions(history):\n    \n    history.loc[:, 'purchase_date'] = pd.DatetimeIndex(history['purchase_date']).\\\n                                      astype(np.int64) * 1e-9\n    \n    agg_func = {\n        'authorized_flag': ['sum', 'mean'],\n        'category_1': ['sum', 'mean'],\n        'category_2': ['nunique'],\n        'category_3A': ['sum'],\n        'category_3B': ['sum'],\n        'category_3C': ['sum'],\n        'category_2x1': ['sum','mean'],\n        'category_2x2': ['sum','mean'],\n        'category_2x3': ['sum','mean'],\n        'category_2x4': ['sum','mean'],\n        'category_2x5': ['sum','mean'],        \n        'city_id': ['nunique'],\n        'installments': ['sum', 'median', 'max', 'min', 'std'],\n        'merchant_category_id': ['nunique'],\n        'merchant_id': ['nunique'],\n        'month_lag': ['min', 'max'],\n        'purchase_amount': ['sum', 'median', 'max', 'min', 'std'],\n        'purchase_date': [np.ptp, 'max', 'min'],\n        'state_id': ['nunique'],\n        'subsector_id': ['nunique'],\n\n        }\n    agg_history = history.groupby(['card_id']).agg(agg_func)\n    agg_history.columns = ['hist_' + '_'.join(col).strip() \n                           for col in agg_history.columns.values]\n    agg_history.reset_index(inplace=True)\n    \n    df = (history.groupby('card_id')\n          .size()\n          .reset_index(name='hist_transactions_count'))\n    \n    agg_history = pd.merge(df, agg_history, on='card_id', how='left')\n    \n    return agg_history\n\nhistory = aggregate_historical_transactions(ht)\n\ndel ht\ngc.collect()","7d9d80f8":"new_merchant = pd.read_csv(\"..\/input\/new_merchant_transactions.csv\")","1fde19e4":"new_merchant.head(5)","200cb329":"\nnew_merchant['authorized_flag'] = new_merchant['authorized_flag'].map({'Y':1, 'N':0})\n\nnew_merchant['category_1'] = new_merchant['category_1'].map({'Y':1, 'N':0})\nnew_merchant['category_3A'] = (new_merchant['category_3'].astype(str) == 'A') + 0\nnew_merchant['category_3B'] = (new_merchant['category_3'].astype(str) == 'B') + 0\nnew_merchant['category_3C'] = (new_merchant['category_3'].astype(str) == 'C') + 0\n\nnew_merchant['category_2x1'] = (new_merchant['category_2'] == 1) + 0\nnew_merchant['category_2x2'] = (new_merchant['category_2'] == 2) + 0\nnew_merchant['category_2x3'] = (new_merchant['category_2'] == 3) + 0\nnew_merchant['category_2x4'] = (new_merchant['category_2'] == 4) + 0\nnew_merchant['category_2x5'] = (new_merchant['category_2'] == 5) + 0","9eecd6cb":"new_merchant['purchase_date'] = pd.DatetimeIndex(new_merchant['purchase_date']).\\\n                                      astype(np.int64) * 1e-9","e62d8ea7":"def aggregate_new_transactions(new_trans):    \n    \n    \n    agg_func = {\n        'authorized_flag': ['sum', 'mean'],\n        'category_1': ['sum', 'mean'],\n        'category_2': ['nunique'],\n        'category_3A': ['sum'],\n        'category_3B': ['sum'],\n        'category_3C': ['sum'],     \n        'category_2x1': ['sum','mean'],\n        'category_2x2': ['sum','mean'],\n        'category_2x3': ['sum','mean'],\n        'category_2x4': ['sum','mean'],\n        'category_2x5': ['sum','mean'],        \n\n        'city_id': ['nunique'],\n        'installments': ['sum', 'median', 'max', 'min', 'std'],\n        'merchant_category_id': ['nunique'],\n        'merchant_id': ['nunique'],\n        'month_lag': ['min', 'max'],\n        'purchase_amount': ['sum', 'median', 'max', 'min', 'std'],\n        'purchase_date': [np.ptp, 'max', 'min'],\n        'state_id': ['nunique'],\n        'subsector_id': ['nunique']        \n        }\n    agg_new_trans = new_trans.groupby(['card_id']).agg(agg_func)\n    agg_new_trans.columns = ['new_' + '_'.join(col).strip() \n                           for col in agg_new_trans.columns.values]\n    agg_new_trans.reset_index(inplace=True)\n    \n    df = (new_trans.groupby('card_id')\n          .size()\n          .reset_index(name='new_transactions_count'))\n    \n    agg_new_trans = pd.merge(df, agg_new_trans, on='card_id', how='left')\n    \n    return agg_new_trans\n\nnew_trans = aggregate_new_transactions(new_merchant)\n\ndel new_merchant","286433f9":"print(train.shape)\nprint(test.shape)\n\nxtrain = pd.merge(train, new_trans, on='card_id', how='left')\nxtest = pd.merge(test, new_trans, on='card_id', how='left')\n\ndel new_trans\n\nprint(xtrain.shape)\nprint(xtest.shape)\n\nxtrain = pd.merge(xtrain, history, on='card_id', how='left')\nxtest = pd.merge(xtest, history, on='card_id', how='left')\n\ndel history\n\nprint(xtrain.shape)\nprint(xtest.shape)\n","05d24ad8":"xtrain.head(3)","37536ed5":"xtrain.drop('first_active_month', axis = 1, inplace = True)\nxtest.drop('first_active_month', axis = 1, inplace = True)","33e63561":"categorical_feats = ['feature_1', 'feature_2', 'feature_3']\n\nfor col in categorical_feats:\n    print(col)\n    lbl = LabelEncoder()\n    lbl.fit(list(xtrain[col].values.astype('str')) + list(xtest[col].values.astype('str')))\n    xtrain[col] = lbl.transform(list(xtrain[col].values.astype('str')))\n    xtest[col] = lbl.transform(list(xtest[col].values.astype('str')))","0e331f2a":"df_all = pd.concat([xtrain, xtest])\ndf_all = pd.get_dummies(df_all, columns=categorical_feats)\n\nlen_train = xtrain.shape[0]\n\nxtrain = df_all[:len_train]\nxtest = df_all[len_train:]","f3c90786":"# prepare for modeling\nid_train = xtrain['card_id'].copy(); xtrain.drop('card_id', axis = 1, inplace = True)\nid_test = xtest['card_id'].copy(); xtest.drop('card_id', axis = 1, inplace = True)\n\n\nnfolds = 10\nfolds = KFold(n_splits= nfolds, shuffle=True, random_state=15)","fa7a055e":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': 10,\n         'learning_rate': 0.005,\n         \"min_child_samples\": 100,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1}","b3458dbb":"feature_importance_df = np.zeros((xtrain.shape[1], nfolds))\nmvalid = np.zeros(len(xtrain))\nmfull = np.zeros(len(xtest))\n\n\nstart = time.time()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(xtrain.values, ytrain.values)):\n    print('----')\n    print(\"fold n\u00b0{}\".format(fold_))\n    \n    x0,y0 = xtrain.iloc[trn_idx], ytrain[trn_idx]\n    x1,y1 = xtrain.iloc[val_idx], ytrain[val_idx]\n    \n    trn_data = lgb.Dataset(x0, label= y0); val_data = lgb.Dataset(x1, label= y1)\n    \n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], \n                    verbose_eval=500, early_stopping_rounds = 150)\n    mvalid[val_idx] = clf.predict(x1, num_iteration=clf.best_iteration)\n    \n    feature_importance_df[:, fold_] = clf.feature_importance()\n    \n    mfull += clf.predict(xtest, num_iteration=clf.best_iteration) \/ folds.n_splits","44e1660b":"ximp = pd.DataFrame()\nximp['feature'] = xtrain.columns\nximp['importance'] = feature_importance_df.mean(axis = 1)\n\nplt.figure(figsize=(14,14))\nsns.barplot(x=\"importance\",\n            y=\"feature\",\n            data=ximp.sort_values(by=\"importance\",\n                                           ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()","8ea925c3":"xsub = pd.DataFrame()\nxsub['card_id']  = id_test\nxsub['target'] = mfull\nxsub.to_csv('sub_lgb.csv', index = False)","7c08a5fb":"## Historical data","88eb9754":"## Combine","7d8642df":"## New data","fba2350e":"# Data","8a1eb908":"# Model"}}