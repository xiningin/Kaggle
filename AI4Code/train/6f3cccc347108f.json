{"cell_type":{"9dff2ffc":"code","ed33bcd9":"code","fcaed805":"code","d574fb50":"code","9725fbba":"code","bddcf651":"code","3caa31ff":"code","b82c1317":"markdown"},"source":{"9dff2ffc":"slideshowlength=999\ndebug=False\nif slideshowlength>59994 or debug == False: #prevent keyerror set debug false to see the full score\n    slideshowlength=59994\niterLimit=10**3 #sets the swap recursion limit. 10^4 max\nwillSwap=0 # set to 0 to disable swaps, 1 to enable\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom random import seed\nfrom random import random\nfrom random import choice\nfrom random import randint\nimport time\nstart = time.perf_counter()\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\ndef checkCommons (tags1,tags2):\n    commons=0\n    for key in tags1.keys():\n        if key in tags2:\n            commons+=1\n    return commons\n'''\ndef checkUniq (tags1,tags2):\n    noncommons=0\n    for key in tags1.keys():\n        if key not in tags2:\n            noncommons+=1\n    return noncommons\n'''\ndef points (tags1,tags2):\n    comm=checkCommons(tags1,tags2)\n    #unq1=checkUniq(tags1,tags2)\n    unq1=len(tags1)-comm\n    #unq2=checkUniq(tags2,tags1)\n    unq2=len(tags2)-comm\n    return min(unq1,unq2,comm)\ndef calcScore():\n    f = open(\"submission.txt\", \"r\")\n    mylines=f.readlines()\n    f.close()\n    totalpoints=0\n    line=''\n    nline=''\n    #could get rid of \\n s here but below should work fine\n    mylines[len(mylines)-1]=mylines[len(mylines)-1]+\"\\n\"\n    for i in range(1,len(mylines)-1):\n        line = mylines[i][:-1]\n        nline = mylines[i+1][:-1]\n        totalpoints+=points(pics[line],pics[nline])\n    return totalpoints\n\ndef tripleSwap(s1,s2,s3,show,pics,points):\n#tripleswap(index1,index2,index3)-->0 or 1 or...or 5\n#0 no possible improvement by swapping these indexes\n#1 1->3 2->1 3->2 improves\n#2 1->2 2->3 3->1 improves\n#3 1->1 2->3 3->2 swap 2 and 3 improves\n#4 1->3 2->2 3->1 swap 1 and 3 improves\n#5 1->2 2->1 3->3 swap 1 and 2 improves\n#return value has priorities (if 1 improves 2 won't be checked, if none improves returns 0). \n#This is done bc. if i get any improvement i will be happy, no need to push it too far\n    if s1>=999 or s2>=999 or s3>=999:\n        print(\"SOMEHOW IT INCREMENTED ITS VALUE\")\n        print(\"s1:\",s1,\"s2:\",s2,\"s3:\",s3)\n        return 0\n    #try 1->3 2->1 3->2\n    new1=points(pics[show[s1-1]],pics[show[s2]])+points(pics[show[s1+1]],pics[show[s2]])\n    new2=points(pics[show[s2-1]],pics[show[s3]])+points(pics[show[s2+1]],pics[show[s3]])\n    new3=points(pics[show[s3-1]],pics[show[s1]])+points(pics[show[s3+1]],pics[show[s1]])\n    old1=points(pics[show[s1-1]],pics[show[s1]])+points(pics[show[s1+1]],pics[show[s1]])\n    old2=points(pics[show[s2-1]],pics[show[s2]])+points(pics[show[s2+1]],pics[show[s2]])\n    old3=points(pics[show[s3-1]],pics[show[s3]])+points(pics[show[s3+1]],pics[show[s3]])\n    improvefor1=new1-old1\n    improvefor2=new2-old2\n    improvefor3=new3-old3\n    if(improvefor1+improvefor2+improvefor3>0):\n        print (\"IMPROVED\")\n        return 1\n    #try 1->2 2->3 3->1\n    new1=points(pics[show[s1-1]],pics[show[s3]])+points(pics[show[s1+1]],pics[show[s3]])\n    new2=points(pics[show[s2-1]],pics[show[s1]])+points(pics[show[s2+1]],pics[show[s1]])\n    new3=points(pics[show[s3-1]],pics[show[s2]])+points(pics[show[s3+1]],pics[show[s2]])\n    improvefor1=new1-old1\n    improvefor2=new2-old2\n    improvefor3=new3-old3\n    if(improvefor1+improvefor2+improvefor3>0):\n        print (\"IMPROVED\")\n        return 2\n    #try 1->1 2->3 3->2 (swap 2, wont be useful as swapping 2 didnt increase)\n    new1=points(pics[show[s1-1]],pics[show[s1]])+points(pics[show[s1+1]],pics[show[s1]])\n    new2=points(pics[show[s2-1]],pics[show[s3]])+points(pics[show[s2+1]],pics[show[s3]])\n    new3=points(pics[show[s3-1]],pics[show[s2]])+points(pics[show[s3+1]],pics[show[s2]])\n    improvefor1=new1-old1\n    improvefor2=new2-old2\n    improvefor3=new3-old3\n    if(improvefor1+improvefor2+improvefor3>0):\n        print (\"IMPROVED\")\n        return 3\n    #try 1->3 2->2 3->1 (swap 2, wont be useful as swapping 2 didnt increase)\n    new1=points(pics[show[s1-1]],pics[show[s3]])+points(pics[show[s1+1]],pics[show[s3]])\n    new2=points(pics[show[s2-1]],pics[show[s2]])+points(pics[show[s2+1]],pics[show[s2]])\n    new3=points(pics[show[s3-1]],pics[show[s1]])+points(pics[show[s3+1]],pics[show[s1]])\n    improvefor1=new1-old1\n    improvefor2=new2-old2\n    improvefor3=new3-old3\n    if(improvefor1+improvefor2+improvefor3>0):\n        print (\"IMPROVED\")\n        return 4\n    #try 1->2 2->1 3->3 (swap 2, wont be useful as swapping 2 didnt increase)TODO\n    new1=points(pics[show[s1-1]],pics[show[s2]])+points(pics[show[s1+1]],pics[show[s2]])\n    new2=points(pics[show[s2-1]],pics[show[s1]])+points(pics[show[s2+1]],pics[show[s1]])\n    new3=points(pics[show[s3-1]],pics[show[s3]])+points(pics[show[s3+1]],pics[show[s3]])\n    improvefor1=new1-old1\n    improvefor2=new2-old2\n    improvefor3=new3-old3\n    if(improvefor1+improvefor2+improvefor3>0):\n        print (\"IMPROVED\")\n        return 5\n    return 0\n","ed33bcd9":"#read file put pics in their respective dicts\nvertical_pics={}\npics={}\nlengths={}\nvertical_lengths={}\nimport os\nfile1 = open(\"\/kaggle\/input\/hashcode-photo-slideshow\/d_pet_pictures.txt\",\"r\")\nmylines=file1.readlines()\nfile1.close()\nn=int(mylines[0])\nmylines.pop(0)#forgetting this cost me 4 hours :))))))))))))))))))))))))))))))))))))))))))))))))))))))))\nfor i in range(n):\n    photo=mylines[i].split()\n    if photo[0]=='V':\n        photo.pop(0)\n        vertical_lengths[i]=int(photo[0])#these are handled under in the horribly suboptimal while loop\n        photo.pop(0)\n        tags={}\n        for tag in photo:\n            tags[tag]=1\n        vertical_pics[i]=tags\n    if photo[0]=='H':\n        photo.pop(0)\n        lengths[str(i)]=int(photo[0])\n        #TODO str may fuck up, check if it works, we use int on value so we can use max() TODO\n        photo.pop(0)\n        tags={}\n        for tag in photo:\n            tags[tag]=1\n        pics[str(i)]=tags\nprint(len(lengths))\nprint(len(vertical_lengths))\npairs=0\ngoal=int(len(vertical_pics)\/2)","fcaed805":"#VERTICAL PAIRS aim for max tag per slide greedy\n#normally you dont want to have 2*maxtagcount\/3 tags since points decrease\n#ie. if a photo has all tags then it will get 0 from both transitions\n#there is some serious room to improve here\nwhile(pairs<goal):\n    #get the maximum amount of tags possible greedy\n    max_key1 = max(vertical_lengths, key=vertical_lengths.get)\n    #TODO check if it's comparing the right thing (not the photo names) TODO\n    vertical_lengths.pop(max_key1)\n    mymax1=vertical_pics.pop(max_key1)\n    max_key2 = max(vertical_lengths, key=vertical_lengths.get)\n    vertical_lengths.pop(max_key2)\n    mymax2=vertical_pics.pop(max_key2)\n    mymax1={**mymax1,**mymax2}#this is horrible it is x=x|y\n    pics[str(max_key1)+' '+str(max_key2)]=mymax1\n    lengths[str(max_key1)+' '+str(max_key2)]=len(mymax1)\n    pairs+=1\n    #print(pics[str(max_key1)+' '+str(max_key2)])\nprint(len(vertical_lengths),\"= 0\")#should be 0\nprint(pairs)\n","d574fb50":"#SLIDESHOW GREEDY\n#FOR SLIDE:\n    #FIND THE NEXT SLIDE THAT GIVES YOU THE MOST POINTS \n    #SET IT AS THE LAST SLIDE\n#REPEAT UNTILL THERE ARE NO UNUSED SLIDES LEFT\nfirstslide=max(lengths,key=lengths.get) #this is dumb but we will swap anyways, ideally you would add to both sides,\nmaxposs=lengths[firstslide]\nlengths.pop(firstslide)\nlastslide=firstslide\nslides=\"\"\nslides+=lastslide+\"\\n\"\n\ntotalpoints=0\ni=0 \n#while(len (lengths)>0):#this will prevent it from looping when there is no picture in lengths CAUSES ERROR WHEN A SLIDE THAT adds 0 points must be added\nwhile(i<slideshowlength):#just to limit runtime,use the one above to get the max possible with this\n    i+=1\n    currpt=0\n    maxpt=0\n    maxpic=\"\"\n    #j=0\n    #k=0\n    for picture in lengths:\n        #j+=1\n        currpt=0\n        if(int(lengths[picture]\/2)>maxpt):#TODO WHAT IF WE CANT GET ANY POINT FOR THIS SLIDE TODO ADD A FIX AFTER FOR LOOP (IF MAXPIC=='') MAXPIC=LENGTHS[0]... \n                                            #THAT ADDS THE FIRST SLIDE AS THE NEXT SLIDE OR \n                                            #CREATE A SECOND SLIDESHOW AND ADD IT FROM THE MAX POINT TO THIS\n                                            #BOTH WOULD FIX THE KEYERROR ISSUE WITH THE WHILE ANY PICS LEFT LOOP(ADDS 5 MORE SLIDES)\n            #k+=1\n            currpt=points(pics[picture],pics[lastslide])\n            if(currpt>maxpt):\n                maxpic=picture\n                maxpt=currpt\n            \n    #print(\"skipped\", k ,\"useless pics in this iter with length\/2 > maxpt comparison\")\n    totalpoints+=maxpt\n    maxposs=int(lengths[maxpic]\/2)\n    lengths.pop(maxpic)\n    lastslide=maxpic\n    slides+=lastslide+\"\\n\"\n    #if(i%10==0):\n        #print(i\/10,\"% maxposs of the lastslide is=\",maxposs)\n        #just to see the progress\n#print(slides)\nslides=slides[:-1]#get rid of the \\n at the end\nprint(totalpoints,\"using\",i+1,\"pictures.\")\nprint(\"last slide added\",maxpt,\"points to our score.\") #see the last point earned","9725fbba":"#SWAPPER THIS IS HORRIBLE AND NEVER WORKS. WILL BE CHANGED, SWAPPING VERTICAL PICS SEEMS LIKE A MUST\n     \n#tripleswap(index1,index2,index3)-->0 or 1 or...or 5\n#0 no possible improvement by swapping these indexes\n#1 1->3 2->1 3->2 improves\n#2 1->2 2->3 3->1 improves\n#3 1->1 2->3 3->2 swap 2 and 3 improves\n#4 1->3 2->2 3->1 swap 1 and 3 improves\n#5 1->2 2->1 3->3 swap 1 and 2 improves\n#return value has priorities (if 1 improves 2 won't be checked, if none improves returns 0). \n#This is done bc. if i get any improvement i will be happy, no need to push it too far\n\ndef pimpMySlideShow(show,rotation,iteration,totalImprovement):\n    #this disgusts me TODO use greedy, ditch randomization \n    #(it will ruin runtime but 10^11 random swaps didn't improve)\n    if(iteration>=iterLimit):\n        #print(\"Cost function improved by\",totalImprovement,\"in\",iteration,\"iterations.\")\n        return show\n    if(rotation==0):\n        #interchanging slides within the slideshow\n        s1 = randint(1, len(show)-2)#both included!\n        s2 = randint(1, len(show)-2)#IndexError: list index out of range\n        s3 = randint(1, len(show)-2)#both included!\n        if(s1==s2==s3 or s1==s2 or s2==s3 or s1==s3):\n            return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n        else:\n            tripleswap=tripleSwap(s1,s2,s3,show,pics,points)\n            if(tripleswap==1):\n                #231\n                temp=show[s1]\n                show[s1]=show[s2]\n                show[s2]=show[s3]\n                show[s3]=temp                \n                return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n            elif(tripleswap==2):\n                #312\n                temp=show[s2]\n                show[s2]=show[s1]\n                show[s1]=show[s3]\n                show[s3]=temp                \n                return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n            elif(tripleswap==3):\n                #132\n                temp=show[s2]\n                show[s2]=show[s3]\n                show[s3]=temp             \n                return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n            elif(tripleswap==4):\n                #321\n                temp=show[s1]\n                show[s1]=show[s3]\n                show[s3]=temp                \n                return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n            elif(tripleswap==5):\n                #213\n                temp=show[s1]\n                show[s1]=show[s2]\n                show[s2]=temp                \n                return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n            else:\n                #didnt improve, try again\n                return pimpMySlideShow(show,0,iteration+1,totalImprovement)\n    if(rotation==1):\n        #interchanging vertical pics between pics, find vertical slides first and put their indexes in a list\n        return show #TODO\n    \n#turn slides into a list\nnewslides=slides\nslidelist=newslides.split('\\n')\n#print(slidelist)\n#print(\"\\n\\n\\n\\n\")\ntic = time.perf_counter()\nseed(len(slidelist))\nnewslidelist=pimpMySlideShow(show=slidelist,rotation=0,iteration=0,totalImprovement=0)#0 for horizontal 1 for vertical swaps\nfor m in range(willSwap*10**9): #10**8 takes 49 secs improves none\n    newslidelist=pimpMySlideShow(newslidelist,rotation=0,iteration=m*iterLimit,totalImprovement=0)#0 for horizontal 1 for vertical swaps\n\n#print(\"\\n\\n\\n\\n\")\ntoc = time.perf_counter()\n#print(newslidelist)\n","bddcf651":"#SWITCH SLIDES (WHAT WE PUT IN SUBMISSION) WITH NEWSLIDELIST (SWAPPED SLIDES)\n'''\nswappt=0\nfor i in range(len(newslidelist)-1):\n    swappt+=points(pics[newslidelist[i+1]],pics[newslidelist[i]])\nmystr=\"\"\nfor slide in newslidelist:\n    mystr+=slide+\"\\n\"\nmystr=mystr[:-1]\nslides=mystr\ni+=1 #so that S is correct and we can comment swapping out\nprint(\"BEFORE SWAP:\",totalpoints,\"\\nAFTER SWAP:\",swappt,\"\\nDONE\")\nprint(\"Swaps took \",toc - tic,\"seconds.\")\nprint(\"Program took \",toc - start,\"seconds.\")\n'''","3caa31ff":"#PUT THE SLIDES IN SUBMISSION\nf = open(\"submission.txt\", \"w\")\nslides=str(i+1)+\"\\n\"+slides #add S line\nf.write(slides)\nf.close()\nprint(i+1)\nprint(\"Program took \",toc - start,\"seconds.\")","b82c1317":"We could also do some mergesort alike thing to crate pairs of slides.\nBut here I will avoid using my brain and just do it as greedily(?) as possible\n\n**TODO**: \n1. Fix the slide picking so that if there is no possible slide to add (that would improve score), it does one of the two I mentioned down there \n(preferably creating a new slide and merging it to the existing one from the optimal point.)\n2. Remove the hardcoded slide count and switch to the while len lenghts >0 loop (Maybe add a debug true thing to limit runtime to make it easier to see if everything runs fine)\n3. Implement greedy swapping (Existing random pimpMySlide is horrible and never improves\n4. Implement vertical picture swapping\n5. Make the vertical picture-> slide part of the code a bit smarter (Some runtime improvement would be great too)"}}