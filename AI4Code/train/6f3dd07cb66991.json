{"cell_type":{"461b7710":"code","f02030a9":"code","61767c33":"code","1ea0a7dd":"code","b0970a16":"code","1f88e21d":"code","3179a0ab":"code","41e3be3e":"code","139b655d":"code","208f08f1":"code","d6932453":"code","ca8275ab":"code","961c27a3":"code","0a06b3f3":"code","80d67445":"code","5505dd56":"code","632b9e80":"code","96886e3b":"code","6eb6e8a1":"code","44d9e560":"code","2617a0a3":"code","bd51d05d":"code","419c1e40":"code","e1d03a07":"code","d4a4877a":"code","70e8c768":"code","c8bbaa85":"code","b5e2c784":"code","bfe923bb":"code","181e3d77":"markdown","15611257":"markdown"},"source":{"461b7710":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f02030a9":"import pandas as pd\nimport matplotlib.pyplot as plt # this is used for the plot the graph \nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score","61767c33":"data=pd.read_csv('..\/input\/purchased\/Social_Network_Ads.csv')\ndata.head(5)","1ea0a7dd":"print('Our data is {} rows and {} columns'.format(data.shape[0],data.shape[1]))","b0970a16":"data.describe()","1f88e21d":"data.info()","3179a0ab":"data.isnull().sum()","41e3be3e":"data = pd.DataFrame(data)\nenc  = LabelEncoder()\nenc.fit(data['Gender'])\ndata['new Gender '] = enc.transform(data['Gender'])\ndata['Gender']=data['new Gender ']\ndata=data.iloc[:,0:5]\ndata.head()","139b655d":"plt.figure(figsize=(5,3))\nsns.heatmap(data.corr(),annot=True)\nplt.show()","208f08f1":"data=data.iloc[:,1:]\ndata.head()","d6932453":"plt.figure(figsize=(4,5))\nsns.barplot(data['Gender'], data['Purchased'])\nplt.show()","ca8275ab":"plt.figure(figsize=(11,6))\nsns.barplot(data['Age'], data['Purchased'])\nplt.show()","961c27a3":"plt.figure(figsize=(4,5))\nsns.barplot(data['Gender'], data['EstimatedSalary'], hue=data['Purchased'])\nplt.show()","0a06b3f3":"plt.figure(figsize=(11,6))\nsns.barplot(data['Age'], data['EstimatedSalary'], hue=data['Purchased'])\nplt.show()","80d67445":"ndata=data.groupby('Age',as_index=False)['Purchased'].mean()\nndata[:5]","5505dd56":"ndata.sort_values(\"Purchased\",ascending=False).head(10)","632b9e80":"plt.scatter(x=ndata[\"Age\"],y=ndata['Purchased'])","96886e3b":"sns.distplot(data['Purchased'],rug=True)\nplt.show()","6eb6e8a1":"sns.pairplot(data=data)","44d9e560":"X = data.drop(['Purchased'], axis = 1)\ny = data.Purchased.values","2617a0a3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","bd51d05d":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","419c1e40":"LogisticRegressionModel = LogisticRegression(penalty='l2',solver='sag',C=1.0,random_state=33)\nLogisticRegressionModel.fit(X_train, y_train)\nprint('LogisticRegressionModel Train Score is : ' , LogisticRegressionModel.score(X_train, y_train))\nprint('LogisticRegressionModel Test Score is : ' , LogisticRegressionModel.score(X_test, y_test))\ny_pred = LogisticRegressionModel.predict(X_test)\ny_pred_prob = LogisticRegressionModel.predict_proba(X_test)","e1d03a07":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\nsns.heatmap(CM, center = True)\nplt.show()","d4a4877a":"DecisionTreeClassifierModel = DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=33) \nDecisionTreeClassifierModel.fit(X_train, y_train)\nprint('DecisionTreeClassifierModel Train Score is : ' , DecisionTreeClassifierModel.score(X_train, y_train))\nprint('DecisionTreeClassifierModel Test Score is : ' , DecisionTreeClassifierModel.score(X_test, y_test))\ny_pred = DecisionTreeClassifierModel.predict(X_test)","70e8c768":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\nsns.heatmap(CM, center = True)\nplt.show()","c8bbaa85":"SVCModel = SVC(kernel= 'rbf',# it can be also linear,poly,sigmoid,precomputed\n               max_iter=100,C=1.0,gamma='auto')\nSVCModel.fit(X_train, y_train)\nprint('SVCModel Train Score is : ' , SVCModel.score(X_train, y_train))\nprint('SVCModel Test Score is : ' , SVCModel.score(X_test, y_test))\ny_pred = SVCModel.predict(X_test)","b5e2c784":"CM = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix is : \\n', CM)\nsns.heatmap(CM, center = True)\nplt.show()","bfe923bb":"\nmodel_accuracy = pd.Series(data=[LogisticRegressionModel.score(X_test, y_test),\n                                 DecisionTreeClassifierModel.score(X_test, y_test),\n                                                                   SVCModel.score(X_test, y_test)], \n        index=['Logistic Regression','DecisionTree Classifier','SVC'])\nfig= plt.figure(figsize=(8,3))\nmodel_accuracy.sort_values().plot.barh()\nplt.title('Model Accracy')\n","181e3d77":"make trsformation to substitute Gender column cells by (1,0) according to (Male,Female) ","15611257":"id has low corr,so we drop it"}}