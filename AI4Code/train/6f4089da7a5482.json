{"cell_type":{"89aebb54":"code","fb753cf8":"code","59000138":"code","f427ed5d":"code","5387912d":"code","81de5541":"code","6a2db527":"code","313a7eb6":"code","582b68f9":"code","a491893b":"code","0833dd47":"code","55e7a7a6":"code","b6eed8cc":"code","06d55c33":"code","ab5f4fab":"code","2e0c596e":"code","063db90d":"code","a829c853":"code","4107fa0c":"code","44f36e44":"code","c9b05537":"code","20884dbf":"code","5a507744":"markdown","8e3ae0a5":"markdown","cbb40151":"markdown","d3863352":"markdown","1cdbfad3":"markdown","3b1d1527":"markdown","55949a6e":"markdown","65546f1c":"markdown","5256d3b4":"markdown","4370e439":"markdown","974dc7de":"markdown","3d61b894":"markdown","3dc4a227":"markdown"},"source":{"89aebb54":"import numpy as np\nimport pandas as pd\nfrom os import listdir\nimport os\nfrom collections import defaultdict\nimport cv2\nimport matplotlib.pyplot as plt\nimport json\nimport math\nfrom tqdm import tqdm","fb753cf8":"dataFolder = '..\/input\/made-cv2\/data'\nwith open(os.path.join(dataFolder, 'train.json')) as json_file:\n    train_data = json.load(json_file)","59000138":"vocabulary = defaultdict(lambda: 0)\nfor entry in tqdm(train_data):\n    for number in entry['nums']:\n        text = number['text'].upper()\n        \n        for s in text:\n            vocabulary[s] +=1\nseries = pd.Series(vocabulary)","f427ed5d":"series[[a for a in series.index if ord(a) <= 57]].plot(kind='bar')","5387912d":"onlyLetters = series[[a for a in series.index if ord(a) > 57]]\nonlyLetters.plot(kind='bar')","81de5541":"def getSymbol(text, index):\n    replacements = {'\u0412': 'B', '\u0415': 'E', '\u0421':'C', '\u0425':'X', '\u0410':'A', '\u041a':'K', '\u041c':'M', '\u041d': 'H', '\u041e':'O', '\u0420' :'P','\u0422':'T', '\u0423':'Y'}\n    if text[index] in replacements:\n        return replacements[text[index]]\n    \n    return text[index]","6a2db527":"def draw(dataFrame):\n    if dataFrame.shape[0] == 0:\n        print('empty')\n        return\n    \n    fig, ax = plt.subplots(nrows=dataFrame.shape[0], ncols=1, figsize=(13,dataFrame.shape[0] * 13))\n    for idx, (index, item) in enumerate(dataFrame.iterrows()):\n        image = cv2.imread(os.path.join(dataFolder, item['file']))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        bbox = item['bbox']\n        image = cv2.line(image, (bbox[0][0],bbox[0][1]), (bbox[1][0],bbox[1][1]), (128, 0, 128), 5)\n        image = cv2.line(image, (bbox[1][0],bbox[1][1]), (bbox[2][0],bbox[2][1]), (128, 0, 0), 5)\n        image = cv2.line(image, (bbox[2][0],bbox[2][1]), (bbox[3][0],bbox[3][1]), (0, 128, 0), 5)\n        image = cv2.line(image, (bbox[3][0],bbox[3][1]), (bbox[0][0],bbox[0][1]), (0, 0, 128), 5)\n        \n        \n        if dataFrame.shape[0] == 1:\n            current_ax = ax\n        else:\n            current_ax = ax[idx]\n        current_ax.imshow(image)\n        current_ax.set_title(item['file'] + str(item['angle']))\n\n    plt.show()","313a7eb6":"def loadNumber(path, bbox):\n    image = cv2.imread(os.path.join(dataFolder, path))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    minX = max(min([point[0] for point in bbox]), 0)\n    maxX = max([point[0] for point in bbox])\n    minY = max(min([point[1] for point in bbox]), 0)\n    maxY = max([point[1] for point in bbox])\n    if image is None:\n        print(path)\n    crop_img = image[minY:maxY, minX:maxX]\n\n    return crop_img","582b68f9":"info = defaultdict(lambda : [])\n\nfor entry in tqdm(train_data):\n    for number in entry['nums']:\n        text = number['text'].upper()\n        if entry['file'] =='train\/25632.bmp':\n            continue\n            \n        for i in range(0,9):\n            symbol = ' '\n            if i < len(text):\n                symbol = getSymbol(text, i)\n\n            info[f'symbol{i + 1}'].append(symbol)\n        \n        bbox = number['box']\n        topLeft = bbox[0]\n        topRight = bbox[1]\n        botRight = bbox[2]\n        botLeft = bbox[3]\n\n        width = math.hypot(topLeft[0] - topRight[0], topLeft[1] - topRight[1])\n        height = math.hypot(topLeft[0] - botLeft[0], topLeft[1] - botLeft[1])\n        angle = np.rad2deg(np.arctan2(topLeft[1] - topRight[1], topRight[0] - topLeft[0]))\n        square = width * height\n        info['file'].append(entry['file'])\n        info['width'].append(width)\n        info['height'].append(height)\n        info['ratio'].append(width \/ height)\n        info['angle'].append(angle)\n        info['square'].append(square)\n        info['bbox'].append(bbox)\n        info['length'].append(len(number['text']))","a491893b":"dataFrame = pd.DataFrame(info)","0833dd47":"draw(dataFrame.nlargest(10, ['angle']))","55e7a7a6":"draw(dataFrame.nsmallest(10, ['angle']))","b6eed8cc":"draw(dataFrame.nsmallest(10, ['square']))","06d55c33":"draw(dataFrame.nlargest(10, ['square']))","ab5f4fab":"draw(dataFrame.nsmallest(10, ['ratio']))","2e0c596e":"draw(dataFrame.nlargest(10, ['ratio']))","063db90d":"dataFrame['length'].hist()","a829c853":"figure, axes = plt.subplots(9, 1,figsize=(10,33))\n\nfor i in range(0, 9):\n    name = f'symbol{i+1}'\n    dataFrame[name][dataFrame[name] != ' '].value_counts().plot(kind='bar', ax=axes[i], title = f'{i+1} symbol ')","4107fa0c":"draw(dataFrame[dataFrame['symbol1'] == '9'].head())","44f36e44":"draw(dataFrame[dataFrame['symbol1'] == '0'].head())","c9b05537":"draw(dataFrame[dataFrame['symbol2'] == 'M'].head())","20884dbf":"draw(dataFrame[dataFrame['symbol4'] == 'A'].head())","5a507744":"# The smallest numbers. Can you see them?","8e3ae0a5":"# The code to draw the plate on a picture. ","cbb40151":"# The histogram of length. The distribution actually differs from the distribution in generated plates ","d3863352":"# Some numbers are better then others","1cdbfad3":"# And finally symbols distribution. Help Dora find the discrepancies.","3b1d1527":"# And the smallest. \n# The collors of bounding box differs from the one in previous picture.\n# Looks like somebody arranged the bbox points counterclockwise.","55949a6e":"# We will insestigate the data to have fun.","65546f1c":"# Now lets take a look at some unusual values.\n# The largest tilt.","5256d3b4":"Summary:\n* Russian language will confuse our model\n* There are several ways to enhance the  data\n* Do not trust your teacher","4370e439":"# Somebody left us a *russian* surprise. Lets replace the letters with correct one.","974dc7de":"# Now the width \/ height ratio.\n# We will probably have some errors here since sometimes we confuse width with height","3d61b894":"# The bigest. Checking if lines are parralel is probably a good idea.","3dc4a227":"# Let's look at our number plates vocabulary"}}