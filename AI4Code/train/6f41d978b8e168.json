{"cell_type":{"d669466c":"code","5e242deb":"code","2c67829b":"code","559c5945":"code","bc056192":"code","567b7222":"code","a8feeae9":"code","5fb1a089":"code","360cb5c9":"code","478ca70a":"code","91322db0":"code","093fe639":"code","e58d4cf8":"code","d925cf15":"code","09927da5":"code","c92f52fd":"code","10c39890":"code","ee418c26":"code","7c8aadc2":"code","2e243713":"code","307b0dfd":"code","4cc77d4e":"code","1d82f91d":"code","c1052fb0":"code","2bf219fc":"code","7c9170c6":"code","43ea852d":"code","01f11fff":"code","a463ac07":"code","4bd6980e":"code","1674b232":"code","22b9b79d":"code","2cd06805":"code","44efcc78":"code","01bbd550":"code","e9cc50cc":"code","ce0839e3":"code","c25d81cf":"code","bf462b5d":"code","60fd23c0":"code","a40870af":"code","af3bf128":"code","8206c2ec":"markdown","3fe915a0":"markdown","b0b137e0":"markdown","4bf9bd4e":"markdown","e2023488":"markdown","d12f1629":"markdown","199c3adf":"markdown","4e07990b":"markdown","c1d461fa":"markdown","4aaee41f":"markdown","43cbe5b5":"markdown"},"source":{"d669466c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/phone\/accel'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e242deb":"from __future__ import print_function\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n#import coremltools\nfrom scipy import stats\nfrom IPython.display import display, HTML\n\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn import preprocessing\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Reshape\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import np_utils","2c67829b":"columns=['user','activity','time','x','y','z']\n\ndata_phone_accel_sum = pd.DataFrame(data=None,columns=columns)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/phone\/accel'):\n    for filename in filenames:\n        df = pd.read_csv('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/phone\/accel\/'+filename , sep=\",\", header=None)\n        temp=pd.DataFrame(data=df.values, columns=columns)\n        data_phone_accel_sum=pd.concat([data_phone_accel_sum,temp])","559c5945":"data_phone_accel_sum['z'] = data_phone_accel_sum['z'].str.replace(';','')\ndata_phone_accel_sum['activity'].value_counts()\ndata_phone_accel_sum['x']=data_phone_accel_sum['x'].astype('float')\ndata_phone_accel_sum['y']=data_phone_accel_sum['y'].astype('float')\ndata_phone_accel_sum['z']=data_phone_accel_sum['z'].astype('float')\ndata_phone_accel_sum.info()","bc056192":"\ndata_phone_gyro_sum = pd.DataFrame(data=None,columns=columns)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/phone\/gyro'):\n    for filename in filenames:\n        df = pd.read_csv('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/phone\/gyro\/'+filename , sep=\",\", header=None)\n        temp=pd.DataFrame(data=df.values, columns=columns)\n        data_phone_gyro_sum=pd.concat([data_phone_gyro_sum,temp])","567b7222":"data_phone_gyro_sum['z'] = data_phone_gyro_sum['z'].str.replace(';','')\n\ndata_phone_gyro_sum['x']=data_phone_gyro_sum['x'].astype('float')\ndata_phone_gyro_sum['y']=data_phone_gyro_sum['y'].astype('float')\ndata_phone_gyro_sum['z']=data_phone_gyro_sum['z'].astype('float')\n\ndata_phone_gyro_sum['activity'].value_counts()\ndata_phone_gyro_sum.info()","a8feeae9":"\ndata_watch_gyro_sum = pd.DataFrame(data=None,columns=columns)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/watch\/gyro'):\n    for filename in filenames:\n        df = pd.read_csv('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/watch\/gyro\/'+filename , sep=\",\", header=None)\n        temp=pd.DataFrame(data=df.values, columns=columns)\n        data_watch_gyro_sum=pd.concat([data_watch_gyro_sum,temp])","5fb1a089":"data_watch_gyro_sum['z'] = data_watch_gyro_sum['z'].str.replace(';','')\ndata_watch_gyro_sum['x']=data_watch_gyro_sum['x'].astype('float')\ndata_watch_gyro_sum['y']=data_watch_gyro_sum['y'].astype('float')\ndata_watch_gyro_sum['z']=data_watch_gyro_sum['z'].astype('float')\n\ndata_watch_gyro_sum['activity'].value_counts()\ndata_watch_gyro_sum.info()","360cb5c9":"\ndata_watch_accel_sum = pd.DataFrame(data=None,columns=columns)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/watch\/accel'):\n    for filename in filenames:\n        df = pd.read_csv('\/kaggle\/input\/smartphone-and-smartwatch-activity-and-biometrics\/wisdm-dataset\/wisdm-dataset\/raw\/watch\/accel\/'+filename , sep=\",\", header=None)\n        temp=pd.DataFrame(data=df.values, columns=columns)\n        data_watch_accel_sum=pd.concat([data_watch_accel_sum,temp])","478ca70a":"data_watch_accel_sum['z'] = data_watch_accel_sum['z'].str.replace(';','')\ndata_watch_accel_sum['x']=data_watch_accel_sum['x'].astype('float')\ndata_watch_accel_sum['y']=data_watch_accel_sum['y'].astype('float')\ndata_watch_accel_sum['z']=data_watch_accel_sum['z'].astype('float')\n\ndata_watch_accel_sum['activity'].value_counts()\ndata_watch_accel_sum.info()","91322db0":"df_phone = pd.DataFrame(data=None, columns=columns)\ndf_phone['user']= data_phone_accel_sum['user'].head(3608635)\ndf_phone['activity']= data_phone_accel_sum['activity'].head(3608635)\ndf_phone['time']= data_phone_accel_sum['time'].head(3608635)\ndf_phone['x'] = data_phone_gyro_sum['x'].values + data_phone_accel_sum['x'].head(3608635).values\ndf_phone['y'] = data_phone_gyro_sum['y'].values + data_phone_accel_sum['y'].head(3608635).values\ndf_phone['z'] = data_phone_gyro_sum['z'].values + data_phone_accel_sum['z'].head(3608635).values","093fe639":"df_watch = pd.DataFrame(data=None, columns=columns)\ndf_watch['user']= data_watch_accel_sum['user'].head(3440342)\ndf_watch['activity']= data_watch_accel_sum['activity'].head(3440342)\ndf_watch['time']= data_watch_accel_sum['time'].head(3440342)\ndf_watch['x'] = data_watch_gyro_sum['x'].values + data_watch_accel_sum['x'].head(3440342).values\ndf_watch['y'] = data_watch_gyro_sum['x'].values + data_watch_accel_sum['y'].head(3440342).values\ndf_watch['z'] = data_watch_gyro_sum['x'].values + data_watch_accel_sum['z'].head(3440342).values","e58d4cf8":"df_phone['activity'].value_counts()","d925cf15":"df_watch['activity'].value_counts()","09927da5":"df_phone_watch = pd.DataFrame(data=None, columns=columns)\ndf_phone_watch['user']= df_phone['user'].head(3440342)\ndf_phone_watch['activity']= df_phone['activity'].head(3440342)\ndf_phone_watch['time']= df_phone['time'].head(3440342)\ndf_phone_watch['x'] = df_watch['x'].values + df_phone['x'].head(3440342).values\ndf_phone_watch['y'] = df_watch['y'].values + df_phone['y'].head(3440342).values\ndf_phone_watch['z'] = df_watch['z'].values + df_phone['z'].head(3440342).values","c92f52fd":"df_phone_watch.info()","10c39890":"df_phone_watch['activity'].value_counts()","ee418c26":"Fs = 20","7c8aadc2":"activities = df_phone_watch['activity'].value_counts().index","2e243713":"df_phone_watch = df_phone_watch.drop(['user', 'time'], axis=1)","307b0dfd":"df_phone_watch['activity'].value_counts()","4cc77d4e":"df_a = df_phone_watch[df_phone_watch['activity']=='A'].head(174604)\ndf_m = df_phone_watch[df_phone_watch['activity']=='M'].head(174604)\ndf_k = df_phone_watch[df_phone_watch['activity']=='K'].head(174604)\ndf_p = df_phone_watch[df_phone_watch['activity']=='P'].head(174604)\ndf_e = df_phone_watch[df_phone_watch['activity']=='E'].head(174604)\ndf_o = df_phone_watch[df_phone_watch['activity']=='O'].head(174604)\ndf_c = df_phone_watch[df_phone_watch['activity']=='C'].head(174604)\ndf_d = df_phone_watch[df_phone_watch['activity']=='D'].head(174604)\ndf_l = df_phone_watch[df_phone_watch['activity']=='L'].head(174604)\ndf_b = df_phone_watch[df_phone_watch['activity']=='B'].head(174604)\ndf_h = df_phone_watch[df_phone_watch['activity']=='H'].head(174604)\ndf_f = df_phone_watch[df_phone_watch['activity']=='F'].head(174604)\ndf_g = df_phone_watch[df_phone_watch['activity']=='G'].head(174604)\ndf_q = df_phone_watch[df_phone_watch['activity']=='Q'].head(174604)\ndf_r = df_phone_watch[df_phone_watch['activity']=='R'].head(174604)\ndf_s = df_phone_watch[df_phone_watch['activity']=='S'].head(174604)\ndf_i = df_phone_watch[df_phone_watch['activity']=='I'].head(174604)\ndf_j = df_phone_watch[df_phone_watch['activity']=='J']","1d82f91d":"balanced_data = pd.DataFrame()\nbalanced_data = balanced_data.append([df_a,df_m,df_k,df_p,df_e,df_o,df_c,df_d,df_l,df_b,df_h,df_f,df_g,df_q,df_r,df_s,df_i,df_j]) ","c1052fb0":"balanced_data['activity'].value_counts()","2bf219fc":"from sklearn.preprocessing import LabelEncoder","7c9170c6":"label = LabelEncoder()\nbalanced_data['label'] = label.fit_transform(balanced_data['activity']) \nbalanced_data","43ea852d":"label.classes_","01f11fff":"from sklearn.preprocessing import StandardScaler\n\nx = balanced_data[['x','y','z']]\ny = balanced_data['label']\nscaler = StandardScaler()\nx = scaler.fit_transform(x)\n\nscaled_x = pd.DataFrame(data=x, columns=['x','y','z'])\nscaled_x['label'] = y.values\n\nscaled_x","a463ac07":"import scipy.stats as stats","4bd6980e":"Fs=20\nframe_size = Fs*4 #80\nhop_size = Fs*2 #40","1674b232":"def get_frames(df, frame_size, hop_size):\n    \n    N_FEATURES = 3\n    frames = []\n    labels = []\n    for i in range(0,len(df )- frame_size, hop_size):\n        x = df['x'].values[i: i+frame_size]\n        y = df['y'].values[i: i+frame_size]\n        z = df['z'].values[i: i+frame_size]\n        \n        label = stats.mode(df['label'][i: i+frame_size])[0][0]\n        frames.append([x,y,z])\n        labels.append(label)\n        \n    frames = np.asarray(frames).reshape(-1, frame_size, N_FEATURES)\n    labels = np.asarray(labels)\n    \n    return frames, labels","22b9b79d":"x,y = get_frames(scaled_x, frame_size, hop_size)","2cd06805":" x.shape, y.shape","44efcc78":"from sklearn.model_selection import train_test_split","01bbd550":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.30, random_state = 0, stratify = y)","e9cc50cc":"y_train.shape","ce0839e3":"x_train.shape, x_test.shape","c25d81cf":"x_train[0].shape, x_test[0].shape","bf462b5d":"x_train = x_train.reshape(55109, 80, 3,1)\nx_test = x_test.reshape(23619, 80, 3,1)","60fd23c0":"model = Sequential()\nmodel.add(Conv2D(256, (2,2), activation = 'relu', input_shape = x_train[0].shape))\nmodel.add(Dropout(0.1))\n\nmodel.add(Conv2D(512, (2,2), activation = 'relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024, activation = 'relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(18, activation='softmax'))","a40870af":"model.compile(optimizer=\"Adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"]) ","af3bf128":"history = model.fit(x_train, y_train, epochs = 25, validation_data=(x_test, y_test), verbose=1 )","8206c2ec":"Phone Accelerometer Train\/test","3fe915a0":"Human Activity Tracker\n\nHuman Activity Detection is the problem of predicting what a person is doing based on a trace of their movement using sensors. The \"Human Activity Detection #Dataset\" includes data collected from 34 subjects, each of whom were asked to perform 18 tasks for 3 minutes each. Each subject had a smartwatch placed on his\/her dominant hand and a smartphone in their pocket. The data collection was controlled by a custom-made app that ran on the #smartphone and #smartwatch. The sensor data that was collected was from the accelerometer and gyroscope on both the smartphone and smartwatch, yielding four total sensors. The sensor data was collected at a rate of 20 Hz (i.e., every 50ms). The smartphone was either the Google Nexus 5\/5X or Samsung Galaxy S5 running Android 6.0 (Marshmallow). The smartwatch was the LG G Watch running Android Wear 1.5.","b0b137e0":"Phone Gyro files import Train\/test","4bf9bd4e":"**2D CNN Model**","e2023488":"Watch accelorometer files import train test","d12f1629":"Combining Phone accel and gyro data","199c3adf":"**Frame Preparation**","4e07990b":"Combining Phone and Watch Data","c1d461fa":"Combining watch acccel and gyro data","4aaee41f":"**Statndardize Data**","43cbe5b5":"Watch Gyro files import train\/test"}}