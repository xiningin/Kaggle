{"cell_type":{"f47673ba":"code","a7c03a6d":"code","1945bd9f":"code","1c4ddd31":"code","da3d82a5":"code","81a7deb3":"code","62df23bc":"code","60e0772b":"code","001987c8":"code","0dd8569f":"code","67e2656e":"code","6300445d":"code","a90fc8ee":"code","df74c822":"code","26eb5e5b":"code","4284ccd4":"code","9688d9e2":"code","2abb1f76":"code","f3f96e39":"code","018feb3d":"code","8d179264":"code","1874d355":"code","97e88a0a":"code","7472e0a4":"code","ec49b18f":"code","f639158b":"code","100e9bdd":"code","d63ca228":"code","c0a3a883":"code","a4316124":"code","d1bc14b7":"code","80261d2c":"code","7cc38a8f":"markdown","e8449370":"markdown","95822b4b":"markdown","9b62ba0f":"markdown","514b0959":"markdown","802aef38":"markdown","065f1696":"markdown","a09e01d8":"markdown","6d5deddc":"markdown","7f92f159":"markdown","023edfa9":"markdown","16e3ce31":"markdown","64fc526d":"markdown","15707ec5":"markdown","ebf19829":"markdown","87a0a4ac":"markdown","f7426e38":"markdown","eb8f8128":"markdown"},"source":{"f47673ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7c03a6d":"import vaex\nimport vaex.jupyter.model as vjm\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = vaex.example()\ndf","1945bd9f":"E_axis = vjm.Axis(df=df, expression=df.E, shape=140)\nLz_axis = vjm.Axis(df=df, expression=df.Lz, shape=100)\nLz_axis","1c4ddd31":"await vaex.jupyter.gather()  # wait until Vaex is done with all background computation\nLz_axis  # now min and max are computed, and bin_centers is set","da3d82a5":"data_array_widget = df.widget.data_array(axes=[Lz_axis, E_axis], selection=[None, 'default'])\ndata_array_widget  # being the last expression in the cell, Jupyter  will 'display' the widget","81a7deb3":"# NOTE: since the computations are done in the background, data_array_widget.model.grid is initially None.\n# We can ask vaex-jupyter to wait till all executions are done using:\nawait vaex.jupyter.gather()\n# get a reference to the xarray DataArray object\ndata_array = data_array_widget.model.grid\nprint(f\"type:\", type(data_array))\nprint(\"dims:\", data_array.dims)\nprint(\"data:\", data_array.data)\nprint(\"coords:\", data_array.coords)\nprint(\"Lz's data:\", data_array.coords['Lz'].data)\nprint(\"Lz's attrs:\", data_array.coords['Lz'].attrs)\nprint(\"And displaying the xarray DataArray:\")\ndisplay(data_array)  # this is what the vaex.jupyter.view.DataArray uses","62df23bc":"df.select(df.x > 0)","60e0772b":"# NOTE: da is short for 'data array'\ndef plot2d(da):\n    plt.figure(figsize=(8, 8))\n    ar = da.data[1]  # take the numpy data, and select take the selection\n    print(f'imshow of a numpy array of shape: {ar.shape}')\n    plt.imshow(np.log1p(ar.T), origin='lower')\n\ndf.widget.data_array(axes=[Lz_axis, E_axis], display_function=plot2d, selection=[None, True])","001987c8":"df.select(df.id < 10)","0dd8569f":"def plot2d_with_labels(da):\n    plt.figure(figsize=(8, 8))\n    grid = da.data  # take the numpy data\n    dim_x = da.dims[0]\n    dim_y = da.dims[1]\n    plt.title(f'{dim_y} vs {dim_x} - shape: {grid.shape}')\n    extent = [\n        da.coords[dim_x].attrs['min'], da.coords[dim_x].attrs['max'],\n        da.coords[dim_y].attrs['min'], da.coords[dim_y].attrs['max']\n    ]\n    plt.imshow(np.log1p(grid.T), origin='lower', extent=extent, aspect='auto')\n    plt.xlabel(da.dims[0])\n    plt.ylabel(da.dims[1])\n\nda_plot_view_nicer = df.widget.data_array(axes=[Lz_axis, E_axis], display_function=plot2d_with_labels)\nda_plot_view_nicer","67e2656e":"def plot2d_with_selections(da):\n    grid = da.data\n    # Create 1 row and #selections of columns of matplotlib axes\n    fig, axgrid = plt.subplots(1, grid.shape[0], sharey=True, squeeze=False)\n    for selection_index, ax in enumerate(axgrid[0]):\n        ax.imshow(np.log1p(grid[selection_index].T), origin='lower')\n\ndf.widget.data_array(axes=[Lz_axis, E_axis], display_function=plot2d_with_selections,\n                     selection=[None, 'default', 'rest'])","6300445d":"df.select(df.id < 10)  # select 10 objects\ndf.select(df.id >= 10, name='rest')  # and the rest","a90fc8ee":"FeH_axis = vjm.Axis(df=df, expression='FeH', min=-3, max=1, shape=5)\nda_view = df.widget.data_array(axes=[E_axis, Lz_axis, FeH_axis], selection=[None, 'default'])\nda_view","df74c822":"selection_widget = df.widget.selection_expression()\nselection_widget","26eb5e5b":"await vaex.jupyter.gather()\nw = df.widget.counter_selection('default', lazy=True)\nw","4284ccd4":"x_axis = vjm.Axis(df=df, expression=df.Lz)\ny_axis = vjm.Axis(df=df, expression=df.E)\n\nda_xy_view = df.widget.data_array(axes=[x_axis, y_axis], display_function=plot2d_with_labels, shape=180)\nda_xy_view","9688d9e2":"# wait for the previous plot to finish\nawait vaex.jupyter.gather()\n# Change both the x and y axis\nx_axis.expression = np.log(df.x**2)\ny_axis.expression = df.y\n# Note that both assignment will create 1 computation in the background (minimal amount of passes over the data)\nawait vaex.jupyter.gather()\n# vaex computed the new min\/max, and the xarray DataArray\n# x_axis.min, x_axis.max, da_xy_view.model.grid","2abb1f76":"x_widget = df.widget.expression(x_axis.expression, label='X axis')\nx_widget\n","f3f96e39":"from ipywidgets import link\nlink((x_widget, 'value'), (x_axis, 'expression'))","018feb3d":"y_widget = df.widget.expression(y_axis, label='X axis')\n# vaex now does this for us, much shorter\n# link((y_widget, 'value'), (y_axis, 'expression'))\ny_widget","8d179264":"await vaex.jupyter.gather()  # lets wait again till all calculations are finished","1874d355":"from vaex.jupyter.widgets import ContainerCard\n\nContainerCard(title='My plot',\n              subtitle=\"using vaex-jupyter\",\n              main=da_xy_view,\n              controls=[x_widget, y_widget], show_controls=True)","97e88a0a":"y_axis.expression = df.vx","7472e0a4":"df = vaex.example()  # we create the dataframe again, to leave all the plots above 'alone'\nheatmap_xy = df.widget.heatmap(df.x, df.y, selection=[None, True])\nheatmap_xy","ec49b18f":"heatmap_xy.model.x","f639158b":"x_widget = df.widget.expression(heatmap_xy.model.x, label='X axis')\ny_widget = df.widget.expression(heatmap_xy.model.y, label='X axis')\n\nContainerCard(title='My plot',\n              subtitle=\"using vaex-jupyter and bqplot\",\n              main=heatmap_xy,\n              controls=[x_widget, y_widget, selection_widget],\n              show_controls=True,\n              card_props={'style': 'min-width: 800px;'})","100e9bdd":"heatmap_xy.tool = 'pan-zoom'  # we can also do this programmatically.","d63ca228":"heatmap_xy.model.x.expression = np.log10(df.x**2)\nawait vaex.jupyter.gather()  # and we wait before we continue","c0a3a883":"histogram_Lz = df.widget.histogram(df.Lz, selection_interact='default')\nhistogram_Lz.tool = 'select-x'\nhistogram_Lz","a4316124":"# You can graphically select a particular region, in this case we do it programmatically\n# for reproducability of this notebook\nhistogram_Lz.plot.figure.interaction.selected = [1200, 1300]","d1bc14b7":"The primary goal of Vaex-Jupyter is to provide users with a framework to create dashboard and new visualizations. Over time more visualizations will go into the vaex-jupyter package, but giving you the option to create new ones is more important. To help you create new visualization, we have examples on how to create your own:\n\nIf you want to create your own visualization on this framework, check out these examples:\n\nipyvolume example","80261d2c":"plotly example\nalt text","7cc38a8f":"![https:\/\/vaex.readthedocs.io\/en\/latest\/example_jupyter_plotly.html](http:\/\/)","e8449370":"# Creating your own visualizations","95822b4b":"Let us introduce another axis, FeH (fun fact: FeH is a property of stars that tells us how much iron relative to hydrogen is contained in them, an idicator of their origin):","9b62ba0f":"# A nice container","514b0959":"# Modifying a selection will update the figure.","802aef38":"We want to build a 2 dimensinoal grid with the number counts in each bin. To do this, we first define two axis objects:","065f1696":"# Interactive plots","a09e01d8":"The heatmap itself is again a widget. Thus we can combine it with other widgets to create a more sophisticated interface.","6d5deddc":"![https:\/\/vaex.readthedocs.io\/en\/latest\/example_jupyter_plotly.html](http:\/\/)\n","7f92f159":"The vaex-jupyter package contains the building blocks to interactively define an N-dimensional grid, which is then used for visualizations.","023edfa9":"# Selection widgets","16e3ce31":"# Our improved visualization with proper axes and labeling:","64fc526d":"But, if we want to create a dashboard with Voila, we need to have a widget that controls them:","15707ec5":"An interactive xarray DataArray display\n# ","ebf19829":"# Interactive plots","87a0a4ac":"# Axis control widgets","f7426e38":"# END OF THE NOTEBOOK","eb8f8128":"Let us first import the relevant packages, and open the example DataFrame:"}}