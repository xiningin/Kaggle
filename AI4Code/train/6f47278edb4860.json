{"cell_type":{"25412fcd":"code","db6b3929":"code","f5d10905":"code","f7be269a":"code","68ad0344":"code","78b4b187":"code","d07cca72":"code","6ea570d1":"code","65a02f19":"code","773ca2e3":"code","216dab41":"code","ba514e75":"code","4dc119d4":"code","6b62604f":"code","17bf35bf":"code","6b41f77a":"code","ea3243a2":"code","6561d889":"code","e73a36a7":"code","a14a29b8":"code","1c9c1cd7":"code","fa1d0b63":"code","67b82832":"code","b719b07d":"code","c2022d21":"code","d770672f":"code","51123d1c":"code","c892829c":"code","6d09b6c2":"code","e07ebbe2":"code","e7bd45ea":"code","624dfc40":"code","c8f8974b":"code","bb4b85f4":"code","8d4ebe6d":"code","d7f60cff":"code","95bad933":"code","6d7c3bf0":"code","b33827e4":"code","8752c4b0":"code","b7889c8f":"code","6b9da9cc":"code","62b9651b":"code","f3fc0c14":"code","edb33f12":"code","8f83e3c1":"code","7e347b8b":"code","49cc5ce3":"code","d0188c35":"code","2188d376":"code","a2ba577e":"code","074a775c":"code","0960dfe6":"code","5c2bd4f0":"code","0513973b":"code","302c3bde":"code","a320e577":"code","811c0ae7":"code","d95b888b":"code","c7376db9":"code","927249f3":"code","14486e75":"code","0a2d5aa8":"code","eb745b4d":"code","cf6cfd27":"code","b6fe10d5":"code","dc2ac9e8":"code","2a3ac77d":"code","6f6110f7":"code","634ba5d0":"code","640d7254":"code","733e2ab0":"code","b484594d":"code","556fd66e":"code","f161bbbf":"code","db806a3a":"code","be827cf1":"code","9d521b73":"code","5dfc6bca":"code","3375050b":"code","fc4fbc88":"code","147d88bd":"code","07a0bcba":"code","a5ef9da5":"code","c7ba697e":"code","3ae074fc":"code","4ecc22c9":"code","937cb101":"code","00ecb8b8":"code","cc498788":"code","45f5655f":"code","7aaf3f67":"code","faa05968":"code","c3911ae9":"code","a527fb5a":"code","ae824dd0":"code","f170bd25":"code","a48a7b7e":"code","d0164f42":"code","6f89952a":"code","33cad922":"code","cb085b71":"code","9ddfaec9":"code","54fbcb95":"code","23ed9dd0":"code","5646702d":"code","631a7545":"code","3d4de85e":"markdown","9da78093":"markdown"},"source":{"25412fcd":"import numpy as np # linear algebra","db6b3929":"array1 = np.array([2, 5, 7, 8, 11, 14, 25])\narray1","f5d10905":"type(array1)","f7be269a":"array1.shape","68ad0344":"array1.size","78b4b187":"len(array1)","d07cca72":"array2 = np.array([[1, 2, 3], [5, 6, 7], [9, 10, 11]])\narray2","6ea570d1":"array2.shape","65a02f19":"array2.size","773ca2e3":"len(array2) # 2 Dimention array","216dab41":"array3 = np.full(4, 5) \narray3","ba514e75":"array4 = np.full(10, 4)\narray4","4dc119d4":"array5 = np.zeros(5, dtype=int)\narray5","6b62604f":"print(array5)","17bf35bf":"array6 = np.ones(5, dtype=int)\narray6","6b41f77a":"array7 = np.random.random(6)\nprint(array7)","ea3243a2":"array8 = np.arange(5)\narray8","6561d889":"array9 = np.arange(3, 8)\narray9","e73a36a7":"array10 = np.arange(3, 22, 3)\narray10","a14a29b8":"np.random.randint(3, 5)","1c9c1cd7":"array1","fa1d0b63":"array1 * 5","67b82832":"array1 \/ 2","b719b07d":"array1 ** 2","c2022d21":"array1 = np.arange(10)\narray2 = np.arange(10, 20)","d770672f":"array1 + array2 ","51123d1c":"array1 - array2","c892829c":"array1 \/ array2","6d09b6c2":"array1 = np.array([3, 4, 6, 8, 9, 12, 14, 19, 20])\narray1","e07ebbe2":"array1[0]","e7bd45ea":"array1[5]","624dfc40":"array1[-1]","c8f8974b":"array1[[1, 3, 5]] # list indexing","bb4b85f4":"array2 = np.array([1, 3, 5])\narray1[array2]","8d4ebe6d":"array1","d7f60cff":"array1[2:6]","95bad933":"array1[0:5]","6d7c3bf0":"array1[:6] # 0, 1, 2, 3, 4, 5","b33827e4":"array1","8752c4b0":"array1[2:7:2] # get the value from 2 to 7 by 2 spaces","b7889c8f":"array1 = np.ones((3, 4), dtype=float)\narray1","6b9da9cc":"array2 = np.random.random((3, 4))\narray2","62b9651b":"array1 += array2  # array1 = array1 + array2\narray2 += array1  # array2 = array2 + array1 (upper array1)\narray1, array2","f3fc0c14":"array1 = np.array([2, 5, 7, 8, 11, 14, 25])\narray1 > 5","edb33f12":"array1 % 2 == 0","8f83e3c1":"bool = np.array([True, True, False, False, False, False, False])","7e347b8b":"np.where(bool)","49cc5ce3":"np.where(array1 > 3)","d0188c35":"np.where(array1 < 3)","2188d376":"a = np.array([1, 2, 3, 10, 20, 30, 0.1, 0.2, 0.3])","a2ba577e":"np.min(a), np.argmin(a) # find the min. vlaue and the location of value","074a775c":"np.max(a), np.argmax(a)","0960dfe6":"np.where(a < 3)","5c2bd4f0":"a[np.where(a < 3)]","0513973b":"a","302c3bde":"np.where(a >= 10, 0, a) # to find a value greater than or equal to 10 and replace it with 0","a320e577":"np.where(a >=10, a * 0.1, a)","811c0ae7":"a","d95b888b":"print(a.max())\nprint(a.min())","c7376db9":"print(a.mean())","927249f3":"b = np.array([7, 12, 20, 25, 35])\nc = np.array([14, 3, 28, 41, 56, 9, 6])","14486e75":"print(np.median(b)) # odd num, median\nprint(np.median(c)) # even num, mean of two medians ","0a2d5aa8":"print(b.var()) # Variance: The difference between the values and the mean squared and divided by the total number of factors.\nprint(b.std()) # Standard Deviation: Taking the square root of the variance.","eb745b4d":"A = np.array([\n    [3, 3, 2, 3, 1],\n    [5, 2, 2, 3, 1],\n    [3, 3, 2, 3, 1],\n    [3, 1, 4, 3, 1],\n])\n\nB = np.array([\n    [1, 1, 1, 1, 1],\n    [2, 2, 2, 2, 2],\n    [3, 3, 3, 3, 3],\n    [4, 4, 4, 4, 4],\n])","cf6cfd27":"A + B","b6fe10d5":"A - B","dc2ac9e8":"A * B","2a3ac77d":"A \/ B","6f6110f7":"A = np.array([\n    [3, 3, 2, 3, 1],\n    [5, 2, 2, 3, 1],\n    [3, 3, np.nan, 3, 1],\n    [3, 1, 4, 3, 1],\n])\n\nB = np.array([\n    [1, np.nan, 1, 1, 1],\n    [2, 2, 2, 2, 2],\n    [3, 3, 3, 3, 3],\n    [np.nan, 4, 4, 4, 4],\n])","634ba5d0":"A + B","640d7254":"A = np.array([\n    [3, 3, 2, 3, 1],\n    [5, 2, 2, 3, 1],\n    [3, 3, 2, 3, 1],\n    [3, 1, 4, 3, 1],\n])","733e2ab0":"5 * A","b484594d":"A = np.array([\n    [3, 3, 2, 3, 1],\n    [5, 2, 2, 3, 1],\n    [3, 3, 2, 3, 1],\n    [3, 1, 4, 3, 1],\n])\n\nB = np.array([\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n])","556fd66e":"A @ B # A matrix multiply b matrix","f161bbbf":"np.sum(A)","db806a3a":"A = np.array([\n    [3, 3, 2, 3, 1],\n    [5, 2, 2, 3, 1],\n    [3, 3, np.nan, 3, 1],\n    [3, 1, 4, 3, 1],\n])\n\nB = np.array([\n    [1, np.nan, 1, 1, 1],\n    [2, 2, 2, 2, 2],\n    [3, 3, 3, 3, 3],\n    [np.nan, 4, 4, 4, 4],\n])","be827cf1":"np.nansum(A) # If there is nan among the elements, excluding it, the summation","9d521b73":"np.nanmean(A) # If there is nan among the elements, excluding it, the average","5dfc6bca":"A","3375050b":"A[0]","fc4fbc88":"A[2]","147d88bd":"A[0][3]","07a0bcba":"A[:, 2]","a5ef9da5":"A[3, :]","c7ba697e":"A = np.array([\n    [1, -1, 2],\n    [3, 2, 2],\n    [4, 1, 2]\n])","3ae074fc":"A_transpose = np.transpose(A)\nA_transpose","4ecc22c9":"A_transpose = A.T # Shortened notation of transpose matrix\nA_transpose","937cb101":"I = np.identity(3) # Identity matrix\nI","00ecb8b8":"A @ I","cc498788":"A_inverse = np.linalg.pinv(A) # Finding the inverse matrix\nA_inverse","45f5655f":"A @ A_inverse","7aaf3f67":"A = np.array([[1, 2, 3],\n             [4, 5, 6]])\nB = np.array([[7, 8],\n             [9, 10],\n             [11, 12]])\n\ndot_product = np.dot(A, B)\nprint('matrix dot product result: ', dot_product.tolist())","faa05968":"array1 = np.array([1, 2, 3])\narray2 = np.array([[1, 2, 3],[2, 3, 4]])\narray3 = np.array([[1, 2, 3]])\n\nprint('array1 Type: ', type(array1))\nprint('array1 array shape: ', array1.shape)\n\nprint('array2 Type: ', type(array2))\nprint('array2 array shape: ', array2.shape)\n\nprint('array3 Type: ', type(array3))\nprint('array3 array shape: ', array3.shape)","c3911ae9":"print('array1: {:0} dimension, array2: {:0} dimension, array3: {:0} dimension'.format(array1.ndim, array2.ndim, array3.ndim))","a527fb5a":"list1 = [1, 2, 3]\nprint(type(list1))\n\narray1 = np.array(list1)\nprint(type(array1))\nprint(array1, array1.dtype)","ae824dd0":"list2 = [1, 2, 'a']\n\narray2 = np.array(list2)\nprint(array2, array2.dtype) # int -> unicode string","f170bd25":"array_int = np.array([1, 2, 3])\narray_float = array_int.astype('float64') # int -> float\nprint(array_float, array_float.dtype)\n\narray_int1 = array_float.astype('int32')\nprint(array_int1, array_int1.dtype)\n\narray_float1 = np.array([1.1, 2.2, 3.3])\narray_int2 = array_float1.astype('int32')\nprint(array_int2, array_int2.dtype)","a48a7b7e":"array1 = np.arange(10)\nprint('array1:\\n', array1)\n\narray2 = array1.reshape(2, 5)\nprint('array2:\\n', array2)\n\narray3 = array1.reshape(5, 2)\nprint('array3:\\n', array3)","d0164f42":"# important \n\narray4 = array1.reshape(-1, 5)\nprint(array4,'\\narray4 shape: ', array4.shape)","6f89952a":"# important \n\narray5 = array1.reshape(5, -1)\nprint(array5,'\\narray5 shape: ', array5.shape)","33cad922":"array1 = np.arange(8)\narray3d = array1.reshape((2, 2, 2))\nprint('array3d:\\n', array3d.tolist())\n\narray2 = array3d.reshape(-1, 1)\nprint('array2:\\n', array2.tolist())\nprint('array2 shape:', array2.shape)","cb085b71":"array1 = np.arange(start=1, stop=10)\n\narray2 = array1[:3]\nprint(array2)\n\narray3 = array1[3:]\nprint(array3)\n\narray4 = array1[:]\nprint(array4)","9ddfaec9":"array1d = np.arange(start=1, stop=10)\narray2d = array1d.reshape(3, 3)\nprint('array2d:\\n', array2d)\n\nprint('array2d[0:2, 0:2] \\n', array2d[0:2, 0:2])\nprint('array2d[1:3, 0:3] \\n', array2d[1:3, 0:3])\nprint('array2d[:, :] \\n', array2d[:, :])\nprint('array2d[:2, 1:] \\n', array2d[:2, 1:])\nprint('array2d[:2, 0] \\n', array2d[:2, 0])","54fbcb95":"org_array = np.array([3, 1, 9, 5])\nprint('original array: ', org_array)\n\n# np.sort()\nsort_array1 = np.sort(org_array)\nprint('sort matrix returned after calling np.sort(): ', sort_array1)\nprint('original matrix returned after calling np.sort(): ', org_array)","23ed9dd0":"# ndarray.sort()\nsort_array2 = org_array.sort()\nprint('sort matrix returned after calling org_array.sort(): ', sort_array2)\nprint('original matrix returned after calling org_array.sort(): ', org_array)","5646702d":"org_array = np.array([3, 1, 9, 5])\nsort_indices = np.argsort(org_array)\nprint(type(sort_indices))\nprint('Index of original matrix when sorting matrix: ', sort_indices)\n\nsort_indices_desc = np.argsort(org_array)[::-1]\nprint('Index of original matrix when sorting in descending order of matrix: ', sort_indices_desc)","631a7545":"name_array = np.array(['John', 'Kim', 'Smith', 'Samuel', 'Mike'])\nscore_array = np.array([78, 100, 92, 85, 66])\n\nsort_indices_asc = np.argsort(score_array)\nprint('Index of score_array when sorting in ascending order: ', sort_indices_asc)\nprint('Print the name of name_array when sorting in ascending order: ', name_array[sort_indices_asc])","3d4de85e":"## Hello. Beautiful People :) \n### The second is Numerical python, **numpy**.","9da78093":"## The only way to improve our skills is practice.\n## Thank you. "}}