{"cell_type":{"1a82b46e":"code","aa368216":"code","1b51d2ae":"code","1ad2ef9e":"code","ab26b6bc":"code","5bdde1ed":"code","21f522dd":"code","0917fca3":"code","87eec676":"code","aa857e45":"code","c74920b6":"code","36bb10ca":"code","968ef8fc":"code","607a1a00":"code","605f1fd9":"code","fba8cb2a":"code","38121ad9":"code","f071710c":"code","517bb475":"code","f5dea72d":"code","89cf81ce":"code","0917088a":"code","9259ba20":"code","887d0e11":"code","65ac91b3":"code","5c89937a":"code","bd0b7d77":"markdown","2659088f":"markdown","07ea9ff2":"markdown","5208fdbc":"markdown","f170fc4a":"markdown","4e84497d":"markdown","3840361f":"markdown","b03cf054":"markdown","b5620708":"markdown","f0d22040":"markdown","b8801013":"markdown","f967d86d":"markdown","46ffe1c6":"markdown","687aa6ab":"markdown","90b9b395":"markdown","6e14f8dc":"markdown"},"source":{"1a82b46e":"!pip install pulp","aa368216":"import pandas as pd\nimport numpy as np\nfrom pulp import *\n\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1b51d2ae":"df = pd.read_csv('..\/input\/nutrition-facts\/menu.csv')\ndf.head()","1ad2ef9e":"df.isnull().sum() #Check is there any null value?","ab26b6bc":"df.dtypes #Check data type in each columns","5bdde1ed":"serving_size_conv = []\nfor i in df['Serving Size']:\n    if '(' in i and 'g)' in i:\n        serving_size_conv.append(float(i[i.find('(')+1:-3])) \n    elif 'fl oz' in i:\n        serving_size_conv.append(float(i[0:i.find(' ')])*29.5735) ## assume 1 fl oz = 29.5735 g\n    elif '(' and 'ml)':\n        serving_size_conv.append(float(i[i.find('(')+1:-4])*1.04) ## assume 1 ml = 1.04g\n\ndf['Serving Size']= pd.DataFrame(serving_size_conv).astype('float')\ndf.head(2)","21f522dd":"df['Calories (% Daily Value)'] = df['Calories']*100\/2500 \ndf['Sugars (% Daily Value)'] = df['Sugars']*100\/30\ndf['Protein (% Daily Value)'] = df['Protein']*100\/50\ndf.head(2)","0917fca3":"df.describe()","87eec676":"by_category = pd.DataFrame({'Category':df['Category'].value_counts().index.tolist(),\n                            'Count':df['Category'].value_counts().tolist(),\n                            'Calories (Sum)':df[['Category','Calories']].groupby('Category').sum()['Calories'],\n                            'Calories (Mean)':df[['Category','Calories']].groupby('Category').mean()['Calories']})\nby_category.reset_index(drop = True)","aa857e45":"fig,(ax1,ax2) = plt.subplots(1,2)\nfig.set_size_inches(15.5, 7.5)\nax1.set_title(\"Total of Items in Each Category\")\nax1.pie(by_category['Count'],labels =by_category['Category'],autopct = '%1.1f%%')\n\nax2.set_title(\"Total of Calories in Each Category\")\nax2.pie(by_category['Calories (Sum)'],labels =by_category['Category'],autopct = '%1.1f%%')\n\nfig.suptitle('Calories by Category',fontsize = 20)\nfig.legend(by_category['Category'],ncol=4,loc=8)","c74920b6":"nutrition = ['Serving Size',\n 'Calories',\n 'Calories from Fat',\n 'Total Fat',\n 'Saturated Fat',\n 'Trans Fat',\n 'Cholesterol',\n 'Sodium',\n 'Carbohydrates',\n 'Dietary Fiber',\n 'Sugars',\n 'Protein',\n 'Vitamin A (% Daily Value)',\n 'Vitamin C (% Daily Value)',\n 'Calcium (% Daily Value)',\n 'Iron (% Daily Value)']\n\ncorr = df[nutrition].corr()\n\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig = plt.figure(figsize = (13,13))\n\nax = sns.heatmap(corr,\n                 mask = mask,\n                 square =True,\n                 cmap=\"vlag\",\n                 annot=True,\n                 fmt=\"1.2f\"\n                )\nax.set_title(\"Nutrition Correlation\",fontsize = 20);","36bb10ca":"crispy_vs_no = df[df['Item'].str.contains('Sandwich')].reset_index(drop=True)\n\ncrispy = crispy_vs_no[crispy_vs_no['Item'].str.contains('Crispy')].reset_index(drop=True)\ngrilled = crispy_vs_no[crispy_vs_no['Item'].str.contains('Grilled')].reset_index(drop=True)\n\nlabel = grilled[grilled['Item'].str.contains('Grilled')]['Item'].replace('Grilled','',regex = True).tolist()\n\ncrispy.drop(['Category','Item','Serving Size'], axis=1,inplace = True)\ngrilled.drop(['Category','Item','Serving Size'], axis=1,inplace = True)\n\ncrispy_vs_no.head(2)","968ef8fc":"def comparison_plot(dataframe,plot_title,row,column,last_blank = False):\n    label = ['Calories (% Daily Value)','Total Fat (% Daily Value)','Saturated Fat (% Daily Value)'\n             ,'Cholesterol (% Daily Value)','Sodium (% Daily Value)','Carbohydrates (% Daily Value)'\n             ,'Dietary Fiber (% Daily Value)','Sugars (% Daily Value)','Protein (% Daily Value)'\n             ,'Dietary Fiber (% Daily Value)','Vitamin A (% Daily Value)','Vitamin C (% Daily Value)'\n             ,'Calcium (% Daily Value)']\n\n    label_tick = ['Calories','Total Fat','Saturated Fat','Cholesterol','Sodium','Carbohydrates'\n             ,'Dietary Fiber','Sugar','Protein','Dietary Fiber','Vitamin A','Vitamin C','Calcium']\n    \n    n = len(label)\n    ind = np.arange(n)\n\n    width = 0.3\n    fig,axs = plt.subplots(row,column)\n    \n    if last_blank:\n        axs[-1, -1].axis('off')\n    \n    fig.set_figheight(10)\n    fig.set_figwidth(20)\n\n    index = 0\n    for ax in axs:\n        for x in ax:\n            if last_blank and index == (row*column*2)-2:\n                continue\n            x.bar(ind - width\/2,dataframe.iloc[index][label].tolist(),width,label = dataframe.iloc[index]['Item'])\n            x.bar(ind + width\/2,dataframe.iloc[index+1][label].tolist(),width,label =dataframe.iloc[index+1]['Item'])\n            if index == 4 or index == 6:\n                x.set_xticks(ind)\n                x.set_xticklabels(label_tick)\n                x.tick_params(labelrotation=90)\n            else:\n                x.set_xticks(ind)\n                x.set_xticklabels([\"\"]*len(label_tick))\n            x.legend()\n            index +=2\n    fig.suptitle(plot_title,fontsize = 20)\ncomparison_plot(crispy_vs_no,'Crispy vs Grilled Sandwich Comparison',2,2)","607a1a00":"egg =  df[df['Item'].str.contains('with')&df['Item'].str.contains('Egg') & ~df['Item'].str.contains('White')].reset_index(drop=True)\negg_vs_white = pd.DataFrame(columns = df.columns)\nfor i in egg['Item']:\n    regex = \"^\"\n    \n    for j in i.split(\" \"):\n        regex += \"(?=.*\"+j+\")\"\n    regex+= \".*$\"\n    a = df[df['Item'].str.contains(regex)]\n    egg_vs_white = egg_vs_white.append(a,ignore_index = True)","605f1fd9":"comparison_plot(egg_vs_white,\"Whole Egg vs White Egg Comparison\",2,2,last_blank = True)","fba8cb2a":"df[['Item','Calories','Calories (% Daily Value)']]","38121ad9":"def LPModel(df,threshold,tolerant=0,morethan = True, lessthan = False,Print = True):\n    prob = LpProblem(\"McDonalds Problem\",LpMinimize)\n\n    '''\n    Objective function\n    '''\n    food_item = df['Item'].to_list()\n    \n    costs = dict(zip(food_item,[1]*len(food_item))) ##All item have equal weight. Z = 1*menu1 + 1*menu2 +...+ 1*menu260\n\n    \n    '''\n    Define Constrains\n    '''\n    calories = dict(zip(food_item,df['Calories (% Daily Value)'])) \n\n    fat = dict(zip(food_item,df['Total Fat (% Daily Value)']))\n\n    sat_fat = dict(zip(food_item,df['Saturated Fat (% Daily Value)']))\n\n    cholesterol = dict(zip(food_item,df['Cholesterol (% Daily Value)']))\n\n    sodium = dict(zip(food_item,df['Sodium (% Daily Value)']))\n\n    carbs = dict(zip(food_item,df['Carbohydrates (% Daily Value)']))\n\n    dietary_fiber = dict(zip(food_item,df['Dietary Fiber (% Daily Value)']))\n\n    sugar = dict(zip(food_item,df['Sugars (% Daily Value)'])) \n\n    protein = dict(zip(food_item,df['Protein (% Daily Value)'])) \n\n    vit_a = dict(zip(food_item,df['Vitamin A (% Daily Value)']))\n\n    vit_c = dict(zip(food_item,df['Vitamin C (% Daily Value)']))\n\n    calcium = dict(zip(food_item,df['Calcium (% Daily Value)']))\n\n    iron = dict(zip(food_item,df['Iron (% Daily Value)']))\n\n    food_vars = LpVariable.dicts('Menu',food_item,lowBound=0,cat='Integer') #We cannot order a half of big mac ofc, set minimum order to 0\n\n    prob += lpSum([costs[i]*food_vars[i] for i in food_item])\n    \n    i = threshold\n    b = tolerant\n    \n    ##Set Constrains\n    if lessthan:\n        prob += lpSum([calories[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([fat[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([sat_fat[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([cholesterol[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([sodium[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([carbs[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([dietary_fiber[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([sugar[f]* food_vars[f] for f in food_item])<= i+b\n        prob += lpSum([protein[f]* food_vars[f] for f in food_item])<= i+b\n        prob += lpSum([vit_a[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([vit_c[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([calcium[f] * food_vars[f] for f in food_item]) <= i+b\n        prob += lpSum([iron[f] * food_vars[f] for f in food_item]) <= i+b\n        \n    if morethan:\n        prob += lpSum([calories[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([fat[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([sat_fat[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([cholesterol[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([sodium[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([carbs[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([dietary_fiber[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([sugar[f]* food_vars[f] for f in food_item])>= i-b\n        prob += lpSum([protein[f]* food_vars[f] for f in food_item])>= i-b\n        prob += lpSum([vit_a[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([vit_c[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([calcium[f] * food_vars[f] for f in food_item]) >= i-b\n        prob += lpSum([iron[f] * food_vars[f] for f in food_item]) >= i-b\n\n        \n    \n    prob.solve()#Solve the problem\n    if Print:\n        print(\"Status:\", LpStatus[prob.status])\n    \n    #Get the item that we must order\n    ideal_item_name = []\n    ideal_item_count = []\n    for v in prob.variables():\n        if v.varValue>0:\n            ideal_item_name.append(v.name)\n            ideal_item_count.append(v.varValue)\n    dic = {'Items':ideal_item_name,\n          'Count':ideal_item_count}\n    df_opt = pd.DataFrame(dic)\n    df_opt.replace('Menu_','',inplace = True,regex=True)\n    df_opt.replace(\"_\", \" \",inplace = True,regex=True)\n    \n    return df_opt,LpStatus[prob.status]\n\ndef df_multiplier(df_opt):\n    df_ideal = pd.DataFrame(columns = df.columns.tolist())\n\n\n    for i in range(df_opt.shape[0]):\n        df_ideal = df_ideal.append(df[df['Item'] == df_opt['Items'][i]])\n        df_ideal.reset_index(drop = True,inplace = True)\n        df_ideal.loc[i,'Serving Size':'Protein (% Daily Value)']*=df_opt['Count'][i]\n    return df_ideal","f071710c":"df_opt,opt_stats = LPModel(df,100,morethan = True, lessthan = False)\ndf_opt","517bb475":"df_ideal = df_multiplier(df_opt)\ndf_ideal","f5dea72d":"df_ideal[['Serving Size','Calories (% Daily Value)','Total Fat (% Daily Value)','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)','Sodium (% Daily Value)',\n         'Carbohydrates (% Daily Value)','Dietary Fiber (% Daily Value)','Sugars (% Daily Value)','Protein (% Daily Value)','Vitamin A (% Daily Value)','Vitamin C (% Daily Value)','Calcium (% Daily Value)',\n        'Iron (% Daily Value)']].sum()","89cf81ce":"df_ideal[['Calories (% Daily Value)','Total Fat (% Daily Value)','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)','Sodium (% Daily Value)',\n         'Carbohydrates (% Daily Value)','Dietary Fiber (% Daily Value)','Sugars (% Daily Value)','Protein (% Daily Value)','Vitamin A (% Daily Value)','Vitamin C (% Daily Value)','Calcium (% Daily Value)',\n        'Iron (% Daily Value)']].sum().plot(kind='barh',figsize = (15,10))\n\nplt.axvline(x=100,color = 'Red',linestyle =  '--')","0917088a":"step = np.arange(0,100,0.1)\n\nfor s in step:\n    df_opt,opt_stats = LPModel(df,100,s,morethan = True, lessthan = True, Print = False)\n    if opt_stats == \"Optimal\":\n        print(\"Optimal Tolerance:\",s)\n        break","9259ba20":"df_opt","887d0e11":"df_ideal = df_multiplier(df_opt)\ndf_ideal","65ac91b3":"df_ideal[['Serving Size','Calories (% Daily Value)','Total Fat (% Daily Value)','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)','Sodium (% Daily Value)',\n         'Carbohydrates (% Daily Value)','Dietary Fiber (% Daily Value)','Sugars (% Daily Value)','Protein (% Daily Value)','Vitamin A (% Daily Value)','Vitamin C (% Daily Value)','Calcium (% Daily Value)',\n        'Iron (% Daily Value)']].sum()","5c89937a":"df_ideal[['Calories (% Daily Value)','Total Fat (% Daily Value)','Saturated Fat (% Daily Value)','Cholesterol (% Daily Value)','Sodium (% Daily Value)',\n         'Carbohydrates (% Daily Value)','Dietary Fiber (% Daily Value)','Sugars (% Daily Value)','Protein (% Daily Value)','Vitamin A (% Daily Value)','Vitamin C (% Daily Value)','Calcium (% Daily Value)',\n        'Iron (% Daily Value)']].sum().plot(kind='barh',figsize = (15,10))\n\nplt.axvline(x=100,color = 'Blue',linestyle =  '--')\nplt.axvline(x=100+s,color = 'Red',linestyle =  '--')\nplt.axvline(x=100-s,color = 'Red',linestyle =  '--')","bd0b7d77":"From the result, we can conclude there's no null value in dataset and all columns data types are correct, except `Serving Size` column because it supposed to be int64, not object data type. Most of the nutrients have a column of percentage daily need. We're going to add Sugars, Protein, and Calories column in percentage daily needs later.\n\nIf we read how all data write in `Serving Size`. there are several weight\/volume units to describe the menus. That is Ounce (oz), Fluid Ounce (fl oz), Gram (g) and Millilitre (ml). Most of the data use an ounce or gram unit for food and fluid oz for a drink, but some data like `1% Low Fat Milk Jug` and `Fat-Free Chocolate Milk Jug` items use millilitre unit. So we're going to transform all unit to gram unit, and for data who didn't provide mass unit (like a fluid ounce or millilitre), we're going to use the density of milk (Only milk item who didn't have mass unit) for millilitre and than for fluid once we're going to use the density of pure water.","2659088f":"In this notebook, most of packages that We use is common like Pandas, NumPy, etc. and We're going to use Pulp package later. Pulp is used to solve a linear programming problem.\n### Data Acquisition and Data Cleaning\nLet's begin with load a dataset first.\n","07ea9ff2":"#### Check Quality of data\nBefore we dive deeper. I'm going to check is there any null value or incorrect data type in this dataset? and then if we see a data in `Serving Size` column, we need to normalize it to a standard unit.","5208fdbc":"From the figure, Items with **whole egg have more nutrient rather than without egg folk**. But, **egg yolk contains a lot of cholesterol**. It's shown on how significant different between cholesterol on Whole egg and cholesterol on egg white only. The different can be up to seven times. \n\nAnd the last question that we going to answer is **What is the least number of items could you order from the menu to meet one day's nutritional requirements?**\n\nTo answer this problem, please note that we want to order several items in order to meet our daily needs and so we can bring this problem into **Optimization Problem**, because we're going to **minimum the number of item** with **maximum nutrition**. We can use **Linear Programming** to solve this problem. To do that, we need state some function.\n\nWe know that we're going to get **minimum number of order**. It's our **objective function**. this objective function can be written into a mathematical equation as follows:\n\n$Z=menu_{1}+menu_{2}+menu_{3}+...+menu_{259}+menu_{260}$\n\n$Z$ define as a number of order, and $menu_{1},...,menu_{260}$ define as a total item that we must order. \n\nAfter we define our objective function, we need **define our constrain**. We know that we're going to meet one day's nutrional requirement, so the constrain is the nutrient itself. For example we have a amount of calories:","f170fc4a":"So the **mininum number of order is 5** with 3 Big breakfast with Hotcakes (Large Biscuit), 1 Fruit & Maple Oatmeal without Brown Sugar, and 1 Premium Southwest Salad with Grilled Chicken. Let's see how much calories that we get from that order:","4e84497d":"From the iteration above, we get the smallest tolerant number is 26. And with that tolerant number, we get a set of item that we must order to get daily nutrient requirement. It's 1 Egg McMuffin, 2 Hamburger, 1 Hash Brown, 1 Hotcakes, 1 Iced Coffee with Sugar-Free French Vanilla Syrup, 1 Large Fries, and 2 Side Salad (The total is 9 items). Let's see is give maximum nutrient need constrain can save our life?","3840361f":"From the figure, we can conclude that **Fat has the highest correlation with calories**. It means more fat in a menu can imply into more calories too. followed by Protein in second place (0.79) and Carbohydrates in third place (0.78). Besides the correlation with calories, there's a high correlation score in another feature, for example the correlation between Sodium and Iron (0.87), and Sodium between Protein (0.87)\n\nAfter know some interesting information, we're going to know **does ordered grilled chicken instead of crispy increase a sandwich nutritional values?**","b03cf054":"From the figure, most item in the menu is **Coffee & Tea (36.5%)** and most calories came from **Chicken & Fish (28.2%)**. If we see dessert, with only 7 item (2.7%) in the menu (Second least item in the menu), it gets 15.5% calories (Fourt most calories in the menu).\n\nLet's see how the correlation between nutrients with Heatmap plot:","b5620708":"# McDonald's Menu Analysis\n\n## Introduction\nMcDonald's is one of the most famous fast food in the world. Before COVID Outbreak, a lot of people in my city love to spend their time in McDonald's. Not only for eating, sometimes they choose McDonald's because it's comfortable to meet with friends or maybe Studying with enjoying some french fries and Wi-Fi Connection.\n\nIn this notebook, I'm going to answer all inspiration from this dataset: \n1. How many calories does the average McDonald's value meal contain? \n2. How much do beverages, like soda or coffee, contribute to the overall caloric intake?\n3. Does ordered grilled chicken instead of crispy increase a sandwich's nutritional value?\n4. What about ordering egg whites instead of whole eggs? \n5. What is the least number of items could you order from the menu to meet one day's nutritional requirements?\n\n## Working on Data\n### Install and Import Some Usefull Package","f0d22040":"The answer is **Yes**, with a serving size that not too different than before (1.8 kg), **only 5 nutrient that not meet the daily requirement** (Calories, Carbohydrates, Dietary Fiber, Calcium, and Iron). Besides that, we didn't get huge cholesterol in this set menu. With the number of tolerant is 26, we get  74% of calcium for the minimum percentage compared by all nutrient based on nutrient daily need. and the highest percentage is 126% of Cholesterol and Sodium compared by all nutrient based on nutrient daily need\n\n## Closing\nAfter we spent much time to work in our dataset, we got much information from there and we can answers all question that came from this dataset inspiration. Thanks for \"read\" this notebook. If you have any feedback, please let me know :)\n\n**Alvaro Basily**","b8801013":"The average calories in McDonald's menu is **368.27 kal**. Let's see how many foods and drinks on the menu and from where the calories came.","f967d86d":"From the figure, **mostly crispy sandwich has more nutrient rather than grilled**. But in grilled sandwich have more cholesterol, protein and vitamin c rather than in crispy sandwich. \n\nLet's see is **ordering egg whites instead of whole eggs can affect the nutrient?**","46ffe1c6":"after the dataset has been checked and cleaned. now the dataset is ready to use and we can start dive into our dataset\n\n### Data Exploration\nLet's describe our data first","687aa6ab":"With almost 2 kg serving size, all the nutrients are meet the daily needs. But on another side, we got a lot of cholesterol too. It's almost 6 times from daily requirement. of course this is a big problem for health. Not only cholesterol, we got several nutrients that bost more than 2 times from daily requirement. It's vitamin A (2.2 times), protein (2.8 times), sugar (2.6 times), sodium (3.2 times), saturated fat (2.9 times), and total fat (3.2 times).   \n\nTo get \"more healthy\" order item and of course to avoid a heart attack, it's better to add more constrain on this problem.\n\nIf before we only give a minimum daily need requirement, now we can give **maximum daily requirement** to limit all nutrient intake. And because we have a lot of nutrient and menus that must be optimized, it's impossible to get exactly 100% of all nutrient daily needs requirement. We're going to give a tolerant number, so it will be ok if we get nutrient that have slightly less\/more from daily needs.","90b9b395":"and assume we need 2500 calories in one day. so we can write this constrain into a mathematical function as follows:\n$300\\times menu_{1}+250\\times menu_{2}+370 \\times menu_{3}+...+340 \\times menu_{257}+810 \\times menu_{258}+410 \\times menu_{259}\\geq 2500$\n\nBecause in datasets provided one day's nutritional requirement in each nutrition. We will use percentage rather than use gram unit. And at the end we will have 16 constrains because we have 16 nutrition information.\n\nAfter we state our \"nutrient constraints\", don't forget to define the minimum of item that we can buy. $(menu_{n} \\geq 0)$\n\nlet's bring that all equation into a method with `pulp` library:","6e14f8dc":"After normalized `Serving Size` column, let's add Sugars, Protein, and Calories column in percentage daily needs unit."}}