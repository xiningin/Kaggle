{"cell_type":{"dc4d79a3":"code","e3cebefd":"code","cfeca0a1":"code","d31de96d":"code","19d643a6":"code","a341e294":"code","579660a4":"code","53066769":"code","1abe2066":"code","905421c2":"code","4561c47b":"markdown","d61e64b4":"markdown","dc15494a":"markdown","1c79abb5":"markdown","d575d9f6":"markdown","f31f8c62":"markdown"},"source":{"dc4d79a3":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom xgboost import XGBRegressor","e3cebefd":"data = pd.read_csv('..\/input\/london-bike-sharing-dataset\/london_merged.csv')","cfeca0a1":"data","d31de96d":"data.info()","19d643a6":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Extract month, day, and hour features from the timestamp column\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df['month'] = df['timestamp'].apply(lambda x: x.month)\n    df['day'] = df['timestamp'].apply(lambda x: x.day)\n    df['hour'] = df['timestamp'].apply(lambda x: x.hour)\n    df = df.drop('timestamp', axis=1)\n    \n    # One-hot encode weather_code column\n    weather_dummies = pd.get_dummies(df['weather_code'], prefix='weather')\n    df = pd.concat([df, weather_dummies], axis=1)\n    df = df.drop('weather_code', axis=1)\n    \n    # Split df into X and y\n    y = df['cnt']\n    X = df.drop('cnt', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","a341e294":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","579660a4":"X_train","53066769":"y_train","1abe2066":"model = XGBRegressor()\nmodel.fit(X_train, y_train)","905421c2":"y_pred = model.predict(X_test)\n\nrmse = np.sqrt(np.mean((y_test - y_pred)**2))\nr2 = 1 - (np.sum((y_test - y_pred)**2) \/ np.sum((y_test - y_test.mean())**2))\n\nprint(\"RMSE: {:.2f}\".format(rmse))\nprint(\" R^2: {:.4f}\".format(r2))\n\nfig = px.scatter(\n    x=y_pred,\n    y=y_test,\n    labels={'x': \"Predicted\", 'y': \"Actual\"},\n    title=\"Actual vs. Predicted Values\",\n    width=700,\n    height=700\n)\n\nfig.show()","4561c47b":"# Getting Started","d61e64b4":"# Preprocessing","dc15494a":"# Training","1c79abb5":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/-46XflOZewg","d575d9f6":"# Results","f31f8c62":"# Task for Today  \n\n***\n\n## Bike Share Usage Prediction  \n\nGiven *data about a bike share service in London*, let's try to predict the **number of bikes** used in a given hour.\n\nWe will use XGBoost to make our predictions."}}