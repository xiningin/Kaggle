{"cell_type":{"39dabf3d":"code","a22d6d2e":"code","f655c638":"code","a71733dc":"code","b81738b2":"code","cfcf924b":"code","fefffe9c":"code","0501553a":"code","8550f006":"code","97437631":"code","d3fbc785":"code","40943e7c":"code","f070b064":"code","2dbb0fe9":"code","01b71242":"code","ccff7f68":"code","32c04af7":"code","74441b8b":"code","660c11a0":"code","5b6104d8":"code","2ee2f0a4":"code","39d26751":"code","2a27477b":"code","e1ba1586":"code","023f73ff":"code","54a08c6f":"code","098aa010":"code","183e31ae":"code","40bbc2e4":"code","c6b42daf":"code","f90631a9":"code","6bb73405":"code","b25c449b":"code","d4325d4c":"code","f500ba5d":"code","7d1e1e44":"markdown","f543a6cd":"markdown","c9cef373":"markdown","48934c60":"markdown","d344cf74":"markdown","963c320a":"markdown","dba5bc8c":"markdown","aef79532":"markdown","33b465c5":"markdown","51fcd7d0":"markdown","3bdb4423":"markdown","1a21e37f":"markdown","f7603b2b":"markdown","1e92a58c":"markdown","43bee2ea":"markdown","c9362bc1":"markdown","f956c027":"markdown","44d47d39":"markdown","35728f25":"markdown","267c8b8b":"markdown","972ad0c3":"markdown","5d9733bb":"markdown","cc0d14ba":"markdown","8ce34180":"markdown","496fd663":"markdown","02df138f":"markdown","a561e5f1":"markdown","2a5cac7c":"markdown","8adf1c19":"markdown","b81a2868":"markdown","d2688c92":"markdown","1f549b18":"markdown","dcd6a230":"markdown","471a3942":"markdown","83f2c9a7":"markdown","9bfd1a1d":"markdown","060659d0":"markdown"},"source":{"39dabf3d":"import pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#We are setting the seed to assure you get the same answers on quizzes as we set up\nrandom.seed(42)","a22d6d2e":"df = pd.read_csv('..\/input\/ab-data\/ab_data.csv')\ndf.head()","f655c638":"df.shape[0]","a71733dc":"df.user_id.nunique()","b81738b2":"df.converted.mean()","cfcf924b":"df[(df['group'] == 'treatment') & (df['landing_page'] != 'new_page')].shape[0]","fefffe9c":"sum([True for idx,row in df.iterrows() if any(row.isnull())])","0501553a":"# Removing the inaccurate rows, and storing the result in a new dataframe df2\ndf2 = df[((df['group'] == 'control') & (df['landing_page'] == 'old_page')) | ((df['group'] == 'treatment') & (df['landing_page'] == 'new_page'))]","8550f006":"# Double Checking all of the incorrect rows were removed from df2 - \n# Output of the statement below should be 0\ndf2[((df2['group'] == 'treatment') == (df2['landing_page'] == 'new_page')) == False].shape[0]","97437631":"df2.user_id.nunique()","d3fbc785":"df2[df2.user_id.duplicated()].user_id","40943e7c":"df2[df2.user_id.duplicated()]","f070b064":"# Removing one of the rows with a duplicate user_id..\ndf2 = df2.drop_duplicates('user_id')\n# Checking again if the row with a duplicate user_id is deleted or not\ndf2.user_id.duplicated().sum()","2dbb0fe9":"p_population = df2.converted.mean()\np_population","01b71242":"p_control = df2[df2['group'] == 'control'].converted.mean()\np_control","ccff7f68":"p_treatment = df2[df2['group'] == 'treatment'].converted.mean()\np_treatment","32c04af7":"# Calculating the actual difference (obs_diff) between the conversion rates for the two groups.\nobs_diff = p_treatment - p_control","74441b8b":"(df.landing_page == 'new_page').mean()","660c11a0":"df2_new = df2[df2.landing_page == 'new_page']\nn_new = df2_new.shape[0]\nn_new","5b6104d8":"df2_old = df2[df2.landing_page == 'old_page']\nn_old = df2_old.shape[0]\nn_old","2ee2f0a4":"# Simulating a Sample for the treatment Group\nnew_page_converted = np.random.choice(df2_new.converted, n_new)","39d26751":"# Simulating a Sample for the control Group\nold_page_converted = np.random.choice(df2_old.converted, n_old)","2a27477b":"new_page_converted.mean() - old_page_converted.mean()","e1ba1586":"# Sampling distribution \n\np_diffs = []\n\nfor i in range(10000):\n    new_page_converted = np.random.choice(df2_new.converted, n_new)\n    old_page_converted = np.random.choice(df2_old.converted, n_old)\n    p_diffs.append(new_page_converted.mean() - old_page_converted.mean())\n    \np_diffs = np.array(p_diffs)","023f73ff":"plt.hist(p_diffs)\nplt.title('Sampling distribution for probability difference')\nplt.xlabel('Probability Difference')\nplt.ylabel('Number of Samples')\nplt.axvline(obs_diff, c='red');","54a08c6f":"(p_diffs > obs_diff).mean()\n# p-value","098aa010":"import statsmodels.api as sm\n\n# number of conversions with the old_page\nconvert_old = df2_old.converted.sum()\n\n# number of conversions with the new_page\nconvert_new = df2_new.converted.sum()","183e31ae":"import statsmodels.api as sm\nz_score, p_value = sm.stats.proportions_ztest(np.array([convert_new, convert_old]), np.array([n_new, n_old]), alternative='larger')\nprint(z_score, p_value)","40bbc2e4":"df2['intercept'] = 1\n\ndf2 = df2.join(pd.get_dummies(df2['group'])).drop('control', axis=1).rename(columns={'treatment': 'ab_page'})\n\ndf2.head()","c6b42daf":"logit_mod = sm.Logit(df2['converted'], df2[['intercept', 'ab_page']])\n\nresults = logit_mod.fit()","f90631a9":"results.summary2()","6bb73405":"# Reading the countries.csv\ndf_countries = pd.read_csv('..\/input\/ab-testing-dataset\/countries.csv')\ndf_countries.head()","b25c449b":"# Joinning with the df2 dataframe\ndf_merged = df2.merge(df_countries, on='user_id')\ndf_merged.head()","d4325d4c":"# Creating the necessary dummy variables\ndf_merged = df_merged.join(pd.get_dummies(df_merged['country']))\ndf_merged.head()","f500ba5d":"# Fitting our model, and summarizing the results\n\nlogit_mod = sm.Logit(df_merged['converted'], df_merged[['intercept', 'ab_page', 'CA', 'UK']]) # US as the baseline.\n\nresults = logit_mod.fit()\n\nresults.summary2()","7d1e1e44":"* It is a good idea to consider adding the timestamp feature to our regression model as there might be a correlation between the time when the user visited the webpage and wether or not he\/she converts which would make a stronger and more accurate regression model.\n\n* The disadvantage of adding this term to our model is that if there exist any correlation between this term and the ab_page term, the p-value of ab_page won't be a reliable and true represention of the significance of our null hypothesis.","f543a6cd":"**h.** What proportion of the **p_diffs** are greater than the actual difference observed in the `df2` data?","c9cef373":"**d.** Removing **one** of the rows with a duplicate **user_id**, from the **df2** dataframe.","48934c60":"**g. Histogram**<br> \nPlotting a histogram of the **p_diffs**.","d344cf74":">The p-value is much larger than the type 1 error rate, which indicates that we should not reject the null hypothesis concluding that there is no difference between the new and old pages.","963c320a":"**c.** Given that an individual was in the `treatment` group, what is the probability they converted?","dba5bc8c":"\n\n**I. Using Built-in Methods for Hypothesis Testing**<br>\nI could also use a built-in to achieve similar results.  Though using the built-in might be easier to code, the above portions are a walkthrough of the ideas that are critical to correctly thinking about statistical significance. \n","aef79532":"**e.** Finding the difference in the \"converted\" probability $(p{'}_{new}$ - $p{'}_{old})$ for my simulated samples. ","33b465c5":"**b.** Are there repeated users?","51fcd7d0":"**d.** The proportion of users converted.","3bdb4423":"**Adding countries**<br> \nNow along with testing if the conversion rate changes for different pages, I will also add an effect based on which country a user lives in. ","1a21e37f":"**m.** Now I will use `sm.stats.proportions_ztest()` to compute our test statistic and p-value.\n\nThe syntax is: \n```bash\nproportions_ztest(count_array, nobs_array, alternative='larger')\n```\nwhere, \n- `count_array` = represents the number of \"converted\" for each group\n- `nobs_array` = represents the total number of observations (rows) in each group\n- `alternative` = choose one of the values from `[\u2018two-sided\u2019, \u2018smaller\u2019, \u2018larger\u2019]` depending upon two-tailed, left-tailed, or right-tailed respectively. \n\nThe built-in function above will return the z_score, p_value. \n\n---","f7603b2b":"**a.** How many unique **user_id**s are in **df2**?","1e92a58c":"**a.** What is $n_{new}$, the number of individuals in the treatment group? <br><br>","43bee2ea":"**b.** Given that an individual was in the `control` group, what is the probability they converted?","c9362bc1":"**e.** The number of times when the \"group\" is `treatment` but \"landing_page\" is not a `new_page`.","f956c027":">All our features scored a p-value greater than the type 1 error rate (0.05), from which we fail to reject the null hypothesis of having a zero effect on the outcome feature, which indicates that there is no any significant effect for page and country on conversion. From which it seems that the new webpage doesn't have more attraction from users from a specific country, but no matter which country the user was from the new webpage didn't have a better conversion rate.","44d47d39":"# Analyze A\/B Test Results \n\nThis notebook is organized into the following sections: \n\n- [Introduction](#intro)\n- [Part I - Probability](#probability)\n- [Part II - A\/B Test](#ab_test)\n- [Part III - Regression](#regression)\n\n\n<a id='intro'><\/a>\n## Introduction\n\nA\/B tests are very commonly performed by data analysts and data scientists. For this project, I will be working to understand the results of an A\/B test run by an e-commerce website.  My goal is to work through this notebook to help the company understand if they should:\n- Implement the new webpage, \n- Keep the old webpage, or \n- Perhaps run the experiment longer to make their decision.\n\n\n\n<a id='probability'><\/a>\n## Part I - Probability\n\nTo get started, let's import our libraries.","35728f25":"* Since our critival value at a level of significance 0.05 equals 1.645 (from the z-table), and this test is a one-sided right-tailed test, therefore our Z score lies outside the rejection rejion, which can be observed directly by our p-value which is way greater than our level of significance, which indicates that there is no evidence to reject the null hypothesis, concluding that there is no difference in the conversion rates of the old and new pages.\n\n* Our z-test p-value is much larger than the p-value we got from the sampling distribution earlier, which indicates even weeker evidence to reject the null hypothesis.","267c8b8b":"Now, I will read in the `ab_data.csv` data. Store it in `df`. Below is the description of the data, there are a total of 5 columns:\n\n- user_id: unique ID. (Int64 values)\n- timestamp: time stamp when the user visited the webpage.\n- group: in the current A\/B experiment, the users are categorized into two broad groups. <br>The `control` group users are expected to be served with `old_page`; and `treatment` group users are matched with the `new_page`. <br>However, **some inaccurate rows** are present in the initial data, such as a `control` group user is matched with a `new_page`. (`['control', 'treatment']`)\n- landing_page: it denotes whether the user visited the old or new webpage. (`['old_page', 'new_page']`)\n- converted: it denotes whether the user decided to pay for the company's product. Here, `1` means yes, the user bought the product. (`[0, 1]`)\n\n\n**a.** Reading in the dataset from the `ab_data.csv` file and taking a look at the top few rows:","972ad0c3":"* P-value = 0.1899\n\n* Our p-value is higher than the type 1 error rate from which we fail to reject the null hypothesis, however it is much lower than the p-value we got from the z-test, and that's because the p-value in the z-test was associated with a one-sided alternative hypothesis (P\ud835\udc5b\ud835\udc52\ud835\udc64 > P\ud835\udc5c\ud835\udc59\ud835\udc51), while our p-value associated with our regression model is associated with a two-sided alternative hypothesis (P\ud835\udc5b\ud835\udc52\ud835\udc64 != P\ud835\udc5c\ud835\udc59\ud835\udc51) as we are testing if the new webpage has any effect on the conversion rate wether a negative one or a positive one.","5d9733bb":"**b.** The number of rows in the dataset.","cc0d14ba":"**a.** What is the probability of an individual converting regardless of the page they receive?<br><br>\n","8ce34180":"**f.** Do any of the rows have missing values?","496fd663":">The new treatment group users led to a slightly lower conversion rate than the control group users, from which it seems that the conversion rate fot the old page is slightly higher than that of the new page.","02df138f":"**b.** What is $n_{old}$, the number of individuals in the control group?","a561e5f1":"<a id='ab_test'><\/a>\n## Part II - A\/B Test\n\nSince a timestamp is associated with each event, I could run a hypothesis test continuously as long as I observe the events. \n\nHowever, then the hard questions would be: \n- Do I stop as soon as one page is considered significantly better than another or does it need to happen consistently for a certain amount of time?  \n- How long do I run to render a decision that neither page is better than another?  \n\nThese questions are the difficult parts associated with A\/B tests in general.  \n\n\nFor now, I will consider I need to make the decision just based on all the data provided.  ","2a5cac7c":"<a id='regression'><\/a>\n### Part III - A regression approach\n\nIn this final part, I will achieve the A\/B test results by performing logistic regression.<br><br> ","8adf1c19":"**Null Hypothesis $H_0$ Testing**\n\nUnder the null hypothesis $H_0$, I will assume that $p_{new}$ and $p_{old}$ are equal. Furthermore, I will assume that $p_{new}$ and $p_{old}$ both are equal to the **converted** success rate in the `df2` data regardless of the page. So, my assumption is: <br><br>\n<center>\n$p_{new}$ = $p_{old}$ = $p_{population}$\n<\/center>\n\nIn this section, I will: \n\n- Simulate (bootstrap) sample data set for both groups, and compute the  \"converted\" probability $p$ for those samples. \n\n\n- Use a sample size for each group equal to the ones in the `df2` data.\n\n\n- Compute the difference in the \"converted\" probability for the two samples above. \n\n\n- Perform the sampling distribution for the \"difference in the converted probability\" between the two simulated-samples over 10,000 iterations; and calculate an estimate. ","b81a2868":"**c.** Displaying the rows for the duplicate **user_id**","d2688c92":"In a particular row, the **group** and **landing_page** columns should have either of the following acceptable values:\n\n|user_id| timestamp|group|landing_page|converted|\n|---|---|---|---|---|\n|XXXX|XXXX|`control`| `old_page`|X |\n|XXXX|XXXX|`treatment`|`new_page`|X |\n\n\nIt means, the `control` group users should match with `old_page`; and `treatment` group users should matched with the `new_page`. \n\nHowever, for the rows where `treatment` does not match with `new_page` or `control` does not match with `old_page`, we cannot be sure if such rows truly received the new or old wepage.  ","1f549b18":"**c.** The number of unique users in the dataset.","dcd6a230":"**c. Simulating Sample for the `treatment` Group**<br> \nSimulating $n_{new}$ transactions with a conversion rate of $p_{new}$ under the null hypothesis.  <br><br>\n","471a3942":"\n**f. Sampling distribution** <br>\nRe-creating `new_page_converted` and `old_page_converted` and finding the $(p{'}_{new}$ - $p{'}_{old})$ value 10,000 times. \n\n<br>\nStoring all  $(p{'}_{new}$ - $p{'}_{old})$  values in a NumPy array called `p_diffs`.","83f2c9a7":"**d.** What is the probability that an individual received the new page?","9bfd1a1d":"**d. Simulating Sample for the `control` Group** <br>\nSimulating $n_{old}$ transactions with a conversion rate of $p_{old}$ under the null hypothesis. <br> Storing these $n_{old}$ 1's and 0's in the `old_page_converted` numpy array.","060659d0":"Null hypothesis: P\ud835\udc5b\ud835\udc52\ud835\udc64 <= P\ud835\udc5c\ud835\udc59\ud835\udc51\n\nAlternative hypothesis: P\ud835\udc5b\ud835\udc52\ud835\udc64 > P\ud835\udc5c\ud835\udc59\ud835\udc51 "}}