{"cell_type":{"22afcbf1":"code","7aebc09b":"code","b4e72a97":"code","e238a4c1":"code","34bdef93":"code","4fe325e9":"code","9f73d138":"code","07df2861":"code","90327ff5":"code","c87c244b":"code","99081d67":"code","64cafbd4":"code","41619951":"code","69359bb9":"markdown","e876481f":"markdown","6fa6e1b2":"markdown"},"source":{"22afcbf1":"## Imports (code & data)\nimport re\nimport pandas as pd\n#import yake_helper_funcs as yhf\nfrom datetime import datetime, timedelta\nfrom math import sqrt, floor\nfrom sklearn.cluster import SpectralClustering\nimport numpy as np\nimport itertools\nfrom flashtext.keyword import KeywordProcessor\nimport string\nimport nltk\nimport math\nimport join_forum_post_info as jfpi\nimport kaggle_specific_embed_cluster as embed_cluster\nimport get_surprising_words as surprising_words\n\n# forum-wide frequency info for identifying surprising words\nfrequency_table = pd.read_csv(\"..\/input\/kaggle-forum-term-frequency-unstemmed\/kaggle_lex_freq.csv\",\n                             error_bad_lines=False)","7aebc09b":"## Utility functions\n\n# get sample post info by #\ndef get_post_info_by_cluster(number, \n                             data,\n                             cluster):\n    return(data[cluster.labels_ == number])\n\n# remove HTML stuff\n# https:\/\/medium.com\/@jorlugaqui\/how-to-strip-html-tags-from-a-string-in-python-7cb81a2bbf44\ndef remove_html_tags(text):\n    clean = re.compile('<.*?>')\n    return(re.sub(clean, '', text))\n\n\ndef polite_post_index(forum_posts):\n    '''Pass in a list of fourm posts, get\n    back the indexes of short, polite ones.'''\n    \n    polite_indexes = []\n    \n    # create  custom stop word list to identify polite forum posts\n    stop_word_list = [\"no problem\", \"thanks\", \"thx\", \"thank\", \"great\",\n                      \"nice\", \"interesting\", \"awesome\", \"perfect\", \n                      \"amazing\", \"well done\", \"good job\", \"good work\",\n                      \"congrats\", \"+1\", \"you're welcome\", \"good one\",\n                      \"you are welcome\", \"good\", \"wow\", \"congrats\",\n                      \"thnx\", \"my pleasure\", \"congratulations\", \"welcome\",\n                      \"brilliant\"\n                     ]\n\n    # create a KeywordProcess\n    keyword_processor = KeywordProcessor()\n    keyword_processor.add_keywords_from_list(stop_word_list)\n\n    # test our keyword processor\n    for i,post in enumerate(forum_posts):\n        post = post.lower().translate(str.maketrans({a:None for a in string.punctuation}))\n        \n        if len(post) < 100:\n            keywords_found = keyword_processor.extract_keywords(post.lower(), span_info=True)\n            if keywords_found:\n                polite_indexes.append(i)\n\n    return(polite_indexes)","b4e72a97":"## Hyperprameters\n\n# number of clusters currently based on the square root of the # of posts\ndays_of_posts = 4\n\n# do you want to inclue comments on notebooks\/scripts?\ninclude_kernel_comments = False","e238a4c1":"# read in and join forum post info\nforums_info_df, forum_posts_df, forum_topics_df = jfpi.read_in_forum_tables()\n\n# data validation\njfpi.check_column_names_forum_posts(forum_posts_df)\njfpi.check_column_names_forum_forums(forums_info_df)\njfpi.check_column_names_forum_topics(forum_topics_df)\n\n# join info from different tables\nposts_and_topics_df = jfpi.join_posts_and_topics(forum_posts_df, forum_topics_df)\nforum_posts = jfpi.join_posts_with_forum_title(posts_and_topics_df, forums_info_df)","34bdef93":"# remove kernel comments if desired\nif include_kernel_comments == False:\n    forum_posts = forum_posts[forum_posts[\"ForumTitle\"] != \"Kernels\"]\n\n# parse dates\nforum_posts['Date'] = pd.to_datetime(forum_posts.PostDate, format=\"%m\/%d\/%Y %H:%M:%S\")\n\n# posts from the last X days\nstart_time = datetime.now() + timedelta(days=-days_of_posts)  \n\n# forum posts from last week (remember to convert to str)\nsample_post_info = forum_posts.loc[forum_posts.Date > start_time]\nsample_posts = sample_post_info.Message.astype(str)\n\n# reindex from 0\nsample_posts.reset_index(drop=True)\nsample_post_info.reset_index(drop=True)\n\n# remove html tags\nsample_post_info.Message = sample_post_info.Message\\\n    .astype(str)\\\n    .apply(remove_html_tags)\nsample_posts = sample_posts.apply(remove_html_tags)\n\n# remove polite posts (make sure you remove HTML tags first)\npolite_posts = sample_posts.index[polite_post_index(sample_posts)]\nsample_posts = sample_posts.drop(polite_posts)\nsample_post_info = sample_post_info.drop(polite_posts)","4fe325e9":"# add URLs of each post to info\n\n# add column for URLS\nsample_post_info[\"url\"] = \"\"\n\n# info w\/ forum titles and URL abbreviations\nforum_titles = [\"Kaggle Forum\",\"Getting Started\", \"Product Feedback\", \n                \"Questions & Answers\", \"Datasets\", \"Learn\"]\nforum_title_abbrvs = {\"Kaggle Forum\":\"general\",\n                \"Getting Started\":\"getting-started\",\n                \"Product Feedback\":\"product-feedback\",\n                \"Questions & Answers\":\"questions-and-answers\",\n                \"Datasets\":\"data\",\n                \"Learn\":\"learn-forum\"}\n\n# add URLs to posts in main forums\nfor index, row in sample_post_info.iterrows():\n   if row[\"ForumTitle\"] in forum_titles:\n        forum_name = row[\"ForumTitle\"]\n        forum_abbrv = forum_title_abbrvs[forum_name]\n        post_id = row[\"ForumPostId\"]\n        topic_id = row[\"ForumTopicId\"]\n        \n        post_url = (f'<a href=\"https:\/\/www.kaggle.com\/{forum_abbrv}\/{topic_id}#{post_id}\">kaggle.com\/{forum_abbrv}\/{topic_id}#{post_id}<\/a>')\n                \n        sample_post_info.at[index,'url'] = post_url","9f73d138":"# number of posts\nnum_of_posts = sample_posts.shape[0]\n\n# number of clusters is square root of the # of posts (rounded down)\nnumber_clusters = floor(sqrt(num_of_posts))\n\n# how many posts are we clustering?\nprint(f\"You're looking at {num_of_posts} posts.\")","07df2861":"# check out the first few rows:\nsample_post_info.head()","90327ff5":"clustering = embed_cluster.get_spectral_clusters(sample_posts=sample_posts)","c87c244b":"# count of posts\/cluster\ncluster_counts = pd.Series(clustering.labels_).value_counts()","99081d67":"# look at distrobution of cluster labels\nsize_df = pd.Series(clustering.labels_).value_counts().to_frame()\n\nsize_df = size_df.rename(columns={0: \"size\"})\n\nsize_df['characteristic_words'] = 0\nsize_df['characteristic_words'] = size_df['characteristic_words'].astype(object)\n\nsize_df[\"cluster_label\"] = size_df.index\n\nsize_df['link_to_posts'] = \"\"\n\nfor index, row in size_df.iterrows():\n    current_cluster_label = row[\"cluster_label\"]\n    link_to_posts = (f'<a href=\"#anchor_{current_cluster_label}\">Link to posts<\/a>')\n    size_df.at[index,'link_to_posts'] = link_to_posts\n\nfor i in size_df.index:\n    words = surprising_words.get_surprising_words(cluster_index=i,\n                                 post_data=sample_post_info, \n                                 cluster_object=clustering).tolist()\n    size_df.at[i,'characteristic_words'] = words","64cafbd4":"size_df","41619951":"# write suprising words & contents of cluster in file\nwith open(\"cluster_report.html\", 'w', encoding=\"utf-8\") as file:\n    # file header\n    file.writelines('<meta charset=\"UTF-8\">\\n')\n    \n    # add cluster info\n    file.write(size_df.drop([\"cluster_label\"], axis=1).to_html(escape=False))\n    file.write(\"\\n\")\n                    \n    for i in range(number_clusters):\n        if i in size_df.index:\n            file.write(f'\\n<h2 id=\"anchor_{i}\">Cluster {i}:<\/h2>\\n')\n\n            cluster_info = get_post_info_by_cluster(i,\n                                                    data = sample_post_info,\n                                                    cluster = clustering)\n\n            cluster_info = cluster_info.drop(['ForumTopicId','PostDate','ForumPostId',\n                                              'ForumId', 'Date'], axis=1)\n\n            # truncate posts\n            cluster_info.Message = cluster_info.Message.apply(lambda x: x[:100])\n\n            file.write(cluster_info.to_html(escape=False))","69359bb9":"# Preprocessing posts","e876481f":"# Embed & cluster forum posts","6fa6e1b2":"# Generate HTML report of clusters"}}