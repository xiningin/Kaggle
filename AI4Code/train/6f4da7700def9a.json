{"cell_type":{"dedf414a":"code","fd511ba0":"code","6de23fd1":"code","fa8cd0f7":"code","46eec462":"code","03c3e51c":"code","6e1f871a":"code","a18077a5":"code","91d74154":"code","bf788d75":"code","8fcb3938":"code","8ad87094":"code","41eb6f19":"code","2ac8315f":"code","87c6719e":"code","780f789f":"code","fcec3167":"code","f36be838":"code","10409043":"code","2c8daa1d":"code","f79f0caa":"code","eda442de":"code","a64c295b":"code","5d8ef079":"code","9dd422b2":"code","5e503f45":"code","e3c33f50":"code","c28c5b85":"code","574338cd":"code","99576491":"code","3b864612":"code","19394915":"code","b3fa27ca":"code","8cf7c862":"code","250fea2a":"code","0aea3a5c":"code","ca1d9c7b":"code","552ad605":"code","5371088f":"code","9b409da5":"code","7c900742":"code","bc2c2be6":"code","e6a56d23":"code","40834d08":"code","736862ad":"code","cade07fc":"code","d00bdc59":"code","f35df70b":"code","159cdc24":"code","8e713478":"code","fc2216f5":"code","9b6f0e08":"code","f973d0d8":"markdown","fe8142f1":"markdown","5d57f4a2":"markdown","0b16842b":"markdown","c670d920":"markdown","6eef7318":"markdown","2cc7cbec":"markdown","a6b8ed20":"markdown","64c46d1e":"markdown"},"source":{"dedf414a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd511ba0":"df = pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")\ndf_test = pd.read_csv(\"..\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv\")\ndf.head() ","6de23fd1":"df.describe()","fa8cd0f7":"df.info()","46eec462":"df.isnull().sum()\n","03c3e51c":"df_test.isnull().sum()","6e1f871a":"#filling the missing values with the mean of the column for quantitative variables\ndf['LoanAmount'] = df['LoanAmount'].fillna(df['LoanAmount'].mean())\ndf['Loan_Amount_Term'] = df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())\ndf['Credit_History'] = df['Credit_History'].fillna(df['Credit_History'].mean())","a18077a5":"df_test['LoanAmount'] = df_test['LoanAmount'].fillna(df_test['LoanAmount'].mean())\ndf_test['Loan_Amount_Term'] = df_test['Loan_Amount_Term'].fillna(df_test['Loan_Amount_Term'].mean())\ndf_test['Credit_History'] = df_test['Credit_History'].fillna(df_test['Credit_History'].mean())","91d74154":"#filling the missing values with the mode of the columns for categorical variables\ndf['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])\ndf['Dependents'] = df['Dependents'].fillna(df['Dependents'].mode()[0])\ndf['Married'] = df['Married'].fillna(df['Married'].mode()[0])\ndf['Self_Employed'] = df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])","bf788d75":"df_test['Gender'] = df_test['Gender'].fillna(df['Gender'].mode()[0])\ndf_test['Dependents'] = df_test['Dependents'].fillna(df['Dependents'].mode()[0])\ndf_test['Married'] = df_test['Married'].fillna(df['Married'].mode()[0])\ndf_test['Self_Employed'] = df_test['Self_Employed'].fillna(df['Self_Employed'].mode()[0])","8fcb3938":"#checking if our code worked properly\ndf.isnull().sum()","8ad87094":"sns.countplot(df['Gender'])","41eb6f19":"sns.countplot(df['Dependents'])","2ac8315f":"sns.countplot(df['Married'])","87c6719e":"sns.countplot(df['Self_Employed'])","780f789f":"sns.countplot(df['Property_Area'])","fcec3167":"sns.countplot(df['Loan_Status'])","f36be838":"##Creating this variable for future use\ndf['total_Income'] = df['ApplicantIncome'] + df['CoapplicantIncome']\ndf_test['total_Income'] = df_test['ApplicantIncome'] + df_test['CoapplicantIncome']\ndf['total_Income'].head()","10409043":"sns.distplot(df['ApplicantIncome'])","2c8daa1d":"#since the applicant income distribution is not normal we will convert it into normal distribution by using log transformation since normal distributions are better for training models\ndf['ApplicantIncome_Log'] = np.log(df['ApplicantIncome'])\nsns.distplot(df['ApplicantIncome_Log'])","f79f0caa":"df_test['ApplicantIncome_Log'] = np.log(df['ApplicantIncome'])","eda442de":"#similarly for co applicant income\nsns.distplot(df['CoapplicantIncome'])","a64c295b":"df['CoapplicantIncome'] = df['CoapplicantIncome']+1\ndf['CoapplicantIncome_Log'] = np.log(df['CoapplicantIncome'])\nsns.distplot(df['CoapplicantIncome_Log'])","5d8ef079":"df_test['CoapplicantIncome'] = df_test['CoapplicantIncome']+1\ndf_test['CoapplicantIncome_Log'] = np.log(df_test['CoapplicantIncome'])\n","9dd422b2":"sns.displot(df['LoanAmount'])","5e503f45":"df['LoanAmount_Log'] = np.log(df['LoanAmount'])\nsns.distplot(df['LoanAmount_Log'])","e3c33f50":"df_test['LoanAmount_Log'] = np.log(df_test['LoanAmount'])","c28c5b85":"sns.displot(df['Loan_Amount_Term'])","574338cd":"df['Loan_Amount_Term_Log'] = np.log(df['Loan_Amount_Term'])\nsns.distplot(df['Loan_Amount_Term_Log'])","99576491":"df_test['Loan_Amount_Term_Log'] = np.log(df_test['Loan_Amount_Term'])","3b864612":"sns.displot(df['Credit_History'])","19394915":"df['total_Income_Log'] = np.log(df['total_Income'])\nsns.distplot(df['total_Income_Log'])","b3fa27ca":"df_test['total_Income_Log'] = np.log(df_test['total_Income'])","8cf7c862":"# correl\ncorr = df.corr()\nplt.figure(figsize = (10,10))\nsns.heatmap(corr, annot = True, cmap = 'GnBu' )","250fea2a":"cols = ['ApplicantIncome','CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term','Loan_ID', 'CoapplicantIncome_Log']\nfinal = df.drop(columns = cols, axis = 1)\nfinal_test = df_test.drop(columns = cols, axis = 1)\nfinal","0aea3a5c":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncol = ['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area', 'Loan_Status']\n#col = ['Dependents']\nfor c in col:\n    final[c] = le.fit_transform(final[c])\n    if (c == 'Loan_Status'):\n        continue\n    final_test[c] = le.fit_transform(final_test[c])","ca1d9c7b":"final.head()","552ad605":"final_test","5371088f":"x_train = final.drop('Loan_Status', axis = 1)\ny_train = df['Loan_Status']","9b409da5":"x_test = final_test\ny_test = np.empty([367,1],dtype=\"str\")","7c900742":"x_train = final.drop('total_Income', axis = 1)\nx_train = x_train.drop('Loan_Status',axis = 1 )\nx_test = x_test.drop('total_Income', axis = 1)","bc2c2be6":"x_test","e6a56d23":"x_train['Dependents'].replace({\"3+\":\"4\"},inplace = True)\nx_test['Dependents'].replace({\"3+\":\"4\"},inplace = True)","40834d08":"x_train","736862ad":"y_train.replace({\"Y\":\"1\",\"N\":\"0\"},inplace = True)\ny_train","cade07fc":"from sklearn.model_selection import cross_val_score\ndef Classify(model):\n    model.fit(x_train, y_train)\n    y_test = model.predict(x_test)\n    return y_test","d00bdc59":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\ny_test = Classify(model)\n","f35df70b":"output = pd.DataFrame(y_test)\noutput","159cdc24":"output.replace({\"1\":\"Yes\",\"0\":\"No\"},inplace = True)\noutput","8e713478":"output.rename(columns={'':'Loan_Status'}, inplace=True)\noutput","fc2216f5":"output.rename(columns={output.columns[0]: 'Loan_Status'}, inplace= True)\noutput","9b6f0e08":"sns.displot(output['Loan_Status'])","f973d0d8":"# Training","fe8142f1":"## Label Encoding","5d57f4a2":"## Model Training","0b16842b":"## Preprocessing the data and understanding what the contents of it are.","c670d920":"## this is the final prediction from the logistic regression model","6eef7318":"## Final output is y_test which returns whether the loan is approved or not","2cc7cbec":"# Testing part of the dataset","a6b8ed20":"## Exploratory Data Analysis","64c46d1e":"### Gender: Male- 1 Female - 0\n### Married: Yes - 1  No - 0\n### Self_Employed : Yes - 1 No - 0\n### Property_Area : Urban - 2 Rural - 0 Semi Urban - 1\n### Loan_Status : Yes - 1 No - 0"}}