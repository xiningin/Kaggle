{"cell_type":{"30307307":"code","1a43c81c":"code","0eb1dffd":"code","d1959b3d":"code","28de0943":"code","4daf0b08":"code","1ee152d1":"code","7340b6a5":"code","255f5375":"code","a5560eb1":"code","46e73d9e":"code","ed276650":"code","d42ba920":"code","bd85b156":"code","1cb58aab":"code","fafb3a5f":"code","ab3ec625":"code","6ac32b50":"code","21692c3b":"code","d1a94c7c":"code","7c0e403c":"code","f04fb9bb":"code","9a6eac4e":"code","a91628fa":"code","10b20b6a":"code","7610ba9f":"code","67d73f5d":"code","84852e26":"code","06d31c7b":"code","f4455e9c":"code","6b1f81d5":"code","d58966cb":"code","4595f5b8":"code","826a2215":"code","335889a6":"code","bf6cbfc1":"code","65cae488":"code","97cffae2":"markdown","edaba13e":"markdown","06276c24":"markdown","c237956b":"markdown","cd20dbb5":"markdown","63da5ffa":"markdown","ece51689":"markdown","b37e7efe":"markdown","01a08687":"markdown","81739bbb":"markdown"},"source":{"30307307":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport sklearn \n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","1a43c81c":"#loading the dataset to a dataframe\n\ndataset=pd.read_csv('..\/input\/placement-dataset\/datasets_596958_1073629_Placement_Data_Full_Class (1).csv')","0eb1dffd":"dataset.head()","d1959b3d":"dataset.tail()","28de0943":"#total number of  rows and columns\n\ndataset.shape","4daf0b08":"# Checking data missing values\n\ndataset.isnull().sum()","1ee152d1":"# salary column has missing values Imputing missing values with fillna\n\ndataset['salary'].fillna(value=dataset[\"salary\"].mean(), inplace=True)\n","7340b6a5":"dataset.info()","255f5375":"from sklearn.preprocessing import LabelEncoder\n\n# exrtact categorical features\n\ncat_col=dataset.select_dtypes(object).columns.tolist()\nlen(cat_col)","a5560eb1":"# Convert categorized values to numerical values\n\nle = LabelEncoder()\ndataset[cat_col] =dataset[cat_col].astype('str').apply(le.fit_transform)\ndataset","46e73d9e":"# checking how each column is corelated with target variable\ncor=dataset.corr()['status'].sort_values()\ncor","ed276650":"import matplotlib.pyplot as plt\nfor i in dataset.columns:\n    if dataset[i].dtypes==\"object\":\n        dataset[i].value_counts().plot(kind=\"barh\",alpha=0.5,)\n        plt.show()","d42ba920":"#Checking and highliting the variables which has high correletion\nDF=dataset.corr()\ndef highlight(s):\n    return ['background-color: yellow' if (v>0.85) or (v<-0.95) else 'background-color: white' for v in s]\nDF.style.apply(highlight, axis=0)","bd85b156":"import seaborn as sns\nplt.figure(figsize=(15,10))\ncorr = dataset.corr()\nsns.heatmap(corr, annot = True)","1cb58aab":"X=dataset.drop(\"status\",axis=1)\ny=dataset[\"status\"]","fafb3a5f":"#splitting into train and test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)","ab3ec625":"from sklearn.linear_model import LogisticRegression\nlogreg= LogisticRegression(solver='liblinear')\nlogreg","6ac32b50":"logreg.fit(X_train, y_train)","21692c3b":"pred_train=logreg.predict(X_train)\npred_train","d1a94c7c":"pred_test=logreg.predict(X_test)\npred_test","7c0e403c":"from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score","f04fb9bb":"print(\"Train confusion matrix :\\n\",confusion_matrix(pred_train, y_train))\nprint(\"Test confusion matrix :\\n\",confusion_matrix(pred_test, y_test))","9a6eac4e":"print(\"Test Accuracy :\",accuracy_score(pred_test, y_test)*100)","a91628fa":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()","10b20b6a":"rfc.fit(X_train,y_train)","7610ba9f":"rfc.score(X_test,y_test)","67d73f5d":"X_train","84852e26":"from sklearn.preprocessing import MinMaxScaler\n\n# fit scaler on training data\nnorm = MinMaxScaler().fit(X_train)\n\n# transform training data\nX_train_norm = norm.transform(X_train)\n\n# transform testing data\nX_test_norm = norm.transform(X_test)\n","06d31c7b":"rfc1=RandomForestClassifier()\nrfc1.fit(X_train_norm,y_train)","f4455e9c":"rfc1.score(X_test_norm,y_test)","6b1f81d5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler1=scaler.fit(X_train)\nX_train1 = scaler1.transform(X_train)\nX_test1 = scaler1.transform(X_test)","d58966cb":"rfc2=RandomForestClassifier()\nrfc2.fit(X_train1,y_train)","4595f5b8":"rfc2.score(X_test1,y_test)","826a2215":"X_train1","335889a6":"from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score","bf6cbfc1":"print(\"Training Accuracy :\",accuracy_score(pred_train, y_train)*100)\nprint(\"Test Accuracy :\",accuracy_score(pred_test, y_test)*100)\nprint(\"Precision :\",precision_score(pred_test, y_test)*100)\nprint(\"Recall :\",accuracy_score(pred_test, y_test)*100)\nprint(\"F1-score\",f1_score(pred_test, y_test)*100)","65cae488":"print(\"Train confusion matrix :\\n\",confusion_matrix(pred_train, y_train))\nprint(\"Test confusion matrix :\\n\",confusion_matrix(pred_test, y_test))","97cffae2":"## MinMaxScaler ","edaba13e":"## Standardscaler","06276c24":"###Label encoding","c237956b":"## Datapreprocessing \n\n#### NullValue treatemnt","cd20dbb5":"####  random forest accuracy is more compared to confusion metrices","63da5ffa":"### Accuracy 97%","ece51689":"## Logistic Regression\u00b6","b37e7efe":"##  Importing the required packages and libraries\u00b6","01a08687":"# Accuracy for Random Forest","81739bbb":"# Random Forest"}}