{"cell_type":{"9c277958":"code","1809b721":"code","9ced09ff":"code","ce9bb768":"code","d2104bbf":"code","04cf647d":"code","8d27f9a2":"code","2e12b135":"code","2d565687":"code","cd148c92":"code","e8fdd425":"markdown","1446ad51":"markdown","7c2d22ed":"markdown"},"source":{"9c277958":"import numpy as np\nimport pandas as pd","1809b721":"def rle2mask(mask_rle, shape=(1600,256)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    #print(s)\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        \n        img[lo:hi] = 1\n        \n    return img.reshape(shape).T\n\n\n#https:\/\/www.kaggle.com\/bguberfain\/memory-aware-rle-encoding\ndef rle_encode_less_memory(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    This simplified method requires first and last pixel to be zero\n    '''\n    pixels = img.T.flatten()\n    \n    # This simplified method requires first and last pixel to be zero\n    pixels[0] = 0\n    pixels[-1] = 0\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 2\n    runs[1::2] -= runs[::2]\n    \n    return ' '.join(str(x) for x in runs)\n\ndef image_size_dict(img_id, x, y):\n   # print(x,y)\n    image_id = [thing[:-5] for thing in img_id]\n    print(image_id)\n    x_y = [(x[i], y[i]) for i in range(0, len(x))]  \n    print(x_y)\n    t= dict(zip(image_id, x_y))\n    print(t)\n    return t\n\ndef global_shift_mask(maskpred1, y_shift, x_shift):\n    \"\"\"\n    applies a global shift to a mask by padding one side and cropping from the other\n    \"\"\"\n    if y_shift <0 and x_shift >=0:\n        maskpred2 = np.pad(maskpred1, [(0,abs(y_shift)), (abs(x_shift), 0)], mode='constant', constant_values=0)\n        maskpred3 = maskpred2[abs(y_shift):, :maskpred1.shape[1]]\n    elif y_shift >=0 and x_shift <0:\n        maskpred2 = np.pad(maskpred1, [(abs(y_shift),0), (0, abs(x_shift))], mode='constant', constant_values=0)\n        maskpred3 = maskpred2[:maskpred1.shape[0], abs(x_shift):]\n    elif y_shift >=0 and x_shift >=0:\n        maskpred2 = np.pad(maskpred1, [(abs(y_shift),0), (abs(x_shift), 0)], mode='constant', constant_values=0)\n        maskpred3 = maskpred2[:maskpred1.shape[0], :maskpred1.shape[1]]\n    elif y_shift < 0 and x_shift < 0:\n        maskpred2 = np.pad(maskpred1, [(0, abs(y_shift)), (0, abs(x_shift))], mode='constant', constant_values=0)\n        maskpred3 = maskpred2[abs(y_shift):, abs(x_shift):]\n    return maskpred3","9ced09ff":"dfpred = pd.read_csv('..\/input\/best-public-hubmap\/submission_public_TPU.csv')\nTARGET_ID = 'afa5e8098'\ny_shift = -48 #-40 -> -42 -> -43\nx_shift = -21 #-24 -> -20 -> -21","ce9bb768":"#get image sizes \ndfinfo = pd.read_csv('..\/input\/hubmap-kidney-segmentation\/HuBMAP-20-dataset_information.csv')\n\nsize_dict = image_size_dict(dfinfo.image_file, dfinfo.width_pixels, dfinfo.height_pixels)  #dict which contains image sizes mapped to id's\nmask_shape = size_dict.get(TARGET_ID)\n#print(mask_shape)\ntaridx = dfpred[dfpred['id']==TARGET_ID].index.values[0]  #row of TARGET_ID in dfpred\n","d2104bbf":"maskpred = rle2mask(dfpred.iloc[taridx]['predicted'], mask_shape)\n\nmaskpred1 = maskpred.copy()\nmaskpred1[maskpred1>0]=1\n\n","04cf647d":"mask_shifted = global_shift_mask(maskpred1, y_shift, x_shift)  #apply specified shift to mask","8d27f9a2":"newrle = rle_encode_less_memory(mask_shifted)  #rle encode shifted mask\n\ndfpred.at[taridx, 'predicted'] = newrle\n\ndfsample = pd.read_csv('..\/input\/hubmap-kidney-segmentation\/sample_submission.csv')\n\nmydict = dict(zip(dfpred['id'], dfpred['predicted']))\n\ndfsample['predicted'] = dfsample['id'].map(mydict).fillna(dfsample['predicted'])\n\ndfsample = dfsample.replace(np.nan, '', regex=True)\n\ndfsample.to_csv('submission.csv',index=False)\n","2e12b135":"mask1 = rle2mask(submission.iloc[4, 1], (image1.shape[1], image1.shape[0]))","2d565687":"mydict","cd148c92":"dfsample.head()","e8fdd425":"Apply global shift to mask","1446ad51":"This notebook demonstrates how to apply an arbitrary global shift to a mask given a starting RLE.\n\nAs the example, I take the current best public submission from @wrrosa (LB= 0.848) here: https:\/\/www.kaggle.com\/wrrosa\/hubmap-tf-with-tpu-efficientunet-512x512-subm and shift the mask of id afa5e8098 by y=-42, x=-20","7c2d22ed":"Set as inputs your prediction file, target_id to shift, and the x and y shift values"}}