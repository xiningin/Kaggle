{"cell_type":{"ec142100":"code","3d2c1ce5":"code","d3b5c5a8":"code","a61cae31":"code","f24c8175":"code","c4df88b9":"code","34e2373d":"code","160eea49":"code","41c569ad":"code","e67cabae":"code","18556616":"code","8219e578":"code","38e3da8d":"code","f219c3bc":"code","a0dd565d":"code","39410548":"code","37ad5e78":"code","6d7bbb3a":"code","6b0d9f3e":"code","1559c0ae":"code","93363e7b":"code","3a2ece2b":"code","f257378a":"code","4cd8199c":"code","b345aa20":"code","1b897f48":"code","382fe22d":"code","83153967":"code","a01c8c11":"code","78579245":"code","986ca176":"code","bc606df6":"code","9248b032":"code","9f187e56":"code","4e65801c":"code","6bada8a6":"code","26c11702":"code","22dfdf5e":"code","b39f7eb0":"code","46ba9bf1":"code","76774c99":"code","7cc46c29":"code","34dc1aeb":"code","8e142f9a":"code","2741868c":"code","5019b6aa":"code","f7cf0cd5":"code","31149b8f":"code","507e68f6":"code","e7e322d6":"code","971cc28a":"code","6fdb5d45":"code","b0a296fb":"code","c0d9472f":"code","74984baa":"code","bf8280ce":"code","c83432b5":"code","e7a11c99":"code","af80a2ad":"code","5d36851a":"code","e07ecd1d":"code","cd45c02f":"code","594ef7b2":"code","d2c238ec":"code","53931f43":"code","70b27f92":"code","57ccb7cc":"code","ef7e0a40":"code","6c52ef3d":"code","3830ff9a":"code","2309f4f9":"code","9468eb4f":"code","c7d2b68f":"code","4d74a5e0":"code","a92340c5":"code","142dd448":"code","006ccaae":"code","cc3c7e2d":"code","cd196011":"code","da27def3":"code","428a47c1":"code","2468f154":"code","96232a19":"code","2e87573d":"code","258130b8":"code","d4e92415":"code","9800a687":"code","d73449b5":"code","456006b5":"code","26c90bbf":"code","aee44823":"code","2308a365":"code","a9f64392":"code","7b4c0b71":"code","06ac5cda":"code","763c5e33":"code","ee16d8a1":"code","c7156087":"code","83a68b22":"code","1e2de34b":"markdown","deffce20":"markdown","3797e8a4":"markdown"},"source":{"ec142100":"def add_nums(x, y, z=None, flag=False):\n    if(flag):\n        print('Flag is true')\n    if (z == None):\n        return x+y\n    else:\n        return x+y+z\n\nadd_nums(2,4)\nadd_nums(2,4,6, flag=True)","3d2c1ce5":"add = add_nums\nprint(2,3)","d3b5c5a8":"print(add(2,4))","a61cae31":"type('this is string')","f24c8175":"type(None)","c4df88b9":"type(add)","34e2373d":"# Tuple are immutable data structures\ntuples = (1, 'a', 2, 'b')","160eea49":"type(tuples)","41c569ad":"x = [2,3,'e', 'w', 9]","e67cabae":"type(x)","18556616":"type(1)","8219e578":"type(1.0)","38e3da8d":"x.append(3.4)","f219c3bc":"x","a0dd565d":"for item in x:\n    print(item)","39410548":"i=0\nwhile(i != len(x)):\n    print(i)\n    i = i+1","37ad5e78":"[1,3] + [2,2]","6d7bbb3a":"[1]*4","6b0d9f3e":"2 in x","1559c0ae":"test = 'string manipulation using python'\nprint(test[0])","93363e7b":"test[0:3]","3a2ece2b":"test[-5]","f257378a":"test[-5:4]","4cd8199c":"test[-5:2]","b345aa20":"test[-5:-2]","1b897f48":"firstname = 'jitendra'\nlastname = 'kasaudhan'\nfirstname*3","382fe22d":"firstname[-1]","83153967":"'jk' + 2","a01c8c11":"'jk' + str(2)","78579245":"tpl = (1,3,'e',4,'a')","986ca176":"for item in tpl:\n    print(item)","bc606df6":"dict_eg = {'name': 'jk', 'age': '30'}","9248b032":"dict_eg['name']","9f187e56":"for name, value in dict_eg.items():\n    print(name)\n    print(value)","4e65801c":"for item in dict_eg.values():\n    print(item)","6bada8a6":"# by default, it will loop through keys\nfor item in dict_eg:\n    print(item)","26c11702":"tpl = ('jiten', '30', 'TUM')\nname, age, uni = tpl","22dfdf5e":"name","b39f7eb0":"age","46ba9bf1":"uni","76774c99":"sales_record = {'price': 2.5, 'num_items': 5, 'person': 'JK'}\nstatement = '{} bought {} products , with totoal price {}'\nprint(statement.format(sales_record['person'], sales_record['num_items'], sales_record['price'] * sales_record['num_items']))","7cc46c29":"# Reading CSV\nimport csv\n\nwith open('mpg.csv') as csv_file:\n    data= list(csv.DictReader(csv_file))\n    \n# print first three items\nprint(data[:3])","34dc1aeb":"len(data)","8e142f9a":"data[1]\ndata[0].keys() # print all keys of the dictionary\ndata[0].values() # print all values of the dictionary","2741868c":"# This is how to find the average cty fuel economy across all cars. All values in the dictionaries are strings, so we need to convert to float.\nsum(float(d['cty']) for d in data) \/ len(data)","5019b6aa":"#Use set to return the unique values for the number of cylinders the cars in our dataset have.\ncylinders = set(d['cyl'] for d in data)\ncylinders","f7cf0cd5":"# datetime library\nimport datetime as dt\nimport time as tm\n\n#time returns the current time in seconds since the Epoch. (January 1st, 1970)\ntm.time()","31149b8f":"dtnow = dt.datetime.fromtimestamp(tm.time())\ndtnow","507e68f6":"dtnow.year, dtnow.month, dtnow.hour, dtnow.minute, dtnow.second","e7e322d6":"#timedelta is a duration expressing the difference between two dates.\ndelta = dt.timedelta(days=100)\ndelta","971cc28a":"diff = dt.date.today() - delta # 100 days ago\ndt.date.today() > diff","6fdb5d45":"#lamda functions are anonymous function i.e function without name for evaluating simple and short expressions\nadd_all = lambda a,b,c,d: a+b+c+d\nadd_all(2,2,2,2)\ntype(add_all)","b0a296fb":"# iterate from 0 to 100 and return even numbers\neven_nums = []\nfor num in range(0, 100):\n    if num % 2 == 0:\n        even_nums.append(num)\n        \nprint(even_nums)","c0d9472f":"# same as above but with list comprehension\neven_nums = [num for num in range(0, 100) if num % 2 == 0 ]\neven_nums","74984baa":"# list comprehension - find all possible combinations with two letter and two digits patter eg aa11\nlowercase = 'abcdefghijklmnopqrstuvwxyz'\ndigits = '0123456789'\n\nans = [a+b+c+d for a in lowercase for b in lowercase for c in digits for d in digits]\nans[:10] # display first 10 items","bf8280ce":"len(ans)","c83432b5":"import numpy as np\nx = np.array([[1,2,3], [3,4,5]])\nprint(x)","e7a11c99":"y = np.array([[4,5,6], [7,8,9]])\nprint(x*y)","af80a2ad":"print(x+y)","5d36851a":"# get dimension of the matrix\nx.shape","e07ecd1d":"ev = np.arange(0, 30, 2) # start at 0 count up by 2, stop before 30\nev","cd45c02f":"ev.reshape(3,5)","594ef7b2":"o = np.linspace(0,4,9)# return 9 evenly spaced values from 0 to 4\no","d2c238ec":"o.resize(3,3)\no","53931f43":"np.ones((3,2)) #ones returns a new array of given shape and type, filled with ones.","70b27f92":"np.zeros((3,2)) #ones returns a new array of given shape and type, filled with zeros.","57ccb7cc":"np.eye(3) #eye returns a 2-D array with ones on the diagonal and zeros elsewhere","ef7e0a40":"np.diag(x) #diag extracts a diagonal or constructs a diagonal array","6c52ef3d":"np.array([1,2,3] * 3) #Create an array using repeating list (or see np.tile)","3830ff9a":"np.repeat([1,2,3], 3) #Repeat each element of an array using repeat.","2309f4f9":"p = np.ones((2,3), int) # by default it creates floating ones but with int parameter, it created integer\np","9468eb4f":"np.vstack([p, p*2]) #Use vstack to stack arrays in sequence vertically (row wise).","c7d2b68f":"np.hstack([p, p*2]) #Use hstack to stack arrays in sequence horizontally (column wise).","4d74a5e0":"print(x**2) # elementwise power  [1 2 3] ^2 =  [1 4 9]","a92340c5":"x = np.array([1,2,3])\ny = np.array([[4],[5],[6]])\nx.dot(y)","142dd448":"# Use .T to get the transpose.\nx.T","006ccaae":"x.T.shape","cc3c7e2d":"# Use .dtype to see the data type of the elements in the array.\nx.dtype","cd196011":"# Use .astype to cast to a specific type\nx.astype('f')\nx.dtype","da27def3":"a = np.array([1,2,3,4,5,6])\na.sum()","428a47c1":"a.max()","2468f154":"a.min()","96232a19":"a.mean()","2e87573d":"a.std()","258130b8":"a.argmax() # argmax and argmin return the index of the maximum and minimum values in the array.","d4e92415":"a.argmin() ","9800a687":"# Indexing \/ Slicing","d73449b5":"s = np.arange(12)\ns","456006b5":"s**2","26c90bbf":"#Quiz playground\n['a', 'b', 'c'] + [1,2,3]","aee44823":"m1 = np.arange(36)\nm1","2308a365":"m1.reshape(6,6)\nm1","a9f64392":"m1.reshape(36)[::7]","7b4c0b71":"m1[::5] # get multiples of 5","06ac5cda":"m2 = np.arange(36)\nchangedShape = m2.reshape(6,6) # reshape does not change the original data structure but resize changes the data object\nchangedShape","763c5e33":"changedShape[2] # returns 3rd row or 2nd index item","ee16d8a1":"changedShape[1:] # returns all rows from index 1 and all columns","c7156087":"changedShape[[2,3,5]] # returns 2, 3 and 5 indexed row","83a68b22":"changedShape[[2,3],[2,3]]","1e2de34b":"Math Functions","deffce20":"# Combining Arrays\n                ","3797e8a4":"Dot Product:\n\n[x1 x2 x3]\u22c5\ue008\ue006\ue007\ue007y1y2y3\ue00b\ue009\ue00a\ue00a=x1y1+x2y2+x3y3[x1 x2 x3]\u22c5[y1y2y3]=x1y1+x2y2+x3y3"}}