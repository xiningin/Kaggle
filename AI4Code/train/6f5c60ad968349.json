{"cell_type":{"6332fa50":"code","d721f672":"code","4e2e6095":"code","25bac0f0":"code","98b22525":"code","2a380698":"code","1f468787":"code","a9859a6e":"code","9b89e387":"code","432ca247":"code","211a3d34":"code","6874882c":"code","41bf2dda":"code","91670430":"code","5557118d":"code","5dcd4818":"code","6cba0d0b":"code","70f94954":"code","4ba5c9c9":"code","a77ce9c9":"code","4395c172":"code","22d5fb43":"code","712c0557":"code","b5560187":"code","56edd8f6":"code","faec0baa":"code","198bad5c":"markdown","d70581bb":"markdown","abf22cb3":"markdown","ada7bc11":"markdown","644889d2":"markdown","a975216a":"markdown","38ddaf65":"markdown","87e08033":"markdown","18a11a61":"markdown","06e2027c":"markdown","f1494fc2":"markdown"},"source":{"6332fa50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nfrom keras.preprocessing.image import load_img,img_to_array\nfrom keras import models, Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.xception import Xception\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import preprocess_input\nimport matplotlib.pyplot as plt\nimport PIL.Image as Image\nfrom scipy import spatial\nfrom sklearn.cluster import KMeans","d721f672":"base_path = \"\/kaggle\/input\/avantari-technologies-task\/dataset\/train\/\"","4e2e6095":"def load_images_from_folder(folder):\n    images = []\n    for filename in os.listdir(folder):\n        img = load_img(os.path.join(folder,filename),  target_size =(224, 224)) \n        img = img_to_array(img)\n        img = img.reshape((1,) + img.shape)\n        if img is not None:\n            images.append(img)\n    return images","25bac0f0":"file_names = os.listdir(\"\/kaggle\/input\/avantari-technologies-task\/dataset\/train\/\")\nfile_names.sort()\nprint('The number of  images: ', len(file_names))","98b22525":"def get_all_images():\n    images1 = load_images_from_folder(base_path)\n    all_imgs_arr = np.array(images1)\n    return all_imgs_arr","2a380698":"all_imgs_arr = get_all_images()\npreds_all = np.zeros((len(all_imgs_arr),4096))","1f468787":"vgg = VGG16(include_top=True)\nmodel2 = Model(vgg.input, vgg.layers[-2].output)\n# model2.save('vgg_4096.h5') # saving the model just in case","a9859a6e":"all_imgs_arr.shape","9b89e387":"file = \"op.csv\"\noutput = open(file, \"w\")\nfor j in range(all_imgs_arr.shape[0]):\n    featues = model2.predict(all_imgs_arr[j])\n    features = [str(f) for f in featues[0]]\n    output.write(\"%s,%s\\n\" % (file_names[j], \",\".join(features)))","432ca247":"op = pd.read_csv(\"op.csv\")\nop.head()","211a3d34":"def img2array(im):\n    if im.mode != 'RGB':\n        im = im.convert(mode='RGB')\n    return np.fromstring(im.tobytes(), dtype='uint8').reshape((im.size[1], im.size[0], 3))\n","6874882c":"query_image = \"\/kaggle\/input\/avantari-technologies-task\/dataset\/train\/795.jpg\"","41bf2dda":"qu_image = Image.open(query_image)\nquery_img_arr = img2array(qu_image)\nplt.figure()\nplt.imshow(query_img_arr)","91670430":"img_names = query_image.split(\"\/\")\nimg_name = img_names[-1]","5557118d":"def load_images_from_file(file_path):\n    images = []\n    img = image.load_img(file_path,  target_size=(224, 224))\n    img = image.img_to_array(img)\n    img = img.reshape((1,) + img.shape)\n    if img is not None:\n            images.append(img)\n    return images","5dcd4818":"new_img_features = load_images_from_file(query_image)","6cba0d0b":"new_img_pred = model2.predict(new_img_features)","70f94954":"def calculate_similarity(vector1, vector2):\n return (1 - spatial.distance.cosine(vector1, vector2))","4ba5c9c9":"op.head()","a77ce9c9":"values = op[\"0.jpg\"]\nop = op.drop([\"0.jpg\"],axis=1)","4395c172":"similar_index = {}\nfor fea in range(0,len(op)):\n   sim_val = calculate_similarity(op.iloc[fea],new_img_pred)\n   similar_index.update({values[fea]:sim_val})\n","22d5fb43":"sorted_similarity = {}\nfor key, value in sorted(similar_index.items(), key=lambda kv: kv[1], reverse=True):\n    sorted_similarity.update({key:value})","712c0557":"out = dict(list(sorted_similarity.items())[0: 10])\nsimilar_images = list(out.keys())","b5560187":"all_img_path = []\nfor img in similar_images:\n    new_path = base_path+img\n    all_img_path.append(new_path)\nprint(all_img_path)","56edd8f6":"images = [Image.open(f) for f in all_img_path ]\nnp_images = [ img2array(im) for im in images ]","faec0baa":"for img in np_images:\n    plt.figure()\n    plt.imshow(img)","198bad5c":"# Model to extract features using VGG16 Net form all images ","d70581bb":"function to load image from a folder","abf22cb3":"## Construct Path for the images to load ","ada7bc11":"## Function to read all the image from a folder","644889d2":"# Extracting the features from the model","a975216a":"# Similarity function between two features ","38ddaf65":"# Necessary Imports","87e08033":"# Query Image","18a11a61":"## Method to store all the extracted features and saved it as a dataframe\n* with file name as index and features a columns","06e2027c":"# Displaying the 10 similar images","f1494fc2":"# Viewing the Stored Features"}}