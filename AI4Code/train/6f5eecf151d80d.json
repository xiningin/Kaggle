{"cell_type":{"12ef3ed0":"code","0ecbf572":"code","7a366630":"code","9a5e0f54":"code","4c09c58a":"code","aa0d1f31":"code","d8a2f44e":"code","f5c3fec0":"code","b703f18b":"code","6ab2746b":"code","be04c8a2":"code","129e4f6e":"code","1309bdf6":"code","ad317ec1":"code","74e0a130":"code","57640b73":"code","355a70a1":"code","45b57084":"code","794a6ee5":"code","4eaa3d87":"code","ff05d9b9":"code","9c07399a":"code","0a38b186":"code","a7da6295":"code","3e4a9cce":"code","c1b92174":"code","60714ccc":"code","73c467f1":"code","946abb64":"code","541b4902":"code","a5cb6251":"markdown","93620696":"markdown","223f1535":"markdown","d278acb2":"markdown","29dcb68c":"markdown","f02d2f2d":"markdown","f806c01c":"markdown","e34d58ed":"markdown","e85c6264":"markdown","b01121b6":"markdown","0a38a202":"markdown","eb9c698b":"markdown","b3331947":"markdown","00f32074":"markdown","707161ef":"markdown","47e10e5d":"markdown","1c197759":"markdown","46589040":"markdown"},"source":{"12ef3ed0":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # data visualisation\nimport seaborn as sns  # data visualisation\n%matplotlib inline","0ecbf572":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7a366630":"#importing combined data: \n# cbb.csv\n\nCBB = pd.read_csv(\"..\/input\/college-basketball-dataset\/cbb.csv\")","9a5e0f54":"CBB.head()","4c09c58a":"CBB.info()","aa0d1f31":"CBB.shape","d8a2f44e":"#Checking missing value \n\ndef missing_check(CBB):\n    total = CBB.isnull().sum().sort_values(ascending=False)   # total number of null values\n    percent = (CBB.isnull().sum()\/CBB.isnull().count()).sort_values(ascending=False)  # percentage of values that are null\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])  # putting the above two together\n    return missing_data # return the dataframe\nmissing_check(CBB)","f5c3fec0":"CBB[\"YEAR\"] = pd.Categorical(CBB[\"YEAR\"])","b703f18b":"CBB.describe()","6ab2746b":"#checking for skewness in a data\nCBB.skew()","be04c8a2":"CBB.columns","129e4f6e":"#cheking for outliers in a data through boxplot\nplt.figure(figsize= (25,10))\nplt.subplot(19,1,1)\nsns.boxplot(x=CBB.G , color='blue')\n\nplt.subplot(19,1,2)\nsns.boxplot(x= CBB.W, color='red')\n\nplt.subplot(19,1,3)\nsns.boxplot(x= CBB.ADJOE, color='green')\n\nplt.subplot(19,1,4)\nsns.boxplot(x=CBB.EFG_O , color='blue')\n\nplt.subplot(19,1,5)\nsns.boxplot(x= CBB.ADJDE, color='red')\n\nplt.subplot(19,1,6)\nsns.boxplot(x= CBB.BARTHAG, color='green')\n\nplt.subplot(19,1,7)\nsns.boxplot(x=CBB.EFG_D , color='blue')\n\nplt.subplot(19,1,8)\nsns.boxplot(x= CBB.TOR, color='red')\n\nplt.subplot(19,1,9)\nsns.boxplot(x= CBB.TORD, color='green')\n\nplt.subplot(19,1,10)\nsns.boxplot(x= CBB.ORB, color='red')\n\nplt.subplot(19,1,11)\nsns.boxplot(x= CBB.DRB, color='green')\n\nplt.subplot(19,1,12)\nsns.boxplot(x=CBB.FTR , color='blue')\n\nplt.subplot(19,1,13)\nsns.boxplot(x= CBB.FTRD, color='red')\n\nplt.subplot(19,1,14)\nsns.boxplot(x= CBB['2P_O'], color='green')\n\nplt.subplot(19,1,15)\nsns.boxplot(x=CBB['2P_D'], color='blue')\n\nplt.subplot(19,1,16)\nsns.boxplot(x= CBB['3P_O'], color='red')\n\nplt.subplot(19,1,17)\nsns.boxplot(x= CBB['3P_D'], color='green')\n\nplt.subplot(19,1,18)\nsns.boxplot(x=CBB.ADJ_T , color='blue')\n\nplt.subplot(19,1,19)\nsns.boxplot(x= CBB.WAB, color='red')\n\nplt.show()","1309bdf6":"CBB_Outlier_Treatment = CBB.drop(columns = [\"TEAM\", \"CONF\", \"POSTSEASON\",\"SEED\",\"YEAR\"])\nCBB_Outlier_Treatment","ad317ec1":"from scipy import stats\nz = np.abs(stats.zscore(CBB_Outlier_Treatment))   # get the z-score of every value with respect to their columns\nprint(z)","74e0a130":"threshold = 3 # In a Normal distribution standard deviation is within or equal to 3 times\nprint (\"Rows and columns location showing outlier value:\")\nnp.where(z > threshold)","57640b73":"print(z[0][0]) # for example","355a70a1":"CBB_copy = CBB_Outlier_Treatment.copy()   #make a deep copy of the dataframe\n\n#Replace all the outliers with median values. This will create new some outliers but, we will ignore them\n\nfor i, j in zip(np.where(z > threshold)[0], np.where(z > threshold)[1]):# iterate using 2 variables.i for rows and j for columns\n    CBB_copy.iloc[i,j] = CBB_Outlier_Treatment.iloc[:,j].median()  # replace i,jth element with the median of j i.e, corresponding column","45b57084":"z = np.abs(stats.zscore(CBB_copy))\nnp.where(z > threshold)  # New outliers detected after imputing the original outliers\n","794a6ee5":"sns.distplot(CBB_Outlier_Treatment.G);","4eaa3d87":"sns.distplot(CBB_Outlier_Treatment.W);","ff05d9b9":"sns.distplot(CBB_Outlier_Treatment.ADJOE);","9c07399a":"sns.pairplot(CBB_Outlier_Treatment, kind= \"reg\"); ","0a38b186":"CBB_Outlier_Treatment.corr() # Method = Pearson","a7da6295":"plt.figure(figsize= (30,20))\nsns.heatmap(CBB_Outlier_Treatment.corr(), annot = True);","3e4a9cce":"pd.crosstab([CBB.TEAM,CBB.CONF,CBB.YEAR], CBB['W']).head(10)","c1b92174":"pd.crosstab([CBB.TEAM,CBB.CONF,CBB.YEAR], CBB['W']).tail(10)\n","60714ccc":"CBB_dummies= pd.get_dummies(CBB, prefix='year', columns=['YEAR']) #This function does One-Hot-Encoding on categorical text","73c467f1":"CBB_dummies.head()","946abb64":"CBB_dummies.corr() # now we can analyze the relationship between variable year wise","541b4902":"plt.figure(figsize= (30,20))\nsns.heatmap(CBB_dummies.corr(), annot = True);","a5cb6251":"Although one major disadvantage of One hot encoding or dummies variable is that it will leads to form extra columns","93620696":"An another way of doing it through Label Encoding that has to be imported from sklearn library","223f1535":"Happy Learning","d278acb2":"A visualisation relationship between variables through heatmap","29dcb68c":"* We can visualize each variable like this.\n* plots a frequency polygon superimposed on a histogram using the seaborn package.\n* seaborn automatically creates class intervals. The number of bins can also be manually set.","f02d2f2d":"# Explorartory Data Analysis\n\nChecking the type of data types ","f806c01c":"# Plotting pivot table for categorical columns","e34d58ed":"Looking the code and the output above, it is difficult to say which data point is an outlier. Let\u2019s try and define a threshold to identify an outlier.","e85c6264":"* As we can infer through above boxplots that outliers are present in all the variable.\n* Henceforth, outliers treatment have to be done.","b01121b6":"* Handling non-numeric(Categorical) data through One Hot Encoding\n* One-Hot-Encoding is used to create dummry variables to replace the categories in a categorical variable into features of each category and represent it using 1 or 0 based on the presence or absence of the categorical value in the record","0a38a202":"### For bivariate and univariate visualisation (diagnols will be showing univariate visualisation).","eb9c698b":"There are :\n* POSTSEASON with 1417 null values accounting 80.6488% as it is column for round where the given team was eliminated or where their season ended\n* SEED with 1417 null values accounting 80.6488% as it is column for Seed in the NCAA March Madness Tournament","b3331947":"# Variable Insights\n\n## Description of the columns TEAM: The Division I college basketball school\n\nCONF: The Athletic Conference in which the school participates in\n\nG: Number of games played\n\nW: Number of games won\n\nADJOE: Adjusted Offensive Efficiency (An estimate of the offensive efficiency (points scored per 100 possessions) a team would have against the average Division I defense)\n\nADJDE: Adjusted Defensive Efficiency (An estimate of the defensive efficiency (points allowed per 100 possessions) a team would have against the average Division I offense)\n\nBARTHAG: Power Rating (Chance of beating an average Division I team)\n\nEFG_O: Effective Field Goal Percentage Shot\n\nEFG_D: Effective Field Goal Percentage Allowed\n\nTOR: Turnover Percentage Allowed (Turnover Rate)\n\nTORD: Turnover Percentage Committed (Steal Rate)\n\nORB: Offensive Rebound Percentage\n\nDRB: Defensive Rebound Percentage\n\nFTR : Free Throw Rate (How often the given team shoots Free Throws)\n\nFTRD: Free Throw Rate Allowed\n\n2P_O: Two-Point Shooting Percentage\n\n2P_D: Two-Point Shooting Percentage Allowed\n\n3P_O: Three-Point Shooting Percentage\n\n3P_D: Three-Point Shooting Percentage Allowed\n\nADJ_T: Adjusted Tempo (An estimate of the tempo (possessions per 40 minutes) a team would have against the team that wants to play at an average Division I tempo)\n\nWAB: Wins Above Bubble (The bubble refers to the cut off between making the NCAA March Madness Tournament and not making it)\n\nPOSTSEASON: Round where the given team was eliminated or where their season ended\n\nSEED: Seed in the NCAA March Madness Tournament\n\nYEAR: Season","00f32074":"# An Univariate Visualisation","707161ef":"Analysing Correlation between two variables\n\nThe bivariate correlation, is a statistic that measures linear correlation between two variables X and Y. It has a value between +1 and \u22121.\n\n* A closer the value towards 1 strong is a relationship and vice versa.\n* A negative value stands for negative relationship.\n* A positive value stands for positive relationship.\n* A zero value means no relationship.","47e10e5d":"To get an insights year wise we have to convert Year wise data type into categorical ones","1c197759":"The objectives are:\n* Data Processing\n* Exploratory Data Analysis\n* Outlier Treatment\n* Visualisation\n* Categorical Data Transformation\n","46589040":"We can infer that there are 3 categorical data types and rest are numerical."}}