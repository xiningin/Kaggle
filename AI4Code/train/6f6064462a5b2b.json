{"cell_type":{"035a1fb3":"code","aff0798d":"code","9c4e3e5c":"code","1516552a":"code","0ef1cb6e":"code","89788565":"code","46ab2fe1":"code","fab18460":"code","c554c5f1":"code","fdb2e53c":"code","1c5988d5":"code","62732a5a":"code","8f114d6d":"code","f1ed9446":"markdown","82a3cd8c":"markdown","4a4ac850":"markdown","7f852c95":"markdown","9eb90148":"markdown","9b09fb91":"markdown","12b5987e":"markdown","b6d262ab":"markdown","fa65f6be":"markdown","08ae463c":"markdown","ea7e72ae":"markdown","5f830a63":"markdown","5cffe302":"markdown"},"source":{"035a1fb3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom  bq_helper import BigQueryHelper as bqh\nbqa = bqh('bigquery-public-data','google_analytics_sample')","aff0798d":"QUERY = \"\"\"\n    SELECT\n        date as Date,\n        SUM(totals.transactionRevenue)\/1e6 as Revenue\n    FROM \n      `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga\n    WHERE _TABLE_SUFFIX BETWEEN '20160801' AND '20170801'\n    GROUP BY Date\n    ORDER BY Date ASC\n\"\"\"\n\ndata = bqa.query_to_pandas(QUERY)\ndata.Revenue=data.Revenue.fillna(0)\ndata.Date = data.Date.apply(lambda x: pd.to_datetime(str(x), format='%Y%m%d'))\n\nprint('Days of data: ',len(data))\nprint('Total Revenue: $',end='')\nprint(\"{:,}\".format(data.Revenue.sum()))\ndata.head(14)","9c4e3e5c":"# Holt Forecasting model using the statsmodels package.\n\nfrom statsmodels.tsa.holtwinters import Holt\nimport matplotlib.ticker as mtick\nplt.rcParams['axes.facecolor'] = 'whitesmoke'\n\nfor t in [300,200,60]:\n    # Model creation and prediction\n    y = data.Revenue[:-t].values\n    model = Holt(y).fit(smoothing_level = 0.3,smoothing_slope = 0.1)\n    y_pred = model.forecast(t)\n\n    # Setting the data columns\n    data['Forecast'] = np.append(np.full(len(y), np.nan),y_pred)\n    data.Forecast = data.Forecast.values.clip(min=0)\n    data['Previous Revenue'] = np.append(y,np.full(len(y_pred), np.nan))\n    data['Previous Revenue'] = data['Previous Revenue'].values.clip(min=0)\n    data['Actual Revenue'] = np.append(np.full(len(y), np.nan),data.Revenue[-t:].values)\n\n    # Plotting the results\n    fig, ax = plt.subplots(1, 1, figsize=(8, 4))\n    data.plot(x='Date',y=['Previous Revenue','Actual Revenue','Forecast'],style=['-','c-','k--'],ax=ax,xlim=([data.Date.iloc[0],data.Date.iloc[-1]]))\n    plt.title('Total Revenue forecast of the last '+str(t)+' days of data')\n    fmt = '${x:,.0f}'\n    tick = mtick.StrMethodFormatter(fmt)\n    ax.yaxis.set_major_formatter(tick)\n    plt.ylabel('Daily Revenue')\n    plt.show()\n","1516552a":"QUERY = \"\"\"\n    SELECT\n        trafficSource.source as Source,\n        SUM(totals.transactionRevenue)\/1e6 as Revenue,\n        AVG(totals.timeOnSite) as Time,\n        AVG(totals.transactionRevenue)\/1e6 as AverageRevenue\n    FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*` \n    WHERE\n        _TABLE_SUFFIX BETWEEN '20160801'AND '20170801' AND totals.transactions > 0\n    GROUP BY Source\n    ORDER BY Revenue DESC\n\"\"\"\n\ndatarevenue = bqa.query_to_pandas(QUERY)\n\nQUERY = \"\"\"\n    SELECT\n        trafficSource.source as Source,\n        AVG(totals.timeOnSite) as Time\n    FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*` \n    WHERE\n        _TABLE_SUFFIX BETWEEN '20160801'AND '20170801' AND totals.transactions IS NULL\n    GROUP BY Source\n    ORDER BY TIME DESC\n\"\"\"\n\ndatanorevenue = bqa.query_to_pandas(QUERY)\n\ndatarevenue.drop(columns=['Time']).head(10)","0ef1cb6e":"datarevenue = datarevenue.sort_values(by='Time')\nplt.figure(figsize=(6,10))\nplt.barh(y = datarevenue.Source.values, width = datarevenue.Time.values)\nplt.ylabel('Traffic Source')\nplt.xlabel('Average time on site (Seconds)')\nplt.title('Time on site for sessions with a transaction')\nplt.show()","89788565":"QUERY = \"\"\"  \n  SELECT \n        fullVisitorId,\n        visitId,\n        trafficSource.source as TrafficSource,\n        device.browser as Browser,\n        device.deviceCategory as Device,\n        geoNetwork.subContinent as Location,\n        hits.page.pagePath,\n        totals.timeOnSite as y\n  FROM \n      `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga,\n      unnest(hits) as hits\n  WHERE _TABLE_SUFFIX BETWEEN '20160801' AND '20161001' and hits.time = 0\n  ORDER BY fullVisitorId,visitStartTime\n  \"\"\"\n\nentry = bqa.query_to_pandas(QUERY)\nentry.y = entry.y.fillna(0)\n\nX=entry.drop(columns=['fullVisitorId','visitId','y']).values\ny = entry.y.values.reshape(-1,1) > 0\n\nfrom sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder(handle_unknown='ignore')\nenc.fit(X)\nX = enc.transform(X).toarray()\n\nfrom sklearn.model_selection import train_test_split\nidx,idy,X_train,X_test,y_train,y_test = train_test_split(list(range(len(entry))),X,y,test_size=0.33)\n\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train,y_train.ravel())\ny_pred = model.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\n\nclasses=['Does not Bounce','Bounce']\ncm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\nfig, ax = plt.subplots()\nim = ax.imshow(cm, interpolation='nearest',cmap=plt.cm.Blues)\nax.figure.colorbar(im, ax=ax)\nax.set(xticks=np.arange(cm.shape[1]),yticks=np.arange(cm.shape[0]),xticklabels=classes, yticklabels=classes,title='Bounce prediction results',ylabel='True label', xlabel='Predicted label')\n\nfmt = '.2f'\nthresh = cm.max() \/ 2.\nfor i in range(cm.shape[0]):\n    for j in range(cm.shape[1]):\n        ax.text(j, i, format(cm[i, j], fmt),ha=\"center\", va=\"center\",color=\"white\" if cm[i, j] > thresh else \"black\")\nfig.tight_layout()\n\nentry['TestSet'] = [1 if i in idy else 0 for i in range(0,len(entry))]\nentry['rfc'] = model.predict(X)*1","46ab2fe1":"QUERY = \"\"\"  \n  SELECT \n        fullVisitorId,\n        visitId,\n        totals.timeOnSite,\n        hits.page.pagePath,\n        visitStartTime as vst\n  FROM \n      `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga,\n      unnest(hits) as hits\n  WHERE _TABLE_SUFFIX BETWEEN '20160801' AND '20161001' AND isExit IS TRUE\n  ORDER BY fullVisitorID, visitStartTime\n  \"\"\"\n\nleave = bqa.query_to_pandas(QUERY)\n\ndata = pd.merge(entry, leave,  how='left', left_on=['fullVisitorId','visitId'], right_on = ['fullVisitorId','visitId']).dropna(subset = ['pagePath_x','pagePath_y'])\ndata.rename(columns={'pagePath_x':'Entry Path','pagePath_y':'Exit Path'}, inplace=True)\ndata[['visitId','TrafficSource','Browser','Device','Location','Entry Path','Exit Path']].head(20)","fab18460":"data = data.groupby('Entry Path')['Exit Path'].apply(lambda x: x.value_counts(normalize=True).head(1)*100)\ndata = data.reset_index().rename(index=str, columns={\"level_1\": \"Most likely exit page\",\"Exit Path\": \"Proportion (%)\"})\ndata.head(20)","c554c5f1":"QUERY =  \"\"\"\n    SELECT\n        fullVisitorId,\n        trafficSource.source as TrafficSource,\n        device.browser as Browser,\n        device.deviceCategory as Device,\n        geoNetwork.country as Country,\n        SUM(totals.transactionRevenue)\/1e6 as Revenue\n    FROM \n      `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga\n    WHERE _TABLE_SUFFIX BETWEEN '20160801' AND '20170801'\n    GROUP BY fullVisitorId,TrafficSource,Browser,Device,Country\n    ORDER BY Revenue DESC\n    LIMIT 10\n\"\"\"\n\ndata = bqa.query_to_pandas(QUERY)\ndata","fdb2e53c":"QUERY =  \"\"\"\n    SELECT\n        trafficSource.source as TrafficSource,\n        device.browser as Browser,\n        device.deviceCategory as Device,\n        geoNetwork.country as Country,\n        SUM(totals.transactionRevenue)\/1e6 as Revenue\n    FROM \n      `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga\n    WHERE _TABLE_SUFFIX BETWEEN '20160801' AND '20170801'\n    GROUP BY TrafficSource,Browser,Device,Country\n    ORDER BY Revenue DESC\n    LIMIT 10\n\"\"\"\n\ndata = bqa.query_to_pandas(QUERY)\ndata","1c5988d5":"QUERY = \"\"\"\n    SELECT\n        fullVisitorId,\n        MAX(totals.transactionRevenue)\/1e6 as Revenue\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga\n        WHERE _TABLE_SUFFIX BETWEEN '20160801' AND '20170201' AND totals.transactionRevenue > 0\n    GROUP BY fullVisitorId,visitId\n\"\"\"\n\ndata = bqa.query_to_pandas(QUERY)\ndata[data.duplicated(subset=['fullVisitorId'])].groupby('fullVisitorId').sum().reset_index()\n\nQUERY = \"\"\"\n    SELECT DISTINCT\n        fullVisitorId\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga\n        WHERE _TABLE_SUFFIX BETWEEN '20170202' AND '20170801' AND totals.transactionRevenue > 0\n    GROUP BY fullVisitorId,visitId\n\"\"\"\n\nchurn = bqa.query_to_pandas(QUERY)\ndata['Churn']=[0 if x in churn.fullVisitorId.values else 1 for x in data.fullVisitorId.values]\n\nQUERY = \"\"\"\n    SELECT DISTINCT\n        fullVisitorId\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*` AS ga\n        WHERE _TABLE_SUFFIX BETWEEN '20170202' AND '20170801'\n\"\"\"\n\nsiteview = bqa.query_to_pandas(QUERY)\ndata['Return']=[1 if x in siteview.fullVisitorId.values else 0 for x in data.fullVisitorId.values]","62732a5a":"data.groupby('Churn').Revenue.mean()","8f114d6d":"print('Proportion who visited the site in the last 6 months of data: '+str(round(100*data.Return.mean(),1))+'%')\nprint('Proportion who purchased in the last 6 months of data: '+str(round(100*(1-data.Churn.mean()),1))+'%')","f1ed9446":"__Top 10 Sources by Revenue__","82a3cd8c":"__Google Analytics Sample Data__\n\nGoogle Merchandise store dataset during the period August 2016 - August 2017.","4a4ac850":"__Individual User Path__","7f852c95":"__Revenue Summary__","9eb90148":"__Top 10 Visitors by Revenue__","9b09fb91":"__Churn Analysis__\n\nWhat do Customers who have made transactoins at more than one time in the first 6 months of the data do in the remaining six months?","12b5987e":"__Key breakdown for high Revenue__","b6d262ab":"__Time on Site comparison__","fa65f6be":"__Mean Initial Revenue by Churn__","08ae463c":"__Most Likely Exit page by Entry page__","ea7e72ae":"__Bounce Detection of individual users__\n\nRandom Forest Classification ML model to detect if an user will bounce on their initial page. Trained and Tested using two months of data including individual user information.\n","5f830a63":"__Revenue Prediction__","5cffe302":"Loading modules and data using BigQueryHelper."}}