{"cell_type":{"c3da3716":"code","a7fbc174":"code","7a0c9bab":"code","12987bbd":"code","936a82af":"code","7cd31280":"code","d948a36e":"code","dd14f23c":"code","2ba23822":"code","821f6c5e":"code","d8179f5a":"code","40ef6ada":"code","33d05650":"code","dd4e170c":"code","259301ba":"code","ecc13feb":"code","f0096540":"code","02e9f7e9":"code","888233cf":"code","8be8348f":"code","31264da7":"code","965a1127":"code","f126ca1b":"code","82ac25f1":"code","5111cde5":"code","f529da70":"code","dabffeb9":"code","90f35953":"code","cdde5e9e":"code","4840ee8e":"markdown","3cb7f3be":"markdown","2578f0f3":"markdown","a31898ea":"markdown","e4a8d88f":"markdown","f658ca28":"markdown","1abc34c4":"markdown","4ae5b148":"markdown","69de2492":"markdown","36c8d73c":"markdown","9563e968":"markdown","4bcc0cec":"markdown","07d07937":"markdown","64f32ebf":"markdown","fce8eb27":"markdown","3c1497e8":"markdown","2f387247":"markdown","7679535e":"markdown","90dbeeca":"markdown","176303c8":"markdown","eb3cc7d0":"markdown","63152566":"markdown"},"source":{"c3da3716":"import pandas as pd","a7fbc174":"#sneak peek of data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","7a0c9bab":"import plotly.graph_objects as go","12987bbd":"fig = go.Figure(data=[go.Table(header=dict(values=train.columns),\n                 cells=dict(values=[train[i] for i in train.columns]))\n                     ])\nfig.show()","936a82af":"import plotly.express as px","7cd31280":"fig = px.scatter(train, x='Fare', y='Age', color='Survived', size='Fare')\nfig.show()","d948a36e":"fig = px.pie(train, names='Survived', title='Passenger Survival')\nfig.show()","dd14f23c":"fig = px.pie(train, names='Survived', title='Passenger Survival', hole=0.4)\nfig.show()","2ba23822":"fig = go.Figure(data=[go.Pie(labels=train['Embarked'], pull=[.1, .15, .15, 0])])\nfig.show()","821f6c5e":"from plotly.subplots import make_subplots","d8179f5a":"fig = make_subplots(rows=1, cols=3, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\n\n\nfig.add_trace(\n            go.Pie(labels=train.loc[train['Embarked'] == 'C']['Survived'], pull = [.1, .1],\n                   title = 'Embarked C vs. Survived'), row=1, col=1)\n\nfig.add_trace(\n            go.Pie(labels=train.loc[train['Embarked'] == 'S']['Survived'], pull = [.07, .07],\n                   title = 'Embarked S vs. Survived'),row=1, col=2)\n\nfig.add_trace(\n            go.Pie(labels=train.loc[train['Embarked'] == 'Q']['Survived'], pull = [.1, .1],\n                   title = 'Embarked Q vs. Survived'), row=1, col=3)\n\n\nfig.update_layout(height=500, width=800, title_text=\"Gene Expression Features\")\nfig.show()","40ef6ada":"fig = px.histogram(train, x='Age', nbins=30, marginal='box')\nfig.show()","33d05650":"fig = px.histogram(train, x='Age', nbins=50, histnorm='probability density')\nfig.show()","dd4e170c":"fig = px.box(train, x='Pclass', y=\"Age\")\nfig.show()","259301ba":"fig = px.box(train, x='Pclass', y=\"Age\", points=\"all\")\nfig.show()","ecc13feb":"fig = px.box(train, x='Pclass', y=\"Age\", notched=True, color=\"Survived\")\nfig.show()","f0096540":"fig = px.violin(train, y=\"Age\", points=\"all\")\nfig.show()","02e9f7e9":"fig = px.violin(train, x='Sex', y=\"Age\", color='Survived', points=\"all\")\nfig.show()","888233cf":"fig = px.violin(train, x='Pclass', y=\"Age\", color='Survived', box=True)\nfig.show()","8be8348f":"fig = px.violin(train, x='Pclass', y=\"Age\", color='Survived', violinmode='overlay')\nfig.show()","31264da7":"fig = px.strip(train, x='Pclass', y=\"Age\", color='Survived')\nfig.show()","965a1127":"fig = px.strip(train, x='Sex', y=\"Age\", color='Survived', stripmode=\"overlay\")\nfig.show()","f126ca1b":"fig = px.density_heatmap(train, x=\"Embarked\", y=\"Pclass\",\n                        height=500, width=500)\nfig.show()","82ac25f1":"fig = px.imshow(train.corr(method='pearson'), \n                title='Correlations Among Training Features',\n                height=700, width=700)\nfig.show()","5111cde5":"fig = px.density_contour(train, x=\"SibSp\", y=\"Parch\",\n                         height=400, width=800)\nfig.show()","f529da70":"fig = px.density_contour(train, x=\"SibSp\", y=\"Parch\", color='Survived',\n                         height=400, width=800)\nfig.show()","dabffeb9":"fig = px.density_contour(train, x=\"SibSp\", y=\"Parch\", color='Survived',\n                        height=400, width=800)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels = True)\nfig.show()","90f35953":"fig = px.scatter_3d(train, x='Pclass', y='Fare', z='Age',\n              color='Survived')\nfig.show()","cdde5e9e":"fig = px.scatter_3d(train, x='Pclass', y='Fare', z='Age',\n                    color='Survived', symbol='Sex')\nfig.show()","4840ee8e":"**And now we see that most passengers (~72 percent) embarked from `S` which stands for Southampton. Let's see how `Embarked` and `Survived` are related with some more pie plots. We can make subplots using `plotly.subplots` like so:**","3cb7f3be":"### 2. Scatter Plot\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.scatter.html)):**\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **symbol** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign symbols to marks.\n* **size** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign mark sizes.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.)\n* **opacity** (float) \u2013 Value between 0 and 1. Sets the opacity for markers.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.\n\n**The `px.scatter` object takes two array-like inputs for x and y. You can then color code your scatterplot points by passing an argument to the `color` parameter (also array-like) and you can change the size of the points by passing an argument to the `size` parameter (again, array-like). So if we wanted to plot the ticket fare of a passenger against their age, with the points color coded by the passenger class of the ticket and increasing in size as the ticket fare increases, we simply do this:**","2578f0f3":"**We see that the most frequent pairing between `Embarked` and `Pclass` is `S, 3`, meaning that most passengers that embarked from Southampton were in third class**\n\n**You can also easily get a correlation heatmap by calling `px.imshow` on `df.corr()` like so:**","a31898ea":"**For a more stylish pie plot, we can use `plotly.graph_objects` like so:**","e4a8d88f":"# Basics\n\n### 1. Tables\n\n**We can start by converting this vanilla DataFrame to a Plotly table. We can do this using `plotly.graph_objects`. To read more about Plotly graph objects, see [here](https:\/\/plotly.com\/python\/graph-objects\/)**","f658ca28":"# 3. Pie Plot\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.pie.html)):**\n\n* **names** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used as labels for sectors.\n* **values** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to set values associated to sectors.\n* **hole** (float) \u2013 Sets the fraction of the radius to cut out of the pie.Use this to make a donut chart.\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **opacity** (float) \u2013 Value between 0 and 1. Sets the opacity for markers.\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","1abc34c4":"**You can also normalize the y-axis in different ways. If you want a probability density histogram where all bar areas sum to 1, you can pass 'probability density' to the `histnorm` parameter:**","4ae5b148":"# 2-D Distributions\n\n### 1. Heatmap\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.density_heatmap.html)):**\n\n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.)\n* **opacity** (float) \u2013 Value between 0 and 1. Sets the opacity for markers.\n* **histfunc** (str (default 'count' if no arguments are provided, else 'sum')) \u2013 One of 'count', 'sum', 'avg', 'min', or 'max'.Function used to aggregate values for summarization (note: can be normalized with histnorm). The arguments to this function are the values of z.\n* **histnorm** (str (default None)) \u2013 One of 'percent', 'probability', 'density', or 'probability density' If None, the output of histfunc is used as is. If 'probability', the output of histfunc for a given bin is divided by the sum of the output of histfunc for all bins. If 'percent', the output of histfunc for a given bin is divided by the sum of the output of histfunc for all bins and multiplied by 100. If 'density', the output of histfunc for a given bin is divided by the size of the bin. If 'probability density', the output of histfunc for a given bin is normalized such that it corresponds to the probability that a random event whose distribution is described by the output of histfunc will fall into that bin.\n* **marginal_x** and **marginal_y** (str) \u2013 One of 'rug', 'box', 'violin', or 'histogram'. If set, a horizontal subplot is drawn above the main plot, visualizing the x-distribution\/y-distribution.\n* **nbinsx** and **nbinsy** (int) \u2013 Positive integer. Sets the number of bins along the x-axis\/y-axis.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","69de2492":"**So now that we have some data to plot, let's begin to explore Plotly and all its bells and whistles:**","36c8d73c":"**Density contours can be continuously-colored and labeled by calling `.update_traces` on the Plotly Express `fig`:**","9563e968":"### 2. Box Plot\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.box.html)):**\n\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **boxmode** (str (default 'group')) \u2013 One of 'group' or 'overlay'. In 'overlay' mode, boxes are on drawn top of one another. In 'group' mode, baxes are placed beside each other.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.)\n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed\n* **notched** (boolean (default False)) \u2013 If True, boxes are drawn with notches.\n* **points** (str or boolean (default 'outliers')) \u2013 One of 'outliers', 'suspectedoutliers', 'all', or False. If 'outliers', only the sample points lying outside the whiskers are shown. If 'suspectedoutliers', all outlier points are shown and those less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted with the marker\u2019s 'outliercolor'. If 'outliers', only the sample points lying outside the whiskers are shown. If 'all', all sample points are shown. If False, no sample points are shown and the whiskers extend to the full range of the sample.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.\n","4bcc0cec":"# Plotly Overview\n\n**I am a bit bored of `matplotlib.pyplot` and `seaborn`, so it's time to explore something new: `plotly`. Plotly's Python graphing library creates interactive, publication-ready graphs. Within Plotly, there is Plotly Express, which is a high level API designed to be as consistent and easy to learn as possible. In fact, after importing `plotly_express`, you can generate graphs in just one line of code, as you will soon see. Let's begin by getting some data to visualize; specifically, we will use the training data from the [Titanic getting started competition](https:\/\/www.kaggle.com\/c\/titanic).** ","07d07937":"# 1-D Distributions\n\n### 1. Histogram\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.histogram.html)):**\n\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas \n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed\n* **marginal** (str) \u2013 One of 'rug', 'box', 'violin', or 'histogram'. If set, a subplot is drawn alongside the main plot, visualizing the distribution.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.)\n* **opacity** (float) \u2013 Value between 0 and 1. Sets the opacity for markers.\n* **barmode** (str (default 'relative')) \u2013 One of 'group', 'overlay' or 'relative'. In 'relative' mode, bars are stacked above zero for positive values and below zero for negative values. In 'overlay' mode, bars are drawn on top of one another. In 'group' mode, bars are placed beside each other.\n* **histnorm** (str (default None)) \u2013 One of 'percent', 'probability', 'density', or 'probability density' If None, the output of histfunc is used as is. If 'probability', the output of histfunc for a given bin is divided by the sum of the output of histfunc for all bins. If 'percent', the output of histfunc for a given bin is divided by the sum of the output of histfunc for all bins and multiplied by 100. If 'density', the output of histfunc for a given bin is divided by the size of the bin. If 'probability density', the output of histfunc for a given bin is normalized such that it corresponds to the probability that a random event whose distribution is described by the output of histfunc will fall into that bin.\n* **cumulative** (boolean (default False)) \u2013 If True, histogram values are cumulative.\n* **nbins** (int) \u2013 Positive integer. Sets the number of bins.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","64f32ebf":"# 3-D Dimensional \n\n### 1. 3-D Scatter Plot\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.scatter_3d.html)):**\n\n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed.\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **symbol** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign symbols to marks.\n* **size** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign mark sizes.\n* **size_max** (int (default 20)) \u2013 Set the maximum mark size when using size.\n* **log_x**, **log_y**, and **log_z** (boolean (default False)) - if True, the x-axis\/y-axis\/z-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","fce8eb27":"### 2. Contour\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.density_contour.html)):**\n\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.)\n* **histfunc** (str (default 'count' if no arguments are provided, else 'sum')) \u2013 One of 'count', 'sum', 'avg', 'min', or 'max'.Function used to aggregate values for summarization (note: can be normalized with histnorm). The arguments to this function are the values of z.\n* **histnorm** (str (default None)) \u2013 One of 'percent', 'probability', 'density', or 'probability density' If None, the output of histfunc is used as is. If 'probability', the output of histfunc for a given bin is divided by the sum of the output of histfunc for all bins. If 'percent', the output of histfunc for a given bin is divided by the sum of the output of histfunc for all bins and multiplied by 100. If 'density', the output of histfunc for a given bin is divided by the size of the bin. If 'probability density', the output of histfunc for a given bin is normalized such that it corresponds to the probability that a random event whose distribution is described by the output of histfunc will fall into that bin.\n* **marginal_x** and **marginal_y** (str) \u2013 One of 'rug', 'box', 'violin', or 'histogram'. If set, a horizontal subplot is drawn above the main plot, visualizing the x-distribution\/y-distribution.\n* **nbinsx** and **nbinsy** (int) \u2013 Positive integer. Sets the number of bins along the x-axis\/y-axis.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","3c1497e8":"**By using all 3 axis, a color, and symbols, we can view 5 different dimensions of data at once, wow!**","2f387247":"**If you want to see the underlying data, you just have to pass 'all' to the `points` parameter like this:**","7679535e":"**Here we can clearly see that most passengers is `Pclass = 3` did not survive but those that did were female. We can also see the obvious relation between `Fare` and `Pclass`, especially in between `Pclass = 1` and `Pclass = 2`. Lastly, we see that most passengers in `Pclass = 1` survived indepedent of `Sex`**","90dbeeca":"**So we see that most passengers in our training set did not survive (~62 percent died). To get a donut plot, we simply pass a float to the `hole` argument**","176303c8":"### 3. Violin Plot\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.violin.html)):**\n\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.) \n* **violinmode** (str (default 'group')) \u2013 One of 'group' or 'overlay'. In 'overlay' mode, violins are on drawn top of one another. In 'group' mode, violins are placed beside each other.\n* **points** (str or boolean (default 'outliers')) \u2013 One of 'outliers', 'suspectedoutliers', 'all', or False. If 'outliers', only the sample points lying outside the whiskers are shown. If 'suspectedoutliers', all outlier points are shown and those less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted with the marker\u2019s 'outliercolor'. If 'outliers', only the sample points lying outside the whiskers are shown. If 'all', all sample points are shown. If False, no sample points are shown and the whiskers extend to the full range of the sample.\n* **box** (boolean (default False)) \u2013 If True, boxes are drawn inside the violins.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","eb3cc7d0":"### 4. Strip Plot\n\n**Noteable arguments (taken from [here](https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.box.html)):**\n\n* **color** (str or int or Series or array-like) \u2013 Either a name of a column in data_frame, or a pandas Series or array_like object. Values from this column or array_like are used to assign color to marks.\n* **labels** (dict with str keys and str values (default {})) \u2013 By default, column names are used in the figure for axis titles, legend entries and hovers. This parameter allows this to be overridden. The keys of this dict should correspond to column names, and the values should correspond to the desired label to be displayed.\n* **orientation** (str, one of 'h' for horizontal or 'v' for vertical.)\n* **stripmode** (str (default 'group')) \u2013 One of 'group' or 'overlay'. In 'overlay' mode, strips are on drawn top of one another. In 'group' mode, strips are placed beside each other.\n* **log_x** and **log_y** (boolean (default False)) - if True, the x-axis\/y-axis is log-scaled in cartesian coordinates\n* **title** (str) \u2013 The figure title.\n* **width** and **height** (int (default None)) \u2013 The figure width in pixels.","63152566":"**These Plotly tables are interactive in the sense that you can move the columns around as you please, which is pretty cool.**\n\n**Now we can import Plotly Express as `px` and call on it like we do with `matplotlib.pyplot` asd `plt` for quick visualizations:**"}}