{"cell_type":{"e07a4629":"code","c858b5d0":"code","8434122a":"code","38a6e0b0":"code","a1733341":"code","824feb13":"code","f47c9b87":"code","c6933adf":"code","3a820771":"code","b55f2283":"code","c66c6698":"code","3ab910d8":"code","335d2182":"code","6e7d2b9f":"markdown","7f9573b9":"markdown","d6603d4d":"markdown","e5b730f7":"markdown","4c6d77b0":"markdown","1b6925ac":"markdown","54c45163":"markdown","e56afcb0":"markdown"},"source":{"e07a4629":"import numpy as np\nimport pandas as pd\nfrom zipfile import ZipFile\nimport re\nimport cv2\nfrom sklearn.cluster import KMeans, MiniBatchKMeans\nfrom math import sqrt\nfrom collections import Counter\n\nimport altair as alt\nalt.renderers.enable('kaggle')","c858b5d0":"# read paintings info data and parse year of creation\ndef parse_year(date):\n    '''\n    Helper to parse painting's year of creation\n    '''\n    if isinstance(date, str):\n        res = re.findall('([0-9]+)', date)\n        if res:\n            return res[0]\n        else:\n            return -1\n        \n    if pd.isnull(date):\n        return -1\n    \n    return date_val\n\ninfo = pd.read_csv('\/kaggle\/input\/painter-by-numbers\/all_data_info.csv')\ninfo['year'] = info.loc[:, 'date'].apply(parse_year).astype('int32')\n\n# Only paintings with year of creation after 1500\ninfo = info.loc[info.year>=1500]\n\n# Only paitings from wikiart\ninfo = info.loc[info.source=='wikiart']","8434122a":"info.source.value_counts()","38a6e0b0":"# add decades and half decades columns\ninfo['decade'] = info['year']\/\/10*10\ninfo['half_decade'] = info['decade'] + ((info['year'] - info['decade']) \/\/ 5 * 5 )","a1733341":"# add folders to filenames\ninfo.loc[info.in_train==True, 'new_filename'] = 'train\/' + info.loc[info.in_train==True, 'new_filename']\ninfo.loc[info.in_train==False, 'new_filename'] = 'test\/' + info.loc[info.in_train==False, 'new_filename']","824feb13":"info.head(3)","f47c9b87":"info.loc[:, ['half_decade', 'new_filename']].groupby('half_decade').count().describe()","c6933adf":"def sample_data(info, sample_size, groupby='half_decade'):\n    '''\n    Sampling procedure\n    '''\n    def sample_func(x):\n        subsample_size = len(x) if len(x) < sample_size else sample_size\n        return list(x.sample(subsample_size, random_state=1))\n    \n    sample = info.groupby(groupby).agg({\n        'new_filename': sample_func\n    }).to_dict()\n    \n    return sample['new_filename']","3a820771":"sample_info = sample_data(info, sample_size=50, groupby='half_decade')","b55f2283":"# LOAD AND RESIZE IMAGE\ndef load_img(filename):\n    zip_name = 'train.zip' if 'train\/' in filename else 'test.zip'\n    \n    with ZipFile('\/kaggle\/input\/painter-by-numbers\/' + zip_name) as zip:\n        with zip.open(filename) as file:\n            #file.seek(0)\n            img_array = np.asarray(bytearray(file.read()), dtype='uint8')\n            img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)\n            try:\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            except cv2.error as e:\n                print('Failed to load:', filename)\n                return None\n            \n    return img\n\ndef resize_img(img):\n    h, w, _ = img.shape\n    w_new = int(200 * w \/ max(w, h))\n    h_new = int(200 * h \/ max(w, h))\n    \n    return cv2.resize(img, (w_new, h_new), interpolation = cv2.INTER_AREA)\n\n\n# COLORS CONVERSION\ndef rgb_to_hex(rgb):\n    return \"#{:02x}{:02x}{:02x}\".format(int(rgb[0]), int(rgb[1]), int(rgb[2]))\n\ndef rgb_to_hsp(rgb):\n    \"\"\"\n    Calculates RGB color brightness\n    \"\"\"\n    return sqrt(0.299 * (rgb[0]**2) + 0.587 * (rgb[1]**2) + 0.114 * (rgb[2]**2))\n\n\n# PREVALENT COLORS DETECTION WITH K-Means\ndef detect_prevalent_colors(files, group_label, colors_num=10):\n    \"\"\"\n    Detect N-most prevalent colors in the list of given image files\n    \n    Params:\n    files: list of filenames\n    group_label: label of group as tuple of variable and string\n    colors_num: N most prevalent colors to detect \n    \"\"\"\n    data = []\n    for f in files:\n        img = load_img(f)\n        if img is not None:\n            mod_img = resize_img(img)\n            mod_img = mod_img.reshape(mod_img.shape[0] * mod_img.shape[1], 3).astype('float32')\n            data.append(mod_img)\n        \n    data = np.concatenate(data, axis=0)\n    \n    clustering_method = MiniBatchKMeans # KMeans or MiniBatchKMeans\n    \n    clf = clustering_method(n_clusters = colors_num)\n    labels = clf.fit_predict(data)\n    cluster_centers = clf.cluster_centers_\n    \n    counts = Counter(labels)\n    counts_sum = sum(counts.values())\n    \n    colors_data = [\n        {\n            'hex': rgb_to_hex( cluster_centers[i]),\n            'hsp': rgb_to_hsp(cluster_centers[i]),\n            'prop': (counts[i] \/ counts_sum),\n            group_label[0]: group_label[1]\n        } for i in counts.keys()\n    ]\n    \n    return colors_data\n\n\n# RUN\nviz_colors = []\nfor year, files in sample_info.items():\n    print('Processing year:', year)\n    \n    year_colors = detect_prevalent_colors(files, ('year', year), colors_num=10)\n    \n    # Sort colors by brightness\n    viz_colors.extend(\n        sorted(year_colors, key=lambda x: x['hsp'])\n    )","c66c6698":"viz_df = pd.DataFrame(viz_colors)","3ab910d8":"alt.Chart(viz_df, title='Prevalent colors by half-decade').mark_bar(size=9).encode(\n    alt.X(\n        'year',\n        scale=alt.Scale(\n            domain=(1495, 2015),\n            nice=False\n        ),\n        axis=alt.Axis(\n            title='Year (half-decade)',\n            format='.4')\n    ),\n    alt.Y(\n        'sum(prop)',\n        scale=alt.Scale(domain=(0,1)),\n        axis=alt.Axis(\n            title='Prevalent color proportions'\n        )\n    ),\n    \n    color=alt.Color(\n        'hex',\n        scale=None,\n        legend=None\n    ),\n    order=alt.Order(\n        'hsp',\n        sort='ascending'\n    ),\n    tooltip=['year', 'hex', 'prop']\n).properties(\n    width=900,\n    height=500\n)","335d2182":"alt.Chart(viz_df, title='Prevalent colors by half-decade').mark_bar(size=9).encode(\n    alt.X(\n        'year',\n        scale=alt.Scale(\n            domain=(1495, 2015),\n            nice=False\n        ),\n        axis=alt.Axis(\n            title='Year (half-decade)',\n            format='.4')\n    ),\n    alt.Y(\n        'count()',\n        scale=alt.Scale(domain=(0,10)),\n        axis=alt.Axis(\n            title='Prevalent color'\n        )\n    ),\n    \n    color=alt.Color(\n        'hex',\n        scale=None,\n        legend=None\n    ),\n    order=alt.Order(\n        'hsp',\n        sort='ascending'\n    ),\n    tooltip=['year', 'hex']\n).properties(\n    width=900,\n    height=500\n)","6e7d2b9f":"### CREATE IMAGES SAMPLES FOR EACH HALF-DECADE","7f9573b9":"#### VISUALIZE JUST WITH COLORS","d6603d4d":"### DETECT 10 PREVALENT COLORS IN SAMPLES & CREATE VISUALIZATION DATA","e5b730f7":"#### VISUALIZE WITH COLOR PROPORTIONS","4c6d77b0":"### REFERENCES\n\n1. [Color Identification in Images: Machine Learning Application](https:\/\/towardsdatascience.com\/color-identification-in-images-machine-learning-application-b26e770c4c71)\n2. [How to find the main colours in an image](https:\/\/www.alanzucconi.com\/2015\/05\/24\/how-to-find-the-main-colours-in-an-image\/)\n3. [The incredibly challenging task of sorting colours](https:\/\/www.alanzucconi.com\/2015\/09\/30\/colour-sorting\/)\n4. [HSP Color Model \u2014 Alternative to HSV (HSB) and HSL](http:\/\/alienryderflex.com\/hsp.html)","1b6925ac":"### PREPARE & PLOT COLORS TIMELINE VISUALIZATION","54c45163":"### PREPARE PAINTINGS INFORMATION FILE & SUBSET WIKIART PAINTINGS AFTER 1500","e56afcb0":"### INTRODUCTION\n\nSome time ago I came up with an idea to explore and show \"the timeline of color in arts\" through the means of data visualization. By \"the color timeline\" here, I mean how the usage of colors changed through the years. This particular dataset seems to be a good basis for such exploration.\n\nThe resulting visualization is at the end of this notebook. \n\nMy approach is the commonly used ML-based method of finding prevalent colors in an image - K-Means clustering of pixels based on their distance in 3D space represented by their R, G, B color components.\n\nIn general, I did the following steps:\n\n1. Subset the paintings from Wikiart data source and with the year of creation after 1500;\n2. Grouped the subset by half-decades and randomly sampled 50 paintings from each half-decade;\n3. Within every half-decade's subsample the paintings images were resized to a fixed dimension and combined into a single image as an array of pixel's RGB components;\n4. K-Means clustering (k=10) was applied over this array, producing clusters of 10 most prevalent colors. For each color cluster the pixels arranged  to this cluster (color) were counted giving the size of each cluster.\n5. The resulting clustering information (colors and size of color clusters for each half-decade) was used for creating final visualization of the colors timeline.\n\nImage processing code is mostly not my own. The references are at the bottom of the notebook."}}