{"cell_type":{"fcc8ff92":"code","478fd63e":"code","efa9c1cf":"code","ee119bf4":"code","45424f34":"code","4f59a9d2":"code","5a9f91e1":"code","6ca777e4":"code","70f27b0c":"code","93d56228":"code","64fb2fef":"code","fee3d5b1":"markdown"},"source":{"fcc8ff92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","478fd63e":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf","efa9c1cf":"X = df[['Pclass','Sex','Age','SibSp','Parch','Fare','Cabin','Embarked']].fillna(0)\ny = df[['Survived']].fillna(0)\n\nfeature_names = ['Pclass','Sex','Age','SibSp','Parch','Fare','Cabin','Embarked']\n\nX.loc[X['Sex'] == 'male', 'Sex'] = 0  \nX.loc[X['Sex'] == 'female', 'Sex'] = 1 \nX['Sex'] = X['Sex'].astype(str).astype(int)\n\nX.loc[X['Cabin'] != 0, 'Cabin'] = 1 \nX['Cabin'] = X['Cabin'].astype(str).astype(int)\n\nX.loc[X['Embarked'] == 'S', 'Embarked'] = 1 \nX.loc[X['Embarked'] == 'C', 'Embarked'] = 2\nX.loc[X['Embarked'] == 'Q', 'Embarked'] = 3 \nX['Embarked'] = X['Embarked'].astype(str).astype(int)\n\ny = y['Survived']","ee119bf4":"df_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf_test","45424f34":"X_val = df_test[['Pclass','Sex','Age','SibSp','Parch','Fare','Cabin','Embarked']].fillna(0)\n\nX_val.loc[X_val['Sex'] == 'male', 'Sex'] = 0  \nX_val.loc[X_val['Sex'] == 'female', 'Sex'] = 1 \nX_val['Sex'] = X_val['Sex'].astype(str).astype(int)\n\nX_val.loc[X_val['Cabin'] != 0, 'Cabin'] = 1 \nX_val['Cabin'] = X_val['Cabin'].astype(str).astype(int)\n\nX_val.loc[X_val['Embarked'] == 'S', 'Embarked'] = 1 \nX_val.loc[X_val['Embarked'] == 'C', 'Embarked'] = 2\nX_val.loc[X_val['Embarked'] == 'Q', 'Embarked'] = 3 \nX_val['Embarked'] = X_val['Embarked'].astype(str).astype(int)\n\n#X_val = X_val.values.tolist()\nlen(X_val)","4f59a9d2":"df_val = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ndf_val","5a9f91e1":"y_val = df_val[['Survived']].fillna(0)\ny_val = y_val['Survived']\nlen(y_val)","6ca777e4":"# Decision Tree Classifier\n\nfrom sklearn import tree\nfrom sklearn.tree import export_text\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\ntree.plot_tree(clf) \n\n#r = tree.export_text(clf, feature_names=feature_names)\n#print(r)\n\nprint(f'predict:{clf.predict(X_val)}')\nprint(f'score:{clf.score(X_val, y_val)}')","70f27b0c":"# Na\u00efve Bayes Classifier\n\nfrom sklearn.naive_bayes import GaussianNB\n\nclf = GaussianNB()\nclf.fit(X, y)\n\nprint(f'predict:{clf.predict(X_val)}')\nprint(f'score:{clf.score(X_val, y_val)}')","93d56228":"# Neural Network Classifier (Multi-layer Perceptron classifier)\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\n\nclf = MLPClassifier(random_state=1, max_iter=300).fit(X, y)\n\nprint(f'predict:{clf.predict(X_val)}')\n\nprint(f'score:{clf.score(X_val, y_val)}')","64fb2fef":"# 5-fold cross validation\n\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import f1_score\n\nclf = GaussianNB()\n\nscores = cross_validate(clf, X, y, cv=5, scoring=('recall', 'precision', 'f1'),return_estimator=True)\n\nprint(f\"     class:       1          2          3          4          5\")\nprint(f\"    recall: {scores['test_recall']}\")\nprint(f\" precision: {scores['test_precision']}\")\nprint(f\"  f1_score: {scores['test_f1']}\")\nprint()\n\nf1s = []\nfor est in scores['estimator']:\n    p = est.predict(X)\n    f1s.append(f1_score(y, p, average='macro'))\n    \nprint(f\"    all f1: {f1s}\")\nprint(f\"average f1: {sum(f1s) \/ len(f1s)}\")\n","fee3d5b1":"# 22p21c0415-tanapon-w2hw2-27092020"}}