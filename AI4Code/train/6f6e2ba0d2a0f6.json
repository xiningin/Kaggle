{"cell_type":{"397cfef9":"code","9130c49e":"code","037c830e":"code","1762e49b":"code","238b58ec":"code","b3f184b1":"code","347cde36":"code","4966f93c":"code","a11da0ea":"code","51e749c2":"code","dfc907db":"code","1852bc8c":"code","e1b09a47":"code","b02410fc":"code","d1353d44":"code","d934bf0c":"code","f3c6a1a1":"code","06666a4f":"code","980d64a3":"code","028f831d":"code","63b5e29d":"code","16c5aa37":"code","f28093cc":"code","07814b48":"code","568327a2":"code","b723646b":"code","8059fb4d":"code","907fb2bf":"code","5bcaf2e7":"code","fa17e734":"code","1f0b0501":"code","388e15b3":"code","691febaf":"code","a29582f6":"code","a74b297b":"code","e7009387":"code","7770e566":"code","d696ddf3":"code","1576b687":"code","2fb2cfb0":"code","4fdc4ddb":"code","5291b0ac":"code","3f7737dd":"code","f3bd997a":"code","67c80e99":"code","418c094f":"code","77ff75d0":"code","86ef36e7":"code","d3f242e5":"code","2aff8386":"code","7ee55251":"code","a586d2fd":"code","69ffdaed":"code","e3a2def5":"code","f43eece0":"code","f3d11790":"code","6f732ce9":"code","434ba26c":"code","ae749cee":"code","2f1f0fd7":"code","9657126c":"code","a3894dc3":"code","b4dd9cad":"code","6fa830aa":"markdown","b0840a20":"markdown","06167da7":"markdown","0866e577":"markdown","b39704fe":"markdown","9f84d566":"markdown","6a601f1c":"markdown","5e8c1eed":"markdown","ae861c9e":"markdown","a84bc105":"markdown","b8bd4895":"markdown","0da7f446":"markdown","785606a3":"markdown","0de492ae":"markdown","586c3abb":"markdown","0760dae7":"markdown","35976699":"markdown","4b9a9939":"markdown","92867c33":"markdown","06f6cbf2":"markdown","9053eb7a":"markdown","22e77dfd":"markdown","e12d13e1":"markdown","e69d0e05":"markdown","0813d754":"markdown","e18ec69c":"markdown","4986e045":"markdown","b1ee12aa":"markdown","c542c1d7":"markdown","c61af96d":"markdown","87ac3ee4":"markdown","52ff1000":"markdown","d0334830":"markdown","b0e6452d":"markdown","d12615c4":"markdown","c50f393c":"markdown","aa74b2af":"markdown","05db56d5":"markdown","d0bcaaee":"markdown","335c1a87":"markdown","c0f1e1ae":"markdown","e0d9a471":"markdown"},"source":{"397cfef9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","9130c49e":"train = pd.read_csv('..\/input\/train.csv')","037c830e":"train.head()","1762e49b":"train_label = train['SalePrice']","238b58ec":"numeric_columns = ['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', \n                  'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',  \n                  '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'FullBath',\n                  'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n                   'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch',  '3SsnPorch', 'ScreenPorch', \n                   'PoolArea', 'MiscVal', 'MoSold', 'YrSold']","b3f184b1":"index = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', \n        'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n        'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond',\n        'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n        'Heating', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType',\n        'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive','PoolQC', 'Fence', 'MiscFeature',\n        'SaleType', 'SaleCondition']","347cde36":"i = 0\ndf = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","4966f93c":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","a11da0ea":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","51e749c2":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","dfc907db":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","1852bc8c":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","e1b09a47":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","b02410fc":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","d1353d44":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","d934bf0c":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","f3c6a1a1":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","06666a4f":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","980d64a3":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","028f831d":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","63b5e29d":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","16c5aa37":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","f28093cc":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","07814b48":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","568327a2":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","b723646b":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","8059fb4d":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","907fb2bf":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","5bcaf2e7":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","fa17e734":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","1f0b0501":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","388e15b3":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","691febaf":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","a29582f6":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","a74b297b":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","e7009387":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","7770e566":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","d696ddf3":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","1576b687":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","2fb2cfb0":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","4fdc4ddb":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","5291b0ac":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","3f7737dd":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","f3bd997a":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","67c80e99":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","418c094f":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","77ff75d0":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","86ef36e7":"df = train[[index[i]]]\ndf[\"B\"] = df[index[i]].astype('category')\ni=i+1\ndf['B']","d3f242e5":"## 6 types for SalesCondition: [Abnorml, AdjLand, Alloca, Family, Normal, Partial]","2aff8386":"num = train[numeric_columns]","7ee55251":"index = train[index]","a586d2fd":"from sklearn.model_selection import train_test_split\n# Train_test split with 25% test size\ntrain_data, test_data, train_labels, test_labels = train_test_split(num, \n                                                                    train_label, \n                                                                    test_size=0.20)","69ffdaed":"import xgboost as xgb\nimport numpy as np\n# Flatten columns\ntrain_labels = np.ravel(train_labels)\ntest_labels = np.ravel(test_labels)\n\n# Create DMatrix for xgboost\nD_train = xgb.DMatrix(data=train_data, silent=1, nthread=-1, label =train_labels)\nD_test  = xgb.DMatrix(data=test_data,  silent=1, nthread=-1, label =test_labels)","e3a2def5":"param = {'silent' : 1,\n         'learning_rate' : 0.03,\n         'max_depth': 10,\n         'tree_method': 'exact',\n         'objective': 'reg:linear'\n         }\n\nn_rounds = 300\n\nwatch_list = [(D_train, 'train'), (D_test, 'eval')]\nbst = xgb.train(param, D_train, n_rounds, watch_list, early_stopping_rounds = 15)\npred = bst.predict( D_test )\npredictions = [np.around(value) for value in pred]","f43eece0":"from sklearn.metrics import accuracy_score, precision_score\naccuracy = accuracy_score(test_labels, predictions)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","f3d11790":"df2 = test_data\ndf2.loc[:,('pred')] = list(predictions)\ndf2.loc[:,('real')] = list(test_labels)\ndf2.groupby(\"pred\").agg(\"count\")","6f732ce9":"df2.groupby(\"real\").agg(\"count\")","434ba26c":"xgb.plot_importance(bst)","ae749cee":"# Using model to test data\ntest_df = pd.read_csv('..\/input\/test.csv')\ntest_df","2f1f0fd7":"num = test_df[numeric_columns]\nD_test  = xgb.DMatrix(data=num,  silent=1, nthread=-1)\npred = bst.predict( D_test )\npredictions = [np.around(value) for value in pred]","9657126c":"test_df['SalePrice'] = predictions\ntest_df","a3894dc3":"submission = test_df[['Id', 'SalePrice']]","b4dd9cad":"submission.to_csv('submission.csv', index = False)","6fa830aa":"# Checking Categorical data","b0840a20":"## 4 types for Fence: [GdPrv, GdWo, MnPrv, MnWw]","06167da7":"## 6 types for Foundation: [BrkTil, CBlock, PConc, Slab, Stone, Wood]","0866e577":"## 3 types for PavedDrive: [N, P, Y]","b39704fe":"## 8 types for RoofMatl: [ClyTile, CompShg, Membran, Metal, Roll, Tar&Grv, WdShake, WdShngl]","9f84d566":"## 4 types for ExterQual: [Ex, Fa, Gd, TA]","6a601f1c":"## Three types for LandSlope: [Gtl, Mod, Sev]","5e8c1eed":"## Five types for MSZoning: [C, FV, RH, RL, RM]","ae861c9e":"## 6 types for Heating: [Floor, GasA, GasW, Grav, OthW, Wall]","a84bc105":"## 4 types for BsmtExposure: [Av, Gd, Mn, No]","b8bd4895":"## 5 types for GarageCond: [Ex, Fa, Gd, Po, TA]","0da7f446":"## 8 types for HouseStyle: [1.5Fin, 1.5Unf, 1Story, 2.5Fin, 2.5Unf, 2Story, SFoyer, SLvl]","785606a3":"## Five types for LotConfig: [Corner, CulDSac, FR2, FR3, Inside]","0de492ae":"## Two types for Utilities: [AllPub, NoSeWa]","586c3abb":"## 9 types for SaleType: [COD, CWD, Con, ConLD, ..., ConLw, New, Oth, WD]","0760dae7":"## 5 types for GarageQual: [Ex, Fa, Gd, Po, TA]","35976699":"## 3 types for PoolQC: [Ex, Fa, Gd]","4b9a9939":"## 5 types for Electrical: [FuseA, FuseF, FuseP, Mix, SBrkr]","92867c33":"## Two types for Street : [Grvl, Pave]","06f6cbf2":"## 3 types for GarageFinish: [Fin, RFn, Unf]","9053eb7a":" ## Four types for LandContour: [Bnk, HLS, Low, Lvl]","22e77dfd":"## 15 types for Exterior1st: [AsbShng, AsphShn, BrkComm, BrkFace, ..., Stucco, VinylSd, Wd Sdng, WdShing]","e12d13e1":"## 9 types for Condition1: [Artery, Feedr, Norm, PosA, ..., RRAe, RRAn, RRNe, RRNn]","e69d0e05":"## Four types for LotShape: [IR1, IR2, IR3, Reg]","0813d754":"## 4 types for BsmtQual: [Ex, Fa, Gd, TA]","e18ec69c":"## 4 types for KitchenQual: [Ex, Fa, Gd, TA]","4986e045":"## 8 types for Condition2: [Artery, Feedr, Norm, PosA, PosN, RRAe, RRAn, RRNn]","b1ee12aa":"## 2 types for CentralAir: [N, Y]","c542c1d7":"## 6 types for GarageType: [2Types, Attchd, Basment, BuiltIn, CarPort, Detchd]","c61af96d":"## 6 types for BsmtFinType2: [ALQ, BLQ, GLQ, LwQ, Rec, Unf]","87ac3ee4":"## Two types for Alley : [Grvl, Pave]","52ff1000":"## 25 types for Neighborhood: [Blmngtn, Blueste, BrDale, BrkSide, ..., Somerst, StoneBr, Timber, Veenker]","d0334830":"## 6 types for RoofStyle: [Flat, Gable, Gambrel, Hip, Mansard, Shed]","b0e6452d":"## 4 types for MasVnrType: [BrkCmn, BrkFace, None, Stone]","d12615c4":"## 5 types for ExterCond: [Ex, Fa, Gd, Po, TA]","c50f393c":"## 5 types for BldgType: [1Fam, 2fmCon, Duplex, Twnhs, TwnhsE]","aa74b2af":"## 6 types for BsmtFinType1: [ALQ, BLQ, GLQ, LwQ, Rec, Unf]","05db56d5":"## 16 types for Exterior2nd: [AsbShng, AsphShn, Brk Cmn, BrkFace, ..., Stucco, VinylSd, Wd Sdng, Wd Shng]","d0bcaaee":"## 4 types for MiscFeature: [Gar2, Othr, Shed, TenC]","335c1a87":"## 5 types for FireplaceQu: [Ex, Fa, Gd, Po, TA]","c0f1e1ae":"## 7 types for Functional: [Maj1, Maj2, Min1, Min2, Mod, Sev, Typ]","e0d9a471":"## 4 types for BsmtCond: [Fa, Gd, Po, TA]"}}