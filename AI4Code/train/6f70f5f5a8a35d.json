{"cell_type":{"5ddc2a7c":"code","a1944f8f":"code","1580a570":"code","2e20e69b":"code","78dc3584":"code","fad7ae02":"code","68188053":"code","6b27bcd0":"code","64092c20":"code","0ab1afbf":"code","2278d0ef":"code","b8135e6d":"code","de84d6d2":"code","a8f27213":"code","89f9a792":"code","9774e90a":"code","5f3ba017":"code","81f48630":"code","389109b2":"code","00f581a9":"code","e66cba1c":"code","d2ff8b10":"code","9fbb5c00":"code","f44449ad":"code","63e71725":"code","ae959fc1":"code","0c92aea8":"code","c07c7db7":"code","2ff31f16":"code","c0ea8337":"code","109a6223":"code","c6a89117":"code","cfb90e8e":"code","38e71087":"code","9e3df1ad":"code","cabfade0":"code","decac21f":"code","2c47181d":"code","af92c51a":"code","f9f8ec7f":"code","ba5da482":"code","fee601c0":"code","25a7ec35":"markdown","6da410d9":"markdown","12faa28a":"markdown","471d1f84":"markdown","21452c58":"markdown","2a3de718":"markdown","fc532324":"markdown","d5433530":"markdown","23b045da":"markdown","5a5bd62f":"markdown","2f6288b2":"markdown","9ae47430":"markdown","c6b8ad89":"markdown","9ba1e490":"markdown","3c472a62":"markdown","829e1ef8":"markdown","5e9e1d9d":"markdown","40144004":"markdown","2cd92020":"markdown","839f21b7":"markdown","7f04eeae":"markdown","de4d8550":"markdown","a7726a48":"markdown","a992ab9f":"markdown","00302cdb":"markdown","1504a11f":"markdown","7cf27cba":"markdown","8861219d":"markdown","5ceb85cd":"markdown","a77c88ac":"markdown","4af12c38":"markdown","9bc01252":"markdown","242392e3":"markdown"},"source":{"5ddc2a7c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport collections\nimport warnings\n\nfrom IPython.core.display import display, HTML\n\n# import plotly \nimport plotly\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.tools as tls\n\n# configure things\nwarnings.filterwarnings('ignore')\n\npd.options.display.float_format = '{:,.2f}'.format  \npd.options.display.max_columns = 999\n\npy.init_notebook_mode(connected=True)\n\n%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline\nsns.set()\n\n# !pip install plotly --upgrade","a1944f8f":"# # func to make plotly work in Collaboratory (not necessary on Kaggle)\n# def configure_plotly_browser_state():\n#   import IPython\n#   display(IPython.core.display.HTML('''\n# <script src=\"\/static\/components\/requirejs\/require.js\"><\/script>\n# <script>\n#   requirejs.config({\n#     paths: {\n#       base: 'static\/base',\n#       plotly: 'https:\/\/cdn.plot.ly\/plotly-1.5.1.min.js?noext',\n#     },\n#   });\n# <\/script>\n# '''))","1580a570":"# import os\n# for dirname, _, filenames in os.walk('..\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\ndf = pd.read_csv('..\/input\/extended-football-stats-for-european-leagues-xg\/understat.com.csv')\ndf = df.rename(index=int, columns={'Unnamed: 0': 'league', 'Unnamed: 1': 'year'}) \ndf.head()","2e20e69b":"f = plt.figure(figsize=(25,12))\nax = f.add_subplot(2,3,1)\nplt.xticks(rotation=45)\nsns.barplot(x='team', y='pts', hue='year', data=df[(df['league'] == 'Bundesliga') & (df['position'] <= 4)], ax=ax)\nax = f.add_subplot(2,3,2)\nplt.xticks(rotation=45)\nsns.barplot(x='team', y='pts', hue='year', data=df[(df['league'] == 'EPL') & (df['position'] <= 4)], ax=ax)\nax = f.add_subplot(2,3,3)\nplt.xticks(rotation=45)\nsns.barplot(x='team', y='pts', hue='year', data=df[(df['league'] == 'La_liga') & (df['position'] <= 4)], ax=ax)\nax = f.add_subplot(2,3,4)\nplt.xticks(rotation=45)\nsns.barplot(x='team', y='pts', hue='year', data=df[(df['league'] == 'Serie_A') & (df['position'] <= 4)], ax=ax)\nax = f.add_subplot(2,3,5)\nplt.xticks(rotation=45)\nsns.barplot(x='team', y='pts', hue='year', data=df[(df['league'] == 'Ligue_1') & (df['position'] <= 4)], ax=ax)\nax = f.add_subplot(2,3,6)\nplt.xticks(rotation=45)\nsns.barplot(x='team', y='pts', hue='year', data=df[(df['league'] == 'RFPL') & (df['position'] <= 4)], ax=ax)","78dc3584":"# Removing unnecessary for our analysis columns \ndf_xg = df[['league', 'year', 'position', 'team', 'scored', 'xG', 'xG_diff', 'missed', 'xGA', 'xGA_diff', 'pts', 'xpts', 'xpts_diff']]\n\noutlier_teams = ['Wolfsburg', 'Schalke 04', 'Leicester', 'Villareal', 'Sevilla', 'Lazio', 'Fiorentina', 'Lille', 'Saint-Etienne', 'FC Rostov', 'Dinamo Moscow']","fad7ae02":"# Checking if getting the first place requires fenomenal execution\nfirst_place = df_xg[df_xg['position'] == 1]\n\n# Get list of leagues\nleagues = df['league'].drop_duplicates()\nleagues = leagues.tolist()\n\n# Get list of years\nyears = df['year'].drop_duplicates()\nyears = years.tolist()","68188053":"first_place[first_place['league'] == 'Bundesliga']","6b27bcd0":"pts = go.Bar(x = years, y = first_place['pts'][first_place['league'] == 'Bundesliga'], name = 'PTS')\nxpts = go.Bar(x = years, y = first_place['xpts'][first_place['league'] == 'Bundesliga'], name = 'Expected PTS')\n\ndata = [pts, xpts]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing Actual and Expected Points for Winner Team in Bundesliga\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"Points\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","64092c20":"# and from this table we see that Bayern dominates here totally, even when they do not play well\ndf_xg[(df_xg['position'] <= 2) & (df_xg['league'] == 'Bundesliga')].sort_values(by=['year','xpts'], ascending=False)","0ab1afbf":"first_place[first_place['league'] == 'La_liga']","2278d0ef":"pts = go.Bar(x = years, y = first_place['pts'][first_place['league'] == 'La_liga'], name = 'PTS')\nxpts = go.Bar(x = years, y = first_place['xpts'][first_place['league'] == 'La_liga'], name = 'Expected PTS')\n\ndata = [pts, xpts]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing Actual and Expected Points for Winner Team in La Liga\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"Points\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","b8135e6d":"# comparing with runner-up\ndf_xg[(df_xg['position'] <= 2) & (df_xg['league'] == 'La_liga')].sort_values(by=['year','xpts'], ascending=False)","de84d6d2":"first_place[first_place['league'] == 'EPL']","a8f27213":"pts = go.Bar(x = years, y = first_place['pts'][first_place['league'] == 'EPL'], name = 'PTS')\nxpts = go.Bar(x = years, y = first_place['xpts'][first_place['league'] == 'EPL'], name = 'Expected PTS')\n\ndata = [pts, xpts]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing Actual and Expected Points for Winner Team in EPL\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"Points\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","89f9a792":"# comparing with runner-ups\ndf_xg[(df_xg['position'] <= 2) & (df_xg['league'] == 'EPL')].sort_values(by=['year','xpts'], ascending=False)","9774e90a":"first_place[first_place['league'] == 'Ligue_1']","5f3ba017":"pts = go.Bar(x = years, y = first_place['pts'][first_place['league'] == 'Ligue_1'], name = 'PTS')\nxpts = go.Bar(x = years, y = first_place['xpts'][first_place['league'] == 'Ligue_1'], name = 'Expected PTS')\n\ndata = [pts, xpts]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing Actual and Expected Points for Winner Team in Ligue 1\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"Points\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","81f48630":"# comparing with runner-ups\ndf_xg[(df_xg['position'] <= 2) & (df_xg['league'] == 'Ligue_1')].sort_values(by=['year','xpts'], ascending=False)","389109b2":"first_place[first_place['league'] == 'Serie_A']","00f581a9":"pts = go.Bar(x = years, y = first_place['pts'][first_place['league'] == 'Serie_A'], name = 'PTS')\nxpts = go.Bar(x = years, y = first_place['xpts'][first_place['league'] == 'Serie_A'], name = 'Expecetd PTS')\n\ndata = [pts, xpts]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing Actual and Expected Points for Winner Team in Serie A\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"Points\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","e66cba1c":"# comparing to runner-ups\ndf_xg[(df_xg['position'] <= 2) & (df_xg['league'] == 'Serie_A')].sort_values(by=['year','xpts'], ascending=False)","d2ff8b10":"first_place[first_place['league'] == 'RFPL']","9fbb5c00":"pts = go.Bar(x = years, y = first_place['pts'][first_place['league'] == 'RFPL'], name = 'PTS')\nxpts = go.Bar(x = years, y = first_place['xpts'][first_place['league'] == 'RFPL'], name = 'Expected PTS')\n\ndata = [pts, xpts]\n\nlayout = go.Layout(\n    barmode='group',\n    title=\"Comparing Actual and Expected Points for Winner Team in RFPL\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"Points\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f44449ad":"# comparing to runner-ups\ndf_xg[(df_xg['position'] <= 2) & (df_xg['league'] == 'RFPL')].sort_values(by=['year','xpts'], ascending=False)","63e71725":"# Creating separate DataFrames per each league\nlaliga = df_xg[df_xg['league'] == 'La_liga']\nlaliga.reset_index(inplace=True)\nepl = df_xg[df_xg['league'] == 'EPL']\nepl.reset_index(inplace=True)\nbundesliga = df_xg[df_xg['league'] == 'Bundesliga']\nbundesliga.reset_index(inplace=True)\nseriea = df_xg[df_xg['league'] == 'Serie_A']\nseriea.reset_index(inplace=True)\nligue1 = df_xg[df_xg['league'] == 'Ligue_1']\nligue1.reset_index(inplace=True)\nrfpl = df_xg[df_xg['league'] == 'RFPL']\nrfpl.reset_index(inplace=True)","ae959fc1":"laliga.describe()","0c92aea8":"def print_records_antirecords(df):\n  print('Presenting some records and antirecords: \\n')\n  for col in df.describe().columns:\n    if col not in ['index', 'year', 'position']:\n      team_min = df['team'].loc[df[col] == df.describe().loc['min',col]].values[0]\n      year_min = df['year'].loc[df[col] == df.describe().loc['min',col]].values[0]\n      team_max = df['team'].loc[df[col] == df.describe().loc['max',col]].values[0]\n      year_max = df['year'].loc[df[col] == df.describe().loc['max',col]].values[0]\n      val_min = df.describe().loc['min',col]\n      val_max = df.describe().loc['max',col]\n      print('The lowest value of {0} had {1} in {2} and it is equal to {3:.2f}'.format(col.upper(), team_min, year_min, val_min))\n      print('The highest value of {0} had {1} in {2} and it is equal to {3:.2f}'.format(col.upper(), team_max, year_max, val_max))\n      print('='*100)\n      \n# replace laliga with any league you want\nprint_records_antirecords(laliga)","c07c7db7":"trace0 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2014], \n    y = laliga['xG_diff'][laliga['year'] == 2014],\n    name = '2014',\n    mode = 'lines+markers'\n)\n\ntrace1 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2015], \n    y = laliga['xG_diff'][laliga['year'] == 2015],\n    name='2015',\n    mode = 'lines+markers'\n)\n\ntrace2 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2016], \n    y = laliga['xG_diff'][laliga['year'] == 2016],\n    name='2016',\n    mode = 'lines+markers'\n)\n\ntrace3 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2017], \n    y = laliga['xG_diff'][laliga['year'] == 2017],\n    name='2017',\n    mode = 'lines+markers'\n)\n\ntrace4 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2018], \n    y = laliga['xG_diff'][laliga['year'] == 2018],\n    name='2018',\n    mode = 'lines+markers'\n)\n\ndata = [trace0, trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    title=\"Comparing xG gap between positions\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"xG difference\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","2ff31f16":"trace0 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2014], \n    y = laliga['xGA_diff'][laliga['year'] == 2014],\n    name = '2014',\n    mode = 'lines+markers'\n)\n\ntrace1 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2015], \n    y = laliga['xGA_diff'][laliga['year'] == 2015],\n    name='2015',\n    mode = 'lines+markers'\n)\n\ntrace2 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2016], \n    y = laliga['xGA_diff'][laliga['year'] == 2016],\n    name='2016',\n    mode = 'lines+markers'\n)\n\ntrace3 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2017], \n    y = laliga['xGA_diff'][laliga['year'] == 2017],\n    name='2017',\n    mode = 'lines+markers'\n)\n\ntrace4 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2018], \n    y = laliga['xGA_diff'][laliga['year'] == 2018],\n    name='2018',\n    mode = 'lines+markers'\n)\n\ndata = [trace0, trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    title=\"Comparing xGA gap between positions\",\n    xaxis={'title': 'Year'},\n    yaxis={'title': \"xGA difference\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","c0ea8337":"trace0 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2014], \n    y = laliga['xpts_diff'][laliga['year'] == 2014],\n    name = '2014',\n    mode = 'lines+markers'\n)\n\ntrace1 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2015], \n    y = laliga['xpts_diff'][laliga['year'] == 2015],\n    name='2015',\n    mode = 'lines+markers'\n)\n\ntrace2 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2016], \n    y = laliga['xpts_diff'][laliga['year'] == 2016],\n    name='2016',\n    mode = 'lines+markers'\n)\n\ntrace3 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2017], \n    y = laliga['xpts_diff'][laliga['year'] == 2017],\n    name='2017',\n    mode = 'lines+markers'\n)\n\ntrace4 = go.Scatter(\n    x = laliga['position'][laliga['year'] == 2018], \n    y = laliga['xpts_diff'][laliga['year'] == 2018],\n    name='2018',\n    mode = 'lines+markers'\n)\n\ndata = [trace0, trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    title=\"Comparing xPTS gap between positions\",\n    xaxis={'title': 'Position'},\n    yaxis={'title': \"xPTS difference\",\n    }\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","109a6223":"# Check mean differences\ndef get_diff_means(df):  \n  dm = df.groupby('year')[['xG_diff', 'xGA_diff', 'xpts_diff']].mean()\n  \n  return dm\n\nmeans = get_diff_means(laliga)\nmeans","c6a89117":"# Check median differences\ndef get_diff_medians(df):  \n  dm = df.groupby('year')[['xG_diff', 'xGA_diff', 'xpts_diff']].median()\n  \n  return dm\n\nmedians = get_diff_medians(laliga)\nmedians","cfb90e8e":"# Getting outliers for xG using zscore\nfrom scipy.stats import zscore\n# laliga[(np.abs(zscore(laliga[['xG_diff']])) > 2.0).all(axis=1)]\ndf_xg[(np.abs(zscore(df_xg[['xG_diff']])) > 3.0).all(axis=1)]","38e71087":"# outliers for xGA\n# laliga[(np.abs(zscore(laliga[['xGA_diff']])) > 2.0).all(axis=1)]\ndf_xg[(np.abs(zscore(df_xg[['xGA_diff']])) > 3.0).all(axis=1)]","9e3df1ad":"# Outliers for xPTS\n# laliga[(np.abs(zscore(laliga[['xpts_diff']])) > 2.0).all(axis=1)]\ndf_xg[(np.abs(zscore(df_xg[['xpts_diff']])) > 3.0).all(axis=1)]","cabfade0":"# Trying different method of outliers detection\ndf_xg.describe()","decac21f":"# using Interquartile Range Method to identify outliers\n# xG_diff\niqr_xG = (df_xg.describe().loc['75%','xG_diff'] - df_xg.describe().loc['25%','xG_diff']) * 1.5\nupper_xG = df_xg.describe().loc['75%','xG_diff'] + iqr_xG\nlower_xG = df_xg.describe().loc['25%','xG_diff'] - iqr_xG\n\nprint('IQR for xG_diff: {:.2f}'.format(iqr_xG))\nprint('Upper border for xG_diff: {:.2f}'.format(upper_xG))\nprint('Lower border for xG_diff: {:.2f}'.format(lower_xG))\n\noutliers_xG = df_xg[(df_xg['xG_diff'] > upper_xG) | (df_xg['xG_diff'] < lower_xG)]\nprint('='*50)\n\n# xGA_diff\niqr_xGA = (df_xg.describe().loc['75%','xGA_diff'] - df_xg.describe().loc['25%','xGA_diff']) * 1.5\nupper_xGA = df_xg.describe().loc['75%','xGA_diff'] + iqr_xGA\nlower_xGA = df_xg.describe().loc['25%','xGA_diff'] - iqr_xGA\n\nprint('IQR for xGA_diff: {:.2f}'.format(iqr_xGA))\nprint('Upper border for xGA_diff: {:.2f}'.format(upper_xGA))\nprint('Lower border for xGA_diff: {:.2f}'.format(lower_xGA))\n\noutliers_xGA = df_xg[(df_xg['xGA_diff'] > upper_xGA) | (df_xg['xGA_diff'] < lower_xGA)]\nprint('='*50)\n\n# xpts_diff\niqr_xpts = (df_xg.describe().loc['75%','xpts_diff'] - df_xg.describe().loc['25%','xpts_diff']) * 1.5\nupper_xpts = df_xg.describe().loc['75%','xpts_diff'] + iqr_xpts\nlower_xpts = df_xg.describe().loc['25%','xpts_diff'] - iqr_xpts\n\nprint('IQR for xPTS_diff: {:.2f}'.format(iqr_xpts))\nprint('Upper border for xPTS_diff: {:.2f}'.format(upper_xpts))\nprint('Lower border for xPTS_diff: {:.2f}'.format(lower_xpts))\n\noutliers_xpts = df_xg[(df_xg['xpts_diff'] > upper_xpts) | (df_xg['xpts_diff'] < lower_xpts)]\nprint('='*50)\n\noutliers_full = pd.concat([outliers_xG, outliers_xGA, outliers_xpts])\noutliers_full = outliers_full.drop_duplicates()","2c47181d":"# Adding ratings bottom to up to find looser in each league (different amount of teams in every league so I can't do just n-20)\nmax_position = df_xg.groupby('league')['position'].max()\ndf_xg['position_reverse'] = np.nan\noutliers_full['position_reverse'] = np.nan\n\nfor i, row in df_xg.iterrows():\n  df_xg.at[i, 'position_reverse'] = np.abs(row['position'] - max_position[row['league']])+1\n  \nfor i, row in outliers_full.iterrows():\n  outliers_full.at[i, 'position_reverse'] = np.abs(row['position'] - max_position[row['league']])+1","af92c51a":"total_count = df_xg[(df_xg['position'] <= 4) | (df_xg['position_reverse'] <= 3)].count()[0]\noutlier_count = outliers_full[(outliers_full['position'] <= 4) | (outliers_full['position_reverse'] <= 3)].count()[0]\noutlier_prob = outlier_count \/ total_count\nprint('Probability of outlier in top or bottom of the final table: {:.2%}'.format(outlier_prob))","f9f8ec7f":"# 1-3 outliers among all leagues in a year\ndata = pd.DataFrame(outliers_full.groupby('league')['year'].count()).reset_index()\ndata = data.rename(index=int, columns={'year': 'outliers'})\nsns.barplot(x='league', y='outliers', data=data)\n# no outliers in Bundesliga","ba5da482":"top_bottom = outliers_full[(outliers_full['position'] <= 4) | (outliers_full['position_reverse'] <= 3)].sort_values(by='league')\ntop_bottom","fee601c0":"# Let's get back to our list of teams that suddenly got into top. Was that because of unbeliavable mix of luck and skill?\not = [x for x  in outlier_teams if x in top_bottom['team'].drop_duplicates().tolist()]\not\n# The answer is absolutely no. They just played well during 1 season. Sometimes that happen.","25a7ec35":"From the charts above we can clearly see that top teams score more, concede less and get more points than expected. That's why these teams are top teams. And totally opposite situation with outsiders. The teams from the middleplay average. Totally logical, no huge insights here.","6da410d9":"## Ligue 1","12faa28a":"I do not follow Russian Premier League, so just by coldly looking at data we see the same pattern as scoring more than you deserve and also intersting situation with CSKA Moscow from 2015 to 2017. During these years these guys were good, but converted their advantages only once, the others two - if you do not convert, you get punished or your main competitor just converts better. \n\nThere is no justice in football :D. Although, I believe with VAR the numbers will become more stable in next seasons. Because one of the reasons of those additional goals and points are errors of arbiters.","471d1f84":"In EPL we see the clear trend that tells you: \"To win you have to be better than statistics\". Interesting case here is Leicester story of victory in 2015: they got 12 points more than they should've and at the same time Arsenal got 6 points less of expected! This is why we love football, because such unexplicable things happen. I am not telling is total luck, but it played its' role here.\n\nAnother interesting thing is Manchester City of 2018 - they are super stable! They scored just one goal more than expected, missed 2 less and got 7 additional points, while Liverpool fought really well, had little bit more luck on their side, but couldn't win despite being 13 points ahead of their expected.\n\nPep is finishing building the machine of destruction. Man City creates and converts their moments based on skill and do not rely on luck - it makes them very dangerous in the next season.","21452c58":"# Exploring 5 Years of European Football","2a3de718":"As we can see from the chart above that in 2014 and 2015 Barcelona was creating enough moments to win the title and do not rely on personal skills or luck, from these numbers we can actually say that THE Team was playing there.\n\nIn 2016 there were lots of competition between Madrid and Barcelona and in the end Madrid got luckier \/ had more guts in one particular game (or Barcelona got unlucky \/ didn't have balls) and it was the cost of the title. I am sure that if we dig deeper that season we can find that particular match.\n\nIn 2017 and 2018 Barcelona's success was mostly tributed to actions of Lionel Messi who was scoring or making assits in situations where normal players wouldn't do that. What led to such a jump in xPTS difference. What makes me think (having the context that Real Madrid is very active on transfer market this season) can end up bad. Just subjective opinion based on numbers and watching Barcelona games. Really hope I am wrong.","fc532324":"As we can see from these bar charts, there are teams that in last 5 years were in top 4 only once, which means it is not something common, which means if we dig deeper, we can find that there is a factor of luck that might have played in favour to these teams. It's just a theory, so let's look closer to those outliers.\n\nThe teams that were in top 4 only once during last 5 seasons are:\n\n*  Wolfsburg (2014) and Schalke 04 (2017) from Bundesliga\n*  Leicester (2015) from EPL\n*  Villareal (2015) and Sevilla (2016) from La Liga\n*  Lazio (2014) and Fiorentina (2014) from Serie A\n*  Lille (2018) and Saint-Etienne (2018) from Ligue 1\n*  FC Rostov (2015) and Dinamo Moscow (2014) from RFPL\n\nLet's save these teams.","d5433530":"# Statistical Overview","23b045da":"By looking at the table and barchart we see that Bayern every year got more points that they should have, they scored more than expected and missed less than expected (except for 2018, which didn't break their plan of winning the season, but it gives some hints that Bayern played worse this year, although the competitors didn't take advantage of it). ","5a5bd62f":"# Conclusions","2f6288b2":"In French Ligue 1 we continue to see the trend \"to win you have to execute 110%, because 100% is not enough\". Here Paris Saint Germain dominates totally. Only in 2016 we get an outlier in the face of Monaco that scored 30 goals more than expected!!! and got almost 17 points more than expected! Luck? Quite a good piece of it. PSG was good that year, but Monaco was extraordinary. Again, we cannot claim it's pure luck or pure skill, but a perfect combination of both in right place and time.","9ae47430":"Our winners and losers with brilliant performance and brilliant underperformance","c6b8ad89":"# Outliers Detection","9ba1e490":"So we can say that it is very probable that every year in one of 6 leagues there will be a team that gets a ticket to Champions League or Europa Legue with the help of luck on top of their great skills or there is a looser that gets to the second division, because they cannot convert their moments.","3c472a62":"## Bundesliga","829e1ef8":"Using data from describe() method we can get some interesting insights about every league. Below is the function that helps to get those insights. ","5e9e1d9d":"# Understanding How Winners Win","40144004":"IQR - is the difference between the first quartile and third quartile of a set of data. This is one way to describe the spread of a set of data. \n\nA commonly used rule says that a data point is an outlier if it is more than 1.5 \u22c5 IQR above the third quartile or below the first quartile. Said differently, low outliers are below Q1 \u2212 1.5 \u22c5 IQR and high outliers are above Q3 + 1.5 \u22c5 IQR.\n\nLet's check it out.","2cd92020":"## RFPL","839f21b7":"12 outliers in total detected with zscore. Poor Osasuna in 2016 - almost 30 not deserved goals.\n\nAs we can see from this data being in outlier space top does not yet make you win the season. But if you miss your opportunities or receive goals where you shouldn't and do that toooooo much - you deserve relegation. Losing and being average is much easier than winning.","7f04eeae":"Football is a low-scoring game and one goal can change the entire picture of the game and even end results. That's why long term analysis gives you better picture of the situation. \n\nWith the introduction of xG metric (and others that derive from this) now we can really evaluate the performance of the team on a long run and understand the difference between top teams, middle class teams and absolute outsiders. \n\nxG bring new arguments into discussions around football what makes it even more interesting. And at the same time the game doesn't loose this factor of uncertainty and possibility of crazy things happening. Actually now, these crazy things have a chance to be explained.\n\nIn the end we have found that it is almost 100% chance that something weird will happen in one of the leagues. It is just question of time how epic that will be.","de4d8550":"## EPL","a7726a48":"# Import Data and Visual EDA","a992ab9f":"In this section we will try to find some patterns that can help us understand what are some of the ingredients of the victory soup :D. Starting with Bundesliga.","00302cdb":"## Interquartile Range (IQR)","1504a11f":"In Italian Serie A Juventus is dominating 8 years in a row although cannot show any major success in Champions League. I think by checking this chart and numbers we can understand that Juve doesn't have strong enough competiton inside the country and gets lots of \"lucky\" points, which again derives from multiple factors and we can see that Napoli outperformed Juventus by xPTS twice, but it is a real life and in, for example 2017, Juve was crazy and scored additional 26 goals (or created goals from nowhere), while Napoli missed 3 more than expected (due to error of goalkeeper or maybe excelence of some team in 1 or 2 particular matches). As with the situation in La Liga when Real Madrid became a champion I am sure we can find 1 or 2 games that was key that year.\n\nDetails matter in football. You see, one error here, one woodwork there and you've lost the title.","7cf27cba":"# Intro\n\nIn this notebook we will explore modern metrics in football (xG, xGA and xPTS) and its' influence in sport analytics.\n\n* **Expected Goals (xG)** - measures the quality of a shot based on several variables such as assist type, shot angle and distance from goal, whether it was a headed shot and whether it was defined as a big chance.\n\n* **Expected Assits (xGA)** - measures the likelihood that a given pass will become a goal assist. It considers several factors including the type of pass, pass end-point and length of the pass.\n\n* **Expected Points (xPTS)** - measures the likelihood of a certaing game to bring points to the team.\n\nThese metrics let us look much deeper into football statistics and understand performance of players and teams in general and realize the role of luck and skill in it. Disclaimer: they are both important.\n\nThe process of data collection for this notebook is described in this Kaggle kernel: [Web Scraping Football Statistics](https:\/\/www.kaggle.com\/slehkyi\/web-scraping-football-statistics-2014-now)","8861219d":"Z-Score is the number of standard deviations from the mean a data point is. We can use it to find outliers in our dataset by assuming that |z-score| > 3 is an outlier.","5ceb85cd":"## Serie A","a77c88ac":"## Z-Score","4af12c38":"As there are 6 leagues with different teams and stats, I decided to focus on one in the beginning to test different approaches and then replicate the final analysis model on other 5. And as I watch mostly La Liga I will start with this competiton as I know the most about it.","9bc01252":"## La Liga","242392e3":"In the next visualization we will check how many teams from each league were in top 4 during last 5 years. It can give us some info about stability of top teams from different countries."}}