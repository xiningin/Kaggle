{"cell_type":{"1e940639":"code","ca15b115":"code","08bd8efd":"code","7b6ae68a":"code","ae8adb32":"code","d249772f":"code","f76b2b02":"code","073c749a":"code","d35cdc91":"code","408099ef":"code","338b48c3":"code","f554da05":"code","60a1e0ef":"code","d12db93b":"code","7d25d933":"code","0ab3f6f4":"code","9b50575d":"code","e1d3fa00":"code","a06ba093":"code","7ddb75c7":"code","3201ca85":"code","26db7d3a":"code","c12a00a7":"code","08a3e63c":"code","0363f91d":"code","e38b4797":"code","29ef5cd7":"code","f6c7700d":"code","633f1a0f":"code","48d44860":"code","d75ff70f":"code","02ac8ea9":"code","595ab8bd":"code","5e024751":"code","b66f46fe":"code","6b24cade":"code","28dd414d":"code","6f09fecd":"code","bfffa0b6":"code","04d871e2":"code","6dadf1a5":"code","20e36f23":"code","b81d8b8e":"code","f7d95eb1":"code","a6c6a70b":"code","2eb01c31":"code","59fa34ab":"code","7b64abc5":"code","2669bb86":"code","2554c264":"code","740596fc":"code","053a520a":"code","b982d2a6":"code","fa683f71":"code","37981e55":"code","1db30001":"code","48476679":"code","bfb36122":"code","77cb3e2f":"code","0391a803":"code","d171cc76":"code","e4a68d98":"code","48da6bca":"code","28117d91":"code","20eb137b":"code","d64783a2":"code","b8bdead6":"code","3bfe998d":"code","b8986140":"code","54bc5f5e":"code","811d2f66":"code","f29ea295":"code","30971ba4":"code","ca1ac06f":"code","42f9a15a":"code","c3b2e2d4":"code","6816f5b9":"code","583628a5":"code","1dc1e277":"code","04b3c976":"code","d3030caf":"code","b440db34":"code","a4a52c16":"code","350e1eb6":"code","31a2e431":"code","24ae4a99":"code","ea6c3b27":"code","5d753515":"code","c322a932":"code","cf5ce927":"code","9cf3ee8e":"code","111ab4ee":"code","57f6915b":"code","b9c93263":"code","002f054b":"code","56eb0ff7":"code","80e2dab3":"code","df1dd966":"markdown","3a095ef5":"markdown","97965eef":"markdown","cf1e22b5":"markdown","eb3f36c6":"markdown","3d81135d":"markdown","14611f3f":"markdown","fa3514d6":"markdown","0ea83281":"markdown"},"source":{"1e940639":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca15b115":"train = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/train.csv')\nmeal = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/meal_info.csv')\ncenter = pd.read_csv('\/kaggle\/input\/av-genpact-hack-dec2018\/fulfilment_center_info.csv')","08bd8efd":"meal","7b6ae68a":"train.head()","ae8adb32":"data = train.merge(meal, on='meal_id')","d249772f":"data","f76b2b02":"data = data.merge(center, on='center_id')","073c749a":"train_data = data","d35cdc91":"df=data.copy()","408099ef":"data.nunique()","338b48c3":"corr = data.corr()\nimport seaborn as sns\nsns.heatmap(corr)","f554da05":"ts_tot_orders = data.groupby(['week'])['num_orders'].sum()\nts_tot_orders = pd.DataFrame(ts_tot_orders)\nts_tot_orders","60a1e0ef":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=ts_tot_orders.index,\n        y=ts_tot_orders['num_orders'],\n        name='Time Series for num_orders',\n        marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",http:\/\/localhost:8888\/notebooks\/Kaggle_for_timepass\/hackathon\/Sigma-thon-master\/Sigma-thon-master\/eda1.ipynb#\n    )\n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","d12db93b":"center_id = data.groupby(['center_id'])['num_orders'].sum()\ncenter_id = pd.DataFrame(center_id)","7d25d933":"center_id=center_id.reset_index()","0ab3f6f4":"import plotly.express as px\nfig = px.bar(center_id, x=\"center_id\", y=\"num_orders\", color='center_id')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","9b50575d":"meal_id = df.groupby(['category', 'cuisine'])['num_orders'].sum()\nmeal_id = pd.DataFrame(meal_id)","e1d3fa00":"meal_id=meal_id.reset_index()","a06ba093":"meal_id","7ddb75c7":"meal_id['meal'] = meal_id.apply(lambda x : x['category']+', '+x['cuisine'],axis=1)","3201ca85":"meal_id","26db7d3a":"import plotly.express as px\nfig = px.bar(meal_id, x=\"meal\", y=\"num_orders\", color='meal')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","c12a00a7":"cat_var = ['center_type',\n 'category',\n 'cuisine']","08a3e63c":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    plot_data=[]\n    for j in lis:\n        print(i)\n        print(j)\n        data = df[df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n       \n        plot_data.append(go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name=str(j),\n                #marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            ))\n        \n        x+=1\n    plot_layout = go.Layout(\n            title='Total orders per week for '+str(i),\n            yaxis_title='Total orders',\n            xaxis_title='Week',\n            plot_bgcolor='rgba(0,0,0,0)'\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)","0363f91d":"center_type = df.groupby(['center_type'])['num_orders'].sum()\ncenter_type = pd.DataFrame(center_type)","e38b4797":"center_type","29ef5cd7":"center_type=center_type.reset_index()","f6c7700d":"import plotly.express as px\nfig = px.bar(center_type, x=\"center_type\", y=\"num_orders\", color='center_type')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\n\nfig.show()","633f1a0f":"category = df.groupby(['category'])['num_orders'].sum()\ncategory = pd.DataFrame(category)","48d44860":"category = category.reset_index()","d75ff70f":"import plotly.express as px\nfig = px.bar(category, x=\"category\", y=\"num_orders\", color='category')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\nfig.show()","02ac8ea9":"cuisine = df.groupby(['cuisine'])['num_orders'].sum()\ncuisine = pd.DataFrame(cuisine)","595ab8bd":"cuisine = cuisine.reset_index()","5e024751":"import plotly.express as px\nfig = px.bar(cuisine, x=\"cuisine\", y=\"num_orders\", color='cuisine')\nfig.update_layout({\n'plot_bgcolor': 'rgba(1, 1, 1, 1)',\n'paper_bgcolor': 'rgba(1, 1, 1, 1)',\n})\nfig.show()","b66f46fe":"cat_ct=df.groupby(['category', 'center_type'])['num_orders'].sum()","6b24cade":"cat_ct = cat_ct.unstack().fillna(0)\ncat_ct","28dd414d":"# Visualize this data in bar plot\nimport matplotlib.pyplot as plt\nax = (cat_ct).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","6f09fecd":"cat_cu=df.groupby(['category', 'cuisine'])['num_orders'].sum()\ncat_cu = cat_cu.unstack().fillna(0)\ncat_cu","bfffa0b6":"# Visualize this data in bar plot\nax = (cat_cu).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","04d871e2":"ct_cu=df.groupby(['center_type', 'cuisine'])['num_orders'].sum()\nct_cu = ct_cu.unstack().fillna(0)\nct_cu","6dadf1a5":"# Visualize this data in bar plot\nax = (ct_cu).plot(\nkind='bar',\nfigsize=(10, 7),\ngrid=True\n)\nax.set_ylabel('Count')\nplt.show()","20e36f23":"center_id = 55\nmeal_id = 1993\n\n# here we are putting user input\n# here the prediction related to that center id and that particular meal id.","b81d8b8e":"train_df = train_data[train_data['center_id']==center_id]\ntrain_df = train_df[train_df['meal_id']==meal_id]","f7d95eb1":"period = len(train_df)","a6c6a70b":"train_df['Date'] = pd.date_range('2015-01-01', periods=period, freq='W')","2eb01c31":"train_df['Day'] = train_df['Date'].dt.day\ntrain_df['Month'] = train_df['Date'].dt.month\ntrain_df['Year'] = train_df['Date'].dt.year\ntrain_df['Quarter'] = train_df['Date'].dt.quarter","59fa34ab":"train_df.head()","7b64abc5":"colors=['#b84949', '#ff6f00', '#ffbb00', '#9dff00', '#329906', '#439c55', '#67c79e', '#00a1db', '#002254', '#5313c2', '#c40fdb', '#e354aa']","2669bb86":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nfor i in cat_var:\n    grp=train_df.groupby([i])\n    grp=pd.DataFrame(grp)\n    lis=grp[0]\n    x=0\n    for j in lis:\n        print(i)\n        print(j)\n        data = train_df[train_df[i]==j]\n        data = pd.DataFrame(data)\n        tot_orders = data.groupby(['week'])['num_orders'].sum()\n        tot_orders = pd.DataFrame(tot_orders)\n        plot_data = [\n            go.Scatter(\n                x=tot_orders.index,\n                y=tot_orders['num_orders'],\n                name='Time Series for num_orders for '+str(j),\n                marker = dict(color = colors[x%12])\n                #x_axis=\"OTI\",\n                #y_axis=\"time\",\n            )\n        ]\n        plot_layout = go.Layout(\n                title='Total orders per week for '+str(j),\n                yaxis_title='Total orders',\n                xaxis_title='Week',\n                plot_bgcolor='rgba(0,0,0,0)'\n            )\n        fig = go.Figure(data=plot_data, layout=plot_layout)\n        x+=1\n        pyoff.iplot(fig)","2554c264":"xb_data = train_df.drop(columns=['id','center_id','meal_id','category','cuisine','center_type'])\n\nxb_data = xb_data.set_index(['Date'])","740596fc":"x_train = xb_data.drop(columns='num_orders')\ny_train = xb_data['num_orders']\ny_train = np.log1p(y_train)\nsplit_size = period-15\nX_train = x_train.iloc[:split_size,:]\nX_test = x_train.iloc[split_size:,:]\nY_train =  y_train.iloc[:split_size]\nY_test = y_train.iloc[split_size:]","053a520a":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,5))\nplt.plot(Y_train, label='training_data')\nplt.plot(Y_test, label='Validation_test')\nplt.legend(loc='best')","b982d2a6":"from xgboost import XGBRegressor\nmodel_2 = XGBRegressor(\n learning_rate = 0.01,\n eval_metric ='rmse',\n    n_estimators = 50000,\n    max_depth = 5,\n    subsample = 0.8,\n    colsample_bytree = 1,\n    gamma = 0.5\n  \n  \n )\n#model.fit(X_train, y_train)\nmodel_2.fit(X_train, Y_train, eval_metric='rmse', \n          eval_set=[(X_test, Y_test)], early_stopping_rounds=500, verbose=100)","fa683f71":"a = (model_2.get_booster().best_iteration)\na","37981e55":"xgb_model = XGBRegressor(\n     \n     learning_rate = 0.01,\n   \n    n_estimators = a,\n    max_depth = 5,\n    subsample = 0.8,\n    colsample_bytree = 1,\n    gamma = 0.5)","1db30001":"xgb_model.fit(X_train, Y_train)","48476679":"xgb_preds = xgb_model.predict(X_test)","bfb36122":"xgb_preds = np.exp(xgb_preds)","77cb3e2f":"train_df.tail()","0391a803":"xgb_preds = pd.DataFrame(xgb_preds)\nxgb_preds.index = Y_test.index","d171cc76":"Y_train = np.exp(Y_train)\nY_test = np.exp(Y_test)","e4a68d98":"plt.figure(figsize=(20,5))\nplt.plot(Y_train, label='training_data')\nplt.plot(Y_test, label='Validation_test')\nplt.plot(xgb_preds, color='cyan', label='xgb_preds')\nplt.legend(loc='best')","48da6bca":"from lightgbm import LGBMRegressor\nlgb_fit_params={\"early_stopping_rounds\":500, \n            \"eval_metric\" : 'rmse', \n            \"eval_set\" : [(X_test,Y_test)],\n            'eval_names': ['valid'],\n            'verbose':100\n           }\n\nlgb_params = {'boosting_type': 'gbdt',\n 'objective': 'regression',\n 'metric': 'rmse',\n 'verbose': 0,\n 'bagging_fraction': 0.8,\n 'bagging_freq': 1,\n 'lambda_l1': 0.01,\n 'lambda_l2': 0.01,\n 'learning_rate': 0.001,\n 'max_bin': 255,\n 'max_depth': 6,\n 'min_data_in_bin': 1,\n 'min_data_in_leaf': 1,\n 'num_leaves': 31}\n\nY_train = np.log1p(Y_train)\nY_test = np.log1p(Y_test)","28117d91":"clf_lgb = LGBMRegressor(n_estimators=10000, **lgb_params, random_state=123456789, n_jobs=-1)\nclf_lgb.fit(X_train, Y_train, **lgb_fit_params)","20eb137b":"lgb_model = LGBMRegressor(bagging_fraction=0.8, bagging_freq=1, lambda_l1=0.01,\n              lambda_l2=0.01, learning_rate=0.01, max_bin=255, max_depth=6,\n              metric='rmse', min_data_in_bin=1, min_data_in_leaf=1,\n              n_estimators=10000, objective='regression',\n              random_state=123456789, verbose=0)","d64783a2":"lgb_model.fit(X_train,Y_train)\n","b8bdead6":"lgm_preds = lgb_model.predict(X_test)\nlgm_preds = np.exp(lgm_preds)","3bfe998d":"lgm_preds = pd.DataFrame(lgm_preds)\nlgm_preds.index = Y_test.index","b8986140":"Y_train = np.exp(Y_train)\nY_test = np.exp(Y_test)","54bc5f5e":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.legend(loc='best')","811d2f66":"from catboost import CatBoostRegressor\nY_train = np.log1p(Y_train)\nY_test = np.log1p(Y_test)\n\ncat_model=CatBoostRegressor()\ncat_model.fit(X_train, Y_train)","f29ea295":"cat_preds = cat_model.predict(X_test)\ncat_preds = np.exp(cat_preds)","30971ba4":"cat_preds = pd.DataFrame(cat_preds)\ncat_preds.index = Y_test.index\nY_train = np.exp(Y_train)\nY_test = np.exp(Y_test)","ca1ac06f":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(cat_preds, color='green', label='cat_prediction')\nplt.legend(loc='best')","42f9a15a":"prophet_data = train_df[['Date','num_orders']]\nprophet_data.index = xb_data.index\nprophet_data = prophet_data.iloc[:split_size,:]","c3b2e2d4":"prophet_data =prophet_data.rename(columns={'Date':'ds',\n                             'num_orders':'y'})\nprophet_data.head()","6816f5b9":"from fbprophet import Prophet\nm = Prophet(growth='linear',\n            seasonality_mode='multiplicative',\n#            changepoint_prior_scale = 30,\n           seasonality_prior_scale = 35,\n           holidays_prior_scale = 10,\n           daily_seasonality = True,\n           weekly_seasonality = False,\n           yearly_seasonality= False,\n           ).add_seasonality(\n                name='monthly',\n                period=30.5,\n                fourier_order=30\n            \n            ).add_seasonality(\n                name='weekly',\n                period=7,\n                fourier_order=55\n            ).add_seasonality(\n                name='yearly',\n                period=365.25,\n                fourier_order=20\n            )\n        \nm.fit(prophet_data)","583628a5":"future = m.make_future_dataframe(periods=15, freq='W')","1dc1e277":"forecast = m.predict(future)\n# forecast['yhat'] = np.exp(forecast['yhat'])\n# forecast['yhat_lower'] = np.exp(forecast['yhat_lower'])\n# forecast['yhat_upper'] = np.exp(forecast['yhat_upper'])\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","04b3c976":"fig2 = m.plot_components(forecast)\n","d3030caf":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","b440db34":"prophet_preds = forecast['yhat'].iloc[split_size:]\nprophet_preds.index = Y_test.index","a4a52c16":"plt.figure(figsize=(20,5))\nplt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.plot(cat_preds, color='blue', label='cat_prediction')\nplt.legend(loc='best')","350e1eb6":"Y_train1=pd.DataFrame(Y_train)\nY_train1","31a2e431":"original=pd.DataFrame(Y_test)\nxgb_preds1=pd.DataFrame(xgb_preds)\nlgm_preds1=pd.DataFrame(lgm_preds)\nprophet_preds1=pd.DataFrame(prophet_preds)\ncat_preds1=pd.DataFrame(cat_preds)","24ae4a99":"cat_preds1","ea6c3b27":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=Y_train1.index,\n        y=Y_train1['num_orders'],\n        name='Time Series for num_orders',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=original.index,\n        y=original['num_orders'],\n        name='Original',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=xgb_preds1.index,\n        y=xgb_preds1[0],\n        name='xgb_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=lgm_preds1.index,\n        y=lgm_preds1[0],\n        name='light_lgm_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=prophet_preds1.index,\n        y=prophet_preds1['yhat'],\n        name='prophet_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=cat_preds1.index,\n        y=cat_preds1[0],\n        name='cat_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    )\n    \n    \n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","5d753515":"plt.figure(figsize=(20,5))\n# plt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='red', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.plot(cat_preds, color='blue', label='cat_prediction')\nplt.legend(loc='best')","c322a932":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=original.index,\n        y=original['num_orders'],\n        name='Original',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=xgb_preds1.index,\n        y=xgb_preds1[0],\n        name='xgb_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=lgm_preds1.index,\n        y=lgm_preds1[0],\n        name='light_lgm_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=prophet_preds1.index,\n        y=prophet_preds1['yhat'],\n        name='prophet_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=cat_preds1.index,\n        y=cat_preds1[0],\n        name='cat_prediction',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    )\n    \n    \n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","cf5ce927":"a = np.array(prophet_preds)\nb = np.array(lgm_preds)\nc = np.array(xgb_preds)\nd = np.array(cat_preds)\nfinal_preds =  (b*0.8)+ (d*0.2) \nfinal_preds = (final_preds*0.4) + (a*0.6)","9cf3ee8e":"final_preds[6]","111ab4ee":"final_preds = pd.DataFrame(final_preds[6])\nfinal_preds.index = Y_test.index","57f6915b":"final_preds = pd.DataFrame(final_preds)\nfinal_preds.index = Y_test.index\nplt.figure(figsize=(20,5))\n# plt.plot(Y_train)\nplt.plot(Y_test, label='Original')\nplt.plot(xgb_preds, color='cyan', label=\"xgb_prediction\")\nplt.plot(lgm_preds, color='orange', label='light_lgm_prediction')\nplt.plot(prophet_preds, color='green', label='prophet_prediction')\nplt.plot(final_preds, color='red',linestyle='--', label='final_prediction')\nplt.plot(cat_preds, color='blue', label='cat_prediction')\nplt.legend(loc='best')","b9c93263":"final_preds1=pd.DataFrame(final_preds)","002f054b":"final_preds1","56eb0ff7":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nplot_data = [\n    go.Scatter(\n        x=Y_train1.index,\n        y=Y_train1['num_orders'],\n        name='Time Series for num_orders',\n        #marker = dict(color = 'Blue')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    go.Scatter(\n        x=final_preds1.index,\n        y=final_preds1[0],\n        name='final_prediction',\n        marker = dict(color = 'Red')\n        #x_axis=\"OTI\",\n        #y_axis=\"time\",\n    ),\n    \n]\nplot_layout = go.Layout(\n        title='Total orders per week',\n        yaxis_title='Total orders',\n        xaxis_title='Week',\n        plot_bgcolor='rgba(0,0,0,0)'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","80e2dab3":"from sklearn.metrics import mean_squared_error\nprint(mean_squared_error(Y_test, final_preds, squared=False))","df1dd966":"# Prophet model","3a095ef5":"# User_input","97965eef":"# Please put center id and meal id","cf1e22b5":"# Combine Forecast","eb3f36c6":"# Light GBM Model","3d81135d":"# Cat_Regressor","14611f3f":"# **Final Result**","fa3514d6":"# XGB Boost","0ea83281":"This is forecast of center id =55, meal id =1993"}}