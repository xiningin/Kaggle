{"cell_type":{"16b205f0":"code","41da395a":"code","ce02504e":"code","90c73834":"code","e2f01d04":"code","9907991a":"code","4dd7b0c0":"code","cec31fd5":"code","d606df98":"code","30af4d73":"code","a8f5df19":"code","56128ebf":"code","2ac0d787":"code","f7174629":"code","dfa55573":"code","1af57063":"code","30a95f91":"code","a53fce4b":"code","0f570334":"code","1ce460ef":"code","819ef00d":"code","d5415b02":"code","87a77ae2":"code","d40583af":"code","e877d7da":"code","a162740e":"code","0550e42b":"code","ba76c04f":"code","f9f98291":"code","224021a6":"code","9df4de7a":"code","8cd0bdae":"code","b4a04a86":"code","cf05284d":"code","5daa379c":"code","66102cfc":"code","c4e1763b":"code","780635a9":"code","eb67ec7c":"code","9bfdb61d":"code","d2b69ca6":"code","2ce34ad2":"code","f58c0d8c":"code","0b9f366a":"code","b6bb2fc5":"code","98bfd104":"code","1b2a241e":"code","576a07d4":"code","ec2952c6":"code","8237ee38":"code","185d4429":"code","30db3b7c":"code","18dd6ba7":"code","3bf2fd70":"code","ec38c07a":"code","3ad4fe2e":"code","33a21abc":"code","09fa6ec0":"code","48351ffc":"code","3c09cd08":"code","b2cdea0e":"code","4a932c76":"code","86b9b382":"code","9323fad1":"code","728f696e":"code","08117705":"code","c38a409e":"code","958dc2ff":"code","26ac6116":"code","da9f5432":"code","00f744fd":"code","be41bd3f":"code","577fd0c3":"code","1d8fe4c8":"code","1f45e26c":"code","7a20fd05":"code","e7699301":"code","79f84ee7":"code","c4008552":"code","1ae2c121":"code","7a49d1ad":"code","258275b8":"code","336db3be":"code","1664d2db":"code","e1139cb9":"code","debece69":"code","e92c044e":"code","18998131":"code","1d50e634":"code","c473bbbb":"code","f0e088a5":"code","43716b70":"code","739ce220":"code","cf0e2058":"code","91239af9":"code","e8eea5e9":"code","2f445334":"code","729efdc4":"code","b9217cdd":"code","f63e2daa":"code","bfdea256":"code","cb887b6b":"code","c26050c1":"code","33eabee4":"code","6a41e9aa":"code","a6ab5f15":"code","fc9de344":"code","91cb0dcc":"markdown","04bb763a":"markdown","3d6e9855":"markdown","7183e806":"markdown","74a5c6c6":"markdown","333f93a2":"markdown","0df5fdea":"markdown","0a568c74":"markdown","df1188d0":"markdown","80140f2d":"markdown","7016a122":"markdown","d5a8d0c8":"markdown","4dd687c1":"markdown","17d418e1":"markdown","9ec20488":"markdown","e8fbd793":"markdown","c438c427":"markdown","8659cb11":"markdown","c80dafc7":"markdown","86e51582":"markdown","cb6bd3c7":"markdown"},"source":{"16b205f0":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns',None)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set(style='ticks',color_codes=True,font_scale=1.5)\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\n\nfrom scipy import stats\nfrom scipy.stats import skew, norm, probplot, boxcox\nfrom scipy.special import boxcox1p\n","41da395a":"train = pd.read_csv('..\/input\/housing-rent-dataset\/housing_train.csv')\ntrain.head()","ce02504e":"train_Id = train['id']\ntrain.drop('id',axis=1,inplace = True)","90c73834":"train.shape","e2f01d04":"train.describe()","9907991a":"def analysis(df, target):\n    instance = df.shape[0]\n    types=df.dtypes\n    counts = df.apply(lambda x: x.count())\n    uniques = df.T.apply(pd.Series.unique,1)\n    nulls= df.apply(lambda x: x.isnull().sum())\n    distincts = df.apply(pd.Series.nunique)\n    null_perc = (df.isnull().sum()\/instance)*100\n    skewness = df.skew()\n    kurtosis = df.kurt()\n    \n    corr = df.corr()[target]\n    str = pd.concat([types, counts,uniques, nulls,distincts, null_perc, skewness, kurtosis, corr], axis = 1, sort=False)\n    corr_col = 'corr '  + target\n    cols = ['types', 'counts','uniques', 'nulls','distincts', 'null_perc', 'skewness', 'kurtosis', corr_col ]\n    str.columns = cols\n    return str","4dd7b0c0":"details = analysis(train,'price')\ndetails","cec31fd5":"# lets see our numerical features\nnum_features = [feat for feat in train.columns if train[feat].dtypes != 'O']\nnum_features","d606df98":"# lets see our categorical features\ncat_features = [feat for feat in train.columns if train[feat].dtypes == 'O']\ncat_features","30af4d73":"plt.figure(figsize=(15,8))\n\nsns.distplot(train['sqfeet'],kde=True,norm_hist=True)\nplt.title('Skewness: {} and Kurtosis: {}'.format(train['sqfeet'].skew(),train['sqfeet'].kurtosis()))","a8f5df19":"sns.jointplot(x=train['sqfeet'],y=train['price'],height=10,ratio=3)\nprint('sqfeet Skewness: {:.3f} and Kurtosis: {:.3f}'.format(train['sqfeet'].skew(),train['sqfeet'].kurtosis()))\nprint('price Skewness: {:.3f} and Kurtosis: {:.3f}'.format(train['price'].skew(),train['price'].kurtosis()))\nplt.title('Correlations: {}'.format(train['sqfeet'].corr(train['price'])))\ntrain.shape","56128ebf":"data=train.copy()\ndata= data[data['sqfeet']<data['sqfeet'].quantile(0.9996)]\ndata = data[data['price']<data['price'].quantile(0.9996)]\n\nsns.jointplot(x=data['sqfeet'],y=data['price'],height=10,ratio=3)\nprint('sqfeet Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['sqfeet'].skew(),data['sqfeet'].kurtosis()))\nprint('price Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['price'].skew(),data['price'].kurtosis()))\nplt.title('Correlations: {:.3f}'.format(data['sqfeet'].corr(data['price'])))\ndata.shape","2ac0d787":"train['beds'].value_counts()","f7174629":"data = train.copy()\ndata.loc[data['beds']>8]='8+'\nplt.figure(figsize=(12,8))\nsns.countplot(data['beds'].astype('str').sort_values())\nplt.title('Beds distribution',fontsize=12)\nprint('Skewness: {:.3f} \\nKurtosis: {:.3f}'.format(train['beds'].skew(),train['beds'].kurtosis()))\nplt.show()","dfa55573":"data = train.copy()\ndata = data[data['price']<data['price'].quantile(0.9996)]\ndata = data[data['beds']<10]\nplt.figure(figsize=(15,8))\nsns.boxplot(x='beds',y='price',data=data)\nplt.title('Correlations: {:.3f}'.format(data['beds'].corr(data['price'])))\nprint('price Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['beds'].skew(),data['beds'].kurtosis()))","1af57063":"train['baths'].value_counts()","30a95f91":"data = train.copy()\ndata.loc[data['baths']> 8.5]='9+'\nplt.figure(figsize=(12,8))\nsns.countplot(data['baths'].astype('str').sort_values())\nplt.title('Bathss distribution',fontsize=12)\nprint('Skewness: {:.3f} \\nKurtosis: {:.3f}'.format(train['baths'].skew(),train['baths'].kurtosis()))\nplt.show()","a53fce4b":"data = train.copy()\ndata = data[data['price']<data['price'].quantile(0.9996)]\ndata = data[data['baths']<10]\nplt.figure(figsize=(15,8))\nsns.boxplot(x='baths',y='price',data=data)\nplt.title('Correlations: {:.3f}'.format(data['baths'].corr(data['price'])))\nprint('price Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['baths'].skew(),data['baths'].kurtosis()))","0f570334":"bool_features = [x for x in num_features if train[x].nunique() < 3]\nbool_features","1ce460ef":"# we will use median for skewed and mean for normally distributed feature\nskewed_bool_features = ['wheelchair_access',\n 'electric_vehicle_charge',\n 'comes_furnished']","819ef00d":"for feature in skewed_bool_features:\n    data=train.copy()\n    data = data[data['price']<data['price'].quantile(0.9996)]\n    data.groupby(feature)['price'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.title('Skeweness of feature {} is {:.6f}'.format(feature,data[feature].skew()))\n    plt.ylabel('price')\n    print('Correlation: {:.3f}'.format(data[feature].corr(data['price'])))\n    plt.show()","d5415b02":"normal_bool_features=['cats_allowed',\n 'dogs_allowed',\n 'smoking_allowed']\nfor feature in normal_bool_features:\n    data=train.copy()\n    data = data[data['price']<data['price'].quantile(0.9996)]\n    data.groupby(feature)['price'].mean().plot.bar()\n    plt.xlabel(feature)\n    plt.title('Skeweness of feature {} is {:.6f}'.format(feature,data[feature].skew()))\n    plt.ylabel('price')\n    print('Correlation: {:.3f}'.format(data[feature].corr(data['price'])))\n    plt.show()","87a77ae2":"# lets see our categorical features\ncat_features = [feat for feat in train.columns if train[feat].dtypes == 'O']\ncat_features = [feat for feat in cat_features if 'url' not in feat]\ncat_features","d40583af":"train['type'].unique()","e877d7da":"data = train.copy()\ndata = data[data['price']<data['price'].quantile(0.9996)]\nfig=plt.figure(figsize=(18,14))\nplt.subplots_adjust(hspace=0.5)\nax1 = fig.add_subplot(211);\nsns.countplot(data['type'])\nplt.title('Type distribution',fontsize=12)\nplt.xticks(rotation=90)\nax2 =fig.add_subplot(212);\nsns.boxplot(x='type',y='price',data=data)\nplt.xticks(rotation=90)\nplt.show()","a162740e":"data = train.copy()\ndata = data[data['price']<data['price'].quantile(0.9996)]\nfig=plt.figure(figsize=(18,14))\nplt.subplots_adjust(hspace=0.5)\nax1 = fig.add_subplot(211);\nsns.countplot(data['parking_options'])\nplt.title('parking_options distribution',fontsize=12)\nplt.xticks(rotation=90)\nax2 =fig.add_subplot(212);\nsns.boxplot(x='parking_options',y='price',data=data)\nplt.xticks(rotation=90)\nplt.show()","0550e42b":"data = train.copy()\ndata = data[data['price']<data['price'].quantile(0.9996)]\nfig=plt.figure(figsize=(18,14))\nplt.subplots_adjust(hspace=0.6)\nax1 = fig.add_subplot(211);\nsns.countplot(data['laundry_options'])\nplt.title('laundry_options distribution',fontsize=12)\nplt.xticks(rotation=90)\nax2 =fig.add_subplot(212);\nsns.boxplot(x='laundry_options',y='price',data=data)\nplt.xticks(rotation=90)\nplt.show()","ba76c04f":"train['region'].value_counts()","f9f98291":"train['state'].value_counts()","224021a6":"data = train.copy()\ndata = data[data['price']<data['price'].quantile(0.9996)]\nplt.figure(figsize=(15,8))\nsns.countplot(data['state'])\nplt.title('state distribution',fontsize=12)\nplt.xticks(rotation=90)\nplt.show()","9df4de7a":"data = train.copy()\ndata.loc[data['state']=='ga'].sort_values(by='price',ascending=False).head() # remove the outlier","8cd0bdae":"train.drop(110953,inplace=True)\ntrain.loc[data['state']=='ga'].sort_values(by='price',ascending=False).head()","b4a04a86":"temp=pd.DataFrame(train.groupby('state')['price'].mean()).reset_index()\nplt.figure(figsize=(12,6))\nsns.barplot(x='state',y='price',data=temp)\nplt.xticks(rotation=90)","cf05284d":"fig, ax = plt.subplots(figsize=(15,12))\ncorr= data.corr()\nsns.heatmap(corr,annot=True,fmt='.1f',ax=ax,cmap='BrBG')\nsns.set(font_scale=1.45)\nplt.show()","5daa379c":"train=train[train['price']<train['price'].quantile(0.9996)]\ntrain=train[train['sqfeet']<train['sqfeet'].quantile(0.9996)]\ntrain.shape","66102cfc":"train.drop(train.index[train['sqfeet']==0],inplace=True)\ntrain.drop(train.index[train['price']==0],inplace=True)\ntrain.shape","c4e1763b":"# Let's create some useful feature","780635a9":"train['pp_sqfeet'] = train['price'] \/ train['sqfeet']\n\nprint('Correlation with price: {:.3f}'.format(train['price'].corr(train['pp_sqfeet'])))","eb67ec7c":"fig, ax = plt.subplots(figsize=(15,12))\ncorr= train.corr()\nsns.heatmap(corr,annot=True,fmt='.1f',ax=ax,cmap='BrBG')\nsns.set(font_scale=1.45)\nplt.show()","9bfdb61d":"plt.figure(figsize=(12,6))\n\nsns.distplot(train['pp_sqfeet'])\nplt.title('Skewness: {} and Kurtosis: {}'.format(train['pp_sqfeet'].skew(),train['pp_sqfeet'].kurtosis()))","d2b69ca6":"temp=pd.DataFrame(train.groupby('region')['pp_sqfeet'].mean()).reset_index()\ntemp.head()","2ce34ad2":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key,subdf in df.groupby('region'):\n        m=np.mean(subdf.pp_sqfeet)\n        st=np.std(subdf.pp_sqfeet)\n        reduced_df = subdf[(subdf.pp_sqfeet > (m-st)) & (subdf.pp_sqfeet <= (m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out","f58c0d8c":"data=train.copy()\ndata.shape","0b9f366a":"data=remove_pps_outliers(data)","b6bb2fc5":"data.shape","98bfd104":"data['pp_sqfeet'].describe()","1b2a241e":"# Lets find out the effect of removing outliers\n# our main dataframe train is not free from outliers and data dataframe has been treated with outlier","576a07d4":"fig=plt.figure(figsize=(12,6))\nax1=fig.add_subplot(121);\nsns.distplot(train['pp_sqfeet'])\nplt.title('Skewness: {:.3f} and Kurtosis: {:.3f}'.format(train['pp_sqfeet'].skew(),train['pp_sqfeet'].kurtosis()))\n\nax2=fig.add_subplot(122);\nsns.distplot(data['pp_sqfeet'])\nplt.title('Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['pp_sqfeet'].skew(),data['pp_sqfeet'].kurtosis()))\n\nprint('Correlation with price: {:.3f}'.format(train['price'].corr(train['pp_sqfeet'])))\nprint('Correlation with price: {:.3f}'.format(data['price'].corr(data['pp_sqfeet'])))\n\n# skewness and kurtosis have been substantially reduced. Also, Correlation has improved. ","ec2952c6":"fig=plt.figure(figsize=(12,6))\nax1=fig.add_subplot(121);\nsns.distplot(train['price'])\nplt.title('Skewness: {:.3f} and Kurtosis: {:.3f}'.format(train['price'].skew(),train['price'].kurtosis()))\n\nax2=fig.add_subplot(122);\nsns.distplot(data['price'])\nplt.title('Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['price'].skew(),data['price'].kurtosis()))\n\nprint('Correlation with price: {:.3f}'.format(train['price'].corr(train['sqfeet'])))\nprint('Correlation with price: {:.3f}'.format(data['price'].corr(data['sqfeet'])))\n\n# Also, we have improved on other numerical features","8237ee38":"fig=plt.figure(figsize=(12,6))\nax1=fig.add_subplot(121);\nsns.distplot(train['sqfeet'])\nplt.title('Skewness: {:.3f} and Kurtosis: {:.3f}'.format(train['sqfeet'].skew(),train['sqfeet'].kurtosis()))\n\nax2=fig.add_subplot(122);\nsns.distplot(data['sqfeet'])\nplt.title('Skewness: {:.3f} and Kurtosis: {:.3f}'.format(data['sqfeet'].skew(),data['sqfeet'].kurtosis()))\n","185d4429":"fig, ax = plt.subplots(figsize=(15,12))\ncorr= data.corr()\nsns.heatmap(corr,annot=True,fmt='.1f',ax=ax,cmap='BrBG')\nsns.set(font_scale=1.45)\nplt.show()","30db3b7c":"# Clearly, we have improved dataset data, now let us go ahead and remove outliers from our main dataset train","18dd6ba7":"train=remove_pps_outliers(train)\ntrain.shape","3bf2fd70":"train=train.loc[(train['beds']<9)] # houses with beds more than 9 are not useful, because we are trying to create more generalized model\ntrain.shape","ec38c07a":"train=train.loc[(train['baths']<9)] # houses with baths more than 9 are not useful, because we are trying to create more generalized model\ntrain.shape","3ad4fe2e":"temp= pd.DataFrame(train.groupby('beds')['sqfeet'].mean().reset_index())\ntemp['bedsbysqfeet']= temp['sqfeet']\/temp['beds'] \ntemp","33a21abc":"# creating new feature beds_X_feet\ndata=train.copy()\ndata['beds_x_sqfeet'] = data['beds'] * data['sqfeet']\n\nprint('Correlation with price: {:.3f}'.format(data['beds_x_sqfeet'].corr(data['price'])))\ndata.shape","09fa6ec0":"\ndata = data[data['beds']!=0]\ndata['sqfeet_p_bed'] = data['sqfeet'] \/ data['beds']\n\n\nprint('Correlation with price: {:.3f}'.format(data['sqfeet_p_bed'].corr(data['price'])))\ndata.shape","48351ffc":"# It is not usual that a bedroom has area less than 150 sqft. So, we are going to remove those from our dataset. By doing that we have improved our correlation of the feature beds_x_sqfeet  ","3c09cd08":"data.loc[data['sqfeet_p_bed']<150]","b2cdea0e":"data=data[data['sqfeet_p_bed']>150]","4a932c76":"print('Correlation with price: {:.3f}'.format(data['sqfeet_p_bed'].corr(data['price'])))\ndata.shape","86b9b382":"print('Correlation with price: {:.3f}'.format(data['beds_x_sqfeet'].corr(data['price'])))\ndata.shape","9323fad1":"data.loc[data['price']<50]","728f696e":"data=data[data['price']>50]\ndata.shape","08117705":"train['beds_x_sqfeet'] = train['beds'] * train['sqfeet']\ntrain= train[(train['sqfeet']\/train['beds'])>150]","c38a409e":"train.shape","958dc2ff":"print('Correlation with price: {:.3f}'.format(train['beds_x_sqfeet'].corr(train['price'])))","26ac6116":"train.pp_sqfeet.describe()","da9f5432":"fig, ax = plt.subplots(figsize=(15,12))\ncorr= train.corr()\nsns.heatmap(corr,annot=True,fmt='.1f',ax=ax,cmap='BrBG')\nsns.set(font_scale=1.45)\nplt.show()","00f744fd":"train.columns","be41bd3f":"data=train.copy()\ndata.shape","577fd0c3":"# creating new feature beds_x_baths\ndata['beds_x_baths'] = data['beds'] * data['baths']\nprint('Correlation: {:.3f}'.format(data['price'].corr(data['beds_x_baths'])))","1d8fe4c8":"data['beds_by_baths'] = data['beds'] \/ data['baths']\ndata.loc[data['beds_by_baths']==np.inf]\nprint('Correlation: {:.3f}'.format(data['price'].corr(data['beds_by_baths'])))","1f45e26c":"m=0\nsumm=0\nfor i in data['beds_by_baths']:\n    if i == np.Inf:\n        pass\n    else:\n        summ+=i\nm = summ\/len(data)\nm","7a20fd05":"data['beds_by_baths'].replace(np.Inf,m,inplace=True)","e7699301":"data.loc[data['beds_by_baths']==np.inf]","79f84ee7":"print('Correlation: {:.3f}'.format(data['price'].corr(data['beds_by_baths'])))","c4008552":"#usually there is no house with bathrooms greater than bedrooms. But for generalizing I have considered the difference to be less than one","1ae2c121":"data=data[~((data['baths']-data['beds'])>1)]","7a49d1ad":"print('Correlation: {:.3f}'.format(data['price'].corr(data['beds_x_baths'])))","258275b8":"fig, ax = plt.subplots(figsize=(15,12))\ncorr= data.corr()\nsns.heatmap(corr,annot=True,fmt='.1f',ax=ax,cmap='BrBG')\nsns.set(font_scale=1.45)\nplt.show()","336db3be":"train['beds_x_baths'] = train['beds'] * train['baths']","1664d2db":"train_unused = train[['url', 'region_url',  'image_url', 'description', 'lat',\n       'long']]","e1139cb9":"train = train[[ 'region', 'price', 'type', 'sqfeet', 'beds',\n       'baths', 'cats_allowed', 'dogs_allowed', 'smoking_allowed',\n       'wheelchair_access', 'electric_vehicle_charge', 'comes_furnished',\n       'laundry_options', 'parking_options','state', 'pp_sqfeet', 'beds_x_sqfeet','beds_x_baths']]","debece69":"details = analysis(train,'price')\ndetails","e92c044e":"for i in bool_features:\n    print(train[i].value_counts())","18998131":"# we transform the boolean features to categorical, as we are using Catboost Regressor\nfor col in bool_features:\n    train[col] = train[col].astype('object',copy=False)","1d50e634":"train['laundry_options']= train.groupby('type')['laundry_options'].transform(lambda i : i.fillna(i.mode()[0]))","c473bbbb":"train['parking_options']= train.groupby('type')['parking_options'].transform(lambda i : i.fillna(i.mode()[0]))","f0e088a5":"train[train['state'].isna()]","43716b70":"train.state[train['region']=='columbus'].head()","739ce220":"train['state']=train['state'].fillna('ga')","cf0e2058":"details = analysis(train,'price')\ndetails","91239af9":"y = train['price']\nX = train.copy()\nX.drop('price',axis=1,inplace=True)","e8eea5e9":"skew_data=details[abs(details['skewness'])> 0.75]\nskew_data.drop('price',inplace=True)\nskew_data.drop('cats_allowed',inplace=True)\nskew_data.drop('dogs_allowed',inplace=True)\nskew_data.drop('smoking_allowed',inplace=True)\nskew_data.drop('electric_vehicle_charge',inplace=True)\nskew_data.drop('comes_furnished',inplace=True)\nskew_data.drop('wheelchair_access',inplace=True)\n\nskew_data","2f445334":"# i dont understand why object types have skewness and kurtosis. It is woring fine in Jupyter Notebook","729efdc4":"\nfrom scipy.special import boxcox1p\nskewed_features = skew_data.index\nlam = 0.5\nfor feat in skewed_features:\n    train[feat] = boxcox1p(train[feat], lam)","b9217cdd":"details = analysis(train,'price')\ndetails","f63e2daa":"# splitting data\nfrom sklearn.model_selection import train_test_split\nX_train,X_test, y_train,y_test =train_test_split(X,y,train_size=0.75,random_state=25) ","bfdea256":"categorical_features_indices = np.where(X.dtypes == 'object')[0]","cb887b6b":"categorical_features_indices","c26050c1":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor(iterations=50, depth=3, learning_rate=0.25, loss_function='RMSE')\nmodel.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_test, y_test),plot=True)","33eabee4":"y_prdeict = model.predict(X_test)\n","6a41e9aa":"y_test.head()","a6ab5f15":"y_prdeict[:5]","fc9de344":"model.score(X_test,y_test)","91cb0dcc":"#### Types of data\nInt : 10  \nfloat : 3   \nobject : 9\n\n#### Highly skewed and heavy tail distributed features:\nprice  \nbeds   \nsqfeet  \nbath   \nelectric_vehicle_charge  \npossibly outliers  \nWe may apply boxcox or log transformation on the above feature\n\n#### Features with Null values:\nlaundry_options  \nparking_options\t   \ndescription  \nlat  \nlong  \nstate  \n\nNo much correlation between independent features and target\n","04bb763a":"### Analyzing Bath Feature","3d6e9855":"## Feature Engineering and Outlier Removal","7183e806":"The feature sqfeet is highly positively skewed and has a heavy tailed distribution. There is high probability of outliers presence.","74a5c6c6":"### Analyzing categorical featuress","333f93a2":"####  Analyzing parking_options Feature","0df5fdea":"### Correlation heatmap","0a568c74":"From the above figure, it is evident that there is almost 0 correlations among the features. We will try to remove the outliers inorder to make features useful for our model","df1188d0":"### Applying boxcox1p transformation to skewed features","80140f2d":"####  Analyzing region Feature","7016a122":"## Handle Missing Data","d5a8d0c8":"## Import Packages & Load Data","4dd687c1":"# Exploratory Data Analysis","17d418e1":"### Analyzing boolean features","9ec20488":"####  Analyzing state Feature","e8fbd793":"#### Analyzing Type Feature","c438c427":"### Analyzing Sqfeet feature","8659cb11":"### Analyzing beds feature","c80dafc7":"### Removing outliers using pp_sqfeet","86e51582":"####  Analyzing laundry_options Feature","cb6bd3c7":"## Model using CatBoost Regressor"}}