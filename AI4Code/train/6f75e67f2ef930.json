{"cell_type":{"d259daff":"code","248e56e5":"code","b015b9f0":"code","86ef9ee9":"code","aea4fd62":"code","87a44506":"markdown"},"source":{"d259daff":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport re\nimport time","248e56e5":"# data for running each day\nstart_time = time.time()\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\ndf_deaths_Canada = df_deaths.loc[df_deaths['Country\/Region'] == 'Canada'].reset_index(drop = True)\ndf_deaths_Canada = df_deaths_Canada.append(df_deaths_Canada.sum(axis=0).to_frame().transpose(), ignore_index = True)\ndf_deaths_Canada['Province\/State'][len(df_deaths_Canada['Province\/State'])-1] = 'total'\ndf_deaths_Canada.drop(['Country\/Region', 'Lat', 'Long'], axis = 1, inplace = True)\ndeath_today = df_deaths_Canada.iloc[-1,:][-1] # all deaths until today\ndeath_2wbefore = df_deaths_Canada.iloc[-1,:][-14] #deaths until 2weeks before\ndeath_2w = death_today - death_2wbefore #deaths between 2 weeks\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","b015b9f0":"# data for running once\nstart_time = time.time()\ndt_factors = pd.read_csv('..\/input\/canada-covid19-risk-factors\/risk factor.csv')\n#correction of data\ndt_factors['Unnamed: 0'][1] = 'Total'\ndt_factors['Unnamed: 0'][0] = 'Column_name'\npattern = re.compile(r'\\d+')\nresult = int(''.join(pattern.findall('N=5,416')))\nfor name in dt_factors.columns.tolist()[1:]:\n    dt_factors[name][1] = int(''.join(pattern.findall(str(dt_factors[name][1]))))\ndt_factors = dt_factors.fillna(0)\nresearched_name = ['Column_name', 'Total','Hypertension','Coronary Artery Disease', 'History of Stroke', 'Diabets', 'Obesity', 'Chronic Kidney Disease', 'Asthma ', 'COPD']\nresearched_data = [0,0,.23,.085,.026,.081,.64,.134,.81,.04]\nresearched_dic = {researched_name[i]: researched_data[i] for i in range(len(researched_name))}\ndt_factors_researched = dt_factors.copy()\n\ndt_factors_researched = dt_factors_researched.loc[dt_factors_researched['Unnamed: 0'].isin(researched_name)]\ndt_factors_researched.loc[dt_factors_researched['Unnamed: 0'] == 'History of Stroke']['Unnamed: 1']\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","86ef9ee9":"#parameters and functions before final calculator\nstart_time = time.time()\n#efficiency mask parameters %\nhomemade_mask_E = [58, (58+77)\/2, 77]\nsurgical_mask_E = [72, (72+85)\/2, 85]\nN95_mask_E = [98, 98.5, 99]\n\n#death rate VS efficiency\nefficiency = [20, 50, 80]\ndeath_rate = [5.4, 31.1, 64.5]\n\n#function of efficiency and death rate\nE_D_func = lambda efficiency: (77\/18000 * efficiency ** 2 + 1003\/1800 * efficiency - 671\/90) \/ 100\n\ntype_mask_list = ['homemade', 'surgical', 'N95']\nwear_mask_list_choice = ['seldom', 'normal', 'always', 'every time']\nwear_mask_list = [.2, .5, .8, 1]\nwear_mask_dic = {wear_mask_list_choice[i]: wear_mask_list[i] for i in range(len(wear_mask_list_choice))}\n\nsolution_optimal_list = ['worst', 'normal', 'best']\nsolution_optimal_loc = [0,1,2]\nsolution_optimal_dic = {solution_optimal_list[i]: solution_optimal_loc[i] for i in range(len(solution_optimal_list))}\n\ndef mask_efficiency(type_mask, solution_optimal):\n    \n    #masks efficiency\n    homemade_mask_E = [58, (58+77)\/2, 77]\n    surgical_mask_E = [72, (72+85)\/2, 85]\n    N95_mask_E = [98, 98.5, 99]\n\n    if type_mask == 'homemade':\n        return homemade_mask_E[solution_optimal_dic[solution_optimal]]\n\n    if type_mask == 'surgical':\n        return surgical_mask_E[solution_optimal_dic[solution_optimal]]\n    \n    if type_mask == 'N95':\n        return N95_mask_E[solution_optimal_dic[solution_optimal]]\n    \ndef wear_mask_func(wear_mask):\n    if wear_mask == 'seldom':\n        return wear_mask_list[0]\n\n    if wear_mask == 'normal':\n        return wear_mask_list[1]\n    \n    if wear_mask == 'always':\n        return wear_mask_list[2]\n    \n    if wear_mask == 'every time':\n        return wear_mask_list[3]\n\ndef mask(type_mask, wear_mask, solution_optimal, E_D_func = E_D_func):\n    # input: masks information and function \n    # input example: N95, 20%, best, E_D_func\n    # output: solution to customers\n    \n    #error\n    if solution_optimal not in solution_optimal_list or type_mask not in type_mask_list or wear_mask not in wear_mask_list_choice:\n        print ('Raise error')\n        return None\n    \n    #masks efficiency\n    mask_eff = mask_efficiency(type_mask, solution_optimal)\n    \n    death_rate_reduction = E_D_func(mask_eff * wear_mask_func(wear_mask))\n    \n    return death_rate_reduction\n\nsocial_distance_choice = ['Stay at home', 'Working full time', 'Close School', 'Distance Travelled from home']\nsocial_distance_answer = [-.45, .85, -.60, .25]\nsocial_distance_dic = {social_distance_choice[i]: social_distance_answer[i] for i in range(len(social_distance_choice))}\n\ndef social_distance(death_rate, choice_list = [False, False, False, False]):\n    #input: death rate, choice(e.g: [True, True, False, True])\n    #output: death rate after analysis\n    for choice_pos in range(len(choice_list)):\n        if choice_list[choice_pos] != False:\n            death_rate = death_rate * (1 + social_distance_answer[choice_pos])\n    return death_rate \n\ndef other_factor(dt_factors_researched, disease = None, age = None, sex = None, race = None):\n    if disease is None:\n        return 1\n    infect_rate_infected = int(dt_factors_researched.loc[dt_factors_researched['Unnamed: 0'] == disease]['Unnamed: 1']) \/ 5416\n    #print('infect rate infected:', infect_rate_infected)\n    infect_rate_notinfected = researched_dic[disease]\n    #print('infect rate notinfected:', infect_rate_notinfected)\n    infect_rate_increase_rate = infect_rate_infected \/ infect_rate_notinfected\n    return infect_rate_increase_rate\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","aea4fd62":"#final calculator\nstart_time = time.time()\ndef calculator(type_mask, wear_mask, solution_optimal, choice_list = [False, False, False, False], dt_factors_researched = dt_factors_researched, E_D_func = E_D_func, disease = None):\n\n    default_reduction = .5 #suppose currently, how much death rate reduction Canada already did\n    death_rate_mask = mask(type_mask, wear_mask, solution_optimal, E_D_func = E_D_func)\n    death_rate_SD = social_distance(death_rate_mask, choice_list)\n    death_rate_final = death_rate_SD * other_factor(dt_factors_researched, disease) - default_reduction\n    print('The reduction of death rate is {}% for {} masks, for people who {} wear masks. This solution is the {} choice.'.format(round(death_rate_final,2)*100, type_mask, wear_mask, solution_optimal))\n    print('By this solution, in Canada, there is {} reduction of people''s death due to the whole Covid-19, {} reduction of people''s death during the last two weeks.'.format(round(death_today * death_rate_final, 0), round(death_2w * death_rate_final, 0)))\n    \n    return death_rate_final\n    \n    \ncalculator('homemade', 'always', 'normal', [True, True, False, True], disease = 'History of Stroke') \nprint(\"--- %s seconds ---\" % (time.time() - start_time))\nstart_time = time.time()\ncalculator('homemade', 'seldom', 'worst')   \nprint(\"--- %s seconds ---\" % (time.time() - start_time))","87a44506":"# comment:\n# type_mask: 'homemade', 'surgical', 'N95'\n# wear_mask: 'seldom', 'normal', 'always', 'every time'\n# solution_optimal: 'worst', 'normal', 'best'\n# choice_list: [False, False, False, False] or [True, False, True, False] \n# (['Stay at home', 'Working full time', 'Close School', 'Distance Travelled from home'])"}}