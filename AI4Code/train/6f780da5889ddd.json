{"cell_type":{"a6143815":"code","e51c8e0c":"code","c2389f37":"code","45ce3711":"code","49282339":"code","5fde9ff3":"code","c3ba0f4a":"code","427aea53":"markdown"},"source":{"a6143815":"import os\n\nfrom PIL import Image\nimport pandas as pd\nfrom tqdm.auto import tqdm","e51c8e0c":"import numpy as np\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\ndef read_xray(path, voi_lut = True, fix_monochrome = True):\n    # Original from: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n    dicom = pydicom.read_file(path)\n    \n    # VOI LUT (if available by DICOM device) is used to transform raw DICOM data to \n    # \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n               \n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data","c2389f37":"def resize(array, size, keep_ratio=False, resample=Image.LANCZOS):\n    # Original from: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image\n    im = Image.fromarray(array)\n    \n    if keep_ratio:\n        im.thumbnail((size, size), resample)\n    else:\n        im = im.resize((size, size), resample)\n    \n    return im","45ce3711":"image_id = []\ndim0 = []\ndim1 = []\n\n#for split in ['train', 'test']:\nfor split in ['test']:\n    load_dir = f'..\/input\/vinbigdata-chest-xray-abnormalities-detection\/{split}\/'\n    save_dir = f'\/kaggle\/tmp\/{split}\/'\n\n    os.makedirs(save_dir, exist_ok=True)\n\n    for file in tqdm(os.listdir(load_dir)):\n        # set keep_ratio=True to have original aspect ratio\n        xray = read_xray(load_dir + file)\n        #im = resize(xray, size=256)  \n        #im.save(save_dir + file.replace('dicom', 'png'))\n        \n        image_id.append(file.replace('.dicom', ''))\n        dim0.append(xray.shape[0])\n        dim1.append(xray.shape[1])","49282339":"file_list = os.listdir(load_dir)","5fde9ff3":"from joblib import Parallel, delayed\n\ndef load_meta(load_dir: str, file: str):\n    xray = read_xray(load_dir + file, False, False)\n    image_id = file.replace('.dicom', '')\n    height, width = xray.shape[:2]\n    return image_id, height, width\n\nprint(f\"total {len(file_list)}\")\nn_jobs = 16\nresults = Parallel(n_jobs, verbose=1)(\n    delayed(load_meta)(load_dir, filename) for filename in file_list)","c3ba0f4a":"test_meta = pd.DataFrame(results, columns=[\"image_id\", \"dim0\", \"dim1\"])\ntest_meta.to_csv(\"test_meta.csv\", index=False)","427aea53":"**By using the output of this notebook, you are accepting the [competition rules](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/rules).**\n\n\n**This is originally from https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-png-256x256 by @xhlulu, I just modified a bit to save metadata for test images**\n\n## References\n\n- Monochrome fix and scaling: https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way\n- Resizing and saving image: https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-process-and-resize-to-image"}}