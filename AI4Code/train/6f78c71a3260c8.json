{"cell_type":{"b866d979":"code","ada8e6f5":"code","2df7f26b":"code","113f5fe5":"code","bd31f3e5":"code","89b25246":"code","3cb931b8":"code","c51d66c8":"code","0323fd52":"code","f2360564":"code","029b6a28":"code","503d4cbe":"code","b2f3dd4d":"code","1f7faf10":"code","3fd47f58":"code","fe471580":"code","201cf433":"code","b635d574":"code","f828c718":"code","9bc311ce":"code","ae1ecabd":"code","7ced8d9b":"code","cbdcd176":"code","fd7ae775":"code","06ec1839":"code","a6455fb1":"code","e26849cc":"code","99d3617a":"code","f71b0e11":"code","9b85513f":"code","7f81ec38":"code","69aef72b":"markdown","55a043b2":"markdown","5107db3c":"markdown","702ecf38":"markdown","e739067c":"markdown","54247c9f":"markdown"},"source":{"b866d979":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ada8e6f5":"!pip install plotly","2df7f26b":"#plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n#word cloud library\nfrom wordcloud import WordCloud\n\n#matplotlib\nimport matplotlib.pyplot as plt\n\n# warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","113f5fe5":"print(os.listdir(\"..\/input\"))","bd31f3e5":"timesData=pd.read_csv(\"..\/input\/world-university-rankings\/timesData.csv\")","89b25246":"timesData.info()","3cb931b8":"timesData.head(10)","c51d66c8":"timesData.tail(10)","0323fd52":"df=timesData.iloc[:100,:]","f2360564":"df.shape","029b6a28":"import plotly.graph_objs as go","503d4cbe":"# creating trace 1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = \"rgb(16, 112, 2)\"),\n                    text = df.university_name)\n# creating trace 2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines + markers\",\n                    name = \"teaching\",\n                    marker = dict(color = \"rgb(80,26,80)\"),\n                    text = df.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = \"Citation and Teaching vs Work Rank of Top 100 Universities\",\n                    xaxis = dict(title = \"World Rank\", ticklen = 5, zeroline = False))\nfig = dict(data = data, layout = layout)\niplot(fig)\n","b2f3dd4d":"# prepare data drames\ndf2014 = timesData[timesData.year == 2014].iloc[:100, :]\ndf2015 = timesData[timesData.year == 2015].iloc[:100, :]\ndf2016 = timesData[timesData.year == 2016].iloc[:100, :]","1f7faf10":"# creating trace 1\ntrace1 = go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = \"rgb(255,128,255)\"),\n                    text = df2014.university_name)\n# creating trace 2\ntrace2 = go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = \"rgb(255,128,2)\"),\n                    text = df2015.university_name)\n# creating trace 3\ntrace3 = go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = \"rgb(0,255,200)\"),\n                    text = df2016.university_name)\ndata = [trace1,trace2,trace3]\nlayout = dict(title = \"Citation vs Work Rank of Top 100 Universities 2014,2015,2016\",\n                    xaxis = dict(title = \"World Rank\", ticklen = 7, zeroline = True),\n                    yaxis = dict(title = \"Citation\", ticklen = 7, zeroline = True))\nfig = dict(data = data, layout = layout)\niplot(fig)\n","3fd47f58":"df2014","fe471580":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]","201cf433":"df2014","b635d574":"# create trace 1\n\ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                marker = dict(color = \"rgb(255, 174, 255)\",\n                             line = dict(color = \"rgb(0,0,0)\",width = 1.5)),\n                text = df2014.country)\n# create trace 1\ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name =\"teaching\",\n                marker = dict(color = \"rgb(255, 255, 128)\",\n                             line = dict(color = \"rgb(0,0,0)\",width = 1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode =\"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","f828c718":"x = df2014.university_name\ntrace1 = {\n    \"x\" : x,\n    \"y\" : df2014.citations,\n    \"name\" : \"citation\",\n    \"type\" : \"bar\"\n};\ntrace2 = {\n    \"x\" : x,\n    \"y\" : df2014.teaching,\n    \"name\" : \"teaching\",\n    \"type\" : \"bar\"\n};\ndata = [trace1, trace2];\nlayout = {\n    \"xaxis\" : {\"title\" : \"Top 3 Universities\"},\n    \"barmode\" : \"relative\",\n    \"title\" : \"citations and teaching of top 3 universities in 2014\"\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n\n","9bc311ce":"#data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\ndf2016","ae1ecabd":"pie1 = df2016.num_students\npie1_list = [float(each.replace(\",\",\".\"))for each in df2016.num_students]\npie1_list ","7ced8d9b":"labels = df2016.university_name\n# figure\nfig = {\n    \"data\" : [\n        {\n            \"values\" : pie1_list,\n            \"labels\" : labels,\n            \"domain\" : {\"x\": [0, .5]},\n            \"name\" : \"Number Of Students Rates\",\n            \"hoverinfo\" : \"label + percent + name\",\n            \"hole\" : .3,\n            \"type\" : \"pie\"\n        },\n    ],\n    \"layout\" : {\n        \"title\" : \"Universites Number of Students rates\",\n        \"annotations\" : [\n            {\"font\" : {\"size\" : 20},\n             \"text\" : \"Number of Students\",\n             \"x\" : 0.2,\n             \"y\" : 1\n            },\n        ]\n    }\n}\niplot(fig)\n","cbdcd176":"df2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size = [float(each.replace(\",\", \".\")) for each in df2016.num_students]\nnum_students_size","fd7ae775":"\ndf2016.international\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        \"y\" : df2016.teaching,\n        \"x\" : df2016.world_rank,\n        \"mode\" : \"markers\",\n        \"marker\" : {\n            \"color\" : international_color,\n            \"size\" : num_students_size,\n            \"showscale\" : True\n        },\n        \"text\" : df2016.university_name\n    }\n]\niplot(data)\n","06ec1839":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]","a6455fb1":"x2012","e26849cc":"trace1 = go.Histogram(\n        x = x2011,\n        opacity = 0.75,\n        name = \"2011\",\n        marker = dict(color= \"rgba(171, 50, 96, 0.6)\"))\ntrace2 = go.Histogram(\n        x = x2012,\n        opacity = 0.75,\n        name = \"2012\",\n        marker = dict(color = \"rgba(12, 50, 196, 0.4)\"))\ndata = [trace1, trace2]\nlayout = go.Layout(\n                barmode = \"overlay\",\n                title = \" Student staff ratio in 2011 and 2012\",\n                xaxis = dict(title = \"students-staff ratio\"),\n                yaxis = dict(title = \"Count\"),)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n\n","99d3617a":"x2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize = (8, 8))\nwordcloud = WordCloud(\n                        background_color= \"white\",\n                        width = 512,\n                        height= 384).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","f71b0e11":"x2015 = timesData[timesData.year == 2015]\ntrace1 = go.Box(\n                y = x2015.total_score,\n                name = \"total score of universities in 2015\",\n                marker = dict(color = \"rgb(12, 12, 140)\",\n                             )\n)\ntrace2 = go.Box(\n                y = x2015.research,\n                name = \"research of universities in 2015\",\n                marker = dict(\n                    color = \"rgb(12, 128, 128)\",))\ndata = [trace1, trace2]\niplot(data)\n","9b85513f":"# first line plot\ntrace1 = go.Scatter(\n        x = df2015.world_rank,\n        y = df2015.teaching,\n        name = \"teaching\",\n        marker = dict(color = \"rgb(16, 112, 2)\"),)\n# second line plot\ntrace2 = go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.income,\n                    xaxis = \"x2\",\n                    yaxis = \"y2\",\n                    name = \"income\",\n                    marker = dict(color = \"rgb(160, 112, 20)\"),)\ndata = [trace1, trace2]\nlayout = go.Layout(\n                xaxis2 = dict(\n                domain = [0.6, 0.95],\n                anchor = \"y2\"),\n                yaxis2 = dict(\n                domain = [0.6, 0.95],\n                anchor = \"x2\"),\n                title = \"income and teaching vs world rank of universities\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","7f81ec38":"trace1 = go.Scatter3d(\n                    x = df2015.world_rank,\n                    y = df2015.research,\n                    z = df2015.citations,\n                    mode = \"markers\",\n                    marker = dict(size = 4, color = \"rgb(255, 0, 0)\",))\ndata = [trace1]\nlayout = go.Layout(\n                margin = dict( l = 0, r = 0, b = 0, t = 0))\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","69aef72b":"# Bubble Charts","55a043b2":"# 3d","5107db3c":"# Word Cloud","702ecf38":"##Scatter Charts","e739067c":"## line Charts\n\nLine Charts Example : Citation and Teaching vs World arank of Top 1000 Universities\nimport graph_objs as go\nCreating traces\nx = x axis\ny = y axis\nmode = type of plot like marker, line or line + marker\nname = name of the plots\nmarker = marker is used with dictionary\ncolor = color of lines RGB(red, green, blue)\ntext = chart text\ndata = is a list that we add traces into it\nlayout = it is dictionary\ntitle = title of layout\nx axis\ntitle = title of x axis\nticklen = length of x axis ticks\nzeroline = showing zeroline or no\nfig = it includes data and layout\niplot = plots the figure(fig)\n            \n    ","54247c9f":"Pie Chart"}}