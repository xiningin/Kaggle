{"cell_type":{"0d0e4221":"code","ba0ba83b":"code","3156f300":"code","b9e97977":"code","047be48a":"code","73802a3f":"code","42bac9ea":"code","0fda9f4e":"code","01b0a4a5":"code","68d5b2b4":"code","f04b8f71":"code","50746f72":"code","48133202":"code","1b45b382":"code","f6c401cc":"code","5af88120":"code","72acec8d":"code","c77ecb97":"code","57bb7066":"code","4117c108":"code","91011dfa":"code","5dd5e6d2":"code","36adfdc5":"code","dfaf728d":"code","c90c9238":"code","9e96cbd9":"code","338364e3":"code","b293ef40":"code","23308ef2":"code","c271d585":"code","b322a33f":"code","38bbc385":"code","d5fe3907":"code","8285e9da":"code","353a4b6f":"code","de16a977":"code","67b6a4de":"code","1d476748":"code","cb83d253":"code","ea72e54e":"code","05fd3a7b":"code","d8f8a0cd":"code","4ef7433e":"markdown","befd86f8":"markdown","f7c2d4f0":"markdown","48ce4e19":"markdown","a86de27a":"markdown","44aa0740":"markdown","7436d796":"markdown","508f6eab":"markdown","753954d3":"markdown"},"source":{"0d0e4221":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ba0ba83b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import kurtosis\nfrom datetime import datetime\ndata_covit19 = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata_covit19","3156f300":"def check_null(dataset):\n    print(\"--------Null columns--------\")\n    null_columns=dataset.columns[dataset.isnull().any()]\n    total_null = dataset[null_columns].isnull().sum()\n    print(null_columns, total_null)\n    return null_columns, total_null\n    \ndef fill_missing(dataset, value,null_columns, column = None):\n    print(\"--------Fill missing data with columns--------\")\n    dataset[null_columns] =dataset[null_columns].fillna('missing')\n    \nnull_cols, total = check_null(data_covit19)\nfill_missing(data_covit19, \"missing\", null_cols)\nnull_cols, total = check_null(data_covit19)","b9e97977":"def histogram(column_name, data):\n    plt.figure(figsize=(30,30))\n    labels, counts = np.unique(data[column_name], return_counts=True)\n    plt.bar(labels, counts, align='center')\n    plt.gca().set_xticks(labels)\n    plt.title(\"Histogram {} \".format(column_name) )\n    plt.xticks(rotation='vertical')\n    plt.show()\n   \n\n# No funciona solo estoy colocando metodos\ndef stemp(column_name_x, column_name_y, data):\n    plt.figure(figsize=(30,30))\n    _ = plt.stem(data[column_name_x],data[column_name_y], use_line_collection=True)\n    plt.title(\"Stem {} vs {} \".format(column_name_x,column_name_y) )\n    plt.xticks(rotation='vertical')\n    plt.show()\n\ndef boxplot(column_name, data):\n    sns.set(style=\"whitegrid\")\n    if type(data[column_name][0]) is not str:\n        ax = sns.boxplot(x=data[column_name])","047be48a":"data_covit19.describe()\n","73802a3f":"data_covit19.describe(include=['object'])","42bac9ea":"columns_to_show = ['ObservationDate', 'Country\/Region']\ndata_covit19.groupby(['Confirmed'])[columns_to_show].describe(percentiles=[])","0fda9f4e":"columns_to_show = ['Last Update', 'Country\/Region']\ndata_covit19.groupby(['Confirmed'])[columns_to_show].describe(percentiles=[])","01b0a4a5":"numeric_data = data_covit19.select_dtypes(include = [\"number\"])\ndef groupCount(column_name, data):\n    print(data.groupby(column_name).size())\n\ndef frecuency(column_name, data):\n    print(100 * data.groupby(column_name).size() \/ data.shape[0] )\n\nexclude = [\"SNo\"]\n    \nfor name in data_covit19.columns:\n    if not name in exclude and name in numeric_data:      \n        print(\"##### Conteo #####\")\n        groupCount(name, data_covit19)\n        print(\"##### Frecuencia #####\")\n        frecuency(name, data_covit19)    \n        \ndef kurtosisFisher(column_name, data):\n    print(\"Kurtosis Fisher:\",kurtosis(data[column_name]))\n    print(\"Kurtosis:\",kurtosis(data[column_name], fisher = False))\n\nprint(\"##### skewness #####\")\nprint(data_covit19.skew(axis = 0))\nfor name in numeric_data.columns:\n    print(\"#####\", name, \"######\")    \n    kurtosisFisher(name, numeric_data)","68d5b2b4":"exclude = [\"SNo\", \"ObservationDate\" ,\"Recovered\",\"Confirmed\",\"Deaths\",\"Last Update\"]\nfor name in data_covit19.columns:\n    if not name in exclude:\n        print(name)\n        histogram(name, data_covit19)\n        boxplot(name, data_covit19)\n","f04b8f71":"def histogram_incomplete(column_name, data, number_elements):\n    plt.figure(figsize=(30,30))\n    labels, counts = np.unique(data[column_name], return_counts=True)\n    counts, labels = zip(*sorted(zip(counts, labels)))\n    print(counts[-number_elements:])\n    print(labels[-number_elements:])\n    plt.bar(labels[-number_elements:], counts[-number_elements:], align='center')\n    plt.gca().set_xticks(labels[-number_elements:])\n    plt.title(\"Histogram {} \".format(column_name) )\n    plt.xticks(rotation='vertical')\n    plt.show()\n\ninclude = [\"Country\/Region\", \"Province\/State\"]\nfor name in data_covit19.columns:\n    if name in include:\n        histogram_incomplete(name, data_covit19,10)","50746f72":"data_covit19.cov()","48133202":"data_covit19.corr()","1b45b382":"stemp(\"ObservationDate\", \"Recovered\", data_covit19)\nstemp(\"ObservationDate\", \"Deaths\", data_covit19)\nstemp(\"ObservationDate\", \"Confirmed\", data_covit19)","f6c401cc":"def plot_total(country, metric):\n    dates= []\n    total = []\n    for date, df_date in country.groupby(\"ObservationDate\"):\n        subset_df = df_date[df_date[\"ObservationDate\"] == date]\n        dates.append(date)\n        total.append(subset_df.sum()[metric])\n    return dates, total\n\ndef plot_line(country_name, metric, show_state = False, show=True):\n    country = data_covit19[data_covit19[\"Country\/Region\"] == country_name]\n    #print(country['Province\/State'][\"missing\"])\n    plt.figure(figsize=(30,30))\n    if show_state:\n        for region, df_region in country.groupby('Province\/State'):\n            if region == \"missing\":\n                region = country_name\n            plt.plot(df_region[\"ObservationDate\"],df_region[metric], '*-',label=region)\n    else:\n        dates= []\n        total = []\n        if show:\n            dates, total = plot_total(country, metric)\n            plt.plot(dates,total,'*-',label=country_name+\"-\"+metric)\n        else:\n            for i in [\"Deaths\",\"Confirmed\",\"Recovered\"]:\n                dates, total = plot_total(country, i)\n                plt.plot(dates,total,'*-',label=country_name+\"-\"+i)\n    plt.legend()\n    plt.xticks(rotation='vertical')\n    plt.show()\n\nplot_line(\"Mainland China\", \"Deaths\")\nplot_line(\"US\", \"Deaths\")\nplot_line(\"Colombia\", \"Deaths\")\nplot_line(\"Ecuador\", \"Deaths\")","5af88120":"plot_line(\"Mainland China\", \"Confirmed\")\nplot_line(\"US\", \"Confirmed\")\nplot_line(\"Colombia\", \"Confirmed\")\nplot_line(\"Ecuador\", \"Confirmed\")","72acec8d":"plot_line(\"Mainland China\", \"Recovered\")\nplot_line(\"US\", \"Recovered\")\nplot_line(\"Colombia\", \"Recovered\")\nplot_line(\"Ecuador\", \"Recovered\")","c77ecb97":"plot_line(\"Mainland China\", \"Recovered\",show=False)\n","57bb7066":"plot_line(\"US\", \"Recovered\",show=False)\n","4117c108":"plot_line(\"Colombia\", \"Recovered\",show=False)\n","91011dfa":"plot_line(\"Ecuador\", \"Recovered\",show=False)","5dd5e6d2":"plot_line(\"Italy\", \"Recovered\",show=False)\nplot_line(\"Spain\", \"Recovered\",show=False)","36adfdc5":"#Fijar \ndata_covit19_full = data_covit19\n#Manejar SNo como \u00edndice\ndata_covit19_full.set_index(\"SNo\", inplace=True)\ndata_covit19_day = data_covit19_full[data_covit19_full[\"ObservationDate\"] == \"04\/20\/2020\"]","dfaf728d":"print(data_covit19.shape)\nprint(data_covit19_full.shape)\nprint(data_covit19_day.shape)","c90c9238":"data_covit19.info()\n#data_covit19_day.info()","9e96cbd9":"def plot_totals():    \n    #plt.figure(figsize=(30,30))    \n    data_covit19_full.groupby('ObservationDate').sum()[\"Confirmed\"].plot()\n    data_covit19_full.groupby('ObservationDate').sum()[\"Deaths\"].plot() \n    data_covit19_full.groupby('ObservationDate').sum()[\"Recovered\"].plot() \n    plt.legend()\n    plt.xticks(rotation='vertical')\n    plt.show()\nplot_totals()","338364e3":"#print(data_covit19_full.describe())\ndata_covit19_day.describe().round()","b293ef40":"data_covit19_day.var()","23308ef2":"data_covit19_day.skew().round(1)","c271d585":"data_covit19_day.kurtosis().round(1)","b322a33f":"print(data_covit19_full.cov())\nprint(data_covit19_day.cov())","38bbc385":"print(data_covit19_full.corr())\nprint(data_covit19_day.corr())","d5fe3907":"#Histogramas\ndef histogramas (column_name, data, bins, range, median):\n    plt.hist(data[column_name], bins, (0, range))\n    plt.axvline(x=median, label = \"median\", linewidth = 1, color = \"red\")\n    plt.title(\"Histogram of {} \".format(column_name))\n    plt.legend()\n    plt.show()","8285e9da":"#histogramas(\"Confirmed\", data_covit19_full, 30, 3077, 582, )\n#histogramas(\"Deaths\", data_covit19_full, 30, 30)\n#histogramas(\"Recovered\", data_covit19_full, 30, 30)","353a4b6f":"histogramas(\"Confirmed\", data_covit19_day, 30, 3077, 582)\nhistogramas(\"Deaths\", data_covit19_day, 20, 101, 9)\nhistogramas(\"Recovered\", data_covit19_day, 20, 339, 48)","de16a977":"#Diagramas caja\ndef diagramasCaja (column_name, data, median, mean):\n    plt.figure(figsize=(3,4))\n    plt.boxplot(data[column_name])\n    plt.axhline(y=mean, label = \"mean\", linewidth = 1, color = \"blue\")    \n    plt.axhline(y=median, label = \"median\", linewidth = 1, color = \"orange\")    \n    plt.title(\"Boxplot of {} \".format(column_name))\n    plt.legend()\n    plt.show()\n    \ndef diagramasCaja2 (column_name, data, range):\n    plt.figure(figsize=(2,4))    \n    plt.boxplot(data[column_name])\n    plt.title(\"Boxplot of {} \".format(column_name))\n    if range != 0:\n        plt.ylim(0, range)  \n    plt.show()","67b6a4de":"diagramasCaja(\"Confirmed\", data_covit19_day, 582, 7726)\ndiagramasCaja2(\"Confirmed\", data_covit19_day, 7750)\ndiagramasCaja(\"Deaths\", data_covit19_day, 9, 531)\ndiagramasCaja2(\"Deaths\", data_covit19_day, 260)\ndiagramasCaja(\"Recovered\", data_covit19_day, 48, 2018)\ndiagramasCaja2(\"Recovered\", data_covit19_day, 850)","1d476748":"data_covit19_day.cov().round()","cb83d253":"data_covit19_day.corr().round(2)","ea72e54e":"#Correlation\ndef correlation (column_nameA, column_nameB, data, maxA, maxB):\n    plt.plot([0, maxA], [0, maxB], linewidth = 1, color = \"blue\")\n    plt.scatter(data[column_nameA], data[column_nameB], s = 10, color = 'red')\n    #Definir t\u00edtulo y nombres de ejes\n    plt.title(\"Scatter of {} - {}\".format(column_nameA, column_nameB))\n    plt.xlabel(column_nameA)\n    plt.ylabel(column_nameB)\n    #Mostrar leyenda y figura\n    plt.show()","05fd3a7b":"correlation(\"Confirmed\", \"Deaths\", data_covit19_day, 253060, 24114)\ncorrelation(\"Confirmed\", \"Recovered\", data_covit19_day, 253060, 91500)\ncorrelation(\"Recovered\", \"Deaths\", data_covit19_day, 91500, 24114)","d8f8a0cd":"def upperWhisker(column_name, data):\n    iqr = data[column_name].quantile(0.75).round() - data[column_name].quantile(0.25).round()   \n    upperWhisker = (1.5 * iqr) + data[column_name].quantile(0.75).round()\n    loco = data[column_name][data[column_name] > upperWhisker] \n    print(loco.shape)\n\nupperWhisker(\"Confirmed\", data_covit19_day)\nupperWhisker(\"Deaths\", data_covit19_day) \nupperWhisker(\"Recovered\", data_covit19_day) ","4ef7433e":"**skewness**","befd86f8":"# MULTIVARIABLE","f7c2d4f0":"## Covarianc","48ce4e19":"## Correlation","a86de27a":"# Statistical Tests","44aa0740":"# **Pruebas**","7436d796":"**Kurtois**","508f6eab":"# Tabulate and fill missing data","753954d3":"## Relation stemp"}}