{"cell_type":{"1cfe51b5":"code","05119c69":"code","c6e8671e":"code","4fcf3a6f":"code","6fa71e38":"code","735b1cd2":"code","c503d804":"code","5be138ee":"code","68b786c1":"code","85498813":"code","a184f9b0":"code","6d102e69":"markdown"},"source":{"1cfe51b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","05119c69":"import pandas as pd\n\n#I have decided to use a chunksize of 100000 here, but you could reduce it easily to 10k\n\nchunksize = 100000\nfor true in pd.read_csv(\"\/kaggle\/input\/fake-and-real-news-dataset\/True.csv\", chunksize=chunksize):\n    print(true.shape)\n \ntrue['category'] = 1\n\nfor fake in pd.read_csv(\"\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv\", chunksize=chunksize):\n    print(fake.shape)\n\nfake['category'] = 0\n\ndf = pd.concat([true,fake])\ndf.head()","c6e8671e":"texts = df[\"title\"]","4fcf3a6f":"import nltk\n\ntexts_transformed = []\nfor review in texts: \n    sentences = nltk.sent_tokenize(review)\n    adjectives = []\n    \n    for sentence in sentences:\n        words = nltk.word_tokenize(sentence)\n        words_tagged = nltk.pos_tag(words)\n        \n        for word_tagged in words_tagged:\n            if word_tagged[1] == \"JJ\":\n                adjectives.append(word_tagged[0])\n                \n    texts_transformed.append(\" \".join(adjectives))","6fa71e38":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB","735b1cd2":"X = texts_transformed\ny = df[\"category\"] == 0","c503d804":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 10)\n\ncv = CountVectorizer(max_features = 50)\ncv.fit(X_train)\n\nX_train = cv.transform(X_train)\nX_test = cv.transform(X_test)","5be138ee":"#Here the Multinomial Naive Bayes is applied. \nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","68b786c1":"#As an alternative here SVM is applied. \n\nfrom sklearn.svm import SVC\n\nmodel = SVC(kernel = \"linear\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","85498813":"# let us look at the list of adjectives and their coefficients; the lower the coeffiencient the more likely it is fake news\n\nadj = list(zip(model.coef_[0], cv.get_feature_names()))\nadj = sorted(adj)\n\nfor i in adj:\n    print(i)","a184f9b0":"#As an alternative here RandomForest is applied.\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(criterion = \"entropy\", n_estimators = 30)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","6d102e69":"**This test is designed to differentiate true vs. false news based on adjectives used in the titles of the news**"}}