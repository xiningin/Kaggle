{"cell_type":{"ec6295cc":"code","d66b120d":"code","6d045ffa":"code","22c790d0":"code","7c050c99":"code","6887cf0b":"code","c9fe8cbe":"code","febb17a8":"code","8331b73a":"code","4281c13e":"code","32bb18bb":"code","2b461c2f":"code","eed199c7":"code","34302c95":"code","944f9531":"code","199d7fe4":"code","5890332f":"code","8d024848":"code","20a34e9c":"code","4e183dbd":"code","0c7d82b9":"code","872b6b53":"code","36da042f":"code","8fc5066b":"code","8bc7b01b":"code","3279dace":"code","2da336f8":"code","f72ef08f":"code","72e9ecce":"code","a1b2bf35":"code","7b543ced":"code","d5a7c8ba":"code","aee67d97":"code","fc4450ac":"code","9b6c5f9b":"code","5ee311c8":"code","5ba7359d":"code","e50b1ba9":"code","3f1409be":"code","3a579934":"code","e5797255":"code","0636fe10":"code","24732872":"code","7a9f767c":"code","247554b7":"code","0d8718db":"code","cf712dfc":"code","bd6eeeea":"code","364f2647":"code","58fe4a2b":"code","50577efb":"code","13550cc9":"code","28b0b27c":"code","aa93f636":"code","fdec13ee":"code","99122bcd":"code","57d6481e":"code","e452de99":"code","56f8e74e":"code","eef42c69":"code","bc8a75fc":"code","f213698b":"code","9e83f3e8":"code","2bc50f3a":"code","0c3c65da":"markdown","273bc5b4":"markdown","ad2db933":"markdown","3a056772":"markdown","4b00037e":"markdown","388fa931":"markdown","f82ac10c":"markdown"},"source":{"ec6295cc":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf = pd.read_csv(r\"..\/input\/loan-prediction-analytics-vidhya\/train_ctrUa4K.csv\")\ndf1 = pd.read_csv(r\"..\/input\/loan-prediction-analytics-vidhya\/test_lAUu6dG.csv\")","d66b120d":"train_original=df.copy()\ntest_original=df1.copy()","6d045ffa":"df.head(10)","22c790d0":"df.describe()","7c050c99":"df['ApplicantIncome'].hist(bins=50)","6887cf0b":"df.boxplot(column='ApplicantIncome')","c9fe8cbe":"df.boxplot(column='ApplicantIncome', by = 'Education')","febb17a8":"df['LoanAmount'].hist(bins=50)","8331b73a":"df.boxplot(column='LoanAmount')","4281c13e":"temp1 = df['Credit_History'].value_counts(ascending=True)\ntemp2 = df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc=lambda x: x.map({'Y':1,'N':0}).mean())\nprint ('Frequency Table for Credit History:' )\nprint (temp1)\nprint ('\\nProbility of getting loan for each Credit History class:')\nprint (temp2)","32bb18bb":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(8,4))\nax1 = fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of Applicants')\nax1.set_title(\"Applicants by Credit_History\")\ntemp1.plot(kind='bar')\nax2 = fig.add_subplot(122)\ntemp2.plot(kind = 'bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","2b461c2f":"temp3 = pd.crosstab(df['Credit_History'], df['Loan_Status'])\ntemp3.plot(kind='bar', stacked=True, color=['red','blue'],grid=False)","eed199c7":"df.apply(lambda x: sum(x.isnull()),axis=0)","34302c95":"df['LoanAmount'].fillna(df['LoanAmount'].mean(), inplace=True)","944f9531":"df[\"Self_Employed\"].value_counts()","199d7fe4":"df['Self_Employed'].fillna('No',inplace=True)","5890332f":"matrix=df.corr()\nf,ax= plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","8d024848":"df.isnull().sum()","20a34e9c":"df.head()","4e183dbd":"#converting string values(Categorical Values) to integer\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})","0c7d82b9":"df.head()","872b6b53":"#converting string values(Categorical Values) to integer\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","36da042f":"df1.head()","8fc5066b":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)","8bc7b01b":"#Find the missing values in Loan Amount Term to fill\ndf[\"Loan_Amount_Term\"].value_counts()","3279dace":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","2da336f8":"#Filling the Null values using the Median in LoanAmount\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","f72ef08f":"df.isnull().sum()","72e9ecce":"df1.isnull().sum()","a1b2bf35":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)","7b543ced":"#Find the missing values in Loan Amount Term to fill\ndf1[\"Loan_Amount_Term\"].value_counts()","d5a7c8ba":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","aee67d97":"#Filling the Null values using the Median in LoanAmount\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","fc4450ac":"df1.isnull().sum()","9b6c5f9b":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","5ee311c8":"sns.distplot(df[\"Total_Income\"])","5ba7359d":"sns.distplot(df1[\"Total_Income\"])","e50b1ba9":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","3f1409be":"sns.distplot(df1[\"Total_Income_log\"])","3a579934":"sns.distplot(df[\"Total_Income_log\"])","e5797255":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","0636fe10":"sns.distplot(df[\"EMI\"])","24732872":"sns.distplot(df1[\"EMI\"])","7a9f767c":"#Multiplying by 1000 to make the units equal \ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","247554b7":"sns.distplot(df[\"Balance Income\"])","0d8718db":"sns.distplot(df1[\"Balance Income\"])","cf712dfc":"df=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)","bd6eeeea":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)","364f2647":"df","58fe4a2b":"df1=df1.drop(\"Loan_ID\",axis=1)","50577efb":"df1","13550cc9":"df.dtypes","28b0b27c":"df1.dtypes","aa93f636":"from sklearn. model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn. model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","fdec13ee":"#Lets Prepare the data for feeding in to the models\n#Save the target variable in seperate\nX=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","99122bcd":"#Logistic Regression\n\nX=pd.get_dummies(X)\ndf=pd.get_dummies(df)\n","57d6481e":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3)","e452de99":"model=LogisticRegression()\nmodel.fit(x_train,y_train)\nLogisticRegression(C=1.0,class_weight=None,dual=False,fit_intercept=True,\n                   intercept_scaling=1,max_iter=100,multi_class=\"ovr\",n_jobs=1,\n                  penalty=\"12\",random_state=1,solver=\"liblinear\",tol=0.0001,\n                  verbose=0,warm_start=False)","56f8e74e":"y_pred=model.predict(x_test)\naccuracy_score(y_test,y_pred)","eef42c69":"pred_test=model.predict(df1)","bc8a75fc":"final=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","f213698b":"final","9e83f3e8":"final[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nfinal[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","2bc50f3a":"final","0c3c65da":"# Logistic Regression","273bc5b4":"# FEATURE ENGINEERING","ad2db933":"# Dropping The variables","3a056772":"# Correlation between all the numerical variables\nHeatMap representation of the correlation","4b00037e":"# Filling Missing Values","388fa931":"# Filling Missing Values in Test Data","f82ac10c":"# Replacing the categorical values"}}