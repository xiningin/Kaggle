{"cell_type":{"7724d42e":"code","1513de2b":"code","d26e4c6f":"code","eea16418":"code","4d67c52f":"code","b6677989":"code","2e31112c":"code","eca772d9":"code","14d2a21f":"code","b42e933e":"code","cb244829":"code","9c41c0af":"code","4867f09a":"code","28753af6":"code","b02ad993":"code","391dd5ca":"code","83d23f66":"code","30258b7f":"code","ed102dfd":"code","725f091c":"code","f80c02c6":"code","c360b5f5":"code","0dbd7ff6":"markdown","b525bffe":"markdown","786a12a0":"markdown"},"source":{"7724d42e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nwarnings.filterwarnings('ignore')","1513de2b":"df = pd.read_csv('..\/input\/loandata\/Loan payments data.csv')\ndf.head()","d26e4c6f":"df.describe()","eea16418":"df.info()","4d67c52f":"df.corr()","b6677989":"df.dropna(axis=1, how=\"all\")\ndf.isnull().sum()","2e31112c":"df.drop('effective_date',axis=1, inplace=True)\ndf.drop('due_date', axis=1, inplace=True)\ndf.drop('paid_off_time', axis=1, inplace=True)\ndf.drop('Loan_ID', axis=1, inplace=True)\ndf.drop('Gender', axis=1, inplace=True)","eca772d9":"df.isnull().sum()","14d2a21f":"df.past_due_days.fillna(0,inplace=True)","b42e933e":"df.isnull().sum()","cb244829":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf.terms = le.fit_transform(df.terms)\ndf.loan_status = df.loan_status.replace(['PAIDOFF', 'COLLECTION', 'COLLECTION_PAIDOFF'],[0,1,2])\ndf.education = df.education.replace(['High School or Below', 'Bechalor', 'college', 'Master or Above'],[0,2,1,3])\ndf.past_due_days=df.past_due_days.astype('int64')","9c41c0af":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","4867f09a":"X = df.drop('loan_status', axis=1)\ny = df['loan_status']","28753af6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25, random_state = 2)","b02ad993":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_sc = scaler.fit_transform(X_train)\nX_test_sc = scaler.fit_transform(X_test)","391dd5ca":"from sklearn.preprocessing import MinMaxScaler\nscaler2 = MinMaxScaler()\nX_train_minmax= scaler2.fit_transform(X_train)\nX_test_minmax = scaler2.transform(X_test) ","83d23f66":"from sklearn.decomposition import PCA\npca = PCA(n_components=4)\nX_train_pca = pca.fit_transform(X_train)\nX_test_pca = pca.transform(X_test)","30258b7f":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nclf.fit(X_train_sc, y_train)\nprint(\"training Accuracy : \", clf.score(X_train_sc,y_train))\nprint(\"test Accuracy : \", clf.score(X_test_sc, y_test))","ed102dfd":"from sklearn.ensemble import RandomForestClassifier\nclf0 = RandomForestClassifier(random_state=0)\nclf0.fit(X_train,y_train)\n\nclf = RandomForestClassifier(random_state=0)\nclf.fit(X_train_sc,y_train)\n\nclf2 = RandomForestClassifier(random_state=0)\nclf2.fit(X_train_pca,y_train)\n\nprint('Training Accuracy                  : ', clf2.score(X_train_pca, y_train))\nprint('Testing Accuracy                   : ', clf0.score(X_test, y_test))\nprint('Testing Accuracy with pca          : ', clf2.score(X_test_pca, y_test))\nprint('Testing Accuracy with sc           : ', clf.score(X_test_sc, y_test))\nprint('Testing Accuracy with minmax scaler: ', clf.score(X_test_minmax, y_test))","725f091c":"from sklearn.model_selection import GridSearchCV\nparam_grid = { \n    'n_estimators': [10],\n    'max_features': ['auto'],\n    'max_depth' : [7],\n    'criterion' :['entropy']\n}\n\nCV_rfc = GridSearchCV(clf, param_grid=param_grid, cv= 5)\nCV_rfc.fit(X_train_sc,y_train)","f80c02c6":"best_params = CV_rfc.best_params_\nbest_params","c360b5f5":"clf = RandomForestClassifier(**best_params, random_state=0)\nclf.fit(X_train_pca,y_train)\n\nprint('Training Accuracy: ', clf.score(X_train_pca, y_train))\nprint('Testing Accuracy: ', clf.score(X_test_pca, y_test))","0dbd7ff6":"# KNeighborsClassifier","b525bffe":"# Preprocessing:","786a12a0":"# Models"}}