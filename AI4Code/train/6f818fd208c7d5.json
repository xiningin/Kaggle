{"cell_type":{"12100b00":"code","b8e32d02":"code","602d3905":"code","72cffa08":"code","c8c9b4d8":"code","0f2c38fd":"code","83259805":"code","666ce055":"code","5b8b9cc3":"code","938e4585":"code","6a128b33":"code","faed822e":"code","788536f2":"code","4cf9849d":"code","3e86fe22":"code","1e8b299a":"markdown","e353af01":"markdown"},"source":{"12100b00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8e32d02":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","602d3905":"athletes_data = pd.read_csv(\"..\/input\/forbes-high-paid-athletes-19902021\/forbesathletesv2.csv\")\nathletes_data.head(10)","72cffa08":"athletes_data.count()","c8c9b4d8":"athletes_data.isnull().sum()","0f2c38fd":"plt.figure(figsize=(25, 10))\nplt.rc('font', size=15)\nplt.rc('xtick', labelsize=15)    \nplt.rc('ytick', labelsize=15)\n\nathlete_salary = athletes_data.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nnames = [ name for name in athlete_salary.index]\nsns.barplot(x=names, y=athlete_salary*10**6)\nplt.title('All Time Top 10 Athletes Salary Rank')","83259805":"athlete_years = athletes_data.groupby(['Name', 'Year'])['Earnings'].sum().sort_values(ascending=False)[:20]\nyear = [years[1] for years in athlete_years.index]\nname = [names[0] for names in athlete_years.index]\n\n#The names from the name variable, and we are going to get the unique list of names.\nnames_df = pd.DataFrame({'names':['Floyd Mayweather', 'Floyd Mayweather', 'Conor McGregor', 'Manny Pacquiao', 'Lionel Messi', 'Lionel Messi', 'Cristiano Ronaldo', 'Tiger Woods', 'Lionel Messi', 'Tiger Woods', 'Cristiano Ronaldo', 'Cristiano Ronaldo', 'Dak Prescott', 'Roger Federer', 'Cristiano Ronaldo', 'Tiger Woods', 'Floyd Mayweather', 'Neymar', 'Lionel Messi', 'Tiger Woods']})\nunique_names = names_df['names'].unique()\nlist_of_years = pd.DataFrame(year)\nunique_years = list_of_years[0].unique()\n\n#Proceed in filtering the main data, with the unique names and so as the years\nfilter1 = athletes_data['Name'].isin(['Floyd Mayweather', 'Conor McGregor', 'Manny Pacquiao', 'Lionel Messi',\n 'Cristiano Ronaldo', 'Tiger Woods', 'Dak Prescott', 'Roger Federer', 'Neymar',])\nfilter2 = athletes_data['Year'].isin([2021, 2020, 2019, 2018, 2015, 2014, 2010, 2009, 2008, 2007])\n\n#Filtering the athletes data with our filtering variables\nfilter2 = athletes_data['Year'].isin([2021, 2020, 2019, 2018, 2015, 2014, 2010, 2009, 2008, 2007])\nathletes_data[filter1 & filter2]\n","666ce055":"top_10_by_year = ['2021 Connor McGregor', '2020 Roger Federer', '2019 Lionel Messi', '2018 Floyd Mayweather', \n               '2015 Floyd Mayweather', '2014 Floyd Mayweather', '2010 Tiger Woods', \n               '2009 Tiger Woods', '2008 Tiger Woods', '2007 Tiger Woods']","5b8b9cc3":"plt.figure(figsize=(25, 10))\n\nsns.barplot(x=year, y=athlete_years)\nplt.legend(top_10_by_year)\nplt.title('Top Athletes Earning from year 2007 - 2021')\nplt.ylabel('Earnings per million of dollars')\nplt.xlabel('Years')","938e4585":"plt.figure(figsize=(25, 10))\n\nathlete_year = athletes_data.groupby(['Name', 'Year'])['Earnings'].sum().sort_values(ascending=False)\nyears = [ y[1] for y in athlete_year.index]\nsns.barplot(x=years, y=athlete_year)","6a128b33":"plt.figure(figsize=(30, 10))\n\nsports = athletes_data.groupby('Sport')['Earnings'].sum().sort_values(ascending=False)\nsport_kind = [sport for sport in sports.index]\nsns.barplot(x=sport_kind, y=sports)","faed822e":"mixed_martial_arts = athletes_data['Sport'].isin(['Mixed Martial Arts'])\nmma = athletes_data[mixed_martial_arts]\ncricket = athletes_data['Sport'].isin(['Cricket'])\nck = athletes_data[cricket]\ntrack = athletes_data['Sport'].isin(['Track'])\ntk = athletes_data[track]\ncycling = athletes_data['Sport'].isin(['Cycling'])\ncyc = athletes_data[cycling]\nhockey = athletes_data['Sport'].isin(['Hockey'])\nhck = athletes_data[hockey]\nprint(mma['Name'].unique())\n\nprint(ck['Name'].unique())\n\nprint(tk['Name'].unique())\n\nprint(cyc['Name'].unique())\n\nprint(hck['Name'].unique())\n\n","788536f2":"basketball = athletes_data['Sport'].isin(['Basketball'])\nfootball = athletes_data['Sport'].isin(['Football'])\ntennis = athletes_data['Sport'].isin(['Tennis'])\nsoccer = athletes_data['Sport'].isin(['Soccer'])\nracing = athletes_data['Sport'].isin(['Racing'])\ngolf = athletes_data['Sport'].isin(['Golf'])\nboxing = athletes_data['Sport'].isin(['Boxing'])\nbaseball = athletes_data['Sport'].isin(['Baseball'])\nhockey = athletes_data['Sport'].isin(['Hockey'])\n\nbb = athletes_data[basketball]\nfb = athletes_data[football]\ntn = athletes_data[tennis]\nsr = athletes_data[soccer]\nrc = athletes_data[racing]\ngf = athletes_data[golf]\nbx = athletes_data[boxing]\nbs = athletes_data[baseball]\nhck = athletes_data[hockey]","4cf9849d":"Basketball = bb.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nbb_names = [ bb_name for bb_name in Basketball.index ]\n\nFootball = fb.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nfb_names = [ fb_name for fb_name in Football.index ]\n\nTennis = tn.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\ntn_names = [ tn_name for tn_name in Football.index ]\n\nSoccer = sr.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nsr_names = [ sr_name for sr_name in Soccer.index ]\n\nRacing = rc.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nrc_names = [ rc_name for rc_name in Racing .index ]\n\nGolf = gf.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\ngf_names = [ gf_name for gf_name in Golf.index ]\n\nBoxing = bx.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nbx_names = [ bx_name for bx_name in Boxing.index ]\n\nBaseball = bs.groupby('Name')['Earnings'].sum().sort_values(ascending=False)[:10]\nbs_names = [ bs_name for bs_name in Baseball.index ]\n\nHockey = hck.groupby('Name')['Earnings'].sum().sort_values(ascending=False)\nhck_names = [ hck_name for hck_name in Hockey.index ]\n","3e86fe22":"fig, axes = plt.subplots(9, 1, figsize=(25, 100));\n\nsns.barplot(ax=axes[0], x=bb_names, y=Basketball)\naxes[0].set_title('Top 10 Basketball Athletes with High Salary')\n\nsns.barplot(ax=axes[1], x=fb_names ,y=Football)\naxes[1].set_title('Top 10 Football Athletes with High Salary')\n\nsns.barplot(ax=axes[2], x=tn_names ,y=Tennis)\naxes[2].set_title('Top 10 Tennis Athletes with High Salary')\n\nsns.barplot(ax=axes[3], x=sr_names ,y=Soccer)\naxes[3].set_title('Top 10 Soccer Athletes with High Salary')\n\nsns.barplot(ax=axes[4], x=rc_names ,y=Racing)\naxes[4].set_title('Top 10 Racing Athletes with High Salary')\n\nsns.barplot(ax=axes[5], x=gf_names ,y=Golf)\naxes[5].set_title('Top 10 Golf Athletes with High Salary')\n\nsns.barplot(ax=axes[6], x=bx_names ,y=Boxing)\naxes[6].set_title('Top 10 Boxing Athletes with High Salary')\n\nsns.barplot(ax=axes[7], x=bs_names ,y=Baseball)\naxes[7].set_title('Top 10 Baseball Athletes with High Salary')\n\nsns.barplot(ax=axes[8], x=hck_names ,y=Hockey)\naxes[8].set_title('Top 6 Hockey Athletes with High Salary')","1e8b299a":"From this filtered dataframe, we can distinguish the athletes with highest earnings each year","e353af01":"These are the list of athletes with thier respective years"}}