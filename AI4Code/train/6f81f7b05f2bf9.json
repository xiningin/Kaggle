{"cell_type":{"ca672851":"code","376dcc79":"code","7dd1aee5":"code","9aa55b07":"code","e997fc13":"code","22111df2":"code","88bc01da":"markdown"},"source":{"ca672851":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","376dcc79":"resp_2021 = pd.read_csv('\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\nresp_2020 = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nresp_2019 = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nresp_2018 = pd.read_csv('\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')","7dd1aee5":"Scikit_learn=(resp_2018['Q19_Part_1'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nTensorFlow=(resp_2018['Q19_Part_2'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nKeras=(resp_2018['Q19_Part_3'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nPyTorch=(resp_2018['Q19_Part_4'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nSpark_MLlib=(resp_2018['Q19_Part_5'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nH20=(resp_2018['Q19_Part_6'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nFastai=(resp_2018['Q19_Part_7'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nMxnet=(resp_2018['Q19_Part_8'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nCaret=(resp_2018['Q19_Part_9'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nXgboost=(resp_2018['Q19_Part_10'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nmlr=(resp_2018['Q19_Part_11'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nProphet=(resp_2018['Q19_Part_12'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nrandomForest=(resp_2018['Q19_Part_13'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nlightgbm=(resp_2018['Q19_Part_14'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\ncatboost=(resp_2018['Q19_Part_15'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nCNTK=(resp_2018['Q19_Part_16'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nCaffe=(resp_2018['Q19_Part_17'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nnone=(resp_2018['Q19_Part_18'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])\nOther=(resp_2018['Q19_Part_19'].dropna(axis=0).shape[0])\/(resp_2018['Q19_Part_1'].shape[0])","9aa55b07":"dict_2018 = { 'Scikit_learn': Scikit_learn, 'TensorFlow': TensorFlow, 'Keras':Keras, 'PyTorch':PyTorch, 'Spark_MLlib':Spark_MLlib,\n             'H20':H20, 'Fastai':Fastai, 'Mxnet':Mxnet, 'Caret':Caret, 'Xgboost':Xgboost, 'mlr':mlr, 'Prophet':Prophet,\n             'randomForest':randomForest, 'lightgbm':lightgbm, 'catboost':catboost, 'CNTK':CNTK, 'Caffe':Caffe, 'none':none }\n#dict_2018 = sorted(dict_2018.items())\ndict_2018","e997fc13":"frame_list=list(dict_2018.keys())\nusage_ratio = list(dict_2018.values())","22111df2":"y = np.arange(len(list(dict_2018.keys())))\n\n\nplt.barh(y, usage_ratio, color='y')\n# plt.barh(y, values, color='dodgerblue')\n# plt.barh(y, values, color='C2')\n# plt.barh(y, values, color='#e35f62')\nplt.yticks(y, frame_list)\n\nplt.show()","88bc01da":"# 2018 framework"}}