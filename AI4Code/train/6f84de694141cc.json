{"cell_type":{"636be292":"code","6fd975ab":"code","2906138d":"code","275112d6":"code","9c76a878":"code","29048e1a":"code","e34e68ef":"code","7a5db381":"code","0ca033dc":"code","eecb0358":"code","452dba48":"code","5e6e4b27":"code","58831027":"code","2c1c0c46":"code","7cdbbf52":"code","908f0820":"code","6abead59":"code","df9e531b":"code","50480bc3":"code","7d9a64c7":"code","f77c8d7d":"code","e7e69fb7":"code","8da85c65":"code","741f37cd":"code","164d00b3":"code","6a145657":"code","580a41f8":"code","53210a8f":"code","71bacf2d":"code","35ad28ea":"code","cc0e7be3":"code","a36bc10f":"code","5bc6fd2e":"code","0fb94707":"code","38853140":"code","341df5e5":"code","9724d64f":"code","c0e216fd":"code","9f150ee6":"code","3683d368":"code","0fab440d":"code","de169c44":"code","9e5e5f1a":"code","6a7ec644":"code","44ae0723":"code","df2760d1":"code","854ad0d5":"code","b5bdfd87":"markdown"},"source":{"636be292":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fd975ab":"path = \"..\/input\/1000-cameras-dataset\/camera_dataset.csv\"\ndf = pd.read_csv(path)","2906138d":"df.head()","275112d6":"df.dtypes","9c76a878":"df.describe","29048e1a":"df.ndim","e34e68ef":"df.columns","7a5db381":"df.count","0ca033dc":"df.isnull().sum()","eecb0358":"df.shape","452dba48":"df.isnull().sum()","5e6e4b27":"df.drop(['Model'],axis=1,inplace=True)","58831027":"df.drop(['Release date'],axis=1,inplace=True)","2c1c0c46":"df.shape","7cdbbf52":"df['Macro focus range'].fillna(df['Macro focus range'].mean())","908f0820":"df['Storage included'].fillna(df['Storage included'].mean())","6abead59":"df['Weight (inc. batteries)'].fillna(df['Weight (inc. batteries)'].mean())\n","df9e531b":"df['Dimensions'].fillna(df['Dimensions'].mean())","50480bc3":"df['Price'].fillna(df['Price'].mean())","7d9a64c7":"train , test = train_test_split(df,test_size=0.3)","f77c8d7d":"print(train.shape)","e7e69fb7":"print(test.shape)","8da85c65":"train_x = train.iloc[:,0:3]; train_y = train.iloc[:,3]\ntest_x  = test.iloc[:,0:3];  test_y = test.iloc[:,3]","741f37cd":"print(train_x)","164d00b3":"print(test_x)","6a145657":"print(train_x.shape)","580a41f8":"train_y.shape","53210a8f":"test_x.shape","71bacf2d":"test_y.shape","35ad28ea":"train_x.head()","cc0e7be3":"train_y.head()","a36bc10f":"train.head()","5bc6fd2e":"train.tail()","0fb94707":"train.dtypes","38853140":"fit = sm.OLS(train_y,train_x).fit()","341df5e5":"#Predction\npred = fit.predict(test_x)","9724d64f":"pred","c0e216fd":"#Actual\nactual = list(test_y.head(103))","9f150ee6":"actual","3683d368":"predicted = np.round(np.array(list(pred.head(103))),2)","0fab440d":"predicted","de169c44":"type(predicted)","9e5e5f1a":"#Actual vs Predicted\ndf_results = pd.DataFrame({'actual':actual, 'predicted':predicted})\n","6a7ec644":"df_results","44ae0723":"from sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(test_y, pred))  \n","df2760d1":"print('Mean Squared Error:', metrics.mean_squared_error(test_y,pred))","854ad0d5":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, pred)))  \n","b5bdfd87":"# To check accuracy"}}