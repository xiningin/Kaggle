{"cell_type":{"f7a1453d":"code","d646da51":"code","c7d6995f":"code","b93c83e7":"code","5dbec40d":"code","83ae3b5a":"code","2d0d0aaa":"code","05ebea18":"code","62d59268":"code","6439ef05":"code","b8511d62":"code","1048dc29":"code","9cfb336d":"code","73fe2022":"code","1c3dd996":"code","3410e165":"code","f7641f74":"code","8b6e28e4":"code","b845c33f":"code","da3bf150":"code","948ce161":"code","1daa8374":"code","bcde4ddc":"markdown","68b7895b":"markdown","131b55ed":"markdown","7eef3d8d":"markdown","621d0b87":"markdown","90774e97":"markdown","23218056":"markdown","03aa5c23":"markdown","5b3d4799":"markdown","14b72bc1":"markdown","fa6cb595":"markdown"},"source":{"f7a1453d":"from sklearn import datasets\n# \u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\nboston = datasets.load_boston()","d646da51":"# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u60c5\u5831\u3092\u8abf\u3079\u308b\n# boston\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a73\u7d30\u306a\u8aac\u660e\nprint(boston.DESCR)","c7d6995f":"#\u30b0\u30e9\u30d5\u63cf\u753b\u3001\u8a08\u7b97\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline ","b93c83e7":"#\u7279\u5fb4\u91cf\nX = boston.data\n#\u6b63\u89e3\u30e9\u30d9\u30eb\ny = boston.target","5dbec40d":"#DataFrame\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf\u306e\u63cf\u753b\u3084\u7de8\u96c6\u304c\u3057\u6613\u3044\u5f62\u306b\u3059\u308b\ndf_X = pd.DataFrame(X)\ndf_y = pd.DataFrame(y)\n#\u7279\u5fb4\u91cf\u306e\u30ab\u30e9\u30e0\ndf_X.columns = boston.feature_names\n#\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u30ab\u30e9\u30e0\ndf_y.columns = [\"target\"]","83ae3b5a":"#\u7279\u5fb4\u91cf\u30c7\u30fc\u30bf\u306e\u5148\u982d5\u4ef6\u3092\u8868\u793a\u3059\u308b\ndf_X.head()","2d0d0aaa":"#\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u5148\u982d5\u4ef6\u3092\u8868\u793a\u3059\u308b\ndf_y.head()","05ebea18":"#\u7279\u5fb4\u91cf\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3059\u308b\ndf = pd.concat([df_X, df_y], axis = 1)\ndf.head()","62d59268":"#\u76f8\u95a2\u4fc2\u6570\u306e\u8a08\u7b97\n#\u5e73\u5747\u5024 \u2192 \u504f\u5dee \u2192 \u5206\u6563 \u2192 \u6a19\u6e96\u504f\u5dee \u2192 \u5171\u5206\u6563\u306e\u9806\u306b\u8a08\u7b97\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\n#1\u306b\u8fd1\u3044\u307b\u3069\u3001\u5f37\u3044\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308a\u3001\u22121\u306b\u8fd1\u3044\u307b\u3069\u3001\u5f37\u3044\u8ca0\u306e\u76f8\u95a2\u304c\u3042\u308a\u307e\u3059\u3002\ncorr = df.corr()\ncorr","6439ef05":"import seaborn as sns\nsns.heatmap(corr,\n            vmin=-1.0,\n            vmax=1.0,\n            center=0,\n            annot=True, # True:\u683c\u5b50\u306e\u4e2d\u306b\u5024\u3092\u8868\u793a\n            fmt='.1f',\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values\n           )\nplt.show()","b8511d62":"lstat = df_X.loc[:,\"LSTAT\"]\nlstat","1048dc29":"# lstat\u306e\u30c7\u30fc\u30bf\u578b\u306fpandas.core.series.Series\u3068\u7279\u6b8a\u306a\u5f62\u306b\u306a\u308b\u306e\u3067\u3001\n# \u3053\u306e\u307e\u307e\u3060\u3068\u6a5f\u68b0\u5b66\u7fd2\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n# \u305d\u306e\u305f\u3081lstat\u3092numpy\u306e\u914d\u5217\u306b\u5909\u63db\u3057\u3001\u4e8c\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u3059\u308b\nprint(\"\u5909\u63db\u524d\u306e\u30c7\u30fc\u30bf\u578b\u306f\", type(lstat))\nprint(\"\u5909\u63db\u524d\u306e\u914d\u5217\u306e\u5927\u304d\u3055\u306f\", lstat.shape)\nlstat = lstat.values\nlstat = lstat.reshape(-1,1)\nprint(\"\u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u578b\u306f\", type(lstat))\nprint(\"\u5909\u63db\u5f8c\u306e\u914d\u5217\u306e\u5927\u304d\u3055\u306f\", lstat.shape)","9cfb336d":"plt.scatter(lstat, y)\nplt.show()\n#x\u8ef8\u304cLSTAT: \u7d66\u4e0e\u306e\u4f4e\u3044\u8077\u696d\u306b\u5f93\u4e8b\u3059\u308b\u4eba\u53e3\u306e\u5272\u5408 (%)\n#y\u8ef8\u304c\u4f4f\u5b85\u4fa1\u683c","73fe2022":"#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1\u30c7\u30fc\u30bf\u3067\u5206\u5272\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(lstat, y, test_size=0.3, random_state=0)","1c3dd996":"#\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()","3410e165":"#\u5b66\u7fd2\nlr.fit(X_train, y_train)","f7641f74":"# \u4e88\u6e2c\u7d50\u679c\u3092\u30b0\u30e9\u30d5\u63cf\u753b\n# \u8d64\u3044\u7dda\u304c\u4e88\u6e2c\u3057\u305f\u7d50\u679c\nplt.scatter(lstat, y)                       \nplt.plot(X_test, lr.predict(X_test), color='red') \nplt.title('boston_housing')     \nplt.xlabel('LSTAT')               \nplt.ylabel('target')                 \nplt.show()","8b6e28e4":"y_train_pred = lr.predict(X_train)\ny_test_pred = lr.predict(X_test)\n\n# \u6027\u80fd\u8a55\u4fa1\n# \u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee(Root Mean Squared Error\/RMSE)\u304a\u3088\u3073\u3001\n# \u6c7a\u5b9a\u4fc2\u6570(Coefficient of Determination)\u3068\u3044\u3046\u8a55\u4fa1\u6307\u6a19\u3092\u4f7f\u3044\u307e\u3059\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n# \u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee(RMSE)\u3092\u7b97\u51fa\nprint('RMSE Test :' + str((sqrt(mean_squared_error(y_test, y_test_pred)))))\n# \u5b66\u7fd2\u7528\u3001\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066R^2\u3092\u51fa\u529b (\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u5834\u5408score()\u3092\u4f7f\u3046\u3053\u3068\u3067\u6c7a\u5b9a\u4fc2\u6570\u304c\u5f97\u3089\u308c\u307e\u3059\u3002)\nprint('R^2 Train : %.3f, Test : %.3f' % (lr.score(X_train, y_train), lr.score(X_test, y_test)))","b845c33f":"x = np.arange(15,16)\nx = x.reshape(-1,1)\nprint(\"LSTAT(\u7d66\u4e0e\u306e\u4f4e\u3044\u8077\u696d\u306b\u5f93\u4e8b\u3059\u308b\u4eba\u53e3\u306e\u5272\u5408 (%))\")\nprint(x)\nprint(\"\u4e88\u6e2c\u5024\")\nprint(lr.predict(x))","da3bf150":"X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.3, random_state=0)\n\nX_train = X_train[[\"RM\",\"LSTAT\"]] #\u90e8\u5c4b\u6570\u3068\u7d66\u4e0e\u304c\u4f4e\u3044\u4eba\u53e3\u5272\u5408\u3067\u306e\u91cd\u56de\u5e30\nX_test = X_test[[\"RM\",\"LSTAT\"]]","948ce161":"from sklearn.linear_model import LinearRegression\nlrt = LinearRegression()\nlrt.fit(X_train, y_train)","1daa8374":"y_train_pred = lrt.predict(X_train)\ny_test_pred = lrt.predict(X_test)\n\n# \u6027\u80fd\u8a55\u4fa1\n# \u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee(Root Mean Squared Error\/RMSE)\u304a\u3088\u3073\u3001\n# \u6c7a\u5b9a\u4fc2\u6570(Coefficient of Determination)\u3068\u3044\u3046\u8a55\u4fa1\u6307\u6a19\u3092\u4f7f\u3044\u307e\u3059\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n# \u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee(RMSE)\u3092\u7b97\u51fa\nprint('RMSE Test :' + str((sqrt(mean_squared_error(y_test, y_test_pred)))))\n","bcde4ddc":"\u6c7a\u5b9a\u4fc2\u6570\u306f\u30010~1\u306e\u7bc4\u56f2\u306e\u5024\u3092\u3068\u308a\u30011\u306b\u8fd1\u3044\u307b\u3069\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3044\u30e2\u30c7\u30eb\u3067\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002\n\u307e\u305fRMSE\u306f\u3001\u4e88\u6e2c\u3068\u6b63\u89e3\u306e\u5e73\u5747\u7684\u306a\u30ba\u30ec\u3092\u8868\u3057\u3066\u304a\u308a\u3001\u5e73\u5747\u7684\u306b\u7d046.3\u306e\u30ba\u30ec\u304c\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002","68b7895b":"# \u91cd\u56de\u5e30\u3092\u8a66\u3057\u3066\u307f\u308b","131b55ed":"## \u8a55\u4fa1","7eef3d8d":"### \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u8eab\n\n- \u30dc\u30b9\u30c8\u30f3\u5e02\u90ca\u5916\u306e\uff11\uff13\u7a2e\u985e\u306e\u7279\u5fb4\u60c5\u5831\u3068\u5730\u57df\u5225\u4f4f\u5b85\u4fa1\u683c\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n- \u30b5\u30f3\u30d7\u30eb\u6570\u306f506\n\n```\nCRIM: \u4eba\u53e3 1 \u4eba\u5f53\u305f\u308a\u306e\u72af\u7f6a\u767a\u751f\u6570\nZN: 25,000 \u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u4ee5\u4e0a\u306e\u4f4f\u5c45\u533a\u753b\u306e\u5360\u3081\u308b\u5272\u5408\nINDUS: \u5c0f\u58f2\u696d\u4ee5\u5916\u306e\u5546\u696d\u304c\u5360\u3081\u308b\u9762\u7a4d\u306e\u5272\u5408\nCHAS: \u30c1\u30e3\u30fc\u30eb\u30ba\u5ddd\u306b\u3088\u308b\u30c0\u30df\u30fc\u5909\u6570 (1: \u5ddd\u306e\u5468\u8fba, 0: \u305d\u308c\u4ee5\u5916)\nNOX: NOX \u306e\u6fc3\u5ea6\nRM: \u4f4f\u5c45\u306e\u5e73\u5747\u90e8\u5c4b\u6570\nAGE: 1940 \u5e74\u3088\u308a\u524d\u306b\u5efa\u3066\u3089\u308c\u305f\u7269\u4ef6\u306e\u5272\u5408\nDIS: 5 \u3064\u306e\u30dc\u30b9\u30c8\u30f3\u5e02\u306e\u96c7\u7528\u65bd\u8a2d\u304b\u3089\u306e\u8ddd\u96e2\nRAD: \u74b0\u72b6\u9ad8\u901f\u9053\u8def\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3057\u3084\u3059\u3055\nTAX: $10,000 \u30c9\u30eb\u3042\u305f\u308a\u306e\u4e0d\u52d5\u7523\u7a0e\u7387\u306e\u7dcf\u8a08\nPTRATIO: \u753a\u6bce\u306e\u5150\u7ae5\u3068\u6559\u5e2b\u306e\u6bd4\u7387\nB: \u753a\u6bce\u306e\u9ed2\u4eba (Bk) \u306e\u6bd4\u7387\u3092\u6b21\u306e\u5f0f\u3067\u8868\u3057\u305f\u3082\u306e\u3002 1000(Bk \u2013 [](http:\/\/)0.63)^2\nLSTAT: \u7d66\u4e0e\u306e\u4f4e\u3044\u8077\u696d\u306b\u5f93\u4e8b\u3059\u308b\u4eba\u53e3\u306e\u5272\u5408 (%)\n```\n","621d0b87":"# \u3084\u308b\u3053\u3068\uff1a\u4f4f\u5b85\u4fa1\u683c\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002","90774e97":"## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f","23218056":"\u6563\u5e03\u56f3\u3067\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002","03aa5c23":"# \u5b66\u7fd2","5b3d4799":"1. \u76f8\u95a2\u884c\u5217\u3092\u898b\u3066\u307f\u308b\u3068\"LSTAT\"(\u7d66\u4e0e\u306e\u4f4e\u3044\u8077\u696d\u306b\u5f93\u4e8b\u3059\u308b\u4eba\u53e3\u306e\u5272\u5408 (%))\u3068\u3044\u3046\u5909\u6570\u304c\u76ee\u7684\u5909\u6570\u3068\u6700\u3082\u76f8\u95a2\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3053\u306e\"LSTAT\"\u3092\u4f7f\u3063\u3066\u5358\u56de\u5e30\u3092\u884c\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002","14b72bc1":"# \u5206\u6790","fa6cb595":"# \u6b63\u898f\u5316"}}