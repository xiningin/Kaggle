{"cell_type":{"e4f32c7d":"code","0ff98fd5":"code","bd26771c":"code","618e22d0":"code","9110747b":"code","8ca2ae59":"code","8c015649":"code","8227a9d0":"code","448a4b0c":"code","6a00cccd":"code","8cf19a2e":"code","f54b5055":"code","5d2dbf88":"code","64f16baa":"code","71452475":"code","300720a1":"markdown"},"source":{"e4f32c7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ff98fd5":"train = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntrain.head()","bd26771c":"test = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\ntest.head()","618e22d0":"from nltk.tokenize import word_tokenize \nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords \nfrom nltk.stem import PorterStemmer\n# lemmatizer = WordNetLemmatizer()\nps = PorterStemmer()\nstop_words = set(stopwords.words('english')) \ndef lem(sentence):\n    words = word_tokenize(sentence.lower()) \n    n = len(words)\n    words = [ps.stem(w) for w in words if not w in stop_words] # lemmatizer.lemmatize\n    return ' '.join(words), n-len(words)\nlem('THE CATS are happier today than yesterday')","9110747b":"train['stemmed'], train['count_stop_words'] = zip(*train['excerpt'].map(lem))\ntest['stemmed'], test['count_stop_words'] = zip(*test['excerpt'].map(lem))","8ca2ae59":"all_words = [w for c in (train['stemmed'], test['stemmed']) for t in c for w in t.split(' ')]\ndic = {}\ntry:\n    while True:\n        w = all_words.pop()\n        if not w in dic.keys():\n            dic[w] = 1\n        else:\n            dic[w] +=1\nexcept:\n    pass","8c015649":"max(dic.values()), min(dic.values())","8227a9d0":"dic['stopword'] = max(dic.values()) + 1","448a4b0c":"def f(row):\n    s = [dic[w] for w in row['stemmed'].split(' ')]\n#     st = row['count_stop_words']\n    n = len(s) # + st\n    return sum(s) \/ n, row['count_stop_words'] \/ n","6a00cccd":"train['score'], train['count_stop_words'] = zip(*train.apply(f, axis=1))\ntrain.head()","8cf19a2e":"test['score'], test['count_stop_words'] = zip(*test.apply(f, axis=1))\ntest.head()","f54b5055":"from sklearn.linear_model import LinearRegression\nl = LinearRegression()\nl.fit(train[['score', 'count_stop_words']].values.reshape(-1, 2), train['target'].values)\nl.intercept_, l.coef_","5d2dbf88":"np.mean((l.predict(train[['score', 'count_stop_words']].values.reshape(-1, 2)) - train.target)**2)","64f16baa":"import matplotlib.pyplot as plt\nplt.hist(train.target.values)\nplt.show()","71452475":"sub = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\nsub['target'] = l.predict(test[['score', 'count_stop_words']].values.reshape(-1, 2))\nsub.to_csv('submission.csv', index=False)","300720a1":"First, we create counting measures for each word, that is to say the number of times they appear in all textes. The idea is that a rare word will likely be complex."}}