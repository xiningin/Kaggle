{"cell_type":{"feebb4e1":"code","ca96c296":"code","a8a37d5c":"code","86171e5c":"code","d25cecbc":"code","02f779b8":"code","3342799e":"code","e60275fc":"code","4b2de081":"code","cd1b63aa":"code","ef4a9e20":"code","bc5d5c3c":"code","6104e613":"code","8915ccd1":"code","0da707cc":"code","d1d1bc6d":"code","87f51926":"code","266d0a9c":"code","61879a00":"code","c096124b":"code","0a85ce87":"code","ee92a73a":"code","ca6f29cd":"code","e5d09f4d":"code","fa903b23":"code","be87c288":"code","6052d0b5":"code","1b9c9b80":"code","d7177b30":"code","a88bcfed":"code","78a41ffa":"code","5ab61212":"code","32f25cf0":"code","e5374532":"code","89297e64":"code","2a8dfab2":"code","553b437d":"code","41a7227c":"code","3eda2ed2":"code","69d84a2a":"code","a7066605":"code","26fcd97a":"code","c1e65b72":"code","4cb3c114":"code","b1a85905":"code","c7bbe4dd":"code","caeac99e":"code","c7a838b7":"code","20e4067c":"code","a38dcf6a":"code","19d84718":"code","c0eac8e9":"code","4e64a5de":"code","bc6a619a":"code","9c203ae2":"code","cbce7d61":"code","9a497e1c":"code","763bf536":"code","122d5e6b":"code","8f022341":"code","ffda2169":"code","6cd2a7bc":"code","433f787e":"code","a0b3d1cf":"code","3e7c6798":"code","8d1d53af":"code","6c631cce":"code","8dd75dae":"code","1b0f8210":"code","4e0c9d47":"code","b5d366e3":"code","10506811":"markdown","ed4af268":"markdown","58213089":"markdown","0b809c3e":"markdown","856bd0a4":"markdown","2a4ea122":"markdown","a6c8921e":"markdown","6af710c9":"markdown","35e940b7":"markdown","d6bc3446":"markdown","d5558eae":"markdown","4c344600":"markdown","f3a13081":"markdown","79635217":"markdown","f05d58ea":"markdown","c291d9ea":"markdown","45176aa4":"markdown","49363eb1":"markdown","d36ea104":"markdown","355415a0":"markdown","8b6e0995":"markdown"},"source":{"feebb4e1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","ca96c296":"custom_colors = [\"#023e8a\", \"#0096c7\",\"#90e0ef\",\"#ff5400\",\"#ffbd00\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))","a8a37d5c":"df=pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")\ndf.head()","86171e5c":"df.loc[df.ID.duplicated(),:]","d25cecbc":"df.info()","02f779b8":"#df['Reached.on.Time_Y.N']=df['Reached.on.Time_Y.N'].astype('object')","3342799e":"df.isnull().sum()","e60275fc":"df=df.dropna()\ndf.isnull().sum()","4b2de081":"#Let's also drop ID column\ndf=df.drop(['ID'],axis=1)","cd1b63aa":"object1 = df.select_dtypes(include='object').columns\nfloat1 = df.select_dtypes(exclude = 'object').columns","ef4a9e20":"i=0\nfor col in object1:\n    x=df[col].unique()\n    print(object1[i],x)\n    i +=1","bc5d5c3c":"#Just assigning names to binary values\ndef Reached_yn(i):\n    if i==0:\n        return \"On Time\"\n    return \"Delayed\"\ndf['Reached']=df['Reached.on.Time_Y.N'].apply(Reached_yn)\ndf['Reached'].unique() ","6104e613":"df.head()","8915ccd1":"df.describe()","0da707cc":"plt.figure(figsize=(10,5))\nboxplot = df.boxplot(column=['Prior_purchases','Discount_offered'])","d1d1bc6d":"print(df[['Prior_purchases','Discount_offered']].quantile(0.75))\nprint(df[['Prior_purchases','Discount_offered']].quantile(0.80))\nprint(df[['Prior_purchases','Discount_offered']].quantile(0.85))\nprint(df[['Prior_purchases','Discount_offered']].quantile(0.90))\nprint(df[['Prior_purchases','Discount_offered']].quantile(0.95))\nprint(df[['Prior_purchases','Discount_offered']].quantile(0.99))","87f51926":"print(len(df[df['Prior_purchases']>=10]))\nprint(len(df[df['Discount_offered']>=20]))","266d0a9c":"#df['Discount_offered'].filter(lambda x: '13' if x>=13 else x)\ndf['Discount_offered'].mask(df['Discount_offered']>=13,13,inplace=True)\ndf","61879a00":"plt.figure(figsize=(20,6))\ncorr=df.corr()\nsns.heatmap(corr,annot=True,cmap='BuPu', robust=True, center=0,\n            square=True, linewidths=.5)\n\nplt.title('Correlation between Fields', fontsize=20,font=\"Serif\")\nplt.show()","c096124b":"#Categorical Data Analysis\nData = df[['Warehouse_block','Product_importance','Mode_of_Shipment','Reached.on.Time_Y.N','Gender']]\ni = 1\nplt.figure(figsize=(20,12))\nfor col in Data:\n    plt.subplot(3,6,i)\n    x=Data[col].value_counts()\n    plot = x.plot.pie(fontsize=10, autopct='%1.0f%%')\n    i +=1","0a85ce87":"df.groupby(['Mode_of_Shipment','Reached'])['Cost_of_the_Product'].sum()","ee92a73a":"# creating pivot table to anaylze more\nshipment=df.loc[:,['Mode_of_Shipment','Reached','Cost_of_the_Product','Weight_in_gms']]\nshipment\ntable = pd.pivot_table(shipment, index=['Mode_of_Shipment','Reached']\n        ,values=['Reached','Cost_of_the_Product'\n                 ,'Weight_in_gms']\n                 ,aggfunc = {'Reached':np.size\n                             ,'Cost_of_the_Product':np.sum\n                             ,'Weight_in_gms':np.sum}     \n                      )\n\ntable['% Reached'] = (table.Reached \/ table.Reached.sum() * 100).astype(str) + '%'\ntable['% Weight'] = (table.Weight_in_gms \/ table.Weight_in_gms.sum() * 100).astype(str) + '%'\ntable","ca6f29cd":"#Let's also see how much of important products are getting delivered by all modes\nfig, ax = plt.subplots(nrows=1,ncols=3,figsize=(12,4))\nsns.countplot(x='Mode_of_Shipment',hue='Product_importance',data=df,ax=ax[0])\n#Which warehouse block is delivering more products on time and which one is delaying \nsns.countplot(x='Warehouse_block',hue='Reached',data=df,ax=ax[1])\nsns.countplot(data=df,x='Cost_of_the_Product',hue='Gender',ax=ax[2],palette='tab10')","e5d09f4d":"i = 1\nplt.figure(figsize = (13,4))\nfor col in object1:\n    plt.subplot(1,4,i)\n    sns.countplot(x = 'Reached.on.Time_Y.N',hue = df[col] , data = df)\n    i +=1","fa903b23":"i = 1\nplt.figure(figsize = (13,4))\nfor col in object1:\n    plt.subplot(1,4,i)\n    sns.countplot(x = 'Warehouse_block',hue = df[col] , data = df)\n    i +=1","be87c288":"fig,ax= plt.subplots(nrows=3,ncols=1,figsize=(10,10))\n\nsns.scatterplot(data=df,x='Weight_in_gms',y='Cost_of_the_Product',hue='Product_importance',ax=ax[0])\nax[0].title.set_text('Weight vs cost by product importance')\nsns.scatterplot(data=df,x='Weight_in_gms',y='Cost_of_the_Product',hue='Mode_of_Shipment',ax=ax[1])\nax[1].title.set_text('Weight vs cost by shipment mode')\nsns.scatterplot(data=df,x='Weight_in_gms',y='Cost_of_the_Product',hue='Reached',ax=ax[2])\nax[2].title.set_text('Weight vs cost by Reached')\n\nax[0].set_xlim(500,8000) \nax[1].set_xlim(500,8000) \nax[2].set_xlim(500,8000) \n\nplt.show()","6052d0b5":"Outliers=df[(df['Cost_of_the_Product']<= 180.0) & (df['Weight_in_gms']>6200.0)]\nOutliers","1b9c9b80":"#droping outliers observed in scatterplot\ndf.drop(df[(df['Cost_of_the_Product']<= 180.0) & (df['Weight_in_gms']>6200.0)].index,inplace=True)","d7177b30":"df","a88bcfed":" \n# One-hot encoding\ndf_encoded=pd.get_dummies(df,columns= ['Mode_of_Shipment','Warehouse_block','Product_importance'])\ndf_encoded\n\n# Binary encoding\ndf_encoded['Gender'] = df_encoded['Gender'].replace({'F': 0, 'M': 1})\n   ","78a41ffa":"df_encoded.columns","5ab61212":"X=df_encoded[['Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product',\n       'Prior_purchases', 'Gender', 'Discount_offered', 'Weight_in_gms',\n       'Mode_of_Shipment_Flight',\n       'Mode_of_Shipment_Road', 'Mode_of_Shipment_Ship', 'Warehouse_block_A',\n       'Warehouse_block_B', 'Warehouse_block_C', 'Warehouse_block_D',\n       'Warehouse_block_F', 'Product_importance_high',\n       'Product_importance_low', 'Product_importance_medium']]\nX.head()","32f25cf0":"y=df_encoded[['Reached.on.Time_Y.N']]\ny.head()","e5374532":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test =train_test_split(X, y, test_size=0.2, random_state=0)","89297e64":"from sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score , plot_roc_curve, accuracy_score\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\ndt = DecisionTreeClassifier(criterion = \"gini\",\n            random_state = 100,max_depth=3, min_samples_leaf=7)\nad = AdaBoostClassifier()\nsvm= SVC(random_state = 43, C = 10, gamma = 0.1, kernel ='rbf')\nrf= RandomForestClassifier()\nxg = XGBClassifier()\n#xgb = XGBClassifier(use_label_encoder=False, random_state = 43)\n\nmodels = [ dt,ad,rf]\nfor model in models:\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    scores = cross_val_score(model, X, y, cv=5).mean().round(3)\n    accuracy = metrics.accuracy_score(y_test, y_pred).round(3)\n    ROC = metrics.roc_auc_score(y_test, y_pred).round(3)\n    #f1score = metrics.f1_score(y_test, y_pred).round(3)\n    print(model, '\\n', 'Accuracy:', accuracy,'\\n', 'mean_CV_score:',scores, '\\n' , 'ROC:', ROC,'\\n')","2a8dfab2":"ad.feature_importances_  ","553b437d":"features=x_train.columns\nimportances = rf.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(1)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')","41a7227c":"features=x_train.columns\nimportances = dt.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(1)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')","3eda2ed2":"features=x_train.columns\nimportances = ad.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(1)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')","69d84a2a":"# Create adaboost classifer object\nabc =AdaBoostClassifier(n_estimators=50, base_estimator=rf,learning_rate=1)\n\n# Train Adaboost Classifer\nmodel = abc.fit(x_train, y_train)\n\n#Predict the response for test dataset\ny_pred = model.predict(x_test)\n\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","a7066605":"features=x_train.columns\nimportances = model.feature_importances_\nindices = np.argsort(importances)\n\nplt.figure(1)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), features[indices])\nplt.xlabel('Relative Importance')","26fcd97a":"from sklearn import tree","c1e65b72":"text_representation = tree.export_text(dt)\nprint(text_representation)","4cb3c114":"Features=X.columns\nFeatures\ntarget=df['Reached'].unique().tolist()\ntarget","b1a85905":"fig = plt.figure(figsize=(25,20))\nfrom sklearn.tree import plot_tree\n_ = tree.plot_tree(dt, \n          feature_names = Features, \n          class_names = target, \n          filled = True, \n          rounded = True)","c7bbe4dd":"fig.savefig(\"decistion_tree.png\")","caeac99e":"#Checking cofusion Metrics\nprint(confusion_matrix(y_test,y_pred))","c7a838b7":"PCA_set= df_encoded.loc[:,['Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product',\n       'Prior_purchases', 'Gender', 'Discount_offered', 'Weight_in_gms',\n       'Mode_of_Shipment_Flight',\n       'Mode_of_Shipment_Road', 'Mode_of_Shipment_Ship', 'Warehouse_block_A',\n       'Warehouse_block_B', 'Warehouse_block_C', 'Warehouse_block_D',\n       'Warehouse_block_F', 'Product_importance_high',\n       'Product_importance_low', 'Product_importance_medium']]","20e4067c":"from sklearn.preprocessing import StandardScaler\nx = StandardScaler().fit_transform(PCA_set)\nPCA_set","a38dcf6a":"feat_cols = ['feature'+str(i) for i in range(x.shape[1])]","19d84718":"set = pd.DataFrame(x,columns=feat_cols)","c0eac8e9":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\npca_values = pca.fit_transform(x)","4e64a5de":"principal_df = pd.DataFrame(data = pca_values\n             , columns = ['principal component 1', 'principal component 2'])","bc6a619a":"principal_df.tail()","9c203ae2":"Cust_segment = X","cbce7d61":"from sklearn.cluster import KMeans\nwcss = []\nfor k in range(1,11):\n    kmeans=KMeans(n_clusters=k, init=\"k-means++\")\n    kmeans.fit(Cust_segment)\n    wcss.append(kmeans.inertia_)","9a497e1c":"wcss","763bf536":"plt.plot(range(1,11),wcss)\nplt.title(\"Elbow\")\nplt.show()","122d5e6b":"kmeans= KMeans(n_clusters=3, init=\"k-means++\")\ncluster=kmeans.fit_predict(Cust_segment)\ncluster","8f022341":"pd.Series(cluster).value_counts()","ffda2169":"df['label']=cluster","6cd2a7bc":"df['label'].unique()","433f787e":"df","a0b3d1cf":"plt.scatter(data=df,x='Weight_in_gms', y='Discount_offered', c='label')\nplt.scatter(data=df,x='Weight_in_gms', y='Cost_of_the_Product', c='label')\nplt.scatter(data=df,x='Reached.on.Time_Y.N', y='label')","3e7c6798":"from mpl_toolkits import mplot3d\n","8d1d53af":"%matplotlib notebook\nfig=plt.figure(figsize=(12,6))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df.Prior_purchases[df.label == 0], df[\"Reached.on.Time_Y.N\"][df.label == 0], \n           df[\"Discount_offered\"][df.label == 0], c='blue', s=60)\nax.scatter(df.Prior_purchases[df.label == 1], df[\"Reached.on.Time_Y.N\"][df.label == 1], \n           df[\"Discount_offered\"][df.label == 1], c='red', s=60)\nax.scatter(df.Prior_purchases[df.label == 2], df[\"Reached.on.Time_Y.N\"][df.label == 2], \n           df[\"Discount_offered\"][df.label == 2], c='green', s=60)\n\nax.view_init(30, 185)\n\nplt.show()","6c631cce":"df[df.label == 1]","8dd75dae":"High_Payment_buyers = df[df['Cost_of_the_Product']>210]\nHigh_Payment_buyers","1b0f8210":"#Categorical Data Analysis\nData = High_Payment_buyers[['Product_importance','Reached','Gender','Prior_purchases']]\ni = 1\nplt.figure(figsize=(25,15))\nfor col in Data:\n    plt.subplot(3,6,i)\n    x=Data[col].value_counts()\n    plot = x.plot.pie(fontsize=10, autopct='%1.0f%%')\n    i +=1","4e0c9d47":"sns.barplot(data=High_Payment_buyers,x='Prior_purchases',y='Cost_of_the_Product')","b5d366e3":"Customer_with_bad_experience = High_Payment_buyers[ \n                    (High_Payment_buyers['Customer_care_calls']>3) & \n                    (High_Payment_buyers['Reached']=='Delayed')].sort_values(by=[\n    'Customer_care_calls','Customer_rating'])","10506811":"Observations: \n    1. F blcok delivers almost 1\/3 of total orders\n    2. 91% products are medium to low importance. \n    2. Ships are delivering major chunk of products.\n    4. almost 60% products are getting delayed\n    5. No trend found in gender purchasing scenario","ed4af268":"Customer_with_bad_experience['Customer_care_calls'].value_counts()","58213089":"Ships are causing more delay in delivering products but it's also the only mode that is delivery very high weighted products having almost 36.3+31.4= 67.7 %  of weight out of total and 7462 products out of 10999 products","0b809c3e":"## Creating Adaboost classifier - using random forest as weak learner here","856bd0a4":"### Decision Tree with Gini Index","2a4ea122":"### Decision Tree visualization","a6c8921e":"All the high payment buyers are repeat customers, they are either purchasing for 2nd time or more.","6af710c9":"These customers has called more than 3 times still the order delayed for them. ","35e940b7":"57% of orders are getting delayed for high payment buyers. ","d6bc3446":"# PCA","d5558eae":"It's observed that Prior_purchases and Discount_offered\tare drastically changes after 75th percentile. Let's analyze more.","4c344600":"## Customer Segmentation","f3a13081":"Prior purchase and discount offered has some outliers whi needs to be treated so that model doesn't get affected.","79635217":"Adaboost model has given good accuracy and ROC as well","f05d58ea":"1. 1st scattered plot - It's clearly visible that there are few outliers, products having low cost but very heavy weight, this is happening in ship mode of delivery and one outlier is also for road delivery mode.\n2. 2nd scattered plot - The outliers belongs to medium importance products list.\n3.All of them are delayed products","c291d9ea":"These results indicates that warehouse block F has most contribution in delivering products, \nit seems to be a bigger warehouse than others maybe.\n","45176aa4":"Since the count of outliers very less for prior purchase, removing them straight from data. Discount offered having around 15-20% outliers. this needs some treatment. \nConsidering discount offered 75th percentile value as max\nand replacing higher discounts with it in below code. We could also apply mean\/meadian to treat those but let's assume that these are higher discount orders and considering accordingly","49363eb1":"This method doesn't much improve the accuracy or information","d36ea104":"It's clear that there are no strong correlation between variables","355415a0":"### High Payment Buyers Analysis","8b6e0995":"## Model Building"}}