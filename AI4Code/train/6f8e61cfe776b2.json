{"cell_type":{"4be7b0a6":"code","c44b1dd4":"code","8d0cb544":"code","c8fb95f3":"code","246ced27":"code","a10a8a84":"code","5d51ad0e":"code","e25c5e8d":"code","25e17674":"code","ffb0c690":"code","db4125db":"code","53355c31":"code","a45377cc":"code","ab05e190":"code","d57e762f":"code","11dae9e7":"code","52ee2927":"code","2f7f9421":"code","9aa389e1":"markdown"},"source":{"4be7b0a6":"import numpy as np\nimport glob\nimport shutil\nimport pandas as pd\nimport cv2\nimport os","c44b1dd4":"# \u67e5\u8be2\u663e\u5361\u4fe1\u606f\n!nvidia-smi --query-gpu=name --format=csv,noheader","8d0cb544":"# \u66f4\u65b0pip\n!pip install --upgrade pip\n\n# \u4e0b\u8f7dYOLOv5\n!git config --global url.\"https:\/\/\".insteadOf git:\/\/\n!git clone git:\/\/github.com\/ultralytics\/yolov5.git\n\n# \u79fb\u52a8\u6587\u4ef6\u5939\u5e76\u5b89\u88c5yolo V5\n!mv \/kaggle\/working\/yolov5\/* .\/\n!pip install -r requirements.txt\n!pip uninstall -y wandb\n!ls .\/","c8fb95f3":"\"\"\"\n# apex \u5b89\u88c5cuda\n!git clone https:\/\/github.com\/NVIDIA\/apex\n!pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" .\/apex\n\"\"\"","246ced27":"# \"A400M\", \"AG600\", \nclasses = [\"A10\",\"A400M\", \"AG600\",\"B1\",\"B2\",\"B52\", \"Be200\", \"C130\",\"C17\",\"C5\", \"E2\",\"EF2000\",\n           \"F117\",\"F14\",\"F15\",\"F16\",\"F18\",\"F22\",\"F35\",\"F4\",\n           \"JAS39\",\"MQ9\",\"Mig31\",\"Mirage2000\",\"RQ4\",\"Rafale\",\n           \"SR71\",\"Su57\",\"Tu160\",\"Tu95\",\"U2\",\"US2\", \"V22\",\"XB70\",\"YF23\",\"J20\"]\nclasses = np.array(classes)","a10a8a84":"csv_paths = glob.glob('..\/input\/militaryaircraftdetectiondataset\/dataset\/dataset\/*.csv')\njpg_paths = glob.glob('..\/input\/militaryaircraftdetectiondataset\/dataset\/dataset\/*.jpg')\nmedia_path = glob.glob('..\/input\/test-media\/Top 7 Badass Planes of the US Military-PU_OxwH1guM.mp4')\ncsv_paths.sort()\njpg_paths.sort()\nprint(csv_paths[0])\nprint(jpg_paths[0])\nprint(len(csv_paths), len(jpg_paths))","5d51ad0e":"os.makedirs('yolov5\/data\/train\/images', exist_ok=True)\nos.makedirs('yolov5\/data\/train\/labels', exist_ok=True)\n\nos.makedirs('yolov5\/data\/valid\/images', exist_ok=True)\nos.makedirs('yolov5\/data\/valid\/labels', exist_ok=True)\n\nos.makedirs('yolov5\/data\/test\/images', exist_ok=True)\nos.makedirs('yolov5\/data\/test\/labels', exist_ok=True)\n\n!ls yolov5\/data\n\n# os.makedirs('yolov5\/model\/train', exist_ok=True)","e25c5e8d":"# n_images = len(csv_paths)\n# n_split = n_images\/\/20\n\n# # shutil.copy('..\/input\/yoloconfig\/best0\/best0.pt', 'yolov5\/model\/train\/last.pt')\n# for i, (csv_path, jpg_path) in enumerate(zip(csv_paths, jpg_paths)):\n#     # \u6807\u5b9a\u6846\u6570\u91cf\n#     annotations = np.array(pd.read_csv(csv_path))\n#     # 1\u4efd\u6d4b\u8bd5\uff0c4\u4efd\u9a8c\u8bc1\uff0c15\u4efd\u8bad\u7ec3\n#     if i < n_split:\n#         shutil.copy(jpg_path, 'yolov5\/data\/test\/images\/' + os.path.basename(jpg_path))\n#         txt_file_path = 'yolov5\/data\/test\/labels\/' + os.path.basename(csv_path)[:-4]+'.txt'\n#     elif n_split <= i < n_split*5:\n#         shutil.copy(jpg_path, 'yolov5\/data\/valid\/images\/' + os.path.basename(jpg_path))\n#         txt_file_path = 'yolov5\/data\/valid\/labels\/' + os.path.basename(csv_path)[:-4]+'.txt'\n#     else:\n#         shutil.copy(jpg_path, 'yolov5\/data\/train\/images\/' + os.path.basename(jpg_path))\n#         txt_file_path = 'yolov5\/data\/train\/labels\/' + os.path.basename(csv_path)[:-4]+'.txt'\n    \n    \n    \n#     with open(txt_file_path, mode='w') as f:\n#         for annotation in annotations:\n#             width = annotation[1]\n#             height = annotation[2]\n#             class_name = annotation[3]\n#             xmin = annotation[4]\n#             ymin = annotation[5]\n#             xmax = annotation[6]\n#             ymax = annotation[7]\n#             x_center = 0.5*(xmin+xmax)\n#             y_center = 0.5*(ymin+ymax)\n#             b_width = xmax - xmin\n#             b_height= ymax - ymin\n#             class_num = np.where(classes==class_name)\n#             try:\n#                 class_num = class_num[0][0]\n#             except:\n#                 print(class_name)\n#                 continue\n#             output_string = '{} {} {} {} {}\\n'.format(class_num,\n#                                                     x_center\/width,\n#                                                     y_center\/height,\n#                                                     b_width\/width,\n#                                                     b_height\/height)\n#             f.write(output_string)\n# print(len(glob.glob('yolov5\/data\/test\/labels\/*.txt')))\n# print(len(glob.glob('yolov5\/data\/valid\/labels\/*.txt')))\n# print(len(glob.glob('yolov5\/data\/train\/labels\/*.txt')))","25e17674":"# !ls yolov5\/data\/valid\/images\n# !ls yolov5\/data\/valid\/labels","ffb0c690":"# # train\n# %cd \/kaggle\/working\n# !python train.py --batch 88 \\\n#                  --img 640 \\\n#                  --epochs 50 \\\n#                  --data ..\/input\/yoloconfig\/yolov5\/data.yaml \\\n# #                  --cfg ..\/input\/yoloconfig\/yolov5\/yolov5x.yaml \\\n#                  --hyp ..\/input\/yoloconfig\/yolov5\/hyp.yaml \\\n#                  --name military_aircraft_detection \\\n#                  --weights \/kaggle\/input\/yoloconfig\/best_s\/best_s.pt --device 0\n# #                  --weights ..\/input\/yoloconfig\/best2\/best.pt --device 0\n","db4125db":"!pip install yt-dlp\n%cd \/kaggle\/working\n!yt-dlp -o \"001.mp4\" -f \"bestvideo[ext=mp4]\" \"https:\/\/www.youtube.com\/watch?v=fy2LpIsCch0\"","53355c31":"# detect by pretrained weights\n'''\n!python detect.py --weights ..\/input\/yolov5config\/34-classes-trained.pt \\\n                  --img 1024 \\\n                  --conf 0.2 \\\n                  --iou-thres 0.4 \\\n                  --agnostic-nms \\\n                  --augment \\\n                  --source .\/yolov5\/data\/valid\/images \\\n                  --name inference_valid\n'''\n\n!python detect.py --weights ..\/input\/yoloconfig\/best_s\/best_s.pt \\\n                  --img 640 \\\n                  --conf 0.2 \\\n                  --iou-thres 0.5 \\\n                  --agnostic-nms \\\n                  --augment \\\n                  --source .\/001.mp4 \\\n                 # --source 'https:\/\/www.youtube.com\/watch?v=gwArqmF9hlU' \\\n                  --name inference_test\n","a45377cc":"!cp \/kaggle\/working\/runs\/detect\/exp2\/001.mp4 \/kaggle\/working","ab05e190":"# version = '002'\n# dataset_name = 'weights'\n# folder_name = 'MyWeight'\n# user_name = 'imchenyuxi'","d57e762f":"# # create new folder\n# os.system(f'mkdir {folder_name}')\n# # move json file to before folder\n# os.system(f'cp -r ..\/input\/{dataset_name}\/kaggle.json \/kaggle\/working\/{folder_name}') \n# # move train result to folder\n# os.system(f'mv .\/runs\/train\/* .\/{folder_name}')\n# # Set base environment \n# os.environ['KAGGLE_CONFIG_DIR'] = f'\/kaggle\/working\/{folder_name}'\n# os.system(f'chmod 600 \/kaggle\/working\/{folder_name}\/kaggle.json')\n\n# # test Kaggle API condition\n# !kaggle competitions list","11dae9e7":"# import json\n# import datetime\n\n# def get_time_str():    \n#     curr_time = datetime.datetime.now()\n#     time = datetime.datetime.strftime(curr_time,'%m_%d_%H_%M_%S')\n#     return time\n\n# dataset = 'weights'\n# def sync():\n#     # Initiate\n#     os.system(f'kaggle datasets init -p {folder_name}')\n    \n#     # Edit the dataset-metadata.json\n#     with open(f'.\/{folder_name}\/dataset-metadata.json', \"r\",encoding='utf-8') as jsonFile:\n#         data = json.load(jsonFile)\n#     data[\"title\"] = version\n#     data['id'] = f'{user_name}\/{dataset}'\n#     with open(f'.\/{folder_name}\/dataset-metadata.json', \"w\") as jsonFile:\n#         json.dump(data, jsonFile,ensure_ascii=False)\n#     # Upload your folder as a new version of the dataset\n#     # -m VERSION_NOTES     Message describing the new version\n#     # -p FOLDER    Folder for upload    \n#     # --dir-mode{skip,zip,tar}     means whether upload folder and compress file    \n#     # -d    Delete old versions of this dataset\n#     exit = os.system('kaggle datasets version --dir-mode tar -m' + get_time_str() + f' -p {folder_name}')\n    \n#     if(exit == 0):\n#         print(\"Uploaded!\")\n#     else:\n#         print(\"Failed to upload!, exit code \", exit)\n\n# sync()","52ee2927":"# !rm -r .\/output\n# !mv .\/runs .\/output","2f7f9421":"'''\n!rm -r .\/yolov5\n!rm -r .\/utils\n!rm -r .\/data\n!rm -r .\/models\n!rm -r .\/weights\n!rm .\/*\n'''","9aa389e1":"\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u6765\u5c06\u8fd0\u884c\u5b8c\u7684\u6743\u91cd\u4fdd\u5b58\u81f3\u4e91\u7aef\u6570\u636e\u96c6\uff0c\u7528\u6765\u4e0b\u6b21\u8c03\u7528\u7ee7\u7eed\u8bad\u7ec3\n\n\u8be6\u7ec6\u7684API\u4f7f\u7528\u6559\u7a0b\u8be6\u89c1\u4ed3\u5e93\uff1ahttps:\/\/github.com\/Kaggle\/kaggle-api"}}