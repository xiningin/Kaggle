{"cell_type":{"295e8929":"code","8e8e8fd6":"code","480b5d0e":"code","e822273e":"code","02fcf9a9":"code","553d9e79":"code","11e233c8":"code","f337b94f":"code","2eaf0cc4":"code","0abdd84f":"code","2259e988":"code","d82bae96":"code","9d1a15dd":"code","b9c17c38":"code","49ce4591":"code","e3c3c094":"code","7265dd92":"code","71f31f5c":"code","e4d5facb":"code","9748560c":"code","637000ea":"code","66ac34b9":"code","3559911d":"code","55044a45":"code","2773223d":"code","bc3c440c":"code","8bf24934":"code","1831a18d":"markdown","1c9a29a2":"markdown","cd10b9bb":"markdown","55114685":"markdown"},"source":{"295e8929":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e8e8fd6":"from statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom itertools import product\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","480b5d0e":"df=pd.read_csv('\/kaggle\/input\/jjcsv\/jj.csv')\ndf['date']=df.date.apply(lambda x: pd.Timestamp(x))\ndf.head()","e822273e":"plt.plot(df['data'])\nplt.xticks(rotation=90)\nplt.title('Johnson and Johnson quarterly share prices')\nplt.ylabel('share price')\nplt.show()","02fcf9a9":"plot_acf(df['data']);\nplot_pacf(df['data']);","553d9e79":"print ('90 days gap between two datapoints with a variance of only ',(df.date.diff()[1:]\/pd.Timedelta('1 days')).var()**0.5)","11e233c8":"a=0.2\ndf['level']=float('NAN')\ndf['forecast']=float('NAN')","f337b94f":"ts=df.data","2eaf0cc4":"for i in range(4):\n    ts=ts.append(pd.Series([ts.mean()])).reset_index(drop=True)\n    i=i+1","0abdd84f":"sns.lineplot(df.index,df.data)\nplt.xlabel('quarter')\nplt.ylabel('share price')\nplt.title('share price quarterly')\nplt.show()","2259e988":"ts=df.drop('date',axis=1)\nn_forecast=4","d82bae96":"### appending to the bottom of the df\nts=ts.append(pd.DataFrame(data=np.ones((n_forecast,ts.shape[1]))*float('NAN'),columns=ts.columns))\nts.reset_index(drop=True,inplace=True)\nts","9d1a15dd":"### appending to the top of the df\nts.index=ts.index+1\nts=ts.append(pd.DataFrame(data=np.ones((1,ts.shape[1]))*float('NAN'),columns=ts.columns))\nts.sort_index(inplace=True)\nts","b9c17c38":"alpha=0.8\nts.loc[0,'level']=0.71","49ce4591":"for i in np.arange(1,len(ts)):\n    ts.loc[i,'level']=ts.loc[i,'data']*alpha + (1-alpha)*ts.loc[i-1,'level']\n    if i< len(ts)-n_forecast:\n        ts.loc[i,'forecast']=ts.loc[i-1,'level']\n    else:\n        ts.loc[i,'forecast']=ts.loc[len(ts)-(n_forecast+1),'level']","e3c3c094":"ts","7265dd92":"fig,ax=plt.subplots(figsize=(16,4))\nax.plot(ts.data,'blue',label='observations')\nax.plot(ts.index,ts.forecast,'k--',label='forecast')\nax.set(title='Forecast of Johnson&Johnson Quarterly EPS (Exponential smoothing)')\nplt.legend()\nplt.show()","71f31f5c":"ts=df.drop('date',axis=1)\nn_forecast=4","e4d5facb":"ts['trend']=float('nan')\nts","9748560c":"### appending to the bottom of the df\nts=ts.append(pd.DataFrame(data=np.ones((n_forecast,ts.shape[1]))*float('NAN'),columns=ts.columns))\nts.reset_index(drop=True,inplace=True)\n\n### appending to the top of the df\nts.index=ts.index+1\nts=ts.append(pd.DataFrame(data=np.ones((1,ts.shape[1]))*float('NAN'),columns=ts.columns))\nts.sort_index(inplace=True)\nts","637000ea":"ts.loc[0,'level']=ts.loc[1,'data']\nts.loc[0,'trend']=ts.loc[2,'data']-ts.loc[1,'data']\nts","66ac34b9":"alpha=0.8\nbeta=0.8","3559911d":"for i in np.arange(1,len(ts)):\n    ts.loc[i,'level'] = ts.loc[i,'data']*alpha + (1-alpha)*(ts.loc[i-1,'level']+ts.loc[i-1,'trend'])\n    ts.loc[i,'trend'] = (ts.loc[i,'level']-ts.loc[i-1,'level'])*beta + (1-beta)*ts.loc[i-1,'trend']\n    \n    if i< len(ts)-n_forecast:\n        ts.loc[i,'forecast'] = ts.loc[i-1,'level']\n    else:\n        h=(i-(len(ts)-(n_forecast+1)))\n        print(h)\n        ts.loc[i,'forecast'] = ts.loc[len(ts)-(n_forecast+1),'level'] +  h*ts.loc[len(ts)-(n_forecast+1),'trend']","55044a45":"ts","2773223d":"fig,ax=plt.subplots(figsize=(16,4))\nax.plot(ts.data,'blue',label='observations')\nax.plot(ts.index,ts.forecast,'k--',label='forecast')\nax.set(title='Forecast of Johnson&Johnson Quarterly EPS (Holts)')\nplt.legend()\nplt.show()","bc3c440c":"phi=0.8\nfor i in np.arange(1,len(ts)):\n    ts.loc[i,'level'] = ts.loc[i,'data']*alpha + (1-alpha)*(ts.loc[i-1,'level']+ts.loc[i-1,'trend'])\n    ts.loc[i,'trend'] = (ts.loc[i,'level']-ts.loc[i-1,'level'])*beta + (1-beta)*ts.loc[i-1,'trend']\n    \n    if i< len(ts)-n_forecast:\n        ts.loc[i,'forecast'] = ts.loc[i-1,'level']\n    else:\n        h=(i-(len(ts)-(n_forecast+1)))\n        h_damp=phi*(1-phi**(h))\/(1-phi)\n        print(h_damp)\n        ts.loc[i,'forecast'] = ts.loc[len(ts)-(n_forecast+1),'level'] +  h_damp*ts.loc[len(ts)-(n_forecast+1),'trend']","8bf24934":"fig,ax=plt.subplots(figsize=(16,4))\nax.plot(ts.data,'blue',label='observations')\nax.plot(ts.index,ts.forecast,'k--',label='forecast')\nax.set(title='Forecast of Johnson&Johnson Quarterly EPS (damped Holts)')\nplt.legend()\nplt.show()","1831a18d":"# Replacing h by damping factor phi","1c9a29a2":"# Simple exponential smoothing","cd10b9bb":"# Holts Linear method","55114685":"# Simple Averaging"}}