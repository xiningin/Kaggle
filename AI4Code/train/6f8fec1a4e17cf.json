{"cell_type":{"6d1c3970":"code","144ff6b9":"code","75be6d68":"code","0847cb04":"code","79c60457":"code","b55e5c60":"code","86a0080b":"code","81fdbea2":"code","defefe98":"code","5d1e9138":"code","699b3a24":"code","88de622d":"code","631dc9c0":"code","e89d464f":"code","c73658a8":"code","7c77d1ef":"code","76b2961e":"code","1d739227":"code","cf7bcfb6":"code","04ea2a2e":"code","c6eef89d":"code","e0a3847d":"code","bf39111d":"code","5b1fb458":"code","6be8cdcc":"code","dca8ee0d":"markdown","f53a095e":"markdown","5acdb928":"markdown","db1308e7":"markdown","f91be427":"markdown","fb507def":"markdown","51f14b5e":"markdown","84a737e4":"markdown","29241b66":"markdown","27ab1741":"markdown","9f40998f":"markdown","9c21eca5":"markdown"},"source":{"6d1c3970":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix","144ff6b9":"df = pd.read_csv(\"..\/input\/diabetesdataset\/diabetes.csv\")","75be6d68":"df.head()","0847cb04":"df.isnull().sum()","79c60457":"df.describe().T","b55e5c60":"sns.countplot(df.Outcome)","86a0080b":"plt.figure(figsize = (12,6)) \nsns.heatmap(df.corr(),robust=True,fmt='.1g',linewidths=1.3,linecolor = 'gold', annot=True)","81fdbea2":"X = df.drop(columns=[\"Outcome\"], axis=1)\nY = df[\"Outcome\"]","defefe98":"X.shape, Y.shape","5d1e9138":"# Data Normalization\n\nX = (X-np.min(X))\/(np.max(X)-np.min(X)).values","699b3a24":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","88de622d":"x_train.shape, x_test.shape","631dc9c0":"DS = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 12)","e89d464f":"DS.fit(x_train, y_train)","c73658a8":"KN = KNeighborsClassifier(n_neighbors=1)","7c77d1ef":"KN.fit(x_train, y_train)","76b2961e":"RF = RandomForestClassifier()","1d739227":"RF.fit(x_train, y_train)","cf7bcfb6":"DS_result = DS.score(x_test, y_test)\nprint(\"Accuracy: %.3f%%\" % (DS_result*100.0))","04ea2a2e":"DS_pred = DS.predict(x_test) \n\nconfusion_matrix(y_test,DS_pred)","c6eef89d":"KN_result = KN.score(x_test, y_test)\nprint(\"Accuracy: %.3f%%\" % (KN_result*100.0))","e0a3847d":"KN_pred = KN.predict(x_test) \n\nconfusion_matrix(y_test,KN_pred)","bf39111d":"RF_result = RF.score(x_test, y_test)\nprint(\"Accuracy: %.3f%%\" % (RF_result*100.0))","5b1fb458":"RF_pred = RF.predict(x_test) \n\nconfusion_matrix(y_test,RF_pred)","6be8cdcc":"index = [\"RF\", \"KNN\", \"DS\"]\nscores = [RF_result, KN_result, DS_result]\n\nfig = px.pie(df, values=scores, names=index, title='Models Comparison')\nfig.show()","dca8ee0d":"## Data Collection and Data Processing","f53a095e":"KNN Classifier","5acdb928":"## Importing the Dependencies","db1308e7":"Random Forest Classifier","f91be427":"Desicion Tree Classifier","fb507def":"## Train Test Split","51f14b5e":"## Model Training\n\n\n1.   Decision Tree Classifier\n2.   KNN Classifier\n3.   Random Forest Classifier\n\n","84a737e4":"Random Forest Score & Confusion Matrix","29241b66":"Decision Tree Score & Confusion Matrix","27ab1741":"KNN Score & Confusion Matrix","9f40998f":"## Models Comparison","9c21eca5":"## Model Evaluation"}}