{"cell_type":{"564dffc6":"code","566680f7":"code","5df43024":"code","7b57b2c8":"code","3d28a3ee":"code","76d1ea0a":"code","71d916ec":"code","b8feb937":"code","f0a8c124":"code","15771caa":"markdown","38cd152e":"markdown","3c151bb3":"markdown","660c5e0d":"markdown"},"source":{"564dffc6":"import seaborn as sns\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport regex as re\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","566680f7":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5df43024":"albums = pd.read_csv('\/kaggle\/input\/album_details.csv')\ndisplay(albums.sample(10))\ndisplay(albums.shape)","7b57b2c8":"songs = pd.read_csv('\/kaggle\/input\/songs_details.csv')\ndisplay(songs.sample(10))\ndisplay(songs.shape)","3d28a3ee":"def clean(song):    \n    # Contractions\n    song = song.lower()\n    \n    song = re.sub(r\"he's\", \"he is\", song)\n    song = re.sub(r\"there's\", \"there is\", song)\n    song = re.sub(r\"we're\", \"we are\", song)\n    song = re.sub(r\"that's\", \"that is\", song)\n    song = re.sub(r\"won't\", \"will not\", song)\n    song = re.sub(r\"they're\", \"they are\", song)\n    song = re.sub(r\"can't\", \"cannot\", song)\n    song = re.sub(r\"wasn't\", \"was not\", song)\n    song = re.sub(r\"aren't\", \"are not\", song)\n    song = re.sub(r\"isn't\", \"is not\", song)\n    song = re.sub(r\"what's\", \"what is\", song)\n    song = re.sub(r\"haven't\", \"have not\", song)\n    song = re.sub(r\"hasn't\", \"has not\", song)\n    song = re.sub(r\"there's\", \"there is\", song)\n    song = re.sub(r\"he's\", \"he is\", song)\n    song = re.sub(r\"it's\", \"it is\", song)\n    song = re.sub(r\"you're\", \"you are\", song)\n    song = re.sub(r\"i'm\", \"i am\", song)\n    song = re.sub(r\"shouldn't\", \"should not\", song)\n    song = re.sub(r\"wouldn't\", \"would not\", song)\n    song = re.sub(r\"i'm\", \"i am\", song)\n    song = re.sub(r\"isn't\", \"is not\", song)\n    song = re.sub(r\"here's\", \"here is\", song)\n    song = re.sub(r\"you've\", \"you have\", song)\n    song = re.sub(r\"we're\", \"we are\", song)\n    song = re.sub(r\"what's\", \"what is\", song)\n    song = re.sub(r\"couldn't\", \"could not\", song)\n    song = re.sub(r\"we've\", \"we have\", song)\n    song = re.sub(r\"who's\", \"who is\", song)\n    song = re.sub(r\"y'all\", \"you all\", song)\n    song = re.sub(r\"would've\", \"would have\", song)\n    song = re.sub(r\"it'll\", \"it will\", song)\n    song = re.sub(r\"we'll\", \"we will\", song)\n    song = re.sub(r\"we've\", \"we have\", song)\n    song = re.sub(r\"he'll\", \"he will\", song)\n    song = re.sub(r\"y'all\", \"you all\", song)\n    song = re.sub(r\"weren't\", \"were not\", song)\n    song = re.sub(r\"didn't\", \"did not\", song)\n    song = re.sub(r\"they'll\", \"they will\", song)\n    song = re.sub(r\"they'd\", \"they would\", song)\n    song = re.sub(r\"don't\", \"do n't\", song)\n    song = re.sub(r\"they've\", \"they have\", song)\n    song = re.sub(r\"i'd\", \"i would\", song)\n    song = re.sub(r\"You\\x89\u00db\u00aare\", \"You are\", song)\n    song = re.sub(r\"where's\", \"where is\", song)\n    song = re.sub(r\"we'd\", \"we would\", song)\n    song = re.sub(r\"i'll\", \"i will\", song)\n    song = re.sub(r\"weren't\", \"were not\", song)\n    song = re.sub(r\"they're\", \"they are\", song)\n    song = re.sub(r\"let's\", \"let us\", song)\n    song = re.sub(r\"it's\", \"it is\", song)\n    song = re.sub(r\"can't\", \"cannot\", song)\n    song = re.sub(r\"don't\", \"do not\", song)\n    song = re.sub(r\"you're\", \"you are\", song)\n    song = re.sub(r\"i've\", \"I have\", song)\n    song = re.sub(r\"that's\", \"that is\", song)\n    song = re.sub(r\"i'll\", \"i will\", song)\n    song = re.sub(r\"doesn't\", \"does not\", song)\n    song = re.sub(r\"i'd\", \"i would\", song)\n    song = re.sub(r\"didn't\", \"did not\", song)\n    song = re.sub(r\"ain't\", \"am not\", song)\n    song = re.sub(r\"you'll\", \"you will\", song)\n    song = re.sub(r\"i've\", \"i have\", song)\n    song = re.sub(r\"don't\", \"do not\", song)\n    song = re.sub(r\"i'll\", \"i will\", song)\n    song = re.sub(r\"i'd\", \"i would\", song)\n    song = re.sub(r\"let's\", \"let us\", song)\n    song = re.sub(r\"you'd\", \"you would\", song)\n    song = re.sub(r\"it's\", \"it is\", song)\n    song = re.sub(r\"ain't\", \"am not\", song)\n    song = re.sub(r\"haven't\", \"have not\", song)\n    song = re.sub(r\"could've\", \"could have\", song)\n    song = re.sub(r\"youve\", \"you have\", song)\n    song = re.sub(r\"ev'ry\" , 'every' , song)\n    song = re.sub(r\"coz\" , 'because' , song)\n    song = re.sub(r\"n\\'t\" , 'not' , song)\n    song = re.sub(r\"that'll\", \"that will\" ,song)\n    song = re.sub(r\"-\", \"\" ,song)\n    song = re.sub(r\"[\\.]+\" , \" . \", song)\n    song = re.sub(r\"\\[[\\sa-z0-9:-]*\\]\" , \" \",song)\n#     song = re.sub(r\"\\([a-zA-Z0-9\\s\\W]*\\)\" , \" \", song)\n    song = re.sub(r\"\\n\\r\\n\", \"\\n\\n\", song)\n    song = re.sub(r\"\\r\\n\", \"\\n\\n\", song)\n    song = re.sub(r\"\\n\\n\\n\\n\", \"\\n\\n\", song)\n    song = re.sub(r\"\\n\\n\\n\", \"\\n\\n\", song)\n    song = re.sub(r\"\\n\\n\", \" <PARA> \", song)\n    song = re.sub(r\"\\n\", \" <LINE> \", song)\n    song = re.sub(r\"\u00e2\\x80\\x98\" , \"'\" , song)\n    song = re.sub(r\"\u00e2\\x80\\x99\" , \"'\" , song)\n    song = re.sub(r\"\u00e2\\x80\u00a6\" , \"\" , song)\n    \n    # Words with punctuations and special characters\n    punctuations = ',@#!?+&*-%.\/();$=|{}^' + \"`\"\n    remove_punctions = \"'[]:?!()\" + '\"'\n    for p in punctuations:\n        song = song.replace(p, f' {p} ')\n    for p in remove_punctions:\n        song = song.replace(p , '')\n    return song","76d1ea0a":"class lyricsClass:\n    def __init__(self , lyrics_filename = '\/kaggle\/input\/lyrics.csv'):\n        self.lyrics_filename = lyrics_filename\n        self.read_lyrics()\n        self.clear_text() # cleaning and Preparing the Lyrics\n    \n    # Reading the Lyrics File\n    def read_lyrics(self):\n        self.lyrics = pd.read_csv(self.lyrics_filename)\n   \n    # Display the Details\n    def print_sample(self , size = 10):\n        display(self.lyrics.sample(size))\n    def print_info(self):\n        display(self.lyrics.info())\n    def print_random_lyrics(self , size = 1):\n        print(self.lyrics.sample(size).values)\n    \n    #filtering the Text to New Column\n    def clear_text(self):\n        self.lyrics['clearLyrics'] = self.lyrics.lyrics.apply(lambda x: clean(x))\n        \nlyrics = lyricsClass()\nsns.set_style(\"darkgrid\")","71d916ec":"lyrics.print_random_lyrics()","b8feb937":"lyrics.lyrics","f0a8c124":"plt.figure(figsize=(15,35))\nplt.yticks(rotation=10)\nplt.xticks(rotation=10)\nax = sns.countplot(y = 'singer_name' , data = songs, order = songs['singer_name'].value_counts().index )\nfor p in ax.patches:\n    height = p.get_width()\n    ax.text(height+20,p.get_y()+p.get_height()\/1.2,\n            '{:1.2f}%'.format(height\/songs.shape[0]*100),\n            ha=\"center\" , fontsize = 'small') \n    if height>30:\n        ax.text(height-10,p.get_y()+p.get_height()\/1.2,\n            '{}'.format(height),\n            ha=\"center\", fontsize = 'small') \nplt.show()","15771caa":"# Let's check lyrics.csv","38cd152e":"There are 3 csv files in the current version of the dataset:\n","3c151bb3":"# Let's check songs_details.csv","660c5e0d":"# Let's check album_details.csv"}}