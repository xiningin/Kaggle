{"cell_type":{"654dc845":"code","a2b821e4":"code","f16b2e0f":"code","fa7ee752":"code","26096dad":"code","d9407ff9":"code","b41d561b":"code","4f930d79":"code","d56518b0":"code","6983d73b":"code","ddaf9519":"code","a22f8313":"markdown","ad13a209":"markdown","4f2d3c05":"markdown","b46f0f50":"markdown"},"source":{"654dc845":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom keras.utils.data_utils import GeneratorEnqueuer  # We only want this for multithreaded \n\nfrom torch.autograd import Variable\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.nn.utils.rnn import pack_padded_sequence\nfrom torch import Tensor","a2b821e4":"train_df = pd.read_csv(\"..\/input\/train.csv\")\n\nkeep = [len(x[:-1].split()) > 0 for x in train_df[\"question_text\"]]\ntrain_df = train_df[keep]\ntrain_df, val_df = train_test_split(train_df, test_size=0.1)","f16b2e0f":"# embdedding setup\n# Source https:\/\/blog.keras.io\/using-pre-trained-word-embeddings-in-a-keras-model.html\nembeddings_index = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\nfor line in tqdm(f):\n    values = line.split(\" \")\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","fa7ee752":"# Convert values to embeddings\ndef text_to_array(text):\n    empyt_emb = np.zeros(300)\n    text = text[:-1].split()[:120]\n    embeds = [embeddings_index.get(x, empyt_emb) for x in text]\n    seq_len = len(embeds)\n    embeds+= [empyt_emb] * (120 - len(embeds))\n    return np.array(embeds), seq_len\n\nembeddings = [text_to_array(X_text) for X_text in tqdm(val_df[\"question_text\"][:5000])]\nval_x, val_xlen = zip(*embeddings)\n\n# For dynamic LSTM the values have to be ordered.\nsorder = np.argsort(val_xlen)[::-1]\n\nval_xlen = np.array(val_xlen)[sorder]\nval_x = np.array(val_x)[sorder]\nval_y = np.array(val_df[\"target\"][:5000])[sorder]","26096dad":"# Train data providers\nbatch_size = 128\ndef batch_gen(train_df):\n    n_batches = math.ceil(len(train_df) \/ batch_size)\n    while True: \n        train_df = train_df.sample(frac=1.)  # Shuffle the data.\n        for i in range(n_batches):\n            texts = train_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n            text_arr, text_len = zip(*[text_to_array(text) for text in texts])\n            sorder = np.argsort(text_len)[::-1]\n            text_arr = np.array(text_arr)[sorder]\n            text_len = np.array(text_len)[sorder]\n            yield text_arr, text_len, np.array(train_df[\"target\"][i*batch_size:(i+1)*batch_size])[sorder]","d9407ff9":"class BiLSTM_model(nn.Module):\n    def __init__(self, embedding_size=300, hidden_size=128):\n        super(BiLSTM_model, self).__init__()\n        self.lstm = nn.LSTM(300, hidden_size, \n                            batch_first=True, num_layers=2,\n                            bidirectional=True)\n        \n        self.fc = nn.Linear(hidden_size*2, 1)\n        self.sigmoid = nn.Sigmoid()\n        \n    def forward(self, x, input_lengths):\n        x = pack_padded_sequence(x, input_lengths, batch_first=True)\n        out = self.lstm(x)\n        out = out[1][1][2:] # TODO check if :2 really is FW and BW of last layer!\n        out = out.transpose(0,1)\n        out = out.flatten(start_dim=1)\n        out = self.fc(out)\n        return self.sigmoid(out).flatten()\n        # return memory\n","b41d561b":"model = BiLSTM_model()\nmodel.cuda()\nmodel.train()\noptimizer = optim.Adam(model.parameters(), lr=0.0005)\nbcloss = nn.BCELoss()\n\nmy_generator = GeneratorEnqueuer(batch_gen(train_df))\nmy_generator.start()\nmg =  my_generator.get()\n\n","4f930d79":"def val_gen(batch_size=256):\n    n_batches = math.ceil(len(val_x) \/ batch_size)\n    for idx in range(n_batches):\n        xb = val_x[idx *batch_size:(idx+1) * batch_size]\n        xlb = val_xlen[idx *batch_size:(idx+1) * batch_size]\n        yb = val_y[idx *batch_size:(idx+1) * batch_size]\n        yield xb, xlb, yb","d56518b0":"losses = []\nfor i, (x, xlen, y) in tqdm(enumerate(mg)):\n    optimizer.zero_grad()\n    \n    x = Tensor(x).cuda()\n    y_pred = model(x, xlen)\n    loss = bcloss(y_pred, Tensor(y).cuda())\n    loss.backward()\n    \n    losses.append(loss.data.cpu().numpy())\n    optimizer.step()\n    \n    if (i + 1) % 1000 == 0:\n        print(\"Iter: {}\".format(i+1))\n        print(\"\\tAverage training loss: {:.5f}\".format(np.mean(losses)))\n        losses = []\n        # Evalute F1 on validation set\n        model.eval()\n        all_preds = []\n        for x, xlen, y in val_gen():\n            y_pred = model(Variable(Tensor(x)).cuda(), xlen)\n            all_preds.extend(y_pred.cpu().data.numpy())\n        score = f1_score(val_y, np.array(all_preds).flatten() > 0.5)\n        print(\"\\tVal F1 score: {:.5f}\".format(score))\n        model.train()\n    if  i == 10000:\n        print(\"Reducing LR\")\n        for g in optimizer.param_groups:\n            g['lr'] = 0.0001\n    if (i + 1) % 12000 == 0:  # We are done\n        break","6983d73b":"batch_size = 256\n\ndef batch_gen(test_df):\n    n_batches = math.ceil(len(test_df) \/ batch_size)\n    for i in range(n_batches):\n        ids = test_df[\"qid\"][i*batch_size:(i+1)*batch_size]\n        texts = test_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n        text_arr, text_len = zip(*[text_to_array(text) for text in texts])\n        sorder = np.argsort(text_len)[::-1]\n        \n        text_arr = np.array(text_arr)[sorder]\n        text_len = np.array(text_len)[sorder]\n        ids = np.array(ids)[sorder]\n        yield text_arr, text_len, ids\n    \ntest_df = pd.read_csv(\"..\/input\/test.csv\")\n\nall_preds = []\nall_ids = []\n\nmodel.eval()\nfor x, xlen, xid in tqdm(batch_gen(test_df)):\n    preds = model(Variable(Tensor(x).cuda()), xlen)\n    preds = preds.data.cpu().numpy()\n    all_preds.extend(preds)\n    all_ids.extend(xid)","ddaf9519":"y_te = (np.array(all_preds).flatten() > 0.5).astype(np.int)\n\nsubmit_df = pd.DataFrame({\"qid\": all_ids, \"prediction\": y_te})\nsubmit_df.to_csv(\"submission.csv\", index=False)","a22f8313":"This is a pytorch starter code. \n\nCode is based on previous Keras implementation: https:\/\/www.kaggle.com\/mihaskalic\/lstm-is-all-you-need-well-maybe-embeddings-also\n\nFuture improvements (#TODOs):\n- Pytorch loaders?\n- Improved reporting metrics","ad13a209":"# Setup","4f2d3c05":"# Inference","b46f0f50":"# Training"}}