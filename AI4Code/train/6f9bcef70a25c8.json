{"cell_type":{"22664fa1":"code","ff268969":"code","9315beb7":"code","7f32d29d":"code","cd3674b8":"code","6446ec42":"code","ace597f5":"code","3f71cd7d":"code","38ac7148":"code","ed8243d6":"code","4dcf049f":"code","cd6748d4":"code","3e3861e9":"code","bda08852":"code","3e2f665d":"code","16863ef8":"code","5ce3b1ee":"code","1f638d39":"code","6aa98865":"code","93d01b31":"markdown","2189d7f6":"markdown","526608e2":"markdown","ba11348a":"markdown","6ad4cbd8":"markdown","108f89b6":"markdown","b9474b92":"markdown","3d9cf2c6":"markdown","a5313162":"markdown","a67012ce":"markdown","18adc583":"markdown","31fff24a":"markdown","a811779a":"markdown","a6df7818":"markdown","11aa4cb1":"markdown","0d8618f8":"markdown","7172d578":"markdown","1ea93691":"markdown","80994dd0":"markdown","1e48d57d":"markdown"},"source":{"22664fa1":"import numpy as np\nimport pandas as pd\nimport json\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport glob\nfrom pathlib import Path\nimport xml.etree.ElementTree as ET","ff268969":"pattern = '..\/input\/gopopcorn\/*.xls'\nexcel_files = glob.glob(pattern)\n\n# Cleaning excel_files\nfor i in range (len(excel_files)):\n    excel_files[i] = excel_files[i][2:]\nexcel_files","9315beb7":"ss = '{urn:schemas-microsoft-com:office:spreadsheet}'\n\nresult = pd.DataFrame(columns=['Post ID', 'Permalink', 'Type', 'Date', 'Reach', 'Impression',\n       'Post Click', 'like', 'share', 'comment'])\n\nfor excel_file in excel_files:\n    root  = ET.parse('..\/{}'.format(excel_file)).getroot()\n    \n    # Sheet Key_metrics\n    Key_metrics = root.findall('{urn:schemas-microsoft-com:office:spreadsheet}Worksheet')[0]\n\n    rows = Key_metrics.findall('{}Table\/{}Row'.format(ss,ss))\n\n    # Column Name\n    row_name = rows[0]\n\n    columns = []\n    for col_name in row_name.findall('{}Cell\/{}Data'.format(ss,ss)):\n        columns.append(col_name.text)\n\n    # Data\n    row_data = rows[2:]\n\n    data = []\n    for row_d in row_data:\n        array = []\n        for cell in row_d.findall('{}Cell\/{}Data'.format(ss,ss)):\n            array.append(cell.text)\n        data.append(array)\n\n    df = pd.DataFrame(np.array(data), columns=columns)\n\n    # Cleaning dataframe\n    columns = ['Post ID', 'Permalink', 'Type', 'Posted', \\\n               'Lifetime Post Total Reach', 'Lifetime Post Total Impressions',\\\n              'Lifetime Matched Audience Targeting Consumptions on Post']\n    df_Key_metrics = df[columns]\n    \n    \n    \n    Lifetime_Talking_About_This = root.findall('{urn:schemas-microsoft-com:office:spreadsheet}Worksheet')[1]\n\n    rows = Lifetime_Talking_About_This.findall('{}Table\/{}Row'.format(ss,ss))\n\n    # Column Name\n    row_name = rows[0]\n\n    columns = []\n    for col_name in row_name.findall('{}Cell\/{}Data'.format(ss,ss)):\n        columns.append(col_name.text)\n\n\n    # Data\n    row_data = rows[1:]\n\n    data = []\n    for row_d in row_data:\n        array = []\n        for cell in row_d.findall('{}Cell\/{}Data'.format(ss,ss)):\n            array.append(cell.text)\n        data.append(array)\n\n    df = pd.DataFrame(np.array(data), columns=columns)\n\n    if 'like' not in df.columns:\n        df['like'] = None\n    if 'share' not in df.columns:\n        df['share'] = None\n    if 'comment' not in df.columns:\n        df['comment'] = None\n\n    # Clearning Dataframe\n    columns = ['Post ID', 'like', 'share', 'comment']\n    df_Lifetime_Talking_About_This = df[columns]\n    \n    \n    \n    df = pd.merge(df_Key_metrics, df_Lifetime_Talking_About_This, on='Post ID')\n\n    df = df.rename(columns={'Posted': 'Date','Lifetime Post Total Reach': \"Reach\", 'Lifetime Post Total Impressions': \"Impression\", \\\n                     'Lifetime Matched Audience Targeting Consumptions on Post': \"Post Click\"})\n\n    df = df.fillna(0)\n    \n    # Merge all data\n    result = pd.concat([result, df])\n\nresult = result.reset_index(drop=True)\n\nresult[:1]","7f32d29d":"# Change datatype of InvoiceDate as datetime type\nresult['Date'] = pd.to_datetime(result['Date'])\n\n# Create new features\nresult['date'] = result['Date'].dt.date   # df['date'].dt.normalize()  # Show only date\nresult['day'] = result['Date'].dt.day\nresult['month'] = result['Date'].dt.month\nresult['year'] = result['Date'].dt.year\nresult['hour'] = result['Date'].dt.hour\nresult['dayofweek'] = result['Date'].dt.dayofweek\nresult['dayofweek'] = result['dayofweek'].map( {0: '1_Mon', 1: '2_Tue', 2: '3_Wed', 3: '4_Thur', 4: '5_Fri', 5: '6_Sat', 6: '7_Sun'})","cd3674b8":"#result.dtypes\nresult['Reach'] = result['Reach'].astype(int)\nresult['Impression'] = result['Impression'].astype(int)\nresult['Post Click'] = result['Post Click'].astype(int)\nresult['like'] = result['like'].astype(int)\nresult['share'] = result['share'].astype(int)\nresult['comment'] = result['comment'].astype(int)\nresult['Impression'] = result['Impression'].astype(int)","6446ec42":"# Engagment\nresult['engagement'] = result['Post Click'] + result['like'] + result['share'] + result['comment']","ace597f5":"oldest_Post = result['Date'].min().date()\nmost_recent_Post = result['Date'].max().date()\nprint('From', oldest_Post, 'to', most_recent_Post)","3f71cd7d":"columns_display = ['Post ID', 'Permalink', 'Date', 'Reach', 'Impression', 'Post Click', 'like', 'share', 'comment', 'engagement']\nresult.sort_values('Reach', ascending=False)[:5][columns_display]","38ac7148":"result.sort_values('Impression', ascending=False)[:5][columns_display]","ed8243d6":"result.sort_values('engagement', ascending=False)[:5][columns_display]","4dcf049f":"hour_impression = result.groupby(['hour'])['Impression'].agg(['count','sum','mean','median'])\n\n\nfig, axes = plt.subplots(2, 2, figsize=(18, 12))\naxes = axes.flatten()\n\nsns.barplot(x=hour_impression.index, y=hour_impression['count'], ax=axes[0]).set_title(\"Total posts across 24h day\")\nplt.ylabel('a')\nplt.xticks(rotation=90)\n\nsns.barplot(x=hour_impression.index, y=hour_impression['sum'], ax=axes[1]).set_title(\"The number of impressions across 24h day\")\nplt.ylabel('a')\nplt.xticks(rotation=90)\n\nsns.barplot(x=hour_impression.index, y=hour_impression['mean'], ax=axes[2]).set_title(\"Average post impressions in a day\")\nplt.ylabel('a')\nplt.xticks(rotation=90)\n\nsns.barplot(x=hour_impression.index, y=hour_impression['median'], ax=axes[3]).set_title(\"Median post impressions in a day\")\nplt.ylabel('median')\nplt.xticks(rotation=0)\n\nplt.show()\n\nresult.groupby(['hour'])[['Impression']].agg(['count','sum','mean','median'])","cd6748d4":"dayofweek_impression = result.groupby(['dayofweek'])['Impression'].agg(['count','sum','mean','median'])\n\n\nfig, axes = plt.subplots(2, 2, figsize=(18, 12))\naxes = axes.flatten()\n\nsns.barplot(x=dayofweek_impression.index, y=dayofweek_impression['count'], ax=axes[0]).set_title(\"Total posts over a week\")\nplt.ylabel('count')\nplt.xticks(rotation=90)\n\nsns.barplot(x=dayofweek_impression.index, y=dayofweek_impression['sum'], ax=axes[1]).set_title(\"Total Impressions over a week\")\nplt.ylabel('sum')\nplt.xticks(rotation=90)\n\nsns.barplot(x=dayofweek_impression.index, y=dayofweek_impression['mean'], ax=axes[2]).set_title(\"Average Impressions of each post over a week\")\nplt.ylabel('mean')\nplt.xticks(rotation=90)\n\nsns.barplot(x=dayofweek_impression.index, y=dayofweek_impression['median'], ax=axes[3]).set_title(\"Median Impressions of each post over a week\")\nplt.ylabel('median')\nplt.xticks(rotation=90)\n\nplt.show()\n\nresult.groupby(['dayofweek'])[['Impression']].agg(['count','sum','mean','median'])","3e3861e9":"month_impression = result.groupby(['month'])['Impression'].agg(['count','sum','mean','median'])\n\nfig, axes = plt.subplots(2, 2, figsize=(18, 12))\naxes = axes.flatten()\n\nsns.barplot(x=month_impression.index, y=month_impression['count'], ax=axes[0]).set_title(\"Total posts over a year\")\nplt.ylabel('count')\nplt.xticks(rotation=90)\n\nsns.barplot(x=month_impression.index, y=month_impression['sum'], ax=axes[1]).set_title(\"The number of impressions over a year\")\nplt.ylabel('sum')\nplt.xticks(rotation=90)\n\nsns.barplot(x=month_impression.index, y=month_impression['mean'], ax=axes[2]).set_title(\"Average post impression over a year\")\nplt.ylabel('mean')\nplt.xticks(rotation=90)\n\nsns.barplot(x=month_impression.index, y=month_impression['median'], ax=axes[3]).set_title(\"Median post impression over a year\")\nplt.ylabel('median')\nplt.xticks(rotation=0)\n\nplt.show()\n\nresult.groupby(['month'])[['Impression']].agg(['count','sum','mean','median'])","bda08852":"hour_engagement = result.groupby(['hour'])['engagement'].agg(['count','sum','mean','median'])\n\n\nfig, axes = plt.subplots(2, 2, figsize=(18, 12))\naxes = axes.flatten()\n\nsns.barplot(x=hour_engagement.index, y=hour_engagement['count'], ax=axes[0]).set_title(\"Total posts across a 24h day\")\nplt.ylabel('count')\nplt.xticks(rotation=90)\n\nsns.barplot(x=hour_engagement.index, y=hour_engagement['sum'], ax=axes[1]).set_title(\"The number of engagement across a 24h day\")\nplt.ylabel('sum')\nplt.xticks(rotation=90)\n\nsns.barplot(x=hour_engagement.index, y=hour_engagement['mean'], ax=axes[2]).set_title(\"Average post engagement in a day\")\nplt.ylabel('mean')\nplt.xticks(rotation=90)\n\nsns.barplot(x=hour_engagement.index, y=hour_engagement['median'], ax=axes[3]).set_title(\"Median post engagement in a day\")\nplt.ylabel('median')\nplt.xticks(rotation=0)\nplt.show()\n\n\nresult.groupby(['hour'])[['engagement']].agg(['count','sum','mean','median'])","3e2f665d":"dayofweek_engagement = result.groupby(['dayofweek'])['engagement'].agg(['count','sum','mean','median'])\n\n\nfig, axes = plt.subplots(2, 2, figsize=(18, 12))\naxes = axes.flatten()\n\nsns.barplot(x=dayofweek_engagement.index, y=dayofweek_engagement['count'], ax=axes[0]).set_title(\"Total posts over a week\")\nplt.ylabel('count')\nplt.xticks(rotation=90)\n\nsns.barplot(x=dayofweek_engagement.index, y=dayofweek_engagement['sum'], ax=axes[1]).set_title(\"Total Engagement over a week\")\nplt.ylabel('sum')\nplt.xticks(rotation=90)\n\nsns.barplot(x=dayofweek_engagement.index, y=dayofweek_engagement['mean'], ax=axes[2]).set_title(\"Average Engagement of each post over a week\")\nplt.ylabel('mean')\nplt.xticks(rotation=90)\n\nsns.barplot(x=dayofweek_engagement.index, y=dayofweek_engagement['median'], ax=axes[3]).set_title(\"Median Engagement of each post over a week\")\nplt.ylabel('median')\nplt.xticks(rotation=90)\n\nplt.show()\n\nresult.groupby(['dayofweek'])[['engagement']].agg(['count','sum','mean','median'])","16863ef8":"month_engagement = result.groupby(['month'])['engagement'].agg(['count','sum','mean','median'])\n\nfig, axes = plt.subplots(2, 2, figsize=(18, 12))\naxes = axes.flatten()\n\nsns.barplot(x=month_engagement.index, y=month_engagement['count'], ax=axes[0]).set_title(\"Total posts over a year\")\nplt.ylabel('count')\nplt.xticks(rotation=90)\n\nsns.barplot(x=month_engagement.index, y=month_engagement['sum'], ax=axes[1]).set_title(\"The number of engagement over a year\")\nplt.ylabel('sum')\nplt.xticks(rotation=90)\n\nsns.barplot(x=month_engagement.index, y=month_engagement['mean'], ax=axes[2]).set_title(\"Average post engagement over a year\")\nplt.ylabel('mean')\nplt.xticks(rotation=90)\n\nsns.barplot(x=month_engagement.index, y=month_engagement['median'], ax=axes[3]).set_title(\"Median post engagement over a year\")\nplt.ylabel('median')\nplt.xticks(rotation=0)\n\nplt.show()\n\nresult.groupby(['month'])[['engagement']].agg(['count','sum','mean','median'])","5ce3b1ee":"# Remove outliers in dataset\nresult.drop(result[result['Impression'] == 0].index, inplace=True)\n\n# Transforming data\nresult['impression_log'] = np.log1p(result[\"Impression\"])\nresult['engagement_log'] = np.log1p(result[\"engagement\"])","1f638d39":"hue_order = ['1_Mon','2_Tue','3_Wed','4_Thur','5_Fri','6_Sat','7_Sun']\n\nfig = plt.figure(figsize=(18, 8))\nsns.scatterplot(data=result, x=\"impression_log\", y=\"engagement_log\", hue='dayofweek', hue_order=hue_order, sizes=80)\n\nplt.show()","6aa98865":"result['life_time_post'] = (pd.to_datetime('today').date() - result['date']).astype('timedelta64[D]')\n\ncolumns = ['Reach', 'Impression', 'engagement','life_time_post']\n\n# Compute the correlation matrix\ncorr = result[columns].corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin = -1, vmax = 1,\n            linewidths=1, cbar_kws={\"shrink\": 0.5}, annot=True)\n\nplt.show()","93d01b31":"### 6.2 Engagement Performance over a 7day week\n- The 1st post (Total posts over a week)\n    - Having mentioned above, we have most posts on Wednesday.\n   \n   \n- The 2nd post (Total Engagement over a week)\n    - Most total engagement figures are in the descending order Wednesday, Tuesday, Monday.\n    \n    \n- The 3rd post (Average Engagement of each post over a week)\n    - On average, Wednesday' posts indicate the best performance of engagement.\n    - *Precautious of outliers*.\n    \n    \n- The 4th post (Median Engagement of each post over a week)\n    - Removing outliers by applying median method shows Tuesday's posts are the best engagement.\n    - While, Monday, Wednesday, Thursday, Sunday do not differ to each other.\n    \n    \n#### Recommendation\n    - The 4th graph shows Monday and Wednesday contains outliers, deducing that if we want to make a huge breaking ground of engagement, we consider posts on Monday and Wednesday.\n    - Overall, Monday, Tuesday, Wednesday, and Sunday are fine day if we focus on engagement metric.\n    - Avoid Friday, and Saturday.","2189d7f6":"### 5.1 Impression Performance over 24h day\n- The 1st graph (Total posts across 24h)\n    - We tend to publish post at 17 o'clock, 10 posts in total, followed by 12, 11, 10 o'clock.\n\n\n- The 2nd graph (The number of impressions across 24h day)\n    - 11 and 12 o'clock posts have less in numbers compared to 17 o'clock but generate most impressions, above 1600 for each.\n    - 10 o'clock sharing the same posts number with 11 o'clock (1st graph) acquire only 600 impressions.\n\n\n- The 3rd graph (Average post impressions in a day)\n    - Noticed that posts at 11 am is currently on the top, while posts at 12, 20, 21, 23 o'clock share similar numbers.\n    - However, high number of impressions could be derived from holiday, or any particular event.\n\n\n- The 4th graph (Median post impressions in a day)\n    - Following the 3rd graph, applying median to remove outliers, thus noticing posts at 20, 21, 23 o'clock are quite promising.\n    - But taking a look at the 1st graph, there are only 3 posts at 20 o'cock, 2 at 21 o'clock, 1 at 22 o'clock, and 2 at 23 o'clock. The data is not totally reliable.\n    \n\n#### Recommendation\n    - Therefore, we should take this time interval (from 20 to 23 o'clock) into account , and create posts around this period and keep track of their performance.","526608e2":"## 2. Top 5 most Reach post","ba11348a":"# Popcorn's Facebook Insights Data\n\n### Analyst: Max Duong\n### Supervisor: Erin Jay\n\n### Date: Oct 28th, 2020\n\n### Overview\nThis is a post dataset which contains 59 posts occurring between 2018-01-12 and 2020-10-28 for a marketing agency, Popcorn. The company mainly does digital advertising. Many customers of the company are small-to-middle promising brands.","6ad4cbd8":"# DATA ANALYSIS","108f89b6":"## 5. Impression Performance","b9474b92":"## 6. Engagement Performance of dayweek","3d9cf2c6":"# LIBRARY","a5313162":"# CLEANING PROCESS & AGGREGATING DATA","a67012ce":"### 6.3 Engagement Performance over a 12month year\n\n\n- The 1st post (Total posts over a year)\n    - Having mentioned above, we have most posts in 'Oct'.\n   \n   \n- The 2nd post (Total Engagement over a year)\n    - Most total engagement numbers fall in 'Jan', 'Otc'.\n    \n    \n- The 3rd post (Average Engagement of each post over a year)\n    - On average, 'Oct', 'Nov', 'Dec', 'Jan' involves much engagement, derived from at least 2 posts in each months.\n    - 'Sep' 's post has quite good engagement, the figure is derived from only 1 post. Thus can't really say about 'Sep'.\n    - *Precautious of outliers.*\n    \n    \n- The 4th post (Median Engagement of each post over a year)\n    - Removing outliers by applying median method shows 'Nov', 'Dec', 'Jan' are the best engagement.\n    - While, in the middle of a year people are less likely to engage with our posts.\n    \n    \n#### Recommendation\n    - Towards to the year end, and the beginning of new year, we should have more posts on our social media.","18adc583":"### 5.3 Impression Performance over a 12-month year\n- The 1st post (Total posts over a year)\n    - Having 11 posts in October, the highest number among 12 months.\n    - August and September are at the bottom of the list with only 1 post.\n    \n    \n- The 2nd post (Total Impressions over a year)\n    - The number of impressions in May is the highest, over 2000, derived from 9 posts (1st graph).\n\n\n- The 3rd post (Average Impressions of each post over a year)\n    - Impression number in September is the highest, derived from 1 post only, thus we can't say a post in Sep performs better than those in other months.\n\n\n- The 4th post (Median Impressions of each post over a year)\n    - Taking a look at 'Nov' and 'Dec' columns in the 3rd graph with those in the 4th graph, they share the same pattern. It means posts in this interval have stable performance, having no outliers.\n    - 'Feb', 'May' columns in the 3rd and 4th graph is quite different, meaning outlier happens here. Investigate which posts drived lots of impressions in 'Feb' and 'May' at which time period and if they contained any special hashtags or stories.\n    \n    \n#### Recommendation\n    - Looking at a post in Sep and figuring out why we published only 1 post, which performed quite well at this time.\n    - Looking for an outlier post in 'Feb', 'May', finding out why they performed well.\n    - Having more posts in 'Nov', 'Dec', and less in 'Oct'.","31fff24a":"## 4. Top 5 most Engagement (PostClick & Like & Share & Comment) post","a811779a":"## 3. Top 5 most Impression post","a6df7818":"### 6.1 Engagement Performance over a 24h day\n- The 1st post (Total posts across a 24h day)\n    - Having mentioned above, we mostly published at 17 o'clock.\n   \n   \n- The 2nd post (The number of engagement across a 24h day)\n    - Around 12 o'clock get most users engagement, around 140 interactions from 7 posts.\n    - Having a lots of posts at 17 o'clock acquires only 70 engagements in total.\n    \n    \n- The 3rd post (Average post engagement in a day)\n    - On average, posts at 12, 16, 20, 21, 23 o'clock received above 15 engagements.\n    - *Precautious of outliers*.\n    \n    \n- The 4th post (Median post engagement in a day)\n    - Looking at 12, 16 o'clock on both 3rd and 4th graph shows outliers occur here. Some posts in these times outperformed the average.\n    - Whereas, posts at 20, 21, 23 are quite similar in pattern and at the top in term of engagement.\n    \n    \n#### Recommendation\n    - 17 o'clock is not really an ideal time for posts.\n    - Focus on the posts published at 12, 20, 21, 22, 23 o'clock.","11aa4cb1":"## 7. Impression vs Engagement\n\n- The graph below show the relationship between Impression and Engagement. More impressions tend to get more engagement.\n- On the right half of the graph shows the some posts with the best performance, most of which are on Wednesday, Tuesday, Monday.","0d8618f8":"## 8. Correlation between Reach, Impression, Engagement, Life time of each post\n\n- The graph shows Reach and Impression are closely correlated.\n- Engagement is higher if a post get higher Reach and\/or Impression. \n- Life time of a post is mostly correlated with engagement, meaning if a post is older, it tends to get higher engagement.","7172d578":"## 9. Further Analysis\n- Tracking keywords, phrases, hashtags mostly used\n- How often we post?\n- When was the last time we posted?\n- Do we respond to comments?\n- Types of content: text, image, video","1ea93691":"### 5.2 Impression Performance over a 7-day week\n- The 1st post (Total posts over a week)\n    - We have the highest number of posts, 13, on Wednesday, followed by on Monday, Tuesday, and Friday respectively.\n    \n    \n- The 2nd post (Total Impressions over a week)\n    - For having the most post numbers on Wednesday (1st graph), thus having the highest total impression, around 2600, is quite reasonable.\n    - Notice the impression numbers on both Thursday and Friday is opposite of their total number of posts (1st graph). With only 6 posts on Thursday, it accounts for 1800 impressions, almost equals to the impression figures on Monday and Tuesday, while 10 posts on Friday generates less than 1000 impressions.\n    \n\n- The 3rd post (Average Impressions of each post over a week)\n    - Following the 2nd post, average post impressions on Thursday is at the highest point, around 284 impressions per post.\n    - However, it (Thursday's average post impressions) is not totally a reliable number. Because 1 or more out of 6 posts could be on Holiday or on seasonal period or include particual engaging hashtags, thus creating large quanity of impressions.\n\n\n- The 4th post (Median Impressions of each post over a week)\n    - Following the 3rd post, applying median method to remove some outliers in data.\n    - The highest impressions is on Wednesday, followed by Tuesday. Monday, Thursday, Sunday share the third position.\n    \n    \n#### Recommendation\n    - Have posts published on Monday, Tuesday, Wednesday, Thursday, and Sunday.\n    - Post on wednesday tend to expose to most people, thus being useful for running 'Brand Awareness' campaign.","80994dd0":"## 1. Timeline of the dataset","1e48d57d":"# LOAD DATA"}}