{"cell_type":{"0d41cb2c":"code","54c09a3d":"code","67bfedcb":"code","63d7380f":"code","f3e37676":"markdown","fd16fe52":"markdown","19827602":"markdown","56ad7288":"markdown"},"source":{"0d41cb2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# install pyvis framework for visualization\nprint(\"Installing pyvis:\")\n!pip install pyvis\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport numpy as np\nimport networkx as nx\nfrom pyvis.network import Network\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54c09a3d":"root = [\"Python\"]\nmain_cluster = [\n    \"Visualization\", \n    \"Machine Learning\", \n    \"NLP\", \n    \"Testing\", \n    \"Data Analysis \/ EDA\", \n    \"Data Processing\", \n    \"Finance\",\n    \"Basic Usage\",\n]\nsub_cluster = [\n    \"Dashboard\",\n    \"D3.js\",\n    \"Extraordinary Visualization\", \n    \"Feature Engineering\", \n    \"FlowChart\",\n    \"Geo\",\n    \"Graph \/ Network\",\n    \"Hyperparameter Tuning\", \n    \"Information Retrieval\", \n    \"Integration\", \n    \"Interactive Visualization\",\n    \"Keras\",\n    \"Performance\",\n    \"Pytorch\",\n    \"Static Visualization\",\n    \"TimeSeries\",\n    \"Tensorflow\",\n    \"TPOT\",\n    \"XAI\",\n\n]\nlibraries = [\n     'altair',\n     'auto-sklearn',\n     'auto-viml',\n     'bokeh',\n     'candela',\n     'cufflinks',\n     'd3py',\n     'dash',\n     'dask',\n     'dtale',\n     'dtreeviz',\n     'dx_analytics',\n     'eli5',\n     'featuretools',\n     'folium',\n     'functools',\n     'fundamentalanalysis',\n     'gensim',\n     'geopandas',\n     'geopy',\n     'graph-tool',\n     'holoview',\n     'itertools',\n     'jaal',\n     'lazypredict',\n     'leaflet',\n     'lime',\n     'luminaire',\n     'lux',\n     'matplotlib',\n     'missingno',\n     'more-itertools',\n     'mutmut',\n     'neptune',\n     'networkx',\n     'neuraxle',\n     'nltk',\n     'numpy',\n     'nvd3',\n     'pandas',\n     'pandas-datareader',\n     'pandas-log',\n     'pandas-profiler',\n     'pandera',\n     'panel',\n     'pattern',\n     'plotly',\n     'polyglot',\n     'pycaret',\n     'pydantic',\n     'pyflowchart',\n     'pynlpl',\n     'pypolars',\n     'pystemmer',\n     'pyterrier',\n     'pytest',\n     'pyts',\n     'pyvis',\n     'roughviz',\n     'rshap',\n     'scikit-learn',\n     'scikit-optimize',\n     'seaborn',\n     'shapash',\n     'sigma.js',\n     'sklearn laboratory',\n     'sklearn-deap',\n     'sklearn-pandas',\n     'sklearn-xarray',\n     'spacy',\n     'sql-test',\n     'stanford corenlp python',\n     'stumpy',\n     'sweetviz',\n     'textblob',\n     'tpot',\n     'tsfresh',\n     'vaex',\n     'visdcc',\n     'vocabulary',\n     'yfinance'\n]","67bfedcb":"# set up the edges that are building the graph\ndata = [\n    [\"Python\", \"Basic Usage\"],\n    [\"Python\", \"Finance\"],\n    [\"Python\", \"Data Processing\"],\n    [\"Python\", \"Data Analysis \/ EDA\"],\n    [\"Python\", \"Machine Learning\"],\n    [\"Python\", \"Visualization\"],\n    [\"Python\", \"Testing\"],\n    \n    [\"Basic Usage\",\"functools\"],\n    [\"Basic Usage\", \"itertools\"],\n    [\"Basic Usage\", \"more-itertools\"],\n    \n    [\"Data Processing\", \"pandas\"],\n    [\"Data Processing\", \"numpy\"],\n    [\"Data Processing\", \"Performance\"],\n    \n    [\"Performance\", \"vaex\"],\n    [\"Performance\", \"pypolars\"],\n    [\"Performance\", \"dask\"],\n    \n    [\"Finance\", \"cufflinks\"],\n    [\"Finance\", \"dx_analytics\"],\n    [\"Finance\", \"fundamentalanalysis\"],\n    [\"Finance\", \"yfinance\"],\n    \n    [\"cufflinks\", \"Visualization\"],\n    \n    [\"Machine Learning\", \"Feature Engineering\"],\n    [\"Machine Learning\", \"Hyperparameter Tuning\"],\n    [\"Machine Learning\", \"Keras\"],\n    [\"Machine Learning\", \"NLP\"],\n    [\"Machine Learning\", \"Pytorch\"],\n    [\"Machine Learning\", \"Tensorflow\"],\n    [\"Machine Learning\", \"TPOT\"],\n    [\"Machine Learning\", \"XAI\"],\n    [\"Machine Learning\", \"auto-viml\"],\n    [\"Machine Learning\", \"dtreeviz\"], \n    [\"Machine Learning\", \"pycaret\"],\n    [\"Machine Learning\", \"lazypredict\"],\n    [\"Machine Learning\", \"scikit-learn\"],\n    \n    [\"pycaret\", \"lazypredict\"],\n    \n    [\"Feature Engineering\", \"featuretools\"],\n    [\"Feature Engineering\", \"tsfresh\"],\n    \n    [\"scikit-learn\", \"sklearn-xarray\"],\n    [\"scikit-learn\", \"sklearn-pandas\"],\n    [\"scikit-learn\", \"sklearn-deap\"],\n    [\"scikit-learn\", \"auto-sklearn\"],\n    [\"scikit-learn\", \"sklearn laboratory\"],\n    \n    [\"sklearn laboratory\", \"neptune\"],\n    \n    [\"Hyperparameter Tuning\", \"neuraxle\"],\n    [\"Hyperparameter Tuning\", \"scikit-optimize\"],\n    \n    [\"XAI\", \"auto-viml\"],\n    [\"XAI\", \"eli5\"],\n    [\"XAI\", \"rshap\"],\n    [\"XAI\", \"lime\"],\n    \n    [\"NLP\", \"Information Retrieval\"],\n    [\"NLP\", \"nltk\"],\n    [\"NLP\", \"gensim\"],\n    [\"NLP\", \"scikit-learn\"],\n    [\"NLP\", \"spacy\"],\n    [\"NLP\", \"pystemmer\"],\n    [\"NLP\", \"stanford corenlp python\"],\n    [\"NLP\", \"textblob\"],\n    [\"NLP\", \"pattern\"],\n    [\"NLP\", \"polyglot\"],\n    [\"NLP\", \"pynlpl\"],\n    [\"NLP\", \"vocabulary\"],\n    \n    [\"Information Retrieval\", \"pyterrier\"],\n    \n    [\"Visualization\", \"D3.js\"],\n    [\"Visualization\", \"Dashboard\"],\n    [\"Visualization\", \"Extraordinary Visualization\"],\n    [\"Visualization\", \"FlowChart\"],\n    [\"Visualization\", \"Geo\"],\n    [\"Visualization\", \"Graph \/ Network\"],\n    [\"Visualization\", \"Interactive Visualization\"],\n    [\"Visualization\", \"Static Visualization\"],\n    \n    [\"D3.js\", \"d3py\"],\n    [\"D3.js\", \"nvd3\"],\n    \n    [\"Dashboard\", \"bokeh\"],\n    [\"Dashboard\", \"dash\"],\n    [\"Dashboard\", \"holoview\"],\n    [\"Dashboard\", \"panel\"],\n    [\"Dashboard\", \"plotly\"],\n    \n    [\"Extraordinary Visualization\", \"candela\"],\n    [\"Extraordinary Visualization\", \"roughviz\"],\n    \n    [\"FlowChart\", \"pyflowchart\"],\n    \n    [\"Geo\", \"geopy\"],\n    [\"Geo\", \"folium\"],\n    [\"Geo\", \"leaflet\"],\n    [\"Geo\", \"geopandas\"],\n    \n    [\"Graph \/ Network\", \"dtreeviz\"],\n    [\"Graph \/ Network\", \"graph-tool\"],\n    [\"Graph \/ Network\", \"jaal\"],\n    [\"Graph \/ Network\", \"networkx\"],\n    [\"Graph \/ Network\", \"pyvis\"],\n    [\"Graph \/ Network\", \"sigma.js\"],\n    [\"Graph \/ Network\", \"visdcc\"],\n    \n    [\"Interactive Visualization\", \"altair\"],\n    [\"Interactive Visualization\", \"bokeh\"],\n    [\"Interactive Visualization\", \"cufflinks\"],\n    [\"Interactive Visualization\", \"holoview\"],\n    [\"Interactive Visualization\", \"plotly\"],\n    [\"Interactive Visualization\", \"shapash\"],\n\n    [\"Static Visualization\", \"lux\"],\n    [\"Static Visualization\", \"matplotlib\"],\n    [\"Static Visualization\", \"missingno\"],\n    [\"Static Visualization\", \"pandas-profiler\"],\n    [\"Static Visualization\", \"seaborn\"],\n    [\"Static Visualization\", \"shapash\"],\n    \n    [\"Data Analysis \/ EDA\", \"TimeSeries\"],\n    [\"Data Analysis \/ EDA\", \"dtale\"],\n    [\"Data Analysis \/ EDA\", \"lux\"],\n    [\"Data Analysis \/ EDA\", \"shapash\"],\n    [\"Data Analysis \/ EDA\", \"sweetviz\"],\n    [\"Data Analysis \/ EDA\", \"missingno\"],\n    [\"Data Analysis \/ EDA\", \"pandas\"],\n    \n    [\"pandas\", \"pandas-datareader\"],\n    [\"pandas\", \"pandas-log\"],\n    [\"pandas\", \"pandas-profiler\"],\n    \n    [\"TimeSeries\", \"luminaire\"],\n    [\"TimeSeries\", \"pyts\"],\n    [\"pandas\", \"sklearn-pandas\"],\n\n    [\"TimeSeries\", \"stumpy\"],\n\n    [\"visdcc\", \"dash\"],\n\n    [\"Testing\", \"Integration\"],\n    [\"Testing\", \"mutmut\"],\n    [\"Testing\", \"pytest\"],\n    [\"Testing\", \"sql-test\"],\n\n    [\"Integration\", \"pandera\"],\n    [\"Integration\", \"pydantic\"],\n]\n","63d7380f":"\"\"\"Define edges.\"\"\"\nfrom more_itertools import locate\n\ntest_nw = Network(height='750px', width=\"100%\", notebook=True)\nnodes = root + main_cluster + sub_cluster + libraries\n\n# add root node\nroot_node = list(locate(nodes, lambda x: x in root))\nroot_size, root_color = [35 for _ in root], [\"red\" for _ in root]\n\ntest_nw.add_nodes(root_node, size=root_size, label=root, color=root_color)\n\n# add main_cluster nodes\nmain_nodes = list(locate(nodes, lambda x: x in main_cluster))\nmain_size, main_color = [30 for _ in main_cluster], [\"orange\" for _ in main_cluster]\n\ntest_nw.add_nodes(main_nodes, size=main_size, label=main_cluster, color=main_color)\n\n# add sub_cluster nodes\nsub_nodes = list(locate(nodes, lambda x: x in sub_cluster))\nsub_size, sub_color = [25 for _ in sub_cluster], [\"yellow\" for _ in sub_cluster]\n\ntest_nw.add_nodes(sub_nodes, size=sub_size, label=sub_cluster, color=sub_color)\n\n# add library nodes\nlib_nodes = list(locate(nodes, lambda x: x in libraries))\nlib_size, lib_color = [15 for _ in libraries], [\"blue\" for _ in libraries]\n\ntest_nw.add_nodes(lib_nodes, size=lib_size, label=libraries, color=lib_color)\n\n# add edges\nfor edge in data:\n    node_from, node_to = list(locate(nodes, lambda x: x in edge))\n    test_nw.add_edge(node_from, node_to)\n\ntest_nw.show(\"test.html\")","f3e37676":"## Defininng the edges\n\nNext we define the basic structur for our edges:","fd16fe52":"## Building the network graph\n\nNext, we will add both, nodes and edges, to our graph. It is important to recalculate which id or number a node is assigned to, in order to draw the edges correctly. ","19827602":"## Defining nodes\n\nFirst, we have to add the nodes that will in general present the differen libraries. Furthermore, there are main- and subnodes which can be treated as the clusters headline.\n\nThe network graph itself basically follows a tree structure where **\"Python\"** is assigned to the **root node**. Edges that are leaving the root node will lead to **topical main clusters** that describe the different areas python is used in. Following that idea, one can find the same approach leaving the main clusters and leading to **topical sub clusters** which are more granular. Consequently, the deepest layer will be defined by the **specific libraries**.\n\nWith that setting in mind, it is clear that in some cases a library might be a *leaf node on the bottom* and a *direct child from another main cluster* at the same time. This observation makes it **hard to balance the network graph as a tree**.\n\nLet's start defining the node clusters:","56ad7288":"# Python Libraries as a usage-clustered network\n\nThis notebook is trying to visualize the major existing python libraries as a clustored network. This work has **no claim regarding completeness**. Nevertheless, I appreciate any ideas on adding missing packages or improving clean code that would make the network maintenance much easier."}}