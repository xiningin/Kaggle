{"cell_type":{"497846e4":"code","62e54efb":"code","871d3fdd":"code","b30bc9ca":"code","447329d3":"code","79de057c":"code","077ad5a9":"code","b4c2ebdd":"code","77461b98":"code","b9cfd8c0":"code","e032a8e4":"code","51c2ece7":"code","dfcf3ea4":"code","9fc4e5ac":"code","a3e3af0e":"code","9ae3a76e":"code","8044a6eb":"code","996cac8e":"code","f9e9aea9":"code","b8333b09":"code","2e73c7e2":"code","c6081b81":"code","e2a98e60":"code","e459d68d":"code","becb0118":"code","fd0a8456":"code","7715b48f":"code","68240470":"code","09a57820":"code","1876ee31":"code","f4cefcef":"code","f3be2cdb":"code","7735935f":"markdown","94dae798":"markdown","3e19d4dd":"markdown","c7f3a693":"markdown","256b9931":"markdown","5c733c3d":"markdown","354acfd9":"markdown","e181fead":"markdown"},"source":{"497846e4":"#importing libraries and Reading the Dataset\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport sys\nimport os","62e54efb":"df=pd.read_csv('..\/input\/data-house-price\/train.csv')\nprint(df.head())\n","871d3fdd":"print(df.info())","b30bc9ca":"print(df.columns)","447329d3":"#descriptive statistics summary\ndf['SalePrice'].describe()","79de057c":"#histogram\nsns.distplot(df['SalePrice']);","077ad5a9":"fig,ax=plt.subplots(figsize=(30,30))\nsns.heatmap(df.corr(),ax=ax,annot=True,linewidths=0.05,fmt='.2f',cmap=\"magma\")\nplt.show()","b4c2ebdd":"features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\ndf= df[features]\ndf.head()\n","77461b98":"print(\"There are\",len(df.columns),\"columns:\")\nfor x in df.columns:\n    sys.stdout.write(str(x)+\",\")","b9cfd8c0":"df.info()","e032a8e4":"fig,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(),ax=ax,annot=True,linewidths=0.05,fmt='.2f',cmap=\"magma\")\nplt.show()","51c2ece7":"df[\"YearBuilt\"].plot(kind='hist',bins=200,figsize=(6,6))\nplt.title(\"YearBuilt\")\nplt.xlabel(\"YearBuilt\")\nplt.ylabel(\"LotArea\")\nplt.show()","dfcf3ea4":"plt.scatter(df[\"YearBuilt\"],df[\"1stFlrSF\"])\n\nplt.title(\"YearBuilt\")\nplt.xlabel(\"YearBuilt\")\nplt.ylabel(\"1stFlrSF\")\nplt.show()","9fc4e5ac":"plt.scatter(df[\"YearBuilt\"],df[\"2ndFlrSF\"])\nplt.title(\"YearBuilt\")\nplt.xlabel(\"YearBuilt\")\nplt.ylabel(\"2ndFlrSF\")\nplt.show()","a3e3af0e":"df[df['FullBath'] >0].plot(kind='scatter',x='FullBath',y='2ndFlrSF',color='red')\nplt.xlabel(\"FullBath\")\nplt.ylabel(\"2ndflrSF\")\nplt.title(\"FullBath >0\")\nplt.grid(True)\nplt.show()","9ae3a76e":"s = df[df[\"FullBath\"] >1][\"BedroomAbvGr\"].value_counts().head(5)\nplt.title(\"BedroomAbvGr\")\ns.plot(kind='bar',figsize=(10,10))\nplt.xlabel(\"BedroomAbvGr\")\nplt.ylabel(\"FullBatch\")\nplt.show()","8044a6eb":"plt.scatter(df[\"LotArea\"],df.TotRmsAbvGrd)\nplt.xlabel(\"Lotarea\")\nplt.ylabel(\"TotRmsAbvGrd\")\nplt.title(\"Lotarea for TotRmsAbvGrd\")\nplt.show()","996cac8e":"plt.scatter(df[\"LotArea\"],df.BedroomAbvGr)\nplt.xlabel(\"Lotarea\")\nplt.ylabel(\"BedroomAbvGr\")\nplt.title(\"Lotarea for BedroomAbvGrd\")\nplt.show()","f9e9aea9":"import pandas as pd\n#reading the dataset\ndf=pd.read_csv(\"..\/input\/data-house-price\/train.csv\",sep = \",\")\n# Create target object and call it y\ny = df.SalePrice.values\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = df[features]","b8333b09":"#separating train (80%) and test (20%) sets\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)","2e73c7e2":"#normalization\nfrom sklearn.preprocessing import MinMaxScaler\nscalerX=MinMaxScaler(feature_range=(0,1))\nx_train[x_train.columns]=scalerX.fit_transform(x_train[x_train.columns])\nx_test[x_test.columns]=scalerX.transform(x_test[x_test.columns])","c6081b81":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(x_train,y_train)\ny_head_lr=lr.predict(x_test)\n\nprint(\"real value of y_test[1]:\"+str(y_test[1]) + \"-> the predict:\" +str(lr.predict(x_test.iloc[[1],:])))\nprint(\"real value of y_test[2]: \" + str(y_test[2]) + \" -> the predict: \" + str(lr.predict(x_test.iloc[[2],:])))\n\nfrom sklearn.metrics import r2_score\nprint(\"r_square score:\",r2_score(y_test,y_head_lr))\n\ny_head_lr_train=lr.predict(x_train)\nprint(\"r_square score (train dataset):\",r2_score(y_train,y_head_lr_train))","e2a98e60":"from sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(n_estimators=100,random_state=42)\nrfr.fit(x_train,y_train)\ny_head_rfr=rfr.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nprint(\"r_square score:\",r2_score(y_test,y_head_rfr))\nprint(\"real value of y_test[1]:\" +str(y_test[1])+\"-> the predict:\"+str(rfr.predict(x_test.iloc[[1],:])))\nprint(\"real value of y_test[2]:\" +str(y_test[2])+\"-> the predict:\"+str(rfr.predict(x_test.iloc[[2],:])))\n\ny_head_rf_train=rfr.predict(x_train)\nprint(\"r_square score (train dataset):\",r2_score(y_train,y_head_rf_train))","e459d68d":"from sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor(random_state=42)\ndtr.fit(x_train,y_train)\ny_head_dtr=dtr.predict(x_test)\n\nfrom sklearn.metrics import r2_score\nprint(\"r_square score:\",r2_score(y_test,y_head_dtr))\nprint(\"real value of y_test[1]:\" +str(y_test[1])+ \"-> the predict\" +str(dtr.predict(x_test.iloc[[1],:])))\nprint(\"real value of y_test[2]:\" +str(y_test[2])+ \"-> the predict\"+ str(dtr.predict(x_test.iloc[[2],:])))\n\ny_head_dtr_train=dtr.predict(x_train)\nprint(\"r_square score (train dataset):\",r2_score(y_train,y_head_dtr_train))\n","becb0118":"y = np.array([r2_score(y_test,y_head_lr),r2_score(y_test,y_head_rfr),r2_score(y_test,y_head_dtr)])\nx=[\"LinearRegression\",\"RandomForestReg\",\"DecisionTreeReg.\"]\nplt.bar(x,y)\nplt.title(\"Comparision of Regression Algorithms\")\nplt.xlabel(\"Regressor\")\nplt.ylabel(\"r2_score\")\nplt.show()\n","fd0a8456":"import pandas as pd\n#reading the dataset\ndf=pd.read_csv(\"..\/input\/data-house-price\/train.csv\",sep = \",\")\n# Create target object and call it y\ny = df.SalePrice.values\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = df[features]","7715b48f":"# To improve accuracy, create a new Random Forest model which you will train on all training data\nrfr_full_data =RandomForestRegressor(random_state=0)\n\n# fit RandomForest_model_on_full_data on all data from the training data\nrfr_full_data.fit(X,y)\n","68240470":"test_data=pd.read_csv(\"..\/input\/data-house-price\/test.csv\",sep = \",\")","09a57820":"features=['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\n","1876ee31":"test_X = test_data[features]","f4cefcef":"# make predictions which we will submit. \ntest_preds=rfr_full_data.predict(test_X)\ntest_preds","f3be2cdb":"output = pd.DataFrame({'Id': test_data.Id,\n                     'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)\n#print(output.shape)","7735935f":"### <a id='prepareForRegression'>Preparing Data for Regression<\/a>","94dae798":"# Creating a Model For the Competition\n\nBuild a Random Forest model and train it on all of **X** and **y**.  ","3e19d4dd":"### <a id=' linearRegression'>Linear Regression<\/a>","c7f3a693":"### <a id =\"randomForestRegression\">Random Forest Regresssion<\/a>","256b9931":"### <a id=\"DecisionTreeRegression\">Decision Tree Regression <\/a>","5c733c3d":"### <a id='comparisonOfRegression'>Comparison of Regression Algorithms<\/a>\n\n* Linear regression and random forest regression algorithms were better than decision tree regression algorithm.","354acfd9":"## <a id='regression'> REGRESSION ALGORITHMS <\/a>","e181fead":"## <a id=\"makepred\">Make Predictions<\/a>\nRead the file of \"test\" data. And apply the model to make predictions"}}