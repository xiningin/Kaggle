{"cell_type":{"7cadeb28":"code","c16c1891":"code","79f84560":"code","8e78b809":"code","4297bc95":"code","349e805e":"code","eec467a2":"code","478f6231":"code","5782756b":"code","211f218b":"code","4fc92aa1":"code","49fbfbd5":"code","8807ffe9":"code","f442d2b8":"code","765f2237":"code","cc3d82a0":"code","8676bc32":"code","b9a91a99":"code","067ee770":"code","9e14bf23":"code","5732e9b8":"code","82720628":"code","3cacfaef":"code","54e90cdb":"code","09a40138":"code","6466a78e":"code","593a4d16":"code","16dab399":"code","18f43037":"markdown","ca608f88":"markdown","f491f9cf":"markdown","22149fcd":"markdown","5df87459":"markdown","eb5e602e":"markdown","fb1e5b56":"markdown","0b4f8ee5":"markdown","b89ed19a":"markdown","6078f432":"markdown","74bcf5da":"markdown","4f0cd52d":"markdown"},"source":{"7cadeb28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c16c1891":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId = test_df[\"PassengerId\"]\ntrain_df.tail()","79f84560":"train_df.columns","8e78b809":"train_df.head()","4297bc95":"train_df.describe()","349e805e":"train_df.info()","eec467a2":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    \n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (6,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","478f6231":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","5782756b":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{}: \\n\".format(train_df[c].value_counts))","211f218b":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()","4fc92aa1":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor i in numericVar:\n    plot_hist(i)","49fbfbd5":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","8807ffe9":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","f442d2b8":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","765f2237":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","cc3d82a0":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","8676bc32":"def detect_outlier(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # first quartile\n        Q1 = np.percentile(df[c], 25)\n        # third quartile\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indices\n        outlier_list_col = df[((df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step))].index\n        # store indices\n        outlier_indices.extend(outlier_list_col) \n\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2 )\n\n    return multiple_outliers","b9a91a99":"train_df.loc[detect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","067ee770":"# drop outliers\ntrain_df = train_df.drop(detect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop = True)","9e14bf23":"train_df.loc[detect_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","5732e9b8":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","82720628":"train_df.columns[train_df.isnull().any()]","3cacfaef":"train_df.isnull().sum()","54e90cdb":"train_df[train_df[\"Embarked\"].isnull()]","09a40138":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")","6466a78e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","593a4d16":"train_df[train_df[\"Fare\"].isnull()]","16dab399":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[train_df[\"Pclass\"] == 3][\"Fare\"].mean())\ntrain_df[train_df[\"Fare\"].isnull()]","18f43037":"<a id = 4><\/a>\n## Categorical Variable","ca608f88":"<a id = \"8\"><\/a>\n# **Missing Values**\n* Find Missing Value\n* Fill Missing Value","f491f9cf":"<a id = \"1\"><\/a>\n# Load and Check Data","22149fcd":"* float64(2): fare and age\n* int64(5)  : passengerId, survived, pclass, sibsp and parch\n* object(5) : name, sex, ticket, cabin and embarked","5df87459":"<a id = \"10\"><\/a>\n## **Fill Missing Value**\n* Embarked has 2 missing values\n* Fare has 1 missing value","eb5e602e":"<a id = 7><\/a>\n# **Outlier Detection**","fb1e5b56":"# **INTRODUCTION**\nThe sinking of Titanic is one of the most notorious shipwreck in the history. In 1912 during her voyage, Titanic sank after colliding with an iceberg. Died 1502 person out of 2224\n\n<font color = \"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n * [Univariate Variable Analysis](#3) \n    * [Categorical Variable Analysis](#4)\n    * [Numeric Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Values](#8)\n * [Find Missing Value](#9) \n * [Fill Missing Value](#10) ","0b4f8ee5":"<a id = 5><\/a>\n## Numeric Variable","b89ed19a":"<a id = 6><\/a>\n# **Basic Data Analysis**\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","6078f432":"<a id = 3><\/a>\n# **Univariate Variable Analysis**\n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch \n* Numeric Variable     : Fare, Age and PassengerId","74bcf5da":"<a id = \"9\"><\/a>\n## **Find Missing Value**","4f0cd52d":"<a id = \"2\"><\/a>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived   : passenger survive (1) or died (0)\n1. Pclass     : passenger class\n1. Name       : passenger name\n1. Sex        : passenger cender\n1. Age        : passenger age\n1. SibSp      : number of siblings or spouses\n1. Parch      : number of parents or children\n1. Ticket     : ticket number\n1.  Fare      : ticket fee\n1.  Cabin     : cabin category\n1.  Embarked  : the port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)"}}