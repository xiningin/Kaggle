{"cell_type":{"2e90350b":"code","9ecf9a9b":"code","2976c67e":"code","02e0c5a0":"code","7a811b7c":"code","d36cc15a":"code","fab539e1":"code","401ae2b1":"code","1f374733":"code","92afd407":"code","3fca769e":"code","22c3b23c":"code","fba7268a":"code","1e2777ab":"code","773a5e0d":"code","8b90e32d":"code","4000dbbb":"code","528bc6f4":"code","4e6790da":"code","6658ff4e":"code","8513d896":"code","1c0c441c":"code","dfadfd47":"code","5afcbc96":"code","5054f4e8":"code","cb0c8f6f":"markdown","bdf401bd":"markdown","e7957013":"markdown","336def7a":"markdown","c6ece180":"markdown","7b82322e":"markdown","1e6c23e1":"markdown","a1ca7b36":"markdown","0b161602":"markdown","144a94e5":"markdown","171138c9":"markdown","92252664":"markdown","f93e40f0":"markdown","dcb1c41a":"markdown","0c2d56b7":"markdown","14d997d0":"markdown","34753fa3":"markdown","fc5beae6":"markdown","b03d465d":"markdown","af0db17d":"markdown","f8f866f9":"markdown","2cf7c399":"markdown","99b20934":"markdown","069b9c36":"markdown"},"source":{"2e90350b":"import os\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom random import seed\nseed(42)","9ecf9a9b":"chest_df = pd.read_csv('..\/input\/world-of-warcraft-items-dataset\/chest.csv')\nhands_df = pd.read_csv('..\/input\/world-of-warcraft-items-dataset\/hands.csv')\nfeet_df = pd.read_csv('..\/input\/world-of-warcraft-items-dataset\/feet.csv')\nhead_df = pd.read_csv('..\/input\/world-of-warcraft-items-dataset\/head.csv')\nlegs_df = pd.read_csv('..\/input\/world-of-warcraft-items-dataset\/legs.csv')\n\n# One hot encoding of body part type, as this is a very important feature\nchest_df['chest_type']=1\nhands_df['hands_type']=1\nfeet_df['feet_type']=1\nhead_df['head_type']=1\nlegs_df['legs_type']=1\n\n\n# ### Way to automate this:\n# i = 0\n# df = pd.DataFrame()\n# for file in os.listdir('.\/world-of-warcraft-items-dataset'):\n#     app = pd.read_csv(f'.\/world-of-warcraft-items-dataset\/{file}')\n#     app['item_type_'+str(i)]=1\n#     df = pd.concat([df,app])\n#     i+=1\n    ","2976c67e":"df = pd.concat([chest_df,feet_df,hands_df,head_df,legs_df], sort=True)\ndf.head()","02e0c5a0":"df.isnull().sum()\/df.shape[0]","7a811b7c":"tooMuchNa = df.columns[df.isnull().sum()\/df.shape[0] > 0.98]","d36cc15a":"df = df.drop(tooMuchNa, axis =1)","fab539e1":"df = df.drop(['name_enus','classes','socket1','socket2','socket3'], axis =1)","401ae2b1":"df = df.rename({'quality':'target'},axis =1)","1f374733":"df = df.dropna(subset=['target'])","92afd407":"df = df.fillna(0)\ndf","3fca769e":"df.max()","22c3b23c":"df.min()","fba7268a":"df = df.drop('itemset', axis=1) ","1e2777ab":"sns.distplot(df['agi'])","773a5e0d":"sns.distplot(df['agi'].apply(lambda x: np.log(x+1)))","8b90e32d":"logNeeded = df.drop('target',axis=1).max()[df.drop('target',axis=1).max() > 500].index\nfor column in logNeeded:\n    df[column]=df[column].apply(lambda x: np.log(x+1))","4000dbbb":"df.max()","528bc6f4":"df = df.drop(['agiint','strint'], axis=1)","4e6790da":"df.hist(figsize=(20,20))","6658ff4e":"sns.countplot(df['target'])","8513d896":"df = df[df['target'].isin(['Uncommon', 'Rare', 'Epic'])]\ndf","1c0c441c":"#Label Encoding\nLE_df = df.replace( {'target': {'Uncommon':0,'Rare':1, 'Epic':2}})","dfadfd47":"from sklearn.model_selection import train_test_split\nX = LE_df.drop('target',axis =1)\ny = LE_df['target']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)","5afcbc96":"import xgboost as xgb\nfrom sklearn.metrics import accuracy_score\n\n\nXGBC = xgb.XGBClassifier(max_depth=10,n_estimators=50)\nXGBC.fit(X_train,y_train)\ny_pre_xgb= XGBC.predict(X_test)\nprint('Accuracy : ',accuracy_score(y_test,y_pre_xgb))\n","5054f4e8":"fig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(XGBC, height=0.5, ax=ax, importance_type='gain')\nplt.show()","cb0c8f6f":"I think stats with a high max will be better distributed and applying log as shown above","bdf401bd":"Classification using XGBoost","e7957013":"Now that the data is cleaned, let's see the distributions","336def7a":"Filling NaN values to 0 (which is fair as many of those NaN represent a 0 in the stat)","c6ece180":"Dropping Features with too many NaN values","7b82322e":"Train test splitting","1e6c23e1":"Dropping name because its irrevelant and classes + socket information","a1ca7b36":"Great accuracy!","0b161602":"Itemset is an ID just like name so I decided to drop it","144a94e5":"agiint and strint are almost duplicates of agi and str so I'm dropping them","171138c9":"Knowing what these features mean I'm not surprised to see this, and quite happy that this time the classifier \"thinks like a human being\"!","92252664":"# Data Exploration and Cleaning","f93e40f0":"Data distribution : linear vs log ?","dcb1c41a":"The dataset is very unbalanced, I could have for example oversampled the very rare classes but I decided to drop them and just do classification on the 3 most important ones.","0c2d56b7":"Target distribution","14d997d0":"Checking data distribution","34753fa3":"Renaming quality to target as this is going to be the target of the Classification","fc5beae6":" **Goal:** The goal here is to make a classifier that takes in-game attributes of an item as an input and outputs it's item quality (restricted to Uncommon, Rare and Epic). In other words it's just a simple classification problem.\n\nThe metric used during testing will simply be the accuracy score.\n\n\n**Dependencies: numpy, pandas, matplotlib, seaborn, scikit-learn, xgboost.**","b03d465d":"Extracting the data for different body parts and joining them","af0db17d":"Checking for NaN values","f8f866f9":"Label encoding for Classification","2cf7c399":"Thank you for reading !","99b20934":"# Classification\nTree based methods seem great for this kind of problem as they divide the input space in 'boxes'","069b9c36":"Dropping rows with NaN target"}}