{"cell_type":{"a37e4b34":"code","ce1bcf2d":"code","d97145f5":"code","4c1d8efe":"code","18335b58":"code","adcebe92":"code","13480b06":"code","3f7645f0":"code","dd75fa48":"code","02f203ac":"code","a8136f1d":"code","902e383e":"code","af713e84":"code","cc9f3a22":"code","d0241474":"code","0f2688d8":"code","a37606b3":"code","89492b9b":"code","59856348":"code","b2daeaea":"code","cf9dad8d":"code","aa934bb6":"code","2ed28073":"code","d47d208d":"code","34dd1647":"code","4d5f8f8e":"code","7c2ba853":"code","7977919a":"code","68bf0a20":"code","a0574158":"code","1f3eff5e":"code","5e01fd0b":"code","8af6d5f7":"code","ad22d2fe":"markdown","f9178f22":"markdown","158fe7df":"markdown","8496a8a8":"markdown","72e49065":"markdown","97bd88ba":"markdown","8f882b2c":"markdown","58cabcee":"markdown","a674b1f5":"markdown","4850dc38":"markdown","9908d7a0":"markdown","e6e51956":"markdown"},"source":{"a37e4b34":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom keras.layers import *\nfrom keras.models import Model\n\nimport os\nfrom pathlib import Path\nprint(os.listdir(\"..\/input\"))\n","ce1bcf2d":"root = Path(\"..\/input\")\nval_size = 0.2\nrseed = 7","d97145f5":"# set random seed\nnp.random.seed(rseed)\nfrom tensorflow import set_random_seed\nset_random_seed(rseed)","4c1d8efe":"def normalize(data):\n    return np.array(data).reshape(-1,28,28,1)\/255\n\ndef show_inst(fsize,ims,labels,r=3,c=3):\n    fig=plt.figure(figsize=fsize)\n    labels=np.array(labels)\n    for i in range(len(ims)):\n        fig.add_subplot(r,c,i+1)\n        plt.imshow(ims[i].reshape(28,28),cmap='gray')\n        plt.title(np.argmax(labels[i]))\n    plt.tight_layout(True)","18335b58":"train_data = pd.read_csv(root\/'train.csv')","adcebe92":"test_data = pd.read_csv(root\/'test.csv')","13480b06":"train_data.head()","3f7645f0":"train_data.describe()","dd75fa48":"train_data.info()","02f203ac":"train_data.shape","a8136f1d":"def num_missing(data):\n    print(f\"Missing values: {data.isnull().sum().sum()}\")","902e383e":"num_missing(train_data)","af713e84":"train_data.label.hist()","cc9f3a22":"test_data.head()","d0241474":"test_data.describe()","0f2688d8":"test_data.info()","a37606b3":"train_enc = pd.get_dummies(train_data,columns=['label'])\ntrain_enc.head()","89492b9b":"split = StratifiedShuffleSplit(n_splits=1,test_size=val_size,random_state=rseed)\n\nfor train_index,val_index in split.split(train_data,train_data['label']):\n    train=train_enc.iloc[train_index]\n    val=train_enc.iloc[val_index]\ntrain.shape,val.shape","59856348":"train_X,train_y=train.loc[:,'pixel0':'pixel783'],train.loc[:,'label_0':'label_9']\nval_X,val_y=val.loc[:,'pixel0':'pixel783'],val.loc[:,'label_0':'label_9']","b2daeaea":"train_X.head()","cf9dad8d":"train_y.head()","aa934bb6":"train_X=normalize(train_X)\nval_X=normalize(val_X)\n\nshow_inst((6,6),train_X[:9],train_y[:9])","2ed28073":"bs=256","d47d208d":"from keras.preprocessing.image import ImageDataGenerator\n\ntraingen = ImageDataGenerator(\n        rotation_range=20,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.2,\n        zoom_range=0.2)","34dd1647":"def conv_concat(X, filters):\n    X1 = Conv2D(filters,(3,3),padding='same')(X)\n    X1 = BatchNormalization(axis=3)(X1)\n    X1 = Activation('relu')(X1)\n    \n    X2 = Conv2D(filters,(5,5),padding='same')(X)\n    X2 = BatchNormalization(axis=3)(X2)\n    X2 = Activation('relu')(X2)\n    \n    X3 = Conv2D(filters,(7,7),padding='same')(X)\n    X3 = BatchNormalization(axis=3)(X3)\n    X3 = Activation('relu')(X3)\n    \n    X = concatenate([X1,X2,X3],axis=3)\n    \n    return X\n\ndef model(input_shape = (28, 28, 1), classes = 10):\n    \n    # Define the input as a tensor with shape input_shape\n    X_input = Input(input_shape)\n    \n    X = conv_concat(X_input, 32)\n    X = MaxPooling2D(pool_size=(2,2))(X)\n    \n    X = conv_concat(X, 64)\n    X = MaxPooling2D(pool_size=(2,2))(X)\n    \n    X = conv_concat(X, 128)\n    X = MaxPooling2D(pool_size=(4,4))(X)\n    \n    # dense block\n    X = Flatten()(X)\n    \n    X = Dense(100,activation='relu')(X)\n    X = Dropout(rate=0.6)(X)\n    \n    X = Dense(50,activation='relu')(X)\n    X = Dropout(rate=0.4)(X)\n    \n    X = Dense(10,activation='softmax')(X)\n    \n    fmodel = Model(inputs=X_input,outputs=X,name='fmodel')\n\n    return fmodel","4d5f8f8e":"kmodel = model(train_X.shape[1:])","7c2ba853":"kmodel.compile('adam','binary_crossentropy',metrics=['accuracy'])","7977919a":"kmodel.fit_generator(traingen.flow(train_X,y=train_y, batch_size=bs),epochs=100,steps_per_epoch=train_X.shape[0]\/\/bs)","68bf0a20":"val_preds = kmodel.evaluate(val_X,val_y)\nprint(f'Loss: {val_preds[0]}')\nprint(f'Val accuracy: {val_preds[1]}')","a0574158":"test = normalize(test_data)\npreds = kmodel.predict(test)\nlabels = np.argmax(preds,axis=1)\nsub_df = pd.DataFrame({'ImageId':test_data.index+1,'Label':labels})","1f3eff5e":"show_inst((10,10),test[:25],preds[:25],r=5,c=5)","5e01fd0b":"sub_df.head(10)","8af6d5f7":"sub_df.to_csv('sub.csv',index=False)","ad22d2fe":"# Load Data","f9178f22":"# Evaluation","158fe7df":"## Test Data","8496a8a8":"Control Variables","72e49065":"# Helper functions","97bd88ba":"# Prepare data","8f882b2c":"# Data augmentation","58cabcee":"Train data have 40000 labelled examples. The image resolution is 28 x 28. There are no missing values. There are almost equal number of examples for each label.","a674b1f5":"# Training","4850dc38":"# Make predictions","9908d7a0":"## Train data","e6e51956":"# Explore Data"}}