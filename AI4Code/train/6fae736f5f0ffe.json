{"cell_type":{"5402f983":"code","8159f6a2":"code","2087a25d":"code","72178265":"code","2c176a82":"code","45eb4be9":"code","4dfc216e":"markdown"},"source":{"5402f983":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# apply ignore\nimport warnings\nwarnings.filterwarnings('ignore')","8159f6a2":"#load train data\ntrain_data = pd.read_csv('..\/input\/learn-together\/train.csv')\ntrain_data.head()","2087a25d":"# Select columns \nselected_features = [cname for cname in train_data.columns if cname not in ['Id','Cover_Type']]\n\nX = train_data[selected_features]\ny = train_data.Cover_Type","72178265":"from sklearn.model_selection import train_test_split\n\ny_labels = np.unique(train_data.Cover_Type)\n\n# Break off validation set from training data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=42)","2c176a82":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import confusion_matrix\nfrom pydoc import locate\n\ndef build_model(model):\n    # Fit to data and predict using pipelined scaling\n    classifier = make_pipeline(StandardScaler(), model)\n    classifier.fit(X_train, y_train)\n    return classifier\n\ndef make_report(model, y_pred):\n    from sklearn.metrics import classification_report\n    print(classification_report(y_val, y_pred))\n    \ndef plot_confusion_matrix(model, y, y_pred, normalized=True, cmap='bone'):\n    classes = np.sort(y.unique())\n    # run trained model.\n    cm = confusion_matrix(y, y_pred)\n    #df = pd.DataFrame(cm, columns)\n    labels = y_labels.astype('str')\n    df = pd.DataFrame(cm, columns=labels, index=labels)\n    print(df)\n   \ndef print_report(className, params=None):\n    print('\\n   '+className+'\\n')\n    the_class = locate(className)\n    model = the_class() if params==None else the_class(**params)\n    #print(model)\n    classifier = build_model(model)\n    y_prd = classifier.predict(X_val)\n    make_report(classifier, y_prd)\n    plot_confusion_matrix(model, y_val, y_prd)    ","45eb4be9":"# Inherently multiclass\nprint_report('sklearn.naive_bayes.BernoulliNB')\nprint_report('sklearn.tree.DecisionTreeClassifier')\nprint_report('sklearn.tree.ExtraTreeClassifier')\nprint_report('sklearn.naive_bayes.GaussianNB')\nprint_report('sklearn.neighbors.KNeighborsClassifier')\nprint_report('sklearn.semi_supervised.LabelPropagation')\nprint_report('sklearn.semi_supervised.LabelSpreading')\nprint_report('sklearn.discriminant_analysis.LinearDiscriminantAnalysis')\nprint_report('sklearn.svm.LinearSVC', {'multi_class':\"crammer_singer\"} )\n# solver : \u2018newton-cg\u2019, \u2018sag\u2019, \u2018saga\u2019 and \u2018lbfgs\u2019 \nprint_report('sklearn.linear_model.LogisticRegression', {'multi_class':\"multinomial\",'solver':\"lbfgs\"} )\nprint_report('sklearn.linear_model.LogisticRegressionCV', {'multi_class':\"multinomial\",'solver':\"lbfgs\"} )\nprint_report('sklearn.neural_network.MLPClassifier')\nprint_report('sklearn.neighbors.NearestCentroid')\nprint_report('sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis')\n#print_report('sklearn.neighbors.RadiusNeighborsClassifier',{'radius'=1.2})\nprint_report('sklearn.ensemble.RandomForestClassifier')\nprint_report('sklearn.linear_model.RidgeClassifier')\n\n# Multiclass as One-Vs-One:\nprint_report('sklearn.svm.NuSVC')\nprint_report('sklearn.svm.SVC')\nprint_report('sklearn.gaussian_process.GaussianProcessClassifier', {'multi_class':\"one_vs_one\"})\n\n# Multiclass as One-Vs-All\nprint_report('sklearn.ensemble.GradientBoostingClassifier')\nprint_report('sklearn.gaussian_process.GaussianProcessClassifier', {'multi_class':\"one_vs_rest\"})\nprint_report('sklearn.svm.LinearSVC', {'multi_class':\"ovr\"})\nprint_report('sklearn.linear_model.LogisticRegression', {'multi_class':\"ovr\"})\nprint_report('sklearn.linear_model.LogisticRegressionCV', {'multi_class':\"ovr\"})\nprint_report('sklearn.linear_model.SGDClassifier')\nprint_report('sklearn.linear_model.Perceptron')\nprint_report('sklearn.linear_model.PassiveAggressiveClassifier')","4dfc216e":"**Utility functions**"}}