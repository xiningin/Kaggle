{"cell_type":{"e9919627":"code","67687f3b":"code","75ee429b":"code","af287fa2":"code","4b77368a":"code","a403e8ff":"code","0663832e":"code","5ee43cf1":"code","17aa1168":"code","c7db9dc3":"code","a2fedd56":"code","0f89bb5b":"code","0b541b33":"code","2ede4793":"code","5b7a1550":"code","df672111":"code","cb368cd5":"code","27d972fc":"code","e64ae6b6":"code","a8f774c2":"code","623a4c72":"code","6c534c45":"code","9b18d0ac":"code","dd053b1d":"code","ab909d59":"code","e6ccd38b":"code","1673f3bf":"code","0ebfafa7":"code","24fd58b0":"code","755260a5":"code","03a2891f":"code","96b2f687":"code","614e3984":"code","dfb91d43":"code","dff46b8a":"code","cc4a8fc3":"code","2a593158":"code","6503d7ae":"code","7dd7e6ac":"code","4a4f2fdd":"code","61e60f80":"markdown","08e9fabb":"markdown","e5236b08":"markdown","9e1dd1fe":"markdown","8fe5179a":"markdown","e6889f8c":"markdown","931a25ec":"markdown","ae29ffe0":"markdown","31b817d4":"markdown","bd0ed6d6":"markdown","85976b98":"markdown","b8dceb20":"markdown","d878d6ec":"markdown","6092f8a4":"markdown","6ee5e8da":"markdown","2f2c8a65":"markdown"},"source":{"e9919627":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","67687f3b":"data = pd.read_csv(\"..\/input\/hivprogression\/training_data.csv\")","75ee429b":"data.head()","af287fa2":"list(data)","4b77368a":"data = data[['PatientID', 'Resp', 'VL-t0', 'CD4-t0']]","a403e8ff":"data.shape","0663832e":"data.isna().sum()","5ee43cf1":"data.head()","17aa1168":"data['Resp'].value_counts()","c7db9dc3":"data['Resp'].nunique()","a2fedd56":"data['Resp'].unique()","0f89bb5b":"import matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(data.drop(['PatientID'],axis = 1))\nplt.show()","0b541b33":"plt.plot(data['Resp'],data['CD4-t0'],'bo')\nplt.xlabel('Resp')\nplt.ylabel('CD4-t0')\nplt.show()","2ede4793":"data.boxplot(by = 'Resp',column = ['CD4-t0'],grid = False)\n","5b7a1550":"plt.plot(data['Resp'],data['VL-t0'],'bo')\nplt.xlabel('Resp')\nplt.ylabel('VL-t0')\nplt.show()","df672111":"data.boxplot(by = 'Resp',column = ['VL-t0'],grid = False)","cb368cd5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","27d972fc":"X = data[['VL-t0','CD4-t0']].values\nY = data[['Resp']].values","e64ae6b6":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2, random_state =2 )","a8f774c2":"model = LogisticRegression()\nmodel.fit(X_train, Y_train)","623a4c72":"prediction = model.predict(X_test)","6c534c45":"from sklearn.metrics import classification_report \nprint(classification_report(Y_test, prediction))","9b18d0ac":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, Y_train)","dd053b1d":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","ab909d59":"print(classification_report(Y_test, y_pred))","e6ccd38b":"y_score_rf = model.predict_proba(X_test)[:,-1]","1673f3bf":"from sklearn.metrics import average_precision_score, auc, roc_curve, precision_recall_curve\naverage_precision = average_precision_score(Y_test, y_score_rf)\n\nprint('Average precision-recall score RF: {}'.format(average_precision))","0ebfafa7":"from sklearn.metrics import precision_recall_curve\nimport matplotlib.pyplot as plt\n\nprecision, recall, _ = precision_recall_curve(Y_test, y_score_rf)\nplt.step(recall, precision, color='b', alpha=0.2,\n         where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.2,\n                 color='b')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n          average_precision))","24fd58b0":"# importing SMOTE\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\n# applying SMOTE to our data and checking the class counts\nX_resampled, y_resampled = SMOTE().fit_resample(X, Y)\nprint(sorted(Counter(y_resampled).items()))","755260a5":"X1_train,X1_test,Y1_train,Y1_test = train_test_split(X_resampled,y_resampled,test_size = 0.2, random_state =2 )","03a2891f":"model.fit(X1_train, Y1_train)","96b2f687":"pred1 = model.predict(X1_test)","614e3984":"print(classification_report(Y1_test, pred1))","dfb91d43":"from imblearn.over_sampling import ADASYN\nfrom collections import Counter\n# applying SMOTE to our data and checking the class counts\nX_resampled1, y_resampled1 = ADASYN().fit_resample(X, Y)\nprint(sorted(Counter(y_resampled1).items()))","dff46b8a":"X2_train,X2_test,Y2_train,Y2_test = train_test_split(X_resampled1,y_resampled1,test_size = 0.2, random_state =2 )","cc4a8fc3":"model.fit(X2_train, Y2_train)","2a593158":"pred2 = model.predict(X2_test)","6503d7ae":"print(classification_report(Y2_test, pred2))","7dd7e6ac":"y_score_rf2 = model.predict_proba(X2_test)[:,-1]\naverage_precision1 = average_precision_score(Y2_test, y_score_rf2)\n\nprint('Average precision-recall score RF: {}'.format(average_precision1))","4a4f2fdd":"precision, recall, _ = precision_recall_curve(Y2_test, y_score_rf2)\n\nplt.step(recall, precision, color='b', alpha=0.2,\n         where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.2,\n                 color='b')\n\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(\n          average_precision1))","61e60f80":" **Logistic Regression**","08e9fabb":"**K Nearest Neighbour**","e5236b08":"As there is class imbalance in the data we will use SMOTE (Synthetic Minority Oversampling Technique) and ADASYN (Adaptive synthetic sampling approach) to balanced the classes.","9e1dd1fe":"We can see there is class imbalance in data.","8fe5179a":"One outliers is present in the data. Patients which are in class 0 are having low value of VL-t0 and those are in class 1 are having high values of VL-t0.","e6889f8c":"Matrix plot of data excluding the Patient Id column to check the correlation between the variables. ","931a25ec":"We can see that though accuracy of the model is good which is 82% but our model is not prforming well. As precision and recall for class 1 is very poor.","ae29ffe0":"Check number of unique entries and what are the entries.","31b817d4":"We can see that now models accuracy and recall both are good. Our model is performing bettter.","bd0ed6d6":"We can see that though accuracy of the model is good which is 82% but our model is not prforming well. As precision and recall for class 1 is very poor.","85976b98":"Precision Recall Curve","b8dceb20":"No missing Values ","d878d6ec":"Average precision-recall score is 0.38 which is very low.","6092f8a4":"We can see that now models accuracy and recall both are good. Our model is performing bettter.","6ee5e8da":"There is no relation between the variables.","2f2c8a65":"Some outliers are present in the data. Patients which are in class 0 are having high value of CD4-t0 and those are in class 1 are having low values of CD4-t0."}}