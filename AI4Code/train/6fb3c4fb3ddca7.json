{"cell_type":{"914b6cef":"code","cfd2fddf":"code","169f87e3":"code","727895c3":"code","57ee8451":"code","738b3424":"code","b29a57f2":"markdown"},"source":{"914b6cef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n#df = pd.read_csv('..\/input\/earthquake.csv')\n\n# Any results you write to the current directory are saved as output.","cfd2fddf":"df11 = pd.read_csv('..\/input\/earthquake.csv')\ndf11=df11.loc[df11['country'] == 'turkey']\ndf11['country'].loc[df11['country']=='turkey']='Turkey'\ndf11.sort_values(by=['richter'],ascending=False).head(10)","169f87e3":"dfdmy=pd.DataFrame()\ndf1=[]\nmf1=[]\nyf1=[]\nfor i in df11.date:\n    a,b,c=i.split('.')\n    yf1.append(a)\n    mf1.append(b)\n    df1.append(c)\ndfdmy['day']=df1\ndfdmy['month']=mf1\ndfdmy['year']=yf1\ndf11=pd.concat([df11,dfdmy],axis=1)\ndf11=df11.drop(['id','xm','md','mw','ms','mb','dist'], axis=1)\ndf11.dropna(inplace=True)","727895c3":"df=df11.nlargest(1000, 'richter')\ndata = [ dict(\n        type = 'scattergeo',\n        locationmode = 'country names',\n        lon = df['long'],\n        lat = df['lat'],\n        text = df['city'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = False,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Bluered',\n            cmin = 0,\n            color = df['richter'],\n            cmax = df['richter'].max(),\n            colorbar=dict(\n                title=\"Highest Earthquakes by Years\"\n            )\n        ))]\n\nlayout = dict(\n        title = 'Most Harmful Earthquakes on Turkey',\n        #colorbar = True,\n        geo = dict(\n            scope='asia',\n            projection=dict(type='mercator'),\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(55, 217, 217)\",\n            countrycolor=\"rgb(31, 58, 147)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5,\n            lonaxis = dict(range= [25.5, 45.5]),\n            lataxis = dict(range= [35.5, 42.5]),\n            showocean=True,\n            showlakes=True\n        ),\n    )\n\nfig = dict( data=data, layout=layout )\niplot(fig)","57ee8451":"df11.dropna(inplace=True)\ndf11.year=df11.year.astype(int)\ndf11.year.min()\ndf11=df11.loc[df11['richter'] >= 4]\ndf11=df11.sort_values(by=['year'],ascending=True)\ndf11.info()","738b3424":"years = [each for each in list(df11.year.unique())]  # str unique years\ntypes=['Eathquake']\n# make figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(\n            scope='asia',\n            projection=dict(type='mercator'),\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(55, 217, 217)\",\n            countrycolor=\"rgb(31, 58, 147)\",\n            countrywidth = 1,\n            subunitwidth = 1,\n            lonaxis = dict(range= [25.5, 45.5]),\n            lataxis = dict(range= [35.5, 42.5]),\n            showocean=True,\n            showlakes=True\n        )\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': df11.year.min(),\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\n\n# make data\nyear = 1950\n\ndata_dict = dict(\n    type='scattergeo',\n    lon = df11['long'],\n    lat = df11['lat'],\n    hoverinfo = 'text',\n    text = df11['area'],\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        #color = 'blue',\n        opacity = 0.7),\n)\nfigure['data'].append(data_dict)\n\n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    dataset_by_year = df11.loc[df11['year'] == year]\n\n    data_dict = dict(\n                type='scattergeo',\n                lon = dataset_by_year['long'],\n                lat = dataset_by_year['lat'],\n                hoverinfo = 'text',\n                text = dataset_by_year['area'],\n                mode = 'markers',\n                marker=dict(\n                    sizemode = 'area',\n                    sizeref = 1,\n                    size= 10 ,\n                    line = dict(width=1,color = \"white\"),\n                    color = 'blue',\n                    opacity = 0.7),\n            )\n    frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': str(year),\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\n\nfigure[\"layout\"][\"autosize\"]= True\nfigure[\"layout\"][\"title\"] = \"Earthquake\"       \n\nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)","b29a57f2":"1999 Golcuk Earthquake hasn't found... Anyway i continue for visualization..."}}