{"cell_type":{"9a5cc4a2":"code","7a84255d":"code","94f85336":"code","035ca7c2":"code","067a061c":"code","791e5500":"code","414305e7":"code","b04a1390":"code","4f4862dd":"code","9e3c1571":"code","6bb9ae39":"code","7aecf08a":"code","eab32d03":"code","d423b856":"code","300343cf":"code","d8609cec":"code","06e5f7da":"code","b738b706":"code","e84932b8":"code","f9b53cce":"code","db0dff87":"code","534da2f0":"code","95da52c6":"code","d224edaf":"code","b96018ac":"code","5c3cb5e1":"code","c1d80295":"code","6fd2d417":"code","8726a09e":"code","a1f223c4":"code","ff1016f9":"code","2031d3ae":"code","9fb877fc":"code","78d18eb7":"code","ba1bf575":"code","c5c1bc74":"code","36ec9dd0":"code","a142654f":"code","f1d39df2":"code","50f137af":"code","5be0be6f":"code","0a5fca0f":"code","dbb60768":"code","7d211155":"code","e04fcba0":"markdown","d811467e":"markdown","f8235545":"markdown","d1cc30a9":"markdown","1cb9d114":"markdown","82db6014":"markdown","1657f406":"markdown","252edfe4":"markdown","f5bb1782":"markdown","5e5867ed":"markdown","33499942":"markdown","0d801e76":"markdown","c41609e7":"markdown","6ed32f3a":"markdown","bcef8251":"markdown","01730d56":"markdown","2aafd803":"markdown","e7194c1a":"markdown","3759805b":"markdown","77efe828":"markdown","43f71120":"markdown","ea4022a1":"markdown","65a0f7db":"markdown","5a715123":"markdown","ac613d5e":"markdown","0adc952f":"markdown","3b41d84e":"markdown","a01e1ef6":"markdown","8476a66d":"markdown","d85a9b70":"markdown","b25eac7a":"markdown","2d857e4a":"markdown"},"source":{"9a5cc4a2":"import os\nfrom typing import List\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom gensim.models import Word2Vec\n\nfrom tqdm import tqdm","7a84255d":"train = pd.read_csv('..\/input\/data-science-winter-osaka2\/train.csv')\ntest = pd.read_csv('..\/input\/data-science-winter-osaka2\/test.csv')","94f85336":"train.head(10)","035ca7c2":"type(train['popular_tags'][0])","067a061c":"def eval_data(row):\n    if row == row:\n        return eval(row)\n    else:\n        return np.nan\n\nfor column in ['popular_tags', 'categories', 'minimum_requirements', 'recommended_requirements']:\n    train[column] = train[column].apply(eval_data)\n    test[column] = test[column].apply(eval_data)","791e5500":"type(train['popular_tags'][0]), type(train['categories'][0]), type(train['minimum_requirements'][0]), type(train['recommended_requirements'][0])","414305e7":"train.info()","b04a1390":"train['release_date'].tail(50)","4f4862dd":"train['description'].tolist()[0]","9e3c1571":"train['user_reviews'].hist()","6bb9ae39":"from torchvision.io import read_image\n\nfor i in range(10):\n    img = read_image(os.path.join('..\/input\/data-science-winter-osaka2\/train\/train', train['img_path'][i]))\n    print(img.shape)\n    plt.imshow(img.permute(1, 2, 0))\n    plt.show()","7aecf08a":"train['is_train'] = True\ntest['user_reviews'] = np.nan\ntest['is_train'] = False\n\ndf = pd.concat([train, test], axis=0)\ndf = df.reset_index(drop=True)","eab32d03":"def category_numeric_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    # \u30bf\u30b0\u306e\u6570\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df['popular_tags_len'] = df['popular_tags'].fillna(\"\").apply(len)\n    df['categories_len'] = df['categories'].fillna(\"\").apply(len)\n    \n    # \u5024\u6bb5\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df = price_preprocess(df)\n    \n    # developer\u3068publisher\u3092label encode\u3059\u308b\u3002\n    for column in ['developer', 'publisher']:\n        df = apply_label_encode(df, column)\n    \n    # \u5e74\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    # \u6b63\u898f\u8868\u73fe\u3067\u5e74\u3092\u62bd\u51fa\u3059\u308b\u3002\n    df['year'] = df['release_date'].str.extract(r'(\\d{4})')\n    df['year'] = df['year'].astype(float)\n    return df\n\ndef price_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    df['price'] = df['price'].replace({'free':0})\n    price_null_index = df[df['price']==''].index\n    df.loc[price_null_index, 'price'] = -1\n    df['price'] = df['price'].astype(float)\n    return df\n\ndef apply_label_encode(df:pd.DataFrame, column:str)-> pd.DataFrame:\n    label_df = df[~df[column].isnull()]\n    le = LabelEncoder()\n    le_data = le.fit_transform(label_df[column])\n    label_df_index = label_df.index\n    df.loc[label_df_index, f'{column}_label_encoding'] = le_data\n    return df","d423b856":"df = category_numeric_preprocess(df)","300343cf":"def tfidf_preprocess(df: pd.DataFrame, column: str, embedding_dim: int=20)-> pd.DataFrame:\n    # tfidf\u3067\u5909\u63db\u3057\u305f\u5f8c\u306b\u3001SVD\u3067\u6642\u9650\u524a\u6e1b\u3059\u308b\u3002\n    tfidf_vec = TfidfVectorizer(ngram_range=(1,2))\n    text_tfidf = tfidf_vec.fit_transform(df[column].fillna('').values.tolist())\n    svd = TruncatedSVD(n_components=embedding_dim, algorithm='arpack',random_state=9999)\n    return svd.fit_transform(text_tfidf)\n\nclass W2VSWEM(object):\n    def __init__(self, word_list: List[str], embedding_dim:int=20):\n        # word2vec\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u3001wrod2vec\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b\u3002\n        self.word_list = word_list\n        self.embedding_dim = embedding_dim\n        self.__validation_type()\n        self.__train_w2v()\n        \n    def __validation_type(self):\n        if isinstance(self.word_list, pd.Series):\n            self.word_list = self.word_list.tolist()\n        if not isinstance(self.word_list, list):\n            raise TypeError(f'you should use list object, however you are using {type(word_list)}.')\n        \n    def __train_w2v(self):\n        self.w2v_model = Word2Vec(self.word_list, vector_size=self.embedding_dim)\n        self.vocab = self.w2v_model.wv.key_to_index\n        \n    def _get_single_column_vec(self, words) -> np.array:\n        result = []\n        \n        for word in words:\n            if word in self.vocab:\n                \n                vector = self.w2v_model.wv[word]\n                result.append(vector)\n        result = np.array(result)\n        return result\n    \n    def get_result(self):\n        self.swem_result = np.zeros([len(self.word_list), self.embedding_dim])\n        for num, i in enumerate(self.word_list):\n            swem = self._get_single_column_vec(i)\n            if len(swem):\n                swem = np.mean(swem, axis=0)\n            else:\n                swem = np.zeros(self.embedding_dim)\n            self.swem_result[num, :] = swem    ","d8609cec":"# word2vec\u3067tags\u3092encode\u3059\u308b\ntags_df = []\nfor column in ['categories', 'popular_tags']:\n    df[column] = df[column].fillna('')\n    w2v_swem = W2VSWEM(df[column].tolist())\n    w2v_swem.get_result()\n    result = w2v_swem.swem_result\n    _df = pd.DataFrame(result, columns=[f'w2v_{column}_{x}' for x in range(result.shape[1])])\n    tags_df.append(_df)\ntags_df = pd.concat(tags_df, axis=1)","06e5f7da":"# \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u3092tfidf\u3067\u7279\u5fb4\u91cf\u306b\u3059\u308b\ntext_svd = tfidf_preprocess(df, 'description')\ntext_svd_df = pd.DataFrame(text_svd, columns=[f'text_svd_{x}' for x in range(text_svd.shape[1])])","b738b706":"nlp_df = pd.concat([tags_df, text_svd_df], axis=1)","e84932b8":"use_df = df.copy()\nuse_columns = ['name', 'price', 'popular_tags_len', 'categories_len', 'year', 'developer_label_encoding', 'publisher_label_encoding', 'user_reviews', 'is_train']\nuse_df = use_df[use_columns]\n","f9b53cce":"use_df = pd.concat([use_df, nlp_df], axis=1)","db0dff87":"#Groupby\u3067\u96c6\u7d04\u306e\u5143\u306b\u306a\u308b'year'\u30ab\u30e9\u30e0\u3092\u30ab\u30c6\u30b4\u30ea\u5909\u6570\uff08str\uff09\u306b\u3059\u308b\u3002\u6570\u5024\u5909\u6570\uff08float\uff09\u306e\u307e\u307e\u3060\u3068\u3067\u304d\u306a\u3044\n\nuse_df['year_str'] = use_df['year'].astype(object)","534da2f0":"#Year\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\n#'mean'\u306e\u6240\u3092\u5909\u66f4\u3059\u308b\u3068\u69d8\u3005\u306a\u7279\u5fb4\u91cf\u306e\u96c6\u7d04\u30ab\u30e9\u30e0\u3092\u4f5c\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u7279\u5fb4\u91cf\u304c\u8ffd\u52a0\u3067\u304d\u307e\u3059\n#'median'\u306f\u30e1\u30c7\u30a3\u30a2\u30f3\u3001'max'\u306f\u6700\u5927\u3001'min'\u306f\u6700\u5c0f\u3001'sum'\u306f\u5408\u8a08\u3001'std'\u306f\u6a19\u6e96\u504f\u5dee\u3001'var'\u306f\u5206\u6563\u3067\u3059\n\nuse_df['YearPriceMean'] = use_df.groupby(\"year_str\")[\"price\"].transform('mean')","95da52c6":"#'year_str'\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001Drop\u3057\u3066\u304a\u304d\u307e\u3059\nuse_df = use_df.drop(columns=['year_str'])","d224edaf":"#\u4e00\u756a\u53f3\u306b\u3001'YearPriceMean'\u306e\u30ab\u30e9\u30e0\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\nuse_df.head(5)","b96018ac":"train = use_df[use_df['is_train']==True].reset_index(drop=True)\ntest =  use_df[use_df['is_train']!=True].reset_index(drop=True)","5c3cb5e1":"train = train.drop(columns=['is_train'])\ntest = test.drop(columns=['is_train', 'user_reviews'])","c1d80295":"train.shape, test.shape","6fd2d417":"X = train.copy().drop(columns='user_reviews')\ny = train['user_reviews']","8726a09e":"y = y.map({'c0':0, 'c1':1, 'c2':2})","a1f223c4":"from typing import Optional, List\n\nimport lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\n\nclass TreeModel:\n    \"\"\"LGB\/XGB\u306eAPI\u3092\u7d71\u4e00\u3057\u305fwrapper\"\"\"\n\n    def __init__(self, model_type: str):\n        self.model_type = model_type\n        self.trn_data = None\n        self.val_data = None\n        self.model = None\n\n    def train(self,\n              params: dict,\n              X_train: pd.DataFrame,\n              y_train: np.ndarray,\n              X_val: pd.DataFrame,\n              y_val: np.ndarray,\n              train_weight: Optional[np.ndarray] = None,\n              val_weight: Optional[np.ndarray] = None,\n              train_params: dict = {}):\n        if self.model_type == \"lgb\":\n            self.trn_data = lgb.Dataset(X_train, label=y_train, weight=train_weight)\n            self.val_data = lgb.Dataset(X_val, label=y_val, weight=val_weight)\n            self.model = lgb.train(params=params,\n                                   train_set=self.trn_data,\n                                   valid_sets=[self.trn_data, self.val_data],\n                                   **train_params)\n        elif self.model_type == \"xgb\":\n            self.trn_data = xgb.DMatrix(X_train, y_train, weight=train_weight, enable_categorical=True)\n            self.val_data = xgb.DMatrix(X_val, y_val, weight=val_weight, enable_categorical=True)\n            self.model = xgb.train(params=params,\n                                   dtrain=self.trn_data,\n                                   evals=[(self.trn_data, \"train\"), (self.val_data, \"val\")],\n                                   **train_params)\n        else:\n            raise NotImplementedError\n        return self.model\n\n    def predict(self, X: pd.DataFrame):\n        if self.model_type == \"lgb\":\n            return self.model.predict(X, num_iteration=self.model.best_iteration)  # type: ignore\n        elif self.model_type == \"xgb\":\n            X_DM = xgb.DMatrix(X)\n            return self.model.predict(X_DM)  # type: ignore\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_names_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_name()\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").keys())\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_importances_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_importance(importance_type=\"gain\")\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").values())\n        else:\n            raise NotImplementedError","ff1016f9":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\n\n\n\nfeature_importances = pd.DataFrame()\nscores=0.0\nnum_fold=5\noof = pd.DataFrame()\n    \nskf = StratifiedKFold(n_splits=num_fold, random_state=1213, shuffle=True)\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(\"*\" * 100)\n    print(f\"Fold: {fold}\")\n\n    X_trn = X.iloc[trn_idx].drop(columns='name')\n    X_val = X.iloc[val_idx].drop(columns='name')\n    y_trn = y.iloc[trn_idx].reset_index(drop=True)\n    y_val = y.iloc[val_idx].reset_index(drop=True)\n        \n\n    model = TreeModel(model_type='lgb')\n    params = {\n                \"objective\": \"softmax\",\n                \"boosting\": \"gbdt\",\n                \"num_class\":3,\n                \"learning_rate\": 0.1,\n                \"seed\": 1213,\n                'metric': 'multi_logloss',\n                'num_leaves': 5,\n                'verbose': 1,\n                'lambda_l2': 3,\n            }\n    model.train(params=params,\n                X_train=X_trn,\n                y_train=y_trn.values.astype('float32'),\n                X_val=X_val,\n                y_val=y_val.values.astype('float32'),\n                train_params={\n                                \"num_boost_round\": 20000,\n                                \"early_stopping_rounds\": 100,\n                                \"verbose_eval\": 1000,\n                })\n    fi_tmp = pd.DataFrame()\n    fi_tmp[\"feature\"] = model.feature_names_\n    fi_tmp[\"importance\"] = model.feature_importances_\n    fi_tmp[\"fold\"] = fold\n    feature_importances = feature_importances.append(fi_tmp)\n\n    val_pred = model.predict(X_val)\n    score = log_loss(y_val, val_pred)\n    scores += score \/ num_fold\n\n    pred = model.predict(test.drop(columns='name'))\n    if fold == 0:\n        prediction = np.copy(pred) \/ num_fold\n    else:\n        prediction += pred \/ num_fold\n    print(f\"score: {score:.5f}\")\n    oof = oof.append(pd.DataFrame({\"name\": X.loc[val_idx, \"name\"], \"preds_c0\": val_pred[:, 0], \n                                   \"preds_c1\": val_pred[:, 1],\"preds_c2\": val_pred[:, 2]}))\nprint(f'average_score: {scores:.5f}')","2031d3ae":"oof['prediction'] = np.argmax(np.array(oof.iloc[:, 1:]), axis=1)","9fb877fc":"from sklearn.metrics import accuracy_score\naccuracy_score(y, oof.sort_index()['prediction'])","78d18eb7":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n\norder = list(feature_importances.groupby(\"feature\").mean().sort_values(\"importance\", ascending=False).index)\nplt.figure(figsize=(10, 30))\nsns.barplot(x=\"importance\", y=\"feature\", data=feature_importances, order=order)\nplt.title(f\"LGBM importance, average auc score {score}\")\nplt.tight_layout()","ba1bf575":"#\u4e88\u6e2c\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\nprediction","c5c1bc74":"#DataFlame\u5f62\u5f0f\u306b\u3057\u3066\u307f\u307e\u3059\nprediction2 = pd.DataFrame(prediction)\nprediction2","36ec9dd0":"#\u5206\u5e03\u3092\u307f\u3066\u307f\u307e\u3059\nsns.histplot(prediction2)","a142654f":"# Yeo-Johnson\u5909\u63db\u3092\u3057\u307e\u3059\uff08\u30de\u30a4\u30ca\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\u3001Boxcox\u5909\u63db\u3067\u5909\u63db\u3067\u304d\u307e\u305b\u3093\uff09\nfrom sklearn.preprocessing import PowerTransformer\n\nyeo_johnson_df = prediction2.copy()\nsk_yeojohnson = PowerTransformer(method='yeo-johnson') # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\nyeojohnson_data = sk_yeojohnson.fit_transform(yeo_johnson_df) # \u5909\u63db\nprediction3 = yeojohnson_data","f1d39df2":"#\u5909\u63db\u5f8c\u306e\u5206\u5e03\u3092\u307f\u3066\u307f\u307e\u3059\nsns.histplot(prediction3)","50f137af":"prediction4 = pd.DataFrame(prediction3)\nprediction4","5be0be6f":"#\uff11\u884c\u306e3\u3064\u306e\u6570\u5b57\u304b\u3089\u4e00\u756a\u5927\u304d\u306a\u3082\u306e\u3092\u9078\u629e\ntest_prediction = np.argmax(prediction3, axis=1)\n#DataFlame\u5f62\u5f0f\u306b\u5909\u3057\u307e\u3059\npred_df = pd.DataFrame(test_prediction) \n#\u305d\u306e\u7d50\u679c\u3067C0\u3001C1\u3001C2\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\npred_df = pred_df[0].map({0:'c0', 1:'c1', 2:'c2'})","0a5fca0f":"pred_df","dbb60768":"sub = pd.read_csv('..\/input\/data-science-winter-osaka2\/sample_submission.csv')\nsub['user_reviews'] = pred_df.tolist()\nsub","7d211155":"sub.to_csv('submission.csv', index=False)","e04fcba0":"0:C0,1:C1,2:C0,3:C0,4:C0\u3000\uff5e\u300018536:C2\u3068\u306a\u308a\u3001\u5909\u63db\u524d\u3068\u5fae\u5999\u306b\u5909\u308f\u308a\u307e\u3057\u305f","d811467e":"3\u5217\u8907\u6570\u884c\u306e\u884c\u5217\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059","f8235545":"\u6b20\u640d\u3057\u3066\u306a\u3044\u306e\u306f\u3001\u540d\u524d\u3068\u3001categories, \u753b\u50cf\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u307f\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u6b20\u640d\u304c\u3042\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\nrelease_date\u306e\u6700\u5f8c\u306e\u65b9\u3092\u898b\u3066\u307f\u308b\u3068\u3001","d1cc30a9":"groupby\u3067\u306f\u3042\u308b\u96c6\u7d04\u5143\u5909\u6570\u3067\u306e\u7d71\u8a08\u91cf\u3092\u7b97\u51fa\u3067\u304d\u307e\u3059\n\u4f8b\u3048\u3070\u3001\u8ca9\u58f2\u5e74\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u3092\u7b97\u51fa\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u66f8\u304d\u307e\u3057\u305f\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u5143\u306b\u6570\u5024\u30c7\u30fc\u30bf\u306e\u96c6\u7d04\u5909\u6570\u3092\u7b97\u51fa\u3057\u305f\u3044\u5834\u5408\u306f\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3059","1cb9d114":"\u524d\u306enotebook\u304b\u3089\u753b\u50cf\u90e8\u5206\u3092\u53d6\u308a\u9664\u3044\u3066\u3001GPU\u3092\u7121\u304f\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002","82db6014":"# \u524d\u51e6\u7406\u3092\u884c\u3046\n## \u30ab\u30c6\u30b4\u30ea\u3001\u6570\u5024","1657f406":"popular_tags\u3068categories\u3001minimum_requirements\u3001recommended_requirements\u306flist\u3068dict\u30c7\u30fc\u30bf\u3063\u307d\u3044\u3002","252edfe4":"# \u2605\u2605\u5370\u307e\u3067\u306fStarter\u306e\u307e\u307e\u3067\u3059","f5bb1782":"## \u2605\u2605\u3053\u3053\u307e\u3067\u306b\u306a\u308a\u307e\u3059","5e5867ed":"# \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u8efd\u304fEDA\u3092\u3057\u3066\u307f\u308b","33499942":"## \u2605\u3053\u3053\u307e\u3067","0d801e76":"call of duty\u306e\u8aac\u660e\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u8aac\u660e\u306e\u6587\u5b57\u5217\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001NLP\u306e\u524d\u51e6\u7406\u304c\u9069\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u3002","c41609e7":"\u5143\u3005list\u30c7\u30fc\u30bf\u3060\u3063\u305f\u306e\u304c\u3001csv\u306b\u3057\u305f\u3053\u3068\u3067\u6587\u5b57\u5217\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002<br>\n\u5143\u3005\u306e\u30c7\u30fc\u30bf\u306b\u623b\u3059\u305f\u3081\u306b\u3001eval\u95a2\u6570\u3092\u9069\u5fdc\u3057\u3066\u3044\u304d\u307e\u3059\u3002","6ed32f3a":"## \u2605\u3053\u3053\u304b\u3089\u306f[Strater with groupby]\u3067\u516c\u958b\u6e08\u307f","bcef8251":"\u5206\u5e03\u304c\u5909\u308f\u308a\u307e\u3057\u305f","01730d56":"\u3069\u3046\u3082\u30010\uff1dC0\u30011\uff1dC1\u30012\uff1dC2\u3092\u793a\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\nNo0\uff5e4\u306fC0\uff1f\u300118356\uff5e18540\u306fC2\uff1f","2aafd803":"\u4ed6\u306b\u3082\u3001developer, publisher\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3001price\u306f\u6570\u5024\u5909\u6570\u3001popular_tags, categories\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u3053\u308c\u3089\u306e\u524d\u51e6\u7406\u3092\u3053\u306enotebook\u3067\u306f\u884c\u3044\u307e\u3059\u3002","e7194c1a":"0\u304c\u30dd\u30b8\u30c6\u30a3\u30d6\u3001\uff11\u304c\u30cd\u30ac\u30c6\u30a3\u30d6\u30012\u304c\u30ec\u30d3\u30e5\u30fc\u306a\u3057\u306a\u306e\u3067\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u306a\u3044\u306e\u304c\u6700\u3082\u591a\u3088\u3046\u3067\u3059\u3002<br>\n\u753b\u50cf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","3759805b":"description\u3082\u898b\u3066\u307f\u307e\u3059","77efe828":"## \u2605\u2605\u3053\u3053\u304b\u3089\u306f[Sterter with Yeo-Johnson\u5909\u63db]\u306b\u306a\u308a\u307e\u3059","43f71120":"\u86f8\u4e95\u5148\u751f\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u5f8c\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u3068\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u4f55\u304b\u3067\u304d\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u4ee5\u524d\u8abf\u3079\u305f\u5bfe\u6570\u5909\u63db\u306e\u4ef2\u9593\u306eYeo-Johnson\u5909\u63db\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u7d50\u679c\u3092\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u305f","ea4022a1":"\u5024\u6bb5\u3068publisher,\u5e74\u304c\u5927\u304d\u306a\u5f71\u97ff\u3092\u53ca\u307c\u3057\u3066\u3044\u307e\u3059\u3002","65a0f7db":"\u3068\u6587\u5b57\u5217\u306e\u307f\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u3084\u3001\u5927\u96d1\u628a\u306a\u5b63\u7bc0\u3001\u5e74\u306e\u307f\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u306a\u3069\u5168\u3066\u306b\u65e5\u4ed8\u304c\u5165\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\u65e5\u4ed8\u306b\u3064\u3044\u3066\u306f\u524d\u51e6\u7406\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<br>","5a715123":"## \u8a00\u8a9e\u7cfb\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u308b","ac613d5e":"target\u306e\u5206\u5e03\u3092\u898b\u3066\u307f\u307e\u3059","0adc952f":"## CV\u306eaccuracy\u3092\u51fa\u3059","3b41d84e":"Target encodeing\u3092\u3057\u306a\u3044\u306e\u3067\u3001dataframe\u3092\u7d50\u5408\u3057\u3066\u524d\u51e6\u7406\u3092\u3057\u307e\u3059\u3002","a01e1ef6":"# \u5b66\u7fd2\u3055\u305b\u308b","8476a66d":"\u4ee5\u4e0a\u3067\u30c7\u30fc\u30bf\u304c\u5143\u306e\u5f62\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3057\u305f\u3002\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u304b\u3081\u307e\u3059\u3002","d85a9b70":"# Submisson file\u3092\u4f5c\u308b","b25eac7a":"\u77e5\u3063\u3066\u308b\u30b2\u30fc\u30e0\u304c\u51fa\u3066\u304f\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\uff08\u79c1\u306fcall of duty\u3068fallout\u306f\u77e5\u3063\u3066\u3044\u307e\u3057\u305f\uff09<br>\n\u3053\u308c\u3089\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u306f215x460\u306e\u30b5\u30a4\u30ba\u3067\u3042\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\u753b\u50cf\u3092\u6570\u5024\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u4f55\u304b\u5bc4\u4e0e\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","2d857e4a":"## \u30e2\u30c7\u30eb\u4f5c\u6210\naccuracy\u304cmetric\u3067\u3059\u304c\u3001\u4e88\u6e2c\u78ba\u7387\u3092\u51fa\u3057\u30665 fold\u306e\u5e73\u5747\u3092\u53d6\u308a\u305f\u3044\u306e\u3067\u3001log_loss\u3067\u30e2\u30c7\u30eb\u3092\u4e00\u5ea6\u4f5c\u6210\u3057\u307e\u3059\u3002"}}