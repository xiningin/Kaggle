{"cell_type":{"0d52e272":"code","58145ea8":"code","c07536d7":"code","a3ed9d8a":"code","d9bdb088":"code","7163d6b2":"code","60614322":"code","0c8a0844":"code","d7dc1507":"code","04b26d91":"code","982e0775":"code","cf6f0a6f":"code","5d8bc7d8":"code","ff21e8c0":"code","963b19aa":"markdown","23d699ce":"markdown","c2fc8e04":"markdown","f2990eab":"markdown","49802d36":"markdown","bba465e2":"markdown","4718e1fb":"markdown","468f515c":"markdown","e11880be":"markdown","afdc7d34":"markdown","5dd85ffb":"markdown","5b351e16":"markdown","a0b13238":"markdown"},"source":{"0d52e272":"from learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex3 import q7 as blackjack","58145ea8":"def should_hit(player_total, dealer_card_val, player_aces):\n    return False","c07536d7":"blackjack.simulate_one_game()","a3ed9d8a":"blackjack.simulate(n_games=90000)","d9bdb088":"def hard(player_aces):\n    if player_aces >= 1:\n        return True\n    else: return False\n\n\n\ndef should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    if hard(player_aces)== True and player_total <= 11: return True\n    elif hard(player_aces)== True and player_total >= 18: return False\n    elif hard(player_aces)== False and player_total <= 15: return True\n    elif hard(player_aces)== False and player_total >= 17: return False\n    elif hard(player_aces)== True and (4 <= dealer_card_val <= 6) and player_total == 12: return False\n    elif hard(player_aces)== True and (4 <= dealer_card_val <= 6) and (13 <= player_total <= 16): return False\n    elif hard(player_aces)== False and [(dealer_card_val != 9) or (dealer_card_val != 10) or (dealer_card_val != 11) or (dealer_card_val != 1)]: return False\n    else: return True","7163d6b2":"blackjack.simulate_one_game()","60614322":"blackjack.simulate(n_games=90000)","0c8a0844":"def count(player_total):\n    if player_total <= 8: return 2\n    elif 8< player_total < 13: return 1\n    elif player_total >= 17: return -2\n    else: return 0\n \n\ndef count_d(dealer_card_val):\n    if dealer_card_val >= 9: return -1\n    elif dealer_card_val < 7: return 1\n    else: return 0\n    \n    \ndef tot(player_total,dealer_card_val):\n    return count_d(dealer_card_val) + count(player_total)","d7dc1507":"def should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    if tot(player_total,dealer_card_val) > 0: return True\n    if tot(player_total,dealer_card_val) < 0: return False\n    elif tot(player_total,dealer_card_val) == 0: return True","04b26d91":"blackjack.simulate_one_game()","982e0775":"blackjack.simulate(n_games=90000)","cf6f0a6f":"def should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    if hard(player_aces)== True and player_total <= 11: return True\n    elif hard(player_aces)== True and player_total >= 18: return False\n    elif hard(player_aces)== False and player_total <= 15: return True\n    elif hard(player_aces)== False and player_total >= 17: return False\n    elif hard(player_aces)== True and (4 <= dealer_card_val <= 6) and player_total == 12: return False\n    elif hard(player_aces)== True and (4 <= dealer_card_val <= 6) and (13 <= player_total <= 16): return False\n    elif hard(player_aces)== False and [(dealer_card_val != 9) or (dealer_card_val != 10) or (dealer_card_val != 11) or (dealer_card_val != 1)]: return False\n    elif tot(player_total,dealer_card_val) > 0: return True\n    elif tot(player_total,dealer_card_val) < 0: return False\n    elif tot(player_total,dealer_card_val) ==0: return True\n    else: return False","5d8bc7d8":"blackjack.simulate_one_game()","ff21e8c0":"blackjack.simulate(n_games=90000)","963b19aa":"Surprisingly, the simplified card counting strategy does basically as well as the 'optimal strategy' defined above. Next, we'll combine both methods. ","23d699ce":"The combined model fares comparably to the 'optimal' strategy (but is better than the simplified counting cards strategy implemented, as one would expect). ","c2fc8e04":"Simulate many games:","f2990eab":"What have we learned? Its actually much harder to optimize the most conservative strategy (never hitiing); even by encorporating some version of counting cards or by using the most optimal strategy as suggested by experts. ","49802d36":"Defining functions for basic card counting ","bba465e2":"Most conservative strategy (never hit)","4718e1fb":"First we'll see how the card counting strategy does on it's own; then we'll add it to the previous strategy","468f515c":"Simulate many games:","e11880be":"Simulate 1 game:","afdc7d34":"Again, preforming simulations:","5dd85ffb":"Adjust should_hit function to determine when the player should hit based on: dealer initial card value, number of aces (the hard() function) and player total. ","5b351e16":"Simulate 1 game:","a0b13238":"Using code from Kaggle exercises to create an optimal strategy to playing Blackjack verses the dealer. "}}