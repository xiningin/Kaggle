{"cell_type":{"83e60c2e":"code","4e75969c":"code","b8fa52cd":"code","4371ecb4":"code","9f9d430e":"code","326f9429":"code","15c1bdc4":"code","9dfd6039":"code","22a27a91":"code","21e13936":"code","8b6f4ad5":"code","9d01948b":"code","9fe04f3f":"code","988740af":"code","ed5d2685":"markdown","776500bf":"markdown","171356ce":"markdown","95133571":"markdown","968755ed":"markdown"},"source":{"83e60c2e":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport xgboost as xgb\n\nfrom sklearn.metrics import r2_score","4e75969c":"data = pd.read_csv('..\/input\/nyc-property-sales\/nyc-rolling-sales.csv')","b8fa52cd":"data","4371ecb4":"data.info()","9f9d430e":"data['SALE PRICE'].unique()","326f9429":"def onehot_encode(df, columns, prefixes):\n    df = df.copy()\n    \n    for column, prefix in zip(columns, prefixes):\n        dummies = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    \n    return df","15c1bdc4":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Remove any records where we don't have a sale price\n    df['SALE PRICE'] = df['SALE PRICE'].replace(' -  ', np.NaN).astype(np.float)\n    df = df.dropna(axis=0).reset_index(drop=True)\n    \n    # Remove unnecessary\/difficult feature columns\n    df = df.drop(['Unnamed: 0', 'BLOCK', 'LOT', 'EASE-MENT','ADDRESS', 'APARTMENT NUMBER'], axis=1)\n    \n    # Fill missing values with np.NaN\n    df = df.replace(' -  ' , np.NaN)\n    \n    # Fill missing values with column means\n    for column in ['LAND SQUARE FEET', 'GROSS SQUARE FEET']:\n        df[column] = df[column].astype(np.float)\n        df[column] = df[column].fillna(df[column].mean())\n    \n    # Get year, month, and day features from SALE DATE column\n    df['SALE DATE'] = pd.to_datetime(df['SALE DATE'])\n    \n    df['YEAR'] = df['SALE DATE'].apply(lambda x: x.year)\n    df['MONTH'] = df['SALE DATE'].apply(lambda x: x.month)\n    df['DAY'] = df['SALE DATE'].apply(lambda x: x.day)\n    \n    df = df.drop('SALE DATE', axis=1)\n    \n    # Make numeric categorical features into string columns\n    for column in ['BOROUGH', 'ZIP CODE']:\n        df[column] = df[column].astype(str)\n    \n    # One-hot encode remaining categorical features\n    df = onehot_encode(\n        df,\n        columns=[\n            'BOROUGH', 'ZIP CODE', 'NEIGHBORHOOD', 'BUILDING CLASS CATEGORY',\n            'TAX CLASS AT PRESENT', 'BUILDING CLASS AT PRESENT', 'BUILDING CLASS AT TIME OF SALE'\n        ],\n        prefixes=['BO', 'ZC', 'NE', 'BC', 'TX', 'BP', 'BS']\n    )\n    \n    # Split df into X and y\n    y = df['SALE PRICE'].copy()\n    X = df.drop('SALE PRICE', axis=1).copy()\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    \n    X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\n    \n    return X, y","9dfd6039":"X, y = preprocess_inputs(data)","22a27a91":"X","21e13936":"y","8b6f4ad5":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=123)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=123)\n\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndval = xgb.DMatrix(X_val, label=y_val)\ndtest = xgb.DMatrix(X_test, label=y_test)","9d01948b":"params = {'learning_rate': 0.001, 'max_depth': 6, 'lambda': 0.01}\n\nmodel = xgb.train(params, dtrain, num_boost_round=10000, evals=[(dval, 'eval')], early_stopping_rounds=10)","9fe04f3f":"y_true = np.array(y_test)\ny_pred = model.predict(dtest)","988740af":"print(\"Model R^2 Score: {:.4f}\".format(r2_score(y_true, y_pred)))","ed5d2685":"# Task for Today  \n\n***\n\n## NYC Property Price Prediction  \n\nGiven *data about property in New York City*, let's try to predict the **price** of a given piece of property.  \n  \nWe will use XGBoost to make our predictions.","776500bf":"# Getting Started","171356ce":"# Training","95133571":"# Preprocessing","968755ed":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/_T-tk_2b9pY"}}