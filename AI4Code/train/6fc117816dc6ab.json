{"cell_type":{"1eb869bd":"code","6483ee9e":"code","9c27f7d4":"code","28f846b9":"code","907c1834":"code","fd7c21f1":"code","14c1fbbb":"code","72285f15":"code","f1beddcf":"code","fe449745":"code","6606f29c":"code","4e3824de":"code","b0993404":"code","e7996389":"code","95bd73e3":"code","835c55b3":"code","6d493740":"code","c77acec0":"code","2af72476":"code","99a4ec9a":"code","f704515a":"markdown","e3a1277e":"markdown","7e0ab555":"markdown","5857099e":"markdown","5cf6cbc4":"markdown","f54d0e8d":"markdown","2a0f753d":"markdown","ad72fefe":"markdown","7362010f":"markdown"},"source":{"1eb869bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6483ee9e":"train_dataset  =pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_dataset = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","9c27f7d4":"train_dataset =train_dataset.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\ntest_passengerIds = test_dataset['PassengerId'].values\ntest_dataset=test_dataset.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\n","28f846b9":"train_dataset.head()","907c1834":"train_dataset = pd.get_dummies(train_dataset, columns = ['Sex','Embarked'])\ntest_dataset = pd.get_dummies(test_dataset, columns = ['Sex','Embarked'])","fd7c21f1":"train_dataset.head()\n","14c1fbbb":"test_dataset.head()","72285f15":"train_dataset.isnull().sum()","f1beddcf":"test_dataset.isnull().sum()","fe449745":"train_dataset['Age'].fillna(train_dataset['Age'].mean(),inplace = True)\ntest_dataset['Age'].fillna(test_dataset['Age'].mean(),inplace = True)\ntest_dataset['Fare'].fillna(test_dataset['Fare'].mean(),inplace = True)","6606f29c":"train_dataset.isnull().sum()","4e3824de":"test_dataset.isnull().sum()","b0993404":"X_train = train_dataset.iloc[:,1:].values\ny_train=train_dataset['Survived'].values","e7996389":"print(X_train)","95bd73e3":" X_test = test_dataset.values","835c55b3":"print(X_test)","6d493740":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c77acec0":"from sklearn.svm import SVC\n\nclassifier= SVC(kernel='rbf')\nclassifier.fit(X_train, y_train)","2af72476":"y_pred = classifier.predict(X_test)","99a4ec9a":"output = pd.DataFrame({'PassengerId':test_passengerIds, 'Survived': y_pred})\noutput.to_csv('submission.csv', index=False)","f704515a":"# Creating output file","e3a1277e":"# Importing data","7e0ab555":"# Checking null values","5857099e":"# Predicting test values","5cf6cbc4":"# Training the Kernel SVM model on the Training set","f54d0e8d":"# Filling null values","2a0f753d":"# Splitting test set","ad72fefe":"# Splitting traning set","7362010f":"# Feature scaling"}}