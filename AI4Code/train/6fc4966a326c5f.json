{"cell_type":{"e3176d3b":"code","3de73cc4":"code","aac6f6c5":"code","32675230":"code","67f311a6":"code","535ae1e5":"code","a738b524":"code","148b429c":"code","ef38f03d":"code","4982ea97":"code","b6f0622c":"code","51bce1ec":"code","d7e939f0":"code","693dc47e":"code","346f8e4a":"code","32726fc9":"code","e28c5f43":"code","719d3e54":"code","0ec4fac5":"code","6ed553b1":"code","1e74a482":"code","2fe09598":"code","a3c6e5e0":"code","cc47798f":"code","38739b23":"code","459aa2b1":"code","df095964":"code","507849bf":"code","7b7ba179":"code","99f611cf":"code","981b37e9":"code","5b6432c5":"code","1b2b4c35":"code","06544216":"code","2b4bfb62":"code","0ac4ebf7":"code","e34707f5":"code","1f1ad32b":"code","08569c3d":"code","96e41a3e":"code","f370aef0":"code","3fef1c99":"code","0c4fcbb7":"code","cd858846":"code","f88f446d":"code","91e1459c":"code","5765432f":"code","9ba33e3d":"code","bc1833a0":"code","ab412b6c":"code","30b955e5":"code","22658375":"code","46ec25a4":"code","92451e2f":"code","365a3445":"code","7fca98c9":"code","45e7f29d":"markdown","e68a6752":"markdown","c3b4d69c":"markdown","3f4dc0d7":"markdown","ffc0929c":"markdown","faa7b7f5":"markdown","a33dbd5a":"markdown","a550829d":"markdown","5ee98fce":"markdown","bcfe7917":"markdown","400a1080":"markdown","a36c7327":"markdown","a03aff7b":"markdown","d1d571a9":"markdown","61697e2b":"markdown","7ab8d6ff":"markdown","d2961f4b":"markdown","9833519b":"markdown"},"source":{"e3176d3b":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV","3de73cc4":"#Reading the dataset\ndata = pd.read_csv('..\/input\/imdb-5000-movie-dataset\/movie_metadata.csv')\ndata.head()","aac6f6c5":"# Name of 28 Columns in the dataset\ndata.columns","32675230":"#Shape: Number of columns & Number of rows in the dataset\ndata.shape","67f311a6":"#To check non-null values out of total values & datatype of columns\ndata.info()","535ae1e5":"#Used for calculating some statistical data like percentile, mean and std of the numerical values\ndata.describe()","a738b524":"#This will include count, unique, top and freq. The top is the most common value. The freq is the most common value\u2019s frequency.\ndata.describe(include = 'object')","148b429c":"#Finding Columns with Missing Values\ndata.isna().any()","ef38f03d":"#Finding the number of missing values in all columns\ndata.isnull().sum()","4982ea97":"plt.figure(figsize=(20,6))\nheatmap = sns.heatmap(data.isnull(),cmap='Oranges',cbar=False,yticklabels=False)\nheatmap.set_xticklabels(heatmap.get_xmajorticklabels(), fontsize = 18)","b6f0622c":"#bifurcating numerical as well as categorical columns\nNum_columns = [column for column in data.columns if data[column].dtype != 'object']\nCat_columns = [column for column in data.columns if data[column].dtype == 'object']","51bce1ec":"Num_columns","d7e939f0":"Cat_columns","693dc47e":"#Replacing some of the Categorical variables with the mode\ndata['color'].fillna(data['color'].mode()[0], inplace=True)\ndata['country'].fillna(data['country'].mode()[0], inplace=True)\ndata['language'].fillna(data['language'].mode()[0], inplace=True)","346f8e4a":"data['content_rating'].value_counts()","32726fc9":"#Filling not rated value in null values \ndata['content_rating'].fillna('Not Rated', inplace = True)","e28c5f43":"#Replacing some of the Numerical variables with the median(not using mean because there may be some outliers)\ndata['num_critic_for_reviews'].fillna(data['num_critic_for_reviews'].median(), inplace=True)\ndata['duration'].fillna(data['duration'].median(), inplace=True)\ndata['director_facebook_likes'].fillna(data['director_facebook_likes'].median(), inplace=True)\ndata['actor_3_facebook_likes'].fillna(data['actor_3_facebook_likes'].median(), inplace=True)\ndata['actor_1_facebook_likes'].fillna(data['actor_1_facebook_likes'].median(), inplace=True)\ndata['actor_2_facebook_likes'].fillna(data['actor_2_facebook_likes'].median(), inplace=True)\ndata['gross'].fillna(data['gross'].median(), inplace=True)\ndata['facenumber_in_poster'].fillna(data['facenumber_in_poster'].median(), inplace=True)\ndata['num_user_for_reviews'].fillna(data['num_user_for_reviews'].median(), inplace=True)\ndata['budget'].fillna(data['budget'].median(), inplace=True)\ndata['title_year'].fillna(data['title_year'].mode()[0], inplace=True)\ndata['aspect_ratio'].fillna(data['aspect_ratio'].mode()[0], inplace=True)","719d3e54":"#Checking number of unique values \ndata['plot_keywords'].nunique(), data['director_name'].nunique(), data['actor_2_name'].nunique(),data['actor_1_name'].nunique(),data['actor_3_name'].nunique()","0ec4fac5":"#Dropping Null values for these column because they havemany unique values so can't replace them with mode or median\ndata = data.dropna(axis = 0, subset = ['plot_keywords','director_name','actor_2_name','actor_1_name','actor_3_name'])","6ed553b1":"#Dropping duplicate rows \ndata.drop_duplicates(inplace = True)\ndata.shape","1e74a482":"data.isnull().sum()","2fe09598":"plt.figure(figsize=(16, 8))\nsns.distplot(data['imdb_score'], color='g', bins=100)","a3c6e5e0":"data.hist(bins=30,figsize=(16,16),color='Orange',xlabelsize=8, ylabelsize=8)","cc47798f":"plt.figure(figsize=(16, 6))\nplot = sns.countplot(x='color', data=data)","38739b23":"plt.figure(figsize=(16, 6))\nplot = sns.countplot(x='country', data=data)\nplt.xticks(rotation = 90)","459aa2b1":"plt.figure(figsize=(16, 6))\nplot = sns.countplot(x='language', data=data)\nplt.xticks(rotation = 90)","df095964":"plt.figure(figsize=(16, 6))\nplot = sns.countplot(x='content_rating', data=data)\nplt.xticks(rotation = 90)","507849bf":"plt.figure(figsize = (16, 6))\nax = sns.boxplot(x='color', y='imdb_score', data=data)\nplt.setp(ax.artists, alpha=.5, linewidth=2, edgecolor=\"k\")\nplt.xticks(rotation=45)","7b7ba179":"plt.figure(figsize = (16, 6))\nax = sns.boxplot(x='content_rating', y='imdb_score', data=data)\nplt.setp(ax.artists, alpha=.5, linewidth=2, edgecolor=\"k\")\nplt.xticks(rotation=45)","99f611cf":"plt.figure(figsize = (16, 6))\nax = sns.boxplot(x='country', y='imdb_score', data=data)\nplt.setp(ax.artists, alpha=.5, linewidth=2, edgecolor=\"k\")\nplt.xticks(rotation=90)","981b37e9":"plt.figure(figsize = (16, 6))\nax = sns.boxplot(x='language', y='imdb_score', data=data)\nplt.setp(ax.artists, alpha=.5, linewidth=2, edgecolor=\"k\")\nplt.xticks(rotation=90)","5b6432c5":"fig, ax = plt.subplots(round(len(Num_columns) \/ 3), 3, figsize = (18, 20))\n\nfor i, ax in enumerate(fig.axes):\n    if i < len(Num_columns) - 1:\n        sns.regplot(x=Num_columns[i],y='imdb_score', data=data[Num_columns], ax=ax, label = Num_columns)","1b2b4c35":"for i in range(0, len(Num_columns), 5):\n    sns.pairplot(data=data[Num_columns],\n                x_vars=Num_columns[i:i+5],\n                y_vars=['imdb_score'])","06544216":"#Replacing some special characters with comma\ndata['plot_keywords'] = data['plot_keywords'].str.replace('|',',')\ndata['genres'] = data['genres'].str.replace('|',',')\ndata['movie_title'] = data['movie_title'].str.replace('\u00c2',' ')","2b4bfb62":"#New column(Profit) to calculate the net profit made by the movie (Gross-Budget) \ndata['Profit']=data['budget'] - data['gross']","0ac4ebf7":"#New column(Profit%) to calculate the net profit made by the movie (Gross-Budget) \ndata['Profit%']=(data['Profit']\/data['gross'])*100","e34707f5":"data['country'].value_counts()","1f1ad32b":"#Replacing other than USK & UK with others\ncountries = ['USA','UK']\ndata['country'] = data['country'].where(data['country'].isin(countries), 'other')\ndata['country'].value_counts()","08569c3d":"data['language'].value_counts()","96e41a3e":"#Replacing all the language other than english with others\nmost_occurred_language = ['English']\ndata['language'] = data['language'].where(data['language'].isin(most_occurred_language), 'other')\ndata['language'].value_counts()","f370aef0":"#Correlation_Matrix- Finding Correlation between variables\ncorrelation = data.corr()\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(correlation, annot=True, cmap=\"YlGnBu\", linewidths=.5,fmt='.2f')","3fef1c99":"#Dropping highly correlated columns\ndata.drop('cast_total_facebook_likes',axis=1,inplace=True)","0c4fcbb7":"data.shape","cd858846":"#Converting the column labels into numeric form\nlabelencoding = LabelEncoder()\ncategories=['color', 'director_name', 'actor_2_name',\n        'genres', 'actor_1_name',\n        'actor_3_name',\n        'plot_keywords',\n        'language', 'country', 'content_rating',\n       'title_year', 'aspect_ratio','movie_title','movie_imdb_link']\ndata[categories]=data[categories].apply(lambda x:labelencoding.fit_transform(x))","f88f446d":"#Scales all the data features in the range [0, 1]\ny = data['imdb_score']\nX = data.drop(['imdb_score'], axis = 1)\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)","91e1459c":"#Splitting the data-set into train and test data-set\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 42)","5765432f":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","9ba33e3d":"#Training the model\nn_trees=300\ngbregressor = GradientBoostingRegressor(loss='ls',learning_rate=0.02,n_estimators=n_trees,max_depth=3)\ngbregressor.fit(X_train,y_train)","bc1833a0":"#Predicting the output on test data-set\ny_pred=gbregressor.predict(X_test)","ab412b6c":"#Calculating the error on the basis of actual & predicted output\nprint('The mean squared error using Gradient boosting regressor  is: ',mean_squared_error(y_test,y_pred))","30b955e5":"#Constructing a new dataframe with column names and feature importance\nfeatureimp = pd.DataFrame()\ndatanew = data.drop(['imdb_score'], axis = 1)\nfeatureimp['columns'] = datanew.columns\n\nfeatureimp['Feature_importance'] = gbregressor.feature_importances_\n#Sorting with feature importance column\nfeatureimp = featureimp.sort_values(by='Feature_importance', ascending=True)\n\n#Barplot indicating Feature Importance\nplt.figure(figsize=(16, 16))\nplt.barh(y=featureimp['columns'], width=featureimp['Feature_importance'], color='blue')\nplt.title('Feature Importance', fontsize=20, fontweight='bold', pad=20)\nplt.xlabel('Importance', fontsize=14, labelpad=20)\nplt.show()","22658375":"#Using Cross-validation for Hyperparameter tuning\nparam_grid = {\n    'loss' : ['ls'],\n    'max_depth' : [3,4,5],\n    'learning_rate' : [0.05, 0.01,0.001],\n    'n_estimators': [300,500,1000],\n    'min_samples_split' : [1,2],\n    'min_samples_leaf' : [0.5,1],\n    'max_features' : [15,20,25]}\ngbregressor = GradientBoostingRegressor()\ngb_gridsearch = GridSearchCV(estimator = gbregressor, param_grid = param_grid, \n                          cv = 5, n_jobs = -1, verbose = 2)","46ec25a4":"#Training the model with best hyperparameter and printing the best hyperparameters used\ngb_gridsearch.fit(X_train, y_train)\ngb_gridsearch.best_params_","92451e2f":"#Predicting the output after the cross-validation with best hyperparameter & calcualting the error\ny_pred_gridsearch = gb_gridsearch.predict(X_test)","365a3445":"#Output\ny_pred_gridsearch","7fca98c9":"print('The mean squared error using Gradient boosting regressor after hyparameter tuning is: ',mean_squared_error(y_test,y_pred_gridsearch))","45e7f29d":"## Model Building ","e68a6752":"## Data Visualization ","c3b4d69c":"Converting categorical features into numerical features by using label encoder ","3f4dc0d7":"We lost around 305 rows from the data which is around 6% of whole data. ","ffc0929c":"from the above output we can observed most of the movies have english as a language(around 94%)","faa7b7f5":"from the above output we can observed most of the movies are produced in USA & UK (around 85%)","a33dbd5a":"The dataset (movie-review-data.csv) contains 28 variables for 5043 movies, spanning across 100 years in 66 countries. There are 2399 unique director names, and thousands of actors\/actresses. \u201cimdb_score\u201d is the response variable while the other 27 variables are possible predictors.","a550829d":"From above heatmap it was observed that actor_1_facebook_likes and cast_total_facebook_likes are highly correlated to each other.","5ee98fce":"## Importing Libraries","bcfe7917":"## Data Pre-Processing ","400a1080":"Build Model to predict what kind of movies are more successful.Take imdb scores as response variable and focus on operating predictions by analyzing the rest of variables in the movie data.","a36c7327":"A commercial success movie not only entertains audience, but also enables film companies to gain tremendous profit. A lot of factors such as good directors, experienced actors are considerable for creating good movies. However, famous directors and actors can always bring an expected box-office income but cannot guarantee a highly rated imdb score.","a03aff7b":"## Problem Statement","d1d571a9":"## Introduction","61697e2b":"With this information we can see that the imdb scores are left skewed","7ab8d6ff":"## Data loading  ","d2961f4b":"## Data Description ","9833519b":"## Data Cleaning"}}