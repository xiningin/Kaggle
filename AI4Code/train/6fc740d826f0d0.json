{"cell_type":{"031c0c27":"code","07e37ca7":"code","a2b176d4":"code","f7591ae9":"code","02cd332d":"code","7d37a453":"code","239534de":"code","997b04f6":"code","8a62f089":"code","625a4e17":"code","42e6dd2b":"code","72b957ca":"code","035b2b48":"code","4fcefa40":"code","4607ec27":"code","14891f67":"code","b11e44e9":"code","96119377":"code","a5f25856":"code","fdbdecf4":"code","a432ada9":"code","cd4edb21":"code","d4cb2b53":"code","a50f71d5":"code","e8f65fec":"code","2a4e0a3f":"code","93a0f103":"code","f4c4db87":"code","9ae6db5c":"code","b27f6b9f":"code","488f5786":"code","5d5ccf08":"markdown","1dcb5d34":"markdown","78ff55e3":"markdown","a3678fc3":"markdown","29f41f84":"markdown","031a30c8":"markdown","8e58ec5d":"markdown","4163fdfd":"markdown","7e946db6":"markdown","548f9451":"markdown"},"source":{"031c0c27":"# for manipulations\nimport numpy as np\nimport pandas as pd\n\n# for data visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# for interactivity\nimport ipywidgets\nfrom ipywidgets import interact\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","07e37ca7":"# lets read the dataset\ndata = pd.read_csv(\"\/kaggle\/input\/crop-recommendation-dataset\/Crop_recommendation.csv\")\n\n# lets check teh shape of the dataset\nprint(\"Shape of the Dataset :\", data.shape)","a2b176d4":"# lets check the head of the dataset\ndata.head()","f7591ae9":"# lets check if there is any missing value present in the dataset\ndata.isnull().sum()","02cd332d":"# lets check the Crops present in this Dataset\ndata['label'].value_counts()","7d37a453":"# lets check the Summary for all the crops\n\nprint(\"Average Ratio of Nitrogen in the Soil : {0:.2f}\".format(data['N'].mean()))\nprint(\"Average Ratio of Phosphorous in the Soil : {0:.2f}\".format(data['P'].mean()))\nprint(\"Average Ratio of Potassium in the Soil : {0:.2f}\".format(data['K'].mean()))\nprint(\"Average Tempature in Celsius : {0:.2f}\".format(data['temperature'].mean()))\nprint(\"Average Relative Humidity in % : {0:.2f}\".format(data['humidity'].mean()))\nprint(\"Average PH Value of the soil : {0:.2f}\".format(data['ph'].mean()))\nprint(\"Average Rainfall in mm : {0:.2f}\".format(data['rainfall'].mean()))","239534de":"# lets check the Summary Statistics for each of the Crops\n\n@interact\ndef summary(crops = list(data['label'].value_counts().index)):\n    x = data[data['label'] == crops]\n    print(\"---------------------------------------------\")\n    print(\"Statistics for Nitrogen\")\n    print(\"Minimum Nitrigen required :\", x['N'].min())\n    print(\"Average Nitrogen required :\", x['N'].mean())\n    print(\"Maximum Nitrogen required :\", x['N'].max()) \n    print(\"---------------------------------------------\")\n    print(\"Statistics for Phosphorous\")\n    print(\"Minimum Phosphorous required :\", x['P'].min())\n    print(\"Average Phosphorous required :\", x['P'].mean())\n    print(\"Maximum Phosphorous required :\", x['P'].max()) \n    print(\"---------------------------------------------\")\n    print(\"Statistics for Potassium\")\n    print(\"Minimum Potassium required :\", x['K'].min())\n    print(\"Average Potassium required :\", x['K'].mean())\n    print(\"Maximum Potassium required :\", x['K'].max()) \n    print(\"---------------------------------------------\")\n    print(\"Statistics for Temperature\")\n    print(\"Minimum Temperature required : {0:.2f}\".format(x['temperature'].min()))\n    print(\"Average Temperature required : {0:.2f}\".format(x['temperature'].mean()))\n    print(\"Maximum Temperature required : {0:.2f}\".format(x['temperature'].max()))\n    print(\"---------------------------------------------\")\n    print(\"Statistics for Humidity\")\n    print(\"Minimum Humidity required : {0:.2f}\".format(x['humidity'].min()))\n    print(\"Average Humidity required : {0:.2f}\".format(x['humidity'].mean()))\n    print(\"Maximum Humidity required : {0:.2f}\".format(x['humidity'].max()))\n    print(\"---------------------------------------------\")\n    print(\"Statistics for PH\")\n    print(\"Minimum PH required : {0:.2f}\".format(x['ph'].min()))\n    print(\"Average PH required : {0:.2f}\".format(x['ph'].mean()))\n    print(\"Maximum PH required : {0:.2f}\".format(x['ph'].max()))\n    print(\"---------------------------------------------\")\n    print(\"Statistics for Rainfall\")\n    print(\"Minimum Rainfall required : {0:.2f}\".format(x['rainfall'].min()))\n    print(\"Average Rainfall required : {0:.2f}\".format(x['rainfall'].mean()))\n    print(\"Maximum Rainfall required : {0:.2f}\".format(x['rainfall'].max()))","997b04f6":"## Lets compare the Average Requirement for each crops with average conditions\n\n@interact\ndef compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):\n    print(\"Average Value for\", conditions,\"is {0:.2f}\".format(data[conditions].mean()))\n    print(\"----------------------------------------------\")\n    print(\"Rice : {0:.2f}\".format(data[(data['label'] == 'rice')][conditions].mean()))\n    print(\"Black Grams : {0:.2f}\".format(data[data['label'] == 'blackgram'][conditions].mean()))\n    print(\"Banana : {0:.2f}\".format(data[(data['label'] == 'banana')][conditions].mean()))\n    print(\"Jute : {0:.2f}\".format(data[data['label'] == 'jute'][conditions].mean()))\n    print(\"Coconut : {0:.2f}\".format(data[(data['label'] == 'coconut')][conditions].mean()))\n    print(\"Apple : {0:.2f}\".format(data[data['label'] == 'apple'][conditions].mean()))\n    print(\"Papaya : {0:.2f}\".format(data[(data['label'] == 'papaya')][conditions].mean()))\n    print(\"Muskmelon : {0:.2f}\".format(data[data['label'] == 'muskmelon'][conditions].mean()))\n    print(\"Grapes : {0:.2f}\".format(data[(data['label'] == 'grapes')][conditions].mean()))\n    print(\"Watermelon : {0:.2f}\".format(data[data['label'] == 'watermelon'][conditions].mean()))\n    print(\"Kidney Beans: {0:.2f}\".format(data[(data['label'] == 'kidneybeans')][conditions].mean()))\n    print(\"Mung Beans : {0:.2f}\".format(data[data['label'] == 'mungbean'][conditions].mean()))\n    print(\"Oranges : {0:.2f}\".format(data[(data['label'] == 'orange')][conditions].mean()))\n    print(\"Chick Peas : {0:.2f}\".format(data[data['label'] == 'chickpea'][conditions].mean()))\n    print(\"Lentils : {0:.2f}\".format(data[(data['label'] == 'lentil')][conditions].mean()))\n    print(\"Cotton : {0:.2f}\".format(data[data['label'] == 'cotton'][conditions].mean()))\n    print(\"Maize : {0:.2f}\".format(data[(data['label'] == 'maize')][conditions].mean()))\n    print(\"Moth Beans : {0:.2f}\".format(data[data['label'] == 'mothbeans'][conditions].mean()))\n    print(\"Pigeon Peas : {0:.2f}\".format(data[(data['label'] == 'pigeonpeas')][conditions].mean()))\n    print(\"Mango : {0:.2f}\".format(data[data['label'] == 'mango'][conditions].mean()))\n    print(\"Pomegranate : {0:.2f}\".format(data[(data['label'] == 'pomegranate')][conditions].mean()))\n    print(\"Coffee : {0:.2f}\".format(data[data['label'] == 'coffee'][conditions].mean()))","8a62f089":"# lets make this funtion more Intuitive\n\n@interact\ndef compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):\n    print(\"Crops which require greater than average\", conditions,'\\n')\n    print(data[data[conditions] > data[conditions].mean()]['label'].unique())\n    print(\"----------------------------------------------\")\n    print(\"Crops which require less than average\", conditions,'\\n')\n    print(data[data[conditions] <= data[conditions].mean()]['label'].unique())","625a4e17":"### Lets check the distribution of Agricultural Conditions\n\nplt.rcParams['figure.figsize'] = (15, 7)\n\nplt.subplot(2, 4, 1)\nsns.distplot(data['N'], color = 'lightgrey')\nplt.xlabel('Ratio of Nitrogen', fontsize = 12)\nplt.grid()\n\nplt.subplot(2, 4, 2)\nsns.distplot(data['P'], color = 'skyblue')\nplt.xlabel('Ratio of Phosphorous', fontsize = 12)\nplt.grid()\n\nplt.subplot(2, 4, 3)\nsns.distplot(data['K'], color ='darkblue')\nplt.xlabel('Ratio of Potassium', fontsize = 12)\nplt.grid()\n\nplt.subplot(2, 4, 4)\nsns.distplot(data['temperature'], color = 'black')\nplt.xlabel('Temperature', fontsize = 12)\nplt.grid()\n\nplt.subplot(2, 4, 5)\nsns.distplot(data['rainfall'], color = 'grey')\nplt.xlabel('Rainfall', fontsize = 12)\nplt.grid()\n\nplt.subplot(2, 4, 6)\nsns.distplot(data['humidity'], color = 'lightgreen')\nplt.xlabel('Humidity', fontsize = 12)\nplt.grid()\n\nplt.subplot(2, 4, 7)\nsns.distplot(data['ph'], color = 'darkgreen')\nplt.xlabel('pH Level', fontsize = 12)\nplt.grid()\n\nplt.suptitle('Distribution for Agricultural Conditions', fontsize = 20)\nplt.show()\n","42e6dd2b":"## Lets find out some Interesting Facts\n\nprint(\"Some Interesting Patterns\")\nprint(\"---------------------------------\")\nprint(\"Crops which requires very High Ratio of Nitrogen Content in Soil:\", data[data['N'] > 120]['label'].unique())\nprint(\"Crops which requires very High Ratio of Phosphorous Content in Soil:\", data[data['P'] > 100]['label'].unique())\nprint(\"Crops which requires very High Ratio of Potassium Content in Soil:\", data[data['K'] > 200]['label'].unique())\nprint(\"Crops which requires very High Rainfall:\", data[data['rainfall'] > 200]['label'].unique())\nprint(\"Crops which requires very Low Temperature :\", data[data['temperature'] < 10]['label'].unique())\nprint(\"Crops which requires very High Temperature :\", data[data['temperature'] > 40]['label'].unique())\nprint(\"Crops which requires very Low Humidity:\", data[data['humidity'] < 20]['label'].unique())\nprint(\"Crops which requires very Low pH:\", data[data['ph'] < 4]['label'].unique())\nprint(\"Crops which requires very High pH:\", data[data['ph'] > 9]['label'].unique())","72b957ca":"### Lets understand which crops can only be Grown in Summer Season, Winter Season and Rainy Season\n\nprint(\"Summer Crops\")\nprint(data[(data['temperature'] > 30) & (data['humidity'] > 50)]['label'].unique())\nprint(\"-----------------------------------\")\nprint(\"Winter Crops\")\nprint(data[(data['temperature'] < 20) & (data['humidity'] > 30)]['label'].unique())\nprint(\"-----------------------------------\")\nprint(\"Rainy Crops\")\nprint(data[(data['rainfall'] > 200) & (data['humidity'] > 30)]['label'].unique())","035b2b48":"### Lets try to Cluster these Crops\n\n# lets import the warnings library so that we can avoid warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Lets select the Spending score, and Annual Income Columns from the Data\nx = data.loc[:, ['N','P','K','temperature','ph','humidity','rainfall']].values\n\n# let's check the shape of x\nprint(x.shape)\n\n# lets convert this data into a dataframe\nx_data  = pd.DataFrame(x)\nx_data.head()","4fcefa40":"# lets determine the Optimum Number of Clusters within the Dataset\n\nfrom sklearn.cluster import KMeans\nplt.rcParams['figure.figsize'] = (10, 4)\n\nwcss = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    km.fit(x)\n    wcss.append(km.inertia_)\n\n# lets plot the results\nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method', fontsize = 20)\nplt.xlabel('No. of Clusters')\nplt.ylabel('wcss')\nplt.show()","4607ec27":"# lets implement the K Means algorithm to perform Clustering analysis\nkm = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_means = km.fit_predict(x)\n\n# lets find out the Results\na = data['label']\ny_means = pd.DataFrame(y_means)\nz = pd.concat([y_means, a], axis = 1)\nz = z.rename(columns = {0: 'cluster'})\n\n# lets check the Clusters of each Crops\nprint(\"Lets check the Results After Applying the K Means Clustering Analysis \\n\")\nprint(\"Crops in First Cluster:\", z[z['cluster'] == 0]['label'].unique())\nprint(\"---------------------------------------------------------------\")\nprint(\"Crops in Second Cluster:\", z[z['cluster'] == 1]['label'].unique())\nprint(\"---------------------------------------------------------------\")\nprint(\"Crops in Third Cluster:\", z[z['cluster'] == 2]['label'].unique())\nprint(\"---------------------------------------------------------------\")\nprint(\"Crops in Fourth Cluster:\", z[z['cluster'] == 3]['label'].unique())","14891f67":"#\nimport scipy.cluster.hierarchy as shc  \ndendro = shc.dendrogram(shc.linkage(x, method=\"ward\"))  \nplt.title(\"Dendrogrma Plot\")  \nplt.show() ","b11e44e9":"#training the hierarchical model on dataset  \nfrom sklearn.cluster import AgglomerativeClustering  \nhc= AgglomerativeClustering(n_clusters=4, affinity='euclidean', linkage='ward')  \ny_her= hc.fit_predict(x)  \n\n# lets find out the Results\nb = data['label']\ny_herr = pd.DataFrame(y_her)\nw = pd.concat([y_herr, b], axis = 1)\nw= w.rename(columns = {0: 'cluster'})\n\n# lets check the Clusters of each Crops\nprint(\"Hierachical Clustering Analysis \\n\")\nprint(\"Crops in Zero Cluster:\", w[w['cluster'] == 0]['label'].unique())\nprint(\"---------------------------------------------------------------\")\nprint(\"Crops in First Cluster:\", w[w['cluster'] == 1]['label'].unique())\nprint(\"---------------------------------------------------------------\")\nprint(\"Crops in Second Cluster:\", w[w['cluster'] == 2]['label'].unique())\nprint(\"---------------------------------------------------------------\")\nprint(\"Crops in Third Cluster:\", w[w['cluster'] == 3]['label'].unique())\n","96119377":"#visulaizing the clusters  \nplt.scatter(x[y_her == 0, 0], x[y_her == 0, 1], s = 100, c = 'blue', label = 'Cluster 1')  \nplt.scatter(x[y_her == 1, 0], x[y_her == 1, 1], s = 100, c = 'green', label = 'Cluster 2')  \nplt.scatter(x[y_her== 2, 0], x[y_her == 2, 1], s = 100, c = 'red', label = 'Cluster 3')  \nplt.scatter(x[y_her == 3, 0], x[y_her == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')  \nplt.title('Clusters of crops')  \nplt.legend()  \nplt.show()","a5f25856":"# Hard Clustering\n\nprint(\"Results for Hard Clustering\\n\")\ncounts = z[z['cluster'] == 0]['label'].value_counts()\nd = z.loc[z['label'].isin(counts.index[counts >= 50])]\nd = d['label'].value_counts()\nprint(\"Crops in Cluster 1:\", list(d.index))\nprint(\"--------------------------------------------------\")\ncounts = z[z['cluster'] == 1]['label'].value_counts()\nd = z.loc[z['label'].isin(counts.index[counts >= 50])]\nd = d['label'].value_counts()\nprint(\"Crops in Cluster 2:\", list(d.index))\nprint(\"--------------------------------------------------\")\ncounts = z[z['cluster'] == 2]['label'].value_counts()\nd = z.loc[z['label'].isin(counts.index[counts >= 50])]\nd = d['label'].value_counts()\nprint(\"Crops in Cluster 3:\", list(d.index))\nprint(\"--------------------------------------------------\")\ncounts = z[z['cluster'] == 3]['label'].value_counts()\nd = z.loc[z['label'].isin(counts.index[counts >= 50])]\nd = d['label'].value_counts()\nprint(\"Crops in Cluster 4:\", list(d.index))","fdbdecf4":"### Data Visualizations\n\nplt.rcParams['figure.figsize'] = (15, 8)\n\nplt.subplot(2, 4, 1)\nsns.barplot(data['N'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('Ratio of Nitrogen', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.subplot(2, 4, 2)\nsns.barplot(data['P'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('Ratio of Phosphorous', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.subplot(2, 4, 3)\nsns.barplot(data['K'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('Ratio of Potassium', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.subplot(2, 4, 4)\nsns.barplot(data['temperature'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('Temperature', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.subplot(2, 4, 5)\nsns.barplot(data['humidity'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('Humidity', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.subplot(2, 4, 6)\nsns.barplot(data['ph'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('pH of Soil', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.subplot(2, 4, 7)\nsns.barplot(data['rainfall'], data['label'])\nplt.ylabel(' ')\nplt.xlabel('Rainfall', fontsize = 10)\nplt.yticks(fontsize = 10)\n\nplt.suptitle('Visualizing the Impact of Different Conditions on Crops', fontsize = 15)\nplt.show()","a432ada9":"# lets split the Dataset for Predictive Modelling\n\ny = data['label']\nx = data.drop(['label'], axis = 1)\n\nprint(\"Shape of x:\", x.shape)\nprint(\"Shape of y:\", y.shape)","cd4edb21":"# lets create Training and Testing Sets for Validation of Results\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n\nprint(\"The Shape of x train:\", x_train.shape)\nprint(\"The Shape of x test:\", x_test.shape)\nprint(\"The Shape of y train:\", y_train.shape)\nprint(\"The Shape of y test:\", y_test.shape)","d4cb2b53":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score\nfrom mlxtend.plotting import plot_confusion_matrix\n\ndef evaluator(y_test, y_pred):    \n    \n    # Accuracy:\n    print('Accuracy is: ', accuracy_score(y_test,y_pred))\n    print('')\n    # Classification Report:\n    print('Classification Report: \\n',classification_report(y_test,y_pred))\n\n    print('Confusion Matrix: \\n\\n')\n    plt.style.use(\"ggplot\")\n    cm = confusion_matrix(y_test,y_pred)\n    plot_confusion_matrix(conf_mat = cm,figsize=(10,10),show_normed=True)\n    plt.title('Confusion Matrix for Logistic Regression', fontsize = 15)\n    plt.show()","a50f71d5":"# lets create a Predictive Models\n\n\n\nmodel_accuracy = pd.DataFrame(columns=['Model','Accuracy'])\nmodels = {\n          \"KNN\" : KNeighborsClassifier(),\n          \"DT\" : DecisionTreeClassifier(),\n          'RFC' : RandomForestClassifier(),\n          'GBC' : GradientBoostingClassifier(),\n          'XGB' : XGBClassifier()\n          }\n\nfor test, clf in models.items():\n    clf.fit(x_train, y_train)\n    y_pred = clf.predict(x_test)\n    acc = accuracy_score(y_test,y_pred)\n    train_pred = clf.predict(x_train)\n    train_acc = accuracy_score(y_train, train_pred)\n    print(\"\\n\", test + ' scores')\n    print(acc)\n    print(classification_report(y_test,y_pred))\n    print(confusion_matrix(y_test,y_pred))\n    print('*' * 100,\"\\n\")\n    model_accuracy = model_accuracy.append({'Model': test, 'Accuracy': acc, 'Train_acc': train_acc}, ignore_index=True)","e8f65fec":"model_accuracy.sort_values(ascending=False, by = 'Accuracy')","2a4e0a3f":"from sklearn.neighbors import KNeighborsClassifier\n\nkn_classifier = KNeighborsClassifier()\n\nkn_classifier.fit(x_train,y_train)","93a0f103":"pred_kn = kn_classifier.predict(x_test)\n\nevaluator(y_test, pred_kn)","f4c4db87":"# lets chech the Head of the Dataset\ndata.head()","9ae6db5c":"prediction = kn_classifier.predict((np.array([[90,\n                                       40,\n                                       40,\n                                       20,\n                                       80,\n                                       7,\n                                       200]])))\nprint(\"The Suggested Crop for Given Climatic Condition is :\", prediction)","b27f6b9f":"# lets check the Model for Oranges also\ndata[data['label'] == 'orange'].head()","488f5786":"# lets do some Real time Predictions\nprediction = kn_classifier.predict((np.array([[20,\n                                       30,\n                                       10,\n                                       15,\n                                       90,\n                                       7.5,\n                                       100]])))\nprint(\"The Suggested Crop for Given Climatic Condition is :\", prediction)","5d5ccf08":"### Importing the Libraries","1dcb5d34":"## Description for each of the columns in the Dataset\n\nN - ratio of Nitrogen content in soil\nP - ratio of Phosphorous content in soil\nK - ration of Potassium content in soil\ntemperature - temperature in degree Celsius\nhumidity - relative humidity in %\nph - ph value of the soil\nrainfall - rainfall in mm","78ff55e3":"KNN does not overfit the training data","a3678fc3":"### Real time Predictions","29f41f84":"### Reading the Dataset","031a30c8":"### visualizing the Hidden Patterns","8e58ec5d":"### Clustering Similar Crops","4163fdfd":"### Analyzing Agricultural Conditions","7e946db6":"### Descriptive Statistics","548f9451":"### Predictive Modelling"}}