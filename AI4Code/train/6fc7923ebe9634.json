{"cell_type":{"e9a95dd5":"code","f8617469":"code","b3ca0631":"code","b5ef70f9":"code","22c1d653":"code","8116b397":"markdown"},"source":{"e9a95dd5":"##Importing Modules\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf","f8617469":"##Importing Images\nimagegenerator=tf.keras.preprocessing.image.ImageDataGenerator(\n                         rescale=1.\/255,\n                         validation_split=0.2)\ntrain_dir = '..\/input\/vegetable-image-dataset\/Vegetable Images\/train'\nvali_dir = '..\/input\/vegetable-image-dataset\/Vegetable Images\/validation'\ntest_dir = '..\/input\/vegetable-image-dataset\/Vegetable Images\/test'","b3ca0631":"##Training,Validation and Test Data\nimg_generator_flow_train=imagegenerator.flow_from_directory(\n                                        directory=train_dir,\n                                         target_size=(224,224),\n                                          batch_size=16,\n                                          shuffle=True,\n                                          subset='training')\nimg_generator_flow_vali=imagegenerator.flow_from_directory(\n                                       directory=vali_dir,\n                                       target_size=(224,224),\n                                       batch_size=16,\n                                       shuffle=True,\n                                        subset='validation')\nimg_generator_flow_test=imagegenerator.flow_from_directory(\n                                       directory=test_dir,\n                                       target_size=(224,224),\n                                       batch_size=16,\n                                       shuffle=True)","b5ef70f9":"##Creating The Model\nmodel=tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(224, 224, 3)))\nmodel.add(tf.keras.layers.MaxPooling2D((2,2)))\nmodel.add(tf.keras.layers.Conv2D(64,(3,3),activation='relu'))\nmodel.add(tf.keras.layers.MaxPooling2D((2,2)))\nmodel.add(tf.keras.layers.Conv2D(64,(2,2)))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128,activation='relu'))\nmodel.add(tf.keras.layers.Dense(15,activation='softmax'))          \nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nearly_stopping = tf.keras.callbacks.EarlyStopping(patience = 2)\nmax_epochs=5\nearlystopping=tf.keras.callbacks.EarlyStopping(patience=2)\nmodel.fit(img_generator_flow_train, epochs=max_epochs,callbacks=[earlystopping],validation_data=img_generator_flow_vali, verbose =1)\n\n","22c1d653":"model.evaluate(img_generator_flow_test)","8116b397":"Testing The Model"}}