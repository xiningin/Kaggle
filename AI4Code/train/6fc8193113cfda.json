{"cell_type":{"88df2c72":"code","16e8b2c8":"code","874a406b":"code","acb406c8":"code","b00c252d":"code","0361a7d1":"code","680adc0a":"code","991afc89":"code","ba299a7f":"code","c57e18ea":"code","811377ad":"code","f8293ccc":"code","88627e0b":"code","4053e7d0":"code","906dd5d8":"code","f45ecdde":"code","441b5bbd":"code","f654f118":"code","59481646":"code","09a5a096":"code","99d8962a":"code","32ed05c3":"code","0f431f2f":"code","72faca86":"code","25b87e0b":"code","2aee458a":"code","395ddaf0":"code","d91cf3cb":"code","78c2f4dd":"code","08433296":"code","e542d111":"code","04e6fe4f":"code","ab22c48e":"code","fd33b497":"code","a4c891d5":"code","31b38fbb":"code","e08127f8":"code","cff10845":"code","27525ed2":"code","3442e5d6":"code","fb6064c5":"code","85e9e91b":"code","2d837165":"code","448d9b50":"code","eba8b9d4":"code","caf6354f":"code","7c8e0e7a":"code","9106606d":"code","809dc346":"code","af673474":"code","6d858b52":"code","d2a317a3":"code","f8d857e3":"code","1122b2d8":"code","48e989dd":"code","0b851b3f":"code","6362d7d5":"code","f9dadcda":"code","d3415105":"code","52b80b5f":"code","0d091f1f":"code","0db5a804":"code","d73305fb":"code","a59bf1ec":"code","8030bb41":"code","5ad95b0b":"code","400c9bf8":"code","5335d031":"code","5ee1a57a":"code","227fbbc3":"code","369e58d4":"code","6ef63b0f":"code","d043227a":"code","913e7336":"code","22ccc2c3":"code","0dafec15":"code","693d1cf2":"code","f7039bfc":"code","edcd8d79":"code","4ecb6af6":"code","616bc53f":"code","1cd77f79":"code","77ff5f77":"code","768646bd":"code","2c8ac8f5":"code","22081407":"code","7640878b":"code","14027dd1":"code","0358d297":"code","98eb81c3":"markdown","e82f8844":"markdown","c643550c":"markdown","1b60f2e5":"markdown","52733cb6":"markdown"},"source":{"88df2c72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","16e8b2c8":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport pylab\nimport missingno as msn\nimport folium\nfrom folium import plugins\nimport branca.colormap as cm\nfrom scipy.stats import pearsonr\nfrom sklearn.model_selection import train_test_split,cross_val_score,cross_val_predict\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale \nfrom sklearn import model_selection\nfrom sklearn.cross_decomposition import PLSRegression, PLSSVD\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPRegressor\nimport statsmodels.api as sm\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score\nfrom lightgbm import LGBMRegressor\nfrom sklearn.experimental import enable_hist_gradient_boosting \nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor","874a406b":"data=pd.read_csv(\"\/kaggle\/input\/housesalesprediction\/kc_house_data.csv\")\ndf=data.copy()\ndf.head()","acb406c8":"print(\"Row : {}  \\nColumn: {}\".format(df.shape[0],df.shape[1]))","b00c252d":"df.columns.values","0361a7d1":"df.info()","680adc0a":"df['date'] = df.date.apply(pd.to_datetime)","991afc89":"df.date.head().to_frame()","ba299a7f":"df.date.min(),df.date.max()","c57e18ea":"df[\"date_year\"]=df.date.dt.year\ndf[\"date_month\"]=df.date.dt.month\n#df[\"day_of_week\"]=df.date.dt.dayofweek\n#df[\"is_weekend\"]=df.day_of_week.apply(lambda x:1 if x>4 else 0)","811377ad":"df=df.drop(\"date\",axis=1)","f8293ccc":"df.head()","88627e0b":"df[df.duplicated(subset=['id',\"price\"],keep=False)].sort_values(by=\"id\")","4053e7d0":"df[(df.price==0) & (df.price<0)]","906dd5d8":"df.eq(0).sum().to_frame()","f45ecdde":"plt.figure(figsize=(22,6))\n\nplt.subplot(141)\nsns.distplot(df.price);\n\nplt.subplot(142)\nstats.probplot(df.price, dist=\"norm\", plot=pylab) ;\n\nplt.subplot(143)\nsns.distplot(np.log(df.price),color=\"magenta\");\n\nplt.subplot(144)\nstats.probplot(np.log(df.price), dist=\"norm\", plot=pylab) ;","441b5bbd":"df=df.drop(\"id\",axis=1)\ndf.head()","f654f118":"m = folium.Map([47 ,-122], zoom_start=5,width=\"%100\",height=\"%100\")\nlocations = list(zip(df.lat, df.long))\ncluster = plugins.MarkerCluster(locations=locations,popups=df[\"price\"].tolist())\nm.add_child(cluster)\nm","59481646":"m = folium.Map(location=[47,-122],width=\"%100\",height=\"%100\")\nfor i in range(len(locations)):\n    folium.CircleMarker(location=locations[i],radius=1).add_to(m)\nm","09a5a096":"price=df[[\"lat\",\"long\",\"price\"]]\nmin_price=df[\"price\"].min()\nmax_price=df[\"price\"].max()\nmin_price,max_price","99d8962a":"pd.options.display.float_format = '{:.4f}'.format\ndf.price.describe().to_frame()","32ed05c3":"m = folium.Map(location=[47,-122],width=\"%100\",height=\"%100\")\ncolormap = cm.StepColormap(colors=['green','yellow','orange','red'] ,index=[min_price,321950,450000,645000,max_price],vmin= min_price,vmax=max_price)\nfor loc, p in zip(zip(price[\"lat\"],price[\"long\"]),price[\"price\"]):\n    folium.Circle(\n        location=loc,\n        radius=2,\n        fill=True,\n        color=colormap(p)).add_to(m)\nm","0f431f2f":"plt.figure(figsize=(20,8))\ncorr=df.corr().abs()\nmask=np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)]=True\nsns.heatmap(corr.abs(),annot=True,cmap=\"coolwarm\",mask=mask);","72faca86":"pairplot=sns.pairplot(df[[\"price\",\"sqft_living\",\"sqft_above\",\"grade\",\"sqft_living15\",\"bathrooms\",\"bedrooms\"]],kind=\"reg\",corner=True,diag_kind=\"kde\");\n\ndef corrfunc(x,y, ax=None, **kws):\n    r, _ = pearsonr(x, y)\n    ax = ax or plt.gca()\n    rho = '\\u03C1'\n    ax.annotate(f'{rho} = {r:.2f}', xy=(.1, .9), xycoords=ax.transAxes)\npairplot.map_lower(corrfunc)\nplt.show()","25b87e0b":"df.columns","2aee458a":"to_plot_list=[\"bedrooms\",\"bathrooms\",\"floors\",\"waterfront\",\"view\",\"condition\",\"grade\"]\n  \n\nfor i in to_plot_list:\n    plt.figure(figsize=(10,5))\n    df.groupby(i)[\"price\"].mean().plot.bar(color=\"orangered\");\n    plt.legend()\n    plt.title(i + \" BarPlot\")\n    plt.show()","395ddaf0":"df.corr().abs()[\"price\"].nlargest(15)","d91cf3cb":"to_plot_list=[\"bedrooms\",\"bathrooms\",\"floors\",\"waterfront\",\"view\",\"condition\",\"grade\"]\n  \n\nfor i in to_plot_list:\n    plt.figure(figsize=(10,5))\n    sns.countplot(x=i,data=df);\n    plt.legend()\n    plt.title(i + \" CountPlot\")\n    plt.show()","78c2f4dd":"to_plot_list=[\"bedrooms\",\"bathrooms\",\"floors\",\"waterfront\",\"view\",\"condition\",\"grade\"]\n  \n\nfor i in to_plot_list:\n    plt.figure(figsize=(10,5))\n    sns.boxplot(x=i,y=\"price\",data=df);\n    plt.legend()\n    plt.title(i + \" BoxPlot\")\n    plt.show()","08433296":"to_plot_list=[\"sqft_living\",\"sqft_living15\",\"sqft_lot15\"]\n  \n\nfor i in to_plot_list:\n    plt.figure(figsize=(10,5));\n    sns.jointplot(x=i,y=\"price\",data=df,color=\"darkred\");\n    plt.legend();\n    plt.show();","e542d111":"df[df[\"bedrooms\"]>10]","04e6fe4f":"df=df.drop(df[df[\"bedrooms\"]>10].index)","ab22c48e":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"bedrooms\",y=\"price\",data=df);","fd33b497":"df[df.sqft_lot15==df.sqft_lot].sample(10)","a4c891d5":"df[df[\"bathrooms\"]>=7][[\"price\",\"bathrooms\",\"bedrooms\",\"sqft_living\"]]","31b38fbb":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"bathrooms\",y=\"price\",data=df);","e08127f8":"df[\"bathrooms\"] = df['bathrooms'].round(0).astype(int)  #float bathroom?????","cff10845":"plt.figure(figsize=(15,6))\ndf.groupby(\"yr_built\")[\"price\"].mean().nlargest(30).plot.bar(color=\"darkblue\");","27525ed2":"sns.catplot(x=\"yr_built\", y = \"price\", data=df,size= 7, aspect = 3, kind=\"box\" );\nplt.xticks(rotation=90);","3442e5d6":"\nsns.catplot(x=\"yr_built\", y = \"price\", data=df[df.price<1000000],size= 7, aspect = 3, kind=\"box\" );\nplt.xticks(rotation=90);","fb6064c5":"sns.catplot(x=\"date_year\", y = \"price\", data=df,size= 4, aspect = 2, kind=\"box\" );\nplt.xticks(rotation=90);","85e9e91b":"sns.catplot(x=\"date_month\", y = \"price\", data=df,size= 5, aspect = 3, kind=\"box\" );\nplt.xticks(rotation=90);","2d837165":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(df[df[\"yr_renovated\"]>0][\"price\"]);\nplt.title(\"renovated\")\nplt.subplot(122)\nsns.boxplot(df[df[\"yr_renovated\"]==0][\"price\"]);\nplt.title(\"not-renovated\");","448d9b50":"df[(df[\"date_year\"]-df[\"yr_built\"])<0][[\"date_year\",\"yr_built\"]] # they could be sold before being build or there is a mistake,I dont know","eba8b9d4":"df=df.drop(df[(df[\"date_year\"]-df[\"yr_built\"])<0].index)","caf6354f":"df_new=df.copy()","7c8e0e7a":"df_new[\"is_renovated\"]=df_new[\"yr_renovated\"].apply( lambda x:1 if x>0 else 0)","9106606d":"df_new.head()","809dc346":"df.columns","af673474":"df[[\"sqft_living\",\"sqft_lot\",\"sqft_above\",\"sqft_basement\",\"sqft_living15\",\"sqft_lot15\"]].sample(7)\n# sqft_living - sqft_above=sqft_basement\n","6d858b52":"df[df[\"sqft_living\"]==df[\"sqft_above\"]][[\"sqft_living\",\"sqft_above\",\"sqft_lot\",\"sqft_basement\",\"sqft_living15\",\"sqft_lot15\"]]","d2a317a3":"df_new[\"total_room\"]=df_new[\"bedrooms\"]+df_new[\"bathrooms\"]","f8d857e3":"#df_new[\"sqft_per_room\"]=pd.Series(df_new[\"sqft_living\"]\/df_new[\"total_room\"],index=df_new.index)","1122b2d8":"df_new.corr()[\"price\"].nlargest(15)","48e989dd":"df_new.head()","0b851b3f":"X=df_new.drop([\"lat\",\"long\",\"price\",\"is_renovated\",\"sqft_above\",\"sqft_basement\",\"bedrooms\",\"bathrooms\"],axis=1)\n\ny=np.log(df_new[\"price\"])\n#y=df_new[\"price\"]","6362d7d5":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.30, \n                                                    random_state=42)","f9dadcda":"def adjustedR2(r2,n,k):\n    return r2-(k-1)\/(n-k)*(1-r2)","d3415105":"gbm_model = GradientBoostingRegressor(max_depth=7,random_state=42)\ngbm_model.fit(X_train, y_train)\ny_pred = gbm_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","52b80b5f":"r2_score(y_test,y_pred)","0d091f1f":"y_tr_pred=gbm_model.predict(X_train)","0db5a804":"r2_score(y_train,y_tr_pred)","d73305fb":"adjustedR2(r2_score(y_test,y_pred),df_new.shape[0],df_new.shape[1])","a59bf1ec":"plt.figure(figsize=(12,6))\nax1=sns.distplot(y_test,hist=False);\nsns.distplot(y_pred,ax=ax1,hist=False);","8030bb41":"Importance = pd.DataFrame({\"Importance\": gbm_model.feature_importances_*100},\n                         index = X_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"\u0130mportance LEevels\")","5ad95b0b":"DM_train = xgb.DMatrix(data = X_train, label = y_train)\nDM_test = xgb.DMatrix(data = X_test, label = y_test)\nxgb_model = XGBRegressor(max_depth=4,random_state=42).fit(X_train, y_train)\ny_pred = xgb_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","400c9bf8":"y_tr_pred=xgb_model.predict(X_train)","5335d031":"r2_score(y_train,y_tr_pred)","5ee1a57a":"adjustedR2(r2_score(y_test,y_pred),df_new.shape[0],df_new.shape[1])","227fbbc3":"plt.figure(figsize=(12,6))\nax1=sns.distplot(y_test,hist=False);\nsns.distplot(y_pred,ax=ax1,hist=False);","369e58d4":"Importance = pd.DataFrame({\"Importance\": xgb_model.feature_importances_*100},\n                         index = X_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"\u0130mportance LEevels\")","6ef63b0f":"lgbm = LGBMRegressor()\nlgbm_model = lgbm.fit(X_train, y_train)\ny_pred = lgbm_model.predict(X_test, \n                            num_iteration = lgbm_model.best_iteration_)\nnp.sqrt(mean_squared_error(y_test, y_pred))","d043227a":"y_tr_pred=xgb_model.predict(X_train)","913e7336":"r2_score(y_train,y_tr_pred)","22ccc2c3":"r2_score(y_test,y_pred)","0dafec15":"adjustedR2(r2_score(y_test,y_pred),df_new.shape[0],df_new.shape[1])","693d1cf2":"plt.figure(figsize=(12,6))\nax1=sns.distplot(y_test,hist=False);\nsns.distplot(y_pred,ax=ax1,hist=False);","f7039bfc":"Importance = pd.DataFrame({\"Importance\":lgbm_model.feature_importances_*100},\n                         index = X_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"\u0130mportance LEevels\")","edcd8d79":"est = HistGradientBoostingRegressor(random_state=42)\nhist_model=est.fit(X_train, y_train)\ny_pred=hist_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","4ecb6af6":"y_tr_pred=xgb_model.predict(X_train)\nr2_score(y_train,y_tr_pred)","616bc53f":"r2_score(y_test,y_pred)","1cd77f79":"adjustedR2(r2_score(y_test,y_pred),df_new.shape[0],df_new.shape[1])","77ff5f77":"plt.figure(figsize=(12,6))\nax1=sns.distplot(y_test,hist=False);\nsns.distplot(y_pred,ax=ax1,hist=False);","768646bd":"catb = CatBoostRegressor(random_state=42)\ncatb_model = catb.fit(X_train, y_train)\ny_pred = catb_model.predict(X_test)\n","2c8ac8f5":"np.sqrt(mean_squared_error(y_test, y_pred))","22081407":"y_tr_pred=xgb_model.predict(X_train)\nr2_score(y_train,y_tr_pred)","7640878b":"r2_score(y_test,y_pred)","14027dd1":"adjustedR2(r2_score(y_test,y_pred),df_new.shape[0],df_new.shape[1])","0358d297":"plt.figure(figsize=(12,6))\nax1=sns.distplot(y_test,hist=False);\nsns.distplot(y_pred,ax=ax1,hist=False);","98eb81c3":"## XGBOOST REGRESSOR","e82f8844":"## HISTOGRAM BASED BOOSTING REGRESSOR","c643550c":"## CATBOOST REGRESSOR","1b60f2e5":"## GRADIENT BOOSTING REGRESSOR","52733cb6":"## L\u0130GHTGBM REGRESSOR"}}