{"cell_type":{"991c96ae":"code","0b63c1d7":"code","5e9bcc1d":"code","bcd771e1":"code","f49a25d0":"code","1c3170b8":"code","b6bcddba":"code","ff43a9cc":"code","4cda2a44":"code","73b34e99":"code","3a1d351b":"code","e5e69c74":"code","c35bacea":"code","1e5976a3":"code","862511f7":"code","acb43e93":"code","861f3b1a":"code","a6f1e7d3":"code","2b9c3ce6":"code","b496ea6e":"code","3189e0dd":"code","a7710e36":"code","db26d753":"code","e69a127b":"code","c85be47a":"code","e90d9264":"code","417160d9":"code","748688f1":"code","698560db":"code","a620828c":"code","f2aa5815":"code","a0312ce9":"code","814fe62e":"code","153a5328":"code","eed30ed2":"code","7f9c4ea1":"code","a85fc4df":"code","69914ee5":"code","a2961137":"code","7ea98400":"code","c3cad11c":"code","7ea425e2":"code","e248baa5":"code","6294cfd4":"code","68812ace":"code","95c68865":"code","9da5257f":"code","6139a685":"code","b30b2409":"code","7fd0feb5":"code","05dd3155":"code","09174a42":"code","711ecc4c":"code","6e19f5a1":"code","acd0f33d":"code","0019b5c8":"code","171ed643":"code","2901f00d":"code","d9e1ed71":"code","7029dd56":"code","c49e5134":"code","6fa96b80":"code","8988bd59":"code","b7a49f0a":"code","a4d1db4f":"code","50ddd9aa":"code","7e76527a":"code","2f21272a":"code","07c98736":"code","9e3dac0f":"code","6bb12e2a":"code","5ee1b2b5":"code","c989bb1e":"code","275a77b7":"code","5b8b570d":"code","8c8e23e0":"code","ac742eb4":"code","58e324b1":"code","da83ed70":"code","cb6777a4":"code","3efd1a9a":"code","0d93ec78":"code","944ebe85":"code","4c447d9d":"code","62fd6c25":"markdown","b27855a4":"markdown","6e286986":"markdown","abb19408":"markdown","b65c0dbd":"markdown","ba76fb83":"markdown","aa646dbb":"markdown","07766d10":"markdown","d64909fd":"markdown","6413946e":"markdown","eed87c03":"markdown","871aac48":"markdown","cb2f93e1":"markdown","87eff105":"markdown","40be0fd3":"markdown","af9cc497":"markdown","969b037a":"markdown","4b83e781":"markdown","892e6773":"markdown","19d2c673":"markdown","41a2f596":"markdown","a03e12b2":"markdown","ca20f303":"markdown","1e2a3c23":"markdown","92a5dd2d":"markdown","fbe830bd":"markdown","66d8ae40":"markdown","42c1cc24":"markdown","7902d175":"markdown","3f2f6467":"markdown","8f110a72":"markdown","ebb8b684":"markdown","c661cdb8":"markdown","cd7a1c35":"markdown","ac69da97":"markdown","fe13de59":"markdown","0e485c4c":"markdown","48e84315":"markdown","8ea3a25f":"markdown","14453aad":"markdown","9ea74b89":"markdown","eb5e0b55":"markdown","758a4a3a":"markdown","50d94ee0":"markdown","b1cc099a":"markdown","6600bbd5":"markdown","a296c48f":"markdown"},"source":{"991c96ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b63c1d7":"#import the dataset\ntrain_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId=test_df[\"PassengerId\"]\n","5e9bcc1d":"train_df.columns\n\n\"\"\"\nIndex(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')\n\n\"\"\"\n","bcd771e1":"train_df.head()","f49a25d0":"train_df.describe()","1c3170b8":"train_df.info()\n","b6bcddba":"def bar_plot(variable):\n    \"\"\"\n        input: variable example : \"Sex\"\n        output : bar plot & value count\n    \"\"\"\n    #get feature\n    var= train_df[variable] \n    #count number of categorical variable(value\/sample)\n    varValue=var.value_counts() #ka\u00e7 kategori old\u011funu ve kategorilerde ka\u00e7 tane  veri oldu\u011funu buluruz\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue) # x ve y e ekseninden olu\u015fan bir bar plottur  \n    plt.xticks(varValue.index , varValue.index.values)\n    plt.ylabel(\"Frekans\")\n    plt.title(variable)\n    plt.show()\n    print(format(variable) + \"\\n\"+  format(varValue))\n    \n    ","ff43a9cc":"category1= [ \"Survived\" , \"Sex\" , \"Pclass\" , \"Embarked\" , \"SibSp\" , \"Parch\"]\nfor c in category1:\n    bar_plot(c)\n    ","4cda2a44":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(format(train_df[c].value_counts()))","73b34e99":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frekans\u0131\")\n    plt.title(format(variable))\n    plt.show()","3a1d351b":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\n\nfor n in numericVar:\n    plot_hist(n)\n    ","e5e69c74":"# Pclass - Survived\n\n\n\"\"\"\n\tPclass\tSurvived        1.Classtaki %62 olas\u0131l\u0131kla bir yolcu hayatta kalm\u0131\u015f\n0\t1\t0.629630            2.Classtaki %47 olas\u0131l\u0131kla bir yolcu hayatta kalm\u0131\u015f\n1\t2\t0.472826            3.Classtaki %24 olas\u0131l\u0131kla bir yolcu hayatta kalm\u0131\u015f\n2\t3\t0.242363\n\"\"\"\n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False) #ortalamas\u0131n\u0131 g\u00f6steriyoruz \n# Pclass ve surviived featurelerimizi ald\u0131k Pclassa g\u00f6re grupland\u0131rd\u0131k . Bunlar\u0131n ortalamas\u0131n\u0131 ald\u0131k ve s\u0131ral\u0131 bir \u015fekilde yazd\u0131rd\u0131k","c35bacea":"#sex-survived\n\n\n\"\"\"\n\tSex\tSurvived\n0\tfemale\t0.742038    kad\u0131nlar %74 oran\u0131nda hayatta kalm\u0131\u015f\n1\tmale\t0.188908    ekrkler %18 oran\u0131nda hayatta kalm\u0131\u015f\n\n\"\"\"\n\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","1e5976a3":"#Sibsp-survived\n\n\n\"\"\"\n\nSibSp\tSurvived\n1\t1\t0.535885       yan\u0131nda 1 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %53\n2\t2\t0.464286       yan\u0131nda 2 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %46\n0\t0\t0.345395       yan\u0131nda 0 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %34\n3\t3\t0.250000       yan\u0131nda 3 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %25\n4\t4\t0.166667       yan\u0131nda 4 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %16\n5\t5\t0.000000       yan\u0131nda 5 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %0\n6\t8\t0.000000       yan\u0131nda 8 ki\u015fi olanlar\u0131n hayatta kalma oran\u0131 %0\n\n\"\"\"\n\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","862511f7":"#Parch - Survived \n\n\"\"\"\n\nParch\tSurvived\n3\t3\t0.600000    yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) varsa ve bu say\u0131 3 ise %60 oran\u0131nda hayattay\u0131z demek\n1\t1\t0.550847    yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) varsa ve bu say\u0131 1 ise %55 oran\u0131nda hayattay\u0131z demek\n2\t2\t0.500000    yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) varsa ve bu say\u0131 2 ise %50 oran\u0131nda hayattay\u0131z demek\n0\t0\t0.343658    yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) yok  ise %34 oran\u0131nda hayattay\u0131z demek\n5\t5\t0.200000    yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) varsa ve bu say\u0131 5 ise %20 oran\u0131nda hayattay\u0131z demek\n4\t4\t0.000000    yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) varsa ve bu say\u0131 4 ise %0 oran\u0131nda hayattay\u0131z demek\n6\t6\t0.00000     yan\u0131m\u0131zda \u00e7ccuk-yada aile\u00fcyemiz(parent ) varsa ve bu say\u0131 6 ise %0 oran\u0131nda hayattay\u0131z demek\n\"\"\"\n\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","acb43e93":"def detec_outlier(df,features):\n    outlier_indices=[]\n    for c in features:\n        #1st quartile\n        Q1=np.percentile(df[c],25)\n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR \n        IQR=Q3-Q1\n        #Outlie step\n        outlier_step=IQR * 1.5\n        #detec outlier and their indeces\n        outlier_list_column=df[(df[c]< Q1 - outlier_step) | (df[c]>Q3 + outlier_step)].index\n        #store indeces\n        outlier_indices.extend(outlier_list_column)\n        \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list ( i for i , v in outlier_indices.items() if v > 2)\n    return multiple_outliers\n        ","861f3b1a":"train_df.loc[detec_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","a6f1e7d3":"#drop outlier \ntrain_df = train_df.drop(detec_outlier(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)\ntrain_df","2b9c3ce6":"#data frammleri birle\u015ftirmemiz gerekiyor \ntrain_df_len=len (train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","b496ea6e":"train_df.head()","3189e0dd":"train_df.columns[train_df.isnull().any()] #hangi column larda null de\u011feri var tespit ediyoruz","a7710e36":"train_df.isnull().sum() \n\"\"\"\nPassengerId       0\nSurvived        418\nPclass            0\nName              0\nSex               0\nAge             256\nSibSp             0\nParch             0\nTicket            0\nFare              1\nCabin          1007\nEmbarked          2\ndtype: int64\n\n\"\"\"","db26d753":"#embarked in veride nerede ?\ntrain_df[train_df[\"Embarked\"].isnull()]","e69a127b":"#fare kullanarak embarked hakk\u0131nda fikir sahibi olabiliriz\ntrain_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()\n\n\n\"\"\" \nBurada \u00e7\u0131kan sonu\u00e7lar\u0131 de\u011ferlendirdi\u011fimizde \nQ liman\u0131nda binenler \u00e7ok az para \u00f6demi\u015fler . b\u00fcy\u00fck ihtimal bunlar 3.s\u0131n\u0131f insanlar \nS liman\u0131nda binenler  biraz daha para vermi\u015fler bunlarda b\u00fcy\u00fck ihrimal 2. insanlar\nC limannda ise genelde y\u00fcksek fiyat \u00f6deyenler var medyan de\u011ferkeri 100 \u00fcn biraz alt\u0131nda  \n\nBizim \u00fcst taraftaki embarked de\u011ferlerini k\u0131yaslad\u0131\u011f\u0131m\u0131zda orada fare k\u0131sm\u0131nda 80.0 de\u011feri vard\u0131 buda bizim bu a\u015f\u015fa\u011f\u0131daki tablomuzda\ng\u00f6steriyor ki bun insanlarlar muhtemelen C liman\u0131ndan bindiler gemiye\nbunun i\u00e7in burada kay\u0131p de\u011fer olarak verilen embarked de\u011ferini biz burada C liman\u0131ndan binmi\u015f olarak verebiliriz \n\n\n\"\"\"","c85be47a":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\n# Embarked de\u011feri bo\u015f olan 2 tane tek girdi vard\u0131 ve bunlar\u0131n fare leri 80 idi biz bunlar\u0131 yolcular\u0131n \u00f6dedikleri paraya g\u00f6re \n#istatisti\u011fini \u00e7\u0131kar\u0131p medyanlar\u0131n\u0131  kar\u015f\u0131la\u015ft\u0131\u011f\u0131m\u0131zda  g\u00f6rd\u00fck ki faar yani \u00f6dedikleri para miktar\u0131 y\u00fcksek olanlar(80'de bu s\u0131n\u0131fta) C limannda binmi\u015fler \n#bizde bu bo\u015f olan miisssing data de\u011ferlerine faar leri yani \u00f6dedikleri para 80 oldu\u011fu i\u00e7in bunlar\u0131 C liman\u0131 olarak yazd\u0131k\ntrain_df[train_df[\"Embarked\"].isnull()]\n#kontrol ediyoruz ","e90d9264":"train_df[train_df[\"Fare\"].isnull()] # burada fare de\u011feri bo\u015f olan kim var buna bak\u0131yoruz\n#1033 nolu yolcunun fare de\u011feri yokmu\u015f di\u011fer feature de\u011ferlreinden baz\u0131lar\u0131da bilinmiyor \n#burada bizi\u00f6 bakailece\u011fimiz  husus var biri Pclass \u0131 yani s\u0131n\u0131flar\u0131 di\u011feri ise hangi limandan bindi\u011fi\n#Pclass \u0131n 3 olmas\u0131 ","417160d9":"\nnp.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]) # pclass de\u011feri 3 olan yolcular\u0131n ortalama \u00f6dedileri \u00fccrete bak\u0131yoruz =12.7 \ntrain_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean( train_df [train_df [\"Pclass\"]==3 ] [\"Fare\"])) #NAN olan fare de\u011ferine yukar\u0131da buldu\u011fumuz ortalamay\u0131 yaz\u0131yoruz \ntrain_df[train_df[\"Pclass\"].isnull()] # kontrol ediyoruz","748688f1":"list1=[\"SibSp\",\"Parch\",\"Age\" ,\"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True , fmt=\".2f\")","698560db":"g = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Hayatta Kalma Olas\u0131l\u0131\u011f\u0131\")\nplt.show()","a620828c":"a= sns.factorplot(x=\"Parch\",y=\"Survived\",kind=\"bar\",data=train_df,size=6)\na.set_ylabels(\"Hayatta Kalma Olas\u0131l\u0131\u011f\u0131\")\nplt.show()","f2aa5815":"c = sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\nc.set_ylabels(\"Hayatta Kalma Olas\u0131l\u0131\u011f\u0131\")\nplt.show()\n\n","a0312ce9":"d = sns.FacetGrid(train_df,col=\"Survived\")\nd.map(sns.distplot,\"Age\",bins=25)\nplt.show()\n\n","814fe62e":"g = sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\",size=3)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show","153a5328":"g= sns.FacetGrid(train_df,row=\"Embarked\", size= 3)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","eed30ed2":"g= sns.FacetGrid(train_df,row=\"Embarked\",col=\"Survived\", size= 4)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","7f9c4ea1":"train_df[train_df[\"Age\"].isnull()]","a85fc4df":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","69914ee5":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","a2961137":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df, kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df, kind=\"box\")\nplt.show()","7ea98400":"train_df[\"Sex\"]=[1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","c3cad11c":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","7ea425e2":"#Age k\u0131sm\u0131nda bo\u015fluklar\u0131 doldurmak i\u00e7in kod yazmam\u0131z laz\u0131m bunun i\u00e7in ilk \u00f6nce ka\u00e7 tane null de\u011fer var g\u00f6r\u00fcnt\u00fclemeyliyiz\nindex_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\n#index_nan_age\nfor i in index_nan_age:\n    age_iliski=train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"])) ].median()\n    #baz\u0131 de\u011ferlerdede prediction yapamad\u0131\u011f\u0131m\u0131z oluyor bunun sebebi di\u011fer de\u011ferlerdeki nan valuelr\n    #bunun i\u00e7in eski kulland\u0131\u011f\u0131m\u0131z en basit y\u00f6ntem olan medyanlar\u0131yla doldural\u0131m\n    age_median =train_df[\"Age\"].median()\n    if not np.isnan(age_iliski):\n        train_df[\"Age\"].iloc[i]=age_iliski\n    else :\n        train_df[\"Age\"].iloc[i]=age_median","e248baa5":"#yukar\u0131da null de\u011ferlerini yok etti\u011fimiz age s\u00fctununa tekrak bak\u0131yoruz null de\u011fer varm\u0131 diye\ntrain_df[train_df[\"Age\"].isnull()]","6294cfd4":"train_df[\"Name\"].head(10)\n","68812ace":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\n","95c68865":"train_df[\"Title\"].head(10)","9da5257f":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","6139a685":"#Kategorikal De\u011ferlere D\u00f6n\u00fc\u015ft\u00fcrme\n\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","b30b2409":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","7fd0feb5":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","05dd3155":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","09174a42":"train_df.head()\n","711ecc4c":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","6e19f5a1":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","acd0f33d":"train_df.head()","0019b5c8":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","171ed643":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","2901f00d":"train_df.head(10)","d9e1ed71":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","7029dd56":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","c49e5134":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","6fa96b80":"train_df[\"Embarked\"].head()\n","8988bd59":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","b7a49f0a":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","a4d1db4f":"train_df[\"Ticket\"].head(20)\n","50ddd9aa":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]\n","7e76527a":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","2f21272a":"train_df[\"Ticket\"].head(20)\n","07c98736":"train_df.head()\n","9e3dac0f":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","6bb12e2a":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()\n","5ee1b2b5":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","c989bb1e":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","275a77b7":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","5b8b570d":"from sklearn.model_selection import train_test_split, StratifiedKFold , GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier , VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","8c8e23e0":"train_df_len","ac742eb4":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace = True)","58e324b1":"test.head()","da83ed70":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","cb6777a4":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","3efd1a9a":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","0d93ec78":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","944ebe85":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","4c447d9d":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","62fd6c25":"<a id= \"26\"> <\/a><br>\n## PClass","b27855a4":"iki farkl\u0131 tablo var  biri hayatta kalanlar di\u011feri \u00f6lenlerin da\u011f\u0131l\u0131m\u0131n\u0131n oldu\u011fu tablodur\nhayatta kalanlar\u0131n k\u0131sm\u0131nda \u00e7ocuklar\u0131n belirgin bir \u015fekilde hayatta kalma oran\u0131 y\u00fcksektir\nage<= 10 ya\u015fama oran\u0131 y\u00fcksek\nYa\u015fl\u0131 insanlar (80) hayatta kald\u0131lar\npik noktas\u0131 ya\u015fayanlarda 30-35  \u00f6l\u00fclerde 20-30 aras\u0131 insanlarda \u00f6l\u00fcm oran\u0131 y\u00fcksek\n\n\n\u00d6l\u00fcmden harici 15-35 ya\u015f aras\u0131ndaki yolcular\u0131n fazla oldu\u011funu g\u00f6rebiliyoruz yani bizim yolcular\u0131m\u0131z\u0131n genel aral\u0131\u011f\u0131 15-35\n\nAge featuremiz bizim e\u011fitimiz i\u00e7in g\u00fczel bir de\u011fer aral\u0131\u011f\u0131\nBu featuremizde missing value vard\u0131 bunlar\u0131 bulu\u011f fixlememiz laz\u0131m\n","6e286986":"Pclass yolcular\u0131m\u0131z\u0131n seyahet etti\u011fi s\u0131n\u0131flard\u0131 \nBurada g\u00f6rd\u00fc\u011f\u00fcm\u00fczde 1.klasta hayatta kalma oran\u0131 en y\u00fcksek d\u00fcnyan\u0131n ac\u0131 ger\u00e7e\u011fi....\nBurada de\u011ferlerimizin ve \u00f6zelliklerimizin \u00e7ok olmay\u0131\u015f\u0131ndan \u00f6t\u00fcr\u00fc yeni bir \u00f6zellik vs olu\u015fturmam\u0131za gerek yok kendi aras\u0131ndaki ili\u015fki gayet makul...","abb19408":"<a id= \"9\"> <\/a><br>\n## Find Missing Value\n","b65c0dbd":"0 \u0131 bireyler olarak kabul edersek \n1,2,3 de k\u00fc\u00e7\u00fck aile olarak kabul edersek \n4,5 i de b\u00fcy\u00fck aileler dersek \n\n------ Bu grafikte bar plotlar\u0131n \u00fcst\u00fcnde olan \u00e7izgi \u015funu g\u00f6sterir \u00f6rnek olarak 3'\u00fc ele al\u0131rsak ortalama olarak 3 bireye sahip ailelerin hayatta kalma olasl\u0131\u011f\u0131 0.6 imi\u015f ama o \u00e7izgi bize 3 ki\u015fiye sahip ailenin hayatta kalma oran\u0131n\u0131 0.2-1.0 aral\u0131\u011f\u0131nda olabilece\u011fini g\u00f6steriyor \"Burada hayatta kalma olas\u0131l\u0131\u011f\u0131 \u00e7ok de\u011fi\u015fken b\u00fcy\u00fck bir aral\u0131\u011fa sahibiz\"\n\n1 \u00e7ocu\u011fu veya ebevyni olan ailelere bakar ise 0.5 ile 0.7 aras\u0131nda olabilece\u011fini g\u00f6r\u00fcr\u00fcz\n\n\n\nBURADA Parch ile SibSp yi 3 ten a\u015fa\u011f\u0131s\u0131 ve yukar\u0131s\u0131 olarak   birle\u015ftirip ileride daha sonra bu \u00f6zelliimizide ay\u0131r\u0131p standart sa\u011fmam\u0131z\u0131n daha tutarl\u0131 olmas\u0131n\u0131 sa\u011flayabililiriz. ","ba76fb83":"<a id= \"28\"> <\/a><br>\n## Train - Test Split","aa646dbb":"<a id= \"30\"> <\/a><br>\n## Simple Logistic Regression\n","07766d10":"kad\u0131n yolcular erkek yolculardan daha fazla hayatta kalm\u0131\u015flar (s\u0131n\u0131fland\u0131rma yaparken kullan\u0131labilir) \nerkeklerinc liman\u0131ndan binenlerin hayatta alma olas\u0131l\u0131\u011f\u0131daha y\u00fcksek\nCinsiyeti ve embarkedi do\u011frudan modelimizde kullanabiliriz.\n","d64909fd":"<a id= \"13\"> <\/a><br>\n\n## SibSp -- Survived","6413946e":"orta \u00e7izgi medyan\u0131 ifade ediyor\nAma cinsiyet ya\u015f paradigmas\u0131 bizim i\u00e7i uygun de\u011fil \u00e7\u00fcnk\u00fc aras\u0131nda pek bir fark yok","eed87c03":"<a id= \"7\"> <\/a><br>\n# Outlier Detection\n\nVeriyi bozan ayr\u0131k de\u011ferlerden kurtulmam\u0131z gererkir \u00e7\u00fcnk\u00fc istatiksel sonu\u00e7ta ayr\u0131k de\u011fer isteti\u011fi bozar misal 1,2,3,5,6,100 var burada ortalama y\u00fcksek ol\u0131yor ama de\u011ferlerimiz y\u00fcksek de\u011fil burada outlier data 100 d\u00fcr bunu atmam\u0131z gerekir \n","871aac48":"<a id= \"8\"> <\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","cb2f93e1":"<a id= \"18\"> <\/a><br>\n# #  Embarked--Sex--Pclass--Survived","87eff105":"<a id= \"4\"> <\/a><br>\n## Categorical Variable Analysis","40be0fd3":"<a id= \"1\"> <\/a><br>\n# Load and Check Data","af9cc497":"<a id= \"5\"> <\/a><br>\n## Numerical Variable Analysis\n","969b037a":"<a id= \"16\"> <\/a><br>\n\n## Age--Survived","4b83e781":"## Sex","892e6773":"<a id= \"31\"> <\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","19d2c673":"<a id= \"19\"> <\/a><br>\n\n# # Embarked--Sex--Fare--Survived ","41a2f596":"<a id= \"22\"> <\/a><br>\n## Name -- Title","a03e12b2":"<a id= \"25\"> <\/a><br>\n## Ticket","ca20f303":"<a id= \"24\"> <\/a><br>\n## Embarked ","1e2a3c23":"<a id= \"10\"> <\/a><br>\n## Fill Missing Value\n* Embarked has 2 missi\n* Fare has only 1","92a5dd2d":"<a id= \"11\"> <\/a><br>\n# Visualization","fbe830bd":"Tablolar yukar\u0131dan a\u015f\u015fa\u011f\u0131ya do\u011fru Pclass \u0131 yani yolcular\u0131m\u0131z\u0131n klasmanlar\u0131(s\u0131n\u0131flar\u0131n\u0131) belirtiyor  s\u00fctunlar\u0131m\u0131z\u0131n ilki \u00f6l\u00fcmleri ikincisi hayatta kalmalar\u0131 g\u00f6steriyor\n\n\nTablolara teker teker bak\u0131nca 3 s\u0131n\u0131f\u0131m\u0131zdan olan yolcular\u0131m\u0131z\u0131n say\u0131s\u0131n\u0131n fazla oldu\u011funu g\u00f6rebiliriz.\nTablolara bak\u0131nca ;\n\nPclass de\u011feri 3 olan tablomuzda \u00f6l\u00fcm oranlar\u0131 \u00e7ok y\u00fcksek \n\nPclass 2 olan tablomuza bak\u0131nca \u00f6l\u00fcm oranlar\u0131 orta halli\n\nPclass 1 olan tablomuza bak\u0131nca \u00f6l\u00fcm oranlar\u0131n\u0131n az oldu\u011fu g\u00f6r\u00fcl\u00fcyor\n\n**o halde Pclassde\u011feri bizim modelimizi e\u011fitmemizde \u00f6nemli bir etkenimiz olucak**\n","66d8ae40":"1.s\u0131n\u0131flar\u0131n ya\u015f ortalamas\u0131 2 den b\u00fcy\u00fck pclass\u0131 2 olanlar\u0131n kisi ise 3 ten b\u00fcy\u00fck\n\nYani pclass benim age de\u011ferlerinde null olanlar i\u00e7in ortalams\u0131 veya medyan\u0131 alarak null veya NAN de\u011ferleri doldurabilece\u011fimiz g\u00fczel bir de\u011fi\u015fken olabilir.\n","42c1cc24":"<a id= \"23\"> <\/a><br>\n## Family Size","7902d175":"<a id= \"3\"> <\/a><br>\n# Univariate Variable Analysis\n*   Categorical Variable  : 2 veya daha fazla se\u00e7ene\u011fi olan de\u011fi\u015fkenler = Survived , Sex , Pclass , Embarked , Name , Sibsp and Parch \n*   Numerical Variable    : Say\u0131lardan olu\u015fan de\u011fi\u015fkenler = Fare , age , passengerId\n        \n      \n    ","3f2f6467":"# A","8f110a72":"<a id= \"27\"> <\/a><br>\n# Modelling","ebb8b684":" * float64(2):  Age - Fare         \n * int64(5): PassengerId - Survived - Pclass - SibSp - Parch\n * object(5): Name - Sex -  Ticket - Cabin - Embarked\n\n\n \n \n \n ","c661cdb8":"<a id= \"21\"> <\/a><br>\n# Feature Engineering\n","cd7a1c35":"<a id= \"6\"> <\/a><br>\n# Basic Data Analysis\n* Baz\u0131 featurlar\u0131 birbirleriyle k\u0131yaslayaca\u011f\u0131z\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","ac69da97":"<a id= \"17\"> <\/a><br>\n# # Pclass--Survived--Age","fe13de59":"**Buradan g\u00f6rd\u00fc\u011f\u00fcm\u00fcz e\u011fer 2 den fazla SibSp de\u011ferine yani ebeyn \u00e7ocuk say\u0131s\u0131na sahipse hayatta kalma olas\u0131l\u0131\u011f\u0131 sert bir \u015fekilde azal\u0131yor** \n\nSibSp==0 veya 1 veya 2 ise daha hayatta kalma oranlar\u0131 daha fazla\nVe bu kategorileri a\u00e7\u0131klayan sa\u011flayan yeni bir feature(\u00f6zellik) olu\u015fturabiliriz \n","0e485c4c":"Fare feature'si ile Fare aras\u0131nda bir ili\u015fki vard\u0131r (0.26)","48e84315":"<a id= \"12\"> <\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived ","8ea3a25f":"<a id= \"2\"> <\/a><br>\n# Variable Description\n1. **PassengerId** = Ki\u015fiye atanm\u0131\u015f numara\n2. **Survived** =  Yolcular\u0131n \u00f6l\u00fc (0) veya ya\u015f\u0131yor (1)\n3. **Pclass** =  Yolcular\u0131n s\u0131n\u0131f\u0131 \n4. **Name** =   Adlar\u0131 \n5. **Sex** =   Cinsiyetleri\n6. **Age**  =   Ya\u015flar\u0131\n7. **SibSp** =  Karde\u015fler ve kar\u0131 koca\n8. **Parch** =  Aile veya \u00e7ocuklar\n9. **Ticket** =  Bilet numaras\u0131\n10. **Fare** =  Bilet i\u00e7in \u00f6denen para\n11. **Cabin** =  Kabin kategorisi\n12. **Embarked** = Yolcular\u0131n bindi\u011fi Limanlar (C=Cherburg , Q=Queenstown , S=Southampton)\n\n \n \n","14453aad":"ya\u015f-cinsiyet aras\u0131ndaki ili\u015fki 0.063 yani neredeyse s\u0131f\u0131r demek yani ben ya\u015f\u0131 predictionyapacaksam  cinsiyetle aras\u0131nda bir korelasyon kuram\u0131yorum \n\nAma ya\u015f ile parch sibsp  pclassaras\u0131nda bir korelasyon \u0130li\u015fki vard\u0131r","9ea74b89":"<a id= \"14\"> <\/a><br>\n## Parch--Survived","eb5e0b55":"Genelde K\u00fc\u00e7\u00fck Aileler Hayatta Kal\u0131yomu\u015f","758a4a3a":"sat\u0131rlar Fare \nS ve C liman\u0131nda daha fazla \u00f6deyenlerin hayatta kalma ihtimali daha y\u00fcksek \ngenel olarak bak\u0131cak olursak daha \u00e7ok para \u00f6deyince hayatta kalma olas\u0131l\u0131\u011f\u0131 art\u0131yor \n\nFare featureni kategori olarak modelimizde kullanabiliriz \n\n\n","50d94ee0":"#      Introdoction  \n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n\n6. [Visualization](#11)\n    * [Correlation Between Sibsp -- Pach -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch--Survived](#14)\n    * [Pclass--Survived](#15)\n    * [Age--Survived](#16)\n    * [Pclass--Survived--Age](#17)\n    * [Embarked--Sex--Pclass--Survived](#18)\n    * [Embarked--Sex--Fare--Survived](#19)\n    * [Fill Missing:Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [PClass](#26)\n    * [Sex](#27)\n    \n8. [Modelling](#28)\n    * [Train_Test-Split](#29)\n    * [Simple Logistic Regression](#30)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#31)\n    * [Ensemble Modelling](#32)","b1cc099a":"<a id= \"20\"> <\/a><br>\n\n## Fill Missing:Age Feature","6600bbd5":"<a id= \"15\"> <\/a><br>\n## Pclass--Survived","a296c48f":"1. Decision Tree\n1. SVM\n1. Random Forest\n1. KNN\n1.  Logistic Regression"}}