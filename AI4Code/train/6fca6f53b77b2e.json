{"cell_type":{"3d1b0136":"code","1f6b7027":"code","5355f40b":"code","4a2db356":"code","422faee4":"code","e05a6a24":"code","231fd24d":"code","dadbca7b":"code","a9c95444":"code","24902378":"markdown","cd89ece2":"markdown","040ccd13":"markdown","0616e9e4":"markdown","2e9b7c25":"markdown","83308000":"markdown","bf84b6fe":"markdown","daecbe83":"markdown","2be6d05a":"markdown"},"source":{"3d1b0136":"list_1 = [1, 2, 3]\nfor i, value in enumerate(list_1):\n    print(i, ':', value)","1f6b7027":"def func():\n    return (1, 2, 3)","5355f40b":"a, b, c = func()\nprint(a, b, c)","4a2db356":"import sys\nx = 1, 2, 3\nprint(sys.getsizeof(x))","422faee4":"list_2 = [1, 5, 4, 3, 4, 5, 3, 2, 5, 1, 2, 4, 5, 9, 6 ,7, 4]\nprint(max(set(list_2), key=list_2.count))","e05a6a24":"func = lambda a: a + 10\nfunc(5)","231fd24d":"n = 10\nres = 1 < n < 20\nprint(res)\nres = 1 > n <= 20\nprint(res)","dadbca7b":"alphabets = []\n\nfor i in range(97, 123):\n    alphabets.append(chr(i))\n\nprint(alphabets)","a9c95444":"def cumulative(lists):\n    cum_sum = []\n    length = len(lists)\n    cum_sum = [sum(lists[0:x:1]) for x in range(0, length+1)]\n    return cum_sum[1:]\n    \nlists = [10, 20 ,30, 40, 50]\nprint(cumulative(lists))","24902378":"# 6. Chaining of comparison operators.","cd89ece2":"# 3. Check memory usage\nTo verify the memory usage, we can call the \"getsizeof\" method.","040ccd13":"# 4. Finding most frequent value","0616e9e4":"# 7. Fast alphabet","2e9b7c25":"# 2. Return multiple values\nMany programming languages do not support this feature, but python do return multiple values.","83308000":"# 8. Cumulative sum","bf84b6fe":"# Some useful tricks in Python","daecbe83":"# 5. Lambda functions in python\nA lambda function is a small anonymous function. It can take any number of arguments, but can only have one expression.","2be6d05a":"# 1. Play with enumeration\nWith enumerators, it is easy to find an index while you are inside loop"}}