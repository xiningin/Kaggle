{"cell_type":{"18bae8c8":"code","167dc650":"code","6c79f6b2":"code","90f495d8":"code","07a56b2a":"code","415e2f3f":"code","670d27d1":"code","c95f89f8":"code","e58b1635":"code","4573c0ef":"code","72f62efe":"code","5bc1f844":"code","8e658743":"code","5060544b":"code","748a7982":"code","be81ca28":"code","086efe15":"code","6df3d78c":"code","35c15119":"code","2f397de5":"code","49191426":"code","6dd897a5":"markdown","de81fa9d":"markdown","d8f2301a":"markdown"},"source":{"18bae8c8":"#12. Once you've run cells #1-$11 below, come back and run this cell:\nyear = int(input('Enter a year (2021)'))\nmonth = int(input('Enter a month (8 for August, or 12 for December)'))\nday = int(input('Enter a day (1-31)'))\nmodel_choice = input(\"Choose prediction model: 'xgb' or 'ols'\")\ntoday_date = datetime.date(year, month, day)\n\nfinal_data = DraftKingsScore(today_date, model_choice)\nfinal_data.sort_values('Predicted_Draftkings_Score', ascending = False).sort_values('VarValue', ascending = False).head(24)","167dc650":"#1. Import and install libraries\n!pip install basketball_reference_scraper\n!pip install utils\n!pip install pulp\nimport time\nimport calendar\nimport basketball_reference_scraper\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime, timedelta, date\nfrom bs4 import BeautifulSoup\nfrom scipy.stats import uniform\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nimport requests, os, collections as co, json, datetime, sys, shutil, unidecode\nfrom basketball_reference_scraper.teams import get_roster, get_team_stats, get_opp_stats, get_roster_stats, get_team_misc\nfrom basketball_reference_scraper.box_scores import get_box_scores\nfrom basketball_reference_scraper.players import get_stats, get_game_logs\nfrom basketball_reference_scraper.seasons import get_schedule, get_standings\nfrom basketball_reference_scraper.pbp import get_pbp\nfrom basketball_reference_scraper.shot_charts import get_shot_chart\nfrom basketball_reference_scraper.injury_report import get_injury_report\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n# plot feature importance using built-in function\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom statsmodels.api import OLS\nfrom tkinter import filedialog\n#from datetime import date\nimport utils\nimport io\nfrom decimal import Decimal\nfrom pulp import *","6c79f6b2":"from pandas import values_from_object\nimport pandas._libs.lib\nget_schedule(2018, playoffs=False)","90f495d8":"from basketball_reference_scraper.seasons import get_schedule, get_standings\nimport basketball_reference_scraper\n\nget_schedule(2018, playoffs=False)","07a56b2a":"#2. Load program (runs all data scraping, model feature gathering, model predictions, and then outputs optimized lineup)\ndef DraftKingsScore(today_date, model_choice):\n \n    #1. Pull salaries and fantasy score data\n    all_game_data = pull_game_data(today_date)\n    for a in range(0, len(all_game_data)):\n        if ':' in all_game_data['Minutes'][a]:\n            all_game_data['Minutes'][a] = pd.to_numeric(all_game_data['Minutes'][a].split(':')[0]) + pd.to_numeric(all_game_data['Minutes'][a].split(':')[1])\/60\n        if all_game_data['Minutes'][a] == 'NA':\n            all_game_data['Minutes'][a] = pd.to_numeric(0)\n        if all_game_data['Minutes'][a] == 'DNP':\n            all_game_data['Minutes'][a] = pd.to_numeric(0)\n\n    print(today_date < date.today())\n    if today_date < date.today():\n        today_players = all_game_data[all_game_data['Date'] == today_date].reset_index().drop(['index'], axis = 1)\n    else:\n        today_players = pull_today_players(today_date, all_game_data)\n\n    \n    #2. Gather feature data\n    today_features = pull_today_feature_data(today_players, all_game_data, today_date)\n    all_game_data_feature  = pull_historical_feature_data(all_game_data)\n    \n    #3. Calculate projected fantasy points for each player based on selected model\n    if model_choice == \"xgb\":\n        draftkings_model, mean_squared = xgb_score(all_game_data_feature)\n    if model_choice == \"ols\":\n        draftkings_model, mean_squared = ols_score(all_game_data_feature)\n    \n    draftkings_pred_score = draftkings_model.predict(today_features[['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE', 'MIN_LAST_10_DAYS', 'MIN_LAST_30_DAYS', 'MIN_LAST_60_DAYS', 'MIN_ALL_AVERAGE']])\n    today_features['Predicted_Draftkings_Score'] = draftkings_pred_score\n    print(mean_squared)\n    \n    #5. Determine optimized roster\n    total_score_optimized = roster_optimize(today_features)\n    \n    #6. Export final data\n    final_data = export_results(total_score_optimized, today_features)\n\n    return final_data","415e2f3f":"#3. Load program (pulls list of players playing on selected date)\ndef pull_today_players(today_date, all_game_data):\n    teams = ['ATL'     ,'BRK'     ,'BOS'      ,'CHO'     ,'CHI'     ,'CLE'     ,'DAL'     ,'DEN'     ,'DET'     ,'GSW'     ,'HOU'     ,'IND'     ,'LAC'     ,'LAL'     ,'MEM'     ,'MIA'     ,'MIL'     ,'MIN'     ,'NOP'     ,'NYK'     ,'OKC'     ,'ORL'     ,'PHI'     ,'PHO'     ,'POR'     ,'SAC'     ,'SAS'     ,'TOR'     ,'UTA'     ,'WAS']\n    team_name = ['Atlanta Hawks',\n                  'Brooklyn Nets',\n                  'Boston Celtics',\n                  'Charlotte Hornets',\n                  'Chicago Bulls',\n                  'Cleveland Cavaliers' ,\n                  'Dallas Mavericks' ,\n                  'Denver Nuggets' ,\n                  'Detroit Pistons' ,\n                  'Golden State Warriors' ,\n                  'Houston Rockets' ,\n                  'Indiana Pacers' ,\n                  'Los Angeles Clippers' ,\n                  'Los Angeles Lakers' ,\n                  'Memphis Grizzlies' ,\n                  'Miami Heat',\n                  'Milwaukee Bucks' ,\n                  'Minnesota Timberwolves' ,\n                  'New Orleans Pelicans',\n                  'New York Knicks' ,\n                  'Oklahoma City Thunder' ,\n                  'Orlando Magic',\n                  'Philadelphia 76ers',\n                  'Phoenix Suns',\n                  'Portland Trail Blazers',\n                  'Sacramento Kings',\n                  'San Antonio Spurs',\n                  'Toronto Raptors',\n                  'Utah Jazz',\n                  'Washington Wizards']    \n\n    team_merge = pd.DataFrame(data={'Team_Short': teams, 'TEAM': team_name})\n    print(\"Pull today's players\")\n\n    nba_schedule = get_schedule(today_date.year, playoffs=False)[get_schedule(today_date.year, playoffs=False)['DATE'] == today_date]\n\n    ###Make list of all players playing today\n    today_teams = pd.DataFrame(index=[], columns=['TEAM'])\n    today_teams['TEAM'] = get_schedule(2021, playoffs=False)[get_schedule(2021, playoffs=False)['DATE'] == date.today()]['HOME'].append(get_schedule(2021, playoffs=False)[get_schedule(2021, playoffs=False)['DATE'] == date.today()]['VISITOR'])\n    today_teams = today_teams.merge(team_merge, on='TEAM', how='left') \n    #Gather player names\n    today_players = pd.DataFrame(index=[], columns=['PLAYER'])\n    for x in range(0, len(today_teams)):\n        #print(today_teams['Team_Short'][x])\n        temp_roster = get_roster(today_teams['Team_Short'][x], date.today().year)['PLAYER']\n        temp_roster = pd.DataFrame(temp_roster)\n        today_players= today_players.append(temp_roster)\n\n    today_players = today_players.reset_index().drop(['index'], axis = 1)\n    \n    today_players['Name'] = today_players['PLAYER']\n    for a in range(0,len(today_players)):\n        name = today_players['PLAYER'][a]\n        today_players['Name'][a] = ', '.join(reversed(name.split(' ')))\n        \n        \n    #get salary, pos\n    salary_pos = salary_pos_data(today_players, today_date, all_game_data)\n    \n    today_data = pd.merge(today_players, salary_pos, left_on=today_players['Name'].str.lower(), right_on=salary_pos['Name'].str.lower(), how = 'inner').reset_index().drop(['index'], axis = 1) \n    \n    today_data = today_data[['Name_x', 'DK Salary', 'Pos', 'Date']].rename(columns={\"Name_x\": \"Name\", \"DK Salary\": \"DK Salary\", \"Pos\": \"Pos\", 'Date' :'Date'})\n    today_data_final = pd.DataFrame()\n    for a in range(0,len(today_data)):\n        player_bucket = today_data[today_data['Name'] == today_data['Name'][a]].reset_index().drop(['index'], axis = 1)\n        player_bucket = player_bucket.sort_values('Date', ascending = False)\n        today_data_final = today_data_final.append(player_bucket.loc[0])\n        \n    today_data_final = today_data_final.drop_duplicates().reset_index().drop(['index'], axis = 1)\n    \n    return today_data_final","670d27d1":"#4. Load program (pulls salary and position data of players playing on selected date)\n\ndef salary_pos_data(today_players, today_date, all_game_data):\n    nba_schedule = get_schedule(today_date.year, playoffs=False)\n    #http:\/\/rotoguru1.com\/cgi-bin\/hyday.pl?mon=4&day=17&year=2021&game=dk\n\n    #salary\n    url_template = \"http:\/\/rotoguru1.com\/cgi-bin\/hstats.cgi?pos=0&sort=2&game=k&colA=0&daypt=0&xavg=3&show=2&fltr=00\"\n    request = requests.get(url_template)\n    soup = BeautifulSoup(request.text, 'lxml')\n    table = soup.findAll('pre')[0].text\n    read_csv = pd.read_csv(io.StringIO((table)), sep = ';')\n    read_csv = read_csv[['Pos', 'Team']]\n    read_csv = read_csv.rename(columns={\"Pos\": \"Name\", \"Team\": \"DK Salary\"})\n    \n    #positions\n    name_pos = all_game_data[['Name', 'Pos', 'Date']].drop_duplicates().reset_index().drop(['index'], axis = 1)\n    \n    #join them\n    joined_data = pd.merge(read_csv, name_pos, left_on=read_csv['Name'].str.lower(), right_on=name_pos['Name'].str.lower(), how = 'inner').reset_index().drop(['index'], axis = 1) \n    joined_data = joined_data[['Name_x', 'DK Salary', 'Pos', 'Date']].rename(columns={\"Name_x\": \"Name\", \"DK Salary\": \"DK Salary\", \"Pos\": \"Pos\", \"Date\" : 'Date'})\n    \n    return joined_data","c95f89f8":"#5. Load program (pulls historical fantasy scores, draft kings scores, salaries, minutes, position data of all players in the same season of the chosen date)\n#For example, if your chosen date was 4-20-2021, it will gather all historical data in the 2020-2021 season)\n\ndef pull_game_data(today_date):  \n    print('Pulling game data')\n    #https:\/\/github.com\/rogerfitz\/tutorials\/blob\/master\/draft-kings-history-scrape\/roto-guru.ipynb\n    nba_schedule = get_schedule(today_date.year, playoffs=False)\n    url_template = \"http:\/\/rotoguru1.com\/cgi-bin\/hyday.pl?mon=MONTH&day=DAY&year=YEAR&game=dk\"\n    #http:\/\/rotoguru1.com\/cgi-bin\/hyday.pl?mon=4&day=17&year=2021&game=dk\n    all_data=pd.DataFrame()\n\n    for game_date in nba_schedule['DATE'].unique():\n        #print(game_date)\n        game_date = pd.to_datetime(game_date)\n        if game_date > today_date:\n            next\n        day = str(game_date.day)\n        month = str(game_date.month)\n        year = str(game_date.year)\n        concat_url = url_template.replace(\"MONTH\",month).replace(\"YEAR\",year).replace('DAY', day)\n\n        request = requests.get(concat_url)\n        soup = BeautifulSoup(request.text, 'lxml')\n        table = soup.findAll('table')[9]\n\n        #1. Get player list\n        playerlist=[]\n        for a in table.findAll('a'):\n            player=a.text\n            if player not in ['Jump to:', 'Guards', 'Forwards', 'Centers', 'Unlisted']:\n                playerlist.append(player)\n        \n        #2. get draft kings points\n        dkpoints_sub = table.findAll('td', {'align': 'center'})\n        dk_points = []\n        for ele in dkpoints_sub:\n            try:\n                for a in ele:\n                    if a[0].isdigit():\n                        dk_points.append(a)\n                    if a[0] == '-':\n                        dk_points.append(a)\n            except:\n                pass\n        \n        #3. get salary\n        salary_sub = table.findAll('td', {'align': 'right'})\n        salary = []\n        for ele in salary_sub:\n            try:\n                for a in ele:\n                    if a[0] == '$' or 'N\/A' in a:\n                        salary.append(a)\n            except:\n                pass\n\n        #4. #get minutes\n        minutes_sub = table.findAll('td', {'align': 'right'})\n        minutes = []\n        for ele in minutes_sub:\n            try:\n                for a in ele:\n                    if ':' in a or 'DNP' in a or 'NA' in a:\n                        minutes.append(a)\n            except:\n                pass\n        \n        #5. Get positions\n        position_sub = table.findAll('td')\n        positions = []\n        for ele in position_sub:\n            try:\n                for a in ele:\n                    if a in ['PG', 'SG', 'PG\/SG','PG\/SF', 'PG\/PF', 'PG\/C' 'SG', 'SG\/SF', 'SG\/PF', 'SG\/C','SF', 'SF\/PF', 'SF\/C', 'PF','PF\/C', 'C', 'NA']:\n                        positions.append(a)\n            except:\n                pass\n\n        for x in range(0,len(positions)):\n            if x < len(positions)-1:\n                if positions[x] == 'NA' and positions[x+1] != 'NA':\n                    del positions[x]\n                if positions[x] == 'NA' and positions[x-1] != 'NA':\n                    del positions[x]\n            if x == len(positions)-1:\n                if positions[x] == 'NA' and positions[x-1] != 'NA':\n                    del positions[x]\n                    \n\n\n        player_data = pd.DataFrame()\n        #print(len(positions))\n        #print(len(dk_points))\n        #print(len(salary))\n        #print(len(minutes))\n        #print(len(playerlist))\n        \n        for x in range(len(positions),len(dk_points)):\n            bounds = [len(positions), len(dk_points)-1]\n            positions[bounds[0]:bounds[1] + 1] = ['NA'] * ((bounds[1] + 1) - bounds[0])\n\n        player_data['Pos'] = positions\n        player_data['DK Pts'] = dk_points\n        player_data['DK Salary'] = salary\n        player_data['Minutes'] = minutes\n        player_data['Name'] = playerlist\n        player_data['Date'] = game_date\n\n        all_data = pd.concat([all_data,player_data])\n        \n    all_data = all_data.reset_index().drop(['index'], axis = 1)\n    \n    #all_data = all_data[all_data['Date'].str.contains(\"file\") == False]\n    #all_data = all_data.dropna().reset_index().drop(['index'], axis = 1)\n    #table = soup.findAll('pre')[1].text\n    #read_csv = pd.read_csv(io.StringIO((table)), sep = ';')\n    #for x in range(0,len(all_data)):\n        #all_data['Date'][x] = pd.to_datetime(all_data['Date'][x], format='%Y%m%d')\n    \n    return all_data","e58b1635":"#6. Load program (organizes data we just pulled into feature data we will use to make fantasy predictions on players of chosen date)\n\ndef pull_today_feature_data(today_players, all_game_data, today_date):\n    #today_players\n    print('Pull today player feature data')\n\n    today_features = pd.DataFrame(index=[], columns=['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE', 'MIN_LAST_10_DAYS', 'MIN_LAST_30_DAYS', 'MIN_LAST_60_DAYS', 'MIN_ALL_AVERAGE'])\n    today_features['PLAYER'] = today_players['Name']\n    today_features['Position'] = today_players['Pos']\n    today_features['Salary'] = today_players['DK Salary']\n    for a in range(0, len(today_players['DK Salary'])):\n        if today_features['Salary'][a] != 'N\/A' and '$' in str(today_features['Salary'][a]):\n            today_features['Salary'][a] = int(today_players['DK Salary'][a].strip('$').replace(',',''))\n        if today_features['Salary'][a] == 'N\/A':\n            today_features['Salary'][a] = int(0)\n\n\n    #today_features['Minutes'] = pd.to_numeric(today_players['Minutes'])\n    #today_features['Draftkings_Actual_Score'] =  pd.to_numeric(today_players['DK Pts'])\n    today_features= today_features.reset_index().drop(['index'], axis = 1)\n    \n    today_features['DK_LAST_10_DAYS'] = ''\n    today_features['DK_LAST_30_DAYS'] = ''\n    today_features['DK_LAST_60_DAYS'] = ''\n    today_features['DK_ALL_AVERAGE'] = ''\n    \n    today_features['MIN_LAST_10_DAYS'] = ''\n    today_features['MIN_LAST_30_DAYS'] = ''\n    today_features['MIN_LAST_60_DAYS'] = ''\n    today_features['MIN_ALL_AVERAGE'] = ''\n\n    #Calculate feature data actual players\n    for player in range(0, len(today_features)):\n        #print(player, today_features['PLAYER'][player])\n        #print(player, \"\/\", len(today_features))\n        filter_player_data = all_game_data[all_game_data['Name']==today_features['PLAYER'][player]].reset_index().drop(['index'], axis = 1)[['Date', 'DK Pts', 'Minutes']]\n        filter_player_data['Minutes'] = pd.to_numeric(filter_player_data['Minutes'])\n        filter_player_data['DK Pts'] = pd.to_numeric(filter_player_data['DK Pts'])\n        #filter_player_data['Date'] = pd.to_datetime(today_players['Date'])\n        #filter_player_data = filter_player_data.dropna().reset_index().drop(['index'], axis = 1)\n        current_date = today_date\n        ten_day = current_date +timedelta(days=-10)\n        thirty_day = current_date +timedelta(days=-30)\n        sixty_day = current_date +timedelta(days=-60)\n\n\n        ten_bucket =  filter_player_data[(filter_player_data.Date >= ten_day) & (filter_player_data.Date < current_date)].reset_index()\n        thirty_bucket =  filter_player_data[(filter_player_data.Date >= thirty_day) & (filter_player_data.Date < current_date)].reset_index()\n        sixty_bucket =  filter_player_data[(filter_player_data.Date >= sixty_day) & (filter_player_data.Date < current_date)].reset_index()\n        all_bucket =  filter_player_data[(filter_player_data.Date < current_date)].reset_index()\n    \n\n        \n        today_features['DK_LAST_10_DAYS'][player] = ten_bucket['DK Pts'].mean()\n        today_features['DK_LAST_30_DAYS'][player] = thirty_bucket['DK Pts'].mean()\n        today_features['DK_LAST_60_DAYS'][player] = sixty_bucket['DK Pts'].mean()\n        today_features['DK_ALL_AVERAGE'][player] = all_bucket['DK Pts'].mean()    \n        \n        today_features['MIN_LAST_10_DAYS'][player] = ten_bucket['Minutes'].mean()\n        today_features['MIN_LAST_30_DAYS'][player] = thirty_bucket['Minutes'].mean()\n        today_features['MIN_LAST_60_DAYS'][player] = sixty_bucket['Minutes'].mean()\n        today_features['MIN_ALL_AVERAGE'][player] = all_bucket['Minutes'].mean()\n        \n    for a in today_features.columns[0:8]:\n        today_features[a] = pd.to_numeric(today_features[a])\n    \n    #today_features = today_features.dropna().reset_index().drop(['index'], axis = 1)\n        \n    return today_features ","4573c0ef":"#7. Load program (organizes historical data we just pulled into feature data we will use for to train the model for fantasy predictions)\n\ndef pull_historical_feature_data(all_game_data):\n    print('Pulling historical feature data for modeling')\n    #Collecting feature data for training\n    all_game_data['DK_LAST_10_DAYS'] = ''\n    all_game_data['DK_LAST_30_DAYS'] = ''\n    all_game_data['DK_LAST_60_DAYS'] = ''\n    all_game_data['DK_ALL_AVERAGE'] = ''\n\n    all_game_data['MIN_LAST_10_DAYS'] = ''\n    all_game_data['MIN_LAST_30_DAYS'] = ''\n    all_game_data['MIN_LAST_60_DAYS'] = ''\n    all_game_data['MIN_ALL_AVERAGE'] = ''    \n    \n    \n    #Calculate feature data for training\n    for a in range(0, len(all_game_data)):\n        #print(a, \"\/\", len(all_game_data))\n        #print(a, all_game_data['Name'][a])\n        filter_player_data = all_game_data[all_game_data['Name']==all_game_data['Name'][a]].reset_index()\n        filter_player_data['Minutes'] = pd.to_numeric(filter_player_data['Minutes'])\n        filter_player_data['DK Pts'] = pd.to_numeric(filter_player_data['DK Pts'])\n\n        current_date = all_game_data['Date'][a]\n        ten_day = current_date +timedelta(days=-10)\n        thirty_day = current_date +timedelta(days=-30)\n        sixty_day = current_date +timedelta(days=-60)\n\n\n        ten_bucket =  filter_player_data[(filter_player_data.Date >= ten_day) & (filter_player_data.Date < current_date)].reset_index()\n        thirty_bucket =  filter_player_data[(filter_player_data.Date >= thirty_day) & (filter_player_data.Date < current_date)].reset_index()\n        sixty_bucket =  filter_player_data[(filter_player_data.Date >= sixty_day) & (filter_player_data.Date < current_date)].reset_index()\n        all_bucket =  filter_player_data[(filter_player_data.Date < current_date)].reset_index()\n        \n        all_game_data['DK_LAST_10_DAYS'][a] = ten_bucket['DK Pts'].mean()\n        all_game_data['DK_LAST_30_DAYS'][a] = thirty_bucket['DK Pts'].mean()\n        all_game_data['DK_LAST_60_DAYS'][a] = sixty_bucket['DK Pts'].mean()\n        all_game_data['DK_ALL_AVERAGE'][a] = all_bucket['DK Pts'].mean()\n        \n        all_game_data['MIN_LAST_10_DAYS'][a] = ten_bucket['Minutes'].mean()\n        all_game_data['MIN_LAST_30_DAYS'][a] = thirty_bucket['Minutes'].mean()\n        all_game_data['MIN_LAST_60_DAYS'][a] = sixty_bucket['Minutes'].mean()\n        all_game_data['MIN_ALL_AVERAGE'][a] = all_bucket['Minutes'].mean()\n\n    #for a in all_game_data.columns[15:22]:\n        #all_game_data[a] = pd.to_numeric(all_game_data[a])\n        \n    all_game_data = all_game_data.dropna().reset_index().drop(['index'], axis = 1)\n    \n    return all_game_data ","72f62efe":"#8. Load program (XGBoost model, used to predict fantasy scores for players on chosen date)\n\ndef xgb_score(all_game_data):\n    print('Create xgb model')\n    #Split data into training and test sets\n    model_data = all_game_data.dropna().reset_index().drop(['index'], axis = 1)\n    all_game_data['Minutes'] = pd.to_numeric(all_game_data['Minutes'])\n    all_game_data['DK Pts'] = pd.to_numeric(all_game_data['DK Pts'])\n    model_data = all_game_data[all_game_data['DK Pts'] > 0].reset_index().drop(['index'], axis = 1)\n    X = model_data[['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE', 'MIN_LAST_10_DAYS', 'MIN_LAST_30_DAYS', 'MIN_LAST_60_DAYS', 'MIN_ALL_AVERAGE']] # put features in here\n    y = model_data['DK Pts']\n    \n    X = X.fillna(0)\n    y = y.fillna(0)\n    \n    #print(len(X))\n    #print(len(y))\n\n    #initialize XGBRegressor classf\n    xgb_model = xgb.XGBRegressor(\n        n_estimators=100,\n        reg_lambda=1,\n        gamma=0,\n        max_depth=3\n    )\n\n    #fit model to the training set\n    xgb_model.fit(X, y)\n    y_pred = xgb_model.predict(X)\n\n\n    plot_importance(xgb_model)\n    plt.show()\n    \n    a = np.array(y) # your x\n    b = np.array(y_pred) # your y\n    mses = np.mean((a - b)**2)\n    \n    return xgb_model, mses","5bc1f844":"#9. Load program (OLS model, used to predict fantasy scores for players on chosen date)\n\ndef ols_score(all_game_data):\n    print('Create ols model')\n    #Split data into training and test sets\n    model_data = all_game_data.dropna().reset_index().drop(['index'], axis = 1)\n    all_game_data['Minutes'] = pd.to_numeric(all_game_data['Minutes'])\n    all_game_data['DK Pts'] = pd.to_numeric(all_game_data['DK Pts'])\n    model_data = all_game_data[all_game_data['DK Pts'] > 0].reset_index().drop(['index'], axis = 1)\n    X = model_data[['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE', 'MIN_LAST_10_DAYS', 'MIN_LAST_30_DAYS', 'MIN_LAST_60_DAYS', 'MIN_ALL_AVERAGE']] # put features in here\n    y = model_data['DK Pts']\n    X = X.fillna(0)\n    y = y.fillna(0)\n\n    from statsmodels.api import OLS\n    ols_model = OLS(y,X).fit()\n    print(ols_model.summary())\n    \n    y_pred = ols_model.predict(X)\n    \n    a = np.array(y) # your x\n    b = np.array(y_pred) # your y\n    mses = np.mean((a - b)**2)\n    return ols_model, mses","8e658743":"#10. Load program (Linear optimization model, used to choose the combination of players that will yield the maximum total fantasy score possible based on predicted fantasy scores and player salaries for that chosen day)\n\ndef roster_optimize(today_features):\n    #https:\/\/towardsdatascience.com\/how-to-solve-optimization-problems-with-python-9088bf8d48e5\n    # Get a list of players\n    today_features = today_features[today_features['Salary']!='NaN'].reset_index().drop(['index'], axis = 1)\n    today_features = today_features[today_features['Position']!='NA'].reset_index().drop(['index'], axis = 1)\n    today_features = today_features[today_features['Salary']>0].reset_index().drop(['index'], axis = 1)\n    \n    players = list(today_features['PLAYER'])\n    # Initialize Dictionaries for Salaries and Positions\n    salaries = dict(zip(players, today_features['Salary']))\n    positions = dict(zip(players, today_features['Position']))\n    # Dictionary for Projected Score for each player\n    project_points = dict(zip(players, today_features['Predicted_Draftkings_Score']))\n    # Set Players to Take either 1 or 0 values (owned or not)\n    player_vars = LpVariable.dicts(\"Player\", players, lowBound=0, upBound=1, cat='Integer')\n    \n    total_score = LpProblem(\"Fantasy_Points_Problem\", LpMaximize)\n    total_score += lpSum([project_points[i] * player_vars[i] for i in player_vars])\n    total_score += lpSum([salaries[i] * player_vars[i] for i in player_vars]) <= 50000\n    \n    # Get indices of players for each position\n    pg = [p for p in positions.keys() if positions[p] == 'PG' or positions[p] == 'PG\/SG' or positions[p] == 'PG\/SF']\n    sg = [p for p in positions.keys() if positions[p] == 'SG' or positions[p] == 'PG\/SG' or positions[p] == 'SG\/SF']\n    sf = [p for p in positions.keys() if positions[p] == 'SF' or positions[p] == 'SG\/SF' or positions[p] == 'SF\/PF' or positions[p] == 'PG\/SF']\n    pf = [p for p in positions.keys() if positions[p] == 'PF' or positions[p] == 'PF\/C' or positions[p] == 'SF\/PF']\n    c = [p for p in positions.keys() if positions[p] == 'C' or positions[p] == 'PF\/C']\n    # Set Constraints\n    total_score += lpSum([player_vars[i] for i in pg]) == 2\n    total_score += lpSum([player_vars[i] for i in sg]) == 2\n    total_score += lpSum([player_vars[i] for i in sf]) == 2\n    total_score += lpSum([player_vars[i] for i in pf]) == 2\n    total_score += lpSum([player_vars[i] for i in c]) == 1\n    \n    total_score.solve()\n            \n    return total_score","5060544b":"#11. Load program (Outputs who the chosen players are, along with expected fantasy totals)\n\ndef export_results(total_score, today_features):\n    player_list = []\n    variable_list = []\n\n    lp_results = pd.DataFrame(index=[], columns=['Player', 'VarValue'])\n    for variable in total_score.variables():\n        player_list.append((variable.name.replace('Player_', '').replace('_', ' ')))\n        variable_list.append(variable.varValue)\n\n    final_data = pd.DataFrame(index=[], columns=['Player' 'VarValue'])\n    final_data['Player'] = player_list\n    final_data['VarValue'] = variable_list\n    final_data = pd.merge(final_data, today_features, left_on=final_data['Player'].str.lower(), right_on=today_features['PLAYER'].str.lower(), how = 'left').reset_index().drop(['index'], axis = 1) \n    \n    final_data = final_data[['Player', 'Position', 'Salary', 'VarValue', 'Predicted_Draftkings_Score']].sort_values('VarValue', ascending = False).reset_index().drop(['index'], axis = 1)\n    \n    #Chosen names and final score:\n    print('Chosen players: ')\n    for v in total_score.variables():\n        if v.varValue > 0:\n            print(v.name.replace('Player_', '').replace('_', ' '))\n    \n    print('Final Projected Score: ', pulp.value(total_score.objective))\n    \n    return final_data","748a7982":"#Use bottom code to work on improving score modeling, otherwise ignore","be81ca28":"import matplotlib.pyplot as plt\n\n# An \"interface\" to matplotlib.axes.Axes.hist() method\nplt.hist(x=model_data['DK Pts'], bins='auto', color='#0504aa',\n                            alpha=0.7, rwidth=0.85)","086efe15":"len(model_data)","6df3d78c":"np.percentile(model_data['DK Pts'], 50) # return 50th percentile, e.g median.\n","35c15119":"from numpy import mean, std\n\nprint('Mean: ',mean(model_data['DK Pts']), 'Std: ',std(model_data['DK Pts']), 'Min: ',min(model_data['DK Pts']), 'Max: ',max(model_data['DK Pts']))","2f397de5":"################ use this to edit xgb model, change up features, test significance, etc.:\n#Split data into training and test sets:\n\n#model_data = all_game_data_feature.dropna().reset_index().drop(['index'], axis = 1)\nmodel_data = all_game_data_feature[all_game_data_feature['DK Pts'] > 30]\nX = model_data[['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE', 'MIN_LAST_10_DAYS', 'MIN_LAST_30_DAYS', 'MIN_LAST_60_DAYS', 'MIN_ALL_AVERAGE']] # put features in here\n#X = all_game_data_feature[['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE']] # put features in here\n\ny = model_data['DK Pts']\n\n#create test groups\nX_train, X_test, y_train, y_test  = train_test_split(X, y)\nX_train = X_train.fillna(0)\ny_train = y_train.fillna(0)\nX_test = X_test.fillna(0)\ny_test = y_test.fillna(0)\n\n#initialize XGBRegressor class\n#https:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/\nregressor = xgb.XGBRegressor(\n    booster = 'gbtree', #gblinear\n    eta = 0.2,\n    n_estimators=100,\n    reg_lambda=1,\n    gamma=0,\n    max_depth=3\n)\n#fit model to the training set\nregressor.fit(X_train, y_train)\n#Create predictions\ny_pred = regressor.predict(X_test)\n#See which features most utilitized\nplot_importance(regressor)\nplt.show()\n#Check error\nprint(mean_squared_error(y_test, y_pred))\n","49191426":"# use this to edit ols model, change up features, test significance, etc.:\n#Split data into training and test sets\n\n#model_data = all_game_data_feature.dropna().reset_index().drop(['index'], axis = 1)\nmodel_data = all_game_data_feature[all_game_data_feature['DK Pts'] > 30]\nX = model_data[['DK_LAST_10_DAYS', 'DK_LAST_30_DAYS', 'DK_LAST_60_DAYS', 'DK_ALL_AVERAGE', 'MIN_LAST_10_DAYS', 'MIN_LAST_30_DAYS', 'MIN_LAST_60_DAYS', 'MIN_ALL_AVERAGE']] # put features in here\ny = model_data['DK Pts']\n#create test groups\nX_train, X_test, y_train, y_test  = train_test_split(X, y)\nX_train = X_train.fillna(0)\ny_train = y_train.fillna(0)\nX_test = X_test.fillna(0)\ny_test = y_test.fillna(0)\nfrom statsmodels.api import OLS\nols_model = OLS(y_train,X_train).fit()\nols_model.summary()\n#Create predictions\ny_pred = ols_model.predict(X_test)\n#Check error\nprint(mean_squared_error(y_test, y_pred))\n","6dd897a5":"**Intro:**\nThis is a program that uses BeautifulSoup (an HTML scraper package) to scrape fantasy basketball data, XGBoost and OLS models to predict what a player's fantasy score will be on a chosen day, and PuLP (linear optimization package) to choose the combination of players that will yield the maximum total fantasy score possible based on predicted fantasy scores and player salaries for that chosen day.","de81fa9d":"**Results: The program will output the following:**\n\n* Standard error for the model you choose (xgb or ols)\n* The players chosen by the program to feature in your fantasy lineup\n* The total projected fantasy score of these chosen players\n* A dataframe with all available players from a chosen day, and their projected fantasy scores\n\n![image.png](attachment:4cc55957-69da-4c10-ad43-234732d5917b.png)","d8f2301a":"**Instructions**:\n1. Run #1 cell to import required libraries (you may need to pip install install some of these libraries if you don't have them\n1. Then run cells #2-#11 below to initialize the necessary programs\n1. Finally, come back to the top and run cell #12\n\n**You will need to input 4 things:**\n1. Year (year of the date you want to an optimized lineup for - e.g for 4\/20\/2021 you input \"2021\")\n1. Month (month of the date you want to an optimized lineup for - e.g for 4\/20\/2021 you input \"4\")\n1. Day (day of the date you want to an optimized lineup for - e.g for 4\/20\/2021 you input \"20\")\n1. Model Choice (choose between \"xgb\" for the XGBoost model, or \"ols\" for the OLS model)\n\n\n*Notes*:\n* One of the packages I use (basketball_reference_scraper) doesn't work in the Kaggle python enviornment. To run correctly, please run this in a local jupyter notebook.\n* Still working on the roster optimiziation, as the program still has trouble dealing with flex positions"}}