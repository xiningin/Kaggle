{"cell_type":{"54d8196a":"code","c937df41":"code","beaecddd":"code","e7bf7924":"code","f8e2efdd":"code","75ab0f69":"code","4abf4774":"code","ca73ae40":"code","a354fc1f":"code","c8e0c734":"code","6de89d1a":"code","fa84723f":"code","f956fd3e":"code","048e2603":"code","110e260a":"code","045339ca":"code","59d0fbdf":"code","a94126c8":"code","b9b36a73":"code","a91824c6":"markdown","248b1863":"markdown","93e680b0":"markdown","cbeb6b2a":"markdown","48921feb":"markdown","1d9a2e3e":"markdown","796103a9":"markdown","ce692fcc":"markdown","f620d26d":"markdown"},"source":{"54d8196a":"import re\nimport pandas as pd\nimport matplotlib.pyplot as plt","c937df41":"class KaggleSurvey2021:\n    def __init__(self, csv_file_path: str) -> None:\n        \"\"\"\n        Args:\n            csv_file_path (str): Specify the file path of kaggle_survey_2021_responses.csv.\n        \"\"\"\n        self._first_two_lines = pd.read_csv(csv_file_path, nrows=1)\n        temp_df = pd.read_csv(csv_file_path, skiprows=[1], low_memory=False)\n        self._survey_data = temp_df.drop('Time from Start to Finish (seconds)', axis=1)\n    def generate_question_table(self) -> pd.DataFrame:\n        \"\"\"\n        Returns a DataFrame of question indexes, descriptions, and types.\n        \"\"\"\n        questions = self._first_two_lines.iloc[0, 1:]\n        question_indexes_str_split = self._first_two_lines.columns[1:].str.split(\"_\")\n        question_indexes = []\n        for question_index in question_indexes_str_split:\n            if len(question_index) == 1:\n                question_indexes.append(question_index[0])\n            elif question_index[1] in {\"A\", \"B\"}:\n                question_indexes.append(\"{}{}\".format(question_index[0], question_index[1]))\n            else:\n                question_indexes.append(question_index[0])\n        self._question_indexes = pd.Series(question_indexes)\n        unique_question_indexes = pd.Series(question_indexes).drop_duplicates().tolist()\n        multiple_selection_pattern = \" \\(Select all that apply\\).*\"\n        multiple_choice_pattern = \" - Selected Choice.*\"\n        questions_substituted = list()\n        for question in questions:\n            question_sub_multiple_selection_pattern = re.sub(pattern=multiple_selection_pattern, repl=\"\", string=question)\n            question_sub_multiple_choice_pattern = re.sub(pattern=multiple_choice_pattern, repl=\"\", string=question_sub_multiple_selection_pattern)\n            questions_substituted.append(question_sub_multiple_choice_pattern)\n        question_type_counts = dict()\n        for question in questions_substituted:\n            if question in question_type_counts.keys():\n                question_type_counts[question] += 1\n            else:\n                question_type_counts[question] = 1\n        question_table = pd.DataFrame()\n        question_table[\"question_index\"] = unique_question_indexes\n        question_table[\"question_description\"] = question_type_counts.keys()\n        question_table[\"question_type\"] = [\"multiple choice\" if v == 1 else \"multiple selection\" for v in question_type_counts.values()]\n        return question_table\n    def summarize_survey_response(self, question_index: str, order_by_value: bool=True, show_value_counts: bool=True) -> pd.Series:\n        \"\"\"\n        Returns a Series of question summaries in value counts or percentages.\n        Args:\n            question_index (str): Specify the question, e.g. 'Q1' for Question 1, 'Q27A' for Question 27-A.\n            order_by_value (bool): Sort by value vs. index.\n            show_value_counts (bool): Show value counts vs. percentage.\n        \"\"\"\n        columns = pd.Series(self._survey_data.columns)\n        question_index_columns = columns[self._question_indexes == question_index]\n        df_to_summarize = self._survey_data[question_index_columns]\n        response_summary = pd.Series(df_to_summarize.values.ravel()).value_counts().sort_values()\n        if not order_by_value:\n            response_summary = response_summary.sort_index()\n        if not show_value_counts:\n            response_summary = response_summary \/ response_summary.sum()\n        return response_summary\n    def plot_survey_summary(self, question_index: str, horizontal: bool=True, n: int=3) -> plt.figure:\n        \"\"\"\n        Plots a horizontal(default)\/vertical bar for a given question index.\n        Args:\n            question_index (str): Specify the question, e.g. 'Q1' for Question 1, 'Q27A' for Question 27-A.\n            horizontal (bool): Plot horizontal vs. vertical bar.\n            n (int): Highlight top n with red.\n        \"\"\"\n        fig = plt.figure()\n        axes = plt.axes()\n        if horizontal:\n            survey_response_summary = self.summarize_survey_response(question_index)\n            y = survey_response_summary.index\n            width = survey_response_summary.values\n            colors = ['c' for _ in range(y.size)]\n            colors[-n:] = list('r'*n)\n            axes.barh(y, width, color=colors)\n            axes.spines['right'].set_visible(False)\n            axes.spines['top'].set_visible(False)\n            axes.tick_params(length=0)\n        else:\n            survey_response_summary = self.summarize_survey_response(question_index, order_by_value=False)\n            x = survey_response_summary.index\n            height = survey_response_summary.values\n            colors = ['c' for _ in range(x.size)]\n            axes.bar(x, height, color=colors)\n            axes.spines['right'].set_visible(False)\n            axes.spines['top'].set_visible(False)\n            axes.tick_params(length=0)\n        question_table = self.generate_question_table()\n        nth_unique_question = question_table[question_table['question_index'] == question_index]\n        question_description = nth_unique_question['question_description'].values[0]\n        axes.set_title(question_description)\n        plt.show()","beaecddd":"csv_file_path = \"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\"\nkaggle_survey = KaggleSurvey2021(csv_file_path)","e7bf7924":"survey_question_table = kaggle_survey.generate_question_table()\nsurvey_question_table.head()","f8e2efdd":"survey_question_table.tail()","75ab0f69":"n_questions = survey_question_table.shape[0]\nquestion_summary = survey_question_table['question_type'].value_counts()\nn_multiple_choice = question_summary['multiple choice']\nn_multiple_selection = question_summary['multiple selection']\nprint(f\"There are {n_multiple_choice} multiple choices and {n_multiple_selection} multiple selections among {n_questions} questions.\")","4abf4774":"kaggle_survey.summarize_survey_response(\"Q1\", order_by_value=False)","ca73ae40":"kaggle_survey.summarize_survey_response(\"Q7\")","a354fc1f":"kaggle_survey.summarize_survey_response(\"Q8\", show_value_counts=False)","c8e0c734":"kaggle_survey.plot_survey_summary(\"Q1\", horizontal=False)","6de89d1a":"kaggle_survey.plot_survey_summary(\"Q7\", n=4)","fa84723f":"kaggle_survey.plot_survey_summary(\"Q24\")","f956fd3e":"kaggle_survey.plot_survey_summary(\"Q7\", n=4)","048e2603":"kaggle_survey.plot_survey_summary(\"Q8\")","110e260a":"kaggle_survey.plot_survey_summary(\"Q33\")","045339ca":"kaggle_survey.plot_survey_summary(\"Q14\", n=4)","59d0fbdf":"kaggle_survey.plot_survey_summary(\"Q35\", n=2)","a94126c8":"kaggle_survey.plot_survey_summary(\"Q16\", n=5)","b9b36a73":"kaggle_survey.plot_survey_summary(\"Q17\", n=4)","a91824c6":"## Conclusion\n\nThe notebook users have long been criticized for not writing re-usable code. In this notebook, we incorporate object-oriented programming. We are able to demonstrate how to conduct reproducible exploratory analysis by instantiating the `KaggleSurvey2021` class. If you also find it convenient, it is time to add some object-oriented flavor into your own notebook!\n\nThe `KaggleSurvey2021` module can be downloaded via Kaggle Datasets: <https:\/\/www.kaggle.com\/yaojenkuo\/ks2021py>.","248b1863":"## The `KaggleSurvey2021` class\n\nWe will define 3 major methods for the objects instantiated by `KaggleSurvey2021` class to analyze both survey responses and questions.\n\n1. The `generate_question_table()` method returns a dataframe that maps question indexes to their descriptions and question types.\n2. The `summarize_survey_response(question_index, order_by_value=True, show_value_counts=True)` method returns an aggregated summary of value counts for a given question index.\n3. The `plot_survey_summary(question_index, horizontal=True, n=3)` method plots a horizontal(default)\/vertical bar that illustrates the aggregated summary for a given question index.","93e680b0":"Call `summarize_survey_response(question_index, order_by_value=True, show_value_counts=True)` method for summary of a question. Specify `order_by_value=False` to order the summary regarding to categories. Specify `show_value_counts=False` to show value percentages given a multiple choice question.","cbeb6b2a":"## TL; DR\n\nThe Kaggle Survey 2021 data contains 369 columns with 51 questions combined with multiple choice and multiple selection questions. It is definitely painful and tedious to explore without the aids of re-usable codes like functions or classes. In this notebook, we define a class `KaggleSurvey2021` that is able to help us explore the Kaggle Survey 2021 data in a more structured way and shows how to conduct data analysis with object-oriented programming besides the traditional procedural programming approach.","48921feb":"## Analyzing Kaggle Survey in a More Structured Way\n\nYao-Jen Kuo from <yaojenkuo@datainpoint.com>","1d9a2e3e":"Call `generate_question_table()` method for a summary of Kaggle Survey 2021 questions.","796103a9":"## The Exploration\n\nWe would like to portrait the outlook of a data scientist\/analyst\/engineer by exploring the following questions:\n\n- Major responsibilty(Q24)\n- Programming languages(Q7, Q8)\n- Relational database management systems(Q33)\n- Visualization libraries(Q14)\n- Business intelligence tools(Q35)\n- Machine learning(Q16, Q17)","ce692fcc":"Call `plot_survey_summary(question_index, horizontal=True)` method to plot a horizontal bar for a question. Specify `horizontal=False` to plot a vertical bar.","f620d26d":"## The Usage\n\nWe can instantiate an object of `KaggleSurvey2021` class providing a valid file path of `kaggle_survey_2021_responses.csv`."}}