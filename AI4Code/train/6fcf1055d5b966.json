{"cell_type":{"e51b4420":"code","9c54b766":"code","7f311580":"code","1e233d12":"code","7c9a097b":"code","ede31510":"code","2143b0a5":"code","57dd93fd":"code","963bbaff":"code","91711ff9":"code","1d3d9a58":"code","8dd540be":"code","cbaaf541":"code","ffa31a9a":"code","c2bcef09":"code","c7f1ba0c":"code","1f3affbc":"code","d363e475":"markdown","702fb8ea":"markdown","f98459b5":"markdown","e0a9b814":"markdown","076c6979":"markdown","670d22e6":"markdown","54fe1861":"markdown","3cbd11a3":"markdown","7f5ff312":"markdown","13228f24":"markdown","12b4bc36":"markdown","e94d0a38":"markdown","3147d6ef":"markdown","5aca42b6":"markdown","23871993":"markdown","fd3530f6":"markdown"},"source":{"e51b4420":"import os \nimport pathlib\nfrom glob import glob \nos.environ[\"TF_CPP_MIN_LOG_LEVEL\"] = \"3\" #Remove tensorflow warnings","9c54b766":"!git clone https:\/\/github.com\/tensorflow\/models","7f311580":"!pip install --upgrade pip \n%cd models\/research\n!pip install --user protobuf\n!protoc object_detection\/protos\/*.proto --python_out=.\n%cd ..\n%cd ..","1e233d12":"!pip install --user cython \n!git clone https:\/\/github.com\/cocodataset\/cocoapi.git\n%cd cocoapi\/PythonAPI\n!make\n%cd ..\n%cd ..\n!cp -r cocoapi\/PythonAPI\/pycocotools models\/research\/","7c9a097b":"%cd models\/research\n!cp object_detection\/packages\/tf2\/setup.py .\n!python -m pip install .\n%cd ..\n%cd ..","ede31510":"%cd models\/research\n!python object_detection\/builders\/model_builder_tf2_test.py\n%cd ..\n%cd ..","2143b0a5":"%cd \/","57dd93fd":"!cp -r kaggle\/input\/one-piece-character-detection-with-tfrecords\/workspace kaggle\/working","963bbaff":"!cp -r kaggle\/input\/one-piece-character-detection-with-tfrecords\/workspace\/models\/myresnet_50 kaggle\/working","91711ff9":"%cd kaggle\/working","1d3d9a58":"!python \".\/workspace\/model_main_tf2.py\" \\\n--model_dir=\".\/myresnet_50\" \\\n--pipeline_config_path=\".\/workspace\/models\/myresnet_50\/pipeline_batch_size_8.config\"","8dd540be":"!python \".\/models\/research\/object_detection\/exporter_main_v2.py\" \\\n--input_type image_tensor \\\n--pipeline_config_path \".\/workspace\/models\/myresnet_50\/pipeline_batch_size_8.config\" \\\n--trained_checkpoint_dir \".\/myresnet_50\" \\\n--output_directory \".\/export-model\"","cbaaf541":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom object_detection.utils import label_map_util\nfrom object_detection.utils import visualization_utils as viz_utils\nfrom PIL import Image\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","ffa31a9a":"model = tf.saved_model.load(\".\/export-model\/saved_model\")","c2bcef09":"test_dir = \"..\/input\/one-piece-character-detection-with-tfrecords\/Test images\/Test images\"\ntest_filenames = glob(test_dir+\"\/*\")\nprint(f\"Test file names: {np.array(test_filenames)}\")","c7f1ba0c":"category_index = label_map_util.create_category_index_from_labelmap(\"..\/input\/one-piece-character-detection-with-tfrecords\/TFrecords\/TFrecords\/tf_label_map.pbtxt\",use_display_name=True)","1f3affbc":"predictions = []\n\nfor file in test_filenames:\n    #Read the image and create the input tensor\n    image = Image.open(file)\n    image_np = np.array(image)\n    filename = os.path.basename(file)\n    input_tensor = tf.convert_to_tensor(image_np)\n    input_tensor = np.expand_dims(image_np, 0)\n\n    #Make an inference\n    detections = model(input_tensor)\n    \n    #Get the results \n    num_detections = int(detections.pop(\"num_detections\"))\n    detections = {key: value[0, :num_detections].numpy()\n                   for key, value in detections.items()}\n    detections['num_detections'] = num_detections\n    \n    # detection_classes should be ints.\n    detections['detection_classes'] = detections['detection_classes'].astype(np.int64)\n    \n    image_np_with_detections = image_np.copy()\n    \n    print(\"--------------------------------------------\")\n    print(f\"File: {filename} \\n\")\n    \n    #Visualize the results\n    viz_utils.visualize_boxes_and_labels_on_image_array(\n          image_np_with_detections,\n          detections['detection_boxes'],\n          detections['detection_classes'],\n          detections['detection_scores'],\n          category_index,\n          use_normalized_coordinates=True,\n          max_boxes_to_draw=200,\n          min_score_thresh=.2,\n          agnostic_mode=False)\n\n    plt.figure()\n    plt.title(f\"{filename}\")\n    plt.imshow(image_np_with_detections)\n    \n    print('Done')\n    plt.show()","d363e475":"## Compile proto files\n\n> Note : upgrading pip before installing these packages resolves the issue raised [here](https:\/\/github.com\/tensorflow\/models\/issues\/10375)","702fb8ea":"## Verify the TensorFlow 2 Object Detection API installation (optional)","f98459b5":"## Predict an save the predictions","e0a9b814":"# Install the Object Detection API : inspired from [parthbkgadoya's notebook](https:\/\/www.kaggle.com\/parthbkgadoya\/tensorflow-object-detection-api-installation)","076c6979":"## Install the object detection api","670d22e6":"# Train the model \n\nThe dataset includes a set of useful tools, like a ready-to-use workspace which contains : \n- The resnet50 pre-trained model\n- The custom training pipeline suitable to our model \n- The training script from Tensorflow Object Detection API","54fe1861":"## Copy the input workspace files to the working directory \n\nNote : **For some reason, there seems to be an issue with the Kaggle permissions when running the training job with the files stored on the input folder**","3cbd11a3":"# Libraries","7f5ff312":"## Install the CocoAPI","13228f24":"## Load the exported model ","12b4bc36":"## Load the label map","e94d0a38":"## Download the models","3147d6ef":"## Train : batch size = 8","5aca42b6":"## Get the test files","23871993":"## Export the model","fd3530f6":"# Test the model (optional)"}}