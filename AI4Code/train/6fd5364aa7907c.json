{"cell_type":{"6af663cc":"code","a8693d82":"code","569df720":"code","9f3809d7":"code","587b3244":"code","c411ab43":"code","dab2225a":"code","d6b75b02":"code","38e7111d":"code","23af116f":"code","1e438af8":"code","68162f2e":"code","ae4af67e":"code","24e08f16":"code","c49ea4dd":"code","90e70dcc":"code","7022fa98":"code","73bf2c69":"code","d13ee7dd":"code","5e52904c":"code","c52794a3":"code","284098f5":"code","e38cba6f":"code","4aa56012":"code","fc62eee8":"code","6acb65a5":"code","39265ce5":"code","edf2fc9d":"code","026ae458":"code","3cefbce7":"code","32bbd0e5":"code","230d09ee":"code","9b75e87e":"code","23a12dff":"code","6fb712fa":"code","3f834e23":"code","b240c0fc":"code","c190beab":"code","e8d565e2":"code","8c0aef54":"code","48c55a4a":"code","8ab84b74":"code","914f0bfc":"code","61ffa815":"code","82b1bfb1":"code","1f238ffa":"code","f8f851ab":"code","0dcbd067":"code","647f9a51":"code","763df601":"code","9d92a371":"code","6fced910":"code","3405d7c5":"code","baebec2c":"code","1d493fbf":"code","1d187c2d":"code","5fcd8f5b":"code","c710fcdf":"code","c4c79452":"code","ca61f19e":"code","756d8262":"code","a479ffa2":"code","3cafafc9":"code","48ae59da":"code","4227c197":"code","8cd98cac":"code","c1a8182c":"code","246f7f0c":"code","016b0c22":"code","b450dd17":"code","061b24ac":"markdown","7cf23f43":"markdown","807cae26":"markdown","a6b39c66":"markdown","97009358":"markdown","0ae83747":"markdown","667b8db6":"markdown","618932f6":"markdown","e3cb0db5":"markdown","e1dd225c":"markdown","8b9f9aa7":"markdown","02704c6a":"markdown","eee130b1":"markdown","6124e803":"markdown","85c71e3d":"markdown","4532daba":"markdown","cd4fd30e":"markdown","d5181ace":"markdown","63d2493f":"markdown","5dc1215a":"markdown","3e7300e0":"markdown","9bf74b7e":"markdown","19a51144":"markdown","18ba96d0":"markdown","7a0207b1":"markdown","69d20b01":"markdown","74824ff8":"markdown","0c6c7f9b":"markdown","e718e476":"markdown","4af430ea":"markdown","c1b01333":"markdown","7828c6ec":"markdown","61df47c1":"markdown","49aed260":"markdown","bfca01fb":"markdown","02ad571f":"markdown","18f6df58":"markdown","4cd4fb1f":"markdown","febb2a59":"markdown","df68eaa5":"markdown","a845db6b":"markdown","b0072ba5":"markdown","cbc31755":"markdown","2cb95065":"markdown","5633f4ac":"markdown","25aa587d":"markdown","b398e782":"markdown","2b6aa015":"markdown","de1f603e":"markdown","7fe08df2":"markdown","efe36b02":"markdown","54da330b":"markdown","11564df7":"markdown","f6a92557":"markdown","7b455606":"markdown","fdcc4c7a":"markdown","958c36e3":"markdown","54b7e450":"markdown","f9579335":"markdown","6c20fe04":"markdown"},"source":{"6af663cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a8693d82":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_combined = pd.concat([df_train, df_test], sort=False)","569df720":"df_train.head()","9f3809d7":"df_train.describe()","587b3244":"df_test.head()","c411ab43":"df_test.describe()","dab2225a":"df_train[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","d6b75b02":"df_train[['Sex','Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","38e7111d":"df_train[['SibSp','Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","23af116f":"df_train[['Parch','Survived']].groupby(['Parch'], as_index=False).maean().sort_values(by=\"Survived\", ascending=False)","1e438af8":"df_train['Title'] = df_train['Name'].str.extract('([A-Za-z]+)\\.', expand=False)\npd.crosstab(df_train['Title'], df_train['Sex'])","68162f2e":"df_test['Title'] = df_test['Name'].str.extract('([A-Za-z]+)\\.', expand=False)","ae4af67e":"df_train['Title'] = df_train['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Jonkheer', 'Sir', 'Rev', 'Dona'], 'Rare')\ndf_train['Title'] = df_train['Title'].replace(['Lady', 'Countess', 'Mme'], 'Mrs')\ndf_train['Title'] = df_train['Title'].replace(['Ms', 'Mlle'], 'Miss')","24e08f16":"df_test['Title'] = df_test['Title'].replace(['Capt', 'Col', 'Don', 'Dr', 'Major', 'Jonkheer', 'Sir', 'Rev', 'Dona'], 'Rare')\ndf_test['Title'] = df_test['Title'].replace(['Lady', 'Countess', 'Mme'], 'Mrs')\ndf_test['Title'] = df_test['Title'].replace(['Ms', 'Mlle'], 'Miss')","c49ea4dd":"df_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","90e70dcc":"df_train['FamSize'] = df_train['Parch'] + df_train['SibSp'] + 1 \ndf_test['FamSize'] = df_test['Parch'] + df_test['SibSp'] + 1","7022fa98":"df_train.head()","73bf2c69":"df_train[['FamSize','Survived']].groupby(['FamSize'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","d13ee7dd":"df_train['IsAlone'] = df_train[\"FamSize\"].map(lambda s: 1 if s==1 else 0)\ndf_test['IsAlone'] = df_test[\"FamSize\"].map(lambda s: 1 if s==1 else 0)","5e52904c":"df_train[['IsAlone','Survived']].groupby(['IsAlone'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","c52794a3":"df_train[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","284098f5":"df_train['Fare'] = df_train['Fare'].fillna(df_train['Fare'].median())\ndf_test['Fare'] = df_test['Fare'].fillna(df_test['Fare'].median())","e38cba6f":"df_train['CategoricalFare'] = pd.qcut(df_train['Fare'], 10)\n# df_test['CategoricalFare'] = pd.qcut(df_test['Fare'], 10)","4aa56012":"print (df_train[['CategoricalFare','Survived']].groupby(['CategoricalFare'], as_index=False).mean().sort_values(by=\"Survived\", ascending=False))","fc62eee8":"age_median = df_combined['Age'].median()\n\nage_median","6acb65a5":"age_mean = df_combined['Age'].mean()\n\nage_mean","39265ce5":"age_std = df_combined['Age'].std()\n\nage_std","edf2fc9d":"age_null_count = df_train['Age'].isnull().sum()\n\nage_null_count","026ae458":"df_train['Age'] = df_train['Age'].fillna(age_median)\ndf_train['CategoricalAge'] = pd.cut(df_train['Age'], 8)\n\nprint (df_train[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean())","3cefbce7":"df_test['Age'] = df_test['Age'].fillna(age_median)\n# df_test['CategoricalAge'] = pd.cut(df_test['Age'], 8) # no 'cutting' on test data","32bbd0e5":"df_train['Title'] = df_train['Title'].map({\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 0}).astype(int)","230d09ee":"df_train.head()","9b75e87e":"df_test['Title'] = df_test['Title'].map({\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 0}).astype(int)","23a12dff":"df_test.head()","6fb712fa":"df_train['Sex'] = df_train['Sex'].map({'female' : 0, 'male' : 1}).astype(int)\ndf_train.head()","3f834e23":"df_test['Sex'] = df_test['Sex'].map({'female' : 0, 'male' : 1}).astype(int)\ndf_test.head()","b240c0fc":"df_train.loc[df_train['Embarked'] == 'Empty']\ndf_train['Embarked'] = df_train['Embarked'].fillna(\"Empty\")\n\ndf_train['Embarked'] = df_train['Embarked'].map({'S' : 0, 'C' : 1, 'Q' : 2, 'Empty' : 0}, na_action='ignore').astype(int)\n\ndf_train.head()","c190beab":"df_test['Embarked'] = df_test['Embarked'].fillna(\"Empty\")\ndf_test.loc[df_test['Embarked'] == 'Empty']\ndf_test['Embarked'] = df_test['Embarked'].map({'S' : 0, 'C' : 1, 'Q' : 2, 'Empty' : 0}, na_action='ignore').astype(int)\n\ndf_test.head()","e8d565e2":"df_train['CategoricalAge'] = 0\n\ndf_train.loc[df_train['Age']  <= 10.368, 'CategoricalAge'] = 0\ndf_train.loc[(df_train['Age']  > 10.368) & (df_train['Age'] <= 20.315), 'CategoricalAge'] = 1\ndf_train.loc[(df_train['Age']  > 20.315) & (df_train['Age'] <= 30.263), 'CategoricalAge'] = 2\ndf_train.loc[(df_train['Age']  > 30.263) & (df_train['Age'] <= 40.21), 'CategoricalAge'] = 3\ndf_train.loc[(df_train['Age']  > 40.21) & (df_train['Age'] <= 50.158), 'CategoricalAge'] = 4\ndf_train.loc[(df_train['Age']  > 50.158) & (df_train['Age'] <= 60.105), 'CategoricalAge'] = 5\ndf_train.loc[(df_train['Age']  > 60.105) & (df_train['Age'] <= 70.052), 'CategoricalAge'] = 6\ndf_train.loc[df_train['Age']  > 70.052, 'CategoricalAge'] = 7\n\ndf_train.head()","8c0aef54":"df_test['CategoricalAge'] = 0\n\ndf_test.loc[df_test['Age']  <= 10.368, 'CategoricalAge'] = 0\ndf_test.loc[(df_test['Age']  > 10.368) & (df_test['Age'] <= 20.315), 'CategoricalAge'] = 1\ndf_test.loc[(df_test['Age']  > 20.315) & (df_test['Age'] <= 30.263), 'CategoricalAge'] = 2\ndf_test.loc[(df_test['Age']  > 30.263) & (df_test['Age'] <= 40.21), 'CategoricalAge'] = 3\ndf_test.loc[(df_test['Age']  > 40.21) & (df_test['Age'] <= 50.158), 'CategoricalAge'] = 4\ndf_test.loc[(df_test['Age']  > 50.158) & (df_test['Age'] <= 60.105), 'CategoricalAge'] = 5\ndf_test.loc[(df_test['Age']  > 60.105) & (df_test['Age'] <= 70.052), 'CategoricalAge'] = 6\ndf_test.loc[df_test['Age']  > 70.052, 'CategoricalAge'] = 7\n\ndf_test.head()","48c55a4a":"df_train['CategoricalFare'] = 0\n\ndf_train.loc[df_train['Fare'] <= 7.55, 'CategoricalFare'] = 0\ndf_train.loc[(df_train['Fare'] > 7.55) & (df_train['Fare'] <= 7.854 ), 'CategoricalFare'] = 1\ndf_train.loc[(df_train['Fare'] > 7.854) & (df_train['Fare'] <= 8.05 ), 'CategoricalFare'] = 2\ndf_train.loc[(df_train['Fare'] > 8.05) & (df_train['Fare'] <= 10.5 ), 'CategoricalFare'] = 3\ndf_train.loc[(df_train['Fare'] > 10.5) & (df_train['Fare'] <= 14.454 ), 'CategoricalFare'] = 4\ndf_train.loc[(df_train['Fare'] > 14.454) & (df_train['Fare'] <= 21.679 ), 'CategoricalFare'] = 5\ndf_train.loc[(df_train['Fare'] > 21.679) & (df_train['Fare'] <= 27.0 ), 'CategoricalFare'] = 6\ndf_train.loc[(df_train['Fare'] > 27.0) & (df_train['Fare'] <= 39.688 ), 'CategoricalFare'] = 7\ndf_train.loc[(df_train['Fare'] > 39.688) & (df_train['Fare'] <= 77.958 ), 'CategoricalFare'] = 8\ndf_train.loc[df_train['Fare'] > 77.958, 'CategoricalFare'] = 9\n\ndf_train.head()","8ab84b74":"df_test['CategoricalFare'] = 0\n\ndf_test.loc[df_test['Fare'] <= 7.55, 'CategoricalFare'] = 0\ndf_test.loc[(df_test['Fare'] > 7.55) & (df_test['Fare'] <= 7.854 ), 'CategoricalFare'] = 1\ndf_test.loc[(df_test['Fare'] > 7.854) & (df_test['Fare'] <= 8.05 ), 'CategoricalFare'] = 2\ndf_test.loc[(df_test['Fare'] > 8.05) & (df_test['Fare'] <= 10.5 ), 'CategoricalFare'] = 3\ndf_test.loc[(df_test['Fare'] > 10.5) & (df_test['Fare'] <= 14.454 ), 'CategoricalFare'] = 4\ndf_test.loc[(df_test['Fare'] > 14.454) & (df_test['Fare'] <= 21.679 ), 'CategoricalFare'] = 5\ndf_test.loc[(df_test['Fare'] > 21.679) & (df_test['Fare'] <= 27.0 ), 'CategoricalFare'] = 6\ndf_test.loc[(df_test['Fare'] > 27.0) & (df_test['Fare'] <= 39.688 ), 'CategoricalFare'] = 7\ndf_test.loc[(df_test['Fare'] > 39.688) & (df_test['Fare'] <= 77.958 ), 'CategoricalFare'] = 8\ndf_test.loc[df_test['Fare'] > 77.958, 'CategoricalFare'] = 9\n\ndf_test.head()","914f0bfc":"drop_elements = ['Name', 'Ticket', 'Cabin', 'Age', 'Fare', 'Parch', 'SibSp', 'IsAlone']\ndf_train = df_train.drop(drop_elements, axis = 1)\ndf_test = df_test.drop(drop_elements, axis = 1)","61ffa815":"df_train.head()","82b1bfb1":"train = df_train.copy()\ntrain = train.drop('PassengerId', axis=1)\n\ntrain.head()","1f238ffa":"test = df_test.copy()\ntest = test.drop('PassengerId', axis=1)\n\ntest.head()","f8f851ab":"from sklearn.preprocessing import StandardScaler","0dcbd067":"X_train = train.drop('Survived', axis=1).astype(float)\ny_train = df_train['Survived']\n\nX_test = test.astype(float)","647f9a51":"scaler = StandardScaler()\nscaler.fit(X_train)","763df601":"X_train = scaler.transform(X_train)","9d92a371":"X_test = scaler.transform(X_test)","6fced910":"print (\"X_train shape: \", str(X_train.shape))","3405d7c5":"print (\"y_train shape: \", str(y_train.shape))","baebec2c":"print (\"X_test shape: \", str(X_test.shape))","1d493fbf":"# Machine Learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier","1d187c2d":"logreg = LogisticRegression(solver='lbfgs')\nlogreg.fit(X_train, y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) * 100, 3)\n\nacc_log","5fcd8f5b":"svc = SVC(gamma='scale')\nsvc.fit(X_train, y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 100, 3)\n\nacc_svc","c710fcdf":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100, 3)\n\nacc_knn","c4c79452":"gaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, y_train) * 100, 3)\n\nacc_gaussian","ca61f19e":"perceptron = Perceptron(max_iter=1000, tol=0.001)\nperceptron.fit(X_train, y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, y_train) * 100, 3)\n\nacc_perceptron","756d8262":"linear_svc = LinearSVC(max_iter=10000)\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, y_train) * 100, 3)\n\nacc_linear_svc","a479ffa2":"sgd = SGDClassifier(max_iter=10000, tol=0.001)\nsgd.fit(X_train, y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, y_train) * 100, 3)\n\nacc_sgd","3cafafc9":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 3)\n\nacc_decision_tree","48ae59da":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 3)\n\nacc_random_forest","4227c197":"MLP_clf = MLPClassifier(activation='tanh', solver='lbfgs', alpha=1e-7, hidden_layer_sizes=(50,50), random_state=1, warm_start=True)\nMLP_clf.fit(X_train, y_train)\nY_pred = MLP_clf.predict(X_test)\nacc_MLP_clf = round(MLP_clf.score(X_train, y_train) * 100, 3)\n\nacc_MLP_clf","8cd98cac":"adaboost = AdaBoostClassifier()\nadaboost.fit(X_train, y_train)\nY_pred = adaboost.predict(X_test)\nacc_adaboost = round(adaboost.score(X_train, y_train) * 100, 3)\n\nacc_adaboost","c1a8182c":"gboost = GradientBoostingClassifier()\ngboost.fit(X_train, y_train)\nY_pred = gboost.predict(X_test)\nacc_gboost = round(gboost.score(X_train, y_train) * 100, 3)\n\nacc_gboost","246f7f0c":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree', 'MLPClassifier', 'AdaBoostClassifier', 'GradientBoostingClassifier'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree, acc_MLP_clf, acc_adaboost, acc_gboost]})\nmodels.sort_values(by='Score', ascending=False)","016b0c22":"Y_pred = random_forest.predict(X_test)","b450dd17":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","061b24ac":"## 3.3. Survival rate by SibSp","7cf23f43":"## 7.1. Prepare Data for Scaling","807cae26":"### 8.2.7. Stochastic Gradient Descent (SGD)","a6b39c66":"### 8.2.2. Support Vector Machine (SVM)","97009358":"## 2. Open Dataset","0ae83747":"## 2.1. Browse through the training data","667b8db6":"### 8.2.9. Random Forest","618932f6":"Does travelling alone or in a group matter when it comes to survival?","e3cb0db5":"Is there any correlation between Parch and survival rate?","e1dd225c":"## 7.2. Import Scaling","8b9f9aa7":"## 1. Import Necessary Python Packages","02704c6a":"## 8.3. Consolidate Score from each model","eee130b1":"## 5.1. Map Title to Ordinal","6124e803":"## 5.4. Map CategoricalAge to Ordinal","85c71e3d":"## 5.5. Map Categorical Fare to Ordinal","4532daba":"## 4.5. Categorize Fare","cd4fd30e":"## 7.4. Check Data shape for sanity","d5181ace":"# 5. Data Cleaning","63d2493f":"### 8.2.1. Logistic Regression","5dc1215a":"## 9.1. Use the best classifier and prepare for Y_pred","3e7300e0":"# 4.1.1. Obtain Title from Name","9bf74b7e":"## 3.2. Survival rate by Sex (Gender)","19a51144":"## 3.1. Survival rate by Pclass","18ba96d0":"# 4. Feature Engineering","7a0207b1":"## 9. Submission","69d20b01":"Does port of embarkation matter when it comes to survival?","74824ff8":"# Titanic: Machine Learning from Disaster","0c6c7f9b":"### 8.2.10. Multi Layer Perceptron (Neural Networks)","e718e476":"## 3.4. Survival rate by Parch","4af430ea":"# 5.3. Map Embarked to Ordinal","c1b01333":"### 8.2.5. Perceptron","7828c6ec":"## 7.2.1. Consolidate Data","61df47c1":"Consolidate Title with modern sounding ones otherwise classify as Rare","49aed260":"## 8.1. Import Models","bfca01fb":"# 8. Classification","02ad571f":"## 9.2. Prepare submission.csv file","18f6df58":"## 5.2. Map Sex (Gender) to Ordinal","4cd4fb1f":"## 3. Feature Analysis","febb2a59":"Is there any relationship between Parch and survival rate?","df68eaa5":"## 4.6. Categorize Age","a845db6b":"# 4.1.3. Check survival rate","b0072ba5":"### 8.2.4. Gaussian Naive Bayes","cbc31755":"## 4.3. Survival rate by being a Sole or Group Traveller","2cb95065":"## 7.3. Perform Scaling","5633f4ac":"## 4.1. Survival rate by Title","25aa587d":"## 4.4. Survival rate by Embarked Port","b398e782":"Inspired by the following kernel(s):\n* https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","2b6aa015":"# 6. Feature Selection","de1f603e":"# 4.1.2. Consolidate Title","7fe08df2":"### 8.2.8. Decision Tree","efe36b02":"## 2.2. Browse through the test data","54da330b":"Is there any correlation between SibSp and survival rate?","11564df7":"## 4.2. Survival rate by Family Size","f6a92557":"### 8.2.3. k-Nearest Neighbor (kNN)","7b455606":"### 8.2.12. Gradient Boosting Classifier","fdcc4c7a":"### 8.2.11. AdaBoost Classifier","958c36e3":"Is there any correlation between Pclass and survival rate?","54b7e450":"### 8.2.6. Linear SVC","f9579335":"## 8.2. Training (fit) and Inference (predict)","6c20fe04":"# 7. Data Scaling"}}