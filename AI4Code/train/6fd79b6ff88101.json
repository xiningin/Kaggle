{"cell_type":{"5ff5bca3":"code","cb6df531":"code","9155fb5f":"code","23717f0b":"code","5ae5da72":"code","8c63790c":"code","c1dcc391":"code","7ace0cb6":"code","d9d82d63":"code","551852ac":"code","601dd7ae":"code","39e5af32":"code","66cf14bb":"code","5d473ddb":"code","15ffdc70":"code","749b2a08":"code","f0e7bf1a":"code","94dbdf5f":"code","a905a389":"markdown","1ed4ade7":"markdown","bee202c9":"markdown","9f43e51b":"markdown","a9ced97b":"markdown","11a91b9e":"markdown","6e12673e":"markdown","aadf3dcb":"markdown","fc416270":"markdown","d58ac694":"markdown","fb6f6d81":"markdown","2bcf1937":"markdown","7a7d8184":"markdown","05d71aff":"markdown","105839cf":"markdown"},"source":{"5ff5bca3":"#for file operations\nimport os\n\n#for converting lists into numpy arrays and to perform related operations on numpy arrays\nimport numpy as np\n\n#for image loading and processing\nimport cv2\nfrom PIL import Image\n\n#for data\/image visualization\nimport matplotlib.pyplot as plt\n\n#for splitting dataset\nfrom sklearn.model_selection import train_test_split\n\n#for building and training a CNN model\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nfrom keras.layers.normalization import BatchNormalization\n\nprint(\"Loaded all libraries\")","cb6df531":"os.listdir(\"..\/input\/\")","9155fb5f":"fpath = \"..\/input\/asl_alphabet_train\/asl_alphabet_train\/\"\ncategories = os.listdir(fpath)\nprint(\"No. of categories of images in the train set = \",len(categories))","23717f0b":"def load_images_and_labels(categories):\n    img_lst=[]\n    labels=[]\n    for index, category in enumerate(categories):\n        n = 0\n        for image_name in os.listdir(fpath+\"\/\"+category):\n            if n==100:\n                break\n            #load image data into an array\n            img = cv2.imread(fpath+\"\/\"+category+\"\/\"+image_name)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img_array = Image.fromarray(img, 'RGB')\n            \n            #data augmentation - resizing the image\n            resized_img = img_array.resize((200, 200))\n            \n            #converting the image array to numpy array before appending it to the list\n            img_lst.append(np.array(resized_img))\n            \n            #appending label\n            labels.append(index)\n            \n            n+=1\n    return img_lst, labels\n\nimages, labels = load_images_and_labels(categories)\nprint(\"No. of images loaded = \",len(images),\"\\nNo. of labels loaded = \",len(labels))\nprint(type(images),type(labels))","5ae5da72":"images = np.array(images)\nlabels = np.array(labels)\n\nprint(\"Images shape = \",images.shape,\"\\nLabels shape = \",labels.shape)\nprint(type(images),type(labels))","8c63790c":"def display_rand_images(images, labels):\n    plt.figure(1 , figsize = (15 , 10))\n    n = 0 \n    for i in range(4):\n        n += 1 \n        r = np.random.randint(0 , images.shape[0] , 1)\n        \n        plt.subplot(2, 2, n)\n        plt.subplots_adjust(hspace = 0.3 , wspace = 0.1)\n        plt.imshow(images[r[0]])\n        \n        plt.title('Assigned label : {}'.format(labels[r[0]]))\n        plt.xticks([])\n        plt.yticks([])\n        \n    plt.show()\n    \ndisplay_rand_images(images, labels)","c1dcc391":"#1-step in data shuffling\nrandom_seed = 101\n\n#get equally spaced numbers in a given range\nn = np.arange(images.shape[0])\nprint(\"'n' values before shuffling = \",n)\n\n#shuffle all the equally spaced values in list 'n'\nnp.random.seed(random_seed)\nnp.random.shuffle(n)\nprint(\"\\n'n' values after shuffling = \",n)","7ace0cb6":"#2-step in data shuffling\n\n#shuffle images and corresponding labels data in both the lists\nimages = images[n]\nlabels = labels[n]\n\nprint(\"Images shape after shuffling = \",images.shape,\"\\nLabels shape after shuffling = \",labels.shape)","d9d82d63":"#3-data normalization\n\nimages = images.astype(np.float32)\nlabels = labels.astype(np.int32)\nimages = images\/255\nprint(\"Images shape after normalization = \",images.shape)","551852ac":"display_rand_images(images, labels)","601dd7ae":"x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, random_state = random_seed)\n\nprint(\"x_train shape = \",x_train.shape)\nprint(\"y_train shape = \",y_train.shape)\nprint(\"\\nx_test shape = \",x_test.shape)\nprint(\"y_test shape = \",y_test.shape)","39e5af32":"display_rand_images(x_train, y_train)","66cf14bb":"model = Sequential()\n\n#1 conv layer\nmodel.add(Conv2D(filters = 16, kernel_size = 3, activation = \"relu\", input_shape = x_train.shape[1:]))\n\n#1 max pool layer\nmodel.add(MaxPooling2D(pool_size = 3))\n\n#2 conv layer\nmodel.add(Conv2D(filters = 32, kernel_size = 3, activation = \"relu\"))\n\n#2 max pool layer\nmodel.add(MaxPooling2D(pool_size = 3))\n\n#3 conv layer\nmodel.add(Conv2D(filters = 64, kernel_size = 3, activation = \"relu\"))\n\n#3 max pool layer\nmodel.add(MaxPooling2D(pool_size = 3))\n\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\n\n#1 dense layer\nmodel.add(Dense(1000, input_shape = x_train.shape, activation = \"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#2 dense layer\nmodel.add(Dense(500, activation = \"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#output layer\nmodel.add(Dense(29,activation=\"softmax\"))\n\nmodel.summary()","5d473ddb":"model.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","15ffdc70":"%%time\nmodel.fit(x_train, y_train, epochs=100, batch_size = 100)","749b2a08":"loss, accuracy = model.evaluate(x_test, y_test)\n\nprint(\"Loss = \",loss,\"\\nAccuracy = \",accuracy)","f0e7bf1a":"pred = model.predict(x_test)\n\npred.shape","94dbdf5f":"plt.figure(1 , figsize = (15, 10))\nn = 0 \n\nfor i in range(4):\n    n += 1 \n    r = np.random.randint(0, x_test.shape[0], 1)\n    \n    plt.subplot(2, 2, n)\n    plt.subplots_adjust(hspace = 0.3, wspace = 0.3)\n    \n    plt.imshow(x_test[r[0]])\n    plt.title('Actual = {}, Predicted = {}'.format(y_test[r[0]] , y_test[r[0]]*pred[r[0]][y_test[r[0]]]) )\n    plt.xticks([]) , plt.yticks([])\n\nplt.show()","a905a389":"- In this kernel I will define all the steps required for training the CNN model to detect ASL sign language from the given input i.e., palm images.\n- Aim of this kernel is make some complex steps simple for newbies to quickly understand the CNN concepts and its implementation.\n- **Please feel free to upvote the kernel if you find it helpful**.\n- Fork the code to modify and experiment with the code a bit.\n\n## Step 1 - Load all the required libraries\n\n- Added comments to explain which libraries are being used for what purpose","1ed4ade7":"- Compile the CNN model that we defined in the previous step","bee202c9":"## Step 4 - Build a CNN model and train it\n\n- Define layers in the CNN model","9f43e51b":"- Let's check how the loaded data in the numpy arrays look like by displaying them as images","a9ced97b":"## Step 2 - Load dataset\n\n- First check the data provided in the input folder","11a91b9e":"- Display and check how the images look after the changes made in the previous steps","6e12673e":"- Since this is a supervised learning approach to train the model we will have to label the images before giving it as input to the CNN model","aadf3dcb":"- Let's check what labels the CNN model has predicted by displaying the image and its labels","fc416270":"## Step 5 - Train the model","d58ac694":"- We will use data from train dataset to train the CNN model which we will be building in the succeeding steps","fb6f6d81":"- To give the labels and images data as input to the CNN model they have to be in numpy array format so we have to convert the lists initialized in the previous step to numpy arrays","2bcf1937":"- Split the dataset into 2 parts - train set, test set","7a7d8184":"## Step 3 - Prepare the data for training the CNN model\n\n- In the previous step we successfully loaded the images data into numpy array and labeled them.\n- Now in this step we have to ensure that we have data not only to train the model but also to test it.","05d71aff":"## Step 6 - Predict values using the trained model","105839cf":"- Check how the trained model is performing on the test dataset"}}