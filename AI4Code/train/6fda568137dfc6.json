{"cell_type":{"33898bcb":"code","e4768179":"code","31b6cf17":"code","1aa0913f":"code","32bde5d5":"code","b7c79a05":"code","2510048c":"code","c515759c":"code","77e85a42":"code","cd893a51":"code","18bc272b":"code","7032365e":"code","60d91cae":"code","46add5aa":"code","baac5ca0":"code","1f0c2e75":"code","b010c661":"code","2221bc86":"code","3993f382":"code","4e203bc2":"code","d940b95b":"code","040bc977":"code","2a0f7dd8":"code","a8b0c5fe":"code","bb1e0288":"code","3a1693b3":"code","0ed62c39":"code","cf754343":"code","8704b33a":"code","b90e0ca8":"code","bd4536ad":"code","f5b87ccb":"code","af9ee3e4":"code","f4dc8c2a":"code","afe85284":"markdown","8135b05d":"markdown","e5347fe3":"markdown","c5da99df":"markdown","93b2a5ec":"markdown","fea8441f":"markdown","915a11ef":"markdown","22e00988":"markdown","ac528402":"markdown","b32e3f8e":"markdown","18ae5646":"markdown","ddc3daec":"markdown","4808969e":"markdown","e7e9bb5b":"markdown","d0b99c75":"markdown","921bdd2c":"markdown","040bacda":"markdown","8b97fa3d":"markdown","39df6636":"markdown","ef2c1427":"markdown","e42319f3":"markdown","b3d06ef2":"markdown","37301473":"markdown","83046b04":"markdown","0409765c":"markdown","6a63d4b8":"markdown","09157f45":"markdown","10b79fff":"markdown","38cda92d":"markdown","31f4847d":"markdown","feadb3fb":"markdown","d20a36ce":"markdown","22ba1082":"markdown"},"source":{"33898bcb":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# warnings library\nimport warnings \nwarnings.filterwarnings('ignore') ## Ignore warning\n\n# importing os\nimport os ","e4768179":"## Importing the datasets\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","31b6cf17":"train.sample(5)","1aa0913f":"test.sample(5)","32bde5d5":"print (\"The shape of the train data is (row, column):\"+ str(train.shape))\nprint (train.info())\nprint (\"The shape of the test data is (row, column):\"+ str(test.shape))\nprint (test.info())","b7c79a05":"  %%HTML\n<div class='tableauPlaceholder' id='viz1629551466582' style='position: relative'><noscript><a href='#'><img alt='Analytics ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ti&#47;titanictest_16295514506040&#47;Analytics&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='titanictest_16295514506040&#47;Analytics' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ti&#47;titanictest_16295514506040&#47;Analytics&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='en-US' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1629551466582');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='1000px';vizElement.style.height='627px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='1000px';vizElement.style.height='627px';} else { vizElement.style.width='100%';vizElement.style.height='1377px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","2510048c":"## saving passenger id in advance in order to submit later. \npassengerid = test.PassengerId\n## We will drop PassengerID and Ticket since it will be useless for our data. \n#train.drop(['PassengerId'], axis=1, inplace=True)\n#test.drop(['PassengerId'], axis=1, inplace=True)\n\nprint (train.info())\nprint (\"*\"*40)\nprint (test.info())","c515759c":"# Let's write a functin to print the total percentage of the missing values.\n# This function takes a DataFrame(df) as input and returns two columns, total missing values and total missing values percentage\ndef missing_percentage(df):\n    total = df.isnull().sum().sort_values(ascending = False)\n    percent = round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100, 2)\n    return pd.concat([total, percent], axis=1, keys=['Total','Percent'])","77e85a42":"missing_percentage(train)","cd893a51":"missing_percentage(test)","18bc272b":"def percent_value_counts(df, feature):\n    \"\"\"This function takes in a dataframe and a column and finds the percentage of the value_counts\"\"\"\n    percent = pd.DataFrame(round(df.loc[:,feature].value_counts(dropna=False, normalize=True)*100,2))\n    ## creating a df with th\n    total = pd.DataFrame(df.loc[:,feature].value_counts(dropna=False))\n    ## concating percent and total dataframe\n\n    total.columns = [\"Total\"]\n    percent.columns = ['Percent']\n    return pd.concat([total, percent], axis = 1)","7032365e":"percent_value_counts(train, 'Embarked')","60d91cae":"train[train['Embarked'].isnull()]","46add5aa":"import matplotlib.ticker as ticker\n\nsns.set_style('darkgrid')\nax = plt.figure(figsize=(8,10))\nax = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=train)\nax.set_title(\"Training Set\", fontsize = 18)\nax.yaxis.set_major_locator(ticker.MultipleLocator(50))","baac5ca0":"#Assign the values\ntrain.at[61, 'Embarked'] = 'C'\ntrain.at[829, 'Embarked'] = 'C'\ntrain.iloc[[61, 829], :]","1f0c2e75":"missing_percentage(train)","b010c661":"test[test['Fare'].isnull()]","2221bc86":"sns.set_style('darkgrid')\nax = plt.figure(figsize=(8,20))\nax = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=test)\nax.set_title(\"Test Set\", fontsize = 14)\nax.yaxis.set_major_locator(ticker.MultipleLocator(10))","3993f382":"test['Fare'].fillna(12, inplace = True)","4e203bc2":"test.loc[test['PassengerId'] == 1044]","d940b95b":"missing_percentage(test)","040bc977":"percent_value_counts(train, 'Cabin')","2a0f7dd8":"percent_value_counts(test, 'Cabin')","a8b0c5fe":"train_cabin_check = train.copy()\n\n#Concat datasets into 1\ntrain_cabin_check.drop(['Survived'], axis = 1, inplace = True)\nfull_set = pd.concat([train_cabin_check, test], ignore_index = False)\n\n#Assign NULL values as 'N'\nfull_set['Cabin'].fillna('N', inplace=True)\npercent_value_counts(full_set, 'Cabin')","bb1e0288":"#Change all cabin numbers to only their first digit\nfull_set['Cabin'] = [i[0] for i in full_set['Cabin']]\n\npercent_value_counts(full_set, 'Cabin')","3a1693b3":"full_set.groupby(\"Cabin\")['Fare'].mean().sort_values()","0ed62c39":"def estimate_cabin(i):\n    cabin = 0\n    if i <= 16:\n        cabin = 'G'\n    elif i > 16 and i <= 25:\n        cabin = 'F'\n    elif i > 25 and i <= 37:\n        cabin = 'T'\n    elif i > 37 and i <= 47:\n        cabin = 'A'\n    elif i > 47 and i <= 54:\n        cabin = 'D'\n    elif i > 53 and i <= 54:\n        cabin = \"E\"\n    elif i > 54 and i <= 116:\n        cabin = 'E'\n    else:\n        cabin = \"B\"\n    return cabin","cf754343":"#Separate the passengers with N and other cabins\nN_Cabin = full_set.loc[full_set['Cabin'] == 'N']\nNless_Cabin = full_set.loc[full_set['Cabin'] != 'N']\n\n#Apply the function\nN_Cabin['Cabin'] = N_Cabin.Fare.apply(lambda x: estimate_cabin(x))\nN_Cabin","8704b33a":"#Join back the N and N-less cabins.\nfull_set = pd.concat([N_Cabin, Nless_Cabin], axis = 0)\nmissing_percentage(full_set)\n\n## PassengerId helps us separate train and test. \nfull_set.sort_values(by = 'PassengerId', inplace=True)\n\n#Save the survived column for replacing later\nsurvivors = train['Survived']\n\n## Separating train and test from full_set. \ntrain = full_set[:891]\ntest = full_set[891:]\ntrain['Survived'] = survivors\ntrain = train[['PassengerId','Survived','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked']]","b90e0ca8":"percent_value_counts(train, 'Cabin')","bd4536ad":"percent_value_counts(train, 'Age')","f5b87ccb":"percent_value_counts(test, 'Age')","af9ee3e4":"import seaborn as sns\npal = {'male':\"green\", 'female':\"Pink\"}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize = (10,8))\nax = sns.barplot(x = \"Sex\", \n                 y = \"Survived\", \n                 data=train, \n                 palette = pal,\n                 linewidth=5,\n                 order = ['female','male'],\n                 capsize = .05,\n\n                )\n\nplt.title(\"Survived\/Non-Survived Passenger Gender Distribution\", fontsize = 25,loc = 'center', pad = 40)\nplt.ylabel(\"% of passenger survived\", fontsize = 15, )\nplt.xlabel(\"Sex\",fontsize = 15);","f4dc8c2a":"pal = {1:\"seagreen\", 0:\"gray\"}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize = (10,8))\nax = sns.countplot(x = \"Sex\", \n                   hue=\"Survived\",\n                   data = train, \n                   linewidth=4, \n                   order = ['female', 'male'],\n                   palette = pal\n)\n\n## Fixing title, xlabel and ylabel\nplt.title(\"Passenger Gender Distribution - Survived vs Not-survived\", fontsize = 25, pad=40)\nplt.xlabel(\"Sex\", fontsize = 15);\nplt.ylabel(\"# of Passenger Survived\", fontsize = 15)\n\n## Fixing legends\nleg = ax.get_legend()\nleg.set_title(\"Survived\")\nlegs = leg.texts\nlegs[0].set_text(\"No\")\nlegs[1].set_text(\"Yes\")\nplt.show()","afe85284":"**NULL values makes up 77.10% and 78.23% in the 'Cabin' feature** within the train and test dataset respectively.\nThis is a large amount, so we have two choices going forward, to either drop the whole column or try and find a way to fill the blanks.\n\nFirst of all, let's combine the test and train dataset, since both of them have large amounts of missing values, and then assign a placeholder value for the missing values.","8135b05d":"Percentage value of 'N' stayed the same before and after the process, so there were no cabins that started with 'N' as their first character.","e5347fe3":"***\n## Part 1b. Loading The Datasets\nA big chunk of Data Science is data analyzing and drawing insights from it. Without clean and presentable data, or with a messy data this will be hard or the results gotten would be inaccurate. But for now, we are only loading the datasets, the cleaning will be done at a later part.","c5da99df":"Now there is quite a lot of missing\/NULL values in this dataset. Let's make an effort to fill some missing values in this dataset, starting with the 'Embarked' feature in the train dataset.","93b2a5ec":"***\n### 'Cabin' Feature\nBoth the train dataset and the test dataset has a lot of NULL values in them, in fact the majority of the data in this feature have NULL values.\n","fea8441f":"The 'Embarked' feature is now all filled","915a11ef":"The part we should pay attention to is the left most bar, the total survival rate of the passengers. This is an interactive Tableau dashboard, for example if we were to click on one of the genders in the Gender pie chart, it will filter the data so that only that certain category is used to visualize the data. \nFeel free to play around with the chart! Just click the highlighted part or the white part to go back to unfiltered data.\n\n**Now let's go through each category** and see how it affects the survival rate of the passengers.\n- **Fare** - There is a noticable difference of survival rate between the 0-20 bins and the 20-60 bins, but this might just be because childrens did not have to pay or had to pay a small fare for tickets, hence the very high number of data in the 0-20 bins as compared to the others, and the higher survival rate of young passengers in the 0-20 fare category. **But** there is also a significant difference in the survival rate starting from the 60+ category, be it with lower sample numbers, but this might mean that adult passengers who paid more had more priority.\n- **Port of embarkment** - Interestingly, passengers who embarked from Cherbough had a significantly higher survival rate than the passengers who embarked from the two other ports. Though we can see from the data, the ratio of higher-paying passengers to lower-paying passengers in the Cherbourg category is higher than the other two ports, this might have a correlation to the previously mentioned impact of fare.\n- **Age** - there were not a lot of children on board, but the survival rate of infants(0-5 age group) especially and kids\/teens(5-15) is equal\/higher to the adult's rate of survival.\n- **Gender** - The most impactful of all. A whopping difference of 55.31% in survival rate between female and males, with more females surviving. Anyone who had watched or heard about the Titanic disaster would know that they prioritize saving woman and children first, so this number was to be expected.","22e00988":"# Introductions\n***\nThis notebook is made by an aspiring data scientist, desperate for more knowledge. In this kernel we will be applying my statistical analysis, data prep, and machine learning skills. \n\nThere are 3 main goals to accomplish in this kernel : \n- <b>Do a statistical analysis<\/b> on which and how some groups survived more than others.\n- <b>Do Exploratory Data Analysis<\/b> (EDA) of this dataset to try to tell a story and provide insight.\n- <b>Predict<\/b> the passengers' probability of survival using machine learning models.\n\n![](https:\/\/i.morioh.com\/201016\/bfaa4504.webp)","ac528402":"# Part 2: Overview and Cleaning the Data\n***","b32e3f8e":"## 3a. Survival Rate: Genders\n***","18ae5646":"Now that all NULL values are replaced with 'N', let's figure out how to categorize these cabins to find the relation between cabin numbers and fares.\nAll of the cabins have one thing in common, they start with a single letter from the English alphabet and followed by some digits. Let's group these cabins by their first character then.","ddc3daec":"# Part 3 Visualization and Feature Relations\n***\nWe have gone through a brief visualization and analysis in section 1d, and we gained some assumptions on how each feature affects the passengers' survival rate, and how some features correlate with each other.\n\n**Assumptions:**\n- Gender: More female survived than male.\n- Pclass: Higher socio-economic status passengers have a higher survival rate than middle or lower socio-economic status passengers.\n- Age: Younger passengers have a higher survival rate than older passengers. \n- Fare: Passengers with higher fare have a higher survival rate than other passengers. This can be quite correlated with Pclass. \n\nNow, let's see how the features are related to each other by creating some visualizations. ","4808969e":"Now we can apply this function to all rows that has the value 'N' within the 'Cabin' column.","e7e9bb5b":"No more NULL or N values in the Cabin column, great.","d0b99c75":"***\n### 'Fare' Feature\nThere is one missing 'Fare' value in the test dataset, let's find it.","921bdd2c":"***\n### 'Embarked' Feature","040bacda":"# Part 1: Importing Necessary Libraries and Dataset \n***\n## Part 1a. Loading The Libraries\nPython provides many fantastic ready-to-use libraries for various use. \nWe will now import some libraries used to data wrangle, dataviz, and some machine learning libs.\n\n","8b97fa3d":"These are the samples of train and test dataset. Lets find out a bit more about the train and test dataset. \n","39df6636":"***\n### 'Age' Feature","ef2c1427":"***\n## Part 1c. An Overview of The Datasets\nThe data has been split into two datasets:\n- Training set (train.csv)","e42319f3":"The number of entries between columns in the datasets are uneven, this might could be caused by a few things: \n- Missing or Null values\n- Values intentionally left empty\n- Multiple entries within a category in one row\n***\n## Part 2b. Dealing with the missing values","b3d06ef2":"Mr. Thomas Storey has a Pclass value of 3, and boarded from Southampton('S'). Let's assign his fare value as somewhere inbetween 10 and 15.\n","37301473":"Notice that the data is already split into a train and a test dataset from the start. From my observations during my learning process, this will make the data easier to wrangle and process than splitting them using a test train split. With my measly experience, I highly recommend this method of data prep.","83046b04":"Approx. 20% of the age value is missing from both dataset. **BUT** since age seems like an important variable in deciding wether a passenger survives or not, it would be unwise to fill the missing values with it's mode, mean, or median. So we will train a machine learning model to try and impute these missing values, and so we will be leaving this column as it is for now and work on that later.","0409765c":"We can see that both passengers were female, had the same Pclass, paid the same fare, had the same ticket number, and the same cabin number. They were probably relatives, mother and daughter looking at the age disparity. \nBefore this, we have analyzed that **Fare** is not distributed evenly across the Embarkment feature, so we will refer to the **Fare** and **Pclass** distribution for the 'Embarkment' value of these two passengers.","6a63d4b8":"Great, now we have the average fare of each cabin category. We can now create a function to estimate the missing 'Cabin' values by each passengers' fare paid.","09157f45":"- Test set (test.csv)","10b79fff":"The bar plot above shows the survival rate distribution of female and male passengers. The x axis represents the **Sex** feature in the train dataset, and the y axis represents the % of **Passenger survived**. From this bar plot it can be seen that around 74% of the female passengers survived, while only around 19% of the male passengers survived.","38cda92d":"There are two NULL values in this feature(0.22%). Let's find out more about it by looking up other independent variables of the passengers with NULL Embarked values.","31f4847d":"This bar plot shows the distribution of passengers of each sexes that survived and did not survive. The number of survived female passengers amounted to around 230 survived while 70 did not survive, compared to the amount of survived male passengers amounted to around 110, while 480 did not survive.\n\n**CONCLUSION:** As expected, female passengers were prioritized over the male passengers, hence the huge discrepancy of survival rates between genders.","feadb3fb":"This passenger is missing the 'Fare' and 'Cabin' feature, but for now let's derive the fare he paid by his port of embarkment and his Pclass.","d20a36ce":"From the boxplot comparison, The value of 'C' has the closest average to 80, so we will be assigning 'C' as the two passengers' 'Embarkment' value.","22ba1082":"There quite a lot of NULL values in the dataset, especially in the cabin column, we'll fix that later.\n\n**So this dataset contains our target variables(passengers)**, along with their independent features(Gender, pclass, age, etc.) and most importantly their survival status(Also known as the ground truth from the Titanic tragedy).\n\nThe test set should be used to see how well our model performs on unseen data. When we say unseen data, we mean that the algorithm or machine learning models have no relation to the test data, as is often the case in real-life applications. This is the reason why it is better to have separate train and test datasets, so we can clean them separately and do a fair test. The set test does NOT include passengers' survival status, we are going to predict wether the tested passengers' survive or not, and the accuracy will be evaluated after we submit the results.\n\n\n**Now let's take a quick look at the features in this dataset**. There are some different variables included:\n***\n**Categorical:**\n- **Nominal**(Variables that contains more than two categories, but are not in an order.)\n    > - **Cabin**(B1, C34, D101, etc.)\n    > - **Embarked**(From which port they embarked)\n            C(Cherbourg)\n            Q(Queenstown) \n            S(Southampton)\n            \n- **Dichotomous**(Nominal variables with only two categories.)\n    > - **Sex**\n            Female\n            Male\n- **Ordinal**(Variables that contains more than two categories, but order matters.)\n    > - **PClass**(Passenger class, representing the passengers' socioeconomics status.)\n            1(Upper class)\n            2(Middle class)\n            3(Lower class)\n\n***\n**Numeric:**\n- **Discrete**\n  >  - **Passenger ID**(Unique identifing # for each passenger)\n  >  - **SibSp**(Number of siblings or spouses aboard)\n  >  - **Parch**(Number of parents or child aboard)\n  >  - **Survived** (Our outcome or dependent variable)\n  \n- **Continous**\n  >  - **Age**\n  >  - **Fare**\n\n\n***\n**Text Variable**\n - **Ticket** (Ticket number for passenger.)\n - **Name**(  Name of the passenger.) \n***\n## Part 1d. DataViz using Tableau\nI have made a tableau visualization of the training data. This visualization will be most helpful to give us insights and analyze the data more clearly.\n"}}