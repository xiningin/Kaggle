{"cell_type":{"66c0b4ad":"code","7e3936d4":"code","82f7c537":"code","638edf8d":"code","c3674767":"code","b4d8aa06":"code","83707e46":"code","5be7e201":"code","127f33bf":"code","e9fbe246":"code","48b57eda":"code","e8b0af92":"code","f18f3a33":"code","7ed536d3":"code","1730f286":"code","b1cd2707":"code","e18e637b":"code","780eae2e":"code","22626550":"code","8d6dd04d":"code","f3b62bce":"code","efc1213f":"code","c64dc09c":"code","fd84bc93":"code","585c8ece":"markdown","b1eb4296":"markdown","7a7c3248":"markdown","c5a00932":"markdown"},"source":{"66c0b4ad":"# Importing all necessary libraries.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","7e3936d4":"df = pd.read_csv('..\/input\/drugdrug-interactions\/drug-drug interactions network data.csv')","82f7c537":"df.head()","638edf8d":"df.info()","c3674767":"df.describe()","b4d8aa06":"df2 = df.drop(columns=['Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10', 'Unnamed: 11', 'Unnamed: 12', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15'])","83707e46":"df2.head()","5be7e201":"df2.isnull().sum()","127f33bf":"df2.groupby(['ZINC_ID'])['xLogP'].max()","e9fbe246":"# Using the Lipinski Rule to sort through unnecessary compounds.\ndf3 = df2.loc[df2['Molecular Weight'] < 500]\ndf4 = df3.loc[df2['H Donors'] < 5]\ndf5 = df4.loc[df2['H Donors'] < 10]\ndf6 = df5.loc[0 < df2['xLogP']]\ndf7 = df6.loc[df2['xLogP'] < 5]","48b57eda":"df7.head()","e8b0af92":"df7.info()","f18f3a33":"df7.describe()","7ed536d3":"X = df7.iloc[:, 1:8].values\nfrom sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(X)","1730f286":"X","b1cd2707":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(X)","e18e637b":"principalComponents","780eae2e":"PCA_dataset = pd.DataFrame(data = principalComponents, columns = ['Component 1', 'Component 2'] )\nPCA_dataset.head()","22626550":"component1 = PCA_dataset['Component 1']\ncomponent2 = PCA_dataset['Component 2']","8d6dd04d":"plt.figure()\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\nplt.title('2 Component PCA')\nplt.scatter(PCA_dataset['Component 1'], PCA_dataset['Component 2'], c = 'red', s=50)","f3b62bce":"import scipy.cluster.hierarchy as sch\ndendrogram = sch.dendrogram(sch.linkage(principalComponents, method = 'ward'))\nplt.title('Dendrogram')\nplt.xlabel('Compounds')\nplt.ylabel('Euclidean distances')\nplt.show()","efc1213f":"from sklearn.cluster import DBSCAN\nmodel = DBSCAN(eps = 0.25, min_samples=4, metric='euclidean').\\\nfit(principalComponents)\nmodel","c64dc09c":"from collections import Counter\noutliers_df = PCA_dataset[model.labels_ == -1]\nclusters_df = PCA_dataset[model.labels_ != -1]\ncolors = model.labels_\ncolors_clusters = colors[colors != -1]\ncolors_outliers = 'black'\nclusters = Counter(model.labels_)\nprint(clusters)\nprint(PCA_dataset[model.labels_ == -1].head())\nprint(\"Number of clusters = {}\".format(len(clusters)-1))","fd84bc93":"fig = plt.figure()\n\nax = fig.add_axes([1,1,1,1])\n\nax.scatter(clusters_df['Component 1'], clusters_df['Component 2'], \n                      c = colors_clusters, edgecolors='black', s=50)\n\nax.scatter(clusters_df['Component 1'], clusters_df['Component 2'], \n                      c = colors_outliers, edgecolors='black', s=50)\n\nax.set_xlabel('Principal Component 1', family='Arial', fontsize=9)\nax.set_ylabel('Principal Component 2', family='Arial', fontsize=9)\n\nplt.title('Clustered Compounds', family='Arial', fontsize=12)\n\nplt.grid(which = 'major', color = '#cccccc', alpha=0.45)\n\nplt.show()","585c8ece":"# Standard Scaling and PCA","b1eb4296":"# Importing Libraries","7a7c3248":"# Data","c5a00932":"# DBSCAN"}}