{"cell_type":{"0329d1d3":"code","586d61e0":"code","b2a2ddeb":"code","586c4363":"code","3c5dcdde":"code","f23a58d6":"code","dcdbeac8":"code","8b7bd010":"code","9ab1710f":"code","ad30ba4a":"code","eae62f16":"code","01b44aac":"code","204149a8":"code","12e6fb33":"code","dfeb465e":"code","16d60ee5":"code","792768f3":"code","983908a2":"code","96f0ed6d":"code","7c5c9532":"code","24139845":"code","ca6f2b54":"code","bcbf8ec1":"code","a02e709b":"code","cc9ff85a":"code","c6481142":"code","1915b3b4":"code","2cde7f8d":"code","de4bacdd":"code","8f675dad":"code","6164f636":"code","1fca750e":"code","f690f888":"code","63ca2742":"code","dd94bb2f":"code","cc3418d7":"code","80a331fc":"code","0c438f96":"code","4c486806":"code","f284b4ca":"code","1a739097":"code","607422e0":"code","6e910a56":"code","168d9053":"code","b0f95678":"code","d40ce83f":"code","2cc659ae":"code","6b11c04b":"code","f2c644f5":"code","ad1299a3":"code","47fd04e4":"code","c56bb420":"code","8546d2f9":"code","bda1d97e":"code","abb64c24":"code","08d5da21":"code","f54d11e4":"code","277eb739":"code","83df7bbd":"code","47d72ea8":"code","8fc4fb8e":"code","72b8a10c":"code","22cf3fdf":"code","56f3a20f":"code","8a37ef08":"code","579e6857":"code","9b9fedca":"code","6991bcd4":"code","f3341b1d":"code","4fa52893":"code","82ba4f74":"code","05cd92fe":"code","55eed49a":"code","b1b24004":"code","4b4908db":"code","cd8be461":"code","f3ff2f35":"code","0887cea1":"code","fe5db631":"code","64d62ed3":"code","49a10106":"code","ac8a299b":"code","d5e898e4":"code","2c5d038f":"code","0e1a87cc":"code","279d9365":"code","468db412":"code","52beee0c":"code","69857801":"code","162eb282":"markdown","57f8953e":"markdown","c787687f":"markdown","5e4a9ab1":"markdown","6d77432f":"markdown","56ef6d35":"markdown","602ef894":"markdown","fc294390":"markdown","ddf948e9":"markdown","925c0097":"markdown","3fc6a23c":"markdown","87c6a073":"markdown","fc089bd5":"markdown","c50efd8b":"markdown","ce0f5709":"markdown","c9e49c1a":"markdown","41ef1ca4":"markdown","c0a35e92":"markdown","ecd26b34":"markdown","1b971460":"markdown","18007879":"markdown","c06f789c":"markdown","48376a29":"markdown","ea4b370f":"markdown","9d6d419a":"markdown","e210c458":"markdown","c14a72e2":"markdown","7064cc26":"markdown","a1abcaf0":"markdown","cefac64c":"markdown","1e52d368":"markdown","e59e4b90":"markdown","54f11bff":"markdown","5fb6993f":"markdown","17747ff5":"markdown","63d31f48":"markdown","d7fcf788":"markdown","7f23bbae":"markdown","44bcabdb":"markdown","73f4e3b9":"markdown","700fa40f":"markdown","897458d6":"markdown","9fa40589":"markdown","31f5f9a1":"markdown","ff31b870":"markdown","62dffe0a":"markdown","3d0ffe74":"markdown","57b99e9b":"markdown","851e0b8b":"markdown","ba4e5e7e":"markdown","52af1c46":"markdown","f7a482e9":"markdown","8ec09dfc":"markdown","fb47b94a":"markdown","a3b1bf70":"markdown","a27b11c2":"markdown","6684b243":"markdown","028a75a5":"markdown","f71d0848":"markdown","9836c535":"markdown","e9589513":"markdown","5034808f":"markdown","c007f6c4":"markdown","ad42bceb":"markdown","25992b26":"markdown","431eb7ec":"markdown","a431f701":"markdown","a525793d":"markdown"},"source":{"0329d1d3":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport squarify\nimport plotly.offline as py\nimport plotly_express as px\nimport plotly.io as pio\n#pio.renderers.default = 'browser'\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')","586d61e0":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/09-26-2020.csv')","b2a2ddeb":"#Rename Country\/Region to Country_Region\nconfirmed_df.rename(columns={\"Country\/Region\": \"Country_Region\"}, inplace=True)\ndeaths_df.rename(columns={\"Country\/Region\": \"Country_Region\"}, inplace=True)\nrecovered_df.rename(columns={\"Country\/Region\": \"Country_Region\"}, inplace=True)\n\n#Changing the Country names\nconfirmed_df.loc[confirmed_df['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\nrecovered_df.loc[recovered_df['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\ndeaths_df.loc[deaths_df['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\nlatest_data.loc[latest_data['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\n\n#Group by Country\ndf1 = confirmed_df.groupby('Country_Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country_Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country_Region').sum().reset_index()\n\n\n#Melting confirm,death and recovered dateframe\nworld_confirmed_df =df1.melt(id_vars=['Country_Region', 'Lat', 'Long'], value_vars=df1.columns[4:], var_name='Date', value_name='Confirmed')\nworld_deaths_df = df2.melt(id_vars=['Country_Region','Lat', 'Long'], value_vars=df2.columns[4:], var_name='Date', value_name='Deaths')\nworld_recovered_df = df3.melt(id_vars=['Country_Region', 'Lat', 'Long'], value_vars=df3.columns[4:], var_name='Date', value_name='Recovered')\n\n#Drop Lat & Long\nworld_confirmed_df.drop(['Lat', 'Long'], inplace=True, axis=1)\nworld_deaths_df.drop(['Lat', 'Long'], inplace=True, axis=1)\nworld_recovered_df.drop(['Lat', 'Long'], inplace=True, axis=1)\n\n#Merging confirm,death and recovered dateframe\nworld_covid_df = world_confirmed_df.merge(world_recovered_df, on=['Country_Region','Date'])\nworld_covid_df = world_deaths_df.merge(world_covid_df, on=['Country_Region','Date'])\nworld_covid_df['Date'] = pd.to_datetime(world_covid_df['Date'],\n                              format='%m\/%d\/%y')\n#.dt.date\n\n#Add New Cases\nworld_covid_df['Active']=world_covid_df['Confirmed']-world_covid_df['Recovered']-world_covid_df['Deaths']\nworld_covid_df['Active'] = world_covid_df['Active'].astype(int)\n\n#Add Active Cases\nworld_covid_df['Prev_Confirmed'] = world_covid_df.groupby('Country_Region')['Confirmed'].shift(1)\nworld_covid_df['New Cases'] = world_covid_df['Confirmed'] - world_covid_df['Prev_Confirmed']\nworld_covid_df.drop('Prev_Confirmed',inplace = True,axis=1)\nworld_covid_df['New Cases'].fillna(0, inplace=True)\n\n#Add New Recovered Cases\nworld_covid_df['Prev_Recovered'] = world_covid_df.groupby('Country_Region')['Recovered'].shift(1)\nworld_covid_df['New Recovered'] = world_covid_df['Recovered'] - world_covid_df['Prev_Recovered']\nworld_covid_df.drop('Prev_Recovered',inplace = True,axis=1)\nworld_covid_df['New Recovered'].fillna(0, inplace=True)\n\n#Add New Deaths Cases\nworld_covid_df['Prev_Deaths'] = world_covid_df.groupby('Country_Region')['Deaths'].shift(1)\nworld_covid_df['New Deaths'] = world_covid_df['Deaths'] - world_covid_df['Prev_Deaths']\nworld_covid_df.drop('Prev_Deaths',inplace = True,axis=1)\nworld_covid_df['New Deaths'].fillna(0, inplace=True)","586c4363":"#Data Type change into integer\nworld_covid_df['New Deaths'] = world_covid_df['New Deaths'].astype(int)\nworld_covid_df['New Cases'] = world_covid_df['New Cases'].astype(int)\nworld_covid_df['New Recovered'] = world_covid_df['New Recovered'].astype(int)","3c5dcdde":"#Slice Data Deaths,Recovered\nday_wise_covid = pd.DataFrame(df1.iloc[:,3:].sum(axis = 0, skipna=True))\nday_wise_covid['Deaths'] = pd.DataFrame(df2.iloc[:,3:].sum(axis = 0, skipna=True))\nday_wise_covid['Recovered'] = pd.DataFrame(df3.iloc[:,3:].sum(axis = 0, skipna=True))\n\n#Add Active Cases\nday_wise_covid.rename(columns = {0:'Confirmed'}, inplace = True) \nday_wise_covid['Active']=day_wise_covid['Confirmed']-day_wise_covid['Recovered']-day_wise_covid['Deaths']\nday_wise_covid['Active'] = day_wise_covid['Active'].astype(int)\n\n#Reset Index & set Date\nday_wise_covid.reset_index(inplace=True)\nday_wise_covid.rename(columns = {'index':'Date'}, inplace = True) \nday_wise_covid['Date'] = pd.to_datetime(day_wise_covid['Date'],\n                              format='%m\/%d\/%y').dt.date\n                    \n#Add New Cases                    \nday_wise_covid['Prev_Confirmed'] = day_wise_covid['Confirmed'].shift(1)\nday_wise_covid['New Cases'] = day_wise_covid['Confirmed'] - day_wise_covid['Prev_Confirmed']\nday_wise_covid.drop('Prev_Confirmed',inplace = True,axis=1)\nday_wise_covid['New Cases'].fillna(0, inplace=True)\n\n#Add New Recovered  \nday_wise_covid['Prev_Recovered'] = day_wise_covid['Recovered'].shift(1)\nday_wise_covid['New Recovered'] = day_wise_covid['Recovered'] - day_wise_covid['Prev_Recovered']\nday_wise_covid.drop('Prev_Recovered',inplace = True,axis=1)\nday_wise_covid['New Recovered'].fillna(0, inplace=True)\n\n#Add New Deaths \nday_wise_covid['Prev_Deaths'] = day_wise_covid['Deaths'].shift(1)\nday_wise_covid['New Deaths'] = day_wise_covid['Deaths'] - day_wise_covid['Prev_Deaths']\nday_wise_covid.drop('Prev_Deaths',inplace = True,axis=1)\nday_wise_covid['New Deaths'].fillna(0, inplace=True)\n\n#Add Deaths\/Recovered, Mortality Rate and Recovered_Rate(per 100)\nday_wise_covid[\"Mortality Rate(per 100)\"] = np.round(100*day_wise_covid[\"Deaths\"]\/day_wise_covid[\"Confirmed\"],2)\nday_wise_covid[\"Recovered Rate(per 100)\"] = np.round(100*day_wise_covid[\"Recovered\"]\/day_wise_covid[\"Confirmed\"],2)\nday_wise_covid[\"Deaths\/Recovered(per 100)\"] = np.round(100*day_wise_covid[\"Deaths\"]\/day_wise_covid[\"Recovered\"],2)\n#day_wise_covid.isnull().sum()\n\n#day_wise_covid['Mortality Rate(per 100)'] = day_wise_covid['Deaths_Rate(per 100)'].replace(np.nan, 0)\n#day_wise_covid['Recovered_Rate(per 100)'] =day_wise_covid['Recovered_Rate(per 100)'].replace(np.nan, 0)\n#day_wise_covid['Deaths\/Recovered(per 100)'] = day_wise_covid['Deaths\/Recovered(per 100)'].replace(np.nan, 0)\n#day_wise_covid.isnull().sum()\n","f23a58d6":"#Data Type change into integer\nday_wise_covid['New Deaths'] = day_wise_covid['New Deaths'].astype(int)\nday_wise_covid['New Cases'] = day_wise_covid['New Cases'].astype(int)\nday_wise_covid['New Recovered'] = day_wise_covid['New Recovered'].astype(int)","dcdbeac8":"#world_covid_df","8b7bd010":"world_data_map = latest_data.groupby('Country_Region').sum().reset_index()\nworld_data_map[\"Mortality Rate(per 100)\"] = np.round(100*world_data_map[\"Deaths\"]\/world_data_map[\"Confirmed\"],2)\nworld_data_map[\"Recovered Rate(per 100)\"] = np.round(100*world_data_map[\"Recovered\"]\/world_data_map[\"Confirmed\"],2)\nworld_data_map.drop('Case-Fatality_Ratio',inplace = True,axis=1)\nworld_data_map['Active'] = world_data_map['Active'].astype(int)\n","9ab1710f":"# color pallette\ncnf, dth, rec, act = '#393e46', '#ff2e63', '#21bf73', '#fe9801' \n","ad30ba4a":"world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\nworld_recovered = recovered_df[recovered_df.columns[-1:]].sum()\nworld_deaths = deaths_df[deaths_df.columns[-1:]].sum()\nworld_active = world_confirmed - (world_recovered - world_deaths)\n\nlabels = ['Active','Recovered','Deaths']\nsizes = [world_active,world_recovered,world_deaths]\ncolor= ['#66b3ff','green','red']\nexplode = []\n\nfor i in labels:\n    explode.append(0.02)\n    \nplt.figure(figsize= (15,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode,colors = color)\ncentre_circle = plt.Circle((0,0),0.30,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('World COVID-19 Cases',fontsize = 20)\nplt.axis('equal')  \nplt.tight_layout()","eae62f16":"df_temp = world_data_map.copy()\ndf_temp.drop(['Lat', 'Long_','FIPS','Country_Region','Incidence_Rate','Mortality Rate(per 100)','Recovered Rate(per 100)'], inplace=True, axis=1)\n           \ndf_t = pd.DataFrame(pd.to_numeric(df_temp.sum()),dtype=np.float64).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"Deaths\"]\/df_t[\"Confirmed\"],2)\ndf_t.style.background_gradient(cmap='Wistia',axis=1).format(\"{:.2f}\").format(\"{:.0f}\",subset=[\"Confirmed\",\"Deaths\",\"Recovered\",\"Active\"])\n","01b44aac":"#day_wise_covid['Active'] = day_wise_covid['Active'].astype(int)\n#world_covid_df['Active'] = world_covid_df['Active'].astype(int)\n#df_temp","204149a8":"df_temp = world_data_map.copy()\ndf_temp= df_temp.set_index(\"Country_Region\")\ndf_temp.drop(['Lat', 'Long_','FIPS','Recovered Rate(per 100)'], inplace=True, axis=1)\ndf_temp[\"Mortality Rate(per 100)\"] = np.round(100*df_temp[\"Deaths\"]\/df_temp[\"Confirmed\"],2)\n\ndf_temp.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incidence_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate(per 100)\"])\n","12e6fb33":"%%HTML\n<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/3733302\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/3733302\/embed\" aria-label=\"\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>","dfeb465e":"fig, ax = plt.subplots(figsize=(15, 10))\nax.clear()\nfig = sns.lineplot(x=\"Date\",y=\"Active\",data = day_wise_covid ,color=\"y\",label=\"Active\")\nfig = sns.lineplot(x=\"Date\",y=\"Recovered\",data = day_wise_covid ,color=\"green\",label=\"Recovered\")\nfig = sns.lineplot(x=\"Date\",y=\"Deaths\",data = day_wise_covid ,color=\"r\",label=\"Deaths\")\nfig = sns.lineplot(x=\"Date\",y=\"Confirmed\",data = day_wise_covid ,color=\"c\",label=\"Confirmed\")\nfig.set_xlabel('Date\\n',size=15,color='#4bb4f2') \nfig.set_ylabel('Number of Cases\\n', \n              size=15,color='#4bb4f2') \nfig.set_title('World Covid-19 Cases',size=25,color='navy')\nfig.ticklabel_format(style='plain', axis='y',useOffset=False)\n","16d60ee5":"fig = px.line(world_covid_df,\n              x='Date', y='Confirmed', color='Country_Region',\n              title='World growth COVID19 Cases')\nfig.show()","792768f3":"def plot_treemap(col):\n    fig = px.treemap(world_data_map, path=[\"Country_Region\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","983908a2":"plot_treemap('Confirmed')","96f0ed6d":"plot_treemap('Deaths')","7c5c9532":"fig = px.choropleth(world_covid_df, locations=\"Country_Region\", \n                    color=np.log(world_covid_df[\"Confirmed\"]),\n                    locationmode='country names', hover_name=\"Country_Region\", \n                    animation_frame=world_covid_df[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Cases over time', color_continuous_scale=px.colors.sequential.matter)\n#fig.update(layout_coloraxis_showscale=False)\nfig.show()","24139845":"fig = px.choropleth(world_covid_df, locations=\"Country_Region\", \n                    color=np.log(world_covid_df[\"Deaths\"]),\n                    locationmode='country names', hover_name=\"Country_Region\", \n                    animation_frame=world_covid_df[\"Date\"].dt.strftime('%Y-%m-%d'),\n                    title='Deaths Cases over time', color_continuous_scale=px.colors.sequential.matter)\n#fig.update(layout_coloraxis_showscale=False)\nfig.show()","ca6f2b54":"figure = px.choropleth(world_data_map,locations='Country_Region', locationmode='country names', color='Confirmed', hover_name='Country_Region',hover_data=[\"Active\",'Confirmed','Recovered','Deaths'],color_continuous_scale=px.colors.sequential.Viridis,title='World Covid19 Cases')\nfigure.show()","bcbf8ec1":"top_20 = world_data_map.sort_values(by=['Confirmed'], ascending=False).head(20)\n### Generate a Barplot\nplt.figure(figsize=(12,10))\nplot = sns.barplot(top_20['Confirmed'], top_20['Country_Region'])\nfor i,(value,name) in enumerate(zip(top_20['Confirmed'],top_20['Country_Region'])):\n    plot.text(value,i-0.05,f'{value:,.0f}',size=10)\nplt.suptitle('Top 20 countries Confirmed Cases',fontsize = 20)\nplt.xlabel(\"Number of Cases\",fontsize = 16)\nplt.ylabel(\"Country\",fontsize = 16)\nplt.show()","a02e709b":"top20_countries = world_covid_df[world_covid_df['Country_Region'].isin(top_20['Country_Region'])]","cc9ff85a":"fig = px.line(top20_countries,\n              x='Date', y='Confirmed', color='Country_Region',\n              title='Confirmed Cases ')\nfig.show()","c6481142":"fig = px.line(top20_countries,\n              x='Date', y='Deaths', color='Country_Region',\n              title='Deaths Cases ')\nfig.show()","1915b3b4":"top_5 = world_data_map.sort_values(by=['Confirmed'], ascending=False).head(5)\n\n# Generate a Barplot\nplt.figure(figsize=(15,5))\nconfirmed = sns.barplot(top_5['Country_Region'],top_5['Confirmed'], color = 'hotpink', label='Confirmed')\nrecovered = sns.barplot( top_5['Country_Region'],top_5['Recovered'], color = 'c', label='Recovered')\n\n# Add Texts for Barplots\nplt.suptitle('Top 5 Countries Confirmed & Recovered Cases',fontsize = 20)\nplt.xlabel(\"Country\",fontsize = 16)\nplt.ylabel(\"Number of Cases\",fontsize = 16)\nplt.legend(loc=1)\nplt.show()","2cde7f8d":"def plot_daywise_line(col, hue):\n    fig = px.line(day_wise_covid, x=\"Date\", y=col, width=700, color_discrete_sequence=[hue])\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\")\n    fig.show()","de4bacdd":"plot_daywise_line('Mortality Rate(per 100)', dth)","8f675dad":"plot_daywise_line('Recovered Rate(per 100)', rec)","6164f636":"plot_daywise_line('Deaths\/Recovered(per 100)', cnf)","1fca750e":"fig = px.scatter(world_data_map.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Deaths', color='Country_Region', size='Confirmed', \n                 height=700, text='Country_Region', log_x=True, log_y=True, \n                 title='Deaths vs Confirmed (Scale in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","f690f888":"fig = px.scatter(world_data_map.sort_values('Deaths', ascending=False).iloc[:20, :], \n                 x='Recovered', y='Deaths', color='Country_Region', size='Recovered', \n                 height=700, text='Country_Region', log_x=True, log_y=True, \n                 title='Recovered vs Deaths (Scale in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","63ca2742":"fig = px.scatter(world_data_map.sort_values('Recovered', ascending=False).iloc[:20, :], \n                 x='Confirmed', y='Recovered', color='Country_Region', size='Confirmed', \n                 height=700, text='Country_Region', log_x=True, log_y=True, \n                 title='Recovered vs Confirmed (Scale in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","dd94bb2f":"data = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = day_wise_covid['Date']\n#dates\ndata['y'] = day_wise_covid['Confirmed']\n#data\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Deaths Cases(Lakhs)')","cc3418d7":"data = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = day_wise_covid['Date']\n#dates\ndata['y'] = day_wise_covid['Deaths']\n#data\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Deaths Cases(Lakhs)')","80a331fc":"usa_df_data = world_covid_df [world_covid_df ['Country_Region'] == 'USA']\n#world_covid_df \n#usa_df_data\nusa_df_data.reset_index(drop=True,inplace=True)\n\nusa_df_data[\"Mortality Rate(per 100)\"] = np.round(100*usa_df_data[\"Deaths\"]\/usa_df_data[\"Confirmed\"],2)\nusa_df_data[\"Recovered Rate(per 100)\"] = np.round(100*usa_df_data[\"Recovered\"]\/usa_df_data[\"Confirmed\"],2)\nusa_df_data[\"Incidence Rate(per 100)\"] = np.round(100*usa_df_data[\"New Cases\"]\/usa_df_data[\"Confirmed\"],2)\n\nusa_df_data['Mortality Rate(per 100)'] = usa_df_data['Mortality Rate(per 100)'].replace(np.nan, 0)\nusa_df_data['Incidence Rate(per 100)'] = usa_df_data['Incidence Rate(per 100)'].replace(np.nan, 0)\nusa_df_data['Recovered Rate(per 100)'] = usa_df_data['Recovered Rate(per 100)'].replace(np.nan, 0)\n\n#usa_df_data.tail(5)","0c438f96":"india_df_data = world_covid_df [world_covid_df ['Country_Region'] == 'India']\n#world_covid_df \n#india_df_data\nindia_df_data.reset_index(drop=True,inplace=True)\n\nindia_df_data[\"Mortality Rate(per 100)\"] = np.round(100*india_df_data[\"Deaths\"]\/india_df_data[\"Confirmed\"],2)\nindia_df_data[\"Recovered Rate(per 100)\"] = np.round(100*india_df_data[\"Recovered\"]\/india_df_data[\"Confirmed\"],2)\nindia_df_data[\"Incidence Rate(per 100)\"] = np.round(100*india_df_data[\"New Cases\"]\/india_df_data[\"Confirmed\"],2)\n\nindia_df_data['Mortality Rate(per 100)'] = india_df_data['Mortality Rate(per 100)'].replace(np.nan, 0)\nindia_df_data['Incidence Rate(per 100)'] = india_df_data['Incidence Rate(per 100)'].replace(np.nan, 0)\nindia_df_data['Recovered Rate(per 100)'] = india_df_data['Recovered Rate(per 100)'].replace(np.nan, 0)\n\n\n#india_df_data.isnull().sum()\n#india_df_data.tail(5)","4c486806":"temp = [usa_df_data,india_df_data]\ntemp = pd.concat(temp)\ntemp_new = temp.melt(id_vars=['Country_Region','Date'], value_vars=['Confirmed','Recovered','Deaths','Active'],var_name='Case', value_name='Count')\n#temp_new","f284b4ca":"data1 = usa_df_data.tail(1)\ndata2 = india_df_data.tail(1)\ntemp4 = [data1,data2]\ntemp4 = pd.concat(temp4)\ntemp_new4 = temp4.melt(id_vars=['Country_Region'], value_vars=[\"Confirmed\",\"Recovered\",\"Active\",\"Deaths\"],var_name='Case', value_name='Count')\n#temp_new4\n\n","1a739097":"plt.figure(figsize=(10,8))\nsns.barplot(x = \"Case\",y=\"Count\",data=temp_new4,hue=\"Country_Region\",ci=None);\n","607422e0":"data_df1 = temp_new[temp_new[\"Case\"]=='Confirmed']\nfig = px.line(data_df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, title='Confirmed', \n                  color_discrete_sequence = [\"black\",\"lightgrey\"])\nfig.update_layout(title=\"India vs USA Covid-19 Confirmed Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","6e910a56":"data_df1 = temp_new[temp_new[\"Case\"]=='Active']\nfig = px.line(data_df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, \n                  color_discrete_sequence = [\"olive\",\"darkseagreen\"])\nfig.update_layout(title=\"India vs USA Covid-19 Active Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","168d9053":"data_df1 = temp_new[temp_new[\"Case\"]=='Recovered']\nfig = px.line(data_df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, \n                  color_discrete_sequence = [\"green\",\"yellowgreen\"])\nfig.update_layout(title=\"India vs USA Covid-19 Recovered Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","b0f95678":"data_df1 = temp_new[temp_new[\"Case\"]=='Deaths']\nfig = px.line(data_df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, \n                  color_discrete_sequence = [\"red\",\"orange\"])\nfig.update_layout(title=\"India vs USA Covid-19 Deaths Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","d40ce83f":"temp2 = [usa_df_data,india_df_data]\ntemp2 = pd.concat(temp2)\ntemp_new2 = temp2.melt(id_vars=['Country_Region','Date'], value_vars=['New Cases','New Deaths'],var_name='New Case', value_name='Count')\n#temp_new2","2cc659ae":"data_df1 = temp_new2[temp_new2[\"New Case\"]=='New Cases']\nfig = px.line(data_df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600,\n                  color_discrete_sequence = [\"black\",\"grey\"])\nfig.update_layout(title=\"India vs USA Covid-19 Daily New Confirmed Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","6b11c04b":"df1 = temp_new2[temp_new2[\"New Case\"]=='New Deaths']\nfig = px.line(df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, title='Confirmed', \n                  color_discrete_sequence = [\"brown\",\"lightcoral\"])\nfig.update_layout(title=\"India vs USA Covid-19 Daily New Deaths Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","f2c644f5":"temp3 = [usa_df_data,india_df_data]\ntemp3 = pd.concat(temp3)\ntemp_new3 = temp3.melt(id_vars=['Country_Region','Date'], value_vars=[\"Mortality Rate(per 100)\",\"Recovered Rate(per 100)\",\"Incidence Rate(per 100)\"],var_name='Cases Rates', value_name='Count')\n#temp_new3","ad1299a3":"df1 = temp_new3[temp_new3[\"Cases Rates\"]=='Mortality Rate(per 100)']\nfig = px.line(df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, \n                  color_discrete_sequence = [\"deeppink\",\"crimson\"])\nfig.update_layout(title=\"India vs USA Covid-19 Mortality Rate (per 100)\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","47fd04e4":"df1 = temp_new3[temp_new3[\"Cases Rates\"]=='Recovered Rate(per 100)']\nfig = px.line(df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, \n                  color_discrete_sequence = [\"forestgreen\",\"darkseagreen\"])\nfig.update_layout(title=\"India vs USA Covid-19 Recovered Rate (per 100)\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()","c56bb420":"df1 = temp_new3[temp_new3[\"Cases Rates\"]=='Incidence Rate(per 100)']\nfig = px.line(df1, x=\"Date\", y=\"Count\", color='Country_Region', \n                  height=600, \n                  color_discrete_sequence = [\"lightseagreen\",\"blue\"])\nfig.update_layout(title=\"India vs USA Covid-19 Incidence Rate (per 100)\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()\n","8546d2f9":"#import dataset\nindia_df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\n\n#Drop Lat & Long\nindia_df.drop(['ConfirmedIndianNational', 'ConfirmedForeignNational','Sno'], inplace=True, axis=1)\n\n#Rename Cured to Recovered\nindia_df.rename(columns = {'Cured':'Recovered'}, inplace = True) \n\n#india_df.tail()","bda1d97e":"#Date format change\nindia_df['Date'] = pd.to_datetime(india_df['Date'],\n                                  format='%d\/%m\/%y').dt.date\n   ","abb64c24":"#Add Active Cases\nindia_df['Active']=india_df['Confirmed']-india_df['Recovered']-india_df['Deaths']\nindia_df['Active'] = india_df['Active'].astype(int)","08d5da21":"#Rename State\/UnionTerritory to Province_State\nindia_df.rename(columns = {'State\/UnionTerritory':'Province_State'}, inplace = True) \n\n#india_df","f54d11e4":"#Add New Cases\nindia_df['Prev_Confirmed'] = india_df.groupby('Province_State')['Confirmed'].shift(1)\nindia_df['New Cases'] = india_df['Confirmed'] - india_df['Prev_Confirmed']\nindia_df.drop('Prev_Confirmed',inplace = True,axis=1)\nindia_df['New Cases'].fillna(0, inplace=True)\n\n#Add New Recovered Cases\nindia_df['Prev_Recovered'] = india_df.groupby('Province_State')['Recovered'].shift(1)\nindia_df['New Recovered'] = india_df['Recovered'] - india_df['Prev_Recovered']\nindia_df.drop('Prev_Recovered',inplace = True,axis=1)\nindia_df['New Recovered'].fillna(0, inplace=True)\n\n#Add New Deaths Cases\nindia_df['Prev_Deaths'] = india_df.groupby('Province_State')['Deaths'].shift(1)\nindia_df['New Deaths'] = india_df['Deaths'] - india_df['Prev_Deaths']\nindia_df.drop('Prev_Deaths',inplace = True,axis=1)\nindia_df['New Deaths'].fillna(0, inplace=True)\n\n#Type Change into integer\nindia_df['New Deaths'] = india_df['New Deaths'].astype(int)\nindia_df['New Cases'] = india_df['New Cases'].astype(int)\nindia_df['New Recovered'] = india_df['New Recovered'].astype(int)\n\n#Add Deaths\/Recovered, Mortality & Recovered Rate(per 100)\nindia_df[\"Mortality Rate(per 100)\"] = np.round(100*india_df[\"Deaths\"]\/india_df[\"Confirmed\"],2)\nindia_df[\"Recovered Rate(per 100)\"] = np.round(100*india_df[\"Recovered\"]\/india_df[\"Confirmed\"],2)\nindia_df[\"Deaths\/Recovered(per 100)\"] = np.round(100*india_df[\"Deaths\"]\/india_df[\"Recovered\"],2)\n#india_df.isnull().sum()","277eb739":"#Remove Nan Value\nindia_df['Mortality Rate(per 100)'] = india_df['Mortality Rate(per 100)'].replace(np.nan, 0)\nindia_df['Recovered Rate(per 100)'] =india_df['Recovered Rate(per 100)'].replace(np.nan, 0)\nindia_df['Deaths\/Recovered(per 100)'] = india_df['Deaths\/Recovered(per 100)'].replace(np.nan, 0)\nindia_df.isnull().sum()\n","83df7bbd":"#Drop Unknown &  Unassigned\ndf_deffer = india_df['Province_State']=='Unknown' \nindia_df.drop(india_df[df_deffer].index,inplace=True)\ndf_deffer = india_df['Province_State']=='Unassigned' \nindia_df.drop(india_df[df_deffer].index,inplace=True)\n","47d72ea8":"india_data_json = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\ndf_india_latest = pd.io.json.json_normalize(india_data_json['data']['statewise'])\ndf_deffer = df_india_latest['state']=='State Unassigned' \ndf_india_latest.drop(df_india_latest[df_deffer].index,inplace=True)\n\ndf_india_latest = df_india_latest.set_index(\"state\")\ndf_india_latest[\"Mortality Rate(per 100)\"]= np.round(np.nan_to_num(100*df_india_latest[\"deaths\"]\/df_india_latest[\"confirmed\"]),2)","8fc4fb8e":"total = df_india_latest.sum()\ntotal.name = \"Total\"\ndf_t = pd.DataFrame(total,dtype=float).transpose()\ndf_t[\"Mortality Rate(per 100)\"] = np.round(100*df_t[\"deaths\"]\/df_t[\"confirmed\"],2)\ndf_t.style.background_gradient(cmap='Purples',axis=1).format(\"{:.2f}\").format(\"{:.0f}\",subset=[\"confirmed\",\"deaths\",\"recovered\",\"active\"])","72b8a10c":"#df_india_latest","22cf3fdf":"#Remove State Unassigned state\n#df_deffer = df_india_latest['state']=='State Unassigned' \n#df_india_latest.drop(df_india_latest[df_deffer].index,inplace=True)\n#df_india_days","56f3a20f":"df_india_latest[\"Mortality Rate(per 100)\"]= np.round(np.nan_to_num(100*df_india_latest[\"deaths\"]\/df_india_latest[\"confirmed\"]),2)\n\ndf_india_latest.style.background_gradient(cmap='Blues',subset=[\"confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate(per 100)\"])\\\n                        .format(\"{:.2f}\",subset=[\"Mortality Rate(per 100)\"])","8a37ef08":"india_df['Date'] = pd.to_datetime(india_df['Date'],format='%Y-%m-%d')\nindia_df.reset_index(drop=True,inplace=True) \ndf_india_days =  india_df.groupby('Date').sum().reset_index() \n#india_df.head()","579e6857":"#df_india_days","9b9fedca":"fig, ax = plt.subplots(figsize=(15, 10))\nax.clear()\n#fig = sns.lineplot(x=\"date\",y=\"new_cases\",data = df_india,color=\"m\",label=\"New Cases\")\nfig = sns.lineplot(x=\"Date\",y=\"Active\",data = df_india_days ,color=\"y\",label=\"Active\")\nfig = sns.lineplot(x=\"Date\",y=\"Recovered\",data = df_india_days ,color=\"green\",label=\"Recovered\")\nfig = sns.lineplot(x=\"Date\",y=\"Deaths\",data = df_india_days ,color=\"r\",label=\"Deaths\")\nfig = sns.lineplot(x=\"Date\",y=\"Confirmed\",data = df_india_days ,color=\"c\",label=\"Confirmed\")\nfig.set_xlabel('Date\\n',size=15,color='#4bb4f2') \nfig.set_ylabel('Number of Cases\\n', \n              size=15,color='#4bb4f2') \nfig.set_title('India Covid-19 Cases',size=25,color='navy')\nfig.ticklabel_format(style='plain', axis='y',useOffset=False)","6991bcd4":"df1 = df_india_days.melt(id_vars='Date', value_vars=['New Cases','New Deaths','New Recovered'], \n                 var_name='Cases', value_name='Cases Count')\nfig = px.line(df1, x=\"Date\", y=\"Cases Count\",color='Cases')\nfig.update_layout(title=\"India Covid-19 New Cases\", xaxis_title=\"\", yaxis_title=\"\")\nfig.show()\n#df_india_days\n","f3341b1d":"fig = px.line(india_df,x='Date', y='Confirmed', color='Province_State',title='India growth COVID19 Cases ')\nfig.show()\n#india_df.head()","4fa52893":"#df_india_latest.head()","82ba4f74":"def plot_treemap(col):\n    fig = px.treemap(df_india_latest, path=[\"state\"], values=col, height=700,\n                 title=col, color_discrete_sequence = px.colors.qualitative.Dark2)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","05cd92fe":"df_india_latest.reset_index(inplace=True) \n#df_india_latest.head()","55eed49a":"plot_treemap(\"confirmed\")","b1b24004":"plot_treemap(\"recovered\")","4b4908db":"r = requests.get(url='https:\/\/raw.githubusercontent.com\/geohacker\/india\/master\/state\/india_telengana.geojson')\ngeojson = r.json()\n\ndef change_state_name(state):\n    if state == 'Odisha':\n        return 'Orissa'\n    elif state == 'Telengana':\n        return 'Telangana'\n    return state","cd8be461":"df_india_latest['state'] = df_india_latest.apply(lambda x: change_state_name(x['state']), axis=1)\n","f3ff2f35":"#df_india_latest.head()","0887cea1":"def plot_hbar(df, col, n, hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), \n                 x=col, y=\"state\", color='state',  \n                 text=col, orientation='h', width=700, hover_data=hover_data,\n                 color_discrete_sequence = px.colors.qualitative.Dark24)\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending',\n                      uniformtext_minsize=8, uniformtext_mode='hide')\n    fig.show()\n\n\n","fe5db631":"plot_hbar(df_india_latest, 'confirmed', 10)\n#df_india_latest","64d62ed3":"plot_hbar(df_india_latest, 'recovered', 10)","49a10106":"plot_hbar(df_india_latest, 'deaths', 10)","ac8a299b":"#columns = ['state', 'confirmed', 'recovered','deaths','active']\n#df_india_latest = df_india_latest[columns]\ndf_india_latest.sort_values('confirmed',inplace=True, ascending=False)\ndf_india_latest.reset_index(drop=True,inplace=True)\n\ndf_india_latest.style.background_gradient(cmap='viridis')\n\nfig = px.choropleth(df_india_latest, geojson=geojson, color=\"confirmed\",\n                    locations=\"state\", featureidkey=\"properties.NAME_1\",\n                    hover_data=[\"active\",'recovered','deaths'],\n                    color_continuous_scale=px.colors.sequential.Viridis,\n                    title='India: Total Current cases per state'\n                   )\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_geos(projection_type=\"orthographic\")\nfig.update_layout(height=600,margin={\"r\":0,\"t\":30,\"l\":0,\"b\":30})\nfig.show()\n","d5e898e4":"df_india_latest[\"Recovered_Rate(per 100)\"] = np.round(100*df_india_latest[\"recovered\"]\/df_india_latest[\"confirmed\"],2)\ndf_india_latest[\"Deaths\/Recovered(per 100)\"] = np.round(100*df_india_latest[\"deaths\"]\/df_india_latest[\"recovered\"],2)","2c5d038f":"#df_india_latest.reset_index(inplace=True)\n#df_india_latest","0e1a87cc":"fig = px.scatter(df_india_latest.sort_values('deaths', ascending=False).iloc[:20, :], \n                 x='confirmed', y='deaths', color='state', size='confirmed', \n                 height=700, text='state', log_x=True, log_y=True, \n                 title='Confirmed vs Deaths (Scale in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","279d9365":"fig = px.scatter(df_india_latest.sort_values('recovered', ascending=False).iloc[:20, :], \n                 x='confirmed', y='recovered', color='state', size='confirmed', \n                 height=700, text='state', log_x=True, log_y=True, \n                 title='Confirmed vs Recovered (Scale in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","468db412":"fig = px.scatter(df_india_latest.sort_values('deaths', ascending=False).iloc[:20, :], \n                 x='recovered', y='deaths', color='state', size='recovered', \n                 height=700, text='state', log_x=True, log_y=True, \n                 title='Recovered vs Deaths (Scale in log10)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend=False)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","52beee0c":"data = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = df_india_days['Date']\n#dates\ndata['y'] = df_india_days['Confirmed']\n#df_india_days\n#data\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases (lakhs)')","69857801":"data = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = df_india_days['Date']\n#dates\ndata['y'] = df_india_days['Deaths']\n#df_india_days\n#data\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Deaths Cases')","162eb282":"## Reported Cases till Date","57f8953e":"# COVID19 in top 20 affected countries","c787687f":"##### Please don't PANIC, stay safe, follow your nation and WHO guidelines. \n##### We all can defeat this together. Please don't spread rumors.","5e4a9ab1":"[<img target=\"_blank\" src=\"https:\/\/img.icons8.com\/bubbles\/100\/000000\/linkedin.png\" title=\"LinkedIn\" align=\"left\">](https:\/\/www.linkedin.com\/in\/rajabhijeet22\/)\n[<img target=\"_blank\" src=\"https:\/\/img.icons8.com\/bubbles\/100\/000000\/github.png\" title=\"Github\"  align=\"left\">](https:\/\/github.com\/abhijeetraj22)[<img target=\"_blank\" src=\"https:\/\/img.icons8.com\/bubbles\/100\/000000\/instagram-new.png\" title=\"Instagram\"  align=\"left\">](https:\/\/www.instagram.com\/abhijeet_raj_\/?hl=en)[<img target=\"_blank\" src=\"https:\/\/img.icons8.com\/bubbles\/100\/000000\/twitter.png\" title=\"LinkedIn\"  align=\"left\">](https:\/\/twitter.com\/abhijeet_raj_\/)","6d77432f":"## SOURCES:","56ef6d35":"![](https:\/\/i.imgur.com\/ly4htII.jpg)","602ef894":"# INDIA Covid19","fc294390":"Coronaviruses are important human and animal pathogens.At the end of 2019, a novel coronavirus was identified as the cause of a cluster of pneumonia cases in Wuhan, a city in the Hubei Province of China. It rapidly spread, resulting in an epidemic throughout China, followed by an increasing number of cases in other countries throughout the world.\n\n   In February 2020, the World Health Organization designated the disease COVID-19, which stands for coronavirus disease 2019. The virus that causes COVID-19 is designated severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).previously, it was referred to as 2019-nCoV. Currently (on the date 21 Sep 2020), this leads to a total of 960K+ Deaths across the globe. Pandemic is spreading all over the world; it becomes more important to understand about this spread. This NoteBook is an effort to analyze the cumulative data of confirmed, deaths, and recovered cases over time. \n\nIn this notebook, the main focus is to analyze the spread trend of this virus all over the world.","ddf948e9":"## Bar Race Chart Using Flourish App","925c0097":"## Country Wise Reported Cases\n\nCountry Wise reported confirmed cases, recovered cases, deaths cases, active cases , Incidence Rate & Mortality Rate\n","3fc6a23c":"## Introduction to COVID-19 ","87c6a073":"## Prediction Curve for Global Death Cases(30 Days)","fc089bd5":"# State Wise","c50efd8b":"### Deaths Cases","ce0f5709":"# Geospatial Analysis","c9e49c1a":"# India Confirmed vs Deaths (Scale in log10)","41ef1ca4":"### Top 20 countries (Confirmed Cases and Deaths)\nI need to find the Top 20 affected countries. Since, the Confirmed cases and Fatalities are the cummulative \nsums till date, I'll find the top 20 countries by using the country data of the last date for which the training\n data is available.","c0a35e92":"### Active Cases","ecd26b34":"### Recovered Rate\n#### It is  the measure of number of recovered in a particular population during a specific interval.","1b971460":"https:\/\/github.com\/CSSEGISandData\/COVID-19\n- 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE\n- This dataset is updated on daily basis by Johns Hopkins CSSE","18007879":"# Current Share of India COVID19 Cases","c06f789c":"Total number of confirmed cases, deaths reported, recoveries and active cases all across the world","48376a29":"# INDIA vs USA COVID19","ea4b370f":"### Imports Library","9d6d419a":"# India vs USA Reported Cases till Date","e210c458":"#### From the above line plots for the top 20 affected countries:\n\n- The cases and deaths are monotonically increasing(almost exponentially) for rest of the countries.\n- US & India has shown the greatest rise in the number of Confirmed & deaths Cases. Russia on the other hand having the 3rd highest rise in Confirmed Cases.\n- Cases and Deaths for China have stagnated over time.\n","c14a72e2":"## Prediction Curve for Global Confirmed Cases(30 Days) ","7064cc26":"- WHO\n- Microsoft COVID-19 Tracker\n- COVID-19 Tracker by Johns Hopkins University\n- COVID-19-India-Tracker","a1abcaf0":"# Top 10 State","cefac64c":"### Confirmed Cases","1e52d368":"# General Analysis of Data","e59e4b90":"## Imports and Datasets\n- Pandas - for dataset handeling\n- Numpy - Support for Pandas and calculations\n- Matplotlib - for visualization (Platting graphas)\n- Seaborn - for visualization (Platting beautiful graphas)\n- Plotly - for interative plots","54f11bff":"## Prediction Curve for India Confirmed Cases (30 Days)","5fb6993f":"## India growth COVID19 Cases","17747ff5":"## India vs USA Covid-19 Recovered Rate (per 100)","63d31f48":"##### From the above plots:-\n\n- China was the first country to experience the onset of virus.\n- US ,India and Italy, which are the worst affected countries currently didn't recond many cases in january. This shows that how fast the virus spreads.\n- Western Europe is the worst affected. Hence, it can be adjudged as the new epicenter of COVID19. USA is also in the reckoning.\n- Lockdown has seem to have worked in China's favour as the growth rate has plummeted.","d7fcf788":"## Statewise Insights","7f23bbae":"# Geospatial Analysis","44bcabdb":"##### The above Bar chart race is an attempt to show the progression of total cases in World.\n","73f4e3b9":"### Mortality Rate\n##### For any epidemic the one of the most important evaluation is Mortality Rate. It is the measure of number of deaths in a particular population during a specific interval.\n","700fa40f":"## Feedback \n- Your feedback is much appreciated\n- Comment if you have any doubts or you found any errors in the notebook\n- Please UPVOTE if you LIKE this notebook\n","897458d6":"# India & World COVID-19 Analysis, Visualization, Comparison and Predictions","9fa40589":"## Preprocessing","31f5f9a1":"### Total Deaths Cases growth","ff31b870":"# COVID-19 Mortality Rate & Recovered Rate Variation Over Period of Time","62dffe0a":"### Total Confirmed Cases growth","3d0ffe74":"## Prediction Curve for India Death Cases (30 Days)","57b99e9b":"# Prediction","851e0b8b":"## India Recovered vs Deaths (Scale in log10)","ba4e5e7e":"## India vs USA growth of COVID19 over time","52af1c46":"### Bar Plot Analysis","f7a482e9":"### Recovered Cases","8ec09dfc":"# Current Share of Worldwide COVID19 Cases","fb47b94a":"## India vs USA Covid-19 Incidence Rate (per 100)","a3b1bf70":"### New Confirmed Cases","a27b11c2":"## Dataset ","6684b243":"## India Confirmed vs Recovered (Scale in log10)","028a75a5":"### Retriving Dataset","f71d0848":"# Confirmed & Recovered Cases Top 5 Countries","9836c535":"### New Deaths Cases","e9589513":"## Global Reported Cases till Date\n\nTotal percentage of deaths reported, recoveries and active cases all across the world","5034808f":"## Connect with me! \ud83c\udf10","c007f6c4":"# Global Prediction","ad42bceb":"### Overall Cases","25992b26":"### Current Share of Worldwide COVID19 Deaths Cases","431eb7ec":"# World growth of COVID19 over time\nIn this section, I'll have a look at how COVID19 has been growing throughout the world from 22nd january 2020. I'll be using tree maps to show the share of COVID19 Cases worldwide and chloropleth maps with a time slider to show the daily impact of virus.","a431f701":"# India vs USA Covid-19 Mortality Rate (per 100)","a525793d":"## Daily Cases Wise"}}