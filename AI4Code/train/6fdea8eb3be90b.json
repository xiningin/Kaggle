{"cell_type":{"668c519c":"code","79983f9e":"code","9f5f13fe":"code","f7995860":"code","f7b40d08":"code","56887659":"code","730bca17":"code","eb4a5fc9":"markdown","fe5e938a":"markdown","6013ad3a":"markdown","1d35b218":"markdown","573a62b2":"markdown"},"source":{"668c519c":"from tqdm import tqdm_notebook as tqdm\nimport numpy as np\nimport pandas as pd\npd.options.display.max_columns = 200\n\nfrom kaggle.competitions import nflrush\n\nimport holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')","79983f9e":"train_plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', \n                          usecols=['PlayId', 'Yards'])\\\n              .drop_duplicates('PlayId').reset_index(drop=True)\n\ntrain_yards_array = train_plays.Yards.values","9f5f13fe":"pdf, edges = np.histogram(train_yards_array, bins=199, range=(-99, 99), density=True)\nhist = hv.Histogram((pdf, edges)).opts(width=600)\n\ncdf = pdf.cumsum().clip(0, 1)\ncurve = hv.Curve(dict(zip(np.arange(-99,99), cdf))).opts(width=600)\n(hist+curve).cols(1)","f7995860":"from sklearn.model_selection import KFold\n\nvsize = len(train_plays)\n\ndef calc_crps(preds_cume, actuals):\n    stops = np.arange(-99, 100)\n    unit_steps = stops >= actuals.reshape(-1, 1)\n    crps = ((preds_cume - unit_steps)**2).mean().mean()\n    return crps\n\nkf_params = {'n_splits': 5,\n             'random_state': 3438\n             }\n\nkf = KFold(**kf_params)\nscores = np.zeros((kf.get_n_splits()))\npdfs_all = np.zeros((vsize,199))\nfor i, (train_idx, val_idx) in enumerate(kf.split(train_yards_array)):\n    pdf, edges = np.histogram(train_yards_array[train_idx], bins=199, \n                              range=(-99, 99), density=True)\n    cdf = pdf.cumsum().clip(0, 1)\n    preds_cume = np.array([cdf]*len(val_idx))\n    score = calc_crps(preds_cume, train_yards_array[val_idx])\n    scores[i] = score\n    pdfs_all[val_idx] = pdf\n    print(score)\n\nprint(f'mean: {scores.mean():.5f}',\n      f'stdp: {scores.std():.5f}', sep='\\n')","f7b40d08":"import matplotlib.pyplot as plt\n\nplays_sorted = train_plays.sort_values('Yards', ascending=False)\npdfs_all = pdfs_all[plays_sorted.index]\n\nfig = plt.figure(figsize=(15,8))\npredpic = plt.imshow(pdfs_all,aspect='auto', cmap='hot', extent = (-99.5, 99.5, vsize+.5, -0.5))\nplt.scatter(x=plays_sorted.Yards, y=np.arange(vsize), s=0.1, c='green')\nplt.show()\n","56887659":"def get_cdf_df(yards_array):\n    pdf, edges = np.histogram(yards_array, bins=199,\n                 range=(-99,99), density=True)\n    cdf = pdf.cumsum().clip(0, 1)\n    cdf_df = pd.DataFrame(data=cdf.reshape(-1, 1).T, \n                            columns=['Yards'+str(i) for i in range(-99,100)])\n    return cdf_df","730bca17":"env = nflrush.make_env()\niter_test = env.iter_test()\n\nfor (test_play, _) in tqdm(iter_test, total=3438):\n    test_play_cdf = get_cdf_df(train_yards_array)\n    env.predict(test_play_cdf)\n\nenv.write_submission_file()","eb4a5fc9":"### Submission\nAll that's left is to submit the distribution for the test set plays.The LB score should be similar to the CV score.","fe5e938a":"### Probabilities\nHere are graphs of the Probability Density Function (PDF) and Cumulative Distribution Function (CDF) for yards gained in the 2017 and 2018 seasons.","6013ad3a":"### Motivation\nThis submission is based on a simple statistical idea: the probability distribution for yards gained on a play follows the distribution of all plays previously measured.","1d35b218":"Not bad for such a simple benchmark. Here's a visualization of what it looks like. The predicted distributions for each play are shown by the background spectrum (slightly different for each fold). Actual gains are sorted and appear as green dots.","573a62b2":"### Score and visualization\nLet's see how this scores on the training data using K-fold."}}