{"cell_type":{"5ceb7d21":"code","20bfb01f":"code","051271d4":"code","9ed5b863":"code","424cbadc":"code","84ab3e31":"code","a25f62f6":"code","0ff097d6":"code","c55b3f1d":"markdown","33b6273c":"markdown","3b8bf9e1":"markdown","1de11a42":"markdown","14d5d549":"markdown","e4fe9850":"markdown"},"source":{"5ceb7d21":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.layers import Dense, Flatten, Activation, GlobalAvgPool2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications import imagenet_utils\nimport itertools\nimport shutil\nimport os\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport glob\nimport datetime\nfrom time import time","20bfb01f":"physical_devices = tf.config.experimental.list_physical_devices('GPU')\nprint(physical_devices)\ntf.config.experimental.set_memory_growth(physical_devices[0], True)","051271d4":"TRAIN_PATH = '..\/input\/intel-image-classification\/seg_train\/seg_train\/'\nVALID_PATH = '..\/input\/intel-image-classification\/seg_test\/seg_test\/'\nTEST_PATH = '..\/input\/intel-image-classification\/seg_pred\/'\nIMAGE_SIZE = (224, 224, 3)\nBATCH_SIZES = 64\nEPOCHS = 80","9ed5b863":"datagen = ImageDataGenerator()\ntrain_batches = datagen.flow_from_directory(directory=TRAIN_PATH, color_mode=\"rgb\",target_size=IMAGE_SIZE[:-1], class_mode=\"categorical\", shuffle=True,batch_size=BATCH_SIZES)\nvalid_batches = datagen.flow_from_directory(directory=VALID_PATH, color_mode=\"rgb\",target_size=IMAGE_SIZE[:-1], class_mode=\"categorical\", shuffle=False,batch_size=BATCH_SIZES)\ntest_batches = datagen.flow_from_directory(directory=TEST_PATH,target_size=IMAGE_SIZE[:-1],color_mode=\"rgb\",batch_size=BATCH_SIZES,class_mode=None,shuffle=False)","424cbadc":"md = keras.applications.MobileNet(input_shape = IMAGE_SIZE, weights = \"imagenet\", include_top = False)\nx = GlobalAvgPool2D(name='global_avg')(md.output)\nprediction = Dense(6, activation='softmax')(x)\nmodel = Model(inputs=md.input, outputs=prediction)\nmodel.summary()","84ab3e31":"optimizer = Adam(learning_rate = 1e-3)\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer= optimizer,\n    metrics=['accuracy']\n)\nstop_callback = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss',factor=0.1,patience = 4, verbose=1, min_lr = 1e-6)\nt1 = time()\nhistory = model.fit(train_batches, \n                    validation_data = valid_batches, \n                    epochs= EPOCHS, \n                    steps_per_epoch=len(train_batches), \n                    validation_steps=len(valid_batches), \n                    callbacks = [stop_callback,reduce_lr], \n                    shuffle = True)\nt2 = time()\nprint(\"execution time: \", t2 - t1)","a25f62f6":"scoreSeg = model.evaluate(valid_batches)\nprint(\"Test Data Accuracy = \",scoreSeg[1])","0ff097d6":"from sklearn.metrics import classification_report\ntest_labels = valid_batches.classes \npredictions = model.predict(valid_batches, verbose=1)\ny_pred = np.argmax(predictions, axis=-1)\nprint(classification_report(test_labels, y_pred, target_names = valid_batches.class_indices))","c55b3f1d":"# Model Construct","33b6273c":"# Data Preparetion","3b8bf9e1":"# Using GPU","1de11a42":"# Variable","14d5d549":"# Result","e4fe9850":"# Install Packages"}}