{"cell_type":{"1c1e7b2a":"code","491be075":"code","7e9057ef":"code","749b4833":"code","09810923":"code","fa8e077b":"code","4b6bdcdf":"code","acc778c7":"code","d08022af":"code","7baff9ec":"code","d459835a":"code","d3902717":"markdown","b58e5231":"markdown","73299ee9":"markdown"},"source":{"1c1e7b2a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image\nfrom numpy import asarray\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\n\ndata=[]\nlabel=[]\n\ndir=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','del','nothing','space']\nfor i in dir:\n    j=0\n    print(i)\n    for file in os.listdir('\/kaggle\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\/{}'.format(i)):\n        img = Image.open(os.path.join('\/kaggle\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train\/',i,str(file)))\n        ndata = asarray(img)\n        ndata=cv2.resize(ndata,(100,100)).flatten()\n        data.append(ndata)\n        label.append(i)\n        j+=1\n        if j>1000:\n            break       ","491be075":"print(len(data))","7e9057ef":"test_data=[]\ntest_lable=[]\nfor file in os.listdir('\/kaggle\/input\/asl-alphabet\/asl_alphabet_test\/asl_alphabet_test\/'):\n    img = Image.open(os.path.join('\/kaggle\/input\/asl-alphabet\/asl_alphabet_test\/asl_alphabet_test\/',str(file)))\n    ndata = asarray(img)\n    ndata=cv2.resize(ndata,(100,100)).flatten()\n    test_data.append(ndata)\n  \n","749b4833":"print(len(test_data))","09810923":"#label encoder\nfrom sklearn import preprocessing\n \n# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\n \n# Encode labels in column 'species'.\nlabel= label_encoder.fit_transform(label)\nprint(np.unique(label))","fa8e077b":"test_label = []\nfor i in np.unique(label):\n    if i!= 26:\n        test_label.append(i)","4b6bdcdf":"from sklearn.tree import DecisionTreeRegressor \n\ntreemodel = DecisionTreeRegressor(random_state = 0) \n\ntreemodel.fit(data,label)\npred=treemodel.predict(test_data)\npred","acc778c7":"from sklearn.metrics import confusion_matrix,accuracy_score\n\nscore = accuracy_score(test_label,pred)\nprint(score)","d08022af":"matrix= confusion_matrix(test_label,pred)  \nmatrix","7baff9ec":"from sklearn.linear_model import LogisticRegression\nlogisticRegr = LogisticRegression(solver=\"liblinear\")\nlogisticRegr.fit(data,label)\n\nsco=logisticRegr.score(test_data,test_label)\nprint(sco)","d459835a":"from sklearn.neighbors import KNeighborsClassifier  \nclassifier= KNeighborsClassifier(n_neighbors=6, metric='minkowski', p=2 ) \nclassifier.fit(data,label)\n\npred=classifier.predict(test_data)\n\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nmatrixx= confusion_matrix(test_label, pred)  \nprint(\"confusion matrix:\")\nprint(matrixx)\nprint(\"accuracy:\")\nprint(accuracy_score(testY,pred))","d3902717":"**KNN classifier**\n","b58e5231":"Decision Tree Classification","73299ee9":"**logistic regression**"}}