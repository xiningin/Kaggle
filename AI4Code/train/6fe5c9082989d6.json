{"cell_type":{"87168518":"code","c7ed2950":"code","5cd09c46":"code","cd29c326":"code","2c6d3e18":"code","f1991c19":"code","7d597f97":"code","8a952fe1":"code","0b81c0c5":"code","7c5d006a":"code","8d05f516":"code","8bd7c684":"code","fd6e666d":"code","ff21cf2e":"code","0fc7e39b":"markdown"},"source":{"87168518":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c7ed2950":"import pandas as pd\n\ndata=pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndata.head()","5cd09c46":"target=data[['Churn']]\ntarget.head()","cd29c326":"from sklearn.preprocessing import LabelEncoder\n\nle=LabelEncoder()\ntarget=le.fit_transform(target)\ntarget=pd.DataFrame(target,columns=['target'])\ntarget.head()","2c6d3e18":"data.drop(['customerID','Churn','TotalCharges'],axis=1,inplace=True)\ndata.head()","f1991c19":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nle=LabelEncoder()\ncat_cols=data.select_dtypes(exclude=['int','float']).columns\nenc_data=list(cat_cols)\ndata[enc_data]=data[enc_data].apply(lambda col:le.fit_transform(col))\ndata[enc_data].head()\n\n# scale=StandardScaler()\n# datas=scale.fit_transform(data)\n# data_df=pd.DataFrame(datas)\n# data_df.head()","7d597f97":"import scipy.cluster.hierarchy as shc\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,20))\nplt.title(\"Customer Dendograms\")\ndend = shc.dendrogram(shc.linkage(data, method='ward'))\nplt.show()","8a952fe1":"from sklearn.cluster import AgglomerativeClustering\n\ncluster = AgglomerativeClustering(n_clusters=4, affinity='euclidean', linkage='ward')\ntarget=cluster.fit_predict(data)","0b81c0c5":"from sklearn.cluster import KMeans\nimport numpy as np\nmodel=KMeans(n_clusters=4)\nmodel.fit(data)\ntargetKMeans=np.array(model.labels_)","7c5d006a":"from sklearn.decomposition import PCA\nimport pandas as pd\n\npca=PCA(n_components=2)\npc=pca.fit_transform(data)\npdf=pd.DataFrame(data=pc,columns=['principal component 1','principal component 2'])\npdf.head()","8d05f516":"finalDf=pd.concat([pdf,pd.DataFrame(target,columns=['target'])],axis=1)\nfinalDf.head()","8bd7c684":"fig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\ntargets = [0,1,2,3]\ncolors = ['r', 'g', 'b','k']\nfor target, color in zip(targets,colors):\n    indicesToKeep = finalDf['target'] == target\n    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']\n               , finalDf.loc[indicesToKeep, 'principal component 2']\n               , c = color\n               , s = 50)\nax.legend(targets)\nax.grid()","fd6e666d":"finalDfKM=pd.concat([pdf,pd.DataFrame(targetKMeans,columns=['targetKMeans'])],axis=1)\nfinalDfKM.head()","ff21cf2e":"fig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\ntargets = [0,1,2,3]\ncolors = ['r', 'g', 'b','k']\nfor target, color in zip(targets,colors):\n    indicesToKeep = finalDf['target'] == target\n    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']\n               , finalDf.loc[indicesToKeep, 'principal component 2']\n               , c = color\n               , s = 50)\nax.legend(targets)\nax.grid()","0fc7e39b":"**This is just going to be a heirarchical clustering implementation of my previous work on this project. So if you are new here feel free to visit [previous notebooks](http:\/\/www.kaggle.com\/vedanth777\/clustering-customers-kmeans-pca) in this project series and come back to dive  into the world of heirarchical clustering.**\""}}