{"cell_type":{"793b9cb6":"code","005a1f19":"code","ba82c4ea":"code","9986a070":"code","4a611f09":"code","2d9209d2":"code","861e481f":"code","7047711f":"code","3dee70f0":"code","33f8962d":"code","bd4b75e3":"code","716558a0":"code","ffd6bd78":"code","aba62715":"code","cff5924a":"code","62f90e06":"code","8a47aca1":"code","23cab497":"markdown","7a9b30ea":"markdown","cff83e8e":"markdown","2adb58e9":"markdown","126055dd":"markdown","26447f47":"markdown","e684cb02":"markdown","aaff404f":"markdown","83fed484":"markdown","54042f2a":"markdown","3b731bd0":"markdown","7f21a029":"markdown","5b366dc1":"markdown","e49baa17":"markdown","af9ba177":"markdown"},"source":{"793b9cb6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import Input, Model\nfrom tensorflow.keras import Sequential\n\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nimport warnings\nwarnings.filterwarnings('ignore')","005a1f19":"path = '\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv'\ndf = pd.read_csv(path)\n\ndf = shuffle(df)\ndf.fillna(df.mean(), inplace=True)\n\ndf.head()","ba82c4ea":"df.drop(['Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm'], axis=1, inplace=True)\ndf.head()","9986a070":"df.RainToday = [1 if each == 'Yes' else 0 for each in df.RainToday]\ndf.RainTomorrow = [1 if each == 'Yes' else 0 for each in df.RainTomorrow]\ndf.sample(3)","4a611f09":"y = df.RainTomorrow.values\nx_data = df.drop('RainTomorrow', axis=1)\nx_data.head()","2d9209d2":"X = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))\nX.head(5)","861e481f":"input_layer = Input(shape=(X.shape[1],))\nencoded = Dense(128, activation='tanh', activity_regularizer=regularizers.l1(10e-5))(input_layer)\nencoded = Dense(64, activation='relu')(encoded)\n\ndecoded = Dense(64, activation='tanh')(encoded)\ndecoded = Dense(128, activation='tanh')(decoded)\noutput_layer = Dense(X.shape[1], activation='relu')(decoded)","7047711f":"autoencoder = Model(input_layer, output_layer)\nautoencoder.compile(optimizer='adadelta', loss='mse')","3dee70f0":"X_rain, X_dry = X[y==1], X[y==0]\nprint('Training - Rain data:{:}, Dry data:{:}'.format(len(X_rain), len(X_dry)))\n\nhistory = autoencoder.fit(X_dry, X_dry, epochs=60, shuffle=True, validation_split=0.2, verbose=0)","33f8962d":"plt.figure(figsize=(14,8))\nplt.title(\"Loss\")\nplt.plot(history.history['loss'])\nplt.show()","bd4b75e3":"hidden_rep = Sequential()\nhidden_rep.add(autoencoder.layers[0])\nhidden_rep.add(autoencoder.layers[1])\nhidden_rep.add(autoencoder.layers[2])","716558a0":"dry_hid_rep = hidden_rep.predict(X_dry)\nrain_hid_rep = hidden_rep.predict(X_rain)","ffd6bd78":"# Prepare features, labels and combine them\nrep_x = np.append(dry_hid_rep, rain_hid_rep, axis=0)\ny_n = np.zeros(dry_hid_rep.shape[0])\ny_f = np.ones(rain_hid_rep.shape[0])\nrep_y = np.append(y_n,  y_f)\n\n# Split features, labels\nX_train, X_test, y_train, y_test = train_test_split(rep_x, rep_y, test_size=0.25)","aba62715":"clf = LogisticRegression().fit(X_train, y_train)\ny_hat = clf.predict(X_test)","cff5924a":"clf_report = classification_report(y_test, y_hat)\nacc = accuracy_score(y_test, y_hat)","62f90e06":"print(clf_report)","8a47aca1":"print(\"Accuracy:\", acc)","23cab497":"### Model layers from encoders","7a9b30ea":"<h1 id=\"semi\" style=\"color:black; background:#fc850c; border:0.5px dotted;\"> \n    <center>Semi-Supervised Learning\n        <a class=\"anchor-link\" href=\"#semi\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","cff83e8e":"<div>\n    <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/6012\/1733506\/0a5af086168a9b87a38b29bac75aa8ce\/dataset-cover.jpg\" \/>\n<\/div>","2adb58e9":"### Analyze","126055dd":"<h1 id=\"autoencoder\" style=\"color:black; background:#fc850c; border:0.5px dotted;\"> \n    <center>Autoencoder\n        <a class=\"anchor-link\" href=\"#autoencoder\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","26447f47":"<h1 id=\"logistic\" style=\"color:black; background:#fc850c; border:0.5px dotted;\"> \n    <center>Logistic Regression\n        <a class=\"anchor-link\" href=\"#logistic\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","e684cb02":"### Load","aaff404f":"### Features","83fed484":"<h1 id=\"dataset\" style=\"color:black; background:#fc850c; border:0.5px dotted;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","54042f2a":"### Features-Labels","3b731bd0":"### Remove non important columns","7f21a029":"<h1 id=\"analyze\" style=\"color:black; background:#fc850c; border:0.5px dotted;\"> \n    <center>Analyze\n        <a class=\"anchor-link\" href=\"#analyze\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","5b366dc1":"### Train","e49baa17":"### Semi-Supervised Predictions","af9ba177":"### One hot encodings"}}