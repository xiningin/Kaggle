{"cell_type":{"665f23c9":"code","a288b959":"code","d7b9543c":"code","6d402004":"code","ae969ac3":"code","1dcf52e9":"code","e5831585":"code","1b5f4b82":"code","08b50ebc":"code","0d02ad2b":"code","352c8ca8":"code","58eaa553":"code","d675e2da":"code","b526e921":"code","e3ff6c27":"code","18d57fb5":"code","f8a9f1ea":"code","ebc4ad65":"code","3e030050":"code","32a78bad":"code","5dfe1b3c":"code","a65ca329":"code","790974ba":"code","3e569389":"code","b89f209f":"code","3a754c45":"code","a0c267b8":"code","f7546be0":"code","bce96b18":"code","24a072dd":"code","b0c8edc8":"code","9a71b44b":"code","71eb20f2":"code","87aaa85f":"code","fb04d810":"code","2c89df83":"code","6cd0d4d9":"code","9b6d2ab2":"code","76fa8f79":"markdown","5783d270":"markdown","0303d377":"markdown","fd1e7494":"markdown","6124cd80":"markdown","5fb67dc5":"markdown","0316931f":"markdown","13164af3":"markdown","66589125":"markdown","b286f2f3":"markdown","526c6682":"markdown","83ca9cda":"markdown","ba780f62":"markdown"},"source":{"665f23c9":"# Importing the necessary packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a288b959":"# Reading the test dataset\ndf = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')","d7b9543c":"# Taking a look at the dataset\ndf.head(15)","6d402004":"# Information about the dataset\ndf.info()","ae969ac3":"# Converting the 'Date' column into DataTime object\ndf['Date'] = pd.to_datetime(df['Date'])","1dcf52e9":"for i in range(len(df)):\n    if df['Date'][i] == pd.to_datetime('2020-03-29') or df['Date'][i] == pd.to_datetime('2020-03-30'):\n        df.drop(index=i, inplace=True)\n        \ndf.reset_index(drop=True, inplace=True)","e5831585":"# Copying the dataframe to another dataframe\ndf2 = df.copy()","1b5f4b82":"df3 = df.copy()","08b50ebc":"df3.head(8)","0d02ad2b":"# Filling NaN value in Province_State with character string 'Unknown'\nfor i in range(len(df3)):\n    if pd.isnull(df3['Province_State'][i]):\n        df3['Province_State'][i] = 'Unknown'","352c8ca8":"# Let's check how many countries we have\ndf3['Country_Region'].unique()","58eaa553":"# Let's check how many unique dates we have\ndf3['Date'].dt.strftime('%Y-%m-%d').unique()","d675e2da":"df3_country = df3['Country_Region'].unique()\ndf3_province = df3['Province_State'].unique()\ndf3_date = df3['Date'].unique()\ndf3_date = pd.to_datetime(df3_date)","b526e921":"df3.set_index(['Country_Region', 'Province_State', 'Date'], inplace=True)","e3ff6c27":"df3.loc['United Kingdom', 'Bermuda']","18d57fb5":"df3['IncrementCases'] = 0\ndf3['IncrementFatalities'] = 0","f8a9f1ea":"df3","ebc4ad65":"# Filtering Country and Provinces which will aid in filtering and calculation\ncountry_province = []\nfor index in df3.index:\n    country_province.append(index[0:2])\ncountry_province = list(set(country_province))","3e030050":"for index in country_province:\n    for i in range(67):\n        if i == 0:\n            df3.loc[index]['IncrementCases'][i] = df3.loc[index]['ConfirmedCases'][i]\n            df3.loc[index]['IncrementFatalities'][i] = df3.loc[index]['Fatalities'][i]\n        else:\n            df3.loc[index]['IncrementCases'][i] = df3.loc[index]['ConfirmedCases'][i] - df3.loc[index]['ConfirmedCases'][i-1]\n            df3.loc[index]['IncrementFatalities'][i] = df3.loc[index]['Fatalities'][i] - df3.loc[index]['Fatalities'][i-1]\n","32a78bad":"daily_cases = df3['IncrementCases'].groupby(level=\"Date\").sum()","5dfe1b3c":"plt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = [15, 5]\nplt.plot(daily_cases)\nplt.title('Line Plot of Daily Confirmed Cases of COVID-19 around the World')\nplt.ylabel('Daily Cases')\nplt.xlabel('Date')\nplt.show()","a65ca329":"cumulative_cases = daily_cases.cumsum()","790974ba":"plt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = [15, 5]\nplt.plot(cumulative_cases)\nplt.title('Line Plot of Total Confirmed Cases of COVID-19 around the World')\nplt.ylabel('Total Number of Cases')\nplt.xlabel('Date')\nplt.show()","3e569389":"import statsmodels.api as sm\nsm.tsa.seasonal_decompose(daily_cases, model='add').plot()\nplt.show()","b89f209f":"from statsmodels.tsa.holtwinters import ExponentialSmoothing","3a754c45":"daily_fit = ExponentialSmoothing(daily_cases, freq='D', trend='add', seasonal=None).fit()","a0c267b8":"daily_fit.summary()","f7546be0":"daily_predict = daily_fit.predict(start='2020-01-22', end='2020-04-03')\ntest_predict = daily_fit.predict(start='2020-03-19', end='2020-04-30')","bce96b18":"plt.style.use('seaborn')\nplt.rcParams['figure.figsize'] = [15, 5]\nplt.plot(daily_cases, color='steelblue')\nplt.plot(daily_predict, color='red', linewidth=0.8)\nplt.legend(['Actual Cases', 'Predicted Cases'])\nplt.title('Line Plot of Daily and Predicted Cases of COVID-19 around the World')\nplt.ylabel('Daily Cases')\nplt.xlabel('Date')\nplt.show()","24a072dd":"final = []\nfor i in range(len(country_province)):\n    id = df3.loc[country_province[i]]['Id'].astype(int)\n    \n    data = df3.loc[country_province[i]]['IncrementCases']\n    fit = ExponentialSmoothing(data, freq='D', trend='add', seasonal=None).fit()\n    pred = fit.predict(start='2020-03-19', end='2020-04-30')\n    pred = round(abs(pred))\n    pred = pd.Series(pred, name='Predicted Daily Cases')\n    cum_pred = pred.cumsum()\n    cum_pred = pd.Series(cum_pred, name='Cumulative Case')\n    \n    fatality_data = df3.loc[country_province[i]]['IncrementFatalities']\n    fit2 = ExponentialSmoothing(fatality_data, freq='D', trend='add', seasonal=None).fit()\n    pred2 = fit2.predict(start='2020-03-19', end='2020-04-30')\n    pred2 = round(abs(pred2))\n    pred2 = pd.Series(pred2, name='Prediction Fatality')\n    cum_pred2 = pred2.cumsum()\n    cum_pred2 = pd.Series(cum_pred2, name='Cumulative Fatalities')\n    \n    final_df = pd.concat([id, pred, cum_pred, pred2, cum_pred2], axis=1)\n    final_df.dropna(subset=['Predicted Daily Cases'], axis=0 , inplace=True)\n    final.append(final_df)","b0c8edc8":"for i in range(len(final)):\n    final[i]['Id'] = np.arange(final[i]['Id'][0], final[i]['Id'][0]+43)\n    final[0]['Id'] = final[i]['Id'].astype(int)","9a71b44b":"a = pd.concat([df for df in final])","71eb20f2":"a.sort_values(by='Id', inplace=True)","87aaa85f":"a['Id'] = np.arange(1, 12643)","fb04d810":"a","2c89df83":"b = a[['Id', 'Cumulative Case', 'Cumulative Fatalities']]","6cd0d4d9":"b.columns = ['ForecastId', 'ConfirmedCases', 'Fatalities']","9b6d2ab2":"b.to_csv('submission.csv', index=False)","76fa8f79":"Now, we are going to plot the **Daily Confirmed Cases of COVID-19 around the World** as a Time Series.","5783d270":"Consider the fact that the Total Daily cases witnessed is afterall the linear combination of individual Country\/ Province. Hence, we can try to fit a Linear Model where,\n$$Y~is~the~Total~Daily~Cases$$ and $$X_i~is~Country~\/~Province$$","0303d377":"### Plotting the prediction form ExponentialSmoothing","fd1e7494":"The data is given from **Jan 22** to **Mar 28**.","6124cd80":"Now, it is difficult to predict the number of fatalities with the given data. But the data is good enough for forecasting the **Daily Cases of COVID-19 around the World** i.e. we are going to use Econometric Time Series analysis.\nConsider the seasonal decomposition with a **Additive Model**.","5fb67dc5":"Now we are going to define a column **'IncrementCases'** that will constitute the daily increment in number of cases.","0316931f":"## Time Series Analysis","13164af3":"Now that we have the picture of Daily affected cases, we can now go for prediction for the world!","66589125":"Here, we observe that there is an upward trend in the Time Series.\nWe are going to fit an exponential smoothing method and the make predictions.","b286f2f3":"Now, we are going to plot the **Total Confirmed Cases of COVID-19 around the World** as a Time Series.","526c6682":"So, now we are going to index the data first by **'Country_Region'**  then by **Province_State** then by **'Date'**.","83ca9cda":"We can also do the above analysis for each country separately.","ba780f62":"There are total **173** unique countries."}}