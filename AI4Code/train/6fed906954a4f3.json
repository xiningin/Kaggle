{"cell_type":{"d92b4c11":"code","68feb7cf":"code","0ecc7809":"code","57322af6":"code","a1ef3203":"code","98ae8649":"code","2f417f4b":"code","25d23561":"code","9276fd69":"code","76fb8260":"code","307438b8":"code","09f418f4":"code","9db9be04":"code","d2dcbf81":"code","ed63ce1d":"code","a2e74374":"code","1ba7e631":"code","7a3400bf":"code","cdada649":"code","24c44c08":"code","b19698af":"code","ee08de0a":"markdown"},"source":{"d92b4c11":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68feb7cf":"# packages import \n# \u5bfc\u5165\u5206\u6790\u6240\u9700\u8981\u7684\u5305\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport missingno as msno \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score,roc_auc_score,confusion_matrix\n%matplotlib inline ","0ecc7809":"# import dataset \ndf = pd.read_csv('\/kaggle\/input\/adult-census-income\/adult.csv')\ndf.head(3)","57322af6":"# check data information\ndf.describe(include='all')","a1ef3203":"#remove space \ndef remove_strip(df,col):\n    df[col] = df[col].str.lstrip()\n\ncols = df.loc[:,df.dtypes=='object'].columns.tolist()\nfor col in cols:\n    remove_strip(df,col)","98ae8649":"# new dataframe\nnew_df = df.drop(columns = ['fnlwgt','education','occupation'])\n\n# us and non us \nnew_df['native-country'] = new_df['native.country'].apply(\n    lambda x: 1 if x == 'United-States' else 0)\n\n# check dataset \nnew_df.head()","2f417f4b":"# change category \ncategory_cols = new_df.loc[:,new_df.dtypes=='object'].columns.tolist()\nfor col in category_cols:\n    new_df[col] = new_df[col].astype('category')","25d23561":"# change variable to binary \n# income\nnew_df['income'] = new_df['income'].str.replace('<=50K','0')\nnew_df['income'] = new_df['income'].str.replace('>50K','1')\nnew_df['income'] = new_df['income'].astype('int')\n\n# sex\nnew_df['sex'] = new_df['sex'].str.replace('Male','0')\nnew_df['sex'] = new_df['sex'].str.replace('Female','1')\nnew_df['sex'] = new_df['sex'].astype('int')\n\nnew_df.info()","9276fd69":"# missing value visualization\nfig,(ax1,ax2) = plt.subplots(1,2,figsize = (12,5))\n\nmsno.matrix(new_df,labels=True,figsize=(6,5),fontsize=9,ax = ax1)\nmsno.heatmap(new_df,figsize = (6,5),fontsize=9,labels = True,ax = ax2)\n\nplt.tight_layout()\nplt.show()","76fb8260":"# fill na with mode \nnew_df['workclass'] = new_df['workclass'].fillna(new_df['workclass'].mode()[0])","307438b8":"# income distribution \nsns.countplot(new_df['income'])","09f418f4":"# relationship between target and other variables\nsns.heatmap(new_df.corr()[['income']],annot = True,cmap = 'coolwarm')","9db9be04":"# distriburion in income\nbox_cols = [\n    'age', 'education.num', 'capital.gain', 'capital.loss', 'hours.per.week'\n]\n\nfor col in box_cols:\n    plt.figure(figsize=(6,4))\n    sns.boxplot(data=new_df, x='income', y=col)\n    plt.title(col)\n    plt.show()","d2dcbf81":"#distribution of categorical variables\ndiscrete_cols = ['workclass','marital.status','relationship','race','sex','native-country']\nfor col in discrete_cols:\n    plt.figure(figsize = (6,4))\n    sns.countplot(data = new_df,y = col)\n    plt.title(col)\n    plt.xlabel('')\n    plt.show()","ed63ce1d":"# chi square test \nfor col in discrete_cols:\n    plt.figure(figsize = (6,4))\n    new_df.groupby(col)['income'].value_counts(\n        normalize=True).sort_index().unstack().plot.bar(stacked=True)\n    plt.title(col)\n    plt.show()","a2e74374":"x = pd.get_dummies(new_df).drop(columns = 'income')\ny = new_df['income']","1ba7e631":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 72)","7a3400bf":"# decistion tree \ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ndt.score(x_test,y_test)","cdada649":"# logistic regression \nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nlr.score(x_test,y_test)","24c44c08":"# knn\nknn = KNeighborsClassifier()\nknn.fit(x_train,y_train)\nknn.score(x_test,y_test)","b19698af":"pd.DataFrame(dt.feature_importances_, index=x.columns,\n             columns=['Importance']).sort_values('Importance', ascending=False).head(5)","ee08de0a":"variabels choose:\n1. keep continous variables instead keep both continous and discrete variables\n2. drop no meaning variabels \n3. create new variables: native country change to us and non-us "}}