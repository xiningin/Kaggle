{"cell_type":{"e79cf124":"code","a5cef1bb":"code","c4fd4f5e":"code","516c26aa":"code","cd3adbe0":"code","608a5a40":"code","bbe023a8":"code","bf758d6b":"code","cb7343f8":"code","e34b9164":"code","b51c2e40":"code","4247838e":"code","d6739152":"code","7eea4446":"code","3f61cfd2":"code","b95dd71a":"code","1bddc4ed":"code","2314c17a":"code","e08d3f31":"code","c01c0249":"code","4feb7f5d":"code","2cf5b40a":"code","5fb0c5b2":"code","348ac094":"code","106c4375":"code","cc1be70d":"code","b3486b31":"code","014e60d6":"code","5181a74e":"code","4512b3bc":"code","f1025ee1":"code","853dfb71":"code","49a7c8d0":"code","abbf2964":"code","1f5a56c6":"code","41ef80b3":"code","0838b406":"code","66d9b00c":"code","6f90f265":"code","2848f3e8":"code","751b85c3":"code","c3d366f6":"code","152fefd0":"code","76e71ae5":"code","e26fe876":"code","a7c9b5ad":"code","64ec9e50":"code","e329b453":"code","d7d6d1d5":"code","8cda119d":"code","166a4d67":"code","2053dcaf":"code","7a67c6e3":"code","dd8c1751":"code","ce06ef0f":"code","675a6c56":"code","e3e4e092":"code","5d343dcc":"code","33a0a451":"code","e9bc3649":"code","d2df5ad5":"code","b2b7d705":"code","ce199e25":"code","91871c91":"code","b68cbf52":"code","13d3cad2":"code","d82cb276":"code","7214b427":"code","c5809a1a":"code","6283f4a3":"code","5662dca0":"code","655a7eaa":"code","ee3ee8ce":"code","c8dc4831":"code","09a98409":"code","c7a51a8c":"code","c478a0ae":"code","44678029":"code","47820820":"code","9767b7a4":"code","cd422f38":"code","72389ae2":"code","b5740999":"code","e9af2049":"code","d10caccc":"code","e36c3544":"code","30d3f85c":"code","72047485":"code","443af91c":"code","ef96ad57":"code","da8478c2":"code","bf2cc80c":"code","7d64ee91":"code","2ae0e511":"code","8a0a4472":"code","a7ba9703":"code","cb2b317c":"code","324df7bd":"code","cd7a5ad7":"code","77ba9eda":"code","ecd6e4b0":"code","7ad705ac":"code","3a963a2e":"code","f1c3cf37":"code","8782d3e1":"code","993b05ef":"code","397b918b":"code","95c1eef2":"code","575d81d0":"code","4e7a4264":"code","9e443bfb":"code","6bc38805":"code","5dff7317":"code","b427745b":"code","32cd4cc6":"code","eb2d085a":"code","1312eddc":"code","e2dc791f":"code","7a0ec6f1":"markdown","8faa57ed":"markdown","ec44cb95":"markdown","7b63b171":"markdown","6d8211cf":"markdown","9409b825":"markdown","814cfb86":"markdown","a14d48ea":"markdown","17f89911":"markdown","8573d612":"markdown","4dc9d5dd":"markdown","78dac719":"markdown","d8334465":"markdown","4c91ce82":"markdown","ac8d4b1c":"markdown","0f8d16d2":"markdown","59c5caf3":"markdown","771315bc":"markdown","43db184d":"markdown","24004183":"markdown","2fc250af":"markdown","75da75da":"markdown","378e8ec2":"markdown","6d08ee38":"markdown","c29e5ab9":"markdown","b121cd7b":"markdown","65e61f24":"markdown","5338f6d4":"markdown","3f31537f":"markdown","ab1796b6":"markdown"},"source":{"e79cf124":"# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.time_series.ex3 import *\n\n# Setup notebook\nfrom pathlib import Path\nfrom learntools.time_series.style import *  # plot style settings\nfrom learntools.time_series.utils import plot_periodogram, seasonal_plot\n\nimport time\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso, ElasticNet, Ridge\n\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\nfrom sklearn.metrics import mean_squared_log_error\n\ncomp_dir = Path('..\/input\/store-sales-time-series-forecasting')\n\nholidays_events = pd.read_csv(\n    comp_dir \/ \"holidays_events.csv\",\n    dtype={\n        'type': 'category',\n        'locale': 'category',\n        'locale_name': 'category',\n        'description': 'category',\n        'transferred': 'bool',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nholidays_events = holidays_events.set_index('date').to_period('D')\n\nstore_sales = pd.read_csv(\n    comp_dir \/ 'train.csv',\n    usecols=['store_nbr', 'family', 'date', 'sales'],\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\nstore_sales['date'] = store_sales.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\n\naverage_sales = (\n    store_sales\n    .groupby('date').mean()\n    .squeeze()\n    .loc['2017']\n)","a5cef1bb":"average_sales.head()","c4fd4f5e":"X = average_sales.to_frame()\nX[\"week\"] = X.index.week\nX[\"day\"] = X.index.dayofweek\nseasonal_plot(X, y='sales', period='week', freq='day');","516c26aa":"plot_periodogram(average_sales);","cd3adbe0":"# View the solution (Run this cell to receive credit!)\nq_1.check()","608a5a40":"y = average_sales.copy()\n\n# YOUR CODE HERE\nfourier = CalendarFourier(freq='M', order=4)\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    # YOUR CODE HERE\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\n\n# Check your answer\nq_2.check()","bbe023a8":"# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","bf758d6b":"model = LinearRegression().fit(X, y)\n\ny_pred = pd.Series(\n    model.predict(X),\n    index=X.index,\n    name='Fitted',\n)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\n\nax = y.plot(**plot_params, alpha=0.5, title=\"Average Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax.legend();","cb7343f8":"y_deseason = y - y_pred\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(10, 7))\nax1 = plot_periodogram(y, ax=ax1)\nax1.set_title(\"Product Sales Frequency Components\")\nax2 = plot_periodogram(y_deseason, ax=ax2);\nax2.set_title(\"Deseasonalized\");","e34b9164":"# View the solution (Run this cell to receive credit!)\nq_3.check()","b51c2e40":"# National and regional holidays in the training set\nholidays = (\n    holidays_events\n    .query(\"locale in ['National', 'Regional']\")\n    .loc['2017':'2017-08-15', ['description']]\n    .assign(description=lambda x: x.description.cat.remove_unused_categories())\n)\n\ndisplay(holidays)","4247838e":"ax = y_deseason.plot(**plot_params)\nplt.plot_date(holidays.index, y_deseason[holidays.index], color='C3')\nax.set_title('National and Regional Holidays');","d6739152":"# YOUR CODE HERE\n# Pandas solution\nX_holidays = pd.get_dummies(holidays)\n\n# Join to training data\nX2 = X.join(X_holidays, on='date').fillna(0.0)\n\n\n# Check your answer\nq_4.check()","7eea4446":"# Scikit-learn solution\nfrom sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(sparse=False)\n\nX_holidays = pd.DataFrame(\n    ohe.fit_transform(holidays),\n    index=holidays.index,\n    columns=holidays.description.unique(),\n)","3f61cfd2":"# Lines below will give you a hint or solution code\n#q_4.hint()\n#q_4.hint(2)\n#q_4.solution()","b95dd71a":"model = LinearRegression().fit(X2, y)\n\ny_pred = pd.Series(\n    model.predict(X2),\n    index=X2.index,\n    name='Fitted',\n)\n\ny_pred = pd.Series(model.predict(X2), index=X2.index)\n\nax = y.plot(**plot_params, alpha=0.5, title=\"Average Sales\", ylabel=\"items sold\")\nax = y_pred.plot(ax=ax, label=\"Seasonal\")\nax.legend();","1bddc4ed":"store_sales.shape","2314c17a":"store_sales.head(10)","e08d3f31":"store_sales.index[:3]","c01c0249":"#y = store_sales.unstack(['store_nbr', 'family']).loc[\"2017\"] #V1,2 X: 227 rows \u00d7 17 columns ---> y: 227 rows \u00d7 1782 columns\n#y = store_sales.unstack(['store_nbr', 'family'])                #V7 X: 1684 rows \u00d7 17 columns ---> y:1684 rows \u00d7 1782 columns\n#y = store_sales.unstack(['store_nbr', 'family']).loc[\"2016\":]     #V8 X: 592 rows \u00d7 17 columns ---> y:592 rows \u00d7 1782 columns\n\n#VX use last 16 days of the training set as the validation set, see performance since we only get 4 kaggle submissions, pick best, train on training + validation set, submit to kaggle\n\n#last 16 days of the training set\ntrain_start_date='2017-04-01'\n#train_end_date='2017-07-31'\nvalid_end_date='2017-08-15'\n\n#y = store_sales.unstack(['store_nbr', 'family']).loc[train_start_date:valid_end_date] #V9\n#y = store_sales.unstack(['store_nbr', 'family']).loc[\"2017\"] #V9B\ny = store_sales.unstack(['store_nbr', 'family']).loc[train_start_date:valid_end_date] #V9C\n\n#y_valid =  store_sales.unstack(['store_nbr', 'family']).loc[train_end_date:]\n\n# Create training data\n#fourier = CalendarFourier(freq='M', order=4) #V1\nfourier = CalendarFourier(freq='W', order=4)  #V9\n\ndp = DeterministicProcess(\n    index=y.index,\n    #constant=True,  #V1\n    constant=False,  #V9\n    order=1,\n    #seasonal=True,   #V1\n    seasonal=False,   #V9 use fourier instead of one-hot encoded days of the week\n    additional_terms=[fourier],\n    drop=True,\n)\n\nX = dp.in_sample()\nX['NewYear'] = (X.index.dayofyear == 1)\nX['NewYear'] = X['NewYear'].astype('category') #V1 .astype('category')\nprint(X.shape, y.shape)\n#print(X.dtypes, y.dtypes)","4feb7f5d":"#average store_sales\nstore_sales.groupby('date').mean().squeeze().plot();","2cf5b40a":"store_sales.groupby('date').mean().squeeze().loc[train_start_date:valid_end_date].plot();","5fb0c5b2":"X","348ac094":"y","106c4375":"%%time\n\n#model = LinearRegression(fit_intercept=False) #V1_LR\n#model = Lasso(alpha=0.1)                      #V1_Lasso, Linear with L1 weight regularization\n#model = ElasticNet(alpha=0.1, l1_ratio=0.5)  #V1,9_ElasticNet, Linear with Lr weight regularization\n#model = Ridge(alpha=1, solver=\"cholesky\")    #V1_Ridge, Linear with L2 weight regularization\nmodel = Ridge(fit_intercept=True, solver='auto', alpha=0.9, normalize=True) # V9CRidge_0.1 try alpha 0.1, 0.3, 0.5, 0.6, 0.7 and 0.9\n\nmodel.fit(X, y)","cc1be70d":"y_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)\ny_pred","b3486b31":"model.coef_.shape ","014e60d6":"y_pred_metrics   = y_pred.stack(['store_nbr', 'family']).reset_index().copy()\ny_target = y.stack(['store_nbr', 'family']).reset_index().copy()\ny_target['sales_pred'] = y_pred_metrics['sales'].clip(0.) ","5181a74e":"y_pred_metrics","4512b3bc":"y_target","f1025ee1":"def generate_df_msle_info(y_target, version, X, y, model, kaggle_rmsle):\n    \n    #Calculate msle on training set\n    msle = y_target.groupby('family').apply(lambda r: mean_squared_log_error(r['sales'], r['sales_pred']))\n    df_msle = pd.DataFrame(msle)\n    df_msle.rename({0:'train_msle'}, axis=1, inplace=True)\n\n    #Detailed information on features X, target y, model used and performance on training set and kaggle test set\n    info = {'version': version,\n    'X.index.min': X.index.min(),\n    'X.index.max': X.index.max(),\n    'y.index.min': y.index.min(),\n    'y.index.max': y.index.max(),\n    'X.shape': str(X.shape),\n    'y.shape': str(y.shape),\n    'models': model,\n    'train_msle_mean': df_msle.mean().values[0],\n    'kaggle_rmsle': kaggle_rmsle\n    }\n    \n    #Pivot long df to wide df\n    df_info = pd.DataFrame.from_dict(info, orient='index').transpose()\n    #Repeat single df row len(df_msle) times\n    df_info = df_info.loc[df_info.index.repeat(len(df_msle))].reset_index(drop=True)\n    #family set to df_msle.index\n    df_info['family'] = df_msle.index\n    \n    #Join df_msle and df_info on family\n    df_msle_info = pd.merge(df_msle, df_info, left_index=True, right_on='family')\n    df_msle_info = df_msle_info[['version', 'X.index.min', 'X.index.max', 'y.index.min',\n       'y.index.max', 'X.shape', 'y.shape', 'models', 'train_msle_mean',\n       'kaggle_rmsle', 'family', 'train_msle']]\n\n    df_msle_info\n\n    return df_msle_info","853dfb71":"df_msle_info.tail()","49a7c8d0":"my_models_path = '..\/input\/models\/'\n\n#Read from my Kaggle models dataset\ndf_msle_info = pd.read_pickle(my_models_path+'df_msle_info.pkl')\ndf_msle_info.tail(3)\n\n#Store locally\n#df_msle_info.to_pickle('df_msle_info.pkl')","abbf2964":"#df_msle_info_new = generate_df_msle_info(y_target, 'V1_LR', X, y, str(model), 0.51090)\n#df_msle_info = df_msle_info_new.copy()\n\n#df_msle_info_new = generate_df_msle_info(y_target, 'V1_Lasso', X, y, str(model), 0.50770)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V1_ElasticNet', X, y, str(model), 0.50519)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9_ElasticNet', X, y, str(model), 0.45707)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9B_ElasticNet', X, y, str(model), -1)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9CRidge_0.1', X, y, str(model), -1)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9CRidge_0.3', X, y, str(model), -1)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9CRidge_0.5', X, y, str(model), -1)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9CRidge_0.6', X, y, str(model), -1)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9CRidge_0.7', X, y, str(model), -1)\n#df_msle_info_new = generate_df_msle_info(y_target, 'V9CRidge_0.9', X, y, str(model), -1)\n\ndf_msle_info_new.head(3)","1f5a56c6":"df_msle_info_new.head(3)","41ef80b3":"df_msle_info.columns","0838b406":"print(df_msle_info.shape)\ndf_msle_info = df_msle_info.append(df_msle_info_new, ignore_index=True)\nprint(df_msle_info.shape)","66d9b00c":"df_msle_info.tail(3)","6f90f265":"#Helpful plot method for msle on the training set per family item\ndef plot_df_msle_info(df_msle_info, version_list, figsize=(16, 9)):\n    plt.rcParams[\"figure.figsize\"] = figsize\n    #df_msle_info.plot(kind='bar',x='family',y='train_msle');\n    ax = sns.barplot(x='family', y='train_msle', hue='version', data=df_msle_info[df_msle_info['version'].isin(version_list)])\n    for item in ax.get_xticklabels():\n        item.set_rotation(90)","2848f3e8":"version_list = df_msle_info.version.unique()\nplot_df_msle_info(df_msle_info, version_list)","751b85c3":"version_list = [v for v in df_msle_info.version.unique() if 'V9' in v if v not in 'V9B_ElasticNet']\nplot_df_msle_info(df_msle_info, version_list)","c3d366f6":"family_list = ['BEVERAGES', 'BREAD\/BAKERY', 'GROCERY I', 'GROCERY II', 'LIQUOR,WINE,BEER', 'SCHOOL AND OFFICE SUPPLIES']\ndf = df_msle_info[df_msle_info['family'].isin(family_list)].copy()\ndf.family = df.family.astype(str)\nversion_list = df_msle_info.version.unique()\nplot_df_msle_info(df, version_list)","152fefd0":"version_list = [v for v in df_msle_info.version.unique() if 'V9' in v if v not in 'V9B_ElasticNet']\nplot_df_msle_info(df, version_list)","76e71ae5":"#df_msle_info.loc[df_msle_info['version'] == 'V1_Lasso', 'kaggle_rmsle'] = 0.50770\n#df_msle_info.loc[df_msle_info['version'] == 'V1_ElasticNet', 'kaggle_rmsle'] = 0.50519\n#df_msle_info.loc[df_msle_info['version'] == 'V1_Ridge', 'kaggle_rmsle'] = 0.50920\n#df_msle_info.loc[df_msle_info['version'] == 'V9_ElasticNet', 'kaggle_rmsle'] = 0.45707\n#df_msle_info.loc[df_msle_info['version'] == 'V9CRidge_0.1', 'kaggle_rmsle'] = 0.45306\n#df_msle_info.loc[df_msle_info['version'] == 'V9CRidge_0.5', 'kaggle_rmsle'] = 0.44314\n#df_msle_info.loc[df_msle_info['version'] == 'V9CRidge_0.6', 'kaggle_rmsle'] = 0.44359\n#df_msle_info.loc[df_msle_info['version'] == 'V9CRidge_0.7', 'kaggle_rmsle'] = 0.44435\n#df_msle_info.loc[df_msle_info['version'] == 'V9CRidge_0.9', 'kaggle_rmsle'] = 0.44616\n\n#df_msle_info.loc[df_msle_info['version'] == '', 'kaggle_rmsle'] =","e26fe876":"groupedvalues = df_msle_info[~df_msle_info.version.isin(['V9B_ElasticNet', 'V9CRidge_0.3'])].groupby('version').min().reset_index().sort_values(by=['kaggle_rmsle'], ascending=True)\ngroupedvalues.head()","a7c9b5ad":"print(plt.style.available)\nplt.style.use('default')","64ec9e50":"#Vertical bar chart\n#ax = groupedvalues.plot(kind='bar',x='version',y='kaggle_rmsle', figsize=(16, 9));\n#for p in ax.patches:\n#    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\n\n#Horizontal bar chart    \nax = groupedvalues.plot(kind='barh',x='version',y='kaggle_rmsle', figsize=(16, 9));\nfor p in ax.patches:\n    ax.annotate(str(p.get_width()), (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 10), textcoords='offset points')","e329b453":"df_msle_info.to_pickle(\".\/df_msle_info.pkl\")\n#df_msle_info = pd.read_pickle(\".\/df_msle_info.pkl\")","d7d6d1d5":"STORE_NBR = '1'  # 1 - 54\nFAMILY = 'BEVERAGES'\n# Uncomment to see a list of product families\ndisplay(store_sales.index.get_level_values('family').unique())\n\nax = y.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(**plot_params)\nax = y_pred.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(ax=ax)\nax.set_title(f'{FAMILY} Sales at Store {STORE_NBR}');","8cda119d":"STORE_NBR = '2'  # 1 - 54\nFAMILY = 'BEVERAGES'\n# Uncomment to see a list of product families\n#display(store_sales.index.get_level_values('family').unique())\n\nax = y.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(**plot_params)\nax = y_pred.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(ax=ax)\nax.set_title(f'{FAMILY} Sales at Store {STORE_NBR}');","166a4d67":"STORE_NBR = '1'  # 1 - 54\nFAMILY = 'AUTOMOTIVE'\n# Uncomment to see a list of product families\n#display(store_sales.index.get_level_values('family').unique())\n\nax = y.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(**plot_params)\nax = y_pred.loc(axis=1)['sales', STORE_NBR, FAMILY].plot(ax=ax)\nax.set_title(f'{FAMILY} Sales at Store {STORE_NBR}');","2053dcaf":"df_test = pd.read_csv(\n    comp_dir \/ 'test.csv',\n    dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'uint32',\n    },\n    parse_dates=['date'],\n    infer_datetime_format=True,\n)\ndf_test['date'] = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()","7a67c6e3":"df_test","dd8c1751":"list(df_test.index.get_level_values('date').unique())","ce06ef0f":"# Create features for test set\nX_test = dp.out_of_sample(16) # ??? V2\nX_test","675a6c56":"model","e3e4e092":"df_msle_info.tail(3)","5d343dcc":"X_test.index.name = 'date'\nX_test['NewYear'] = (X_test.index.dayofyear == 1)\n\ny_pred = model.predict(X_test).clip(0.0)","33a0a451":"y_submit = pd.DataFrame(y_pred, index=X_test.index, columns=y.columns)\ny_submit = y_submit.stack(['store_nbr', 'family'])\ny_submit = y_submit.join(df_test.id).reindex(columns=['id', 'sales'])\ny_submit.to_csv('Time Series - Seasonality V9CRidge_0.9.csv', index=False)","e9bc3649":"y_submit","d2df5ad5":"#y = store_sales.unstack(['store_nbr', 'family']).loc[\"2017\"]\ny = store_sales.reset_index(level=[0,1]).loc[\"2017\"]         #??? Keep only 2017 ? \ny ","b2b7d705":"# Create training data\nfourier = CalendarFourier(freq='M', order=4)\n\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\n\nX = dp.in_sample()\nX['NewYear'] = (X.index.dayofyear == 1)\nX","ce199e25":"from sklearn.preprocessing import LabelEncoder\n\n# Label encoding for 'family'\nle = LabelEncoder()  # from sklearn.preprocessing\nX['family'] = le.fit_transform(y['family'])\n\nX['store_nbr'] = y['store_nbr']  # V4 le.fit_transform(y['store_nbr'])\n\nX[\"day\"] = X.index.day  # values are day of the month\nX","91871c91":"y","b68cbf52":"y.pop('store_nbr')\ny.pop('family')\ny","13d3cad2":"model = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)","d82cb276":"y_pred = pd.DataFrame(model.predict(X), index=X.index, columns=['sales'])","7214b427":"y_pred","c5809a1a":"df_test","6283f4a3":"df_test_long = df_test.reset_index(level=[0,1])\ndf_test_long","5662dca0":"# Create test data\nfourier = CalendarFourier(freq='M', order=4)\ndp_test = DeterministicProcess(\n    index=df_test_long.index,      # <------\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\n\nX_test = dp_test.in_sample()      # <------\nX_test['NewYear'] = (X_test.index.dayofyear == 1)\nX_test","655a7eaa":"# Create features for test set\n#X_test = dp.out_of_sample(16) # ??? V2\n\nX_test['NewYear'] = (X_test.index.dayofyear == 1)\n\n# Label encoding for 'family'\nX_test['family'] = le.transform(df_test_long['family'])\nX_test['store_nbr'] = df_test_long['store_nbr']\n\nX_test[\"day\"] = X_test.index.day  # values are day of the month\nX_test","ee3ee8ce":"y_pred = model.predict(X_test)\ny_pred.shape","c8dc4831":"df_test_long","09a98409":"y_submit = pd.DataFrame(y_pred, index=X_test.index, columns=y.columns)\ny_submit['id'] = df_test_long['id']\n#y_submit = y_submit.stack(['store_nbr', 'family'])\n#y_submit = y_submit.join(df_test.id).reindex(columns=['id', 'sales'])\n#y_submit.to_csv('submission.csv', index=False)\ny_submit = y_submit.reset_index().drop('date', axis=1)\ny_submit = y_submit[['id', 'sales']]\ny_submit","c7a51a8c":"y_submit.to_csv('submission.csv', index=False)","c478a0ae":"plt.hist(y_submit['sales'], bins='auto')","44678029":"X","47820820":"y","9767b7a4":"from xgboost import XGBRegressor\n\nX.store_nbr = X.store_nbr.astype(int)\navoid_error = \"\"\"ValueError: DataFrame.dtypes for data must be int, float, bool or category.  When\n                categorical type is supplied, DMatrix parameter `enable_categorical` must\n                be set to `True`.store_nbr\n\"\"\"\n\nmodel = XGBRegressor()\nmodel.fit(X, y)\n\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=['sales'])\nprint(y_pred)\ny_pred","cd422f38":"X_test","72389ae2":"y_pred = model.predict(X_test)\nprint(y_pred)\ny_pred","b5740999":"y_submit = pd.DataFrame(y_pred, index=X_test.index, columns=y.columns)\ny_submit['id'] = df_test_long['id']\ny_submit = y_submit.reset_index().drop('date', axis=1)\ny_submit = y_submit[['id', 'sales']]\ny_submit","e9af2049":"y_submit.to_csv('submission.csv', index=False)","d10caccc":"plt.hist(y_submit['sales'], bins='auto');","e36c3544":"y_submit_clipped = y_submit.clip(0.0)\ny_submit_clipped.to_csv('submission.csv', index=False)\nplt.hist(y_submit_clipped['sales'], bins='auto');","30d3f85c":"X_original = X.copy()\ny_original = y.copy()","72047485":"X = X_original.copy()\nX","443af91c":"y = y_original.copy()\ny","ef96ad57":"from sklearn.preprocessing import OneHotEncoder\n\nfamily_ohe = OneHotEncoder(sparse=False)\nfamily_df = pd.DataFrame(family_ohe.fit_transform(X[['family']]))\nfamily_df.columns = ['family_'+str(col_name) for col_name in family_df.columns] \nfamily_df.index = X.index\nfamily_df","da8478c2":"store_nbr_ohe = OneHotEncoder(sparse=False)\nstore_nbr_df = pd.DataFrame(store_nbr_ohe.fit_transform(X[['store_nbr']]))\nstore_nbr_df.columns = ['store_nbr_'+str(col_name) for col_name in store_nbr_df.columns] \nstore_nbr_df.index = X.index\nstore_nbr_df","bf2cc80c":"X.pop('family')\nX.pop('store_nbr')","7d64ee91":"print(X.shape, family_df.shape, store_nbr_df.shape)","2ae0e511":"X","8a0a4472":"X = pd.concat([X, family_df, store_nbr_df], axis=1)\nX","a7ba9703":"y","cb2b317c":"model = LinearRegression(fit_intercept=False)\nmodel.fit(X, y)","324df7bd":"model.coef_.shape","cd7a5ad7":"y_pred = pd.DataFrame(model.predict(X), index=X.index, columns=['sales'])\ny_pred","77ba9eda":"df_test_long","ecd6e4b0":"# Create test data\nfourier = CalendarFourier(freq='M', order=4)\ndp_test = DeterministicProcess(\n    index=df_test_long.index,      # <------\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\n\nX_test = dp_test.in_sample()      # <------\nX_test['NewYear'] = (X_test.index.dayofyear == 1)\nX_test","7ad705ac":"X_test['NewYear'] = (X_test.index.dayofyear == 1)\n\n# Label encoding for 'family'\nX_test['family'] = le.transform(df_test_long['family'])\nX_test['store_nbr'] = df_test_long['store_nbr']\n\nX_test[\"day\"] = X_test.index.day  # values are day of the month\nX_test","3a963a2e":"#family_ohe = OneHotEncoder(sparse=False)\nfamily_df = pd.DataFrame(family_ohe.transform(X_test[['family']]))\nfamily_df.columns = ['family_'+str(col_name) for col_name in family_df.columns] \nfamily_df.index = X_test.index\nfamily_df","f1c3cf37":"#store_nbr_ohe = OneHotEncoder(sparse=False)\nstore_nbr_df = pd.DataFrame(store_nbr_ohe.transform(X_test[['store_nbr']]))\nstore_nbr_df.columns = ['store_nbr_'+str(col_name) for col_name in store_nbr_df.columns] \nstore_nbr_df.index = X_test.index\nstore_nbr_df","8782d3e1":"X_test.pop('family')\nX_test.pop('store_nbr')","993b05ef":"print(X_test.shape, family_df.shape, store_nbr_df.shape)\nX_test = pd.concat([X_test, family_df, store_nbr_df], axis=1)","397b918b":"X_test","95c1eef2":"y_pred = model.predict(X_test)\nprint(y_pred.shape)\ny_pred","575d81d0":"y_submit = pd.DataFrame(y_pred, index=X_test.index, columns=y.columns)\ny_submit['id'] = df_test_long['id']\ny_submit = y_submit.reset_index().drop('date', axis=1)\ny_submit = y_submit[['id', 'sales']]\ny_submit","4e7a4264":"y_submit.to_csv('submission.csv', index=False)\nplt.hist(y_submit['sales'], bins='auto');","9e443bfb":"y_submit_clipped = y_submit.clip(0.0)\ny_submit_clipped.to_csv('submission-clipped.csv', index=False)\nplt.hist(y_submit_clipped['sales'], bins='auto');","6bc38805":"X","5dff7317":"y","b427745b":"model = XGBRegressor()\nmodel.fit(X, y)\n\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=['sales'])\nprint(y_pred)\ny_pred","32cd4cc6":"y_pred = model.predict(X_test)\nprint(y_pred.shape)\ny_pred","eb2d085a":"y_submit = pd.DataFrame(y_pred, index=X_test.index, columns=y.columns)\ny_submit['id'] = df_test_long['id']\ny_submit = y_submit.reset_index().drop('date', axis=1)\ny_submit = y_submit[['id', 'sales']]\ny_submit","1312eddc":"y_submit.to_csv('submission.csv', index=False)\nplt.hist(y_submit['sales'], bins='auto');","e2dc791f":"y_submit_clipped = y_submit.clip(0.0)\ny_submit_clipped.to_csv('submission-clipped.csv', index=False)\nplt.hist(y_submit_clipped['sales'], bins='auto');","7a0ec6f1":"### Useful hints and ideas from other Kagglers\nhttps:\/\/www.kaggle.com\/xholisilemantshongo\/modeling-sales-3-types-of-regression\/notebook","8faa57ed":"You can use this cell to see some of its predictions.\n","ec44cb95":"### V4...: X.shape: 404514 rows \u00d7 19 columns ---> y.shape: 404514 rows \u00d7 1 columns XGBRegressor()","7b63b171":"**This notebook is an exercise in the [Time Series](https:\/\/www.kaggle.com\/learn\/time-series) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/seasonality).**\n\n---\n","6d8211cf":"# 3) Check for remaining seasonality\n\nBased on these periodograms, how effectively does it appear your model captured the seasonality in *Average Sales*? Does the periodogram agree with the time plot of the deseasonalized series?","9409b825":"### Store df_msle_info as a pickle object and re-import later","814cfb86":"Now run this cell to fit the seasonal model.","a14d48ea":"### V6...: X.shape: 404514 rows \u00d7 105 columns ---> y.shape: 404514 rows \u00d7 1 columns OneHotEncoder family, strore_nbr + XGBRegressor()","17f89911":"### Read stored df_msle_info dataframe","8573d612":"### Calculate mean_squared_log_error on the training set","4dc9d5dd":"### V5...: X.shape: 404514 rows \u00d7 105 columns ---> y.shape: 404514 rows \u00d7 1 columns OneHotEncoder family, strore_nbr + LinearRegression(fit_intercept=False)","78dac719":"-------------------------------------------------------------------------------\n\nThe *Store Sales* dataset includes a table of Ecuadorian holidays.","d8334465":"Removing from a series its trend or seasons is called **detrending** or **deseasonalizing** the series.\n\nLook at the periodogram of the deseasonalized series.","4c91ce82":"To test your forecasts, you'll need to join the competition (if you haven't already). So open a new window by clicking on [this link](https:\/\/www.kaggle.com\/c\/29781). Then click on the **Join Competition** button.\n\nNext, follow the instructions below:\n1. Begin by clicking on the **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the file you would like to submit, and click on the **Submit** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.\n","ac8d4b1c":"-------------------------------------------------------------------------------\n\n# (Optional) Submit to Store Sales competition\n\nThis part of the exercise will walk you through your first submission to this course's companion competition: [**Store Sales - Time Series Forecasting**](https:\/\/www.kaggle.com\/c\/29781). Submitting to the competition isn't required to complete the course, but it's a great way to try out your new skills.\n\nThe next cell creates a seasonal model of the kind you've learned about in this lesson for the full *Store Sales* dataset with all 1800 time series.","0f8d16d2":"-------------------------------------------------------------------------------\n\nExamine the following seasonal plot:","59c5caf3":"-------------------------------------------------------------------------------\n","771315bc":"# Introduction #\n\nRun this cell to set everything up!","43db184d":"# 4) Create holiday features\n\nWhat kind of features could you create to help your model make use of this information? Code your answer in the next cell. (Scikit-learn and Pandas both have utilities that should make this easy. See the `hint` if you'd like more details.)\n","24004183":"### We are training 1782 different LinearRegression models using these (X) time based features \ud83d\ude2e","2fc250af":"### V1,2:  X.shape: 227x17 ---> y.shape: 227x1782   LinearRegression(fit_intercept=False)\n### V3...: X.shape: 404514x19 ---> y.shape: 404514x1 LabelEncoder family, strore_nbr + LinearRegression(fit_intercept=False)\n### V4...: X.shape: 404514x19 ---> y.shape: 404514x1 LabelEncoder family, strore_nbr + XGBRegressor()\n### V5...: X.shape: 404514x105 ---> y.shape: 404514x1 OneHotEncoder family, strore_nbr + LinearRegression(fit_intercept=False)\n### V6...: X.shape: 404514x105 ---> y.shape: 404514x1 OneHotEncoder family, strore_nbr + XGBRegressor()\n### V7 same as V1,2 but 2013+ data: X: 1684x17 ---> y:1684x1782   LinearRegression(fit_intercept=False)\n### V8 same as V1,2 but 2016+ data: X:  592x17 ---> y:592x1782   LinearRegression(fit_intercept=False)","75da75da":"# V3 keep store_nbr and family as features by label or one-hot encoding them","378e8ec2":"From a plot of the deseasonalized *Average Sales*, it appears these holidays could have some predictive power.","6d08ee38":"Use this cell to fit the seasonal model with holiday features added. Do the fitted values seem to have improved?","c29e5ab9":"And also the periodogram:","b121cd7b":"# 1) Determine seasonality\n\nWhat kind of seasonality do you see evidence of? Once you've thought about it, run the next cell for some discussion.","65e61f24":"-------------------------------------------------------------------------------\n\n# 2) Create seasonal features\n\nUse `DeterministicProcess` and `CalendarFourier` to create:\n- indicators for weekly seasons and\n- Fourier features of order 4 for monthly seasons.","5338f6d4":"### V1,2: X.shape: 227 rows \u00d7 17 columns ---> y.shape: 227 rows \u00d7 1782 columns   LinearRegression(fit_intercept=False)\n### V3...: X.shape: 404514 rows \u00d7 19 columns ---> y.shape: 404514 rows \u00d7 1 columns LabelEncoder family, strore_nbr + LinearRegression(fit_intercept=False)\n### V4...: X.shape: 404514 rows \u00d7 19 columns ---> y.shape: 404514 rows \u00d7 1 columns LabelEncoder family, strore_nbr + XGBRegressor()\n### V5...: X.shape: 404514 rows \u00d7 105 columns ---> y.shape: 404514 rows \u00d7 1 columns OneHotEncoder family, strore_nbr + LinearRegression(fit_intercept=False)\n### V6...: X.shape: 404514 rows \u00d7 105 columns ---> y.shape: 404514 rows \u00d7 1 columns OneHotEncoder family, strore_nbr + XGBRegressor()\n### V7 same as V1,2 but not just 2017 data: X: 1684 rows \u00d7 17 columns ---> y:1684 rows \u00d7 1782 columns   LinearRegression(fit_intercept=False)","3f31537f":"Finally, this cell loads the test data, creates a feature set for the forecast period, and then creates the submission file `submission.csv`.","ab1796b6":"# Keep Going #\n\n[**Use time series as features**](https:\/\/www.kaggle.com\/ryanholbrook\/time-series-as-features) to capture cycles and other kinds of serial dependence."}}