{"cell_type":{"a566876d":"code","fe800f20":"code","b47e2561":"code","f890ed5b":"code","320f1e53":"code","1e6a6b74":"code","f30b280d":"code","2912c78f":"code","07e26216":"markdown","3d7d7e26":"markdown","4bda7609":"markdown","a2d5e1a7":"markdown","196c5599":"markdown"},"source":{"a566876d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe800f20":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","b47e2561":"auto_df = pd.read_csv('..\/input\/automobile-dataset-on-kaggle\/Automobile_data.csv')\nauto_df.head(3)","f890ed5b":"num_cols = ['price', 'bore', 'stroke', 'horsepower', 'peak-rpm']\nfor column in num_cols:\n    print(column)\n    print (auto_df[column][pd.to_numeric(auto_df[column], errors='coerce').isnull()])\nimport warnings; warnings.simplefilter('ignore')","320f1e53":"# write a function for data clearning which includes renaming of columns by replacing space with _ and handling non numeric values\n# from numeric columns\ndef clean_auto_data(auto_df):\n    'Function to load the auto price data set from a .csv file' \n    ## Rename Coulmns so the '-' character becomes '_'\n    cols = auto_df.columns\n    auto_df.columns = [str.replace('-', '_') for str in cols]\n    \n    ## Treat missing values remove rows with missing values, accounting for mising values coded as '?'\n    num_cols = ['price', 'bore', 'stroke','horsepower', 'peak_rpm']\n    for column in num_cols:\n        auto_df.loc[auto_df[column] == '?', column] = np.nan\n    auto_df.dropna(axis = 0, inplace = True)\n\n    ## Transform column data type, Convert columns to numeric values\n    for column in num_cols:\n        auto_df[column] = pd.to_numeric(auto_df[column])\n    \n    return auto_df\n\n# perform data cleaning on auto data frame\nauto_df = clean_auto_data(auto_df)\n\nprint(auto_df.columns)","1e6a6b74":"num_cols = ['price', 'bore', 'stroke','horsepower', 'peak_rpm']\nfor column in num_cols:\n    print(column)\n    print (auto_df[column][pd.to_numeric(auto_df[column], errors='coerce').isnull()])","f30b280d":"def plot_scatter(auto_prices, cols, col_y = 'price'):\n    for col in cols:\n        fig = plt.figure(figsize=(12,6)) # define plot area\n        ax = fig.gca() # define axis   \n        auto_prices.plot.scatter(x = col, y = col_y, ax = ax)\n        ax.set_title('Scatter plot of ' + col_y + ' vs. ' + col) # Give the plot a main title\n        ax.set_xlabel(col) # Set text for the x axis\n        ax.set_ylabel(col_y\n                     )# Set text for y axis\n        plt.show()\n\nnum_cols = ['curb_weight', 'engine_size', 'horsepower', 'city_mpg']\nplot_scatter(auto_df, num_cols)        \n","2912c78f":"def plot_desity_2d(auto_prices, cols, col_y = 'price', kind ='kde'):\n    for col in cols:\n        sns.set_style(\"whitegrid\")\n        sns.jointplot(col, col_y, data=auto_prices, kind=kind)\n        plt.xlabel(col) # Set text for the x axis\n        plt.ylabel(col_y)# Set text for y axis\n        plt.show()\n\nplot_desity_2d(auto_df, num_cols)      ","07e26216":"Validate if all non numeric values for numeric columns are handled","3d7d7e26":"## Visualizing relationshops between the data of two numerical columns\nIf we are analyzing relationships between two numerical columns we can use charts like scatter plots and density plots\n","4bda7609":"Check key numeric columns with non numeric values","a2d5e1a7":"We can use joint plot to explore relationship between various columns and can explore the frequncy distribution of individaul columns at the same time","196c5599":"I am preparing a series to understand data visualization into super simple way by decomposing complex aspects of of data visualization in to small units and make it super easy to understand. We can decompose Data Visualization in following parts:\n\nData Visualization for individual columns (Numerical and Categorical both)\nData Visualization to explore relationship between two numerical columns\nData Visualization to explore relationship between numerical and categorical columns\nThis notebook is 1st part of the series where we will use use Matplotlib, Pandas, seaborn libraries perform visual analysis of data for individual column. Notebook includes basic data clearning before we start creating graphs\n\nThis notebook is 2nd part of the series where we will use use Matplotlib, Pandas, seaborn libraries perform visual analysis to explore relationship between two numerical columns. Notebook includes basic data clearning before we start creating graphs"}}