{"cell_type":{"5ada5d51":"code","e4e5ef5e":"code","1f7a5cf5":"code","89a8c902":"code","961b2ac1":"code","2e9308da":"code","d5dd49aa":"code","6222df18":"code","52852e69":"code","63cdd223":"code","484b43f6":"code","83e3994d":"code","57e3ac09":"code","3b7f3ea2":"code","7438cadc":"code","ae536f8a":"code","3285434a":"code","5532d5ab":"code","d2265926":"code","54c348ca":"code","6667f643":"code","b56ca92b":"code","aaf5421f":"code","96b7864a":"code","c0d0860d":"code","7f7bf295":"code","3d90d6bf":"code","e350f1e8":"code","aeaa1e7b":"code","fc1df015":"code","90dd0ed3":"code","97a5a710":"code","5c32177d":"code","aefa947a":"code","ecce97a4":"code","83ac8b4e":"code","7f942056":"code","4af733c6":"code","55054a7f":"code","73b16481":"code","cccd0f33":"code","13a632e2":"code","8ba305fc":"markdown","ebe697ec":"markdown","fe0e7a14":"markdown","2799505a":"markdown"},"source":{"5ada5d51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4e5ef5e":"train=pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")\ntrain.head()","1f7a5cf5":"train['Player_name'] = train['Id']\ntrain['match_number'] =  train['Id']\nfor i in range(0, len( train)):\n    train['Player_name'][i] =  train['Id'][i].split(\"_\")[-1]\n    train['match_number'][i] = int( train['Id'][i].split('_')[:1][0])","89a8c902":"train","961b2ac1":"squads=pd.read_csv('..\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv',encoding= 'unicode_escape')\nsquads","2e9308da":"submission=pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv')\nsubmission","d5dd49aa":"submission['Player_name'] = submission['Id']\nsubmission['match_number'] =  submission['Id']\nfor i in range(0, len( submission)):\n    submission['Player_name'][i] =  submission['Id'][i].split(\"_\")[-1]\n    submission['match_number'][i] = int( submission['Id'][i].split('_')[:1][0])\n    submission['season'] = 2020","6222df18":"submission","52852e69":"matches1=pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nmatches1","63cdd223":"tmp1 =[]\ntmp2 =[]\nfor k in train.match_number:\n    for i in range(0,len(matches1.match_id)):\n        \n        if k==matches1.match_id[i]:\n            tmp1.append(matches1.team1[i])\n            tmp2.append(matches1.team2[i])\n        \ntrain['team1'] = tmp1\ntrain['team2'] = tmp2       ","484b43f6":"matches2=pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nmatches2.head()","83e3994d":"\ntm1 =[]\ntm2 =[]\nfor k in submission.match_number:\n    for i in range(0,len(matches2.match_id)):\n        \n        if k==matches2.match_id[i]:\n            tm1.append(matches2.team1[i])\n            tm2.append(matches2.team2[i])\n        \nsubmission['team1'] = tm1\nsubmission['team2'] = tm2       \n    ","57e3ac09":"season=[]\nfor i in train.match_number:\n    for j in range(0,len(matches1.match_id)):\n        if i==matches1.match_id[j]:\n            season.append(matches1.season[j])\n            \ntrain['season']=season","3b7f3ea2":"train.head()","7438cadc":"submission.head()","ae536f8a":"t1 = { 'Kolkata Knight Riders':'KKR','Chennai Super Kings':'CSK','Rajasthan Royals':'RR','Mumbai Indians':'MI','Deccan Chargers':'SRH','Kings XI Punjab':'KXIP','Royal Challengers Bangalore':'RCB','Delhi Daredevils':'DC','Sunrisers Hyderabad':'SRH','Delhi Capitals':'DC','Rising Pune Supergiants':'RPS','Gujarat Lions':'GL','Rising Pune Supergiant':'RPS','Pune Warriors':'RPS','Kochi Tuskers Kerala':'KTK'}\n","3285434a":"train.team1=train['team1'].replace(t1,regex=True)\ntrain.team2 = train['team2'].map(t1)","5532d5ab":"train.head()","d2265926":"def team(df):\n    team = []\n    for i in range(0,len(df)):\n        \n        d =df[(df['Player_name']==df['Player_name'][i]) & (df['season']==df['season'][i])]\n        l1 = d.team1.tolist() + d.team2.tolist()\n        l2 = max(set(l1), key = l1.count)\n        team.append(l2)\n    \n    df['team'] = team\n  \n # creating invidual team for every player\nteam(train)\nteam(submission)","54c348ca":"train=train[train['Total Points'] <90]","6667f643":"train.shape","b56ca92b":"fin_train=train[['Total Points','Player_name','team1','team2','season','team']]","aaf5421f":"fin_train1=fin_train.select_dtypes(include='object')\nfin_train1\nfin_train2=pd.get_dummies(fin_train1,drop_first=True)","96b7864a":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nfin_train1['Player_name']=labelencoder.fit_transform(fin_train1['Player_name'])\nfin_train1['team1']=labelencoder.fit_transform(fin_train1['team1'])\nfin_train1['team2']=labelencoder.fit_transform(fin_train1['team2'])\nfin_train1['team']=labelencoder.fit_transform(fin_train1['team'])","c0d0860d":"fin_train1","7f7bf295":"sub=submission[['team1','team2','Player_name','team']]","3d90d6bf":"sub['Player_name']=labelencoder.fit_transform(sub['Player_name'])\nsub['team1']=labelencoder.fit_transform(sub['team1'])\nsub['team2']=labelencoder.fit_transform(sub['team2'])\nsub['team']=labelencoder.fit_transform(sub['team'])","e350f1e8":"y=train['Total Points']","aeaa1e7b":"from sklearn.model_selection import train_test_split\n#from sklearn.preprocessing import LabelEncoder\n#labelencoder = LabelEncoder()\n#from sklearn.preprocessing import StandardScaler\n#sc = StandardScaler()\n#sc.fit(train)\n#train_x = sc.transform(train)\n# Assigning numerical values and storing in another column\nX_train, X_test, Y_train, Y_test=train_test_split(fin_train1, y, test_size=0.8, random_state=42)\n#X_train['Id'] = labelencoder.fit_transform(X_train['Id'])","fc1df015":"X_test1=pd.DataFrame()\nX_test1=X_test.copy()","90dd0ed3":"X_test.head()","97a5a710":"from sklearn.linear_model import LinearRegression\nfrom math import sqrt\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\n#lr=LinearRegression()\n#lr.fit(X_train,Y_train)\n#model = RandomForestRegressor( criterion=\"friedman_mse\")","5c32177d":"from sklearn import linear_model\nmodel2 = linear_model.Lasso(alpha=0.1)\nmodel2.fit(X_train,Y_train)\ny_pred1=model.predict(X_test)","aefa947a":"from sklearn.ensemble import StackingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nestimators = [\n        ('RFC' ,RandomForestRegressor(n_estimators=11,criterion=\"friedman_mse\", random_state = 42)),\n        ('LR',  LinearRegression()),\n        ('DTC', DecisionTreeRegressor()),\n        ('SVC', AdaBoostRegressor()),\n        \n]\n\nclf = StackingRegressor(\n    estimators=estimators, \n    final_estimator= GradientBoostingRegressor()\n)","ecce97a4":"clf.fit(X_train,Y_train)\ny_pred = clf.predict(X_test)","83ac8b4e":"y_pred=clf.predict(X_test)","7f942056":"from sklearn.metrics import mean_squared_error\n#calculate RMSE\nrmse = sqrt(mean_squared_error(y_pred, Y_test )) ","4af733c6":"rmse","55054a7f":"y_pred=clf.predict(sub)","73b16481":"sample=pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv')\nsample.head()","cccd0f33":"dt=pd.DataFrame()\ndt['Id'] = sample['Id']\ndt['Total Points'] =np.round(y_pred)\ndt","13a632e2":"dt.to_csv('submission4.csv', index=False)","8ba305fc":"model.fit(X_train,Y_train)","ebe697ec":"y_pred=model.predict(X_test)","fe0e7a14":"model=LinearRegression()","2799505a":"y_pred=model.predict(sub)"}}