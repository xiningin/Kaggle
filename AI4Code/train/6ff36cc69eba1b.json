{"cell_type":{"233dafaa":"code","edc567de":"code","566a5309":"code","c4e3e35f":"code","383959f7":"code","c56b3388":"code","a912fa26":"code","fa854947":"code","020dec57":"code","cc99b789":"code","12de6ef7":"code","59bc618b":"code","85aac7ca":"code","abdd2801":"code","d219a1da":"code","047d593f":"code","6c3f1442":"code","c72a76c3":"code","99dd5106":"code","2042b5aa":"code","8b5744da":"code","141eb8ca":"code","2ddb0999":"code","0a8f0b9c":"code","e5b214e2":"code","580eadee":"code","6255f7ca":"code","c0b70780":"code","bda87f83":"code","06e8de61":"code","1e57559a":"code","f6fc6653":"code","68cba81c":"code","79d70e01":"code","ec102484":"code","5b176fbf":"code","3a7e9127":"code","e3b3513d":"code","b9c818ac":"code","389d1cd2":"code","6d289bf7":"code","f3fe9299":"code","667d8159":"code","0b3c629c":"code","dd8b14e1":"code","0cb81ae0":"code","373f91f7":"code","31061cef":"code","0f11f30b":"code","fcabd3a2":"code","fe3c42cb":"code","1fea0fbd":"markdown","f2c3ef67":"markdown","9a9bc49b":"markdown","ba75e938":"markdown","3ffde739":"markdown","845b4c21":"markdown","0aea1414":"markdown","86c8f3d3":"markdown","95d52fda":"markdown","06897166":"markdown","3c895d56":"markdown","343b0a32":"markdown","a345885a":"markdown","1741ae81":"markdown","a88e652c":"markdown","d7b147a0":"markdown","855b91fc":"markdown","114532cd":"markdown"},"source":{"233dafaa":"# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","edc567de":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","566a5309":"import cudf\n\ntrain = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","c4e3e35f":"train.tail(3)","383959f7":"test.tail(3)","c56b3388":"sample_submission.tail(3)","a912fa26":"type(train)","fa854947":"type(train.to_pandas())","020dec57":"train.to_pandas()","cc99b789":"train[['id', 'cat0', 'cat8', 'cont7']].to_pandas()","12de6ef7":"type(train.to_pandas())","59bc618b":"y = train.target\n\ny.to_pandas()","85aac7ca":"type(y.to_pandas())","abdd2801":"train.shape","d219a1da":"train.info()","047d593f":"train.describe()","6c3f1442":"# sns.pairplot(train.to_pandas().sample(100), hue='target');","c72a76c3":"train.to_pandas().corr().style.background_gradient(cmap='Blues')","99dd5106":"sns.displot(train.to_pandas().target).set(title='Distripution of Target');","2042b5aa":"train.columns","8b5744da":"col_name = train[['cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5',\n       'cont6', 'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12',\n       'cont13', 'target']]\n\nfor i in col_name:\n    train[i] = train[i].astype(np.float32)","141eb8ca":"train.info()","2ddb0999":"train_encode = cudf.get_dummies(train)\n\ntest_encode = cudf.get_dummies(test)","0a8f0b9c":"train_encode.info()","e5b214e2":"train_encode.columns","580eadee":"train_encode","6255f7ca":"# convert encode data to float32\ncol_name = ['id','cat0_A', 'cat0_B', 'cat1_A', 'cat1_B', 'cat2_A', 'cat2_B',\n       'cat3_A', 'cat3_B', 'cat3_C', 'cat3_D', 'cat4_A', 'cat4_B', 'cat4_C',\n       'cat4_D', 'cat5_A', 'cat5_B', 'cat5_C', 'cat5_D', 'cat6_A', 'cat6_B',\n       'cat6_C', 'cat6_D', 'cat6_E', 'cat6_G', 'cat6_H', 'cat6_I', 'cat7_A',\n       'cat7_B', 'cat7_C', 'cat7_D', 'cat7_E', 'cat7_F', 'cat7_G', 'cat7_I',\n       'cat8_A', 'cat8_B', 'cat8_C', 'cat8_D', 'cat8_E', 'cat8_F', 'cat8_G',\n       'cat9_A', 'cat9_B', 'cat9_C', 'cat9_D', 'cat9_E', 'cat9_F', 'cat9_G',\n       'cat9_H', 'cat9_I', 'cat9_J', 'cat9_K', 'cat9_L', 'cat9_M', 'cat9_N',\n       'cat9_O']\n\nfor i in col_name:\n    train_encode[i] = train_encode[i].astype(np.float32)","c0b70780":"from cuml.preprocessing import train_test_split\n\nX = train_encode.drop('target', axis=1)\ny = train_encode.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)","bda87f83":"from cuml.experimental.preprocessing import StandardScaler\n# scale the X data ONLY\nscaler = StandardScaler()\n# better save it to new var \nX_train = scaler.fit_transform(X_train) # Scale have to be after split data & on train only, .fit_transform() is only for train data\nX_test  = scaler.transform(X_test)      # Scale have to be after split data & on test only,  .transform() is only for test data","06e8de61":"def baseline_model(n_preds, pred):\n    # just predict the average\n    return cudf.Series([pred for n in range(n_preds)])\n\n# make baseline preds\nbaseline_preds = baseline_model(len(y_test), np.mean(y_train))","1e57559a":"# change preds type to float32\nbaseline_preds = baseline_preds.astype(np.float32)","f6fc6653":"from cuml.metrics import mean_squared_error\n\nmean_squared_error(y_true=y_test,\n                   y_pred=baseline_preds,\n                   squared=False)","68cba81c":"from cuml.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\n\nrfr.fit(X_train, y_train)","79d70e01":"rfr_preds = rfr.predict(X_test)\n\nrfr_preds.tail()","ec102484":"from cuml.metrics import mean_squared_error\n\ncuml_model_mse = mean_squared_error(y_true=y_test,\n                   y_pred=rfr_preds,\n                   squared=False)\ncuml_model_mse","5b176fbf":"# download 'dask-ml'\n!pip -q install 'dask-ml'","3a7e9127":"import dask_ml.model_selection as dcv","e3b3513d":"dask_parameters = {\n    'n_estimators': [100, 200, 500],\n    'max_depth' : [5, 10 , 16, 20, 50],\n    'split_criterion' :[2, 3]\n    }\n\n# ValueError: Invalid parameter bootstrap_features for estimator RandomForestRegressor(). \n\nskmodel_dask_grid = dcv.GridSearchCV(\n                    rfr,\n                    dask_parameters\n                    )","b9c818ac":"# show Error: AttributeError: 'NoneType' object has no attribute 'fit'\n# skmodel_dask_grid.fit(X_train,y_train)","389d1cd2":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","6d289bf7":"# Encode data\nimport category_encoders as ce\n\n# Ordinally Encoded DF \nencoder = ce.OrdinalEncoder()\ntrain_encode = encoder.fit_transform(train)\n\n# Ordinally Encoded DF \nencoder = ce.OrdinalEncoder()\ntest_encode = encoder.fit_transform(test)","f3fe9299":"# Split Data\nfrom sklearn.model_selection import train_test_split\n\nX = train_encode.drop('target', axis=1)\ny = train_encode.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","667d8159":"# Scale Data\nfrom sklearn.preprocessing import StandardScaler\n#Standardize features by removing the mean and scaling to unit variance\nsc=StandardScaler()\n\n#Compute the mean and std to be used for later scaling\nX_train = sc.fit_transform(X_train)\n#Fit to data, then transform it.\nX_test = sc.transform(X_test)","0b3c629c":"# Random forest model\nfrom sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\n\nrfr.fit(X_train, y_train)","dd8b14e1":"preds = rfr.predict(X_test)\n\npreds[-5: ]","0cb81ae0":"# MSE for model\nfrom sklearn.metrics import mean_squared_error\n\nskl_model_mse = mean_squared_error(y_test, preds)\nskl_model_mse","373f91f7":"# MAE for model\nfrom sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(y_test, preds)","31061cef":"# to submit prediction of sklearn modle since it has better results\nsklearn_preds = rfr.predict(X_test)","0f11f30b":"sample_submission['target'] = sklearn_preds\nsample_submission.to_csv('submission.csv', index=False)","fcabd3a2":"''' \n# grid search with sklearn\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = { \n    'n_estimators': [100, 200, 500],\n    'bootstrap': [True],\n    'max_depth' : [5, 10 , 16, 20, 50]\n}\n\n\ngrid = GridSearchCV(rfr,param_grid,cv=10)\ngrid\n'''","fe3c42cb":"# grid.fit(X_train, y_train)\n#grid.best_params_\n#grid.best_score_\n\n'''\n## Change Model Parameters\nimproved_rfr = RandomForestRegressor()\n\nimproved_rfr.fit(X_train, y_train)\n'''\n\n'''\n# MSE for model\nfrom sklearn.metrics import mean_squared_error\n\nmean_squared_error(y_test, improved_preds)\n'''","1fea0fbd":"# Improvement Model [Random Forest Regressor]\n\n \n# Dask GridSearchCV on GPU\n\n### Note: try to do it but failed \n","f2c3ef67":"### Notes\n1. To use sklearn with cudf... convert `cudf.Series` \/ `cudf.DataFrame` `.to_pandas()`..\n2. Using cudf is the same as using pandas but `cudf` instead of `pd`..","9a9bc49b":"# Improvement Model [Random Forest Regressor]\n\n## We will use gridsearch to find best parameters for the model.\n### But first Need to have Sklearn model ","ba75e938":"# Simple Model [Random Forest Regressor]","3ffde739":"# Sklearn Random Forest Model\n","845b4c21":"# EDA","0aea1414":"# Attempt GridSearch","86c8f3d3":"# TPS Feb 2021\nStarter Notebook\n\n## Deleverables\n1. EDA\n    - What's going on?\n    - Show me the data...\n2. Model\n    - Baseline...\n    - Simple...\n    - Evaluation...\n    - Improvement...\n3. RAPIDS Bonus\n    - Apply RAPIDS ([Starter Notebook](https:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-rapids-starter))\n    - Replace pandas with cuDF & sklearn with cuML\n    \n    \n#### Troubleshooting\n- [Data](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/data)\n- [Overview](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/overview)\n- [RF Starter Notebook](https:\/\/www.kaggle.com\/warobson\/tps-feb-2021-rf-starter)\n- [ML repo on GitHub](https:\/\/github.com\/gumdropsteve\/intro_to_machine_learning)\n- [Most simple RAPIDS Notebook submission](https:\/\/www.kaggle.com\/warobson\/simple-rapids-live) (Has stuff like `train_test_split()` with cuml..)\n    \n#### Load Data","95d52fda":"## Simple Model Evaluation","06897166":"# RAPIDS Bonus [We solve assignment in both ways Rapids\/Sklearn]","3c895d56":"## Encode Data","343b0a32":"# Prepar Data to modling\n","a345885a":"## Change Float Type to Float32","1741ae81":"# Baseline Model","a88e652c":"# RAPIDS Random Forest Model\n","d7b147a0":"## Scale Data","855b91fc":"## Split Data","114532cd":"# submit to kaggle"}}