{"cell_type":{"06facc2c":"code","ecdead75":"code","f33cbd15":"code","390bdde5":"code","02e48dcf":"code","92e9a6e4":"code","6a38107e":"code","a309e10c":"code","d1098ded":"code","a5855f89":"code","0af2c051":"code","30abae14":"code","b5a5ff8c":"code","508aafca":"code","076d511d":"code","8899bcfd":"code","28e28082":"code","9f39aef7":"code","964bd6f1":"markdown","10c33d96":"markdown","434b16bd":"markdown","8cb2345a":"markdown","99842be5":"markdown","87666b89":"markdown","c869e051":"markdown","a0cf219c":"markdown","7812073c":"markdown","ae57cacf":"markdown","b88d4b76":"markdown","2c1e52c8":"markdown"},"source":{"06facc2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n%matplotlib inline","ecdead75":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntrain.head()","f33cbd15":"train.describe(include=\"all\")","390bdde5":"#check for any other unusable values\nprint(pd.isnull(train).sum())","02e48dcf":"sns.heatmap(train.isnull(), cbar=False)","92e9a6e4":"#draw a bar plot of survival by sex\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train)","6a38107e":"#drop the name feature since it contains no more useful information.\ntrain = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","a309e10c":"# Deleting the two values which are not have an Embarked\n\ntrain = train.dropna(axis=0, subset=['Embarked'])\ntest = test.dropna(axis=0, subset=['Embarked'])\n\n# train = train.drop(['Fare'], axis=1)\n# test= test.drop(['Fare'], axis=1)\n\ntrain","d1098ded":"#we'll start off by dropping the Cabin feature since not a lot more useful information can be extracted from it.\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\n#we can also drop the Ticket feature since it's unlikely to yield any useful information\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)\n\ntrain.head()","a5855f89":"# distribution of the age survival\ntrain[\"Age\"] = train[\"Age\"].fillna(train['Age'].median())\ntest[\"Age\"] = test[\"Age\"].fillna(test['Age'].median())\n\ntrain[\"Fare\"].fillna(test[\"Fare\"].median(), inplace=True)\ntest[\"Fare\"].fillna(test[\"Fare\"].median(), inplace=True)\n\ntrain\n","0af2c051":"#check for any other unusable values\nprint(pd.isnull(train).sum())\nprint(\"-\"*40)\nprint(pd.isnull(test).sum())","30abae14":"print(train.head())\n# One hot encoding!\nout1 = pd.get_dummies(train['Embarked'], prefix='Embarked')\nout1_test = pd.get_dummies(test['Embarked'], prefix='Embarked')\n\ntrain = pd.concat([train, out1], axis=1)\ntest = pd.concat([test, out1_test], axis=1)\n\n\ntest","b5a5ff8c":"#map each Sex value to a numerical value\nsex_encoding = pd.get_dummies(train['Sex'])\nsex_encoding_test = pd.get_dummies(test['Sex'])\n\ntrain = pd.concat([train, sex_encoding], axis=1)\ntest = pd.concat([test, sex_encoding_test], axis=1)\n\ntrain.head()","508aafca":"# Haha this is making my prediction worse. Needs some adjustments probably\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n# scaled_age_train = scaler.fit_transform(train_age)\n# scaled_age_test = scaler.fit_transform(test_age)\n\n# train['ScaledAge'] = scaled_age_train\n# test['ScaledAge'] = scaled_age_test\n\ntrain","076d511d":"print('='*50)\nprint(\"Number of columns in training data\")\nprint('='*50)\nprint(\"\\n\")\nprint(train.columns.values)\nprint(\"\\n\")\nprint('='*50)\nprint(\"Number of columns in test data\")\nprint('='*50)\nprint(\"\\n\")\nprint(test.columns.values)","8899bcfd":"#splitting the predictors from the targets\nfrom sklearn.model_selection import train_test_split\n\npredictors = train.drop(['Survived', 'PassengerId', 'Embarked', 'Sex'], axis=1)\ntest_features = test.drop(['PassengerId', 'Embarked', 'Sex'], axis=1)\n\ntarget = train['Survived']\n\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)\nx_train.shape, x_val.shape, y_train.shape, y_val.shape","28e28082":"#predicting\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier()\nrandom_forest.fit(x_train, y_train)\n\ny_pred = random_forest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)\n","9f39aef7":"# submission\npred_test = random_forest.predict(test_features)\n\noutput = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': pred_test})\noutput.to_csv('submission.csv', index=False)","964bd6f1":"### Scaling the age","10c33d96":"\n\n### Filling NaN values","434b16bd":"#### Embarked & Fare","8cb2345a":"#### Checking dimentions","99842be5":"## Making the Embarked One-Hot Encoding","87666b89":"#### Name","c869e051":"# Learning the model","a0cf219c":"### Checking again for Null values","7812073c":"# Preprocessing Data","ae57cacf":"#### Cabin & Ticket","b88d4b76":"## Making Sex one-hot encoding","2c1e52c8":"### Cleaning the data"}}