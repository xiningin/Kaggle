{"cell_type":{"8ad53530":"code","95ef30d4":"code","035324ef":"code","f8cfa30c":"code","9d973caf":"code","e09c6149":"code","b3c82f2e":"code","4bd7a568":"code","016d3b32":"markdown","1b259c01":"markdown","5bdbea69":"markdown","da5374d5":"markdown","697b8be4":"markdown","9bc9f75f":"markdown","fff64e6a":"markdown","eec7adbf":"markdown"},"source":{"8ad53530":"import re\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.animation as animation\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nfrom tqdm import tqdm\n\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_colwidth', 1000)\npd.set_option('display.max_rows', 1000)\nplt.rcParams[\"animation.html\"] = \"jshtml\"\nplt.rcParams['figure.dpi'] = 150  \nplt.ioff()","95ef30d4":"dataDir = \"\/kaggle\/input\/nfl-big-data-bowl-2021\/\"\ngames = pd.read_csv(dataDir+\"games.csv\")\nplayers = pd.read_csv(dataDir+\"players.csv\")\nplays = pd.read_csv(dataDir+\"plays.csv\")\nweeks = [] \nfor i in range(1,18):\n    weeks.append(pd.read_csv(dataDir+\"week{}.csv\".format(i)))","035324ef":"def get_week_df(gameID, playID):\n    wk = games.query(\"gameId=={}\".format(gameID)).iloc[0].week\n    week_df = weeks[wk-1]\n    information = week_df[(week_df.playId==playID)&(week_df.gameId==gameID)]\n    return information, wk\n\n# this function requires 'plays' dataframe\ndef animate_play(gameID, playID):\n    plt.close('all')\n    fig, ax = plt.subplots()\n    fig.set_figheight(7)\n    fig.set_figwidth(14)\n    \n    information, wk = get_week_df(gameID, playID)\n    max_frame = information.frameId.max()\n    print(\"GAME: {}\\tPLAY: {}\\tWEEK: {}\\tFRAME: {}\".format(gameID, playID, wk, max_frame))\n    \n    home, = ax.plot([],[], linestyle='None', marker='o', markersize=12, c='C0')\n    away, = ax.plot([],[], linestyle='None', marker='o', markersize=12, c='C1')\n    foot, = ax.plot([],[], linestyle='None', marker='o', markersize=12, c='C2')\n    lines = [home, away, foot]\n    \n    def draw_field():\n        ax.set_xlim(0, 120)\n        ax.set_ylim(-5, 58.3)\n        # Endzones\n        ax.add_patch(Rectangle((  0, 0), width=10, height=53.3, alpha=0.5, color='grey'))\n        ax.add_patch(Rectangle((110, 0), width=10, height=53.3, alpha=0.5, color='grey'))\n        # Sidelines\n        ax.plot([0,120],[0,0], c='grey', linewidth=2)\n        ax.plot([0,120],[53.3,53.3], c='grey', linewidth=2)\n        for i in range(10, 120, 10):\n            # 10 Yard lines\n            ax.plot([i,i],[0,53.3], c='grey', linewidth=2)\n            if abs(60-i) <=40:\n                # Numbers\n                ax.text(i-2.5, 12, str(50-abs(60-i)), color=\"grey\", fontsize=24)\n                ax.text(i-2.5, 41.3, str(50-abs(60-i)), color=\"grey\", fontsize=24, rotation=180)\n        # Hash marks\n        for i in range(10, 110):\n            ax.plot([i,i], [0, 1], c='grey')\n            ax.plot([i,i], [23, 24], c='grey')\n            ax.plot([i,i], [29.3, 30.3], c='grey')\n            ax.plot([i,i], [52.3, 53.3], c='grey')\n        \n        # Drawing the line of scrimmage\n        scrimmage = information.query(\"frameId==1 and displayName=='Football'\").iloc[0].x\n        ax.plot([scrimmage,scrimmage],[0, 53.3], c='darkblue', linewidth=2)\n        \n        # Drawing the First Down Line\n        play_information = plays.query(\"playId=={} and gameId=={}\".format(playID, gameID)).iloc[0]\n        ax.set_title(play_information.playDescription)\n        home_team = games[games.gameId==gameID].iloc[0].homeTeamAbbr\n        poss_team = play_information.possessionTeam\n        team_query_term = \"home\"\n        if home_team != poss_team:\n            team_query_term = \"away\"\n        shit = information.query(\"frameId==1 and team=='{}'\".format(team_query_term)).iloc[0].x\n        first_down_line = scrimmage - play_information.yardsToGo\n        if shit < scrimmage:\n            first_down_line = scrimmage + play_information.yardsToGo\n        ax.plot([first_down_line,first_down_line],[0, 53.3], c='gold', linewidth=2)\n        return lines\n\n    def plot_players(t):\n        home_filtered = information[(information.frameId==t)&(information.team==\"home\")]\n        away_filtered = information[(information.frameId==t)&(information.team==\"away\")]\n        foot_filtered = information[(information.frameId==t)&(information.team==\"football\")]\n        home.set_data(home_filtered.x.array, home_filtered.y.array)\n        away.set_data(away_filtered.x.array, away_filtered.y.array)\n        foot.set_data(foot_filtered.x.array, foot_filtered.y.array)\n        lines = [home, away, foot]\n        \n        if t%10 == 0:\n            print(t,end = ',')\n        return lines\n    \n    return animation.FuncAnimation(fig, plot_players, frames=range(1, max_frame+1), init_func=draw_field, blit=True)\n    #return animation.FuncAnimation(fig, plot_players, frames=range(20, 21), init_func=draw_field, blit=True)","f8cfa30c":"plays.head(5)[[\"gameId\", \"playId\", \"playDescription\", \"passResult\"]]","9d973caf":"playersWithJones = players[players.displayName.str.contains(\"Jones\")]\nplayersWithJones[playersWithJones.displayName.str.startswith(\"A\")]","e09c6149":"initial_re = \" (to|for) [A-Z]{1}[a-z]*\\.\\s?[A-Z]{1}[-\\'a-zA-Z]+[\\s\\.$]+\"\nname_re =              \"[A-Z]{1}[a-z]*\\.\\s?[A-Z]{1}[-\\'a-zA-Z]+[\\s\\.$]+\"\nfilt = plays.playDescription.str.contains(initial_re, regex=True)\nfull_names = []\nfor i in tqdm(range(len(filt))):\n    full_name = \"-\"\n    if \"E.St. Brown\" in plays.iloc[i].playDescription:\n        full_name = \"Equanimeous St. Brown\"\n    elif filt.iloc[i]:\n        shit = re.search(initial_re, plays.iloc[i].playDescription).group(0)\n        target = re.search(name_re, shit).group(0).split(\".\")\n        \n        if target[-1] == '':\n            target.pop(-1)\n        \n        # Get the appropriate week\\d.csv\n        result, wk = get_week_df(plays.iloc[i].gameId, plays.iloc[i].playId)\n        \n        # filter by the qb's team, if there is a qb on the field\n        something = result.query(\"position=='QB'\")\n        if len(something) > 0:\n            qb_team = something.team.iloc[0]\n            result = result[result.team==qb_team]\n        \n        # filter for names that match\n        spec_name_re = \"^{}[-\\'\\.a-zA-Z]+ {}$\".format(target[0].strip(), target[1].strip())\n        result = result[result.displayName.str.contains(spec_name_re, regex=True)].displayName.unique().tolist()\n        if len(result) == 0:\n            players_result = players[players.displayName.str.contains(spec_name_re, regex=True)]\n            if len(players_result) > 1:\n                # we see if other plays with the matching name, use that name\n                potential = pd.Series(weeks[wk-1][weeks[wk-1].gameId==plays.iloc[i].gameId].displayName.unique().tolist())\n                potential = potential[potential.str.contains(spec_name_re, regex=True)]\n                if len(potential) != 1:\n                    print(target)\n                    print(potential)\n                    print(wk, plays.iloc[i].gameId, plays.iloc[i].playId)\n                    print(plays.iloc[i].playDescription)\n                    print(\"UNCAUGHT ERROR 11111111111111111111111111111111111111111111111111111111111\")\n                else:\n                    full_name = potential.iloc[0]\n            elif len(players_result) == 1:\n                full_name = players_result.iloc[0].displayName\n            # When len(players_result)==0, it means that the targeted player is not a usually targeted player (LB and etc)\n            # so we ignore this case\n            \n        else:\n            full_name = result[0]\n        # there aren't any cases where len(result) > 1. I've checked already\n    full_names.append(full_name)\nplays = plays.assign(target=full_names)","b3c82f2e":"plays.query(\"target!='-'\").sample(5)[[\"playDescription\", \"passResult\",\"target\"]]","4bd7a568":"plt.close('all')\ntop_k = 10\n\nshit = plays.target.value_counts()\nshit.iloc[0] += shit[top_k:].sum()\nshit = shit[1:top_k]\nshat = shit.plot.pie(textprops={'fontsize': 5})\nshat.set_xticklabels(shat.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\nmy_circle=plt.Circle( (0,0), 0.8, color='white')\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()","016d3b32":"Note that it's easy to see that the first play was intended for \"J.Jones\" and the second was for \"C.Ridley\". The only problem is that the names are abbreviated. Being abbreviated makes it a bit tricky to work with, and here are some reasons:\n1. It's ambiguous. Sometimes there are mutliple players given an abbreviated name. For example, the abbreviated name \"A.Jones\" is an example:","1b259c01":"More analysis will come when I have the full names of the covers as well, but here is some basic visual graphic:","5bdbea69":"# Parse the 'playDescription' for Names\nAfter trying many diferent ways, parsing 'playDescription' is the best way to find the intended targets. In Plays.csv, there is a column for 'playDescription'. This column sometimes has the names of the player the pass was intended to. Here is an example:","da5374d5":"Here are some examples of parsed target names:","697b8be4":"This ambiguity can cause errors down the road, so wee need full names.\n2. Also, being abbreviated makes it tough to ID in Players.csv and Week.csv. This is because in those files, players are identified by either 'nflId' or 'displayName'. Neither is provided when we just collect the abbreviated names.\n\nSo we need Full Names. To get Full Names, we need to:\n1. Find the abbreviated names from 'playDescription'\n2. Find the full name associated with that abbreviated name\n\nBelow is a scheme to do that. FYI, it might take a while to finish.","9bc9f75f":"# Parsing Targets\nThis is the notebook for parsing 'playDescription' for full names of targeted players for every play.","fff64e6a":"# I saved this dataframe and will be using it in future notebooks\nplays.to_csv(\".\/data\/plays_with_target.csv\")","eec7adbf":"# Some Functions that I need\nMostly for my custom visualization scheme."}}