{"cell_type":{"5e8b8ddd":"code","0818757c":"code","8227864d":"code","87a56d9a":"code","398211de":"code","4713ecb7":"code","dbac219c":"code","abdaaedb":"code","03e3ee8f":"code","8ef51a98":"code","866e414d":"code","0f0846ca":"code","34587f6f":"code","3f9f1847":"code","cc4101b6":"code","83560892":"code","da46965c":"code","d791e027":"code","1e277ff7":"code","49bc5669":"code","d031f234":"code","8692d189":"code","9dfea748":"markdown","c5cd0820":"markdown","0c7e223a":"markdown","d20e6374":"markdown","da3820f7":"markdown","00c27827":"markdown","0a77f589":"markdown","eda9c0ef":"markdown","fb7d1cec":"markdown","380621bc":"markdown","2beef574":"markdown","8b725096":"markdown","acd25298":"markdown","2f0b1458":"markdown","6d2210b3":"markdown","8dd41158":"markdown","32630949":"markdown"},"source":{"5e8b8ddd":"# importing packages\nimport numpy as np # to perform calculations \nimport pandas as pd # to read data\nimport matplotlib.pyplot as plt # to visualise","0818757c":"# In read_csv() function, we have passed the location to where the file is located at dphi official github page\nboston_data = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/Boston_Housing\/Training_set_boston.csv\" )","8227864d":"boston_data.head()","87a56d9a":"X = boston_data.drop('MEDV', axis = 1)    # Input Variables\/features\ny = boston_data.MEDV      # output variables\/features","398211de":"X.head()","4713ecb7":"# import train_test_split\nfrom sklearn.model_selection import train_test_split \n\n# Assign variables to capture train test split output\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# X_train: independent\/input feature data for training the model\n# y_train: dependent\/output feature data for training the model\n# X_test: independent\/input feature data for testing the model; will be used to predict the output values\n# y_test: original dependent\/output values of X_test; We will compare this values with our predicted values to check the performance of our built model.\n \n# test_size = 0.20: 20% of the data will go for test set and 70% of the data will go for train set\n# random_state = 42: this will fix the split i.e. there will be same split for each time you run the code","dbac219c":"# find the number of input features or the number of columns or total columns of indepent variable \nn_features = X.shape[1]\nprint(n_features)","abdaaedb":"from tensorflow.keras import Sequential    # import Sequential from tensorflow.keras\nfrom tensorflow.keras.layers import Dense  # import Dense from tensorflow.keras.layers\nfrom numpy.random import seed     # seed helps you to fix the randomness in the neural network.  \nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import activations","03e3ee8f":"# define the model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))","8ef51a98":"# import RMSprop optimizer\nfrom tensorflow.keras.optimizers import RMSprop\noptimizer = RMSprop(0.01)    # 0.01 is the learning rate","866e414d":"model.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model","0f0846ca":"seed_value = 42\nseed(seed_value)        # If you build the model with given parameters, set_random_seed will help you produce the same result on multiple execution\n\n\n# Recommended by Keras -------------------------------------------------------------------------------------\n# 1. Set `PYTHONHASHSEED` environment variable at a fixed value\nimport os\nos.environ['PYTHONHASHSEED']=str(seed_value)\n\n# 2. Set `python` built-in pseudo-random generator at a fixed value\nimport random\nrandom.seed(seed_value)\n\n# 3. Set `numpy` pseudo-random generator at a fixed value\nimport numpy as np\nnp.random.seed(seed_value)\n# Recommended by Keras -------------------------------------------------------------------------------------\n\n\n# 4. Set the `tensorflow` pseudo-random generator at a fixed value\ntf.random.set_seed(seed_value) \nmodel.fit(X_train, y_train, epochs=10, batch_size=30, verbose = 1)    # fit the model","34587f6f":"model.evaluate(X_test, y_test)","3f9f1847":"####################### Complete example to check the performance of the model with different learning rates #######################################\n# define the model\n\n\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(4, activation='relu'))\n\nmodel.add(Dense(1))\n\n#optimizer = RMSprop(0.01) # 0.1 is the learning rate\noptimizer = tf.keras.optimizers.Adam(0.1) \nmodel.compile(loss='mean_squared_error',optimizer=optimizer)    # compile the model\n\n# fit the model \nmodel.fit(X_train, y_train, epochs=10, batch_size=30, verbose = 1)\n\n# evaluate the model\nprint('The MSE value is: ', model.evaluate(X_test, y_test))","cc4101b6":"model.evaluate(X_test, y_test)","83560892":"#summary of the model\nmodel.summary()","da46965c":"# Load new test data\nnew_test_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/Boston_Housing\/Testing_set_boston.csv')","d791e027":"new_test_data.head()","1e277ff7":"# make a prediction\nmodel.predict(new_test_data)","49bc5669":"# ----------------------------- Functional Tuning - Option 2: using Keras Tuner ------------------------------\n# Goal: tune the learning rate\n\n# 0. Install and import all the packages needed\n#!pip install -q -U keras-tuner\nimport keras_tuner as kt\n\n# 1. Define the general architecture of the model through a creation user-defined function\ndef model_builder(hp):\n  model = Sequential()\n  model.add(Dense(10, activation='relu', input_shape=(n_features,)))\n  model.add(Dense(8, activation='relu'))\n  model.add(Dense(1))\n  hp_learning_rate = hp.Choice('learning_rate', values = [1e-1, 1e-2, 1e-3, 1e-4]) # Tuning the learning rate (four different values to test: 0.1, 0.01, 0.001, 0.0001)\n  #optimizer = RMSprop(learning_rate = hp_learning_rate) \n  optimizer = tf.keras.optimizers.Adam(learning_rate = hp_learning_rate) # Defining the optimizer\n  model.compile(loss='mse',metrics=['mse'], optimizer=optimizer)                   # Compiling the model \n  return model                                                                     # Returning the defined model\n\n# 2. Define the hyperparameters grid to be validated\ntuner_rs = kt.RandomSearch(\n              model_builder,                # Takes hyperparameters (hp) and returns a Model instance\n              objective = 'mse',            # Name of model metric to minimize or maximize\n              seed = 42,                    # Random seed for replication purposes\n              max_trials = 5,               # Total number of trials (model configurations) to test at most. Note that the oracle may interrupt the search before max_trial models have been tested.\n              directory='random_search')    # Path to the working directory (relative).\n\n# 3. Run the GridSearchCV process\ntuner_rs.search(X_train, y_train, epochs=10, validation_split=0.2, verbose=1)","d031f234":"tuner_rs.results_summary()","8692d189":"# 4.2. Print the results of the best model\nbest_model = tuner_rs.get_best_models(num_models=1)[0]\nbest_model.evaluate(X_test, y_test)","9dfea748":"## 2. Compile the model\nCompiling the model requires that you first select a loss function that you want to optimize, such as mean squared error or cross-entropy.\n\nIt also requires that you select an algorithm to perform the optimization procedure. We\u2019re using RMSprop as our optimizer here. R\n\nIt may also require that you select any performance metrics to keep track of during the model training process. The loss function used here is mean squared error.\n\nFrom an API perspective, this involves calling a function to compile the model with the chosen configuration, which will prepare the appropriate data structures required for the efficient use of the model you have defined.","c5cd0820":"## 4. Evaluate the model\nEvaluating the model requires that you first choose a holdout dataset used to evaluate the model. This should be data not used in the training process i.e. the X_test.\n\nFrom an API perspective, this involves calling a function with the holdout dataset and getting a loss and perhaps other metrics that can be reported.","0c7e223a":"## Learning Rate\n\nA scalar used to train a model via gradient descent. During each iteration, the gradient descent algorithm multiplies the learning rate by the gradient. The resulting product is called the gradient step.\n\nLearning rate is a key hyperparameter.","d20e6374":"## 1. Define the model\nDefining the model requires that you first select the type of model that you need and then choose the architecture or network topology.\n\nModels can be defined either with the Sequential API or the Functional API (you will know this in later modules). Here we will define the model with Sequential API. Now what is Sequential API?\n\nSequential API The sequential API is the simplest API to get started with Deep Learning. You will know more about it in upcoming learning units.\n\nThe sequential API allows you to create models layer-by-layer\n\nWhat is layers?\n\nA layer groups a number of neurons together. It is used for holding a collection of neurons. The learning process of a neural network is performed with the layers. The key to note is that the neurons are placed within layers and each layer has its purpose.","da3820f7":"The mean squared error we got here is 64.8. Now, what does it mean?\n\nWhen you subtract the predicted values (of X_test data) from the acutal value (of X_test data), then square it and sum all the squares, and finally take a mean (i.e. average) of it, the result you will get is 64.8 in this case.\n\nevaluate() does this task automatically. If you want to get the prediciton for X_test you can do model.predict(X_test)","00c27827":"## Splitting the data\n\nWe want to check the performance of the model that we built. For this purpose, we always split the given data(both input and output data) into training set which will be used to train the model, and test set which will be used to check how accurately the model is predicting outcomes.\n\nFor this purpose we have a class called 'train_test_split' in the 'sklearn.model_selection' module.\n\nWe split 80% of the data to the training set while 20% of the data to test set using below code. The test_size variable is where we actually specify the proportion of the test set.\n\nBy passing our X and y variables into the train_test_split method, we are able to capture the splits in data by assigning 4 variables to the result.","0a77f589":"## Separate dependent and independent variables\nBefore building any machine learning model, we always separate the input variables and output variables.\n\nInput Variables or Independent Variables are those quantities whose values are changed naturally in an experiment\n\nOutput Variable or Dependent Variable is the one whose values are dependent on the input variables.\n\nLike here in this data, we are trying to predict the price of a houce i.e. 'MEDV', so this is our Output Variable\n\nBy convention input variables are represented with 'X' and output variables are represented with 'y'.","eda9c0ef":"## 3. Fitting the model\nFitting the model requires that you first select the training configuration, such as the number of epochs (loops through the training dataset) and the batch size (number of samples in an epoch used to estimate model error).\n\nFrom an API perspective, this involves calling a function to perform the training process. This function will block (not return) until the training process has finished.","fb7d1cec":"## The 5 Step Model Life-Cycle\nA model has a life-cycle, and this very simple knowledge provides the backbone for both modeling a dataset and understanding the tf.keras API.\n\nThe five steps in the life-cycle are as follows:\n\nDefine the model.\nCompile the model.\nFit the model.\nMake predictions on the test data.\nEvaluate the model.\nWe will take closer look into each of the steps and parallely build the deep learning model. Also, don't worry about the code for the moment if you don't understand it here. For the time being focus on the flow of building a deep learning model.","380621bc":"## 5. Make a Prediction\nMaking a prediction is the final step in the life-cycle. It is why we wanted the model in the first place.\n\nIt requires you have new data for which a prediction is required, e.g. where you do not have the output values.\n\nFrom an API perspective, you simply call a function to make a prediction of a class label, probability, or numerical value: whatever you designed your model to predict.\n\nWe have our new test data located at the given github location:\n\nhttps:\/\/raw.githubusercontent.com\/dphi-official\/Datasets\/master\/Boston_Housing\/Testing_set_boston.csv","2beef574":"Note that the visible layer of the network is defined by the \u201cinput_shape\u201d argument on the first hidden layer.\n\nThe sequential API is easy to use because you keep calling model.add() until you have added all of your layers.\n\nThe activation function we have chosen is ReLU, which stands for rectified linear unit. Activation function decides, whether a neuron should be activated or not\n\nReLU is an activation function which is defined mathematically as F(x) = max(0,x). In other words, the output is x, if x is greater than 0, and the output is 0 if x is 0 or negative.\n\n","8b725096":"## Hyperparameter Tunning\nThe hyperparameters here in this notebook are:\n\nLearning Rate\nEpochs\nBatch Size\nWe can try and change the values of these parameters and see the performance of the model (evaluate the model) on X_test data","acd25298":"Why learning rate = 0.01?\n\nIt is important to find a good value for the learning rate for your model on your training dataset. we cannot analytically calculate the optimal learning rate for a given model on a given dataset. Instead, a good (or good enough) learning rate must be discovered via trial and error.\n\nThe range of values to consider for the learning rate is less than 1.0 and greater than  10\u22126 .\n\nA traditional default value for the learning rate is 0.1 or 0.01, and this may represent a good starting point on your problem.","2f0b1458":"## Summary of hyperparameter tuning\nMost machine learning problems require a lot of hyperparameter tuning. Unfortunately, we can't provide concrete tuning rules for every model. Lowering the learning rate can help one model converge efficiently but make another model converge much too slowly. You must experiment to find the best set of hyperparameters for your dataset. That said, here are a few rules of thumb:\n\nTraining loss should steadily decrease, steeply at first, and then more slowly until the slope of the curve reaches or approaches zero.\nIf the training loss does not converge, train for more epochs.\nIf the training loss decreases too slowly, increase the learning rate. Note that setting the learning rate too high may also prevent training loss from converging.\nIf the training loss varies wildly (that is, the training loss jumps around), decrease the learning rate.\nLowering the learning rate while increasing the number of epochs or the batch size is often a good combination.\nSetting the batch size to a very small batch number can also cause instability. First, try large batch size values. Then, decrease the batch size until you see degradation.\nFor real-world datasets consisting of a very large number of examples, the entire dataset might not fit into memory. In such cases, you'll need to reduce the batch size to enable a batch to fit into memory.\nRemember: the ideal combination of hyperparameters is data dependent, so you must always experiment and verify.","6d2210b3":"## Implementing hyperparameter tuning with Keras\nNow we will go through the process of automating hyperparameter tuning using Random Search and Keras. Random Search is a hyperparameter search procedure that is performed on a defined grid of hyperparameters. However, not all hyperparameter combinations are used to train a new model, only some selected randomly, while a process of cross-validation to measure the performance of temporal models. Once the process is complete, the hyperparameters and the best performing model are chosen.\n\nLet's take a look at the implementation of Random Search with Keras, following the steps:\n\nInstall and import all the packages needed\nDefine the general architecture of the model through a creation function\nDefine the hyperparameters grid to be validated\nRun the GridSearchCV process\nPrint the results of the best model\nTo execute the hyperparameter tuning procedure we will use the keras-tuner, a library that helps you pick the optimal set of hyperparameters for your TensorFlow model.","8dd41158":"What is verbose?\n\nBy setting verbose 0, 1 or 2 you just say how do you want to 'see' the training progress for each epoch.\n\nverbose=0 will show you nothing (silent)\n\nverbose=1 will show you an animated progress bar like this:\n\nprogres_bar\n\nverbose=2 will just mention the number of epoch like this:\n\nverbose = 2","32630949":"## in our case MEDV is dependent variable and all others are independent variables "}}