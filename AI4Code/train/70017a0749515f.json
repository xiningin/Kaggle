{"cell_type":{"0f1f400b":"code","250300a2":"code","b16cd2c9":"code","3511c284":"code","e8fe9bf7":"code","c01704f5":"code","0067ff87":"code","a013119a":"code","c4a7c335":"code","cd58b18e":"code","55cc4fbf":"code","fa81b789":"code","1ae51701":"code","7b3eee6f":"code","4aa68665":"code","68d4a4b7":"markdown","044c2cde":"markdown","a072ce07":"markdown","bfa4e1d6":"markdown","0ce65d78":"markdown"},"source":{"0f1f400b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","250300a2":"dataset_train = pd.read_csv('\/kaggle\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv')","b16cd2c9":"dataset_train.head()","3511c284":"training_set = dataset_train.iloc[:, 1:2].values","e8fe9bf7":"training_set[:5]","c01704f5":"from sklearn.preprocessing import MinMaxScaler","0067ff87":"sc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)","a013119a":"dataset_train.shape","c4a7c335":"X_train = []\ny_train = []\nfor i in range(60, 1258):\n    X_train.append(training_set_scaled[i-60:i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","cd58b18e":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","55cc4fbf":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout","fa81b789":"# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","1ae51701":"dataset_test = pd.read_csv('\/kaggle\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv')\nreal_stock_price = dataset_test.iloc[:, 1:2].values","7b3eee6f":"dataset_test","4aa68665":"dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","68d4a4b7":"Making the predictions and visualising the results","044c2cde":"## Building the RNN","a072ce07":"Reshaping","bfa4e1d6":"### Feature Scaling","0ce65d78":"Creating a data structure with 60 timesteps and 1 output"}}