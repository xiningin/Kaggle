{"cell_type":{"c6c4bec1":"code","2143b648":"code","1d26b924":"code","c153001d":"code","3d761563":"code","6c050cce":"code","81590270":"code","5bf62bd0":"code","1b1f9a5f":"code","9dbaf644":"code","9bee9885":"code","a381cdc5":"code","4a3c9b9b":"code","8a668172":"code","7d0faa18":"code","0203ab0d":"code","f35460f6":"code","5083ca12":"code","00713aa3":"code","339ee25b":"code","c16dc45b":"code","345868f6":"code","643b8adf":"code","d88c3f5f":"code","a2ea8f9f":"code","1b6f9698":"code","0f2ac960":"code","06a44a85":"code","9e5374b7":"code","7ce598c7":"code","f281eae8":"markdown","0fcfc346":"markdown","d85d3c8a":"markdown","ffbd73a1":"markdown","3ca4ae7f":"markdown","308994e4":"markdown"},"source":{"c6c4bec1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2143b648":"import fastai\nfastai.__version__","1d26b924":"import zipfile","c153001d":"with zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\", 'r') as zip_ref:\n                zip_ref.extractall(\".\/\")\n\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\", 'r') as zip_ref:\n                zip_ref.extractall(\".\/\")","3d761563":"from fastai.vision.all import *","6c050cce":"path = Path('.\/')\npath","81590270":"path.ls()","5bf62bd0":"fname = (path\/\"train\").ls()[0]\nfname.name","1b1f9a5f":"pattern = r'(.+)\\.\\d+.jpg$'","9dbaf644":"import re\nre.findall(pattern, fname.name)","9bee9885":"from PIL import Image\nimage = Image.open(fname)\nimage.shape","a381cdc5":"dblock = DataBlock(\n    blocks = (ImageBlock, CategoryBlock),\n    get_items = get_image_files,\n    splitter= RandomSplitter(seed=42),\n    get_y = using_attr(RegexLabeller(pattern), 'name'),\n    item_tfms=Resize(248),\n    batch_tfms=aug_transforms(size=224, min_scale=0.75)                   \n)","4a3c9b9b":"dataloaders = dblock.dataloaders(path\/\"train\")","8a668172":"dataloaders.show_batch(nrows=3, ncols=5)","7d0faa18":"learn = cnn_learner(dataloaders, resnet50, metrics=error_rate)","0203ab0d":"learn.fine_tune(1)","f35460f6":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(figsize=(12,12), dpi=60)","5083ca12":"learn.lr_find()","00713aa3":"test_images = (path\/\"test1\")","339ee25b":"images = get_image_files(test_images)","c16dc45b":"images[0]","345868f6":"tst_dl = dataloaders.test_dl(images)","643b8adf":"tst_dl.show_batch()","d88c3f5f":"p = learn.get_preds(dl=tst_dl)","a2ea8f9f":"type(p)","1b6f9698":"p[0]","0f2ac960":"p[1]","06a44a85":"image_paths = list(image_paths)","9e5374b7":"??learn.get_preds","7ce598c7":"for index in range(len(image_paths)):\n    result = dict()\n    im_path = image_paths[index]\n    preds = learn.predict(im_path)[0]\n    result['id'] = im_path\n    result['target'] = preds  \n    results.append(result)","f281eae8":"# Data Validation","0fcfc346":"# Model Building & Training","d85d3c8a":"# Results Validation","ffbd73a1":"# Building Data Loaders","3ca4ae7f":"results = list()","308994e4":"# Extracting Data"}}