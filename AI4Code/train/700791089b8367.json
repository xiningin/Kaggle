{"cell_type":{"9ab84838":"code","fe9f34d6":"code","c9760477":"code","733f47ba":"code","308dc3d6":"code","6f2a7a60":"code","a7068bbb":"code","c2470ad5":"code","ae261a8f":"code","f0a0bc36":"code","47379858":"code","7a5f4ee5":"code","6952f9d2":"code","4e2d64cd":"code","26ead192":"code","b81d4e77":"code","4f919434":"code","a7dd85c6":"code","5c3a7648":"code","ec4586e0":"code","17c0ca13":"code","230aead0":"code","92b716e2":"code","1379270f":"code","3e18b392":"code","9c20bdcb":"code","00a5a1bd":"code","3d6861b1":"code","a631d24d":"markdown","3737c408":"markdown","7e37f655":"markdown","63a0c20d":"markdown","682f56f9":"markdown","cab9a177":"markdown","837b8ad4":"markdown","fee14e91":"markdown","9a34eb5b":"markdown","726b8dd1":"markdown","2181f0b5":"markdown"},"source":{"9ab84838":"# Empty dictionary \n\nempty_d = {} ; empty_d","fe9f34d6":"# Simple dictionaries\n\nsimple_d = {'a':'apple', 'b':'ball', 'c':'cat'} ; print(simple_d)\nsimple_d2 = {'name':'Hal Jordan','sector':2814} ; print(simple_d2)","c9760477":"# Creating using dict() function : no need to use quotes for keys\n\nsimple_d3 = dict(a=1, b=2, c=3) ; print(simple_d3)","733f47ba":"# creating dictionary from lists : zip() function that will Iterate over the two lists in parallel.\n\nk = ['x','y','z']\nv = [10,20,30]\n\nlist_d = dict(zip(k,v)) ; list_d","308dc3d6":"# creating using fromkeys method of dictionary , \n# arguments are list of keys and common value for all keys\n\nk = ['hi','hello','there']\n\nfromkey_d = dict.fromkeys(k, 10) ; fromkey_d","6f2a7a60":"# clear() - the dictionary delete all elements\n\nsimple_d3.clear() ; simple_d3","a7068bbb":"# copy() - make copy of dictionary\n\nsimple_d3 = list_d.copy() ; simple_d3","c2470ad5":"# get(*) - return the value for key passed as argument\n\nsimple_d3.get('y')","ae261a8f":"# items() - return list of tuples of key value pair\n\nsimple_d3.items()","f0a0bc36":"# keys() - return list of keys\n# values() - return list of values\n\nkeys = simple_d3.keys() ; print(keys)\nvalues = simple_d3.values() ; print(values)","47379858":"# pop(*) - remove the key value pair from the dict , argument is key\n\nz = simple_d3.pop('z') ; print(z)\nprint(simple_d3)","7a5f4ee5":"# update(*) - insert the key value pair in the dict\nsimple_d3.update({'u':[11,22,33]})\n\n# Inserting the key value in the dict\nsimple_d3['z'] = 30 ; print(simple_d3)\n\n# popitem() - remove the last inserted item from dictionary\nsimple_d3.popitem() ; print(simple_d3)","6952f9d2":"# setdefault(*) - argument key,value. \n\n# If the key is present it return the value associated with the key, and not the provided one\nprint(simple_d3.setdefault('x',1000))\n\n# If the key is not in the list then it will add the key and value provided to the dictionary\nsimple_d3.setdefault('v',1000) ; print(simple_d3) ","4e2d64cd":"# passing key as index and second barcket index for element of list in it\nsimple_d3['u'][1]","26ead192":"for (k,v) in simple_d3.items():\n    print(f'key - {k} , value - {v}')","b81d4e77":"for k in simple_d3.keys():\n    print(f'key - {k}')","4f919434":"for v in simple_d3.values():\n    print(f\"value - {v}\")","a7dd85c6":"# Creating set using curly brackets \nsimple_s = {'hi','123',321,True} ; print(simple_s)\n\n# creating set using set() operator\nset_2 = set(('hi','one','two',123,False, False)) ; print(set_2)\n\n# creating set of numbers\nnum_s = {11,33,3,1,28,3.6} ; print(num_s)\n\n# list to set\nlist_set = set(['a','b','c']) ; print(list_set)","5c3a7648":"# using for loop\nfor i in simple_s:\n    print(i)\n    \n# checking the element is in set\nprint('a' in list_set)","ec4586e0":"# clear() - clear the set and make it empty\n# copy() - copy set to another variable\n# del - delete the entire set variable \n\ndup_s = simple_s.copy() ; print(dup_s)\ndup_s.clear() ; print(dup_s)\ndel dup_s","17c0ca13":"# add(*) - Adding single element to the set\n# update() - adding multiple elements, we can add any iterable like list,tuple or set \n\nsimple_s.add('add') ; print(simple_s)\nsimple_s.update(['one','smile', 123]) ; print(simple_s)\nsimple_s.update(('two','so', 99)) ; print(simple_s)\nsimple_s.update({'R','Python',False}) ; print(simple_s)\n\n# remove() - remove the item from the set , if item not in set it will raise error\n# discard() - remove the item from set , if item not exitst in set , wont raise error\n# pop() - remove last added element of the set \n\nsimple_s.remove('so') ; print(simple_s)\nsimple_s.discard('RR') ; print(simple_s)\nsimple_s.pop() ; print(simple_s)","230aead0":"# difference(*) - returns the differenc i.e. elements only in the first set\n\na = {1,2,3}\nb = {3,4,5}\n\nprint(a.difference(b)) # items only present in a\nprint(b.difference(a)) # items only present in b","92b716e2":"# difference_update(*) - check the unique element in set a which are not in b and save only those in a\n\na = {1,2,3}\nb = {3,4,5}\nc = {5,4,6}\n\na.difference_update(b); print(a)\nb.difference_update(c); print(b)","1379270f":"# intersection(*) - return only common elements in both sets a and b\n# intersection_update(*) - return only common elements and save in a\n\na = {1,2,3}\nb = {3,4,5}\nc = {5,4,6}\n\nprint(a.intersection(b))\nc.intersection_update(b) ; print(c)","3e18b392":"# symmetric_difference(*) - keep unique elelement present in both sets and delete common elements\n# symmetric_difference_update(*) - keep unique elelement present in both sets and delete common elements save in a\n\na = {1,2,3}\nb = {3,4,5}\nc = {5,6,7}\n\nprint(a.symmetric_difference(b))\nprint(b.symmetric_difference(a))\nb.symmetric_difference_update(c); print(b)","9c20bdcb":"# union(*) - combine all elemenets of both sets and remove duplicate if any\n\na = {1,2,3}\nb = {3,4,5}\nc = {5,6,7}\n\nprint(a.union(b))\nprint(b.union(c))","00a5a1bd":"# isdisjoint(*) - return True if no item in set a is presetn in set b\n\na = {1,2,3}\nb = {3,4,5}\nc = {6,7,8}\n\nprint(a.isdisjoint(a))\nprint(b.isdisjoint(c))","3d6861b1":"# issubset(*) - if all element of a present in b then a is subset of b and return True\n# issuperset(*) - if b contains all elements of a then b is the superset of a \n\na = {1,2,3}\nb = {1,2,3,4}\nc = {6,7,8}\n\nprint(a.issubset(b))\nprint(b.issubset(c))\nprint(b.issuperset(a))","a631d24d":"Set is collection which is unordered and unindexed.\nSets are unchangeable and duplicates are not allowed in set","3737c408":"### Accessing the key and values","7e37f655":"### Creating set","63a0c20d":"### Iteration through key and value","682f56f9":"### Dictionary Methods","cab9a177":"### accessing the elements in set","837b8ad4":"### Set methods","fee14e91":"# Dictionary and Set ","9a34eb5b":"# Set ","726b8dd1":"Dictionaries are set of key and value pairs, keys are the index of the dictionary to call the corrusponding value. ","2181f0b5":"### Creating Dictionary "}}