{"cell_type":{"4cdf0245":"code","94cbf6cd":"code","d9087c75":"code","b03af361":"code","7c6638bc":"code","32322144":"code","e47c4127":"code","a7d2569b":"code","ac959a60":"code","a7bc9ab6":"code","07d918ba":"code","6bfbce5a":"code","b5aa42dc":"code","08cefebe":"code","94be588d":"code","da4f9756":"code","25f155f1":"code","a3540777":"code","d6411df3":"code","9ecd770c":"code","cf062ef5":"code","1a407fe7":"code","95c95ffa":"code","81890d6b":"code","2a539d2a":"code","e68390f4":"code","a2000211":"code","8df58d4d":"code","5c3632a3":"code","9dd0d41f":"code","84960663":"code","64a7ca2c":"code","a2ba71be":"code","1d6d2c42":"code","31bc6a72":"code","140282c9":"code","f2842cb4":"code","754ab3fe":"code","138d73ba":"code","d5dea1ff":"code","54cce30e":"code","1e39f705":"code","11916d52":"code","7dc89ab5":"code","35527d22":"code","b982e724":"code","09b2331f":"code","bd60180f":"code","ad0e2ce4":"code","67f23f1e":"code","bc3ba141":"code","d483bd4c":"code","dcbf544a":"code","00c2cef2":"code","c7e77c82":"code","6ef8104e":"code","bbed1581":"code","a9d26733":"code","657a8dea":"code","de9d84cd":"code","93082436":"code","5cd1495a":"code","fac15884":"code","728fabd2":"code","6268f411":"code","b0562f7f":"code","6766bd77":"code","78e86c08":"code","302d5d4a":"code","2a0f0a83":"code","12ea79a3":"code","8afbac9f":"code","a27a5d17":"code","6c41ccfa":"code","12b9600b":"code","2502d19a":"code","55bd7ec5":"code","dda9e358":"code","9c357236":"code","5c8a19d9":"code","83818379":"code","95bf3b3c":"code","2561b4e6":"code","5f59d465":"code","5c658a4a":"code","e550c631":"code","bc322873":"code","794daf16":"code","634883d8":"code","f3e8ebf2":"code","2dc8b034":"code","78325825":"code","6f4205cd":"code","516ec872":"code","af4c4dbd":"code","7e489d7a":"code","8fc0e02c":"code","403606f4":"code","8c2b7512":"code","f5c434e7":"code","89fde523":"code","70b2dce9":"code","8bc29f5d":"code","bc872e79":"code","35affd8e":"code","755034aa":"code","8721b284":"code","6fa1178a":"code","412c5c39":"code","b05a0df9":"code","4c1f318d":"code","fdd974f5":"code","19130b86":"code","033a12b5":"code","1b446c58":"code","66230290":"code","4a9da48f":"code","5154549c":"code","c3cd96c4":"code","bb652d16":"code","97c42bd4":"code","422ddce9":"code","d0bb2307":"code","0b5d1dfa":"code","95625359":"code","d043ed2f":"code","ac7d8d6a":"code","2f749824":"code","bbd01cfe":"code","270b4506":"code","61caf323":"code","de421157":"code","f71aa37c":"code","b5dd81be":"code","e146f835":"code","5a13cc70":"code","d89a482e":"code","524ba9a6":"code","b8921a5e":"code","5d8a3763":"code","37f9ed4c":"code","965b03f0":"code","ce548c6b":"code","0a9a6a33":"code","1c39e5b7":"code","91652536":"code","efb44a78":"code","961032ad":"code","cb4dfe1e":"code","1145cc81":"code","b4e9ce02":"code","ca582991":"code","ede6e175":"code","1a3c0cc4":"code","c9c3eadb":"code","4dc5da72":"code","e6cfa6c3":"code","7974e0e9":"code","07478a33":"code","cc20ef41":"code","c68de8c0":"code","41acbd74":"code","3b59da04":"code","8b65f2fe":"code","00b91e8d":"code","5c095345":"code","c09bd1d1":"code","d0bb45a1":"code","6103b14b":"code","2ecba531":"code","4a627777":"code","250e8647":"code","f91c8ebd":"code","c6d42af1":"code","51a3c962":"code","33a86182":"code","bddf89ef":"code","70e57a99":"code","a53005da":"code","bdff5484":"code","62e9ae04":"code","210cf658":"markdown","342cff40":"markdown","30e4d8ea":"markdown","e5d83300":"markdown","552edff3":"markdown","890e41c6":"markdown","506c346c":"markdown","e488c5c0":"markdown","569bd40c":"markdown","618c083f":"markdown","0d805b6a":"markdown","dc445bd6":"markdown","8792d008":"markdown","16bbf4e2":"markdown","0a88b6b3":"markdown","a61975cc":"markdown","d9059f6b":"markdown","c9881d9b":"markdown","bde0d48a":"markdown","22ebec0b":"markdown","34d8d065":"markdown","f4703835":"markdown","db79e484":"markdown","88e64582":"markdown","f4ef7a7d":"markdown","d114ae25":"markdown","8c66c305":"markdown","ac566621":"markdown","f044a55f":"markdown","0ff5d204":"markdown","e03fa189":"markdown","535985ba":"markdown","b0354af6":"markdown","824cd9be":"markdown","a01eafaa":"markdown","2b6a5edd":"markdown","a67fed7c":"markdown","ead45fcd":"markdown","5f779b18":"markdown","3692a590":"markdown","fecb61dc":"markdown","ad89049e":"markdown","9999e493":"markdown","6dff7947":"markdown","55c62149":"markdown","2836164f":"markdown","6ee0bc7e":"markdown","163fab23":"markdown","9fc87d42":"markdown","a76c61e2":"markdown","e179eb43":"markdown","0f037770":"markdown","86e3d6ce":"markdown","6cf90e31":"markdown","1d319bd6":"markdown","a6ffd1bc":"markdown","63042768":"markdown","f2cc1818":"markdown","a7e56c96":"markdown","178b04e7":"markdown","ff64701e":"markdown","c62cbad6":"markdown","42f1e8f0":"markdown","dd94f08b":"markdown","357133a6":"markdown","50ff693b":"markdown","67b952a3":"markdown","f86b58f4":"markdown","8168c37f":"markdown","58aa20ac":"markdown","34ecd57a":"markdown","52c3c2ff":"markdown","8abf6423":"markdown","478ea09c":"markdown","a1881762":"markdown","1e0b09dd":"markdown","811fdcb7":"markdown","bbd64166":"markdown","4d7bc3ec":"markdown","89bf960e":"markdown","91fba16b":"markdown","e8e90491":"markdown","eb2cf0a8":"markdown","898cbc21":"markdown","72fe0182":"markdown","b1b01fb2":"markdown","f0b09dea":"markdown","d5729ecb":"markdown","3dfe2f06":"markdown","3e1de455":"markdown","5d6a6d24":"markdown","3463a837":"markdown","ece08f8a":"markdown","0e1ecdcd":"markdown","83e75665":"markdown","d7c39136":"markdown","744a76cc":"markdown","dcd7efa6":"markdown","96f1b9cb":"markdown","79a83725":"markdown","154886f1":"markdown","4696030f":"markdown","041de7b9":"markdown","fc3e707e":"markdown","92b40a11":"markdown","636578d3":"markdown","c901bb11":"markdown","74a4ce12":"markdown","37c0a605":"markdown","72ee3568":"markdown","b674c3f8":"markdown","29a1a77a":"markdown","de5d3ecc":"markdown","21f6d6d1":"markdown","9196d029":"markdown","1ce23c5b":"markdown","e047ee85":"markdown","c6c1abf6":"markdown","83c71daa":"markdown","571cf807":"markdown","fd7646e2":"markdown","b9749668":"markdown","4d38d064":"markdown","55f891db":"markdown","aea5ed53":"markdown","fd2e2a09":"markdown","0ee56873":"markdown","a8bdf5f7":"markdown","38eda679":"markdown","68c87bf0":"markdown","7b2eeb7f":"markdown","6ce44e0d":"markdown","d446685f":"markdown","b7381329":"markdown","6a50eb9b":"markdown","203e6176":"markdown","9e5ec17f":"markdown","c3ee2061":"markdown","1de76e1e":"markdown","ac8e191a":"markdown","4a12a5f0":"markdown","b5004e1a":"markdown","a1348712":"markdown","5b6a2d6d":"markdown","cb557b51":"markdown","f96caade":"markdown","a6503378":"markdown","73f28184":"markdown","61aebd1f":"markdown","b74938ce":"markdown","13a475d5":"markdown","3c67b9f0":"markdown","9fcbbd4b":"markdown","73d044f7":"markdown","677c3326":"markdown","763c3dd3":"markdown","ccd8b443":"markdown","35ae0384":"markdown","9e0dca6c":"markdown","38a31c08":"markdown","61213745":"markdown","59a954ff":"markdown","7fe2379f":"markdown","c5c8f0fb":"markdown","b2f3a17c":"markdown","0067f90f":"markdown","f1638446":"markdown","a140a717":"markdown","51679069":"markdown","2c267ee0":"markdown","5f7f9e41":"markdown","b1ad0b3a":"markdown","79637770":"markdown","3cb0874c":"markdown","a540716a":"markdown","e77dbbcd":"markdown","44416bfa":"markdown","fa688072":"markdown","3ce7cbbd":"markdown","42928da7":"markdown","0c99365d":"markdown","0d7eaa86":"markdown","2b77689e":"markdown","3b08e8f4":"markdown","9361b890":"markdown","15dc6a92":"markdown","0957cf71":"markdown","9533865a":"markdown","ad0aadfd":"markdown","61be59b0":"markdown","4153749a":"markdown","48850a3c":"markdown","8b7d66e4":"markdown","aaaad73e":"markdown","4d150d3f":"markdown","a5437ca7":"markdown","2c595499":"markdown","f4125c35":"markdown","fe61cb01":"markdown","91113e03":"markdown","1137c9e4":"markdown","e929b732":"markdown","223d2955":"markdown","cfce193f":"markdown","0e40d684":"markdown","5b149480":"markdown","023a2ef9":"markdown","c75980af":"markdown","6ac73ea8":"markdown","485ef86b":"markdown","ef0091e9":"markdown","240a0347":"markdown","ba114d8f":"markdown","a2dfca0d":"markdown","938ff75d":"markdown","ce0cc369":"markdown","370b3418":"markdown","3083b3dd":"markdown","f7fa42fe":"markdown","e7cfd05b":"markdown","004b0dc0":"markdown","e0dccb14":"markdown","f320bfff":"markdown","38cea0f3":"markdown","8fa31b2e":"markdown","8a2cfa0b":"markdown","f57044ed":"markdown","e01ba05e":"markdown","67611409":"markdown","76a0a35e":"markdown","4b05edbb":"markdown","0f2cebf3":"markdown","480e53ad":"markdown","ebb7fe73":"markdown","485d652c":"markdown","bfda6130":"markdown","2ffe939a":"markdown","865df6f2":"markdown","dcdea019":"markdown","97bb5c8f":"markdown","0f379ca2":"markdown","8f6673ba":"markdown","ccc07acb":"markdown","3257a375":"markdown","15f9ea93":"markdown","35d14755":"markdown","fcd9e7b9":"markdown","6bfbf2d4":"markdown","51f2ad43":"markdown","b2016877":"markdown","1e86257e":"markdown","9621369d":"markdown","cf1e9568":"markdown","3b353ec1":"markdown","d4fb7a61":"markdown","2379063a":"markdown","7eb2be55":"markdown","b6af7088":"markdown","9ad26503":"markdown","9544d02c":"markdown","f1173226":"markdown","7995d99f":"markdown"},"source":{"4cdf0245":"x = 10","94cbf6cd":"x","d9087c75":"y = 5","b03af361":"x + y ","7c6638bc":"nome = 'Jos\u00e9'","32322144":"sobrenome = 'da Silva'","e47c4127":"nome_completo = nome + ' ' + sobrenome","a7d2569b":"nome_completo","ac959a60":"import pandas as pd\nimport seaborn as sns","a7bc9ab6":"igm = pd.read_csv('..\/input\/igm_modificado.csv')","07d918ba":"igm","6bfbce5a":"igm.head()","b5aa42dc":"igm.tail()","08cefebe":"igm.sample(5)","94be588d":"igm.sample(5).T","da4f9756":"igm[0:5].T","25f155f1":"igm[-5:].T","a3540777":"igm[20:30].T","d6411df3":"igm['porte']","9ecd770c":"igm[['municipio', 'indice_governanca']]","cf062ef5":"type(igm['porte'])","1a407fe7":"igm['porte'].value_counts()","95c95ffa":"%matplotlib inline","81890d6b":"igm['porte'].value_counts().plot.bar()","2a539d2a":"ind_des = igm['indice_governanca']","e68390f4":"ind_des.count()","a2000211":"ind_des.size","8df58d4d":"ind_des.isnull()","5c3632a3":"ind_des.isnull().sum()","9dd0d41f":"ind_des.dropna()","84960663":"ind_des.isnull().sum()","64a7ca2c":"ind_des.dropna(inplace=True)","a2ba71be":"ind_des.isnull().sum()","1d6d2c42":"ind_des.min()","31bc6a72":"ind_des.max()","140282c9":"ind_des.mean()","f2842cb4":"ind_des.std()","754ab3fe":"ind_des.describe()","138d73ba":"igm.describe()","d5dea1ff":"ind_des.hist()","54cce30e":"sns.kdeplot(ind_des)","1e39f705":"sns.distplot(ind_des.dropna())","11916d52":"igm[igm['regiao']=='NORDESTE']","7dc89ab5":"igm['regiao']=='NORDESTE'","35527d22":"filtro = igm['regiao']=='NORDESTE'","b982e724":"igm[filtro].T","09b2331f":"nordeste = igm[filtro]","bd60180f":"nordeste.sample(5).T","ad0e2ce4":"nordeste['perc_pop_econ_ativa'].describe()","67f23f1e":"nordeste['perc_pop_econ_ativa'].hist(bins=50)","bc3ba141":"filtro_nordeste = ~nordeste['perc_pop_econ_ativa'].isnull()","d483bd4c":"nordeste[filtro_nordeste].sort_values(by='perc_pop_econ_ativa', ascending=False)[0:5].T","dcbf544a":"filtro_2 = ~igm['perc_pop_econ_ativa'].isnull()","00c2cef2":"igm[filtro & filtro_2].sort_values(by='perc_pop_econ_ativa', ascending=False)[0:5].T","c7e77c82":"igm.shape","6ef8104e":"nordeste.shape","bbed1581":"igm['municipio'].shape","a9d26733":"igm[['municipio']].shape","657a8dea":"filtro.shape","de9d84cd":"filtro_nordeste.shape","93082436":"filtro_2.shape","5cd1495a":"nordeste[filtro_2]","fac15884":"igm.info()","728fabd2":"igm['area'].sample(5)","6268f411":"igm['area'].astype(float)","b0562f7f":"igm['area'].str.replace(',','').astype(float).sample(10)","6766bd77":"igm['area'] = igm['area'].str.replace(',','').astype(float)","78e86c08":"igm['populacao'].sample(10)","302d5d4a":"igm['populacao'] = igm['populacao'].str.replace(',','')","2a0f0a83":"igm['populacao'] = igm['populacao'].astype(float)","12ea79a3":"igm['populacao'] = igm['populacao'].str.replace('.','')","8afbac9f":"valor_problema = '41.487(1)'","a27a5d17":"valor_problema.split('(')","6c41ccfa":"valor_problema.split('(')[0]","12b9600b":"igm['populacao'] = igm['populacao'].str.split('(')","2502d19a":"igm['populacao'].sample(10)","55bd7ec5":"igm['populacao'] = igm['populacao'].str[0]","dda9e358":"igm['populacao'].sample(10)","9c357236":"igm['populacao'] = igm['populacao'].astype(float)","5c8a19d9":"igm['populacao'] \/ igm['area']","83818379":"igm['densidade_2'] = igm['populacao'] \/ igm['area']","95bf3b3c":"igm[['municipio','populacao','area','densidade_dem', 'densidade_2']].sample(10)","2561b4e6":"igm['densidade_dem'] = igm['densidade_2']","5f59d465":"igm.drop(columns='densidade_2', inplace=True)","5c658a4a":"igm['comissionados_por_servidor'] = igm['comissionados']\/igm['servidores']","e550c631":"!pip install plotly","bc322873":"import plotly.offline as plotly\nimport plotly.graph_objs as go","794daf16":"plotly.init_notebook_mode(connected=True)","634883d8":"pyplot_data = [go.Histogram(x=igm['exp_vida'])]","f3e8ebf2":"plotly.iplot(pyplot_data)","2dc8b034":"pyplot_data_norm = [go.Histogram(x=igm['exp_vida'], histnorm='probability')]","78325825":"plotly.iplot(pyplot_data_norm)","6f4205cd":"igm.to_csv('igm_virgula.csv', index=False, sep=';', decimal=',')","516ec872":"pd.read_csv('igm_virgula.csv',  sep=';').info()","af4c4dbd":"pd.read_csv('igm_virgula.csv', sep=';', decimal=',').info()","7e489d7a":"pd.read_excel('..\/input\/exemplo_1.xls')","8fc0e02c":"pd.read_excel('..\/input\/exemplo_1.xls', sheet_name='Munic\u00edpios')","403606f4":"pd.read_excel('..\/input\/exemplo_1.xls', sheet_name='Munic\u00edpios', header=1)","8c2b7512":"pd.read_excel('..\/input\/exemplo_1.xls', sheet_name='Munic\u00edpios', header=1, skip_footer=14)","f5c434e7":"df = pd.read_excel('..\/input\/exemplo_1.xls', sheet_name='Munic\u00edpios', header=[1], skip_footer=14)","89fde523":"df.info()","70b2dce9":"df['codigo'] = df['COD. UF'] * 100000 + df['COD. MUNIC']","8bc29f5d":"df.sample(5)","bc872e79":"sns.distplot(igm[igm['regiao'] == 'NORDESTE']['indice_governanca'].dropna(), label='NORDESTE')","35affd8e":"sns.distplot(igm[igm['regiao'] == 'SUDESTE']['indice_governanca'].dropna(), label='SUDESTE')","755034aa":"import matplotlib.pyplot as plt","8721b284":"sns.distplot(igm[igm['regiao'] == 'NORDESTE']['indice_governanca'].dropna(), label='NORDESTE')\nsns.distplot(igm[igm['regiao'] == 'SUDESTE']['indice_governanca'].dropna(), label='SUDESTE')\nplt.legend()","6fa1178a":"sns.distplot(igm[igm['regiao'] == 'NORDESTE']['indice_governanca'].dropna(), label='NORDESTE')\nsns.distplot(igm[igm['regiao'] == 'SUDESTE']['indice_governanca'].dropna(), label='SUDESTE')\nsns.distplot(igm[igm['regiao'] == 'CENTRO-OESTE']['indice_governanca'].dropna(), label='CENTRO-OESTE')\nplt.legend()","412c5c39":"sns.distplot(igm[igm['regiao'] == 'NORDESTE']['indice_governanca'].dropna(), label='NORDESTE')\nsns.distplot(igm[igm['regiao'] == 'SUDESTE']['indice_governanca'].dropna(), label='SUDESTE')\nsns.distplot(igm[igm['regiao'] == 'NORTE']['indice_governanca'].dropna(), label='NORTE')\nsns.distplot(igm[igm['regiao'] == 'SUL']['indice_governanca'].dropna(), label='SUL')\nsns.distplot(igm[igm['regiao'] == 'CENTRO-OESTE']['indice_governanca'].dropna(), label='CENTRO-OESTE')\nplt.legend()","b05a0df9":"igm.nunique()","4c1f318d":"sns.boxplot(x=\"regiao\", y=\"indice_governanca\", data=igm)","fdd974f5":"sns.violinplot(x=\"regiao\", y=\"indice_governanca\", data=igm)","19130b86":"sns.violinplot(x=\"regiao\", y=\"indice_governanca\", data=igm, hue='capital')","033a12b5":"sns.violinplot(x=\"regiao\", y=\"indice_governanca\", data=igm, hue='porte')","1b446c58":"sns.factorplot(x=\"regiao\", y=\"indice_governanca\", data=igm, col='porte', kind='violin')","66230290":"sns.countplot(x='regiao', data=igm)","4a9da48f":"sns.countplot(x='regiao', hue='porte', data=igm)","5154549c":"sns.factorplot(x=\"regiao\", data=igm, col='porte', kind='count')","c3cd96c4":"igm['regiao'].value_counts().plot.pie()","bb652d16":"igm['regiao'].value_counts().index","97c42bd4":"pie_chart = go.Pie(labels=igm['regiao'].value_counts().index, values=igm['regiao'].value_counts())\nplotly.iplot([pie_chart])","422ddce9":"igm.isnull().sum()","d0bb2307":"igm['sem_igm'] = igm['indice_governanca'].isnull()","0b5d1dfa":"sns.violinplot(x=\"regiao\", y=\"gasto_pc_educacao\", data=igm, hue='sem_igm')","95625359":"igm['sem_gasto_pc_saude'] = igm['gasto_pc_saude'].isnull()","d043ed2f":"sns.violinplot(x=\"regiao\", y=\"nota_mat\", data=igm, hue='sem_gasto_pc_saude')","ac7d8d6a":"pd.qcut(igm['taxa_empreendedorismo'], 3)","2f749824":"igm['cat_te'] = pd.qcut(igm['taxa_empreendedorismo'], 3)","bbd01cfe":"sns.violinplot(x=\"regiao\", y=\"exp_vida\", data=igm, hue='cat_te')","270b4506":"sns.swarmplot(x=\"regiao\", y=\"indice_governanca\", hue='porte', data=igm)","61caf323":"# sns.set(rc={'figure.figsize':(16.7,8.27)})","de421157":"sns.barplot(x=\"regiao\", y=\"indice_governanca\", hue='porte', data=igm)","f71aa37c":"sns.barplot(x=\"regiao\", y=\"taxa_empreendedorismo\",  data=igm)","b5dd81be":"sns.barplot(x=\"regiao\", y=\"anos_estudo_empreendedor\",  data=igm)","e146f835":"sns.barplot(x=\"regiao\", y=\"pib_pc\",  data=igm)","5a13cc70":"igm.groupby('regiao')['pib_pc'].mean()","d89a482e":"sns.pairplot(x_vars=['gasto_pc_educacao'], y_vars=['nota_mat'], data=igm, hue=\"regiao\", size=5)","524ba9a6":"sns.pairplot(x_vars=['gasto_pc_educacao'], y_vars=['nota_mat'], data=igm, hue=\"regiao\", kind='reg', size=5)","b8921a5e":"igm['nome_len'] = igm['municipio'].str.len()","5d8a3763":"sns.pairplot(x_vars=['nome_len'], y_vars=['idhm'], data=igm, kind='reg', size=5)","37f9ed4c":"temp_df = igm[['nota_mat','exp_vida', 'gasto_pc_saude', 'gasto_pc_educacao', 'regiao']]","965b03f0":"sns.pairplot(temp_df, hue='regiao', kind='reg')","ce548c6b":"sns.pairplot(temp_df.dropna(), hue='regiao', kind='reg')","0a9a6a33":"sns.pairplot(x_vars=['populacao'], y_vars=['indice_governanca'], data=igm, hue=\"regiao\", kind='reg', size=5)","1c39e5b7":"import numpy as np","91652536":"igm['log_pop'] = np.log(igm['populacao'])","efb44a78":"sns.pairplot(x_vars=['log_pop'], y_vars=['indice_governanca'], data=igm, hue=\"regiao\", kind='reg', size=5)","961032ad":"format_dict = {'perc_pop_econ_ativa' :'{:.2%}'}","cb4dfe1e":"igm.sample(5).style.format(format_dict)","1145cc81":"igm.info()","b4e9ce02":"format_dict = {'perc_pop_econ_ativa' :'{:.0%}', 'taxa_empreendedorismo' :'{:.0%}'}","ca582991":"igm.sample(5).style.format(format_dict)","ede6e175":"igf = pd.read_excel('..\/input\/exemplo_2.xls', header=[0], skiprows=8, skip_footer=2)","1a3c0cc4":"igf","c9c3eadb":"igf = igf[1:].copy()","4dc5da72":"igf.rename(columns={'Unnamed: 1':'Ranking Estadual'}, inplace=True)","e6cfa6c3":"igf.rename(columns={'Munic\u00edpio':'mun'}, inplace=True)\ndf.rename(columns={'NOME DO MUNIC\u00cdPIO':'mun'}, inplace=True)","7974e0e9":"df.merge(igf)","07478a33":"df.merge(igf).shape","cc20ef41":"df.shape","c68de8c0":"igf.shape","41acbd74":"df['Munic\u00edpio'] = df['mun']","3b59da04":"igf['mun'] = igf['mun'].str.normalize('NFKD').str.encode('ascii', errors='ignore').str.decode('utf-8')\ndf['mun'] = df['mun'].str.normalize('NFKD').str.encode('ascii', errors='ignore').str.decode('utf-8')","8b65f2fe":"df.merge(igf).shape","00b91e8d":"igf['mun'] = igf['mun'].str.replace(' ','')\ndf['mun'] = df['mun'].str.replace(' ','')","5c095345":"df.merge(igf).shape","c09bd1d1":"df_mun = df[~df.mun.isin(igf['mun'])]['mun'].values","d0bb45a1":"igf_mun = igf[~igf.mun.isin(df['mun'])]['mun'].values","6103b14b":"from difflib import SequenceMatcher","2ecba531":"for municipio_1 in df_mun:\n    \n    \n    print(score, municipios_proximos)\n    if score > 0.8:\n        idx = igf[igf['mun']==municipios_proximos[1]].index[0]\n        igf.at[idx, 'mun'] = municipios_proximos[0]       ","4a627777":"df.merge(igf).shape","250e8647":"df[~df.mun.isin(igf.mun)]","f91c8ebd":"igf[~igf.mun.isin(df.mun)]","c6d42af1":"igf.at[2911,'mun'] = 'EmbudasArtes'","51a3c962":"df[~df.mun.isin(igf.mun)]","33a86182":"igf[~igf.mun.isin(df.mun)]","bddf89ef":"igf.at[4702, 'mun'] = 'SaoValerio'","70e57a99":"igf.at[4962, 'mun'] = 'SaoVicentedoSerido'","a53005da":"df[~df.mun.isin(igf.mun)]","bdff5484":"igf[~igf.mun.isin(df.mun)]","62e9ae04":"df.merge(igf).shape","210cf658":"Para selcionar o que tinha antes basta selecionarmos a posi\u00e7\u00e3o 0 por meio do comando `[0]`","342cff40":"Agora vamos fazer a mesma coisa no `DataFrame`, vamos precisar de chamar o `str` para acessar os m\u00e9todos de texto.","30e4d8ea":"De prefer\u00eancia devemos usar um filtro do mesmo tamanho que um `DataFrame` para fazer as sele\u00e7\u00f5es. Mas se jogarmos um filtro maior em um `DataFrame` que \u00e9 um subconjunto do `DataFrame` original, ir\u00e1 funcionar porque ele ir\u00e1 se guiar pelo `index`, mas ir\u00e1 retornar um aviso.\n\nSe algum aviso desse tipo acontecer, voc\u00ea j\u00e1 tem uma boa ideia do que pode ter acontecido.","e5d83300":"### Convertendo a coluna de \u00e1rea","552edff3":"Um gr\u00e1fico bastante \u00fatil de plotarmos \u00e9 o gr\u00e1fico de pizza, podemos fazer isso com o `pandas`:","890e41c6":"Outra forma de vermos os 5 primeiros registros podemos usar o comando:","506c346c":"1. Utilize o `.min()`, `.max()`, e `.mean()` para avaliar os dados da coluna `exp_vida`\n2. Utilize o `.describe()` para avaliar os dados da coluna `idhm`","e488c5c0":"## Retirando acentos e caracteres especiais:","569bd40c":"Com o simples par\u00e2metro <i>hue=\"Regi\u00e3o\"<\/i> conseguimos gerar um gr\u00e1fico colorido de acordo com as regi\u00f5es do Brasil, que s\u00e3o uma coluna na tabela original.\n\n## Regress\u00f5es Lineares\n\nDe forma extremamente simples, podemos plotar <i>regress\u00f5es lineares<\/i> no gr\u00e1fico acima. Bastante adicionarmos o par\u00e2metro <i>kind='reg'<\/i> no c\u00f3digo acima.","618c083f":"## Violin plot","0d805b6a":"E finalmente vamos plotar 5 gr\u00e1ficos ao mesmo tempo:","dc445bd6":"Para pegarmos o valor negativo de uma sequ\u00eancia de `True` ou `False`, podemos usar o `~`","8792d008":"## An\u00e1lisando Frequ\u00eancia:\n\nPara contarmos quantas ocorr\u00eancias temos por cada categoria podemos usar o `.countplot()`","16bbf4e2":"## Plots usando Escala logar\u00edtimica","0a88b6b3":"##  `Exerc\u00edcios: Visualizando Categorias`\n\n1. Criar uma coluna `sem_gasto_pc_saude` a partir dos valores em branco da coluna `gasto_pc_saude`\n2. Criar uma coluna `cat_te` separando os valores em 3 categorias pra `qcut`\n3. Criar um `factorplot` do tipo `box` com `porte` no eixo `x` e `exp_vida` no eixo `y` e `col='regiao'` e `row='cat_te`\n4. Facilite a leitura dos nomes das regi\u00f5es. Dica: `g.set_xticklabels(rotation=30)`","a61975cc":"Se utilizarmos uma sele\u00e7\u00e3o de coluna `indice_governanca` e o `.describe()`, iremos ver o detalhamento dos dados dessa coluna de acordo com o m\u00e9todo `.describe()`","d9059f6b":"# Fazendo Opera\u00e7\u00f5es de Agregamento:","c9881d9b":"Vamos criar uma coluna nova `log_pop` com os valores logar\u00edtimicos da `populacao` por meio da fun\u00e7\u00e3o `.log()` do `numpy`:","bde0d48a":"Vamos terminar de substituir outros mun\u00edcipios que fa\u00e7am sentido:","22ebec0b":"Vamos testar todos os valores contidos nas vari\u00e1veis `df_mun` e `igf_mun` para saber quais s\u00e3o os valores na coluna `mun` de cada `DataFrame` que mais se assemelham, e substituir esses valores caso eles tenham uma semelhan\u00e7a maior do que 80%.","34d8d065":"Vamos usar o split:","f4703835":"## Swarm plot","db79e484":"Podemos plotar essa distribui\u00e7\u00e3o para o Nordeste:","88e64582":"Uma funcionalidade bem legal das bibliotecas gr\u00e1ficas do Python \u00e9 que podemos plotar um gr\u00e1fico em cima do outro.\n\nPara isso vamos come\u00e7ar plotando um gr\u00e1fico simples.","f4ef7a7d":"Por padr\u00e3o o `read_excel()` vai abrir a primeira aba da planilha do `Excel`, para selecionarmos uma diferente, precisamos do par\u00e2metro `sheet_name`:","d114ae25":"# Explorando vari\u00e1veis cont\u00ednuas","8c66c305":"Podemos remover esses valores em branco com um simples comando, o `dropna()`.","ac566621":"Um jeito bem interessante de fazermos histogramas \u00e9 com gr\u00e1ficos interativos, um boa biblioteca para fazer isso \u00e9 a `plotly`, para instalarmos ela, basta usarmos o comando `!pip install plotly`","f044a55f":"# Mais Gr\u00e1ficos Categ\u00f3ricos","0ff5d204":"## Criando novas vari\u00e1veis categ\u00f3ricas a partir de agrupamentos","e03fa189":"Para tirar o `('1')`, uma forma \u00e9 quebrando a string em v\u00e1rios peda\u00e7os, para isso usamos o `split()`. Vamos come\u00e7ar com um exemplo fora do `DataFrame` para ilustrar melhor o conceito:","535985ba":"Para verificarmos quais s\u00e3o os valores em branco podemos usar o `isnull()`, que nos retornar uma `Series` com valores `True` ou `False` de acordo com se os valores estiverem em branco ou n\u00e3o.","b0354af6":"Vamos verificar novamente se temos valores em branco no nosso conjunto de dados:","824cd9be":"Em `labels` colocamos os nomes das regi\u00f5es, e em `values` colocamos os valores:","a01eafaa":"Vamos salvar os nossos dados em uma vari\u00e1vel chamada `df`:","2b6a5edd":"## Melhorando a visualiza\u00e7\u00e3o da tabela","a67fed7c":"## Retirando os espa\u00e7os","ead45fcd":"##  `Exerc\u00edcios: Series`","5f779b18":"Vamos observar como est\u00e3o nossos dados:","3692a590":"## O comando `.at[]`","fecb61dc":"##  `Exerc\u00edcios: Visualizando Categorias`\n\n1. Fazer um `boxplot` de `porte` no eixo `x` e `exp_vida` no eixo `y`\n2. Fazer um `violinplot` de `porte` no eixo `x` e `exp_vida` no eixo `y` com `hue=regiao`\n3. Criar um `factorplot`  do tipo `box` com `porte` no eixo `x` e `exp_vida` no eixo `y` e `col='regiao'`\n4. Pegar o `factorplot` do item 1 e substituir `col='regiao'` por `row='regiao'`\n5. Fazer um `factorplot` usando `kind='count'`, `hue='porte'` e `x='regiao'`","ad89049e":"Vamos importar uma segunda base de exemplos:","9999e493":"## Dissecando o DataFrame (Tipo de Dados)","6dff7947":"Quando selecionamos uma coluna, o nosso resultado \u00e9 um objeto do tipo `Series`, que \u00e9 basicamente a forma do pandas representar uma coluna. Uma `Series` \u00e9 composta pelos seguintes elementos:\n    1. Index\n    2. Index label\n    3. Hidden values\n    4. Series Name\n    5. Lenght\n    6. dtype","55c62149":"Para selecionarmos colunas no pandas, basta dizermos o nome do DataFrame seguido por colchetes com o nome da coluna dentro:\n\n__Nome do Dataframe:__ `igm`\n\n__Colchetes com a coluna dentro:__ `['Porte do Munic\u00edpio']`\n\n__Comando completo:__ `igm['Porte do Munic\u00edpio']`","2836164f":"Um comando muito \u00fatil para avaliar uma `Series` \u00e9 o `.describe()`, que ir\u00e1 calcular os quartis, valores m\u00e1ximo, m\u00ednimo, a m\u00e9dia e o desvio padr\u00e3o.","6ee0bc7e":"Um gr\u00e1fico ligeiramente diferente, mas que a al\u00e9m da linha plota as `bins` do histograma.","163fab23":"[20:30] vai selecionar exatamente 10 elementos (30 - 20). O n\u00famero da direita menos o n\u00famero da esquerda \u00e9 sempre o total de elementos que ser\u00e3o selecionados, e isso \u00e9 uma conven\u00e7\u00e3o no Python.\n\nO n\u00famero 20 \u00e9 selecionado por ser um intervalo fechado na esquerda, e o n\u00famero 30 n\u00e3o \u00e9 selecionado por ser um intervalo aberto na direita. O que \u00e9 outra conven\u00e7\u00e3o do Python.","9fc87d42":"Outra forma de escrever isso \u00e9 utilizando dois filtros ao mesmo tempo, para isso temos que usar o operador l\u00f3gico `&` que representa `E`, tamb\u00e9m temos a oportunidade usar o operador l\u00f3gico `|`, que significa `OU`:","a76c61e2":"## Selecionando M\u00faltiplas Colunas","e179eb43":"Tamb\u00e9m temos valores com v\u00edrgula, vamos substitu\u00ed-los por um valor em branco:","0f037770":"Para vermos apenas uma pequena parte, temos o comando `.head()` ir\u00e1 mostrar por padr\u00e3o as 5 primeiras linhas do que existe dentro de um conjunto de dados dentro de um objeto do pandas.","86e3d6ce":"Vamos criar um novo filtro para o `DataFrame` inteiro e n\u00e3o s\u00f3 para o Nordeste.","6cf90e31":"Vamos criar uma vari\u00e1vel chamada `ind_des` para guarda a nossa `Series` relativa a coluna `indice_governanca`","1d319bd6":"Olhando o desvio padr\u00e3o dos valores:","a6ffd1bc":"Al\u00e9m de importarmos arquivos `.csv`, tamb\u00e9m podemos ler de forma f\u00e1cil arquivos do `Excel`:","63042768":"Podemos usar o `.shape` em uma `Series` tamb\u00e9m, que nos retornar\u00e1 apenas 1 dimens\u00e3o.","f2cc1818":"## `Exerc\u00edcios: Revis\u00e3o`\n\n1. Plotar um histograma da coluna `exp_vida`\n2. Usar o m\u00e9todo `.describe` na coluna `exp_vida`\n3. Usar o m\u00e9todo `.describe` na coluna `exp_vida` onde os munic\u00edpios sejam apenas da regi\u00e3o `NORTE`\n4. Usar o m\u00e9todo `.value_counts()` na coluna `estado` filtrando os mun\u00edcipios que tenham `pib_pc` > 50000\n5. Plotar um gr\u00e1fico de barras do resultado gerado pelo item 4","a7e56c96":"E vamos plotar um gr\u00e1fico os utilizando como filtro:","178b04e7":"## M\u00faltiplas Regress\u00f5es Lineares","ff64701e":"E executar o filtro em seguida:","c62cbad6":"# Primeiros Gr\u00e1ficos com o Seaborn\n\nO Python tem diversas ferramentas para plotar gr\u00e1ficos, uma das mais f\u00e1ceis e poderosas de usar \u00e9 o __seaborn__ que foi importado no come\u00e7o do nosso c\u00f3digo com o comando <i>import seaborn as sns<\/i>.","42f1e8f0":"Um tipo de gr\u00e1fico interessante \u00e9 o swarm plot que nos permite ver de forma granular os pontos que comp\u00f5e uma distribui\u00e7\u00e3o, e nos d\u00e3o a possibilidade de an\u00e1lises com a abaixo:","dd94f08b":"## Ordenando um DataFrame que possui uma coluna com NaNs","357133a6":"Os gr\u00e1ficos acima est\u00e3o pegando uma vari\u00e1vel cont\u00ednua e claculando a m\u00e9dia dela para uma dada regi\u00e3o, para replicarmos o gr\u00e1fico acima em n\u00fameros poder\u00edamos utilizar o seguinte comando:","50ff693b":"Depois podemos executar o `.style.format()` em uma parte do `DataFrame` (ou todo ele se quis\u00e9ssemos):","67b952a3":"Podemos usar o m\u00e9todo `str.normalize...` para retirar os acentos e outros caracteres especiais:","f86b58f4":"A vantagem da forma explicitada acima \u00e9 que podemos selecionar qualquer local da tabela, n\u00e3o estando restritos as primeiras linhas. Por exemplo, o comando a seguir seleciona as linhas 20 at\u00e9 29:","8168c37f":"Vamos contar a quantidade de elementos em `ind_des`","58aa20ac":"N\u00e3o mudou, por que isso aconteceu? Uma s\u00e9rie de fun\u00e7\u00f5es no pandas n\u00e3o alteram o objeto em quest\u00e3o, porque muitas vezes estamos fazendo transforma\u00e7\u00f5es tempor\u00e1rias para gerar uma visualiza\u00e7\u00e3o ou an\u00e1lise, para mudar o objeto temos que passar um par\u00e2metro a mais que \u00e9 o `inplace=True`.","34ecd57a":"##  `Exerc\u00edcios: Manipula\u00e7\u00e3o de Strings`\n\n1. Transforme a coluna `ranking_igm` para uma coluna num\u00e9rica\n2. Crie uma coluna `comissionados_por_servidor_2` a partir das colunas `comissionados` e `servidores`\n3. Substitua a coluna `comissionados_por_servidor` se for o caso\n4. Delete a coluna `comissionados_por_servidor_2`","52c3c2ff":"Podemos ver que ganhamos mais alguns itens no nosso merge, mas ainda falta um pouco:","8abf6423":"Para plotar v\u00e1rios gr\u00e1ficos ao mesmo tempo com legenda, vamos precisar importar uma parte do `matplotlib`:","478ea09c":"Selecionando o valor m\u00e1ximo do \u00edndice de desempenho","a1881762":"Vamos imprimir novamente os valores:","1e0b09dd":"Selecionando o valor m\u00ednimo do \u00edndice de desempenho","811fdcb7":"O bom \u00e9 que o `describe()` tamb\u00e9m funciona em um `DataFrame`, e por padr\u00e3o apenas para as colunas num\u00e9ricas:","bbd64166":"Vamos tentar juntar os `DataFrames` e ver o que acontece:","4d7bc3ec":"Vamos precisar importar duas sub-bibliotecas da `plotly`, importante notar que estamos usando o modo `offline` para facilitar a nossa vida e n\u00e3o necessitarmos de autentica\u00e7\u00e3o no site deles.","89bf960e":"Agora plotamos o gr\u00e1fico e podemos observar, que a falta de um IGM, indica uma menor expectativa de vida na maioria das regi\u00f5es.","91fba16b":"## Usando o .describe() em um DataFrame","e8e90491":"Como vimos anteriormente, a maioria dos nossos n\u00fameros objetos foi interpretado como objeto, o que na pr\u00e1tica significa que \u00e9 texto.\n\nPara conseguirmos importar os n\u00fameros no formato correto precisamos usar o comando `decimal=','`.","eb2cf0a8":"Vamos importar o `SequenceMatcher` para compararmos dois textos e gerarmos um score de qu\u00e3o pr\u00f3ximos eles s\u00e3o (1 \u00e9 id\u00eantico e 0 \u00e9 nada similar).","898cbc21":"Para vermos a probabilidade de dado valor acontecer em vez de quantos valores daquele tipo aconteceram, basta usar o par\u00e2metro `histnorm='probability'`:","72fe0182":"Agora n\u00f3s iremos atualizar a densidade demogr\u00e1fica da tabela com um valor mais recente. Para isso temos que transformar as colunas de area e de populacao em n\u00fameros (`float` ou `int`), atualmente elas est\u00e3o em forma de texto (`str`)","b1b01fb2":"## Outras formas de selecionar uma pequena amostra de dados:","f0b09dea":"Vamos avaliar como cada `regiao` se sai em rela\u00e7\u00e3o ao `indice_governanca`","d5729ecb":"##  `Exerc\u00edcios: Mais Gr\u00e1ficos Categ\u00f3ricos`\n\n1. Fazer um gr\u00e1fico a partir do agrupamento de `porte` avaliando `gasto_pc_saude`\n2. Fazer o exerc\u00edcio 1 a partir de um `groupby()`\n3. Fazer um `swarmplot` usando `y=\"gasto_pc_saude\"`, `hue='porte'`","3dfe2f06":"O `DataFrame` chamado `df` tem 5570 mun\u00edcipios e com 6 colunas:","3e1de455":"Para plotar o gr\u00e1fico usamos o `plotly.iplot()`","5d6a6d24":"O erro aconteceu porque tinhamos valores `NaN` no nosso DataFrame, podemos resolver isso da seguinte forma:","3463a837":"Uma forma mais elaborada de fazer isso \u00e9 com o violin plot, que al\u00e9m de fazer os quartis, plota em seu lado as distribui\u00e7\u00f5es dos valores.","ece08f8a":"O nome dessa opera\u00e7\u00e3o de colocar algo entre colchetes \u00e9 slicing, e isso como conven\u00e7\u00e3o geral \u00e9 uma forma de selecionar um subconjunto de dados.","0e1ecdcd":"## Selecionando Linhas no pandas","83e75665":"Desta vez n\u00e3o funcionou, porque de acordo com a mensagem de erro, al\u00e9m de v\u00edrgulas temos `.` e temos um `(1)` solto de acordo com a nossa mensagem de erro.\n\nVamos tirar o `.`","d7c39136":"Com bastante facilidade podemos plotar um gr\u00e1fico com os valores acima, basta colocar `.plot.bar()` na sequ\u00eancia.","744a76cc":"# Visualizando Categorias","dcd7efa6":"## Opera\u00e7\u00f5es matem\u00e1ticas entre colunas","96f1b9cb":"Vamos selecionar o elemento da posi\u00e7\u00e3o zero para os casos de termos um `(` no elemento e atualizar os valores da coluna com isso.","79a83725":"Fazer revis\u00e3o do que foi visto.","154886f1":"## Fazendo Filtros com Valores Negativos","4696030f":"Podemos converter v\u00e1rias colunas ao mesmo tempo criando um dicion\u00e1rio com v\u00e1rios valores:","041de7b9":"O nosso `DataFrame` ap\u00f3s o `merge()` ficou com 5526 linhas, o que significa que 44 mun\u00edcipios n\u00e3o est\u00e3o com nomes iguais entre os DataFrames","fc3e707e":"Por padr\u00e3o o cabe\u00e7alho do nosso arquivo vai ser a primeira linha de texto, para alteramos isso podemos usar o par\u00e2metro `header`:","92b40a11":"Vamos ver se essa coluna atende aos nossos objetivos:","636578d3":"Segue a taxa de empreendedorismo por regi\u00e3o:","c901bb11":"### An\u00e1lise do Tamanho do Nome do Munic\u00edpio\n\nUma an\u00e1lise simples, mas interessante \u00e9 vermos se o tamanho do nome de um `municipio` em n\u00famero de caracteres influencia o `idhm`\n\nPara computar o n\u00famero de caracteres, basta usar o m\u00e9todo `.len()`","74a4ce12":"## B\u00f4nus: Mostrando Valores como um Percentual","37c0a605":"Note que o `filtro_nordeste` tem o mesmo n\u00famero de linhas do `DataFrame` que o originou","72ee3568":"O `seaborn` de forma autom\u00e1tica agrupa de acordo com as vari\u00e1veis categ\u00f3ricas que voc\u00ea coloca no eixo `x` e tira as m\u00e9dias das vari\u00e1veis que voc\u00ea coloca no eixo `y`.\n\nSegue um \u00edndice de governan\u00e7a por regi\u00e3o e por porte de cidade:","b674c3f8":"### Gr\u00e1ficos Interativos","29a1a77a":"1. Plote um histograma do `gasto_pc_educacao`\n2. Plote um `sns.kdeplot()` do `gasto_pc_educacao`\n3. Plote um `sns.distplot()` do `gasto_pc_educacao`\n4. Utilize o `.describe()` para ver os valores num\u00e9ricos do `gasto_pc_educacao`","de5d3ecc":"1. Crie um filtro chamado `meu_filtro` para selecionar apenas as linhas onde os valores da coluna `pib_pc` sejam maiores do que 50000\n2. Crie um novo `DataFrame` chamado `igm_filtrado_pib_pc` aplicando o `meu_filtro` no `igm`\n3. Utilize o m\u00e9todo `.describe()` na coluna `pib_pc` do `igm_filtrado_pib_pc`\n4. Plote um histograma da coluna `pib_pc` do `igm_filtrado_pib_pc`","21f6d6d1":"E vamos converter em n\u00famero e salvar o resultado","9196d029":"Vamos plotar o gr\u00e1fico de novo substituindo `populacao` por `log_pop`","1ce23c5b":"Abaixo segue um comando opcional para aumentar todos os gr\u00e1ficos que ser\u00e3o gerados:\n\nO `#` \u00e9 um coment\u00e1rio e significa que o c\u00f3digo a seguir dele n\u00e3o ser\u00e1 executado.","e047ee85":"## `Exerc\u00edcios: Histogramas Interativos`\n\n1. Plote um histograma interativo de 2 colunas da sua escolha.","c6c1abf6":"Para conseguirmos plotar os gr\u00e1ficos no `Jupyter Notebook` no modo `offline` tamb\u00e9m precisamos executar o comando abaixo:","83c71daa":"Ele retornou os valores, e podemos ver que n\u00e3o tem nenhum valor em branco, mas vamos verificar de fato para ver se mudamos os nossos valores:","571cf807":"Valores est\u00e3o ligeiramente diferentes, provavelmente \u00e9 por conta de estarmos usando valores mais recentes para a populacao do que os que foram utilizados no c\u00e1lculo original da densidade demogr\u00e1fica.\n\nPara atualizar os valores, basta executar o seguinte comando:","fd7646e2":"Uma forma para facilitar a visualiza\u00e7\u00e3o dos gr\u00e1ficos acima \u00e9 usando o `factorplot`, que funciona tanto com linhas quant com colunas.","b9749668":"### Gr\u00e1ficos Mais Elaborados","4d38d064":"Tem alguns jeitos de selecionar subconjuntos, podemos escolher todas as cidades que perten\u00e7am a regi\u00e3o nordeste utilizando o comando abaixo:","55f891db":"Vai acontecer de termos alguns gr\u00e1ficos que n\u00e3o ficam em uma escala adequada, para isso podemos tentar converter para uma escala logar\u00edtimica.","aea5ed53":"Podemos guardar esse resultado dentro de uma vari\u00e1vel:","fd2e2a09":"Como n\u00e3o temos c\u00f3digos em ambos os `DataFrames` com nomes de `df` e `igf`, vamos fazer a jun\u00e7\u00e3o deles por meio dos nomes dos munic\u00edpios, para isso vamos deixar o nome da coluna referente aos nomes dos munic\u00edpios iguais nos 2 `DataFrames`.","0ee56873":"# Primeiro Contato com os Dados","a8bdf5f7":"## Histograma: Trocando Valores Absolutos por Probabilidades","38eda679":"## Comparando proximidade de strings:","68c87bf0":"Vamos gerar uma nova coluna chamada c\u00f3digo:","7b2eeb7f":"Apesar da conven\u00e7\u00e3o no Python ser utilizar o `.head()` ou o `.tail()` para olhar um DataFrame novo, algo muito mais inteligente de se fazer para ter uma ideia representativa do DataFrame \u00e9 utilizar o `sample(5)`, que seleciona 5 linhas aleat\u00f3rias do seu `DataFrame`. Se voc\u00ea executar o comando algumas vezes vai obter resultados diferentes a cada itera\u00e7\u00e3o.","6ce44e0d":"## \u00cdndice de Governan\u00e7a por Regi\u00e3o","d446685f":"Podemos ver que ganhamos mais algumas convers\u00f5es, mas ainda foram poucas.","b7381329":"Para prepararmos os dados, usamos o comando a seguir:","6a50eb9b":"##  `Exerc\u00edcios: Filtros`","203e6176":"## `Exerc\u00edcios: Python B\u00e1sico`","9e5ec17f":"Vamos olhar os tipos de dados que est\u00e3o no nosso `DataFrame`","c3ee2061":"Vamos criar uma coluna chamada `Mun\u00edcipio` para guardar os nomes originais dos mun\u00edcipios.","1de76e1e":"E podemos executar o `.style.format()` novamente","ac8e191a":"## Plotando um Histograma do \u00cdndice de Governan\u00e7a","4a12a5f0":"# Preparando o Ambiente\n\nImportando as bibliotecas que iremos usar no treinamento:","b5004e1a":"Abaixo iremos plotar em apenas uma linha de c\u00f3digo, um gr\u00e1fico que mostra a rela\u00e7\u00e3o entre __'Gastos em sa\u00fade e educa\u00e7\u00e3o per capita'__ com o __'\u00cdndice de Desempenho'__.","a1348712":"## Gr\u00e1ficos de Pizza","5b6a2d6d":"## Tendo uma vis\u00e3o geral do \u00cdndice de Governan\u00e7a","cb557b51":"A coluna `densidade_2` se tornou obsoleta, podemos delet\u00e1-la com o seguinte comando:","f96caade":"## Plotando M\u00faltiplos Gr\u00e1ficos","a6503378":"##  `Exerc\u00edcios: Histogramas`","73f28184":"Uma forma de melhor utilizarmos essa informa\u00e7\u00e3o \u00e9 contabilizando o total de valores em branco, note que `True` tem valor `1` e `False` tem valor `0`, portanto se somarmos todos os elementos, teremos o total de valores em branco.","61aebd1f":"### Importando Valores com V\u00edrgula","b74938ce":"### Convertendo a coluna de popula\u00e7\u00e3o","13a475d5":"Podemos juntar diversos comando na mesma linha, isto \u00e9, logo ap\u00f3s o `sample(5)`, pode usar o `.T`, e essas funcionalidades ir\u00e3o funcionar em cascata e de forma sequ\u00eancial, primeiro o `sample(5)`, e depois o `.T`","3c67b9f0":"Para for\u00e7ar a convers\u00e3o para um n\u00famero podemos usar o comando `.astype(float)`","9fcbbd4b":"## Comparando Densidades","73d044f7":"# Iniciando com Python","677c3326":"## Groupby","763c3dd3":"Podemos adicionar mais um agrupamento no gr\u00e1fico com o comando `hue`:","ccd8b443":"O split separou o nosso elemento original em dois elementos, o que tinha antes da `(` e o que tinha depois:","35ae0384":"## Avaliando o tamanho dos DataFrames e Series","9e0dca6c":"## Opera\u00e7\u00f5es de Agregamento Num\u00e9ricas\n","38a31c08":"## Criando novas vari\u00e1veis categ\u00f3ricas a partir de valores em branco","61213745":"Note que o `.count()` n\u00e3o contabiliza valores em branco, se quisermos ver os valores em branco temos que usar o atributo `.size`, que n\u00e3o tem paranteses","59a954ff":"##  `Exerc\u00edcios: Plotando M\u00faltiplos Gr\u00e1ficos`\n\n1. Plote os gr\u00e1ficos de `exp_vida`de acordo com o `porte`\n2. Adicione legendas ao gr\u00e1fico","7fe2379f":"Vamos imprimir os valores da coluna e ver que j\u00e1 temos algo com cara de n\u00famero, mas que ainda \u00e9 um `object`","c5c8f0fb":"Quando rodamos o comando _igm['Regi\u00e3o']=='NORDESTE'_ temos um resultado (em forma de Series) de _True_ (Verdadeiro) ou _False_ (Falso) de acordo com o \u00edndice do elemento.","b2f3a17c":"Vamos contar quantos valores da coluna `porte` temos para cada tipo com o comando `value_counts()`:","0067f90f":"## Avalia\u00e7\u00e3o de uma vari\u00e1vel cont\u00ednua dada uma vari\u00e1vel categ\u00f3rica","f1638446":"Vamos converter isso para `float`:","a140a717":"Podemos selecionar multiplas colunas com o comando `igm[['municipio', 'indice_governanca']]`:","51679069":"##  `Exerc\u00edcios: Importando Arquivos`\n\n1. Importe o arquivo `dados_inpe.xlsx` usando a fun\u00e7\u00e3o `pd.read_excel()`.\n2. Importe novamente o arquivo ajustando os par\u00e2metros `header` e `skip_footer`\n3. Averigue o `DataFrame` gerado no item 2. Use o comando `.info()`.\n4. Importe o arquivo `anexo-V.csv`, usando o `read_csv()` e o par\u00e2metro `encoding='latin1'`. (Ignore o `DTypeWarning` caso aconte\u00e7a, ou use o par\u00e2metro `low_memory=False`) \n5. Importe novamente o arquivo ajustando o par\u00e2metro `header` e salve o `DataFrame` em uma vari\u00e1vel com o nome de `anexo`.\n6. Averigue a vari\u00e1vel `anexo` com o comando `.info()`.","2c267ee0":"Como podemos notar, temos algumas colunas que s\u00e3o n\u00fameircas mas que est\u00e3o como `object`, o que normalmente ir\u00e1 significar que s\u00e3o texto. Vamos avaliar o que est\u00e1 acontecendo.","5f7f9e41":"Atr\u00e1ves do comando `isin()` conseguimos se os valores de uma coluna est\u00e3o contidos em outra coluna. Com o `~` conseguimos saber quais os valores n\u00e3o est\u00e3o contidos.","b1ad0b3a":"E inclusive plotar 20 pequenos gr\u00e1ficos de violino ao mesmo tempo:","79637770":"Uma das primeiras coisas a se fazer quando se pega um conjunto de dados novo \u00e9 uma r\u00e1pida visualiza\u00e7\u00e3o a fim de entender melhor o que tem dentro dele. ","3cb0874c":"## Slicing no Pandas","a540716a":"O comando inverso ao `head()` \u00e9 o `tail()`, que ir\u00e1 mostrar as 5 __\u00faltimas__ linhas do DataFrame por padr\u00e3o:","e77dbbcd":"Um tipo de vari\u00e1vel categ\u00f3rica bastante interessante de avaliar s\u00e3o os valores em branco:","44416bfa":"## Usando v\u00e1rios filtros ao mesmo tempo","fa688072":"Para sabermos o tamanho de um `DataFrame` usamos o comando `.shape`","3ce7cbbd":"Note que o segundo filtro que utilizamos tem o mesmo tamanho do primeiro filtro e do `DataFrame` original","42928da7":"Vamos renomear a coluna `Unnamed: 1':'Ranking Estadual`, para isso vamos usar o comando `rename()`:","0c99365d":"A op\u00e7\u00e3o mais recomendada \u00e9 usar o `.style.format()`, que ir\u00e1 mexer apenas na exibi\u00e7\u00e3o dos dados e n\u00e3o ir\u00e1 alterar a estrutura dos dados em si.\n\nPara usarmos o `.style.format()`, primeiro precisamos de criar um `dict` com o nome da coluna e o tipo de formata\u00e7\u00e3o que desejamos:","0d7eaa86":"Engra\u00e7ado, que temos 10 colunas em um `DataFrame` e 6 colunas em outro, mas o nosso resultado do merge \u00e9 de 14 colunas, por que isso?","2b77689e":"Basicamente as tr\u00eas vari\u00e1veis categ\u00f3ricas com poucas op\u00e7\u00f5es que temos s\u00e3o `regi\u00e3o`, `capital` e `porte`.\n\nAl\u00e9m disso temos `estado`, mas que n\u00e3o iria ficar t\u00e3o bom para plotar gr\u00e1ficos. `participacao_transf_receita` e `taxa_empreendedorismo` tamb\u00e9m podem ser trabalhadas como vari\u00e1veis categ\u00f3ricas j\u00e1 que apesar de serem uma porcentagem, os decimals se perderam e acabamos tendo poucas op\u00e7\u00f5es de variabilidade.","3b08e8f4":"##  `Exerc\u00edcios: Explorando Vari\u00e1veis Cont\u00ednuas`\n\n1. Fazer um pairplot usando `taxa_empreendedorismo` e `nota_mat` usando `hue=porte` (apenas 1 gr\u00e1fico e n\u00e3o 4)\n2. Fazer um pairplot usando `taxa_empreendedorismo` e `nota_mat` usando `hue=porte` (4 gr\u00e1ficos)\n3. Fazer um pairplot usando `taxa_empreendedorismo`, `anos_estudo_empreendedor`, `nota_mat` e `idhm`, usando `hue=porte`","9361b890":"Podemos fazermos m\u00faltiplas regress\u00f5es lineares e histogramas ao mesmo tempo com o `sns.pairplot()`:\n    \nPara isso vamos criar um `DataFrame` tempor\u00e1rio:","15dc6a92":"## Revis\u00e3o","0957cf71":"E vamos usar o `pairplot()` com `hue=regiao` e `kind=reg`:","9533865a":"1. Selecionar as 10 primeiras linhas mostrando as colunas `municipio`, `estado` e `idhm`.\n2. Selecionar das linhas 15 a 24 os valores da coluna `municipio`","ad0aadfd":"Para substituirmos uma c\u00e9lula em espec\u00edfico \u00e9 ideal usar o comando `.at[]`","61be59b0":"Vamos avaliar as diferen\u00e7as:","4153749a":"Temos uma vari\u00e1vel chamada `igm` que est\u00e1 guardando algo, para descobrirmos basta digitar `igm` e apertar `Shift + Enter`:","48850a3c":"Vamos usar o comando `str.replace(' ','')` para remover os espa\u00e7os em branco dos mun\u00edcipios","8b7d66e4":"Vamos criar uma nova coluna com esses valores:","aaaad73e":"Vamos plotar 3 gr\u00e1ficos ao mesmo tempo:","4d150d3f":"Para plotarmos o gr\u00e1fico, podemos fazer um pairplot, com o par\u00e2metro `kind` para vermos uma regress\u00e3o linear.","a5437ca7":"Note pelo comando a seguir como o shape \u00e9 diferente entre a sele\u00e7\u00e3o com:\n1. `[]` - `Series` - 1 dimens\u00e3o\n2. `[[]]` - `DataFrame` - 2 dimens\u00f5es","2c595499":"## Encadeamento de funcionalidades","f4125c35":"## O Comando `isin()`:","fe61cb01":"As vari\u00e1veis podem conter n\u00fameros `int` e `float`, textos `str`, valores booleanos `bool`, entre outras.","91113e03":"Agora temos um `DataFrame` apenas com cidades do Nordeste.","1137c9e4":"Seguem os anos de estudo do empreendedor por regi\u00e3o:","e929b732":"## Selecionando colunas","223d2955":"A visualiza\u00e7\u00e3o do DataFrame acima \u00e9 composta pelos seguintes elementos:\n    \n    1. Index\n    2. Elemento do Index\n    3. Colunas\n    4. Nome da coluna (pode ter espa\u00e7o, acento e etc, mas nome curto, simples, e representativo facilita o c\u00f3digo)\n    5. '...'\n    6. C\u00e9lulas (Dados)\n    7. NaNs","cfce193f":"Vamos salvar o nosso `igm` de volta no disco. Mas dessa vez vamos separar os campos por `;` (ponto e v\u00edrgula) em vez da `,` (v\u00edrgula) que era utilizada no nosso arquivo original, e vamos usar a `,` (v\u00edrgula) como separador decimal em vez do `.` (ponto)","0e40d684":"Importante notar, que diferente dos gr\u00e1ficos do `pandas` e do `seaborn`, se voc\u00ea salvar esse arquivo e abrir depois, o gr\u00e1fico gerado pelo `plotly` n\u00e3o estar\u00e1 l\u00e1 para ser visualizado (nem de form n\u00e3o interativa).","5b149480":"Vamos plotar os dois gr\u00e1ficos que plotamos anteriormente, s\u00f3 que agora ao mesmo tempo, note como eles ficaram diferentes:","023a2ef9":"Podemos multiplicar, somar, dividir, subtrair entre colunas, para isso basta usar os respectivos sinais.","c75980af":"Existe uma fun\u00e7\u00e3o bastante \u00fatil no `pandas` que \u00e9 o `qcut` que nos permite criar categorias a partir de valores cont\u00ednuos (ou de muitas categorias). Basta voc\u00ea partir de um princ\u00edpio de ordenamento e selecionar a quantidade de categorias final que deseja. No nosso caso escolhemos 3.","6ac73ea8":"Uma forma interessante de facilitar a nossa visualiza\u00e7\u00e3o o DataFrame \u00e9 selecionando apenas algumas colunas que nos interessam, como no caso da densidade demogr\u00e1fica: `municipio`, `populacao`, `area`, `densidade_dem` e `densidade_2`, para isso basta colocarmos `igm[[]]` com os nomes das colunas dentro separados por v\u00edrgula (lembrando das aspas para identificar que \u00e9 um texto).","485ef86b":"Para ordernamos um dataframe por uma coluna basta usarmos o comando `.sort_values()` com o par\u00e2metro `by=nome_da_coluna`. O par\u00e2metro `ascending=False` serve para pegarmos os itens em ordem decrescente.","ef0091e9":"## Explorando Dados do Nordeste","240a0347":"Um truque para visualizar melhor os dados \u00e9 invertendo as linhas pelas colunas (matrix transposta), para isso basta colocar um `.T` depois do nosso comando que gera uma visualiza\u00e7\u00e3o de DataFrame.","ba114d8f":"## O que \u00e9 pandas?\n\nO `pandas` \u00e9 uma biblioteca muito usada para an\u00e1lise de dados em Python, que \u00e9 [uma das linguagens de programa\u00e7\u00e3o mais populares da atualidade](https:\/\/insights.stackoverflow.com\/survey\/2020#technology-programming-scripting-and-markup-languages-all-respondents). (revisado em 2020)\n\nUma das principais vantagens de usar `Python` e o `pandas` \u00e9 que voc\u00ea pode manipular uma quantidade relativamente grande de dados (*arquivos de at\u00e9 alguns GB*) com facilidade, rapidez e com infinitas possibilidades de an\u00e1lise, uma vez que voc\u00ea pode programar qualquer coisa e pegar ideias emprestadas de outras bibliotecas.\n\n## O que vamos aprender neste caderno?\n\nVamos aprender o b\u00e1sico de manipula\u00e7\u00e3o e visualiza\u00e7\u00e3o de dados para conseguirmos fazer por conta pr\u00f3prias as nossas pr\u00f3prias an\u00e1lises. A ideia \u00e9 que os comandos aqui sirvam de consulta para o futuro.\n\n## Dicas de Jupyter Notebook\n\nEste programa que estamos usando no navegado se chama Jupyter Notebook e \u00e9 um interpretador de Python interativo, podemos digitar um comando de Python e apertar _Shift + Enter_ e esse comando \u00e9 executado e seu resultado \u00e9 impresso na tela.\n\nExistem alguns atalhos bastante \u00fateis para trabalhar com Jupyter Notebook:\n    0. 'Esc' - Sa\u00ed do modo edi\u00e7\u00e3o da c\u00e9lula atual\n    1. 'Enter' - Edita a c\u00e9lula selecionada\n    2. 'Shift + Enter' - Executa a c\u00e9lula selecionada\n    3. 'A' - Adiciona uma nova c\u00e9lula acima da c\u00e9lula atual (n\u00e3o pode estar em modo de edi\u00e7\u00e3o)\n    4. 'B' - Adiciona uma nova c\u00e9lula abaixo da c\u00e9lula atual (n\u00e3o pode estar em modo de edi\u00e7\u00e3o) \n    5. 'X' - Deleta a c\u00e9lula selecionada (n\u00e3o pode estar em modo de edi\u00e7\u00e3o)\n    6. 'Z' - Desfaz a dele\u00e7\u00e3o de uma c\u00e9lula (n\u00e3o pode estar em modo de edi\u00e7\u00e3o)\n    7. 'Ctrl + Z' - Desfaz as \u00faltimas edi\u00e7\u00f5es\n    8. 'Ctrl + Shift + Z' - Refaz o \u00faltimo comando de desfazer\n    9. 'H' - Abre um arquivo de ajuda com todos os atalhos (n\u00e3o pode estar em modo de edi\u00e7\u00e3o)\n    10. 'Tab' - Faz sugest\u00f5es para completar o c\u00f3digo\n    11. '?fun\u00e7\u00e3o' - Mostra a documenta\u00e7\u00e3o de uma dada fun\u00e7\u00e3o\n    \n*(Modo de edi\u00e7\u00e3o \u00e9 quando voc\u00ea consegue editar uma c\u00e9lula, e modo de navega\u00e7\u00e3o \u00e9 quando voc\u00ea n\u00e3o consegue)*","a2dfca0d":"##  `Exerc\u00edcios: Mais Filtros e Shape`\n\n1. Crie um filtro chamado `filtro_com_idhm` que selecione as cidades que n\u00e3o tenham o `idhm` em branco.\n2. Crie um filtro chamado `filtro_trabalho` que selecione as cidades que o valor de `jornada_trabalho` seja maior do que 50 \n3. Crie um novo `DataFrame` chamado `igm_idhm_e_trabalho` que use os filtros `filtro_com_idhm` e `filtro_trabalho` com o operador `E` - `&`\n4. Crie um novo `DataFrame` chamado `igm_idhm_ou_trabalho` que use os filtros `filtro_com_idhm` e `filtro_trabalho` com o operador `OU` - `|`\n5. Pegue o `.shape` dos `DataFrames` dos itens `3` e `4`","938ff75d":"Se olharmos o `.info()`, veremos que `perc_pop_econ_ativa` ainda \u00e9 num\u00e9rico:","ce0cc369":"## Projeto:\n\nPegue algum dataset de sua escolha ou v\u00e1 em http:\/\/dados.gov.br\/ e escolha algum conjunto de dados que te interesse.\n\nDe posse desses conjunto de dados fa\u00e7a os seguintes passos:\n1. Importe o seu conjunto de dados como um `DataFrame`\n2. Fa\u00e7a a convers\u00e3o das colunas que estiverem com formato inadequado (n\u00fameros que est\u00e3o em formato de `str`)\n3. Fa\u00e7a 8 gr\u00e1ficos a partir dos seus dados\n4. Fa\u00e7a um resumo dos principais pontos encontrados nos gr\u00e1ficos avaliados","370b3418":"##  `Exerc\u00edcios: Agrega\u00e7\u00f5es N\u00famericas`","3083b3dd":"Para criarmos ela basta rodarmos m\u00e9todo `.isnull()` e assinalar os valores ao uma nova coluna `sem_igm`:","f7fa42fe":"1. Contar o n\u00famero de mun\u00edcipios por estado\n2. Plotar gr\u00e1fico de n\u00famero de mun\u00edcipios por estado","e7cfd05b":"## Conte\u00fados Adicionais","004b0dc0":"O `DataFrame` chamado `df` tem 5568 mun\u00edcipios e com 10 colunas:","e0dccb14":"## Deletando colunas","f320bfff":"Outra forma de vermos os cinco \u00faltimos comandos \u00e9:","38cea0f3":"Segue o pib_pc por regi\u00e3o. Note que n\u00e3o \u00e9 uma m\u00e9dia ponderada e sim apenas a m\u00e9dia dos mun\u00edcipios sem levar em conta a popula\u00e7\u00e3o de cada um.","8fa31b2e":"Para plotarmos o Histograma, usamos o m\u00e9todo `pyplot`:","8a2cfa0b":"Para converter para `log` podemos usar o `numpy` que \u00e9 uma biblioteca bastante importante para manipula\u00e7\u00e3o de dados, e \u00e9 a base do `pandas`.","f57044ed":"1. Criar as vari\u00e1veis `nome` e `idade` e atribuir valores a elas\n2. Juntar as vari\u00e1veis por meio do comando: `nome + ' ' + idade`","e01ba05e":"## Manipula\u00e7\u00e3o de Strings","67611409":"##  `Exerc\u00edcios: Plots usando Escala logar\u00edtimica`\n\n1. Plote um `pairplot` de `anos_estudo_empreendedor` por `pib_pc`\n2. Crie uma nova vari\u00e1vel chamada `log_pib_pc` com o log de `pib_pc`\n3. Plote um `pairplot` de `anos_estudo_empreendedor` por `log_pib_pc`","76a0a35e":"Importando os dados a partir de um arquivo '<i>.csv<\/i>' contendo dados do IGM preparado especificamente para usarmos neste treinamento.\n\nEm nosso c\u00f3digo esse arquivo ficar\u00e1 salvo com o nome de `igm`\n\nEsse arquivo foi constru\u00eddo a partir de uma s\u00e9rie de colunas que comp\u00f5e o IGM e tamb\u00e9m de notas do ENEM.","4b05edbb":"\u00c9 bastante comum na ci\u00eancia de dados se classificar v\u00e1riaveis em: \n    1. Categ\u00f3ricas - Poucas op\u00e7\u00f5es de variabilidade\n    2. Cont\u00ednuas - Muitas op\u00e7\u00f5es de variabilidade\n    \nUma forma muito boa de entender as suas vari\u00e1veis categ\u00f3ricas \u00e9 utilizando o comando `nunique()`, ele ir\u00e1 te mostrar quantos valores \u00fanicos existem para cada coluna. ","0f2cebf3":"Podemos usar tamb\u00e9m o `hue` para fazermos uma contagem levando em considera\u00e7\u00e3o outra dimens\u00e3o.","480e53ad":"Como vemos acima, n\u00e3o fica t\u00e3o bom esse gr\u00e1fico. Uma possibilidade melhor \u00e9 usarmos a biblioteca `plotly`. \n\nPara isso iremos precisar dos nomes das regi\u00f5es quando fazemos o comando `.value_counts()`:","ebb7fe73":"## Salvando um resultado em uma nova coluna","485d652c":"Vamos plotar outro gr\u00e1fico simples.","bfda6130":"Vamos primeiro dar uma olhada na coluna `populacao`","2ffe939a":"A seguir vamos selecionar os valores da coluna `mun` de `df` que n\u00e3o est\u00e3o contidos na coluna `mun` de `igf`.","865df6f2":"Para lermos o arquivo, vamos usar o `read_csv()` novamente, mas dessa vez precisamos usar o comando `sep=;`. Podemos usar o `.info()` em seguida para averiguarmos os tipos de dados:","dcdea019":"##  `Exerc\u00edcios: Sele\u00e7\u00f5es B\u00e1sicas`","97bb5c8f":"Se observamos cuidadosamente, veremos que no final do nosso arquivo temos uma s\u00e9rie de linhas que distoam dos dados coletados, para pularmos a importa\u00e7\u00e3o de algumas linhas no final do arquivo, podemos usar o par\u00e2metro `skip_footer`.","0f379ca2":"Podemos fazer o `.shape` de uma `Series`","8f6673ba":"Vamos remover a primeira linha. Usamos o m\u00e9todo `.copy()` para evitarmos avisos no futuro.","ccc07acb":"O `DataFrame` feito a partir do `filtro` \u00e9 menor como de se esperar:","3257a375":"O comando n\u00e3o funciona porque temos valores que ele n\u00e3o sabe o que fazer, em espec\u00edfico a v\u00edrgula separando os milhares. Para corrigir isso basta usar o comando `.str.replace()`","15f9ea93":"## Importandos Arquivos do Excel (Caso de uso real)","35d14755":"A seguir vamos selecionar os valores da coluna `mun` de `igf` que n\u00e3o est\u00e3o contidos na coluna `mun` de `df`.","fcd9e7b9":"Olhando a m\u00e9dia dos valores:","6bfbf2d4":"Podemos conferir que a atualiza\u00e7\u00e3o foi efetuada de forma correta:","51f2ad43":"Vamos salvar esse resultado:","b2016877":"Para facilitar nossa vida, vamos criar uma vari\u00e1vel j\u00e1 filtrada chamada `nordeste`:","1e86257e":"## Boxplot","9621369d":"## B\u00f4nus: Juntando DataFrames ","cf1e9568":"Para garantir que nossos gr\u00e1ficos v\u00e3o ser plotados em todas as vers\u00f5es do `Jupyter Notebook` precisamos rodar o comando abaixo:","3b353ec1":"Para criarmos uma nova coluna basta colocarmos `igm[]` e dentro do colchetes botar o nome da nova coluna entre aspas. Temos que cuidar cuidado pois se esse nome j\u00e1 existir, iremos sobreescrever o que est\u00e1 l\u00e1.","d4fb7a61":"Vamos avaliar as diferen\u00e7as que ainda restam:","2379063a":"## Avaliando os tipos do nosso DataFrame","7eb2be55":"## Dissecando Series (Tipo de Dados)","b6af7088":"Podemos abrir esse arquivo no notepad para ver como os dados est\u00e3o salvos.","9ad26503":"## Plotando Nosso Primeiro Gr\u00e1fico","9544d02c":"## Alterando colunas no DataFrame","f1173226":"Neste ponto as diferen\u00e7as s\u00e3o m\u00ednimas, e a quest\u00e3o \u00e9 realmente uma interven\u00e7\u00e3o humana de caso a caso para decidir qual caminho vai ser dado para a jun\u00e7\u00e3o entre tabelas.","7995d99f":"## Fazendo Filtros"}}