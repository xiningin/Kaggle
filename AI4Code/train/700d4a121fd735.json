{"cell_type":{"77792e2c":"code","cd5c5582":"code","1f17047b":"code","25ecc0a2":"code","ca4585d3":"code","aecbf383":"code","294f6a68":"code","a0c0a100":"code","e19159d8":"code","8a7c3468":"code","1e748e18":"code","773c8f65":"code","d3df9a22":"code","7e21617e":"code","777dacff":"code","5161df93":"code","2ba1f310":"code","11bdc403":"code","c3140cbb":"code","5a3591b7":"code","6513317e":"code","fd57040a":"code","26bc973a":"code","4d05fa4b":"code","3307376c":"code","bcdcb152":"code","98614bcd":"code","021b515e":"code","3decb2be":"markdown","928118b1":"markdown","fb3628ff":"markdown","cbcddc2b":"markdown","07783626":"markdown","e5104d73":"markdown","3e931473":"markdown","dee7f831":"markdown","4a46828f":"markdown","ae7d166e":"markdown","e0caddac":"markdown","7db6b692":"markdown","70f07f89":"markdown","88e83ef6":"markdown","b5b92e78":"markdown","bd3a0032":"markdown"},"source":{"77792e2c":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt","cd5c5582":"from keras.utils import to_categorical, Sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop,Adam","1f17047b":"path = '\/kaggle\/input\/cassava-leaf-disease-classification\/'\nos.listdir(path)","25ecc0a2":"train_data = pd.read_csv(path+'train.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","ca4585d3":"print('number of train data:', len(train_data))\nprint('number of train images:', len(os.listdir(path+'train_images\/')))\nprint('number of test images:', len(os.listdir(path+'test_images\/')))","aecbf383":"train_data['label'].hist(bins=4)","294f6a68":"img = cv2.imread(path+'train_images\/'+'1000015157.jpg')\nplt.imshow(img)\nplt.show()","a0c0a100":"batch_size = 64\nimg_size = 64\nimg_channel = 3","e19159d8":"y_train = to_categorical(train_data['label'])","8a7c3468":"#class_weight = dict(zip(range(0, 7), (train_data['label'].value_counts()\/len(train_data))))","1e748e18":"class DataGenerator(Sequence):\n    def __init__(self, path, list_IDs, labels, batch_size, img_size, img_channel):\n        self.path = path\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.img_size = img_size\n        self.img_channel = img_channel\n        self.indexes = np.arange(len(self.list_IDs))\n        \n    def __len__(self):\n        return int(np.floor(len(self.list_IDs)\/self.batch_size))\n    \n    \n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        X, y = self.__data_generation(list_IDs_temp)\n        return X, y\n\n    \n    def __data_generation(self, list_IDs_temp):\n        X = np.empty((self.batch_size, self.img_size, self.img_size, self.img_channel))\n        y = np.empty((self.batch_size, 5), dtype=int)\n        for i, ID in enumerate(list_IDs_temp):\n            data_file = cv2.imread(self.path+ID)\n            img = cv2.resize(data_file, (self.img_size, self.img_size))\n            X[i, ] = img\n            y[i, ] = self.labels[i]\n        X = X.astype('float32')\n        X -= X.mean()\n        X \/= X.std()\n        return X, y","773c8f65":"model = Sequential()\nmodel.add(Conv2D(128, input_shape=(img_size,img_size,img_channel), kernel_size=5, strides=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(4)))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(5, activation='softmax'))","d3df9a22":"model.compile(optimizer=Adam(lr=1e-3), loss='categorical_crossentropy', metrics=['accuracy'])","7e21617e":"model.summary()","777dacff":"from sklearn.linear_model import LogisticRegression","5161df93":"clf_log = LogisticRegression(n_jobs=-1, verbose=1)","2ba1f310":"train_generator = DataGenerator(path+'train_images\/', train_data['image_id'], y_train, batch_size, img_size, img_channel)","11bdc403":"#@title K-fold, 10 splits, Shuffle=True and random_state = 42. The distribution of Training and Val data in each fold is now:\nfrom sklearn.model_selection import StratifiedKFold\nfolds = list(StratifiedKFold(n_splits=40, shuffle=True, random_state=42).split(train_data['image_id'],train_data['label']))\nprint(\"Training split: {}\".format(len(folds[0][0])))\nprint(\"Validation split: {}\".format(len(folds[0][1])))","c3140cbb":"X = np.empty((len(y_train[folds[0][1]]), 64, 64, 3))\ny = np.empty((len(y_train[folds[0][1]]), 5), dtype=int)","5a3591b7":"img = 0\nfor i, ID in enumerate(train_data['image_id'][folds[0][1]]):\n    data_file = cv2.imread(path+\"train_images\/\"+ID)\n    img = cv2.resize(data_file, (64,64), interpolation = cv2.INTER_AREA)\n    X[i, ] = img\n    y[i, ] = y_train[folds[0][1]][i]\nX = X.astype('float32')\nX -= X.mean()\nX \/= X.std()","6513317e":"from kerastuner.applications import HyperResNet\nfrom kerastuner.tuners import Hyperband\nfrom kerastuner.tuners import BayesianOptimization\n\nhypermodel = HyperResNet(input_shape=(64, 64, 3), classes = 5)\n\ntuner = BayesianOptimization(\n    hypermodel,\n    objective='val_accuracy',\n    directory='\/kaggle\/working\/my_dir',\n    executions_per_trial=3,\n    max_trials = 50,\n    project_name='tuning')\n","fd57040a":"tuner.search(X,y,validation_split=0.2, verbose=1, epochs=10)","26bc973a":"   # Show a summary of the search\ntuner.results_summary()\n\n# Retrieve the best model.\nbest_model = tuner.get_best_models(num_models=1)[0]\n\n# Evaluate the best model.\n#results = best_model.evaluate(X_combined_test_gridsearch, y_test_gridsearch)","4d05fa4b":"history = best_model.fit_generator(generator=train_generator,\n                              #class_weight = class_weight,\n                              workers=4, verbose = 0, epochs=10\n                             )","3307376c":"test_generator = DataGenerator(path+'test_images\/', samp_subm['image_id'], samp_subm['label'], 1, img_size, img_channel)","bcdcb152":"predict = best_model.predict_generator(test_generator, verbose=1)","98614bcd":"samp_subm['label'] = predict.argmax(axis=1)","021b515e":"samp_subm.to_csv('submission.csv', index=False)","3decb2be":"# Path","928118b1":"# EDA","fb3628ff":"## Image Data Generator","cbcddc2b":"## Train Labels And Class Weights","07783626":"Distribution of the labels:","e5104d73":"# Train Model","3e931473":"# Intro\nWelcome to the Cassava Leaf Disease Classification competition.\n\nThere are 5 classifications (click for further informations):\n* 0: [Cassava Bacterial Blight (CBB)](https:\/\/en.wikipedia.org\/wiki\/Bacterial_blight_of_cassava)\n* 1: [Cassava Brown Streak Disease (CBSD)](https:\/\/en.wikipedia.org\/wiki\/Cassava_brown_streak_virus_disease)\n* 2: [Cassava Green Mottle (CGM)](https:\/\/en.wikipedia.org\/wiki\/Cassava_green_mottle_virus)\n* 3: [Cassava Mosaic Disease (CMD)](https:\/\/en.wikipedia.org\/wiki\/Cassava_mosaic_virus)\n* 4: Healthy\"\n\nWe will give a simple starter notebook based on a CNN.","dee7f831":"# Export Data","4a46828f":"# Libraries","ae7d166e":"# Logistic Regression","e0caddac":"## Hyperparameter tuning","7db6b692":"# Define Model","70f07f89":"# Load Data","88e83ef6":"# Prepare Data For Model","b5b92e78":"# Predict Test Data","bd3a0032":"Plot an image:"}}