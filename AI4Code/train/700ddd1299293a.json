{"cell_type":{"4e8e509d":"code","6811a0b7":"code","b4fc75d5":"code","a500393b":"code","8094a0db":"code","27d34b75":"code","ac95f234":"code","7aa51154":"code","6b18439e":"code","e536ac7d":"code","149ef788":"code","526d39df":"code","fb1440cb":"code","32314350":"code","08fd4679":"code","a4643ee8":"code","276c3869":"code","bb46b136":"code","97f0090d":"markdown","cf2e9097":"markdown"},"source":{"4e8e509d":"!pip install tensorflow-addons","6811a0b7":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import Callback\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom matplotlib import pyplot as plt\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.metrics import Metric\nimport tensorflow.keras.backend as K\nimport tensorflow_addons as tfa","b4fc75d5":"!pip install efficientnet\nimport efficientnet.tfkeras as efn","a500393b":"train_df = pd.read_csv('..\/input\/prostate-cancer-grade-assessment\/train.csv')\nprint(train_df.shape)\ntrain_df.head()","8094a0db":"train_images_path = '..\/input\/panda-resized-train-data-512x512\/train_images\/train_images\/'","27d34b75":"plt.imshow(plt.imread(train_images_path + train_df.loc[0]['image_id'] + '.png'))","ac95f234":"train_df[\"image_path\"] = train_df[\"image_id\"].apply(lambda x: x + '.png')","7aa51154":"xtrain, xval, ytrain, yval = train_test_split(train_df[\"image_path\"], train_df[\"isup_grade\"], test_size = 0.15, stratify = train_df[\"isup_grade\"])\n\ndf_train = pd.DataFrame({\"image_path\":xtrain, \"isup_grade\":ytrain})\ndf_val = pd.DataFrame({\"image_path\":xval, \"isup_grade\":yval})\n\ndf_train[\"isup_grade\"] = df_train[\"isup_grade\"].astype('str')\ndf_val[\"isup_grade\"] = df_val[\"isup_grade\"].astype('str')","6b18439e":"print(df_train.shape) \nprint(df_val.shape)","e536ac7d":"BATCH_SIZE = 4\nimg_size = 512\nEPOCHS = 12\nnb_classes = 6","149ef788":"LR_START = 0.00001\nLR_MAX = 0.0001 * 8\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 3\nLR_SUSTAIN_EPOCHS = 1\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    \nlr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","526d39df":"def get_model():\n    base_model =  efn.EfficientNetB7(weights='imagenet', include_top=False, pooling='avg', input_shape=(img_size, img_size, 3))\n    x = base_model.output\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.4)(x)\n    x = Dense(512, activation='relu')(x)\n    x = Dropout(0.3)(x)\n    predictions = Dense(nb_classes, activation=\"softmax\")(x)\n    return Model(inputs=base_model.input, outputs=predictions)","fb1440cb":"model = get_model()\nmodel.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy', tfa.metrics.CohenKappa(num_classes = nb_classes, weightage = 'quadratic')])","32314350":"train_datagen = ImageDataGenerator(\n        rescale = 1.\/255,          # for normalising the image\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True)  # randomly flip images\n\nvalid_datagen = ImageDataGenerator(rescale = 1.\/255 )","08fd4679":"train_generator = train_datagen.flow_from_dataframe(dataframe = df_train,\n                                               directory = train_images_path,\n                                               x_col = \"image_path\",\n                                               y_col = \"isup_grade\",\n                                               batch_size = BATCH_SIZE,\n                                               target_size =  (img_size, img_size),\n                                               class_mode = 'categorical')\n\nvalidation_generator = valid_datagen.flow_from_dataframe(dataframe = df_val,\n                                                    directory = train_images_path,\n                                                    x_col = \"image_path\",\n                                                    y_col = \"isup_grade\",\n                                                    batch_size = BATCH_SIZE, \n                                                    target_size = (img_size, img_size),\n                                                    class_mode = 'categorical')","a4643ee8":"# %%time\nhistory = model.fit_generator(\n            generator = train_generator, \n            steps_per_epoch = (df_train.shape[0] \/\/ BATCH_SIZE),\n            epochs=EPOCHS,\n            validation_data = validation_generator, \n            validation_steps = (df_val.shape[0] \/\/ BATCH_SIZE),\n            callbacks=[lr_callback]\n)","276c3869":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\ncohens_kappa = history.history['cohen_kappa']\nval_cohens_kappa = history.history['val_cohen_kappa']\n\nepochs = range(len(acc))\n \nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\n \nplt.figure()\n \nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.figure()\n \nplt.plot(epochs, cohens_kappa, 'b', label='Training Cohen-kappa')\nplt.plot(epochs, val_cohens_kappa, 'r', label='Validation Cohen-kappa')\nplt.title('Cohen Kappa - Training and validation score')\nplt.legend()\n\nplt.show()","bb46b136":"model.save('model.h5')","97f0090d":"Test File Link :- https:\/\/www.kaggle.com\/karrak3256\/panda-test-file","cf2e9097":"# Image Augmentation"}}