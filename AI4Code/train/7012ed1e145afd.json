{"cell_type":{"ea9c290c":"code","9e6e3421":"code","af307ea6":"code","1d5284d1":"code","f3fad0fe":"code","54752c84":"code","570c4b8d":"code","90cd89b1":"code","d4893599":"code","ad2c389d":"code","c46b0f9c":"code","8bdba811":"code","a3cfdfd4":"code","776a200e":"code","329b5d5c":"code","ba6ded8d":"code","b5e08977":"code","5810377e":"code","01cb52f7":"code","874a28cf":"code","48ea32dd":"code","ffad27a5":"code","ca05d5b2":"code","2661363d":"code","0d8fc72b":"code","d6cab10f":"code","0908c840":"code","d2fe3576":"code","21005345":"code","fde89f69":"code","1dfe81bb":"code","884e24c0":"code","0e6c6e98":"code","71cedad1":"code","1f704a7d":"code","e3d0fd41":"code","3f50d927":"code","8058af39":"code","379469f0":"code","6065a235":"code","e964fe82":"code","eb0556c7":"code","1de88639":"code","549afe8e":"code","5ef47bd0":"code","df1fb2b6":"code","9e36c44c":"code","b8ef02e0":"code","6d24766d":"code","85affae2":"code","a074071a":"code","a8761688":"code","ffb4111b":"markdown","a3b66acd":"markdown","9dc94505":"markdown","ad7008eb":"markdown","3e25bb97":"markdown","7b3fae05":"markdown","acd8f79e":"markdown","a3d3e902":"markdown","ce8e420b":"markdown","7d040d2c":"markdown","831f2346":"markdown","dd80958e":"markdown","f0f4b2cf":"markdown","557410c0":"markdown","d1fd76a8":"markdown","fb210b44":"markdown","1aeee86b":"markdown","95bcb6de":"markdown","94836490":"markdown","6e01de69":"markdown","c7b7ac7c":"markdown","6cdf24eb":"markdown","c851e75f":"markdown","b9c1ddd7":"markdown","0bd8452e":"markdown","6752c12e":"markdown","2ee6bb53":"markdown","04158e62":"markdown","3c71ec4e":"markdown","f7c7befe":"markdown"},"source":{"ea9c290c":"import pandas as pd","9e6e3421":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf","af307ea6":"import plotly.express as px\n\nfig = px.scatter(df, x='Fare',y = 'Age',color ='Survived' )\nfig.show()\n# px.set_xlabel('Age')","1d5284d1":"px.pie(df, 'Survived')","f3fad0fe":"df.isna().mean()","54752c84":"df.drop(['Embarked'],axis = 1,inplace = True)","570c4b8d":"df.drop(['Cabin'],axis = 1,inplace = True)","90cd89b1":"df.isna().sum()","d4893599":"age_mean = round(df['Age'].mean())\nage_mean","ad2c389d":"df['Age'].fillna(age_mean, inplace=True)","c46b0f9c":"df.isna().sum()","8bdba811":"df.drop('PassengerId', axis=1,inplace=True)","a3cfdfd4":"df.drop('Name', axis=1, inplace = True)","776a200e":"df.drop('Ticket', axis = 1, inplace=True)","329b5d5c":"df","ba6ded8d":"df.isna().mean()","b5e08977":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\n\ndf['Sex'] = lb_make.fit_transform(df['Sex'])","5810377e":"df","01cb52f7":"X = df.iloc[:,1:]\ny = df.iloc[:,0]","874a28cf":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","48ea32dd":"# data normalization with sklearn\nfrom sklearn.preprocessing import MinMaxScaler\n\n# fit scaler on training data\nnorm = MinMaxScaler().fit(X_train)\n\n# transform training data\nX_train_norm = norm.transform(X_train)\n\n# transform testing dataabs\nX_test_norm = norm.transform(X_test)","ffad27a5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score as acc\n\nlr = LogisticRegression()\n\nlr.fit(X_train_norm, y_train)\n\npredictions_lr = lr.predict(X_test_norm)\n\nprint(acc(y_test, predictions_lr))","ca05d5b2":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score as acc\n\ndrc = DecisionTreeClassifier()\n\ndrc.fit(X_train_norm, y_train)\n\npredictions_drc = drc.predict(X_test_norm)\n\nprint(acc(y_test, predictions_drc))","2661363d":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(max_depth = 6)\n\nrfc.fit(X_train_norm, y_train)\n\npredictions_rfc = rfc.predict(X_test_norm)\n\nprint(acc(y_test, predictions_rfc))","0d8fc72b":"from sklearn.svm import SVC\n\nsvc = SVC()\n\nsvc.fit(X_train_norm, y_train)\n\npredictions_svc = svc.predict(X_test_norm)\n\nprint(acc(y_test, predictions_svc))","d6cab10f":"from sklearn.neighbors import KNeighborsClassifier\n\nneigh = KNeighborsClassifier(n_neighbors=5)\n\nneigh.fit(X_train_norm, y_train)\n\npredictions_neigh = neigh.predict(X_test_norm)\n\nprint(acc(y_test,predictions_neigh))","0908c840":"# data normalization with sklearn\nfrom sklearn.preprocessing import MinMaxScaler\n\n# fit scaler on training data\nnorm_final = MinMaxScaler().fit(X)\n\n# transform training data\nX_norm_final = norm.transform(X)","d2fe3576":"rfc.fit(X_norm_final, y)","21005345":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.shape","fde89f69":"PassengerId = test['PassengerId']","1dfe81bb":"test.drop(['Cabin'],axis = 1,inplace = True)\ntest.drop('PassengerId', axis=1,inplace=True)\ntest.drop('Embarked', axis=1,inplace=True)\ntest.drop('Name', axis=1, inplace = True)\ntest.drop('Ticket', axis = 1, inplace=True)\n\ntest.shape","884e24c0":"df.shape","0e6c6e98":"test","71cedad1":"df","1f704a7d":"test.isna().mean()","e3d0fd41":"test.isna().sum()","3f50d927":"test['Age'].fillna(test['Age'].mean(), inplace=True)\ntest['Fare'].fillna(test['Fare'].mean(), inplace=True)","8058af39":"test.isna().sum()","379469f0":"test","6065a235":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\n\ntest['Sex'] = lb_make.fit_transform(test['Sex'])","e964fe82":"test","eb0556c7":"X","1de88639":"# data normalization with sklearn\nfrom sklearn.preprocessing import MinMaxScaler\n\n# fit scaler on training data\nnorm_final_test = MinMaxScaler().fit(test)\n\n# transform training data\nX_norm_final_test = norm.transform(test)","549afe8e":"predictions_final = rfc.predict(X_norm_final_test)\npredictions_final","5ef47bd0":"predictions_final = pd.DataFrame(predictions_final)\npredictions_final","df1fb2b6":"len(predictions_final)","9e36c44c":"test.shape[0]","b8ef02e0":"predictions_final['PassengerId'] = PassengerId","6d24766d":"predictions_final.rename(columns = {0:'Survived'}, inplace = True)","85affae2":"predictions_final = predictions_final[['PassengerId','Survived']]\npredictions_final","a074071a":"px.pie(predictions_final, 'Survived')","a8761688":"predictions_final.to_csv(r'gender_submission',index=False, header = True)","ffb4111b":"## Exporting the predictions","a3b66acd":"## K Nearest Neighbors","9dc94505":"## Handling unwanted and missing values","ad7008eb":"## Support Vector Machines","3e25bb97":"## Validating rows amount","7b3fae05":"## Handling categorical data","acd8f79e":"Ticket is usless","a3d3e902":"Embarked is useless","ce8e420b":"# Preprocessing","7d040d2c":"# Final training","831f2346":"## Data split","dd80958e":"# Models","f0f4b2cf":"# Preparing test set for model usage","557410c0":"## Missing and unwanted values","d1fd76a8":"# Final predictions","fb210b44":"## Random Forest","1aeee86b":"Name is useless","95bcb6de":"## Decision Tree","94836490":"Passenger ID is useless","6e01de69":"# Import the dataset","c7b7ac7c":"## Categorical values","6cdf24eb":"Cabin is useless","c851e75f":"and categorical values copied from handling categorical data","b9c1ddd7":"* every missing value in age I will replace mith an age mean value of all passengers that age data is present in the dataset\n* same with fare","0bd8452e":"Since Random Forest performed the best I will now train the model on whole training dataset with RFC just to try slightly improve the final score.","6752c12e":"## Normalization","2ee6bb53":"## Missing values","04158e62":"## Logistic Regression","3c71ec4e":"Replace Age N\/A with mean","f7c7befe":"# Data Exploratory Analysis"}}