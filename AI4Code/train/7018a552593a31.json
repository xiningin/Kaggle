{"cell_type":{"3c52ffa2":"code","a7c0ffd6":"code","979fc989":"code","9c34d84e":"code","cdcdfe12":"code","c1e58c24":"code","63e92a2d":"code","3d45fe3f":"code","0a6a72a5":"code","cb5a4d7d":"code","f596179b":"code","b65ba700":"code","d70c41e2":"code","f74a290a":"code","2c99e918":"code","ce5d303e":"code","ad59d60b":"code","291fa630":"code","2a5473f2":"code","125e3467":"code","14bb8ac9":"code","77223661":"code","75efeb68":"code","757769cf":"markdown","204f2851":"markdown","0d2a3118":"markdown","21270db8":"markdown","b96b2b36":"markdown","3d375d9d":"markdown","b8a529a4":"markdown","fb989dca":"markdown","62663c4c":"markdown","d75b8163":"markdown","f089b75f":"markdown","3ae89e15":"markdown"},"source":{"3c52ffa2":"import pandas as pd\nimport numpy as np\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier","a7c0ffd6":"train = pd.read_csv(\"..\/input\/swell-heart-rate-variability-hrv\/hrv dataset\/data\/final\/train.csv\")\ntest = pd.read_csv(\"..\/input\/swell-heart-rate-variability-hrv\/hrv dataset\/data\/final\/test.csv\")","979fc989":"train","9c34d84e":"test","cdcdfe12":"train['condition'].unique()","c1e58c24":"conditions = dict(train['condition'].value_counts())\nlabels = list(conditions.keys())\ncounts = list(conditions.values())\nplt.bar(labels,counts, color ='green',\n        width = 0.4)","63e92a2d":"le = preprocessing.LabelEncoder()\nle.fit(train['condition'])\ntrain['condition'] = le.transform(train['condition'])\ntest['condition'] = le.transform(test['condition'])","3d45fe3f":"profile = pp.ProfileReport(train)\nprofile.to_file(\"output.html\")","0a6a72a5":"plt.figure(figsize=(12,10))\ncorr = train.corr()\nsns.heatmap(corr, annot=False, cmap=plt.cm.Reds)\nplt.show()","cb5a4d7d":"def feature_selection(correlation,threshold):\n    selected_features = []\n    for i in range(corr.shape[0]):\n      if corr.iloc[i,35] > threshold:\n        selected_features.append(train.iloc[:,i])\n    return pd.DataFrame(selected_features).T","f596179b":"CORRELATION_THRESHOLD = 0.1\nreduced_train = feature_selection(corr,CORRELATION_THRESHOLD)","b65ba700":"reduced_train","d70c41e2":"fig, axarr = plt.subplots(2, 2, figsize=(15, 9))\nreduced_train['MEAN_RR'][:70].plot(ax=axarr[0][0])\nreduced_train['MEDIAN_RR'][:70].plot(ax=axarr[1][0])\nreduced_train['MEDIAN_REL_RR'][:70].plot(ax=axarr[0][1])\nreduced_train['SDRR_RMSSD_REL_RR'][:70].plot(ax=axarr[1][1])\naxarr[0][0].set_title(\"Mean_RR\")\naxarr[0][1].set_title(\"Median_RR\")\naxarr[1][0].set_title(\"Median_Rel_RR\")\naxarr[1][1].set_title(\"SDRR_RMSSD_REL_RR\")\nplt.subplots_adjust(hspace=.3)","f74a290a":"reduced_train[['MEAN_RR','MEDIAN_RR']][:70].plot()","2c99e918":"X_train = reduced_train.iloc[:,:-1]\ny_train = reduced_train.iloc[:,-1]","ce5d303e":"X_test = test[X_train.columns]\ny_test = test['condition']","ad59d60b":"X_train.head()","291fa630":"X_test.head()","2a5473f2":"model = RandomForestClassifier()\nmodel.fit(X_train,y_train)","125e3467":"y_pred = model.predict(X_test)","14bb8ac9":"y_pred[:20]","77223661":"accuracy_score(y_test,y_pred)","75efeb68":"print(classification_report(y_test,y_pred))","757769cf":"# Defining a \"Random Forest\" model and training it.","204f2851":"# Defining a feature selection function ","0d2a3118":"## Please upvote if you find it useful! ","21270db8":"# Plotting some of the extracted features","b96b2b36":"# Importing Data from Kaggle \"SWELL\" Dataset.","3d375d9d":"# Analysing Data using Pandas Profiling","b8a529a4":"This function selects features which have a positive pearson's correlation with \"condition\" column of data. A suitable threshold is set for selcting such features.","fb989dca":"# Encoding classification labels in \"Condition\" column","62663c4c":"# Splitting data into features and respective labels","d75b8163":"# Importing necessary libraries","f089b75f":"# Plotting Pearson's Correlation Matrix to check dependency of variables","3ae89e15":"# Printing the model performance and classification report.\n"}}