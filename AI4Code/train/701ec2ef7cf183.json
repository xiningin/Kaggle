{"cell_type":{"cf00ef04":"code","9d274d5e":"code","8a8dd667":"code","fa86a8ee":"code","0ed2e0fe":"code","912842bd":"code","3c9c1942":"code","6aaf6aaa":"code","1c0d6ed8":"code","50129c19":"code","4fc16b4d":"code","bed8cecf":"code","ddfc1e64":"code","ea85357c":"code","b280e7c3":"code","74760a5e":"code","8586742e":"code","61fd3b88":"code","f85ab921":"code","a8875aec":"code","e320d479":"code","5d3fce11":"code","776367ac":"code","8c4b09c1":"code","5d51bfe6":"code","5d0f29c7":"code","6749ce1d":"code","eb0fd398":"code","c3075009":"code","8b1f82e1":"code","673fcc07":"code","d5dc0682":"code","43e01c48":"code","4ea66d13":"code","e7708a92":"code","93067124":"code","29d44b1f":"code","8c3335f7":"code","ca4c46de":"code","263fbc1f":"code","de12e539":"code","f248eca1":"code","cf1d42b3":"code","ffdf4932":"code","1bcae408":"code","5a426be6":"code","d43ff0f2":"code","f1dfaead":"code","3b8f9d26":"code","6b5161cd":"code","1de6c2dd":"code","b75bfa58":"code","1ffcb22a":"code","d7bb2c1f":"code","1943ec15":"code","e1ae73fd":"code","f3633556":"code","dee70857":"code","8ca4b2e2":"code","fce6e788":"code","ffc5a0df":"code","ee20c867":"code","c5e015d1":"code","1c4fab0c":"code","4ad67db8":"code","d51a5088":"code","dd2e2ab0":"code","034c50a5":"code","97f0cca0":"code","1aac51e5":"code","5e44a5b3":"code","0e4c3549":"code","c241bbcf":"code","894f9edc":"code","677ba717":"code","761b1352":"code","eb0a6be4":"code","028b0d0d":"code","e54253a9":"code","53586a05":"code","2828ec95":"code","30a34da6":"code","e430b1e5":"code","0aa50893":"code","9206fe1f":"code","0362644a":"code","dcf69d0c":"code","8520cdee":"code","6d636399":"code","cf212498":"code","b519f739":"code","ae3bec5d":"code","10730281":"code","526087b1":"code","edde30ad":"code","cb06aefe":"code","4bbaa960":"code","1ea7525c":"code","44af692f":"code","f421c1b1":"code","6e310328":"code","a614d87a":"code","de407d80":"code","f67fecb4":"code","c23f6fe0":"code","49d0b487":"code","4d047300":"code","1c8b7958":"code","87a68715":"markdown","5963c21e":"markdown","fee4f05c":"markdown","13399cd6":"markdown","cad74789":"markdown","65ce83f9":"markdown","28f4bafe":"markdown","ddd8c64b":"markdown","a91d3e55":"markdown","fedd42e6":"markdown","b0f0106a":"markdown","4623b8ad":"markdown","e186d312":"markdown","e7d48112":"markdown","35a4013b":"markdown","276880fd":"markdown","fa1ba81a":"markdown","033a7ed4":"markdown","a8b936af":"markdown","1cb9c928":"markdown","d51ee0d8":"markdown","eab462cc":"markdown","11695d7f":"markdown","14544013":"markdown","5fbbb152":"markdown","403d5a52":"markdown","a120f919":"markdown","ea98088a":"markdown","1045caf6":"markdown","b5d308f8":"markdown","057d53fe":"markdown","cda5571d":"markdown","ff8830a8":"markdown","c0ddc10c":"markdown","38ed7b08":"markdown","0976118f":"markdown","75a70355":"markdown","d77b7850":"markdown","69713104":"markdown","81005351":"markdown","aff91db8":"markdown","2793122e":"markdown","5d78f495":"markdown","915f4e34":"markdown","656b4ed2":"markdown","3ebde706":"markdown","4b7dd6a2":"markdown","6098c251":"markdown","eca17218":"markdown","918d236e":"markdown","0b39be2f":"markdown","737fd96d":"markdown","8b4b52e0":"markdown","cdfdf5d4":"markdown","49012b1a":"markdown","584aa768":"markdown","938864c6":"markdown","60d52a87":"markdown","6f080671":"markdown","e20702fe":"markdown","12853a2f":"markdown","5099edc2":"markdown","a528b254":"markdown","d5360980":"markdown","30806d13":"markdown","896c889e":"markdown","8127e79d":"markdown","eafa9e5e":"markdown","b61c483a":"markdown","95c280fc":"markdown","becffa33":"markdown","7f01a3be":"markdown","1955c024":"markdown","da812055":"markdown","f113d754":"markdown","7b4bce9f":"markdown","2e4d3cd9":"markdown","92a5ef61":"markdown","5ad44bc0":"markdown","4153b285":"markdown","a5a54ada":"markdown","a3cd7177":"markdown","08aefde3":"markdown","e1ff3d9c":"markdown","f8f2e52b":"markdown","d8ad2169":"markdown","aac183c9":"markdown","0ccf35d3":"markdown","2ba36195":"markdown","20cd666d":"markdown","ef65bfef":"markdown","43584f61":"markdown","6a6f705e":"markdown","9210e816":"markdown","ad361781":"markdown","74ebdcf0":"markdown","fc638c36":"markdown","d2231754":"markdown","ffbe2e75":"markdown","d5c0068f":"markdown","7addc29b":"markdown","37470aed":"markdown","371442df":"markdown","21bb58e7":"markdown","17dc2480":"markdown","135e4609":"markdown","dba30e28":"markdown","cd96ca83":"markdown","ac853588":"markdown","a0923181":"markdown","59216bcd":"markdown","90def6fe":"markdown","2345a0f1":"markdown","9005d98f":"markdown","0329bc64":"markdown","3bf0c0c8":"markdown","ea55edbd":"markdown","05b3f6b0":"markdown","9840dd03":"markdown","9827b0cb":"markdown","89ca6f42":"markdown","257b4d85":"markdown","d6cd7233":"markdown","8c59acc3":"markdown","f4f47215":"markdown","6239a7ed":"markdown","f4815db3":"markdown","e8d81557":"markdown","12111f1a":"markdown","672f464f":"markdown","3011df28":"markdown","5ce518f5":"markdown","fd482ccb":"markdown","e85bfc12":"markdown","140a6687":"markdown","d4f73f68":"markdown","36e77784":"markdown","b1210308":"markdown","1f725486":"markdown","73873d1c":"markdown","b944365c":"markdown","9caaf23f":"markdown","46e81be1":"markdown","a7bc0d47":"markdown","07e4cca0":"markdown","bab3fc14":"markdown","b44ba679":"markdown","216c4eaf":"markdown","c34ac497":"markdown","aa4ba25b":"markdown"},"source":{"cf00ef04":"import pandas as pd\nimport numpy as np","9d274d5e":"drinks = pd.read_csv('http:\/\/bit.ly\/drinksbycountry')\nmovies = pd.read_csv('http:\/\/bit.ly\/imdbratings')\norders = pd.read_csv('http:\/\/bit.ly\/chiporders', sep='\\t')\norders['item_price'] = orders.item_price.str.replace('$', '').astype('float')\nstocks = pd.read_csv('http:\/\/bit.ly\/smallstocks', parse_dates=['Date'])\ntitanic = pd.read_csv('http:\/\/bit.ly\/kaggletrain')\nufo = pd.read_csv('http:\/\/bit.ly\/uforeports', parse_dates=['Time'])","8a8dd667":"pd.__version__","fa86a8ee":"pd.show_versions()","0ed2e0fe":"df = pd.DataFrame({'col one':[100, 200], 'col two':[300, 400]})\ndf","912842bd":"pd.DataFrame(np.random.rand(4, 8))","3c9c1942":"pd.DataFrame(np.random.rand(4, 8), columns=list('abcdefgh'))","6aaf6aaa":"df","1c0d6ed8":"df = df.rename({'col one':'col_one', 'col two':'col_two'}, axis='columns')","50129c19":"df.columns = ['col_one', 'col_two']","4fc16b4d":"df.columns = df.columns.str.replace(' ', '_')","bed8cecf":"df","ddfc1e64":"df.add_prefix('X_')","ea85357c":"df.add_suffix('_Y')","b280e7c3":"drinks.head()","74760a5e":"drinks.loc[::-1].head()","8586742e":"drinks.loc[::-1].reset_index(drop=True).head()","61fd3b88":"drinks.loc[:, ::-1].head()","f85ab921":"drinks.dtypes","a8875aec":"drinks.select_dtypes(include='number').head()","e320d479":"drinks.select_dtypes(include='object').head()","5d3fce11":"drinks.select_dtypes(include=['number', 'object', 'category', 'datetime']).head()","776367ac":"drinks.select_dtypes(exclude='number').head()","8c4b09c1":"df = pd.DataFrame({'col_one':['1.1', '2.2', '3.3'],\n                   'col_two':['4.4', '5.5', '6.6'],\n                   'col_three':['7.7', '8.8', '-']})\ndf","5d51bfe6":"df.dtypes","5d0f29c7":"df.astype({'col_one':'float', 'col_two':'float'}).dtypes","6749ce1d":"pd.to_numeric(df.col_three, errors='coerce')","eb0fd398":"pd.to_numeric(df.col_three, errors='coerce').fillna(0)","c3075009":"df = df.apply(pd.to_numeric, errors='coerce').fillna(0)\ndf","8b1f82e1":"df.dtypes","673fcc07":"drinks.info(memory_usage='deep')","d5dc0682":"cols = ['beer_servings', 'continent']\nsmall_drinks = pd.read_csv('http:\/\/bit.ly\/drinksbycountry', usecols=cols)\nsmall_drinks.info(memory_usage='deep')","43e01c48":"dtypes = {'continent':'category'}\nsmaller_drinks = pd.read_csv('http:\/\/bit.ly\/drinksbycountry', usecols=cols, dtype=dtypes)\nsmaller_drinks.info(memory_usage='deep')","4ea66d13":"pd.read_csv('..\/input\/dataset\/stocks1.csv')","e7708a92":"pd.read_csv('..\/input\/dataset\/stocks2.csv')","93067124":"pd.read_csv('..\/input\/dataset\/stocks3.csv')","29d44b1f":"from glob import glob","8c3335f7":"stock_files = sorted(glob('..\/input\/dataset\/stocks*.csv'))\nstock_files","ca4c46de":"pd.concat((pd.read_csv(file) for file in stock_files))","263fbc1f":"pd.concat((pd.read_csv(file) for file in stock_files), ignore_index=True)","de12e539":"pd.read_csv('..\/input\/dataset\/drinks1.csv').head()","f248eca1":"pd.read_csv('..\/input\/dataset\/drinks2.csv').head()","cf1d42b3":"drink_files = sorted(glob('..\/input\/dataset\/drinks*.csv'))","ffdf4932":"pd.concat((pd.read_csv(file) for file in drink_files), axis='columns').head()","1bcae408":"len(movies)","5a426be6":"movies_1 = movies.sample(frac=0.75, random_state=1234)","d43ff0f2":"movies_2 = movies.drop(movies_1.index)","f1dfaead":"len(movies_1) + len(movies_2)","3b8f9d26":"movies_1.index.sort_values()","6b5161cd":"movies_2.index.sort_values()","1de6c2dd":"movies.head()","b75bfa58":"movies.genre.unique()","1ffcb22a":"movies[(movies.genre == 'Action') |\n       (movies.genre == 'Drama') |\n       (movies.genre == 'Western')].head()","d7bb2c1f":"movies[movies.genre.isin(['Action', 'Drama', 'Western'])].head()","1943ec15":"movies[~movies.genre.isin(['Action', 'Drama', 'Western'])].head()","e1ae73fd":"counts = movies.genre.value_counts()\ncounts","f3633556":"counts.nlargest(3)","dee70857":"counts.nlargest(3).index","8ca4b2e2":"movies[movies.genre.isin(counts.nlargest(3).index)].head()","fce6e788":"ufo.head()","ffc5a0df":"ufo.isna().sum()","ee20c867":"ufo.isna().mean()","c5e015d1":"ufo.dropna(axis='columns').head()","1c4fab0c":"ufo.dropna(thresh=len(ufo)*0.9, axis='columns').head()","4ad67db8":"df = pd.DataFrame({'name':['John Arthur Doe', 'Jane Ann Smith'],\n                   'location':['Los Angeles, CA', 'Washington, DC']})\ndf","d51a5088":"df.name.str.split(' ', expand=True)","dd2e2ab0":"df[['first', 'middle', 'last']] = df.name.str.split(' ', expand=True)\ndf","034c50a5":"df.location.str.split(', ', expand=True)","97f0cca0":"df['city'] = df.location.str.split(', ', expand=True)[0]\ndf","1aac51e5":"df = pd.DataFrame({'col_one':['a', 'b', 'c'], 'col_two':[[10, 40], [20, 50], [30, 60]]})\ndf","5e44a5b3":"df_new = df.col_two.apply(pd.Series)\ndf_new","0e4c3549":"pd.concat([df, df_new], axis='columns')","c241bbcf":"orders.head(10)","894f9edc":"orders[orders.order_id == 1].item_price.sum()","677ba717":"orders.groupby('order_id').item_price.sum().head()","761b1352":"orders.groupby('order_id').item_price.agg(['sum', 'count']).head()","eb0a6be4":"orders.head(10)","028b0d0d":"orders.groupby('order_id').item_price.sum().head()","e54253a9":"len(orders.groupby('order_id').item_price.sum())","53586a05":"len(orders.item_price)","2828ec95":"total_price = orders.groupby('order_id').item_price.transform('sum')\nlen(total_price)","30a34da6":"orders['total_price'] = total_price\norders.head(10)","e430b1e5":"orders['percent_of_total'] = orders.item_price \/ orders.total_price\norders.head(10)","0aa50893":"titanic.head()","9206fe1f":"titanic.describe()","0362644a":"titanic.describe().loc['min':'max']","dcf69d0c":"titanic.describe().loc['min':'max', 'Pclass':'Parch']","8520cdee":"titanic.Survived.mean()","6d636399":"titanic.groupby('Sex').Survived.mean()","cf212498":"titanic.groupby(['Sex', 'Pclass']).Survived.mean()","b519f739":"titanic.groupby(['Sex', 'Pclass']).Survived.mean().unstack()","ae3bec5d":"titanic.pivot_table(index='Sex', columns='Pclass', values='Survived', aggfunc='mean')","10730281":"titanic.pivot_table(index='Sex', columns='Pclass', values='Survived', aggfunc='mean',\n                    margins=True)","526087b1":"titanic.pivot_table(index='Sex', columns='Pclass', values='Survived', aggfunc='count',\n                    margins=True)","edde30ad":"titanic.Age.head(10)","cb06aefe":"pd.cut(titanic.Age, bins=[0, 18, 25, 99], labels=['child', 'young adult', 'adult']).head(10)","4bbaa960":"titanic.head()","1ea7525c":"pd.set_option('display.float_format', '{:.2f}'.format)","44af692f":"titanic.head()","f421c1b1":"pd.reset_option('display.float_format')","6e310328":"stocks","a614d87a":"format_dict = {'Date':'{:%m\/%d\/%y}', 'Close':'${:.2f}', 'Volume':'{:,}'}","de407d80":"stocks.style.format(format_dict)","f67fecb4":"(stocks.style.format(format_dict)\n .hide_index()\n .highlight_min('Close', color='red')\n .highlight_max('Close', color='lightgreen')\n)","c23f6fe0":"(stocks.style.format(format_dict)\n .hide_index()\n .background_gradient(subset='Volume', cmap='Blues')\n)","49d0b487":"(stocks.style.format(format_dict)\n .hide_index()\n .bar('Volume', color='lightblue', align='zero')\n .set_caption('Stock Prices from October 2016')\n)","4d047300":"import pandas_profiling","1c8b7958":"pandas_profiling.ProfileReport(titanic)","87a68715":"## 8. Reduce DataFrame size","5963c21e":"You can see that the total number of rows is correct:","fee4f05c":"Let's create another example DataFrame:","13399cd6":"And if you're not interested in all of the columns, you can also pass it a slice of column labels:","cad74789":"However, the resulting DataFrame might be displaying more information than you need.\n\nIf you wanted to filter it to only show the \"five-number summary\", you can use the `loc` accessor and pass it a slice of the \"min\" through the \"max\" row labels:","65ce83f9":"If we only cared about saving the city name in column 0, we can just select that column and save it to the DataFrame:","28f4bafe":"Let's look at a DataFrame of orders from the Chipotle restaurant chain:","ddd8c64b":"Let's say that you needed to filter the movies DataFrame by genre, but only include the 3 largest genres.\n\nWe'll start by taking the `value_counts()` of genre and saving it as a Series called counts:","a91d3e55":"Finally, if you just need to add a prefix or suffix to all of your column names, you can use the `add_prefix()` method...","fedd42e6":"...is smaller than the input to the function:","b0f0106a":"## 22. Convert continuous data into categorical data","4623b8ad":"Or if you want to drop columns in which more than 10% of the values are missing, you can set a threshold for `dropna()`:","e186d312":"This includes both int and float columns.\n\nYou could also use this method to select just the object columns:","e7d48112":"One of the columns is genre:","35a4013b":"## Table of contents\n\n1. <a href=\"#1.-Show-installed-versions\">Show installed versions<\/a>\n2. <a href=\"#2.-Create-an-example-DataFrame\">Create an example DataFrame<\/a>\n3. <a href=\"#3.-Rename-columns\">Rename columns<\/a>\n4. <a href=\"#4.-Reverse-row-order\">Reverse row order<\/a>\n5. <a href=\"#5.-Reverse-column-order\">Reverse column order<\/a>\n6. <a href=\"#6.-Select-columns-by-data-type\">Select columns by data type<\/a>\n7. <a href=\"#7.-Convert-strings-to-numbers\">Convert strings to numbers<\/a>\n8. <a href=\"#8.-Reduce-DataFrame-size\">Reduce DataFrame size<\/a>\n9. <a href=\"#9.-Build-a-DataFrame-from-multiple-files-(row-wise)\">Build a DataFrame from multiple files (row-wise)<\/a>\n10. <a href=\"#10.-Build-a-DataFrame-from-multiple-files-(column-wise)\">Build a DataFrame from multiple files (column-wise)<\/a>\n11. <a href=\"#11.-Split-a-DataFrame-into-two-random-subsets\">Split a DataFrame into two random subsets<\/a>\n12. <a href=\"#12.-Filter-a-DataFrame-by-multiple-categories\">Filter a DataFrame by multiple categories<\/a>\n13. <a href=\"#13.-Filter-a-DataFrame-by-largest-categories\">Filter a DataFrame by largest categories<\/a>\n14. <a href=\"#14.-Handle-missing-values\">Handle missing values<\/a>\n15. <a href=\"#15.-Split-a-string-into-multiple-columns\">Split a string into multiple columns<\/a>\n16. <a href=\"#16.-Expand-a-Series-of-lists-into-a-DataFrame\">Expand a Series of lists into a DataFrame<\/a>\n17. <a href=\"#17.-Aggregate-by-multiple-functions\">Aggregate by multiple functions<\/a>\n18. <a href=\"#18.-Combine-the-output-of-an-aggregation-with-a-DataFrame\">Combine the output of an aggregation with a DataFrame<\/a>\n19. <a href=\"#19.-Select-a-slice-of-rows-and-columns\">Select a slice of rows and columns<\/a>\n20. <a href=\"#20.-Reshape-a-MultiIndexed-Series\">Reshape a MultiIndexed Series<\/a>\n21. <a href=\"#21.-Create-a-pivot-table\">Create a pivot table<\/a>\n22. <a href=\"#22.-Convert-continuous-data-into-categorical-data\">Convert continuous data into categorical data<\/a>\n23. <a href=\"#23.-Change-display-options\">Change display options<\/a>\n24. <a href=\"#24.-Style-a-DataFrame\">Style a DataFrame<\/a>\n25. <a href=\"#Bonus:-Profile-a-DataFrame\">Bonus trick: Profile a DataFrame<\/a>","276880fd":"This is a dataset of average alcohol consumption by country. What if you wanted to reverse the order of the rows?\n\nThe most straightforward method is to use the `loc` accessor and pass it `::-1`, which is the same slicing notation used to reverse a Python list:","fa1ba81a":"This shows the number of records that appear in each combination of categories.","033a7ed4":"Let's say you need to select only the numeric columns. You can use the `select_dtypes()` method:","a8b936af":"The Titanic dataset has a \"Survived\" column made up of ones and zeros, so you can calculate the overall survival rate by taking a mean of that column:","1cb9c928":"You can see that it currently uses 30.4 KB.\n\nIf you're having performance problems with your DataFrame, or you can't even read it into memory, there are two easy steps you can take during the file reading process to reduce the DataFrame size.\n\nThe first step is to only read in the columns that you actually need, which we specify with the \"usecols\" parameter:","d51ee0d8":"## 12. Filter a DataFrame by multiple categories","eab462cc":"There's now a bar chart within the Volume column and a caption above the DataFrame.\n\nNote that there are many more options for how you can style your DataFrame.","11695d7f":"...or the `add_suffix()` method:","14544013":"# Top 24 Pandas tricks\n","5fbbb152":"In order to do mathematical operations on these columns, we need to convert the data types to numeric. You can use the `astype()` method on the first two columns:","403d5a52":"Let's take a look at the Age column from the Titanic dataset:","a120f919":"## 14. Handle missing values","ea98088a":"## 18. Combine the output of an aggregation with a DataFrame","1045caf6":"You can pass a pattern to `glob()`, including wildcard characters, and it will return a list of all files that match that pattern.\n\nIn this case, glob is looking in the \"data\" subdirectory for all CSV files that start with the word \"stocks\":","b5d308f8":"I prefer to use dot notation to select pandas columns, but that won't work since the column names have spaces. Let's fix this.\n\nThe most flexible method for renaming columns is the `rename()` method. You pass it a dictionary in which the keys are the old names and the values are the new names, and you also specify the axis:","057d53fe":"And here's the third day:","cda5571d":"Notice that the Date is now in month-day-year format, the closing price has a dollar sign, and the Volume has commas.\n\nWe can apply more styling by chaining additional methods:","ff8830a8":"These three columns can actually be saved to the original DataFrame in a single assignment statement:","c0ddc10c":"`sum()` is an aggregation function, which means that it returns a reduced version of the input data.\n\nIn other words, the output of the `sum()` function:","38ed7b08":"If you wanted to calculate the total price of every order, you would `groupby()` order_id and then take the sum of item_price for each group:","0976118f":"You can also tell it to exclude certain data types:","75a70355":"`len(ufo)` returns the total number of rows, and then we multiply that by 0.9 to tell pandas to only keep columns in which at least 90% of the values are not missing.","d77b7850":"glob returns filenames in an arbitrary order, which is why we sorted the list using Python's built-in `sorted()` function.\n\nWe can then use a generator expression to read each of the files using `read_csv()` and pass the results to the `concat()` function, which will concatenate the rows into a single DataFrame:","69713104":"## 20. Reshape a MultiIndexed Series","81005351":"## 6. Select columns by data type","aff91db8":"## 5. Reverse column order","2793122e":"## 16. Expand a Series of lists into a DataFrame","5d78f495":"Similar to the previous trick, you can also use `loc` to reverse the left-to-right order of your columns:","915f4e34":"As you might guess, your string will need to have the same number of characters as there are columns.","656b4ed2":"pandas DataFrames are designed to fit into memory, and so sometimes you need to reduce the DataFrame size in order to work with it on your system.\n\nHere's the size of the drinks DataFrame:","3ebde706":"Let's take a look at the drinks DataFrame:","4b7dd6a2":"Unfortunately, there are now duplicate values in the index. To avoid that, we can tell the `concat()` function to ignore the index and instead use the default integer index:","6098c251":"We can use the `sample()` method to randomly select 75% of the rows and assign them to the \"movies_1\" DataFrame:","eca17218":"And then we can pass it to the DataFrame's `style.format()` method:","918d236e":"What if we wanted to create a new column listing the total price of each order? Recall that we calculated the total price using the `sum()` method:","0b39be2f":"Let's say that you've got a new dataset, and you want to quickly explore it without too much work. There's a separate package called [pandas-profiling](https:\/\/github.com\/pandas-profiling\/pandas-profiling) that is designed for this purpose.\n\nFirst you have to install it using conda or pip. Once that's done, you import `pandas_profiling`:","737fd96d":"We can create a dictionary of format strings that specifies how each column should be formatted:","8b4b52e0":"The previous trick is useful if you want to change the display of your entire notebook. However, a more flexible and powerful approach is to define the style of a particular DataFrame.\n\nLet's return to the stocks DataFrame:","cdfdf5d4":"With a pivot table, you directly specify the index, the columns, the values, and the aggregation function.\n\nAn added benefit of a pivot table is that you can easily add row and column totals by setting `margins=True`:","49012b1a":"You can see the versions of Python, pandas, NumPy, matplotlib, and more.","584aa768":"It's currently continuous data, but what if you wanted to convert it into categorical data?\n\nOne solution would be to label the age ranges, such as \"child\", \"young adult\", and \"adult\". The best way to do this is by using the `cut()` function:","938864c6":"Thus, only Drama and Comedy and Action movies remain in the DataFrame.","60d52a87":"Let's take another look at the Titanic dataset:","6f080671":"## 2. Create an example DataFrame","e20702fe":"That's pretty good, but if you also want non-numeric column names, you can coerce a string of letters to a list and then pass that list to the columns parameter:","12853a2f":"## 13. Filter a DataFrame by largest categories","5099edc2":"Let's take a look at the movies DataFrame:","a528b254":"However, you're not actually limited to aggregating by a single function such as `sum()`. To aggregate by multiple functions, you use the `agg()` method and pass it a list of functions such as `sum()` and `count()`:","d5360980":"The solution is to use the `transform()` method, which performs the same calculation but returns output data that is the same shape as the input data:","30806d13":"However, you can actually rewrite this code more clearly by using the `isin()` method and passing it a list of genres:","896c889e":"And this time, we'll tell the `concat()` function to concatenate along the columns axis:","8127e79d":"As you can see, the rows are in reverse order but the index has been reset to the default integer index.","eafa9e5e":"However, this would have resulted in an error if you tried to use it on the third column, because that column contains a dash to represent zero and pandas doesn't understand how to handle it.\n\nInstead, you can use the `to_numeric()` function on the third column and tell it to convert any invalid input into `NaN` values:","b61c483a":"The colon before the comma means \"select all rows\", and the `::-1` after the comma means \"reverse the columns\", which is why \"country\" is now on the right side.","95c280fc":"This shows the overall survival rate as well as the survival rate by Sex and Passenger Class.\n\nFinally, you can create a cross-tabulation just by changing the aggregation function from \"mean\" to \"count\":","becffa33":"## 1. Show installed versions","7f01a3be":"Notice that the Age column has 1 decimal place and the Fare column has 4 decimal places. What if you wanted to standardize the display to use 2 decimal places?\n\nYou can use the `set_option()` function:","1955c024":"Then we can use the `drop()` method to drop all rows that are in \"movies_1\" and assign the remaining rows to \"movies_2\":","da812055":"## 7. Convert strings to numbers","f113d754":"## 21. Create a pivot table","7b4bce9f":"You'll notice that some of the values are missing.\n\nTo find out how many values are missing in each column, you can use the `isna()` method and then take the `sum()`:","2e4d3cd9":"And by using the `concat()` function, you can combine the original DataFrame with the new DataFrame:","92a5ef61":"Let's look at a dataset of UFO sightings:","5ad44bc0":"Let's create another example DataFrame:","4153b285":"## Load example datasets","a5a54ada":"If you wanted to calculate the survival rate by a single category such as \"Sex\", you would use a `groupby()`:","a3cd7177":"The Series method `nlargest()` makes it easy to select the 3 largest values in this Series:","08aefde3":"These numbers are actually stored as strings, which results in object columns:","e1ff3d9c":"### Reference: \nvideo link-\nhttps:\/\/www.youtube.com\/watch?v=RlIiVeig3hc&list=PL5-da3qGB5ICCsgW1MxlZ0Hq8LL5U3u9y&index=34","f8f2e52b":"All three of these methods have the same result, which is to rename the columns so that they don't have any spaces:","d8ad2169":"If you want to drop the columns that have any missing values, you can use the `dropna()` method:","aac183c9":"## 23. Change display options","0ccf35d3":"And you can see from the index that every movie is in either \"movies_1\":","2ba36195":"This shows the survival rate for every combination of Sex and Passenger Class. It's stored as a MultiIndexed Series, meaning that it has multiple index levels to the left of the actual data.\n\nIt can be hard to read and interact with data in this format, so it's often more convenient to reshape a MultiIndexed Series into a DataFrame by using the `unstack()` method:","20cd666d":"Let's say that your dataset is spread across multiple files, but you want to read the dataset into a single DataFrame.\n\nFor example, I have a small dataset of stock data in which each CSV file only includes a single day. Here's the first day:","ef65bfef":"By only reading in these two columns, we've reduced the DataFrame size to 13.6 KB.\n\nThe second step is to convert any object columns containing categorical data to the category data type, which we specify with the \"dtype\" parameter:","43584f61":"You can see that Age and Fare are now using 2 decimal places. Note that this did not change the underlying data, only the display of the data.\n\nYou can also reset any option back to its default:","6a6f705e":"Let's create another example DataFrame:","9210e816":"## 24. Style a DataFrame","ad361781":"Finally, we can pass the index object to `isin()`, and it will be treated like a list of genres:","74ebdcf0":"The previous trick is useful when each file contains rows from your dataset. But what if each file instead contains columns from your dataset?\n\nHere's an example in which the drinks dataset has been split into two CSV files, and each file contains three columns:","fc638c36":"We've now hidden the index, highlighted the minimum Close value in red, and highlighted the maximum Close value in green.\n\nHere's another example of DataFrame styling:","d2231754":"This assigned each value to a bin with a label. Ages 0 to 18 were assigned the label \"child\", ages 18 to 25 were assigned the label \"young adult\", and ages 25 to 99 were assigned the label \"adult\".\n\nNotice that the data type is now \"category\", and the categories are automatically ordered.","ffbe2e75":"Similar to the previous trick, we'll start by using `glob()`:","d5c0068f":"Let's take another look at the orders DataFrame:","7addc29b":"This one line of code accomplishes our goal, because all of the data types have now been converted to float:","37470aed":"Let's say that you want to split a DataFrame into two parts, randomly assigning 75% of the rows to one DataFrame and the other 25% to a second DataFrame.\n\nFor example, we have a DataFrame of movie ratings with 979 rows:","371442df":"## 10. Build a DataFrame from multiple files (column-wise)","21bb58e7":"By reading in the continent column as the category data type, we've further reduced the DataFrame size to 2.3 KB.\n\nKeep in mind that the category data type will only reduce memory usage if you have a small number of categories relative to the number of rows.","17dc2480":"But if you also need to know the versions of pandas' dependencies, you can use the `show_versions()` function:","135e4609":"Now if the only thing you're doing is replacing spaces with underscores, an even better method is to use the `str.replace()` method, since you don't have to type out all of the column names:","dba30e28":"That gives us the total price of each order as well as the number of items in each order.","cd96ca83":"What if you also wanted to reset the index so that it starts at zero?\n\nYou would use the `reset_index()` method and tell it to drop the old index entirely:","ac853588":"Here's the second day:","a0923181":"## 19. Select a slice of rows and columns","59216bcd":"We'll store the results in a new DataFrame column called total_price:","90def6fe":"Now if you need a much larger DataFrame, the above method will require way too much typing. In that case, you can use NumPy's `random.rand()` function, tell it the number of rows and columns, and pass that to the DataFrame constructor:","2345a0f1":"You could read each CSV file into its own DataFrame, combine them together, and then delete the original DataFrames, but that would be memory inefficient and require a lot of code.\n\nA better solution is to use the built-in glob module:","9005d98f":"## 9. Build a DataFrame from multiple files (row-wise)","0329bc64":"## 3. Rename columns","3bf0c0c8":"The Volume column now has a background gradient to help you easily identify high and low values.\n\nAnd here's one final example:","ea55edbd":"This works because tilde is the \"not\" operator in Python.","05b3f6b0":"And if you want to reverse this filter, so that you are excluding (rather than including) those three genres, you can put a tilde in front of the condition:","9840dd03":"Then, simply run the `ProfileReport()` function and pass it any DataFrame. It returns an interactive HTML report:\n\n- The first section is an overview of the dataset and a list of possible issues with the data.\n- The next section gives a summary of each column. You can click \"toggle details\" for even more information.\n- The third section shows a heatmap of the correlation between columns.\n- And the fourth section shows the head of the dataset.","9827b0cb":"As you can see, the total price of each order is now listed on every single line.\n\nThat makes it easy to calculate the percentage of the total order price that each line represents:","89ca6f42":"What if we wanted to split a string, but only keep one of the resulting columns? For example, let's split the location column on \"comma space\":","257b4d85":"There are two columns, and the second column contains regular Python lists of integers.\n\nIf we wanted to expand the second column into its own DataFrame, we can use the `apply()` method on that column and pass it the Series constructor:","d6cd7233":"And if you wanted to calculate the survival rate across two different categories at once, you would `groupby()` both of those categories:","8c59acc3":"## Bonus: Profile a DataFrame","f4f47215":"Let's take a look at the example DataFrame we created in the last trick:","6239a7ed":"Sometimes you need to know the pandas version you're using, especially when reading the pandas documentation. You can show the pandas version by typing:","f4815db3":"...or \"movies_2\":","e8d81557":"This DataFrame contains the same exact data as the MultiIndexed Series, except that now you can interact with it using familiar DataFrame methods.","12111f1a":"The best thing about this method is that you can use it to rename any number of columns, whether it be just one column or all columns.\n\nNow if you're going to rename all of the columns at once, a simpler method is just to overwrite the columns attribute of the DataFrame:","672f464f":"If we wanted to filter the DataFrame to only show movies with the genre Action or Drama or Western, we could use multiple conditions separated by the \"or\" operator:","3011df28":"And all we actually need from this Series is the index:","5ce518f5":"## 17. Aggregate by multiple functions","fd482ccb":"The first argument is the name of the option, and the second argument is a Python format string.","e85bfc12":"Here are the data types of the drinks DataFrame:","140a6687":"Let's take a look at another dataset:","d4f73f68":"Each order has an order_id and consists of one or more rows. To figure out the total price of an order, you sum the item_price for that order_id. For example, here's the total price of order number 1:","36e77784":"If you often create DataFrames like the one above, you might find it more convenient to use the `pivot_table()` method instead:","b1210308":"`isna()` generated a DataFrame of True and False values, and `sum()` converted all of the True values to 1 and added them up.\n\nSimilarly, you can find out the percentage of values that are missing by taking the `mean()` of `isna()`:","1f725486":"## 15. Split a string into multiple columns","73873d1c":"Finally, you can apply this function to the entire DataFrame all at once by using the `apply()` method:","b944365c":"Let's say that you want to demonstrate some pandas code. You need an example DataFrame to work with.\n\nThere are many ways to do this, but my favorite way is to pass a dictionary to the DataFrame constructor, in which the dictionary keys are the column names and the dictionary values are lists of column values:","9caaf23f":"You can tell it to include multiple data types by passing a list:","46e81be1":"## 11. Split a DataFrame into two random subsets","a7bc0d47":"## 4. Reverse row order","07e4cca0":"Now our DataFrame has all six columns.","bab3fc14":"If you know that the `NaN` values actually represent zeros, you can fill them with zeros using the `fillna()` method:","b44ba679":"This is the famous Titanic dataset, which shows information about passengers on the Titanic and whether or not they survived.\n\nIf you wanted a numerical summary of the dataset, you would use the `describe()` method:","216c4eaf":"There are many more options you can specify is a similar way.","c34ac497":"What if we wanted to split the \"name\" column into three separate columns, for first, middle, and last name? We would use the `str.split()` method and tell it to split on a space character and expand the results into a DataFrame:","aa4ba25b":"Keep in mind that this approach will not work if your index values are not unique."}}