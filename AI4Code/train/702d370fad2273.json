{"cell_type":{"79c07b2a":"code","72bea9f6":"code","60cf5743":"code","ca0a9df4":"code","a8e15664":"code","e204cd9e":"code","7833e861":"code","6349e6b8":"code","dd374ad8":"code","01be08af":"code","f56f98be":"code","e94148bd":"code","eb4c6ee6":"code","02a71567":"code","f5a75506":"code","65e89c32":"code","9a45b162":"code","4246c3e5":"code","c28c9157":"code","3cddfa5d":"code","f0bd1564":"code","1219713a":"code","430c621c":"code","2a29921f":"code","6f14776d":"code","9b7ee244":"code","eb2c6f6e":"code","30cf3337":"code","7db431a0":"code","d1d3b926":"code","6062b581":"code","d1af1816":"code","9b6e5d30":"code","ab1b4c86":"code","2bc244d0":"code","1bdeb45d":"code","350a1200":"code","03b6ebb5":"code","22ff0744":"code","a8e5c481":"code","74d6a52a":"code","fcceffbf":"code","586b0778":"code","a3ee2441":"code","828ab84e":"code","7750baec":"code","1be5320b":"code","10ea5098":"code","f967ac74":"code","9e383470":"code","382331eb":"code","209c9572":"code","36c369c0":"code","2281d9f9":"code","c0657fc4":"code","5f5d7540":"code","a460749b":"code","743b439d":"code","69900e17":"code","b43b1bd4":"code","d15a4d0b":"code","0724ea80":"code","a0e0fcf5":"code","e7442c91":"code","3810b795":"markdown","381356c3":"markdown","0c118d82":"markdown","22f4d571":"markdown","352b2b8f":"markdown","d2de6c33":"markdown","bb36f6cd":"markdown","84d2fd8b":"markdown","ea7b9660":"markdown","d712c98c":"markdown","dc399ebf":"markdown","0b52cb7f":"markdown","e14573f0":"markdown","4e96d5ea":"markdown","cbaad561":"markdown","d26b3355":"markdown","68881659":"markdown","07a861eb":"markdown","4576488a":"markdown","f0f1b875":"markdown","1af63860":"markdown"},"source":{"79c07b2a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","72bea9f6":"df_customer_train = pd.read_csv(\"\/kaggle\/input\/customer_train.csv\")\ndf_customer_test = pd.read_csv(\"\/kaggle\/input\/customer_test.csv\")\n\ndf_stories_reaction_train = pd.read_csv(\"\/kaggle\/input\/stories_reaction_train.csv\")\ndf_stories_reaction_test = pd.read_csv(\"\/kaggle\/input\/stories_reaction_test.csv\")\n\ndf_stories_description = pd.read_csv(\"\/kaggle\/input\/stories_description.csv\")","60cf5743":"df_customer_train.head()","ca0a9df4":"df_customer_test.head()","a8e15664":"df_stories_reaction_train.head()","e204cd9e":"df_stories_reaction_test.head()","7833e861":"df_stories_description.head()","6349e6b8":"for index, row in df_stories_description.iterrows():\n    i = row['story_json'].find(\"name\")\n    j = row['story_json'][i+7:].find('\"')\n    df_stories_description.at[index,'story_json'] = row['story_json'][i+7:][:j]","dd374ad8":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ncategorical = list(df_stories_description.select_dtypes(include=['object']).columns.values)\nfor cat in categorical:\n    df_stories_description[cat]=df_stories_description[cat].astype('str')\n    df_stories_description[cat] = le.fit_transform(df_stories_description[cat])\n    \nfor colName in df_stories_description.columns:\n    if(colName != \"story_id\"):\n        df_stories_description[colName] = pd.qcut(df_stories_description[colName].rank(method=\"first\"), 10, labels=False)\n","01be08af":"df_first_merged = pd.merge(df_customer_train, df_stories_reaction_train, on='customer_id')\ndf_final = pd.merge(df_first_merged, df_stories_description, on='story_id')\ndf_final = df_final.drop(['first_session_dttm', 'event_dttm', 'story_id', 'customer_id'], axis=1)\n\nfor index, row in df_final.iterrows():\n    if(row['event'] == 'dislike'):\n        df_final.at[index,'event'] = -1\n    if(row['event'] == 'skip'):\n        df_final.at[index,'event'] = -0.1\n    if(row['event'] == 'view'):\n        df_final.at[index,'event'] = 0.1\n    if(row['event'] == 'like'):\n        df_final.at[index,'event'] = 1","f56f98be":"df_first_merged_test = pd.merge(df_customer_test, df_stories_reaction_test, on='customer_id')\ndf_final_test = pd.merge(df_first_merged_test, df_stories_description, on='story_id')\ndf_final_test = df_final_test.drop(['first_session_dttm', 'event_dttm', 'story_id', 'customer_id'], axis=1)","e94148bd":"df_final.head()","eb4c6ee6":"df_final.describe()","02a71567":"df_final.info()","f5a75506":" df_final.select_dtypes(exclude=['object']).dtypes","65e89c32":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfor i, column in enumerate(df_final.select_dtypes(exclude=['object']).dropna().columns):\n    g = sns.barplot(x=df_final.select_dtypes(exclude=['object']).dropna()[column],y=df_final['event'], ax=axes[i\/\/2,i%2])\n    g.set_xticklabels(g.get_xticklabels(), rotation=70)\nplt.tight_layout()","9a45b162":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfor i, column in enumerate(df_final.select_dtypes(exclude=['object']).dropna().columns):\n    g = sns.countplot(df_final.select_dtypes(exclude=['object']).dropna()[column],ax=axes[i\/\/2,i%2])\n    g.set_xticklabels(g.get_xticklabels(), rotation=70)\nplt.tight_layout()","4246c3e5":" df_final.select_dtypes(include=['object']).dtypes","c28c9157":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_0', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_0', data=df_final, ax=axs[1])\nplt.tight_layout()","3cddfa5d":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_1', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_1', data=df_final, ax=axs[1])\nplt.tight_layout()","f0bd1564":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_2', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_2', data=df_final, ax=axs[1])\nplt.tight_layout()","1219713a":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_3', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_3', data=df_final, ax=axs[1])\nplt.tight_layout()","430c621c":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_4', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_4', data=df_final, ax=axs[1])\nplt.tight_layout()","2a29921f":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_5', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_5', data=df_final, ax=axs[1])\nplt.tight_layout()","6f14776d":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='product_6', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='product_6', data=df_final, ax=axs[1])\nplt.tight_layout()","9b7ee244":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='marital_status_cd', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='marital_status_cd', data=df_final, ax=axs[1])\nplt.tight_layout()","eb2c6f6e":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nencoded_clmn = le.fit_transform(df_final['job_title'].fillna('missing'))\n\nd = {'job_title': encoded_clmn, 'event': df_final['event']}\ndf_for_lineplot = pd.DataFrame(data=d)","30cf3337":"fig, axs = plt.subplots(ncols=2)\nsns.lineplot(x='event', y='job_title', data=df_for_lineplot, ax=axs[0])\nsns.distplot(encoded_clmn, ax=axs[1])\nplt.tight_layout()","7db431a0":"fig, axs = plt.subplots(ncols=2)\nsns.barplot(x='gender_cd', y='event', data=df_final, ax=axs[0])\nsns.countplot(x='gender_cd', data=df_final, ax=axs[1])\nplt.tight_layout()","d1d3b926":"df_age = df_final_test['age'] + df_final['age']\ndf_age.fillna(df_age.mean(), inplace=True)\n\ndf_final['age'].fillna(df_age.mean(), inplace=True)\ndf_final_test['age'].fillna(df_age.mean(), inplace=True)\n\ndf_final['age'] = pd.cut(df_final['age'], 3, labels=[\"young\", \"medium\", \"old\"])\ndf_final_test['age'] = pd.cut(df_final_test['age'], 3, labels=[\"young\", \"medium\", \"old\"])","6062b581":"g = sns.barplot(x=df_final['age'],y=df_final['event'])","d1af1816":"df_final = pd.concat([df_final, pd.get_dummies(df_final['age'])], axis=1, sort=False).drop(['age'], axis=1)\ndf_final","9b6e5d30":"df_final_test = pd.concat([df_final_test, pd.get_dummies(df_final_test['age'])], axis=1, sort=False).drop(['age'], axis=1)\ndf_final_test","ab1b4c86":"df_final['children_cnt'].fillna(-1, inplace=True)\ndf_final_test['children_cnt'].fillna(-1, inplace=True)\n\ndf_final['children_cnt'] = pd.cut(df_final['children_cnt'], 4, labels=[\"missing\", \"small\", \"medium\", \"big\"])\ndf_final_test['children_cnt'] = pd.cut(df_final_test['children_cnt'], 4, labels=[\"missing\", \"small\", \"medium\", \"big\"])","2bc244d0":"df_final = pd.concat([df_final, pd.get_dummies(df_final['children_cnt'])], axis=1, sort=False).drop(['children_cnt'], axis=1)\ndf_final","1bdeb45d":"df_final_test = pd.concat([df_final_test, pd.get_dummies(df_final_test['children_cnt'])], axis=1, sort=False).drop(['children_cnt'], axis=1)\ndf_final_test","350a1200":"df_final = df_final.drop(['story_json'], axis=1)\ndf_final","03b6ebb5":"df_final_test = df_final_test.drop(['story_json'], axis=1)\ndf_final_test","22ff0744":"for i in range(7):\n    df_final['product_'+str(i)].fillna('missing', inplace=True)\n    df_final_test['product_'+str(i)].fillna('missing', inplace=True)","a8e5c481":"df_final","74d6a52a":"for i in range(7):\n    df_final = pd.concat([df_final, pd.get_dummies(df_final['product_'+str(i)])], axis=1, sort=False).drop(['product_'+str(i)], axis=1)","fcceffbf":"df_final","586b0778":"for i in range(7):\n    df_final_test = pd.concat([df_final_test, pd.get_dummies(df_final_test['product_'+str(i)])], axis=1, sort=False).drop(['product_'+str(i)], axis=1)","a3ee2441":"df_final_test","828ab84e":"df_final['gender_cd'].fillna('missing', inplace=True)\ndf_final_test['gender_cd'].fillna('missing', inplace=True)","7750baec":"df_final = pd.concat([df_final, pd.get_dummies(df_final['gender_cd'])], axis=1, sort=False).drop(['gender_cd'], axis=1)\ndf_final_test = pd.concat([df_final_test, pd.get_dummies(df_final_test['gender_cd'])], axis=1, sort=False).drop(['gender_cd'], axis=1)","1be5320b":"df_final","10ea5098":"df_final_test","f967ac74":"df_final['marital_status_cd'].fillna('missing', inplace=True)\ndf_final_test['marital_status_cd'].fillna('missing', inplace=True)","9e383470":"df_final = pd.concat([df_final, pd.get_dummies(df_final['marital_status_cd'])], axis=1, sort=False).drop(['marital_status_cd'], axis=1)\ndf_final_test = pd.concat([df_final_test, pd.get_dummies(df_final_test['marital_status_cd'])], axis=1, sort=False).drop(['marital_status_cd'], axis=1)","382331eb":"df_final_test['DLW'] = 0","209c9572":"df_final","36c369c0":"df_final_test","2281d9f9":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nle.fit_transform(pd.concat([df_final['job_title'].fillna('missing'), df_final_test['job_title'].fillna('missing')]))\n\ndf_final['job_title'] = le.transform(df_final['job_title'].fillna('missing'))\ndf_final_test['job_title'] = le.transform(df_final_test['job_title'].fillna('missing'))","c0657fc4":"df_final","5f5d7540":"df_final_test","a460749b":"#df_final = df_final.sample(n=10000, random_state=1)    \nlabel = df_final['event']\nnormalized_df_final = (df_final - df_final.min()) \/ (df_final.max() - df_final.min())\nnormalized_df_final.fillna(0, inplace=True)","743b439d":"normalized_df_final_test = (df_final_test - df_final_test.min()) \/ (df_final_test.max() - df_final_test.min())\nnormalized_df_final_test.fillna(0, inplace=True)","69900e17":"from sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier()\nclf.fit(normalized_df_final.drop(['event'], axis=1), label.astype('str'))","b43b1bd4":"prediction = clf.predict(normalized_df_final_test.drop(['answer_id'], axis=1))","d15a4d0b":"np.unique(prediction)","0724ea80":"result = pd.concat([df_final_test['answer_id'], pd.DataFrame(list(prediction))], axis=1, sort=False)","a0e0fcf5":"final_result = result.sort_values(by=['answer_id'])","e7442c91":"sequence = range(0, 172049)\ndf = pd.merge(pd.DataFrame(list(sequence), columns=['answer_id']), final_result, on='answer_id', how='left')\ndf = df.fillna('0.0')\ndf.to_csv(\"prediction.csv\", index=False, float_format='%.2f')","3810b795":"# Submission","381356c3":"##### *Age*","0c118d82":"### Conclusion\n#### Product_0\n- Use with one-hot encoding\n- nan convert to 'missing'\n\n#### Product_1\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### Product_2\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### Product_3\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### Product_4\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### Product_5\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### Product_6\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### gender_cd\n- nan convert to 'missing'\n- Use with one-hot encoding\n\n#### job_title\n- nan convert to 'missing'\n- Use with count-binning\n\n#### marital_status_cd\n- nan convert to 'missing'\n- Use with one-hot encoding","22f4d571":"# Modelling","352b2b8f":"### Numeric columns","d2de6c33":"## label encode all columns in df_stories_description\n","bb36f6cd":"##### Job_title","84d2fd8b":"# **Load dataset**","ea7b9660":"### Conclusion\n#### Age\n- Make new column from that with labels like 'young', 'medium' and 'old' (and then use one-hot encoding)\n- Fill nans with mean calculated on test+train set\n\n#### Children_cnt\n- Make new column from that with labels like 'small', 'medium' and 'large' plus 'missing'\n- Fill nans with 'missing' on test+train set\n\n#### Job_position_cd\n- Do nothing\n\n#### Story_json\n- Drop","d712c98c":"## Normalize the train and test dataframes","dc399ebf":"### extract from the 'story_json' column in the 'df_stories_description' a field called 'name' to use later in our prediction","0b52cb7f":"##### Product (0-6)","e14573f0":"# **Data exploration**","4e96d5ea":"## Construct the final train and test set","cbaad561":"##### *Children_cnt*","d26b3355":"##### Gender_cd","68881659":"##### Marital_status_cd","07a861eb":"# Data preparation","4576488a":"#### Numeric data preparation","f0f1b875":"##### *Story_json*","1af63860":"#### Object data preparation"}}