{"cell_type":{"86ac8a95":"code","b27fc8e3":"code","84b32715":"code","ca5f86fb":"code","85836305":"code","664f127b":"code","090b6aac":"code","b7cff83d":"code","2ecca8b5":"code","87911f86":"code","54df1d4d":"markdown","4e1d89cc":"markdown"},"source":{"86ac8a95":"import pandas as pd\nfrom pathlib import Path\n#\u00a0The installation procedure is inpsried from this great notebook, thanks for sharing it.\n# https:\/\/www.kaggle.com\/hamishdickson\/tabnetmultitaskclassifier\n\n\n\n!pip uninstall -y typing # this should avoid  AttributeError: type object 'Callable' has no attribute '_abc_registry'\n!cp -r ..\/input\/nfkb-tabnet-model\/* . \n!zip model.zip model_params.json network.pt\n\nimport sys\nsys.path.insert(0, \"..\/input\/tabnet-latest\")\n\nfrom pytorch_tabnet.tab_model import TabNetClassifier","b27fc8e3":"BASE_FOLDER = Path(\"..\/input\/lish-moa\/\")\nTRAIN_FEATURES_PATH = BASE_FOLDER \/ \"train_features.csv\"\nTEST_FEATURES_PATH = BASE_FOLDER \/ \"test_features.csv\"\nTRAIN_TARGETS_PATH = BASE_FOLDER \/ \"train_targets_scored.csv\"\nSAMPLE_SUBMISSION_PATH = BASE_FOLDER \/ \"sample_submission.csv\"\nMODEL_PATH = \"model.zip\"\n# Category mapping to numbers (similr to what is done in training)\nDOSE_MAPPING = {\"D1\": 0, \"D2\": 1}","84b32715":"train_targets_df = pd.read_csv(TRAIN_TARGETS_PATH)\ntrain_features_df = pd.read_csv(TRAIN_FEATURES_PATH)\ntest_features_df = pd.read_csv(TEST_FEATURES_PATH)\ntest_features_df = pd.read_csv(TEST_FEATURES_PATH)\n\nsample_submission_df = pd.read_csv(SAMPLE_SUBMISSION_PATH)\n\n","ca5f86fb":"# Since control is always 0, we can filter those\n\ntrain_sig_ids = train_features_df.loc[lambda df: df[\"cp_type\"] == \"ctl_vehicle\", \"sig_id\"].tolist()\n\nmean_train_targets_dict = train_targets_df.loc[lambda df: ~df[\"sig_id\"].isin(train_sig_ids), :].iloc[:, 1:].mean().to_dict()\n\n\nfor col, mean in mean_train_targets_dict.items():\n    sample_submission_df.loc[:, col] = mean\n\n","85836305":"# Predict for one target => nfkb_inhibitor\n\nX_test = test_features_df.loc[lambda df: df[\"cp_type\"] != \"ctl_vehicle\"].drop([\"sig_id\", \"cp_type\"], axis=1)\n\n\nprint(len(X_test))\nprint(len(test_features_df))\n\nX_test[\"cp_dose\"] = X_test[\"cp_dose\"].map(DOSE_MAPPING)\n\nX_test = X_test.values\n\n\nmodel = TabNetClassifier()\nmodel.load_model(MODEL_PATH)\n#\u00a0This is missing\nmodel.preds_mapper = {0: 0, 1: 1}\ny_preds = model.predict_proba(X_test)[:, 1]\n\nassert (sum(y_preds) > 0).all()\n    \n# For the test, if any are from the control group, we set these to 0\ntest_sig_ids = test_features_df.loc[lambda df: df[\"cp_type\"] == \"ctl_vehicle\", \"sig_id\"].tolist()\n\n\nsample_submission_df.loc[lambda df: ~df[\"sig_id\"].isin(test_sig_ids), \"nfkb_inhibitor\"] = y_preds\n","664f127b":"sample_submission_df.loc[lambda df: df[\"sig_id\"].isin(test_sig_ids), :].iloc[:, 1:] = 0","090b6aac":"sample_submission_df.std()","b7cff83d":"assert sample_submission_df[\"nfkb_inhibitor\"].std() > 0","2ecca8b5":"print(sample_submission_df.mean().sort_values())","87911f86":"sample_submission_df.to_csv(\"submission.csv\", index=False)","54df1d4d":"# Load one target model and predict","4e1d89cc":"There are already few TabNet great training notebooks. So I wanted to make an inference one.\nThis is still a drafty version, I will give credit wherever it is due.\nIn the meantime, enjoy!"}}