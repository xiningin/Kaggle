{"cell_type":{"c4455a8f":"code","1031d8f7":"code","3849c79b":"code","628385cb":"code","bbe3a57f":"code","d0cb3e75":"code","f8165f4f":"code","9ae6faf7":"code","acbd3f4b":"code","f6f7ecc4":"code","00361476":"code","48a1db1e":"code","90cc9674":"code","21da1aff":"code","83d82bd7":"code","715007ac":"code","f5c5f9ab":"code","d54799a4":"code","cb2912ec":"code","164fc559":"code","ebd80015":"code","bc3b1bdc":"code","dcf2b72e":"code","754880f3":"code","ccb460e4":"code","9d643310":"code","3343bb63":"code","d37bc823":"code","64f29f83":"code","559ea698":"code","acb00d18":"code","04e446de":"code","7abc7d29":"code","f405d6ac":"code","5ca19095":"code","f1f4c33b":"code","74747227":"code","0d4ede84":"code","754274a5":"code","940b48cf":"code","18a2dcd4":"code","47055336":"code","c11d33c6":"code","873f172f":"code","97ef59e5":"code","3a2c84e3":"code","cd917faa":"code","c12a75b1":"code","13a3a746":"code","3900e54b":"code","059558f9":"code","2fbc9bf7":"code","48e40334":"code","e2ad4583":"code","8bd1a1a1":"code","69dd98ac":"code","74b34e5a":"code","dc0c55cf":"code","da1a2a91":"code","02d5b4dd":"code","1cce65c7":"code","e8362bd4":"code","f8a3c331":"code","864535d7":"code","de367a85":"code","29094bbe":"code","2c2c19c5":"code","a2ca2752":"markdown","65a2b722":"markdown","0c93d9d3":"markdown","cacb2499":"markdown","75c21cf1":"markdown","ca434764":"markdown","085596fd":"markdown","b24e478f":"markdown","7db0d830":"markdown","5d8f02aa":"markdown","80be02ac":"markdown","59269a15":"markdown","919c17cb":"markdown","4b082b07":"markdown","b9fefb17":"markdown","c5281e49":"markdown","d44b218f":"markdown","c1815590":"markdown","269e537c":"markdown","64678cbf":"markdown","688243e4":"markdown","a7b551c1":"markdown"},"source":{"c4455a8f":"# Input data files are available in the \"..\/input\/\" directory.\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import NearestNeighbors\n#import plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls","1031d8f7":"df_movies = pd.read_csv(\"..\/input\/27m-movie-ratings\/movies.csv\")\ndf_movies.head(3)","3849c79b":"df_movies.shape","628385cb":"df_gscores = pd.read_csv(\"..\/input\/27m-movie-ratings\/genome-scores.csv\", sep=\",\")\ndf_gscores.head(3)","bbe3a57f":"df_gscores.shape","d0cb3e75":"df_gtags = pd.read_csv(\"..\/input\/27m-movie-ratings\/genome-tags.csv\", sep=\",\")\ndf_gtags.head(3)","f8165f4f":"df_gtags.shape","9ae6faf7":"df_ratings = pd.read_csv(\"..\/input\/27m-movie-ratings\/ratings.csv\", sep=\",\")\ndf_ratings.head(3)","acbd3f4b":"df_ratings.shape","f6f7ecc4":"df_movies[\"genres\"].unique()","00361476":"genres = np.array(df_movies[\"genres\"].unique())\ngenres, genres.size","48a1db1e":"# Loop to separate movie genres by str \"|\"\ngenres_temp = []\n\nfor i in range(len(genres)):\n    tem=genres[i].split(\"|\")\n    genres_temp.append(tem)\n\ngenres_temp = np.array(genres_temp)\ngenres_temp","90cc9674":"# Loop to convert from \"list\" to \"array\" with the genres already separated\ngenres_tem = []\n\nfor i in range(len(genres_temp)):\n    values = np.array(genres_temp[i])\n    genres_tem.append(values)\n\ngenres_tem[0]","21da1aff":"# Loop to list the separate genres and make them unique\ngenres_unique = []\n\nfor i in range(1341):\n    v1 = genres_tem[i]\n    #print(v1)\n    for j in range(v1.size):\n        v3 =v1[j].tolist()\n        #print(v3)\n        genres_unique.append(v3)\n\ngenres_unique = pd.DataFrame(genres_unique)\ntarget_genres = genres_unique[0].unique()\ntarget_genres = target_genres[[0,1,7,9,12,15]]\ntarget_genres","83d82bd7":"All_genres = genres_unique[0].unique()\nAll_genres = All_genres.tolist()","715007ac":"# Create the \"N\" columns by filling them with zeros according to movie genres\nfor i in range(0,len(All_genres)):\n    df_movies[All_genres[i]] = 0\ndf_movies[:3]","f5c5f9ab":"# Separate by the character \"|\" the genres of each cell in the \"genres\" column\ntemp=[]\n\nfor i in range(int(df_movies.shape[0])):\n    v1=(np.array(df_movies[\"genres\"])[i]).split(\"|\")\n    temp.append(v1)\n\ntemp=np.array(temp)\ntemp.size","d54799a4":"# Remove the array of arrays leaving each cell with its corresponding gender already separated\ntemp2 = []\n\nfor i in range(len(temp)):\n    values = np.array(temp[i])\n    temp2.append(values)\n\ntemp2[0]","cb2912ec":"# Assign value \"1\" to each category of movies in their corresponding genre column\nserch_genres=All_genres\nfor i in range(0,len(df_movies[\"genres\"])):\n    #print(temp2[i])\n    for j in range(0,temp2[i].size):\n        for z in range(0,len(serch_genres)):\n            #print(serch_genres[z])\n            #print(temp2[i][j])\n            for c in range(0,len(df_movies.columns.values)):\n                if temp2[i][j]==serch_genres[z]==df_movies.columns.values[c]:\n                    df_movies[df_movies.columns.values[c]][i] = 1\n        \n# Save the dummy variables generated for each genre in a new file\n    # df_movies.to_csv(\"..\/input\/movies-genres\/movies_genres\/movies_genres.csv\")","164fc559":"df_movies = pd.read_csv(\"..\/input\/movies-genres\/movies_genres.csv\")\ndf_movies = df_movies.drop([\"Unnamed: 0\"], axis = 1)\ndf_movies.head(2)","ebd80015":"# Review of movies with more ratings\nplt.hist(df_ratings.groupby([\"movieId\"])[\"movieId\"].count())\nplt.show()","bc3b1bdc":"best_views=pd.DataFrame(df_ratings.groupby([\"movieId\"])[\"movieId\"].count())\nplt.figure(figsize=(16,2))\nplt.boxplot(best_views[\"movieId\"], vert=False)\nplt.show()\nprint(best_views.describe())","dcf2b72e":"# The quantity of valuations \"M\" is defined as a parameter to filter the database\nM=500\n\ntop_best_views = best_views[(best_views[\"movieId\"]>M)]\ntop_best_views.columns = [\"rank_movie_ID\"]\nplt.hist(top_best_views.groupby([\"rank_movie_ID\"])[\"rank_movie_ID\"].count())\nplt.show()\nprint(best_views.shape, top_best_views.shape)","754880f3":"# Review of users with more ratings\nplt.hist(df_ratings.groupby([\"userId\"])[\"userId\"].count())\nplt.show()","ccb460e4":"best_users=pd.DataFrame(df_ratings.groupby([\"userId\"])[\"userId\"].count())\nplt.figure(figsize=(16,2))\nplt.boxplot(best_users[\"userId\"], vert=False)\nplt.show()\nprint(best_users.describe())","9d643310":"# The number of users \"U\" is defined as a parameter to filter the database\nU=150\n\ntop_best_users = best_users[(best_users[\"userId\"]>U)]\ntop_best_users.columns = [\"rank_user_ID\"]\nplt.hist(top_best_users.groupby([\"rank_user_ID\"])[\"rank_user_ID\"].count())\nplt.show()\nprint(best_users.shape, top_best_users.shape)","3343bb63":"# We reduce our database \"df_ratings_top\" based on the representative amount of \"top_best_users\"\n\ndf_ratings_top = pd.merge(left = df_ratings, right = top_best_users, how = \"inner\", \n                          right_on = \"userId\", left_on = \"userId\")\ndf_ratings.shape, df_ratings_top.shape ","d37bc823":"# We reduce our database \"df_ratings_top\" based on the representative amount of \"top_best_views\"\n\ndf_ratings_top = pd.merge(left = df_ratings_top, right = top_best_views, how = \"inner\", \n                          right_on = \"movieId\", left_on = \"movieId\")\ndf_ratings.shape, df_ratings_top.shape ","64f29f83":"m0 = df_ratings.movieId.unique().shape[0]\nm1 = df_ratings_top.movieId.unique().shape[0]\nu0 = df_ratings.userId.unique().shape[0]\nu1 = df_ratings_top.userId.unique().shape[0]\n\nprint(\"With the previous filters the number of unique films was reduced from\", m0,\"to\", \n      m1, \", that is, \", m0-m1  , \"less\")\nprint(\"\\n\")\nprint(\"With the previous filters the number of unique users was reduced from\", u0,\"to\", \n      u1, \", that is, \", u0-u1  , \"less\")\n      ","559ea698":"# We will create the totalized fields with the average \"Ranking\" and \"Q_Ranting\" total ratings per movie\n\n# The average ranking of ratings is created\n\nrank_movies_top_tg = df_ratings_top.groupby([\"movieId\"])\nrank_movies_top_tg = rank_movies_top_tg.aggregate( \n    {\n        \"rating\": np.mean,\n    }\n)\n\n# Se crea base de datos \"df_ratings_top_tg\" con el \"movieId\" de pel\u00edculas unicas\ndf_ratings_top_tg = df_ratings_top[[\"movieId\"]]\ndf_ratings_top_tg = df_ratings_top_tg.drop_duplicates(subset=([\"movieId\"]))\nprint(df_ratings_top_tg.shape)\n\n# Add average \"rating\" to the main database\ndf_ratings_top_tg = pd.merge(left = df_ratings_top_tg, right = rank_movies_top_tg, how = \"left\", \n                        right_on = \"movieId\", left_on = \"movieId\")\n\n# Add \"Q_Ratings\" to the main database\ntop_best_views.columns = [\"Q_Ratings\"]\ndf_ratings_top_tg = pd.merge(left = df_ratings_top_tg, right = top_best_views, how = \"left\", \n                          right_on = \"movieId\", left_on = \"movieId\")\n\nprint(df_ratings_top.shape, df_ratings_top_tg.shape)","acb00d18":"# We create a main database \"df_movies_tg\" and enter the fields \"Ranking\", \"Q_Ranging\"\ndf_movies_tg = pd.merge(left = df_ratings_top_tg, right = df_movies, how = \"inner\", \n                        right_on = \"movieId\", left_on = \"movieId\")\n\nprint(df_movies.shape, df_ratings_top_tg.shape, df_movies_tg.shape)\n\n# Loop to add the \"Age\" field to the main database\ndates = []\nfor d in range(0,df_movies_tg[\"title\"].shape[0]):\n    date = int(df_movies_tg[\"title\"][d][len(df_movies_tg[\"title\"][d])-5:len(df_movies_tg[\"title\"][d])-1])\n    dates.append(date)\ndates = pd.DataFrame(dates)\ndates.columns = [\"Age\"]\n\ndf_movies_tg = pd.concat([df_movies_tg, dates], axis = 1)\n\n# Stylize column names and sort their position in the DF\ndf_movies_tg.columns = ['MovieId', 'Rating', 'Q_Ratings', 'Title', 'All_Genres', 'Adventure',\n       'Animation', 'Children', 'Comedy', 'Fantasy', 'Romance', 'Drama',\n       'Action', 'Crime', 'Thriller', 'Horror', 'Mystery', 'Sci-Fi', 'IMAX',\n       'Documentary', 'War', 'Musical', 'Western', 'Film-Noir',\n       '(no genres listed)', 'Age']\ncols = ['MovieId', 'Title', 'Age', 'Q_Ratings', 'Rating', 'All_Genres', 'Adventure',\n       'Animation', 'Children', 'Comedy', 'Fantasy', 'Romance', 'Drama',\n       'Action', 'Crime', 'Thriller', 'Horror', 'Mystery', 'Sci-Fi', 'IMAX',\n       'Documentary', 'War', 'Musical', 'Western', 'Film-Noir',\n       '(no genres listed)']\ndf_movies_tg = df_movies_tg[cols]\n\n# Assign correct genre to movies without genre:\n#df_movies_tg[(df_movies_tg[\"(no genres listed)\"]==1)]\ndf_movies_tg[\"All_Genres\"][841] = \"Drama\"\ndf_movies_tg[\"Drama\"][841] = 1\ndf_movies_tg[\"All_Genres\"][3518] = \"Thriller\"\ndf_movies_tg[\"Thriller\"][3518] = 1\ndf_movies_tg[\"All_Genres\"][4585] = \"Action\"\ndf_movies_tg[\"Action\"][4585] = 1\n#166024 #Drama\n#141866 #Thriller\n#122896 #Action\n\n# Remove column from unlisted genres:\ndf_movies_tg = df_movies_tg.drop([\"\"'(no genres listed)'\"\"], axis = 1)","04e446de":"# Creation of \"Genre\" field with unique genre for each film\ndf_movies_tg[\"Genre\"] = 0\n\n#df_movies_tg = df_movies_tg[:200]\n\n# Separa por el caracter \"|\" los generos de cada celda de la columna \"genres\"\ntemp=[]\nfor i in range(int(df_movies_tg.shape[0])):\n    v1=(np.array(df_movies_tg[\"All_Genres\"])[i]).split(\"|\")\n    temp.append(v1)\n\ntemp=np.array(temp)\n\n# Remove the array of arrays leaving each cell with its corresponding gender already separated\ntemp2 = []\nfor i in range(len(temp)):\n    values = np.array(temp[i])\n    temp2.append(values)\n\n    \n# Assign a unique genre to each movie according to the order established in the \"genres\" list:\ngenres=[\"Thriller\", \"Sci-Fi\", \"Action\", \"Horror\", \"Drama\", \"Animation\", \"Children\", \"Adventure\", \"Crime\", \"Mystery\",\n        \"Comedy\", \"War\", \"Documentary\", \"Fantasy\", \"IMAX\", \"Film-Noir\", \"Western\", \"Romance\", \"Musical\"]\nc=0\nfor i in range(0,len(df_movies_tg[\"All_Genres\"])):\n    for z in range(0,len(genres)):\n        for j in range(0,temp2[i].size):\n            if temp2[i][j]==genres[z]:\n                c+=1\n                if c<2:\n                    #print(genres[z])\n                    df_movies_tg[\"Genre\"][i] = genres[z]\n    c=0\n\n# Save \"df_movies_tg\" to an excel file:\n    #df_movies_tg.to_excel(\"..\/input\/df-movies-tg\/df_movies_tg.xlsx\")","7abc7d29":"# Open \"df_movies_tg\" excel file:\ndf_movies_tg = pd.read_excel(\"..\/input\/df-movies-tg\/df_movies_tg.xlsx\")\ndf_movies_tg = df_movies_tg.drop([\"Unnamed: 0\"], axis = 1)\ndf_movies_tg[:2]","f405d6ac":"def plot3d(Genres='All'):\n    select = df_movies_tg\n    select[\"All\"] = 1\n    select = select[(select[Genres]==1)]\n\n    x, y, z, t, g = select.Rating, select.Age, select.Q_Ratings, select.Title, select.Genre\n\n    fig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z, \n                                       hovertemplate = \"Year: %{y}<br>Rating: %{x:.2f}<br>Q_Rating: %{z} <extra>\"+t+\"<br>Genre: \"+g+\"<\/extra>\",\n                                       mode='markers', marker=dict(size=2, color=x, colorscale='Viridis', opacity=0.8))])\n\n    fig.update_layout(title_text=\"<br>Movie Ratings 1920 - 2018<br>\", scene = dict(\n                            xaxis_title=\"Rating\",\n                            yaxis_title='Years',\n                            zaxis_title=\"Q_Ratings\",\n                            xaxis = dict(\n                                 backgroundcolor=\"rgb(176,196,222)\",\n                                 gridcolor=\"white\",\n                                 showbackground=True,\n                                 zerolinecolor=\"white\",),\n                            yaxis = dict(\n                                backgroundcolor=\"rgb(176,196,222)\",\n                                gridcolor=\"white\",\n                                showbackground=True,\n                                zerolinecolor=\"white\"),\n                            zaxis = dict(\n                                backgroundcolor=\"rgb(192,192,192)\",\n                                gridcolor=\"white\",\n                                showbackground=True,\n                                zerolinecolor=\"white\",),),\n                            width=700,\n                            margin=dict(\n                            r=10, l=10,\n                            b=10, t=10)\n                          )\n    fig.show()","5ca19095":"from ipywidgets import interactive\ninteractive_plot= interactive(plot3d, Genres = ['All', 'Adventure', 'Animation', 'Children', 'Comedy', 'Fantasy', 'Romance',\n                                                'Drama', 'Action', 'Crime', 'Thriller', 'Horror', 'Mystery', 'Sci-Fi',\n                                                'IMAX', 'Documentary', 'War', 'Musical', 'Western', 'Film-Noir'])\noutput = interactive_plot.children[-1]\n#output.layout.height = '1850px'\ninteractive_plot","f1f4c33b":"def selector(Genres='All'):\n    \n    from mpl_toolkits.mplot3d import Axes3D \n    select = df_movies_tg\n    select[\"All\"] = 1\n    select = select[(select[Genres]==1)]\n    #select[(select[\"Age\"].values==2014)]\n \n    #fig = plt.figure(figsize=(9,9))\n    #ax = fig.add_subplot(111, projection=\"3d\", azim=Azim, elev=Elev) # 111 = dimenciones del gr\u00e1fico\n    #ax.scatter(xs=select[\"Rating\"], ys=select[\"Age\"], zs=select[\"Q_Ratings\"], color=\"b\", linewidths=0.0001)\n    #plt.xlabel(\"Rating\")\n    #plt.ylabel(\"Age\")\n    #plt.title(\"Relationship between Valuations and Amount of Valuations per Year\")\n\n    print(\"Relationship between Valuations and Amount of Valuations per Year\")\n    figure, axs  = plt.subplots(3,2, sharey = False, sharex = False, figsize=(14,15))\n    select.plot(kind=\"hist\", x=\"Age\", y=\"Rating\", ax = axs[0][0])\n    select.plot(kind=\"scatter\", x=\"Rating\", y=\"Q_Ratings\", ax = axs[0][1])\n    select.plot(kind=\"hist\", x=\"Age\", y=\"Q_Ratings\", ax = axs[1][0])\n    select.plot(kind=\"scatter\", x=\"Rating\", y=\"Age\", ax = axs[1][1])\n    select.plot(kind=\"hist\", x=\"Q_Ratings\", y=\"Age\", ax = axs[2][0])\n    select.plot(kind=\"scatter\", x=\"Q_Ratings\", y=\"Age\", ax = axs[2][1])\n    plt.show()\n\n    best_views=pd.DataFrame(select.groupby([\"Rating\"])[\"Rating\"].count())\n    plt.figure(figsize=(15,2))\n    #print(\"Box Plot of Ratings by Gender\")\n    plt.boxplot(select[\"Rating\"], vert=False)\n    plt.show()\n    #print(\"Estadisticos principales de las Valoraciones\")\n    #print(select.Rating.describe())\n    select=select[[\"Title\",\"Q_Ratings\",\"Rating\"]]\n    print(\"Top 5 Movie Ratings\")\n    print(select.sort_values([\"Rating\",\"Q_Ratings\"])[::-1][:6])\n    \n    pie_graph = df_movies_tg[[\"Genre\",\"All\"]].groupby(\"Genre\").aggregate([np.sum]).reset_index(level=0)\n    pie_graph.columns = [\"Genre\",\"N_Genre\"]\n    labels = pie_graph.Genre\n    values = pie_graph.N_Genre\n    fig = go.Figure(data=[go.Pie(labels=labels, values=values)])\n    fig.update_layout(title_text=\"<br>Distribution by gender\")\n    fig.show()","74747227":"from ipywidgets import interactive\ninteractive_plot= interactive(selector, Genres = ['All', 'Adventure', 'Animation', 'Children', 'Comedy', 'Fantasy', 'Romance',\n       'Drama', 'Action', 'Crime', 'Thriller', 'Horror', 'Mystery', 'Sci-Fi',\n       'IMAX', 'Documentary', 'War', 'Musical', 'Western', 'Film-Noir'])\noutput = interactive_plot.children[-1]\n#output.layout.height = '1850px'\ninteractive_plot","0d4ede84":"# We specify the columns that we will use for our analysis in the K-NearestNeighbors model\n\ndesired_columns_k=[\"movieId\", \"title\", \"genres\", \"Adventure\", \"Animation\", \"Action\", \"Thriller\", \"Sci-Fi\", \"Crime\"]","754274a5":"# We specify the columns we use for our analysis in the K-NearestNeighbors model\n\nsubset = df_movies[desired_columns_k]\n\nsubset1 = subset[(subset[\"Crime\"]==1)]\nprint(df_movies.shape, subset1.shape)\n\ndf_ratings_tg = pd.merge(left = df_ratings_top, right = subset1, how = \"inner\", \n                         right_on = \"movieId\", left_on = \"movieId\")\nprint(df_ratings.shape , df_ratings_top.shape, df_ratings_tg.shape)\nprint(\"Variaci\u00f3n en N\u00b0 usuarios\", df_ratings.userId.unique().shape[0],\"a\", df_ratings_tg.userId.unique().shape[0])\nprint(\"Variaci\u00f3n en N\u00b0 pel\u00edculas:\",df_ratings.movieId.unique().shape[0],\"a\",df_ratings_tg.movieId.unique().shape[0])\n\ndf_ratings_tg[:2]","940b48cf":"plt.hist(df_ratings_tg.rating)\nplt.show()","18a2dcd4":"plt.hist(df_ratings_tg.groupby([\"movieId\"])[\"movieId\"].count()), # Back position in the graph\nplt.hist(df_ratings_tg.groupby([\"rank_movie_ID\"])[\"rank_movie_ID\"].count()), # Middle position in the graph\nplt.hist(df_ratings_tg.groupby([\"rank_user_ID\"])[\"rank_user_ID\"].count()) # Front position in the graph\nplt.show()","47055336":"# Due to limitations in computer RAM, we will randomly divide the database into 2 groups\n\ndf_ratings_t1 = df_ratings_tg[[\"userId\", \"movieId\", \"rating\", \"timestamp\"]]\ndf_ratings_t0, df_ratings_t1 = train_test_split(df_ratings_t1, test_size = 0.3, random_state=2)\n#df_ratings_t0, df_ratings_t1 = train_test_split(df_ratings_t1, test_size = 0.0002, random_state=2) # FOR MODEL TEST\nprint(df_ratings_t0.shape , df_ratings_t1.shape)\nprint(\"Unique Users: \", df_ratings_t1.userId.unique().shape[0])\nprint(\"Unique movies: \", df_ratings_t1.movieId.unique().shape[0])","c11d33c6":"# To avoid the \"index\" error in the model when generating the array between \"userId\" and \"movieId\", I created a\n# additional dictionary with a new \"index\" from 1 to N for the new fields \"userId_DC\" and \"movieId_DC\"\n\nuserId_DC=list(zip(df_ratings_t1.userId.unique(),range(1,df_ratings_t1.userId.unique().shape[0]+1)))\nmovieId_DC=list(zip(df_ratings_t1.movieId.unique(),range(1,df_ratings_t1.movieId.unique().shape[0]+1)))\nuserId_DC = pd.DataFrame(userId_DC)\nuserId_DC.columns = [\"userId\", \"userId_DC\"]\nmovieId_DC = pd.DataFrame(movieId_DC)\nmovieId_DC.columns = [\"movieId\", \"movieId_DC\"]\n\n\n# Allows you to join the new fields of \"userId_DC\" and \"movieId_DC\" to the ratings database \"df_ratings_t2\"\ndf_ratings_t2 = pd.merge(left = df_ratings_t1, right = userId_DC, how = \"left\", \n                         right_on = \"userId\", left_on = \"userId\")\n\ndf_ratings_t2 = pd.merge(left = df_ratings_t2, right = movieId_DC, how = \"left\", \n                         right_on = \"movieId\", left_on = \"movieId\")\nprint(df_ratings_t2.shape)\nprint(df_ratings_t2[(df_ratings_t2[\"userId_DC\"]==1049)][:3])\n\n\n# Select only the fields we will use\ndf_ratings_t2 = df_ratings_t2[[\"userId_DC\", \"movieId_DC\", \"rating\", \"timestamp\"]]\ndf_ratings_t2.head(3)","873f172f":"n_users = df_ratings_t2.userId_DC.unique().shape[0]\nn_items = df_ratings_t2.movieId_DC.unique().shape[0]+1\n\nn_users, n_items","97ef59e5":"views = np.zeros((n_users, n_items))\nviews.shape","3a2c84e3":"for row in df_ratings_t2.itertuples(): \n    views[row[1]-1, row[2]-1] = row[3]\n\nprint(views)\nprint(type(views), views.shape)\n\n\nsparsity = float(len(views.nonzero()[0]))\nsparsity \/= (views.shape[0]*views.shape[1])\nsparsity *= 100\nprint(\"Filling coefficient: {:4.2f}%\".format(sparsity)) ","cd917faa":"k = 11\n#neighbors_mov = NearestNeighbors(k, \"cosine\")\nneighbors_mov = NearestNeighbors(k,metric='minkowski', p=2)\nneighbors_mov.fit(views.T)\ntop_views_k_distances, top_views_k_items = neighbors_mov.kneighbors(views.T, return_distance=True)\n\ntop_10_mov = pd.DataFrame(top_views_k_items)\ntop_10_mov = top_10_mov.drop([0], axis = 0)\ntop_10_mov.head(5)","c12a75b1":"top_10_dis = pd.DataFrame(top_views_k_distances)\ntop_10_dis.head(5)","13a3a746":"#Test 1\n# The MSE of training is: 13.6174 with \"minkowski\", size = 1346\n# The MSE of training is: 13.620068889782974 with \"cosine\", size = 1346\n\n#Test 2\n# The MSE of training is: 13.372452900723538 with \"minkowski\", size = 13452\n# The MSE of training is: 13.400370848065128 with \"cosine\", size = 13452\n\n#Test 3\n# The MSE of training is: 12.80470482841799 with \"minkowski\", size = (1299, 671)\n# The MSE of training is: 12.80470482841799 with \"cosine\", size = (1299, 671)\n\n#Test 4\n# The MSE of training is: 12.749093509921858 with \"minkowski\", size = (10773, 1563)\n# The MSE of training is: 12.749093509921858 with \"cosine\", size = (10773, 1563)\n","3900e54b":"df_ratings_tg.shape, movieId_DC.shape","059558f9":"# A new ID called \"movieId_DC\" is added to the main database to be able to cross it with the K-neighbors\n\nmovies_k = pd.merge(left = movieId_DC, right = df_ratings_tg, how = \"left\", \n                    right_on = \"movieId\", left_on = \"movieId\")\nprint(movies_k.shape)\nmovies_k[:2]","2fbc9bf7":"# The average ranking of ratings is created\n\nrank_movies_k = movies_k.groupby([\"movieId_DC\"])\nrank_movies_k = rank_movies_k.aggregate( \n    {\n        \"rating\": np.mean,\n    }\n)","48e40334":"# The average ranking of ratings is added to the movie dictionary \"dic_movies_k\"\n\ndic_movies_k = movies_k[[\"movieId\", \"movieId_DC\", \"title\"]]\nprint(dic_movies_k.shape)\ndic_movies_k=dic_movies_k.drop_duplicates(subset=([\"movieId\", \"movieId_DC\", \"title\"]))\nprint(dic_movies_k.shape)\ndic_movies_k = pd.merge(left = dic_movies_k, right = rank_movies_k, how = \"left\", \n                        right_on = \"movieId_DC\", left_on = \"movieId_DC\")\nprint(dic_movies_k.shape)","e2ad4583":"# Loop to change the \"movieId_DC\" to the corresponding \"title\"\n\nfor n in range(1, int(top_10_mov.shape[0]+1)):\n    for m in range(0, int(top_10_mov.shape[1])):\n        for p in range(0, int(dic_movies_k.shape[0])):\n            if top_10_mov[m][n]==dic_movies_k[\"movieId_DC\"][p]:\n                top_10_mov[m][n] = dic_movies_k[\"title\"][p]","8bd1a1a1":"# Loop to assign the correct name to each column to the K-neighbors matrix\n\nnames = []\nfor t in range(int(top_10_mov.columns.values.size)):\n    temp = \"Top \"+str(top_10_mov.columns[t])\n    names.append(temp)\n    \ntemp = np.array(names)\ntemp[0] = \"Top_M\"\ntop_10_mov.columns = temp\ntop_10_mov[:2]","69dd98ac":"# Add the K-neighbors matrix to the main database\n\nsubset_k = subset1.drop([\"title\"], axis = 1)\ndf_ratings_k = pd.merge(left = dic_movies_k, right = subset_k, how = \"left\", \n                        right_on = \"movieId\", left_on = \"movieId\")\ndf_movies_k = pd.merge(left = df_ratings_k, right = top_10_mov, how = \"left\", \n                        right_on = \"Top_M\", left_on = \"title\")\ndf_movies_k[:2]","74b34e5a":"# Loop to add the \"Age\" and \"Q_Ratings\" field to the main database\n\ndates = []\nfor d in range(0,df_movies_k[\"title\"].shape[0]):\n    date = int(df_movies_k[\"title\"][d][len(df_movies_k[\"title\"][d])-5:len(df_movies_k[\"title\"][d])-1])\n    dates.append(date)\ndates = pd.DataFrame(dates)\ndates.columns = [\"Age\"]\ndf_movies_k = pd.concat([df_movies_k, dates], axis = 1)\n\ntop_best_views.columns = [\"Q_Ratings\"]\ndf_movies_k = pd.merge(left = df_movies_k, right = top_best_views, how = \"left\", \n                          right_on = \"movieId\", left_on = \"movieId\")","dc0c55cf":"# Stylize column names and sort their position in the dataframe\n\ndf_movies_k.columns = ['Movie_Id', 'Movie_Id_DC', 'Title', 'Rating', 'All_Genres', 'Adventure',\n 'Animation', 'Action', 'Thriller', 'Sci-Fi', 'Crime', 'Top_Title', \n 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10' , 'Age', 'Q_Ratings']\ncols = ['Movie_Id', 'Movie_Id_DC', 'Title', 'Age', 'Q_Ratings', 'Rating', 'All_Genres', 'Adventure',\n 'Animation', 'Action', 'Thriller', 'Sci-Fi', 'Crime', 'Top_Title', \n 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_movies_k = df_movies_k[cols]","da1a2a91":"df_movies_k.tail()[:2]\n#df_movies_k.to_excel(\"..\/input\/Reports\/df_movies_k_neighbors (gn1 - gn2).xlsx\")","02d5b4dd":"df_plotly = pd.read_excel(\"..\/input\/df-movies-tg\/df_movies_tg.xlsx\")\ndf_plotly = df_plotly.drop([\"Unnamed: 0\"], axis = 1)\ndf_plotly[:3]","1cce65c7":"df_plotly_thr_sci =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors_minkowski (Thriller - Sci-Fi).xlsx\")\ndf_plotly_act_war =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors (action-war).xlsx\")\ndf_plotly_adv_ani_act =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors_minkowski (Adventure - Animation - Action).xlsx\")\ndf_plotly_dra =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors (Drama).xlsx\")\ndf_plotly_hor =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors (Horror).xlsx\")\ndf_plotly_com =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors (Comedy).xlsx\")\ndf_plotly_doc =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors (Documentary).xlsx\")\ndf_plotly_cri =pd.read_excel(\"..\/input\/reports\/df_movies_k_neighbors (Crime).xlsx\")","e8362bd4":"desired_col_plotly = ['Movie_Id', 'Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10' ]\ndf_plotly_thr_sci = df_plotly_thr_sci[desired_col_plotly]\ndf_plotly_act_war = df_plotly_act_war[desired_col_plotly]\ndf_plotly_adv_ani_act = df_plotly_adv_ani_act[desired_col_plotly]\ndf_plotly_dra = df_plotly_dra[desired_col_plotly]\ndf_plotly_hor = df_plotly_hor[desired_col_plotly]\ndf_plotly_com = df_plotly_com[desired_col_plotly]\ndf_plotly_doc = df_plotly_doc[desired_col_plotly]\ndf_plotly_cri = df_plotly_cri[desired_col_plotly]","f8a3c331":"# Join each recommendation matrix file by genre\n\n# ------------------------------------------------------------------------------\ndf_plotly_MT = pd.merge(left = df_plotly, right = df_plotly_thr_sci, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\n# ------------------------------------------------------------------------------\ndf_plotly_MT = df_plotly_MT.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTF = df_plotly_MT.dropna(axis=0, how='any')\nprint(df_plotly_MT.shape, df_plotly_MTF.shape)\n#df_plotly_MTF[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MT1 = pd.merge(left = df_plotly_PEN, right = df_plotly_act_war, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_PEN.shape, df_plotly_MT1.shape\n# ------------------------------------------------------------------------------\ndf_plotly_MT1 = df_plotly_MT1.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTD = df_plotly_MT1.dropna(axis=0, how='any')\nprint(df_plotly_MTD.shape)\n#df_plotly_MTD[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT1.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MT2 = pd.merge(left = df_plotly_PEN, right = df_plotly_adv_ani_act, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_PEN.shape, df_plotly_MT2.shape\n# ------------------------------------------------------------------------------\ndf_plotly_MT2 = df_plotly_MT2.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTD1 = df_plotly_MT2.dropna(axis=0, how='any')\nprint(df_plotly_MTD1.shape)\n#df_plotly_MTD1[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT2.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MT3 = pd.merge(left = df_plotly_PEN, right = df_plotly_dra, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_PEN.shape, df_plotly_MT3.shape\n# ------------------------------------------------------------------------------\ndf_plotly_MT3 = df_plotly_MT3.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTD2 = df_plotly_MT3.dropna(axis=0, how='any') \nprint(df_plotly_MTD2.shape)\n#df_plotly_MTD2[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT3.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MT4 = pd.merge(left = df_plotly_PEN, right = df_plotly_hor, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_PEN.shape, df_plotly_MT4.shape\n# ------------------------------------------------------------------------------\ndf_plotly_MT4 = df_plotly_MT4.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTD3 = df_plotly_MT4.dropna(axis=0, how='any') \nprint(df_plotly_MTD3.shape)\n#df_plotly_MTD2[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT4.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MT5 = pd.merge(left = df_plotly_PEN, right = df_plotly_com, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_PEN.shape, df_plotly_MT4.shape\n# ------------------------------------------------------------------------------\ndf_plotly_MT5 = df_plotly_MT5.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTD4 = df_plotly_MT5.dropna(axis=0, how='any') \nprint(df_plotly_MTD4.shape)\n#df_plotly_MTD2[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT5.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MT6 = pd.merge(left = df_plotly_PEN, right = df_plotly_doc, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_PEN.shape, df_plotly_MT4.shape\n# ------------------------------------------------------------------------------\ndf_plotly_MT6 = df_plotly_MT6.drop([\"Movie_Id\"], axis = 1)\ndf_plotly_MTD5 = df_plotly_MT6.dropna(axis=0, how='any') \nprint(df_plotly_MTD5.shape)\n#df_plotly_MTD2[:1]\n# ------------------------------------------------------------------------------\ndf_plotly_TEMP=df_plotly_MT6.fillna(0)\ndf_plotly_PEN=df_plotly_TEMP[(df_plotly_TEMP[\"Top_Title\"]==0)]\ndup_columns= ['Top_Title', 'Top 1', 'Top 2', 'Top 3', 'Top 4', 'Top 5', 'Top 6', 'Top 7', 'Top 8', 'Top 9','Top 10']\ndf_plotly_PEN = df_plotly_PEN.drop(dup_columns, axis = 1)\n# ------------------------------------------------------------------------------\ndf_plotly_MTD6 = pd.merge(left = df_plotly_PEN, right = df_plotly_cri, how = \"left\", \n                         right_on = \"Movie_Id\", left_on = \"MovieId\")\ndf_plotly_MTD6 = df_plotly_MTD6.drop([\"Movie_Id\"], axis = 1)\nprint(df_plotly_PEN.shape, df_plotly_MTD6.shape)\n#df_plotly_MTD6[:1]","864535d7":"df_plotly_MTF.shape[0] + df_plotly_MTD.shape[0] + df_plotly_MTD1.shape[0]+ df_plotly_MTD2.shape[0] + df_plotly_MTD3.shape[0] + df_plotly_MTD4.shape[0] + df_plotly_MTD5.shape[0] + df_plotly_MTD6.shape[0]","de367a85":" df_plotly_MTF.shape[0], df_plotly_MTD.shape[0], df_plotly_MTD1.shape[0], df_plotly_MTD2.shape[0], df_plotly_MTD3.shape[0], df_plotly_MTD4.shape[0], df_plotly_MTD5.shape[0], df_plotly_MTD6.shape[0]","29094bbe":"df_movies_last_file = pd.concat([df_plotly_MTF, df_plotly_MTD, df_plotly_MTD1, df_plotly_MTD2, df_plotly_MTD3, df_plotly_MTD4, df_plotly_MTD5, df_plotly_MTD6], axis = 0)\ndf_movies_last_file.head(3)\n#df_movies_last_file.to_csv(\"..\/input\/df-movies-k-neighbors-minkowski-1920-2018\/df_movies_k_neighbors_minkowski_-_(1920 - 2018).csv\")","2c2c19c5":"df_movies_last_file = pd.read_excel(\"..\/input\/df-movies-k-neighbors-minkowski-1920-2018\/df_movies_k_neighbors_minkowski_-_(1920 - 2018).xlsx\")\ndf_movies_last_file[:3]","a2ca2752":"preds = np.zeros(views.shape) \nfor i in range(views.shape[0]):\n    if(i%200==0):   \n        print(\"iter \"+str(i))\n    den = 1\n    if (np.abs(top_views_k_distances[i]).sum(axis=0)>0):\n        den = np.abs(top_views_k_distances[i]).sum(axis=0)\n    preds[i, :] = top_views_k_distances[i].dot(views[top_views_k_items][i])\/np.array([den]).T","65a2b722":"### Summary and Presentation of Information","0c93d9d3":"preds.shape , views.shape","cacb2499":"def get_mse(preds, actuals):\n    if preds.shape[0]!=actuals.shape[0]:#If the number of rows does NOT match the number of columns in the other matrix\n        actuals = actuals.T\n    preds = preds[actuals.nonzero()].flatten() # re-define the predictions by eliminating the zeros and generate a vector\n    actuals = actuals[actuals.nonzero()].flatten() # re-defines current values eliminating the zeros and generates vector\n    return mean_squared_error(preds,actuals)","75c21cf1":"# Genres used to generate subsets \"df_ratings_tg\" to create the K-NearestNeighbors model\n\n #Group 1\nsubset1 = subset[(subset[\"Adventure\"]==1) | (subset[\"Animation\"]==1) | (subset[\"Action\"]==1)]\n\n #Group 2\nsubset1 = subset[(subset[\"Thriller\"]==1) | (subset[\"Sci-Fi\"]==1)]\n\n #Group 3\nsubset1 = subset[(subset[\"Action\"]==1) | (subset[\"War\"]==1)]\n\n #Group 4\nsubset1 = subset[(subset[\"Drama\"]==1)]\n\n #Group 5\nsubset1 = subset[(subset[\"Horror\"]==1)]\n\n #Group 6\nsubset1 = subset[(subset[\"Comedy\"]==1)]\n\n #Group 7\nsubset1 = subset[(subset[\"Documentary\"]==1)]\n\n #Group 8\nsubset1 = subset[(subset[\"Crime\"]==1)]","ca434764":"view_test_2, view_test = train_test_split(df_ratings_t0, test_size = 0.0001011, random_state=2)\nview_test_2.shape , view_test.shape\n\nprint(df_ratings_t0.shape , view_test.shape)\nprint(\"Unique Users: \", view_test.userId.unique().shape[0])\nprint(\"Unique movies: \", view_test.movieId.unique().shape[0])","085596fd":"### KNN based collaborative filter (for items)","b24e478f":"### Validation with test set \"view_test\":\n\ntop_k_distances_t, top_k_items_t = neighbors_mov.kneighbors(view_test, return_distance=True)\n\nprint(top_k_distances_t.shape, top_k_items_t.shape)\n\npreds_t = np.zeros(view_test.shape) \nfor i in range(view_test.shape[0]):\n    if(i%50==0):   \n        print(\"iter \"+str(i))\n    den = 1\n    if (np.abs(top_views_k_distances[i]).sum(axis=0)>0):\n        den = np.abs(top_k_distances_t[i]).sum(axis=0)\n    preds_t[i, :] = top_k_distances_t[i].dot(views[top_k_items_t][i])\/np.array([den]).T","7db0d830":"views.shape , top_views_k_distances.shape , top_views_k_items.shape","5d8f02aa":"view_test = view_test.T","80be02ac":"### Model Evaluation","59269a15":"### Union of recommendation matrix by genre with main database","919c17cb":"print(\"The MSE of testing is:\",get_mse(preds_t, np.array(view_test)))","4b082b07":"#### Dataset segmentation by gender to generate K-NearestNeighbors model","b9fefb17":"## Exploratory analysis","c5281e49":"print(\"The MSE of training is:\",get_mse(preds, views))","d44b218f":"# 27M Movies Ratings\n\n**General Background:**\n\nThe analysis shows 5,547 films classified according to the following points:\n\n- Rankings: Ratings between 1 and 5 made by 46,509 unique users.\n\n- Q_Ratings: Number of ratings (17,440,013) distributed among all films (5,547).\n\n- Years: Segments the cinematographic information between 1920 and 2018.\n\n- Genres: The genres used to perform the analysis are: Adventure, Animation, Children, Comedy, Fantasy, Romance, Drama, Action, Crime, Thriller, Horror, Mystery, Sci-Fi, IMAX, Documentary, War, Musical, Western and Film-Noir\n\n**Notes:**\n* The number of ratings per movie is defined in 500 views, as a minimum parameter to separate the best movies in the database.\n* The number of users is defined by those who watched at least 150 movies, a parameter used to separate amateur and professional users who evaluate movies in the database.\n* The matrix of recommendations located at the bottom of the page is in the experimental phase and was generated using the K neighbors classifier method, with the Minkowski metric and a parameter p = 2 to measure the distance between films, obtaining a mean square error (MSE) <12,749.\n\nOriginal Dataset: https:\/\/grouplens.org\/datasets\/movielens\/20m\/\n* MovieLens 20M movie ratings. Stable benchmark dataset. 20 million ratings and 465,000 tag applications applied to 27,000 movies by 138,000 users. Includes tag genome data with 12 million relevance scores across 1,100 tags. \n\n**The data are contained in six files:**\n\ntag.csv that contains tags applied to movies by users:\n* userId\n* movieId\n* tag\n* timestamp\n\n<br>\nrating.csv that contains ratings of movies by users:\n* userId\n* movieId\n* rating\n* timestamp\n\n<br>\nmovie.csv that contains movie information:\n* userId\n* movieId\n* genres\n\n<br>\nlink.csv that contains identifiers that can be used to link to other sources:\n* movieId\n* imdbId\n* tmbdId\n\n<br>\ngenome_scores.csv that contains movie-tag relevance data:\n* movieId\n* tagId\n* relevance\n\n<br>\ngenome_tags.csv that contains tag descriptions:\n* tagId\n* tag","c1815590":"views = views.T","269e537c":"top_views_k_distances.shape, top_views_k_items.shape, view_test.shape, views.shape","64678cbf":"#### File review with dummy variables by gender already generated previously","688243e4":"## Model Creation","a7b551c1":"#### Creation of dummy variables with each gender"}}