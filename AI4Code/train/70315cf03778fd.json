{"cell_type":{"267884b8":"code","55702494":"code","2538db3b":"code","ec8430f7":"code","2b73de0c":"code","ef97db40":"code","f9b4f9fa":"code","73340005":"code","c0116465":"code","301f39b9":"code","7fe14009":"code","50a52530":"code","d286c36b":"code","b4dc1579":"code","01c5618c":"code","1c50e22c":"code","bae1e1ee":"code","b20ec2d2":"code","dfb1ca1c":"code","74cb0c7c":"code","14e0b9be":"code","a968cc4e":"code","1d81883c":"code","6d09b2c9":"code","2aa08f69":"code","32fc0c47":"code","e3def79a":"code","09178dcc":"code","79a8374f":"code","a0a646aa":"code","d95f9c7c":"code","a6e4c74c":"code","7c171123":"code","738a5ae4":"code","28710b56":"code","f2f1235c":"code","b06f60fe":"code","9cb70cc5":"code","b4dcbf72":"code","b14ddd92":"code","8ab75181":"code","01c89655":"code","842741a5":"code","e9b9fbf0":"code","0944d0b0":"code","31343604":"code","ed18d6a8":"code","ab5eab98":"code","723cff52":"code","e934d736":"code","f42d299a":"code","dfdb9674":"code","5e84cede":"code","b5f12adf":"code","3409e0b0":"code","f11e31d8":"code","f2f97066":"code","23eea98b":"code","e63f8676":"code","3aeae511":"code","8ac91a95":"code","496f945e":"code","322b4aed":"code","a15e4096":"code","25eec213":"code","613db5f0":"code","7df9034c":"code","dd4126cb":"code","1c909307":"code","ef672f4c":"code","1738f59d":"code","27efb193":"code","252080c8":"code","9b163d1e":"code","98217f8a":"code","5719eec6":"code","a0fca1de":"code","fe01a9b0":"code","cb4dec52":"code","dfa8e230":"code","d32c51ce":"code","9f251abf":"code","f8d1272e":"code","d47b6389":"code","f98baf40":"code","527e5187":"code","8062312f":"code","2c90c07e":"code","594a1f4a":"code","26afd0fb":"code","b3e84ba9":"code","6e87db34":"code","e6d1424c":"code","96701005":"code","4728f5a0":"code","543cfc02":"code","0c3e1c89":"code","8a5bf47b":"code","a950edcc":"code","a2c4d80a":"code","1a00550b":"code","0b1ef669":"code","5f5d917d":"code","a9f75dfc":"code","e46c1be7":"code","fdab4e71":"code","0104d735":"code","1640e4cd":"code","4d4030b7":"code","b887e359":"code","69c60e1d":"code","4e0e1931":"code","42fa09bf":"code","68e557c3":"code","19706795":"code","6b504d87":"code","0dddc482":"code","a6f65aec":"code","3958c1da":"code","5694fa32":"code","2b724de7":"code","348c45a8":"code","817cbb44":"code","05108292":"code","c6d1fed8":"code","b0930999":"code","50d328ac":"code","baa7fdae":"code","80d8b307":"code","957d8956":"code","b54515be":"markdown","4b197b26":"markdown","784dc495":"markdown","910d9239":"markdown","7f550e14":"markdown","3e170e96":"markdown","e638681d":"markdown","2efc18a6":"markdown","fc36fc52":"markdown","77d64fda":"markdown","202451aa":"markdown","ca9aca9e":"markdown","c35d1c68":"markdown","2f6184d9":"markdown","75cddb87":"markdown","62f1bd72":"markdown","72ee92c8":"markdown","c9096aa1":"markdown","0ed95027":"markdown","7be697ae":"markdown","1f680555":"markdown","7b5fb81c":"markdown","6bcd03a6":"markdown","1c3e17ff":"markdown","572cbbe4":"markdown","5f172e62":"markdown","11ae4f41":"markdown","a1b84ab2":"markdown","32553699":"markdown","eed94bbb":"markdown","5d237bc8":"markdown"},"source":{"267884b8":"#import library\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport seaborn as sb\nimport os\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n%matplotlib inline","55702494":"train_df = pd.read_csv(r'C:\\Users\\Chandan\\TITANIC\\data\\raw_data\\train.csv', index_col='PassengerId')\ntest_df = pd.read_csv(r'C:\\Users\\Chandan\\TITANIC\\data\\raw_data\\test.csv' , index_col='PassengerId')","2538db3b":"pd.set_option('display.max_columns',None)","ec8430f7":"train_df.head()","2b73de0c":"train_df.shape","ef97db40":"test_df.head()","f9b4f9fa":"test_df.shape","73340005":"test_df['Survived']=-888\ntest_df.head()","c0116465":"col=['Survived','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked']\ntest_df=test_df[col]","301f39b9":"test_df.head()","7fe14009":"train_df.info()","50a52530":"test_df.info()","d286c36b":"#concatinating train and test datasets\ndf=pd.concat((train_df , test_df), axis=0)","b4dc1579":"#count the null columns\nnull_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","01c5618c":"df.shape","1c50e22c":"df.describe()","bae1e1ee":"sb.set(font_scale=1.1)\ncorrelation_train=train_df.corr()\nplt.figure(figsize=(8,8))\nsb.heatmap(correlation_train,annot=True,fmt='.1f',cmap='PiYG')","b20ec2d2":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","dfb1ca1c":"df[df['Age'].isnull()].head()","74cb0c7c":"df.Sex.value_counts()","14e0b9be":"d=df[df.Survived!=-888]\nplt.scatter(d.Survived,d.Age,color='c')\n\nplt.title('Survival vs Age')\nplt.xlabel('Survival')\nplt.ylabel('Age')\nplt.show()","a968cc4e":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\nax = sb.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = 'survived', ax = axes[0], kde =False)\nax = sb.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = 'not_survived', ax = axes[0], kde =False)\nax.legend()\nax.set_title('Female')\nax = sb.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = 'survived', ax = axes[1], kde = False)\nax = sb.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = 'not_survived', ax = axes[1], kde = False)\nax.legend()\n_ = ax.set_title('Male')","1d81883c":"plt.scatter(df.Sex,df.Age,color='c')\n\nplt.title('Sex vs Age')\nplt.xlabel('Survival')\nplt.ylabel('Age')\nplt.show()","6d09b2c9":"df.Name","2aa08f69":"#function to extract title of the names\ndef get_title(name):\n    Name_title=name.split(',')[1]\n    title=Name_title.split('.')[0]\n    title=title.strip().lower()\n    return title","32fc0c47":"df.Name.map(lambda x : get_title(x))","e3def79a":"df.Name.map(lambda x : get_title(x)).unique()","09178dcc":"#function to extract title of the names\ndef get_title1(name):\n    title_group={\n        'mr' : 'Mr',\n        'mrs' : 'Mrs',\n        'miss' : 'Miss',\n        'master' : 'Master',\n        'don' : 'Sir',\n        'rev' : 'Sir',\n        'dr' : 'Officer',\n        'mme' : 'Mr',\n        'ms' : 'Mrs',\n        'major' : 'Officer',\n        'lady' : 'Lady',\n        'sir' : 'Sir',\n        'mlle' : 'Miss',\n        'col' : 'Officer',\n        'capt' : 'Officer',\n        'the countess' : 'Lady',\n        'jonkheer' : 'Sir',\n        'dona' : 'Lady'   \n    }\n    Name_title=name.split(',')[1]\n    title=Name_title.split('.')[0]\n    title=title.strip().lower()\n    return title_group[title]","79a8374f":"df['Title']=df.Name.map(lambda x : get_title1(x))","a0a646aa":"df.head()","d95f9c7c":"df[df.Age.notnull()].boxplot('Age','Title');","a6e4c74c":"title_age_median=df.groupby('Title').Age.transform('median')\ndf.Age.fillna(title_age_median,inplace=True)","7c171123":"df[df['Age'].isnull()].head()","738a5ae4":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","28710b56":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","f2f1235c":"df[df.Embarked.isnull()]","b06f60fe":"df.Embarked.describe()","9cb70cc5":"df.Embarked.value_counts()","b4dcbf72":"df.pivot_table(values='Fare',index='Embarked',columns='Pclass',aggfunc=np.median)","b14ddd92":"#replacing missing values\ndf.Embarked.fillna('C',inplace=True)","8ab75181":"df[df.Embarked.isnull()]","01c89655":"df[df.Fare.isnull()]","842741a5":"df.pivot_table(values='Fare',index='Embarked',columns='Pclass',aggfunc=np.median)","e9b9fbf0":"#replacing the missing value with median of fare\ndf.Fare.fillna(8.0500,inplace=True)","0944d0b0":"df[df.Fare.isnull()]","31343604":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","ed18d6a8":"df.Fare.plot(kind='box')","ab5eab98":"df.Fare.describe()","723cff52":"df[df.Fare>400]","e934d736":"pd.qcut(df.Fare,4)","f42d299a":"pd.qcut(df.Fare,4,labels=['very_low','low','high','very_high']).value_counts().plot(kind='bar',color='c',rot=0);","dfdb9674":"df['Fare_bin']=pd.qcut(df.Fare,4,labels=['very_low','low','high','very_high'])","5e84cede":"df.head()","b5f12adf":"df.Ticket.value_counts()","3409e0b0":"t=(df.Ticket.value_counts()>1)\nt=t.to_frame()\nt=t[t.Ticket==True]\nt.index","f11e31d8":"df['grp_sig']='Null'\nfor x in t.index:\n    df.loc[df.Ticket==x,'grp_sig']='group'\ndf.loc[df.grp_sig=='Null','grp_sig']='single'","f2f97066":"df.head()","23eea98b":"df.grp_sig.value_counts()","e63f8676":"pd.crosstab(df[df.Survived!=-888].Survived,df[df.Survived!=-888].grp_sig)","3aeae511":"df.describe()","8ac91a95":"df['Age_stage']=np.where(df.Age>=18,'Adult','Child')","496f945e":"pd.crosstab(df[df.Survived!=-888].Age_stage,df[df.Survived!=-888].Survived)","322b4aed":"df['FamilySize']=df.SibSp+df.Parch+1 #for itself","a15e4096":"df.head()","25eec213":"df['FamilySize'].plot(kind='hist')","613db5f0":"df.loc[df.FamilySize==df.FamilySize.max()]","7df9034c":"pd.crosstab(df[df.Survived!=-888].Survived,df[df.Survived!=-888].FamilySize)","dd4126cb":"df['IsMother']=np.where(((df.Parch>0)&(df.Sex=='female')&(df.Age>18)&(df.Title!='Miss')),1,0)","1c909307":"pd.crosstab(df[df.Survived!=-888].Survived,df[df.Survived!=-888].IsMother)","ef672f4c":"df.Cabin.unique()","1738f59d":"df.loc[df.Cabin == 'T' , 'Cabin'] = np.NaN","27efb193":"def get_deck(cabin):\n    return np.where(pd.notnull(cabin),str(cabin)[0].upper(),'Z')\ndf['Deck']=df['Cabin'].map(lambda x : get_deck(x))","252080c8":"df.Deck.value_counts()","9b163d1e":"pd.crosstab(df[df.Survived!=-888].Survived,df[df.Survived!=-888].Deck)","98217f8a":"df.info()","5719eec6":"df=pd.get_dummies(df,columns=['Deck','Sex','Pclass','Title','Fare_bin','Embarked','Age_stage'])","a0fca1de":"df.head()","fe01a9b0":"df.info()","cb4dec52":"df.drop(['Cabin','Name','Ticket','Parch','SibSp','grp_sig'],axis=1,inplace=True)","dfa8e230":"col=[col for col in df.columns if col != 'Survived']\ncol=['Survived']+col\ndf=df[col]","d32c51ce":"df.head()","9f251abf":"processed_data_path=os.path.join(os.path.pardir,'data','processed_data')\nwrite_train_path=os.path.join(processed_data_path,'train.csv')\nwrite_test_path=os.path.join(processed_data_path,'test.csv')","f8d1272e":"#train data\ndf.loc[df.Survived != -888].to_csv(write_train_path)\n#test data\ncol=[col for col in df.columns if col != 'Survived']\n\ndf.loc[df.Survived == -888,col].to_csv(write_test_path)","d47b6389":"processed_data_path=os.path.join(os.path.pardir,'data','processed_data')\ntrain_path=os.path.join(processed_data_path,'train.csv')\ntest_path=os.path.join(processed_data_path,'test.csv')","f98baf40":"train_df=pd.read_csv(train_path,index_col='PassengerId')\ntest_df=pd.read_csv(test_path,index_col='PassengerId')","527e5187":"train_df.info()","8062312f":"test_df.info()","2c90c07e":"X=train_df.loc[:,'Age' : ].as_matrix().astype('float')\ny=train_df['Survived'].ravel()","594a1f4a":"print X.shape, y.shape","26afd0fb":"#train test split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)\nprint X_train.shape,y_train.shape\nprint X_test.shape,y_test.shape","b3e84ba9":"#average survival in train and test\nprint 'mean survival in train : {0: .3f}'.format(np.mean(y_train))\nprint 'mean survival in test  : {0: .3f}'.format(np.mean(y_test))","6e87db34":"from sklearn.dummy import DummyClassifier\n\nmodel_dummy =DummyClassifier(strategy='most_frequent',random_state=0)\n\nmodel_dummy.fit(X_train, y_train)","e6d1424c":"print 'score for baseline model : {0: .2f}'.format(model_dummy.score(X_test,y_test))","96701005":"from sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score","4728f5a0":"#performance matrix\nprint 'accuracy of baseline model {0: .2f}'.format(accuracy_score(y_test,model_dummy.predict(X_test)))","543cfc02":"#confusion matrix\nprint 'accuracy of baseline model: \\n {0}'.format(confusion_matrix(y_test,model_dummy.predict(X_test)))","0c3e1c89":"#precision and recall score\nprint 'precision for baseline model : {0: .2f}'.format(precision_score(y_test,model_dummy.predict(X_test)))\nprint 'recall for baseline model : {0: .2f}'.format(recall_score(y_test,model_dummy.predict(X_test)))","8a5bf47b":"def get_sub_file(model ,filename):\n    \n    test_X=test_df.as_matrix().astype('float')\n    predictions=model.predict(test_X)\n    df_submission=pd.DataFrame({'PassengerId':test_df.index,'Survived':predictions})\n    \n    sub_data_path=os.path.join(os.path.pardir,'submissions','sub2')\n    sub_file_path=os.path.join(sub_data_path,filename)\n    \n    df_submission.to_csv(sub_file_path,index=False)","a950edcc":"get_sub_file(model_dummy,'01_dummy.csv')","a2c4d80a":"from sklearn.linear_model import LogisticRegression","1a00550b":"model_lr_1=LogisticRegression(random_state=0)","0b1ef669":"model_lr_1.fit(X_train,y_train)","5f5d917d":"print 'score for logistic regression -version 1: {0: .2f}'.format(model_lr_1.score(X_test,y_test))","a9f75dfc":"#performance matrix\nprint 'accuracy of baseline model {0: .2f}'.format(accuracy_score(y_test,model_lr_1.predict(X_test)))\n#confusion matrix\nprint 'accuracy of baseline model: \\n {0}'.format(confusion_matrix(y_test,model_lr_1.predict(X_test)))\n#precision and recall score\nprint 'precision for baseline model : {0: .2f}'.format(precision_score(y_test,model_lr_1.predict(X_test)))\nprint 'recall for baseline model : {0: .2f}'.format(recall_score(y_test,model_lr_1.predict(X_test)))","e46c1be7":"model_lr_1.coef_","fdab4e71":"get_sub_file(model_lr_1,'model_lr_1.csv')","0104d735":"model_lr=LogisticRegression(random_state=0)\n\nfrom sklearn.model_selection import GridSearchCV","1640e4cd":"parameters={'C':[1.0,10.0 ,50.0,100.0,1000.0],'penalty':['l1','l2']}\nclf=GridSearchCV(model_lr,param_grid=parameters,cv=3)","4d4030b7":"clf.fit(X_train,y_train)","b887e359":"clf.best_params_","69c60e1d":"print 'score for logistic regression -version 2: {0: .2f}'.format(clf.score(X_test,y_test))","4e0e1931":"get_sub_file(clf,'lr_hyp_1.csv')","42fa09bf":"# Algorithms\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import MinMaxScaler , StandardScaler","68e557c3":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.copy()","19706795":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\n\nsgd.score(X_train, Y_train)\n\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)","6b504d87":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","0dddc482":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)","a6f65aec":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)  \nY_pred = knn.predict(X_test)  \nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)","3958c1da":"gaussian = GaussianNB() \ngaussian.fit(X_train, Y_train)  \nY_pred = gaussian.predict(X_test)  \nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","5694fa32":"perceptron = Perceptron(max_iter=5)\nperceptron.fit(X_train, Y_train)\n\nY_pred = perceptron.predict(X_test)\n\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)","2b724de7":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\n\nY_pred = linear_svc.predict(X_test)\n\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)","348c45a8":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train)  \nY_pred = decision_tree.predict(X_test) \nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","817cbb44":"results = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', \n              'Decision Tree'],\n    'Score': [acc_linear_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_decision_tree]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head(9)","05108292":"from sklearn.model_selection import cross_val_score\nrf = RandomForestClassifier(n_estimators=1000,max_features=0.4)\nscores = cross_val_score(rf, X_train, Y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","c6d1fed8":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100, oob_score = True)\nrandom_forest.fit(X_train, Y_train)\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\n\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","b0930999":"print(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")","50d328ac":"param_grid = { \"criterion\" : [\"gini\", \"entropy\"], \"min_samples_leaf\" : [1, 5, 10, 25, 50, 70], \"min_samples_split\" : [2, 4, 10, 12, 16, 18, 25, 35], \"n_estimators\": [100, 400, 700, 1000, 1500]}\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nrf = RandomForestClassifier(n_estimators=100, max_features='auto', oob_score=True, random_state=1, n_jobs=-1)\nclf = GridSearchCV(estimator=rf, param_grid=param_grid, n_jobs=-1)\nclf.fit(X_train, Y_train)\nclf.bestparams","baa7fdae":"# Random Forest\nrandom_forest = RandomForestClassifier(criterion = \"gini\", \n                                       min_samples_leaf = 5, \n                                       min_samples_split = 10,   \n                                       n_estimators=100, \n                                       max_features='auto', \n                                       oob_score=True, \n                                       random_state=1, \n                                       n_jobs=-1)\n\nrandom_forest.fit(X_train, Y_train)\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\n\nprint(\"oob score:\", round(random_forest.oob_score_, 4)*100, \"%\")","80d8b307":"get_sub_file(random_forest,'random_fhyp.csv')","957d8956":"get_sub_file(decision_tree,'des_tree.csv')","b54515be":"## Feature : Deck","4b197b26":"## Feature : Family Size","784dc495":"## Feature : Adult or Child","910d9239":"here we can see that more than 80 percent of data is missing from Cabin column. Therefore we'll drop that column","7f550e14":"from this graph, we can say that most of the women were rescued...also in case of men, children and older adults were rescued.. ","3e170e96":"here we can see that the passengers are of 1st class and their fares are 80..therefore we can say that their embarked place might be C","e638681d":"### Logistic Regression:","2efc18a6":"### Random Forest:","fc36fc52":"### Decision Tree:","77d64fda":"# Model","202451aa":"# Data Cleaning","ca9aca9e":"# Feature : Embarked","c35d1c68":"from this graph it seems that there is no relation between survival and age","2f6184d9":"### Perceptron:","75cddb87":"## Feature : IsMother","62f1bd72":"### Linear Support Vector Machine:","72ee92c8":"## Feature : Ticket","c9096aa1":"## import data","0ed95027":"# Feature : Age","7be697ae":"### Gaussian Naive Bayes:","1f680555":"# Baseline Model","7b5fb81c":"## Data Preperation","6bcd03a6":"# Save Processed Dataset","1c3e17ff":"# Feature : Fare","572cbbe4":"### Stochastic Gradient Descent (SGD):","5f172e62":"so here we can see that there this feature doesn't affect much on the survival","11ae4f41":"### K Nearest Neighbor:","a1b84ab2":"# Feature : Engineering","32553699":"## Hyperparameter Optimization","eed94bbb":"## Test new parameters","5d237bc8":"## Logistic Regression Model"}}