{"cell_type":{"56437019":"code","398a94db":"code","bad72c4f":"code","44691732":"code","86d6fa81":"code","488ed171":"code","0b16597d":"code","795b228f":"code","212693b6":"code","72333a01":"code","b88efd05":"code","0c469f79":"code","32b4e442":"code","4c1b5cfb":"code","ce1cd628":"code","6b2d264b":"code","36730955":"code","4498a057":"code","91055db7":"code","2d722c69":"code","b5dfcefa":"code","50b5b159":"code","4b8845e7":"code","6ef2bc1f":"code","a023cf44":"code","a6bbd0d6":"code","7786a705":"code","4e634ea7":"code","d7875f1b":"code","4adf3b2d":"code","b8b26f3d":"code","fcdf083c":"code","8b3ed180":"code","57b9d532":"code","bd1c6350":"code","92c20b52":"code","9fa67025":"code","5ed89801":"code","93225e79":"code","234be624":"code","6cd519d5":"code","3d47dfbf":"code","5f37b4de":"code","c4b47c92":"code","8f899e84":"markdown","08d9bb1f":"markdown","65cba459":"markdown","ee7f0864":"markdown","770cd079":"markdown","ea0ab7ce":"markdown"},"source":{"56437019":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns","398a94db":"train_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","bad72c4f":"train_df.head(10)","44691732":"train_df.info()","86d6fa81":"print(\"Columns in original dataset: %d \\n\" % train_df.shape[1])\nprint(\"Columns with na's dropped: %d\" % train_df.shape[1])\n\n\n","488ed171":"columns_with_na_dropped = train_df.dropna(axis=1)\ncolumns_with_na_dropped.head()\n","0b16597d":"train_df.drop(['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','SaleCondition']\n         , axis=1,inplace=True)","795b228f":"train_df.head(5)","212693b6":"columns_with_na_dropped = train_df.dropna(axis=1)\ncolumns_with_na_dropped.head()","72333a01":"train_df.drop(['Neighborhood','Condition1','Condition2','BldgType','HouseStyle','SaleType']\n         , axis=1,inplace=True)","b88efd05":"train_df.columns","0c469f79":"train_df.head(4)","32b4e442":"columns_with_na_dropped = train_df.dropna(axis=1)\ncolumns_with_na_dropped.head()","4c1b5cfb":"train_df.drop(['RoofStyle','RoofMatl','Exterior1st']\n         , axis=1,inplace=True)","ce1cd628":"train_df.head(5)","6b2d264b":"columns_with_na_dropped = train_df.dropna(axis=1)\ncolumns_with_na_dropped.head()","36730955":"train_df.drop(['Exterior2nd','ExterQual','ExterCond']\n         , axis=1,inplace=True)","4498a057":"train_df.head(5)","91055db7":"columns_with_na_dropped = train_df.dropna(axis=1)\ncolumns_with_na_dropped.head()","2d722c69":"train_df.drop(['Foundation']\n         , axis=1,inplace=True)","b5dfcefa":"train_df.head(5)","50b5b159":"columns_with_na_dropped = train_df.dropna(axis=1)\ncolumns_with_na_dropped.head()","4b8845e7":"# get the number of missing data points per column\nmissing_values_count = train_df.isnull().sum()\n\n# look at the # of missing points in the first ten columns\nmissing_values_count[0:10]\n#train_df.isnull()","6ef2bc1f":"# how many total missing values do we have?\ntotal_cells = np.product(train_df.shape)\ntotal_missing = missing_values_count.sum()\n\n# percent of data that is missing\npercent_missing = (total_missing\/total_cells) * 100\nprint(percent_missing)","a023cf44":"train_df.isnull()","a6bbd0d6":"train_df.dropna( axis=1, inplace=False)\n","7786a705":"train_df.head(10).plot.line(title='train data')","4e634ea7":"train_df['LotArea'].plot.hist()","d7875f1b":"train_df.head(10)['LotArea'].value_counts().sort_index().plot.bar()\n\n","4adf3b2d":"sns.scatterplot(x='OverallQual', y='OverallCond', data=train_df)","b8b26f3d":"test_df","fcdf083c":"test_df.dropna( axis=1, inplace=False)","8b3ed180":"\n# As you can see there is no labels in data\nplt.scatter(test_df['MSSubClass'],test_df['LotFrontage'])\nplt.xlabel('pelvic_radius')\nplt.ylabel('degree_spondylolisthesis')\nplt.show()\n","57b9d532":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(train_df, test_size = 0.3)# in this our main data is split into train and test\n# the attribute test_size=0.3 splits the data into 70% and 30% ratio. train=70% and test=30%\nprint(train.shape)\nprint(test.shape)\n","bd1c6350":"train_df.columns","92c20b52":"train_X = train[['Id','MSSubClass','OverallQual','LotArea']]# taking the training data features\ntrain_y=train.SalePrice# output of our training data\ntest_X= test[['BsmtFinSF2','Electrical','GarageCars','OpenPorchSF']] # taking test data features\ntest_y =test.SalePrice   #output value of test data\n","9fa67025":"train_X","5ed89801":"test_X","93225e79":"train_df","234be624":"plt.scatter(x = train_df['GrLivArea'], y = train_df['SalePrice'])\nplt.ylabel('SalePrice')\nplt.xlabel('GrLivArea (Above grade \"ground\" living area square feet)')","6cd519d5":"plt.scatter(x = train_df['OverallQual'], y = train_df['MoSold'])\nplt.ylabel('SalePrice')\nplt.xlabel('GrLivArea (Above grade \"ground\" living area square feet)')","3d47dfbf":"plt.scatter(x = train_df['GrLivArea'], y = train_df['MSSubClass'])\nplt.ylabel('SalePrice')\nplt.xlabel('GrLivArea (Above grade \"ground\" living area square feet)')","5f37b4de":"# remove GarageArea outliers\ntrain = train[train['GarageArea'] < 1200]","c4b47c92":"\ntrain.dropna( axis=1, inplace=False)\n","8f899e84":"<h2 style=\"background-color:Tomato;\"><center>Introduction<\/center><\/h2>\n\n\n**Everybody needs a roof over their heads. It can be a house, a villa, or a flat. Everybody, at some point in life, faces a choice whether to buy a house, and if so, which one. And why are they so expensive?**\n\n**The topic of real estate is not only the topic you just have to deal with. It can also be very interesting. There are plenty of TV Shows, for instance, Property Brothers, of which plot is based on examples of people buying and renovating houses. This particular one is the most famous in the world and has been running already for almost a decade. For many people houses are also an investment that generates profits.**","08d9bb1f":"<h2 style=\"background-color:Tomato;\"><center>Imoport some of library<\/center><\/h2>","65cba459":"![iamge](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBIWFRUVEhISEhISFRERERESERERERESGBQZGRgUGBgcIS4lHB4rHxgYJjgmLS8xNTU1GiQ7QDszPy40NTEBDAwMEA8QHxISHzYhISE0MTQ0NDQ0NDQ0NDQ0NDQ0NDQxMTQ1NDQ0NDQ0MTQ0NDQ0NDQ0NDQxNDQ0MTQ0NDQ0NP\/AABEIAKgBKwMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAADAAECBAUGB\/\/EAEcQAAIBAgQCBgUHCAgHAAAAAAECAAMRBBIhMQVBBiJRYXGBEzKRobEUQlJyksHRFSNTYqKy4fAHJEOCo7PC8RYzNGNzw9L\/xAAaAQADAQEBAQAAAAAAAAAAAAAAAQIDBAUG\/8QAKxEAAwACAAQFAwQDAAAAAAAAAAECAxESITFBBAUTMlEiYXEzgbHBFFKR\/9oADAMBAAIRAxEAPwD1nCobS3B0RpCwFK0iJlasLy2YGqsApbRnlIwEs5NLwDRoyQnhsMYEw+GWU+g0+ZdEeMBHkGooooxgBTxG8CRDVt4ICBLLVBdJNoyDSImA0AU8jIOJOosi40jAqP6141U7SdRYKrtEJlk7RJEh6oiSMQnETbSTCM0AAtFHYRjAAyPGa0EhtHcQGh9BGzyBEdEvAZIayax8tpFYEhaYiYyYFhBwAcSYkVjxgVsRAXh68qQBG5RaHldYdZJY8hU2k5CptACsp0gHEMBB1BGQCMt4TaU2lrCGU+gp9xdiiikGgoxjxQAp1xIUxrC1xGoCBPcOJEyd5BoFAmjDaSaCQ6xiB1BAVRpLVUStU2iEyWHN1hEGsFhtodN4wY7SJk3EG0BEJEiSjGAEDJoZEx1gAiIZBIgSRMAIO0lSWDh0sBckCAE3OkCIKti07bmVXxttpDuUUopmkTGvMGviSefvgFrt2++S8y+DRYX8m5WMrWPYZn+nP8mL5V3xPMHpnVrDLtALDrtNSCUZhHjGAFYwNSHMFVjIKzQ+FgXhcMZT6E9y+pjwNSsqKWdgqrqSxAAHjOT4n01VTloKHsdXa4Q9oXmfGZVcz1OrFgyZXqFs7KKYnBekVGvYA5KnOmx18jzm3eE0qW0RcVD4aWmArQINoerAkSjN9QqPK9aoRHkK0mnyHD2+ZXbFkcjB\/Lu6CqwDzH1Gjo9OTYL3W8rtHwzXQSNSbp7WzBk6EOm8r0t5YlEok5gnMIxgGMA0KKKIwDQxiiiEBE0jvBmoAL79wIv7CZmPxtPSKjKUUm12y2Btpex7bTOskx1LnHVdDSd8ova\/d+MzcXjGPO3hJcUxRHPSc9XxZPd2eE57zbOzDg5b0XnrWNyfOCfFTLavfn74fA4M1iw6yoouz3t4Ad5mKdU9I6HjmVthVxec5UBYjs5eJlkYeqeSj6z6+68lgML6NcoG255nvJhDWmkpdznp\/wCq5AvktX6VP2t+Eb5FV+mn7X4Sx8okPlMekLbOyhaZkAkIqzsOQnGMeIwABaBqiWMsxeNcdoUBZjnfki6t59nnB0lzY5x1b4ZW2WHMw+IdKKVK60\/ztQaaGyA955+U5jinHa1a4JyU\/oJcA+J5zKE578R2k9jw3lK92V\/sv7L3EuK1q5vUckckGiL4D7zKFo8U5nW+p7MRMTwytIdSRqDYjUEbg9s6bg\/S+rTstcGqg0DaCoo\/1TmAIoTbl7RnmwY8y1S2eq\/lqi1FqyNmVVLMq2ziw2IOxmbgeldGq6U1p1AXOUFstgbeM8+SoRexIuLGxIuOw9svcBqKuIos7BVVrlibAaGbLO20ebXleOIqntvno9TIgqo0h1FxcEEHYjUGDrpYTqa2jwkmmZlQSpUl2qJTrTko6pGp43ILHaGGNUiUHEA62jjI1yZNY0+Z0NI7GWrzOwdS6CXqbXE609nOTMC0KTBNGAooohACMcRNGEBMcHWc\/wBIeGOeugLg72FyPKdCI7zPJim1pmmHNWKto88evXUZSWyjYOL28CdZSqMx3M9PZARqAfEAyK0kA9RPDKtpz\/4v3OxeOXwebYHCVHYIu53J2UcyZ2eFoBECLsNydye0y9Uw6DrKiqdiQoBIlDGYpV5xcHp9WFZnmSSQPE1QBMWtjFXVmAHeQIz4lqtRadM6t6x3yLzaaGJ4TTS1lzH6TdZvaZnp1z7F6UrT6mV+U05Xb6qs3wEXyxv0dT7BmpTpKOQEJ1eyVoh0vg7yKKKdxwjSnjuI0qK5qrhV5X3J7ANyZcmTieAYaoxaojO3a1SobdwF7AeET3rkVHDxfVvX2ON4z0uq1LrRvSTa+hdh48vKcyxuSTqTudyTPVf+GMH+gX7TfjMTpXwPDUsOz0qYVwyAEMx0LAHczmvHTTbZ7PhvF+HlqIlrfI4WKKKc7PZFFFFEAooooAKIxTpehnDKNZqoqrmCCmQCSACS1zoe6VEunoxz5pxQ6fRFLgnSGthyADnp86bH908j7p3uA41QxCnI1ntrTbRh5c\/ERv8AhXBfoR9p\/wAZE9F8INVpEMNQy1KisD3G86pi55b2jwfEZvD5nxJNMeoJRriXSlha5NtLk3PtlSvM7Rzyyk0C+0K5gzMzQv8ACnutpp0G5TD4S+pHfNVGs07Ie5OO+VFwwTSV5BpYiQiMYGO0YDGNHEG7gdvkpPwgLqFEeY2J49SQ2ZahI7F\/GVj0tpD+zqn+6B98jjn5K4afY6JjpG5TO4VxZcQrMqMgVstny3Om+hmgTpKTT6Ca1yZB9pz\/ABThbtc02v8AqnQ+2bzHSV2aRcTS5mmPJUvaMTo9wdqbPUqeu9gouDZR3iXeJ4gWh6leynn2TluI8RbrAC55A9s5cn0rhR1495K4mWzih22gfylT\/SD2iV+C8HqVbPXcmmxuE2uO+3KdSMDRXQIoA0HUESmmuY7cy9dTr4oop3HAKKKKADTC6aD+qVO40z\/iLN2YnTEf1St4J\/mLJv2s1wfqz+V\/J5aY0eLKew+yefo+s2kNFeTCN9FvsmQIia0NUmEoJmZQdmZVPgTaejL0Mwf0XP8AfM85oPlZSdgyk+AN56gvSXB2v6dfff4TfCp57PK8xrMnPp779DF490Xw1KhUqIGDKARdyRuBt5wH9Hfr1vq0\/i0v9I+PYaph6iJVVncAKoB16w7u6Uf6O\/Xr\/Vp\/FppqfUWjBPI\/CW8m977\/ALHdxjtHinQeSY1Ub+JlDETSxQsTMzETlyLTN4KNSBLQziAqTI2H4c9nIm25nNYZ7VB3zpMt1vcDxIHlrOrE\/pOXIvqLKPcRmMwMVx8UtPR5raaOB90qnpZ\/2dO3P\/CU8k\/JPBXwdOz25MfAXmRjekioSDRc28BMV+mosn5sIzO6WNQk2CqQ2lhrmPP5srcTq1Xu1rA2Ome370mr+CpldzWbpggFxQqebqPulB+m9J8oNDrZymUvmIXKDnuFtubW3mPWo1st7G1jsXPxacy4fOpuoGcrY6tmyg3y72Ivre2hkTdVyZTlLmjt+J5W63o1AOosGJsR2gTKdF39GPY8u13qFF\/5XqrsgGltOUqO1QDen9i\/3TN6LTZ0\/QhupVATKoZT87ex0sZ1DGcr0Kc5auYjNdNlK6WPdOnvOnH7UY5PcxqhlN2lis0pM0dMlCvGfDI46yq3eQIhDqJk1stNrmisXCKFtYAWFtrSv8tbkpI5Gx190vlQdxLKYfQSXFPuaq57nRxSHpBJBp0nOPFFFABjMbpZ\/wBJW8FP7QmsaomN0rqj5LWHao\/eEm\/azTB+rP5X8nB9GUzYmkDrcnf6pnp1LDqPmj2CeY9GXtiaR\/WI\/ZM9Np1iZlg9p3+atrMvwWQonkfH1tia9v0rfGeuK08l6Rj+tVv\/ACE+0AxeI9qH5V+o\/wAf2ZsUZmkS05D3yWadl\/RyevX+rT\/eacUqk7AnwBM6\/oExR6pZSoZVsWBUEhj2+M1xe5HD5g16FLfweiRSn8tXtX7QlPF8UysoBWxDEgMt73Ftz4ztb0fNLmGx418pkV5mcQ6Q1w2iIRewzFdvtiY2I6RV9erRHkh\/9k575s2nkdPh0Qmzmw17pi8VxgQnIaZA5Mrkn2ETmU6W4oODmpnrhCgQqMpUnNmU2vpa15qYrEVHGY5gDYmyG4\/bi0lI9vYNuKMOsBTB7bfcakpDpliBUVXFN6d8p6gWxI0s2oB358tpOtntvU526rW\/zDOXrr1w1\/nqpBI+iT6u\/ne2vhCafQKXc7jGYlXAYJTF8upcE7dwmfVK20VR3qef2Ie9MovqjQaBX+JBlaoiW0KDxz3\/AHRJoaObxDjOoIB65Ob52q6Lfe2h5TrhQGRSAmw1yv782k47Gmz37Ki2bK2l1bTMdBttz17J1FHEsEU520A9Ur9zSq6IXcWJorl9enfsC7eyc+5UFdRmFUXFiRbKbHbtzTeq13IvnqHzJ++YFYmzaDKK1BmzE5r5KoU\/V1Nzcald7xSDOwq17ILJTtlU3yOOX6wlN8Y9hlyLvewb8JfD0siZXA6i+q1QEG31pUd0trUzH9Zq5\/1RMaNrojWY+lzG56ljZgLa9oHxnTBpyvRRlLvb6ItYPbftYmdRadGN\/SY5F9QHEPK15ZqpKpWKmEySUw4MrgQiyOIrhCKZZDSiIcGWqE5N8QtOAQyxTmiM0EEg5koOpGMAxmR0mBOGqgC5Kiw\/vCahbeZ\/FWHo3vtaRftZWGtXL+Gjhej1JhiaRKkANqfIz0mhvOK4ebVEt29k67CuSZl4bozs8xt1kT+xpqJ5v0i4PWfEVnpqHBYHKrXe1huOW09IWcwVviMQGsRmTcA26p7jLypNJMz8LmrE3U\/Bwn5Kr\/OplfraQb8PqD1jTXxqKJr8YwRLHLkGv0V\/+Zj1eEOR6y3\/AJ\/VnM1KO1eYZn2X\/DU6J4oK9RFemSVVrLUDbEjZdf8AaS4ylQE2Lb3Nnq\/hMDgvA6qV8+dSdLCzD4Td4nhKjHZPPP8AjK3KWkceW6yU6rqzJr+ktYmp5mqfvmDgatRcRemRcMoYEkFr307SNNr850VXhNUqR1PYx+JlLCdHXVgxILZ7+qQMttvbBUvkho3OJKdyqA6E2e1jbbR9ZlVRcXKr5sT8XmxicCx3VftMP9Mpvw1+S013tYMf94qtApZylakbVGWxWm9FmsQDcsyAAa30ZteVu+dXQqA01OavewvY3F+wazJfo65fPnIykHqp48zOjOAOQAM+w5JaDuX3Fp7M1qq29eqPtW+M5riS9ZmVWYI1Ml7nqktYAnlcFvZ3Trzw3T1mv4LMx+AMQ\/51wjNTL07C1QrmynyuefOKblMpy9FrDsDTQ6XttnqH3ZLRywt6tMEW\/TX\/AHJZThpyABrC22UQZ4S1vWPuieRCUnK8ZdgWCgZSUL2v1QG6p1sRqbbGdHgKn5tOtT0HzmU+4pG\/JKinXR8zNV9Fla4uoRwxUHv0+zLuE4ZlQL1vG5lepOlzDhe+hXfEXH9l\/hj4JOV4pUIc7dYrsQENnBF7AXnarw7Qi7b33\/hMjHcCRzds2n61uclZEmU55F7ChzSS1L5psc7WPtEE4qAHqC\/L84SJoYfhqhFXuPzzeDHDF\/lrwdoSkN0SDembOFHUNtRfccp2U5jo\/gQlQsPokHrbzp8s6MTTkyydSDSu9pYZIB0lMUgswjq0i1OOqzJotD5oVTAlRCaRpoGjoKLS2plCi8to06EYJhbwNR5JmgKjRgwZMpY4XRvCWWMrYv1TIrowj3IyMPTAdfGblE2Mx00IPYZdTFd0zxtSjpzS6aZuU2nLY4la1Qi3WOtxfaa6Y\/umPiTmdm7STFle0tDwTqnv4Kjrc6geyOKA+iIYLNinw3QG+4BmMxs3u5nsZOCoKGJCi9uyKslyeqPZNHEYTICRK+CF217DL4dcjCmq3SK3yc\/R90F8kN9vdN\/KIzJe3nNOBGPEzEr0vD2QDUZqVqJldqBmVSjRNmU1LfvteWDSGUC3vlunhe2NVp2kuB7KJpd3vlV6OvsH8+yaRSBZJHAVxEBTsBGKi3OWSukGwkuRqjPqoNfK0soBlEZk+IhxT0i4R7Avl75VdQc3kB5n+EuukAU0Piv3ydcw2GVOoOrykPR6bSwD1R4QZjGizwhOufCbIEy+FesfD75qrOzD7TnydSJEEVhTBmXRKQF1kbQjQZmVFyRZY8iZNRI2ytGxTllWlSmYdWnYjmCloJzHLQTmNgRMBiPVMKxga2oksqepRIik8sfLMdHVsheDIhwsbLE5Y1QC06OnUGVdeQ+EwsktK+kqeRnk+rRaxjgqfCUMKvW8jJveRpCxj6slcpaLseQUyZmhkBcQLLLDLBlJm5LTBIusHVpXltVkWWLQNlMYeSOEEsKISPhFszatLugWp9013QQbIJLgaoyDhzbbmJIpYWmkySvVp90zqSlRRZYIpv4j75eNExjh5HAytlcrp5SOSWGSQKyXJSYbhi9ZvD75pKJQwAsT4TRE6sXKTK+oMyJEm0g0ZKIEQbiEYyvUaZ0zSUJjHzSKDSSyyCzWWFURRTsRyEwJBkiijAgacG9KNFJZSBGjG9HGik6RabH9HF6ONFEPbJCjCCmIoo0Jti9GI4pCKKUIMiCTyiNFAgYqJAqIooDGNoNoopLGgd4i8eKJjGNSQLxRSXTGRLyBePFIY0RLSN4opLbKGKiRyxRSWBJNIUVYopU0xCNSQZ4oo+JgINEEEUUQwiIIXII0U0Qmf\/\/Z)","ee7f0864":"![image](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRo6krgBihsYXYqSLNZvKXSW9SeXM95VbYiWw&usqp=CAU)","770cd079":"**work on train date**","ea0ab7ce":"# clean data"}}