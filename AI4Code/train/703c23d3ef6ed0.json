{"cell_type":{"dd6abc99":"code","f1543ac8":"code","379296c6":"code","d4305fa1":"code","b1878ef8":"code","7bd2ca21":"code","7d882ef2":"code","08262384":"code","9235f20b":"code","09e90466":"code","a1daacc3":"code","9332e829":"code","a0a1a351":"code","57dc13e4":"code","a2f272a2":"code","d81d7995":"markdown","b61ca1f0":"markdown","c2ed8714":"markdown","320d3b64":"markdown","94480ad3":"markdown","e141f79b":"markdown","fd9c76ac":"markdown","08e52103":"markdown"},"source":{"dd6abc99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1543ac8":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import roc_auc_score","379296c6":"import os\nprint((os.listdir('..\/input\/')))","d4305fa1":"df_train = pd.read_csv('..\/input\/wecrec2020\/Train_data.csv')\ndf_test = pd.read_csv('..\/input\/wecrec2020\/Test_data.csv')","b1878ef8":"df_test.head()","7bd2ca21":"df_train.head()","7d882ef2":"test_index=df_test['Unnamed: 0']","08262384":"df_train.drop(['F1', 'F2'], axis = 1, inplace = True)","9235f20b":"train_X = df_train.loc[:, 'F3':'F17']\ntrain_y = df_train.loc[:, 'O\/P']","09e90466":"rf = RandomForestRegressor(n_estimators=50, random_state=43)","a1daacc3":"rf.fit(train_X, train_y)","9332e829":"df_test = df_test.loc[:, 'F3':'F17']\npred = rf.predict(df_test)","a0a1a351":"print(pred)","57dc13e4":"result=pd.DataFrame()\nresult['Id'] = test_index\nresult['PredictedValue'] = pd.DataFrame(pred)\nresult.head()","a2f272a2":"result.to_csv('output.csv', index=False)\n","d81d7995":"## Fitting the classifier","b61ca1f0":"## Separating the input and output fields","c2ed8714":"## Predicting output for test set","320d3b64":"## Packing it into output file","94480ad3":"## Reading input data","e141f79b":"## Initializing a regression model","fd9c76ac":"## Visualizing input data","08e52103":"### Dropping F1 as it is just index and F2 is datestamp\n"}}