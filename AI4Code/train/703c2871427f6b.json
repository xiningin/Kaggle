{"cell_type":{"73b1d375":"code","13955fac":"code","c0facd19":"code","7c1205e8":"code","22adb560":"code","0794a2a2":"code","bc7063d5":"code","23ad88ab":"code","c24d0a0e":"code","dd2385ac":"code","4aa3873e":"code","04ef7201":"code","0bc5c4ce":"code","f50861e1":"code","65e79477":"code","e842e6e5":"code","3f07d382":"code","8f1483bf":"code","39a6ec1b":"code","2dfc19f8":"code","5f2e0a9a":"code","68e60e03":"code","2e61d317":"code","79c08a02":"code","701d9bc1":"code","0ef28206":"code","09490b53":"code","676fe939":"code","282e1a96":"code","e45cbbe9":"code","51ce0ab7":"code","d57b8897":"code","5e5c8e7e":"code","e87ca520":"code","bcc7a4e9":"markdown","f405e4b3":"markdown","97e72100":"markdown","10e01031":"markdown","799c7bbe":"markdown","fd49673a":"markdown","46d5cd1a":"markdown","2166d60e":"markdown","fe6ba41e":"markdown","0ba644f0":"markdown","34ecc5e5":"markdown","add403ae":"markdown","1e3707d5":"markdown","892a33ff":"markdown","316dcc14":"markdown","8603a217":"markdown","098ddd3c":"markdown"},"source":{"73b1d375":"import numpy as np \nimport pandas as pd\nimport matplotlib.pylab as plt\nimport matplotlib.pyplot as plt2\nimport os\nfrom os import listdir\nfrom os.path import isfile, join\nfrom skimage import io\nfrom PIL import Image \nimport random","13955fac":"# Original size images directories\ndir_2019_images = \"\/kaggle\/input\/siim-isic-2019\/train\/\"\ndir_2020_images = \"\/kaggle\/input\/siimisic2020\/train\/\"\n\n# CSV files\ndf_2019 = pd.read_csv('\/kaggle\/input\/siim-isic-2019\/ISIC_2019_Training_Metadata.csv', delimiter=';')\ngt_2019 = pd.read_csv('\/kaggle\/input\/siim-isic-2019\/ISIC_2019_Training_GroundTruth.csv')\ndf_2020 = pd.read_csv('\/kaggle\/input\/siimisic2020\/train.csv')","c0facd19":"# Add .jpg to image_name\ndef append_ext(filename):\n    if filename[-4:] != \".jpg\":\n        return filename + \".jpg\"\n    else:\n        return filename\n\ndf_2020[\"image_name\"] = df_2020[\"image_name\"].apply(append_ext)\ndf_2019[\"image\"] = df_2019[\"image\"].apply(append_ext)\ngt_2019[\"image\"] = gt_2019[\"image\"].apply(append_ext)","7c1205e8":"df_2020.head()","22adb560":"df_2019.head()","0794a2a2":"gt_2019.head()","bc7063d5":"df_2019.info()","23ad88ab":"df_2020.info()","c24d0a0e":"patient_id_count = df_2020['patient_id'].count()\npatient_id_unique_count = df_2020['patient_id'].value_counts().shape[0]\nprint(\"Total number of patient id:\", patient_id_count, \"| Total unique id:\", patient_id_unique_count)","dd2385ac":"plt.subplot(2, 1, 1)\nplt.tight_layout(pad=3)\ndf_2020.benign_malignant.value_counts().plot.barh(color=['b', 'r'])\nplt.title(\"Dataset 2019\")\n\nplt.subplot(2, 1, 2)\nplt.tight_layout(pad=3)\ngt_2019.MEL.value_counts().plot.barh(color=['b', 'r'])\nplt.title(\"Dataset 2020\")\n\nplt.show()","4aa3873e":"gt_2019.MEL.value_counts().rename_axis('Type').reset_index(name='Total samples')","04ef7201":"df_2020.benign_malignant.value_counts().rename_axis('Type').reset_index(name='Total samples')","0bc5c4ce":"plt.subplot(2, 1, 1)\nplt.tight_layout(pad=3)\ndf_2020.anatom_site_general_challenge.value_counts().plot.barh(color=['b', 'r', 'y', 'g', 'c', 'm'])\nplt.title(\"Dataset 2019\")\n\nplt.subplot(2, 1, 2)\nplt.tight_layout(pad=3)\ndf_2019.anatom_site_general.value_counts().plot.barh(color=['b', 'r', 'y', 'g', 'c', 'm'])\nplt.title(\"Dataset 2020\")\n\nplt.show()","f50861e1":"plt.subplot(1, 2, 1)\nplt.tight_layout(pad=3)\ndf_2020.sex.value_counts().plot.pie(subplots=True, figsize=(11, 6),autopct='%1.1f%%')\nplt.title(\"Dataset 2019\")\n\nplt.subplot(1, 2, 2)\nplt.tight_layout(pad=3)\ndf_2019.sex.value_counts().plot.pie(subplots=True, figsize=(11, 6),autopct='%1.1f%%')\nplt.title(\"Dataset 2020\")\n\nplt.show()","65e79477":"plt.subplot(1, 2, 1)\nplt.tight_layout(pad=3)\ndf_2020.age_approx.hist(bins=len(df_2020['age_approx'].unique()))\nplt.title(\"Dataset 2019\")\n\nplt.subplot(1, 2, 2)\nplt.tight_layout(pad=3)\ndf_2019.age_approx.hist(bins=len(df_2020['age_approx'].unique()))\nplt.title(\"Dataset 2020\")\n\nplt.show()","e842e6e5":"# Returns number of missing values and percentage for each feature\ndef missing_values(df):\n    missing_values = df.isnull().sum()\n    percentage_missing_values = 100 * df.isnull().sum() \/ len(df)\n    missing_values_table = pd.concat([missing_values, percentage_missing_values], axis=1)\n    missing_values_table.columns = ['Missing values', '% of total missing values']\n    missing_values_table = missing_values_table.sort_values(by=['Missing values'], ascending=False)\n    return missing_values_table","3f07d382":"# Delete useless columns\ndf_2020 = df_2020.drop(columns=['diagnosis','benign_malignant'])\ndf_2019 = df_2019.drop(columns=['lesion_id'])\nmissing_values(df_2020), missing_values(df_2019)","8f1483bf":"df_2020 = df_2020.dropna()\ndf_2019 = df_2019.dropna()","39a6ec1b":"# Select columns and join target column\ndf_2019 = df_2019.join(gt_2019['MEL'])\ndf_2019 = df_2019.rename(columns={'image':'image_name', 'anatom_site_general':'anatom_site_general_challenge', 'MEL':'target'})\ndf_2019 = df_2019[['image_name','sex','age_approx', 'anatom_site_general_challenge', 'target']]\n\ndf_2019.head()","2dfc19f8":"df_2020.target.value_counts().rename_axis('Type').reset_index(name='Total samples')","5f2e0a9a":"df_2019.target.value_counts().rename_axis('Type').reset_index(name='Total samples')","68e60e03":"def compute_class_frequences(labels):\n    # Total number of patients (rows)\n    N = labels.shape[0]\n    positive_frequencies = np.sum(labels, axis=0) \/ N\n    negative_frequencies = 1 - positive_frequencies\n    return positive_frequencies, negative_frequencies\n\nlabels_train = df_2020[\"target\"].astype(int).to_numpy()\npositive_frequence_train, negative_frequence_train = compute_class_frequences(labels_train)\n\nlabels_test = df_2019[\"target\"].astype(int).to_numpy()\npositive_frequence_test, negative_frequence_test = compute_class_frequences(labels_test)\n\nprint(\"Frequency of images with melanoma in training set -\", positive_frequence_train)\nprint(\"Frequency of images benign in training set -\", negative_frequence_train)\nprint(\"------------------------------------------------\")\nprint(\"Frequency of images with melanoma in test set -\", positive_frequence_test)\nprint(\"Frequency of images benign in test set -\", negative_frequence_test)","2e61d317":"print(\"Train shape:\", df_2020.shape)\nprint(\"Test shape:\", df_2019.shape)","79c08a02":"def show_images_jpg():\n    row, column = 2, 8\n    fig = plt.figure(figsize=(2*column, 2*row))\n    for _r in range(row):\n        for _c in range(column):\n            plt.subplot(row, column, _r*column + _c +1)\n            ran = random.randint(0, len(df_2019)-1)\n            name = df_2019['image_name'].values[ran]\n            img = io.imread(dir_2019_images + name)\n            plt.imshow(img)\n            plt.axis(False)\n            label = df_2019['target'].values[ran]\n            plt.title(label)\n    plt.show()\n\nshow_images_jpg()","701d9bc1":"name = df_2019['image_name'].values[0]\nimg = Image.open(dir_2019_images + name)\nwidth, height = img.size\nprint(f'Width = {width} | Height = {height}')\nplt.imshow(img)\nplt.axis(False)\n\nplt.show()","0ef28206":"# Scale the image maintaining aspect ratio \nimg.thumbnail((224, 224), Image.ANTIALIAS)\nwidth, height = img.size\nprint(f'Width = {width} | Height = {height}')\nplt.imshow(img)\nplt.axis(False)\n\nplt.show()","09490b53":"def resize_images_jpg(dir_original_images, df, file, x, y):\n    dir_images = '\/kaggle\/working\/' + file + \"\/\" \n    try:\n        os.mkdir('\/kaggle\/working\/' + file)\n        print(\"Directory\", file, \"created\") \n    except FileExistsError:\n        print(\"Directory\", file, \"already exists\")\n        \n    print(\"Resizing images...\")\n    total_images = len(df['image_name'])\n    total_images_resized = 0\n    \n    for image in df['image_name'].values:\n        img = Image.open(dir_original_images + image)\n        img.thumbnail((x, y), Image.ANTIALIAS)\n        img.save(dir_images + image)\n        total_images_resized += 1\n        percentage_resized = (total_images_resized \/ total_images) * 100\n        # Every 1000 images saved, print progress\n        if total_images_resized % 1000 == 0:\n            print(\"Images resized & saved\", percentage_resized, \"%\")\n    print(\"Images resized\")\n\n    \ndef delete_images_jpg(file):\n    try:\n        os.system(f'rm -rf \/kaggle\/working\/{file}')\n        print(f'Directory {file} deleted')\n    except:\n        print(\"Could not delete directory\")","676fe939":"delete_images_jpg(\"train_resized\")\ndelete_images_jpg(\"test_resized\")","282e1a96":"print(\"Trying to resize train images...\")\nresize_images_jpg(dir_2019_images, df_2019, \"train_resized\", 224, 224)","e45cbbe9":"print(\"Trying to resize test images...\")\nresize_images_jpg(dir_2020_images, df_2020, \"test_resized\", 224, 224)","51ce0ab7":"import shutil\n\nshutil.make_archive('train_resized', 'zip', '\/kaggle\/working\/train_resized')\nshutil.make_archive('test_resized', 'zip', '\/kaggle\/working\/test_resized')","d57b8897":"delete_images_jpg(\"train_resized\")\ndelete_images_jpg(\"test_resized\")","5e5c8e7e":"df_2019.to_csv('\/kaggle\/working\/train.csv', index=False)\ndf_2020.to_csv('\/kaggle\/working\/test.csv', index=False)","e87ca520":"import zipfile\n\n# Zip file handler  \nzip_train = zipfile.ZipFile('\/kaggle\/working\/train_resized.zip')\nzip_test = zipfile.ZipFile('\/kaggle\/working\/test_resized.zip')\n\nprint(\"Total original train images:\", len(df_2019['image_name']))\nprint(\"Total resized train images:\", len(zip_train.namelist()))\nprint(\"--------------------------\")\nprint(\"Total original test images:\", len(df_2020['image_name']))\nprint(\"Total resized test images:\", len(zip_test.namelist()))","bcc7a4e9":"#### Se opta por eliminar los registros faltantes ya que son min\u00fasculos.","f405e4b3":"#### Se procede a redimensionar las im\u00e1genes.","97e72100":"#### Observamos como se redimensionar\u00e1 las im\u00e1genes. Se muestra la siguiente imagen como ejemplo:","10e01031":"#### Finalmente, observamos la distribuci\u00f3n de edades.","799c7bbe":"#### Se observa que hay varias imagenes provenientes de cada paciente en el conjunto de datos del 2020.","fd49673a":"#### Se observa que hay un desequilibrio en las partes del cuerpo en el cual se han extra\u00eddo las im\u00e1genes, siendo el m\u00e1s com\u00fan el torso.","46d5cd1a":"#### Finalmente se guardan las im\u00e1genes en carpetas comprimidas y los datos tabulares para la utilizaci\u00f3n en los siguientes notebooks.","2166d60e":"## <font color=red>3. <\/font>Procesamiento de datos","fe6ba41e":"# Exploraci\u00f3n y preprocesamiento de los datos","0ba644f0":"#### Se procede a extraer, eliminar y unir las columnas con el fin de transformar el dataframe y obtener uno id\u00e9ntico al de la competici\u00f3n de 2020.","34ecc5e5":"#### A continuaci\u00f3n, se extrae los datos faltantes del conjunto de entrenamiento y prueba.","add403ae":"#### Se visualiza de qu\u00e9 parte del cuerpo provienen la mayor\u00eda de las im\u00e1genes del conjunto de entrenamiento:","1e3707d5":"## <font color=red>2. <\/font>Exploraci\u00f3n de datos","892a33ff":"#### Se calcula la frecuencia de c\u00e1ncer en cada conjunto de datos:","316dcc14":"## <font color=red>1. <\/font>Cargar las im\u00e1genes y datos tabulares","8603a217":"## <font color=red>4. <\/font> Redimensi\u00f3n de im\u00e1genes","098ddd3c":"#### Al representar el n\u00famero de muestras de cada tipo, observamos que hay m\u00e1s registros benignos que de malignos. Esto es normal ya que en el mundo real la frecuencia de tumores existe m\u00e1s tumores benignos que malignos. Por lo que produce un desequilibrio en ambos conjuntos de datos."}}