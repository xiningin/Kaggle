{"cell_type":{"23de86be":"code","561c193b":"code","90a04667":"code","14793b16":"code","7b467f57":"code","fdd1f644":"code","fc1445cc":"code","b6bca409":"code","9840e1b9":"code","d0ab83f1":"code","5aab2d87":"markdown","569c9b4a":"markdown"},"source":{"23de86be":"THRESHOLD_FOR_PREDICTION = 0.6\nPERCENTILE_TO_KEEP = 95","561c193b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nsub_df = pd.read_csv('..\/input\/lung-opacity-classification-transfer-learning\/submission.csv')\nsub_df['score'] = sub_df['PredictionString'].map(lambda x: float(x[:4]) if isinstance(x, str) else 0)\nsub_df.drop(['PredictionString'], axis=1, inplace=True)\nsub_df['score'].plot.hist()\nsub_df.sample(3)","90a04667":"all_bbox_df = pd.read_csv('..\/input\/lung-opacity-overview\/image_bbox_full.csv')\nall_bbox_df.sample(3)","14793b16":"mini_df = all_bbox_df.\\\n             query('Target==1')[['x', 'y', 'width', 'height', 'boxes']]\nsns.pairplot(mini_df,\n            hue='boxes', \n             plot_kws={'alpha': 0.1})","7b467f57":"all_bbox_df['x'].plot.hist()\nright_box = all_bbox_df.query('x>450')\nleft_box = all_bbox_df.query('y<450')","fdd1f644":"def percentile_box(in_df, pct=95):\n    return (\n        np.percentile(in_df['x'], 100-pct),\n        np.percentile(in_df['y'], 100-pct),\n        np.percentile(in_df['width'], pct),\n        np.percentile(in_df['height'], pct)\n    )","fc1445cc":"right_bbox = percentile_box(right_box, PERCENTILE_TO_KEEP)\nleft_bbox = percentile_box(left_box, PERCENTILE_TO_KEEP)\nprint(right_bbox)\nprint(left_bbox)\nfig, c_ax = plt.subplots(1, 1, figsize = (10, 10))\nc_ax.set_xlim(0, 1024)\nc_ax.set_ylim(0, 1024)\nfor i, (x, y, width, height) in enumerate([right_bbox, left_bbox]):\n    c_ax.add_patch(Rectangle(xy=(x, y),\n                                    width=width,\n                                    height=height, \n                                     alpha = 0.5+0.25*i))","b6bca409":"def proc_score(in_score):\n    out_str = []\n    if in_score>THRESHOLD_FOR_PREDICTION:\n        for n_box in [left_bbox, right_bbox]:\n            out_str+=['%2.2f %f %f %f %f' % (in_score, *n_box)]\n    if len(out_str)==0:\n        return ''\n    else:\n        return ' '.join(out_str)","9840e1b9":"sub_df['PredictionString'] = sub_df['score'].map(proc_score)\nsub_df.sample(5)","d0ab83f1":"sub_df[['patientId','PredictionString']].to_csv('submission.csv', index=False)","5aab2d87":"## Show the boxes\nHere we show the boxes that we predict","569c9b4a":"# Box Guess\nHere we take the predictions made in the [transfer learning](https:\/\/www.kaggle.com\/kmader\/lung-opacity-classification-transfer-learning\/notebook) kernel and refine them into reasonable bounding boxes in order to make a submission.\n- We use the original input bounding boxes as a starting point\n- We divide into left and right lung since they appear to be broken up that way\n- We find the 95th percentile (`PERCENTILE_TO_KEEP`) for each of the parameters $x, y, width, height$\n- We submit two boxes (left and right) for each case above a certain threshold (`THRESHOLD_FOR_PREDICTION`)\n- We make define the two parameters below to make hyperparameter optimization easier"}}