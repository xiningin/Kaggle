{"cell_type":{"a2aa2e4c":"code","df2c87eb":"code","40a9cb58":"code","9e591be1":"code","1b892594":"code","084c4d40":"code","d7f3c5d4":"code","de3cde7f":"code","56a8c043":"code","aa641d95":"code","13129614":"code","2a2b4cc8":"code","cb76c217":"code","b09eb1f0":"code","1710d84a":"code","b3025807":"code","70b19bcb":"code","30354e33":"code","dc830744":"code","04320a01":"code","beba48b3":"code","0821ef15":"code","aaa9caa2":"code","44da4f07":"code","c263d2bb":"code","0d8782dc":"code","fa6c7f84":"markdown","98cab11e":"markdown","d91c7aae":"markdown","8c500597":"markdown","8bf2edec":"markdown"},"source":{"a2aa2e4c":"import os\nimport statsmodels\nimport numpy as np\nimport pandas as pd \nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom matplotlib import pyplot\nfrom numpy import sqrt,mean,log,diff\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","df2c87eb":"pip install pyramid-arima","40a9cb58":"from pyramid.arima import auto_arima","9e591be1":"ggl = pd.read_csv(\"\/kaggle\/input\/amdgoogle\/GOOGL.csv\")","1b892594":"ggl.tail(5)","084c4d40":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=ggl.Date, y=ggl['Open'], name=\"Open\",\n                         line_color='deepskyblue'))\n\nfig.add_trace(go.Scatter(x=ggl.Date, y=ggl['High'], name=\"High\",\n                         line_color='dimgray'))\n\nfig.add_trace(go.Scatter(x=ggl.Date, y=ggl['Low'], name=\"Low\",\n                         line_color='royalblue'))\n\nfig.add_trace(go.Scatter(x=ggl.Date, y=ggl['Close'], name=\"Close\",\n                         line_color='firebrick'))\n\nfig.update_layout(title_text='Time Series with Rangeslider',\n                  xaxis_rangeslider_visible=True)\nfig.show()","d7f3c5d4":"TimeSeries = pd.DataFrame(ggl, columns=[\"Date\",\"Open\",\"Volume\"])","de3cde7f":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n                x=TimeSeries.Date,\n                y=TimeSeries.Volume,\n                name=\"Volume in Time-Stamp\",\n                line_color='deepskyblue',\n                opacity=0.8))\n\nfig.update_layout(xaxis_range=['2009-05-22','2018-08-29'],\n                  title_text=\"Volume on Time-Stamp\")\nfig.show()","56a8c043":"# result = seasonal_decompose(TimeSeries['Open'].values, model='multiplicative', extrapolate_trend='freq', freq=365)\n# result.plot()\n# plt.show();\n\nplt.rcParams.update({'figure.figsize':(10,6), 'figure.dpi':120})\n\ndecomposition = seasonal_decompose(TimeSeries['Open'].values, model='multiplicative', extrapolate_trend='freq', freq=365)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.plot(TimeSeries['Open'].values, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","aa641d95":"Test = np.array(TimeSeries.Open)\nresult = adfuller(Test)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","13129614":"plt.rcParams.update({'figure.figsize':(10,5), 'figure.dpi':120})\ndf = log(Test)\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(df); axes[0, 0].set_title('Original Series')\nplot_acf(df, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(diff(df)); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(diff(df), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(diff(diff(df))); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf( diff(diff(df)), ax=axes[2, 1])\n\nplt.show()","2a2b4cc8":"plt.rcParams.update({'figure.figsize':(8,2), 'figure.dpi':120})\n\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(diff(df)); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(diff(df), ax=axes[1])\n\nplt.show()","cb76c217":"plt.rcParams.update({'figure.figsize':(8,2), 'figure.dpi':120})\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(diff(df)); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(diff(df), ax=axes[1])","b09eb1f0":"data = pd.DataFrame(ggl, columns=[\"Date\",\"Open\"])","1710d84a":"data.Date = pd.to_datetime(data.Date)\ndata = data.set_index('Date')\ndata.head()","b3025807":"train = data.loc['2009-05-22':'2016-12-01']\ntest = data.loc['2016-12-02':]","70b19bcb":"plt.rcParams.update({'figure.figsize':(10,4), 'figure.dpi':120})\ntrain['Open'].plot()\ntest['Open'].plot();","30354e33":"# model = ARIMA(df, order=(1,2,1))\n# model_fit = model.fit(disp=0)\n# print(model_fit.summary())","dc830744":"# results= model_fit.plot_predict(dynamic=False)\n# plt.show()","04320a01":"# stepwise_model = auto_arima(df, start_p=1, start_q=1,\n#                            max_p=3, max_q=3, m=12,\n#                            start_P=0, seasonal=True,\n#                            d=1, D=1, trace=True,\n#                            error_action='ignore',  \n#                            suppress_warnings=True, \n#                            stepwise=True)\n# print(stepwise_model.aic())","beba48b3":"# stepwise_model.fit(train)","0821ef15":"# future_forecast = stepwise_model.predict(n_periods=len(test))","aaa9caa2":"# future_forecast = pd.DataFrame(future_forecast,index = test.index,columns=[\"Open_test\"])\n# pd.concat([test,future_forecast],axis=1).plot();","44da4f07":"# future_forecast = pd.DataFrame(future_forecast,columns=[\"Open\"])\n# future_forecast.plot()\n# plt.rcParams.update({'figure.figsize':(10,4), 'figure.dpi':120})\n# train['Open'].plot()\n# test['Open'].plot();","c263d2bb":"model = auto_arima(df, start_p=3, start_q=3,\n                           max_p=5, max_q=5, m=25,\n                           start_P=1, seasonal=True,\n                           d=1, D=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True, \n                           stepwise=True)\nmodel.fit(train)","0d8782dc":"forecast = model.predict(n_periods=len(test))\nforecast = pd.DataFrame(forecast,index = test.index,columns=['Open_test'])\n\nplt.plot(train, label='Train')\nplt.plot(test, label='Valid')\nplt.plot(forecast, label='Prediction')\nplt.show()","fa6c7f84":"** One Differencing is enough to make the series stationary.**","98cab11e":"**All four channels shown above are close to each other. We can take any one of them in forecasting Analysis. ** \n\n**Also the above series is not stationary as the trendline is keep on increasing **\nWe can check for the Seasonality in the Curve ","d91c7aae":"differencing is required only when the series is non-stationary. Else, no differencing is needed, that is if, d=0.\n\nThe null hypothesis of the ADF test is that the time series is non-stationary. So, if the p-value of the test is less than the significance level (0.05) then you reject the null hypothesis and infer that the time series is indeed stationary.\n\nSo, in our case, if P Value > 0.05 we go ahead with finding the order of differencing.","8c500597":"The seasonal effects are usually adjusted so that they average to 0 for an additive decomposition or they average to 1 for a multiplicative decomposition. In our case the seasonal variation is slightly increasing over time so multiplicative model is prefered in this case. \n\nWe can decompose our Time Series into three components.\n\n1. Trend Component(T(t))\n2. Seasonal Component(S(t))\n3. Residual\/ Noise\/ Irregular Component(R(t))\n\nAditive Model: Y(t) = T(t) + S(t) + R(t)\n\nMultiplicative Model: Y(t) = T(t) x S(t) x R(t)\n\nWhere Y(t) is our Original Time Series.","8bf2edec":"There is a Seasonality Factor which is repeating on an yearly basis. Trend is approximately Linear and Increasing. Overriding residuals can be seen separately in the above figure. "}}