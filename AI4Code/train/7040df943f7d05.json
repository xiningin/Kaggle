{"cell_type":{"2cd1501e":"code","ed268bc5":"code","e98e65da":"code","603b85cd":"code","5cd8b845":"code","d59c04f6":"code","8e0dbfaa":"code","4b6ede30":"code","f1b06021":"markdown","4f4e1501":"markdown","cd749f0e":"markdown","63500ce4":"markdown","3b158e60":"markdown","b2966868":"markdown","2f56ad5c":"markdown"},"source":{"2cd1501e":"import os\nimport ast\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","ed268bc5":"train = pd.DataFrame()\nfor file in os.listdir('..\/input\/train_simplified\/'):\n    train = train.append(pd.read_csv('..\/input\/train_simplified\/' + file, index_col='key_id', nrows=1))","e98e65da":"# You may choose the shape you want.\ndef drawing_to_np(drawing, shape=(64, 64)):\n    # evaluates the drawing array\n    drawing = eval(drawing)\n    fig, ax = plt.subplots()\n    # Close figure so it won't get displayed while transforming the set\n    plt.close(fig)\n    for x,y in drawing:\n        ax.plot(x, y, marker='.')\n        ax.axis('off')        \n    fig.canvas.draw()\n    # Convert images to numpy array\n    np_drawing = np.array(fig.canvas.renderer._renderer)\n    # If you want to take only one channel, you can try somethin like:\n    # np_drawing = np_drawing[:, :, 1]    \n    return cv2.resize(np_drawing, shape) # Resize array","603b85cd":"# One way you could apply the transformation to you dataset.\ntrain['drawing_np'] = train['drawing'].map(drawing_to_np)\ntrain['drawing_np2'] = train['drawing'].apply(drawing_to_np)","5cd8b845":"train.head(10)","d59c04f6":"drawings = [ast.literal_eval(pts) for pts in train['drawing'].head(1).values]\n\nplt.figure(figsize=(10, 10))\nfor i, drawing in enumerate(drawings):\n    plt.subplot(330 + (i+1))\n    for x,y in drawing:\n        plt.plot(x, y, marker='.')\n        plt.axis('off')","8e0dbfaa":"# Function to plot images.\ndef plot_image(image_array):\n    fig2 = plt.figure()\n    ax2 = fig2.add_subplot(111, frameon=False)\n    ax2.imshow(image_array)\n    plt.axis('off')\n    plt.show()\n    print('Image shape:', image_array.shape)\n\nsample_1 = train['drawing_np'].values[0]\nplot_image(sample_1)","4b6ede30":"sample_2 = train['drawing_np2'].values[0]\nplot_image(sample_2)","f1b06021":"### Here I'll show one pretty simple way to convert the \"drawings\" into a numpy array that you can use to train your models.\n\n### Dependencies","4f4e1501":"### Let's look at the new features.\n\nFirst the original drawing","cd749f0e":"Now the drawing with the generated with the function applied with the 2nd form.","63500ce4":"### Load data","3b158e60":"### Applying the function","b2966868":"Now the drawing with the generated with the function applied with the 1st form.","2f56ad5c":"Now you can use your new features to feed your models, good luck!"}}