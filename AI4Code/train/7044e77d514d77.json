{"cell_type":{"c651633e":"code","0da19983":"code","ba21e834":"code","0269c666":"code","56acfcf2":"code","f7c888d5":"code","febb6118":"code","3375bd0a":"code","ade0cdbf":"code","92de9a1a":"code","4995142c":"code","e32e2b96":"code","0ee83d94":"code","b5b9a9ae":"code","ab55c75b":"code","250b92fc":"code","879ec991":"code","8803d623":"code","4c3ca4d0":"code","a2563bb6":"code","2a4db76e":"code","7c07556e":"code","7827b7d2":"code","4bf00525":"code","ef5a3209":"code","d1033363":"code","56c650df":"code","2cbab1c2":"code","1c443b85":"code","208b4c4f":"code","e9d73f0c":"code","b2bd61b0":"code","92db58d4":"code","7f287a03":"code","6a3ca670":"code","d91dedbe":"code","fb240903":"code","902c86b0":"code","5afeffce":"code","8602aa88":"code","e6345cbb":"code","ea81a55d":"code","1162d9c8":"code","f5ad24e3":"code","44224101":"code","49b52ca0":"code","db60e74a":"code","a2820713":"code","957207f6":"code","b2df5fae":"code","6c1dc808":"code","df210c4f":"code","975cca95":"code","c351b2c3":"code","da8bdbec":"code","24485080":"code","732140e7":"code","96d394e4":"code","4fe66722":"code","909e5bcc":"code","969ff381":"code","dc083f90":"code","629eb5c4":"code","650c2c23":"code","7edd332d":"code","7a9b4b26":"code","ede61213":"code","28883579":"code","f68aca12":"code","d69f6b7e":"code","d342796e":"code","3b645539":"code","0be6af78":"markdown","2d53cc49":"markdown","cb9dc2da":"markdown","e987209d":"markdown","a6c9ed5c":"markdown","0d987e04":"markdown","800eaafb":"markdown","fe042898":"markdown","adf33f25":"markdown","6f2640be":"markdown","4775970e":"markdown","88e91c13":"markdown","6056484d":"markdown","5e56b4e8":"markdown","fca4ad04":"markdown","77e23efb":"markdown","5638ecd3":"markdown","a600fdd7":"markdown","9a71ae4e":"markdown","03745588":"markdown","53723e27":"markdown","588e4509":"markdown","42bf2718":"markdown"},"source":{"c651633e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0da19983":"!pip install opencv-python","ba21e834":"# Data Manipulation\nimport pandas as pd\n\n# Numerical Analysis\nimport numpy as np\n\n# Data Visualization\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# Operating System\nimport os\n\n# Deep Learning and Object Detection\nimport tensorflow as tf\nfrom tensorflow import keras\nimport cv2\n\n# Data Extraction\nimport glob\nfrom xml.etree import ElementTree","0269c666":"print('Tensorflow Version: {}'.format(tf.__version__))\nprint('Keras Version: {}'.format(keras.__version__))","56acfcf2":"annotations_directory = '..\/input\/face-mask-detection\/annotations'\nimages_directory = '..\/input\/face-mask-detection\/images'","f7c888d5":"annotations_files = !ls '..\/input\/face-mask-detection\/annotations'\nannotations_files[:10]","febb6118":"images_files = !ls '..\/input\/face-mask-detection\/images'\nimages_files[:10]","3375bd0a":"len(annotations_files), len(images_files)","ade0cdbf":"information = {'xmin': [], 'ymin': [], 'xmax': [], 'ymax': [], 'label': [], 'file': [], 'width': [], 'height': []}\n\nfor annotation in glob.glob(annotations_directory + '\/*.xml'):\n    tree = ElementTree.parse(annotation)\n    \n    for element in tree.iter():\n        if 'size' in element.tag:\n            for attribute in list(element):\n                if 'width' in attribute.tag: \n                    width = int(round(float(attribute.text)))\n                if 'height' in attribute.tag:\n                    height = int(round(float(attribute.text)))    \n\n        if 'object' in element.tag:\n            for attribute in list(element):\n                \n                if 'name' in attribute.tag:\n                    name = attribute.text                 \n                    information['label'] += [name]\n                    information['width'] += [width]\n                    information['height'] += [height] \n                    information['file'] += [annotation.split('\/')[-1][0:-4]] \n                            \n                if 'bndbox' in attribute.tag:\n                    for dimension in list(attribute):\n                        if 'xmin' in dimension.tag:\n                            xmin = int(round(float(dimension.text)))\n                            information['xmin'] += [xmin]\n                        if 'ymin' in dimension.tag:\n                            ymin = int(round(float(dimension.text)))\n                            information['ymin'] += [ymin]                                \n                        if 'xmax' in dimension.tag:\n                            xmax = int(round(float(dimension.text)))\n                            information['xmax'] += [xmax]                                \n                        if 'ymax' in dimension.tag:\n                            ymax = int(round(float(dimension.text)))\n                            information['ymax'] += [ymax]","92de9a1a":"annotations_info_df = pd.DataFrame(information)\nannotations_info_df.head(10)","4995142c":"# Add Annotation and Image File Names\nannotations_info_df['annotation_file'] = annotations_info_df['file'] + '.xml'\nannotations_info_df['image_file'] = annotations_info_df['file'] + '.png'\n\n# Tidy Grammatical Issue\nannotations_info_df.loc[annotations_info_df['label'] == 'mask_weared_incorrect', 'label'] = 'mask_incorrectly_worn'","e32e2b96":"annotations_info_df","0ee83d94":"# Function to Show Actual Image\ndef render_image(image):\n    plt.figure(figsize = (12, 8))\n    plt.imshow(image)\n    plt.show()\n    \n# Function to Convert BGR to RGB\ndef convert_to_RGB(image):\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)","b5b9a9ae":"# Image 737 File Name\nannotations_info_df['image_file'].iloc[0]","ab55c75b":"# Image 737 File Path\nimage_737_path = '..\/input\/face-mask-detection\/images\/' + annotations_info_df['image_file'].iloc[0]\nimage_737_path","250b92fc":"# Read Image 737 Using It's Path\nimage_737 = cv2.imread(image_737_path)\nimage_737","879ec991":"# Display The Image in RGB\nrender_image(convert_to_RGB(image_737))","8803d623":"# Image 737 Annotation\nannotation_737_path = '..\/input\/face-mask-detection\/annotations\/' + annotations_info_df['annotation_file'].iloc[0]\nannotation_737_path","4c3ca4d0":"# Shape of Image 737\nimage_737.shape","a2563bb6":"x = annotations_info_df['xmin'].iloc[0]\ny = annotations_info_df['ymin'].iloc[0]\nwidth = annotations_info_df['xmax'].iloc[0]\nheight = annotations_info_df['ymax'].iloc[0]\n\ncropped_737 = image_737[y:height, x:width]\nrender_image(cropped_737)","2a4db76e":"render_image(convert_to_RGB(cropped_737))","7c07556e":"len(annotations_info_df)","7827b7d2":"annotations_info_df.head(10)","4bf00525":"!ls '..\/input\/face-mask-detection'","ef5a3209":"directory = 'cropped_images'\nparent_directory = '\/kaggle\/working'\npath = os.path.join(parent_directory, directory)\nos.mkdir(path)","d1033363":"!ls '.\/'","56c650df":"# Copy The File Name (Before appending with .png extension)\nannotations_info_df['cropped_image_file'] = annotations_info_df['file']\nannotations_info_df","2cbab1c2":"for i in range(len(annotations_info_df)):\n    # Get The File Path and Read The Image\n    image_filepath = '..\/input\/face-mask-detection\/images\/' + annotations_info_df['image_file'].iloc[i]\n    image = cv2.imread(image_filepath)\n    \n    # Set The Cropped Image File Name\n    annotations_info_df['cropped_image_file'].iloc[i] = annotations_info_df['cropped_image_file'].iloc[i] + '-' + str(i) + '.png'\n    cropped_image_filename = annotations_info_df['cropped_image_file'].iloc[i]\n    \n    # Get The xmin, ymin, xmax, ymax Value (Bounding Box) to Crop Image\n    xmin = annotations_info_df['xmin'].iloc[i]\n    ymin = annotations_info_df['ymin'].iloc[i]\n    xmax = annotations_info_df['xmax'].iloc[i]\n    ymax = annotations_info_df['ymax'].iloc[i]\n\n    # Crop The Image Based on The Values Above\n    cropped_image = image[ymin:ymax, xmin:xmax]\n    \n    # Save Cropped Image\n    cropped_image_directory = os.path.join('.\/cropped_images', cropped_image_filename) \n    cv2.imwrite(cropped_image_directory, cropped_image)","1c443b85":"annotations_info_df","208b4c4f":"cropped_images_files = !ls '.\/cropped_images'\ncropped_images_files[:10]","e9d73f0c":"print('There are {} cropped images in total.'.format(len(cropped_images_files)))","b2bd61b0":"# Image 737 File Name\nannotations_info_df['cropped_image_file'].iloc[0]","92db58d4":"# Image 737 File Path\ncropped_737_0_path = '.\/cropped_images\/' + annotations_info_df['cropped_image_file'].iloc[0]\ncropped_737_0_path","7f287a03":"# Read Image 737 Using It's Path\ncropped_737_0 = cv2.imread(cropped_737_0_path)\ncropped_737_0","6a3ca670":"# Display Image 737 in RGB\nrender_image(convert_to_RGB(cropped_737_0))","d91dedbe":"# Sample Cropped Image Shape\ncropped_737_0.shape","fb240903":"# Data Splitting\ntest_df = annotations_info_df[:800]\ntrain_df = annotations_info_df[800:]\n\n# Check The Shape of Splitted Data (Train and Test)\ntrain_df.shape, test_df.shape","902c86b0":"# Glimpse of Train Data\ntrain_df.head()","5afeffce":"# Number of Categories \/ Labels\nclasses = list(train_df['label'].unique())","8602aa88":"train_df","e6345cbb":"train_df[train_df['file'] == 'maksssksksss139']['label'].unique()","ea81a55d":"image_139_path = '..\/input\/face-mask-detection\/images\/maksssksksss139.png'\nimage_139 = cv2.imread(image_139_path)\nimage_139","1162d9c8":"image_139_rgb = convert_to_RGB(image_139)\nrender_image(image_139_rgb)","f5ad24e3":"image_139_df = train_df[train_df['file'] == 'maksssksksss139']\nimage_139_df","44224101":"with_mask_list, without_mask_list, incorrectly_worn_list = [], [], []\nfor i in range(len(image_139_df)):\n    bounding_box = [image_139_df['xmin'].iloc[i], image_139_df['ymin'].iloc[i],\n                    image_139_df['xmax'].iloc[i], image_139_df['ymax'].iloc[i]]\n    if image_139_df['label'].iloc[i] == 'with_mask':\n        with_mask_list.append(bounding_box)\n    elif image_139_df['label'].iloc[i] == 'without_mask':\n        without_mask_list.append(bounding_box)\n    else:\n        incorrectly_worn_list.append(bounding_box)\n        \nfound_objects_dict = {'With Mask': with_mask_list, \n                      'Without Mask': without_mask_list, \n                      'Incorrectly Worn': incorrectly_worn_list}\nfound_objects_dict","49b52ca0":"for key, value in found_objects_dict.items():\n    for i in range(len(value)):\n        color = (0, 255, 0) # green\n        text = 'Mask'\n        if key == 'Without Mask':\n            color = (255, 0, 0) # red\n            text = 'No Mask'\n        elif key == 'Incorrectly Worn':\n            color = (255, 255, 0) # yellow\n            text = 'Incorrect'\n        start_point = (value[i][0], value[i][1])\n        end_point = (value[i][2], value[i][3])\n        cv2.rectangle(image_139_rgb, start_point, end_point, color = color, thickness = 2)\n        cv2.putText(image_139_rgb, org = (value[i][0] - 8, value[i][1] - 3), text = text, \n                    fontFace = cv2.FONT_HERSHEY_SIMPLEX, fontScale = 0.5, color = color)","db60e74a":"render_image(image_139_rgb)","a2820713":"# Count Occurence of Labels\ntrain_df['label'].value_counts()","957207f6":"sorted_label_df = pd.DataFrame(train_df['label'].value_counts()).reset_index()\nsorted_label_df.rename(columns = {'index': 'label', 'label': 'count'}, inplace = True)\nsorted_label_df","b2df5fae":"plt.style.use('seaborn')\nplt.figure(figsize = (8, 6))\nbarplot = sns.barplot(x = 'count', y = 'label', data = sorted_label_df, orient = 'horizontal', \n                      palette = ['green', 'red', 'yellow'])\nplt.title('Distribution of Labels', fontsize = 20, fontweight = 'bold')\nplt.xlabel('Count', fontsize = 15, fontweight = 'bold')\nplt.ylabel('Label', fontsize = 15, fontweight = 'bold')\n\nfor p in barplot.patches:\n    width = p.get_width()\n    percentage = round(width * 100 \/ sum(sorted_label_df['count']), 2)\n    plt.text(x = width + 15, y = p.get_y() + 0.55 * p.get_height(), s = f'{int(width)}\\n({percentage} %)')\n\nplt.show()","6c1dc808":"cropped_image_path = '.\/cropped_images\/' + train_df['cropped_image_file'].iloc[0]\ncropped_image = cv2.imread(cropped_image_path)\ncropped_image.shape","df210c4f":"cropped_image.shape[0]","975cca95":"image_width = []\nimage_height = []\nfor i in range(len(train_df)):\n    cropped_image_path = '.\/cropped_images\/' + train_df['cropped_image_file'].iloc[i]\n    cropped_image = cv2.imread(cropped_image_path)\n    image_width.append(cropped_image.shape[0])\n    image_height.append(cropped_image.shape[1])","c351b2c3":"sns.histplot(image_width, kde = True)\nplt.title('Image Width Distribution', fontsize = 16, fontweight = 'bold')\nplt.xlabel('Image Width', fontweight = 'bold')\nplt.ylabel('Count', fontweight = 'bold')\nplt.show()","da8bdbec":"sns.histplot(image_height, kde = True)\nplt.title('Image Height Distribution', fontsize = 16, fontweight = 'bold')\nplt.xlabel('Image Height', fontweight = 'bold')\nplt.ylabel('Count', fontweight = 'bold')\nplt.show()","24485080":"print('IMAGE WIDTH')\nprint(f'Min: {min(image_width)}')\nprint(f'Max: {max(image_width)}')\nprint(f'Mean: {np.mean(image_width)}')\nprint(f'Median: {np.median(image_width)}')\nprint('IMAGE HEIGHT')\nprint(f'Min: {min(image_height)}')\nprint(f'Max: {max(image_height)}')\nprint(f'Mean: {np.mean(image_height)}')\nprint(f'Median: {np.median(image_height)}')","732140e7":"image_target_size = (int(np.median(image_width)), int(np.median(image_height)))\nimage_target_size","96d394e4":"from keras_preprocessing.image import ImageDataGenerator\n\ntrain_image_generator = ImageDataGenerator(rescale = 1. \/ 255., validation_split = 0.25)\n\ntrain_generator = train_image_generator.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '.\/cropped_images',\n    x_col = 'cropped_image_file',\n    y_col = 'label',\n    subset = 'training',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = image_target_size\n)\n\nvalid_generator = train_image_generator.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '.\/cropped_images',\n    x_col = 'cropped_image_file',\n    y_col = 'label',\n    subset = 'validation',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = image_target_size\n)","4fe66722":"test_image_generator = ImageDataGenerator(rescale = 1. \/ 255.)\n\ntest_generator = train_image_generator.flow_from_dataframe(\n    dataframe = test_df,\n    directory = '.\/cropped_images',\n    x_col = 'cropped_image_file',\n    y_col = 'label',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = image_target_size\n)","909e5bcc":"print(train_generator)\nprint(valid_generator)\nprint(test_generator)","969ff381":"input_shape = [int(np.median(image_width)), int(np.median(image_height)), 3]","dc083f90":"model_1 = keras.models.Sequential([\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu', \n                        input_shape = input_shape),\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = 2, padding = 'valid'),\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu'),\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = 2, padding = 'valid'),\n    keras.layers.Flatten(),\n    keras.layers.Dense(units = len(classes), activation = 'softmax')\n])","629eb5c4":"model_1.compile(loss = 'categorical_crossentropy',\n                optimizer = keras.optimizers.Adam(),\n                metrics = ['accuracy', keras.metrics.Recall()])\n\nhistory_1 = model_1.fit(train_generator, epochs = 10, steps_per_epoch = len(train_generator), \n                        validation_data = valid_generator, validation_steps = len(valid_generator))","650c2c23":"result_1 = pd.DataFrame(history_1.history)\nresult_1","7edd332d":"result_1.plot()","7a9b4b26":"def plot_line(result, ax, col, title, train_column, valid_column):\n    # Line Plot of Model Performance\n    ax[col].plot(result[train_column])\n    ax[col].plot(result[valid_column])\n    \n    # Title and Legend\n    ax[col].set_title(title, fontweight = 'bold')\n    ax[col].legend(['Train', 'Validation'])\n    \ndef plot_result(result, train_recall, valid_recall):\n    # Create a 1x3 Grid and Set Main Title\n    fig, ax = plt.subplots(nrows = 1, ncols = 3, figsize = (17, 8))\n    fig.suptitle('Model Performance', fontsize = 20, fontweight = 'bold')\n    \n    # Visualization of Accuracy, Recall, and Loss\n    plot_line(result, ax, 0, 'Accuracy', 'accuracy', 'val_accuracy')\n    plot_line(result, ax, 1, 'Recall', train_recall, valid_recall)\n    plot_line(result, ax, 2, 'Loss', 'loss', 'val_loss')\n    plt.show()","ede61213":"plot_result(result_1, 'recall', 'val_recall')","28883579":"model_2 = keras.models.Sequential([\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu', input_shape = input_shape),\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = 2, padding = 'valid'),\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu'),\n    keras.layers.Conv2D(filters = 10, kernel_size = 3, activation = 'relu'),\n    keras.layers.MaxPool2D(pool_size = 2, padding = 'valid'),\n    keras.layers.Flatten(),\n    keras.layers.Dense(units = len(classes), activation = 'softmax')\n])","f68aca12":"model_2.compile(loss = 'categorical_crossentropy',\n                optimizer = keras.optimizers.Adam(),\n                metrics = ['accuracy', keras.metrics.Recall()])\n\ncallbacks = [keras.callbacks.EarlyStopping()]\n\nhistory_2 = model_2.fit(train_generator, epochs = 100, steps_per_epoch = len(train_generator), \n                        validation_data = valid_generator, validation_steps = len(valid_generator),\n                        callbacks = callbacks)","d69f6b7e":"result_2 = pd.DataFrame(history_2.history)\nresult_2","d342796e":"result_2.plot()","3b645539":"plot_result(result_2, 'recall_1', 'val_recall_1')","0be6af78":"Let's take Image 737 again (the image in the zeroth index), and display the cropped image. ","2d53cc49":"# Create a New Directory For Cropped Images\n\nIn this section, we are going to crop all images and save them into a new directory. The main reason is that in the next steps, we will use Keras' ImageDataGenerator (in the preprocessing step). But first it's better for us to create a new directory that can save all the cropped images.","cb9dc2da":"# Install and Import Libraries\n\nIn order to get started, we must import all required libraries. This project is about face mask detection, so first we need to install the OpenCV library, one of the most common library for object detection.","e987209d":"# Crop Images\n\nSince there are multiple labels in an image (caused by more than 1 person in an image), we need to crop the image into several images that only consist of 1 person. We can use one of the images (ex: `image_737`) as our sample to make sure that we can crop images in a correct way.\n\nWe need xmin, ymin, xmax, and ymax values so that we can crop the image within the bounding box.","a6c9ed5c":"# Notes\n\nThis project uses the Face Mask Detection dataset by Larxel (andrewmvd) from Kaggle. You can check the dataset link here: https:\/\/www.kaggle.com\/andrewmvd\/face-mask-detection\n\nThis notebook is the simple version of face mask detection. The final work can be found here:\nhttps:\/\/github.com\/bluewarrior-soda\/Algorithm-Bootcamp-Scholarship\/tree\/main\/Personal%20Projects\/Deep%20Learning%20Final%20Project","0d987e04":"After the `.\/cropped_images` directory is created, now we can insert all cropped images to that directory. We can simply run a loop to crop all images.","800eaafb":"# Feature Engineering","fe042898":"# Check If Label Is Right\n\nImage 737 (`maksssksksss737.png`) is labeled with several categories, we can simply check the actual image to see if the labels are right.","adf33f25":"In this example, we cropped the leftmost person in `image_737` (the full image is a couple of cells above). Now let's display the image in RGB form.","6f2640be":"Now, we already know the way to crop a single image. We need to apply this to all images in the dataframe. So, there will be around 4072 cropped images so the **\"multiple label in an image\"** problem is solved.","4775970e":"# Data Extraction","88e91c13":"# Adding Cropped Images Into New Directory","6056484d":"# Adding Early Stopping Callback","5e56b4e8":"# Train Test Split\n\nBefore proceeding into next steps, it's better for us to split the full data into training and testing data. For the testing (unseen) data, I will just take around 25% of the full dataset, and the rest are in the training data.","fca4ad04":"# Exploratory Data Analysis (EDA)\n\nIn Exploratory Data Analysis process, we only use the training dataset. Let's do a simple object detection to classify if the person in a image are with mask, without mask, or wear mask in incorrect way.","77e23efb":"=====================","5638ecd3":"# Modelling","a600fdd7":"**This notebook is still far from excellence, so any advice or suggestion will be highly valued. Don't hesitate to comment or cast an upvote if you find notebook this helpful :)**","9a71ae4e":"We can see that there are two folders in the `..\/input\/face-mask-detection`. However, we can't create a new directory inside this `..\/input\/face-mask-detection` or even `..\/input` directory since they are read-only. So, we can add a new folder named `cropped_images` into the output directory (`\/kaggle\/working`).","03745588":"# Check If Cropped Images Are Successfully Saved to Directory\n\nWe have saved the cropped images into the `.\/cropped_images` directory. Now let's check if we can read \/ access one of the cropped images to make sure it's working properly.","53723e27":"I have to give my credit for **stpete_ishii** on Kaggle for the notebook that helps me get information from the `.xml` files.\n\nCheck out the notebook here:\nhttps:\/\/www.kaggle.com\/stpeteishii\/face-mask-get-annotation-info-from-xml","588e4509":"# Image Data Generator","42bf2718":"The image is in NumPy array form, to view the actual image, we simply use the `render_image()` function that we've defined earlier and convert it to RGB."}}