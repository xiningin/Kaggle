{"cell_type":{"ff5b8c87":"code","bbe6b596":"code","4fa303ad":"code","dcf1deea":"code","21542688":"code","5e6a74b9":"code","4df2cd21":"code","4b1a3074":"code","a05b8e21":"code","5de612e7":"code","1d7c4d16":"code","3ff63c73":"code","926e9572":"code","48f0af3e":"code","ca6aec7e":"code","f8c03d0d":"code","f859cab6":"code","a962c098":"code","468fe845":"code","19c031f7":"code","8c22de4d":"code","8b01f695":"code","8f126b7e":"code","0eaa1ed5":"code","5a585efa":"code","b3968e45":"code","01094d36":"code","56dc8000":"code","fee1b562":"code","78179137":"code","fddd6884":"code","1d2985aa":"code","13ffc95d":"code","9b18e254":"code","8c6112f4":"code","9b4a013e":"code","9a428e63":"code","7a37cc1f":"code","478112f9":"code","f23f2910":"code","dd483a72":"code","5ae75dab":"code","b608f6b1":"code","b6067238":"code","b86a226b":"code","fbb553c9":"code","df3571e0":"code","dc6aa4d8":"code","bb9d390f":"code","948420e6":"code","0b019871":"code","8dd80616":"code","fb02102d":"code","383930e8":"code","499a6b4a":"code","5851383b":"code","385bfef7":"code","a58fc3b1":"code","77135554":"code","518c5e6b":"code","4263a510":"code","a4ff94cf":"code","730b76f2":"code","f8d6f64a":"code","bca04e3e":"code","6e4ed08f":"code","21ca9c48":"code","ac8a24ad":"code","1f2d9bc4":"code","7624423b":"code","82a6563f":"code","8f359711":"code","18933919":"code","a639219c":"code","a25e17e6":"code","1a0942c7":"code","755e47a8":"code","e828d03e":"markdown","aababfc6":"markdown"},"source":{"ff5b8c87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbe6b596":"import pandas as pd\nfrom pandas import Series\nimport pandas as pd\nimport numpy as np\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV","4fa303ad":"train = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')\n","dcf1deea":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 ","21542688":"print(train.shape)\nprint(test.shape)","5e6a74b9":" #\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043e\u0434\u043d\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0432 \u0442\u0435\u0441\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442","4df2cd21":"\n#\u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u043d\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \n#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c \u0433\u0434\u0435 \u0442\u0435\u0441\u0442, \u0430 \u0433\u0434\u0435 \u0442\u0440\u0435\u0439\u043d\ntrain['Train'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['Train'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442","4b1a3074":"#\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b\nbank = train.append(test, sort=False).reset_index(drop=True) \n","a05b8e21":"bank.isna().sum()","5de612e7":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\nbank.head(-2)","1d7c4d16":"#\u0438\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nbank.info()","3ff63c73":"#\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430\u0448\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols = ['education', 'home_address', 'work_address', 'sna', 'first_time']\n\n# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nnum_cols = ['age', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'region_rating', 'income']\n\n#client_id \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u043b\u0438 \u043d\u0438 \u0432 \u043e\u0434\u0438\u043d \u0441\u043f\u0438\u0441\u043e\u043a, \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u043e\u0432\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","926e9572":"#\u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043f\u043e\u043b\u044f\u0445 education \u0438 default","48f0af3e":"\nsns.heatmap(bank.isnull())","ca6aec7e":"for col in bank.columns:\n    pct_missing = np.mean(bank[col].isnull())\n    print('{} - {}%'.format(col, pct_missing*100))","f8c03d0d":"bank.education.value_counts().plot.bar()","f859cab6":"#\u0437\u0430\u043f\u043e\u043b\u043d\u044e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 education \u0441\u0430\u043c\u043e\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0435\u0439 school, \u0442.\u043a. \u043c\u043e\u0436\u043d\u043e \n#\u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0447\u0442\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0435 \u0438\u043c\u0435\u0435\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\nbank.education.fillna('SCH', inplace=True)","a962c098":"#\u043f\u0440\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0434\u0435\u0444\u043e\u043b \u043d\u0435 \u0431\u044b\u043b\u043e,\n#\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043d\u0443\u043b\u0438\nbank.default.fillna(0, inplace=True)","468fe845":"bank.head(-2)","19c031f7":"display(bank[bin_cols])","8c22de4d":"# \u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    bank[column] = label_encoder.fit_transform(bank[column])\n","8b01f695":"  # \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndisplay(bank[bin_cols])","8f126b7e":"display(bank[cat_cols])","0eaa1ed5":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \"education\"\nlabel_encoder = LabelEncoder()\nbank['education'] = pd.Series(label_encoder.fit_transform(bank['education']))","5a585efa":"display(bank[cat_cols])","b3968e45":"#\u043f\u043e\u043c\u0435\u043d\u044f\u044e \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442\u044b\n\nbank.app_date = pd.to_datetime(bank.app_date, format='%d%b%Y')","01094d36":"#\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0434\u0435\u043d\u044c\n\nbank['numbers'] = bank.groupby(['app_date'])['default'].transform('count')","56dc8000":"app_number=bank.groupby(['app_date'])['default'].transform('count')","fee1b562":"bank","78179137":"def_day = bank['app_date'][(bank['Train']==1) & (bank['default'] == 1)].value_counts()#.transform('len')","fddd6884":"def_day.to_dict","1d2985aa":"bank['def_a_day']=bank['app_date'].replace(to_replace=def_day.to_dict())\nbank","13ffc95d":"bank['def_propor']=bank['def_a_day']\/bank['numbers']","9b18e254":"bank.drop(['numbers','def_a_day'],axis=True)","8c6112f4":"#\u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']","9b4a013e":"#\u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnum_cols = ['age','def_propor', 'decline_app_cnt', 'score_bki', 'bki_request_cnt', 'region_rating', 'income']","9a428e63":"start=bank.app_date.min()\nend = bank.app_date.max()\nstart,end","7a37cc1f":"# \u0412\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f \u0441 1 \u044f\u043d\u0432\u0430\u0440\u044f\nbank['days'] = (bank.app_date - start).dt.days.astype('int')","478112f9":"#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u0441 1 \u044f\u043d\u0432\u0430\u0440\u044f \u0432 \u0434\u0435\u043d\u044c\nbank['app_a_day']=bank['days']\/bank['numbers']","f23f2910":"#\u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnum_cols = ['age','def_propor', 'app_a_day','decline_app_cnt', 'score_bki', 'bki_request_cnt', 'region_rating', 'income']","dd483a72":"bank[num_cols].corr()\n#\u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043b\u0430\u0431\u043e \n#\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439, \u044d\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","5ae75dab":"sns.heatmap(bank[num_cols].corr().abs(), vmin=0, vmax=1)","b608f6b1":"bank.isna().sum()","b6067238":"bank[num_cols].head()","b86a226b":"bank[cat_cols].head()","fbb553c9":"bank[bin_cols].head()","df3571e0":"for i in num_cols:\n   \n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n    bank[i].hist(bins=20)\n    plt.title(i)\n    plt.show()","dc6aa4d8":" #\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \"decline_app_cnt\" \"score_bki\"\u0431 \"region_rating\" \n  #  \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 - \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \n  #  \u043a\u043e\u0440\u043d\u044f \u043d\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c.","bb9d390f":"# \u0437\u0430\u043c\u0435\u043d\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\nbank['age'] = np.log(bank['age']+1)\nbank['bki_request_cnt'] = np.log(bank['bki_request_cnt']+1)\nbank['income'] = np.log(bank['income']+1)","948420e6":"bank.isna().sum()","0b019871":"bank.income.hist(bins=100)","8dd80616":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n# \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train\nimp_cat = Series(mutual_info_classif(bank[bank['Train'] == 1][bin_cols + cat_cols], bank[bank['Train'] == 1]['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","fb02102d":"# \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\nbank_train = bank[bank['Train'] == 1]\nbank_train = bank_train.drop(['client_id', 'app_date', 'Train','numbers','days'], axis=1)","383930e8":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndisplay(bank_train.head(5))","499a6b4a":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c One-Hot Encoding\nbank_train_cat = OneHotEncoder(sparse = False).fit_transform(bank_train[cat_cols].values)","5851383b":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\nbank_train_cat","385bfef7":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbank_train_num = StandardScaler().fit_transform(bank_train[num_cols].values)","a58fc3b1":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e\nX = np.hstack([bank_train_num, bank_train[bin_cols].values, bank_train_cat])\ny = bank_train['default'].values","77135554":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","518c5e6b":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprobs = model.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","4263a510":"# \u0438\u0449\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\nmodel = LogisticRegression()\nparam_grid = [\n    {'penalty': ['l1'], \n     'solver': ['liblinear', 'lbfgs'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr']}, \n    {'penalty': ['l2'], \n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr']}, \n    {'penalty': ['none'], \n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr']} \n]\ngridsearch = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1)\ngridsearch.fit(X_train, y_train)\nmodel = gridsearch.best_estimator_\n## \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nbest_parameters = model.get_params()\nfor param_name in best_parameters:\n        print(param_name, best_parameters[param_name], '\\n')","a4ff94cf":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 (X_train, y_train) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_train_probs = model.predict_proba(X_train)\ny_train_probs = y_train_probs[:,1]\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, y_train_probs)\nroc_auc_train = roc_auc_score(y_train, y_train_probs)","730b76f2":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 (X_test, y_test) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_test_probs = model.predict_proba(X_test)\ny_test_probs = y_test_probs[:,1]\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, y_test_probs)\nroc_auc_test = roc_auc_score(y_test, y_test_probs)","f8d6f64a":"# \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr_train, tpr_train, label = 'Train')\nplt.plot(fpr_test, tpr_test, label = 'Test')\nplt.title('Logistic Regression ROC AUC Train = {a} \\n Logistic Regression ROC AUC Test = {b}'\n          .format(a = roc_auc_train.round(3), b = roc_auc_test.round(3)))\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","bca04e3e":"# \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u043e\u0432\u043e\u0439\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","6e4ed08f":"# \u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nnew_model = LogisticRegression(random_state = None, \n                               C = 1, \n                               class_weight = 'balanced', \n                               dual = False, \n                               fit_intercept = True, \n                               intercept_scaling = 1, \n                               l1_ratio = None, \n                               max_iter = 100, \n                               multi_class = 'auto', \n                               n_jobs = None, \n                               penalty = 'l1', \n                               solver = 'liblinear', \n                               tol = 0.0001,\n                               verbose = 0, \n                               warm_start = False)\nnew_model.fit(X_train, y_train)","21ca9c48":"#\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0449\u0435\u0439 (X_train, y_train) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_train_probs = new_model.predict_proba(X_train)\ny_train_probs = y_train_probs[:,1]\nfpr_train, tpr_train, threshold_train = roc_curve(y_train, y_train_probs)\nroc_auc_train = roc_auc_score(y_train, y_train_probs)","ac8a24ad":"# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 (X_test, y_test) \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ny_test_probs = new_model.predict_proba(X_test)\ny_test_probs = y_test_probs[:,1]\nfpr_test, tpr_test, threshold_test = roc_curve(y_test, y_test_probs)\nroc_auc_test = roc_auc_score(y_test, y_test_probs)","1f2d9bc4":"# \u0441\u0442\u0440\u043e\u0438 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr_train, tpr_train, label = 'Train')\nplt.plot(fpr_test, tpr_test, label = 'Test')\nplt.title('Logistic Regression ROC AUC Train = {a} \\n Logistic Regression ROC AUC Test = {b}'\n          .format(a = roc_auc_train.round(3), b = roc_auc_test.round(3)))\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","7624423b":"# \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 data\nbank_test = bank[bank['Train'] == 0]\nbank_test = bank_test.drop(['client_id', 'app_date', 'Train'], axis=1)","82a6563f":"# \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbank_test_num = StandardScaler().fit_transform(bank_test[num_cols].values)","8f359711":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u043c One-Hot Encoding\nbank_test_cat = OneHotEncoder(sparse = False).fit_transform(bank_test[cat_cols].values)","18933919":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e\nX = np.hstack([bank_test_num, bank_test[bin_cols].values, bank_test_cat])","a639219c":"# \u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0441\u0447\u0435\u0442\ny = new_model.predict_proba(X)\ny = y[:,1]","a25e17e6":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nsubmit = pd.DataFrame(test.client_id)","1a0942c7":"# \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u0430\u0440\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 default\nsubmit['default'] = y","755e47a8":"# \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0432 \u0444\u0430\u0439\u043b\nsubmit.to_csv('submission.csv', index=False)","e828d03e":"**\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","aababfc6":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"}}