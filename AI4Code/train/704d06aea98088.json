{"cell_type":{"96b9749b":"code","483c9d5a":"code","c8442ac5":"code","70b2f330":"code","c5209914":"code","0d9f611f":"code","afd76a4d":"code","5dcaa289":"code","7229ad9d":"code","c3b6c1ef":"code","315c8b97":"code","2343b958":"code","285784c8":"code","859c778d":"markdown","69bc7cd1":"markdown","1873252c":"markdown","8707db3d":"markdown","8de4914c":"markdown","30f0505d":"markdown","91706aaa":"markdown"},"source":{"96b9749b":"# IMPORTING Libraries\n\nimport numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","483c9d5a":"# Loading DATASET into DATAFRAME\ndf = pd.read_csv('\/kaggle\/input\/white-wine-quality\/winequality-white.csv',sep=';')\nprint(df.shape)\ndf.head()","c8442ac5":"# Checking NULL vals\nprint('Null vals:',df.isnull().sum().sum())\ndf.info()","70b2f330":"df['quality label'] = df['quality'].apply(lambda x: 'low' if x<=5 else 'medium' if x<=7 else 'high')\nprint(df[['quality','quality label']].value_counts().sort_index())\ndf.head()","c5209914":"round(df.describe(),2)","0d9f611f":"df.hist(bins=15,linewidth=1,figsize=(7,5),grid=0)\nplt.tight_layout()","afd76a4d":"plt.subplots(figsize=(11,7))\nsns.heatmap(df.corr(),annot=True,fmt='.2f',linewidths=0.3,linecolor='white')","5dcaa289":"req_cols = df.columns[:-2].values\nf,ax1 = plt.subplots(4,3,figsize=(14,9))\ncounter=0\nfor r in range(4):\n    for c in range(3):\n        if counter >10:\n            continue\n        sns.histplot(data=df,x=req_cols[counter],hue='quality label',stat='percent',multiple='stack',ax=ax1[r][c])\n        counter+=1\nf.tight_layout()","7229ad9d":"# sns.pairplot(df,hue='quality label')","c3b6c1ef":"# SCaling\n\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\n\nencoder = LabelEncoder()\ndf['quality label'] = encoder.fit_transform(df['quality label'])\n\nX = df.drop('quality',axis=1)\ny = df.quality\n\nscaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","315c8b97":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","2343b958":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import r2_score,mean_squared_error\n\nmodel_rfc = RandomForestClassifier()\nmodel_rfc.fit(X_train,y_train)\ny_pred = model_rfc.predict(X_test)\n\nprint('R2:',r2_score(y_test,y_pred))\nprint('MSE:',mean_squared_error(y_test,y_pred))","285784c8":"print('Accuracy:',model_rfc.score(X_test,y_test))","859c778d":"### Descriptive Statistics","69bc7cd1":"## Modeling","1873252c":"## EDA","8707db3d":"### Multivariate Analysis","8de4914c":"# White wine Quality Classification","30f0505d":"## Preprocessing","91706aaa":"### Univariate Analysis"}}