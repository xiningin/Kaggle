{"cell_type":{"5c0df761":"code","f6cec0d6":"code","abebf70b":"code","af972d72":"code","e887fe17":"code","bcc32952":"code","550a4067":"code","3ebbf5eb":"code","54c2eeaf":"code","50d3dc0b":"code","0967a2a4":"code","8376f3b4":"code","eae25732":"code","f1285310":"code","69744326":"code","cfcdcbd9":"code","61ec8a47":"markdown","c4e693cc":"markdown","cc8e580d":"markdown","51ace7c2":"markdown","e665952c":"markdown","d0766ce9":"markdown","8b2c2492":"markdown","b12b9e30":"markdown","8952a20c":"markdown","7f250da4":"markdown","93b4ac04":"markdown","14ad4a8c":"markdown","8dda4a76":"markdown","1f81eb10":"markdown","72a633d5":"markdown"},"source":{"5c0df761":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n!pip install openpyxl\n!pip install dash_bio\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6cec0d6":"data=pd.read_excel(\"..\/input\/cve-and-cwe-mapping-dataset\/Global_Dataset.xlsx\" )","abebf70b":"year_list=[]\nfor i in range(0,len(data[\"CVE-ID\"])):\n    a=data[\"CVE-ID\"][i].split(\"-\")[1]\n    year_list.append(a)\n\ndata.insert(loc=2, column='Year', value=year_list)\ndata.info()","af972d72":"import plotly.graph_objects as go\ndataN=data.head(10)\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=dataN.columns,\n                line_color='darkslategray',\n                fill_color='indianred',\n                align='left'),\n    cells=dict(values=[dataN.ID, dataN[\"CVE-ID\"], dataN.Year, dataN[\"CVSS-V3\"],dataN[\"CVSS-V2\"],dataN.SEVERITY,dataN.DESCRIPTION,dataN[\"CWE-ID\"]], # 2nd column\n               line_color='darkslategray',\n               fill_color='mistyrose',\n               align='left'))\n])\n\nfig.update_layout(width=1000, height=1000)\nfig.show()","e887fe17":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (20,10)\nsns.set_theme(style=\"darkgrid\")\n\nax = sns.countplot(x=\"Year\", data=data,palette=\"hls\")\nax.set_title(\"Vulnerabilities By Year\")\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.xticks(rotation=90)\nplt.show()","bcc32952":"\nplt.rcParams[\"figure.figsize\"] = (20,10)\nsns.set_theme(style=\"darkgrid\")\n\nax = sns.countplot(x=\"Year\", data=data,palette=\"Set3\",hue=\"SEVERITY\")\nax.set_title(\"Vulnerabilities By Year And Severity\")\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\nplt.xticks(rotation=90)\nplt.show()","550a4067":"from PIL import Image\nfrom wordcloud import WordCloud,STOPWORDS\nwave_mask= np.array(Image.open(\"..\/input\/skullll\/sk.png\"))\ntext = \" \".join(desc for desc in data.DESCRIPTION)\nstopwords = set(STOPWORDS)\nstopwords.update([\"will\",\"announcing\",\"via\",\"none\"])\nword_cloud = WordCloud(mask=wave_mask, background_color = 'black',colormap=\"gist_ncar\",contour_width=1, stopwords=stopwords,contour_color=\"black\").generate(text)\nplt.rcParams[\"figure.figsize\"] = (15,15)\nplt.imshow(word_cloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","3ebbf5eb":"dataHD=pd.read_excel(\"..\/input\/cve-and-cwe-mapping-dataset\/Hardware Design\/HD_Vulnerability_Dataset.xlsx\")","54c2eeaf":"year_list=[]\nfor i in range(0,len(dataHD[\"CVE-ID\"])):\n    a=dataHD[\"CVE-ID\"][i].split(\"-\")[1]\n    year_list.append(a)\n\ndataHD.insert(loc=2, column='Year', value=year_list)","50d3dc0b":"df2011=dataHD[dataHD.Year==\"2011\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2012=dataHD[dataHD.Year==\"2012\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2013=dataHD[dataHD.Year==\"2013\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2014=dataHD[dataHD.Year==\"2014\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2015=dataHD[dataHD.Year==\"2015\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2016=dataHD[dataHD.Year==\"2016\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2017=dataHD[dataHD.Year==\"2017\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2018=dataHD[dataHD.Year==\"2018\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2019=dataHD[dataHD.Year==\"2019\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2020=dataHD[dataHD.Year==\"2020\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2021=dataHD[dataHD.Year==\"2021\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()\ndf2022=dataHD[dataHD.Year==\"2022\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()","0967a2a4":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport plotly.express as px\nfig = make_subplots(rows=3, cols=4,  subplot_titles=(\"2011\", \"2012\", \"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\"),\n                    specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}],[{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"}],[{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(labels=df2011[\"index\"].values, values=df2011[\"CWE-NAME\"].values,name=2011 ) ,row=1, col=1)\nfig.add_trace(go.Pie(labels=df2012[\"index\"].values, values=df2012[\"CWE-NAME\"].values,name=2012) ,row=1, col=2)\nfig.add_trace(go.Pie(labels=df2013[\"index\"].values, values=df2013[\"CWE-NAME\"].values,name=2013) ,row=1, col=3)\nfig.add_trace(go.Pie(labels=df2014[\"index\"].values, values=df2014[\"CWE-NAME\"].values,name=2014) ,row=1, col=4)\nfig.add_trace(go.Pie(labels=df2015[\"index\"].values, values=df2015[\"CWE-NAME\"].values,name=2015) ,row=2, col=1)\nfig.add_trace(go.Pie(labels=df2016[\"index\"].values, values=df2016[\"CWE-NAME\"].values,name=2016) ,row=2, col=2)\nfig.add_trace(go.Pie(labels=df2017[\"index\"].values, values=df2017[\"CWE-NAME\"].values,name=2017) ,row=2, col=3)\nfig.add_trace(go.Pie(labels=df2018[\"index\"].values, values=df2018[\"CWE-NAME\"].values,name=2018) ,row=2, col=4)\nfig.add_trace(go.Pie(labels=df2019[\"index\"].values, values=df2019[\"CWE-NAME\"].values,name=2019) ,row=3, col=1)\nfig.add_trace(go.Pie(labels=df2020[\"index\"].values, values=df2020[\"CWE-NAME\"].values,name=2020) ,row=3, col=2)\nfig.add_trace(go.Pie(labels=df2021[\"index\"].values, values=df2021[\"CWE-NAME\"].values,name=2021) ,row=3, col=3)\nfig.add_trace(go.Pie(labels=df2022[\"index\"].values, values=df2022[\"CWE-NAME\"].values,name=2022) ,row=3, col=4)\n\nfig.update_traces(hoverinfo='label+percent', textfont_size=15,textposition='inside',\n                  marker=dict(line=dict(color='red', width=2)))\n\n\nfig.update_layout(height=900, width=1700, colorway=px.colors.sequential.Electric , \n                  title_text=\"Percentage of Hardware Design Vulnerabilities between 2011-2021\")\n\nfig.show()","8376f3b4":"import plotly.express as px\n\nfig = px.histogram(dataHD, x=\"CVSS-V2\", histfunc='avg',y=\"Year\",color=\"CWE-NAME\",orientation='h', height=700,width=1500,text_auto='.2s',title=\"Hardware Design- Average CVSS-V2 Score by CWE NAME and Year\")\nfig.update_traces( marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.show()","eae25732":"dataSD=pd.read_excel(\"..\/input\/cve-and-cwe-mapping-dataset\/Software Development\/SD_Vulnerability_Dataset.xlsx\")","f1285310":"year_list=[]\nfor i in range(0,len(dataSD[\"CVE-ID\"])):\n    a=dataSD[\"CVE-ID\"][i].split(\"-\")[1]\n    year_list.append(a)\n\ndataSD.insert(loc=2, column='Year', value=year_list)","69744326":"dfs2014=dataSD[dataSD.Year==\"2014\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2015=dataSD[dataSD.Year==\"2015\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2016=dataSD[dataSD.Year==\"2016\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2017=dataSD[dataSD.Year==\"2017\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2018=dataSD[dataSD.Year==\"2018\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2019=dataSD[dataSD.Year==\"2019\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2020=dataSD[dataSD.Year==\"2020\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\ndfs2021=dataSD[dataSD.Year==\"2021\"][\"CWE-NAME\"].value_counts().to_frame().reset_index()[0:20]\n","cfcdcbd9":"\nimport plotly.express as px\nfig = make_subplots(rows=2, cols=4,  subplot_titles=(\"2014\", \"2015\", \"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\"),\n                    specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}, {\"type\": \"pie\"}],[{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"},{\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(labels=dfs2014[\"index\"].values, values=dfs2014[\"CWE-NAME\"].values,name=2014) ,row=1, col=1)\nfig.add_trace(go.Pie(labels=dfs2015[\"index\"].values, values=dfs2015[\"CWE-NAME\"].values,name=2015) ,row=1, col=2)\nfig.add_trace(go.Pie(labels=dfs2016[\"index\"].values, values=dfs2016[\"CWE-NAME\"].values,name=2016) ,row=1, col=3)\nfig.add_trace(go.Pie(labels=dfs2017[\"index\"].values, values=dfs2017[\"CWE-NAME\"].values,name=2017) ,row=1, col=4)\nfig.add_trace(go.Pie(labels=dfs2018[\"index\"].values, values=dfs2018[\"CWE-NAME\"].values,name=2018) ,row=2, col=1)\nfig.add_trace(go.Pie(labels=dfs2019[\"index\"].values, values=dfs2019[\"CWE-NAME\"].values,name=2019) ,row=2, col=2)\nfig.add_trace(go.Pie(labels=dfs2020[\"index\"].values, values=dfs2020[\"CWE-NAME\"].values,name=2020) ,row=2, col=3)\nfig.add_trace(go.Pie(labels=dfs2021[\"index\"].values, values=dfs2021[\"CWE-NAME\"].values,name=2021) ,row=2, col=4)\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=15,textposition='inside',\n                  marker=dict(line=dict(color='#000000', width=2)))\nfig.update_layout(height=800, width=1700,colorway=px.colors.qualitative.D3_r,\n                  title_text=\"Number of Top 20 Software Development Vulnerabilities between 2014-2021\")\n\nfig.show()","61ec8a47":"## **NATIONAL VULNERABILITY DATABASE (NVE)** \n\nThe NVD is the U.S. government repository of standards based vulnerability management data represented using the Security Content Automation Protocol (SCAP). This data enables automation of vulnerability management, security measurement, and compliance. The NVD includes databases of security checklist references, security-related software flaws, misconfigurations, product names, and impact metrics.\n\n### Vulnerability Metrics\n\nThe Common Vulnerability Scoring System (CVSS) is an open framework for communicating the characteristics and severity of software vulnerabilities. CVSS consists of three metric groups: Base, Temporal, and Environmental. The Base metrics produce a score ranging from 0 to 10, which can then be modified by scoring the Temporal and Environmental metrics. A CVSS score is also represented as a vector string, a compressed textual representation of the values used to derive the score. Thus, CVSS is well suited as a standard measurement system for industries, organizations, and governments that need accurate and consistent vulnerability severity scores. Two common uses of CVSS are calculating the severity of vulnerabilities discovered on one's systems and as a factor in prioritization of vulnerability remediation activities. The National Vulnerability Database (NVD) provides CVSS scores for almost all known vulnerabilities.\n\nThe NVD supports both Common Vulnerability Scoring System (CVSS) v2.0 and v3.X standards. The NVD provides CVSS 'base scores' which represent the innate characteristics of each vulnerability. The NVD does not currently provide 'temporal scores' (metrics that change over time due to events external to the vulnerability) or 'environmental scores' (scores customized to reflect the impact of the vulnerability on your organization). However, the NVD does supply a CVSS calculator for both CVSS v2 and v3 to allow you to add temporal and environmental score data. https:\/\/nvd.nist.gov\/vuln-metrics\/cvss\n\n\n![](https:\/\/user-images.githubusercontent.com\/7767322\/101494833-1c5a6400-3968-11eb-8a39-3b20bc93d0f4.png) ","c4e693cc":"### 1. GLOBAL DATASET ","cc8e580d":"Following table shows the first 10 entries of the dataset.","51ace7c2":"## **Common Vulnerabilities and Exposures (CVE)**\n\nThe Common Vulnerabilities and Exposures (CVE) system provides a reference-method for publicly known information-security vulnerabilities and exposures. The United States' National Cybersecurity FFRDC, operated by The Mitre Corporation, maintains the system, with funding from the US National Cyber Security Division of the US Department of Homeland Security. The system was officially launched for the public in September 1999.\n\nThe Security Content Automation Protocol uses CVE, and CVE IDs are listed on Mitre's system as well as in the US National Vulnerability Database.\n\n\nA vulnerability is a weakness in a piece of computer software which can be used to access things one should not be able to gain access to. For example, software which processes credit cards should not allow people to read the credit card numbers it processes, but hackers might use a vulnerability to steal credit card numbers. Talking about one specific vulnerability is hard because there are many pieces of software, sometimes with many vulnerabilities. CVE Identifiers give each vulnerability one different name, so people can talk about specific vulnerabilities by using their names.\n\nhttps:\/\/en.wikipedia.org\/wiki\/Common_Vulnerabilities_and_Exposures\n\nhttps:\/\/www.mitre.org\/\n\nhttps:\/\/nvd.nist.gov\/\n\nhttps:\/\/cve.mitre.org\/index.html\n\n","e665952c":"The following chart shows the number of vulnerabilities reported by year.","d0766ce9":"#### The following chart shows the average cvss-v2 scores by year and CVE Name. Incorrect default permission shows average score values in the ranges of 4.1-7.7, Observable Discrepancy 3.38-5, Unintended Proxy or Intermediary 4.6-6.4.\n\n#### Missing Protection Against Hardware Reverse Engineering Using Integrated Circut(IC) is reported in 2021 and Missing Cryptographic Step and Expected Behavior Violation in 2019","8b2c2492":"### 2. HARDWARE DESIGN DATASET\n\nThis dataset is a subset to Global_Dataset contains only those vulnerabilities whose CWE category is present in the Hardware Design Hierarchy. The general information of vulnerability includes CVE-ID, Description, Severity, CWE-Name, CWE-ID.","b12b9e30":"Global dataset contains 150k+ vulnerabilities reported in NVD during the time period of 1999-2021. It includes the various information of the vulnerability including unique id, description, severity, severity scores, and the CWE category under which the vulnerability falls. Multiple records were used if a vulnerability is mapped to more than one category.","8952a20c":"![](https:\/\/www.securitymagazine.com\/ext\/resources\/images\/cyber5-security-freepik1170x658.jpg?1639064878)\n","7f250da4":"The  following bar chart shows the reported vulnerabilities by year as above. However, it is also divided according to severity. When we examine the graph, we observe that the vulnerabilities are mostly in the middle and high range.","93b4ac04":"#### Following pie charts show percentage of Hardware Design Vulnerabilities according to CWE Name between 2011-2021. Especially, Incorrect default permissions are the most common type of vulnerability.","14ad4a8c":"### 3. SOFTWARE DEVELOPMENT DATASET\n\nThis dataset is a subset to Global_Dataset contains only those vulnerabilities whose CWE category is present in the Software Development Hierarchy. The general information of vulnerability includes CVE-ID, Description, Severity, CWE-Name, CWE-ID.","8dda4a76":"Following wordcloud is derived according to the most used words in the \"description\" column of the dataset.","1f81eb10":"## **About CWE**\n\nCommon Weakness Enumeration (CWE\u2122) is a community-developed list of common software and hardware weakness types that have security ramifications. \u201cWeaknesses\u201d are flaws, faults, bugs, or other errors in software or hardware implementation, code, design, or architecture that if left unaddressed could result in systems, networks, or hardware being vulnerable to attack. The CWE List and associated classification taxonomy serve as a language that can be used to identify and describe these weaknesses in terms of CWEs.\n\nTargeted at both the development and security practitioner communities, the main goal of CWE is to stop vulnerabilities at the source by educating software and hardware architects, designers, programmers, and acquirers on how to eliminate the most common mistakes before products are delivered. Ultimately, use of CWE helps prevent the kinds of security vulnerabilities that have plagued the software and hardware industries and put enterprises at risk.\n\nhttps:\/\/cwe.mitre.org\/about\/index.html","72a633d5":"Following pie charts show number of top 20 Software Development Vulnerabilities according to CWE Name between 2014-2021. Cross site scripting has been the most reported vulnerability in all 8 years."}}