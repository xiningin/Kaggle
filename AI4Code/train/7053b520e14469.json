{"cell_type":{"7dbea217":"code","58209389":"code","59166dfd":"code","0719b468":"code","375f43ff":"code","d6323c28":"code","f097ff33":"code","b4030edf":"code","5ba383f9":"code","b2657556":"code","e3000efe":"code","833a0f7d":"code","5ed4ee9b":"code","d9368984":"code","91b23352":"code","92f48708":"code","56a1339b":"code","cebb2856":"code","506fb803":"code","e3d1c841":"code","efee03a9":"markdown"},"source":{"7dbea217":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58209389":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom keras.utils import np_utils","59166dfd":"train = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\")","0719b468":"print(type(train))\nx = np.array(train)\nprint(type(x))","375f43ff":"x","d6323c28":"X = x[:, 1:]\nX","f097ff33":"X = X \/ 255.0\ny = x[:,0]","b4030edf":"y","5ba383f9":"print(f\"X.shape : {X.shape}\")\nprint(f\"y.shape : {y.shape}\")","b2657556":"X_train = X.reshape(-1, 28, 28, 1)","e3000efe":"X_train.shape","833a0f7d":"np.unique(y, return_counts=True)","5ed4ee9b":"y_train = keras.utils.to_categorical(y)","d9368984":"print(X_train.shape, y_train.shape)","91b23352":"for i in range(5):\n    plt.figure(i)\n    print(y_train[i])\n    plt.imshow(X_train[i].reshape(28, 28), cmap=\"gray\")\n    plt.show()","92f48708":"model = keras.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation=\"relu\", input_shape=(28, 28, 1)))\nmodel.add(keras.layers.Conv2D(64, (3, 3), activation=\"relu\"))\nmodel.add(keras.layers.MaxPooling2D(2, 2))\nmodel.add(keras.layers.Dropout(0.25))\nmodel.add(keras.layers.Conv2D(32, (5, 5), activation=\"relu\"))\nmodel.add(keras.layers.Conv2D(32, (5, 5), activation=\"relu\"))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(10, activation=\"softmax\"))","56a1339b":"model.summary()","cebb2856":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","506fb803":"history = model.fit(X_train, y_train, epochs = 100, shuffle = True, batch_size=256, validation_split=0.20)","e3d1c841":"plt.figure(figsize=(10, 7))\nacc = history.history[\"accuracy\"]\nloss = history.history[\"loss\"]\n\nepochs = range(len(acc))\nval_acc = history.history[\"val_accuracy\"]\nval_loss = history.history[\"val_loss\"]\n\n\nplt.plot(epochs, acc, \"g\", label=\"Accuracy\")\nplt.plot(epochs, loss, \"r\", label=\"Loss\")\n\nplt.plot(epochs, val_acc, \"orange\", label=\"Validation Accuracy\")\nplt.plot(epochs, val_loss, \"yellow\", label=\"Vlaidation Loss\")\nplt.title(\"Model Accuracy And Loss\")\nplt.legend()\nplt.show()","efee03a9":"## Data Preparation"}}