{"cell_type":{"e984f519":"code","4b1010ff":"code","85e64fb4":"code","2d7f29b4":"code","6d68f2b2":"code","0bcd9830":"code","f7ff9f0e":"code","d62b0dfd":"code","164d89f2":"code","dd872fea":"code","3f971dee":"code","24541c14":"code","fba191a3":"code","93d6afd6":"code","71930f02":"markdown","ddebc629":"markdown","074dab37":"markdown","2e3098a3":"markdown","1d1a71ae":"markdown","19bbe3e0":"markdown","8ab76a90":"markdown","907a443f":"markdown","88c2080d":"markdown","385e492f":"markdown","5f4a8aa4":"markdown","bc6aafd7":"markdown","03171b89":"markdown","e1d1205a":"markdown","95b1feb0":"markdown","4a7c28d6":"markdown","da5e5601":"markdown","73eeb45d":"markdown","3fae588f":"markdown"},"source":{"e984f519":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom itertools import combinations\nfrom collections import Counter\nimport warnings\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport wordcloud\n\nwarnings.filterwarnings(\"ignore\")\nsns.set_style('darkgrid')\nsns.color_palette(\"rocket\")\n%matplotlib inline\n\npd.set_option('display.width', 2000)\npd.set_option('display.float_format', '{:20,.2f}'.format)\npd.set_option('display.max_colwidth', None)","4b1010ff":"df = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\n\nquestions = df.loc[:0]\n\nmultiple_options_questions = set()\nmultiple_options_questions_A_B = set()\n\nfor q in list(questions.filter(regex=(\"Q\\d+_Part_\\d+\")).columns):\n    multiple_options_questions.add(int(q.split(\"_\")[0][1:]))\nfor q in list(questions.filter(regex=(\"Q\\d+_A_Part_\\d+\")).columns):\n    multiple_options_questions_A_B.add(int(q.split(\"_\")[0][1:]))\n\ndef extract_question(row):\n    row = list(row)\n    return row[0].split(\"-\")[0].strip()\n\nfor i in list(multiple_options_questions):\n    questions[f\"Q{i}\"] = questions.filter(regex=(f\"Q{i}_Part_\\d+\")).apply(lambda row: extract_question(row.values.astype(str)), axis=1)\n    \nfor i in list(multiple_options_questions_A_B):\n    questions[f\"Q{i}_A\"] = questions.filter(regex=(f\"Q{i}_A_Part_\\d+\")).apply(lambda row: extract_question(row.values.astype(str)), axis=1)\n    questions[f\"Q{i}_B\"] = questions.filter(regex=(f\"Q{i}_B_Part_\\d+\")).apply(lambda row: extract_question(row.values.astype(str)), axis=1)\n\nquestions.drop(columns=questions.filter(regex=(\"Q\\d+_Part_\\d+\")).columns, inplace=True)\nquestions.drop(columns=questions.filter(regex=(\"Q\\d+_A_Part_\\d+\")).columns, inplace=True)\nquestions.drop(columns=questions.filter(regex=(\"Q\\d+_B_Part_\\d+\")).columns, inplace=True)\nquestions.drop(columns=questions.filter(regex=(\"Q\\d+_A_OTHER\")).columns, inplace=True)\nquestions.drop(columns=questions.filter(regex=(\"Q\\d+_B_OTHER\")).columns, inplace=True)\nquestions.drop(columns=questions.filter(regex=(\"Q\\d+_OTHER\")).columns, inplace=True)\n\nquestions= questions.transpose().iloc[1:]\nquestions.columns = ['Question']\nquestions.sort_index(inplace=True)\n\ndf = df[1:]\ndf.reset_index(inplace=True)\n\n### Marking all the missing values as `Not Specified`\n\ndf.replace(to_replace=np.nan, value=\"Not Specified\", inplace=True)\n\n### Grouping responses for questions with more than one selected options\n\ndef group(row):\n    row = list(row)\n    result = list()\n    for val in row:\n        if val == \"Not Specified\":\n            pass\n        else:\n            result.append(val.strip())\n    return \";\".join(result)\n\nresponses = pd.DataFrame()\nfor i in range(1, 40):\n    if i in list(multiple_options_questions):\n        responses[f\"Q{i}\"] = df.filter(regex=(f\"Q{i}_Part_\\d+\")).apply(lambda row: group(row.values.astype(str)), axis=1)\n    elif i in list(multiple_options_questions_A_B):\n        responses[f\"Q{i}_A\"] = df.filter(regex=(f\"Q{i}_A_Part_\\d+\")).apply(lambda row: group(row.values.astype(str)), axis=1)\n        responses[f\"Q{i}_B\"] = df.filter(regex=(f\"Q{i}_B_Part_\\d+\")).apply(lambda row: group(row.values.astype(str)), axis=1)\n    else:\n        responses[f\"Q{i}\"] = df[f\"Q{i}\"]\n\n### Splitting the respondents into two categories: `Professional` and `Non Professional`\n\nnon_prof_index = responses[(responses['Q5']=='Student') | \n                           (responses['Q5']=='Currently not employed') | \n                           (responses['Q5']=='Other') |  \n                           (responses['Q5']=='Not Specified') |\n                           (responses['Q25']=='$0 ($USD)')].index\n\ntype_of_job_role =  list()\nfor index, row in responses.iterrows():\n    if index in list(non_prof_index):\n        type_of_job_role.append(\"Non Professional\")\n    else:\n        type_of_job_role.append(\"Professional\")\nresponses['type of Job Role'] = type_of_job_role\n\nnon_professional = responses[responses['type of Job Role']==\"Non Professional\"]\nprofessional = responses[responses['type of Job Role']==\"Professional\"]\n\n# Part B of the questions are supplement questions rephrased for non professional respondents\n\nnon_professional.drop(columns=non_professional.filter(regex=(\"Q\\d+_A\")).columns, inplace=True)\nprofessional.drop(columns=professional.filter(regex=(\"Q\\d+_B\")).columns, inplace=True)\n\nquestions.to_csv('.\/questions.csv')\nresponses.to_csv('.\/responses.csv', index=False)\nprofessional.to_csv('.\/professional.csv', index=False)\nnon_professional.to_csv('.\/non_professional.csv', index=False)","85e64fb4":"questions = pd.read_csv('questions.csv')\nresponses = pd.read_csv('responses.csv')\nprofessionals = pd.read_csv('professional.csv')\nnon_professional = pd.read_csv('non_professional.csv')\n\nquestions.columns = [\"Question Number\", \"Question\"]\nquestions.set_index(keys=\"Question Number\", inplace=True)","2d7f29b4":"age = pd.DataFrame(responses['Q1'].value_counts())\nage.sort_index(inplace=True)\nage.reset_index(inplace=True)\nage.columns = [\"Age\", \"Count\"]\n\nfig = px.bar(data_frame=age, \n      x = \"Age\", \n      y = \"Count\", \n      title= \"Age Distribution\", \n      template=\"seaborn\")\nfig.update_layout(title_x=0.5)","6d68f2b2":"fig = px.pie(data_frame=responses, \n             names='Q2', \n             color_discrete_sequence=px.colors.sequential.Teal_r[2:], \n             labels={\"Q2\":\"Gender\"}, \n             title = \"Gender Distribution\", \n             template=\"seaborn\"\n            )\nfig.update_layout(\n    title_x=0.5,\n    autosize = True\n)\nfig.update_traces(textposition='inside', \n                  textinfo='percent+label')","0bcd9830":"countries = pd.DataFrame(responses['Q3'].value_counts())\ncountries.reset_index(inplace=True)\ncountries.columns = [\"Country\", \"Count\"]\n\npx.choropleth(data_frame=countries, \n              locations='Country', \n              locationmode='country names', \n              color='Count', \n              color_continuous_scale= px.colors.sequential.Teal,\n              projection='natural earth',\n              template=\"seaborn\",\n              title=\"Geographical Distribution\")","f7ff9f0e":"education = pd.DataFrame(responses['Q4'].value_counts())\neducation.reset_index(inplace=True)\neducation.columns = [\"Highest level of Education\", \"Count\"]\n\nfig = px.bar(data_frame = education[::-1], \n      x = \"Count\", \n      y = \"Highest level of Education\", \n      title= \"Highest level of Education\",\n      template=\"seaborn\")\nfig.update_layout(title_x=0.5,\n                 autosize = True,\n                 height=500, \n                 width=1000,)","d62b0dfd":"title = pd.DataFrame(responses['Q5'].value_counts())\ntitle.reset_index(inplace=True)\ntitle.columns = [\"Job Title\", \"Count\"]\ntitle[\"parent\"] = [\"Job Title\"]*title.shape[0]\n\nfig = px.treemap(data_frame=title, \n          path=['Job Title'], \n          values=\"Count\", \n          title=\"Job Title\", \n          color='Count', \n          color_continuous_scale= px.colors.sequential.Teal[:-2],\n          template=\"seaborn\")\nfig.update_layout(\n    title_x=0.5,\n    extendtreemapcolors=True,\n    autosize = True\n    )","164d89f2":"sorted_list_code = ['Not Specified', \n               'I have never written code', \n               '< 1 years', \n               '1-2 years', \n               '3-5 years', \n               '5-10 years', \n               '10-20 years', \n               '20+ years']\ncoding_exp = pd.DataFrame(responses['Q6'].value_counts()[sorted_list_code])\ncoding_exp.reset_index(inplace=True)\ncoding_exp.columns = [\"Years\", \"Count\"]\nsorted_list_ml = ['Not Specified', \n               'I do not use machine learning methods', \n               'Under 1 year', \n               '1-2 years',\n               '2-3 years',\n               '3-4 years',\n               '4-5 years',\n               '5-10 years', \n               '10-20 years', \n               '20 or more years']\nml_exp = pd.DataFrame(responses['Q15'].value_counts()[sorted_list_ml])\nml_exp.reset_index(inplace=True)\nml_exp.columns = [\"Years\", \"Count\"]\n\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"Coding\", \"Machine Learning\"),\n    shared_yaxes=True)\n\nfig.add_trace(go.Bar(x=coding_exp[\"Years\"], y=coding_exp[\"Count\"]),\n              row=1, col=1)\n\nfig.add_trace(go.Bar(x=ml_exp[\"Years\"], y=ml_exp[\"Count\"]),\n              row=1, col=2)\n\nfig.update_layout(height=600, \n                  width=900, \n                  title_text=\"Experience\", \n                  showlegend=False, \n                  title_x=0.5, \n                  template=\"seaborn\",\n                  autosize = True,)\n\nfig.show()","dd872fea":"count = Counter()\nfor row in responses['Q7']:\n    try:\n        row_list = row.split(\";\")\n    except:\n        pass\n    count.update(Counter(combinations(row_list, 1)))\ndic = dict()    \nfor key,value in count.most_common(10):\n    dic[key[0]] = value\nmost_used = pd.DataFrame()\nmost_used[\"Language\"] = dic.keys()\nmost_used[\"Count\"] = dic.values()\nmost_used[\"Count %\"] = most_used[\"Count\"].apply(lambda x: (x*100)\/responses.shape[0])\n\nmost_suggested = pd.DataFrame(responses['Q8'].value_counts())\nmost_suggested.reset_index(inplace=True)\nmost_suggested.columns = [\"Language\", \"Count\"]\nmost_suggested = most_suggested[most_suggested[\"Language\"]!=\"Not Specified\"]\nmost_suggested.reset_index(inplace=True)\nmost_suggested[\"Count %\"] = most_suggested[\"Count\"].apply(lambda x: (x*100)\/responses.shape[0])\n\n\nlang = pd.merge(most_used, most_suggested, on=\"Language\")\nlang.drop(columns=[\"Count_x\", \"index\", \"Count_y\"], inplace=True)\nlang.columns=[\"Language\", \"Count % for most used language\", \"Count % for most suggested language\"]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=lang['Language'],\n                y=lang['Count % for most used language'],\n                name='Most Used Programming Language',\n                marker_color='rgb(55, 83, 109)'\n                ))\nfig.add_trace(go.Bar(x=lang['Language'],\n                y=lang['Count % for most suggested language'],\n                name='Most Suggested Programming Language',\n                marker_color='rgb(26, 118, 255)'\n                ))\n\nfig.update_layout(\n    title = \"Popular Programming Languages\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Count %',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0.6,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)',\n        \n    ),\n    barmode='group',\n    bargap=0.15, \n    bargroupgap=0.1,\n    title_x=0.5,\n    autosize = True,\n)\nfig.show()","3f971dee":"count = Counter()\nfor row in responses['Q37']:\n    try:\n        row_list = row.split(\";\")\n    except:\n        pass\n    count.update(Counter(combinations(row_list, 1)))\ndic = dict()    \nfor key,value in count.most_common(15):\n    if key[0]!=\"Not Specified\":\n        dic[key[0]] = value\nmooc_platform = pd.DataFrame()\nmooc_platform[\"Platform Name\"] = dic.keys()\nmooc_platform[\"Count\"] = dic.values()\nmooc_platform[\"Count %\"] = mooc_platform[\"Count\"].apply(lambda x: (x*100)\/responses.shape[0])\nmooc_platform['Platform Name'] = mooc_platform[\"Platform Name\"].apply(lambda x: x.split(\"(\")[0].strip())\n\ncount = Counter()\nfor row in responses['Q36']:\n    try:\n        row_list = row.split(\";\")\n    except:\n        pass\n    count.update(Counter(combinations(row_list, 1)))\ndic = dict()    \nfor key,value in count.most_common(10):\n    if key[0]!=\"Not Specified\":\n        dic[key[0]] = value\ndeploy_platform = pd.DataFrame()\ndeploy_platform[\"Platform Name\"] = dic.keys()\ndeploy_platform[\"Count\"] = dic.values()\ndeploy_platform[\"Count %\"] = deploy_platform[\"Count\"].apply(lambda x: (x*100)\/responses.shape[0])\n\nfig = make_subplots(\n    rows=2, cols=1,\n    subplot_titles=(\"For Learning Online\", \"For Showcasing Projects\"),\n    shared_xaxes= False)\n\nfig.add_trace(go.Bar(x=mooc_platform['Count %'][:5][::-1], y=mooc_platform['Platform Name'][:5][::-1], orientation='h'),\n              row=1, col=1)\n\nfig.add_trace(go.Bar(x=deploy_platform['Count %'][:5][::-1], y=deploy_platform['Platform Name'][:5][::-1], orientation='h'),\n              row=2, col=1)\n\nfig.update_layout(height=600, \n                  width=800, \n                  title_text=\"Popular Platforms\", \n                  showlegend=False, \n                  title_x=0.5, \n                  template=\"seaborn\")\n\nfig.show()","24541c14":"text = list()\ncols = ['Q16', 'Q17']\nfor col in cols:\n    for row in professionals[col]:\n        try:\n            row_list = row.split(\";\")\n        except:\n            pass\n        text =  text + row_list\n\ntext = \" \".join(text)\n\nwc = wordcloud.WordCloud(background_color=\"white\", \n                         max_words=150, \n                         width=1800, \n                         height=600, \n                         stopwords=wordcloud.STOPWORDS).generate(text)\n\nplt.figure(figsize = (15,5)) \nplt.imshow(wc, interpolation='bilinear') \nplt.axis(\"off\") \nplt.show()","fba191a3":"count = Counter()\nfor row in responses['Q16']:\n    try:\n        row_list = row.split(\";\")\n    except:\n        pass\n    count.update(Counter(combinations(row_list, 1)))\ndic = dict()    \nfor key,value in count.most_common(10):\n    if key[0]!=\"Not Specified\":\n        dic[key[0]] = value\nml_framework = pd.DataFrame()\nml_framework[\"Framework\"] = dic.keys()\nml_framework[\"Count\"] = dic.values()\nml_framework[\"Count %\"] = ml_framework[\"Count\"].apply(lambda x: (x*100)\/responses.shape[0])\n\ncount = Counter()\nfor row in responses['Q17']:\n    try:\n        row_list = row.split(\";\")\n    except:\n        pass\n    count.update(Counter(combinations(row_list, 1)))\ndic = dict()    \nfor key,value in count.most_common(10):\n    if key[0]!=\"Not Specified\":\n        dic[key[0]] = value\nml_algorithms = pd.DataFrame()\nml_algorithms[\"Algorithm\"] = dic.keys()\nml_algorithms[\"Count\"] = dic.values()\nml_algorithms[\"Count %\"] = ml_algorithms[\"Count\"].apply(lambda x: (x*100)\/responses.shape[0])\n","93d6afd6":"fig = make_subplots(\n    rows=2, cols=1,\n    subplot_titles=(\"Algorithms\", \"Frameworks\"),\n    shared_xaxes= False)\n\nfig.add_trace(go.Bar(x=ml_algorithms['Count %'][:5][::-1], y=ml_algorithms['Algorithm'][:5][::-1], orientation='h'),\n              row=1, col=1)\n\nfig.add_trace(go.Bar(x=ml_framework['Count %'][:5][::-1], y=ml_framework['Framework'][:5][::-1], orientation='h'),\n              row=2, col=1)\n\nfig.update_layout(height=600, \n                  width=850, \n                  title_text=\" Most Used in Machine Learning\", \n                  showlegend=False, \n                  title_x=0.5, \n                  template=\"seaborn\")\n\nfig.show()","71930f02":"Most of the respondents have coding experience of somewhere between 1 to 5 years. For machine learning, a major chunk of respondents have experience of less than a year, i.e., they are in the beginning phase of the never-ending learning curve of machine learning. Since Kaggle is the beginning place for most of the young machine learning practitioners, it is not a surprise to see so many machine learning beginners in the respondents. ","ddebc629":"![intro%20word%20cloud.png](attachment:intro%20word%20cloud.png)","074dab37":"# Geographical Distribution\n\nIt is clear from the map that most of the respondents are from India, followed by the United States of America.","2e3098a3":"> Majority of the respondents are students. This can possibly explain the high numbers of respondents in younger age groups.","1d1a71ae":"# Highest level of Education Achieved\n\n","19bbe3e0":"Coursera and Github are the market leaders in online learning and showcasing projects respectively. \nIt is surprising to see that about 35% of the respondents do not share or host their projects on public platforms in times when having code available on such platforms is an integrated part of portfolio building in Computer Science and Data Science. \nKaggle is leading as both, an online learning platform and an open platform to showcase your work.\nIt can also be observed that more number of people have opted for a self-learning path such as MOOCs and not university courses.\n","8ab76a90":"# Experience\n\n> They know enough who know how to learn\n\nAn experienced coder is a great asset to his\/her team and an experienced data scientist is a great asset to society as a whole.","907a443f":"# What's trending in Machine Learning","88c2080d":"> About 75% of the respondents hold either a Master's Degree or a Bachelor's Degree in some academic field.","385e492f":"# Gender Gap\nGender gap is a persisting problem in every professional field. As we can see here, almost 80% of the respondents are men. That means only **1 out of 5** people in this sample population is a woman.","5f4a8aa4":"# Popular Platforms","bc6aafd7":"# Age Distribtion\n\nTechnology has always been dominated by a fleet of young men and women and it is visible in the graph below. About **50%** of the respondents are below the age of 30.\n\n","03171b89":"As visible in the word cloud above, `Scikit Learn`, `Logistic Regression`, `Decision Trees`, `Neural Networks`, etc are the most commonly used *Machine Learning Frameworks and Algorithms*","e1d1205a":"It is no surprise that Python is the most widely used and suggested programming language amongst Kaggle users. SQL on the other hand, despite being an extremely useful and widely used language in both Data Science and Software Development, was suggested by less than 5% of the respondents.","95b1feb0":"<div class=\"alert alert-block alert-info\"><center> <H1> Kaggle 2020 Survey: An Overview <\/center><\/div>","4a7c28d6":"# Job Title","da5e5601":"# Most used and suggested Programming Languages","73eeb45d":"# Data Cleaning and Transformation","3fae588f":"After cleaning, transforming and splitting the provided data(`kaggle_survey_2020_responses.csv`), we get 4 seperate DataFrames, namely:\n1. *questions*: Questions asked in the survey\n2. *responses*: Responses entered by the respondents\n3. *professionals*: Responses by professional respondents\n4. *non professionals*: Responses by non-professional respondents\n\n> According to the [Survey Methodology](..\/input\/kaggle-survey-2020\/supplementary_data\/kaggle_survey_2020_methodology.pdf) provided with the Data, a respondent can be categorised as `Non Professional` if the respondent is either a \n- *student* or \n- *unemployed* or\n- *has never spent money on cloud services* \n"}}