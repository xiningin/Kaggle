{"cell_type":{"6a5c5e88":"code","4a436959":"code","967ff0ca":"code","b866a950":"code","60f32f51":"code","16c75387":"code","3e4adbce":"code","cf9b28b7":"code","e89b2270":"code","99562d10":"code","80360a4e":"code","044ee52b":"code","ea5a9407":"code","ba6ef5ac":"code","6df210f1":"code","0aace2ef":"code","20a4f96d":"code","c1f26b69":"code","60459584":"code","bed66353":"code","bffcb9c2":"code","81864939":"code","9b912ed2":"code","045abd36":"code","1d33b4eb":"code","012009db":"code","fbdc6f3d":"code","4b62b17a":"code","5175bd06":"code","1b788c22":"code","e6bddccf":"code","3a94b9c3":"code","6cc0d785":"code","7778f48d":"code","221ab603":"code","c779a6a6":"code","31924d8a":"code","977d29f6":"code","b2d80961":"code","84873212":"code","b81c135a":"code","afaa7def":"code","29963232":"code","ceb34009":"code","6bb970af":"code","ad11da15":"code","268f1726":"code","24f18fcf":"code","96576365":"markdown","62a9881c":"markdown","eaa090b1":"markdown","879d2078":"markdown","7401b1e5":"markdown","5b041f9d":"markdown","4e4e5acb":"markdown","7177ee7c":"markdown","82426f9c":"markdown","0456aefa":"markdown","9c36a37c":"markdown","e1895c78":"markdown","83e0acc2":"markdown","078cd5f1":"markdown","d43a4b89":"markdown","2816aab3":"markdown","92239bee":"markdown"},"source":{"6a5c5e88":"!pip3 install -U lightautoml","4a436959":"# Standard python libraries\nimport logging\nimport os\nimport time\nimport requests\nlogging.basicConfig(format='[%(asctime)s] (%(levelname)s): %(message)s', level=logging.INFO)\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\n\nimport pandas_profiling","967ff0ca":"# CURRENT_DIR = '.\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u044b \nCURRENT_DIR = '..\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0433\u0433\u043b\n\nPATH_TO_WORKDIR = CURRENT_DIR + 'working\/'\n\nPATH_TO_TRAIN = CURRENT_DIR + 'input\/lightautomlcourse-hw1\/'","b866a950":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 2*3600 # Time in seconds for automl run\nTARGET_NAME = 'final_price' # Target column name","60f32f51":"%%time\n\ntrain_data = pd.read_csv(PATH_TO_TRAIN + 'train_data.csv')\ntrain_data.head()","16c75387":"test_data = pd.read_csv(PATH_TO_TRAIN + 'test_data.csv')\ntest_data.head()","3e4adbce":"submission = pd.read_csv(PATH_TO_TRAIN + 'sample_submission.csv')\nsubmission.head()","cf9b28b7":"train_data.profile_report()","e89b2270":"test_data.profile_report()","99562d10":"train_data_sale = train_data[train_data['deal_type']=='For Sale']\ntest_data_sale = test_data[test_data['deal_type']=='For Sale']\n\ntrain_data_rent = train_data[train_data['deal_type']=='For Rent']\ntest_data_rent = test_data[test_data['deal_type']=='For Rent']","80360a4e":"len(train_data_sale), '+', len(train_data_rent), ':=', len(train_data_sale) + len(train_data_rent), ':=', len(train_data)","044ee52b":"len(test_data_sale), '+', len(test_data_rent), ':=', len(test_data_sale) + len(test_data_rent), ':=', len(test_data)","ea5a9407":"dict_country_manuf = {\n    'MAZDA' : 'Japan',\n    'CHRYSLER' : 'USA',\n    'HUMMER' : 'USA',\n    'SAAB' : 'Sweden',\n    'UAZ' : 'Russia',\n    'MASERATI' : 'Italy',\n    'TESLA' : 'USA',\n    'MG' : 'Great Britain',\n    'HYUNDAI' : 'South Korea',\n    'LINCOLN' : 'USA',\n    'PONTIAC' : 'USA',\n    'LEXUS' : 'Japan',\n    'OTHER' : 'Other',\n    'AUDI' : 'Germany',\n    'MERCURY' : 'USA',\n    'TOYOTA' : 'Japan',\n    'NISSAN' : 'Japan',\n    'SKODA' : 'Czech Republic',\n    'PORSCHE' : 'Germany',\n    'GREATWALL' : 'China',\n    'SUZUKI' : 'Japan',\n    'BENTLEY' : 'Great Britain',\n    'FOTON' : 'China',\n    'SSANGYONG' : 'South Korea',\n    'FIAT' : 'Italy',\n    'MITSUBISHI' : 'Japan',\n    'ALFA ROMEO' : 'Italy',\n    'PEUGEOT' : 'France',\n    'KIA' : 'South Korea',\n    'HAVAL' : 'China',\n    'VAZ' : 'Russia',\n    'SUBARU' : 'Japan',\n    'FERRARI' : 'Italy',\n    'BMW' : 'Germany',\n    'JEEP' : 'USA',\n    'JAGUAR' : 'Great Britain',\n    'ISUZU' : 'Japan',\n    'RENAULT' : 'France',\n    'FORD' : 'USA',\n    'MOSKVICH' : 'Russia',\n    'CADILLAC' : 'USA',\n    'VOLVO' : 'Sweden',\n    'INFINITI' : 'Japan',\n    'HONDA' : 'Japan',\n    'ASTON MARTIN' : 'Great Britain',\n    'BUICK' : 'USA',\n    'TATA' : 'India',\n    'SEAT' : 'Spain',\n    'MERCEDES-BENZ' : 'Germany',\n    'DAEWOO' : 'South Korea',\n    'LAND ROVER' : 'Great Britain',\n    'VOLKSWAGEN' : 'Germany',\n    'OPEL' : 'Germany',\n    'ROVER' : 'Great Britain',\n    'ROLLS-ROYCE' : 'Great Britain',\n    'DODGE' : 'USA',\n    'JAC' : 'China',\n    'CHEVROLET' : 'USA',\n    'SATURN' : 'USA',\n    'SCION' : 'Japan',\n    'LAMBORGHINI' : 'Italy',\n    'GAZ' : 'Russia',\n    'ACURA' : 'Japan',\n    'CITROEN' : 'France',\n    'MINI' : 'Great Britain',\n    'ZAZ' : 'Russia',\n    'CHERY' : 'China',\n    'GMC' : 'USA',\n    'DAIHATSU' : 'Japan',\n    'LANCIA' : 'Italy'\n}","ba6ef5ac":"dict_level_price_country ={\n    'China' : 6,\n    'Czech Republic' : 7,\n    'France' : 9,\n    'Germany' : 14,\n    'Great Britain' : 18,\n    'India' : 1,\n    'Italy' : 13,\n    'Japan' : 20,\n    'Other' : 0,\n    'Russia' : 4,\n    'South Korea' : 12,\n    'Spain' : 8,\n    'Sweden' : 10,\n    'USA' : 15\n}","6df210f1":"sorted(list(dict_level_price_country.values()))","0aace2ef":"dict_sport_car_country = {\n    'MASERATI' : '1',\n    'ALFA ROMEO' : '1',\n    'FERRARI' : '1',\n    'ASTON MARTIN' : '1',\n    'LAMBORGHINI' : '1',\n}","20a4f96d":"dict_wheels = {'  Right-hand drive   ':0, \n                    '  Left wheel  ':1}","c1f26b69":"dict_vehicle_color = {\n    ' Silver ' : 5,\n    ' Blue ' : 14,\n    ' Black ' : 20,\n    ' White ' : 1,\n    ' Grey ' : 16,\n    ' Red ' : 8,\n    ' Brown ' : 18,\n    ' Green ' : 12,\n    ' Carnelian red ' : 9,\n    ' Beige ' : 2,\n    ' Sky blue ' : 11,\n    ' Golden ' : 7,\n    ' Yellow ' : 3,\n    ' Purple ' : 10,\n    ' Orange ' : 6,\n    ' Pink ': 4\n}","60459584":"sorted(list(dict_vehicle_color.values()))","bed66353":"dict_extra_vehicle_color = {\n    ' Green '  : 1,\n    ' Golden ' : 1,\n    ' Yellow ' : 1,\n    ' Purple ' : 1,\n    ' Orange ' : 1,\n    ' Pink '   : 1\n}","bffcb9c2":"set_manuf_train = set(train_data.vehicle_manufacturer.unique())\nset_manuf_test = set(test_data.vehicle_manufacturer.unique())\nlist_manuf_to_drop = list(set_manuf_train-set_manuf_test)\nprint(list_manuf_to_drop)","81864939":"list_manuf_no_in_train = list(set_manuf_test - set_manuf_train)\nprint(list_manuf_no_in_train)","9b912ed2":"dict_manuf_count = train_data.vehicle_manufacturer.value_counts().to_dict()\ndict_manuf_count['OTHER'] = dict_manuf_count['\u10e1\u10ee\u10d5\u10d0']","045abd36":"dict_manuf_count_test = test_data.vehicle_manufacturer.value_counts().to_dict()\ndict_manuf_count['CHERY'] = dict_manuf_count_test['CHERY']\ndict_manuf_count['HAVAL'] = dict_manuf_count_test['HAVAL']","1d33b4eb":"df_group_manuf_mean_price = train_data.groupby('vehicle_manufacturer').final_price.mean()\nborder_budget, border_medium, border_expensive = tuple(df_group_manuf_mean_price.quantile([0.25,0.5,0.75]).to_list())\nborder_budget, border_medium, border_expensive","012009db":"def type_price_manuf(row):\n    if row <= border_budget:\n        return 1\n    if row <= border_medium:\n        return 2\n    if row <= border_expensive:\n        return 3\n    else:\n        return 4\ndict_manuf_type_price = df_group_manuf_mean_price.apply(type_price_manuf).to_dict()\ndict_manuf_type_price['OTHER'] = dict_manuf_type_price['\u10e1\u10ee\u10d5\u10d0']","fbdc6f3d":"dict_manuf_type_price['CHERY'] = 2\ndict_manuf_type_price['HAVAL'] = 2","4b62b17a":"%%time\ndef cat_vehicle_year_2(row):\n    if row <= 3:\n        return 1\n    if row <= 5:\n        return 2\n    if row <= 7:\n        return 3\n    if row <= 10:\n        return 4\n    if row <= 20:\n        return 5\n    # if row <= 25:\n    #     return 6\n    else:\n        return 6\n\ndef create_expert_feats(data):\n    \n    # \u0437\u0430\u043c\u0435\u043d\u0430 \u0433\u0440\u0443\u0437\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0435\n    dict_other_manuf = {'\u10e1\u10ee\u10d5\u10d0':'OTHER'}\n    data.vehicle_manufacturer = data.vehicle_manufacturer.apply(lambda row: dict_other_manuf[row] if row in dict_other_manuf.keys() else row)\n    \n    # \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n    data['manuf_count'] = data.vehicle_manufacturer.apply(lambda row: int(dict_manuf_count[row]) if row in dict_manuf_count.keys() else np.nan)\n    \n    # \u0447\u0435\u0442\u044b\u0440\u0435 \u0442\u0438\u043f\u0430 \u0446\u0435\u043d \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\u043c (\u0431\u044e\u0434\u0436\u0435\u0442\u043d\u044b\u0439, \u0441\u0440\u0435\u0434\u043d\u0438\u0439, \u0434\u043e\u0440\u043e\u0433\u043e\u0439, \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u0440\u043e\u0433\u043e\u0439)\n    data['manuf_type_price'] = data.vehicle_manufacturer.apply(lambda row: int(dict_manuf_type_price[row]) if row in dict_manuf_type_price.keys() else np.nan)\n    \n#     \u0434\u0440\u043e\u043f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0442\u0435\u0441\u0442\u0435\n    data = data[~train_data['vehicle_manufacturer'].isin(list_manuf_to_drop)]\n\n#     \u0441\u0442\u0440\u0430\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n    data['country_manuf'] = data.vehicle_manufacturer.apply(lambda row: dict_country_manuf[row] if row in dict_country_manuf.keys() else np.nan)\n    \n    # \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0446\u0435\u043d \u043e\u0442 \u0441\u0442\u0440\u0430\u043d\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \n    data['level_price_country'] = data.country_manuf.apply(lambda row: int(dict_level_price_country[row]) if row in dict_level_price_country.keys() else np.nan)\n\n#     \u0441\u043f\u043e\u0440\u0442\u043a\u0430\u0440\u044b \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \n    data['sport_car_country'] = data.country_manuf.apply(lambda row: dict_sport_car_country[row] if row in dict_sport_car_country.keys() else 0)\n\n    # \u0434\u0440\u043e\u043f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n    data.drop(['country_manuf'], axis=1, inplace=True)\n\n    # \u0438\u043d\u0432\u0435\u0440\u0442 \u0434\u0430\u0442\u044b \u0432 \u043b\u043e\u0433\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d. \u0440\u0430\u0441\u043f\u0440\u0435\u0434\n    data['vehicle_year_2'] = 2021 - data.vehicle_year\n    \n    # \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\n    data['intensity_use'] = data.current_mileage\/data.vehicle_year_2\n\n    # \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0430\u0432\u0442\u043e \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c\n    data['cat_vehicle_year_2'] = data.vehicle_year_2.apply(cat_vehicle_year_2)\n    \n    # \u0440\u0443\u043b\u044c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0437\u0430\u043c\u0435\u043d\u043e\u0439 \u043d\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439\n    data['wheels_2'] = data.wheels.apply(lambda row: dict_wheels[row] if row in dict_wheels.keys() else 1)\n\n    # \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 nan\n    data['constant'] = 1\n    data['allnan'] = np.nan\n    \n    # \u0433\u0440\u0430\u0434\u0430\u0446\u0438\u044f \u0446\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0432\u0435\u0442\u043b\u043e\u0433\u043e \u043a \u0442\u0435\u043c\u043d\u043e\u043c\u0443\n    data['vehicle_color_2'] = data.vehicle_color.apply(lambda row: dict_vehicle_color[row] if row in dict_vehicle_color.keys() else np.nan)\n\n    # \u0440\u0435\u0434\u043a\u0438\u0435 \u0446\u0432\u0435\u0442\u0430\n    data['extra_vehicle_color'] = data.vehicle_color.apply(lambda row: dict_extra_vehicle_color[row] if row in dict_extra_vehicle_color.keys() else 0)\n\n    return\ncreate_expert_feats(train_data)\ncreate_expert_feats(test_data)\n\ncreate_expert_feats(train_data_sale)\ncreate_expert_feats(test_data_sale)","5175bd06":"# \u0434\u0440\u043e\u043f \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0442\u0440\u0435\u0439\u043d\u0430\nindex_drop = train_data_sale[train_data_sale['vehicle_year']==0].index\ntrain_data_sale.drop(index_drop, inplace=True)\n\nindex_drop = train_data[train_data['vehicle_year']==0].index\ntrain_data.drop(index_drop, inplace=True)","1b788c22":"train_data_sale.head()","e6bddccf":"test_data_sale.head()","3a94b9c3":"%%time\n\ntask = Task('reg', loss='mae', metric='mae')","6cc0d785":"%%time\n\nroles = {'target': TARGET_NAME,\n         'drop': ['row_ID',\n                # 'wheels',\n                # 'vehicle_year'\n                ] # to drop or not to drop?\n         }","7778f48d":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]}\n                        )\noof_pred = automl.fit_predict(train_data, roles = roles)\nlogging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","221ab603":"%%time\n\n# Fast feature importances calculation\nfast_fi = automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","c779a6a6":"%%time\nlogging.info('Check scores...')\nlogging.info('OOF score: {}'.format(mean_absolute_error(train_data[TARGET_NAME].values, oof_pred.data[:, 0])))","31924d8a":"%%time\n\ntest_pred = automl.predict(test_data_sale)\nlogging.info('Prediction for test_sale data:\\n{}\\nShape = {}'\n              .format(test_pred, test_pred.shape))","977d29f6":"test_data_sale['price_pred'] = test_pred.data[:, 0]\ntest_data_sale[['row_ID', 'price_pred']].head()","b2d80961":"%%time \n\nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]}\n                        )\noof_pred = automl.fit_predict(train_data_rent, roles = roles)\nlogging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","84873212":"%%time\n\n# Fast feature importances calculation\nfast_fi = automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","b81c135a":"%%time\n\nlogging.info('Check scores...')\nlogging.info('OOF score: {}'.format(mean_absolute_error(train_data_rent[TARGET_NAME].values, oof_pred.data[:, 0])))","afaa7def":"%%time\n\ntest_pred = automl.predict(test_data_rent)\nlogging.info('Prediction for test_rent data:\\n{}\\nShape = {}'\n              .format(test_pred, test_pred.shape))","29963232":"test_data_rent['price_pred'] = test_pred.data[:, 0]\ntest_data_rent[['row_ID', 'price_pred']].head()","ceb34009":"submission = submission.merge(test_data_sale[['row_ID', 'price_pred']], how='left', on='row_ID')\nsubmission.rename(columns = {'price_pred':'price_pred_sale'}, inplace=True)\nsubmission = submission.merge(test_data_rent[['row_ID', 'price_pred']], how='left', on='row_ID')\nsubmission.rename(columns = {'price_pred':'price_pred_rent'}, inplace=True)\nsubmission.fillna(0, inplace=True)\nsubmission['final_price'] = submission['price_pred_sale'] + submission['price_pred_rent']\nsubmission.head()","6bb970af":"submission[submission['final_price']==0]","ad11da15":"submission.drop(['price_pred_sale','price_pred_rent'], axis=1, inplace=True)","268f1726":"submission.head()","24f18fcf":"submission.to_csv(PATH_TO_WORKDIR + 'lightautoml_sample_sub.csv', index = False)","96576365":"# 5. \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","62a9881c":"# 8. ========= AutoML for Sale =========\n\n\n## Step 1. Create Task","eaa090b1":"### HW1 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430\n---\n### **\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u0443\u0440\u0441 LightAutoML \u043e\u0442 Sber AI Lab**","879d2078":"# Step 4. Check scores","7401b1e5":"# 1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 LightAutoML","5b041f9d":"Roles setup here set target column and base date, which is used to calculate date differences:","4e4e5acb":"# 4. \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445","7177ee7c":"## Step 2. Setup columns roles","82426f9c":"# 9. ========= AutoML for Rent =========","0456aefa":"# 10. Generate submission","9c36a37c":"# 7. Feature engineering\n---\n## 7.1 \u0420\u0430\u0441\u0447\u0435\u0442 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430 ","e1895c78":"# 3. \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 LightAutoML","83e0acc2":"## Step 3. Create AutoML from preset","078cd5f1":"# 6. \u0421\u043f\u043b\u0438\u0442 \u043d\u0430 sale \u0438 rent","d43a4b89":"# Step 5. Predict","2816aab3":"# 2. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","92239bee":"To create AutoML model here we use `TabularAutoML` preset, which looks like:\n\n![TabularAutoML preset pipeline](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/raw\/master\/imgs\/tutorial_2_pipeline.png)\n\nAll params we set above can be send inside preset to change its configuration:"}}