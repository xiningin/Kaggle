{"cell_type":{"2edc7e3f":"code","2e8c7d49":"code","c4530f0f":"code","fcb8fca8":"code","ed961ef3":"code","17b784a2":"code","72e1cf4c":"code","dbc32432":"code","94c26be0":"code","8452e898":"code","2acaa093":"code","5a7bf063":"code","fdd93c54":"code","5f03a5bd":"code","87e809a5":"code","39ac3da2":"code","cff30eb3":"code","e2736a14":"code","1208bf84":"code","24a3f506":"code","aec73483":"code","c9022cf6":"code","b1ababa9":"code","4b2382f4":"code","7ecc1483":"code","87d595f8":"code","1f73377c":"code","5ad46ed2":"code","d858db9b":"markdown","542b976c":"markdown","fb745fc1":"markdown","bc745ba2":"markdown","99d00537":"markdown"},"source":{"2edc7e3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e8c7d49":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\nprint(train.shape)\nprint(test.shape)","c4530f0f":"train.columns","fcb8fca8":"train_null = train.isnull().sum().sort_values(ascending = False)","ed961ef3":"train_null = train_null[train_null>0]\ntrain_null","17b784a2":"a = ['PoolQC','MiscFeature','Alley','Fence']\ntrain.drop(a,axis = 1,inplace = True)\n","72e1cf4c":"train.columns","dbc32432":"train.info()","94c26be0":"t_cor = train.corr()\nt_cor['SalePrice']","8452e898":"high_num_cor_cols = ['LotFrontage','LotArea','OverallQual','YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1',\n                 'BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','GrLivArea','FullBath','HalfBath','TotRmsAbvGrd',\n                'Fireplaces','GarageYrBlt','GarageCars','GarageArea']","2acaa093":"train_red = train[high_num_cor_cols]","5a7bf063":"train_red.shape","fdd93c54":"train_label = train['SalePrice']","5f03a5bd":"train_label.shape","87e809a5":"train_red.head()","39ac3da2":"train_red.isnull().sum().sort_values(ascending = False)","cff30eb3":"train_red['LotFrontage'].fillna(train_red['LotFrontage'].mean(),inplace = True)\ntrain_red['GarageYrBlt'].fillna(train_red['GarageYrBlt'].mean(),inplace = True)\ntrain_red['MasVnrArea'].fillna(train_red['MasVnrArea'].mean(),inplace = True)\ntrain_red.isnull().sum().sort_values(ascending=False)","e2736a14":"from sklearn.model_selection import train_test_split\n\ntrain_X,val_X,train_y,val_y = train_test_split(train_red,train_label,test_size = 0.2,shuffle = True)\nprint(train_X.shape)\nprint(val_X.shape)","1208bf84":"from sklearn.ensemble import RandomForestRegressor\n\nrfg_model = RandomForestRegressor(max_depth = 5)\nrfg_model.fit(train_red,train_label)","24a3f506":"pre = rfg_model.predict(val_X)","aec73483":"from sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(pre,val_y)","c9022cf6":"test_red = test[high_num_cor_cols]","b1ababa9":"test_red.isnull().sum().sort_values(ascending = False)","4b2382f4":"a = ['LotFrontage','GarageYrBlt','MasVnrArea','GarageCars','BsmtFinSF1','TotalBsmtSF','GarageArea','BsmtUnfSF']\ntest_red.fillna(test_red[a].mean(),inplace = True)\ntest_red.isnull().sum().sort_values(ascending = False)","7ecc1483":"test_red.info()","87d595f8":"predict = rfg_model.predict(test_red)","1f73377c":"predict","5ad46ed2":"output = pd.DataFrame({'Id': test['Id'],\n                       'SalePrice': predict})\n\noutput.to_csv('submission.csv', index=False)\n","d858db9b":"# Getting the data","542b976c":"# Splitting the training and validation data","fb745fc1":"# Handling missing values","bc745ba2":"# Getting the high correlated numerical columns","99d00537":"# RandomForest Regressor"}}