{"cell_type":{"1c4fab45":"code","da401e6a":"code","009f8ad5":"code","cc58704b":"code","e53e2e99":"code","9511e0f4":"code","1118a893":"code","6de75aa5":"code","51bf8567":"code","a2349e7a":"code","e7713826":"code","db43ec83":"code","f595ebb7":"code","0916ce76":"code","7239a661":"code","81b7cb94":"code","b047b258":"code","8ed58cb2":"code","19919b7f":"code","019f4b09":"code","5427d27b":"code","5b2496a8":"code","2dc119bc":"code","3e1b23c3":"code","9edcad04":"code","b4628280":"code","281c9d6f":"markdown"},"source":{"1c4fab45":"import pandas as pd\ndataset=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndataset.head()","da401e6a":"dataset.info()","009f8ad5":"dataset.nunique().sort_values(ascending=False)[:5]","cc58704b":"data = dataset.sample(frac=0.8, random_state=42)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))","e53e2e99":"print('Unseen Data For Predictions: ' + str(data_unseen.shape))","9511e0f4":"!pip install pycaret","1118a893":"from pycaret.classification import *","6de75aa5":"numeric_features=data.columns.tolist()\nnumeric_features.remove('label')\nnumeric_features[:5]","51bf8567":"data.label.value_counts()","a2349e7a":"exp_clf101 = setup(data = data, target = 'label', session_id=42,\n                  normalize = True, \n                  transformation = True, \n                  log_experiment = True,\n                  handle_unknown_categorical = True, \n                  unknown_categorical_method = 'most_frequent',\n                  remove_multicollinearity = True, #rop one of the two features that are highly correlated with each other\n                  ignore_low_variance = True,#all categorical features with statistically insignificant variances are removed from the dataset.\n                  combine_rare_levels = True,# all levels in categorical features below the threshold defined in rare_level_threshold param are combined together as a single level\n                  numeric_imputation='median',\n                  categorical_imputation='mode',\n                   numeric_features=numeric_features)","e7713826":"lightgbm = create_model('lightgbm')","db43ec83":"print(lightgbm)","f595ebb7":"tuned_lightgbm = tune_model(lightgbm,optimize = 'Precision')","0916ce76":"plot_model(tuned_lightgbm, plot = 'auc')","7239a661":"plot_model(tuned_lightgbm, plot = 'pr')","81b7cb94":"plot_model(tuned_lightgbm, plot='feature')","b047b258":"plot_model(tuned_lightgbm, plot = 'confusion_matrix')","8ed58cb2":"evaluate_model(tuned_lightgbm)","19919b7f":"predict_model(tuned_lightgbm)","019f4b09":"unseen_predictions = predict_model(tuned_lightgbm, data=data_unseen)\nunseen_predictions.head()","5427d27b":"print(\"Confidence Score :   {}\".format(round(unseen_predictions.Score.mean(),2)))#Confidence Score","5b2496a8":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","2dc119bc":"sol = predict_model(tuned_lightgbm, data=test)\nsol.head()","3e1b23c3":"final=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nfinal.head()","9edcad04":"final.Label=sol.Label\nfinal.head()","b4628280":"final.to_csv('final.csv', index=False)","281c9d6f":"#### Time is constant, so using model which will take less time to execute"}}