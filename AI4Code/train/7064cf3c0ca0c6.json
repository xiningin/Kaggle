{"cell_type":{"c41c17de":"code","e881aef0":"code","b729336f":"code","a36990cd":"code","9591dc45":"code","648433af":"code","4b5cc3c2":"code","fefd0c5b":"code","d23903d1":"code","41193bfe":"code","baf7955e":"code","f5a73d9b":"code","73e4b5d5":"code","53534431":"code","992de541":"code","fd6d5734":"code","ee91a922":"code","c2af133a":"code","062709dc":"code","670cd3d6":"code","edca5a54":"code","4ac3547f":"code","69c629f4":"code","88b9b316":"code","12eee0c8":"code","5d32ae21":"code","31c43766":"code","aa4eaa6d":"code","91dba02b":"code","a1b14148":"code","ba392fdf":"code","e32ca617":"code","34394505":"code","6db61b1c":"code","805e7288":"code","9a55f0d6":"code","1876e5f7":"code","c423ffcc":"code","226ff97b":"code","2b8173f1":"code","6677d354":"code","10df89f4":"code","2140bee8":"code","c568577e":"markdown","58de2efe":"markdown","110ca9c9":"markdown","51ba31e1":"markdown","5602dda9":"markdown","2d38debe":"markdown","77274041":"markdown","c4fef175":"markdown","65cb9ac3":"markdown","980b85eb":"markdown","1a83c1ef":"markdown","f808a062":"markdown","2fff53fc":"markdown","67c83673":"markdown","4b2d55a0":"markdown","31df7aeb":"markdown","42ff05ce":"markdown","608a8726":"markdown","2d39c9c5":"markdown","7063f226":"markdown","30775037":"markdown","e4cb14d9":"markdown","a90d1c6e":"markdown","87e1e062":"markdown","da2d3a0b":"markdown","89f317a5":"markdown","c5dd7c2e":"markdown","d5d22a3e":"markdown","a8e359f2":"markdown","85d4de30":"markdown","e8eb3530":"markdown","e93a18a0":"markdown","29968ceb":"markdown","3404d7af":"markdown"},"source":{"c41c17de":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.preprocessing import StandardScaler\n\n\nfrom yellowbrick.target import FeatureCorrelation\nfrom scipy.stats import norm\nfrom scipy import stats\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ncolor = sns.color_palette()\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]","e881aef0":"data = pd.read_csv(\"..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")\ndata_gen = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data_by_genres.csv')\ndata_w_gen = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data_w_genres.csv')\ndata_yr = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data_by_year.csv')\ndata_ar = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data_by_artist.csv')\ndata_top50 = pd.read_csv(\"..\/input\/top50spotify2019\/top50.csv\",encoding='ISO-8859-1')\ndata.head()","b729336f":"data.describe()","a36990cd":"data.info()","9591dc45":"\nfeature_names = ['acousticness', 'danceability', 'energy', 'instrumentalness',\n       'liveness', 'loudness', 'speechiness', 'tempo', 'valence','duration_ms','explicit','key','mode','year']\n\nX, y = data[feature_names], data['popularity']\n\n# Create a list of the feature names\n\nfeatures = np.array(feature_names)\n\n# Instantiate the visualizer\nvisualizer = FeatureCorrelation(labels=features)\n\nplt.rcParams['figure.figsize']=(20,20)\nvisualizer.fit(X, y)        # Fit the data to the visualizer\nvisualizer.show()       ","648433af":"total = data.shape[0]\npopularity_score_more_than_40 = data[data['popularity'] > 40].shape[0]\n\nprobability = (popularity_score_more_than_40\/total)*100\nprint(\"Probability of song getting more than 40 in popularity :\", probability)","4b5cc3c2":"features_o = ['energy','loudness','year']\n\nplt.rcParams['figure.figsize'] = (15, 4)\n\nplt.subplot(1, 3, 1)\nsns.distplot(data['energy'])\n\nplt.subplot(1, 3, 2)\nsns.distplot(data['loudness'])\n\nplt.subplot(1, 3, 3)\nsns.distplot(data['year'])\n\nplt.suptitle('Checking Feature with more corre ', fontsize = 10)\nplt.show()","fefd0c5b":"plt.rcParams['figure.figsize'] = (15, 4)\n\nplt.subplot(1, 3, 1)\nres = stats.probplot(data['energy'], plot=plt)\n\nplt.subplot(1, 3, 2)\nres = stats.probplot(data['loudness'], plot=plt)\n\nplt.subplot(1, 3, 3)\nres = stats.probplot(data['year'], plot=plt)","d23903d1":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(data['popularity'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","41193bfe":"x = data.groupby(\"loudness\")[\"popularity\"].mean().sort_values(ascending=False).head(20).reset_index()\n\nplt.figure(figsize=(12,8))\nsns.pointplot(x[\"loudness\"].values, x['popularity'].values, color=color[4])\nplt.ylabel('loudness', fontsize=12)\nplt.xlabel('popularity', fontsize=12)\nplt.title(\"popularity wise loudness\", fontsize=15)\nplt.xticks(rotation='vertical')\nplt.show()","baf7955e":"\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\ng = sns.relplot(\n    data=data,\n    x=\"loudness\", y=\"popularity\",\n    hue=\"year\", size=\"key\",col=\"explicit\",\n    palette=cmap, sizes=(10, 200)\n)\n\ng.despine(left=True, bottom=True)\n\n\ncmap_ = sns.cubehelix_palette(rot=-.30, as_cmap=True)\ng = sns.relplot(\n    data=data,\n    x=\"loudness\", y=\"popularity\",\n    hue=\"year\", size=\"key\",col=\"mode\",\n    palette=cmap_, sizes=(10, 200),\n)\n\ng.despine(left=True, bottom=True)","f5a73d9b":"fig1 = sns.jointplot(x=\"loudness\", y=\"popularity\", data=data.sample(10000),\n                  kind=\"reg\", truncate=False,\n                  color=color[3])","73e4b5d5":"data_w_gen['genres'].value_counts()","53534431":"df_movie_tunes = data_w_gen[data_w_gen['genres'] == \"['movie tunes']\"]\ndf_show_tunes = data_w_gen[data_w_gen['genres'] == \"['show tunes']\"]\ndf_classical_piano = data_w_gen[data_w_gen['genres'] == \"['classical piano']\"]\ndf_sleep = data_w_gen[data_w_gen['genres'] == \"['sleep']\"]","992de541":"#so lets check all the audio characteristics with top 4 geners \n# first lets start with \"movie tunne\" which is on TOP 1\nfig,ax = plt.subplots(figsize=(20, 10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\", font_scale=2, rc={\"lines.linewidth\": 3})\n\nsns.lineplot(x=\"key\", y=\"acousticness\", data=df_movie_tunes, color=\"b\",label = 'acousticness')\nsns.lineplot(x=\"key\", y=\"danceability\", data=df_movie_tunes, color=\"r\",label = 'danceability')\nsns.lineplot(x=\"key\", y=\"speechiness\", data=df_movie_tunes, color=\"g\",label = 'speechiness')\nsns.lineplot(x=\"key\", y=\"energy\", data=df_movie_tunes, color=\"y\",label = 'energy')\nsns.lineplot(x=\"key\", y=\"valence\", data=df_movie_tunes, color=\"m\",label = 'valence')\n\nplt.rcParams[\"xtick.labelsize\"] = 15\n\nax.set_title('Audio characteristics of genres \"Movie tunes\" data by the Key used')\nax.legend(fontsize = 14)\n\n# now lets check for top2 gener that is show tunes\n\nfig,ax = plt.subplots(figsize=(20, 10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\", font_scale=2, rc={\"lines.linewidth\": 3})\n\nsns.lineplot(x=\"key\", y=\"acousticness\", data=df_show_tunes, color=\"b\",label = 'acousticness')\nsns.lineplot(x=\"key\", y=\"danceability\", data=df_show_tunes, color=\"r\",label = 'danceability')\nsns.lineplot(x=\"key\", y=\"speechiness\", data=df_show_tunes, color=\"g\",label = 'speechiness')\nsns.lineplot(x=\"key\", y=\"energy\", data=df_show_tunes, color=\"y\",label = 'energy')\nsns.lineplot(x=\"key\", y=\"valence\", data=df_show_tunes, color=\"m\",label = 'valence')\n\nplt.rcParams[\"xtick.labelsize\"] = 15\n\nax.set_title('Audio characteristics of genres \"Show Tunes\" data by the Key used')\nax.legend(fontsize = 14)\n\n# now lets check for top3 gener that is classical piano \nfig,ax = plt.subplots(figsize=(20, 10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\", font_scale=2, rc={\"lines.linewidth\":3})\n\nsns.barplot(x=\"key\", y=\"acousticness\", data=df_classical_piano, color=\"b\", label = 'acousticness')\nsns.barplot(x=\"key\", y=\"danceability\", data=df_classical_piano, color=\"r\", label = 'danceability')\nsns.barplot(x=\"key\", y=\"speechiness\", data=df_classical_piano, color=\"g\", label = 'speechiness')\nsns.barplot(x=\"key\", y=\"energy\", data=df_classical_piano, color=\"y\", label = 'energy')\nsns.barplot(x=\"key\", y=\"valence\", data=df_classical_piano, color=\"m\", label = 'valence')\n\nplt.rcParams[\"xtick.labelsize\"] = 15\n\nax.set_title('Audio characteristics of genres \"classical piano\" data by the Key used')\nax.legend(fontsize=14)\n\n# now lets check for top3 gener that is sleep betts \nfig,ax = plt.subplots(figsize=(20, 10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\", font_scale=2, rc={\"lines.linewidth\":3})\n\nsns.barplot(x=\"key\", y=\"acousticness\", data=df_sleep, color=\"b\", label = 'acousticness')\nsns.barplot(x=\"key\", y=\"danceability\", data=df_sleep, color=\"r\", label = 'danceability')\nsns.barplot(x=\"key\", y=\"speechiness\", data=df_sleep, color=\"g\", label = 'speechiness')\nsns.barplot(x=\"key\", y=\"energy\", data=df_sleep, color=\"y\", label = 'energy')\nsns.barplot(x=\"key\", y=\"valence\", data=df_sleep, color=\"m\", label = 'valence')\n\nplt.rcParams[\"xtick.labelsize\"] = 15\n\nax.set_title('Audio characteristics of genres \"sleep betts\" data by the Key used')\nax.legend(fontsize=14)","fd6d5734":"data['artists'].value_counts()","ee91a922":"df_top1 = data[data['artists'] == \"['\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439']\"]\ndf_top2 = data[data['artists'] == \"['Francisco Canaro']\"]\ndf_top3 = data[data['artists'] == \"['\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a']\"]\ndf_top4 = data[data['artists'] == \"['Ignacio Corsini']\"]\ndf_top5 = data[data['artists'] == \"['Frank Sinatra']\"]","c2af133a":"\n# for energy\nfig, ax = plt.subplots(figsize=(20,10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\",font_scale=2, rc={\"lines.linewidth\": 2})\n\nsns.distplot(df_top1['energy'], color='y',label=\"\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439\")\nsns.distplot(df_top2['energy'], color='b',label=\"Francisco Canaro\")\nsns.distplot(df_top3['energy'], color='m',label=\"\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a\")\nsns.distplot(df_top4['energy'], color='g',label=\"Ignacio Corsini\")\nsns.distplot(df_top5['energy'], color='r',label=\"Frank Sinatra\")\n\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'for all the audio characteristics'\n\nax.set_xticklabels(ax.get_xticklabels(labels), rotation=30, ha='left')\nplt.rcParams[\"xtick.labelsize\"] = 15\n\n\nax.set_title('energy DISTRIBUTION FROM DIFFERENT ARTISTS')\nax.legend(fontsize = 14)\n\n# for valence\nfig, ax = plt.subplots(figsize=(20,10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\",font_scale=2, rc={\"lines.linewidth\": 2})\n\nsns.distplot(df_top1['valence'], color='y',label=\"\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439\")\nsns.distplot(df_top2['valence'], color='b',label=\"Francisco Canaro\")\nsns.distplot(df_top3['valence'], color='m',label=\"\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a\")\nsns.distplot(df_top4['valence'], color='g',label=\"Ignacio Corsini\")\nsns.distplot(df_top5['valence'], color='r',label=\"Frank Sinatra\")\n\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'for all the audio characteristics'\n\nax.set_xticklabels(ax.get_xticklabels(labels), rotation=30, ha='left')\nplt.rcParams[\"xtick.labelsize\"] = 15\n\n\nax.set_title('valence DISTRIBUTION FROM DIFFERENT ARTISTS')\nax.legend(fontsize = 14)\n\n# danceability\nfig, ax = plt.subplots(figsize=(20,10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\",font_scale=2, rc={\"lines.linewidth\": 2})\n\nsns.distplot(df_top1['danceability'], color='y',label=\"\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439\")\nsns.distplot(df_top2['danceability'], color='b',label=\"Francisco Canaro\")\nsns.distplot(df_top3['danceability'], color='m',label=\"\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a\")\nsns.distplot(df_top4['danceability'], color='g',label=\"Ignacio Corsini\")\nsns.distplot(df_top5['danceability'], color='r',label=\"Frank Sinatra\")\n\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'for all the audio characteristics'\n\nax.set_xticklabels(ax.get_xticklabels(labels), rotation=30, ha='left')\nplt.rcParams[\"xtick.labelsize\"] = 15\n\n\nax.set_title('danceability DISTRIBUTION FROM DIFFERENT ARTISTS')\nax.legend(fontsize = 14)\n\n# for liveness\nfig, ax = plt.subplots(figsize=(20,10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\",font_scale=2, rc={\"lines.linewidth\": 2})\n\nsns.distplot(df_top1['liveness'], color='y',label=\"\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439\")\nsns.distplot(df_top2['liveness'], color='b',label=\"Francisco Canaro\")\nsns.distplot(df_top3['liveness'], color='m',label=\"\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a\")\nsns.distplot(df_top4['liveness'], color='g',label=\"Ignacio Corsini\")\nsns.distplot(df_top5['liveness'], color='r',label=\"Frank Sinatra\")\n\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'for all the audio characteristics'\n\nax.set_xticklabels(ax.get_xticklabels(labels), rotation=30, ha='left')\nplt.rcParams[\"xtick.labelsize\"] = 15\n\n\nax.set_title('liveness DISTRIBUTION FROM DIFFERENT ARTISTS')\nax.legend(fontsize = 14)\n\n# for loudness\nfig, ax = plt.subplots(figsize=(20,10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\",font_scale=2, rc={\"lines.linewidth\": 2})\n\nsns.distplot(df_top1['loudness'], color='y',label=\"\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439\")\nsns.distplot(df_top2['loudness'], color='b',label=\"Francisco Canaro\")\nsns.distplot(df_top3['loudness'], color='m',label=\"\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a\")\nsns.distplot(df_top4['loudness'], color='g',label=\"Ignacio Corsini\")\nsns.distplot(df_top5['loudness'], color='r',label=\"Frank Sinatra\")\n\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'for all the audio characteristics'\n\nax.set_xticklabels(ax.get_xticklabels(labels), rotation=30, ha='left')\nplt.rcParams[\"xtick.labelsize\"] = 15\n\n\nax.set_title('loudness DISTRIBUTION FROM DIFFERENT ARTISTS')\nax.legend(fontsize = 14)\n\n# fro tempo \nfig, ax = plt.subplots(figsize=(20,10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\",font_scale=2, rc={\"lines.linewidth\": 2})\n\nsns.distplot(df_top1['tempo'], color='y',label=\"\u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439\")\nsns.distplot(df_top2['tempo'], color='b',label=\"Francisco Canaro\")\nsns.distplot(df_top3['tempo'], color='m',label=\"\u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a\")\nsns.distplot(df_top4['tempo'], color='g',label=\"Ignacio Corsini\")\nsns.distplot(df_top5['tempo'], color='r',label=\"Frank Sinatra\")\n\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'for all the audio characteristics'\n\nax.set_xticklabels(ax.get_xticklabels(labels), rotation=30, ha='left')\nplt.rcParams[\"xtick.labelsize\"] = 15\n\n\nax.set_title('tempo DISTRIBUTION FROM DIFFERENT ARTISTS')\nax.legend(fontsize = 14)\n","062709dc":"chart = sns.catplot(x=\"key\", y=\"acousticness\", hue=\"mode\", data=data, height=14, aspect=1.6, kind=\"bar\", palette=\"muted\");\nchart.set_xticklabels(rotation=45);\n\nchart = sns.catplot(x=\"key\", y=\"danceability\", hue=\"mode\", data=data, height=14, aspect=1.6, kind=\"bar\", palette=\"muted\");\nchart.set_xticklabels(rotation=45);\n\nchart = sns.catplot(x=\"key\", y=\"energy\", hue=\"mode\", data=data, height=14, aspect=1.6, kind=\"bar\", palette=\"muted\");\nchart.set_xticklabels(rotation=45);\n\nchart = sns.catplot(x=\"key\", y=\"speechiness\", hue=\"mode\", data=data, height=14, aspect=1.6, kind=\"bar\", palette=\"muted\");\nchart.set_xticklabels(rotation=45);","670cd3d6":"from wordcloud import WordCloud\nplt.style.use('seaborn')\nwrds1 = data_top50[\"Artist.Name\"].str.split(\"(\").str[0].value_counts().keys()\n\nwc1 = WordCloud(scale=5,max_words=1000,colormap=\"rainbow\",background_color=\"white\").generate(\" \".join(wrds1))\nplt.figure(figsize=(12,18))\nplt.imshow(wc1,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Artist Name for top 50 songs \",color='b')\nplt.show()","edca5a54":"\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\ng = sns.relplot(\n    data=data,\n    x=\"liveness\", y=\"popularity\",\n    hue=\"year\", size=\"key\",col=\"explicit\",\n    palette=cmap, sizes=(10, 200),\n)\n\ng.despine(left=True, bottom=True)\n\n\ncmap_ = sns.cubehelix_palette(rot=-.30, as_cmap=True)\ng = sns.relplot(\n    data=data,\n    x=\"liveness\", y=\"popularity\",\n    hue=\"year\", size=\"key\",col=\"mode\",\n    palette=cmap_, sizes=(10, 200),\n)\n\ng.despine(left=True, bottom=True)","4ac3547f":"f, ax = plt.subplots(1,2,figsize=(15, 6.5))\nsns.despine(f, left=True, bottom=True)\nsns.scatterplot(x=\"loudness\", y=\"duration_ms\",\n                hue=\"year\", size=\"key\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(20, 200), linewidth=0,\n                data=data, ax=ax[0]).set(title='loudness with data.csv')\nsns.scatterplot(x=\"loudness\", y=\"duration_ms\",\n                hue=\"year\", size=\"key\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(20, 200), linewidth=0,\n                data=data_yr, ax=ax[1]).set(title='loudness with data_genres.csv')","69c629f4":"fig,ax = plt.subplots(figsize=(20, 10))\nsns.despine(fig, left=True, bottom=True)\nsns.set_context(\"notebook\", font_scale=2, rc={\"lines.linewidth\": 3})\n\ncolumns = [\"acousticness\",\"danceability\",\"energy\",\"speechiness\",\"liveness\",\"valence\"]\nfor col in columns:\n    x = data.groupby(\"year\")[col].mean()\n    ax= sns.lineplot(x=x.index,y=x,label=col)\nax.set_title('Audio characteristics over year in Data.csv')\nax.set_ylabel('Measure')\nax.set_xlabel('Year')","88b9b316":"plt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('tableau-colorblind10')\n\nsns.countplot(data['key'], palette = 'BuPu')\nplt.title('Comparison of key', fontweight = 30, fontsize = 20)\nplt.xlabel('key')\nplt.ylabel('count')\nplt.xticks(rotation = 90)\nplt.show()","12eee0c8":"from yellowbrick.features import JointPlotVisualizer\n\n\nfeature_names_art = ['acousticness', 'danceability', 'energy', 'instrumentalness',\n       'liveness', 'loudness', 'speechiness', 'tempo', 'valence','duration_ms','key','mode']\n\nX, y = data_ar[feature_names_art], data_ar['popularity']\n\nfeatures = np.array(feature_names_art)\n\n# Instantiate the visualizer\nvisualizer = FeatureCorrelation(labels=features)\n\nplt.rcParams['figure.figsize'] = (12,6)\nvisualizer.fit(X, y)        # Fit the data to the visualizer\nvisualizer.show()  \n\n# Instantiate the visualizer\nvisualizer = JointPlotVisualizer(columns=\"danceability\")\n\nvisualizer.fit_transform(X, y)        # Fit and transform the data\nvisualizer.show()  ","5d32ae21":"# Instantiate the visualizer\nvisualizer = JointPlotVisualizer(columns=\"tempo\")\n\nplt.rcParams['figure.figsize'] = (12,6)\nvisualizer.fit_transform(X, y)        # Fit and transform the data\nvisualizer.show() ","31c43766":"# Instantiate the visualizer\nvisualizer = JointPlotVisualizer(columns=\"loudness\")\n\nplt.rcParams['figure.figsize'] = (12,6)\nvisualizer.fit_transform(X, y)        # Fit and transform the data\nvisualizer.show() ","aa4eaa6d":"visualizer = JointPlotVisualizer(columns=\"liveness\")\n\nplt.rcParams['figure.figsize'] = (12,6)\nvisualizer.fit_transform(X, y)        # Fit and transform the data\nvisualizer.show()","91dba02b":"f, ax = plt.subplots(1,2,figsize=(15, 6.5))\nsns.despine(f, left=True, bottom=True)\nsns.scatterplot(x=\"liveness\", y=\"popularity\",\n                hue=\"year\", size=\"key\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(20, 200), linewidth=0,\n                data=data_yr, ax=ax[0]).set(title='...liveness...')\nsns.scatterplot(x=\"loudness\", y=\"popularity\",\n                hue=\"year\", size=\"key\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(20, 200), linewidth=0,\n                data=data_yr, ax=ax[1]).set(title='...loudness...')","a1b14148":"f, ax = plt.subplots(1,2,figsize=(15, 6.5))\nsns.despine(f, left=True, bottom=True)\nsns.scatterplot(x=\"danceability\", y=\"popularity\",\n                hue=\"year\", size=\"key\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(20, 200), linewidth=0,\n                data=data_yr, ax=ax[0]).set(title='...danceability...')\nsns.scatterplot(x=\"tempo\", y=\"popularity\",\n                hue=\"year\", size=\"key\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(20, 200), linewidth=0,\n                data=data_yr, ax=ax[1]).set(title='...tempo...')","ba392fdf":"use_col = ['acousticness','danceability','loudness','popularity','duration_ms','energy','speechiness','valence']","e32ca617":"df_mod = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv', usecols=use_col,nrows=30000)\ndf_mod.to_csv('file1.csv') \ndf_mod.head()","34394505":"cor = df_mod.corr()\nsns.heatmap(cor)","6db61b1c":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nX = df_mod.drop(columns=['popularity'])\ny = df_mod['popularity']","805e7288":"x_train,x_test,y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=27)","9a55f0d6":"print(\"num of  train sample in train set:\",x_train.shape)\nprint(\"Number of samples in validation set:\",y_test.shape)","1876e5f7":"#model = RandomForestRegressor()\n#n_estim = range(100,1000,100)\n#param_grid = {\"n_estimators\":n_estim}\n#model_rf = GridSearchCV(model, param_grid=param_grid,cv=5, scoring='r2',n_jobs=4, verbose=1)\n\n#model_rf.fit(x_train, y_train)\n#print(model_rf.best_score_)\n#model_rf.best_estimator_","c423ffcc":"from sklearn.ensemble import RandomForestRegressor\nrandom_forest = RandomForestRegressor()\n\nrandom_forest.fit(x_train, y_train)\nY_pred_rf = random_forest.predict(x_test)\nrandom_forest.score(x_train,y_train)\nacc_random_forest = round(random_forest.score(x_train,y_train) * 100, 2)\n\nprint(\"Important features\")\npd.Series(random_forest.feature_importances_,x_train.columns).sort_values(ascending=True).plot.barh(width=0.8)\nprint('__'*30)\nprint(acc_random_forest)","226ff97b":"mymodle = open('fordeploy.pkl', 'wb')","2b8173f1":"import pickle \n\npickle.dump(random_forest,mymodle,protocol=pickle.HIGHEST_PROTOCOL)","6677d354":"mymodle.close()","10df89f4":"import numpy as np \nimport pickle\n\nmymodel = open('fordeploy.pkl', 'rb')\n\nmodel = pickle.load(mymodel)\n\ndata = np.array([0.995,0.708,158648,0.1950,\t-12.428,0.0506,0.7790])\ndata = data.reshape(1,-1)\n\npre = model.predict(data)\nprint(pre)","2140bee8":"import streamlit as st \nimport streamlit.components.v1 as components \n\n# load the saved model \npickle_in = open(\"fordeploy.pkl\",\"rb\")\nmodel=pickle.load(pickle_in)\n\n\ndef predict_popu(acousticness,danceability,duration_ms,energy,loudness,speechiness,valence):\n    \"\"\"\n    this method is for prediction process \n    takes all the Audio characteristics thtat we used for modelling and returns the prediction \n    \"\"\"\n    prediction=model.predict([[acousticness,danceability,duration_ms,energy,loudness,speechiness,valence]])\n    print(prediction)\n    return prediction\n\n\n\ndef main():\n    st.title(\"Spotify songs\")\n     \n    html_temp2 = \"\"\"\n\t\t<div style=\"background-color:royalblue;padding:10px;border-radius:10px\">\n\t\t<h2 style=\"color:white;text-align:center;\">Spotify songsr <\/h2>\n        <h1 style=\"color:white;text-align:center;\">Popularity prediction<\/h1>\n\t\t<\/div>\n\t\t\"\"\"\n    # a simple html code for heading which is in blue color and we can even use \"st.write()\" also ut for back ground color i used this HTML ..... \n    #  to render this we use ...\n    components.html(html_temp2)\n    # components.html() will render the render the \n\n    components.html(\"\"\"\n                <img src=\"https:\/\/www.tech-recipes.com\/wp-content\/uploads\/2016\/02\/Spotify.png\" width=\"700\" height=\"150\">\n                \n                \"\"\")\n    # this is to insert the image the in the wed app simple <imag\/> tag in HTML\n    \n    #now lets get the test input from the user by wed app \n    # for this we can use \"st.text_input()\" which allows use to get the input from the user \n    \n    acousticness = st.text_input(\"acousticness\",\"Type Here\")\n    danceability = st.text_input(\"danceability\",\"Type Here\")\n    duration_ms = st.text_input(\"duration_ms\",\"Type Here\")\n    energy = st.text_input(\"energy\",\"Type Here\")\n    loudness = st.text_input(\"loudness\",\"Type Here\")\n    speechiness = st.text_input(\"speechiness\",\"Type Here\")\n    valence = st.text_input(\"valence\",\"Type Here\")\n    result=\"\"\n    # done we got all the user inputs to predict and we need a button like a predict button we do that by \"st.button()\"\n    # after hitting the button the prediction process will go on and then we print the success message by \"st.success()\"\n    if st.button(\"Predict\"):\n        result=predict_popu(acousticness,danceability,duration_ms,energy,loudness,speechiness,valence)\n    st.success('The Popularity of the song is {}'.format(result))\n    # one more button saying About ...\n    if st.button(\"About\"):\n        st.text(\"Lets LEarn\")\n        st.text(\"Built with Streamlit\")\n\nif __name__=='__main__':\n    main()","c568577e":"### Liveness VS Pupolarity\n\n> **\"liveness\" of the song VS \"popularity\" by \"years\" with  Size \"key\" and for two binary attributes \"explict\" of the song and \"mode\" of the song**","58de2efe":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcREYV9sXfo_8FdHZ4MVHjN_LmXIUNKCvk6BbA&usqp=CAU)\n\nhello alll \n\nhope your are fine with good health  \n\nso, in this notebook i will try to do all end to end ml .. i mean from EDA(Exploratory Data Analysis) to Deploying the Final Trained Model \n\ngenerally the common  path of any end to end ML Project is like \n\n* Data Collection and Problem Statement\n* Exploratory Data Analysis \n* Data Preparation(feature engineering)\n* Selecting and Training a few Machine Learning Models\n* Cross-Validation and Hyperparameter Tuning\n* Deploying the Final Trained Model  \n\nlet me try all this in this notebook ","110ca9c9":"great .. totally we hvae 9 features with +ve correlation and 5 -ve .... ","51ba31e1":"- ok ...!! now lets try to build and deploy the model  \n\ni am going to use only few Audio characteristics with just 30000 records for model ..","5602dda9":"done ...!! we are actually done with simply model that is \"RandomForestRegressor\" ... so now all we need to so is creating ...\n\n### API (application programming interface)\n\nfor this we have so many way to do but out of all let me try \n\n* ## [Streamlit](https:\/\/www.streamlit.io\/) \n* ## [Flask](https:\/\/flask.palletsprojects.com\/en\/1.1.x\/)\n\nto install Streamlit \n\n> ### pip install Streamlit\n\n### one advantage of Streamlit is we dont need compelete html code for wed app it will integrate by itself .. and veary simply to code for any machine learning model for complete code and go through the [documentation](https:\/\/docs.streamlit.io\/en\/stable\/) ","2d38debe":"# bivariate analysis ","77274041":"i am very bad at russian i cant understand few names but its ok i have google... .....so  as we can see there are Top 5 artists  \n\n* \u042d\u0440\u043d\u0435\u0441\u0442 \u0425\u0435\u043c\u0438\u043d\u0433\u0443\u044d\u0439 (Ernest Hemingway ) \n* Francisco Canaro \n* \u042d\u0440\u0438\u0445 \u041c\u0430\u0440\u0438\u044f \u0420\u0435\u043c\u0430\u0440\u043a (Erich Maria Remarque) \n* Ignacio Corsini\n* Frank Sinatra \n\nas we all know that artists based on the genres and their creativity they make songs so now lets make a analysis of Audio Characteristics by each artists   lets use few Audio Characteristics like \"acousticness\", \"danceability\", \"speechiness\", \"energy\" and \"valence\" ..... as all this valuses are in range of 0 to 1 i hope we can see a clear change..... lets hope so ..","c4fef175":"Probplot for the feartures .","65cb9ac3":"### firstly lets check for all the alalysis with target  that is   ...  \"popularity\" .... and before going to the analysis lets check for the Feature Correlation by consibering few features\n\nfor this i'm going to use [yellowbrick](https:\/\/www.scikit-yb.org\/en\/latest\/index.html) ... ","980b85eb":"### Loudness VS Pupolarity\n\n> **\"Loudness\" of the song VS \"popularity\" by \"years\" with  Size \"key\" and for two binary attributes \"explict\" of the song and \"mode\" of the song**","1a83c1ef":"hmm.. good this Loudness have good relation with popularity .. wel loud songs get more popularity ?? ","f808a062":"lets maek analysis for the key and the mode with all different Audio Characteristics ","2fff53fc":"lets check with the target ....... \"**popularity**\"","67c83673":"displot for the feartures .","4b2d55a0":"* as we can see here in most of the genres \"acousticness\" have more affect \n* \"movie tunes\" and \"show Tunnes\" looks like they have their Audio characteristics \"valence\" as low and \"acousticness\" as high \n* \"classical piano\" genres have \"acousticness\" as most no \"speechiness\" and \"energy\"\n* generally \"sleep betts\" should be with low \"acousticness\" and \"danceability\" ... the same we can see .... ","31df7aeb":"lets try seeing in form of Wordcloud for top50 Artist songs in 2019 ","42ff05ce":"so popularity ranges from 0 to 100 ... so  Probability of song getting more than 40 is just 38.1 , well getting a song popular is bit difficult task right !!","608a8726":"> * **\"popularity VS \"loudness\" by \"years\" and with size \"key\"** \n> * **\"popularity VS \"liveness\" by \"years\" and with size \"key\"**","2d39c9c5":"Audio characteristics like \"acousticness\",\"danceability\",\"energy\",\"speechiness\",\"liveness\",\"valence\" over year ","7063f226":"to deploy as model we need to save the model and use that for making predicts.... so lets save the model using .pkl ","30775037":"hope you can see the difference ","e4cb14d9":"this is so simple and very easy to do likes wish we can actually deploy any machine learning model into production and we do have lots of free colud application platform too like [Heroku](https:\/\/www.heroku.com\/)there is a simple process to make it public \n\ni will try to make few notebook on deploying beacause we have so many easy way of doing it like we do have [Gradio](https:\/\/gradio.app\/) which so simple than streamlit. and i will update the notebook for Flask too \n\nstay tunned \n\n### thank you ","a90d1c6e":"loudness by artist ... ","87e1e062":"# Univariate analysis\n\nThe primary concern here is to establish a threshold that defines an observation as an outlier. To do so, we'll standardize the data. In this context, data standardization means converting data values to have mean of 0 and a standard deviation of 1","da2d3a0b":"so this look simple and neat and easy understanding tooo \n\n**to run the Streamlit wed app we should use **\n\n> ## streamlit run filename.py \n\nthen this gives use \n- local url and Network url \n\nand the output looks like this ....\n\n\n![spotiy.png](attachment:spotiy.png)\n\nand all we need to do is fill the values and hit predict ...\n\nthen the out look likes \n\n![prediction.png](attachment:prediction.png)","89f317a5":"if i assume \"[]\" as a null place r missing values..... as we can  there are Top 4 genres \n\n* Movie tunnes \n* show tunnes\n* classical piano \n* sleep \n\nas we all know that based on the genres we the Audio Characteristics will change by key(All keys on octave encoded as values ranging from 0 to 11, starting on C as 0, C# as 1 and so on\u2026) used. so now lets check for some  Audio Characteristics like \"acousticness\", \"danceability\", \"speechiness\", \"energy\" and \"valence\" ..... as all this valuses are in range of 0 to 1 i hope we can see a clear change..... lets see ","c5dd7c2e":"> * **\"popularity VS \"danceability\" by \"years\" and with size \"key\"** \n> * **\"popularity VS \"tempo\" by \"years\" and with size \"key\"**","d5d22a3e":"lets check out the relation","a8e359f2":"i am not going to concentrate more on modelling(i hope all of us are good at making modelling) but more on deploying the modle as a wed app\n\ni feel \n\n\n## \"No machine learning model is valuable, untill & unless it\u2019s deployed to production.\"\n","85d4de30":"**before moving to the complete features analysis lets just check for features with more than 0.4 correlation**","e8eb3530":"tempo by artist ... ","e93a18a0":"liveness by artist ... ","29968ceb":"# build and deploy the model ","3404d7af":"usually by years and technology the instruments in music had a great change i feel ... \n..\nso lets check the change of Audio characteristics over year once "}}