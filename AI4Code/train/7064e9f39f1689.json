{"cell_type":{"aa8c688e":"code","67cc5bce":"code","aef8afd4":"code","f219348d":"code","e2e04563":"code","c364cb3a":"code","aa07d9de":"code","c75dde69":"code","82ca60c0":"code","4d5345dd":"code","12779ed6":"code","6362989e":"code","ad76d33a":"code","f65d2837":"code","864289fb":"code","0e40d144":"code","f66187f3":"code","17c5fe88":"code","7d76b505":"code","c7c26392":"code","1566da55":"code","0f5d56d8":"code","2a0d26e7":"code","dd862432":"code","dfc26bdd":"code","dddc40ac":"code","0178c0b8":"code","a8339b1f":"code","b9637a98":"code","1e7ec094":"code","3e7a0ad1":"code","5f361493":"code","3eeee5da":"code","168b1a76":"code","646e0e44":"code","a7b41913":"code","a2cfa65c":"code","62826f99":"code","9d763ed3":"code","d86f3c88":"code","40e95621":"code","a176307c":"code","f189706c":"code","28e9177d":"code","bfe57c3d":"code","e6de35b1":"code","3acc5264":"code","2340c611":"code","50b50c4e":"code","46fa5171":"code","b711d350":"code","4e680c14":"code","cbcfb07a":"code","4a283e46":"code","fddfaa17":"code","0215863c":"code","08ed224d":"code","8c741f35":"code","8fbaf50c":"code","e32a6fbf":"code","73499a8a":"code","156de5ec":"code","44f1517c":"code","56fddd72":"code","cfaa1f89":"code","9fd9333e":"code","634d17e5":"code","76540344":"code","8813fe99":"code","bc1cfc15":"code","021fc3eb":"code","247efbb8":"code","90914027":"code","a5cc15a0":"code","3f0a129d":"code","324daffb":"code","f1b0d6b6":"code","239b8355":"code","555e4828":"code","5f3f198b":"code","2a86c635":"code","41f19803":"code","e6543ae3":"markdown","6e5483a0":"markdown","cc761203":"markdown","c8c2f852":"markdown","cebbb64f":"markdown","654818c5":"markdown","8ebf7fc8":"markdown","fc814b7b":"markdown","774ef981":"markdown","1fc56201":"markdown","89b744d3":"markdown","654f1fe4":"markdown","e2208e76":"markdown","a1d193c9":"markdown","676f27d3":"markdown","b4ad6df5":"markdown","655b8adb":"markdown","580513eb":"markdown","5319f2a9":"markdown","e39eacec":"markdown"},"source":{"aa8c688e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nimport datetime as datetime\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n%matplotlib inline\nplt.style.use('ggplot')","67cc5bce":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","aef8afd4":"# Getting Rows and Columns count\ntrain.shape","f219348d":"# First five records\ntrain.head()","e2e04563":"# Data information\ntrain.info()","c364cb3a":"# Statistical Description\ntrain.describe(include=\"all\")","aa07d9de":"# Show columns\ntrain.columns","c75dde69":"# device details\ntrain['device'].head()","82ca60c0":"# device json columns\ndevice_list=train['device'].apply(json.loads).tolist()\nkeys=[]\n\nfor i in device_list:\n    for j in list(i.keys()):\n        if j not in keys:\n            keys.append(j)\nkeys","4d5345dd":"# device json data for first object\ntrain['device'].apply(json.loads)[0]","12779ed6":"# Flatten device details and create a new DataFrame for device \ndevice_df=pd.DataFrame(train['device'].apply(json.loads).tolist())[['browser','deviceCategory','operatingSystem','language','browserVersion','browserSize','mobileDeviceMarketingName','mobileDeviceModel','screenResolution']]\ndevice_df.head()","6362989e":"#geoNetwork data\ntrain['geoNetwork'].head()","ad76d33a":"# geoNetwork json columns\ngeoNetwork_list=train['geoNetwork'].apply(json.loads).tolist()\nkeys=[]\nfor i in geoNetwork_list:\n    for j in list(i.keys()):\n        if j not in keys:\n            keys.append(j)\n\nkeys","f65d2837":"# geoNetwork json data for first object\ntrain['geoNetwork'].apply(json.loads)[0]","864289fb":"# Flatten geoNetwork details and create a new DataFrame for geoNetwork \ngeoNetwork_df=pd.DataFrame(train['geoNetwork'].apply(json.loads).tolist())[['continent','subContinent','region','country','city','metro','networkLocation','latitude','longitude','networkDomain']]\ngeoNetwork_df.head()","0e40d144":"# totals data\ntrain['totals'].head()","f66187f3":"#totals json columns\ntotals_list=train['totals'].apply(json.loads).tolist()\nkeys=[]\nfor i in totals_list:\n    for j in list(i.keys()):\n        if j not in keys:\n            keys.append(j)\n            \nkeys","17c5fe88":"#totals json data for first object\ntrain['totals'].apply(json.loads)[0]","7d76b505":"# Flatten totals details and create a new DataFrame for totals \ntotals_df=pd.DataFrame(train['totals'].apply(json.loads).tolist())[['bounces','hits','newVisits','pageviews','visits','transactionRevenue']]\ntotals_df.head()","c7c26392":"# trafficCource data\ntrain['trafficSource'].head()","1566da55":"#trafficSource json columns\ntrafficSource_list=train['trafficSource'].apply(json.loads).tolist()\nkeys=[]\nfor i in trafficSource_list:\n    for j in list(i.keys()):\n        if j not in keys:\n            keys.append(j)\n            \nkeys","0f5d56d8":"#trafficSource json data for first object\ntrain['trafficSource'].apply(json.loads)[0]","2a0d26e7":"# Flatten trafficSource details and create a new DataFrame for trafficSource\ntrafficSource_df=pd.DataFrame(train['trafficSource'].apply(json.loads).tolist())[['adwordsClickInfo','campaign','keyword','medium','source','isTrueDirect','campaignCode','referralPath','adContent']]\ntrafficSource_df.head()","dd862432":"#adwordsClickInfo json columns\nadwordsClickInfo_list=trafficSource_df['adwordsClickInfo'].apply(json.dumps).apply(json.loads).tolist()\nkeys=[]\nfor i in adwordsClickInfo_list:\n    for j in i.keys():\n        if j not in keys:\n            keys.append(j)\n            \nkeys","dfc26bdd":"#adwordsClickInfo json data for first object\ntrafficSource_df['adwordsClickInfo'].apply(json.dumps).apply(json.loads)[0]","dddc40ac":"# Flatten adwordsClickInfo details and create a new DataFrame for adwordsClickInfo\nadwordsClickInfo_df=pd.DataFrame(trafficSource_df['adwordsClickInfo'].apply(json.dumps).apply(json.loads).tolist())[['criteriaParameters','page','isVideoAd','gclId','adNetworkType','slot','targetingCriteria']]\nadwordsClickInfo_df.head()","0178c0b8":"#Combine the DataFrames\ndf=pd.concat([train[['channelGrouping', 'date', 'device', 'fullVisitorId', 'geoNetwork','sessionId', 'socialEngagementType', 'totals', 'trafficSource',\n       'visitId', 'visitNumber', 'visitStartTime']], device_df, geoNetwork_df, totals_df, trafficSource_df,adwordsClickInfo_df], axis=1)","a8339b1f":"#Extract Date\ndf['date']=pd.to_datetime(df['date'], format=\"%Y%m%d\")\ndf['date'].head()","b9637a98":"#Extract Time from visitStartTime timestamp\ndf['visitStartTime']=pd.to_datetime(df['visitStartTime'],unit='s')\ndf['visitStartTime'].head()","1e7ec094":"#Getting year, month and day from date\ndf['year']=df['date'].dt.year\ndf['month']=df['date'].dt.month\ndf['day']=df['date'].dt.day\ndf[['year','month','day']].head()","3e7a0ad1":"#Getting hour and minute from visitStartTime\ndf['hour']=df['visitStartTime'].dt.hour\ndf['minute']=df['visitStartTime'].dt.minute\ndf['hour'].head()","5f361493":"# First five records\ndf.head()","3eeee5da":"# Rows and Columns counts\ndf.shape","168b1a76":"# Show Columns\ndf.columns","646e0e44":"# Data Decsription\n# df.describe(include=\"all\")","a7b41913":"# Data types\ndf.dtypes","a2cfa65c":"# Data information\ndf.info()","62826f99":"# channelGrouping summary\ndf['channelGrouping'].value_counts()","9d763ed3":"# Visualize channelGrouping summary\ndf['channelGrouping'].value_counts().plot(kind='bar', figsize=(15,8))","d86f3c88":"# Browser summary\ndf['browser'].value_counts()","40e95621":"# Visualize browser summary\ndf['browser'].value_counts().head(10).plot(kind='bar', figsize=(15,8))","a176307c":"# deviceCategory summary\ndf['deviceCategory'].value_counts()","f189706c":"# Visualize deviceCategory summary\ndf['deviceCategory'].value_counts().plot(kind='bar', figsize=(15,8))","28e9177d":"# operatingSystem summary\ndf['operatingSystem'].value_counts()","bfe57c3d":"# Visualize operatingSystem summary\ndf['operatingSystem'].value_counts().plot(kind='bar', figsize=(15,8))","e6de35b1":"# continent summary\ndf['continent'].value_counts()","3acc5264":"# Visualize continent summary\ndf['continent'].value_counts().plot(kind='bar', figsize=(15,8))","2340c611":"# subContinent summary\ndf['subContinent'].value_counts()","50b50c4e":"# Visualize subContinent summary\ndf['subContinent'].value_counts().plot(kind='bar',figsize=(15,8))","46fa5171":"# country summary\ndf['country'].value_counts()","b711d350":"# Visualize country summary\ndf['country'].value_counts().head(10).plot(kind='bar', figsize=(15,8))","4e680c14":"# region summary\ndf['region'].value_counts()","cbcfb07a":"# Visualize region summary\ndf['region'].value_counts().head(10).plot(kind='bar', figsize=(15,8))","4a283e46":"# medium summary\ndf['medium'].value_counts()","fddfaa17":"# Visualize medium summary\ndf['medium'].value_counts().plot(kind='bar', figsize=(15,8))","0215863c":"# source summary\ndf['source'].value_counts()","08ed224d":"# Visualize source summary\ndf['source'].value_counts().head(10).plot(kind='bar', figsize=(15,8))","8c741f35":"# year summary\ndf['year'].value_counts()","8fbaf50c":" #Visualize year summary\ndf['year'].value_counts().plot(kind='bar', figsize=(15,8))","e32a6fbf":"# Summary by country and number of hits\ndf.groupby(['country'])['hits'].count()","73499a8a":"# visualizing country and number of hits\ndf.groupby(['country'])['hits'].count().sort_values().tail(10).plot(kind='barh', figsize=(15,8))","156de5ec":"# Summary by country and number of pageviews\ndf.groupby(['country'])['pageviews'].count()","44f1517c":"# visualizing country and number of pageviews\ndf.groupby(['country'])['pageviews'].count().sort_values().tail(10).plot(kind='barh', figsize=(15,8))","56fddd72":"# Doing analysis in transactionRevenue data needs to be in numeric format\ndf['transactionRevenue']=df['transactionRevenue'].fillna(0)\ndf['transactionRevenue']=df['transactionRevenue'].astype(np.int64)\ndf['transactionRevenue'].dtypes","cfaa1f89":"# deviceCategory and total transactionRevenue\ndf.groupby(['deviceCategory'])['transactionRevenue'].sum()","9fd9333e":"# visualizing deviceCategory and total transactionRevenue\ndf.groupby(['deviceCategory'])['transactionRevenue'].sum().plot(kind='bar',figsize=(15,8))","634d17e5":"# country and total transactionRevenue\ndf.groupby(['country'])['transactionRevenue'].sum().sort_values()","76540344":"# visualizing country and total transactionRevenue\ndf.groupby(['country'])['transactionRevenue'].sum().sort_values().tail(10).plot(kind='barh', figsize=(15,8))","8813fe99":"# browser and total transactionRevenue\ndf.groupby(['browser'])['transactionRevenue'].sum().sort_values()","bc1cfc15":"# visualizing browser and total transactionRevenue\ndf.groupby(['browser'])['transactionRevenue'].sum().sort_values().tail(10).plot(kind='barh', figsize=(15,8))","021fc3eb":"# date and total transactionRevenue\ndf.groupby(['date'])['transactionRevenue'].sum().sort_values().tail(10)","247efbb8":"# visualizing date and total transactionRevenue\ndf.groupby(['date'])['transactionRevenue'].sum().sort_values().tail(10).plot(kind='barh', figsize=(15,8))","90914027":"# channelGrouping and total transactionRevenue\ndf.groupby(['channelGrouping'])['transactionRevenue'].sum()","a5cc15a0":"# visualizing channelGrouping and total transactionRevenue\ndf.groupby(['channelGrouping'])['transactionRevenue'].sum().sort_values().plot(kind='barh', figsize=(15,8))","3f0a129d":"df=df[['channelGrouping', 'fullVisitorId', 'visitNumber','browser', 'deviceCategory', 'operatingSystem', 'continent',\n       'subContinent', 'region', 'country', 'city', 'bounces', 'hits','newVisits', 'pageviews', 'visits', 'transactionRevenue',\n        'campaign', 'keyword', 'medium', 'source','page','adNetworkType','month']]\n\ndf.shape","324daffb":"# Fill all NAN values with 0\ndf=df.fillna(0)","f1b0d6b6":"# Data types conversion\ndf['transactionRevenue']=df['transactionRevenue'].astype(np.int64)\ndf['hits']=df['hits'].astype(str).astype(np.int)\ndf['bounces']=df['bounces'].astype(str).astype(np.int)\ndf['newVisits']=df['newVisits'].astype(str).astype(np.int)\ndf['pageviews']=df['pageviews'].astype(str).astype(np.int)\ndf['visits']=df['visits'].astype(str).astype(np.int)","239b8355":"# Transform data\nle=preprocessing.LabelEncoder()\n\ndf['channelGrouping']=le.fit_transform(df['channelGrouping'].astype(str))\ndf['browser']=le.fit_transform(df['browser'].astype(str))\ndf['deviceCategory']=le.fit_transform(df['deviceCategory'].astype(str))\ndf['operatingSystem']=le.fit_transform(df['operatingSystem'].astype(str))\ndf['continent']=le.fit_transform(df['continent'].astype(str))\ndf['subContinent']=le.fit_transform(df['subContinent'].astype(str))\ndf['region']=le.fit_transform(df['region'].astype(str))\ndf['country']=le.fit_transform(df['country'].astype(str))\ndf['city']=le.fit_transform(df['city'].astype(str))\ndf['campaign']=le.fit_transform(df['campaign'].astype(str))\ndf['keyword']=le.fit_transform(df['keyword'].astype(str))\ndf['medium']=le.fit_transform(df['medium'].astype(str))\ndf['source']=le.fit_transform(df['source'].astype(str))\ndf['adNetworkType']=le.fit_transform(df['adNetworkType'].astype(str))","555e4828":"df['revenueLog']=df['transactionRevenue'].apply(lambda x :  np.log1p(x) if x>0 else 0)","5f3f198b":"# Flatten json data\ntest_device_df=pd.DataFrame(test['device'].apply(json.loads).tolist())[['browser','deviceCategory','operatingSystem','language','browserVersion','browserSize','mobileDeviceMarketingName','mobileDeviceModel','screenResolution']]\ntest_geoNetwork_df=pd.DataFrame(test['geoNetwork'].apply(json.loads).tolist())[['continent','subContinent','region','country','city','metro','networkLocation','latitude','longitude','networkDomain']]\ntest_totals_df=pd.DataFrame(test['totals'].apply(json.loads).tolist())[['bounces','hits','newVisits','pageviews','visits']]\ntest_trafficSource_df=pd.DataFrame(test['trafficSource'].apply(json.loads).tolist())[['adwordsClickInfo','campaign','keyword','medium','source','isTrueDirect','referralPath','adContent']]\ntest_adwordsClickInfo_df=pd.DataFrame(test_trafficSource_df['adwordsClickInfo'].apply(json.dumps).apply(json.loads).tolist())[['criteriaParameters','page','isVideoAd','gclId','adNetworkType','slot','targetingCriteria']]\n\n# join the flattened dataframes\ntest_df=pd.concat([test[['channelGrouping', 'date', 'device', 'geoNetwork','sessionId', 'socialEngagementType', 'totals', 'trafficSource',\n       'visitId', 'visitNumber', 'visitStartTime']], test_device_df, test_geoNetwork_df, test_totals_df, test_trafficSource_df, test_adwordsClickInfo_df], axis=1)\n\n# transofm date\ntest_df['date']=pd.to_datetime(test_df['date'], format=\"%Y%m%d\")\ntest_df['visitStartTime']=pd.to_datetime(test_df['visitStartTime'],unit='s')\n#Getting year, month and day from date\ntest_df['year']=test_df['date'].dt.year\ntest_df['month']=test_df['date'].dt.month\ntest_df['day']=test_df['date'].dt.day\n\n#Getting hour and minute from visitStartTime\ntest_df['hour']=test_df['visitStartTime'].dt.hour\ntest_df['minute']=test_df['visitStartTime'].dt.minute\ntest_df=test_df.fillna(0)\n\n# preprocess data\ntest_df['hits']=test_df['hits'].astype(str).astype(np.int)\ntest_df['bounces']=test_df['bounces'].astype(str).astype(np.int)\ntest_df['newVisits']=test_df['newVisits'].astype(str).astype(np.int)\ntest_df['pageviews']=test_df['pageviews'].astype(str).astype(np.int)\ntest_df['visits']=test_df['visits'].astype(str).astype(np.int)\n\ntest_df['channelGrouping']=le.fit_transform(test_df['channelGrouping'].astype(str))\ntest_df['browser']=le.fit_transform(test_df['browser'].astype(str))\ntest_df['deviceCategory']=le.fit_transform(test_df['deviceCategory'].astype(str))\ntest_df['operatingSystem']=le.fit_transform(test_df['operatingSystem'].astype(str))\ntest_df['continent']=le.fit_transform(test_df['continent'].astype(str))\ntest_df['subContinent']=le.fit_transform(test_df['subContinent'].astype(str))\ntest_df['region']=le.fit_transform(test_df['region'].astype(str))\ntest_df['country']=le.fit_transform(test_df['country'].astype(str))\ntest_df['city']=le.fit_transform(test_df['city'].astype(str))\ntest_df['campaign']=le.fit_transform(test_df['campaign'].astype(str))\ntest_df['keyword']=le.fit_transform(test_df['keyword'].astype(str))\ntest_df['medium']=le.fit_transform(test_df['medium'].astype(str))\ntest_df['source']=le.fit_transform(test_df['source'].astype(str))\ntest_df['adNetworkType']=le.fit_transform(test_df['adNetworkType'].astype(str))\n\n# Get only useful features as in the training set\ntest_df=test_df[['channelGrouping', 'visitNumber','browser', 'deviceCategory', 'operatingSystem', 'continent',\n       'subContinent', 'region', 'country', 'city', 'bounces', 'hits','newVisits', 'pageviews', 'visits',\n        'campaign', 'keyword', 'medium', 'source','page','adNetworkType','month']]\n\ntest_df.shape","2a86c635":"X=df[['channelGrouping','visitNumber','browser', 'deviceCategory', 'operatingSystem', 'continent',\n       'subContinent', 'region', 'country', 'city', 'bounces', 'hits','newVisits', 'pageviews', 'visits',\n        'campaign', 'keyword', 'medium', 'source','page','adNetworkType','month']]\ny=df['revenueLog']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3, random_state=7)\n\nrf_model=RandomForestRegressor()\nrf_model.fit(X_train,y_train)\npred_test=rf_model.predict(X_test)\nprint(\"Sample predictions : \",pred_test[0:5])\nprint(\"RMSE : \",np.sqrt(metrics.mean_squared_error(y_test,pred_test)))","41f19803":"importances=rf_model.feature_importances_\nindices=np.argsort(importances)[::-1]\nfeatures = [X.columns[i] for i in indices]\n\nplt.figure(figsize=(16,9))\nplt.title(\"Feature Importance\")\nplt.bar(range(X.shape[1]), importances[indices])\n# Add feature names as x-axis labels\nplt.xticks(range(X.shape[1]), features, rotation=90)\nplt.show()","e6543ae3":"# Select Useful Columns","6e5483a0":"# Load data","cc761203":"# Build and Train Random Forest Model","c8c2f852":"# To Continue........","cebbb64f":"### Flatten adwordsClickInfo data","654818c5":"# Import required packages","8ebf7fc8":"# Work with Missing Values","fc814b7b":"## Flatten device json details","774ef981":"## Flatten totals details","1fc56201":"## Flatten geoNetwork details","89b744d3":"# Preprocess Data","654f1fe4":"# Exploratory Data Analysis","e2208e76":"# Work with Date and Time","a1d193c9":"# Join DataFrames","676f27d3":"# Inspect data","b4ad6df5":"# Prepare Test Data","655b8adb":"# Clean Data","580513eb":"# Feature importance","5319f2a9":"## Flatten trafficCource data","e39eacec":"# Prepare Target Field"}}