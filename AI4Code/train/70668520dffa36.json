{"cell_type":{"92d1f1c3":"code","4edba924":"code","3f272655":"code","6753c374":"code","b1f4f46b":"code","ddef30b2":"code","4b2a1362":"code","dce2f748":"code","03e499b4":"code","17271a4b":"code","fc82de22":"code","114bc58b":"code","7fc1cbd6":"code","52a82a5b":"code","8f9eff3f":"code","530ec035":"code","2c594028":"code","0a476fb5":"code","89cd52e4":"code","755533e4":"code","39f84ba0":"code","08af880a":"markdown","1396f911":"markdown"},"source":{"92d1f1c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nfrom matplotlib import pyplot as plt #import pyplot\nimport seaborn as sns #import seaborn pour l'affichage \n\n#Import des utiles de train et report de sklearn \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score","4edba924":"df = pd.read_csv('..\/input\/voicegender\/voice.csv')","3f272655":"df.head(10)\n","6753c374":"df.columns","b1f4f46b":"from IPython.core.display import HTML # permet d'afficher du code html dans jupyter\ndisplay(HTML(df.head(10).to_html()))","ddef30b2":"df['label'] = df['label'].map({\"male\":0,\"female\":1})","4b2a1362":"y = df['label'].values\nX = df.drop(['label'], axis=1).values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","dce2f748":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","03e499b4":"model = Sequential()\nmodel.add(Dense(1, activation=\"sigmoid\"))","17271a4b":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","fc82de22":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=100, verbose=1)","114bc58b":"y_ann = model.predict(X_test)","7fc1cbd6":"y_ann = y_ann.flatten()","52a82a5b":"y_ann","8f9eff3f":"for y_a in y_ann :\n    if y_a > 0.5 :\n        y_a = 1\n    else :\n        y_a =0","530ec035":"y_ann = np.round(y_ann)\n","2c594028":"y_ann ","0a476fb5":"accuracy_score(y_test, y_ann)","89cd52e4":"confusion_matrix(y_test, y_ann)","755533e4":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","39f84ba0":"plot_scores(train)","08af880a":"On applique le mod\u00e8le Keras","1396f911":"On fait le split de test et train"}}