{"cell_type":{"4225b5b8":"code","d71b169a":"code","06814b48":"code","6447c39f":"code","ac65bf78":"code","eb2954c0":"code","597f9a4b":"code","478c057b":"code","73e7a711":"code","049bd2b0":"code","b484eba9":"code","f328fa77":"code","dc6d03fb":"code","56574447":"code","779b3ba8":"code","a0ff1454":"code","955f40f2":"code","373bea09":"code","c689d8b4":"code","afc75f7a":"code","5e659702":"code","2f84f410":"code","0052592f":"code","3d3db6f0":"code","6c3e02c3":"code","bcdfb8e0":"code","5b52fae4":"code","ba4a34ba":"code","03b9e04e":"code","25562a2f":"code","74e98392":"code","1e0d7dd3":"code","a752a100":"code","e3ae459c":"code","80927eeb":"code","169f8c71":"code","e8b97bb9":"code","0074800c":"code","980e1f1a":"code","abf3f754":"code","a8150bb2":"code","a85906fb":"code","83bc9f93":"code","37298d98":"code","b17c5416":"code","0f752864":"code","b4f787ed":"code","dd92567c":"code","1683e198":"code","f72c130d":"code","7cc78bdf":"code","cf4b582c":"code","6d5c74d1":"code","4684ae84":"code","41329f04":"code","c5a75290":"code","d56dce60":"code","7aa9e202":"code","5f3ba295":"code","ecc32019":"code","38c0515e":"code","bd4b04b3":"code","bea13c5e":"code","39945541":"code","e8978b95":"code","c97f5b51":"code","17fdeec6":"markdown","b87a40cf":"markdown","157859a6":"markdown","ea8c161d":"markdown","4773d379":"markdown","9937092c":"markdown","75e41547":"markdown","70b0237e":"markdown","b59275fc":"markdown","a5509af8":"markdown","9eedd606":"markdown","5ed5a40b":"markdown","75cfce9f":"markdown","e751694d":"markdown","cdcc3204":"markdown","e00c1185":"markdown","11a900d8":"markdown","bb1186b4":"markdown","6c2e2d34":"markdown","030ffa02":"markdown"},"source":{"4225b5b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d71b169a":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","06814b48":"test.head(3)","6447c39f":"train.info()","ac65bf78":"test.shape","eb2954c0":"y_pred = [0] * 418\nprint(y_pred)","597f9a4b":"# print(test[\"PassengerId\"])\n# print(y_pred)\n\nresult = pd.DataFrame({\n    'PassengerId': test['PassengerId'],\n    'Survived': y_pred\n})\nresult.head()","478c057b":"result.to_csv('submission.csv', index=False)","73e7a711":"print(train.shape, test.shape)","049bd2b0":"train.info()","b484eba9":"train['Survived'] = train['Survived'].astype('category')\ntrain['Pclass'] = train['Pclass'].astype('category')\ntrain['Sex'] = train['Sex'].astype('category')\ntrain['Embarked'] = train['Embarked'].astype('category')\n\ntest['Pclass'] = test['Pclass'].astype('category')\ntest['Sex'] = test['Sex'].astype('category')\ntest['Embarked'] = test['Embarked'].astype('category')","f328fa77":"train.info()\ntest.info()","dc6d03fb":"train['Survived'].value_counts() # \uc808\ub300 \ube48\ub3c4","56574447":"train['Survived'].value_counts(normalize=True) # \uc0c1\ub300\ube48\ub3c4","779b3ba8":"pd.DataFrame({\n    '\uc808\ub300\ube48\ub3c4': train['Survived'].value_counts(),\n    '\uc0c1\ub300\ube48\ub3c4': train['Survived'].value_counts(normalize=True)\n})","a0ff1454":"pd.DataFrame({\n    '\uc808\ub300\ube48\ub3c4': train['Embarked'].value_counts(),\n    '\uc0c1\ub300\ube48\ub3c4': train['Embarked'].value_counts(normalize=True)\n})","955f40f2":"pd.DataFrame({\n    '\uc808\ub300\ube48\ub3c4': train['Sex'].value_counts(),\n    '\uc0c1\ub300\ube48\ub3c4': train['Sex'].value_counts(normalize=True)\n})","373bea09":"pd.DataFrame({\n    '\uc808\ub300\ube48\ub3c4': train['Pclass'].value_counts(),\n    '\uc0c1\ub300\ube48\ub3c4': train['Pclass'].value_counts(normalize=True)\n})","c689d8b4":"import matplotlib.pyplot as plt\ntrain['Survived'].value_counts().plot.bar(rot=0)\nplt.show()\ntrain['Survived'].value_counts().plot.pie(autopct='%0.2f%%')\nplt.show()","afc75f7a":"print('\uc0ac\ubd84\uc704\uc218')\ntrain['Age'].quantile([0, 0.25, 0.5, 0.75, 1])","5e659702":"print('\ud3c9\uade0', train['Age'].mean())\nprint('\ud45c\uc900\ud3b8\ucc28', train['Age'].std())","2f84f410":"train.describe()","0052592f":"train['Age'].plot.hist(bins=20, grid=1)","3d3db6f0":"train['Age'].plot.box()\nplt.show()\ntrain['Age'].plot.hist(grid=1, bins=32)\nplt.show()\ntrain['Age'].plot.density()\nplt.show()","6c3e02c3":"import seaborn as sns\nsns.displot(train['Age'], kde=True)","bcdfb8e0":"train['Fare'].plot.box()\nplt.show()\nsns.displot(train['Fare'], kde=True)","5b52fae4":"# \uc808\ub300 \ube48\ub3c4\npd.crosstab(train['Survived'], train['Sex'], margins=True)","ba4a34ba":"# \uc0c1\ub300 \ube48\ub3c4\npd.crosstab(train['Survived'], train['Sex'], margins=True, normalize='columns')","03b9e04e":"pd.crosstab(train['Survived'], train['Parch'], margins=True)","25562a2f":"pd.crosstab(train['Survived'], train['Parch'], margins=True, normalize='columns')","74e98392":"pd.crosstab(train['Survived'], train['Parch'], margins=True, normalize=True)","1e0d7dd3":"sns.countplot(x=\"Embarked\", hue=\"Survived\", data=train)","a752a100":"pd.crosstab(train['Survived'], train['Embarked'], margins=True, normalize='columns')","e3ae459c":"train.corr()","80927eeb":"import seaborn as sns\n\n# \ud788\ud2b8\ub9f5, \ub192\uc740 \uc22b\uc790\/\ub0ae\uc740 \uc22b\uc790\uac00 \uc5b4\ub514\uc5d0 \uc788\ub294\uc9c0 \uc2dc\uac01\uc801\uc73c\ub85c \ud45c\ud604\ud558\ub294 \ub3c4\uad6c\nsns.heatmap(train.corr(), annot=True)","169f8c71":"sns.scatterplot(x='Fare', y='Age', hue='Survived', data=train)","e8b97bb9":"train.groupby(['Embarked'])['Age'].describe()","0074800c":"train.groupby(['Survived'])['Fare'].describe()","980e1f1a":"train.groupby(['Survived'])['SibSp'].describe()","abf3f754":"train.groupby(['Survived'])['Parch'].describe()","a8150bb2":"# \ubc94\uc8fc\ubcc4 boxplot\nsns.boxplot(x='Pclass', y='Age', data=train)","a85906fb":"# \ubc94\uc8fc\ubcc4 histogram\nsns.violinplot(x='Pclass', y='Age', hue='Survived', split=True, data=train)","83bc9f93":"sns.pairplot(train, hue='Pclass')","37298d98":"# \uc218\uce58\ud615 => \ubc94\uc8fc\ud615 \ubcc0\uc218 \ubcc0\ud658\ntrain['Age_Split'] = pd.cut(train['Age'],\n                            bins=[0, 10, 20, 35, 50, 100], \n                            labels=['0-10', '10-20', '20-35', '35-50', '50-100'])\ntrain.head()","b17c5416":"pd.crosstab(train['Survived'], train['Age_Split'], margins=True)","0f752864":"sns.countplot(x='Age_Split', hue='Survived', data=train)","b4f787ed":"train.isna().sum()","dd92567c":"train['Embarked'].value_counts()","1683e198":"train['Age'] = train['Age'].fillna(train['Age'].mean()) # \ud3c9\uade0\ntrain['Embarked'] = train['Embarked'].fillna('S') # \ucd5c\ube48\uac12","f72c130d":"train.isna().sum()","7cc78bdf":"y_train = train[['Survived']]\nx_train = train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\nprint(x_train.shape, y_train.shape)\nx_train.head()","cf4b582c":"# \uc6d0\ud56b\uc778\ucf54\ub529\nx_train_onehot = pd.get_dummies(x_train)\nprint(x_train_onehot.shape)\nx_train_onehot.head()","6d5c74d1":"import tensorflow as tf\n\nX = tf.keras.layers.Input(shape=[12])\nH = tf.keras.layers.Dense(16, activation='swish')(X)\nH = tf.keras.layers.Dense(16, activation='swish')(H)\nH = tf.keras.layers.Dense(16, activation='swish')(H)\nH = tf.keras.layers.Dense(16, activation='swish')(H)\nY = tf.keras.layers.Dense(1, activation='sigmoid')(H)\n\nmodel = tf.keras.models.Model(X, Y)\nmodel.compile(loss='binary_crossentropy', \n              metrics='accuracy', optimizer='adam')","4684ae84":"model.fit(x_train_onehot, y_train, validation_split=0.1,\n          epochs=100, batch_size=128)","41329f04":"# KNN\nfrom sklearn import model_selection\nfrom sklearn import neighbors\n\nmodel = neighbors.KNeighborsClassifier()\n\nk_fold = model_selection.KFold(n_splits=10, shuffle=True)\nscore = model_selection.cross_val_score(\n            model, x_train_onehot, y_train['Survived'], cv=k_fold)\nprint(score)\nprint(sum(score) \/ 10)","c5a75290":"# decision Tree\nfrom sklearn import model_selection\nfrom sklearn import tree\n\nmodel = tree.DecisionTreeClassifier()\n\nk_fold = model_selection.KFold(n_splits=10, shuffle=True)\nscore = model_selection.cross_val_score(\n    model, x_train_onehot, y_train['Survived'], cv=k_fold)\n\nprint(score)\nprint(sum(score) \/ 10)","d56dce60":"# Random Forest\nfrom sklearn import ensemble\nfrom sklearn import model_selection\n\nmodel = ensemble.RandomForestClassifier()\n\nk_fold = model_selection.KFold(n_splits=10, shuffle=True)\nscore = model_selection.cross_val_score(\n    model, x_train_onehot, y_train['Survived'], cv=k_fold)\n\nprint(score)\nprint(sum(score) \/ 10)","7aa9e202":"# Support Vector Machine (SVM)\nfrom sklearn import svm\nfrom sklearn import model_selection\n\nmodel = svm.SVC()\n\nk_fold = model_selection.KFold(n_splits=10, shuffle=True)\nscore = model_selection.cross_val_score(\n            model, x_train_onehot, y_train['Survived'], cv=k_fold)\n\nprint(score)\nprint(sum(score) \/ 10)","5f3ba295":"# xgboost\n# !pip install xgboost (\uc124\uce58\uac00 \uc548\ub418\uc5b4\uc788\ub2e4\uba74)\nimport xgboost\nfrom sklearn import model_selection\n\nmodel = xgboost.XGBClassifier(use_label_encoder=False)\n\nk_fold = model_selection.KFold(n_splits=10, shuffle=True)\nscore = model_selection.cross_val_score(\n            model, x_train_onehot, y_train['Survived'], cv=k_fold)\n\nprint(score)\nprint(sum(score) \/ 10)","ecc32019":"# lightgbm\n# !pip install lightgbm (\uc124\uce58\uac00 \uc548\ub418\uc5b4\uc788\ub2e4\uba74)\nimport lightgbm\nfrom sklearn import model_selection\n\nmodel = lightgbm.LGBMClassifier()\n\nk_fold = model_selection.KFold(n_splits=10, shuffle=True)\nscore = model_selection.cross_val_score(\n            model, x_train_onehot, y_train['Survived'], cv=k_fold)\n\nprint(score)\nprint(sum(score) \/ 10)","38c0515e":"x_test = test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\nx_test.head()\nx_test.info()","bd4b04b3":"# NA \ud574\uacb0\nx_test['Age'] = x_test['Age'].fillna(x_train['Age'].mean())\nx_test['Fare'] = x_test['Fare'].fillna(x_train['Fare'].median())","bea13c5e":"x_test_onehot = pd.get_dummies(x_test)\nx_test_onehot.info()\nx_test_onehot.head()","39945541":"import lightgbm\n\nmodel = lightgbm.LGBMClassifier()\nmodel = model.fit(x_train_onehot, y_train['Survived'])","e8978b95":"y_pred = model.predict(x_test_onehot)\ny_pred","c97f5b51":"submission = pd.DataFrame({\n    \"PassengerId\": test[\"PassengerId\"],\n    \"Survived\": y_pred\n})\n\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","17fdeec6":"# \ubcc0\uc218\uc758 \uc694\uc57d\n\n- \uc2dd\ubcc4\uc790: PassengerId\n- \ubc94\uc8fc\ud615 \ubcc0\uc218: Survived, Pclass, Sex, Embarked\n- \uc218\uce58\ud615 \ubcc0\uc218: Age, Fare, SibSp, Parch\n- \ubb38\uc790\uc5f4 (\uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c): Name, Ticket, Cabin ","b87a40cf":"### \ubc94\uc8fc:\ubc94\uc8fc\n- \uad50\ucc28\ud45c(cross table), \ubd84\ud560\ud45c(contingency table)\n- countplot (grouped bar)","157859a6":"## \uacb0\uacfc\ub9cc\ub4e4\uae30\n- lightgbm \uc774\uc6a9","ea8c161d":"# \ubc14\ub85c \uacb0\uacfc \uc81c\ucd9c\ud574\ubcf4\uc790 ","4773d379":"NA - Age: 177, Embarked: 2","9937092c":"\uc0ac\ub9dd\uc790\uac00 \uc0dd\uc874\uc790\ubcf4\ub2e4 \ub9ce\uc74c. \n- \uc0ac\ub9dd\uc790\uac00 \ub9ce\uc774 \ubc1c\uc0dd\ud55c \uc774\uc720\ub294 \ubb34\uc5c7\uc77c\uae4c? \n- \uc0ac\ub9dd\uc790\ub294 \uc5b4\ub5a4 \ubcc0\uc218\uc640 \uad00\ub828\uc774 \uc788\uc744\uae4c?\n- \uc0ac\ub9dd\uc790\ub294 \ub0a8\uc131\uacfc \uc5ec\uc131\uc758 \ube44\uc728\uc774 \ub611\uac19\uc744\uae4c? \n- \uc120\uc2e4 \ub4f1\uae09\uc740 \uc0ac\ub9dd \ud655\ub960\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc5c8\uc744\uae4c? ","75e41547":"### \uc218\uce58\ud615 \ubcc0\uc218 \uc694\uc57d\n- \uc218\uce58\ud615 \ubcc0\uc218: Age, Fare, SibSp, Parch\n- \ud569\uacc4\ub97c \uae30\uc900\uc73c\ub85c \uc694\uc57d: \ud3c9\uade0, \ud45c\uc900\ud3b8\ucc28\n- \uc815\ub82c\uc744 \uae30\uc900\uc73c\ub85c \uc694\uc57d: \uc911\uc704\uc218, \uc0ac\ubd84\uc704\uc218, \ucd5c\ub300\uac12, \ucd5c\uc18c\uac12.","70b0237e":"## \uc5ec\ub7ec\uac00\uc9c0 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\ub4e4 \n- sklearn: https:\/\/scikit-learn.org\/stable\/","b59275fc":"### \uc218\uce58\ud615 \ubcc0\uc218 \uc2dc\uac01\ud654\n- histogram, density\n- boxplot","a5509af8":"## \uc218\uce58\ud615\ubcc0\uc218:\uc218\uce58\ud615\ubcc0\uc218","9eedd606":"## \ubc94\uc8fc\ud615\ubcc0\uc218:\uc218\uce58\ud615\ubcc0\uc218\n1. \ubc94\uc8fc\ubcc4\ub85c \uc218\uce58\ud615\ubcc0\uc218\uc758 \ud1b5\uacc4\ub7c9 \ubc0f \ucc28\uc774\uc810 \ud655\uc778 \n1. \uc218\uce58\ud615\ubcc0\uc218\ub97c \ubc94\uc8fc\ud615\ubcc0\uc218\ub85c \uc804\ud658 \ud6c4 => \ubc94\uc8fc\ud615\ubcc0\uc218:\ubc94\uc8fc\ud615\ubcc0\uc218","5ed5a40b":"- \uc694\uae08\uc758 \uc774\uc0c1\uce58\uac00 \uc788\ub2e4. \n","75cfce9f":"## \ubcc0\uc218\uac04 \uc0c1\uad00\uad00\uacc4\n- \ubc94\uc8fc:\ubc94\uc8fc\n- \uc218\uce58:\uc218\uce58\n- \ubc94\uc8fc:\uc218\uce58","e751694d":"# \ub370\uc774\ud130 \ubd84\uc11d\uc744 \ud574\ubd05\uc2dc\ub2e4. \n\n1. \ub370\uc774\ud130 \uac2f\uc218 \ubc0f \uce7c\ub7fc, \ub370\uc774\ud130 \uc720\ud615\uc758 \uc774\ud574. \n  - \ub370\uc774\ud130 \ubaa8\uc591\uc758 \ud655\uc778\n  - \uce7c\ub7fc\ubcc4 \ubcc0\uc218 \uc720\ud615\uc744 \uae30\ub85d\n  - \ubcc0\uc218\uc758 \uc720\ud615\uc5d0 \ub9de\uac8c \ubcc0\uc218 \ud0c0\uc785\uc774 \uc9c0\uc815\ub418\uc5b4\uc788\ub294\uc9c0 \ud655\uc778. \n  - \uc798\ubabb\ub418\uc5b4 \uc788\ub294 \ubcc0\uc218\ud0c0\uc785\uc740 \uc54c\ub9de\uac8c \uc870\uc815\n  - \uce7c\ub7fc\ub0b4\uc5d0 NA\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n1. \ub370\uc774\ud130 \uc720\ud615\uc5d0 \ub9de\uac8c \uac01 \ubcc0\uc218\ub97c \uc694\uc57d\n1. \ub370\uc774\ud130 \ubcc0\uc218 \uac04 \ube44\uad50\n","cdcc3204":"### \ubc94\uc8fc\ud615 \uc2dc\uac01\ud654\n- bar, pie","e00c1185":"## pandas\ub97c \uc774\uc6a9\ud574\uc11c \uc77d\uc5b4\ub4e4\uc785\ub2c8\ub2e4.","11a900d8":"## NA \ud574\uacb0","bb1186b4":"### \ubc94\uc8fc\ud615 \ubcc0\uc218\uc758 \uc694\uc57d\n- \ubc94\uc8fc\ud615 \ubcc0\uc218: Survived, Pclass, Sex, Embarked\n- \uc808\ub300 \ube48\ub3c4, \uc0c1\ub300 \ube48\ub3c4","6c2e2d34":"- S \ud56d\uad6c\uc5d0\uc11c \ud0c4 \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc740 \uc774\uc720\ub294? \uc778\uad6c\uac00 \ub9ce\uc740 \uc9c0\uc5ed\uc774\uc5b4\uc11c \uadf8\ub7f4\uae4c? \n- \uc2b9\uc120\uc9c0\ub294 \ub0a8\ub140 \ube44\uc728\uacfc \uad00\ub828\uc774 \uc788\uc744\uae4c? \n- \uc2b9\uc120\uc9c0\ub294 \uc120\uc2e4 \ub4f1\uae09 \ube44\uc728\uacfc \uad00\ub828\uc774 \uc788\uc744\uae4c? ","030ffa02":"## \ubcc0\uc218 \uc120\ud0dd"}}