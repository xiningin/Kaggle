{"cell_type":{"388eb7f7":"code","26882302":"code","b32e6497":"code","49229505":"code","978c21a2":"code","c8a15674":"code","1bef9243":"code","0fb4c97b":"code","bf99df85":"code","a6f86a1f":"code","03f6659f":"code","8ea6d0b8":"code","484e396c":"code","9bb7dd83":"code","5fd6af80":"code","419eb555":"code","8aa69101":"code","109be54d":"code","efefc073":"code","8228c19f":"code","08318adc":"code","be876940":"code","222808db":"code","74712031":"code","01482fbf":"code","836dc284":"code","a78ad378":"code","cddc3444":"code","c7311a92":"code","dc0a7963":"code","a5d0b23d":"code","e5f4d822":"code","2558499f":"code","0333859d":"code","6c7eeeb4":"code","57d8d34f":"code","fa118a0a":"code","90799975":"code","1c288ff1":"code","1f08b92a":"code","554e5238":"code","d1a8b013":"code","f5f230ec":"code","c6e92ec8":"code","88f6228b":"code","611cad3c":"code","1f3c9b66":"code","83ef8d42":"code","ada98615":"code","26ef114b":"code","b511e6aa":"code","b4f7a8d1":"code","382b553c":"code","fe29d79c":"code","be8f788a":"code","795addfd":"code","d872ff69":"code","a3114299":"code","a2b07ac3":"code","fd380593":"code","a94c0d48":"markdown","6f2ebe69":"markdown","ccef2ede":"markdown","467a7bec":"markdown","6c62917c":"markdown","280120af":"markdown","dc0f6e5d":"markdown","3981c1d2":"markdown","b437d286":"markdown","e16b6eb1":"markdown","81ab3404":"markdown","0902afa7":"markdown","f57f8c31":"markdown","abee3e11":"markdown","b1926f7d":"markdown","fb099b82":"markdown","054621d4":"markdown","dfe509a0":"markdown","10c9f12b":"markdown","0ceb4554":"markdown","3e4b4641":"markdown","657a1929":"markdown","af2588b0":"markdown","01348429":"markdown","d17016e8":"markdown","4e2b1c47":"markdown","31dc9467":"markdown","d885379f":"markdown","499d3b56":"markdown","f914a3ec":"markdown","8a1a5440":"markdown","44eed138":"markdown","955fe5d0":"markdown","8a31edd1":"markdown","66c89634":"markdown","3f92dad5":"markdown","879cbe38":"markdown","d8e90ddf":"markdown","1f9afeed":"markdown","062089ad":"markdown","6be72cb2":"markdown","ed210ac3":"markdown","da0d7a1d":"markdown","23a67a5b":"markdown","6a38324a":"markdown","caf376b1":"markdown","f79a52ff":"markdown","eae62602":"markdown","5ffd5fff":"markdown","7ee3d4b9":"markdown","338eadf9":"markdown","242a1779":"markdown","ccfd88e1":"markdown","e6935d92":"markdown","66f1e835":"markdown","32535fa6":"markdown","1bcd4841":"markdown","19779b7c":"markdown","a5acf971":"markdown","a527ef67":"markdown"},"source":{"388eb7f7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns","26882302":"%matplotlib inline\nsns.set_style(\"white\")\nsns.set_palette(\"husl\", 14, 1)\nmatplotlib.rcParams['font.size'] = 12\nmatplotlib.rcParams['figure.figsize'] = (13, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","b32e6497":"matches = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\nmatches.head()","49229505":"matches.describe()","978c21a2":"matches.info()","c8a15674":"match_na = matches.isna().sum()\nmatch_na[match_na > 0]","1bef9243":"matches = matches.dropna(subset = ['winner', 'result', 'player_of_match'])\nmatches.shape","0fb4c97b":"DL = matches.dropna(subset = ['method'])\nmatches = matches.drop('method', axis = 1)","bf99df85":"DL.head()","a6f86a1f":"matches.loc[matches.city.isna(), 'city'] = 'Dubai'","03f6659f":"matches.loc[matches.result_margin.isna()].head()","8ea6d0b8":"matches.loc[matches.result == 'tie', 'result_margin'] = 0","484e396c":"match_na = matches.isna().sum()\nmatch_na[match_na > 0]","9bb7dd83":"matches.winner.unique()","5fd6af80":"matches.replace('Rising Pune Supergiants', 'Rising Pune Supergiant', inplace = True)","419eb555":"matches.replace('Delhi Daredevils', 'Delhi Capitals', inplace = True)","8aa69101":"deliveries = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\ndeliveries.head()","109be54d":"deliveries.info()","efefc073":"deliveries['bowling_team'].unique()","8228c19f":"deliveries.replace('Rising Pune Supergiants', 'Rising Pune Supergiant', inplace = True)","08318adc":"deliveries.replace('Delhi Daredevils', 'Delhi Capitals', inplace = True)","be876940":"matches[\"Year\"] = matches[\"date\"].apply(lambda x:x.split(\"-\")[0])\nmatches['Year'].unique()","222808db":"match_count = matches['Year'].value_counts().sort_index()","74712031":"sns.lineplot(x = match_count.index, y = match_count.values, )\nsns.despine()\nplt.ylabel('Number of matches')\nplt.xlabel('Years')\nplt.ylim((56, 79))\n_ = plt.title('Number of matches per Year')","01482fbf":"# Total matches played by a team\npartial_count1 = matches['team1'].value_counts()\npartial_count2 = matches['team2'].value_counts()\ntotal_matches = np.add(partial_count1, partial_count2).sort_values(ascending = False)\ntotal_matches.head()","836dc284":"sns.barplot(x = total_matches.index, y = total_matches.values)\nsns.despine()\n_ = plt.xticks(rotation = 40)\nplt.title('Number of Matches played')\n_ = plt.xlabel('Teams')","a78ad378":"toss_match_wins = matches.loc[(matches['toss_winner'] == matches['winner']), 'toss_winner'].value_counts()\ntoss_match_wins.head()","cddc3444":"win_per_after_toss = np.divide(toss_match_wins, total_matches)*100","c7311a92":"sns.barplot(x = win_per_after_toss.index, y = win_per_after_toss.values, )\nsns.despine()\n_ = plt.xticks(rotation = 30)\nplt.title('Win % of Teams that won Toss')\n_ = plt.xlabel('Teams')","dc0a7963":"# When Teams won the toss as well as the match\nmatch_win = matches.loc[matches['winner'] == matches['toss_winner'], 'toss_winner'].value_counts()\n\n# Won toss but lost match = Total times teams won toss - WON both toss and match \nmatch_lose = matches['toss_winner'].value_counts() - match_win\nmatch_lose","a5d0b23d":"ticks = ['CSK', 'DC', 'DelhiC', 'GL', 'KXIP', 'KTK', 'KKR', 'MI', 'PW', 'RR', 'RPS', 'RCB', 'SRH']\nmatch_win.sort_index(inplace = True)\nmatch_lose.sort_index(inplace = True)\nx = np.arange(len(ticks))\nwidth = 0.4","e5f4d822":"plt.bar(x = x-0.2, height = match_win.values, width = width, label = 'Won', color = 'darkblue')\nplt.bar(x = x+0.2, height = match_lose.values, width = width, label = 'Lose', color = 'orange')\nplt.xticks(x, ticks)\nplt.legend()\n_ = plt.title('toss')","2558499f":"winner_counts = matches['winner'].value_counts()\nwin_per = np.round(np.divide(winner_counts, total_matches)*100).sort_values(ascending = False)\nwin_per.head()","0333859d":"sns.barplot(x = win_per.index, y = win_per.values,)\nsns.despine()\n_ = plt.xticks(rotation = 40)\nplt.title('Team Wins %')\n_ = plt.xlabel('Teams')","6c7eeeb4":"batsman_sixes = deliveries[deliveries['batsman_runs'] == 6].groupby(by = ['batsman']).agg(sixes=pd.NamedAgg(column=\"batsman_runs\", aggfunc=\"value_counts\")).nlargest(n = 10, columns = 'sixes').droplevel('batsman_runs')\nbatsman_sixes.head()","57d8d34f":"sns.barplot(x = batsman_sixes.index, y = batsman_sixes.sixes)\nsns.despine()\nplt.title('Top 10 Batsmen - Highest number of 6s hit')\n_ = plt.xlabel('Batsmen')","fa118a0a":"batsman_4s = deliveries[deliveries['batsman_runs'] == 4].groupby(by = ['batsman']).agg(fours=pd.NamedAgg(column=\"batsman_runs\", aggfunc=\"value_counts\")).nlargest(n = 10, columns = 'fours').droplevel('batsman_runs')\nbatsman_4s.head()","90799975":"sns.barplot(x = batsman_4s.index, y = batsman_4s.fours, )\nsns.despine()\nplt.title('Top 10 Batsmen - Highest number of 4s hit')\n_ = plt.xlabel('Batsmen')","1c288ff1":"bowler_6s = deliveries[deliveries['batsman_runs'] == 6].groupby(by = ['bowler']).agg(sixes=pd.NamedAgg(column=\"batsman_runs\", aggfunc=\"value_counts\")).nlargest(n = 10, columns = 'sixes').droplevel('batsman_runs')\nbowler_6s.head()","1f08b92a":"plt.figure(figsize = ( 13, 5 ))\nsns.barplot(x = bowler_6s.index, y = bowler_6s.sixes, )\nsns.despine()\nplt.title('Top 10 Bwlers - Highest number of 6s given')\n_ = plt.xlabel('Bowlers')","554e5238":"bowler_4s = deliveries[deliveries['batsman_runs'] == 4].groupby(by = ['bowler']).agg(fours=pd.NamedAgg(column=\"batsman_runs\", aggfunc=\"value_counts\")).nlargest(n = 10, columns = 'fours').droplevel(1)","d1a8b013":"sns.barplot(x = bowler_4s.index, y = bowler_4s.fours, )\nsns.despine()\nplt.title('Top 10 Bowers - Highest number of 4s given')\n_ = plt.xlabel('Bowlers')","f5f230ec":"total_runs_inning = deliveries.groupby(by =['id', 'inning']).agg({'total_runs':'sum'}).reset_index()\nwinners_ = pd.pivot_table(data = total_runs_inning, columns = 'inning', index = 'id', values = 'total_runs')\nwinners_['won'] = np.where(winners_[1]>winners_[2], 'Innings 1', 'Innings 2')\nwinners_['won'] = np.where(winners_[1]==winners_[2], 'draw', winners_['won'])\nwinners_.head()","c6e92ec8":"sns.catplot(x=\"won\", kind=\"count\", data=winners_)","88f6228b":"pom = matches['player_of_match'].value_counts().sort_values(ascending=False).iloc[:10]\nsns.barplot(x=pom.index,  y = pom.values, data=matches)\nsns.despine()\n_ = plt.title('Player of the match')","611cad3c":"runs = deliveries.groupby(by =['batsman', 'id']).agg({'batsman_runs':'sum'})\ncenturies = runs['batsman_runs'].apply(lambda x: (x \/\/ 100)).sum(level = 0)","1f3c9b66":"k = deliveries[~(deliveries['extras_type'].isin(['wides', 'noballs', 'penalty']))]","83ef8d42":"batsman_stats = k.groupby(by =['batsman']).agg({'batsman_runs':'sum', 'ball': 'count'})\nbatsman_stats['Strike_rate'] = 100*batsman_stats['batsman_runs']\/batsman_stats['ball']\nbatsman_stats['Centuries'] = centuries\nbatsman_stats.head()","ada98615":"top10 = batsman_stats.nlargest(n = 10, columns = 'Centuries')\nsns.barplot(x = top10.index, y = top10['Centuries'], )\nsns.despine()\nplt.title('Top 10 Batsmen - Highest number of Centuries')\nplt.ylabel('Centuries')\n_ = plt.xlabel('Batsmen')","26ef114b":"top10 = batsman_stats.nlargest(n = 10, columns = 'batsman_runs')\nsns.barplot(x = top10.index, y = top10['batsman_runs'], )\nsns.despine()\nplt.title('Top 10 Batsmen - Highest number of Runs')\nplt.ylabel('Runs')\n_ = plt.xlabel('Batsmen')","b511e6aa":"top10 = batsman_stats.nlargest(n = 10, columns = 'Strike_rate')\nsns.barplot(x = top10.index, y = top10['Strike_rate'], )\nsns.despine()\nplt.title('Top 10 Batsmen - Highest Strike Rate')\nplt.ylabel('Strike Rate')\n_ = plt.xlabel('Batsmen')","b4f7a8d1":"run_per_over = deliveries.groupby(by =['bowler', 'id', 'over']).agg({'total_runs':'sum'})\nmaidens = run_per_over['total_runs'].apply(lambda x: x == 0).sum(level = 0)","382b553c":"bowler_stats = deliveries.groupby(by ='bowler').agg({'total_runs':'sum', 'ball': 'count', 'is_wicket':'sum'})\nbowler_stats['Strike_rate'] = np.divide(bowler_stats['ball'], bowler_stats['is_wicket'])\nbowler_stats['BowlingAve'] = np.divide(bowler_stats['total_runs'], bowler_stats['is_wicket'])\nbowler_stats['Maidens'] = maidens.astype('int32')\nbowler_stats.head()","fe29d79c":"top10 = bowler_stats.nlargest(n = 10, columns = 'ball')\nsns.barplot(x = top10.index, y = top10['ball'], )\nsns.despine()\nplt.title('Top 10 Bowlers - Highest number of Balls delivered')\nplt.ylabel('Balls')\n_ = plt.xlabel('Bowlers')","be8f788a":"top10 = bowler_stats.nlargest(n = 10, columns = 'is_wicket')\nsns.barplot(x = top10.index, y = top10['is_wicket'], )\nsns.despine()\nplt.title('Top 10 Bowlers - Highest number of Wickets')\nplt.ylabel('Wickets')\n_ = plt.xlabel('Bowlers')\n_ = plt.xticks(rotation = 20)","795addfd":"top10 = bowler_stats.nlargest(n = 10, columns = 'Maidens')\nsns.barplot(x = top10.index, y = top10['Maidens'], )\nsns.despine()\nplt.title('Top 10 Bowlers - Highest number of Maidens delivered')\nplt.ylabel('Maidens')\n_ = plt.xlabel('Bowlers')\n_ = plt.xticks(rotation = 20)","d872ff69":"matches_played_batsman = deliveries.groupby(by = ['batsman', 'id'], as_index=False).size().reset_index()['batsman'].value_counts()\nmatches_played_batsman = matches_played_batsman.sort_values(ascending = False).iloc[:10]","a3114299":"sns.barplot(x = matches_played_batsman.index, y = matches_played_batsman.values)\nsns.despine()\nplt.title('Top 10 - Highest number of matches played by Batsmen')\nplt.ylabel('No. of matches')\n_ = plt.xlabel('Batsmen')","a2b07ac3":"matches_played_bowler = deliveries.groupby(by = ['bowler', 'id'], as_index=False).size().reset_index()['bowler'].value_counts()\nmatches_played_bowler = matches_played_bowler.sort_values(ascending = False).iloc[:10]","fd380593":"sns.barplot(x = matches_played_bowler.index, y = matches_played_bowler.values,)\nsns.despine()\nplt.title('Top 10 - Highest number of matches played by Bowler')\nplt.ylabel('No. of matches')\nplt.xticks(rotation = 20)\n_ = plt.xlabel('Bowlers')","a94c0d48":"# Exploratory Data Analysis on IPL Data","6f2ebe69":"> *P Kumar delivered the most number of maiden.*","ccef2ede":"> *AB de Villiers was awarded Player of the match most number of times.*","467a7bec":"> *Batsmen hit most number of 6s against PP Chawla*","6c62917c":"**Deliveries**","280120af":"Similarly, we would also like to have some statistics on our bowlers as well, for e.g. total wickets, Maidens, Strike rate (balls \/ wicket), Bowling Average (Total runs \/ wickets).<br><br>\n**Data Preparation.**","dc0f6e5d":"> *Shikhar Dhavan hit the most number of 4s.*","3981c1d2":"**Which batsman hit the most number of sixes?**","b437d286":"I have always wondered whether the teams batting in Inning1 has more advantage over their rival teams.<br> **Which teams are more likely to win ?**","e16b6eb1":"<img src = \"https:\/\/www.searchpng.com\/wp-content\/uploads\/2019\/02\/IPL-Logo-PNG-715x715.png\" style=\"align:center; object-fit:fill; display: block; margin-left: auto; margin-right: auto; width: 80%;\"\/>","81ab3404":"> *Chris Gayle scored 6 centuries which is the highest of all.*","0902afa7":"**Matches**","f57f8c31":"> *SL Malinga took the most number of wickets.*","abee3e11":"Lets take a look at the 'result_margin' column which has na values.","b1926f7d":"Matches that were held in Dubai International Stadium had NaNs in their city column.","fb099b82":"# Data Preparation and Cleaning","054621d4":"Let's see if all the na values are taken care of...","dfe509a0":"> *Rohit Sharma has played the most number of matches.*","10c9f12b":"> *We can see that there are teams that have actually lost more matches than they have won after winning the toss.*","0ceb4554":"**Which batsman has the highest runs?**","3e4b4641":"Let's fix the team names same as Matches.","657a1929":"After inspecting the matches dataset, we found that the team 'Rising Pune Supergiant' is written as 'Rising Pune Supergiants'. Also, Delhi Daredevils and Delhi Capitals are the same team. Lets fix this.","af2588b0":"**Which bowler took the most wickets?**","01348429":"> *Virat Kohli scored the highest number of runs throuhout the IPL.*","d17016e8":"The Indian Premier League is a professional Twenty20 cricket league, contested by eight teams based out of eight different Indian cities. Being a fan of the IPL, I was drawn to this dataset as soon as I saw it on Kaggle. I did some EDA and found some really cool insights which I am here to share. Please share any insights, suggestions through comments.","4e2b1c47":"The column 'method' has the highest number of NaNs in the dataset. The best course of action would probably be to drop the entire column. However, the rows where the 'method' column does have values are those matches where D\/L method was used. Let us store it in another DataFrame and drop 'method' from matches.","31dc9467":"**Which bowlers played the most number of matches throughout the IPL?**","d885379f":"**Which team has the highest win percentage?**","499d3b56":"# Thank You!","f914a3ec":"### About the Dataset\n\nThis dataset consists of two seperate CSV files : matches and deliveries. These files contain information of each match summary and ball by ball details, respectively.","8a1a5440":"**Which Bowler has delivered the most balls?**","44eed138":"**Which player was awarded the Player of the Match most number of times?**","955fe5d0":"\n# Exploratory Data Analysis\n","8a31edd1":"**How many matches did the teams played throughout the IPL(2008-2020)?**","66c89634":"**How many matches are played each year in IPL?**","3f92dad5":"After close inspection, we found that result_margin has nans in matches that were tied.","879cbe38":"Here I just want to see what would be the chances for a certain team to win a match if it wins the toss.\n","d8e90ddf":"Wides and noballs are not counted in batsman's record as well as any runs scored on an extras_type ball. So in order to account for that we are not considering wides, noballs, penalty.","1f9afeed":"> *Year 2013 witnessed most matches throughout 2008 - 2020*","062089ad":"Let's move on to some **Player Statistics**.","6be72cb2":"Let's check if the dataset contains Nan values","ed210ac3":">*We can see that the teams playing in the second innings have a slightly better chance at winning. So getting to bat first may not always be the correct alernative.*","da0d7a1d":"**Which batsman hit the most number of 4s?**","23a67a5b":"> *Harbhajan Singh delivered the most balls.*","6a38324a":"> *Batsmen hit most number of 4s against UT Yadav*","caf376b1":"> *PP Chawla has played the most number of matches.*","f79a52ff":"**Which player scored the most number of centuries?**","eae62602":"> *Chennai Super Kings has the highest win percentage of **60%** among the all the teams.*","5ffd5fff":"**Which bowler gave the most number of 6s?**","7ee3d4b9":"> *Chris Gayle hit the highest number of sixes during the IPL.*","338eadf9":"**Which bowler delivered the most number of Maidens?**","242a1779":" **Which player has the highest strike rate?**","ccfd88e1":"**Which batsmen has played the most number of matches throughout the IPL?**","e6935d92":"Let's count the Centuries scored by each batsmen in each match. Also, we would like to have other information on our batsmen say, Strike rate, total runs scored and balls faced.","66f1e835":"**Which bowler gave the most number of 4s?**","32535fa6":"After inspecting the dataset we found that the columns winner, result, player_of_match has 4 nans. We found that the matches that were tied due to rains have nans in these columns. We can drop the nan rows as it will not affect our analysis.","1bcd4841":"> *B Stanlake has the highest Strike rate.*","19779b7c":"> *All the percentages are below 50%, hence there isn't any evidence that suggests that winning the toss would increase the chances of winning the match.*","a5acf971":"**Does winning the toss affects the outcome of a match for a team?**<br>","a527ef67":"# Importing Libraries"}}