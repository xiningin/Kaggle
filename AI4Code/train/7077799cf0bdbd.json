{"cell_type":{"ef3dd3f5":"code","d825d054":"code","70df7f39":"code","82205e61":"code","3ec7d7ef":"code","7a972459":"code","0daff190":"code","e5e5ac2f":"code","27c9accc":"code","f5597e14":"code","ea7c2cce":"code","91310c48":"code","00f3b80f":"code","008de017":"code","0db2478e":"code","0e5a0967":"code","1e958fc1":"code","7edc7771":"code","9ae51439":"code","cbda9e95":"code","44705f84":"code","6eddfb79":"markdown","80c6a347":"markdown","e452bd5b":"markdown","a3a7e6fc":"markdown","c445e25c":"markdown"},"source":{"ef3dd3f5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","d825d054":"train = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')","70df7f39":"train.shape\n","82205e61":"test.shape","3ec7d7ef":"features = test.columns","7a972459":"train = train[features]","0daff190":"train['target'] = 0\ntest['target'] = 1","e5e5ac2f":"train_test = pd.concat([train, test], axis =0)\n\ntarget = train_test['target'].values","27c9accc":"object_columns = np.load('..\/input\/standalone-train-and-test-preprocessing\/object_columns.npy')","f5597e14":"del train, test","ea7c2cce":"gc.collect()","91310c48":"# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))\n","00f3b80f":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)","008de017":"del train_test\ngc.collect()","0db2478e":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","0e5a0967":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","1e958fc1":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","7edc7771":"num_round = 50\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","9ae51439":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","cbda9e95":"del train, test, clf\ngc.collect()\n\ntrain = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\n\n\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')\n\nfeatures = test.columns[1:]\ntrain = train[features]\ntest = test[features]\n\ntrain['target'] = 0\ntest['target'] = 1\n\ntrain_test = pd.concat([train, test], axis =0)\n\ndel train, test\n\ntarget = train_test['target'].values\n\n# Label Encoding\nfor f in object_columns:\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train_test[f].values) )\n    train_test[f] = lbl.transform(list(train_test[f].values))\n    \ntrain, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)\n\ntrain_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()\n\ntrain = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)\n\n","44705f84":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","6eddfb79":"Seems that transaction date is the main \"culprit\".\n\nLet's see what happens when we remove time stamp.","80c6a347":"Whoa, that's a pretty significant AUC!  0.999996 adverserial AUC is the biggest one I've ever come across. I first thought I might be making a mistake, but re-run this script several times, and don't seem to find any bugs in it. But I am open to criticims\/suggestions.\n\nLet's look now at the top 20 \"adversarial\" features.","e452bd5b":"To be continued ...","a3a7e6fc":"Let's take a look how similar train and test sets are.","c445e25c":"At 0.90 the AUC has improved, but it's still really high."}}