{"cell_type":{"b035be36":"code","121ef7ae":"code","2ac51885":"code","85d4c3dd":"code","556cd7c8":"code","cb93448e":"code","41c1e3f0":"code","ee518889":"code","38922b3a":"code","95039764":"code","7270241f":"code","0dcf2129":"code","768153e1":"code","3c407c15":"code","6325dad6":"code","748c59b4":"code","5d636fbf":"code","76ffc806":"code","30b7c72f":"code","e0820c3c":"code","191cf029":"code","7996da07":"code","f4fc8436":"code","62a8f5db":"code","85a3237a":"code","76b26830":"code","0efcf552":"code","3a105cb0":"code","39c60b95":"code","de5bfe1f":"markdown","00e40f2e":"markdown","200e3921":"markdown","5896ce11":"markdown","93e3e4d5":"markdown","495d655c":"markdown","8480c1eb":"markdown","2c49c2f1":"markdown","ffaf0c26":"markdown","a2d3a5ce":"markdown","c8771a36":"markdown","2aee9c1f":"markdown","cc218033":"markdown","834c4f32":"markdown","1b62ccb4":"markdown","a9439c07":"markdown","4e9519bc":"markdown","75c436be":"markdown","ec6624fd":"markdown"},"source":{"b035be36":"import numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nimport time","121ef7ae":"data = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')","2ac51885":"data.head()","85d4c3dd":"col = data.columns       \nprint(col)","556cd7c8":"y = data.diagnosis                           \ndrop_cols = ['Unnamed: 32','id','diagnosis']\nx = data.drop(drop_cols,axis = 1 )\nx.head()","cb93448e":"ax = sns.countplot(y,label=\"Count\")\nB, M = y.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","41c1e3f0":"x.describe()","ee518889":"data_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              \ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","38922b3a":"data = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","95039764":"data = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","7270241f":"plt.figure(figsize=(10,10))\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","0dcf2129":"sns.jointplot(x.loc[:,'concavity_worst'],\n              x.loc[:,'concave points_worst'],\n              kind=\"regg\",\n              color=\"#ce1414\");","768153e1":"#sns.set(style=\"whitegrid\", palette=\"muted\")\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())  \ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","3c407c15":"data = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","6325dad6":"data = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","748c59b4":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","5d636fbf":"drop_cols=['perimeter_mean','radius_mean','compactness_mean',\n              'concave points_mean','radius_se','perimeter_se',\n              'radius_worst','perimeter_worst','compactness_worst',\n              'concave points_worst','compactness_se','concave points_se',\n              'texture_worst','area_worst']\ndf=x.drop(drop_cols,axis=1)\ndf.head()","76ffc806":"fig,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","30b7c72f":"from sklearn.model_selection import train_test_split\nimport xgboost as xgb\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score","e0820c3c":"x_train,x_test,y_train,y_test=train_test_split(df,y,test_size=0.3,random_state=42)\n\nclf_1=xgb.XGBClassifier(random_state=42)\nclf_1=clf_1.fit(x_train,y_train)","191cf029":"preds=clf_1.predict(x_test)\n\nprint('Accuracy Score :',accuracy_score(preds,y_test))\n","7996da07":"cm=confusion_matrix(y_test,preds)\nsns.heatmap(cm,annot=True,fmt='d')","f4fc8436":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","62a8f5db":"select_feature=SelectKBest(chi2,k=10)\nselect_feature=select_feature.fit(x_train,y_train)","85a3237a":"print('Score list:',select_feature.scores_)\nprint('Features list :',x_train.columns)","76b26830":"x_train_2=select_feature.transform(x_train)\nx_test_2=select_feature.transform(x_test)\n\nclf_2=xgb.XGBClassifier()\nclf_2=clf_2.fit(x_train_2,y_train)\n\npreds_2=clf_2.predict(x_test_2)\n\nprint('Accuracy score =',accuracy_score(preds_2,y_test))\n\ncm_2=confusion_matrix(preds_2,y_test)\nsns.heatmap(cm_2,annot=True,fmt='d')\n","0efcf552":"from sklearn.feature_selection import RFECV\n\nclf_3=xgb.XGBClassifier()\nrfecv=RFECV(estimator=clf_3,step=1,cv=5,scoring='accuracy',n_jobs=-1).fit(x_train,y_train)\n\nprint('Optimal features =',rfecv.n_features_)\nprint(' Best features =',x_train.columns[rfecv.support_])","3a105cb0":"accuracy_score(y_test,rfecv.predict(x_test))","39c60b95":"num_features=[i for i in range(1,len(rfecv.grid_scores_)+1)]\ncv_scores=rfecv.grid_scores_\nax=sns.lineplot(x=num_features,y=cv_scores)\nax.set(xlabel='No.of selected features',ylabel='CV_Scores')","de5bfe1f":"###  Dropping Correlated Columns from Feature Matrix\n","00e40f2e":"### Plot Diagnosis Distributions","200e3921":"### About the Dataset:","5896ce11":"### Visualizing Standardized Data with Seaborn","93e3e4d5":"### Task 4: Univariate Feature Selection and XGBoost","495d655c":"**Attribute Information**:\n\n- ID number\n- Diagnosis (M = malignant, B = benign) 3-32)","8480c1eb":"### Observing all Pair-wise Correlations","2c49c2f1":"<h2 align=center> Data Visualization <\/h2>","ffaf0c26":"<h1 align=center>Data Visalization with Seaborn : Feature Selection and Classification<\/h1>\n","a2d3a5ce":"## Please Do Upvote the kernel you liked it.","c8771a36":"Ten real-valued features are computed for each cell nucleus:\n\n1. radius (mean of distances from center to points on the perimeter) \n2. texture (standard deviation of gray-scale values) \n3. perimeter \n4. area \n5. smoothness (local variation in radius lengths) \n6. compactness (perimeter^2 \/ area - 1.0) \n7. concavity (severity of concave portions of the contour) \n8. concave points (number of concave portions of the contour)\n9. symmetry\n10. fractal dimension (\"coastline approximation\" - 1)\n\nThe mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant","2aee9c1f":"### Classification using XGBoost (minimal feature selection)","cc218033":"### Loading Libraries and Data","834c4f32":"### Task 5: Recursive Feature Elimination with Cross-Validation","1b62ccb4":"<h2 align=center> Exploratory Data Analysis <\/h2>","a9439c07":"###  Observing the Distribution of Values and their Variance with Swarm Plots","4e9519bc":"### Violin Plots and Box Plots","75c436be":"### Separate Target from Features","ec6624fd":"### Using Joint Plots for Feature Comparison"}}