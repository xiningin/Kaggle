{"cell_type":{"158d8d59":"code","44083227":"code","405a085a":"code","571bfa75":"code","882e83ad":"code","7a6aebe6":"code","d6047009":"code","15af6606":"code","54d8c860":"code","43cd2a10":"code","f576ee3e":"code","61285ec1":"code","aa0c1352":"code","0ebcbcc9":"code","00ba37e0":"code","12f8dd38":"code","901dc948":"code","336d9105":"code","7121c22d":"code","5b77bb77":"code","320a6f2b":"code","54ec0bda":"code","ab948eb2":"code","e728e1cb":"code","4c98b5be":"code","24640846":"code","14d9efd5":"code","c0f4bd47":"code","a76ed30f":"code","2fbfc3cd":"code","527f43d2":"code","e11d6c85":"code","44fb7208":"code","30e9a40c":"code","d1955381":"code","fc2769ea":"code","c4444add":"code","47177c97":"code","2356c4e2":"code","0c1d8265":"code","4fb1cb88":"code","ee64542f":"code","d2555ac2":"code","98d7fdf6":"code","5c1bbf2f":"code","bf6b38c4":"code","f3fab42c":"code","c893b268":"code","7eb8b429":"code","49f4e460":"code","eee5e1d7":"code","d59a880c":"code","0a56646b":"code","c9f08422":"code","ec8d4c55":"code","1caf1248":"code","1d01930a":"code","0d0b44cb":"code","2aa7aac0":"code","9df6998f":"code","be418f7b":"code","c0b29640":"code","12c14126":"code","a433a964":"code","e1efc79f":"code","dde59144":"code","e459798f":"markdown","d43f0cd5":"markdown","fa90627f":"markdown","d6e4f6c8":"markdown","3b449e7a":"markdown","c0b7e0f5":"markdown","aa96be5d":"markdown","46023457":"markdown","851ff43f":"markdown","1731d796":"markdown","2de777cf":"markdown","bf0e3f5b":"markdown","d58c16c3":"markdown","04926213":"markdown","d8a43790":"markdown","3f455906":"markdown","acd5d3d9":"markdown","d79fa260":"markdown","ba914d84":"markdown","b43b3f08":"markdown","d413cfe2":"markdown","7b0ae81e":"markdown","3835e821":"markdown","2c0f43ea":"markdown","2d98a8d5":"markdown","3917d5c8":"markdown","1511d72e":"markdown","0c2ff07c":"markdown"},"source":{"158d8d59":"import pandas as pd\nimport seaborn as sb\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestRegressor \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44083227":"conda install openpyxl","405a085a":"#using pandas to read the training and test data\ndata = pd.read_excel(\"\/kaggle\/input\/airline-fare-prediction\/train.xlsx\")\ntest = pd.read_excel(\"\/kaggle\/input\/airline-fare-prediction\/test.xlsx\")","571bfa75":"#displaying the first and last 5 rows of the data\ndata","882e83ad":"data.count()","7a6aebe6":"data.dtypes","d6047009":"data.describe(include = \"all\")","15af6606":"data.info","54d8c860":"data.isnull()","43cd2a10":"#To count how many missing values are there in the dataset in row as well as column\ndata.isnull().sum().sum()","f576ee3e":"#To count how many missing values are there in the dataset column wise\ndata.isnull().sum()","61285ec1":"data = data.fillna(data['Route'].value_counts().index[0])\ndata.isnull().sum().sum()","aa0c1352":"# Dropping all unnecessary columns\ndata = data.drop(['Source','Destination','Dep_Time','Arrival_Time','Additional Info'], axis=1)","0ebcbcc9":"data.dtypes","00ba37e0":"# All different unique airlines\ndata['Airline'].unique()","12f8dd38":"# Showing details according to airlines\n\nfilter = data['Airline']==\"Jet Airways\"\ndata.where(filter).count()","901dc948":"# Encoding airline categorical values to numerical values\nle = LabelEncoder()\ndata['Airline'] = le.fit_transform(data['Airline'])","336d9105":"data['Airline'].unique()","7121c22d":"data.head()","5b77bb77":"# To verify Jet Airways is now termed as 4\n\nfilter = data['Airline']==4\ndata.where(filter).count()","320a6f2b":"data['Date'] = data['Date_of_Journey'].str.split('\/').str[0]\ndata['Month'] = data['Date_of_Journey'].str.split('\/').str[1]\ndata['Year'] = data['Date_of_Journey'].str.split('\/').str[2]","54ec0bda":"# Now convert them into int type\ndata['Date'] = data['Date'].astype(int)\ndata['Month'] = data['Month'].astype(int)\ndata['Year'] = data['Year'].astype(int)","ab948eb2":"# Drop original date_of_journey column\ndata = data.drop(['Date_of_Journey'], axis=1)","e728e1cb":"data.head()","4c98b5be":"D = []\nfor i in data['Duration']:\n    for j in range(0,len(i)):\n        i=str(i).replace('h','')\n        i=str(i).replace('m','')\n        i = str(i).replace(' ','')\n    D.append(i)\ndata['Duration_Mins'] = D\ndata.head()","24640846":"data.dtypes\n#he type of Duration_Mins is object","14d9efd5":"# Converting object type to integer data type\ndata['Duration_Mins'] = data['Duration_Mins'].astype(int)","c0f4bd47":"# Finally converting hours into minutes\n\nfor i in range(0,len(data['Duration_Mins'])):\n  if len(str(data['Duration_Mins'][i]))<=2:\n    data['Duration_Mins'][i]*=60\n  else:\n    new=0\n    s=''\n    res = list(map(int, str(data['Duration_Mins'][i])))\n    new=res[0]*60\n    res.pop(0)\n    for j in res:\n      s=s+str(j)\n    m=int(s)\n    new = new + m\n    data['Duration_Mins'][i]=new","a76ed30f":"# Dropping original Duration column\ndata = data.drop(['Duration'], axis=1)","2fbfc3cd":"data.head()","527f43d2":"for i in range(len(data['Total_Stops'])):\n  if data['Total_Stops'][i]=='non-stop':\n    data['Total_Stops'][i]='0'\n  elif data['Total_Stops'][i]=='2 stops':\n    data['Total_Stops'][i]='2'\n  else:\n    data['Total_Stops'][i]='1'","e11d6c85":"# Converting object type to integer data type\ndata['Total_Stops'] = data['Total_Stops'].astype(int)","44fb7208":"data.head()","30e9a40c":"data.shape","d1955381":"# To know the different values so that I convert them easily to 3 different categories\n\nfor i in range(0,10683):\n  print(len(str(data['Route'][i])))\n  if i==10:\n    break\n","fc2769ea":"len(data['Route'][3])","c4444add":"for i in range(0,10683):\n  if len(str(data['Route'][i]))==9:\n    data['Route'][i]=0\n  elif len(str(data['Route'][i]))==15:\n    data['Route'][i]=1\n  else:\n    data['Route'][i]=2","47177c97":"# Converting object type to integer data type\ndata['Route'] = data['Route'].astype(int)","2356c4e2":"data['Route'].unique()","0c1d8265":"data.dtypes","4fb1cb88":"data.head()","ee64542f":"for col in ['Airline','Route', 'Total_Stops','Duration_Mins']:\n    plt.style.use('classic')\n    plt.figure(figsize=(8,8))\n    plt.pie(data[col].value_counts(),labels=data[col].unique(),shadow=True,autopct='%0.1f%%')\n    plt.title('\\nCount of {}'.format(col))\n    plt.show()","d2555ac2":"data['Airline'].value_counts().plot(kind='barh', color='brown')","98d7fdf6":"ax = data.plot.scatter('Airline',y='Price', figsize=(20,6))\nplt.xlabel('Airlines')\nplt.ylabel('Price of Airlines')\nplt.show()","5c1bbf2f":"ax1 = data.plot.scatter('Duration_Mins','Price', color='yellow')","bf6b38c4":"ax1 = data.plot.scatter('Route','Price')","f3fab42c":"ax1 = data.plot.scatter('Total_Stops','Price', color='pink')","c893b268":"ax1 = data.plot.scatter('Month','Price',color='green')","7eb8b429":"data.head()","49f4e460":"y = data['Price']\nx = data.drop(['Price'],axis=1)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1\/3, random_state=4)","eee5e1d7":"mm_scaler = preprocessing.MinMaxScaler()\nX_train_minmax = mm_scaler.fit_transform(x_train)\nmm_scaler.transform(x_test)","d59a880c":"# Make an instance of the Model\npca = PCA()","0a56646b":"x_train = pd.DataFrame(pca.fit_transform(x_train))\nx_test = pd.DataFrame(pca.transform(x_test))","c9f08422":"explained_variance = pca.explained_variance_ratio_ ","ec8d4c55":"explained_variance","1caf1248":"# create regressor object \nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0) \n  \n# fit the regressor with x and y data \nregressor.fit(x_train, y_train)   ","1d01930a":"y_pred_test = regressor.predict(x_test)\ny_pred_train = regressor.predict(x_train)","0d0b44cb":"display(regressor.score(x_test,y_test))","2aa7aac0":"display(regressor.score(x_train,y_train))","9df6998f":"from sklearn.metrics import mean_absolute_error,mean_squared_error\ndef mean_absolute_percentage_error(y_true, y_pred):\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\nprint('Train data\\n')\nprint(\"Absolute Error = \",mean_absolute_error(y_pred_train,y_train))\nprint(\"Mean percentage error = \",mean_absolute_percentage_error(y_pred_train,y_train))\nprint(\"\\nTest data\\n\")\nprint(\"Absolute Error = \",mean_absolute_error(y_pred_test,y_test))\nprint(\"Mean percentage error = \",mean_absolute_percentage_error(y_pred_test,y_test))","be418f7b":"lr = LinearRegression() \nlr.fit(x_train, y_train) ","c0b29640":"#Predicting the test set result using  \n# predict function under LinearRegression\ny_pred_test = lr.predict(x_test) \ny_pred_train = lr.predict(x_train)","12c14126":"display(lr.score(x_train,y_train))","a433a964":"display(lr.score(x_test,y_test))","e1efc79f":"from sklearn.metrics import mean_absolute_error,mean_squared_error\ndef mean_absolute_percentage_error(y_true, y_pred):\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\nprint('Train data\\n')\nprint(\"Absolute Error = \",mean_absolute_error(y_pred_train,y_train))\nprint(\"Mean percentage error = \",mean_absolute_percentage_error(y_pred_train,y_train))\nprint(\"\\nTest data\\n\")\nprint(\"Absolute Error = \",mean_absolute_error(y_pred_test,y_test))\nprint(\"Mean percentage error = \",mean_absolute_percentage_error(y_pred_test,y_test))","dde59144":"# Data Normalization\n#y = training_data(['Airline', 'Route', 'Total_Stops', ])\n\n#training_data['Price']=((training_data['Price']-training_data['Price'].min())\/(training_data['Price'].max()-training_data['Price'].min()))*2\n#training_data['Duration_Mins']=((training_data['Duration_Mins']-training_data['Duration_Mins'].min())\/(training_data['Duration_Mins'].max()-training_data['Duration_Mins'].min()))*2\n\n#training_data['Route']=((training_data['Route']-training_data['Route'].min())\/(training_data['Route'].max()-training_data['Route'].min()))*2\n#training_data['Duration_Mins'] = round(training_data['Duration_Mins'],2)\n\n#training_data['Price'] = round(training_data['Price'],2)\n\n#print(training_data['Date'].unique())\n#print(training_data['Month'].unique())\n\n#Normalizing the data\n#Applying Z-Score inprice column\n#training_data['Normalized_Price'] = (training_data['Price']-training_data['Price'].mean())\/training_data['Price'].std()\n#training_data['Normalized_Price']\n\n# ML Decision Trees\n\n#from sklearn.tree import DecisionTreeClassifier \n#dtc = DecisionTreeClassifier(criterion = \"entropy\", random_state = 100, max_depth = 3, min_samples_leaf = 5) \n#dtc.fit(x_train, y_train) \n\n#y_pred_test = dtc.predict(x_test) \n#y_pred_train = dtc.predict(x_train) \n\n#from sklearn.metrics import accuracy_score\n\n#print(\"Confusion Matrix: \", confusion_matrix(y_train, y_pred_train)) \n      \n#print (\"Accuracy : \", accuracy_score(y_train,y_pred_train)*100)\n\n#from sklearn.linear_model import Ridge\n#ridge_model = Ridge(alpha = 0.9)\n#ridge_model.fit(x_train,y_train)\n\n#ridge_train_pred = ridge_model.predict(x_train)\n#print(mean_absolute_percentage_error(ridge_train_pred,y_train))\n\n#ridge_test_pred = ridge_model.predict(x_test)\n#print(mean_absolute_percentage_error(ridge_test_pred,y_test))","e459798f":"#### Random forest","d43f0cd5":"##### It shows that we have cleaned our data","fa90627f":"> ## Thank You! Please upvote.","d6e4f6c8":"### Faeture Scaling","3b449e7a":"## These factors directly affect airline ticket prices:\n\n##### **1. Airline**\n##### **2. Date of Journey**\n##### **3. Route**\n##### **4. Duration**\n##### **5. Total stops**","c0b7e0f5":"### Formatting Airlines column","aa96be5d":"### Formatting Route column\n##### Here I have used length function to distinguish if route is direct then its value is 0","46023457":"> ## Data Formatting","851ff43f":"> ## Data Normalization","1731d796":"### Hi All, I have completely analysed this notebook in depth and worked hard on it. Upvote if you like it.","2de777cf":"##### Here you can find who had the most number of bookings.","bf0e3f5b":"###Formatting Total_Stops column","d58c16c3":"### Train-Test-Split\n","04926213":"> ## Data Visualization","d8a43790":"##### It is very obvious that flight with 0 stop or non-stop flights are cheaper than with 1 or 2 stops.","3f455906":"### PCA","acd5d3d9":"##**Identifying and dealing with Missing values**","d79fa260":"##**Starting the preliminary analysation of data**","ba914d84":"#### Linear Regression","b43b3f08":"##### This shows that Jet Airways (labelled as 4) has the max number of bookings","d413cfe2":"\n###### the training data has 10,683 rows but 'Route', 'Total_Stops' have only 10,682 rows\n###### This shows that there are some *missing values* in the dataset","7b0ae81e":"### Formatting Date_of_Journey column\n###### We need to split it into date, month, and year","3835e821":"##### From the above graph it is quite clear that flights with less travel time i.e. Duration_Mins are booked by maximum number of users.","2c0f43ea":"#### Now we can see that Airline, Date_of_Journey, Route, Duration and Total Stops are not numerical or integer data type","2d98a8d5":"### Formatting Duration\n###### We need to deal with alphabet 'h' and 'm' alongwith whitespace","3917d5c8":"> ## Data Cleaning","1511d72e":"> ## Data Analysis","0c2ff07c":"> ## Data modelling and prediction"}}