{"cell_type":{"51df3c9f":"code","74559f72":"code","180ff2d2":"code","b985655f":"code","7241ccef":"code","bb0148b8":"code","22a496f5":"code","eabb29ab":"code","3961f02f":"code","2f6443e1":"code","e8d14094":"code","01296cd5":"code","3be6d73c":"code","aa5bc7ce":"code","20286202":"code","5fffa8c6":"code","0df6ba80":"code","ac9c2cd0":"markdown"},"source":{"51df3c9f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport missingno as msno\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nwarnings.filterwarnings('ignore')\n%matplotlib inline","74559f72":"# Loading the data\ndfta= pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\ndfta.head()","180ff2d2":"dfte = pd.read_csv('\/kaggle\/input\/mobile-price-classification\/test.csv')\ndfte.head()","b985655f":"print(f'Train shape',dfta.shape)\nprint(f'Test shape',dfte.shape)\n","7241ccef":"dfta.describe()","bb0148b8":"dfta.info()","22a496f5":"sns.pairplot(data=dfta[dfta.columns])\nplt.show()","eabb29ab":"corr = dfta.corr()\nsns.heatmap(corr,linewidths=.5)\nplt.show()","3961f02f":"X = dfta.drop([\"price_range\"],axis=1)\nY = dfta[\"price_range\"].values\n\nx_train, x_val, y_train, y_val = train_test_split(X,Y,test_size = 0.2,random_state=42)\n\nmin_max_scaling = preprocessing.MinMaxScaler()\nx_train = min_max_scaling.fit_transform(x_train)\nx_val = min_max_scaling.transform(x_val)","2f6443e1":"x_train","e8d14094":"x_val","01296cd5":"#Applying SVC (Support Vector Classification)\nfrom sklearn.svm import SVC\n\nsvm = SVC(kernel='rbf', random_state=0, gamma=.10, C=1.0)\nsvm.fit(x_train, y_train)\nprint(\"train accuracy:\",svm.score(x_train,y_train))\nprint(\"val accuracy:\",svm.score(x_val,y_val))","3be6d73c":"#Applying XGBoost\nimport xgboost as xgb\n\nxgb_clf = xgb.XGBClassifier()\nxgb_clf = xgb_clf.fit(x_train, y_train)\n\nprint(\"train accuracy:\",xgb_clf.score(x_train,y_train))\nprint(\"val accuracy:\",xgb_clf.score(x_val,y_val))","aa5bc7ce":"#Applying Decision Tree\nfrom sklearn import tree\n\n#Create tree object\ndecision_tree = tree.DecisionTreeClassifier(criterion='gini')\n\n#Train DT based on scaled training set\ndecision_tree.fit(x_train, y_train)\n\nprint(\"train accuracy:\",decision_tree.score(x_train,y_train))\nprint(\"val accuracy:\",decision_tree.score(x_val,y_val))","20286202":"#Applying RandomForest\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create Random Forest object\nrandom_forest = RandomForestClassifier()\n\n#Train model\nrandom_forest.fit(x_train, y_train)\n\nprint(\"train accuracy:\",random_forest.score(x_train,y_train))\nprint(\"val accuracy:\",random_forest.score(x_val,y_val))\n\n","5fffa8c6":"#Applying GaussianNB\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train , y_train)\n\nprint(\"train accuracy:\",nb.score(x_train,y_train))\nprint(\"val accuracy:\",nb.score(x_val,y_val))","0df6ba80":"#Applying Regression classifier \nfrom sklearn.linear_model import LogisticRegression\nlg = LogisticRegression(solver='lbfgs')\nlg.fit(x_train, y_train)\nprint(\"train accuracy:\",lg.score(x_train,y_train))\nprint(\"val accuracy:\",lg.score(x_val,y_val))","ac9c2cd0":"# Mobile Price Classification\n## classify mobile price range\n\n### In this problem you do not have to predict actual price but a price range indicating how high the pric.\n\n\n\n#### Dataset:\n\n[Link](https:\/\/www.kaggle.com\/iabhishekofficial\/mobile-price-classification)\n\n"}}