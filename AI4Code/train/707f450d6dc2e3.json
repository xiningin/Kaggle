{"cell_type":{"8df43f43":"code","ba93181c":"code","804ba5c6":"code","a95bf66e":"code","32eaa721":"code","271fee99":"code","c862e36a":"code","0e13df83":"code","f687f9ea":"code","22d81260":"code","ce51893b":"code","f1891f50":"code","9ade60d3":"code","b821336f":"code","4a9a3c62":"code","b845e8a8":"code","612a561c":"code","3caac0af":"code","c84fe9e3":"code","c684dd51":"code","641a5438":"code","9d014560":"code","04dce6b1":"code","d8715d98":"code","6f21436b":"code","252fc296":"code","389a9da8":"code","1ae1b913":"code","c7dce531":"code","5089caec":"code","cefc9702":"markdown","e3028b19":"markdown","5987d91e":"markdown","ead543a5":"markdown","4a47c6e0":"markdown","f7fed718":"markdown","d0d24988":"markdown"},"source":{"8df43f43":"import os\nprint(os.listdir('..\/input'))\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ba93181c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.utils import class_weight\nimport warnings\nwarnings.filterwarnings('ignore')\n","804ba5c6":"train_df=pd.read_csv('\/kaggle\/input\/avanidataset\/mitbih_train.csv',header=None)\ntest_df=pd.read_csv('\/kaggle\/input\/avanidataset\/mitbih_test.csv',header=None)","a95bf66e":"train_df[187]=train_df[187].astype(int)\nequilibre=train_df[187].value_counts()\nprint(equilibre)\ntrain_df.shape\n#test_df.shape\n\n\n","32eaa721":"plt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(equilibre, labels=['normal beat','unknown Beats','Ventricular ectopic beats','Supraventricular ectopic beats','Fusion Beats'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","271fee99":"from sklearn.utils import resample\ndf_1=train_df[train_df[187]==1]\ndf_2=train_df[train_df[187]==2]\ndf_3=train_df[train_df[187]==3]\ndf_4=train_df[train_df[187]==4]\ndf_0=(train_df[train_df[187]==0]).sample(n=20000,random_state=42)\n\ndf_1_upsample=resample(df_1,replace=True,n_samples=20000,random_state=123)\ndf_2_upsample=resample(df_2,replace=True,n_samples=20000,random_state=124)\ndf_3_upsample=resample(df_3,replace=True,n_samples=20000,random_state=125)\ndf_4_upsample=resample(df_4,replace=True,n_samples=20000,random_state=126)\n\ntrain_df=pd.concat([df_0,df_1_upsample,df_2_upsample,df_3_upsample,df_4_upsample])","c862e36a":"equilibre=train_df[187].value_counts()\nprint(equilibre)\n","0e13df83":"plt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(equilibre, labels=['normal beat','unknown Beats','Ventricular ectopic beats','Supraventricular ectopic beats','Fusion Beats'], colors=['red','green','blue','skyblue','orange'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","f687f9ea":"c=train_df.groupby(187,group_keys=False).apply(lambda train_df : train_df.sample(1))","22d81260":"\n\nplt.subplot(1, 5, 1)  # 1 line, 2 rows, index nr 1 (first position in the subplot)\nplt.plot(c.iloc[0,:186])\nplt.subplot(1, 5, 2)  # 1 line, 2 rows, index nr 2 (second position in the subplot)\nplt.plot(c.iloc[1,:186])\nplt.subplot(1, 5, 3)  # 1 line, 2 rows, index nr 2 (second position in the subplot)\nplt.plot(c.iloc[2,:186])\nplt.subplot(1, 5, 4)  # 1 line, 2 rows, index nr 2 (second position in the subplot)\nplt.plot(c.iloc[3,:186])\nplt.subplot(1, 5, 5)  # 1 line, 2 rows, index nr 2 (second position in the subplot)\nplt.plot(c.iloc[4,:186])\n\nplt.show()\n\n\n\n","ce51893b":"def plot_hist(class_number,size,min_):\n    img=train_df.loc[train_df[187]==class_number].values\n    img=img[:,min_:size]\n    img_flatten=img.flatten()\n\n    final1=np.arange(min_,size)\n    for i in range (img.shape[0]-1):\n        tempo1=np.arange(min_,size)\n        final1=np.concatenate((final1, tempo1), axis=None)\n    print(len(final1))\n    print(len(img_flatten))\n    plt.hist2d(final1,img_flatten, bins=(80,80),cmap=plt.cm.jet)\n    plt.show()","f1891f50":"plot_hist(0,70,5)","9ade60d3":" plt.plot(c.iloc[1,:186])","b821336f":"plot_hist(1,50,5)","4a9a3c62":" plt.plot(c.iloc[2,:186])","b845e8a8":"plot_hist(2,60,30)","612a561c":"plt.plot(c.iloc[3,:186])","3caac0af":"plot_hist(3,60,25)","c84fe9e3":"plt.plot(c.iloc[4,:186])","c684dd51":"plot_hist(4,50,18)","641a5438":"def add_gaussian_noise(signal):\n    noise=np.random.normal(0,0.05,186)\n    return (signal+noise)\n","9d014560":"tempo=c.iloc[0,:186]\nbruiter=add_gaussian_noise(tempo)\n\nplt.subplot(2,1,1)\nplt.plot(c.iloc[0,:186])\n\nplt.subplot(2,1,2)\nplt.plot(bruiter)\n\nplt.show()\n\n","04dce6b1":"target_train=train_df[187]\ntarget_test=test_df[187]\ny_train=to_categorical(target_train)\ny_test=to_categorical(target_test)","d8715d98":"X_train=train_df.iloc[:,:186].values\nX_test=test_df.iloc[:,:186].values\n#for i in range(len(X_train)):\n#    X_train[i,:186]= add_gaussian_noise(X_train[i,:186])\nX_train = X_train.reshape(len(X_train), X_train.shape[1],1)\nX_test = X_test.reshape(len(X_test), X_test.shape[1],1)","6f21436b":"X_train.shape","252fc296":"def network(X_train,y_train,X_test,y_test):\n    \n\n    im_shape=(X_train.shape[1],1)\n    inputs_cnn=Input(shape=(im_shape), name='inputs_cnn')\n    conv1_1=Convolution1D(64, (6), activation='relu', input_shape=im_shape)(inputs_cnn)\n    conv1_1=BatchNormalization()(conv1_1)\n    pool1=MaxPool1D(pool_size=(3), strides=(2), padding=\"same\")(conv1_1)\n    conv2_1=Convolution1D(64, (3), activation='relu', input_shape=im_shape)(pool1)\n    conv2_1=BatchNormalization()(conv2_1)\n    pool2=MaxPool1D(pool_size=(2), strides=(2), padding=\"same\")(conv2_1)\n    conv3_1=Convolution1D(64, (3), activation='relu', input_shape=im_shape)(pool2)\n    conv3_1=BatchNormalization()(conv3_1)\n    pool3=MaxPool1D(pool_size=(2), strides=(2), padding=\"same\")(conv3_1)\n    flatten=Flatten()(pool3)\n    dense_end1 = Dense(64, activation='relu')(flatten)\n    dense_end2 = Dense(32, activation='relu')(dense_end1)\n    main_output = Dense(5, activation='softmax', name='main_output')(dense_end2)\n    \n    \n    model = Model(inputs= inputs_cnn, outputs=main_output)\n    model.compile(optimizer='adam', loss='categorical_crossentropy',metrics = ['accuracy'])\n    \n    \n    callbacks = [EarlyStopping(monitor='val_loss', patience=8),\n             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n\n    history=model.fit(X_train, y_train,epochs=5,callbacks=callbacks, batch_size=32,validation_data=(X_test,y_test))\n    model.load_weights('best_model.h5')\n    return(model,history)","389a9da8":"def evaluate_model(history,X_test,y_test,model):\n    scores = model.evaluate((X_test),y_test, verbose=0)\n    print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n    \n    print(history)\n    fig1, ax_acc = plt.subplots()\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Model - Accuracy')\n    plt.legend(['Training', 'Validation'], loc='lower right')\n    plt.show()\n    \n    fig2, ax_loss = plt.subplots()\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Model- Loss')\n    plt.legend(['Training', 'Validation'], loc='upper right')\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.show()\n    target_names=['0','1','2','3','4']\n    \n    y_true=[]\n    for element in y_test:\n        y_true.append(np.argmax(element))\n    prediction_proba=model.predict(X_test)\n    prediction=np.argmax(prediction_proba,axis=1)\n    cnf_matrix = confusion_matrix(y_true, prediction)\n    ","1ae1b913":"from keras.layers import Dense, Convolution1D, MaxPool1D, Flatten, Dropout\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.layers.normalization import BatchNormalization\nimport keras\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel,history=network(X_train,y_train,X_test,y_test)\n\n","c7dce531":"evaluate_model(history,X_test,y_test,model)\ny_pred=model.predict(X_test)\n\nprint(y_pred) \nprint(\"Result from real time data included in testing dataset:\")\nY_pred_classes = np.argmax(y_pred,axis = 1) \nprint(Y_pred_classes[0])\n\n","5089caec":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure(figsize=(10, 10))\nplot_confusion_matrix(cnf_matrix, classes=['N', 'S', 'V', 'F', 'Q'],normalize=True,\n                      title='Confusion matrix, with normalization')\nplt.show()\n\n","cefc9702":"We can underligned a huge difference in the balanced of the classes. After some try i have decided to  choose the resample technique more than the class weights for the algorithms. ","e3028b19":"I use a function where i add a noise to the data to generilize my train.","5987d91e":"\nArrhythmia Dataset\n\n    Number of Samples: 109446\n    Number of Categories: 5\n    Sampling Frequency: 125Hz\n    Data Source: Physionet's MIT-BIH Arrhythmia Dataset\n    Classes: ['N': 0, 'S': 1, 'V': 2, 'F': 3, 'Q': 4]\n\n\n-N : Non-ecotic beats (normal beat)\n-S : Supraventricular ectopic beats\n-V : Ventricular ectopic beats\n-F : Fusion Beats\n-Q : Unknown Beats","ead543a5":"**Balance of dataset**","4a47c6e0":"Resample works perfectly we can go on. ","f7fed718":"**Network**","d0d24988":"**Load Data**"}}