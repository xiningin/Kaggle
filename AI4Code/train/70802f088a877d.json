{"cell_type":{"4a87aabe":"code","6c1aa20a":"code","f90109b0":"code","0db86121":"code","61a7f7b2":"code","575747d0":"code","789b5a16":"code","382f1885":"code","e602fe66":"code","c22efb61":"code","b848b3d6":"code","3d6c0988":"code","3d3c0044":"code","f658d403":"code","b2b48ffe":"code","874e25aa":"code","06c86768":"code","8365d439":"code","2ff000a9":"code","0f271116":"code","6df604d0":"code","587ea938":"code","668800d3":"markdown","8312bcd4":"markdown","47d3daa5":"markdown","90e252c8":"markdown","3157f394":"markdown","709aca20":"markdown","3dd36f62":"markdown","fba49826":"markdown","b0a8bc1e":"markdown","d02ba58d":"markdown","245d558f":"markdown","a9c12244":"markdown","312a2934":"markdown","390dfad1":"markdown","0a421b81":"markdown","8cc8a609":"markdown","f18d7e37":"markdown","07462859":"markdown","8d74b530":"markdown"},"source":{"4a87aabe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c1aa20a":"!python -m pip install snap-stanford","f90109b0":"import snap","0db86121":"path = '\/kaggle\/input\/ml-in-graphs-hw0\/wiki-Vote.txt'\nG = snap.LoadEdgeList(snap.PNGraph, path, 0, 1)","61a7f7b2":"G.GetNodes()","575747d0":"snap.CntSelfEdges(G)","789b5a16":"snap.CntUniqDirEdges(G)","382f1885":"snap.CntUniqUndirEdges(G)","e602fe66":"snap.CntUniqBiDirEdges(G)","c22efb61":"snap.CntOutDegNodes(G,0)","b848b3d6":"snap.CntInDegNodes(G,0)","3d6c0988":"#cnt <= 10\ncntNodes = 0\nfor i in range(11):\n    cntNodes += snap.CntOutDegNodes(G,i)\nG.GetNodes() - cntNodes","3d3c0044":"#cnt <= 10\ncntNodes = 0\nfor i in range(10):\n    cntNodes += snap.CntInDegNodes(G,i)\ncntNodes","f658d403":"import matplotlib.pyplot as plt\nInDegV = snap.TIntPrV()\nsnap.GetOutDegCnt(G,InDegV)\npair = [[p.GetVal1(), p.GetVal2()] for p in InDegV if p.GetVal1() > 0]\nx = [np.log(p[0]) for p in pair]\ny = [np.log(p[1]) for p in pair]\nplt.scatter(x,y)","b2b48ffe":"import statsmodels.api as sm\nlr = sm.OLS(y, sm.add_constant(x))\nlr_res = lr.fit()\nlr_res.summary()","874e25aa":"lr_res.predict(x)","06c86768":"plt.scatter(x,y)\nplt.plot(x,lr_res.predict(sm.add_constant(x)), color = 'r')","8365d439":"path = '\/kaggle\/input\/ml-in-graphs-hw0\/stackoverflow-Java.txt'\nG2 = snap.LoadEdgeList(snap.PNGraph, path, 0, 1)","2ff000a9":"wcc = snap.TCnComV()\nsnap.GetWccs(G2, wcc)\nlen(wcc)","0f271116":"max_wcc = snap.GetMxWcc(G2)\nprint(max_wcc.GetEdges())\nprint(max_wcc.GetNodes())","6df604d0":"PRankH = snap.TIntFltH()\nsnap.GetPageRank(G2,PRankH)\npair = [[k,PRankH[k]] for k in PRankH]\npair = sorted(pair, key = lambda x: x[1], reverse = True)\n[p[0] for p in pair[:3]]","587ea938":"NIdHubH = snap.TIntFltH()\nNIdAuthH = snap.TIntFltH()\nsnap.GetHits(G2, NIdHubH, NIdAuthH)\nhub = [[k,NIdHubH[k]] for k in NIdHubH]\nhub = sorted(hub, key = lambda x: x[1], reverse = True)\nprint([p[0] for p in hub[:3]])\n\naut = [[k,NIdAuthH[k]] for k in NIdAuthH]\naut = sorted(aut, key = lambda x: x[1], reverse = True)\nprint([p[0] for p in aut[:3]])","668800d3":"## The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)","8312bcd4":"## The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc.","47d3daa5":"## The number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs.","90e252c8":"## IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits.","3157f394":"## The number of nodes in the network. (G small has 3 nodes.)","709aca20":"# Analyzing the Wikipedia voters network [27 points]\nDownload the Wikipedia voting network wiki-Vote.txt.gz: http:\/\/snap.stanford.edu\/data\/wiki-Vote.html.\nUsing one of the network analysis tools above, load the Wikipedia voting network. Note that\nWikipedia is a directed network. Formally, we consider the Wikipedia network as a directed\ngraph G = (V, E), with node set V and edge set E \u2282 V \u00d7 V where (edges are ordered pairs\nof nodes). An edge (a, b) \u2208 E means that user a voted on user b.  \nTo make our questions clearer, we will use the following small graph as a running example:  \nG small = (V small , E small ), where V small = {1, 2, 3} and  \nE small = {(1, 2), (2, 1), (1, 3), (1, 1)}.  \nCompute and print out the following statistics for the wiki-Vote network:\n","3dd36f62":"## The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\n","fba49826":"## (18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes.\n","b0a8bc1e":"# 2 Further Analyzing the Wikipedia voters network [33 points]\nFor this problem, we use the Wikipedia voters network. If you are using Python, you might\nwant to use NumPy, SciPy, and\/or Matplotlib libraries.\n\n","d02ba58d":"## The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)","245d558f":"## The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)","a9c12244":"## The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)","312a2934":"## (15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1.","390dfad1":"# 3 Finding Experts on the Java Programming Language on StackOverflow [40 points]\nDownload the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\n","0a421b81":"## IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank.","8cc8a609":"## The number of nodes with more than 10 outgoing edges (out-degree > 10).","f18d7e37":"You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics.","07462859":"## The number of nodes with fewer than 10 incoming edges (in-degree < 10).","8d74b530":"## The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)"}}