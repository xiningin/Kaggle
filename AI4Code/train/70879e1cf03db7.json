{"cell_type":{"27b00dcc":"code","77f55ad5":"code","35a2a632":"code","02bfe628":"code","e94d3d29":"code","b9bb3b9e":"code","915e7aee":"code","789adb4c":"code","f15df2f9":"code","d82ef837":"code","ab9bdb73":"code","72b8cbc7":"code","0cfa16fa":"code","74c9ea79":"code","a43e32f3":"code","887c2ed0":"code","cad65e89":"code","5aa195d3":"code","ead8f949":"code","846e9c50":"code","133348c1":"code","7f8c1fd2":"code","f15bfcdc":"code","84086df2":"code","30edaea5":"code","bf3fcf08":"code","2896acf6":"code","bc3f9ebb":"code","23871406":"code","f22f16b1":"code","354a9a8a":"code","974d2d80":"code","f581afcb":"code","e2e4782f":"code","62c53cbb":"code","13c84ed8":"code","dbb7ce81":"code","c3dd3106":"markdown","bf155763":"markdown","f8dbe70d":"markdown"},"source":{"27b00dcc":"# Importando\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt","77f55ad5":"# Lendo o dataset (bcell)\ndata = pd.read_csv(\"..\/input\/epitope-prediction\/input_bcell.csv\")\ndata","35a2a632":"# Tamanho do dataset\nlen(data)","02bfe628":"# Verificando exist\u00eancia de valores vazios no dataset\ndata.isnull().sum()","e94d3d29":"data.hist(grid=False, figsize=(20, 20), bins=40)","b9bb3b9e":"zero, um = data['target'].value_counts()\n\nqtde = np.array([zero, um])\nelementos = np.array(['0', '1'])\n\nplt.bar(elementos, qtde, width=0.1)","915e7aee":"# Verifica-se o desbalanceamento existente\ndata['target'].value_counts()","789adb4c":"data.info()","f15df2f9":"data.describe()","d82ef837":"data.describe(include='all')","ab9bdb73":"def length(col):\n    new = []\n    for i in col:\n        new.append(len(i))\n    return new","72b8cbc7":"# Transformando as colunas que n\u00e3o eram num\u00e9ricas e que ser\u00e3o usadas no modelo\ndata['peptide_seq'] =length(data['peptide_seq'])\ndata['protein_seq'] = length(data['protein_seq'])","0cfa16fa":"data","74c9ea79":"data['peptide_seq'].value_counts()","a43e32f3":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom imblearn.over_sampling import SMOTE","887c2ed0":"features = [\"protein_seq\", \"peptide_seq\", \"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\",\"isoelectric_point\",\"aromaticity\",\"hydrophobicity\",\"stability\"]","cad65e89":"x = data[features]\ny = data['target']","5aa195d3":"x.head()","ead8f949":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33,random_state=1)","846e9c50":"print(\"Number instances in features_train dataset: \", x_train.shape)\nprint(\"Number instances in Output_train dataset: \", y_train.shape)\nprint(\"Number instances in features_test dataset: \", x_test.shape)\nprint(\"Number instances in Output_test dataset: \", y_test.shape)","133348c1":"print(\"Before OverSampling, counts of Recurrent Class '1': {}\".format(sum(y_train==1)))\nprint(\"Before OverSampling, counts of No-Recurrent Class '0': {} \\n\".format(sum(y_train==0)))\n\n\nsm = SMOTE(random_state=2)\nx_train_res, y_train_res = sm.fit_resample(x_train, y_train)\n\n\nprint('After OverSampling, the shape of features_X: {}'.format(x_train_res.shape))\nprint('After OverSampling, the shape of Output_y: {} \\n'.format(y_train_res.shape))\n\nprint(\"After OverSampling, counts of Recurrent Class '1': {}\".format(sum(y_train_res==1)))\nprint(\"After OverSampling, counts of Non-Recurrent Class '0': {}\".format(sum(y_train_res==0)))\n","7f8c1fd2":"#1.Decision Tree Classifier\nclassifierTree = DecisionTreeClassifier()\n\n#2.Support Vector Classification\nclassifierSVC = SVC(probability=True)\n\n#3.Random Forest\nclassifierRandomForest = RandomForestClassifier()","f15bfcdc":"classifierTree.fit(x_train_res, y_train_res)\nclassifierSVC.fit(x_train_res, y_train_res)\nclassifierRandomForest.fit(x_train_res, y_train_res)\n\nModelPredictionsTree = classifierTree.predict(x_test)\nModelPredictionsSVC = classifierSVC.predict(x_test)\nModelPredictionsRandomForest = classifierRandomForest.predict(x_test)","84086df2":"print(\"Decision Tree Classifier\\n\")\nprint(\"Acur\u00e1cia: \", accuracy_score(y_test, ModelPredictionsTree))\nprint(\"Precis\u00e3o: \", precision_score(y_test, ModelPredictionsTree))\nprint(\"Recall:   \", recall_score(y_test, ModelPredictionsTree))","30edaea5":"print(\"Support Vector Classification\\n\")\nprint(\"Acur\u00e1cia: \", accuracy_score(y_test, ModelPredictionsSVC))\nprint(\"Precis\u00e3o: \", precision_score(y_test, ModelPredictionsSVC))\nprint(\"Recall:   \", recall_score(y_test, ModelPredictionsSVC))","bf3fcf08":"print(\"Random Forest\\n\")\nprint(\"Acur\u00e1cia: \", accuracy_score(y_test, ModelPredictionsRandomForest))\nprint(\"Precis\u00e3o: \", precision_score(y_test, ModelPredictionsRandomForest))\nprint(\"Recall:   \", recall_score(y_test, ModelPredictionsRandomForest))","2896acf6":"ModelPredProbTree = classifierTree.predict_proba(x_test)[::,1]\ntree_fpr, tree_tpr, threshold = roc_curve(y_test, ModelPredProbTree)\nauc_tree = auc(tree_fpr, tree_tpr)\n\nModelPredProbSVC = classifierSVC.predict_proba(x_test)[::,1]\nsvc_fpr, svc_tpr, threshold = roc_curve(y_test, ModelPredProbSVC)\nauc_svc = auc(svc_fpr, svc_tpr)\n\nModelPredProbRF = classifierRandomForest.predict_proba(x_test)[::,1]\nrf_fpr, rf_tpr, threshold = roc_curve(y_test, ModelPredProbRF)\nauc_rf = auc(rf_fpr, rf_tpr)\n\nplt.figure(figsize=(10, 10), dpi=100)\n\nplt.plot(tree_fpr, tree_tpr, marker=\".\", label='Decision Tree (auc = %0.3f)' % auc_tree)\nplt.plot(svc_fpr, svc_tpr, marker=\".\", label='Support Vector (auc = %0.3f)' % auc_svc)\nplt.plot(rf_fpr, rf_tpr, marker=\".\", label='Random Forest (auc = %0.3f)' % auc_rf)\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n\nplt.legend()\nplt.show()","bc3f9ebb":"# Lendo o dataset sars\nsars = pd.read_csv(\"..\/input\/epitope-prediction\/input_sars.csv\")\nsars","23871406":"# Transformando as colunas n\u00e3o num\u00e9ricas para serem usadas na predi\u00e7\u00e3o\nsars['peptide_seq'] = length(sars['peptide_seq'])\nsars['protein_seq'] = length(sars['protein_seq'])","f22f16b1":"sars","354a9a8a":"x_sars = sars[features]\ny_sars = sars['target']","974d2d80":"# Fazendo as predi\u00e7\u00f5es do dataset sars com os modelos treinados com o dataset bcell\nsars_ModelPredictionsTree = classifierTree.predict(x_sars)\nsars_ModelPredictionsSVC = classifierSVC.predict(x_sars)\nsars_ModelPredictionsRandomForest = classifierRandomForest.predict(x_sars)","f581afcb":"print(\"Decision Tree Classifier\\n\")\nprint(\"Acur\u00e1cia: \", accuracy_score(y_sars, sars_ModelPredictionsTree))\nprint(\"Precis\u00e3o: \", precision_score(y_sars, sars_ModelPredictionsTree))\nprint(\"Recall:   \", recall_score(y_sars, sars_ModelPredictionsTree))","e2e4782f":"print(\"Support Vector Classification\\n\")\nprint(\"Acur\u00e1cia: \", accuracy_score(y_sars, sars_ModelPredictionsSVC))\nprint(\"Precis\u00e3o: \", precision_score(y_sars, sars_ModelPredictionsSVC))\nprint(\"Recall:   \", recall_score(y_sars, sars_ModelPredictionsSVC))","62c53cbb":"print(\"Random Forest\\n\")\nprint(\"Acur\u00e1cia: \", accuracy_score(y_sars, sars_ModelPredictionsRandomForest))\nprint(\"Precis\u00e3o: \", precision_score(y_sars, sars_ModelPredictionsRandomForest))\nprint(\"Recall:   \", recall_score(y_sars, sars_ModelPredictionsRandomForest))","13c84ed8":"lr_probs = classifierRandomForest.predict_proba(x_sars)\nlr_probs = lr_probs[:, 1]\nlr_auc = roc_auc_score(y_sars, lr_probs)\n\nprint('ROC AUC = %.3f' % (lr_auc)) # Por quest\u00e3o de compara\u00e7\u00e3o","dbb7ce81":"sars_ModelPredProbTree = classifierTree.predict_proba(x_sars)[::,1]\ntree_fpr, tree_tpr, threshold = roc_curve(y_sars, sars_ModelPredProbTree)\nauc_tree = auc(tree_fpr, tree_tpr)\n\nsars_ModelPredProbSVC = classifierSVC.predict_proba(x_sars)[::,1]\nsvc_fpr, svc_tpr, threshold = roc_curve(y_sars, sars_ModelPredProbSVC)\nauc_svc = auc(svc_fpr, svc_tpr)\n\nsars_ModelPredProbRF = classifierRandomForest.predict_proba(x_sars)[::,1]\nrf_fpr, rf_tpr, threshold = roc_curve(y_sars, sars_ModelPredProbRF)\nauc_rf = auc(rf_fpr, rf_tpr)\n\nplt.figure(figsize=(10, 10), dpi=100)\n\nplt.plot(tree_fpr, tree_tpr, marker=\".\", label='Decision Tree (auc = %0.3f)' % auc_tree)\nplt.plot(svc_fpr, svc_tpr, marker=\".\", label='Support Vector (auc = %0.3f)' % auc_svc)\nplt.plot(rf_fpr, rf_tpr, marker=\".\", label='Random Forest (auc = %0.3f)' % auc_rf)\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n\nplt.legend()\nplt.show()","c3dd3106":"---","bf155763":"---","f8dbe70d":"___"}}