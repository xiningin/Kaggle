{"cell_type":{"294162b3":"code","544e180f":"code","e7fecc45":"code","4e74f07a":"code","5b415bfd":"code","e39f6b63":"code","e2871135":"code","a9399292":"code","731f5812":"code","7b0081d2":"code","ebb415e9":"code","70dde433":"code","c7fd92cf":"code","323c6669":"code","19f47260":"code","ceaf1eba":"code","de2a9c6f":"code","c211a44c":"code","667cf19e":"code","74789854":"code","90015c51":"code","01d712db":"code","86fe1894":"code","3dfa305e":"code","0cf56870":"code","afe3f83c":"code","4c79bc12":"code","ab8ec4f0":"code","76715fb3":"code","87ca1e1d":"markdown","3d67d871":"markdown","ffe7d115":"markdown","69815f75":"markdown","6f4b90d3":"markdown","6ecbffbe":"markdown","3b489c0d":"markdown","868c5fa5":"markdown","e402b808":"markdown","a749346e":"markdown","8e3beccb":"markdown","4cb31dcf":"markdown"},"source":{"294162b3":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","544e180f":"import pandas as pd\nimport numpy as np","e7fecc45":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub41c\ub2e4\uace0 \ud568\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","4e74f07a":"# \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778\nX_train.shape, X_test.shape, y_train.shape","5b415bfd":"# \ub370\uc774\ud130 \ud655\uc778\nX_train.head()","e39f6b63":"# \ud0c0\uac9f \uc218 \ud655\uc778\ny_train['income'].value_counts()","e2871135":"# type\ud655\uc778\nX_train.info()","a9399292":"# \ud53c\ucc98 \uad6c\ubd84\n# Numeric features\nnumeric_features = [\n                    'age',\n                    'fnlwgt', \n                    'education.num',\n                    'capital.gain', \n                    'capital.loss', \n                    'hours.per.week',                     \n                   ]\n\n# Categorical features\ncat_features = [\n                 'workclass',              \n                 'education',            \n                 'marital.status', \n                 'occupation', \n                 'relationship', \n                 'race', \n                 'sex',\n                 'native.country'\n]","731f5812":"X_train[numeric_features].describe()","7b0081d2":"X_train[cat_features].describe()","ebb415e9":"X_train.isnull().sum()","70dde433":"X_test.isnull().sum()","c7fd92cf":"X_train['workclass'].value_counts()","323c6669":"X_train['occupation'].value_counts()","19f47260":"X_train['native.country'].value_counts()","ceaf1eba":"def data_fillna(df):\n    df['workclass'] = df['workclass'].fillna(df['workclass'].mode()[0]) # \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6c0 \n    df['occupation'] = df['occupation'].fillna(\"null\")                  # 'null' \uc774\ub77c\ub294 \ubb38\uc790\uc5f4\ub85c \ucc44\uc6c0\n                                                                        # \uacb0\uce21\uac12\uc774 1463\uac1c\uc778\ub370,\ucd5c\ube48\uac12\uc758 \ube48\ub3c4\uac00 3323\uac1c\ub85c \ud070 \ucc28\uc774\uac00 \uc5c6\uae30 \ub54c\ubb38\n    df['native.country'] = df[\"native.country\"].fillna(df['native.country'].mode()[0]) # \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6c0\n    return df\n\nX_train = data_fillna(X_train)\nX_test = data_fillna(X_test)\n\nX_train.isnull().sum()","de2a9c6f":"# \ub77c\ubca8\uc778\ucf54\ub529 \ud83d\udc93\ud83d\udc93\ud83d\udc93\ud83d\udc93\ud83d\udc93 (\ubc94\uc8fc\ud615 -> \uc218\uce58\ud615 )\nfrom sklearn.preprocessing import LabelEncoder\n\nall_df = pd.concat([X_train.assign(ind=\"train\"), X_test.assign(ind=\"test\")])\nle = LabelEncoder()\nall_df[cat_features] = all_df[cat_features].apply(le.fit_transform)\n\nX_train = all_df[all_df['ind'] == 'train']\nX_train = X_train.drop('ind',axis=1)\nX_train\n\nX_test = all_df[all_df['ind'] == 'test']\nX_test = X_test.drop('ind',axis=1)\nX_test","c211a44c":"# \uc2a4\ucf00\uc77c\ub9c1 \ud83d\udc93\ud83d\udc93\ud83d\udc93\ud83d\udc93\ud83d\udc93 (\uc218\uce58\ud615 \ubcc0\uc218)\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])\nX_train","667cf19e":"y_train","74789854":"# target\uac12 \ubcc0\uacbd\ny = (y_train['income'] != '<=50K').astype(int)\ny[:5]","90015c51":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub85c \uad6c\ubd84\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size=0.15, random_state=2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","01d712db":"X_tr.head()","86fe1894":"# id \uc0ad\uc81c\nX_tr = X_tr.drop('id', axis=1)\nX_val = X_val.drop('id', axis=1)","3dfa305e":"# id \uc0ad\uc81c\ub41c \uac83 \ud655\uc778\nX_tr.head(1)","0cf56870":"# \uc758\uc0ac\uacb0\uc815\ub098\ubb34\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = DecisionTreeClassifier(random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","afe3f83c":"# \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(random_state = 2022)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score:', (accuracy_score(y_val, pred)))","4c79bc12":"# test\ub370\uc774\ud130 \uc608\uce21 (pop\uc744 \ud65c\uc6a9\ud558\uba74 \uac12\uc744 \ub118\uaca8\uc8fc\uace0 \uc0ad\uc81c \ub428)\nX_test_id = X_test.pop('id')\npred = model.predict(X_test)","ab8ec4f0":"# csv\uc0dd\uc131\noutput = pd.DataFrame({'id': X_test_id, 'income':pred})\noutput.to_csv(\"000000.csv\", index=False)\noutput.head()","76715fb3":"y_test = (y_test['income'] != '<=50K').astype(int)\nfrom sklearn.metrics import accuracy_score\nprint('accuracy score:', (accuracy_score(y_test, pred)))","87ca1e1d":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","3d67d871":"## \ubaa8\ub378 & \ud3c9\uac00","ffe7d115":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","69815f75":"## \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac","6f4b90d3":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(\uc0dd\ub7b5)","6ecbffbe":"# \uc0ac\uc6a9\uc790 \ucf54\ub529","3b489c0d":"## EDA","868c5fa5":"## \uacb0\uce21\uce58 \ucc98\ub9ac","e402b808":"# \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774 \ud83d\udca5\ud83d\udca5\ud83d\udca5","a749346e":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)","8e3beccb":"## \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","4cb31dcf":"- \uacb0\uce21\uce58\ub294 \ucd5c\ube48\uac12\uacfc \ucc28\uc774\uac00 \ud06c\uba74 \ucd5c\ube48\uac12\uc73c\ub85c \uac12\uc774 \ube44\uc2b7\ud558\uba74 \ubcc4\ub3c4\uc758 \uac12\uc73c\ub85c \ub300\uccb4\ud568 \u2764\u2764\u2764"}}