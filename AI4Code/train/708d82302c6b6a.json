{"cell_type":{"c8f742d2":"code","34bf3851":"code","88baeb5d":"code","ff162c5b":"code","9aee99c0":"code","ba7fd2d3":"code","00ab803c":"code","89f0f3bc":"code","93334669":"code","f0509b42":"code","3b333d5a":"code","aabb4ef1":"code","7eb86991":"code","5da23d28":"code","51fbf46c":"code","365a1b29":"code","5abf0356":"code","8e263200":"code","b303cdce":"code","1c29f544":"code","0b593596":"code","aab95e3a":"code","b0d6faa7":"code","693a8fdc":"code","5fe05698":"code","85205e9b":"code","19a35c09":"code","4ac2954f":"code","67361862":"code","72614357":"code","3a93b0cc":"code","ea50f58b":"code","8d55c250":"code","cf5d4df2":"code","f97cc148":"code","28edb3a3":"code","54fadee5":"code","5dbe5522":"code","e5331551":"code","ce97def2":"code","115238dc":"code","977f3995":"code","0562f8e0":"code","3abd674f":"code","efb2f0ce":"code","115d9da9":"code","ca8ecfcd":"code","22a3fb0c":"code","b142ddbc":"code","59abea50":"code","b51f243a":"code","176ae1bc":"code","51f4a232":"code","e05e0a15":"code","2ea92ea0":"markdown","6c7b18a1":"markdown","cbeb3cb7":"markdown","f23f07c2":"markdown","e2ef782c":"markdown","9552eef7":"markdown","a73f17a5":"markdown","367fa462":"markdown","3fb83cbc":"markdown","fb8205fd":"markdown","5b023082":"markdown","5ac0e312":"markdown","b0d69a91":"markdown","c0e72202":"markdown","40f7e3ae":"markdown","941572dc":"markdown","2bf1efb8":"markdown","17da803b":"markdown","76029085":"markdown","126107af":"markdown","0fa2af3f":"markdown"},"source":{"c8f742d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","34bf3851":"from pandas import DataFrame, read_csv, get_dummies\nfrom scipy.stats import zscore\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom matplotlib.pyplot import figure, subplot2grid\nfrom seaborn import set_theme,scatterplot,displot,barplot,countplot,heatmap\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom numpy import where,abs,median,nan,sqrt\n%matplotlib inline","88baeb5d":"set_theme(context=\"notebook\",style='darkgrid', palette='inferno')","ff162c5b":"df = read_csv(\"\/kaggle\/input\/engineering-graduate-salary-prediction\/Engineering_graduate_salary.csv\")","9aee99c0":"df.info()","ba7fd2d3":"df.head()","00ab803c":"df.replace(to_replace=-1, value=0,inplace=True)","89f0f3bc":"figure(figsize=(16,16))\nplot = heatmap(df.corr(), annot=True)\nplot.set_title(\"Correlation Matrix\", fontsize=18)","93334669":"df.drop(columns=[\"ID\", \"DOB\"], inplace=True)","f0509b42":"df[\"Gender\"] = df[\"Gender\"].replace({'m': 0, 'f': 1})","3b333d5a":"X = df[['Gender', '10percentage', '12graduation', '12percentage', 'CollegeID', 'CollegeTier', 'collegeGPA', 'CollegeCityID', 'CollegeCityTier', 'GraduationYear', 'English', 'Logical', 'Quant', 'Domain', 'ComputerProgramming', 'ElectronicsAndSemicon', 'ComputerScience', 'MechanicalEngg', 'ElectricalEngg', 'TelecomEngg', 'CivilEngg', 'conscientiousness', 'agreeableness', 'extraversion', 'nueroticism', 'openess_to_experience', 'Salary']]\n\nvif_data = DataFrame()\nvif_data[\"Column\"] = X.columns\n\nvif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(X.columns))]\n\nvif_data","aabb4ef1":"plot = displot(df[\"Salary\"], kde=True)","7eb86991":"df[\"Salary\"] = df[\"Salary\"].replace([df[\"Salary\"][(abs(zscore(df[\"Salary\"])) > 3)]], median(df[\"Salary\"]))","5da23d28":"plot = displot(data=df[\"Salary\"], kde=True)","51fbf46c":"plot = scatterplot(x=df.Salary, y=df.Gender)\nplot.set_title(\"Scatter Plot of Gender with Salary\", fontsize=14)","365a1b29":"plot = scatterplot(x=df['10percentage'], y=df['12percentage'])\nplot.set_title(\"Scatter Plot of 10percentage with 12percentage\", fontsize=14)","5abf0356":"df[\"10percentage\"].corr(df[\"12percentage\"])","8e263200":"df.drop(columns=[\"10percentage\"], inplace=True)","b303cdce":"plot = scatterplot(x=df['CollegeID'], y=df['CollegeCityID'])\nplot.set_title(\"Scatter Plot of CollegeID with CollegeCityID\", fontsize=14)","1c29f544":"df.drop(columns=[\"CollegeID\"], inplace=True)\ndf[\"CollegeCityID\"].nunique()","0b593596":"plot = scatterplot(x=df['12graduation'], y=df['GraduationYear'])\nplot.set_title(\"Scatter Plot of 12graduation with GraduationYear\", fontsize=14)","aab95e3a":"df = df[df[\"GraduationYear\"]> 1750]","b0d6faa7":"df[\"GraduationYear\"].corr(df[\"12graduation\"])","693a8fdc":"df.drop(columns=[\"12graduation\"], inplace=True)","5fe05698":"figure(figsize=(16,8))\nplot = scatterplot(x=df['12percentage'], y=df['collegeGPA'], hue=df.CollegeTier)\nplot.set_title(\"Scatter Plot of 12percentage with collegeGPA\", fontsize=14)","85205e9b":"plot = scatterplot(x=df[\"collegeGPA\"],y=df[\"Salary\"])\nplot.set_title(\"Scatter Plot of collegeGPA with Salary\", fontsize=14)","19a35c09":"df = df[df[\"collegeGPA\"] > 40]","4ac2954f":"figure(figsize=(8,24))\nsubplot2grid((3,1),(0,0))\nscatterplot(x=df['English'], y=df['Salary']).set_title(\"English\", fontsize=14)\nsubplot2grid((3,1),(1,0))\nscatterplot(x=df['Logical'], y=df['Salary']).set_title(\"Logical\", fontsize=14)\nsubplot2grid((3,1),(2,0))\nscatterplot(x=df['Quant'], y=df['Salary']).set_title(\"Quant\", fontsize=14)","67361862":"plot = scatterplot(x=df['Domain'], y=df['Salary'])\nplot.set_title(\"Domain\", fontsize=14)","72614357":"figure(figsize=(16,32))\nsubplot2grid((4,2),(0,0))\nscatterplot(x=df['ComputerProgramming'], y=df['Salary']).set_title(\"ComputerProgramming\", fontsize=14)\nsubplot2grid((4,2),(0,1))\nscatterplot(x=df['ElectronicsAndSemicon'], y=df['Salary']).set_title(\"ElectronicsAndSemicon\", fontsize=14)\nsubplot2grid((4,2),(1,0))\nscatterplot(x=df['ComputerScience'], y=df['Salary']).set_title(\"ComputerScience\", fontsize=14)\nsubplot2grid((4,2),(1,1))\nscatterplot(x=df['MechanicalEngg'], y=df['Salary']).set_title(\"MechanicalEngg\", fontsize=14)\nsubplot2grid((4,2),(2,0))\nscatterplot(x=df['ElectricalEngg'], y=df['Salary']).set_title(\"ElectricalEngg\", fontsize=14)\nsubplot2grid((4,2),(2,1))\nscatterplot(x=df['TelecomEngg'], y=df['Salary']).set_title(\"TelecomEngg\", fontsize=14)\nsubplot2grid((4,2),(3,0))\nscatterplot(x=df['CivilEngg'], y=df['Salary']).set_title(\"CivilEngg\", fontsize=14)","3a93b0cc":"figure(figsize=(16,16))\nplot= scatterplot(x=df[\"10board\"],y=df[\"12board\"])\nplot.set_title(\"Scatter Plot of 10board with 12board\", fontsize=14)","ea50f58b":"df.drop(columns=[\"10board\"], inplace=True)","8d55c250":"figure(figsize=(16,8))\nplot = countplot(x=df[\"12board\"])\nplot.set_xticklabels(plot.get_xticklabels(),rotation=\"vertical\")\nplot.set_title(\"Count Plot of 12board\", fontsize=14)","cf5d4df2":"board = df[\"12board\"].value_counts()","f97cc148":"rare_board = board[board <= 10]","28edb3a3":"def remove_rare_board(value):\n    if value in rare_board:\n        return 'other'\n    else:\n        return value\ndf[\"12board\"] = df[\"12board\"].apply(remove_rare_board)\ndf[\"12board\"].value_counts()","54fadee5":"df[\"12board\"].replace(to_replace='0',value='cbse', inplace=True)","5dbe5522":"df = get_dummies(df, columns=[\"12board\"], prefix=\"board_\")","e5331551":"figure(figsize=(16,8))\nplot = barplot(x=df[\"Degree\"],y=df[\"Salary\"])\nplot.set_xticklabels(plot.get_xticklabels(),rotation=\"vertical\")\nplot.set_title(\"Bar Plot of Degree with Salary\", fontsize=14)","ce97def2":"df[\"Degree\"].value_counts()","115238dc":"df = get_dummies(df, columns=[\"Degree\"], prefix=\"degree_\")","977f3995":"figure(figsize=(16,8))\nplot = countplot(x=df[\"Specialization\"])\nplot.set_xticklabels(plot.get_xticklabels(),rotation=\"vertical\")\nplot.set_title(\"Count Plot of Specialization\", fontsize=14)","0562f8e0":"specializations = df[\"Specialization\"].value_counts()","3abd674f":"rare_specialization = specializations[specializations <= 10]","efb2f0ce":"def remove_rare_specializations(value):\n    if value in rare_specialization:\n        return 'other'\n    else:\n        return value\ndf[\"Specialization\"] = df[\"Specialization\"].apply(remove_rare_specializations)\ndf[\"Specialization\"].value_counts()","115d9da9":"df = get_dummies(df, columns=[\"Specialization\"], prefix=\"specialization_\")","ca8ecfcd":"figure(figsize=(16,24))\nsubplot2grid((4,2),(0,0))\nscatterplot(x=df['conscientiousness'], y=df['Salary']).set_title(\"conscientiousness\", fontsize=14)\nsubplot2grid((4,2),(0,1))\nscatterplot(x=df['agreeableness'], y=df['Salary']).set_title(\"agreeableness\", fontsize=14)\nsubplot2grid((4,2),(1,0))\nscatterplot(x=df['extraversion'], y=df['Salary']).set_title(\"extraversion\", fontsize=14)\nsubplot2grid((4,2),(1,1))\nscatterplot(x=df['nueroticism'], y=df['Salary']).set_title(\"nueroticism\", fontsize=14)\nsubplot2grid((4,2),(2,0))\nscatterplot(x=df['openess_to_experience'], y=df['Salary']).set_title(\"openess_to_experience\", fontsize=14)","22a3fb0c":"plot = scatterplot(x=df[\"CollegeTier\"], y=df[\"CollegeCityTier\"])\nplot.set_title(\"Scatter Plot of CollegeTier with CollegeCityTier\", fontsize=14)","b142ddbc":"df.drop(columns=[\"CollegeCityTier\"], inplace=True)","59abea50":"figure(figsize=(16,8))\nplot = countplot(x=df[\"CollegeState\"])\nplot.set_xticklabels(plot.get_xticklabels(),rotation=\"vertical\")\nplot.set_title(\"Count Plot of CollegeState\", fontsize=14)","b51f243a":"df[\"CollegeState\"].value_counts()","176ae1bc":"df = get_dummies(df, columns=[\"CollegeState\"], prefix=\"state_\")","51f4a232":"df.columns","e05e0a15":"data = df.copy()\nX = data.drop(columns=[\"Salary\"])\ny = data[[\"Salary\"]]\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.4,random_state=49, shuffle=True)\n\nmodel = Ridge(alpha=0.5)\nmodel.fit(X_train,y_train)\n\ny_pred = model.predict(X_test)\n\nprint(sqrt(mean_squared_error(y_test,y_pred)))\nprint(r2_score(y_test,y_pred))","2ea92ea0":"I will convert categorical data to numeric data using get_dummies, so we can use these in our model","6c7b18a1":"Though 10board and 12board are not very same but still I will remove 10board so that there is no risk of multicollinearity","cbeb3cb7":"There are many boards which are very rarely choosen by students\n\nSo I will take major boards and categorize rest of them as other","f23f07c2":"I will calculate [variance inflation factor](https:\/\/en.wikipedia.org\/wiki\/Variance_inflation_factor) which will help us identity if the there is [multicollinearity](https:\/\/en.wikipedia.org\/wiki\/Multicollinearity) in the data","e2ef782c":"Our data looked very skewed, this can be because of Outliers (outliers are the points in the dataset which show high deviation from most of the data)\n\nTo make it a more normalised distribution we can remove Outliers\n\nWe can remove outliers using various algorithms and technique\n\nHere I am going to use Z-Score (Z-Score is the how much times the standard deviation a point is deviated from the mean value.)\n\nWe will replace the values that are very largely deviated with the median value.","9552eef7":"This looks more like a normal distribution.","a73f17a5":"Looks like majority of students belong to B.Tech.\/B.E. but still degree is very important factor in determining Salary\n\nAgain I will convert categorical data to numeric data using get_dummies, so we can use these in our model","367fa462":"Looks like there is another error as there is no '0' board\nI will replace this '0' board with 'cbse' as it is the most common one","3fb83cbc":"Now let's plot correlation matrix","fb8205fd":"I will manually remove the outleirs as they are easily identifiable in the plot","5b023082":"I will categorize rarely chosen specializations into other","5ac0e312":"Let's remove CollegeCityTier as it is not as relevant as CollegeTier","b0d69a91":"There is a point with 0 graduation year\n\nThis can be a error in dataset\nLet's remove it","c0e72202":"I will map Gender to integers so that it can be used in the calculations","40f7e3ae":"Now let's convert it to numeric so we can use it in our model","941572dc":"There is high correlation between 10 & 12 percentages\n\nAlso there is high multicollinearity as seen in the VIF values\n\nSo again instead of using both, I will use only GraduationYear","2bf1efb8":"There is high correlation between 10 & 12 percentages\n\nAlso there is high multicollinearity as seen in the VIF values\n\nSo instead of using both, I will use only 12 percentage as 12 percentage is somewhat more important as compared to 10 percentage.","17da803b":"-1 in the data represents that student has not attempted that section\n\nFor sake of convenience I will replace -1 with 0\n\nSo if a student has not attempted the section it will add nothing to the Salary","76029085":"I will drop ID and DOB columns as they are not very relevant to the Salary","126107af":"I will use Ridge Regression as there is some multicollinearity\n\nRidge provides advantage in this case","0fa2af3f":"Looks like CollegeID and CollegeCityID is same for every value\n\nAlso it had infinite VIF \n\nSo it is neccessary to drop one of them"}}