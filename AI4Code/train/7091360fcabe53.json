{"cell_type":{"01aed57b":"code","38476c2a":"code","9185f1e7":"code","3a31da91":"code","2efb0907":"code","cfc85edb":"code","5f2d0e75":"code","f4f04ac5":"code","1dc9eac6":"code","1d3e5c37":"code","2a4f9b54":"code","308245d7":"code","f8a8edcc":"code","7ad95de1":"code","ced7a0d3":"code","1947b8aa":"code","0bf6cc0d":"code","bdcd6557":"code","df453857":"code","062f7684":"code","91a904ed":"code","214d5154":"code","1ce7d96c":"code","00d4dfff":"code","86aab2fc":"code","4f2511e2":"code","ff3915ff":"code","6b141572":"code","067a9018":"code","4b5c1979":"code","702a691e":"code","75e1a41f":"code","54b73a63":"code","85661744":"code","1cd65746":"code","a8c67af1":"code","f2abd675":"code","a4f326f4":"code","e87d9c63":"code","84d2d54c":"code","403c4141":"code","bc218706":"code","d4a56749":"code","0391debc":"code","e09c7628":"code","8f85092a":"code","bb0a81f1":"code","0a780437":"code","1379c7e4":"code","8775e9e4":"code","deec34f6":"code","390dfd4a":"code","a7510ef0":"code","1c16e99b":"code","ee2c9b1d":"code","9be48902":"code","8094e88f":"code","9f5a0d78":"code","99b282cc":"code","f00f35a5":"code","b9e6a14c":"code","6956eb1e":"code","1afedf4e":"code","c4198fdd":"code","0ba0261c":"code","b3115a2c":"code","a45521aa":"code","8eed22d1":"code","6bf2a49e":"code","8957515a":"code","677fbf70":"code","f1a8c5ab":"markdown","8a2f6dd8":"markdown","262e7ee7":"markdown","529c2d29":"markdown","d62c1ce9":"markdown"},"source":{"01aed57b":"import warnings\nwarnings.filterwarnings('ignore')","38476c2a":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","9185f1e7":"ds = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', delimiter=',')","3a31da91":"ds.head(3)","2efb0907":"ds.drop(['id'], axis=1, inplace=True)","cfc85edb":"ds.stroke[ds.gender == 'Other']","5f2d0e75":"ds.drop([3116], inplace=True)","f4f04ac5":"ds.columns","1dc9eac6":"columns_numeric = ['age', 'avg_glucose_level', 'bmi']\ncolumns_categorical = ['gender', 'hypertension', 'heart_disease', 'ever_married', \n                       'work_type', 'Residence_type', 'smoking_status']\ncolumns_dummis = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\ncolumns_target = ['stroke']","1d3e5c37":"def replace_nan(data, to_replace, replacement_data):\n    \n    data_def = data.copy(deep=True)\n    \n    index_zero = list(data_def[to_replace][data_def[replacement_data] == 0].index)\n    index_one = list(data_def[to_replace][data_def[replacement_data] == 1].index)\n    \n    for i in range(2):\n        minimum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.25)\n        maximum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.75)\n        \n        minimum -= (maximum - minimum) * 0.5\n        maximum += (maximum - minimum) * 0.5\n    \n        count = data_def[to_replace][data_def[replacement_data] == i].isnull().sum()\n        \n        data_for_nan = np.random.choice(range(int(minimum), int(maximum)), count)\n    \n        if i == 0:\n            index_null = data_def[to_replace][index_zero][data_def[to_replace].isnull()].index\n        else:\n            index_null = data_def[to_replace][index_one][data_def[to_replace].isnull()].index\n        \n        data_def[to_replace][index_null] = data_for_nan\n        \n    return data_def","2a4f9b54":"ds = replace_nan(ds, 'bmi', 'stroke')","308245d7":"ds.info()","f8a8edcc":"ds = pd.get_dummies(ds, columns=columns_dummis, prefix_sep='_', drop_first=True)","7ad95de1":"ds.head(3)","ced7a0d3":"from sklearn.model_selection import train_test_split","1947b8aa":"ds_train, ds_test = train_test_split(ds, test_size=0.3, random_state=42, stratify=ds.stroke)","0bf6cc0d":"ds_train.stroke.value_counts(normalize=True), ds_test.stroke.value_counts(normalize=True)","bdcd6557":"ds_train.shape[0] + ds_test.shape[0], ds.shape","df453857":"add_rows = int(ds_train.stroke.value_counts()[0] * .8 - ds_train.stroke.value_counts()[1])\nadd_rows","062f7684":"int(add_rows \/ ds_train.stroke.value_counts()[1]), ds_train.stroke.value_counts()","91a904ed":"index_train_one = ds_train.stroke[ds_train.stroke == 1].index\nds_train_one = ds_train.loc[index_train_one]","214d5154":"for i in range(14):\n    ds_train = ds_train.append(ds_train_one)\n    #y_train = pd.concat([y_train, y_train[y_train == 1]])","1ce7d96c":"ds_train.stroke.value_counts(normalize=True)","00d4dfff":"from sklearn.utils import shuffle","86aab2fc":"ds_train = shuffle(ds_train)","4f2511e2":"from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn.metrics import confusion_matrix","ff3915ff":"def print_metrics(actual, predict):\n    print('Accuracy: {:.3f}'.format(accuracy_score(actual, predict)))\n    print('Precision: {:.3f}'.format(precision_score(actual, predict)))\n    print('Recall: {:.3f}'.format(recall_score(actual, predict)))\n    print('F1 score: {:.3f}'.format(f1_score(actual, predict)))","6b141572":"def plot_roc_auc(actual, predict):\n    \n    fpr, tpr, threshold = roc_curve(actual, predict)\n    plt.plot(fpr, tpr, color='b')\n    #plt.plot()\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.plot([0.0, 1.0], [0.0, 1.0], color='r')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC AUC = {:.3f}'.format(roc_auc_score(actual, predict)))","067a9018":"from sklearn.tree import DecisionTreeClassifier","4b5c1979":"np.random.seed(33)","702a691e":"model_tree = DecisionTreeClassifier(random_state=33)","75e1a41f":"model_tree.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","54b73a63":"y_pred = model_tree.predict(ds_test.drop(['stroke'], axis=1))","85661744":"y_pred_proba = model_tree.predict_proba(ds_test.drop(['stroke'], axis=1))","1cd65746":"print_metrics(ds_test.stroke, y_pred)","a8c67af1":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred)","f2abd675":"sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='');","a4f326f4":"%%time\nbest_f1 = []\nbest_recall = []\nbest_roc_auc = []\nbest_precision = [] \nx = []\nx_keys = []\nn = 0\n\nfor cr in ['gini', 'entropy']:\n    for sp in ['best', 'random']:\n        for depth in [1, 2, 3, 4, 5, 6, 7, None]:\n            for leaf in [1, 2, 3, 4, 5]:\n                for feature in [1, 2, 3, 4, 'sqrt', 'log2']:\n                    model = DecisionTreeClassifier(criterion=cr, splitter=sp, max_depth=depth, \n                                                   min_samples_leaf=leaf, max_features=feature, \n                                                   random_state=33)\n                                \n                    model.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\n                    y_pred = model.predict(ds_test.drop(['stroke'], axis=1))\n                                \n                    f1 = f1_score(ds_test.stroke, y_pred)\n                    best_f1.append(f1)\n                                \n                    recall = recall_score(ds_test.stroke, y_pred)\n                    best_recall.append(recall)\n                                \n                    precision = precision_score(ds_test.stroke, y_pred)\n                    best_precision.append(precision)\n                                \n                    y_pred_prob = model.predict_proba(ds_test.drop(['stroke'], axis=1))\n                    roc_auc = roc_auc_score(ds_test.stroke, y_pred_prob[:, 1])\n                    best_roc_auc.append(roc_auc)\n                                \n                    x_keys.append(str(cr) +' '+ str(sp) +' '+ str(depth) +' '+ str(leaf) +' '+ \n                                  str(feature))\n                    x.append(n)\n                    n += 1","e87d9c63":"plt.figure(figsize=(15, 5))\nplt.plot(x, best_f1, c='r', label='f1')\nplt.plot(x, best_recall, c='b', label='recall')\nplt.plot(x, best_roc_auc, c='green', label='roc_auc')\nplt.plot(x, best_precision, c='yellow', label='precision')\nplt.legend()\nplt.show()","84d2d54c":"data_score = {'f1': best_f1, 'recall': best_recall, 'precision': best_precision, 'roc_auc': best_roc_auc}","403c4141":"ds_scores = pd.DataFrame(data_score, index=x_keys)","bc218706":"plt.figure(figsize=(4, 6))\nsns.heatmap(ds_scores.sort_values(by=['f1'], ascending=False)[:30], annot=True, fmt='.3f');","d4a56749":"model_tree = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=6, min_samples_leaf=1, \n                                   max_features=4, random_state=151)","0391debc":"model_tree.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","e09c7628":"y_pred_prob = model_tree.predict_proba(ds_test.drop(['stroke'], axis=1))","8f85092a":"print_metrics(ds_test.stroke, y_pred)","bb0a81f1":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred)","0a780437":"sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='');","1379c7e4":"model_tree = DecisionTreeClassifier(criterion='gini', splitter='best', max_depth=6, min_samples_leaf=1, \n                                   max_features=4, random_state=151)","8775e9e4":"model_tree.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","deec34f6":"y_pred_prob = model_tree.predict_proba(ds_test.drop(['stroke'], axis=1))","390dfd4a":"f1_sc = []\nthreshold = []\nrec_sc = []\nprec_sc = []\nx = []\n\nfor i in np.linspace(0.0, 1.0, 100):\n    recall_sc = recall_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    precision_sc = precision_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f_one = f1_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f1_sc.append(f_one)\n    threshold.append(i)\n    rec_sc.append(recall_sc)\n    prec_sc.append(precision_sc)\n    x.append(i)","a7510ef0":"plt.figure(figsize=(15, 8))\nplt.plot(np.linspace(0.0, 1.0, 100), rec_sc, color='b', label='recall')\nplt.plot(np.linspace(0.0, 1.0, 100), prec_sc, color='r', label='precision')\nplt.plot(np.linspace(0.0, 1.0, 100), f1_sc, color='green', label='f1')\nplt.legend(loc='upper right')\nplt.show()","1c16e99b":"ds_sc = pd.DataFrame({'threshold': threshold,'f1': f1_sc, 'recall': rec_sc, 'precision': prec_sc}, index=x)","ee2c9b1d":"plt.figure(figsize=(7, 30))\nsns.heatmap(ds_sc.sort_values(by='f1',ascending=False), annot=True, fmt='.6f')\nplt.title('Table scores');","9be48902":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred_prob[:, 1] > 0.65656565656565)","8094e88f":"sns.heatmap(conf_matrix, cmap='Blues', annot=True, fmt='');","9f5a0d78":"print_metrics(ds_test.stroke, y_pred_prob[:, 1] > 0.65656565656565)","99b282cc":"from sklearn.ensemble import BaggingClassifier","f00f35a5":"model_bagging = BaggingClassifier(model_tree, n_estimators=1000, max_samples=100, bootstrap=True,\n                                 random_state=160, n_jobs=-1)","b9e6a14c":"%%time\nmodel_bagging.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","6956eb1e":"y_pred = model_bagging.predict(ds_test.drop(['stroke'], axis=1))","1afedf4e":"y_pred_prob = model_bagging.predict_proba(ds_test.drop(['stroke'], axis=1))","c4198fdd":"print_metrics(ds_test.stroke, y_pred)","0ba0261c":"f1_sc = []\nthreshold = []\nrec_sc = []\nprec_sc = []\nx = []\n\nfor i in np.linspace(0.0, 1.0, 100):\n    recall_sc = recall_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    precision_sc = precision_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f_one = f1_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f1_sc.append(f_one)\n    threshold.append(i)\n    rec_sc.append(recall_sc)\n    prec_sc.append(precision_sc)\n    x.append(i)","b3115a2c":"plt.figure(figsize=(15, 8))\nplt.plot(np.linspace(0.0, 1.0, 100), rec_sc, color='b', label='recall')\nplt.plot(np.linspace(0.0, 1.0, 100), prec_sc, color='r', label='precision')\nplt.plot(np.linspace(0.0, 1.0, 100), f1_sc, color='green', label='f1')\nplt.legend(loc='upper right')\nplt.show()","a45521aa":"ds_sc = pd.DataFrame({'threshold': threshold,'f1': f1_sc, 'recall': rec_sc, 'precision': prec_sc}, index=x)","8eed22d1":"plt.figure(figsize=(7, 30))\nsns.heatmap(ds_sc.sort_values(by='f1',ascending=False), annot=True, fmt='.6f')\nplt.title('Table scores');","6bf2a49e":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred_prob[:, 1] > 0.59595959595959)","8957515a":"sns.heatmap(conf_matrix, cmap='Blues', annot=True, fmt='');","677fbf70":"print_metrics(ds_test.stroke, y_pred_prob[:, 1] > 0.5959595959595959)","f1a8c5ab":"### -------------- Tree ----------------------","8a2f6dd8":"### --------------- metrics ------------------------","262e7ee7":"### ---------- selection of parameters ----------------","529c2d29":"### ------------- selection of threshold -----------------","d62c1ce9":"### --------------- Bagging ------------------"}}