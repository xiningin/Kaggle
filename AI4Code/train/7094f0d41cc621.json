{"cell_type":{"58dfdbe1":"code","24135f07":"code","cd2e40bf":"code","cad28949":"code","76a88670":"code","1bd76aa4":"code","1ad4c52b":"code","2016912a":"code","34842e22":"code","4f4318e7":"code","b25a0b32":"code","47a2fb8a":"code","e7a26df9":"code","e790a090":"code","8758d2ed":"markdown","4360b405":"markdown","0088c94a":"markdown"},"source":{"58dfdbe1":"import os\nprint(os.listdir(\"..\/input\/chest-xray-pneumonia\/chest_xray\"))","24135f07":"# Import Libraries\nfrom __future__ import division\n\nimport numpy as np\nimport pandas as pd\nimport random\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential, Model, load_model\nfrom tensorflow.keras.layers import Input, Dense, Dropout, Flatten, Conv2D, MaxPooling2D","cd2e40bf":"# Load Dataset\nnum_classes = 2 # NORMAL, PNEUMONIA\ntarget_size = (224,224)\nchest_xray_dir = \"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/\"\ntrain_dir = chest_xray_dir + \"\/train\"\nval_dir   = chest_xray_dir + \"\/val\" ","cad28949":"def plot_imgs(item_dir, top=10):\n    all_item_dirs = os.listdir(item_dir)\n    item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:10]\n  \n    plt.figure(figsize=(10, 10))\n  \n    for idx, img_path in enumerate(item_files):\n        plt.subplot(5, 5, idx+1)\n    \n        img = plt.imread(img_path)\n        plt.tight_layout()         \n        plt.imshow(img, cmap='gray')  ","76a88670":" plot_imgs(train_dir+'\/NORMAL')","1bd76aa4":" plot_imgs(train_dir+'\/PNEUMONIA')","1ad4c52b":"# Data Generator\nrescale = 1.\/255\ntrain_datagen = ImageDataGenerator(\n    rescale=rescale,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    class_mode='categorical',\n    batch_size=32,\n    color_mode=\"grayscale\",\t\n    shuffle=True)\n\nvalidation_datagen = ImageDataGenerator(rescale=rescale)\n\nvalidation_generator = validation_datagen.flow_from_directory(\n    val_dir,\n    target_size=target_size,\n    class_mode='categorical',\n    batch_size=8,\n    color_mode=\"grayscale\",\n    shuffle = False)","2016912a":"# Build Model\nmodel = Sequential()\n\n# 1st Conv layer\nmodel.add(Conv2D(16, kernel_size=(3, 3), activation='relu', input_shape=(224, 224, 1), padding='same'))\nmodel.add(Conv2D(16, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n# 2nd Conv layer\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n# 3rd Conv layer\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n# 4th Conv layer\nmodel.add(Conv2D(96, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(96, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n# 5th Conv layer\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n# Fully-Connected layer\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.summary()","34842e22":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","4f4318e7":"# Train Model\nnum_epochs = 11\nhistory = model.fit_generator(generator=train_generator, \n                    steps_per_epoch=train_generator.n \/\/ train_generator.batch_size, \n                    epochs=num_epochs, \n                    validation_data=validation_generator, \n                    validation_steps=validation_generator.n \/\/ validation_generator.batch_size)","b25a0b32":"# Test Data Generator\nrescale = 1.\/255\ntest_dir   = chest_xray_dir + \"\/test\" \ntest_datagen = ImageDataGenerator(\n    rescale=rescale,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    class_mode='categorical',\n    batch_size=32,\n    color_mode=\"grayscale\",\t\n    shuffle=True)","47a2fb8a":"# Evaluate Model\nresult = model.evaluate_generator(test_generator, steps=len(test_generator))\nprint(\"%s%.2f  \" % (\"Loss     : \", result[0]))\nprint(\"%s%.2f%s\" % (\"Accuracy : \", result[1]*100, \"%\"))","e7a26df9":"# Plot learning curves and compute accuracy on the test set\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\ntest_accuracy = result[1]\nplt.plot(range(len(accuracy)), accuracy, color='blue', label='Training accuracy')\nplt.plot(range(len(accuracy)), val_accuracy, color='red', label='Validation accuracy')\nplt.title('Learning curves - Test set accuracy = ' + str(round(test_accuracy, 3)))\nplt.xlabel('Epoch No.')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","e790a090":"# Predict\ny_pred = model.predict_generator(test_generator, steps=len(test_generator), verbose=1)  \ny_pred = y_pred.argmax(axis=-1)\ny_true=test_generator.classes\n\nnumofbatch = len(test_generator)\nbatch_no = random.randint(0, numofbatch-1)\n\ny_img_batch, y_true_batch = test_generator[batch_no] \ny_true_batch = y_true_batch.argmax(axis=-1)\n\ny_pred_batch = model.predict(y_img_batch)\ny_pred_batch = y_pred_batch.argmax(axis=-1)\nsizeofbatch = len(y_true_batch)\n\nprint(\"-\"*35)\nprint(\"%s%d\"%     (\"Selected Batch No       : \", batch_no))\nprint(\"-\"*35)\nprint(\"%s%d\"%     (\"Batch Size              : \", len(y_pred_batch)))\nprint(\"-\"*35)\nprint(\"%s%.2f%s\"% (\"Accuracy                : \", np.mean(y_true==y_pred)*100, \"%\"))\nprint(\"-\"*35)","8758d2ed":"# Pneumonia Detection\nChest X-ray images (anterior-posterior) were selected from retrospective cohorts of pediatric patients of one to five years old from Guangzhou Women and Children\u2019s Medical Center, Guangzhou. All chest X-ray imaging was performed as part of patients\u2019 routine clinical care.\n\n![](https:\/\/i.imgur.com\/jZqpV51.png)","4360b405":"Test Accuracy increased\n![image.png](attachment:image.png)","0088c94a":"## num_epochs = 100\nTrain Accuracy \n![image.png](attachment:image.png)"}}