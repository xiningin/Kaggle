{"cell_type":{"bad99b33":"code","21702962":"code","b52f258e":"code","e4774756":"code","6ff63b9c":"code","d93662a2":"code","f509800d":"code","5009728d":"code","c61818a8":"code","ac4fc1d2":"code","9c66ebf1":"code","632b0a9d":"code","1b8fa832":"code","4cfffc1a":"code","3cfbf152":"code","bbd37a4a":"code","7dc80197":"code","9e16efa9":"code","66cd5518":"code","74d2f05c":"code","befd3f8a":"code","68e4a7bf":"code","c461ea29":"code","de271149":"code","921f0571":"code","e7fe0073":"code","cc61a0a1":"code","39ba5557":"code","c9c2aeda":"code","3cc9ac97":"code","665b6fd0":"markdown","49ccc32d":"markdown","0e6332c9":"markdown","7d5ae4e7":"markdown","0e7cb026":"markdown","ac6d9f06":"markdown","4750a576":"markdown","1d7bbf35":"markdown"},"source":{"bad99b33":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nfrom termcolor import colored \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","21702962":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()\n","b52f258e":"print(colored(\"There are {} rows and {} Colimns in dataset\".format(df.shape[0], df.shape[1]), attrs=['bold']))","e4774756":"plt.figure(figsize=(10,5))\nsns.heatmap(df.isnull())\nplt.show()\n\nfor i in df.columns:\n    null_rate = df[i].isna().sum()\/len(df) * 100\n    \n    if null_rate > 0:\n        print(\"{}'s null rate: {}%\".format(i, round(null_rate, 2)))\n","6ff63b9c":"df.drop(['director'], axis=1, inplace=True)\ndf.head()","d93662a2":"df['country'].replace(np.nan, 'United States', inplace = True)\ndf['cast'].replace(np.nan, 'No Data', inplace = True)\n\nprint(colored(\"I will drop the missing rows from the columns 'date_added' and 'rating' since these have only {} missing rows in total.\" .format(df.isnull().sum().sum()), attrs=['bold'] ))","f509800d":"df.dropna(inplace = True)\nprint(colored(\"There are {} and {} columns.\".format(df.shape[0], df.shape[1]), attrs=['bold']))","5009728d":"df.info()","c61818a8":"df[\"date_added\"] = pd.to_datetime(df['date_added'])\n\ndf['moth_added'] = df['date_added'].dt.month\ndf['month_name_added'] = df['date_added'].dt.month_name()\ndf['year_added'] = df['date_added'].dt.year\n\ndf.drop('date_added', axis=1, inplace=True)\ndf.head()","ac4fc1d2":"plt.figure(figsize=(10,5))\nplt.pie(df['type'].value_counts().sort_values(), labels=df['type'].value_counts().index, explode=[0.05, 0], autopct='%1.2f%%',colors=['Green','grey'])\nplt.show()","9c66ebf1":"from collections import Counter\ncountry_data = df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(',', ',').replace(',',',').split(',')))).sort_values(ascending=False)","632b0a9d":"top20country = country_count.head(20)","1b8fa832":"from matplotlib import gridspec\n\nfig = plt.figure(figsize=(20, 7))\n\ngs = gridspec.GridSpec(nrows=1, ncols=2, height_ratios=[6], width_ratios=[10, 5])\n\nax = plt.subplot(gs[0])\nsns.barplot(top20country.index, top20country, ax=ax, palette=\"RdGy\")\nax.set_xticklabels(top20country.index, rotation='90')\nax.set_title('Top 20 countries with most contents', fontsize=15, fontweight='bold')\n\nax2 = plt.subplot(gs[1])\nax2.pie(top20country, labels=top20country.index, shadow=True, startangle=0, colors=sns.color_palette(\"RdGy\",n_colors=20), autopct='%1.2f%%')\nax2.axis('equal')\nplt.show()","4cfffc1a":"df_tv = df[df[\"type\"] == \"Tv Show\"]\ndf_movies = df[df[\"type\"] == \"Movie\"]","3cfbf152":"df_content = df['year_added'].value_counts().reset_index().rename(columns = \n   {\n       'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added') \n\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\ndf_tv1 = df_tv['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_tv1['percent'] = df_tv1['count'].apply(lambda x : 100*x\/sum(df_tv1['count']))\n\ndf_movies1 = df_movies['year_added'].value_counts().reset_index().rename(columns = \n\n{\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\n\ndf_movies1['percent'] = df_movies1['count'].apply(lambda x : 100*x\/sum(df_movies1['count']))\n\n\nt1 = go.Scatter(x=df_movies1['year_added'], y=df_movies1[\"count\"], name=\"Movies\", marker=dict(color=\"#a678de\"))\nt2 = go.Scatter(x=df_tv1['year_added'], y=df_tv1[\"count\"], name=\"Tv Shows\", marker=dict(color=\"#6ad49b\"))\nt3 = go.Scatter(x=df_content['year_added'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"brown\"))\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title = \"Content Added Over the Years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()\n ","bbd37a4a":"df_content = df[['moth_added','month_name_added']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('moth_added').drop('moth_added',axis=1)\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv2 = df_tv[['moth_added','month_name_added']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('moth_added').drop('moth_added',axis=1)\ndf_tv2['percent'] = df_tv2['count'].apply(lambda x : 100*x\/sum(df_tv2['count']))\n\n\ndf_movies2 = df_movies[['moth_added','month_name_added']].value_counts().reset_index().rename(columns = {\n    0 : 'count'}).sort_values('moth_added').drop('moth_added',axis=1)\ndf_movies2['percent'] = df_movies2['count'].apply(lambda x : 100*x\/sum(df_movies2['count']))\n\nt1 = go.Scatter(x=df_movies2['month_name_added'], y=df_movies2[\"count\"], name=\"Movies\", marker=dict(color=\"#a678de\"))\nt2 = go.Scatter(x=df_tv2['month_name_added'], y=df_tv2[\"count\"], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\nt3 = go.Scatter(x=df_content['month_name_added'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"Brown\"))\n\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()\n\n","7dc80197":"from sklearn.preprocessing import MultiLabelBinarizer\n\ndef relation_heatmap(df, title):\n    df['genre'] = df['listed_in'].apply(lambda x : x.replace(',',',').replace(',',',').split(','))\n    Types = []\n    for i in df['genre']: Types += i\n    Types=set(Types)\n    print(\"There are {} types in the Netflix {} Dataset\".format(len(Types), title))\n    test = df['genre']\n    mlb = MultiLabelBinarizer()\n    res = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)\n    corr = res.corr()\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(10, 7))\n    pl = sns.heatmap(corr, mask=mask, cmap=\"coolwarm\", vmax=.5, vmin=-.5, center=0, square=True, linewidths=.7,cbar_kws={\"shrink\":0.6})\n    plt.show()\n        ","9e16efa9":"relation_heatmap(df_movies, 'Movie')","66cd5518":"relation_heatmap(df_tv, 'Tv Show')","74d2f05c":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  ['G', 'TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']","befd3f8a":"movie_rating = df_movies['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv].fillna(0)","68e4a7bf":"def rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()","c461ea29":"rating_barplot(movie_rating,'Movie', 1200)","de271149":"rating_barplot(tv_rating,'TV Show' , 700, 800)","921f0571":"from scipy.stats import norm\n\nplt.figure(figsize=(15, 7))\nsns.distplot(df_movies['duration'].str.extract('(\\d+)'), fit=norm, kde=False, color=['red'])\nplt.title('Distplot with normal distribution of movies', fontweight=\"bold\")\nplt.show()","e7fe0073":"plt.figure(figsize=(15, 7))\nax = sns.barplot(df_tv['duration'], order = df_tv['duration'].value_counts().index, palette=\"RdGy\")\nplt.title('Countplot for season in TV Shows', fontweight=\"bold\")\nplt.xticks(rotation=90)\n\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, (p.get_height() * 1.005)))\n    \n\nplt.figure(figsize=(15, 7))\nax = sns.barplot(x=((df_tv['duration'].value_counts()\/df_tv.shape[0])*100).index,\n                 y=round(((df_tv['duration'].value_counts()\/df_tv.shape[0])*100),2).values,\n                 palette=\"RdGy\")\nplt.title('Rectangle of Seasons in TV show', fontweight=\"bold\")\nplt.xticks(rotation=90)\nfor p in ax.patches:\n     ax.annotate(str(p.get_height()), (p.get_x() * 1.005, (p.get_height() * 1.005)))\n        \nplt.show()        ","cc61a0a1":"plt.figure(figsize=(15,5))\nsns.barplot(x = df_movies[\"listed_in\"].value_counts().head(10).index,\n            y = df_movies[\"listed_in\"].value_counts().head(10).values,palette=\"RdGy\")\nplt.xticks(rotation=80)\nplt.title(\"Top10 Genre in Movies\",fontweight=\"bold\")\nplt.show()","39ba5557":"plt.figure(figsize=(15,5))\nsns.barplot(x = df_tv[\"listed_in\"].value_counts().head(10).index,\n            y = df_tv[\"listed_in\"].value_counts().head(10).values,palette=\"RdGy\")\nplt.xticks(rotation=80)\nplt.title(\"Top10 Genre in TV Shows\",fontweight=\"bold\")\nplt.show()","c9c2aeda":"df['cast_name'] = df['cast'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \ncast_count = []\nfor i in df['cast_name']: cast_count += i\n    \ncast_dict = dict((i, cast_count.count(i)) for i in cast_count)\n\ndf_cast_count = pd.DataFrame(cast_dict.values(),cast_dict.keys()).reset_index().sort_values(0,ascending=False).rename(\n    columns = {'index' : 'cast_name', 0 : 'count'}).iloc[1:21]","3cc9ac97":"plt.figure(figsize=(15,5))\nsns.barplot(x='cast_name',y='count',data=df_cast_count,palette=\"RdGy\")\nplt.title(\"Top20 Artist on Netflix\",fontweight=\"bold\")\nplt.xticks(rotation=90)\nplt.show()","665b6fd0":"# Checking the data thoroughly","49ccc32d":"# Importing All the necessary Libraries","0e6332c9":"# Movie Duration","7d5ae4e7":"# Loading the DataSet","0e7cb026":"# Contents Over The Month","ac6d9f06":"# A look to different Genres in dataset","4750a576":"# date_added is of type object, Converting it into of type datetime format.","1d7bbf35":"# Looking at the CONTENT TYPE"}}