{"cell_type":{"bd63695d":"code","57ad58db":"code","fbab7c8d":"code","f018069c":"code","194ee9f9":"code","5b80c3aa":"code","015883ef":"code","9f89f1fa":"code","c151b7e5":"code","55de936a":"code","73f1eb9f":"code","56a7fe32":"code","53424687":"code","1dba9faa":"code","69fcd029":"code","0cd583ba":"code","e70b0b99":"markdown","7eef88b4":"markdown","99fc7870":"markdown","d9a73fd2":"markdown","4b9bee1f":"markdown","e329ea76":"markdown","ba94c5a4":"markdown","424dbc4b":"markdown","9b0fdcbf":"markdown","4ab1985d":"markdown","9caa0622":"markdown","232dd1a9":"markdown","7a162eb8":"markdown","6482e6d7":"markdown","f96c6fb7":"markdown"},"source":{"bd63695d":"pip install dataprep","57ad58db":"import numpy as np   \nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nfrom dataprep.eda import plot\nimport seaborn as sns \nsns.set()","fbab7c8d":"# saving raw data to a variable named data\ndata = pd.read_csv(\"\/kaggle\/input\/chronic-kidney-disease\/new_model.csv\")\ndata.head() ","f018069c":"# Data summary and Stats\nplot(data)","194ee9f9":"data.shape","5b80c3aa":"data.dtypes","015883ef":"# Coounting and dropping features with 0 variance\nf_values={}\nfor i in data.columns:\n    count=data[i].nunique()\n    if count==1:\n        f_values[i]=count\n# columns having same 1 unique value        \ncols_drop= list(f_values.keys())\nprint('Columns to drop are:',cols_drop)","9f89f1fa":"# Pairplot figure to show correlation betweean features\nsns.set(style='ticks', color_codes=True)\nfigs = sns.pairplot(data, palette = ('g', 'r'), hue='Class', height=1.5)\nplt.show()","c151b7e5":"# Using Heatmap to show correlation between features\nfeatures = data.drop(data.columns[-1],axis=1) # drop 'Class' column- not a feature \nfig = plt.figure(figsize=(10, 10))\ncorr_plot = sns.heatmap(features.corr(),annot = True, cmap = 'rainbow' )\nplt.title(\"Data Correlation plot\")\nplt.show()","55de936a":"# assigning varibles \nX = np.asarray(features)\ny = data['Class']","73f1eb9f":"#Splitting dataset into two pieces for training and testing \nfrom sklearn.model_selection import train_test_split\nX_train,X_test, y_train, y_test = train_test_split(X, y,test_size=0.20,shuffle=True,random_state=42)","56a7fe32":"# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_scaled = sc.fit_transform(X_train)\nX_test_scaled = sc.fit_transform(X_test)","53424687":"# importing LogisticRegression from Sklearn\nfrom sklearn.linear_model import LogisticRegression\nregmodel = LogisticRegression()\nregmodel.fit(X_train_scaled, y_train)\ny_pred = regmodel.predict(X_test_scaled)\ny_actual = y_test # actual y values in original df","1dba9faa":"\n# Measuring accuracy\nfrom sklearn.metrics import accuracy_score\nprint(\"Model's testing accuracy is :\", accuracy_score(y_actual, y_pred))\n\n# Creating a confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_actual, y_pred)\n\nprint('Final Test confusion_matrix')\nsns.heatmap(cm, annot=True, cmap='Greens')\nplt.xlabel('Predicted', fontsize=15)\nplt.ylabel('Actual', fontsize=15)","69fcd029":"# assigning values to True Positives, False Negative etc\nTP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\n# sensitivity score = TP\/(TP+FN)\nsensitivity = TP\/(TP+FN)\nprint(sensitivity)","0cd583ba":"from sklearn.metrics import balanced_accuracy_score\nbalanced_accuracy_score(y_actual, y_pred)","e70b0b99":"Machine learning is continously revolutionalizing our ability to solve problems. Currenty, in the clinic it has found its place\nmainly in aiding diagnosis of medical conditions. Due to the critical nature of medicine, it is important to build high sensitivity models that can accurately predict medical conditions.\nHere, I will be using a Chronic Kidney Disease dataset to build a classification model that can correctly classify either having or not having chronic kidney disease. ","7eef88b4":"Another method is to use the balanced accuracy score which includes both the sensitivity score & specificity score.","99fc7870":"The model has a testing accuracy of 97.5%. However, we still need a sensitivity measure to see the effectiveness of the model at predicting Chronic Kidney disease ==1.\n","d9a73fd2":"## Discussion ","4b9bee1f":"From the plots, we do not have much high correlation between features. I will use the independet variable, X to represent all features from our dataset","e329ea76":"## Feature Selection ","ba94c5a4":"## Building a Logistic Regression Model ","424dbc4b":"## Introduction ","9b0fdcbf":"## Importing relevant Libraries","4ab1985d":"Checking data dimension, stats, dtype, null values and features with 0 varience","9caa0622":"The model has a sensitivty score of 96%. Thus, suggesting a 96% ability to pick up actual Chronic Kidney Disease cases(1)","232dd1a9":" ## Data Cleaning and Preprocessing","7a162eb8":"Plotting correlation between feautures\n\nMethod 1: Pairplot\n\nmethod 2: heatmap ","6482e6d7":"## Loading Raw Data","f96c6fb7":"Our data reports 14 features (including 'Class') and 400 roles, no null values, no columns with 0 variance, 13 float dtypes and 'Class', a categorical dtype where 1 is mapped to Chronic Kidney Disease, 0 to not having Chronic Kidney Disease. "}}