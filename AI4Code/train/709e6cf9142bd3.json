{"cell_type":{"b4821c16":"code","9cd9ab6c":"code","7b6e14b9":"code","11d2c127":"code","81bc48ee":"code","c29df7e1":"code","95243803":"code","1443c8d0":"code","d9a09971":"code","bf1314d1":"code","bf36fb11":"code","606ef01a":"code","a0383b46":"code","99015f1f":"code","47c9d4e1":"code","94f3b6d8":"code","79cd81fa":"code","4a430de2":"code","70974224":"code","364ff4f3":"code","726499df":"code","0a9985a8":"code","d731d618":"code","258ccda4":"code","2655a8c5":"code","2c3abfbb":"code","8e38c9d3":"code","12302cda":"code","30e6d226":"code","1bfe0fc1":"code","cfb7fea3":"code","8a440117":"code","285403ec":"code","33acc9bb":"code","f2de9113":"code","269d3204":"code","22029b7c":"code","4d6b5506":"code","b6998679":"code","c4f41cc3":"code","a7e4f11c":"code","3cd4373e":"code","c74dc8aa":"code","7873580c":"code","9dbfa112":"code","3fbe1a8c":"code","c8f1cc5f":"markdown","f06d7c1f":"markdown","b54bdfdb":"markdown","ca6a05de":"markdown"},"source":{"b4821c16":"import sys\n!{sys.executable} -m pip install sklearn","9cd9ab6c":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import sklearn.preprocessing as sk\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm","7b6e14b9":"missing_values = [\"?\"]\ndf = pd.read_csv(\"..\/input\/dataset.csv\", na_values = missing_values)\ndata_orig = df\ndf","11d2c127":"df=df.drop(['id','Class'],axis=1)\n","81bc48ee":"print (df.isnull().sum())","c29df7e1":"df.info()","95243803":"col_num = [\n \"InstallmentRate\",\n \"Tenancy Period\",\n \"Age\",\n \"#Credits\",\n \"#Authorities\",\n \"Expatriate\",\n]\n\ncol_str = [\n \"Account1\",\n\t\t\"History\",\n\t\"Motive\",\n\t\t\"Account2\",\n\t\"Employment Period\",\n\t\t\"Gender&Type\",\n\t\"Sponsors\",\n\t\t\"Plotsize\",\n\t\t\"Plan\",\n\t\"Housing\",\n\t\t\"Post\",\n\t\t\"Phone\",\n\t\"Expatriate\"\n]\n\ncol_mean = [\"InstallmentCredit\",\n \"Yearly Period\",\"Monthly Period\",\n \"Credit1\"]","1443c8d0":"#","d9a09971":"\n#","bf1314d1":"df.dropna(subset=col_num, inplace=True)\ndf.dropna(subset=col_str, inplace=True)\ndf.dropna(subset=col_mean, inplace=True)\nprint (df.isnull().sum())\n#Mukul ad wala tareeka lagao manual ","bf36fb11":"df.info()","606ef01a":"import seaborn as sns\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax, annot = True);","a0383b46":"import seaborn as sns\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = data_orig[0:175].corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax, annot = True);","99015f1f":"df = df.astype({\"Age\": int, \"InstallmentCredit\": int,\"Yearly Period\": int})","47c9d4e1":"df = df.astype({\"Monthly Period\": int, \"Credit1\": int,\"InstallmentRate\": int,\"Tenancy Period\": int})\n","94f3b6d8":"df=df.drop(['Monthly Period','Credit1'],axis=1)\ndf.info()","79cd81fa":"def P_method(v):\n    if v==\"yes\":\n        return 1\n    else:\n        return 0\n    \ndf[\"Phone\"] = df[\"Phone\"].apply(P_method)\ndf[\"Phone\"].value_counts()","4a430de2":"def E_method(v):\n    if v:\n        return 1\n    else:\n        return 0\n    \ndf[\"Expatriate\"] = df[\"Expatriate\"].apply(E_method)\ndf[\"Expatriate\"].value_counts()","70974224":"def plot_sz(v):\n    return v.upper()\ndf[\"Plotsize\"] = df[\"Plotsize\"].apply(plot_sz)\ndf","364ff4f3":"col_str = [\n \"Account1\",\n\t\t\"History\",\n\t\"Motive\",\n\t\t\"Account2\",\n\t\"Employment Period\",\n\t\t\"Gender&Type\",\n\t\"Sponsors\",\n\t\t\"Plotsize\",\n\t\t\"Plan\",\n\t\"Housing\",\n\t\t\"Post\"\n]","726499df":"import seaborn as sns\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax, annot = True);","0a9985a8":"trainData = df\ndf2 = pd.get_dummies(df, columns=col_str)\n#df2=df2.drop(['Expatriate'],axis=1)\ndf2","d731d618":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\nnp_scaled = min_max_scaler.fit_transform(df2)\ndf2_np = pd.DataFrame(np_scaled)\ndf2_np","258ccda4":"from scipy import stats\nzsc = df2.apply(stats.zscore)","2655a8c5":"zsc.head()","2c3abfbb":"pca2 = PCA(n_components=2)\npca2.fit(df2_np)\nT2 = pca2.transform(df2_np)\nT3 = pd.DataFrame(T2)\nT3.columns=[\"PCA1\", \"PCA2\"]\nT3.plot.scatter(x=\"PCA1\", y=\"PCA2\", marker=\"o\", alpha=0.7)","8e38c9d3":"pca3 = PCA(n_components=2)\npca3.fit(zsc)\nT4 = pca2.transform(zsc)\nT5 = pd.DataFrame(T2)\nT5.columns=[\"PCA1\", \"PCA2\"]\nT5.plot.scatter(x=\"PCA1\", y=\"PCA2\", marker=\"o\", alpha=0.7)","12302cda":"from sklearn.cluster import KMeans\nwcss = []\nfor i in range(2, 6):\n    kmean = KMeans(n_clusters = i, random_state = 42)\n    kmean.fit(df2_np)\n    wcss.append(kmean.inertia_)\n    \nplt.figure(figsize=(16,10))\nplt.plot(range(2,6),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","30e6d226":"plt.figure(figsize=(16, 8))\npreds2 = []\nfor i in range(2, 10):\n    kmean = KMeans(n_clusters = i, random_state = 42)\n    kmean.fit(df2_np)\n    pred = kmean.fit_predict(df2_np)\n    preds2.append(pred)\n    \n    plt.subplot(2, 4, i - 1)\n    plt.title(str(i)+\" clusters\")\n    plt.scatter(T2[:, 0], T2[:, 1], c=pred)\n    \n    centroids = kmean.cluster_centers_\n    centroids = pca2.transform(centroids)\n    plt.plot(centroids[:, 0], centroids[:, 1], 'b+', markersize=30, color = 'brown', markeredgewidth = 3)","1bfe0fc1":"plt.figure(figsize=(16, 8))\npreds2 = []\nfor i in range(2, 10):\n    kmean = KMeans(n_clusters = i, random_state = 42)\n    kmean.fit(zsc)\n    pred3 = kmean.fit_predict(zsc)\n    preds2.append(pred3)\n    \n    plt.subplot(2, 4, i - 1)\n    plt.title(str(i)+\" clusters\")\n    plt.scatter(T4[:, 0], T4[:, 1], c=pred3)\n    \n    centroids1 = kmean.cluster_centers_\n    centroids1 = pca2.transform(centroids1)\n    plt.plot(centroids1[:, 0], centroids1[:, 1], 'b+', markersize=30, color = 'brown', markeredgewidth = 3)","cfb7fea3":"colors = ['red','green','blue','yellow','purple','pink','palegreen','violet','cyan']","8a440117":"plt.figure(figsize=(16, 8))\n\nkmean = KMeans(n_clusters = 3, random_state = 42, init='k-means++')\nkmean.fit(df2_np)\npred = kmean.fit_predict(df2_np)\npred_pd = pd.DataFrame(pred)\narr = pred_pd[0].unique()\n\nfor i in arr:\n    meanx = 0\n    meany = 0\n    count = 0\n    for j in range(len(pred)):\n        if i == pred[j]:\n            count+=1\n            meanx+=T2[j,0]\n            meany+=T2[j,1]\n            plt.scatter(T2[j, 0], T2[j, 1], c=colors[i])\n    meanx = meanx\/count\n    meany = meany\/count\n    plt.annotate(i,(meanx, meany),size=30, weight='bold', color='black', backgroundcolor=colors[i])","285403ec":"res = []\nfor i in range(len(pred)):\n    if pred[i] == 0:\n        res.append(2)#0\n    elif pred[i] == 1:\n        res.append(0)#2\n    elif pred[i] == 2:\n        res.append(1)#1\n    \nres","33acc9bb":"temp_df=df2.copy()\ntemp_df['Class']=res\ntemp_df.head()\ntemp2_df=data_orig.copy()\ntemp2_df=temp2_df.fillna(0)\ntemp2_df['Class']=temp_df['Class']\ntemp2_df=temp2_df.fillna(0)\ntemp2_df['Class']=temp2_df['Class'].astype(int)\ntemp2_df.head()\ntemp3=temp2_df[['id','Class']]\ntemp3","f2de9113":"from sklearn.neighbors import NearestNeighbors\nns = 62                                                  \nnbrs = NearestNeighbors(n_neighbors = ns).fit(df2_np)\ndistances, indices = nbrs.kneighbors(df2_np)\n\nkdist = []\n\nfor i in distances:\n    avg = 0.0\n    for j in i:\n        avg += j\n    avg = avg\/(ns-1)\n    kdist.append(avg)\n\nkdist = sorted(kdist)\nplt.plot(indices[:,0], kdist)","269d3204":"from sklearn.cluster import DBSCAN\ndbscan = DBSCAN(eps=2, min_samples=10)\npre = dbscan.fit_predict(df2_np)\nplt.scatter(T2[:, 0], T2[:, 1], c=pre)","22029b7c":"labels1 = dbscan.labels_\n#labels1 = labels1[labels1 >= 0]                            #Remove Noise Points\nlabels1, counts1 = np.unique(labels1, return_counts=True)\nprint(len(labels1))\nprint(labels1)\nprint(len(counts1))\nprint(counts1)","4d6b5506":"from sklearn.cluster import AgglomerativeClustering as AC\naggclus = AC(n_clusters = 3,affinity='euclidean',linkage='ward',compute_full_tree='auto')\ny_aggclus= aggclus.fit_predict(df2_np)\nplt.scatter(T2[:, 0], T2[:, 1], c=y_aggclus)","b6998679":"from scipy.cluster.hierarchy import dendrogram, linkage, cut_tree\nfrom scipy.cluster.hierarchy import fcluster\nlinkage_matrix1 = linkage(df2_np, \"ward\",metric=\"euclidean\")\nddata1 = dendrogram(linkage_matrix1,color_threshold=10)","c4f41cc3":"y_ac=cut_tree(linkage_matrix1, n_clusters = 3).T","a7e4f11c":"plt.scatter(T2[:,0], T2[:,1], c=y_ac[0,:], s=100, label='')\nplt.show()","3cd4373e":"a=0\nfor x in range(0,174):\n    if data_orig['Class'][x]== temp3['Class'][x]:\n        a+=1\n    \na","c74dc8aa":"a*100\/175","7873580c":"sub1 = temp3[175:]\nsub1,len(sub1)","9dbfa112":"sub1.to_csv('sub14.csv',index=False)","3fbe1a8c":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(sub1)","c8f1cc5f":"# Storing to .csv","f06d7c1f":"# DBSCAN\n","b54bdfdb":"# Heirarchial Clustering","ca6a05de":"# Assignment 1"}}