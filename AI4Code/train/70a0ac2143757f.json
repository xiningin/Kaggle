{"cell_type":{"bfa08738":"code","edc5d841":"code","f41b0edf":"code","51b5a29d":"code","3a4a6a51":"code","a8cd3e6c":"code","fed31f32":"code","5c2e3d16":"code","a1c01d3e":"code","37224299":"code","a8694172":"code","b903366d":"code","20867862":"code","944c2e18":"code","8ca3db10":"code","f92825eb":"code","3ca77713":"code","3d40f0fb":"code","2e266151":"code","11141f0c":"code","6d050377":"code","cc2b45e5":"code","73e9f6ac":"code","f7d4d1da":"code","3620f7ef":"code","6e5d00f6":"code","582cdd2a":"code","d10b1eaa":"code","a209f086":"code","6a7af2bd":"code","707b372d":"code","cd60bcac":"code","1cc94b7b":"code","1d68cef1":"code","3b85d2fc":"code","ccc247c8":"code","ffe256c6":"code","5f3d3d3a":"code","451f5639":"code","a2b74689":"code","2e4f9380":"code","44d7cc12":"code","1cb33925":"code","0523b1dd":"code","a994e35f":"code","890b6f22":"code","bd4f4e9a":"code","043972af":"code","7151429b":"code","29765d6c":"code","2021a083":"code","86992d3d":"code","8882bb6a":"code","4937c7c7":"code","f4c92455":"code","30f19972":"code","c8cb35a7":"code","2e9b37c3":"code","16e40d17":"markdown","80b98047":"markdown","ee6283f1":"markdown","9a8ae329":"markdown","0e6f5094":"markdown","8003adf7":"markdown","e030f766":"markdown","75c7c90f":"markdown","e3a79fd9":"markdown","35969ee7":"markdown","e7a70ef6":"markdown","b13d93d2":"markdown","3bc5252d":"markdown","91a568df":"markdown","661f9c65":"markdown","cc8d8b38":"markdown","96e03edd":"markdown","f90a5da9":"markdown","8746cbdd":"markdown","605fb43c":"markdown","8010d2a5":"markdown","2dd16f35":"markdown","eca195ac":"markdown","692ed494":"markdown","2656ee33":"markdown"},"source":{"bfa08738":"import numpy as np\nimport pandas as pd\nimport math\n\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error as mse\nfrom sklearn.manifold import TSNE\n\nimport lightgbm as lgb\n\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.express as px\n\nfrom iso3166 import countries\nimport matplotlib.pyplot as plt","edc5d841":"SCATTER_SIZE = 800","f41b0edf":"df = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndf.head()","51b5a29d":"missed = pd.DataFrame()\nmissed['column'] = df.columns\n\nmissed['percent'] = [\n    round(100* df[col].isnull().sum() \/ len(df), 2) for col in df.columns\n]\nmissed = missed[missed['percent']>0].sort_values('percent')\n\nfig = px.bar(\n    missed, \n    x='percent',\n    y=\"column\", \n    orientation='h', \n    title='Missed values percent for every column (percent > 0)', \n    height=1300, \n    width=800\n)\n\nfig.show()","3a4a6a51":"data = df['Club'].value_counts().reset_index()\n\ndata.columns = [\n    'club', \n    'count'\n]\n\ndata = data.sort_values('count')\n\nfig = px.bar(\n    data.tail(50), \n    x='count',\n    y=\"club\", \n    orientation='h', \n    title='Top 50 teams by number of players', \n    height=900, \n    width=800\n)\n\nfig.show()","a8cd3e6c":"data = df['Club'].value_counts().reset_index()\n\ndata.columns = [\n    'club', \n    'count'\n]\n\ndata = data.sort_values('count')\n\nfig = px.bar(\n    data.head(50), \n    x='count',\n    y=\"club\", \n    orientation='h', \n    title='Top 50 teams with less number of players', \n    height=900, \n    width=800\n)\n\nfig.show()","fed31f32":"df.describe()","5c2e3d16":"def plot_bar_plot(data, categorical_feature, target_feature, orientation, title, top_records=None, sort=False):\n    data = data.groupby(categorical_feature)[target_feature].count().reset_index()\n    fig = px.bar(\n        data, \n        x=categorical_feature, \n        y=target_feature, \n        orientation=orientation, \n        title=title,\n        height=600,\n        width=800\n    )\n    fig.show()\n    \ndef plot_pie_count(data, field=\"Nationality\", percent_limit=0.5, title=\"Number of players by \"):\n    \n    title += field\n    data[field] = data[field].fillna('NA')\n    data = data[field].value_counts().to_frame()\n\n    total = data[field].sum()\n    data['percentage'] = 100 * data[field]\/total    \n\n    percent_limit = percent_limit\n    otherdata = data[data['percentage'] < percent_limit] \n    others = otherdata['percentage'].sum()  \n    maindata = data[data['percentage'] >= percent_limit]\n\n    data = maindata\n    other_label = \"Others(<\" + str(percent_limit) + \"% each)\"\n    data.loc[other_label] = pd.Series({field:otherdata[field].sum()}) \n    \n    labels = data.index.tolist()   \n    datavals = data[field].tolist()\n    \n    trace=go.Pie(\n        labels=labels,\n        values=datavals\n    )\n\n    layout = go.Layout(\n        title = title,\n        height=500,\n        width=800\n    )\n    \n    fig = go.Figure(data=[trace], layout=layout)\n    iplot(fig)","a1c01d3e":"plot_bar_plot(\n    df, \n    'Position', \n    'Value', \n    'v', \n    'Number of players by position'\n)","37224299":"df[df['Position']=='ST'].head(10)","a8694172":"categorical = [\n    'Nationality', \n    'Club', \n    'Preferred Foot',\n    'Work Rate', \n    'Body Type', \n    'Position'\n]","b903366d":"plot_pie_count(df, 'Nationality')\nplot_pie_count(df, 'Preferred Foot')\nplot_pie_count(df, 'Work Rate', 0.1)\nplot_pie_count(df, 'Body Type', 0.1)","20867862":"df['Value'] = df['Value'].str.replace('\u20ac','').str.replace('M',' 1000000').str.replace('K',' 1000')\ndf['Value'] = df['Value'].str.split(' ', expand=True)[0].astype(float) * df['Value'].str.split(' ', expand=True)[1].astype(float)\ndf['Value'] = df['Value'].fillna(0).astype(np.float32)","944c2e18":"body_dict = {\n    'PLAYER_BODY_TYPE_25' : np.nan,\n    'Messi' : np.nan,\n    'Shaqiri': np.nan,\n    'Neymar': np.nan,\n    'Akinfenwa': np.nan,\n    'C. Ronaldo': np.nan,\n    'Courtois': np.nan\n}\n\ndf['Body Type'] = df['Body Type'].replace(body_dict)\ndf['Height'] = df['Height'].str.replace(\"'\",\".\").astype(float)\ndf['Weight'] = df['Weight'].str.replace(\"lbs\",\"\").astype(float)","8ca3db10":"fig = px.scatter(\n    df, \n    x='Overall', \n    y='Value', \n    height=SCATTER_SIZE,\n    width=SCATTER_SIZE,\n    title='Scatter plot for Value and Overall' \n)\n\nfig.show()","f92825eb":"df.sort_values(\"Value\", ascending=False)[['Name', \"Age\", \"Value\", \"Overall\"]].head(20)","3ca77713":"fig = px.scatter(\n    df, \n    x='Age', \n    y='Overall', \n    height=SCATTER_SIZE,\n    width=SCATTER_SIZE,\n    title='Scatter plot for Age and Overall' \n)\n\nfig.show()","3d40f0fb":"fig = px.scatter(\n    df, \n    x='Age', \n    y='Potential', \n    height=SCATTER_SIZE,\n    width=SCATTER_SIZE,\n    title='Scatter plot for Age and Potential' \n)\n\nfig.show()","2e266151":"fig = px.scatter(\n    df, \n    x='Potential', \n    y='Overall', \n    height=SCATTER_SIZE,\n    width=SCATTER_SIZE,\n    title='Scatter plot for Potential and Overall' \n)\n\nfig.show()","11141f0c":"df.sort_values(\"Potential\", ascending=False)[['Name', \"Age\", \"Value\", \"Overall\", 'Potential']].head(20)","6d050377":"fig = px.histogram(\n    df, \n    \"Value\", \n    nbins=100, \n    title='Value distribution',\n    width=800,\n    height=600\n)\n\nfig.show()","cc2b45e5":"age = df.groupby('Age')['Value'].mean().reset_index()\n\nfig = px.bar(\n    age, \n    x=\"Age\", \n    y=\"Value\", \n    orientation='v', \n    title='Mean Value by Age'\n)\n\nfig.show()","73e9f6ac":"df.sort_values(\"Age\", ascending=False)[['Name', \"Age\", \"Value\", \"Overall\"]].head(20)","f7d4d1da":"fig = px.histogram(\n    df, \n    \"Age\", \n    nbins=50, \n    title='Age distribution'\n)\n\nfig.show()","3620f7ef":"club = df.groupby('Club')['Value'].mean().reset_index().sort_values('Value', ascending=True).tail(50)\n\nfig = px.bar(\n    club, \n    x=\"Value\", \n    y=\"Club\", \n    orientation='h', \n    width=800, \n    height=900\n)\n\nfig.show()","6e5d00f6":"club = df.groupby('Club')['Overall'].mean().reset_index().sort_values('Overall', ascending=True).tail(50)\n\nfig = px.bar(\n    club, \n    x=\"Overall\", \n    y=\"Club\", \n    orientation='h',\n    title=\"Top 50 teams with highest player's average Overall rating\",\n    width=800,\n    height=900\n)\n\nfig.show()","582cdd2a":"club = df.groupby('Nationality')['Overall'].max().reset_index().sort_values('Overall', ascending=True).tail(40)\n\nfig = px.bar(\n    club, \n    x=\"Overall\", \n    y=\"Nationality\", \n    orientation='h',\n    width=800,\n    height=800\n)\n\nfig.show()","d10b1eaa":"club = df.groupby('Nationality')['Overall'].mean().reset_index().sort_values('Overall', ascending=True).tail(40)\n\nfig = px.bar(\n    club, \n    x=\"Overall\", \n    y=\"Nationality\", \n    orientation='h', \n    title=\"Top 40 countries with highest player's average Overall rating\",\n    width=800,\n    height=800\n)\n\nfig.show()","a209f086":"club = df.groupby('Nationality')['Value'].mean().reset_index().sort_values('Value', ascending=True).tail(40)\n\nfig = px.bar(\n    club, \n    x=\"Value\", \n    y=\"Nationality\", \n    orientation='h', \n    title=\"Top 40 countries with highest player's average Value\",\n    width=800,\n    height=800\n)\n\nfig.show()","6a7af2bd":"country_dict = {}\nfor c in countries:\n    country_dict[c.name] = c.alpha3\n    \ndf['alpha3'] = df['Nationality']\ndf = df.replace(\n    {\n        \"alpha3\": country_dict\n    }\n)\n\ngbr = [\n    'England', \n    'Wales', \n    'Scotland', \n    'Northern Ireland'\n]\n\ndf.loc[df['Nationality'].isin(gbr), 'alpha3'] = 'GBR'\ndf.loc[df['Nationality'] == 'Bosnia Herzegovina', 'alpha3'] = 'BIH'\ndf.loc[df['Nationality'] == 'Korea Republic', 'alpha3'] = 'KOR'\ndf.loc[df['Nationality'] == 'Czech Republic', 'alpha3'] = 'CZE'\ndf.loc[df['Nationality'] == 'St Lucia', 'alpha3'] = 'LCA'\ndf.loc[df['Nationality'] == 'Palestine', 'alpha3'] = 'PSE'\ndf.loc[df['Nationality'] == 'Antigua & Barbuda', 'alpha3'] = 'ATG'\ndf.loc[df['Nationality'] == 'St Kitts Nevis', 'alpha3'] = 'KNA'\ndf.loc[df['Nationality'] == 'Korea DPR', 'alpha3'] = 'PRK'\ndf.loc[df['Nationality'] == 'S\u00e3o Tom\u00e9 & Pr\u00edncipe', 'alpha3'] = 'STP'\ndf.loc[df['Nationality'] == 'Trinidad & Tobago', 'alpha3'] = 'TTO'\ndf.loc[df['Nationality'] == 'Bolivia', 'alpha3'] = 'BOL'\ndf.loc[df['Nationality'] == 'Moldova', 'alpha3'] = 'MDA'\ndf.loc[df['Nationality'] == 'Curacao', 'alpha3'] = 'CUW'\ndf.loc[df['Nationality'] == 'Tanzania', 'alpha3'] = 'TZA'\ndf.loc[df['Nationality'] == 'Guinea Bissau', 'alpha3'] = 'GNB'\ndf.loc[df['Nationality'] == 'China PR', 'alpha3'] = 'CHN'\ndf.loc[df['Nationality'] == 'FYR Macedonia', 'alpha3'] = 'MKD'\ndf.loc[df['Nationality'] == 'Iran', 'alpha3'] = 'IRN'\ndf.loc[df['Nationality'] == 'Syria', 'alpha3'] = 'SYR'\ndf.loc[df['Nationality'] == 'Cape Verde', 'alpha3'] = 'CPV'\ndf.loc[df['Nationality'] == 'United States', 'alpha3'] = 'USA'\ndf.loc[df['Nationality'] == 'Republic of Ireland', 'alpha3'] = 'IRL'\ndf.loc[df['Nationality'] == 'Venezuela', 'alpha3'] = 'VEN'\ndf.loc[df['Nationality'] == 'Russia', 'alpha3'] = 'RUS'\ndf.loc[df['Nationality'] == 'Ivory Coast', 'alpha3'] = 'CIV'\ndf.loc[df['Nationality'] == 'DR Congo', 'alpha3'] = 'COD'\ndf.loc[df['Nationality'] == 'Central African Rep.', 'alpha3'] = 'CAF'","707b372d":"data = df.groupby(['alpha3', 'Nationality'])['Name'].count().reset_index()\n\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'count'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color='count',\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Number of players from every country',\n    width=800, \n    height=700\n)\n\nfig.show()","cd60bcac":"data = df.groupby(['alpha3', 'Nationality'])['Overall'].max().reset_index()\n\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'max_rating'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"max_rating\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max rating for every country',\n    width=800, \n    height=700\n)\n\nfig.show()","1cc94b7b":"data = df.groupby(['alpha3', 'Nationality'])['Age'].max().reset_index()\n\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'max_age'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"max_age\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max age of sportsman for every country',\n    width=800, \n    height=700\n)\n\nfig.show()","1d68cef1":"data = df.groupby(['alpha3', 'Nationality'])['Value'].max().reset_index()\n\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'max_value'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"max_value\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Max Value of sportsman for every country',\n    width=800, \n    height=700\n)\n\nfig.show()","3b85d2fc":"data = df['alpha3'].value_counts().reset_index()\n\ndata.columns=[\n    'alpha3', \n    'national_count'\n]\n\ndf = pd.merge(df, data, on='alpha3')\ndata = df[df['national_count']>=50]\ndf = df.drop(['national_count'], axis=1)\ndata = data.groupby(['alpha3', 'Nationality'])['Overall'].mean().reset_index()\ndata.columns = [\n    'alpha3', \n    'nationality', \n    'mean_rating'\n]\n\nfig = px.choropleth(\n    data, \n    locations=\"alpha3\",\n    hover_name='nationality',\n    color=\"mean_rating\",\n    projection=\"natural earth\",\n    color_continuous_scale=px.colors.sequential.Plasma,\n    title='Mean rating for sportsmen for every country (minimum 50 players)',\n    width=800, \n    height=700\n)\n\nfig.show()","ccc247c8":"def draw_pitch(pitch, line, orientation,view):\n    \n    orientation = orientation\n    view = view\n    line = line\n    pitch = pitch\n    \n    if view.lower().startswith(\"h\"):\n        fig,ax = plt.subplots(figsize=(20.8, 13.6))\n        plt.ylim(98, 210)\n        plt.xlim(-2, 138)\n    else:\n        fig,ax = plt.subplots(figsize=(13.6, 20.8))\n        plt.ylim(-2, 210)\n        plt.xlim(-2, 138)\n    ax.axis('off')\n\n    # side and goal lines\n    lx1 = [0, 0, 136, 136, 0]\n    ly1 = [0, 208, 208, 0, 0]\n\n    plt.plot(lx1,ly1,color=line,zorder=5)\n\n    # boxes, 6 yard box and goals\n    # outer boxes\n    lx2 = [27.68, 27.68, 108.32, 108.32] \n    ly2 = [208, 175, 175, 208]\n    plt.plot(lx2,ly2,color=line,zorder=5)\n\n    lx3 = [27.68, 27.68, 108.32, 108.32] \n    ly3 = [0, 33, 33, 0]\n    plt.plot(lx3,ly3,color=line,zorder=5)\n\n    # goals\n    lx4 = [60.68, 60.68, 75.32, 75.32]\n    ly4 = [208, 208.4, 208.4, 208]\n    plt.plot(lx4,ly4,color=line,zorder=5)\n\n    lx5 = [60.68, 60.68, 75.32, 75.32]\n    ly5 = [0, -0.4, -0.4, 0]\n    plt.plot(lx5,ly5,color=line,zorder=5)\n\n    # 6 yard boxes\n    lx6 = [49.68, 49.68, 86.32, 86.32]\n    ly6 = [208, 199, 199, 208]\n    plt.plot(lx6,ly6,color=line,zorder=5)\n\n    lx7 = [49.68, 49.68, 86.32, 86.32]\n    ly7 = [0, 9, 9, 0]\n    plt.plot(lx7,ly7,color=line,zorder=5)\n\n    # Halfway line, penalty spots, and kickoff spot\n    lx8 = [0, 136] \n    ly8 = [104, 104]\n    plt.plot(lx8,ly8,color=line,zorder=5)\n\n    plt.scatter(68, 186, color=line, zorder=5)\n    plt.scatter(68, 22, color=line, zorder=5)\n    plt.scatter(68, 104, color=line, zorder=5)\n\n    circle1 = plt.Circle((68, 187), 18.30, ls='solid', lw=3, color=line, fill=False, zorder=1, alpha=1)\n    circle2 = plt.Circle((68, 21), 18.30, ls='solid', lw=3, color=line, fill=False, zorder=1, alpha=1)\n    circle3 = plt.Circle((68, 104), 18.30, ls='solid', lw=3, color=line, fill=False, zorder=2, alpha=1)\n\n    rec1 = plt.Rectangle((40, 175), 60, 33, ls='-', color=pitch, zorder=1, alpha=1)\n    rec2 = plt.Rectangle((40, 0), 60, 33, ls='-', color=pitch, zorder=1, alpha=1)\n    rec3 = plt.Rectangle((-1, -1), 140, 212, ls='-', color=pitch, zorder=1, alpha=1)\n\n    ax.add_artist(rec3)\n    ax.add_artist(circle1)\n    ax.add_artist(circle2)\n    ax.add_artist(rec1)\n    ax.add_artist(rec2)\n    ax.add_artist(circle3)   ","ffe256c6":"x = [\n    68, 68, 68, 32, 104, 68, 32, 104, 68, 44, 88, 20, 116, 12, 124, 68, 68, 16, 120, 16, 120, 40, 96, 32, 104, 32, 104\n]\n\ny = [\n    186, 150, 1, 150, 150, 112, 114, 114, 14, 16, 16, 24, 24, 50, 50, 50, 74, 74, 74, 130, 130, 74, 74, 186, 186, 50, 50\n]\n\nn = [\n    'ST', 'CF', 'GK', 'LF', 'RF', 'CAM', 'LAM', 'RAM', 'CB', \n    'LCB', 'RCB', 'LB', 'RB', 'LWB', 'RWB', 'CDM', 'CM', 'LM', \n    'RM', 'LW', 'RW', 'LCM', 'RCM', 'LS', 'RS', 'LDM', 'RDM'\n]","5f3d3d3a":"draw_pitch(\n    \"#195905\", \n    \"#faf0e6\", \n    \"v\", \n    \"full\"\n)\n\nfor i, pos in enumerate(n):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    plt.text(\n        x_c-2.5, \n        y_c+1, \n        pos, \n        fontsize=16\n    )","451f5639":"res = list()\nfor item in n:\n    test_df = df[df['Position']==item]\n    test_df = test_df.sort_values(['Overall'], ascending=False)\n    res.append(test_df.iloc[0]['Name'] + ' (' + str(test_df.iloc[0]['Overall']) + ')')\n\ndraw_pitch(\n    \"#195905\", \n    \"#faf0e6\", \n    \"v\", \n    \"full\"\n)\n\nfor i, pos in enumerate(res):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    plt.text(\n        x_c-2.5, \n        y_c+1, \n        pos, \n        fontsize=16\n    )","a2b74689":"res = list()\nfor item in n:\n    test_df = df[df['Position']==item]\n    test_df = test_df.sort_values(['Value'], ascending=False)\n    res.append(test_df.iloc[0]['Name'])\n\ndraw_pitch(\n    \"#195905\",\n    \"#faf0e6\",\n    \"v\",\n    \"full\"\n)\n\nfor i, pos in enumerate(res):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    plt.text(\n        x_c-2.5, \n        y_c+1, \n        pos, \n        fontsize=16\n    )","2e4f9380":"res = list()\nfor item in n:\n    test_df = df[(df['Position']==item) & (df['Nationality']=='Ukraine')]\n    test_df = test_df.sort_values(['Overall'], ascending=False)\n    if len(test_df) > 0:\n        res.append(test_df.iloc[0]['Name'] + ' (' + str(test_df.iloc[0]['Overall']) + ')')\n    else:\n         res.append('NO PLAYER')   \n\ndraw_pitch(\n    \"#195905\",\n    \"#faf0e6\",\n    \"v\",\n    \"full\"\n)\n\nfor i, pos in enumerate(res):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    plt.text(\n        x_c-2.5, \n        y_c+1, \n        pos, \n        fontsize=16\n    )","44d7cc12":"res = list()\nfor item in n:\n    test_df = df[df['Position']==item]\n    test_df = test_df.sort_values(['Potential'], ascending=False)\n    res.append(test_df.iloc[0]['Name'] + ' (' + str(test_df.iloc[0]['Overall']) + ')')\n\ndraw_pitch(\n    \"#195905\",\n    \"#faf0e6\",\n    \"v\",\n    \"full\"\n)\n\nfor i, pos in enumerate(res):\n    x_c = x[i]\n    y_c = y[i]\n    plt.scatter(\n        x_c, \n        y_c, \n        marker='o', \n        color='red', \n        edgecolors=\"black\", \n        zorder=10\n    )\n    plt.text(\n        x_c-2.5, \n        y_c+1, \n        pos, \n        fontsize=16\n    )","1cb33925":"drop = [\n    'Unnamed: 0', 'ID', 'Name', 'Photo', \n    'Flag', 'Potential', 'Club Logo', 'Special', \n    'Real Face', 'Jersey Number',  'Contract Valid Until',  'Release Clause',\n    'Wage', 'Joined', 'Loaned From', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', \n    'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', \n    'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB'\n]\n\ndf = df.drop(drop, axis=1)","0523b1dd":"for item in categorical:\n    df[item] = df[item].fillna('0') \n    le = LabelEncoder()\n    df[item] = le.fit_transform(df[item])","a994e35f":"f = plt.figure(\n    figsize=(19, 15)\n)\n\nplt.matshow(\n    df.corr(), \n    fignum=f.number\n)\n\nplt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)\nplt.yticks(range(df.shape[1]), df.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)","890b6f22":"df","bd4f4e9a":"df = df.drop(['alpha3'], axis=1)\nfor col in df.columns:\n    if abs(df[col].corr(df['Value'])) < 0.15:\n        df = df.drop([col], axis=1)\n\ndf.columns","043972af":"target = np.log1p(df[\"Value\"])\noriginal_target = df['Value']\ndf = df.drop(['Value'], axis=1)","7151429b":"new_categorical = list()\nfor item in categorical:\n    if item in df.columns:\n        new_categorical.append(item)\n        \ncategorical = new_categorical","29765d6c":"df = df.fillna(-1)","2021a083":"X_embedded = TSNE(\n    n_components=2, \n    random_state=666\n).fit_transform(df)\n\nX_embedded = pd.DataFrame(X_embedded)","86992d3d":"analysis = pd.DataFrame()\nanalysis['color'] = df['Overall']\nanalysis['x'] = X_embedded[0]\nanalysis['y'] = X_embedded[1]\n\nfig = px.scatter(\n    analysis, \n    x='x', \n    y='y', \n    color='color',\n    height=800,\n    width=800,\n    title='TSNE for dataset'\n)\n\nfig.show()","8882bb6a":"params = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': {\n        'rmse'\n    },\n    'subsample': 0.25,\n    'subsample_freq': 1,\n    'learning_rate': 0.05,\n    'num_leaves': 20,\n    'feature_fraction': 0.9\n}\n\nfolds = 5\nseed = 666\n\nkf = KFold(\n    n_splits=folds, \n    shuffle=True, \n    random_state=seed\n)\n\nmodels = list()\nfor train_index, val_index in kf.split(df):\n    train_X = df[df.columns].iloc[train_index]\n    val_X = df[df.columns].iloc[val_index]\n    train_y = target.iloc[train_index]\n    val_y = target.iloc[val_index]\n    lgb_train = lgb.Dataset(train_X, train_y, categorical_feature=categorical)\n    lgb_eval = lgb.Dataset(val_X, val_y, categorical_feature=categorical)\n    \n    gbm = lgb.train(\n        params,\n        lgb_train,\n        num_boost_round=10000,\n        valid_sets=(lgb_train, lgb_eval),\n        early_stopping_rounds=100,\n        verbose_eval = 100\n    )\n    models.append(gbm)","4937c7c7":"res=sum(np.expm1([model.predict(df) for model in models])\/folds)","f4c92455":"def root_mean_squared_error(y_true, y_pred):\n    return math.sqrt(mse(y_true, y_pred))","30f19972":"print('RMSE: ', root_mean_squared_error(original_target, res))","c8cb35a7":"df['prediction'] = res\ndf['Value'] = original_target\ndf[['Value', 'prediction']]","2e9b37c3":"df.to_csv('sub.csv', index=False)","16e40d17":"The most expensive team","80b98047":"The best team (the best player for every position and his Overall)","ee6283f1":"Top 50 teams with highest player's average Overall rating.","9a8ae329":"Top 40 Nationalities by max rating for a single player.","0e6f5094":"The best potential team","8003adf7":"NaNs percent for every column.","e030f766":"<a id=\"2\"><\/a>\n<h2 style='background:purple; border:0; color:white'><center>2. Geo visualization<\/center><h2>","75c7c90f":"<a id=\"1\"><\/a>\n<h2 style='background:purple; border:0; color:white'><center>1. Basic Data Analysis<\/center><h2>","e3a79fd9":"Now we will define categorical features that can be used in supervised modeling.","35969ee7":"Top 50 teams with highest player's average Value.","e7a70ef6":"Let's check the `Value` columns distribution. As we can see the majority of players value is less than 5M euro. ","b13d93d2":"Let's define functions to plot different kinds of charts.","3bc5252d":"Let's convert `Value` column to float type.","91a568df":"The best Ukrainian team","661f9c65":"Every position at the football field.","cc8d8b38":"In this section we will do a quick look through the data, see some plots and check some dependencies.","96e03edd":"Top 20 players by potential.","f90a5da9":"Now we will see what is the avarage value for every age in the dataset. As we can see from plot the most suitable age to get high transfer value is 27 years.","8746cbdd":"Top 20 players with the highest Value.","605fb43c":"<a id=\"4\"><\/a>\n<h2 style='background:purple; border:0; color:white'><center>4. Modeling<\/center><h2>","8010d2a5":"<a id=\"3\"><\/a>\n<h2 style='background:purple; border:0; color:white'><center>3. Visualization of the football field<\/center><h2>","2dd16f35":"As we can see the most players are on positions `ST`, `GK` and `CB`.","eca195ac":"## Hello everyone!\n### In this kernel I am going to present full process of EDA for FIFA 2019 dataset. The main interesting feature of this kernel is visualization of the football field. And as the result of kernel we will build the model to predict transfer value for players.\n\n<center><img src=\"https:\/\/www.fifplay.com\/img\/public\/fifa-2019.jpg\"><\/center>\n\n<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:purple; border:0; color:white' role=\"tab\" aria-controls=\"home\"><center>Quick navigation<\/center><\/h3>\n\n* [1. Basic Data Analysis](#1)\n* [2. Geo visualization](#2)\n* [3. Visualization of the football field](#3)\n* [4. Modeling](#4)\n    \n#### Build your best team for this dataset using genetic algorithms here: <a href=\"https:\/\/www.kaggle.com\/isaienkov\/find-your-best-team-using-genetic-algorithms\">Find your best team using genetic algorithms<\/a>.\n    \n#### You can also check another my kernel about sport analytics:  <a href=\"https:\/\/www.kaggle.com\/isaienkov\/nba-2k20-data-analysis-visualization\">NBA 2k20. Data analysis & visualization<\/a>. There you can find analysis and visualization of NBA 2k20 dataset.","692ed494":"Let's drop weak features.","2656ee33":"Number of players for each categorical variable."}}