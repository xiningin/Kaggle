{"cell_type":{"00cbda1b":"code","88305a32":"code","a188e6ae":"code","26c79e13":"code","ed4a37b1":"code","d5ec1f54":"code","5f637435":"code","e9a3536a":"code","650bbeb2":"code","c34471c2":"code","56e117f0":"code","737d8fd5":"code","1f086fcc":"code","597c9103":"code","def75032":"code","d7eb9f3b":"code","a9c34346":"code","9409036f":"code","2bd25731":"code","07e467ed":"code","f72a13d3":"code","1f208af8":"code","3b3196f0":"code","b5057ed7":"code","3d5de594":"code","b6a4108e":"code","fe811190":"code","2b9f9010":"code","ddaa272a":"code","8f64e432":"code","783ac012":"code","eadde452":"code","0e31fc9f":"code","1f63af11":"code","ed33ac72":"code","05cde2ae":"code","067adaa3":"code","9d581981":"code","0046dd1d":"code","2bfde835":"code","bed2d03a":"code","d331543d":"code","4390e76a":"code","015679b6":"code","4f24eb5a":"code","dff1224e":"markdown","66898b40":"markdown","3c5046fb":"markdown","c6c3558e":"markdown","c3640641":"markdown","1bcc59b4":"markdown","5895a2c5":"markdown","48dfdf39":"markdown","b951afb8":"markdown","acc83d1d":"markdown","e731ab1a":"markdown","0877358e":"markdown","274b54e2":"markdown","b2905507":"markdown","58a86543":"markdown","cbc3b8b6":"markdown","d896cf24":"markdown"},"source":{"00cbda1b":"%%capture\n!conda install --yes -c huggingface -c conda-forge datasets\n!pip install jiwer","88305a32":"import pandas as pd\nimport numpy as np\nimport os\nimport json\nimport collections\n\nfrom pathlib import Path\nfrom typing import List, Dict, Optional, Union\nfrom pydantic import BaseModel\n\nimport datasets\nfrom transformers.trainer_utils import set_seed\nfrom transformers import (AutoTokenizer, PreTrainedTokenizerFast,\n                          AutoModelForQuestionAnswering, TrainingArguments,\n                          Trainer, default_data_collator, DataCollatorWithPadding)\nimport wandb\nimport jiwer\n\nfrom tqdm.auto import tqdm\nimport gc\n\nfrom IPython.display import FileLink","a188e6ae":"class Config:\n    # Path\n    model_path: Path = '..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2'\n    test_path: Path = '..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv'\n    output_dir: str = '.\/'\n    \n    # Base\n    model_name: str = 'xlm-roberta-large-squad2'\n    version: str = 'v11'\n    seed: int = 42\n    test_size: float = 0.1\n    debug=False\n    \n    # Tokenizer\n    max_length: int = 256\n    doc_stride: int = 128\n    \n    # Trainer\n    batch_size: int = 8\n    learning_rate: float = 3e-5\n    warmup_ratio: float = 0.1\n    gradient_accumulation_steps: int = 4\n    num_train_epochs: int = 1\n    weight_decay: float = 0.01\n    \n    # Postprocess\n    n_best_size: int = 20\n    max_answer_length: int = 30\n    squad_v2: bool = False\n    \n    # Notes\n    scores: Dict[str,float] = {}\n    notes: str = \"Some important findings\"\n    LB: float = 0.0\n    \n    @staticmethod\n    def save_config(file_name: str, output_dir: str = output_dir) -> None:\n        config_dict = {}\n        for key, value in vars(Config).items():\n            if key.startswith('_') or isinstance(value, staticmethod):\n                continue\n            config_dict[key] = value\n        \n        out_path = f'{output_dir}{file_name}.json'\n        with open(out_path, 'w') as out_file:\n            json.dump(config_dict, out_file, indent=2, sort_keys=False)","26c79e13":"set_seed(Config.seed)","ed4a37b1":"def read_json(from_path: Path) -> dict:\n    with open(from_path, 'r', encoding='utf-8') as out_file:\n        return json.load(out_file)\n        \ndef write_json(data: dict, out_path: Path) -> None:\n    with open(out_path, 'w', encoding='utf-8') as out_file:\n        json.dump(data, out_file, indent=2, sort_keys=True, ensure_ascii=False)","d5ec1f54":"mlqa_dev_hindi_path = '..\/input\/chaii-squad\/mlqa_dev_hindi.json'\nmlqa_dev_hindi_dataset = datasets.load_dataset(\n    'json',\n    data_files=mlqa_dev_hindi_path,\n    field='data',\n    split=\"train\"\n)\nmlqa_dev_hindi_dataset","5f637435":"mlqa_test_hindi_path = '..\/input\/chaii-squad\/mlqa_test_hindi.json'\nmlqa_test_hindi_dataset = datasets.load_dataset(\n    'json',\n    data_files=mlqa_test_hindi_path,\n    field='data',\n    split=\"train\"\n)\nmlqa_test_hindi_dataset","e9a3536a":"mlqa_hindi_dataset = datasets.concatenate_datasets([mlqa_dev_hindi_dataset, mlqa_test_hindi_dataset])\nmlqa_hindi_dataset","650bbeb2":"xquad_hindi_path = '..\/input\/chaii-squad\/xquad_hindi.json'\nxquad_hindi_dataset = chaii_dataset = datasets.load_dataset(\n    'json',\n    data_files=xquad_hindi_path,\n    field='data',\n    split=\"train\"\n)\nxquad_hindi_dataset","c34471c2":"chaii_path = '..\/input\/chaii-squad\/chaii_train.json'\nchaii_dataset = datasets.load_dataset(\n    'json',\n    data_files=chaii_path,\n    field='data',\n    split='train'\n)\nchaii_dataset","56e117f0":"chaii_dataset = chaii_dataset.train_test_split(\n    test_size=Config.test_size,\n    shuffle=True,\n    seed=Config.seed\n)\nchaii_dataset","737d8fd5":"chaii_dataset['train'] = datasets.concatenate_datasets([chaii_dataset['train'], xquad_hindi_dataset, mlqa_hindi_dataset])","1f086fcc":"chaii_dataset","597c9103":"tokenizer = AutoTokenizer.from_pretrained(Config.model_path)\nassert isinstance(tokenizer, PreTrainedTokenizerFast)\npad_on_right = tokenizer.padding_side == \"right\"","def75032":"def prepare_train_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=Config.max_length,\n        stride=Config.doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","d7eb9f3b":"tokenized_chaii = chaii_dataset.map(\n    prepare_train_features,\n    batched=True,\n    remove_columns=chaii_dataset['train'].column_names\n)","a9c34346":"tokenized_chaii","9409036f":"model = AutoModelForQuestionAnswering.from_pretrained(Config.model_path)","2bd25731":"args = TrainingArguments(\n    output_dir=Config.output_dir,\n    evaluation_strategy = \"epoch\",\n    learning_rate=Config.learning_rate,\n    warmup_ratio=Config.warmup_ratio,\n    gradient_accumulation_steps=Config.gradient_accumulation_steps,\n    per_device_train_batch_size=Config.batch_size,\n    per_device_eval_batch_size=Config.batch_size,\n    num_train_epochs=Config.num_train_epochs,\n    weight_decay=Config.num_train_epochs,\n    seed=Config.seed\n)","07e467ed":"%%capture\nwandb.init(mode=\"disabled\")\nwandb.init(mode=\"offline\")","f72a13d3":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=tokenized_chaii['train'],\n    eval_dataset=tokenized_chaii['test'],\n    data_collator=default_data_collator,\n    tokenizer=tokenizer\n)","1f208af8":"trainer.train()","3b3196f0":"def prepare_validation_features(examples):\n    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n    # left whitespace\n    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n\n    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n    # in one example possible giving several features when a context is long, each of those features having a\n    # context that overlaps a bit the context of the previous feature.\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=Config.max_length,\n        stride=Config.doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","b5057ed7":"validation_features = chaii_dataset['test'].map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=chaii_dataset['test'].column_names\n)","3d5de594":"validation_features","b6a4108e":"raw_predictions = trainer.predict(validation_features)","fe811190":"validation_features.set_format(type=validation_features.format[\"type\"], columns=list(validation_features.features.keys()))","2b9f9010":"def postprocess_qa_predictions(examples, features, raw_predictions, tokenizer=tokenizer,\n                               squad_v2=Config.squad_v2, n_best_size=Config.n_best_size, \n                               max_answer_length=Config.max_answer_length):\n    \n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        if not squad_v2:\n            predictions[example[\"id\"]] = best_answer[\"text\"]\n        else:\n            answer = best_answer[\"text\"] if best_answer[\"score\"] > min_null_score else \"\"\n            predictions[example[\"id\"]] = answer\n\n    return predictions","ddaa272a":"final_predictions = postprocess_qa_predictions(chaii_dataset['test'], validation_features, raw_predictions.predictions)","8f64e432":"metric = datasets.load_metric(\"squad\")","783ac012":"formatted_predictions = [{\"id\": k, \"prediction_text\": v} for k, v in final_predictions.items()]\nreferences = [{\"id\": ex[\"id\"], \"answers\": ex[\"answers\"]} for ex in chaii_dataset['test']]\nscores = metric.compute(predictions=formatted_predictions, references=references)\nscores","eadde452":"def jaccard(row: pd.Series) -> float: \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","0e31fc9f":"wer_metric = datasets.load_metric(\"wer\")","1f63af11":"formatted_predictions[:2]","ed33ac72":"references[:2]","05cde2ae":"eval_df = pd.DataFrame(references)\neval_df['answers'] = eval_df.answers.apply(lambda x: x['text'][0])\neval_df['predictions'] = eval_df['id'].apply(lambda x: final_predictions[x])\neval_df['jaccard'] = eval_df[['answers', 'predictions']].apply(jaccard, axis=1)\neval_df['wer'] = eval_df[['predictions', 'answers']].apply(lambda x: wer_metric.compute(predictions=x[[0]], references=[x[1]]), axis=1)\neval_df.head()","067adaa3":"jaccard_wer_scores = {'jaccard': eval_df.jaccard.mean(), 'wer': eval_df.wer.mean()}\nscores.update(jaccard_wer_scores)\njaccard_wer_scores","9d581981":"training_output = f\"{Config.model_name}-finetuned-{Config.version}\"\ntrainer.save_model(training_output)","0046dd1d":"scores","2bfde835":"notes = 'XLM Roberta large model, add external data. Change max len to 256.'\nConfig.notes = notes\nConfig.scores = scores\nConfig.save_config(training_output.replace('-', '_'))","bed2d03a":"%cd .\/\n%ls","d331543d":"# verify config\nread_json('xlm_roberta_large_squad2_finetuned_v11.json')","4390e76a":"!zip -r  xlm-roberta-large-squad2-finetuned-v11.zip  xlm-roberta-large-squad2-finetuned-v11","015679b6":"FileLink(r'xlm-roberta-large-squad2-finetuned-v11.zip')","4f24eb5a":"FileLink('xlm_roberta_large_squad2_finetuned_v11.json')","dff1224e":"# About\n\nThis is a modified version of the HuggingFace tutorial [Fine-tuning a model on a question-answering task](https:\/\/github.com\/huggingface\/notebooks\/blob\/master\/examples\/question_answering.ipynb), where you can find more information about features and training loop. I adapted it to [chaii competition](https:\/\/www.kaggle.com\/c\/chaii-hindi-and-tamil-question-answering) data and added some processing logic. Hopefully, this will make your experiments easier and more efficient, while keeping track of your results. I also recommend [notebook](https:\/\/www.kaggle.com\/thedrcat\/chaii-eda-baseline) create by @thedrcat based on the same master example, where I found the best model so far and used a few useful tricks. \n\n**Notebooks connected to this work:**\n\n1. [Converting original and external data to SQuAD format](https:\/\/www.kaggle.com\/oleksandrsirenko\/chaii-dataframe-and-external-data-to-squad)\n2. [Inference notebook](https:\/\/www.kaggle.com\/oleksandrsirenko\/chaii-inference-finetuned-model)\n\nThere are many possible improvements and tweaks that can be implemented on each level from the data processing to the training loop. So feel free to fork and customize this stuff according to your requirements and vision, and ***don't forget to upvote if you like this kernel*** \ud83e\udd17","66898b40":"# Configuration","3c5046fb":"# Post-processing","c6c3558e":"### XQuAD Hindi","c3640641":"# Tokenize","1bcc59b4":"# Prepare the Datasets\n\nFirst, we need to convert the pandas dataframe to a JSON object of the appropriate format:\n\n```python\n{'answers': {'answer_start': [515], 'text': ['Saint Bernadette Soubirous']},\n 'context': 'Architecturally, the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend \"Venite Ad Me Omnes\". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive (and in a direct line that connects through 3 statues and the Gold Dome), is a simple, modern stone statue of Mary.',\n 'id': '5733be284776f41900661182',\n 'question': 'To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France?',\n 'title': 'University_of_Notre_Dame'}\n ```\n \nI have already performed this task for all currently available datasets, so I skip this step and will use prepared data. You can find all the helper functions for converting data to SQuAD in [this notebook](https:\/\/www.kaggle.com\/oleksandrsirenko\/chaii-dataframe-to-squad-and-external-data). The [chaii-squad dataset](https:\/\/www.kaggle.com\/oleksandrsirenko\/chaii-squad) will be updated during the competition.","5895a2c5":"# Inference \nYou can find out how this works at the inference stage [here](https:\/\/www.kaggle.com\/oleksandrsirenko\/chaii-inference-finetuned-model).","48dfdf39":"# Scores","b951afb8":"# Evaluation","acc83d1d":"### Concatinate Train Split with External Data","e731ab1a":"### Facebook MLQA Hindi","0877358e":"[Word error rate (WER)](https:\/\/huggingface.co\/metrics\/wer) is a common metric of the performance of an automatic speech recognition system. The general difficulty of measuring performance lies in the fact that the recognized word sequence can have a different length from the reference word sequence (supposedly the correct one). The WER is derived from the Levenshtein distance, working at the word level instead of the phoneme level. The WER is a valuable tool for comparing different systems as well as for evaluating improvements within one system. \n\nThus, it can be used as one of our metrics and, possibly, as an alternative to the word-level Jaccard score. The lower the WER the better, it is not in the 0-1 range, but the best WER is zero if I understand correctly.","274b54e2":"# Download \n\n**NOTE:** This is training notebook will work only in an online mode.  You do not allow internet access to submit your prediction. While you can modify this code to use it without access to the internet and send your predictions directly,  the more convenient way is to create an inference notebook without all this training staff, but only applying the model on a test dataset. To do this, you need to load the directory that you created in the previous step when calling\n\n```python\ntrainer.save_model(training_output)\n```\n\nThen you need to create a new (or update an existing) Kaggle dataset, load the whole thing, and connect the dataset to your inference kernel. Of course, if the loop is worth it, otherwise just download the experiment config and keep looking for a solution :)","b2905507":"### CHAII","58a86543":"# Save Model and Experiment Configuration","cbc3b8b6":"[Weights & Biases](https:\/\/wandb.ai\/site) is a service for tracking experiments, versioning datasets, and managing models, it is incorporated by default into the Trainer API and has its own behavior. Sometimes it is useful and convenient, sometimes it can be a hassle:) I personally would prefer this service to be disabled by default, and manually enable it if I need to. So be free to check it out:)","d896cf24":"# Training"}}