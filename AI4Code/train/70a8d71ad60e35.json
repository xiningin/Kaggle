{"cell_type":{"02e58516":"code","178aa685":"code","8bb6ec46":"code","b52dc1fc":"code","0d30f233":"markdown","8c0d991f":"markdown","f9fd8ef0":"markdown","8850e71f":"markdown"},"source":{"02e58516":"!apt-get install -y libopenblas-dev pbzip2\n!pip install -U tabulate==0.8.2\n!pip install h2o4gpu\nimport h2o4gpu","178aa685":"import gc\nimport numpy as np\nimport scipy\nfrom sklearn.model_selection import train_test_split\n\nfiles = [\n    '..\/input\/combined_data_1.txt',\n    '..\/input\/combined_data_2.txt',\n    '..\/input\/combined_data_3.txt',\n    '..\/input\/combined_data_4.txt',\n]\n\ncoo_row = []\ncoo_col = []\ncoo_val = []\n\nfor file_name in files:\n    print('processing {0}'.format(file_name))\n    with open(file_name, \"r\") as f:\n        movie = -1\n        for line in f:\n            if line.endswith(':\\n'):\n                movie = int(line[:-2]) - 1\n                continue\n            assert movie >= 0\n            splitted = line.split(',')\n            user = int(splitted[0])\n            rating = float(splitted[1])\n            coo_row.append(user)\n            coo_col.append(movie)\n            coo_val.append(rating)\n    gc.collect()\n\nprint('transformation...')\n\ncoo_val = np.array(coo_val, dtype=np.float32)\ncoo_col = np.array(coo_col, dtype=np.int32)\ncoo_row = np.array(coo_row)\nuser, indices = np.unique(coo_row, return_inverse=True)\nuser = user.astype(np.int32)\n\ngc.collect()\n\ncoo_matrix = scipy.sparse.coo_matrix((coo_val, (indices, coo_col)))\nshape = coo_matrix.shape\nprint('R matrix size', shape)\n\ngc.collect()\n\nprint('splitting into training and validation set')\ntrain_row, test_row, train_col, test_col, train_data, test_data = train_test_split(\n    coo_matrix.row, coo_matrix.col, coo_matrix.data, test_size=0.2, random_state=42)\n\ntrain = scipy.sparse.coo_matrix(\n    (train_data, (train_row, train_col)), shape=shape)\ntest = scipy.sparse.coo_matrix(\n    (test_data, (test_row, test_col)), shape=shape)\n","8bb6ec46":"n_components = 40\n_lambda = 0.01\n# increase it in case out-of GPU memory, but n_components \/ BATCHES has to be a multiple of 10\nBATCHES=1\n\n\n\nscores = []\nfactorization = h2o4gpu.solvers.FactorizationH2O(\n    n_components, _lambda, max_iter=100)\nfactorization.fit(train, X_test=test, X_BATCHES=BATCHES,\n                      THETA_BATCHES=BATCHES, scores=scores, verbose=True, early_stopping_rounds=5)\nprint('best iteration:',factorization.best_iteration)","b52dc1fc":"print('X shape:', factorization.XT.shape)\nprint('ThetaT shape:', factorization.thetaT.shape)\n","0d30f233":"Let's factorize matrix R ","8c0d991f":"Let's install `h2o4gpu`","f9fd8ef0":"And now `factorization.XT` and `factorization.thetaT` contain dense representation of users and movies respectively.","8850e71f":"Read and process netflix dataset to scipy sparse matrix"}}