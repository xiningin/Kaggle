{"cell_type":{"ad4f28eb":"code","fecc3188":"code","d924a0fd":"code","e128035e":"code","1a3dc48f":"code","0ba333f5":"code","538aed6e":"code","6b12abea":"code","3f4fe7c6":"code","58f31941":"code","1f6c0d7f":"code","a9cad176":"code","c1f1c1d8":"code","b4f26aff":"code","f5bd9a56":"code","4e6976b5":"code","b2d34483":"code","55a00722":"code","371d6a97":"code","6b32468b":"code","34c254e0":"code","cf7865ce":"code","4c7ca617":"code","12d1bfe5":"code","0310c1a5":"code","64feeaea":"code","62ee58b6":"code","50dee7a4":"markdown","df534468":"markdown","c712eb93":"markdown","5ec6b388":"markdown","6f9471ce":"markdown","dbeef3f1":"markdown","59dc253d":"markdown","ac293edd":"markdown"},"source":{"ad4f28eb":"import ast\n\nex = \"{'a': 1, 'b': 2, 'c': 3}\"\nprint(type(ex))\nprint(ex)\n\nex = ast.literal_eval(ex)\nprint(type(ex)) \nprint(ex)","fecc3188":"ex = \"\"\"(1, 2, {'foo': 'bar'})\"\"\"\nprint(type(ex))\nprint(ex)\n\nex = ast.literal_eval(ex)\nprint(type(ex)) \nprint(ex)","d924a0fd":"ex = '''['a','b','c','d','e']'''\nprint(type(ex))\nprint(ex)\n\nex = ast.literal_eval(str(ex))\nprint(type(ex))\nprint(ex)","e128035e":"# ex = 'a,b,c,d,e,'\n# print(type(ex))\n# print(ex)\n\n# ex = ast.literal_eval(ex) # ValueError: malformed node or string:\n# print(type(ex))\n# print(ex) ","1a3dc48f":"import pandas as pd\n\nmovies_df = pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')\nmovies_df.head()","0ba333f5":"movies_df.genres[0]","538aed6e":"genres1 = movies_df.genres.apply(ast.literal_eval).apply(lambda x : [i['name'] for i in x] if isinstance(x, list) else [])\ngenres1","6b12abea":"genres2 = movies_df.genres.apply(ast.literal_eval).apply(lambda x : [i['name'] for i in x])\ngenres2","3f4fe7c6":"genres1.equals(genres2)","58f31941":"movies_df['genres'] = genres1\nmovies_df['genres']","1f6c0d7f":"credits_df = pd.read_csv('..\/input\/the-movies-dataset\/credits.csv')\ncredits_df.head()","a9cad176":"credits_df.crew[0]","c1f1c1d8":"import numpy as np\n\ndef get_director(x):\n    for i in x:\n        if i['job'] == 'Director':\n            return i['name']\n    return np.nan","b4f26aff":"# credits_df['crew'].apply(get_director) # TypeError: string indices must be integers","f5bd9a56":"credits_df['crew'].apply(ast.literal_eval).apply(get_director)","4e6976b5":"df = pd.DataFrame({'column1':['a,b,c,d,e','d,e,f','h,i']})\ndf","b2d34483":"# \uac01 \ud589\uc758 \ub370\uc774\ud130 \ub098\ub204\uae30\ndf.column1.str.split(',')","55a00722":"# \ub098\ub204\uc5b4\uc9c4 \ub370\uc774\ud130 series\ub85c \ubc18\ud658\ndivided_df = df.column1.str.split(',').apply(lambda x : pd.Series(x))\ndivided_df","371d6a97":"# Return a reshaped DataFrame or Series having a multi-level index\ndivided_df.stack()","6b32468b":"divided_df = divided_df.stack().reset_index(level=1, drop=True).to_frame('column2')\n# level = Only remove the given levels from the index\n# use the drop parameter to avoid the old index being added as a column\n\ndivided_df","34c254e0":"# \uae30\uc874 \ub370\uc774\ud130\ud504\ub808\uc784\uacfc join\n\nprint(df)\ndf.merge(divided_df, left_index=True, right_index=True, how='left')","cf7865ce":"movies_df['genres']","4c7ca617":"# convert to Series \ubc29\ubc95 1\nmovies_df.genres.apply(lambda x : pd.Series(x))","12d1bfe5":"# convert to Series \ubc29\ubc95 2\nmovies_df.apply(lambda x: pd.Series(x['genres']),axis=1)","0310c1a5":"movies_df.genres.apply(lambda x : pd.Series(x)).stack()","64feeaea":"s = movies_df.genres.apply(lambda x : pd.Series(x)).stack().reset_index(level=1, drop=True)\ns.name = 'genre'\ns","62ee58b6":"movies_df = movies_df.drop('genres', axis=1).join(s)\nmovies_df.genre","50dee7a4":"# # How to split cell into multiple rows in Dataframe?\n# >> Series.stack().reset_index(level=1, drop=True)\n- [pandas.DataFrame.stack](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.stack.html)   \n- [pandas.DataFrame.reset_index](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.reset_index.html)  \n- [Pandas: \ud55c \uc140\uc758 \ub370\uc774\ud130\ub97c \uc5ec\ub7ec \ud589\uc73c\ub85c \ub098\ub204\uae30](https:\/\/ohgyun.com\/768)","df534468":"### \u25a0 Example","c712eb93":"**2) \ud2b9\uc815 \uac12\uc744 \uac00\uc9c4 \ub370\uc774\ud130\uc758 \ub2e4\ub978 \ud2b9\uc815 \ud0a4\uc758 \uac12\ub9cc \uac00\uc838\uc624\uae30**","5ec6b388":"# # How to extract specific values from dataframe(like JSON) with Python? \n# >> ast.literal_eval\n: string\uc744 \uc790\ub8cc\ud615\uc73c\ub85c \uad6c\uc870\ud654 \uc2dc\ud0a4\ub294 \uc6a9\ub3c4  \n- [ast \u2014 Abstract Syntax Trees](https:\/\/docs.python.org\/3\/library\/ast.html)  \n- [python eval \uacfc literal_eval \uc758 \ucc28\uc774](https:\/\/bluese05.tistory.com\/65)   \n- [python eval() \ud568\uc218 - \uc0ac\uc6a9\uc744 \uc870\uc2ec\ud574\uc57c \ud558\ub294 \uc774\uc720](https:\/\/bluese05.tistory.com\/64?category=559959)","6f9471ce":"### \u25a0 With Real Data","dbeef3f1":"### \u25a0 Example","59dc253d":"**1) \ud2b9\uc815 \ud0a4\uc758 \uac12\ub9cc \uac00\uc838\uc624\uae30**","ac293edd":"### \u25a0 With Real Data"}}