{"cell_type":{"2426eadf":"code","c33cc47b":"code","66c4d00d":"code","d306b8b3":"code","8ae9d0b0":"code","7fbc0241":"code","d4f899c8":"code","b546c62f":"markdown","2e1ff043":"markdown","f7be7122":"markdown","559752eb":"markdown","e9c76dd7":"markdown","73c191bf":"markdown","ce9ab47c":"markdown"},"source":{"2426eadf":"import numpy as np\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import GradientBoostingRegressor","c33cc47b":"SEED = 42\nEARLY_STOP_NUM = 5 \nDATA_NUM = 1000 # row number \nCOL_NUM = 5 #column number \nMAX_DEPTH = 2\nMAX_ESTIMATORS = 120","66c4d00d":"np.random.seed(SEED)\nX = np.random.rand(DATA_NUM, COL_NUM) - 0.5\ny = 3*X[:, 0]**2 + 0.05 * np.random.randn(DATA_NUM)","d306b8b3":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=SEED)\n\ngbrt = GradientBoostingRegressor(max_depth=MAX_DEPTH, n_estimators=MAX_ESTIMATORS, random_state=SEED)\ngbrt.fit(X_train, y_train)","8ae9d0b0":"errors = [mean_squared_error(y_val, y_pred)\n          for y_pred in gbrt.staged_predict(X_val)]\nbst_n_estimators = np.argmin(errors) + 1\nbst_n_estimators","7fbc0241":"gbrt_best = GradientBoostingRegressor(max_depth=2, n_estimators=bst_n_estimators, random_state=42)\ngbrt_best.fit(X_train, y_train)","d4f899c8":"min_error = np.min(errors)\nprint(\"Minimum validation MSE:\", min_error)","b546c62f":"# global variables","2e1ff043":"# train using best n_estimators","f7be7122":"# get minum validation MSE ","559752eb":"# make data ","e9c76dd7":"# get best n_estimators using staged_predict","73c191bf":"# train model using MAX_ESTIMATORS","ce9ab47c":"# import libraries"}}