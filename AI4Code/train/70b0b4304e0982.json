{"cell_type":{"83bae003":"code","7f4cc6e2":"code","d4f644d3":"code","6aef8a50":"code","a435f09f":"code","25a4c503":"code","1ae4ddb8":"code","08462d2c":"code","6f1b2ffe":"code","28b12f2e":"code","eaef35cd":"code","edc5e343":"code","f041fd4c":"code","9f5e76d3":"code","1ac95c34":"code","b42fde74":"code","62ea6e70":"code","0d130b7d":"code","a4354a7c":"code","67e2b15f":"code","2385ba1f":"code","8cc61546":"code","a1d59bf6":"code","0b0dec19":"code","baca989c":"code","171dea26":"code","902fb608":"code","d6c50ece":"code","39800591":"code","c3cd7641":"code","563e768c":"code","36413d45":"code","c2ec85a2":"code","33159593":"code","ec3c5077":"code","2b7f7bc4":"markdown","21d6279d":"markdown","9e1a7a80":"markdown","32749f27":"markdown","4c7d77d4":"markdown","27b8fe24":"markdown","87e13549":"markdown"},"source":{"83bae003":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV, Lasso, lars_path\nfrom sklearn.naive_bayes import MultinomialNB,GaussianNB,BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, precision_recall_curve,f1_score, roc_auc_score, roc_curve, log_loss,classification_report\n\nfrom ipywidgets import interactive\n\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7f4cc6e2":"train = pd.read_csv('..\/input\/airline-passenger-satisfaction\/train.csv')\ntest = pd.read_csv('..\/input\/airline-passenger-satisfaction\/test.csv')\ntrain.head(5)","d4f644d3":"train.info()","6aef8a50":"train.shape","a435f09f":"test.head(5)","25a4c503":"train['Customer Type']=train['Customer Type'].map({'Loyal Customer':'Returning Customer','disloyal Customer':'First-time Customer'})\ntrain = train.dropna(axis=0) ","1ae4ddb8":"train['Departure Delay in Minutes'] = train['Departure Delay in Minutes'].astype('float')\ntrain = train.rename(columns={'Leg room service':'Leg room'})","08462d2c":"train['satisfaction'] = train['satisfaction'].map({'satisfied':1,'neutral or dissatisfied':0})\ntrain = train.reset_index()\ntrain = train.drop('index',axis=1)\ntrain['Total Delay'] = train['Departure Delay in Minutes'] + train['Arrival Delay in Minutes']","6f1b2ffe":"test['Customer Type']=test['Customer Type'].map({'Loyal Customer':'Returning Customer','disloyal Customer':'First-time Customer'})\ntest = test.dropna(axis=0) \n\ntest['Departure Delay in Minutes'] = test['Departure Delay in Minutes'].astype('float')\ntest = test.rename(columns={'Leg room service':'Leg room'})\n\ntest['satisfaction'] = test['satisfaction'].map({'satisfied':1,'neutral or dissatisfied':0})\ntest = test.reset_index()\ntest = test.drop('index',axis=1)\ntest['Total Delay'] = test['Departure Delay in Minutes'] + test['Arrival Delay in Minutes']","28b12f2e":"train['satisfaction'].value_counts(normalize=True)","eaef35cd":"sns.set(style='white',font_scale=1.1)\nfig=plt.figure(figsize=[5,6])\nax = sns.countplot(data=train,x='satisfaction',palette='coolwarm')\nax.set_xticklabels(['Neutral\/Dissatisfied','Satisfied'])\nfor p in ax.patches:\n        ax.annotate(str(p.get_height())+' ('+str((p.get_height()\/len(train)*100).round(1))+'%)', (p.get_x()+0.1, p.get_height()+400))\n\nplt.xlabel('Satisfaction',weight='bold',fontsize='15')   \nplt.ylabel('No. of Passengers',weight='bold',fontsize='15')   \nsns.despine()","edc5e343":"sns.set(style='darkgrid',font_scale=1.1)\nfig=plt.figure(figsize=[8,6])\nax = sns.countplot(data=train,x='satisfaction',hue='Class',palette='Blues')\nax.set_xticklabels(['Neutral\/Dissatisfied','Satisfied'])\nfor p in ax.patches:\n        ax.annotate(p.get_height(), (p.get_x()+0.08, p.get_height()+200))\nplt.xlabel('Satisfaction',weight='bold',fontsize='15')   \nplt.ylabel('No. of Passengers',weight='bold',fontsize='15')   \nsns.despine()","f041fd4c":"df1 = pd.get_dummies(train,columns=['Gender','Customer Type','Type of Travel','Class'],drop_first=True)\ndf1.head(5)","9f5e76d3":"sns.set(style='darkgrid',font_scale=1.5)\nfig = plt.figure(figsize=[30,20])\nfor i in range(20):\n    fig.add_subplot(4, 5, i+1)\n    sns.kdeplot(data=df1,x=df1.columns[i+1],hue='satisfaction')\n    if i == 16:\n        plt.xlim([-50,300])\n    sns.despine()","1ac95c34":"df1 = df1.drop('Gender_Male',axis=1)","b42fde74":"sns.set(style='darkgrid',font_scale=1.5)\nfig = plt.figure(figsize=[30,20])\nfor i in range(20):\n    fig.add_subplot(4, 5, i+1)\n    sns.kdeplot(data=df1,x=df1.columns[i+1],hue='satisfaction')\n    if i == 16:\n        plt.xlim([-50,300])\n    sns.despine()","62ea6e70":"train = train.drop('Unnamed: 0', axis=1)\ntrain = train.drop('id', axis=1)\n\ntest = test.drop('Unnamed: 0', axis=1)\ntest = test.drop('id', axis=1)","0d130b7d":"train.columns = [c.replace(' ', '_') for c in train.columns]\ntest.columns = [c.replace(' ', '_') for c in test.columns]","a4354a7c":"corr_matrix=train.corr()\nsns.set(style='darkgrid',font_scale=2.2)\nfig = plt.figure(figsize=[35,30])\nmask = np.triu(np.ones_like(corr_matrix, dtype=bool))\ncmap = sns.diverging_palette(150, 0, as_cmap=True)\nsns.heatmap(corr_matrix,cmap='seismic',linewidth=3,linecolor='white',vmax = 1, vmin=-1,mask=mask, annot=True,fmt='0.2f')\nplt.title('Correlation Heatmap', weight='bold',fontsize=50)","67e2b15f":"from sklearn.preprocessing import LabelEncoder\nlencoders = {}\nfor col in train.select_dtypes(include=['object']).columns:\n    lencoders[col] = LabelEncoder()\n    train[col] = lencoders[col].fit_transform(train[col])","2385ba1f":"lencoders_t = {}\nfor col in test.select_dtypes(include=['object']).columns:\n    lencoders_t[col] = LabelEncoder()\n    test[col] = lencoders_t[col].fit_transform(test[col])","8cc61546":"features = ['Type_of_Travel','Inflight_wifi_service','Online_boarding','Seat_comfort','Flight_Distance',\n            'Inflight_entertainment','On-board_service','Cleanliness','Checkin_service', \n            'Inflight_service', 'Baggage_handling']\ntarget = ['satisfaction']\n\nX_train = train[features]\ny_train = train[target].to_numpy()\nX_test = test[features]\ny_test = test[target].to_numpy()\n\n# Normalize Features\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","a1d59bf6":"import time\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, roc_auc_score, classification_report, plot_confusion_matrix, plot_roc_curve\ndef run_model(model, X_train, y_train, X_test, y_test, verbose=True):\n    t0=time.time()\n    if verbose == False:\n        model.fit(X_train,y_train.ravel(), verbose=0)\n    else:\n        model.fit(X_train,y_train.ravel())\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    roc_auc = roc_auc_score(y_test, y_pred) \n    time_taken = time.time()-t0\n    print(\"Accuracy = {}\".format(accuracy))\n    print(\"ROC Area under Curve = {}\".format(roc_auc))\n    print(\"Time taken = {}\".format(time_taken))\n    print(classification_report(y_test,y_pred,digits=5))\n    plot_confusion_matrix(model, X_test, y_test,cmap=plt.cm.pink, normalize = 'all')\n    plot_roc_curve(model, X_test, y_test)                     \n    \n    return model, accuracy, roc_auc, time_taken\n","0b0dec19":"params_nb = {}\n\nmodel_nb = GaussianNB(**params_nb)\nmodel_nb, accuracy_nb, roc_auc_nb, tt_nb = run_model(model_nb, X_train, y_train, X_test, y_test)","baca989c":"rf = RandomForestClassifier(max_depth=17,random_state=42)\nrf.fit(X_train,y_train)\nprint(\"Random Forest score: {:.4f}\".format(rf.score(X_train,y_train)))","171dea26":"def make_confusion_matrix2(model, threshold=0.7):\n    # Predict class 1 if probability of being in class 1 is greater than threshold\n    # (model.predict(X_test) does this automatically with a threshold of 0.5)\n    y_predict = (model.predict_proba(X_test)[:, 1] >= threshold)\n    satisfaction_confusion = confusion_matrix(y_test, y_predict)\n    plt.figure(dpi=120)\n    ax = sns.heatmap(satisfaction_confusion, cmap=plt.cm.Blues, annot=True, square=True, fmt='d',\n           xticklabels=['Neutral\/Dissatisfied', 'Satisfied'],\n           yticklabels=['Neutral\/Dissatisfied', 'Satisfied']);   \n    plt.xlabel('Prediction',weight='bold',fontsize=12)\n    plt.ylabel('Actual',weight='bold',fontsize=12)\n    plt.title('Confusion Matrix',weight='bold',fontsize=15)\n\nsns.set(style='white',font_scale=1)\nmake_confusion_matrix2(rf)","902fb608":"y_predict = rf.predict_proba(X_test)[:, 1]>=0.7\nprecision_score(y_test, y_predict)","d6c50ece":"recall_score(y_test, y_predict)","39800591":"f1_score(y_test, y_predict)","c3cd7641":"roc_auc_score(y_test, rf.predict_proba(X_test)[:, 1])","563e768c":"fpr, tpr, thresholds = roc_curve(y_test, rf.predict_proba(X_test)[:,1])","36413d45":"sns.set(style='darkgrid',font_scale=1.2)\nfig = plt.figure(figsize=[10,7])\nplt.plot(fpr, tpr,lw=2,label='RandomForest (AUC={:.3f})'.format(roc_auc_score(y_test, rf.predict_proba(X_test)[:,1])))\nplt.plot([0,1],[0,1],c='violet',ls='--')\nplt.xlim([-0.05,1.05])\nplt.ylim([-0.05,1.05])\nplt.legend(loc=\"lower right\",fontsize=15)\n\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve',weight='bold',fontsize=15);\nsns.despine()","c2ec85a2":"rf.feature_importances_","33159593":"df_impt = pd.DataFrame({'features':features,'importance':rf.feature_importances_})\ndf_impt = df_impt.sort_values(by='importance',ascending=True)\n","ec3c5077":"sns.set(style='darkgrid',font_scale=1.2)\nfig = plt.figure(figsize=[10,7])\nax = plt.barh(df_impt['features'],df_impt['importance'])\nplt.title('Random Forest - Feature Importance',weight='bold',fontsize=16)","2b7f7bc4":"***Some basic plot to visualize and understand  the distribution of different catagories across the dataset***","21d6279d":"**Satisfaction which is our target column we manually encoded the level to binary format for better statistical representation.\n1 for satisfied and 0 for dissatisfied**","9e1a7a80":"***Correlation plot which is the most important plot to understand correlation between each catagories***","32749f27":"First we will apply naive bias classifier and then random forest classiffier.\nThis is a classification problem and we will throughly analysis every metric for machine learning model","4c7d77d4":"***Our Data has some categorical values for training the machine learning model we need to encode the values to numerical format***","27b8fe24":"**In this notebook i tried to figure out which factors has most impact on a passenger satisfaction.Preprocessing the data, building machine learning models and train the model on different measures really gave some insight about the customer satisfaction to any airline service**","87e13549":"**After loading the data i've tried to do some preprocessing**"}}