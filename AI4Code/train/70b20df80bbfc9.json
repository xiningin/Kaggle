{"cell_type":{"37731a66":"code","d1f1e522":"code","bdc9e65e":"code","f6e075df":"code","33251f12":"code","2858dcd0":"code","5e6645e9":"code","0b152a4d":"code","64aa9aef":"code","44a81112":"code","af5f18f2":"code","42a29540":"code","8241adf4":"code","68bf8cdd":"markdown","84d099fb":"markdown","402dd9bd":"markdown","f768b3a3":"markdown","c542f705":"markdown","b970b538":"markdown","9e241978":"markdown"},"source":{"37731a66":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d1f1e522":"dataset=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","bdc9e65e":"dataset.head()","f6e075df":"dataset.shape","33251f12":"dataset.info()","2858dcd0":"per=dataset['Class'][dataset['Class']==1].count()\/(dataset['Class'][dataset['Class']==0].count())\nper","5e6645e9":"Classes=['Not Fraud','Fraud']\nfraud_fraudnot = pd.value_counts(dataset['Class'], sort = True)\nfraud_fraudnot.plot(kind = 'bar', rot=0)\nplt.title(\"Fraud not Fraud Distribution\")\nplt.xticks(range(2), Classes)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\");","0b152a4d":"X=dataset.loc[:,:'Amount']\nY=dataset.loc[:,'Class']\nX.shape,Y.shape","64aa9aef":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)","44a81112":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report,accuracy_score\ngnb = GaussianNB()\ny_pred = gnb.fit(X_train, y_train).predict(X_test)\n\nn_errors = (y_pred != y_test).sum()\n\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y_test,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y_test,y_pred))","af5f18f2":"from sklearn.linear_model import LogisticRegression\nlogregg=LogisticRegression()\ny_pred=logregg.fit(X_train,y_train).predict(X_test)\n\nn_errors = (y_pred != y_test).sum()\n\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y_test,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y_test,y_pred))","42a29540":"from sklearn import tree\nclf = tree.DecisionTreeClassifier()\ny_pred=clf.fit(X_train,y_train).predict(X_test)\n\nn_errors = (y_pred != y_test).sum()\n\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y_test,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y_test,y_pred))","8241adf4":"from sklearn.ensemble import AdaBoostClassifier\nclf = AdaBoostClassifier(n_estimators=100, random_state=0)\ny_pred=clf.fit(X_train,y_train).predict(X_test)\n\nn_errors = (y_pred != y_test).sum()\n\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y_test,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y_test,y_pred))","68bf8cdd":"# Refer\nPls refer this blog,I have discussed this problem in length here in my blog.","84d099fb":"# Naive Bayes","402dd9bd":"# Importing Dataset","f768b3a3":"# Importing Libraries","c542f705":"# J48","b970b538":"# Exploring Dataset","9e241978":"# Adaboost"}}