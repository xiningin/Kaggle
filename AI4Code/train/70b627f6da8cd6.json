{"cell_type":{"f5da49f5":"code","50c8d613":"code","74bbc795":"code","89758a83":"code","a940d307":"code","ea608a30":"code","587ce7d2":"code","dc0be019":"code","8b827700":"code","eda13528":"code","dd84650b":"code","8ddd93f6":"code","5de55bbc":"code","0ce3a0af":"code","ea0b4977":"markdown","75068d7c":"markdown","a20e7364":"markdown","8ed4a5f5":"markdown","3613a7fc":"markdown","60eda208":"markdown","6bc7c2b0":"markdown","16e91309":"markdown","aafb6235":"markdown","f4cb2328":"markdown","7b84e43a":"markdown","df7777db":"markdown"},"source":{"f5da49f5":"import h2o\nh2o.init()","50c8d613":"train_data = h2o.import_file('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest_data  = h2o.import_file('..\/input\/tabular-playground-series-nov-2021\/test.csv')","74bbc795":"print(train_data.shape)\nprint(test_data.shape)","89758a83":"train_data","a940d307":"train_data[\"target\"] = train_data[\"target\"].asfactor()","ea608a30":"X = train_data.columns\ny = \"target\"\nX.remove(y)","587ce7d2":"split_data = train_data.split_frame( ratios=[.08, .02], seed = 1)\ntrain = split_data[0]\nvalid = split_data[1]","dc0be019":"from h2o.estimators.gbm   import H2OGradientBoostingEstimator\nfrom h2o.grid.grid_search import H2OGridSearch","8b827700":"# GBM hyperparameters to try:\ngbm_hyperparameters = {'learn_rate': [0.05, 0.07, 0.09],\n                       'max_depth': [5, 6, 7],\n                       'sample_rate': [0.8, 1.0],\n                       'col_sample_rate': [0.2, 0.5, 1.0]}\n\n# Train and validate a cartesian grid of GBMs\ngbm_grid = H2OGridSearch(model        = H2OGradientBoostingEstimator(),\n                         grid_id      = 'gbm_grid',\n                         hyper_params = gbm_hyperparameters)\n\ngbm_grid.train(x=X, y=y,\n                training_frame=train,\n                validation_frame=valid,\n                ntrees=250,\n                seed=1)\n\n# Sort the grid results by validation AUC\ngbm_gridperf = gbm_grid.get_grid(sort_by='auc', decreasing=True)\n\n# take a look: click on \"Show hidden code\" to view\ngbm_gridperf","eda13528":"# Select the top GBM model, as chosen by the validation AUC\nbest_model = gbm_gridperf.models[0]\nbest_model.summary()","dd84650b":"predictions = best_model.predict(test_data)\n# take a quick look\npredictions","8ddd93f6":"target = predictions[\"p1\"].set_names(['target'])\ntest_with_predictions = test_data.cbind(target)","5de55bbc":"submission = test_with_predictions[:,[\"id\",\"target\"]]\nh2o.export_file(submission, path = \"submission.csv\", force = True)","0ce3a0af":"h2o.cluster().shutdown()","ea0b4977":"[Split the data into the train and validation sets](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/data-munging\/splitting-datasets.html). In this notebook, so as not to use up too much CPU, we shall only use 8% of the `train_data` for actual training, and a further 2% of the data for validation.","75068d7c":"we shall now [combine](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/data-munging\/combining-columns.html) our predictions with the `test_data`","a20e7364":"# Create a `submission.csv` for scoring by kaggle","8ed4a5f5":"take a quick look","3613a7fc":"We shall be using the [H2O Gradient Boosting Machine](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/data-science\/gbm.html) in conjunction with a [hyperparameter grid search](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/grid-search.html):","60eda208":"let us also create a list of the column names for later use","6bc7c2b0":"![](https:\/\/raw.githubusercontent.com\/Carl-McBride-Ellis\/images_for_kaggle\/main\/H2O_ai_logo.png)\n# H2O.ai Gradient boosting classifier\nIn this notebook we shall be using the gradient boosting classifier ([`H2OGradientBoostingEstimator`](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/data-science\/gbm.html)) from [H2O.ai](https:\/\/www.h2o.ai\/)\n\nTo learn more about using H2O.ai see:\n* [H2O.ai Overview](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/index.html)\n* [H2O.ai Tutorials](https:\/\/docs.h2o.ai\/h2o-tutorials\/latest-stable\/index.html)\n\nFirstly, import `h2o` and start a local H2O server","16e91309":"Convert the `target` column in the `train_data` frame to be categorical, indicating to the estimator that this is a classification problem. As for any other categorical features, if they exist H2O automatically takes care of them.","aafb6235":"ok, so we have 600k rows and 102 columns in the training data, and 540k rows in the test data.","f4cb2328":"# Read in the data\nRead in the data as a [H2OFrame](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-py\/docs\/frame.html), the primary data store for H2O. For examples of munging with H2O see the [Data Manipulation](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/data-munging.html) page.\n","7b84e43a":"# Produce our predictions using the best model","df7777db":"We have finished, and shall now shut down our H2O instance"}}