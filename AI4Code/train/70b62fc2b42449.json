{"cell_type":{"ac4148e6":"code","00b1a637":"code","5fa9463d":"code","74da7a21":"code","8e252202":"code","9fab0f44":"code","afaa778d":"code","6300a9de":"code","26d97f0f":"code","9b337a44":"markdown"},"source":{"ac4148e6":"import sys\n!cp ..\/input\/rapids\/rapids.0.12.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","00b1a637":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy.stats import mode\nfrom sklearn.metrics import f1_score, accuracy_score\nfrom cuml.neighbors import KNeighborsClassifier, NearestNeighbors\n# import cuml; cuml.__version__\n\ndef batching(df, batch_size):\n    df['group'] = df.groupby(df.index\/\/batch_size, sort=False)['signal'].agg(['ngroup']).values\n    df['group'] = df['group'].astype(np.uint16)\n    return df\n\n\n\ndef read_data():\n    train = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\n    test  = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv', dtype={'time': np.float32, 'signal': np.float32})\n    return train, test\n\ndef lag_data(df):\n    df['fut_3']=df.groupby('group')['signal'].shift(-3)*0.25\n    df['fut_3']=df.groupby('group')['signal'].shift(-2)*0.5\n    df['fut_1']=df.groupby('group')['signal'].shift(-1)*1.0\n    df['current']=df['signal']*4.0\n    df['lag_1']=df.groupby('group')['signal'].shift(1)*1.0\n    df['lag_2']=df.groupby('group')['signal'].shift(2)*0.5\n    df['lag_3']=df.groupby('group')['signal'].shift(3)*0.25\n    return df\n\nbatch = 1000\n\n\ntrain, test = read_data()\ntrain=batching(train,batch)\ntest=batching(test,batch)\ntrain=lag_data(train)\ntest=lag_data(test)\n\nall_groups=train.group.unique()\nnp.random.shuffle(all_groups)\ngroup_num=len(all_groups)\n\nfeatures=['fut_3', 'fut_1', 'current','lag_1', 'lag_2', 'lag_3']\nprint('done')","5fa9463d":"%%time\n\nKNN = 100\n\nfor g in range(5):\n    print('Infering group %i'%g)\n    \n    # TRAIN DATA\n    data = train[~train.group.isin(all_groups[int(group_num\/5*g):int(group_num\/5*(g+1))])]\n    X_train = data[features].values\n    y_train = data.open_channels.values\n\n    # TRAIN PRE\n    data = train[train.group.isin(all_groups[int(group_num\/5*g):int(group_num\/5*(g+1))])]\n    X_train_pre_all=data.values\n    X_train_pre = data[features].values\n    y_train_pre = data.open_channels.values\n    \n    # TEST\n    data = test\n    X_test_all=data.values\n    X_test = data[features].values\n    \n    print('data all set')\n    model = NearestNeighbors(n_neighbors=KNN)\n    model.fit(X_train)\n    print('model fitted')\n    \n    distances, indices=model.kneighbors(X_train_pre)\n    print('xtrain predicted')\n\n    temp=y_train[indices.astype(int)]\n    for i in range(11):\n        temp_re=np.array(distances*[temp==i][0]).mean(axis=1)\n        temp_re=temp_re.reshape(temp_re.shape[0],1)\n        if i!=0:\n            train_pre_temp=np.hstack((train_pre_temp,temp_re))\n        else:\n            train_pre_temp=np.hstack((X_train_pre_all,temp_re))\n    train_pre_temp=np.hstack((train_pre_temp,y_train_pre.reshape(y_train_pre.shape[0],1)))\n    \n    try:train_pre=np.vstack((train_pre,train_pre_temp))\n    except:train_pre=train_pre_temp\n    print('xtrain stacked')\n    \n    distances, indices=model.kneighbors(X_test)\n    print('xtest predicted')\n    temp=y_train[indices.astype(int)]\n    for i in range(11):\n        temp_re=np.array(distances*[temp==i][0]).mean(axis=1)\n        temp_re=temp_re.reshape(temp_re.shape[0],1)\n        if i!=0:\n            test_pre_temp=np.hstack((test_pre_temp,temp_re))\n        else:\n            test_pre_temp=np.hstack((X_test_all,temp_re))\n    \n    try:test_pre=np.vstack((test_pre,test_pre_temp))\n    except:test_pre=test_pre_temp\n    print('xtest stacked')\n    \n    ","74da7a21":"# temp=y_train[indices.astype(int)]\n# for i in range(11):\n#     temp_re=np.array(distances*[temp==i][0]).mean(axis=1)\n#     temp_re=temp_re.reshape(temp_re.shape[0],1)\n#     if i!=0:\n#         train_pre_temp=np.hstack((train_pre_temp,temp_re))\n#     else:\n#         train_pre_temp=np.hstack((X_train_pre_all,temp_re))\n# train_pre_temp=np.hstack((train_pre_temp,y_train_pre.reshape(y_train_pre.shape[0],1)))\n\n# try:train_pre=np.vstack((train_pre,train_pre_temp))\n# except:train_pre=train_pre_temp\n# print('xtrain stacked')\n\n# distances, indices=model.kneighbors(X_test)\n# print('xtest predicted')\n# temp=y_train[indices.astype(int)]\n# for i in range(11):\n#     temp_re=np.array(distances*[temp==i][0]).mean(axis=1)\n#     temp_re=temp_re.reshape(temp_re.shape[0],1)\n#     if i!=0:\n#         test_pre_temp=np.hstack((test_pre_temp,temp_re))\n#     else:\n#         test_pre_temp=np.hstack((X_test,temp_re))\n\n# try:test_pre=np.vstack((test_pre,test_pre_temp))\n# except:test_pre=test_pre_temp\n# print('xtest stacked')\n\n\n","8e252202":"# temp=['ave_distance_%s'%x for x in range(11)]\n# col=['time', 'signal', 'open_channels', 'group', 'fut_3', 'fut_1', 'current','lag_1', 'lag_2', 'lag_3']+temp+['open_channels']\n# col","9fab0f44":"# temp=y_train[indices.astype(int)]\n# for i in range(11):\n#     temp_re=np.array(distances*[temp==i][0]).mean(axis=1)\n#     temp_re=temp_re.reshape(temp_re.shape[0],1)\n#     if i!=0:\n#         train_pre_temp=np.hstack((train_pre_temp,temp_re))\n#     else:\n#         train_pre_temp=np.hstack((X_train_pre_all,temp_re))\n# train_pre_temp=np.hstack((train_pre_temp,y_train_pre.reshape(y_train_pre.shape[0],1)))\n\n# try:train_pre=np.vstack((train_pre,train_pre_temp))\n# except:train_pre=train_pre_temp\n# print('xtrain stacked')","afaa778d":"part_len=int(len(test_pre)\/5)\ntest_pre_temp=test_pre[:part_len]\nfor i in range(1,5):\n    test_pre_temp+=test_pre[part_len*i:part_len*(i+1)]\ntest_pre_temp\/=5","6300a9de":"np.save('knn_y_prob_train.npy',train_pre)\nnp.save('knn_y_prob_test.npy',test_pre_temp)","26d97f0f":"# sub = pd.read_csv('..\/input\/liverpool-ion-switching\/sample_submission.csv')\n# sub.open_channels = test_predtest_pred\n# sub.to_csv('submission.csv',index=False,float_format='%.4f')\n\n# res=200\n# plt.figure(figsize=(20,5))\n# plt.plot(sub.time[::res],sub.open_channels[::res])\n# plt.show()","9b337a44":"# RAPIDS KNN categorial average predicted Distance, can it be used as features?\nReference: https:\/\/www.kaggle.com\/cdeotte\/rapids-knn-30-seconds-0-938"}}