{"cell_type":{"fa1bcb6a":"code","50a46fa8":"code","43eb951e":"code","0562dc3e":"code","88b34b21":"code","c712b339":"code","304f1278":"code","6f109d05":"code","195e226a":"code","9afda02a":"code","3a378dd7":"code","6da88263":"code","f6a467f9":"code","3c0518a2":"code","20768d8b":"code","11ceab89":"code","74fd854a":"code","c041d7f7":"code","4e4f5310":"code","acec4189":"code","e94a387c":"code","459b3b30":"code","1ef854a7":"code","ea8f5f3c":"code","182bc87b":"code","db1c9ea1":"code","373fdf97":"code","09011bc0":"code","514e0fc6":"code","0dd0078f":"code","e333b65f":"code","c547618b":"code","378027ed":"code","7ef43f8c":"code","fbc3a336":"code","d25ca6c5":"code","0ce06115":"code","838f7ad9":"code","2588198b":"code","b364b1b6":"code","02d8e367":"code","cdafe5e3":"code","aeea701d":"code","0e09c784":"code","a5d810ab":"code","430726b7":"code","9b6ce756":"code","856c69c0":"code","aa243386":"code","c390b1ea":"code","a30d8793":"code","9ece4737":"code","d44e05c0":"code","2e3be965":"code","8615a41f":"code","bc924f90":"code","295c6e7d":"code","554c5d17":"code","bb4d4426":"code","685cfd9e":"code","bc95ecb1":"code","df76935b":"code","d069d119":"code","d4599fca":"code","ab8b4153":"code","2d3b6013":"code","3964d90f":"code","7faac972":"code","76752603":"code","44a0b909":"code","84951472":"code","e4e6e089":"code","3664f8ef":"code","9651a0a8":"code","10472495":"code","9ce5fa45":"code","43d2d502":"code","59448817":"code","e27a4471":"code","a54bb39f":"code","861b4ce6":"code","14f5f66a":"code","a32bfb74":"code","f904992d":"code","dc44df97":"markdown","7cf4a0e6":"markdown","122a7f7d":"markdown","3fe1e164":"markdown","114b2008":"markdown","9290d554":"markdown","426d689e":"markdown","bfc6e0d0":"markdown","263c1d71":"markdown","f3c4ccb1":"markdown","f63772d6":"markdown","7220eb4c":"markdown","933d10ea":"markdown","f7d06bcc":"markdown","5aa9631c":"markdown","7dec85d1":"markdown","c347cff5":"markdown","ffcc4caf":"markdown","3b897fe1":"markdown","0e8ab2aa":"markdown","1dca1d79":"markdown","95445c35":"markdown","3b70c137":"markdown","2fae1b71":"markdown","af902951":"markdown","22a411c8":"markdown","a2334120":"markdown","1769e367":"markdown","9c991d3b":"markdown","3e3b9044":"markdown","5c9e3b95":"markdown","ce4daf4d":"markdown","c605367b":"markdown","a2620b38":"markdown","650d305c":"markdown","ad26794d":"markdown","64c04ced":"markdown"},"source":{"fa1bcb6a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime as dt\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\n\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nfrom math import isnan","50a46fa8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","43eb951e":"df = pd.read_csv(r\"\/kaggle\/input\/cricket\/Cricket.csv\",encoding='latin1')\ndf.head()","0562dc3e":"df.shape","88b34b21":"df_dub = df.copy()\n# Checking for duplicates and dropping the entire duplicate row if any\ndf_dub.drop_duplicates(subset=None, inplace=True)","c712b339":"df_dub.shape","304f1278":"df.shape","6f109d05":"df.info()","195e226a":"df.describe()","9afda02a":"(df.isnull().sum() * 100 \/ len(df)).value_counts(ascending=False)","3a378dd7":"df.isnull().sum().value_counts(ascending=False)","6da88263":"(df.isnull().sum(axis=1) * 100 \/ len(df)).value_counts(ascending=False)","f6a467f9":"df.isnull().sum(axis=1).value_counts(ascending=False)","3c0518a2":"df.head()","20768d8b":"df[['Strt','End']] = df.Span.str.split(\"-\",expand=True) ","11ceab89":"df[['Strt','End']]=df[['Strt','End']].astype(int)\ndf['Exp']=df['End']-df['Strt']\ndf=df.drop(['Strt','End','Span'], axis = 1) \ndf.head()","74fd854a":"#Match Played\nplt.figure(figsize = (30,5))\nmat = df[['Player','Mat']].sort_values('Mat', ascending = False)\nax = sns.barplot(x='Player', y='Mat', data= mat)\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","c041d7f7":"plt.figure(figsize = (10,5))\nmat_top10 = df[['Player','Mat']].sort_values('Mat', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Mat', data= mat_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Match Played')\nplt.xticks(rotation=90)\nplt.show()","4e4f5310":"#Inns\nplt.figure(figsize = (30,5))\ninns = df[['Player','Inns']].sort_values('Inns', ascending = False)\nax = sns.barplot(x='Player', y='Inns', data= inns)\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","acec4189":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','Inns']].sort_values('Inns', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Inns', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Innings Played')\nplt.xticks(rotation=90)\nplt.show()","e94a387c":"#NO\nplt.figure(figsize = (30,5))\nno = df[['Player','NO']].sort_values('NO', ascending = False)\nax = sns.barplot(x='Player', y='NO', data= no)\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","459b3b30":"plt.figure(figsize = (10,5))\ninns_top10 = df[['Player','NO']].sort_values('NO', ascending = False).head(10)\nax = sns.barplot(x='Player', y='NO', data= inns_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Not Out')\nplt.xticks(rotation=90)\nplt.show()","1ef854a7":"#Runs\nplt.figure(figsize = (30,5))\nrun = df[['Player','Runs']].sort_values('Runs', ascending = False)\nax = sns.barplot(x='Player', y='Runs', data= run)\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","ea8f5f3c":"plt.figure(figsize = (10,5))\nruns_top10 = df[['Player','Runs']].sort_values('Runs', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Runs', data= runs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Runs Scored')\nplt.xticks(rotation=90)\nplt.show()","182bc87b":"#HS\ndf.HS=df.HS.str.extract('(\\d+)')\ndf.HS=df.HS.astype(int)\nplt.figure(figsize = (30,5))\nhs = df[['Player','HS']].sort_values('HS', ascending = False)\nax = sns.barplot(x='Player', y='HS', data= hs)\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","db1c9ea1":"plt.figure(figsize = (10,5))\nhs_top10 = df[['Player','HS']].sort_values('HS', ascending = False).head(10)\nax = sns.barplot(x='Player', y='HS', data= hs_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Highest Score')\nplt.xticks(rotation=90)\nplt.show()","373fdf97":"#Ave\nplt.figure(figsize = (30,5))\nave = df[['Player','Ave']].sort_values('Ave', ascending = False)\nax = sns.barplot(x='Player', y='Ave', data= ave)\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","09011bc0":"plt.figure(figsize = (10,5))\navg_top10 = df[['Player','Ave']].sort_values('Ave', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Ave', data= avg_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Averages')\nplt.xticks(rotation=90)\nplt.show()","514e0fc6":"#BF\nplt.figure(figsize = (30,5))\nbf = df[['Player','BF']].sort_values('BF', ascending = False)\nax = sns.barplot(x='Player', y='BF', data= bf)\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","0dd0078f":"plt.figure(figsize = (10,5))\nbf_top10 = df[['Player','BF']].sort_values('BF', ascending = False).head(10)\nax = sns.barplot(x='Player', y='BF', data= bf_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Best Form')\nplt.xticks(rotation=90)\nplt.show()","e333b65f":"#SR \nplt.figure(figsize = (30,5))\nsr = df[['Player','SR']].sort_values('SR', ascending = False)\nax = sns.barplot(x='Player', y='SR', data= sr)\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","c547618b":"plt.figure(figsize = (10,5))\nsr_top10 = df[['Player','SR']].sort_values('SR', ascending = False).head(10)\nax = sns.barplot(x='Player', y='SR', data= sr_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'SR')\nplt.xticks(rotation=90)\nplt.show()","378027ed":"#100\nplt.figure(figsize = (30,5))\nr100 = df[['Player','100']].sort_values('100', ascending = False)\nax = sns.barplot(x='Player', y='100', data= r100)\nax.set(xlabel = '', ylabel= \"100's Scored\" )\nplt.xticks(rotation=90)\nplt.show()","7ef43f8c":"plt.figure(figsize = (10,5))\nr100_top10 = df[['Player','100']].sort_values('100', ascending = False).head(10)\nax = sns.barplot(x='Player', y='100', data= r100_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"100's Scored\")\nplt.xticks(rotation=90)\nplt.show()","fbc3a336":"#50\nplt.figure(figsize = (30,5))\nr50 = df[['Player','50']].sort_values('50', ascending = False)\nax = sns.barplot(x='Player', y='50', data= r50)\nax.set(xlabel = '', ylabel= \"50s Scored\")\nplt.xticks(rotation=90)\nplt.show()","d25ca6c5":"plt.figure(figsize = (10,5))\nr50_top10 = df[['Player','50']].sort_values('50', ascending = False).head(10)\nax = sns.barplot(x='Player', y='50', data= r50_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"50's Scored\")\nplt.xticks(rotation=90)\nplt.show()","0ce06115":"#0\nplt.figure(figsize = (30,5))\nr0 = df[['Player','0']].sort_values('0', ascending = False)\nax = sns.barplot(x='Player', y='0', data= r0)\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","838f7ad9":"plt.figure(figsize = (10,5))\nr0_top10 = df[['Player','0']].sort_values('0', ascending = False).head(10)\nax = sns.barplot(x='Player', y='0', data= r0_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= \"Os Scored\")\nplt.xticks(rotation=90)\nplt.show()","2588198b":"#Exp\nplt.figure(figsize = (30,5))\nexp = df[['Player','Exp']].sort_values('Exp', ascending = False)\nax = sns.barplot(x='Player', y='Exp', data= exp)\nax.set(xlabel = '', ylabel= 'Experience')\nplt.xticks(rotation=90)\nplt.show()","b364b1b6":"plt.figure(figsize = (10,5))\nexp_top10 = df[['Player','Exp']].sort_values('Exp', ascending = False).head(10)\nax = sns.barplot(x='Player', y='Exp', data= exp_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Exprience')\nplt.xticks(rotation=90)\nplt.show()","02d8e367":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (10, 10))\nsns.heatmap(df.corr(), annot = True, cmap=\"rainbow\")\nplt.savefig('Correlation')\nplt.show()","cdafe5e3":"sns.pairplot(df,corner=True,diag_kind=\"kde\")\nplt.show()","aeea701d":"df.describe()","0e09c784":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","a5d810ab":"plt.figure(figsize = (30,10))\nfeatures=[ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100','50', '0', 'Exp']\nfor i in enumerate(features):\n    plt.subplot(3,4,i[0]+1)\n    sns.distplot(df[i[1]])","430726b7":"Q3 = df.Mat.quantile(0.99)\nQ1 = df.Mat.quantile(0.01)\ndf['Mat'][df['Mat']<=Q1]=Q1\ndf['Mat'][df['Mat']>=Q3]=Q3","9b6ce756":"Q3 = df.Inns.quantile(0.99)\nQ1 = df.Inns.quantile(0.01)\ndf['Inns'][df['Inns']<=Q1]=Q1\ndf['Inns'][df['Inns']>=Q3]=Q3","856c69c0":"Q3 = df.NO.quantile(0.99)\nQ1 = df.NO.quantile(0.01)\ndf['NO'][df['NO']<=Q1]=Q1\ndf['NO'][df['NO']>=Q3]=Q3","aa243386":"Q3 = df.Runs.quantile(0.99)\nQ1 = df.Runs.quantile(0.01)\ndf['Runs'][df['Runs']<=Q1]=Q1\ndf['Runs'][df['Runs']>=Q3]=Q3","c390b1ea":"Q3 = df.HS.quantile(0.99)\nQ1 = df.HS.quantile(0.01)\ndf['HS'][df['HS']<=Q1]=Q1\ndf['HS'][df['HS']>=Q3]=Q3","a30d8793":"Q3 = df.Ave.quantile(0.99)\nQ1 = df.Ave.quantile(0.01)\ndf['Ave'][df['Ave']<=Q1]=Q1\ndf['Ave'][df['Ave']>=Q3]=Q3","9ece4737":"Q3 = df.BF.quantile(0.99)\nQ1 = df.BF.quantile(0.01)\ndf['BF'][df['BF']<=Q1]=Q1\ndf['BF'][df['BF']>=Q3]=Q3","d44e05c0":"Q3 = df.SR.quantile(0.99)\nQ1 = df.SR.quantile(0.01)\ndf['SR'][df['SR']<=Q1]=Q1\ndf['SR'][df['SR']>=Q3]=Q3","2e3be965":"Q3 = df.Exp.quantile(0.99)\nQ1 = df.Exp.quantile(0.01)\ndf['Exp'][df['Exp']<=Q1]=Q1\ndf['Exp'][df['Exp']>=Q3]=Q3","8615a41f":"Q3 = df['100'].quantile(0.99)\nQ1 = df['100'].quantile(0.01)\ndf['100'][df['100']<=Q1]=Q1\ndf['100'][df['100']>=Q3]=Q3","bc924f90":"Q3 = df['50'].quantile(0.99)\nQ1 = df['50'].quantile(0.01)\ndf['50'][df['50']<=Q1]=Q1\ndf['50'][df['50']>=Q3]=Q3","295c6e7d":"Q3 = df['0'].quantile(0.99)\nQ1 = df['0'].quantile(0.01)\ndf['0'][df['0']<=Q1]=Q1\ndf['0'][df['0']>=Q3]=Q3","554c5d17":"f, axes = plt.subplots(4,3, figsize=(16, 8))\ns=sns.violinplot(y=df.Exp,ax=axes[0, 0])\naxes[0, 0].set_title('Exp')\ns=sns.violinplot(y=df.Mat,ax=axes[0, 1])\naxes[0, 1].set_title('Mat')\ns=sns.violinplot(y=df.Inns,ax=axes[0, 2])\naxes[0, 2].set_title('Inns')\n\ns=sns.violinplot(y=df.NO,ax=axes[1, 0])\naxes[1, 0].set_title('NO')\ns=sns.violinplot(y=df.Runs,ax=axes[1, 1])\naxes[1, 1].set_title('Runs')\ns=sns.violinplot(y=df.HS,ax=axes[1, 2])\naxes[1, 2].set_title('HS')\n\ns=sns.violinplot(y=df.Ave,ax=axes[2, 0])\naxes[2, 0].set_title('Ave')\ns=sns.violinplot(y=df.SR,ax=axes[2, 1])\naxes[2, 1].set_title('SR')\ns=sns.violinplot(y=df['100'],ax=axes[2, 2])\naxes[2, 2].set_title('100')\ns=sns.violinplot(y=df.BF,ax=axes[3, 0])\naxes[3, 0].set_title('BF')\ns=sns.violinplot(y=df['50'],ax=axes[3, 1])\naxes[3, 1].set_title('50s')\ns=sns.violinplot(y=df['0'],ax=axes[3, 2])\naxes[3, 2].set_title('0s')\nplt.show()","bb4d4426":"# Dropping Player field as final dataframe will only contain data columns\n\ndf_drop = df.copy()\nplayer = df_drop.pop('Player')","685cfd9e":"df_drop.head()","bc95ecb1":"# Calculating Hopkins score to know whether the data is good for clustering or not.\n\ndef hopkins(X):\n    d = X.shape[1]\n    n = len(X)\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    HS = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(HS):\n        print(ujd, wjd)\n        HS = 0\n \n    return HS","df76935b":"# Hopkins score\nHopkins_score=round(hopkins(df_drop),2)","d069d119":"print(\"{} is a good Hopkins score for Clustering.\".format(Hopkins_score))","d4599fca":"\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df_drop)\ndf_scaled ","ab8b4153":"df_df1 = pd.DataFrame(df_scaled, columns = [ 'Mat', 'Inns', 'NO', 'Runs', 'HS', 'Ave', 'BF', 'SR', '100',\n                                            '50', '0', 'Exp'])\ndf_df1.head()","2d3b6013":"# Elbow curve method to find the ideal number of clusters.\nclusters=list(range(2,8))\nssd = []\nfor num_clusters in clusters:\n    model_clus = KMeans(n_clusters = num_clusters, max_iter=150,random_state= 50)\n    model_clus.fit(df_df1)\n    ssd.append(model_clus.inertia_)\n\nplt.plot(clusters,ssd);","3964d90f":"# Silhouette score analysis to find the ideal number of clusters for K-means clustering\n\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n\nfor num_clusters in range_n_clusters:\n    \n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50,random_state= 100)\n    kmeans.fit(df_df1)\n    \n    cluster_labels = kmeans.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(df_df1, cluster_labels)\n    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))","7faac972":"#K-means with k=4 clusters\n\ncluster = KMeans(n_clusters=4, max_iter=150, random_state= 15)\ncluster.fit(df_df1)","76752603":"# Cluster labels\n\ncluster.labels_","44a0b909":"# Assign the label\n\ndf['Cluster_Id'] = cluster.labels_\ndf.head()","84951472":"## Number of countries in each cluster\ndf.Cluster_Id.value_counts(ascending=True)","e4e6e089":"# Scatter plot on Original attributes to visualize the spread of the data\n\nplt.figure(figsize = (20,15))\nplt.subplot(3,1,1)\nsns.scatterplot(x = 'Ave', y = 'NO',hue='Cluster_Id',data = df,legend='full',palette=\"Set1\")\nplt.subplot(3,1,2)\nsns.scatterplot(x = 'Ave', y = 'SR',hue='Cluster_Id', data = df,legend='full',palette=\"Set1\")\nplt.subplot(3,1,3)\nsns.scatterplot(x = 'NO', y = 'SR',hue='Cluster_Id', data=df,legend='full',palette=\"Set1\")\nplt.show()\n","3664f8ef":" #Violin plot on Original attributes to visualize the spread of the data\n\nfig, axes = plt.subplots(2,2, figsize=(15,12))\n\nsns.violinplot(x = 'Cluster_Id', y = 'Ave', data = df,ax=axes[0][0])\nsns.violinplot(x = 'Cluster_Id', y = 'SR', data = df,ax=axes[0][1])\nsns.violinplot(x = 'Cluster_Id', y = 'NO', data=df,ax=axes[1][0])\nsns.violinplot(x = 'Cluster_Id', y = 'Exp', data=df,ax=axes[1][1])\nplt.show()","9651a0a8":"df[['NO','Ave','SR','Cluster_Id']].groupby('Cluster_Id').mean()","10472495":"ax=df[['NO','Ave','SR','Cluster_Id']].groupby('Cluster_Id').mean().plot(kind = 'bar',figsize = (15,5))\n\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=0)\nplt.show();","9ce5fa45":"df[df['Cluster_Id']==0].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Can be Batsman Coach","43d2d502":"df[df['Cluster_Id']==1].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Openers","59448817":"df[df['Cluster_Id']==2].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Chockers ","e27a4471":"df[df['Cluster_Id']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False]).head()\n#Hitters","a54bb39f":"FinalListbyKMean=df[df['Cluster_Id']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False])\nFinalListbyKMean['Player']\nFinalListbyKMean.reset_index(drop=True).Player[:]","861b4ce6":"df_list_no = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['NO'].mean().sort_values(ascending = True)).head()\nax=df_list_no.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Not Out')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Not Out\", fontsize = 12, fontweight = 'bold')\nplt.show()","14f5f66a":"df_list_ave = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['Ave'].mean().sort_values(ascending = False)).head()\nax=df_list_ave.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Averages')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Averages\", fontsize = 12, fontweight = 'bold')\nplt.show()","a32bfb74":"df_list_sr = pd.DataFrame(FinalListbyKMean.groupby(['Player'])['SR'].mean().sort_values(ascending = False)).head()\nax=df_list_sr.plot(kind = 'bar',figsize = (10,5))\nfor p in ax.patches:\n    ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.title('Player & Strike Rates')\nplt.xlabel(\"Player\",fontweight = 'bold')\nplt.ylabel(\"Strike Rates\", fontsize = 12, fontweight = 'bold')\nplt.show()","f904992d":"FinalListbyKMean=df[df['Cluster_Id']==3].sort_values(by = ['NO','Ave','SR'], ascending = [True,False,False])\nFinalListbyKMean['Player']\nFinalListbyKMean.reset_index(drop=True).Player[:5]","dc44df97":"### Elbow Curve to get the right number of Clusters","7cf4a0e6":"### Silhouette Analysis","122a7f7d":"- Mat and Inns are highly correlated with correlation of 0.99\n- Mat and Runs are highly correlated with correlation of 0.86\n- Runs and Inns are highly correlated with correlation of 0.90","3fe1e164":"All are batsman","114b2008":"Plot histogram for each continous variables","9290d554":"> We will opt for 4 as cluster = 2 is not making sense in decison making.","426d689e":"# Exploratory Data Analytics","bfc6e0d0":"# Final List of Players who can appointed in a new team for Batsman role ","263c1d71":"Looking at the above elbow curve it looks good to proceed with 4 clusters.","f3c4ccb1":"# Hopkins Statistics Test","f63772d6":"Null Percentage: Columns","7220eb4c":"Null Count: Rows","933d10ea":"Null Count: Columns","f7d06bcc":"# K- means Clustering","5aa9631c":"## Finding the Optimal Number of Clusters","7dec85d1":"## Data Preparation","c347cff5":"The shape after running the drop duplicate command is same as the original dataframe.\n\nHence we can conclude that there were zero duplicate values in the dataset.","ffcc4caf":"### Duplicate Check","3b897fe1":"## Univariate Analysis","0e8ab2aa":"# Rescaling the Features","1dca1d79":"There are no missing \/ Null values either in columns or rows","95445c35":"# Final List of Players who can appointed in a new team for Batsman role","3b70c137":"Percentile Capping (Winsorization) for outliers handling","2fae1b71":"Derived Metrices","af902951":"All are batsmans","22a411c8":"All are Batsmans","a2334120":"# Data Cleaning","1769e367":"The Hopkins statistic (introduced by Brian Hopkins and John Gordon Skellam) is a way of measuring the cluster tendency of a data set.It acts as a statistical hypothesis test where the null hypothesis is that the data is generated by a Poisson point process and are thus uniformly randomly distributed. A value close to 1 tends to indicate the data is highly clustered, random data will tend to result in values around 0.5, and uniformly distributed data will tend to result in values close to 0.\n\n\u2022 If the value is between {0.01, ...,0.3}, the data is regularly spaced.\n\n\u2022 If the value is around 0.5, it is random.\n\n\u2022 If the value is between {0.7, ..., 0.99}, it has a high tendency to cluster.","9c991d3b":"silhouette score=(p\u2212q)\/max(p,q)\n\np is the mean distance to the points in the nearest cluster that the data point is not a part of\n\nq is the mean intra-cluster distance to all the points in its own cluster.\n\nThe value of the silhouette score range lies between -1 to 1.\n\nA score closer to 1 indicates that the data point is very similar to other data points in the cluster,\n\nA score closer to -1 indicates that the data point is not similar to the data points in its cluster.","3e3b9044":"All are Batsmans","5c9e3b95":"Null Percentage: Rows","ce4daf4d":"# Model Building","c605367b":"# Data Inspection","a2620b38":"## Cluster Profiling","650d305c":"From the business understanding we have learnt that Ave, NO, SR are some important factors which decides the form of a player. Hence, we will proceed with analyzing these 3 components to build some meaningful clusters.","ad26794d":"It seems there are good number of countries in each clusters.","64c04ced":"Outlier Analysis"}}