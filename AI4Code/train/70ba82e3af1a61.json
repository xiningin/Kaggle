{"cell_type":{"d3cb1542":"code","48e4656f":"code","2b7f4026":"code","08a10899":"code","cfd91f2f":"code","cf711310":"code","039af7f9":"code","89dc0939":"code","b067082a":"code","3d2145aa":"code","8e4e6a77":"code","7ababf7e":"code","081722a4":"code","9d039f59":"code","8a0e5f0c":"code","0fa814ea":"code","e09c8c03":"code","9e4582aa":"code","3ac38afa":"code","995273f9":"code","a4093b0f":"code","2d47b257":"code","0199f964":"code","5219e512":"code","29d46c9f":"code","628a4130":"code","e969b9c7":"code","ed4df883":"code","89ebd3ce":"code","4e1cb741":"code","40329219":"code","1e3d9ef4":"code","540f1bbe":"code","9975def3":"code","a9de183f":"code","fedbfd7f":"code","dd7f4a54":"code","8add04eb":"code","0662b8c4":"code","6afaed6c":"code","866ad257":"code","ec175daa":"code","3909de54":"code","712ce5a1":"code","151f2ca2":"code","aa8397be":"code","5a24eacc":"markdown","10914dff":"markdown","ff4c7632":"markdown","d69eab79":"markdown"},"source":{"d3cb1542":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48e4656f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","2b7f4026":"data = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","08a10899":"data.head()","cfd91f2f":"data.shape","cf711310":"data.isnull().sum()","039af7f9":"data.info","89dc0939":"data.describe()","b067082a":"data.dtypes","3d2145aa":"minimum_temperature = data['MinTemp'].min()\nprint(minimum_temperature)","8e4e6a77":"maximum_temperature = data['MaxTemp'].max()\nprint(maximum_temperature)","7ababf7e":"data['Sunshine'].value_counts()","081722a4":"data.hist(figsize=(20,15))","9d039f59":"print('Percentage of missing values: ')\nprint((data.isnull().sum().sort_values(ascending=False) \/ len(data)) * 100)","8a0e5f0c":"missing_counts = data.isnull().sum().sort_values(ascending=True)\nmissing_counts.plot.barh(figsize=(10,8), title = 'Total number of missing values by attribute');","0fa814ea":"data['RainToday'].mode()","e09c8c03":"data['RainToday'].value_counts()","9e4582aa":"data['RainToday'] = data['RainToday'].fillna('No')","3ac38afa":"data['RainTomorrow'].value_counts()","995273f9":"corr_matrix = data.corr()\ncorr_matrix","a4093b0f":"temp = data[['MinTemp', 'MaxTemp', 'Temp9am', 'Temp3pm']]\ntemp.corr()","2d47b257":"from pandas.plotting import scatter_matrix\nscatter_matrix(temp, figsize=(15,12), alpha=0.05, s=5);","0199f964":"scatter_matrix(temp, figsize=(15,10), alpha=0.1);","5219e512":"windspeed = data[['WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm']]\nwindspeed.corr()","29d46c9f":"scatter_matrix(windspeed, figsize=(15,10), alpha=0.1);","628a4130":"humid = data[['Humidity9am', 'Humidity3pm']]\nhumid.corr()","e969b9c7":"scatter_matrix(humid, figsize=(12,8), alpha=0.02);","ed4df883":"import seaborn as sns","89ebd3ce":"sns.displot(data = data, kind = 'hist', x = 'Humidity9am', hue = 'RainTomorrow', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n","4e1cb741":"sns.displot(data = data, kind = 'hist', x = 'Humidity3pm', hue = 'RainTomorrow', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n","40329219":"sns.displot(data = data, kind = 'hist', x = 'Cloud3pm', hue = 'RainTomorrow', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n","1e3d9ef4":"sns.displot(data = data, kind = 'hist', x = 'Cloud9am', hue = 'RainTomorrow', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n","540f1bbe":"sns.displot(data = data, kind = 'hist', x = 'Pressure3pm', hue = 'RainTomorrow', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n","9975def3":"sns.displot(data = data, kind = 'hist', x = 'Pressure9am', hue = 'RainTomorrow', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n","a9de183f":"data = data.drop(columns=['Evaporation','Sunshine','Cloud3pm','Cloud9am','Date','Location'],\n                 axis=1)","fedbfd7f":"data = data.dropna(how='any')\nprint(data.shape)","dd7f4a54":"# Replace No and Yes for 0 and 1 in RainToday and RainTomorrow\ndata['RainToday'].replace({'No': 0, 'Yes': 1},inplace = True)\ndata['RainTomorrow'].replace({'No': 0, 'Yes': 1},inplace = True)\n\n# Categorical variables WindGustDir, WindDir3pm and WindDir9am in dummy variables for each category.\ncategoric_c = ['WindGustDir', 'WindDir3pm', 'WindDir9am']\ndatafinal = pd.get_dummies(data, columns=categoric_c)\nprint(datafinal.shape)\ndatafinal.head()","8add04eb":"standa = preprocessing.MinMaxScaler()\nstanda.fit(datafinal)\ndatafinal = pd.DataFrame(standa.transform(datafinal), index=datafinal.index, columns=datafinal.columns)\ndatafinal.head()","0662b8c4":"# Calculate the correlation matrix\ncorr = datafinal.corr()\ncorr1 = pd.DataFrame(abs(corr['RainTomorrow']),columns = ['RainTomorrow'])\nnonvals = corr1.loc[corr1['RainTomorrow'] < 0.005]\nprint('Var correlation < 0.5%',nonvals)\nnonvals = list(nonvals.index.values)","6afaed6c":"\ndatafinal1 = datafinal.drop(columns=nonvals,axis=1)\nprint('Data Final',datafinal1.shape)","866ad257":"from sklearn.model_selection import train_test_split\nY = datafinal1['RainTomorrow']\nX = datafinal1.drop(columns=['RainTomorrow'])\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=9)","ec175daa":"print('X train shape: ', X_train.shape)\nprint('Y train shape: ', Y_train.shape)\nprint('X test shape: ', X_test.shape)\nprint('Y test shape: ', Y_test.shape)","3909de54":"import pandas as pd\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\nmodel = lgb.LGBMClassifier()\nmodel.fit(X_train, Y_train)","712ce5a1":"predict_train = model.predict(X_train)\nprint('\\nTarget on train data',predict_train) ","151f2ca2":"# Accuray Score on train dataset\naccuracy_train = accuracy_score(Y_train,predict_train)\nprint('\\naccuracy_score on train dataset : ', accuracy_train)\npredict_test = model.predict(X_test)\nprint('\\nTarget on test data',predict_test) \n","aa8397be":"\n# Accuracy Score on test dataset']\naccuracy_test = accuracy_score(Y_test,predict_test)\nprint('\\naccuracy_score on test dataset : ', accuracy_test)","5a24eacc":"## Light GBM classification[](http:\/\/)\n\n**Light GBM is a fast, distributed, high-performance gradient boosting framework based on decision tree algorithm, used for ranking, classification and many other machine learning tasks**","10914dff":"# **With the above histograms we can conclude:**\n\n* WindSpeed at 9am and 3pm: The WindSpeed in morning high and during afternoon it's decreased\n* Humidity at 9am and 3pm: Humidity is more in morning hours and afternoon it decrease\n* Pressure at 9am and 3pm: The air pressure between the hours is same\n* Cloud at 9am and 3pm: There's no significance difference between the clouds.\n* Temp at 9am and 3pm: The temperature has increased in the duration of 6 hours","ff4c7632":"## Please Upvote if it helps","d69eab79":"## Data for training and testing\u00b6\nNext, we proceed to select a set of training data that will be the input in the learning algorithms, to make sure that after training our classification algorithm it is able to generalize well to new data. For this case we use a test sample size of 20%."}}