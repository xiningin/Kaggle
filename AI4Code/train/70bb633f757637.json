{"cell_type":{"a1c1e327":"code","ad255778":"code","f99c5c46":"code","8492ffdf":"code","c7ac52d8":"code","70e1ebf6":"code","a96be95e":"code","dbe4e49c":"code","b5b3e5e8":"code","1b63e8fe":"code","88cd7217":"code","539739d9":"code","1318c496":"code","f32bda47":"code","3d15bc58":"code","78c1b3da":"code","d21f7624":"code","63f343c2":"code","e4672398":"code","82013979":"code","390ea67e":"code","afa2b6da":"code","7d62d4f9":"code","5870eabd":"code","d7f562a3":"code","72081f27":"code","4a18668e":"code","64e1d905":"code","5821ebbe":"code","4351daf9":"code","2f01ec7f":"code","b44ae1ac":"code","42c7b9cf":"markdown","01e1f3a8":"markdown","16ca5b68":"markdown","8857e925":"markdown","f291793f":"markdown","89fb4652":"markdown","c3ff60fd":"markdown","25969850":"markdown","e1e54f16":"markdown","4a6e570d":"markdown","b89f1c56":"markdown","f3fd26a7":"markdown","678fb180":"markdown","7feed39c":"markdown","c7b6295d":"markdown"},"source":{"a1c1e327":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.model_selection import RepeatedKFold\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport math\nimport random","ad255778":"path = '\/kaggle\/input\/stanford-covid-vaccine'\ntrain = pd.read_json(f'{path}\/train.json',lines=True)\ntest = pd.read_json(f'{path}\/test.json', lines=True)\nsub = pd.read_csv(f'{path}\/sample_submission.csv')","f99c5c46":"train.shape, train['id'].nunique(), test.shape, sub.shape","8492ffdf":"train.head()","c7ac52d8":"train.info()","70e1ebf6":"sample = train.loc[train['id'] == 'id_001f94081']\nsample","a96be95e":"sample['sequence'].values[0]","dbe4e49c":"Counter(sample['sequence'].values[0])","b5b3e5e8":"sample['structure'].values[0]","1b63e8fe":"Counter(sample['structure'].values[0])","88cd7217":"sample['predicted_loop_type'].values[0]","539739d9":"Counter(sample['predicted_loop_type'].values[0])","1318c496":"len(sample['reactivity'].values[0])","f32bda47":"mol = np.load('\/kaggle\/input\/stanford-covid-vaccine\/bpps\/id_001f94081.npy')\nplt.imshow(mol);","3d15bc58":"train['seq_scored'].value_counts()","78c1b3da":"test['seq_scored'].value_counts()","d21f7624":"train.head()","63f343c2":"train_data = []\nfor mol_id in train['id'].unique():\n    sample_data = train.loc[train['id'] == mol_id]\n    for i in range(68):\n        sample_tuple = (sample_data['id'].values[0], sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i],\n                        sample_data['reactivity'].values[0][i], sample_data['reactivity_error'].values[0][i],\n                        sample_data['deg_Mg_pH10'].values[0][i], sample_data['deg_error_Mg_pH10'].values[0][i],\n                        sample_data['deg_pH10'].values[0][i], sample_data['deg_error_pH10'].values[0][i],\n                        sample_data['deg_Mg_50C'].values[0][i], sample_data['deg_error_Mg_50C'].values[0][i],\n                        sample_data['deg_50C'].values[0][i], sample_data['deg_error_50C'].values[0][i])\n        train_data.append(sample_tuple)","e4672398":"train_data = pd.DataFrame(train_data, columns=['id', 'sequence', 'structure', 'predicted_loop_type', 'reactivity', 'reactivity_error', 'deg_Mg_pH10', 'deg_error_Mg_pH10',\n                                  'deg_pH10', 'deg_error_pH10', 'deg_Mg_50C', 'deg_error_Mg_50C', 'deg_50C', 'deg_error_50C'])\ntrain_data.head()","82013979":"fig, ax = plt.subplots(figsize = (24, 10))\nfor i, col in enumerate(['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C',\n       'reactivity_error', 'deg_error_Mg_pH10', 'deg_error_pH10', 'deg_error_Mg_50C', 'deg_error_50C']):\n    plt.subplot(2, 5, i + 1);\n    plt.hist(train_data[col])\n    plt.title(f'{col} histogram');\n    plt.xticks(rotation=45)","390ea67e":"train_data.sort_values('reactivity_error')","afa2b6da":"train.loc[train['id'] == 'id_a1719ebbc']","7d62d4f9":"test_data = []\nfor mol_id in test['id'].unique():\n    sample_data = test.loc[test['id'] == mol_id]\n    for i in range(sample_data['seq_scored'].values[0]):\n        sample_tuple = (sample_data['id'].values[0] + f'_{i}', sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i])\n        test_data.append(sample_tuple)","5870eabd":"test_data = pd.DataFrame(test_data, columns=['id', 'sequence', 'structure', 'predicted_loop_type'])\ntest_data.head()","d7f562a3":"train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['reactivity'].mean().reset_index().head()","72081f27":"test_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['reactivity'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_Mg_pH10'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_pH10'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_Mg_50C'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])\ntest_data = pd.merge(test_data, train_data.groupby(['sequence', 'structure', 'predicted_loop_type'])['deg_50C'].mean().reset_index(),\n                     on=['sequence', 'structure', 'predicted_loop_type'])","4a18668e":"test_data.head()","64e1d905":"sub.head()","5821ebbe":"sub.shape, test_data.shape","4351daf9":"sub1 = pd.merge(sub[['id_seqpos']], test_data, left_on='id_seqpos', right_on='id', how='left').drop(['id', 'sequence', 'structure', 'predicted_loop_type'], axis=1)\nsub1.head()","2f01ec7f":"sub1[['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']] = sub1[['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']].fillna(0) * 0.9","b44ae1ac":"sub1.to_csv('submission.csv', index=False)","42c7b9cf":"## One Sample - So we have 2400 samples in train dataset. Let's look at all available information about one sample.\n\n## It is very important to remember that both `seq_length` and `seq_scored` are different in train and test. This means that we have to be able to work with sequences of different lengths.\n\n## TEST Data `seq_scored`\n* 91   --  3005\n* 68    --  629","01e1f3a8":"## Regression Targets: The rest of the values are our targets and their errors. Note that for scoring we need only to predict `reactivity`, `deg_Mg_pH10` and `deg_Mg_50C`.","16ca5b68":"# Size of the train, test and submission - Did you notice that test and submission have different number of rows? This is because test data contains sequences and the submission is flattened. \n\n\n* 629 from 3029 are in public test datased. 2400 other sequences are in train;","8857e925":"## Preparing the data\n\nMy idea is the following: let's try working with this data as tabular. To do this, we need to flatten the data. Let's try.","f291793f":"What are these huge errors???","89fb4652":"## How to filter the data!\n\nHere is information from \"data\" tab of this competition:\n\n* 1. there were 3029 RNA sequences of length 107;\n* 2. measurements can be done only on the first 68 points of sequences;\n* 3. measurements were done in 5 conditions (reactivity,deg_Mg_pH10,deg_pH10,deg_Mg_50C,deg_50C);\n* \n* they were filtered using the following criteria:\n\n> 1. minimal value of conditions > -0.5\n> 2. Mean signal\/noise across all conditions > 1.0. calculated as mean value divided by mean error\n> 3. The resulting sequences were clustered into clusters with less than 50% sequence similarity, and the 629 test set sequences were chosen from clusters with 3 or fewer members. That is, any sequence in the test set should be sequence similar to at most 2 other sequences.\n\n* train data wasn't filtered, so it could make sense to apply first two filters to training data. on the other hand the final scoring will be done on non-filtered data. So I suppose it would be better not to do any manual filtering in the end;","c3ff60fd":"## General information\n## Copy of https:\/\/www.kaggle.com\/artgor\/openvaccine-eda-feature-engineering-and-modelling\n\nThis competition may help with defeating COVID-19. On of the most promising approaches are mRNA (messenger RNA) vaccines. One of the biggest challenges is developing stable mRNA molecules because they degrade spontaneously abd rapidly.\n\nEterna - online video game platform - has many challenges with solving scientific problems and helped to make many advances.\n\nIn this competition we have a subset of Eterna dataset with 3000 RNA molecules and their degradation rates. Our task is to predict those degradation rates. Our models will be scores on a new generation of molecules.\n\n\n![](https:\/\/www.ddw-online.com\/library\/sid32\/64-figure-3.jpg)\n\n\n![](https:\/\/i.imgur.com\/cVMlp16.png)","25969850":"## Sequence - This is RNA sequence, a combination of A, G, U, and C for each sample. There is a separate column showing sequence length - `seq_length`. Also notice that there is column `seq_scored` - it shows that this number of positions has target values.","e1e54f16":"### BBPS\n\nI'm not sure what this is, but it seems to be some representations of the data.","4a6e570d":"### Predicted loop type: Describes the structural context of each character in sequence. Loop types assigned by bpRNA from Vienna RNAfold 2 structure. From the bpRNA_documentation: S: paired \"Stem\" M: Multiloop I: Internal loop B: Bulge H: Hairpin loop E: dangling End X: eXternal loop","b89f1c56":"## Train, public test and private test","f3fd26a7":"### Structure An - array of (, ), and . characters. e.g. (....) means that base 0 is paired to base 5, and bases 1-4 are unpaired.","678fb180":"## Baseline submission\n\nLet's submit a baseline - mean value by categorical columns","7feed39c":"Do you see that test has 2 unique values in `seq_scored`? rows with `68` are public test, `91` is private test.","c7b6295d":"## Step1: Data overview\n\nThis competition has unique and interesting data, let's analyze it.\n\nFirst of all - main data is in `json` format, not `csv` which is more common on Kaggle."}}