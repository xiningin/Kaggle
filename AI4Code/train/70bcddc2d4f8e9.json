{"cell_type":{"ded89203":"code","4f1e3c05":"code","880290be":"code","93b32bae":"code","6ee05318":"code","65eeea90":"code","0a92cc45":"code","8cccab3f":"code","0b36ae67":"code","8685b9cd":"code","02396fa3":"code","e6f96797":"code","0f12c584":"code","2cd8fd58":"code","abb6c2a0":"code","38d5f838":"code","f7a84133":"code","ec0ed173":"code","2f809cbb":"code","07ecf490":"code","07750339":"code","00ee0a0e":"code","1bee81b7":"code","c675cf28":"code","79c3f719":"code","9079bc02":"code","9c4c36b2":"code","e047d07a":"code","b5978a49":"code","bfed8eee":"code","6048f4e6":"code","48c7997f":"code","04659c93":"code","0ccb4dd1":"code","e38cd472":"code","a706df76":"code","6d8a891c":"code","7dbddcbb":"code","cc1ae1fc":"code","67ddedc8":"code","01827d3f":"code","78f8b9f3":"code","d6e8e7e9":"code","3d892711":"code","63526f41":"code","dc37bace":"code","fd22a2f8":"code","2ac997ae":"code","7b942786":"code","c4f82343":"code","293afcda":"code","3f2b0667":"code","b5f2b9cc":"code","37bce994":"code","223bca96":"code","afee55c1":"code","c15b9af3":"code","000be88f":"code","38ceed1e":"code","b07b7f67":"code","489ece11":"code","5e91460f":"code","5ed4001b":"code","b94000a1":"code","59ff1b70":"code","4e325b0d":"code","d19d09e8":"code","bb971cde":"code","c33de112":"code","08c79953":"code","5e0f4cb5":"code","0b16628b":"code","6accbae1":"code","3b21f342":"code","c8e7afd6":"code","a9e4cb94":"code","964b6f44":"code","3fd9d2d4":"code","efbe947f":"code","160e6ed0":"code","45e165df":"code","7ea0ab83":"code","72968e28":"code","f72ebfd4":"code","df4cb6d1":"code","749ca503":"code","e826eed2":"markdown","abbf48fc":"markdown","2cf36efb":"markdown","948b7a07":"markdown","1d5f66ac":"markdown","7aa10be7":"markdown","589b5e52":"markdown","e112d8e3":"markdown","6813ecd1":"markdown","6a88c830":"markdown","cbc58d94":"markdown","34bf2dd5":"markdown","b1085b80":"markdown","5c136871":"markdown","d1713fec":"markdown","1e5846e3":"markdown","3ffba8ac":"markdown","e467fe06":"markdown","d6a5be70":"markdown","e2f7ce32":"markdown","15960663":"markdown","befc71cf":"markdown","33794ab6":"markdown"},"source":{"ded89203":"import pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","4f1e3c05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndf_train = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv')\ndf_test  = pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')","880290be":"df_train.head()","93b32bae":"#Actual value contains unnamed value replace it with actual value \ndf=df_train.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\"Unnamed: 5\":\"MaritalStatus\",\"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\"Unnamed: 12\":\"ClaimDescription\",\"Unnamed: 13\":\"InitialIncurredCalimsCost\",\"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)","6ee05318":"df.head()","65eeea90":"df.describe()","0a92cc45":"df = df.drop(df.index[0])#dropping the first row containing the actual value.\ndf","8cccab3f":"df_train.shape\n","0b36ae67":"df_train.info()","8685b9cd":"df.isnull().sum()#MaritalStatus, ","02396fa3":"df['MaritalStatus'].value_counts()","e6f96797":"df['MaritalStatus'] = df['MaritalStatus'].fillna('S')","0f12c584":"df['WeeklyWages'].value_counts()","2cd8fd58":"df['HoursWorkedPerWeek'].value_counts()","abb6c2a0":"#Treating the Missing Values:\ndf['WeeklyWages'] = df['WeeklyWages'].fillna(df['WeeklyWages'].median()).isnull().sum()\ndf['HoursWorkedPerWeek'] = df['HoursWorkedPerWeek'].fillna(df['HoursWorkedPerWeek'].median()).isnull().sum()\ndf['HoursWorkedPerWeek']=df['HoursWorkedPerWeek'].astype(np.float64)\ndf['WeeklyWages']=df['WeeklyWages'].astype(np.float64)\ndf['WeeklyWages']=df['WeeklyWages'].astype(np.int64)\ndf['HoursWorkedPerWeek']=df['HoursWorkedPerWeek'].astype(np.int64)\n","38d5f838":"df.info()","f7a84133":"df.isnull().sum()","ec0ed173":"df.head()","2f809cbb":"df.columns","07ecf490":"# Generate a list of numerical variables, remove claim cost variables\nnum_list = [c for c in df.columns if((df[c].dtype != np.object) and not \"Cost\" in c)] \nfor name in num_list:\n    f, ax = plt.subplots(figsize=(10, 5))\n    nbins = min(df[name].value_counts().count(),70)\n    plt.hist(data=df, x=name, bins=nbins)\n    plt.xlabel(name)\n    plt.show()","07750339":"cat_list = [c for c in df.columns if( (df[c].dtype == np.object) & (df[c].value_counts().count() <= 25) )] \n\nfor name in cat_list:\n    f, ax = plt.subplots(figsize=(10, 5))\n    sns.countplot(x=name,data=df)\nplt.show()","00ee0a0e":"nrows, ncols = 3, 2\nax = plt.subplot(nrows, ncols, 1)\nsns.distplot(df[\"UltimateIncurredClaimCost\"], color=\"green\", label=\"df\", ax= ax)\nax.set_title(\"TRAIN - Ultimate Incurred Claim Cost\");","1bee81b7":"ax = plt.subplot(nrows, ncols, 3)\nsns.distplot(df[\"InitialIncurredCalimsCost\"], color=\"green\", label=\"df\", ax= ax)\nax.set_title(\"TRAIN - Initial Incurred Claim Cost\");","c675cf28":"from sklearn.metrics import mean_squared_error\ndef rmse(y_true, y_pred):\n    return mean_squared_error(y_true, y_pred, squared = False)\n\nprint(\"RMSE with InitialIncurredCalimsCost : {:,.0f}\".\\\n    format(rmse(df[\"UltimateIncurredClaimCost\"], df[\"InitialIncurredCalimsCost\"])))","79c3f719":"#The above UltimateIncurredClaimCost haveing decimal converted to u=integer\ndf['UltimateIncurredClaimCost']=df['UltimateIncurredClaimCost'].astype(np.float64)\ndf['UltimateIncurredClaimCost']=df['UltimateIncurredClaimCost'].astype(np.int64)","9079bc02":"#The above InitialIncurredCalimsCost haveing decimal converted to u=integer\ndf['InitialIncurredCalimsCost']=df['InitialIncurredCalimsCost'].astype(np.float64)\ndf['InitialIncurredCalimsCost']=df['InitialIncurredCalimsCost'].astype(np.int64)","9c4c36b2":"df['DateTimeOfAccident'].head()","e047d07a":"#Splitting the DateTimeOfAccident Into Year,Month,Day,WeekDay,Hour\ndf['Accident_Year']  = pd.DatetimeIndex(df['DateTimeOfAccident']).year\ndf['Accident_Month']  = pd.DatetimeIndex(df['DateTimeOfAccident']).month\ndf['Accident_Day']  = pd.DatetimeIndex(df['DateTimeOfAccident']).day\ndf['Accident_WeekDay']  = pd.DatetimeIndex(df['DateTimeOfAccident']).day_name()\ndf['Accident_Hour']  = pd.DatetimeIndex(df['DateTimeOfAccident']).hour\n\n","b5978a49":"df.head()","bfed8eee":"#Splitting the DateReport Into Year,Month,Day\ndf['DateReported']=pd.to_datetime(df['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ndf[\"Report_Year\"] =df[\"DateReported\"].dt.year\ndf[\"Report_Month\"] = df[\"DateReported\"].dt.weekday\ndf['Report_Day'] =df['DateReported'].dt.month","6048f4e6":"import datetime\n#Getting the Number of Months Between Two Dates\nstart_date = datetime.datetime(2009, 4, 1)\nend_date = datetime.datetime(2010,1,1)\n\nnum_months = (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month)\n\nprint(\"Total No. of Months b\/w Two Dates: \",num_months)","48c7997f":"#Adding the Specific Variable for Report Lag\ndf['Report_Lag']=(df['Report_Year']-df['Accident_Year'])*12+(df['Report_Month']-df['Accident_Month'])","04659c93":"df.head()","0ccb4dd1":"from sklearn.preprocessing import LabelEncoder\nimport sklearn.preprocessing as pre\nimport sklearn.model_selection as ms\n","e38cd472":"le = LabelEncoder()","a706df76":"df.columns","6d8a891c":"df['Gender'] = le.fit_transform(df['Gender'])\ndf['MaritalStatus'] = le.fit_transform(df['MaritalStatus'])                      \ndf['PartTimeFullTime']=le.fit_transform(df['PartTimeFullTime'])    ","7dbddcbb":"#feature which are more prominent \nfeature_cols=['Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'InitialIncurredCalimsCost',\n       'UltimateIncurredClaimCost', 'Accident_Year', 'Accident_Day',\n       'Accident_Month', 'Report_Year', 'Report_Month', 'Report_Day',\n       'Report_Lag']\n","cc1ae1fc":"df_pred = df[feature_cols]\ndf_pred.head()","67ddedc8":"X_scale=pre.minmax_scale(df_pred.drop('UltimateIncurredClaimCost',axis=1))","01827d3f":"Y = df['UltimateIncurredClaimCost']\n","78f8b9f3":"Y_scale=pre.minmax_scale(df['UltimateIncurredClaimCost'])","d6e8e7e9":"X_scale=X_scale[:,1:]","3d892711":"from sklearn.preprocessing import LabelEncoder\n# feature scaleing for X-scale\nlabelencoder_X = LabelEncoder()\nX_scale[:,0] = labelencoder_X.fit_transform(X_scale[:,0])","63526f41":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nlabelencoder_X = LabelEncoder()\nX_scale[:, 3] = labelencoder_X.fit_transform(X_scale[:, 3])\ntransformer = ColumnTransformer([('one_hot_encoder', OneHotEncoder(), [3])],remainder='passthrough')\nX_scale = np.array(transformer.fit_transform(X_scale), dtype=np.float)\nX_scale=X_scale[:,2:]#Reducing the dinmesion","dc37bace":"X_scale.shape","fd22a2f8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scale, Y, test_size = 0.30,random_state = 101)\n","2ac997ae":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","7b942786":"from sklearn.linear_model import LinearRegression\nlinear = LinearRegression()\nlinear.fit(X_train, y_train)","c4f82343":"y_pred = linear.predict(X_test)\nprint(y_pred)","293afcda":"linear.score(X_test,y_test)","3f2b0667":"linear.score(X_train,y_train)","b5f2b9cc":"print(linear.coef_)","37bce994":"print(linear.intercept_)","223bca96":"#R2_Score \nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","afee55c1":"#RSME Score\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\nrms=sqrt(mean_squared_error(y_pred=linear.predict(X_train),y_true=y_train))\nrms","c15b9af3":"from sklearn.ensemble import RandomForestRegressor\nregressor1 = RandomForestRegressor(n_estimators = 40,max_depth=2.0, n_jobs= -2, random_state = 101)\nregressor1.fit(X_train, y_train)\ny_pred1 = regressor1.predict(X_test)\nregressor1.score(X_train,y_train)","000be88f":"regressor1.score(X_test,y_test)","38ceed1e":"#rms Score\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\nrms=sqrt(mean_squared_error(y_pred=regressor1.predict(X_train),y_true=y_train))\nrms","b07b7f67":"best_model=regressor1.fit(X_train, y_train)\nbest_model.feature_importances_","489ece11":"dataframe = pd.DataFrame(y_pred)\ndataframe1 = pd.DataFrame(y_pred1)","5e91460f":"csv = pd.read_csv(\"\/kaggle\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv['UltimateIncurredClaimCost']=dataframe\ncsv.to_csv(\"Sample Submission1.csv\", index = False)","5ed4001b":"csv = pd.read_csv(\"\/kaggle\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv['UltimateIncurredClaimCost']=dataframe1\ncsv.to_csv(\"Sample Submission2.csv\", index = False)","b94000a1":"df1=pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')\ndf1.head()","59ff1b70":"df1.shape# dimesion ","4e325b0d":"df1.isnull().sum()","d19d09e8":"df1['MaritalStatus'] = df1['MaritalStatus'].fillna(df1['MaritalStatus'].mode()[0]).isnull().sum()# missing value treatment","bb971cde":"df1.isnull().sum()","c33de112":"df1['Gender'].value_counts()","08c79953":" # Replace the value with Integer\ndf1['HoursWorkedPerWeek']=df1['HoursWorkedPerWeek'].astype(np.float64)\ndf1['WeeklyWages']=df1['WeeklyWages'].astype(np.float64)\ndf1['WeeklyWages']=df1['WeeklyWages'].astype(np.int64)\ndf1['HoursWorkedPerWeek']=df1['HoursWorkedPerWeek'].astype(np.int64)\ndf1['InitialIncurredCalimsCost']=df1['InitialIncurredCalimsCost'].astype(np.float64)\ndf1['InitialIncurredCalimsCost']=df1['InitialIncurredCalimsCost'].astype(np.int64)","5e0f4cb5":"idx1 = df1[ df1['Gender'] == 'U' ].index\ndf1.drop(idx1, inplace = True)","0b16628b":"#Splitting the DateTimeOfAccident Into Year,Month,Day,WeekDay,Hour\ndf1['Accident_Year']  = pd.DatetimeIndex(df1['DateTimeOfAccident']).year\ndf1['Accident_Month']  = pd.DatetimeIndex(df1['DateTimeOfAccident']).month\ndf1['Accident_Day']  = pd.DatetimeIndex(df1['DateTimeOfAccident']).day\ndf1['Accident_WeekDay']  = pd.DatetimeIndex(df1['DateTimeOfAccident']).day_name()\ndf1['Accident_Hour']  = pd.DatetimeIndex(df1['DateTimeOfAccident']).hour\n\n#Splitting the DateReport Into Year,Month,Day\ndf1['DateReported']=pd.to_datetime(df1['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ndf1[\"Report_Year\"] =df1[\"DateReported\"].dt.year\ndf1[\"Report_Month\"] = df1[\"DateReported\"].dt.weekday\ndf1['Report_Day'] =df1['DateReported'].dt.month","6accbae1":"#Adding the Specific Variable for Report Lag\ndf1['Report_Lag']=(df1['Report_Year']-df1['Accident_Year'])*12+(df1['Report_Month']-df1['Accident_Month'])","3b21f342":"df1.columns","c8e7afd6":"from sklearn.preprocessing import LabelEncoder\n# Encoding with primary values\nle = LabelEncoder()\n\ndf1['Gender'] = le.fit_transform(df1['Gender'])\ndf1['MaritalStatus'] = le.fit_transform(df1['MaritalStatus'])\n                                   \ndf1['PartTimeFullTime']=le.fit_transform(df1['PartTimeFullTime'])    ","a9e4cb94":"\n\nfeature_selected=['Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'InitialIncurredCalimsCost',\n        'Accident_Year', 'Accident_Day',\n       'Accident_Month', 'Report_Year', 'Report_Month', 'Report_Day',\n       'Report_Lag']\n","964b6f44":"df_test = df1[feature_selected]\ndf_test.head()","3fd9d2d4":"df_test.dtypes","efbe947f":"x_pred = pre.minmax_scale(df_test,axis=1) # testing value with represented value","160e6ed0":"from sklearn.preprocessing import LabelEncoder\n\nlabelencoder_X = LabelEncoder()\nx_pred[:,0] = labelencoder_X.fit_transform(x_pred[:,0])","45e165df":"x_pred.shape","7ea0ab83":"#Linear Regression Model\nprediction = linear.predict(x_pred)","72968e28":"#Random Forest\nreg = regressor1.predict(x_pred)","f72ebfd4":"#df3 = pd.DataFrame(prediction)\n#df2 = pd.DataFrame(reg)\n#csv = pd.read_csv(\"\/kaggle\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\n","df4cb6d1":"#csv['UltimateIncurredClaimCost']=df3\n#csv.to_csv(\"Sample Submission.csv\", index = False)# Regression Output","749ca503":"#csv['UltimateIncurredClaimCost']=df2\n#csv.to_csv(\"Sample Submission4.csv\", index = False)# Random forest Output","e826eed2":"## Testing with Test_SJC.csv","abbf48fc":"linear Regression","2cf36efb":"## Visualize numerical features","948b7a07":"### Random Forest","1d5f66ac":"### Renaming the current parameter value dataset:","7aa10be7":"\nno. Another person's dependents have a very intriguing insurance dependence","589b5e52":"### Linear Regression","e112d8e3":"This dataset contains 90,000 actual workers' compensation insurance policies, all created synthetically and accidentally. Demographic statistics and employee related information and a written description of the accident are provided for each entry.","6813ecd1":"## Feature Scaling","6a88c830":"### Visualize categorical features","cbc58d94":"## Feature Engineering","34bf2dd5":"## Splitting the Data:","b1085b80":"Claim costs incurred are greater married.","5c136871":"## Missing Value Feature","d1713fec":"### Renaming values:","1e5846e3":"# Reading and Processing Data\n","3ffba8ac":"### Missing Value","e467fe06":"Random Forest","d6a5be70":"## Feature Selection\n","e2f7ce32":"## Data Summary\n","15960663":"# Modeling:","befc71cf":"## RMSE with Initial Incurred Claims Cost","33794ab6":"# EDA"}}