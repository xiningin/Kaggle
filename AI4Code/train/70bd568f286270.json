{"cell_type":{"bd92659f":"code","2818a4b9":"code","865aee54":"code","5d23ecb3":"code","e7e7e5f9":"code","228fd533":"code","07158644":"code","4db3d05d":"code","3df737e6":"code","cb8f325b":"code","db2f8cbb":"code","be7f031d":"code","d2f68cc9":"code","7934ebcc":"code","013eca10":"code","63dcf5b1":"code","66d6504a":"code","bb11bc22":"code","a2a17f68":"code","7c42255b":"markdown","8e0b8427":"markdown","e1172c3e":"markdown","16a49528":"markdown","4a17fcb7":"markdown","95f606ea":"markdown","2ac8043b":"markdown","f5d04ffb":"markdown","4d0f318f":"markdown","b3330f60":"markdown","a0116087":"markdown","46c439f4":"markdown","62146661":"markdown","695f2e6c":"markdown","baa8a865":"markdown","ca588b05":"markdown","4b4f1c4a":"markdown","705f9258":"markdown"},"source":{"bd92659f":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline\n","2818a4b9":"import pandas as pd\npath='..\/input\/telecommunications\/teleCust1000t.csv'\ndf = pd.read_csv(path)\ndf.head()","865aee54":"df['custcat'].value_counts()","5d23ecb3":"len(df)","e7e7e5f9":"df.hist(column='income', bins=100)","228fd533":"df.columns","07158644":"import numpy as np\nX= df[['region', 'tenure','age', 'marital', 'address', 'income', 'ed', 'employ','retire', 'gender', 'reside']] .values\nX[0:3]","4db3d05d":"Y= df['custcat'].values\nY[0:3]","3df737e6":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:3]","cb8f325b":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size=0.25, random_state=40)\nprint ('Train set:', X_train.shape,  Y_train.shape)\nprint ('Test set:', X_test.shape,  Y_test.shape)","db2f8cbb":"from sklearn.neighbors import KNeighborsClassifier","be7f031d":"k = 4\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,Y_train)\nneigh","d2f68cc9":"Yp = neigh.predict(X_test)\nYp[0:3]","7934ebcc":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(Y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(Y_test,Yp))","013eca10":"# k=5\nneigh5 = KNeighborsClassifier(n_neighbors = 5).fit(X_train,Y_train)\nYp5 = neigh5.predict(X_test)\nprint(\"Train set Accuracy: \", metrics.accuracy_score(Y_train, neigh5.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(Y_test, Yp5))","63dcf5b1":"# k=6\nk=6\nneigh6 = KNeighborsClassifier(n_neighbors = k).fit(X_train,Y_train)\nyhat6 = neigh6.predict(X_test)\nprint(\"Train set Accuracy: \", metrics.accuracy_score(Y_train, neigh6.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(Y_test, yhat6))","66d6504a":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,Y_train)\n    Yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(Y_test, Yhat)\n\n    \n    std_acc[n-1]=np.std(Yhat==Y_test)\/np.sqrt(Yhat.shape[0])\n\nmean_acc","bb11bc22":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Neighbors (K)')\nplt.tight_layout()\nplt.show()","a2a17f68":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","7c42255b":"### Accuracy evaluation\nIn multilabel classification, __accuracy classification score__ is a function that computes subset accuracy. This function is equal to the jaccard_similarity_score function. Essentially, it calculates how closely the actual labels and predicted labels are matched in the test set.","8e0b8427":"# About the data\nThe telecommunications dataset for predicting customer churn. This is a historical customer dataset where each row represents one customer. The data is relatively easy to understand, and you may uncover insights you can use immediately. Typically it is less expensive to keep customers than acquire new ones, so the focus of this analysis is to predict the customers who will stay with the company.\n\nThis data set provides information to help you predict what behavior will help you to retain customers. You can analyze all relevant customer data and develop focused customer retention programs.\n\nThe dataset includes information about:\n\nCustomers who left within the last month \u2013 the column is called Churn\nServices that each customer has signed up for \u2013 phone, multiple lines, internet, online security, online backup, device protection, tech support, and streaming TV and movies\nCustomer account information \u2013 how long they had been a customer, contract, payment method, paperless billing, monthly charges, and total charges\nDemographic info about customers \u2013 gender, age range, and if they have partners and dependents","e1172c3e":"Classifier implementing the k-nearest neighbors vote.","16a49528":"Lets define now our labels , Y :","4a17fcb7":"# Data exploration.\n ","95f606ea":"#### Let\u2019s see how many of each class is in our data set ","2ac8043b":"# Normalize data","f5d04ffb":"#### What about other K?\nK in KNN, is the number of nearest neighbors to examine. It is supposed to be specified by the User. So, how can we choose right value for K?\nThe general solution is to reserve a part of your data for testing the accuracy of the model. Then chose k =1, use the training part for modeling, and calculate the accuracy of prediction using all samples in your test set. Repeat this process, increasing the k, and see which k is the best for your model.\n\nWe can calculate the accuracy of KNN for different Ks.","4d0f318f":"# Train Test Split  \nOut of Sample Accuracy is the percentage of correct predictions that the model makes on data that that the model has NOT been trained on. Doing a train and test on the same dataset will most likely have low out-of-sample accuracy, due to the likelihood of being over-fit.\n\nIt is important that our models have a high, out-of-sample accuracy, because the purpose of any model, of course, is to make correct predictions on unknown data. So how can we improve out-of-sample accuracy? One way is to use an evaluation approach called Train\/Test Split.\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. \n\nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.","b3330f60":"Lets define now feature sets , X :","a0116087":"<h1><center>K-Nearest Neighbors<\/center><\/h1>","46c439f4":"#### So : 281 Plus Service, 266 Basic-service, 236 Total Service, and 217 E-Service customers","62146661":"### Predicting\nwe can use the model to predict the test set:","695f2e6c":"### Training\n\nLets start the algorithm with k=4 for now:","baa8a865":"Data Standardization give data zero mean and unit variance, it is good practice, especially for algorithms such as KNN which is based on distance of cases:","ca588b05":"#### Plot  model accuracy  for Different number of Neighbors ","4b4f1c4a":"# Modeling","705f9258":"**K-Nearest Neighbors** is an algorithm for supervised learning. Where the data is 'trained' with data points corresponding to their classification. Once a point is to be predicted, it takes into account the 'K' nearest points to it to determine it's classification."}}