{"cell_type":{"81284e3e":"code","18516119":"code","392cf1a1":"code","771b9e7e":"code","c9ce3b98":"code","5a78eaf6":"code","fbcb4320":"code","63faa95d":"code","d6384f4d":"code","859c8299":"code","4d4ce7a1":"code","6c894c8a":"code","b168ccdd":"code","02e89b99":"code","55767d1b":"code","70e62adb":"code","2a9f98ca":"code","60ee6691":"code","c73ad6eb":"code","54a2b837":"code","85e89959":"code","9db7320f":"code","c87b6cf0":"code","19d4890a":"code","3c897dc1":"code","ff9593da":"code","e84d1bd9":"code","cc7e7cbf":"code","a7b46ba2":"code","ed57dcf9":"code","6fc8eba4":"code","748afe5e":"code","1663611f":"code","8a742846":"code","71523e91":"code","e0e59460":"code","a8cba88f":"code","e93f3484":"code","db25a30e":"code","6cf4d74b":"code","9618f3a7":"code","83e73461":"code","a04ae1c3":"code","3d5399b4":"code","dc956902":"code","a248f956":"code","42cc2fa1":"code","0ac1901f":"code","2243d8a7":"code","661ea2ae":"code","28769e13":"code","57ad7175":"code","287237e4":"code","2ac59b71":"code","79ea1229":"code","4dce368c":"code","f86a2802":"code","dc4beb74":"code","61e5b168":"code","996ea5b4":"code","59b4591f":"code","5f28ab51":"code","91c71983":"markdown","f6e649df":"markdown","a0d1b39f":"markdown","9e56c826":"markdown","35d6e645":"markdown","78a0c362":"markdown","58539252":"markdown","b872a9fe":"markdown","4e10f724":"markdown"},"source":{"81284e3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18516119":"import numpy as np\nimport pandas as pd","392cf1a1":"train = pd.read_csv('\/kaggle\/input\/disease-prediction-using-machine-learning\/Training.csv')\ntest = pd.read_csv('..\/input\/disease-prediction-using-machine-learning\/Testing.csv')\ndata = train.copy()","771b9e7e":"pd.set_option('display.max_columns', None)","c9ce3b98":"data.shape","5a78eaf6":"data.head()","fbcb4320":"data.drop('Unnamed: 133', axis=1, inplace=True)\ndata['prognosis'].nunique()","63faa95d":"data['prognosis'].value_counts()","d6384f4d":"x = data.iloc[:, :-1]","859c8299":"#def select_symtom(disease):\n #   symtoms = set()\n  #  for col in x.columns:\n        ","4d4ce7a1":"symtoms = data.groupby('prognosis')['itching'].value_counts()\nsymtoms = symtoms.to_frame()\nsymtoms.head()","6c894c8a":"smpt = []\nl = list(symtoms[symtoms['itching'] < 120].index)\nfor i,j in l:\n    if j == 1:\n        smpt.append(i)","b168ccdd":"smpt","02e89b99":"l= data[data['prognosis']==\"Fungal infection\"]['itching'].value_counts().to_frame()\nprint(l)","55767d1b":"sm=[]\nif l['itching'][1] < 120:\n    sm.append('itching')\n            \nprint(sm)","70e62adb":"def get_symptoms(disease):\n    sympt = []\n    for col in x.columns:\n        lst = data[data['prognosis']==disease][col].value_counts().to_frame()\n        try:\n            if lst[col][1] < 120:\n                sympt.append(col)\n        except:\n            continue\n    return sympt","2a9f98ca":"get_symptoms(\"Fungal infection\")","60ee6691":"def get_symptoms2(disease):\n    sympt = []\n    for col in x.columns:\n        lst = data[data['prognosis']==disease][col].value_counts().to_frame()\n        if(len(lst.index) > 1):\n            sympt.append(col)\n    return sympt","c73ad6eb":"get_symptoms2(\"Fungal infection\")","54a2b837":"#data['Symptoms'] = data['prognosis'].apply(lambda x: get_symptoms2(x))","85e89959":"sympt_col = x.columns\ndisease = data['prognosis'].unique()\n#disease","9db7320f":"sympt_dict = {}\nfor dis in disease:\n    all_sympt = get_symptoms2(dis)\n    sympt_dict[dis] = all_sympt\n    \n#print(sympt_dict)\nfor key, value in sympt_dict.items():\n    print(\"Disease: \", key)\n    print(\"Symptoms: \", value)","c87b6cf0":"import pickle\nfile = open(\"diseas_sympt.pkl\",\"wb\")\npickle.dump(sympt_dict, file)","19d4890a":"data['Symptoms'] = data['prognosis'].map(sympt_dict)","3c897dc1":"data.tail()","ff9593da":"#disease = data['prognosis'].unique()\ncat_encode = {k: i for i, k in enumerate(disease, 0)}\ndata['prognosis'] = data['prognosis'].map(cat_encode)","e84d1bd9":"X = data[x.columns]\nY = data['prognosis']","cc7e7cbf":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","a7b46ba2":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=11)","ed57dcf9":"print(x_train.shape)\nprint(x_test.shape)\n#check all the class data we have in training or not\n#len(set(y_train))\n#len(set(y_test))","6fc8eba4":"dt_model = DecisionTreeClassifier()\ndt_model.fit(x_train, y_train)","748afe5e":"y_pred = dt_model.predict(x_test)\n#print(y_pred)","1663611f":"print(accuracy_score(y_test, y_pred))","8a742846":"test.head(2)","71523e91":"test['prognosis'] = test['prognosis'].map(cat_encode)","e0e59460":"x_testing = test[x.columns]\ny_testing = test['prognosis']","a8cba88f":"dt = DecisionTreeClassifier()\ndt.fit(X, Y)","e93f3484":"predictions = dt.predict(x_testing)\nprint(\"accuracy: \", accuracy_score(y_testing, predictions))","db25a30e":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X,Y)\nrf_pred = rf.predict(x_testing)\nprint(\"accuracy: \", accuracy_score(y_testing, rf_pred))","6cf4d74b":"from sklearn.naive_bayes import MultinomialNB\n\nnb = MultinomialNB()\nnb.fit(X,Y)\nnb_pred = nb.predict(x_testing)\nprint(\"accuracy: \", accuracy_score(y_testing, rf_pred))","9618f3a7":"import pickle\nf = open(\"disease_predDT.pkl\", \"wb\")\npickle.dump(dt, f)","83e73461":"model = pickle.load(open('disease_predDT.pkl', \"rb\"))\n#model = pickle.load(open('doctorrf_fees.pkl','rb'))","a04ae1c3":"predi = model.predict(x_testing)\nprint(\"accuracy: \", accuracy_score(y_testing, predi))","3d5399b4":"#pickle.dump(sympt_dict,open(\"diseases.pkl\",\"wb\"))","dc956902":"#dic = pickle.load(open(\"diseases.pkl\",\"rb\"))","a248f956":"key_list = list(cat_encode.keys())\nval_list = list(cat_encode.values())","42cc2fa1":"p = 27\nposi = val_list.index(27)\nprint(key_list[posi])","0ac1901f":"#so let's save the encoding disease dictionary too\npickle.dump(cat_encode, open(\"diseases.pkl\",\"wb\"))","2243d8a7":"dis = pickle.load(open(\"diseases.pkl\",\"rb\"))","661ea2ae":"pickle.dump(sympt_dict, open(\"diseaseWithSymp.pkl\",\"wb\"))","28769e13":"dissym = pickle.load(open(\"diseaseWithSymp.pkl\",\"rb\"))","57ad7175":"symptoms = x.columns","287237e4":"pickle.dump(symptoms, open(\"symptoms.pkl\",\"wb\"))","2ac59b71":"spt = pickle.load(open(\"symptoms.pkl\",\"rb\"))","79ea1229":"#how to change all the values to 0 except the user enter symptom as 1","4dce368c":"smptd={}\nfor sympt in spt:\n    if sympt == \"watering_from_eyes\" or sympt==\"shivering\" or sympt==\"chills\" or sympt==\"vomiting\":\n        smptd[sympt] = 1\n    else:\n        smptd[sympt] = 0","f86a2802":"moddf = pd.DataFrame(smptd, columns=smptd.keys(), index=smptd.values())","dc4beb74":"t = np.array(moddf.iloc[0])","61e5b168":"output = model.predict(moddf)\noutput","996ea5b4":"pos = val_list.index(output)\nprint(key_list[6])","59b4591f":"sympt_dict","5f28ab51":"t","91c71983":"## Encoding Test set\nwe are having prognosis column in test set as well.","f6e649df":"**This Dictionary is very much helpful for us. We will be usig this dictionary while deploying.**\n\nAnd we can also map this values and create a new column as symptom infront of disease and can has a wonderful analysis of all the symptoms.","a0d1b39f":"**How we will display the name of disease predicted**\n","9e56c826":"## Let's try modelling the prognosis once","35d6e645":"### Finding Symptoms list from Disease\n\n**Now we will get the list of symptoms that can be seen in particular disease**","78a0c362":"* This is very good that decisionTree gives the overall accuracy of 97%.\n* Let's try some different models too","58539252":"## Finding Diseases from Symptoms.\n\n**Lets see that in which which diseases the particular symptom occur**","b872a9fe":"## Save the Model","4e10f724":"**Categorical Encoding of Prognosis using Integer label encoding**"}}