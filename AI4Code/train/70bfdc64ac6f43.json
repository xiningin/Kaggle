{"cell_type":{"b32117ea":"code","a1dccabb":"code","6ee922b9":"code","c09ae6aa":"code","6a875c25":"code","cc18a777":"code","00ea6a40":"code","d71d1563":"code","d1792a51":"code","59d66754":"code","33209768":"code","b5bfefd1":"code","2553dd5c":"code","a8301a2b":"code","332a3d15":"code","cbf382ff":"code","ee60c876":"code","b4866503":"code","cccf7482":"code","03ab5625":"code","7fa24514":"code","7995c242":"markdown"},"source":{"b32117ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a1dccabb":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline","6ee922b9":"df=pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","c09ae6aa":"print(df.shape)","6a875c25":"df.head()","cc18a777":"df.info()","00ea6a40":"df.describe()","d71d1563":"class_names ={0:'Not Fraud',1:'Fraud'}\nprint(df.Class.value_counts().rename(index=class_names))","d1792a51":"#Plotting the variables using subplots","59d66754":"fig=plt.figure(figsize=(15,12))","33209768":"fig = plt.figure(figsize = (15, 12))\n\nplt.subplot(5, 6, 1) ; plt.plot(df.V1) ; plt.subplot(5, 6, 15) ; plt.plot(df.V15)\nplt.subplot(5, 6, 2) ; plt.plot(df.V2) ; plt.subplot(5, 6, 16) ; plt.plot(df.V16)\nplt.subplot(5, 6, 3) ; plt.plot(df.V3) ; plt.subplot(5, 6, 17) ; plt.plot(df.V17)\nplt.subplot(5, 6, 4) ; plt.plot(df.V4) ; plt.subplot(5, 6, 18) ; plt.plot(df.V18)\nplt.subplot(5, 6, 5) ; plt.plot(df.V5) ; plt.subplot(5, 6, 19) ; plt.plot(df.V19)\nplt.subplot(5, 6, 6) ; plt.plot(df.V6) ; plt.subplot(5, 6, 20) ; plt.plot(df.V20)\nplt.subplot(5, 6, 7) ; plt.plot(df.V7) ; plt.subplot(5, 6, 21) ; plt.plot(df.V21)\nplt.subplot(5, 6, 8) ; plt.plot(df.V8) ; plt.subplot(5, 6, 22) ; plt.plot(df.V22)\nplt.subplot(5, 6, 9) ; plt.plot(df.V9) ; plt.subplot(5, 6, 23) ; plt.plot(df.V23)\nplt.subplot(5, 6, 10) ; plt.plot(df.V10) ; plt.subplot(5, 6, 24) ; plt.plot(df.V24)\nplt.subplot(5, 6, 11) ; plt.plot(df.V11) ; plt.subplot(5, 6, 25) ; plt.plot(df.V25)\nplt.subplot(5, 6, 12) ; plt.plot(df.V12) ; plt.subplot(5, 6, 26) ; plt.plot(df.V26)\nplt.subplot(5, 6, 13) ; plt.plot(df.V13) ; plt.subplot(5, 6, 27) ; plt.plot(df.V27)\nplt.subplot(5, 6, 14) ; plt.plot(df.V14) ; plt.subplot(5, 6, 28) ; plt.plot(df.V28)\nplt.subplot(5, 6, 29) ; plt.plot(df.Amount)\nplt.show()","b5bfefd1":"from sklearn.model_selection import train_test_split","2553dd5c":"feature_names = df.iloc[:, 1:30].columns\ntarget = df.iloc[:1, 30: ].columns\nprint(feature_names)\nprint(target)","a8301a2b":"data_features =df[feature_names]\ndata_target =df[target]\n\n","332a3d15":"print(df[feature_names])","cbf382ff":"print(df[target])","ee60c876":"X_train, X_test, y_train, y_test = train_test_split(data_features, data_target, train_size=0.70, test_size=0.30, random_state=1)\nprint(\"Length of X_train is: {X_train}\".format(X_train = len(X_train)))\nprint(\"Length of X_test is: {X_test}\".format(X_test = len(X_test)))\nprint(\"Length of y_train is: {y_train}\".format(y_train = len(y_train)))\nprint(\"Length of y_test is: {y_test}\".format(y_test = len(y_test)))","b4866503":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix","cccf7482":"model = LogisticRegression()\nmodel.fit(X_train, y_train.values.ravel())","03ab5625":"pred =model.predict(X_test)","7fa24514":"class_names = ['not_fraud', 'fraud']\nmatrix = confusion_matrix(y_test, pred)\n# Create pandas dataframe\ndataframe = pd.DataFrame(matrix, index=class_names, columns=class_names)\n# Create heatmap\nsns.heatmap(dataframe, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","7995c242":"#Plotting the variables using subplots"}}