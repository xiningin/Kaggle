{"cell_type":{"35dce790":"code","edceecda":"code","16906075":"code","1e37dd96":"code","2d700c90":"code","5eb01892":"code","4c25220c":"code","48affa1a":"code","62f89ccb":"code","a4740051":"code","13569c96":"code","8241b3dd":"code","6b8e91b4":"code","9a3a5578":"code","af2d3983":"code","751e91b4":"code","b3d51374":"code","3ff9fb79":"code","19d6e98c":"code","0eb17b55":"code","efb4fcb2":"code","a1f442fb":"code","3f5d87a6":"code","e74438c8":"code","3200d118":"code","0e6b83cd":"code","c5d67696":"code","6ef48c9f":"code","180d58b4":"code","1bf1833f":"code","f61da47b":"code","7158a2f8":"code","7bda2fa6":"code","08d0a10d":"code","0ebb94b2":"code","5d77a662":"code","318b45d3":"code","6809c03d":"code","4928f293":"code","452b9522":"code","178668ea":"code","8af23c80":"code","f02d1fa0":"code","2a28d176":"code","0125b904":"code","4c58b188":"code","498696e0":"code","2cfdf785":"code","04aa4661":"code","63a262aa":"code","14a834c9":"code","7948c48e":"code","92238dde":"code","cda32329":"code","dd575a1a":"code","7e0373fa":"markdown","8b2b8d12":"markdown","91971442":"markdown","732b53fa":"markdown","da4b9205":"markdown","f8f33307":"markdown"},"source":{"35dce790":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","edceecda":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","16906075":"test_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_df.head()","1e37dd96":"df.info()","2d700c90":"test_df.info()","5eb01892":"df.isnull().sum()","4c25220c":"#visualise null values\nsns.heatmap(df.isnull(), yticklabels=False, cbar='False')","48affa1a":"sns.heatmap(test_df.isnull(), yticklabels=False, cbar='False')","62f89ccb":"#outlier removal\nfig, ax = plt.subplots()\nax.scatter(x = df['GrLivArea'], y = df['SalePrice'], c='blue')\nplt.ylabel('SalePrice', fontsize=9)\nplt.xlabel('GrLivArea', fontsize=9)\nplt.show()","a4740051":"df = df.drop(df[(df['GrLivArea']>4000) & (df['SalePrice']<300000)].index)\n\nfig, ax = plt.subplots()\nax.scatter(df['GrLivArea'], df['SalePrice'], c='blue')\nplt.ylabel('SalePrice', fontsize=9)\nplt.xlabel('GrLivArea', fontsize=9)\nplt.show()","13569c96":"df['LotFrontage'].fillna(df['LotFrontage'].mean(), inplace=True)\ndf['MasVnrType'].fillna(df['MasVnrType'].mode()[0], inplace=True)\ndf['MasVnrArea'].fillna(df['MasVnrArea'].mean(), inplace=True)\ndf['BsmtQual'].fillna(df['BsmtQual'].mode()[0], inplace=True)\ndf['BsmtCond'].fillna(df['BsmtCond'].mode()[0], inplace=True)\ndf['GrLivArea'].fillna(df['GrLivArea'].mean(), inplace=True)\ndf['SalePrice'].fillna(df['SalePrice'].mean(), inplace=True)\ndf['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0], inplace=True)\ndf['BsmtFinType1'].fillna(df['BsmtFinType1'].mode()[0], inplace=True)\ndf['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0], inplace=True)\ndf['Electrical'].fillna(df['Electrical'].mode()[0], inplace=True)\ndf['GarageType'].fillna(df['GarageType'].mode()[0], inplace=True)\ndf['GarageYrBlt'].fillna(df['GarageYrBlt'].mode()[0], inplace=True)\ndf['GarageFinish'].fillna(df['GarageFinish'].mode()[0], inplace=True)\ndf['GarageQual'].fillna(df['GarageQual'].mode()[0], inplace=True)\ndf['GarageCond'].fillna(df['GarageCond'].mode()[0], inplace=True)\ndf.drop(['PoolQC', 'Fence', 'MiscFeature', 'FireplaceQu', 'Alley', 'Id'], axis=1, inplace=True) #drop, too many null values","8241b3dd":"#repeat for test_df\ntest_df['LotFrontage'].fillna(test_df['LotFrontage'].mean(), inplace=True)\ntest_df['MasVnrType'].fillna(test_df['MasVnrType'].mode()[0], inplace=True)\ntest_df['MasVnrArea'].fillna(test_df['MasVnrArea'].mean(), inplace=True)\ntest_df['BsmtQual'].fillna(test_df['BsmtQual'].mode()[0], inplace=True)\ntest_df['BsmtCond'].fillna(test_df['BsmtCond'].mode()[0], inplace=True)\ntest_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0], inplace=True)\ntest_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0], inplace=True)\ntest_df['BsmtFinType2'].fillna(test_df['BsmtFinType2'].mode()[0], inplace=True)\ntest_df['Electrical'].fillna(test_df['Electrical'].mode()[0], inplace=True)\ntest_df['GarageType'].fillna(test_df['GarageType'].mode()[0], inplace=True)\ntest_df['GarageYrBlt'].fillna(test_df['GarageYrBlt'].mode()[0], inplace=True)\ntest_df['GarageFinish'].fillna(test_df['GarageFinish'].mode()[0], inplace=True)\ntest_df['GarageQual'].fillna(test_df['GarageQual'].mode()[0], inplace=True)\ntest_df['GarageCond'].fillna(test_df['GarageCond'].mode()[0], inplace=True)\ntest_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0], inplace=True)\ntest_df['Utilities'].fillna(test_df['Utilities'].mode()[0], inplace=True)\ntest_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0], inplace=True)\ntest_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0], inplace=True)\ntest_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mean(), inplace=True)\ntest_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mean(), inplace=True)\ntest_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mean(), inplace=True)\ntest_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mean(), inplace=True)\ntest_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mean(), inplace=True)\ntest_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mean(), inplace=True)\ntest_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0], inplace=True)\ntest_df['GarageCars'].fillna(test_df['GarageCars'].mean(), inplace=True)\ntest_df['Functional'].fillna(test_df['Functional'].mode()[0], inplace=True)\ntest_df['GarageArea'].fillna(test_df['GarageArea'].mean(), inplace=True)\ntest_df['SaleType'].fillna(test_df['SaleType'].mode()[0], inplace=True)\ntest_df.drop(['PoolQC', 'Fence', 'MiscFeature', 'FireplaceQu', 'Alley', 'Id'], axis=1, inplace=True) #drop, too many null values","6b8e91b4":"sns.heatmap(test_df.isnull(), yticklabels=False, cbar='False')","9a3a5578":"sns.heatmap(df.isnull(), yticklabels=False, cbar='False')","af2d3983":"#columns with categorical values\ncolumns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n         'SaleCondition','ExterCond','ExterQual','Foundation','BsmtQual',\n         'BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n         'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',    \n         'CentralAir', 'Electrical','KitchenQual','Functional','GarageType',\n         'GarageFinish','GarageQual','GarageCond','PavedDrive','LandSlope','Neighborhood']\n\nlen(columns)","751e91b4":"df.shape","b3d51374":"#concatenate train and test df's for making dummy variables for categorical variable\nfinal_df = pd.concat([df,test_df],axis=0)","3ff9fb79":"final_df.shape","19d6e98c":"final_df = pd.get_dummies(final_df, columns=columns, drop_first=True)\nfinal_df","0eb17b55":"final_df.shape","efb4fcb2":"#drop duplicates\nfinal_df = final_df.loc[:,~final_df.columns.duplicated()]","a1f442fb":"final_df.drop_duplicates(inplace=True)","3f5d87a6":"final_df.shape","e74438c8":"#separate test and train dfs\ndf=final_df.iloc[:1458,:]\ntest_df=final_df.iloc[1458:,:]\ntest_df.drop(['SalePrice'],axis=1,inplace=True)","3200d118":"test_df.shape","0e6b83cd":"df.shape","c5d67696":"#remove outliers\nfrom scipy import stats\ndf[(np.abs(stats.zscore(df)) <3).all(axis=1)]","6ef48c9f":"#selecting correlated features reduced performance of my models so decided not to do it","180d58b4":"#correlation matrix\ncorrmat = df.corr()\ncorrmat","1bf1833f":"#find features correlated to Sale Price\ndef getCorrelatedFeature(corrdata, threshold):\n    feature = []\n    value = []\n    \n    for i, index in enumerate(corrdata.index):\n        if abs(corrdata[index])> threshold:\n            feature.append(index)\n            value.append(corrdata[index])\n            \n    corrdf = pd.DataFrame(data = value, index = feature, columns=['corr value'])\n    return corrdf","f61da47b":"threshold = 0.5\ncorr_value = getCorrelatedFeature(corrmat['SalePrice'], threshold)\ncorr_value.sort_values(by=['corr value'], ascending = False)\nlen(corr_value)","7158a2f8":"correlated_data = df[corr_value.index]\ncorrelated_data.head()","7bda2fa6":"fig, ax = plt.subplots(figsize=(15,10))\nsns.heatmap(correlated_data.corr(), annot=True, annot_kws={'size': 5})","08d0a10d":"corr_value = getCorrelatedFeature(corrmat['SalePrice'], threshold)\ncorr_value","0ebb94b2":"cols = correlated_data.columns\ncols","5d77a662":"sns.distplot(df['SalePrice'])\n","318b45d3":"sns.distplot(df.skew(),color='blue',axlabel ='Skewness')","6809c03d":"X = df.drop(labels=['SalePrice'], axis = 1)\ny = df['SalePrice']\n\n\n#log transform\ny= np.log1p(y)","4928f293":"#split df into train and test \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","452b9522":"from sklearn.model_selection import GridSearchCV\nimport joblib\nimport warnings\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore', category=DeprecationWarning)","178668ea":"def print_results(results):\n    print('BEST PARAMS: {}\\\\n'.format(results.best_params_))\n    means = results.cv_results_['mean_test_score']\n    stds = results.cv_results_['std_test_score']\n    for mean, std, params in zip(means, stds, results.cv_results_['params']):\n        print('{} (+\/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))","8af23c80":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\nlr.score(X_train, y_train)","f02d1fa0":"#feature scaling for ridge\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X_train)\nX_scaled = sc.transform(X_train)","2a28d176":"from sklearn.linear_model import Ridge\nridge = Ridge()\nridge.fit(X_scaled, y_train)\nridge.score(X_scaled, y_train)","0125b904":"parameters = {\n    'solver': ['cholesky', 'auto'],\n    'alpha': [0.1, 0.25, 0.5, 0.75, 1.0]\n}\n\ncv = GridSearchCV(ridge, parameters, cv=5)\ncv.fit(X_train, y_train)\nprint_results(cv)\n\nprint(cv.best_estimator_)\njoblib.dump(cv.best_estimator_, '..\/..\/..\/ridge_model.pkl')","4c58b188":"from sklearn.linear_model import Lasso\nlasso = Lasso()\n\nparameters = {\n    'alpha': [0.1, 0.25, 0.5, 0.75, 1.0]\n}\n\ncv = GridSearchCV(lasso, parameters, cv=5)\ncv.fit(X_train, y_train)\nprint_results(cv)\nprint('best estimator:', cv.best_estimator_)\njoblib.dump(cv.best_estimator_, '..\/..\/..\/lasso_model.pkl')","498696e0":"from sklearn.linear_model import ElasticNet\nen = ElasticNet(l1_ratio=0.5)\n\nparameters = {\n    'alpha': [0.1, 0.25, 0.5, 0.75, 1.0]\n}\n\ncv = GridSearchCV(en, parameters, cv=5)\ncv.fit(X_train, y_train)\nprint_results(cv)\nprint('best estimator:', cv.best_estimator_)\njoblib.dump(cv.best_estimator_, '..\/..\/..\/en_model.pkl')","2cfdf785":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor(max_depth = 2, min_samples_leaf=10)\ndtr.fit(X_scaled, y_train)\ndtr.score(X_scaled, y_train)","04aa4661":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor(max_depth=2, n_estimators=3, learning_rate=0.1)\ngbr.fit(X_train, y_train)\ngbr.score(X_train, y_train)","63a262aa":"gbrt = GradientBoostingRegressor(max_depth=3, n_estimators=120, random_state=42)\ngbrt.fit(X_train, y_train)\nprint(gbrt.score(X_train, y_train))","14a834c9":"import xgboost\nxgb_reg = xgboost.XGBRegressor(n_estimators = 550, random_state=42)\nxgb_reg.fit(X_train, y_train)\nprint(xgb_reg.score(X_train, y_train))","7948c48e":"##importance provides a score that indicates how useful or valuable each feature was in the construction of the boosted decision trees within the model##\nfrom xgboost  import plot_importance\nplt.rcParams['figure.figsize'] = [15, 25]\nplt.rcParams['figure.dpi'] = 200\nplot_importance(xgb_reg)\nplt.show()","92238dde":"y_pred=xgb_reg.predict(test_df)\ny_pred","cda32329":"#inverse log transform for real prediction values\ny_pred[y_pred<0] = 0\ny_pred = np.expm1(y_pred)\ny_pred","dd575a1a":"#make submission df\nprediction = pd.DataFrame(y_pred)\nsubmission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nprediction_df = pd.concat([submission['Id'], prediction], axis=1)\nprediction_df.columns=['Id','SalePrice']\nprediction_df.to_csv('sample_submission.csv',index=False)","7e0373fa":"Feature Selection","8b2b8d12":"Make Predictions","91971442":"Feature Importance and Selection","732b53fa":"Model Selection","da4b9205":"Data Cleaning ","f8f33307":"Encode Categorical Variables"}}