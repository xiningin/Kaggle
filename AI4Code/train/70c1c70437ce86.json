{"cell_type":{"f87557ac":"code","4d47f90b":"code","50ee83d1":"code","5c3b09d2":"code","0f4295a9":"code","c46ad1e5":"code","3407a065":"code","1df83537":"code","435b1a82":"code","8fddde57":"code","04b565de":"code","a4cd7316":"markdown","c1d72fc7":"markdown","0fd39274":"markdown","e70b31f6":"markdown"},"source":{"f87557ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d47f90b":"train_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\ntrain_data","50ee83d1":"X_test = test_data.copy()\nX = train_data.drop(['label'], axis = 1)\ny = train_data['label']","5c3b09d2":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, stratify = train_data['label'])","0f4295a9":"import matplotlib.pyplot as plt\n\ndef plot_digit(row):\n    some_digit = np.array(row)\n    some_digit_image = some_digit.reshape((28, 28))\n    plt.imshow(some_digit_image, cmap = plt.cm.binary)\n    plt.axis('off')\n    \nplot_digit(X_train.head(1))\ny_train.head(1)","c46ad1e5":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)","3407a065":"from sklearn.metrics import accuracy_score\n\ndef get_accuracy(model, X_train = X_train, y_train = y_train, X_val = X_val, y_val = y_val):\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_val)\n    return accuracy_score(y_val, y_pred)","1df83537":"from sklearn.tree import DecisionTreeClassifier\n\ntree_clf = DecisionTreeClassifier(random_state = 42)\ntree_clf_acc = get_accuracy(tree_clf)\ntree_clf_acc","435b1a82":"from sklearn.ensemble import RandomForestClassifier\n\nforest_clf = RandomForestClassifier(random_state = 42)\nforest_clf_acc = get_accuracy(forest_clf)\nforest_clf_acc","8fddde57":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf = KNeighborsClassifier(n_neighbors = 4, weights = 'distance')\nknn_clf_acc = get_accuracy(knn_clf)\nknn_clf_acc","04b565de":"X_test = scaler.transform(X_test)\ny_pred = knn_clf.predict(X_test)\n\nsubmission['Label'] = y_pred\nsubmission.to_csv('submission.csv',index = False)","a4cd7316":"## EDA","c1d72fc7":"## Random Forest Classifier","0fd39274":"## Decision Tree Classifier","e70b31f6":"## KNN"}}