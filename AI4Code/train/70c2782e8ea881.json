{"cell_type":{"bbe89bee":"code","570a3971":"code","10a01ca4":"code","f458ec7e":"code","9fae3c29":"code","5fbd6985":"markdown","fa41c75b":"markdown"},"source":{"bbe89bee":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path","570a3971":"df = pd.read_csv(\"..\/input\/test.csv\")\ndf.head()","10a01ca4":"weights_path = Path('..\/input\/..\/..')\nweight_list = os.listdir(weights_path)","f458ec7e":"batch_size = 1\ntta = 3\ntest_dataset = TestDataset(...)\ntest_loader = DataLoader(...)\ntotal_num_models = len(weight_list)*tta \n\nmodel = ...\nmodel.cuda()\n\n\nall_prediction = np.zeros((len(test_dataset), num_classes))\n\nfor i, weight in enumerate(weight_list):\n    print(\"fold {} prediction starts\".format(i+1))\n    \n    for _ in range(tta):\n        print(\"tta {}\".format(_+1))\n\n        model.load_state_dict(torch.load(weights_path \/ weight))\n\n        model.eval()\n        \n        prediction = np.zeros((len(test_dataset), num_classes)) # num_classes=196\n        with torch.no_grad():\n            for i, images in enumerate(test_loader):\n                images = images.cuda()\n\n                preds = model(images).detach()\n                prediction[i * batch_size: (i+1) * batch_size] = preds.cpu().numpy()\n                all_prediction = all_prediction + prediction\n    \nall_prediction \/= total_num_models\n","9fae3c29":"result = np.argmax(all_prediction, axis=1)\n\nsubmission = pd.read_csv('..\/input\/2019-3rd-ml-month-with-kakr\/sample_submission.csv')\nsubmission[\"class\"] = result\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","5fbd6985":"+ https:\/\/www.kaggle.com\/yangsaewon\/ka-kr-sillim-pytorch-baseline-updated-7-01\n+ \uc704 \ucee4\ub110\uc5d0 \uc774\uc5b4\uc11c inference \ucee4\ub110\uc744 \uc791\uc131\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. keras\ub3c4 \ub611\uac19\uc774 \uc801\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4.","fa41c75b":"+ ** \ub3c4\uc6c0 \ub418\uc168\uc73c\uba74 upvote \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4!**"}}