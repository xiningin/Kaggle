{"cell_type":{"53931537":"code","c9adade5":"code","9a24269e":"code","bd6ec2f1":"code","c25293b8":"code","4c97b5f5":"markdown"},"source":{"53931537":"from google.cloud import bigquery\nimport pandas as pd\n\n\nclient = bigquery.Client()\n\n# CALLS with NO Transfer of Value\n\nquery = \"\"\"\nSELECT\n  COUNT(traces.transaction_hash) AS call_no_transf_tx_count,\n  DATE(blocks.timestamp) AS tx_date\nFROM \n  `bigquery-public-data.crypto_ethereum.traces` AS traces\nJOIN `bigquery-public-data.crypto_ethereum.blocks` AS blocks\n    ON traces.block_number = blocks.number\nWHERE trace_type='call' \n  AND value = 0 \n  AND status = 1 \n  AND transaction_hash NOT IN (SELECT transaction_hash FROM `bigquery-public-data.crypto_ethereum.token_transfers`)\n\nGROUP BY tx_date\nHAVING tx_date >= '2018-01-01' AND tx_date <= '2019-12-31'\nORDER BY tx_date\n\"\"\"\nquery_job = client.query(query)\n\niterator = query_job.result(timeout=200)\nrows = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\ndf_call_no_transf = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n\ndf_call_no_transf.head(10)","c9adade5":"# CALLS WITH Transfer of Value\n\nquery = \"\"\"\nSELECT\n  COUNT(traces.transaction_hash) AS call_w_transf_tx_count,\n  DATE(blocks.timestamp) AS tx_date\nFROM \n  `bigquery-public-data.crypto_ethereum.traces` AS traces\nJOIN `bigquery-public-data.crypto_ethereum.blocks` AS blocks\n    ON traces.block_number = blocks.number\nWHERE (trace_type='call' \n  AND value > 0 \n  AND status = 1) \n  OR (transaction_hash IN (SELECT transaction_hash FROM `bigquery-public-data.crypto_ethereum.token_transfers`))\n\nGROUP BY tx_date\nHAVING tx_date >= '2018-01-01' AND tx_date <= '2019-12-31'\nORDER BY tx_date\n\"\"\"\nquery_job = client.query(query)\n\niterator = query_job.result(timeout=200)\nrows = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\ndf_call_w_transf = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n\ndf_call_w_transf.head()","9a24269e":"# Average Gas price per DAY in ETH\n\nquery = \"\"\"\nSELECT\n  AVG(transactions.gas_price\/POWER(10,18)) AS avg_gas_price,\n  DATE(blocks.timestamp) AS tx_date\nFROM \n  `bigquery-public-data.crypto_ethereum.transactions` AS transactions\nJOIN `bigquery-public-data.crypto_ethereum.blocks` AS blocks\n    ON transactions.block_number = blocks.number\n\nGROUP BY tx_date\nHAVING tx_date >= '2018-01-01' AND tx_date <= '2019-12-31'\nORDER BY tx_date\n\"\"\"\nquery_job = client.query(query)\n\niterator = query_job.result(timeout=200)\nrows = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\ndf_gas_price = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n\ndf_gas_price.head(10)","bd6ec2f1":"df_1 = pd.merge(df_gas_price, df_call_w_transf, on='tx_date')\ndf = pd.merge(df_1, df_call_no_transf, on='tx_date')\ndf.head(50)","c25293b8":"df.to_csv('Analysis.csv', index=False)","4c97b5f5":"Voil\u00e0. Same results. We have done a deep dive on the BigQueryHelper functions in [this kernel](https:\/\/www.kaggle.com\/mrisdal\/safely-analyzing-github-projects-popular-licenses)."}}