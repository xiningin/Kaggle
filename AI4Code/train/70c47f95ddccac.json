{"cell_type":{"6d213e59":"code","f5113819":"code","e42c2106":"code","47095a68":"code","f7459a36":"code","ad440ee3":"code","ace97e58":"code","0d2dbf09":"code","ff8b3eba":"code","c96104f5":"code","1a795749":"code","302650dc":"code","905b88d1":"code","85cdb24c":"code","9c340070":"markdown","8f2777b5":"markdown","86957f00":"markdown","f06a1a77":"markdown","bca05d40":"markdown","15ae57a6":"markdown"},"source":{"6d213e59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5113819":"data=pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")","e42c2106":"data","47095a68":"data[\"class\"].value_counts()#class groups","f7459a36":"Abnormal = data[data[\"class\"] != \"Normal\"] # Spondylolisthesis and Hernia                \nNormal = data[data[\"class\"]  == \"Normal\"] # Normal ","ad440ee3":"data[\"class\"]=[1 if each ==\"Normal\"  else 0 for each in data[\"class\"]]\n\ndata[\"class\"].value_counts()","ace97e58":"color_list = ['red' if i==0 else 'yellow' for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,\n                                       figsize= [22,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 200,\n                                       marker = '#\u00b9',\n                                       edgecolor= \"orange\")","0d2dbf09":"# scatter plot\nplt.scatter(Abnormal[\"degree_spondylolisthesis\"],Abnormal[\"pelvic_tilt\"],color=\"red\",label=\"kotu\",alpha= 0.8)\nplt.scatter(Normal[\"degree_spondylolisthesis\"],Normal[\"pelvic_tilt\"],color=\"yellow\",label=\"iyi\",alpha= 0.8)\nplt.xlabel(\"radius_mean\")\nplt.ylabel(\"texture_mean\")\nplt.legend()\nplt.show()","ff8b3eba":"\ny=data[\"class\"].values\n\nx_data=data.drop([\"class\"],axis=1)\n\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))","c96104f5":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)","1a795749":"# knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\" {} nn score: {} \".format(5,knn.score(x_test,y_test)))\n","302650dc":"score_list = []\nfor each in range(1,50):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,50),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","905b88d1":"print(\"max values; f(21)={0} and f(25)={1}\".format(score_list[21],score_list[25]))","85cdb24c":"neig = np.arange(1, 50)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn.fit(x_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn.score(x_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn.score(x_test, y_test))\n\n# Plot\nplt.figure(figsize=[13,8])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","9c340070":"### the highest ratio is in the values of 21 and 25.\n### Let's look at the highest rate that can occur.","8f2777b5":"### Let's create a chart to find the highest rate now.","86957f00":"### Since Spondylolisthesis and Hernia are abnormal conditions, we take both into the abnormal group.\n### as a result, normal = 100, abnormal = 210.","f06a1a77":"### Let's look at all the graphics that can occur and choose one and continue.","bca05d40":"### 1=normal\n### 0=Spondylolisthesis and Hernia ","15ae57a6":"### It is possible to show this in another way."}}