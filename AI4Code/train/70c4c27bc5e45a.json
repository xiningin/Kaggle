{"cell_type":{"2e6ea72d":"code","2cdb8893":"code","5c379d91":"code","76169229":"code","4c2927e4":"code","63f2e102":"code","8c4d61b3":"code","63e69067":"code","90e2e19e":"code","b98185dd":"markdown"},"source":{"2e6ea72d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cdb8893":"path = \"\/kaggle\/input\/wind-turbine-scada-dataset\/T1.csv\"\ndf= pd.read_csv(path)","5c379d91":"df.rename(columns={'Date\/Time':'Time','LV ActivePower (kW)':'ActivePower(kW)',\"Wind Speed (m\/s)\":\"WindSpeed(m\/s)\",\"Wind Direction (\u00b0)\":\"Wind_Direction\"},\n                inplace=True)\nsns.pairplot(df)","76169229":"corr = df.corr()\nplt.figure(figsize=(10, 8))\n\nax = sns.heatmap(corr, vmin = -1, vmax = 1, annot = True)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.show()\ncorr","4c2927e4":"df.drop(['Wind_Direction'],axis=1,inplace = True)\ndf[\"Time\"] = pd.to_datetime(df[\"Time\"], format = \"%d %m %Y %H:%M\", errors = \"coerce\")\ndf","63f2e102":"'''\nimport matplotlib.animation as animation\nk=10000\ncurr=0\ndef update(curr):\n    if curr == k: \n        a.event_source.stop()\n    plt.cla()\n    ax.plot(df['Time'][curr:100+curr],\n            df['Theoretical_Power_Curve (KWh)'][curr:100+curr],\n            color='purple',label = 'Predicted')\n\n    ax.plot(df['Time'][curr:100+curr],\n            df['ActivePower(kW)'][curr:100+curr],\n            color='green',label = 'Actual')\n\n    # Set title and labels for axes\n    ax.set(ylabel=\"Theoretical_Power and Actual Power Curve\",\n           xlabel=\"Time\",\n           title=\"Time vs Power_Curve\")\n\n    plt.legend(loc = 'lower right',prop = {'size' : 15} )\n    curr+=10\nfig, ax = plt.subplots(figsize=(20,10))\na = animation.FuncAnimation(fig, update,interval =1000)\n'''","8c4d61b3":"\ny = df['Theoretical_Power_Curve (KWh)']\nX = df[['ActivePower(kW)','WindSpeed(m\/s)']]\n\n\n'''\ny = df['ActivePower(kW)']\nX = df[['Theoretical_Power_Curve (KWh)','WindSpeed(m\/s)']]\n'''","63e69067":"from sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state = 0)","90e2e19e":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nforest_model = RandomForestRegressor(max_leaf_nodes =500, random_state=1)\nforest_model.fit(train_X, train_y)\npower_preds = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, power_preds))","b98185dd":"# The heat map clearly tells us that there's no realtion between wind direction and the Power generated but Wind speed, Theoritical power and Actual power generated have a very positive correlation"}}