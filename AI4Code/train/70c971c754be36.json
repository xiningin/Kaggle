{"cell_type":{"be97d3cb":"code","c332e5a8":"code","a6dcf2dc":"code","af5bd120":"code","fc2115b5":"code","b8826322":"code","f84878a5":"code","c8057128":"code","816745f0":"code","8355d99b":"markdown","36bcc54b":"markdown"},"source":{"be97d3cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c332e5a8":"!pip install apyori","a6dcf2dc":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","af5bd120":"#importing the dataset\nds = pd.read_csv('..\/input\/market-basket-optimisation\/market basket optimisation.csv', header = None)\ntransactions = []\nfor i in range(0,7501):\n    transactions.append([str(ds.values[i,j]) for j in range(0, 20)])","fc2115b5":"#training apriori model on the dataset\nfrom apyori import apriori\nrules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2, max_length = 2)","b8826322":"#Displaying the first results coming directly from output of the apriori function\nresults = list(rules)\nresults","f84878a5":"#putting results in organised Pandas DataFrame\ndef inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n    confidences = [result[2][0][2] for result in results]\n    lifts       = [result[2][0][3] for result in results]\n    return list(zip(lhs, rhs, supports, confidences, lifts))\nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])","c8057128":"#displaying the results non-sorted\nresultsinDataFrame","816745f0":"#displaying the results sorted in descending fits\nresultsinDataFrame.nlargest(n = 10, columns = 'Lift')","8355d99b":"**Apriori Algorithm - Association Rule Learning** suggests what customers will buy, based on past purchases (i.e, dataset containing 7500 values)","36bcc54b":"**Visualising the results**"}}