{"cell_type":{"4d58a5a7":"code","f1c1818c":"code","4779c49c":"code","b382046d":"code","3558fdbc":"code","fa9c4806":"code","7b377f4a":"code","484245fb":"code","23df968e":"code","141beb96":"code","7b5f9d88":"code","ec8c7577":"code","cf2b4c7b":"code","5ad27fc1":"code","77aa5c35":"code","aecdaa23":"code","a8f2b14b":"code","f484276e":"code","e7a22029":"code","c03eaca0":"code","19283509":"markdown","9494a8aa":"markdown","09a6e373":"markdown","7e105afe":"markdown","27e39b0c":"markdown","ad5e77b4":"markdown","876da914":"markdown","7653c7ff":"markdown","76c73421":"markdown","f70e9bb1":"markdown","447514f6":"markdown","dcb432fb":"markdown","c4a45c16":"markdown","8afa1377":"markdown","2e81594b":"markdown","32638e8e":"markdown","f1d17104":"markdown","1e145495":"markdown","b583b578":"markdown"},"source":{"4d58a5a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1c1818c":"data = pd.read_csv('\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv')\n\ndata.head()","4779c49c":"data.info()","b382046d":"data.describe()","3558fdbc":"cardinality = {}\n\nfor col in data:\n    cardinality[col] = data[col].nunique()\n\ncardinality","fa9c4806":"missing = data.isna().sum() * 100 \/ data.shape[0]\n\nmissing","7b377f4a":"rorder = data.Region.unique()\n\nrorder","484245fb":"data.Day.unique()","23df968e":"zeroday = data[data.Day == 0]\n\nzeroday","141beb96":"data = data[data.Day != 0]","7b5f9d88":"morder = data.Month.unique()\n\nmorder","ec8c7577":"yorder = data.Year.unique()\n\nyorder","cf2b4c7b":"wrongyear = data[(data.Year <= 201)]\n\nwrongyear.describe()","5ad27fc1":"data.Year = data.Year.replace(200, 2000).replace(201, 2001)\ndata = data[data.AvgTemperature != -99]","77aa5c35":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","aecdaa23":"region_ymin = data.groupby(['Region', 'Year'])['AvgTemperature'].min().reset_index()\nregion_ymax = data.groupby(['Region', 'Year'])['AvgTemperature'].max().reset_index()\n\nregion_year = data.groupby(['Region', 'Year'])['AvgTemperature'].mean().reset_index()\nregion_year['MinTemperature'] = region_ymin.AvgTemperature\nregion_year['MaxTemperature'] = region_ymax.AvgTemperature\n\nregion_year.head()","a8f2b14b":"fig = px.bar(region_year, y = 'Region', x = 'AvgTemperature', color = 'Region', animation_frame = 'Year', hover_name = 'AvgTemperature', range_x = [0, 100],\n             labels = {'AvgTemperature': 'Average Temperature'}, title = 'Annual Global Temperature Fluctuations')\n\nfig.show()","f484276e":"sns.set_style('whitegrid')\n\nsns.relplot(x = 'Year', y = 'AvgTemperature', hue = 'Region', data = region_year, hue_order = rorder, kind = 'line', markers = \"<\", height = 6, aspect = 2, palette = 'colorblind')\nplt.xlabel('Year')\nplt.ylabel('Average Temperature')\nplt.title('Averagre Temperatures by Region per Year')\nplt.show()\n","e7a22029":"fig = plt.figure(figsize = (20, 30))\nsns.set_style('darkgrid')\n\nfor i in range(1, 8):\n    ax = fig.add_subplot(7, 1, i)\n    ax = sns.boxplot(data = data[data.Region == rorder[i - 1]], x = 'Year', y = 'AvgTemperature')\n    ax.set_ylim(-50, 120)\n    if i == 7:\n        plt.xlabel('Year')\n    else:\n        plt.xlabel('')\n    plt.ylabel(rorder[i - 1])\nplt.show()","c03eaca0":"fig = plt.figure(figsize = (30, 15))\nsns.set_style('darkgrid')\nsns.set_context(\"paper\")\n\n\nfor i in range(1, 8):\n    ax = fig.add_subplot(1, 7, i)\n    ax = sns.lineplot(data = region_year[region_year.Region == rorder[i - 1]], x = 'Year', y = 'MinTemperature')\n    ax = sns.lineplot(data = region_year[region_year.Region == rorder[i - 1]], x = 'Year', y = 'AvgTemperature')\n    ax = sns.lineplot(data = region_year[region_year.Region == rorder[i - 1]], x = 'Year', y = 'MaxTemperature')\n    ax.set_ylim(-55, 120)\n    plt.xlabel(rorder[i - 1])\n    if i == 1:\n        plt.ylabel('Temperature')\n    else:\n        plt.ylabel('')\n    if i == 4:\n        plt.title('Distribution of Minimum, Average and Maximum Temperatures observed annualy by Region')    \nplt.show()        ","19283509":"**Column: Region**","9494a8aa":"**Cardinality**","09a6e373":"# Data Visualisation and Analysis","7e105afe":"**Distribution of global temperatures recorded by region and year**","27e39b0c":"During the exploration we notice that there are entries with -99 degrees as Average Temperature, which is incorrect. Hence we drop all such entries.","ad5e77b4":"**Column: Month**","876da914":"The entries **200 & 201** are incorrect. It probably is due to human error and mistypes. Hence we replace 200 with *2000* and 201 with *2001*.","7653c7ff":"**Animation of annual fluctuations in global temperatures**","76c73421":"**Missing data**","f70e9bb1":"**Column: Day**","447514f6":"# Data Exploration","dcb432fb":"**Column: Year**","c4a45c16":"**Annual fluctuations in maximum, minimum and average global temperatures by region and year**","8afa1377":"We group the data by Region to analyse temperature fluctuations.","2e81594b":"**Fluctuations in global temperatures by region**","32638e8e":"So far we have analysed annual fluctuations in the data. I will soon work on monthly and daily fluctuations to complete the project and provide a holistic conclusion. Thank you.","f1d17104":"# Import dataset","1e145495":"# Data Preprocessing","b583b578":"The **0** entries are incorrect as no month of the year has 0 as the date. Hence we drop all the entries with Day = 0."}}