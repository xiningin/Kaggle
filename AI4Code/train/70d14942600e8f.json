{"cell_type":{"257649ff":"code","6941928d":"code","e36ba491":"code","dfa2cc30":"code","ace48285":"code","0e2b7be6":"code","0e2b307f":"code","79f1bafc":"code","de3cb9ab":"code","9c442477":"code","576ce948":"code","7696dcf7":"code","2f196073":"code","afa20b4a":"code","95ba1d2d":"code","c432d03a":"code","77ac156b":"code","e62e9dba":"code","8a4da655":"code","41a9a359":"code","3424c129":"code","0d5e2b5a":"code","13ee4076":"code","92ed8be1":"code","76a98703":"code","0ed6849c":"code","8bca258f":"code","9edcc4ed":"code","789a825d":"code","9db3b602":"code","3143c94e":"code","b480c16f":"code","574095cc":"code","21d43525":"code","55327216":"code","25d6a0eb":"code","21317fd3":"code","6d77e01d":"code","7c8d2834":"code","3621f26d":"code","39f6fdf6":"code","d830b1ee":"code","74369708":"code","76b56c03":"code","922683f2":"code","be269097":"code","c07bc2f6":"code","0f500f77":"code","2639699e":"code","08b31639":"code","d466f24d":"code","def2762c":"code","28e8b972":"code","c0395758":"code","bf021302":"code","0c5b4ab3":"code","65440822":"code","a8501d1f":"code","c636aa05":"code","cdf64d73":"code","089637d5":"code","ee3cfa7d":"code","85f7acb8":"code","bb063006":"code","0f20d57d":"code","02e1f207":"code","fbe1aa11":"code","051464bc":"code","817a9027":"code","96edff13":"code","8405a5c9":"code","3e0eddb7":"markdown","25600a5e":"markdown","e745718c":"markdown","f2e18538":"markdown","d8319f10":"markdown","dbcbb488":"markdown","d04b8db1":"markdown","29b589f6":"markdown","d6f6c996":"markdown","319730e1":"markdown","8b66ee93":"markdown","040ec605":"markdown","d4e4bb9a":"markdown","9485ac2a":"markdown","543cd5db":"markdown","175167eb":"markdown","3624cdc3":"markdown","01f62cf4":"markdown","2f1fb313":"markdown","97edd255":"markdown","71117640":"markdown","ba073dfc":"markdown","ab75bc8e":"markdown","fa8f1194":"markdown","6c593b8d":"markdown","cbed4eea":"markdown","54fc4154":"markdown","7af130b7":"markdown","3021bbc9":"markdown","49726f1c":"markdown","c5034447":"markdown","dbec614d":"markdown","e0316c3d":"markdown","ebf21153":"markdown","769bf979":"markdown","e9104332":"markdown","296477db":"markdown","33839710":"markdown"},"source":{"257649ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6941928d":"import matplotlib.pyplot as plt\nimport seaborn as sns","e36ba491":"df1 = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","dfa2cc30":"df1.head()","ace48285":"df1.isnull().sum()","0e2b7be6":"df1.describe()","0e2b307f":"sns.countplot(df1['Gender'])","79f1bafc":"df1['Age'].value_counts().head()","de3cb9ab":"ageplot = sns.distplot(df1['Age'],bins=5)","9c442477":"sns.boxplot(x='Gender',y='Age',data=df1)","576ce948":"sns.distplot(df1['Annual Income (k$)'],bins=7)","7696dcf7":"sns.boxplot(x='Gender',y='Annual Income (k$)',data=df1)","2f196073":"sns.distplot(df1['Spending Score (1-100)'],bins=20)","afa20b4a":"sns.boxplot(x='Gender',y='Spending Score (1-100)',data=df1)","95ba1d2d":"sns.displot(data=df1,x='Annual Income (k$)',y='Spending Score (1-100)')\n#plt.plot(x='Annual Income (k$)',y='Spending Score (1-100)',data=df1)\nsns.jointplot(x='Annual Income (k$)',y='Spending Score (1-100)',data=df1,hue='Gender')","c432d03a":"sns.displot(data=df1,x='Age',y='Spending Score (1-100)')\nsns.jointplot(x='Age',y='Spending Score (1-100)',data=df1,hue='Gender')","77ac156b":"sns.displot(data=df1,x='Age',y='Annual Income (k$)')\nsns.jointplot(x='Age',y='Annual Income (k$)',data=df1,hue='Gender')","e62e9dba":"sns.heatmap(df1.drop(['CustomerID'],axis=1).corr(),annot=True)","8a4da655":"df2 = df1.drop(columns=['CustomerID'])","41a9a359":"from sklearn.cluster import KMeans,DBSCAN\nfrom sklearn.metrics import silhouette_score,silhouette_samples\nfrom yellowbrick.cluster import KElbowVisualizer","3424c129":"df2.head()","0d5e2b5a":"from sklearn.preprocessing import MinMaxScaler","13ee4076":"scaler = MinMaxScaler()  \ndef Normalize(df):\n  for each in df.columns.tolist():\n    if str(df[each].dtypes) == 'int64':\n      df[each] = scaler.fit_transform(df[each].values.reshape(-1,1))","92ed8be1":"Normalize(df2)","76a98703":"df2['Gender'] = df2['Gender'].apply(lambda x: 1 if x == \"Male\" else 0)","0ed6849c":"df2.head()","8bca258f":"X = df2[['Annual Income (k$)','Spending Score (1-100)']]","9edcc4ed":"inertia = []\nfor n in range(3,11):\n  clstr = KMeans(n_clusters=n,init='k-means++',random_state=42)\n  clstr.fit(X)\n  inertia.append(clstr.inertia_)","789a825d":"plt.figure(figsize=(15,6))\nplt.plot(np.arange(3,11),inertia,'-')\nplt.plot(np.arange(3,11),inertia,'o',c='r')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia')\nplt.title('Elbow Plot')\nplt.show()","9db3b602":"clstr1 = KMeans(n_clusters=5,init='k-means++',random_state=42)\nclstr1.fit(X)\nlabels1 = clstr1.labels_\ncentroids1 = clstr1.cluster_centers_\nX['Clusters'] = labels1","3143c94e":"plt.figure(figsize=(10,8))\nplt.scatter(X['Annual Income (k$)'],X['Spending Score (1-100)'],c=labels1,s=50,cmap='viridis')\nplt.scatter(centroids1[:,0],centroids1[:,1],marker='^',c='black',s=200,alpha=0.5)\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.title('AnnualIncome vs SpendingScore')\nplt.grid(False)\nplt.show()","b480c16f":"silhouette_score(X[['Annual Income (k$)','Spending Score (1-100)']],X['Clusters'])","574095cc":"silh_score = []\nfor k in range(2,7):\n  fig,ax = plt.subplots(1,2,figsize=(15,5))\n  km = KMeans(n_clusters=k,init='k-means++',random_state=42)\n  clstr2 = km.fit(X[['Annual Income (k$)','Spending Score (1-100)']])\n  labels2 = clstr2.labels_\n  centroids2 = clstr2.cluster_centers_\n  silhoute_vals = silhouette_samples(X[['Annual Income (k$)','Spending Score (1-100)']],labels2)\n  silh_score.append(silhouette_score(X[['Annual Income (k$)','Spending Score (1-100)']],labels2,metric='euclidean'))\n\n  y_ticks = []\n  y_lower = y_upper = 0\n  for i,cluster in enumerate(np.unique(labels2)):\n    cluster_silhouette_vals = silhoute_vals[labels2 == cluster]\n    cluster_silhouette_vals.sort()\n    y_upper +=len(cluster_silhouette_vals)\n\n    ax[0].barh(range(y_lower,y_upper),cluster_silhouette_vals,height =1)\n    \n    ax[0].text(-0.03,(y_lower+y_upper)\/2,str(i+1))\n    y_lower += len(cluster_silhouette_vals)\n\n    avg_score = np.mean(silhoute_vals)\n    ax[0].axvline(avg_score,linestyle ='--',linewidth =2,color = 'green')\n    ax[0].set_yticks([])\n    ax[0].set_xlim([-0.1, 1])\n    ax[0].set_xlabel('Silhouette coefficient values')\n    ax[0].set_ylabel('Cluster labels')\n    ax[0].set_title('Silhouette plot for the various clusters');\n\n\n    ax[1].scatter(X['Annual Income (k$)'],X['Spending Score (1-100)'] , c = labels2,cmap='viridis');\n    ax[1].scatter(centroids2[:,0],centroids2[:,1],marker = '^' , c= 'r',s =250);\n    ax[1].set_xlabel('Annual Income')\n    ax[1].set_ylabel('Spending Score')\n    ax[1].set_title('Visualization of clustered data', y=1.02)\n\n    plt.tight_layout()\n    plt.suptitle(f' Silhouette analysis using k = {k}',fontsize=16,fontweight = 'semibold')\n","21d43525":"plt.scatter(np.arange(2,7),silh_score)","55327216":"min_pts =6 # choosing minpts depends on the domain or can be choosen by looking at the spread of data\n\n#calculating epsilon\nfrom sklearn.neighbors import NearestNeighbors\nnbrs = NearestNeighbors(n_neighbors=min_pts,metric='euclidean').fit(X[['Annual Income (k$)','Spending Score (1-100)']])\ndistances,indices = nbrs.kneighbors(X[['Annual Income (k$)','Spending Score (1-100)']])\ndistances = np.sort(distances,axis=0)\ndistances = distances[:,5]\nplt.plot(distances)\nplt.show()","25d6a0eb":"epsilon = 0.09 # from the above plot there is increase after elbow point 0.09","21317fd3":"from sklearn.cluster import DBSCAN\ndbscan = DBSCAN(eps=epsilon,min_samples=min_pts).fit(X[['Annual Income (k$)','Spending Score (1-100)']])\nlabels3 = dbscan.labels_","6d77e01d":"pd.Series(labels3).value_counts()","7c8d2834":"plt.scatter(X['Annual Income (k$)'],X['Spending Score (1-100)'],c=labels3,cmap='viridis')","3621f26d":"colors_map = {-1:'black',0:'green',1:'blue',2:'red',3:'yellow',4:'brown',5:'purple',6:'cyan'}\ncolorlist = ['green','blue','red','yellow','brown','purple','cyan']","39f6fdf6":"X['dbscan_clusters'] = labels3\nY = X[X['dbscan_clusters']!=-1]","d830b1ee":"for each in range(0,pd.Series(labels3).nunique()-1):\n  fig,ax = plt.subplots(1,1,figsize=(7,4))\n  ax.scatter(X[(X['dbscan_clusters']==-1)|(X['dbscan_clusters']==each)]['Annual Income (k$)'],\n              X[(X['dbscan_clusters']==-1)|(X['dbscan_clusters']==each)]['Spending Score (1-100)'],\n              c=X[(X['dbscan_clusters']==-1)|(X['dbscan_clusters']==each)]['dbscan_clusters'].map(lambda a:colors_map[a]))\n  plt.title('distribution of {} cluster and noise around'.format(each))","74369708":"silh_score = []\n#for k in range(2,7):\nfig,ax = plt.subplots(1,1,figsize=(15,5))\n\nsilhoute_vals = silhouette_samples(Y[['Annual Income (k$)','Spending Score (1-100)']],Y['dbscan_clusters'])\n#silh_score.append(silhouette_score(Y[['Annual Income (k$)','Spending Score (1-100)']],Y['dbscan_clusters'],metric='euclidean'))\n\ny_ticks = []\ny_lower = y_upper = 0\n\nfor i,cluster in enumerate(np.unique(Y['dbscan_clusters'])):\n  cluster_silhouette_vals = silhoute_vals[Y['dbscan_clusters'] == cluster]\n  cluster_silhouette_vals.sort()\n  y_upper +=len(cluster_silhouette_vals)\n\n  ax.barh(range(y_lower,y_upper),cluster_silhouette_vals,height =1)\n    \n  ax.text(-0.03,(y_lower+y_upper)\/2,str(i))\n  y_lower += len(cluster_silhouette_vals)\n\n  avg_score = np.mean(silhoute_vals)\n  ax.axvline(avg_score,linestyle ='--',linewidth =2,color = 'green')\n  ax.set_yticks([])\n  ax.set_xlim([-0.1, 1])\n  ax.set_xlabel('Silhouette coefficient values')\n  ax.set_ylabel('Cluster labels')\n  ax.set_title('Silhouette plot for the various clusters');\n\n  plt.tight_layout()","76b56c03":"silhouette_score(Y[['Annual Income (k$)','Spending Score (1-100)']],Y['dbscan_clusters'],metric='euclidean')","922683f2":"X.head()","be269097":"df1['Kmean_cluster'] = X['Clusters']","c07bc2f6":"df1.head()","0f500f77":"clstrAnalysis = df1.groupby(['Kmean_cluster'])['Annual Income (k$)','Spending Score (1-100)'].agg({'Annual Income (k$)':['min',np.mean,'max'],'Spending Score (1-100)':['min',np.mean,'max']})","2639699e":"clstrAnalysis","08b31639":"z = pd.DataFrame(np.hstack((np.array(clstrAnalysis['Annual Income (k$)']['mean'].rank()).reshape((-1,1)),\n                            np.array(clstrAnalysis['Spending Score (1-100)']['mean'].rank()).reshape((-1,1)))),\n                 columns=['RankA.Income','RankSpendScore'])","d466f24d":"clstrAnalysis2 = pd.concat([clstrAnalysis,z],axis=1)","def2762c":"clstrAnalysis2","28e8b972":"plt.scatter(clstrAnalysis2['RankA.Income'],clstrAnalysis2['RankSpendScore'])\nplt.xlabel('RankA.Income')\nplt.ylabel('RankSpendScore')","c0395758":"width=0.25\nplt.bar(clstrAnalysis2.index,clstrAnalysis2.iloc[:,1],width=width,label='mean Annual Income')\nplt.bar(clstrAnalysis2.index+width,clstrAnalysis2.iloc[:,4],width=width,label='mean Spending Score')\nplt.ylabel('AnnualIncome-SpendingScore')\nplt.xlabel('Cluster')\nplt.legend()\nplt.show()","bf021302":"X = df2[['Age','Annual Income (k$)','Spending Score (1-100)']]","0c5b4ab3":"X.head()","65440822":"inertia = []\nfor n in range(2,11):\n  clstr = KMeans(n_clusters=n,init='k-means++',random_state=42)\n  clstr.fit(X)\n  inertia.append(clstr.inertia_)","a8501d1f":"plt.figure(figsize=(15,6))\nplt.plot(np.arange(2,11),inertia,'-')\nplt.plot(np.arange(2,11),inertia,'o',c='r')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia')\nplt.title('Elbow Plot')\nplt.show()","c636aa05":"clstr1 = KMeans(n_clusters=4,init='k-means++')\nclstr1.fit(X)\nlabels1 = clstr1.labels_\ncentroids1 = clstr1.cluster_centers_\nX['Clusters'] = labels1","cdf64d73":"import plotly.express as px\nfig = px.scatter_3d(X,x='Age',y='Annual Income (k$)',z='Spending Score (1-100)',color=pd.Series(labels1).map(lambda a:colors_map[a]))\nfig.show()","089637d5":"silh_score = []\nfor k in range(2,8):\n  fig,ax = plt.subplots(1,1,figsize=(15,5))\n  km = KMeans(n_clusters=k,init='k-means++')\n  clstr2 = km.fit(X[['Age','Annual Income (k$)','Spending Score (1-100)']])\n  labels2 = clstr2.labels_\n  centroids2 = clstr2.cluster_centers_\n  silhoute_vals = silhouette_samples(X[['Age','Annual Income (k$)','Spending Score (1-100)']],labels2)\n  silh_score.append(silhouette_score(X[['Age','Annual Income (k$)','Spending Score (1-100)']],labels2,metric='euclidean'))\n\n  y_ticks = []\n  y_lower = y_upper = 0\n  for i,cluster in enumerate(np.unique(labels2)):\n    cluster_silhouette_vals = silhoute_vals[labels2 == cluster]\n    cluster_silhouette_vals.sort()\n    y_upper +=len(cluster_silhouette_vals)\n\n    ax.barh(range(y_lower,y_upper),cluster_silhouette_vals,height =1)\n    \n    ax.text(-0.03,(y_lower+y_upper)\/2,str(i+1))\n    y_lower += len(cluster_silhouette_vals)\n\n    avg_score = np.mean(silhoute_vals)\n    ax.axvline(avg_score,linestyle ='--',linewidth =2,color = 'green')\n    ax.set_yticks([])\n    ax.set_xlim([-0.1, 1])\n    ax.set_xlabel('Silhouette coefficient values')\n    ax.set_ylabel('Cluster labels')\n\n\n    plt.tight_layout()\n    plt.suptitle(f' Silhouette analysis using k = {k}',fontsize=16,fontweight = 'semibold')\n","ee3cfa7d":"plt.scatter(np.arange(2,8),silh_score)\nplt.xlabel('cluster')\nplt.ylabel('silhouette_score')","85f7acb8":"df1['cluster_labels2'] = labels1","bb063006":"df1['cluster_labels2'].value_counts()","0f20d57d":"df1.groupby(['cluster_labels2'])['Age','Annual Income (k$)','Spending Score (1-100)'].agg({'Age':['min',np.mean,'max'],'Annual Income (k$)':['min',np.mean,'max'],'Spending Score (1-100)':['min',np.mean,'max']})","02e1f207":"clstrAnalysis = df1.groupby(['cluster_labels2'])['Age','Annual Income (k$)','Spending Score (1-100)'].agg({'Age':['min',np.mean,'max'],'Annual Income (k$)':['min',np.mean,'max'],'Spending Score (1-100)':['min',np.mean,'max']})","fbe1aa11":"z = pd.DataFrame(np.hstack((np.array(clstrAnalysis['Age']['mean'].rank()).reshape((-1,1)),\n                            np.array(clstrAnalysis['Annual Income (k$)']['mean'].rank()).reshape((-1,1)),\n                            np.array(clstrAnalysis['Spending Score (1-100)']['mean'].rank()).reshape((-1,1)))),\n                 columns=['RankAge','RankA.Income','RankSpendScore'])","051464bc":"clstrAnalysis2 = pd.concat([clstrAnalysis,z],axis=1)","817a9027":"clstrAnalysis2","96edff13":"fig = px.scatter_3d(clstrAnalysis2,x='RankAge',y='RankA.Income',z='RankSpendScore')\nfig.show()","8405a5c9":"width=0.25\nplt.bar(clstrAnalysis2.index-width,clstrAnalysis2.iloc[:,1],width=width,label='AgeRank')\nplt.bar(clstrAnalysis2.index,clstrAnalysis2.iloc[:,4],width=width,label='RankIncome')\nplt.bar(clstrAnalysis2.index+width,clstrAnalysis2.iloc[:,7],width=width,label='RankSpendScore')\nplt.ylabel('Age-AnnualIncome-SpendingScore')\nplt.xlabel('Cluster')\nplt.legend()\nplt.show()","3e0eddb7":"## Validating Clusters with Silhouette Score","25600a5e":"Costumers are more of Female gender","e745718c":"## **With DBScan**","f2e18538":"Incase of noisy data. Its better to use DBSCAN algorithm for clustering with which we can seperate out noisy data.\n","d8319f10":"## **Preprocessing Data**","dbcbb488":"since age has shown some pattern along with Spending , lets include Age to check whether we can form some interpretable clusters","d04b8db1":"## Annual Income","29b589f6":"## **Cluster Analysis**","d6f6c996":"## **Including Age**","319730e1":"we observe that median age of Male customers is greater than Female customers and more distributed as well compared to Female customers.","8b66ee93":"### Scaling the data","040ec605":"clusters are ranked according to mean values of Age,Income,SpendingScore where 1 being the least mean ","d4e4bb9a":"Insights from the above plot. It looks like we can form 5 clusters as follows\n\n*     low income, low spending\n*     low income high spending\n*     High income low spending\n*     High income , high spending\n*     Medium income, and Medium Spending (this is where the most of the distribution lies from the above plot)\n\nLooks like Gender is of no importance as its not showing any particular pattern in the above plot.\n","9485ac2a":"## **AnnualIncome Vs SpendingScore**","543cd5db":"## Gender","175167eb":"\n*     Spending Score is less when the age>60\n*     No clear relation with gender\n\n","3624cdc3":"We can stick with number of clusters as 4 even though silhouette score is less when compared to 5 and 6 but the silhouette values are all positive which is not the case with 5 and 6 clusters.","01f62cf4":"From the above plot it is clear that number of clusters 5 would be valid as discussed.","2f1fb313":"## Spending Score","97edd255":"Two parameters to be defined for DBSCAN\n\n*   Minpts: Mininum points that a given point should have to be considered as core point \n*   Epsilon: with point at center of circle neighbor hood is considered when the other point lie inside the radius of epsilon units. Epsilon is calculated by maximum optimal  distance between nneighbours to the points.","71117640":"* we observe that customers with income range around 50-75k $ are more in number\n* Mean Annual income of Male customers is more but Female customers Annual Income is more distributed compared to Male.\n\n","ba073dfc":"## **ClusterAnalysis**","ab75bc8e":"\n\n*     No Clear insights from the above distribution.\n*     Every point of Age covered almost all points of Annual Income\n*     Seems to be a uniform distribution\n\n","fa8f1194":"From the above plot we can define the clusters as following:\n\n*   Cluster3:Customers with Less income and High spending score,Less Income with mean of 25k$ and high spending score of mean about 79\n\n*   Cluster0: Customers with Average Income and Average Spending Score when compared to other customers, Mean of Inome is around 55k$ and mean Spending Score of 49\n\n*   Cluster1 :Customers with high income and very less expenditure, Mean of income is around 88k and mean spending score is around 17\n\n*   Cluster4:Customers with high income and high expenditure, mean of income is around 86k$ and mean spending score around 82\n\n*   Cluster2:Customers with less income and less expenditure, mean of income is around 26k$ and mean spending score around 20","6c593b8d":"Observations\n\n*     customers with spending in between 40-60 are more in number.\n*     Medain Spending is almost same for both the genders and Spending score is more distributed incase of Male Gender.\n\n","cbed4eea":"silhouette score shows the similarity score of point with others in its own cluster.","54fc4154":"Age lies between 18-70.\n\nAnnual income lies between 15k\u2212137k.\n\nspending score lies between 1 and 99\n","7af130b7":"## With K-Means","3021bbc9":"clusters 2,3,4 having all silhouette scores in positive 5,6 clusters might have some points wrongly clustered which can be seen in respective clusters in the above plot with negative values","49726f1c":"\nInference from EDA:\n\n*     There appaers to have slight negative correlation between Age and Spending\n*     Age neither followed any pattern nor formed amny clusters w.r.t Age,Spending or income.\n*     There appears to be clear cluster formation incase of Spendinhg and Income\n\n","c5034447":"Since AnuualIncome vs Spending Score has shown some pattern. Let's See the segmentation using income vs spending score","dbec614d":"## validating clusters with Silhouette Score","e0316c3d":"From the above plots we can interpret the clusters as following\n\n*     Cluster0:Customers with minimum age group(mean 25) ,less income(mean 40) and medium spending score(mean 60).\n*     Cluster1:Customers with medium Age(mean 32), high Income(mean 86) and High Sending Score(mean 81)\n*     Cluster2:Customers with High Age(mean 53), medium income(mean 47) and Average Spending Score(mean 39).\n*     Cluster3:Customers with medium Age(mean 39),High Income(mean86) and Minimum Spending Score(mean 19).\n\nevery cluster is unique.\n","ebf21153":"## Age","769bf979":"From the above silhouette score mapping , it is clear that average distance of few points from cluster 2 is closest to cluster 1 than cluster 2.This might be due to difference in cluster size of 1 and 2\n\nDBSCAN is best when the clusters are in arbitary shape and since the name itself is density based it works well when the clusters are cllosely paked and of any shape.\n\nSilhouette score of 0.5 is significant enough to consider clusters formed and it is similar to score obtained in the K-Means cluster\n","e9104332":"### Validation using Silhouette score","296477db":"## **EDA**","33839710":"even though silhouette score is high for k = 5 , the silhouette plot for k = 5 showing neagative values for few points which shows average inter cluster distance of particular points greater than distance within the cluster. This might be due to noisy data that got clustered which are considered as outliers for particualr clusters "}}