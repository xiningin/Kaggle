{"cell_type":{"4eb05125":"code","b5d64540":"code","9e0dd4c1":"code","c578bd1e":"code","a1ef401f":"code","7df5e68f":"code","486fdeaf":"code","93fa0321":"code","da91bc51":"code","d9c3bcd4":"code","6e2fe075":"code","46427c2c":"code","ec116df1":"code","b1911394":"code","77290b86":"code","a2d0141f":"code","186117af":"code","beb810bc":"code","b32e51b8":"code","da7d3f9b":"code","e553eefa":"code","479db38a":"code","e89987f7":"code","7df80c4b":"code","2c925fbc":"markdown","6e953b1a":"markdown","ea5f9d67":"markdown","4068e88e":"markdown","8f7e57a0":"markdown","7e504769":"markdown","8d88f099":"markdown","7fa4421e":"markdown","5ed62f9e":"markdown","42138c57":"markdown","574ea4c1":"markdown","c5e00aa9":"markdown","bce8417e":"markdown","7b9ae806":"markdown","2d62e0c4":"markdown","3e74ac81":"markdown","8c64441f":"markdown"},"source":{"4eb05125":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5d64540":"df = pd.read_csv('\/kaggle\/input\/generated-user-data-for-recommendation\/file3.csv')","9e0dd4c1":"df.head()","c578bd1e":"df['rating'].value_counts()[:50].plot()","a1ef401f":"from surprise import Reader\nfrom surprise import SVD\nfrom surprise import Dataset\nfrom surprise.model_selection import cross_validate\nfrom surprise.model_selection import train_test_split\n","7df5e68f":"reader = Reader()","486fdeaf":"data = Dataset.load_from_df(df[['UserId', 'ArticleId_served', 'rating']], reader)","93fa0321":"dataset = data.build_full_trainset()\nprint('Number of users: ',dataset.n_users,'\\n')\nprint('Number of items: ',dataset.n_items)","da91bc51":"from surprise import SVD\nfrom surprise import SVDpp\nfrom surprise import NMF\nfrom surprise import NormalPredictor\nfrom surprise import KNNBaseline\nfrom surprise import KNNBasic\nfrom surprise import KNNWithMeans\nfrom surprise import BaselineOnly\nfrom surprise import CoClustering\n\nbenchmark = []\n# Iterate over all algorithms\nfor algorithm in [SVD(), SVDpp(), NMF(), NormalPredictor(), KNNBaseline(), KNNBasic(), KNNWithMeans(), BaselineOnly(), CoClustering()]:\n    # Perform cross validation\n    results = cross_validate(algorithm, data, measures=['RMSE'], cv=3, verbose=False)\n    \n    # Get results & append algorithm name\n    tmp = pd.DataFrame.from_dict(results).mean(axis=0)\n    tmp = tmp.append(pd.Series([str(algorithm).split(' ')[0].split('.')[-1]], index=['Algorithm']))\n    benchmark.append(tmp)\n    \npd.DataFrame(benchmark).set_index('Algorithm').sort_values('test_rmse')  ","d9c3bcd4":"from surprise.model_selection import GridSearchCV\n","6e2fe075":"param_grid = {'n_epochs': [5, 10], 'lr_all': [0.002, 0.005],\n              'reg_all': [0.4, 0.6]}\ngs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv=3)\n\ngs.fit(data)\n\n# best RMSE score\nprint(gs.best_score['rmse'])\n\n# best RMSE score\nprint(gs.best_score['mae'])\n\n# combination of parameters that gave the best RMSE score\nprint(gs.best_params['rmse'])\n\n# combination of parameters that gave the best MAE score\nprint(gs.best_params['mae'])","46427c2c":"svd = SVD(n_factors= 50, reg_all=0.05)\nsvd.fit(dataset)","ec116df1":"svd.predict(2,4)","b1911394":"svd.predict(2,5)","77290b86":"r = df['ArticleId_served'].unique()\nlen(r)\nlist_of_articles = r.tolist()\nlist_of_articles[:5]\n\nrec = []\nfor i in list_of_articles:\n    predicted_rating = svd.predict(2, i)\n    rec.append(predicted_rating)\n    \nrec[:10]    ","a2d0141f":"param_grid = {'bsl_options':{'method': ['als','sgd'],'n_epochs': [5, 10], 'lr_all': [0.002, 0.005],\n              'reg_all': [0.4, 0.6]}}\n\n# bsl_options = {'method': ['als','sgd'],'n_epochs': [5, 10], 'lr_all': [0.002, 0.005],\n#               'reg_all': [0.4, 0.6]}\nbsl_algo = BaselineOnly()","186117af":"gs = GridSearchCV(BaselineOnly, param_grid, measures=['rmse', 'mae'], cv=3)\n\ngs.fit(data)\n\n# best RMSE score\nprint(gs.best_score['rmse'])\n\n# combination of parameters that gave the best RMSE score\nprint(gs.best_params['rmse'])\n","beb810bc":"bsl_options = {'method': 'sgd', 'n_epochs': 5, 'lr_all': 0.002, 'reg_all': 0.4}\nalgo = BaselineOnly(bsl_options=bsl_options)\n\nalgo.fit(dataset)","b32e51b8":"algo.predict(2,4)","da7d3f9b":"algo.predict(2,5)","e553eefa":"r = df['ArticleId_served'].unique()\nlen(r)\nlist_of_articles = r.tolist()\nlist_of_articles[:5]","479db38a":"rec = []\nfor i in list_of_articles:\n    predicted_rating = algo.predict(2, i)\n    rec.append(predicted_rating)","e89987f7":"rec[:10]","7df80c4b":"from surprise import SVD\nfrom surprise import SVDpp\nfrom surprise import SlopeOne\nfrom surprise import NMF\nfrom surprise import NormalPredictor\nfrom surprise import KNNBaseline\nfrom surprise import KNNBasic\nfrom surprise import KNNWithMeans\nfrom surprise import KNNWithZScore\nfrom surprise import BaselineOnly\nfrom surprise import CoClustering\n\nbenchmark = []\n# Iterate over all algorithms\nfor algorithm in [SVD(), SVDpp(), SlopeOne(), NMF(), NormalPredictor(), KNNBaseline(), KNNBasic(), KNNWithMeans(), KNNWithZScore(), BaselineOnly(), CoClustering()]:\n    # Perform cross validation\n    results = cross_validate(algorithm, data, measures=['RMSE','FCP'], cv=3, verbose=False)\n    \n    # Get results & append algorithm name\n    tmp = pd.DataFrame.from_dict(results).mean(axis=0)\n    tmp = tmp.append(pd.Series([str(algorithm).split(' ')[0].split('.')[-1]], index=['Algorithm']))\n    benchmark.append(tmp)\n    \npd.DataFrame(benchmark).set_index('Algorithm').sort_values('test_rmse')  \npd.DataFrame(benchmark).set_index('Algorithm').sort_values('test_fcp') ","2c925fbc":"> There are few more like coclustering , slopeone, KNNWithZScore . feel free to use them as well ","6e953b1a":"PREDICTIONS","ea5f9d67":"lr_all --> learning rate for all parameters\n\nreg_all --> The regularization term for all parameters","4068e88e":"Despite its merits, RMSE can be quite detached from the ultimate goal of evaluating item ranking experience, since aperfectly  ranked  solution  can  score  arbitrarily  badly  on  an RMSE scale by having scores on the wrong scale, e.g., out of bounds, or just very close to each other.\n\nThe RMSE metric has another issue, particularly importantin our context:  it assumes numerical rating values.  Thus, it shares all the discussed disadvantages of such an assumption.\n\n*First, it cannot express rating scales which vary among differ-ent users*. \n\n*Second, it cannot be applied in cases where ratings are  ordinal*.  \n\nThus,  besides  using  RMSE  we  also  employ  aranking-oriented metric which is free of the aforementioned issues","8f7e57a0":"### With the Surprise library, we will benchmark the following algorithms:","7e504769":"![recommend](https:\/\/miro.medium.com\/max\/2560\/1*dOM8OeGZq6FkquXQq-l7HA.jpeg)","8d88f099":"## SVD","7fa4421e":"To be continue........","5ed62f9e":"#### Tuning BaselineOnly parameters with GridSearchCV","42138c57":"### So here we are using the data which we generated in the last part","574ea4c1":"## BaselineOnly","c5e00aa9":"> After tuning rmse reduced to 1.419594","bce8417e":"#### Tuning SVD parameters with GridSearchCV","7b9ae806":" The quality metric we use measures the proportion of well ranked items pairs, denoted by <font color='red'>FCP (for Fraction of Concordant Pairs).<\/font>\n \n FCP=nc\/(nc+nd)\n \n a measure that generalizes the known AUC metric into non-binary ordered outcomes\n \nname of paper(section 5.2) --> <font color='blue'>***Collaborative Filtering on Ordinal User Feedback***<\/font> by <font color='green'>**Yehuda Koren**<\/font>  and <font color='green'>**Joseph Sil**<\/font>","2d62e0c4":"PREDICTIONS","3e74ac81":"SURPISE - is a Python scikit building and analyzing recommender systems that deal with explicit rating data.\n\nThe name SurPRISE (roughly :) ) stands for Simple Python RecommendatIon System Engine.","8c64441f":"> After tuning rmse reduced to 1.4265558"}}