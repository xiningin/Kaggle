{"cell_type":{"8b6ef97d":"code","126cc0da":"code","17531249":"code","0e430610":"code","48e83e11":"code","b40effec":"code","19611e08":"code","4c92d3c5":"code","f3048565":"code","c1f28d88":"code","64758db9":"code","8e3f96a0":"code","13140b8b":"code","32fc0266":"code","dc378c12":"code","e4110a4a":"code","57fcd80c":"code","0ca605cf":"code","84e021a3":"code","e1e85c43":"markdown","dabafebb":"markdown","464cbf04":"markdown","e68a16f3":"markdown","23b7b327":"markdown","431e85b3":"markdown","aaf2ffd2":"markdown","4521794c":"markdown","96b0960e":"markdown","e9368c78":"markdown","c19a3704":"markdown","c4d9ab30":"markdown","b8bc9bf7":"markdown","4a7cc20c":"markdown","06a30a27":"markdown"},"source":{"8b6ef97d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport librosa.display\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","126cc0da":"patient_data=pd.read_csv('\/kaggle\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/patient_diagnosis.csv',names=['pid','disease'])","17531249":"patient_data.head()","0e430610":"df=pd.read_csv('\/kaggle\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/audio_and_txt_files\/160_1b3_Al_mc_AKGC417L.txt',sep='\\t')\ndf.head()","48e83e11":"import os\npath='\/kaggle\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/audio_and_txt_files\/'\nfiles=[s.split('.')[0] for s in os.listdir(path) if '.txt' in s]\nfiles[:5]","b40effec":"def getFilenameInfo(file):\n    return file.split('_')","19611e08":"getFilenameInfo('160_1b3_Al_mc_AKGC417L')","4c92d3c5":"files_data=[]\nfor file in files:\n    data=pd.read_csv(path + file + '.txt',sep='\\t',names=['start','end','crackles','weezels'])\n    name_data=getFilenameInfo(file)\n    data['pid']=name_data[0]\n    data['mode']=name_data[-2]\n    data['filename']=file\n    files_data.append(data)\nfiles_df=pd.concat(files_data)\nfiles_df.reset_index()\nfiles_df.head()","f3048565":"patient_data.info()","c1f28d88":"files_df.info()","64758db9":"patient_data.pid=patient_data.pid.astype('int32')\nfiles_df.pid=files_df.pid.astype('int32')","8e3f96a0":"data=pd.merge(files_df,patient_data,on='pid')\ndata.head()","13140b8b":"os.makedirs('csv_data')\ndata.to_csv('csv_data\/data.csv',index=False)","32fc0266":"def getPureSample(raw_data,start,end,sr=22050):\n    '''\n    Takes a numpy array and spilts its using start and end args\n    \n    raw_data=numpy array of audio sample\n    start=time\n    end=time\n    sr=sampling_rate\n    mode=mono\/stereo\n    \n    '''\n    max_ind = len(raw_data) \n    start_ind = min(int(start * sr), max_ind)\n    end_ind = min(int(end * sr), max_ind)\n    return raw_data[start_ind: end_ind]","dc378c12":"sns.scatterplot(x=(data.end-data.start), y=data.pid)","e4110a4a":"sns.boxplot(y=(data.end-data.start))","57fcd80c":"os.makedirs('processed_audio_files')","0ca605cf":"for index,row in data.iterrows():\n    print(\"Index ->\",index)\n    print(\"Data->\\n\",row)\n    break","84e021a3":"import librosa as lb\nimport soundfile as sf\ni,c=0,0\nfor index,row in data.iterrows():\n    maxLen=6\n    start=row['start']\n    end=row['end']\n    filename=row['filename']\n    \n    #If len > maxLen , change it to maxLen\n    if end-start>maxLen:\n        end=start+maxLen\n    \n    audio_file_loc=path + filename + '.wav'\n    \n    if index > 0:\n        #check if more cycles exits for same patient if so then add i to change filename\n        if data.iloc[index-1]['filename']==filename:\n            i+=1\n        else:\n            i=0\n    filename= filename + '_' + str(i) + '.wav'\n    \n    save_path='processed_audio_files\/' + filename\n    c+=1\n    \n    audioArr,sampleRate=lb.load(audio_file_loc)\n    pureSample=getPureSample(audioArr,start,end,sampleRate)\n    \n    #pad audio if pureSample len < max_len\n    reqLen=6*sampleRate\n    padded_data = lb.util.pad_center(pureSample, reqLen)\n    \n    sf.write(file=save_path,data=padded_data,samplerate=sampleRate)\nprint('Total Files Processed: ',c)","e1e85c43":"# Step-1\n\n# Reading and Utilizing Provided Data","dabafebb":"* These are very usefull information namely (Start , End ( time of respiratory cycles) ,crackles,weezels)\n\n> So lets get them into a dataset\n\n> Note:- i use sep **' \\t '** cause we are reading data from text file which is sperated by tabs here","464cbf04":"> From these plots we can conclude that best length is **~6**\n\n> Also if difference is <6 we must **Zero Pad** it to get it to required length\n\n> Zero Padding means **silent**\n","e68a16f3":"* we multiplied start with sampling rate cause start is time and raw_data is array sampled acc. to sampling rate\n\n> Now we also want our input images to our cnn to be of same size for that audio files must be of **same length** i.e **(start - end)** must be same \n\n> Lets find the best length we can have","23b7b327":"> Lets create a directory for storing our files","431e85b3":"* Here we have Patient Ids and Disease info\n  ","aaf2ffd2":"> Here useful info  is [Patient ID, __ ,__ ,Type(mono,stereo), __ ]","4521794c":"# Step 2 \n\n# Processing Audio files","96b0960e":"> Now we only want that parts from whole audio file which contains **Respiratory Cycles** \n\n> We can do this by utilizing the start and end time specifiles for these cycles in our **data dataframe**","e9368c78":"> As mentioned in **filename_format.txt** , '.txt' files of annotated audio files have various information. So we will try to extract that too.  ","c19a3704":"* We can iterate over dataset using iterrows, its output is as shown","c4d9ab30":"> Now we can join both **patient_data** and **files_df**","b8bc9bf7":"> Lets check out what is in annoted '.txt' files of audio files.","4a7cc20c":"> Also a single sample of audio file can have **Many Respiratory Cycles** so we might have to same multiple files for a simple audio file\n\n> I will be using **Librosa** module for loading audio files and **Soundfile** module for writing to output path\n\n> **Study The following Function Carefully**","06a30a27":"> Lets get **pid** and **101** to same type and merge both dataframes on pid"}}