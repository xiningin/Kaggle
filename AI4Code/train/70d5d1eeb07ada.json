{"cell_type":{"19d42d7d":"code","d46db38f":"code","99d138a3":"code","adcb88a0":"code","ee222b63":"code","55186e44":"code","762b12e3":"code","40223683":"code","1778ef0e":"code","fa701e40":"code","1656f956":"code","67182d99":"code","aee03ee4":"code","89c67a42":"code","759c0583":"code","5f158518":"code","80707a63":"code","e5417225":"code","16c70116":"code","3c419c8b":"code","5e6927fb":"code","a5c7b0ae":"code","9d47c542":"code","56767995":"code","929907a7":"code","0ef4ad9b":"code","e8bd3a4a":"code","0919a92a":"code","3e5573b3":"code","15ec64c9":"code","fae2fae6":"code","bc7ca0eb":"code","07a30b20":"code","f7d640b9":"code","2009404a":"code","c64fc96c":"code","4fa5f81b":"code","0bc7631c":"code","094db84e":"code","da340e24":"code","3d201bd0":"code","644ccebc":"code","e2a6ea36":"code","e785650d":"code","2a19d1b9":"code","fbd7945b":"code","5b14dfcb":"markdown","742a94d8":"markdown","42945948":"markdown","f58b633b":"markdown","86178acc":"markdown","6bc3cce9":"markdown","e2b2a416":"markdown","6101740c":"markdown","151b455a":"markdown","dd6d2ab3":"markdown","53486d67":"markdown","eda6060e":"markdown","04c152a1":"markdown","50e05d64":"markdown","4f93e0a3":"markdown","b8150e3f":"markdown","c6b6a218":"markdown","00974b1f":"markdown","f939a7a6":"markdown","66fc236a":"markdown","b2e90085":"markdown","71c6dfc6":"markdown","3224130e":"markdown","e0c6a12b":"markdown","0a373675":"markdown","15e86279":"markdown","a528d1fc":"markdown","b72d6749":"markdown","87787633":"markdown","dca0ffd2":"markdown","87bbaf01":"markdown","b6d6f15c":"markdown"},"source":{"19d42d7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\") # Allows using a feature inside the seaborn library\nimport seaborn as sns\nfrom collections import Counter\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d46db38f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId = test_df[\"PassengerId\"]","99d138a3":"train_df.columns","adcb88a0":"train_df.head()","ee222b63":"train_df.describe()","55186e44":"train_df.info()","762b12e3":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{}:\\n{}\".format(variable,varValue))","40223683":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\n\nfor i in category1:\n    bar_plot(i)","1778ef0e":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))","fa701e40":"def hist_plot(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","1656f956":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor i in numericVar:\n    hist_plot(i)","67182d99":"#Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","aee03ee4":"#Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","89c67a42":"#SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","759c0583":"#Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","5f158518":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n        \n    ","80707a63":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","e5417225":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop=True)","16c70116":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","3c419c8b":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","5e6927fb":"train_df.head()","a5c7b0ae":"train_df.columns[train_df.isnull().any()]","9d47c542":"train_df.isnull().sum()","56767995":"train_df[train_df[\"Embarked\"].isnull()]","929907a7":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","0ef4ad9b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","e8bd3a4a":"train_df[train_df[\"Fare\"].isnull()]","0919a92a":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","3e5573b3":"train_df[train_df[\"Fare\"].isnull()]","15ec64c9":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot = True,fmt = \".2f\")\nplt.show()","fae2fae6":"sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df,kind =\"bar\",size = 6)\nplt.ylabel(\"Survived Probability\")\nplt.show()","bc7ca0eb":"sns.factorplot(x = \"Parch\", y=\"Survived\", data = train_df, kind = \"bar\",size = 6)\nplt.ylabel(\"Survived Probability\")\nplt.show()","07a30b20":"sns.factorplot(x = \"Pclass\", y=\"Survived\", data = train_df, kind = \"bar\",size = 6)\nplt.ylabel(\"Survived Probability\")\nplt.show()","f7d640b9":"g = sns.FacetGrid(train_df,col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins = 25)\nplt.show()","2009404a":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\")\ng.map(plt.hist, \"Age\",bins = 25)\ng.add_legend()\nplt.show()","c64fc96c":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","4fa5f81b":"g = sns.FacetGrid(train_df,row = \"Embarked\",col = \"Survived\",size = 2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","0bc7631c":"train_df.isnull().sum()","094db84e":"train_df[train_df[\"Age\"].isnull()]","da340e24":"sns.factorplot(x = \"Sex\", y = \"Age\",data = train_df,kind =\"box\")\nplt.show()","3d201bd0":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df,kind = \"box\")\nplt.show()","644ccebc":"sns.factorplot(x = \"Parch\",y = \"Age\" ,data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\",y = \"Age\" ,data = train_df, kind = \"box\")\nplt.show()","e2a6ea36":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","e785650d":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"Parch\",\"SibSp\",\"Pclass\"]].corr(),annot = True);","2a19d1b9":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","fbd7945b":"train_df[\"Age\"].isnull().sum()","5b14dfcb":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","742a94d8":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","42945948":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","f58b633b":"<a id =\"2\"><\/a><br>\n# Variable Description\n\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survived(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp:number of siblings\/spouses\n1. Parch:number of parents\/children\n1. Ticket:ticket number\n1. Fare:amount of money spent on ticket\n1. Cabin:cabin category\n1. Embarked:port where passenger embarked (C:Cherbourg, Q:Queenstown, S:Southampton)\n    \n","86178acc":"* Female passengers have much better survival rate than males.\n* males have better surv\u015fval rate in pclass 3 in C.\n* embarked and sex will be used in training.","6bc3cce9":"<a id = \"4\"><\/a><br>\n## Categorical Variable ","e2b2a416":"<a id=\"1\"><\/a><br>\n## 1.Load and Check Data","6101740c":"<a id =\"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- survived","151b455a":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","dd6d2ab3":"<a id=\"9\"><\/a><br>\n## Find missing Value","53486d67":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","eda6060e":"<a id = \"11\"><\/a><br>\n# Visualization","04c152a1":"<a id=\"10\"><\/a><br>\n## Fill Missing Value","50e05d64":"<a id=\"7\"><\/a><br>\n# Outlier Detection","4f93e0a3":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","b8150e3f":"<a id=\"17\"><\/a><br>\n## Pclass -- Survived -- Age","c6b6a218":"Fare feature seems to have correlation with survived feature (0.26).","00974b1f":"<a id=\"16\"><\/a><br>\n## Age -- Survived","f939a7a6":"# Introduction\nTitanic is the most notorious shipwreck in history. It took place in 1912 and sank after being hit by an iceberg during its first tour, 1502 people out of 2224 died.\n\n<font color = 'blue'>\nContent:\n  \n1.[Load and Check Data](#1)\n    \n2.[Variable Description](#2)\n    \n*     [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n    \n3. [Basic Data Analysis](#6)\n    \n4. [Outlier Detection](#7)\n\n5.[Missing Value](#8)\n    \n* [Find Missing value](#9)  \n    \n* [Fill Missing Value](#10)\n\n\n\n6. [Visualization](#11)\n  * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n  * [SibSp -- Survived](#13)\n  * [Parch -- Survived](#14)\n  * [Pclass -- Survived](#15)\n  * [Age -- Survived](#16)\n  * [Pclass -- Survived -- Age](#17)\n  * [Embarked -- Sex -- Pclass -- Survived](#18)\n  * [Embarked -- Sex -- Fare -- Survived](#19)\n  * [Fill Missing: Age Feature](#20)","66fc236a":" <a id=\"6\"><\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n","b2e90085":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class","71c6dfc6":"* pclass is important feature for model training.","3224130e":"* float64(2):Age and Fare\n* int64(5):PassengerId,Survived,Pclass,SibSp and Parch\n* object(5):Cabin,Name,Sex,Ticket and Embarked","e0c6a12b":"<a id = \"5\"><\/a><br>\n## Numerical Variable","0a373675":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","15e86279":"<a id=\"12\"><\/a><br>\n## SibSp--Survived","a528d1fc":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature","b72d6749":"<a id=\"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing value","87787633":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n\n*     Categorical Variable:Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,Sibsp and Parch\n    \n*     Numerical Variable:Fare,Age and PassengerId ","dca0ffd2":"<a id=\"15\"><\/a><br>\n## Pclass -- Survived","87bbaf01":"* Sex is not informative for age prediction, age distribution seems to be same.","b6d6f15c":"<a id =\"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived"}}