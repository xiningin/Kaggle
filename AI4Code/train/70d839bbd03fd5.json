{"cell_type":{"73e7e9a7":"code","f7adeb3d":"code","343b6ef3":"code","7a512b17":"code","4a1f2cb5":"code","e7a248bb":"code","11e2a917":"code","6d277097":"code","8469967b":"code","c6becaf6":"code","c83b6108":"code","66f5633a":"code","3d5e8a15":"code","b8d8af86":"code","b533b4ee":"code","219c2dbf":"code","9467ab32":"code","e495cb11":"code","07377d11":"markdown","4543f427":"markdown","8f314ce3":"markdown","0101f042":"markdown","88c796f6":"markdown","4ef0d66a":"markdown","720a8f8c":"markdown","490ea004":"markdown","8acebdf2":"markdown","f511a9d6":"markdown","38963b14":"markdown"},"source":{"73e7e9a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7adeb3d":"Data=pd.read_csv(\"\/kaggle\/input\/voicegender\/voice.csv\")","343b6ef3":"Data","7a512b17":"Data.label=[1 if each == \"male\" else 0 for each in Data.label]\ny=Data.label.values\nx=Data.drop([\"label\"], axis=1)","4a1f2cb5":"y","e7a248bb":"x=(x-np.min(x))\/(np.max(x)-np.min(x)).values","11e2a917":"x","6d277097":"from sklearn.model_selection import train_test_split\n","8469967b":"#here we create x_train, y_train, x_test y_test arrays\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.2, random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","c6becaf6":"#We initialize weights and bias (w,b)\ndef initialize_weights_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b","c83b6108":"#calculation of z(sigmoid function)\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head\n","66f5633a":"y_head=sigmoid(0)\ny_head","3d5e8a15":"#implementing forward propagation\ndef forward_propagation(w,b,x_train,y_train):\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -(y_train*np.log(y_head)+(1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss)\/(x_train.shape[1]) \n    return cost\n","b8d8af86":"def forward_backward_propagation(w,b,x_train,y_train):\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -(y_train*np.log(y_head)+(1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss)\/(x_train.shape[1])\n    #backward propagation\n    derivative_weight=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\" : derivative_weight,\"derivative_bias\" : derivative_bias}\n    return cost,gradients\n","b533b4ee":"#updating parameters\ndef update(w,b,x_train,y_train,learning_rate, number_of_iteration):\n    cost_list= []\n    \n    index= []\n    \n    for i in range(number_of_iteration):\n        cost,gradients= forward_backward_propagation(w,b,x_train,y_train)\n        \n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i%100==0:\n            cost_list.append(cost)\n            index.append(i)\n        \n        print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    \n    parameters = {\"derivative_weight\": w,\"derivative_bias\": b}\n    plt.plot(index,cost_list)\n    plt.xlabel(\"Number of iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n\n    \n    ","219c2dbf":"def predict(w,b,x_test):\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction=np.zeros((1,x_test.shape[1]))\n    \n    for i in range (z.shape[1]):\n        if z[0,i]<=0.5:\n            y_prediction[0,i]==0\n        else:\n            y_prediction[0,i]==1\n            \n    return y_prediction\n            \n    ","9467ab32":"def Logistic_Regression(x_train, y_train, x_test, y_test,learning_rate, number_of_iteration):\n    dimension=x_train.shape[0]\n    \n    w,b=initialize_weights_bias(dimension)\n    parameters, gradient, cost_list=update(w, b, x_train, y_train, learning_rate,number_of_iteration)\n    \n    y_prediction_test= predict(parameters[\"derivative_weight\"],parameters[\"derivative_bias\"],x_test)\n    y_prediction_train= predict(parameters[\"derivative_weight\"],parameters[\"derivative_bias\"],x_train)\n    \n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \n\n    \n","e495cb11":"Logistic_Regression(x_train, y_train, x_test, y_test,learning_rate = 0.1, number_of_iteration = 3000)","07377d11":"Normalization:\n\nthe goal of normalization is to change the values of numeric columns in the dataset to use a common scale, without distorting differences in the ranges of values or losing information. Normalization is also required for some algorithms to model the data correctly.","4543f427":"Prediction","8f314ce3":"Put them all together!!!","0101f042":"We can see our data above.","88c796f6":"Train Test Split\n","4ef0d66a":"Gradient Descent","720a8f8c":"We divide our data set as train and test set. Test size is 20%.\n\nRandom state: Every time the data set is split, it is split from elsewhere. \nRandom_state is used to prevent this and to  divide data from the same place.\n","490ea004":"import the data","8acebdf2":"Forward Propagation:\n\nForward propagation  refers to the calculation and storage of intermediate variables (including outputs) for a neural network in order from the input layer to the output layer.","f511a9d6":"Initializing Parameters","38963b14":" if cost is high it means that we make wrong prediction. \n So we need to decrease cost. \n In order to decrease cost, we need to update weights and bias.\n So we use gradient descent.\n Gradient descent is an optimization algorithm used to find the values of parameters (coefficients) of a function (f) that minimizes a cost function (cost)."}}