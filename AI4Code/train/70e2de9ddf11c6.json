{"cell_type":{"051b5dbf":"code","c059030d":"code","fe2a630b":"code","c65c535a":"code","be3eb62a":"code","48066650":"code","d251d0d7":"code","8c8c84ad":"code","bb4b792b":"code","e6cb6099":"code","5a1080c0":"code","94f793a0":"code","0c23fb6d":"code","58be409a":"code","cb7272c8":"code","4a85389c":"code","804beba1":"code","0aae748a":"code","4a714e58":"code","49850f14":"code","417a41aa":"code","5dcfb87f":"code","b0d5062a":"code","4e510598":"code","d67ef3c6":"code","d19cc21e":"code","1f32deca":"code","4dbe6ed2":"code","c76402cc":"code","b39ed05f":"code","1b318235":"code","1cb16107":"code","a150a4ad":"code","c3f6ccfd":"code","2eabc9c9":"code","8f20e5a8":"code","a9bb4d43":"code","7e246678":"code","8d681610":"code","8f8de102":"code","aae7a4ce":"code","9d7e0e9c":"code","92e9d359":"code","527e540c":"code","060ef4ee":"code","06584388":"code","fb169552":"code","d9fbd76c":"code","36d49e3e":"code","31283b61":"code","03de4e35":"code","e6da50a2":"code","c5673e98":"code","97ea67ab":"code","799a6f6c":"code","190f1fa4":"code","8d20c82a":"code","1e531ee4":"code","59dc30bf":"code","057bff27":"code","5eace9b3":"code","f84e9c56":"code","5e03c0f9":"code","5a72bdce":"code","953457d2":"code","3156df4f":"code","33432357":"code","ca01f3cb":"code","a5f3749b":"code","dcd22651":"code","2ffab9ff":"code","962b18c7":"code","1daa14df":"code","0025d93c":"code","ddc295b8":"code","35f17d17":"code","ee2f0f4d":"code","3189868d":"code","ed3ae563":"code","79764e3a":"code","3c8e18c0":"code","019fab0a":"code","7e4609dc":"code","204679a8":"code","d0cc005c":"code","0719fc0a":"code","b8ed261f":"code","07b950e8":"markdown","8a57209f":"markdown","49680bc2":"markdown","34f01d5b":"markdown","fa2d81d4":"markdown","713c4f1d":"markdown","7f4f0cd6":"markdown","1483e677":"markdown","fa081a22":"markdown","38280417":"markdown","068bc90d":"markdown","4f8ea407":"markdown","4ec55bab":"markdown","c566ec80":"markdown","12401ec7":"markdown","cb61dbf1":"markdown","3dfa37cc":"markdown","3995f815":"markdown","70ca70de":"markdown","58b5606e":"markdown","be775d36":"markdown","7f03d75c":"markdown","f0b15acc":"markdown","2daee475":"markdown","f863ce7b":"markdown","8121523b":"markdown","ae7d58d8":"markdown","3a2eab32":"markdown","e5172d39":"markdown","eb0c6470":"markdown","07574d7b":"markdown","22636fbc":"markdown","ae277d89":"markdown","d1a39d44":"markdown","f3f83b2d":"markdown","f69e67f1":"markdown","04057717":"markdown","a5f6e8bc":"markdown","26dce1fb":"markdown","aa9f9319":"markdown","ffb323b0":"markdown","ea67996c":"markdown","72756a54":"markdown","ea91ae34":"markdown","7b6c3da0":"markdown","289a6d98":"markdown","29b34b83":"markdown","24f07a9c":"markdown","7ca825db":"markdown","73875000":"markdown","5ae7c447":"markdown","67adc26c":"markdown","e4bcafb8":"markdown","59f67bf1":"markdown","27b83b56":"markdown","4c62ab60":"markdown","6023ddb9":"markdown","6b5629e4":"markdown","e43513fd":"markdown","6a456b5b":"markdown","18ad0661":"markdown","3035c746":"markdown","edf043e0":"markdown"},"source":{"051b5dbf":"#importing required libraries\n\nimport pandas as pd\nimport numpy as np\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn","c059030d":"#Loading data into dataframe\n\ndata = pd.read_csv(\"..\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\ndata.head()","fe2a630b":"#Shape of dataframe\n\ndata.shape","c65c535a":"#Listing the features of the dataset\n\ndata.columns","be3eb62a":"#Renaming the columns names for convinience\n\ndata.columns = ['country', 'year', 'gender', 'age_group', 'suicide_count', 'population', 'suicide_rate', 'country-year', 'HDI for year',\n                'gdp_for_year', 'gdp_per_capita', 'generation']\ndata.columns","48066650":"#Renaming the columns names for convinience\n\ndata.columns = ['country', 'year', 'gender', 'age_group', 'suicide_count', \n                'population', 'suicide_rate', 'country-year', 'HDI for year',\n                'gdp_for_year', 'gdp_per_capita', 'generation']\ndata.columns","d251d0d7":"#Information about the dataset\n\ndata.info()","8c8c84ad":"data.age_group.value_counts()","bb4b792b":"data.generation.value_counts()","e6cb6099":"#Listing countries\n\ncountry = data.country.unique()\nprint(\"Number of countries:\", len(country))\ncountry","5a1080c0":"data.hist(bins = 50,figsize = (15,11))","94f793a0":"#Correlation heatmap\n\nplt.figure(figsize=(7,5))\nsns.heatmap(data.corr(), annot=True, cmap='Oranges')\nplt.show()","0c23fb6d":"#Gender and suicide count bar plot\n\nplt.figure(figsize=(10,3))\nsns.barplot(data.suicide_count,data.gender)\nplt.title('Gender - Suicide Count Bar Plot')\nplt.show()","58be409a":"#Age Group - Count Bar Plot Grouped by Gender\n\nplt.figure(figsize=(10,3))\nsns.barplot(x = \"age_group\", y = \"suicide_count\", hue = \"gender\", data = data)\nplt.title(\"Age Group - Count Bar Plot Grouped by Gender\")\nplt.show()","cb7272c8":"#Generation - Count Bar Plot grouped by Gender\n\nplt.figure(figsize=(9,5))\nsns.barplot(x = \"generation\", y = \"suicide_count\", hue = \"gender\", data = data)\nplt.title('Generation - Count Bar Plot grouped by Gender')\nplt.show()","4a85389c":"# Age Group and Suicide count bar plot\n\nplt.figure(figsize=(9,5))\nsns.barplot(x=data['age_group'], y=data['suicide_count'])\nplt.xlabel('Age Group')\nplt.ylabel('Suicide Count')\nplt.title('Age Group - Suicide Count Bar Plot')\nplt.show()","804beba1":"#Generation & Suicide Count Bar Plot\n\nplt.figure(figsize=(9,5))\nsns.barplot(x=data['generation'], y=data['suicide_count'])\nplt.xlabel('Generation')\nplt.ylabel('Suicide Count')\nplt.title('Generation - Suicide Count Bar Plot')\nplt.show()","0aae748a":"#Gender & Sucide Count grouped by Age Group bar plot\n\nplt.figure(figsize=(7,7))\nsns.barplot(y=\"gender\", x=\"suicide_count\", hue=\"age_group\", data=data)\nplt.title('Gender & Sucide Count grouped by Age Group')\nplt.show()","4a714e58":"#Gender & Sucide Count grouped by Generation bar plot\n\nplt.figure(figsize=(7,7))\nsns.barplot(y=\"gender\", x=\"suicide_count\", hue=\"generation\", data=data)\nplt.title('Gender & Sucide Count grouped by Generation')\nplt.show()","49850f14":"#Country & Suicide_rate Bar plot\n\nplt.figure(figsize=(15,25))\nsns.barplot(x = \"suicide_rate\", y = \"country\", data = data)\nplt.title('Country - Suicide_rate Bar plot')\nplt.show()","417a41aa":"#Line plpot of year and suicide_rate\n\ndata[['year','suicide_rate']].groupby(['year']).sum().plot()","5dcfb87f":"#Scatter matrix for checking outlier\n\nplt.figure(figsize=(20,10))\nattributes = ['suicide_count', 'population', 'suicide_rate','HDI for year', \n              'gdp_for_year','gdp_per_capita']\nscatter_matrix(data[attributes], figsize=(20,10))\nplt.show()","b0d5062a":"data.describe()","4e510598":"#checking the data for null or missing values\n\ndata.isnull().sum()","d67ef3c6":"#dropping the HDI for year column\n\ndata = data.drop(['HDI for year'], axis = 1)\ndata.shape","d19cc21e":"data.columns","1f32deca":"#dropping the country-year for year column\n\ndata = data.drop(['country-year'], axis = 1)\ndata.shape","4dbe6ed2":"#droppinf off any null rows (is any)\n\ndata = data.dropna()\ndata.shape","c76402cc":"#encoding the categorical features with LabelEncoder\n\nfrom sklearn.preprocessing import LabelEncoder\ncategorical = ['country', 'year','age_group', 'gender', 'generation']\nle = sklearn.preprocessing.LabelEncoder()\n\nfor column in categorical:\n    data[column] = le.fit_transform(data[column])","b39ed05f":"#creating a copy of dataset for statistical test\n\nstat_data = data.copy()\nstat_data","1b318235":"#Checking the data type of each column\n\ndata.dtypes","1cb16107":"# Converting the column 'gdp_for_year' to float from object\n\ndata['gdp_for_year'] = data['gdp_for_year'].str.replace(',','').astype(float)","a150a4ad":"#Scaling the numerical data columns with RobustScalar\n\nnumerical = ['suicide_count', 'population', 'suicide_rate', \n              'gdp_for_year','gdp_per_capita']\n\nfrom sklearn.preprocessing import RobustScaler\n\nrc = RobustScaler()\ndata[numerical] = rc.fit_transform(data[numerical])","c3f6ccfd":"data","2eabc9c9":"# Sepratating & assigning features and target columns to X & y\n\ny = data['suicide_rate']\nX = data.drop('suicide_rate',axis=1)\nX.shape, y.shape","8f20e5a8":"# Splitting the dataset into train and test sets: 80-20 split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 12)\nX_train.shape, X_test.shape","a9bb4d43":"#importing required libraries \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV","7e246678":"# Creating holders to store the model performance results\nML_Model = []\nacc_train = []\nacc_test = []\nrmse_train = []\nrmse_test = []\n\n#function to call for storing the results\ndef storeResults(model, a,b,c,d):\n    ML_Model.append(model)\n    acc_train.append(round(a, 3))\n    acc_test.append(round(b, 3))\n    rmse_train.append(round(c, 3))\n    rmse_test.append(round(d, 3))","8d681610":"# KNN Regression model\nfrom sklearn.neighbors import KNeighborsRegressor\n\n# instantiate the model\nknn = KNeighborsRegressor()\n\nparam_grid = {'n_neighbors':list(range(1, 31)), 'weights': ['uniform', 'distance']}\n\n# instantiate the grid\nknn_grid = GridSearchCV(knn, param_grid , cv=10)\n\n# fit the model \nknn_grid.fit(X_train, y_train)","8f8de102":"#Checking the best parameters for the model\nknn_para = knn_grid.best_params_\nprint(knn_para)","aae7a4ce":"#predicting the target value from the model for the samples\ny_train_knn = knn_grid.predict(X_train)\ny_test_knn = knn_grid.predict(X_test)","9d7e0e9c":"#computing the accuracy of the model performance\nacc_train_knn = knn_grid.score(X_train, y_train) \nacc_test_knn = knn_grid.score(X_test, y_test)\n\n#computing root mean squared error (RMSE)\nrmse_train_knn = np.sqrt(mean_squared_error(y_train, y_train_knn))\nrmse_test_knn = np.sqrt(mean_squared_error(y_test, y_test_knn))\n\nprint(\"KNN: Accuracy on training Data: {:.3f}\".format(acc_train_knn))\nprint(\"KNN: Accuracy on test Data: {:.3f}\".format(acc_test_knn))\nprint('\\nKNN: The RMSE of the training set is:', rmse_train_knn)\nprint('KNN: The RMSE of the testing set is:', rmse_test_knn)","92e9d359":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('k-Nearest Neighbors Regression', acc_train_knn, acc_test_knn, rmse_train_knn, rmse_test_knn)","527e540c":"training_accuracy = []\ntest_accuracy = []\n# try n_neighbors from 1 to 20\nneighbors_settings = range(1, 31)\nfor n in neighbors_settings:\n    # fit the model\n    knn = KNeighborsRegressor(n_neighbors=n)\n    knn.fit(X_train, y_train)\n    # record training set accuracy\n    training_accuracy.append(knn.score(X_train, y_train))\n    # record generalization accuracy\n    test_accuracy.append(knn.score(X_test, y_test))\n\n#plotting the training & testing accuracy for n_neighbours from 1 to 30\nplt.plot(neighbors_settings, training_accuracy, label=\"training accuracy\")\nplt.plot(neighbors_settings, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")  \nplt.xlabel(\"n_neighbors\")\nplt.legend()","060ef4ee":"# Linear regression model \nfrom sklearn.linear_model import LinearRegression\n\n# instantiate the model\nlr = LinearRegression()\n# fit the model \nlr.fit(X_train, y_train)","06584388":"#predicting the target value from the model for the samples\ny_test_lr = lr.predict(X_test)\ny_train_lr = lr.predict(X_train)","fb169552":"#computing the accuracy of the model performance\nacc_train_lr = lr.score(X_train, y_train)\nacc_test_lr = lr.score(X_test, y_test)\n\n#computing root mean squared error (RMSE)\nrmse_train_lr = np.sqrt(mean_squared_error(y_train, y_train_lr))\nrmse_test_lr = np.sqrt(mean_squared_error(y_test, y_test_lr))\n\nprint(\"Linear Regression: Accuracy on training Data: {:.3f}\".format(acc_train_lr))\nprint(\"Linear Regression: Accuracy on test Data: {:.3f}\".format(acc_test_lr))\nprint('\\nLinear Regression: The RMSE of the training set is:', rmse_train_lr)\nprint('Linear Regression: The RMSE of the testing set is:', rmse_test_lr)","d9fbd76c":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('Linear Regression', acc_train_lr, acc_test_lr, rmse_train_lr, rmse_test_lr)","36d49e3e":"# Decision Tree regression model \nfrom sklearn.tree import DecisionTreeRegressor\n\n# instantiate the model \ntree = DecisionTreeRegressor(max_depth=9)\n# fit the model \ntree.fit(X_train, y_train)","31283b61":"#predicting the target value from the model for the samples\ny_test_tree = tree.predict(X_test)\ny_train_tree = tree.predict(X_train)","03de4e35":"#computing the accuracy of the model performance\nacc_train_tree = tree.score(X_train, y_train)\nacc_test_tree = tree.score(X_test, y_test)\n\n#computing root mean squared error (RMSE)\nrmse_train_tree = np.sqrt(mean_squared_error(y_train, y_train_tree))\nrmse_test_tree = np.sqrt(mean_squared_error(y_test, y_test_tree))\n\nprint(\"Decision Tree: Accuracy on training Data: {:.3f}\".format(acc_train_tree))\nprint(\"Decision Tree: Accuracy on test Data: {:.3f}\".format(acc_test_tree))\nprint('\\nDecision Tree: The RMSE of the training set is:', rmse_train_tree)\nprint('Decision Tree: The RMSE of the testing set is:', rmse_test_tree)","e6da50a2":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('Decision Tree',acc_train_tree, acc_test_tree, rmse_train_tree, rmse_test_tree)","c5673e98":"#checking the feature improtance in the model\nplt.figure(figsize=(9,7))\nn_features = X_train.shape[1]\nplt.barh(range(n_features), tree.feature_importances_, align='center')\nplt.yticks(np.arange(n_features), X_train.columns)\nplt.xlabel(\"Feature importance\")\nplt.ylabel(\"Feature\")\nplt.show()","97ea67ab":"training_accuracy = []\ntest_accuracy = []\n# try max_depth from 1 to 30\ndepth = range(1, 31)\nfor n in depth:\n    # fit the model\n    tree = DecisionTreeRegressor(max_depth=n)\n    tree.fit(X_train, y_train)\n    # record training set accuracy\n    training_accuracy.append(tree.score(X_train, y_train))\n    # record generalization accuracy\n    test_accuracy.append(tree.score(X_test, y_test))\n\n#plotting the training & testing accuracy for max_depth from 1 to 30\nplt.plot(depth, training_accuracy, label=\"training accuracy\")\nplt.plot(depth, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")  \nplt.xlabel(\"max_depth\")\nplt.legend()","799a6f6c":"# Random Forest regression model\nfrom sklearn.ensemble import RandomForestRegressor\n\n# instantiate the model\nforest = RandomForestRegressor(max_depth=9)\n\n# fit the model \nforest.fit(X_train, y_train)","190f1fa4":"#predicting the target value from the model for the samples\ny_test_forest = forest.predict(X_test)\ny_train_forest = forest.predict(X_train)","8d20c82a":"#computing the accuracy of the model performance\nacc_train_forest = forest.score(X_train, y_train)\nacc_test_forest = forest.score(X_test, y_test)\n\n#computing root mean squared error (RMSE)\nrmse_train_forest = np.sqrt(mean_squared_error(y_train, y_train_forest))\nrmse_test_forest = np.sqrt(mean_squared_error(y_test, y_test_forest))\n\nprint(\"Random Forest: Accuracy on training Data: {:.3f}\".format(acc_train_forest))\nprint(\"Random Forest: Accuracy on test Data: {:.3f}\".format(acc_test_forest))\nprint('\\nRandom Forest: The RMSE of the training set is: ', rmse_train_forest)\nprint('Random Forest: The RMSE of the testing set is: ', rmse_test_forest)","1e531ee4":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('Random Forest',acc_train_forest, acc_test_forest, rmse_train_forest, rmse_test_forest)","59dc30bf":"training_accuracy = []\ntest_accuracy = []\n# try max_depth from 1 to 30\ndepth = range(1, 31)\nfor n in depth:\n    # fit the model\n    forest = RandomForestRegressor(max_depth=n)\n    forest.fit(X_train, y_train)\n    # record training set accuracy\n    training_accuracy.append(forest.score(X_train, y_train))\n    # record generalization accuracy\n    test_accuracy.append(forest.score(X_test, y_test))\n\n#plotting the training & testing accuracy for max_depth from 1 to 30\nplt.plot(depth, training_accuracy, label=\"training accuracy\")\nplt.plot(depth, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")  \nplt.xlabel(\"max_depth\")\nplt.legend()","057bff27":"# Multilayer Perceptrons model\nfrom sklearn.neural_network import MLPRegressor\n\n# instantiate the model\nmlp = MLPRegressor(hidden_layer_sizes=([100,100]))\n\n# fit the model \nmlp.fit(X_train, y_train)","5eace9b3":"#predicting the target value from the model for the samples\ny_test_mlp = mlp.predict(X_test)\ny_train_mlp = mlp.predict(X_train)","f84e9c56":"#computing the accuracy of the model performance\nacc_train_mlp = mlp.score(X_train, y_train)\nacc_test_mlp = mlp.score(X_test, y_test)\n\n#computing root mean squared error (RMSE)\nrmse_train_mlp = np.sqrt(mean_squared_error(y_train, y_train_mlp))\nrmse_test_mlp = np.sqrt(mean_squared_error(y_test, y_test_mlp))\n\nprint(\"Multilayer Perceptron Regression: Accuracy on training Data: {:.3f}\".format(acc_train_mlp))\nprint(\"Multilayer Perceptron Regression: Accuracy on test Data: {:.3f}\".format(acc_test_mlp))\nprint('\\nMultilayer Perceptron Regression: The RMSE of the training set is: ', rmse_train_mlp)\nprint('Multilayer Perceptron Regression: The RMSE of the testing set is: ', rmse_test_mlp)","5e03c0f9":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('Multilayer Perceptron Regression',acc_train_mlp, acc_test_mlp, rmse_train_mlp, rmse_test_mlp)","5a72bdce":"#XGBoost Regression model\nfrom xgboost import XGBRegressor\n\n# instantiate the model\nxgb = XGBRegressor(learning_rate=0.2,max_depth=4)\n#fit the model\nxgb.fit(X_train, y_train)","953457d2":"#predicting the target value from the model for the samples\ny_test_xgb = xgb.predict(X_test)\ny_train_xgb = xgb.predict(X_train)","3156df4f":"#computing the accuracy of the model performance\nacc_train_xgb = xgb.score(X_train, y_train)\nacc_test_xgb = xgb.score(X_test, y_test)\n\n#computing root mean squared error (RMSE)\nrmse_train_xgb = np.sqrt(mean_squared_error(y_train, y_train_xgb))\nrmse_test_xgb = np.sqrt(mean_squared_error(y_test, y_test_xgb))\n\nprint(\"XGBoost Regression: Accuracy on training Data: {:.3f}\".format(acc_train_xgb))\nprint(\"XGBoost Regression: Accuracy on test Data: {:.3f}\".format(acc_test_xgb))\nprint('\\nXGBoost Regression: The RMSE of the training set is: ', rmse_train_xgb)\nprint('XGBoost Regression: The RMSE of the testing set is: ', rmse_test_xgb)","33432357":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('XGBoost Regression',acc_train_xgb, acc_test_xgb, rmse_train_xgb, rmse_test_xgb)","ca01f3cb":"### You will need mlens package\n!pip install mlens","a5f3749b":"from mlens.ensemble import SuperLearner\nfrom mlens.model_selection import Evaluator\nfrom mlens.metrics import make_scorer\nfrom mlens.metrics.metrics import rmse\n\nfrom sklearn.metrics import accuracy_score","dcd22651":"# --- Build ---\n# Passing a scoring function will create cv scores during fitting \n#the scorer should be a simple function accepting to vectors and returning a scalar\nensemble = SuperLearner(scorer=rmse, random_state=555, verbose=2)\n\n# Build the first layer\nensemble.add(mlp)\nensemble.add(knn_grid)\nensemble.add_meta(lr)","2ffab9ff":"# Fit ensemble\nensemble.fit(X_train, y_train)","962b18c7":"#Predicting the target of samples from the model\ny_train_en = ensemble.predict(X_train)\ny_test_en = ensemble.predict(X_test)","1daa14df":"#computing the accuracy of the model performance\nacc_train_en = sklearn.metrics.r2_score(y_train,y_train_en)\nacc_test_en = sklearn.metrics.r2_score(y_test,y_test_en)\n\n#computing root mean squared error (RMSE)\nrmse_train_en = rmse(y_train,y_train_en)\nrmse_test_en = rmse(y_test,y_test_en)\n\nprint(\"Custom Ensemble: Accuracy on training Data: {:.3f}\".format(acc_train_en))\nprint(\"Custom Ensemble: Accuracy on test Data: {:.3f}\".format(acc_test_en))\nprint('\\nCustom Ensemble: The RMSE of the training set is: ', rmse_train_en)\nprint('Custom Ensemble: The RMSE of the testing set is: ', rmse_test_en)","0025d93c":"#storing the results. The below mentioned order of parameter passing is important.\n#Caution: Execute only once to avoid duplications.\nstoreResults('Ensemble_SuperLearner',acc_train_en, acc_test_en, rmse_train_en, rmse_test_en)","ddc295b8":"#creating dataframe\nresults = pd.DataFrame({ 'ML Model': ML_Model,    \n    'Train Accuracy': acc_train,\n    'Test Accuracy': acc_test,\n    'Train RMSE': rmse_train,\n    'Test RMSE': rmse_test})","35f17d17":"results","ee2f0f4d":"#Sorting the datafram on accuracy\nresults.sort_values(by=['Test Accuracy', 'Train Accuracy'], ascending=False)","3189868d":"#improting required libraries\nfrom scipy import stats","ed3ae563":"#collecting male suicide rate data\nmale = stat_data['suicide_rate'][stat_data['gender'] == 1]\nmale","79764e3a":"#collecting female suicide rate data\nfemale = stat_data['suicide_rate'][stat_data['gender'] == 0]\nfemale","3c8e18c0":"#calculating p value\nttest,pval = stats.ttest_rel(male, female)\n\nif pval<0.05:\n    print(\"Reject null hypothesis\")\nelse:\n    print(\"Accept null hypothesis\")","019fab0a":"#Creating Contingency Table\ncontingency_table = pd.crosstab(stat_data.suicide_rate, stat_data.age_group)","7e4609dc":"#Significance Level 5%\nalpha=0.05","204679a8":"chistat, p, dof, expected = stats.chi2_contingency(contingency_table )","d0cc005c":"#critical_value\ncritical_value=stats.chi2.ppf(q=1-alpha,df=dof)\nprint('critical_value:',critical_value)","0719fc0a":"print('Significance level: ',alpha)\nprint('Degree of Freedom: ',dof)\nprint('chi-square statistic:',chistat)\nprint('critical_value:',critical_value)\nprint('p-value:',p) \n#Here, pvalue = 0.0 and a low pvalue suggests that your sample provides enough evidence that you can reject  H0  for the entire population.","b8ed261f":" #compare chi_square_statistic with critical_value and p-value which is the \n #probability of getting chi-square>0.09 (chi_square_statistic)\nif chistat>=critical_value:\n    print(\"Reject H0,There is a dependency between Age group & Suicide rate.\")\nelse:\n    print(\"Retain H0,There is no relationship between Age group & Suicide rate.\")\n    \nif p<=alpha:\n    print(\"Reject H0,There is a dependency between Age group & Suicide rate.\")\nelse:\n    print(\"Retain H0,There is no relationship between Age group & Suicide rate.\")","07b950e8":"* In the case of generation, the Bloomers generation had more suicide cases followed by Silent generation irrespective of the gender.\n* Even when considered generation, males are more prone to commit suicide.","8a57209f":"# **Suicide Rate Prediction with Machine Learning:**","49680bc2":"## **1. Loading Data:**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The dataset is borrowed from Kaggle, https:\/\/www.kaggle.com\/russellyates88\/suicide-rates-overview-1985-to-2016. This is a compiled dataset pulled from four other datasets linked by time and place from year 1985 to 2016. The source of those datasets is WHO, World Bank, UNDP and a dataset published in Kaggle. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The overview of this dataset is, it has 27820 samples with 12 features. Download the dataset from the link provided.\n","34f01d5b":"**Test Conclusion:** By performing Chi- Square test, the result obtained is to reject the null hypothesis. This basically means that there is dependency between Age group & Suicide rate.","fa2d81d4":"* The above boxplot shows that the suicide cases are more in the boomers, silent and X generations. These generations are made up of people born until 1976 based on the details provided.\n* On further observation, these generations are the ones were most of them are in the age group where most suicides occur.","713c4f1d":"**OBSERVATIONS:** Upon tuning the hyperparameter, the model performance increased, and the resulting model performance is 98.8%.","7f4f0cd6":"### **6.5. Multilayer Perceptrons (MLPs):** *Deep Learning*\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Multilayer perceptrons (MLPs) are\nalso known as (vanilla) feed-forward neural networks, or sometimes just neural networks. Multilayer perceptrons can be applied for both classification and regression problems. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MLPs can be viewed as generalizations of linear models that perform multiple stages of processing to come to a decision.","1483e677":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suicide is a serious public health problem. The World Health Organization (WHO) estimates that every year close to 800 000 people take their own life, which is one person every 40 seconds and there are many more people who attempt suicide. Suicide occurs throughout the lifespan and was the second leading cause of death among 15-29-year-olds globally in 2016.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The objective of this notebook is to predict the suicide rates using Machine Learning algorithms and analyzing them to find correlated factors causing increase in suicide rates globally. \n\nThe steps demonstrated in this notebook are: \n1. Loading the data\n2. Familiarizing with data\n3. Visualizing the data\n4. Data Preprocessing & EDA\n5. Splitting the data\n6. Training the data\n7. Model Performance Comparision\n8. Statistical Tests\n9. Conclusion\n\n","fa081a22":"\n* From the above graph, we can infer that 35-54 years age group is more prone to suicides irrespective of the gender frollowed by 55-74 years age group. \n* All together, it is obvious that males tend to commit suicide more than female.","38280417":"**Performance Evaluation:**","068bc90d":"### **6.7. Custom Ensemble - SuperLearner:**\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To build a custom ensemble, a Python library called mlens is used. mlens is short of ML-Ensemble used for memory efficient parallelized ensemble learning. ML-Ensemble is a library for building Scikit-learn compatible ensemble estimator. Ensembles are built as a feed-forward network, with a set of layers stacked on each other. ","4f8ea407":"### **6.6. XGBoost Regression:**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XGBoost is one of the most popular machine learning algorithms these days. XGBoost stands for eXtreme Gradient Boosting. Regardless of the type of prediction task at hand; regression or classification. XGBoost is an implementation of gradient boosted decision trees designed for speed and performance.","4ec55bab":"**OBSERVATIONS:** The model preformance is not very good, but we can see that the scores on the training and test sets are very close together. This means we are likely underfitting, not overfitting.","c566ec80":"## **8. Statistical Tests:**\n\nStatistical tests are used in hypothesis testing. They can be used to:\n* determine whether a predictor variable has a statistically significant relationship with an outcome variable.\n* estimate the difference between two or more groups\n","12401ec7":"**OBSERVATIONS:** This discrepancy between performance on the training set and the testing set fro n_neighbors < 5 is a clear sign of overfitting. After that, the perfromance is not so great so, moving on to the other models.","cb61dbf1":"**From the above two bar plots, it is clear that men commit suicide considerably more than women irrespective of age group and generation they belong to.**\n\nNow, lets check the suicide cases based on the age group.","3dfa37cc":"**Storing Results:**","3995f815":"From the above stats, it is clear that the column, `HDI for year` has 19456 null values out of 27820 samples which is approximately 70% of the column. This may tamper the model performance so, dropping the `HDI for year` column from the dataset.","70ca70de":"**Performance Evaluation:**","58b5606e":"## **6. Model Building & Training:**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Supervised machine learning is one of the most commonly used and successful types of machine learning. Supervised learning is used whenever we want to predict a certain outcome\/label from a given set of features, and we have examples of features-label pairs. We build a machine learning model from these features-label pairs, which comprise our training set. Our goal is to make accurate predictions for new, never-before-seen data.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There are two major types of supervised machine learning problems, called classification and regression. Our data set comes under regression problem, as the prediction of suicide rate is a continuous number, or a floating-point number in programming terms. The supervised machine learning models (regression) considered to train the dataset in this notebook are:\n* k-Nearest Neighbors Regression \n* Linear Regression\n* Decision Tree\n* Random Forest\n* Gradient Boosting\n* Multilayer Perceptrons\n* XGBoost\n* Bagging Regression\n* Custom Ensemble: SuperLearner\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The metrics considered to evaluate the model performance are Accuracy & Root Mean Squared Error.\n\n","be775d36":"**Performance Evaluation:**","7f03d75c":"***Note to Remember:*** The most common ML algorithms, logistic regression and linear support vector machines\n(linear SVMs), are supervised classification algorithms, can't be applied on regression problems.\nDespite its name, LogisticRegression is a classification algorithm and not a regression algorithm, and it should not be confused with LinearRegression.","f0b15acc":"### **6.4. Random Forest:** *Ensemble of Decision Trees*\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random forests for regression and classification are currently among the most widely used machine learning methods.A random forest is essentially a collection of decision trees, where each tree is slightly different from the others. The idea behind random forests is that each tree might do a relatively good job of predicting, but will likely overfit on part of the data.  \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If we build many trees, all of which work well and overfit in different ways, we can reduce the amount of overfitting by averaging their results. To build a random forest model, you need to decide on the number of trees to build (the n_estimators parameter of RandomForestRegressor or RandomForestClassifier). They are very powerful, often work well without heavy tuning of the parameters, and don\u2019t require scaling of the data.","2daee475":"**Storing Results:**","f863ce7b":"**OBSERVATIONS:** The model didnt overfit when trained without tuning any parameters. But, the model accuracy obtained is 89.2%. \n\nSo, hyperparameter tuning is performed for the model. The tuned parameters are number of hidden layers and the hidden_units of each layer with default values of alpha. The otimized Gradient Boosted model gives us an accuracy of 92.8%, with parameter tuning.","8121523b":"**Performance Evaluation:**","ae7d58d8":"Standardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual features do not more or less look like standard normally distributed data. So, the numerical columns, `population`, `gdp_for_year` & `gdp_per_capita` are being standardized using SkLearn's RobustScalar.","3a2eab32":"**Test Conclusion:** By performing T-test, the result obtained is to reject the null hypothesis. This basically means that there is different in suicide rates of male & female.","e5172d39":"**Performance Evaluation:**","eb0c6470":"**Storing Results:**","07574d7b":"The above boxplot shows that the suicide cases are more in the age group of 35-54 years followed by 55- 74 years. The surprising part is that the suicide cases in 5-14 year age group even though they are very less, mostly in tens.","22636fbc":"The non-numerical labeled columns, country, year, gender, age_group and generation are to be converted to numerical labels that can be don by using SkLearn's LabelEncoder.","ae277d89":"## **7. Comparision of Models:**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To compare the models performance, a dataframe is created. The columns of this dataframe are the lists created to store the results of the model.","d1a39d44":"## **3. Visualizing the data:**\n\nFew plots and graphs are displayed to find how the data is distributed and the how features are related to each other.","f3f83b2d":"**Storing Results:**","f69e67f1":"## **5. Splitting the Data:**\n\nThe data is split into train & test sets, 80-20 split.","04057717":"**The observations from the above plot are that the suicide rate had grown rapidly from year 1990 & the rate of suicide has drastically reduced in year 2016.** The dataset was collected during early 2016. So all the suicide cases of 2016 are not recorded in the dataset.","a5f6e8bc":"**OBSERVATIONS:**  The above results show that the ensemble model performance is much better than linear regression model. In a way this model is an improved model of the models used in this.","26dce1fb":"**Performance Evaluation:**","aa9f9319":"### **8.2. Test 2: To find out the dependence of suicide rate on the age.**\nFinding out whether there is a dependence of suicide rate on the age using the Chi- Square test. The hypothesis statements for this test are: \n\n**H0:** Suicide rate and age are independent (Null).<br>\n**H1:** Suicide rate and age are dependent (Alternate). ","ffb323b0":"**Storing Results:**","ea67996c":"### **6.3. Decision Trees:** *Regression*\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decision trees are widely used models for classification and regression tasks. Essentially, they learn a hierarchy of if\/else questions, leading to a decision. Learning a decision tree means learning the sequence of if\/else questions that gets us to the true answer most quickly.\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In the machine learning setting, these questions are called tests (not to be confused with the test set, which is the data we use to test to see how generalizable our model is). To build a tree, the algorithm searches over all possible tests and finds the one that is most informative about the target variable.\n","72756a54":"**Performance Evaluation:**","ea91ae34":"### **8.1. Test 1: To check the difference in suicide rates between male and female**\nUsing independent sample t-test to check the difference in suicide rates between male and female. The hypothesis statements for this test are: \n\n**H0:** There is no difference in the suicide rates among male and female (Null).<br>\n**H1:** There is difference in the suicide rates among male and female (Alternate).\n","7b6c3da0":"Evaluating training and testing set performance with different numbers of max_depth from 1 to 30. The plot shows the training and test set accuracy on the y-axis against the setting of max_depth on the x-axis.","289a6d98":"**OBSERVATIONS:** The random forest gives us an accuracy of 99.4%, better than the linear models or a single decision tree, without tuning any parameters. But this might also be a case of overfitting. So, the prarameter are tuned and the finalized model has an accuracy of 98% which is better than the linear & decision tree models.","29b34b83":"The column country-year is just a combination of country and year columns. So dropping that column.","24f07a9c":"## **2. Familiarizing with Data:**\n\nIn this step, few dataframe methods are used to look into the data and its features.","7ca825db":"Evaluating training and testing set performance with different numbers of neighbors from 1 to 30. The plot shows the training and test set accuracy on the y-axis against the setting of\nn_neighbors on the x-axis.","73875000":"**Storing Results:**","5ae7c447":"Now we are going further with 10 features which also include the target column. For further assurance, lets drop all the null rows from the dataset.","67adc26c":"**OBSERVATIONS:** Among all the trained modesl, XGBoost performance is better. It is understandable because this model is very good in execution Speed & model performance.","e4bcafb8":"**The above bar plot shows that the suicide cases are more in male population.**\n\nBut lets see if this pattern exists in all the age groups and also generations. ","59f67bf1":"### **Observations:**\n* `HDI for year` column has missing values. None of the other columns have any missing values. So considering to remove HDI from the dataset. \n* The age feature has 6 unique age groups\n* `Age` is grouped into year buckets as categorical format which needs to be encoded.\n* `Gender` should be encoded.\n* Scale required numerical features.\n* The generation feature has 6 types of generations.\n* `Generation` could be encoded as well.","27b83b56":"**OBSERVATIONS:** The model preformance is gradually increased on incresing the max_depth parameter. But after max_depth = 9, the model overfits. So the model is considered with max_depth = 9 which has an accuracy of 95.2%.","4c62ab60":"## **9. Conclusion:**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The final take away form this project is the working of different machine learning models on a dataset and understanding their parameters. Creating this notebook helped me to learn a lot about the parameters of the models, how to tuned them and how they affect the model performance. \nThe final conclusion on the suicide dataset are that the irrespective of age group and generation, male population are more prone to commit suicide than female. ","6023ddb9":"### **6.2. Linear Regression**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linear regression, or ordinary least squares (OLS), is the simplest and most classic linear method for regression. Linear regression finds the parameters w and b that minimize the mean squared error between predictions and the true regression targets, y, on the training set.","6b5629e4":"Evaluating training and testing set performance with different numbers of max_depth from 1 to 30. The plot shows the training and test set accuracy on the y-axis against the setting of max_depth on the x-axis.","e43513fd":"### **6.1. k-Nearest Neighbors Regression:**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K nearest neighbors is a simple algorithm that stores all available cases and predict the numerical target based on a similarity measure (e.g., distance functions). A simple implementation of KNN regression is to calculate the average of the numerical target of the k nearest neighbors.","6a456b5b":"**The above bar plot shows that the  highest suicide rate country is  Lithuania followed by Sri Lanka.**","18ad0661":"**Storing Results:**","3035c746":"#### Let's see how many countries are avaialble in the dataset:","edf043e0":"## **4. Data Preprocessing & EDA:**\n\nHere, we clean the data by applying data preprocesssing techniques and transform the data to use it in the models."}}