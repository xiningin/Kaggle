{"cell_type":{"64d554fb":"code","a9778003":"code","dd75c97e":"code","c94c3511":"code","c2c24eb9":"code","9d476370":"code","2333c5f6":"code","68d671ed":"code","66b0ce4f":"code","837a95c9":"code","36fc40f7":"code","2b0dde05":"code","ff0a49e8":"code","b598160e":"code","4d542b7f":"code","a886d46e":"markdown","c9adc69d":"markdown","6c88c47c":"markdown"},"source":{"64d554fb":"import os\nimport shutil\nfrom tqdm import tqdm\nfrom random import shuffle\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\n\nfrom keras import backend as K\nimport random\nimport albumentations as A\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.preprocessing.image import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.applications.efficientnet import *\n\ntf.config.list_physical_devices('GPU')","a9778003":"def filename_to_target(x):\n    if 'target_human' in x:\n        return 'target_human'\n    elif 'human' in x:\n        return 'human'\n    elif 'target_gun' in x:\n        return 'target_gun'\n    elif 'target_laser' in x:\n        return 'target_laser'\n    elif 'target_tank' in x:\n        return 'target_tank'","dd75c97e":"targets_compared = {\n    'human': 0,\n    'target_human': 1,\n    'target_laser': 2,\n    'target_gun': 3, \n    'target_tank': 4\n}","c94c3511":"train = pd.DataFrame()\ntrain['filename'] = os.listdir('..\/input\/hack-images\/dataset (1)\/dataset\/train\/')\ntrain['path'] = train.filename.apply(lambda x: '..\/input\/hack-images\/dataset (1)\/dataset\/train\/'+x)\ntrain['target_name'] = train.filename.apply(lambda x: filename_to_target(x))\ntrain = train[train.target_name.notnull()].reset_index(drop=True)\ntrain['target'] = train.target_name.apply(lambda x: targets_compared[x])","c2c24eb9":"test = pd.read_csv('..\/input\/hack-images\/enc_targets.csv', header=None)\ntest.columns = ['target', 'filename']\ntest['path'] = test.filename.apply(lambda x: '..\/input\/hack-images\/dataset (1)\/dataset\/test'+x)","9d476370":"train","2333c5f6":"def augment_image(image):\n\n    aug = A.Compose([\n        \n        A.HorizontalFlip(p=0.5),\n        A.Rotate(limit=[0, 15], p=0.5),\n        \n        A.OneOf([\n            A.IAASharpen(),\n            A.IAAEmboss(),\n            A.RandomBrightnessContrast(),\n        ], p=0.5),\n        \n        A.Cutout(num_holes=5, max_h_size=20, max_w_size=20, fill_value=0, always_apply=False, p=0.5)\n    \n    ])\n\n    augmented = aug(image=image)\n\n    return augmented['image'] ","68d671ed":"class CustomDataGen(tf.keras.utils.Sequence):\n    \n    def __init__(self, df,\n                 augment=True,\n                 batch_size=8,\n                 input_shape=(224, 224, 3),\n                 shuffle=True):\n        \n        self.paths = df.path.values\n        self.labels = df.target.values\n        self.augment = augment\n        self.batch_size = batch_size\n        self.input_shape = input_shape\n        self.shuffle = shuffle\n        self.n = len(self.paths)\n        self.on_epoch_end()\n        \n    \n    def on_epoch_end(self):\n        \n        self.indexes = np.arange(len(self.paths))\n        if self.shuffle == True:\n            np.random.shuffle(self.indexes)\n\n    \n    def __load_data(self, paths, labels):\n    \n        X_batch = []\n        y_batch = []\n        \n        for path, label in zip(paths, labels):            \n            X = cv2.imread(path).copy()\n            X = cv2.cvtColor(X, cv2.COLOR_BGR2RGB)\n            X = cv2.resize(X, (self.input_shape[0], self.input_shape[1]))\n            if self.augment:\n                X = augment_image(X)\n            X_batch.append(X \/ 255.)\n            \n            y = np.zeros((5))\n            y[label] = 1\n            y_batch.append(y)\n            \n        return np.array(X_batch, dtype=float), np.array(y_batch, dtype=float)\n    \n    \n    def __getitem__(self, index):\n        \n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        X, y = self.__load_data([self.paths[i] for i in indexes],\n                                [self.labels[i] for i in indexes])        \n        \n        return X, y\n    \n    \n    def __len__(self):\n        \n        return int(np.floor(len(self.paths) \/ self.batch_size))","66b0ce4f":"traingen = CustomDataGen(train)","837a95c9":"K.clear_session()","36fc40f7":"train_df, val_df = train_test_split(train, test_size=0.15, stratify=train['target'])\n\ntrain_indxs = []\nk = 0\nfor _, train_index in StratifiedKFold(n_splits=5).split(train_df, train_df.target):\n    train_index = list(train_index)\n    if k > 0:\n        train_index += train_indxs[k-1]\n    train_indxs.append(train_index)\n    k += 1","2b0dde05":"traingen_1 = CustomDataGen(train_df.iloc[train_indxs[0]], input_shape=(224, 224, 3), batch_size=8)\nvalgen = CustomDataGen(val_df, input_shape=(224, 224, 3), batch_size=8, augment=False)","ff0a49e8":"val_df.groupby('target').path.count()","b598160e":"# Load the pretained model\npretrained_model = tf.keras.applications.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","4d542b7f":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(5, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='sgd',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    traingen_1, validation_data=valgen,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=1,\n            restore_best_weights=True\n        )\n    ]\n)","a886d46e":"# Load data","c9adc69d":"## Training","6c88c47c":"# Simple model"}}