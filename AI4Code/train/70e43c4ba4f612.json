{"cell_type":{"5603cb49":"code","64d2051b":"code","9b71b89e":"code","c76a4a73":"code","c1610937":"code","db3f4d24":"code","cd8598d4":"code","8ef97e18":"code","6d14bf63":"code","2c16ca05":"code","9bc4ffad":"code","a1b1a93e":"code","5d5012dc":"code","2f071767":"code","a862a1dc":"code","0abdfcaf":"code","f265c702":"code","58c81415":"code","0da14996":"code","79fe79bc":"code","b669034b":"code","507fb516":"code","03d88a5e":"code","c5b6c037":"code","737b8c45":"code","4a1e08de":"code","92db6c52":"code","eb7eef1c":"code","0d8e9316":"code","92f6fe87":"code","2647dfaa":"code","260d4ebd":"code","aa00f58d":"code","df47e2da":"code","4a10f3cd":"code","593688a1":"code","9f5140b2":"code","7b89f606":"code","5ed0e08c":"code","07ff7a9f":"code","5c116013":"code","6352e732":"code","9d55088d":"code","e3d27b33":"code","42cb99dd":"code","9fe29dfa":"code","fa83c45c":"code","a5e3cb93":"code","c3dab58b":"markdown","5d79661d":"markdown","79fb20a4":"markdown","991d1dc3":"markdown","4147a27d":"markdown","5d078c52":"markdown","fdd5d0f6":"markdown","db0d8903":"markdown","3d9a805a":"markdown","6c5e779d":"markdown","6b56cc73":"markdown","e121fa10":"markdown","dd4e06a2":"markdown","e6f547da":"markdown","35c755a2":"markdown","b421c86b":"markdown","036a467c":"markdown","dc8bc569":"markdown","6f637fd0":"markdown","78007fed":"markdown","b5f56c96":"markdown","09ef1b6c":"markdown","a61d3c88":"markdown","fe48ea17":"markdown"},"source":{"5603cb49":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nfrom matplotlib import style\nimport matplotlib.cm as cm, matplotlib.font_manager as fm\nimport matplotlib.ticker as ticker\nfrom datetime import datetime, timedelta\n\n%matplotlib inline","64d2051b":"df = pd.read_csv('..\/input\/2018_03.csv')\nfor i in range(4,10):\n    df = df.append(pd.read_csv('..\/input\/2018_0'+str(i)+'.csv'))\ndf = df[df['type'] == 'NJ Transit']","9b71b89e":"df_july = pd.read_csv('..\/input\/2018_07.csv', index_col = False)\ndf_july = df_july[df_july['type'] == 'NJ Transit']","c76a4a73":"df.isnull().sum()","c1610937":"df = df.dropna()\ndf_july = df_july.dropna()","db3f4d24":"df_july.describe()","cd8598d4":"df['scheduled_time'] = pd.to_datetime(df['scheduled_time']) \ndf['actual_time'] = pd.to_datetime(df['actual_time'])\ndf_july.head(2)","8ef97e18":"df_july['scheduled_time'] = pd.to_datetime(df_july['scheduled_time']) \ndf_july['actual_time'] = pd.to_datetime(df_july['actual_time'])\ndf_july.head(2)","6d14bf63":"#The cumulative delay for a train is simply the \"delay\" value for the last stop for the train:\ncumu_delay_july = df_july.groupby(['date' , 'train_id']).last()\ncumu_delay_july .head(2)","2c16ca05":"#july\nontime_trains_july = cumu_delay_july[(cumu_delay_july['delay_minutes']<=0)]\nontime_trains_count_july = ontime_trains_july['delay_minutes'].count()\n\ncancelled_trains = df_july[(df_july['status'] == 'cancelled')]\ncancelled_trains_count = cancelled_trains['train_id'].count()\n\ndelayed_trains_july = cumu_delay_july[(cumu_delay_july['delay_minutes']>0)]\ndelayed_trains_count_july = delayed_trains_july['delay_minutes'].count()","9bc4ffad":"# function to produce more beautiful pie charts with matplotlib\ndef pie_chart(fractions, #values for the wedges\n              labels, #labels for the wedges\n              title = '', #title of the pie chart\n              cm_name = 'Pastel1', #name of the matplotlib colormap to use\n              autopct = lambda x: str(round(x, 1)) + '%', #format the value text on each pie wedge\n              labeldistance = 1.05, #where to place wedge labels in relation to pie wedges\n              shadow = True, #shadow around the pie\n              startangle = 90, #rotate 90 degrees to start the top of the data set on the top of the pie\n              edgecolor = 'w', #color of pie wedge edges\n              width = 8, #width of the figure in inches\n              height = 8, #height of the figure in inches\n              grouping_threshold = None, #group all wedges below this value into one 'all others' wedge\n              grouping_label = None): #what to label the grouped wedge\n    \n    # if the user passed a threshold value, group all fractions lower than it into one 'misc' pie wedge\n    if not grouping_threshold==None:\n        \n        # if user didn't pass a label, apply a default text\n        if grouping_label == None:\n            grouping_label = 'Others'\n\n\n        # group all other rows below the cut-off value\n        all_others = pd.Series(fractions[~row_mask].sum())\n        all_others.index = [grouping_label]\n\n       \n    \n    # get the color map then pull 1 color from it for each pie wedge we'll draw\n    color_map = cm.get_cmap(cm_name)\n    num_of_colors = len(fractions)\n    colors = color_map([x\/float(num_of_colors) for x in range(num_of_colors)])\n    \n    # create the figure and an axis to plot on\n    fig, ax = plt.subplots(figsize=[width, height])\n    \n    # plot the pie\n    wedges = ax.pie(fractions, \n                    labels = labels, \n                    labeldistance = labeldistance,\n                    autopct = autopct,\n                    colors = colors,\n                    shadow = shadow, \n                    startangle = startangle)\n    \n    # change the edgecolor for each wedge\n    for wedge in wedges[0]:\n        wedge.set_edgecolor(edgecolor)\n    \n    # set the title and show the plot\n    ax.set_title(title)\n    plt.show()","a1b1a93e":"df_march = pd.read_csv('..\/input\/2018_03.csv', index_col = False)\ndf_march = df_march[df_march['type'] == 'NJ Transit']\ndf_march = df_march.dropna()\n\ndf_april = pd.read_csv('..\/input\/2018_04.csv', index_col = False)\ndf_april = df_april[df_april['type'] == 'NJ Transit']\ndf_april = df_april.dropna()\n\ndf_may = pd.read_csv('..\/input\/2018_05.csv', index_col = False)\ndf_may = df_may[df_may['type'] == 'NJ Transit']\ndf_may = df_may.dropna()\n\ndf_june = pd.read_csv('..\/input\/2018_06.csv', index_col = False)\ndf_june = df_june[df_june['type'] == 'NJ Transit']\ndf_june = df_june.dropna()\n\ndf_august = pd.read_csv('..\/input\/2018_08.csv', index_col = False)\ndf_august = df_august[df_august['type'] == 'NJ Transit']\ndf_august = df_august.dropna()\n\ndf_september = pd.read_csv('..\/input\/2018_09.csv', index_col = False)\ndf_september = df_september[df_september['type'] == 'NJ Transit']\ndf_september = df_september.dropna()\n","5d5012dc":"cumu_delay_march = df_march.groupby(['date' , 'train_id']).last()\ncumu_delay_april = df_april.groupby(['date' , 'train_id']).last()\ncumu_delay_may = df_may.groupby(['date' , 'train_id']).last()\ncumu_delay_june = df_june.groupby(['date' , 'train_id']).last()\ncumu_delay_august = df_august.groupby(['date' , 'train_id']).last()\ncumu_delay_september = df_september.groupby(['date' , 'train_id']).last()","2f071767":"delayed_trains_march = cumu_delay_march[(cumu_delay_march['delay_minutes']>0)]\ndelayed_trains_count_march = delayed_trains_march['delay_minutes'].count()\n\ndelayed_trains_april = cumu_delay_april[(cumu_delay_april['delay_minutes']>0)]\ndelayed_trains_count_april = delayed_trains_april['delay_minutes'].count()\n\ndelayed_trains_may = cumu_delay_may[(cumu_delay_may['delay_minutes']>0)]\ndelayed_trains_count_may = delayed_trains_may['delay_minutes'].count()\n\ndelayed_trains_june = cumu_delay_june[(cumu_delay_june['delay_minutes']>0)]\ndelayed_trains_count_june = delayed_trains_june['delay_minutes'].count()\n\ndelayed_trains_august = cumu_delay_august[(cumu_delay_august['delay_minutes']>0)]\ndelayed_trains_count_august = delayed_trains_august['delay_minutes'].count()\n\ndelayed_trains_september = cumu_delay_september[(cumu_delay_september['delay_minutes']>0)]\ndelayed_trains_count_september = delayed_trains_september['delay_minutes'].count()","a862a1dc":"delay_data_per_month = [ delayed_trains_count_march , delayed_trains_count_april ,delayed_trains_count_may, delayed_trains_count_june ,delayed_trains_count_july, delayed_trains_count_august , delayed_trains_count_september]\nlabels = 'march', 'April' , 'May' , 'June' , 'July' , 'August' , 'September'\n# test out our function\npie_chart(fractions = delay_data_per_month,\n          labels = labels,\n          title = 'Delay Report Per Month')","0abdfcaf":"#july\ndelay_data = [ontime_trains_count_july, delayed_trains_count_july , cancelled_trains_count]\nlabels = 'OnTime', 'Delayed' , 'Cancelled'\n# test out our function\npie_chart(fractions = delay_data,\n          labels = labels,\n          title = ' July')","f265c702":"departed = df_july[df_july['status'] == 'departed'].status.count()\nestimated = df_july[df_july['status'] == 'estimated'].status.count()\ncancelled = df_july[df_july['status'] == 'cancelled'].status.count()\nsum_status = departed+estimated+cancelled\nstatuses = df_july['status'].value_counts()\/sum_status\nstatuses","58c81415":"ax = statuses.plot(kind='bar', figsize=[9,4],width=0.6,alpha=0.6,edgecolor='k', grid=False, ylim=[0, 1])\n\nax.set_xticklabels(statuses.index, rotation=0, rotation_mode='anchor')\nax.yaxis.grid(True)\nax.yaxis.grid(True)\n   \nax.set_ylabel('Status Rate')\n\nplt.show()","0da14996":"mu = df['delay_minutes'].mean() # mean of distribution\nsigma = df['delay_minutes'].std()  # standard deviation of distribution\nx = (df['delay_minutes'] *sigma ) + mu \n\nnum_bins = 50\n\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=1)\ny = mlab.normpdf(bins, mu, sigma)\nax.plot(bins, y, '--')\n\n\nax.set_xlabel('Delay (min)')\nax.set_ylabel('Probability density')\nax.set_title('')\n\nplt.show()","79fe79bc":"week_av_delay = df.groupby(df['day_of_weeks'] ,as_index = False )['delay_minutes'].mean()\nweek_av_delay['num'] = [5,1,6,7,4,2,3]","b669034b":"week_av_delay = df.groupby(df['day_of_weeks'] ,as_index = False )['delay_minutes'].mean()\nweek_av_delay['num'] = [5,1,6,7,4,2,3]\nweek_av_delay","507fb516":"df_july['date'] = pd.to_datetime(df_july['date']) \ndf_july['day_of_weeks'] = df_july['date'].dt.weekday_name\ndf['date'] = pd.to_datetime(df['date']) \ndf['day_of_weeks'] = df['date'].dt.weekday_name","03d88a5e":"week_av_delay_july = df_july.groupby(df_july['day_of_weeks'] ,as_index = False )['delay_minutes'].mean()\nweek_av_delay_july['num'] = [5,1,6,7,4,2,3]","c5b6c037":"week_av_delay_july = df_july.groupby(df_july['day_of_weeks'] ,as_index = False )['delay_minutes'].mean()\nweek_av_delay_july['num'] = [5,1,6,7,4,2,3]\nweek_av_delay_july","737b8c45":"fig, ax = plt.subplots()\nfig.set_size_inches(9, 4)\nweek_av_delay_scatter = ax.scatter(x = week_av_delay['num'], y = week_av_delay['delay_minutes'],\n                                   c='m', edgecolor='k', alpha=.4, s=150)\n\n\n# set  axis labels\n\nax.set_xlabel('Week (7 month)')\nax.set_ylabel('Average Delay (min)')\n\n# annotate\nbbox_style = {'boxstyle':'round', 'color':'k', 'fc':'w', 'alpha':0.8}\narrowprops_style = {'arrowstyle':'->', 'connectionstyle':'arc3,rad=0.5', 'color':'k', 'alpha':0.8}\nannotate_day_of_weeks= lambda row: ax.annotate(row['day_of_weeks'], \n                                          xy=(row['num'], row['delay_minutes']),\n                                          xytext=(row['num'] + 0.1, row['delay_minutes'] + 0.1),\n                                          bbox=bbox_style,\n                                          xycoords='data',\n                                          arrowprops=arrowprops_style)\nweek_av_delay.apply(annotate_day_of_weeks, axis=1)\n    \nplt.show()","4a1e08de":"fig, ax = plt.subplots()\nfig.set_size_inches(9, 4)\nweek_av_delay_july_scatter = ax.scatter(x = week_av_delay_july['num'], y = week_av_delay_july['delay_minutes'], c='m', edgecolor='k', alpha=.4, s=150)\n\n\n# set  axis labels\n\nax.set_xlabel('Week (july)')\nax.set_ylabel('Average Delay (min)')\n\n# annotate\nbbox_style = {'boxstyle':'round', 'color':'k', 'fc':'w', 'alpha':0.8}\narrowprops_style = {'arrowstyle':'->', 'connectionstyle':'arc3,rad=0.5', 'color':'k', 'alpha':0.8}\nannotate_day_of_weeks_july = lambda row: ax.annotate(row['day_of_weeks'], \n                                          xy=(row['num'], row['delay_minutes']),\n                                          xytext=(row['num'] + 0.1, row['delay_minutes'] + 0.1),\n                                          bbox=bbox_style,\n                                          xycoords='data',\n                                          arrowprops=arrowprops_style)\nweek_av_delay_july.apply(annotate_day_of_weeks_july, axis=1)\n    \n\nplt.show()","92db6c52":"df_july['ac_time']= df_july['actual_time'].dt.time\ndf_july['sc_time']= df_july['scheduled_time'].dt.time","eb7eef1c":"\nx = df_july.groupby('sc_time')['delay_minutes'].mean()","0d8e9316":"fig, ax = plt.subplots()\nfig.set_size_inches(9,4)\n\n\n\nfig.autofmt_xdate()\n\nax.plot(x , color = 'c' , alpha=0.5)\nax.set_xlim('00:00:00', '06:00:00')\n\nax.set_xlabel('Scheduled Time (00:00_06:00)')\nax.set_ylabel('Average Delay (min)')\n\n\nfig.suptitle('Early Morning ')\n\nplt.show()","92f6fe87":"fig, ax = plt.subplots()\nfig.set_size_inches(9,4)\n\n\n\nfig.autofmt_xdate()\n\nax.plot(x , color = 'c' , alpha=0.5)\nax.set_xlim('06:00:00', '12:00:00')\n\nax.set_xlabel('Scheduled Time (06:00_12:00)')\nax.set_ylabel('Average Delay (min)')\n\n\n\nfig.suptitle('Early Afternoon')\n\nplt.show()","2647dfaa":"fig, ax = plt.subplots()\nfig.set_size_inches(9,4)\n\n\nfig.autofmt_xdate()\n\nax.plot(x , color = 'c' , alpha=0.5)\nax.set_xlim('12:00:00', '18:00:00')\n\nax.set_xlabel('Scheduled Time (12:00_18:00)')\nax.set_ylabel('Average Delay (min)')\n\nfig.suptitle('Late Afternoon ')\n\nplt.show()","260d4ebd":"fig, ax = plt.subplots()\nfig.set_size_inches(9,4)\n\n\nfig.autofmt_xdate()\n\nax.plot(x , color = 'c' , alpha=0.5)\nax.set_xlim('18:00:00', '23:59:00')\n\nax.set_xlabel('Scheduled Time (18:00_00:00)')\nax.set_ylabel('Average Delay (min)')\n\n\n\nfig.suptitle('Evening')\n\nplt.show()","aa00f58d":"lines = df_july.groupby(['train_id']).last()\nlines.head(2)","df47e2da":"line_usage = lines['line'].value_counts()\nline_usage","4a10f3cd":"lines_cumu_delay_july = lines.groupby('line')['delay_minutes'].sum().sort_values(ascending=False)\nlines_cumu_delay_july","593688a1":"lines_stop_sequence = lines.groupby('line')['stop_sequence'].sum().sort_values(ascending=False)\nlines_stop_sequence","9f5140b2":"bar_width = 0.25\nerror_config = {'ecolor': '0.3'}\n\nax = line_usage.plot(kind = 'bar', figsize=[9, 4], width = bar_width, position=1 , alpha=0.6, \n                    color='g', edgecolor='k', grid=False, ylim=[0, 225] , error_kw = error_config,\n                 label='Number of Trips')\n\nax.set_xticklabels(line_usage.index, rotation=45, rotation_mode='anchor', ha='right')\nax.yaxis.grid(True)\n   \n\n\nax.set_ylabel('Number of Train records for Each Line',  color='g')\nax.tick_params('y', colors='g')\n\n\n\nax2 = ax.twinx()\n\nax2 =lines_cumu_delay_july.plot( kind = 'bar' , figsize=[9, 4], width= bar_width, position = 0, alpha=0.6, \n                    color='r', edgecolor='k', grid=False, ylim=[0, 700] , error_kw=error_config,\n                 label='Delay (min)')\n\nax2.set_xticklabels(lines_cumu_delay_july.index, rotation=45, rotation_mode='anchor', ha='right')\n\n\n\nax2.set_ylabel('Delay (min)' , color='r')\nax2.tick_params('y', colors='r')\n\n\n\n\n","7b89f606":"\nax = lines_stop_sequence.plot(kind='bar', figsize=[9, 9], width= bar_width, alpha=0.6, position = 1,\n                    color='b', edgecolor='k', grid=False, ylim=[0, 5000])\n\nax.set_xticklabels(lines_stop_sequence.index, rotation=45, rotation_mode='anchor', ha='right')\nax.yaxis.grid(True)\n   \nax.set_ylabel('Number of Stops' , color='y')\nax.tick_params('y', colors='y')\n\nax2 = ax.twinx()\n\nax2 =lines_cumu_delay_july.plot( kind = 'bar' , figsize=[9, 4], width= bar_width, position = 0, alpha=0.6, \n                    color='r', edgecolor='k', grid=False, ylim=[0, 700] , error_kw=error_config,\n                 label='Delay (min)')\n\nax2.set_xticklabels(lines_cumu_delay_july.index, rotation=45, rotation_mode='anchor', ha='right')\n\n\n\nax2.set_ylabel('Delay (min)' , color='r')\nax2.tick_params('y', colors='r')","5ed0e08c":"df_july_NJC = df_july[df_july['line'] == 'No Jersey Coast']\nx= df_july_NJC.groupby('stop_sequence')[\"delay_minutes\"].mean()\n\nfig, ax = plt.subplots()\nfig.set_size_inches(9,4)\n\nax.plot(x , color = 'c' , alpha=0.5 , linewidth='3')\n\n\nax.set_ylabel(\"average delay (min)\")\nax.set_xlabel(\"Stops\")\n\nplt.show()","07ff7a9f":"stations = df_july.groupby(['train_id']).last()\nstations.head(2)","5c116013":"stations_to_usage = stations['to'].value_counts().head(10)\nstations_to_usage","6352e732":"stations_to_cumu_delay_july = stations.groupby('to')['delay_minutes'].sum().sort_values(ascending=False).head(10)\nstations_to_cumu_delay_july","9d55088d":"stations_stop_sequence = stations.groupby('to')['stop_sequence'].sum().sort_values(ascending=False).head(10)\nstations_stop_sequence","e3d27b33":"ax = stations_to_usage.plot(kind='bar', figsize=[9, 9], width= bar_width, alpha=0.6, position = 1,\n                    color='orange', edgecolor='k', grid=False, ylim=[0, 300])\n\nax.set_xticklabels(stations_to_usage.index, rotation=45, rotation_mode='anchor', ha='right')\nax.yaxis.grid(True)\n   \nax.set_ylabel('Number of Trains ' , color='orange')\nax.tick_params('y', colors='orange')\n\nax2 = ax.twinx()\n\nax2 =stations_to_cumu_delay_july.plot( kind = 'bar' , figsize=[9, 4], width= bar_width, position = 0, alpha=0.6, \n                    color='r', edgecolor='k', grid=False, ylim=[0, 900] , error_kw=error_config,\n                 label='Delay(min)')\n\nax2.set_xticklabels(stations_to_cumu_delay_july.index, rotation=45, rotation_mode='anchor', ha='right')\n\n\n\nax2.set_ylabel('Delay(min)' , color='r')\nax2.tick_params('y', colors='r')","42cb99dd":"ax = stations_stop_sequence.plot(kind='bar', figsize=[9, 9], width= bar_width, alpha=0.6, position = 1,\n                    color='slategrey', edgecolor='k', grid=False, ylim=[0, 4000])\n\nax.set_xticklabels(stations_stop_sequence.index, rotation=45, rotation_mode='anchor', ha='right')\nax.yaxis.grid(True)\n   \nax.set_ylabel('Number of Stops' , color='slategrey')\nax.tick_params('y', colors='slategrey')\n\nax2 = ax.twinx()\n\nax2 =stations_to_cumu_delay_july.plot( kind = 'bar' , figsize=[9, 4], width= bar_width, position = 0, alpha=0.6, \n                    color='r', edgecolor='k', grid=False, ylim=[0, 900] , error_kw=error_config,\n                 label='Delay(min)')\n\nax2.set_xticklabels(stations_to_cumu_delay_july.index, rotation=45, rotation_mode='anchor', ha='right')\n\n\n\nax2.set_ylabel('Delay(min)' , color='r')\nax2.tick_params('y', colors='r')","9fe29dfa":"#get cumulative delay for NJ Transit trains to New York Penn line\nnjt_nyp = cumu_delay_july[cumu_delay_july['to'] == 'New York Penn Station']\nnjt_nyp.head(2)","fa83c45c":"#delays for all NJ Transit trains to New York Penn line on july 2, 2018\n# filter based on the \"date\" index, which level 0 of the multiindex\nnjt_nyp_0702 = njt_nyp.loc[njt_nyp.index.get_level_values(0) == '2018-07-02']\nnjt_nyp_0702.head(2)","a5e3cb93":"x = njt_nyp_0702.groupby('scheduled_time')['delay_minutes'].mean()\n\nfig, ax = plt.subplots()\nfig.set_size_inches(9,4)\nfig.autofmt_xdate()\n\nax.plot(x , color = 'c' , alpha=0.5 , linewidth='3')\n\n\nax.set_xlabel('scheduled Time')\nax.set_ylabel('Delay (min)')\n\nplt.show()","c3dab58b":"- Show descriptive statistics","5d79661d":"- Number of STOPS has a Direct Relationship with Delay the same as lines","79fb20a4":"# 3. Converting the \"scheduled_time\" and \"actual_time\" columns to datetimes","991d1dc3":"# 10. Number of Stops vs. Delay for \"No Jersey Coast\" Line","4147a27d":"- and  we have many peaks in the evening also","5d078c52":"# 6. Probability Density Function (PDF) for Delay","fdd5d0f6":"- Data Set for july and NJ Transit","db0d8903":"- Pandas for data manipulation\n\n- Matplotlib for basic visualization\n\n- Maybe Seaborn for improved and interactive visualization","3d9a805a":"# 1. Import Libraries","6c5e779d":"- Numbers of Stops have a Direct Relationship with Delay","6b56cc73":"- It shows that summer is the season having more delay in compare of others","e121fa10":"# 5. Status of the Trains in july ","dd4e06a2":"# 11. Most Delayed Stations in july","e6f547da":"- drop these missing values.","35c755a2":"- The highest amount of Delay occures between mid-night and 6 am","b421c86b":"- Check for missing values.","036a467c":"- Numbers of Trips have a Direct Relationship with Delay","dc8bc569":"# 2. Import the Data Set","6f637fd0":"# 8. Delay in Different Scheduled Times","78007fed":"#  9. Most Delayed Lines in july","b5f56c96":"# 12. Delays of ''New York Penn\" Station During the 2nd of july","09ef1b6c":"# 4. Picking July for More Analysis","a61d3c88":"# 7. Average Delay During a Week","fe48ea17":"- Number of TRIPS has a Direct Relationship with Delay the same as lines"}}