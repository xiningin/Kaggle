{"cell_type":{"a1942116":"code","48f9d834":"code","78708339":"code","a2c18a55":"code","e3ab2a42":"code","15af301f":"code","b7b459c8":"code","266ea9f5":"code","475b0961":"code","2c44315e":"code","685e9b95":"code","793b5ca2":"code","d507abbd":"code","7dc07496":"code","7852016b":"code","8a5bd090":"code","685dfac5":"code","95d615a4":"code","15580d0e":"code","04fce894":"code","68cf46cf":"code","80547c42":"code","d438faf5":"code","1b85f0dd":"code","9d8fc306":"code","aa71df0c":"code","74ad3eaf":"code","f786882d":"code","b32c324b":"code","da6b29a5":"code","ba9a1640":"code","09988964":"code","36e20b6b":"code","c1f551cf":"code","efee753c":"code","9e686224":"code","8fd92ca2":"code","8a09f872":"code","aee5c2b6":"code","1a2ac1a5":"code","5e9a1055":"code","0802ed8b":"code","18c45690":"code","1d5eb17a":"code","3852c5c9":"code","1f996eac":"code","a733e30d":"code","7c09a98b":"code","25676640":"code","675177f0":"code","b8a1f04a":"markdown","cba46ca0":"markdown","dfa00bf0":"markdown","a99914f7":"markdown","1226bb76":"markdown","adf47522":"markdown","024b488c":"markdown","06b12a13":"markdown"},"source":{"a1942116":"import pandas as pd\nimport random","48f9d834":"true_news = pd.read_csv('..\/input\/fake-and-real-news-dataset\/True.csv')\nfake_news = pd.read_csv('..\/input\/fake-and-real-news-dataset\/Fake.csv')","78708339":"print(true_news.isnull().sum())\nprint(fake_news.isnull().sum())","a2c18a55":"fake_news.head()","e3ab2a42":"true_news.head()","15af301f":"print('true: ',true_news.shape,true_news.columns)\nprint('fake: ',fake_news.shape,fake_news.columns)","b7b459c8":"random_index = random.sample(range(true_news.shape[0]),5)","266ea9f5":"print('true\\n',true_news['title'][random_index])\nprint('fake\\n',fake_news['title'][random_index])","475b0961":"print('true\\n',true_news['text'][random_index])\nprint('fake\\n',fake_news['text'][random_index])","2c44315e":"print('true\\n',true_news['subject'].value_counts())\nprint('fake\\n',fake_news['subject'].value_counts())","685e9b95":"# \uc11c\ub85c \ub2e4\ub978 \ubc94\uc8fc\ub97c \uac16\uace0 \uc788\uc74c","793b5ca2":"true_MON = true_news['date'].apply(lambda x: x[0:3].upper())\nfake_MON = fake_news['date'].apply(lambda x: x[0:3].upper())","d507abbd":"print(true_MON.value_counts())\nprint(fake_MON.value_counts())","7dc07496":"# \uae30\uc0ac \ucd9c\ucc98 \uc81c\uac70\ub97c \uc704\ud574 '-' \ub97c \uae30\uc900\uc73c\ub85c\nReuters = true_news['text'].apply(lambda x : x.split('-')[0])","7852016b":"# Reuters\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \ub370\uc774\ud130 \ud655\uc778\nnotReuters = Reuters[Reuters.apply(lambda x: 'Reuters' not in x)]\nnotReuters[1:20]","8a5bd090":"# Reuters\uac00 \uc544\ub2c8\ub354\ub77c\ub3c4 \ucd9c\ucc98\ub97c \ub098\ud0c0\ub0b4\uace0 \uc788\ub294 \uacbd\uc6b0\uac00 \ud655\uc778 \ub418\uae30 \ub54c\ubb38\uc5d0\n# \ud14d\uc2a4\ud2b8\uc758 \uae38\uc774(30)\ub97c \uae30\uc900\uc73c\ub85c \ubd84\ub958 \uc2dc\ub3c4\nnotReuters[notReuters.apply(lambda x:len(x)>30)]","685dfac5":"# \ucd9c\ucc98\uac00 \uc5c6\uc774 \ubcf8\ubb38\uc774 \uc2dc\uc791\ud558\ub294 \uae30\uc0ac \uc120\ubcc4, \ud574\ub2f9 \uae30\uc0ac\ub4e4\uc740 \ucd9c\ucc98 \uc81c\uac70 \uc791\uc5c5\uc5d0\uc11c \uc81c\uc678 \ub418\uc5b4\uc57c\ud568\nno_remove = notReuters[notReuters.apply(lambda x:len(x)>30)].index","95d615a4":"# case1) \ucd9c\ucc98\uac00 \uc788\uc73c\uba70, '-'\uc774 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0 '-'\ub97c \uae30\uc900\uc73c\ub85c \ud14d\uc2a4\ud2b8\ub97c \ubd84\ub9ac\ud574 \ub4b7\ubd80\ubd84 \uc120\ud0dd\n# case2) \ucd9c\ucc98\uac00 \uc5c6\uc73c\uba70, '-'\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \ud14d\uc2a4\ud2b8\uac00 \ubd84\ub9ac\ub418\uc9c0 \uc54a\uc544 \ub370\uc774\ud130 \uadf8\ub300\ub85c \uc120\ud0dd\n# case3) \ucd9c\ucc98\uac00 \uc5c6\uc73c\uba70, '-'\uc774 \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0\n\nfor i in range(true_news.shape[0]):\n    if i not in no_remove:\n        try:\n            true_news['text'][i] = '-'.join(true_news['text'][i].split(' - ')[1:])\n        except:\n            true_news['text'][i] = true_news['text'][i]\n    else:\n        true_news['text'][i] = true_news['text'][i]","15580d0e":"# \ub0b4\uc6a9\uc5d0 \ud14d\uc2a4\ud2b8\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc874\uc7ac (\uacf5\ubc31\ub9cc \uc788\uc74c)\ntrue_news['text'][true_news['text'].apply(lambda x: len(x)<3)]","04fce894":"# \ud2b9\ud788 fake_news\uc758 \uacbd\uc6b0 \uadf8 \uc218\uac00 \ub9e4\uc6b0 \ub9ce\uc740 \ud3b8\nprint(len(fake_news['text'][fake_news['text'].apply(lambda x: len(x)<3)]))\nprint(len(fake_news['title'][fake_news['title'].apply(lambda x: len(x)<3)]))","68cf46cf":"# title\uc774 \uacf5\ubc31\uc778 \uacbd\uc6b0\ub294 \uc5c6\uc74c, \ub530\ub77c\uc11c \uc81c\ubaa9 + \ub0b4\uc6a9\uc744 \ud558\ub098\uc758 \ubcc0\uc218\ub85c \ub9cc\ub4e4\uc5b4 \ubd84\uc11d \uc608\uc815\ntrue_news['content'] = true_news['title'] + true_news['text']\nfake_news['content'] = fake_news['title'] + fake_news['text']","80547c42":"# \ucd5c\uc18c\ud55c \ud55c\ubb38\uc7a5\uc740 \uac16\uac8c \ub428\nprint(fake_news['content'][fake_news['content'].apply(lambda x: len(x)<3)])","d438faf5":"# \ub77c\ubca8 \uc778\ucf54\ub529\ntrue_news['target'] = 'true'\nfake_news['target'] = 'fake'","1b85f0dd":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.decomposition import LatentDirichletAllocation\nimport re\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud,STOPWORDS","9d8fc306":"# \uc601\uc5b4\uac00 \uc544\ub2cc \uac83 \uc0ad\uc81c\ntrue_news['content'] = true_news['content'].apply(lambda x: re.sub(\"[^a-zA-Z]\",\" \",x))\nfake_news['content'] = true_news['content'].apply(lambda x: re.sub(\"[^a-zA-Z]\",\" \",x))","aa71df0c":"cnt_vect = CountVectorizer(max_df=0.95, max_features=3000, stop_words='english')\nfeat_vect = cnt_vect.fit_transform(true_news['content'])","74ad3eaf":"feat_vect.shape","f786882d":"lda = LatentDirichletAllocation(n_components=2)\nlda.fit(feat_vect)\nprint(lda.components_.shape)\nlda.components_","b32c324b":"def display_topics(model, feature_names, no_top_words):\n    for topic_index, topic in enumerate(model.components_):\n        print('Topic #', topic_index)\n        topic_word_indexes = topic.argsort()[::-1]\n        top_indexes = topic_word_indexes[:no_top_words]\n        \n        feature_concat = ' '.join([feature_names[i] for i in top_indexes])\n        print(feature_concat)\n        \nfeature_names = cnt_vect.get_feature_names()\ndisplay_topics(lda, feature_names, 15)\n    ","da6b29a5":"plt.figure(figsize = (20,20)) # Text that is not Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(true_news[true_news.subject == 'politicsNews'].text))\nplt.imshow(wc , interpolation = 'bilinear')","ba9a1640":"plt.figure(figsize = (20,20)) # Text that is not Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(true_news[true_news.subject == 'worldnews'].text))\nplt.imshow(wc , interpolation = 'bilinear')","09988964":"plt.figure(figsize = (20,20)) # Text that is not Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(true_news.text))\nplt.imshow(wc , interpolation = 'bilinear')","36e20b6b":"cnt_vect = CountVectorizer(max_df=0.95, max_features=3000, stop_words='english')\nfeat_vect = cnt_vect.fit_transform(fake_news['content'])","c1f551cf":"lda = LatentDirichletAllocation(n_components=6)\nlda.fit(feat_vect)\nprint(lda.components_.shape)\nlda.components_","efee753c":"feature_names = cnt_vect.get_feature_names()\ndisplay_topics(lda, feature_names, 15)","9e686224":"fake_news['subject'].unique()","8fd92ca2":"plt.figure(figsize = (20,20)) # Text that is Fake\nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(fake_news.text))\nplt.imshow(wc , interpolation = 'bilinear')","8a09f872":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline","aee5c2b6":"# \ud14d\uc2a4\ud2b8\ub9cc\uc73c\ub85c \ub274\uc2a4\ub97c \ubd84\ub958\ud560 \uc608\uc815\uc774\uae30 \ub54c\ubb38\uc5d0 \ubd88\ud544\uc694\ud55c \ubcc0\uc218 \uc804\ubd80 \uc81c\uc678\ntrue_news = true_news[['content','target']]\nfake_news = fake_news[['content','target']]","1a2ac1a5":"# \uacb0\ud569\nfinal_data = pd.concat([true_news,fake_news])\nfinal_data.head()","5e9a1055":"print(true_news.shape, fake_news.shape)\nfinal_data.shape","0802ed8b":"# \ud559\uc2b5 50%, \uac80\uc815 30%, \ud14c\uc2a4\ud2b820%\ub85c \ub370\uc774\ud130 \ubd84\ud560\nX_train, X_test, y_train, y_test = train_test_split(final_data['content'],final_data['target'],train_size=0.5)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test,y_test, train_size = 0.6)","18c45690":"# target \uac12\uc774 \ubab0\ub9b0 \ubd80\ubd84\uc774 \uc5c6\ub294\uc9c0 \ud655\uc778\nprint(y_train.value_counts())\nprint('='*30)\nprint(y_valid.value_counts())\nprint('='*30)\nprint(y_test.value_counts())","1d5eb17a":"print(X_train.shape,X_valid.shape,X_test.shape)","3852c5c9":"# \ubca1\ud130\ud654\ntf_vect = TfidfVectorizer(max_features = 10000, stop_words='english')\ntf_vect.fit(X_train)\nX_train_tf_vect = tf_vect.transform(X_train)\nX_valid_tf_vect = tf_vect.transform(X_valid)\nX_test_tf_vect = tf_vect.transform(X_test)","1f996eac":"# LGBM \ubaa8\ub378 \ud559\uc2b5\nlgbm_clf = LGBMClassifier(n_estimators = 1000)\nevals = [(X_valid_tf_vect, y_valid)]\nlgbm_clf.fit(X_train_tf_vect, y_train, early_stopping_rounds=100, eval_metric='accuracy',eval_set = evals)","a733e30d":"# \ucd5c\uc885 \uc608\uce21\uac12\npred = lgbm_clf.predict(X_test_tf_vect)","7c09a98b":"# \uc815\ud655\ub3c4\naccuracy_score(pred,y_test)","25676640":"pipeline = Pipeline([\n    ('tfidf_vect', TfidfVectorizer(stop_words='english')),\n    ('lr_clf', LogisticRegression())\n])\n\nparams = {'tfidf_vect__max_features':[7000,10000,12000],\n          'tfidf_vect__max_df':[0.7,0.9],\n         'lr_clf__C':[0.1,1,5,10]}\ngrid_cv_pipe = GridSearchCV(pipeline, param_grid = params, cv=3, scoring='accuracy',verbose=1)\ngrid_cv_pipe.fit(X_train,y_train)\nprint(grid_cv_pipe.best_params_, grid_cv_pipe.best_score_)\n","675177f0":"\npred = grid_cv_pipe.predict(X_test)\nprint('Logistic Reg \uc815\ud655\ub3c4 {0:.3f}'.format(accuracy_score(y_test,pred)))","b8a1f04a":"### 3-2) fake_news","cba46ca0":"### 3-1) True News Keywords","dfa00bf0":"- \ub0b4\uc6a9(title, text)\ub9cc\uc73c\ub85c true, fake \ub274\uc2a4\ub97c \uac00\ub824\ub0b4\ub294 \uac83\uc774 \ubaa9\ud45c\uc774\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uc678\uc758 \uc694\uc18c \uc81c\uac70 \ud544\uc694\n- title\uc758 \uacbd\uc6b0 \ub300\ub7b5\uc801\uc778 \ud655\uc778\uc73c\ub85c\ub294 \ub208\uc5d0 \ub744\ub294 \ucc28\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc74c\n- text\uc758 \uacbd\uc6b0 ture_news\uc758 \uacbd\uc6b0\uc5d0\ub9cc \uae30\uc0ac \ucd9c\ucc98\uac00 \uba85\uc2dc\ub418\uc5b4 \uc788\uc74c (Reuters) \n    => \ub0b4\uc6a9\ub9cc\uc73c\ub85c \ubd84\ub958\ub97c \ud558\uae30 \uc704\ud574 \uc81c\uac70\ud574\uc918\uc57c \ud568\n- subject\ub294 true\uc640 fake\uc758 \ubc94\uc8fc\uac00 \uac01\uac01 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \uc0ac\uc6a9 \ubd88\uac00\n- date\uc758 \uacbd\uc6b0 \uc55e\uc758 \uc138\uae00\uc790\ub9cc \ucd94\ucd9c\ud574 \uc6d4\ubcc4 \uac74\uc218\ub97c \ud655\uc778\ud574 \ubcf4\uc558\uc73c\ub098 \ub274\uc2a4 \ubd84\ub958\ub97c \uc704\ud55c \ud53c\uccd0\ub85c\ub294 \ubd80\uc801\uc808\ud558\ub2e4\uace0 \ud310\ub2e8 ","a99914f7":"# 4)\ubaa8\ub378 \uc801\uc6a9","1226bb76":"# 3) fake, real new \uc8fc\uc81c\ubcc4 \ud0a4\uc6cc\ub4dc \ucd94\ucd9c","adf47522":"- true_news\uc758 \uacbd\uc6b0 Reuters(\ucd9c\ucc98)\uac00 \uc874\uc7ac","024b488c":"# 2) \ub370\uc774\ud130 \ucc98\ub9ac","06b12a13":"# 1) \ubcc0\uc218\ud0d0\uc0c9"}}