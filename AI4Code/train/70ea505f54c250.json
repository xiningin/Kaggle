{"cell_type":{"4a5ff53e":"code","fe6aa029":"code","47c48d5a":"code","16e8fd8b":"code","b86548fe":"code","e67fdf25":"code","a307ec03":"code","cf7cb886":"code","dfc18943":"code","cdfcc97a":"code","2bbde795":"code","e83e98aa":"code","72685e8b":"code","13da247c":"code","a7697b79":"code","6436ddbb":"code","e73780b2":"code","a06ed3d7":"code","3c87d771":"code","93fc4407":"code","8815f71d":"code","8efcc63a":"code","bba3d974":"markdown","381f4599":"markdown","0f41921f":"markdown","aa553420":"markdown","58d045ff":"markdown","baa7c0e4":"markdown","2674151c":"markdown"},"source":{"4a5ff53e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","fe6aa029":"# Show the path you will use\ndata = pd.read_csv('..\/input\/bitstampUSD_1-min_data_2012-01-01_to_2018-11-11.csv')","47c48d5a":"# Display content of Bitcoin data \ndata.info()","16e8fd8b":"# Display positive and negative correlation between columns\ndata.corr()","b86548fe":"# Seaborn plot type usage on heatmap\n# Annot: \"to show the data in cells or not\"\n# Linewidth: \"to customize width of the cell lines\"\n# Fmt: \"to customize digit lenght\"\n# Figsize: \"Figure size\"\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","e67fdf25":"# Display the first Nth data (N=10)\ndata.head(10)","a307ec03":"# Display all columns\ndata.columns","cf7cb886":"# Line Plot usage\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = gray square background, linestyle = sytle of line\ndata.Open.plot(kind='line', color='g', label='Open', linewidth=1, alpha=0.5, grid=False, linestyle=\"-\")\ndata.Close.plot(color='r', label='Close', linewidth=1, alpha=0.5, grid=False, linestyle=\":\")\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot Sample')\nplt.show()","dfc18943":"data.columns","cdfcc97a":"# Scatter Plot usage \n# x = open, y = close\ndata.plot(kind='scatter', x='Volume_(BTC)', y='Volume_(Currency)',alpha = 0.5,color = 'red')\nplt.xlabel('BTC Volume')              # label = name of label\nplt.ylabel('Currency Volume')\nplt.title('BTC-Currency Scatter Plot')            # title = title of plot","2bbde795":"# Histogram plot usage\n# bins = number of bar in figure\ndata = data.rename(columns={'Volume_(BTC)': 'Volume_BTC'})    # We have to change column name of \"Volume_(BTC)\", because we need to remove parentheses to save our code from syntax error\ndata.Volume_BTC.plot(kind = 'hist',bins = 20,figsize = (12,12))\nplt.show()\n\n#Not a good example but it shows how to save our code from problematic column name usages ","e83e98aa":"# clf() = cleans it up again you can start a fresh\ndata.Open.plot(kind='hist', bins=50)\n#plt.clf()\n# We cannot see the plot due to clf() if you remove comment mark \"#\"","72685e8b":"#create dictionary and look its keys and values\n#faster than lists thats why we use dictionaries\ndictionary={'Spain':'Madrid','Turkey':'Istanbul'}\nprint(dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())","13da247c":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['Spain']=\"Seville\" # Change the value for Spain\ndictionary['Turkey']=\"Ankara\" # Change the value for Turkey\nprint(dictionary)\n\ndel dictionary['Turkey'] # Delete \"Turkey\" key and its value from dictionary\nprint(dictionary)\n\ndictionary['Germany']=\"Berlin\" # Add \"Germany\" as a new key and \"Berlin\" as a new value to dictionary\nprint(dictionary)\n\nprint('Germany' in dictionary)  # Return true if \"Germany\" exists in dictionary or false\n","a7697b79":"# In order to run all code you need to take comment this line\n# del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","6436ddbb":"data=pd.read_csv('..\/input\/bitstampUSD_1-min_data_2012-01-01_to_2018-11-11.csv')","e73780b2":"series=data['Open']   # a serie (1 dimenson)\n#print(series)\nprint(type(series))\n\ndata_frame=data[['Open']]  # a data frame (2 dimension)\n#print(data_frame)\nprint(type(data_frame))","a06ed3d7":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators (return True or False)\nprint(True and False)\nprint(True or False)","3c87d771":"# 1 - Filtering Pandas data frame\nx = data['Weighted_Price']>2000     # Display prices greater than $2000\ndata[x]","93fc4407":"# 2 - Filtering pandas with logical_and (&)\ndata[np.logical_and(data['Weighted_Price']>200, data['Low']>100 )]\n\n#or you can use\n#data[(data['Weighted_Price']>200) & (data['Low']>100)]","8815f71d":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","8efcc63a":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['High']][0:1].iterrows():\n    print(index,\" : \",value)","bba3d974":"**PANDAS**","381f4599":"**WHILE** and **FOR** Loops","0f41921f":"**Basic steps to start Data Science: PART1**","aa553420":"Before continue with pandas, we need to learn **logic, control flow** and** filtering. **","58d045ff":"**DICTIONARY**","baa7c0e4":"**MATPLOTLIB**","2674151c":"**Read more here:**\n\n* [Basic steps to start Data Science: PART2](https:\/\/www.kaggle.com\/osmanaliyardim\/data-science-introduction-2)\n\n* [Basic steps to start Data Science: PART3](https:\/\/www.kaggle.com\/osmanaliyardim\/data-science-introduction-3)\n\n* [Basic steps to start Data Science: PART4](https:\/\/www.kaggle.com\/osmanaliyardim\/data-science-introduction-4)\n"}}