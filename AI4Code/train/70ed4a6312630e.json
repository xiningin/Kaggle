{"cell_type":{"2aecfdfc":"code","000a0d73":"code","e27a44f6":"code","33129033":"code","4998b17f":"code","6415e93c":"code","abaaee65":"code","4c5f289c":"code","a489ce46":"code","39192d17":"code","a88ec9bb":"code","386ba581":"code","49b1409c":"code","3a75a36b":"code","cab5b113":"code","e5a14dd3":"code","074ab6c8":"code","554585e7":"code","43d40baa":"code","20eda9d6":"code","0984159c":"code","f167c769":"code","8ba3ea6d":"code","57bbcb1c":"code","dac5118e":"code","3b03bd79":"code","c75aea32":"code","65d49e7b":"code","0a42ec69":"code","fb9a917f":"code","44dc3865":"code","f7067849":"code","ed8e8e73":"code","40cf59da":"code","aa2802b1":"markdown","fb85769f":"markdown","f6e507e8":"markdown","a19e89a9":"markdown","bda6065b":"markdown","3d04d888":"markdown","dda7b99d":"markdown","64eedaef":"markdown","57a0eaee":"markdown","66617c55":"markdown","478ddcbf":"markdown","07486b63":"markdown","779876f5":"markdown","5af93059":"markdown","8d00be29":"markdown"},"source":{"2aecfdfc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","000a0d73":"import matplotlib.pyplot as plt\n\n\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\nfootball","e27a44f6":"edu = pd.read_csv('..\/input\/c2-dataset\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","33129033":"edu.head(6)\n","4998b17f":"edu.tail()","6415e93c":"edu[10:15]","abaaee65":"edu.describe()","4c5f289c":"edu['Value']","a489ce46":"edu[10:14]\n","39192d17":"edu['GEO']","a88ec9bb":"edu.iloc[90:94][['TIME','GEO']]","386ba581":"edu[edu['Value'] > 6.5].tail()","49b1409c":"edu[edu[\"Value\"].isnull()].head()","3a75a36b":"edu.max(axis = 0)","cab5b113":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","e5a14dd3":"s = edu[\"Value\"]\/100\ns.head()","074ab6c8":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","554585e7":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","43d40baa":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","20eda9d6":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","0984159c":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","f167c769":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","8ba3ea6d":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","57bbcb1c":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","dac5118e":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","3b03bd79":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","c75aea32":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","65d49e7b":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","0a42ec69":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","fb9a917f":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","44dc3865":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","f7067849":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","ed8e8e73":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","40cf59da":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","aa2802b1":"# 6.6  Sorting data","fb85769f":"#  **6.2. Selecting Data**\n","f6e507e8":"**5. What does this index return? What does the first index represent? And the second one?**\n\nThe lines between the first index and (last index - 1) are printed. The indexes in iloc are the marginal values of the range we are interested in","a19e89a9":"**6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?**\n\nThe operation produces a print of the last 5 rows that respect the rule Value > 6.5\nIf we apply indexedu we get a series.","bda6065b":"# 6.7  Grouping data","3d04d888":"**4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?**\n\nDescribe method provides us with a statistical description of the content of the dataframe. We know how many elements we have per column, we have statistical values, the mean, standard deviation, minimum\/maximum values and the quartiles. \nThe default values are the count, min and max. \n","dda7b99d":"**2. What happens if we give a number as argument to the method head()?**\n\nIt hive us the interval to 0->n-1","64eedaef":"**3. What does the method tail()return?**\n\nMethod tail is opposite to method head, by returning us the last values of the dataframe","57a0eaee":"# 6.4  Filtering missing values","66617c55":"# 6.8  Rearranging data","478ddcbf":"# **7.1  Plotting data**","07486b63":"# 6.9  Ranking data","779876f5":"# 6.3  Filtering data","5af93059":"**1. Which is the size of the edu DataFrame (rows x columns)?**\n\n384 rows x 3 columns","8d00be29":"**What do you observe regarding the parameter ascending=False?**\n\nIt is a boolean value which ranks in ascending order if True."}}