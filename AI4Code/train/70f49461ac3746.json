{"cell_type":{"a4e944bb":"code","5b4d34b7":"code","ab0d73d4":"code","3f9a51cd":"code","8f1022fb":"code","00f000b5":"code","c6d278d1":"code","6ef76156":"code","8f8699c0":"code","d5992a94":"code","9d80f8e0":"markdown","f3e1138b":"markdown","39891f11":"markdown","0fdfb2ef":"markdown","d0fa54a1":"markdown","02b47335":"markdown"},"source":{"a4e944bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5b4d34b7":"train_original = pd.read_csv(\"..\/input\/train.csv\")\nstructures_original = pd.read_csv(\"..\/input\/structures.csv\")\ntest_original = pd.read_csv(\"..\/input\/test.csv\")","ab0d73d4":"train_original.head()","3f9a51cd":"structures_original.head()","8f1022fb":"structures_original[structures_original['molecule_name'] == 'dsgdb9nsd_000015']","00f000b5":"moleculeCount = structures_original.groupby(by=['molecule_name','atom'])[['atom']].count()\nmoleculeCount.rename(columns={'atom':'count'},inplace = True)\nmoleculeCount = moleculeCount.unstack(fill_value=0)\nmoleculeCount = moleculeCount['count'].reset_index()\n\nmoleculeCount.head()","c6d278d1":"moleculeCount[moleculeCount['molecule_name'] == 'dsgdb9nsd_000015']","6ef76156":"structures = pd.DataFrame.merge(structures_original,moleculeCount\n                               ,how='inner'\n                               ,left_on = ['molecule_name'] \n                               ,right_on = ['molecule_name']\n                              )\n\nstructures.head()","8f8699c0":"tmp_merge = pd.DataFrame.merge(train_original,structures\n                               ,how='left'\n                               ,left_on = ['molecule_name','atom_index_0'] \n                               ,right_on = ['molecule_name','atom_index']\n                              )\n\ntmp_merge = tmp_merge.merge(structures\n                ,how='left'\n                ,left_on = ['molecule_name','atom_index_1'] \n                ,right_on = ['molecule_name','atom_index']\n               )\n\ntmp_merge.drop(columns=['atom_index_x','atom_index_y','C_x','F_x','H_x','N_x','O_x'],inplace=True)\ntmp_merge.columns = ['id' , 'molecule_name' , 'atom_0' , 'atom_1' , 'type' , 'scalar_coupling_constant' , \n                      'atom_nm_0' , 'x_0' , 'y_0' , 'z_0' , 'atom_nm_1' , 'x_1' , 'y_1' , 'z_1','C','F','H','N','O']\n\ntrain = tmp_merge[['id' , 'molecule_name' , 'atom_0' , 'atom_1' , 'type'  , 'atom_nm_0' , 'x_0' ,\n           'y_0' , 'z_0' , 'atom_nm_1' , 'x_1' , 'y_1' , 'z_1','C','F','H','N','O', 'scalar_coupling_constant']]\ntrain.sort_values(by=['id','molecule_name'],inplace=True)\ntrain.reset_index(inplace=True,drop=True)\n\ntmp_merge = None\n\ntrain['dist'] = np.linalg.norm(train[['x_0', 'y_0', 'z_0']].values - train[['x_1', 'y_1', 'z_1']].values, axis=1)\ntrain.drop(columns=['x_0', 'y_0', 'z_0','x_1', 'y_1', 'z_1'],inplace=True)\n\ntrain.head()","d5992a94":"tmp_merge = pd.DataFrame.merge(test_original,structures\n                               ,how='left'\n                               ,left_on = ['molecule_name','atom_index_0'] \n                               ,right_on = ['molecule_name','atom_index']\n                              )\n\ntmp_merge = tmp_merge.merge(structures\n                ,how='left'\n                ,left_on = ['molecule_name','atom_index_1'] \n                ,right_on = ['molecule_name','atom_index']\n               )\n\ntmp_merge.drop(columns=['atom_index_x','atom_index_y','C_x','F_x','H_x','N_x','O_x'],inplace=True)\ntmp_merge.columns = ['id' , 'molecule_name' , 'atom_0' , 'atom_1' , 'type' , \n                      'atom_nm_0' , 'x_0' , 'y_0' , 'z_0' , 'atom_nm_1' , 'x_1' , 'y_1' , 'z_1','C','F','H','N','O']\n\ntest = tmp_merge[['id' , 'molecule_name' , 'atom_0' , 'atom_1' , 'type'  , 'atom_nm_0' , 'x_0' ,\n           'y_0' , 'z_0' , 'atom_nm_1' , 'x_1' , 'y_1' , 'z_1','C','F','H','N','O']]\ntest.sort_values(by=['id','molecule_name'],inplace=True)\ntest.reset_index(inplace=True,drop=True)\n\ntmp_merge = None\n\ntest['dist'] = np.linalg.norm(test[['x_0', 'y_0', 'z_0']].values - test[['x_1', 'y_1', 'z_1']].values, axis=1)\ntest.drop(columns=['x_0', 'y_0', 'z_0','x_1', 'y_1', 'z_1'],inplace=True)\n\ntest.head()","9d80f8e0":"Total items in each molecule can be calculated by simply grouping structures_original dataframe by molecule_name ans atom with count as a aggregate function","f3e1138b":"As per above there are total 9 items in molecule.\n\nCarbon - 2\n\nOxygen - 1\n\nHydrogen - 6","39891f11":"Join structures dataframe with train and test data to include item counts in train and test data.\n\nAlso, I am using below kernel to calculate distance between 2 items in a molecule.\n \nhttps:\/\/www.kaggle.com\/seriousran\/just-speed-up-calculate-distance-from-benchmark\n\nThe Frobenius norm is given by [1]:\n||A||F = [\\sum{i,j} abs(a_{i,j})^2]^{1\/2}","0fdfb2ef":"Merge structures_original and moleculeCount in single dataframe","d0fa54a1":"Number of items of Hydrogen (H), Carbon(C) an Nitrogen(N) are playing role in deciding bond or scalr_coupling_constant for each molecule.\nI have tried here simple approach to find out count of each item in each molecule.","02b47335":"Lets see how many items are there in dsgdb9nsd_000015\n#"}}