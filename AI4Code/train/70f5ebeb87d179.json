{"cell_type":{"061a29e0":"code","8d20b6fb":"code","fa884059":"code","99de50c0":"code","39887519":"code","983cf142":"code","cdd8dceb":"code","37fc9f30":"code","8f6e37e7":"code","8af357f3":"code","534ff787":"code","4365e695":"code","668c8da4":"code","28933a99":"code","2bd653b2":"code","90f5b720":"code","d3d1e9f2":"code","fca25b01":"code","0ca239a5":"code","c2503568":"code","b7c5409f":"code","0c57ce66":"code","ebd27763":"code","815a34a3":"code","aca0552c":"code","7305f8dd":"code","af789e8e":"code","d9c2dcc0":"code","5e5d91ee":"code","1c2ed83b":"code","26ec2d90":"markdown","d2413b88":"markdown","65096db0":"markdown","c0854eae":"markdown","b74fa3e1":"markdown","5427db11":"markdown","aef88977":"markdown","1a551860":"markdown","801d1422":"markdown","b8750a70":"markdown","e0da25d6":"markdown","6ae90297":"markdown","61a326f7":"markdown","ee0330f8":"markdown","2c044da0":"markdown","221e706d":"markdown","a9871cfa":"markdown","74e726a5":"markdown","a8d43e90":"markdown","f94d465b":"markdown","dbab3e68":"markdown"},"source":{"061a29e0":"# \u5fc5\u8981\u7684\u5f15\u5165\n%matplotlib inline\nimport os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","8d20b6fb":"data = pd.read_csv(os.path.join(\"..\/input\", \"titanic.csv\"), sep=\",\")","fa884059":"# \u6253\u5370\u6570\u636e\u57fa\u672c\u4fe1\u606f\ndata.info()","99de50c0":"# \u89c2\u5bdf\u90e8\u5206\u6570\u636e\u7684\u5f62\u5f0f\ndata.head(3)","39887519":"# \u89c2\u5bdf\u9884\u6d4b\u76ee\u6807\u7684\u5206\u5e03\ndata['survived'].value_counts(normalize = True)","983cf142":"#\u53ef\u89c6\u5316\u9884\u6d4b\u76ee\u6807\u7684\u5206\u5e03\nsns.countplot(data['survived'])","cdd8dceb":"#\u5229\u7528sns\u753b\u51fa\u6bcf\u79cd\u8231\u5bf9\u5e94\u7684\u5e78\u5b58\u4e0e\u9047\u96be\u4eba\u6570\nsns.countplot(data['pclass'], hue = data['survived'])","37fc9f30":"# \u6253\u5370\u90e8\u5206\u540d\u5b57\u4fe1\u606f\ndata['name'].head()","8f6e37e7":"data['name_title'] = data['name'].apply(lambda x: x.split(',')[1] if len(x.split(',')) > 1 else x.split(',')[0]).apply(lambda x: x.split()[0])","8af357f3":"# \u6253\u5370name title\u4fe1\u606f\ndata['name_title'].head()","534ff787":"# \u540d\u5b57title\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb\ndata['survived'].groupby(data['name_title']).mean()","4365e695":"# \u65b0\u589e\u540d\u5b57\u957f\u5ea6\u7684\u53d8\u91cf\ndata['name_len'] = data['name'].apply(lambda x: len(x))","668c8da4":"# \u540d\u5b57\u957f\u5ea6\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb\ndata['survived'].groupby(pd.qcut(data['name_len'], 5)).mean()","28933a99":"# \u6253\u5370\u6027\u522b\u6bd4\u4f8b\ndata['sex'].value_counts(normalize = 1)","2bd653b2":"# \u6027\u522b\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb\ndata['survived'].groupby(data['sex']).mean()","90f5b720":"# \u5e74\u9f84\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb\ndata['survived'].groupby(pd.qcut(data['age'], 5)).mean()","d3d1e9f2":"# \u767b\u8239\u5730\u70b9\u7684\u5206\u5e03\ndata['embarked'].value_counts()","fca25b01":"# \u767b\u8239\u5730\u70b9\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb\ndata['survived'].groupby(data['embarked']).mean()","0ca239a5":"# \u53ef\u89c6\u5316\u767b\u8239\u5730\u70b9\u4e0e\u8231\u4f4d\u7684\u5173\u7cfb\nsns.countplot(data['embarked'], hue = data['pclass'])","c2503568":"data['survived'].groupby(data['home.dest'].apply(lambda x: str(x).split(',')[-1])).mean()","b7c5409f":"def name(data):\n    data['name_len'] = data['name'].apply(lambda x: len(x))\n    data['name_title'] = data['name'].apply(lambda x: x.split(',')[1] if len(x.split(',')) > 1 else x.split(',')[0]).apply(lambda x: x.split()[0])\n    del data['name']\n    return data\n\ndef age(data):\n    data['age_flag'] = data['age'].apply(lambda x: 1 if pd.isnull(x) else 0)\n    grouped_age = data.groupby(['name_title', 'pclass'])['age']\n    data['age'] = grouped_age.transform(lambda x: x.fillna(data['age'].mean()) if pd.isnull(x.mean()) else x.fillna(x.mean()))\n    return data\n\ndef embark(data):\n    data['embarked'] = data['embarked'].fillna('Southampton')\n    return data\n\n\ndef dummies(data, columns=['pclass','name_title','embarked', 'sex']):\n    for col in columns:\n        data[col] = data[col].apply(lambda x: str(x))\n        new_cols = [col + '_' + i for i in data[col].unique()]\n        data = pd.concat([data, pd.get_dummies(data[col], prefix=col)[new_cols]], axis=1)\n        del data[col]\n    return data","0c57ce66":"# \u53bb\u6389row.names, home.dest, room, ticket, boat\u7b49\u5c5e\u6027\ndrop_columns = ['row.names', 'home.dest', 'room', 'ticket', 'boat']\ndata = data.drop(drop_columns, axis = 1)\ndata.head()","ebd27763":"# TODO\n# \u5229\u7528name(), age(), embark(), dummies()\u7b49\u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u53d8\u6362\ndata = name(data)\ndata = age(data)\ndata = embark(data)\ndata = dummies(data)\ndata.head()","815a34a3":"from sklearn.model_selection import train_test_split\nfrom sklearn import tree\n\n# \u51c6\u5907\u8bad\u7ec3\u96c6\u5408\u6d4b\u8bd5\u96c6\uff0c \u6d4b\u8bd5\u96c6\u5927\u5c0f\u4e3a0.2\uff0c \u968f\u673a\u79cd\u5b50\u4e3a33\ntrainX, testX, trainY, testY = train_test_split(data.iloc[:,1:], data.iloc[:,0], test_size=0.2, random_state=33)\n\n# \u521b\u5efa\u6df1\u5ea6\u4e3a3\uff0c\u53f6\u5b50\u8282\u70b9\u6570\u4e0d\u8d85\u8fc75\u7684\u51b3\u7b56\u6811\nmodel = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = 3, min_samples_leaf = 5)\nmodel.fit(trainX, trainY)","aca0552c":"from sklearn import metrics\ndef measure_performance(X, y, model, show_accuracy=True, show_classification_report=True, show_confussion_matrix=True):\n    \n    y_pred = model.predict(X)\n    if show_accuracy:\n        print(\"Accuracy:{0:.3f}\".format(metrics.accuracy_score(y, y_pred)),\"\\n\")\n    \n    if show_classification_report:\n        print(\"Classification report\")\n        print(metrics.classification_report(y, y_pred), \"\\n\")\n    \n    if show_confussion_matrix:\n        print(\"Confusion matrix\")\n        print(metrics.confusion_matrix(y, y_pred), \"\\n\")","7305f8dd":"# \u8c03\u7528measure_performance\u89c2\u5bdf\u6a21\u578b\u5728testX, testY\u4e0a\u7684\u8868\u73b0\nmeasure_performance(testX, testY, model)","af789e8e":"# \u5229\u7528 age, sex_male, sex_female\u505a\u8bad\u7ec3\nsub_columns = ['age', 'sex_male', 'sex_female']\nsub_trainX = trainX[sub_columns]\nsub_testX = testX[sub_columns]\nsub_model = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = 3, min_samples_leaf = 5)\nsub_model.fit(sub_trainX, trainY)","d9c2dcc0":"measure_performance(sub_testX, testY, sub_model)","5e5d91ee":"import graphviz\n\ndot_data = tree.export_graphviz(model, out_file=None, feature_names = trainX.columns) \n\n# \u751f\u6210graph\u6587\u4ef6\ngraph = graphviz.Source(dot_data)\n#graph.render(\"titanic\") \n#graph.view()\ngraph","1c2ed83b":"# \u89c2\u5bdf\u524d20\u4e2a\u7279\u5f81\u7684\u91cd\u8981\u6027\npd.DataFrame({'variable': trainX.columns, 'importance': model.feature_importances_}).sort_values(by = ['importance'], ascending = False)[:20]","26ec2d90":"#### \u540d\u5b57\u957f\u5ea6\u4e0e\u5b58\u6d3b\u4e0e\u5426\u7684\u5173\u7cfb","d2413b88":"### \u65b0\u6765\u4e86\u4e00\u4e2a\u5c0f\u9c9c\u8089\uff0c\u57fa\u672c\u4fe1\u606f\u5982\u4e0b  \n","65096db0":"#### \u53d6\u540d\u5b57\u7684\u957f\u5ea6","c0854eae":"#### \u767b\u8239\u7684\u5730\u70b9\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb","b74fa3e1":"#### \u8231\u4f4d\u4e0e\u9884\u6d4b\u76ee\u6807\u7684\u5173\u7cfb","5427db11":"#### \u540d\u5b57\u7684\u4fe1\u606f","aef88977":"#### \u6027\u522b\u7684\u5206\u5e03\u4e0e\u6700\u540e\u5e78\u5b58\u7684\u5173\u7cfb","1a551860":"#### room, ticket, boat\u7f3a\u5931\u6570\u636e\u592a\u591a\uff0c\u820d\u5f03\u4e0d\u7528","801d1422":"#### \u5c55\u793a\u7279\u5f81\u7684\u91cd\u8981\u6027","b8750a70":"#### Bonus part: \u5229\u7528\u7b80\u5355\u7279\u5f81\u76f4\u63a5\u8c03\u7528\u51b3\u7b56\u6811\u6a21\u578b","e0da25d6":"#### \u53ef\u89c6\u5316\u51b3\u7b56\u6811","6ae90297":"####  \u8c03\u7528\u51b3\u7b56\u6811\u6a21\u578b\u5e76\u9884\u6d4b\u7ed3\u679c","61a326f7":"#### Feature Transform","ee0330f8":"#### \u5bf9\u540d\u5b57\u5c5e\u6027\u8fdb\u884c\u53d8\u6362  \n- \u53d6\u540d\u5b57\u7684title","2c044da0":"#### \u8bfb\u53d6\u6570\u636e\u5e76\u6253\u5370\u57fa\u672c\u4fe1\u606f","221e706d":"#### \u76ee\u7684\u5730\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb","a9871cfa":"#### \u9884\u6d4b\u76ee\u6807\u7684\u57fa\u672c\u5206\u5e03","74e726a5":"#### \u9884\u5904\u7406\u8f93\u5165\u6570\u636e  \n- \u53bb\u6389\u4e0d\u9700\u8981\u7684\u7279\u5f81  \n- \u5bf9\u67d0\u4e9b\u7279\u5f81\u8fdb\u884c\u53d8\u6362","a8d43e90":"#### \u5e74\u9f84\u4e0e\u5e78\u5b58\u7684\u5173\u7cfb  \n- \u7f3a\u5931\u6570\u636e\u7684\u5904\u7406  \n  1 \u5b9e\u503c\uff1a \u4e2d\u4f4d\u6570\u6216\u8005\u5e73\u5747\u6570\u53bb\u8865  \n  2 \u7c7b\u522b\uff1a major class\u53bb\u8865","f94d465b":"## \u51b3\u7b56\u6811\u7684\u76f4\u63a5\u8c03\u7528\u4e0eTitanic\u6570\u636e\u96c6\u7684\u63a2\u7d22 ","dbab3e68":"#### \u540d\u5b57\u7684title\u4e0e\u5b58\u6d3b\u4e0e\u5426\u7684\u5173\u7cfb"}}