{"cell_type":{"885e68eb":"code","77995cd3":"code","51f014f9":"code","05d37262":"code","0d442718":"code","46576517":"code","7dedbffa":"code","22dc1099":"code","04614378":"code","ba631096":"code","57bab35b":"code","dea24aa3":"code","89ed192a":"code","535b0989":"code","d0d418e2":"code","2ee63143":"code","28926ca5":"code","4f09c560":"code","9241edc4":"code","f6f41cdb":"code","6dfb2fe0":"markdown","02674bc6":"markdown","aaa438f4":"markdown","609b13cb":"markdown","04a3a792":"markdown","451a064c":"markdown"},"source":{"885e68eb":"import fastai\nfrom fastai.vision import *\nfastai.__version__","77995cd3":"BATCH  = 32\nSIZE   = 250","51f014f9":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything()","05d37262":"path = Path('..\/input\/imet-2019-fgvc6\/') # iMet data path","0d442718":"import os\nos.listdir('..\/input\/')","46576517":"# Making pretrained weights work without needing to find the default filename\nfrom torch.utils import model_zoo\nPath('models').mkdir(exist_ok=True)\n!cp '..\/input\/resnet15216epochs\/stage-1.pth' 'models\/resnet152.pth'\ndef load_url(*args, **kwargs):\n    model_dir = Path('models')\n    filename  = 'resnet152.pth'\n    if not (model_dir\/filename).is_file(): raise FileNotFoundError\n    return torch.load(model_dir\/filename)\nmodel_zoo.load_url = load_url","7dedbffa":"# Load train dataframe\ntrain_df = pd.read_csv(path\/'train.csv')\ntrain_df.head()","22dc1099":"# Load labels dataframe\nlabels_df = pd.read_csv(path\/'labels.csv')\nlabels_df.head()","04614378":"# Load sample submission\ntest_df = pd.read_csv(path\/'sample_submission.csv')\ntest_df.head()","ba631096":"tfms = get_transforms(do_flip=True, flip_vert=False, max_rotate=0.10, max_zoom=1.5, max_warp=0.2, max_lighting=0.2,\n                     xtra_tfms=[(symmetric_warp(magnitude=(-0,0), p=0)),])\n\ntrain, test = [ImageList.from_df(df, path=path, cols='id', folder=folder, suffix='.png') \n               for df, folder in zip([train_df, test_df], ['train', 'test'])]\ndata = (train.split_by_rand_pct(0.1, seed=42)\n        .label_from_df(cols='attribute_ids', label_delim=' ')\n        .add_test(test)\n        .transform(tfms, size=SIZE, resize_method=ResizeMethod.PAD, padding_mode='border',)\n        .databunch(path=Path('.'), bs=BATCH).normalize(imagenet_stats))","57bab35b":"# Source: https:\/\/www.kaggle.com\/c\/human-protein-atlas-image-classification\/discussion\/78109\nclass FocalLoss(nn.Module):\n    def __init__(self, gamma=2):\n        super().__init__()\n        self.gamma = gamma\n\n    def forward(self, logit, target):\n        target = target.float()\n        max_val = (-logit).clamp(min=0)\n        loss = logit - logit * target + max_val + \\\n               ((-max_val).exp() + (-logit - max_val).exp()).log()\n\n        invprobs = F.logsigmoid(-logit * (target * 2.0 - 1.0))\n        loss = (invprobs * self.gamma).exp() * loss\n        if len(loss.size())==2:\n            loss = loss.sum(dim=1)\n        return loss.mean()","dea24aa3":"learn = cnn_learner(data, base_arch=models.resnet152, loss_func=FocalLoss(), metrics=fbeta, pretrained=False)\nlearn.load('resnet152')","89ed192a":"# Find a good learning rate\nlearn.lr_find()\nlearn.recorder.plot()","535b0989":"learn.unfreeze()","d0d418e2":"lr = 1e-2\nlearn.fit_one_cycle(10, slice(1e-5, 1e-3))","2ee63143":"learn.save('stage-1', return_path=True)\nlearn.export()","28926ca5":"def find_best_fixed_threshold(preds, targs, do_plot=True):\n    score = []\n    thrs = np.arange(0, 0.5, 0.01)\n    for thr in progress_bar(thrs):\n        score.append(fbeta(valid_preds[0],valid_preds[1], thresh=thr))\n    score = np.array(score)\n    pm = score.argmax()\n    best_thr, best_score = thrs[pm], score[pm].item()\n    print(f'thr={best_thr:.3f}', f'F2={best_score:.3f}')\n    if do_plot:\n        plt.plot(thrs, score)\n        plt.vlines(x=best_thr, ymin=score.min(), ymax=score.max())\n        plt.text(best_thr+0.03, best_score-0.01, f'$F_{2}=${best_score:.3f}', fontsize=14);\n        plt.show()\n    return best_thr\n\ni2c = np.array([[i, c] for c, i in learn.data.train_ds.y.c2i.items()]).astype(int) # indices to class number correspondence\n\ndef join_preds(preds, thr):\n    return [' '.join(i2c[np.where(t==1)[0],1].astype(str)) for t in (preds[0].sigmoid()>thr).long()]","4f09c560":"# Validation predictions\nvalid_preds = learn.get_preds(DatasetType.Valid)\nbest_thr = find_best_fixed_threshold(*valid_preds)","9241edc4":"# Test predictions\ntest_preds = learn.TTA(ds_type=DatasetType.Test)\ntest_df.attribute_ids = join_preds(test_preds, best_thr)\ntest_df.head()","f6f41cdb":"test_df.to_csv('submission.csv', index=False)","6dfb2fe0":"# Create data object using datablock API","02674bc6":"# Get predictions","aaa438f4":"# Create learner with resnet152 and FocalLoss\nFor problems with high class imbalance Focal Loss is usually a better choice than the usual Cross Entropy Loss.","609b13cb":"# Train the model","04a3a792":"# Initial setup","451a064c":"# iMet Collection 2019 - FGVC6\n**Simple baseline for iMet Collection 2019 competition using fastai v1**\n* Model: resnet152\n* Loss: Focal loss\n* Metric: $F_{2}$ score\n\n**What to try next?**\n* Different models\n* Optimize hyperparameter choice\n* Few-shot learning to improve score on classes with very few samples\n\nRefereed from original kernel [here](https:\/\/www.kaggle.com\/mnpinto\/imet-fastai-starter)"}}