{"cell_type":{"2a24978e":"code","b2c339be":"code","7c044876":"code","6d839fb6":"code","b738877d":"code","733d8ed9":"code","00b9be21":"code","ea11a620":"code","e3c7c059":"code","ad6ed3ab":"code","3fe4bf81":"markdown"},"source":{"2a24978e":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras import regularizers\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b2c339be":"train_dir = '..\/input\/asl_alphabet_train\/asl_alphabet_train'\ntest_dir = '..\/input\/asl_alphabet_test\/asl_alphabet_test'","7c044876":"def load_unique():\n    size_img = 64,64\n    images_for_plot = []\n    labels_for_plot = []\n    for folder in os.listdir(train_dir):\n        for file in os.listdir(train_dir + '\/' + folder):\n            filepath = train_dir + '\/' + folder + '\/' + file\n            image = cv2.imread(filepath)\n            final_img = cv2.resize(image, size_img)\n            final_img = cv2.cvtColor(final_img, cv2.COLOR_BGR2RGB)\n            images_for_plot.append(final_img)\n            labels_for_plot.append(folder)\n            break\n    return images_for_plot, labels_for_plot\n\nimages_for_plot, labels_for_plot = load_unique()\nprint(\"unique_labels = \", labels_for_plot)","6d839fb6":"labels_dict = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'J':9,'K':10,'L':11,'M':12,\n                   'N':13,'O':14,'P':15,'Q':16,'R':17,'S':18,'T':19,'U':20,'V':21,'W':22,'X':23,'Y':24,\n                   'Z':25,'space':26,'del':27,'nothing':28}\n\ndef load_data():\n    images = []\n    labels = []\n    size = 64,64\n    print(\"LOADING DATA FROM : \",end = \"\")\n    for folder in os.listdir(train_dir):\n        print(folder, end = ' | ')\n        for image in os.listdir(train_dir + \"\/\" + folder):\n            temp_img = cv2.imread(train_dir + '\/' + folder + '\/' + image)\n            temp_img = cv2.resize(temp_img, size)\n            images.append(temp_img)\n            if folder == 'A':\n                labels.append(labels_dict['A'])\n            elif folder == 'B':\n                labels.append(labels_dict['B'])\n            elif folder == 'C':\n                labels.append(labels_dict['C'])\n            elif folder == 'D':\n                labels.append(labels_dict['D'])\n            elif folder == 'E':\n                labels.append(labels_dict['E'])\n            elif folder == 'F':\n                labels.append(labels_dict['F'])\n            elif folder == 'G':\n                labels.append(labels_dict['G'])\n            elif folder == 'H':\n                labels.append(labels_dict['H'])\n            elif folder == 'I':\n                labels.append(labels_dict['I'])\n            elif folder == 'J':\n                labels.append(labels_dict['J'])\n            elif folder == 'K':\n                labels.append(labels_dict['K'])\n            elif folder == 'L':\n                labels.append(labels_dict['L'])\n            elif folder == 'M':\n                labels.append(labels_dict['M'])\n            elif folder == 'N':\n                labels.append(labels_dict['N'])\n            elif folder == 'O':\n                labels.append(labels_dict['O'])\n            elif folder == 'P':\n                labels.append(labels_dict['P'])\n            elif folder == 'Q':\n                labels.append(labels_dict['Q'])\n            elif folder == 'R':\n                labels.append(labels_dict['R'])\n            elif folder == 'S':\n                labels.append(labels_dict['S'])\n            elif folder == 'T':\n                labels.append(labels_dict['T'])\n            elif folder == 'U':\n                labels.append(labels_dict['U'])\n            elif folder == 'V':\n                labels.append(labels_dict['V'])\n            elif folder == 'W':\n                labels.append(labels_dict['W'])\n            elif folder == 'X':\n                labels.append(labels_dict['X'])\n            elif folder == 'Y':\n                labels.append(labels_dict['Y'])\n            elif folder == 'Z':\n                labels.append(labels_dict['Z'])\n            elif folder == 'space':\n                labels.append(labels_dict['space'])\n            elif folder == 'del':\n                labels.append(labels_dict['del'])\n            elif folder == 'nothing':\n                labels.append(labels_dict['nothing'])\n    \n    images = np.array(images)\n    images = images.astype('float32')\/255.0\n    \n    labels = keras.utils.to_categorical(labels)   #one-hot encoding\n    \n    X_train, X_test, Y_train, Y_test = train_test_split(images, labels, test_size = 0.1)\n    \n    print()\n    print('Loaded', len(X_train),'images for training,','Train data shape =',X_train.shape)\n    print('Loaded', len(X_test),'images for testing','Test data shape =',X_test.shape)\n    \n    return X_train, X_test, Y_train, Y_test","b738877d":"X_train, X_test, Y_train, Y_test = load_data()\n","733d8ed9":"def build_model():\n    \n    model = Sequential()\n    \n    model.add(Conv2D(64, kernel_size = 3, padding = 'same', activation = 'relu', input_shape = (64,64,3)))\n    model.add(Conv2D(32, kernel_size = 3, padding = 'same', strides = 2, activation = 'relu'))\n    model.add(Dropout(0.5))\n    \n    model.add(Conv2D(32, kernel_size = 3, padding = 'same', activation = 'relu'))\n    model.add(Conv2D(64, kernel_size = 3, padding = 'same', strides = 2, activation = 'relu'))\n    model.add(Dropout(0.5))\n    \n    model.add(Conv2D(128, kernel_size = 3, padding = 'same', activation = 'relu'))\n    model.add(Conv2D(256, kernel_size = 3, padding = 'same', strides = 2 , activation = 'relu'))\n    model.add(MaxPool2D(3))\n    \n    model.add(BatchNormalization())\n    \n    model.add(Flatten())\n    model.add(Dropout(0.5))\n    model.add(Dense(512, activation = 'relu'))\n    model.add(Dense(29, activation = 'softmax'))\n    \n    model.compile(optimizer = 'adam', loss = keras.losses.categorical_crossentropy, metrics = [\"accuracy\"])\n    \n    print(\"MODEL CREATED\")\n    model.summary()\n    \n    return model\n","00b9be21":"def fit_model():\n    history = model.fit(X_train, Y_train, batch_size = 64, epochs = 5, validation_split = 0.1)\n    return history","ea11a620":"model = build_model()","e3c7c059":"model_history = fit_model()","ad6ed3ab":"if model_history:\n    print('Final Accuracy: {:.2f}%'.format(model_history.history['acc'][4] * 100))\n    print('Validation Set Accuracy: {:.2f}%'.format(model_history.history['val_acc'][4] * 100))","3fe4bf81":"Using preprocessing steps from [ASL Classifier using Keras](\/https:\/\/www.kaggle.com\/modojj\/asl-classifier-using-keras) by Rohit Modi"}}