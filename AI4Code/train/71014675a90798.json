{"cell_type":{"01e4b84d":"code","1f96eae8":"code","a5e58afe":"code","52a1919c":"code","0dc2663f":"code","8d8288cf":"code","5e49f5de":"code","d41b65a1":"code","cc3b13f7":"code","09158817":"code","e1fc1256":"code","0a34ca57":"code","ea8bfe6c":"code","bf6432b6":"code","43ab1a13":"code","83787e0c":"code","8d1e37ea":"code","7a256c4d":"code","bc73ca91":"code","c53ea75b":"code","48c94fcc":"code","0ddeb0ad":"code","38be52e4":"code","e3e09786":"code","4ab9661f":"code","1af0bfb2":"code","67752490":"code","8cae3de2":"code","27c95647":"code","ec21f5e6":"code","675ae714":"code","e1ae3474":"code","54481ad0":"code","ad684d2b":"code","92e83d7c":"code","e3420709":"code","708c8d2b":"code","44f493f6":"markdown","0f6c37a5":"markdown","617d2b1a":"markdown","c73eba5c":"markdown","e8041d71":"markdown"},"source":{"01e4b84d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler,RobustScaler\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,ElasticNet\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport xgboost as xgb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","1f96eae8":"df = pd.read_excel('..\/input\/car-price\/arac fiyatlar.xlsx')\ndf.head()","a5e58afe":"df.info()","52a1919c":"df.shape","0dc2663f":"df.describe().T","8d8288cf":"df.isnull().sum()","5e49f5de":"df[df[\"MOTORVOLUME\"].isnull()]","d41b65a1":"df[\"MOTORVOLUME\"]=df[\"MOTORVOLUME\"].fillna(df[df[\"BRAND\"]==\"Chevrolet\"][\"MOTORVOLUME\"].mean())","cc3b13f7":"df.isnull().sum()","09158817":"df[df[\"PRICE\"]==0]","e1fc1256":"brand_index=df[df[\"PRICE\"]==0][\"BRAND\"].index\nfor c in brand_index:\n    df[\"PRICE\"].iloc[c]=df[df[\"BRAND\"]==df[\"BRAND\"].iloc[c]][\"PRICE\"].mean()","0a34ca57":"df[df[\"PRICE\"]==0]","ea8bfe6c":"df[(df[\"YEAR_\"]<=2019) & (df[\"KM\"]==0)]","bf6432b6":"a=df[(df[\"YEAR_\"]<=2019) & (df[\"KM\"]==0)].index\nfor c in a:\n    df[\"KM\"].iloc[c]=df[df[\"YEAR_\"]==df[\"YEAR_\"].iloc[c]][\"KM\"].mean()","43ab1a13":"df[(df[\"YEAR_\"]<=2019) & (df[\"KM\"]==0)]","83787e0c":"plt.figure(figsize=(10,8))\nplt.title('Car Price Distribution Plot')\nsns.distplot(df.PRICE)\nplt.show()","8d1e37ea":"a=df[\"BRAND\"].value_counts()\nplt.figure(figsize=(20,10))\nsns.barplot(x=a.index, y=a.values)\nplt.title('Brand-Freq')\nplt.xlabel = 'Car Brand'\nplt.ylabel='Frequency of company'\nplt.show()","7a256c4d":"df[\"BRAND\"].value_counts().sort_values(ascending=False)","bc73ca91":"a=df[df[\"YEAR_\"]>2000][\"YEAR_\"].value_counts()\nplt.figure(figsize=(20,10))\nsns.barplot(x=a.index, y=a.values)\nplt.title('Year-Freq')\nplt.xlabel = 'Car Year'\nplt.ylabel='Frequency of Year'\nplt.show()","c53ea75b":"a=df[\"SHIFTTYPE\"].value_counts()\nplt.figure(figsize=(5,5))\nsns.barplot(x=a.index, y=a.values)\nplt.title('Shifttype-Freq')\nplt.xlabel = 'Car Shifttype'\nplt.ylabel='Frequency of Shifttype'\nplt.show()\n","48c94fcc":"dff = pd.DataFrame(df.groupby(['YEAR_'])['PRICE'].mean())\ndff.plot.bar()\nplt.title('Year-Price')\nplt.show()","0ddeb0ad":"dff = pd.DataFrame(df.groupby(['COLOR'])['PRICE'].mean().sort_values(ascending = False))\ndff.plot.bar()\nplt.title('Car Color vs Average Price')\nplt.show()","38be52e4":"dff = pd.DataFrame(df.groupby(['FUEL'])['PRICE'].mean().sort_values(ascending = False))\ndff.plot.bar()\nplt.title('Fuel-Price')\nplt.show()","e3e09786":"sns.pairplot(df)\nplt.show()","4ab9661f":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","1af0bfb2":"df.info()","67752490":"def dummy(x,df):\n    duz = pd.get_dummies(df[x])\n    df = pd.concat([df, duz], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n\ndf = dummy('BRAND',df)\ndf = dummy('MODEL',df)\ndf = dummy('FUEL',df)\ndf = dummy('SHIFTTYPE',df)\ndf = dummy('COLOR',df)\ndf = dummy('CASETYPE',df)\ndf = dummy('FROMWHO',df)","8cae3de2":"x=df.drop([\"PRICE\"],axis=1)\ny=df[\"PRICE\"]\nX_train,X_test,y_train,y_test = train_test_split(x,y, test_size = 0.3, random_state = 42)","27c95647":"#Scaled\nscaler=StandardScaler() \nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","ec21f5e6":"#Linear Regression\nlr=LinearRegression()\nlr.fit(X_train,y_train)\ny_predict=lr.predict(X_test)\nerror=np.sqrt(mean_squared_error(y_test,y_predict))\nprint(\"Error: {:.2f}\".format(error))","675ae714":"#Lasso Regression\nlasso=Lasso(random_state=42,max_iter=10000)\nlasso.fit(X_train,y_train)\ny_predict=lasso.predict(X_test)\nerror=np.sqrt(mean_squared_error(y_test,y_predict))\nprint(\"Error: {:.2f}\".format(error))","e1ae3474":"#ElasticNetRegression\neNet = ElasticNet(random_state=42, max_iter=10000)\neNet.fit(X_train,y_train)\ny_predict = eNet.predict(X_test)\nerror=np.sqrt(mean_squared_error(y_test,y_predict))\nprint(\"Error: {:.2f}\".format(error))","54481ad0":"#XGBoost\nmodel_xgb = xgb.XGBRegressor(random_state=42)\nmodel_xgb.fit(X_train, y_train)\ny_predict = model_xgb.predict(X_test)\nerror=np.sqrt(mean_squared_error(y_test,y_predict))\nprint(\"Error: {:.2f}\".format(error))\n","ad684d2b":"#xgb model tuning\nxgb=xgb.XGBRegressor(random_state=42)\nxgb_grid={\"n_estimators\":[100],\n         \"max_depth\":[5,6],\n         \"learning_rate\":[0.5,0.8]}\nxgb_cv=GridSearchCV(xgb,param_grid=xgb_grid,cv=5,n_jobs=-1,verbose=2)\nxgb_cv.fit(X_train,y_train)\nxgb_cv.best_params_","92e83d7c":"import xgboost as xgb\nxgb_tuned=xgb.XGBRegressor(n_estimators=100,\n         max_depth=6,\n         learning_rate=0.5,random_state=42)\nxgb_tuned.fit(X_train,y_train)\ny_predict = xgb_tuned.predict(X_test)\nerror=np.sqrt(mean_squared_error(y_test,y_predict))\nprint(\"Error: {:.2f}\".format(error))\n","e3420709":"a=[]\nmax_depth=list(np.arange (1,10,1, dtype = int))\n\nfor i in max_depth:\n    \n    import xgboost as xgb\n    xgb_tuned=xgb.XGBRegressor(random_state=42,n_estimators=100,\n             max_depth=i,\n             learning_rate=0.5)\n    xgb_tuned.fit(X_train,y_train)\n    y_predict = xgb_tuned.predict(X_test)\n    error=np.sqrt(mean_squared_error(y_test,y_predict))\n    a.append(error)\na","708c8d2b":"plt.figure(figsize =(15,7))\nsns.pointplot(x=list(range(1,10)),y=a,color=\"red\",alpha=0.8);","44f493f6":"# Missing Value","0f6c37a5":"# Visualizing the data","617d2b1a":"# Dummy Variables\n","c73eba5c":"# Model Creation","e8041d71":"# Train Test Split"}}