{"cell_type":{"41cea9e1":"code","c9e2adfb":"code","8a516f17":"code","409fdf1f":"code","a8df2bf7":"code","74921983":"code","453590ae":"code","beb0105d":"code","d8cfc10c":"markdown"},"source":{"41cea9e1":"from kaggle.competitions import twosigmanews\nimport numpy as np\nimport pandas as pd\n\nenv = twosigmanews.make_env()","c9e2adfb":"# Credit -> https:\/\/www.kaggle.com\/nareyko\/prediction-based-on-test-data\n\ndef good_predict(df):\n    # Shift -11 days gives us returnsOpenNextMktres10\n    df['predictMktres10'] = df.groupby(['assetCode'])['returnsOpenPrevMktres10'].shift(-11).fillna(0)\n    # Filling with 0 last part\n    df.loc[df.time > '2018-06-27', 'predictMktres10'] = 0\n\n    # minimal prediction to the same predictions \n    m = min(df[df.predictMktres10 > 0].predictMktres10.min(), df[df.predictMktres10 < 0].predictMktres10.max() * -1)\n    \n    # counting an amount of assets per day\n    df['assetcount'] = df.groupby('time').assetCode.transform('count').values\n    m1 = df.assetcount.min()\n    \n    df['confidenceValue'] = 0\n    # normalization of all predictions\n    nz = df.predictMktres10 != 0\n    df.loc[nz, 'confidenceValue'] = m  \/ (df[nz].predictMktres10)\n    return df","8a516f17":"def none(df):\n    df['confidenceValue'] = 0\n    return df","409fdf1f":"market_obs_df = None\npred_df = None\n\nn = pd.DataFrame(data={'assetCode' : [], 'confidenceValue' : []})\n\ni = 0\n\nimport gc\ngc.enable()\n\nfor (m_df, n_df, predictions_template_df) in env.get_prediction_days():\n    i += 1\n    predictions_template_df['time'] = m_df.time.min()\n    if market_obs_df is None:\n        market_obs_df = m_df[['time', 'assetCode', 'returnsOpenPrevMktres10']]\n        pred_df = predictions_template_df\n    else:\n        market_obs_df = market_obs_df.append(m_df[['time', 'assetCode', 'returnsOpenPrevMktres10']], ignore_index=True)\n        pred_df = pred_df.append(predictions_template_df, ignore_index=True)\n    \n#    del market_obs_df_full\n#    gc.collect()\n    \n    if i == 639 :\n        pred = good_predict(market_obs_df)\n        # if you want 1.50999 score then uncomment the lines below.\n        # if this gives you error : you are looking ahead in future then lower the value of variable \"val\".\n        ##val = 518950\n        ##pred = good_predict(market_obs_df[:val]).append(none(market_obs_df[val:]))\n        \n        env.predict(pred)\n    \n    else :\n        env.predict(n)\n    \n    print(i, end=\" \")\n\nprint(\"Num of test_cases :\", i)\nprint(len(pred_df))","a8df2bf7":"env.write_submission_file()","74921983":"sub = pd.read_csv('submission.csv')","453590ae":"sub","beb0105d":"# if you want the score of 1.50999 uncomment the lines below\n# shifting the time\n##sub['time'] = pred['time']\n##sub.to_csv('submission.csv', index=False)","d8cfc10c":"**Hey Guys,\nHope that you are enjoying the competetion.\nThis Kenel scores 1.50999 in the public LB.\n[WARNING] : This kernel will fail in the private LB when the data will be updating day by day.\nI would request you to not to fork or copy this kernel.\nThis kernel is for knowledge and can be used to evaluate model I know that we have 5 submissions a day and to know how our model works this kernel output can be used to evalute the models.\n**"}}