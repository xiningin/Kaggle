{"cell_type":{"3fec325b":"code","68e7ae93":"code","ef6759ee":"code","0af886f4":"code","62a5f65e":"code","ed522a37":"code","20ce8b4c":"code","f00d8e42":"code","4e13f813":"code","de623073":"code","ef9fdcc7":"code","dffd6c31":"code","e4cf267d":"code","e1797e95":"code","57817835":"code","a18d4b3f":"code","bace1e67":"code","e2dda9f5":"code","40a7177b":"code","1b082cd1":"code","45eed062":"code","0ef76754":"code","8994008f":"code","890b316f":"code","96a1b5de":"code","ce35857f":"code","66fe0b7f":"code","8b5fc039":"code","606b06d0":"code","2a20bcac":"code","0fbe6da3":"code","ab7d02bf":"code","37cde436":"code","e058fc6a":"code","4087bb28":"code","fb586952":"code","7f900599":"code","2a81a24a":"code","4a5e5b62":"code","e2583ad2":"markdown","5105976f":"markdown","843a6e33":"markdown","050b01c0":"markdown"},"source":{"3fec325b":"# # import the kaggle.json file to download the dataset from the API\n# from google.colab import files\n# files.upload()","68e7ae93":"#######to mount data from Google drive########\n# from google.colab import drive\n# drive.mount('\/content\/drive')","ef6759ee":"# pip install --upgrade pip","0af886f4":"# to easy download your dataset without errors use kaggle==1.5.6 version\n# pip install kaggle==1.5.6","62a5f65e":"#  ! mkdir ~\/.kaggle","ed522a37":"# ! cp kaggle.json ~\/.kaggle\/","20ce8b4c":"#  ! chmod 600 ~\/.kaggle\/kaggle.json","f00d8e42":"# ! kaggle datasets list","4e13f813":"# ! kaggle competitions download -c 'osic-pulmonary-fibrosis-progression'","de623073":"# ! mkdir train","ef9fdcc7":"# ! unzip \/content\/osic-pulmonary-fibrosis-progression.zip -d train","dffd6c31":"# import pydicom to read dcm images \n# !pip install pydicom ","e4cf267d":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport os \nimport pydicom","e1797e95":"testing = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')","57817835":"testing","a18d4b3f":"testing.isnull().sum()","bace1e67":"data_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/'\npatients = os.listdir(data_dir)\nlabels_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv',index_col=0)","e2dda9f5":"labels_df.head()","40a7177b":"testing.isnull().sum()","1b082cd1":"for patient in patients[:2]:\n    label = labels_df._get_value(patient, 'FVC')\n    path = data_dir + patient\n    \n    # a couple great 1-liners from: https:\/\/www.kaggle.com\/gzuidhof\/data-science-bowl-2017\/full-preprocessing-tutorial\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    print(len(slices),label)\n    print(slices[0])","45eed062":"plt.bar(labels_df['Sex'],labels_df['FVC'])","0ef76754":"plt.bar(labels_df['SmokingStatus'],labels_df['FVC'],color='red')","8994008f":"plt.hist(labels_df['FVC'])","890b316f":"plt.plot(labels_df['FVC'])","96a1b5de":"for patient in patients[:10]:\n    label = labels_df._get_value(patient, 'FVC')\n    path = data_dir + patient\n    \n    # a couple great 1-liners from: https:\/\/www.kaggle.com\/gzuidhof\/data-science-bowl-2017\/full-preprocessing-tutorial\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    try:\n      print(slices[0].pixel_array.shape, len(slices))\n    except:\n      print('')","ce35857f":"len(patients)","66fe0b7f":"import matplotlib.pyplot as plt\n\nfor patient in patients[:5]:\n    label = labels_df._get_value(patient, 'FVC')\n    path = data_dir + patient\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    \n    #          the first slice\n    try:\n      plt.imshow(slices[0].pixel_array)\n      plt.show()\n    except:\n      print('None')","8b5fc039":"import cv2\nimport numpy as np\n\nIMG_PX_SIZE = 50\n\nfor patient in patients[:1]:\n    label = labels_df._get_value(patient, 'FVC')\n    path = data_dir + patient\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    fig = plt.figure()\n    for num,each_slice in enumerate(slices[:12]):\n        y = fig.add_subplot(3,4,num+1)\n        new_img = cv2.resize(np.array(each_slice.pixel_array),(IMG_PX_SIZE,IMG_PX_SIZE))\n        y.imshow(new_img)\n    plt.show()","606b06d0":"import math\ndef chunks(l, n):\n    # Credit: Ned Batchelder\n    # Link: http:\/\/stackoverflow.com\/questions\/312443\/how-do-you-split-a-list-into-evenly-sized-chunks\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n\ndef mean(l):\n    return sum(l) \/ len(l)\n\nIMG_PX_SIZE = 50\nhm_slices = 20\n\ndata_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/'\npatients = os.listdir(data_dir)\nlabels_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv',index_col=0)\n\nfor patient in patients[:10]:\n    try:\n        label = labels_df._get_value(patient, 'FVC')\n        path = data_dir + patient\n        slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n        slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n        new_slices = []\n        slices = [cv2.resize(np.array(each_slice.pixel_array),(IMG_PX_SIZE,IMG_PX_SIZE)) for each_slice in slices]\n        chunk_sizes = math.ceil(len(slices) \/ hm_slices)\n        for slice_chunk in chunks(slices, chunk_sizes):\n            slice_chunk = list(map(mean, zip(*slice_chunk)))\n            new_slices.append(slice_chunk)\n\n        print(len(slices), len(new_slices))\n    except:\n        # some patients don't have labels, so we'll just pass on this for now\n        pass","2a20bcac":"len(patients)","0fbe6da3":"for patient in patients[:10]:\n    try:\n        label = labels_df._get_value(patient, 'FVC')\n        path = data_dir + patient\n        slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n        slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n        new_slices = []\n\n        slices = [cv2.resize(np.array(each_slice.pixel_array),(IMG_PX_SIZE,IMG_PX_SIZE)) for each_slice in slices]\n\n        chunk_sizes = math.ceil(len(slices) \/ hm_slices)\n\n\n        for slice_chunk in chunks(slices, chunk_sizes):\n            slice_chunk = list(map(mean, zip(*slice_chunk)))\n            new_slices.append(slice_chunk)\n\n        if len(new_slices) == hm_slices-1:\n            new_slices.append(new_slices[-1])\n\n        if len(new_slices) == hm_slices-2:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n\n        if len(new_slices) == hm_slices-3:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n\n        if len(new_slices) == hm_slices-4:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n\n        if len(new_slices) == hm_slices-5:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])            \n            new_slices.append(new_slices[-1]) \n\n        if len(new_slices) == hm_slices-6:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n\n        if len(new_slices) == hm_slices-7:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n\n        if len(new_slices) == hm_slices-8:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n        if len(new_slices) == hm_slices-9:\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1]) \n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])\n            new_slices.append(new_slices[-1])                     \n            new_slices.append(new_slices[-1])\n\n\n        if len(new_slices) == hm_slices+2:\n            new_val = list(map(mean, zip(*[new_slices[hm_slices-1],new_slices[hm_slices],])))\n            del new_slices[hm_slices]\n            new_slices[hm_slices-1] = new_val\n\n        if len(new_slices) == hm_slices+1:\n            new_val = list(map(mean, zip(*[new_slices[hm_slices-1],new_slices[hm_slices],])))\n            del new_slices[hm_slices]\n            new_slices[hm_slices-1] = new_val\n\n        print(len(slices), len(new_slices))\n    except Exception as e:\n        # again, some patients are not labeled, but JIC we still want the error if something\n        # else is wrong with our code\n        print(str(e))","ab7d02bf":"for patient in patients[:15]:\n    label = labels_df._get_value(patient, 'FVC')\n    path = data_dir + patient\n    \n    # a couple great 1-liners from: https:\/\/www.kaggle.com\/gzuidhof\/data-science-bowl-2017\/full-preprocessing-tutorial\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    print(len(slices),label)\n    # print(slices[0])","37cde436":"for patient in patients[:3]:\n    label = labels_df._get_value(patient, 'FVC')\n    path = data_dir + patient\n    slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n    new_slices = []\n\n    slices = [cv2.resize(np.array(each_slice.pixel_array),(IMG_PX_SIZE,IMG_PX_SIZE)) for each_slice in slices]\n    \n    chunk_sizes = math.ceil(len(slices) \/ hm_slices)\n    for slice_chunk in chunks(slices, chunk_sizes):\n      slice_chunk = list(map(mean, zip(*slice_chunk)))\n      new_slices.append(slice_chunk)\n\n    if len(new_slices) == hm_slices-1:\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-2:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-3:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-4:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-5:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])            \n      new_slices.append(new_slices[-1]) \n    if len(new_slices) == hm_slices-6:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-7:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-8:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices-9:\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1]) \n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])\n      new_slices.append(new_slices[-1])                     \n      new_slices.append(new_slices[-1])\n    if len(new_slices) == hm_slices+2:\n        new_val = list(map(mean, zip(*[new_slices[hm_slices-1],new_slices[hm_slices],])))\n        del new_slices[hm_slices]\n        new_slices[hm_slices-1] = new_val\n        \n    if len(new_slices) == hm_slices+1:\n        new_val = list(map(mean, zip(*[new_slices[hm_slices-1],new_slices[hm_slices],])))\n        del new_slices[hm_slices]\n        new_slices[hm_slices-1] = new_val\n    \n    fig = plt.figure()\n    for num,each_slice in enumerate(new_slices):\n        y = fig.add_subplot(4,5,num+1)\n        y.imshow(each_slice, cmap='gray')\n    plt.show()","e058fc6a":"IMG_SIZE_PX=20\nSLICE_COUNT=10\n\n\ndef chunks(l, n):\n  for i in range(0, len(l), n):\n    yield l[i:i + n]\n\n\ndef mean(l):\n  return sum(l) \/ len(l)\n\ndef process_data(patient,labels_df,img_px_size=10, hm_slices=10, visualize=False):\n  label = labels_df._get_value(patient, 'FVC')\n  path = data_dir + patient\n  slices = [pydicom.read_file(path + '\/' + s) for s in os.listdir(path)]\n  try:\n    slices.sort(key = lambda x: int(x.ImagePositionPatient[2]))\n  except:\n    print('')\n  new_slices = []\n  try:\n    slices = [cv2.resize(np.array(each_slice.pixel_array),(img_px_size,img_px_size)) for each_slice in slices]\n  except:\n    return [0,0]\n  chunk_sizes = math.ceil(len(slices) \/ hm_slices)\n  for slice_chunk in chunks(slices, chunk_sizes):\n    slice_chunk = list(map(mean, zip(*slice_chunk)))\n    new_slices.append(slice_chunk)\n\n  if len(new_slices) == hm_slices-1:\n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices-2:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices-3:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices-4:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices-5:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])            \n    new_slices.append(new_slices[-1]) \n\n  if len(new_slices) == hm_slices-6:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices-7:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices-8:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n  if len(new_slices) == hm_slices-9:\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1]) \n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])\n    new_slices.append(new_slices[-1])                     \n    new_slices.append(new_slices[-1])\n\n  if len(new_slices) == hm_slices+2:\n    new_val = list(map(mean, zip(*[new_slices[hm_slices-1],new_slices[hm_slices],])))\n    del new_slices[hm_slices]\n    new_slices[hm_slices-1] = new_val\n        \n  if len(new_slices) == hm_slices+1:\n    new_val = list(map(mean, zip(*[new_slices[hm_slices-1],new_slices[hm_slices],])))\n    del new_slices[hm_slices]\n    new_slices[hm_slices-1] = new_val\n\n  if visualize:\n    fig = plt.figure()\n    for num,each_slice in enumerate(new_slices):\n      y = fig.add_subplot(4,5,num+1)\n      y.imshow(each_slice, cmap='gray')\n      plt.show()\n\n  if label.all == 1: label=np.array([0,1])\n  elif label.all == 0: label=np.array([1,0])\n        \n  return np.array(new_slices),label\n\n#                                               stage 1 for real.\ndata_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/'\npatients = os.listdir(data_dir)\nlabels_df = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv',index_col=0)\n\n\nmuch_data = []\nfor num,patient in enumerate(patients):\n    if num % 100 == 0:\n        print(num)\n    try:\n        img_data,label = process_data(patient,labels_df,img_px_size=IMG_SIZE_PX, hm_slices=SLICE_COUNT)\n        #print(img_data.shape,label)\n        much_data.append([img_data,label])\n    except KeyError as e:\n        print('This is unlabeled data!')\n\nnp.save('much_data-{}-{}-{}.npy'.format(IMG_SIZE_PX,IMG_SIZE_PX,SLICE_COUNT), much_data)","4087bb28":"import tensorflow as tf\nimport tensorflow.compat.v1 as tf\ntf.disable_v2_behavior() \nimport numpy as np\n\nIMG_PXL_SIZE = 10\nSLICE_COUNT = 10\n\nn_classes = 2\nbatch_size = 10\n\nx = tf.placeholder('float')\ny = tf.placeholder('float')\n\nkeep_rate = 0.8","fb586952":"def conv3d(x, W):\n  return tf.nn.conv3d(x, W, strides=[1,1,1,1,1], padding='SAME')\n\ndef maxpool3d(x):\n  return tf.nn.max_pool3d(x, ksize=[1,2,2,2,1], strides=[1,2,2,2,1], padding='SAME')","7f900599":"def convolutional_neural_network(x):\n    #                # 5 x 5 x 5 patches, 1 channel, 32 features to compute.\n    weights = {'W_conv1':tf.Variable(tf.random_normal([3,3,3,1,32])),\n               #       5 x 5 x 5 patches, 32 channels, 64 features to compute.\n               'W_conv2':tf.Variable(tf.random_normal([3,3,3,32,64])),\n               #                                  64 features\n               'W_fc':tf.Variable(tf.random_normal([13824  ,1024])),\n               'out':tf.Variable(tf.random_normal([1024, n_classes]))}\n\n    biases = {'b_conv1':tf.Variable(tf.random_normal([32])),\n               'b_conv2':tf.Variable(tf.random_normal([64])),\n               'b_fc':tf.Variable(tf.random_normal([1024])),\n               'out':tf.Variable(tf.random_normal([n_classes]))}\n\n    #                            image X      image Y        image Z\n    x = tf.reshape(x, shape=[-1, 10, 10, 10, 1])\n\n    conv1 = tf.nn.relu(conv3d(x, weights['W_conv1']) + biases['b_conv1'])\n    conv1 = maxpool3d(conv1)\n\n\n    conv2 = tf.nn.relu(conv3d(conv1, weights['W_conv2']) + biases['b_conv2'])\n    conv2 = maxpool3d(conv2)\n\n    fc = tf.reshape(conv2,[-1, 13824])\n    fc = tf.nn.relu(tf.matmul(fc, weights['W_fc'])+biases['b_fc'])\n    fc = tf.nn.dropout(fc, keep_rate)\n\n    output = tf.matmul(fc, weights['out'])+biases['out']\n\n    return output","2a81a24a":"much_data = np.load('.\/much_data-20-20-10.npy',allow_pickle=True)\n# len(much_data)\n\nmuch_data[:-2]","4a5e5b62":"much_data = np.load('.\/much_data-20-20-10.npy',allow_pickle=True)\n# # If you are working with the basic sample data, use maybe 2 instead of 100 here... you don't have enough data to really do this\ntrain_data = much_data[:-2]\nvalidation_data = much_data[-2:]\n\ndef train_neural_network(x):\n  prediction = convolutional_neural_network(x)\n  cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(labels = y,logits = prediction) )\n  optimizer = tf.train.AdamOptimizer(learning_rate=1e-3)\n  hm_epochs = 5\n  with tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    successful_runs = 0\n    total_runs = 0\n        \n    for epoch in range(hm_epochs):\n      epoch_loss = 0\n      for data in train_data:\n        total_runs += 1\n        try:\n          X = data[0]\n          Y = data[1]\n          _, c = sess.run([optimizer, cost], feed_dict={x: X, y: Y})\n          epoch_loss += c\n          successful_runs += 1\n        except Exception as e:\n          pass\n          # print(str(e))\n            \n      print('Epoch', epoch+1, 'completed out of',hm_epochs,'loss:',epoch_loss)\n\n      correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))\n      accuracy = tf.reduce_mean(tf.cast(correct, 'float'))\n\n      print('Accuracy:',accuracy.eval({x:[i[0] for i in validation_data], y:[i[0] for i in validation_data]}))      \n\n    print('Done. Finishing accuracy:')\n    print('Accuracy:',accuracy.eval({x:[i[0] for i in validation_data], y:[i[0] for i in validation_data]}))    \n    print('fitment percent:',successful_runs\/total_runs)\n\n# Run this locally:\n# train_neural_network(x)","e2583ad2":"# Section 3: Preprocessing our Data","5105976f":"# Section 2: Processing and viewing our Data\nOkay, so we know what we've got, and what we need to do with it.\nWe have a few options at this point, we could take the code that we have already and do the processing \"online.\" By this, I mean, while training the network, we can actually just loop over our patients, resize the data, then feed it through our neural network. We actually don't have to have all of the data prepared before we go through the network.","843a6e33":"# Section:1 Handling Data:\nAssuming you've downloaded the data , what exactly are we working with here? The data consists of many 2D \"slices,\" which, when combined, produce a 3-dimensional rendering of whatever was scanned.","050b01c0":"# OSIC Pulmonary Fibrosis Progression Kaggle Competition Analysis\n#### I was working on google colab so the first couple of lines are about how to get the data using Kaggle API to colab"}}