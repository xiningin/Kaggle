{"cell_type":{"fe9c44e0":"code","3fd2e2ab":"code","b7f7fc44":"code","f35f9c63":"code","01d6cbda":"code","e09f6052":"code","d85e1a41":"code","2ea020da":"code","1925fa3e":"code","9349a74f":"code","735f197a":"code","da20ad31":"code","7cfdddac":"code","40656964":"code","a11570cb":"code","2466545d":"code","c9587c03":"code","bac651e8":"code","0e4c827c":"code","6c2bc53b":"code","ec5f57cf":"code","2c50c5de":"markdown","b6f4010e":"markdown","365ec29d":"markdown","ef296e0e":"markdown","6df02391":"markdown","10cc4841":"markdown","8c1a0354":"markdown","7a09339b":"markdown","b987f26e":"markdown","08431fa2":"markdown","4dac09c7":"markdown"},"source":{"fe9c44e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3fd2e2ab":"#importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b7f7fc44":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","f35f9c63":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","01d6cbda":"train_data.info()","e09f6052":"train_data.isna().sum()","d85e1a41":"passenger = train_data.groupby(['Survived'])['PassengerId'].count().reset_index()\nplt.figure()\nsns.barplot(x = passenger['Survived'], y = passenger['PassengerId'])\n\nplt.title(\"Total Passenger Survived-1 or Unsurvived-0\")\nplt.xlabel('Label for Passenger')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylabel('PassengerID Count')\n\nplt.show()","2ea020da":"pass_gr50 = train_data[train_data['Age'] > 50]\n\npassenger = pass_gr50.groupby(['Survived'])['PassengerId'].count().reset_index()\nplt.figure()\nsns.barplot(x = passenger['Survived'], y = passenger['PassengerId'])\n\nplt.title(\"Passenger greater than 50 Survived-1 and Unsurvived-0\")\nplt.xlabel('Label for Passenger')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylabel('PassengerID Count')\n\nplt.show()","1925fa3e":"died = (passenger['PassengerId'][0] \/ (passenger['PassengerId'][0] + passenger['PassengerId'][1]) * 100).round(3)\nprint('{} \\nPercentage of Passenger greater than 50 died: {}%'.format(passenger, died))\n\nsurvived = (passenger['PassengerId'][1] \/ (passenger['PassengerId'][0] + passenger['PassengerId'][1]) * 100).round(3)\nprint('Percentage of Passenger greater than 50 survived: {}%'.format(survived))","9349a74f":"pass_less50 = train_data[train_data['Age'] < 50]\n\npassenger = pass_less50.groupby(['Survived'])['PassengerId'].count().reset_index()\nplt.figure()\nsns.barplot(x = passenger['Survived'], y = passenger['PassengerId'])\n\nplt.title(\"Passenger less than  50 Survived-1 and Unsurvived-0\")\nplt.xlabel('Label for Passenger')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylabel('PassengerID Count')\n\nplt.show()","735f197a":"died = (passenger['PassengerId'][0] \/ (passenger['PassengerId'][0] + passenger['PassengerId'][1]) * 100).round(3)\nprint('{} \\nPercentage of Passenger less than 50 died: {}%'.format(passenger, died))\n\nsurvived = (passenger['PassengerId'][1] \/ (passenger['PassengerId'][0] + passenger['PassengerId'][1]) * 100).round(3)\nprint('Percentage of Passenger less than 50 survived: {}%'.format(survived))","da20ad31":"Pclass_first = train_data[train_data['Pclass'] == 1]\nPclass_sec = train_data[train_data['Pclass'] == 2]\nPclass_third = train_data[train_data['Pclass'] == 3]","7cfdddac":"passenger = Pclass_first.groupby(['Survived'])['PassengerId'].count().reset_index()\nplt.figure()\nsns.barplot(x = passenger['Survived'], y = passenger['PassengerId'])\n\nplt.title(\"Survived and Unsurvived Passengers\")\nplt.xlabel('Label for Passenger')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylabel('PassengerID Count')\n\nplt.show()","40656964":"passenger = Pclass_sec.groupby(['Survived'])['PassengerId'].count().reset_index()\nplt.figure()\nsns.barplot(x = passenger['Survived'], y = passenger['PassengerId'])\n\nplt.title(\"Survived and Unsurvived Passengers\")\nplt.xlabel('Label for Passenger')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylabel('PassengerID Count')\n\nplt.show()","a11570cb":"passenger = Pclass_third.groupby(['Survived'])['PassengerId'].count().reset_index()\nplt.figure()\nsns.barplot(x = passenger['Survived'], y = passenger['PassengerId'])\n\nplt.title(\"Survived and Unsurvived Passengers\")\nplt.xlabel('Label for Passenger')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylabel('PassengerID Count')\n\nplt.show()","2466545d":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", (rate_women*100))","c9587c03":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men*100)","bac651e8":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error","0e4c827c":"y = train_data['Survived']\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nxgb_model = xgb.XGBClassifier(n_estimators=100, objective=\"reg:squarederror\", random_state=1, max_depth=6)\n\nxgb_model.fit(X, y)\n\npreditions = xgb_model.predict(X_test)\n\n","6c2bc53b":"import xgboost as xgb\n\nxgb.plot_importance(xgb_model)","ec5f57cf":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': preditions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2c50c5de":"# Visualization","b6f4010e":"Now, here we can easily see that the first and second class passenger are not much affected as compared to third class.\n## Reasons\n1. Third_class which contain highest number of passengers.\n2. Distance is long towards the top of board.\n","365ec29d":"# Survived and Unsurvived passenger w.r.t class wise","ef296e0e":"## **First Class**","6df02391":"# Passenger Survived or not Analysis","10cc4841":"## **Second Class**","8c1a0354":"# **Model : XGboost**","7a09339b":"## **Third Class**","b987f26e":"## Passenger greater than 50 survived or not","08431fa2":"## Total passenger survived or not","4dac09c7":"## Passenger less than 50 survived or not"}}