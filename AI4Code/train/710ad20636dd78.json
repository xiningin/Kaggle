{"cell_type":{"decfbedc":"code","ddb0000f":"code","5308d7de":"code","a079508c":"code","647d4093":"code","4e3ef2af":"code","0e10b0ef":"code","ed1de289":"code","6b1d3955":"code","ea53a8ae":"code","4dddf3a5":"markdown","9f9af783":"markdown","070f6b79":"markdown"},"source":{"decfbedc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname,\" \",filenames)\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddb0000f":" \ntrain= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest= pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nprint(train.shape)\nselectedFeature=[\"Survived\",'Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ntrain=train[selectedFeature]\ntest=test[[ 'PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]\n ","5308d7de":"print('train before \\n',train.info())\ntrain['Age'].fillna(29,inplace=True)\ntrain['Embarked'].fillna('S',inplace=True)\nprint('train after \\n',train.info())\nprint(\"-------test---------\")\nprint('test before\\n',test.info())\ntest['Age'].fillna(29,inplace=True)\ntest['Fare'].fillna(35.6,inplace=True)\n\nprint('test after\\n',test.info())\n ","a079508c":"# sex and emberk -> to numeric\ntrain['Sex']=train['Sex'].astype('category')\ntrain['Embarked']=train['Embarked'].astype('category')\ntrain.dtypes\ntrain[\"Sex_cat\"] = train[\"Sex\"].cat.codes\ntrain[\"Embarked_cat\"]=train[\"Embarked\"].cat.codes\ntrain.head()\n#for test set\ntest['Sex']     =test['Sex']     .astype('category')\ntest['Embarked']=test['Embarked'].astype('category')\ntest[\"Sex_cat\"] = test[\"Sex\"].cat.codes\ntest[\"Embarked_cat\"]=test[\"Embarked\"].cat.codes\ntest.head()","647d4093":"X=train[['Pclass','Sex_cat','Age','SibSp','Parch','Fare','Embarked_cat']]\nprint(X.dtypes)\ny=train['Survived']\nX=np.asarray(X)\nprint(X[0:5])\ny=y.values\ny[0:5]\n# for test set\nXtest=test[[ 'Pclass','Sex_cat','Age','SibSp','Parch','Fare','Embarked_cat']]\nprint(Xtest.dtypes)\n \nXtest=np.asarray(Xtest)\nprint(Xtest[0:5])\n \n ","4e3ef2af":"from sklearn import preprocessing\nX=preprocessing.StandardScaler().fit(X).transform(X)\nXtest=preprocessing.StandardScaler().fit(Xtest).transform(Xtest)\n ","0e10b0ef":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(C=0.01,solver='liblinear').fit(X,y)\nlr","ed1de289":"from sklearn.metrics import jaccard_score\nyhat=lr.predict(Xtest )\nyhat.shape\n\n ","6b1d3955":"my_submission = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': yhat})\nmy_submission.to_csv('submission.csv', index=False)","ea53a8ae":"output= pd.read_csv('\/kaggle\/working\/submission.csv')\noutput.shape","4dddf3a5":"# > **Normalize X**","9f9af783":"# Modeling","070f6b79":"steps:\nopen train file\nvisualize data"}}