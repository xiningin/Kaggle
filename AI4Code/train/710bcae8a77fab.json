{"cell_type":{"dbe2def4":"code","82d24aa2":"code","f3bf5037":"code","e5e26178":"code","1a23134e":"code","051b1599":"code","6555b0fb":"code","f06246b9":"code","e641c68b":"code","4c128eba":"code","3d91e625":"code","924c32ea":"code","9fb98fc7":"code","d951903b":"code","30b81a2a":"markdown","684fbe3b":"markdown","73eaeb94":"markdown","aac27ea4":"markdown","01491eff":"markdown","3e964dcf":"markdown","add32933":"markdown","c7118d07":"markdown","350e611e":"markdown","a18bcdf7":"markdown","aabd7edb":"markdown","98e7de3f":"markdown","954933d1":"markdown","cd193435":"markdown","518ca853":"markdown","b1ca149a":"markdown","6abbcb68":"markdown","417b5acd":"markdown","b673f644":"markdown","538eebec":"markdown","02804ddf":"markdown","2a460363":"markdown","feb74c86":"markdown","5fc1aa33":"markdown","687c9b05":"markdown","ac6ab873":"markdown","1e52012b":"markdown","ea252091":"markdown","5408979e":"markdown","f0240e04":"markdown","e2e3abd6":"markdown","c3b15326":"markdown","467e0bd9":"markdown","cae02d21":"markdown","2abeb1d7":"markdown","9449baaa":"markdown","5347f0a4":"markdown","e287347b":"markdown","a03ad381":"markdown"},"source":{"dbe2def4":"%matplotlib inline","82d24aa2":"import pandas as pd\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport time\nfrom numpy.random import rand\nimport seaborn as sns","f3bf5037":"pi_real = 3.1415926535","e5e26178":"trials = 1000000\nxvalue = []\nyvalue = []\nhits = []\nhits_count = 0\n\nfor _ in range(trials):\n    x, y = random.random(), random.random()\n\n    xvalue.append(x)\n    yvalue.append(y)\n\n    if x ** 2 + y ** 2 < 1:\n        hits_count += 1\n        hits.append('Red')\n\n    else:\n        hits.append('Blue')\n\nprint(4 * hits_count \/ trials)","1a23134e":"def plot_pi(num_points):    \n    circle_x = np.linspace(0, 1, 500)\n    circle_y = np.sqrt(1 - circle_x**2)\n\n    plt.xlim([0,1])\n    plt.ylim([0,1])\n    plt.title(\"Monte Carlo $\\pi$ Estimation\")\n    plt.plot(circle_x, circle_y)\n    plt.scatter(xvalue[0:num_points], yvalue[0:num_points], c=hits[0:num_points])\n\n    plt.show()","051b1599":"plot_pi(3000)","6555b0fb":"def plot_pi_(num_points): \n    theta = np.linspace( 0 , 2 * np.pi , 150 )\n\n    radius = 1\n\n    a = radius * np.cos( theta )\n    b = radius * np.sin( theta )\n\n    figure, axes = plt.subplots( 1 )\n\n    axes.plot( a, b )\n    axes.set_aspect( 'equal', 'box' )\n    plt.scatter(xvalue[0:num_points], yvalue[0:num_points], c=hits[0:num_points])\n\n    plt.title(\"Monte Carlo $\\pi$ Estimation\")\n    plt.show()\n","f06246b9":"plot_pi_(500)","e641c68b":"def area_unit_circle_MC(trials=6000000):\n    start_time = time.time()\n    n = trials\n    random_numbers = np.random.uniform(0,1, 6000000)\n    f = np.sqrt(1 - random_numbers**2)\n\n    sum = np.sum(f)\n    pi = 4 * (1 \/ n) * sum\n    accuracy = (pi -  3.1415926535)\/ 3.1415926535\n    return f'pi estimation is {pi} and time to execute is {time.time() - start_time:.5f} seconds and accuracy {accuracy}'\n\n\nprint(area_unit_circle_MC(6000000))\n","4c128eba":"def area_unit_circle_trapz(function, a=0, b=1, n=6000000):\n    start_time = time.time()\n    x = np.linspace(a, b, n + 1)\n    circle_area = 4 * (np.trapz(function(x), x))\n    accuracy = (circle_area - 3.1415926535)\/3.1415926535\n    return f'pi estimation is {circle_area}, time to execute is {time.time() - start_time:.5f} seconds and accuracy {accuracy}'\n\n\nprint(area_unit_circle_trapz(lambda x: np.sqrt(1 - x ** 2), 0, 1, 6000000))\n","3d91e625":"def get_outcome(num_plays,outcome_prob):\n    \"\"\"\n    Betting on a single number -probabilities for loosing: 37 to 38 and to win: 1 to 38.\n    For every win +1 USD and for every loss -1 USD.\n    \"\"\"\n    n = num_plays\n    prob = outcome_prob\n    spin = np.random.choice((-1, 1), n, p=prob)\n    sum = np.sum(spin)\n    return sum\n\n\nnum_plays = 10000000\noutcome_prob = [37 \/ 38, 1 \/ 38]\ntotal = get_outcome(num_plays,outcome_prob)\n\n\nprint(f\"The Total Earnings for this Player is: $ {total} from initial {num_plays} \")\nprint(\"The Rate of Return following this monte carlo simulation is:\", round(total\/num_plays, 4) * 100, '% after',num_plays, 'spins')","924c32ea":"num_plays = 10000000\n\"\"\"\nBetting on even number - probabilities for loosing: 20 to 38 and to win: 18 to 38.\nFor every win +1 USD and for every loss -1 USD.\n\"\"\"\noutcome_prob = [10 \/ 19, 9 \/ 19]\ntotal = get_outcome(num_plays,outcome_prob)\n\n\nprint(f\"The Total Earnings for this Player is: $ {total} from initial {num_plays} \")\nprint(\"The Rate of Return following this monte carlo simulation is:\", round(total\/num_plays, 4) * 100, '% after',num_plays, 'spins')","9fb98fc7":"roulette_plays = [10,25,100,1000]\n\nroul_ten = []\nroul_twent = []\nroul_onehundred = []\nroul_one_thousand = []\n# in roulette_sim_array we will collect the results from the 4 games\nroulette_sim_array = []\nfor i in roulette_plays:\n    x = 1\n    while x<=500:\n        x+= 1\n        if i == 10:\n            roul_ten.append(get_outcome(i,[10 \/ 19, 9 \/ 19]))\n        elif i == 25:\n            roul_twent.append(get_outcome(i,[10 \/ 19, 9 \/ 19]))\n        elif i == 100:\n            roul_onehundred.append(get_outcome(i,[10 \/ 19, 9 \/ 19]))\n        else:\n            roul_one_thousand.append(get_outcome(i,[10 \/ 19, 9 \/ 19]))\n        \n# now we will reshape and stack the lists into a 2 dimensional numpy array\nroulette_sim_array = np.vstack([roul_ten,roul_twent,roul_onehundred,roul_one_thousand])\nroulette_sim_array = np.array(roulette_sim_array, ndmin = 2)#2-d array\n#For the purposes of plotting the results in 4 columns and 500 rows we have to transpose the data and convert it to dataframe\nroulette_sim_array.shape\nroulette_df = pd.DataFrame(roulette_sim_array).T\n#defining our column names for each monte carlo simulation\nroulette_df.columns = ['10','25','100','1000']\n","d951903b":"hist, axes = plt.subplots(ncols=4)\nhist.set_size_inches(18, 8)\nrolls = [10,25,100,1000] \n#multiple histograms on the same line with seaborn\/matplotlib\nfor i,j, ax, col in zip(range(4),rolls,axes, roulette_df.columns):\n    sns.histplot(roulette_df[col], ax=ax, color='g')\n    axes[i].set_xlabel('Total Earnings ($) after '+ str(j) +' Rolls')\n    axes[i].set_ylabel('Density')\nhist.tight_layout()\nhist.subplots_adjust(top=0.82)\nhist.suptitle('Monte Carlo Distributions for Total Earnings ($) from 4 Roulette Simulations Executed 500 times', size = 25)\nplt.show()","30b81a2a":"## Conclusion","684fbe3b":"One might think that it won't be that hard to win against the casino, assuming the roulette is fair, but in reality, the odds are always stacked against the players and there are several reasons for that:\n* You can try to guess the color of the number. Black or red. However, there is a third color that the casino will not let you choose, on 2 extra numbers 0 and 00, which is green. \n* You can try to guess if the number will be even or odd, but 0 and 00 don\u2019t count as even or odd.\n* If you try to guess the zone, you still have 2\/3 of the board against you. Here you can bet on all thirds available and \"win\", but you will not make any money, because each third pays 2 to 1.\n* If you bet on a single number the payout is substantial, if you guessed right - it pays 35 to 1, the odds against you winning are 37 to 1.\n\n\nWe will use the following table to calculate for each outcome the win and loss probability.\n","73eaeb94":"## Practical examples of Monte Carlo method","aac27ea4":"Looking at the graphics we can see that as the number of rolls increases the mean negative total earnings also increases, showing that is extremely rare for players to break even if they play 1000 games of roulette. It appears in our fourth histogram, that profiting after 1000 spins is about 2 standard deviations above the mean, so only approximately 2% of players will fall into this category. The first histogram (10 rolls executed 500 times) seems normally distributed around 0 which insinuates that you have roughly equal chances of winning and losing. This is more or less accurate because gamblers don't usually consider the 3% discrepancy in their vs. the casino's odds of winning. Seems like the more games we play the more money we lose.","01491eff":"After comparing both methods in accuracy and time for performance, we can see that Monte Carlo integration is faster but less precise than the Trapezoid method for this particular case.\n\nAnother observation we can make is that after we repeat both simulations n number of times:\n* with Monte Carlo simulation we approximate randomly $\\pi$ number with values greater or smaller than $\\pi$.\n* with the Trapezoid rule we approximate consistently $\\pi$ number with values smaller than $\\pi$.","3e964dcf":"Monte Carlo simulation is a very useful approach to scientific computing due to its simplicity and general applicability. As we have seen with roulette simulation, the method is very efficient with large-scale tasks and gives explanations where the randomness of the process is highly inherited and when is difficult or impossible to use other approaches.\n","add32933":"* ### Approximation of $\\pi$ with Monte Carlo simulation","c7118d07":"## References","350e611e":"Now let's imagine we are playing pebbles on a beach - we are throwing randomly pebbles at the square. For each trial we either throw in the circle - hit, or we throw outside of the circle - miss. In this way, using Monte Carlo method and the above calculation, we can approximate $\\pi$ - applying the rule of large numbers, the more trials we have, the closer we get to number $\\pi$.\n$$\\frac {A\\hspace{1mm}hits}{A\\hspace{1mm} trials} = 4 \\frac {A\\hspace{1mm} m}{A\\hspace{1mm} n}$$","a18bcdf7":"![unit_circle.JPG](attachment:3fb8a4a0-3a26-4dbf-b393-0f43b58a0e22.JPG)","aabd7edb":"To compare the accuracy and time to execute of Monte Carlo integration simulation let's see how the same estimation is performed with the [the trapezoid method](http:\/\/www.mathwords.com\/t\/trapezoid_rule.htm). \n\nThe trapezoidal rule works by approximating the region under the graph of the function f(x) as a trapezoid and calculating its area. \n\n$$\\int_ {a} ^{b} f(x)\\text{d}x = \\frac{\\Delta x}{2}[f(x_0) + 2f(x_1)+ 2f(x_2) +2f(x_3)+......2f(x_n-1)+f(x_n)] $$\n\nThe $\\int_ {a} ^{b} f(x)\\text{d}x$  is estimated by adding the areas of all trapezoids {$x_1,x_2,x_3,......x_n$}.\n\nThe width $\\Delta x$ of each trapezoid is given by $\\Delta x = \\frac{b-a}{n}$\n\nThe same as with Monte Carlo - the more number points of estimations we have - the more accurate result we get.","98e7de3f":"Now we will deep dive into Monte Carlo simulation with 4 different games (bet is the same) - 10,25,100,1000 number of roulette spins each performed  500 times\n\nAfter the simulation is performed we will create  4 histograms( for each game) to show the distributions of total earnings for the simulations.","954933d1":"### What is Monte Carlo Simulation (method)?","cd193435":"### What is computer simulation, where is most commonly used and why is useful?","518ca853":"## Monte Carlo simulation","b1ca149a":"<table><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Bet name<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Winning spaces<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Payout<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Odds&nbsp;against winning (American)<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>35 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>37 to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>35 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>37 to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Straight up<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Any single number<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>35 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>37 to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Row<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0, 00<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>17 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>18 to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Split<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>any two adjoining numbers vertical or horizontal<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>17 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>18 to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Street<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>any three numbers horizontal (1, 2, 3 or 4, 5, 6, etc.)<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>11 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>11+2\u20443&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Corner<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>any four adjoining numbers in a block (1, 2, 4, 5 or 17, 18, 20, 21, etc.)<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>8 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>8+1\u20442&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Top line or Basket (US)<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0, 00, 1, 2, 3<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>6 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>6+3\u20445&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Top line or Basket (European)<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>0, 1, 2, 3<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>8 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Six line<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>any six numbers from two horizontal rows (1, 2, 3, 4, 5, 6 or 28, 29, 30, 31, 32, 33 etc.)<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>5 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>5+1\u20443&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1st column<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2+1\u20446&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2nd column<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2+1\u20446&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>3rd column<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2+1\u20446&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1st dozen<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 through 12<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2+1\u20446&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2nd dozen<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>13 through 24<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2+1\u20446&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>3rd dozen<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>25 through 36<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2+1\u20446&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Odd<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1, 3, 5, ..., 35<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1+1\u20449&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Even<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>2, 4, 6, ..., 36<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1+1\u20449&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Red<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>32, 19, 21, 25, 34, 27, 36, 30, 23, 5, 16, 1, 14, 9, 18, 7, 12, 3<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1+1\u20449&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>Black<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>15, 4, 2, 17, 6, 13, 11, 8, 10, 24, 33, 20, 31, 22, 29, 28, 35, 26<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1+1\u20449&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 18<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1, 2, 3, ..., 18<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1+1\u20449&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><tr><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>19 to 36<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>19, 20, 21, ..., 36<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1 to 1<\/span><\/p><\/div><\/div><\/td><td class=\"border_l border_r border_t border_b selected\" style=\"text-align: left;\"><div class=\"wrap\"><div style=\"margin: 10px 5px;\"><p><span>1+1\u20449&nbsp;to 1<\/span><\/p><\/div><\/div><\/td><\/tr><\/table>","6abbcb68":"Monte Carlo simulations is a statistical technique used to model probabilistic (or \u201cstochastic\u201d) systems and establish the odds for a variety of outcomes. Monte Carlo is one of the methods for solving finite Markov decision problems, together with dynamic programming and temporal-difference learning. Each class of methods has its strengths and weaknesses. Dynamic programming methods are well developed mathematically but require a complete and accurate model of the environment. Monte Carlo methods don\u2019t require a model and are conceptually simple, but are not well suited for step-by-step incremental computation. Finally, temporal-difference methods require no model and are fully incremental, but are more complex to analyze. The methods also differ in several ways with respect to their efficiency and speed of convergence.* \n\n[The term ](https:\/\/en.wikipedia.org\/wiki\/Monte_Carlo_method) was coined by the  Polish-American mathematician Stan Ulam in the late \u201940s who was then working on the Manhattan project (aka The Atomic Bomb Project). The inception of the idea was when Ulam was recovering from brain surgery, he kept himself busy by playing countless games of solitaire. \u201cAfter spending a lot of time trying to estimate them by pure combinatorial calculations, I wondered whether a more practical method than \u201cabstract thinking\u201d might not be to lay it out say one hundred times and simply observe and count the number of successful plays.\u201d \n\nActually, such a method was available as for project Manhattan the very first general-purpose electronic computer was developed. After Ulman shared his idea with John von Neumann ( on\u0435 of the lead mathematician on the project), Neumann immediately saw the significance of this insight that could be used for the purposes of the Manhattan project. The two collaborated to develop the method. As the project was highly classified, this method needed a code name and \u201cMonte Carlo\u201d was chosen, in a nod to the Monaco casino town (where Ulam\u2019s uncle gambled). \n\nThe basis of a Monte Carlo simulation is that the probability of varying outcomes cannot be determined because of random variable interference. Therefore, a Monte Carlo simulation focuses on constantly repeating random samples to achieve certain results. \n\nA Monte Carlo simulation takes the variable that has uncertainty and assigns it a random value. The model is then run and a result is provided. This process is repeated again and again while assigning the variable in question with many different values. Once the simulation is complete, the results are averaged together to provide an estimate. \n\nNowadays Monte Carlo simulation is used across industries to facilitate both automated and human-intermediated decisions involving uncertainty, such as Physical sciences, Engineering, Climate change, and radiative forcing, Computational biology, Computer graphics, Applied statistics, Artificial intelligence, Finance and business, Law, Mathematics, etc. ","417b5acd":"[Computer simulation](https:\/\/plato.stanford.edu\/entries\/simulations-science\/#ComSimStrSciThe) is a method in which we will use computer to solve, or to approximately solve, the mathematical equations of a model that is meant to represent some system\u2014either real or hypothetical.\n\nIn the context of computer simulation, we will refer to an entire process. This process includes choosing a model; finding a way of implementing that model in a form that can be run on a computer; calculating the output of the algorithm, and visualizing and studying the resultant data. The method includes this entire process\u2014used to make inferences about the target system that one tries to model\u2014as well as the procedures used to sanction those inferences.\n\nComputer simulation was pioneered as a scientific tool in meteorology and nuclear physics in the period directly following World War II, and since then has become indispensable in a growing number of disciplines. The list of sciences that make extensive use of computer simulation has grown to include astrophysics, particle physics, materials science, engineering, fluid mechanics, climate science, evolutionary biology, ecology, economics, decision theory, medicine, sociology, epidemiology, and many others. There are even a few disciplines, such as chaos theory and complexity theory, whose very existence has emerged alongside the development of the computational models they study.\n\n [In science the most common methods](https:\/\/en.citizendium.org\/wiki\/Computer_simulation) of computer simulations are:\n* A numerical simulation of differential equations that cannot be solved analytically, theories that involve continuous systems such as phenomena in physical cosmology, fluid dynamics (e.g. climate models, roadway noise models, roadway air dispersion models).\n* A stochastic simulation, typically used for discrete systems where events occur probabilistically, and which cannot be described directly with differential equations (this is a discrete simulation in the above sense). Phenomena in this category include genetic drift, biochemical or gene regulatory networks with small numbers of molecules.\n\nSome specific examples are:\n\n* Statistical simulations based upon an agglomeration of a large number of input profiles, such as the forecasting of the equilibrium temperature of receiving waters, allowing the gamut of meteorological data to be input for a specific locale. This technique was developed for thermal pollution forecasting.\n* Agent-based simulation has been used effectively in ecology, where it is often called individual based modeling and has been used in situations for which individual variability in the agents cannot be neglected, such as population dynamics of salmon and trout (most purely mathematical models assume all trout behave identically).\n* Time stepped dynamic model. In hydrology, there are several such hydrology transport models such as the SWMM and DSSAM Models developed by the U.S. Environmental Protection Agency for river water quality forecasting.\n* Computer simulations have also been used to formally model theories of human cognition and performance, e.g. ACT-R\n* Computer simulation has been applied to social systems and artificial societies.\n* A computer simulation using molecular modeling for drug discovery was developed Quantum 3.1 to achieve the level of accuracy of simulation equal to the chemical or in-vitro tests.\n* Computational fluid dynamics simulations are used to simulate the behavior of flowing air, water, and other fluids. There are one-, two- and three-dimensional models used. A one-dimensional model might simulate the effects of water hammer in a pipe. A two-dimensional model might be used to simulate the drag forces on the cross-section of an airplane wing. A three-dimensional simulation might estimate the heating and cooling requirements of a large building.\n\nSimulations are very useful when precise mathematical treatment for a given process is not possible, or it might be difficult, time-consuming, or expensive to analyze. In these situations, simulation may approximate real-world results; yet, require less time, effort, and\/or money than other approaches.\n\nThey are an invaluable tool for statistical research to model random events in a way to simulate outcomes closely matched with real-world outcomes. By observing simulated outcomes, researchers gain insight into the real world.\n\nWith simulations we can model only known random processes, that have initial conditions, variables and distribution\n","b673f644":"Let's see the results for odd number probabability: 20 vs 38 to loose and 18 to 38 to win.","538eebec":"![American_roulette.JPG](attachment:a9121a81-b604-4e81-9ced-f41b0857c24d.JPG)","02804ddf":"* ### Monte Carlo simulation for an American  Roulette game","2a460363":"## Introduction","feb74c86":"Plotting 1 quadrant of the unit circle","5fc1aa33":"* ### Estimating $\\pi$ with numerical integration using Monte Carlo method","687c9b05":"![Unit circle and unit square.JPG](attachment:879552ee-dfff-47bf-9e08-ebeff283302a.JPG)","ac6ab873":"With Monte Carlo simulation we will try to prove that casino games are designed in a way to always favor the house - the odds are always in the favor of the casino. We will simulate n number of games with a different win and loose probabilities( see the table below for win and loose probability odds).\n\nAfter that, we will simulate 4 different games with 10,25,100,1000 number of roulette spins each performed  500 times, assuming the players bet 1$ for each game( each time betting on the same outcome) and we will try to prove that the more games we play the more money we lose.","1e52012b":"Casino games such as craps and roulette are designed to favor the casino. This arises from the way in which the payouts for different outcomes are constructed. \n\n \nAn American roulette wheel consists of the numbers 1 through 36, as well as 0 and 00. Betting on a single number pays out 35 to 1. In addition to returning your original bet, you would win 35 dollars for each 1 dollar that was bet. In addition to betting on a single number, you can bet on combinations of numbers. For example, you can bet on all even numbers or all odd numbers, which payout 1 to 1. You can be on all red or all black numbers, which also pays out 1 to 1. You can bet on one of the three columns of numbers, which pays out 2 to 1. For these combinations, if the ball were to land on 0 or 00, it would not payout.\n","ea252091":"* Monte Carlo Roulette simulation : [code reference ](https:\/\/github.com\/Ryanondocin2019\/Roulette_MonteCarlo_Sim_PySpark\/blob\/main\/Roulette%20Monte%20Carlo%20Simulation%20and%20Gap%20Minder%20Dataset%20Transformation%20using%20PySpark.ipynb) \n* $\\pi$ numerical integration:[code reference ](https:\/\/github.com\/jvendrow\/Monte-Carlo-Methods\/blob\/master\/Monte_Carlo_Pi.py)","5408979e":"Here we will use those probabilities to simulate the outcome of n random spins of a roulette, where 1 is win and -1 is loose. Every time we bet on the same outcome.","f0240e04":"In this paper, we will take a closer look at one particular method of computer simulation - the Monte Carlo simulation.\n\nWe will compare its accuracy and time to perform with another method for numerical integration - the trapezoid rule. \n\nFinally, we will examine roulette game with Monte Carlo simulation, plotting different scenarios with different probabilities of outcome and we will observe the results.","e2e3abd6":"We can approximate $\\pi$ by integrating function $\\sin\\theta$ (when the limits of the functions are from 0 to 1) multiplied by 4 ( when the radius is equal to 1).\n>Given that $\\sin\\theta = y \\hspace{1mm}and\\hspace{1mm}\\cos\\theta = x \\hspace{1mm}and\\hspace{1mm}r = 1$\n>\n>$ y^2 + x^2 = r^2$\n$\\Rightarrow y = \\sqrt{R^2 - x^2} = \\sqrt{1 - x^2}$\n>\n>$S = 4 \\int_0^1\\sqrt{1 - x^2}dx $\n","c3b15326":"### Abstract","467e0bd9":"### How accurate is Monte Carlo method compared to other methods?","cae02d21":"Now, with Monte Carlo simulation, to estimate $\\pi$, we can sample n random numbers x\u1d62, i=1,\u2026n between 0 and 1, calculate f(x\u1d62) [for them and take the average](https:\/\/www.cantorsparadise.com\/estimating-%CF%80-using-monte-carlo-simulations-3459a84b5ef9). If we multiply this by four, it will approximately equal $\\pi$.\n$$\\pi \\approx 4\\frac{1}{n} \\sum_{i=1}^{n}f(x_{i})$$\n\n\nThis is a commonly used method to estimate discrete integrals, especially when the exact calculation of the integral is too expensive or finding the antiderivative is not possible. Let's also estimate the precision of the method and the time to execute it.","2abeb1d7":"For the purposes of estimating $\\pi$ we will approximate real $\\pi$ to the 10th decimal point.","9449baaa":"# Monte Carlo simulation","5347f0a4":"*Sutton, Richard and Barto, Andrew. Reinforcement learning.An introduction. Second edition, MIT press 2018","e287347b":"In this section of the paper, we will try to prove that Monte Carlo simulation is fast in performance, but is less accurate compared to other, more precise methods, such as the trapezoid method.","a03ad381":"One way to compute $\\pi$ is from the ratio of unit circle(radius is 1) area and unit square area:\n\n$$ A (circle) = \\pi r^2$$\n\n$$ A (square) = (2r)^2$$\n\n\n\n$$\\frac {A\\hspace{1mm}m}{A\\hspace{1mm}n} = \\frac {\\pi r^2} {(2r)^2} = \\frac {\\pi} {4}\\hspace{1mm} or \\hspace{1mm} \\pi = 4 \\frac {A\\hspace{1mm}m}{A\\hspace{1mm}n}$$"}}