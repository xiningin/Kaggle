{"cell_type":{"52b31589":"code","8e133630":"code","0b2ee0cb":"code","e4319211":"code","3d54fb91":"code","6e120dd4":"code","a25ff1c3":"code","073d96db":"code","ab14d9b8":"code","6a7fd649":"code","017b6d85":"code","a67c3463":"code","30ed2da3":"code","79abe490":"code","8969f9b0":"code","960ae317":"code","f2c6e273":"code","ff63521f":"code","a3c889ab":"code","f43e414c":"code","f845d898":"code","1c657b05":"code","84645a48":"code","d8080094":"code","226425ed":"code","5dfcfd8e":"code","19fffe6b":"code","8404fd2d":"code","b3a467fd":"code","9455c7d2":"code","b26f3e7c":"code","5aa0813b":"code","8531a2fb":"markdown","eda08e70":"markdown","9837f4b2":"markdown","91844474":"markdown","d299a2ea":"markdown"},"source":{"52b31589":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e133630":"#basic library\nimport numpy as np\nimport pandas as pd\n\n#Basic Visualization Libarary\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#Advanced Visualization Library\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize']=(12,8)\nimport warnings\nwarnings.filterwarnings('ignore')\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode,iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\n","0b2ee0cb":"data=pd.read_csv('\/kaggle\/input\/amazon-alexa-reviews\/amazon_alexa.tsv',sep='\\t')\ndata.head()","e4319211":"#View data info\ndata.info()","3d54fb91":"#View data statistics\ndata.describe()","6e120dd4":"data.groupby('rating').describe()","a25ff1c3":"data.groupby('feedback').describe()","073d96db":"data['rating'].value_counts().describe()","ab14d9b8":"ratings=data['rating'].value_counts()\n\nlabel_rating=ratings.index\nsize_rating=ratings.values\n\ncolor=['aqua','yellow','green','pink','blue']\n\nrating_piegraph=go.Pie(labels=label_rating,\n                      values=size_rating,\n                      marker=dict(colors=color),\n                      name='Alexa',hole=0.3)\ndf=[rating_piegraph]\n\nlayout=go.Layout(title=\"Distribution of Alexa Review\")\n\nfig=go.Figure(data=df,\n             layout=layout)\npy.iplot(fig)","6a7fd649":"data['length']=data['verified_reviews'].apply(len)\ndata.head()","017b6d85":"color=plt.cm.copper(np.linspace(0,1,15))\ndata['variation'].value_counts().plot.bar(color=color,figsize=(12,8))\nplt.title('Distribution of Alexa review',fontsize=20)\nplt.xlabel('variation')\nplt.ylabel('count')\nplt.show()","a67c3463":"data['length'].value_counts().plot.hist(color='green',figsize=(12,8),bins=50)\nplt.title('Distribution of Alexa Review ',fontsize=20)\nplt.xlabel('Length')\nplt.ylabel('count')\nplt.show()","30ed2da3":"sns.boxenplot(data['variation'],data['rating'],palette='spring')\nplt.title('Variation vs Rating')\nplt.xticks(rotation=90)\nplt.show()","79abe490":"sns.swarmplot(data['variation'],data['length'],palette='cool')\nplt.title('Variation vs Length')\nplt.xticks(rotation=90)\nplt.show()","8969f9b0":"sns.violinplot(data['feedback'],data['rating'],palette='deep')\nplt.title('Feedback rating')\nplt.show()","960ae317":"sns.boxplot(data['rating'],data['length'],palette='deep')\nplt.title('Rating vs Length')\nplt.show()","f2c6e273":"import spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv=CountVectorizer(STOP_WORDS)\nwords=cv.fit_transform(data['verified_reviews'])\nwords_sum=words.sum(axis=0)\n\nwords_freq=[(word,words_sum[0,idx]) for word,idx in cv.vocabulary_.items()]\nwords_freq=sorted(words_freq,key=lambda x:x[1],reverse=True)\n\nfrequency=pd.DataFrame(words_freq,columns=['word','freq'])\n\ncolor=plt.cm.ocean(np.linspace(0,1,20))\nfrequency.head(20).plot.bar(x='word',y='freq',figsize=(12,8),color=color)\nplt.title('Amazaon Alex revew Top-20 words')\nplt.show()","ff63521f":"from wordcloud import WordCloud\n\nwordcloud=WordCloud(background_color='lightcyan',\n                   width=2000,\n                   height=2000).generate_from_frequencies(dict(words_freq))\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(15,12))\nplt.title('Vocabulary of word review',fontsize=20)\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","a3c889ab":"import spacy\nfrom spacy import displacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nnlp=spacy.load('en_core_web_sm')\n\ndef explain_text_entities(text):\n    doc=nlp(text)\n    for ent in doc.ents:\n        print(f'Entity:{ent},Label:{ent.label_},{spacy.explain.ent.label_}')\nfor i in range(0,3150):\n    one_sentence=data['verified_reviews'][i]\n    doc=nlp(one_sentence)\n    displacy.render(doc,style='ent')","f43e414c":"import spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nimport nltk\nfrom nltk.stem.porter import PorterStemmer\nimport re\n","f845d898":"corpus=[]\nfor i in range(0,3150):\n    review=re.sub('[^a-zA-Z]',' ',data['verified_reviews'][i])\n    review=review.lower()\n    review=review.split()\n    ps=PorterStemmer()\n    review=[ps.stem(word) for word in review if word not in STOP_WORDS]\n    review=' '.join(review)\n    corpus.append(review)","1c657b05":"from sklearn.feature_extraction.text import TfidfVectorizer\ncv=CountVectorizer(max_features=2500)\nX=cv.fit_transform(corpus).toarray()\ny=data.iloc[:,4].values","84645a48":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","d8080094":"from sklearn.preprocessing import MinMaxScaler\nmm=MinMaxScaler()\nX_train=mm.fit_transform(X_train)\nX_test=mm.transform(X_test)","226425ed":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\n\nmodel=RandomForestClassifier()\nmodel.fit(X_train,y_train)\n\ny_pred=model.predict(X_test)\n\nprint(\"Training Accuracy:\",model.score(X_train,y_train))\nprint(\"Testing Accuracy:\",model.score(X_test,y_test))","5dfcfd8e":"cm=confusion_matrix(y_pred,y_test)","19fffe6b":"print(\"Confusion Matrix: \",cm)","8404fd2d":"from sklearn.model_selection import cross_val_score\naccuracies=cross_val_score(estimator=model,X=X_train,y=y_train,cv=10)","b3a467fd":"print(\"Accuracies: \",accuracies.mean())\nprint(\"Standard Variance: \",accuracies.std())","9455c7d2":"params={'bootstrap':['True'],\n       'max_depth':[80,100],\n       'min_sample_split':[8,12],\n       'n_estimator':[100,300]}","b26f3e7c":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold","5aa0813b":"cv_object=StratifiedKFold(n_splits=2)\ngrid=GridSearchCV(estimator=model,\n                 param_grid=params,\n                 cv=cv_object,verbose=0,\n                 return_train_score=True)","8531a2fb":"### Applying K fold cross validation","eda08e70":"#### Loading data","9837f4b2":"### Grid Search ","91844474":"### Convert in Bag Of Words(BOW)","d299a2ea":"### Data Visualization"}}