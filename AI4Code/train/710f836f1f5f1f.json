{"cell_type":{"0bee18a4":"code","3cdb91df":"code","edbf9d16":"code","9b0df942":"code","0ce821ba":"code","d2e8f5c6":"code","1e8d9032":"code","c189d0ad":"code","47f2b580":"code","953ced13":"code","c6cdd2dd":"code","9e1a774a":"code","2432c663":"code","fd808b8d":"code","8945aa7d":"code","981c2ca1":"code","083366c6":"code","4571240d":"code","a80c1501":"markdown"},"source":{"0bee18a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cdb91df":"data = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","edbf9d16":"data.columns","9b0df942":"pix = data['pixels']","0ce821ba":"p = []\nfor i in pix:\n    p.append(i.split(' '))","d2e8f5c6":"p = np.array(p)","1e8d9032":"p[0]","c189d0ad":"p.shape","47f2b580":"p1 = np.reshape(p,(-1,48,48))","953ced13":"p1 = p1.astype('float32')","c6cdd2dd":"p1[15]","9e1a774a":"data[data['age']==26]","2432c663":"plt.figure(figsize=(10,10))\n\nfor index, image in enumerate(np.random.randint(0,10454,9)):\n    plt.subplot(3, 3, index + 1)\n    plt.imshow(p1[image])\n\nplt.show()","fd808b8d":"y = data[['gender','ethnicity','age']]\nX = p1","8945aa7d":"y_gender = np.array(y['gender'])\ny_ethnicity = np.array(y['ethnicity'])\ny_age = np.array(y['age'])","981c2ca1":"X.shape","083366c6":"def build_model(num_classes, activation='softmax', loss='sparse_categorical_crossentropy'):\n    \n    inputs = tf.keras.Input(shape=(img_height, img_width, 1))\n    x = tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255)(inputs)\n    x = tf.keras.layers.Conv2D(32, 3, activation='relu')(x)\n    x = tf.keras.layers.MaxPooling2D()(x)\n    x = tf.keras.layers.Conv2D(64, 3, activation='relu')(x)\n    x = tf.keras.layers.MaxPooling2D()(x)\n    x = tf.keras.layers.Flatten()(x)\n    x = tf.keras.layers.Dense(128, activation='relu')(x)\n    outputs = tf.keras.layers.Dense(num_classes, activation=activation)(x)\n    \n    model = tf.keras.Model(inputs=inputs, outputs=outputs)\n    model.compile(optimizer='adam',loss=loss,metrics=['accuracy'])\n    \n    return model","4571240d":"from sklearn.model_selection import train_test_split\n\nX_gender_train, X_gender_test, y_gender_train, y_gender_test = train_test_split(X, y_gender, train_size=0.7)\nX_ethnicity_train, X_ethnicity_test, y_ethnicity_train, y_ethnicity_test = train_test_split(X, y_ethnicity, train_size=0.7)\nX_age_train, X_age_test, y_age_train, y_age_test = train_test_split(X, y_age, train_size=0.7)","a80c1501":"**Currently under development**"}}