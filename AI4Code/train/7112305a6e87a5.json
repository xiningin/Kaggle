{"cell_type":{"11f6143f":"code","448c9898":"code","2437f936":"code","c6a8c0c9":"code","5ee25fe9":"code","3c002642":"code","6adf9622":"code","65237d07":"code","eff137be":"code","bfc5d151":"code","1d64d802":"code","12261bfc":"code","826608d6":"code","16cee0fb":"code","d8eda87a":"code","6f6bdb9e":"code","f0c10199":"code","cb32bdbe":"code","1275a7fd":"markdown","7059bad4":"markdown","cc6f6202":"markdown","8aa4f1f0":"markdown","c20f2a42":"markdown","7f0d4b48":"markdown","6c548e8e":"markdown","d166aa95":"markdown","979fe720":"markdown","7a59e823":"markdown","32b2e760":"markdown","e6634132":"markdown","3ac9132b":"markdown"},"source":{"11f6143f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","448c9898":"data = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")\nprint(data.shape)\ndata.drop(['Unnamed: 32',\"id\"], axis=1, inplace=True)\nprint(data.shape)\n","2437f936":"data.diagnosis = [1 if each == \"M\" else 0 for each in data.diagnosis]\ny = data.diagnosis.values\n","c6a8c0c9":"x_data = data.drop(['diagnosis'], axis=1)\nprint(x_data.shape)","5ee25fe9":"#normalization\nx = (x_data -np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\ny = y.reshape(y.shape[0],1)\nprint(\"x shape: \",x.shape)\nprint(\"y shape: \",y.shape)","3c002642":"\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.15, random_state=42)\n\n","6adf9622":"x_train = X_train.T\nx_test = X_test.T\ny_train = Y_train.T\ny_test = Y_test.T\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","65237d07":"def weights_and_bias(x_train, y_train):\n    parameters = {\"weight1\": np.random.randn(3,x_train.shape[0]) * 0.1,\n                  \"bias1\": np.zeros((3,1)),\n                  \"weight2\": np.random.randn(y_train.shape[0],3) * 0.1,\n                  \"bias2\": np.zeros((y_train.shape[0],1))}\n    return parameters","eff137be":"\ndef forward_propagation(x_train, parameters):\n\n    Z1 = np.dot(parameters[\"weight1\"],x_train) +parameters[\"bias1\"]\n    A1 = np.tanh(Z1)\n    Z2 = np.dot(parameters[\"weight2\"],A1) + parameters[\"bias2\"]\n    A2 = 1\/(1+np.exp(-Z2))\n\n    cache = {\"Z1\": Z1,\n             \"A1\": A1,\n             \"Z2\": Z2,\n             \"A2\": A2}\n    \n    return A2, cache\n","bfc5d151":"# Compute cost\ndef compute_cost(A2, Y, parameters):\n    logprobs = np.multiply(np.log(A2),Y)\n    cost = -np.sum(logprobs)\/Y.shape[1]\n    return cost\n","1d64d802":"# Backward Propagation\ndef backward_propagation(parameters, cache, X, Y):\n\n    dZ2 = cache[\"A2\"]-Y\n    dW2 = np.dot(dZ2,cache[\"A1\"].T)\/X.shape[1]\n    db2 = np.sum(dZ2,axis =1,keepdims=True)\/X.shape[1]\n    dZ1 = np.dot(parameters[\"weight2\"].T,dZ2)*(1 - np.power(cache[\"A1\"], 2))\n    dW1 = np.dot(dZ1,X.T)\/X.shape[1]\n    db1 = np.sum(dZ1,axis =1,keepdims=True)\/X.shape[1]\n    grads = {\"dweight1\": dW1,\n             \"dbias1\": db1,\n             \"dweight2\": dW2,\n             \"dbias2\": db2}\n    return grads","12261bfc":"# update parameters\ndef update_parameters(parameters, grads, learning_rate = 0.01):\n    parameters = {\"weight1\": parameters[\"weight1\"]-learning_rate*grads[\"dweight1\"],\n                  \"bias1\": parameters[\"bias1\"]-learning_rate*grads[\"dbias1\"],\n                  \"weight2\": parameters[\"weight2\"]-learning_rate*grads[\"dweight2\"],\n                  \"bias2\": parameters[\"bias2\"]-learning_rate*grads[\"dbias2\"]}\n    \n    return parameters","826608d6":"# prediction\ndef predict(parameters,x_test):\n    # x_test is a input for forward propagation\n    A2, cache = forward_propagation(x_test,parameters)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(A2.shape[1]):\n        if A2[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","16cee0fb":"def artificial_neural_network(x_train, y_train,x_test,y_test, num_iterations):\n    cost_list = []\n    index_list = []\n    #initialize parameters and layer sizes\n    parameters = weights_and_bias(x_train, y_train)\n\n    for i in range(0, num_iterations):\n         # forward propagation\n        A2, cache = forward_propagation(x_train,parameters)\n        # compute cost\n        cost = compute_cost(A2, y_train, parameters)\n         # backward propagation\n        grads = backward_propagation(parameters, cache, x_train, y_train)\n         # update parameters\n        parameters = update_parameters(parameters, grads)\n        \n        if i % 100 == 0:\n            cost_list.append(cost)\n            index_list.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n            \n    plt.plot(index_list,cost_list)\n    plt.xticks(index_list,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    # predict\n    y_prediction_test = predict(parameters,x_test)\n    y_prediction_train = predict(parameters,x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    return parameters\n\n","d8eda87a":"parameters = artificial_neural_network(x_train, y_train,x_test,y_test, num_iterations=5000)","6f6bdb9e":"x_train, x_test, y_train, y_test = x_train.T, x_test.T, y_train.T, y_test.T\n","f0c10199":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom keras.models import Sequential # initialize neural network library\nfrom keras.layers import Dense, Dropout# build our layers library\ndef build_classifier():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1]))\n    classifier.add(Dropout(0.1))\n    classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dropout(0.1))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn = build_classifier, epochs = 100)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 3)\nmean = accuracies.mean()\nvariance = accuracies.std()\nprint(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","cb32bdbe":"print(\"First Accuracy : \", accuracies[0])\nprint(\"Second Accuracy : \", accuracies[0])\nprint(\"Third Accuracy : \", accuracies[0])","1275a7fd":"<a id=\"12\"><\/a> <br>\n## Artificial Neural Network with Keras","7059bad4":"<a id=\"11\"><\/a> <br>\n## Create Model","cc6f6202":"<a id=\"5\"><\/a> <br>\n## Parameters","8aa4f1f0":"<a id=\"7\"><\/a> <br>\n## Loss Function and Cost Function","c20f2a42":"<a id=\"6\"><\/a> <br>\n## Forward Propagation","7f0d4b48":"<a id=\"1\"><\/a> <br>\n## Introduction\n\n\n### What is Deep learning?\n\nDeep Learning is a subfield of machine learning concerned with algorithms inspired by the structure and function of the brain called artificial neural networks. Deep learning is a machine learning technique that teaches computers to do what comes naturally to humans: learn by example. Deep learning is a key technology behind driverless cars, enabling them to recognize a stop sign, or to distinguish a pedestrian from a lamppost. It is the key to voice control in consumer devices like phones, tablets, TVs, and hands-free speakers. Deep learning is getting lots of attention lately and for good reason. It\u2019s achieving results that were not possible before.\n\n\n","6c548e8e":"\n<font color='red'>\n<br>Content:\n    \n* [Introduction](#1)\n* [Dataset EDA](#2)\n* [Artificial Neural Network](#3)\n    * [Train Test Split](#4)\n    * [Parameters](#5)\n    * [Forward Propagation](#6)\n    * [Loss Function and Cost Function](#7)\n    * [Backward Propagation](#8)\n    * [Update Parameters](#9)\n    * [Prediction](#10)\n    * [Create Model](#11)\n    * [Artificial Neural Network with Keras](#12)\n    \n    ","d166aa95":"<a id=\"9\"><\/a> <br>\n## Update Parameters","979fe720":"<a id=\"2\"><\/a> <br>\n## Dataset EDA","7a59e823":"<a id=\"8\"><\/a> <br>\n## Backward Propagation","32b2e760":"<a id=\"10\"><\/a> <br>\n## Prediction ","e6634132":"<a id=\"4\"><\/a> <br>\n## Train Test Split","3ac9132b":"<a id=\"3\"><\/a> <br>\n## Artificial Neural Networks\n\n### What are artificial neural networks\n\nAn artificial neuron network (ANN) is a computational model based on the structure and functions of biological neural networks. Information that flows through the network affects the structure of the ANN because a neural network changes - or learns, in a sense - based on that input and output. ANNs are considered nonlinear statistical data modeling tools where the complex relationships between inputs and outputs are modeled or patterns are found. ANN is also known as a neural network.\n\n\nA single neuron is known as a perceptron. It consists of a layer of inputs(corresponds to columns of a dataframe). Each input has a weight which controls the magnitude of an input. The summation of the products of these input values and weights is fed to the activation function. Activation functions are really important for a Artificial Neural Network to learn and make sense of something really complicated and Non-linear complex functional mappings between the inputs and response variable.\n"}}