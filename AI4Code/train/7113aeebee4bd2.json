{"cell_type":{"28d6fb4d":"code","349ee264":"code","f4111e33":"code","827b8275":"code","2469b45a":"code","04fbc6d8":"code","7074c1b4":"code","f6b0f0b3":"code","39733250":"code","7b50c6d8":"code","d583954f":"code","1f115f60":"code","98b6dd41":"code","85dd61e4":"code","b3d3af45":"code","e0e50bd8":"code","fcd48731":"code","1c43737e":"code","14f7425f":"markdown"},"source":{"28d6fb4d":"from __future__ import unicode_literals, print_function\nfrom itertools import chain\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nfrom numpy import random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom gensim import parsing\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom tqdm import tqdm\ntqdm.pandas(desc=\"progress-bar\")\nfrom gensim.models import Doc2Vec\nfrom sklearn import utils\nimport gensim\nfrom gensim.models.doc2vec import TaggedDocument\nfrom sklearn.svm import LinearSVC\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import confusion_matrix\nimport itertools","349ee264":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f4111e33":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.shape","827b8275":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test['Sex'].replace(['female','male'],[0,1],inplace=True)\ndf_tests = df_test[[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]]\ndf_tests.head()","2469b45a":"df_train.head()","04fbc6d8":"df_train['Sex'].replace(['female','male'],[0,1],inplace=True)","7074c1b4":"df_trains = df_train[[\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Survived\"]]","f6b0f0b3":"df_trains","39733250":"df_trains = pd.get_dummies(df_trains)","7b50c6d8":"missing_val_count_by_column = (df_trains.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","d583954f":"# from sklearn.impute import SimpleImputer\n# my_imputer = SimpleImputer()\n# df_trains = my_imputer.fit_transform(df_trains)","1f115f60":"df_trains.head()","98b6dd41":"print('Proportion of the classes in the data:')\nprint(df_trains['Survived'].value_counts() \/ len(df_trains))","85dd61e4":"plt.figure(figsize=(10,4))\ndf_trains['Survived'].value_counts().sort_index().plot.bar(color=['blue', 'red'])","b3d3af45":"def plot_confusion_matrix(cm, classes,\n                          normalize=True,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","e0e50bd8":"my_categories=['0','1']\n\n# #Seperate data into feature and results\nX, y = df_trains.loc[:, df_trains.columns != 'Survived'], df_trains['Survived']\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","fcd48731":"# instantiate the model (using the default parameters)\nlogreg = LogisticRegression()\n\nlogreg.fit(X,y)\n\n#\ny_pred=logreg.predict(df_tests)\n\noutput = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': y_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n# lrm1 = accuracy_score(y_pred, y_test)\n\n# print('accuracy %s' % lrm1)\n# print(classification_report(y_test, y_pred,target_names=my_categories))\n\n# # Compute confusion matrix\n# cnf_matrix = confusion_matrix(y_test, y_pred,labels=my_categories)\n# np.set_printoptions(precision=2)\n\n# # Plot non-normalized confusion matrix\n# plt.figure()\n# plot_confusion_matrix(cnf_matrix, classes=['Death(0)','Alive(1)']\n#                       ,normalize= True,  title='Confusion matrix')","1c43737e":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0)\nmodel.fit(X_train, y_train)\npredictions = model.predict(df_tests)\n\noutput = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n# rfc = accuracy_score(predictions, y_test)\n# print('accuracy %s' % rfc)\n# print(classification_report(y_test, predictions,target_names=my_categories))","14f7425f":"# Confusion Matrix"}}