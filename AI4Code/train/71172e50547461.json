{"cell_type":{"0989fbbb":"code","4a73d93f":"code","b61c8495":"code","e0e167e0":"code","41086e78":"code","4f3d25d1":"code","531e4ab8":"code","43bf89e6":"code","d936a742":"code","7dc97551":"code","4e82d26a":"code","04c87ff3":"code","575686db":"code","c4bf3f02":"code","7b3a9b52":"code","ca12646b":"code","4e53b900":"code","a37db6a2":"code","ef9becf4":"code","a17c8bd5":"code","24fde49e":"code","275c97f6":"code","5586d7d1":"code","c0b65ebc":"code","21f0a9d3":"code","259cc8c7":"code","b236857e":"code","d5bbe4e5":"code","427109f4":"code","1e5c0f12":"code","d56aa5cd":"code","45dba6d1":"code","34986a5f":"code","85c21278":"code","c9122f05":"code","3d5171fb":"code","8eb19b41":"markdown","5503eb5d":"markdown","8483ad3c":"markdown","9ae80ba2":"markdown","5576235d":"markdown","cfed316d":"markdown","37f6848a":"markdown","219c1bba":"markdown","e84c7deb":"markdown","622fef99":"markdown","db842177":"markdown","0eb59868":"markdown","2a9aa694":"markdown","96be007d":"markdown","0e003cde":"markdown","bc4c04a6":"markdown","21d1cda1":"markdown"},"source":{"0989fbbb":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\n\nfrom sklearn.ensemble import RandomForestRegressor, VotingRegressor, StackingRegressor, StackingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.cluster import KMeans\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, RepeatedKFold, cross_val_score\nfrom sklearn.metrics import mean_squared_log_error, make_scorer, mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.feature_selection import RFE, mutual_info_regression, RFECV\n\nimport warnings\nwarnings.simplefilter(action='ignore')","4a73d93f":"df = pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/train.csv')\ndf.columns = [i.split(\"(\")[0].strip().title().replace(\" \",\"_\") for i in [*df.columns]]\ndf.head()","b61c8495":"df.info()","e0e167e0":"data = df.copy()\ndata['Date'] = pd.to_datetime(data['Date'])\ndata['Month'] = data.Date.dt.month\ndata['Dayofweek'] = data.Date.dt.dayofweek\ndata['Year'] = data.Date.dt.year\ndata['workend'] = (data['Dayofweek'] == 5) | (data['Dayofweek']==6)\n\ndata.set_index('Date')\n\ndata['Functioning_Day'] = data['Functioning_Day'].map({'No': 0, 'Yes': 1})\ndata['Holiday'] = data['Holiday'].map({'No Holiday': 0, 'Holiday': 1})\ndata['Year'] = data['Year'].map({2017:0 , 2018: 1})\ndata['Seasons'] = data['Seasons'].map({'Winter': 0, 'Spring': 1, 'Autumn': 2, 'Summer': 3})\n\nnum_cols = ['Temperature', 'Humidity', 'Wind_Speed', 'Dew_Point_Temperature', 'Rainfall', 'Snowfall', \n            'Solar_Radiation', 'Visibility']\ncat_cols = ['Seasons', 'Holiday', 'Functioning_Day', 'Hour', 'Month', 'Dayofweek', 'Year', 'workend']","41086e78":"def plot_subplots(subplots, plot, n=3):\n    m = len(subplots)\n    height = (m\/\/n + (m%n != 0)) * 4\n    plt.figure(figsize=(14, height))\n    for i, c in enumerate(subplots):\n        plt.subplot(m\/\/n + min(1, m%n), n, i+1)\n        plot(c)\n        plt.tight_layout(pad=2.0)\n\nplot_subplots(num_cols + ['Y'], lambda c: sns.histplot(data=data, x=c))","4f3d25d1":"def plot(c):\n    plt.title(c)\n    data[c].value_counts().sort_index().plot.bar()\n    \nplot_subplots(cat_cols, lambda c: plot(c))","531e4ab8":"def make_mi_scores(X, y, discrete_features):\n    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")\n\nmi_scores = make_mi_scores(data.drop(columns=['Id', 'Date', 'Y']), data.Y, discrete_features=False)\nplot_mi_scores(mi_scores)","43bf89e6":"sns.heatmap(data[num_cols + ['Y']].corr(), annot=True, cmap=\"YlGnBu\")","d936a742":"plot_subplots(num_cols, lambda c: sns.scatterplot(data=data, x=c, alpha=0.1, y='Y'))","7dc97551":"plt.figure(figsize=(20,8))\ndata['Temperature'].plot()\nplt.show()\nsns.lineplot('Month', 'Temperature', hue='Seasons', data=data)","4e82d26a":"sns.lineplot('Temperature', 'Y', data=data)","04c87ff3":"sns.boxplot(data['Temperature'].apply(lambda i : i >= 15 and i <=35), data['Y'])\nplt.show()\nsns.histplot(data['Temperature'].apply(lambda i : i >= 15 and i <=35))","575686db":"sns.lineplot(data.groupby(data.index)['Humidity'].mean(), data.groupby(data.index)['Y'].sum())","c4bf3f02":"sns.boxplot(data['Humidity'].apply(lambda i : i >= 20 and i <=80), data['Y'])\nplt.show()\nsns.histplot(data['Humidity'].apply(lambda i : i >= 20 and i <=80))","7b3a9b52":"sns.lineplot(data.groupby(data.index)['Wind_Speed'].mean(), data.groupby(data.index)['Y'].sum())","ca12646b":"sns.boxplot(data['Wind_Speed'].apply(lambda i : i >= 1.5 and i <=3.5), data['Y'])\nplt.show()\nsns.histplot(data['Wind_Speed'].apply(lambda i : i >= 1.5 and i <=3.5))","4e53b900":"sns.boxplot(data['Rainfall'].apply(lambda i : i == 0), data['Y'])\nplt.show()\nsns.histplot(data['Rainfall'].apply(lambda i : i == 0))","a37db6a2":"sns.boxplot(data['Snowfall'].apply(lambda i : i == 0), data['Y'])\nplt.show()\nsns.histplot(data['Snowfall'].apply(lambda i : i == 0))","ef9becf4":"def weather_is_good(df): \n    X = df.copy()\n    X['Not_rain'] = X['Rainfall'].apply(lambda i : i == 0).astype('int')\n    X['Not_snow'] = X['Snowfall'].apply(lambda i : i == 0).astype('int')\n    X['Good_Temp'] = X['Temperature'].apply(lambda i : i >= 15 and i <=35).astype('int')\n    X['Goop_Humid'] = X['Humidity'].apply(lambda i : i >= 20 and i <=80).astype('int')\n    X['Good_Wind'] = X['Wind_Speed'].apply(lambda i : i >= 1.5 and i <=3.5).astype('int')\n    return X['Not_rain'] + X['Not_snow'] + X['Good_Temp'] + X['Goop_Humid'] + X['Good_Wind']\n\ndata['Good_weather'] = weather_is_good(data)\n\nsns.boxplot('Good_weather', 'Y', data=data)\nplt.show()\ndata['Good_weather'].value_counts()","a17c8bd5":"plot_subplots(cat_cols, lambda c : sns.boxplot(x=c, y='Y', data=data))","24fde49e":"def rush_hours(i):\n    if i in [23,0,1,2,3,4,5,6, 7]:\n        return 0\n    elif i in [9,10,11,12,13,14,15,16]:\n        return 1\n    else:\n        return 2\n\ndata['Rush_hours'] = data['Hour'].apply(rush_hours)\nsns.boxplot('Rush_hours', 'Y', data=data)","275c97f6":"sns.pointplot('Month', 'Y', hue='Year', data=data)","5586d7d1":"plt.figure(figsize=(20,8))\nsns.pointplot('Hour', 'Y', hue='Dayofweek', data=data, ci=None)","c0b65ebc":"fig,axes = plt.subplots(2,2, figsize=(20, 10))\nfig.suptitle('Target Distribution', fontsize=16, y=0.95)\nsns.distplot(data[\"Y\"],ax=axes[0][0])\nsns.distplot(np.log1p(data[\"Y\"]),ax=axes[0][1])\nsns.boxplot(data['Y'], ax=axes[1][0])\nsns.boxplot(np.log1p(data[\"Y\"]), ax=axes[1][1])","21f0a9d3":"def encode(df):\n    df['Seasons'] = df['Seasons'].map({'Winter': 0, 'Spring': 1, 'Autumn': 2, 'Summer': 3})\n    df['Functioning_Day'] = df['Functioning_Day'].map({'No': 0, 'Yes': 1})\n    df['Holiday'] = df['Holiday'].map({'No Holiday': 0, 'Holiday': 1})\n    df['Year'] = df['Year'].map({2017:0 , 2018: 1})\n    \n    return df\n\ndef add_time_features(df):\n    df['Date'] = pd.to_datetime(df['Date'])\n    df['Month'] = df.Date.dt.month\n    df['Dayofweek'] = df.Date.dt.dayofweek\n    df['Year'] = df.Date.dt.year\n    df['Day'] = df.Date.dt.day\n#     df['Rush_hours'] = df['Hour'].apply(rush_hours)\n#     df['Good_weather'] = weather_is_good(df)\n#     min_temp = df.groupby('Date')['Temperature'].min()\n#     df = df.merge(min_temp, how='left', suffixes=('','_min'), on='Date')\n#     max_temp = df.groupby('Date')['Temperature'].max()\n#     df = df.merge(max_temp, how='left', suffixes=('','_max'), on='Date')\n    return df\n\ndef lag_features(df):\n    for feature in ['Temperature', 'Humidity', 'Solar_Radiation', 'Rainfall', 'Wind_Speed', 'Visibility']:\n        for hours in [1,2,3,-1]:\n            i = str(hours)\n            df[feature + '_lag_' + i] = df[feature].shift(-hours)\n            df[feature + '_lag_' + i] = np.where(df[feature + '_lag_' + i].isnull(),\n                                                 df[feature],\n                                                 df[feature + '_lag_' + i])\n    return df\n\ndef select_features(df):\n    return df.drop(['Id', 'Date', 'Snowfall'], axis=1)\n    \ndef pipeline(df):\n    df = add_time_features(df)\n    df = encode(df)\n    df = lag_features(df)\n    df = select_features(df)\n    return df","259cc8c7":"X = df.drop('Y',axis=1)\ny = df['Y']\n\nX['Date'] = pd.to_datetime(X['Date'])\nX['Day'] = X.Date.dt.day\n\nfuture_days = [17,18,19,20]\nX_train = X[~X.Date.dt.day.isin(future_days)]\ny_train = y[~X.Date.dt.day.isin(future_days)]\nX_val = X[X.Date.dt.day.isin(future_days)]\ny_val = y[X.Date.dt.day.isin(future_days)]\n\nX = X.drop(columns=['Day'])\nX_train = X_train.drop(columns=['Day'])\nX_val = X_val.drop(columns=['Day'])\n\n\nX = pipeline(X)\n\nX_train = pipeline(X_train)\nX_val = pipeline(X_val)","b236857e":"mi_scores = make_mi_scores(X, y, discrete_features=False)\nplt.figure(figsize=(10,10))\nplot_mi_scores(mi_scores)","d5bbe4e5":"def rmsle(y_true, y_pred):\n    return np.sqrt(mean_squared_log_error(y_true, (np.maximum(y_pred, 0))))","427109f4":"cat = CatBoostRegressor(n_estimators= 450, max_depth= 5, learning_rate= 0.1 , verbose=0)\n\nrfe_cat = RFE(cat, n_features_to_select=27)\nmodel = rfe_cat.fit(X_train, np.log1p(y_train))\n\nprint(\"Train Score : \", rmsle(y_train, np.expm1(model.predict(X_train))))\npred = np.expm1(np.maximum(model.predict(X_val), 0))\nprint(\"Validation Score : \", rmsle(y_val, pred))","1e5c0f12":"xgb = XGBRegressor(n_estimators= 200, max_depth= 5, learning_rate= 0.1)\n\nrfe_xgb = RFE(xgb, n_features_to_select=25)\nmodel = rfe_xgb.fit(X_train, np.log1p(y_train))\n\nprint(\"Train Score : \", rmsle(y_train, np.expm1(model.predict(X_train))))\npred = np.expm1(np.maximum(model.predict(X_val), 0))\nprint(\"Validation Score : \", rmsle(y_val, pred))","d56aa5cd":"model = VotingRegressor([('xgb',rfe_xgb), ('cat', rfe_cat)], weights=[0.2, 0.8])\n\nmodel.fit(X_train,np.log1p(y_train))\n\nprint(\"Train Score : \", rmsle(y_train, np.expm1(model.predict(X_train))))\npred = np.expm1(np.maximum(model.predict(X_val), 0))\nprint(\"Validation Score : \", rmsle(y_val, pred))","45dba6d1":"print(\"MAE Score : \", mean_absolute_error(y_val, pred))\nprint(\"RMSE Score : \", np.sqrt(mean_squared_error(y_val, pred)))\nprint(\"R2 Score : \", r2_score(y_val, pred))","34986a5f":"f, axs = plt.subplots(2,1, figsize=(10, 10))\naxs[0].axvline(color='r')\naxs[1].axvline(color='r')\nsns.distplot(y_val - pred, bins=30, ax=axs[0])\nsns.boxplot(y_val - pred, ax=axs[1])","85c21278":"plt.scatter(y_val, pred, alpha=0.2)\nplt.plot(y_val, y_val, color='r')\nplt.show()","c9122f05":"model.fit(X, np.log1p(y))\nprint(\"Final Score : \", rmsle(y, np.expm1(model.predict(X))))","3d5171fb":"df_test = pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/test.csv')\ndf_test.columns = [i.split(\"(\")[0].strip().title().replace(\" \",\"_\") for i in [*df_test.columns]]\n\npred = model.predict(pipeline(df_test))\n\nsubmission = pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/sample_submission.csv')\nsubmission['y'] = np.maximum(np.expm1(pred),0)\nsubmission.to_csv('my_submission.csv', index=False)","8eb19b41":"## Target","5503eb5d":"# Submission File Generation","8483ad3c":"## Value Counts","9ae80ba2":"### Snowfall","5576235d":"### Wind Speed","cfed316d":"### Temperature","37f6848a":"# Evaluation","219c1bba":"# Train All Data","e84c7deb":"# Feature engineering ","622fef99":"# EDA","db842177":"## Numerical features","0eb59868":"# Model Building","2a9aa694":"# Import Data","96be007d":"## Mutual Information","0e003cde":"### Humidity","bc4c04a6":"## Categorical features","21d1cda1":"### Rainfall"}}