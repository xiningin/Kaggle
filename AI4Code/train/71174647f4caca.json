{"cell_type":{"f2cc00b4":"code","09ab3553":"code","67f2b7f5":"code","c302611c":"code","0778cdb4":"code","04934792":"code","9068e215":"code","d35ab300":"code","f9fd7c62":"code","2236e440":"code","4cbf1374":"code","60bd35da":"code","2be31676":"code","4a504e64":"code","cdd49216":"code","85e24e5d":"code","78439fa1":"code","36569726":"code","53fb4000":"code","dd2145d3":"code","81cd29bc":"code","18505ebf":"code","5d22b372":"code","f97172f0":"code","cb61b015":"code","2977bc9f":"code","d15fa5a3":"code","d880ab8f":"code","3e88c828":"code","630cfdcb":"code","44257df2":"markdown","6f3c19f7":"markdown","62b7c1bb":"markdown","0e9b2857":"markdown","b913938d":"markdown","a866e102":"markdown","1a6883b2":"markdown","8476b552":"markdown","99b78067":"markdown","c2b16624":"markdown","cfb465ba":"markdown","7ff301c8":"markdown"},"source":{"f2cc00b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","09ab3553":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import TimeSeriesSplit","67f2b7f5":"stock = pd.read_csv('\/kaggle\/input\/if4074-praktikum-2-rnn\/train_IBM.csv')\nsampleTrain = pd.read_csv('\/kaggle\/input\/if4074-praktikum-2-rnn\/sample_submission.csv')\n\nsampleTrain.head(10)","c302611c":"print('Initial stock shape:', stock.shape)\n\nstock.dropna(inplace=True, subset=['Close'])\n\nprint('No missing value stock shape:', stock.shape)","0778cdb4":"allClose = []\n\nfor i in range(0, len(stock)):\n    allClose.append(stock.iloc[i, 4])\n\n# for i in range(0, len(sampleTrain)):\n#     allClose.append(sampleTrain.iloc[i, 1])","04934792":"seq_len = 7\n\ndate = []\nfeatures = []\nlabel = []\n\nfor i in range(seq_len, len(allClose)-1):\n#     temp = []\n#     for y in range(seq_len):\n#         temp.append([stock.iloc[i+y, 4]])\n#     X_train.append(temp)\n#date.append(allClose[i])\n    features.append(allClose[i-seq_len : i])\n    label.append(allClose[i])\n\nfeatures = np.array(features)\nlabel = np.array(label)\n\nprint('features shape:', features.shape)\nprint('label shape:', label.shape)\n#print('features[0]:\\n', features[0])\n#print('label[0]:\\n', label[0])","9068e215":"features = np.expand_dims(features, axis=2)\nprint(features.shape)","d35ab300":"#print(date[2679:2689])\n#print(label[2679:2689])","f9fd7c62":"len(features)","2236e440":"tscv = TimeSeriesSplit()\n\nfor train_index, test_index in tscv.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = label[train_index], label[test_index]\nprint('X_train shape, y_train shape:', X_train.shape, y_train.shape)\nprint('X_test shape, y_test shape:', X_test.shape, y_test.shape)","4cbf1374":"model = keras.Sequential()\n\n# Add RNN layer with 50 internal units.\nmodel.add(layers.SimpleRNN(50))\n\n# Add a Dense layer with 1 units.\nmodel.add(layers.Dense(1))","60bd35da":"# model.compile(\n#     loss=keras.losses.MSE(from_logits,\n#     optimizer=\"sgd\",\n#     metrics=[\"accuracy\"])\n# )\nmodel.compile(loss='mean_squared_error', optimizer='adam',metrics = ['mse', 'mae'])","2be31676":"history = model.fit(\n    X_train, y_train, batch_size=32, epochs=192, validation_split=0.1\n)","4a504e64":"model.summary()","cdd49216":"import matplotlib\nimport matplotlib.pyplot as plt\n\ndef model_loss(history):\n    plt.figure(figsize=(8,4))\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Test Loss')\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epochs')\n    plt.legend(loc='upper right')\n    plt.show();   \n    \nmodel_loss(history)","85e24e5d":"pred = model.predict(X_test)\npredTransposed = np.transpose(pred)","78439fa1":"%matplotlib inline \n\nplt.figure(figsize=(16,16))\nplt.plot(predTransposed[0], color='red', label='Prediction')\nplt.plot(y_test, color='blue', label='Ground Truth')\nplt.show()","36569726":"prev_seq = seq_len - 1\nfirst_data = np.append(X_test[-1::], y_test[len(y_test)-1]) # Using data from test set\nfirst_data = np.delete(first_data, 0)\nfirst_data","53fb4000":"first_data = np.expand_dims(first_data, axis=1)\nfirst_data = np.array([first_data])\nprint(first_data.shape)\nprint(first_data)","dd2145d3":"result = np.array([])\nfor i in range(321): # predict for 321 next close\n    temp_result = model.predict(first_data)\n    result = np.append(result, temp_result)\n    first_data = np.append(first_data[-1::], temp_result)\n    first_data = np.delete(first_data, 0)\n    first_data = np.expand_dims(first_data, axis=1)\n    first_data = np.array([first_data])\n\nresult.shape","81cd29bc":"outputData = {'Date': sampleTrain['Date'], 'Close': result}\noutputDF = pd.DataFrame(data=outputData)\noutputDF.head()","18505ebf":"outputDF.to_csv('tes.csv', index=False)\n# print(outputDF.to_string())","5d22b372":"# firstCompare = []\n# secondCompare = []\n\n# for n in range(0, len(sampleTrain)):\n#     firstColumn = allClose[len(allClose) - len(sampleTrain) + n]\n#     secondColumn = predTransposed[0][len(label) - len(sampleTrain) + n]\n#     firstCompare.append(str(\"%.3f\" % firstColumn))\n#     secondCompare.append(str(\"%.3f\" % secondColumn))\n    \n# outputData = {'Date': sampleTrain['Date'], 'Real': firstCompare, 'Prediction': secondCompare}\n# outputDF = pd.DataFrame(data=outputData)\n\n# #outputDF.to_csv('tes.csv', index=False)\n# print(outputDF.to_string())","f97172f0":"model2 = keras.Sequential()\n\n# Use LSTM with 50 hidden units\nmodel2.add(layers.LSTM(50))\n\n# Add a Dense layer with 1 units.\nmodel2.add(layers.Dense(1))","cb61b015":"model2.compile(loss='mean_squared_error', optimizer='adam',metrics = ['mse', 'mae'])","2977bc9f":"history = model2.fit(\n    X_train, y_train, batch_size=32, epochs=192, validation_split=0.1\n)","d15fa5a3":"import matplotlib\nimport matplotlib.pyplot as plt\n\ndef model_loss(history):\n    plt.figure(figsize=(8,4))\n    plt.plot(history.history['loss'], label='Train Loss')\n    plt.plot(history.history['val_loss'], label='Test Loss')\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epochs')\n    plt.legend(loc='upper right')\n    plt.show();   \n    \nmodel_loss(history)","d880ab8f":"pred = model2.predict(X_test)\npredTransposed = np.transpose(pred)","3e88c828":"%matplotlib inline \n\nplt.figure(figsize=(16,16))\nplt.plot(predTransposed[0], color='red', label='Prediction')\nplt.plot(y_test, color='blue', label='Ground Truth')\nplt.show()","630cfdcb":"model2.summary()","44257df2":"# Data preprocessing","6f3c19f7":"### Convert dataset","62b7c1bb":"### Handle Missing Value","0e9b2857":"## Train test split","b913938d":"Model RNN diubah menjadi LSTM karena LSTM memiliki struktur yang memungkinkan sebuah node LSTM dapat mengambil hidden feature dari beberapa sequence  sebelumnya di bandingkan dengan RNN biasa yg hanya mengambil hidden feature dari 1 sequence sebelumnya. Sehingga diduga pemilihan modifikasi ini dapat meningkatkan performa model yang dibangun.","a866e102":"## Analisis","1a6883b2":"## Model 2 Evaluation","8476b552":"## Modifikasi Model","99b78067":"## Future Forecasting","c2b16624":"## Model evaluation","cfb465ba":"## Visualize prediction","7ff301c8":"## Visualize model 2 prediction"}}