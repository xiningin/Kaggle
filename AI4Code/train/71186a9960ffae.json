{"cell_type":{"af6732ef":"code","c1bb87d2":"code","7d27f56d":"code","23d11f50":"code","a10bd047":"code","318de55e":"code","96c01d38":"code","0ceef6db":"code","cc91cc3b":"code","0e200d0f":"code","d73f959c":"code","2c8b4345":"code","9a0846a4":"code","3992122d":"code","23ba0cd7":"code","eeedcc36":"code","ad5561fc":"code","5218a955":"code","f20555dd":"code","3fab4426":"code","b6e156a0":"code","b688da7f":"markdown","64473342":"markdown","09789e3e":"markdown","acf7a1f5":"markdown","2c7798ed":"markdown","1e5bf620":"markdown","35f27c72":"markdown","664f37f8":"markdown","d899ea1a":"markdown","e09fb9d2":"markdown","8074d432":"markdown","d2c4f6fb":"markdown","2cbede31":"markdown","8a3476b5":"markdown","39e472bd":"markdown","53fd19ce":"markdown","3cff9277":"markdown","9d1dca2b":"markdown","b9740131":"markdown","9a88470e":"markdown","8e970c54":"markdown","cffca6c5":"markdown","8077a7b9":"markdown","def9e161":"markdown","f3783d25":"markdown","eb5e07cc":"markdown","c09c08c0":"markdown","ceef7343":"markdown","229a2ebd":"markdown","fe5d5ce9":"markdown","e4bccff1":"markdown","3c4be611":"markdown","fcf80f8e":"markdown"},"source":{"af6732ef":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom IPython.core.display import display, HTML, Javascript\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","c1bb87d2":"html_contents =\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    <style>\n    .h2{\n    color: white;\n    }\n    \n    .toc h2{\n        color: white;\n        background: #3f4d63;\n        font-weight: 500;\n        font-family: Robot;\n        font-size: 22px;\n        padding: 6px 12px;\n        margin-bottom: 2px;\n        text-align: center;\n    }\n    \n    .toc h3{\n        color: white;\n        background: #3f4d63;\n        font-weight: 300;\n        font-family: Robot;\n        font-size: 20px;\n        padding: 6px 12px;\n        margin-bottom: 2px;\n        text-align: center;\n    }\n    \n    .toc ol li{\n        list-style:none;\n        line-height:normal;\n        }\n     \n    .toc li{\n        background: #235f83;\n        color: white;\n        font-weight: 500;\n        font-family: Helvetica;\n        font-size: 17px;\n        margin-bottom: 2px;\n        padding: 6px 12px;\n    }\n\n    .toc ol ol li{\n        background: #fff;\n        color: #4d4d4d;\n        font-weight: 400;\n        font-size: 15px;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        margin-top: 0px;\n        margin-bottom: 0px;\n        padding: 3px 12px;\n    }  \n    <\/style>\n    <\/head>\n    <body>\n        <div class=\"toc\">\n        \n        <ol> \n        <h2> Table of Contents <\/h2>\n        <li>1. Data <\/li> \n        <li>2. Data Description<\/li>\n        <li>3. Data Cleaning<\/li>\n        <li>4. Data Visualization<\/li>\n        <ol> \n            <li>4.1 Pie Chart <\/li>\n            <li>4.2 Donught Chart <\/li>\n            <li>4.2 Histogram Chart <\/li>\n            <li>4.3 Bar Chart <\/li>\n                <ol>\n                    <li>4.3.1 Normal Bar Chart <\/li>\n                    <li>4.3.2 Stacked Bar Chart <\/li>\n                    <li>4.3.3 Group Bar Chart <\/li>\n                    <li>4.3.4 Bidirectional Bar Chart <\/li>\n                 <\/ol> \n            <\/li>\n            <li>4.4 Funnel Chart <\/li>\n            <li>4.5 Bubble Chart <\/li>\n            <li>4.6 Line Chart <\/li>\n            <li>4.7 TreeMap Chart<\/li>\n            <li>4.8 WaterFall chart <\/li>\n            <li>4.9 Boxplot <\/li>\n            <li>4.10 HetaMap <\/li>\n         <\/ol>   \n        <li>5. Conclusion<\/li>\n         <\/div>\n    <\/body>\n<\/html>\n\"\"\"\n\nHTML(html_contents)","7d27f56d":"df = pd.read_csv(r'..\/input\/netflix-shows\/netflix_titles.csv')\ndf.head(3)","23d11f50":"df = df.dropna( how='any',subset=['cast', 'director'])\ndf = df.dropna()","a10bd047":"# converting into proper date time format\ndf[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month","318de55e":"# finding seasons from durations\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)","96c01d38":"df = df.rename(columns={\"listed_in\":\"genre\"})\ndf['genre'] = df['genre'].apply(lambda x: x.split(\",\")[0])","0ceef6db":"fig_donut = px.pie(df, names='type', height=300, width=600, hole=0.7, title='Most watched on Netflix',\n                   color_discrete_sequence=['#b20710', '#221f1f'])\nfig_donut.update_traces(hovertemplate=None, textposition='outside', textinfo='percent+label', rotation=90)\nfig_donut.update_layout(margin=dict(t=100, b=30, l=0, r=0), showlegend=False,\n                        plot_bgcolor='#333', paper_bgcolor='#333',\n                        title_font=dict(size=45, color='#8a8d93', family=\"Lato, sans-serif\"),\n                        font=dict(size=17, color='#8a8d93'),\n                        hoverlabel=dict(bgcolor=\"#444\", font_size=13, font_family=\"Lato, sans-serif\"))","cc91cc3b":"fig_hist = px.histogram(df, y='rating', title='Distribution of Rating', color_discrete_sequence=['#b20710'])\nfig_hist.update_xaxes(visible=False)\nfig_hist.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix='  ', showline=False)\nfig_hist.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_hist.update_layout(height=370, margin=dict(t=85, b=20, l=70, r=40),\n                       hovermode=\"y unified\", \n                       xaxis_title=' ', yaxis_title=\" \",\n                       plot_bgcolor='#333', paper_bgcolor='#333',\n                       title_font=dict(size=40, color='#8a8d93', family=\"Lato, sans-serif\"),\n                       font=dict(color='#8a8d93', size=13),\n                       hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","0e200d0f":"df_rating = pd.DataFrame(df['rating'].value_counts()).reset_index().rename(columns={'index':'rating','rating':'count'})\n\nfig_bar = px.bar(df_rating, y='rating', x='count', title='Distribution of Rating',\n                 color_discrete_sequence=['#b20710'], text='count')\nfig_bar.update_xaxes(visible=False)\nfig_bar.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix='  ', showline=False)\nfig_bar.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_bar.update_layout(margin=dict(t=80, b=20, l=70, r=40),\n                      hovermode=\"y unified\", \n                      xaxis_title=' ', yaxis_title=\" \",\n                      plot_bgcolor='#333', paper_bgcolor='#333',\n                      title_font=dict(size=35, color='#8a8d93', family=\"Lato, sans-serif\"),\n                      font=dict(color='#8a8d93'),\n                      legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n                      hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","d73f959c":"fig_stack_bar = px.histogram(df, y='rating', color='type', title='Which has the highest Rating TV shows or Movies?',\n                             color_discrete_sequence=['#b20710', 'orange'])\nfig_stack_bar.update_xaxes(visible=False)\nfig_stack_bar.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix='  ', showline=False)\nfig_stack_bar.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_stack_bar.update_layout(margin=dict(t=85, b=20, l=70, r=40),\n                            hovermode=\"y unified\", \n                            xaxis_title=' ', yaxis_title=\" \",\n                            plot_bgcolor='#333', paper_bgcolor='#333',\n                            title_font=dict(size=35, color='#8a8d93', family=\"Lato, sans-serif\"),\n                            font=dict(color='#8a8d93'),\n                            legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n                            hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","2c8b4345":"fig_group_bar = px.histogram(df, y='rating', color='type', title='Which has the highest Rating TV shows or Movies?',\n                             color_discrete_sequence=['#b20710', 'orange'], barmode='group')\nfig_group_bar.update_xaxes(showgrid=False)\nfig_group_bar.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix='  ', showline=False)\nfig_group_bar.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_group_bar.update_layout(margin=dict(t=80, b=0, l=70, r=40),\n                            hovermode=\"y unified\", \n                            xaxis_title=' ', yaxis_title=\" \",\n                            plot_bgcolor='#333', paper_bgcolor='#333',\n                            title_font=dict(size=35, color='#8a8d93', family=\"Lato, sans-serif\"),\n                            font=dict(color='#8a8d93'),\n                            legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n                            hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","9a0846a4":"# making a copy of df\ndff = df.copy()\n\n# making 2 df one for tv show and another for movie with rating \ndf_tv_show = dff[dff['type']=='TV Show'][['rating', 'type']].rename(columns={'type':'tv_show'})\ndf_movie = dff[dff['type']=='Movie'][['rating', 'type']].rename(columns={'type':'movie'})\n\n\ndf_tv_show = pd.DataFrame(df_tv_show.rating.value_counts()).reset_index().rename(columns={'index':'tv_show'})\ndf_tv_show['rating_final'] = df_tv_show['rating'] \n# making rating column value negative\ndf_tv_show['rating'] *= -1\n\n\ndf_movie = pd.DataFrame(df_movie.rating.value_counts()).reset_index().rename(columns={'index':'movie'})","3992122d":"fig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_yaxes=True, horizontal_spacing=0)\n# bar plot for tv shows\nfig.append_trace(go.Bar(x=df_tv_show.rating, y=df_tv_show.tv_show, orientation='h', showlegend=True, \n                        text=df_tv_show.rating_final, name='TV Show', marker_color='#221f1f'), 1, 1)\n# bar plot for movies\nfig.append_trace(go.Bar(x=df_movie.rating, y=df_movie.movie, orientation='h', showlegend=True, text=df_movie.rating,\n                        name='Movie', marker_color='#b20710'), 1, 2)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(title='Which has the highest rating TV shows or Movies?',\n                  margin=dict(t=80, b=0, l=70, r=40),\n                  hovermode=\"y unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n                  hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","23ba0cd7":"df_month = pd.DataFrame(df.month_added.value_counts()).reset_index().rename(columns={'index':'month','month_added':'count'})\n# converting month no to month name\ndf_month['month_final'] = df_month['month'].replace({1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'June', 7:'July', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'})\n\nfig_month = px.funnel(df_month, x='count', y='month_final', title='Best month for releasing Content',\n                      height=350, width=600, color_discrete_sequence=['#b20710'])\nfig_month.update_xaxes(showgrid=False, ticksuffix=' ', showline=True)\nfig_month.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_month.update_layout(margin=dict(t=60, b=20, l=70, r=40),\n                        xaxis_title=' ', yaxis_title=\" \",\n                        plot_bgcolor='#333', paper_bgcolor='#333',\n                        title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                        font=dict(color='#8a8d93'),\n                        hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","eeedcc36":"df_iris = px.data.iris()\nfig_iris = px.scatter(df_iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                      size='petal_length', hover_data=['petal_width'],\n                      height=300, title='Scatter plot',\n                      color_discrete_sequence=['#b20710', 'orange', 'green'])\nfig_iris.update_xaxes(showgrid=False)\nfig_iris.update_yaxes(showgrid=False)\nfig_iris.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_iris.update_layout(margin=dict(t=80, b=20, l=70, r=40),\n                       xaxis_title=' ', yaxis_title=\" \",\n                       plot_bgcolor='#333', paper_bgcolor='#333',\n                       title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                       font=dict(color='#8a8d93'),\n                       legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.1, xanchor=\"center\", x=0.5),\n                       hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","ad5561fc":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"year_added\"\n\nvc1 = d1[col].value_counts().reset_index().rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index().rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"orange\"), )\ntrace2 = go.Scatter(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#b20710\"))\ndata = [trace1, trace2]\nfig_line = go.Figure(data)\n\nfig_line.update_traces(hovertemplate=None)\nfig_line.update_xaxes(showgrid=False)\nfig_line.update_yaxes(showgrid=False)\n\nlarge_title_format = 'Tv Show and Movies impact over the Year'\nsmall_title_format = \"<span style='font-size:13px; font-family:Tahoma'>Due to Covid updatation of content is slowed.\"\nfig_line.update_layout(title=large_title_format + \"<br>\" + small_title_format, height=400,\n                  margin=dict(t=130, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5))\n\nfig_line.add_annotation(dict(x=0.8, y=0.3, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\", \n                    text= \"Highest number of <b>Tv Shows<\/b><br> were released in <b>2019<\/b><br> followed by 2017.\"\n                  ))\nfig_line.add_annotation(dict(x=0.9, y=1, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\",\n                    text= \"Highest number of <b>Movies<\/b> were relased<br> in <b>2019<\/b> followed by 2020\"\n                  ))\nfig_line.show()","5218a955":"df_genre = pd.DataFrame(df.genre.value_counts()).reset_index().rename(columns={'index':'genre', 'genre':'count'})\nfig_tree = px.treemap(df_genre, path=[px.Constant(\"Distribution of Geners\"), 'count','genre'])\nfig_tree.update_layout(title='Highest watched Geners on Netflix',\n                  margin=dict(t=50, b=0, l=70, r=40),\n                  plot_bgcolor='#fff', paper_bgcolor='#fff',\n                  title_font=dict(size=25, color='#333', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#444\", font_size=13, font_family=\"Lato, sans-serif\"))","f20555dd":"d2 = df[df[\"type\"] == \"Movie\"]\ncol = \"year_added\"\n\nvc2 = d2[col].value_counts().reset_index().rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\nfig2 = go.Figure(go.Waterfall(\n    name = \"Movie\", orientation = \"v\", \n    x = [\"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"],\n    textposition = \"auto\",\n    text = [\"1\", \"2\", \"1\", \"13\", \"3\", \"6\", \"14\", \"48\", \"204\", \"743\", \"1121\", \"1366\", \"1228\", \"84\"],\n    y = [1, 2, -1, 13, -3, 6, 14, 48, 204, 743, 1121, 1366, -1228, -84],\n    connector = {\"line\":{\"color\":\"#b20710\"}},\n    increasing = {\"marker\":{\"color\":\"#b20710\"}},\n    decreasing = {\"marker\":{\"color\":\"orange\"}},\n\n))\nfig2.update_xaxes(showgrid=False)\nfig2.update_yaxes(showgrid=False, visible=False)\nfig2.update_traces(hovertemplate=None)\nfig2.update_layout(title='Watching Movies over the year', height=350,\n                   margin=dict(t=80, b=20, l=50, r=50),\n                   hovermode=\"x unified\",\n                   xaxis_title=' ', yaxis_title=\" \",\n                   plot_bgcolor='#333', paper_bgcolor='#333',\n                   title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                   font=dict(color='#8a8d93'))","3fab4426":"fig_box = px.box(df, x='duration', title='Boxplot', height=250, color_discrete_sequence=['#b20710'])\nfig_box.update_xaxes(showgrid=False)\nfig_box.update_yaxes(showgrid=False)\nfig_box.update_traces(hovertemplate=None)\nfig_box.update_layout(margin=dict(t=80, b=20, l=50, r=50),\n                      xaxis_title=' ', yaxis_title=\" \",\n                      plot_bgcolor='#333', paper_bgcolor='#333',\n                      title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                      font=dict(color='#8a8d93'))","b6e156a0":"import plotly.figure_factory as ff\n\ndff = df[['type', 'rating', 'duration', 'year_added',  'month_added', 'season_count']]\ncorrs = dff.corr()\nfig_heatmap = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    annotation_text=corrs.round(2).values,\n    showscale=True)\nfig_heatmap.update_layout(title= 'Correlation of whole Data',  height=300,\n                          plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                          title_font=dict(size=25, color='#a5a7ab', family=\"Muli, sans-serif\"),\n                          font=dict(color='#8a8d93'))","b688da7f":"<body>\n    <div class=\"toc\">\n       <H2>4.10 HeatMap <\/H2>\n<\/body>","64473342":"> #### Parameters: <br>\n**orientation:** chnage the orientation of chart in horizontal or vertical<br> \n**yanchor, xanchor:** Setting if you want the legends in top, bottom, center,etc<br>\n**x, y:** Setting the x and y values for the legend<br>","09789e3e":"> #### Parameters:<br>\n**connector:** Specify the color for connecting two bar<br>\nincreasing, decreasing: Specify the colors for the increasing and decreasing bar.<br>","acf7a1f5":"## Parameters Commonly Used: \n\n#### Basic Parameters: \n* **height, width:** Giving height & width of the chart respectively\n* **color_discrete_sequence:** Specifying which colors you want in your chart\n* **margin:** By setting values of Top, Bottom, Left, and Right you can change the margin of the graph\n* **plot_bgcolor:** Plotly provides different templates and themes you can use that also or you can create your own theme.\n* **showgrid:** The grid lines which are present in the chart. You can hide it by showgrid=False\n\n#### Advanced Parameters:\n* **categoryorder:** If you want your chart to show in ascending or decsending order you can specify values here \n* **hovermode:** While hovering on the bar you can specify in which mode you want like x hovermode or y hovermode.\n* **hovertemplate:** While hovering on the data you can specify a format like how you want to look the data\n* **xaxis_title, yaxis_title:** Specify the xaxis title & yaxis title respectively<br><br>\n\n* **title:** Giving a Title of the chart\n\n* **title_font**\n    * **size:** Setting the font size of the title\n    * **color:** Setting the color of the title\n    * **family:** Setting the font-family of the title<br><br>\n\n* **font**\n    * **size:** Setting the font size of font in chart \n    * **color:** Setting the color of font in chart\n    * **family:** Setting the font-family of the font in chart<br><br>\n\n* **hoverlabel**\n    * **bgcolor:** Setting the background color of the hoverlabels in chart\n    * **font_size:** Setting the font-size of the hoverlabels in chart\n    * **font_family:** Setting the font-family of the hoverlabels in chart ","2c7798ed":"<body>\n    <div class=\"toc\">\n       <H2>4.4 Funnel Chart <\/H2>\n<\/body>","1e5bf620":"Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n\n25th percentile = quartile 1 (Q1) that is lower quartile\n75th percentile = quartile 3 (Q3) that is higher quartile\nheight of box = IQR = interquartile range = Q3-Q1\nWhiskers = 1.5 * IQR from the Q1 and Q3\nOutliers = being more than 1.5*IQR away from median commonly.","35f27c72":"![image.png](attachment:0c1f92f5-0a58-4706-a1e8-75456f3dee91.png)","664f37f8":"<body>\n    <div class=\"toc\">\n       <H2 span=\"color:white\"> Data Description <\/H2>\n<\/body>\n    \n   This dataset contains data collected from Netflix of different TV shows and movies from the year 2008 to 2021.\n\n- **type:**\u00a0Gives information about 2 different unique values one is TV Show and another is Movie\n- **title:**\u00a0Gives information about the title of Movie or TV Show\n- **director:**\u00a0Gives information about the director who directed the Movie or TV Show\n- **cast:**\u00a0Gives information about the cast who plays role in Movie or TV Show\n- **release_year:**\u00a0Gives information about the year when Movie or TV Show was released\n- **rating:**\u00a0Gives information about the Movie or TV Show are in which category (eg like the movies are only for students, or adults, etc)\n- **duration:**\u00a0Gives information about the duration of Movie or TV Show\n- **listed_in:**\u00a0Gives information about the genre of Movie or TV Show\n- **description:**\u00a0Gives information about the description of Movie or TV Show","d899ea1a":"<body>\n    <div class=\"toc\">\n       <H2>4.3.3 Group Bar Chart <\/H2>\n<\/body>","e09fb9d2":"# If you like this notebook kindly upvote it.","8074d432":"<h2> Importing Library <\/h2>\n<hr>","d2c4f6fb":"<body>\n    <div class=\"toc\">\n       <H2>4.9 Boxplot Chart <\/H2>\n<\/body>","2cbede31":"## Guide for Plotly for beginners","8a3476b5":"<body>\n    <div class=\"toc\">\n       <H2> Data Visualization <\/H2>\n<\/body>","39e472bd":"> ### Note: For scatter plot i have used iris data.","53fd19ce":"<body>\n    <div class=\"toc\">\n       <H2>4.7 TreeMap chart <\/H2>\n<\/body>","3cff9277":"# All you need to know is Plotly!\nHere we will see 10 different graphs with some basic and advanced graphs like **waterfall** and **bidirectional Bar Chart** with every parameters explained.<br>\n#### If you find this kernel useful kindly upvote it i have invested a lot time in this","9d1dca2b":"### Parameters:<br>\n* **textposition:** The values of Movie & TV Show are shown outside of the chart by giving textposition=outside\n* **textinfo:** What information you want to shown while hovering on the chart is specified here\n* **rotation:** Giving different rotation to the chart to make chart presentable\n* **pull:** What data and percent of data you want to pull you specified here\n* **hole:** You can specify any values between 0 to 1 to make hole. ","b9740131":"<body>\n    <div class=\"toc\">\n       <H2> Data Cleaning <\/H2>\n<\/body>","9a88470e":"<body>\n    <div class=\"toc\">\n       <H2>4.8 Waterfall Chart <\/H2>\n<\/body>","8e970c54":"<body>\n    <div class=\"toc\">\n       <H2>4.6 Line Chart <\/H2>\n<\/body>","cffca6c5":"<body>\n    <div class=\"toc\">\n       <H2>4.4 Bar Chart <\/H2>\n<\/body>","8077a7b9":"<body>\n    <div class=\"toc\">\n       <H2>4.3.2 Stacked Bar Chart <\/H2>\n<\/body>","def9e161":"<body>\n    <div class=\"toc\">\n       <H2>4.5 Bubble Chart <\/H2>\n<\/body>","f3783d25":"<body>\n    <div class=\"toc\">\n       <H2 span=\"color:white\"> Data  <\/H2>\n<\/body>","eb5e07cc":"<body>\n    <div class=\"toc\">\n       <H2>4.3 Histogram Chart <\/H2>\n<\/body>","c09c08c0":"Interpreat:\nDrama is the most favourite gener of peoples followed by Action & Adventure.","ceef7343":"> #### Parameters:\n**text:** Text will show the numerical value on the primary bars.","229a2ebd":"> #### Parameters:<br>\nbarmode: There are 4 values for barmode; stack, group, relatvie, overlay","fe5d5ce9":"<body>\n    <div class=\"toc\">\n       <H2>4.1 Donut Chart <\/H2>\n<\/body>","e4bccff1":"<body>\n    <div class=\"toc\">\n       <H2>4.3.4 Bidirectional Bar Chart <\/H2>\n<\/body>","3c4be611":"> #### parameters:<br>\n**ticksuffix:** When you want your labels of X\/Y axis to have space between the line (white).<br>\n**marker:** The primary color of the bar chart is red but if you dont specify the line with size then a white bar line will appear on the bars. ","fcf80f8e":"Here, I have made 2 bar charts one for TV Shows and another for Movies and they are sharing same y-axis. \n> #### Parameters:<br>\n**add_annotation**<br>\n**x, y:** Setting the values of x,y for showing the text<br>\n**text:** Add the text which you want to show on the chart"}}