{"cell_type":{"ce17c0e2":"code","d1f8d085":"code","a70665e5":"code","fa881458":"code","31779c87":"code","2ecff199":"code","fa5a9533":"code","2ebc4c79":"code","d1c72f88":"code","b636d46f":"code","b0d41024":"code","0c661ad0":"code","a3f44611":"code","2e58632f":"code","13c1e4c2":"code","327033fa":"code","9606f87f":"code","0fab90b2":"code","4b68d3ee":"code","66508e46":"code","7d5921c8":"code","ea5c1f69":"code","e78a3e01":"code","8b0b2fa2":"code","fd519724":"code","d77465a3":"markdown","ffd4bfaf":"markdown","2732f37b":"markdown","732141ea":"markdown","46f1738b":"markdown","ab6f94dd":"markdown","65a7b5f7":"markdown","75797057":"markdown","a2c91c46":"markdown","abf7a993":"markdown"},"source":{"ce17c0e2":"import tensorflow as tf\nprint(tf.__version__)","d1f8d085":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom sklearn import preprocessing\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalization\nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score, precision_recall_curve, auc\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import optimizers","a70665e5":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","fa881458":"data.head()","31779c87":"data = data.drop(\"Time\", axis = 1)","2ecff199":"X_data = data.iloc[:, :-1]","fa5a9533":"X_data.shape","2ebc4c79":"X_data.head()","d1c72f88":"y_data = data.iloc[:, -1]","b636d46f":"y_data.shape","b0d41024":"X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.2, random_state = 7)","0c661ad0":"X_train = preprocessing.normalize(X_train)","a3f44611":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","2e58632f":"model = Sequential()","13c1e4c2":"model.add(Dense(64, input_shape = (29,), activation = 'relu'))\nmodel.add(Dense(32, activation = 'tanh'))\nmodel.add(Dense(1, activation = 'sigmoid'))","327033fa":"sgd = optimizers.Adam(lr = 0.001)","9606f87f":"model.compile(optimizer = sgd, loss = 'binary_crossentropy', metrics=['accuracy'])","0fab90b2":"model.summary()","4b68d3ee":"64*32","66508e46":"model.fit(X_train, y_train.values, batch_size = 700, epochs = 10, verbose = 1)","7d5921c8":"X_test = preprocessing.normalize(X_test)","ea5c1f69":"results = model.evaluate(X_test, y_test.values)","e78a3e01":"print(model.metrics_names)\nprint(results)    ","8b0b2fa2":"Y_pred_cls = model.predict_classes(X_test, batch_size=200, verbose=0)","fd519724":"print('Accuracy Model1 (Dropout): '+ str(model.evaluate(X_test,y_test.values)[1]))\nprint('Recall_score: ' + str(recall_score(y_test.values,Y_pred_cls)))\nprint('Precision_score: ' + str(precision_score(y_test.values, Y_pred_cls)))\nprint('F-score: ' + str(f1_score(y_test.values,Y_pred_cls)))\nconfusion_matrix(y_test.values, Y_pred_cls)","d77465a3":"### Summary of the model","ffd4bfaf":"### Dataset Description\n\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, the original features and more background information about the data is not provided. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n","2732f37b":"### Model compile [optimizers and loss functions]\n\nKeras model should be \"compiled\" prior to training\n\nTypes of loss (function) and optimizer should be designated\n","732141ea":"### Creating a model\n\nKeras model object can be created with Sequential class\n\nAt the outset, the model is empty per se. It is completed by adding additional layers and compilation\n","46f1738b":"This notebooks covers,\n\n1. Creating a Model\n\n2. Adding Layers\n\n3. Activations\n\n4. Optimizers and Loss functions\n\n5. Evaluation","ab6f94dd":"### Adding layers [layers and activations]\n\nKeras layers can be added to the model\n\nAdding layers are like stacking lego blocks one by one\n\nIt should be noted that as this is a classification problem, sigmoid layer (softmax for multi-class problems) should be added\n","65a7b5f7":"### Confusion Matrix","75797057":"### Training [Forward pass and Backpropagation]\n\nTraining the model","a2c91c46":"## Introduction to Neural Networks - Fraud Detection\n\nNilson reports that U.S. card fraud (credit, debt, etc) was reportedly 9 billion dollars in 2016 and expected to increase to 12 billion dollars by 2020. For perspective, in 2017 both PayPal's and Mastercard's revenue was only $10.8 billion each.\n\n\n**Objective:** In this session, given the credit card transactions, we will build a simple neural network (i.e., Multilayer perceptrons) for Fraud Detection using Keras.","abf7a993":"### Evaluation\nKeras model can be evaluated with evaluate() function\n\nEvaluation results are contained in a list\n\n"}}