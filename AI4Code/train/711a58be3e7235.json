{"cell_type":{"c21c83ea":"code","9e603b88":"code","460b50cb":"code","ec32955b":"code","908d63c6":"code","1ef883bc":"code","340de422":"code","376b2049":"code","4680cf97":"code","4acc9fe1":"code","1aae6a92":"code","fcae302a":"code","d8bba31b":"code","6b6a9508":"code","6983d863":"code","68416592":"code","c24e8fb5":"markdown","76a60aef":"markdown","167bba54":"markdown","ed9cbf58":"markdown","86077761":"markdown","7a5598af":"markdown","a7ad8b73":"markdown","f734306d":"markdown","44bc28d3":"markdown","1104c1ac":"markdown","69eeeddc":"markdown","b61ed96e":"markdown","c8a986a4":"markdown"},"source":{"c21c83ea":"#importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","9e603b88":"#reading the dataset using pandas and storing it in a dictionary\nraw_data = {}\nraw_data['INFY'] = pd.read_csv('\/kaggle\/input\/historical-datas\/INFY.csv')\nraw_data['SUNPHARMA'] = pd.read_csv('\/kaggle\/input\/historical-datas\/SUNPHARMA.csv')\nraw_data['ITC'] = pd.read_csv('\/kaggle\/input\/historical-datas\/ITC.csv')\nraw_data['COALINDIA'] = pd.read_csv('\/kaggle\/input\/historical-datas\/COALINDIA.csv')\nraw_data['SBIN'] = pd.read_csv('\/kaggle\/input\/historical-datas\/SBIN.csv')","460b50cb":"#visualising a dataset\nraw_data['SBIN']","ec32955b":"print(', '.join(raw_data['SBIN']['Series'].unique()))\n","908d63c6":"datas = {}\n\nfor name,data in raw_data.items():\n    datas[name] = raw_data[name][raw_data[name]['Series']=='EQ'].reset_index()","1ef883bc":"datas['SBIN']","340de422":"CP_dict = {}\n\nfor name,data in datas.items():\n    CP_dict[name] = datas[name]['Close Price']\n    \nCP_df = pd.DataFrame(CP_dict)\nCP_df","376b2049":"daily_return = np.log(CP_df.pct_change() + 1).dropna()\n#Here I am calculating log daily returns and removing the first empty column of each stock\n\n#Now calculating mean of those daily return\ndaily_return_mean = np.array(daily_return.mean())\n\n#Now assigning weights\n#Since there are five stocks so each will have a weight of 0.2 (1\/5)\nweights = np.array([0.2,0.2,0.2,0.2,0.2])","4680cf97":"#Calculating Portfolio Return\nPort_return = np.sum(weights * daily_return_mean)\n\nprint('The Annual Return of Portfolio is {}%'.format((Port_return * 252)*100))\n#Here 252 is multiplied for annual calculation i.e. 252 trading days in a year","4acc9fe1":"#Calculating Portfolio Volatility\ncov = daily_return.cov()\nPort_Vol = np.sqrt(np.dot(weights.T,np.dot(cov,weights)))\n\nprint('The Annual Volatility of Portfolio is {}%'.format((Port_Vol * np.sqrt(252))*100))","1aae6a92":"#Declare the number of Portfolio to be generated\nnum_portfolio = 30000\n\n#creating a empty list for storing returns,volatility,sharpe_ratio(return\/volatility) and weightage of each stock in portfolio\nresults = np.zeros((3 + len(daily_return.columns),num_portfolio))\n\n\n\n#Monte Carlo Simulation\nfor i in range(num_portfolio):\n    \n    weight = np.random.rand(len(daily_return.columns)) #Declaring random weights\n    weight = weight\/np.sum(weight) #So that sum of all weight will be equal to 1\n\n    p_annual_return = np.sum(weight * daily_return_mean) * 252 #Annual Return\n    p_annual_volatility = np.sqrt(np.dot(weight.T,np.dot(cov,weight))) * np.sqrt(252) #Annual Volatility\n    \n    #Storing the values in results list\n    results[0,i] = p_annual_return\n    results[1,i] = p_annual_volatility\n    results[2,i] = results[0,i]\/results[1,i]\n\n    for j in range(len(weight)):\n        results[j+3,i] =  weight[j]\n        \n        \n        \n#Making a dataframe for results list of all generated Portfolio\ncols = ['Ann_Ret','Ann_Vol','Sharpe_Ratio']\nfor num in range(len(list(daily_return.columns))):\n    cols.append(list(daily_return.columns)[num])\n\n    \nresult_df = pd.DataFrame(results.T,columns=cols)\n\n","fcae302a":"#Visulising the result dataframe\nresult_df","d8bba31b":"#locating \n#Portfolio 1 - Sharpe ratio is the highest (Return\/Volatility)\n#Portfolio 2 - Volatility is the lowest\n            \n\n#Portfolio 1\nmax_sharpe_ratio = result_df.iloc[result_df['Sharpe_Ratio'].idxmax()]\n\n#Portfolio 2\nvolatility_lowest = result_df.iloc[result_df['Ann_Vol'].idxmin()]","6b6a9508":"#Plotting the simulation\nplt.figure(figsize=(15,8))\nplt.scatter(result_df['Ann_Vol'],result_df['Ann_Ret'],c =result_df['Sharpe_Ratio'],cmap='RdYlBu')\nplt.colorbar()\n\nplt.scatter(max_sharpe_ratio[1],max_sharpe_ratio[0],marker = (5,1,3),color='red',s=700) #Red - Portfolio 1\nplt.scatter(volatility_lowest[1],volatility_lowest[0],marker = (5,1,3),color='green',s=700)#Green - Portfolio 2\n            \n\nplt.xlabel('Volatility',fontsize = 15)\nplt.ylabel('Returns',fontsize = 15)\nplt.show()","6983d863":"print('The Portfolio with maximum Return(or Sharpe_Ratio) is:')\nprint('All values in percentage')\nprint(round(max_sharpe_ratio * 100,2))","68416592":"print('The Portfolio with least Volatility is:')\nprint('All values in percentage')\nprint(round(volatility_lowest * 100,2))","c24e8fb5":"There are values like N5,N2,N6 in the series column other than EQ which represents bonds,debuntures floated by company so we have to remove these since we are considering for equity segments only.","76a60aef":"### Thank you.\n### Feel free to copy and edit the kernel with your desired stock datas","167bba54":"![](https:\/\/www.wallstreetmojo.com\/wp-content\/uploads\/2019\/04\/Portfolio-Return-Formula.jpg)\n\n### Here w is weight and r is return","ed9cbf58":"# Effective Portfolio Optimisation using Monte Carlo Simulation","86077761":"Now extracting the closing price of stocks and storing it in a dataframe call 'CP_df'","7a5598af":"Here we see that in series column there are other values than 'EQ'","a7ad8b73":"   # Conclusion:","f734306d":"First choose the stocks you want to keep in the portfolio and download their historical datas with a time period of more than one year since this will catch the long term trend of the stock.The datas can be downloaded from  official NSE website [Link](https:\/\/www1.nseindia.com\/products\/content\/equities\/equities\/eq_security.htm) in .csv format.\n\nHere I will use 5 stocks - **ITC,SUNPHARMA,INFOSYS,COALINDIA,SBIN** with a time frame of 1 year","44bc28d3":"This is my first post in an attempt to create diversification and the creation of an efficient frontier that can be used by investors to choose specific mix of stocks based on investment goals; that is, the trade off between their level of portfolio return vs their level of portfolio risk.\n\n### Modern Portfolio Theory:\nAccording to Investopedia : Modern Portfolio Theory is a theory on how risk-averse investors can construct portfolios to maximize expected return based on a given level of market risk.Modern portfolio theory argues that an investment's risk and return characteristics should not be viewed alone, but should be evaluated by how the investment affects the overall portfolio's risk and return.It quantifies the benefits of diversification, also known as \"not putting all of your eggs in one basket\"\n\nNow we will assess the return and volatility i.e. Annual Mean Return and Annual Standard Deviation by generating various number of portfolio that gives random weights to stocks in the portfolio.And from that we will pick the portfolio that has maximum Sharpe Ratio(Return\/Volatility) and is least Volatile\n\n","1104c1ac":"So far we have seen the Annual Return and Annual Volatility  of Portfolio if equal weight given to each stock.<br \/>\n<br \/>\nNow comes the random generation of portfolio i.e. **Monte Carlo Simulation**","69eeeddc":"*Made a website where the input takes stock tickers(NSE) and number of portfolios then calculates the least volatile and maximum return portfolio along with simulation of effective frontier.*\n*Link : https:\/\/intense-hollows-58536.herokuapp.com\/*\n","b61ed96e":"![](https:\/\/cdn.corporatefinanceinstitute.com\/assets\/portfolio-variance-formula-1024x84.png)\n\n### Here sigma is standard deviation and Cov is covariance","c8a986a4":"Now all the prerprocessing is done. Now lets calculate the Portfolio Return and Volatility.<br \/>\n<br \/>\nFirst I will calculate with equal weight to each stock "}}