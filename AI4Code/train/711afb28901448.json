{"cell_type":{"913bb1f5":"code","d0419c38":"code","4580e287":"code","3014de4c":"code","9f5219a4":"code","3aedcb7e":"code","af36ca2f":"code","416703fb":"code","513baa97":"code","3ac41f6f":"code","a3fd5cb8":"code","7ea12a56":"code","96b0b1da":"code","2c903270":"code","0f045e71":"code","9b38d153":"code","8d8e5938":"code","d3590556":"code","d36a302d":"code","d7e54127":"code","0594fc01":"code","cd7cd4be":"code","26bd6804":"code","463ffd3a":"code","75516397":"code","4c55da95":"code","d763f6f5":"code","3a70c97d":"code","668a2090":"code","9d3608a2":"code","1a3b4b44":"code","37745984":"code","e3b936e9":"code","4aaa1a00":"code","2ab3f23b":"code","9513ade3":"code","2771c5e1":"code","29069654":"code","b8808edd":"code","59ac05e9":"code","0734f665":"code","086ab17c":"code","027d76b0":"code","e94a7be4":"code","91a65850":"code","c4ee6b22":"code","350da6be":"code","6520605b":"markdown","9efec385":"markdown","62422d03":"markdown","f05a3bbf":"markdown","fb673156":"markdown","d72e4a6c":"markdown","b7675430":"markdown","2dfbea40":"markdown","14989e1c":"markdown","bb262683":"markdown","3efd2748":"markdown","b31085a8":"markdown","af1768e9":"markdown","29013647":"markdown","d19be31d":"markdown","d6becc2d":"markdown","9d610016":"markdown","b9d9cccc":"markdown","c97eba3b":"markdown","18303924":"markdown","3bff8c59":"markdown","b8e8db7c":"markdown","211d3757":"markdown","3e4f4935":"markdown","bcd3b8c7":"markdown","a9e630a8":"markdown","39797ea5":"markdown","69394f99":"markdown","1c9807c4":"markdown","384168d5":"markdown","3f568c2c":"markdown","8ded097d":"markdown","fd18c1d2":"markdown","de4e5afa":"markdown","5480780c":"markdown","44b433d1":"markdown","1e1d84f1":"markdown"},"source":{"913bb1f5":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n    horizontal-align: middle;\n}\nh1,h2 {\n    text-align: center;\n    background-color: pink;\n    padding: 20px;\n    margin: 0;\n    color: white;\n    font-family: ariel;\n    border-radius: 80px\n}\n\nh3 {\n    text-align: center;\n    border-style: solid;\n    border-width: 3px;\n    padding: 12px;\n    margin: 0;\n    color: black;\n    font-family: ariel;\n    border-radius: 80px;\n    border-color: gold;\n}\n\nbody, p {\n    font-family: ariel;\n    font-size: 15px;\n    color: charcoal;\n}\ndiv {\n    font-size: 14px;\n    margin: 0;\n\n}\n\nh4 {\n    padding: 0px;\n    margin: 0;\n    font-family: ariel;\n    color: purple;\n}\n<\/style>\n\"\"\")","d0419c38":"import re\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom wordcloud import STOPWORDS, WordCloud, ImageColorGenerator\nfrom collections import defaultdict\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom PIL import Image\nimport seaborn as sns\nimport string\nimport plotly.figure_factory as ff\nimport random\n","4580e287":"df = pd.read_csv('..\/input\/toxic-comments-train\/training_data.csv')","3014de4c":"df.head()","9f5219a4":"df[\"less_toxic\"] = df['less_toxic'].apply(\n    lambda x: ' '.join([w for w in str(x).lower().split()])\n)\n\ndf[\"more_toxic\"] = df['more_toxic'].apply(\n    lambda x: ' '.join([w for w in str(x).lower().split()])\n)\n","3aedcb7e":"df.head()","af36ca2f":"df[\"less_toxic\"] = df[\"less_toxic\"].str.replace('fk', 'fuck')\ndf[\"less_toxic\"] = df[\"less_toxic\"].str.replace('fuk', 'fuck')","416703fb":"df.head()","513baa97":"def generate_ngrams(text, n_gram=1):\n    token = [token for token in text.lower().split(' ') if token != '' if token not in STOPWORDS]\n    ngrams = zip(*[token[i:] for i in range(n_gram)])\n    return [' '.join(ngram) for ngram in ngrams]","3ac41f6f":"N = 20","a3fd5cb8":"less_toxic_unigrams = defaultdict(int)\nfor tweet in df['less_toxic']:\n    for word in generate_ngrams(tweet, 1):\n        less_toxic_unigrams[word] += 1\n        \ndf_less_toxic_unigrams = pd.DataFrame(sorted(less_toxic_unigrams.items(), key=lambda x: x[1])[::-1])\n\nunigrams_less_100 = df_less_toxic_unigrams[:N]\n\nmore_toxic_unigrams = defaultdict(int)\nfor tweet in df['more_toxic']:\n    for word in generate_ngrams(tweet, 1):\n        more_toxic_unigrams[word] += 1\n        \ndf_more_toxic_unigrams = pd.DataFrame(sorted(more_toxic_unigrams.items(), key=lambda x: x[1])[::-1])\n\nunigrams_more_100 = df_more_toxic_unigrams[:N]","7ea12a56":"fig, axes = plt.subplots(ncols=2, figsize=(18, N\/\/2), dpi=100)\nplt.tight_layout()\n\nsns.barplot(y=unigrams_less_100[0], x=unigrams_less_100[1], ax=axes[0], color='green')\nsns.barplot(y=unigrams_more_100[0], x=unigrams_more_100[1], ax=axes[1], color='red')\n\nfor i in range(2):\n    axes[i].spines['right'].set_visible(False)\n    axes[i].set_xlabel('')\n    axes[i].set_ylabel('')\n    axes[i].tick_params(axis='x', labelsize=13)\n    axes[i].tick_params(axis='y', labelsize=13)\n\naxes[0].set_title(f'Top {N} most common unigrams in less_toxic comments', fontsize=15)\naxes[1].set_title(f'Top {N} most common unigrams in more_toxic comments', fontsize=15)\n\nplt.show()","96b0b1da":"less_toxic_bigrams = defaultdict(int)\nfor tweet in df['less_toxic']:\n    for word in generate_ngrams(tweet, 2):\n        less_toxic_bigrams[word] += 1\n        \ndf_less_toxic_bigrams = pd.DataFrame(sorted(less_toxic_bigrams.items(), key=lambda x: x[1])[::-1])\n\nbigrams_less_100 = df_less_toxic_bigrams[:N]\n\nmore_toxic_bigrams = defaultdict(int)\nfor tweet in df['more_toxic']:\n    for word in generate_ngrams(tweet, 2):\n        more_toxic_bigrams[word] += 1\n        \ndf_more_toxic_bigrams = pd.DataFrame(sorted(more_toxic_bigrams.items(), key=lambda x: x[1])[::-1])\n\nbigrams_more_100 = df_more_toxic_bigrams[:N]","2c903270":"fig, axes = plt.subplots(ncols=2, figsize=(18, N\/\/2), dpi=100)\nplt.tight_layout()\n\nsns.barplot(y=bigrams_less_100[0], x=bigrams_less_100[1], ax=axes[0], color='green')\nsns.barplot(y=bigrams_more_100[0], x=bigrams_more_100[1], ax=axes[1], color='red')\n\nfor i in range(2):\n    axes[i].spines['right'].set_visible(False)\n    axes[i].set_xlabel('')\n    axes[i].set_ylabel('')\n    axes[i].tick_params(axis='x', labelsize=13)\n    axes[i].tick_params(axis='y', labelsize=13)\n\naxes[0].set_title(f'Top {N} most common bigrams in less_toxic comments', fontsize=15)\naxes[1].set_title(f'Top {N} most common bigrams in more_toxic comments', fontsize=15)\n\nplt.show()","0f045e71":"less_toxic_trigrams = defaultdict(int)\nfor tweet in df['less_toxic']:\n    for word in generate_ngrams(tweet, 3):\n        less_toxic_trigrams[word] += 1\n        \ndf_less_toxic_trigrams = pd.DataFrame(sorted(less_toxic_trigrams.items(), key=lambda x: x[1])[::-1])\n\ntrigrams_less_100 = df_less_toxic_trigrams[:N]\n\nmore_toxic_trigrams = defaultdict(int)\nfor tweet in df['more_toxic']:\n    for word in generate_ngrams(tweet, 3):\n        more_toxic_trigrams[word] += 1\n        \ndf_more_toxic_trigrams = pd.DataFrame(sorted(more_toxic_trigrams.items(), key=lambda x: x[1])[::-1])\n\ntrigrams_more_100 = df_more_toxic_trigrams[:N]","9b38d153":"fig, axes = plt.subplots(ncols=2, figsize=(30, N\/\/2), dpi=100)\nplt.tight_layout()\n\nsns.barplot(y=trigrams_less_100[0], x=trigrams_less_100[1], ax=axes[0], color='green')\nsns.barplot(y=trigrams_more_100[0], x=trigrams_more_100[1], ax=axes[1], color='red')\n\nfor i in range(2):\n    axes[i].spines['right'].set_visible(False)\n    axes[i].set_xlabel('')\n    axes[i].set_ylabel('')\n    axes[i].tick_params(axis='x', labelsize=13)\n    axes[i].tick_params(axis='y', labelsize=13)\n\naxes[0].set_title(f'Top {N} most common trigrams in less_toxic comments', fontsize=35)\naxes[1].set_title(f'Top {N} most common trigrams in more_toxic comments', fontsize=35)\n\nplt.show()","8d8e5938":"import requests\nfrom io import BytesIO\ntry:\n    url=\"https:\/\/user-images.githubusercontent.com\/74188336\/142692890-641ebc21-2e47-4556-9d37-1c0b9e1a0587.jpeg\"\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n\n    text = ' '.join(df['less_toxic'].values)\n    mask = np.array(img)\n    wordcloud = WordCloud(max_font_size=50, max_words=1000, background_color=\"white\", mask=mask, colormap='BuGn').generate(text.lower())\n    plt.figure(figsize=(15,15))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()\nexcept Exception as e:\n    pass","d3590556":"\ntry:\n    text = ' '.join(df['more_toxic'].values)\n    url=\"https:\/\/user-images.githubusercontent.com\/74188336\/142692894-c17240e4-1101-4591-9d10-71793e460816.jpeg\"\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n\n    mask = np.array(img)\n    wordcloud = WordCloud(max_font_size=50, max_words=2000, background_color=\"white\", mask=mask, contour_width=0, contour_color='grey', colormap='Reds').generate(text.lower())\n    plt.figure(figsize=(15,15))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()\nexcept Exception as e:\n    pass","d36a302d":"less_toxic_words = [len(sentence.split(' ')) for sentence in df['less_toxic'].values]\nmore_toxic_words = [len(sentence.split(' ')) for sentence in df['more_toxic'].values]\n\nless_toxic_chars = [len(sentence) for sentence in df['less_toxic'].values]\nmore_toxic_chars = [len(sentence) for sentence in df['more_toxic'].values]\n\nless_toxic_punct = [len([char for char in sentence if char in string.punctuation]) for sentence in df['less_toxic'].values]\nmore_toxic_punct = [len([char for char in sentence if char in string.punctuation]) for sentence in df['more_toxic'].values]\n","d7e54127":"fig = go.Figure()\nfig.add_trace(go.Box(y=less_toxic_words, name = 'less_toxic',))\nfig.add_trace(go.Box(y=more_toxic_words, name = 'more_toxic'))\n\nfig.show()","0594fc01":"fig = go.Figure()\nfig.add_trace(go.Box(y=less_toxic_chars, name = 'less_toxic',))\nfig.add_trace(go.Box(y=more_toxic_chars, name = 'more_toxic'))\n\nfig.show()","cd7cd4be":"fig = go.Figure()\nfig.add_trace(go.Box(y=less_toxic_punct, name = 'less_toxic',))\nfig.add_trace(go.Box(y=more_toxic_punct, name = 'more_toxic'))\n\nfig.show()","26bd6804":"less_toxic_words_plot = random.sample(less_toxic_words, 10000)\nmore_toxic_words_plot = random.sample(more_toxic_words, 10000)\nhist_data = [less_toxic_words_plot, more_toxic_words_plot]\n\nX = ['less_toxic', 'more_toxic']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, X, show_hist=False)\nfig.show()","463ffd3a":"import plotly.figure_factory as ff\nimport numpy as np\nimport random\n\nless_toxic_chars_plot = random.sample(less_toxic_chars, 10000)\nmore_toxic_chars_plot = random.sample(more_toxic_chars, 10000)\nhist_data = [less_toxic_chars_plot, more_toxic_chars_plot]\n\nX = ['less_toxic', 'more_toxic']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, X, show_hist=False)\nfig.show()","75516397":"import plotly.figure_factory as ff\nimport numpy as np\nimport random\n\nless_toxic_punct_plot = random.sample(less_toxic_punct, 10000)\nmore_toxic_punct_plot = random.sample(more_toxic_punct, 10000)\nhist_data = [less_toxic_punct_plot, more_toxic_punct_plot]\n\nX = ['less_toxic', 'more_toxic']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, X, show_hist=False)\nfig.show()","4c55da95":"less_toxic_df = pd.DataFrame()\nless_toxic_df['comment'] = df['less_toxic']\nless_toxic_df['target'] = len(df['less_toxic'])*[0]","d763f6f5":"more_toxic_df = pd.DataFrame()\nmore_toxic_df['comment'] = df['more_toxic']\nmore_toxic_df['target'] = len(df['more_toxic'])*[1]","3a70c97d":"final_df = pd.concat([less_toxic_df, more_toxic_df])","668a2090":"final_df = final_df.sample(frac=0.1, random_state=2).reset_index(drop=True)","9d3608a2":"final_df.head()","1a3b4b44":"from sklearn.model_selection import train_test_split\n\ntrain_df, test_df = train_test_split(final_df, test_size=0.2, random_state=2)","37745984":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\ntfidf_vec = TfidfVectorizer(stop_words='english', ngram_range=(1,3))\ntfidf_vec.fit_transform(train_df['comment'].values.tolist() + test_df['comment'].values.tolist())\ntrain_tfidf = tfidf_vec.transform(train_df['comment'].values.tolist())\ntest_tfidf = tfidf_vec.transform(test_df['comment'].values.tolist())","e3b936e9":"from sklearn import metrics, model_selection, linear_model\n\ntrain_y = train_df[\"target\"].values\n\ndef runModel(train_X, train_y, test_X, test_y, test_X2):\n    model = linear_model.LogisticRegression(C=5., solver='sag')\n    model.fit(train_X, train_y)\n    pred_test_y = model.predict(test_X)#[:,1]\n    pred_test_y2 = model.predict(test_X2)#[:,1]\n    return pred_test_y, pred_test_y2, model\n\nprint(\"Building model.\")\ncv_scores = []\npred_full_test = 0\npred_train = np.zeros([train_df.shape[0]])\nkf = model_selection.KFold(n_splits=5, shuffle=True, random_state=2017)\n\nall_models=[]\nfold=0\nfor dev_index, val_index in kf.split(train_df):\n    \n    print('-'*50)\n    print('Fold :', fold)\n    print('-'*50)\n\n\n    dev_X, val_X = train_tfidf[dev_index], train_tfidf[val_index]\n    dev_y, val_y = train_y[dev_index], train_y[val_index]\n    \n    print('Training..')\n    pred_val_y, pred_test_y, model = runModel(dev_X, dev_y, val_X, val_y, test_tfidf)\n    \n    all_models.append(model)\n    \n    pred_full_test = pred_full_test + pred_test_y\n    pred_train[val_index] = pred_val_y\n    cv_scores.append(metrics.accuracy_score(val_y, pred_val_y))\n    print(f'Accuracy Score for fold {fold}:', metrics.accuracy_score(val_y, pred_val_y))\n    fold+=1","4aaa1a00":"preds = [round(y) for y in pred_full_test\/5]","2ab3f23b":"print('Accuracy on test set:', metrics.accuracy_score(test_df.target, preds))","9513ade3":"import eli5\neli5.show_weights(model, vec=tfidf_vec, top=100, feature_filter=lambda x: x != '<BIAS>')","2771c5e1":"valdf = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv')","29069654":"comment1 = valdf['less_toxic'].values\ncomment2 = valdf['more_toxic'].values","b8808edd":"comm1 = tfidf_vec.transform(comment1)\ncomm2 = tfidf_vec.transform(comment2)","59ac05e9":"pred1 = []\npred2 = []\nfor model in all_models:\n    pred1.append(np.array(model.predict_proba(comm1)[:,1]))\n    pred2.append(np.array(model.predict_proba(comm2)[:,1]))","0734f665":"pred1 = sum(pred1)\/5\npred2 = sum(pred2)\/5","086ab17c":"pred1","027d76b0":"val_score=[]\nfor s1, s2 in zip(pred1, pred2):\n    if s1<s2:\n        val_score.append(1)\n    else:\n        val_score.append(0)\n        \nprint('Validation Score :',np.mean(val_score))","e94a7be4":"gp1=valdf.groupby(['less_toxic','more_toxic']).worker.count().reset_index()\ngp2=gp1.copy()\ngp2['less_toxic']=gp1['more_toxic']\ngp2['more_toxic']=gp1['less_toxic']\nmrg=gp1.merge(gp2,how='outer',on=['less_toxic','more_toxic']).fillna(0)\nmrg['sum']=mrg.worker_x+mrg.worker_y\nmrg['max']=mrg[['worker_x','worker_y']].max(1)\nprint('Maximum Score :', mrg['max'].sum()\/mrg['sum'].sum())","91a65850":"print('Effective accuracy:', np.round(np.mean(val_score)\/0.824*100, 2),'%')","c4ee6b22":"sub = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv')\n\ncomms = tfidf_vec.transform(sub['text'].values)\nsub_preds = []\nfor model in all_models:\n    sub_preds.append(np.array(model.predict_proba(comms)[:,1]))\n\nsub['score'] = sum(sub_preds)\nsub[['comment_id', 'score']].to_csv('submission.csv', index=False)","350da6be":"sub[['comment_id', 'score']].head()","6520605b":"# 6. Trying another approach cuz I keep running out of GPU :)\n\nI have labelled the `less_toxic` comments as `0` and the `more_toxic` as `1`. This is not exactly the correct process. This dataset was purposely made to train of ranking loss function. But I thought why not give it a try :)\n\nIt will be giving very close results as both categories have similar kind of sentences. In this approach I have also visualised the weights of the positive (`more_toxic`) words and the negative (`less_toxic`) words. I know I have reversed it :)\n\nPlease bear with it :D","9efec385":"\n\nWordCloud is a great way of visualizing the occurances of the most common words. The font size of the words depend on the occurance of that particular word in the whole corpus.","62422d03":"# 5. Distribution Plots\n\nLet us also observe the distribution of the number of words, number of characters and number of punctuations just as we did for the box-plots. The box-plots give an idea of the distribution of the values, but still let's observe the distribution for further clarification about the values.\n\nI will be taking a 10% random sample to plot because the original dataset has 100,000 comment pairs (just to make it faster)","f05a3bbf":"# 9. Visualisation of `more_toxic` words\n\nThe weights determine the **severity** of toxicity. The words in `red` are **lesser** toxic words and the words in `green` are **more** toxic words.","fb673156":"# 2. n-grams\n\n### What are n-grams?\n\nIn the fields of computational linguistics and probability, an n-gram (sometimes also called Q-gram) is a contiguous sequence of n items from a given sample of text or speech. The items can be phonemes, syllables, letters, words or base pairs according to the application.","d72e4a6c":"# Detailed EDA and using TF-IDF with Logistic Regression","b7675430":"### 4.1. Box plot of Number of words","2dfbea40":"### 1.2. Working on shortened and correcting mispelled words","14989e1c":"# 1. Some basic pre-processing:\n\nThough it says some basic pre-processing, here I have just converted into lower case and removed some extra spaces.... :D\n\nAnd currently working of correcting mis-spelled words and some shortened words...\n\nNeed to increase my vocab...never heard of these `toxic` words :D","bb262683":"# 8. Training using Logistic Regression Model\n\nI have used simple linear regression model, since it is the fastest and will help in determining the weights of the words that contribute to the classification. \n\nI have plotted the words with their weights below.\n\nAlso, here I have used accuracy_score as the metric, which is not at all the correct metric :( but the way I designed this problem does the word :D\n\nI have printed the OOF accuracy scores and also the accuracy score on the whole test set after this","3efd2748":"# (: <span style=\"color:white\">Thank you for reading<\/span> :)\n\n# <span style=\"color:white\">o.O<\/span> Please DO <span style=\"color:white\">UPVOTE<\/span> if you find it useful <span style=\"color:white\">O.o<\/span>","b31085a8":"# 7. TF-IDF\n\n### 7.1. Learning about the tf-idf vectorizer.\n\n**tf : Term Frequency**\n\n\n$$tf(t,d)= \\frac{\\text{count of the word t in d}}{\\text{total number of words in d}}$$\n\n\n**df : Document Frequency**\n\nThis measures the importance of documents in a whole set of the corpus. This is very similar to TF but the only difference is that TF is the frequency counter for a term t in document d, whereas DF is the count of occurrences of term t in the document set N. In other words, DF is the number of documents in which the word is present. We consider one occurrence if the term is present in the document at least once, we do not need to know the number of times the term is present.\n\n$$df(t) = \\text{occurrence of t in N documents}$$\n\nTo keep this also in a range, we normalize by dividing by the total number of documents. Our main goal is to know the informativeness of a term, and DF is the exact inverse of it. that is why we inverse the DF\n\n\n**idf : inverse document frequency**\n\nIDF is the inverse of the document frequency which measures the informativeness of term t. When we calculate IDF, it will be very low for the most occurring words such as stop words (because they are present in almost all of the documents, and N\/df will give a very low value to that word). This finally gives what we want, a relative weightage.\n\n$$\\text{df}(t) = \\frac{\\text{N}}{\\text{df}}$$\n\n\nNow there are few other problems with the IDF, when we have a large corpus size say N=10000, the IDF value explodes. So to dampen the effect we take the log of IDF\n\n$$\\text{idf}(t) = \\log\\frac{N}{df + 1}$$\n\nFinally, by taking a multiplicative value of TF and IDF, we get the TF-IDF score. \n\n$$\\text{tf-idf}(t, d) = \\text{tf(t, d)}\\times\\log\\frac{N}{df + 1}$$\n\nPreviously thought of using the count vectorizer, but TF-IDF vectorizer automatically drops the weights of the words that doesn't contribute to the classification. That's why we won't need to remove the stopwords.","af1768e9":"### 7.2. Vectorizing using `TfidfVectorizer`","29013647":"# 3. WordClouds","d19be31d":"# 11. Maximum Score that can be obtained on `validation_data.csv`\n\nThe maximum score that can be obtained on `validation_data.csv` can be calculated by the following code in the cell below:\n\nYou can find about this discussion [here](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-severity-rating\/discussion\/287350) and the code was proposed by [yuval reina](https:\/\/www.kaggle.com\/yuval6967) ","d6becc2d":"#### N number of `n-grams` to visualize","9d610016":"### 5.2. Distribution of number of characters","b9d9cccc":"# : <span style=\"color:white\">Contents<\/span> :\n\n### 1. Some basic pre-processing    \n### 2. n-grams (with visualizations) \n### 3. WordClouds \ud83d\ude03\n### 4. Box Plots \n### 5. Distribution plots\n### 6. Trying another approach\n### 7. TF-<span style=\"color:purple\">IDF<\/span>\n### 8. Training using Logistic Regression Model\n### 9. Visualization of `more-toxic` words\n### 10. Calculating score on `validation_data.csv`\n### 11. <span style=\"color:purple\">Maximum<\/span> score that can be obtained on `validation_data.csv`\n### 12. Submission time \ud83c\udf83","c97eba3b":"### 1.1. Converting to lowercase and removing extra spaces","18303924":"### 2.1. uni-grams\n\nUnigrams are single words in a sentence. It's the smallest unit of word measurement.\n\nfor e.g. \n\nsentence : `'Hello I am the Leader of the Nazis'`\n\nThe unigrams are: `Hello`, `I`, `am`, `the`, `Leader`, `of`, `the`, `Nazis`","3bff8c59":"### 4.3. Box Plot of Number of Punctuations","b8e8db7c":"### 3.2. `more_toxic` comments WordCloud visualization\n\nNow let's visualise the `more_toxic` comments....\n\nOh my.... even the wordcloud was able to determine the comments were toxic... See for yourself \ud83d\ude31","211d3757":"### References:\n\n* [Simple Exploration Notebook - QIQC](https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-qiqc) \n* [Just some simple EDA](https:\/\/www.kaggle.com\/tunguz\/just-some-simple-eda)\n* [NLP with Disaster Tweets - EDA, Cleaning and BERT](https:\/\/www.kaggle.com\/gunesevitan\/nlp-with-disaster-tweets-eda-cleaning-and-bert)","3e4f4935":"### 5.1. Distribution of the number of words\n\n**Note: The value in the y-axis doesn't show the actual count but rather the fraction of count.**","bcd3b8c7":"# 10. Calculating Score on Validation Data","a9e630a8":"### 3.1 `less_toxic` comments WordCloud visualization\n\nLet's visualise the the word cloud of the `less_toxic` corpus. You can also project the wordcloud on a mask as well as select any colormap. ","39797ea5":"### 2.3. Tri-Grams\n\nSimilarly, the tri-grams would be 3 consecutive words in a sentence. \n\nsentence : `'Hello I am the Leader of the Nazis'`\n\nThe tri-grams are: `Hello I am`, `I am the`, `am the Leader`, `the Leader of`, `Leader of the`, `of the Nazis`\n\nSimilarly we can go on calculating n-grams :)","69394f99":"### 2.2. bi-grams\n\nBi-grams are two words zipped together. If we iterate through each word in a sentence, then the pair of that word and the next word is called a bi-gram.\n\nLet's take the previous sentence as example:\n\nsentence : `'Hello I am the Leader of the Nazis'`\n\nThe bi-igrams are: `Hello I`, `I am`, `am the`, `the Leader`, `Leader of`, `of the`, `the Nazis`","1c9807c4":"# 12. Submission Time \ud83c\udf83","384168d5":"### (: <span style=\"color:green\">WELCOME<\/span> :)\n\n![jig](https:\/\/user-images.githubusercontent.com\/74188336\/142691516-4b0fee38-6c8b-4204-8b1f-c1d8d1144161.jpeg)\n\n### Overview:\n\nThis notebook is to visualise the text data to see and identify some patterns in the text data which might help us in differentiating between `less_toxic` and `more_toxic` comments.\n\nI have used my custom designed dataset made from the previous Jigsaw Toxic Comment Classification Challenge. The making of the dataset has been detailed in this discussion.\n\nI wont be training any Deep Learning Model in this notebook. But if you want to train and take reference you can use any of my notebooks:\n\nI have used different techniques:\n* Proposed by @debarshichanda: Using RankingLoss Function to train a transformer.  [\ud83c\udf83 BERT | FIT | ES and Visualisation \ud83d\udcc8](https:\/\/www.kaggle.com\/kishalmandal\/bert-fit-es-and-visualisation): This notebook can be used to train that model and [JRSTC | BERT | INFER \ud83c\udf83](https:\/\/www.kaggle.com\/kishalmandal\/jrstc-bert-infer) is the inference kernel. Just need to change the model name. No need to change the hidden_nodes everytime you switch between base and large models (since it used `nn.LazyLinear()` layer as the transformer head)\n\n* Used the Toxic Comment Classification Dataset and trained a multi-headed (6-heads) to classify the comments in those 6 categories. Then summed up the output probabilities and used those probabilities to rank the comments. You can find the training kernel [here](https:\/\/www.kaggle.com\/kishalmandal\/jigsaw-fit-multi-label-comment-classifier) and the inference kernel [here](https:\/\/www.kaggle.com\/kishalmandal\/infer-toxiccomments).\n\nNow back to this notebook :)\n\nThis notebook is focused on the different visualisation, some important plots (including uni-grams, bi-grams, tri-grams), some box-plots, distribution plots. A detailed discussion on TF-IDF vectorizer. Then using TF-IDF vectorizer to train a Logistic Regression model (5 folds) and make a submission.\n\n\n## Please <span style=\"color:white\">upvote<\/span>  if it helps you or if you like it :) It's free to <span style=\"color:white\">upvote<\/span> :) <span style=\"color:white\">:)<\/span> :)","3f568c2c":"### 4.2. Box Plot of Number of characters","8ded097d":"The accuracy on the test set isn't bad. But the results will change when we will predict the probailities :( since the all the sentences are toxic........\n\nEven the models don't like toxicity -_-","fd18c1d2":"The Validation Score isn't great compared to transformers or Naive-Bayes Model. But can't exactly tell it's bad because the maximum score that can be obtained from the validation set is : **0.824**","de4e5afa":"# 4. Box Plots\n\nLet's do some box plots for the number in the `less_toxic` and `more_toxic` comments to see the IQR. This will help us to determine the `mex_len` we will be using to pad\/truncate the comments in our DeepNLP model (using BERT\/RoBERTa)\n\nLink to the notebook :\n\nSimilarly, let's do :\n* Box plot for the number of characters\n* Box plot for the number of punctuations.\n\nThis punctuation part plays a dual role :(\n\nSometimes some punctuations are important and sometimes unecessary..\n\nFor e.g.: `What!!!!!???!?!?!?!`\n\nHere the punctuations emphasize the toxicity of the sentence.\n\nSometimes unecessary punctuations just lengthen the sentence which might result in truncation of the important part...\n\nFor e.g.: `\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"What!!!>??!L{\">\">`","5480780c":"#### **n-gram generator**","44b433d1":"### 5.3. Distribution of the number of puncutation","1e1d84f1":"### Not bad..\n\nWithout any pre-processing and just using Logistic Regression gets about an effective 75% accuracy.. :D\nSeems like TF-IDF works great. Let's make a submission now :)"}}