{"cell_type":{"58f70a0c":"code","01ea42f1":"code","b58cb896":"code","13fa93d8":"code","ef49aaf5":"code","214b93e9":"code","a23865e4":"code","e467c52d":"code","9e0c0008":"code","99a8909d":"code","92d46cd5":"code","4b041c4e":"code","035c2fc1":"code","17b39524":"code","0550aa38":"code","f8491116":"code","0eaf7245":"code","b9ac11f6":"code","ea83d014":"code","83f49c8c":"code","b333270d":"code","9400c8f9":"code","4451251b":"markdown","e536240d":"markdown","81aacbbf":"markdown","5b754380":"markdown","b5cb6bf5":"markdown","fba516ca":"markdown","33601aef":"markdown","0fdb02be":"markdown","9bbff98f":"markdown","217807d0":"markdown","c1ddda41":"markdown","b7561cf7":"markdown","0f6f9680":"markdown","d29c9488":"markdown","bdd71c55":"markdown","c04b9786":"markdown"},"source":{"58f70a0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01ea42f1":"# Configuraci\u00f3n inicial y obtenci\u00f3n de datos \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\", index_col = \"PassengerId\")\ndf_test  = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\", index_col = \"PassengerId\")\n\n","b58cb896":"print(\"Los datos de entrenamiento contienen \"+ str(df_train.shape[0])+\" filas y \"+str(df_train.shape[1])+\" columnas >>\")\nprint(df_train.columns)","13fa93d8":"df_train.drop(['Name', 'Ticket'], axis = 1, inplace  = True)\ndf_train.head()","ef49aaf5":"# Resumen de los datos\nprint(\"Resumen:\")\nprint(round(df_train[[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]].describe().transpose(),1))\n\n# Tipos de Variables \nprint(\"Variables con Texto:\")\nfor i in df_train.select_dtypes(include = ['object']):\n    print(\"\\t\\t\"+i)\nprint(\"Variables Num\u00e9ricas:\")\nfor i in df_train.select_dtypes(exclude = ['object']):\n    print(\"\\t\\t\"+i)\n\n#Variables con valores nulos\nprint(\"Variables con Nulos\")\nmissing_val_count = (df_train.isnull().sum())\nprint(missing_val_count[missing_val_count > 0])\n","214b93e9":"# Primero revisamos qu\u00e9 categor\u00edas existen\nvar_cat = [ \"Survived\", \"Pclass\", 'Sex', 'Cabin', 'Embarked']\ndf_train[var_cat].astype('category')\ndf_train[var_cat].nunique()\n","a23865e4":"df_train.Cabin.fillna(\"XX\", inplace = True)\ndf_train['Cabin_letter'] =df_train.Cabin.str.slice(0, 1)\npd.crosstab([df_train.Cabin_letter],[df_train.Survived],\n            margins=False, normalize='index').style.background_gradient(cmap='pink_r')\n","e467c52d":"# Distribuci\u00f3n por clase\nvar_cat = [ \"Survived\", \"Pclass\", 'Sex', 'Cabin_letter', 'Embarked']\nfor i in var_cat:\n    print(i)\n    c = df_train[i].value_counts(dropna=False)\n    p = round(df_train[i].value_counts(dropna=False, normalize=True),1)\n    print(pd.concat([c,p], axis=1, keys=['counts', '%']))","9e0c0008":"g = sns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", col=\"Embarked\", data=df_train, kind=\"bar\",palette='pink');\ng.set_xlabels(\"Sexo\")\ng.set_ylabels(\"Tasa de Supervivencia\")\n","99a8909d":"# Tabla cruzada para variables categ\u00f3ricas\npd.crosstab([df_train.Embarked,df_train.Pclass],[df_train.Sex,df_train.Survived],margins=True).style.background_gradient(cmap='pink_r')","92d46cd5":"# An\u00e1lisis por sexo-edad-tarifa \nsns.relplot(x='Age', y='Fare', data=df_train,\n            kind='scatter', hue='Survived', col='Sex', palette='pink_r')\n","4b041c4e":"# An\u00e1lisis por clase \nsns.relplot(x='Age', y='Fare', data=df_train,\n            kind='scatter', hue='Survived', col='Pclass', palette='pink_r')","035c2fc1":"# Pasaremos la edad a deciles para ver la dispersi\u00f3n m\u00e1s f\u00e1cilemente con respecto a la tarifa del ticket\ndf_train[\"Age_q\"] = pd.qcut(df_train['Age'], q=10, precision=0)\nsns.catplot(\n    data=df_train,\n    x='Age_q',\n    y='Fare',\n    row='Survived',\n    kind='box',\n    height=3, \n    aspect=4,\n    color='crimson')\n","17b39524":"# Finalmente revisado la distribbuci\u00f3n y relaci\u00f3n de las variables edad y tarifa\nplt.figure(figsize=(20, 10))\nsns.pairplot(df_train[[\"Age\",\"Fare\",\"Survived\"]], kind=\"reg\", diag_kind=\"kde\", hue=\"Survived\", palette=\"pink_r\")\nplt.show()\n","0550aa38":"# Selecci\u00f3n de datos\n## Eliminanos la columna Cabin y nos quedamos s\u00f3lo con la variable creada \"Cabin_letter\" \ndf_train.drop(\"Cabin\",axis = 1 ,  inplace = True)\n\n# Completamos las dos filas con datos nulos en \"Embarket\" por la \"Moda\" = S \ndf_train.loc[df_train[\"Embarked\"].isnull() , \"Embarked\"] = \"S\"\n#df_train.Embarked.value_counts()\n# Y, la variable \"Edad\" reemplazamos por la media de edad de acuerdo a la variable supervivencia, por clase y sexo\nfor s in range(0, 2):\n    for c in range(1, 4):\n        for g in [\"female\",\"male\"]:\n            media = (df_train.Age[(df_train.Survived == s) & (df_train.Pclass == c) & (df_train.Sex == g)].mean())\n            df_train.loc[(df_train.Age.isnull()) & (df_train.Survived == s) & (df_train.Pclass == c) & (df_train.Sex == g), \"Age\"] = media  \n            df_test.loc[ (df_test.Age.isnull())  & (df_test.Pclass == c)  & (df_test.Sex == g) , \"Age\"] = media  \n\n","f8491116":"from sklearn.preprocessing import RobustScaler\n# Revisamos los outliers\nQ1 = df_train[[\"Age\",\"Fare\"]].quantile(0.25)\nQ3 = df_train[[\"Age\",\"Fare\"]].quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)\nRS = RobustScaler(with_centering=False, with_scaling=True)\ndf_train[[\"Age\",\"Fare\"]] = RS.fit_transform(df_train[[\"Age\",\"Fare\"]])\n","0eaf7245":"# Las variables categ\u00f3ricas las transformaremos en columnas mediante la estrategia \"One-Hot\"\ndf_train_t = pd.get_dummies(df_train[[ \"Survived\",\"Age\",\"Fare\", 'Sex', 'Cabin_letter', 'Embarked']])\ndf_train_t = pd.concat( [df_train_t, pd.get_dummies(df_train.Pclass.astype(str))], axis = 1)\ndf_train_t.head()","b9ac11f6":"from sklearn.model_selection import train_test_split\ny = df_train_t[\"Survived\"]\nX = df_train_t.drop(['Survived'], axis=1, inplace=False)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)","ea83d014":"from sklearn.neighbors import KNeighborsClassifier\n\nmodelo =  KNeighborsClassifier(n_neighbors=3)\nmodelo.fit(X_train, y_train)\n","83f49c8c":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\ny_pred = modelo.predict(X_valid)\nprint(\"Accuracy:\",metrics.accuracy_score(y_valid, y_pred))","b333270d":"# Aplicamos las transformaciones al set de datos de test \nRS.transform(df_test[[\"Age\",\"Fare\"]])\ndf_test.loc[df_test[\"Embarked\"].isnull() , \"Embarked\"] = \"S\"\ndf_test.loc[df_test[\"Fare\"].isnull() , \"Fare\"] = df_train.Fare.mean() \ndf_test.Cabin.fillna(\"XX\", inplace = True)\ndf_test['Cabin_letter'] =df_test.Cabin.str.slice(0, 1)\ndf_test_t = pd.get_dummies(df_test[[ \"Age\",\"Fare\", 'Sex', 'Cabin_letter', 'Embarked']])\ndf_test_t.insert(11, \"Cabin_letter_T\", 0) # No hab\u00eda nadie en la zona T \ndf_test_t = pd.concat( [df_test_t, pd.get_dummies(df_test.Pclass.astype(str))], axis = 1)\ndf_test_t.head()","9400c8f9":"# Generate test predictions\npreds_test = modelo.predict(df_test_t)\n\n\n# Save predictions in format used for competition scoring\noutput = pd.DataFrame({'PassengerId': df_test_t.index,\n                       'Survived': preds_test})\noutput.to_csv('submission_T_KNN_v2.csv', index=False)","4451251b":"Las variables categ\u00f3ricas tienen un bajo n\u00famero de categor\u00edas. Cabina tiene 148, lo que su transformaci\u00f3n podr\u00eda generar muchas columas. \nAnalicemos si cabina es relavante o no respecto a la variable de supervivencia pero s\u00f3lo considerando la primera letra de la cabina para reducir la dimensionalidad.","e536240d":"## An\u00e1lisis de Variables Categ\u00f3ricas","81aacbbf":"Este modelo genera el siguiente resultado:\n>> Public Score : 0.58612","5b754380":"Luego realizamos las tranformaciones","b5cb6bf5":"Vemos que las cabinas tienen algo de relaci\u00f3n con la supervivencia. Si bien, la mayor\u00eda de los datos no tiene una cabina asociada. En los casos que hay cabina asociada la probabilidad de sobrevivir es mayor en comparaci\u00f3n con los que no tienen cabina ($X$), sobre todo en las cabinas del grupo $B,D$ y $E$.\n\nLuego, en un tabla muy resumida podemos mirar c\u00f3mo se compartan las variables categ\u00f3ricas. ","fba516ca":"## An\u00e1lisis de Variables Num\u00e9ricas\n\nAhora miremos el comportamiento de las variables num\u00e9ricas con respecto a la variable objetivo.","33601aef":"## Generaci\u00f3n del resultado par la competencia","0fdb02be":"Donde la columna \"Survived\" es nuestra variable objetivo $y$ (dependiente) tomando los valores:\n$ \\begin{equation}\n    y_i =\n    \\begin{cases}\n      1, & \\text{si} \\ pasajero\\ i\\ sobrevive , \\\\\n      0, & \\text{si no}\n    \\end{cases}\n  \\end{equation}$\n \n Y las variables independientes para la matriz $X$ son {'Pclass',  'Name',  'Sex',  'Age',  'SibSp',  'Parch',  'Ticket', 'Fare',  'Cabin',  'Embarked'}. La columna \"PassengerId\" se asign\u00f3 como \u00edndice, no se debe utilizar para como variable explicativa. Adem\u00e1s, dentro de las variables de texto, descartar\u00e9 las variables \"Name\" y \"Ticket\".","9bbff98f":"Creamos nuestros datos de entrenamiento y validaci\u00f3n","217807d0":"# Caso Titanic - Predicci\u00f3n de Supervivencia\n\nDesaf\u00edo: predecir qu\u00e9 pasajero sobrevive luego del accidente del Titanic. \n\n\n## Datos\nExiste un set de datos para entrenar y otro para testear. Para entregar los resultados de la competencia se debe usar s\u00f3lo el de testeo. \n\nLos datos consisten en el detalles de un subconjunto de 891 pasajeros a bordo con las siguientes columnas:\n\n","c1ddda41":"Al separar las variables n\u00famericas vemos que existen variables categ\u00f3ricas dentro de ellas y debemos identificar como tal para poder generar un modelo. \nAdem\u00e1s existen variables con nulos. \nEmbarked s\u00f3lo tiene 2 por lo que se elimar\u00e1n la filas, Cabina se reemplazar\u00e1 por \"SC\" (\"Sin cabina\") y Age se realizar\u00e1 una imputaci\u00f3n. \n","b7561cf7":"## Diccionario de Datos\nDe acuerdo con la descripcion de los datos las variables representan lo siguiente: \n\n| *Variable*\t| *Definition*\t| *Key* |\n| :---------- | :------------- | :------------- |\n|survival\t|Sobreviviente|\t0 = No, 1 = Yes|\n|pclass\t|Clase |\t1 = 1st, 2 = 2nd, 3 = 3rd|\n|sex\t|Sexo\t| male - female |\n|Age\t|Edad en a\u00f1os\t| |\n|sibsp\t|# herman@s \/ c\u00f3nyuges abordo| |\n|parch\t|# de padres \/ hij@s abordo\t| |\n|ticket\t|N\u00b0 de Ticket \t| | \n|fare\t|Tarifa de pasajero\t| |\n|cabin\t|N\u00b0 de Cabina\t| |\n|embarked|\tPuerto de Embarcaci\u00f3n|\tC = Cherbourg, Q = Queenstown, S = Southampton|\n\n\n","0f6f9680":"# IV. Evaluaci\u00f3n \/ Validaci\u00f3n\n","d29c9488":"# II. Limpieza y Transformaci\u00f3n\nComo vimos en el an\u00e1lisis exploratorio, es necesario procesar las variables categ\u00f3ricas y limpiar las variables n\u00famericas debido a la presencia de outlier y valores faltantes. \n\nCon ello se realizar\u00e1n los siguientes ajustes:\n- Variables categ\u00f3ricas se trabsformaran  mediante \"One-Hot\" \n- Variales con outliers: \n- Variables con nulos: se reemplazar\u00e1n por la media\/moda \n","bdd71c55":"# III. Ajuste del Modelo","c04b9786":"# I. An\u00e1lisis Exploratorio de Datos (Exploratory data analysis - EDA) \n\nPara comenzar, debemos comprender los datos disponibles e identificar si es necesario realizar alguna limpieza o transformaci\u00f3n sobre ellos. Tambi\u00e9n se debe evaluar si las columnas contiene informaci\u00f3n relavante para ser utilizadas dentro del modelo."}}