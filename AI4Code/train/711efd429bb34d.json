{"cell_type":{"0426b5c4":"code","067cd244":"code","9db99ad3":"code","d5ab053b":"code","e5145d8d":"code","fe51537e":"code","eb4e8279":"code","c166bb8f":"code","502ef6ea":"code","4d1f5bc0":"code","744f49db":"code","85f44b34":"code","21809a07":"code","550f64ad":"code","c6567dc1":"code","3b7ec554":"code","0801dde6":"code","a3822d56":"code","f2f23430":"code","60a3e86e":"code","0dfbac82":"code","75d1bf12":"markdown","23973e5d":"markdown","278d3d1a":"markdown","646ea38e":"markdown","4d1c460e":"markdown","2fb4ebf6":"markdown","0f28123f":"markdown","9b792395":"markdown","fb83788e":"markdown","35b6fde2":"markdown"},"source":{"0426b5c4":"# Importing libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')","067cd244":"# Read the data\ncall_data = pd.read_csv(\"..\/input\/montcoalert\/911.csv\")","9db99ad3":"call_data.head()","d5ab053b":"# Convert to datetime\ncall_data['timeStamp'] = pd.to_datetime(call_data['timeStamp'])","e5145d8d":"call_data.head()","fe51537e":"# Extract the date, year, month, hour\n\ncall_data['date'] = call_data['timeStamp'].dt.date\ncall_data['day'] = call_data['timeStamp'].dt.day\ncall_data['year'] = call_data['timeStamp'].dt.year\ncall_data['month'] = call_data['timeStamp'].dt.month\ncall_data['hour'] = call_data['timeStamp'].dt.hour","eb4e8279":"# plot the day and month count distribution\nplt.style.use('ggplot')\nfig, ax = plt.subplots(1,2, figsize=(20,5))\ncall_data['day'].value_counts().plot(kind='bar', ax=ax[0])\ncall_data['month'].value_counts().plot(kind='bar', ax=ax[1])\nax[0].set_xlabel(\"Days\")\nax[0].set_title(\"Day Count\")\nax[1].set_xlabel(\"Months\")\nax[1].set_title(\"Month Count\")\nplt.show()","c166bb8f":"# Plot the year distribution\nplt.style.use('ggplot')\ncall_data['year'].value_counts().plot(kind='bar')\nplt.xlabel(\"Year\")\nplt.title(\"Year Count\")\nplt.show()","502ef6ea":"call_data.head()","4d1f5bc0":"# Group the data by hour\ndate_grouped_data = call_data.groupby(by = ['date', 'hour']).count()['title'].reset_index()","744f49db":"pd.set_option('display.MAX_COLUMNS', None)\ncall_data_date = pd.pivot_table(data=date_grouped_data, values='title', index='date', columns='hour').fillna(0)","85f44b34":"# Plot the Number of calls recieved per hour\ncall_data_date.plot(kind='box')\nplt.title(\"Hour Count Distribution\")\nplt.xlabel(\"Number of calls per hour\")\nplt.show()","21809a07":"# Plot the Mean and Median of the number of calls per Hour\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\ncall_data_date.mean().plot(kind='bar', ax=ax[0])\ncall_data_date.median().plot(kind='bar', ax=ax[1])\nax[0].set_title(\"Mean Number of Calls per Hour\")\nax[1].set_title(\"Median Number of Calls per Hour\")\nplt.show()","550f64ad":"# Estimating the number of calls that can be expect at 5pm with 99% Confidence and the number of people required to address those calls (Capacity Planning).\n\nfive_pm_call_data = call_data_date[17].reset_index().rename(columns={17 : 'Num_Calls_at_5_pm'})\n\n# CLT : Central Limit Theorem\nsample_size = 1000\nsample_mean_call_data = []\nfor i in range(sample_size):\n    \n    # Sample the data \n    sample_data = np.random.choice(five_pm_call_data['Num_Calls_at_5_pm'].values, size=sample_size)\n    \n    # Compute the sample mean\n    sample_mean = sample_data.mean()\n    \n    # Store the sample mean and create the sample distribution\n    sample_mean_call_data.append(sample_mean)","c6567dc1":"# Plot the sample distribution\nsns.distplot(sample_mean_call_data)\nplt.show()","3b7ec554":"'''\n2 major conditions that must be satisified according to the CLT:\n\n1. Sample Distribution must be representative of the whole population.\n2. Standard Error should be small enough.\n'''\n\n# We have taken a sample size of 1000 which is suffecient to represent the whole population\n\n# Next we will compute the standard error. The standard error is defined as the ratio of the standard deviation of the sample distribution to the square root of the sample size.\nstd_error = np.std(sample_mean_call_data)\/np.sqrt(sample_size)\nprint(std_error)","0801dde6":"# Print the population mean and the standard deviation\npopulation_mean = np.mean(sample_mean_call_data)\npopulation_standard_dev = np.std(sample_mean_call_data)\n\nprint(\"Mean number of calls at 5 pm {:.3f}\".format(population_mean))\nprint(\"Standard Deviation of number of calls at 5 pm {:.3f}\".format(population_standard_dev))","a3822d56":"# We have generated the sample distribution with the help of CLT, Now we can comment on how many calls we can expect with a certain confidence interval\n\nconfidence_interval = 99 # Reason for picking such high confidence interval is because 911 is an emergency number and missing a call is not affordable. Hence, going ahead with 99%\n\nnum_calls_at_5_pm_99_cf_iv = np.percentile(sample_mean_call_data, q = confidence_interval)\nprint(\"Number of calls expected at 5 pm with 99% confidence interval will be less than {:d} calls\".format(int(np.round(num_calls_at_5_pm_99_cf_iv))))","f2f23430":"# Finding the number of people to attend calls\nnum_people = np.ceil(num_calls_at_5_pm_99_cf_iv\/5)\nprint(\"Number of people required at the facility to attend calls at 5pm is {}\".format(num_people))","60a3e86e":"# Generalising the results for every hour\n\ndef capacity_planning(hour, call_data_date = call_data_date, confidence_interval = 99, sample_size=1000):\n    \n    hour_call_data = call_data_date[hour].reset_index()\n\n    # CLT : Central Limit Theorem\n    sample_mean_call_data = []\n    for i in range(sample_size):\n\n        # Sample the data \n        sample_data = np.random.choice(hour_call_data[hour].values, size=sample_size)\n\n        # Compute the sample mean\n        sample_mean = sample_data.mean()\n\n        # Store the sample mean and create the sample distribution\n        sample_mean_call_data.append(sample_mean)\n        \n    # calculating the population mean and standard deviation\n    population_mean = np.mean(sample_mean_call_data)\n    population_standard_dev = np.std(sample_mean_call_data)\n    \n    num_calls_at_hour_cf_iv = np.percentile(sample_mean_call_data, confidence_interval)\n    print(\"Number of calls expected at {} pm with {}% confidence interval will be less than {:d} calls and the number of people required are {}\".format(hour, confidence_interval, int(np.round(num_calls_at_hour_cf_iv)), int(np.round(num_calls_at_hour_cf_iv)\/5)+1))\n","0dfbac82":"# Print the expected number of calls for each hour and the required number of agents\/peronnel required at the call center to address the calls\nhours = np.unique(call_data['hour'])\nfor hour in hours:\n    capacity_planning(hour=hour)\n    \n# Note : Here, I have assumed that one person can answer 5 calls, using this info. I have calculated the estimated number of people required","75d1bf12":"**<p style = \"color : crimson ; font-family: Garamond ; font-size : 20px\"> Next we will implement the Central Limit Theorem to find the actual mean of the population. First, we will sample the data and find the mean of those samples and store the mean values in a list to create what is known as the <a style=\"color : black\" href = \"https:\/\/www.investopedia.com\/terms\/s\/sampling-distribution.asp#:~:text=A%20sampling%20distribution%20is%20a,a%20statistic%20of%20a%20population\" > SAMPLE DISTRIBUTION.**","23973e5d":"**<p style = \"font-family : Garamond ; font-size : 20px\">The standard error ie. ~0.012 is pretty small.**","278d3d1a":"![image.png](attachment:8a08331e-8d07-4c02-8a2d-24867a03e849.png)","646ea38e":"**<p style = \"color : crimson ; font-family: Garamond ; font-size : 20px\">\nNow, the Central Limit Theorem (CLT) states that, if the sample population is a good representation of the entrie population\nand the standard error is small enough then the mean and the standard deviation of the sample distribution represent the mean and standard\ndeviation of the population.**\n","4d1c460e":"**<p style = \"color : Black ; font-family: Garamond ; font-size : 20px\"> Performing Capacity Plannig for every hour.**","2fb4ebf6":"**<p style = \"font-family : Garamond ; font-size : 20px\"> Not much difference observed in Mean and Median can be observed.**","0f28123f":"# <p style = \"color : crimson ; font-family: Helvetica Neue ; font-size : 40px \"> Central Limit Theorem and Capacity Planning\n**<p style = \"color : Black ; font-family: Garamond ; font-size : 20px\"> Call center capacity planning is about best aligning your call center resources (agents) to the level of work you anticipate coming in at a given time, all while best utilizing agents time and optimizing customer satisfaction. In case of Emergency Call Centers like 911 call center it is very crucial to find the optimal number of personnel required at the center so, that every emergency call can be addressed. In this notebook, I will be using the Central Limit Theorem and the Poission Distribution to find the ideal number of personnel required at the 911 Call Center at every hour based on the expected number of calls at every hour.**\n    \n**<p style = \"color : Crimson ; font-family: Helvetica Neue ; font-size : 20px\">NOTE :  <\/p> <p style = \"color :  Black ; font-family: Garamond ; font-size : 20px\"> The number of calls will be estimated at a certain confidence interval.**","9b792395":"**<p style = \"color : crimson ; font-family: Garamond ; font-size : 20px\"> We have calculated the expected number of calls at 5 pm with 99% confidence interval. Now, the next step involves finding the right number of personnel to attend all these calls. Let us assume that one person can take 5 calls, then total number of people required to attend 27 calls will be around 6.**","fb83788e":"**<p style = \"color : Black ; font-family: Garamond ; font-size : 20px\"> This was the application of the Central Limit Theorem to find the expected number of calls at a particular hour with a certain confidence interval and the number of people required to answer those calls.**\n    \n**<p style = \"color : Crimson ; font-family: Garamond ; font-size : 20px\"> Please do write your feedback in the comment section and do upvote it if you find it helpful. Happy Learning :)**","35b6fde2":"# <p style = \"color : crimson ; font-family: Helvetica Neue ; font-size : 40px \">Central Limit Theorem\n**<p style = \"color : Black ; font-family: Garamond ; font-size : 20px\"> In probability theory, the <a href = \"https:\/\/www.investopedia.com\/terms\/c\/central_limit_theorem.asp\" style = \"color:crimson\">central limit theorem (CLT) <\/a>states that the distribution of a sample variable approximates a normal distribution (i.e., a \u201cbell curve\u201d) as the sample size becomes larger, assuming that all samples are identical in size, and regardless of the population's actual distribution shape.**"}}