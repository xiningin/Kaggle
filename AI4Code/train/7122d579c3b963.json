{"cell_type":{"2c202bf4":"code","1a7482d6":"code","04fa4dc1":"code","992f6950":"code","1196d281":"code","21d2f59d":"code","a32df147":"code","76248d06":"code","cec9159b":"code","8459db1d":"code","082dd5bd":"code","a838c833":"code","0526401f":"code","deeff97c":"code","7683c50a":"code","be80c1f4":"code","0ed0af78":"code","b48cbebe":"code","d5082063":"code","53ed811e":"code","eef2ccd4":"code","47e9e93d":"code","209a3795":"code","5e090041":"markdown","738563c5":"markdown","c90a1b29":"markdown","efd668c2":"markdown","684cea78":"markdown","fa9bbeb2":"markdown"},"source":{"2c202bf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom keras_preprocessing.image import ImageDataGenerator\nimport os\n\n\nfrom numpy import loadtxt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom catboost import CatBoostClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a7482d6":"# Read the dataset\nheartData = pd.read_csv('\/kaggle\/input\/heart-disease-prediction\/heart_v2.csv')","04fa4dc1":"# Print first few rows of the dataset\nheartData.head()","992f6950":"# Checking for any missing data\nheartData.info()","1196d281":"# Visualizing the data for patterns\nage_1 = len(heartData[heartData.age <= 18])\nage_2 = len(heartData[(heartData.age > 19) & (heartData.age <= 40)])\nage_3 = len(heartData[(heartData.age > 41) & (heartData.age <= 60)])\nage_4 = len(heartData[heartData.age > 61])\nx = ['<18','19-40','41-60','>60']\ny = [age_1,age_2,age_3,age_4]\nfig = plt.figure(figsize =(10, 7)) \nplt.bar(x, y) \nplt.show() ","21d2f59d":"# Visualizing the data for patterns\nage_1 = len(heartData[heartData.age <= 18])\nage_2_0 = len(heartData[(heartData.age > 19) & (heartData.age <= 40) & (heartData['heart disease'] ==0)])\nage_2_1 = len(heartData[(heartData.age > 19) & (heartData.age <= 40) & (heartData['heart disease'] == 1)])\n\nage_3_0 = len(heartData[(heartData.age > 41) & (heartData.age <= 60) & (heartData['heart disease'] == 0)])\nage_3_1 = len(heartData[(heartData.age > 41) & (heartData.age <= 60) & (heartData['heart disease'] == 1)])\n\nage_4_0 = len(heartData[(heartData.age > 61) & (heartData['heart disease'] == 0)])\nage_4_1 = len(heartData[(heartData.age > 61) & (heartData['heart disease'] == 1)])","a32df147":"labels = ['<18','19-40','41-60','>60']\nHD =  [age_1,age_2_1,age_3_1,age_4_1]\nDHD = [age_1,age_2_0,age_3_0,age_4_0]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize =(10, 7))\nrects1 = ax.bar(x - width\/2, HD, width, label='Have Heart Disease')\nrects2 = ax.bar(x + width\/2, DHD, width, label='Dont have Heart Disease')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of People')\nax.set_title('Age vs Suffering from Heart Disease')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","76248d06":"# Visualizing the data for patterns\nmale = len(heartData[heartData.sex == 1])\nfemale = len(heartData[heartData.sex == 0])\n\nmale_0 = len(heartData[(heartData.sex == 1) & (heartData['heart disease'] == 0)])\nmale_1 = len(heartData[(heartData.sex == 1) & (heartData['heart disease'] == 1)])\n\nfemale_0 = len(heartData[(heartData.sex == 0) & (heartData['heart disease'] == 0)])\nfemale_1 = len(heartData[(heartData.sex == 0) & (heartData['heart disease'] == 1)])","cec9159b":"labels = ['Male','Female']\nHC =  [male_1,female_1]\nDHC = [male_0,female_0]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize =(10, 7))\nrects1 = ax.bar(x - width\/2, HC, width, label='Have Heart Disease')\nrects2 = ax.bar(x + width\/2, DHC, width, label='Dont have Heart Disease')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of People')\nax.set_title('Gender vs Suffering from Heart Disease')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","8459db1d":"heartData.BP.describe()","082dd5bd":"bp_1 = len(heartData[heartData.BP < 120])\nbp_2 = len(heartData[(heartData.BP >= 120) & (heartData.BP <= 129)])\nbp_3 = len(heartData[(heartData.BP >= 130) & (heartData.BP <= 139)])\nbp_4 = len(heartData[(heartData.BP >= 140) & (heartData.BP <= 179)])\nbp_5 = len(heartData[(heartData.BP >= 180)])\n\nx = ['Normal(<120)','Elevated(120-129)','High BP Stage 1(130-139)','High BP Stage(140-179)','Hypertensive Crisis']\ny = [bp_1,bp_2,bp_3,bp_4,bp_5]\nfig = plt.figure(figsize =(10, 7)) \nplt.xticks(rotation=45)\nplt.bar(x, y) \nplt.show() ","a838c833":"bp_1_0 = len(heartData[(heartData.BP < 120) & (heartData['heart disease'] == 0)])\nbp_1_1 = len(heartData[(heartData.BP < 120) & (heartData['heart disease'] == 1)])\n\nbp_2_0 = len(heartData[(heartData.BP >= 120) & (heartData.BP <= 129) & (heartData['heart disease'] == 0)])\nbp_2_1 = len(heartData[(heartData.BP >= 120) & (heartData.BP <= 129) & (heartData['heart disease'] == 1)])\n\n\nbp_3_0 = len(heartData[(heartData.BP >= 130) & (heartData.BP <= 139) & (heartData['heart disease'] == 0)])\nbp_3_1 = len(heartData[(heartData.BP >= 130) & (heartData.BP <= 139) & (heartData['heart disease'] == 1)])\n\nbp_4_0 = len(heartData[(heartData.BP >= 140) & (heartData.BP <= 179) & (heartData['heart disease'] == 0)])\nbp_4_1 = len(heartData[(heartData.BP >= 140) & (heartData.BP <= 179) & (heartData['heart disease'] == 1)])\n\nbp_5_0 = len(heartData[(heartData.BP >= 180) & (heartData['heart disease'] == 0)])\nbp_5_1 = len(heartData[(heartData.BP >= 180) & (heartData['heart disease'] == 1)])","0526401f":"labels = ['Normal(<120)','Elevated(120-129)','High BP Stage 1(130-139)','High BP Stage(140-179)','Hypertensive Crisis']\n\nHC =  [bp_1_0,bp_2_0,bp_3_0,bp_4_0,bp_5_0]\nDHC = [bp_1_1,bp_2_1,bp_3_1,bp_4_1,bp_5_1]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize =(10, 7))\nrects1 = ax.bar(x - width\/2, HC, width, label='Have Heart Disease')\nrects2 = ax.bar(x + width\/2, DHC, width, label='Dont Have Heart Disease')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of People')\nax.set_title('BP vs Suffering from Heart Disease')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","deeff97c":"cl_1_0 = len(heartData[(heartData.cholestrol <= 150) & (heartData['heart disease'] == 0)])\ncl_1_1 = len(heartData[(heartData.cholestrol <= 150) & (heartData['heart disease'] == 1)])\n\ncl_2_0 = len(heartData[(heartData.cholestrol >= 151) & (heartData.cholestrol <= 199) &  (heartData['heart disease'] == 0) ])\ncl_2_1 = len(heartData[(heartData.cholestrol >= 151) & (heartData.cholestrol <= 199) &  (heartData['heart disease'] == 1) ])\n\ncl_3_0 = len(heartData[(heartData.cholestrol >= 200) & (heartData.cholestrol <= 499) &  (heartData['heart disease'] == 0) ])\ncl_3_1 = len(heartData[(heartData.cholestrol >= 200) & (heartData.cholestrol <= 499) &  (heartData['heart disease'] == 1) ])\n\ncl_4_0 = len(heartData[(heartData.cholestrol >= 500) &  (heartData['heart disease'] == 0) ])\ncl_4_1 = len(heartData[(heartData.cholestrol >= 500) &  (heartData['heart disease'] == 1) ])\n","7683c50a":"labels = ['Normal(<150)','Borderline High(150-199)','High(200-499)','Very High']\n\nHC =  [cl_1_0,cl_2_0,cl_3_0,cl_4_0]\nDHC = [cl_1_1,cl_2_1,cl_3_1,cl_4_1]\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize =(10, 7))\nrects1 = ax.bar(x - width\/2, HC, width, label='Have Heart Disease')\nrects2 = ax.bar(x + width\/2, DHC, width, label='Dont Have Heart Disease')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Number of People')\nax.set_title('Cholestrol vs Suffering from Heart Disease')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","be80c1f4":"plt.figure(figsize = (10,5))\nsns.heatmap(heartData.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","0ed0af78":"heartData_1 = heartData.iloc[0:250]\nX = heartData_1.drop(\"heart disease\", axis=1)\ny = heartData_1[\"heart disease\"]","b48cbebe":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)\ncat_features = list(range(0, X.shape[1]))\nprint(cat_features)","d5082063":"clf = CatBoostClassifier(\n    iterations=20, \n    learning_rate=0.5, \n    #loss_function='CrossEntropy'\n)\n\n\nclf.fit(X_train, y_train, \n        cat_features=cat_features, \n        eval_set=(X_val, y_val), \n        verbose=False\n)\n\nprint('CatBoost model is fitted: ' + str(clf.is_fitted()))\nprint('CatBoost model parameters:')\nprint(clf.get_params())","53ed811e":"print(clf.predict_proba(data=X_val))","eef2ccd4":"print(clf.predict(data=X_val))","47e9e93d":"heartData_2 = heartData.iloc[251:269]\nX_test = heartData_2.drop(\"heart disease\", axis=1)\ny_test = heartData_2[\"heart disease\"]","209a3795":"y_pred = clf.predict(data=X_test)\nprint(1 - (np.sum(np.abs(y_pred-y_test))\/len(X_test)))","5e090041":"### The above graph shows that there is a huge chunk of data about people in age of 41-60 with heart diseases. We dont have data for pediatric heart diseases","738563c5":"### WIth CATBOOST approach we achieve an accuracy of 72% for totally unseen data points.","c90a1b29":"### From the below table we can see the various ranges and stages of Blood pressure. THe plots below show how people are suffering from heart diseases because of differnt types of BP\n\n![image.png](attachment:image.png)","efd668c2":"### As we can see from the above correlation table. All the provided features have very less correlation with the target variable. Hence, there is a high possiblity that the modelling accuracy will be low.","684cea78":"### The Triglyceride levels are generally indicative of the levels of Cholestorl. Below table illustrates the ranges\n![image.png](attachment:image.png)","fa9bbeb2":"### Above graph shows that people in Ages 41-60 are more prone to heart diseases than people in the age group of above 60. This gives us more idea about the people in the dataset, are suffering from stress related heart diseases."}}