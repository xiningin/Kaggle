{"cell_type":{"e5eda493":"code","f9e92bf2":"code","2000c479":"code","94ed1edf":"code","cb5faf90":"code","d0be3db5":"code","21e5d976":"code","d1bc9a2d":"code","7ae3f0bd":"code","7b56267b":"code","f109e561":"code","1749a459":"code","113980d5":"code","a256a52a":"code","25750b08":"code","415db6f2":"code","1bb98e6b":"code","45715b70":"code","efe5c8e1":"code","a0af3eb3":"code","94f3e66f":"code","494bc124":"code","808afa7b":"code","1c2d0895":"code","9ae3a26d":"code","b0d5f235":"code","2176c3ba":"code","af08ba68":"code","cb46839c":"code","21ace5e5":"code","0a648e5c":"code","a630b9f2":"code","41f53227":"code","adc0e802":"code","42f42b36":"markdown","c2d1346b":"markdown","37c5d683":"markdown","9b0e36c5":"markdown","dcdaf1ac":"markdown","6549871e":"markdown","de67b7e0":"markdown","166f05af":"markdown","140d28c7":"markdown","4e559bf7":"markdown","94b342ba":"markdown","c45e6355":"markdown","91f73f02":"markdown","3b60dd86":"markdown","e217b5e0":"markdown"},"source":{"e5eda493":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 14,7\n\nimport warnings\nwarnings.filterwarnings('ignore')","f9e92bf2":"# loading data into dataframe\ndf = pd.read_csv('..\/input\/covid19-confirmed-cases-kerala\/Covid 19 Confirmed Cases-Kerala.csv')","2000c479":"#parse strings to datetime type\ndf['Date']=pd.to_datetime(df['Date'], infer_datetime_format=True)\n\n# set Date column as index\ndf = df.set_index('Date')","94ed1edf":"# first five rows of dataframe\ndf.head()","cb5faf90":"# last 5 rows of dataframe\ndf.tail()","d0be3db5":"# column names\ndf.columns","21e5d976":"# shape of the dataframe\ndf.shape","d1bc9a2d":"# concise summary of dataframe\ndf.info()","7ae3f0bd":"# checking for null values\ndf.isnull().sum()","7b56267b":"# descriptive statistics of data\ndf.describe()","f109e561":"# plot graph\n\nplt.xlabel('Dates')\nplt.ylabel('Confirmed Cases')\nplt.title('Date vs Confirmed Cases')\nplt.plot(df, color='b')","1749a459":"# rolling mean\nrolmean = df.rolling(window=3).mean()\nrolmean.head()","113980d5":"# rolling standard deviation\nrolstd = df.rolling(window=3).std()\nrolstd.head()","a256a52a":"# plotting rolling statistics\norg = plt.plot(df, color='b', label='Original')\nmean = plt.plot(rolmean, color='r', label='Rolling Mean')\nstd = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","25750b08":"# perform Dickey-Fuller test\nfrom statsmodels.tsa.stattools import adfuller\n\nprint('Results of Dickey-Fuller Test')\n\ndftest = adfuller(df.Confirmed, autolag='AIC')\n\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p value','#Lags used', 'No:of observations found'])\nfor key, value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)","415db6f2":"# Wrapping visual and statistical tools in a single function\n\ndef test_stationarity(timeseries):\n    \n    # Determining rolling statistics\n    rolmean = timeseries.rolling(window=3).mean()\n    rolstd = timeseries.rolling(window=3).std()\n    \n    # Plot rolling statistics\n    org = plt.plot(timeseries, color='b', label='Original')\n    mean = plt.plot(rolmean, color='r', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    # perform Dickey-Fuller test\n    print('Results of Dickey-Fuller Test')\n    dftest = adfuller(timeseries.Confirmed, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p value','#Lags used', 'No:of observations found'])\n    for key, value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value    \n    print(dfoutput)","1bb98e6b":"test_stationarity(df)","45715b70":"movingAverage = df.rolling(window=3).mean()\ndf_minus_movingAverage = df - movingAverage\ndf_minus_movingAverage.head(7)","efe5c8e1":"# dropping nan values\ndf_minus_movingAverage.dropna(inplace=True)\ndf_minus_movingAverage.head()","a0af3eb3":"# dropping nan values\nmovingAverage.dropna(inplace=True)\nmovingAverage","94f3e66f":"test_stationarity(df_minus_movingAverage)","494bc124":"#checking lags\n\nfrom statsmodels.tsa.stattools import arma_order_select_ic\narma_order_select_ic(df_minus_movingAverage)","808afa7b":"from statsmodels.tsa.arima_model import ARIMA\n# ARIMA Model\n\nprint('Plotting ARIMA Model')\nmodel = ARIMA(df_minus_movingAverage, order=(4,0,2))\nresults_ARIMA = model.fit(disp=1)\nplt.plot(df_minus_movingAverage,color='b')\nplt.plot(results_ARIMA.fittedvalues, color='r')\nplt.title('RSS: {:1.4f}'.format(sum((results_ARIMA.fittedvalues-df['Confirmed'])**2)))\nplt.show()","1c2d0895":"# to pandas series\npred_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)\npred_ARIMA_diff","9ae3a26d":"#to dataframe\n\npred_ARIMA = pred_ARIMA_diff.to_frame()\npred_ARIMA.tail()","b0d5f235":"# converting back to orginal by adding moving averages\n\nmodel_values = pred_ARIMA[0] + movingAverage['Confirmed']\nmodel_values.tail()","2176c3ba":"# plotting fitted model\nplt.plot(df, color='b', label='Original')\nplt.plot(model_values, color='r', label='Model')\nplt.xlabel('Date')\nplt.ylabel('Confirmed Cases')\nplt.legend(loc='best')\nplt.show(block=False)","af08ba68":"# orginal data have 545 rows. Prediction for next 14 days\n# 545 + 14 =559\n\nresults_ARIMA.plot_predict(1, 559)","cb46839c":"# forecast values for next 2 weeks\nfc=results_ARIMA.forecast(steps=14)\nforecast = fc[0]\nforecast","21ace5e5":"# new dataframe with last 3 rows from orginal dataframe\nnew_df = df.tail(3)\nnew_df\n\n# converting forecast value to orginal scale\nfor fc in forecast:\n    s = new_df.iloc[-2:].sum()\n    value = ((3*fc)+s)\/2\n    new_df = new_df.append(value, ignore_index=True)\n    \n# printing first five rows of new dataframe\nnew_df.head()","0a648e5c":"# date range from July 29 to August 11 (2 week)\ndate=pd.date_range('2021-07-29','2021-08-11')\ndate","a630b9f2":"# forecast dataframe\nforcast_df = pd.DataFrame({'Date':date,\n                           'Confirmed':new_df['Confirmed'][3:]}) \n\n# set datatype to datetime format\nforcast_df['Date']=pd.to_datetime(forcast_df['Date'], infer_datetime_format=True)\n\n# set Date column as index\nforcast_df = forcast_df.set_index('Date')","41f53227":"# Predicted Covid-19 Confirmed Cases for next 2 weeks\nforcast_df","adc0e802":"# Prediction Plotting\n\norgi = plt.plot(df, color='b', label='Original')\npredi = plt.plot(forcast_df, color='r', label='Predicted')\nplt.legend(loc='best')\nplt.title('Covid Confirmed Cases Prediction')\nplt.show(block=False)","42f42b36":"Doing **Time Series Analysis** on [Latest Covid-19 Confirmed Cases Kerala](http:\/\/www.kaggle.com\/anandhuh\/covid19-confirmed-cases-kerala) Dataset, using **ARIMA** model, I will predict Covid-19 confirmed cases for next 2 weeks","c2d1346b":"The first case of the COVID-19 pandemic in Kerala (which was also the first confirmed case in all of India) was confirmed in Thrissur on 30 January 2020. On 12 May 2021 Kerala reported the largest single day spike with 43,529 new cases. As of 26 July 2021, there have been 32,83,116 confirmed cases, test positivity rate is at 10.59% (12.46% cumulative), (thrice the national average) with 31,29,628 (95.32%) recoveries and 16,170 deaths in the state.","37c5d683":"### Getting predictions","9b0e36c5":"## Determining Rolling Statistics","dcdaf1ac":"## Converting non stationary data to stationary data","6549871e":"#### Differencing simple moving average","de67b7e0":"- Since **Test statistic > Critical value(5%)** (or since p value > 0.05), data is **not stationary**","166f05af":"## ARIMA Model","140d28c7":"## **Thank You**","4e559bf7":"# Time Series Analysis Covid19 Cases-ARIMA Model","94b342ba":"## Importing Libraries","c45e6355":"## Reading dataset","91f73f02":"## Exploratory Data Analysis","3b60dd86":"- Since **p value < 0.05**, data is now **stationary**","e217b5e0":"## Dickey-Fuller Test"}}