{"cell_type":{"1af80a00":"code","aa98ca7e":"code","1f1ec23f":"code","03ea208d":"code","a7c3458b":"code","2bc7b897":"code","2dd3c7b2":"code","48dfbc93":"code","7971c7c3":"code","6a7f2c70":"code","1933051a":"code","7798d007":"code","3371b237":"code","5ea40e4b":"code","2c0dd7ae":"code","5175d64e":"code","42acf5de":"code","3eac65aa":"code","0286c29b":"code","56944db6":"code","70d869db":"code","e4e54acf":"code","81983801":"code","88007d7d":"code","e52a4dab":"code","4fa1b2b3":"code","573c54ea":"code","2be062c5":"code","c84917a1":"code","a0009e19":"code","485a6882":"code","f8e2d52d":"code","f5261acd":"code","8526b7c9":"code","1334d0a5":"code","cf94666b":"code","8024edad":"code","9135b646":"code","af946377":"code","d8bbe9b5":"markdown","c28ee13f":"markdown","5169e6ec":"markdown","bd7aa3b5":"markdown","c9b40d34":"markdown","ed6d361d":"markdown","d654421f":"markdown","bf0582ea":"markdown","7e30d064":"markdown","741816ec":"markdown","5cc2b8e1":"markdown"},"source":{"1af80a00":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('display.max_columns',None)\n\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\n\n\n","aa98ca7e":"df =pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf","1f1ec23f":"df.info()","03ea208d":"df.describe()","a7c3458b":"sns.countplot(df['Churn'])","2bc7b897":"# What is the percentage of customers that are leaving?\n\nretained = df[df['Churn']=='No'].shape[0]\nleft = df[df['Churn']=='Yes'].shape[0]\n\nretained_percentage = 100*retained\/(retained + left)\n\nprint('Loyal Customers percentage = ', retained_percentage , '%')\nprint('Churn Customers percentage = ', 100- retained_percentage , '%')\n","2dd3c7b2":"df.head(2)","48dfbc93":"df.columns","7971c7c3":"# Creating SubPlots\n\nplt.figure(figsize=(16,25))\n\n# Churned for male and female\n\nplt.subplot(5,3,1)\nplt.grid(True)\nsns.countplot(x='gender', hue='Churn', data=df);\n\n# Visualize the churn count for internet service\n\nplt.subplot(5,3,2)\nplt.grid(True)\nsns.countplot(x='InternetService', hue='Churn', data=df);\n\n\n\nplt.subplot(5,3,3)\nplt.grid(True)\nsns.countplot(x='PhoneService', hue='Churn', data=df);\n      \nplt.subplot(5,3,4)\nplt.grid(True)\nsns.countplot(x='PaymentMethod', hue='Churn', data=df);\n\nplt.subplot(5,3,5)\nplt.grid(True)\nsns.countplot(x='Contract', hue='Churn', data=df);\n\nplt.subplot(5,3,6)\nplt.grid(True)\nsns.countplot(x='OnlineBackup', hue='Churn', data=df);\n\nplt.subplot(5,3,7)\nplt.grid(True)\nsns.countplot(x='Partner', hue='Churn', data=df);\n\nplt.subplot(5,3,8)\nplt.grid(True)\nsns.countplot(x='StreamingMovies', hue='Churn', data=df);\n\n\n\nplt.subplot(5,3,9)\nplt.grid(True)\nsns.countplot(x='StreamingTV', hue='Churn', data=df);\n\nplt.subplot(5,3,10)\nplt.grid(True)\nsns.countplot(x='OnlineSecurity', hue='Churn', data=df);\n\nplt.subplot(5,3,11)\nplt.grid(True)\nsns.countplot(x='PaperlessBilling', hue='Churn', data=df);\n\nplt.subplot(5,3,12)\nplt.grid(True)\nsns.countplot(x='TechSupport', hue='Churn', data=df);\n\nplt.subplot(5,3,13)\nplt.grid(True)\nsns.countplot(x='Dependents', hue='Churn', data=df);\n\nplt.subplot(5,3,14)\nplt.grid(True)\nsns.countplot(x='DeviceProtection', hue='Churn', data=df);\n\n\n\n\n#plt.tight_layout()","6a7f2c70":"num_features=['tenure', 'MonthlyCharges']\n\nfig, ax =plt.subplots(1,2,figsize=(28,8))\ndf[df.Churn=='No'][num_features].hist(bins=20, color='blue' , alpha=0.5, ax=ax);\ndf[df.Churn=='Yes'][num_features].hist(bins=20, color='black' , alpha=0.5, ax=ax);\n","1933051a":"df1=df.drop('customerID', axis=1)","7798d007":"# Convert all non numerical column to numeric\n\nfor i in df1.columns:\n    if df1[i].dtype==np.number:\n        continue\n    df1[i]= LabelEncoder().fit_transform(df1[i])","3371b237":"df1.head(4)","5ea40e4b":"df1.info()","2c0dd7ae":"df1.hist();","5175d64e":"# Scale the data\n\ny=df1['Churn']\nX=df1.drop('Churn', axis=1)\n\nX=StandardScaler().fit_transform(X)","42acf5de":"x_train,x_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=7)","3eac65aa":"# Create a model\nlr=LogisticRegression()\n# Train the model\nlr.fit(x_train,y_train)","0286c29b":"# Create prediction i.e generate target\n\npredict= lr.predict(x_test)","56944db6":"# Print Report\n\nprint(classification_report(y_test, predict))","70d869db":"from time import time","e4e54acf":"y=df1['Churn']\nx= df1.drop('Churn', axis=1)","81983801":"accuracy={}\nspeed= {}","88007d7d":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold","e52a4dab":"gbc= GradientBoostingClassifier()\nstart=time()\ncv= RepeatedStratifiedKFold(n_splits= 5, n_repeats=2, random_state=0)\nscore= cross_val_score(gbc,x,y,scoring='accuracy', cv=cv, n_jobs=-1)\nspeed[\"GBC\"] = np.round(time() - start, 3)\naccuracy[\"GBC\"] = np.mean(score).round(3)\n\nprint(\n    f\"Mean Accuracy: {accuracy['GBC']}\\nStd: {np.std(score):.3f}\\nRun time: {speed['GBC']}s\"\n    )","4fa1b2b3":"from xgboost import XGBClassifier","573c54ea":"xgb = XGBClassifier()\n\nstart = time()\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=0)\nscore = cross_val_score(xgb, X, y, scoring=\"accuracy\", cv=cv, n_jobs=-1)\n\nspeed[\"XGB\"] = np.round(time() -start, 3)\naccuracy[\"XGB\"] = np.mean(score).round(3)\n\nprint(\n    f\"Mean Accuracy: {accuracy['XGB']}\\nStd: {np.std(score):.3f}\\nRun time: {speed['XGB']}s\"\n    )\n","2be062c5":"from lightgbm import LGBMClassifier","c84917a1":"lgbm = LGBMClassifier()\n\nstart = time()\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=0)\nscore = cross_val_score(lgbm, X, y, scoring=\"accuracy\", cv=cv, n_jobs=-1)\n\nspeed[\"LGBM\"] = np.round(time() -start, 3)\naccuracy[\"LGBM\"] = np.mean(score).round(3)\n\nprint(\n    f\"Mean Accuracy: {accuracy['LGBM']}\\nStd: {np.std(score):.3f}\\nRun time: {speed['LGBM']}s\"\n    )\n","a0009e19":"from catboost import CatBoostClassifier","485a6882":"cat = CatBoostClassifier()\n\nstart = time()\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2, random_state=0)\nscore = cross_val_score(cat, X, y, scoring=\"accuracy\", cv=cv, n_jobs=-1)\n\nspeed[\"CAT\"] = np.round(time() -start, 3)\naccuracy[\"CAT\"] = np.mean(score).round(3)\n\nprint(\n    f\"Mean Accuracy: {accuracy['CAT']}\\nStd: {np.std(score):.3f}\\nRun time: {speed['CAT']}s\"\n    )\n","f8e2d52d":"print('Accuracy:')\n{k:v for k, v in sorted(accuracy.items(), key=lambda i:i[1], reverse= True)}","f5261acd":"print('Speed :')\n{k:v for k, v in sorted(speed.items(), key=lambda i:i[1], reverse= True)}","8526b7c9":"'''df.drop('customerID', axis=1, inplace=True)''';","1334d0a5":"'''col= ['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod', 'MonthlyCharges', 'TotalCharges']\n\n\nX=df[col]\ny= df['Churn'].replace({'Yes':1 , 'No':0})''';","cf94666b":"'''X_train,X_test, y_train,y_test= train_test_split(X,y) ''';","8024edad":"'''scale=StandardScaler()\nohe=OneHotEncoder()\nle=LabelEncoder()\n# define ordinal encoding\noe = OrdinalEncoder()\nlogreg=LogisticRegression()''';","9135b646":"'''ct= make_column_transformer((ohe,['gender', 'SeniorCitizen', 'Partner', 'Dependents','PhoneService', 'MultipleLines', 'InternetService','OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport','StreamingTV', 'StreamingMovies',  'PaperlessBilling',\n                                  'PaymentMethod']), (scale,['tenure', 'MonthlyCharges', 'TotalCharges']), remainder='passthrough')\n                        \n''';","af946377":"'''pipe = make_pipeline(ct, logreg)\npipe.fit(X_train, y_train)''';","d8bbe9b5":"# CatBoosting","c28ee13f":"# XGBoost vs LightGBoost vs CatBoost","5169e6ec":"### Data Seems unbalanced as Churned% is low compared to Loyal customers ","bd7aa3b5":"# Coming up soon..................","c9b40d34":"# Pipeline\n\nPipelines are a simple way to keep your data preprocessing and modeling code organized. Specifically, a pipeline bundles preprocessing and modeling steps so you can use the whole bundle as if it were a single step.\n\nMany data scientists hack together models without pipelines, but pipelines have some important benefits. Those include:\n\n    1. Cleaner Code: Accounting for data at each step of preprocessing can get messy. With a pipeline, you won't need to manually keep track of your training and validation data at each step.\n    2. Fewer Bugs: There are fewer opportunities to misapply a step or forget a preprocessing step.\n    3. Easier to Productionize: It can be surprisingly hard to transition a model from a prototype to something deployable at scale. We won't go into the many related concerns here, but pipelines can help.\n    4. More Options for Model Validation: You will see an example in the next tutorial, which covers cross-validation.","ed6d361d":"'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n        'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod'","d654421f":"# LGBM","bf0582ea":"# XGBoost","7e30d064":"# Boosting After Optimisation ","741816ec":"# Feature Engineering","5cc2b8e1":"# Logistic Regression"}}