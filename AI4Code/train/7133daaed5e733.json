{"cell_type":{"41ec778d":"code","4df26f17":"code","54855afb":"markdown","78b45d91":"markdown","f4156efb":"markdown"},"source":{"41ec778d":"\n'''\nScript:  thesaurusGet.py \nPurpose:  Gets synonyms using the BIG HUGE THESAURUS at http:\/\/words.bighugelabs.co\n\nAPI response format sample:\nexamination <Response [200]>\n{'noun': {'syn': ['scrutiny', 'exam', 'test', 'interrogation', 'interrogatory', 'examen', 'testing', 'communicating', 'communication', 'inquiring', 'introspection', 'investigating', 'investigation', 'questioning', 'self-contemplation', 'self-examination']}}\n'''\n\nimport requests\nimport json\n\n#### add a list of words here.  Remember to follow the Big Huge Thesaurus guide and don't submit too many words\nlongWords = ['examination']\n            \nfs = open('synonyms.txt', 'w')\n\n#### get synonyms from Big Huge Thesaurus - add your API key\nfor longWord in longWords:\n    url = 'http:\/\/words.bighugelabs.com\/api\/YOUR API KEY HERE\/' + longWord + '\/json'\n    if \"YOUR API KEY\" in url:\n        print(\"Get your API KEY at http:\/\/words.bighugelabs.com\")\n    else:\n        r = requests.get(url)\n        print(longWord, r)\n        try:\n            synonyms = json.loads(r.content.decode())\n        except:\n            continue\n        print(longWord,\",\",synonyms, file=fs)\nfs.close()\n","4df26f17":"'''\nScript:  thesaurusProcessV2.py\n\nPurpose: to find the shortest two synonyms for a list of long words\n\nFormat of input file called synonyms.txt:\n\nLong Word from\nJob Bulletin     List of synonyms from Big Huge Thesaurus\n\nexamination , {'noun': {'syn': ['scrutiny', 'exam', 'test', 'interrogation', 'interrogatory', 'examen', 'testing', 'communicating', 'communication', 'inquiring', 'introspection', 'investigating', 'investigation', 'questioning', 'self-contemplation', 'self-examination']}}\n'''\n\nimport re\nimport json\n\nf = open('..\/input\/jobbulletindata\/JBR_Output\/synonyms.txt', 'r')           # file of synonyms downloaded from Big Huge Thesaurus using their API\nfo = open('wordRecommend.txt', 'w')     # output file with recommendations for simpler words.  used to process native_words\nfor line in f:\n    shorterWords = []                   # stores simpler words\n    recommend = []                      # stores recommendations\n\n    line = line.strip(\"\\n\\r\")           # get rid of carriage return and line break\n    if line[0:1] != '{':                # if line contains a word from the Job Bulletins then strip the comma and store the word\n        longWord = line.strip(',')\n    elif \"<\" not in line:               # if line contains Big Huge Thesaurus synonyms then find the shortest synonym\n        line = re.sub(\"'\", '\"', line)   # change the formatting to expected json format\n\n        try:\n            if \"adjective\" in line:         # find the Big Huge Thesaurus recommendation for the simplest adjective\n                synonyms = json.loads(line)\n                if \"sim\" in line:\n                    for synonym in synonyms['adjective']['sim']:\n                        shorterWords.append((len(synonym), synonym))\n                elif \"syn\" in line:\n                    for synonym in synonyms['adjective']['syn']:\n                        shorterWords.append((len(synonym), synonym))\n                elif \"rel\" in line:\n                    for synonym in synonyms['adjective']['rel']:\n                        shorterWords.append((len(synonym), synonym))\n\n            elif \"noun\" in line:\n                synonyms = json.loads(line)\n                for synonym in synonyms['noun']['syn']:\n                    shorterWords.append((len(synonym), synonym))\n            \n            elif \"adverb\" in line:\n                synonyms = json.loads(line)\n                if 'syn' in line:\n                    for synonym in synonyms['adverb']['syn']:\n                        shorterWords.append((len(synonym), synonym))\n                elif 'ant' in line:\n                    shorterWords.append([0,'none'])\n            \n            elif \"verb\" in line:\n                synonyms = json.loads(line)\n                for synonym in synonyms['verb']['syn']:\n                    shorterWords.append((len(synonym), synonym))\n        except:\n            print(\"EXCEPTION: \", line)\n            continue\n\n        shorterWords.sort()\n        recommend.append(longWord)      # add the Job Bulletin term to wordRecommend.txt file\n        if len(shorterWords) == 1:      # use the Big Huge Thesaurus recommendation for the most common term\n            recommend.append(shorterWords[0][1])\n            recommend.append('none')\n        else:                           # if no recommendation then find the shortest two words\n            for x in range(2):\n                if int(shorterWords[x][0]) < len(longWord): \n                    recommend.append(shorterWords[x][1])\n                else:\n                    recommend.append('none')    # if all the synonyms are longer than the Job Bulletin term, use the Job Bulletin term\n        print(recommend, file=fo)\n        print(\"\\nRECOMMEND \", recommend)\n\nfo.close()\n","54855afb":"### Proposing words to improve Job Bulletins\n\nThis script processes the synonyms.txt file and provides a list of words to make job bulletins easier to read","78b45d91":"# Look up synonyms using Big Huge Thesaurus API\n\nThis script gets synonyms for a list of words.  In order to use it, you must get your own API key.  Go to http:\/\/words.bighugelabs.com. ","f4156efb":"Here's an example of output:\n\n```\nexamination <Response [200]>\nexamination , {'noun': {'syn': ['scrutiny', 'exam', 'test', 'interrogation', 'interrogatory', 'examen', 'testing', 'communicating', 'communication', 'inquiring', 'introspection', 'investigating', 'investigation', 'questioning', 'self-contemplation', 'self-examination']}}\n```"}}