{"cell_type":{"c2f3325e":"code","f810fbf0":"code","6b3b5ed8":"code","b32db375":"code","10896073":"code","58d867b2":"code","a44b1735":"code","6dae24c3":"code","b5d7d4cf":"code","c5b2ad7e":"code","23bdd5b1":"code","159e5be3":"code","04d6361f":"code","4cf5cc3d":"code","eafbd0c6":"code","f7772327":"code","31f62ea3":"code","e92c0ef0":"code","34064839":"code","dba55975":"code","c5cf4ada":"code","28ddd090":"code","ab21ae04":"code","89f24721":"code","4190567c":"code","9d8e901a":"code","ff06820b":"code","1fa9d689":"code","981a5d9f":"code","5ed665fb":"code","327eb1b1":"markdown","d832365d":"markdown","d67f0893":"markdown","78eb7ce5":"markdown","813849ab":"markdown","a0940fd4":"markdown","b464e2f2":"markdown","71bcb568":"markdown","5a2e9923":"markdown","e99875a1":"markdown","13cafc36":"markdown","0a0a5fb4":"markdown","002ecf55":"markdown","9253cd7a":"markdown","2b07223b":"markdown","7f59bf10":"markdown","fab2ac7f":"markdown","46dc9db1":"markdown","a57aec6f":"markdown","4401429c":"markdown","af3a1d0f":"markdown","15490f51":"markdown"},"source":{"c2f3325e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f810fbf0":"loans = pd.read_csv('..\/input\/lending-club-loan-data-imbalance-dataset\/loan_data.csv')","6b3b5ed8":"loans.describe()","b32db375":"loans.info()","10896073":"loans.head()","58d867b2":"plt.figure(figsize=(10,6))\n\nloans[loans['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='Credit.Policy=1')\n\nloans[loans['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='Credit.Policy=0')\nplt.legend()\n\nplt.xlabel('FICO')","a44b1735":"plt.figure(figsize=(10,6))\nloans[loans['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\nloans[loans['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","6dae24c3":"plt.figure(figsize=(11,7))\nsns.countplot(x='purpose',hue='not.fully.paid',data=loans,palette='Set1')","b5d7d4cf":"sns.jointplot(x='fico',y='int.rate',data=loans,color='purple')","c5b2ad7e":"plt.figure(figsize=(11,7))\nsns.lmplot(y='int.rate',x='fico',data=loans,hue='credit.policy',\n           col='not.fully.paid',palette='Set1')","23bdd5b1":"loans.info()","159e5be3":"cat_feats = ['purpose']","04d6361f":"final_data = pd.get_dummies(loans,columns=cat_feats,drop_first=True)","4cf5cc3d":"final_data.info()","eafbd0c6":"from sklearn.model_selection import train_test_split","f7772327":"X = final_data.drop('not.fully.paid',axis=1)\ny = final_data['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","31f62ea3":"from sklearn.tree import DecisionTreeClassifier","e92c0ef0":"dtree = DecisionTreeClassifier()","34064839":"dtree.fit(X_train,y_train)","dba55975":"predictions = dtree.predict(X_test)","c5cf4ada":"from sklearn.metrics import classification_report,confusion_matrix","28ddd090":"print(classification_report(y_test,predictions))","ab21ae04":"print(confusion_matrix(y_test,predictions))","89f24721":"from sklearn.ensemble import RandomForestClassifier","4190567c":"rfc = RandomForestClassifier(n_estimators=600)","9d8e901a":"rfc.fit(X_train,y_train)","ff06820b":"predictions = rfc.predict(X_test)","1fa9d689":"from sklearn.metrics import classification_report,confusion_matrix","981a5d9f":"print(classification_report(y_test,predictions))","5ed665fb":"print(confusion_matrix(y_test,predictions))","327eb1b1":"**Training the Random Forest model**\n\n**Now its time to train our model!**\n\n\nCreate an instance of the RandomForestClassifier class and fit it to our training data from the previous step.","d832365d":"**What performed better the random forest or the decision tree?**\n\n* Depends what metric you are trying to optimize for. \n* Notice the recall for each class for the models. Neither did very well, more feature engineering is needed.","d67f0893":"**Now create a classification report from the results.**\n\n****Do you get anything strange or some sort of warning?**","78eb7ce5":"\n**Create a similar figure, except this time select by the not.fully.paid column.**","813849ab":"**Predictions and Evaluation\n**\n\n**Let's predict off the y_test values and evaluate our model.\n\n****Predict the class of not.fully.paid for the X_test data.**","a0940fd4":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables.**\n\n**Set this dataframe as final_data.**","b464e2f2":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","71bcb568":"# Training a Decision Tree Model\n\n**Let's start by training a single decision tree first!**\n\n **Import DecisionTreeClassifier**","5a2e9923":"#  Check out \n**info(), head(), and describe() methods on loans.**","e99875a1":"* **Let's see the trend between FICO score and interest rate.** \n* **Recreate the following jointplot.**","13cafc36":"\n# Categorical Features\n\n* Notice that the purpose column as categorical\n\n* That means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\n* Let's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n* Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.","0a0a5fb4":"# Train Test Split\n\n**Now its time to split our data into a training set and a testing set!**\n\n **Use sklearn to split your data into a training set and a testing set as we've done in the past.**","002ecf55":"# Exploratory Data Analysis\n\n* **Let's do some data visualization!**\n\n* **We'll use seaborn and pandas built-in plotting capabilities, but feel free to use whatever library you want.** \n\n\n* **Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**","9253cd7a":"**Show the Confusion Matrix for the predictions.**","2b07223b":"# Import Libraries\nImport the usual libraries for pandas and plotting. You can import sklearn later on.","7f59bf10":"For this project we will be exploring publicly available data from **LendingClub.com.** \n\nLending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back.\n\n**We will try to create a model that will help predict this.**\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full.","fab2ac7f":"# Here are what the columns represent:\n\n* **credit.policy:** 1= if the customer meets the credit underwriting criteria of LendingClub.com, and 0= otherwise.\n \n* **purpose:** The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n \n* **int.rate:** The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n \n* **installment:** The monthly installments owed by the borrower if the loan is funded.\n \n* **log.annual.inc:** The natural log of the self-reported annual income of the borrower.\n \n* **dti:** The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n \n* **fico:** The FICO credit score of the borrower.\n \n* **days.with.cr.line:** The number of days the borrower has had a credit line.\n \n* **revol.bal:** The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n \n* **revol.util:** The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n\n* **inq.last.6mths:** The borrower's number of inquiries by creditors in the last 6 months.\n\n* **delinq.2yrs:** The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n\n* **pub.rec:** The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","46dc9db1":"# Get the Data\n\n**Use pandas to read loan_data.csv as a dataframe called loans.**","a57aec6f":"# Setting up the Data\n\n**Let's get ready to set up our data for our Random Forest Classification Model!**\n\n**Check loans.info() again.**","4401429c":"**Predictions and Evaluation of Decision Tree**\n\nCreate predictions from the test set and create a classification report and a confusion matrix.","af3a1d0f":" **Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy.** ","15490f51":"**Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid.**"}}