{"cell_type":{"90bce995":"code","b3dfd171":"code","b67fa099":"code","bf91b749":"code","59cf6dac":"code","a30a6503":"code","63e75a33":"code","af94c3c9":"code","872f5dcf":"code","cae92339":"code","41f5aa39":"code","d34cf8f3":"code","91883888":"code","5529b7d6":"code","123777d1":"code","d8ec03e7":"code","297cbcb8":"code","b97e667d":"code","0c7d123d":"code","36a51502":"code","f3ee2ffa":"code","d05d8636":"code","05b60989":"code","f6577cdb":"code","3025d7aa":"code","35512176":"code","d00e7b45":"code","46aca096":"code","1620735a":"code","e7384431":"code","302a5213":"code","130d1377":"code","b7de1c81":"code","f94ab4d7":"code","4cf9abb8":"code","470504e0":"code","90f2c8f7":"code","08bf64c9":"code","0a3db761":"code","b682ab46":"code","4180258c":"code","d7869b6f":"code","1c484e8e":"code","906ae660":"code","8dda706c":"code","295629fa":"code","740891f3":"code","8d50b9fe":"code","fe4e69af":"code","9e3673e7":"code","e81a8d4e":"code","526207a7":"code","5d160475":"code","a0ff25e3":"code","3cc9e17f":"code","3e4e5cc6":"code","69729fef":"code","fe56611a":"code","82d74dfe":"code","1c9dc82e":"code","40736ba5":"code","86f64e24":"code","5add7389":"code","7cdc163e":"code","d524c5cc":"code","68510ed5":"code","3f27b5db":"code","95bcb477":"code","c8590357":"code","ab515ee8":"code","b12e9abf":"code","74f52e28":"code","740a7a34":"code","70ff31ca":"code","27474740":"code","57034183":"code","5c29002c":"code","cf5ffc24":"markdown","295d97ff":"markdown","554a224f":"markdown","0a2d3909":"markdown","6c614920":"markdown","ebc655f4":"markdown","c36a145e":"markdown","6fd21349":"markdown","76662b5c":"markdown","348cbd7c":"markdown","842ffe2c":"markdown","d6d5b328":"markdown","a81e06a6":"markdown","f316dd82":"markdown","cf146349":"markdown","826069e0":"markdown","1f26317b":"markdown","60e1e3bd":"markdown","4b66920b":"markdown","dae91733":"markdown","d82f2cfc":"markdown","9f49c897":"markdown","57a1dc27":"markdown","4e1f52e9":"markdown","55e2e3ba":"markdown","180b950a":"markdown","f5e53107":"markdown","bfdc5ba6":"markdown","9833bacd":"markdown","91eb26a2":"markdown","07ad4177":"markdown","6ed10d58":"markdown","ec5cf5c8":"markdown","f097c401":"markdown","219e40a1":"markdown","86d2a3d8":"markdown","d95a095e":"markdown","8089f52e":"markdown","3e87759e":"markdown","812c98a9":"markdown","a61ea531":"markdown","99b9cbc9":"markdown","899c7119":"markdown","29004cab":"markdown","da1d8e33":"markdown","a32f0272":"markdown","c0ae3b69":"markdown"},"source":{"90bce995":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3dfd171":"# run this cell to install pycaret in Google Colab\n# !pip install pycaret ","b67fa099":"# If you are using jupyter notebook, you can pip install pycaret using jupyter notebook or command line\n# pip install pycaret","bf91b749":"!pip install pycaret","59cf6dac":"from pycaret.utils import version\nversion()","a30a6503":"import pycaret\nprint('Using PyCaret Version', pycaret.__version__)\nprint('Path to PyCaret: ', pycaret.__file__)","63e75a33":"# The repository contained 56 datasets\nfrom pycaret.datasets import get_data\nall_datasets = pycaret.datasets.get_data('index')","af94c3c9":"# all_datasets = pycaret.datasets.get_data('index')\ndataset_name = 'heart_disease' # Replace with your desired dataset.\ndata = pycaret.datasets.get_data(dataset_name)","872f5dcf":"from pycaret.classification import *\n\nclf1 = setup(data=data, \n             target = 'Disease',                # Use your target variable.\n             session_id=123, \n             log_experiment=True, \n             experiment_name='experiment1',     # Use any experiment name.\n             silent=True                        # Runs the command without user input. \n            )","cae92339":"models()","41f5aa39":"rf = create_model('rf', fold = 5)","d34cf8f3":"Tuned_rf = tune_model(rf)","91883888":"dt = create_model('dt', fold = 5)","5529b7d6":"# Creating a bagged decision tree ensemble model\nbagged_dt = ensemble_model(dt)","123777d1":"# Creating a boosted decision tree ensemble model\nboosted_dt = ensemble_model(dt, method='Boosting')","d8ec03e7":"# Blending estimators\nblender = blend_models(estimator_list = [boosted_dt, bagged_dt, Tuned_rf], method = 'soft')","297cbcb8":"# Stacking bagged, boosted, and tuned estimators\nstacker = stack_models(estimator_list = [boosted_dt,bagged_dt,Tuned_rf], meta_model=rf)","b97e667d":"# Select the best model based on the chosen metric\nbest = automl(optimize = 'AUC')\nbest","0c7d123d":"# Importing dataset\ndiabetes = get_data('diabetes')","36a51502":"# Importing module and initializing setup\nfrom pycaret.classification import *\nclf1 = setup(data = diabetes, target = 'Class variable')","f3ee2ffa":"# return best model\nbest = compare_models()","d05d8636":"# return top 3 models based on 'Accuracy'\ntop3 = compare_models(n_select = 3)","05b60989":"top3","f6577cdb":"# return best model based on AUC\nbest = compare_models(sort = 'AUC') # default is 'Accuracy'","3025d7aa":"# compare specific models\nbest_specific = compare_models(include = ['dt','rf','xgboost'])","35512176":"# blacklist certain models\nbest_specific = compare_models(exclude = ['catboost', 'svm'])","d00e7b45":"# Importing dataset\nfrom pycaret.datasets import get_data\nboston = get_data('boston')","46aca096":"# Importing module and initializing setup\nfrom pycaret.regression import *\nreg1 = setup(data = boston, target = 'medv')","1620735a":"# return best model\nbest = compare_models()","e7384431":"best","302a5213":"# return top 3 models based on 'R2'\ntop3 = compare_models(n_select = 3)","130d1377":"top3","b7de1c81":"# return best model based on MAPE\nbest = compare_models(sort = 'MAPE') #default is 'R2'","f94ab4d7":"# compare specific models\nbest_specific = compare_models(include = ['dt','rf','xgboost'])","4cf9abb8":"# blacklist certain models\nbest_specific = compare_models(exclude = ['catboost', 'svm'])","470504e0":"from pycaret.datasets import get_data\ndata = get_data('juice')","90f2c8f7":"# All available datasets in PyCaret\nget_data('index')","08bf64c9":"from pycaret.classification import *\nclf1 = setup(data, target='Purchase', session_id=786)","0a3db761":"# compare performance of different classification models\ncompare_models()","b682ab46":"best_model = compare_models()","4180258c":"best_model","d7869b6f":"best_model = compare_models(sort='Recall')","1c484e8e":"best_model","906ae660":"top5 = compare_models(n_select=5)","8dda706c":"top5","295629fa":"# This will only train 4 models as mentioned in whitelist parameter.\nw = compare_models(include = ['dt', 'rf', 'xgboost', 'lightgbm'])","740891f3":"# build the Logistic Regression model\n# default number of folds =10\nlr = create_model('lr')","8d50b9fe":"# Checking for number of folds =5\nlr = create_model('lr', fold=5)","fe4e69af":"# build the decision tree model\ndt = create_model('dt')","9e3673e7":"# build the Naive Bayes model\nnb = create_model('nb')","e81a8d4e":"# build and tune the Decision Tree model\ntuned_dt = tune_model(dt)","526207a7":"dt","5d160475":"tuned_dt","a0ff25e3":"tuned_nb = tune_model(nb, optimize='AUC')","3cc9e17f":"tuned_nb","3e4e5cc6":"# default n_estimators=10\nbagged_dt = ensemble_model(dt)","69729fef":"# set n_estimators=25\nbagged_dt = ensemble_model(dt, n_estimators=25)","fe56611a":"# ensemble boosting\nboosted_dt = ensemble_model(dt, method='Boosting')","82d74dfe":"lr = create_model('lr', verbose=False)\nlda = create_model('lda', verbose=False)\ngbc = create_model('gbc', verbose=False)","1c9dc82e":"# Ensemble: blending\nblender = blend_models(estimator_list=[lr, lda, gbc], method='soft')","40736ba5":"blender.estimators_","86f64e24":"# AUC-ROC plot\n# plot_model(blender) (or) plot_model(blender, plot = 'auc') --> both gives same result\nplot_model(blender, plot = 'auc')","5add7389":"plot_model(blender, plot='confusion_matrix')","7cdc163e":"plot_model(blender, plot='threshold')","d524c5cc":"# Precision Recall Curve\nplot_model(blender, plot='pr')","68510ed5":"# Validation Curve\nplot_model(tuned_dt, plot='vc')","3f27b5db":"# Decision Boundary for \"Decision tree\"\nplot_model(dt, plot='boundary')","95bcb477":"# Decision Boundary for \"Naive Baeys\"\nplot_model(tuned_nb, plot='boundary')","c8590357":"# Decision Boundary for \"Blending\"\nplot_model(blender, plot='boundary')","ab515ee8":"# evaluate model\nevaluate_model(boosted_dt)","b12e9abf":"xgboost = create_model('xgboost')","74f52e28":"# interpret_model: SHAP\ninterpret_model(xgboost)","740a7a34":"# interpret model : Correlation\ninterpret_model(xgboost, plot='correlation')","70ff31ca":"interpret_model(xgboost, plot='reason', observation=1)","27474740":"interpret_model(xgboost, plot='reason')","57034183":"save_model(xgboost, 'abc')","5c29002c":"l = load_model('abc')","cf5ffc24":"<h1 style=\"background-color:yellow; font-family:newtimeroman; font-size:180%; text-align:left;\"> 8.1) Dataset: Diabetes <\/h1>","295d97ff":"<h1 style=\"background-color:DeepSkyBlue; font-family:newtimeroman; font-size:170%; text-align:left;\"> 10.2.4) Whitelist parameter <\/h1>","554a224f":"deploy_model(xgboost, model_name='xgboost-for-aws', authentication={'bucket':'pycaret-test'})","0a2d3909":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.9) Interpret Model <\/h1>\n\n- Interpreting complex models is very important in most machine learning projects. It helps in debugging the model by analyzing what the model thinks is important. In PyCaret, this step is as simple as writing **interpret_model** to get the Shapley values.","6c614920":"<h3 style=color:green align=\"left\"> 3.3) Experiment Setup <\/h3>\n\n- Many often-tedious preprocessing steps are taken care of automatically in PyCaret, which standardizes and conveniently packages fundamental data preparation steps into repeatable time-saving workflows.  Users are able to **automate cleaning (e.g. handling missing values with various imputation methods available), splitting into train and test sets, as well as some aspects of feature engineering and training.**  While many of the objects created in this process aren\u2019t explicitly shown to the user (such as train and test sets, or label vectors), they are accessible if needed or desired by more experienced practitioners. ","ebc655f4":"- We can load this model later on and predict labels on the unseen data:","c36a145e":"<h2 style=color:green align=\"left\"> load model <\/h2>\ndt_model = classification.load_model(model_name='decision_tree_1')","6fd21349":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 8) Classification Example <\/h1>","76662b5c":"        # Importing dataset\n          from pycaret.datasets import get_data\n          diabetes = get_data('diabetes')\n\n        # Importing module and initializing setup\n          from pycaret.classification import *\n          clf1 = setup(data = diabetes, target = 'Class variable')\n\n        # return best model\n          best = compare_models()\n\n        # return top 3 models based on 'Accuracy'\n          top3 = compare_models(n_select = 3)\n\n        # return best model based on AUC\n          best = compare_models(sort = 'AUC') #default is 'Accuracy'\n\n        # compare specific models\n          best_specific = compare_models(include = ['dt','rf','xgboost'])\n\n        # blacklist certain models\n          best_specific = compare_models(exclude = ['catboost', 'svm'])","348cbd7c":"<h2 style=color:blue align=\"left\"> Table of Conents <\/h2>\n\n#### 1) What is PyCaret and Why Should you Use it?\n#### 2) Installing PyCaret on your Machine\n#### 3) Accessing Data\n>    3.1) Loading a Dataframe with Pandas\n\n>    3.2) Using the Data Repository\n\n>    3.3) Experiment Setup\n\n#### 4) Compare Baseline Models\n\n#### 5) Train and tune specific models\n\n#### 6) Combine Models ( Optional )\n\n#### 7) AutoML ( Optional ) \n\n#### 8) Classification Example\n>    8.1) Dataset: Diabetes\n\n#### 9) Regression Example\n\n>    9.1) Dataset: Bostan\n\n#### 10) Import Dataset: juice\n\n>    10.1) Setting up Environment\n\n>    10.2) Compare Models\n\n>         10.2.1) Default\n\n>         10.2.2) Sorted Method \n\n>         10.2.3) n_select parameter\n\n>         10.2.4) Whitelist parameter\n\n>    10.3) Create Model\n\n>    10.4) Tune Model\n\n>    10.5) Building Ensemble Models using PyCaret\n\n>    10.6) Blend Models\n\n>    10.7) Analyze Model \n\n>    10.8) Evaluate our Model\n\n>    10.9) Interpret Model\n\n>    10.10) Make Predictions\n\n>    10.11) Save and load the model\n\n>    10.12) Deploy Model","842ffe2c":"<h1 style=\"background-color:DeepSkyBlue; font-family:newtimeroman; font-size:170%; text-align:left;\"> 10.2.2) Sorted Method <\/h1>","d6d5b328":"### Hyperparameter Tuning\n- We can tune the hyperparameters of a machine learning model by just using the **tune_model** function which takes one parameter \u2013 the model abbreviation string (the same as we used in the create_model function).\n\n- PyCaret provides us a lot of flexibility. For example, we can define the number of folds using the **fold** parameter within the **tune_model** function. Or we can change the number of iterations using the **n_iter** parameter. Increasing the **n_iter** parameter will obviously increase the training time but will give a much better performance.","a81e06a6":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:center; border-radius: 15px 50px;\"> 1) What is PyCaret and Why Should you Use it? <\/h1>","f316dd82":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 6) Combine Models ( Optional ) <\/h1>\n\n- We can combine our trained models in various ways.  First, we can create ensemble models with methods such as **bagging (bootstrap aggregating) and boosting.**  Both bagging and boosting are invoked with the ensemble_model function.  We can further apply **blending and stacking methods** to combine diverse models, or estimators \u2014 a list of estimators can be passed to blend_models or stack_models.  If desired, one could create ensemble models and combine them via blending or stacking, all in a single line of code.  For clarity, we\u2019ll show an example in which each of these four methods is shown sequentially in its own cell, which also allows us to see the default output from PyCaret when each of these methods is used.  ","cf146349":"### we can compare below two parameters for with default parameter & hyperparameters ","826069e0":"- This function trains **all the models in the model library** using **default hyperparameters** and evaluates performance metrics using cross-validation. It returns the trained model object. The evaluation metrics used are:\n\n - **Classification:** Accuracy, AUC, Recall, Precision, F1, Kappa, MCC\n\n - **Regression:** MAE, MSE, RMSE, R2, RMSLE, MAPE\n \n- The output of the function is a table showing the averaged score of all models across the folds. The number of folds can be defined using the **fold** parameter within the **compare_models** function. By default, the **fold is set to 10.** The table is sorted (highest to lowest) by the metric of choice and can be defined using the **sort** parameter. By default, the table is sorted by **Accuracy** for classification experiments and R2 for regression experiments. Certain models are prevented from the comparison because of their longer run-time. In order to bypass this prevention, the turbo parameter can be set to False.","1f26317b":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.2) Compare Models <\/h1>\n\n##### This is another useful function of the PyCaret library. If you do not want to try the different models one by one, you can use the compare models function and it will train and compare common evaluation metrics for all the available models in the library of the module you have imported.\n\n#### This function is only available in:\n> pycaret.classification\n\n> pycaret.regression","60e1e3bd":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 5) Train and tune specific models <\/h1>\n\n- From **compare_models**, we were easily able to see the **best baseline models for each metric**, and select those for further investigation.\n\n- For example, if we were looking for the model with the **highest AUC** above, we would have elected to continue with **random forest**.  We can then save and fine tune our model using the **create_model and tune_model** functions. ","4b66920b":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 9) Regression Example <\/h1>","dae91733":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.12) Deploy Model <\/h1>","d82f2cfc":"- PyCaret is an open-source, machine learning library in Python that helps you from data preparation to model deployment. It is easy to use and you can do almost every data science project task with just one line of code.\n\n- PyCaret, being a low-code library, makes you more productive. You can spend less time on coding and can do more experiments\n\n- It is an easy to use machine learning library that will help you perform end-to-end machine learning experiments, whether that\u2019s imputing missing values, encoding categorical data, feature engineering, hyperparameter tuning, or building ensemble models","9f49c897":"- Now, once the model is built and tested, we can save this in the pickle file using the save_model function. Pass the model to be saved and the file name and that\u2019s it:","57a1dc27":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.3) Create Model <\/h1>","4e1f52e9":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.11) Save and Load the Model <\/h1>","55e2e3ba":"<h2 style=color:blue align=\"left\"> Reference <\/h2>\n\n> https:\/\/pycaret.org\/compare-models\/\n\n> https:\/\/www.kaggle.com\/discussion\/234790\n\n> https:\/\/www.youtube.com\/watch?v=jlW5kRBwcb0\n\n> https:\/\/www.youtube.com\/watch?v=BjcpOVQhNlc&t=74s\n\n> https:\/\/www.youtube.com\/watch?v=TXOLlgzAdxM&t=4s","180b950a":"<h1 style=\"background-color:DeepSkyBlue; font-family:newtimeroman; font-size:170%; text-align:left;\"> 10.2.1) Default <\/h1>","f5e53107":"### Importing a Module:\n- Depending upon the type of problem you are going to solve, you first need to import the module.\n- In the first version of PyCaret, 6 different modules are available:\n\n> 1) Regression\n\n> 2) Classification\n\n> 3) Clustering\n\n> 4) Natural language processing (NLP)\n\n> 5) Anomaly detection\n\n> 6) Associate mining rule.\n- In this article, we will solve a **classification problem** and hence we will import the classification module\n\n### Initializing the Setup:\n- In this step, PyCaret performs some basic **preprocessing** tasks:\n\n> Ignoring the IDs and Date Columns\n\n> Imputing the missing values\n\n> Encoding the categorical variables\n\n> Splitting the dataset into the train-test split for the rest of the modeling steps.\n- When you run the setup function, it will first confirm the data types, and then if you press enter, it will create the environment for you to go ahead","bfdc5ba6":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.4) Tune Model <\/h1>","9833bacd":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.7) Analyze Model <\/h1>\n\n##### Now, after training the model, the next step is to analyze the results. This especially useful from a business perspective, right? Analyzing a model in PyCaret is again very simple. Just a single line of code and you can do the following:\n\n### Plot Model Results:\n- Analyzing model performance in PyCaret is as simple as writing **plot_model.**\n\n- You can plot **decision boundaries, precision-recall curve, validation curve, residual plots, etc..**\n\n- **clustering** models, you can plot the **elbow plot and silhouette plot.**\n\n- **text data**, you can plot **word clouds, bigram and trigram frequency plots,** etc.\n\n### Interpret Results:\n- Interpreting model results helps in debugging the model by analyzing the important features. This is a crucial step in industry-grade machine learning projects. In PyCaret, we can interpret the model by **SHAP values and correlation plot** with just one line of code.","91eb26a2":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 4) Compare Baseline Models <\/h1>\n\n- In a single line of code, we can train and compare baseline versions of all available models on our dataset:\n\n       best_model = compare_models()\n       \n\n- This trains a baseline version of each available model type and yields a detailed comparison of metrics for the trained models, and highlights the best results across models.\n\n- Note that we did not have to do any data preparation by hand \u2014 we just needed to make the data available as a CSV, and run the setup function.  Behind the scenes of those two setup steps, the data was passed into PyCaret and transformed to the extent necessary to train and evaluate the available models.  To see what models PyCaret knows about, we can run which returns a dataframe of all available models, their proper names, the reference package that they\u2019re drawn from (e.g. sklearn.linear_model._logistic.LogisticRegression), and whether Turbo is supported (a mode that limits the model training time, which may be desirable for rapid comparisons).\n\n      models()","07ad4177":"#### Now Recall is the priority, so whichever model shows high recall value that becomes best model","6ed10d58":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.10) Make Predictions <\/h1>","ec5cf5c8":"##### In default compare models, which model highlights more yellow is the best model.","f097c401":"<h2 style=color:green align=\"left\"> save the model <\/h2>\nclassification.save_model(classification_dt, 'decision_tree_1')","219e40a1":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 3) Accessing Data <\/h1>\n\n#### There are two ways to register your data into PyCaret:\n\n> Loading a Dataframe with Pandas\n\n> Using the Data Repository\n\n<h3 style=color:green align=\"left\"> 3.1) Loading a Dataframe with Pandas <\/h3>\n- The first way to get data into PyCaret is simply to load up a Pandas dataframe and then pass it to PyCaret.\n\n        data = pd.read_csv(data_path)\n        data.head()\n        \n<h3 style=color:green align=\"left\"> 3.2) Using the Data Repository <\/h3>\n- The second way of getting data, which is used in the PyCaret tutorials, is to pull in a curated dataset from the PyCaret Data Repository. The repository helpfully includes popular sample datasets for classification, regression, clustering, NLP, etc.\n\n        all_datasets = pycaret.datasets.get_data('index')","86d2a3d8":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.1) Setting up Environment <\/h1>","d95a095e":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:200%; text-align:center; border-radius: 15px 50px;\"> 7) AutoML ( Optional ) <\/h1>\n\n- Quick and painless tuning for a particular metric can be accomplished using the AutoML feature.\n\n- AutoML techniques generally reduce the human oversight of the model selection process, which may not be ideal or appropriate in many contexts, they can be a useful tool to quickly identify the highest performing option for a particular purpose. ","8089f52e":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.8) Evaluate our Model <\/h1>\n\n- If you do not want to plot all these visualizations individually, then the PyCaret library has another amazing function: **evaluate_model**. In this function, you just need to pass the model object and PyCaret will create an interactive window for you to see and analyze the model in all the possible ways:","3e87759e":"        # Importing dataset\n          from pycaret.datasets import get_data\n          boston = get_data('boston')\n\n        # Importing module and initializing setup\n          from pycaret.regression import *\n          reg1 = setup(data = boston, target = 'medv')\n\n        # return best model\n          best = compare_models()\n\n        # return top 3 models based on 'R2'\n          top3 = compare_models(n_select = 3)\n\n        # return best model based on MAPE\n          best = compare_models(sort = 'MAPE') #default is 'R2'\n\n        # compare specific models\n          best_specific = compare_models(include = ['dt','rf','xgboost'])\n\n        # blacklist certain models\n          best_specific = compare_models(exclude = ['catboost', 'svm'])","812c98a9":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.5) Building Ensemble Models using PyCaret <\/h1>\n\n#### Ensemble models in machine learning combine the decisions from multiple models to improve the overall performance.\n\n### In PyCaret, we can create bagging, boosting, blending, and stacking ensemble models with just one line of code.","a61ea531":"<h1 style=\"background-color:DeepSkyBlue; font-family:newtimeroman; font-size:170%; text-align:left;\"> 10.2.3) n_select parameter <\/h1>","99b9cbc9":"#### read the test data\ntest_data_classification = pd.read_csv('datasets\/loan_test_data.csv')\n\n#### make predictions\npredictions = classification.predict_model(classification_dt, data=test_data_classification)\n\n#### view the predictions\npredictions","899c7119":"<h1 style=\"background-color:yellow; font-family:newtimeroman; font-size:180%; text-align:left;\"> 9.1) Dataset: Bostan <\/h1>","29004cab":"### Training a Model\n- Training a model in PyCaret is quite simple. You just need to use the create_model function that takes just the one parameter \u2013 the model abbreviation as a string. Here, we are going to first train a **decision tree model** for which we have to pass **\u201cdt\u201d** and it will return a **table with k-fold cross-validated scores** of common evaluation metrics used for classification models.\n\n- Here\u2019s q quick reminder of the evaluation metrics used for supervised learning:\n\n - **Classification:** Accuracy, AUC, Recall, Precision, F1, Kappa\n - **Regression:** MAE, MSE, RMSE, R2, RMSLE, MAPE","da1d8e33":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:center; border-radius: 15px 50px;\"> 10) Import Dataset: juice <\/h1>","a32f0272":"<h1 style=\"background-color:LimeGreen; font-family:newtimeroman; font-size:180%; text-align:center; border-radius: 15px 50px;\"> 2) Installing PyCaret on your Machine <\/h1>","c0ae3b69":"<h1 style=\"background-color:magenta; font-family:newtimeroman; font-size:180%; text-align:left;\"> 10.6) Blend Models <\/h1>"}}