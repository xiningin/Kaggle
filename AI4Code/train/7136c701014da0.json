{"cell_type":{"95765e47":"code","b6015268":"code","17893ffe":"code","d10236f4":"code","08f30416":"code","756cb54f":"code","d515c3e5":"code","9b6c3e29":"code","2aacabe4":"code","a57a763d":"code","aaf19455":"code","3651a105":"code","ed9de80c":"code","8d34e256":"code","ddd9049f":"code","9e025ab6":"code","d221503a":"code","db26d581":"code","a99421b6":"code","48ea4bad":"code","cafdf345":"code","7de0a7d6":"code","2dcfdb22":"code","d82fcb1f":"code","1b01642b":"code","da7fbe36":"code","72281902":"code","cb15824c":"code","b3dc3071":"code","a4e05690":"code","07a4b089":"code","4d8a3104":"markdown","d56921c1":"markdown","7065446d":"markdown","5271d0df":"markdown","b2f73c79":"markdown","b178bdda":"markdown","5ce8bc68":"markdown","1e2a187c":"markdown","dc407d31":"markdown","67ec9b9f":"markdown","2ee86843":"markdown","4f0c341a":"markdown","15ae8a77":"markdown"},"source":{"95765e47":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Lambda, Flatten\nfrom keras.optimizers import Adam ,RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras import  backend as K\nfrom keras.preprocessing.image import ImageDataGenerator","b6015268":"train = pd.read_csv(r\"..\/input\/Kannada-MNIST\/train.csv\")\nprint(train.shape)\ntrain.head()","17893ffe":"test = pd.read_csv(r\"..\/input\/Kannada-MNIST\/test.csv\")\nprint(test.shape)\ntest.head()","d10236f4":"X_train = (train.iloc[:,1:].values).astype('float32')\ny_train = train.iloc[:,0].values.astype('int32')\nX_test = (test.iloc[:,1:].values).astype('float32')","08f30416":"X_train","756cb54f":"y_train","d515c3e5":"X_test","9b6c3e29":"X_train = X_train.reshape(X_train.shape[0],28,28)\n\nfor i in range(1,4):\n    plt.subplot(329+(i+1))\n    plt.imshow(X_train[i],cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i])","2aacabe4":"X_train = X_train.reshape(X_train.shape[0],28,28,1) \nX_test = X_test.reshape(X_test.shape[0],28,28,1) \nprint(X_train.shape) \nprint(X_test.shape)","a57a763d":"meanpx = X_train.mean().astype(np.float32)\nstdpx = X_train.std().astype(np.float32)\n\ndef standardize(x):\n    return (x-meanpx)\/stdpx","aaf19455":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train)\nnum_classes = y_train.shape[1]\nnum_classes","3651a105":"plt.title(y_train[7])\nplt.plot(y_train[7])\nplt.xticks(range(10));","ed9de80c":"from keras.models import Sequential \nfrom keras.layers.core import Lambda, Dense, Flatten, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D","8d34e256":"model = Sequential()\nmodel.add(Lambda(standardize,input_shape=(28,28,1)))\nmodel.add(Flatten())\nmodel.add(Dense(10,activation='softmax'))","ddd9049f":"from keras.optimizers import RMSprop\nmodel.compile(optimizer=RMSprop(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","9e025ab6":"from keras.preprocessing import image\ngen = image.ImageDataGenerator()","d221503a":"from sklearn.model_selection import train_test_split\nX = X_train\ny = y_train\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.10, random_state=42)\nbatches = gen.flow(X_train, y_train, batch_size=64)\nval_batches=gen.flow(X_val, y_val, batch_size=64)","db26d581":"history=model.fit_generator(generator=batches, steps_per_epoch=X_train.shape[0]\/\/64, epochs=30, \n                    validation_data=val_batches, validation_steps=val_batches.n)","a99421b6":"model.evaluate(X_train,y_train) #train loss and train accuracy","48ea4bad":"def fully_connected_layer():\n    model=Sequential([\n        Lambda(standardize,input_shape=(28,28,1)),\n        Flatten(),\n        Dense(512,activation='relu'),\n        Dense(10,activation='softmax')\n    ])\n    model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model","cafdf345":"fc = fully_connected_layer()\nfc.optimizer.lr=0.01","7de0a7d6":"history=model.fit_generator(generator=batches, steps_per_epoch=X_train.shape[0]\/\/64, epochs=10, \n                    validation_data=val_batches, validation_steps=val_batches.n)","2dcfdb22":"from keras.layers import Convolution2D, MaxPooling2D\n\ndef get_cnn_model():\n    model = Sequential([\n        Lambda(standardize, input_shape=(28,28,1)),\n        Convolution2D(32,(3,3), activation='relu'),\n        Convolution2D(32,(3,3), activation='relu'),\n        MaxPooling2D(),\n        Convolution2D(64,(3,3), activation='relu'),\n        Convolution2D(64,(3,3), activation='relu'),\n        MaxPooling2D(),\n        Flatten(),\n        Dense(512, activation='relu'),\n        Dense(10, activation='softmax')\n        ])\n    model.compile(Adam(), loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n    return model","d82fcb1f":"model= get_cnn_model()\nmodel.optimizer.lr=0.01","1b01642b":"history=model.fit_generator(generator=batches, steps_per_epoch=X_train.shape[0]\/\/64, epochs=10, \n                    validation_data=val_batches, validation_steps=val_batches.n)","da7fbe36":"gen =ImageDataGenerator(rotation_range=8, width_shift_range=0.08, shear_range=0.3,\n                               height_shift_range=0.08, zoom_range=0.08)\nbatches = gen.flow(X_train, y_train, batch_size=64)\nval_batches = gen.flow(X_val, y_val, batch_size=64)","72281902":"model.optimizer.lr=0.001\nhistory=model.fit_generator(generator=batches, steps_per_epoch=X_train.shape[0]\/\/64, epochs=3, \n                    validation_data=val_batches, validation_steps=val_batches.n)","cb15824c":"from keras.layers import BatchNormalization\n\ndef get_bn_model():\n    model = Sequential([\n        Lambda(standardize,input_shape=(28,28,1)),\n        Convolution2D(32,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        Convolution2D(32,(3,3), activation='relu'),\n        MaxPooling2D(),\n        BatchNormalization(axis=1),\n        Convolution2D(64,(3,3), activation='relu'),\n        BatchNormalization(axis=1),\n        Convolution2D(64,(3,3), activation='relu'),\n        MaxPooling2D(),\n        Flatten(),\n        BatchNormalization(),\n        Dense(512,activation='relu'),\n        BatchNormalization(),\n        Dense(10,activation='softmax')\n    ])\n    model.compile(Adam(), loss='categorical_crossentropy', metrics=['accuracy'])\n    return model","b3dc3071":"model= get_bn_model()\nmodel.optimizer.lr=0.01\nhistory=model.fit_generator(generator=batches, steps_per_epoch=X_train.shape[0]\/\/64, epochs=5, \n                    validation_data=val_batches, validation_steps=val_batches.n)","a4e05690":"predictions = model.predict_classes(X_test, verbose=0)\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"DR.csv\", index=False, header=True)","07a4b089":"submissions.head()","4d8a3104":"# Submission to Kaggle","d56921c1":"# Adding Batch Normalization","7065446d":"# Feature Standardization","5271d0df":"# Designing Neural Net Architecture","b2f73c79":"# Convolution Neural Network","b178bdda":"# Data Visulaization","5ce8bc68":"# One-hot encoding of labels","1e2a187c":"# Import Libraries","dc407d31":"# Load data","67ec9b9f":"# Linear Model","2ee86843":"# Data Augmentation","4f0c341a":"# Preprocessing data images","15ae8a77":"# Fully Connected Layer"}}