{"cell_type":{"b81f7846":"code","8b5266e9":"code","89214d00":"code","bf707a37":"code","b01b1752":"code","7541a7a8":"code","ad0fab45":"code","0a4f1345":"code","0b6b7162":"code","f11e7c97":"code","c60b2610":"code","35c34273":"code","717c67b3":"code","617965b3":"code","ea970ece":"code","fd1001b2":"code","ed23e123":"code","597c9564":"code","e2a67c2b":"code","d0f9046d":"code","25cc6a1c":"code","0468f09e":"code","b4bb0884":"code","2d4db127":"code","a66f8e00":"code","bf3655c9":"markdown","0e4dc4c1":"markdown","202bcb3d":"markdown","9e90af4b":"markdown","ed0b3f9b":"markdown","06fece0d":"markdown","ae8f0391":"markdown","19ed8f25":"markdown","c3021a91":"markdown","f204d2e4":"markdown","be229984":"markdown"},"source":{"b81f7846":"!pip install torchsummary","8b5266e9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n# plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torchsummary import summary\n\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision\nfrom torchvision import transforms\nfrom tqdm import tqdm\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n# Image processing\nfrom PIL import Image\nimport cv2","89214d00":"df = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')\ndf.head()","bf707a37":"df.shape","b01b1752":"print(f'Total Data Points: {df.shape[1]}')\nprint(f'Total columns\/Features: {df.shape[0]}')","7541a7a8":"df.info()","ad0fab45":"type(df.pixels[0]) # since pixels are in form of string we need to convert it to an array","0a4f1345":"## Converting pixels into numpy array\ndf['pixels'] = df['pixels'].apply(lambda x:  np.reshape(np.array(x.split(), dtype=\"float32\"), (48,48)))\ndf.head()","0b6b7162":"type(df.pixels[0]) ","f11e7c97":"fig = px.histogram(df, x=\"age\")\nfig.update_layout(title_text='Age Histogram')\nfig.show()","c60b2610":"eth_values_to_labels = { 0: \"White\", 1: \"Black\", 2: \"Asian\", 3: \"Indian\", 4: \"Hispanic\" }\ngender_values_to_labels = { 0: \"Male\", 1: \"Female\" }","35c34273":"df.ethnicity.value_counts()","717c67b3":"fig = go.Figure([\n    go.Bar(x=[eth_values_to_labels[i] for i in df.ethnicity.value_counts().index], \n           y=df.ethnicity.value_counts().values)\n])\nfig.update_layout(\n    title_text='Count Plot Ethnicity',\n    xaxis_title='Ethnicity',\n    yaxis_title='Count'\n)\nfig.show()","617965b3":"df.gender.value_counts()","ea970ece":"fig = go.Figure([\n    go.Bar(x=[gender_values_to_labels[i] for i in df.gender.value_counts().index], \n           y=df.gender.value_counts().values)\n])\nfig.update_layout(\n    title_text='Count Plot Gender',\n    xaxis_title='Gender',\n    yaxis_title='Count'\n)\nfig.show()","fd1001b2":"def plot_data(rows, cols, lower_value, upper_value):\n\n    figure = plt.figure(figsize=(cols*3,rows*4))\n    for i in range(1, cols*rows + 1):\n        k = np.random.randint(lower_value,upper_value)\n        figure.add_subplot(rows, cols, i) # adding sub plot\n\n        gender = gender_values_to_labels[df.gender[k]]\n        ethnicity = eth_values_to_labels[df.ethnicity[k]]\n        age = df.age[k]\n        \n        im = df.pixels[k]\n        # im = np.reshape(im, (48,48))\n        plt.imshow(im, cmap='gray')\n        plt.axis('off')\n        plt.title(f'Gender:{gender}\\nAge:{age}\\nEthnicity:{ethnicity}')\n\n    plt.tight_layout()\n    plt.show()","ed23e123":"plot_data(rows=6, cols=7, lower_value=0, upper_value=len(df))","597c9564":"plot_data(rows=1, cols=7, lower_value=0, upper_value=1000)","e2a67c2b":"plot_data(rows=2, cols=7, lower_value=len(df)-2000, upper_value=len(df))","d0f9046d":"plot_data(rows=2, cols=7, lower_value=(len(df)-4000)\/\/2, upper_value=len(df)\/\/2)","25cc6a1c":"psum, psum_sq = 0, 0\n# pixel count\nimage_size = 48\ncount = len(df) * image_size * image_size\n\n# loop through images\nfor img in df.pixels:\n    psum += np.sum(img)\n    psum_sq += np.sum(img**2)\n\n# mean, var and std\ntotal_mean = psum \/ count\ntotal_var  = (psum_sq \/ count) - (total_mean ** 2)\ntotal_std  = np.sqrt(total_var)\n\n# output\nprint('[Dataset]')\nprint(f'- mean: {total_mean}')\nprint(f'- std: {total_std}')\nprint(f'- var: {total_var}')","0468f09e":"class get_data(Dataset):\n    def __init__(self, df):\n        self.df = df\n        self.transform = transforms.Compose([\n            transforms.ToTensor(),\n            transforms.Normalize(mean=125.01632431478356, std=59.44005080507268)\n        ])\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self,i):\n        age = df['age'][i]\n        eth = df['ethnicity'][i]\n        gender = df['gender'][i]\n        \n        im = df['pixels'][i]\n#         im = np.reshape(im, (48,48))\n        im = self.transform(im)\n        \n        age = torch.tensor(age)\n        eth = torch.tensor(eth)\n        gender = torch.tensor(gender)\n        \n        return im, age, eth, gender","b4bb0884":"train, test = train_test_split(df, test_size=0.2, random_state=129) \n\nprint(f'- Number of Datapoints in Training Set: {len(train)}')\nprint(f'- Number of Datapoints in Test Set: {len(test)}')","2d4db127":"SEED = 1\n\n# CUDA?\nuse_cuda = torch.cuda.is_available()\nprint(\"CUDA Available:\", use_cuda)\n\n# For reproducibility\ntorch.manual_seed(SEED)\n\nif use_cuda:\n    torch.cuda.manual_seed(SEED)\n    BATCH_SIZE=64\nelse:\n    BATCH_SIZE=32\n    \nprint('BATCH_SIZE:', BATCH_SIZE)","a66f8e00":"kwargs = {'num_workers': 2, 'pin_memory': True} if use_cuda else {}\n\n\ntrain_loader = DataLoader(get_data(train), batch_size=BATCH_SIZE, shuffle=True, **kwargs)\ntest_loader = DataLoader(get_data(test), batch_size=BATCH_SIZE, shuffle=False, **kwargs)","bf3655c9":"# Importing Data <a id=\"02\"><\/a>","0e4dc4c1":"## Train Test Split <a id=\"4.2\"><\/a>","202bcb3d":"## Plotting Images <a id=\"3.4\"><\/a>","9e90af4b":"## Calculating Data Stats <a id=\"4.1\"><\/a>","ed0b3f9b":"## Age Histogram <a id=\"3.1\"><\/a>","06fece0d":"# Data Generation <a id=\"04\"><\/a>","ae8f0391":"## Gender Count Plot <a id=\"3.3\"><\/a>","19ed8f25":"# Importing Libraries <a id=\"01\"><\/a>","c3021a91":"# Data Vizualization <a id=\"03\"><\/a>","f204d2e4":"# Table Of Content\n- [Importing Libraries](#01)\n- [Importing Data](#02)\n- [Data Vizualization](#03)\n    * [Age Histogram](#3.1)\n    * [Ethnicity Count Plot](#3.2)\n    * [Gender Count Plot](#3.3)\n    * [Plotting Images](#3.4)\n- [Data Generation](#04)\n    * [Calculating Data Stats](#4.1)\n    * [Train Test Split](#4.2)\n\n\n**Ethnicity Labels**\n\nETHNICITIES = { 0: \"White\", 1: \"Black\", 2: \"Asian\", 3: \"Indian\", 4: \"Hispanic\" }\n\n**Gender Labels**\n\nGENDERS = { 0: \"Male\", 1: \"Female\" }","be229984":"## Ethnicity Count Plot<a id=\"3.2\"><\/a>"}}