{"cell_type":{"4a002441":"code","c37d5d28":"code","40d59806":"code","67342091":"code","586bf2be":"code","fc2d7c62":"code","943d0ea5":"code","e04d3a1a":"code","24a4effb":"code","21c13671":"code","f4ee2b8f":"code","850b891b":"code","fff216ec":"code","d13ce59e":"code","0a74db74":"markdown","535ab362":"markdown","0293501c":"markdown"},"source":{"4a002441":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c37d5d28":"ROOT = '..\/input\/data-science-bowl-2019\/'\ntrain_df = pd.read_csv(ROOT + 'train.csv')\ntrain_labels_df = pd.read_csv(ROOT + 'train_labels.csv')\nspecs_df = pd.read_csv(ROOT + 'specs.csv')\ntest_df = pd.read_csv(ROOT + 'test.csv')\nsample_submission = pd.read_csv(ROOT + 'sample_submission.csv')","40d59806":"print(train_df.shape)\ntrain_df.head()","67342091":"train_sub_df = train_df.sample(n=1000000, random_state=2019)","586bf2be":"train_sub_df['installation_id'].value_counts()","fc2d7c62":"numerical = ['timestamp', 'game_time']\ncategorical = ['event_id', 'game_session', 'installation_id', 'event_code', 'title', 'type', 'world']\ndictionary = ['event_data']","943d0ea5":"print(train_labels_df.shape)\ntrain_labels_df.head()","e04d3a1a":"train_label_CB_df = train_labels_df[train_labels_df['title']=='Cart Balancer (Assessment)']\ntrain_label_CF_df = train_labels_df[train_labels_df['title']=='Cauldron Filler (Assessment)']\ntrain_label_MS_df = train_labels_df[train_labels_df['title']=='Mushroom Sorter (Assessment)']\ntrain_label_CS_df = train_labels_df[train_labels_df['title']=='Chest Sorter (Assessment)']\ntrain_label_BM_df = train_labels_df[train_labels_df['title']=='Bird Measurer (Assessment)']","24a4effb":"for df in [train_label_CB_df, train_label_CF_df, train_label_MS_df, train_label_CS_df, train_label_BM_df]:\n    df['accuracy'] = df['accuracy'].apply(lambda x: round(x, 2))","21c13671":"sns.set(rc={'figure.figsize':(20,8)})\nsns.countplot(train_label_CB_df['accuracy'])","f4ee2b8f":"sns.set(rc={'figure.figsize':(20,8)})\nsns.countplot(train_label_CF_df['accuracy'])","850b891b":"sns.set(rc={'figure.figsize':(20,8)})\nsns.countplot(train_label_MS_df['accuracy'])","fff216ec":"sns.set(rc={'figure.figsize':(20,8)})\nsns.countplot(train_label_CS_df['accuracy'])","d13ce59e":"sns.countplot(train_label_BM_df['accuracy'])","0a74db74":"# Data Desciption\n\n### train.csv & test.csv\nThese are the main data files which contain the gameplay events.\n- event_id - Randomly generated unique identifier for the event type. Maps to event_id column in specs table.\n- game_session - Randomly generated unique identifier grouping events within a single game or video play session.\n- timestamp - Client-generated datetime\n- event_data - Semi-structured JSON formatted string containing the events parameters. Default fields are: event_count, event_code, and game_time; otherwise fields are determined by the event type.\n- installation_id - Randomly generated unique identifier grouping game sessions within a single installed application instance.\n- event_count - Incremental counter of events within a game session (offset at 1). Extracted from event_data.\n- event_code - Identifier of the event 'class'. Unique per game, but may be duplicated across games. E.g. event code '2000' always identifies the 'Start Game' event for all games. Extracted from event_data.\n- game_time - Time in milliseconds since the start of the game session. Extracted from event_data.\n- title - Title of the game or video.\n- type - Media type of the game or video. Possible values are: 'Game', 'Assessment', 'Activity', 'Clip'.\n- world - The section of the application the game or video belongs to. Helpful to identify the educational curriculum goals of the media. Possible values are: 'NONE' (at the app's start screen), TREETOPCITY' (Length\/Height), 'MAGMAPEAK' (Capacity\/Displacement), 'CRYSTALCAVES' (Weight).\n\n### specs.csv\nThis file gives the specification of the various event types.\n- event_id - Global unique identifier for the event type. Joins to event_id column in events table.\n- info - Description of the event.\n- args - JSON formatted string of event arguments. Each argument contains:\n- name - Argument name.\n- type - Type of the argument (string, int, number, object, array).\n- info - Description of the argument.\n\n### train_labels.csv\nThis file demonstrates how to compute the ground truth for the assessments in the training set.\n\n### sample_submission.csv\nA sample submission in the correct format.","535ab362":"# Introduction \nThis is the kernel about [2019 Data Science Bowl](https:\/\/www.kaggle.com\/c\/data-science-bowl-2019)\n\n### PBS KIDS Measure UP!\n![](https:\/\/github.com\/seriousran\/img_link\/blob\/master\/kg\/app.PNG?raw=true)\n- Try it :)\n- [Official website](https:\/\/pbskids.org\/apps\/pbs-kids-measure-up.html)\n- [App Store](https:\/\/apps.apple.com\/us\/app\/pbs-kids-measure-up\/id1088888867)\n- [Google Play](https:\/\/play.google.com\/store\/apps\/details?id=org.pbskids.measureup&hl=en)\n\n### History:\n1. [National Data Science Bowl](https:\/\/www.kaggle.com\/c\/datasciencebowl\/overview)\n    - For measuring and monitoring plankton populations\n2. [Second Annual Data Science Bowl](https:\/\/www\".kaggle.com\/c\/second-annual-data-science-bowl)\n    - To automatically determine cardiac volumes from MRI scans (Diagnosing Heart Diseases)\n3. [Data Science Bowl 2017](https:\/\/www.kaggle.com\/c\/data-science-bowl-2017)\n    - To detect lung cancer\n4. [2018 Data Science Bowl](https:\/\/www.kaggle.com\/c\/data-science-bowl-2018)\n    - To automate nucleus detection.\n       \nThe Data Science Bowl is the world\u2019s premier data science for social good competition, created in 2014 and presented by Booz Allen Hamilton and Kaggle. <br\/>\nThere is an official website. https:\/\/datasciencebowl.com\/ <br\/>\n    \n### And, the 2019 Data science Bowl is fifth! :)\n- predict scores on in-game assessments and create an algorithm that will lead to better-designed games and improved learning outcomes.\n- aid in discovering important relationships between engagement with high-quality educational media and learning processes.\n- use anonymous gameplay data(including knowledge of videos watched and games played)\n\n### The outcomes in this competition are grouped into 4 groups (labeled accuracy_group in the data):\n- 3: the assessment was solved on the first attempt\n- 2: the assessment was solved on the second attempt\n- 1: the assessment was solved after 3 or more attempts\n- 0: the assessment was never solved","0293501c":"# Data Exploration"}}