{"cell_type":{"2553c96d":"code","ade0e4f5":"code","4a46dd10":"code","0cf8ef82":"code","bea0b8d1":"code","62c2f420":"code","9297033d":"code","a9fd70b9":"code","ab74cf47":"code","3d5d53a5":"code","4f6e824f":"code","5c35dcfe":"code","2aaf120d":"code","22e2fd95":"code","d609922c":"code","b7fea779":"code","e41533ca":"code","00bb3414":"code","366a8bca":"code","97e7a523":"code","2decf1e1":"code","f20059f0":"code","6dd432d9":"code","667c3923":"markdown","7c6c1c5b":"markdown","43ba5b49":"markdown","6310df87":"markdown","af8dc785":"markdown","a083fa00":"markdown","68e71c78":"markdown"},"source":{"2553c96d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\ndata = pd.read_csv('\/kaggle\/input\/time-series-starter-dataset\/Month_Value_1.csv')\ndata.head()\ndata.dropna(inplace=True)\ndata['Period'] = pd.to_datetime(data['Period'],format='%d.%m.%Y')","ade0e4f5":"import matplotlib.pyplot as plt\nplt.rcParams.update({'figure.figsize':(15,5)})\nimport seaborn as sns\n\n# plt.figure(figsize=(15,5))\n# sns.distplot(data['Sales_quantity'])\nplt.plot(data.Sales_quantity)\n","4a46dd10":"data.index = data.Period\n# Log Transformation\ndata['log'] = np.log(data.Sales_quantity)","0cf8ef82":"import statsmodels.tsa.api as smt\n\nfig, axes = plt.subplots(1, 2, sharey=False, sharex=False)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nsmt.graphics.plot_acf(data['Sales_quantity'], lags=12, ax=axes[0])\nsmt.graphics.plot_pacf(data['Sales_quantity'], lags=12, ax=axes[1])\nplt.tight_layout()","bea0b8d1":"import itertools\nimport warnings\nwarnings.filterwarnings('ignore')","62c2f420":"# Define the p, d and q parameters to take any value between 0 and 2\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, d and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]","9297033d":"pdq","a9fd70b9":"seasonal_pdq","ab74cf47":"import statsmodels.api as sm\n# import statsmodels.tsa.api as smt\n# import statsmodels.formula.api as smf\n\nbest_aic = np.inf\n\nbest_pdq = None\nbest_seasonal_pdq = None\ntemp_model = None\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:        \n        try:\n            temp_model = sm.tsa.statespace.SARIMAX(data['Sales_quantity'],\n                                             order = param,\n                                             seasonal_order = param_seasonal,\n                                             enforce_stationarity=False,\n                                             enforce_invertibility=False)\n            results = temp_model.fit()\n            if results.aic < best_aic:\n                best_aic = results.aic\n                best_pdq = param\n                best_seasonal_pdq = param_seasonal\n        except:\n            print('he')\n\nprint(\"Best SARIMAX {} x {} 12 model - AIC:{}\".format(best_pdq, best_seasonal_pdq, best_aic))","3d5d53a5":"best_pdq = (0, 1, 1)\nbest_seasonal_pdq = (0, 1, 1, 12)","4f6e824f":"best_model = sm.tsa.statespace.SARIMAX(data['Sales_quantity'],\n                                      order=best_pdq,\n                                      seasonal_order=best_seasonal_pdq,\n                                      enforce_stationarity=False,\n                                      enforce_invertibility=False)\nbest_results = best_model.fit()","5c35dcfe":"best_results.summary()","2aaf120d":"best_results.plot_diagnostics(figsize=(14,10))","22e2fd95":"pred_dynamic = best_results.get_prediction(start=pd.to_datetime('2015-02-01'))\npred_dynamic_ci = pred_dynamic.conf_int()\n\n# conf_int = confidence Interval\n","d609922c":"pred_dynamic.summary_frame()","b7fea779":"pred_dynamic_ci","e41533ca":"result_predicted = pred_dynamic.predicted_mean\nresult_truth = data['Sales_quantity'].iloc[1:]","00bb3414":"plt.plot(result_truth, label='original')\nplt.plot(result_predicted, label='fitted Values')\n# plt.plot(rng['future'], label='Future Values')\nplt.legend(loc='best')\nplt.title('RMSE: %.4f'% np.sqrt(sum((result_predicted-result_truth)**2)\/len(result_truth)))\n","366a8bca":"y = best_results.get_forecast(steps=10)","97e7a523":"y.summary_frame()","2decf1e1":"x = best_results.forecast(steps=10)","f20059f0":"x","6dd432d9":"plt.plot(result_truth, label='original')\nplt.plot(result_predicted, label='fitted Values')\nplt.plot(x, label='Future Values')\nplt.legend(loc='best')\nplt.title('RMSE: %.4f'% np.sqrt(sum((result_predicted-result_truth)**2)\/len(result_truth)))\n","667c3923":"# Parameters - p, d, q, P, D, Q\n### Let's try all possible parameters and choose the best set of parameters that gives less AIC score.","7c6c1c5b":"## Past data can be a good indicator of future data","43ba5b49":"# What Is Time Series?\n\n* Variable \u2014 anything that changes over time\n* Time periods \u2014 Can be daily, weekly, monthly, yearly etc\n* Variable Behaviour \u2014 Quantifiable value\n\n## Past Is Important\n**Most time series data is dependent on its past values. Recent past values are good indicators of a variable\u2019s behaviour.**\n\n#### Now let\u2019s consider the effect of Friday\u2019s price on Sunday\u2019s price\n![image.png](attachment:image.png)","6310df87":"# Using AIC to Test ARIMA Models\n## The Akaike Information Critera (AIC) is a widely used measure of a statistical model. It basically quantifies 1) the goodness of fit, and 2) the simplicity\/parsimony, of the model into a single statistic.\n\n\n## When comparing two models, the one with the lower AIC is generally \u201cbetter\u201d. ","af8dc785":"# Predicting Time Series ? Predicting Future","a083fa00":"# The Difference Between ARIMA and SARIMA Models","68e71c78":"* SARIMA model has 7 parameters. \n* The first 3 parameters are the same as an ARIMA model.\n* The last 4 define the seasonal process.\n* It takes the seasonal autoregressive component, the seasonal difference, the seasonal moving average component, the length of the season, as additional parameters\n* SARIMA(1,1,1)(0,0,0,X) where X can be any whole number."}}