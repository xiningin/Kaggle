{"cell_type":{"97ce82a8":"code","401adbb7":"code","e4aecddc":"code","b47f2f73":"code","21c69b7b":"code","98471323":"code","9b9db6f7":"code","1b0507e3":"code","c3fb8156":"code","9f337f69":"code","d9532275":"code","f511a549":"code","70b25459":"code","dbb8bd65":"code","71256eed":"code","9c72d0c4":"code","6c4aaf8e":"code","8c3122b1":"code","d78e1005":"code","42cdb626":"code","118bdf79":"code","2cedbb21":"code","46477526":"code","881378a8":"code","1d349cc2":"code","9103d2b4":"code","64f2a190":"code","6e899a11":"code","3ed7e2f0":"code","11e8cc0e":"code","29edeaf7":"code","ee7efd6b":"code","9f1f5b8b":"code","47196ebc":"code","5510001c":"code","f098cecd":"code","c276333d":"code","d2c375b3":"code","76682921":"code","4ed74fd1":"code","86da317d":"code","ef13996c":"code","24aba757":"code","1f8bf8fe":"code","296f1935":"code","691439fa":"markdown","053aeec8":"markdown","b58d408f":"markdown","10fdaec6":"markdown","2fbc6f26":"markdown","a44a7e03":"markdown","1105ec31":"markdown","a28a507b":"markdown"},"source":{"97ce82a8":"path = '\/kaggle\/input'","401adbb7":"%pylab inline\nimport pandas as pd\nimport numpy as np\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.manifold import TSNE\nfrom pprint import pprint\nfrom xgboost import XGBClassifier\nfrom gensim.models import Phrases, LdaModel\nfrom gensim.corpora import Dictionary\nimport nltk\nfrom nltk.stem import WordNetLemmatizer, SnowballStemmer\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import brown\nfrom nltk import FreqDist\nfrom wordcloud import WordCloud \nfrom collections import OrderedDict\n\n","e4aecddc":"# Creating a Df with 5 columns: Directory, Category, FileName, Title, Text\ncategories = []\ntitles = []\nall_data = []\n#df = pd.DataFrame()\n# dirname\nfor dirname, categoryname, filenames in os.walk(path):\n    # filename\n    for filename in filenames:\n        if filename == 'README.TXT':\n            filenames.remove(filename)\n        else:\n            # Absolute path\n            current_file = os.path.abspath(os.path.join(dirname, filename))\n            open_file = open(current_file, 'r', encoding=\"latin-1\")\n            # text_data\n            text_data = open_file.read().split('\\n')\n            text_data = list(filter(None, text_data))\n            titles.append(text_data[0])\n            all_data.append((dirname, dirname.rsplit('\/',1)[1], filename, text_data[0], text_data[1:]))\n            #data_df = f\"Directory: {dirname}, Category: {dirname.rsplit('\/',1)[1]}, FileName: {filename}, Title: {text_data[0]}, Text: {text_data[1:]}\"\n            #print(data_df)\ndf = pd.DataFrame(all_data, columns=['directory', 'category', 'fileName', 'title', 'text'])\ndf['text'] = df.text.astype(str)\nprint(df.head())  ","b47f2f73":"df.describe()","21c69b7b":"df.category.value_counts()","98471323":"bar_plot=df.category.value_counts().plot(kind='barh', figsize=(8, 6), color='teal')\nplt.xlabel(\"Nr. of Artciles\", labelpad=14)\nplt.ylabel(\"Category\", labelpad=14)\nplt.title(\"Nr. of Articles in category\", y=1.02, color='navy')\n\nfor index, value in enumerate(df.category.value_counts()):\n    plt.text(value, index, str(value))","9b9db6f7":"df.text[1][:1000]","1b0507e3":"# 0 - business, 1 -entertainment, 2 - politics, 3 - sport, 4 - tech\nlabel_enc = LabelEncoder()\ndf['label'] = label_enc.fit_transform(df['category'])\ndf.tail()","c3fb8156":"# An array of words\ndf_txt = np.array(df['text'])","9f337f69":"df_txt","d9532275":"stopwords = nltk.corpus.stopwords.words('english')\n\ndef docs_preprocessor(docs):\n    # Remain only letters\n    tokenizer = RegexpTokenizer('[A-Za-z]\\w+')\n    \n    for idx in range(len(docs)):\n         # Convert to lowercase\n        docs[idx] = docs[idx].lower() \n        # Split into words\n        docs[idx] = tokenizer.tokenize(docs[idx])  \n    \n    # Lemmatize all words with len>2 in documents \n    lemmatizer = WordNetLemmatizer()\n    docs = [[nltk.stem.WordNetLemmatizer().lemmatize(token) for token in doc if len(token) > 2 and token not in stopwords] for doc in docs]\n    #stemmer = SnowballStemmer('english')\n    #docs = [[stemmer.stem(token) for token in doc if len(token) > 2 and token not in stopwords] for doc in docs]\n         \n    return docs","f511a549":"df_txt = docs_preprocessor(df_txt)","70b25459":"# Add bigrams and trigrams to docs (only ones that appear 10 times or more)\nbigram = Phrases(df_txt, min_count=10)\ntrigram = Phrases(bigram[df_txt])\n\nfor idx in range(len(df_txt)):\n    for token in bigram[df_txt[idx]]:\n        if '_' in token:\n            df_txt[idx].append(token)\n    for token in trigram[df_txt[idx]]:\n        if '_' in token:\n            df_txt[idx].append(token)","dbb8bd65":"# Create a dictionary representation of the documents\ndictionary = Dictionary(df_txt)\nprint('Nr. of unique words in initital documents:', len(dictionary))\n\n# Filter out words that occur less than 10 documents, or more than 20% of the documents\ndictionary.filter_extremes(no_below=10, no_above=0.2)\nprint('Nr. of unique words after removing rare and common words:', len(dictionary))","71256eed":"df['text2'] = df_txt","9c72d0c4":"df['text3'] = [' '.join(map(str, j)) for j in df['text2']]","6c4aaf8e":"df.iloc[1475:1480,:]","8c3122b1":"#vectorizer = TfidfVectorizer(stop_words = 'english', lowercase=True)\nvectorizer = TfidfVectorizer(input='content', analyzer = 'word', lowercase=True, stop_words='english',\\\n                                   ngram_range=(1, 3), min_df=40, max_df=0.20,\\\n                                  norm='l2', use_idf=True, smooth_idf=True, sublinear_tf=True)\ntext_vector = vectorizer.fit_transform(df.text3)\ndtm = text_vector.toarray()\nfeatures = vectorizer.get_feature_names()","d78e1005":"h = pd.DataFrame(data = text_vector.todense(), columns = vectorizer.get_feature_names())\nh.iloc[990:1000,280:300]","42cdb626":"corpus = [dictionary.doc2bow(txt) for txt in df_txt]","118bdf79":"print(f'Number of unique tokens: {len(dictionary)}')\nprint(f'Number of documents: {len(corpus)}')","2cedbb21":"# Frequency distribution for dictionary\n#fdist = nltk.FreqDist(dictionary)\n#fdist","46477526":"X = text_vector\ny = df.label.values","881378a8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","1d349cc2":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","9103d2b4":"svc1 = RandomForestClassifier(random_state = 42)\nsvc1.fit(X_train, y_train)\nsvc1_pred = svc1.predict(X_test)\n#print(f\"Train Accuracy: {svc1.score(X_train, y_train)*100:.3f}%\")\nprint(f\"Test Accuracy: {svc1.score(X_test, y_test)*100:.3f}%\")","64f2a190":"svc2 = XGBClassifier(random_state = 42, use_label_encoder=False)\nsvc2.fit(X_train, y_train)\nsvc2_pred = svc2.predict(X_test)\n#print(f\"Train Accuracy: {svc2.score(X_train, y_train)*100:.3f}%\")\nprint(f\"Test Accuracy: {svc2.score(X_test, y_test)*100:.3f}%\")","6e899a11":"svc3 = SGDClassifier(random_state = 42)\nsvc3.fit(X_train, y_train)\nsvc3_pred = svc3.predict(X_test)\n#print(f\"Train Accuracy: {svc3.score(X_train, y_train)*100:.3f}%\")\nprint(f\"Test Accuracy: {svc3.score(X_test, y_test)*100:.3f}%\")","3ed7e2f0":"svc4 = KNeighborsClassifier()\n#pprint(svc4.get_params())\nsvc4.fit(X_train, y_train)\nsvc4_pred = svc4.predict(X_test)\n#print(f\"Train Accuracy: {svc4.score(X_train, y_train)*100:.3f}%\")\nprint(f\"Test Accuracy: {svc4.score(X_test, y_test)*100:.3f}%\")","11e8cc0e":"# Function to calculate mean absolute error\ndef mae(y_true, y_pred):\n    return np.mean(abs(y_true - y_pred))\n\n# Takes in a model, trains the model, and evaluates the model on the test set\ndef fit_and_evaluate(model):\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    # Make predictions and evalute\n    model_pred = model.predict(X_test)\n    model_mae = mae(y_test, model_pred)\n    \n    # Return the performance metric\n    return model_mae","29edeaf7":"svc1_mae = fit_and_evaluate(svc1)\nsvc2_mae = fit_and_evaluate(svc2)\nsvc3_mae = fit_and_evaluate(svc3)\nsvc4_mae = fit_and_evaluate(svc4)\n#print(svc1_mae, svc2_mae, svc3_mae, svc4_mae)","ee7efd6b":"plt.style.use('fivethirtyeight')\nfig = plt.figure(figsize(8, 6))\n\n# Dataframe to hold the results\nmodel_comparison = pd.DataFrame({'model': ['RandomForest Classifier', 'XGBClassifier', \n                                           'SGDClassifier', 'KNeighborsClassifier'\n                                          ],\n                                 'mae': [svc1_mae, svc2_mae, \n                                         svc3_mae, svc4_mae]})\n\n# Horizontal bar chart of test mae\nmodel_comparison.sort_values('mae', ascending = False).plot(x = 'model', y = 'mae', kind = 'barh',\n                                                           color = 'yellow', edgecolor = 'black')\n\n# Plot formatting\nplt.ylabel('')\nplt.yticks(size = 14)\nplt.xlabel('Mean Absolute Error')\nplt.xticks(size = 14)\nplt.title('Model Comparison on Test MAE', size = 20)","9f1f5b8b":"wc = WordCloud(width = 800, height = 800, \n                background_color ='white', \n               stopwords=stopwords,\n                min_font_size = 10, random_state=42).generate(df.text3.to_string())\n\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wc)\nplt.tight_layout(pad = 0) \nplt.axis(\"off\")\nplt.show()","47196ebc":"for x in df.category.unique():\n    wc = WordCloud(width = 800, height = 800, background_color ='white', stopwords=stopwords,\n                   min_font_size = 10, random_state=42)\n    wc.generate(df.text3[(df.category == x)].to_string())\n    \n    plt.imshow(wc)\n    plt.tight_layout(pad = 0) \n    plt.title(x)\n    plt.axis(\"off\")\n    plt.show()","5510001c":"# Set training parameters\nnum_topics = 5\nchunksize = 500 # Number of documents to consider at once (affects the memory consumption)\npasses = 20 # Number of passes through documents\niterations = 400\neval_every = 1  \n\n# Make a index to word dictionary\ntemp = dictionary[0] \nid2word = dictionary.id2token\n\nmodel = LdaModel(corpus=corpus, id2word=id2word, chunksize=chunksize, \\\n                       alpha='auto', eta='auto', random_state=78, \\\n                       iterations=iterations, num_topics=num_topics, \\\n                       passes=passes, eval_every=eval_every)","f098cecd":"# Frequency of top words in each topic\ndef explore_topic(lda_model, topic_number, topn, output=True):\n    terms = []\n    for term, frequency in lda_model.show_topic(topic_number, topn=topn):\n        terms += [term]\n        if output:\n            print(u'{:20} {:.3f}'.format(term, round(frequency, 3)))   \n    return terms\n\ntopic_summaries = []\n\nprint(u'{:20} {}'.format(u'term', u'frequency') + u'\\n')\nfor i in range(num_topics):\n    print('Topic '+str(i)+'\\n')\n    tmp = explore_topic(model,topic_number=i, topn=10, output=True)\n    topic_summaries += [tmp[:5]]\n    print('\\n')","c276333d":"# Assign a human-interpretable \ntop_labels = {0: 'business', 1:'sport', 2:'tech', 3:'entertainment', 4:'politics'}","d2c375b3":"top_dist =[]\nfor d in corpus:\n    tmp = {i:0 for i in range(num_topics)}\n    tmp.update(dict(model[d]))\n    vals = list(OrderedDict(tmp).values())\n    top_dist += [array(vals)]\n\ndef get_doc_topic_dist(model, corpus, kwords=False):\n    '''\n    LDA transformation, for each doc only returns topics with non-zero weight\n    This function makes a matrix transformation of docs in the topic space.\n    \n    model: the LDA model\n    corpus: the documents\n    kwords: if True adds and returns the keys\n    '''\n    top_dist =[]\n    keys = []\n\n    for d in corpus:\n        tmp = {i:0 for i in range(num_topics)}\n        tmp.update(dict(model[d]))\n        vals = list(OrderedDict(tmp).values())\n        top_dist += [array(vals)]\n        if kwords:\n            keys += [array(vals).argmax()]\n\n    return array(top_dist), keys\n\ntop_dist, lda_keys= get_doc_topic_dist(model, corpus, True)","76682921":"top_ws = []\nfor n in range(len(dtm)):\n    inds = int0(argsort(dtm[n])[::-1][:4])\n    tmp = [features[i] for i in inds]\n    \n    top_ws += [' '.join(tmp)]\n    \ndf['Text_Rep'] = pd.DataFrame(top_ws)\ndf['clusters'] = pd.DataFrame(lda_keys)\ndf['clusters'].fillna(10, inplace=True)\n\ncluster_colors = {0: 'blue', 1: 'green', 2: 'yellow', 3: 'red', 4: 'skyblue'}\n\ndf['colors'] = df['clusters'].apply(lambda j: cluster_colors[j])\n# Assign a human-interpretable labels \ndf['category_lda'] = df['clusters'].replace([0, 1, 2, 3, 4],['business','sport','tech','entertainment','politics'])","4ed74fd1":"from bokeh.plotting import figure, show, output_notebook, save\nfrom bokeh.models import HoverTool, value, LabelSet, Legend, ColumnDataSource","86da317d":"tsne = TSNE(n_components=2)\nX_tsne = tsne.fit_transform(top_dist)\n\ndf['X_tsne'] =X_tsne[:, 0]\ndf['Y_tsne'] =X_tsne[:, 1]\n\noutput_notebook()\n\nsource = ColumnDataSource(dict(\n    x=df['X_tsne'],\n    y=df['Y_tsne'],\n    color=df['colors'],\n    label=df['clusters'].apply(lambda l: top_labels[l]),\n    topic_key= df['clusters'],\n    title= df[u'title'],\n    content = df['text3'],\n    legend_field=df['category_lda']\n))\n\ndf = df.drop(columns=['colors','Text_Rep','X_tsne','Y_tsne'])","ef13996c":"title = 'Topics visualization'\n\nplot_lda = figure(plot_width=1000, plot_height=600,\n                     title=title, \n                     x_axis_type=None, y_axis_type=None, min_border=1)\nplot_lda.scatter(x='x', y='y', legend_field='legend_field',  source=source,\n                 color='color', alpha=0.6, size=5.0)\n\n# hover tools\nhover = plot_lda.select(dict(type=HoverTool))\nhover.tooltips = {\"content\": \"Title: @title, KeyWords: @content - Topic: @topic_key \"}\nplot_lda.legend.location = \"top_left\"\n\nshow(plot_lda)","24aba757":"df.tail()","1f8bf8fe":"print(f\"Correct categories: {len(df[df.category==df.category_lda])}\")","296f1935":"print(f\"Percentage of correct categories: {round(len(df[df.category==df.category_lda])\/len(df)*100,2)}%\")","691439fa":"#### Label Encoder","053aeec8":"### Clusters visualization","b58d408f":"### Classification Model","10fdaec6":"## Clustering","2fbc6f26":"### Pre-process and vectorize text","a44a7e03":"Remove rare words:","1105ec31":"#### Word Vectors","a28a507b":"### Word Cloud"}}