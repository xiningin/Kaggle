{"cell_type":{"84c80325":"code","5fa64564":"code","a5af523d":"code","111061e0":"code","40168556":"code","2f7e1b08":"code","42a373f8":"code","468ddf0e":"code","57d1c924":"code","6d5eed2a":"code","91eaa1b4":"code","c55b9586":"code","613023f6":"markdown","3ca6330a":"markdown","529e34b0":"markdown","b4fae681":"markdown"},"source":{"84c80325":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef load_dataset():\n    \n    int_type = 'int16'\n    float_type = 'float16'\n    calendar_dtypes = dict([(col, int_type) for col in ['wm_yr_wk', 'wday', 'month', 'year', 'snap_CA', 'snap_TX', 'snap_WI']])\n    calendar = pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv', dtype=calendar_dtypes)\n    \n    sales_dtypes = dict([(col, int_type) for col in [f'd_{i}' for i in range(1, 1913+1)]])\n    sales = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv', dtype=sales_dtypes)\n    \n    prices_dtypes = {'wm_yr_wk': int_type, 'sell_price': float_type}\n    prices = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv', dtype=prices_dtypes)\n    \n    return (calendar, sales, prices)","5fa64564":"calendar, sales, prices = load_dataset()","a5af523d":"%%time\n\nweekly_sales = None\n\n# What is the last value for 'wm_yr_wk'?\nlast_wm_yr_wk = calendar[calendar['d'] == 'd_1913']['wm_yr_wk'].iloc[0]\n\nfor wm_yr_wk in calendar.loc[(calendar['wm_yr_wk'] <= last_wm_yr_wk), 'wm_yr_wk'].unique():\n    # Which days are included in `wm_yr_wk`\n    days_in_wk = calendar.loc[calendar['wm_yr_wk'] == wm_yr_wk, 'd'].to_list()\n    \n    # How many item `item_id`s were sold in store  `store_id`?\n    # Columns look like:\n    #     | item_id | store_id | #sold |\n    item_sold = pd.concat([sales.loc[:, ['item_id', 'store_id']], sales.loc[:, days_in_wk].sum(axis=1).rename('#sold').astype('int16')], axis=1)\n\n    # How much was item `item_id` in week `wm_yr_wk` \n    # Columns look like:\n    #     | item_id | store_id | sell_price |\n    item_price = prices.loc[prices['wm_yr_wk'] == wm_yr_wk, ['store_id', 'item_id', 'sell_price']]\n    item_price = pd.merge(sales[['item_id', 'store_id']], item_price, on=['item_id', 'store_id'], how='left').fillna(0) # \u58f2\u308c\u3066\u306a\u3044\u3068\u3053\u308d\u304cNaN\u306b\u306a\u308b\u306e\u3067\u3001\u58f2\u4e0a\u8a08\u7b97\u4e0a0\u306b\u3057\u3066\u3082\u554f\u984c\u306a\u3044\n\n    # How much sales did item `item_id` earned in store `store_id`\n    # Columns look like:\n    #     | item_id | store_id | sell_price | #sold | sales\n    week_sales = pd.merge(item_price, item_sold, on=['item_id', 'store_id'], how='left')\n    week_sales['sales'] = week_sales[['sell_price', '#sold']].product(axis=1).astype('float32')\n\n    # add `wm_yr_wk`\n    week_sales['wm_yr_wk'] = wm_yr_wk\n    week_sales['wm_yr_wk'] = week_sales['wm_yr_wk'].astype('int16')\n    \n    # Do concatenation to bottom.\n    if weekly_sales is None:\n        weekly_sales = week_sales\n    else:\n        weekly_sales = pd.concat([weekly_sales, week_sales])","111061e0":"calendar['date'] = pd.to_datetime(calendar['date'])\nwm_yr_wk_values = np.sort(calendar['wm_yr_wk'].unique())\nwm_yr_wk_values_new = np.arange(len(wm_yr_wk_values))\nwm_yr_wk_values_replace = dict(zip(wm_yr_wk_values, wm_yr_wk_values_new))\ncalendar['#week'] = calendar['wm_yr_wk'].replace(wm_yr_wk_values_replace)","40168556":"calendar[['wm_yr_wk', '#week']].head(16)","2f7e1b08":"calendar['wm_yr_wk'].min(), calendar['wm_yr_wk'].max()","42a373f8":"(calendar['wm_yr_wk'] % 100).max()","468ddf0e":"prices['#week'] = prices['wm_yr_wk'].replace(wm_yr_wk_values_replace)\nweekly_sales['#week'] = weekly_sales['wm_yr_wk'].replace(wm_yr_wk_values_replace)","57d1c924":"def plot_weekly_sales(item_id, fig=None):\n    store_id_axes = [\n        ((0, 0), 'CA_1'), ((0, 1), 'CA_2'), ((0, 2), 'CA_3'), ((0, 3), 'CA_4'), \n        ((1, 0), 'TX_1'), ((1, 1), 'TX_2'), ((1, 2), 'TX_3'), \n        ((2, 0), 'WI_1'), ((2, 1), 'WI_2'), ((2, 2), 'WI_3')\n    ]\n    if fig is None:\n        fig, axes = plt.subplots(3, 4)\n        fig.set_figwidth(16)\n        fig.set_figheight(9)\n    else:\n        axes = fig.subplots(3, 4)\n        \n    for (r, c), store_id in store_id_axes:\n        df = weekly_sales[\n            (weekly_sales['item_id'] == item_id) & (weekly_sales['store_id'] == store_id)\n        ]\n        axes[r][c].bar(x=df['#week'], height=df['sales'])\n        axes[r][c].set_xlabel('#week')\n        axes[r][c].set_ylabel('sales[USD]')\n        axes[r][c].set_title(f'{item_id} {store_id}')\n    axes[1][3].cla()\n    axes[2][3].cla()\n    fig.suptitle(item_id)\n    fig.tight_layout()\n    \n    return fig","6d5eed2a":"fig = plot_weekly_sales('HOBBIES_1_001')","91eaa1b4":"weekly_sales.head(10)","c55b9586":"weekly_sales.to_csv('weekly_sales.csv')","613023f6":"Above 2 cells explain that `wm_yr_wk` is not sequential.  \nSo re-index wm_yr_wk from zero.\n","3ca6330a":"If you watch this dataframe carefully, you notice that `wm_yr_wk` is not sequential.  \n","529e34b0":"I'm happy if you upvote or comment!! Thank you.","b4fae681":"# Weekly Sales"}}