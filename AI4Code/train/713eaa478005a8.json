{"cell_type":{"86340125":"code","c8f68955":"code","c9a43b5d":"code","c86d8b94":"code","b6fac68b":"code","1ca07d09":"code","fdb53e3a":"code","e1aa6501":"code","acee4b3d":"code","8333cec5":"code","c2c37f1f":"code","344a80da":"code","c8a8951c":"code","8454ea39":"code","7c996ad7":"code","37bb5f9d":"code","19f24de7":"code","6bf92883":"code","d11e6650":"code","84868bff":"code","7dfddf75":"code","e9ab28b2":"code","7b130128":"code","6203c341":"code","b0d4d37f":"code","965ebd28":"code","8a9402cf":"code","c10dc87d":"code","f2871fdb":"code","4e4e4a77":"code","789fc53a":"code","33e8d09d":"code","525949d2":"code","c1326f89":"code","c66d8e13":"code","532bfd74":"code","cab0fc39":"code","4472de99":"code","925600ff":"code","8ed1e493":"code","91aa0db7":"code","743604a7":"code","b1f71e52":"code","fafcbf70":"code","648f5e51":"code","2030e7c1":"code","37e7d541":"code","e96f90e5":"code","2a3a0cf4":"code","d6f77795":"code","c6b050de":"code","ce204cbd":"code","f96952c1":"code","7e2daeac":"code","7810541b":"code","8c16de92":"code","eba7217c":"code","5c1f4814":"code","d0728125":"code","10d0fda6":"code","f72baa42":"code","f94ecbde":"code","699a1014":"code","97ba7104":"code","f0c284ac":"code","444982b6":"code","4cc48b84":"code","c84196da":"code","3e47a3cf":"code","a93e8cba":"code","b181ff2f":"code","e83e1761":"code","1d10a5eb":"code","8e94a207":"code","4b528deb":"code","3dcf1a42":"code","4f9ac26f":"code","4af51b3f":"code","d2a30708":"code","9e4134ef":"code","0b83cbae":"code","08dbd0f6":"code","0038c1be":"code","721c8769":"code","6999836c":"code","1ab03bd5":"code","179654e2":"code","be66ff54":"code","3e845bcd":"code","348c638d":"code","c5cc3b35":"code","f1c3bc96":"code","d16c57e2":"code","5fca18f1":"code","178a71eb":"code","41c8f998":"code","ee8b2a3b":"code","e4968bfa":"code","4c525721":"code","1b045a36":"code","a6b3e2e6":"code","1339dd54":"code","f944f3a2":"code","422b4f60":"code","3751b6fc":"code","b8d72fbe":"code","86768dc5":"code","9a8d6f75":"code","ea767fe5":"code","567fb50f":"code","1606050d":"code","338dc131":"code","c463e6dc":"code","5ed91be4":"code","e2e6e73f":"code","d64121af":"code","3bc50c7a":"code","483915c4":"code","e8e092e1":"code","4ba8d299":"code","c0e820ee":"code","5877f82d":"code","229be254":"code","da210965":"code","1c52dea4":"code","54e09cf1":"code","b527e1c4":"code","8ae84c4c":"code","fca0b6fe":"code","7e669fce":"code","1f35a21c":"code","b6db6116":"code","6b15ffa0":"code","5292198c":"code","3e694fcf":"code","111b5dcf":"code","8f5b75ed":"code","7da5d0a0":"code","0aaaa54c":"code","81e2b121":"code","8396ba12":"code","afa5649f":"code","441c8eeb":"code","54b9df02":"code","e4f4287d":"code","cc6f50f4":"code","ce56d2d9":"code","8275eca7":"code","a3e5ad84":"code","24bba953":"code","90e5c5ef":"code","6f5d3f94":"code","7ff363b0":"code","2752de8d":"code","6aae4ec8":"code","7c688644":"code","3bf72516":"code","517808f1":"code","a0c6d264":"code","63683a7e":"code","dd358001":"code","75aaa07b":"code","0e677ed0":"code","aa6471f8":"code","b04cad89":"code","1358bb78":"code","42834a72":"code","247509a4":"code","a3064e58":"code","13d30fe0":"code","20cf25f5":"code","5e6d9529":"code","1ad40f8a":"code","c51ac4d0":"code","58b24591":"code","ec307fe8":"code","d72fc151":"code","f9a7bd93":"code","5f854734":"code","9ad951a9":"code","ba4282a8":"code","00f286fc":"code","856153da":"code","01efec3d":"code","d87fe08c":"markdown","738bc34e":"markdown","a667608d":"markdown","e37f3951":"markdown","0683a2b3":"markdown","fa9ba63b":"markdown","0bc1cdff":"markdown","42863924":"markdown","d8d35dc1":"markdown","531d3f45":"markdown","5ee1ebea":"markdown","3c582f6d":"markdown","bed42591":"markdown","c67f2fd0":"markdown","858ad863":"markdown","895887ae":"markdown","f6a8a034":"markdown","8d73d320":"markdown","72cdc449":"markdown","a9d56b37":"markdown","4cb551d2":"markdown","c1b78f47":"markdown","b3d4be56":"markdown","cd6dce16":"markdown","3bbb0fbf":"markdown","c3ca08f8":"markdown","d1c2bdde":"markdown","e04e77ef":"markdown","dfd107b1":"markdown","1c0729d8":"markdown","4c92c391":"markdown","88a49692":"markdown","4133acf7":"markdown","d6d22951":"markdown","c0b39ed1":"markdown","cac666fb":"markdown"},"source":{"86340125":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c8f68955":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","c9a43b5d":"from sklearn.utils import resample\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, ConfusionMatrixDisplay\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","c86d8b94":"train = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")\ntest = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv\")","b6fac68b":"train.head()","1ca07d09":"test.head()","fdb53e3a":"train.describe().T","e1aa6501":"test.describe().T","acee4b3d":"train.info()","8333cec5":"test.info()","c2c37f1f":"train = train.drop(['enrollee_id', 'city'], axis = 1)\ntest = test.drop(['enrollee_id', 'city'], axis = 1)","344a80da":"for i in train.columns:\n    if train[i].isnull().sum() != 0:\n        print(\"there is {} nulls in trian.{}\".format(train[i].isnull().sum(), i))","c8a8951c":"for i in test.columns:\n    if test[i].isnull().sum() != 0:\n        print(\"there is {} nulls in test.{}\".format(test[i].isnull().sum(), i))","8454ea39":"fig = plt.figure(figsize=(15, 10))\nsns.heatmap(train.isnull())","7c996ad7":"fig = plt.figure(figsize=(10, 10))\ntrain.hist()\nplt.show()","37bb5f9d":"train.dropna(subset = ['experience'], inplace = True, axis = 0)","19f24de7":"train.isnull().sum()","6bf92883":"train =train.fillna(method= \"ffill\")","d11e6650":"train.dropna(subset = ['company_size', 'company_type'], axis = 0, inplace = True)","84868bff":"train.isnull().sum()","7dfddf75":"train.shape","e9ab28b2":"fig = plt.figure(figsize=(15, 10))\nsns.heatmap(test.isnull())","7b130128":"fig = plt.figure(figsize=(10, 10))\ntest.hist()\nplt.show()","6203c341":"test.dropna(subset = ['experience', 'enrolled_university', 'education_level', 'last_new_job'], inplace = True, axis = 0)","b0d4d37f":"test.isnull().sum()","965ebd28":"test =test.fillna(method= \"ffill\")","8a9402cf":"test.dropna(subset = ['company_type'], axis = 0, inplace = True)","c10dc87d":"test.isnull().sum()","f2871fdb":"test.shape","4e4e4a77":"print('there is {} duplicated rows in train'.format(train.duplicated().sum()))\nprint('there is {} duplicated rows in test'.format(test.duplicated().sum()))","789fc53a":"train.drop_duplicates(inplace = True)\ntest.drop_duplicates(inplace = True)","33e8d09d":"print('there is {} duplicated rows in train'.format(train.duplicated().sum()))\nprint('there is {} duplicated rows in test'.format(test.duplicated().sum()))","525949d2":"fig = plt.figure(figsize=(10, 10))\ntrain.hist()\nplt.show()","c1326f89":"fig = plt.figure(figsize=(10, 10))\ntest.hist()\nplt.show()","c66d8e13":"train.boxplot()","532bfd74":"test.boxplot()","cab0fc39":"sns.boxplot(x = train['training_hours'])","4472de99":"sns.boxplot(x = test['training_hours'])","925600ff":"sns.boxenplot(x = train['training_hours'])","8ed1e493":"sns.boxenplot(x = test['training_hours'])","91aa0db7":"train[train[\"training_hours\"] > 170].count()","743604a7":"test[test[\"training_hours\"] > 320].count()","b1f71e52":"train.dtypes #check columns data type ","fafcbf70":"train.experience.unique() #get the values in experience column","648f5e51":"train.experience.value_counts()","2030e7c1":"no_experience = ['0', '<1']\nbeginner = ['1, 2, 3']\nintermidiate = ['4', '5', '6', '7', '8', '9']\nadvanced = ['10', '11', '12', '13', '14', '15']","37e7d541":"def experience(value):\n    if value in no_experience:\n        return 'very low'\n    elif value in beginner:\n        return 'beginner'\n    elif value in intermidiate:\n        return 'intermidiate'\n    elif value in advanced:\n        return 'professinoal'\n    else:\n        return 'expert'","e96f90e5":"train.experience = train.experience.apply(experience)\ntest.experience = test.experience.apply(experience)","2a3a0cf4":"train.experience.value_counts()","d6f77795":"train.last_new_job.unique() #get the values in experience column","c6b050de":"train.last_new_job.value_counts()","ce204cbd":"def last_job(value):\n    if value == '1':\n        return 'short'\n    elif value == '2' or value == '3':\n        return 'long'\n    elif value == '4' or value == '>4':\n        return 'very long'\n    else:\n        return 'never'","f96952c1":"train.last_new_job = train.last_new_job.apply(last_job)\ntest.last_new_job = test.last_new_job.apply(last_job)","7e2daeac":"train.last_new_job.value_counts()","7810541b":"plt.figure(figsize = (15, 6))\nplt.subplot(1, 2, 1)\nsns.countplot(x = train['target'], data = train)\n\nplt.subplot(1, 2, 2)\nlabel = ['0','1']\nplt.pie(x= train['target'].value_counts(), labels = label, explode = (0, 0.08), shadow = True, autopct = '%1.2f%%')\n\nplt.show()","8c16de92":"def plot_data(column):\n    plt.figure(figsize = (20, 10))\n    plt.subplot(1, 2, 1)\n    sns.countplot(x = train[column], data = train)\n\n    plt.subplot(1, 2, 2)\n    label = [train.target.unique()[0], train.target.unique()[1]]\n    sns.countplot(x = train[column], hue = 'target', data = train)\n\n    plt.show()","eba7217c":"for i in train.columns:\n    if len(train[i].unique())<= 8 and i != 'target':\n        plot_data(i)","5c1f4814":"train['experience'].value_counts()","d0728125":"train['experience'].value_counts().plot(kind='pie', figsize=(6,6), autopct = '%1.2f%%')","10d0fda6":"ax = train['experience'].value_counts().plot(kind='bar', figsize=(14,14))","f72baa42":"ax = train['training_hours'].plot(kind='density', figsize=(14,6)) # kde\nax.axvline(train['training_hours'].mean(), color='red')\nax.axvline(train['training_hours'].median(), color='green')","f94ecbde":"relevent_experience = train['relevent_experience'].value_counts()\nrelevent_experience.plot.pie(autopct = '%1.1f%%',shadow=True ,explode = (0, 0.1))","699a1014":"train['education_level'].value_counts().plot(kind='pie', figsize=(6,6), autopct = '%1.1f%%')\n#educ_level = train_df['education_level'].value_counts()\n#educ_level.plot.pie(autopct = '%1.1f%%',shadow=True ,explode = (0, 0.5))","97ba7104":"train['experience'].value_counts().plot(kind='pie', figsize=(6,6), autopct = '%1.1f%%')","f0c284ac":"train['company_size'].value_counts().plot(kind='pie', figsize=(6,6), autopct = '%1.1f%%')","444982b6":"train['last_new_job'].value_counts().plot(kind='pie', figsize=(6,6), autopct = '%1.1f%%')\nplt.title(\"time from the last new job\")","4cc48b84":"sns.catplot(y=\"experience\", x=\"relevent_experience\",hue=\"target\",data=train, palette=\"flare\")","c84196da":"sns.catplot(y=\"experience\", x=\"enrolled_university\",hue=\"target\",data=train,palette=\"flare\")","3e47a3cf":"sns.catplot(y=\"experience\", x=\"education_level\",hue=\"target\",data=train,palette=\"flare\")","a93e8cba":"sns.countplot(data=train,x='experience',hue='target',palette=['#432371',\"#FAAE7B\"])","b181ff2f":"sns.countplot(data=train,x='last_new_job',hue='target',palette=[\"#7fcdbb\",\"#edf8b1\"])","e83e1761":"sns.countplot(data = train ,x='gender',hue='target',palette=[\"#7fcdbb\",\"#edf8b1\"])","1d10a5eb":"sns.countplot(data = train ,x='relevent_experience',hue='target',palette=['#432371',\"#FAAE7B\"])","8e94a207":"for i in train.columns:\n    print(\"in columns {} there is : {}\".format(i, len(train[i].unique())))","4b528deb":"cat_columns = train.select_dtypes(['object']).columns\nprint(cat_columns)","3dcf1a42":"for i in cat_columns:\n    print('in the columns: {}'.format(i))\n    print(train[i].value_counts())\n    print()","4f9ac26f":"#train[cat_columns] = train[cat_columns].apply(lambda x: pd.factorize(x)[0])\n#test[cat_columns] = test[cat_columns].apply(lambda x: pd.factorize(x)[0])\n\nfor i in cat_columns:\n    temp = pd.get_dummies(train[i], drop_first=True)\n    train = pd.concat([train, temp], axis=1)\n    train.drop(i, inplace=True, axis=1)","4af51b3f":"train.head()","d2a30708":"train.head()","9e4134ef":"test.head()","0b83cbae":"def plot_confusion(y_test, y_predict):\n    cm = confusion_matrix(y_test, y_predict)\n    print(cm)\n    sns.heatmap(cm\/np.sum(cm), annot=True, \n            fmt='.2%', cmap='Blues')","08dbd0f6":"def print_report(y_test, y_predict):\n    report = classification_report(y_test, y_predict, output_dict = True)\n    return pd.DataFrame(report)","0038c1be":"X = train.drop('target', axis = 1)\ny = train['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) ","721c8769":"X_train.shape, y_train.shape","6999836c":"X_test.shape, y_test.shape","1ab03bd5":"sc = MinMaxScaler()\nsc.fit(X_train)","179654e2":"x_train = sc.fit_transform(X_train)\nx_test = sc.fit_transform(X_test)","be66ff54":"x_train.shape","3e845bcd":"lg = LogisticRegression(random_state=0)","348c638d":"lg.fit(x_train, y_train)","c5cc3b35":"y_pr = lg.predict(x_test)","f1c3bc96":"train_score = lg.score(x_train, y_train)\ntest_score = lg.score(x_test, y_test)\nprint(train_score, test_score)","d16c57e2":"plot_confusion(y_test, y_pr)","5fca18f1":"lg_1 = print_report(y_test, y_pr).T\nlg_1","178a71eb":"knn = KNeighborsClassifier(n_neighbors =5)","41c8f998":"knn.fit(x_train, y_train)    ","ee8b2a3b":"y_pr = knn.predict(x_test)","e4968bfa":"knn_train_score = knn.score(x_train, y_train) \nknn_test_score = knn.score(x_test, y_test)","4c525721":"print(knn_train_score, knn_test_score)","1b045a36":"plot_confusion(y_test, y_pr)","a6b3e2e6":"knn_r = print_report(y_test, y_pr).T\nknn_r","1339dd54":"svc = SVC(kernel = 'rbf', random_state =  0)","f944f3a2":"svc.fit(x_train, y_train)","422b4f60":"y_pr = svc.predict(x_test)","3751b6fc":"svm_train_score = svc.score(x_train, y_train)\nsvm_test_score = svc.score(x_test, y_test)","b8d72fbe":"print(svm_train_score, svm_test_score)","86768dc5":"plot_confusion(y_test, y_pr)","9a8d6f75":"svm_r = print_report(y_test, y_pr).T\nsvm_r","ea767fe5":"minority = train[train['target'] == 1]\n#set other classes to another dataframe\nmajority = train[train['target'] == 0]  \n#upsample the minority class\nminority_upsampled = resample(minority,random_state=42,n_samples=majority.shape[0],replace=True)\n#concatenate the upsampled dataframe\nupsample_train = pd.concat([minority_upsampled,majority])\nupsample_train","567fb50f":"upsample_train.isnull().sum()","1606050d":"X_up = upsample_train.drop('target', axis = 1)\ny_up = upsample_train['target']\nX_train_up, X_test_up, y_train_up, y_test_up = train_test_split(X_up, y_up, test_size=0.3, random_state=42) ","338dc131":"X_train_up.shape, y_train_up.shape","c463e6dc":"X_test_up.shape, y_test_up.shape","5ed91be4":"sc_up = MinMaxScaler()\nsc_up.fit(X_train_up)","e2e6e73f":"x_train_up = sc_up.fit_transform(X_train_up)\nx_test_up = sc_up.fit_transform(X_test_up)","d64121af":"lg_up = LogisticRegression(random_state=0)","3bc50c7a":"lg_up.fit(x_train_up, y_train_up)","483915c4":"y_pr_up = lg_up.predict(x_test_up)","e8e092e1":"lg_up_train_score = lg_up.score(x_train_up, y_train_up)\nlg_up_test_score = lg_up.score(x_test_up, y_test_up)","4ba8d299":"lg_up_train_score, lg_up_test_score","c0e820ee":"plot_confusion(y_test_up, y_pr_up)","5877f82d":"report = print_report(y_test_up, y_pr_up).T\nreport","229be254":"knn_up = KNeighborsClassifier(n_neighbors =5)","da210965":"knn_up.fit(x_train_up, y_train_up)","1c52dea4":"y_pr_up = knn_up.predict(x_test_up)","54e09cf1":"knn_up_train_score = knn_up.score(x_train_up, y_train_up)\nknn_up_test_score = knn_up.score(x_test_up, y_test_up)","b527e1c4":"knn_up_train_score, knn_up_test_score","8ae84c4c":"plot_confusion(y_test_up, y_pr_up)","fca0b6fe":"report = print_report(y_test_up, y_pr_up).T\nreport","7e669fce":"svm_up = SVC(kernel = 'rbf', random_state =  0)","1f35a21c":"svm_up.fit(x_train_up, y_train_up)","b6db6116":"y_pr_up = svm_up.predict(x_test_up)","6b15ffa0":"svm_up_train_score = svm_up.score(x_train_up, y_train_up)\nsvm_up_test_score = svm_up.score(x_test_up, y_test_up)","5292198c":"svm_up_train_score, svm_up_test_score","3e694fcf":"plot_confusion(y_test_up ,y_pr_up)","111b5dcf":"print_report(y_test_up ,y_pr_up).T","8f5b75ed":"minority = train[train['target'] == 1]\n#set other classes to another dataframe\nmajority = train[train['target'] == 0]  \n#upsample the minority class\nmajority_undersampled = resample(majority,random_state=42,n_samples=minority.shape[0],replace=True)\n#concatenate the upsampled dataframe\nundersample_train = pd.concat([majority_undersampled, minority])\nundersample_train","7da5d0a0":"undersample_train.target.value_counts()","0aaaa54c":"X_un= undersample_train.drop('target', axis = 1)\ny_un = undersample_train['target']\nX_train_un, X_test_un, y_train_un, y_test_un = train_test_split(X_un, y_un, test_size=0.3, random_state=42) ","81e2b121":"X_train_un.shape, y_train_un.shape","8396ba12":"X_test_un.shape, y_test_un.shape","afa5649f":"sc_un = MinMaxScaler()\nsc_un.fit(X_train_un)","441c8eeb":"x_train_un = sc_un.fit_transform(X_train_un)\nx_test_un = sc_un.fit_transform(X_test_un)","54b9df02":"lg_un = LogisticRegression(random_state=0)","e4f4287d":"lg_un.fit(x_train_un, y_train_un)","cc6f50f4":"y_un_pr = lg_un.predict(x_test_un)","ce56d2d9":"lg_un_train_score = lg_un.score(x_train_un, y_train_un) \nlg_un_test_score = lg_un.score(x_test_un, y_test_un)","8275eca7":"lg_un_train_score, lg_un_test_score","a3e5ad84":"plot_confusion(y_test_un, y_un_pr)","24bba953":"print_report(y_test_un, y_un_pr).T","90e5c5ef":"knn_un = KNeighborsClassifier(n_neighbors = 5)","6f5d3f94":"knn_un.fit(x_train_un, y_train_un)","7ff363b0":"y_pr_un = knn_un.predict(x_test_un)","2752de8d":"knn_un_train_score = knn_un.score(x_train_un, y_train_un) \nknn_un_test_score = knn_un.score(x_test_un, y_test_un)","6aae4ec8":"knn_un_train_score, knn_un_test_score","7c688644":"plot_confusion(y_test_un, y_pr_un)","3bf72516":"print_report(y_test_un, y_pr_un).T","517808f1":"svm_un = SVC(kernel = 'rbf', random_state =  0)","a0c6d264":"svm_un.fit(x_train_un, y_train_un)","63683a7e":"y_pr_un = svm_un.predict(x_test_un)","dd358001":"svm_un.score(x_train_un, y_train_un), svm_un.score(x_test_un, y_test_un)","75aaa07b":"plot_confusion(y_test_un, y_pr_un)","0e677ed0":"print_report(y_test_un, y_pr_un).T","aa6471f8":"from imblearn.over_sampling import SMOTE","b04cad89":"sm = SMOTE(random_state = 42)","1358bb78":"x_res, y_res = sm.fit_resample(x_train, y_train)","42834a72":"lg_2 = LogisticRegression(random_state=0)","247509a4":"lg_2.fit(x_res, y_res)","a3064e58":"y2_pred = lg_2.predict(x_test)","13d30fe0":"print(lg_2.score(x_res, y_res)) \nprint(lg_2.score(x_test, y_test))","20cf25f5":"plot_confusion(y_test, y2_pred)","5e6d9529":"print_report(y_test, y2_pred).T","1ad40f8a":"knn2 = KNeighborsClassifier(n_neighbors = 5)","c51ac4d0":"knn2.fit(x_res, y_res)","58b24591":"y2_pr = knn2.predict(x_test)","ec307fe8":"knn2.score(x_res, y_res), knn2.score(x_test, y_test)","d72fc151":"plot_confusion(y_test, y2_pr)","f9a7bd93":"print_report(y_test, y2_pr).T","5f854734":"svm2 = SVC(kernel = 'rbf', random_state =  0)","9ad951a9":"svm2.fit(x_res, y_res)","ba4282a8":"y2_pr = svm2.predict(x_test)","00f286fc":"svm2.score(x_res, y_res), svm2.score(x_test, y_test)","856153da":"plot_confusion(y_test, y2_pr)","01efec3d":"print_report(y_test, y2_pr).T","d87fe08c":"# Modeling\n\n1- logistic regression\n\n2- KNN\n\n3- SVM \n\n4- kernel SVM\n\n5- Naive Bayes\n\n6- Decision Tree Classification\n\n7- random forest classification","738bc34e":"## examing the feautres in the data","a667608d":"### Logistic Regression","e37f3951":"## split and scale data","0683a2b3":"# EDA","fa9ba63b":"### 1- drop un-neccessary columns","0bc1cdff":"# Modeling without resampling","42863924":"# modeling with undersampling","d8d35dc1":"#### **train data**","531d3f45":"### Logistic Regression","5ee1ebea":"### SVM model","3c582f6d":"# Train use smote","bed42591":"### SVM","c67f2fd0":"#### **test data**","858ad863":"### KNN","895887ae":"# read data","f6a8a034":"from the above values we can see that there is diffenece bewteen percentage of the nulls in the test file so we will deal with each df separately\n","8d73d320":"# Wrangling Data\n1. change columns dtype in case it needed \n2. rename some columns vales","72cdc449":"### 2- drop nulls","a9d56b37":"#### common function","4cb551d2":"### SVM","c1b78f47":"### KNN model\n","b3d4be56":"# model with oversample","cd6dce16":"# conclusion","3bbb0fbf":"### Logistic Regression","c3ca08f8":"# modeling","d1c2bdde":"### 4- remove outliers","e04e77ef":"### KNN","dfd107b1":"## encode categorical data","1c0729d8":"## logistic regression ","4c92c391":"# Clean Data\n1. remove un-neccessary columns\n2. remove nulls \n3. remove duplicates\n4. remove outliers","88a49692":"## realiton between features and target","4133acf7":"**from the plots above and according to the distrubtion of the training hours we can say that outliers here are not values that can be removed as they are distributed in connected way**","d6d22951":"### 3- remove duplicates","c0b39ed1":"## SVM model","cac666fb":"## KNN model\n"}}