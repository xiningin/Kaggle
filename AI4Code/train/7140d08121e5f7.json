{"cell_type":{"2c5a2f30":"code","4235c174":"code","8cb91097":"code","905ff6fc":"code","ea66f636":"code","38095bca":"code","de0e7e17":"code","181ab8c6":"code","99989cbf":"code","4648ea86":"code","faed4129":"code","16939468":"code","cad11e48":"code","101109af":"code","8143e3d9":"code","5aa4eaf6":"code","480b2f56":"code","2f014191":"code","ddcae99d":"code","9f10b7d7":"code","07c893db":"code","c1f6c1bc":"code","e88ab27a":"code","6626e6f1":"code","59371162":"code","52dfe385":"code","1459a340":"code","81b7e922":"code","88944484":"code","4049c53e":"code","9a8309fa":"code","d0db0d2d":"code","91c58856":"code","a7539d88":"code","8ced3e92":"code","e30c6b82":"code","060a1ba0":"code","57e52a44":"code","2ac26709":"code","cfd1cf4e":"code","2aa13578":"code","3d7c0ba9":"code","26a924be":"code","7c5af583":"code","b8b2fc69":"code","e2ae37f4":"code","54b0817f":"code","765a5f47":"code","a88a4a78":"code","948ddf5b":"code","a6bfa6f4":"code","f71f570c":"code","c405d621":"code","b390d801":"code","fd9f4e8e":"code","58f8a6eb":"code","9f3fcd4c":"code","0815338f":"code","6256e703":"code","7d7eb163":"code","12802238":"code","83c189ac":"code","1c109c20":"code","7d9b77f7":"code","53647f25":"code","8218bf38":"code","2e0c5c05":"code","4fa2cf74":"code","d45f0876":"code","889db88b":"code","83ff1c34":"code","4a175d63":"markdown","a07af107":"markdown","a69daa55":"markdown","224bb197":"markdown","8d7eeb9f":"markdown","bc347fd6":"markdown","fb41794b":"markdown","0bb63104":"markdown","981287c1":"markdown","3553eced":"markdown","b9d67ee6":"markdown","b6eff1b1":"markdown","0d2f37af":"markdown","386ab283":"markdown","b60da6cd":"markdown","331cfd5c":"markdown","3918f295":"markdown","50701ef5":"markdown","99436f21":"markdown"},"source":{"2c5a2f30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4235c174":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom collections import defaultdict\nfrom collections import  Counter\nplt.style.use('ggplot')\nstop=set(stopwords.words('english'))\nimport re\nfrom nltk.tokenize import word_tokenize\nimport gensim\nimport string\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tqdm import tqdm\nfrom keras.models import Sequential\nfrom keras.layers import Embedding,LSTM,Dense,SpatialDropout1D\nfrom keras.initializers import Constant\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom keras.layers import GlobalMaxPooling1D, Conv1D, MaxPooling1D, Flatten, Bidirectional, SpatialDropout1D\nfrom keras.preprocessing import sequence, text\nfrom keras.callbacks import EarlyStopping\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff","8cb91097":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","905ff6fc":"df_train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')","ea66f636":"df_train.head()","38095bca":"df_test.head()","de0e7e17":"#Removing columns not relevant to our prediction\ndf_train.drop(['keyword','location'],axis=1,inplace=True)\ndf_test.drop(['keyword','location'],axis=1,inplace=True)","181ab8c6":"df_train.head()","99989cbf":"print(df_train.shape)\nprint(df_test.shape)","4648ea86":"g=sns.countplot(x='target',data=df_train)","faed4129":"fig,(ax1,ax2) = plt.subplots(1,2,figsize=(10,5))\nlen_1 = df_train[df_train['target']==1]['text'].str.len()\nax1.hist(len_1,color='red')\nlen_2 = df_train[df_train['target']==0]['text'].str.len()\nax2.hist(len_1,color='green')\nax1.set_title('Disaster tweet analysis')\nax2.set_title('Non-disaster tweet analysis')","16939468":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\nsent_len1 = df_train[df_train['target']==1]['text'].str.split().map(lambda x:len(x))\nax1.hist(sent_len1,color='red')\nsent_len0 = df_train[df_train['target']==0]['text'].str.split().map(lambda x:len(x))\nax2.hist(sent_len0,color='green')\nax1.set_title('Disaster tweets')\nax2.set_title('Non disaster tweets')","cad11e48":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))\navg_1 = df_train[df_train['target']==1]['text'].str.split().apply(lambda x:[len(i) for i in x])\navg_0 = df_train[df_train['target']==0]['text'].str.split().apply(lambda x:[len(i) for i in x])\nsns.distplot(avg_1.map(lambda x:np.mean(x)),ax=ax1,color='red')\nsns.distplot(avg_0.map(lambda x:np.mean(x)),ax=ax2,color='green')\nax1.set_title('Disaster tweets')\nax2.set_title('Non disaster tweets')","101109af":"def make_corpus(t):\n    res = []\n    for x in df_train[df_train['target']==t]['text'].str.split():\n        for i in x:\n            res.append(i)\n    return res","8143e3d9":"f = make_corpus(0)","5aa4eaf6":"# d1 = defaultdict(int)\n# for word in f:\n#     if word in stop:\n#         d1[word]+=1\n\n# print(d1)\n\nd1 = Counter(f)","480b2f56":"top=sorted(d1.items(), key=lambda x:x[1],reverse=True)[:10] \nprint(top)","2f014191":"#Unzip the dictionary\nx,y = zip(*top)\nplt.bar(x,y)","ddcae99d":"#Similar process for the target 1\ncorpus=make_corpus(1)\n\nd2=defaultdict(int)\nfor word in corpus:\n    if word in stop:\n        d2[word]+=1\n\ntop=sorted(d2.items(), key=lambda x:x[1],reverse=True)[:10] \n    \nx,y=zip(*top)\nplt.bar(x,y)","9f10b7d7":"c1 = make_corpus(0)\n\nd1 = defaultdict(int)\nimport string\ns1 = string.punctuation\nprint(s1)","07c893db":"plt.figure(figsize=(12,6))\nfor i in c1:\n    if i in s1:\n        d1[i]+=1\n\nx,y = zip(*d1.items())\nplt.bar(x,y)","c1f6c1bc":"plt.figure(figsize=(12,6))\nc2 = make_corpus(1)\nd2 = defaultdict(int)\nfor i in c2:\n    if i in s1:\n        d2[i]+=1\nx,y = zip(*d2.items())\nplt.bar(x,y)","e88ab27a":"plt.figure(figsize=(6,6))\nf1 = make_corpus(1)\nc1 = Counter(f1)\nfrequent1 = c1.most_common()\nx = []\ny = []\nfor a,b in frequent1[:10]:\n    x.append(a)\n    y.append(b)\n    \nsns.barplot(x,y)","6626e6f1":"plt.figure(figsize=(6,6))\nf0 = make_corpus(0)\nc0 = Counter(f1)\nfrequent0 = c1.most_common()\nx = []\ny = []\nfor a,b in frequent0[:10]:\n    x.append(a)\n    y.append(b)\n    \nsns.barplot(x,y)","59371162":"t_len = len(df_train)\ntest_len  = len(df_test)\nfinal = pd.concat([df_train,df_test],axis=0)","52dfe385":"final.head()","1459a340":"p1 = final['text'].str.split().apply(lambda x:len(x))\nmax(p1)","81b7e922":"print(final.shape)\nprint(t_len)\nprint(test_len)","88944484":"def url_removal(a):\n    b = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return b.sub(r'',a)\n\na = 'hello this is www.kaggle.com'\nb = 'follow me on https:\/\/www.gmail.com'\n\nprint(url_removal(a))\nprint(url_removal(b))","4049c53e":"final['text'] = final['text'].apply(lambda x: url_removal(x))","9a8309fa":"def html_removal(a):\n    b = re.compile(r'<.*?>')\n    return b.sub(r'',a)\n\na = '<h1>This is<\/h1>'\nb = 'tagging<b>'\n\nprint(html_removal(a))\nprint(html_removal(b))","d0db0d2d":"def punctuation_remove(a):\n    b = str.maketrans('','',string.punctuation)\n    return a.translate(b)\n\na = 'Hello, this is me!!!'\nb = 'Excuse me: What are you doing here?'\nprint(punctuation_remove(a))\nprint(punctuation_remove(b))","91c58856":"final['text'] = final['text'].apply(lambda x: punctuation_remove(x))","a7539d88":"!pip install pyspellchecker","8ced3e92":"from spellchecker import SpellChecker\ns = SpellChecker()\ndef corrections(text):\n    corrected = []\n    wrong = s.unknown(text.split())\n    for word in text.split():\n        if word in wrong:\n            corrected.append(s.correction(word))\n        else:\n            corrected.append(word)\n    return ' '.join(corrected)\n\na = 'pleese corect me and fix my mistke'\nprint(corrections(a))","e30c6b82":"#final['text']=final['text'].apply(lambda x : corrections(x))","060a1ba0":"#Function to get roc-auc score for validation\ndef roc_auc(predictions,target):\n    \n    fpr, tpr, thresholds = metrics.roc_curve(target, predictions)\n    roc_auc = metrics.auc(fpr, tpr)\n    return roc_auc","57e52a44":"#Making a backup copy\nm1 = final.copy()","2ac26709":"train = final[:t_len]\ntest = final[t_len:]","cfd1cf4e":"print(train.shape)\nprint(test.shape)","2aa13578":"test.drop(['target'],axis=1,inplace=True)","3d7c0ba9":"train_y = train['target']\ntrain.drop(['target'],axis=1,inplace=True)","26a924be":"x_train,x_valid,y_train,y_valid = train_test_split(train,train_y,test_size=0.1)","7c5af583":"print(x_train.shape)\nprint(x_valid.shape)\nprint(y_train.shape)\nprint(y_valid.shape)","b8b2fc69":"tfv = TfidfVectorizer()\ntfv.fit(train['text'])\nx_train_tfv = tfv.transform(x_train['text'])\nx_valid_tfv = tfv.transform(x_valid['text'])","e2ae37f4":"print(x_train_tfv.shape)\nprint(x_valid_tfv.shape)","54b0817f":"print(x_train_tfv)","765a5f47":"len(tfv.get_feature_names())","a88a4a78":"clf = LogisticRegression(C=1.0)\nclf.fit(x_train_tfv, y_train)\npredictions = clf.predict(x_valid_tfv)\n\nprint (\"ROC score: %0.3f \" % roc_auc(y_valid, predictions))","948ddf5b":"ctv = CountVectorizer()\nctv.fit(train['text'])\nx_train_ctv = ctv.transform(x_train['text'])\nx_valid_ctv = ctv.transform(x_valid['text'])","a6bfa6f4":"clf = LogisticRegression(C=1.0)\nclf.fit(x_train_ctv,y_train)\npredictions = clf.predict(x_valid_ctv)\n\nprint (\"ROC score: %0.3f \" % roc_auc(y_valid, predictions))","f71f570c":"def create_corpus(df):\n    corpus=[]\n    for tweet in tqdm(df['text']):\n        words=[word.lower() for word in word_tokenize(tweet) if((word.isalpha()==1) & (word not in stop))]\n        corpus.append(words)\n    return corpus","c405d621":"corpus=create_corpus(m1)","b390d801":"embeds = {}\nwith open('..\/input\/glove6b100dtxt\/glove.6B.100d.txt') as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        vectors = np.asarray(values[1:],'float32')\n        embeds[word]=vectors\nf.close()","fd9f4e8e":"token = Tokenizer()\ntoken.fit_on_texts(corpus)\nsequence = token.texts_to_sequences(corpus)","58f8a6eb":"print('Number of unique words',len(token.word_index))","9f3fcd4c":"max_len = 50\ntweet_pad = pad_sequences(sequence,maxlen=max_len,truncating='post',padding='post')","0815338f":"word_index = token.word_index\nnum_w = len(word_index)+1\nembedding_matrix = np.zeros((num_w,100))\n\nfor word,i in tqdm(word_index.items()):\n    if i>num_w:\n        continue\n    vec = embeds.get(word)\n    if vec is not None:\n        embedding_matrix[i] = vec\n    ","6256e703":"embedding_matrix.shape","7d7eb163":"model = Sequential()\nembedding=Embedding(num_w,100,embeddings_initializer=Constant(embedding_matrix),input_length=max_len,trainable=False)\nmodel.add(embedding)\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\noptimzer=Adam(learning_rate=1e-5)\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['accuracy'])","12802238":"model.summary()","83c189ac":"train = tweet_pad[:t_len]\ntest = tweet_pad[t_len:]","1c109c20":"x_train,x_test,y_train,y_test = train_test_split(train,train_y,test_size=0.1)","7d9b77f7":"x_train,x_val,y_train,y_val = train_test_split(x_train,y_train)","53647f25":"reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=5, verbose=0, mode='auto',min_delta=0.0001, cooldown=0, min_lr=0)","8218bf38":"history=model.fit(x_train,y_train,batch_size=4,epochs=20,validation_data=(x_val,y_val),verbose=1,callbacks=[reduce_lr])","2e0c5c05":"sample_sub=pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')","4fa2cf74":"y_pre=model.predict(test)\ny_pre=np.round(y_pre).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pre})\nsub.to_csv('submission.csv',index=False)","d45f0876":"model = Sequential()\nembedding=Embedding(num_w,100,embeddings_initializer=Constant(embedding_matrix),input_length=max_len,trainable=False)\nmodel.add(embedding)\nmodel.add(Bidirectional(LSTM(64, dropout=0.2, recurrent_dropout=0.2)))\nmodel.add(Dense(1, activation='sigmoid'))\noptimzer=Adam(learning_rate=1e-5)\nmodel.compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['accuracy'])","889db88b":"history=model.fit(x_train,y_train,batch_size=4,epochs=20,validation_data=(x_val,y_val),verbose=1,callbacks=[reduce_lr])","83ff1c34":"y_pre=model.predict(test)\ny_pre=np.round(y_pre).astype(int).reshape(3263)\nsub=pd.DataFrame({'id':sample_sub['id'].values.tolist(),'target':y_pre})\nsub.to_csv('submissionbi.csv',index=False)","4a175d63":"# ML modeling","a07af107":"<h2>Basic models<\/h2>","a69daa55":"# Maximum sentence length","224bb197":"<h2>Stopword analysis in tweets<\/h2>","8d7eeb9f":"Our very first model will focus on simple TF-IDF (Term frequency - inverse document frequency) followed by simple classification models.","bc347fd6":"# Exploratory Data analysis","fb41794b":"<h2>Number of characters in tweets<\/h2>","0bb63104":"<h2>Number of words in a tweet<\/h2>","981287c1":"# Data cleaning","3553eced":"Our training data is not skewed. We have almost equal distributions for each target value","b9d67ee6":"# GloVe vectorization","b6eff1b1":"<h3>Spell checking<\/h3>","0d2f37af":"The distribution among the both are very similar. The most common tweets comprise of about 120-140 characters.","386ab283":"<h3>Remove URLS<\/h3>","b60da6cd":"<h2>Checking punctuation<\/h2>","331cfd5c":"<h2>Common words<\/h2>","3918f295":"<h3>Removing Punctuation<\/h3>","50701ef5":"<h2>Average Word length<\/h2>","99436f21":"<h3>Removing HTML tags<\/h3>"}}