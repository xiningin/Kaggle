{"cell_type":{"eff57230":"code","5f3059c1":"code","a0944909":"code","56b2cadb":"code","b41d8958":"code","8346867c":"code","fcfae269":"code","5323354f":"code","2f0a252a":"code","9baa1a59":"code","506824a9":"code","a8ca321c":"code","c047cc3f":"code","1b8273a2":"code","3ea4f38c":"code","96ab69a4":"code","749c035f":"code","11a27cc5":"code","6a163d81":"code","029f8693":"code","2060db72":"code","7774df00":"code","830f8319":"code","591321b4":"code","5c1fbfa9":"code","0d4e5e69":"code","1bbd6ab3":"markdown"},"source":{"eff57230":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\nimport matplotlib\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f3059c1":"df = pd.read_csv('..\/input\/911-calls\/911.csv', encoding='ISO-8859-2')\npd.set_option('display.max_columns', None)\ndf.head()","a0944909":"df.sample(5)","56b2cadb":"del df['e']","b41d8958":"from datetime import datetime\n\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])\ndf.info()","8346867c":"#added a reasons column\n\na = df['title'].iloc[0]","fcfae269":"a.split(':')[0]","5323354f":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])\n\ndf","2f0a252a":"df['Reason']","9baa1a59":"df.describe()","506824a9":"#countplot of reasons\n\nsns.countplot(x='Reason',data=df)\nplt.title ('Main Reasons for 911 calls');","a8ca321c":"df['timeStamp'] =pd.to_datetime(df['timeStamp'])","c047cc3f":"time = df['timeStamp'].iloc[0]","1b8273a2":"time.year","3ea4f38c":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Day of week'] = df['timeStamp'].apply(lambda time: time.dayofweek)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)","96ab69a4":"df.head()","749c035f":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thurs',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of week'] = df['Day of week'].map(dmap)","11a27cc5":"#Friday has the most number of calls\n\nsns.countplot(x='Day of week', data=df,hue='Reason')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)\nplt.title ('Day with the most number of calls');","6a163d81":"sns.countplot(x='Month', data=df,hue='Reason')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)\nplt.title('Month with the most number of calls and its Reasons');","029f8693":"df['Year'] = df['timeStamp'].apply(lambda y:y.year)\ndf['Year'].head()","2060db72":"year = df.groupby('Year').count()\nyear.head()\nsns.lineplot(data=year.reset_index(), x='Year', y='lat')\nplt.title('Year and latitude with most number of calls');\n","7774df00":"df['hour'] = df['timeStamp'].apply(lambda i: i.hour)\ndf['hour'].head()","830f8319":"hourOfDay = df.groupby('hour').count()\nsns.countplot(df['hour'])\nplt.title('Hours with most number of calls');","591321b4":"df['twp'].value_counts().head(5)","5c1fbfa9":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.title)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","0d4e5e69":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Thanks for the script Ombasa' )","1bbd6ab3":"#Code by Ombasa https:\/\/www.kaggle.com\/arman13\/notebookb7d50f0f10\/notebook"}}