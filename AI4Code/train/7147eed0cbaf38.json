{"cell_type":{"7490d80d":"code","86ff5510":"code","c662b285":"code","b49b2d8c":"code","88f76411":"code","04d27e8d":"code","531348e5":"code","9a5aadd5":"code","fd38cc38":"code","766875fb":"code","dee6a27c":"code","5508158a":"code","c919af4a":"code","05f5e592":"code","de07ff22":"markdown","e2422fa2":"markdown","7fe0abb7":"markdown","3db64d2e":"markdown","1ed86060":"markdown","be232ac7":"markdown","316fa728":"markdown","39c7dca2":"markdown"},"source":{"7490d80d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86ff5510":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\ndf.head()","c662b285":"import missingno\nmissingno.bar(df,figsize= (9,6),color= 'red' )","b49b2d8c":"df = df.drop('Id',axis=1)","88f76411":"import plotly.express as px\nimport matplotlib.pyplot as plt\nplt.figure(figsize= (6,8))\nfig = px.scatter(df , x = 'SepalLengthCm',y = 'SepalWidthCm',color= 'Species', title = \"Sepal Width v\/s Height\")\nfig.show()","04d27e8d":"df.boxplot(by='Species',figsize=(18,9))","531348e5":"fig = px.density_contour(df, x=\"SepalWidthCm\", y=\"SepalLengthCm\",color = \"Species\")\nfig","9a5aadd5":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler","fd38cc38":"# Splitting\nfrom sklearn.model_selection import train_test_split \nX = df.drop('Species',axis=1)\nY = df.Species\nX_train, X_test, y_train, y_test = train_test_split( \n                        X,Y,test_size = 0.30, random_state = 101) ","766875fb":"# Making a gridsearnchcv\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {\"C\" : [10,100,150,1000],\n             \"kernel\": ['linear','rbf'],\n             \"gamma\": ['scale','auto'],\n             \"gamma\":[1,0.1,0.01,0.001]}\nGrid = GridSearchCV(SVC(),param_grid = param_grid,verbose=3)\nGrid.fit(X_train,y_train)\n","dee6a27c":"print(Grid.best_params_)","5508158a":"num = Pipeline(steps = [\n    ('scaler',StandardScaler()),\n    ('svc',SVC(C= 10, gamma= 0.01, kernel= \"rbf\"))    \n])\nnum.fit(X_train,y_train)","c919af4a":"from sklearn.metrics import classification_report,confusion_matrix\nprd = num.predict(X_test)","05f5e592":"mtrx = classification_report(prd,y_test)\nprint(mtrx)","de07ff22":"# **This is an introductory notebook for Pipeline and GridSearchCV Basics**\n![Photo](https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Machine+Learning+R\/iris-machinelearning.png)","e2422fa2":"Using the best params inside a pipeline to make model with best values......","7fe0abb7":"# These are the best parameters ------------>","3db64d2e":"**GridSearchCV**\n\n\nGrid search is the process of performing hyper parameter tuning in order to determine the optimal values for a given model.","1ed86060":"We provide a base set of hyperparmeters (param_grid) then using the library , find different variations of the parameters that give the best possible accuracy ","be232ac7":"Still have a lot more to do , plz upvote ------->","316fa728":"# Plotting some graphs.......","39c7dca2":"# [Missingno](https:\/\/github.com\/ResidentMario\/missingno) Library is a cool library used to visualize missing data# "}}