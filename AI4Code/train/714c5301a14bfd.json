{"cell_type":{"49f0e1a2":"code","5dd21c7d":"code","9e4d8cd0":"code","e976dd78":"code","28826c8f":"code","0578d3fd":"code","3a1bbab1":"code","6009f6a9":"code","9d541970":"code","220be2e6":"code","d860444b":"code","bbd06a89":"code","43b8cdac":"code","16a58539":"code","295123a5":"code","3364dfd4":"code","df277317":"code","d0c4f55d":"code","59b7fd08":"code","ef9b3970":"code","6db5ba5e":"code","2d7d902a":"code","d886ff23":"code","a17f5e36":"code","2aaecf07":"code","841f66ce":"code","d8b94720":"code","912edd3a":"code","14846375":"code","b4ca0b64":"code","f427c3d7":"markdown","2782e216":"markdown"},"source":{"49f0e1a2":"import pandas as pd #Analysis \nimport matplotlib.pyplot as plt #Visulization\nimport seaborn as sns #Visulization\nimport numpy as np #Analysis \nfrom scipy.stats import norm #Analysis \nfrom sklearn.preprocessing import StandardScaler #Analysis \nfrom scipy import stats #Analysis \nimport warnings \nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport gc\n","5dd21c7d":"## \ucd08\uc2ec\uc73c\ub85c.. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30.\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv') \nsubmission = pd.read_csv('..\/input\/sample_submission.csv')","9e4d8cd0":"##\uceec\ub7fc(Feature) \ud655\uc778\ud558\uae30\ndf_train.columns","e976dd78":"#\uae30\uc220\ud1b5\uacc4(Descriptive Statistics) \ud655\uc778 \ndf_train['price'].describe()","28826c8f":"#\ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \uadf8\ub824\ubcf4\uae30\nsns.distplot(df_train['price']);","0578d3fd":"#skewness and kurtosis \uc810\uac80\ud569\ub2c8\ub2e4.\nprint(\"Skewness: %f\" % df_train['price'].skew())\nprint(\"Kurtosis: %f\" % df_train['price'].kurt())","3a1bbab1":"#scatter plot with 'price'\nvar = 'sqft_living'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,5000000));","6009f6a9":"#scatter plot with 'price'\nvar = 'sqft_lot'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,5000000));","9d541970":"#scatter plot with 'price'\nvar = 'sqft_basement'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,5000000));","220be2e6":"#scatter plot with 'price'\nvar = 'sqft_living15'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,5000000));","d860444b":"#scatter plot with 'price'\nvar = 'sqft_above'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='price', ylim=(0,5000000));","bbd06a89":"#box plot cat per price\nvar = 'waterfront'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=5000000);","43b8cdac":"#box plot cat per price\nvar = 'view'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=5000000);","16a58539":"#box plot cat per price\nvar = 'condition'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=5000000);","295123a5":"#box plot cat per price\nvar = 'grade'\ndata = pd.concat([df_train['price'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"price\", data=data)\nfig.axis(ymin=0, ymax=9000000);","3364dfd4":"## Correlation Matrix \uc0dd\uc131 ( \ud788\ud2b8\ub9f5 )\n\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","df277317":"#price correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'price')['price'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","d0c4f55d":"## sqft_living \uc740 price\uc640 \uac15\ud55c \uc0c1\uad00\uad00\uacc4\uc5d0 \uc788\uc74c\uc744 \ud655\uc778.\n## sqft_living\uc740  grade,sqft_above, sqft_living15, bathrooms, bedrooms \ub4f1\uc758 \ubcc0\uc218\uc640 \uc0c1\uad00\uc131\uc774 \ub192\uae30\uc5d0.. \ucc28\uc6d0\ucd95\uc18c \uc791\uc5c5\ub4f1\uc774 \ud544\uc694\ud574\ubcf4\uc784 ","59b7fd08":"#scatterplot: price\uc640 \ucf54\ub9b4\ub808\uc774\uc158\uc774 \ub192\uc740 \ubcc0\uc218\ub4e4\uc758 pairplot \uadf8\ub9ac\uae30\nsns.set()\ncols = ['price', 'sqft_living', 'grade', 'sqft_above', 'sqft_living15', 'bathrooms']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","ef9b3970":"## \uacb0\uce21\uce58 \ucc3e\uae30 - \uacb0\uacfc::\uc5c6\uc74c.\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","6db5ba5e":"##Univariate \ubd84\uc11d\n#standardizing data\nprice_scaled = StandardScaler().fit_transform(df_train['price'][:,np.newaxis]);\nlow_range = price_scaled[price_scaled[:,0].argsort()][:10]\nhigh_range= price_scaled[price_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","2d7d902a":"#\ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc \uc815\uaddc \ud655\ub960 \ubd84\ud3ec \uc778\uc9c0 \ud655\uc778 -> \uacb0\uacfc \uc815\uaddc\ud654\uac00 \ud544\uc694\ud55c\uac83\uc73c\ub85c \ud310\ub2e8\nsns.distplot(df_train['price'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['price'], plot=plt)","d886ff23":"## \uc608\uce21\ud574\uc57c\ud560 y (price) \uac12\uc758 \uc815\uaddc\ud654 (Log Transformation)\n\ndf_train['price'] = np.log(df_train['price'])\n\n#\uc815\uaddc\ud654 \uc800\uc6a9\ud6c4 \ud788\uc2a4\ud1a0\uadf8\ub7a8 \ubc0f \uc815\uaddc\ud655\ub960\ud50c\ub86f \uadf8\ub9ac\uae30\nsns.distplot(df_train['price'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['price'], plot=plt)\n","a17f5e36":"#sqft_living \ud53c\uccd0\uc758 \uc815\uaddc\ud654\nsns.distplot(df_train['sqft_living'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['sqft_living'], plot=plt)","2aaecf07":"#data transformation\ndf_train['sqft_living'] = np.log(df_train['sqft_living'])","841f66ce":"#histogram and normal probability plot\nsns.distplot(df_train['sqft_living'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['sqft_living'], plot=plt)","d8b94720":"skew_columns = ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement']\n\nfor c in skew_columns:\n    df_train[c] = np.log1p(df_train[c].values)\n    df_test[c] = np.log1p(df_test[c].values)\n","912edd3a":"## \uae30\uc874\uc5d0 \uc62c\ub77c\uc628 Feature Engineering \ucc38\uc870.","14846375":"for df in [df_train,df_test]:\n    df['total_rooms'] = df['bedrooms'] + df['bathrooms']\n    df['grade_condition'] = df['grade'] * df['condition']\n    df['sqft_total'] = df['sqft_living'] + df['sqft_lot']\n    df['sqft_total_size'] = df['sqft_living'] + df['sqft_lot'] + df['sqft_above'] + df['sqft_basement']\n    df['sqft_total15'] = df['sqft_living15'] + df['sqft_lot15'] \n    df['is_renovated'] = df['yr_renovated'] - df['yr_built']\n    df['is_renovated'] = df['is_renovated'].apply(lambda x: 0 if x == 0 else 1)\n    ","b4ca0b64":"df_train['per_price'] = df_train['price']\/df_train['sqft_total_size']\nzipcode_price = df_train.groupby(['zipcode'])['per_price'].agg({'mean','var'}).reset_index()\ndf_train = pd.merge(df_train,zipcode_price,how='left',on='zipcode')\ndf_test = pd.merge(df_test,zipcode_price,how='left',on='zipcode')\ndel df_train['per_price']","f427c3d7":"## \uc548\ub155\ud558\uc138\uc694. \uce90\uae00\ucf54\ub9ac\uc544 \uc5ec\ub7ec\ubd84 \ubaa8\ub450 \ud3b8\uc548\ud55c \ud558\ub8e8 \ub418\uc2dc\uace0 \uc88b\uc740 \ucee4\ub110 \ub098\ub214\uc774 \ub418\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uac10\uc0ac\ud569\ub2c8\ub2e4.\n## \uc5ec\ub7ec \ubaa8\ub378\ud14c\uc2a4\ud2b8 \uacb0\uacfc \uc131\ub2a5\uc774 \ubcc4\ub85c\ub77c\uc11c.. EDA\ubd80\ubd84\uacfc Feature Engineering \ubd80\ubd84\ub9cc \ud604\uc7ac \uc62c\ub824\ub193\uc558\ub124\uc6a9.\n","2782e216":"### Import Packages"}}