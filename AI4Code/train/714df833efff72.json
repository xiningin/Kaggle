{"cell_type":{"4663e86a":"code","55e9b7cf":"code","539a9c03":"code","21088115":"code","7f522ac2":"code","03787098":"code","45b10f56":"code","ed27fc21":"code","8cd4a24b":"code","673f5623":"code","b8ee711f":"code","4d31497b":"code","70c0d18c":"code","f3442b37":"code","a95e87bd":"code","3def42ce":"code","b85681b5":"code","49f565df":"code","d70473d3":"code","5985afc0":"code","df698c76":"code","7aa90fb9":"code","f26c94fe":"code","ec3afafe":"code","2d60c6fc":"code","a43446fc":"markdown"},"source":{"4663e86a":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","55e9b7cf":"data0 = pd.read_csv(\"..\/input\/premier-league-matches-20142020\/matchesall2014-2020.csv\")\nprint(data0.columns.tolist())\ndata0","539a9c03":"data0.info()","21088115":"data0['HOME-AWAY']=data0[['Home Team','Away Team']].apply(lambda x: x['Home Team']+'-'+x['Away Team'], axis=1)\ndata0['SCORE-DIFF']=data0['Home Team Goals Scored']-data0['Away Team Goals Scored']\ndata0","7f522ac2":"print(data0['SCORE-DIFF'].value_counts())","03787098":"data0['SCORE-DIFF']=data0['SCORE-DIFF'].apply(lambda x: np.where(x>3,4,x)).apply(lambda x: np.where(x<-3,-4,x))\nprint(data0['SCORE-DIFF'].value_counts())","45b10f56":"data1=data0","ed27fc21":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ndata1=df","8cd4a24b":"m=len(data1)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\ndrop0=['Unnamed: 0','Score','Half Time Score','Home Team Goals Scored','Away Team Goals Scored','Home Team Goals Conceeded','Away Team Goals Conceeded','SCORE-DIFF']\ndataX=data1.drop(drop0,axis=1)\ndataY0=data1['SCORE-DIFF']","673f5623":"columns=dataX.columns.to_list()\nprint(columns)","b8ee711f":"trainX=dataX.iloc[M[0:(m\/\/4)*3]]\ntrainY0=dataY0[M[0:(m\/\/4)*3]]\n\ntestX=dataX.iloc[M[(m\/\/4)*3:]]\ntestY0=dataY0[M[(m\/\/4)*3:]]","4d31497b":"def objective(trial,data=trainX,target=trainY0):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 3, 10),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-3, 0.1),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 10.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 3, 10),\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": trial.suggest_int(\"verbosity\", 1, 10),\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","70c0d18c":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=64)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","f3442b37":"study.trials_dataframe()","a95e87bd":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","3def42ce":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","b85681b5":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","49f565df":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","d70473d3":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","5985afc0":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","df698c76":"Best_trial=study.best_trial.params\nprint(Best_trial)","7aa90fb9":"preds = np.zeros((len(testX)))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(trainX[columns],trainY0):\n    X_tr,X_val=trainX[columns].iloc[trn_idx],trainX[columns].iloc[test_idx]\n    y_tr,y_val=trainY0.iloc[trn_idx],trainY0.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(testX[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","f26c94fe":"model","ec3afafe":"from sklearn.metrics import classification_report\ny_pred=model.predict(testX)\nground = np.array(testY0)","2d60c6fc":"print(classification_report(ground,y_pred))","a43446fc":"# Premier League Score Difference Prediction LGBM"}}