{"cell_type":{"f3407bb2":"code","30b93fda":"code","8fb2ea4c":"code","a16aa532":"code","71b88782":"code","5f1054d5":"code","535c88d8":"code","e1527622":"code","9c586ea5":"code","641bcc40":"code","0d220ae5":"code","32b83f1b":"code","4b8ace1c":"code","1ff99da4":"code","14370a5a":"code","3dc49bf2":"code","b7ada773":"code","43ed1354":"code","3106252b":"code","da6025d1":"code","3d1befa0":"code","e6683c73":"code","62bbcb4c":"markdown","51aa9392":"markdown","3b81d8e0":"markdown","d282e858":"markdown"},"source":{"f3407bb2":"#IMPORTING LIBRARIES\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf","30b93fda":"#IMPORTING DATASET\npd.set_option('display.max_columns',None)\nds = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\nds.head()","8fb2ea4c":"#DATASET HAVE 21613 ROWS AND 21 FEATURES\nds.shape","a16aa532":"#REMOVING UNNECESSARY FEATURES\nds.drop(['id','date'],axis = 1,inplace = True)\nds.head()","71b88782":"#CHECKING FOR NULL VALUES\nds.isnull().sum()","5f1054d5":"ds.info()","535c88d8":"ds.columns","e1527622":"corr = ds[['bathrooms', 'bedrooms', 'sqft_living', 'sqft_lot', 'floors', 'grade', 'price']]\nplt.figure(figsize=(10,8))\nplt.title('Correlation Matrix')\nsns.heatmap(corr.corr(),annot=True)","9c586ea5":"from numpy.random import seed\nseed(0)\ntf.random.set_seed(0)","641bcc40":"#DIVIDING DATASET IN DEPENDENT AND INDEPENDENT VARIABLE\nx = ds.iloc[:,1:].values\ny = ds.iloc[:,0].values","0d220ae5":"#SPLITTING DATASET IN TRAINING AND TESTING SET\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 0)","32b83f1b":"#FEATURE SCALING IS NECESSARY IN ANN\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","4b8ace1c":"#CREATING THE ANN AS SEQUENCE OF LAYERS\nann = tf.keras.models.Sequential()","1ff99da4":"#ADDING FIRST HIDDEN LAYER WITH 30 NEURONS, THE INPUT LAYER WILL BE ADDED AUTOMATICALLY,\nann.add(tf.keras.layers.Dense(units = 30, activation = 'relu'))","14370a5a":"#ADDING 2ND HIDDEN LAYER WITH 30 NEURONS\nann.add(tf.keras.layers.Dense(units = 30, activation = 'relu'))","3dc49bf2":"#ADDING 3RD HIDDEN LAYER WITH 30 NEURONS\nann.add(tf.keras.layers.Dense(units = 30, activation = 'relu'))","b7ada773":"#ADDING 4TH HIDDEN LAYER WITH 30 NEURONS\nann.add(tf.keras.layers.Dense(units = 30, activation = 'relu'))","43ed1354":"#ADDING OUTPUT LAYER WITH 1 NEURON .\nann.add(tf.keras.layers.Dense(units = 1))","3106252b":"#COMPILING THE ANN USING STOCHASTIC GRADIENT DESCENT (optimizer = 'adam')\nann.compile(optimizer = 'adam',loss = 'mean_squared_error')","da6025d1":"#TRAINING THE ANN WITH BATCH SIZE OF 32 (THIS IS A BATCH LEARNING)\nann.fit(x_train,y_train,batch_size = 20,epochs = 100)","3d1befa0":"#COMPARING ACTUAL VALUES WITH PREDICTED VALUES\nnp.set_printoptions(precision=2)\ny_pred = ann.predict(x_test)\nnp.concatenate((y_pred,y_test.reshape(-1,1)),1)","e6683c73":"#GETTING ACCURACY\nfrom sklearn.metrics import r2_score\ny_pred = ann.predict(x_test)\nprint(r2_score(y_test,y_pred))","62bbcb4c":"**NO CORRELATION**","51aa9392":"**NO MISSING DATA**","3b81d8e0":"**I GOT AN ACCURACY OF AROUND 85% TUNING THE HYPERPARAMETERS MAY INCREASE THE ACCURACY**","d282e858":"**PREDICTING HOUSE PRICES USING ANN**\n\n**THE DATASET HAS 19 FEATURES AMONG WHICH ALL ARE INDEPENDENT EXCEPT THE 3rd ONE WHICH IS DEPENDENT. ANN IS APPLIED TO CREATE A MODEL TO PREDICT THE HOUSE PRICE.**\n\n**I CREATED A ANN WITH 4 HIDDEN LAYERS EACH WITH 30 NEURONS.**"}}