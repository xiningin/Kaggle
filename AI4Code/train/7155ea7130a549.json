{"cell_type":{"c5e321d5":"code","749b22aa":"code","53e1f798":"code","7f7c015f":"code","8ae188d5":"code","52e85a1b":"code","5e8b84d4":"code","bf8fc853":"code","32e8d42c":"code","1ec6d89e":"code","6f07eedc":"code","cc27d1b5":"code","94fd70c5":"code","a6ecb9e1":"code","a91b5330":"code","8ee2ab1c":"code","88259edb":"code","7c2a952e":"code","791a4b7f":"code","2befac7e":"code","b53a1a70":"code","02874d43":"code","d9b4973d":"code","74b1e7ca":"markdown","d2721bdd":"markdown","374405c7":"markdown","70cb458e":"markdown","4a8d3d74":"markdown","e42dcaf1":"markdown","82fb2646":"markdown","b7e272c6":"markdown","ccdfca6f":"markdown","1f7b6cfe":"markdown","a0fe449b":"markdown","72ded3e2":"markdown","beb1df5f":"markdown","2edc2b44":"markdown","21987472":"markdown","7c122a56":"markdown","ae3de147":"markdown"},"source":{"c5e321d5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nimport datetime\nimport gc\n\nDATA_PATH = \"..\/input\/ashrae-energy-prediction\/\"","749b22aa":"train_df = pd.read_csv(DATA_PATH + 'train.csv')\n\n# eliminate bad rows\nbad_rows = pd.read_csv('\/kaggle\/input\/rows-to-drop\/rows_to_drop.csv')\ntrain_df.drop(bad_rows.loc[:, '0'], inplace = True)\ntrain_df.reset_index(drop = True, inplace = True)\n\nbuilding_df = pd.read_csv(DATA_PATH + 'building_metadata.csv')\nweather_df = pd.read_csv(DATA_PATH + 'weather_train.csv')","53e1f798":"# Original code from https:\/\/www.kaggle.com\/aitude\/ashrae-missing-weather-data-handling by @aitude\n\ndef fill_weather_dataset(weather_df):\n    \n    # Find Missing Dates\n    time_format = \"%Y-%m-%d %H:%M:%S\"\n    start_date = datetime.datetime.strptime(weather_df['timestamp'].min(),time_format)\n    end_date = datetime.datetime.strptime(weather_df['timestamp'].max(),time_format)\n    total_hours = int(((end_date - start_date).total_seconds() + 3600) \/ 3600)\n    hours_list = [(end_date - datetime.timedelta(hours=x)).strftime(time_format) for x in range(total_hours)]\n\n    missing_hours = []\n    for site_id in range(16):\n        site_hours = np.array(weather_df[weather_df['site_id'] == site_id]['timestamp'])\n        new_rows = pd.DataFrame(np.setdiff1d(hours_list,site_hours),columns=['timestamp'])\n        new_rows['site_id'] = site_id\n        weather_df = pd.concat([weather_df,new_rows])\n\n        weather_df = weather_df.reset_index(drop=True)           \n\n    # Add new Features\n    weather_df[\"datetime\"] = pd.to_datetime(weather_df[\"timestamp\"])\n    weather_df[\"day\"] = weather_df[\"datetime\"].dt.day\n    weather_df[\"week\"] = weather_df[\"datetime\"].dt.week\n    weather_df[\"month\"] = weather_df[\"datetime\"].dt.month\n    \n    \n    # Reset Index for Fast Update\n    weather_df = weather_df.set_index(['site_id','day','month'])\n\n    air_temperature_filler = pd.DataFrame(weather_df.groupby(['site_id','day','month'])['air_temperature'].mean(),columns=[\"air_temperature\"])\n    weather_df.update(air_temperature_filler,overwrite=False)\n\n    # Step 1\n    cloud_coverage_filler = weather_df.groupby(['site_id','day','month'])['cloud_coverage'].mean()\n    # Step 2\n    cloud_coverage_filler = pd.DataFrame(cloud_coverage_filler.fillna(method='ffill'),columns=[\"cloud_coverage\"])\n\n    weather_df.update(cloud_coverage_filler,overwrite=False)\n\n    due_temperature_filler = pd.DataFrame(weather_df.groupby(['site_id','day','month'])['dew_temperature'].mean(),columns=[\"dew_temperature\"])\n    weather_df.update(due_temperature_filler,overwrite=False)\n\n    # Step 1\n    sea_level_filler = weather_df.groupby(['site_id','day','month'])['sea_level_pressure'].mean()\n    # Step 2\n    sea_level_filler = pd.DataFrame(sea_level_filler.fillna(method='ffill'),columns=['sea_level_pressure'])\n\n    weather_df.update(sea_level_filler,overwrite=False)\n\n    wind_direction_filler =  pd.DataFrame(weather_df.groupby(['site_id','day','month'])['wind_direction'].mean(),columns=['wind_direction'])\n    weather_df.update(wind_direction_filler,overwrite=False)\n\n    wind_speed_filler =  pd.DataFrame(weather_df.groupby(['site_id','day','month'])['wind_speed'].mean(),columns=['wind_speed'])\n    weather_df.update(wind_speed_filler,overwrite=False)\n\n    # Step 1\n    precip_depth_filler = weather_df.groupby(['site_id','day','month'])['precip_depth_1_hr'].mean()\n    # Step 2\n    precip_depth_filler = pd.DataFrame(precip_depth_filler.fillna(method='ffill'),columns=['precip_depth_1_hr'])\n\n    weather_df.update(precip_depth_filler,overwrite=False)\n\n    weather_df = weather_df.reset_index()\n    weather_df = weather_df.drop(['datetime','day','week','month'],axis=1)\n        \n    return weather_df\n\n# Original code from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage by @gemartin\n\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\"\n    Iterate through all the columns of a dataframe and modify the data type to reduce memory usage.        \n    \"\"\"\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print(\"Memory usage of dataframe is {:.2f} MB\".format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype(\"category\")\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print(\"Memory usage after optimization is: {:.2f} MB\".format(end_mem))\n    print(\"Decreased by {:.1f}%\".format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef features_engineering(df):\n    \n    # Sort by timestamp\n    df.sort_values(\"timestamp\")\n    df.reset_index(drop=True)\n    \n    # Add more features\n    df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"],format=\"%Y-%m-%d %H:%M:%S\")\n    df[\"hour\"] = df[\"timestamp\"].dt.hour\n    df[\"weekend\"] = df[\"timestamp\"].dt.weekday\n    df['square_feet'] =  np.log1p(df['square_feet'])\n    df['month'] = df['timestamp'].dt.month\n    df['month'].replace((1, 2, 3, 4), 1, inplace = True)\n    df['month'].replace((5, 6, 7, 8), 2, inplace = True)\n    df['month'].replace((9, 10, 11, 12), 3, inplace = True)\n    \n    # Remove Unused Columns\n    drop = [\"timestamp\",\"sea_level_pressure\", \"wind_direction\", \"wind_speed\",\"year_built\",\"floor_count\"]\n    df = df.drop(drop, axis=1)\n    gc.collect()\n    \n    # Encode Categorical Data\n    le = LabelEncoder()\n    df[\"primary_use\"] = le.fit_transform(df[\"primary_use\"])\n    \n    return df","7f7c015f":"weather_df = fill_weather_dataset(weather_df)","8ae188d5":"train_df = reduce_mem_usage(train_df,use_float16=True)\nbuilding_df = reduce_mem_usage(building_df,use_float16=True)\nweather_df = reduce_mem_usage(weather_df,use_float16=True)","52e85a1b":"train_df = train_df.merge(building_df, left_on='building_id',right_on='building_id',how='left')\ntrain_df = train_df.merge(weather_df,how='left',left_on=['site_id','timestamp'],right_on=['site_id','timestamp'])\ndel weather_df\ngc.collect()","5e8b84d4":"train_df = features_engineering(train_df)","bf8fc853":"train_df.info()","32e8d42c":"train_df.head(20)","1ec6d89e":"target = np.log1p(train_df[\"meter_reading\"])\ntrain_df = train_df.drop('meter_reading', axis = 1)\ngc.collect()","6f07eedc":"categorical_features = [\"building_id\", \"site_id\", \"meter\", \"primary_use\", \"weekend\"]\nfeatures = [col for col in train_df.columns if col not in ['month']]\nparams = {\n    \"objective\": \"regression\",\n    \"boosting\": \"gbdt\",\n    \"num_leaves\": 1580,\n    \"learning_rate\": 0.05,\n    \"feature_fraction\": 0.85,\n    \"reg_lambda\": 1,\n    \"metric\": \"rmse\",\n}\n\nkf = StratifiedKFold(n_splits=5, shuffle=False, random_state=2319)\nmodels = []\nfor train_index,test_index in kf.split(train_df, train_df['month']):\n    train_features = train_df[features].loc[train_index]\n    train_target = target.loc[train_index]\n    \n    test_features = train_df[features].loc[test_index]\n    test_target = target.loc[test_index]\n    \n    d_training = lgb.Dataset(train_features, label=train_target,categorical_feature=categorical_features, free_raw_data=False)\n    d_test = lgb.Dataset(test_features, label=test_target,categorical_feature=categorical_features, free_raw_data=False)\n    \n    model = lgb.train(params, train_set=d_training, num_boost_round=3000, valid_sets=[d_training,d_test], verbose_eval=25, early_stopping_rounds=50)\n    models.append(model)\n    del train_features, train_target, test_features, test_target, d_training, d_test\n    gc.collect()","cc27d1b5":"del features, target\ngc.collect()","94fd70c5":"for model in models:\n    lgb.plot_importance(model)\n    plt.show()","a6ecb9e1":"test_df = pd.read_csv(DATA_PATH + 'test.csv')\nrow_ids = test_df[\"row_id\"]\ntest_df.drop(\"row_id\", axis=1, inplace=True)\ntest_df = reduce_mem_usage(test_df)","a91b5330":"test_df = test_df.merge(building_df,left_on='building_id',right_on='building_id',how='left')\ndel building_df\ngc.collect()","8ee2ab1c":"weather_df = pd.read_csv(DATA_PATH + 'weather_test.csv')\nweather_df = fill_weather_dataset(weather_df)\nweather_df = reduce_mem_usage(weather_df)","88259edb":"test_df = test_df.merge(weather_df,how='left',on=['timestamp','site_id'])\ndel weather_df\ngc.collect()","7c2a952e":"test_df = features_engineering(test_df)","791a4b7f":"test_df.head(20)","2befac7e":"results = []\nfor model in models:\n    if  results == []:\n        results = np.expm1(model.predict(test_df, num_iteration=model.best_iteration)) \/ len(models)\n    else:\n        results += np.expm1(model.predict(test_df, num_iteration=model.best_iteration)) \/ len(models)\n    del model\n    gc.collect()","b53a1a70":"del test_df, models\ngc.collect()","02874d43":"results_df = pd.DataFrame({\"row_id\": row_ids, \"meter_reading\": np.clip(results, 0, a_max=None)})\ndel row_ids,results\ngc.collect()\nresults_df.to_csv(\"submission.csv\", index=False)\n","d9b4973d":"results_df.head(20)","74b1e7ca":"## Features Engineering","d2721bdd":"## Merge Weather Data","374405c7":"## Features Engineering","70cb458e":"## Fill Weather Information\n\nI'm using [this kernel](https:\/\/www.kaggle.com\/aitude\/ashrae-missing-weather-data-handling) to handle missing weather information.","4a8d3d74":"## Fill Weather Information","e42dcaf1":"## Submission","82fb2646":"## Memory Reduction","b7e272c6":"## Load Data","ccdfca6f":"##  KFOLD LIGHTGBM Model","1f7b6cfe":"## Load Test Data","a0fe449b":"## Prediction","72ded3e2":"## Merge Building Data","beb1df5f":"## Utility Functions","2edc2b44":"## Features & Target Variables","21987472":"## Merge Data\n\nWe need to add building and weather information into training dataset.","7c122a56":"## Import Packages","ae3de147":"## Important Features"}}