{"cell_type":{"67808ee8":"code","21dc402a":"code","64fa73de":"code","395d0483":"code","78698086":"code","abcdad03":"code","dad769d7":"code","60522ab0":"code","7592a1bb":"code","c17b8208":"code","867fc613":"code","73ddd419":"markdown","45af9c28":"markdown","94833d5e":"markdown","6546d288":"markdown","fec870d7":"markdown","bee87afe":"markdown","e28e6329":"markdown","cd1b41bb":"markdown","f1be3fb4":"markdown"},"source":{"67808ee8":"import re, math, os, cv2, random\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold","21dc402a":"#setting seeds for reproducability\nSEED = 31415\n\ndef seed_everything(seed):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\nseed_everything(SEED)    ","64fa73de":"def _bytes_feature(value):\n    #Returns a bytes_list from a string \/ byte.\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n    #Returns a float_list from a float \/ double.\n    return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n    #Returns an int64_list from a bool \/ enum \/ int \/ uint.\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","395d0483":"def serialize_example(image, target, image_name):\n    feature = {\n      'image': _bytes_feature(image),\n      'target': _int64_feature(target),\n      'image_name': _bytes_feature(image_name),\n      }\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto.SerializeToString()","78698086":"N_FILES = 50 # split images into 50 files\nNEW_SIZE = (512)\nIMG_QUALITY = 100\n\nIMG_PATH = '..\/input\/plant-pathology-2021-fgvc8\/train_images'","abcdad03":"train_df = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\nprint(\"train_images: {}\".format(train_df.shape[0]))\ntrain_df['labels'].value_counts()","dad769d7":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\n\ntrain_df['encoded_labels'] = labelencoder.fit_transform(train_df['labels'])\ntrain_df.head(20)","60522ab0":"from PIL import Image\n\nimg1 = Image.open('..\/input\/plant-pathology-2021-fgvc8\/test_images\/85f8cb619c66b863.jpg')\nimg2 = Image.open('..\/input\/plant-pathology-2021-fgvc8\/test_images\/ad8770db05586b59.jpg')\nimg3 = Image.open('..\/input\/plant-pathology-2021-fgvc8\/test_images\/c7b03e718489f3ca.jpg')\n\nfor i in img1,img2,img3:\n    print(i.size)","7592a1bb":"folds = StratifiedKFold(n_splits=N_FILES, shuffle=True, random_state=SEED)\ntrain_df['file'] = -1\n\n#folds.split is the train_test_split of stratifiedkfolding\nfor fold_n, (train_idx, val_idx) in enumerate(folds.split(train_df, train_df['labels'])):\n    print('File: %s has %s samples' % (fold_n+1, len(val_idx)))\n    train_df['file'].loc[val_idx] = fold_n","c17b8208":"train_df = train_df.rename(columns={'image': 'image_id'})\n\ntrain_df.to_csv('train.csv',index=False)","867fc613":"for tfrec_num in range(N_FILES):\n    print('\\nWriting TFRecord %i of %i...'%(tfrec_num, N_FILES))\n    samples = train_df[train_df['file'] == tfrec_num]\n    n_samples = len(samples)\n    print(f'{n_samples} samples')\n    with tf.io.TFRecordWriter('Id_train%.2i-%i.tfrec'%(tfrec_num, n_samples)) as writer:\n        for row in samples.itertuples():\n            label = row.encoded_labels\n            image_name = row.image_id\n            img_path = f'{IMG_PATH}\/{image_name}'\n            \n            #read image and convert to RGB colorspace\n            img = cv2.imread(img_path)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img = cv2.resize(img, (NEW_SIZE, NEW_SIZE))\n            \n            #writed image to bytes to be stored as tfrec\n            img = cv2.imencode('.jpg', img, (cv2.IMWRITE_JPEG_QUALITY, IMG_QUALITY))[1].tostring()\n            example = serialize_example(img, label, str.encode(image_name))\n            writer.write(example)","73ddd419":"### Varaibles","45af9c28":"### Seed","94833d5e":"### Stratified Split","6546d288":"### Writing Tfrecords","fec870d7":"### Sampling Images\n\n- Sampling the three test_images\n- we can see from these images alone that all the images are going to be of different sizes. I am going to start by resizing all the images to 2000 x 2000.","bee87afe":"The following cell should be altered based on what we want to encode, and their data types. ","e28e6329":"### TFrecord Functions","cd1b41bb":"### Reading Meta-Data","f1be3fb4":"## Notes\n\n- In this notebook I am going to create tfrecords of all the images. \n\n- V11: reverted to 512x512 no albumentations"}}