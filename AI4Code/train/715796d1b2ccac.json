{"cell_type":{"17cc2a46":"code","48c4ccb5":"code","a9c09b2f":"code","52a46174":"code","f6342945":"code","529ba1e7":"code","6ab60e70":"code","5ffd2f8c":"code","aaa6e250":"code","ab3499fe":"code","4472ae86":"code","bff73ef3":"code","f859380a":"code","cab90eac":"code","03d0692d":"code","fefc0763":"code","d8a209d3":"code","4de89f7a":"code","e54a6cdb":"code","047842ff":"code","3cb64724":"code","56b9edb6":"code","6f919886":"code","eecb26de":"markdown","924d3ca7":"markdown","394d9b5c":"markdown","cb2641f8":"markdown","f54b5054":"markdown","77d3eb09":"markdown","afd56e04":"markdown"},"source":{"17cc2a46":"#Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport scipy.stats\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n! pip install chart_studio\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n%matplotlib inline","48c4ccb5":"#Reading data for Nifty50, Nifty Midcap and Nifty Smallcap\n\nnifty_50 = pd.read_csv('..\/input\/nifty-indices-dataset\/NIFTY 50.csv',parse_dates=['Date'])\nnifty_midCap = pd.read_csv('..\/input\/nifty-indices-dataset\/NIFTY MIDCAP 150.csv',parse_dates=['Date'])\nnifty_smallCap = pd.read_csv('..\/input\/nifty-indices-dataset\/NIFTY SMALLCAP 250.csv',parse_dates=['Date'])","a9c09b2f":"def minMaxDate(df):\n    return (df['Date'].min(),df['Date'].max())","52a46174":"print(minMaxDate(nifty_50))\nprint(minMaxDate(nifty_midCap))\nprint(minMaxDate(nifty_smallCap))\n## All these datasets have common dates from 1st April 2005","f6342945":"# Merging only the closing prices\ndf = nifty_midCap[['Date','Close']].merge(nifty_smallCap[['Date','Close']],on='Date',how='left')\ndf = df.merge(nifty_50[['Date','Close']], on = 'Date', how='left')\ndf.columns = ['Date','NiftyMidCap','NiftySmallCap','Nifty50']","529ba1e7":"# Setting Date columns as index, aggregating closing prices at month level\ndf = df.set_index('Date').resample('M').last()\ndf.index = df.index.to_period(\"M\")\ndf.head(4)","6ab60e70":"# Dataframe with calculated percent change between two consecutive index price closing\ndf_rets = df.pct_change().dropna()\ndf_rets.head(4)","5ffd2f8c":"# Dataframe showing how much INR 100 would be with time. \n# This will exactly track the indices and values are comparable for indices\ndf_wealth = 100 * (1+df_rets).cumprod()\ndf_wealth.head(4)","aaa6e250":"df_rets.corr().style.background_gradient(cmap='Greens',axis=0,text_color_threshold=0.4)\n## Correlation of returns for indices show that there is very high (>0.85) correlation among indices","ab3499fe":"# Line plot of index prices\ndf.iplot(title='Line plot')\n\n#12 months moving average of index prices\ndf.rolling(12).mean().iplot(title='12 months moving average')","4472ae86":"df_rets.iplot(title='Line plot of returns')","bff73ef3":"## Functions to create a summary of risk and return characteristics \n\ndef skewness(r):\n    \"\"\"\n    Calculates skewness\n    \"\"\"\n    return scipy.stats.skew(r)\n\ndef kurtosis(r):\n    \"\"\"\n    Calculates kurtosis\n    \"\"\"\n    return scipy.stats.kurtosis(r)\n\ndef returns(r, periods_per_year):\n    \"\"\"\n    Calculates annualized returns\n    \"\"\"\n    compounded_growth = (1+r).prod()\n    n_periods = r.shape[0]\n    return compounded_growth**(periods_per_year\/n_periods)-1\n\ndef volatility(r, periods_per_year):\n    \"\"\"\n    Calculates annualized volatility of returns\n    \"\"\"\n    return r.std()*(periods_per_year**0.5)\n\ndef sharpe_ratio(r, rfr, periods_per_year):\n    \"\"\"\n    Calculates annualized sharpe ratio of a set of returns\n    \"\"\"\n    rf_per_period = (1+ rfr)**(1\/periods_per_year)-1\n    excess_ret = r - rf_per_period\n    ann_ex_ret = returns(excess_ret, periods_per_year)\n    ann_vol = volatility(r,periods_per_year)\n    return ann_ex_ret\/ann_vol\n\ndef summary_stats(r, rfr = 0.05):\n    \"\"\"\n    Returns a Dataframe that contains aggregated summary stats for the returns in columns of r\n    \"\"\"\n    ann_r = r.aggregate(returns, periods_per_year = 12)\n    ann_vol = r.aggregate(volatility, periods_per_year = 12)\n    ann_sr = r.aggregate(sharpe_ratio,rfr=rfr,periods_per_year=12)\n    skew = r.aggregate(skewness)\n    kurt = r.aggregate(kurtosis)\n    \n    return pd.DataFrame({\n        'Annualized Return': ann_r,\n        'Annualized Vol': ann_vol,\n        'Skewness':skew,\n        'Kurtosis':kurt,\n        'Sharpe Ratio': ann_sr,\n    })","f859380a":"## Overall Summary stats for before 2018 periods\nsummary_stats(df_rets).style.background_gradient(cmap='Greens',axis=0,text_color_threshold=0.4)","cab90eac":"## Summary stats for before 2018 periods\nsummary_stats(df_rets[:'2018']).style.background_gradient(cmap='Greens',axis=0,text_color_threshold=0.4)","03d0692d":"## Summary stats for after 2018 periods\nsummary_stats(df_rets['2018':]).style.background_gradient(cmap='Greens',axis=0,text_color_threshold=0.4)","fefc0763":"returns(df_rets[:'2018'],12).iplot(kind='bar',color='green',opacity=0.4)","d8a209d3":"returns(df_rets['2018':],12).iplot(kind='bar',color='red',opacity=0.4)","4de89f7a":"volatility(df_rets,12).iplot(kind='bar',color='blue')","e54a6cdb":"risk_free_rate = 0.05\nsharpe_ratio(df_rets,risk_free_rate,12).iplot(kind='bar',color='black',opacity=0.4)","047842ff":"df_rets.iplot(kind='hist',histnorm='percent')","3cb64724":"df_wealth.iplot(asFigure=True,\n               vspan={'x0':'2017-11-01','x1':'2020-05-03',\n                      'color':'rgba(30,30,30,0.3)','color':'black','fill':True,'opacity':.2})","56b9edb6":"df_wealth['2018':].corr().style.background_gradient(cmap='Greens',axis=0,text_color_threshold=0.4)","6f919886":"df_wealth['Nifty50'].rolling(6).corr(df_wealth['NiftySmallCap']).iplot()","eecb26de":"#### Objective of the work in this part is to compare risk and return characteristics of Nifty 50, Nifty Midcap and Nifty Small cap. We will work on monthly closing prices only.\n\nFor plotting I used libraries and formats from :\n                 https:\/\/www.kaggle.com\/parulpandey\/nifty-data-eda","924d3ca7":"### Sharpe Ratio Explained\n\nSharpe ratio is the excess return over the risk free rate per unit of risk (measured in terms of standard deviation \/ volatilty of returns). It is a measure of risk adjusted return. It is used in comparing portfolios. Higher the better.\n\n$$ SR = \\frac{R_p - R_f }{\\sigma_p} $$\n\nwhere ${R_p}$ is the average portfolio return, ${R_f}$ is the risk free rate (assumes 5% in our calculations) and ${\\sigma_p}$ is the volatity of portfolio returns","394d9b5c":"##### On observing the shaded box area of Wealth plot, it can be noticed that before 2018, correlation between indices was very high but after 2018, correlations have weakened, as also indicated by the next crosstab","cb2641f8":"##### 6 months rolling correlation between Nifty 50 and Nifty Small cap wealth indices also show a lot of variation, going below 0 for the first time in 2018 after 2005.","f54b5054":"Introduction","77d3eb09":"## Stay Tuned !!!","afd56e04":"### Summary stats reveal that:\n1. Nifty50 gives the highest sharpe ratio for any period\n2. In good times, when market is going up Nifty small cap gives highest return (14.6%) but still comparable with Nifty50 (13.6%)\n3. In bad times, Nifty small cap gives the worst performance. \n4. Small cap indices give extreme behaviours in good and bad times"}}