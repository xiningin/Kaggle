{"cell_type":{"f8834670":"code","c59e2563":"code","aff6daff":"code","219c506d":"code","f6a2b623":"code","1dd86376":"code","598a77b2":"code","706d7e68":"code","23a5d9fc":"code","cdfe466f":"code","e27b57ff":"code","c0828335":"code","331600dd":"code","ffc60017":"code","7006bf16":"code","31c4e12a":"code","11eaae90":"code","85bd3529":"code","3360f439":"code","cdbd28ff":"markdown","fa576faf":"markdown","5c4d72bf":"markdown","08371e4a":"markdown","88387c52":"markdown","1d94d3f2":"markdown","05d4f2fb":"markdown","c0345972":"markdown","4981039c":"markdown","7fa8cfe4":"markdown","4d3d1306":"markdown","99184f4d":"markdown","a781f07c":"markdown","be5c442a":"markdown","5328812d":"markdown","1265a42b":"markdown","97ccae0a":"markdown","c2231dc4":"markdown"},"source":{"f8834670":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c59e2563":"movies = pd.read_csv('..\/input\/movies\/movies.csv', sep = ';')\nmovies.head()","aff6daff":"movies.info()","219c506d":"newHeaders=[\"Movie_Id\", \"Title, Year\"]\nmovies = pd.read_csv(\"..\/input\/movies\/movies.csv\", sep = ';', names = newHeaders) \nmovies.head()","f6a2b623":"movies['Title, Year'].str.split(',', expand=True)\nmovies[['Title', 'Year']] = movies['Title, Year'].str.split(',', expand=True)\n\nmovies","1dd86376":"print(movies['Year'].min(), movies['Year'].max())","598a77b2":"movies.count()","706d7e68":"customersRating = pd.read_csv('..\/input\/customersrating\/customers_rating.csv', sep = ';')\ncustomersRating.head()","23a5d9fc":"customersRating.info()","cdfe466f":"customersRating_groupby_rating = customersRating.groupby('Rating')\ntype(customersRating_groupby_rating)","e27b57ff":"customersRating_groupby_rating.groups","c0828335":"customersRating.groupby('Movie_Id').Rating.agg(['mean']).head()\ngrouped = customersRating.groupby('Movie_Id').Rating.agg(['mean']).head()\ngrouped.sort_values('mean', ascending=False)","331600dd":"movies.head()","ffc60017":"movies_groupby_year = movies.groupby('Year')\ntype(movies_groupby_year)","7006bf16":"movies_groupby_year.groups","31c4e12a":"movies_groupby_year.size()","11eaae90":"print(customersRating['Date'].max())","85bd3529":"selecao = (customersRating['Date'] == '2005-12-31') \ncustomersRating[selecao]","3360f439":"customersRating.groupby('Cust_Id')['Rating'].apply(list)","cdbd28ff":"Aqui, foi feito o agrupamento da coluna 'Movie_Id' e um agregado com a coluna 'Rating' para se obter a m\u00e9dia e imprimir os 5 primeiros valores de forma decrescente. Assim, foi obtido a resposta do entreg\u00e1vel 1.2, onde o nome dos 5 filmes com melhor m\u00e9dia de avalia\u00e7\u00e3o s\u00e3o, respectivamente: The Rise and Fall of ECW, Dinosaur Planet, Character e Paula Abdul's Get Up & Dance)  ","fa576faf":"Realizei esse output para ter certeza que a divis\u00e3o do conte\u00fado da string foi feita com sucesso e aproveitei para imprimir os valores do menor ano (ano de lan\u00e7amento dos filmes mais antigos dispon\u00edveis na plataforma) e maior ano (ano de lan\u00e7amento dos filmes mais recentes dispon\u00edveis na plataforma)","5c4d72bf":"\u00c9 necess\u00e1rio seperar as informa\u00e7\u00f5es \"Title\" e \"Year\". Aqui, usei a fun\u00e7\u00e3o split que divide o conte\u00fado de uma string e obtive esses dois valores em duas novas colunas.","08371e4a":"Visualizando os grupos que foram agrupados anteriormente, \u00e9 poss\u00edve ver o \u00edndice dos filmes que foram lan\u00e7ados em cada ano (Por exemplo, o filme que possui \u00edndice 3136 foi lan\u00e7ado no ano de 1915 e como o \u00edndice possui uma unidade a menor que o 'Movie_Id' - j\u00e1 que a contagem do \u00edndice se inicia em 0 - o 'Movie_Id' do filme de \u00edndice 3136 \u00e9 3137)","88387c52":"Agrupando a coluna 'Rating'","1d94d3f2":"Adicionando o dataset 'movies.csv' como 'movies' e visualizando as 5 primeiras linhas para entender quais dados est\u00e3o dispon\u00edveis no dataset.","05d4f2fb":"\u00c9 poss\u00edvel verificar o resultado anterior visualizando o dataset 'movies.csv'","c0345972":"O dataset possuia como header as informa\u00e7\u00f5es que deveriam estar em uma linha ent\u00e3o atribuir novo header ao dataset. Nessa caso, escolhi \"Movie_Id\" \"Title, Year\"","4981039c":"Visualizando os grupos que foram agrupados anteriormente. Fazendo algo tipo 'customersRating_groupby_rating.ngroups' \u00e9 poss\u00edvel ver que existem 5 grupos mas dessa forma n\u00e3o fica claro que as notas das avalia\u00e7\u00f5es s\u00e3o inteiros que v\u00e3o de 1 at\u00e9 5 ent\u00e3o optei por visualizar os grupos de forma mais completa.","7fa8cfe4":"O pr\u00f3ximo input foi feito para responder a pergunta 1.1 e conta quantas linhas existem no dataset 'movies.csv' (Utilizar, por exemplo, 'movies.shape[0]' retorna a contagem de todas as linhas da tabela enquanto 'movies.count()' retorna apenas a contagem de linhas n\u00e3o NaN para cada coluna. Nesse caso, o retorno \u00e9 o mesmo e indica que n\u00e3o existem linhas NaN)","4d3d1306":"Agrupando os anos e utilizando a fun\u00e7\u00e3o size(), obt\u00e9m-se quantos valores est\u00e3o dentro de cada array.\nN\u00e3o encontrei uma forma obter os 5 anos com menos lan\u00e7amentos de filmes mas olhando o output do \u00faltimo comando obtive que os 5 anos com menos lan\u00e7amentos de filmes foram, respectivamente, os anos de 1915(um la\u00e7amento), 1917(um la\u00e7amento), 1919 (sem registro), 1922(um la\u00e7amento) e 1923 (sem registro).\nIsso responde a pergunta 1.3\n","99184f4d":"Adicionando o dataset 'customersRating.csv' e visualizando as 5 primeiras linhas para entender quais dados est\u00e3o dispon\u00edveis no dataset.","a781f07c":"Como o t\u00edtulo dos filmes e ano de lan\u00e7amento est\u00e3o juntos na mesma coluna, verificar o tipo dos elementos da coluna.","be5c442a":"Agrupando a coluna 'Year' da tabela 'movies'","5328812d":"O pr\u00f3ximo comando imprime a \u00faltima data de avalia\u00e7\u00e3o do dataset","1265a42b":"Para o item 1.6, consegui agrupar todas as avalia\u00e7\u00f5es que cada customer fez mas n\u00e3o consegui outras manipula\u00e7\u00f5es :(","97ccae0a":"Verificando os DTypes para ver est\u00e1 tudo certo. O 'Date' poderia ser do tipo datetime mas como achei que n\u00e3o seria necess\u00e1rio realizar manipula\u00e7\u00f5es com esse valor em espec\u00edfico, optei por n\u00e3o fazer a convers\u00e3o.","c2231dc4":"Seleciona todas as notas de avalia\u00e7\u00e3o para o dia 2005-12-31 (\u00faltima data de avalia\u00e7\u00e3o do dataset). \nConsegui agrupar todas as avalia\u00e7\u00f5es do dia mas n\u00e3o consegui calcular a m\u00e9dia para encontrar a resposta para os itens 1.4 e 1.5 :("}}