{"cell_type":{"6941cefb":"code","139d7fd3":"code","0a9da1e4":"code","38caa4fe":"code","d8f32221":"code","c67ce46c":"code","6a19892a":"code","187cae46":"code","46a7522a":"code","fbe6f2c9":"code","2c973dba":"code","2a405f77":"code","d8281fac":"code","598753f9":"code","bf5e0813":"code","381a45e5":"code","30e31708":"code","b65c607e":"code","fa2bd1ab":"code","9ad9b406":"code","ee93d9e8":"code","be785b5e":"code","9e242291":"code","c88e9e56":"code","1103e747":"code","2ad3cd1f":"code","9faaaeb8":"code","0e85f2ea":"code","9b5076a0":"code","a79e6c0a":"code","042a9db8":"code","6ecb6e23":"code","6c22bc71":"code","52fa94e6":"code","2f9f69d4":"code","60b5af25":"code","1bef55e6":"code","53f4b4e4":"code","f7775853":"code","2c63995d":"code","235b19cc":"code","96bacd9e":"code","c8bebb14":"code","f634dc76":"code","481d7e88":"code","37e3c020":"code","b8621512":"code","945d9ea5":"code","65cf239d":"code","db175bd1":"code","43cbca1b":"code","2fbc34c0":"code","dfc2904b":"code","ef0452a3":"code","938cd367":"code","753cc994":"code","0c985432":"code","6d008ace":"markdown","9883d8ae":"markdown","4e1af3e2":"markdown","1976031b":"markdown","2b67684e":"markdown"},"source":{"6941cefb":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns       \nfrom scipy import stats\nfrom scipy.stats import  norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Imputer\nimport sklearn\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain = pd.read_csv(\"..\/input\/train.csv\",index_col=\"Id\")\ntest = pd.read_csv(\"..\/input\/test.csv\",index_col=\"Id\")\nprint(train.shape)\nprint(test.shape)","139d7fd3":"# SalePrice  \u623f\u4ef7\ntrain['SalePrice'].value_counts()\ntrain['SalePrice'].isnull().sum()\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\nsns.distplot(train['SalePrice'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)","0a9da1e4":"train['totalArea'] = train['GrLivArea'] + train['GarageArea'] + train['TotalBsmtSF']\ntrain = train.drop(train[train['totalArea'] > 8000].index)\ntrain['totalArea'] = np.log1p(train['totalArea'])\nsns.distplot(train['totalArea'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['totalArea'], plot=plt)\nfig = plt.figure()\nplt.plot(train['totalArea'],train['SalePrice'],'o')\n\n#test\ntest['GrLivArea'] = test['GrLivArea'].fillna(0)\ntest['GarageArea'] = test['GarageArea'].fillna(0)\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(0)\ntest['totalArea'] = test['GrLivArea'] + test['GarageArea'] + test['TotalBsmtSF']\ntest['totalArea'] = np.log1p(test['totalArea'])","38caa4fe":"# SaleCondition \u9500\u552e\u7c7b\u578b\n# print(train['SaleCondition'].value_counts())\n# train['SaleCondition'].isnull().sum()\n# train = train[train['SaleCondition'] == 'Normal']\ntrain = train.drop(train[train['GrLivArea'] > 4000].index)\nplt.plot(train['GrLivArea'][train['SaleCondition'] == 'Normal'],train['SalePrice'][train['SaleCondition'] == 'Normal'],'o')\nplt.plot(train['GrLivArea'][train['SaleCondition'] == 'Partial'],train['SalePrice'][train['SaleCondition'] == 'Partial'],'o')\nplt.plot(train['GrLivArea'][train['SaleCondition'] == 'Abnorml'],train['SalePrice'][train['SaleCondition'] == 'Abnorml'],'o')\nplt.plot(train['GrLivArea'][train['SaleCondition'] == 'Family'],train['SalePrice'][train['SaleCondition'] == 'Family'],'o')\nplt.plot(train['GrLivArea'][train['SaleCondition'] == 'Alloca'],train['SalePrice'][train['SaleCondition'] == 'Alloca'],'o')\nplt.plot(train['GrLivArea'][train['SaleCondition'] == 'AdjLand'],train['SalePrice'][train['SaleCondition'] == 'AdjLand'],'o')\n","d8f32221":"# MSSubClass \u5efa\u7b51\u7684\u7c7b\u522b\n# print(train['MSZoning'].value_counts())\n# train['SaleCondition'].isnull().sum()\ntrain = train.drop(train[(train['GrLivArea'] > 3000) & (train['MSZoning'] == 'RM')].index)\ntrain = train.drop(train[(train['GrLivArea'] > 3000) & (train['MSZoning'] == 'RH')].index)\nplt.plot(train['GrLivArea'][train['MSZoning'] == 'RL'],train['SalePrice'][train['MSZoning'] == 'RL'],'o')\nplt.plot(train['GrLivArea'][train['MSZoning'] == 'RM'],train['SalePrice'][train['MSZoning'] == 'RM'],'o')\nplt.plot(train['GrLivArea'][train['MSZoning'] == 'FV'],train['SalePrice'][train['MSZoning'] == 'FV'],'o')\nplt.plot(train['GrLivArea'][train['MSZoning'] == 'RH'],train['SalePrice'][train['MSZoning'] == 'RH'],'o')\nplt.plot(train['GrLivArea'][train['MSZoning'] == 'C (all)'],train['SalePrice'][train['MSZoning'] == 'C (all)'],'o')\n\n#test\ntest['MSZoning'] = test['MSZoning'].fillna('RL')","c67ce46c":"# LotFrontage \u4e34\u8857\n# print(train['LotFrontage'].value_counts().sort_index())\ntrain = train.drop(train[train['LotFrontage'] > 300].index)\ntrain['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].mean())\ntrain['not_LotFrontage'] = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['not_LotFrontage'][train['LotFrontage'] < 25] = 1\nindex = train['LotFrontage'] > 25\n\ntrain['LotFrontage'] = np.log1p(train['LotFrontage'])\n# # train['LotFrontage'].isnull().sum()\nsns.distplot(train['LotFrontage'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['LotFrontage'][index], plot=plt)\n\n# test\ntest['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].mean())\ntest['not_LotFrontage'] = pd.Series(np.zeros((len(test))),index = test.index)\ntest['not_LotFrontage'][test['LotFrontage'] < 25] = 1\ntest['LotFrontage'] = np.log1p(test['LotFrontage'])","6a19892a":"# LotArea\n# print(train['LotArea'].value_counts().sort_index())\ntrain = train.drop(train[train['LotArea'] > 100000].index)\ntrain['LotArea'] = np.log1p(train['LotArea'])\nsns.distplot(train['LotArea'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['LotArea'], plot=plt)\nfig = plt.figure()\nplt.plot(train['LotArea'],train['SalePrice'],'o')\n\n# test\ntest['LotArea'] = np.log1p(test['LotArea'])","187cae46":"# Street Alley \u8857\u9053 \u80e1\u540c\ntrain = train.drop('Street', axis=1)\ntrain = train.drop('Alley', axis=1)\n\n#test\ntest = test.drop('Street', axis=1)\ntest = test.drop('Alley', axis=1)","46a7522a":"# LotShape \u623f\u5c4b\u7684\u5927\u81f4\u5f62\u72b6\n# print(train['LotShape'].value_counts().sort_index())\n# print(train['LotShape'].isnull().sum()\/len(train))\nplt.plot(train['GrLivArea'][train['LotShape'] == 'IR1'],train['SalePrice'][train['LotShape'] == 'IR1'],'o')\nplt.plot(train['GrLivArea'][train['LotShape'] == 'Reg'],train['SalePrice'][train['LotShape'] == 'Reg'],'o')\nplt.plot(train['GrLivArea'][train['LotShape'] == 'IR2'],train['SalePrice'][train['LotShape'] == 'IR2'],'o')\nplt.plot(train['GrLivArea'][train['LotShape'] == 'IR3'],train['SalePrice'][train['LotShape'] == 'IR3'],'o')","fbe6f2c9":"# LandContour \u7269\u4e1a\n# print(train['LandContour'].value_counts().sort_index())\n# print(train['LandContour'].isnull().sum()\/len(train))\nplt.plot(train['GrLivArea'][train['LandContour'] == 'Lvl'],train['SalePrice'][train['LandContour'] == 'Lvl'],'o')\nplt.plot(train['GrLivArea'][train['LandContour'] == 'Bnk'],train['SalePrice'][train['LandContour'] == 'Bnk'],'o')\nplt.plot(train['GrLivArea'][train['LandContour'] == 'HLS'],train['SalePrice'][train['LandContour'] == 'HLS'],'o')\nplt.plot(train['GrLivArea'][train['LandContour'] == 'Low'],train['SalePrice'][train['LandContour'] == 'Low'],'o')","2c973dba":"# Utilities \u516c\u5171\u8bbe\u65bd\u53ef\u7528\u5ea6\n# print(train['Utilities'].value_counts().sort_index())\n# print(train['Utilities'].isnull().sum()\/len(train))\ntrain = train.drop('Utilities', axis=1)\n\n#test\ntest = test.drop('Utilities', axis=1)","2a405f77":"# LotConfig\n# print(train['LotConfig'].value_counts().sort_index())\n# print(train['LotConfig'].isnull().sum()\/len(train))\nplt.plot(train['GrLivArea'][train['LotConfig'] == 'Corner'],train['SalePrice'][train['LotConfig'] == 'Corner'],'o')\nplt.plot(train['GrLivArea'][train['LotConfig'] == 'Inside'],train['SalePrice'][train['LotConfig'] == 'Inside'],'o')\nplt.plot(train['GrLivArea'][train['LotConfig'] == 'CulDSac'],train['SalePrice'][train['LotConfig'] == 'CulDSac'],'o')\nplt.plot(train['GrLivArea'][train['LotConfig'] == 'FR3'],train['SalePrice'][train['LotConfig'] == 'FR3'],'o')","d8281fac":"# LandSlope \u5761\u5ea6\n# print(train['LandSlope'].value_counts().sort_index())\n# print(train['LandSlope'].isnull().sum()\/len(train))\nplt.plot(train['GrLivArea'][train['LandSlope'] == 'Gtl'],train['SalePrice'][train['LandSlope'] == 'Gtl'],'o')\nplt.plot(train['GrLivArea'][train['LandSlope'] == 'Mod'],train['SalePrice'][train['LandSlope'] == 'Mod'],'o')\nplt.plot(train['GrLivArea'][train['LandSlope'] == 'Sev'],train['SalePrice'][train['LandSlope'] == 'Sev'],'o')","598753f9":"# Neighborhood  Condition1 Condition2\u4f4d\u7f6e\nplt.plot(train['GrLivArea'][train['Condition1'] == 'Norm'],train['SalePrice'][train['Condition1'] == 'Norm'],'o')\nplt.plot(train['GrLivArea'][train['Condition1'] == 'Artery'],train['SalePrice'][train['Condition1'] == 'Artery'],'o')\nplt.plot(train['GrLivArea'][train['Condition1'] == 'Feedr'],train['SalePrice'][train['Condition1'] == 'Feedr'],'o')","bf5e0813":"# BldgType \u4f4f\u5b85\u98ce\u683c\n# print(train['OverallQual'].value_counts().sort_index())\n# print(train['OverallQual'].isnull().sum()\/len(train))\nsns.distplot(train['OverallQual'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['OverallQual'], plot=plt)\nfig = plt.figure()\nplt.plot(train['OverallQual'],train['SalePrice'],'o')","381a45e5":"# OverallCond \u603b\u4f53\u72b6\u51b5\u8bc4\u7ea7\n# print(train['OverallCond'].value_counts().sort_index())\n# print(train['OverallCond'].isnull().sum()\/len(train))\ntrain = train.drop(train[(train['OverallCond'] ==2 )&(train['SalePrice'] > 300000 )].index)\nsns.distplot(train['OverallCond'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['OverallCond'], plot=plt)\nfig = plt.figure()\nplt.plot(train['OverallCond'],train['SalePrice'],'o')","30e31708":"# YearBuilt\ntrain['newhouse']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['newhouse'][train['YearBuilt'] > 2000]  = 1\ntrain['age']  = 2010 - train['YearBuilt']\n# print(train['age'].value_counts().sort_index())\n# print(train['YearBuilt'].value_counts().sort_index())\n# print(train['YearBuilt'].isnull().sum()\/len(train))\nplt.plot(train['YearBuilt'],train['SalePrice'],'o')\n\n# test\ntest['newhouse']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['newhouse'][test['YearBuilt'] > 2000]  = 1\ntest['age']  = 2010 - test['YearBuilt']","b65c607e":"# YearRemodAdd\n# print(train['YearRemodAdd'].value_counts().sort_index())\n# print(train['YearRemodAdd'].isnull().sum()\/len(train))\ntrain['1950house']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['1950house'][train['YearRemodAdd'] == 1950]  = 1\nsns.distplot(train['YearRemodAdd'], fit=norm)\n\n#test\ntest['1950house']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['1950house'][test['YearRemodAdd'] == 1950]  = 1","fa2bd1ab":"# Foundation\n# print(train['Foundation'].value_counts().sort_index())\n# print(train['Foundation'].isnull().sum()\/len(train))\nplt.plot(train['GrLivArea'][train['Foundation'] == 'BrkTil'],train['SalePrice'][train['Foundation'] == 'BrkTil'],'o')\nplt.plot(train['GrLivArea'][train['Foundation'] == 'CBlock'],train['SalePrice'][train['Foundation'] == 'CBlock'],'o')\nplt.plot(train['GrLivArea'][train['Foundation'] == 'PConc'],train['SalePrice'][train['Foundation'] == 'PConc'],'o')","9ad9b406":"# BsmtQual \u5730\u4e0b\u5ba4\u9ad8\u5ea6\ntrain['BsmtQual'] = train['BsmtQual'].fillna(\"unknown\")\ntrain['BsmtCond'] = train['BsmtCond'].fillna(\"TA\")\ntrain['BsmtExposure'] = train['BsmtExposure'].fillna(\"unknown\")\ntrain['BsmtFinType1'] = train['BsmtFinType1'].fillna(\"unknown\")\n\n#test\ntest['BsmtQual'] = test['BsmtQual'].fillna(\"unknown\")\ntest['BsmtCond'] = test['BsmtCond'].fillna(\"TA\")\ntest['BsmtExposure'] = test['BsmtExposure'].fillna(\"unknown\")\ntest['BsmtFinType1'] = test['BsmtFinType1'].fillna(\"unknown\")","ee93d9e8":"# print(train['BsmtFinSF1'].value_counts())\n# print(train['BsmtFinSF1'].isnull().sum()\/len(train))\ntrain['noSF1']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noSF1'][train['BsmtFinSF1'] == 0]  = 1\nplt.plot(train['BsmtFinSF1'],train['SalePrice'],'o')\n\n# test\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(0)\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(0)\ntest['noSF1']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noSF1'][test['BsmtFinSF1'] == 0]  = 1","be785b5e":"# BsmtCond\ntrain['BsmtCond'] = train['BsmtCond'].fillna(0)\n\n#test \ntest['BsmtCond'] = test['BsmtCond'].fillna(0)","9e242291":"# print(train['BsmtUnfSF'].value_counts())\n# print(train['TotalBsmtSF'].isnull().sum()\/len(train))\ntrain['noTotalBsmtSF']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noTotalBsmtSF'][train['TotalBsmtSF'] == 0]  = 1\nindex = train['TotalBsmtSF'] > 0\ntrain['TotalBsmtSF'] = np.log1p(train['TotalBsmtSF'])\nsns.distplot(train['TotalBsmtSF'][index], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['TotalBsmtSF'][index], plot=plt)\nfig = plt.figure()\nplt.plot(train['TotalBsmtSF'][index],train['SalePrice'][index],'o')\n\n#test\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(0)\ntest['noTotalBsmtSF']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noTotalBsmtSF'][test['TotalBsmtSF'] == 0]  = 1\ntest['TotalBsmtSF'] = np.log1p(test['TotalBsmtSF'])\n\n","c88e9e56":"# Heating\ntrain['Electrical'] = train['Electrical'].fillna('SBrkr')\n\n# test\ntest['Electrical'] = test['Electrical'].fillna('SBrkr')","1103e747":"# print(train['1stFlrSF'].value_counts())\n# print(train['1stFlrSF'].isnull().sum()\/len(train))\ntrain['1stFlrSF'] = np.log1p(train['1stFlrSF'])\nsns.distplot(train['1stFlrSF'], fit=norm)\nfig = plt.figure()\nres = stats.probplot(train['1stFlrSF'], plot=plt)\n\n# test\ntest['1stFlrSF'] = np.log1p(test['1stFlrSF'])","2ad3cd1f":"# print(train['2ndFlrSF'].value_counts())\n# print(train['2ndFlrSF'].isnull().sum()\/len(train))\ntrain['no2ndFlrSF']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['no2ndFlrSF'][train['2ndFlrSF'] == 0]  = 1\nsns.distplot(train['2ndFlrSF'], fit=norm)\n\n# test\ntest['no2ndFlrSF']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['no2ndFlrSF'][test['2ndFlrSF'] == 0]  = 1","9faaaeb8":"#LowQualFinSF\n# print(train['LowQualFinSF'].value_counts())\n# print(train['LowQualFinSF'].isnull().sum()\/len(train))\ntrain['haveLowQual']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['haveLowQual'][train['LowQualFinSF'] > 0]  = 1\n\n# test\ntest['haveLowQual']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['haveLowQual'][test['LowQualFinSF'] > 0]  = 1","0e85f2ea":"# GrLivArea\n# print(train['LowQualFinSF'].value_counts())\n# print(train['LowQualFinSF'].isnull().sum()\/len(train))\n\ntrain['GrLivArea'] = np.log1p(train['GrLivArea'])\nsns.distplot(train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GrLivArea'], plot=plt)\n\n#test\ntest['GrLivArea'] = np.log1p(test['GrLivArea'])","9b5076a0":"# FullBath\n# print(train['FullBath'].value_counts())\n# print(train['FullBath'].isnull().sum()\/len(train))\nsns.distplot(train['FullBath'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['FullBath'], plot=plt)\nfig = plt.figure()\nplt.plot(train['FullBath'],train['SalePrice'],'o')","a79e6c0a":"# BsmtFullBath\n# train.columns\n# print(train['TotRmsAbvGrd'].value_counts())\n# print(train['TotRmsAbvGrd'].isnull().sum()\/len(train))\ntrain['TotRmsAbvGrd'] = np.log1p(train['TotRmsAbvGrd'])\nsns.distplot(train['TotRmsAbvGrd'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['TotRmsAbvGrd'], plot=plt)\n\n# test\ntest['TotRmsAbvGrd'] = test['TotRmsAbvGrd'].fillna(test['TotRmsAbvGrd'].mean())\ntest['TotRmsAbvGrd'] = np.log1p(test['TotRmsAbvGrd'])","042a9db8":"# Functional\n# print(train['Fireplaces'].value_counts())\n# print(train['Fireplaces'].isnull().sum()\/len(train))\ntrain = train.drop('FireplaceQu',axis=1)\n\n# test\ntest = test.drop('FireplaceQu',axis=1)","6ecb6e23":"# print(train['GarageType'].value_counts())\n# print(train['GarageType'].isnull().sum()\/len(train))\ntrain['GarageType'] = train['GarageType'].fillna('unknown')\n\n# test\ntest['GarageType'] = test['GarageType'].fillna('unknown')","6c22bc71":"# GarageYrBlt\n# print(train['GarageYrBlt'].value_counts())\n# print(train['GarageYrBlt'].isnull().sum()\/len(train))\ntrain['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())\n# plt.plot(train['GarageYrBlt'],train['SalePrice'],'o')\n\n# test\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())","52fa94e6":"# GarageFinish\n# print(train['GarageFinish'].value_counts())\n# print(train['GarageFinish'].isnull().sum()\/len(train))\ntrain['GarageFinish'] = train['GarageFinish'].fillna('unknown')\n\n# test\ntest['GarageFinish'] = test['GarageFinish'].fillna('unknown')","2f9f69d4":"# print(train['GarageCars'].value_counts())\n# print(train['GarageCars'].isnull().sum()\/len(train))\n# train['GarageCars'] = np.log1p(train['GarageCars'])\nsns.distplot(train['GarageCars'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GarageCars'], plot=plt)\n\n#test\ntest['GarageCars'] = test['GarageCars'].fillna(0)","60b5af25":"# GarageArea\n# print(train['GarageArea'].value_counts())\n# print(train['GarageArea'].isnull().sum()\/len(train))\ntrain['noGarageArea']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noGarageArea'][train['GarageArea'] == 0]  = 1\nindex = train['GarageArea'] > 0\ntrain['GarageArea'] = np.log1p(train['GarageArea'])\nsns.distplot(train['GarageArea'][index], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GarageArea'][index], plot=plt)\n\n#test\ntest['GarageArea'] = test['GarageArea'].fillna(0)\ntest['noGarageArea']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noGarageArea'][test['GarageArea'] == 0]  = 1\ntest['GarageArea'] = np.log1p(test['GarageArea'])","1bef55e6":"# GarageQual\n# print(train['GarageQual'].value_counts())\n# print(train['GarageQual'].isnull().sum()\/len(train))\ntrain['GarageQual'] = train['GarageQual'].fillna('unknown')\n\n#test\ntest['GarageQual'] = test['GarageQual'].fillna('unknown')","53f4b4e4":"# GarageCond\n# print(train['GarageCond'].value_counts())\n# print(train['GarageCond'].isnull().sum()\/len(train))\ntrain['GarageCond'] = train['GarageCond'].fillna('unknown')\n\n#test\ntest['GarageCond'] = test['GarageCond'].fillna('unknown')","f7775853":"# WoodDeckSF\ntrain['noOpenPorchSF']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noOpenPorchSF'][train['OpenPorchSF'] == 0]  = 1\n\nindex = train['OpenPorchSF'] > 0\ntrain['OpenPorchSF'] = np.log1p(train['OpenPorchSF'])\n\nsns.distplot(train['OpenPorchSF'][index], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['OpenPorchSF'][index], plot=plt)\n\n#test\ntest['noOpenPorchSF']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noOpenPorchSF'][test['OpenPorchSF'] == 0]  = 1\ntest['OpenPorchSF'] = np.log1p(test['OpenPorchSF'])","2c63995d":"# EnclosedPorch\n# print(train['EnclosedPorch'].value_counts())\ntrain['noEnclosedPorch']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noEnclosedPorch'][train['EnclosedPorch'] == 0]  = 1\n\nindex = train['EnclosedPorch'] > 0\n\nsns.distplot(train['EnclosedPorch'][index], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['EnclosedPorch'][index], plot=plt)\nfig = plt.figure()\nplt.plot(train['EnclosedPorch'],train['SalePrice'],'o')\n\n\n#test\ntest['noEnclosedPorch']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noEnclosedPorch'][test['EnclosedPorch'] == 0]  = 1","235b19cc":"# 3SsnPorch\ntrain = train.drop('3SsnPorch',axis=1)\n\n#test\ntest = test.drop('3SsnPorch',axis=1)","96bacd9e":"# ScreenPorch\ntrain['noScreenPorch']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noScreenPorch'][train['ScreenPorch'] == 0]  = 1\n\nindex = train['ScreenPorch'] > 0\ntrain['ScreenPorch'] = np.log1p(train['ScreenPorch'])\nsns.distplot(train['ScreenPorch'][index], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['ScreenPorch'][index], plot=plt)\nfig = plt.figure()\nplt.plot(train['ScreenPorch'][index],train['SalePrice'][index],'o')\n\n#test\ntest['noScreenPorch']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noScreenPorch'][test['ScreenPorch'] == 0]  = 1\ntest['ScreenPorch'] = np.log1p(test['ScreenPorch'])","c8bebb14":"# PoolArea\ntrain = train.drop('PoolArea',axis=1)\ntrain = train.drop('PoolQC',axis=1)\n\n#test\ntest = test.drop('PoolArea',axis=1)\ntest = test.drop('PoolQC',axis=1)","f634dc76":"# Fence\n# print(train['MiscVal'].value_counts())\n# print(train['MiscVal'].isnull().sum()\/len(train))\ntrain = train.drop('Fence',axis=1)\ntrain = train.drop('MiscFeature',axis=1)\ntrain = train.drop('MiscVal',axis=1)\ntrain = train.drop('MoSold',axis=1)\ntrain = train.drop('YrSold',axis=1)\n\n#test\ntest = test.drop('Fence',axis=1)\ntest = test.drop('MiscFeature',axis=1)\ntest = test.drop('MiscVal',axis=1)\ntest = test.drop('MoSold',axis=1)\ntest = test.drop('YrSold',axis=1)","481d7e88":"# MoSold\n# print(train['SaleType'].value_counts())\n# print(train['SaleType'].isnull().sum()\/len(train))\n\nplt.plot(train['GrLivArea'][train['SaleType'] == 'WD'],train['SalePrice'][train['SaleType'] == 'WD'],'o')\nplt.plot(train['GrLivArea'][train['SaleType'] == 'New'],train['SalePrice'][train['SaleType'] == 'New'],'o')\nplt.plot(train['GrLivArea'][train['SaleType'] == 'COD'],train['SalePrice'][train['SaleType'] == 'COD'],'o')\n\n#test\ntest['SaleType'] = test['SaleType'].fillna('WD')","37e3c020":"# MasVnrType\n# print(train['MasVnrType'].value_counts())\ntrain['MasVnrType'] = train['MasVnrType'].fillna('None')\nplt.plot(train['GrLivArea'][train['MasVnrType'] == 'None'],train['SalePrice'][train['MasVnrType'] == 'None'],'o')\nplt.plot(train['GrLivArea'][train['MasVnrType'] == 'BrkFace'],train['SalePrice'][train['MasVnrType'] == 'BrkFace'],'o')\nplt.plot(train['GrLivArea'][train['MasVnrType'] == 'Stone'],train['SalePrice'][train['MasVnrType'] == 'Stone'],'o')\n\n#test\ntest['MasVnrType'] = test['MasVnrType'].fillna('None')","b8621512":"# MasVnrArea\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(0)\ntrain['noMasVnrArea']  = pd.Series(np.zeros((len(train))),index = train.index)\ntrain['noMasVnrArea'][train['MasVnrArea'] == 0]  = 1\n\nindex = train['MasVnrArea'] > 0\ntrain['MasVnrArea'] = np.log1p(train['MasVnrArea'])\nsns.distplot(train['MasVnrArea'][index], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['MasVnrArea'][index], plot=plt)\nfig = plt.figure()\nplt.plot(train['MasVnrArea'][index],train['SalePrice'][index],'o')\n\n#test\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(0)\ntest['noMasVnrArea']  = pd.Series(np.zeros((len(test))),index = test.index)\ntest['noMasVnrArea'][test['MasVnrArea'] == 0]  = 1\ntest['MasVnrArea'] = np.log1p(test['MasVnrArea'])","945d9ea5":"# BsmtFinType2\ntrain['BsmtFinType2'] = train['BsmtFinType2'].fillna('Unf')\n# print(train['BsmtFinType2'].value_counts())\n# print(train['BsmtFinType2'].isnull().sum()\/len(train))\n\n#test\ntest['BsmtFinType2'] = test['BsmtFinType2'].fillna('Unf')","65cf239d":"# print(train['Exterior2nd'].value_counts())\n# print(train['Exterior2nd'].isnull().sum()\/len(train))\n\ntest['KitchenQual'] = test['KitchenQual'].fillna('TA')\ntest['Functional'] = test['Functional'].fillna('Typ')\ntest['Exterior1st'] = test['Exterior1st'].fillna('unknown')\ntest['Exterior2nd'] = test['Exterior2nd'].fillna('unknown')\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(0)\ntest['BsmtFullBath'] = test['BsmtFullBath'].fillna(0)\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(0)","db175bd1":"print(train.isnull().sum().max())\n# print(test.isnull().sum().sort_values(ascending=False))\nprint(test.isnull().sum().max())","43cbca1b":"# \u76f8\u5173\u6027\u5206\u6790\ncorrmat = train.corr()\nk = 10\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\nprint(cols)\ncm = train[cols].corr()\nf, ax = plt.subplots(figsize=(14, 11))\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True,fmt='.2f')\nplt.show()","2fbc34c0":"concat_data = pd.concat([train,test])\n\n# one-hot\ndummies_data = pd.get_dummies(concat_data.drop('SalePrice', axis=1))\n\n# \u5f52\u4e00\u5316\ndummies_data = StandardScaler().fit_transform(dummies_data)\nX = dummies_data[:len(train)]\nprint(X.shape)\nsubmission_data = dummies_data[-len(test):]\nprint(submission_data.shape)\ny = concat_data.iloc[:len(train)]['SalePrice'].values","dfc2904b":"# one-hot\n# dummies_data = pd.get_dummies(train.drop('SalePrice', axis=1))\n# X = StandardScaler().fit_transform(dummies_data)\n# y = train['SalePrice'].values","ef0452a3":"from sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.utils import resample\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nalphas = [.0001, .0003, .0005, .0007, .0009, .01, 0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50,100,200,300,500]\n\nscores = [np.sqrt(-cross_val_score(Ridge(alpha), X_train, y_train, scoring=\"neg_mean_squared_error\", cv = 10)).mean()\n          for alpha in alphas]\n\nplt.plot(alphas, scores, label=Ridge.__name__)\nplt.legend(loc='center')\nplt.xlabel('alpha')\nplt.ylabel('cross validation score')\nplt.tight_layout()\nplt.show()\n\nreg = linear_model.Ridge(200)\nreg.fit(X_train,y_train)\ny_pred = reg.predict(X_test)\nprint('\u5747\u65b9\u6839\u8bef\u5dee:',mean_squared_error(y_test,y_pred)**0.5)","938cd367":"import xgboost as xgb\n\nregr = xgb.XGBRegressor(\n                 colsample_bytree=0.2,\n                 gamma=0.0,\n                 learning_rate=0.05,\n                 max_depth=6,\n                 min_child_weight=1.5,\n                 n_estimators=7200,                                                                  \n                 reg_alpha=0.9,\n                 reg_lambda=0.6,\n                 subsample=0.2,\n                 seed=42,\n                 silent=1)\n\nregr.fit(X_train,y_train)\n\n# Run prediction on training set to get a rough idea of how well it does.\ny_pred = regr.predict(X_test)\nprint('\u5747\u65b9\u6839\u8bef\u5dee:',mean_squared_error(y_test,y_pred)**0.5)\n\n# Run prediction on the Kaggle test set.\ny_pred_xgb = regr.predict(submission_data)\ny_pred_xgb = np.expm1(y_pred_xgb)","753cc994":"# preds = []\n# for i in range(10):\n#     data_x,data_y = resample(X,y,n_samples=len(X))\n#     reg = linear_model.Ridge(75)\n#     reg.fit(data_x,data_y)\n#     y_test_ridge = reg.predict(submission_data)\n#     y_test_ridge = np.expm1(y_test_ridge)\n#     preds.append(y_test_ridge)\n# preds.append(y_pred_xgb)\n# result = np.sum(preds,axis=0)\/len(preds)\n\nreg = linear_model.Ridge(200)\nreg.fit(X,y)\ny_test_ridge = reg.predict(submission_data)\ny_test_ridge = np.expm1(y_test_ridge)\nresult = (y_test_ridge+y_pred_xgb)\/2\n\nplt.plot(np.expm1(test['GrLivArea']),result,'o')","0c985432":"my_submission = pd.DataFrame({'Id':test.index,'SalePrice': result})\nmy_submission.to_csv('submission.csv', index=False)","6d008ace":"# \u5904\u7406\u7279\u5f81\n- \u67e5\u770b\u6bcf\u4e2a\u7279\u5f81\u7684\u6784\u6210\n- \u586b\u8865\u7f3a\u5931\n- \u67e5\u770b\u6bcf\u4e2a\u7279\u5f81\u7684\u5206\u5e03\n- \u504f\u6001\u6b63\u6001\u5316\n- \u6784\u9020\u65b0\u7279\u5f81\n- \u5220\u9664\u4e0d\u9700\u8981\u7279\u5f81\n- \u5220\u9664\u5f02\u5e38\u503c","9883d8ae":"\u6bd4\u8d5b\u63d0\u4f9b\u4e86\u623f\u5c4b\u7684\u5f88\u591a\u4fe1\u606f\u4ee5\u53ca\u623f\u5c4b\u7684\u4ef7\u683c,\u6211\u4eec\u9700\u8981\u7528\u8fd9\u4e9b\u6570\u636e\u8bad\u7ec3\u6ce2\u5f62\u6765\u9884\u6d4b\u5176\u4ed6\u623f\u5c4b\u7684\u4ef7\u683c.\n\n\u56fd\u5916\u7684\u623f\u5b50\u90fd\u662f\u7c7b\u4f3c\u72ec\u680b\u522b\u5885\u7684\u6837\u5b50,\u770b\u770b\u63d0\u4f9b\u7684\u6570\u636e\u4f60\u5c31\u77e5\u9053\u4e86,\u4e00\u5c42\u4e8c\u5c42\u5730\u4e0b\u5ba4,\u82b1\u56ed\u8f66\u5e93\u6e38\u6cf3\u6c60.\u6211\u4e00\u8fb9\u5199\u4e00\u8fb9\u54ed.....\n\n\n| \u7279\u5f81|\u542b\u4e49|\n| ---|---|\n|SalePrice | \u623f\u4ef7 |\n|MSSubClass| \u5efa\u7b51\u7684\u7c7b\u522b                                        |\n|MSZoning| \u5206\u533a(\u96be\u9053\u662f\u7a77\u4eba\u533a\u548c\u5bcc\u4eba\u533a?)                             |\n|LotFrontage| \u4e34\u8857,\u8d8a\u9760\u8fd1\u8857\u9053\u4ef7\u683c\u8d8a\u9ad8               |\n|LotArea| \u9762\u79ef                                      |\n|Street| \u8857\u9053                                          |\n|Alley| \u80e1\u540c                                       |\n|LotShape| \u623f\u5c4b\u7684\u5927\u81f4\u5f62\u72b6                                   |\n|LandContour| \u7269\u4e1a                               |\n|Utilities|  \u516c\u5171\u8bbe\u65bd\u53ef\u7528\u5ea6                              |\n|LotConfig| \u914d\u7f6e                                            |\n|LandSlope| \u5761\u5ea6                                      |\n|Neighborhood| \u4f4d\u7f6e                |\n|Condition1| \u9760\u8fd1\u94c1\u8def\u516c\u8def                          |\n|Condition2| \u9760\u8fd1\u94c1\u8def\u516c\u8def(\u5982\u679c\u5b58\u5728\u7b2c\u4e8c\u4e2a) |\n|BldgType| \u4f4f\u5b85\u7c7b\u578b                                              |\n|HouseStyle| \u623f\u5c4b\u98ce\u683c                                        |\n|OverallQual| \u5efa\u7b51\u6750\u6599\u548c\u65bd\u5de5\u8d28\u91cf                       |\n|OverallCond| \u603b\u4f53\u72b6\u51b5\u8bc4\u7ea7                                |\n|YearBuilt| \u5efa\u9020\u5e74\u4efd                                  |\n|YearRemodAdd| \u6539\u9020\u65e5\u671f                                            |\n|RoofStyle| \u5c4b\u9876\u7c7b\u578b                                               |\n|RoofMatl| \u5c4b\u9876\u6750\u6599                                                |\n|Exterior1st| \u5916\u90e8\u8986\u76d6\u7269                               |\n|Exterior2nd| \u5916\u90e8\u8986\u76d6\u7269 (\u5982\u679c\u6709\u7b2c\u4e8c\u79cd)     |\n|MasVnrType| \u5899\u4f53\u8d34\u9762\u7c7b\u578b                                         |\n|MasVnrArea| \u5899\u4f53\u8d34\u9762\u7684\u9762\u79ef                        |\n|ExterQual| \u8d34\u9762\u7684\u8d28\u91cf                                  |\n|ExterCond| \u5916\u90e8\u6750\u6599\u72b6\u51b5            |\n|Foundation| \u5730\u57fa\u7c7b\u578b                                        |\n|BsmtQual| \u5730\u4e0b\u5ba4\u9ad8\u5ea6                                    |\n|BsmtCond| \u5730\u4e0b\u5ba4\u8bc4\u5206                           |\n|BsmtExposure| \u82b1\u56ed\u5c42\u5730\u4e0b\u5ba4\u5899\u58c1                    |\n|BsmtFinType1| \u5730\u4e0b\u5ba4\u65bd\u5de5\u8d28\u91cf                        |\n|BsmtFinSF1| Type 1 \u5efa\u7b51\u9762\u79ef                                 |\n|BsmtFinType2| \u7b2c\u4e8c\u4e2a\u5efa\u7b51\u9762\u79ef (\u5982\u679c\u5b58\u5728)              |\n|BsmtFinSF2| Type 2 \u5efa\u7b51\u9762\u79ef                                |\n|BsmtUnfSF| \u672a\u5b8c\u6210\u5730\u4e0b\u5ba4\u9762\u79ef                     |\n|TotalBsmtSF| \u5730\u4e0b\u5ba4\u603b\u9762\u79ef                         |\n|Heating| \u5149\u7167\u7c7b\u578b                                                |\n|HeatingQC| \u5149\u7167\u8d28\u91cf\u4e0e\u7c7b\u578b                                |\n|CentralAir| \u4e2d\u592e\u7a7a\u8c03                                  |\n|Electrical|\u7535\u529b\u7cfb\u7edf(\u56fd\u5916\u6709\u522b\u5885\u623f\u9876\u662f\u592a\u9633\u80fd\u53d1\u7535\u677f\u7684)                                      |\n|1stFlrSF| \u4e00\u697c\u9762\u79ef                                      |\n|2ndFlrSF| \u4e8c\u697c\u9762\u79ef                                      |\n|LowQualFinSF| \u4f4e\u8d28\u91cf\u5efa\u7b51\u9762\u79ef            |\n|GrLivArea| \u5730\u4e0a\u751f\u6d3b\u533a\u9762\u79ef                |\n|BsmtFullBath| \u9f50\u5168\u7684\u6d17\u6d74\u95f4                                |\n|BsmtHalfBath| \u5730\u4e0b\u5ba4\u6709\u6d17\u6d74\u95f4                              |\n|FullBath| \u9f50\u5168\u7684\u9ad8\u6863\u6d17\u6d74\u95f4                                  |\n|HalfBath| \u5730\u4e0b\u5ba4\u6709\u9ad8\u6863\u6d17\u6d74\u95f4                                       |\n|BedroomAbvGr| \u5730\u4e0a\u5367\u5ba4\u6570                       |\n|KitchenAbvGr| \u53a8\u623f\u6570                                           |\n|KitchenQual| \u53a8\u623f\u8d28\u91cf                                       |\n|TotRmsAbvGrd| \u9ad8\u6863\u623f\u95f4\u6570     |\n|Functional| \u5b9e\u7528\u7b49\u7ea7                                  |\n|Fireplaces| \u58c1\u7089\u6570\u91cf                                      |\n|FireplaceQu| \u58c1\u7089\u8d28\u91cf                                       |\n|GarageType| \u8f66\u5e93\u4f4d\u7f6e                                           |\n|GarageYrBlt| \u8f66\u5e93\u5e93\u9f84                                    |\n|GarageFinish| \u8f66\u5e93\u7684\u5185\u90e8\u88c5\u9970                            |\n|GarageCars| \u8f66\u5e93\u5b58\u8f66\u91cf                            |\n|GarageArea| \u8f66\u5e93\u9762\u79ef                              |\n|GarageQual| \u8f66\u5e93\u8d28\u91cf                                             |\n|GarageCond| \u8f66\u5e93\u8bc4\u5206                                        |\n|PavedDrive| \u8f66\u9053                                           |\n|WoodDeckSF| \u6728\u9633\u53f0\u9762\u79ef                              |\n|OpenPorchSF| \u5f00\u653e\u95e8\u5eca\u9762\u79ef                            |\n|EnclosedPorch| \u5c01\u95ed\u95e8\u5eca\u9762\u79ef                     |\n|3SsnPorch| \u4e09\u5b63\u95e8\u5eca\u9762\u79ef                      |\n|ScreenPorch| \u5c4f\u98ce\u95e8\u5eca\u9762\u79ef                          |\n|PoolArea| \u6cf3\u6c60\u9762\u79ef                                     |\n|PoolQC| \u6cf3\u6c60\u8d28\u91cf                                                   |\n|Fence| \u56f4\u680f\u8d28\u91cf                                                  |\n|MiscFeature| \u6742\u9879\u529f\u80fd     |\n|MiscVal| \u5176\u4ed6\u529f\u80fd\u7684\u4ef7\u503c                              |\n|MoSold| \u5df2\u552e\u6708\u4efd                                                     |\n|YrSold| \u5df2\u552e\u5e74\u4efd                                                      |\n|SaleType| \u51fa\u552e\u7c7b\u578b                                                 |\n|SaleCondition| \u9500\u552e\u72b6\u51b5                                      |","4e1af3e2":"# \u8bad\u7ec3\u6a21\u578b","1976031b":"# \u6807\u51c6\u5316","2b67684e":"# \u63d0\u4ea4\u7ed3\u679c"}}