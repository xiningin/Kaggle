{"cell_type":{"305a0c74":"code","56a4a1f7":"code","fa07251d":"code","3c2bcfe9":"code","cff587e0":"code","30f8217d":"code","30db48df":"code","f073cc35":"code","98042bad":"code","3d2e4572":"code","90fd636c":"code","9320ab3e":"code","b20e037f":"code","30bb2cc8":"code","de92052e":"code","f0de4168":"code","2a8e0b27":"code","68c6111c":"code","e9aabfc2":"code","6ae57f50":"code","2771ea93":"code","c2ba7f88":"code","c39014de":"code","2f1366bc":"code","4bb0d1b6":"code","e8b1fa91":"markdown","a7d05ae9":"markdown","8b559578":"markdown","49781c5d":"markdown","fab997c0":"markdown"},"source":{"305a0c74":"import numpy as np\nimport pandas as pd","56a4a1f7":"whole_data = pd.read_csv('..\/input\/kickstarter-projects\/ks-projects-201801.csv',parse_dates=['launched','deadline'])\nwhole_data = whole_data.fillna({'name':'unknown'})  #the missing value processing\n\n#drop the index that state is 'undefined', 'suspended', 'canceled'. \nwhole_data['state'].replace('undefined','suspended', inplace=True)\nwhole_data['state'].replace('canceled','suspended', inplace=True)\nwhole_data['state'].replace('suspended','NaN', inplace=True)\ndata = whole_data[whole_data['state'] != 'NaN']","fa07251d":"data.head()","3c2bcfe9":"launched_year = data.launched.dt.year\ndata = data.assign(launched_year = data.launched.dt.year)\ndata.head()","cff587e0":"#Drop the columns that is unnecessary data.\nunnecessary_columns = ['name','usd pledged', 'currency', 'category', 'deadline', 'launched', 'goal', 'pledged'] \ndata.drop(unnecessary_columns, axis=1,inplace=True)","30f8217d":"data.info()","30db48df":"data.head()","f073cc35":"#dummy varriable processing\ndf = pd.get_dummies(data ,drop_first=True, columns=['main_category','country'])","98042bad":"#Label Encoding for Resposibe var\ndf['state'].replace('failed',0, inplace=True)\ndf['state'].replace('successful',1, inplace=True)\ndf.head()","3d2e4572":"df.info()","90fd636c":"#The line is erased, the state is \"canceled\".\ntrain = df[df['state'] != 'live']\ntest = df[df['state'] == 'live']","9320ab3e":"test","b20e037f":"#sub is DataFrame for Output\nsub_list = [test['state']]\nsub = pd.DataFrame(sub_list,index=[test['ID']] ,columns=['state'])","30bb2cc8":"sub","de92052e":"#drop the 'ID'\ntrain = train.drop('ID', axis=1)\ntest = test.drop('ID', axis=1)","f0de4168":"#Split for train data and test data\ny_train = train['state'].astype(float)\nX_train = train.drop('state' , axis=1).astype(float)\nX_test = test.drop('state', axis=1).astype(float)","2a8e0b27":"X_train","68c6111c":"y_train.head()","e9aabfc2":"#I used Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(penalty='l2' ,solver='liblinear')\nclf.fit(X_train, y_train)","6ae57f50":"y_pred = clf.predict(X_test) #Predict the response variable","2771ea93":"y_pred[:20] #Array of the output","c2ba7f88":"#cross validation\n\nfrom sklearn.model_selection import cross_validate\n\n#using cross_validate of sklearn\nscore = cross_validate(clf,X_train,y_train,scoring=None,cv=5, n_jobs=-1)\n\nprint('fit_time',score['fit_time'])\nprint('score_time',score['score_time'])\nprint('test_score',score['test_score'])","c39014de":"sub.info()","2f1366bc":"#Output\nsub['state'] = list(map(int, y_pred))\nsub.to_csv(\"submission.csv\", index = False)","4bb0d1b6":"sub","e8b1fa91":"\n\n# Cross-validation","a7d05ae9":"# Split to train_data and test_data","8b559578":"# Code Description\nThis code is prediction of Projects 'state'. <br>\nOutput is 'state' that is successful or failed.<br>\nAnd I'm using 'ks-projects-201801' data.<br>\nExplanatory variable are backers, usd_pledged_real, usd_goal_real, main_category and country.<br>\nResponse variable is state.\n","49781c5d":"# LogisticRegression","fab997c0":"# Output "}}