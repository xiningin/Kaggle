{"cell_type":{"bb03224d":"code","065590d1":"code","d3097c50":"code","497364c5":"code","85929b16":"code","cb6bad04":"code","8152dad1":"code","d4900cd0":"code","b321f613":"code","a8fb9ea7":"code","0eec72c6":"code","c3450001":"code","6348798f":"code","962d0464":"code","fbc4cf83":"code","2f644ae4":"code","3897bfec":"code","028f4494":"code","711af44f":"code","1350029c":"code","56547d03":"code","db080386":"code","fdaf367a":"code","ea12876a":"code","651a6c33":"code","54f1f1bf":"code","6131cc0b":"code","f2eb5eaf":"code","2e60bc02":"code","b407f258":"code","4be08bd4":"code","04ff6773":"code","ad40d345":"code","593c50ca":"code","12d89db4":"code","602b016d":"code","96cfd267":"code","0d0257b3":"code","a4c04d31":"code","25246613":"code","27e93b9e":"code","4e67c4b3":"code","e9615cd0":"code","b427f343":"code","6b7a6f09":"code","7607b3fb":"code","1c6216cf":"code","93e7338f":"code","cbe3f8cf":"code","4f75397a":"code","fdf856fb":"markdown","2e991007":"markdown","748a976f":"markdown","06c8ab20":"markdown","f082f2f5":"markdown","9c1e150c":"markdown","27dcd9f9":"markdown","7f5aeeff":"markdown","4ce3d363":"markdown","7b1d0255":"markdown","10a19003":"markdown","0f33c6ba":"markdown","a32ad264":"markdown","2c66f64b":"markdown","604e7a3c":"markdown","79113e67":"markdown","b888933e":"markdown","a80e496f":"markdown","230d6541":"markdown","c18f0ecf":"markdown","32cf378b":"markdown","afa747e8":"markdown","74349187":"markdown","78112815":"markdown","18354c99":"markdown","1e24e8e8":"markdown"},"source":{"bb03224d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom copy import copy","065590d1":"stock_df = pd.read_csv (\"..\/input\/stockcsv\/stock.csv\")\nstock_df.head()","d3097c50":"stock_df.describe()","497364c5":"def show_plot (df,fig_title):\n    df.plot (x = 'Date', figsize = (15,8), title = fig_title, linewidth = 2)\n    plt.grid()\n    plt.show()","85929b16":"show_plot (stock_df, 'Raw stock prices (Without Normilization)')","cb6bad04":"stock_df","8152dad1":"def normalized (df):\n    x = df.copy ()\n    for i in x.columns [1:]:\n        x[i] = x[i]\/ x[i][0]\n    return x","d4900cd0":"normalized(stock_df)","b321f613":"show_plot(normalized(stock_df) , 'Normalized the stock price')","a8fb9ea7":"import plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go","0eec72c6":"def interactive_plot (df, title):\n    fig = px.line(title = title)\n    for i in df.columns[1:]:\n        fig.add_scatter (x = df['Date'] ,y = df[i] ,name = i )\n        \n    fig.show()","c3450001":"interactive_plot (stock_df ,\"Prices\")","6348798f":"df = stock_df['sp500']\ndf","962d0464":"df_daily_return = df.copy()\n\nfor j in range (1,len(df)):\n    df_daily_return [j] = ((df[j]-df[j-1]) \/ df[j-1] )* 100\n    \ndf_daily_return [0] = 0\ndf_daily_return","fbc4cf83":"def daily_return (df):\n    df_daily_retun = df.copy()\n    \n    \n    for i in df.columns[1:]:\n        \n        for j in range (1,len(df)):\n            df_daily_retun[i][j] = ((df[i][j] - df[i][j-1]) \/ df[i][j-1]) * 100\n            \n            \n        df_daily_retun[i][0] = 0\n        \n    return df_daily_retun\n    \n    ","2f644ae4":"stock_daily_return = daily_return (stock_df)\nstock_daily_return","3897bfec":"show_plot (stock_daily_return , \"Stock_daily_return\")","028f4494":"interactive_plot(stock_daily_return , \"Interactive_plot\")","711af44f":"cm = stock_daily_return.drop (columns = ['Date']).corr()","1350029c":"plt.figure (figsize = (15,8))\nsns.heatmap (cm,annot = True)","56547d03":"stock_daily_return.hist(figsize =(15,8),bins = 20);","db080386":"df_hist = stock_daily_return.copy()\ndf_hist = df_hist.drop(columns = ['Date']) \n\ndata = []\n\nfor i in df_hist.columns:\n    data.append (stock_daily_return[i].values)\n    \ndata\n\n","fdaf367a":"fig = ff.create_distplot(data,df_hist.columns)\nfig.show()","ea12876a":"np.random.seed (101)\nweights = np.array(np.random.random(9))\nweights","651a6c33":"weights = weights \/ np.sum (weights)\nweights","54f1f1bf":"df_protfolio = normalized(stock_df)\ndf_protfolio\ndf_protfolio.columns [1:]","6131cc0b":"for counter, stock in enumerate (df_protfolio.columns [1:]):\n    df_protfolio[stock] = df_protfolio [stock] * weights[counter]\n    df_protfolio [stock] = df_protfolio [stock]*1000000\n    \ndf_protfolio","f2eb5eaf":"weights","2e60bc02":"def portfolio_allocation (df,weights):\n    df_protfolio = df.copy()\n    df_protfolio = normalized(df_protfolio)\n    \n    for counter, stock in enumerate (df_protfolio.columns [1:]):\n        df_protfolio[stock] = df_protfolio [stock] * weights[counter]\n        df_protfolio [stock] = df_protfolio [stock]*1000000\n        \n    df_protfolio ['Portfolio daily Worth $'] = df_protfolio [df_protfolio != 'Date'].sum(axis = 1)\n    \n    df_protfolio ['Daily % Return'] = 0.0000\n    \n    for i in range (1,len(stock_df)):\n        df_protfolio ['Daily % Return'][i] = ( ( df_protfolio ['Portfolio daily Worth $'][i] -  df_protfolio ['Portfolio daily Worth $'][i-1])\n                                              \/  df_protfolio ['Portfolio daily Worth $'][i-1]) * 100\n        \n        \n        \n    df_protfolio ['Daily % Return'][0] = 0\n    \n    return df_protfolio\n    ","b407f258":"df_protfolio = portfolio_allocation(stock_df , weights)\ndf_protfolio","4be08bd4":"fig = px.line (x= df_protfolio.Date , y = df_protfolio['Daily % Return'] , title = 'Portfolio Daily % Return')\nfig.show()","04ff6773":"interactive_plot(df_protfolio.drop (['Portfolio daily Worth $','Daily % Return'] , axis = 1),title = 'Portfolio Individule Stock  Worth in $ Overtime ')","ad40d345":"fig = px.histogram (df_protfolio,x = \"Daily % Return\")\nfig.show()","593c50ca":"fig = px.line(x = df_protfolio['Date'], y = df_protfolio['Portfolio daily Worth $'], title = 'Portfolio Overall Worth in $')\nfig.show()","12d89db4":"df_protfolio ","602b016d":"df_protfolio ['Portfolio daily Worth $'][-1:]","96cfd267":"cummulative_return = ((df_protfolio['Portfolio daily Worth $'][-1:] - df_protfolio ['Portfolio daily Worth $'][0]) \/ df_protfolio ['Portfolio daily Worth $'][0]) * 100\nprint(cummulative_return)","0d0257b3":"stnd_div = df_protfolio['Daily % Return'].std()\nstnd_div","a4c04d31":"average = df_protfolio['Daily % Return'].mean()\naverage","25246613":"sharp_ratio = (average \/ stnd_div) * np.sqrt(252)\nsharp_ratio","27e93b9e":"stock_df","4e67c4b3":"stock_daily_return['sp500']","e9615cd0":"## Fit a Polinomial line b2in selected stock price and sp500\nbeta,alpha = np.polyfit (stock_daily_return['AAPL'] , stock_daily_return ['sp500'] , 1)\nbeta,alpha\n\n","b427f343":"# Lets get plot on scatter plot and straight line plot\nstock_daily_return.plot (kind = 'scatter' , x = 'sp500' , y = 'AAPL')\n## Straight Line equation y = beta * rm + alpha\nplt.plot(stock_daily_return['sp500'],beta * stock_daily_return['sp500'] + alpha , '-' , color = 'g')","6b7a6f09":"# Lets calculate the annualize rate of return on s&p500\n# Note that out of 365 days, stock exchange are close for  113 days due to  holiday and weekend \nrm = stock_daily_return ['sp500'].mean() * 252\nrm","7607b3fb":"# Assume the risk free rate is 0\n# Also we can take 10 years US govt bond for  risk free rate\nrf = 0\n# Calculate  return for any security (APPL) using CAPM\nER_AAPL = rf + (beta * (rm - rf))\nER_AAPL","1c6216cf":"beta = {}\nalpha = {}\nfor i in stock_daily_return.columns:\n    if i != 'Date' and i != 'sp500':\n        \n        stock_daily_return.plot (kind = 'scatter', x = 'sp500', y = i )\n        b,a = np.polyfit(stock_daily_return['sp500'] , stock_daily_return [i] , 1)\n        plt.plot (stock_daily_return['sp500'], b * stock_daily_return['sp500'] + a , '-' , color = 'red')\n        \n        beta[i] = b\n        alpha[i] = a\n        \n        plt.show()","93e7338f":"### Lets view beta for every stock\nbeta","cbe3f8cf":"### Lets view alpha for every stock\nalpha","4f75397a":"for i in stock_daily_return.columns:\n    if i != 'Date' and i != 'sp500':\n        \n        fig = px.scatter (stock_daily_return,x = 'sp500', y = i , title = i)\n        b,a = np.polyfit(stock_daily_return['sp500'], stock_daily_return[i], 1)\n        fig.add_scatter (x = stock_daily_return['sp500'] , y = b * stock_daily_return['sp500'] + a)\n        fig.show()","fdf856fb":"### Perform the Random asset allocation and Calculate the Portfolio of Daily Return","2e991007":"### Plot the Histrogram on Daily Return","748a976f":"### Calculate the correlation of Daily Return ","06c8ab20":"### Plot of daily visulation","f082f2f5":"## Calculate the Portfolio Standard Deviation","9c1e150c":"### print Out Histogram and Daily return","27dcd9f9":"### Calculate multiple stock daily return","7f5aeeff":"### using the plotly express , plot, interactive the plot showing s&p500 vs every stock\n### plot the best fil straight line for alpha and bita value","4ce3d363":"## Calculate the Average Daily Return","7b1d0255":"### Perform the interactive data","10a19003":"# Calculate Portfolio Statistical Metrics(Cummulative Return, Sharp Ratio and Average Daily Return)","0f33c6ba":"## Calculate the Sharp Ratio ","a32ad264":"## Cummulative Return of the Portfolio","2c66f64b":"### Normalizes the Data","604e7a3c":"#### Create the Weight Normalize The stock values****","79113e67":"### Calculate indivudal stock daily return","b888933e":"### Plot the Data","a80e496f":"# Capital Asset Pricing Model","230d6541":"## Return the code with various value and  Visulize the final value","c18f0ecf":"### Portfolio allocation = Daily Return\/ Worth Calculation","32cf378b":"## CALCULATE BETA FOR ALL STOCKS","afa747e8":"### Understanding the Capital Asset Pricing Model (CAPM)\nThe formula for calculating the expected return of an asset given its risk is as follows:\n\n\\begin{aligned} &ER_i = R_f + \\beta_i ( ER_m - R_f ) \\\\ &\\textbf{where:} \\\\ &ER_i = \\text{expected return of investment} \\\\ &R_f = \\text{risk-free rate} \\\\ &\\beta_i = \\text{beta of the investment} \\\\ &(ER_m - R_f) = \\text{market risk premium} \\\\ \\end{aligned} \n\u200b\t  \nER \ni\n\u200b\t =R \nf\n\u200b\t +\u03b2 \ni\n\u200b\t (ER \nm\n\u200b\t \u2212R \nf\n\u200b\t )\nwhere:\nER \ni\n\u200b\t =expected return of investment\nR \nf\n\u200b\t =risk-free rate\n\u03b2 \ni\n\u200b\t =beta of the investment\n(ER \nm\n\u200b\t \u2212R \nf\n\u200b\t )=market risk premium\n\u200b\t\n","74349187":"## Apply CAPM formula in individual stock ","78112815":"## Perform Portfolio Data Visulization","18354c99":"#### Note that enumarate return the values","1e24e8e8":"### plot of all stocks"}}