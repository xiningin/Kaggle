{"cell_type":{"8355e104":"code","bc9a0c87":"code","fa407e61":"code","5c53a203":"code","8f5aa697":"code","286fce57":"code","243b7671":"markdown","6fd9f935":"markdown","c107c94c":"markdown","397f848f":"markdown","45fe1ebd":"markdown","78de7587":"markdown"},"source":{"8355e104":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# CONFIRMED\n\ndf_confirmed = pd.read_csv('https:\/\/github.com\/CSSEGISandData\/COVID-19\/raw\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\n\ndf_confirmed.drop(columns=['Province\/State', 'Lat', 'Long'], inplace=True)\ndf_confirmed = df_confirmed.groupby(['Country\/Region']).sum()\ndf_confirmed.columns = pd.to_datetime(df_confirmed.columns)\n\ndf_confirmed_daily = df_confirmed - df_confirmed.shift(1, axis=1, fill_value=0)\ndf_confirmed_daily_moving = df_confirmed_daily.rolling(window=7, axis=1).mean()\n\n# DEATHS\n\ndf_deaths = pd.read_csv('https:\/\/github.com\/CSSEGISandData\/COVID-19\/raw\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\ndf_deaths.drop(columns=['Province\/State', 'Lat', 'Long'], inplace=True)\ndf_deaths = df_deaths.groupby(['Country\/Region']).sum()\ndf_deaths.columns = pd.to_datetime(df_deaths.columns)\n\ndf_deaths_daily = df_deaths - df_deaths.shift(1, axis=1, fill_value=0)\ndf_deaths_daily_moving = df_deaths_daily.rolling(window=7, axis=1).mean()\n\n# RECOVERED\n\ndf_recovered = pd.read_csv('https:\/\/github.com\/CSSEGISandData\/COVID-19\/raw\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\n\ndf_recovered.drop(columns=['Province\/State', 'Lat', 'Long'], inplace=True)\ndf_recovered = df_recovered.groupby(['Country\/Region']).sum()\ndf_recovered.columns = pd.to_datetime(df_recovered.columns)\n\ndf_recovered_daily = df_recovered - df_recovered.shift(1, axis=1, fill_value=0)\ndf_recovered_daily_moving = df_recovered_daily.rolling(window=7, axis=1).mean()","bc9a0c87":"plt.figure(figsize=(16, 6))\n\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Cases', fontsize=16)\nplt.title('Covid-19 confirmed cases (US, India, Brazil)', fontsize=16)\n\nplt.plot(df_confirmed_daily_moving.loc['US'])\nplt.plot(df_confirmed_daily_moving.loc['India'])\nplt.plot(df_confirmed_daily_moving.loc['Brazil'])\n\nplt.legend(['US', 'India', 'Brazil'])\n\nplt.show()","fa407e61":"country = 'US'\nnfeatures = 1\nnsteps = 7\n\nfeature_1 = df_confirmed_daily.loc[country]\n\ndataset = np.column_stack([feature_1])\n\ndata_len = len(dataset[:, 0])\ntrain_len = int(0.8 * data_len)\ntest_len = data_len - train_len\n\ntrain_data = dataset[:train_len, :]\ntest_data = dataset[train_len:, :]\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0, 1))\n\ntrain_data = scaler.fit_transform(train_data)\ntest_data = scaler.transform(test_data)\n\ntrain_x = np.array([train_data[i - nsteps:i, :] for i in range(nsteps, train_len)])\ntrain_y = np.array([train_data[i, 0] for i in range(nsteps, train_len)])\n\ntest_x = np.array([test_data[i - nsteps:i, :] for i in range(nsteps, test_len)])\ntest_y = np.array([test_data[i, 0] for i in range(nsteps, test_len)])","5c53a203":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\n\nmodel = Sequential([\n    LSTM(units=50, input_shape=(nsteps, nfeatures), return_sequences=True),\n    LSTM(units=50),\n    Dense(units=25),\n    Dense(units=nfeatures)\n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\nmodel.fit(x=train_x, y=train_y, batch_size=1, epochs=5)\n\npredictions = model.predict(test_x)\npredictions = scaler.inverse_transform(predictions)","8f5aa697":"plt.figure(figsize=(16, 8))\n\nplt.title(f'Covid-19 confirmed cases of {country}', fontsize=18)\n\ntime_series = feature_1\ntrain_time_series = time_series.iloc[0:train_len]\ntest_time_series = time_series.iloc[train_len:]\npred_time_series = pd.Series(data=predictions[:, 0], index=test_time_series.index[nsteps:])\n\nplt.plot(train_time_series)\nplt.plot(test_time_series)\nplt.plot(pred_time_series)\n\nplt.legend(['train', 'test', 'pred'])\n\nplt.show()","286fce57":"print(f'Prediction of tomorrow is {int(predictions[-1, 0])}')","243b7671":"### Prediction of tomorrow","6fd9f935":"### Preprocessing stage","c107c94c":"### Plot the results","397f848f":"### Training stage","45fe1ebd":"### Let's plot the data","78de7587":"### Fetch the data and construct the data frames"}}