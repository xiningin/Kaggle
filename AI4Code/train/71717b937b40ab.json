{"cell_type":{"bb2a92fe":"code","fc8ab39a":"code","1b58deca":"code","6e0f0c12":"code","873127dd":"code","40b6a0fe":"code","a47538ca":"code","75b8d107":"code","7022951c":"code","7fd7f548":"code","a88c0160":"code","d958c128":"code","b4711850":"code","47c9316f":"code","ad1d5f58":"code","e2757baa":"code","1653901e":"code","387cf6bb":"code","56a41663":"code","f0ce5d4f":"code","13dc4aaa":"code","718cb5da":"code","0a57733b":"code","a5a55382":"code","542e16a2":"code","10b05ad0":"code","ac32e28a":"code","cac7403a":"markdown","5d1fbed2":"markdown"},"source":{"bb2a92fe":"# Importing packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras import models\nfrom keras import layers\nfrom keras import regularizers\nfrom keras.datasets import mnist\n\n# loading train and test csv files\ndf_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n","fc8ab39a":"# Check training data structure\ndf_train.head()","1b58deca":"# shape of train and test data\nprint(\"Dimension of Train Data: {}\".format(df_train.shape))\nprint(\"Dimension of Test Data : {}\".format(df_test.shape))","6e0f0c12":"df_train.info()","873127dd":"# Split train data into pixels and labels\ntrain_images1 = df_train.drop(\"label\", axis=1)\ntrain_labels1 = pd.DataFrame(df_train[\"label\"])\n\n# test data only contains pixels no labels\ntest_images1 = df_test\n\n# Check the dimension of train images and test images dataset\nprint(\"Dimension train images1:{} \".format(train_images1.shape))\nprint(\"Dimension train labels1:{} \".format(train_labels1.shape)+'\\n')\nprint(\"Dimension test images1:{} \".format(test_images1.shape))","40b6a0fe":"# Now loading MNIST data from Keras package as well\n(train_images2, train_labels2), (test_images2, test_labels2) = mnist.load_data()","a47538ca":"#Check dimension of loaded data from mnist\nprint(\"Shape of train images2:{}\".format(train_images2.shape))\nprint(\"Shape of train labels2:{}\".format(train_labels2.shape)+'\\n')\nprint(\"Shape of test images2:{}\".format(test_images2.shape))\nprint(\"Shape of test labels2:{}\".format(test_labels2.shape))","75b8d107":"## Data manipulation on Keras mnist dataset\ntrain_images2 = train_images2.reshape((60000, 28 * 28))\ntest_images2 = test_images2.reshape((10000, 28 * 28))\n\ntest_cnn = df_test.to_numpy()\ntest_cnn = test_cnn.reshape((28000,28,28,1))\n\nprint(\"Shape of train images2:{}\".format(train_images2.shape))\nprint(\"Shape of test images2:{}\".format(test_images2.shape))","7022951c":"#converting train_images2 & test_images2 into DataFrame\ntrain_images2 = pd.DataFrame(train_images2, columns= train_images1.columns)\ntrain_labels2 = pd.DataFrame(train_labels2, columns= [\"label\"])\n\ntest_images2  = pd.DataFrame(test_images2, columns= train_images1.columns)\ntest_labels2  = pd.DataFrame(test_labels2, columns= [\"label\"])\n\n# Appending train data and train labels with MNIST dataset loaded using keras \ntrain_images = train_images2.append(test_images2, ignore_index = True)\ntrain_labels = train_labels2.append(test_labels2, ignore_index =True)\n\ntrain_images = train_images.append(train_images1, ignore_index = True)\ntrain_labels = train_labels.append(train_labels1, ignore_index =True)\n\nprint(\"Shape of train images: {}\".format(train_images.shape))\nprint(\"Shape of train labels: {}\".format(train_labels.shape)+'\\n')","7fd7f548":"# Normalizing train and test data\ntrain_images = train_images\/255\ntest_images1 = test_images1\/255\n\n# Categorical encoding for labels\nfrom keras.utils import to_categorical\ntrain_labels = to_categorical(train_labels)\n","a88c0160":"# Creating Neural network type and adding layers\nmodel = models.Sequential()\nmodel.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\nmodel.add(layers.Dense(10, activation='softmax'))\n\n#Compile model\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","d958c128":"#Train your neural network model\nhistory = model.fit(train_images, train_labels, \n                    epochs=20, \n                    batch_size=128, \n                    validation_split=0.05)","b4711850":"# list all data in history\nprint(history.history.keys())","47c9316f":"# summarize history for accuracy\nimport matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","ad1d5f58":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","e2757baa":"# Now predicting on test data in sample_submission format\nsq_pred_labels = model.predict(df_test)\n\n# This step will decode one_hot_encode and give prediction by digits\nsq_pred_labels = np.argmax(sq_pred_labels, axis = 1)\nsq_pred_labels = pd.DataFrame(sq_pred_labels,columns=[\"Label\"])\n\n# Index column to start from 1\nsq_pred_labels.index = np.arange(1, len(sq_pred_labels)+1)\n\n# Assign Index column name\nsq_pred_labels.index.name = \"ImageId\"","1653901e":"# Getting model prediction into csv file\nsq_pred_labels.to_csv('\/kaggle\/working\/sq_pred.csv')","387cf6bb":"#Since convolutional neural network takes images in 2D channels form. So need to reshape train data again\n#Train Data reshaping for CNN\ntrain_images_cnn = train_images.to_numpy()\ntrain_images_cnn = train_images_cnn.reshape((112000,28,28,1))","56a41663":"# Creating convolutional nueral network architecture\nCNN_model = models.Sequential()\n\nCNN_model.add(layers.Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(28,28,1),padding='same'))\nCNN_model.add(layers.MaxPooling2D((2, 2),padding='same'))\n\nCNN_model.add(layers.Conv2D(64, (3, 3), activation='linear',padding='same'))\nCNN_model.add(layers.MaxPooling2D(pool_size=(2, 2),padding='same'))\n\nCNN_model.add(layers.Conv2D(64, (3, 3), activation='linear',padding='same'))\nCNN_model.add(layers.MaxPooling2D(pool_size=(2, 2),padding='same'))\n\nCNN_model.add(layers.Flatten())\nCNN_model.add(layers.Dense(512, kernel_regularizer=regularizers.l1_l2(l1 = 0.001, l2=0.01), activation='relu'))\nCNN_model.add(layers.Dropout(rate = 0.4))\nCNN_model.add(layers.Dense(10, kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.01), activation='softmax'))","f0ce5d4f":"from keras.optimizers import RMSprop\n\nopt = RMSprop(learning_rate=0.0001)\n\n# Compile model\nCNN_model.compile(optimizer= opt,\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","13dc4aaa":"#Train your neural network model\nhistory_cnn = CNN_model.fit(train_images_cnn, train_labels, \n                            epochs=50, \n                            batch_size=64, \n                            validation_split=0.1)","718cb5da":"# list all data in history\nprint(history_cnn.history.keys())","0a57733b":"# summarize history for accuracy\nimport matplotlib.pyplot as plt\nplt.plot(history_cnn.history['accuracy'])\nplt.plot(history_cnn.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","a5a55382":"# summarize history for loss\nplt.plot(history_cnn.history['loss'])\nplt.plot(history_cnn.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","542e16a2":"test_cnn = df_test.to_numpy()\ntest_cnn = test_cnn.reshape((28000,28,28,1))","10b05ad0":"# Now predicting on test data in sample_submission format\ncnn_pred_labels = CNN_model.predict(test_cnn)\n\n# This step will decode one_hot_encode and give prediction by digits\ncnn_pred_labels = np.argmax(cnn_pred_labels, axis = 1)\ncnn_pred_labels = pd.DataFrame(cnn_pred_labels,columns=[\"Label\"])\n\n# Index column to start from 1\ncnn_pred_labels.index = np.arange(1, len(cnn_pred_labels)+1)\n\n# Assign Index column name\ncnn_pred_labels.index.name = \"ImageId\"","ac32e28a":"# Getting CNN preiction into csv file\ncnn_pred_labels.to_csv('\/kaggle\/working\/cnn_pred.csv')","cac7403a":"**Model 2: Convolutional Nueral Network Model**","5d1fbed2":"**Model 1**: **Sequential Neural Network Model using Dense layers**"}}