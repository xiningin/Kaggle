{"cell_type":{"856a9c0e":"code","11a9825d":"code","cd02c59f":"code","c562db0d":"code","a40e035a":"code","32771ad2":"code","3bad4ac4":"code","531b2ea2":"code","0a710365":"code","071588e7":"code","44a42789":"code","a9b4b567":"code","66405d25":"markdown"},"source":{"856a9c0e":"from __future__ import print_function\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.layers.recurrent import LSTM\nfrom keras.models import Sequential\nfrom sklearn.model_selection import  train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nimport math\n\n# to not display the warnings of tensorflow\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL']='2'","11a9825d":"# parameters to be set (\"optimum\" hyperparameters obtained from grid search):\nlook_back = 7\nepochs = 1000\nbatch_size = 32","cd02c59f":"# fix random seed for reproducibility\nnp.random.seed(7)\n\n# read all prices using panda\nprices_dataset =  pd.read_csv('..\/input\/prices-split-adjusted.csv', header=0)\n\n# filter out only data of Apple\napple = prices_dataset[prices_dataset['symbol']=='AAPL']\n\n# save Apple's stock values as type of floating point number\napple_stock_prices = apple.close.values.astype('float32')","c562db0d":"# reshape to column vector\napple_stock_prices = apple_stock_prices.reshape(len(apple_stock_prices), 1)\n\n# normalize the dataset\nscaler = MinMaxScaler(feature_range=(0, 1))\napple_stock_prices = scaler.fit_transform(apple_stock_prices)","a40e035a":"# split data into training set and test set\ntrain_size = int(len(apple_stock_prices) * 0.67)\ntest_size = len(apple_stock_prices) - train_size\ntrain, test = apple_stock_prices[0:train_size,:], apple_stock_prices[train_size:len(apple_stock_prices),:]\n\nprint('Split data into training set and test set... Number of training samples\/ test samples:', len(train), len(test))","32771ad2":"# convert an array of values into a time series dataset \n# in form \n#                     X                     Y\n# t-look_back+1, t-look_back+2, ..., t     t+1\n\ndef create_dataset(dataset, look_back):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-look_back-1):\n\t\ta = dataset[i:(i+look_back), 0]\n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + look_back, 0])\n\treturn np.array(dataX), np.array(dataY)\n\n# convert Apple's stock price data into time series dataset\ntrainX, trainY = create_dataset(train, look_back)\ntestX, testY = create_dataset(test, look_back)\n\n# reshape input of the LSTM to be format [samples, time steps, features]\ntrainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1], 1))\ntestX = np.reshape(testX, (testX.shape[0], testX.shape[1], 1))","3bad4ac4":"# create and fit the LSTM network\nmodel = Sequential()\nmodel.add(LSTM(4, input_shape=(look_back, 1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='adam')\nmodel.fit(trainX, trainY, nb_epoch=epochs, batch_size=batch_size)","531b2ea2":"\n# make predictions\ntrainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)","0a710365":"# invert predictions and targets to unscaled\ntrainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])","071588e7":"# calculate root mean squared error\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","44a42789":"# shift predictions of training data for plotting\ntrainPredictPlot = np.empty_like(apple_stock_prices)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict\n\n# shift predictions of test data for plotting\ntestPredictPlot = np.empty_like(apple_stock_prices)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(trainPredict)+(look_back*2)+1:len(apple_stock_prices)-1, :] = testPredict","a9b4b567":"# plot baseline and predictions\nplt.plot(scaler.inverse_transform(apple_stock_prices))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","66405d25":"Predict the stock price of the company Apple Inc."}}