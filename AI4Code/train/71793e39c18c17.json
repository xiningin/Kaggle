{"cell_type":{"b4348f52":"code","47a914d1":"code","7540a143":"code","95e3f7ec":"code","14266415":"code","0aff5759":"code","7f907caa":"code","8eb826ea":"code","b4844357":"code","ac8ba48d":"code","12e71547":"code","1e1d2cf9":"code","281b2a3f":"code","4ae19e36":"code","169dd1f2":"code","832d3684":"code","ca64437e":"code","f9f8346d":"code","a208eee0":"code","0136d39c":"code","e649c7f8":"markdown","25706794":"markdown","f68159c5":"markdown","06aad09a":"markdown","91d1d93f":"markdown","e3e65596":"markdown","3c764d44":"markdown","0225b4c8":"markdown","2f6a624b":"markdown","59b4b9fa":"markdown","3048c3fe":"markdown","0d7bbc4c":"markdown","d7d367fe":"markdown","90e15a89":"markdown","31a25211":"markdown","11fb34cc":"markdown","cd8660bd":"markdown","9d6086f7":"markdown","af4f2cb3":"markdown","2443595f":"markdown","b237a37f":"markdown"},"source":{"b4348f52":"!pip install calplot","47a914d1":"import pandas as pd\nimport numpy as np\nimport gc\n\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")","7540a143":"def cat_column_info(column):\n    num_categories = train[column].nunique()\n    print(\"------> {} <------\".format(column))\n    print(\"--: train - type {}\".format(train[column].dtype))\n    print(\"--: test  - type {}\".format(test[column].dtype))\n    print(\"--: train - # categories {}\".format(train[column].nunique()))\n    print(\"--: test  - # categories {}\".format(test[column].nunique()))\n    if num_categories < 10:\n        if train[column].dtype == \"int64\":\n            print(\"--: train - values {}\".format(np.sort(train[column].unique())))\n            print(\"--: test  - values {}\".format(np.sort(test[column].unique())))\n        else:\n            print(\"--: train - values {}\".format(train[column].unique()))\n            print(\"--: test  - values {}\".format(test[column].unique()))\n    print(\"--: train - NaN count {}\".format(train[column].isnull().values.sum()))\n    print(\"--: test  - NaN count {}\".format(test[column].isnull().values.sum()))\n    print(\"--: train - max value {}\".format(train[column].max()))\n    print(\"--: test  - max value {}\".format(test[column].max()))\n    print(\"--: train - min value {}\".format(train[column].min()))\n    print(\"--: test  - min value {}\".format(test[column].min()))\n    print(\"\")\n\nprint(\": Train shape {}\".format(train.shape))\nprint(\": Test shape {}\".format(test.shape))\nprint(\"\")","95e3f7ec":"features = ['date', 'country', 'store', 'product']\n\nfor feature in features:\n    cat_column_info(feature)","14266415":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')\nsns_params = {\"palette\": \"bwr_r\"}\n\n# Count the number of null values that occur in each row\ntrain[\"null_count\"] = train.isnull().sum(axis=1)\n\n# Group the null counts\ncounts = train.groupby(\"null_count\")[\"num_sold\"].count().to_dict()\nnull_data = {\"{} Null Value(s)\".format(k) : v for k, v in counts.items() if k < 6}\n\n# Plot the null count results\npie, ax = plt.subplots(figsize=[5, 5])\ncolors = sns.color_palette(\"bwr_r\")[0:5]\nplt.pie(x=null_data.values(), autopct=\"%.2f%%\", explode=[0.05]*len(null_data.keys()), labels=null_data.keys(), pctdistance=0.5, colors=colors)\n_ = plt.title(\"Percentage of Null Values Per Row (Train Data)\", fontsize=14)","0aff5759":"# Count the number of null values that occur in each row\ntest[\"null_count\"] = test.isnull().sum(axis=1)\n\n# Group the null counts\ncounts = test.groupby(\"null_count\")[\"null_count\"].count().to_dict()\nnull_data = {\"{} Null Value(s)\".format(k) : v for k, v in counts.items() if k < 6}\n\n# Plot the null count results\npie, ax = plt.subplots(figsize=[5, 5])\nplt.pie(x=null_data.values(), autopct=\"%.2f%%\", explode=[0.05]*len(null_data.keys()), labels=null_data.keys(), pctdistance=0.5, colors=colors)\n_ = plt.title(\"Percentage of Null Values Per Row (Test Data)\", fontsize=14)","7f907caa":"print(\": Training dates: {:,d} unique dates\".format(train[\"date\"].nunique()))\nprint(\": Testing dates: {:,d} unique dates\".format(test[\"date\"].nunique()))","8eb826ea":"train[\"date\"]= pd.to_datetime(train[\"date\"])\ntest[\"date\"]= pd.to_datetime(test[\"date\"])","b4844357":"import calplot\n\ntrain.groupby(\"date\")[\"row_id\"].count()\n_ = calplot.calplot(\n    train.groupby(\"date\")[\"row_id\"].count(), \n    vmin=0, \n    vmax=18, \n    colorbar=True, \n    suptitle=\"Training Set - Number of Samples Per Day\",\n    suptitle_kws=dict(fontsize=20),\n)","ac8ba48d":"_ = calplot.calplot(\n    test.groupby(\"date\")[\"row_id\"].count(), \n    vmin=0, \n    vmax=18, \n    colorbar=True, \n    suptitle=\"Testing Set - Number of Samples Per Day\",\n    suptitle_kws=dict(fontsize=20),\n)","12e71547":"for country in [\"Finland\", \"Norway\", \"Sweden\"]:\n    df = pd.DataFrame(train[(train[\"country\"] == country)])\n    df[\"date1\"] = df[\"date\"]\n    df.set_index(df[\"date\"], inplace=True)\n    df = df.groupby(\"date1\")[\"num_sold\"].sum()\n\n    _ = calplot.calplot(\n        df, \n        colorbar=True, \n        linewidth=0,\n        edgecolor=\"black\",\n        linecolor=\"w\",\n        suptitle=\"Total Products Sold per Day in {}\".format(country),\n        suptitle_kws=dict(fontsize=20),\n    )","1e1d2cf9":"import datetime\nfrom matplotlib.lines import Line2D\n\nax = plt.subplots(figsize=[20, 10])\nsweden_sales = pd.DataFrame(train[(train[\"country\"] == \"Sweden\")])\nsweden_sales[\"date1\"] = sweden_sales[\"date\"]\nsweden_sales.set_index(sweden_sales[\"date\"], inplace=True)\nsweden_sales = sweden_sales.groupby(\"date1\")[\"num_sold\"].sum()\nax = sns.lineplot(data=sweden_sales)\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Total Number of Sales for All Sweden Kaggle Stores vs Holidays\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nsale_line = Line2D([], [], color=sns.color_palette()[0], label=\"All Sales, All Stores\")\n_ = plt.legend(handles=[easter_line, christmas_line, whit_sunday_line, sale_line])","281b2a3f":"ax = plt.subplots(figsize=[20, 10])\nfinland_sales = pd.DataFrame(train[(train[\"country\"] == \"Finland\")])\nfinland_sales[\"date1\"] = finland_sales[\"date\"]\nfinland_sales.set_index(finland_sales[\"date\"], inplace=True)\nfinland_sales = finland_sales.groupby(\"date1\")[\"num_sold\"].sum()\nax = sns.lineplot(data=finland_sales)\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Total Number of Sales for All Finland Kaggle Stores vs Holidays\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nsale_line = Line2D([], [], color=sns.color_palette()[0], label=\"All Sales, All Stores\")\n_ = plt.legend(handles=[easter_line, christmas_line, whit_sunday_line, sale_line])","4ae19e36":"ax = plt.subplots(figsize=[20, 10])\nnorway_sales = pd.DataFrame(train[(train[\"country\"] == \"Norway\")])\nnorway_sales[\"date1\"] = norway_sales[\"date\"]\nnorway_sales.set_index(norway_sales[\"date\"], inplace=True)\nnorway_sales = norway_sales.groupby(\"date1\")[\"num_sold\"].sum()\nax = sns.lineplot(data=norway_sales)\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 6500, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 6500, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 6500, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Total Number of Sales for All Norway Kaggle Stores vs Holidays\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nsale_line = Line2D([], [], color=sns.color_palette()[0], label=\"All Sales, All Stores\")\n_ = plt.legend(handles=[easter_line, christmas_line, whit_sunday_line, sale_line])","169dd1f2":"ax = plt.subplots(figsize=[20, 10])\nsales = pd.DataFrame(train[(train[\"country\"] == \"Norway\") & (train[\"store\"] == \"KaggleMart\")])\nax = sns.lineplot(data=sales, x=\"date\", y=\"num_sold\", hue=\"product\")\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Product Sales for Norway KaggleMart by Product\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\nlegend_handles, legend_labels = plt.gca().get_legend_handles_labels()\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nquarter_line = Line2D([], [], color=\"gray\", linestyle=\":\", label=\"Quarter End \/ Start\")\nlegend_handles.extend([easter_line, christmas_line, whit_sunday_line, quarter_line])\n_ = plt.legend(handles=legend_handles)","832d3684":"ax = plt.subplots(figsize=[20, 10])\nsales = pd.DataFrame(train[(train[\"country\"] == \"Norway\") & (train[\"store\"] == \"KaggleRama\")])\nax = sns.lineplot(data=sales, x=\"date\", y=\"num_sold\", hue=\"product\")\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Product Sales for Norway KaggleRama by Product\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\nlegend_handles, legend_labels = plt.gca().get_legend_handles_labels()\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nquarter_line = Line2D([], [], color=\"gray\", linestyle=\":\", label=\"Quarter End \/ Start\")\nlegend_handles.extend([easter_line, christmas_line, whit_sunday_line, quarter_line])\n_ = plt.legend(handles=legend_handles)","ca64437e":"ax = plt.subplots(figsize=[20, 10])\nsales = pd.DataFrame(train[(train[\"country\"] == \"Sweden\") & (train[\"store\"] == \"KaggleMart\")])\nax = sns.lineplot(data=sales, x=\"date\", y=\"num_sold\", hue=\"product\")\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Product Sales for Sweden KaggleMart by Product\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\nlegend_handles, legend_labels = plt.gca().get_legend_handles_labels()\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nquarter_line = Line2D([], [], color=\"gray\", linestyle=\":\", label=\"Quarter End \/ Start\")\nlegend_handles.extend([easter_line, christmas_line, whit_sunday_line, quarter_line])\n_ = plt.legend(handles=legend_handles)","f9f8346d":"ax = plt.subplots(figsize=[20, 10])\nsales = pd.DataFrame(train[(train[\"country\"] == \"Sweden\") & (train[\"store\"] == \"KaggleRama\")])\nax = sns.lineplot(data=sales, x=\"date\", y=\"num_sold\", hue=\"product\")\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Product Sales for Sweden KaggleRama by Product\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\nlegend_handles, legend_labels = plt.gca().get_legend_handles_labels()\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nquarter_line = Line2D([], [], color=\"gray\", linestyle=\":\", label=\"Quarter End \/ Start\")\nlegend_handles.extend([easter_line, christmas_line, whit_sunday_line, quarter_line])\n_ = plt.legend(handles=legend_handles)","a208eee0":"ax = plt.subplots(figsize=[20, 10])\nsales = pd.DataFrame(train[(train[\"country\"] == \"Finland\") & (train[\"store\"] == \"KaggleMart\")])\nax = sns.lineplot(data=sales, x=\"date\", y=\"num_sold\", hue=\"product\")\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Product Sales for Finland KaggleMart by Product\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\nlegend_handles, legend_labels = plt.gca().get_legend_handles_labels()\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nquarter_line = Line2D([], [], color=\"gray\", linestyle=\":\", label=\"Quarter End \/ Start\")\nlegend_handles.extend([easter_line, christmas_line, whit_sunday_line, quarter_line])\n_ = plt.legend(handles=legend_handles)","0136d39c":"ax = plt.subplots(figsize=[20, 10])\nsales = pd.DataFrame(train[(train[\"country\"] == \"Finland\") & (train[\"store\"] == \"KaggleRama\")])\nax = sns.lineplot(data=sales, x=\"date\", y=\"num_sold\", hue=\"product\")\nax.grid(False)\n_ = plt.axvline(datetime.date(2015, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2016, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2017, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 1, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 7, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2018, 10, 1), 0, 1250, color=\"gray\", linestyle=\":\")\n_ = plt.axvline(datetime.date(2015, 4, 5), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 5, 24), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2015, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 3, 27), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 5, 15), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2016, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 4, 16), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2017, 6, 4), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 4, 1), 0, 1250, color=\"red\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 5, 20), 0, 1250, color=\"purple\", linestyle=\"--\")\n_ = plt.axvline(datetime.date(2018, 12, 25), 0, 1250, color=\"green\", linestyle=\"--\")\n_ = ax.set_title(\"Product Sales for Finland KaggleRama by Product\", fontsize=15)\n_ = ax.set_ylabel(\"Number Sold\", fontsize=15)\n_ = ax.set_xlabel(\"Date\", fontsize=15)\nlegend_handles, legend_labels = plt.gca().get_legend_handles_labels()\neaster_line = Line2D([], [], color=\"red\", linestyle=\"--\", label=\"Easter\")\nchristmas_line = Line2D([], [], color=\"green\", linestyle=\"--\", label=\"Christmas\")\nwhit_sunday_line = Line2D([], [], color=\"purple\", linestyle=\"--\", label=\"Whit Sunday\")\nquarter_line = Line2D([], [], color=\"gray\", linestyle=\":\", label=\"Quarter End \/ Start\")\nlegend_handles.extend([easter_line, christmas_line, whit_sunday_line, quarter_line])\n_ = plt.legend(handles=legend_handles)","e649c7f8":"# 2 Features\n\n### 2.1 Feature Overview\n\nLet's take a superficial dive into the columns for a moment to see what we are dealing with.","25706794":"# 1 Introduction\n\nThis EDA explores the data available for the Tabular Playground Series - January 2022 competition. Simple data exploration is performed, as well as preliminary modeling.","f68159c5":"As we can see here, in Sweden, sales bumps occur for:\n    \n* Easter\n* Christmas - followed by a similar bump in New Year's Day\n* Whit Sunday - although only in 2016 and 2017\n\nLet's see if these extend to Finland:","06aad09a":"A few observations here that may be useful:\n\n* The `date` ranges between the training set and the testing set are non-overlapping. The maximum `date` in the training set is _December 31, 2018_, while the minimum date in the testing set is _January 1, 2019_. This is important, as it means we are making predictions purely into the future - i.e. there is no interleaving between the training and testing dates.\n\n* Each `date` appears 18 times. We can see this below:\n\n    * Training: 26,298 samples \/ 1,461 unique dates = 18 samples per date\n    * Testing: 6,570 samples \/ 365 unique dates = 18 samples per date\n\n\n* The `date` appearing 18 times corresponds to each combination of `country`, `store`, and `product` sold on each day. The combinations are:\n\n| `date` # | `country` | `store` | `product` |\n| :-: | --------- | ------- | --------- |\n| 1 | Finland   | KaggleMart | Kaggle Mug |\n| 2 | Finland   | KaggleMart | Kaggle Hat |\n| 3 | Finland   | KaggleMart | Kaggle Sticker |\n| 4 | Finland   | KaggleRama | Kaggle Mug |\n| 5 | Finland   | KaggleRama | Kaggle Hat |\n| 6 | Finland   | KaggleRama | Kaggle Sticker |\n| 7 | Norway | KaggleMart | Kaggle Mug |\n| 8 | Norway | KaggleMart | Kaggle Hat |\n| 9 | Norway | KaggleMart | Kaggle Sticker |\n| 10 | Norway | KaggleRama | Kaggle Mug |\n| 11 | Norway | KaggleRama | Kaggle Hat |\n| 12 | Norway | KaggleRama | Kaggle Sticker |\n| 13 | Sweden | KaggleMart | Kaggle Mug |\n| 14 | Sweden | KaggleMart | Kaggle Hat |\n| 15 | Sweden | KaggleMart | Kaggle Sticker |\n| 16 | Sweden | KaggleRama | Kaggle Mug |\n| 17 | Sweden | KaggleRama | Kaggle Hat |\n| 18 | Sweden | KaggleRama | Kaggle Sticker |\n\nWe should check to see if the dates fully cover the start and ending periods.","91d1d93f":"In general, for both `KaggleMart` and `KaggleRama`, we see the following trends:\n\n* Sales for `Kaggle Hat` increase in the first quarter, decrease for the second and third quarters, and then increase in the fourth quarter.\n* Sales for `Kaggle Mug` decrease in the first and second quarters, and then slowly increase in the third and fourth quarters.\n* Sales for `Kaggle Sticker` remain flat based on quarter.\n* Sales for all three products spike during Christmas, Easter, and Whit Sunday.\n* The `Kaggle Hat` appears to have the greatest fluctuation in sales numbers day to day, followed by `Kaggle Mug`, and finally `Kaggle Sticker`.\n* `KaggleRama` generally outperforms `KaggleMart`.","e3e65596":"### 2.5 Holidays vs Sales\n\nLet's see if we can highlight these a little better with a different visualization. Below, we'll mark the following holidays:\n\n* _Red dashed_ lines indicate Easter\n* _Green dashed_ lines indicate Christmas\n* _Purple dashed_ lines indicate Whit Sunday","3c764d44":"# More to come...","0225b4c8":"## 2.6 Overall Observations\n\nSome observations about the data so far that may help us engineer features:\n\n* Including the holidays of Christmas, Easter, and Whit Sunday as individual features may help boost performance.\n* Marking weekends and weekdays as features may help boost performance.\n* Including the quarter number as a feature may help boost performance.\n* Given that this is time series data, creating lag features for the above mentioned features may help boost performance - experimentation may be needed to find the best lag value.\n\nOther observations:\n\n* `KaggleRama` outperforms `KaggleMart` in `Finland` and `Norway`, but not in `Sweden`.\n* In every location and in each store type, `Kaggle Hat` is the best seller, followed by `Kaggle Mug` and then `Kaggle Sticker`. ","2f6a624b":"### 2.2 Null Values\n\nLet's check for null values:","59b4b9fa":"A few observations:\n\n* It appears that sales are influenced by the following holidays:\n    * Easter (various clusters in April)\n    * Father's Day (various clusters in November)\n    * National Day of Sweden (clusters in June for Sweden)\n    * Mother's Day in Sweden (clusters in May for Sweden)\n* Sales around the end of the year are high (Christmas time)\n* Sales on weekends appear to be higher than during weekdays\n\nWe should dig into this a little more.","3048c3fe":"There are 5 columns of data that we have to work with:\n\n* `row_id` - a unique identifier for that row - no-repetition of IDs.\n* `date` - a date identifier in the form of `YYYY-MM-DD`.\n* `country` - the country identifier - one of `Finland`, `Norway` or `Sweden`.\n* `store` - the store identifier - one of `KaggleMart` or `KaggleRama`.\n* `product` - the product identifier - one of `Kaggle Mug`, `Kaggle Hat`, or `Kaggle Sticker`.\n* `num_sold` - the number of that particular unit sold.","0d7bbc4c":"It appears that we have date data for every single day of every year covered contiguously for both the training and testing datasets.","d7d367fe":"### 2.3 `date` Feature\n\nLet's take a look a little at the properties of the date feature.","90e15a89":"#### 2.5.3 Finland Sales Data","31a25211":"In general, for both `KaggleMart` and `KaggleRama`, we see the following trends:\n\n* Sales for `Kaggle Hat` increase in the first quarter, decrease for the second and third quarters, and then increase in the fourth quarter.\n* Sales for `Kaggle Mug` decrease in the first and second quarters, and then slowly increase in the third and fourth quarters.\n* Sales for `Kaggle Sticker` remain flat based on quarter.\n* Sales for all three products spike during Christmas, Easter, and Whit Sunday.\n* The `Kaggle Hat` appears to have the greatest fluctuation in sales numbers day to day, followed by `Kaggle Mug`, and finally `Kaggle Sticker`.\n* `KaggleRama` generally outperforms `KaggleMart`.","11fb34cc":"#### 2.5.2 Sweden Sales Data","cd8660bd":"### 1.1 Column Breakdown\n\nThe first thing we should do is see what data we have, and how many examples to learn from.","9d6086f7":"As we can see, the same subset of holidays carries forward across all three countries. We can draw a few conclusions:\n\n* Creating features from holidays will likely result in better predictions.\n* Given this is time-series data, providing the regressor with lag data for each of these holiday features may help in the prediction process.\n\nLet's break out the sales by different product types and store types next to see if there are any patterns that are product and store specific.\n\n#### 2.5.1 Norway Sales Data","af4f2cb3":"In terms of samples:\n    \n* Training set contains 26,298 samples\n* Testing set contains 6,570 samples","2443595f":"In general, for both `KaggleMart` and `KaggleRama`, we see the following trends:\n\n* Sales for `Kaggle Hat` increase in the first quarter, decrease for the second and third quarters, and then increase in the fourth quarter.\n* Sales for `Kaggle Mug` decrease in the first and second quarters, and then slowly increase in the third and fourth quarters.\n* Sales for `Kaggle Sticker` remain flat based on quarter.\n* Sales for all three products spike during Christmas, Easter, and Whit Sunday.\n* The `Kaggle Hat` appears to have the greatest fluctuation in sales numbers day to day, followed by `Kaggle Mug`, and finally `Kaggle Sticker`.\n* `KaggeMart` generally outperforms `KaggleRama`.","b237a37f":"### 2.4 Examining Sales by Date, Product, Store and Country\n\nLet's see if there are any trends in our sales figures that are visible to a simple visual inspection."}}