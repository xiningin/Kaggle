{"cell_type":{"794e336f":"code","9f837531":"code","25508bb9":"code","c6d7c1b6":"code","78460e39":"code","3abf6cc9":"code","746ea60f":"code","08f981b6":"code","42dd94f4":"code","e1e85269":"code","03049ede":"code","675a60d0":"code","cb6a349e":"code","e3f60141":"code","029a43f8":"code","9e7824ab":"code","e730dac2":"code","a313db21":"code","1fc73596":"code","b3ee0abe":"code","dae5ca25":"code","847583d5":"code","4b08b0d4":"code","a2440e1a":"code","8d910f3e":"code","c12de082":"code","5c929941":"code","b774fad9":"code","9bafdcfb":"code","35c78583":"code","c8b9afab":"code","7e9088c1":"code","1d4b98bb":"code","03217611":"code","3e7f5591":"code","ccf3383f":"code","6c6f17f3":"code","69f28cfd":"code","6d240dac":"code","cbd82e51":"markdown","56522d7e":"markdown","3256a33a":"markdown","f84fd15d":"markdown","d7050ca1":"markdown","2eadb6de":"markdown","aaef1e19":"markdown","ae2ec38d":"markdown","96ba1a51":"markdown","3c65c2d3":"markdown","90f3b607":"markdown","d8e8d464":"markdown","1f6100de":"markdown","ab29e141":"markdown","56d1f05a":"markdown","f71d9900":"markdown","f68a4226":"markdown","6ef42ed4":"markdown","45c436b1":"markdown","830aaea9":"markdown","8219e5c3":"markdown","d7499954":"markdown","7e717b82":"markdown","dce1baaa":"markdown","272cacd4":"markdown","a7bce496":"markdown","329ed2b8":"markdown","844135f0":"markdown","902b1413":"markdown","b9ac185f":"markdown","bf01f9f4":"markdown","5c239878":"markdown","c042be94":"markdown","f76e0a5e":"markdown","8726f593":"markdown","b2a7cc5b":"markdown","4b7fcc03":"markdown","15523c95":"markdown","96f10c45":"markdown","6396984c":"markdown","a0e2d5e7":"markdown","627720bc":"markdown","0281b153":"markdown","3ef175dd":"markdown","99b402eb":"markdown","c860cb51":"markdown","63dbfbae":"markdown"},"source":{"794e336f":"import numpy as np\nnp.set_printoptions(suppress=True)\nimport pandas as pd\npd.set_option('display.max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport missingno as msno\nfrom datetime import datetime\nfrom datetime import date, timedelta\nfrom sklearn.preprocessing import MinMaxScaler","9f837531":"# Reading the datasets\n\n# Dataset 1: general compiled dataset (key=Co-Date)\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/owid-covid-data.csv')\ndf['date'] = pd.to_datetime(df['date']).dt.date\ndf = df[df.iso_code.apply(lambda x: x[:5]!='OWID_')].copy()\n\n# Dataset 2: vaccinations dataset for quantity of vaccines (key=Co-Date)\ndf_vacc_quantity= pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/vaccinations.csv')\ndf_vacc_quantity.dropna(subset=['iso_code'], inplace=True)\ndf_vacc_quantity = df_vacc_quantity[df_vacc_quantity.iso_code.apply(lambda x: x[:5]!='OWID_')]\n\n# Dataset 3: vaccinations currently used by each country (key=Co)\ndf_vacc_type = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/locations.csv')\n#df_vacc_type = df_vacc_type[df_vacc_type.iso_code.apply(lambda x: x[:5]!='OWID_')].copy()\n\n# Dataset 4: vaccinations by manufacturer (key=Co-Date-Vacc)\ndf_vacc_manuf = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/vaccinations-by-manufacturer.csv')","25508bb9":"key_check = len(df)==len(df[['iso_code', 'continent', 'location', 'date']].drop_duplicates())\nprint('OVERALL FIGURES')\nprint('Total countries: \\t',len(df.location.unique()))\nprint('First date: \\t\\t', min(df.date).strftime('%Y-%m-%d'))\nprint('Last date: \\t\\t', max(df.date).strftime('%Y-%m-%d'))\nprint('Is key Country-Date?: \\t', key_check)\nprint('Shape of the df table is:',df.shape)","c6d7c1b6":"# Defining df_co: dataframe with country related variables (independent of date)\nco_related = ['iso_code', 'continent', 'location', 'population', 'population_density',\n              'gdp_per_capita','life_expectancy', 'human_development_index']\ndf_co = df[co_related].drop_duplicates().reset_index(drop=True)\ndf_co.head(3)","78460e39":"# Quick look at missing values\nmsno.matrix(df_co);","3abf6cc9":"# Check countries with at least 1 missing value\ndf_co[df_co.isnull().any(axis=1)]","746ea60f":"# Quick look at missing values in df\nmsno.matrix(df, labels=True);","08f981b6":"# Defining df_co_dt: dataframe with country AND date related variables (date dependant)\n# Droppping all ICU because they have lot of missing values and it is not scope of this notebook.\nco_dt_related = ['iso_code', 'continent', 'location', 'date', \n                 'total_cases', 'new_cases','total_deaths', 'new_deaths', 'total_tests', 'new_tests',\n                 'total_cases_per_million','new_cases_per_million','total_deaths_per_million', \n                 'new_deaths_per_million','total_tests_per_thousand', 'new_tests_per_thousand',\n                 'total_vaccinations','people_vaccinated', 'people_fully_vaccinated', 'new_vaccinations',\n                 'total_vaccinations_per_hundred','people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred',\n                 'reproduction_rate', \n                 'stringency_index']\ndf_co_dt = df[co_dt_related].drop_duplicates().reset_index(drop=True)\ndf_co_dt.head(3)","42dd94f4":"# Quick look at missing values\nmsno.matrix(df_co_dt);","e1e85269":"ww_cases = df_co_dt.new_cases.sum()\nww_deaths = df_co_dt.new_deaths.sum()\nww_vaccinations = df_co_dt.new_vaccinations.sum()\nprint('Current acumulated Worldwide figures:')\nprint('Cases:\\t\\t',f'{int(ww_cases):,}')\nprint('Deaths:\\t\\t',f'{int(ww_deaths):,}')\nprint('Vaccinations:\\t',f'{int(ww_vaccinations):,}')","03049ede":"fig, ax = plt.subplots(1, 2, figsize=(15, 4))\nsns.barplot(x=[ww_cases, ww_deaths, ww_vaccinations], y=['Cases','Deaths', 'Vaccinations'], \n            ax=ax[0]).set_title('Worldwide acumulated figures')\n#check notation of xticks\nax[1].pie(x=[ww_cases,ww_deaths], labels=['Cases','Deaths'], autopct='%.2f%%',\n          explode=(0, 0.3), wedgeprops=dict(width=0.7))\nplt.title('Worldwide deaths over cases')\nplt.show()","675a60d0":"df_vacc = df_vacc_quantity.merge(df_vacc_type[['location','vaccines']], how='left').merge(\n    df_co[['location','continent', 'population', 'population_density',\n           'gdp_per_capita', 'life_expectancy', 'human_development_index']], how='left')\ndf_vacc['date'] = pd.to_datetime(df_vacc['date']).dt.date\ndf_vacc.info()","cb6a349e":"#Top Countries on Total Vaccinations\nn=20\ndata = df_vacc.groupby('location').max().sort_values(by='total_vaccinations', ascending=False).reset_index()\\\n            [['location','total_vaccinations','gdp_per_capita']][:n]\nfig = px.bar(data, \n             x=\"location\", \n             y=\"total_vaccinations\", \n             orientation='v' \n#             ,color='greens'                \n#             ,color_continuous_scale = 'blues'\n             ,title='<b>Top {} countries in Total Vaccinations<\/b>'.format(n)\n            )\nfig.update_layout(yaxis={'categoryorder':'category descending'})\nfig.update_traces(marker_color='green')\nfig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\nfig.show()","e3f60141":"#Top Countries on Total Vaccinations per Hundred\nn=20\ndata = df_vacc.groupby('location').max().sort_values(by='total_vaccinations_per_hundred', ascending=False).reset_index()\\\n            [['location','total_vaccinations_per_hundred','gdp_per_capita']][:n]\nfig = px.bar(data, \n             x=\"location\", \n             y=\"total_vaccinations_per_hundred\", \n             orientation='v' \n#             ,color='gdp_per_capita'                \n#             ,color_continuous_scale = 'blues'\n             ,title='<b>Top {} countries on Total Vaccinations per Hundred<\/b>'.format(n)\n            )\nfig.update_layout(yaxis={'categoryorder':'category descending'})\nfig.update_traces(marker_color='green')\nfig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\nfig.show()","029a43f8":"#Map - Total Vaccionations per Hundred\ndata = df_vacc.groupby(by='location').max().reset_index()[['location','total_vaccinations_per_hundred']]\n\nfig = px.choropleth(data,\n                    locations = 'location', \n                    locationmode = 'country names',\n                    color = 'total_vaccinations_per_hundred',\n                    title = '<b>Total Vaccinations per Hundred<\/b>',\n                    color_continuous_scale = 'greens',\n                    hover_name = 'location'\n                    ,labels={'total_vaccinations_per_hundred':'% Vacc'}\n                   )\nfig.show()","9e7824ab":"#Top Countries on Daily Vaccinations per Million in the last 7 days\ndays_to_subtract = 7\ndt_today = date.today()\ndt_since = dt_today - timedelta(days=days_to_subtract)\ndata = df_vacc[df_vacc.date>=dt_since]\n\n#Top Countries on Daily Vaccinations per million\nn=20\ndata = df_vacc.groupby('location').max().sort_values(by='daily_vaccinations_per_million', ascending=False).reset_index()\\\n            [['location','daily_vaccinations_per_million','gdp_per_capita']][:n]\nfig = px.bar(data, \n             x=\"location\", \n             y=\"daily_vaccinations_per_million\", \n             orientation='v' \n#             ,color='gdp_per_capita'                \n#             ,color_continuous_scale = 'blues'\n             ,title='<b>Top {} countries with more Daily Vaccinations per Million in the last {} days<\/b>'.format(n, days_to_subtract)\n            )\nfig.update_layout(yaxis={'categoryorder':'category descending'})\nfig.update_traces(marker_color='green')\nfig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\nfig.show()","e730dac2":"#Map - Daily Vaccionations per Hundred\ndays_to_subtract = 7\ndt_today = date.today()\ndt_since = dt_today - timedelta(days=days_to_subtract)\ndata = df_vacc[df_vacc.date>=dt_since]\n\ndata = data[['location','daily_vaccinations_per_million']].groupby(by=['location']).max().reset_index()\n#data['daily_vaccinations_per_hundred'] = round((data['daily_vaccinations']*100) \/ data['population'],4)\n\nfig = px.choropleth(data,\n                    locations = 'location', \n                    locationmode = 'country names',\n                    color = 'daily_vaccinations_per_million',\n                    title = '<b>Daily Vaccinations per Million in the last {} days<\/b>'.format(days_to_subtract),\n                    color_continuous_scale = 'greens',\n                    hover_name = 'location'\n                    ,labels={'daily_vaccinations_per_million':'Vacc \/ M'}\n                   )\nfig.show()","a313db21":"def plot_custom_scatter(df, x, y, size, color, hover_name, title):\n    '''\n    INPUT:\n        df - Pandas dataframe - contains the data\n        x - string - name of the column to be used as horizontal axis\n        y - string - name of the column to be used as vertical axis\n        size - string - name of the column to be used to define the size of the bubbles\n        color - string - name of the column to be used to define the color of the bubbles\n        hover_name - string - name of the column to be used to display when hover on top of the bubbles\n        title - string - title of the plot\n    OUTPUT:\n        plot\n        \n    Description: the function plots a custom scatter plot with Plotly Express\n    '''\n    fig = px.scatter(df, x=x, y=y, size=size, color=color,\n               hover_name=hover_name, size_max=80, title = title\n#                     ,width=800\n                     ,height=800\n                    )\n    fig.update_layout({'legend_orientation':'h'})\n    fig.update_layout(legend=dict(yanchor=\"top\", y=-0.1))\n    fig.update_layout({'legend_title':'Continent'})\n    fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\n    fig.update_xaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=1, linecolor='black', mirror=True)\n    fig.update_xaxes(zeroline=True, zerolinewidth=0.5, zerolinecolor='grey')\n    fig.update_yaxes(zeroline=True, zerolinewidth=0.5, zerolinecolor='grey')\n    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_traces(marker=dict(symbol='circle-dot',opacity=0.5, line=dict(width=1,color='Black')))\n    fig.show()    ","1fc73596":"# Scatter Vaccination Acumulated Total vs Porcentual, Color per Continent\ndata = df_vacc.groupby('location').max().reset_index()[['location','continent','total_vaccinations',\n       'total_vaccinations_per_hundred', 'vaccines']].dropna()\n\nplot_custom_scatter(data, \n                    x = 'total_vaccinations', \n                    y = 'total_vaccinations_per_hundred', \n                    size = 'total_vaccinations', \n                    color = 'continent',\n                    hover_name = 'location', \n                    title = '<b>Vaccinations Acum (Total vs Percent), per continent<\/b>')","b3ee0abe":"# Scatter Vaccination Rate Total vs Porcentual, Color per type of vaccine\ndays_to_subtract = 7\ndt_today = date.today()\ndt_since = dt_today - timedelta(days=days_to_subtract)\ndata = df_vacc[df_vacc.date>=dt_since]\n\ndata = data[['location','continent','total_vaccinations','daily_vaccinations','vaccines','population']].groupby(by='location').max().reset_index().dropna()\ndata['total_vaccinations_per_million'] = round((data['total_vaccinations']*1000000) \/ data['population'],0)\ndata['daily_vaccinations_per_million'] = round((data['daily_vaccinations']*1000000) \/ data['population'],0)\n\nplot_custom_scatter(data, \n                    x = 'total_vaccinations_per_million', \n                    y = 'daily_vaccinations_per_million', \n                    size = 'total_vaccinations_per_million', \n                    color = 'continent',\n                    hover_name = 'location', \n                    title = '<b>Vaccinations Rate (Total vs Daily per million), per continent<\/b>')","dae5ca25":"data = df_vacc[['continent','location','total_vaccinations','vaccines']].groupby(by=['continent','location','vaccines']).max().reset_index()\ndata['world'] = 'World'\ndata\n\nfig = px.treemap(data, \n                 path = ['world', 'vaccines', 'location'], \n                 values = 'total_vaccinations',\n#                 hover_name = 'location',\n#                 color = 'gdp_per_capita',\n                 color_continuous_scale = 'RdBu',\n                 title = '<b>Total vaccinations per schema<\/b>'\n                 ,color_discrete_sequence = px.colors.qualitative.Pastel\n#                ,labels={'gdp_per_capita':'GDP per capita'}\n                )\n\nfig.show()","847583d5":"data = df_vacc[['continent','location','total_vaccinations_per_hundred','vaccines']].groupby(by=['continent','location','vaccines']).max().reset_index()\ndata['world'] = 'World'\n\nfig = px.treemap(data, \n                 path = ['world', 'vaccines', 'location'], \n                 values = 'total_vaccinations_per_hundred',\n#                 hover_name = 'location',\n#                 color = 'gdp_per_capita',\n                 color_continuous_scale = 'RdBu',\n                 title = '<b>Total vaccinations per million per schema<\/b>'\n                 ,color_discrete_sequence = px.colors.qualitative.Pastel\n#                ,labels={'gdp_per_capita':'GDP per capita'}\n                )\n\nfig.show()","4b08b0d4":"data = df[['iso_code','continent','location','total_cases','population']].groupby(by=['iso_code','continent','location']).max().reset_index()\ndata['total_cases_per_million'] = round((data['total_cases']*1000000) \/ data['population'],0)\n\nfig = px.choropleth(data,\n                    locations = 'location', \n                    locationmode = 'country names',\n                    color = 'total_cases_per_million',\n                    title = '<b>Total cases per million habitants<\/b>',\n                    color_continuous_scale = 'reds',\n                    hover_name = 'location'\n                    ,labels={'total_cases_per_million':'Total cases per million'}\n                   )\nfig.show()","a2440e1a":"days_to_subtract = 7\ndt_today = date.today()\ndt_since = dt_today - timedelta(days=days_to_subtract)\ndata = df[df.date>=dt_since]\n\ndata = data[['iso_code','continent','location','new_cases','population']].groupby(by=['iso_code','continent','location']).max().reset_index()\ndata['new_cases_per_million'] = round((data['new_cases']*1000000) \/ data['population'],0)\n\nfig = px.choropleth(data,\n                    locations = 'location', \n                    locationmode = 'country names',\n                    color = 'new_cases_per_million',\n                    title = '<b>Daily new cases per million habitants<\/b>',\n                    color_continuous_scale = 'reds',\n                    hover_name = 'location'\n                    ,labels={'new_cases_per_million':'Daily cases per million'}\n                   )\nfig.show()","8d910f3e":"data = df.groupby('date').sum()[['new_tests_smoothed','new_cases_smoothed',\n                                 'new_deaths_smoothed','new_vaccinations_smoothed']]\ndata.columns= ['Tests','Cases','Deaths','Vaccinations']\nfig = px.line(data, color_discrete_sequence=['grey','blue','red','green'], \n              title='<b>Worldwide daily evolution of Tests, Cases, Deaths and Vaccinations<\/b>')\nfig.show()","c12de082":"data = df[['iso_code','continent','location','total_cases','gdp_per_capita','population']].groupby(by=['iso_code','continent','location']).max().reset_index()\ndata['total_cases_per_million'] = round((data['total_cases']*1000000) \/ data['population'],0)\ndata['world'] = 'World'\n\nfig = px.treemap(data, \n                 path = ['world', 'continent', 'location'], \n                 values = 'total_cases_per_million',\n#                 hover_name = 'location',\n                 color = 'gdp_per_capita',\n                 color_continuous_scale = 'RdBu',\n                 title = '<b>Total cases per Million and GDP per capita<\/b>'\n                ,labels={'gdp_per_capita':'GDP per capita'}\n                )\n\nfig.show()","5c929941":"days_to_subtract = 7\ndt_today = date.today()\ndt_since = dt_today - timedelta(days=days_to_subtract)\ndata = df[df.date>=dt_since]\n\ndata = data[['iso_code','continent','location','new_cases','gdp_per_capita','population']].groupby(by=['iso_code','continent','location']).max().reset_index()\ndata['daily_cases_per_million'] = round((data['new_cases']*1000000) \/ data['population'],0)\ndata['world'] = 'World'\n#data = data[data.new_cases.notnull()]\n#data=data.dropna()\n\nfig = px.treemap(data, \n                 path = ['world', 'continent', 'location'], \n                 values = 'daily_cases_per_million',\n#                 hover_name = 'location',\n#                 color = 'gdp_per_capita',\n#                 color_continuous_scale = 'RdBu',\n                 title = '<b>Daily cases per million<\/b>'#and GDP per capita<\/b>'\n                 ,labels={'gdp_per_capita':'GDP per capita'}\n                 ,color_discrete_sequence = px.colors.qualitative.Pastel\n                )\n\nfig.show()","b774fad9":"data = df_co_dt[['iso_code','continent','location','date','stringency_index']].copy()\ndata['date'] = pd.to_datetime(data['date']).dt.strftime('%m\/%d\/%Y')\n#data\nfig = px.choropleth(data, \n                    locations = 'location',\n                    color = 'stringency_index', \n                    animation_frame = 'date',\n                    color_continuous_scale = 'blues',\n                    locationmode = 'country names',\n                    range_color = [0, 100],\n                    title = '<b>Stringency Index variation over time<\/b>',\n                    hover_name = 'location'\n                    ,labels={'stringency_index':'Stringency'}\n                    )\n#fig.update_layout(transition = {'duration': 5})\nfig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 30\nfig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 2\n\nfig.show()","9bafdcfb":"data = df_co_dt[['iso_code','continent','location','date','reproduction_rate']].copy()\ndata['date'] = pd.to_datetime(data['date']).dt.strftime('%m\/%d\/%Y')\n#data\nfig = px.choropleth(data, \n                    locations = 'location',\n                    color = 'reproduction_rate', \n                    animation_frame = 'date',\n                    color_continuous_scale = 'reds',\n                    locationmode = 'country names',\n                    range_color = [0, 3],\n                    title = '<b>Reproduction Rate variation over time<\/b>',\n                    hover_name = 'location'\n                    ,labels={'reproduction_rate':'Rate'}\n                    )\n#fig.update_layout(transition = {'duration': 5})\nfig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 30\nfig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 2\n\nfig.show()","35c78583":"variables = ['new_cases','new_deaths','new_tests','new_vaccinations']\n\nplt.figure(figsize=(8,6))\n\ndata = df_co_dt[['location']+variables].groupby(by='location').sum().merge(df_co, left_on='location',right_on='location')\nfor variable in variables:\n    data[variable+'_per_million'] = (data[variable]*1000000) \/ data.population\n    data.drop(columns=variable, inplace=True)\n#data = cases[['cases_per_million','population','population_density','gdp_per_capita','life_expectancy','human_development_index']]\nmask = np.triu(np.ones_like(data.corr(), dtype=bool))\nsns.heatmap(data.corr(), annot=True, fmt='.2f', mask=mask)#,cmap='viridis')\nplt.title('Correlation per million with country statistics')\nplt.show()","c8b9afab":"labels = ['low','lower-middle','upper-middle','high']\nbin_data = df_co.copy()\nbin_data['gdp_bin'] = pd.qcut(df_co.gdp_per_capita\n                              ,q=4\n                              ,labels=labels\n                             )\nfor label in labels:\n    print('Bucket {}:'.format(label))\n    print(bin_data[bin_data.gdp_bin==label].location.values)","7e9088c1":"data = bin_data[['location','gdp_bin']].dropna()\n\nfig = px.choropleth(data\n                    ,locations = 'location'\n                    ,locationmode = 'country names'\n                    ,color = 'gdp_bin'\n                    ,title = '<b>Countries Wealth<\/b>'\n                    ,color_discrete_sequence=['red','orange','lightblue','darkblue'] \n                    ,hover_name = 'location'\n                   )\nfig.update_layout({'legend_orientation':'h'})\nfig.show()","1d4b98bb":"def wrap_plot_gdp(variable, date_start='2020-01-01'):    \n    '''\n    INPUT:\n        variable - string - name of the column to be used as values for the lineplot (y axis)\n        date_start - string - optional - if none, will plot from first data point. \n            If a date, will render only after that date\n    OUTPUT:\n        plot\n        \n    Description: the function wrap and plot the data from the df and renders\n    a custom line plot with Plotly Express that shows the evolution of a certain\n    variable from the dataframe over time. \n    Optionally, a custom date start can be passed to filter only after that date.\n    '''\n    labels = ['low','lower-middle','upper-middle','high']\n    bin_data = df_co.copy()\n    bin_data['gdp_bin'] = pd.qcut(df_co.gdp_per_capita\n                                  ,q=4\n                                  ,labels=labels\n                                 )\n    data = df[['location','date']+[variable]].merge(bin_data[['location','gdp_bin']])\n    data['date'] = pd.to_datetime(data['date'])\n    data = data[data.date>date_start]\n    data = data.groupby(['date','gdp_bin']).mean().reset_index()\n    data = data.pivot(index='date', columns='gdp_bin', values=variable)\n\n    #plot\n    fig = px.line(data\n                  ,color_discrete_sequence=['red','orange','blue','darkblue'] \n                  ,title='<b>{} vs gdp_bin<\/b>'.format(variable)\n                  ,labels={'value':variable}\n                 )\n    fig.update_layout({'legend_orientation':'h'})\n    fig.show()","03217611":"wrap_plot_gdp(variable='new_cases_smoothed_per_million')","3e7f5591":"wrap_plot_gdp(variable='total_cases_per_million')","ccf3383f":"wrap_plot_gdp(variable='new_deaths_smoothed_per_million')","6c6f17f3":"wrap_plot_gdp(variable='total_deaths_per_million')","69f28cfd":"wrap_plot_gdp(variable='new_vaccinations_smoothed_per_million', date_start='2020-12-01')","6d240dac":"wrap_plot_gdp(variable='total_vaccinations_per_hundred', date_start='2020-12-01')","cbd82e51":"**Motivation** \\\nDuring the Covid-19 outbreak, lots of amazing dashboards were released - loved them all!\nHowever, I was particularly curious about how the wealth of a country affects the main indicators like the number of cases, deaths and vaccines.\nHope this post helps you gain some insight on that as well!\n\n**Exploratory Data Analaysis on**\n1. Cases, Deaths, Vaccinations.\n2. Reproduction Rate.\n3. Stringency Index.\n4. Vaccines used.\n\n**Questions**\n1. Do Wealthy countries have less cases?\n2. Do Wealthy countries have less deaths?\n3. Do Wealthy countries have more vaccines? Did they have them earlier?\n\n**Data Source** \\\nOur World in Data (https:\/\/ourworldindata.org\/ - https:\/\/github.com\/owid\/covid-19-data\/tree\/master\/public\/data) \\\nYou will not find data input for this notebook because it's reading the GitHub Repo from Our World in Data every time it's ran.\\\nSpecial thanks to Our World in Data for making available such a complete, clean, updated and reliable data as they are doing with such an important topic.\n\n**GitHub Repo**: https:\/\/github.com\/sjuanandres0\/covid19\n\n**Medium Blog Post**: https:\/\/sjuanandres0.medium.com\/covid-19-countries-wealth-cases-deaths-and-vaccines-ff7fa8a83b1b\n","56522d7e":"## Country indicators","3256a33a":"# Scatters","f84fd15d":"**\ud83d\udea7 NOTEBOOK IN PROGRESS \ud83d\udea7**","d7050ca1":"Similar to previous plot, but this time it is normalized by the population of the country. So one can really see which countries are doing it best (possibly smaller countries find it easier\/faster to vaccinate the whole population). ","2eadb6de":"![image.png](https:\/\/raw.githubusercontent.com\/sjuanandres0\/covid19\/master\/img\/pic3.png)","aaef1e19":"When it comes to deaths, we can see a big and early spike for high-income countries with a drastically reduction around July2020. Again, in January2021 they presented more deaths than other lower income countries. \nSomething that caught my attention in the two plots, is the significantly lower deaths in the lowest income countries. A possible explanation could be that the figures do not reflect what actually happened \/ is happening in reality.","ae2ec38d":"Above animated map, shows how the severity of restrictions evolved in each of the countries.","96ba1a51":"From this plot we can see which countries are currently (from last 7 days) vaccinating at a higher pace, considering the population of the country.","3c65c2d3":"# Vaccinations","90f3b607":"# Importing Libraries","d8e8d464":"Alright, so we know that we have a total of 220 countries.\\\nThe first date in the dataset is January 1st of 2020.\\\nThe last date in the dataset is Yesterday?\\\nThe key is Country-Date, meaning that there is only 1 row for each day and country.\\\nMore info about the columns of the dataset can be found in: \\\nhttps:\/\/github.com\/owid\/covid-19-data\/blob\/master\/public\/data\/owid-covid-codebook.csv \\\nhttps:\/\/github.com\/owid\/covid-19-data\/tree\/master\/public\/data","1f6100de":"From the above two plots, we can see that the wealthier the country, the earlier it reported Covid19 cases. We can also see that around May2021, there is a drastic reduction on the high-income countries, possible due to the vaccines. From the second chart, we can see that the high-income countries show more quantity of population tested positive.","ab29e141":"## Country-Date cases, deaths, tests, vaccinations, reproduction rate, stringency index","56d1f05a":"Thanks to this plot, we can easily se that there are a lot of missing values for ICU\/hospitalized patience. This may be explained due to several countries not reporting it. That is why those columns will not be used further in this notebooks and will be dropped straight away. \\\nSimilarly, we can see high number of missing values in the columns related with the vaccinations. In this case, the reason is not the same as before, instead this could be explained due to vaccines only available in 2021, but covid started since 2019\/20. \\\nFurthermore, we can also see missing values in the tests columns. This can be explained due to two factors, some countries did not report the tests performed at all, and some other reported in a less frequent base than daily (for example, weekly).","f71d9900":"# Stringency Index\nThis is a composite measure based on nine response indicators including school closures, workplace closures, and travel bans, rescaled to a value from 0 to\n100 (100 = strictest). If policies vary at the subnational level, the index is shown as the response level of the strictest sub-region.","f68a4226":"Now we can see the same information as in the previous plot, but in a map which makes it easy have all the information in one view.","6ef42ed4":"# Datasets","45c436b1":"## Conclusion\nTo sum up, wealthier countries reported a higher number of cases, deaths and vaccines. Furthermore, the wealthier the country, the earlier the vaccination processes started.\n\n## Disclaimer\nEven though the Our World in Data team made a fantastic job gathering and wrangling the data, the conclusions could not reflect the reality due to countries measuring\/reporting in different ways, applying different tests criteria\u2019s, etc.","830aaea9":"## 1. Do Wealthy countries have less cases?","8219e5c3":"From this coloured treemap, I was expecting to see some relation with the GDP, accumulated cases and the continents but it is not the case. There is not trend I can highlight.","d7499954":"I will now split the df in two dataframes, one country related and another one country&date. Meaning that one will be used for data particularly related with covid evolution and the other one with parameters from the country itself.","7e717b82":"This plot tell us the countries that have applied the most quantity of vaccines to date. It is biased due to the population of each of them. The bigger the country, the more vaccinations, but not necessarily is the one that is doing that best.","dce1baaa":"# Questions\n1. Do Wealthy countries have less cases?\n2. Do Wealthy countries have less deaths?\n3. Do Wealthy countries have more vaccines? Did they have them earlier?","272cacd4":"# Reproduction Rate","a7bce496":"## 3. Do Wealthy countries have more vaccines? Did they have them earlier?","329ed2b8":"This heatmap plots the Pearson correlation indexes for the different main indicators. Again, I was epecting to see more cases or deaths in less develop \/ low-income countries, but that is not the case (or not strong enought to my eyes).","844135f0":"## 2. Do Wealthy countries have less deaths?","902b1413":"This treemap, shows which countries are currently having more daily cases, grouped by continents. It is similar to the \"Daily new cases per million habitants\" map, but in here we can see better the scales. In the map, small countries could hardly be seen in a color scale, while here its size is easier to understsand and call attention.","b9ac185f":"## Thanks for reading!","bf01f9f4":"For vaccinations, we can see again higher numbers for high-income countries. It is not only clear that they are having more vaccines than the lower groups, but also that they started to have them earlier. This may be attributable, among other causes, to the fact that some high-income countries were the firsts ones to develop the vaccine (prioritizing their own population), or also that these countries were able to pay higher prices in order to get the shots sooner. ","5c239878":"Above animated map, shows how the reproduction rate evolved in each of the countries.","c042be94":"Since the colors represent the continents, we can identify certain aligment withing the European country, meaning that countries in Europe seems to be vaccinating at a relatively similar pace when it comes to daily vaccinations, as well as the accumulated vaccinations. \\\nWe can also identify that African countries seem to be in the bottom left of the chart, which is unfortunately low vaccinations accumulated and daily (except Seychelles). \\\nApart from this two observations, the rest of the datapoints seem dispersed to draw conclusions only with it.","f76e0a5e":"This plot pretends to show which are the countries where currently present higher daily cases. ","8726f593":"With this plot we can see the overall figures evolution across time.","b2a7cc5b":"From this plot we can see that we have some missing values in the population_density, gdp_per_capita, life_expectancy and human_development_index but no so many. Meaning that this dataframe, the variables per countries are quite complete.","4b7fcc03":"# Cases","15523c95":"# Evolution over Time of tests, cases, deaths and vaccinations","96f10c45":"This plots are quite simple, but provides a quick overview of the current situation of Covid. Where we can see that vaccines, finally, vaccinations have overcame - by far -  the quantity of cases. \\\nParallelly, the pie chart on the right hand, show small porcentage (yet relevant and important) of deaths among positive cases reported.","6396984c":"# Correlation","a0e2d5e7":"With this treemap, we can see how much a vaccination schema is used in total. This treemap is a bit misleading due to few countries reporting how many dosis per vaccine were applied (per day or total), hence if a country is applying 10% of a certain vaccine and 90% of another one (supposing only 2 for this example), by looking at the plot you may thing that it is applying 50% of each when that's not the case. ","627720bc":"# COVID-19: Countries Wealth, Cases, Deaths and Vaccines \ud83d\udcb2\ud83e\udda0\u26b0\ud83d\udc89","0281b153":"# GDP, Treemaps","3ef175dd":"From this plot we can see the relation between the total vaccinations and the total vaccinations considering the population of the country. We can't identify a relation with the continents. It's mainly descriptive, but not much to infer from this plot.","99b402eb":"Here we can have an overall view of the covid cases per million habitant. We can see highly affected areas in South America, Europe and USA.","c860cb51":"This plot is similar to the one before, but considering the population of the countries","63dbfbae":"From this map we can see which countries are vaccinating more, considering the lasts 7 days and the population of the countries."}}