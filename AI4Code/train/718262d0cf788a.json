{"cell_type":{"f37a1b4b":"code","9ffadb10":"code","226852df":"code","213b38b2":"code","48c14ec0":"code","ff24da9e":"code","353fc82b":"code","1684a255":"code","fc6bc10f":"code","1d8106c2":"code","b9bdae7f":"code","7c5b2c76":"code","e5db638b":"code","cbaa6908":"code","584c04b8":"code","8971b7e5":"code","99b9286f":"code","c7b74f81":"code","8ca2ffe9":"code","4d99067d":"code","71dde606":"code","fb363627":"code","40e6fe0d":"code","6cdf5c88":"code","4370e1d2":"code","77a70cbd":"code","b82edf39":"code","2f17266e":"code","3ad57b74":"code","d49773a7":"code","dd773835":"code","e1cdf585":"code","c3dfe328":"code","8b3cc6a4":"code","6e972d20":"markdown","38e39fa6":"markdown","0a3c0d7d":"markdown","e49cd424":"markdown","bfbc6360":"markdown","94e58465":"markdown","16d65342":"markdown","5c7eee26":"markdown","5838313a":"markdown","19cd1c0f":"markdown","ba01246d":"markdown","83272f25":"markdown","1d3892cc":"markdown","9c85ef22":"markdown","097335b2":"markdown","bbc91f23":"markdown","044fd46b":"markdown","f0aea4c1":"markdown","995f8706":"markdown","e6e17892":"markdown","dc618059":"markdown"},"source":{"f37a1b4b":"# Import the required packages\n!pip install pywaffle\nimport os\nimport requests\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\nfrom pywaffle import Waffle\nimport geopandas as gpd","9ffadb10":"# Importing static dataset from .csv file\nraw_data = pd.read_csv('\/kaggle\/input\/vehicle-collisions\/database.csv')\n\nprint(raw_data.shape)\nraw_data.head(3)","226852df":"# Removing columns that have more than a third values as NaN\nmask = raw_data.isna().sum() \/ len(raw_data) < 0.34\nraw_data = raw_data.loc[:, mask]\n\n#Removing columns that don't have a large contributing factor to EDA and Predictions\ncols_to_drop = ['ZIP CODE', 'LOCATION', \n                'VEHICLE 2 FACTOR', 'VEHICLE 2 TYPE']\nraw_data.drop(cols_to_drop, axis = 1, inplace = True)","213b38b2":"# Concatenating date and time columns\nraw_data['CRASH_DATE_TIME'] = raw_data['DATE'] + ' ' + raw_data['TIME']\n\n# Drop redundant date and time columns\ncols_to_drop = ['DATE', 'TIME']\nraw_data.drop(cols_to_drop, axis = 1, inplace = True)","48c14ec0":"# Convert Crash Date and time to datetime format\nraw_data['CRASH_DATE_TIME']= pd.to_datetime(raw_data['CRASH_DATE_TIME'], \n                                            dayfirst=True, errors='coerce')\n\n# Dropping rows with problematics dates\nidx = raw_data[raw_data['CRASH_DATE_TIME'].isnull()].index\nraw_data.drop(idx, axis = 0, inplace = True)\n\nprint(raw_data.shape)\nraw_data.head(3)","ff24da9e":"borough_wise = raw_data.groupby(['BOROUGH']).size().reset_index(name='NoOfAccidents')\nborough_wise.head()","353fc82b":"# Import the ShapeFile for Borough Boundaries\nfp = '\/kaggle\/input\/nyc-borough-boundaries\/geo_export_87071461-9196-46f3-8d1b-52fed88fb835.shp'\nborough_geo = gpd.read_file(fp)\nborough_geo['boro_name'] = borough_geo['boro_name'].str.upper() \n\n# Merging ShapeFile with data\nborough_wise = borough_geo.set_index('boro_name').join(borough_wise.set_index('BOROUGH'))","1684a255":"# Create figure and axes for Matplotlib\nfig, ax = plt.subplots(1, figsize=(10, 7))\n\n# Drawing the Map\nborough_wise.plot(column = 'NoOfAccidents', cmap = 'Reds', linewidth = 0.8, \n                      ax = ax, edgecolor = '0.8')\n\n# Map customizations\nax.axis('off')\nax.set_title('Motor Vehicle Collisions in NYC', size = 16)\nax.annotate('Source: NYC Open Data', xy = (0.1, .08),  \n            xycoords = 'figure fraction', horizontalalignment = 'left', verticalalignment = 'top', \n            fontsize = 12, color = '#555555')\n\n# Adding a color bar legend to the map\nsm = plt.cm.ScalarMappable(cmap = 'Reds', \n                           norm = plt.Normalize(vmin = 22822, vmax = 189648))\nsm._A = []\ncbar = fig.colorbar(sm)\n\n# Export map\nfig.savefig('borough_wise_accidents.png', dpi=300)","fc6bc10f":"injuries_and_fatalities = raw_data.groupby(['BOROUGH'])\\\n['PERSONS KILLED', 'PERSONS INJURED'].agg('sum').reset_index()\n\ninjuries_and_fatalities['Total Accidents'] = raw_data.groupby(['BOROUGH']).size().\\\nreset_index(name='NoOfAccidents').NoOfAccidents\n\n# Injuries and Fatalities as Percentages\ninjuries_and_fatalities['Injury%'] = round((injuries_and_fatalities['PERSONS INJURED']\\\n\/ injuries_and_fatalities['Total Accidents'] * 100), 1)\ninjuries_and_fatalities['Fatality%'] = round((injuries_and_fatalities['PERSONS KILLED']\\\n\/ injuries_and_fatalities['Total Accidents'] * 100), 3)\n\ninjuries_and_fatalities.head()","1d8106c2":"# Dropping redudant column and merging with ShapeFile\ninjuries_and_fatalities.drop('Total Accidents', axis = 1, inplace = True)\ninjuries_and_fatalities = borough_geo.set_index('boro_name').join(injuries_and_fatalities.set_index('BOROUGH'))","b9bdae7f":"# Create figure and axes for Matplotlib\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, sharex=True, sharey=True, figsize=(10, 7))\n\n# Drawing the maps\ninjuries_and_fatalities.plot(column = 'PERSONS INJURED', cmap = 'PuRd', linewidth = 0.8, \n                      ax = ax1, edgecolor = '0.8')\ninjuries_and_fatalities.plot(column = 'PERSONS KILLED', cmap = 'Reds', linewidth = 0.8, \n                      ax = ax2, edgecolor = '0.8')\ninjuries_and_fatalities.plot(column = 'Injury%', cmap = 'PuRd', linewidth = 0.8, \n                      ax = ax3, edgecolor = '0.8')\ninjuries_and_fatalities.plot(column = 'Fatality%', cmap = 'Reds', linewidth = 0.8, \n                      ax = ax4, edgecolor = '0.8')\n\n# Map customizations\nax1.axis('off'); ax2.axis('off'); ax3.axis('off'); ax4.axis('off')\nax1.set_title('Total number of people injured in NYC', size = 10)\nax2.set_title('Total number of people killed in NYC', size = 10)\nax3.set_title('Percentage of people injured in vehicle collisions', size = 9)\nax4.set_title('Percentage of people killed in vehicle collisions', size = 9)\n\n# Adding color bar legends to the maps\nsm = plt.cm.ScalarMappable(cmap = 'PuRd', norm = plt.Normalize(vmin = 5800, vmax = 53000))\nsm._A = []\ncbar = fig.colorbar(sm, ax = ax1)\n\nsm = plt.cm.ScalarMappable(cmap = 'Reds', norm = plt.Normalize(vmin = 30, vmax = 210))\nsm._A = []\ncbar = fig.colorbar(sm, ax = ax2)\n\nsm = plt.cm.ScalarMappable(cmap = 'PuRd', norm = plt.Normalize(vmin = 15, vmax = 30))\nsm._A = []\ncbar = fig.colorbar(sm, ax = ax3)\n\nsm = plt.cm.ScalarMappable(cmap = 'Reds', norm = plt.Normalize(vmin = 0.05, vmax = 0.015))\nsm._A = []\ncbar = fig.colorbar(sm, ax = ax4)\n\n# Export map\nfig.savefig('borough_wise_injury_percentage.png', dpi=500)","7c5b2c76":"# Calculate the number of people killed, injured and total accidents for each contributing factor\nfactor_wise = raw_data.groupby(['VEHICLE 1 FACTOR'])\\\n['PERSONS KILLED', 'PERSONS INJURED'].agg('sum').reset_index()\n\nfactor_wise['Total Accidents'] = raw_data.groupby(['VEHICLE 1 FACTOR']).size().\\\nreset_index(name='NoOfAccidents').NoOfAccidents\n\n# 'Unspecified' factor is the most common factor in motor vehicle collissions reported by the NYPD, \n# but since these don't give us any concrete analysis, we won't consider this, and hence we drop it.\nfactor_wise = factor_wise.sort_values('Total Accidents', ascending = False).head(10).iloc[1:]\n\n# Injuries and Fatalities as Percentages\nfactor_wise['Injury%'] = round((factor_wise['PERSONS INJURED']\/factor_wise['Total Accidents'] * 100), 1)\nfactor_wise['Fatality%'] = round((factor_wise['PERSONS KILLED']\/factor_wise['Total Accidents'] * 100), 3)\n\n# Drop last two\nfactor_wise = factor_wise[:-1]\nfactor_wise.head(3)","e5db638b":"factor_accidents = factor_wise.sort_values('Total Accidents', ascending = False).head(10)\nfactor_accidents.head(3)","cbaa6908":"# Create figure and axes for Matplotlib\nfig, ax = plt.subplots(1, figsize=(14, 6))\n\n# Defining color map\ncolor = np.flip(cm.Reds(np.linspace(.2,.6, 10)))\n\n# Creating the plot\nfactor_accidents.plot(x = 'VEHICLE 1 FACTOR', \n                      y = 'Total Accidents', kind = 'bar', \n                      color = color, stacked = True, ax = ax)\n\n# Customizing the Visulation\nax.set_title('Factors causing the most number of accidents', size = 12)\nax.set_xlabel('Contributing Factor', size = 12)\nax.set_ylabel('Number of Accidents', size = 12)\nax.tick_params(labelrotation = 20)\n\n# Exporting the visualisation\nfig.savefig('factor_accidents.png', dpi=500)\n\nwaf_df = factor_accidents[['VEHICLE 1 FACTOR', 'Total Accidents']].\\\nset_index('VEHICLE 1 FACTOR')\n\n\n# Waffle Chart \nwaf = plt.figure(\n    FigureClass = Waffle, \n    rows = 5, \n    values = ((waf_df['Total Accidents'] \/ waf_df['Total Accidents'].sum()) * 100) ,\n    title={'label': 'Factors causing the most number of accidents', \n           'loc': 'center', 'size': 22},\n    labels=[\"{0} ({1}%)\".format(k, round((v \/ waf_df['Total Accidents'].sum()) * 100), 2) for k, v in waf_df['Total Accidents'].items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.15), 'ncol': len(waf_df), 'framealpha': 0},\n    starting_location='NW',\n    figsize=(22, 8)\n)\n\nwaf.gca().set_facecolor('#EEEEEE')\nwaf.set_facecolor('#EEEEEE')\n\n# Exporting the visualisation\nwaf.savefig('factor_accidents_waffle.png', dpi=500)","584c04b8":"factor_inj_rate = factor_wise.sort_values('Injury%', ascending = False).head(10)\nfactor_fat_rate = factor_wise.sort_values('Fatality%', ascending = False).head(10)","8971b7e5":"# Create figure and axes for Matplotlib\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(18, 6))\n\n# Defining color map\ncolor = np.flip(cm.plasma(np.linspace(.2,.6, 10)))\ncolor2 = cm.autumn(np.linspace(.2,.6, 10))\n\n# Creating the plots\nfactor_inj_rate.plot(x = 'VEHICLE 1 FACTOR', \n                      y = 'Injury%', kind = 'bar', \n                      color = color, stacked = True, ax = ax1)\n\nfactor_fat_rate.plot(x = 'VEHICLE 1 FACTOR', \n                      y = 'Fatality%', kind = 'bar', \n                      color = color2, stacked = True, ax = ax2)\n\n# Customizing the Visulation\nax1.set_title('Factors with the highest rate of injury', size = 12)\nax1.set_xlabel('Contributing Factor', size = 12)\nax1.set_ylabel('Rate of Injury (%)', size = 12)\nax1.tick_params(labelrotation = 30)\n\nax2.set_title('Factors with the highest rate of fatality', size = 12)\nax2.set_xlabel('Contributing Factor', size = 12)\nax2.set_ylabel('Rate of Fatality (%)', size = 12)\nax2.tick_params(labelrotation = 30)\n\n# Exporting the visualisation\nfig.savefig('factor_inj_fat_rate.png', dpi=500)","99b9286f":"# Calculate the number of people killed, injured and total accidents for each vehicle type\nvehicle_wise = raw_data.groupby(['VEHICLE 1 TYPE'])\\\n['PERSONS KILLED', 'PERSONS INJURED'].agg('sum').reset_index()\n\nvehicle_wise['Total Accidents'] = raw_data.groupby(['VEHICLE 1 TYPE']).size().\\\nreset_index(name='NoOfAccidents').NoOfAccidents\n\nvehicle_wise = vehicle_wise.sort_values('Total Accidents', ascending = False)\n# Injuries and Fatalities as Percentages\nvehicle_wise['Injury%'] = round((vehicle_wise['PERSONS INJURED']\/vehicle_wise['Total Accidents'] * 100), 1)\nvehicle_wise['Fatality%'] = round((vehicle_wise['PERSONS KILLED']\/vehicle_wise['Total Accidents'] * 100), 3)\n\n# Filtering vehicles involved in atleast 100 accidents\nmask = vehicle_wise['Total Accidents'] > 100\nvehicle_wise = vehicle_wise[mask]\n\nvehicle_wise.head(3)","c7b74f81":"vehicle_accidents = vehicle_wise.sort_values('Total Accidents', ascending = False).head(10)\nvehicle_accidents.head(3)","8ca2ffe9":"# Create figure and axes for Matplotlib\nfig, ax = plt.subplots(1, figsize=(14, 6))\n\n# Defining color map\ncolor = np.flip(cm.Reds(np.linspace(.2,.6, 10)))\n\n# Creating the plot\nvehicle_accidents.plot(x = 'VEHICLE 1 TYPE', \n                      y = 'Total Accidents', kind = 'bar', \n                      color = color, stacked = True, ax = ax)\n\n# Customizing the Visulation\nax.set_title('Vehicle types involved in the most number of accidents', size = 12)\nax.set_xlabel('Vehicle Type', size = 12)\nax.set_ylabel('Number of Accidents', size = 12)\nax.tick_params(labelrotation = 10)\n\n# Exporting the visualisation\nfig.savefig('vehicle_type_accidents.png', dpi=500)","4d99067d":"vehicle_inj_rate = vehicle_wise.sort_values('Injury%', ascending = False).head(10)\nvehicle_fat_rate = vehicle_wise.sort_values('Fatality%', ascending = False).head(10)","71dde606":"# Create figure and axes for Matplotlib\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(18, 6))\n\n# Defining color map\ncolor = np.flip(cm.plasma(np.linspace(.2,.6, 10)))\ncolor2 = cm.autumn(np.linspace(.2,.6, 10))\n\n# Creating the plots\nvehicle_inj_rate.plot(x = 'VEHICLE 1 TYPE', \n                      y = 'Injury%', kind = 'bar', \n                      color = color, stacked = True, ax = ax1)\n\nvehicle_fat_rate.plot(x = 'VEHICLE 1 TYPE', \n                      y = 'Fatality%', kind = 'bar', \n                      color = color2, stacked = True, ax = ax2)\n\n# Customizing the Visulation\nax1.set_title('Vehicle Types with the highest rate of injury', size = 12)\nax1.set_xlabel('Vehicle Types', size = 12)\nax1.set_ylabel('Rate of Injury (%)', size = 12)\nax1.tick_params(labelrotation = 30)\n\nax2.set_title('Vehicle Types with the highest rate of fatality', size = 12)\nax2.set_xlabel('Vehicle Types', size = 12)\nax2.set_ylabel('Rate of Fatality (%)', size = 12)\nax2.tick_params(labelrotation = 30)\n\n# Exporting the visualisation\nfig.savefig('vehicle_inj_fat_rate.png', dpi=500)","fb363627":"# Keeping only the date from the Datetime column\ndate_only = raw_data.copy() \ndate_only['Date'] = date_only['CRASH_DATE_TIME'].dt.date\n\n# Calculate the number of people killed, injured and total accidents for each contributing factor\ndate_wise = date_only.groupby(['Date'])\\\n['PERSONS KILLED', 'PERSONS INJURED'].agg('sum').reset_index()\n\ndate_wise['Total Accidents'] = date_only.groupby(['Date']).size().\\\nreset_index(name='NoOfAccidents').NoOfAccidents\n\n# Injuries and Fatalities as Percentages\ndate_wise['Injury%'] = round((date_wise['PERSONS INJURED']\/date_wise['Total Accidents'] * 100), 1)\ndate_wise['Fatality%'] = round((date_wise['PERSONS KILLED']\/date_wise['Total Accidents'] * 100), 3)\n\ndate_wise = date_wise.sort_values('Total Accidents', ascending = False)","40e6fe0d":"date_accidents = date_wise.sort_values('Total Accidents', ascending = False).head(10)\n\n# Create figure and axes for Matplotlib\nfig, ax = plt.subplots(1, figsize=(12, 4))\n\n# Defining color map\ncolor = np.flip(cm.Oranges(np.linspace(.2,.6, 10)))\n\n# Creating the plot\ndate_accidents.plot(x = 'Date', \n                      y = 'Total Accidents', kind = 'bar', \n                      color = color, stacked = True, ax = ax)\n\n# Customizing the Visulation\nax.set_title('Dates on which the most number of accidents occured', size = 12)\nax.set_xlabel('Date', size = 12)\nax.set_ylabel('Number of Accidents', size = 12)\nax.tick_params(labelrotation = 10)\n\n# Exporting the visualisation\nfig.savefig('date_accidents.png', dpi=500)","6cdf5c88":"# Average number of accidents by date\ndate_wise['Total Accidents'].mean()","4370e1d2":"# Filtering dates with more than 604 accidents\nmask = date_wise['Total Accidents'] > 604\nvehicle_accidents_500 = date_wise[mask]\nprint(\"Average no. of people injured on dates when more than 536 accidents happened: \" + \\\n      str(vehicle_accidents_500['PERSONS INJURED'].mean()))\nprint(\"Total people killed on dates when more than 536 accidents happened: \" + \\\n      str(vehicle_accidents_500['PERSONS KILLED'].sum()))","77a70cbd":"# Dark Sky Secret Key\nsecret_key = '46d8abf841357ef2fe310170ad26ce87'\n\n# NOTE: The key has been reset to avoid overuse. \n# Please create an account on DarkSky API to run the calls for yourself.","b82edf39":"NYC_LAT = '40.730610'\nNYC_LONG = '-73.935242'","2f17266e":"vehicle_accidents_500_date = vehicle_accidents_500.copy()['Date'].head(10) # Limiting to first ten rows to speed up testing\n\nframe = {'Date': vehicle_accidents_500_date} \nvehicle_accidents_500_date_df = pd.DataFrame(frame) ","3ad57b74":"casts = []\n\nfor date in vehicle_accidents_500_date_df['Date'].values.tolist():\n    dt = str(date)\n    date_time = dt + \"T12:00:00\"\n    link = \"https:\/\/api.darksky.net\/forecast\/{}\/{},{},{}\".format(secret_key, NYC_LAT, NYC_LONG, date_time)\n    \n    # Sending GET request and saving the response as a response object\n    r = requests.get(url = link)\n    \n    # Unpacking data in JSON Format\n    data = r.json() \n    to_cast = data['currently']['summary']\n    \n    casts.append(to_cast)\n\n# Adding the result to the dataframe\nvehicle_accidents_500_date_df['Summary'] = casts","d49773a7":"# Joining the dataframes\nvehicle_accidents_500_date_df = date_wise.set_index('Date').\\\njoin(vehicle_accidents_500_date_df.set_index('Date'))","dd773835":"to_plot = vehicle_accidents_500_date_df.head(100)\n\n# Calculate the number of people killed, injured and total accidents for each contributing factor\nto_plot_grouped = to_plot.groupby(['Summary'])\\\n['PERSONS KILLED', 'PERSONS INJURED'].agg('sum').reset_index()\n\nto_plot_grouped['Total Accidents'] = to_plot.groupby(['Summary']).size().\\\nreset_index(name='NoOfAccidents').NoOfAccidents\n\n# Injuries and Fatalities as Percentages\nto_plot_grouped['Injury%'] = round((to_plot_grouped['PERSONS INJURED']\/to_plot_grouped['Total Accidents'] * 100), 1)\nto_plot_grouped['Fatality%'] = round((to_plot_grouped['PERSONS KILLED']\/to_plot_grouped['Total Accidents'] * 100), 3)\n\nto_plot_grouped = to_plot_grouped.sort_values('Total Accidents', ascending = False)","e1cdf585":"# Create figure and axes for Matplotlib\nfig, ax = plt.subplots(1, figsize=(14, 6))\n\n# Defining color map\ncolor = np.flip(cm.Reds(np.linspace(.2,.6, 10)))\n\n# Creating the plot\nto_plot_grouped.plot(x = 'Summary', y = 'Total Accidents', \n             kind = 'bar', color = color, \n             stacked = True, ax = ax)\n\n# Customizing the Visulation\nax.set_title('Weather Condition vs Number of Accidents', size = 12)\nax.set_xlabel('Weather Condition', size = 12)\nax.set_ylabel('Number of Accidents', size = 12)\nax.tick_params(labelrotation = 90)\n\n# Exporting the visualisation\nfig.savefig('weather_summary_accidents.png', dpi=500)","c3dfe328":"weather_inj_rate = to_plot_grouped.sort_values('Injury%', ascending = False).head(10)\nweather_inj = to_plot_grouped.sort_values('PERSONS INJURED', ascending = False).head(10)\nweather_fat_rate = to_plot_grouped.sort_values('Fatality%', ascending = False).head(10)\nweather_fat = to_plot_grouped.sort_values('PERSONS KILLED', ascending = False).head(10)","8b3cc6a4":"# Create figure and axes for Matplotlib\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2, figsize=(18, 18))\n\n# Defining color map\ncolor = np.flip(cm.plasma(np.linspace(.2,.6, 10)))\ncolor2 = cm.PuRd(np.linspace(.2,.6, 10))\n\n# Creating the plots\nweather_inj_rate.plot(x = 'Summary', \n                      y = 'Injury%', kind = 'bar', \n                      color = color, stacked = True, ax = ax1)\n\nweather_inj.plot(x = 'Summary', y = 'PERSONS INJURED', kind = 'bar', \n                 color = color, stacked = True, ax = ax3)\n\nweather_fat_rate.plot(x = 'Summary', \n                      y = 'Fatality%', kind = 'bar', \n                      color = color2, stacked = True, ax = ax2)\n\nweather_fat.plot(x = 'Summary', y = 'PERSONS KILLED', kind = 'bar', \n                 color = color2, stacked = True, ax = ax4)\n\n# Customizing the Visulation\nax1.set_title('Weather Condition with the highest rate of injury', size = 12)\nax1.set_xlabel(' ', size = 12)\nax1.set_ylabel('Rate of Injury (%)', size = 12)\nax1.tick_params(labelrotation = 30)\n\nax2.set_title('Weather Condition with the highest rate of fatality', size = 12)\nax2.set_xlabel(' ', size = 12)\nax2.set_ylabel('Rate of Fatality (%)', size = 12)\nax2.tick_params(labelrotation = 30)\n\nax3.set_title('Weather Condition vs Injuries', size = 12)\nax3.set_xlabel('Weather Condition', size = 12)\nax3.set_ylabel('Number of Injured People', size = 12)\nax3.tick_params(labelrotation = 30)\n\nax4.set_title('Weather Condition vs Fatalities', size = 12)\nax4.set_xlabel('Weather Condition', size = 12)\nax4.set_ylabel('Number of Deaths', size = 12)\nax4.tick_params(labelrotation = 30)\n\n# Exporting the visualisation\nfig.savefig('weather_inj_fat_rate.png', dpi=500)","6e972d20":"### Borough-wise Analysis","38e39fa6":"The [GIS data](https:\/\/data.cityofnewyork.us\/City-Government\/Borough-Boundaries\/tqmj-j8zm) with the Boundaries of Boroughs for New York City is obtained from NYC Open Data. The data is provided by the Department of City Planning (DCP).","0a3c0d7d":"**Analysis: Passenger Vehicles are the vehicle types involved in the most number of accident, followed by Sedands and SUVs\/Station Wagons. `Bicycle` and `Motorcycle` have an extreme rate of injury (>50%). Hence, it can be concluded that two wheelers are prone to injuries. `Motorcycle`, `Bicycle`, `Bus`, `Large Commerical Vehicles` have the highest rate of fatality. Hence, it can be concluded that vehicles of the extreme weights are more deadly.**","e49cd424":"### Do Date and Time play any role?","bfbc6360":"**Analysis: `Failure to Yield Right-of-Way` is by far the most common factor for fatality, with more than 16% of all accidents resulting in deaths. `Driver Inattention\/Distraction` is a distant second with around 6%. In terms of injuries, the rate is much higher, which `Failure to Yield Right-of-Way` again being the factor with the highest rate of over 45%. `Following Too Closely`, `Driver Inattention\/Distraction` and `Other Vehicular` also have very high rate of injuries (around 20-30%).**","94e58465":"### Data Pre-processing and Cleaning","16d65342":"### Importing data","5c7eee26":"# New York City Motor Vehicle Collisions\nGitHub Repository: https:\/\/github.com\/skhiearth\/NYC-Motor-Vehicle-Collisions\n\nKaggle Kernel: https:\/\/www.kaggle.com\/skhiearth\/nyc-motor-vehicle-collisions (Uses a smaller dataset)\n\n**Analysing and visualising Motor Vehicle Collisions in New York City with an objective to make the city roads safer using Data Science techniques. The [dataset](https:\/\/data.cityofnewyork.us\/Public-Safety\/Motor-Vehicle-Collisions-Crashes\/h9gi-nx95) used is provided by NYC Open Data and contains details on the crash event. The Motor Vehicle Collisions data tables contain information from all police reported motor vehicle collisions in NYC.**","5838313a":"### Column(s) Descriptions:\n\n1. `CRASH DATE`: The date of the collision.\n2. `CRASH TIME`: The time of the collision.\n3. `BOROUGH`: The city borough in which the collision occured.\n4. `LATITUDE`, `LONGITUDE` and `LOCATION`: Geographical coordinates of the collision.\n5. `ON STREET NAME`: Street on which the collision occurred.\n6. `CROSS STREET NAME`: Nearest cross street to the collision.\n7. `OFF STREET NAME`: Street address (if known).\n8. `NUMBER OF PERSONS INJURED`, `NUMBER OF PERSONS KILLED`, `NUMBER OF PEDESTRIANS INJURED`, `NUMBER OF PEDESTRIANS KILLED`, `NUMBER OF CYCLIST INJURED`, `NUMBER OF CYCLIST KILLED`, `NUMBER OF MOTORIST INJURED` and `NUMBER OF MOTORIST KILLED`: Details about the number of people injured or killed in the accident.\n9. `CONTRIBUTING FACTOR VEHICLE 1-5`: Factors contributing to the collision for designated vehicle.\n10. `COLLISION_ID`: Unique record code generated by the system.\n11. `VEHICLE TYPE CODE 1-5`: Type of vehicle based on the selected vehicle category.","19cd1c0f":"### Vehicle Type Analysis\n\nIn the dataset, the column `VEHICLE TYPE CODE 1` gives the type of the vehicle which was involved in the motor collision.","ba01246d":"**Analysis: Brooklyn and Bronx have reported a very high percentage of accidents that result in injury. Queens and Staten Island also have a very high percentage, third and fourth to the first two borough by only a couple of percentages. On the other hand, Manhattan reported the least number of accidents in New York City boroughs.**","83272f25":"### Contributing Factor Analysis\n\nIn the dataset, the column `VEHICLE 1 FACTOR` gives the factor contributing to the collision for designated vehicle. ","1d3892cc":"It can be seen that are several dates on which an unusually high number of accidents occured. Since weather conditions can play a major role in motor accidents, we match the weather conditions on the days when more than 604 accidents (more than the average) were reported, and try to find a correlation.","9c85ef22":"**Analysis: Brooklyn and Queens have reported a very high number of accidents. On the other hand, Staten Island reported the least number of accidents in New York City boroughs.**","097335b2":"As it can be seen, an average of around 165 people were injured and a total of 274 people were killed on these particular days. So, any correlation between these days and other factors can help the authorities to improve road safety.","bbc91f23":"**Analysis: Passenger Vehicles are the vehicle types involved in the most number of accident, followed by SUVs\/Station Wagons.**","044fd46b":"Download the static file from [here](https:\/\/data.cityofnewyork.us\/api\/views\/h9gi-nx95\/rows.csv?accessType=DOWNLOAD). Dynamic data can be fetched using the Socrata Open Data API (SODA). \nNote that SODA limits a single API call to 1000 rows, so please use the offset parameter to make multiple API calls\nto fetch all rows.\nThe exact static file version used here has been uploaded to Google Drive, and made public. You may access this version from [here](https:\/\/drive.google.com\/open?id=1Wv9yya3u3HjnP2XZbxouFUnyLD4plU4Y).","f0aea4c1":"#### Weather Matching: ([Powered by Dark Sky](https:\/\/darksky.net\/poweredby\/))","995f8706":"#### Most common reasons for accidents:","e6e17892":"**Analysis: Driver Distraction is by far the most common factor leading to accidents on the roads of New York City. This is a strong argument in favor of the promotion of self-driving cars to make our roads safer.**","dc618059":"#### Contributing Factors with highest injury and fatality rate:"}}