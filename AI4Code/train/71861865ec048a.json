{"cell_type":{"02fc4c86":"code","ff19a1a9":"code","2fc09ae6":"code","30cc850f":"code","ce0f2257":"code","f677be9a":"code","e39f7e89":"code","ebcf5f05":"code","751fe352":"code","dc845bdc":"code","b6e9c9f3":"code","dccd4ba5":"code","84c42b8f":"code","2d8510d1":"code","c18b69d9":"code","03478034":"code","3c98590d":"code","e499bcb6":"code","41cbea92":"code","84bf128d":"code","b890f688":"code","aa194525":"code","44ea0885":"code","14c263e6":"code","fb183830":"code","39b9e9bb":"code","cde09212":"code","00735b7d":"code","15be0b39":"code","223ff973":"code","de0cdf38":"code","8e5d32cc":"code","10402a03":"code","80a6eab0":"code","b01975c1":"code","dbbc55ce":"code","512d19b2":"code","e9b997f6":"code","fdd8c2cb":"code","852175b2":"code","35cf3468":"code","779729ea":"code","a0ee5261":"code","d3fe8807":"code","609876c3":"code","a1e21538":"code","16f7b41e":"code","66c471ea":"code","fa10777f":"code","c01f931a":"code","bbece290":"code","04228d8f":"code","f08c19f3":"code","254388ef":"code","b63e83f6":"code","78c5b384":"code","5d66b897":"code","e9e412d2":"code","a41bac3e":"code","a1d5aa2c":"code","83d22a23":"code","72e93356":"code","08283b6a":"code","9aec1444":"code","7099452b":"code","5d0f2b60":"code","f9bcbbd8":"code","e5ffa2fc":"code","0b62c79e":"code","79d50ac3":"code","6a931f82":"code","4adddb07":"code","16412578":"code","81371771":"code","55157e75":"code","0c5b47b4":"code","a48695a9":"code","cdae7796":"markdown","0718f717":"markdown","c5cd733b":"markdown","5d5a201d":"markdown","a9ed84b9":"markdown","c4a0fd79":"markdown","7dc4107c":"markdown","56444ff0":"markdown","28594ce3":"markdown","ed15c723":"markdown","14af59ef":"markdown","8db0588a":"markdown","9b425262":"markdown","b7a23d40":"markdown","119441e7":"markdown","67c80d72":"markdown","22f6321f":"markdown","66d627cd":"markdown","167d5720":"markdown","d75def36":"markdown","416f9da4":"markdown"},"source":{"02fc4c86":"#Importing library for dataframe\nimport pandas as pd\nimport numpy as np\n#Importing library for suppressing warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n#Importing library for data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Importing library for train-test data split\nfrom sklearn.model_selection import train_test_split\n#Importing library for rescaling the features\nfrom sklearn.preprocessing import MinMaxScaler\n# Importing library to calculate r-squared\nfrom sklearn.metrics import r2_score\n#Importing RFE and Linear Regression for building model\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\n#Importing statsmodel for adding a constant\nimport statsmodels.api as sm","ff19a1a9":"#Reading CarPrice csv file from local\ncar_price = pd.read_csv(\"..\/input\/CarPrice_Assignment.csv\")","2fc09ae6":"#Checking first 5 records of the dataset\ncar_price.head()","30cc850f":"# To display all the columns\npd.set_option('display.max_columns',50)","ce0f2257":"# To check the records of first 5 in the dataset\ncar_price.head()","f677be9a":"#To see the number of rows and columns of the dataset\ncar_price.shape","e39f7e89":"# To check if there are any missing entries.\ncar_price.info()","ebcf5f05":"# To check the statistical parameters of the numerical columns\ncar_price.describe()","751fe352":"# Dropping car models from the CarName column to have only the car brand  names\ncar_price['CarName']=car_price['CarName'].apply(lambda x : x.split(' ')[0])","dc845bdc":"# To see check first 5 records of the dataframe\ncar_price.head()","b6e9c9f3":"#To see what are the unique car brand names\ncar_price['CarName'].unique()","dccd4ba5":"# Renaming CarName values in order to have consistency over car brand names\ndef car_name_replace(a,b):\n    car_price.CarName.replace(a,b,inplace=True)\n    \ncar_name_replace('maxda','mazda')\ncar_name_replace('porcshce','porsche')\ncar_name_replace('toyouta','toyota')\ncar_name_replace('vw','volkswagen')\ncar_name_replace('vokswagen','volkswagen')\ncar_name_replace('Nissan','nissan')","84c42b8f":"#To check the unique car brand names\ncar_price.CarName.unique()","2d8510d1":"# To count number of cars for each brand\nfig, ax = plt.subplots(figsize = (15,5))\ndf=sns.countplot(car_price['CarName'],order = car_price['CarName'].value_counts().index)\ndf.set_xlabel('Car Brands')\ndf.set_ylabel('Count of Cars')\ndf.set_title('Car Brand vs No of Cars')\nplt.xticks(rotation = 90)\nplt.show()\nplt.tight_layout()","c18b69d9":"# Plotting barplots for categorical data vs avg price\ndf=pd.DataFrame(car_price.groupby(['CarName'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Car Company vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['fueltype'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Fuel Type vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['carbody'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Car Body vs Average Price')\nplt.show()","03478034":"# Plotting barplots for categorical data vs avg price\nplt.figure(figsize=(15,10))\ndf=pd.DataFrame(car_price.groupby(['drivewheel'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Drive Wheel vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['aspiration'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Aspiration vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['doornumber'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('No. of doors vs Average Price')\nplt.show()","3c98590d":"# Plotting barplots for categorical data vs avg price\ndf=pd.DataFrame(car_price.groupby(['enginelocation'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Engine Location vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['enginetype'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Engine Types vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['cylindernumber'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('No. of Cylinder vs Average Price')\nplt.show()","e499bcb6":"# Plotting barplots for categorical data vs avg price\ndf=pd.DataFrame(car_price.groupby(['fuelsystem'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Fuel System vs Average Price')\nplt.show()\n\ndf=pd.DataFrame(car_price.groupby(['symboling'])['price'].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title('Symboling vs Average Price')\nplt.show()","41cbea92":"# Checking statistical parameters of the column price of the dataframe\nsns.distplot(car_price['price'])\ncar_price['price'].describe()","84bf128d":"#Wheel base vs Price \ndf=sns.scatterplot(x='wheelbase',y='price',data=car_price)\ndf.set_xlabel('Wheelbase')\ndf.set_ylabel('Price')\nplt.show()","b890f688":"#Plotting Car Size features with the price of the cars.\ndf=sns.scatterplot(x='curbweight',y='price',data=car_price)\ndf.set_xlabel('Curb Weight')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='carlength',y='price',data=car_price)\ndf.set_xlabel('Car Length')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='carwidth',y='price',data=car_price)\ndf.set_xlabel('Car Width')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='carheight',y='price',data=car_price)\ndf.set_xlabel('Car height')\ndf.set_ylabel('Price')\nplt.show()","aa194525":"#Engine features vs price\ndf=sns.scatterplot(x='enginesize',y='price',data=car_price)\ndf.set_xlabel('Engine Size')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='boreratio',y='price',data=car_price)\ndf.set_xlabel('Bore Ratio')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='stroke',y='price',data=car_price)\ndf.set_xlabel('Stroke')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='compressionratio',y='price',data=car_price)\ndf.set_xlabel('Compression Ratio')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='horsepower',y='price',data=car_price)\ndf.set_xlabel('Horse Power')\ndf.set_ylabel('Price')\nplt.show()\n\ndf=sns.scatterplot(x='peakrpm',y='price',data=car_price)\ndf.set_xlabel('Peak RPM')\ndf.set_ylabel('Price')\nplt.show()","44ea0885":"# Creating a common column mileage on putting a formula of citympg*0.55+ highwaympg*0.45\ncar_price['mileage']=car_price['citympg']*0.55 + car_price['highwaympg']*0.45","14c263e6":"#Mileage vs Car prices\ndf=sns.scatterplot(x='mileage',y='price',data=car_price)\ndf.set_xlabel('Mileage')\ndf.set_ylabel('Price')\nplt.show()","fb183830":"#Categorizing the price of the cars into 3 categories - Economy,Standard,Luxury\ncar_price['pricecategory']=car_price['price'].apply(lambda x : \"Economy\" if x < 10000 else (\"Standard\" if 10000<=x<30000 else \"Luxury\"))","39b9e9bb":"# Showing random 10 data with different brand category\ncar_price.sample(10)","cde09212":"#The model based on the analysis done on the variables with respective to the price of the car\nprice_lr=car_price[['fueltype',\n'carbody',\n'drivewheel',\n'aspiration',\n'enginelocation',\n'enginetype',\n'cylindernumber',\n'fuelsystem',\n'wheelbase',\n'curbweight',\n'carlength',\n'carwidth',\n'carheight',\n'enginesize',\n'boreratio',\n'horsepower',\n'pricecategory',\n'mileage',\n'price']]","00735b7d":"price_lr.head()","15be0b39":"# Visualising the numerical columns using pair plot\nplt.figure(figsize=(15,15))\nsns.pairplot(price_lr)\nplt.show()","223ff973":"# Plotting box plots for Categorical Variables\nplt.figure(figsize=(15,25))\nplt.subplot(5,2,1)\nsns.boxplot(x='fueltype',y='price',data=price_lr)\n\nplt.subplot(5,2,2)\nsns.boxplot(x='carbody',y='price',data=price_lr)\n\nplt.subplot(5,2,3)\nsns.boxplot(x='drivewheel',y='price',data=price_lr)\n\nplt.subplot(5,2,4)\nsns.boxplot(x='aspiration',y='price',data=price_lr)\n\nplt.subplot(5,2,5)\nsns.boxplot(x='enginelocation',y='price',data=price_lr)\n\nplt.subplot(5,2,6)\nsns.boxplot(x='enginetype',y='price',data=price_lr)\n\nplt.subplot(5,2,7)\nsns.boxplot(x='cylindernumber',y='price',data=price_lr)\n\nplt.subplot(5,2,8)\nsns.boxplot(x='fuelsystem',y='price',data=price_lr)\n\nplt.subplot(5,2,9)\nsns.boxplot(x='pricecategory',y='price',data=price_lr)","de0cdf38":"# Creating dummy variables to change categorical variable into numerical variable","8e5d32cc":"cylinder_no = pd.get_dummies(price_lr['cylindernumber'], drop_first = True)\nprice_lr = pd.concat([price_lr, cylinder_no], axis = 1)","10402a03":"fuel_type = pd.get_dummies(price_lr['fueltype'], drop_first = True)\nprice_lr = pd.concat([price_lr, fuel_type], axis = 1)","80a6eab0":"car_body = pd.get_dummies(price_lr['carbody'], drop_first = True)\nprice_lr = pd.concat([price_lr, car_body], axis = 1)","b01975c1":"drive_wheel = pd.get_dummies(price_lr['drivewheel'], drop_first = True)\nprice_lr = pd.concat([price_lr, drive_wheel], axis = 1)","dbbc55ce":"asp = pd.get_dummies(price_lr['aspiration'], drop_first = True)\nprice_lr = pd.concat([price_lr, asp], axis = 1)","512d19b2":"engine_location = pd.get_dummies(price_lr['enginelocation'], drop_first = True)\nprice_lr = pd.concat([price_lr, engine_location], axis = 1)","e9b997f6":"engine_type = pd.get_dummies(price_lr['enginetype'], drop_first = True)\nprice_lr = pd.concat([price_lr, engine_type], axis = 1)","fdd8c2cb":"fuel_system = pd.get_dummies(price_lr['fuelsystem'], drop_first = True)\nprice_lr = pd.concat([price_lr, fuel_system], axis = 1)","852175b2":"price_category = pd.get_dummies(price_lr['pricecategory'], drop_first = True)\nprice_lr = pd.concat([price_lr, price_category], axis = 1)","35cf3468":"price_lr.head()","779729ea":"price_lr=price_lr.drop(['fueltype','carbody','drivewheel','aspiration','enginelocation','enginetype','cylindernumber','fuelsystem','pricecategory'],axis=1)","a0ee5261":"price_lr.head()","d3fe8807":"#To check the number of rows and columns of the new dataframe created for linear regression\nprice_lr.shape","609876c3":"#Splitting data into train data set and test data set\nnp.random.seed(0)\ndf_train , df_test = train_test_split(price_lr , train_size = 0.7, random_state = 100)","a1e21538":"#Feature Scaling using MinMax scaler\nscaler = MinMaxScaler()\nnum_vars=['wheelbase','curbweight','carlength','carwidth','carheight','enginesize','boreratio','horsepower','mileage','price']\ndf_train[num_vars]=scaler.fit_transform(df_train[num_vars])","16f7b41e":"df_train.head()","66c471ea":"df_train.describe()","fa10777f":"#Correlation using heatmap\nplt.figure(figsize=(30,30))\nsns.heatmap(df_train.corr(),annot=True,cmap='YlGnBu')\nplt.show()","c01f931a":"# Dividing data into X and Y\ny_train = df_train.pop('price')\nX_train = df_train","bbece290":"#Running RFE with the output number of variables equal to 10\nlm = LinearRegression()\nlm.fit(X_train,y_train)\n#Running RFE\nrfe = RFE(lm,10)\nrfe = rfe.fit(X_train,y_train)","04228d8f":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","f08c19f3":"col = X_train.columns[rfe.support_]\ncol","254388ef":"X_train.columns[~rfe.support_]","b63e83f6":"#Creating X_train dataframe with RFE selected variables\nX_train_rfe = X_train[col]","78c5b384":"#Adding a constant variable\nX_train_rfe= sm.add_constant(X_train_rfe)","5d66b897":"#Running the linear model\nlm = sm.OLS(y_train,X_train_rfe).fit()","e9e412d2":"#Summary of the linear model\nprint(lm.summary())","a41bac3e":"#Calculating VIF for the model\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a1d5aa2c":"#dropping enginesize due to high p-value and VIF\nX_train_new = X_train_rfe.drop(['enginesize'],axis=1) ","83d22a23":"#Adding a constant variable and creating a new model\nX_train_lm = sm.add_constant(X_train_new)\nlm = sm.OLS(y_train,X_train_new).fit()\nprint(lm.summary())","72e93356":"#Removing boreratio due to high p-value\nX_train_new1=X_train_new.drop(['boreratio'],axis=1)","08283b6a":"#Adding a constant variable\nX_train_lm = sm.add_constant(X_train_new1)\nlm = sm.OLS(y_train,X_train_lm).fit()\nprint(lm.summary())","9aec1444":"#Dropping curbweight due to high p -value and creating a new model\n\nX_train_new2=X_train_new1.drop(['curbweight'],axis=1)\nX_train_lm = sm.add_constant(X_train_new2)\nlm = sm.OLS(y_train,X_train_lm).fit()\nprint(lm.summary())","7099452b":"# Dropping the feature const from the dataframe\nX_train_new2=X_train_new2.drop(['const'],axis=1)","5d0f2b60":"#Since all the p-values are less than 0.05, we will check for the VIFs for the new model\nvif = pd.DataFrame()\nX = X_train_new2\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","f9bcbbd8":"#Removing carwidth due to high VIF value and rebuilding the model\nX_train_new3=X_train_new2.drop(['carwidth'],axis=1)\nX_train_lm = sm.add_constant(X_train_new3)\nlm = sm.OLS(y_train,X_train_lm).fit()\nprint(lm.summary())","e5ffa2fc":"#Since all the p-values are less than 0.05, we will check for the VIFs for the new model\nvif = pd.DataFrame()\nX = X_train_new3\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","0b62c79e":"# Need to check if the errors are also normally distributed\ny_train_price = lm.predict(X_train_lm)","79d50ac3":"#Plotting distribution plot for the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price),bins=20)\nfig.suptitle('Error Terms',fontsize=20)\nplt.xlabel('Errors',fontsize=18)","6a931f82":"#Scaling the test set\nnum_vars=['wheelbase','curbweight','carlength','carwidth','carheight','enginesize','boreratio','horsepower','mileage','price']\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","4adddb07":"y_test = df_test.pop('price')\nX_test = df_test","16412578":"#Creating X_test_new containing only those columns which were used to train dataset\nX_test_new = X_test[['horsepower','four','rwd','dohcv','rotor','Luxury']]","81371771":"#Adding a constant to the X test\nX_test_new = sm.add_constant(X_test_new)","55157e75":"#Predicting y based on X test data set\ny_pred = lm.predict(X_test_new)","0c5b47b4":"#Calculating r2 score between y_test and y_pred\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","a48695a9":"fig = plt.figure()\nplt.scatter(y_test, y_pred)\nfig.suptitle('y_test vs y_pred', fontsize = 20)              # Plot heading \nplt.xlabel('y_test', fontsize = 18)                          # X-label\nplt.ylabel('y_pred', fontsize = 16)","cdae7796":"### Building model using statsmodel, for the detailed statistics","0718f717":"### Residual Analysis of the train data","c5cd733b":"1. Engine Size, Bore ratio and Horse Power have a correlation with the price of the car\n2. Peak RPM,Compression Ratio and Stroke have no correlation with the price of the car\n","5d5a201d":"1. Curbweight,Car Length and Car Width seem to have correlation with the Price\n2. There is no significant correlation of Car height with the price.","a9ed84b9":"### Model Evaluation","c4a0fd79":"1. Drivewheel and Aspiration have an impact on the price.\n2. Rear wheel drive are the most expensive compared to 4wd and fwd drivewheels\n3. Turbo aspiration are pricier than std.\n4. The number of doors has no impact on the price.","7dc4107c":"## Data Visualisation","56444ff0":"1. Most of the cars are priced less than 10000.\n2. There is a huge difference between the mean and median of the car prices\n3. There is a huge variance in the car prices.","28594ce3":"Based on above information , there are no missing entries.","ed15c723":"Mileage has negative correlation with the price of the car.","14af59ef":"1. Engine Location , Engine Types and No. of Cylinders are all impacting the price of the car\n2. Rear Engine Location car models are expensive than front engine types.\n3. dochv engine type are the most expensive.\n4. Eight and twelve cylinders in a car make the cars expensive.","8db0588a":"We can see that the best fitted line is provided by the equation:\n\n##### price = 0.3857*horsepower - 0.1060*four + 0.1285*rwd - 0.2791*dohcv -0.1567*rotor + 0.3434*Luxury","9b425262":"Fuelsystem and Symboling have impact on price of the car.","b7a23d40":"1. Jaguar and Buick are the most expensive brands\n2. Diesel cars are more expensive than Gas Cars\n3. Hardtop and Convertible are the most expensive cars and hatchback the least.","119441e7":" Based on the multiple graph plots of numerical and categorical data vs price we conclude that the below variables have correlation with price\n\n1. fueltype\n2. carbody\n3. drivewheel\n4. aspiration\n5. enginelocation\n6. enginetype\n7. cylindernumber\n8. fuelsystem\n9. symboling\n10. wheelbase\n11. curbweight\n12. carlength\n13. carwidth\n14. carheight\n15. enginesize\n16. boreratio\n17. horsepower\n18. mileage\n19. pricecategory","67c80d72":"#### Visualising the data for Categorical Variables with Price\n1. fueltype\n2. aspiration\n3. doornumber\n4. carbody\n5. drivewheel\n6. enginelocation\n7. enginetype\n8. cylindernumber\n9. fuelsystem\n10. CarName\n11. Symboling","22f6321f":"### Making predictions\nApplying the scaling on the test dataset","66d627cd":"#### Visualizing the numerical data with price\n1. wheelbase\n2. carlength\n3. carwidth\n4. carheight\n5. curbweight\n6. enginesize\n7. boreratio\n8. stroke\t\t\n9. compressionratio\t\t\n10. horsepower\t\t\n11. peakrpm\t\t\n12. citympg\t\t\n13. highwaympg\n14. price","167d5720":"## Linear Regression","d75def36":"There seems to be correlation of Wheelbase with the price of the car.","416f9da4":"Due to the dummy variables being either 0 and 1. The other variables are to be scaled to have acomparable scale."}}