{"cell_type":{"3094f3fa":"code","76c96a3e":"code","033c6b92":"code","7a805415":"code","6699f95b":"code","0ccfc3a5":"code","bbedd3be":"code","114bf1bc":"code","2120188a":"code","123c2f7e":"code","a4f977ce":"code","d686c858":"markdown","4657eb3b":"markdown","1aa3f6e0":"markdown","0f3f95f6":"markdown","dfa1cc1f":"markdown","4f1446a9":"markdown","ed0fca9c":"markdown"},"source":{"3094f3fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76c96a3e":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","033c6b92":"class_mushrooms = [1 if i == \"e\" else 0 for i in data['class']]\nbruises = [1 if i == \"t\" else 0 for i in data['bruises']]\ngill_size = [1 if i == \"b\" else 0 for i in data['gill-size']] \nstalk_shape = [1 if i == \"e\" else 0 for i in data['stalk-shape']]\nveil_type = [1 if i == \"p\" else 0 for i in data['veil-type']]\n\n# ring-number (\u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u0435\u0446): none=n,one=o,two=t\nring_number = [] \nfor i in data['ring-number']:\n    if i == \"n\":\n        ring_number.append(0)\n    elif i == \"o\":\n        ring_number.append(0.5)\n    else:\n        ring_number.append(1)\n","7a805415":"# cap_shape bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\ncap_shape_bell = [1 if i == \"b\" else 0 for i in data['cap-shape']]\ncap_shape_conical = [1 if i == \"c\" else 0 for i in data['cap-shape']]\ncap_shape_convex = [1 if i == \"x\" else 0 for i in data['cap-shape']]\ncap_shape_flat = [1 if i == \"f\" else 0 for i in data['cap-shape']]\ncap_shape_knobbed = [1 if i == \"k\" else 0 for i in data['cap-shape']]\ncap_shape_sunken = [1 if i == \"s\" else 0 for i in data['cap-shape']]\n\n# cap-surface (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c \u0448\u043b\u044f\u043f\u043a\u0438): fibrous=f,grooves=g,scaly=y,smooth=s\ncap_surface_fibrous = [1 if i == \"f\" else 0 for i in data['cap-surface']]\ncap_surface_grooves = [1 if i == \"g\" else 0 for i in data['cap-surface']]\ncap_surface_scaly = [1 if i == \"y\" else 0 for i in data['cap-surface']]\ncap_surface_smooth = [1 if i == \"s\" else 0 for i in data['cap-surface']]\n\n# cap-color (\u0446\u0432\u0435\u0442 \u0448\u043b\u044f\u043f\u043a\u0438): brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\ncap_color_brown = [1 if i == \"n\" else 0 for i in data['cap-color']]\ncap_color_buff = [1 if i == \"b\" else 0 for i in data['cap-color']]\ncap_color_cinnamon = [1 if i == \"c\" else 0 for i in data['cap-color']]\ncap_color_gray = [1 if i == \"g\" else 0 for i in data['cap-color']]\ncap_color_green = [1 if i == \"r\" else 0 for i in data['cap-color']]\ncap_color_pink = [1 if i == \"p\" else 0 for i in data['cap-color']]\ncap_color_purple = [1 if i == \"u\" else 0 for i in data['cap-color']]\ncap_color_red = [1 if i == \"e\" else 0 for i in data['cap-color']]\ncap_color_white = [1 if i == \"w\" else 0 for i in data['cap-color']]\ncap_color_ellow = [1 if i == \"y\" else 0 for i in data['cap-color']]\n\n# odor (\u0437\u0430\u043f\u0430\u0445): almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\nodor_almond = [1 if i == \"a\" else 0 for i in data['odor']]\nodor_anise = [1 if i == \"l\" else 0 for i in data['odor']]\nodor_creosote = [1 if i == \"c\" else 0 for i in data['odor']]\nodor_fishy = [1 if i == \"y\" else 0 for i in data['odor']]\nodor_foul = [1 if i == \"f\" else 0 for i in data['odor']]\nodor_musty = [1 if i == \"m\" else 0 for i in data['odor']]\nodor_pungent = [1 if i == \"p\" else 0 for i in data['odor']]\nodor_spicy = [1 if i == \"s\" else 0 for i in data['odor']]\n\n# gill-attachment (\u0442\u0438\u043f\u044b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u043b\u0430\u0441\u0442\u0438\u043d\u043e\u043a \u0441 \u043d\u043e\u0436\u043a\u043e\u0439): attached=a,descending=d,free=f,notched=n\ngill_attachment_attached = [1 if i == \"a\" else 0 for i in data['gill-attachment']]\ngill_attachment_descending = [1 if i == \"d\" else 0 for i in data['gill-attachment']]\ngill_attachment_free = [1 if i == \"f\" else 0 for i in data['gill-attachment']]\ngill_attachment_otched = [1 if i == \"n\" else 0 for i in data['gill-attachment']]\n\n# gill-spacing (\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0433\u0438\u043c\u0435\u043d\u0430\u0444\u043e\u0440\u0430): close=c,crowded=w,distant=d\ngill_spacing_close = [1 if i == \"c\" else 0 for i in data['gill-spacing']]\ngill_spacing_crowded = [1 if i == \"w\" else 0 for i in data['gill-spacing']]\ngill_spacing_distant = [1 if i == \"d\" else 0 for i in data['gill-spacing']]\n\n# gill-color (\u0446\u0432\u0435\u0442 \u0433\u0438\u043c\u0435\u043d\u0430\u0444\u043e\u0440\u0430): black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,\n# pink=p,purple=u,red=e,white=w,yellow=y\ngill_color_black = [1 if i == \"k\" else 0 for i in data['gill-color']]\ngill_color_brown = [1 if i == \"n\" else 0 for i in data['gill-color']]\ngill_color_buff = [1 if i == \"b\" else 0 for i in data['gill-color']]\ngill_color_chocolate = [1 if i == \"h\" else 0 for i in data['gill-color']]\ngill_color_gray = [1 if i == \"g\" else 0 for i in data['gill-color']]\ngill_color_green = [1 if i == \"r\" else 0 for i in data['gill-color']]\ngill_color_orange = [1 if i == \"o\" else 0 for i in data['gill-color']]\ngill_color_pink = [1 if i == \"p\" else 0 for i in data['gill-color']]\ngill_color_purple = [1 if i == \"u\" else 0 for i in data['gill-color']]\ngill_color_red = [1 if i == \"e\" else 0 for i in data['gill-color']]\ngill_color_white = [1 if i == \"w\" else 0 for i in data['gill-color']]\ngill_color_yellow = [1 if i == \"y\" else 0 for i in data['gill-color']]\n\n# stalk-root (\u043a\u043e\u0440\u0435\u043d\u044c \u043d\u043e\u0436\u043a\u0438): bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\nstalk_root_bulbous = [1 if i == \"b\" else 0 for i in data['stalk-root']]\nstalk_root_club = [1 if i == \"c\" else 0 for i in data['stalk-root']]\nstalk_root_cup = [1 if i == \"u\" else 0 for i in data['stalk-root']]\nstalk_root_equal = [1 if i == \"e\" else 0 for i in data['stalk-root']]\nstalk_root_rhizomorphs = [1 if i == \"z\" else 0 for i in data['stalk-root']]\nstalk_root_rooted = [1 if i == \"r\" else 0 for i in data['stalk-root']]\nstalk_root_missing = [1 if i == \"?\" else 0 for i in data['stalk-root']]\n\n# stalk-surface-above-ring (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): fibrous=f,scaly=y,silky=k,smooth=s\n# stalk-surface-below-ring (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): fibrous=f,scaly=y,silky=k,smooth=s\nstalk_surface_above_ring_fibrous = [1 if i == \"f\" else 0 for i in data['stalk-surface-above-ring']]\nstalk_surface_above_ring_scaly = [1 if i == \"y\" else 0 for i in data['stalk-surface-above-ring']]\nstalk_surface_above_ring_silky = [1 if i == \"k\" else 0 for i in data['stalk-surface-above-ring']]\nstalk_surface_above_ring_smooth = [1 if i == \"k\" else 0 for i in data['stalk-surface-above-ring']]\n\nstalk_surface_below_ring_fibrous = [1 if i == \"f\" else 0 for i in data['stalk-surface-below-ring']]\nstalk_surface_below_ring_scaly = [1 if i == \"y\" else 0 for i in data['stalk-surface-below-ring']]\nstalk_surface_below_ring_silky = [1 if i == \"k\" else 0 for i in data['stalk-surface-below-ring']]\nstalk_surface_below_ring_smooth = [1 if i == \"k\" else 0 for i in data['stalk-surface-below-ring']]\n\n# stalk-color-above-ring (\u0446\u0432\u0435\u0442 \u043d\u0430\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n# stalk-color-below-ring (\u0446\u0432\u0435\u0442 \u043f\u043e\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\nstalk_color_above_ring_brown = [1 if i == \"n\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_buff = [1 if i == \"b\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_cinnamon = [1 if i == \"c\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_gray = [1 if i == \"g\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_orange = [1 if i == \"o\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_pink = [1 if i == \"p\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_red = [1 if i == \"e\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_white = [1 if i == \"w\" else 0 for i in data['stalk-color-above-ring']]\nstalk_color_above_ring_yellow = [1 if i == \"y\" else 0 for i in data['stalk-color-above-ring']]\n\nstalk_color_below_ring_brown = [1 if i == \"n\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_buff = [1 if i == \"b\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_cinnamon = [1 if i == \"c\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_gray = [1 if i == \"g\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_orange = [1 if i == \"o\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_pink = [1 if i == \"p\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_red = [1 if i == \"e\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_white = [1 if i == \"w\" else 0 for i in data['stalk-color-below-ring']]\nstalk_color_below_ring_yellow = [1 if i == \"y\" else 0 for i in data['stalk-color-below-ring']]\n\n# veil-color (\u0446\u0432\u0435\u0442 \u0432\u043e\u043b\u044c\u0432\u044b): brown=n,orange=o,white=w,yellow=y\nveil_color_brown = [1 if i == \"n\" else 0 for i in data['veil-color']]\nveil_color_orange = [1 if i == \"o\" else 0 for i in data['veil-color']]\nveil_color_white = [1 if i == \"w\" else 0 for i in data['veil-color']]\nveil_color_yellow = [1 if i == \"y\" else 0 for i in data['veil-color']]\n\n# ring-type (\u0442\u0438\u043f \u043a\u043e\u043b\u044c\u0446\u0430): cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\nring_type_cobwebby = [1 if i == \"c\" else 0 for i in data['ring-type']]\nring_type_evanescent = [1 if i == \"e\" else 0 for i in data['ring-type']]\nring_type_flaring = [1 if i == \"f\" else 0 for i in data['ring-type']]\nring_type_large = [1 if i == \"l\" else 0 for i in data['ring-type']]\nring_type_pendant = [1 if i == \"p\" else 0 for i in data['ring-type']]\nring_type_sheathing = [1 if i == \"s\" else 0 for i in data['ring-type']]\nring_type_zone = [1 if i == \"z\" else 0 for i in data['ring-type']]\n\n# spore-print-color (\u0446\u0432\u0435\u0442 \u0441\u043f\u043e\u0440): black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\nspore_print_color_black = [1 if i == \"k\" else 0 for i in data['spore-print-color']]\nspore_print_color_brown = [1 if i == \"n\" else 0 for i in data['spore-print-color']]\nspore_print_color_buff = [1 if i == \"b\" else 0 for i in data['spore-print-color']]\nspore_print_color_chocolate = [1 if i == \"h\" else 0 for i in data['spore-print-color']]\nspore_print_color_green = [1 if i == \"r\" else 0 for i in data['spore-print-color']]\nspore_print_color_orange = [1 if i == \"o\" else 0 for i in data['spore-print-color']]\nspore_print_color_purple = [1 if i == \"u\" else 0 for i in data['spore-print-color']]\nspore_print_color_white = [1 if i == \"w\" else 0 for i in data['spore-print-color']]\nspore_print_color_yellow = [1 if i == \"y\" else 0 for i in data['spore-print-color']]\n                            \n# population (\u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u044f): abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\npopulation_abundant = [1 if i == \"a\" else 0 for i in data['population']]\npopulation_clustered = [1 if i == \"c\" else 0 for i in data['population']]\npopulation_numerous = [1 if i == \"n\" else 0 for i in data['population']]\npopulation_scattered = [1 if i == \"s\" else 0 for i in data['population']]\npopulation_several = [1 if i == \"v\" else 0 for i in data['population']]\npopulation_solitary = [1 if i == \"y\" else 0 for i in data['population']]\n\n# habitat (\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0438\u0442\u0430\u043d\u0438\u044f): grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\nhabitat_grasses = [1 if i == \"g\" else 0 for i in data['habitat']]\nhabitat_leaves = [1 if i == \"l\" else 0 for i in data['habitat']]\nhabitat_meadows = [1 if i == \"m\" else 0 for i in data['habitat']]\nhabitat_paths = [1 if i == \"p\" else 0 for i in data['habitat']]\nhabitat_urban = [1 if i == \"u\" else 0 for i in data['habitat']]\nhabitat_waste = [1 if i == \"w\" else 0 for i in data['habitat']]\nhabitat_woods = [1 if i == \"d\" else 0 for i in data['habitat']]\n","6699f95b":"data_mushrooms = pd.DataFrame({\"class_mushrooms\": class_mushrooms, \"bruises\": bruises, \"gill_size\": gill_size, \"stalk_shape\": stalk_shape, \"veil_type\": veil_type, \"ring_number\": ring_number, \"cap_shape_bell\": cap_shape_bell, \n                               \"cap_shape_conical\": cap_shape_conical, \"cap_shape_convex\": cap_shape_convex, \"cap_shape_flat\": cap_shape_flat, \"cap_shape_knobbed\": cap_shape_knobbed, \"cap_shape_sunken\": cap_shape_sunken, \n                               \"cap_surface_fibrous\": cap_surface_fibrous, \"cap_surface_grooves\": cap_surface_grooves, \"cap_surface_scaly\": cap_surface_scaly, \"cap_surface_smooth\": cap_surface_smooth,\n                               \"cap_color_brown\": cap_color_brown, \"cap_color_buff\": cap_color_buff, \"cap_color_cinnamon\": cap_color_cinnamon, \"cap_color_gray\": cap_color_gray, \"cap_color_green\": cap_color_green, \"cap_color_pink\": cap_color_pink, \"cap_color_purple\": cap_color_purple, \"cap_color_red\": cap_color_red, \"cap_color_white\": cap_color_white, \"cap_color_ellow\": cap_color_ellow,\n                               \"odor_almond\": odor_almond, \"odor_anise\": odor_anise, \"odor_creosote\": odor_creosote, \"odor_fishy\": odor_fishy, \"odor_foul\": odor_foul, \"odor_musty\": odor_musty, \"odor_pungent\": odor_pungent, \"odor_spicy\": odor_spicy,\n                               \"gill_attachment_attached\": gill_attachment_attached, \"gill_attachment_descending\": gill_attachment_descending, \"gill_attachment_free\": gill_attachment_free, \"gill_attachment_otched\": gill_attachment_otched,\n                               \"gill_spacing_close\": gill_spacing_close, \"gill_spacing_crowded\": gill_spacing_crowded, \"gill_spacing_distant\": gill_spacing_distant,\n                               \"gill_color_black\": gill_color_black, \"gill_color_brown\": gill_color_brown, \"gill_color_buff\": gill_color_buff, \"gill_color_chocolate\": gill_color_chocolate, \"gill_color_gray\": gill_color_gray, \"gill_color_green\": gill_color_green, \"gill_color_orange\": gill_color_orange, \"gill_color_pink\": gill_color_pink, \"gill_color_purple\": gill_color_purple, \"gill_color_red\": gill_color_red, \"gill_color_white\": gill_color_white, \"gill_color_yellow\": gill_color_yellow,\n                               \"stalk_root_bulbous\": stalk_root_bulbous, \"stalk_root_club\": stalk_root_club, \"stalk_root_cup\": stalk_root_cup, \"stalk_root_equal\": stalk_root_equal, \"stalk_root_rhizomorphs\": stalk_root_rhizomorphs, \"stalk_root_rooted\": stalk_root_rooted, \"stalk_root_missing\": stalk_root_missing,\n                               \"stalk_surface_above_ring_fibrous\": stalk_surface_above_ring_fibrous, \"stalk_surface_above_ring_scaly\": stalk_surface_above_ring_scaly, \"stalk_surface_above_ring_silky\": stalk_surface_above_ring_silky, \"stalk_surface_above_ring_smooth\": stalk_surface_above_ring_smooth, \"stalk_surface_below_ring_fibrous\": stalk_surface_below_ring_fibrous, \"stalk_surface_below_ring_scaly\": stalk_surface_below_ring_scaly, \"stalk_surface_below_ring_silky\": stalk_surface_below_ring_silky, \"stalk_surface_below_ring_smooth\": stalk_surface_below_ring_smooth, \n                               \"stalk_color_above_ring_brown\": stalk_color_above_ring_brown, \"stalk_color_above_ring_buff\": stalk_color_above_ring_buff, \"stalk_color_above_ring_cinnamon\": stalk_color_above_ring_cinnamon, \"stalk_color_above_ring_gray\": stalk_color_above_ring_gray, \"stalk_color_above_ring_orange\": stalk_color_above_ring_orange, \"stalk_color_above_ring_pink\": stalk_color_above_ring_pink, \"stalk_color_above_ring_red\": stalk_color_above_ring_red, \"stalk_color_above_ring_white\": stalk_color_above_ring_white, \"stalk_color_above_ring_yellow\": stalk_color_above_ring_yellow, \"stalk_color_below_ring_brown\": stalk_color_below_ring_brown, \"stalk_color_below_ring_buff\": stalk_color_below_ring_buff, \"stalk_color_below_ring_cinnamon\": stalk_color_below_ring_cinnamon, \"stalk_color_below_ring_gray\": stalk_color_below_ring_gray, \"stalk_color_below_ring_orange\": stalk_color_below_ring_orange, \"stalk_color_below_ring_pink\": stalk_color_below_ring_pink, \"stalk_color_below_ring_red\": stalk_color_below_ring_red, \"stalk_color_below_ring_white\": stalk_color_below_ring_white, \"stalk_color_below_ring_yellow\": stalk_color_below_ring_yellow,\n                               \"veil_color_brown\": veil_color_brown, \"veil_color_orange\": veil_color_orange, \"veil_color_white\": veil_color_white, \"veil_color_yellow\": veil_color_yellow, \n                               \"ring_type_cobwebby\": ring_type_cobwebby, \"ring_type_evanescent\": ring_type_evanescent, \"ring_type_flaring\": ring_type_flaring, \"ring_type_large\": ring_type_large, \"ring_type_pendant\": ring_type_pendant, \"ring_type_sheathing\": ring_type_sheathing, \"ring_type_zone\": ring_type_zone,\n                               \"spore_print_color_black\": spore_print_color_black, \"spore_print_color_brown\": spore_print_color_brown, \"spore_print_color_buff\": spore_print_color_buff, \"spore_print_color_chocolate\": spore_print_color_chocolate, \"spore_print_color_green\": spore_print_color_green, \"spore_print_color_orange\": spore_print_color_orange, \"spore_print_color_purple\": spore_print_color_purple, \"spore_print_color_white\": spore_print_color_white, \"spore_print_color_yellow\": spore_print_color_yellow, \n                               \"population_abundant\": population_abundant, \"population_clustered\": population_clustered, \"population_numerous\": population_numerous, \"population_scattered\": population_scattered, \"population_several\": population_several, \"population_solitary\": population_solitary,\n                               \"habitat_grasses\": habitat_grasses, \"habitat_leaves\": habitat_leaves, \"habitat_meadows\": habitat_meadows, \"habitat_paths\": habitat_paths, \"habitat_urban\": habitat_urban, \"habitat_waste\": habitat_waste, \"habitat_woods\": habitat_woods})","0ccfc3a5":"X = data_mushrooms.drop(\"class_mushrooms\", axis=1)\nX.head()","bbedd3be":"from sklearn.cluster import KMeans\n# 89.84490398818316 accuracy\nmodel = KMeans(n_clusters=2)\nmodel.fit(X)","114bf1bc":"from joblib import dump\ndump(model, \"cluster_mushrooms.joblib\")","2120188a":"all_predict = model.predict(X)\nprint(all_predict)","123c2f7e":"y = data_mushrooms.class_mushrooms\nlen(y)","a4f977ce":"summ = 0\nfor i in range(len(y)):\n    if all_predict[i] == y[i]:\n        summ += 1\nsumm \/ len(y) * 100","d686c858":"## save model","4657eb3b":"# Mushrooms\n\nData Set Information:\n\nThis data set includes descriptions of hypothetical samples corresponding to 23 species of gilled mushrooms in the Agaricus and Lepiota Family (pp. 500-525). Each species is identified as definitely edible, definitely poisonous, or of unknown edibility and not recommended. This latter class was combined with the poisonous one. The Guide clearly states that there is no simple rule for determining the edibility of a mushroom; no rule like \"leaflets three, let it be\" for Poisonous Oak and Ivy.\n\n\nAttribute Information: \n\n1. classes: edible=e, poisonous=p (\u0441\u044a\u0435\u0434\u043e\u0431\u043d\u044b\u0435, \u043d\u0435\u0441\u044a\u0435\u0434\u043e\u0431\u043d\u044b\u0435)\n2. cap-shape (\u0444\u043e\u0440\u043c\u0430 \u0448\u043b\u044f\u043f\u043a\u0438): bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n3. cap-surface (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c \u0448\u043b\u044f\u043f\u043a\u0438): fibrous=f,grooves=g,scaly=y,smooth=s\n4. cap-color (\u0446\u0432\u0435\u0442 \u0448\u043b\u044f\u043f\u043a\u0438): brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n5. bruises (\u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f): bruises=t,no=f\n6. odor (\u0437\u0430\u043f\u0430\u0445): almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n7. gill-attachment (\u0442\u0438\u043f\u044b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u043b\u0430\u0441\u0442\u0438\u043d\u043e\u043a \u0441 \u043d\u043e\u0436\u043a\u043e\u0439): attached=a,descending=d,free=f,notched=n\n8. gill-spacing (\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0433\u0438\u043c\u0435\u043d\u0430\u0444\u043e\u0440\u0430): close=c,crowded=w,distant=d\n9. gill-size (\u0440\u0430\u0437\u043c\u0435\u0440 \u0433\u0438\u043c\u0435\u043d\u0430\u0444\u043e\u0440\u0430 ): broad=b,narrow=n\n10. gill-color (\u0446\u0432\u0435\u0442 \u0433\u0438\u043c\u0435\u043d\u0430\u0444\u043e\u0440\u0430): black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y \n11. stalk-shape (\u0444\u043e\u0440\u043c\u0430 \u043d\u043e\u0436\u043a\u0438): enlarging=e,tapering=t\n12. stalk-root (\u043a\u043e\u0440\u0435\u043d\u044c \u043d\u043e\u0436\u043a\u0438): bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n13. stalk-surface-above-ring (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-surface-below-ring (\u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): fibrous=f,scaly=y,silky=k,smooth=s\n15. stalk-color-above-ring (\u0446\u0432\u0435\u0442 \u043d\u0430\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n16. stalk-color-below-ring (\u0446\u0432\u0435\u0442 \u043f\u043e\u0434 \u043a\u043e\u043b\u044c\u0446\u043e\u043c): brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n17. veil-type (\u0442\u0438\u043f \u0432\u043e\u043b\u044c\u0432\u044b): partial=p,universal=u\n18. veil-color (\u0446\u0432\u0435\u0442 \u0432\u043e\u043b\u044c\u0432\u044b): brown=n,orange=o,white=w,yellow=y\n19. ring-number (\u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u0435\u0446): none=n,one=o,two=t\n20. ring-type (\u0442\u0438\u043f \u043a\u043e\u043b\u044c\u0446\u0430): cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n21. spore-print-color (\u0446\u0432\u0435\u0442 \u0441\u043f\u043e\u0440): black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n22. population (\u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u044f): abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n23. habitat (\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0438\u0442\u0430\u043d\u0438\u044f): grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\n\n","1aa3f6e0":"## predict","0f3f95f6":"# data preparation\n","dfa1cc1f":"## accuracy","4f1446a9":"# KMeans\n\n\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0443\u0447\u0438\u0442\u0435\u043b\u044f (unsupervised learning, \u043d\u0435\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435) \u2013 \u043a\u043b\u0430\u0441\u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0430\u043d\u043d\u044b\u0435, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0430\u043a\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043e\u0431\u044b\u0447\u043d\u043e \u043d\u0435 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 X \u0431\u0435\u0437 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u0435\u0442\u043e\u043a y. \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 (\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u043c, supervised learning) \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0443\u0440\u043e\u043a\u0438 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u0442\u043e \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0431\u0435\u0437 \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u2013 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0440\u0430\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0438\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430.\n\n## \u041c\u0435\u0442\u043e\u0434 k-\u0441\u0440\u0435\u0434\u043d\u0438\u0445\n\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 k-\u0441\u0440\u0435\u0434\u043d\u0438\u0445. \u042d\u0442\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u044b\u0445 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439 \u0442\u043e\u0447\u0435\u043a \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u043e\u0438\u0434\u043e\u0432 (\u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442) \u044d\u0442\u0438\u0445 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432.\n","ed0fca9c":"## Model and fitting"}}