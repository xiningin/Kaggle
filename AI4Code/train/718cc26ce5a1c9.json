{"cell_type":{"2c334c61":"code","c7703e34":"code","b4cca44b":"code","f3577051":"code","24a369eb":"code","b9624935":"code","2115b9d7":"code","ce590f81":"code","fbf0687c":"code","d022c642":"code","e40de43b":"code","68e83260":"code","837ed80c":"code","1c53b0d8":"code","3f405917":"code","870dd47a":"code","09cae4ee":"code","147e3fe3":"code","d11e2e90":"code","b0f5355e":"code","f78aa363":"code","547628fd":"code","06f883a7":"code","ac40c790":"code","475a251b":"code","37889dc0":"code","a290989f":"code","4e1caabc":"code","033a50a6":"code","f8b95c65":"code","0ddd177b":"code","a2167971":"code","95f803ad":"code","db725b61":"code","fe4e08bd":"code","e1b6bcb8":"code","cc33b5b1":"code","87f2426f":"code","50f5648a":"code","5a1a4698":"code","4ba886c8":"code","2d63debf":"code","89bbb84a":"code","6bd70c9a":"code","2d6a698b":"code","d5e51747":"code","89ff046f":"code","6c44c411":"code","9601f163":"code","c30062cc":"code","c7088fb7":"code","c7477560":"code","bfca6218":"code","95ac44ab":"code","ad5ef0db":"code","c9763849":"markdown","6996f211":"markdown","d6dea3ed":"markdown","d40a5a76":"markdown","271a7c72":"markdown","bc294943":"markdown","57dba084":"markdown","30dac091":"markdown","3f8a8911":"markdown","489191ba":"markdown","c32f0ab6":"markdown","73a7404a":"markdown","ba392e75":"markdown","02d70eb7":"markdown","ee90468e":"markdown","7499c9b0":"markdown","89ea3adc":"markdown","f8601e98":"markdown","af5ad593":"markdown","2ebc2a2d":"markdown","351f68b8":"markdown","c77f861a":"markdown","c0cdbfe3":"markdown","e4fa940a":"markdown","c04206e0":"markdown","30faa69f":"markdown","c3aaa804":"markdown","8a543e93":"markdown","a10a00aa":"markdown","636e716d":"markdown","82427203":"markdown","5e6b2adb":"markdown","e21122b6":"markdown","0af1aa65":"markdown","22df60a0":"markdown","6227f467":"markdown","8df2ff7a":"markdown","3a88f3bd":"markdown","6b9ffe45":"markdown","27308a09":"markdown"},"source":{"2c334c61":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c7703e34":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom wordcloud import WordCloud\nfrom pandas_profiling import ProfileReport\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline","b4cca44b":"combats = pd.read_csv('..\/input\/pokemon-challenge\/combats.csv')\ncombats.head()","f3577051":"pokemon = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\npokemon266_298 = pokemon[pokemon['#'].isin([266,298])]\npokemon266_298","24a369eb":"names_dict = dict(zip(pokemon['#'], pokemon['Name']))\ncols = ['First_pokemon', 'Second_pokemon', 'Winner']\ncombatsName = combats[cols].replace(names_dict)\ncombatsName.head()","b9624935":"pokemon['stats_sum'] = pokemon['HP'] + pokemon['Attack'] + pokemon['Defense'] + pokemon['Sp. Atk'] + pokemon['Sp. Def'] + pokemon['Speed']\n\nprint(pokemon['stats_sum'].describe())\n\nstatsSum = pokemon['stats_sum']\n\nfig = go.Figure()\nfig = fig.add_trace(go.Histogram(x=statsSum))\nfig.update_traces(marker_color='#F40D0D', selector=dict(type='histogram'))\n\nfig.update_layout(\n    title_text='Total Stats Summary', # title of plot\n    xaxis_title_text='Stat Total', # xaxis label\n    yaxis_title_text='Count of Pokemon', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n)\nfig.show()","2115b9d7":"statsSumDict = dict(zip(pokemon['#'], pokemon['stats_sum']))\ncombatStatsSum = combats[cols].replace(statsSumDict)\ndiffStats = abs(combatStatsSum['First_pokemon']-combatStatsSum['Second_pokemon'])\nprint(diffStats.describe())","ce590f81":"fig = make_subplots(1,2, subplot_titles=('Total Stats Summary', 'Difference of Pokemon stats Probablility Density'))\n\nstatsSum = pokemon['stats_sum']\n\n# Fig1 total Stats Summary\nfig.add_trace(go.Histogram(x=statsSum, marker_color='green'), row=1, col=1)\nfig.update_xaxes(title_text=\"Total Stats\", row=1, col=1)\nfig.update_yaxes(title_text='Count of Pokemon', row=1, col=1)\n\n# Fig2 Create probablility Density Historgram with Trend Line\nfig.add_trace(go.Histogram(x=diffStats, marker_color='#F40D0D'), row=1, col=2)\nfig.update_traces(histnorm='probability density', row=1, col=2)\nfig.update_xaxes(title_text=\"Total Stats Difference\", row=1, col=2)\nfig.update_yaxes(title_text='Density', row=1, col=2)\n\n\nfig.update_layout(\n    title_text='Total Stats Summary', # title of plot\n    xaxis_title_text='Stat Total', # xaxis label\n    yaxis_title_text='Count of Pokemon', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n)\nfig.show()\n\nprint(diffStats.describe())","fbf0687c":"combatStatsSum['Loser'] = combatStatsSum.apply(lambda x: x['First_pokemon'] if x['First_pokemon'] != x['Winner'] else x['Second_pokemon'], axis=1)\ndiffWinLoseStats = combatStatsSum['Winner'] - combatStatsSum['Loser']\nprint(diffWinLoseStats.describe())\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=diffWinLoseStats, marker_color='blue'))\n\nfig.update_layout(\n    title_text='Difference of Win\/Loss overall Stats', # title of plot\n    xaxis_title_text='Difference Total', # xaxis label\n    yaxis_title_text='Count of Pokemon', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n)\n\nfig.show()\n\n\n","d022c642":"statsSumDict = dict(zip(pokemon['stats_sum'], pokemon['#']))\ncombatStatsSum['diff'] = diffWinLoseStats\nbetteredStatsSum = combatStatsSum[combatStatsSum['diff'] < -50]\nprint('Number of battles the lesser total stats won: ' + str(len(betteredStatsSum)))\nbetteredID = betteredStatsSum[cols].replace(statsSumDict)\nbetteredName = betteredID[cols].replace(names_dict)\nbetteredName.join(combatStatsSum['diff']).head()","e40de43b":"print('The % of battles lost by higher stat pokemon > 50: ' + (str(len(betteredStatsSum) \/ len(combats))))","68e83260":"betteredName.join(combatStatsSum['diff']).sort_values(by='diff').head()","837ed80c":"print('There are {} Types'.format(len(pokemon['Type 1'].drop_duplicates())))\nlist(pokemon['Type 1'].drop_duplicates())","1c53b0d8":"typeCols = ['Type 1', 'Type 2']\nprint('There are {} unique type combos.'.format(len(pokemon[typeCols].drop_duplicates())))","3f405917":"pokemon['Type 2'] = pokemon['Type 2'].fillna('None')\ntypeCross = pd.crosstab(pokemon['Type 1'], pokemon['Type 2'])\n\n\nfig = px.bar(typeCross, title=\"Pokemon Type Combos by Type 1\").update_xaxes(categoryorder='total descending').update_layout(yaxis_title='Count of Combos')\n\nfig.show()","870dd47a":"typeCross2 = pd.crosstab(pokemon['Type 2'], pokemon['Type 1'])\n\nfig = px.bar(typeCross2, title=\"Pokemon Type Combos by Type 2\").update_xaxes(categoryorder='total descending').update_layout(yaxis_title='Count of Combos')\n\nfig.show()","09cae4ee":"singleType = pd.DataFrame(pokemon[pokemon['Type 2'] == 'None'])\nsingleType = singleType.drop('Type 2', axis=1)\n\nfig = px.histogram(singleType['Type 1'], title=\"Pokemon Count by Single Type\").update_xaxes(categoryorder='total descending').update_layout(yaxis_title='Count of Combos')\nfig.show()","147e3fe3":"Normal = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 0.5, \"Ghost\": 0, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nFighting = {\"Normal\": 2, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 0.5, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 0, \"Steel\": 2, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 0.5, \"Dragon\": 1, \"Dark\": 2, \"Fairy\": 0.5}\nPoison = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 0.5, \"Flying\": 1, \"Bug\": 1, \"Rock\": 0.5, \"Ghost\": 0.5, \"Steel\": 0, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 2}\nGround = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 2, \"Ground\": 1, \"Flying\": 0, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 2, \"Fire\": 2, \"Water\": 1, \"Electric\": 2, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nFlying = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 2, \"Rock\": 0.5, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 0.5, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nBug = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 0.5, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 0.5, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 1, \"Electric\": 1, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 2, \"Fairy\": 0.5}\nRock = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 1, \"Ground\": 0.5, \"Flying\": 2, \"Bug\": 2, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 2, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\nGhost = {\"Normal\": 0, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 2, \"Steel\": 1, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 0.5, \"Fairy\": 1}\nSteel = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 0.5, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 0.5}\nFire = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 2, \"Rock\": 0.5, \"Ghost\": 1, \"Steel\": 2, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 2, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nWater = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 2, \"Flying\": 1, \"Bug\": 1, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 1, \"Fire\": 2, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nElectric = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 0, \"Flying\": 2, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 1, \"Fire\": 1, \"Water\": 2, \"Electric\": 0.5, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nGrass = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 2, \"Flying\": 0.5, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 2, \"Electric\": 1, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\nIce = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 2, \"Flying\": 2, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 2, \"Ice\": 0.5, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 1, \"Fairy\": 1}\nPsychic = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 2, \"Ground\": 2, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 0.5, \"Dragon\": 1, \"Dark\": 0, \"Fairy\": 1}\nDragon = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 1, \"Fairy\": 0}\nDark = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 2, \"Steel\": 1, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 0.5, \"Fairy\": 0.5}\nFairy = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 2, \"Fairy\": 1}\n\ntypeRelation = {\"Normal\": Normal, \"Fighting\": Fighting, \"Poison\": Poison, \"Ground\": Ground, \"Flying\": Flying, \"Bug\": Bug, \"Rock\": Rock, \"Ghost\": Ghost, \"Steel\": Steel, \"Fire\": Fire, \"Water\": Water, \"Electric\": Electric, \"Grass\": Grass, \"Ice\": Ice, \"Psychic\": Psychic, \"Dragon\": Dragon, \"Dark\": Dark, \"Fairy\": Fairy}","d11e2e90":"dfTypeRelation = pd.DataFrame(typeRelation)\nprint('Row is Deffender, Column is Attacker')\n\nfig = px.imshow(dfTypeRelation, color_continuous_scale=\"cividis\")\nfig.update_xaxes(side='top')\nfig.show()","b0f5355e":"combatNames = combats[cols].replace(names_dict)\nprint(combatNames['Winner'].value_counts()[:20])\n\nwinners = list(combatNames['Winner'])\nwinnersSTR = [str(i) for i in winners]\nwinnersTXT = (',').join(winnersSTR)\nwc = WordCloud(background_color='black', margin=2).generate(winnersTXT)\nplt.figure(figsize=[20,20])\nplt.axis('off')\nplt.imshow(wc)","f78aa363":"firstNum = combatNames['First_pokemon'].value_counts()\nsecondNum = combatNames['Second_pokemon'].value_counts()\ntotalBattles = firstNum + secondNum\nbattleWin = pd.DataFrame({'battle': totalBattles, 'win': combatNames['Winner'].value_counts()}, columns=['battle', 'win'])\nbattleWin['ratio'] = battleWin['win']\/battleWin['battle']\nbattleWin.sort_values(by=['ratio'], ascending=False).head(20)","547628fd":"pokemon.info()\nbattleWin.info()","06f883a7":"battleWin[battleWin['win'].isnull()]","ac40c790":"battleWin.loc[\"Shuckle\", ['win', 'ratio']] = 0\nbattleWin[battleWin.index=='Shuckle']","475a251b":"id_dict = dict(zip(pokemon['Name'], pokemon['#']))\nbattleWin[\"Name\"] = battleWin.index\nbattleWin[\"#\"] = battleWin[\"Name\"].replace(id_dict)\nratio_dict = dict(zip(battleWin['#'], battleWin['win']))\npokemon[\"win\"] = pokemon[\"#\"].replace(ratio_dict)\nratio_dict = dict(zip(battleWin['#'], battleWin['ratio']))\npokemon[\"ratio\"] = pokemon[\"#\"].replace(ratio_dict)\n\npokemon.head()","37889dc0":"noBattle = pokemon[pokemon['ratio']>1]\nprint('There are {} pokemon who have NaN ratio (above 1)'.format(len(noBattle.index)))\n\nnoBattle[['#','Name', 'ratio']]","a290989f":"pokemon.info()\npokemon[pokemon['Name'].isnull()]","4e1caabc":"pokemon.loc[62, 'Name']='Primape'\npokemon[pokemon['Name']=='Primape'][['#', 'Name', 'ratio']]","033a50a6":"battlePokemon = pokemon[pokemon['ratio']<=1]\n\nfig = go.Figure()\nfig = px.scatter(battlePokemon, x='stats_sum', y='ratio', color='Type 1', size='win', trendline='ols', hover_name='Name')\n\nfig.show()","f8b95c65":"battlePokemon.head()","0ddd177b":"fig = px.scatter(battlePokemon, x='stats_sum', y='ratio', color='Type 1', size='win', trendline='ols', hover_name='Name',\n                facet_col='Type 1', facet_col_wrap=3,width=1500, height=3000)\nfig.show()","a2167971":"fig = px.scatter(battlePokemon, x='stats_sum', y='ratio', color='Type 2', size='win', trendline='ols', hover_name='Name',\n                facet_col='Type 2', facet_col_wrap=3,width=1500, height=3000)\nfig.show()","95f803ad":"singleType = battlePokemon[battlePokemon['Type 2'] == 'None']\nsingleType","db725b61":"fig = go.Figure()\nfig = px.scatter(singleType, x='stats_sum', y='ratio', color='Type 1', size='win', trendline='ols', hover_name='Name')\n\nfig.show()","fe4e08bd":"fig = px.scatter(singleType, x='stats_sum', y='ratio', color='Type 1', size='win', trendline='ols', hover_name='Name',\n                facet_col='Type 1', facet_col_wrap=3,width=1500, height=3000)\nfig.show()","e1b6bcb8":"pokemonCOPY = pokemon.copy()\n\npokemonCOPY['Type'] = pokemonCOPY[['Type 1', 'Type 2']].agg('\/'.join, axis=1)\npokemonCOPY = pokemonCOPY.drop(['Type 1', 'Type 2'], axis=1)\nprint(pokemonCOPY.head())","cc33b5b1":"combatAddData = combats.copy()\n\n# Create dict() of variables for regression\ntypeDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['Type']))\nhpDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['HP']))\nattackDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['Attack']))\ndefenseDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['Defense']))\nspattackDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['Sp. Atk']))\nspdefenseDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['Sp. Def']))\nspeedDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['Speed']))\nstatsSumDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['stats_sum']))\nwinSumDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['win']))\nratioDict = dict(zip(pokemonCOPY['#'], pokemonCOPY['ratio']))\n\n# Add first pokemon stats to new combat df\ncombatAddData['First_pokemon_Type'] = combatAddData['First_pokemon'].replace(typeDict)\ncombatAddData['First_pokemon_HP'] = combatAddData['First_pokemon'].replace(hpDict)\ncombatAddData['First_pokemon_ATK'] = combatAddData['First_pokemon'].replace(attackDict)\ncombatAddData['First_pokemon_DEF'] = combatAddData['First_pokemon'].replace(defenseDict)\ncombatAddData['First_pokemon_SP_ATK'] = combatAddData['First_pokemon'].replace(spattackDict)\ncombatAddData['First_pokemon_DP_DEF'] = combatAddData['First_pokemon'].replace(spdefenseDict)\ncombatAddData['First_pokemon_Speed'] = combatAddData['First_pokemon'].replace(speedDict)\ncombatAddData['First_pokemon_STATS_SUM'] = combatAddData['First_pokemon'].replace(statsSumDict)\ncombatAddData['First_pokemon_RATIO'] = combatAddData['First_pokemon'].replace(ratioDict)\n\n# Add second pokemon stats to new combat df\ncombatAddData['Second_pokemon_Type'] = combatAddData['Second_pokemon'].replace(typeDict)\ncombatAddData['Second_pokemon_HP'] = combatAddData['Second_pokemon'].replace(hpDict)\ncombatAddData['Second_pokemon_ATK'] = combatAddData['Second_pokemon'].replace(attackDict)\ncombatAddData['Second_pokemon_DEF'] = combatAddData['Second_pokemon'].replace(defenseDict)\ncombatAddData['Second_pokemon_SP_ATK'] = combatAddData['Second_pokemon'].replace(spattackDict)\ncombatAddData['Second_pokemon_DP_DEF'] = combatAddData['Second_pokemon'].replace(spdefenseDict)\ncombatAddData['Second_pokemon_Speed'] = combatAddData['Second_pokemon'].replace(speedDict)\ncombatAddData['Second_pokemon_STATS_SUM'] = combatAddData['Second_pokemon'].replace(statsSumDict)\ncombatAddData['Second_pokemon_RATIO'] = combatAddData['Second_pokemon'].replace(ratioDict)","87f2426f":"dfTypeRelation.head()","50f5648a":"def calcRelationType(combatAddData):\n    r0 = 1\n    firstType1 = combatAddData['First_pokemon_Type'].split('\/')[0]\n    firstType2 = combatAddData['First_pokemon_Type'].split('\/')[1]\n    secondType1 = combatAddData['Second_pokemon_Type'].split('\/')[0]\n    secondType2 = combatAddData['Second_pokemon_Type'].split('\/')[1]\n    if firstType2 != \"None\" and secondType2 != \"None\":\n            r1 = dfTypeRelation[firstType1][secondType1]\n            r2 = dfTypeRelation[firstType1][secondType2]\n            r3 = dfTypeRelation[firstType2][secondType1]\n            r4 = dfTypeRelation[firstType2][secondType2]\n            r = r0 * r1 * r2 * r3 * r4\n    elif firstType2 != \"None\" and secondType2 == \"None\":\n            r1 = dfTypeRelation[firstType1][secondType1]\n            r3 = dfTypeRelation[firstType2][secondType1]\n            r = r0 * r1 * r3\n    elif firstType2 == \"None\" and secondType2 != \"None\":\n            r1 = dfTypeRelation[firstType1][secondType1]\n            r2 = dfTypeRelation[firstType1][secondType2]\n            r = r0 * r1 * r2\n    elif firstType2 == \"None\" and secondType2 == \"None\":\n            r1 = dfTypeRelation[firstType1][secondType1]\n            r = r0 * r1\n    return r\n\ncombatAddData['Relation'] = combatAddData.apply(lambda x: calcRelationType(x), axis=1)","5a1a4698":"# First to attack the winner column\ncombatAddData['First Win'] = combatAddData.apply(lambda x: 1 if x['First_pokemon']==x['Winner'] else 0, axis=1)\n\n# Drop uneeded columns\ndropCols = [\"First_pokemon\", \"Second_pokemon\", \"Winner\", \"First_pokemon_Type\", \"Second_pokemon_Type\"]\ncombatAddData = combatAddData.drop(dropCols, axis=1)\ncombatAddData.head()","4ba886c8":"combatAddData.info()\nProfileReport(combatAddData)","2d63debf":"X = combatAddData.drop('First Win', axis=1)\ny = combatAddData['First Win']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=1)\nprint(\"X_train.shape = \" + str(X_train.shape))\nprint(\"X_test.shape = \" + str(X_test.shape))\nprint(\"y_train.shape = \" + str(y_train.shape))\nprint(\"y_test.shape = \" + str(y_test.shape))","89bbb84a":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(max_iter=2000)\nlogreg.fit(X_train, y_train)\naccLog = round(logreg.score(X_test, y_test)*100, 2)\naccLog","6bd70c9a":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\naccKnn = round(knn.score(X_test, y_test) * 100, 2)\naccKnn","2d6a698b":"from sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\naccGaussian = round(gaussian.score(X_test, y_test) * 100, 2)\naccGaussian","d5e51747":"# Perceptron\nfrom sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\naccPerceptron = round(perceptron.score(X_test, y_test) * 100, 2)\naccPerceptron","89ff046f":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndecisionTree = DecisionTreeClassifier()\ndecisionTree.fit(X_train, y_train)\naccDecisionTree = round(decisionTree.score(X_test, y_test) * 100, 2)\naccDecisionTree","6c44c411":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandomForest = RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train, y_train)\naccRandomForest = round(randomForest.score(X_test, y_test) * 100, 2)\naccRandomForest","9601f163":"models = pd.DataFrame({\n    'Models': ['Logistice Regression', 'KNN', 'Naive Bayes', 'Perceptron', 'Decision Tree', 'Random Forest'],\n    'Score' : [accLog, accKnn, accGaussian, accPerceptron, accDecisionTree, accRandomForest]\n})\n\nmodels.sort_values(by='Score', ascending=False)","c30062cc":"effective = pd.DataFrame()\neffective[\"feature_name\"] = X.columns.tolist()\neffective[\"feature_importance\"] = randomForest.feature_importances_\neffective.sort_values(\"feature_importance\",ascending=False)","c7088fb7":"tests = pd.read_csv('..\/input\/pokemon-challenge\/tests.csv')\ntestAddData = tests.copy()\ntestAddData.head()","c7477560":"\n# Add first pokemon stats to new combat df\ntestAddData['First_pokemon_Type'] = testAddData['First_pokemon'].replace(typeDict)\ntestAddData['First_pokemon_HP'] = testAddData['First_pokemon'].replace(hpDict)\ntestAddData['First_pokemon_ATK'] = testAddData['First_pokemon'].replace(attackDict)\ntestAddData['First_pokemon_DEF'] = testAddData['First_pokemon'].replace(defenseDict)\ntestAddData['First_pokemon_SP_ATK'] = testAddData['First_pokemon'].replace(spattackDict)\ntestAddData['First_pokemon_DP_DEF'] = testAddData['First_pokemon'].replace(spdefenseDict)\ntestAddData['First_pokemon_Speed'] = testAddData['First_pokemon'].replace(speedDict)\ntestAddData['First_pokemon_STATS_SUM'] = testAddData['First_pokemon'].replace(statsSumDict)\ntestAddData['First_pokemon_RATIO'] = testAddData['First_pokemon'].replace(ratioDict)\n\n# Add second pokemon stats to new combat df\ntestAddData['Second_pokemon_Type'] = testAddData['Second_pokemon'].replace(typeDict)\ntestAddData['Second_pokemon_HP'] = testAddData['Second_pokemon'].replace(hpDict)\ntestAddData['Second_pokemon_ATK'] = testAddData['Second_pokemon'].replace(attackDict)\ntestAddData['Second_pokemon_DEF'] = testAddData['Second_pokemon'].replace(defenseDict)\ntestAddData['Second_pokemon_SP_ATK'] = testAddData['Second_pokemon'].replace(spattackDict)\ntestAddData['Second_pokemon_DP_DEF'] = testAddData['Second_pokemon'].replace(spdefenseDict)\ntestAddData['Second_pokemon_Speed'] = testAddData['Second_pokemon'].replace(speedDict)\ntestAddData['Second_pokemon_STATS_SUM'] = testAddData['Second_pokemon'].replace(statsSumDict)\ntestAddData['Second_pokemon_RATIO'] = testAddData['Second_pokemon'].replace(ratioDict)","bfca6218":"testAddData[\"Relation\"] = testAddData.apply(lambda x: calcRelationType(x), axis = 1)\n\n# Drop cols for prediction\ndropCols2 = [\"First_pokemon\", \"Second_pokemon\", \"First_pokemon_Type\", \"Second_pokemon_Type\"]\ntestAddData = testAddData.drop(dropCols2, axis=1)","95ac44ab":"y_predict = randomForest.predict(testAddData)\ndata = {\"First_pokemon\": tests[\"First_pokemon\"], \"Second_pokemon\": tests[\"Second_pokemon\"], \"First_win\": y_predict}\nsubmission = pd.DataFrame(data=data, columns=[\"First_pokemon\", \"Second_pokemon\", \"First_win\"])\nwinner = pd.DataFrame(submission.apply(lambda x: x[\"First_pokemon\"] if x[\"First_win\"]==1 else x[\"Second_pokemon\"], axis=1), columns=[\"Winner\"])\nfinal = pd.concat([submission, winner], axis=1)\n\n#Drop First_win\nnames_dict = dict(zip(pokemon['#'], pokemon['Name']))\nfinalCols = ['First_pokemon', 'Second_pokemon', 'Winner']\ncombatName = combats[finalCols].replace(names_dict)\n\ncombatName\n","ad5ef0db":"testAddData.head()","c9763849":"Shuckle has 135 battles but no wins or ratio. Let change the nans to zeros","6996f211":"Inspired By:\n\nhttps:\/\/www.kaggle.com\/rautaki0127\/pokemon-data-science-challenge","d6dea3ed":"Add up all stats to see if there is a correlation between base stats and winning","d40a5a76":"# Test Predictions","271a7c72":"Above shows the that 2\/3rds of the time the higher total stats pokemon will defeat the lesser. 1\/3 of the time the lower total stat pokemon bettered the higher stat. Lets look into those next\n\n# Check the combo of battles where lower beat the higher by < -50","bc294943":"# Perceptron ","57dba084":"# Single Type Pokemon Graphs","30dac091":"Pokemon 63 is missing it's name a quick internet search shows it is \"Primape\"","3f8a8911":"# Summarize and Split final dataset","489191ba":"https:\/\/www.kaggle.com\/rautaki0127\/pokemon-data-science-challenge#63-pokemon's-name-is-NaN.-Searching-by-Internet,-#63-pokemon-is-%22Primeape%22.The biggests upset was 562 point difference between the lower stat winner and higher stat loser. \n\n# Check the Type Factors in battles","c32f0ab6":"Distro above shows there are two binomial distribution curves in our \"Total Stats\" figure. \n\nThe second figure shows the difference between the two pokemon stats within each fight has about 50% of the values being above 100 points.\n\nThis leads to the question:\n\n# Did the pokemon with higher stats win against the pokemon with lower overall stats?","73a7404a":"# Import Combat DF","ba392e75":"There is a pokemon that does not have a win or a ratio","02d70eb7":"# Random Forest","ee90468e":"# Logistic Regression","7499c9b0":"# Import Pokemon Stats","89ea3adc":"# Graphs By Type 2","f8601e98":"The number of battles where the lesser defeated the higher and the defeat was more than 50, there are 9499 combonations.","af5ad593":"# Graphs by Type","2ebc2a2d":"# KNN Classification","351f68b8":"# Graphs by Type 1","c77f861a":"# Prediction Time\n\nCheck for NaN or Null left in the df","c0cdbfe3":"Single Type Chart","e4fa940a":"Now we need to find the pokemon who have a ratio > 1.","c04206e0":"# Check the biggests difference","30faa69f":"There are 377 Pokemon with only 1 type.","c3aaa804":"# Type Adv\/Disadv Chart\n\nFound website that shows chart of type advatages https:\/\/pokemondb.net\/type\n\nData Legend-\n\n    0 = No effect\n    \n    .5 = Not Very Effective\n    \n    1 = Normal\n    \n    2 = Super-Effective\n \n Create dict() for each type","8a543e93":"# Decision Tree","a10a00aa":"# Find Pokemon with Most Wins and add to word cloud","636e716d":"# Create new combat df with names","82427203":"# Libraries","5e6b2adb":"# Analyse base stats for Pokemon\n\n","e21122b6":"Check for NaN Names","0af1aa65":"# Prep Dataframe for Predictions\n\nAdd specs to battle dataframe","22df60a0":"Create accuracy dataframe","6227f467":"Highest score is Random Forest. Lets look at feature mapping to see what is the most important","8df2ff7a":"# Create a win\/loss ratio DF","3a88f3bd":"Function to build a column for type relation\/damage","6b9ffe45":"Shows a dual binomial distro. Next we need to check the difference between base stats per fight.","27308a09":"# Gaussian Naive Bayes"}}