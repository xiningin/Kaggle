{"cell_type":{"3b22d8f7":"code","07b566e1":"code","41b713a8":"code","3448e5d3":"code","659321be":"code","6761ee9d":"code","6b82d017":"code","f8561fa4":"code","64f5c21c":"code","7877a808":"code","d4d4ccd0":"code","31a7e4e4":"code","6038e259":"code","13fd9a0b":"code","7eecdf0f":"code","70f58d13":"code","ffd7ea71":"code","fd80e5c7":"code","a45f22df":"code","33c435d8":"code","aa78022b":"code","294beefc":"code","94bce02e":"code","275b0d8c":"code","792cabbe":"code","354f3dbf":"code","fb1f3f72":"code","2bf86c8e":"code","84ea9265":"code","9260526d":"code","0e140b24":"code","b9def997":"code","4496ffab":"code","4050bbfd":"code","aba3061b":"code","b0b8d519":"code","58dc2196":"code","1de20961":"code","4bf9fdc7":"code","bcb1a704":"code","06f892a1":"code","59c6e655":"code","d549ca1a":"code","5dba2939":"code","4a111ceb":"markdown","cf6a992e":"markdown","011cf042":"markdown","d75e51d8":"markdown","ec200abe":"markdown"},"source":{"3b22d8f7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","07b566e1":"data = pd.read_csv(r'..\/input\/creditcardfraud\/creditcard.csv')","41b713a8":"data.head().transpose()","3448e5d3":"data['Class'].value_counts()","659321be":"data['Class'].value_counts().plot(kind = 'barh')","6761ee9d":"train = data.copy()","6b82d017":"from sklearn.utils import resample","f8561fa4":"train_minor = train[train['Class']==1]\ntrain_major = train[train['Class']==0]","64f5c21c":"train_minor = resample(train_minor, n_samples = 284315)","7877a808":"train = pd.concat([train_minor, train_major], 0)","d4d4ccd0":"train.shape","31a7e4e4":"sample = train.sample(frac = 0.2)","6038e259":"sample['Class'].value_counts()","13fd9a0b":"corr = sample.corr()","7eecdf0f":"sns.heatmap(corr, cmap = 'coolwarm')","70f58d13":"import pandas as pd\nfrom xgboost import XGBClassifier as xgb\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier as cbc","ffd7ea71":"models = [\n    (xgb(), 'xgb'),\n    (GradientBoostingClassifier(), 'gbt'),\n    (RandomForestClassifier(), 'rf'),\n    (BernoulliNB(), 'bnb'),\n    (GaussianNB(), 'gb'),\n    #(SVC(), 'svc'),\n    (LogisticRegression(), 'lr')]","fd80e5c7":"score = {'Model': [],\n         'train': [],\n         'test': []}","a45f22df":"def model_score(model_info):\n\n    name = model_info[1]\n    model = model_info[0]\n    \n    model.fit(X_train , y_train)\n    \n    score['Model'].append(name)\n    score['train'].append(model.score(X_train, y_train))\n    score['test'].append(model.score(X_test, y_test))","33c435d8":"from sklearn.model_selection import train_test_split as tst","aa78022b":"target_column = 'Class'\n\nX_train, X_test, y_train, y_test = tst(sample.drop(target_column, 1), sample[target_column], random_state = 42, test_size = 0.2)\n\nfor model in models:\n    print(model[1])\n    model_score(model)","294beefc":"cat = cbc(iterations = 500)\ncat.fit(X_train, y_train, plot = True, verbose = 50, eval_set = (X_test, y_test), )","94bce02e":"score['Model'].append('cbc')\nscore['train'].append(cat.score(X_train, y_train))\nscore['test'].append(cat.score(X_test, y_test))","275b0d8c":"pd.DataFrame(score)","792cabbe":"from sklearn.ensemble import VotingClassifier","354f3dbf":"models = [\n    ('xgb', xgb()),\n    ('rf', RandomForestClassifier()),\n    ('lr', LogisticRegression())]","fb1f3f72":"model = VotingClassifier(models, voting= 'soft')","2bf86c8e":"model.fit(X_train, y_train)","84ea9265":"from sklearn.metrics import roc_auc_score, classification_report","9260526d":"roc_auc_score(y_test, model.predict(X_test))\nprint(classification_report(y_test, model.predict(X_test)))","0e140b24":"labels = data['Class']\nX = data.drop('Class', 1)\n\nprint(roc_auc_score(labels, model.predict(X)))\nprint(classification_report(labels, model.predict(X)))","b9def997":"print(roc_auc_score(labels, cat.predict(X)))\nprint(classification_report(labels, cat.predict(X)))","4496ffab":"from imblearn.over_sampling import SMOTE","4050bbfd":"models = [\n    (xgb(), 'xgb'),\n    (GradientBoostingClassifier(), 'gbt'),\n    (RandomForestClassifier(), 'rf'),\n    (BernoulliNB(), 'bnb'),\n    (GaussianNB(), 'gb'),\n    #(SVC(), 'svc'),\n    (LogisticRegression(), 'lr')]","aba3061b":"score = {'Model': [],\n         'train': [],\n         'test': []}","b0b8d519":"OS = SMOTE(random_state=12)\nX_os, y_os = OS.fit_sample(data.drop('Class', 1), data['Class'])","58dc2196":"df = pd.concat([X_os, y_os], 1)","1de20961":"df.head().transpose()","4bf9fdc7":"sample = df.sample(frac = 0.2)","bcb1a704":"target_column = 'Class'\n\nX_train, X_test, y_train, y_test = tst(sample.drop(target_column, 1), sample[target_column], random_state = 42, test_size = 0.2)\n\nfor model in models:\n    print(model[1])\n    model_score(model)","06f892a1":"cat = cbc(iterations = 500)\ncat.fit(X_train, y_train, plot = True, verbose = 50, eval_set = (X_test, y_test))","59c6e655":"score['Model'].append('cbc')\nscore['train'].append(cat.score(X_train, y_train))\nscore['test'].append(cat.score(X_test, y_test))","d549ca1a":"pd.DataFrame(score)","5dba2939":"labels = data['Class']\nX = data.drop('Class', 1)\n\nprint(roc_auc_score(labels, cat.predict(X)))\nprint(classification_report(labels, cat.predict(X)))","4a111ceb":"### MODEL BUILDING - SMOTE","cf6a992e":"### OVERSAMPLING WORKS BETTER","011cf042":"### EXPLORATORY DATA ANALYSIS","d75e51d8":"### MODEL BUILDING","ec200abe":"The amount of samples of fraud is very negligible here"}}