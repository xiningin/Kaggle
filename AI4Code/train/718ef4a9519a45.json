{"cell_type":{"91578d84":"code","ba6b6fd6":"code","3fbefc7a":"code","6988ff5e":"code","f165e4b3":"code","860ee95f":"code","9432165a":"code","510df4e7":"code","ff0c0549":"code","e3c3cf94":"code","17be8d24":"code","7cc597d0":"code","f8931b55":"code","dfbe2f7f":"code","da5e938d":"code","fef90ab4":"code","e0908ebf":"code","d559ceb4":"code","eafac5d5":"code","5ed6b098":"code","c371072f":"code","d0eccd15":"code","62cc5629":"code","2619adaf":"code","c6e99e5f":"code","dfd5adc0":"code","5b1bc509":"code","1d063c81":"code","de1a4092":"code","1c404339":"markdown","1eca125d":"markdown","08f42daa":"markdown","41614149":"markdown","03ccba6e":"markdown","74c63f2d":"markdown","db83ede7":"markdown","ff2e8c6d":"markdown","653427ae":"markdown","a11041fd":"markdown","dd8e3244":"markdown","834602b6":"markdown","d614bb50":"markdown","9da40be8":"markdown","47f4edd7":"markdown","1a2e1918":"markdown","30424a7f":"markdown","5ef0ca43":"markdown","ab216e9d":"markdown","bd8bf907":"markdown","dfe01340":"markdown"},"source":{"91578d84":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nnp.random.seed(21)\n\n#ML Libraries \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n","ba6b6fd6":"data_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","3fbefc7a":"display(data_train.shape, data_train.head())","6988ff5e":"display(data_test.shape, data_test.head())","f165e4b3":"data_train_info = pd.DataFrame(columns=['Name of Col', 'Num of Null', 'Dtype', 'N_Unique'])\n\nfor i in range(0, len(data_train.columns)):\n    data_train_info.loc[i] = [data_train.columns[i],\n                        data_train[data_train.columns[i]].isnull().sum(),\n                        data_train[data_train.columns[i]].dtypes,\n                        data_train[data_train.columns[i]].nunique()] \ndata_train_info","860ee95f":"data_train_info.plot.bar() \nplt.xticks(ticks=[0,1,2,3,4,5,6,7,8,9,10,11], labels=data_train_info['Name of Col'], rotation=20)","9432165a":"data_train.describe()","510df4e7":"sns.countplot(data_train['Survived'], hue=data_train['Sex'],palette= 'Paired')","ff0c0549":"sns.set(rc={\"figure.figsize\":(10, 6)})\nsns.countplot(data_train['Survived'], hue=data_train['Pclass'],palette= 'Paired')","e3c3cf94":"sns.displot(data_train['Age'].dropna(), color='c', bins=10)","17be8d24":"sns.countplot(data_train[\"SibSp\"])","7cc597d0":"sns.set(rc={\"figure.figsize\":(10, 6)})\nsns.histplot(data_train[\"Fare\"], color='c', binwidth=8)","f8931b55":"sns.boxplot(data=data_train, y=data_train['Age'], x=data_train['Pclass'])","dfbe2f7f":"def imputeAge(y):\n    Age = y[0]\n    Pclass = y[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 37\n        if Pclass ==2:\n            return 28\n        if Pclass ==3:\n            return 25      \n    else:\n        return Age","da5e938d":"data_train['Age'] = data_train[['Age','Pclass']].apply(imputeAge,axis=1)\ndata_test['Age'] = data_test[['Age','Pclass']].apply(imputeAge,axis=1)","fef90ab4":"data_train.drop(['Cabin', 'Embarked'], axis=1, inplace =True)","e0908ebf":"data_test.drop(['Cabin','Embarked'], axis=1, inplace = True)","d559ceb4":"data_train.drop(['Ticket','Name','Fare','PassengerId'], axis=1, inplace = True)","eafac5d5":"data_test.drop(['Ticket','Name','Fare','PassengerId'], axis=1, inplace = True)","5ed6b098":"data_train.head()","c371072f":"data_test.head()","d0eccd15":"#Encoding Sex feature\ndata_train = pd.get_dummies(data_train)\ndata_test = pd.get_dummies(data_test)","62cc5629":"#Defining X and y\nX = data_train.drop('Survived', axis =1 )\ny = data_train['Survived']","2619adaf":"X_train,X_test,y_train ,y_test=train_test_split(X, y ,test_size = 0.2)","c6e99e5f":"rfc_model = RandomForestClassifier(n_estimators = 150 ) # n_estimators refers to the number of decision tree algorithms used","dfd5adc0":"rfc_model.fit(X_train, y_train)","5b1bc509":"y_pred_test = rfc_model.predict(X_test)","1d063c81":"#Calculating the accuracy of the RFC model\nprint(\"Accuracy score of RFC model on test dataset is : \")\nprint(accuracy_score(y_test, y_pred_test))","de1a4092":"y_pred_train = rfc_model.predict(X_train)\n\nprint(\"Accuracy score of RFC model on train dataset is : \")\nprint(accuracy_score(y_train, y_pred_train))","1c404339":"By the RFC, we can achieve the accuracy score of 0.83.\nWe can also try to create other models to get a better model.","1eca125d":"# Treating NaN Values and Data Cleaning","08f42daa":"### Building the ML Model","41614149":"From the above bar plot it is clear that, two features have NaN values. \n**Age** and **Cabin**. We will need to treat these features before building the ML Model.","03ccba6e":"Since, **Cabin** and **Embarked** column will not play an important role in our model building.\nHence, we can drop this column.","74c63f2d":"Majority of passengers were 18 to 32 years old. ","db83ede7":"From the above boxplot it is clear that.. \n- The average age of passengers travelling in 1st class is 37 Years.\n- The average age of passengers travelling in 2st class is 28 Years.\n- The average age of passengers travelling in 3rd class is 24 Years.\n\nWe can use these moedians to impute the Age feature of test dataset.","ff2e8c6d":"Now, from the above outputs we can see that we have a categorical variable **Sex**, lets encode this feature.","653427ae":"From the above countplot, we infer that -\n- No of deads were more than the survived\n- More male passengers died compared to female\n- Majority of People who died were travelling in 3rd class\n","a11041fd":"Other columns like **Ticket**, **Name**, **Fare** and **PassengerId** should be dropped, as these will not play any role in our model.","dd8e3244":"# Loading Test and Train Dataset","834602b6":"# Importing Libraries ","d614bb50":"Now, let us check how many passengers were travelling alone, or with Sibilings\/Spouse with the help of a countplot-","9da40be8":"# Exploratory Data Analysis","47f4edd7":"From the above analysis, we know that - \n**Age(177 values)** and **Cabin(687 values)** features have NaN values. \n\nFirst treating the **Age** feature -\n\nLets analyze the **Age** and **PClass** to find if there is anyrealtion between them. This might be helpful in imputing the NaN values.","1a2e1918":"### Train Test Split","30424a7f":"### Defining Features and Target Variable","5ef0ca43":"# Building the ML Models ","ab216e9d":"From the above plot we infer that.. \nMajority of passengers were Solo Travellers, followed by Travelling with Spouse.","bd8bf907":"Now our datasets are ready and we can start with model building.\n","dfe01340":"#### Random Forest Classifier"}}