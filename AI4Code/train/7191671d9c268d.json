{"cell_type":{"e3059f91":"code","afd599e9":"code","308d11aa":"code","bf22b3fc":"code","dde788e8":"code","1707d358":"code","0bf97643":"code","d4a7796e":"code","5aa294e1":"code","d552bbc4":"code","d982d719":"code","e8b89aff":"code","d18320a7":"code","d76be193":"code","78a12495":"code","f2c10f30":"code","f04913a9":"code","c69fddee":"code","79d3453d":"code","dea82aa5":"code","36d93c90":"code","ee19e049":"code","ea205700":"code","fea7f3c7":"code","d21ce87f":"code","15b8c16d":"code","d74994ce":"code","fac7af2e":"code","35a23393":"code","26e433aa":"code","298a556e":"code","04e5952d":"code","5e1ad0ac":"code","70b4e434":"code","4681425d":"code","22b09661":"code","46370ab1":"code","7c691af8":"code","1cb2e729":"code","d690e351":"code","e78019c6":"code","2e3d739c":"code","e7ef24fd":"code","9d98446d":"code","b2ef1e73":"code","db8cd242":"code","9f03abe9":"code","c564681e":"code","786d977d":"code","1d8c74a1":"code","7595be21":"code","89a5df98":"code","86e1719d":"code","fec30136":"code","9cf2a4e2":"code","e3da0950":"code","d1dc8e88":"code","ca426ecd":"code","550cd732":"code","935b85bb":"code","383f610c":"code","ccfa8276":"code","d5270881":"code","32b50b49":"code","fb67e805":"code","6006154b":"code","d37440ac":"code","8b2a6f16":"code","64c1467f":"code","8605e748":"code","997e17ef":"code","3e84c137":"code","d1513648":"code","35293094":"code","f2bfda8e":"code","5d93a8af":"code","74c48a37":"code","db993b1c":"code","6c064238":"code","ea985d9a":"code","e49a9beb":"code","dfda9eb1":"code","5b2ab3c2":"code","cf9e3b00":"code","6229b01b":"code","956cbbba":"code","5c4e752b":"code","77f859f2":"code","74926d3c":"code","7373ca68":"code","be74e6a1":"markdown","7fb29893":"markdown","daae4035":"markdown","2160b444":"markdown","795c8858":"markdown","f3a345e5":"markdown","09467d64":"markdown","0630e09d":"markdown","f7cadaac":"markdown","10eba51d":"markdown","848fe5c3":"markdown","539aa672":"markdown","982db612":"markdown","bd23433c":"markdown","b89c61e7":"markdown","b14ce466":"markdown","981ecf21":"markdown","c96e39bb":"markdown","58003c86":"markdown","ce25c209":"markdown","28253d4f":"markdown","12cc0a8d":"markdown","dad5feae":"markdown","ae36c51d":"markdown","a5b977b1":"markdown","8be67d53":"markdown","5a1b70ab":"markdown","0385ce56":"markdown","94646a84":"markdown","16c8ebcc":"markdown","8994f84f":"markdown","0ad4db93":"markdown","b342416c":"markdown","ad01e7b4":"markdown","a53bd204":"markdown","bc9b3e45":"markdown","875e93dc":"markdown","f7857abf":"markdown","60cf5f75":"markdown","30b28916":"markdown","39f56648":"markdown","6e48863d":"markdown","027f76d3":"markdown","b498e17a":"markdown","d7a1f223":"markdown","73d29fa1":"markdown","f624a1eb":"markdown","776db74f":"markdown","e0474184":"markdown","55e5e24c":"markdown","f0701524":"markdown","34420044":"markdown","92213334":"markdown","2a9fb532":"markdown","16033722":"markdown","6267c574":"markdown","7ceeb972":"markdown"},"source":{"e3059f91":"# Addition\n2+1","afd599e9":"# Subtraction\n2-1","308d11aa":"# Multiplication\n2*2","bf22b3fc":"# Division\n3\/2","dde788e8":"# Floor Division\n7\/\/4","1707d358":"# Modulo\n7%4","0bf97643":"# Powers\n2**3","d4a7796e":"# Can also do roots this way\n4**0.5","5aa294e1":"# Order of Operations followed in Python\n2 + 10 * 10 + 3","d552bbc4":"# Can use parentheses to specify orders\n(2+10) * (10+3)","d982d719":"# Let's create an object called \"a\" and assign it the number 5\na = 5","e8b89aff":"# Adding the objects\na+a","d18320a7":"# Reassignment\na = 10","d76be193":"# Check\na","78a12495":"# Check\na","f2c10f30":"# Use A to redefine A\na = a + a","f04913a9":"# Check \na","c69fddee":"# Single word\n'hello'","79d3453d":"# Entire phrase \n'This is also a string'","dea82aa5":"# We can also use double quote\n\"String built with double quotes\"","36d93c90":"# Be careful with quotes!\n' I'm using single quotes, but this will create an error'","ee19e049":"\"Now I'm ready to use the single quotes inside a string!\"","ea205700":"# We can simply declare a string\n'Hello World'","fea7f3c7":"# Note that we can't output multiple strings this way\n'Hello World 1'\n'Hello World 2'","d21ce87f":"print('Hello World 1')\nprint('Hello World 2')\nprint('Use \\n to print a new line')\nprint('\\n')\nprint('See what I mean?')","15b8c16d":"len('Hello World')","d74994ce":"# Assign s as a string\ns = 'Hello World'","fac7af2e":"#Check\ns","35a23393":"# Print the object\nprint(s) ","26e433aa":"# Show first element (in this case a letter)\ns[0]","298a556e":"s[1]","04e5952d":"s[2]","5e1ad0ac":"# Grab everything past the first term all the way to the length of s which is len(s)\ns[1:]","70b4e434":"# Note that there is no change to the original s\ns","4681425d":"# Grab everything UP TO the 3rd index\ns[:3]","22b09661":"#Everything\ns[:]","46370ab1":"# Last letter (one index behind 0 so it loops back around)\ns[-1]","7c691af8":"# Grab everything but the last letter\ns[:-1]","1cb2e729":"# Grab everything, but go in steps size of 1\ns[::1]","d690e351":"# Grab everything, but go in step sizes of 2\ns[::2]","e78019c6":"# We can use this to print a string backwards\ns[::-1]","2e3d739c":"s","e7ef24fd":"# Let's try to change the first letter to 'x'\ns[0] = 'x'","9d98446d":"s","b2ef1e73":"# Concatenate strings!\ns + ' concatenate me!'","db8cd242":"# We can reassign s completely though!\ns = s + ' concatenate me!'","9f03abe9":"print(s)","c564681e":"s","786d977d":"letter = 'z'","1d8c74a1":"letter*10","7595be21":"s","89a5df98":"# Upper Case a string\ns.upper()","86e1719d":"# Lower case\ns.lower()","fec30136":"# Split a string by blank space (this is the default)\ns.split()","9cf2a4e2":"# Split by a specific element (doesn't include the element that was split on)\ns.split('W')","e3da0950":"'Insert another string with curly brackets: {}'.format('The inserted string')","d1dc8e88":"# Assign a list to an variable named my_list\nmy_list = [1,2,3]","ca426ecd":"my_list = ['A string',23,100.232,'o']","550cd732":"len(my_list)","935b85bb":"my_list = ['one','two','three',4,5]","383f610c":"# Grab element at index 0\nmy_list[0]","ccfa8276":"# Grab index 1 and everything past it\nmy_list[1:]","d5270881":"# Grab everything UP TO index 3\nmy_list[:3]","32b50b49":"my_list + ['new item']","fb67e805":"my_list","6006154b":"# Reassign\nmy_list = my_list + ['add new item permanently']","d37440ac":"my_list","8b2a6f16":"# Make the list double\nmy_list * 2","64c1467f":"# Again doubling not permanent\nmy_list","8605e748":"# Create a new list\nlist1 = [1,2,3]","997e17ef":"# Append\nlist1.append('append me!')","3e84c137":"# Show\nlist1","d1513648":"# Pop off the 0 indexed item\nlist1.pop(0)","35293094":"# Show\nlist1","f2bfda8e":"# Assign the popped element, remember default popped index is -1\npopped_item = list1.pop()","5d93a8af":"popped_item","74c48a37":"# Show remaining list\nlist1","db993b1c":"list1[100]","6c064238":"new_list = ['a','e','x','b','c']","ea985d9a":"#Show\nnew_list","e49a9beb":"# Use reverse to reverse order (this is permanent!)\nnew_list.reverse()","dfda9eb1":"new_list","5b2ab3c2":"# Use sort to sort the list (in this case alphabetical order, but for numbers it will go ascending)\nnew_list.sort()","cf9e3b00":"new_list","6229b01b":"# Let's make three lists\nlst_1=[1,2,3]\nlst_2=[4,5,6]\nlst_3=[7,8,9]\n\n# Make a list of lists to form a matrix\nmatrix = [lst_1,lst_2,lst_3]","956cbbba":"# Show\nmatrix","5c4e752b":"# Grab first item in matrix object\nmatrix[0]","77f859f2":"# Grab first item of the first item in the matrix object\nmatrix[0][0]","74926d3c":"# Build a list comprehension by deconstructing a for loop within a []\nfirst_col = [row[0] for row in matrix]","7373ca68":"first_col","be74e6a1":"There are many more methods than the ones covered here. Visit the Advanced String section to find out more!","7fb29893":"We can also use index and slice notation to grab elements of a sequence by a specified step size (the default is 1). For instance we can use two colons in a row and then a number specifying the frequency to grab elements. For example:","daae4035":"Python's built-in len() function counts all of the characters in the string, including spaces and punctuation.","2160b444":"## Print Formatting\n\nWe can use the .format() method to add formatted objects to printed string statements. \n\nThe easiest way to show this is through an example:","795c8858":"We can again use indexing to grab elements, but now there are two levels for the index. The items in the matrix object, and then the items inside that list!","f3a345e5":"We can use a print statement to print a string.","09467d64":"It should also be noted that lists indexing will return an error if there is no element at that index. For example:","0630e09d":"## Basic Built-in String methods\n\nObjects in Python usually have built-in methods. These methods are functions inside the object (we will learn about these in much more depth later) that can perform actions or commands on the object itself.\n\nWe call methods with a period and then the method name. Methods are in the form:\n\nobject.method(parameters)\n\nWhere parameters are extra arguments we can pass into the method. Don't worry if the details don't make 100% sense right now. Later on we will be creating our own objects and functions!\n\nHere are some examples of built-in methods in strings:","f7cadaac":"We can use the **sort** method and the **reverse** methods to also effect your lists:","10eba51d":"Now let's learn about printing strings!","848fe5c3":"### Creating lists\n","539aa672":"<a id=\"1\"><\/a>\n<font color=\"blue\" size=+2.5><b>Numbers<\/b><\/font>\n<br\/>\n<br\/>\nIn this section, we will learn about numbers in Python and how to use them.\n\nWe'll learn about the following topics:\n\n- Types of Numbers in Python\n- Basic Arithmetic\n- Differences between classic division and floor division\n- Object Assignment in Python","982db612":"## Basic List Methods\n\nIf you are familiar with another programming language, you might start to draw parallels between arrays in another language and lists in Python. Lists in Python however, tend to be more flexible than arrays in other languages for a two good reasons: they have no fixed size (meaning we don't have to specify how big a list will be), and they have no fixed type constraint (like we've seen above).\n\nLet's go ahead and explore some more special methods for lists:","bd23433c":"<font size=\"+1\" color=red ><b>Please Upvote my kernel and keep it in your favourite section if you think it is helpful.<\/b><\/font>","b89c61e7":"**So what if we just want the remainder after division?**","b14ce466":"## Nesting Lists\nA great feature of of Python data structures is that they support *nesting*. This means we can have data structures within data structures. For example: A list inside a list.\n\nLet's see how this works!","981ecf21":"## Creating a String\nTo create a string in Python you need to use either single quotes or double quotes. For example:","c96e39bb":"Just like strings, the len() function will tell you how many items are in the sequence of the list.","58003c86":"Now if I call *a* in my Python script, Python will treat it as the number 5.","ce25c209":"We can use a <code>:<\/code> to perform *slicing* which grabs everything up to a designated point. For example:","28253d4f":"Notice how the error tells us directly what we can't do, change the item assignment!\n\nSomething we *can* do is concatenate strings!","12cc0a8d":"## String Indexing\nWe know strings are a sequence, which means Python can use indexes to call parts of the sequence. Let's learn how this works.\n\nIn Python, we use brackets <code>[]<\/code> after an object to call its index. We should also note that indexing starts at 0 for Python. Let's create a new object called <code>s<\/code> and then walk through a few examples of indexing.","dad5feae":"4 goes into 7 once, with a remainder of 3. The % operator returns the remainder after division.","ae36c51d":"<a id=\"2\"><\/a>\n<font color=\"blue\" size=+2.5><b>Strings<\/b><\/font>\n<br\/>\n<br\/>\nIn this section, we will learn about Strings in Python and how to use them.\n\nWe'll learn about the following topics:\n- Creating Strings\n- Printing Strings\n- String Indexing and Slicing\n- String Properties\n- String Methods\n- Print Formatting","a5b977b1":"## Types of numbers\n\nMajorly there are two types of numbers are there\n- Floating-point numbers (eg. 1,2,-5,1000)\n- Integer (eg. 1.2,-0.5,2e2,3E2)\n","8be67d53":"## Variable Assignments\n\nNow that we've seen how to use numbers in Python as a calculator let's see how we can assign names and create variables.\n\nWe use a single equals sign to assign labels to variables. Let's see a few examples of how we can do this.","5a1b70ab":"We can also use + to concatenate lists, just like we did for strings.","0385ce56":"### Arithmetic continued","94646a84":"![image.png](attachment:image.png)","16c8ebcc":"The reason for the error above is because the single quote in <code>I'm<\/code> stopped the string. You can use combinations of double and single quotes to get the complete statement.","8994f84f":"## String Properties\nIt's important to note that strings have an important property known as *immutability*. This means that once a string is created, the elements within it can not be changed or replaced. For example:","0ad4db93":"<font size=\"+3\" color=blue><b> <center><u>Data Science For Beginner - Python <\/u><\/center><\/b><\/font>","b342416c":"The names you use when creating these labels need to follow a few rules:\n\n    1. Names can not start with a number.\n    2. There can be no spaces in the name, use _ instead.\n    3. Can't use any of these symbols :'\",<>\/?|\\()!@#$%^&*~-+\n    4. It's considered best practice (PEP8) that names are lowercase.\n    5. Avoid using the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), \n       or 'I' (uppercase letter eye) as single character variable names.\n    6. Avoid using words that have special meaning in Python like \"list\" and \"str\"\n\n\nUsing variable names can be a very useful way to keep track of different variables in Python. For example:","ad01e7b4":"Yes! Python allows you to write over assigned variable names. We can also use the variables themselves when doing the reassignment. Here is an example of what I mean:","a53bd204":"What happens on reassignment? Will Python let us write it over?","bc9b3e45":"Use the **append** method to permanently add an item to the end of a list:","875e93dc":"## String Basics","f7857abf":"We just created a list of integers, but lists can actually hold different object types. For example:","60cf5f75":"Note: This doesn't actually change the original list!","30b28916":"### Indexing and Slicing\nIndexing and slicing work just like in strings. Let's make a new list to remind ourselves of how this works:","39f56648":"Let's start indexing!","6e48863d":"You would have to reassign the list to make the change permanent.","027f76d3":"We can also use a function called len() to check the length of a string!","b498e17a":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\"><center>Table of content<\/center><\/h1>\n    \n    \n<font color=\"blue\" size=+1><b>Object and Data Structure<\/b><\/font>\n* [1. Numbers ?](#1) \n* [2. Strings ?](#2)\n* [3. Lists ?](#3)\n* [4. Dictionaries ?](#4) \n* [5. Tuples ?](#5)\n* [6. Set and Booleans ?](#6)\n\n  ","d7a1f223":"<a id=\"3\"><\/a>\n<font color=\"blue\" size=+2.5><b>Lists<\/b><\/font>\n<br\/>\n<br\/>\nIn this section, we will learn about Lists in Python and how to use them.\n\nWe'll learn about the following topics:    \n- Creating lists\n- Indexing and Slicing Lists\n- Basic List Methods\n- Nesting Lists\n- Introduction to List Comprehensions","73d29fa1":"We can use the multiplication symbol to create repetition!","f624a1eb":"We can also use negative indexing to go backwards.","776db74f":"### Basic Arithmetic","e0474184":"# List Comprehensions\nPython has an advanced feature called list comprehensions. They allow for quick construction of lists. To fully understand list comprehensions we need to understand for loops. So don't worry if you don't completely understand this section, and feel free to just skip it since we will return to this topic later.\n\nBut in case you want to know now, here are a few examples!","55e5e24c":"<font color=\"blue\" size=+3><b>What you'll learn<\/b><\/font>\n\n* Learn to use Python professionally Python 3.\n* Learn advanced Python features, like the collections module and how to work with timestamps.\n* Learn to use Object Oriented Programming with classes.\n* Understand complex topics, like decorators.\n","f0701524":" \n \nNow let's start with some basic arithmetic.","34420044":"**Whoa! What just happened? Last time I checked, 7 divided by 4 equals 1.75 not 1!**\n\nThe reason we get this result is because we are using \"*floor*\" division. The \/\/ operator (two forward slashes) truncates the decimal without rounding, and returns an integer result.","92213334":"We can also use the * for a duplication method similar to strings:","2a9fb532":"<a id=\"1\"><\/a>\n<font color=\"blue\" size=+2.5><b>Object and Data Structure<\/b><\/font>\n","16033722":"## Printing a String\n\nUsing Jupyter notebook with just a string in a cell will automatically output strings, but the correct way to display strings in your output is by using a print function.","6267c574":"Note the above slicing. Here we're telling Python to grab everything from 0 up to 3. It doesn't include the 3rd index. You'll notice this a lot in Python, where statements and are usually in the context of \"up to, but not including\".","7ceeb972":"Use **pop** to \"pop off\" an item from the list. By default pop takes off the last index, but you can also specify which index to pop off. Let's see an example:"}}