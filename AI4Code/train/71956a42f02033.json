{"cell_type":{"83ad5bf8":"code","20aeff6e":"code","0236d074":"code","6517bb39":"code","bfa6419a":"code","febdda3f":"code","a921ad09":"code","693ca3f5":"code","6433feeb":"code","40ab18ce":"code","ee84db8d":"code","117791c2":"code","d5be0e49":"code","2c27d003":"code","6168ea2d":"code","cf76b52f":"code","d6b6b46c":"code","772fcd94":"code","57622876":"code","d66217ea":"code","e964012b":"code","21bc4c6c":"markdown","39d9ff6a":"markdown","3c9fb04f":"markdown","82c2f5a9":"markdown","77cf205d":"markdown","53d8a3f0":"markdown","4c06632e":"markdown"},"source":{"83ad5bf8":"import os\nimport warnings\nfrom pathlib import Path\nimport tsfresh\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pylab as plt\nfrom sklearn.feature_selection import mutual_info_classif\nfrom tsfresh.utilities.dataframe_functions import impute\nfrom tsfresh import extract_features, extract_relevant_features\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import ShuffleSplit\nimport random\nfrom xgboost import XGBClassifier\nwarnings.simplefilter(action='ignore', category=FutureWarning)","20aeff6e":"data0 = pd.read_csv('..\/input\/iris\/Iris.csv')","0236d074":"print(data0['Species'].unique())","6517bb39":"Name0=data0['Species'].unique()\nName=sorted(Name0)\n\nM=list(range(3))    \nnormal_mapping=dict(zip(Name,M)) \nreverse_mapping=dict(zip(M,Name)) ","bfa6419a":"n=len(data0)\nprint(n)\nN=list(range(n))\nrandom.shuffle(N)","febdda3f":"data0['Species']=data0['Species'].map(normal_mapping)","a921ad09":"df=data0\ndf","693ca3f5":"df_features = extract_features(df.iloc[:,:-1], column_id='Id', column_sort='Id', n_jobs=os.cpu_count())\nprint(df_features.shape)\ndf_features","6433feeb":"df.head().T","40ab18ce":"df_features.head().T","ee84db8d":"df_features=df_features.dropna(how='any', axis=1)","117791c2":"print(df.shape)\nprint(df_features.shape)","d5be0e49":"_ = impute(df_features)","2c27d003":"%%time\nfeature_scores = mutual_info_classif(df_features, df['Species'], random_state=71)","6168ea2d":"data2=pd.concat([df,df_features],axis=1)\nprint(data2.shape)","cf76b52f":"dataX=data2\ndataY=data0['Species']\n\ndataX=np.array(dataX)\ndataY=np.array(dataY)\n\ntrainX=dataX[N[0:(n\/\/10)*8]]\ntestX=dataX[N[(n\/\/10)*8:]]\ntrainY=dataY[N[0:(n\/\/10)*8]]\ntestY=dataY[N[(n\/\/10)*8:]]\n\nX = trainX\ny = trainY","d6b6b46c":"clf = XGBClassifier(max_depth=3, n_estimators=1000, learning_rate=0.01)","772fcd94":"ss = ShuffleSplit(n_splits=5,train_size=0.8,test_size =0.2,random_state=0) \n\nfor train_index, test_index in ss.split(X): \n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = y[train_index], y[test_index]\n    clf.fit(X_train, Y_train) \n    print(clf.score(X_test, Y_test))","57622876":"PRED=clf.predict(testX)\nprint(PRED[0:10])\nANS=testY\nprint(ANS[0:10])","d66217ea":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","e964012b":"from sklearn.metrics import classification_report\nprint(classification_report(ANS,PRED))","21bc4c6c":"# Original Data","39d9ff6a":"# TSFresh","3c9fb04f":"# Model","82c2f5a9":"# Predict","77cf205d":"# Train and Test data setting","53d8a3f0":"# Iris XGBoost with TSFresh\nhttps:\/\/www.kaggle.com\/stpeteishii\/iris-xgboost-with-tsfresh","4c06632e":"#### feature engineering tools\nhttps:\/\/neptune.ai\/blog\/feature-engineering-tools"}}