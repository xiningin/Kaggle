{"cell_type":{"a3ae0f1f":"code","e1b60cc5":"code","570f7f5b":"code","c83542d2":"code","39c076c6":"code","e9642a2f":"code","af5a05f0":"code","8ae3b7dc":"code","35cd5641":"code","4ec26326":"code","e208b525":"code","0c91e516":"code","6d5ae498":"code","df578bba":"markdown"},"source":{"a3ae0f1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('ggplot')\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode\nimport seaborn as sns\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import confusion_matrix\n#importing libraries\nfrom sklearn import neighbors\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\nimport time\nimport warnings\nwarnings.filterwarnings('ignore')","e1b60cc5":"df=pd.read_csv(\"..\/input\/zomato-bangalore-restaurants\/zomato.csv\")","570f7f5b":"df.head()","c83542d2":"df.columns","39c076c6":"df.describe()","e9642a2f":"df.isnull().sum()","af5a05f0":"df.dtypes","8ae3b7dc":"df[\"approx_cost(for two people)\"].head()","35cd5641":"df[\"approx_cost(for two people)\"] = df[\"approx_cost(for two people)\"].astype('str').apply(lambda x: x.replace(',', '')).astype(float)\ndf[\"approx_cost(for two people)\"]","4ec26326":"df['rate'] = df['rate'].astype('str').apply(lambda x: x.split('\/')[0]).apply(lambda x: x.replace('NEW', str(np.nan))).apply(lambda x: x.replace('-', str(np.nan))).astype(float)\ndf['rate']","e208b525":"df.dropna(subset=['rate', 'approx_cost(for two people)'], inplace=True)\ndf.drop(['url', 'phone'], axis=1, inplace=True)\ndf.isnull().sum()","0c91e516":"import seaborn as sb\nplt.figure(1, figsize=(18, 7))\nsb.set(style=\"whitegrid\")\nsb.countplot( x= 'rate', data=df)\nplt.title('distribution of all rates')\nplt.show()","6d5ae498":"import seaborn as sb\nplt.figure(1, figsize=(18, 7))\nsb.set(style=\"whitegrid\")\nax = sb.countplot( x= 'approx_cost(for two people)', data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nplt.title('distribution of cost')\nplt.tight_layout()\nplt.show()","df578bba":"Lets Plot a bar graph showing count of restaurants for each rating."}}