{"cell_type":{"d071f074":"code","9c5edad0":"code","e5419211":"code","849f8197":"code","f5db1fdb":"code","7a119253":"code","0d52e8e5":"code","5c2bb82a":"code","f2496d0a":"code","4b82e22a":"code","9ea0ab7d":"code","0dbe41de":"code","79cfe6f5":"code","7281c53c":"code","6f511366":"code","2b4dc541":"code","e1875987":"code","11ebd574":"code","34c24859":"code","e41c13b8":"code","80ccf195":"code","59ff1eec":"code","b6bea448":"code","76802e39":"code","19a466df":"code","8dc2abfa":"code","bb6de8fb":"markdown","e7b777c1":"markdown","f7654354":"markdown","15bcbf9a":"markdown","65ada3f5":"markdown","29e895be":"markdown","b98ddaaa":"markdown","28aef959":"markdown","8f729fd3":"markdown","ae2e6093":"markdown","fac8c598":"markdown","c1de5d06":"markdown","93edc4c7":"markdown","16cea7d5":"markdown","303e0d5f":"markdown","e4bb1e58":"markdown","0118184b":"markdown","a207d21d":"markdown","c1ee3f49":"markdown","76f43a8a":"markdown","5c957c80":"markdown","99d6cab4":"markdown","66b56c7e":"markdown","7f334057":"markdown"},"source":{"d071f074":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nfrom IPython.display import HTML, display\nimport tabulate\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()","9c5edad0":"def load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","e5419211":"%%time\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","849f8197":"print('size of training data : ', train_df.shape)\nprint('size of testing data  : ', test_df.shape)","f5db1fdb":"train_df.head()","7a119253":"test_df.head()","0d52e8e5":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum() \/ train_df.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data.head(20)\n\n","5c2bb82a":"del train_df['trafficSource.campaignCode']","f2496d0a":"train_df['totals.transactionRevenue'].fillna(0, inplace=True)","4b82e22a":"train_df['trafficSource.adwordsClickInfo.page'].fillna(-99999, inplace=True)\ntest_df['trafficSource.adwordsClickInfo.page'].fillna(-99999, inplace=True)\nprint(train_df['trafficSource.adwordsClickInfo.page'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.page'].value_counts())","9ea0ab7d":"train_df['trafficSource.adwordsClickInfo.adNetworkType'].fillna('Others', inplace=True)\ntest_df['trafficSource.adwordsClickInfo.adNetworkType'].fillna('Others', inplace=True)\ntrain_df['trafficSource.adwordsClickInfo.adNetworkType'] = np.where(train_df['trafficSource.adwordsClickInfo.adNetworkType'] != 'Google Search' , 'Others',train_df['trafficSource.adwordsClickInfo.adNetworkType'])\ntest_df['trafficSource.adwordsClickInfo.adNetworkType'] = np.where(test_df['trafficSource.adwordsClickInfo.adNetworkType'] != 'Google Search'  , 'Others',test_df['trafficSource.adwordsClickInfo.adNetworkType'])\nprint(train_df['trafficSource.adwordsClickInfo.adNetworkType'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.adNetworkType'].value_counts())","0dbe41de":"train_df['trafficSource.adwordsClickInfo.slot'].fillna('NA', inplace=True)\ntest_df['trafficSource.adwordsClickInfo.slot'].fillna('NA', inplace=True)\n#train_df['trafficSource.adwordsClickInfo.slot'] = np.where(train_df['trafficSource.adwordsClickInfo.slot'] != [\"RHS\", \"Top\"] , 'NA',train_df['trafficSource.adwordsClickInfo.slot'])\ntest_df['trafficSource.adwordsClickInfo.slot'] = np.where(test_df['trafficSource.adwordsClickInfo.slot'] ==  \"Google Display Network\" , 'NA',test_df['trafficSource.adwordsClickInfo.slot'])\nprint(train_df['trafficSource.adwordsClickInfo.slot'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.slot'].value_counts())","79cfe6f5":"train_df['trafficSource.adwordsClickInfo.isVideoAd'].fillna(True, inplace=True)\ntest_df['trafficSource.adwordsClickInfo.isVideoAd'].fillna(True, inplace=True)\nprint(train_df['trafficSource.adwordsClickInfo.isVideoAd'].value_counts())\nprint(test_df['trafficSource.adwordsClickInfo.isVideoAd'].value_counts())","7281c53c":"train_df['trafficSource.isTrueDirect'].fillna(False, inplace=True)\ntest_df['trafficSource.isTrueDirect'].fillna(False, inplace=True)\nprint(train_df['trafficSource.isTrueDirect'].value_counts())\nprint(test_df['trafficSource.isTrueDirect'].value_counts())\n","6f511366":"train_df['totals.bounces'].fillna(0, inplace=True)\ntest_df['totals.bounces'].fillna(0, inplace=True)\nprint(train_df['totals.bounces'].value_counts())\nprint(test_df['totals.bounces'].value_counts())","2b4dc541":"train_df['totals.newVisits'].fillna(0, inplace=True)\ntest_df['totals.newVisits'].fillna(0, inplace=True)\nprint(train_df['totals.newVisits'].value_counts())\nprint(test_df['totals.newVisits'].value_counts())","e1875987":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum() \/ train_df.isnull().count()*100).sort_values(ascending = False)\nmissing_application_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_application_train_data.loc[missing_application_train_data['Percent'] > 0]\n","11ebd574":"del missing_application_train_data","34c24859":"feats_counts = train_df.nunique(dropna = False).sort_values(ascending = False)\nvalues = feats_counts.values\ntrace1 = go.Bar(\n    x = feats_counts.index,\n    y = values ,\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    title = \"# of unique values in each column in dataframe\",\n    xaxis=dict(\n        title='Features Names',\n        domain=[0, 0.5]\n    ),\n    \n    yaxis=dict(\n        title='# of unique constant values'\n        \n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Campaign code')\n","e41c13b8":"constant_features = feats_counts.loc[feats_counts==1].index.tolist()\nprint (constant_features)\ntrain_df.drop(constant_features,axis = 1,inplace=True)\ntest_df.drop(constant_features,axis = 1,inplace=True)\ndel constant_features","80ccf195":"feats_counts = train_df.nunique(dropna = False).sort_values(ascending = False)\nprint(feats_counts)\ndel feats_counts","59ff1eec":"train_df[\"totals.transactionRevenue\"] = train_df[\"totals.transactionRevenue\"].astype('float')\nrevnSum = train_df.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().sort_values(ascending = True).reset_index()\n#revnSum = np.log1p(revnSum['totals.transactionRevenue']\/1000000)\nrevnSum = np.log1p(revnSum['totals.transactionRevenue'])\nplt.figure(figsize=(8,6))\nplt.scatter(revnSum.index, revnSum.values)\nplt.xlabel('index', fontsize=12)\nplt.ylabel('TransactionRevenue for visitors', fontsize=12)\nplt.show()","b6bea448":"train_df['if_TransRev'] = np.where(train_df['totals.transactionRevenue'] > 0.0 , 1,0)\nfeats_counts = train_df['if_TransRev'].value_counts()\nvalues = (feats_counts\/feats_counts.sum())*100\ntrace1 = go.Bar(\n    x = feats_counts.index,\n    y = values ,\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    title = \"% of visitors with transaction vs Non transaction\",\n    xaxis=dict(\n        title='TransactionRevenue',\n        domain=[0, 0.5]\n    ),\n    \n    yaxis=dict(\n        title='% of visitors'\n        \n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='Campaign code')\n","76802e39":"#train_df.to_csv(\"filterTrain_df.csv\", index=False)","19a466df":"tempTrain_df = train_df[train_df['totals.transactionRevenue'] > 0.0]\ntempTrain_df['device.isMobile'] = np.where(tempTrain_df['device.isMobile'] == True , 1,0)\ntempTrain_df['totals.newVisits'] = np.where(tempTrain_df['totals.newVisits'] == True , 1,0)\ntempTrain_df['trafficSource.adwordsClickInfo.isVideoAd'] = np.where(tempTrain_df['trafficSource.adwordsClickInfo.isVideoAd'] == True , 1,0)\ntempTrain_df['trafficSource.isTrueDirect'] = np.where(tempTrain_df['trafficSource.isTrueDirect'] == True , 1,0)\ntempTrain_df['totals.bounces'] = np.where(tempTrain_df['totals.bounces'] == True , 1,0)\ntempTrain_df.shape","8dc2abfa":"def bar_chart(lables, values):\n    trace = go.Bar(\n        x=lables,\n        y=values,\n        showlegend=False,\n        marker=dict(\n            color='rgba(28,32,56,0.84)',\n        )\n    )\n    return trace\n\nfeats_counts = tempTrain_df['device.isMobile'].value_counts()\ntrace1 = bar_chart(lables = feats_counts.index, values = (feats_counts\/feats_counts.sum())*100)\n\nfeats_counts = tempTrain_df['trafficSource.adwordsClickInfo.isVideoAd'].value_counts()\ntrace2 = bar_chart(lables = feats_counts.index, values = (feats_counts\/feats_counts.sum())*100)\n\nfeats_counts = tempTrain_df['totals.newVisits'].value_counts()\ntrace3 = bar_chart(lables = feats_counts.index, values = (feats_counts\/feats_counts.sum())*100)\n\nfeats_counts = tempTrain_df['trafficSource.isTrueDirect'].value_counts()\ntrace4 = bar_chart(lables = feats_counts.index, values = (feats_counts\/feats_counts.sum())*100)\n\nfeats_counts = tempTrain_df['totals.bounces'].value_counts()\ntrace5 = bar_chart(lables = feats_counts.index, values = (feats_counts\/feats_counts.sum())*100)\n\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.06, \n                          subplot_titles=[\"Mobile Ads\", \"Video Ads\",\"New Visit\", \"Direct Visit\",\"if user bounced\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\n\n\nfig['layout'].update(height=1200, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Impact of 5 binary features on transactions with revenue\")\n\npy.iplot(fig, filename='plots_2')\n","bb6de8fb":"<h4>Below statatistics shows that there are 8 columns with more than 97% missing values<\/h4>\n\nNext task is to analyse the missing attribute and try to recommnd on imputing the missing values","e7b777c1":"<h3>Objective of the notebook:<\/h3>\n\nIn this notebook, We will \n* perform analysis on data, \n* perform missing data imputation and \n* perform simple EDA  \n\n<h3>Objective of the competition:<\/h3>\n\nIn this competition, we a\u2019re challenged to analyze a Google Merchandise Store (also known as GStore, where Google swag is sold) customer dataset to predict revenue per customer.","f7654354":"<h3> <span style=\"color:,brown\">Feature # 8 : totals.bounces : <\/span><\/h3>\n\n***Recomendation :***  Replace all NaN's with _0_","15bcbf9a":"<h3> <span style=\"color:,brown\">Feature # 9 : totals.newVisits : <\/span><\/h3>\n\n***Recomendation :*** replace all NaN's with _0_","65ada3f5":"<h3> <span style=\"color:,brown\">Feature # 3 : trafficSource.adwordsClickInfo.page : <\/span><\/h3>\n\n*** Recomendation : *** _With my experience I never go beyond 3 \/ 4  pages of search results so this feature is a good candidate for binning._ therefore binning it into 3 classes 1) Missing values : -99999, 2) Ads on first page, 3) Any other class \n","29e895be":"We know that total # of visitors are 723803 and from the above plot we can see that there are more 70000 visitors with  transactionRevenue = 0. Lets plot the percentage of visitors having no transactionRevenue Vs transactionRevenue > 0","b98ddaaa":"** Train Data snippets : **","28aef959":"<h3>Target variable analysis<\/h3>","8f729fd3":"<H3>Analysis on transactions that contributes towards revenue<\/h3>\n\na) Contribution of Mobile ads where customer visit is converted into revenue\n\nb) When customer made a new visit and the visit is converted into revenue\n\nc) Contribution of video Ads where customer visit is converted into revenue\n\nd) Contribution of direct visits where customer visit is converted into revenue","ae2e6093":"<h3> <span style=\"color:,brown\"> Feature # 7 : trafficSource.isTrueDirect : <\/span><\/h3>\n\n\n\n***Recomendation:*** In train and test Dataframe user can replace all NaN's with False.\n\n","fac8c598":"<h5> Remove constant features <\/h5>","c1de5d06":"<h3>File Descriptions<\/h3>\n\n* train.csv - the training set - contains the same data as the BigQuery rstudio_train_set.\n\n* test.csv - the test set - contains the same data as the BigQuery rstudio_test_set.\n\n<h3>Data Fields<\/h3>\n\n* fullVisitorId- A unique identifier for each user of the Google Merchandise Store.\n\n* channelGrouping - The channel via which the user came to the Store.\n\n* date - The date on which the user visited the Store.\n\n* device - The specifications for the device used to access the Store.\n\n* geoNetwork - This section contains information about the geography of the user.\n\n* sessionId - A unique identifier for this visit to the store.\n\n* socialEngagementType - Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".\n\n* totals - This section contains aggregate values across the session.\n\n* trafficSource - This section contains information about the Traffic Source from which the session originated.\n\n* visitId - An identifier for this session. This is part of the value usually stored as the _utmb cookie. This is only unique to the user. For a completely unique ID, you should use a combination of fullVisitorId and visitId.\n\n* visitNumber - The session number for this user. If this is the first session, then this is set to 1.\n\n* visitStartTime - The timestamp (expressed as POSIX time).\n\n***_Credit Note_*** - Using code from [kernal Quick start: read csv and flatten json fields](https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields) by [Juli\u00e1n Peller1](https:\/\/www.kaggle.com\/julian3833)","93edc4c7":"<h3> Revisiting the missing values<\/h3>","16cea7d5":"<h3> <span style=\"color:,brown\">Feature # 5 : trafficSource.adwordsClickInfo.slot : <\/span><\/h3>\n\n*** Recomendation : ***  We can replace all NaN's and Google Display Network with unique value class.","303e0d5f":"<h3> Pre processing and data check <\/h3>","e4bb1e58":"<h2>Missing values assesment<\/h2>\n\nIn this section we will display the counts and percentage of missing value and impute the missing values using the pervious kernal [Simple Missing Data Analysis - GACRP](https:\/\/www.kaggle.com\/nakapoor\/simple-missing-data-analysis-gacrp)","0118184b":"<h3> <span style=\"color:,brown\">Feature # 6 : trafficSource.adwordsClickInfo.isVideoAd : <\/span><\/h3>\n\n***Recomendation:*** In train and test Dataframe user can replace all NaN's with True.","a207d21d":"We found that there are **19 constant features** as represented in above plot and names below in the data set. We can go ahead and remove the same for fast processing.","c1ee3f49":"<h3> <span style=\"color:,brown\">Feature # 1 : trafficSource.campaignCode <\/span><\/h3>\n\n*** Recomendation : ***   Removing this feature from train Dataframe.","76f43a8a":"***This shows this is a highly imbalance problem.*** As visitors ***not contributing towards the revenue*** are ***98.73%*** whereas the visitors ***contributing towards the revenue*** are only ***1.27%*** . ","5c957c80":"<h3>Snippets from the above analysis : <\/h3>\n\n* Only 9% of the transactions contributing to revenue are Mobile Ads.\n* ~ 96 % of the transactions contributing to revenue are Video ads.\n* Only 38% of the transactions contributing to revenue are by New visitors\n* ~ 61% of the transactions contributing to revenue are by direct visit to google Store\n* It is very obvious if user bounsed(visitors who enter the site and then leave)the transactions will not contribute to any revenue. \n\n","99d6cab4":"<h3> <span style=\"color:,brown\"> Feature # 2 : totals.transactionRevenue : <\/span><\/h3>\n\nNow This is the Target attribute . \n\n**Recomendation : ** 5332 datapoints has valid numerical values and rest all datapoints can be populated with value 0\n","66b56c7e":"** Train Data snippets : **","7f334057":"<h3> <span style=\"color:,brown\">Feature # 4 : trafficSource.adwordsClickInfo.adNetworkType : <\/span><\/h3>\n\n*** Recomendation : *** Binning the whole data into 2 bins ***1)*** Google Search and ***2)*** Others"}}