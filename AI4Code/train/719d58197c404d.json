{"cell_type":{"0d4aad18":"code","a1ee21a2":"code","3c6c587d":"code","d8342d34":"code","9a00a0c2":"code","88ded4fb":"code","1bf448a7":"code","62246355":"code","2f9d17f5":"code","e69b9cdf":"code","07b938c0":"code","75ce5b95":"code","5464426c":"code","c212dfff":"code","d7c74a6f":"code","73e2d6ef":"code","ad8fc755":"code","ab906ec0":"code","083f5788":"code","e746e8f5":"code","8769347c":"code","31abcf30":"code","7edf8da2":"code","4786cde4":"code","67d5071d":"code","b1c2048f":"code","f24da948":"code","c9d8a5c2":"code","a23c739b":"code","9ce3f1c9":"code","6e2a46c3":"code","7bc7b0f9":"code","8ba9e56f":"code","14aa5f08":"code","5002fb38":"code","5462788b":"code","af4303fc":"code","b8bf7c1a":"code","5b02137e":"code","6ae2bbc5":"code","dad6ed74":"markdown","3ae09422":"markdown","5d06c3d1":"markdown","5cb1427e":"markdown","bc8147d8":"markdown","2ed0c563":"markdown","278f78bc":"markdown","8571f1ae":"markdown","c7182582":"markdown","094b8a39":"markdown","6b28bfcb":"markdown","11493464":"markdown","30074de8":"markdown","92becc49":"markdown","ffb64d67":"markdown","0dc69c8a":"markdown","1fc9d5eb":"markdown","021e2538":"markdown","0412276c":"markdown","05e4d26e":"markdown"},"source":{"0d4aad18":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","a1ee21a2":"df=pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndf.head()","3c6c587d":"df.dtypes","d8342d34":"df.isnull().sum()","9a00a0c2":"df.shape","88ded4fb":"df.describe()","1bf448a7":"df.info()","62246355":"for i in df.columns:\n    if len(df[i].unique())<34:\n        df.groupby(i)['degree_p'].count().plot.bar()\n        plt.show()","2f9d17f5":"for i in df.columns:\n    if len(df[i].unique())<70:\n        df.groupby(i)['hsc_p'].count().plot.bar()\n        plt.show()","e69b9cdf":"for i in df.columns:\n    if len(df[i].unique())<70:\n        df.groupby(i)['ssc_p'].count().plot.bar()\n        plt.show()","07b938c0":"plt.figure(figsize=(12, 6))\nsns.heatmap(df.corr(), annot=True)","75ce5b95":"df1= df[['gender', 'status','ssc_p']].copy()\ndf_filtered = df1.query('ssc_p>85')\ndf_filtered","5464426c":"df1= df[['gender', 'status','hsc_p']].copy()\ndf_filtered = df1.query('hsc_p>85')\ndf_filtered","c212dfff":"df1= df[['gender', 'status','degree_p']].copy()\ndf_filtered = df1.query('degree_p>80')\ndf_filtered","d7c74a6f":"f,ax=plt.subplots(2,2,figsize=(25,20))\nsns.boxplot(x=\"salary\",ax=ax[0][0],data=df, palette=\"muted\")\nsns.boxplot(x=\"degree_p\",data=df,ax=ax[0][1], palette=\"muted\")\nsns.boxplot(x=\"hsc_p\",ax=ax[1][0],data=df, palette=\"muted\")\nsns.boxplot(x=\"ssc_p\",ax=ax[1][1],data=df, palette=\"muted\")","73e2d6ef":"f,ax=plt.subplots(3,2,figsize=(25,25))\nsns.countplot(x=\"specialisation\",ax=ax[0][0],data=df,hue=\"status\",palette=\"muted\")\nsns.countplot(x=\"status\",data=df,ax=ax[0][1], palette=\"muted\")\nsns.countplot(x=\"degree_t\",ax=ax[1][0],data=df,hue=\"status\", palette=\"muted\")\nsns.countplot(x=\"hsc_s\",ax=ax[1][1],data=df,hue=\"status\", palette=\"muted\")\nsns.countplot(x=\"ssc_b\",ax=ax[2][0],data=df,hue=\"status\", palette=\"muted\")\nsns.countplot(x=\"gender\",ax=ax[2][1],data=df, hue=\"status\",palette=\"muted\")","ad8fc755":"ax = sns.distplot(df['etest_p'], rug=True, hist=True)","ab906ec0":"ax = sns.violinplot(x=\"etest_p\", y=\"status\", data=df, palette=\"muted\")","083f5788":"f,ax=plt.subplots(1,1,figsize=(25,6))\nsns.kdeplot(df.loc[(df['status']=='Placed'), 'etest_p'], color='r', shade=True, Label='Placed')\nsns.kdeplot(df.loc[(df['status']=='Not Placed'), 'etest_p'], color='g', shade=True, Label='Not Placed')\nplt.xlabel('Etest_p') ","e746e8f5":"df1=df.drop(['sl_no'], axis=1)\ndf1.hist (bins=10,figsize=(20,20))\nplt.show ()","8769347c":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(df1)","31abcf30":"sns.pairplot(df,hue = 'status', vars = ['ssc_p','hsc_p', 'degree_p', 'etest_p', 'mba_p', 'salary'] )","7edf8da2":"from sklearn.model_selection import train_test_split\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import accuracy_score\nfrom pandas.plotting import scatter_matrix","4786cde4":"df.loc[df['status']=='Not Placed', 'status'] = 0\ndf.loc[df['status']=='Placed', 'status'] = 1\ndf.loc[df['degree_t']=='Sci&Tech','degree_t'] = 0\ndf.loc[df['degree_t']=='Comm&Mgmt','degree_t'] = 1\ndf.loc[df['degree_t']=='Others','degree_t'] = 2\ndf.loc[df['gender']=='M','gender'] = 0\ndf.loc[df['gender']=='F','gender'] = 1\ndf.loc[df['ssc_b']=='Others','ssc_b'] = 0\ndf.loc[df['ssc_b']=='Central','ssc_b'] = 1\ndf.loc[df['hsc_b']=='Others','hsc_b'] = 0\ndf.loc[df['hsc_b']=='Central','hsc_b'] = 1\ndf.loc[df['ssc_b']=='Others','ssc_b'] = 0\ndf.loc[df['ssc_b']=='Central','ssc_b'] = 1\ndf.loc[df['workex']=='No','workex'] = 0\ndf.loc[df['workex']=='Yes','workex'] = 1\n\ndf['workex'].astype(int)\ndf['ssc_b'].astype(int)\ndf['hsc_b'].astype(int)\ndf['gender'].astype(int)\ndf['degree_t'].astype(int)\n\n","67d5071d":"x = df.drop(['status','salary','sl_no','hsc_s','specialisation'],axis=1)\ny=df['status'].astype(int)\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=3)","b1c2048f":"seed=7\nmodels = []\nmodels.append(('RF',RandomForestClassifier()))\nmodels.append(('SVM',SVC()))\nmodels.append(('LR',LogisticRegression()))\nmodels.append(('NB',GaussianNB()))\n# Evaluating each models in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10,random_state=seed)\n    cv_results = cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" %(name, cv_results.mean(), cv_results.std())\n    print(msg)","f24da948":"logistic = LogisticRegression()\nlogistic.fit(x_train,y_train)\ny_pred=logistic.predict(x_test)\nprint(classification_report(y_test,y_pred))\naccuracy1=logistic.score(x_test,y_test)\nprint (accuracy1*100,'%')\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot= True)","c9d8a5c2":"classifier=SVC()\nclassifier.fit(x_train,y_train)\nsvm_predict=classifier.predict(x_test)\nprint(classification_report(y_test,svm_predict))\naccuracy2=classifier.score(x_test,y_test)\nprint(accuracy2*100,'%')\ncm = confusion_matrix(y_test, svm_predict)\nsns.heatmap(cm, annot= True)","a23c739b":"ran_class=RandomForestClassifier()\nran_class.fit(x_train,y_train)\nran_predict=ran_class.predict(x_test)\nprint(classification_report(y_test,ran_predict))\naccuracy3=ran_class.score(x_test,y_test)\nprint(accuracy3*100,'%')\ncm = confusion_matrix(y_test, ran_predict)\nsns.heatmap(cm, annot= True)","9ce3f1c9":"# Defining the decision tree algorithm\nfrom sklearn.tree import DecisionTreeClassifier\ndtree=DecisionTreeClassifier()\ndtree.fit(x,y)\n\nprint('Decision Tree Classifer Created')","6e2a46c3":"# Install required libraries\n!pip install pydotplus\n!apt-get install graphviz -y","7bc7b0f9":"feature_names=x.columns","8ba9e56f":"# Import necessary libraries for graph viz\n!pip install --upgrade scikit-learn==0.20.3\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\n\n# Visualize the graph\ndot_data = StringIO()\nexport_graphviz(dtree, out_file=dot_data, feature_names=x.columns,  \n                filled=True, rounded=True,\n                special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())","14aa5f08":"pip install flask","5002fb38":"from flask import Flask, render_template, request","5462788b":"from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(\"\/\")\ndef hello():\n    return \"Hello World!\"\n\n\nif __name__ == '__main__':\n    app.run(debug=True)","af4303fc":"app = Flask('campusplacement')","b8bf7c1a":"@app.route('\/')\ndef campus_form():\n    return render_template('campus.html')\n@app.route('\/results', methods=['POST'])\ndef results():\n    form = request.form\n    if request.method == 'POST':\n      #write your function that loads the model\n      model = get_model() #you can use pickle to load the trained model\n       status =request.form['status']\n       #year = request.form['year']\n       predicted_campus_status= model.predict(status)\n       return render_template('campus.html', status=status,   predicted_status=predicted_campus_status)","5b02137e":"!pip install beautifulsoup4\n!pip install -U selenium\n!pip install webdriver_manager --user","6ae2bbc5":"from selenium import webdriver\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\ndriver = webdriver.Chrome(ChromeDriverManager().install())\ncontent = driver.page_source\nsoup = BeautifulSoup(content)","dad6ed74":"**Problem statement:-**\n\nThe dataset contains factor affecting placements in the college.\n\n**Data columns**:-\n\n1)sl_no\t:- Serial Number\n\n2)gender:- Male or Female\n\n3)ssc_p\t:- SSC percentage\n\n4)ssc_b\t:- SSC board\n\n4)hsc_p\t:- HSC percentage\n\n5)hsc_b\t:- HSC board\n\n6)hsc_s :- HSC specialization\n\n7)degree_p\t:- Degree percentage\n\n8)degree_t\t:- Degree specialization\n\n9)workex\t:- work experience\n\n10)etest_p :- Etest percentage\n\n11)specialisation\t\n\n12)mba_p:-MBA percentage\n\n13)status:- placed or not placed\n\n14)salary\n","3ae09422":"**Distplot**","5d06c3d1":"**Pairplot**","5cb1427e":"**Traintest split**","bc8147d8":"**Conclusion:-** Students having percentage above 85 in HSC will get placed.","2ed0c563":"**Randon forest classifier**","278f78bc":"**Logistic Regression**","8571f1ae":"**KDE Plot**","c7182582":"**Heatmap**","094b8a39":"**Gender ratio in degree exam**","6b28bfcb":"**Gender ration in HSC exam**","11493464":"**Histogram**","30074de8":"**Violinplot**","92becc49":"**Countplot**","ffb64d67":"**Gender ratio in SSC exam**","0dc69c8a":"**Box plot**","1fc9d5eb":"**SVM**","021e2538":"**Conclusion:-** Students having percentage above 85 will get placed.","0412276c":"**Table of content:-**\n\n1.Importing Dataset\n\n2.Dataset Visualization\n\n3.Dataset Modeling\n\n  1. Countplot\n\n  2. Boxplot\n\n  3. Pairplot\n\n  4. Histogram\n\n  5. Violinplot\n\n  6. Distplot\n\n  7. KDE plot\n  \n  8. Heatmap","05e4d26e":"**Conclusion:-** Students having percentage above 80 in Graduation will get placed."}}