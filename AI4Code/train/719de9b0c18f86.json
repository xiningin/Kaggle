{"cell_type":{"cf1d2492":"code","4238ac05":"code","389ebf4b":"code","c08b811c":"code","eb18fa1c":"code","bca69b11":"code","120c6af9":"code","c6799272":"code","cc08b7ce":"code","0176ac0b":"code","9d686bd2":"code","c29feb68":"code","f5033305":"code","415d58e2":"code","0e6141c8":"markdown","5d60324c":"markdown","fa2ce1ae":"markdown","d876d38a":"markdown","dbe9edde":"markdown","e0e7afea":"markdown","8a1c230b":"markdown","73e98362":"markdown","f8b287c0":"markdown","36e3f109":"markdown","d0806bcc":"markdown","9522ef80":"markdown","db581ed9":"markdown","e629a1df":"markdown","45e5523d":"markdown","79d239a8":"markdown","cf4a246e":"markdown","78cb7637":"markdown","11fc7755":"markdown"},"source":{"cf1d2492":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom collections import Counter\npd.set_option(\"display.max_columns\", None)\nsns.set(style = \"white\")","4238ac05":"plt.rcParams[\"axes.labelsize\"] = 16.\nplt.rcParams[\"xtick.labelsize\"] = 14.\nplt.rcParams[\"ytick.labelsize\"] = 14.\nplt.rcParams[\"legend.fontsize\"] = 12.\nplt.rcParams[\"figure.figsize\"] = [15., 7.]","389ebf4b":"battles = pd.read_csv(\"..\/input\/game-of-thrones\/battles.csv\")\nbattles.head()","c08b811c":"p = battles.groupby(\"year\").count()[\"battle_number\"].plot.bar(rot = 0, color = \"steelblue\")\n_ = p.set(xlabel = \"Year\", ylabel = \"Number of Battles\"), plt.yticks(range(0, 21, 2))","eb18fa1c":"p = battles[\"region\"].value_counts().sort_values(ascending = True).plot.barh(rot = 0, color = \"steelblue\")\n_ = p.set(xlabel = \"Number of Battles\")","bca69b11":"attacker = pd.DataFrame(battles.attacker_king.value_counts())\ndefender = pd.DataFrame(battles.defender_king.value_counts())\ndata = attacker.merge(defender, how = \"outer\", left_index = True, right_index = True).fillna(0)\ndata.loc[:, \"Sum\"] = data.attacker_king + data.defender_king\np = data.sort_values([\"Sum\", \"attacker_king\"]).loc[:, [\"attacker_king\", \"defender_king\"]].plot.barh(rot = 0, stacked = True, color = [\"steelblue\", sns.color_palette()[9]])\nplt.xticks(np.arange(0, max(data.Sum) + 2, 2))\n_ = p.set(xlabel = \"Number of Battles\"), p.legend([\"Attack Battles\", \"Defense Battles\"])","120c6af9":"temp = battles.dropna(subset = [\"attacker_king\", \"defender_king\"]).copy(deep = True)\nc = list(Counter([tuple(set(x)) for x in temp[[\"attacker_king\", \"defender_king\"]].values if len(set(x)) > 1]).items())\ndata = pd.DataFrame(c).sort_values(1)\np = data.plot.barh(color = \"steelblue\", figsize = (12, 7))\n_ = plt.xticks(np.arange(0, max(data[1]) + 2, 2))\n_ = p.set(yticklabels = [\"%s vs. %s\" % (x[0], x[1]) for x in data[0]], xlabel = \"Number of Battles\"), p.legend().remove()","c6799272":"attacker_dict = {}\nfor column in [\"attacker_1\", \"attacker_2\", \"attacker_3\", \"attacker_4\"]:\n    val_count = battles[column].value_counts()\n    for index, value in val_count.items():\n        attacker_dict[index] = attacker_dict.get(index, 0) + value\n        \ndefender_dict = {}\nfor column in [\"defender_1\", \"defender_2\", \"defender_3\", \"defender_4\"]:\n    val_count = battles[column].value_counts()\n    for index, value in val_count.items():\n        defender_dict[index] = defender_dict.get(index, 0) + value\n\nattacker_df = pd.DataFrame.from_dict(attacker_dict, orient = \"index\", columns = [\"attacker\"])\ndefender_df = pd.DataFrame.from_dict(defender_dict, orient = \"index\", columns = [\"defender\"])\n\ndata = attacker_df.merge(defender_df, how = \"outer\", left_index = True, right_index = True).fillna(0)\ndata.loc[:, \"Sum\"] = data.iloc[:,0] + data.iloc[:,1]\ndata = data[data.Sum > 1]\np = data.sort_values([\"Sum\", \"attacker\"]).iloc[:, 0:2].plot.barh(rot = 0, stacked = True, color = [\"steelblue\", sns.color_palette()[9]])\nplt.xticks(np.arange(0, max(data.Sum) + 2, 2))\n_ = p.set(xlabel = \"Number of Battles\"), p.legend([\"Attack Battles\", \"Defense Battles\"])","cc08b7ce":"data = battles.loc[battles.attacker_outcome.notna()].copy(deep = True)\nf, ax = plt.subplots(1, 2, figsize = (15, 7))\nf.suptitle(\"Outcome Distribution\", fontsize = 18.)\n_ = data.attacker_outcome.value_counts().plot.bar(ax = ax[0], rot = 0, color = [\"steelblue\", \"lightcoral\"]).set(xticklabels = [\"Win\", \"Loss\"])\n_ = data.attacker_outcome.value_counts().plot.pie(labels = (\"Win\", \"Loss\"), autopct = \"%.2f%%\", label = \"\", fontsize = 14., ax = ax[1],\\\ncolors = [\"steelblue\", \"lightcoral\"], wedgeprops = {\"linewidth\": 1.5, \"edgecolor\": \"#F7F7F7\"}), ax[1].texts[1].set_color(\"#F7F7F7\"), ax[1].texts[3].set_color(\"#F7F7F7\")","0176ac0b":"data = battles.dropna(subset = [\"attacker_size\", \"defender_size\", \"attacker_outcome\"]).copy(deep = True)\np = sns.scatterplot(\"attacker_size\", \"defender_size\", hue = \"attacker_outcome\", palette = [\"steelblue\", \"lightcoral\"], data = data, s = 200)\n_ = p.set(xlabel = \"Attacker Size\", ylabel = \"Defender Size\")\nlegend = p.legend()\nlegend.texts[0].set_text(\"Attacker Outcome\")\nlegend.texts[1].set_text(\"Win\")\nlegend.texts[2].set_text(\"Loss\")","9d686bd2":"data.loc[data.attacker_size == max(data.attacker_size)]","c29feb68":"battles.loc[27, \"attacker_king\"] = \"Mance Rayder\"\nbattles.loc[27, \"defender_king\"] = \"Stannis Baratheon\"","f5033305":"attacker = battles.dropna(subset = [\"attacker_commander\"]).copy(deep = True)\ndefender = battles.dropna(subset = [\"defender_commander\"]).copy(deep = True)\n\nd = {}\n\nfor names in attacker[\"attacker_commander\"].values:\n    name_lst = names.split(\", \")\n    for name in name_lst:\n        d[name] = d.get(name, 0) + 1\n\nfor names in defender[\"defender_commander\"].values:\n    name_lst = names.split(\", \")\n    for name in name_lst:\n        d[name] = d.get(name, 0) + 1\n        \ndata  = pd.DataFrame.from_dict(d, orient = \"index\", columns = [\"Count\"])\np = data.loc[data.Count > 2].sort_values(\"Count\").plot.barh(color = \"steelblue\")\nplt.xticks(np.arange(0, max(data.Count) + 1, 1))\n_ = p.set(xlabel = \"Number of Battles\"), p.legend().remove()","415d58e2":"attacker = battles.dropna(subset = [\"attacker_commander\", \"attacker_outcome\"]).copy(deep = True)\ndefender = battles.dropna(subset = [\"defender_commander\", \"attacker_outcome\"]).copy(deep = True)\n\nd = {}\n\nfor pair in attacker[[\"attacker_commander\", \"attacker_outcome\"]].values:\n    name_lst, outcome = pair[0].split(\", \"), pair[1]\n    for name in name_lst:\n        if outcome == \"win\":\n            d[name] = d.get(name, 0) + 1\n\nfor pair in defender[[\"defender_commander\", \"attacker_outcome\"]].values:\n    name_lst, outcome = pair[0].split(\", \"), pair[1]\n    for name in name_lst:\n        if outcome == \"loss\":\n            d[name] = d.get(name, 0) + 1\n\ndata  = pd.DataFrame.from_dict(d, orient = \"index\", columns = [\"Count\"])\np = data.loc[data.Count > 1].sort_values(\"Count\").plot.barh(color = \"steelblue\")\nplt.xticks(np.arange(0, max(data.Count) + 1, 1))\n_ = p.set(xlabel = \"Number of Victories\"), p.legend().remove()","0e6141c8":"## Commander Who Won the Most Battles","5d60324c":"## Houses that Fought the Most Battles","fa2ce1ae":"King Joffrey\/Tommen Baratheon fought the most battles. At the same time, he was also the king who attacked the most.","d876d38a":"## Number of Battles per Year","dbe9edde":"The bottom right point seems surprising--how could the attacker lose with such an enormous army size? Let's take a closer look at this battle.","e0e7afea":"Fortunately, this error does not affect our analyses about army sizes. For the previous \"The King who Fought the Most Battles\" plot, however, one of the attack battle should actually be defense battle. Fill free to re-run the corresponding code cell to update the result.","8a1c230b":"According to [Game of Thrones Wiki](https:\/\/gameofthrones.fandom.com\/wiki\/Battle_of_Castle_Black), the 100,000 undisciplined wildlings were only expecting attacks from the Night's Watch and left their eastern flank totally undefended. Stannis's army took the wildlings by complete surprise and quickly finished the battle by capturing Mance Rayder. \n\nNotice the *attacker_king* and *defender_king* should be switched for this row. The attacker king should be Mance Rayder and the defender king should be Stannis Baratheon. ","73e98362":"## Top Rivalries","f8b287c0":"The Lannisters is the house that fought the most battles, followed by the Starks. In addition, the Lannisters, the Starks, and the Greyjoys are among the houses that attacked most often. \n\nNote that this bar plot excluded 8 houses\/groups that only fought one battle.","36e3f109":"This notebook is inspired by [Shail Deliwala](https:\/\/www.kaggle.com\/shaildeliwala\/exploratory-analysis-and-predictions).","d0806bcc":"## Commander Who Fought the Most Battles","9522ef80":"## Impact of Army Size on Battle Outcome","db581ed9":"As one may observe, a vast majority of attackers ended up winning the battle. This attacker advantage might due to several possible reasons:\n1. Communication was slow in the *Game of Thrones* world, thus attackers oftentimes could catch defenders off guard.\n2. The party with greater advantage or confidence might be more likely to attack.","e629a1df":"More than half of the battles were between Joffrey\/Tommen Baratheon and Robb Stark. ","45e5523d":"## The King who Fought the Most Battles","79d239a8":"Note that the plot does not include commanders who have only won 1 battle.","cf4a246e":"Note that the plot does not include commanders who have only fought 2 battle or below.","78cb7637":"## Attacker Advantage","11fc7755":"## Number of Battles per Region"}}