{"cell_type":{"4d07e3cd":"code","722b3a0c":"code","51c2c330":"code","dad9eb38":"code","9f929c4c":"code","850e4e49":"code","579dc160":"code","e7c57f80":"code","4476c839":"code","888fcee7":"code","83923fa5":"code","6819167c":"code","1e3d6123":"code","5d2c011a":"code","caedcf77":"code","dc6c3b16":"code","f259cb3f":"code","55929f19":"code","d1cc6fed":"code","d8d3ca16":"code","8cc2a7b3":"code","62ec3229":"code","54686749":"code","10d17c38":"code","75aaa21e":"code","0dd3243f":"code","5cb28878":"code","c358d863":"code","8291b8f8":"code","24e25bb5":"code","db310b48":"code","244017f8":"code","c64260e3":"code","c5aeba37":"code","7622b529":"code","f76c8752":"code","00d28d88":"code","ee4433f1":"code","22a58078":"code","7a03d2c9":"code","2ec9807b":"code","87f6ee53":"code","342992d0":"code","11d82775":"code","9f9e9a1e":"code","6b37ad28":"code","157f2b06":"code","7f8580c1":"code","2f414045":"code","c513f527":"code","7c2f3bca":"code","254faa99":"code","80313616":"code","1d71db9f":"code","9d147bbe":"markdown","3294619c":"markdown","e0b917c2":"markdown","ddc9f73d":"markdown","8b08798d":"markdown","04170d21":"markdown","632ca25a":"markdown","cc6be99e":"markdown","5bfc3f34":"markdown","fdc09b09":"markdown","8c15addf":"markdown","4c67f32e":"markdown"},"source":{"4d07e3cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","722b3a0c":"trainset = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrainset.head()","51c2c330":"trainset.shape","dad9eb38":"trainset.info()","9f929c4c":"trainset.describe()","850e4e49":"testset = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntestset.head()","579dc160":"testset.shape","e7c57f80":"testset.info()","4476c839":"resultset = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nresultset.head()","888fcee7":"resultset.shape","83923fa5":"resultset.info()","6819167c":"resultset.describe()","1e3d6123":"trainset.corr()","5d2c011a":"import seaborn as sns","caedcf77":"trainset.groupby(['Pclass'])['Survived'].mean()","dc6c3b16":"trainset.groupby(['Sex']).mean()","f259cb3f":"sns.set_style('whitegrid')\nsns.catplot(x= 'Sex', hue= 'Survived', kind = 'count',  data= trainset)","55929f19":"survived_f = trainset[trainset['Sex'] == 'female']\nsurvived_f","d1cc6fed":"survived_m = trainset[trainset['Sex'] == 'male']\nsurvived_m","d8d3ca16":"survived_f['Age'].plot(kind = 'hist')","8cc2a7b3":"survived_m['Age'].plot(kind = 'hist')","62ec3229":"print(\"female age info\")\nprint('mean : ', survived_f['Age'].mean())\nprint('min : ', survived_f['Age'].min())\nprint('max : ', survived_f['Age'].max())","54686749":"print(\"male age info\")\nprint('mean : ', survived_m['Age'].mean())\nprint('min : ', survived_m['Age'].min())\nprint('max : ', survived_m['Age'].max())","10d17c38":"trainset[trainset['Fare'] < 1]  #People who boarded the ship for free","75aaa21e":"sns.catplot(x= 'Survived', col='Embarked', kind='count', data= trainset)","0dd3243f":"sns.catplot(x= 'Survived', col='Pclass',hue='Sex' , kind='count', data= trainset)","5cb28878":"sns.boxplot(x= 'Pclass', y= 'Age', data=trainset)","c358d863":"trainset.isna().sum()","8291b8f8":"testset.isna().sum()","24e25bb5":"# fill missing value of train set : feature \"Age\"\ntrainset['Age'].fillna(trainset['Age'].mean(), inplace=True)","db310b48":"# fill missing value of train set : feature \"Embarked\"\ntrainset['Embarked'].fillna(method='pad', inplace=True)","244017f8":"# fill missing value of test set : feature \"Age\"\ntestset['Age'].fillna(testset['Age'].mean(), inplace=True)","c64260e3":"# fill missing value of test set : feature \"Fare\"\ntestset['Fare'].fillna(testset['Fare'].mean(), inplace=True)","c5aeba37":"trainset.isna().sum()","7622b529":"testset.isna().sum()","f76c8752":"#drop useless features \ntrainset.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'], inplace=True)\ntestset.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'], inplace=True)\nresultset.drop(columns=['PassengerId'], inplace=True)","00d28d88":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ntrainset['Sex'] = le.fit_transform(trainset['Sex'])\ntrainset['Embarked'] = le.fit_transform(trainset['Embarked'])\n\ntestset['Sex'] = le.fit_transform(testset['Sex'])\ntestset['Embarked'] = le.fit_transform(testset['Embarked'])","ee4433f1":"trainset","22a58078":"testset","7a03d2c9":"X_train = trainset.drop(columns=['Survived'])\nX_test = testset\ny_train = trainset['Survived'] \ny_test = resultset","2ec9807b":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\n\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\npredict1 = dt.predict(X_test)\nprint(metrics.classification_report(y_test, predict1))","87f6ee53":"from sklearn import svm\n\nsvm = svm.SVC()\nsvm.fit(X_train, y_train)\npredict2 = svm.predict(X_test)\nprint(metrics.classification_report(y_test, predict2))","342992d0":"from sklearn.linear_model import LogisticRegression\n\n\nlg = LogisticRegression(solver='liblinear')\nlg.fit(X_train, y_train)\npredict3 = lg.predict(X_test)\nprint(metrics.classification_report(y_test, predict3))\nprint(lg.score(X_train, y_train))","11d82775":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\npredict4 = knn.predict(X_test)\nprint(metrics.classification_report(y_test, predict4))","9f9e9a1e":"from sklearn.linear_model import Perceptron\n\nprct = Perceptron()\nprct.fit(X_train, y_train)\npredict5 = prct.predict(X_test)\nprint(metrics.classification_report(y_test, predict5))","6b37ad28":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)\npredict6 = rfc.predict(X_test)\nprint(metrics.classification_report(y_test, predict6))","157f2b06":"print('Decision Tree Classifier accuracy : ', round(metrics.accuracy_score(y_test, predict1)*100, 2))\nprint('SVM accuracy : ', round(metrics.accuracy_score(y_test, predict2)*100, 2))\nprint('Logistic Regression accuracy : ', round(metrics.accuracy_score(y_test, predict3)*100, 2))\nprint('KNeighbors Classifier accuracy : ', round(metrics.accuracy_score(y_test, predict4)*100, 2))\nprint('Perceptron accuracy : ', round(metrics.accuracy_score(y_test, predict5)*100, 2))\nprint('Random Forest Classifier accuracy : ', round(metrics.accuracy_score(y_test, predict6)*100, 2))","7f8580c1":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","2f414045":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict1})\noutput.to_csv('DecisionTree_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c513f527":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict2})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","7c2f3bca":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict3})\noutput.to_csv('LogisticRegression_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","254faa99":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict4})\noutput.to_csv('KNeighbors_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","80313616":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict5})\noutput.to_csv('Perceptron_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1d71db9f":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predict6})\noutput.to_csv('RandomForestClassifier_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9d147bbe":"### Conclusion","3294619c":"**Age**, **Fare** and **Cabin** have missing value in **test set**","e0b917c2":"### **Perceptron**","ddc9f73d":"### **SVM**","8b08798d":"# **Machine Learning**","04170d21":"### **Decision Tree Classifier**","632ca25a":"### **Logistic Regression**","cc6be99e":"#### I put the best result of learning from Logistic Regression for out put of this notebook.","5bfc3f34":"# EDA","fdc09b09":"### **Random Forest Classifier**","8c15addf":"### **KNeighbors Classifier**","4c67f32e":"**Age** and **Cabin** features have missing value in **taining set**"}}