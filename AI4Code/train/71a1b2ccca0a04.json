{"cell_type":{"7bbf4984":"code","ae9f4031":"code","7f1b803b":"code","7f240ebc":"code","2286a74d":"code","3ac8cdde":"code","55b59419":"code","be6d3eb8":"code","45145244":"code","83b8927a":"code","2ebf3cb0":"code","0d11754e":"code","1da6bffc":"code","844a21cc":"code","57886971":"code","f75b8645":"code","1148a91f":"code","876eaff1":"code","11cb9149":"code","47d888f8":"code","2b577d06":"code","5771cfd5":"code","0d8a0380":"code","7e7ed249":"code","ccf97c4c":"code","54f42789":"code","970446bf":"code","6f186390":"code","a68a1ed1":"code","8e837990":"code","2243856f":"code","39185027":"code","0582e1c4":"code","8464de8a":"code","c8d1e298":"code","a92d2fe0":"code","31c3e8b9":"code","14f1b7d3":"code","88e1530e":"code","2bc142ad":"code","2528f0ad":"code","85b19ba1":"code","fee87e25":"code","494fba21":"code","fda5680a":"code","0d70e230":"code","baaecc47":"code","be2da9c0":"code","f7b2a494":"code","7167e5d7":"code","ccfe9bcf":"code","d1a9bddb":"code","1441797d":"code","f69a4b05":"code","781bf01e":"code","d44dd0ea":"code","cdeb4873":"code","9abee575":"code","7a81df75":"code","e5025336":"code","a9ff891f":"code","7f3e11b0":"code","d1be09f8":"code","c3967acf":"code","f25d2858":"code","b2210124":"code","a759b26b":"code","b9a2bd76":"code","e8afa9d3":"code","67bc29c2":"code","c519768a":"code","5f41bd2e":"code","52e9a010":"code","77f9632e":"code","cfdf4301":"code","1de34f35":"code","f4a4ddc3":"code","2c4a9d58":"code","7cba040a":"code","a6c2401e":"code","91d01fc7":"code","d948377a":"code","6445ff1c":"code","7b7a7b50":"code","1997e57e":"code","f9be9d9f":"code","4ccbb884":"code","f0655e2a":"code","3c6bf3c3":"code","6c405937":"code","606876d1":"code","1afb85d5":"code","044b8958":"code","90f3b5c3":"code","39396d53":"code","22a07b10":"code","57c697d7":"code","6b51b289":"code","70796d08":"code","4034d1e6":"code","b2e56810":"code","061a400a":"code","2d8bf28f":"code","5f95e354":"code","b8e5c0fd":"code","1ebed942":"code","edf00364":"code","4ab11430":"code","ba2c9afa":"code","e6399678":"code","27d1f629":"code","ccae14da":"code","b23c05db":"code","177abfdb":"code","14819722":"code","8fa65819":"code","a0d4aea8":"code","d1d64542":"code","058fcedc":"code","9b607f06":"code","483020fc":"code","d9d78cb5":"code","161af992":"code","c426e731":"code","bff81d8a":"code","7f283539":"code","18588110":"code","a38f7c43":"code","804aa914":"code","bee7bb9a":"code","69553e5d":"code","42ad8b2f":"code","68271100":"code","b1c6fb6e":"code","ae58af21":"code","8572494e":"code","a95a8382":"code","453c7b6b":"code","b7e4b90d":"code","9f0780ca":"markdown","5fa30cca":"markdown","70d103e9":"markdown","795de072":"markdown","225e7b6e":"markdown","25846e50":"markdown","ac5a54df":"markdown","ea6f6fb8":"markdown","787314db":"markdown","9a0189cd":"markdown","a6b60f61":"markdown","d6de4ab8":"markdown","c7ab72f6":"markdown","ea3521f4":"markdown","7168cf3f":"markdown","ba517c08":"markdown","41f7a1c0":"markdown","99962253":"markdown","1acb5ba7":"markdown","056cb8f6":"markdown","3644b21e":"markdown","43f0c2ba":"markdown","f11bfda8":"markdown","cec07a45":"markdown","25ff3c2c":"markdown","11279be5":"markdown","afa702d6":"markdown","96623b5f":"markdown","e82754af":"markdown","88398f7f":"markdown","15a51fa2":"markdown","525cbc2a":"markdown","1e48c77c":"markdown","64ad9138":"markdown","740e6c05":"markdown","2443edd6":"markdown","4a17ca2b":"markdown","c431e563":"markdown","d7537606":"markdown","c9a9c742":"markdown"},"source":{"7bbf4984":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV\nfrom sklearn.utils import shuffle,resample\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score,f1_score\n\n\nmatplotlib.style.use('ggplot')\n%matplotlib inline","ae9f4031":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7f1b803b":"df_train = pd.read_csv('\/kaggle\/input\/credit-card-buyers\/train data credit card.csv',index_col = ['ID'])\ndf_train","7f240ebc":"df_train['Is_Lead'].value_counts()","2286a74d":"df_train.describe()","3ac8cdde":"df_train.skew()","55b59419":"df_train.shape","be6d3eb8":"df_train.info()","45145244":"df_train.isnull().sum()","83b8927a":"df_train['Is_Lead'].value_counts()","2ebf3cb0":"df_train['Is_Active'].value_counts()","0d11754e":"df_train['Credit_Product'].value_counts()","1da6bffc":"df_train['Region_Code'].value_counts()","844a21cc":"df_train['Region_Code'].value_counts()","57886971":"df_train['Channel_Code'].value_counts()","f75b8645":"df_train.groupby(by = ['Gender'])['Age'].describe()","1148a91f":"df_train.groupby(by = ['Is_Lead'])['Gender'].value_counts()","876eaff1":"df_train.groupby(by = ['Is_Lead','Gender'])['Age'].describe()","11cb9149":"df_train.groupby(by = ['Is_Lead','Gender'])['Avg_Account_Balance'].describe()","47d888f8":"df_train.groupby(by = ['Is_Lead','Gender'])['Is_Active'].value_counts()","2b577d06":"df_train.groupby(by = ['Is_Lead'])['Is_Active'].value_counts()","5771cfd5":"df_train.groupby(by = ['Is_Lead','Gender'])['Age'].describe()","0d8a0380":"class visualize:\n    def __init__(self,dataframe=None,columns=None):\n        self.dataframe = dataframe\n        self.columns = columns\n    def boxplot(self):\n        for col in list(columns):\n            sns.boxplot(x=self.dataframe[col])\n            plt.title(col,fontsize = 15,color = 'red')\n            plt.show()\n    def countplot(self):\n        for col in list(columns):\n            sns.countplot(x=self.dataframe[col])\n            plt.title(col,fontsize = 15,color = 'red')\n            plt.show()\n    def histplot(self):\n        for col in list(columns):\n            self.dataframe[col].hist()\n            plt.title(col,fontsize = 15,color = 'red')\n            plt.show()\n    def cfm(self,y_true,predict_x):\n        self.y_true = y_true\n        self.predict_x = predict_x\n        cfm = confusion_matrix(y_true, predict_x)\n        group_names = ['TN', 'FP', 'FN', 'TP']\n        group_percentages = [\n            '{0:.4%}'.format(value)\n            for value in cfm.flatten() \/ np.sum(cfm)\n        ]\n        labels = [\n            f\"{v2}\\n{v3}\"\n            for v2, v3 in zip(group_names, group_percentages)\n        ]\n        labels = np.asarray(labels).reshape(2, 2)\n        sns.heatmap(cfm, annot=labels,fmt = '')\n        plt.show()","7e7ed249":"columns = ['Age','Vintage','Avg_Account_Balance']\nvisualize(df_train,columns).histplot()","ccf97c4c":"columns = ['Age','Vintage']\nvisualize(df_train,columns).boxplot()","54f42789":"columns = ['Gender','Occupation','Channel_Code','Credit_Product','Is_Active','Is_Lead']\nvisualize(df_train,columns).countplot()","970446bf":"plt.figure(figsize = (15,8))\nsns.heatmap(df_train.corr(),annot = True)","6f186390":"sns.pairplot(df_train.drop(['Is_Lead'],axis = 1),kind = 'scatter')","a68a1ed1":"msno.bar(df_train)","8e837990":"male_df = df_train[df_train['Gender']=='Male']\nfemale_df = df_train[df_train['Gender']=='Female']","2243856f":"male_df['Credit_Product'].value_counts()","39185027":"female_df['Credit_Product'].value_counts()","0582e1c4":"female_df['Age'].hist(density = 1,label = 'Female')\nmale_df['Age'].hist(density = 1,label = 'Male')\nplt.legend(loc=\"upper right\")","8464de8a":"female_df['Credit_Product'].hist(density = 1,label = 'Female')\nmale_df['Credit_Product'].hist(density = 1,label = 'Male')\nplt.legend(loc=\"upper right\")","c8d1e298":"female_df['Is_Active'].hist(density = 1,label = 'Female')\nmale_df['Is_Active'].hist(density = 1,label = 'Male')\nplt.legend(loc=\"upper right\")","a92d2fe0":"male_df['Is_Active'].hist()","31c3e8b9":"male_df.groupby(by = ['Is_Active','Credit_Product'])['Age'].hist(bins = 40)\nplt.legend(labels = ['Age','Is_Active','Credit_Product_0','Credit_Product_1'])\nplt.xlabel('Age')","14f1b7d3":"female_df.groupby(by = ['Is_Active','Credit_Product'])['Age'].hist(bins = 40)\nplt.legend(labels = ['Age','Is_Active','Credit_Product_0','Credit_Product_1'])\nplt.xlabel('Age')","88e1530e":"def replace_binary(dataframe,df_column,False_value,True_value):\n    dict = {False_value:0,True_value:1}\n    dataframe[df_column] = dataframe[df_column].map(dict)","2bc142ad":"df_train['Region_Code'] = df_train['Region_Code'].apply(lambda x: str(x)[3:5])","2528f0ad":"replace_binary(df_train,'Is_Active','No','Yes')\nreplace_binary(df_train,'Credit_Product','No','Yes')","85b19ba1":"replace_binary(df_train,'Gender','Female','Male')","fee87e25":"df_train = df_train.rename({'Gender':'Is_Male'},axis = 1)","494fba21":"df_train = pd.get_dummies(data=df_train, columns=['Occupation','Channel_Code'])\ndf_train","fda5680a":"df_train.isnull().sum()","0d70e230":"df_train['Credit_Product'].value_counts()","baaecc47":"df_train['Credit_Product'] = df_train['Credit_Product'].fillna(-9999)\ndf_train","be2da9c0":"y = df_train['Is_Lead']","f7b2a494":"X_credit = df_train[df_train['Credit_Product'] != -9999].drop(['Credit_Product','Is_Lead'],axis = 1)\ny_credit = df_train[df_train['Credit_Product'] != -9999]['Credit_Product']","7167e5d7":"X_credit_train , X_credit_val , y_credit_train, y_credit_val = train_test_split(X_credit,y_credit,test_size = 0.2,random_state = 42)","ccfe9bcf":"X_credit_train","d1a9bddb":"y_credit_train.value_counts()","1441797d":"y_credit_val.value_counts()","f69a4b05":"def get_score(y_true,predict_x):\n    accuracy = accuracy_score(y_true,predict_x)\n    f1 = f1_score(y_true,predict_x)\n    precision = precision_score(y_true,predict_x)\n    recall = recall_score(y_true,predict_x)\n    return accuracy,f1,precision,recall\n\ndef print_score(y_true,predict_x):\n    accuracy = accuracy_score(y_true,predict_x)\n    f1 = f1_score(y_true,predict_x)\n    precision = precision_score(y_true,predict_x)\n    recall = recall_score(y_true,predict_x)\n    print(f'Accuracy:{accuracy}\\nF1:{f1}\\nPrecision:{precision}\\nRecall:{recall}\\n')","781bf01e":"from sklearn.neighbors import KNeighborsClassifier","d44dd0ea":"model_knn_credit = KNeighborsClassifier()\nmodel_knn_credit.fit(X_credit_train,y_credit_train)\npredict_knn_credit = model_knn_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val,predict_knn_credit)\nprint_score(y_credit_val,predict_knn_credit)","cdeb4873":"from sklearn.naive_bayes import GaussianNB","9abee575":"model_gnb_credit = GaussianNB()\nmodel_gnb_credit.fit(X_credit_train,y_credit_train)\npredict_gnb_credit = model_gnb_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val,predict_gnb_credit)\nprint_score(y_credit_val,predict_gnb_credit)","7a81df75":"from sklearn.linear_model import LogisticRegression","e5025336":"model_lr_credit = LogisticRegression(random_state = 42)\nmodel_lr_credit.fit(X_credit_train,y_credit_train)\npredict_lr_credit = model_lr_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val, predict_lr_credit)\nprint_score(y_credit_val,predict_lr_credit)","a9ff891f":"from sklearn.tree import DecisionTreeClassifier","7f3e11b0":"model_dt_credit = DecisionTreeClassifier(random_state = 42)\nmodel_dt_credit.fit(X_credit_train,y_credit_train)\npredict_dt_credit = model_dt_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val, predict_dt_credit)\nprint_score(y_credit_val,predict_dt_credit)","d1be09f8":"from sklearn.ensemble import RandomForestClassifier","c3967acf":"model_rf_credit = RandomForestClassifier(random_state = 42)\nmodel_rf_credit.fit(X_credit_train,y_credit_train)\npredict_rf_credit = model_rf_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val, predict_rf_credit)\nprint_score(y_credit_val,predict_rf_credit)","f25d2858":"from sklearn.ensemble import AdaBoostClassifier","b2210124":"model_ada_credit = AdaBoostClassifier(random_state = 42)\nmodel_ada_credit.fit(X_credit_train,y_credit_train)\npredict_ada_credit = model_ada_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val,predict_ada_credit)\nprint_score(y_credit_val,predict_ada_credit)","a759b26b":"from sklearn.ensemble import GradientBoostingClassifier","b9a2bd76":"model_xgb_credit = GradientBoostingClassifier(random_state = 42)\nmodel_xgb_credit.fit(X_credit_train,y_credit_train)\npredict_xgb_credit = model_xgb_credit.predict(X_credit_val)\nvisualize().cfm(y_credit_val,predict_xgb_credit)\nprint_score(y_credit_val,predict_xgb_credit)","e8afa9d3":"df_credit_product = pd.DataFrame(data = [['Logistic Regression',*get_score(y_credit_val,predict_lr_credit)],\n                           ['Decision Tree',*get_score(y_credit_val,predict_dt_credit)],\n                           ['Random Forest',*get_score(y_credit_val,predict_rf_credit)],\n                           ['XGBoost',*get_score(y_credit_val,predict_xgb_credit)],\n                           ['Ada Boost',*get_score(y_credit_val,predict_ada_credit)],\n                           ['Naive Bayes',*get_score(y_credit_val,predict_gnb_credit)],\n                           ['KNN',*get_score(y_credit_val,predict_knn_credit)]],\n\n\n\ncolumns = ['Model','Accuracy','F1','Precision','Recall']\n                  \n                  \n            )\ndf_credit_product","67bc29c2":"df_credit_product.sort_values(by = ['F1'],ascending = False)","c519768a":"X_credit_test = df_train[df_train['Credit_Product'] == -9999].drop(['Credit_Product','Is_Lead'],axis = 1)\nX_credit_test","5f41bd2e":"y_credit_test = model_xgb_credit.predict(X_credit_test)","52e9a010":"X_credit_test['Credit_Product'] = y_credit_test\nX_credit_test","77f9632e":"X_credit['Credit_Product'] = y_credit","cfdf4301":"X_credit","1de34f35":"df_train = pd.concat([X_credit,X_credit_test])\ndf_train['Is_Lead'] = y","f4a4ddc3":"df_train","2c4a9d58":"df_train.isnull().sum()","7cba040a":"sns.pairplot(df_train.drop(['Is_Lead'],axis = 1))","a6c2401e":"columns = ['Age','Region_Code','Vintage','Avg_Account_Balance']\nvisualize(df_train,columns).histplot()","91d01fc7":"df_train.describe()","d948377a":"df_train.groupby(by = 'Is_Male')['Is_Lead'].value_counts()","6445ff1c":"df_train.groupby(by = ['Is_Male','Is_Lead'])['Is_Active'].value_counts()","7b7a7b50":"df_train.groupby(by = ['Is_Male','Is_Active','Credit_Product'])['Is_Lead'].value_counts()","1997e57e":"df_train.groupby(by = ['Is_Male','Is_Active','Credit_Product'])['Age'].describe()","f9be9d9f":"df_train.groupby(by = ['Is_Male','Is_Active','Credit_Product','Is_Lead'])['Age'].describe()","4ccbb884":"X = df_train.drop(['Is_Lead'],axis = 1)\ny = df_train['Is_Lead']","f0655e2a":"X_train,X_val,y_train,y_val = train_test_split(X,y,test_size = 0.2,random_state = 42)","3c6bf3c3":"X_train","6c405937":"model_knn = KNeighborsClassifier()\nmodel_knn.fit(X_train,y_train)\npredict_knn = model_knn.predict(X_val)\nvisualize().cfm(y_val, predict_knn)\nprint_score(y_val,predict_knn)","606876d1":"model_gnb = GaussianNB()\nmodel_gnb.fit(X_train,y_train)\npredict_gnb = model_gnb.predict(X_val)\nvisualize().cfm(y_val,predict_gnb)\nprint_score(y_val,predict_gnb)","1afb85d5":"model_lr = LogisticRegression(random_state = 42)\nmodel_lr.fit(X_train,y_train)\npredict_lr = model_lr.predict(X_val)\nvisualize().cfm(y_val, predict_lr)\nprint_score(y_val,predict_lr)","044b8958":"model_dt = DecisionTreeClassifier(random_state = 42)\nmodel_dt.fit(X_train,y_train)\npredict_dt = model_dt.predict(X_val)\nvisualize().cfm(y_val, predict_dt)\nprint_score(y_val,predict_dt)","90f3b5c3":"model_rf = RandomForestClassifier(random_state = 42)\nmodel_rf.fit(X_train,y_train)\npredict_rf = model_rf.predict(X_val)\nvisualize().cfm(y_val, predict_rf)\nprint_score(y_val,predict_rf)","39396d53":"model_ada = AdaBoostClassifier(random_state = 42)\nmodel_ada.fit(X_train,y_train)\npredict_ada = model_ada.predict(X_val)\nvisualize().cfm(y_val,predict_ada)\nprint_score(y_val,predict_ada)","22a07b10":"model_xgb = GradientBoostingClassifier(random_state = 42)\nmodel_xgb.fit(X_train,y_train)\npredict_xgb = model_xgb.predict(X_val)\nvisualize().cfm(y_val,predict_xgb)\nprint_score(y_val,predict_xgb)","57c697d7":"df_credit_lead_bt = pd.DataFrame(data = [['Logistic Regression',*get_score(y_val,predict_lr)],\n                           ['Decision Tree',*get_score(y_val,predict_dt)],\n                           ['Random Forest',*get_score(y_val,predict_rf)],\n                           ['XGBoost',*get_score(y_val,predict_xgb)],\n                           ['Ada Boost',*get_score(y_val,predict_ada)],\n                           ['Naive Bayes',*get_score(y_val,predict_gnb)],\n                           ['KNN',*get_score(y_val,predict_knn)]],\n\n\n\ncolumns = ['Model','Accuracy','F1','Precision','Recall']\n                  \n                  \n            )\ndf_credit_lead_bt","6b51b289":"df_credit_lead_bt.sort_values(by = ['F1','Precision','Recall'],ascending = False)","70796d08":"para_dt = {'criterion':['gini','entropy'],'max_depth':np.arange(1, 50), 'min_samples_leaf':[1,2,4,5,10,20,40,80,100]}\ngrid_dt = GridSearchCV(model_dt, para_dt, cv=5,verbose = 2)\nrs_dt = RandomizedSearchCV(model_dt,para_dt,cv=5,verbose = 2)\ngrid_dt.fit(X_train,y_train)\nrs_dt.fit(X_train,y_train)\nprint('Best grid parameters for Decision Tree:', grid_dt.best_params_)\nprint('Best randomized parameters for Decision Tree:', rs_dt.best_params_)","4034d1e6":"params_rf = {'n_estimators':[100,250, 350, 500], 'min_samples_leaf':[2, 5,10, 30,50,100]}\ngrid_rf = GridSearchCV(model_rf, params_rf, cv=5,verbose = 2)\nrs_rf = RandomizedSearchCV(model_rf, params_rf, cv=5,verbose = 2)\ngrid_rf.fit(X_train,y_train)\nrs_rf.fit(X_train,y_train)\nprint('Best grid parameters for Random Forest:', grid_rf.best_params_)\nprint('Best randomized parameters for Random Forest:', rs_rf.best_params_)","b2e56810":"params_ada = {'n_estimators': [50,100,250,400,500,600,1000], 'learning_rate': [0.01,0.02,0.05,0.2,0.5,0.8,1]}\ngrid_ada =  GridSearchCV(model_ada, params_ada, cv=5,verbose = 2)\nrs_ada =  RandomizedSearchCV(model_ada, params_ada, cv=5,verbose = 2)\ngrid_ada.fit(X_train,y_train)\nrs_ada.fit(X_train,y_train)\nprint('Best grid parameters for AdaBoost:', grid_ada.best_params_)\nprint('Best randomized parameters for AdaBoost:', rs_ada.best_params_)","061a400a":"params_xgb = {'n_estimators': [50,250,350,500,1000], 'learning_rate': [0.01,0.05,0.2,0.5,1]}\ngrid_xgb = GridSearchCV(model_xgb, params_xgb, cv=5,verbose = 2)\nrs_xgb = RandomizedSearchCV(model_xgb,params_xgb,cv = 5,verbose = 2)\ngrid_xgb.fit(X_train,y_train)\nrs_xgb.fit(X_train,y_train)\nprint('Best grid parameters for XGBoost:', grid_xgb.best_params_)\nprint('Best randomized parameters for XGBoost:', rs_xgb.best_params_)","2d8bf28f":"model_grid_dt = DecisionTreeClassifier(criterion = 'gini', max_depth = 9, min_samples_leaf =20,random_state = 42)\nmodel_grid_dt.fit(X_train,y_train)\npredict_grid_dt = model_grid_dt.predict(X_val)\nvisualize().cfm(y_val,predict_grid_dt)\nprint_score(y_val,predict_grid_dt)","5f95e354":"model_rs_dt = DecisionTreeClassifier(criterion = 'gini', max_depth = 44, min_samples_leaf = 100,random_state = 42)\nmodel_rs_dt.fit(X_train,y_train)\npredict_rs_dt = model_rs_dt.predict(X_val) \nvisualize().cfm(y_val,predict_rs_dt)\nprint_score(y_val,predict_rs_dt)","b8e5c0fd":"model_grid_rf = RandomForestClassifier(n_estimators = 500,min_samples_leaf = 30,random_state = 42)\nmodel_grid_rf.fit(X_train,y_train)\npredict_grid_rf = model_grid_rf.predict(X_val)\nvisualize().cfm(y_val,predict_grid_rf)\nprint_score(y_val,predict_grid_rf)","1ebed942":"model_rs_rf = RandomForestClassifier(n_estimators = 350,min_samples_leaf = 30,random_state =42 )\nmodel_rs_rf.fit(X_train,y_train)\npredict_rs_rf = model_rs_rf.predict(X_val)\nvisualize().cfm(y_val,predict_rs_rf)\nprint_score(y_val,predict_rs_rf)","edf00364":"model_grid_xgb = GradientBoostingClassifier(n_estimators = 1000,learning_rate =0.05 ,random_state = 42 )\nmodel_grid_xgb.fit(X_train,y_train)\npredict_grid_xgb = model_grid_xgb.predict(X_val)\nvisualize().cfm(y_val,predict_grid_xgb)\nprint_score(y_val,predict_grid_xgb)","4ab11430":"model_rs_xgb = GradientBoostingClassifier(n_estimators = 250,learning_rate =0.05,random_state = 42 )\nmodel_rs_xgb.fit(X_train,y_train)\npredict_rs_xgb = model_rs_xgb.predict(X_val)\nvisualize().cfm(y_val,predict_rs_xgb)\nprint_score(y_val,predict_rs_xgb)","ba2c9afa":"df_credit_lead_at = pd.DataFrame(data = [['Decision Tree GS',*get_score(y_val,predict_grid_dt)],\n                           ['Decision Tree RS',*get_score(y_val,predict_rs_dt)],\n                           ['Random Forest GS',*get_score(y_val,predict_grid_rf)],\n                           ['Random Forest RS',*get_score(y_val,predict_rs_rf)],\n                           ['Ada Boost GS',*get_score(y_val,predict_grid_ada)],\n                           ['Ada Boost RS',*get_score(y_val,predict_rs_ada)],\n                           ['XGBoost GS',*get_score(y_val,predict_grid_xgb)],\n                           ['XGBoost RS',*get_score(y_val,predict_rs_xgb)]],\n                          \n                       \n\n\n\ncolumns = ['Model','Accuracy','F1','Precision','Recall']\n                  \n                  \n            )\ndf_credit_lead_at","e6399678":"df_res = pd.concat([df_credit_lead_bt,df_credit_lead_at])","27d1f629":"df_res","ccae14da":"df_res.sort_values(by = ['Accuracy','F1'],ascending = False)","b23c05db":"from sklearn.ensemble import VotingClassifier","177abfdb":"model_voting = VotingClassifier(estimators=[('XGB',GradientBoostingClassifier(n_estimators = 1000,learning_rate =0.05 ,random_state = 42)),\n                                     ('RF',RandomForestClassifier(n_estimators = 350,min_samples_leaf = 30,random_state =42 ))],\n                         voting ='hard',verbose = 2)\nmodel_voting.fit(X_train,y_train)\npredict_voting = model_voting.predict(X_val)\nvisualize().cfm(y_val,predict_voting)\nprint_score(y_val,predict_voting)","14819722":"voting_res = ['Voting Classifier',*get_score(y_val,predict_voting)]\ndf_res.loc[8] = voting_res","8fa65819":"df_res","a0d4aea8":"df_res.sort_values(by = ['F1'],ascending = False)","d1d64542":"model = model_grid_xgb","058fcedc":"def data_preprocessing(dataframe):\n    replace_binary(dataframe,'Is_Active','No','Yes')\n    replace_binary(dataframe,'Credit_Product','No','Yes')\n    replace_binary(dataframe,'Gender','Female','Male')\n    dataframe = dataframe.rename({'Gender':'Is_Male'},axis = 1)\n    dataframe['Region_Code'] = dataframe['Region_Code'].apply(lambda x: str(x)[3:5])\n    dataframe = pd.get_dummies(data=dataframe, columns=['Occupation','Channel_Code'])\n    dataframe['Credit_Product'] = dataframe['Credit_Product'].fillna(-9999)\n    X_dataframe_credit = dataframe[dataframe['Credit_Product'] != -9999].drop(['Credit_Product'],axis = 1)\n    y_dataframe_credit = dataframe[dataframe['Credit_Product'] != -9999]['Credit_Product']\n    X_dataframe_credit_test = dataframe[dataframe['Credit_Product'] == -9999].drop(['Credit_Product'],axis = 1)\n    y_dataframe_credit_test = model_xgb_credit.predict(X_dataframe_credit_test)\n    X_dataframe_credit_test['Credit_Product'] = y_dataframe_credit_test\n    X_dataframe_credit['Credit_Product'] = y_dataframe_credit\n    return pd.concat([X_dataframe_credit,X_dataframe_credit_test])","9b607f06":"df_test = pd.read_csv('\/kaggle\/input\/credit-card-buyers\/test data credit card.csv',index_col = ['ID'])\ndf_test","483020fc":"df_test.info()","d9d78cb5":"msno.bar(df_test)","161af992":"df_test","c426e731":"sns.pairplot(df_test,kind = 'scatter')","bff81d8a":"df_test = data_preprocessing(df_test)","7f283539":"df_test","18588110":"df_test.isnull().sum()","a38f7c43":"sns.pairplot(df_test)","804aa914":"plt.figure(figsize = (15,8))\nsns.heatmap(df_test.corr(),annot = True)","bee7bb9a":"df_test","69553e5d":"columns = ['Is_Male','Is_Active']\nvisualize(df_test,columns).countplot()","42ad8b2f":"columns = ['Vintage','Avg_Account_Balance']\nvisualize(df_test,columns).histplot()","68271100":"df_test","b1c6fb6e":"df_test.skew()","ae58af21":"y_test = model.predict(df_test)","8572494e":"df_test['Is_Lead'] = y_test\ndf_test","a95a8382":"df_test.groupby(by = ['Is_Male'])['Is_Lead'].value_counts()","453c7b6b":"df_test.groupby(by = ['Is_Male','Is_Active','Credit_Product'])['Is_Lead'].value_counts()","b7e4b90d":"df_test.groupby(by = ['Is_Male','Is_Active','Credit_Product','Is_Lead'])['Age'].describe()","9f0780ca":"## Ada Boost","5fa30cca":"## Decision Tree","70d103e9":"# Prepairing Data","795de072":"## XGBoost ","225e7b6e":"## Naive Bayes ","25846e50":"# Predicting","ac5a54df":"# Building models to find customers that could show higher intent towards a recommended credit card and approved our hypothesis on test data","ea6f6fb8":"## Ada Boost","787314db":"# Data Visualization","9a0189cd":"Project for Tinkoff Generation ex.\u21167 by Malakhov Aleksey","a6b60f61":"# Choose XGBoost because of the highest F1 and Precision metrics","d6de4ab8":"# Hypothesis approved on train data! \n# If you are Man,older then 50 years old and you have other credit product we could recommend you credit card","c7ab72f6":"## Ada Boost","ea3521f4":"## Random Forest ","7168cf3f":"## Random Forest","ba517c08":"# After tuning","41f7a1c0":"# Summary","99962253":"## XGBoost","1acb5ba7":"## Choose XGBoost GS, Random Forest RS for ensemble model","056cb8f6":"## Decision Tree ","3644b21e":"## Logistic Regression ","43f0c2ba":"# Hypothesis approved on test data!","f11bfda8":"## Decision Tree","cec07a45":"## KNN ","25ff3c2c":"## Using XGBoost to replace missing values","11279be5":"## Random Forest","afa702d6":"## Random Forest ","96623b5f":"## Deicison Tree","e82754af":"## Building models to fill missing values","88398f7f":"# Filling the missing values","15a51fa2":"## Naive Bayes ","525cbc2a":"# Exploratory Data Analysis","1e48c77c":"## KNN ","64ad9138":"# Project for Tinkoff Generation ex.\u21167 by Malakhov Aleksey","740e6c05":"# Prepairing test data","2443edd6":"## Hyper-parametr tuning","4a17ca2b":"# Hypothesis: Men over 45 years prefer to use credit cards and similar credit products more than others\n## To prove that,we need to fill missing values in Credit_Product","c431e563":"## XGBoost","d7537606":"## Logistic Regression ","c9a9c742":"## Ada Boost"}}