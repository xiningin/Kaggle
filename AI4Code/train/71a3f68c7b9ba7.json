{"cell_type":{"a4dd26e3":"code","d5aded12":"code","e3fcbacf":"code","1cac6d2d":"code","75aa0e88":"code","7222406e":"code","29d4e187":"code","1ca92696":"code","3da40ec2":"code","3b4f497a":"code","9c86f0f8":"markdown","5057595e":"markdown","dd8e02d2":"markdown"},"source":{"a4dd26e3":"import numpy as np\nimport tensorflow as tf\nfrom PIL import Image, ImageFont, ImageDraw\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt","d5aded12":"MODEL_PATH = '..\/input\/tf2-object-detection-api-custom-data-training-ii\/exported-models\/effdet_d2\/saved_model'\n\nod_model = tf.saved_model.load(MODEL_PATH)","e3fcbacf":"TSET_PATH = '\/kaggle\/input\/arthropod-taxonomy-orders-object-detection-testset\/ArTaxOr_TestSet\/'\n#fontname = 'C:\/Windows\/fonts\/micross.ttf' # Windows\nfontname = '\/usr\/share\/fonts\/truetype\/dejavu\/DejaVuSans.ttf' # Linux\nfont = ImageFont.truetype(fontname, 20) if os.path.isfile(fontname) else ImageFont.load_default()\n\n# prepare image for predictions\ndef format_input(path):\n    image = np.asarray(Image.open(path))\n    image = tf.expand_dims(image, axis=0)\n    return image\n\n# load image\ndef load_image(path):\n    image = tf.io.read_file(path)\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.image.resize_with_pad(image, 512, 512, antialias=True).numpy().astype(int)\n    #return Image.fromarray(image)\n    return Image.fromarray(np.uint8(image)).convert('RGB')\n\n#draw boundary box\ndef bbox(img, xmin, ymin, xmax, ymax, color, width, label, score):\n    draw = ImageDraw.Draw(img)\n    xres, yres = img.size[0], img.size[1]\n    box = np.multiply([xmin, ymin, xmax, ymax], [xres, yres, xres, yres]).astype(int).tolist()\n    txt = \" {}: {}%\" if score >= 0. else \" {}\"\n    txt = txt.format(label, round(score, 1))\n    ts = draw.textsize(txt, font=font)\n    draw.rectangle(box, outline=color, width=width)\n    if len(label) > 0:\n        if box[1] >= ts[1]+3:\n            xsmin, ysmin = box[0], box[1]-ts[1]-3\n            xsmax, ysmax = box[0]+ts[0]+2, box[1]\n        else:\n            xsmin, ysmin = box[0], box[3]\n            xsmax, ysmax = box[0]+ts[0]+2, box[3]+ts[1]+1\n        draw.rectangle([xsmin, ysmin, xsmax, ysmax], fill=color)\n        draw.text((xsmin, ysmin), txt, font=font, fill='white')\n        \n#prediction\ndef plot_img_pred(img, xres, yres, axes, scores, xmin, ymin, xmax, ymax, classes, title, by=''):\n    wscale = min(1,xres\/yres)\n    hscale = min(1,yres\/xres)\n    for i in range(len(scores)):\n        #if scores[i]> 0.5 and classes[i]>0:\n        if classes[i]>0:\n            label = labels.name.iloc[int(classes[i]-1)]\n            color=labels.color.iloc[int(classes[i]-1)]\n            width, height = xmax[i]-xmin[i], ymax[i]-ymin[i]\n            xcenter, ycenter = xmin[i] + width\/2., ymin[i] + height\/2.\n            sxmin = .5+(xcenter-.5)*wscale-.5*wscale*width\n            symin = .5+(ycenter-.5)*hscale-.5*hscale*height\n            sxmax = .5+(xcenter-.5)*wscale+.5*wscale*width\n            symax = .5+(ycenter-.5)*hscale+.5*hscale*height\n            bbox(img, sxmin, symin, sxmax, symax, color, 2, label, 100*scores[i])\n    plt.setp(axes, xticks=[], yticks=[])\n    axes.set_title(title) if by == '' else axes.set_title(title+'\\n'+by)\n    plt.imshow(img)\n\n#ground truth\ndef plot_img_gt(img, axes, boxes, stretch, title, by=''):\n    wscale = 1. if stretch else min(1,boxes.xres.iloc[0]\/boxes.yres.iloc[0])\n    hscale = 1. if stretch else min(1,boxes.yres.iloc[0]\/boxes.xres.iloc[0])\n    for i in range(len(boxes)):\n        label = boxes.label.iloc[i]\n        color=labels.color.iloc[boxes.label_idx.iloc[i]]\n        xmin = .5+(boxes.xcenter.iloc[i]-.5)*wscale-.5*wscale*boxes.width.iloc[i]\n        ymin = .5+(boxes.ycenter.iloc[i]-.5)*hscale-.5*hscale*boxes.height.iloc[i]\n        xmax = .5+(boxes.xcenter.iloc[i]-.5)*wscale+.5*wscale*boxes.width.iloc[i]\n        ymax = .5+(boxes.ycenter.iloc[i]-.5)*hscale+.5*hscale*boxes.height.iloc[i]\n        bbox(img, xmin, ymin, xmax, ymax, color, 2, label, -1)\n    plt.setp(axes, xticks=[], yticks=[])\n    axes.set_title(title) if by == '' else axes.set_title(title+'\\n'+by)\n    plt.imshow(img)\n\n\ndef pred_batch(idx):\n    if idx + 2 < len(pdf):\n        rows = 3\n    else:\n        rows = len(pdf) - idx\n    fig = plt.figure(figsize=(16,rows*8))\n    for i in range(rows):\n        #with Image.open(TSET_PATH+'positives\/'+pdf.filename.iloc[i+idx]) as img:\n        #    img.thumbnail((512,512))\n        img = load_image(TSET_PATH+'positives\/'+pdf.filename.iloc[i+idx])\n        by = pdf.by.iloc[i+idx]\n        axes = fig.add_subplot(rows, 2, 1+i*2)\n        boxes = anno[anno.id == df.id.iloc[i+idx]][['label', 'label_idx', 'xres', 'yres', 'xcenter', 'ycenter', 'width', 'height']]\n        plot_img_gt(img, axes, boxes, False, 'Ground truth', by)\n        #with Image.open(TSET_PATH+'positives\/'+pdf.filename.iloc[i+idx]) as img:\n        #    img.thumbnail((512,512))\n        img = load_image(TSET_PATH+'positives\/'+pdf.filename.iloc[i+idx])\n        axes = fig.add_subplot(rows, 2, 2+i*2)\n        plot_img_pred(img, boxes.xres.iloc[0], boxes.yres.iloc[0], axes, pdf.score[i+idx], pdf.left[i+idx], pdf.top[i+idx], \n                      pdf.right[i+idx], pdf.bottom[i+idx],\n                      pdf.label_idx[i+idx], 'Detections', '')","1cac6d2d":"labels=pd.read_pickle('\/kaggle\/input\/starter-arthropod-taxonomy-orders-testset\/testset_labels.pkl')\ndf=pd.read_pickle('\/kaggle\/input\/starter-arthropod-taxonomy-orders-testset\/testset_filelist.pkl')\nanno=pd.read_pickle('\/kaggle\/input\/starter-arthropod-taxonomy-orders-testset\/testset_objects.pkl')","75aa0e88":"pdf=pd.DataFrame(columns=['score', 'label_idx', 'left', 'top', 'right', 'bottom', 'by', 'filename'])\n\nfor i in range(len(df)):\n    result = od_model(format_input('..\/input\/arthropod-taxonomy-orders-object-detection-testset\/'+df.path.iloc[i]))\n    \n    score = result['detection_scores'][0].numpy()\n    score = [x for x in score if x >= 0.30]\n    l = len(score)\n    pdf=pdf.append({'score': score,\n                    #'label_idx': f['image\/detection\/label'].int64_list.value[:l],\n                    'label_idx': result['detection_classes'][0].numpy().astype(int)[:l],\n                    'left': result['detection_boxes'][0].numpy()[:l,1],\n                    'top': result['detection_boxes'][0].numpy()[:l,0],\n                    'right': result['detection_boxes'][0].numpy()[:l,3],\n                    'bottom': result['detection_boxes'][0].numpy()[:l,2],\n                    'by': \"test\",\n                    'filename': df.path.iloc[i].split('\/')[-1]}, ignore_index=True)\n    ","7222406e":"pred_batch(0)","29d4e187":"pred_batch(3)","1ca92696":"pred_batch(6)","3da40ec2":"pred_batch(9)","3b4f497a":"pred_batch(12)","9c86f0f8":"# Load saved model","5057595e":"# Making predictions with Object Detection Model\n\n  *  The dataset was created in [this notebook](https:\/\/www.kaggle.com\/mistag\/tensorflow-tfrecords-768pix)\n  * A model was trained in [this notbook](https:\/\/www.kaggle.com\/mistag\/tf2-object-detection-api-custom-data-training)","dd8e02d2":"# Make predictions"}}