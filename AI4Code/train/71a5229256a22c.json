{"cell_type":{"fa7ce721":"code","ba49223a":"code","26ec7fe5":"code","b2711e26":"code","9f66e86c":"code","ec3ac611":"code","48dce18e":"code","94eb77c7":"code","cc63a238":"code","72c4299f":"code","9baa9d95":"code","06793a7e":"code","032fb9e7":"code","3a9f6c28":"code","7ade7060":"code","d4b7c38f":"code","2fd6727b":"code","67cef9b4":"code","f2e35675":"code","9f1b2981":"code","3e9c03fc":"code","5377dd40":"code","5cae8e0e":"code","d5d8e3b6":"code","bf5bbd66":"code","d6430834":"code","e3ce0cf3":"code","ae42696a":"code","f5f6a8d3":"code","959adcd5":"code","77a3fbd6":"code","e52fd4eb":"markdown","4aefb6cb":"markdown","51d26520":"markdown","1a19318d":"markdown","62cd3f1b":"markdown","0f84c1d4":"markdown","66cd1d97":"markdown","bf56200c":"markdown","e09d43af":"markdown","c8962e99":"markdown","5ef8a2fb":"markdown","919e7ed5":"markdown","9c4b4aac":"markdown","ee909b65":"markdown","13c8b86f":"markdown","bec2f188":"markdown","320fc625":"markdown","aba336c6":"markdown","5045010c":"markdown","a9a646af":"markdown","6e4e6ff6":"markdown","2df14d6e":"markdown","df1731d4":"markdown","4d911851":"markdown","7e1bd7e2":"markdown","90e9eb88":"markdown","055ab170":"markdown","fe0c3a5b":"markdown","b0e282c0":"markdown","12b9af72":"markdown","ef03fc83":"markdown"},"source":{"fa7ce721":"import pandas as pd\nimport pandasql as ps","ba49223a":"titanic = pd.read_csv('https:\/\/raw.githubusercontent.com\/datasciencedojo\/datasets\/master\/titanic.csv')","26ec7fe5":"titanic.head(5)","b2711e26":"ps.sqldf(\"\"\"SELECT \n    *\n    FROM titanic\n\"\"\")","9f66e86c":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic as df LIMIT 5\n\"\"\")","ec3ac611":"ps.sqldf(\"\"\"\nSELECT df.PassengerId ,df.Survived FROM titanic AS df LIMIT 5 \"\"\")","48dce18e":"ps.sqldf(\"\"\"\nSELECT df.PassengerId AS id_of_passenger,df.Survived AS is_survived FROM titanic AS df LIMIT 10\"\"\")","94eb77c7":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic AS df\nWHERE df.age=5\"\"\")","cc63a238":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic AS df\nWHERE df.age IS NULL\"\"\")","72c4299f":"ps.sqldf(\"\"\"\nSELECT df.* from titanic AS df \nWHERE df.age IS NOT NULL\"\"\")","9baa9d95":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic AS df\nWHERE df.age BETWEEN 5 AND 10\"\"\")","06793a7e":"ps.sqldf(\"\"\"\nSELECT df.* from titanic AS df\nWHERE (df.age<1 AND df.sex=\"female\") OR (df.age>60 AND df.sex=\"female\")\n\"\"\")","032fb9e7":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic AS df\nWHERE df.Embarked IN ('S','C')\"\"\")","3a9f6c28":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic AS df\nWHERE df.age IN (25,34,43)\"\"\")","7ade7060":"ps.sqldf(\"\"\"\nSELECT df.* FROM titanic AS df\nWHERE df.name LIKE \"%Mr.%\"\nLIMIT 5\n\"\"\")","d4b7c38f":"ps.sqldf(\"\"\"\nSELECT df.age,\ndf.age*df.age  AS age_squared\nFROM titanic AS df\nLIMIT 7\n\n\"\"\")","2fd6727b":"ps.sqldf(\"\"\"\nSELECT\ndf.Sex , df.Ticket ,\ndf.Sex || df.Ticket AS sex_plus_ticker\nFROM titanic AS df\nLIMIT 10\"\"\")","67cef9b4":"#Using CASE WHEN to create buckets for age\nps.sqldf(\"\"\"\n\nSELECT \n    df.Name,\n    df.PassengerID,\n    df.Age,\n    CASE WHEN df.Age IS NULL THEN '0. Missing'\n        WHEN df.Age <18 THEN '1. 1-17'\n        WHEN df.Age <60 THEN '2. 18-60'\n    ELSE '3. 60+' END AS age_bucket\nFROM titanic AS df\nLIMIT 50   \n    \n\"\"\")","f2e35675":"ps.sqldf(\"\"\"\nSELECT df.Name,\nSUBSTR(df.NAME,2,4) AS SUB_OUTPUT\nFROM titanic AS df\nLIMIT 5\n\"\"\")","9f1b2981":"ps.sqldf(\"\"\"\nSELECT df.Name,\nLOWER(df.Name) AS lower_case,\nUPPER(df.Name) AS upper_case\nFROM titanic AS df\nLIMIT 5\n\"\"\")","3e9c03fc":"#selecting all distinct value of 'EMBARKED'\nps.sqldf(\"\"\"\nSELECT\nDISTINCT df.Embarked\nFROM titanic as df\n\"\"\")","5377dd40":"#selecting all distinct cabin of 'EMBARKED'\nps.sqldf(\"\"\"\nSELECT\nDISTINCT df.Cabin\nFROM titanic as df\n\"\"\")","5cae8e0e":"ps.sqldf(\"\"\"\nSELECT \ndf.Embarked,\nAVG(df.Age) AS avg_age,\nSUM(df.Age) AS tot_age,\nMIN(df.AGE) AS min_age,\nMAX(df.AGE) AS max_age,\nCOUNT(df.PassengerId) AS tot_passengers,\nCOUNT(DISTINCT df.Ticket) AS dist_tickets\nFROM titanic AS df\nGROUP BY df.embarked\n\"\"\")","d5d8e3b6":"ps.sqldf(\"\"\"\nSELECT\ndf.Sex,\ndf.Embarked,\nAVG(df.Age) AS avg_age,\nSUM(df.Age) AS sum_age,\nMIN(df.Age) AS min_age,\nMAX(df.Age) AS max_age,\nCOUNT(df.PassengerId) AS total_passengers,\nCOUNT(DISTINCT df.Ticket) as unique_tickets\n\nFROM titanic as df\nGROUP BY df.Embarked,df.Sex\n\"\"\")","bf5bbd66":"ps.sqldf(\"\"\"\nSELECT \ndf.Embarked,\ndf.Sex,\nAVG(df.Age) as avg_tot,\nSUM(df.Age) as sum_avg,\nCOUNT(df.PassengerId) as passenger_count,\nCOUNT(df.Ticket) as ticket_count\nFROM titanic as df\n\nWHERE age>=20 AND age <=50\n\nGROUP BY df.Embarked ,df.Sex\n\"\"\")","d6430834":"ps.sqldf(\"\"\"\nSELECT df.Embarked,df.Age,\nAVG(df.Age) AS avg_age,\nMAX(df.Age) AS max_age,\nCOUNT(df.PassengerId) AS pas_count,\nCOUNT(DISTINCT df.Ticket) AS dist_ticket\n\nFROM titanic AS df\n\nWHERE age>=18\n\nGROUP BY df.Embarked,df.Sex\n\nORDER BY df.Embarked DESC,df.Sex DESC\n\"\"\")","e3ce0cf3":"#Aggregating information at \"Embarked\" and \"Sex\" levels \n#and also using \"WHERE\" to filter basis some conditions\n#and also using \"HAVING\" for fitering the output for buckets where average age is more than 30\n#and also using \"ORDER BY\" for sorting the output in descending order\nps.sqldf(\"\"\"\n\nSELECT \n    df.Embarked,\n    df.Sex,\n    AVG(df.Age) AS avg_age,\n    SUM(df.Age) AS tot_age,\n    MIN(df.Age) AS min_age,\n    MAX(df.Age) AS max_age,\n    COUNT(df.PassengerId) AS tot_passengers,\n    COUNT(DISTINCT df.Ticket) AS dist_tickets\n    \nFROM titanic AS df\n\nWHERE age >= 18\n    AND age <=60\n    \nGROUP BY df.Embarked,\n    df.Sex\n\nHAVING avg_age > 30\n\nORDER BY df.Embarked DESC,\n    df.Sex DESC\n\n\"\"\")","ae42696a":"cities = pd.DataFrame({'code':['S','C','L'],'city':['Southampton','Cherbrough','London']})\ncities","f5f6a8d3":"ps.sqldf(\"\"\"\nSELECT DISTINCT df.Embarked\nFROM titanic as df\"\"\")","959adcd5":"ps.sqldf(\"\"\"\n\nSELECT \n    c.city,\n    df.Embarked,\n    df.Sex,\n    AVG(df.Age) AS avg_age,\n    SUM(df.Age) AS tot_age,\n    MIN(df.Age) AS min_age,\n    MAX(df.Age) AS max_age,\n    COUNT(df.PassengerId) AS tot_passengers,\n    COUNT(DISTINCT df.Ticket) AS dist_tickets\n    \nFROM titanic AS df\n\nINNER JOIN cities AS c\n    ON df.Embarked = c.code\n\nGROUP BY df.Embarked,\n    df.Sex\n\n\"\"\")","77a3fbd6":"ps.sqldf(\"\"\"\n\nSELECT \n    c.city,\n    df.Embarked,\n    df.Sex,\n    AVG(df.Age) AS avg_age,\n    SUM(df.Age) AS tot_age,\n    MIN(df.Age) AS min_age,\n    MAX(df.Age) AS max_age,\n    COUNT(df.PassengerId) AS tot_passengers,\n    COUNT(DISTINCT df.Ticket) AS dist_tickets\n    \nFROM titanic AS df\n\nLEFT JOIN cities AS c\n    ON df.Embarked = c.code\n\nGROUP BY df.Embarked,\n    df.Sex\n\n\"\"\")","e52fd4eb":"SELECTING ONLY SPECIFIC COLUMNS","4aefb6cb":"# JOINS","51d26520":"We can rename long columns as shorter columns","1a19318d":"<b>Remember the order - First we used \"WHERE\", then \"GROUP BY\", then \"HAVING\" and lastly \"ORDER BY\"<\/b>","62cd3f1b":"JOINS are one of the most important and most frequently asked concept in SQL ,\nso let us see JOINS","0f84c1d4":"# AGGREGATE","66cd1d97":"\nINNER JOIN gives rows corresponding to only the common values(in the columns used in the inner join condition) between the two tables","bf56200c":"Let's see different unique codes in original dataset","e09d43af":"You can create new columns out of existing columns. Here are some examples-","c8962e99":"For text\/string columns, a powerful way of filtering is using \"LIKE\" keyword. It works by the specifying the substring you want in a string and surrounding the substring with '%'s. Here is how it looks with examples below -\n<ul>\n    <li>For Names starting with \"ABC\" - Name LIKE \"ABC%\"<\/li>\n    <li>For Names ending with \"ABC\" - Name LIKE \"%ABC\"<\/li>\n    <li>For Names which contain \"ABC\" - Name LIKE \"%ABC%\"<\/li>\n<\/ul>","5ef8a2fb":"YOU CAN GET NON NULL ROWS BY USING \"IS NOT NULL\"","919e7ed5":"Using \"AND\" and \"OR\" together might be tricky at times. It is best to use parantheses to enforce which conditions will be evaluated together. E.g. in the above example we have four conditions in total. First the two conditions inside the parantheses will be evaluated separately using \"AND\". And then the output of those two will be evaluated using \"OR\" statement","9c4b4aac":"If there are multiple values you want to filter in a column, you can use \"IN\" keyword","ee909b65":"NULL\n\n To find mising values in the data, we can use \"NULL\" keyword. Just be mindful that NULL works with \"IS\" and not with \"=\". For example, \"Age IS NULL\" is the correct way of finding nulls in Age column and \"Age = NULL\" is not (and will throw error)","13c8b86f":"INNER JOIN","bec2f188":"HAVING\n\nLastly, once you have aggregated the information, you can further put filters on the aggregated output using \"HAVING\". Always remember the difference between \"WHERE\" and \"HAVING\" as it is one of the most commonly asked interview questions. \"WHERE\" is used to filter the data directly from the tables while \"HAVING\" is used to filter the aggregated data you get as the output of a SQL","320fc625":"Aggregating information at \"Embarked\" and \"Sex\" levels \n#and also using \"WHERE\" to filter basis some conditions","aba336c6":"CREATING A NEW TABLE","5045010c":"<b>LOWER() and UPPER()<\/b> can be used to convert text columns to lower and upper case, respectively. Here is an example -","a9a646af":"As you can see the \"LIKE\" condition is not case sensitive i.e. both 'mr.' and 'MR.' will be found with the same search string","6e4e6ff6":"If we want to see only top 5 points from our dataset and instead of using complete name we can import from a shorter name","2df14d6e":"You can specify multiple conditions using \"AND\" or \"OR\" operators. Here are some examples","df1731d4":"So we can see only S and C are common in both tables","4d911851":"CASE WHEN\n\nYou can use CASE WHEN to create new columns based on the specified conditions. Here is an example of the same -","7e1bd7e2":"SUBSTR : function can be used to take out one part from a string upto a certain point in a string column , SUBSTR() function requires three paras (column_name,starting point,number of characters)","90e9eb88":"WHERE\n\nIf you want only specific rows based on a condition, you can mention these conditions in \"WHERE\" clause.\n\"WHERE\" works row by row e.g. if the condition is Age = 10, in each row the query will check if Age is equal to 10 and if yes, then it will take that row, otherwise not.","055ab170":"You can get all the unique values in a column using \"DISTINCT\" keyword","fe0c3a5b":"AGGREGATING INFORMATION AT TWO LEVELS","b0e282c0":"Use \"BETWEEN\" to filter between two numerical values","12b9af72":"CONCATENATING TWO STRINGS AS ONE","ef03fc83":"AGGREGATING AT TWO LEVELS (COLUMNS)"}}