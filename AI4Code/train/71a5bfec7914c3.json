{"cell_type":{"adab146e":"code","e64e32fb":"code","09e8dbf9":"code","aeccf1db":"code","5a5b5837":"code","813f8c96":"code","a8c4120e":"code","b0b62e8f":"code","4341eb29":"code","cb5efb0f":"code","79a52d47":"code","fd286851":"code","c9d27e35":"code","65c994f3":"code","28962b5d":"code","95da3948":"code","b135af77":"code","b46a85ee":"code","16568179":"code","e85c5758":"code","1cb62ba6":"code","d6b0218a":"code","66b47f99":"code","4bc7719b":"code","93836e28":"code","8fdffee3":"code","cf6759e3":"code","cdba4b20":"code","8510c22e":"markdown"},"source":{"adab146e":"# from google.colab import drive\n# drive.mount('\/content\/drive')","e64e32fb":"import os\nimport numpy as np\nimport pandas as pd\n# train = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\ntrain = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\n\ntrain.head()","09e8dbf9":"from sklearn.preprocessing import MultiLabelBinarizer\nmb = MultiLabelBinarizer().fit(train.labels.apply(lambda x : x.split()))\nlabels = pd.DataFrame(mb.transform(train.labels.apply(lambda x : x.split())), columns = mb.classes_)\nnew_train = pd.concat([train['image'], labels], axis=1)\nnew_train.head()","aeccf1db":"from keras.preprocessing.image import ImageDataGenerator\npre = ImageDataGenerator(\n    rescale = 1\/255.,\n    rotation_range = 15,\n    width_shift_range=0.2, \n    height_shift_range=0.2,\n    zoom_range = 0.2,\n    shear_range=0.3,\n    featurewise_center=False,\n    featurewise_std_normalization=False,\n    horizontal_flip=True,\n    vertical_flip=True,\n    validation_split= 0.2,)\npos = ImageDataGenerator(rescale = 1.\/255)","5a5b5837":"# ! mkdir -p plant-pathology-2021-fgvc8  #\u5728\u672c\u5730\u65b0\u5efa\u4e00\u8cc7\u6599\u593e\n# ! unzip -q \/content\/drive\/MyDrive\/plant-pathology-2021-fgvc8-all_resize\/fgvc8_resize_images_384-384\/resize_train_image.zip -d plant-pathology-2021-fgvc8   #\u89e3\u58d3\u7e2e\n# ! unzip -q \/content\/drive\/MyDrive\/plant-pathology-2021-fgvc8-all_resize\/fgvc8_resize_images_384-384\/resize_test_image.zip -d plant-pathology-2021-fgvc8","813f8c96":"seed = 88\ntarget_size = (384, 384)\nbatch_size = 16\nresize_img = '..\/input\/resized-plant2021\/img_sz_384'\ntest_img = '..\/input\/plant-pathology-2021-fgvc8\/test_images'\nsubmission = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\nsubmission.head()","a8c4120e":"\ntest_generator = pre.flow_from_dataframe(\n                  submission,\n                  directory = test_img,\n                  x_col = 'image',\n                  y_col = 'labels',\n                  class_mode = None,\n                  batch_size=4,\n                  target_size = target_size,\n                  color_mode=\"rgb\",\n                  shuffle = False,\n                  seed = seed,)","b0b62e8f":"# import matplotlib.pyplot as plt\n# example = next(train_generator)\n# print(example[0].shape)\n# plt.imshow(example[0][0,:,:,:])\n# plt.show()","4341eb29":"# import matplotlib.pyplot as plt\n# example = next(test_generator)\n# print(example[0].shape)\n# plt.imshow(example[0])\n# plt.show()","cb5efb0f":"# import tensorflow as tf\n# from tensorflow import keras\n# from tensorflow.keras.applications import EfficientNetB4\n# from tensorflow.keras import layers, optimizers\n# from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D, BatchNormalization\n# from keras import Model\n# base_model = EfficientNetB4(include_top=False, \n#                 weights='imagenet',\n#                 pooling='avg', \n#                 input_shape=(384,384,3))","79a52d47":"# model_pre = tf.keras.Sequential([\n#         base_model,\n#         layers.BatchNormalization(),\n#         layers.Dense(32,activation='relu'),\n#         layers.Dropout(0.4),\n#         layers.Dense(16,activation='relu'),\n#         layers.Dropout(0.4),\n#         layers.Dense(6,activation='sigmoid')\n# ])","fd286851":"# import matplotlib.pyplot as plt\n\n# pre_history = model_pre.history\n\n# plt.figure()\n# plt.plot(pre_history['binary_accuracy'])\n# plt.plot(pre_history['val_binary_accuracy'])\n# plt.title('model binary_accuracy')\n# plt.ylabel('accuracy')\n# plt.xlabel('epoch')\n# plt.legend(['train', 'validation'])\n# plt.savefig('accuracy')\n# plt.show()","c9d27e35":"# from keras.callbacks import ModelCheckpoint, EarlyStopping\n# model_pre.compile(\n#     optimizer=tf.keras.optimizers.Adam(learning_rate=0.001, decay=0.001\/20),\n#     loss='binary_crossentropy',\n#     metrics=[tf.keras.metrics.BinaryAccuracy(name='binary_accuracy'),tf.keras.metrics.AUC(name='auc')])\n# model_checkpoint = ModelCheckpoint(\n#             filepath=\".\/B4.h5\", \n#             mode='max',\n#             monitor='val_auc', \n#             save_best_only=True, \n#             verbose=1)\n# early_stopping = EarlyStopping(\n#             monitor='val_loss', \n#             min_delta=0,\n#             patience=5, \n#             verbose=1, \n#             restore_best_weights=True)\n# model_pre = model_pre.fit(train_generator,\n#             validation_data=valid_generator,\n#             epochs=5,\n#             callbacks=[model_checkpoint, early_stopping])\n\n# # WARNING:tensorflow:Early stopping conditioned on metric `val_acc` which is not available. \n# # Available metrics are: loss,binary_accuracy,auc,val_loss,val_binary_accuracy,val_auc","65c994f3":"# pre_history = model_pre.history\n\n# plt.figure()\n# plt.plot(pre_history['auc'])\n# plt.plot(pre_history['val_auc'])\n# plt.title('model auc')\n# plt.ylabel('auc')\n# plt.xlabel('epoch')\n# plt.legend(['train', 'validation'])\n# plt.savefig('auc')\n# plt.show()","28962b5d":"# plt.figure()\n# plt.plot(pre_history['loss'])\n# plt.plot(pre_history['val_loss'])\n# plt.title('model loss')\n# plt.ylabel('loss')\n# plt.xlabel('epoch')\n# plt.legend(['train', 'validation'])\n# plt.savefig('loss')\n# plt.show()","95da3948":"# base_model.trainable = True\n\n# model.compile(\n#     optimizer=keras.optimizers.Adam(1e-5, decay=1e-5\/10),\n#     loss=keras.losses.BinaryCrossentropy(from_logits=True),\n#     metrics=[tf.keras.metrics.BinaryAccuracy(name='binary_accuracy'),tf.keras.metrics.AUC(name='auc')])\n# model = model.fit(\n#     train_generator,\n#     validation_data=valid_generator,\n#     epochs=5,\n#     callbacks=[model_checkpoint, early_stopping])","b135af77":"# model_history = model.history\n\n# plt.figure()\n# plt.plot(model_history['binary_accuracy'])\n# plt.plot(model_history['val_binary_accuracy'])\n# plt.title('model binary_accuracy')\n# plt.ylabel('accuracy')\n# plt.xlabel('epoch')\n# plt.legend(['train', 'validation'])\n# plt.savefig('accuracy')\n# plt.show()","b46a85ee":"import keras\ndef load_model():\n    model_pre = keras.models.load_model(\"..\/input\/prexception\/5.h5\")\n    return model_pre\n","16568179":"model = load_model()\npred = model.predict(test_generator)","e85c5758":"model = load_model()\ntta_steps = 5\npredictions = []\n\nfor i in range(tta_steps):\n    preds = model.predict(test_generator)\n    predictions.append(preds)\n\npred = np.mean(predictions, axis=0)","1cb62ba6":"print(pred)","d6b0218a":"perdict = (pred>0.335)\nn_label = new_train.columns.tolist()[1:]\nanswer = []\n\nfor i in range(perdict.shape[0]):\n    temp = []\n    for j, k in enumerate(n_label):\n        if perdict[i, j]:\n            temp.append(k)\n    answer.append(temp)\n    \nanswer = [' '.join(n) for n in answer]","66b47f99":"n_label","4bc7719b":"submission['labels'] = np.array(answer)\nsubmission","93836e28":"submission.to_csv('submission.csv', index=False)","8fdffee3":"# !cp \/content\/B4.h5 \/content\/B4_0.h5","cf6759e3":"# !mv \/content\/B4_0.h5 \/content\/drive\/MyDrive\/apple","cdba4b20":"np.around(pred, decimals=2, out=None)","8510c22e":"### TTA"}}