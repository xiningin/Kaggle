{"cell_type":{"833ad357":"code","ebc2521a":"code","8c5525c1":"code","ce3dce9b":"code","44f1e1ee":"code","6f3ff66a":"code","75409a60":"code","da3d58c9":"code","aa1e0f1d":"code","8b7270bf":"code","18dcc2f9":"code","dcbe9ca2":"code","ce026aaa":"code","4daec079":"code","6738df03":"code","14893b61":"code","4c056629":"code","71f6cc9b":"code","d7b28b9a":"code","5aa23f7d":"code","d7ae7fba":"code","f5f4f74a":"markdown","83c053b3":"markdown","488d352c":"markdown","b9202d04":"markdown","d45a2cba":"markdown","9c0dd9db":"markdown","dbb77fd2":"markdown"},"source":{"833ad357":"import numpy as np\nimport pandas as pd\nurl = \"..\/input\/aqi-dataset\/AQI20110114.csv\"\ndf = pd.read_csv(url)\ndf","ebc2521a":"df.info()\ndf.shape","8c5525c1":"# \u53d6\u5f97\u6240\u6709\u6b04\u4f4d\ndf.columns","ce3dce9b":"# \u5217\u51fa\u6240\u6709\u6b04\u4f4d\nfor columname in df.columns:\n    print(columname)","44f1e1ee":"# \u5217\u51fa\u6240\u6709 object \u7684\u6b04\u4f4d\nfor columname in df.columns:\n    if (df[columname].dtypes == 'object'):\n        print(columname)","6f3ff66a":"df['CO'] = pd.to_numeric(df['CO'], errors='coerce') # If \u2018coerce\u2019, then invalid parsing will be set as NaN.\ndf['CO_8hr'] = pd.to_numeric(df['O3_8hr'], errors='coerce')\ndf['O3'] = pd.to_numeric(df['O3'], errors='coerce')\ndf['O3_8hr'] = pd.to_numeric(df['O3_8hr'], errors='coerce')\ndf['PM10'] = pd.to_numeric(df['PM10'], errors='coerce')\ndf['PM10_AVG'] = pd.to_numeric(df['PM10_AVG'], errors='coerce')\ndf['WindSpeed'] = pd.to_numeric(df['WindSpeed'], errors='coerce')\ndf['WindDirec'] = pd.to_numeric(df['WindDirec'], errors='coerce')\ndf['PublishTime'] = pd.to_datetime(df['PublishTime'])","75409a60":"# Pandas\u5c0b\u627e\u7a7a\u503c\u7684\u4f4d\u7f6e\uff0c\u4e26\u5217\u51fa\u7a7a\u503c\u4f4d\u7f6e\nfor columname in df.columns:\n      if df[columname].count() != len(df):\n        loc = df[columname][df[columname].isnull().values==True].index.to_list()\n        print(f'\u884c\u540d\uff1a\"{columname}\", \u7b2c{loc}\u5217\u4f4d\u7f6e\u6709\u7f3a\u5931\u503c')\n        print(\"\\n\")","da3d58c9":"# \u6aa2\u67e5\u7a7a\u503c -- Series\ndf[\"SO2\"].isnull()","aa1e0f1d":"# \u53d6\u51fa\u503c\ndf[\"SO2\"].isnull().values","8b7270bf":"# \u53d6\u51fa SO2 \u4e2d\u6709\u7a7a\u503c\u7684\u5217 \ndf[\"SO2\"][df[\"SO2\"].isnull().values==True]","18dcc2f9":"# \u53d6\u51fa\u7a7a\u503c\u5217\u7684 index\ndf[\"SO2\"][df[\"SO2\"].isnull().values==True].index","dcbe9ca2":"# \u7a7a\u503c\u5217\u7684 index \u8f49\u63db\u6210 list\ndf[\"SO2\"][df[\"SO2\"].isnull().values==True].index.to_list()","ce026aaa":"# dataframe \u7684 \u5217\u6578\nlen(df)","4daec079":"# Pandas\u5c0b\u627e\u7a7a\u503c\u7684\u4f4d\u7f6e\uff0c\u4e26\u5217\u51fa\u7a7a\u503c\u4f4d\u7f6e\nfor columname in df.columns:\n      if df[columname].count() != len(df):\n        loc = df[columname][df[columname].isnull().values==True].index.to_list()\n        print(f'\u884c\u540d\uff1a\"{columname}\", \u7b2c{loc}\u5217\u4f4d\u7f6e\u6709\u7f3a\u5931\u503c')\n        print(\"\\n\")","6738df03":"df1 = df.drop(columns='Pollutant')\ndf1","14893b61":"dfg = df.groupby('County')","4c056629":"dfg.get_group('\u81fa\u5317\u5e02')","71f6cc9b":"for i in df['County'].unique():\n  print(i)\n  display(dfg.get_group(i))\n  print(\"-------------------------\")","d7b28b9a":"dfm = dfg.transform(\"mean\")\ndisplay(dfm.info())\n\ndf2 = df1.fillna(dfm)\nprint(\"fill mean to nan\")\ndisplay(df2.info())","5aa23f7d":"df2[df2['AQI']<20][['SiteName', 'AQI']]","d7ae7fba":"df2[(20<=df2['AQI'])&(df2['AQI']<=30)][['SiteName', 'AQI']]","f5f4f74a":"## \u5efa\u7acb\u8cc7\u6599\u8868 \uff08DataFrame\uff09\ndf\u70baDataFrame\u7c21\u5beb\uff0c\u540d\u7a31\u53ef\u81ea\u884c\u5b9a\u7fa9\n\n\u900f\u904e pd \u7684read_csv()\u51fd\u5f0f\uff0c\u6307\u5b9a OpenData\u5e73\u81fa\u63d0\u4f9b\u4e4bURL\/API\u5b58\u53d6\u8cc7\u6599\u8def\u5f91\u4f86\u53d6\u5f97[PM2.5](https:\/\/opendata.epa.gov.tw\/Data\/Contents\/AQI)\u8cc7\u6599\n\n\u7a7a\u6c23\u54c1\u8cea\u6307\u6a19(AQI)\u7684\u7a7a\u6c23\u54c1\u8cea\u76e3\u6e2c\u5c0f\u6642\u503c(\u4e00\u822c\u6c61\u67d3\u7269,\u6bcf\u65e5\u66f4\u65b0)\u70ba\u4e00\u500b 85 \u5217\uff08rows\uff09 \u00d7 24 \u6b04\uff08columns\uff09\u7684\u8cc7\u6599\u8868\n\n\u8f38\u51fadf\u53ef\u770b\u51fa\u8b80\u53d6\u7684\u8cc7\u6599\u6a23\u8c8c\u3002","83c053b3":"# Data Type \u8f49\u63db","488d352c":"## \u5217\u51fa\u6240\u6709object\u7684\u6b04\u4f4d","b9202d04":"## Pandas Data Types\n\nPandas dtype\t| Python type\t| Usage \n-----------------|----------------|-------------------|\nobject | str or mixed\t| Text or mixed numeric and non-numeric values |\nint64\t|int\t|Integer numbers\nfloat64|\tfloat|\tFloating point numbers\nbool|\tbool|\tTrue\/False values","d45a2cba":"## \u8cc7\u6599\u7f3a\u592a\u591a\uff0c\u76f4\u63a5\u522a\u9664","9c0dd9db":"## \u8cc7\u6599\u7f3a\u4e0d\u591a\uff0c\u5229\u7528\u7fa4\u7d44\u5e73\u5747\u503c\u53d6\u4ee3","dbb77fd2":"## \u8655\u7406\u7f3a\u5931\u7684\u8cc7\u6599(\u7a7a\u503c -- NaN)"}}