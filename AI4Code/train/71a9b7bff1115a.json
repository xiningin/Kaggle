{"cell_type":{"f6fc7e31":"code","aa21059a":"code","f7c2815f":"code","67ea4b63":"code","5b3afee1":"code","3d57b76e":"code","95f8d58d":"code","6c4a105d":"code","78e02156":"code","c9b94e40":"code","b4271f8e":"code","03c2460a":"code","efecd154":"code","f671731d":"code","0d765c7f":"code","5b4e5ba8":"code","009878b4":"code","0ae26c93":"code","a1c88f36":"code","fbcbad03":"code","b90a39c8":"code","d72bd1dd":"code","6414a8f4":"code","97643f9c":"code","6ea10bba":"code","6f21113e":"code","574e6d50":"code","b1237b49":"code","4a2d4ac9":"code","bf6f26aa":"code","9cc56d7b":"code","c858aed1":"code","88c68077":"code","1a1e807f":"code","990d8a47":"code","08d5d184":"code","094a08e1":"code","bacb4508":"code","2e66f514":"code","e9d98c40":"code","8e293e22":"code","affbb7d8":"code","542610cd":"code","3f351e02":"code","4b87fa28":"code","e76ee402":"code","cd24ff93":"code","c3958396":"code","b6c6b0cc":"code","d5fdb439":"code","81990a58":"code","dab52a4e":"code","843e9ff0":"code","ec8c6c37":"code","cf029ca0":"code","f25576f0":"code","9d12c178":"code","da2a83e9":"code","1f68a7a2":"code","9357677a":"code","a05af3dc":"code","efe1458a":"code","b7de6d31":"code","152b9db0":"code","d3cacb4c":"markdown","f89f078e":"markdown","99eff428":"markdown","6021fc5e":"markdown","ee62641f":"markdown","f9ba8081":"markdown","7308a4b0":"markdown","aa854391":"markdown","dd1db074":"markdown","e3a451ee":"markdown","24c79247":"markdown","b8a54a08":"markdown","1e2c4a9a":"markdown","6ecda560":"markdown","7d33e6c8":"markdown","0293ed46":"markdown"},"source":{"f6fc7e31":"from pandas import Series \nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import confusion_matrix, auc, roc_auc_score, roc_curve\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\") \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","aa21059a":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","f7c2815f":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 confusion_matrix\ndef show_confusion_matrix(y_true, y_pred):\n    color_text = plt.get_cmap('PuBu')(0.95)\n    class_names = ['Default', 'Non-Default']\n    cm = confusion_matrix(y_true, y_pred)\n    cm[0,0], cm[1,1] = cm[1,1], cm[0,0]\n    df = pd.DataFrame(cm, index=class_names, columns=class_names)\n    \n    fig, ax = plt.subplots(figsize=(6, 6))\n    ax.set(xticks=np.arange(cm.shape[1]), yticks=np.arange(cm.shape[0]), title=\"Confusion Matrix\")\n    ax.title.set_fontsize(15)\n    sns.heatmap(df, square=True, annot=True, fmt=\"d\", linewidths=1, cmap=\"PuBu\")\n    plt.setp(ax.get_yticklabels(), rotation=0, ha=\"right\", rotation_mode=\"anchor\", fontsize=12)\n    plt.setp(ax.get_xticklabels(), rotation=0, ha=\"center\", rotation_mode=\"anchor\", fontsize=12)\n    ax.set_ylabel('Predicted Values', fontsize=14, color = color_text)\n    ax.set_xlabel('Real Values', fontsize=14, color = color_text)\n    b, t = plt.ylim()\n    plt.ylim(b+0.5, t-0.5)\n    fig.tight_layout()\n    plt.show()","67ea4b63":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\ndef all_metrics(y_true, y_pred, y_pred_prob):\n    dict_metric = {}\n    P = np.sum(y_true==1)\n    N = np.sum(y_true==0)\n    TP = np.sum((y_true==1)&(y_pred==1))\n    TN = np.sum((y_true==0)&(y_pred==0))\n    FP = np.sum((y_true==0)&(y_pred==1))\n    FN = np.sum((y_true==1)&(y_pred==0))\n    \n    dict_metric['Positive, P'] = [P,'default']\n    dict_metric['Negative, N'] = [N,'non-default']\n    dict_metric['True Positive, TP'] = [TP,'correctly identified default']\n    dict_metric['True Negative, TN'] = [TN,'correctly identified non-default']\n    dict_metric['False Positive, FP'] = [FP,'incorrectly identified default']\n    dict_metric['False Negative, FN'] = [FN,'incorrectly identified non-default']\n    dict_metric['Accuracy'] = [accuracy_score(y_true, y_pred),'Accuracy=(TP+TN)\/(P+N)']\n    dict_metric['Precision'] = [precision_score(y_true, y_pred),'Precision = TP\/(TP+FP)'] \n    dict_metric['Recall'] = [recall_score(y_true, y_pred),'Recall = TP\/P']\n    dict_metric['F1-score'] = [f1_score(y_true, y_pred),'Harmonical mean of Precision \u0438 Recall']\n    dict_metric['ROC_AUC'] = [roc_auc_score(y_true, y_pred_prob),'ROC AUC Score']    \n\n    temp_df = pd.DataFrame.from_dict(dict_metric, orient='index', columns=['Value', 'Description'])\n    display(temp_df) ","5b3afee1":"train = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ntest= pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/sample_submission.csv')","3d57b76e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 5 \u0441\u0442\u0440\u043e\u043a \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u044b\ntrain.sample(5)","95f8d58d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 5 \u0441\u0442\u0440\u043e\u043a \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b\ntest.sample(5)","6c4a105d":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 10 \u0441\u0442\u0440\u043e\u043a sample_submission\nsample_submission.head(10)","78e02156":"# \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\ntrain.info()","c9b94e40":"# \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\ntest.info()","b4271f8e":"# \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\ntrain.describe()","03c2460a":"# \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\ntest.describe()","efecd154":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ntrain.default.value_counts()","f671731d":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\ntrain.isna().sum()","0d765c7f":"# \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\nfig, ax = plt.subplots(figsize=(12, 8))\nsns_heatmap = sns.heatmap(train.isna(),cbar=False, cmap ='PuBu_r')","5b4e5ba8":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\ntest.isna().sum()","009878b4":"# \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\nfig, ax = plt.subplots(figsize=(12, 8))\nsns_heatmap = sns.heatmap(test.isna(),cbar=False, cmap ='PuBu_r')","0ae26c93":"# \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 education, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\ntrain.education.value_counts().plot.barh()","a1c88f36":"# \u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 education, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\ntest.education.value_counts().plot.barh()","fbcbad03":"# \u0418\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ntrain['education'].fillna('empty', inplace=True)\ntest['education'].fillna('empty', inplace=True)","b90a39c8":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u044b\ntrain.columns","d72bd1dd":"# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \nnum_cols = ['age', 'decline_app_cnt', 'bki_request_cnt', 'income', 'score_bki', 'region_rating']\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\ncat_cols = ['education', 'work_address', 'home_address', 'sna', 'first_time']\n\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435\nbin_cols = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport']","6414a8f4":"# \u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor i in num_cols:\n    plt.figure()\n    sns.distplot(train[i][train[i] > 0].dropna(), kde = False, rug=False)\n    plt.title(i)\n    plt.show()","97643f9c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nsns.heatmap(train[num_cols].corr().abs(), vmin=0, vmax=1, annot = True)","6ea10bba":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nimp_num = pd.Series(f_classif(train[num_cols], train['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","6f21113e":"# \u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    train[column] = label_encoder.fit_transform(train[column])\n    \nfor column in bin_cols:\n    test[column] = label_encoder.fit_transform(test[column])\n    ","574e6d50":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0431\u0430\u0437\u0430 \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\ntrain.sample(5)","b1237b49":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 education \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\neducation_dict = {'ACD': 4, 'PGR': 3, 'UGR': 2, 'GRD': 13, 'SCH': 0, 'empty': 0}\ntrain.education = train['education'].map(education_dict)\n\ntrain.education.value_counts()","4a2d4ac9":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 education \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\ntest.education = test['education'].map(education_dict)\n\ntest.education.value_counts()","bf6f26aa":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u044b \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 app_date \u043a \u0442\u0438\u043f\u0443 datetime \ntrain.app_date = pd.to_datetime(train.app_date)\ntest.app_date = pd.to_datetime(test.app_date)","9cc56d7b":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u043e\u0434\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 app_date \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u044b\ntrain.app_date.apply(lambda x: x.year).value_counts()","c858aed1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u043e\u0434\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 app_date \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b\ntest.app_date.apply(lambda x: x.year).value_counts()","88c68077":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 app_date \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u044b\ntrain.app_date.apply(lambda x: x.month).value_counts()","1a1e807f":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 app_date \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b\ntest.app_date.apply(lambda x: x.month).value_counts()","990d8a47":"# \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\ntrain['month'] = train.app_date.apply(lambda x: x.month)\ntest['month'] = train.app_date.apply(lambda x: x.month)\n\ncat_cols.append('month')","08d5d184":"# \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u0430\u0447\u0438 \u0432 \u0431\u0430\u0437\u0435\ntrain['days'] = (train.app_date - train.app_date.min()).dt.days\ntest['days'] = (test.app_date - test.app_date.min()).dt.days\n\nnum_cols.append('days')","094a08e1":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0438\u0444\u043d\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0431\u0430\u0437\u0430\u043c \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439  \ntrain.info()\ntest.info()","bacb4508":"# \u0415\u0449\u0435 \u043f\u0440\u043e\u0431\u0443\u044e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u0443\u0434\u0443\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438\ntrain['bki_age_reg'] = (train['score_bki']\/train['age'])*train['region_rating']\ntest['bki_age_reg'] = (test['score_bki']\/test['age'])*test['region_rating']\n\ntrain['mult_sna_ftime'] = train['sna'] * train['first_time']\ntest['mult_sna_ftime'] = test['sna'] * test['first_time']\n\ntrain['edu_and_income'] = (train['education'] + 1) * train['income']\ntest['edu_and_income'] = (test['education'] + 1) * test['income']\n\ntrain['success_client'] = (train['foreign_passport'] + 1) * (train['good_work'] + 1) * (train['car'] + 1)\ntest['success_client'] = (test['foreign_passport'] + 1) * (test['good_work'] + 1) * (test['car'] + 1)\n\ntrain['very_success_client'] = train['foreign_passport'] * train['good_work'] * train['car']\ntest['very_success_client'] = test['foreign_passport'] * test['good_work'] * test['car']\n\ntrain['fpassp_and_gwork'] = train['foreign_passport'] * train['good_work'] \ntest['fpassp_and_gwork'] = test['foreign_passport'] * test['good_work']\n\ntrain['fpassp_and_car'] = train['foreign_passport'] * train['car']\ntest['fpassp_and_car'] = test['foreign_passport'] * test['car']\n\ntrain['gwork_and_car'] = train['good_work'] * train['car']\ntest['gwork_and_car'] = test['good_work'] * test['car']","2e66f514":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0438\nnum_cols.append('bki_age_reg')\nnum_cols.append('mult_sna_ftime')\nnum_cols.append('edu_and_income')\ncat_cols.append('success_client')\nbin_cols.append('very_success_client')\nbin_cols.append('fpassp_and_gwork')\nbin_cols.append('fpassp_and_car')\nbin_cols.append('gwork_and_car')","e9d98c40":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 decline_app_cnt \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\ntrain.decline_app_cnt.value_counts()","8e293e22":"# \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 decline_app_cnt, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0435\u0434\u043a\u043e, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ntrain['decline_app_cnt'] = train['decline_app_cnt'].apply(lambda x: x if x < 4 else 4)\ntest['decline_app_cnt'] = test['decline_app_cnt'].apply(lambda x: x if x < 4 else 4)","affbb7d8":"# \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 decline_app_cnt\nnum_cols.remove('decline_app_cnt')\ncat_cols.append('decline_app_cnt')","542610cd":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043c\u0435\u0449\u0435\u043d\u043e \n\nnum_cols_log = ['age', 'bki_request_cnt', 'income']\n\nfor i in num_cols_log:\n    train[i] = np.log(train[i] + 1)\n    \n    \nfor i in num_cols_log:\n    test[i] = np.log(test[i] + 1)","3f351e02":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor column in bin_cols:\n    plt.figure()\n    sns.countplot(train[column])\n    plt.title(column)\n    plt.show()","4b87fa28":"# boxplots \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor column in num_cols:\n    plt.figure()\n    sns.boxplot(x=train['default'], y=train[column])\n    plt.title(column)\n    plt.show()","e76ee402":"# \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nimp_cat = Series(mutual_info_classif(train[bin_cols + cat_cols], train['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","cd24ff93":"# \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\nimp_num = Series(f_classif(train[num_cols], train['default'])[0],\n                 index=num_cols)\nimp_num.sort_values(inplace=True)\nimp_num.plot(kind='barh')\nplt.xlabel('F-value')","c3958396":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u044b\ncorr_train = train.drop(['client_id', 'education'],axis = 1).corr()\ncorr_train.style.background_gradient(cmap='coolwarm').set_precision(3)","b6c6b0cc":"# \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0435\u0439 \u0443\u0434\u0430\u043b\u0438\u043c (\u044f \u043e\u0446\u0435\u043d\u0438\u043b \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043a\u0430\u043a \u0432\u044b\u0448\u0435 0.8 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e)\ncat_cols.remove('month')","d5fdb439":"X_cat = OneHotEncoder(sparse = False).fit_transform(train[cat_cols].values)\nX_cat","81990a58":"Y_cat = OneHotEncoder(sparse = False).fit_transform(test[cat_cols].values)\nY_cat","dab52a4e":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\n\nX_num = StandardScaler().fit_transform(train[num_cols].values)\nX_num","843e9ff0":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u0435\n\nY_num = StandardScaler().fit_transform(test[num_cols].values)\nY_num","ec8c6c37":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\n\nX = np.hstack([X_num, train[bin_cols].values, X_cat])\nY = train['default'].values\n\nid_test = test['client_id']\ntest = np.hstack([Y_num, test[bin_cols].values, Y_cat])","cf029ca0":"# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e\nX_train, X_valid, y_train, y_valid = train_test_split(X, Y, test_size=0.2, random_state=42, shuffle = True)","f25576f0":"# \u041f\u043e\u0434\u0431\u043e\u0440 \u043b\u0443\u0447\u0448\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n\nfrom sklearn.model_selection import GridSearchCV\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0442\u0438\u043f\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\npenalty = ['l1', 'l2']\n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438\nC = np.logspace(0, 4, 10)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nhyperparameters = dict(C=C, penalty=penalty)\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\nclf = GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\nbest_model = clf.fit(X_train, y_train)\n\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 Penalty:', best_model.best_estimator_.get_params()['penalty'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","9d12c178":"# \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nmodel = LogisticRegression( \n                           C=2.7825594022071245, \n                           class_weight='balanced', \n                           dual=False, \n                           fit_intercept=True, \n                           intercept_scaling=1, \n                           l1_ratio=None, \n                           multi_class='auto', \n                           n_jobs=None, \n                           penalty='l2', \n                           solver='liblinear', \n                           verbose=0, \n                           max_iter=1000)\n\nmodel.fit(X_train, y_train)","da2a83e9":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u044b\nY_predict = model.predict(X_valid)\nY_predict_prob = model.predict_proba(X_valid)[:,1]","1f68a7a2":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b\ny_pred_test = model.predict(test)\ny_pred_prob_test = model.predict_proba(test)[:,1]","9357677a":"# \u0421\u0442\u0440\u043e\u0438\u043c ROC-\u043a\u0440\u0438\u0432\u0443\u044e\nfpr, tpr, threshold = roc_curve(y_valid, Y_predict_prob)\nroc_auc = roc_auc_score(y_valid, Y_predict_prob)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","a05af3dc":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c confusion_matrix\nshow_confusion_matrix(y_valid, Y_predict)","efe1458a":"# \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\nall_metrics(y_valid, Y_predict, Y_predict_prob)","b7de6d31":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0439 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u0435\nmain_model = LogisticRegression( \n                           C=2.7825594022071245, \n                           class_weight='balanced', \n                           dual=False, \n                           fit_intercept=True, \n                           intercept_scaling=1, \n                           l1_ratio=None, \n                           multi_class='auto', \n                           n_jobs=None, \n                           penalty='l2', \n                           solver='liblinear', \n                           verbose=0, \n                           max_iter=1000)\nmain_model.fit(X, Y)\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b\ny_pred_test = main_model.predict(test)\ny_pred_prob_test = main_model.predict_proba(test)[:,1]","152b9db0":"# \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\nnew_sample_submission = pd.DataFrame({'client_id': id_test,\n                              'default': y_pred_prob_test})\nnew_sample_submission.to_csv('submission.csv', index=False)\n\nnew_sample_submission.head(10)","d3cacb4c":"# Submission","f89f078e":"# [SF-DST] Credit scoring\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430","99eff428":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","6021fc5e":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","ee62641f":"\u0412\u044b\u0441\u043e\u043a\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f","f9ba8081":"# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (Feature engineering)","7308a4b0":"# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439","aa854391":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","dd1db074":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","e3a451ee":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","24c79247":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 3 \u0441\u043f\u0438\u0441\u043a\u0430 (\u0438\u0441\u043a\u043b. client_id, app_date)","b8a54a08":"\u041f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043c\u0435\u0449\u0435\u043d\u043e, \u043d\u043e \u043f\u043e\u0437\u0436\u0435 (\u0432 \u0431\u043b\u043e\u043a\u0435 Feature Engineering)","1e2c4a9a":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6ecda560":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","7d33e6c8":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","0293ed46":"# \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438"}}