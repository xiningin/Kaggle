{"cell_type":{"e0dd505e":"code","c70029a8":"code","e1b6798e":"code","26dde228":"code","3e971cb7":"code","c82fbdad":"code","a005933e":"code","3aa89356":"code","9c383b7d":"code","b3904b3c":"code","b6b9d694":"code","edab1a7a":"code","3dec8f5e":"code","ee8f1e71":"code","590585cf":"code","a30d5eaa":"code","7d44e340":"code","da41c4df":"code","10522cb4":"code","694de051":"code","718601c5":"code","85bb539a":"code","e35c1edd":"code","0dcf24ef":"code","f97e5820":"markdown","9caadc4f":"markdown"},"source":{"e0dd505e":"import numpy\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\n%matplotlib inline","c70029a8":"data = pd.read_csv('..\/input\/iris\/Iris.csv')","e1b6798e":"data.head()","26dde228":"data.info()","3e971cb7":"sns.heatmap(data.isnull())","c82fbdad":"sns.countplot(x='Species',data=data)","a005933e":"sns.pairplot(data , hue='Species')","3aa89356":"plt.figure(figsize=(15,12))\nplt.subplot(2, 2, 1)\nsns.boxplot(x='Species',y='SepalLengthCm',data=data)\nplt.subplot(2, 2, 2)\nsns.boxplot(x='Species',y='SepalWidthCm',data=data)\nplt.subplot(2, 2, 3)\nsns.boxplot(x='Species',y='PetalLengthCm',data=data)\nplt.subplot(2, 2, 4)\nsns.boxplot(x='Species',y='PetalWidthCm',data=data)","9c383b7d":"data = data.drop('Id',axis=1)","b3904b3c":"X = data.drop('Species',axis=1)\nY = data['Species']","b6b9d694":"from sklearn.model_selection import train_test_split\nX_train , X_test , Y_train , Y_test = train_test_split(X,Y , test_size=0.3 , random_state = 30)","edab1a7a":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train  , Y_train)","3dec8f5e":"pred = model.predict(X_test)","ee8f1e71":"from sklearn.metrics import confusion_matrix","590585cf":"confusion_matrix(pred , Y_test)","a30d5eaa":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nprint(classification_report(Y_test,pred))\nprint('Accuracy:',accuracy_score(Y_test,pred))","7d44e340":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 1)\nknn.fit(X_train , Y_train)","da41c4df":"predk = knn.predict(X_test)","10522cb4":"print(classification_report(Y_test,predk))\nprint(\"Accuracy:\",round(accuracy_score(Y_test,predk),2)*100,'%')","694de051":"error_rate = []\nfor i in range(1,100):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train , Y_train)\n    predk = knn.predict(X_test)\n    error_rate.append([accuracy_score(Y_test , predk),i])","718601c5":"temp = error_rate[0]","85bb539a":"for m in error_rate:\n    if temp[0] < m[0]:\n        temp=m","e35c1edd":"temp[1]","0dcf24ef":"print(temp[1],\"as the value of k will give the highest accuracy possible i.e.\",temp[0]*100,'%')","f97e5820":"# KNN\n","9caadc4f":"create model"}}