{"cell_type":{"bb3f894f":"code","c3c0b237":"code","1d7c9d49":"code","b23e72eb":"code","5bafaccc":"code","be449454":"code","2e109b26":"code","460f3eca":"code","01a66c64":"code","5b61e7c6":"code","92a150d3":"code","35d91cff":"code","9238efbf":"code","d948851b":"code","9f2407f3":"code","accec566":"code","85ab715c":"code","9e09bc2d":"code","a46b468a":"code","4ca89911":"code","2c5bf673":"code","1e2de87e":"code","0300f6a9":"code","b93d7c8b":"code","8dd1d5d0":"code","e29015c3":"code","2043e523":"code","35902cd4":"code","188658db":"code","867489b9":"code","df6235f9":"code","2c1327ba":"markdown","b947ee77":"markdown","5de798cd":"markdown","0a6da737":"markdown","384ec228":"markdown","2d9a9729":"markdown","c8574844":"markdown"},"source":{"bb3f894f":"import numpy as np\nfrom numpy import linalg as LA\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport json\nimport glob\nimport seaborn as sns\n\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn.model_selection import train_test_split\nfrom catboost import Pool, CatBoostClassifier\nfrom sklearn.model_selection import GroupKFold\n\nfrom tqdm import tqdm\n\nimport math","c3c0b237":"TEAMNAME = \"SaltyFish\"\nreplay_dir = \"..\/input\/salty-375\/\"","1d7c9d49":"action_set_v1=[\n\"idle\",\"left\",\"top_left\",\"top\",\"top_right\",\"right\",\"bottom_right\",\"bottom\",\"bottom_left\",\"long_pass\",\"high_pass\",\"short_pass\",\"shot\",\"sprint\",\"release_direction\",\"release_sprint\",\"sliding\",\"dribble\",\"release_dribble\"\n]","b23e72eb":"json_paths=[]\njson_info_paths=[]\n\nfor path in glob.glob(replay_dir+\"*\"):\n    if path.count(\"info\")!=0:\n        json_info_paths.append(path)\n    else:\n        json_paths.append(path)\n\nprint(\"replay num: {}\".format(len(json_paths)))","5bafaccc":"def calc_dist(x1,y1,x2,y2):\n    return ((x1-x2)**2 + (y1-y2)**2)**0.5\n\ndef get_angle_rad(x0,y0,x1,y1,x2,y2): # radian\n    vec1=np.array([x1-x0,y1-y0])\n    vec2=np.array([x2-x0,y2-y0])\n    \n    i = np.inner(vec1, vec2)\n    n = LA.norm(vec1) * LA.norm(vec2)\n    c = i \/ n\n    a = np.arccos(np.clip(c, -1.0, 1.0))\n    return a\n\ndef get_angle(x0,y0,x1,y1,x2,y2):\n    vec1=np.array([x1-x0,y1-y0])\n    vec2=np.array([x2-x0,y2-y0])\n    \n    i = np.inner(vec1, vec2)\n    n = LA.norm(vec1) * LA.norm(vec2)\n    c = i \/ n\n    a = np.rad2deg(np.arccos(np.clip(c, -1.0, 1.0)))\n    \n    return a\n\ndef get_angle_to_goal(x,y):\n    #return get_angle(x,y,1,0.044,1,-0.044)\n    return get_angle(x,y,1,0.044*1.5,1,-0.044*1.5)\n\ndef get_dist_opp_goal(x,y):\n    return calc_dist(x,y,1,0)\n\ndef pressure_to_xy(x,y,team):\n    pressure_x=0\n    pressure_y=0\n    abs_pressure=0\n    for i in range(len(team)):\n        opp_x = team[i][0]\n        opp_y = team[i][1]\n\n        dist = calc_dist(x,y,opp_x,opp_y)\n        pressure_x+=(x - opp_x)\/dist\n        pressure_y+=(y - opp_y)\/dist\n        \n        abs_pressure += calc_dist(pressure_x,pressure_y,0,0)\n        \n    return pressure_x,pressure_y,abs_pressure\n\ndef clamp(x,mn,mx):\n    return min(mx, max(x, mn))\n\ndef normalizedClamp(x,mn,mx):\n    ret = clamp(x,mn,mx)\n    return (ret - mn) \/ (mx - mn);\n\ndef normalize(x,y): # x**2 + y**2 -> 1\n    dist = (x**2 + y**2)**0.5\n    if dist==0:\n        return x,y\n    return x\/dist, y\/dist \n\ndef get_pass_score(px,py, pdir_x, pdir_y, target_x, target_y, target_dir_x,target_dir_y):\n    INPUT_POWER=0.4 # change later\n    autoDirectionBias = 0.3 # shortpass\n    \n    norm_x, norm_y = normalize(pdir_x,pdir_y)\n    \n    po = INPUT_POWER*60\/55\n    \n    manualTarget_x = px + norm_x * po\n    manualTarget_y = py + norm_y * po\n    \n    passDuration = 0.3 + calc_dist(px,py,target_x,target_y)*55 * 0.05\n    passDuration = ((clamp(passDuration,0,1) ** 0.7)*0.7)*10\n    \n    targetPos_x = target_x + target_dir_x*passDuration\n    targetPos_y = target_y + target_dir_y*passDuration\n    \n    target_manual_dist = calc_dist(manualTarget_x,manualTarget_y,targetPos_x,targetPos_y) * 55\n    \n    distanceRating = (normalizedClamp(target_manual_dist,0,70)**0.8)*0.8\n    \n    angleRating = abs(get_angle_rad(px,py,manualTarget_x,manualTarget_y,targetPos_x,targetPos_y))\/3.14159\n    \n    \n    final_x = targetPos_x * autoDirectionBias + manualTarget_x * (1-autoDirectionBias)\n    final_y = targetPos_y * autoDirectionBias + manualTarget_y * (1-autoDirectionBias)\n    \n    return distanceRating+angleRating,final_x,final_y\n\ndef get_lowest_pass_score(player_ind, team, team_dir):\n    min_ind=-1\n    min_score=2\n    \n    player_x = team[player_ind][0]\n    player_y = team[player_ind][1]\n    \n    player_dir1 = team_dir[player_ind][0]\n    player_dir2 = team_dir[player_ind][1]\n    \n    final_x = -1\n    final_y = -1\n    \n    for ind in range(len(team)):\n        if ind == player_ind:\n            continue\n\n        target_x = team[ind][0]\n        target_y = team[ind][1]\n\n        target_dir1 = team_dir[ind][0]\n        target_dir2 = team_dir[ind][1]\n\n        score,tx,ty = get_pass_score(player_x,player_y,player_dir1,player_dir2,target_x,target_y,target_dir1,target_dir2)\n        if score < min_score:\n            min_ind = ind\n            min_score = score\n            final_x = tx\n            final_y = ty\n    return min_ind,min_score,final_x,final_y\n\ndef my_atan2(x,y): # return atan(y\/x)\n    if x==0:\n        return 0\n    return math.atan2(y,x)\n\ndef convert_raw_y(raw): # y*=1.5\n    raw[\"ball\"][1] *= 1.5\n    raw[\"ball_direction\"][1] *= 1.5\n    \n    for ind in range(len(raw[\"left_team\"])):\n        raw[\"left_team\"][ind][1] *= 1.5\n        raw[\"left_team_direction\"][ind][1] *= 1.5\n    for ind in range(len(raw[\"right_team\"])):\n        raw[\"right_team\"][ind][1] *= 1.5\n        raw[\"right_team_direction\"][ind][1] *= 1.5\n    return raw\n\ndef invert_raw_y(raw): # y=-y\n    raw[\"ball\"][1] = -raw[\"ball\"][1]\n    raw[\"ball_direction\"][1] = -raw[\"ball_direction\"][1] \n    \n    for ind in range(len(raw[\"left_team\"])):\n        raw[\"left_team\"][ind][1]            =-raw[\"left_team\"][ind][1]\n        raw[\"left_team_direction\"][ind][1]  =-raw[\"left_team_direction\"][ind][1]\n    for ind in range(len(raw[\"right_team\"])):\n        raw[\"right_team\"][ind][1]           =-raw[\"right_team\"][ind][1]\n        raw[\"right_team_direction\"][ind][1] =-raw[\"right_team_direction\"][ind][1]\n    return raw\n\n\ndef invert_act_y(action):\n    if action==2:\n        return 8\n    if action==8:\n        return 2\n    if action==7:\n        return 3 \n    if action==3:\n        return 7\n    if action==6:\n        return 4\n    if action==4:\n        return 6\n    return action","be449454":"def create_dict(raw):\n   \n    d=dict()\n    \n    ball = raw[\"ball\"]\n    d[\"ballx\"] = ball[0]\n    d[\"bally\"] = ball[1]\n    d[\"ballz\"] = ball[2]\n    \n    d[\"ballx_d\"] = raw[\"ball_direction\"][0]\n    d[\"bally_d\"] = raw[\"ball_direction\"][1]\n    d[\"ballz_d\"] = raw[\"ball_direction\"][2]\n    \n    d[\"ball_velo\"]=(raw[\"ball_direction\"][0]**2 + \n                    raw[\"ball_direction\"][1]**2 + \n                    raw[\"ball_direction\"][2]**2)**0.5\n    \n    d[\"ballr_1\"]=raw[\"ball_rotation\"][0]\n    d[\"ballr_2\"]=raw[\"ball_rotation\"][1]\n    d[\"ballr_3\"]=raw[\"ball_rotation\"][2]\n    \n    d[\"ball_owned_team\"]=raw[\"ball_owned_team\"]\n    \n    d[\"ball_10step_x\"]=ball[0] + 10*raw[\"ball_direction\"][0]\n    d[\"ball_10step_y\"]=ball[1] + 10*raw[\"ball_direction\"][1]\n    \n    d[\"ball_20step_x\"]=ball[0] + 20*raw[\"ball_direction\"][0]\n    d[\"ball_20step_y\"]=ball[1] + 20*raw[\"ball_direction\"][1]\n    \n    d[\"ball_angle_goal\"]=get_angle_to_goal(ball[0],ball[1])\n    d[\"ball_10step_angle_goal\"]=get_angle_to_goal(ball[0] + 10*raw[\"ball_direction\"][0],ball[1] + 10*raw[\"ball_direction\"][1])\n    \n    d[\"game_mode\"]=raw[\"game_mode\"]\n    \n    player_ind = raw[\"active\"]\n    \n    if raw[\"ball_owned_team\"]==0 and raw[\"active\"]==raw[\"ball_owned_player\"]:\n        d[\"own_and_active\"]=1\n    else:\n        d[\"own_and_active\"]=0\n\n    player_x = raw[\"left_team\"][player_ind][0]\n    player_y = raw[\"left_team\"][player_ind][1]\n    \n    d[\"player_x\"]=player_x\n    d[\"player_y\"]=player_y\n    \n    d[\"active_dir1\"]=raw[\"left_team_direction\"][player_ind][0]\n    d[\"active_dir2\"]=raw[\"left_team_direction\"][player_ind][1]    \n    \n    d[\"active_tired\"]=raw[\"left_team_tired_factor\"][player_ind]\n    d[\"active_role\"]=raw[\"left_team_roles\"][player_ind]\n    d[\"active_yellow\"] = raw[\"left_team_yellow_card\"][player_ind]\n    \n    d[\"ball_dist_xy\"]=calc_dist(ball[0],ball[1],player_x,player_y)\n    d[\"ball_10step_x_diff\"]=player_x-(ball[0] + 10*raw[\"ball_direction\"][0])\n    d[\"ball_10step_y_diff\"]=player_y-(ball[1] + 10*raw[\"ball_direction\"][1])\n\n    d[\"ball_20step_x_diff\"]=player_x-(ball[0] + 20*raw[\"ball_direction\"][0])\n    d[\"ball_20step_y_diff\"]=player_y-(ball[1] + 20*raw[\"ball_direction\"][1])\n    \n    d[\"ball_dir1\"]=player_x-ball[0]\n    d[\"ball_dir2\"]=player_y-ball[1]\n\n    \n    d[\"dist_ally_goal\"]=((player_x+1)**2 + player_y**2)**0.5\n    d[\"dist_opp_goal\"]=((player_x-1)**2 + player_y**2)**0.5\n    \n    ball_dist_goal = get_dist_opp_goal(ball[0],ball[1])\n    \n    ally_pos_x=[]\n    ally_near_opp_goal_cnt=0\n    min_ind=-1\n    min_dist=10**10\n    for ind in range(len(raw[\"left_team\"])):\n        now_x = raw[\"left_team\"][ind][0]\n        now_y = raw[\"left_team\"][ind][1]\n        ally_pos_x.append(now_x)\n        if get_dist_opp_goal(now_x,now_y) < ball_dist_goal:\n            ally_near_opp_goal_cnt+=1\n\n        if ind == player_ind:\n            continue\n        dist = (player_x-now_x)**2 + (player_y-now_y)**2\n        if dist < min_dist:\n            min_ind=ind\n            min_dist=dist    \n    \n    ally_pos_x.sort()\n    d[\"ally_offside_line\"]=ally_pos_x[1]\n    d[\"ally_upper_mean_x\"] = np.mean(ally_pos_x[:len(ally_pos_x)\/\/2])\n    d[\"ally_lower_mean_x\"] = np.mean(ally_pos_x[len(ally_pos_x)\/\/2:])\n    \n    d[\"num_ally_near_opp_goal\"]=ally_near_opp_goal_cnt\n    d[\"nearest_ally_dist\"]=min_dist**0.5\n    d[\"nearest_ally_x\"]=raw[\"left_team\"][min_ind][0]\n    d[\"nearest_ally_y\"]=raw[\"left_team\"][min_ind][1]\n    d[\"nearest_ally_dir1\"]=raw[\"left_team_direction\"][min_ind][0]\n    d[\"nearest_ally_dir2\"]=raw[\"left_team_direction\"][min_ind][1]\n    \n    opp_near_opp_goal_cnt=0\n    min_ind=-1\n    min_dist=10**10\n    opp_pos_x = []\n    for ind in range(len(raw[\"right_team\"])):\n        now_x = raw[\"right_team\"][ind][0]\n        now_y = raw[\"right_team\"][ind][1]\n        if get_dist_opp_goal(now_x,now_y) < ball_dist_goal:\n            opp_near_opp_goal_cnt+=1\n\n        opp_pos_x.append(now_x)\n\n        dist = (player_x-now_x)**2 + (player_y-now_y)**2\n        if dist < min_dist:\n            min_ind=ind\n            min_dist=dist\n    \n    d[\"num_opp_near_opp_goal\"]=opp_near_opp_goal_cnt\n    d[\"nearest_opp_dist_player\"]=min_dist**0.5 \n    d[\"nearest_opp_x\"]=raw[\"right_team\"][min_ind][0]\n    d[\"nearest_opp_y\"]=raw[\"right_team\"][min_ind][1]\n    d[\"nearest_opp_dir1\"]=raw[\"right_team_direction\"][min_ind][0]\n    d[\"nearest_opp_dir2\"]=raw[\"right_team_direction\"][min_ind][1]\n    \n    min_ind=-1\n    min_dist=10**10\n    for ind in range(len(raw[\"right_team\"])):\n        now_x = raw[\"right_team\"][ind][0]\n        now_y = raw[\"right_team\"][ind][1]\n\n        dist = calc_dist(ball[0],ball[1],now_x,now_y)\n\n        if dist < min_dist:\n            min_ind=ind\n            min_dist=dist  \n\n    min_x=raw[\"right_team\"][min_ind][0]\n    min_y=raw[\"right_team\"][min_ind][1]\n    \n    d[\"ball_nearest_opp_dist_ball\"]=min_dist\n    d[\"ball_nearest_opp_dist_player\"]=calc_dist(min_x,min_y,player_x,player_y)\n    d[\"ball_nearest_opp_x\"]=min_x\n    d[\"ball_nearest_opp_y\"]=min_y\n    d[\"ball_nearest_opp_dir1\"]=raw[\"left_team_direction\"][min_ind][0]\n    d[\"ball_nearest_opp_dir2\"]=raw[\"left_team_direction\"][min_ind][1]\n\n    gk_ind = raw[\"right_team_roles\"][0]\n    gk_x = raw[\"right_team\"][gk_ind][0]\n    gk_y = raw[\"right_team\"][gk_ind][1]\n    \n    d[\"opp_keeper_x\"]=gk_x\n    d[\"opp_keeper_y\"]=gk_y\n    d[\"opp_keeper_x_player\"]=player_x - gk_x\n    d[\"opp_keeper_y_player\"]=player_y - gk_y\n    d[\"opp_keeper_dir1\"]=raw[\"right_team_direction\"][gk_ind][0]\n    d[\"opp_keeper_dir2\"]=raw[\"right_team_direction\"][gk_ind][1]\n    \n    opp_pos_x.sort()\n    d[\"offside_line\"]=opp_pos_x[-2]\n    d[\"opp_upper_mean_x\"] = np.mean(opp_pos_x[:len(opp_pos_x)\/\/2])\n    d[\"opp_lower_mean_x\"] = np.mean(opp_pos_x[len(opp_pos_x)\/\/2:])\n    d[\"steps_left\"]=raw[\"steps_left\"]\n    d[\"score\"]=raw[\"score\"][0]-raw[\"score\"][1]\n        \n    d[\"player_pressure_from_opp_x\"],d[\"player_pressure_from_opp_y\"],d[\"player_pressure_abs\"] = pressure_to_xy(player_x,player_y,raw[\"right_team\"])\n    d[\"ball_pressure_from_opp_x\"],d[\"ball_pressure_from_opp_y\"],d[\"ball_pressure_from_opp_abs\"] = pressure_to_xy(ball[0],ball[1],raw[\"right_team\"])\n    d[\"ball_pressure_from_ally_x\"],d[\"ball_pressure_from_ally_y\"],d[\"ball_pressure_from_ally_abs\"] = pressure_to_xy(ball[0],ball[1],raw[\"left_team\"])\n    \n    d[\"player_angle_dir_opp_goal\"]=get_angle(player_x,player_y,1,0,d[\"active_dir1\"],d[\"active_dir2\"])\n    d[\"player_angle_dir_ally_goal\"]=get_angle(player_x,player_y,-1,0,d[\"active_dir1\"],d[\"active_dir2\"])\n    \n    min_ind, score,pass_x,pass_y= get_lowest_pass_score(raw[\"active\"], raw[\"left_team\"], raw[\"left_team_direction\"])\n    \n    d[\"pass_x\"] = pass_x\n    d[\"pass_y\"] = pass_y\n    \n    d[\"pass_score\"] = score\n    \n    p1,p2,d[\"pass_pressure_from_opp_abs\"]  = pressure_to_xy(pass_x,pass_y,raw[\"left_team\"])    \n    p1,p2,d[\"pass_pressure_from_ally_abs\"] = pressure_to_xy(pass_x,pass_y,raw[\"right_team\"])\n    \n    d[\"pass_dist_from_player\"] = calc_dist(pass_x,pass_y,player_x,player_y)\n    d[\"pass_dist_from_ball\"] = calc_dist(pass_x,pass_y,ball[0],ball[1])\n    \n    d[\"ballx_d_norm\"], d[\"bally_d_norm\"] = normalize(d[\"ballx_d\"],d[\"bally_d\"])\n    d[\"active_dir1_norm\"], d[\"active_dir2_norm\"] = normalize(d[\"active_dir1\"], d[\"active_dir2\"])\n    d[\"ball_10step_x_diff_norm\"], d[\"ball_10step_y_diff_norm\"] = normalize(d[\"ball_10step_x_diff\"], d[\"ball_10step_y_diff\"])\n    d[\"ball_20step_x_diff_norm\"], d[\"ball_20step_y_diff_norm\"] = normalize(d[\"ball_20step_x_diff\"], d[\"ball_20step_y_diff\"])\n    d[\"ball_dir1_norm\"], d[\"ball_dir2_norm\"] = normalize(d[\"ball_dir1\"], d[\"ball_dir2\"])\n    d[\"nearest_ally_dir1_norm\"], d[\"nearest_ally_dir2_norm\"] = normalize(d[\"nearest_ally_dir1\"], d[\"nearest_ally_dir2\"])\n    d[\"nearest_opp_dir1_norm\"], d[\"nearest_opp_dir2_norm\"] = normalize(d[\"nearest_opp_dir1\"], d[\"nearest_opp_dir2\"])\n    d[\"ball_nearest_opp_dir1_norm\"], d[\"ball_nearest_opp_dir2_norm\"] = normalize(d[\"ball_nearest_opp_dir1\"], d[\"ball_nearest_opp_dir2\"])\n    \n    d[\"opp_keeper_x_player_norm\"], d[\"opp_keeper_y_player_norm\"] = normalize(d[\"opp_keeper_x_player\"], d[\"opp_keeper_y_player\"])\n    d[\"opp_keeper_dir1_norm\"], d[\"opp_keeper_dir2_norm\"] = normalize(d[\"opp_keeper_dir1\"], d[\"opp_keeper_dir2\"])\n    \n    d[\"ball_d_theta\"] = my_atan2(d[\"ballx_d_norm\"], d[\"bally_d_norm\"])\n    d[\"active_dir_theta\"] = my_atan2(d[\"active_dir1_norm\"], d[\"active_dir2_norm\"])\n    d[\"ball_10step_theta\"] = my_atan2(d[\"ball_10step_x_diff_norm\"], d[\"ball_10step_y_diff_norm\"])\n    d[\"ball_20step_theta\"] = my_atan2(d[\"ball_20step_x_diff_norm\"], d[\"ball_20step_y_diff_norm\"])\n    d[\"ball_dir_theta\"] = my_atan2( d[\"ball_dir1_norm\"], d[\"ball_dir2_norm\"])\n    d[\"nearest_ally_dir_theta\"] = my_atan2(d[\"nearest_ally_dir1_norm\"], d[\"nearest_ally_dir2_norm\"])\n    d[\"nearest_opp_dir_theta\"] = my_atan2(d[\"nearest_opp_dir1_norm\"], d[\"nearest_opp_dir2_norm\"])\n    d[\"ball_nearest_opp_dir_theta\"] = my_atan2(d[\"ball_nearest_opp_dir1_norm\"], d[\"ball_nearest_opp_dir2_norm\"])\n    d[\"opp_keeper_theta\"] = my_atan2(d[\"opp_keeper_x_player_norm\"], d[\"opp_keeper_y_player_norm\"])\n    d[\"opp_keeper_dir_theta\"] = my_atan2( d[\"opp_keeper_dir1_norm\"], d[\"opp_keeper_dir2_norm\"])\n    \n    d[\"sticky_sprint\"] = raw[\"sticky_actions\"][8]\n    sub_feats=['ball_dist_xy___nearest_opp_dist_player',       'dist_ally_goal___ball_nearest_opp_dist_ball',       'dist_ally_goal___ball_nearest_opp_dist_player',       'ball_nearest_opp_dist_ball___ball_nearest_opp_dist_player',       'ballx___player_x', 'ballx___nearest_opp_x',       'ballx___opp_keeper_x', 'ballx_d___active_dir1',       'ballx_d___ball_dir1', 'ball_10step_x___player_x',       'ball_10step_x___opp_keeper_x_player',       'ball_20step_x___offside_line',       'ball_20step_x___opp_upper_mean_x',       'player_x___ally_lower_mean_x', 'player_x___nearest_opp_x',       'player_x___offside_line', 'active_dir1___ball_dir1',       'active_dir1___nearest_opp_dir1',       'active_dir1___opp_keeper_dir1',       'ball_10step_x_diff___opp_keeper_dir1',       'ball_20step_x_diff___opp_keeper_x',       'ball_dir1___nearest_opp_dir1',       'ball_dir1___ball_nearest_opp_dir1',       'ball_dir1___opp_keeper_dir1',       'ally_offside_line___ally_lower_mean_x',       'ally_upper_mean_x___offside_line',       'ally_upper_mean_x___opp_upper_mean_x',       'ally_lower_mean_x___offside_line',       'ally_lower_mean_x___opp_upper_mean_x',       'opp_keeper_x_player___opp_keeper_dir1',       'offside_line___opp_upper_mean_x', 'bally___player_y',       'bally___nearest_opp_y', 'bally_d___active_dir2',       'bally_d___ball_dir2', 'player_y___nearest_opp_y',       'active_dir2___ball_10step_y_diff',       'active_dir2___opp_keeper_dir2',       'ball_10step_y_diff___opp_keeper_dir2',       'ball_dir2___nearest_opp_dir2',       'ball_dir2___opp_keeper_dir2',       'opp_keeper_y___opp_keeper_y_player']\n    \n    for l in sub_feats:\n        l1,l2 = l.split(\"___\")\n        d[l] = d[l1] - d[l2]\n    \n    return d    ","2e109b26":"%%time \n\nact_lis =[]\nreplay_group = []\nrows_list = [] # list of dict\n\nreplays = []\nfor replay_ind, path_replay in enumerate(tqdm(json_paths)):\n    json_open = open(path_replay, 'r')\n    json_load = json.load(json_open)\n    \n    for frame in range(len(json_load[\"steps\"])-1):\n        \n        if TEAMNAME in json_load[\"info\"][\"TeamNames\"][0]:\n            team=0\n        elif TEAMNAME in json_load[\"info\"][\"TeamNames\"][1]:\n            team=1\n        else:\n            raise BaseException(\"teamname{} not found!\".format(TEAMNAME))\n            \n        raw = json_load[\"steps\"][frame][team][\"observation\"][\"players_raw\"][0]\n        raw = convert_raw_y(raw)\n        \n        action = json_load[\"steps\"][frame+1][team][\"action\"][0]\n        \n        # ignore idle, release_sprint, release_direction, release_dribble, dribble\n        if action == 0 or action == 14 or action == 15 or action == 17 or action == 18 or action == 16:\n            continue\n        if action == 5 and frame%3==0:\n            continue\n            \n        d = create_dict(raw)\n        rows_list.append(d)\n        \n        replay_group.append(replay_ind)\n               \n        act_lis.append(action)","460f3eca":"%%time\nX_df = pd.DataFrame(rows_list)","01a66c64":"print(X_df.shape)\nX_df.head()","5b61e7c6":"import collections\nc = collections.Counter(act_lis)\nfor act,cnt in c.most_common():\n    print(cnt,action_set_v1[act])","92a150d3":"group_kfold = GroupKFold(n_splits=5)\nfor train_index, test_index in group_kfold.split(X_df, act_lis, replay_group):\n    print(len(test_index))","35d91cff":"test_index","9238efbf":"x_train = X_df.iloc[train_index, :]\nx_test  = X_df.iloc[test_index, :]\n\ny_train = np.array(act_lis)[train_index]\ny_test  = np.array(act_lis)[test_index]","d948851b":"cat_features = [\"game_mode\",\"active_role\",\"ball_owned_team\",\"own_and_active\",\"sticky_sprint\"]\ntrain_dataset = Pool(data=x_train,\n                     label=y_train,\n                     cat_features=cat_features)\n\neval_dataset = Pool(data=x_test,\n                    label=y_test,\n                    cat_features=cat_features)","9f2407f3":"params = {\n      'depth': 8,\n      'learning_rate': 0.1,\n      'random_seed': 42,\n   #   'early_stopping_rounds':100, \n      'iterations': 2500,\n      'task_type': 'GPU',\n      \"use_best_model\":True,\n}","accec566":"%%time\nmodel = CatBoostClassifier(**params)\nmodel.fit(train_dataset, eval_set=eval_dataset)","85ab715c":"y_pred = model.predict(x_test,prediction_type=\"Probability\")\ny_pred_max = np.argmax(y_pred, axis=1)","9e09bc2d":"y_pred_max+=1 # because no idle","a46b468a":"accuracy = sum(y_test == y_pred_max) \/ len(y_test)\nprint(\"Accuracy : {}\".format(accuracy))\n\nfrom sklearn.metrics import fbeta_score\nprint(\"F1 : {}\".format(fbeta_score(y_test, y_pred_max, average='macro', beta=0.5)))","4ca89911":"action_set_v1=[\n\"idle\",\"left\",\"top_left\",\"top\",\"top_right\",\"right\",\"bottom_right\",\"bottom\",\"bottom_left\",\"long_pass\",\"high_pass\",\"short_pass\",\"shot\",\"sprint\",\"release_direction\",\"release_sprint\",\"sliding\",\"dribble\",\"release_dribble\"\n]\n\naction_set_v1_used=[]\nfor i in np.unique(y_pred_max):\n    action_set_v1_used.append(action_set_v1[i])\nlen(action_set_v1_used)","2c5bf673":"pd.options.display.max_rows = 1000\npd.options.display.max_columns=300","1e2de87e":"feature_importance = model.get_feature_importance()\n\nimportance_df = pd.DataFrame({\n    \"feature\":x_test.columns,\n    \"importance\":feature_importance\n})\nimportance_df.sort_values(\"importance\",ascending=False)","0300f6a9":"from sklearn import metrics\nres = metrics.classification_report(y_test, y_pred_max, digits=3,output_dict=True,target_names = action_set_v1_used)\ndf = pd.DataFrame(res).transpose()\ndf=df.drop(['accuracy', 'macro avg', 'weighted avg'])\ndf.sort_values(\"f1-score\")","b93d7c8b":"fname = TEAMNAME + \"_saved.model\"\nmodel.save_model(fname)","8dd1d5d0":"!ls -lh","e29015c3":"!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.7 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.7.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","2043e523":"!mkdir -p \/kaggle_simulations\/agent\n!cp $fname \/kaggle_simulations\/agent\/model.model\n!ls \/kaggle_simulations\/agent","35902cd4":"%%writefile \/kaggle_simulations\/agent\/main.py\n\nimport numpy as np\nfrom numpy import linalg as LA\nimport os\nimport math\n\nfrom catboost import CatBoostClassifier, Pool\nimport pandas as pd\n\nmodel = CatBoostClassifier()\nmodel.load_model('\/kaggle_simulations\/agent\/model.model')\n\ndef calc_dist(x1,y1,x2,y2):\n    return ((x1-x2)**2 + (y1-y2)**2)**0.5\n\ndef get_angle_rad(x0,y0,x1,y1,x2,y2): # radian\n    vec1=np.array([x1-x0,y1-y0])\n    vec2=np.array([x2-x0,y2-y0])\n    \n    i = np.inner(vec1, vec2)\n    n = LA.norm(vec1) * LA.norm(vec2)\n    c = i \/ n\n    a = np.arccos(np.clip(c, -1.0, 1.0))\n    return a\n\ndef get_angle(x0,y0,x1,y1,x2,y2):\n    vec1=np.array([x1-x0,y1-y0])\n    vec2=np.array([x2-x0,y2-y0])\n    \n    i = np.inner(vec1, vec2)\n    n = LA.norm(vec1) * LA.norm(vec2)\n    c = i \/ n\n    a = np.rad2deg(np.arccos(np.clip(c, -1.0, 1.0)))\n    \n    return a\n\ndef get_angle_to_goal(x,y):\n    #return get_angle(x,y,1,0.044,1,-0.044)\n    return get_angle(x,y,1,0.044*1.5,1,-0.044*1.5)\n\ndef get_dist_opp_goal(x,y):\n    return calc_dist(x,y,1,0)\n\ndef pressure_to_xy(x,y,team):\n    pressure_x=0\n    pressure_y=0\n    abs_pressure=0\n    for i in range(len(team)):\n        opp_x = team[i][0]\n        opp_y = team[i][1]\n\n        dist = calc_dist(x,y,opp_x,opp_y)\n        pressure_x+=(x - opp_x)\/dist\n        pressure_y+=(y - opp_y)\/dist\n        \n        abs_pressure += calc_dist(pressure_x,pressure_y,0,0)\n        \n    return pressure_x,pressure_y,abs_pressure\n\ndef clamp(x,mn,mx):\n    return min(mx, max(x, mn))\n\ndef normalizedClamp(x,mn,mx):\n    ret = clamp(x,mn,mx)\n    return (ret - mn) \/ (mx - mn);\n\ndef normalize(x,y): # x**2 + y**2 -> 1\n    dist = (x**2 + y**2)**0.5\n    if dist==0:\n        return x,y\n    return x\/dist, y\/dist \n\ndef get_pass_score(px,py, pdir_x, pdir_y, target_x, target_y, target_dir_x,target_dir_y):\n    INPUT_POWER=0.4 # change later\n    autoDirectionBias = 0.3 # shortpass\n    \n    norm_x, norm_y = normalize(pdir_x,pdir_y)\n    \n    po = INPUT_POWER*60\/55\n    \n    manualTarget_x = px + norm_x * po\n    manualTarget_y = py + norm_y * po\n    \n    passDuration = 0.3 + calc_dist(px,py,target_x,target_y)*55 * 0.05\n    passDuration = ((clamp(passDuration,0,1) ** 0.7)*0.7)*10\n    \n    targetPos_x = target_x + target_dir_x*passDuration\n    targetPos_y = target_y + target_dir_y*passDuration\n    \n    target_manual_dist = calc_dist(manualTarget_x,manualTarget_y,targetPos_x,targetPos_y) * 55\n    \n    distanceRating = (normalizedClamp(target_manual_dist,0,70)**0.8)*0.8\n    \n    angleRating = abs(get_angle_rad(px,py,manualTarget_x,manualTarget_y,targetPos_x,targetPos_y))\/3.14159\n    \n    \n    final_x = targetPos_x * autoDirectionBias + manualTarget_x * (1-autoDirectionBias)\n    final_y = targetPos_y * autoDirectionBias + manualTarget_y * (1-autoDirectionBias)\n    \n    return distanceRating+angleRating,final_x,final_y\n\ndef get_lowest_pass_score(player_ind, team, team_dir):\n    min_ind=-1\n    min_score=2\n    \n    player_x = team[player_ind][0]\n    player_y = team[player_ind][1]\n    \n    player_dir1 = team_dir[player_ind][0]\n    player_dir2 = team_dir[player_ind][1]\n    \n    final_x = -1\n    final_y = -1\n    \n    for ind in range(len(team)):\n        if ind == player_ind:\n            continue\n\n        target_x = team[ind][0]\n        target_y = team[ind][1]\n\n        target_dir1 = team_dir[ind][0]\n        target_dir2 = team_dir[ind][1]\n\n        score,tx,ty = get_pass_score(player_x,player_y,player_dir1,player_dir2,target_x,target_y,target_dir1,target_dir2)\n        if score < min_score:\n            min_ind = ind\n            min_score = score\n            final_x = tx\n            final_y = ty\n    return min_ind,min_score,final_x,final_y\n\ndef my_atan2(x,y): # return atan(y\/x)\n    if x==0:\n        return 0\n    return math.atan2(y,x)\n\ndef convert_raw_y(raw): # y*=1.5\n    raw[\"ball\"][1] *= 1.5\n    raw[\"ball_direction\"][1] *= 1.5\n    \n    for ind in range(len(raw[\"left_team\"])):\n        raw[\"left_team\"][ind][1] *= 1.5\n        raw[\"left_team_direction\"][ind][1] *= 1.5\n    for ind in range(len(raw[\"right_team\"])):\n        raw[\"right_team\"][ind][1] *= 1.5\n        raw[\"right_team_direction\"][ind][1] *= 1.5\n    return raw\n\ndef invert_raw_y(raw): # y=-y\n    raw[\"ball\"][1] = -raw[\"ball\"][1]\n    raw[\"ball_direction\"][1] = -raw[\"ball_direction\"][1] \n    \n    for ind in range(len(raw[\"left_team\"])):\n        raw[\"left_team\"][ind][1]            =-raw[\"left_team\"][ind][1]\n        raw[\"left_team_direction\"][ind][1]  =-raw[\"left_team_direction\"][ind][1]\n    for ind in range(len(raw[\"right_team\"])):\n        raw[\"right_team\"][ind][1]           =-raw[\"right_team\"][ind][1]\n        raw[\"right_team_direction\"][ind][1] =-raw[\"right_team_direction\"][ind][1]\n    return raw\n\ndef invert_act_y(action):\n    if action==2:\n        return 8\n    if action==8:\n        return 2\n    if action==7:\n        return 3 \n    if action==3:\n        return 7\n    if action==6:\n        return 4\n    if action==4:\n        return 6\n    return action\n\ndef create_df(raw):   \n    \n    d=dict()\n    \n    ball = raw[\"ball\"]\n    d[\"ballx\"] = ball[0]\n    d[\"bally\"] = ball[1]\n    d[\"ballz\"] = ball[2]\n    \n    d[\"ballx_d\"] = raw[\"ball_direction\"][0]\n    d[\"bally_d\"] = raw[\"ball_direction\"][1]\n    d[\"ballz_d\"] = raw[\"ball_direction\"][2]\n    \n    d[\"ball_velo\"]=(raw[\"ball_direction\"][0]**2 + \n                    raw[\"ball_direction\"][1]**2 + \n                    raw[\"ball_direction\"][2]**2)**0.5\n    \n    d[\"ballr_1\"]=raw[\"ball_rotation\"][0]\n    d[\"ballr_2\"]=raw[\"ball_rotation\"][1]\n    d[\"ballr_3\"]=raw[\"ball_rotation\"][2]\n    \n    d[\"ball_owned_team\"]=raw[\"ball_owned_team\"]\n    \n    d[\"ball_10step_x\"]=ball[0] + 10*raw[\"ball_direction\"][0]\n    d[\"ball_10step_y\"]=ball[1] + 10*raw[\"ball_direction\"][1]\n    \n    d[\"ball_20step_x\"]=ball[0] + 20*raw[\"ball_direction\"][0]\n    d[\"ball_20step_y\"]=ball[1] + 20*raw[\"ball_direction\"][1]\n    \n    d[\"ball_angle_goal\"]=get_angle_to_goal(ball[0],ball[1])\n    d[\"ball_10step_angle_goal\"]=get_angle_to_goal(ball[0] + 10*raw[\"ball_direction\"][0],ball[1] + 10*raw[\"ball_direction\"][1])\n    \n    d[\"game_mode\"]=raw[\"game_mode\"]\n    \n    player_ind = raw[\"active\"]\n    \n    if raw[\"ball_owned_team\"]==0 and raw[\"active\"]==raw[\"ball_owned_player\"]:\n        d[\"own_and_active\"]=1\n    else:\n        d[\"own_and_active\"]=0\n\n    player_x = raw[\"left_team\"][player_ind][0]\n    player_y = raw[\"left_team\"][player_ind][1]\n    \n    d[\"player_x\"]=player_x\n    d[\"player_y\"]=player_y\n    \n    d[\"active_dir1\"]=raw[\"left_team_direction\"][player_ind][0]\n    d[\"active_dir2\"]=raw[\"left_team_direction\"][player_ind][1]    \n    \n    d[\"active_tired\"]=raw[\"left_team_tired_factor\"][player_ind]\n    d[\"active_role\"]=raw[\"left_team_roles\"][player_ind]\n    d[\"active_yellow\"] = raw[\"left_team_yellow_card\"][player_ind]\n    \n    d[\"ball_dist_xy\"]=calc_dist(ball[0],ball[1],player_x,player_y)\n    d[\"ball_10step_x_diff\"]=player_x-(ball[0] + 10*raw[\"ball_direction\"][0])\n    d[\"ball_10step_y_diff\"]=player_y-(ball[1] + 10*raw[\"ball_direction\"][1])\n    d[\"ball_20step_x_diff\"]=player_x-(ball[0] + 20*raw[\"ball_direction\"][0])\n    d[\"ball_20step_y_diff\"]=player_y-(ball[1] + 20*raw[\"ball_direction\"][1])\n    \n    d[\"ball_dir1\"]=player_x-ball[0]\n    d[\"ball_dir2\"]=player_y-ball[1]\n    d[\"dist_ally_goal\"]=((player_x+1)**2 + player_y**2)**0.5\n    d[\"dist_opp_goal\"]=((player_x-1)**2 + player_y**2)**0.5\n    \n    ball_dist_goal = get_dist_opp_goal(ball[0],ball[1])\n    \n    ally_pos_x=[]\n    ally_near_opp_goal_cnt=0\n    min_ind=-1\n    min_dist=10**10\n    for ind in range(len(raw[\"left_team\"])):\n        now_x = raw[\"left_team\"][ind][0]\n        now_y = raw[\"left_team\"][ind][1]\n        ally_pos_x.append(now_x)\n        if get_dist_opp_goal(now_x,now_y) < ball_dist_goal:\n            ally_near_opp_goal_cnt+=1\n\n        if ind == player_ind:\n            continue\n        dist = (player_x-now_x)**2 + (player_y-now_y)**2\n        if dist < min_dist:\n            min_ind=ind\n            min_dist=dist    \n    \n    ally_pos_x.sort()\n    d[\"ally_offside_line\"]=ally_pos_x[1]\n    d[\"ally_upper_mean_x\"] = np.mean(ally_pos_x[:len(ally_pos_x)\/\/2])\n    d[\"ally_lower_mean_x\"] = np.mean(ally_pos_x[len(ally_pos_x)\/\/2:])\n    \n    d[\"num_ally_near_opp_goal\"]=ally_near_opp_goal_cnt\n    d[\"nearest_ally_dist\"]=min_dist**0.5\n    d[\"nearest_ally_x\"]=raw[\"left_team\"][min_ind][0]\n    d[\"nearest_ally_y\"]=raw[\"left_team\"][min_ind][1]\n    d[\"nearest_ally_dir1\"]=raw[\"left_team_direction\"][min_ind][0]\n    d[\"nearest_ally_dir2\"]=raw[\"left_team_direction\"][min_ind][1]\n    \n    opp_near_opp_goal_cnt=0\n    min_ind=-1\n    min_dist=10**10\n    opp_pos_x = []\n    for ind in range(len(raw[\"right_team\"])):\n        now_x = raw[\"right_team\"][ind][0]\n        now_y = raw[\"right_team\"][ind][1]\n        if get_dist_opp_goal(now_x,now_y) < ball_dist_goal:\n            opp_near_opp_goal_cnt+=1\n\n        opp_pos_x.append(now_x)\n\n        dist = (player_x-now_x)**2 + (player_y-now_y)**2\n        if dist < min_dist:\n            min_ind=ind\n            min_dist=dist\n    \n    d[\"num_opp_near_opp_goal\"]=opp_near_opp_goal_cnt\n    d[\"nearest_opp_dist_player\"]=min_dist**0.5 \n    d[\"nearest_opp_x\"]=raw[\"right_team\"][min_ind][0]\n    d[\"nearest_opp_y\"]=raw[\"right_team\"][min_ind][1]\n    d[\"nearest_opp_dir1\"]=raw[\"right_team_direction\"][min_ind][0]\n    d[\"nearest_opp_dir2\"]=raw[\"right_team_direction\"][min_ind][1]\n    \n    min_ind=-1\n    min_dist=10**10\n    for ind in range(len(raw[\"right_team\"])):\n        now_x = raw[\"right_team\"][ind][0]\n        now_y = raw[\"right_team\"][ind][1]\n\n        dist = calc_dist(ball[0],ball[1],now_x,now_y)\n\n        if dist < min_dist:\n            min_ind=ind\n            min_dist=dist  \n\n    min_x=raw[\"right_team\"][min_ind][0]\n    min_y=raw[\"right_team\"][min_ind][1]\n    \n    d[\"ball_nearest_opp_dist_ball\"]=min_dist\n    d[\"ball_nearest_opp_dist_player\"]=calc_dist(min_x,min_y,player_x,player_y)\n    d[\"ball_nearest_opp_x\"]=min_x\n    d[\"ball_nearest_opp_y\"]=min_y\n    d[\"ball_nearest_opp_dir1\"]=raw[\"left_team_direction\"][min_ind][0]\n    d[\"ball_nearest_opp_dir2\"]=raw[\"left_team_direction\"][min_ind][1]\n\n    gk_ind = raw[\"right_team_roles\"][0]\n    gk_x = raw[\"right_team\"][gk_ind][0]\n    gk_y = raw[\"right_team\"][gk_ind][1]\n        \n    d[\"opp_keeper_x\"]=gk_x\n    d[\"opp_keeper_y\"]=gk_y\n    d[\"opp_keeper_x_player\"]=player_x - gk_x\n    d[\"opp_keeper_y_player\"]=player_y - gk_y\n    d[\"opp_keeper_dir1\"]=raw[\"right_team_direction\"][gk_ind][0]\n    d[\"opp_keeper_dir2\"]=raw[\"right_team_direction\"][gk_ind][1]\n    \n    opp_pos_x.sort()\n    d[\"offside_line\"]=opp_pos_x[-2]\n    d[\"opp_upper_mean_x\"] = np.mean(opp_pos_x[:len(opp_pos_x)\/\/2])\n    d[\"opp_lower_mean_x\"] = np.mean(opp_pos_x[len(opp_pos_x)\/\/2:])\n    d[\"steps_left\"]=raw[\"steps_left\"]\n    d[\"score\"]=raw[\"score\"][0]-raw[\"score\"][1]\n    \n    d[\"player_pressure_from_opp_x\"],d[\"player_pressure_from_opp_y\"],d[\"player_pressure_abs\"] = pressure_to_xy(player_x,player_y,raw[\"right_team\"])\n    d[\"ball_pressure_from_opp_x\"],d[\"ball_pressure_from_opp_y\"],d[\"ball_pressure_from_opp_abs\"] = pressure_to_xy(ball[0],ball[1],raw[\"right_team\"])\n    d[\"ball_pressure_from_ally_x\"],d[\"ball_pressure_from_ally_y\"],d[\"ball_pressure_from_ally_abs\"] = pressure_to_xy(ball[0],ball[1],raw[\"left_team\"])\n    \n    d[\"player_angle_dir_opp_goal\"]=get_angle(player_x,player_y,1,0,d[\"active_dir1\"],d[\"active_dir2\"])\n    d[\"player_angle_dir_ally_goal\"]=get_angle(player_x,player_y,-1,0,d[\"active_dir1\"],d[\"active_dir2\"])\n    \n    min_ind, score,pass_x,pass_y= get_lowest_pass_score(raw[\"active\"], raw[\"left_team\"], raw[\"left_team_direction\"])\n    \n    d[\"pass_x\"] = pass_x\n    d[\"pass_y\"] = pass_y\n    \n    d[\"pass_score\"] = score\n    \n    p1,p2,d[\"pass_pressure_from_opp_abs\"]  = pressure_to_xy(pass_x,pass_y,raw[\"left_team\"])    \n    p1,p2,d[\"pass_pressure_from_ally_abs\"] = pressure_to_xy(pass_x,pass_y,raw[\"right_team\"])    \n    \n    d[\"pass_dist_from_player\"] = calc_dist(pass_x,pass_y,player_x,player_y)\n    d[\"pass_dist_from_ball\"] = calc_dist(pass_x,pass_y,ball[0],ball[1])\n    \n    d[\"ballx_d_norm\"], d[\"bally_d_norm\"] = normalize(d[\"ballx_d\"],d[\"bally_d\"])\n    d[\"active_dir1_norm\"], d[\"active_dir2_norm\"] = normalize(d[\"active_dir1\"], d[\"active_dir2\"])\n    d[\"ball_10step_x_diff_norm\"], d[\"ball_10step_y_diff_norm\"] = normalize(d[\"ball_10step_x_diff\"], d[\"ball_10step_y_diff\"])\n    d[\"ball_20step_x_diff_norm\"], d[\"ball_20step_y_diff_norm\"] = normalize(d[\"ball_20step_x_diff\"], d[\"ball_20step_y_diff\"])\n    d[\"ball_dir1_norm\"], d[\"ball_dir2_norm\"] = normalize(d[\"ball_dir1\"], d[\"ball_dir2\"])\n    d[\"nearest_ally_dir1_norm\"], d[\"nearest_ally_dir2_norm\"] = normalize(d[\"nearest_ally_dir1\"], d[\"nearest_ally_dir2\"])\n    d[\"nearest_opp_dir1_norm\"], d[\"nearest_opp_dir2_norm\"] = normalize(d[\"nearest_opp_dir1\"], d[\"nearest_opp_dir2\"])\n    d[\"ball_nearest_opp_dir1_norm\"], d[\"ball_nearest_opp_dir2_norm\"] = normalize(d[\"ball_nearest_opp_dir1\"], d[\"ball_nearest_opp_dir2\"])\n    \n    d[\"opp_keeper_x_player_norm\"], d[\"opp_keeper_y_player_norm\"] = normalize(d[\"opp_keeper_x_player\"], d[\"opp_keeper_y_player\"])\n    d[\"opp_keeper_dir1_norm\"], d[\"opp_keeper_dir2_norm\"] = normalize(d[\"opp_keeper_dir1\"], d[\"opp_keeper_dir2\"])\n    \n    d[\"ball_d_theta\"] = my_atan2(d[\"ballx_d_norm\"], d[\"bally_d_norm\"])\n    d[\"active_dir_theta\"] = my_atan2(d[\"active_dir1_norm\"], d[\"active_dir2_norm\"])\n    d[\"ball_10step_theta\"] = my_atan2(d[\"ball_10step_x_diff_norm\"], d[\"ball_10step_y_diff_norm\"])\n    d[\"ball_20step_theta\"] = my_atan2(d[\"ball_20step_x_diff_norm\"], d[\"ball_20step_y_diff_norm\"])\n    d[\"ball_dir_theta\"] = my_atan2( d[\"ball_dir1_norm\"], d[\"ball_dir2_norm\"])\n    d[\"nearest_ally_dir_theta\"] = my_atan2(d[\"nearest_ally_dir1_norm\"], d[\"nearest_ally_dir2_norm\"])\n    d[\"nearest_opp_dir_theta\"] = my_atan2(d[\"nearest_opp_dir1_norm\"], d[\"nearest_opp_dir2_norm\"])\n    d[\"ball_nearest_opp_dir_theta\"] = my_atan2(d[\"ball_nearest_opp_dir1_norm\"], d[\"ball_nearest_opp_dir2_norm\"])\n    d[\"opp_keeper_theta\"] = my_atan2(d[\"opp_keeper_x_player_norm\"], d[\"opp_keeper_y_player_norm\"])\n    d[\"opp_keeper_dir_theta\"] = my_atan2( d[\"opp_keeper_dir1_norm\"], d[\"opp_keeper_dir2_norm\"])\n    \n    d[\"sticky_sprint\"] = raw[\"sticky_actions\"][8]\n    \n    sub_feats=['ball_dist_xy___nearest_opp_dist_player',       'dist_ally_goal___ball_nearest_opp_dist_ball',       'dist_ally_goal___ball_nearest_opp_dist_player',       'ball_nearest_opp_dist_ball___ball_nearest_opp_dist_player',       'ballx___player_x', 'ballx___nearest_opp_x',       'ballx___opp_keeper_x', 'ballx_d___active_dir1',       'ballx_d___ball_dir1', 'ball_10step_x___player_x',       'ball_10step_x___opp_keeper_x_player',       'ball_20step_x___offside_line',       'ball_20step_x___opp_upper_mean_x',       'player_x___ally_lower_mean_x', 'player_x___nearest_opp_x',       'player_x___offside_line', 'active_dir1___ball_dir1',       'active_dir1___nearest_opp_dir1',       'active_dir1___opp_keeper_dir1',       'ball_10step_x_diff___opp_keeper_dir1',       'ball_20step_x_diff___opp_keeper_x',       'ball_dir1___nearest_opp_dir1',       'ball_dir1___ball_nearest_opp_dir1',       'ball_dir1___opp_keeper_dir1',       'ally_offside_line___ally_lower_mean_x',       'ally_upper_mean_x___offside_line',       'ally_upper_mean_x___opp_upper_mean_x',       'ally_lower_mean_x___offside_line',       'ally_lower_mean_x___opp_upper_mean_x',       'opp_keeper_x_player___opp_keeper_dir1',       'offside_line___opp_upper_mean_x', 'bally___player_y',       'bally___nearest_opp_y', 'bally_d___active_dir2',       'bally_d___ball_dir2', 'player_y___nearest_opp_y',       'active_dir2___ball_10step_y_diff',       'active_dir2___opp_keeper_dir2',       'ball_10step_y_diff___opp_keeper_dir2',       'ball_dir2___nearest_opp_dir2',       'ball_dir2___opp_keeper_dir2',       'opp_keeper_y___opp_keeper_y_player']\n    for l in sub_feats:\n        l1,l2 = l.split(\"___\")\n        d[l] = d[l1] - d[l2]\n    \n    return pd.DataFrame([d])   \n\ndef agent(obs):\n    global model\n    \n    raw = obs['players_raw'][0]\n    raw = convert_raw_y(raw)\n    \n    X_df = create_df(raw)\n    y_pred1 = model.predict(X_df,prediction_type=\"Probability\")\n    y_pred_max = np.argmax(y_pred1, axis=1)\n    \n    return [int(y_pred_max[0]+1)]","188658db":"from kaggle_environments import make\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\noutput = env.run([\"\/kaggle_simulations\/agent\/main.py\", \"do_nothing\"])[-1]\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=800, height=600)","867489b9":"!cd \/kaggle_simulations\/agent\/ && tar -czvf \/kaggle\/working\/submit.tar.gz *","df6235f9":"!rm -rf football\n!rm -rf kaggle-environments","2c1327ba":"## create df","b947ee77":"You can see this agent's episode here.  \nhttps:\/\/www.kaggle.com\/c\/google-football\/submissions?dialog=episodes-submission-18036600","5de798cd":"### Team s_toppo's solution\n\nThis Notebook scores around LB 1400 for two weeks(2020\/12\/02).  \nNote: This is not our final\/best model, which is too big to train in Kaggle Notebook. But the overall idea remains the same.\n\nSpecial thanks to SaltyFish.","0a6da737":"## Submit","384ec228":"## CatBoost Train","2d9a9729":"## load json","c8574844":"## Save"}}