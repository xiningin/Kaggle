{"cell_type":{"8248e48e":"code","8d05208d":"code","187dbe4f":"code","69cc3b46":"code","a679591b":"code","7de5fa5d":"code","2c19ff09":"code","7f866ca8":"code","0f5d9181":"code","15e45f36":"code","be01536d":"code","8ec2cc5e":"code","9ed6a68f":"code","48652299":"code","dae19e49":"code","d85a359b":"code","44cea2bb":"code","06e2c2d5":"code","14791587":"code","353c3a03":"code","f0c9868e":"code","6a5a473a":"code","b976eccf":"code","77945fed":"code","90edc113":"code","27f0c875":"code","8c23b047":"code","a278e63f":"code","915c2586":"code","997b4726":"code","b194c729":"code","ae268cba":"code","59ae9720":"code","d76ce60e":"code","1533b2b1":"code","adbaf7aa":"code","87d26bff":"code","0a1c1669":"code","567c1c17":"code","6289c5ec":"code","44d0e0ec":"code","ce9330db":"code","cd9e5aac":"code","a281330e":"code","4ddd604d":"code","42ca9db1":"code","806cb145":"code","8eb4f3da":"code","0708ece7":"code","dbf1bc62":"code","b70c225c":"code","4eff761d":"code","2f62a1e2":"code","f7e1e437":"code","f15e78b3":"code","493b576d":"code","e9babab8":"code","921292ea":"code","c19e67dd":"code","cbcde5b6":"code","d24bbff5":"markdown","077b0069":"markdown","56e9f4a9":"markdown","d097fa05":"markdown","70af15eb":"markdown","58ebccb8":"markdown","2921f35f":"markdown","40fb955e":"markdown","b2903d40":"markdown","874bc74c":"markdown","b19f0b98":"markdown","c84f34b8":"markdown","787b89d9":"markdown","14fb67bd":"markdown","cca549fb":"markdown","9e75c1fd":"markdown","c96b31cb":"markdown","5327566c":"markdown"},"source":{"8248e48e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8d05208d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.cluster import KMeans","187dbe4f":"df = pd.read_csv(\"\/kaggle\/input\/online-retail-customer-clustering\/OnlineRetail.csv\")","69cc3b46":"df.shape","a679591b":"df.info()","7de5fa5d":"df.isnull().sum()","2c19ff09":"df['Country'].value_counts()","7f866ca8":"df['CustomerID'].nunique()","0f5d9181":"df['InvoiceNo'].nunique()","15e45f36":"df.describe()","be01536d":"df = df.dropna()","8ec2cc5e":"df.shape","9ed6a68f":"df['CustomerID'] = df['CustomerID'].astype(str)","48652299":"df['Amount'] = df['UnitPrice'] * df['Quantity']","dae19e49":"df = df.reset_index()","d85a359b":"df.head()","44cea2bb":"df_amount = df.groupby('CustomerID')['Amount'].sum()","06e2c2d5":"df = df.reset_index()","14791587":"df_amount.head()","353c3a03":"df_frequency = df.groupby('CustomerID')['InvoiceNo'].count()","f0c9868e":"df_frequency.head()","6a5a473a":"df_f = pd.merge(df_amount,df_frequency ,how = 'inner', on='CustomerID')","b976eccf":"df_f.head()","77945fed":"df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'],format='%d-%m-%Y %H:%M')","90edc113":"df_max = df['InvoiceDate'].max()\ndf_max","27f0c875":"df['diff'] = df_max - df['InvoiceDate']","8c23b047":"df.head()","a278e63f":"df_diff= df.groupby('CustomerID')['diff'].min()","915c2586":"df_diff.reset_index()\ndf_diff.head()","997b4726":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt","b194c729":"df_final = pd.merge(df_f, df_diff , how = 'inner' , on = 'CustomerID')","ae268cba":"df_final.head()","59ae9720":"df_final.info()","d76ce60e":"df_final = df_final.rename({'InvoiceNo': 'Frequency', 'diff': 'Recency'}, axis=1)","1533b2b1":"df_final.head()","adbaf7aa":"df_final['Recency'] = df_final['Recency'].dt.days","87d26bff":"df_final.head()","0a1c1669":"attributes = ['Amount' , 'Frequency' , 'Recency' ]","567c1c17":"import seaborn as sns\n#sns.set_theme(style=\"whitegrid\")\n#tips = sns.load_dataset(\"tips\")\nax = sns.boxplot(data = df_final[attributes])","6289c5ec":"df_final.nunique().sum()","44d0e0ec":"df_final.shape","ce9330db":"Q1 = df_final.Amount.quantile(0.05)\nQ3 = df_final.Amount.quantile(0.95)\nIQR = Q3 - Q1\ndf_final = df_final[(df_final.Amount >= Q1 - 1.5 * IQR) & (df_final.Amount <= Q3 + 1.5 * IQR) ]\n\nQ1 = df_final.Recency.quantile(0.05)\nQ3 = df_final.Recency.quantile(0.95)\nIQR = Q3 - Q1\ndf_final = df_final[(df_final.Recency >= Q1 - 1.5 * IQR) & (df_final.Recency <= Q3 + 1.5 * IQR) ]\n\nQ1 = df_final.Frequency.quantile(0.05)\nQ3 = df_final.Frequency.quantile(0.95)\nIQR = Q3 - Q1\ndf_final = df_final[(df_final.Frequency >= Q1 - 1.5 * IQR) & (df_final.Frequency <= Q3 + 1.5 * IQR) ]","cd9e5aac":"df_final.shape","a281330e":"df_final.head()","4ddd604d":"from sklearn.preprocessing import StandardScaler\n# define standard scaler\nscaler = StandardScaler()\n# transform data\ndf1 = scaler.fit_transform(df_final)","42ca9db1":"df1.shape","806cb145":"import pandas as pd\ndf_f = pd.DataFrame(df1)\ndf_f.columns = ['Amount' , 'Frequency' , 'Recency']\ndf_f.head","8eb4f3da":"df_f","0708ece7":"\n# defining the kmeans function with initialization as k-means++\nkmeans = KMeans(n_clusters=2, init='k-means++')\n\n# fitting the k means algorithm on scaled data\nkmeans.fit(df_f)","dbf1bc62":"# inertia on the fitted data\nkmeans.inertia_","b70c225c":"# fitting multiple k-means algorithms and storing the values in an empty list\nSSE = []\nfor cluster in range(1,20):\n    kmeans = KMeans(n_jobs = -1, n_clusters = cluster, init='k-means++')\n    kmeans.fit(df_f)\n    SSE.append(kmeans.inertia_)\n\n# converting the results into a dataframe and plotting them\nframe = pd.DataFrame({'Cluster':range(1,20), 'SSE':SSE})\nplt.figure(figsize=(12,6))\nplt.plot(frame['Cluster'], frame['SSE'], marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')","4eff761d":"# k means using 5 clusters and k-means++ initialization\nkmeans = KMeans(n_jobs = -1, n_clusters = 4, init='k-means++')\nkmeans.fit(df_f)\npred = kmeans.predict(df_f)","2f62a1e2":"frame = pd.DataFrame(df_f)\nframe['cluster'] = pred\nframe['cluster'].value_counts()","f7e1e437":"import matplotlib.pyplot as plt","f15e78b3":"pred","493b576d":"df_final['Label'] = pred","e9babab8":"sns.scatterplot(df_final['Amount'] ,df_final['Recency'] , hue = df_final['Label'] , palette = sns.color_palette('hls',4))","921292ea":"sns.scatterplot(df_final['Amount'] ,df_final['Frequency'] , hue = df_final['Label'] , palette = sns.color_palette('hls',4))","c19e67dd":"sns.scatterplot(df_final['Frequency'] ,df_final['Recency'] , hue = df_final['Label'] , palette = sns.color_palette('hls',4))","cbcde5b6":"sns.scatterplot(df_final['Amount'] ,df_final['Frequency'] ,df_final['Recency'] , hue = df_final['Label'])","d24bbff5":"# **Checking the ideal number of clusters using a scree plot**","077b0069":"# **Calculating the recency of each customer**","56e9f4a9":"# **Removing the outliers**","d097fa05":"# **Checking for nulls**","70af15eb":"# **Importing the .csv file**","58ebccb8":"# **DATA EXPLORATION**","2921f35f":"# **Calculating the amount spent by customers**","40fb955e":"# **Checking data for outliers**","b2903d40":"# **Plotting the various clusters taking 2 features at a time**","874bc74c":"# **Scaling the data to get each column on a similar scale**","b19f0b98":"# **Getting the total amount for each customer \"using the group by statement\"**","c84f34b8":"# **Calculating the number of transactions for each customer using count of invoice number**","787b89d9":"# **Plotting Clusters taking all features at a time**","14fb67bd":"# ","cca549fb":"# **Performaing K-Means Clustering**","9e75c1fd":"# **Dropping the nulls**","c96b31cb":"# **Merging to get the final dataset**","5327566c":"# **Steps involved in Clustering**\n1. Importing Libraries\n2. Data Exploration\n3. Data Prepration\n4. Outlier Detection\n5. Clutering"}}