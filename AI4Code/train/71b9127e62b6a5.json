{"cell_type":{"57d5292f":"code","aaabb13c":"code","d707c1a5":"code","54240547":"code","913a14ea":"code","31e06ecd":"code","4d518c49":"code","dc0588ac":"code","7d5bb216":"code","aa60a031":"code","90897dfe":"code","d2b8a10a":"code","9d667806":"code","4a5b5f6f":"code","bcec1195":"code","76ef6da3":"code","a1aff2ea":"code","36058a3d":"code","8ced58a0":"code","539ce407":"code","8774d052":"code","eb889a69":"code","bff74ee4":"code","c5c6fd61":"code","764c6e7a":"code","25f8afd8":"code","1cf8bb0f":"code","752e8ce9":"code","266f4909":"code","e2577109":"code","d706a532":"code","c4cf3ee7":"code","62afaf92":"code","e3059f40":"code","92f9ffd8":"code","ce4894a0":"code","9374125b":"code","573646ef":"code","a76505b2":"code","0b2cf29c":"code","587dd376":"code","ac7a61e7":"code","92658212":"code","0339756a":"code","917b4d52":"code","2db4e7a1":"code","44ac8421":"code","5800292d":"code","de32c1fd":"code","98b29e6c":"code","a07fc7d4":"code","9cb36108":"code","e4778c1c":"code","348b2354":"code","b3e0915e":"code","7ef7bd60":"code","085846fe":"code","c8254fbd":"code","d03b09c9":"code","0c102cf3":"code","17659df3":"code","12cd743e":"code","61070a5c":"code","402be8fc":"markdown","23be26c4":"markdown","2021e310":"markdown","e5b750ed":"markdown","d0ee33a2":"markdown","06c43ced":"markdown","8a1c1f9c":"markdown","958de3cc":"markdown","b634b99e":"markdown","8a2110d3":"markdown","541dc983":"markdown","90b94161":"markdown","e2ead19b":"markdown","e3bf8767":"markdown","26808de7":"markdown","45929fe9":"markdown","eb3b041c":"markdown","28962170":"markdown","4e092bbe":"markdown","9d5d5ae9":"markdown","2be39797":"markdown","d922f160":"markdown","4a3f2336":"markdown","295247bc":"markdown","e8df5166":"markdown","0a12939c":"markdown","08a05729":"markdown","cb7e5861":"markdown","dd75f22d":"markdown","beb81e7d":"markdown","2a73169c":"markdown","191f5d2a":"markdown","3a67ba10":"markdown","350cb9f3":"markdown","029a19e5":"markdown","468c0fa1":"markdown","3f4a4175":"markdown"},"source":{"57d5292f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aaabb13c":"\ndata_1 = pd.read_csv('\/kaggle\/input\/ipl\/matches.csv')\ndata_2 = pd.read_csv('\/kaggle\/input\/ipl\/deliveries.csv') \n","d707c1a5":"data_1.head()","54240547":"data_1.shape","913a14ea":"data_1.isnull().sum()","31e06ecd":"data_1.drop(columns='umpire3',inplace=True)","4d518c49":"data_1.isnull().sum()","dc0588ac":"def nans(df): return df[df.isnull().any(axis=1)]\nnans(data_1)","7d5bb216":"nans(data_1)","aa60a031":"data_1.city.fillna('Dubai',inplace=True)","90897dfe":"data_1.umpire1.fillna('Anonymous',inplace=True)\ndata_1.umpire2.fillna('Anonymous',inplace=True)","d2b8a10a":"data_1.isnull().sum()","9d667806":"nans(data_1)","4a5b5f6f":"data_1.winner.fillna('Match Abandoned',inplace=True)\ndata_1.player_of_match.fillna('Match Abandoned',inplace=True)","bcec1195":"data_1.isnull().sum()","76ef6da3":"data_1.info()","a1aff2ea":"data_1['date'] = pd.to_datetime(data_1['date'])","36058a3d":"type(data_1['date'].iloc[0])","8ced58a0":"data_1['team1'].unique()","539ce407":"data_1.replace('Rising Pune Supergiant','Rising Pune Supergiants',inplace=True)","8774d052":"data_1['team1'].unique()","eb889a69":"print('seasons:', data_1.season.unique())","bff74ee4":"print('Cities:', data_1.city.unique())","c5c6fd61":"print(data_1.result.unique())","764c6e7a":"#Number of Tie matches\n\nprint(\"No. of Tie matches: \"+str(data_1[data_1.result=='tie'].id.count()))","25f8afd8":"#No result matches\n\nprint(\"No. of no result matches: \"+str(data_1[data_1.result=='no result'].id.count()))","1cf8bb0f":"#matches per season\ndata_1.groupby('season')['season'].count()","752e8ce9":"sns.countplot(x='season', data=data_1)\nplt.show()","266f4909":"plt.figure(figsize=(12,6))\nsns.countplot(x='venue', data=data_1)\nplt.xticks(rotation='vertical')\nplt.show()","e2577109":"temp = pd.melt(data_1, id_vars=['id','season'], value_vars=['team1', 'team2'])\n\nplt.figure(figsize=(12,6))\nsns.countplot(x='value', data=temp)\nplt.xticks(rotation='vertical')\nplt.show()","d706a532":"plt.subplots(figsize=(15,9))\ntoss = data_1.toss_decision.value_counts()\nlabels = (np.array(toss.index))\nsizes = (np.array((toss \/ toss.sum())*100))\ncolors = ['lightgreen', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss decision percentage\")\nplt.show()","c4cf3ee7":"#no of matches where toss winner is the match winner\nprint(\"No of matches where toss winner is match winner: \"+str(data_1[(data_1.result == 'normal') & (data_1.toss_winner == data_1.winner)].id.count()))\nprint(\"No of matches where toss winner is not match winner: \"+str(data_1[(data_1.result == 'normal') & (data_1.toss_winner != data_1.winner)].id.count()))","62afaf92":"plt.subplots(figsize=(15,9))\ndata_1['toss_winner_is_winner'] = 'no'\ndata_1['toss_winner_is_winner'].loc[data_1.toss_winner == data_1.winner] = 'yes'\nresult = data_1.toss_winner_is_winner.value_counts()\n\nlabels = (np.array(result.index))\nsizes = (np.array((result \/ result.sum())*100))\ncolors = ['lightgreen', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.2f%%', shadow=True, startangle=90)\nplt.title(\"Toss winner is match winner\")\nplt.show()","e3059f40":"plt.subplots(figsize=(12,8))\nax=data_1['toss_winner'].value_counts().plot.bar(width=0.9,color=sns.color_palette('Blues_d',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.show()","92f9ffd8":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='toss_decision', data=data_1)\nplt.xticks(rotation='vertical')\nplt.show()","ce4894a0":"data_1[\"field_win\"] = \"win\"\ndata_1[\"field_win\"].loc[data_1['win_by_wickets']==0] = \"loss\"\nplt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='field_win', data=data_1)\nplt.xticks(rotation='vertical')\nplt.show()","9374125b":"data_1.groupby(\"winner\")['winner'].count().plot(figsize=(12,12),kind='pie',autopct='%1.1f%%',shadow=False)\n#data_1.groupby(\"winner\")['winner'].count().plot(figsize=(12,12),kind='pie',autopct='%1.1f%%',shadow=True)","573646ef":"data_1.groupby('winner')['winner'].agg(['count']).sort_values('count').reset_index().plot(x='winner',y='count',kind='barh')","a76505b2":"plt.figure(figsize=(12,6))\nsns.countplot(x='winner', data=data_1)\nplt.xticks(rotation='vertical')\nplt.show()","0b2cf29c":"df1 = pd.DataFrame({\"count\":data_1.groupby('player_of_match')['player_of_match'].count()}).reset_index()\n","587dd376":"df1","ac7a61e7":"#sorting the values\ndf1 = df1.sort_values('count',ascending=False)","92658212":"df1[0:10].plot.barh(figsize=(20,10),x='player_of_match',y='count',xticks=[2,4,6,8,10,12,14,16,18,20])","0339756a":"matches_played_KKR=data_1[(data_1['team1']=='Kolkata Knight Riders') | (data_1['team2']=='Kolkata Knight Riders')]\nmatches_played_MI=data_1[(data_1['team1']=='Mumbai Indians') | (data_1['team2']=='Mumbai Indians')]\nmatches_played_KXP=data_1[(data_1['team1']=='Kings XI Punjab') | (data_1['team2']=='Kings XI Punjab')]\nmatches_played_CSK=data_1[(data_1['team1']=='Chennai Super Kings') | (data_1['team2']=='Chennai Super Kings')]\nmatches_played_DC=data_1[(data_1['team1']=='Deccan Chargers') | (data_1['team2']=='Deccan Chargers')]\nmatches_played_DD=data_1[(data_1['team1']=='Delhi Daredevils') | (data_1['team2']=='Delhi Daredevils')]\nmatches_played_RCB=data_1[(data_1['team1']=='Royal Challengers Bangalore') | (data_1['team2']=='Royal Challengers Bangalore')]\nmatches_played_KT=data_1[(data_1['team1']=='Kochi Tuskers Kerala') | (data_1['team2']=='Kochi Tuskers Kerala')]\nmatches_played_SH=data_1[(data_1['team1']=='Sunrisers Hyderabad') | (data_1['team2']=='Sunrisers Hyderabad')]\nmatches_played_RPS=data_1[(data_1['team1']=='Rising Pune Supergiants') | (data_1['team2']=='Rising Pune Supergiants')]\nmatches_played_RR=data_1[(data_1['team1']=='Rajasthan Royals') | (data_1['team2']=='Rajasthan Royals')]\n\nA=matches_played_KKR['id'].count()\nB=matches_played_MI['id'].count()\nC=matches_played_KXP['id'].count()\nD=matches_played_CSK['id'].count()\nE=matches_played_DC['id'].count()\nF=matches_played_DD['id'].count()\nG=matches_played_RCB['id'].count()\nH=matches_played_KT['id'].count()\nI=matches_played_SH['id'].count()\nJ=matches_played_RPS['id'].count()\nK=matches_played_RR['id'].count()\n","917b4d52":"matches_won_KKR=data_1[data_1['winner']=='Kolkata Knight Riders']\nmatches_won_MI=data_1[data_1['winner']=='Mumbai Indians']\nmatches_won_KXP=data_1[data_1['winner']=='Kings XI Punjab']\nmatches_won_CSK=data_1[data_1['winner']=='Chennai Super Kings']\nmatches_won_DC=data_1[data_1['winner']=='Deccan Chargers']\nmatches_won_DD=data_1[data_1['winner']=='Delhi Daredevils']\nmatches_won_RCB=data_1[data_1['winner']=='Royal Challengers Bangalore']\nmatches_won_KT=data_1[data_1['winner']=='Kochi Tuskers Kerala']\nmatches_won_SH=data_1[data_1['winner']=='Sunrisers Hyderabad']\nmatches_won_RPS=data_1[data_1['winner']=='Rising Pune Supergiants']\nmatches_won_RR=data_1[data_1['winner']=='Rajasthan Royals']\n\n\nO=matches_won_KKR['id'].count()\nP=matches_won_MI['id'].count()\nQ=matches_won_KXP['id'].count()\nR=matches_won_CSK['id'].count()\nS=matches_won_DC['id'].count()\nT=matches_won_DD['id'].count()\nU=matches_won_RCB['id'].count()\nV=matches_won_KT['id'].count()\nW=matches_won_SH['id'].count()\nX=matches_won_RPS['id'].count()\nY=matches_won_RR['id'].count()\n\n","2db4e7a1":"n_bins = 11\nind = np.arange(n_bins)\nwidth = 0.50\n\n\nmatches_played=[A,B,C,D,E,F,G,H,I,J,K]\nmatches_won=[O,P,Q,R,S,T,U,V,W,X,Y]\n\n#matches_played.sort()\n#matches_won.sort()\n","44ac8421":"plt.figure(figsize=(10,10))\n\np1 = plt.bar(ind, matches_played, width, color='LightSkyBlue')\np2 = plt.bar(ind, matches_won, width, color='lightgreen')\n\nplt.ylabel('Number of Matches')\nplt.xlabel('IPL teams')\nplt.title('Overall performance of the team')\nplt.xticks(ind + width\/2., ('KKR', 'MI', 'KXP', 'CSK', 'DC', 'DD', 'RCB', 'KT', 'SH', 'RPS', 'RR'))\nplt.yticks(np.arange(0, 200, 5))\nplt.legend((p1[0], p2[0]), ('matches_played', 'matches_won'))","5800292d":"ump = pd.melt(data_1, id_vars=['id'], value_vars=['umpire1', 'umpire2'])\n\nump = ump.value.value_counts()[:10]\nlabels = np.array(ump.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(ump), width=width, color='lightblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Umpires\")\nplt.show()","de32c1fd":"data_2.head()","98b29e6c":"data_2.shape","a07fc7d4":"data_2.isnull().sum()","9cb36108":"df_bats = data_2[data_2.batsman == 'MS Dhoni']\ndf_bats.head()","e4778c1c":"df_bats.groupby('match_id')['batsman_runs'].sum().plot(figsize=(20,10),kind = 'line')\n","348b2354":"data_2[data_2.player_dismissed == 'MS Dhoni'].groupby('dismissal_kind')['dismissal_kind'].count().plot(kind='bar')","b3e0915e":"data_2[data_2.player_dismissed == 'MS Dhoni'].groupby('bowler')['bowler'].count().plot(figsize=(20,10),kind='bar')","7ef7bd60":"df1 = pd.DataFrame({'wickets':data_2[data_2.player_dismissed.notna()].groupby('bowler')['bowler'].count()}).reset_index()\ndf1= df1.sort_values('wickets',ascending=False)\nprint(df1[0:10])\n","085846fe":"df1[0:10].groupby('bowler')['wickets'].sum().plot(kind='barh',figsize=(20,10))\n","c8254fbd":"data_2[data_2.bowler == 'SL Malinga'].groupby('dismissal_kind')['dismissal_kind'].count().plot(kind='bar')","d03b09c9":"\nmaximum_runs = data_2.groupby(['batsman'])['batsman_runs'].sum()\nmaximum_runs\nmaximum_runs.sort_values(ascending = False,inplace=True)\n","0c102cf3":"plt.figure(figsize=(8,10))\nmaximum_runs[:10].plot(x= 'bowler', y = 'runs', kind = 'bar', colormap = 'Pastel2')\nplt.xlabel('Batsmen')\nplt.ylabel('Most Runs in IPL')","17659df3":"plt.figure(figsize=(13,7))\nax=sns.countplot(data_2.dismissal_kind)\nplt.xticks(rotation=90)\n","12cd743e":"overs, number = np.unique(np.concatenate(data_2.groupby(['match_id','inning'])['over'].unique().values), return_counts=True)\naverage_runs_in_each_over = ((data_2.groupby(['over'])['total_runs'].sum())\/(number)).round(2)","61070a5c":"plt.figure(figsize=(15,5))\nsns.set_style(\"whitegrid\")\nax = sns.barplot(x=average_runs_in_each_over.index,y=average_runs_in_each_over.values,palette='Blues')\nax.set_xlabel(\"Overs\").set_size(20)\nax.set_ylabel(\"Runs\").set_size(20)\nax.set_title(\"Average runs in each over\").set_size(20)","402be8fc":"### Most common dismissals in IPL","23be26c4":"# Exploratory Data Analysis","2021e310":"###  Number of times each umpire appeared","e5b750ed":"### Toss decision made in each season","d0ee33a2":"#### 'player_dismissed' 'dismissal_kind' and 'fielder' have so many Nan values, it means the player was not out for that particular ball.\n#### So we can neglect them.","06c43ced":"### Average Runs in Each Over","8a1c1f9c":"### Top ten wickets takers\n\n","958de3cc":"### No of matches played in each season of IPL","b634b99e":"### Maximum toss winners","8a2110d3":"### Number of wins by second batting teams(season-wise)","541dc983":"### Results after winning the toss","90b94161":"   #### Fill 'umpire2' and 'umpire2' Nan values with 'Anonymous'","e2ead19b":"### Date is in object type, we change it to datetime format","e3bf8767":"### IPL Seasons","26808de7":"### We can fill all cities having Nan values with 'Dubai' as their venue is 'Dubai International Cricket Stadium'","45929fe9":"### Type of results","eb3b041c":"### Graph of runs scored in each match by individual player","28962170":"### Number of matches played in each venue","4e092bbe":"### Number of matches played by each team","9d5d5ae9":"### Comparison of different dismissal types by a individual bowler","2be39797":"### Toss decision","d922f160":"### How many times did each bowler acquire an individual batsman","4a3f2336":"####  We know that \"Rising Pune Supergiants\" and \"Rising Pune Supergiant\" are same, just 's' is missing in second one.\n#### We will replace all \"Rising Pune Supergiant\" as \"Rising Pune Supergiants\"","295247bc":"#### We can drop 'umpire3' column as it has all Nan values","e8df5166":"### See all rows which are having Nan values","0a12939c":"## Percentage of match wins by team","08a05729":"### Top ten players who won man of the match most no. of times","cb7e5861":"### Number of matches won by each team","dd75f22d":"### Most runs by a batsman in IPL","beb81e7d":"# Data cleaning","2a73169c":"# Analysing the dataset-1 (matches.csv)","191f5d2a":"# Analysis of Dataset-2 (deliveries.csv)","3a67ba10":"#### We can see that there are no 'winners' and 'players of the matches' as 'result' has 'no result', it means match maybe abandoned due to rain\n#### So, we will fill all Nan values with 'Match Abandoned' in this case..","350cb9f3":"## overall performance of each team","029a19e5":"### Cities where IPL matches were held","468c0fa1":"## Dataframe with single players data","3f4a4175":"### Comparison of different types of dismissals of a single batsman\n\n"}}