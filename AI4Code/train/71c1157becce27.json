{"cell_type":{"273319e1":"code","648d8c87":"code","0da11234":"code","a21e8937":"code","418bb29b":"code","b33c8561":"code","05196261":"code","123a24f6":"code","fa5333ff":"code","30b97bb9":"code","0a9a8df5":"code","6aa92eac":"code","ef975bf4":"markdown","842a3c81":"markdown","770d4d89":"markdown","ad22c151":"markdown","856e06f3":"markdown","7fa5d469":"markdown"},"source":{"273319e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","648d8c87":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","0da11234":"\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\ntrain_data = train.loc[:, \"pixel0\":]\ntrain_label= train.loc[:, \"label\"]\n\ntrain_data = np.array(train_data)\n\ntrain_label = tf.keras.utils.to_categorical(train_label, num_classes=10, dtype='float32')\n\n\ntest_data = test.loc[:, \"pixel0\":]\ntest_data = np.array(test_data)\n\n\ntrain_data = train_data.reshape(train_data.shape[0], 28, 28, 1)\ntest_data  = test_data.reshape(test_data.shape[0],28,28,1)\n\ntrain_data = train_data\/255.0\ntest_data  = test_data\/255.0\n\ntrain_data= tf.keras.layers.ZeroPadding2D(padding=50)(train_data)\ntest_data=  tf.keras.layers.ZeroPadding2D(padding=50)(test_data)\n\n#I needed to pad the images since the inception model can't accept images with dimensions less than (75*75)\n\n\n\n\n# train_datagen = ImageDataGenerator.flow_from_directory(directory=\"\/kaggle\/input\/digit-recognizer\/train.csv\",\n#     target_size=(150, 150),\n#     color_mode=\"grey\",\n#     classes=10,\n#     class_mode=\"categorical\",\n#     shuffle=True,\n#     save_format=\"png\",\n#     interpolation=\"nearest\",\n# )\nprint(train_data.shape)\nprint(test_data.shape)","a21e8937":"from tensorflow.keras import layers,Input\nfrom tensorflow.keras import Model\nfrom tensorflow import keras\nfrom keras.preprocessing.image import *\nfrom matplotlib import pyplot\nimport os\n","418bb29b":"   \npre_trained_model = tf.keras.applications.InceptionV3(\n    include_top=False,\n    weights=None,\n    input_tensor=Input(shape=(128,128, 1))\n)\n\n\n#Freezing the layers in order to prevent the framework from training the base model\nfor layer in pre_trained_model.layers:\n    layer.trainable = False\n\npre_trained_model.summary()\n\nlast_layer = pre_trained_model.get_layer('mixed7')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output\n","b33c8561":"from tensorflow.keras.optimizers import RMSprop\n\n# Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\n# Add a fully connected layer with 1,024 hidden units and ReLU activation\nx = layers.Dense(1024, activation='relu')(x)\nx = layers.Dense(1024, activation= 'elu')(x)\n# Add a dropout rate of 0.2\nx = layers.Dropout(0.2)(x)                  \n# Add a final sigmoid layer for classification\nx = layers.Dense  (10, activation='softmax')(x)           \n\nmodel = Model( pre_trained_model.input, x) \n\nmodel.compile(optimizer = RMSprop(lr=0.0001), \n              loss = 'categorical_crossentropy', \n              metrics = ['accuracy'])","05196261":"# train_datagen = ImageDataGenerator(\n#                                    rotation_range = 40,\n#                                    width_shift_range = 0.2,\n#                                    height_shift_range = 0.2,\n#                                    shear_range = 0.2,\n#                                    zoom_range = 0.2,\n#                                    horizontal_flip = True)\n\n","123a24f6":"history = model.fit(train_data,train_label,epochs=200,batch_size = 32)","fa5333ff":"model.save('mymodel.h5')","30b97bb9":"%matplotlib inline\nimport matplotlib.pyplot as plt\nacc = history.history['accuracy']\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.title('Training accuracy')\nplt.legend()\nplt.figure()\n\nloss = history.history['loss']\nplt.plot(epochs, loss, 'b', label='Training Loss')\nplt.title('Training loss')\nplt.legend()\n\nplt.show()","0a9a8df5":"history = model.fit(train_data,train_label,epochs=20,batch_size = 64)","6aa92eac":"predictions = model.predict(test_data)\n\nprediction = []\n\nfor i in predictions:\n    prediction.append(np.argmax(i))\n\n    \nsubmission =  pd.DataFrame({\n        \"ImageId\": test.index+1,\n        \"Label\": prediction\n    })\n\nsubmission.to_csv('submission5.csv', index=False)","ef975bf4":"***Actually the inception model was inspired by the concept of the inception movie by Nolan, which we have multiple dreams at same time , and we went from dream 1 to 2..etc*** ^_^","842a3c81":"***Loading Data and First Stage of pre-processing***","770d4d89":"***It is a huge model so we should save the model in order not to train it again from beginning***","ad22c151":"***Using Transfer learning with image Augmentation in order to prevent overfitting***","856e06f3":"![a88.jpg](attachment:a88.jpg)","7fa5d469":"***We will use inception model***"}}