{"cell_type":{"313ef422":"code","181209b4":"code","32c31e49":"code","b4562c10":"code","49346ccc":"code","9bb9e5f1":"code","5b0067ab":"code","b6625060":"code","c7cea70d":"markdown","021b8735":"markdown","70df7f25":"markdown"},"source":{"313ef422":"import pandas as pd\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\n","181209b4":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')","32c31e49":"train_num=train.select_dtypes(['int64','float64'])\ntest_num=test.select_dtypes(['int64','float64'])","b4562c10":"train_num.head()","49346ccc":"y = train_num.revenue        \ntrain_num.drop(['revenue'], axis=1, inplace=True)","9bb9e5f1":"my_pipeline = Pipeline(steps=[\n    ('preprocessor', SimpleImputer(strategy='mean')),\n    ('model', RandomForestRegressor(n_estimators=200, random_state=0))\n])\n","5b0067ab":"# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline, train_num, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"Average MAE score:\", scores.mean())","b6625060":"my_pipeline.fit(train_num,y)\n\npreds=my_pipeline.predict(test_num)\n\noutput = pd.DataFrame({'Id': test_num.index,\n                       'revenue': preds})\noutput.to_csv('submission.csv', index=False)","c7cea70d":"# Test on Numeric Columns only","021b8735":"## Viewing Numeric Data","70df7f25":"## Extracting the Target Column"}}