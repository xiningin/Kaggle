{"cell_type":{"73f3de28":"code","6353d611":"code","3b901bb6":"code","10fa4a23":"code","017800ce":"code","8cb01d2a":"code","61751672":"code","4903aae3":"code","146b94e9":"code","500682ba":"code","91a59cd0":"code","f4deb2fe":"code","a1423f52":"code","b44b3570":"code","2d6a8a74":"code","3e01cb07":"code","ccd576f8":"markdown","29cd92fe":"markdown","9579a4e1":"markdown","9420f78c":"markdown","8d1dc3bb":"markdown","9b533e4d":"markdown","44019b9d":"markdown"},"source":{"73f3de28":"import os\nprint(os.listdir('..\/input\/fork-of-efficientnetb3-regression-keras-2'))\nprint(os.listdir('..\/input\/aptos-trained-weights'))","6353d611":"import sys\nimport json\nimport math\nimport os\nimport subprocess\nimport time\nimport gc\n\n!pip install -U '..\/input\/install\/efficientnet-0.0.3-py2.py3-none-any.whl'","3b901bb6":"import cv2\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.activations import elu\nfrom efficientnet import EfficientNetB4\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, load_model\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nfrom tqdm import tqdm\nprint(os.listdir('..\/input'))","10fa4a23":"HEIGHT = 256\nWIDTH = 256\n# Optimized Coefficients for regression\nCOEFF = [0.52022015, 1.46022145, 2.49058373, 3.30146459]","017800ce":"def crop_image_from_gray(img,tol=7):\n    if img.ndim ==2:\n        mask = img>tol\n        return img[np.ix_(mask.any(1),mask.any(0))]\n    elif img.ndim==3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        mask = gray_img>tol\n        \n        check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0]\n        if (check_shape == 0): # image is too dark so that we crop out everything,\n            return img # return original image\n        else:\n            img1=img[:,:,0][np.ix_(mask.any(1),mask.any(0))]\n            img2=img[:,:,1][np.ix_(mask.any(1),mask.any(0))]\n            img3=img[:,:,2][np.ix_(mask.any(1),mask.any(0))]\n            img = np.stack([img1,img2,img3],axis=-1)\n        return img\n    \ndef circle_crop(img):   \n    img = crop_image_from_gray(img)    \n    height, width, depth = img.shape    \n    \n    x = int(width\/2)\n    y = int(height\/2)\n    r = np.amin((x,y))\n    \n    circle_img = np.zeros((height, width), np.uint8)\n    cv2.circle(circle_img, (x,y), int(r), 1, thickness=-1)\n    img = cv2.bitwise_and(img, img, mask=circle_img)\n    img = crop_image_from_gray(img)\n    \n    return img \n\ndef preprocess_image(img):\n    #img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    #img = crop_image_from_gray(img)\n    #img = cv2.resize(img, (WIDTH,HEIGHT))\n    img = cv2.addWeighted(img,4,cv2.GaussianBlur(img, (0,0), 10) ,-4 ,128)\n    \n    return img","8cb01d2a":"def build_model():\n    efficientnetb3 = EfficientNetB4(\n        weights=None,\n        input_shape=(HEIGHT,WIDTH,3),\n        include_top=False\n                   )\n\n    model = Sequential()\n    model.add(efficientnetb3)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.BatchNormalization())\n    model.add(layers.Dense(5, activation=elu))\n    model.add(layers.Dense(1, activation=\"linear\"))\n    \n    return model","61751672":"model1 = build_model()\nmodel1.load_weights('..\/input\/fork-of-efficientnetb3-regression-keras-2\/val_model.h5')\n#model1.load_weights('..\/input\/aptos-trained-weights\/val_model_v30.h5')\nmodel1.summary()","4903aae3":"#model2 = build_model()\n#model2.load_weights('..\/input\/fork-of-efficientnetb3-regression-keras-2\/effnet_modelB3.h5')\n#model2.summary()","146b94e9":"TEST_IMG_PATH = '..\/input\/aptos2019-blindness-detection\/test_images\/'\ntest_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\nprint(test_df.shape)\n\noriginal_names = test_df['id_code'].values\ntest_df['id_code'] = test_df['id_code'] + \".png\"\ntest_df['diagnosis'] = np.zeros(test_df.shape[0])\ndisplay(test_df.head())","500682ba":"tta_steps = 10\npredictions1 = []\n#predictions2 = []\n\nfor i in tqdm(range(tta_steps)):\n    test_generator = ImageDataGenerator(rescale=1.\/255,\n                                    #samplewise_center= True,\n                                    horizontal_flip=True,\n                                    rotation_range= 90, \n                                    vertical_flip=True,\n                                    brightness_range=(0.5,1.5),\n                                    zoom_range= 0.2,\n                                    fill_mode='constant',\n                                    preprocessing_function=preprocess_image,\n                                    cval = 0).flow_from_dataframe(test_df, \n                                                    x_col='id_code', \n                                                    y_col = 'diagnosis',\n                                                    directory = TEST_IMG_PATH,\n                                                    target_size=(WIDTH, HEIGHT),\n                                                    batch_size=1,\n                                                    class_mode='other',\n                                                    shuffle = False)\n    \n    preds1 = model1.predict_generator(test_generator, steps = test_df.shape[0])\n    predictions1.append(preds1)\n\n    del test_generator\n    gc.collect()\n    \npred_test1 = np.mean(predictions1, axis=0)\n","91a59cd0":"y_test = pred_test1","f4deb2fe":"\nfor i, pred in enumerate(y_test):\n    if pred < COEFF[0]:\n        y_test[i] = 0\n    elif pred >= COEFF[0] and pred < COEFF[1]:\n        y_test[i] = 1\n    elif pred >= COEFF[1] and pred < COEFF[2]:\n        y_test[i] = 2\n    elif pred >= COEFF[2] and pred < COEFF[3]:\n        y_test[i] = 3\n    else:\n        y_test[i] = 4","a1423f52":"test_df['diagnosis'] = y_test.astype(int)\ntest_df['id_code'] = test_df['id_code'].str.replace(r'.png$', '')\ntest_df.head()","b44b3570":"leaks = pd.read_csv('..\/input\/aptos-trained-weights\/leaks.csv', dtype=  {'diagnosis': np.int32})\ncodes = leaks['id_code'].values\ndiagnosis = leaks['diagnosis'].values\nfor i in range(codes.shape[0]):\n    test_df.loc[test_df['id_code'] == codes[i], 'diagnosis'] = int(diagnosis[i])","2d6a8a74":"test_df.to_csv('submission.csv',index=False)\nprint(round(test_df.diagnosis.value_counts()\/len(test_df)*100,4))","3e01cb07":"test_df.head()","ccd576f8":"### Predict Test Labels","29cd92fe":"### Build Convolutional Neural Network and load its weights","9579a4e1":"### Preprocess functions for images","9420f78c":"# Inference Kernel\nThis is the Inference Kernel of https:\/\/www.kaggle.com\/fanconic\/fork-of-efficientnetb3-regression-keras-2, version 25","8d1dc3bb":"### Constants","9b533e4d":"### Postprocess Leaks","44019b9d":"### Load test data set"}}