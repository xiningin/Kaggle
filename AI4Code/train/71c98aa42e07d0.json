{"cell_type":{"389f4f51":"code","a11af57f":"code","b9295f14":"code","56e625bc":"code","b4896c2f":"code","0293156a":"code","14fec012":"code","d9e37a0a":"code","81bbbf9f":"code","d5917397":"markdown","a4ba03e8":"markdown","490ae197":"markdown","a543460c":"markdown","50e0b4a0":"markdown","f125dd13":"markdown","29db9d07":"markdown","fdabacf5":"markdown","7c946f2c":"markdown"},"source":{"389f4f51":"def plot(X):# plot\n    plt.scatter(X[:, 0], X[:, 1])\n    plt.xlabel(\"Feature 0\")\n    plt.ylabel(\"Feature 1\")\n    plt.show()\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing","a11af57f":"# generate some random cluster data\nX, y = make_blobs(random_state=170, n_samples=500, centers = 5)\nrng = np.random.RandomState(74)\n# transform the data to be stretched\ntransformation = rng.normal(size=(2, 2))\nX = np.dot(X, transformation)\n\nplot(X)","b9295f14":"outliers = 30 * (np.random.RandomState(42).rand(100, 2) ) - 15.0\nX = np.concatenate([X, outliers])\ny = np.concatenate([y, [-1]*len(outliers)])\nplot(X)","56e625bc":"# cluster the data into five clusters\nkmeans = KMeans(n_clusters=5)\nkmeans.fit(X)\nkmeans_clusters = kmeans.predict(X)\n# plot the cluster assignments and cluster centers\nplt.scatter(X[:, 0], X[:, 1], c=kmeans_clusters, cmap=\"plasma\")\nplt.scatter(kmeans.cluster_centers_[:, 0],   \n            kmeans.cluster_centers_[:, 1],\n            marker='^', \n            c=[0, 1, 2, 3, 4], \n            s=100, \n            linewidth=2,\n            cmap=\"plasma\")\nplt.xlabel(\"Feature 0\")\nplt.ylabel(\"Feature 1\")\n","b4896c2f":"MIN_PTS=50\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n# cluster the data into five clusters\ndbscan = DBSCAN(eps=0.2, min_samples = MIN_PTS)\ndbscan_clusters = dbscan.fit_predict(X_scaled)\n# plot the cluster assignments\nplt.scatter(X[:, 0], X[:, 1], c=dbscan_clusters, cmap=\"plasma\")\nplt.xlabel(\"Feature 0\")\nplt.ylabel(\"Feature 1\")\nprint(set(dbscan_clusters))","0293156a":"print('num of classified noise instances:',len([x for x in dbscan.labels_ if x==-1]))\nprint('num of classified regular instances:',len([x for x in dbscan.labels_ if x!=-1]))\nprint('Estimated number of clusters: %d' % len(set(dbscan.labels_) - set([-1])))","14fec012":"from sklearn.neighbors import NearestNeighbors\nfrom scipy.signal import savgol_filter\n\nneigh = NearestNeighbors(n_neighbors=MIN_PTS)\nnbrs = neigh.fit(X)\ndistances, indices = nbrs.kneighbors(X)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\ndistances = savgol_filter(distances, 21, 1) # Smooth the data\nplt.plot(distances)\n","d9e37a0a":"from sklearn.cluster import OPTICS\nclustering_optics = OPTICS(min_samples=50).fit(X)\noptics_clusters = clustering_optics.labels_\nplt.scatter(X[:, 0], X[:, 1], c=optics_clusters, cmap=\"plasma\")\nplt.xlabel(\"Feature 0\")\nplt.ylabel(\"Feature 1\")\nprint(set(optics_clusters))","81bbbf9f":"\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics.cluster import adjusted_rand_score\n#k-means performance:\nprint(\"K means ARI = %0.3f\" % (adjusted_rand_score(y, kmeans_clusters)))\nprint(\"DBSCAN ARI = %0.3f\" % (adjusted_rand_score(y, dbscan_clusters)))\nprint(\"OPTICS ARI = %0.3f\" % (adjusted_rand_score(y, optics_clusters)))\nprint('K means silhouette_score %0.3f' % (silhouette_score(X,kmeans_clusters)))\nprint('DBSCAN silhouette_score %0.3f' % (silhouette_score(X,dbscan_clusters)))\nprint('OPTICS silhouette_score %0.3f' % (silhouette_score(X,optics_clusters)))\n","d5917397":"# Lets try the elbow method (k-distance):","a4ba03e8":"# Add noise","490ae197":"# Evaluation\nWhat happens when you use the wrong evaluation metric: silhouette and dbscan.","a543460c":"# DBSCAN","50e0b4a0":"# OPTICS","f125dd13":"# Kmeans","29db9d07":"# DBSCAN\n\nOriginal code was taken from those sources:\n\nhttps:\/\/towardsdatascience.com\/dbscan-clustering-for-data-shapes-k-means-cant-handle-well-in-python-6be89af4e6ea","fdabacf5":"# Go back to slides","7c946f2c":"# Go back to slides!"}}