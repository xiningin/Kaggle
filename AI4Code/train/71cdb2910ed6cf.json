{"cell_type":{"5646d083":"code","ba4c28bd":"code","0c9d7aff":"code","778ef236":"code","e824d0b7":"code","0d2163cc":"code","53b42d01":"code","838b7f52":"code","c545b4b7":"code","475d87ed":"code","cd6d9241":"code","cfe5fcc8":"code","913ff08f":"code","f3760b31":"code","1b1e0441":"code","15cf4e24":"code","e5262d51":"code","0dd595ab":"code","256c9ef1":"code","2e44c1c0":"code","f961ef1c":"code","6b0abda2":"code","3dbfa4fe":"code","666cdc01":"code","10a045d8":"code","c73ac81e":"code","15207d88":"code","3d8c2389":"code","cfb513af":"markdown","ff2283d3":"markdown","c1c638c8":"markdown","1a332669":"markdown","fe3f1475":"markdown","e9ecf99f":"markdown","f4fff07c":"markdown","899c4c18":"markdown","ae9c5a76":"markdown","0a643f96":"markdown","7d0771b0":"markdown","e38f9ca0":"markdown","2e83bef6":"markdown","11541de0":"markdown","af42fa84":"markdown","0b3adf7a":"markdown","7efe59ad":"markdown","8b8fcb62":"markdown","fb6a3807":"markdown","30b71cb1":"markdown","bce342e3":"markdown","b5537cb2":"markdown","4bbdb2c4":"markdown","bf457355":"markdown","47eabb6e":"markdown","31f7073e":"markdown","8c03f314":"markdown","23cf3c0b":"markdown","61314fe2":"markdown","a7dd69f1":"markdown","9775cc79":"markdown","afd66145":"markdown","493ca710":"markdown","a82c0689":"markdown"},"source":{"5646d083":"import pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","ba4c28bd":"df = pd.read_csv('..\/input\/telecom-users-dataset\/telecom_users.csv')\n\ndf.head()","0c9d7aff":"df.columns","778ef236":"headers = [\"Unnamed\", \"Customer ID\", \"Gender\", \"Senior Citizen\", \"Partner\", \"Dependents\", \"Tenure\", \"Phone Service\", \n           \"Multiple Lines\", \"Internet Service\", \"Online Security\", \"Online Backup\", \"Device Protection\", \"Tech Support\",\n           \"Streaming TV\", \"Streaming Movies\", \"Contract\", \"Paperless Billing\", \"Payment Method\", \"Monthly Charges\", \n           \"Total Charges\", \"Churn\"]\n\ndf.columns = headers\n\ndf.drop(labels=[\"Unnamed\",\"Customer ID\"], axis=1, inplace=True, errors='raise')\n\ndf.head()","e824d0b7":"df.dtypes","0d2163cc":"df[\"Total Charges\"] = df[\"Total Charges\"].astype(\"float64\", errors='raise')","53b42d01":"df[\"Senior Citizen\"] = df[\"Senior Citizen\"].astype(\"int64\", errors='raise')\n\ndf[\"Total Charges\"] = pd.to_numeric(df[\"Total Charges\"], errors='coerce')\n\ndf[[\"Senior Citizen\",\"Total Charges\"]].dtypes","838b7f52":"df[\"Total Charges\"].isnull().sum()","c545b4b7":"df.dropna(axis=0, how='any', inplace=True)\n\ndf.isnull().sum()","475d87ed":"a = pd.DataFrame(df[\"Gender\"].unique(), columns=[\"Gender\"])\nb = pd.DataFrame(df[\"Senior Citizen\"].unique(), columns=[\"Senior Citizen\"])\nc = pd.DataFrame(df[\"Partner\"].unique(), columns=[\"Partner\"])\nd = pd.DataFrame(df[\"Dependents\"].unique(), columns=[\"Dependents\"])\ne = pd.DataFrame(df[\"Phone Service\"].unique(), columns=[\"Phone Service\"])\nf = pd.DataFrame(df[\"Multiple Lines\"].unique(), columns=[\"Multiple Lines\"])\ng = pd.DataFrame(df[\"Internet Service\"].unique(), columns=[\"Internet Service\"])\nh = pd.DataFrame(df[\"Online Security\"].unique(), columns=[\"Online Security\"])\ni = pd.DataFrame(df[\"Online Backup\"].unique(), columns=[\"Online Backup\"])\nj = pd.DataFrame(df[\"Device Protection\"].unique(), columns=[\"Device Protection\"])\nk = pd.DataFrame(df[\"Tech Support\"].unique(), columns=[\"Tech Support\"])\nl = pd.DataFrame(df[\"Streaming TV\"].unique(), columns=[\"Streaming TV\"])\nm = pd.DataFrame(df[\"Streaming Movies\"].unique(), columns=[\"Streaming Movies\"])\nn = pd.DataFrame(df[\"Contract\"].unique(), columns=[\"Contract\"])\no = pd.DataFrame(df[\"Paperless Billing\"].unique(), columns=[\"Paperless Billing\"])\np = pd.DataFrame(df[\"Payment Method\"].unique(), columns=[\"Payment Method\"])\nq = pd.DataFrame(df[\"Churn\"].unique(), columns=[\"Churn\"])\n\nnew = pd.concat([a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q], axis=1, join='outer', ignore_index=False)\n\nnew.fillna(value=\"\", axis=1, inplace=True)\n\nnew","cd6d9241":"df[\"Senior Citizen\"].replace([0,1], [\"No\",\"Yes\"], inplace=True)\n\ndf[\"Senior Citizen\"].unique()","cfe5fcc8":"fig = make_subplots(rows=10, cols=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Gender\"], name=\"Gender\"),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Senior Citizen\"], name=\"Senior Citizen\"), \n    row=1, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Partner\"], name=\"Partner\"),\n    row=2, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Dependents\"], name=\"Dependents\"),\n    row=2, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Phone Service\"], name=\"Phone Service\"),\n    row=3, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Multiple Lines\"], name=\"Multiple Lines\"),\n    row=3, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Internet Service\"], name=\"Internet Service\"),\n    row=4, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Online Security\"], name=\"Online Security\"),\n    row=4, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Online Backup\"], name=\"Online Backup\"),\n    row=5, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Device Protection\"], name=\"Device Protection\"),\n    row=5, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Tech Support\"], name=\"Tech Support\"),\n    row=6, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Streaming TV\"], name=\"Streaming TV\"),\n    row=6, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Streaming Movies\"], name=\"Streaming Movies\"),\n    row=7, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Contract\"], name=\"Contract\"),\n    row=7, col=2)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Paperless Billing\"], name=\"Paperless Billing\"),\n    row=8, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Payment Method\"], name=\"Payment Method\"),\n    row=8, col=2)\n\nfig.add_trace(\n    go.Box(y=df[\"Monthly Charges\"], name=\"Monthly Charges\"),\n    row=9, col=1)\n\nfig.add_trace(\n    go.Box(y=df[\"Total Charges\"], name=\"Total Charges\"),\n    row=9, col=2)\n\nfig.add_trace(\n    go.Box(y=df[\"Tenure\"], name=\"Tenure\"),\n    row=10, col=1)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Churn\"], name=\"Churn\"),\n    row=10, col=2)\n\nfig.update_layout(height=3500, width=800, title_text=\"Variables in the Dataset\", title_font_size=22,\n                  title_y=0.99, title_x=0.45, legend_title=\"Variable\")\n","913ff08f":"tenure = df.groupby(\"Churn\", as_index=False)[\"Tenure\"].mean()\nmonthly_charges = df.groupby(\"Churn\", as_index=False)[\"Monthly Charges\"].mean()\ntotal_charges = df.groupby(\"Churn\", as_index=False)[\"Total Charges\"].mean()\n\nfig = px.bar(tenure, x=\"Churn\", y=\"Tenure\", color=\"Churn\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Bold)\n\nfig2 = px.bar(monthly_charges, x=\"Churn\", y=\"Monthly Charges\", color=\"Churn\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Dark2)\n\nfig3 = px.bar(total_charges, x=\"Churn\", y=\"Total Charges\", color=\"Churn\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Dark2)\n\nfig.update_layout(height=700, width=550, title_text=\"Average Tenure per Churn (Years)\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Tenure\")\n\nfig2.update_layout(height=700, width=550, title_text=\"Average Monthly Charges per Churn ($)\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Monthly Charges ($)\")\n\nfig3.update_layout(height=700, width=550, title_text=\"Average Total Charges per Churn ($)\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Total Charges ($)\")\n\n\nfig.show()\nfig2.show()\nfig3.show()","f3760b31":"df[\"Churn\"].replace([\"No\",\"Yes\"],[0,1], inplace=True)\n\ndf.head()","1b1e0441":"from sklearn.feature_selection import SelectKBest, chi2","15cf4e24":"df.columns","e5262d51":"gender = pd.crosstab(df[\"Gender\"], df[\"Churn\"])\nsenior = pd.crosstab(df[\"Senior Citizen\"], df[\"Churn\"])\npartner = pd.crosstab(df[\"Partner\"], df[\"Churn\"])\ndep = pd.crosstab(df[\"Dependents\"], df[\"Churn\"])\nphone = pd.crosstab(df[\"Phone Service\"], df[\"Churn\"])\nmultiple = pd.crosstab(df[\"Multiple Lines\"], df[\"Churn\"])\ninternet = pd.crosstab(df[\"Internet Service\"], df[\"Churn\"])\nonline_s = pd.crosstab(df[\"Online Security\"], df[\"Churn\"])\nonline_b = pd.crosstab(df[\"Online Backup\"], df[\"Churn\"])\ndevice = pd.crosstab(df[\"Device Protection\"], df[\"Churn\"])\ntech = pd.crosstab(df[\"Tech Support\"], df[\"Churn\"])\nstreaming_TV = pd.crosstab(df[\"Streaming TV\"], df[\"Churn\"])\nstreaming_movies = pd.crosstab(df[\"Streaming Movies\"], df[\"Churn\"])\ncontract = pd.crosstab(df[\"Contract\"], df[\"Churn\"])\npaperless = pd.crosstab(df[\"Paperless Billing\"], df[\"Churn\"])\npayment = pd.crosstab(df[\"Payment Method\"], df[\"Churn\"])\n\n(chi2_gender, p_gender, dof_gender,_) = stats.chi2_contingency([gender.iloc[0].values, gender.iloc[1].values])\n(chi2_senior, p_senior, dof_senior,_) = stats.chi2_contingency([senior.iloc[0].values, senior.iloc[1].values])\n(chi2_partner, p_partner, dof_partner,_) = stats.chi2_contingency([partner.iloc[0].values, partner.iloc[1].values])\n(chi2_phone, p_phone, dof_phone,_) = stats.chi2_contingency([phone.iloc[0].values, phone.iloc[1].values])\n(chi2_paperless, p_paperless, dof_paperless,_) = stats.chi2_contingency([paperless.iloc[0].values, paperless.iloc[1].values])\n(chi2_dep, p_dep, dof_dep,_) = stats.chi2_contingency([dep.iloc[0].values, dep.iloc[1].values])\n(chi2_multiple, p_multiple, dof_multiple,_) = stats.chi2_contingency([multiple.iloc[0].values, multiple.iloc[1].values, multiple.iloc[2].values])\n(chi2_internet, p_internet, dof_internet,_) = stats.chi2_contingency([internet.iloc[0].values, internet.iloc[1].values, internet.iloc[2].values])\n(chi2_online_s, p_online_s, dof_online_s,_) = stats.chi2_contingency([online_s.iloc[0].values, online_s.iloc[1].values, online_s.iloc[2].values])\n(chi2_online_b, p_online_b, dof_online_b,_) = stats.chi2_contingency([online_b.iloc[0].values, online_b.iloc[1].values, online_b.iloc[2].values])\n(chi2_device, p_device, dof_device,_) = stats.chi2_contingency([device.iloc[0].values, device.iloc[1].values, device.iloc[2].values])\n(chi2_tech, p_tech, dof_tech,_) = stats.chi2_contingency([tech.iloc[0].values, tech.iloc[1].values, tech.iloc[2].values])\n(chi2_streaming_TV, p_streaming_TV, dof_streaming_TV,_) = stats.chi2_contingency([streaming_TV.iloc[0].values, streaming_TV.iloc[1].values, streaming_TV.iloc[2].values])\n(chi2_streaming_movies, p_streaming_movies, dof_streaming_movies,_) = stats.chi2_contingency([streaming_movies.iloc[0].values, streaming_movies.iloc[1].values, streaming_movies.iloc[2].values])\n(chi2_contract, p_contract, dof_contract,_) = stats.chi2_contingency([contract.iloc[0].values, contract.iloc[1].values, contract.iloc[2].values])\n(chi2_payment, p_payment, dof_payment,_) = stats.chi2_contingency([payment.iloc[0].values, payment.iloc[1].values, payment.iloc[2].values, payment.iloc[3].values])\n\nchi = [{\"Variable\":\"Gender\", \"Chi2 Value\":chi2_gender, \"P-Value\":p_gender},\n      {\"Variable\":\"Senior Citizen\", \"Chi2 Value\":chi2_senior, \"P-Value\":p_senior},\n      {\"Variable\":\"Partner\", \"Chi2 Value\":chi2_partner, \"P-Value\":p_partner},\n      {\"Variable\":\"Dependents\", \"Chi2 Value\":chi2_dep, \"P-Value\":p_dep},\n      {\"Variable\":\"Phone Service\", \"Chi2 Value\":chi2_phone, \"P-Value\":p_phone},\n      {\"Variable\":\"Multiple Lines\", \"Chi2 Value\":chi2_multiple, \"P-Value\":p_multiple},\n      {\"Variable\":\"Internet Service\", \"Chi2 Value\":chi2_internet, \"P-Value\":p_internet},\n      {\"Variable\":\"Online Security\", \"Chi2 Value\":chi2_online_s, \"P-Value\":p_online_s},\n      {\"Variable\":\"Online Backup\", \"Chi2 Value\":chi2_online_b, \"P-Value\":p_online_b},\n      {\"Variable\":\"Device Protection\", \"Chi2 Value\":chi2_device, \"P-Value\":p_device},\n      {\"Variable\":\"Tech Support\", \"Chi2 Value\":chi2_tech, \"P-Value\":p_tech},\n      {\"Variable\":\"Streaming TV\", \"Chi2 Value\":chi2_streaming_TV, \"P-Value\":p_streaming_TV},\n      {\"Variable\":\"Streaming Movies\", \"Chi2 Value\":chi2_streaming_movies, \"P-Value\":p_streaming_movies},\n      {\"Variable\":\"Contract\", \"Chi2 Value\":chi2_contract, \"P-Value\":p_contract},\n      {\"Variable\":\"Paperless Billing\", \"Chi2 Value\":chi2_paperless, \"P-Value\":p_paperless},\n      {\"Variable\":\"Payment Method\", \"Chi2 Value\":chi2_payment, \"P-Value\":p_payment}]\n\nchi_new = pd.DataFrame(chi)\n\nchi2 = chi_new.reindex(labels=[\"Variable\",\"Chi2 Value\",\"P-Value\"], axis=1)\n\nchi2.sort_values(by=\"Chi2 Value\", axis=0, ascending=False, inplace=True, kind='quicksort')\n\nchi2.reset_index(drop=True, inplace=True)\n\nchi2","0dd595ab":"from sklearn.feature_selection import SelectKBest, f_regression\n\nX = df[[\"Monthly Charges\",\"Total Charges\",\"Tenure\"]]\n\ny = df[\"Churn\"]\n\nselector = SelectKBest(f_regression, k=3)\n\nselector.fit(X,y)\n\nselector.scores_","256c9ef1":"selector.pvalues_","2e44c1c0":"df[\"Churn\"].value_counts()","f961ef1c":"churn = df[df[\"Churn\"]==1]\n\nnochurn = df[df[\"Churn\"]==0]\nnochurn_sample = nochurn.sample(n=1587, axis=0, replace=False)\n\ndf2 = pd.concat([churn, nochurn_sample], axis=0, join='outer', ignore_index=True)\n\ndf2[\"Churn\"].value_counts()","6b0abda2":"df2.drop(labels=[\"Multiple Lines\",\"Gender\",\"Phone Service\"], axis=1, inplace=True)\n\ndf2.head()","3dbfa4fe":"senior = pd.get_dummies(df2[\"Senior Citizen\"], drop_first=True, prefix=\"SC\")\npartner = pd.get_dummies(df2[\"Partner\"], drop_first=True, prefix=\"Part\")\ndep = pd.get_dummies(df2[\"Dependents\"], drop_first=True, prefix=\"Dep\")\nint_serv = pd.get_dummies(df2[\"Internet Service\"], drop_first=True, prefix=\"Net\")\nonline_s = pd.get_dummies(df2[\"Online Security\"], drop_first=True, prefix=\"OS\")\nonline_b = pd.get_dummies(df2[\"Online Backup\"], drop_first=True, prefix=\"OB\")\ndev_pro = pd.get_dummies(df2[\"Device Protection\"], drop_first=True, prefix=\"DP\")\ntech = pd.get_dummies(df2[\"Tech Support\"], drop_first=True, prefix=\"TS\")\nstream_TV = pd.get_dummies(df2[\"Streaming TV\"], drop_first=True, prefix=\"TV\")\nstream_movies = pd.get_dummies(df2[\"Streaming Movies\"], drop_first=True, prefix=\"MOV\")\ncontract = pd.get_dummies(df2[\"Contract\"], drop_first=True, prefix=\"Con\")\nbilling = pd.get_dummies(df2[\"Paperless Billing\"], drop_first=True, prefix=\"PB\")\npay_method = pd.get_dummies(df2[\"Payment Method\"], drop_first=True, prefix=\"PM\")\n\ndf_new = pd.concat([df2,senior,partner,dep,int_serv,online_s,online_b,dev_pro,tech,stream_TV,stream_movies,contract,billing,pay_method], axis=1, join='outer')\n\ndf_new.drop(labels=[\"Senior Citizen\",\"Partner\",\"Dependents\",\"Internet Service\",\"Online Security\",\"Online Backup\",\"Device Protection\",\"Tech Support\",\"Streaming TV\",\"Streaming Movies\",\"Contract\",\"Paperless Billing\",\"Payment Method\"], axis=1, inplace=True)\n\ndf_new.head()","666cdc01":"df_new.columns","10a045d8":"X = df_new[['Tenure', 'Monthly Charges', 'Total Charges', 'SC_Yes',\n       'Part_Yes', 'Dep_Yes', 'Net_Fiber optic', 'Net_No',\n       'OS_No internet service', 'OS_Yes', 'OB_No internet service', 'OB_Yes',\n       'DP_No internet service', 'DP_Yes', 'TS_No internet service', 'TS_Yes',\n       'TV_No internet service', 'TV_Yes', 'MOV_No internet service',\n       'MOV_Yes', 'Con_One year', 'Con_Two year', 'PB_Yes',\n       'PM_Credit card (automatic)', 'PM_Electronic check', 'PM_Mailed check']]\n\ny = df_new[\"Churn\"]","c73ac81e":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n\nclf = LogisticRegression()\n\nclf = clf.fit(X_train,y_train)\n\nclf\n\ny_pred = clf.predict(X_test)\n\ndef generate_model_report(y_test, y_pred):\n    print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n    print(\"Precision = \", precision_score(y_test, y_pred))\n    print(\"Recall = \", recall_score(y_test, y_pred))\n    print(\"F1 = \", f1_score(y_test, y_pred))\n    pass\n\n\ngenerate_model_report(y_test, y_pred)\nconfusion_matrix(y_test, y_pred, labels=[0,1])","15207d88":"from sklearn.tree import DecisionTreeClassifier\n\nclf3 = DecisionTreeClassifier()\nclf3 = clf3.fit(X_train,y_train)\n\ny_pred = clf3.predict(X_test)\n\ndef generate_model_report(y_test, y_pred):\n    print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n    print(\"Precision = \", precision_score(y_test, y_pred))\n    print(\"Recall = \", recall_score(y_test, y_pred))\n    print(\"F1 = \", f1_score(y_test, y_pred))\n    pass\n\ngenerate_model_report(y_test, y_pred)","3d8c2389":"from sklearn.ensemble import RandomForestClassifier\n\nclf2 = RandomForestClassifier()\nclf2 = clf2.fit(X_train,y_train)\n\ny_pred = clf2.predict(X_test)\n\ndef generate_model_report(y_test, y_pred):\n    print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n    print(\"Precision = \", precision_score(y_test, y_pred))\n    print(\"Recall = \", recall_score(y_test, y_pred))\n    print(\"F1 = \", f1_score(y_test, y_pred))\n    pass\n\ngenerate_model_report(y_test, y_pred)\nconfusion_matrix(y_test, y_pred, labels=[0,1])","cfb513af":"The last step before building the classification models is to create dummy variables for the categorical variables in the dataset in order for the models to work","ff2283d3":"**Selecting most relevant categorical features for the classification models**","c1c638c8":"**Creating dummy variables**","1a332669":"The chi2 value along with the corresponding p values will determine which variables should be included in the classification models. The chi2 test above tests the hypothesis whether churn rate and each of the categorical variables are independent or not. The higher the chi2 value and the lower the p-value, the more dependent the target and independent variable are. Therefore, the following variables will be used in the classification model:\n\n1) Contract\n\n2) Online Security\n\n3) Tech Support\n\n4) Internet Service\n\n5) Payment Method\n\n6) Online Backup\n\n7) Device Protection\n\n8) Streaming Movies\n\n9) Streaming TV\n\n10) Paperless Billing\n\n11) Dependents\n\n12) Senior Citizen\n\n13) Multiple Lines","fe3f1475":"This will help to use different supervised learning classification models since most can not use a categorical variable as the dependent variable, but rather they work with binary variables","e9ecf99f":"**Changing the datatypes of the variables \"Senior Citizens\" and \"Total Charges\"**","f4fff07c":"**Classification Model 2: Decision Trees**","899c4c18":"**Dropping irrelevant variables to the classification models**","ae9c5a76":"**Classification Model 1: Logistic Regression**","0a643f96":"Apart from the target variable, this dataset has 19 variables (16 categorical & 3 quantitative). It would not make sense to create dummy variables for all the categorical variables and to include them, along with the quantitative variables, in the classification prediction models. But rather it would be wise to analyse and only include variables, out of the 19, that have the most predictability power with regards to the target variables. The less complicated the models are, the better results they will achieve.\n\nHence, we will start by analysing which categorical variables to include in the classification models.","7d0771b0":"The variable \"Total Charges\" had 10 data entries that were only blank spaces and therefore they would constitute \"missing data\". Since it is a very small amount of values compared to the number of rows in this dataset, removing the entire rows of data with these missing values would not have a negative effect on the analysis","e38f9ca0":"**Converting the target variable \"Churn\" to a binary variable**","2e83bef6":"**Undersampling the dataset**","11541de0":"The graphs above reveal the variables in the dataset and the occurence of each value\/category in every single variable. This gives us a good snapshot as to what the dataset looks like. It reveals important information such there being an almost equal distribution in gender, most customers having fiber optic internet service, most customers not having multiple lines, most customers having month-to-month contracts and most customers paying through electronic checks. \n\nNow, it would make sense to analyse these variables above with regards to the target variable \"Churn\". But the problem is that most of the categorical variables above are highly skewed towards a certain category, for example the variable \"Contract\" is highly skewed towards the category \"month-to-month\", therefore if we were to analyse this variable by calculating the number of customers who were churned per contract type, it would obviously be skewed towards \"month-to-month\" since this category is already the most frequently occuring in the variable. \n\nHowever, we will not face the same problem and can analyse the quantitative variables with regards to the target variable.","af42fa84":"**Checking data types of the variables in the dataset**","0b3adf7a":"**Analysis quantitative variables with regards to the target variable \"Churn\"**","7efe59ad":"**Checking for imbalanced classes**","8b8fcb62":"The variables \"Senior Citizens\" and \"Total Charges\" have incorrect datatypes. Therefore, they need to be changed.","fb6a3807":"**Classification Model 3: Random Forest**","30b71cb1":"**Changing column names and removing unnecessary columns**","bce342e3":"Now we know what variables (quantitative and categorical) are necessary to be included in our models. But before we start building the classification models, we need to check if our target variable \"Churn\" has imbalanced classes.","b5537cb2":"The error above means that there may be some missing values in the column that were only entered as blank spaces. But we can still convert this data type to numerical, which is shown below along with changing the data type of the \"Senior Citizen\" column.","4bbdb2c4":"Since all three variables got a high F-score and extremely low corresponding probabilities, these variables need to be included in the classification models","bf457355":"**Removing missing values and checking for other Null values**","47eabb6e":"**Selecting most relevant quantitative variables for classification models**","31f7073e":"As shown above, there is a significant imbalance in the two classes with \"No Churn\/0\" class having 4389 values, whereas the \"Churn\/1\" class having 1587 classes. It is important to make sure the classes are balanced because if we create classification models with an imbalance towards \"No Churn\" customers, then our models will have a bias towards these values and will predict \"No Churn\/0\" more often. \n\nTherefore, to remove this imbalance, we will conduct undersampling of the datatset.","8c03f314":"The graphs above demonstrate the following information:\n\n1) The average tenure for customers who were churned is approximately 18 years.\n\n2) The average monthly charges for customers who were churned is approximately $74.\n\n3) The average total charges for customers who were churned is approximately $1550.","23cf3c0b":"**Replacing values of variable \"Senior Citizen\"**","61314fe2":"There seem to be no inconsistencies with regards to the way values are categorized in each of the variables mentioned above. But just for the sake of consistency, the variable \"Senior Citizen\" should be changed from a binary variable to a categorical variable","a7dd69f1":"**Checking each categorical and binary variable for its unique values**","9775cc79":"As shown in the models above, the best classification model to use would be Logistic Regression since it has an accuracy of approximately 77% and an F1 score of approximately 78%, both of which are higher than the accuracy and F1 score of the other two classification models.","afd66145":"The dataset has successfully been undersampled and hence the two classes have the same number of values. \n\nNext step is to remove the unnecessary variables that we identifided before-hand.","493ca710":"As shown above, the missing values have been removed from the \"Total Charges\" variables and this dataset does not have any variables with any missing or Null values","a82c0689":"This is to make sure that each variable does not have any values that are similar or the same but are categorized seperately, which could be due to spelling mistakes or the values being written differently."}}