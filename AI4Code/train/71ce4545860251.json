{"cell_type":{"25fad228":"code","139711fb":"code","38513225":"code","ea1c5163":"code","259fb96e":"code","5fed91a2":"code","8b6942d2":"markdown","9557af64":"markdown","59c99edc":"markdown","b3ff9a17":"markdown","d43c7f4c":"markdown","5bb46cd2":"markdown","fc52c378":"markdown","3fc76cef":"markdown"},"source":{"25fad228":"from os.path import join\n\n# dogs images data is in this directory\nimage_dir = '..\/input\/dog-breed-identification\/'\n\n#Here is a few image files to test. We put the file paths in a list. \nimage_filenames = ['0c8fe33bd89646b678f6b2891df8a1c6.jpg',\n                   '0c3b282ecbed1ca9eb17de4cb1b6e326.jpg',\n                   '04fb4d719e9fe2b6ffe32d9ae7be8a22.jpg',\n                   '0e79be614f12deb4f7cae18614b7391b.jpg']\n\n#Then we use the join function from python's \"os.path\" to append the file name to the directory.\n#The end result is a list of paths to image files\nimg_paths = [join(image_dir, filename) for filename in image_filenames ]","139711fb":"import numpy as np\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n","38513225":"#The model we'll use was trained with 224x224 resolution images so we'll make them\n#have the same resolution here.\nimage_size = 224\n\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    #load the images using the load_img() function.\n    #We have a few images so we keep them in a list for now using a list comprehension. \n    #The target size argument specifies the size or pixel resolution we want the images to be and when we model with them.\n    imgs = [load_img(img_path, target_size=(img_height, img_width)) for img_path in img_paths]\n\n    #convert each image into an array using the img_to_array() function.\n    #the img_to_array() function creates 3d tensor for each image combining multiple images \n    #cause us to stack those in a new dimension so we end up with a 4 dimensional tensor or array\n    img_array = np.array([img_to_array(img) for img in imgs])\n\n    #preprocess_input() function does some arithmetic on the pixel values.\n    #The outut values became between minus 1 and 1. This was done when a model was first built so we have to do it again here to be consistent.\n    #It returns preprocessed numpy.array or a tf.Tensor with type float32. \n    #The images are converted from RGB to BGR, then each color channel is zero-centered with respect to the ImageNet dataset, without scaling.\n    output = preprocess_input(img_array)\n    \n    return(output)","ea1c5163":"from tensorflow.keras.applications import ResNet50\n\n#We'll use a type of model called the ResNet 50 model.\n#We give it an argument specify the file path where we have stored the values in the convolutional filters\n#Return value: a Keras model instance.\nmy_model = ResNet50(weights='..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels.h5')\n\n#call that function we just wrote before to read and preprocess our data\ntest_data = read_and_prep_images(img_paths)\n\n#get predictions by calling the predict() method of our model\n#Returns array of likeness rates with known categories (i.e. dogs, cats, coffe, etc.) for each input image\npreds = my_model.predict(test_data)\n\npreds","259fb96e":"from learntools.deep_learning.decode_predictions import decode_predictions\n\n#call the function with the prediction results and tell it to give us the top three probabilities for each photo\nmost_likely_labels = decode_predictions(preds, top=3, class_list_path='..\/input\/resnet50\/imagenet_class_index.json')","5fed91a2":"from IPython.display import Image, display\n\nfor i, img_path in enumerate(img_paths):\n    display(Image(img_path))\n    print(most_likely_labels[i])","8b6942d2":"Now we have predictions about what's in each image we had 4 photographs and our model gave the 1000 probabilities for each photo -\nwhat's the chance that the image was a tiger shark what's the chance it was a prime Iranian what's the chance that it was a toothbrush and so on.\n\nLet's focus on the probabilities for what the model thinks is in the image, rather than what all the things it says\nare not in the image.\n\nKeras includes a function called decode_predictions() to extract the highest probabilities for each image.","9557af64":"We need to do a little bit of pre-processing to go from the image file\npath to something we can run through our model.\nWe'll put all those pre-processing steps into a single function called read_and_prep_images. ","59c99edc":"### Function to Read and Prep Images for Modeling","b3ff9a17":"We want to see the images too, to see if the model is making sense.\nThe notebook below includes code to display images.","d43c7f4c":"# Intro\nAt the end of this lesson, you will be able to write TensorFlow and Keras code to use one of the best models in computer vision.\n\nAs a first step with Keras and Tensorflow we will use a pre-trained deep learning model to classify what's\nin a photo.\n\nPre-trained models are saved on Kaggle and you can attach them to your kernel workspace the same way you would\nattach a dataset. It is done already in this example kernel and in this workspace.\nHere also attached a data set with dog pictures and we will try to tell each dog's breed from its picture.\n\n# Sample Code\n### Choose Images to Work With","5bb46cd2":"### Create Model with Pre-Trained Weights File. Make Predictions","fc52c378":"### Visualize Predictions","3fc76cef":"If you know much about dog breeds you'll recognize that these are pretty good."}}