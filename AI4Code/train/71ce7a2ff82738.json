{"cell_type":{"6df0a64f":"code","d9a5371e":"code","63f19f24":"code","7eea1fd9":"code","255ab9b8":"code","30fbf103":"code","bcc0a16b":"code","bacf2c3a":"code","f229acde":"code","398de966":"code","86ed2f49":"code","f8365a62":"markdown","b40b1848":"markdown","fda72d16":"markdown","026e8c55":"markdown","1d8ac337":"markdown","8c19e56a":"markdown","5500afee":"markdown","509af1ce":"markdown"},"source":{"6df0a64f":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","d9a5371e":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\n\nfrom sklearn.decomposition import PCA, TruncatedSVD\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\nimport tokenization","63f19f24":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","7eea1fd9":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=6e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","255ab9b8":"module_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-12_H-768_A-12\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)\n\ntrain = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\n\nvocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n\ntrain_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","30fbf103":"train.head(3)","bcc0a16b":"# From my kernel https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-wc-tf-idf-glove\ndef cv(data):\n    count_vectorizer = CountVectorizer()\n    emb = count_vectorizer.fit_transform(data)\n    return emb, count_vectorizer\n\ndef plot_LSA(test_data, test_labels, savepath=\"PCA_demo.csv\", plot=True):\n        lsa = TruncatedSVD(n_components=2)\n        lsa.fit(test_data)\n        lsa_scores = lsa.transform(test_data)\n        color_mapper = {label:idx for idx,label in enumerate(set(test_labels))}\n        color_column = [color_mapper[label] for label in test_labels]\n        colors = ['orange','blue']\n        if plot:\n            plt.scatter(lsa_scores[:,0], lsa_scores[:,1], s=8, alpha=.8, c=test_labels, cmap=matplotlib.colors.ListedColormap(colors))\n            orange_patch = mpatches.Patch(color='orange', label='Not')\n            blue_patch = mpatches.Patch(color='blue', label='Real')\n            plt.legend(handles=[orange_patch, blue_patch], prop={'size': 30})\n\ntrain_counts, count_vectorizer = cv(train.text)\nfig = plt.figure(figsize=(16, 16))          \nplot_LSA(train_counts, train_labels)\nplt.show()","bacf2c3a":"model = build_model(bert_layer, max_len=160)","f229acde":"checkpoint = ModelCheckpoint('model.h5', monitor='val_loss', save_best_only=True)\ntrain_history = model.fit(train_input, train_labels, validation_split=0.2,\n    epochs=3, callbacks=[checkpoint], batch_size=16)","398de966":"# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\n# Prediction by BERT model with my tuning\nmodel.load_weights('model.h5')\ntest_pred = model.predict(test_input)","86ed2f49":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","f8365a62":"# Submission","b40b1848":"# Training dataset visualization","fda72d16":"# [Real or Not? NLP with Disaster Tweets](https:\/\/www.kaggle.com\/c\/nlp-getting-started)","026e8c55":"# Model: Build, Train, Predict, Submit","1d8ac337":"# Keras BERT using TFHub with EDA and tuning\n\n## My upgrade (from my kernel https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert):\n* without Dropout\n* epochs=3\n* batch=16\n* Adam(lr=6e-6)\n* validation_split=0.2\n* Training dataset visualization (from my kernel)","8c19e56a":"# Acknowledgment\n\nThis kernel basic on kernels:\n* [Disaster NLP: Keras BERT using TFHub](https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub)\n* [Source for `bert_encode` function](https:\/\/www.kaggle.com\/user123454321\/bert-starter-inference)\n* [All pre-trained BERT models from Tensorflow Hub](https:\/\/tfhub.dev\/s?q=bert)\n* [NLP - EDA, Bag of Words, TF IDF, GloVe, BERT](https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert)","5500afee":"# Download and Preprocess\n\n- Download BERT from the Tensorflow Hub\n- Download CSV files containing training data\n- Download tokenizer from the bert layer\n- Encode the text into tokens, masks, and segment flags","509af1ce":"# Helper Functions"}}