{"cell_type":{"da910ff0":"code","2de1854f":"code","4952508e":"code","1eccca0a":"code","5b836cfd":"code","9b3b7a3e":"code","cb2bec59":"code","938b09a6":"code","d4b39ad6":"code","affb6905":"code","8c957764":"code","d114f848":"code","3e215211":"code","da57c67e":"code","31b1fe46":"code","5867a926":"markdown"},"source":{"da910ff0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.metrics import confusion_matrix, classification_report,accuracy_score\n\ndf = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","2de1854f":"df.info()","4952508e":"print(df.shape)\ndata= df.sample(frac = 0.2,random_state=1)\nprint(data.shape)","1eccca0a":"plt.figure(figsize=(10, 5))\nplt.scatter(df.Time, df.Amount)\nplt.xlabel('Time (in secs)')\nplt.ylabel('Amount')\nplt.show()","5b836cfd":"fraud = df[df['Class'] == 1]\nnormal = df[df['Class'] == 0]\n\nf, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 5))\nf.suptitle('Time of transaction v\/s Amount by Class type')\nax1.scatter(fraud.Time, fraud.Amount)\nax1.set_title('Fraud')\nax2.scatter(normal.Time, normal.Amount)\nax2.set_title('Normal')\nplt.xlabel('Time (in secs)')\nplt.ylabel('Amount')\nplt.xlim((0, 20000))\nplt.show()","9b3b7a3e":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(10, 5))\nf.suptitle('Amount per transaction by class')\nbins = 10\nax1.hist(fraud.Amount, bins = bins)\nax1.set_title('Fraud')\nax2.hist(normal.Amount, bins = bins)\nax2.set_title('Normal')\nplt.xlabel('Amount ($)')\nplt.ylabel('Number of Transactions')\nplt.xlim((0, 20000))\nplt.yscale('log')","cb2bec59":"fraud = data[data['Class']==1]\nnormal = data[data['Class']==0]\nanomaly_fraction = len(fraud)\/float(len(normal))\nprint(anomaly_fraction)\nprint(\"Fraud Cases: \" + str(len(fraud)))\nprint(\"Normal Cases: \" + str(len(normal)))","938b09a6":"data.hist(figsize=(15,15), bins = 64)\nplt.show()","d4b39ad6":"columns = data.columns.tolist()\ntarget=columns[-1]\ncolumns = columns[:-1]\nX_train = data.iloc[:45000, :-1]\ny_train = data.iloc[:45000, -1]\nX_test = data.iloc[45000:, :-1]\ny_test = data.iloc[45000:, -1]\nprint(X_train.shape, X_test.shape)\nprint(y_train.shape, y_test.shape)","affb6905":"model = LocalOutlierFactor(contamination=anomaly_fraction)\ny_train_pred = model.fit_predict(X_train)\ny_train_pred[y_train_pred == 1] = 0\ny_train_pred[y_train_pred == -1] = 1\ny_test_pred = model.fit_predict(X_test)\ny_test_pred[y_test_pred == 1] = 0\ny_test_pred[y_test_pred == -1] = 1","8c957764":"import itertools\nclasses = np.array(['0','1'])\ndef plot_confusion_matrix(cm, classes,title='Confusion matrix', cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    fmt = 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n        horizontalalignment=\"center\",\n        color=\"white\" if cm[i, j] > thresh else \"black\")\n        plt.tight_layout()\n        plt.ylabel('True label')\n        plt.xlabel('Predicted label')","d114f848":"cm_train = confusion_matrix(y_train, y_train_pred)\nplot_confusion_matrix(cm_train,[\"Normal\", \"Fraud\"])","3e215211":"cm_test = confusion_matrix(y_test_pred, y_test)\nplot_confusion_matrix(cm_test,[\"Normal\", \"Fraud\"])","da57c67e":"print('Total fraudulent transactions detected in training set: ' + str(cm_train[1][1]) + ' \/ ' + str(cm_train[1][1]+cm_train[1][0]))\nprint('Total non-fraudulent transactions detected in training set: ' + str(cm_train[0][0]) + ' \/ ' + str(cm_train[0][1]+cm_train[0][0]))\nprint('Probability to detect a fraudulent transaction in the training set: ' + str(cm_train[1][1]\/(cm_train[1][1]+cm_train[1][0])))\nprint('Probability to detect a non-fraudulent transaction in the training set: ' + str(cm_train[0][0]\/(cm_train[0][1]+cm_train[0][0])))\nprint(\"Accuracy of unsupervised anomaly detection model on the training set: \"+str(100*(cm_train[0][0]+cm_train[1][1]) \/ (sum(cm_train[0]) + sum(cm_train[1]))) + \"%\")","31b1fe46":"print('Total fraudulent transactions detected in test set: ' + str(cm_test[1][1]) + ' \/ ' + str(cm_test[1][1]+cm_test[1][0]))\nprint('Total non-fraudulent transactions detected in test set: ' + str(cm_test[0][0]) + ' \/ ' + str(cm_test[0][1]+cm_test[0][0]))\nprint('Probability to detect a fraudulent transaction in the test set: ' + str(cm_test[1][1]\/(cm_test[1][1]+cm_test[1][0])))\nprint('Probability to detect a non-fraudulent transaction in the test set: ' + str(cm_test[0][0]\/(cm_test[0][1]+cm_test[0][0])))\nprint(\"Accuracy of unsupervised anomaly detection model on the test set: \"+str(100*(cm_test[0][0]+cm_test[1][1]) \/ (sum(cm_test[0]) + sum(cm_test[1]))) + \"%\")","5867a926":"### Plotting Anomalous and Non-Anomalous Transactions"}}