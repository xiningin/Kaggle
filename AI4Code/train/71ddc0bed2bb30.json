{"cell_type":{"7bb93777":"code","9ef06595":"code","c9d5d5f6":"code","208bd18f":"code","af98e270":"code","f442a33b":"code","60171341":"code","df4ec9f7":"code","29c8ac6b":"code","ecc623f1":"code","df59a21c":"code","f6036b5a":"code","e52e34a0":"code","e679e790":"code","3034548a":"markdown","af28a485":"markdown","bcd79b6e":"markdown","cd9ab2a7":"markdown","02ab1905":"markdown","32fd809e":"markdown","b78c5e2e":"markdown"},"source":{"7bb93777":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score,cross_val_predict,cross_validate\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score,accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nimport seaborn as sns \nsns.set_theme(style=\"darkgrid\")\n\n# from imblearn.over_sampling import SMOTE\nfrom imblearn.over_sampling import RandomOverSampler\nfrom lightgbm import LGBMClassifier","9ef06595":"def buildModel(model,x_train,x_val,y_train,y_val):\n    model.fit(x_train,y_train)\n    pred = model.predict(x_val)\n    \n    accuracy = accuracy_score(y_val,pred)\n    precision = precision_score(y_val,pred)\n    recall = recall_score(y_val,pred)\n    f1 = f1_score(y_val,pred)\n    roc_score = roc_auc_score(y_val,pred,average='macro')\n    print('accuracy : {0:.2f}, precision : {1:.2f}, recall : {2:.2f}'.format(accuracy,precision,recall))\n    print('f1-score : {0:.2f}, auc : {1:.2f}'.format(f1,roc_score,recall))","c9d5d5f6":"TARGET = \"Class\"\nSEED = 2021\nVAL_SET_SIZE = 0.25\n\nN_ESTIMATORS = 1000\nNUM_LEAVES = 64 ","208bd18f":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","af98e270":"def getLabelCount(df,target):\n    return sorted([( labelValue,len(df.loc[df[target] == labelValue]) ) for labelValue in df[target].unique()])\n\nlabelCount = getLabelCount(df,TARGET)\nlabelCount","f442a33b":"sns.countplot(y=TARGET, \n                   data=df,\n                   facecolor=(0, 0, 0, 0),\n                   linewidth=5,\n                   edgecolor=sns.color_palette(\"dark\", len(labelCount)))","60171341":"X = df.drop([TARGET],axis = 1)\ny = df[TARGET]","df4ec9f7":"X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=VAL_SET_SIZE,random_state=SEED)","29c8ac6b":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = False,boost_from_average=False)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","ecc623f1":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = False,boost_from_average=True)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","df59a21c":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = True,boost_from_average=False)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","f6036b5a":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = True,boost_from_average=True)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","e52e34a0":"X_train_over,y_train_over = RandomOverSampler(random_state=SEED).fit_resample(X_train,y_train)\nprint('before SMOTE : ', X_train.shape, y_train.shape)\nprint('after SMOTE: ', X_train_over.shape, y_train_over.shape)\nprint('after SMOTE values: \\n', pd.Series(y_train_over).value_counts())","e679e790":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,boost_from_average=False)\nbuildModel(lgb,X_train_over,X_val,y_train_over,y_val)","3034548a":"# lgbm + is_unbalance = False","af28a485":"# load","bcd79b6e":"# label over sampling : RandomOverSampler","cd9ab2a7":"# split data","02ab1905":"# use oversampling data as training data  => to increase auc ","32fd809e":"# check label count","b78c5e2e":"# lgbm + is_unbalance = True\nWhen you set Is_unbalace: True, \nthe algorithm will try to Automatically balance the weight of the dominated label (with the pos\/neg fraction in train set)."}}