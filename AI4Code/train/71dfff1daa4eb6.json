{"cell_type":{"7c209d32":"code","f0ce86a5":"code","5f629b2a":"code","416ba6b4":"code","58957c04":"code","09b1acbb":"code","06c2eb79":"code","429444f8":"code","bc634346":"code","1450f57b":"code","221675d4":"code","4d506881":"code","ee143144":"code","c9707d61":"code","33f4de91":"code","112ce370":"code","791ee94c":"code","7c389cb2":"code","4d8e7d7d":"code","1f82cc49":"code","f83b3335":"code","6c628986":"code","61b36a33":"code","4ca286ea":"markdown","a37a4247":"markdown"},"source":{"7c209d32":"import pandas as pd\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport numpy as np","f0ce86a5":"data = pd.read_csv(\"..\/input\/nypd-motor-vehicle-collisions.csv\")","5f629b2a":"data.head()","416ba6b4":"data.describe()","58957c04":"data.info()","09b1acbb":"#Number of accidents per Borough\ndata.groupby('BOROUGH').size()","06c2eb79":"#NUMBER OF PERSONS INJURED per BOROUGH\nprint(data[[\"BOROUGH\",\"NUMBER OF PERSONS INJURED\"]].groupby(\"BOROUGH\").count())","429444f8":"#NUMBER OF PERSONS Killed per BOROUGH\nprint(data[[\"BOROUGH\",\"NUMBER OF PERSONS KILLED\"]].groupby(\"BOROUGH\").count())","bc634346":"#NUMBER OF PERSONS Killed per BOROUGH\nprint(data[[\"BOROUGH\",\"NUMBER OF PERSONS KILLED\"]].groupby(\"BOROUGH\").count())\nprint(data[[\"BOROUGH\",\"NUMBER OF PEDESTRIANS KILLED\"]].groupby(\"BOROUGH\").count())","1450f57b":"#getting the counts of people killed then rearranging the columns\npersk_data=data[[\"BOROUGH\",\"NUMBER OF PERSONS KILLED\"]].groupby(\"BOROUGH\").count()\npersk_data['BOROUGH'] = persk_data.index\npersk_data=persk_data.reset_index(drop=True)\npedk_data=data[[\"BOROUGH\",\"NUMBER OF PEDESTRIANS KILLED\"]].groupby(\"BOROUGH\").count()\npedk_data['BOROUGH'] = pedk_data.index\npedk_data=pedk_data.reset_index(drop=True)\nmotk_data=data[[\"BOROUGH\",\"NUMBER OF MOTORIST KILLED\"]].groupby(\"BOROUGH\").count()\nmotk_data['BOROUGH'] = motk_data.index\nmotk_data=motk_data.reset_index(drop=True)","221675d4":"s1 = persk_data.set_index('BOROUGH')['NUMBER OF PERSONS KILLED']\ns2 = pedk_data.set_index('BOROUGH')['NUMBER OF PEDESTRIANS KILLED']\ns3 = motk_data.set_index('BOROUGH')['NUMBER OF MOTORIST KILLED']\ndf1 = (s1+s2+s3).reset_index(name='Total People Killed')\nprint (df1)","4d506881":"import matplotlib.pyplot as plt\n\nplt.rcdefaults()\nfig, ax = plt.subplots()\ny_pos= np.arange(df1.shape[0])\ny=df1[\"Total People Killed\"].values\nnames=df1[\"BOROUGH\"].values\nax.barh(y_pos, y, align='center',color='green', ecolor='black')\nax.set_yticks(y_pos)\nax.set_yticklabels(names)\nax.invert_yaxis()  # labels read top-to-bottom\nax.set_xlabel('People Killed in Accident')\nax.set_title('Number of People Killed Per Borough')\n\nfor i, v in enumerate(y):\n    ax.text(v + 3, i + .25, str(v), color='Green', fontweight='bold')\nplt.show()","ee143144":"# these two lines are what allow code to show up in a notebook!\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\ndataPlot = [go.Histogram(histfunc = \"sum\",x=names,y=y)]\n\n# the layout of figure\nlayout = dict(title = \"Number of Deaths Per Borough\",\n              xaxis= dict(title= 'Borough',ticklen= 2,zeroline= False))\n\n# create and show figure\nfig = dict(data = dataPlot, layout = layout)\niplot(fig)","c9707d61":"#delete empty rows\ndata=data.dropna(how='all')\n\n#reset index to remove missing indexes\ndata=data.reset_index(drop=True)\n\n\n#split date from \"DATE\" column\ndata['Date']=data['DATE'].apply(lambda x: x[:10])","33f4de91":"# parse dates\nfor i in range(len(data['Date'])):\n    if(data['Date'][i].startswith('00')):\n        p=data['Date'][i-1].split('-')\n        current=data['Date'][i].split('-')\n        current[0]=p[0]\n        data['Date'][i]=\"-\".join(current)\ndata['Date'] = pd.to_datetime(data['Date'], format = \"%Y-%m-%d\")\ndata['Date'][:5]","112ce370":"# count of accidents per month\nacc_per_month = data['Date'].groupby([data.Date.dt.year, data.Date.dt.month]).agg('count') \n\n# convert to dataframe\nacc_per_month = acc_per_month.to_frame()\n\n# move date month from index to column\nacc_per_month['date'] = acc_per_month.index\n\n# rename column\nacc_per_month = acc_per_month.rename(columns={acc_per_month.columns[0]:\"acc\"})\n\n# re-parse dates\nacc_per_month['date'] = pd.to_datetime(acc_per_month['date'], format=\"(%Y, %m)\")\n\n# remove index\nacc_per_month = acc_per_month.reset_index(drop=True)\n\n# get month of meet\nacc_per_month['month'] = acc_per_month.date.dt.month","791ee94c":"# these two lines are what allow code to show up in a notebook!\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# date on the x axis and accidents on the y axis\ndataPlot2 = [go.Scatter(x=acc_per_month.date, y=acc_per_month.acc)]\n\n# the layout of figure\nlayout = dict(title = \"Number of Accidents per Month\",\n              xaxis= dict(title= 'Accidents',ticklen= 2,zeroline= False))\n\n# create and show figure\nfig = dict(data = dataPlot2, layout = layout)\niplot(fig)","7c389cb2":"def getAccidentsAndPlot(borough):\n    data_ = pd.DataFrame()\n    acc_per_day = pd.DataFrame()\n    #Number of accidents per day per in Brooklyn\n    data_ = data[data[\"BOROUGH\"]==borough]\n    # count of accidents per day in Brooklyn\n    acc_per_day = data_['Date'].groupby([data.Date.dt.year, data.Date.dt.month,data.Date.dt.day]).agg('count') \n\n    # convert to dataframe\n    acc_per_day = acc_per_day.to_frame()\n\n    # move date day from index to column\n    acc_per_day['date'] = acc_per_day.index\n\n    # rename column\n    acc_per_day = acc_per_day.rename(columns={acc_per_day.columns[0]:\"acc\"})\n\n    # re-parse dates\n    acc_per_day['date'] = pd.to_datetime(acc_per_day['date'], format=\"(%Y, %m, %d)\")\n\n    # remove index\n    acc_per_day = acc_per_day.reset_index(drop=True)\n\n    # get day of meet\n    acc_per_day['day'] = acc_per_day.date.dt.day\n\n    # date on the x axis and accidents on the y axis\n    dataPlot3 = [go.Scatter(x=acc_per_month.date, y=acc_per_month.acc)]\n\n    # the layout of figure\n    layout = dict(title = \"Number of Accidents per Day\",\n                  xaxis= dict(title= borough,ticklen= 2,zeroline= False))\n\n    # create and show figure\n    fig = dict(data = dataPlot3, layout = layout)\n    iplot(fig)","4d8e7d7d":"#Number of Accidents Pe Day in Brooklyn\ngetAccidentsAndPlot(\"BROOKLYN\")","1f82cc49":"#Number of Accidents Pe Day in MANHATTAN\ngetAccidentsAndPlot(\"MANHATTAN\")","f83b3335":"#Number of Accidents Per Day in Bronx\ngetAccidentsAndPlot(\"BRONX\")","6c628986":"#Number of Accidents Pe Day in Queens\ngetAccidentsAndPlot(\"QUEENS\")","61b36a33":"#Number of Accidents Pe Day in STATEN ISLAND\ngetAccidentsAndPlot(\"STATEN ISLAND\")","4ca286ea":"# First five rows of the dataset With all the Columns","a37a4247":"# Names Of the Features Present in the dataset with the Count"}}