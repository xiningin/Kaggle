{"cell_type":{"70c77d0d":"code","c2a0c767":"code","b2b933cc":"code","27b6af0e":"code","9ff2492b":"code","bec5968c":"code","4865bb26":"code","55ea2f9e":"code","e5fbef59":"code","44c01dbe":"code","9ab5d738":"code","58e4dabc":"code","26a69b32":"code","adb04d89":"code","67b0f189":"code","aaf2f292":"code","d1bc0300":"code","66e9b8d7":"code","8a1f34bd":"code","c5adc383":"code","cf3ee9af":"code","6e31b1d4":"code","65b82950":"code","48db398c":"code","0e662366":"code","1b42b7e4":"code","a77e5727":"code","501cad0d":"code","99b11c39":"code","1d6d66ce":"code","68e5ae3d":"code","6d53c770":"code","d7401856":"code","8f626d9a":"code","cbab69c6":"code","7a33c927":"code","185146f9":"code","42cde3d4":"code","1f861bd3":"code","dd74cac1":"code","e5fe13ef":"code","566a5784":"code","dd5000d5":"code","6ef5eabf":"markdown","fc070f1c":"markdown"},"source":{"70c77d0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2a0c767":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport re\nimport plotly.express as px","b2b933cc":"data = pd.read_table('..\/input\/fruit\/fruit.txt')\ndata","27b6af0e":"fig=px.scatter_3d(data,x='width',y='height',z='mass',color='fruit_name',color_continuous_scale='teal')\nfig.update_layout(\n    title={\n        'text': 'Width vs. Height vs. Mass for Different Type of Fruits',\n        'y':0.92,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()\n","9ff2492b":"data.describe()","bec5968c":"X=data.drop(['fruit_name','fruit_label','fruit_subtype'],axis=1)\nX","4865bb26":"y=data['fruit_name']\ny","55ea2f9e":"plt.subplots(figsize=(10,5))\nsn.heatmap(X.corr(),annot=True)","e5fbef59":"plt.subplots(figsize=(20,10))\nplt.plot(data['height'],label='Height')\nplt.plot(data['width'],label='Width')\nplt.legend()","44c01dbe":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y,stratify=y,test_size=0.2,random_state=42)  \nfrom sklearn.neighbors import KNeighborsClassifier","9ab5d738":"k=np.arange(1,30)\ntrain_accuracy=np.empty(len(k))\ntest_accuracy=np.empty(len(k))\nfor i,k in enumerate(k):\n    knn=KNeighborsClassifier(n_neighbors=k)\n    knn.fit(x_train,y_train)\n    train_accuracy[i]=knn.score(x_train,y_train)\n    test_accuracy[i]=knn.score(x_test,y_test)\n    print(train_accuracy[i])\n    print(test_accuracy[i])","58e4dabc":"k=np.arange(1,30)\nk","26a69b32":"plt.subplots(figsize=(20,10))\nplt.subplot(1,2,1)\nplt.plot(k,train_accuracy)\nplt.xlabel('numbers of neighbor')\nplt.ylabel('train accuracy')\nplt.show()\nplt.subplots(figsize=(20,10))\nplt.subplot(1,2,2)\nplt.plot(k,test_accuracy)\nplt.ylabel('test accuracy')\nplt.show()","adb04d89":"idx=np.where(test_accuracy==max(test_accuracy))\nx=k[idx]\nx","67b0f189":"model=KNeighborsClassifier(n_neighbors=7)\nmodel.fit(x_train,y_train)","aaf2f292":"y_pred=model.predict(x_test)\ny_pred","d1bc0300":"y_test","66e9b8d7":"from sklearn.metrics import confusion_matrix","8a1f34bd":"confusion_matrix(y_test,y_pred)","c5adc383":"pd.crosstab(y_test,y_pred)","cf3ee9af":"from sklearn.metrics import accuracy_score\n","6e31b1d4":"accuracy_score(y_test,y_pred)","65b82950":"from sklearn.model_selection import cross_val_score","48db398c":"scores=cross_val_score(model,X,y,cv=5)\nscores","0e662366":"from sklearn.metrics import classification_report","1b42b7e4":"print(classification_report(y_test,y_pred))","a77e5727":"a=data.iloc[[10,15,24],3:7]\na","501cad0d":"model.predict(a)","99b11c39":"b=pd.DataFrame({'nmass':[165],'nwidth':[6.8],'nheight':[7.2],'ncolor_score':[0.925]})\nb","1d6d66ce":"model.predict(b)","68e5ae3d":"c=pd.DataFrame({'nmass':[165],'nwidth':[6.7],'nheight':[7.1],'ncolor_score':[0.922]})\nc","6d53c770":"model.predict(c)","d7401856":"x_train, x_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\nfrom sklearn.naive_bayes import GaussianNB\nmodel1=GaussianNB()\nmodel1.fit(x_train,y_train)","8f626d9a":"y_pred=model.predict(x_test)\ny_pred","cbab69c6":"y_test","7a33c927":"s=y_test.values\ncount=0\nfor i in range(len(y_pred)):\n    if y_pred[i]==s[i]:\n        count=count+1","185146f9":"count","42cde3d4":"len(s)","1f861bd3":"9\/12","dd74cac1":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report","e5fe13ef":"accuracy_score(y_test,y_pred)","566a5784":"confusion_matrix(y_test,y_pred)","dd5000d5":"print(classification_report(y_test,y_pred))","6ef5eabf":"# KNN method","fc070f1c":"# naive_bayes method"}}