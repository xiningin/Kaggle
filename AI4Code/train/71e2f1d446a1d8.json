{"cell_type":{"595e3848":"code","4a2ed010":"code","c4201101":"code","41f2b1cc":"code","bad692f2":"code","939be400":"code","a2b5cab1":"code","8aa539f5":"code","e568963c":"code","966cc992":"code","516a9161":"code","7dbb7cb3":"code","b48a9c0e":"code","32bea668":"code","7eddcbbd":"code","48e6aa8c":"code","dc951df8":"code","ccdc979a":"code","d54779d4":"code","f197ec4c":"code","47837072":"code","654a2ba5":"code","57aa8464":"code","1f341587":"code","befb23ea":"code","a7c4648a":"code","a7690b5f":"markdown","a63865e6":"markdown","dd39c5f8":"markdown","b1d13fc0":"markdown"},"source":{"595e3848":"%matplotlib inline\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nimport cv2\nimport numpy as np\nfrom glob import glob\nimport matplotlib.cm as cm\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler","4a2ed010":"BASE_DATA_FOLDER = \"..\/input\"\nTRAin_DATA_FOLDER = os.path.join(BASE_DATA_FOLDER, \"train\")","c4201101":"def create_mask_for_plant(image):\n    image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\n    sensitivity = 35\n    lower_hsv = np.array([60 - sensitivity, 100, 50])\n    upper_hsv = np.array([60 + sensitivity, 255, 255])\n\n    mask = cv2.inRange(image_hsv, lower_hsv, upper_hsv)\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11,11))\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    return mask\n\ndef segment_plant(image):\n    mask = create_mask_for_plant(image)\n    output = cv2.bitwise_and(image, image, mask = mask)\n    return output","41f2b1cc":"def visualize_scatter_with_images(X_2d_data, images, figsize=(45,45), image_zoom=1):\n    fig, ax = plt.subplots(figsize=figsize)\n    artists = []\n    for xy, i in zip(X_2d_data, images):\n        x0, y0 = xy\n        img = OffsetImage(i, zoom=image_zoom)\n        ab = AnnotationBbox(img, (x0, y0), xycoords='data', frameon=False)\n        artists.append(ax.add_artist(ab))\n    ax.update_datalim(X_2d_data)\n    ax.autoscale()\n    plt.show()","bad692f2":"def visualize_scatter(data_2d, label_ids, figsize=(20,20)):\n    plt.figure(figsize=figsize)\n    plt.grid()\n    \n    nb_classes = len(np.unique(label_ids))\n    \n    for label_id in np.unique(label_ids):\n        plt.scatter(data_2d[np.where(label_ids == label_id), 0],\n                    data_2d[np.where(label_ids == label_id), 1],\n                    marker='o',\n                    color= plt.cm.Set1(label_id \/ float(nb_classes)),\n                    linewidth='1',\n                    alpha=0.8,\n                    label=id_to_label_dict[label_id])\n    plt.legend(loc='best')","939be400":"images = []\nlabels = []\n\nfor class_folder_name in os.listdir(TRAin_DATA_FOLDER):\n    class_folder_path = os.path.join(TRAin_DATA_FOLDER, class_folder_name)\n    for image_path in glob(os.path.join(class_folder_path, \"*.png\")):\n        image = cv2.imread(image_path, cv2.IMREAD_COLOR)\n        \n        image = cv2.resize(image, (150, 150))\n        image = segment_plant(image)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n        image = cv2.resize(image, (45,45))\n        \n        image = image.flatten()\n        \n        images.append(image)\n        labels.append(class_folder_name)\n        \nimages = np.array(images)\nlabels = np.array(labels)","a2b5cab1":"labels","8aa539f5":"label_to_id_dict = {v:i for i,v in enumerate(np.unique(labels))}\nid_to_label_dict = {v: k for k, v in label_to_id_dict.items()}","e568963c":"label_ids = np.array([label_to_id_dict[x] for x in labels])","966cc992":"images_scaled = StandardScaler().fit_transform(images)","516a9161":"images_scaled.shape","7dbb7cb3":"label_ids.shape","b48a9c0e":"plt.imshow(np.reshape(images[734], (45,45)), cmap=\"gray\")","32bea668":"pca = PCA(n_components=180)\npca_result = pca.fit_transform(images_scaled)","7eddcbbd":"pca_result.shape","48e6aa8c":"tsne = TSNE(n_components=2, perplexity=40.0)","dc951df8":"tsne_result = tsne.fit_transform(pca_result)","ccdc979a":"tsne_result_scaled = StandardScaler().fit_transform(tsne_result)","d54779d4":"visualize_scatter(tsne_result_scaled, label_ids)","f197ec4c":"visualize_scatter_with_images(tsne_result_scaled, images = [np.reshape(i, (45,45)) for i in images], image_zoom=0.7)","47837072":"tsne = TSNE(n_components=3)\ntsne_result = tsne.fit_transform(pca_result)\ntsne_result_scaled = StandardScaler().fit_transform(tsne_result)","654a2ba5":"from mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import animation","57aa8464":"fig = plt.figure(figsize=(25,25))\nax = fig.add_subplot(111,projection='3d')\n\nplt.grid()\n    \nnb_classes = len(np.unique(label_ids))\n    \nfor label_id in np.unique(label_ids):\n    ax.scatter(tsne_result_scaled[np.where(label_ids == label_id), 0],\n                tsne_result_scaled[np.where(label_ids == label_id), 1],\n                tsne_result_scaled[np.where(label_ids == label_id), 2],\n                alpha=0.8,\n                color= plt.cm.Set1(label_id \/ float(nb_classes)),\n                marker='o',\n                label=id_to_label_dict[label_id])\nax.legend(loc='best')\nax.view_init(25, 45)\nax.set_xlim(-2.5, 2.5)\nax.set_ylim(-2.5, 2.5)\nax.set_zlim(-2.5, 2.5)","1f341587":"anim = animation.FuncAnimation(fig, lambda frame_number: ax.view_init(30, 4 * frame_number), interval=75, frames=90)","befb23ea":"plot_3d_animation_filename = 'animation.gif'\nanim.save(plot_3d_animation_filename, writer='imagemagick')","a7c4648a":"import io\nimport base64\nfrom IPython.display import HTML\n\nvideo = io.open(plot_3d_animation_filename, 'r+b').read()\n# HTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(base64.b64encode(video).decode('ascii')))","a7690b5f":"## PCA","a63865e6":"With this last step we would get a neat little 3D scatter plot animation. I commented it, because the size of the gif can take up to 30MB and it slows down the whole notebook unfortunately. If you would like to try it out, just uncomment it and run the last cell. Or of course you can view it with any program because it is saved as `animation.gif` ","dd39c5f8":"## 3D t-SNE with animation","b1d13fc0":"## t-SNE after PCA"}}