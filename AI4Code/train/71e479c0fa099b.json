{"cell_type":{"ec6f54c7":"code","ee2b38cb":"code","254f30aa":"code","07d061f7":"code","44ced000":"code","73920f0b":"code","94f22632":"code","24fdbc17":"code","8860cfeb":"code","bea9d500":"code","1db71a4d":"code","4e93d202":"code","f0be927a":"code","4dacb327":"code","8441047b":"markdown","ddaacedc":"markdown","d1bd5ea1":"markdown","ab707da0":"markdown","f6d98554":"markdown","3da6044c":"markdown","5460a335":"markdown"},"source":{"ec6f54c7":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.svm import LinearSVR, SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","ee2b38cb":"data = pd.read_csv('..\/input\/cardataset\/data.csv')","254f30aa":"data","07d061f7":"data.info()","44ced000":"def multihot_encode(df, column):\n    df = df.copy()\n    \n    df[column] = df[column].apply(lambda x: x.split(','))\n    \n    all_categories = np.unique(df[column].sum())\n    \n    for category in all_categories:\n        df[column + '_' + category] = df.apply(lambda x: 1 if category in x[column] else 0, axis=1)\n    \n    df = df.drop(column, axis=1)\n    \n    return df","73920f0b":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","94f22632":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Fill multi-hot column missing values\n    df['Market Category'] = df['Market Category'].fillna(\"Missing\")\n    \n    # Multi-hot encoding\n    df = multihot_encode(df, column='Market Category')\n    \n    # One-hot encoding\n    for column in df.select_dtypes('object').columns:\n        df = onehot_encode(df, column=column)\n    \n    # Fill remaining missing values\n    df['Engine HP'] = df['Engine HP'].fillna(df['Engine HP'].mean())\n    for column in ['Engine Cylinders', 'Number of Doors']:\n        df[column] = df[column].fillna(df[column].mode()[0])\n    \n    # Split df into X and y\n    y = df['MSRP']\n    X = df.drop('MSRP', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","24fdbc17":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","8860cfeb":"X_train","bea9d500":"y_train","1db71a4d":"n_components = 100\n\npca = PCA(n_components=n_components)\npca.fit(X_train)\n\nX_train_reduced = pd.DataFrame(pca.transform(X_train), index=X_train.index, columns=[\"PC\" + str(i) for i in range(1, n_components + 1)])\nX_test_reduced = pd.DataFrame(pca.transform(X_test), index=X_test.index, columns=[\"PC\" + str(i) for i in range(1, n_components + 1)])","4e93d202":"X_train_reduced","f0be927a":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVR(),\n    \"   Support Vector Machine (RBF Kernel)\": SVR(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor()\n}\n\nfor name, model in models.items():\n    model.fit(X_train_reduced, y_train)\n    print(name + \" trained.\")","4dacb327":"for name, model in models.items():\n    print(name + \" R^2 Score: {:.5f}\".format(model.score(X_test_reduced, y_test)))","8441047b":"# Task for Today  \n\n***\n\n## Car MSRP Prediction  \n\nGiven *data about various cars*, let's try to predict the **suggested retail price** of a given car.\n\nWe will use a variety of regression models to make our predictions.","ddaacedc":"# Results","d1bd5ea1":"# Getting Started","ab707da0":"# Training","f6d98554":"# Preprocessing","3da6044c":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/wD7I6jCQXZ8","5460a335":"# Dimensionality Reduction  \n\nWe have a very high number of columns for our purposes, so let's reduce the data using PCA to have only 100 columns (to increase training speed)."}}