{"cell_type":{"7360bc23":"code","c1cae7c1":"code","f5d22860":"code","8f922832":"code","c35b8e13":"code","2e0affb0":"code","02ffa428":"code","efce55d9":"code","19ac9c61":"code","0c4af3ff":"code","ac061fe5":"code","d119f5b5":"code","f5b215a8":"code","91914fce":"code","232a7508":"code","ba3204f2":"code","25a5b445":"code","f3d5a57a":"markdown","2bfe34ce":"markdown"},"source":{"7360bc23":"#Import Libraries \nimport numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.autograd import Variable\nfrom torch.utils.data import random_split\nfrom torch.utils.data import DataLoader\n\nfrom sklearn.model_selection import train_test_split","c1cae7c1":"#variables and hyperparameters\n\n#directory\nDIR_TRAIN='\/kaggle\/input\/digit-recognizer\/train.csv'\nDIR_TEST='\/kaggle\/input\/digit-recognizer\/test.csv'\n\n#size of image\nWIDTH=28\nHEIGHT=WIDTH\n\n#related to color\nCOLOR_CHANNEL=1\nRGB_NORMALIZATION=255\n\n#split\nTRAIN_SPLIT=0.75\nVAL_SPLIT=1-TRAIN_SPLIT\nRANDOM_STATE=42\n\n#batch size,epoch and iteration\nBATCH_SIZE=100\nN_ITERS=2500\nEPOCHS=1\n\n#convolution, pooling, and kernel size\n\"\"\"\nModel:\n    Input >> Conv1 >> ReLU >> Max Pool 1 >> Conv2 >> Max Pool 2 >> Flatten >> Full Connected >> Optimizer >> Output\n\"\"\"\n\nSTRIDE=1\nPADDING=0\n\nCONV1_INPUT=1\nCONV1_FILTER=16\n\nCONV2_INPUT=CONV1_FILTER\nCONV2_FILTER=16\n\nCONV1_KERNEL, CONV2_KERNEL= 4,4\nPOOLING1_KERNEL,POOLING2_KERNEL=2,2\n\nLINEAR_X=CONV2_FILTER*CONV2_KERNEL*CONV2_KERNEL\nLINEAR_Y=10\n\n#others\nRANDOM_IMAGE_INDEX=18\nLABEL_KEY='label'\nPERCENTAGE=100\nTHRESHOLD=50\nLEARNING_RATE=0.1","f5d22860":"#Load Data\ntrain = pd.read_csv(DIR_TRAIN)\ntest = pd.read_csv(DIR_TEST)","8f922832":"train.head()","c35b8e13":"X_train = train.loc[:,train.columns != LABEL_KEY].values\/RGB_NORMALIZATION\nX_train = X_train.astype(np.float32)\ny_train = train.label.values","2e0affb0":"X_train","02ffa428":"#Split Data\nX_train, X_val, y_train, y_val = train_test_split(X_train,\n                                                 y_train,\n                                                 test_size=VAL_SPLIT,\n                                                 random_state=RANDOM_STATE)","efce55d9":"#Transform Data\nX_train = torch.from_numpy(X_train)\ny_train = torch.from_numpy(y_train).type(torch.LongTensor)\n\nX_val = torch.from_numpy(X_val)\ny_val = torch.from_numpy(y_val).type(torch.LongTensor)","19ac9c61":"#Visualization\nplt.imshow(X_train[RANDOM_IMAGE_INDEX].reshape(WIDTH,HEIGHT))\nplt.axis('off')\nplt.title(str(y_train[RANDOM_IMAGE_INDEX]))\nplt.show()","0c4af3ff":"class CNNModel(nn.Module):\n    \"\"\"\n    Input >> Conv1 >> ReLU >> Max Pool 1 >> Conv2 >> Max Pool 2 >> Flatten >> Full Connected >> Optimizer >> Output\n    \"\"\"\n    def __init__(self):\n        super(CNNModel,self).__init__()\n        \n        #Convolution 1\n        self.cnn1=nn.Conv2d(in_channels=CONV1_INPUT,out_channels=CONV1_FILTER,kernel_size=CONV1_KERNEL,stride=STRIDE,padding=PADDING)\n        self.relu1=nn.ReLU()\n        \n        #Max Pool 1\n        self.max_pool1=nn.MaxPool2d(kernel_size=POOLING1_KERNEL)\n        \n        #Convolution 2\n        self.cnn2=nn.Conv2d(in_channels=CONV2_INPUT,out_channels=CONV2_FILTER,kernel_size=CONV2_KERNEL,stride=STRIDE,padding=PADDING)\n        self.relu2=nn.ReLU()\n        \n        #Max Pool 2\n        self.max_pool2=nn.MaxPool2d(kernel_size=POOLING2_KERNEL)\n        \n        #Full Connected\n        self.fc1=nn.Linear(LINEAR_X,LINEAR_Y)\n        \n    def forward(self,X):\n        #Convolution 1\n        out=self.cnn1(X)\n        out=self.relu1(out)\n        \n        #Max Pool 1\n        out=self.max_pool1(out)\n        \n        #Convolution 2\n        out=self.cnn2(out)\n        out=self.relu2(out)\n        \n        #Max Pool 2\n        out=self.max_pool2(out)\n      \n        #Flatten\n        out=out.view(out.size(0),-1)\n        \n        #Full Connected  \n        out=self.fc1(out)\n        \n        return out","ac061fe5":"#batch size,epoch, iteration\nnum_epochs = N_ITERS\/(len(X_train)\/BATCH_SIZE)\nnum_epochs = int(num_epochs)","d119f5b5":"#train and validation tensor dataset\ntrain = torch.utils.data.TensorDataset(X_train,y_train)\nval = torch.utils.data.TensorDataset(X_val,y_val)","f5b215a8":"#Data Loader\ntrain_loader = DataLoader(train,batch_size=BATCH_SIZE,shuffle=False)\nval_loader = DataLoader(val,batch_size=BATCH_SIZE,shuffle=False)","91914fce":"#Create Model\nmodel = CNNModel()\n\n#Cross Entropy Loss\nerror = nn.CrossEntropyLoss()\n\n#SGD Optimizer\noptimizer = torch.optim.SGD(model.parameters(),lr=LEARNING_RATE)","232a7508":"#Training the Model\nstep = 0\nloss_train_list,loss_val_list = [],[]\niteration_list = []\naccuracy_list = []\n\nfor epoch in range(num_epochs):\n    for i,(images,labels) in enumerate(train_loader):\n    \n        train = Variable(images.view(BATCH_SIZE,COLOR_CHANNEL,WIDTH,HEIGHT))\n        label = Variable(labels)\n        \n        #Clear gradients\n        optimizer.zero_grad()\n        \n        #Forward Propagation\n        outputs = model(train)\n        \n        #Softmax and Cross Entropy Loss\n        loss_train = error(outputs,label)\n        \n        #Calculating gradients\n        loss_train.backward()\n        \n        #Update optimizer\n        optimizer.step()\n        \n        step +=1\n        \n        if step % THRESHOLD == 0:\n\n            #Accuracy\n            correct = 0\n            total = 0\n            \n            # switch off autograd\n            with torch.no_grad():\n\n                model.eval()\n\n                for images,labels in val_loader:\n                    val = Variable(images.view(BATCH_SIZE,COLOR_CHANNEL,WIDTH,HEIGHT))\n                    label = labels\n\n                    #Forward Propagation\n                    outputs = model(val)\n\n                    #Get predictions from the max value\n                    predicted = torch.max(outputs.data,1)[1]\n\n                    #Total number of labels\n                    total += len(labels)\n                    correct += (predicted==labels).sum()\n\n                accuracy = PERCENTAGE*correct\/float(total)\n                \n                model.train()\n                \n                #loss and iteration\n                loss_train_list.append(loss_train.data)\n                iteration_list.append(step)\n                accuracy_list.append(accuracy)\n\n\n                print('Iteration: {} Epochs: {}\/{} Train Loss: {:.3f} Validation Accuracy: {:.3f}'.format(step,epoch+1,num_epochs,loss_train.data,accuracy))","ba3204f2":"plt.plot(iteration_list,loss_train_list,color='green')\nplt.xlabel(\"Number of iteration\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training Loss\")\nplt.show()","25a5b445":"plt.plot(iteration_list,accuracy_list,color = \"blue\")\nplt.xlabel(\"Number of iteration\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Validation Accuracy\")\nplt.show()","f3d5a57a":"### Reference\n\n   * Introduction Image         : https:\/\/www.run.ai\/guides\/deep-learning-for-computer-vision\/deep-convolutional-neural-networks\/\n   * What is the view function? : https:\/\/stackoverflow.com\/questions\/42479902\/how-does-the-view-method-work-in-pytorch\n   * 4-Color Channel            : https:\/\/www.pluralsight.com\/guides\/building-your-first-pytorch-solution\n   * What is the CMYK?          : https:\/\/stackoverflow.com\/questions\/58900468\/what-is-the-4th-channel-in-an-image\n   * CNN and Pytorch Tutorial   : https:\/\/pytorch.org\/tutorials\/beginner\/blitz\/cifar10_tutorial.html\n   * CNN and Pytorch Tutorial   : https:\/\/www.pyimagesearch.com\/2021\/07\/19\/pytorch-training-your-first-convolutional-neural-network-cnn\/\n   * CNN and Pytorch Tutorial   : https:\/\/www.analyticsvidhya.com\/blog\/2019\/10\/building-image-classification-models-cnn-pytorch\/\n   * CNN and Pytorch Tutorial   : https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers\n   * CNN Tutorial               : https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n   \n   ","2bfe34ce":"# Convolutional Neural Network\n\n![cnn_intro.png](attachment:a5beb50c-e424-400c-af9b-9f3a88d07a55.png)\n"}}