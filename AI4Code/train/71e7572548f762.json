{"cell_type":{"0e52be0a":"code","53487d12":"code","2c28dd85":"code","9dd258c0":"code","1aab9c9b":"code","b5012724":"code","acc941f9":"code","abf28c79":"code","ae0ea77d":"code","fa26bbc7":"code","41bbdb27":"code","2139e220":"code","e445fddb":"code","979dc9f2":"code","62e2d40a":"code","bd1648a8":"code","7f3e2beb":"code","72496503":"code","d5eee473":"code","26db0935":"code","17db6706":"code","d706b547":"code","e0935f7a":"markdown","7b3693d4":"markdown","d5ae8666":"markdown","76cf0fca":"markdown","9a3633a3":"markdown","7bedcf57":"markdown","224d1be2":"markdown","d8ed5858":"markdown","3b87246d":"markdown","fd58cf8c":"markdown","26aa1352":"markdown","de580243":"markdown","87edd00e":"markdown","e1d82661":"markdown","971255fd":"markdown","ca924a20":"markdown","57a866ec":"markdown","767623cc":"markdown","11541fde":"markdown","b1e08563":"markdown"},"source":{"0e52be0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfile_name = os.listdir(\"..\/input\")[0]\ndf = pd.read_csv(os.path.join('..', 'input', file_name), parse_dates=[9])\n\nprint(\"The dataset has {} rows with {} features each\".format(len(df), len(df.columns)))\ndf.head()\n\n# Any results you write to the current directory are saved as output.","53487d12":"missing = []\nfor column in df.columns:\n    missing.append({'column': column, 'missing': df[column].isnull().sum()})\nmissing = pd.DataFrame.from_records(missing)\nmissing[missing.missing > 0]","2c28dd85":"fig = sns.countplot(y=\"estado\", data=df)\nfig.set_title(\"Status count\")\nplt.show()","9dd258c0":"print(\"Average wait time: {} minutes\".format(df.tiempo_demora.mean()))\nfig = sns.countplot(y=\"tiempo_demora\", data=df)\nfig.set_title(\"Waiting time count\")\nfig.set_ylabel(\"Minutes\")\nplt.show()\nfig = sns.boxplot(df.tiempo_demora)\nfig.set_title(\"Waiting time count\")\nfig.set_xlabel(\"Minutes\")\nplt.show()","1aab9c9b":"town_ids = df[['poblacion', 'id_poblacion']].drop_duplicates()\nprint(\"The same town may have different ids:\")\n(town_ids[town_ids.poblacion.apply(lambda name: name.strip().lower() == \"barcelona\")][:5])","b5012724":"towns_by_id = town_ids.groupby('id_poblacion').count().reset_index()\nduplicate_ids = towns_by_id[towns_by_id.poblacion > 1].id_poblacion.tolist()\nprint(\"Towns sharing ids:\")\ntown_ids[town_ids.id_poblacion.apply(lambda id: id in duplicate_ids)]","acc941f9":"df[df.poblacion == 'CITY PROVES']","abf28c79":"fig = sns.catplot(x=\"menor\", y=\"edad_valor\", data=df[~ df.edad_valor.isnull()])\nfig.axes.flatten()[0].set_title(\"Age according to the 'under_age' (menor) value\")\nplt.show()","ae0ea77d":"fig = sns.countplot(y=\"menor\", data=df)\nfig.set_title(\"Under age feature value count\")\nfig.set_ylabel(\"Value\")\nplt.show()","fa26bbc7":"fig = sns.distplot(df[~ df.edad_valor.isnull()].edad_valor, kde=False)\nfig.set_title(\"Patient age densitiy\")\nplt.show()","41bbdb27":"cps = df.cp\ncps = cps[~cps.isnull()]\ncps = cps.apply(lambda cp: str(int(cp)) if len(str(int(cp))) == 5 else '0' + str(int(cp)) )\n\nplt.figure(figsize=(30,4))\nfig = sns.countplot(cps, order = cps.value_counts().index)\nfig.set_title(\"Occurrences per Postal Code\")\nfig.set_xlabel(\"Postal Code\")\nplt.xticks(rotation=90)\nplt.show()","2139e220":"def parse_coord(value):\n    if type(value) == str:\n        return float(value.replace(',', '.'))\n    return value\n\ndf.longitud_corregida = df.longitud_corregida.apply(parse_coord)\ndf.latitude_corregida = df.latitude_corregida.apply(parse_coord)","e445fddb":"from mpl_toolkits.basemap import Basemap\n\n# compute bounding box\nmargin = 10 # buffer to add to the range\nlat_min = min(df.latitude_corregida) - margin\nlat_max = max(df.latitude_corregida) + margin\nlon_min = min(df.longitud_corregida) - margin\nlon_max = max(df.longitud_corregida) + margin\n\n# create map\nm = Basemap(llcrnrlon=lon_min,\n            llcrnrlat=lat_min,\n            urcrnrlon=lon_max,\n            urcrnrlat=lat_max)\nm.drawcoastlines()\nm.drawcountries()\nm.drawmapboundary(fill_color='#46bcec')\nm.fillcontinents(color = 'white',lake_color='#46bcec')\n# Add points\nm.scatter(df.longitud_corregida, df.latitude_corregida, marker = 'o', color='r', zorder=5)\n# Render\nplt.show()","979dc9f2":"lat_limit = 20\nlon_limit = 0\n\ndiscarded = df[(df.latitude_corregida <= lat_limit) | (df.longitud_corregida <= lon_limit)]\nprint(\"{} entries outside Catalonia\".format(len(discarded)))\ndiscarded.head()","62e2d40a":"\nsliced = df[(df.latitude_corregida > lat_limit) & (df.longitud_corregida > lon_limit)]\n\n# compute bounding box\nmargin = 2 # buffer to add to the range\nlat_min = min(sliced.latitude_corregida) - margin\nlat_max = max(sliced.latitude_corregida) + margin\nlon_min = min(sliced.longitud_corregida) - margin\nlon_max = max(sliced.longitud_corregida) + margin\n\n# create map\nm = Basemap(llcrnrlon=lon_min,\n            llcrnrlat=lat_min,\n            urcrnrlon=lon_max,\n            urcrnrlat=lat_max)\nm.drawcoastlines()\nm.drawcountries()\nm.drawmapboundary(fill_color='#46bcec')\nm.fillcontinents(color = 'white',lake_color='#46bcec')\n# Add points\nm.scatter(sliced.longitud_corregida, sliced.latitude_corregida, marker = 'o', color='red', zorder=5)\n# Render\nplt.show()","bd1648a8":"import folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\n\nheatmap = folium.Map(location=[41.6888531,1.6248349], zoom_start = 8) \nHeatMap(sliced[['latitude_corregida', 'longitud_corregida']].values).add_to(heatmap)\nheatmap","7f3e2beb":"df[['patologia']].drop_duplicates().sample(15, random_state=42)","72496503":"def format_month(d):\n    return \"{}-{}\".format(d.year, d.month if d.month > 9 else \"0\" + str(d.month))\n\ndf['month'] = df.Fecha.apply(format_month)\nplt.figure(figsize=(12,4))\nfig = sns.countplot(df.month, order=sorted(df.month.unique()))\nfig.set_title(\"Visits per month\")\nplt.xticks(rotation=70)\nplt.show()","d5eee473":"def format_hour(d):\n    return \"{}:00\".format(d.hour if d.hour > 9 else \"0\" + str(d.hour))\n\nhours = df.Fecha.apply(format_hour)\nplt.figure(figsize=(12,4))\nfig = sns.countplot(hours, order=sorted(hours.unique()))\nfig.set_title(\"Visits per hours\")\nplt.xticks(rotation=30)\nplt.show()","26db0935":"fig = sns.countplot(df.id_tipo)\nfig.set_title(\"Count of visit types\")\nplt.show()","17db6706":"plt.figure(figsize=(16,4))\nfig = sns.countplot(df.id_personal, order = df.id_personal.value_counts().index)\nfig.set_title('Count by id_personal')\nplt.xticks(rotation=70)\nplt.show()","d706b547":"fig = sns.countplot(df.nasistencias)\nfig.set_title(\"Count of number of visits\")\nplt.show()","e0935f7a":"Heatmap of points after filtering","7b3693d4":"Final set of coordinates after filtering","d5ae8666":"## 4.11 Number of visits analyisis\nThe value of the *nasistencias* is constant","76cf0fca":"## 4.10 Id service type analysis (id_personal)\n","9a3633a3":"Entries with positions outside Catalonia","7bedcf57":"## 4.7 Pathology analysis\nAn overview of the pathology column shows us that is not only about syntoms but also about address or instructions to be carried out:","224d1be2":"# 1. Introduction\n\nThis is an initial Exploratory Data Analysis for the [Home Medical Visits](https:\/\/www.kaggle.com\/HackandHealth\/home-medical-visits-healthcare) dataset released in the context [Hack&Health 2018](https:\/\/www.terrassa.cat\/es\/hack-health).\n","d8ed5858":"About 1\/3 of the patients are underage using the *menor* flag.","3b87246d":"We can observe that the flag *under_age* (menor) does not always stand for a correct age value. There's under age patients with *menor* field equal to 2 and over age patients with the the feature *menor* equal to 1. Also we there are many overage patients according with actual age equal to *0*, therefore missing values may be represented as 0. ","fd58cf8c":"# 3. Missing values\n2 columns have been found with missing values:","26aa1352":"## 4.9 Visit type\nThe value of the *id_tipo* is constant","de580243":"## 4.5 Postal code (CP) field analysis\n","87edd00e":"## 4.2 Response time analysis (tiempo_demora)","e1d82661":"# 2. Overview: File content and structure","971255fd":"## 4.4 Patient age analysis\nThere are two fields related to the patitent's age *edad_valor* and *menor*. According the following analysis:\n* When menor is *1* the patient is under age.\n* When menor is *2* the patient is over age.","ca924a20":"## 4.8 Date - time analysis\n\nThe dataset information stats on July 2015 and ends on September 2018. Probably starting and ending months have missing data. In the following plots we can appreciate a clear yearly seasonality pattern and also at day level","57a866ec":"Let's explore explore with the test records with town field 'CITY PROVES'. We can verify below that the postal code is also invalid (with value *88888.0*) so probably it is a **test record that should be deleted**","767623cc":"## 4.6 Coordinates analysis\nAs shown in the first map there are some points with invalid GPS coordinates placed outside Spain and also outside Catalonia. Afterwards we select them those.","11541fde":"# 4 Feature visualisations\n## 4.1 Analysis of status (estado) field\nThe meaning of the status field is the following:\n1. Pending\n2. Accepted\n3. Rejected\n4. Closed\n5. Canceled\n6. Incidence\n7. Reassign\n8. Duplicate","b1e08563":"## 4.3 Town fields analysis\nThere are two fields related to town data. We should first that their values have a 1 to 1 correspondance among them."}}