{"cell_type":{"90160eaa":"code","cde8a849":"code","552d3248":"code","fdc0acbd":"code","c61a6624":"code","51c4ac4c":"code","1057fed7":"code","e23cb0f0":"code","25b79108":"code","bd6d58f4":"code","44c14c75":"code","198b2354":"code","55df6a95":"code","ba4e3e45":"code","b5616dd0":"code","629d9736":"code","1b74e6d3":"code","b34e08c2":"code","c2e5e2cd":"code","5f0defef":"markdown","9c7e24e7":"markdown","d002fd32":"markdown","be2136d9":"markdown","79d1c949":"markdown","80516990":"markdown","ce50ea81":"markdown"},"source":{"90160eaa":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","cde8a849":"#installing EvalML\n!pip install EvalML","552d3248":"# getting list of problem types\nimport evalml\nevalml.problem_types.problem_types.ProblemTypes.all_problem_types","fdc0acbd":"# getting list of objectives\nevalml.objectives.get_all_objective_names() ","c61a6624":"df = pd.read_csv(\"\/kaggle\/input\/income-classification\/income_evaluation.csv\")\ndf.head()","51c4ac4c":"df.shape","1057fed7":"df[\" income\"].value_counts()","e23cb0f0":"df[\" income\"].value_counts().plot.pie(autopct=\"%.1f%%\",figsize=(7,7))\nplt.title(\"Pie chart of Income\")","25b79108":"X = df.drop(\" income\", axis=1)\ny = df[\" income\"]","bd6d58f4":"X_train, X_test, y_train, y_test = evalml.preprocessing.split_data(X, y, problem_type='binary', test_size=.2)\nprint(\"Size of training data : \", X_train.shape[0])\nprint(\"Size of test data : \", X_test.shape[0])","44c14c75":"type(X_train)","198b2354":"X_train[[\" workclass\", \" occupation\"]].head().T","55df6a95":"from evalml import AutoMLSearch","ba4e3e45":"automl = AutoMLSearch(X_train=X_train, y_train=y_train, problem_type=\"binary\", objective=\"F1\")\nautoml.search()","b5616dd0":"automl.rankings","629d9736":"# getting details about best pipeline\nautoml.describe_pipeline(automl.rankings.iloc[0][\"id\"])","1b74e6d3":"# getting details about 2nd best pipeline\nautoml.describe_pipeline(automl.rankings.iloc[1][\"id\"])","b34e08c2":"#visualizing best pipeline flow \nbest_pipeline = automl.best_pipeline\nbest_pipeline.graph()","c2e5e2cd":"best_pipeline.score(X_test, y_test, objectives = [\"auc\",\"f1\"]) ","5f0defef":"### 4. Interacting with pipelines","9c7e24e7":"### 2. Splitting into train-test set","d002fd32":"## Notebook - Table of Contents\n\n\n1. [**Basic**](#1.-Basic)  \n    1.1 [**Importing the necessary libraries & installing EvalML**](#1.1-Importing-the-necessary-libraries-&-installing-EvalML)    \n    1.2 [**Loading the income data and basic analysis**](#1.2-Loading-the-income-data-and-basic-analysis)         \n2. [**Splitting into train-test set**](#2.-Splitting-into-train-test-set) \n3. [**Finding best ML model pipeline using EvalML**](#3.-Finding-best-ML-model-pipeline-using-EvalML)  \n4. [**Interacting with pipelines**](#4.-Interacting-with-pipelines)                         \n5. [**Evaluating the best pipeline on test data**](#5.-Evaluating-the-best-pipeline-on-test-data)  ","be2136d9":"#### 1.2 Loading the income data and basic analysis","79d1c949":"### 1. Basic\n\n#### 1.1 Importing the necessary libraries & installing EvalML","80516990":"### 5. Evaluating the best pipeline on test data","ce50ea81":"### 3. Finding best ML model pipeline using EvalML"}}