{"cell_type":{"d919432e":"code","d05f29b3":"code","1f936834":"code","13bfb04c":"code","621a899a":"code","3bc853a9":"code","0190c9f1":"code","302595d3":"code","c6be681f":"code","99eec9c1":"code","0cd74ef5":"code","8c69a77e":"code","6e777e39":"code","b01b4ae5":"code","b6663ea3":"code","3ccf21c4":"code","77975bdb":"code","907a19ab":"code","dad34a3f":"code","c0bd1c96":"code","1623115e":"code","8bd83ed2":"code","2611c9bc":"code","ff527c4a":"code","f87f6b06":"code","373e1fc5":"code","8c55153e":"code","a747e991":"code","244f1c15":"code","a30816c2":"code","6e18ffef":"code","031711fa":"code","06695a22":"code","80ecf96b":"code","54187ad4":"code","d1e2784c":"code","e9fc099a":"code","06ada60e":"code","2eb16684":"code","815f9cb8":"code","ff77d831":"code","5ec9c49c":"code","ba76f9f6":"code","aadfb579":"code","1ea812ed":"code","6dbf662f":"code","abf33a1e":"code","c222a4d0":"code","1a00c60a":"code","2086e1ab":"code","b7047c1e":"markdown","958c3f6a":"markdown"},"source":{"d919432e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d05f29b3":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv\")\ndf","1f936834":"df.shape","13bfb04c":"# STORING the label column in l variable\nl = df[\"label\"]\nl","621a899a":"d = df.drop(\"label\",axis=1)\nd","3bc853a9":"plt.figure(figsize=(10,10))\nidx = 102\ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28)\nplt.imshow(grid_shape,cmap=\"gray\")\nplt.show()\n\nprint(l[idx])","0190c9f1":"df1 = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")\ndf1","302595d3":"df1.shape","c6be681f":"# Storing the label column in variable l\nl = df1[\"label\"]\nl\n","99eec9c1":"# Storing the pixcel in d \nd = df1.drop(\"label\",axis=1)\nd","0cd74ef5":"print(d.shape)\nprint(l.shape)","8c69a77e":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10))\n#idx=int(input(\"Enter the index : \"))\nidx=100\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28)\nplt.imshow(grid_shape,cmap=\"RdBu\")\nplt.show()\n\nprint(l[idx])","6e777e39":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10))\n#idx=int(input(\"Enter the index : \"))\nidx=1000\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28)\nplt.imshow(grid_shape,cmap=\"rocket\")\nplt.show()\n\nprint(l[idx])","b01b4ae5":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=20\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"afmhot\");\nplt.show();\n\nprint(l[idx])","b6663ea3":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=1010\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"coolwarm\");\nplt.show();\n\nprint(l[idx])","3ccf21c4":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=333\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"Blues\");\nplt.show();\n\nprint(l[idx])","77975bdb":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx = 5001\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"bone\");\nplt.show();\n\nprint(l[idx])","907a19ab":"# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=932\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"icefire\");\nplt.show();\n\nprint(l[idx])","dad34a3f":"\n# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=900\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"Oranges\");\nplt.show();\n\nprint(l[idx])","c0bd1c96":"\n# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=123\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"gist_ncar\");\nplt.show();\n\nprint(l[idx])","1623115e":"\n# Defining the size in which we want the image to be displayed\nplt.figure(figsize=(10,10));\n#idx=int(input(\"Enter the index : \"));\nidx=455\n# Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 \ngrid_shape = d.iloc[idx].as_matrix().reshape(28,28);\nplt.imshow(grid_shape,cmap=\"viridis\");\nplt.show();\n\nprint(l[idx])","8bd83ed2":"### PCA for data visualization\n# To use pca we require dataset to be standardized\n\ndf","2611c9bc":"data = df.drop(\"label\",axis=1)\ndata","ff527c4a":"label = df[\"label\"]\nlabel","f87f6b06":"# Standardizing the data\nfrom sklearn.preprocessing import StandardScaler\nstandardized_data = StandardScaler().fit_transform(data)\nstandardized_data","373e1fc5":"# PCA \nfrom sklearn.decomposition import PCA\npca = PCA()\npca.n_components = 2\npca_data = pca.fit_transform(standardized_data)\npca_data","8c55153e":"# Converting label series to a dataframe\na = label.to_frame(name=\"label\")\na","a747e991":"b = pd.DataFrame(pca_data,columns=(\"1st principal\",\"2nd principal\"))\nb","244f1c15":"df1 = pd.concat([a,b],axis=1)\ndf1","a30816c2":"# Visualizing the dataframe made using seaborn \nsns.FacetGrid(df1,hue=\"label\",size=10).map(plt.scatter,\"1st principal\",\"2nd principal\").add_legend();","6e18ffef":"# Visualization using TSNE \n# As in tsne computes neighbourhood of each point with other and then creates clusters so doing this computation takes a lot of time \n# therefore we will work only on first 5000 points\nstandardized_data_5000 = standardized_data[:5000,:]\nlen(standardized_data_5000)","031711fa":"label = label[:5000]\nlabel","06695a22":"#import tsne\nfrom sklearn.manifold import TSNE\nmodel = TSNE(random_state=0)\nmodel.n_component = 2\n### Configuring the parameters\n# the number of components = 2\n# the default perplexity= 30\n# default learning rate = 200\n# default maximum number of iterations for optimization = 1000\ntsne_data = model.fit_transform(standardized_data_5000)","80ecf96b":"tsne_data","54187ad4":"### Converting label to dataframe\na = pd.DataFrame(tsne_data,columns=(\"1st dim\",\"2nd dim\"))\na\n","d1e2784c":"b = label.to_frame(name=\"label\")\nb","e9fc099a":"df1 = pd.concat([a,b],axis=1)\ndf1","06ada60e":"plt.figure(figsize=(5,5))\n# Visualizing the dataframe made using seaborn \nsns.FacetGrid(df1,hue=\"label\",size=10).map(plt.scatter,\"1st dim\",\"2nd dim\").add_legend();\n","2eb16684":"model = TSNE(random_state=0,perplexity=100,n_iter=5000)\nmodel.n_component = 2\n### Configuring the parameters\n# the number of components = 2\n# the default perplexity= 30\n# default learning rate = 200\n# default maximum number of iterations for optimization = 1000\ntsne_data = model.fit_transform(standardized_data_5000)","815f9cb8":"tsne_data","ff77d831":"### Converting label to dataframe\na = pd.DataFrame(tsne_data,columns=(\"1st dim\",\"2nd dim\"))\na\n","5ec9c49c":"b = label.to_frame(name=\"label\")\nb","ba76f9f6":"df1 = pd.concat([a,b],axis=1)\ndf1","aadfb579":"plt.figure(figsize=(5,5))\n# Visualizing the dataframe made using seaborn \nsns.FacetGrid(df1,hue=\"label\",size=10).map(plt.scatter,\"1st dim\",\"2nd dim\").add_legend();\n","1ea812ed":"model = TSNE(random_state=0,perplexity=50,n_iter=5000)\nmodel.n_component = 2\n### Configuring the parameters\n# the number of components = 2\n# the default perplexity= 30\n# default learning rate = 200\n# default maximum number of iterations for optimization = 1000\ntsne_data = model.fit_transform(standardized_data_5000)","6dbf662f":"tsne_data","abf33a1e":"### Converting label to dataframe\na = pd.DataFrame(tsne_data,columns=(\"1st dim\",\"2nd dim\"))\na\n","c222a4d0":"### Converting label to dataframe\na = pd.DataFrame(tsne_data,columns=(\"1st dim\",\"2nd dim\"))\na\n","1a00c60a":"df1 = pd.concat([a,b],axis=1)\ndf1","2086e1ab":"plt.figure(figsize=(5,5))\n# Visualizing the dataframe made using seaborn \nsns.FacetGrid(df1,hue=\"label\",size=10).map(plt.scatter,\"1st dim\",\"2nd dim\").add_legend();\n","b7047c1e":" **Storing the pixcel into grid_shape where first we select the row of the index provided by user thenconverting it to a matrix and reshaping it to 28*28 **","958c3f6a":"# "}}