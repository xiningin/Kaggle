{"cell_type":{"7191206c":"code","c58bc726":"code","5a522761":"code","10384937":"code","2adfb585":"code","6ebca1d1":"code","edb57df5":"code","7c766e36":"code","380ef568":"code","8ae5aa3d":"code","f97929f3":"code","86a23558":"code","2937922c":"code","7135c1e8":"code","3eaca69c":"code","e034fd6c":"code","233ed696":"code","7991e1f5":"code","4ad84a56":"code","300b8bba":"markdown","362eca4c":"markdown","fafccc89":"markdown","78b9c5a0":"markdown","57225e9e":"markdown","425aff93":"markdown","c4c1d88f":"markdown","1d93893d":"markdown","b3fbc692":"markdown","e7034b54":"markdown","2825bd7d":"markdown","1aea49b4":"markdown"},"source":{"7191206c":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport glob\nimport matplotlib.pyplot as plt\n","c58bc726":"!pip install visualkeras","5a522761":"train_data=pd.read_csv('..\/input\/gtsrb-german-traffic-sign\/Train.csv',usecols=['ClassId','Path','Width','Height'],)\ntest_data=pd.read_csv('..\/input\/gtsrb-german-traffic-sign\/Test.csv',usecols=['ClassId','Path','Width','Height'],)\n\ntrain_data.rename({'ClassId':'label','Path':'path'},inplace=True,axis=1)\ntest_data.rename({'ClassId':'label','Path':'path'},inplace=True,axis=1)\n\nprint(train_data.head())\nprint()\nprint('NO. of classes')\nprint(train_data['label'].nunique())","10384937":"data = []\nlabels = []\nclasses = 43\ncur_path = '..\/input\/gtsrb-german-traffic-sign\/Train'\nfor i in os.listdir(cur_path):\n    dir=cur_path+'\/'+i;\n    for j in os.listdir(dir):\n        img_path=dir+'\/'+j;\n        image=cv2.imread(img_path,-1)\n        image=cv2.resize(image,(30,30),interpolation = cv2.INTER_NEAREST)\n        data.append(image)\n        labels.append(i)\ndata=np.array(data)\nlabels=np.array(labels)\nprint(data.shape,labels.shape)","2adfb585":"#Splitting training and testing dataset\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)\n#Converting the labels into one hot encoding\ny_train = to_categorical(y_train, 43)\ny_test = to_categorical(y_test, 43)","6ebca1d1":"classes = { 0:'Speed limit (20km\/h)',\n            1:'Speed limit (30km\/h)', \n            2:'Speed limit (50km\/h)', \n            3:'Speed limit (60km\/h)', \n            4:'Speed limit (70km\/h)', \n            5:'Speed limit (80km\/h)', \n            6:'End of speed limit (80km\/h)', \n            7:'Speed limit (100km\/h)', \n            8:'Speed limit (120km\/h)', \n            9:'No passing', \n            10:'No passing veh over 3.5 tons', \n            11:'Right-of-way at intersection', \n            12:'Priority road', \n            13:'Yield', \n            14:'Stop', \n            15:'No vehicles', \n            16:'Veh > 3.5 tons prohibited', \n            17:'No entry', \n            18:'General caution', \n            19:'Dangerous curve left', \n            20:'Dangerous curve right', \n            21:'Double curve', \n            22:'Bumpy road', \n            23:'Slippery road', \n            24:'Road narrows on the right', \n            25:'Road work', \n            26:'Traffic signals', \n            27:'Pedestrians', \n            28:'Children crossing', \n            29:'Bicycles crossing', \n            30:'Beware of ice\/snow',\n            31:'Wild animals crossing', \n            32:'End speed + passing limits',\n            33:'Turn right ahead', \n            34:'Turn left ahead', \n            35:'Ahead only', \n            36:'Go straight or right', \n            37:'Go straight or left', \n            38:'Keep right', \n            39:'Keep left', \n            40:'Roundabout mandatory', \n            41:'End of no passing', \n            42:'End no passing veh > 3.5 tons' }","edb57df5":"folders=os.listdir(cur_path)\ntrain_num=[]\nclass_num=[]\n\nfor folder in folders:\n    train_numbers=os.listdir(cur_path+'\/'+folder)\n    train_num.append(len(train_numbers))\n    class_num.append(classes[int(folder)])\n\nzipped_list=zip(train_num,class_num)\nsorted_list=sorted(zipped_list)\ntuples=zip(*sorted_list)\ntrain_num,class_num=[list(t) for t in tuples]\n\nplt.figure(figsize=(21,8))\nplt.bar(class_num,train_num)\nplt.xlabel('Classes')\nplt.ylabel('Count of classes')\nplt.xticks(class_num,rotation='vertical')\nplt.show()","7c766e36":"import random\nfrom matplotlib.image import imread\ndata_dir='..\/input\/gtsrb-german-traffic-sign'\nimgs=test_data['path'].values\nplt.figure(figsize=(25,25))\n\nfor i in range(1,26):\n    plt.subplot(5,5,i)\n    random_image_path=data_dir+'\/'+random.choice(imgs)\n    random_image=imread(random_image_path)\n    plt.imshow(random_image)\n    plt.grid(b=None)\n    plt.xlabel(random_image.shape[0],fontsize=20)\n    plt.ylabel(random_image.shape[0],fontsize=20)\n    \n    \n","380ef568":"import tensorflow.keras as keras\nfrom tensorflow.keras.models import Sequential\nimport tensorflow.keras.layers as layers\nimport tensorflow.keras.layers.experimental.preprocessing as preprocessing\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense\n\nmodel = Sequential()\nmodel.add(layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(30, 30, 3)))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(43, activation = \"softmax\"))\n","8ae5aa3d":"model.summary()","f97929f3":"import tensorflow as tf\ntf.keras.utils.plot_model(model,show_shapes=True)","86a23558":"import visualkeras\nvisualkeras.layered_view(model)","2937922c":"from keras.optimizers import RMSprop\noptimizer =  RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","7135c1e8":"epochs=10\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_test, y_test))","3eaca69c":"import matplotlib.pyplot as plt\nplt.figure()\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Accuracy')\nplt.xlabel('Epochs',fontsize=10)\nplt.ylabel('Accuracy',fontsize=10)\nplt.legend(['Accuracy','val_accuracy'])\nplt.grid(True)","e034fd6c":"plt.figure()\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['loss','val_loss'])\nplt.title('Loss')\nplt.xlabel('Epochs',fontsize=10)\nplt.ylabel('Loss',fontsize=10)\nplt.grid(True)","233ed696":"model.save('traffic_classifier.h5')","7991e1f5":"test_data.head()","4ad84a56":"test_labels=test_data['label'].values\ntest_paths=test_data['path']\ntest_images=[]\ntest_dir='..\/input\/gtsrb-german-traffic-sign'\nfor i in test_paths:\n    image=cv2.imread(test_dir+'\/'+i)\n    image=cv2.resize(image,(30,30),interpolation = cv2.INTER_NEAREST)\n    test_images.append(image)\ntest_images=np.array(test_images)\npred=model.predict_classes(test_images)\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(test_labels,pred))","300b8bba":"### Our model got a 96% accuracy on the training dataset and 98% accuracy on Validation dataset. With matplotlib, we plot the graph for accuracy and the loss.","362eca4c":"## ****So we achieved a 95% accuracy in this model on Test Data.****","fafccc89":"# ****Visualizing the Data****","78b9c5a0":"## ****Defining our Model****","57225e9e":"## ****Visualising our Model****","425aff93":"## ****Optimizing our Model****","c4c1d88f":"## ****Accuracy and Loss plots****","1d93893d":"# ***Model***","b3fbc692":"## ****Importing Necessary Libraries****","e7034b54":"# ****Loading the Dataset****","2825bd7d":"## ****Training our Model****","1aea49b4":"# ****Visualizing 25 random images from test data****"}}