{"cell_type":{"5b165316":"code","50664610":"code","279d32d8":"code","13a1151b":"code","1a05518c":"code","322bf3b6":"code","5e1ca155":"code","123e0f26":"code","cd99a731":"code","1abab97b":"code","623c5728":"code","a8cff4e2":"code","68154f54":"code","d35a2376":"code","ba38d453":"code","6751f477":"code","25622f13":"code","b8bf638c":"code","3414c214":"code","3b6e2463":"code","1c5104f6":"code","9998cd29":"code","c74374db":"code","677a1407":"code","acff5ddd":"code","c7be45c9":"code","0e99e6bd":"code","c2501b82":"code","0ac307c3":"code","db3356b3":"code","0e9f4917":"code","14bb5fa4":"code","4615b541":"code","386f854a":"code","e145bd9c":"code","3e107adf":"code","0d741191":"code","2653ba02":"code","708fb033":"code","1d682e84":"code","499902d4":"code","e02287a1":"code","af66f2d5":"code","00445a9c":"code","ad9a09a0":"code","0ae08313":"code","d1d3dd99":"code","c2e43710":"code","30e030ca":"code","ef8ebf89":"code","72e32f95":"code","0bde7b3d":"code","344e4f3f":"code","50ea9fb6":"code","bc626b54":"code","fb1b10f5":"code","7bdc139e":"code","a8bb5c1e":"code","800eeb1a":"code","53e4ca0b":"code","7eab2978":"code","2d8dddba":"code","81ad552b":"code","22a12953":"code","44e2a991":"code","a9ec9f72":"code","79c30035":"code","86e0a531":"code","d1f8eeb4":"code","c3330324":"code","7b779196":"code","35903b85":"code","53d7180a":"code","56474b89":"code","7a2315ae":"code","e5c6551e":"code","3d912325":"code","0385eacc":"code","7564664d":"code","d1d6c768":"code","fa0c6a12":"code","b46b7c4d":"code","6df6fec2":"code","d3443cc8":"code","75c2c590":"code","dabca14d":"code","bdfd00e3":"code","bac51b6b":"code","f4d7b4d1":"code","8ee2e3ad":"markdown","3ccb554b":"markdown","be14a930":"markdown","85ec7456":"markdown","f068fb92":"markdown"},"source":{"5b165316":"import pandas as pd \ndata=pd.read_csv('..\/input\/ltfs-av-data\/train.csv')\ndata.head() ","50664610":"data.dtypes","279d32d8":"# review if we have missing values \ndata.isnull().any()","13a1151b":"data[\"Employment.Type\"].isnull().sum()","1a05518c":"data[\"Employment.Type\"].hist() ","322bf3b6":"df=pd.DataFrame(data,columns=[\"Employment.Type\"]) # asignamos la columna auna variable\ndef cambio(x):\n    if x==\"Salaried\": return 0\n    if x==\"Self employed\": return 1   \ndf[\"tipo_empleo\"]= df[\"Employment.Type\"].apply(cambio)\nprint(df) ","5e1ca155":"# I create a new column with type of job Know in type float \ndata[\"kind_job\"]=df[\"tipo_empleo\"]","123e0f26":"# Elimino la columna Employmen type que ya se remplazo con un float \ndata=data.drop([\"Employment.Type\"],axis=1) \ndata[\"kind_job\"]= data[\"kind_job\"].fillna(method=\"ffill\")\npd.isnull(data[\"kind_job\"]).ravel().sum() ","cd99a731":"# Ahora observamos otro tipo de dato que no nos sirve \ndata[\"AVERAGE.ACCT.AGE\"]","1abab97b":"df=pd.DataFrame(data,columns=[\"AVERAGE.ACCT.AGE\"]) \n#Creo una funcion para remmplazar los strnng con una variable numerica \n\ndef change(x):\n    if x==\"0yrs 0mon\" or x==\"0yrs 1mon\"  or x==\"0yrs 2mon\" or x==\"0yrs 3mon\" or x== \"0yrs 4mon\" or x== \"0yrs 5mon\": return 1\n    elif x== \"0yrs 6mon\" or x== \"0yrs 7mon\" or x== \"0yrs 8mon\" or x== \"0yrs 9mon\" or x== \"0yrs 10mon\" or  x==\"0yrs 11mon\" or x== \"0yrs 12mon\": return 2\n    elif x== \"1yrs 0mon\" or x== \"1yrs 1mon\" or x== \"1yrs 2mon\" or x== \"1yrs 2mon\" or x== \"1yrs 3mon\" or x== \"1yrs 4mon\": return 3\n    elif x== \"1yrs 5mon\" or x== \"1yrs 6mon\" or x== \"1yrs 7mon\" or x== \"1yrs 8mon\" or x== \"1yrs 9mon\" or x== \"1yrs 10mon\": return 4\n    elif x== \"1yrs 11mon\" or x== \"1yrs 12mon\" or x== \"2yrs 0mon\" or x== \"2yrs 1mon\" or x== \"2yrs 2mon\" or x== \"2yrs 3mon\": return 5\n    else: return 6\n    ","623c5728":"df[\"AVERAGE_ACCT_AGE\"] = df[\"AVERAGE.ACCT.AGE\"].apply(change)\nprint(df) ","a8cff4e2":"# I replace the column with the new column on df \ndata[\"Aver_Act_Age\"]= df[\"AVERAGE_ACCT_AGE\"] ","68154f54":"# erase the column with categprical data \ndata= data.drop([\"AVERAGE.ACCT.AGE\"],axis=1)\n# data= data.drop([\"Aver_Act_Age\"],axis= 1) \ndata.columns.values ","d35a2376":"# observe another variable type object \ndata[\"Date.of.Birth\"]","ba38d453":"# Convert the date to age\nfrom datetime import datetime, date\n\n# the next function convert the date birth on age \n\ndef age(born):\n    born= datetime.strptime(born, \"%d-%m-%y\").date()  # \"%d\/%m\/%Y\"  %d-%m-%y\n    today=date.today() # i'll use the today day because a I need the right format \n    return (today.year - born.year)-2 -((today.month,today.month) < (born.month,born.day)) # si el mes y dia de estudio es menor que el mes y dia de nacimiento se le resta 1, pues an no ha pasado su cumplea\u00f1os\n","6751f477":"# create a new column with the age using de function age created \ndata[\"Age\"] = data[\"Date.of.Birth\"].apply(age) \n# Now I'will erase the column day of birth \ndata=data.drop([\"Date.of.Birth\"],axis=1) ","25622f13":"# I will erase dirsbursal date because is a data type object \ndata=data.drop([\"DisbursalDate\"],axis= 1)","b8bf638c":"data[\"PERFORM_CNS.SCORE.DESCRIPTION\"].unique() ","3414c214":"# I create a function to change de categories for numbers \ndef categorias(x):\n    if x== \"Not Scored: Not Enough Info available on the customer\" or x== \"No Bureau History Available\" or x==\"Not Scored: No Activity seen on the customer (Inactive)\" or x==\"Not Scored: Sufficient History Not Available\" or x==\"Not Scored: No Updates available in last 36 months\" or x==\"Not Scored: More than 50 active Accounts found\" or x==\"Not Scored: Only a Guarantor\": return 1\n    elif x== \"A-Very Low Risk\" or x== \"B-Very Low Risk\" or x== \"C-Very Low Risk\" or x== \"D-Very Low Risk\" or x==\"E-Low Risk\" or x==\"F-Low Risk\" or x==\"G-Low Risk\": return 2 \n    elif x== \"I-Medium Risk\" or x== \"H-Medium Risk\": return 3 \n    elif x== \"J-High Risk\" or x==\"L-Very High Risk\" or x==\"M-Very High Risk\" or x==\"K-High Risk\": return 4\n    else: return 0","3b6e2463":"# Apli de funtion in data PERFORM_CNS.SCORE.DESCRIPTION for chanche the data type object in tipe int\ndata[\"Score_Description\"]=data[\"PERFORM_CNS.SCORE.DESCRIPTION\"].apply(categorias) ","1c5104f6":"# drop the colum with the Strings\ndata= data.drop([\"PERFORM_CNS.SCORE.DESCRIPTION\"],axis=1)","9998cd29":"# I'll check the format of the column \ndata[\"CREDIT.HISTORY.LENGTH\"].unique() ","c74374db":"# pasamos los valores unicos a una lista y las ordenamos \nz= data[\"CREDIT.HISTORY.LENGTH\"].unique().tolist() \nz.sort() # para ordenar el array\n","677a1407":"months=['0yrs 0mon','0yrs 10mon','0yrs 11mon','0yrs 1mon','0yrs 2mon','0yrs 3mon','0yrs 4mon','0yrs 5mon','0yrs 6mon','0yrs 7mon','0yrs 8mon','0yrs 9mon']\none_year=['1yrs 0mon','1yrs 10mon','1yrs 11mon','1yrs 1mon','1yrs 2mon','1yrs 3mon','1yrs 4mon','1yrs 5mon','1yrs 6mon','1yrs 7mon','1yrs 8mon','1yrs 9mon']\ntwo=['2yrs 0mon','2yrs 10mon','2yrs 11mon','2yrs 1mon','2yrs 2mon','2yrs 3mon','2yrs 4mon','2yrs 5mon','2yrs 6mon','2yrs 7mon','2yrs 8mon','2yrs 9mon']\ntree=['3yrs 0mon','3yrs 10mon','3yrs 11mon','3yrs 1mon','3yrs 2mon','3yrs 3mon','3yrs 4mon','3yrs 5mon','3yrs 6mon','3yrs 7mon','3yrs 8mon','3yrs 9mon']\nfour=['4yrs 0mon','4yrs 10mon','4yrs 11mon','4yrs 1mon','4yrs 2mon','4yrs 3mon','4yrs 4mon','4yrs 5mon','4yrs 6mon','4yrs 7mon','4yrs 8mon','4yrs 9mon']\nfive=['5yrs 0mon','5yrs 10mon','5yrs 11mon','5yrs 1mon','5yrs 2mon','5yrs 3mon','5yrs 4mon','5yrs 5mon','5yrs 6mon','5yrs 7mon','5yrs 8mon','5yrs 9mon']\nsix=['6yrs 0mon','6yrs 10mon','6yrs 11mon','6yrs 1mon','6yrs 2mon','6yrs 3mon','6yrs 4mon','6yrs 5mon','6yrs 6mon','6yrs 7mon','6yrs 8mon','6yrs 9mon']\nseven=['7yrs 0mon','7yrs 10mon','7yrs 11mon','7yrs 1mon','7yrs 2mon','7yrs 3mon','7yrs 4mon','7yrs 5mon','7yrs 6mon','7yrs 7mon','7yrs 8mon','7yrs 9mon']\neight=['8yrs 0mon','8yrs 10mon','8yrs 11mon','8yrs 1mon','8yrs 2mon','8yrs 3mon','8yrs 4mon','8yrs 5mon','8yrs 6mon','8yrs 7mon','8yrs 8mon','8yrs 9mon']\nnine=['9yrs 0mon','9yrs 10mon','9yrs 11mon','9yrs 1mon','9yrs 2mon','9yrs 3mon','9yrs 4mon','9yrs 5mon','9yrs 6mon','9yrs 7mon','9yrs 8mon','9yrs 9mon']\nv10=['10yrs 0mon','10yrs 10mon','10yrs 11mon','10yrs 1mon','10yrs 2mon','10yrs 3mon','10yrs 4mon','10yrs 5mon','10yrs 6mon','10yrs 7mon','10yrs 8mon','10yrs 9mon']\nv11=['11yrs 0mon','11yrs 10mon','11yrs 11mon','11yrs 1mon','11yrs 2mon','11yrs 3mon','11yrs 4mon','11yrs 5mon','11yrs 6mon','11yrs 7mon','11yrs 8mon','11yrs 9mon']\nv12=['12yrs 0mon','12yrs 10mon','12yrs 11mon','12yrs 1mon','12yrs 2mon','12yrs 3mon','12yrs 4mon','12yrs 5mon','12yrs 6mon','12yrs 7mon','12yrs 8mon','12yrs 9mon']\nv13=['13yrs 0mon',\n '13yrs 10mon',\n '13yrs 11mon',\n '13yrs 1mon',\n '13yrs 2mon',\n '13yrs 3mon',\n '13yrs 4mon',\n '13yrs 5mon',\n '13yrs 6mon',\n '13yrs 7mon',\n '13yrs 8mon',\n '13yrs 9mon']\nv14=['14yrs 0mon',\n '14yrs 10mon',\n '14yrs 11mon',\n '14yrs 1mon',\n '14yrs 2mon',\n '14yrs 3mon',\n '14yrs 4mon',\n '14yrs 5mon',\n '14yrs 6mon',\n '14yrs 7mon',\n '14yrs 8mon',\n '14yrs 9mon']\nv15=['15yrs 0mon',\n '15yrs 10mon',\n '15yrs 11mon',\n '15yrs 1mon',\n '15yrs 2mon',\n '15yrs 3mon',\n '15yrs 4mon',\n '15yrs 5mon',\n '15yrs 6mon',\n '15yrs 7mon',\n '15yrs 8mon',\n '15yrs 9mon']\nv16=['16yrs 0mon',\n '16yrs 10mon',\n '16yrs 11mon',\n '16yrs 1mon',\n '16yrs 2mon',\n '16yrs 3mon',\n '16yrs 4mon',\n '16yrs 5mon',\n '16yrs 6mon',\n '16yrs 7mon',\n '16yrs 8mon',\n '16yrs 9mon']\nv17=['17yrs 0mon',\n '17yrs 10mon',\n '17yrs 11mon',\n '17yrs 1mon',\n '17yrs 2mon',\n '17yrs 3mon',\n '17yrs 4mon',\n '17yrs 5mon',\n '17yrs 6mon',\n '17yrs 7mon',\n '17yrs 8mon',\n '17yrs 9mon']\nv18=['18yrs 0mon',\n '18yrs 10mon',\n '18yrs 11mon',\n '18yrs 1mon',\n '18yrs 2mon',\n '18yrs 4mon',\n '18yrs 5mon',\n '18yrs 6mon',\n '18yrs 8mon']  \nv19=['19yrs 0mon',\n '19yrs 10mon',\n '19yrs 11mon',\n '19yrs 1mon',\n '19yrs 3mon',\n '19yrs 4mon',\n '19yrs 5mon',\n '19yrs 6mon',\n '19yrs 7mon',\n '19yrs 8mon',\n '19yrs 9mon']\ntwenty=['20yrs 0mon','20yrs 10mon','20yrs 11mon','20yrs 1mon','20yrs 2mon','20yrs 4mon','20yrs 5mon','20yrs 6mon','20yrs 8mon','20yrs 9mon']\nt1=['21yrs 11mon','21yrs 1mon','21yrs 2mon','21yrs 3mon','21yrs 5mon','21yrs 8mon','21yrs 9mon']\nt2=['22yrs 0mon','22yrs 10mon','22yrs 11mon','22yrs 1mon','22yrs 2mon','22yrs 3mon','22yrs 4mon','22yrs 6mon','22yrs 7mon']\nt3=['23yrs 1mon','23yrs 2mon','23yrs 3mon','23yrs 4mon','23yrs 6mon']\nt4=['24yrs 0mon','24yrs 2mon','24yrs 4mon','24yrs 7mon','24yrs 8mon']\nt5=['25yrs 0mon','25yrs 11mon','25yrs 6mon','25yrs 7mon','25yrs 8mon']\nt6=['26yrs 11mon','26yrs 3mon','26yrs 8mon']\nt7=['27yrs 3mon','27yrs 4mon']\nt8=['28yrs 1mon','28yrs 3mon','28yrs 7mon','28yrs 9mon']\nt9=['29yrs 1mon','29yrs 7mon','30yrs 7mon',\n '30yrs 9mon',\n '34yrs 5mon',\n '35yrs 3mon',\n '37yrs 5mon',\n '39yrs 0mon']","acff5ddd":"def historia(x):\n    if x in months or x in one_year or x in two or x in tree: return 1\n    elif x in four or x in five or x in six : return 2\n    elif x in seven or x in eight or x in nine: return 3\n    elif x in v10 or x in v11 or x in v12: return 4\n    elif x in v13 or x in v14 or x in v15: return 5\n    elif x in v16 or x in v17 or x in v18 or x in v19: return 6\n   \n    elif x in twenty or x in t1 or x in t2: return 7\n    elif x in t3 or x in t4 or x in t5: return 8\n    elif x in t4 or x in t5 or x in t6: return  9\n    elif x in t7 or x in t8 or x in t9: return 10\n    else: return 0","c7be45c9":"# Aplico este  \ndata[\"Credit_History\"] =data[\"CREDIT.HISTORY.LENGTH\"].apply(historia) \ndata[\"Credit_History\"].hist() ","0e99e6bd":"data=data.drop([\"CREDIT.HISTORY.LENGTH\"],axis=1)","c2501b82":"# Removere la columana user ID porque no aporta valor al modelo\ndata= data.drop([\"UniqueID\"], axis=1) ","0ac307c3":"data[\"Age\"].describe()","db3356b3":"# observamos que Age tiene valores negativos lo cual es incorrecto por tanto eliminaremos estos y los pasaremos a valor absoluto\n\n# pasamos a una varible la columna \nnum= data[\"Age\"]._get_numeric_data() \nnum[num < 0] = abs(num) #remplazamos los menores a 0 con el valor absoluto de este","0e9f4917":"# borramos la columan Age que tiene valores negativos \ndata=data.drop([\"Age\"],axis=1) ","14bb5fa4":"# Y la creamos de nuevo ya sin valores negativos  \ndata[\"Age\"]= num\ndata[\"Age\"].hist()","4615b541":"data=data.drop(['MobileNo_Avl_Flag'], axis=1 ) \ndata = data.rename(columns={'PERFORM_CNS.SCORE':'PERFORM_CNS_SCORE',\n                                   'PRI.NO.OF.ACCTS':'PRI_NO_OF_ACCTS','PRI.ACTIVE.ACCTS':'PRI_ACTIVE_ACCTS',\n                            'PRI.OVERDUE.ACCTS':'PRI_OVERDUE_ACCTS','PRI.CURRENT.BALANCE':'PRI_CURRENT_BALANCE',\n                           'SEC.ACTIVE.ACCTS':'SEC_ACTIVE_ACCTS', 'PRI.OVERDUE.ACCTS':'PRI.OVERDUE.ACCTS','PRI.CURRENT.BALANCE':'PRI_CURRENT_BALANCE',\n                           'PRI.SANCTIONED.AMOUNT':'PRI_SANCTIONED_AMOUNT','PRI.DISBURSED.AMOUNT':'PRI_DISBURSED_AMOUNT','SEC.NO.OF.ACCTS':'SEC_NO_OF_ACCTS',\n                           'SEC.ACTIVE.ACCTS':'SEC_ACTIVE_ACCTS','SEC.OVERDUE.ACCTS':'SEC_OVERDUE_ACCTS', 'SEC.CURRENT.BALANCE':'SEC_CURRENT_BALANCE',\n                           'SEC.SANCTIONED.AMOUNT':'SEC_SANCTIONED_AMOUNT','PRIMARY.INSTAL.AMT':'PRIMARY_INSTAL_AMT','SEC.INSTAL.AMT':'SEC_INSTAL_AMT',\n                           'NEW.ACCTS.IN.LAST.SIX.MONTHS':'NEW_ACCTS_IN_LAST_SIX_MONTHS','DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS':'DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS',\n                           'NO.OF_INQUIRIES':'NO_OF_INQUIRIES'})","386f854a":"import seaborn as sns\nimport matplotlib.pyplot as plt ","e145bd9c":"# variable a predicir\ndata[\"loan_default\"].head()","3e107adf":"#Iniciamos el analisis con la variable disbursed amount que es la cantidad de dinero prestada para el automovil\ndata[\"disbursed_amount\"].describe() ","0d741191":"# observamos un diagrama de caja para estudiar la distribuci\u00f3n de los datos, aqui podemos ver claramaente outliers en la varible  \nbox= sns.boxplot(data[\"disbursed_amount\"],color=\"red\")","2653ba02":"\"\"\"\nLa representaci\u00f3n predeterminada de los datos en catplot () usa un diagrama de dispersi\u00f3n. En realidad, hay dos diagramas de dispersi\u00f3n categ\u00f3ricos diferentes en seaborn. \nAdoptan diferentes enfoques para resolver el desaf\u00edo principal de representar datos categ\u00f3ricos con un diagrama de dispersi\u00f3n, que es que todos los puntos pertenecientes a una categor\u00eda \ncaer\u00edan en la misma posici\u00f3n a lo largo del eje correspondiente a la variable categ\u00f3rica. El enfoque utilizado por stripplot (), que es el \"tipo\" predeterminado en catplot () \nes ajustar las posiciones de los puntos en el eje categ\u00f3rico con una peque\u00f1a cantidad de \"jitter\" aleatorio:\n\"\"\"\n\n# Con este grafico podemos ver un scatter plot para cada categoria en el fraude y comparar a que cantidad prestada se hacen m\u00e1s fraudes \nsns.catplot(x=\"loan_default\", y=\"disbursed_amount\" , data=data)\n","708fb033":"# Con esta funcion podemos ver l distribuci\u00f3n con un diagrama de caja \nsns.catplot(x=\"loan_default\", y=\"disbursed_amount\",kind=\"box\", data=data)","1d682e84":"# para encontrar outliers usaremos el rango intercuartilico \n#IQR = Q3 - Q1 \nQ3=60413.000000\nQ1=47145.000000\nIQR=Q3  - Q1\n\n\"\"\"\nFor finding out the Outlier using IQR we have to define a multiplier which is 1.5 \nideally that will decide how far below Q1 and above Q3 will be considered as an Outlier.\n\"\"\"\nr1= Q1 - (1.5*IQR)\nprint(r1) # lo que este por debajo puede ser considerado un outlier\nr2= Q3 + (1.5*IQR) \nprint(r2) # lo que este por arribe puede ser considerado un outlier\n","499902d4":"# borramos el una fila con outlier\ndata= data.drop(data[data[\"disbursed_amount\"]== 592460.000000].index) ","e02287a1":"# Eliminar outliers con estadistico z\n\"\"\"\nZ score is an important measurement or score \nthat tells how many Standard deviation above or below a number is from the mean of the dataset\n\nAny positive Z score means the no. of standard deviation above the mean and a negative score means no. \nof standard deviation below the mean\n\"\"\"\n\n# Z= X- M\/S \n# La formula es la observacion menos la media sobre la desviaci\u00f3n estandart \n\n# importamos el paquete \nfrom scipy import stats\n\n# con esta linea de codigo aplicamos la funci\u00f3n para encontrar el valor z de cada observaci\u00f3n para nuestro dataframe\ndata['z_score']=stats.zscore(data['disbursed_amount']) # no la aplicaremos porque nos basaremos en el rango intercuartilico\n\n# cualquier valor z > 3 o z < -3 se considera por lo general un outlier\ndata[\"z_score\"] # vemos de manera simple cuantos datos tenemos como outlier ","af66f2d5":"# Ahora reviso los datos de asset cost\ndata[\"asset_cost\"].describe() ","00445a9c":"# grafico un boxplot \nsns.boxplot(data[\"asset_cost\"],color=\"green\") ","ad9a09a0":"# veo con un grafico de puntos la correlaci\u00f3n entre estas lo prestado y el costo del activo \ndata.plot(kind=\"scatter\", x=\"disbursed_amount\",y='asset_cost') ","0ae08313":"# Ahora vere la relaci\u00f3n entre la cantidad prestada, el costo del activo y la edad \nline1= data.groupby(\"Age\").disbursed_amount.mean() \nline2= data.groupby(\"Age\").asset_cost.mean() \n\n\nplt.figure(figsize=(10,8))\n\nsns.lineplot(data= line1, label=\"disbursed_amount\")\nsns.lineplot(data=line2,label=\"asset_cost\")\n\nplt.title(\"Cantidad prestado y costo del activo por grupo de edad\")\nplt.xlabel(\"Age\", size=15)\nplt.ylabel(\"Count\", size=15) ","d1d3dd99":"# Ahora anlizaremos que grupo de edad presenta m\u00e1s fraudes \npd.crosstab(data.Age, data.loan_default).plot(kind=\"bar\") ","c2e43710":"table= pd.crosstab(data.Age, data.loan_default)\ntable.div(table.sum(1).astype(float),axis=0).plot(kind=\"bar\",stacked=True) \n\n\"\"\"\nobservamos una ligera tendencia m\u00e1s elevada entre las personas con edades menores a 30 a\u00f1os \n\"\"\"","30e030ca":"data[\"ltv\"].hist()","ef8ebf89":"data[\"branch_id\"].hist()","72e32f95":"table=pd.crosstab(data.branch_id, data.loan_default)\ntable.div(table.sum(1).astype(float), axis=0).plot(kind=\"bar\",stacked=True) ","0bde7b3d":"data[\"supplier_id\"].hist()","344e4f3f":"table=pd.crosstab(data.manufacturer_id, data.loan_default)\ntable.div(table.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)","50ea9fb6":"# veremos el analisis de Current_pincode_ID\ndata[\"Current_pincode_ID\"].hist()","bc626b54":"#Analizo la variable State_ID, que se trata seguramnete del estado de donde se otorga el fiananciamiento \ndata[\"State_ID\"].hist(color=\"g\") ","fb1b10f5":"table3=pd.crosstab(data.State_ID, data.loan_default)\ntable3.div(table3.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True) \n\"\"\"\nSi se observa una m\u00e1s alto en el 11, 12 y 13 que son los m\u00e1s altos problemente se trata de alguno de los estados de EU\n\"\"\"","7bdc139e":"# vemos ahora la variable Employee_code_ID\ndata[\"Employee_code_ID\"].hist(color=\"r\")","a8bb5c1e":"table4= pd.crosstab(data.Aadhar_flag, data.loan_default)\ntable4.div(table4.sum(1).astype(float), axis= 0).plot(kind=\"bar\",stacked=True)","800eeb1a":"table5= pd.crosstab(data.PAN_flag, data.loan_default)\ntable5.div(table5.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)  ","53e4ca0b":"# tips = sns.load_dataset(\"data\") \nsns.catplot(x=\"PAN_flag\", y=\"disbursed_amount\", data=data)\n","7eab2978":"# Continuo con la variable VoterID_flag\t, al parecer todas estas con categoricas \ndata[\"VoterID_flag\"].hist() ","2d8dddba":"# de nuevo en al area 1 vemos un tanto m\u00e1s de datos atipicos \ntable6= pd.crosstab(data.VoterID_flag, data.loan_default)\ntable6.div(table6.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)  ","81ad552b":"# Seguimos con la variable Driving_flag\t que por ser muy poco significativa sera eliminada \ntable7= pd.crosstab(data.Driving_flag, data.loan_default)\ntable7.div(table7.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)  ","22a12953":"data=data.drop([\"Driving_flag\"], axis=1)\n# seguimos con la variable Passport_flag\ntabl8= pd.crosstab(data.Passport_flag, data.loan_default)\ntabl8.div(tabl8.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\n\"\"\"\nEn esta variable categorica si vemos una relacion mucho m\u00e1s clara \n\"\"\"","44e2a991":"# Solo puedes poner 6 graficas en un solo espacio, no mas \n\nplt.rcParams['figure.figsize']=(16,10) # El 16 es el largo de la grafixa y el 10 el ancho del recuadro\n\nplt.subplot(2,3,1) # el primer numero es como se expandira en lo vertical, el segundo en lo horizontal y el tercero la posici\u00f3n general(por eso es el unico que cambia )\nsns.distplot(data['PERFORM_CNS_SCORE'],color=\"red\",kde_kws={'bw':0.1})  # el bw :0.1 es el tama\u00f1o del linea de tendencia de la grafica ~~~~\nplt.title(\"Actuaci\u00f3n del credito\") \nplt.xticks(rotation=45) #los grados son para la inclinaci\u00f3n de las letras debajo del xlabel del grafico\n\nplt.subplot(2,3,2)\nsns.distplot(data['PRI_NO_OF_ACCTS'],color=\"purple\",kde_kws={'bw':0.1})\nplt.title(\"Activos primarios\")\nplt.xticks(rotation=45)\n\nplt.subplot(2, 3, 3)\nsns.distplot(data['PRI.OVERDUE.ACCTS'], color = 'blue', kde_kws={'bw':0.1})\nplt.title('Cuentas defraudadas')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 4) \nsns.distplot(data['PRI_SANCTIONED_AMOUNT'], color = 'green', kde_kws={'bw':0.1})\nplt.title('Cantidad sancionada')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 5) \nsns.distplot(data['PRI_DISBURSED_AMOUNT'], color = 'orange', kde_kws={'bw':0.1})\nplt.title('Cantidad prestada')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 6) \nsns.distplot(data['SEC_NO_OF_ACCTS'], color = 'red', kde_kws={'bw':0.1})\nplt.title('Prestamo tomado por el cliente')\nplt.xticks(rotation = 45)\n\n","a9ec9f72":"plt.rcParams['figure.figsize']=(16,10) # El 16 es el largo de la grafixa y el 10 el ancho del recuadro\n\nplt.subplot(2,3,1) # el primer numero es como se expandira en lo vertical, el segundo en lo horizontal y el tercero la posici\u00f3n general(por eso es el unico que cambia )\nsns.distplot(data['SEC_ACTIVE_ACCTS'],color=\"red\",kde_kws={'bw':0.1})  # el bw :0.1 es el tama\u00f1o del linea de tendencia de la grafica ~~~~\nplt.title(\"Prestamo activo\") \nplt.xticks(rotation=90) #los grados son para la inclinaci\u00f3n de las letras debajo del xlabel del grafico\n\nplt.subplot(2,3,2)\nsns.distplot(data['SEC_OVERDUE_ACCTS'],color=\"purple\",kde_kws={'bw':0.1})\nplt.title(\"Prestamo sobregirado\")\nplt.xticks(rotation=45)\n\nplt.subplot(2, 3, 3)\nsns.distplot(data['SEC_CURRENT_BALANCE'], color = 'red', kde_kws={'bw':0.1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 4)\nsns.distplot(data['SEC_SANCTIONED_AMOUNT'], color = 'green', kde_kws={'bw':0.1})\nplt.title('Cantidad penalizada')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 5)\nsns.distplot(data['SEC.DISBURSED.AMOUNT'], color = 'blue', kde_kws={'bw':0.1})\nplt.title('Cantidad entregada')\nplt.xticks(rotation = 45)\n\n\nplt.subplot(2, 3, 6)\nsns.distplot(data['PRIMARY_INSTAL_AMT'], color = 'orange', kde_kws={'bw':0.1})\nplt.title('Amt primario')\nplt.xticks(rotation = 45)","79c30035":"\"\"\"\n'SEC_INSTAL_AMT',\n       'NEW_ACCTS_IN_LAST_SIX_MONTHS',\n       'DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS', 'NO_OF_INQUIRIES'\n       \n\"\"\"\nplt.rcParams['figure.figsize']=(16,10) # El 16 es el largo de la grafixa y el 10 el ancho del recuadro\n\nplt.subplot(2,3,1) # el primer numero es como se expandira en lo vertical, el segundo en lo horizontal y el tercero la posici\u00f3n general(por eso es el unico que cambia )\nsns.distplot(data['SEC_INSTAL_AMT'],color=\"green\",kde_kws={'bw':0.1})  # el bw :0.1 es el tama\u00f1o del linea de tendencia de la grafica ~~~~\nplt.title(\"Amt instalado\") \nplt.xticks(rotation=90) #los grados son para la inclinaci\u00f3n de las letras debajo del xlabel del grafico\n\nplt.subplot(2,3,2)\nsns.distplot(data['NEW_ACCTS_IN_LAST_SIX_MONTHS'],color=\"purple\",kde_kws={'bw':1})\nplt.title(\"Cuentas nuevas\")\nplt.xticks(rotation=45)\n\nplt.subplot(2, 3, 3)\nsns.distplot(data['DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS'], color = 'red', kde_kws={'bw':1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 3)\nsns.distplot(data['DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS'], color = 'red', kde_kws={'bw':1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 4)\nsns.distplot(data[\"NO_OF_INQUIRIES\"], color = 'purple', kde_kws={'bw':1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)\n\nplt.rcParams['figure.figsize']=(16,10) # El 16 es el largo de la grafixa y el 10 el ancho del recuadro\n\nplt.subplot(2,3,1) # el primer numero es como se expandira en lo vertical, el segundo en lo horizontal y el tercero la posici\u00f3n general(por eso es el unico que cambia )\nsns.distplot(data['SEC_INSTAL_AMT'],color=\"green\",kde_kws={'bw':0.1})  # el bw :0.1 es el tama\u00f1o del linea de tendencia de la grafica ~~~~\nplt.title(\"Amt instalado\") \nplt.xticks(rotation=90) #los grados son para la inclinaci\u00f3n de las letras debajo del xlabel del grafico\n\nplt.subplot(2,3,2)\nsns.distplot(data['NEW_ACCTS_IN_LAST_SIX_MONTHS'],color=\"purple\",kde_kws={'bw':1})\nplt.title(\"Cuentas nuevas\")\nplt.xticks(rotation=45)\n\nplt.subplot(2, 3, 3)\nsns.distplot(data['DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS'], color = 'red', kde_kws={'bw':1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 3)\nsns.distplot(data['DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS'], color = 'red', kde_kws={'bw':1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)\n\nplt.subplot(2, 3, 4)\nsns.distplot(data[\"NO_OF_INQUIRIES\"], color = 'purple', kde_kws={'bw':1})\nplt.title('Balanza actual')\nplt.xticks(rotation = 45)","86e0a531":"# Aver_Act_Age\ndata[\"Aver_Act_Age\"].hist(color=\"red\") ","d1f8eeb4":"# Comparamos la informaci\u00f3n de los scores con elloan default\nscore= pd.crosstab(data.Score_Description, data.loan_default)\nscore.div(score.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)","c3330324":"\nplt.rcParams['figure.figsize']=(16,10) \n\nplt.subplot(2,3,1) \nsns.distplot(data[\"Credit_History\"],color=\"green\",kde_kws={'bw':0.1}) \nplt.title(\"Amt instalado\") \nplt.xticks(rotation=90) \n","7b779196":"variables= data.columns.values.tolist() \nY=['loan_default']\nX=[a for a in variables if a not in Y]\nX ","35903b85":"# importamos paquetes necesarios \n\nfrom sklearn import datasets\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression","53d7180a":"lr= LogisticRegression() ","56474b89":"len(X) # 37\n# se usaran 37 varibles para el modelo, cargamos el numero de variables y la regresi\u00f3n lineal \nn= 37\nrfe= RFE(lr,n) # el primer parametro es el estimador y segundo el numero de variables del modelo","7a2315ae":"#entrenamos el modelo \n\nrfe=rfe.fit(data[X],data[Y].values.ravel()) \nprint(rfe.support_)\n# hacemos un zip para crizar los datos de las columnas con los de rfe.support\nz=zip(variables, rfe.support_)\nprint(z) ","e5c6551e":"list(z)\ncols=['disbursed_amount',\n 'asset_cost',\n 'ltv',\n 'branch_id',\n 'supplier_id',\n 'manufacturer_id',\n 'Current_pincode_ID',\n 'State_ID',\n 'Employee_code_ID',\n 'Aadhar_flag',\n 'PAN_flag',\n 'VoterID_flag',\n 'Passport_flag',\n 'PERFORM_CNS_SCORE',\n 'PRI_NO_OF_ACCTS',\n 'PRI_ACTIVE_ACCTS',\n 'PRI.OVERDUE.ACCTS',\n 'PRI_CURRENT_BALANCE',\n 'PRI_SANCTIONED_AMOUNT',\n 'PRI_DISBURSED_AMOUNT',\n 'SEC_NO_OF_ACCTS',\n 'SEC_ACTIVE_ACCTS',\n 'SEC_OVERDUE_ACCTS',\n 'SEC_CURRENT_BALANCE',\n 'SEC_SANCTIONED_AMOUNT',\n 'SEC.DISBURSED.AMOUNT',\n 'PRIMARY_INSTAL_AMT',\n 'SEC_INSTAL_AMT',\n 'NEW_ACCTS_IN_LAST_SIX_MONTHS',\n 'DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS',\n 'NO_OF_INQUIRIES',\n 'kind_job',\n 'Aver_Act_Age',\n 'Score_Description',\n 'Credit_History',\n 'Age',\n 'z_score']","3d912325":"# la funci\u00f3n pasada es para saber que vriables el modelo selecciono como reelevantes \nX=data[cols]\nY=data[Y]","0385eacc":"from sklearn import linear_model\nlogistic_model= linear_model.LogisticRegression() \nlogistic_model.fit(X,Y) ","7564664d":"R= logistic_model.score(X,Y)\nR*100","d1d6c768":"import numpy as np \nfrom sklearn.model_selection import train_test_split # esta linea de codigi es para inportar cross validation que no se puede con la nomenclaura pasada","fa0c6a12":"from sklearn.model_selection import cross_val_score\nscores =cross_val_score(linear_model.LogisticRegression(), X,Y, scoring=\"accuracy\", cv=10)\nscores.mean() ","b46b7c4d":"import numpy as np\nfrom sklearn.model_selection import train_test_split","6df6fec2":"X_train,X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.3, random_state=0) # test_size es para crear una test del 30% y un tras del 70% de los datos\n\n# el orden X_train, X_test Y_train, Y_test no puede ser cambiado o te dara un error tipo Bad input shape \n\n#X_train, X_test,Y_train,Y_test, =train_test_split(X,Y,test_size=0.3,random_state=0)","d3443cc8":"# vamos a relizar el modelo con scik learn  pero con las varibles de entrenamiento \nlm=linear_model.LogisticRegression()\nlm.fit(X_train, Y_train) \nprobabilidades= lm.predict_proba(X_test) ","75c2c590":"#CARGAMOS paquetes para la validaci\u00f3n\nfrom IPython.display import display, Math, Latex\ndisplay(Math(r'Y_p=\\begin{cases}0& si\\ p\\leq0.5\\\\1&si\\ p >0.05\\end{cases}')) # como el programa clasifica las pro por defecto\nprobabilidades","dabca14d":"probabilidades[:,1]","bdfd00e3":"# obtenenos la predici\u00f3n \npredicci\u00f3n=lm.predict(X_test)","bac51b6b":"# podemos ajustar el modelo menos estricto que 0.05, creamos un nuevo array de probabilidades \nprops=probabilidades[:,1] # para obtener solo la segunda columna\nprob_df=pd.DataFrame(props) \ntreshold=0.1\nprob_df[\"predicci\u00f3n\"]=np.where(prob_df[0] >= treshold,1,0)\n\n# esta linea dice si la probabilidad en la columna cero es mayor a threshold se catagolara como propenso es decir 1 y si no sera ceros es decir no propens","f4d7b4d1":"prob_df","8ee2e3ad":"### Data-Analysis ","3ccb554b":"### **Train Model with Scikit Learn** ","be14a930":"### Cross-Validation ","85ec7456":"### Select-Variables  ","f068fb92":"### **Data-Mining** "}}