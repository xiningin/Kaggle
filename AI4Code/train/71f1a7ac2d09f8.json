{"cell_type":{"e3c8312a":"code","e57b450c":"code","414fcca6":"code","86a038f1":"code","e612c9c5":"code","5391d745":"code","125db271":"code","6928238b":"code","387ec1e1":"code","6df72d6f":"code","11f2319a":"code","dcc6a0ab":"code","0f3f1c49":"code","02b06c0c":"code","bd5ac645":"code","3ca20745":"code","93a647ab":"code","993ead00":"code","617aba54":"code","582f6cea":"code","74ce107f":"code","7560f70b":"code","d8c1da33":"code","1ee9e7af":"code","cb1c741a":"code","0f1a4f26":"code","953699cc":"code","85add05a":"code","bee07fc4":"code","c359b21b":"code","6a97f49a":"code","88112f52":"code","53588457":"code","da85893c":"code","9a4df645":"code","c7741009":"code","d138ace7":"code","adbd20b1":"code","108f6678":"code","45e40fa1":"code","9ddaaf33":"code","f17ca0c4":"code","0f3290d7":"code","31c88496":"code","ca2ed863":"code","0a84b852":"code","48e8aa8b":"code","88bbd4be":"code","7dc1453a":"code","07aa7789":"code","852f2087":"code","650e449f":"code","ab52e588":"code","faed5d74":"code","f87f7acd":"code","b5b0e1b0":"code","01b987e9":"code","5a221eac":"code","a043f26f":"code","094ef938":"code","e7f2dc6b":"code","0baf247c":"code","3bbfed6c":"code","3cddf422":"code","a74ab152":"code","bb192116":"code","3b7a13e9":"code","470f3d3d":"code","39868901":"code","c41e4c83":"code","0f3bf1aa":"code","561d3bfb":"code","4a823cb2":"code","70f1fdf9":"code","487aa24e":"code","41c13b19":"code","de2e6610":"code","40d1197f":"code","43273b13":"code","26200ae1":"code","8c41081c":"code","2432025a":"code","a3ffa84b":"code","43b38953":"code","cabf5850":"code","d334354a":"code","544a2607":"markdown","acf40397":"markdown","3f62b12a":"markdown","e38353b0":"markdown","66780262":"markdown","07c16949":"markdown","cb579ee1":"markdown","9d10f9af":"markdown","917e4957":"markdown","576d05b6":"markdown","9f3ae7bc":"markdown","aab40cc9":"markdown","495d3926":"markdown","572737e0":"markdown","11075aed":"markdown","b6e9048c":"markdown","1c4504c9":"markdown","d99e223a":"markdown","41af28b6":"markdown","fa1348f2":"markdown","9cc268b6":"markdown"},"source":{"e3c8312a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport datetime as dt\n%matplotlib inline\nsns.set(color_codes=True)","e57b450c":"df = pd.read_csv(\"..\/input\/hackerearth-carnival-wars-challenge\/train.csv\")\ntest = pd.read_csv(\"..\/input\/hackerearth-carnival-wars-challenge\/test.csv\")\nsample = pd.read_csv(\"..\/input\/hackerearth-carnival-wars-challenge\/sample_submission.csv\")","414fcca6":"df.head()","86a038f1":"df.info()","e612c9c5":"df.columns","5391d745":"df.describe().T","125db271":"df.drop(['Product_id','Customer_name'],axis=1,inplace=True)","6928238b":"df.head()","387ec1e1":"df.shape","6df72d6f":"df.isnull().sum()","11f2319a":"df.dropna(axis=0,inplace=True)","dcc6a0ab":"df.isnull().sum()","0f3f1c49":"df.shape","02b06c0c":"df.drop_duplicates(inplace=True)\ndf.shape","bd5ac645":"corr_matrix = df.corr()\ncorr_matrix['Selling_Price'].sort_values(ascending = False)","3ca20745":"plt.figure(figsize=(12,7))\nsns.heatmap(corr_matrix,annot=True)","93a647ab":"def correlation(dataset, threshold):\n    col_corr = set()  # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n                colname = corr_matrix.columns[i]  # getting the name of column\n                col_corr.add(colname)\n    return col_corr\ncorrelation(df,0.8)","993ead00":"for i in df.columns:\n    print(\"Unique Values in Column {} are {}\".format(i,len(df[i].unique())))","617aba54":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import ExtraTreesRegressor","582f6cea":"X_temp = df.drop(['instock_date','Selling_Price'],axis=1)\nY_temp = df['Selling_Price']\nlb = LabelEncoder()\nX_temp['Loyalty_customer'] = lb.fit_transform(X_temp['Loyalty_customer']) \nX_temp['Product_Category'] = lb.fit_transform(X_temp['Product_Category']) ","74ce107f":"model = ExtraTreesRegressor()\nmodel.fit(X_temp,Y_temp)","7560f70b":"# plot graph of feature importance for better visualization\nfeat_import = pd.Series(model.feature_importances_,index = X_temp.columns)\nfeat_import.nlargest(13).plot(kind='bar')\nplt.show()","d8c1da33":"px.pie(df,names='Grade')","1ee9e7af":"plt.figure(figsize=(12,7))\npx.scatter(data_frame=df,x='Maximum_price',y='Selling_Price')","cb1c741a":"px.scatter(data_frame=df,x='Minimum_price',y='Selling_Price')","0f1a4f26":"px.box(df,y=['Selling_Price','Maximum_price','Minimum_price'])","953699cc":"px.histogram(data_frame=df,x='Market_Category',color='Grade')","85add05a":"px.histogram(data_frame=df,x='Product_Category',color='Loyalty_customer')","bee07fc4":"import plotly.figure_factory as ff","c359b21b":"sns.distplot(df.Maximum_price)","6a97f49a":"sns.distplot(df.Minimum_price)","88112f52":"sns.distplot(df.charges_1)","53588457":"x = df.Maximum_price\ny = df.Minimum_price\nz = df.charges_1\nhist_data = [x,y,z]\ngroup_labels = ['Maximum_price','Minimum_price','charges_1'] # name of the dataset\n\nfig = ff.create_distplot(hist_data, group_labels,show_hist=False)\nfig.show()","da85893c":"sns.distplot(df['Selling_Price'])","9a4df645":"sns.kdeplot(df['Selling_Price'])","c7741009":"(df[df['Selling_Price']<0]).shape","d138ace7":"df.shape","adbd20b1":"index_name =df[df['Selling_Price']<0].index\ndf.drop(index_name,inplace=True) \ndf.shape","108f6678":"sns.kdeplot(df['Selling_Price'])","45e40fa1":"df['Selling_Price'] = np.log1p(df.Selling_Price)\nsns.kdeplot(df['Selling_Price'])","9ddaaf33":"sns.distplot(df['Selling_Price'])","f17ca0c4":"sns.pairplot(df)","0f3290d7":"df.instock_date = pd.to_datetime(df['instock_date'])","31c88496":"df['instock_date_year'] = df['instock_date'].dt.year\ndf['instock_date_month'] = df['instock_date'].dt.month\ndf['instock_date_week'] = df['instock_date'].dt.week\ndf['instock_date_day'] = df['instock_date'].dt.day\ndf['instock_date_hour'] = df['instock_date'].dt.hour\ndf['instock_date_minute'] = df['instock_date'].dt.minute\ndf['instock_date_dayofweek'] = df['instock_date'].dt.dayofweek","ca2ed863":"df.drop('instock_date',axis=1,inplace=True)","0a84b852":"df.drop('Stall_no',axis=1,inplace=True)","48e8aa8b":"df = pd.get_dummies(df,columns=['Loyalty_customer','Product_Category','Grade','Discount_avail'],drop_first=True)","88bbd4be":"df.shape","7dc1453a":"df.head()","07aa7789":"X = df.drop('Selling_Price',axis=1)\nY = df['Selling_Price']","852f2087":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(np.array(X),np.array(Y),test_size=0.2,random_state=42)","650e449f":"X_train.shape,X_test.shape,Y_train.shape,Y_test.shape","ab52e588":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","faed5d74":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression,Lasso,ElasticNet,Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.metrics import mean_squared_log_error","f87f7acd":"lr = LinearRegression()\nlr.fit(X_train,Y_train)\npred = np.expm1(lr.predict(X_test))\ns1 = np.sqrt(mean_squared_log_error(Y_test,pred))\ns1","b5b0e1b0":"ls = Lasso(alpha=1)\nls.fit(X_train,Y_train)\npred_ls = np.expm1(ls.predict(X_test))\ns2 = np.sqrt(mean_squared_log_error(Y_test,pred_ls))\ns2","01b987e9":"rd = Ridge(alpha=1)\nrd.fit(X_train,Y_train)\npred_rd = np.expm1(rd.predict(X_test))\ns3 = np.sqrt(mean_squared_log_error(Y_test,pred_rd))\ns3","5a221eac":"en = ElasticNet(alpha=1)\nen.fit(X_train,Y_train)\npred_en = np.expm1(en.predict(X_test))\ns4 = np.sqrt(mean_squared_log_error(Y_test,pred_en))\ns4","a043f26f":"dt = DecisionTreeRegressor()\ndt.fit(X_train,Y_train)\npred_dt = np.expm1(dt.predict(X_test))\ns5 = np.sqrt(mean_squared_log_error(Y_test,pred_dt))\ns5","094ef938":"cat = CatBoostRegressor(iterations=500,loss_function='MAE',eval_metric='RMSE',task_type='GPU')\ncat.fit(X_train,Y_train,verbose=True)\npred_cat = np.expm1(cat.predict(X_test))\ns6 = np.sqrt(mean_squared_log_error(Y_test,pred_cat))\ns6","e7f2dc6b":"rf = RandomForestRegressor()\nrf.fit(X_train,Y_train)\npred_rf = np.expm1(rf.predict(X_test))\ns7 = np.sqrt(mean_squared_log_error(Y_test,pred_rf))\ns7","0baf247c":"params = {'n_estimators': 1000,\n          'max_depth': 4,\n          'min_samples_split': 5,\n          'learning_rate': 0.01,\n          'loss': 'ls'}\ngd =GradientBoostingRegressor(**params)\ngd.fit(X_train,Y_train)\npred_gd = np.expm1(gd.predict(X_test))\ns8 = np.sqrt(mean_squared_log_error(Y_test,pred_gd))\ns8","3bbfed6c":"test_score = np.zeros((params['n_estimators'],), dtype=np.float64)\nfor i, y_pred in enumerate(gd.staged_predict(X_test)):\n    test_score[i] = gd.loss_(Y_test, y_pred)\n\nfig = plt.figure(figsize=(6, 6))\nplt.subplot(1, 1, 1)\nplt.title('Deviance')\nplt.plot(np.arange(params['n_estimators']) + 1, gd.train_score_, 'b-',\n         label='Training Set Deviance')\nplt.plot(np.arange(params['n_estimators']) + 1, test_score, 'r-',\n         label='Test Set Deviance')\nplt.legend(loc='upper right')\nplt.xlabel('Boosting Iterations')\nplt.ylabel('Deviance')\nfig.tight_layout()\nplt.show()","3cddf422":"xg = XGBRegressor(n_estimators = 3000,learning_rate=0.01)\nxg.fit(X_train,Y_train)\npred_xg = np.expm1(xg.predict(X_test))\ns9 = np.sqrt(mean_squared_log_error(Y_test,pred_xg))\ns9","a74ab152":"lgb = LGBMRegressor()\nlgb.fit(X_train,Y_train,eval_set = (X_test,Y_test),early_stopping_rounds=1000)\npred_lgb = np.expm1(lgb.predict(X_test))\ns10 = np.sqrt(mean_squared_log_error(Y_test,pred_lgb))\ns10","bb192116":"\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]\n\n\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\n\n\n\nrf_random = RandomizedSearchCV(estimator=rf,param_distributions=random_grid,\n                               scoring='neg_mean_squared_error',\n                              n_iter=10,cv=5,verbose=2,random_state=42,n_jobs=1)\n\nrf_random.fit(X_train,Y_train)\n","3b7a13e9":"rf_random.best_params_","470f3d3d":"predictions = np.expm1(rf_random.predict(X_test))\ns11 = np.sqrt(mean_squared_log_error(Y_test,predictions))\ns11","39868901":"test = pd.read_csv('..\/input\/hackerearth-carnival-wars-challenge\/test.csv')","c41e4c83":"test.instock_date = pd.to_datetime(test['instock_date'])\ntest['instock_date_year'] = test['instock_date'].dt.year\ntest['instock_date_month'] = test['instock_date'].dt.month\ntest['instock_date_week'] = test['instock_date'].dt.week\ntest['instock_date_day'] = test['instock_date'].dt.day\ntest['instock_date_hour'] = test['instock_date'].dt.hour\ntest['instock_date_minute'] = test['instock_date'].dt.minute\ntest['instock_date_dayofweek'] = test['instock_date'].dt.dayofweek","0f3bf1aa":"test.drop(['Product_id','Customer_name','Stall_no','instock_date'],axis=1,inplace=True)","561d3bfb":"test = pd.get_dummies(test,columns=['Loyalty_customer','Product_Category','Grade','Discount_avail'],drop_first=True)","4a823cb2":"test.isnull().sum()","70f1fdf9":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values =np.NaN,strategy='median')\nimputer.fit(test)\nx = imputer.transform(test)","487aa24e":"test_new = pd.DataFrame(x,columns=test.columns)","41c13b19":"test_new.isnull().sum()","de2e6610":"test_new.head()","40d1197f":"test_new.shape","43273b13":"test = sc.transform(test_new)","26200ae1":"test_xg = np.expm1(xg.predict(test))\ntest_gd = np.expm1(gd.predict(test))\ntest_cat = np.expm1(cat.predict(test))\ntest_rf_random = np.expm1(rf_random.predict(test))\ntest_rf = np.expm1(rf.predict(test))\nfinal_test = (test_xg*0.5 + test_gd*0.2 + test_cat*0.1 + test_rf_random*0.1 + test_rf*0.1 )","8c41081c":"# test_pd = np.expm1(rf_random.predict(test))","2432025a":"test = pd.read_csv('..\/input\/hackerearth-carnival-wars-challenge\/test.csv')\nsubmit = pd.DataFrame()","a3ffa84b":"submit['Product_id'] = test.Product_id","43b38953":"submit['Selling_Price'] = final_test","cabf5850":"submit.head()","d334354a":"submit.to_csv('submit.csv',index=False)","544a2607":"it is right skwed and there are some values whose Selling Price is Negative.\nPrice of any Product can't be Negative so we will remove that row","acf40397":"# Shape of Train Dataset","3f62b12a":"**Loyal Customers in Different Product Category**","e38353b0":"# Splitting Data in Train & Test Set","66780262":"Maximum_price,Discount_avail,Minimum Price are the most Important Features","07c16949":"## Distribution of Some Features","cb579ee1":"# Removing Duplicate Rows","9d10f9af":"### Visualizing Outliers using Box Plot","917e4957":"# Data Visualization","576d05b6":"# Feature Importance","9f3ae7bc":"# Unique Values","aab40cc9":"### Relation Between Minimum Price and Selling Price","495d3926":"# Building a Model","572737e0":"### Relation Between Maximum Price and Selling Price","11075aed":"# Normalization","b6e9048c":"## Looking for Correlation with Selling Price","1c4504c9":"# Normalising the Target Column","d99e223a":"Therefore no Independent Variable is Highly Correlated with Each Other","41af28b6":"# Describing Data","fa1348f2":"**Looking Distribution Separately**","9cc268b6":"# Handling Missing Values"}}