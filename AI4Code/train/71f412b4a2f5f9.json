{"cell_type":{"5980e99a":"code","345477fe":"code","14918da3":"code","cf9429f5":"code","af31c29b":"code","8bf46865":"code","524ab752":"code","f3aa25e4":"code","41f7ff2a":"code","73fdd8c8":"code","4286f8ca":"code","59bd75dd":"code","77266e5d":"code","e7807375":"code","616b1d7a":"code","e3126b93":"code","e45cd39f":"code","e4eb919c":"code","0d709e06":"code","f42c2adb":"code","6fdc7780":"code","a28188f9":"markdown","01a3f060":"markdown","47d9ffac":"markdown","4b9cbdb5":"markdown","4f2294e5":"markdown","3e3b902b":"markdown","19f532f3":"markdown","7af49255":"markdown","1139ba4f":"markdown","cf7b8fbd":"markdown","b87b6086":"markdown","7c70a86d":"markdown","1d47795d":"markdown"},"source":{"5980e99a":"%%html\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css?family=Ewert|Roboto&effect=3d|ice|');\nbody {background-color: gainsboro;} \na {color: #37c9e1; font-family: 'Roboto';} \nh1 {color: #37c9e1; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;} \nh2, h3 {color: slategray; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;}\nh4 {color: #818286; font-family: 'Roboto';}\nspan {font-family:'Roboto'; color:black; text-shadow: 5px 5px 5px #aaa;}  \ndiv.output_area pre{font-family:'Roboto'; font-size:110%; color:lightblue;}      \n<\/style>\n\n%matplotlib inline","345477fe":"import pandas as pd","14918da3":"dataPath = '..\/input\/zoo-animal-classification\/'\nanimalClass = pd.read_csv(dataPath+'class.csv')\nzoo = pd.read_csv(dataPath+'zoo.csv')","cf9429f5":"# 1D(base) --> Series  \nrow = zoo.iloc[0]\ncol = zoo.eggs\nprint(type(row))\nprint(type(col))\n# 2D(base) --> DataFram\nprint(type(zoo))","af31c29b":"# zoo.head() # \u9ed8\u8ba4\u6253\u5370\u524d\u4e94\u884c\nzoo.head(4)\n# del zoo['hair'] # \u5220\u9664 zoo \u4e2d hair \u8fd9\u4e00\u5217\n# zoo.head()","8bf46865":"animalClass.head()","524ab752":"# row index location (positional indexing) --> iloc\nrow = zoo.iloc[0]\n\n# label based indexing --> loc\n# row = zoo.loc['bass'] # \u76f8\u5f53\u4e8e\u7528\u81ea\u5df1\u547d\u540d\u7684 label \u66ff\u6362\u81ea\u5e26\u7684 index\n\nprint(row)","f3aa25e4":"# according ['column name']\ncol = zoo['eggs']\n\n# according '.'\ncol = zoo.eggs\n\nprint(col)","41f7ff2a":"# describe each column\nzoo.describe()","73fdd8c8":"# describe one column\nzoo.eggs.describe()","4286f8ca":"zoo.mean() # .min() .max() .std() .mode() .corr() .mean()\nzoo.corr() # \u8ba1\u7b97\u76f8\u4e0d\u540c\u5217\uff08Series\uff09\u4e4b\u95f4\u7684\uff08DataFrame\uff09\nzoo.corrwith(zoo.eggs) # \u5206\u522b\u8ba1\u7b97 zoo\uff08DataFrame\uff09\u4e2d\u6240\u6709\u5217\u4e0e eggs\uff08Series\uff09\u7684\u76f8\u5173\u7cfb\u6570\nzoo.eggs.corr(zoo.milk) # \u8ba1\u7b97\u76f8\u5173\u7cfb\u6570\uff08one Series with the other Series\uff09","59bd75dd":"# choose some rows that satisfy the filter(zoo.eggs==0)\nmyFilter = zoo.eggs==0 # <1 or >1\nprint(\"myFilter:\\n\",myFilter)\nf_all = myFilter.any() # find the True  --> return Ture\nf_any = myFilter.all() # find the False --> return False\nprint(\"myFilter.any() : %s  \\nmyFilter.all() : %s\"%(f_all,f_any))","77266e5d":"zoo.shape # not zoo.shape()","e7807375":"zoo.head(4)","616b1d7a":"zoo.isnull().head(4)","e3126b93":"zoo.isnull().any().any() # try to find whether zoo has null values\uff08none\uff09","e45cd39f":"zoo.eggs[1] = None # create the null value\nzoo.head(4)","e4eb919c":"zoo = zoo.dropna() # delete the rows containing null values\nzoo.head(4) # index will not be reassigned","0d709e06":"zoo.hist() # will display histograms according to all Series(column) in zoo","f42c2adb":"legs = zoo.legs\nlegs.hist() # .boxplot()","6fdc7780":"legs.plot(kind='bar',figsize=(20,6))\n# help(legs.plot)","a28188f9":"## &#127766; Filter the Data","01a3f060":"## &#127767; Clean the Data","47d9ffac":"## &#127761; Setup and Read Dataset","4b9cbdb5":"## &#127761; Visualization","4f2294e5":"## &#127762; Data Structure","3e3b902b":"## &#127763; Rows Indexing","19f532f3":"## &#127764; Column Indexing","7af49255":"**The type of rows and columns of 'DataFrame' is \"Series\"**","1139ba4f":"## &#127765; Describe the Data","cf7b8fbd":"**More Information -->** [\ud83e\uddd0](https:\/\/www.kaggle.com\/harunshimanto\/pandas-with-data-science-ai)\n\n\n**Icons            -->** [\ud83d\udc7b](https:\/\/html-css-js.com\/html\/character-codes\/icons\/)","b87b6086":"## &#128064; Reference\n\n[1] https:\/\/www.kaggle.com\/harunshimanto\/pandas-with-data-science-ai","7c70a86d":"- `filter.any()` \u76f8\u5f53\u4e8e\u5bf9 `filter` \u8fdb\u884c\u6216 (or) \u8fd0\u7b97\uff0c\u5bfb\u627e `True` \n- `filter.all()` \u76f8\u5f53\u4e8e\u5bf9 `filter` \u8fdb\u884c\u4e0e (and) \u8fd0\u7b97\uff0c\u5bfb\u627e `False` ","1d47795d":"## &#127762; Print"}}