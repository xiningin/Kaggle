{"cell_type":{"dc4e91e6":"code","5893acff":"code","5522806a":"code","983d6c3b":"code","445d0680":"code","280260ec":"code","1a714a06":"code","ca89528a":"code","f7cd7a0b":"code","a47067bf":"code","ab52b9e8":"code","080e897f":"code","80a2acb3":"code","126096e1":"code","ab858090":"code","2dca419c":"code","5cd0d278":"code","b8753679":"markdown","57aaadda":"markdown","e69b1f0f":"markdown"},"source":{"dc4e91e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom pathlib import Path\nfrom PIL import Image\nimport os\nimport scipy\nfrom scipy import stats\n\n## Preprocessing\nfrom sklearn.model_selection import train_test_split\n## Metrics\nfrom sklearn.metrics import accuracy_score\n\nimport cv2\n## tensorflow & Keras\nimport tensorflow as tf\nimport tensorflow_hub as hub\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import array_to_img\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D , Flatten\nfrom keras.layers import Dropout, MaxPooling2D,AveragePooling2D\nfrom keras.callbacks import LearningRateScheduler,ReduceLROnPlateau","5893acff":"def clean_df(csv_path,dir_path):\n    labels = pd.read_csv(csv_path)\n    images = Path(dir_path)\n\n    ## read these all images paths as Series\n    images_paths = pd.Series(sorted(list(images.glob(r'*.png'))), name='Filepath').astype(str)\n    img_name = [img[-9:] for img in images_paths]\n    labels['id'] = img_name\n    cleandf = labels\n    if 'label' in cleandf.columns: \n        cleandf['label'] = cleandf['label'].astype(\"string\")\n    return cleandf","5522806a":"csv_path_train = '..\/input\/arabic-hwr-ai-pro-intake1\/train.csv'\ndir_path_train = '..\/input\/arabic-hwr-ai-pro-intake1\/train'\ncsv_path_test = '..\/input\/arabic-hwr-ai-pro-intake1\/test.csv'\ndir_path_test = '..\/input\/arabic-hwr-ai-pro-intake1\/test'\n\ntrain_df = clean_df(csv_path_train,dir_path_train)\ntest_df = clean_df(csv_path_test,dir_path_test)","983d6c3b":"train_df.info()","445d0680":"train_df.head()","280260ec":"datagen=ImageDataGenerator(rescale=1.\/255.,\n                           rotation_range=20,\n                           zoom_range=0.15,\n                           width_shift_range=0.15,\n                           height_shift_range=0.15,\n                           shear_range=0.15,\n                           fill_mode=\"nearest\",validation_split=0.2)\n\ntrain_generator=datagen.flow_from_dataframe(\ndataframe=train_df,\ndirectory=\"..\/input\/arabic-hwr-ai-pro-intake1\/train\",\nx_col=\"id\",\ny_col=\"label\",\nsubset=\"training\",\nbatch_size=64,\nseed=42,\nshuffle=True,\n# classes=[f'{i+1}' for i in range(28)],\n# class_mode=\"raw\",\ncolor_mode=\"grayscale\",\ntarget_size=(32,32))\n\n\nvalid_generator=datagen.flow_from_dataframe(\ndataframe=train_df,\ndirectory=\"..\/input\/arabic-hwr-ai-pro-intake1\/train\",\nx_col=\"id\",\ny_col=\"label\",\nsubset=\"validation\",\nbatch_size=64,\nseed=42,\nshuffle=True,\n# classes=[f'{i+1}' for i in range(28)],\n# class_mode=\"raw\",\ncolor_mode=\"grayscale\",\ntarget_size=(32,32))\n\ntest_datagen=ImageDataGenerator(rescale=1.\/255.)\n\ntest_generator=test_datagen.flow_from_dataframe(\ndataframe=test_df,\ndirectory=\"..\/input\/arabic-hwr-ai-pro-intake1\/test\",\nx_col=\"id\",\ny_col=None,\nbatch_size=64,\nseed=42,\nshuffle=False,\nclass_mode=None,\ncolor_mode=\"grayscale\",\ntarget_size=(32,32))","1a714a06":"# generate samples and plot\nimgs, labels = next(train_generator)\nprint('shape: ',imgs[0].shape)\n\nfig, ax = plt.subplots(4,8, figsize=(12, 8))\ni=0\nfor row in range(4):\n    for col in range(8):\n        plt.sca(ax[row, col])\n        # generate batch of images\n#         plt.title(f'label = {np.where(labels[i] == 1)[0][0]+1}') \n#         plt.title(f'label = {labels[i]}')    \n        plt.imshow(imgs[i], interpolation='nearest',cmap='gray')\n        plt.axis('off')\n        i+=1","ca89528a":"model = tf.keras.Sequential([\n        tf.keras.layers.Conv2D(32, (3,3), padding=\"same\", activation=\"relu\", input_shape=(32,32,1)),\n        tf.keras.layers.AveragePooling2D((2,2), strides=2),\n\n        tf.keras.layers.Conv2D(64, (3,3), padding=\"same\", activation=\"relu\"),\n        tf.keras.layers.AveragePooling2D((2,2), strides=2),\n\n        tf.keras.layers.Conv2D(128, (3,3), padding='same', activation='relu'),\n        tf.keras.layers.AveragePooling2D((2,2), strides=2),\n\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(128, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.1),\n        tf.keras.layers.Dense(128, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.15),\n        tf.keras.layers.Dense(64, activation=\"relu\"),\n        tf.keras.layers.Dense(64, activation=\"relu\"),\n        tf.keras.layers.Dropout(0.15),\n        tf.keras.layers.Dense(32, activation=\"relu\"),\n        tf.keras.layers.Dense(32, activation=\"relu\"),\n        tf.keras.layers.Dense(28, activation='softmax')\n])\n","f7cd7a0b":"model.summary()","a47067bf":"model.compile(\n    optimizer=tf.keras.optimizers.Adam(),\n    loss=tf.keras.losses.CategoricalCrossentropy(),\n    metrics=['accuracy']\n)","ab52b9e8":"checkpoint_cb = tf.keras.callbacks.ModelCheckpoint(\"best_model.h5\", save_best_only=True)\nearly_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=20, restore_best_weights=True)\n\nhist = model.fit(\n    train_generator,\n    validation_data=valid_generator,\n    epochs=250,\n    callbacks=[checkpoint_cb,early_stopping_cb]\n)","080e897f":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","80a2acb3":"pred = model.predict(test_generator)","126096e1":"pred_classes = np.argmax(pred,axis=1)\nlabels = dict((value, key) for key, value in train_generator.class_indices.items())\npredictions = [int(labels[key]) for key in pred_classes]","ab858090":"imgs = [test_generator[0][i] for i in range(5)]\n\nfig = plt.figure( figsize=(10, 4))\nnumber_of_files = len(imgs)\nfor i in range(number_of_files):\n    a=fig.add_subplot(1,number_of_files,i+1)\n    plt.title(f'label = {predictions[i]}') \n    plt.imshow(imgs[i], interpolation='nearest',cmap='gray')\n    plt.axis('off')","2dca419c":"test_df  = pd.read_csv(csv_path_test)\ntest_df['label'] = predictions\ntest_df.head()","5cd0d278":"test_df[['id', 'label']].to_csv('\/kaggle\/working\/submission.csv', index=False)","b8753679":"# Model training","57aaadda":"# Reading Data","e69b1f0f":"# Explore the data"}}