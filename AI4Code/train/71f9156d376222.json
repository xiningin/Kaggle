{"cell_type":{"4c7d5e19":"code","e13b53e3":"code","9e06b4e7":"code","5937fb8a":"code","3b6c9551":"code","1ccc2262":"code","a3ee87ef":"code","037706f1":"code","42413542":"code","f6301357":"code","d72b5768":"code","ca14f75d":"code","87489c49":"code","f0a9a4b9":"code","e58cc42b":"code","a5d0e950":"code","76954cea":"code","39f9c32e":"code","896527af":"code","c9254375":"markdown","9d7c1200":"markdown","b5ab1db7":"markdown","bca13dbc":"markdown","4732c8a5":"markdown","3b1269e3":"markdown","d4ebe188":"markdown","39eb1816":"markdown","aae27910":"markdown","ce025fc1":"markdown","bdd0df21":"markdown","26f07734":"markdown","eb220b14":"markdown","935ab089":"markdown","baa9f134":"markdown","5a18d4cc":"markdown","a65fb468":"markdown","0ee923fd":"markdown","5697275c":"markdown","7efa6acd":"markdown"},"source":{"4c7d5e19":"a = 3\nb = 4\nc = 2\nif b**2-4*a*c>0:\n    print('Two real roots')\nif b**2-4*a*c==0:\n    print('Repeated root')\nif b**2-4*a*c<0:\n    print('No real roots')\nprint('This is always printed')","e13b53e3":"a = 3\nb = 4\nc = 2\ndisc = b**2-4*a*c\nif disc>0:\n    print('Two real roots')\nelif disc==0:\n    print('Repeated root')\nelse:\n    print('No real roots')\nprint('This is always printed')","9e06b4e7":"score = 63\nif score>=78:\n    print('A')\nelif score>=65:\n    print('B')\nelif score>=57:\n    print('C')\nelif score>=49:\n    print('D')\nelif score>=42:\n    print('E')\nelse:\n    print('U')","5937fb8a":"score = 63\ngrade = ''\nif score>=78:\n    grade ='A'\nelif score>=65:\n    grade ='B'\nelif score>=57:\n    grade ='C'\nelif score>=49:\n    grade ='D'\nelif score>=42:\n    grade ='E'\nelse:\n    grade ='U'\nprint('Your grade is '+grade)","3b6c9551":"score = 63\ngrade = ''\nboundaries = {'A':78,'B':65,'C':57,'D':49,'E':42}\nif score>=boundaries['A']:\n    grade ='A'\nelif score>=boundaries['B']:\n    grade ='B'\nelif score>=boundaries['C']:\n    grade ='C'\nelif score>=boundaries['D']:\n    grade ='D'\nelif score>=boundaries['E']:\n    grade ='E'\nelse:\n    grade ='U'\nprint('Your grade is '+grade)","1ccc2262":"number = 1\nwhile number<11:\n    print(number**2)\n    number = number+1","a3ee87ef":"number = 1\nwhile number<=10:\n    print(number**2)\n    number += 1","037706f1":"number = 1\nwhile number < 1000000:\n    print(number)\n    number *= 2","42413542":"position = 0\nmessage = 'Hello World'\nwhile position<len(message):\n    print(message[position])\n    position += 1","f6301357":"list1 = [5,3,27,4]\npos = 0\nwhile pos<len(list1):\n    print(list1[pos]**3)\n    pos += 1","d72b5768":"message = 'Hello World'\nfor letter in message:\n    print(letter)","ca14f75d":"list1 = [5,3,27,4]\nfor number in list1:\n    print(number**3)","87489c49":"boundaries = {'A':78,'B':65,'C':57,'D':49,'E':42}\nfor grade in boundaries:\n    print(grade)\n    print(boundaries[grade])","f0a9a4b9":"list2 = [0,1,2,3,4,5,6,7]\nfor counter in list2:\n    print(counter*4)","e58cc42b":"for i in range(10):\n    print(i)\nprint('-----')\nfor j in range(3,10):\n    print(j)\nprint('-----')\nfor k in range(2,30,5):\n    print(k)\nprint('-----')\nfor l in range(12,0,-2):\n    print(l)","a5d0e950":"squares = [n**2 for n in range(1,51)]\nprint(squares)","76954cea":"newsequence = [n+3 for n in squares]\nprint(newsequence)","39f9c32e":"evensquares = [n for n in squares if n%2==0]\nprint(evensquares)","896527af":"password = 'mypassword*2'\nuc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nlc = 'abcdefghijklmnopqrstuvwxyz'\nsp = '*%^$\u00a3'\nnu = '0123456789'\nuctrue = 0\nlctrue = 0\nsptrue = 0\nnutrue = 0\nfor letter in password:\n    if letter in uc:\n        uctrue = 1\n    if letter in lc:\n        lctrue = 1\n    if letter in sp:\n        sptrue = 1\n    if letter in nu:\n        nutrue = 1\nconditions = uctrue+lctrue+sptrue+nutrue\nif len(password)>7 & conditions==4:\n    print('Valid')\nelse:\n    print('Invalid')","c9254375":"This would need to be carefully edited if we change the grade boundaries. Use of a dictionary to look them up makes it simpler to use. Now we just edit the dictionary at the top and rest takes care of itself.","9d7c1200":"Loops will do the same thing over and over. The simplest type is a `while` loop. This runs over and over until the test is true.","b5ab1db7":"`for` loops can be combined with a method called \"list comprehension\" to quickly make big lists. Here is a list of square numbers","bca13dbc":"Because this is also common, Python provides a built in function called `range` to make such a list (it doesn't actually make a list, it just serves up the numbers one after the other as if it were a list, this uses less memory)\n* `range(n)` gives all of the numbers from `0` up to `n-1` (so it gives `n` numbers)\n* `range(a,b)` starts at `a` and ends at `b-1`\n* `range(a,b,c)` starts at `a`, ends at `b-1` and goes up by `c` each time.","4732c8a5":"Here is a little example that turns a test score into a grade. Try changing the score to see what happens:","3b1269e3":"This sort of stuff can be tidied up in several ways. It's neater to set a variable for the grade, construct a message and print once.","d4ebe188":"This can be combined with `if` statements too. Here are the even squares. Can you see why `n%2==0` is a test for even? (Remember that `a%b` gives the remainder when `a` is divided by `b`)","39eb1816":"How would you alter the code if a valid password only has to have any 3 from the 4 conditions true?","aae27910":"Notice that we need `==` to check if two things are equal. A single `=` is used to set a variable to be equal to some data value.\n\nThere are a couple of ways to make this code more readable. First we avoid repeatedly calculating the same thing by doing it once and storing the result. Second we wrap up multiple `if` statements into a single structure. In the following code `elif` is short for \"else if\" and is followed by another test. `else` is followed by any code you want to run if none of the tests are true. Leave this out if you don't want to run any \"default\" code.","ce025fc1":"It's common to want to use an actual counter in a loop. We could use a `while` loop and build our own counter as above, or we could make a big list of counter values and use a for loop:","bdd0df21":"We can use a while loop with a counter to do things to every item in a data structure. The first example is with a string.","26f07734":"To conclude this part, here is some code to check if a given password is valid. To be valid it must\n* Have length at least 8\n* Contain at least 1 uppercase letter\n* Contain at least 1 lower case letter\n* Contain a special character from \\* %^$\u00a3\n* Contain at least 1 number\n\nThis code uses the Python function `in` with the string data structure. This function works with lots of other structures too.","eb220b14":"Here is an example with a list","935ab089":"All programs are built using two simple ideas\n* Selection - This is where you do different things depending on the result of some test\n* Iteration - This is where you do the same thing over and over.\n\nWe will begin with selection. We construct a test by starting with `if`, followed by the test, followed by a colon. \n\nTests are statements that can be True or False only. Things like `x>5` or `name!='Brian'` (`!=` is Python for \"not equal\")\n\nThe instruction to run if the test is true is indented. This can be one line or many lines. If the test is false, the indented code does not run. Python skips to the next non-indented line.","baa9f134":"# Larn Yersel Python\n## Part 2 Programming Constructs","5a18d4cc":"This is such a common process that Python supplies another type of loop, called a `for` loop. This steps through a data structure one item at a time. The pattern is \n```python\nfor variable in datastructure:\n   some code\n   more code\n    ...```","a65fb468":"We can now use list comprehension to do stuff with the squares list","0ee923fd":"Here we set up and use a *counter* called `number`. The line `number = number+1` adds 1 to the variable `number` and then stores the answer back into the same variable. This is such a common construction that it can be abbreviated to `number += 1`. Similar abbeviations can be used with other operators.\n\nCare is needed with the test statement. We wanted the first 10 squares so used `number<11`. We could have used `number<=10` for the same effect.","5697275c":"See if you can predict what this will do:","7efa6acd":"This is simpler than making and using a counter and Python takes care of doing it the correct number of times. "}}