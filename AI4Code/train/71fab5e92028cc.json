{"cell_type":{"515b36d8":"code","dd6fec18":"code","3b70f33a":"code","343b03af":"code","6e9f57a0":"code","8c10961e":"code","0bcac6a3":"code","367b476d":"code","3d15911a":"code","e04c7ca6":"code","41023e30":"code","26287380":"code","156c8286":"code","a70e178b":"code","99b08aa5":"code","11411844":"code","27906a8d":"code","b2670260":"code","5ad8eef3":"code","23eba1ce":"code","2d9b7109":"code","c48e3ae7":"code","a2af7dba":"code","0c0b15e0":"code","7f74b0d5":"code","75b33fb4":"code","268ba357":"code","2ca5fdd5":"code","a2aea643":"code","4bc7ad78":"code","c2c6c448":"code","24de36de":"code","253e6b88":"code","16151b4d":"code","9544a6a8":"code","225e05a9":"code","bd74cfe1":"code","8e785cbd":"code","8cfc8e1f":"code","979c4ada":"code","1097cf3e":"code","b9c2339b":"markdown","1efb6eae":"markdown","783bfded":"markdown","944a2773":"markdown","50af43aa":"markdown","29f0e21f":"markdown","7ed6f71f":"markdown","e3fd80c9":"markdown","123ca833":"markdown","c346dff2":"markdown","b424bd60":"markdown","7905232d":"markdown","d6be9cc1":"markdown","4178fc2b":"markdown","3bee85fc":"markdown","e0c52b1e":"markdown"},"source":{"515b36d8":"tez_path = '..\/input\/tez-lib\/'\neffnet_path = '..\/input\/efficientnet-pytorch\/'\nimport sys\nsys.path.append(tez_path)\nsys.path.append(effnet_path)","dd6fec18":"import os\nimport albumentations as A\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport tez\nfrom tez.datasets import ImageDataset\nfrom tez.callbacks import EarlyStopping\n\nimport torch\nimport torch.nn as nn\n\nimport torchvision\n\nfrom sklearn import metrics, model_selection\n\n%matplotlib inline","3b70f33a":"dfx = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")\ndfx.head()","343b03af":"from sklearn.preprocessing import LabelEncoder\n\nlabelencoder = LabelEncoder()\ndfx[\"encoded_labels\"] = labelencoder.fit_transform(dfx[\"labels\"])\ndfx.head()","6e9f57a0":"dfx.encoded_labels.value_counts()","8c10961e":"df_train, df_valid = model_selection.train_test_split(dfx, test_size=0.2, random_state=42, stratify=dfx.encoded_labels.values)\n\ndf_train = df_train.reset_index(drop=True)\ndf_valid = df_valid.reset_index(drop=True)","0bcac6a3":"df_train.shape","367b476d":"df_valid.shape","3d15911a":"image_path = \"..\/input\/resized-plant2021\/img_sz_512\"\n\ntrain_image_paths = [\n    os.path.join(image_path, x) for x in df_train.image.values\n]\n\ntrain_image_paths = [\n    os.path.join(image_path, x) for x in df_train.image.values\n]","e04c7ca6":"train_image_paths[:5]","41023e30":"train_target = df_train.encoded_labels.values\nvalid_target = df_valid.encoded_labels.values","26287380":"train_target","156c8286":"valid_target","a70e178b":"train_dataset = ImageDataset(\n    image_paths = train_image_paths,\n    targets = train_target,\n    augmentations = None\n)","99b08aa5":"def plot_img(img_dict):\n    img_tensor = img_dict['image']\n    target = img_dict['targets']\n    print(target)\n    plt.figure(figsize=(5,5))\n    image = img_tensor.permute(1,2,0)\/255\n    plt.imshow(image)","11411844":"plot_img(train_dataset[10])","27906a8d":"train_aug = A.Compose(\n    [\n        A.RandomResizedCrop(256, 256),\n        A.Transpose(p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.HueSaturationValue(\n            hue_shift_limit=0.2, \n            sat_shift_limit=0.2,\n            val_shift_limit=0.2, \n            p=0.5\n        ),\n        A.RandomBrightnessContrast(\n            brightness_limit=(-0.1,0.1), \n            contrast_limit=(-0.1, 0.1), \n            p=0.5\n        ),\n#         A.Normalize(\n#             mean=[0.485, 0.456, 0.406], \n#             std=[0.229, 0.224, 0.225], \n#             max_pixel_value=255.0, \n#             p=1.0\n#         )\n    ]\n)\n\nvalid_aug = A.Compose(\n    [\n        A.CenterCrop(256, 256, p=1.0),\n        A.Transpose(p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.HueSaturationValue(\n            hue_shift_limit=0.2, \n            sat_shift_limit=0.2,\n            val_shift_limit=0.2, \n            p=0.5\n        ),\n        A.RandomBrightnessContrast(\n            brightness_limit=(-0.1,0.1), \n            contrast_limit=(-0.1, 0.1), \n            p=0.5\n        ),\n#         A.Normalize(\n#             mean=[0.485, 0.456, 0.406], \n#             std=[0.229, 0.224, 0.225], \n#             max_pixel_value=255.0, \n#             p=1.0\n#         )\n    ]\n)","b2670260":"train_dataset = ImageDataset(\n    image_paths = train_image_paths,\n    targets = train_target,\n    augmentations = train_aug\n)\n\nvalid_dataset = ImageDataset(\n    image_paths = train_image_paths,\n    targets = train_target,\n    augmentations = valid_aug\n)","5ad8eef3":"plot_img(train_dataset[10])","23eba1ce":"import pickle\n\n# pretrained=True\n# pretrained_model = torchvision.models.resnet18(pretrained=pretrained)\n\n# Pkl_Filename = \"pretrained_resnet18.pkl\"\n\n# with open(Pkl_Filename, 'wb') as file:  \n#     pickle.dump(pretrained_model, file)","2d9b7109":"Pkl_Filename = \"..\/input\/resnet18-pretrained\/pretrained_resnet18.pkl\"\n\nwith open(Pkl_Filename, 'rb') as file:  \n    pretrained_model = pickle.load(file)","c48e3ae7":"class PlantModel(tez.Model):\n    def __init__(self,num_classes):\n        super().__init__()\n        self.convnet = pretrained_model\n        self.convnet.fc = nn.Linear(512, num_classes)\n        self.step_scheduler_after = \"epoch\"\n        \n    def loss(self, outputs, targets):\n        if targets is None: \n            return None\n        return nn.CrossEntropyLoss()(outputs, targets)\n    \n    def monitor_metrics(self, outputs, targets):\n        outputs = torch.argmax(outputs, dim = 1).cpu().detach().numpy()\n        targets = targets.cpu().detach().numpy()\n        acc = metrics.accuracy_score(targets, outputs)\n        f1_score = metrics.f1_score(outputs, targets, average='weighted')\n        return{\n            \"accuracy\" : acc,\n            \"f1_score\" : f1_score\n        }\n    \n    def load(self, model_path, device ='cuda' if torch.cuda.is_available() else 'cpu'):\n        self.device = device\n        print(list(self.parameters()))\n        if next(self.parameters()).device != self.device:\n            self.to(self.device)\n        model_dict = torch.load(model_path, map_location=torch.device(device))\n        self.load_state_dict(model_dict[\"state_dict\"])\n    \n    def fetch_optimizer(self):\n        opt = torch.optim.Adam(self.parameters(), lr=1e-3)\n        return opt\n\n    def fetch_scheduler(self):\n        sch = torch.optim.lr_scheduler.StepLR(self.optimizer, step_size=0.7)\n        return sch\n        \n    def forward(self, image, targets=None):\n        outputs = self.convnet(image)\n        if targets is not None: \n            loss = self.loss(outputs, targets)\n            mon_metrics = self.monitor_metrics(outputs, targets)\n            return outputs, loss, mon_metrics\n        return outputs, None, None\n        ","a2af7dba":"# torchvision.models.resnet152(pretrained=False)","0c0b15e0":"# dfx.encoded_labels.nunique()","7f74b0d5":"model = PlantModel(dfx.encoded_labels.nunique())","75b33fb4":"img = train_dataset[0][\"image\"]\ny = train_dataset[0][\"targets\"]\nmodel(img.unsqueeze(0), y.unsqueeze(0))","268ba357":"es = EarlyStopping(\n    monitor = \"train_accuracy\", \n    model_path = \"model.bin\", \n    patience = 2,\n    mode='max'\n)\n\nmodel.fit(\n    train_dataset,\n    valid_dataset = valid_dataset,\n    train_bs = 32,\n    valid_bs = 64,\n    device = \"cuda\",\n    callbacks = [es],\n    fp16 = True,\n    epochs = 10\n)\n\n# model.save(\"model.bin\")","2ca5fdd5":"test_dfx = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\")\nimage_path = \"..\/input\/plant-pathology-2021-fgvc8\/test_images\/\" \n\n# model.load(\"..\/input\/resnet18-tez\/model.bin\")\n\n# model\n\n# Pkl_Filename = \"..\/input\/resnet18-tez\/resnet18_trained_model.pkl\"\n# with open(Pkl_Filename, 'rb') as file:  \n#     model = pickle.load(file)\n\n# test_dfx.head()","a2aea643":"from sklearn.preprocessing import LabelEncoder\n\nlabelencoder = LabelEncoder()\ntest_dfx[\"encoded_labels\"] = labelencoder.fit_transform(test_dfx[\"labels\"])\ntest_dfx.head()","4bc7ad78":"test_image_paths = [\n    os.path.join(image_path, x) for x in test_dfx.image.values\n]\n\ntest_target = test_dfx.encoded_labels","c2c6c448":"test_aug = A.Compose(\n    [\n        A.RandomResizedCrop(256, 256),\n        A.Transpose(p=0.5),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.5),\n        A.HueSaturationValue(\n            hue_shift_limit=0.2, \n            sat_shift_limit=0.2,\n            val_shift_limit=0.2, \n            p=0.5\n        ),\n        A.RandomBrightnessContrast(\n            brightness_limit=(-0.1,0.1), \n            contrast_limit=(-0.1, 0.1), \n            p=0.5\n        ),\n#         A.Normalize(\n#             mean=[0.485, 0.456, 0.406], \n#             std=[0.229, 0.224, 0.225], \n#             max_pixel_value=255.0, \n#             p=1.0\n#         )\n    ]\n)","24de36de":"test_dataset = ImageDataset(\n    image_paths = test_image_paths,\n    targets = test_target,\n    augmentations = test_aug\n)\n\ntest_dataset[0]","253e6b88":"final_preds = None\nfor j in range(5):\n    preds = model.predict(test_dataset, batch_size=32, n_jobs=-1)\n    temp_preds = None\n    for p in preds:\n        if temp_preds is None:\n            temp_preds = p\n        else:\n            temp_preds = np.vstack((temp_preds, p))\n    if final_preds is None:\n        final_preds = temp_preds\n    else:\n        final_preds += temp_preds\nfinal_preds \/= 5","16151b4d":"final_preds = final_preds.argmax(axis=1)\nfinal_preds","9544a6a8":"test_dfx.encoded_labels = final_preds\ntest_dfx.head()","225e05a9":"lblist = df_train.drop_duplicates(subset=['labels'])\nlblist = lblist.set_index(\"encoded_labels\")\nlblist","bd74cfe1":"# lblist.at[5, \"labels\"]","8e785cbd":"def get_labels(val):\n    return lblist.at[val, \"labels\"]","8cfc8e1f":"pred_lists = []\nfor i, pred in enumerate(final_preds):\n    label = get_labels(pred)\n    pred_lists.append(label)\n    \npred_lists","979c4ada":"test_dfx[\"labels\"] = pred_lists\ntest_dfx = test_dfx.drop(columns=['encoded_labels'])\ntest_dfx","1097cf3e":"test_dfx.to_csv(\"submission.csv\", index=False)","b9c2339b":"# **Load data**","1efb6eae":"**Plot image**","783bfded":"# **Create Model**","944a2773":"# **Create train_dataset**","50af43aa":"**Load test data**","29f0e21f":"**Set train, valid target**","7ed6f71f":"# **Encoded labels**","e3fd80c9":"**Encode label**","123ca833":"**Train model**","c346dff2":"# **Split train, valid & Reset index**","b424bd60":"**Our custom model**","7905232d":"# **Import image**","d6be9cc1":"**Resnet18 structure**","4178fc2b":"**Apply augmentation**","3bee85fc":"# **Predict testset**","e0c52b1e":"# **Augmentation**"}}