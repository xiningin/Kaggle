{"cell_type":{"ecaaf571":"code","30a5a404":"code","0e8aa1e8":"code","bc3cdf17":"code","a50ef147":"code","52fb18b4":"code","05d4d890":"code","69e45245":"code","b57addce":"code","94632e17":"code","d76e83ca":"code","4e2fac63":"code","51fb8725":"code","1ed70cce":"code","213a1f61":"code","b1d31980":"code","b3d0337b":"code","5e4042ec":"code","8188b0ee":"code","17f9caaf":"code","7530c7ec":"code","161de37a":"code","5305abb8":"code","b8648fb7":"code","69619033":"code","b51c27f8":"code","cc46935d":"code","32ce9831":"code","e77d82d1":"code","53dbf845":"code","db78bd02":"code","6c87421a":"code","c6e48090":"code","6f313ba7":"code","8542027e":"code","94a325c8":"code","dfe60898":"code","6b552c4d":"code","862ad1db":"code","67f740f4":"code","a554b361":"code","8f5e17a1":"code","4af08862":"code","1c8723c8":"code","abfbbe77":"code","814794ce":"code","ac5c0aaa":"code","604845e5":"code","df408945":"code","25ba51aa":"code","c05ca0b2":"markdown","92a663a8":"markdown","0aef8477":"markdown","42238d5c":"markdown","a48a38ab":"markdown","63347d10":"markdown","4e8fd2f9":"markdown","6bcd9cd0":"markdown","36c90b80":"markdown","e658ffff":"markdown","f4412a4e":"markdown","4456eebb":"markdown","d8b1e419":"markdown","d0174af9":"markdown","46e6ce4b":"markdown","b8632ace":"markdown","f4daa5e5":"markdown","133a3e7a":"markdown","9a115373":"markdown","fbf3fe48":"markdown","b2ecd746":"markdown","8b3b36ef":"markdown","12e5245f":"markdown","214de555":"markdown"},"source":{"ecaaf571":"%matplotlib inline\nfrom scipy import stats\nimport numpy as np\nimport pandas as pd\nimport missingno as mg\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom scipy.stats import boxcox_normmax   # boxcox:\u628a\u975e\u6b63\u6001\u5206\u5e03\u7684\u53d8\u6210\u6b63\u6001\u5206\u5e03\nfrom scipy.special import boxcox1p\n# \u6ce8\u610f\u5343\u4e07\u4e0d\u8981\u5199\u6210from XXX import *, \u8981from XXX import a,b,c\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, losses, optimizers, metrics\n\n# \u5ffd\u7565\u8b66\u544a\nimport warnings\nwarnings.filterwarnings(action='ignore')","30a5a404":"# \u52a0\u8f7d\u6570\u636e\u96c6, \u7b2c\u4e00\u884c\u4f5c\u5c5e\u6027(\u8868\u5934), \u7b2c\u4e00\u5217\u4f5c\u7d22\u5f15\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', header=0, index_col=0)\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', header=0, index_col=0)\n\n# import sys\n# print(sys.argv[0])  # \u67e5\u770b\u8def\u5f84\nprint(f'\u8bad\u7ec3\u96c6\u6709{train.shape[0]}\u884c{train.shape[1]}\u5217')\nprint(f'\u6d4b\u8bd5\u96c6\u6709{test.shape[0]}\u884c{test.shape[1]}\u5217')\n# \u6d4b\u8bd5\u96c6\u6ca1\u6709\u6807\u7b7e(\u623f\u4ef7)","0e8aa1e8":"# \u8bad\u7ec3\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f,\u53ea\u6709\u6570\u5b57\u7684\u624d\u80fd\u7edf\u8ba1\ntrain.describe().T","bc3cdf17":"# \u7edf\u8ba1\u8bad\u7ec3\u96c6\u7279\u5f81\u53d8\u91cf\u7684\u5c5e\u6027\u548c\u5185\u5b58\ntrain.info()","a50ef147":"# \u7edf\u8ba1\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u79cd\u7c7b\ntrain.dtypes.value_counts()\n# \u53c8\u6709\u6570\u5b57\u53c8\u6709NA\u7684\u5c31\u662ffloat64,\u5426\u5219\u5168\u7684\u5c31\u662fint64,object\u5c31\u662f\u6587\u5b57\u63cf\u8ff0","52fb18b4":"# \u4f7f\u7528missingno\u8fdb\u884c\u7f3a\u5931\u503c\u53ef\u89c6\u5316\nmg.matrix(train)","05d4d890":"# \u7edf\u8ba1\u6bcf\u4e2a\u53d8\u91cf\u7f3a\u5931\u7684\u6bd4\u4f8b\ndef missing_percentage(df):  \n    # \u603b\u7f3a\u5931\u503c\u7531\u9ad8\u5230\u4f4e\u6392\u5e8f\n    total = df.isnull().sum().sort_values(ascending = False)[df.isnull().\n                                                             sum().sort_values(ascending = False) != 0]\n    # \u7f3a\u5931\u767e\u5206\u6bd4\n    percentage = round(df.isnull().sum().sort_values(ascending = False) \/ len(df) * 100, 2)[df.isnull().\n                                                            sum().sort_values(ascending = False) != 0]\n    # axis=1: \u6a2a\u7740\u5e76\u62e2\n    return pd.concat([total, percentage], axis=1, keys=['Total', 'Percentage'])\nmissing_percentage(train)","69e45245":"mg.matrix(test)  # \u7f3a\u5931\u503c\u53ef\u89c6\u5316","b57addce":"# \u540c\u7406\u5206\u6790\u6d4b\u8bd5\u96c6\nmissing_percentage(test)","94632e17":"def plot_1(df, feature):\n    # style\u5b9a\u4e49\u4e00\u79cd\u56fe\u7684\u683c\u5f0f\n    style.use('fivethirtyeight')\n    # constrained_layout: \u81ea\u52a8\u6392\u7248\u9632\u6b62\u91cd\u53e0\u906e\u63a9, figsize:(\u5bbd, \u9ad8)\n    fig, axes = plt.subplots(3, 1, constrained_layout = True, figsize=(10,24))\n    # \u7528distplot\u753b\u76f4\u65b9\u56fe\u548c\u6982\u7387\u5bc6\u5ea6\u4f30\u8ba1\u56fe\n    # norm_hist = True: \u76f4\u65b9\u56fe\u9ad8\u5ea6\u4ee3\u8868\u5bc6\u5ea6\u800c\u4e0d\u662f\u8ba1\u6570, ax=axes[0]:\u753b\u5728\u7b2c\u4e00\u884c\n    sns.distplot(df.loc[:, feature], norm_hist=True, ax=axes[0])  # \u53ef\u4ee5\u770b\u5230\u56fe\u5f62\u4e0d\u662f\u6b63\u6001\u5206\u5e03,\u5cf0\u6709\u70b9\u9760\u5de6(\u53f3\u504f,\u62d6\u5c3e)\n    \n    # \u7528QQ\u56fe\u5224\u65ad\u6570\u636e\u662f\u5426\u4e3a\u6b63\u6001\u5206\u5e03,\u84dd\u70b9\u548c\u7ea2\u7ebf\u8d8a\u91cd\u5408\u5c31\u8d8a\u7b26\u5408\u6b63\u6001\u5206\u5e03\n    stats.probplot(df.loc[:,feature], plot=axes[1])\n    \n    # \u7bb1\u578b\u56fe,orient='h'\u6a2a\u7740\u753b, 'v'\u7ad6\u7740\u753b\n    sns.boxplot(df.loc[:,feature], orient='h', ax=axes[2])\n    \nplot_1(train, 'SalePrice')","d76e83ca":"# \u7edf\u8ba1\u5b66\u6307\u6807,\u504f\u6001(\u5927\u4e8e0\u4e3a\u6b63\u504f)\u4e0e\u5cf0\u5ea6(\u5927\u4e8e3\u4e3a\u539a\u5c3e)\ntrain.SalePrice.skew(),train.SalePrice.kurtosis()","4e2fac63":"# \u5206\u6790\u76ee\u6807\u53d8\u91cf\u4e0e\u56e0\u53d8\u91cf\u7684\u76f8\u5173\u6027(\u53ea\u6709\u6570\u5b57\u80fd\u5206\u6790)\n(train.corr()**2)['SalePrice'].sort_values(ascending=False)","51fb8725":"# OverallQual\u662f\u5206\u51e0\u4e2a\u7b49\u7ea7\u7684,\u7bb1\u578b\u56fe\u9002\u5408\u7c7b\u522b\u53d8\u91cf\u5206\u6790,\u8fd9\u4e2a\u51fd\u6570\u4e3a\u7c7b\u522b\u53d8\u91cf\u91cf\u8eab\u5b9a\u5236\ndef customized_cat_boxplot(y, x):\n    style.use('fivethirtyeight')  # \u753b\u98ce\u9009\u62e9\n    plt.subplots(figsize=(12, 8))\n    sns.boxplot(y=y, x=x)\n\ncustomized_cat_boxplot(train.SalePrice, train.OverallQual)","1ed70cce":"# \u6563\u70b9\u56fe\u9002\u5408\u8fde\u7eed\u53d8\u91cf,\u8fd9\u4e2a\u51fd\u6570\u4e3a\u8fde\u7eed\u53d8\u91cf\u91cf\u8eab\u5b9a\u5236\ndef customized_num_scatterplot(y, x):\n    style.use('fivethirtyeight')\n    plt.subplots(figsize=(12, 8))  # (\u5bbd, \u9ad8)\n    sns.scatterplot(y=y, x=x)\ncustomized_num_scatterplot(train.SalePrice, train.GrLivArea)","213a1f61":"customized_cat_boxplot(train.SalePrice, train.GarageCars)","b1d31980":"customized_num_scatterplot(train.SalePrice, train.GarageArea)","b3d0337b":"customized_num_scatterplot(train.SalePrice, train.TotalBsmtSF)","5e4042ec":"customized_num_scatterplot(train.SalePrice, train['1stFlrSF'])","8188b0ee":"customized_num_scatterplot(train.SalePrice, train.MasVnrArea)","17f9caaf":"# \u628a\u4f4f\u5730\u9762\u79ef\u8fc7\u5927\u7684\u4e24\u4e2a\u70b9\u62a0\u6389\ntrain = train[train.GrLivArea < 4500]\n# \u62a0\u6389\u4e4b\u540e\u7d22\u5f15\u4e0d\u8fde\u7eed\u4e86,\u9700\u8981\u91cd\u7f6e\u7d22\u5f15,drop\u4ee3\u8868\u820d\u5f03\u539f\u6765\u7684\u7d22\u5f15\u5217,inplace\u4ee3\u8868\u539f\u5730\u4fee\u6539df,\u4e0d\u91cd\u65b0\u521b\u5efa\u65b0\u7684\ntrain.reset_index(drop = True, inplace = True)\n# \u5b58\u4e2a\u6863\nprevious_train = train.copy()\n","7530c7ec":"fig, (ax1, ax2) = plt.subplots(figsize=(12, 8), ncols=2, sharey=False)  # \u4e0d\u5171\u7528\u4e00\u4e2ay\u8f74\n# \u628a\u6563\u70b9\u56fe\u548c\u56de\u5f52\u66f2\u7ebf\u653e\u4e00\u5f20\u56fe\u91cc\n# GrLivArea(\u751f\u6d3b\u533a\u9762\u79ef)\nsns.scatterplot(x=train.GrLivArea, y=train.SalePrice, ax=ax1)\nsns.regplot(x=train.GrLivArea, y=train.SalePrice, ax=ax1)\n# MasVnrArea(\u5916\u90e8\u88c5\u4fee\u9762\u79ef)\nsns.scatterplot(x=train.MasVnrArea, y=train.SalePrice, ax=ax2)\nsns.regplot(x=train.MasVnrArea, y=train.SalePrice, ax=ax2)","161de37a":"plt.subplots(figsize=(12, 8))\nsns.residplot(train.GrLivArea, train.SalePrice)","5305abb8":"# \u5bf9train\u8fdb\u884c\u64cd\u4f5c,\u4e4b\u524d\u5b58\u4e86\u4e00\u4efdprevious_train\ntrain['SalePrice'] = np.log1p(train['SalePrice'])  # log1p\u5c31\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\nplot_1(train, 'SalePrice')","b8648fb7":"# \u6bd4\u8f83\u53d8\u6362\u524d\u540e\u7684train\nfig, (ax1, ax2) = plt.subplots(figsize=(15, 6), ncols=2, sharey=False, sharex=False)\n# \u8001train\nsns.residplot(x=previous_train.GrLivArea, y=previous_train.SalePrice, ax=ax1)\n# \u6b63\u6001\u5316\u7684train\nsns.residplot(x=train.GrLivArea, y=train.SalePrice, ax=ax2)","69619033":"# \u753b\u4e00\u4e2a\u591a\u91cd\u5171\u7ebf\u6027(train.corr())\u7684\u5173\u7cfb\u7684\u70ed\u529b\u56fe\nstyle.use('ggplot')\nsns.set_style('whitegrid')\nplt.subplots(figsize=(30, 20))\n\n# \u641e\u4e00\u4e2a\u63a9\u7801mask\u76d6\u4f4f\u4e0a\u4e09\u89d2\u90e8\u5206\nmask = np.zeros_like(train.corr(), dtype=np.bool)\n# np.triu_indices_from(mask)  # \u8fd4\u56de\u4e0a\u4e09\u89d2\u77e9\u9635\u7684idx\nmask[np.triu_indices_from(mask)] = True  # \u4e0a\u4e09\u89d2\u5168\u906e\u6389\nsns.heatmap(train.corr(), cmap=sns.diverging_palette(20, 220, n=200),  # \u8c03\u8272\n           mask=mask, annot=True, # \u5728\u683c\u5b50\u91cc\u5199\u5165\u6570\u5b57\n           center=0,  # \u70ed\u529b\u56fe\u4e2d\u95f4\u7684\u989c\u8272\n           )\nplt.title('heatmap of features', fontsize=30)","b51c27f8":"# \u628a\u623f\u4ef7y\u62c9\u51fa\u6765,\u7136\u540e\u5b58\u4e2a\u6863\ny = train['SalePrice'].reset_index(drop=True)\nprevious_train = train.copy()\n# \u628a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u5408\u5e76\u8d77\u6765\u5904\u7406\nall_data = pd.concat((train, test)).reset_index(drop=True)\n# drop\u662f\u4e22\u6389\u4ee5\u524d\u7684\u8868\u5934\u5185\u5bb9(index)\nall_data.drop(['SalePrice'], axis=1, inplace=True)  # \u628ay\u53bb\u6389\nmissing_percentage(all_data)","cc46935d":"# \u6709\u4e9b\u7c7b\u522b\u7279\u5f81\u7f3a\u5931\u503c\u81ea\u5e26\u542b\u4e49\u6bd4\u5982PoolQC,\u5c31\u4ee3\u8868\u6ca1\u6709\u6cf3\u6c60,\u8fd9\u4e00\u7c7b\u7528None\u6765\u586b\u5145\nmissing_val_col = [\"Alley\", \n                   \"PoolQC\", \n                   \"MiscFeature\",\n                   \"Fence\",\n                   \"FireplaceQu\",\n                   \"GarageType\",\n                   \"GarageFinish\",\n                   \"GarageQual\",\n                   \"GarageCond\",\n                   'BsmtQual',\n                   'BsmtCond',\n                   'BsmtExposure',\n                   'BsmtFinType1',\n                   'BsmtFinType2',\n                   'MasVnrType']\n\nfor i in missing_val_col:\n    all_data[i] = all_data[i].fillna('None')\n    \n# \u800c\u8fde\u7eed\u7279\u5f81\u7684\u7f3a\u5931\u503c\u53ef\u4ee5\u66ff\u6362\u62100\nmissing_val_col2 = ['BsmtFinSF1',\n                    'BsmtFinSF2',\n                    'BsmtUnfSF',\n                    'TotalBsmtSF',\n                    'BsmtFullBath', \n                    'BsmtHalfBath', \n                    'GarageYrBlt',\n                    'GarageArea',\n                    'GarageCars',\n                    'MasVnrArea']\n\nfor i in missing_val_col2:\n    all_data[i] = all_data[i].fillna(0)","32ce9831":"# \u6709\u4e9b\u7279\u5f81\u548c\u522b\u7684\u7279\u5f81\u6709\u5173\u7cfb\n# \u6309'Neighborhood'\u8fd9\u4e2a\u7279\u5f81\u5206\u6876,\u7528\u5bf9\u5e94\u6876\u5185\u7684'LotFrontage'\u7684\u5747\u503c\u6765\u66ff\u6362\u7f3a\u5931\u503c\n# \u6709\u4e00\u8bf4\u4e00\u8fd9\u4e2a\u529e\u6cd5\u633a\u597d\u7684,\u7528\u540c\u7c7b\u7684\u5e73\u5747\u503c\u4ee3\u66ff\u7f3a\u5931\u503c\nall_data['LotFrontage'] = all_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))\n","e77d82d1":"# \u6709\u4e9b\u7c7b\u522b\u7279\u5f81\u4ee5\u6570\u5b57\u5f62\u5f0f\u7ed9\u51fa\uff0c\u6240\u4ee5\u8981\u8f6c\u53d8\u6210\u7c7b\u522b\u53d8\u91cf\nall_data['MSSubClass'] = all_data['MSSubClass'].astype(str)\n# mode\u6307\u7684\u662f\u6700\u5e38\u51fa\u73b0\u7684\u503c\nall_data['MSZoning'] = all_data.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n# \u91cd\u8981\u7684\u5e74\u4efd\u548c\u6708\u4efd\u5e94\u5f53\u662f\u7c7b\u522b\u53d8\u91cf\u800c\u4e0d\u662f\u8fde\u7eed\u53d8\u91cf\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\nall_data['Functional'] = all_data['Functional'].fillna('Typ') \nall_data['Utilities'] = all_data['Utilities'].fillna('AllPub') \nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0]) \nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(\"TA\") \nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['Electrical'] = all_data['Electrical'].fillna(\"SBrkr\") ","53dbf845":"# \u68c0\u67e5\u7f3a\u5931\u503c\u586b\u8865\u60c5\u51b5\nmissing_percentage(all_data)","db78bd02":"# \u53ea\u6709\u6570\u5b57\u624d\u80fd\u4fee\u6b63\u504f\u6001,\u5148\u628a\u6570\u5b57(int\u548cfloat)\u6311\u51fa\u6765\n# \u5148\u5b9a\u4e49\u51faidx\nnumeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index\n# print(all_data.dtypes[all_data.dtypes != 'object'].index)\nskewed_feats = all_data[numeric_feats].apply(lambda x: x.skew()).sort_values(ascending = False)\nskewed_feats\n# all_data[numeric_feats]","6c87421a":"# \u5c55\u793a\u6709\u504f\u659c\u7684'1stFlrSF'\u7684\u76f4\u65b9\u56fe\u4e0e\u8fde\u7eed\u6982\u7387\u5bc6\u5ea6\u4f30\u8ba1\nsns.distplot(all_data['1stFlrSF'])","c6e48090":"# \u67e5\u770b\u504f\u5ea6\u548c\u5cf0\u5ea6\nall_data['1stFlrSF'].skew(),all_data['1stFlrSF'].kurtosis()","6f313ba7":"def fixing_skewness(df):\n    from scipy.stats import skew\n    from scipy.special import boxcox1p\n    from scipy.stats import boxcox_normmax\n    \n    numeric_feats = df.dtypes[df.dtypes != 'object'].index\n    skewed_feats = df[numeric_feats].apply(lambda x: x.skew()).sort_values(ascending=False)\n    # \u9009\u51fa\u9ad8\u504f\u659c\u7684\u7279\u5f81\n    high_skew = skewed_feats[abs(skewed_feats) > 0.5]\n    high_idx = high_skew.index\n#     print(df[high_idx])\n    for i in high_idx:\n        df[i] = boxcox1p(df[i], boxcox_normmax(df[i] + 1))\nfixing_skewness(all_data)","8542027e":"# \u68c0\u9a8c\u4fee\u504f\u6548\u679c\nsns.distplot(all_data['1stFlrSF'])","94a325c8":"all_data['1stFlrSF'].skew(),all_data['1stFlrSF'].kurtosis()","dfe60898":"# \u624b\u52a8\u589e\u52a0\u4e00\u4e9b\u7279\u5f81(magic feature)\n# \u623f\u5b50\u603b\u9762\u79ef\nall_data['TotalSF'] = (all_data['TotalBsmtSF'] \n                       + all_data['1stFlrSF'] \n                       + all_data['2ndFlrSF'])\n\n# \u623f\u5b50\u52a8\u5de5\u65e5\u671f\u7684\u548c\nall_data['YrBltAndRemod'] = all_data['YearBuilt'] + all_data['YearRemodAdd']\n\nall_data['Total_sqr_footage'] = (all_data['BsmtFinSF1'] \n                                 + all_data['BsmtFinSF2'] \n                                 + all_data['1stFlrSF'] \n                                 + all_data['2ndFlrSF']\n                                )\n                                 \n\nall_data['Total_Bathrooms'] = (all_data['FullBath'] \n                               + (0.5 * all_data['HalfBath']) \n                               + all_data['BsmtFullBath'] \n                               + (0.5 * all_data['BsmtHalfBath'])\n                              )\n                               \nall_data['Total_porch_sf'] = (all_data['OpenPorchSF'] \n                              + all_data['3SsnPorch'] \n                              + all_data['EnclosedPorch'] \n                              + all_data['ScreenPorch'] \n                              + all_data['WoodDeckSF']\n                             )","6b552c4d":"all_data['haspool'] = all_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['has2ndfloor'] = all_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasgarage'] = all_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasbsmt'] = all_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nall_data['hasfireplace'] = all_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\nall_data.shape","862ad1db":"all_data = all_data.drop(['Utilities', 'Street', 'PoolQC'], axis=1)\nall_data.shape","67f740f4":"# \u5207\u5f00\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nX_train,X_test = all_data.iloc[:train.shape[0],:],all_data.iloc[train.shape[0]:,:]\nX_train.shape,y.shape, X_test.shape","a554b361":"# \u5220\u9664\u5f02\u5e38\u70b9\u2014\u8fd9\u4e9b\u5f02\u5e38\u70b9\u662f\u600e\u4e48\u627e\u51fa\u6765\u7684\uff0c\u6211\u6ca1\u5206\u6790\noutliers = [30, 88, 462, 631, 1322]\nX_train = X_train.drop(X_train.index[outliers])\ny = y.drop(y.index[outliers])","8f5e17a1":"# \u7edf\u8ba1\u503c\nfor i in X_train.columns:\n    counts = X_train[i].value_counts()\n    print (counts)","4af08862":"# \u5220\u9664\u63a5\u8fd1\u4e8e\u5e38\u91cf\u7684\u53d8\u91cf\ndef overfit_reducer(df):\n    \"\"\"\n    This function takes in a dataframe and returns a list of features that are overfitted.\n    \"\"\"\n    overfit = []\n    for i in df.columns:\n        counts = df[i].value_counts()\n        zeros = counts.iloc[0]\n        if zeros \/ len(df) * 100 > 95:\n            overfit.append(i)\n    overfit = list(overfit)\n    return overfit\n\n\noverfitted_features = overfit_reducer(X_train)\nprint(overfitted_features)\nX_train = X_train.drop(overfitted_features, axis=1)\nX_test = X_test.drop(overfitted_features, axis=1)","1c8723c8":"X_train.shape,y.shape, X_test.shape","abfbbe77":"X_train.reset_index(drop=True,inplace=True)\nX_test.reset_index(drop=True,inplace=True)\nX_train.shape,X_train.index","814794ce":"df_all = pd.concat([X_train, X_test])\ndf_all = pd.get_dummies(df_all)  # \u628a\u7c7b\u578b\u7279\u5f81\u53d8\u6210one-hot\n\n\noverfitted_features = overfit_reducer(df_all)\nprint(overfitted_features)\ndef overfit_reducer2(df):\n    # \u53bb\u6389\u592a\u5927\u7684\u7279\u5f81\n    overfit = []\n    for i in df.columns:\n        if df[i].mean() > 10000:\n            overfit.append(i)\n    overfit = list(overfit)\n    return overfit\n\ndf_all = df_all.drop(overfitted_features, axis=1)\n\noverfitted_features2 = overfit_reducer2(df_all)\ndf_all = df_all.drop(overfitted_features2, axis=1)\n\nn_features = df_all.shape[1]\ndf_train = df_all.iloc[:X_train.shape[0],:]\ndf_test = df_all.iloc[X_train.shape[0]:,:]\n\nimport torch\ntrain_np = np.array(df_train)\ntrain_tensor = torch.tensor(train_np).float()   # \u6ce8\u610f\u7cbe\u5ea6\u8981\u662ffloat\u4e0d\u80fd\u662fdouble\ntarget_np = np.array(y)\ntarget_tensor = torch.tensor(target_np).float()\ntest_np = np.array(df_test)\ntest_tensor = torch.tensor(test_np).float()","ac5c0aaa":"\n# \u642d\u5efa\u7f51\u7edc\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F # \u6fc0\u52b1\u51fd\u6570\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(n_features ,128),\n    torch.nn.ReLU(),\n    torch.nn.Linear(128 , 128),\n    torch.nn.ReLU(),\n    torch.nn.Linear(128 ,1),\n)\n\noptimizer = torch.optim.Adam(model.parameters() , lr = 0.001)\nloss_func = nn.MSELoss()","604845e5":"df_train.describe().T\ndf_train.info()\ndf_train.to_csv('training_set.csv', index=False)","df408945":"cost = []\nfor t in range(2000):\n    prediction = model(train_tensor)\n#     print(prediction.shape, target_tensor.shape)\n#     print(prediction[0])\n    loss = loss_func(prediction , target_tensor)\n\n    optimizer.zero_grad() # \u68af\u5ea6\u6e05\u96f6,\u9632\u6b62\u7206\u70b8\n    loss.backward() # \u8bef\u5dee\u53cd\u5411\u4f20\u9012\n    optimizer.step()\n    if t % 50 == 0:\n        # \u663e\u793a\u5b66\u4e60\u7684\u8fc7\u7a0b\n        print(t, loss)\n        cost.append(loss)\n\nplt.plot(cost)\nplt.show()","25ba51aa":"preds = model(test_tensor).detach().numpy().ravel()\npreds = np.expm1(preds)\nprint(preds)\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\nmy_submission = pd.DataFrame({'Id': df_test.index, 'SalePrice': preds})\nmy_submission.to_csv('my_submission.csv', index=False)","c05ca0b2":"SalePrice vs 1stFlrSF","92a663a8":"# 6.\u6570\u636e\u53d8\u6362\n## 5.1\u4fee\u6b63\u504f\u6001","0aef8477":"SalePrice\u4e0eGarageCars ","42238d5c":"# 1.\u5bfc\u5165\u6a21\u5757","a48a38ab":"SalePrice\u4e0eTotalBsmtSF(\u5730\u4e0b\u5ba4\u9762\u79ef)","63347d10":"\u623f\u5c4b\u4ef7\u683c\u968f\u6574\u4f53\u8d28\u91cf\u800c\u6c34\u6da8\u8239\u9ad8\n\n\n\nSalePrice\u4e0eGrLivArea ","4e8fd2f9":"\u53ef\u4ee5\u770b\u5230\u53f3\u4e0b\u89d2\u6709\u4e24\u4e2a\u5f02\u5e38\u70b9, \u4e4b\u540e\u5c06\u5176\u53bb\u6389","6bcd9cd0":"\u53ef\u4ee5\u770b\u5230\u603b\u751f\u6d3b\u9762\u79ef\u8d8a\u5927,\u623f\u4ef7\u7684\u65b9\u5dee\u5c31\u8d8a\u5927(\u5f02\u65b9\u5dee)\n\n\n\u5c1d\u8bd5\u7528\u5bf9\u6570\u53d8\u6362\u89e3\u51b3\u5f02\u65b9\u5dee","36c90b80":"SalePrice\u4e0eGarageArea","e658ffff":"# \u89c2\u5bdf\u7ed3\u679c\n* \u6211\u4eec\u7684\u76ee\u6807\u53d8\u91cf\u5728\u5927\u591a\u6570\u9884\u6d4b(\u72ec\u7acb)\u53d8\u91cf\u4e4b\u95f4\u663e\u793a\u4e0d\u76f8\u7b49\u7684\u65b9\u5dee\u6c34\u5e73\u3002\u8fd9\u88ab\u79f0\u4e3a\u5f02\u65b9\u5dee\uff0c\u662f\u591a\u5143\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u4e00\u4e2a\u5371\u9669\u4fe1\u53f7\u3002\n* \u6563\u70b9\u56fe\u4e2d\u6709\u8bb8\u591a\u5f02\u5e38\u503c\n* SalePrice\u548cGrLivArea\u4f3c\u4e4e\u9075\u5faa\u4e86\u4e00\u79cd\u8d8b\u52bf\uff1a\u201c\u968f\u7740\u4ef7\u683c\u4e0a\u6da8\uff0c\u533a\u57df\u4e5f\u5728\u4e0a\u6da8\u3002\u7136\u800c\uff0c\u540c\u4e00\u56fe\u8868\u53f3\u4e0b\u89d2\u7684\u4e24\u4e2a\u6570\u636e\u5e76\u6ca1\u6709\u9075\u5faa\u4efb\u4f55\u8d8b\u52bf\u3002\u6211\u4eec\u628a\u4e0b\u9762\u8fd9\u4e24\u4e2a\u53bb\u6389\u3002","f4412a4e":"# 3.\u7f3a\u5931\u503c\u7edf\u8ba1\u53ca\u53ef\u89c6\u5316","4456eebb":"\u5220\u9664\u7279\u5f81","d8b1e419":"\u65b0\u589e\u7279\u5f81,\u6cf3\u6c6020\u33a1\u548c40\u33a1\u533a\u522b\u4e0d\u5927,\u4f46\u662f0\u33a1\u548c20\u33a1\u533a\u522b\u5f88\u5927\uff01\uff01\uff01\n\n\u6709\u8981\u6bd4\u6ca1\u6709\u53fc,\u6240\u4ee5\u52a0\u4e00\u4e2a0\/1\u6807\u5fd7\u533a\u522b\u6709\u65e0","d0174af9":"\u53ef\u4ee5\u770b\u5230\u8fd8\u662f\u6709\u591a\u91cd\u5171\u7ebf\u6027\u7684(0.83, 0.89...),\u5982\u679c\u7528\u591a\u5143\u7ebf\u6027\u56de\u5f52,\u5c31\u8981\u5220\u6389\u8fd9\u4e9b\u91cd\u590d\u7279\u5f81\u5176\u4e2d\u7684\u4e00\u4e2a","46e6ce4b":"# 5.\u7f3a\u5931\u503c\u5904\u7406","b8632ace":"SalePrice \u4e0e OverallQual","f4daa5e5":"# 7.\u7279\u5f81\u5de5\u7a0b","133a3e7a":"# 2.\u7edf\u8ba1\u6570\u636e\u96c6\u4fe1\u606f","9a115373":"\u5229\u7528boxcox\u53d8\u6362,\u5c06\u6570\u636e\u6b63\u6001\u5316","fbf3fe48":"\u5206\u522b\u7ed8\u5236GrLivArea\u548cMasVnrArea\u4e0e\u623f\u4ef7\u7684\u7ebf\u6027\u5173\u7cfb","b2ecd746":"SalePrice vs MasVnrArea(\u5916\u8d34\u88c5\u4fee\u9762\u79ef)","8b3b36ef":"\u5b9a\u6027\u5206\u6790\u4e0a\u8ff0\u76f8\u5173\u6027\u5e76\u5c06\u5176\u53ef\u89c6\u5316","12e5245f":"# 4.\u76ee\u6807\u91cf\u5206\u6790\n   \u5206\u6790\u76ee\u6807\u6807\u91cf, \u5efa\u7acb\u76f4\u65b9\u56fe\u4e0e\u8fde\u7eed\u6982\u7387\u4f30\u8ba1\u56fe","214de555":"\u53ef\u4ee5\u770b\u51faGrLivArea\u4e0e\u623f\u4ef7\u7684\u7ebf\u6027\u5173\u7cfb\u8981\u660e\u663e\u4e8eMasVnrArea\n\n\n\u753b\u6b8b\u5dee\u56fe"}}