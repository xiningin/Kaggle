{"cell_type":{"3e5c23d8":"code","b7204666":"code","dc2eaed7":"code","49a43c3f":"code","77fd2673":"code","1d2f6a81":"code","4dae7f02":"code","2ad3360b":"code","988ed59c":"markdown","e10a6fb5":"markdown","7986fc5d":"markdown","655c6561":"markdown","ed42864b":"markdown","f6654b0d":"markdown","68138f26":"markdown","5d62d20a":"markdown","4297d577":"markdown","91574b03":"markdown","1a0c95ef":"markdown","a3e689cf":"markdown","0b996597":"markdown"},"source":{"3e5c23d8":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n    \nfrom pathlib import Path\n","b7204666":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_tasks = sorted(os.listdir(test_path))\nprint(\"Number of examples in training corpus is \",len(training_tasks))\nprint(\"Number of examples in evaluation corpus is \",len(evaluation_tasks))\nprint(\"Number of examples in testing corpus is \",len(test_tasks))\n","dc2eaed7":"\ncmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()\n    ","49a43c3f":"for i, json_path in enumerate(training_tasks[:3]):\n    \n    task_file = str(training_path \/ json_path)\n\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n\n    print(f\"{i:03d}\", task_file)\n    plot_task(task)","77fd2673":"\nsubmission = pd.read_csv(data_path \/ 'sample_submission.csv', index_col='output_id')\ndisplay(submission.head())\n","1d2f6a81":"print(\"Number of submissions for each test task is\" ,len(submission['output'][0].strip().split(' ')))","4dae7f02":"def show_output(outputid):\n    \n    fig, axs = plt.subplots(1, 3, figsize=(15,15))\n    l=0\n    for sub in submission.loc[outputid]['output'].strip().split(' '):\n        out=[]\n        for i in sub.split('|')[1:-1]:\n                x=list(map(int,list(i)))\n                out.append(x)\n\n        axs[l].imshow(out,cmap=cmap)\n        axs[l].axis('off')\n        l=l+1\n","2ad3360b":"show_output('009d5c81_0')","988ed59c":"Now you can see the three predicted ouput patterns for test task 1 . For each test task there are 3 trails like this and if any of these exactly match the expected output your submission is regarded as correct.","e10a6fb5":"## <font size='3' color='red'>prediction format<\/font>","7986fc5d":"The output_id is the id of the task, followed by the index of the test input that you should use to make your prediction. The output is the predicted output of the corresponding test input, reformatted into a string representation.Let's check how this is represented..","655c6561":"## <font size='4' color='red'>Please leave an upvote if you feel this was helpful<font size='3' color='blue'>   \n##    Thank you<\/font><\/font>","ed42864b":"### <font size='4' color='red'>Abstract reasoning dataset<\/font>\n\nAbstract Reasoning Corpus (ARC) comprises a training set and an evaluation set. The training set features 400 tasks,while the evaluation set features 400 tasks.  The evaluation set is further split into a publicevaluation set (400 tasks) and a private evaluation set (100 tasks). All tasks are unique, and the set of test tasks and the set of training tasks are disjoint.Let's check this first..","f6654b0d":"Okay,now each task consists of a small number of demonstration examples (3 on average), and a small number of test examples (generally 1, although it may be 2 or 3 in rare cases). Each example consists of an \u201cinput grid\u201d and an \u201coutput grid\u201d.  Each \u201cgrid\u201d is a literal grid of symbols (each symbol is typically visualized via a unique color). Thereare 10 unique symbols (or colors).  A grid can be any height or width between 1x1 and 30x30, inclusive (the median height is 9 and the median width is 10). Let's understand this by checking our training corpus.","68138f26":"For each test task,you can use 3 trials.If anyone of these trials exactly match the correct output matrix,the answer is regarded as correct.\n\n\n","5d62d20a":"## <font size='5' color='red'>Content<\/font>","4297d577":"Hey fellow Kagglers,this is a one strange competition among the all the competitions that has been lauched in kaggle till date.So,I dedicate this notebook to share what I undertood about the competition and **Abstract Reasoning**.\n![](https:\/\/miro.medium.com\/max\/2081\/1*KVomuoRF3Io41g4Zhjy2iw.jpeg)","91574b03":"### References\n- https:\/\/deepmind.com\/blog\/article\/measuring-abstract-reasoning\n- https:\/\/arxiv.org\/pdf\/1911.01547.pdf\n- https:\/\/towardsdatascience.com\/are-neural-networks-capable-of-abstract-reasoning-lets-use-an-iq-test-to-prove-it-1d1ff1929fef","1a0c95ef":"Now you can see that for each task there are n number of training pairs and 1 test pair.We need to build an algorithm to that is trained on these n training pairs and can predict the output pattern for the test input.Also you can observe that the grid size is not same for all tasks,our algoithm should first be able to figure out the output grid size given some training pairs.\nSo now you know your objective we will move onto submission section.","a3e689cf":"To understand why abstract reasoning is critical for general intelligence, consider Archimedes\u2019 famous \u201cEureka!\u201d moment: by noticing that the volume of an object is equivalent to the volume of water that the object displaces, he understood volume at a conceptual level, and was therefore able to reason about the volume of other irregularly shaped objects.The ability to relate two abstract concepts also allowed Albert Einstein to formulate the basics of the theory of relativity as he reasoned that an equivalence relation exists between an observer falling in uniform acceleration and an observer in a uniform gravitational field. Abstract reasoning has long been used as an example that separates human cognition from artificial intelligence(AI)\n\nWe would like AI to have similar capabilities. While current systems can defeat world champions in complicated strategic games, they often struggle on other apparently simple tasks, especially when an abstract concept needs to be discovered and reapplied in a new setting. For example, if specifically trained to only count triangles, then even our best AI systems can still fail to count squares, or any other previously unencountered object.So,I hope you now understand the basic difference between our problem and the traditional artificial intelligence problems that we are familiar with.Now,we will move onto exploring this competition..","0b996597":"Let's try and print an image correponding to one output"}}