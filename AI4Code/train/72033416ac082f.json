{"cell_type":{"4f939df4":"code","c27437f7":"code","e7a54699":"code","497ba572":"code","f175e6b9":"code","34a4c2de":"code","78e4ee23":"code","0d415bf2":"code","ecdf1b14":"code","2e319faf":"code","091198ec":"code","deb55ad0":"code","16778c98":"code","e9204659":"code","66cb92f6":"code","95e23cad":"code","91ca28b5":"code","222f2c0b":"code","93dc5803":"code","8f18d4bd":"code","e9d38d2b":"code","22f37422":"code","830741ab":"code","e95a4441":"code","610f7382":"code","61fe870b":"code","a6a636ee":"markdown","209057bf":"markdown","95496ac3":"markdown","f953608d":"markdown","bd232cf1":"markdown","1716eedf":"markdown","5f360a4b":"markdown","5894b61c":"markdown","544add8d":"markdown","b86a89f3":"markdown","5bb63d23":"markdown","e058c2a7":"markdown","ea2b0f06":"markdown","affc41ba":"markdown","28efde64":"markdown","2d5c77aa":"markdown","40ee7de7":"markdown","840221f5":"markdown","2e0a68cb":"markdown","b9baf092":"markdown"},"source":{"4f939df4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport seaborn as sns\nimport plotly.graph_objs as go\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c27437f7":"from pandas import read_csv\nfrom pandas.plotting import scatter_matrix\nfrom matplotlib import pyplot\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","e7a54699":"data=pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')","497ba572":"data.head().T","f175e6b9":"data.info()","34a4c2de":"data.describe().T","78e4ee23":"data2=pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv', parse_dates=['dt'])\ndata2=data2.replace([np.inf, -np.inf], np.nan).dropna()\ndata2['maxAvgTemp']=data2['LandAverageTemperature']+data2['LandAverageTemperatureUncertainty']\ndata2['minAvgTemp']=data2['LandAverageTemperature']-data2['LandAverageTemperatureUncertainty']\n\ndata2=data2.groupby(data2['dt'].map(lambda x: x.year)).mean().reset_index()\nmin_year=data2['dt'].min()\nmax_year=data2['dt'].max()","0d415bf2":"data2.head(-5).T","ecdf1b14":"sns.set(style=\"whitegrid\")\nsns.set_color_codes(\"pastel\")\n_, ax=plt.subplots(figsize=(10, 6))\n\nplt.plot(data2['dt'], data2['LandAverageTemperature'], color='black')\nax.fill_between(data2['dt'], data2['minAvgTemp'], data2['maxAvgTemp'], color='b')\n\nplt.xlim(min_year, max_year)\nax.set_title('Belirsizlik dahil ortalama k\u00fcresel s\u0131cakl\u0131k')\n\nplt.show()","2e319faf":"global1=pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')\nglobal1=global1[['dt','LandAverageTemperature']]\nglobal1.dropna(inplace=True)\nglobal1['dt']=pd.to_datetime(global1.dt).dt.strftime('%d\/%m\/%Y')\nglobal1['dt']=global1['dt'].apply(lambda x:x[6:])\nglobal1=global1.groupby(['dt'])['LandAverageTemperature'].mean().reset_index()\ntrace=go.Scatter(\n    x=global1['dt'],\n    y=global1['LandAverageTemperature'],\n    mode='lines',\n    )\ndata1=[trace]\npy.iplot(data1, filename='line-mode')","091198ec":"global_temp =pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')\n\nglobal_temp['dt'] = pd.to_datetime(global_temp['dt'])\nglobal_temp['year'] = global_temp['dt'].map(lambda x: x.year)\nglobal_temp['month'] = global_temp['dt'].map(lambda x: x.month)\n\ndef get_season(month):\n    if month >= 3 and month <= 5:\n        return 'spring'\n    elif month >= 6 and month <= 8:\n        return 'summer'\n    elif month >= 9 and month <= 11:\n        return 'autumn'\n    else:\n        return 'winter'\n    \nmin_year = global_temp['year'].min()\nmax_year = global_temp['year'].max()\nyears = range(min_year, max_year + 1)\n\nglobal_temp['season'] = global_temp['month'].apply(get_season)\n\nspring_temps = []\nsummer_temps = []\nautumn_temps = []\nwinter_temps = []\n\nfor year in years:\n    curr_years_data = global_temp[global_temp['year'] == year]\n    spring_temps.append(curr_years_data[curr_years_data['season'] == 'spring']['LandAverageTemperature'].mean())\n    summer_temps.append(curr_years_data[curr_years_data['season'] == 'summer']['LandAverageTemperature'].mean())\n    autumn_temps.append(curr_years_data[curr_years_data['season'] == 'autumn']['LandAverageTemperature'].mean())\n    winter_temps.append(curr_years_data[curr_years_data['season'] == 'winter']['LandAverageTemperature'].mean())","deb55ad0":"spring_temps\nsummer_temps\nautumn_temps\nwinter_temps","16778c98":"sns.set(style=\"whitegrid\")\nsns.set_color_codes(\"pastel\")\nf, ax = plt.subplots(figsize=(10, 6))\nplt.plot(years, summer_temps, label='Yaz ortalama s\u0131cakl\u0131k', color='orange')\nplt.plot(years, autumn_temps, label='Sonbahar', color='r')\nplt.plot(years, spring_temps, label='\u0130lkbahar ortalama s\u0131cakl\u0131k', color='g')\nplt.plot(years, winter_temps, label='K\u0131\u015f ortalama s\u0131cakl\u0131k', color='b')\nplt.xlim(min_year, max_year)\nax.set_ylabel('Ortalama')\nax.set_xlabel('Y\u0131llar')\nax.set_title('Her mevsimdeki ortalama s\u0131cakl\u0131k')\nlegend = plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), frameon=True, borderpad=1, borderaxespad=1)","e9204659":"# NaN de\u011ferleri siliyoruz\ndata = data[data['LandAverageTemperature'].notna()]\ndata = data[data['LandAverageTemperatureUncertainty'].notna()]\ndata = data[data['LandMaxTemperature'].notna()]\ndata = data[data['LandMaxTemperatureUncertainty'].notna()]\ndata = data[data['LandMinTemperature'].notna()]\ndata = data[data['LandMinTemperatureUncertainty'].notna()]\ndata = data[data['LandAndOceanAverageTemperature'].notna()]\ndata = data[data['LandAndOceanAverageTemperatureUncertainty'].notna()]","66cb92f6":"print(\"Sat\u0131r say\u0131s\u0131\",data.shape[0])","95e23cad":"del data['dt']","91ca28b5":"data.head().T","222f2c0b":"columns=data.columns\nfor x in columns:\n    data[x] = data[x].astype(int)","93dc5803":"data.info()","8f18d4bd":"#B\u00f6l\u00fcnm\u00fc\u015f do\u011frulama veri k\u00fcmesi\narray = data.values\nX = array[:,1:8]\ny = array[:,0]\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)","e9d38d2b":"X","22f37422":"y","830741ab":"# Algoritmalar uygulad\u0131m\nmodels = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n\nresults = []\nnames = []\nfor name, model in models:\n\tkfold = StratifiedKFold(n_splits=4, random_state=1, shuffle=True)\n\tcv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n\tresults.append(cv_results)\n\tnames.append(name)\n\tprint('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","e95a4441":"# Algoritma kar\u015f\u0131la\u015ft\u0131rmas\u0131\npyplot.boxplot(results, labels=names)\npyplot.title('Algoritma kar\u015f\u0131la\u015ft\u0131rmas\u0131')\npyplot.show()","610f7382":"# Do\u011frulama veri k\u00fcmesinde tahminlerde bulunma\nmodel = SVC(gamma='auto')\nmodel.fit(X_train, Y_train)\npredictions = model.predict(X_validation)","61fe870b":"# Tahminleri de\u011ferlendirdim\nprint(accuracy_score(Y_validation, predictions))\nprint(confusion_matrix(Y_validation, predictions))\nprint(classification_report(Y_validation, predictions))","a6a636ee":"# ENTRANCE - G\u0130R\u0130\u015e\nBaz\u0131lar\u0131 iklim de\u011fi\u015fikli\u011finin \u00e7a\u011f\u0131m\u0131z\u0131n en b\u00fcy\u00fck tehdidi oldu\u011funu, di\u011ferleri ise tehlikeli bilime dayanan bir efsane oldu\u011funu s\u00f6yl\u00fcyor. Bitirme \u00e7al\u0131\u015fmam i\u00e7in Berkeley Earth'\u00fcn Climate Change: Earth Surface Temperature Data adl\u0131 veri setinde analiz, g\u00f6rselle\u015ftirme, tahmin ve modelleme i\u015flemleri yapt\u0131m.\n","209057bf":"Veri seti hakk\u0131nda baz\u0131 \u00f6zellikler.","95496ac3":"Do\u011frulu\u011fun oran\u0131n\u0131n yakla\u015f\u0131k %77 oldu\u011funu g\u00f6rebiliyoruz. M\u00fckemmel olmasa da \u00e7ok iyi bir de\u011fer.","f953608d":"LDA, KNN, CART ve SVM de\u011ferleri \u00e7ok yak\u0131n olsalarda en iyi sonucu SVM algoritmas\u0131 veriyor.","bd232cf1":"Eksik verilerin sonucu k\u00f6t\u00fc y\u00f6nde etkileyece\u011fini d\u00fc\u015f\u00fcd\u00fc\u011f\u00fcm i\u00e7in NaN de\u011ferlerin oldu\u011fu sat\u0131rlar\u0131 sildim.","1716eedf":"Verilere \u015f\u00f6yle bir g\u00f6zatt\u0131\u011f\u0131m\u0131zda ilk y\u0131llarda \u00e7ok fazla NaN de\u011fer oldu\u011funu g\u00f6r\u00fcyoruz. Baz\u0131 i\u015flemleri yapmadan \u00f6nce bu de\u011ferleri silmemiz gerekecek.","5f360a4b":"1750 - 2015 tarihleri aras\u0131ndaki s\u0131cakl\u0131k de\u011ferlerinin her mevsimdeki de\u011fi\u015fimini g\u00f6rselle\u015ftirdim. Bariz bir \u015fekilde y\u00fckselme oldu\u011fu g\u00f6r\u00fcl\u00fcyor.","5894b61c":"X ve y veri setlerini olu\u015ftrup gerekli s\u00fctunlar\u0131 atad\u0131m. Test ve e\u011fitim verilerini olu\u015fturdum.","544add8d":"Yakla\u015f\u0131k 160 y\u0131ll\u0131k verileri ortalama, minimum ve maksimum de\u011ferlerine g\u00f6re grafik \u00fczerinden g\u00f6rselle\u015ftirdim. Sadece 160 y\u0131lda ortalama s\u0131cakl\u0131\u011f\u0131n 2 santigrat derece y\u00fckseldi\u011fi g\u00f6r\u00fclmektedir.","b86a89f3":"# DATA VISUALIZATION - VER\u0130 G\u00d6RSELLE\u015eT\u0130RME\nVeri setini inceledikten sonra s\u0131cakl\u0131k verilerini grafiklerler g\u00f6rselle\u015ftirmeye \u00e7al\u0131\u015ft\u0131m.","5bb63d23":"Tahminleri, do\u011frulama k\u00fcmesinde beklenen sonu\u00e7larla kar\u015f\u0131la\u015ft\u0131r\u0131p, ard\u0131ndan s\u0131n\u0131fland\u0131rma do\u011frulu\u011funu, kar\u0131\u015f\u0131kl\u0131k matrisini ve s\u0131n\u0131fland\u0131rma raporunu hesaplad\u0131m.","e058c2a7":"Ortalama s\u0131cakl\u0131k de\u011ferlerini min ve max de\u011ferler olmadan g\u00f6rselle\u015ftirdim.","ea2b0f06":"# LIBRARIES - K\u00dcT\u00dcPHANELER\n\u00c7al\u0131\u015fmam i\u00e7in gerekli k\u00fct\u00fcphaneler.","affc41ba":"Veriye ait baz\u0131 \u00f6zellikler.","28efde64":"Bu \u00e7al\u0131\u015fmada hangi algoritmalar\u0131n iyi olaca\u011f\u0131n\u0131 veya hangi yap\u0131land\u0131rmalar\u0131n kullan\u0131laca\u011f\u0131n\u0131 bilmedi\u011fim i\u00e7in 6 farkl\u0131 algoritmay\u0131 denedim.\n* Logistic Regression (LR)\n* Linear Discriminant Analysis (LDA)\n* K-Nearest Neighbors (KNN).\n* Classification and Regression Trees (CART).\n* Gaussian Naive Bayes (NB).\n* Support Vector Machines (SVM).","2d5c77aa":"# MODELLING, FORECAST,  TEST- MODELLEME, TAHM\u0130N, TEST","40ee7de7":"\u0130\u015fleme devam edebilmek i\u00e7in s\u00fctunlar\u0131n veri tiplerini float64'ten int64'e \u00e7evirdim.","840221f5":"Bir sonraki grafik i\u00e7in gerekli veri seti, fonksiyon ve de\u011fi\u015fkenleri d\u00fczenledim.","2e0a68cb":"# DATA ANALYSIS - VER\u0130 ANAL\u0130Z\u0130","b9baf092":"Modelleme i\u015flemine ge\u00e7meden \u00f6nce tarih s\u00fctununu \u00e7\u0131kar\u0131yoruz."}}