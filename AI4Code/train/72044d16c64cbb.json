{"cell_type":{"ca870322":"code","cca2036f":"code","48e0e010":"code","2a87f264":"code","aabb474d":"code","924c8709":"code","b3ea9fcc":"markdown","b22a8453":"markdown","7420aeec":"markdown","361f6f73":"markdown","93173e93":"markdown","3876ae1b":"markdown","4ce7f49e":"markdown","8695f2aa":"markdown","dbb359ca":"markdown"},"source":{"ca870322":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n!pip install anytree\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom anytree import Node, RenderTree,search\nfrom queue import *\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cca2036f":"def moveMan(parent_node):\n    child=dict(parent_node.name)\n    #east\n    if child[\"man\"]==False:\n        child[\"man\"]=True\n        return child\n        \n    #west\n    if child[\"man\"]==True:\n        child[\"man\"]=False\n        return child\n    else : return None\ndef moveLion(parent_node):\n    child=dict(parent_node.name)\n    #east\n    if child[\"man\"]==False and child[\"lion\"]==False:\n        child[\"man\"]=True\n        child[\"lion\"]=True\n        return child\n        \n    #west\n    if child[\"man\"]==True and child[\"lion\"]==True:\n        child[\"man\"]=False\n        child[\"lion\"]=False\n        return child\n    else : return None\n    \n    \ndef moveGoat(parent_node):\n    child=dict(parent_node.name)\n    #east\n    if child[\"man\"]==False and child[\"goat\"]==False:\n        child[\"man\"]=True\n        child[\"goat\"]=True\n        \n        \n        return child\n        \n    #west\n    if child[\"man\"]==True and child[\"goat\"]==True:\n        child[\"man\"]=False\n        child[\"goat\"]=False\n        return child\n    else : return None\n    \ndef moveGrass(parent_node):\n    child=dict(parent_node.name)\n    #east\n    if child[\"man\"]==False and child[\"grass\"]==False:\n        child[\"man\"]=True\n        child[\"grass\"]=True\n        \n        \n        return child\n        \n    #west\n    if child[\"man\"]==True and child[\"grass\"]==True:\n        child[\"man\"]=False\n        child[\"grass\"]=False\n        return child\n    else : return None","48e0e010":"def constraints(node):\n    if(node[\"grass\"]==True and node[\"goat\"]==True and node[\"man\"]==False):\n        node[\"state\"]=False\n    if(node[\"grass\"]==False and node[\"goat\"]==False and  node[\"man\"]==True):\n        node[\"state\"]=False\n    if(node[\"lion\"]==True and node[\"goat\"]==True and  node[\"man\"]==False):\n        node[\"state\"]=False\n    if(node[\"lion\"]==False and node[\"goat\"]==False and node[\"man\"]==True):\n        node[\"state\"]=False\n    if(node[\"lion\"]==True and node[\"goat\"]==True and node[\"man\"]==True and node[\"grass\"]==True):\n        node[\"state\"]=\"Goal\"\n    return node","2a87f264":"def find_repeat(udo,temp):\n    result=0\n    for pre, fill, node in RenderTree(udo):\n        if ((node.name[\"goat\"] == temp[\"goat\"]) and (node.name[\"lion\"] == temp[\"lion\"])  and (node.name[\"grass\"] == temp[\"grass\"])  and (node.name[\"man\"] == temp[\"man\"])  and (node.name[\"state\"] == temp[\"state\"])):\n            result=1\n    \n    if result==1:\n        temp[\"state\"]=\"repeat\"\n        print(\"repeat\")\n    return temp\n    \n            ","aabb474d":"import time\nstart = time. time()\nStart_point={\n            \"man\":False,\n           \"goat\":False,\n           \"lion\":False,\n           \"grass\":False,\n            \"state\":True\n          }\n\nq = Queue(maxsize=0)\nudo = Node(Start_point)\n\nq.put(udo)\nwhile(True):\n    \n    Parent=q.get()\n    if((Parent.name[\"lion\"]==True and Parent.name[\"goat\"]==True and Parent.name[\"grass\"]==True and Parent.name[\"man\"]==True )):\n        break\n    \n    \n    temp=moveMan(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child1=Node(temp,parent=Parent)\n        \n        if temp[\"state\"]==True:\n            q.put(child1)\n\n\n    temp=moveLion(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child2=Node(temp,parent=Parent)\n        if temp[\"state\"]==True:\n            q.put(child2)\n\n\n    temp=moveGoat(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child3=Node(temp,parent=Parent)\n        if temp[\"state\"]==True:\n            q.put(child3)\n\n\n    temp=moveGrass(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child4=Node(temp,parent=Parent)\n        if temp[\"state\"]==True:\n            q.put( child4)\n    \n    \n    if q.empty()==1:\n        break\n    \n\nfor pre, fill, node in RenderTree(udo):\n       print(\"%s%s\" % (pre, node.name))     \n        \nend = time. time()\nprint(\"Time Taken\",end - start)\n","924c8709":"import time\nstart = time. time()\nStart_point={\n            \"man\":False,\n           \"goat\":False,\n           \"lion\":False,\n           \"grass\":False,\n            \"state\":True\n          }\n\nq = LifoQueue()\nudo = Node(Start_point)\n\nq.put(udo)\nwhile(True):\n    \n    Parent=q.get()\n    if((Parent.name[\"lion\"]==True and Parent.name[\"goat\"]==True and Parent.name[\"grass\"]==True and Parent.name[\"man\"]==True )):\n        break\n    \n    \n    temp=moveMan(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child1=Node(temp,parent=Parent)\n        \n        if temp[\"state\"]==True:\n            q.put(child1)\n\n\n    temp=moveLion(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child2=Node(temp,parent=Parent)\n        if temp[\"state\"]==True:\n            q.put(child2)\n\n\n    temp=moveGoat(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child3=Node(temp,parent=Parent)\n        if temp[\"state\"]==True:\n            q.put(child3)\n\n\n    temp=moveGrass(Parent)\n    if temp != None:\n        temp=find_repeat(udo,temp)\n        constraints(temp)\n        child4=Node(temp,parent=Parent)\n        if temp[\"state\"]==True:\n            q.put( child4)\n    \n    \n    if q.empty()==1:\n        break\n    \n\nfor pre, fill, node in RenderTree(udo):\n       print(\"%s%s\" % (pre, node.name))     \n        \nend = time. time()\nprint(\"Time Taken\",end - start)\n","b3ea9fcc":"**Breadth First Search**","b22a8453":"**Constraints which Step is repeat**","7420aeec":"**Creating Tree**","361f6f73":"**Moving Farmer, Lion , Goat , Grass **","93173e93":"**Goal state in the tree is the final point where are the objects are True and state == Goal** ","3876ae1b":"**Depth First Search**","4ce7f49e":"Problem:\n    A Man wants to bring a Lion, a goat, and Grass across the river. The boat is tiny and can only carry one passenger at a time. If he leaves the Lion and the goat alone together, the Lion will eat the goat. If he leaves the goat and the Grass alone together, the goat will eat the Grass.\nHow can he bring all three safely across the river?\n![](https:\/\/mark-borg.github.io\/img\/posts\/farmer-wolf-goat-cabbage.png)\n\n","8695f2aa":"**Constraints which Step is false**","dbb359ca":"**Main**"}}