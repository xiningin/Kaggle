{"cell_type":{"b02cc8f7":"code","f60804af":"code","6c9852bd":"code","be15299f":"code","b7b5ae04":"code","3d69f3f0":"code","6812fdcf":"code","a1b2cd87":"code","09067bd7":"code","9b78fe46":"code","0b9b4130":"code","19d1cd76":"code","38a30d80":"code","acd8a591":"code","436de0d2":"code","7204790d":"code","7bbcfe0a":"code","7e139293":"code","d6056367":"code","cbf47d0d":"code","d44fd029":"code","285cd0e1":"code","b1a872bd":"code","ce389fff":"code","f0ee1e11":"code","a289e2ee":"code","795299d2":"code","4f1268b1":"code","4cab3b16":"code","00b498c3":"code","8db2e659":"code","7670f33b":"code","f9575eb3":"code","862a002d":"code","1fc9be1d":"markdown"},"source":{"b02cc8f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f60804af":"import pandas as pd\ntrain = pd.read_csv('\/kaggle\/input\/expedia-hotel-recommendations\/train.csv', usecols = ['user_id'])\n\n","6c9852bd":"users = train['user_id'].unique()\n","be15299f":"users.shape","b7b5ae04":"import numpy as np\nselect_users = np.random.choice(users, 100000, replace=False)\nselect_users.shape","3d69f3f0":"select_users","6812fdcf":"y = pd.DataFrame(select_users)\ny.columns = ['id']\ny","a1b2cd87":"import pandas as pd\npath = '\/kaggle\/input\/expedia-hotel-recommendations\/train.csv'\niter_csv = pd.read_csv(path, iterator=True, chunksize=1000)\nselect = pd.concat([chunk.loc[chunk.user_id.isin(y['id'])] for chunk in iter_csv])\nselect.head()","09067bd7":"df = select","9b78fe46":"df.shape","0b9b4130":"df.columns","19d1cd76":"df['date'] = pd.to_datetime(df['date_time'])\ndf['date'] = df['date'].dt.date\ndf['month-year'] = pd.to_datetime(df['date']).dt.to_period('M')\ndf['hours'] = pd.to_datetime(df['date_time'])\ndf['hours'] = df['hours'].dt.hour\ndf = df.sort_values(by = 'month-year')\n","38a30d80":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(30,20))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\n\nax = fig.add_subplot(2, 2, 1)\nsns.countplot(df['posa_continent'], ax=ax)\n\nax = fig.add_subplot(2, 2, 2)\nsns.countplot(df['month-year'], ax=ax)\nplt.xticks(rotation=90)\n\nax = fig.add_subplot(2, 2, 3)\nsns.countplot(df['hotel_cluster'], ax=ax)\nplt.xticks(rotation=90)\n\nax = fig.add_subplot(2, 2, 4)\nsns.countplot(df['is_booking'], ax=ax)\nplt.show()","acd8a591":"sns.barplot(df['hotel_cluster'], hue =df['is_booking'])\nplt.xticks(rotation=90)\n","436de0d2":"sns.countplot(x=df['hotel_cluster'], hue=df['is_booking'])\nplt.xticks(rotation=90)","7204790d":"sns.countplot(df['is_booking'])\nplt.show()","7bbcfe0a":"sns.countplot(df['month-year'],hue=df['is_booking'])\nplt.xticks(rotation=90)\nplt.show()","7e139293":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(30,20))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\nax = fig.add_subplot(2, 2, 1)\nsns.countplot(df['hours'], ax=ax)\nax = fig.add_subplot(2, 2, 2)\nsns.countplot(df['is_package'], ax=ax)\nplt.xticks(rotation=90)\nax = fig.add_subplot(2, 2, 3)\nsns.countplot(df['channel'], ax=ax)\nplt.xticks(rotation=90)\nax = fig.add_subplot(2, 2, 4)\nsns.distplot(df['srch_adults_cnt'], ax=ax)\nplt.show()","d6056367":"sns.FacetGrid(df, hue=\"is_booking\", size=6) \\\n   .map(plt.hist, \"hotel_cluster\") \\\n   .add_legend()\nplt.title('book or click')\nplt.show()","cbf47d0d":"df['day'] = pd.to_datetime(df['date']).dt.day\ndf['month'] = pd.to_datetime(df['date']).dt.month\n","d44fd029":"df.head().transpose()","285cd0e1":"df.columns","b1a872bd":"df_1 = df[['site_name', 'posa_continent', 'user_location_country',\n       'user_location_region', 'user_location_city',\n       'user_id', 'is_mobile', 'is_package',\n       'channel', 'srch_destination_id', 'srch_destination_type_id',\n       'is_booking', 'cnt', 'hotel_continent', 'hotel_country', 'hotel_market',\n       'hotel_cluster', 'day', 'month', 'hours']]","ce389fff":"x = pd.DataFrame(df_1.groupby(['user_location_country']).size())\nx.transpose()","f0ee1e11":"df_1['is_clicking'] = df_1['is_booking']\ndf_1.is_clicking[df_1.is_clicking == 0] = 2\ndf_1.is_clicking[df_1.is_clicking == 1] = 0\ndf_1.is_clicking[df_1.is_clicking == 2] = 1","a289e2ee":"df_1[['is_booking', 'is_clicking']].head()","795299d2":"df_2 = df_1.groupby(['user_id', 'hotel_cluster', 'site_name', 'posa_continent', 'user_location_country','channel', 'hotel_continent', 'hotel_country', 'hotel_market']).sum()[['is_booking', 'is_clicking', 'is_mobile', 'is_package', 'cnt']].reset_index()\ndf_2.head\n","4f1268b1":"df_2.tail(20).transpose()","4cab3b16":"df_2.head(20).transpose()","00b498c3":"df_1.user_location_country[df_1.user_location_country == \"NaN\"] = 1000001\ndf_1.user_location_region[df_1.user_location_region == \"NaN\"] = 1000001\ndf_1.user_location_city[df_1.user_location_city == \"NaN\"] = 1000001\ndf_1.srch_destination_id[df_1.srch_destination_id == \"NaN\"] = 1000001\ndf_1.srch_destination_type_id[df_1.srch_destination_type_id == \"NaN\"] = 1000001\ndf_1.user_location_country[df_1.user_location_country == \"NaN\"] = 1000001\ndf_1.hotel_continent[df_1.hotel_continent == \"NaN\"] = 1000001\ndf_1.hotel_country[df_1.hotel_country == \"NaN\"] = 1000001\ndf_1.hotel_market[df_1.hotel_market == \"NaN\"] = 1000001","8db2e659":"site_name = pd.get_dummies(df_1[\"site_name\"], prefix = 'site_name: ')\nposa_continent = pd.get_dummies(df_1[\"posa_continent\"], prefix = 'posa_continent: ')\nuser_location_country = pd.get_dummies(df_1[\"user_location_country\"], prefix = 'user_location_country: ')\nuser_location_region = pd.get_dummies(df_1[\"user_location_region\"], prefix = 'user_location_region: ')\n#user_location_city = pd.get_dummies(df_1[\"user_location_city\"], prefix = 'user_location_city: ')\n#srch_destination_id = pd.get_dummies(df_1[\"srch_destination_id\"], prefix = 'srch_destination_id: ')\nsrch_destination_type_id = pd.get_dummies(df_1[\"srch_destination_type_id\"], prefix = 'srch_destination_type_id: ')\nhotel_continent = pd.get_dummies(df_1[\"hotel_continent\"], prefix = 'hotel_continent: ')\nhotel_country = pd.get_dummies(df_1[\"hotel_country\"], prefix = 'hotel_country: ')\n#hotel_market = pd.get_dummies(df_1[\"hotel_market\"], prefix = 'hotel_market: ')\n","7670f33b":"df_2 = pd.concat([df_1.drop(['site_name', 'posa_continent',\"user_location_country\",\"user_location_region\",\"srch_destination_type_id\", \"hotel_continent\", \"hotel_country\"], axis = 1), \n                  site_name, posa_continent, user_location_country, user_location_region, srch_destination_type_id,\n                 hotel_continent, hotel_country], axis = 1)","f9575eb3":"df_2.head()","862a002d":"from sklearn import datasets \nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.model_selection import train_test_split \n\nX = df_2.drop(['hotel_cluster'] , axis=1) \ny = df_2['hotel_cluster'] \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, train_size=0.8) \n  \n# training a Naive Bayes classifier \nfrom sklearn.naive_bayes import GaussianNB \ngnb = GaussianNB().fit(X_train, y_train) \ngnb_predictions = gnb.predict(X_test) \n  \n# accuracy on X_test \naccuracy = gnb.score(X_test, y_test) \nprint (accuracy) \n  \n# creating a confusion matrix \ncm = confusion_matrix(y_test, gnb_predictions) ","1fc9be1d":"**EDA**\nStart visualization\n\n1. timeline\n1. click vs booking\n1. Destination country overlay Destimation booking"}}