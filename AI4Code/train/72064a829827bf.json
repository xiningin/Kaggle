{"cell_type":{"9752648d":"code","39b2ee8e":"code","df896cc6":"code","5d2ee5de":"code","77111f8a":"code","94e1d29e":"code","81b6b0af":"code","7fbc69a6":"code","faba1c7c":"code","9374fee4":"code","0945f74f":"code","4c9de618":"code","bc45391b":"code","1ad75036":"code","04ce1d7b":"code","e3368542":"code","5c7a7b9d":"markdown","dc73009d":"markdown","ecae2a3c":"markdown","a9404961":"markdown","c8a4b91d":"markdown","eaecc915":"markdown","6b67fec3":"markdown","535ce2e4":"markdown"},"source":{"9752648d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","39b2ee8e":"data = pd.read_csv('..\/input\/diabetes-uci-dataset\/diabetes.csv')","df896cc6":"data.head()","5d2ee5de":"data.info()","77111f8a":"sns.boxplot(x='class',y='Age',data=data)","94e1d29e":"plt.figure(figsize=(18,15))\nm=1\nfor i in data.columns[1:-1]:\n    plt.subplot(4,4,m)\n    m+=1\n    sns.countplot(x=i,data=data,hue='class')","81b6b0af":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndfs = []\nfor i in data.columns[1:-1]:\n    temp = pd.DataFrame({'Before Encoding':data[i].unique(),'After Encoding':label_encoder.fit_transform(data[i].unique())})\n    dfs.append([temp.sort_values(by=['After Encoding'],),i])\n    data[i] = label_encoder.fit_transform(data[i])\nprint('Post Encoding')","7fbc69a6":"dfs[0][0]","faba1c7c":"dfs[1][0]","9374fee4":"X = data.drop('class',axis=1)\n\nY = data['class']","0945f74f":"from sklearn.feature_selection import SelectKBest, chi2\nfs = SelectKBest(score_func=chi2, k='all')\nfs.fit(X, Y)\nper = []\nfor i in fs.scores_:\n    per.append(round(((i\/sum(fs.scores_))*100),3))\n\nfeatures_data = pd.DataFrame({'Feature':X.columns,'Scores':fs.scores_,'Importance (%)':per}).sort_values(by=['Scores'],ascending=False)\n\nplt.figure(figsize=(9,5))\nsns.barplot( 'Importance (%)','Feature',orient='h',data=features_data)\ninsignificant = features_data.loc[features_data['Importance (%)']<0.005]['Feature'].unique()\nfeatures_data.set_index('Feature')","4c9de618":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=100)","bc45391b":"from sklearn.metrics import accuracy_score,classification_report\n\n#XGB\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nxgb = XGBClassifier() \n\n\n# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\n\n#RFC\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\n\n#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\naccuracy = []\nfor i in range(1,40):    \n    kn = KNeighborsClassifier(n_neighbors=i)\n    kn.fit(X_train,Y_train)\n    predK = kn.predict(X_test)\n    accuracy.append([accuracy_score(Y_test,predK),i])\n    #print('Tested for k =',i)\ntemp = accuracy[0]\nfor m in accuracy:\n    if temp[0] < m[0]:\n        temp=m\nknn = KNeighborsClassifier(n_neighbors=temp[1])\n\n#SVM\nfrom sklearn.svm import SVC\nsvc = SVC()\n\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'C': [0.1,1, 10, 100, 1000,2000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} \ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)\n\nprint('Models Imported')","1ad75036":"model_acc = []\nmodels = [xgb,lr,rfc,knn,svc,grid]\n#model_name = ['xgb','lr','rfc','kno','svc','grid']\nfor i in models:\n    i.fit(X_train,Y_train)\n    model_acc.append(accuracy_score(Y_test,i.predict(X_test)))\n                      \nmodels = pd.DataFrame({'Models':models,'Accuracy':model_acc})","04ce1d7b":"models = models.sort_values(by=['Accuracy'],ascending=False).reset_index().drop('index',axis=1)\nbest = models['Models'][0]\nmodels['Models']=models['Models'].astype(str).str.split(\"(\", n = 2, expand = True)[0]\nmodels","e3368542":"print('Hence the best model is',models['Models'][0],'with an accuracy of',round((models['Accuracy'][0]*100),2),'%')\nprint('\\nThe classification report is:')\nprint(classification_report(Y_test,best.predict(X_test)))","5c7a7b9d":"# Test Train SPlit","dc73009d":"# Importing Data","ecae2a3c":"#  <center> Diabetes Prediction","a9404961":"# Model Selection","c8a4b91d":"# Importing Libraries","eaecc915":"# EDA","6b67fec3":"# One Hot Encoding","535ce2e4":"# Feature selection"}}