{"cell_type":{"b4ab44ee":"code","cf847d22":"code","54812d6b":"code","50df9136":"code","a0e334e0":"code","a05ceed4":"code","0265a772":"code","6c6c705e":"code","4fe367d6":"code","88eb21d0":"code","5fd40093":"code","220b422a":"code","de2f07f8":"code","2074a168":"code","168baab9":"code","3c7c9517":"code","699803d7":"code","63a58932":"code","d83adb97":"code","75981e46":"code","6d7e880a":"code","7c5ce297":"code","317be3cc":"code","5a611e3d":"code","f31727e5":"code","ca7978d8":"markdown","735acf7f":"markdown","438efba8":"markdown","71e92093":"markdown","e448fd5e":"markdown","2f9eae77":"markdown","80116cc0":"markdown","ef6f1fa2":"markdown","41f5a1ce":"markdown","a220a24c":"markdown","9fdf7829":"markdown","2d0d1857":"markdown","4f2fb6bd":"markdown","fe8496cd":"markdown","c14bf524":"markdown","3c435e48":"markdown","0f951c8f":"markdown","f5f42fe2":"markdown","8d539763":"markdown","e5020bc5":"markdown","68fa44b6":"markdown"},"source":{"b4ab44ee":"get_ipython().run_line_magic('matplotlib', 'inline') \nimport joblib\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing,feature_selection\n\nfrom scipy.special import boxcox1p\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cf847d22":"cd {dirname}","54812d6b":"def setup_seed(seed):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)","50df9136":"## Categorize features\n@np.vectorize\ndef is_bool(x):\n    return x in [True,False]\n'''Load data'''\ndf_train=pd.read_csv(\"train.csv\")\ndf_test=pd.read_csv(\"test.csv\")\ndf_train['terrainType']=df_train['terrainType'].astype(\"str\")\ndf_test['terrainType']=df_test['terrainType'].astype(\"str\")\ndf_mix=df_test.merge(df_train,how=\"outer\")\ndf_tmp=df_mix.iloc[:2].drop(columns=[\"class\",'id'])\n'''Categorize features by dtype'''\nall_cols=df_tmp.columns.values\nnum_cols=np.array([col for col in df_tmp[all_cols]._get_numeric_data().columns.values if col!=\"terrainType\"])\ntmp_cols=np.setdiff1d(all_cols,num_cols)\ncat_cols=tmp_cols[np.logical_or(~is_bool(df_tmp[tmp_cols].values[0]),~is_bool(df_tmp[tmp_cols].values[1]))]\nbinary_cols=np.setdiff1d(tmp_cols,cat_cols)\ncooc_cols=np.array([cont for cont in binary_cols if \"cooc\" in cont ])\nbinary_cols=np.setdiff1d(binary_cols,cooc_cols)","a0e334e0":"df_mix[num_cols].sample(3)","a05ceed4":"plt.figure(figsize=[25,12])\nfor ii,cat in enumerate(num_cols):\n    plt.subplot(3,3,ii+1)\n    sns.distplot(df_train[cat])","0265a772":"train_df_na = (df_train.isnull().sum() \/ len(df_train)) * 100\ntrain_df_na = train_df_na.drop(train_df_na[train_df_na == 0].index).sort_values(ascending=False)\nattr_miss_train = pd.DataFrame({'Missing Ratio' :train_df_na})\ndisplay(attr_miss_train)","6c6c705e":"plt.plot(np.sin(np.linspace(0,24,25)\/12*np.pi))\nplt.plot(np.cos(np.linspace(0,24,25)\/12*np.pi))","4fe367d6":"df_train['appearTime_sin']=np.sin((df_train['appearedMinute']\/60+df_train['appearedHour'])\/12*np.pi)\ndf_train['appearTime_cos']=np.cos((df_train['appearedMinute']\/60+df_train['appearedHour'])\/12*np.pi)\ndf_test['appearTime_sin']=np.sin((df_test['appearedMinute']\/60+df_test['appearedHour'])\/12*np.pi)\ndf_test['appearTime_cos']=np.cos((df_test['appearedMinute']\/60+df_test['appearedHour'])\/12*np.pi)\ndf_train.drop([\"appearedMinute\",\"appearedHour\"],axis=1,inplace=True)\ndf_test.drop([\"appearedMinute\",\"appearedHour\"],axis=1,inplace=True)","88eb21d0":"sns.distplot(df_train[\"appearTime_sin\"])\nsns.distplot(df_train[\"appearTime_cos\"])","5fd40093":"num_cols=[col for col in num_cols if col not in [\"appearedMinute\",\"appearedHour\"] ]+[\"appearTime_sin\",\"appearTime_cos\"]","220b422a":"df_train[[\"windSpeed\",\"population_density\"]]=df_train[[\"windSpeed\",\"population_density\"]].apply(lambda x:boxcox1p(x+np.finfo(float).eps,.15))\ndf_test[[\"windSpeed\",\"population_density\"]]=df_test[[\"windSpeed\",\"population_density\"]].apply(lambda x:boxcox1p(x+np.finfo(float).eps,.15))","de2f07f8":"sns.distplot(df_train[\"windSpeed\"])\nplt.show()\nsns.distplot(df_train[\"population_density\"])\nplt.show()","2074a168":"(df_train[\"population_density\"]<=np.finfo(float).eps).value_counts()","168baab9":"sns.distplot(df_train.query(\"gymDistanceKm>0.5\").gymDistanceKm)","3c7c9517":"sns.distplot(df_train.query(\"gymDistanceKm<150\").gymDistanceKm)","699803d7":"sns.distplot(df_train.query(\"0.5<gymDistanceKm<150\").gymDistanceKm)","63a58932":"sns.distplot(df_train.query(\"pokestopDistanceKm>0.5\").pokestopDistanceKm)","d83adb97":"sns.distplot(df_train.query(\"0.5<pokestopDistanceKm<20\").pokestopDistanceKm)","75981e46":"df_train.drop([\"pokestopDistanceKm\",\"gymDistanceKm\"],axis=1,inplace=True)\ndf_test.drop([\"pokestopDistanceKm\",\"gymDistanceKm\"],axis=1,inplace=True)\nnum_cols=[col for col in num_cols if col not in [\"pokestopDistanceKm\",\"gymDistanceKm\"] ]","6d7e880a":"df_train_tmp=df_train[num_cols].query(f\"population_density>{np.finfo(float).eps}\")\ndf_test_tmp=df_test[num_cols].query(f\"population_density>{np.finfo(float).eps}\")","7c5ce297":"norm_param={\"train_m\":df_train_tmp.mean().values,\"train_s\":df_train_tmp.std().values,\"test_m\":df_test_tmp.mean().values,\"test_s\":df_test_tmp.std().values}","317be3cc":"df_train[num_cols]=(df_train[num_cols]-norm_param[\"train_m\"])\/norm_param[\"train_s\"]\ndf_test[num_cols]=(df_test[num_cols]-norm_param[\"test_m\"])\/norm_param[\"test_s\"]","5a611e3d":"plt.figure(figsize=[25,12])\nfor ii,cat in enumerate(num_cols):\n    plt.subplot(3,3,ii+1)\n    sns.distplot(df_train[cat])","f31727e5":"# joblib.dump(norm_param,\"norm_param.joblib\")","ca7978d8":"# Numerical data preprocessing","735acf7f":"**Encoding of morning hours are symmetrically equqivilent of afternoon hours with cosine encoding**\n\n**Encoding of half of the morning hours are symmetrically equqivilent for the other half of the morning hours with sine encoding**\n\n=> we must use them both","438efba8":"# Normalization","71e92093":"**Cyclic encoding may be useful for \"appearedHour\" and \"appearedMinute\"**","e448fd5e":"too sparse for gymDistanceKm and pokestopDistanceKm","2f9eae77":"# Missing","80116cc0":"# Special treatment","ef6f1fa2":"# Cyclic encoding\nAppliy sine function to cyclic features","41f5a1ce":"* Likely uniform dist: appearedHour,appearedMinute\n* Likely normal dist: temperature, pressure,\n* Left skewed:windSpeed, population_density\n* Sparse: gymDistanceKm,pokestopDistanceKm","a220a24c":"**pokestopDistanceKm**","9fdf7829":"# Distribution of Numerical features","2d0d1857":"No missing","4f2fb6bd":"Nearly 20% of the records have nearly zero density.\n\nSo it may be risky to drop all the extreme values\n\nBut we shuold definitely drop them when calculating parameters for normalization.","fe8496cd":"**gymDistanceKm**","c14bf524":"still something anomalies in population_density, maybe we can just drop them","3c435e48":"bad distribution","0f951c8f":"# Skewness correction","f5f42fe2":"we can finally see something in this setting","8d539763":"These two features are too sparse in distribution.\n\nI'd rather drop them.","e5020bc5":"# Numerical features discriptions\n* appearedHour: cyclic\n* appearedMinute: cyclic\n* temperature: real number\n* windSpeed: positive number\n* pressure: positive number\n* population_density: positive number\n* gymDistanceKm: positive number\n* pokestopDistanceKm: positive number","68fa44b6":"bad distribution"}}