{"cell_type":{"4d1464e2":"code","5d9ab63d":"code","a09cf279":"code","84edee50":"code","c0b15b4c":"code","20418ea7":"code","d1a2d707":"code","f364fe87":"code","fb9af8cb":"code","b82ff20c":"code","de6475db":"code","ffe2d464":"code","7bb82d93":"code","3700ce13":"code","11870665":"code","682df86c":"code","6fdced17":"code","b0a2f37b":"code","a178b6d3":"code","d0593ba4":"code","146e310c":"code","b25620ce":"code","80b5c134":"code","2e986e34":"code","b11a40ce":"code","9d00ee6b":"code","1a1eb4a8":"code","32bfa283":"code","1134204a":"code","8699e752":"code","d7c1d567":"code","e95d9777":"code","aef78ab0":"code","21ebac00":"code","08dc6f3f":"code","02d43e55":"code","6dce2880":"code","4841e255":"code","7bf4a573":"code","5e9668b7":"code","6dece5e1":"code","d4c66144":"code","bf109036":"code","9dc929b9":"code","e4518024":"markdown","d9f77f4b":"markdown","a68fc1d7":"markdown","130ba609":"markdown","9742bf1c":"markdown","c0656205":"markdown","8d70d17d":"markdown","e62bb147":"markdown","af26d996":"markdown","20414526":"markdown","8cbb4f51":"markdown","89167192":"markdown","d4332d58":"markdown","5de204bc":"markdown","4a0ffbde":"markdown","ba2e716a":"markdown","65a76873":"markdown","ed3443b1":"markdown","6aa701fa":"markdown","dc36dcce":"markdown","3d5df497":"markdown","b9de9330":"markdown"},"source":{"4d1464e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d9ab63d":"data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\ndata.head(15)","a09cf279":"data.info()","84edee50":"sb.countplot('Survived', data=data)\ndummy = data['Survived'].value_counts()\nprint(dummy)\nprint('Survival rate :', dummy[1]\/sum(dummy)*100,'%')\nplt.show()","c0b15b4c":"plt.figure(figsize=(10,5))\nplt.subplot(121)\nsb.countplot('Sex',data=data)\nplt.subplot(122)\nsb.countplot('Sex',hue='Survived',data=data,)\ndata['Sex'].value_counts()\nplt.show()","20418ea7":"plt.figure(figsize=(20,5))\nplt.subplot(131)\nsb.countplot('Pclass',data=data)\nplt.subplot(132)\nsb.countplot('Pclass',hue='Survived',data=data,)\nplt.subplot(133)\nsb.countplot('Survived',hue='Pclass',data=data,)\ndata['Pclass'].value_counts()\nplt.show()","d1a2d707":"pd.crosstab([data.Sex,data.Survived],data.Pclass,margins=True).style.background_gradient(cmap='summer_r')","f364fe87":"sb.catplot('Pclass', 'Survived', hue='Sex', data=data, kind='point')\nplt.show()","fb9af8cb":"plt.figure(figsize=(10,5))\nplt.subplot(121)\nsb.countplot('Embarked', data=data)\nplt.subplot(122)\nsb.countplot('Embarked',hue='Survived',data=data,)\ndata['Embarked'].value_counts()\nplt.show()","b82ff20c":"sb.countplot('Embarked',hue='Pclass',data=data,)\nplt.show()","de6475db":"from statistics import median,mean\ndummy = data['Age']*data['Survived']\ndummy = [i for i in dummy if i!=0 and str(i) != 'nan']\nprint('Oldest person to survive:',max(dummy),'years')\nprint('Youngest survivor:',min(dummy),'years')\nprint('Average age of the survivors:',mean(dummy),'years')\nprint('Median age of the survivors:',median(dummy),'years')","ffe2d464":"dummy = data.loc[(data.Survived == 0),'Age']\ndummy = [i for i in dummy if i!=0 and str(i) != 'nan']\nprint('Non-survivors')\nprint('Oldest person to die:',max(dummy),'years')\nprint('Youngest non-survivor:',min(dummy),'years')\nprint('Average age of the non-survivours:',mean(dummy),'years')\nprint('Median age of the non-survivours:',median(dummy),'years')","7bb82d93":"dummy = data.loc[(data.Survived == 0) & (data.Sex=='male') & (data.Pclass == 1),'Age']\ndummy = [i for i in dummy if i!=0 and str(i) != 'nan']\nprint('Male data who survived')\nprint('Oldest person to survive:',max(dummy),'years')\nprint('Youngest survivor:',min(dummy),'years')\nprint('Average age of the survivours:',mean(dummy),'years')\nprint('Median age of the survivours:',median(dummy),'years')","3700ce13":"dummy = data.loc[(data.Survived == 1) & (data.Sex=='female') & (data.Pclass == 2),'Age']\ndummy = [i for i in dummy if i!=0 and str(i) != 'nan']\nprint('Female data who survived')\nprint('Oldest person to survive:',max(dummy),'years')\nprint('Youngest survivor:',min(dummy),'years')\nprint('Average age of the survivours:',mean(dummy),'years')\nprint('Median age of the survivours:',median(dummy),'years')","11870665":"dummy = data.loc[(data.Survived == 0) & (data.Sex=='male') & (data.Pclass == 2),'Age']\ndummy = [i for i in dummy if i!=0 and str(i) != 'nan']\nprint('Male data who survived')\nprint('Oldest person to survive:',max(dummy),'years')\nprint('Youngest survivor:',min(dummy),'years')\nprint('Average age of the survivours:',mean(dummy),'years')\nprint('Median age of the survivours:',median(dummy),'years')","682df86c":"if data.Cabin.isnull().any():\n    data.loc[~(data.Cabin.isnull()), 'Cabin'] = 1\n    data.loc[(data.Cabin.isnull()), 'Cabin'] = 0\n    test_data.loc[~(data.Cabin.isnull()), 'Cabin'] = 1\n    test_data.loc[(data.Cabin.isnull()), 'Cabin'] = 0\ndata.head()","6fdced17":"sb.countplot('Cabin',hue='Survived',data=data,)\nplt.show()","b0a2f37b":"def include_initial(data=data):\n    data['Initial']=0\n    for i in data:\n        data['Initial']=data.Name.str.extract('([A-Za-z]+)\\.')\n    data['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess',\n                               'Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss',\n                                'Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)\n","a178b6d3":"def impute_age(data=data):\n    data.loc[(data.Age.isnull()) & (data.Initial=='Mr'),'Age']=33\n    data.loc[(data.Age.isnull()) & (data.Initial=='Mrs'),'Age']=36\n    data.loc[(data.Age.isnull()) & (data.Initial=='Master'),'Age']=5\n    data.loc[(data.Age.isnull()) & (data.Initial=='Miss'),'Age']=22\n    data.loc[(data.Age.isnull()) & (data.Initial=='Other'),'Age']=46","d0593ba4":"include_initial(data)\ninclude_initial(test_data)\nimpute_age(data)\nimpute_age(test_data)","146e310c":"print(data.groupby('Initial')['Age'].mean())","b25620ce":"display(pd.crosstab(data.Parch,data.Survived).style.background_gradient('summer_r'))\ndisplay((pd.crosstab(data.Parch, data.Survived).apply(lambda row:row*100\/row.sum(),axis=1).style.background_gradient('summer_r')))\n# data['Parch'].value_counts()","80b5c134":"from IPython.display import display, HTML\n\nCSS = \"\"\"\n.output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","2e986e34":"display(pd.crosstab(data.SibSp,data.Survived).style.background_gradient('summer_r'))\ndisplay((pd.crosstab([data.SibSp], data.Survived).apply(lambda row:row*100\/row.sum(),axis=1).style.background_gradient('summer_r')))\ndisplay(pd.crosstab([data.SibSp,data.Pclass],data.Survived).style.background_gradient('summer_r'))","b11a40ce":"data['Fsize'] = 0\ndata['Fsize'] = 0\nfor i in data:\n    data['Fsize'] = data.Parch + data.SibSp\nfor i in test_data:\n    test_data['Fsize'] = test_data.Parch + test_data.SibSp\ndisplay(pd.crosstab(data.Fsize,data.Survived).style.background_gradient('summer_r'))\ndisplay((pd.crosstab(data.Fsize,data.Survived).apply(lambda r:r*100\/r.sum())).style.background_gradient('summer_r'))\nplt.figure(figsize=(10,5))\nsb.barplot(x='Fsize', y='Survived', data=data)\nplt.show()","9d00ee6b":"def FScat(data=data):\n    data['FScat'] = 0\n    data.loc[(data.Fsize==0),'FScat'] = 'solo'\n    data.loc[(data.Fsize>0) & (data.Fsize<4),'FScat'] = 'small'\n    data.loc[(data.Fsize>=4),'FScat'] = 'big'\nFScat(data)\nFScat(test_data)\ndisplay(pd.crosstab(data.FScat,data.Survived).style.background_gradient('summer_r'))\nplt.figure(figsize=(8,3))\nsb.countplot('FScat',hue='Survived',data=data,)\nplt.show()","1a1eb4a8":"data.head()","32bfa283":"y = data['Survived']\nfeatures = ['Pclass','Age', 'Fare', 'Cabin', 'Embarked', 'Initial', 'Fsize', 'FScat', 'Survived']\nX = data[features]\ntest_x = test_data[['Pclass','Age', 'Fare', 'Cabin', 'Embarked', 'Initial', 'Fsize', 'FScat']]\nX.head()","1134204a":"X.info()","8699e752":"%matplotlib inline\nX.hist(bins = 50, figsize=(10,10))\nplt.show()","d7c1d567":"corr_matrix = X.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","e95d9777":"X['age_cat'] = pd.cut(X['Age'], bins=[0., 10, 25, 45, 60, np.inf], labels = [1,2,3,4,5])\ntest_x['age_cat'] = pd.cut(test_x['Age'], bins=[0., 10, 25, 45, 60, np.inf], labels = [1,2,3,4,5])","aef78ab0":"X.head()","21ebac00":"# from sklearn.model_selection import StratifiedShuffleSplit\n# split = StratifiedShuffleSplit(n_splits = 1,test_size = 0.2, random_state = 42)\n# for train_index,test_index in split.split(X, X['age_cat']):\n#     train_set = X.loc[train_index]\n#     test_set = X.loc[test_index]","08dc6f3f":"# test_set['age_cat'].value_counts()\/len(test_set)","02d43e55":"# for set_ in (train_set, test_set):\n#     set_.drop('age_cat', axis=1, inplace=True)","6dce2880":"#comment \ntrain_set = X.copy()","4841e255":"y_train = train_set['Survived']\n# y_test = test_set['Survived']\ntrain_set.drop('Survived', axis=1, inplace=True)\n# X_test = test_set.drop('Survived', axis=1, inplace=True)","7bf4a573":"X_train = train_set.copy()\n# X_test = test_set.copy()\nX_train.head()","5e9668b7":"numerical_cols = ['Fare']\ncategorical_cols = ['Pclass', 'Embarked', 'Cabin', 'Initial', 'FScat', 'age_cat']\n\n# Preprocessing for numerical data\nfrom sklearn.impute import SimpleImputer\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\nfrom sklearn.compose import ColumnTransformer\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n# Bundle preprocessing and modeling code \nfrom sklearn.ensemble import RandomForestClassifier\ntitanic_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                                   ('model', RandomForestClassifier(random_state=0, n_estimators=500, max_depth=5))\n                                  ])\n\n# Preprocessing of training data, fit model \nfrom sklearn.model_selection import cross_val_score\ntitanic_pipeline.fit(X_train,y_train)\n\nprint('Cross validation score: {:.3f}'.format(cross_val_score(titanic_pipeline, X_train, y_train, cv=10).mean()))","6dece5e1":"X_test_final = test_x\nX_test_final.head()","d4c66144":"# Preprocessing of test data, get predictions\npredictions = titanic_pipeline.predict(X_test_final)","bf109036":"test_data = pd.read_csv('..\/input\/titanic\/test.csv')","9dc929b9":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint('Your submission was successfully saved!')","e4518024":"From this we can see there is basically 3 catagories of data in here. A null size or solo catagory one small and one large catagory.\nSo we can modify the family size feature as catagorical feature. But for now we are going to add a new feature FScat for the task.","d9f77f4b":"## Sex","a68fc1d7":"Here we can see that only the age and cabin fields have some null value. For the age we can simply impute the values however for the cabin numbers it might not be an ideal way. One other approach for both the fields we can try later is finding out spouse or parent-child relationship and filling those fields. ","130ba609":"## Parch","9742bf1c":"## Cabin","c0656205":"Parch doesn't seem to have lot to offer but same as Sibsp there is a slight high chance of dying if the number is higher than 2. But still the lack of data could be an issue here.","8d70d17d":"This is understandable as most of the data has been collected after the incident. We will find the feature importance latter.","e62bb147":"So females have higher chance of survival in all classes. ","af26d996":"Class 1 has a higher survival chance, class 2 has nearly the same chance but oh boy! class 3 were not that lucky at all. So after all money is all we need i guess! What about the combined effect of class and sex?","20414526":"We got 5 object fields including Name, Sex, Ticket, Cabin, Embarked. Among these sex and embarked seems to be catagorical objects. ","8cbb4f51":"Now Sibsp and Parch both the fields look the same. And they also finda show the same characteristics. So why not we add them together as one single feature called Fsize (family size)\n","89167192":"## Embarkment","d4332d58":"So this is pretty clear that women normally lives longer :p. Now let's check wheter age or passenger class played any role and after that we might also look into the age and pclass effect on the survival rate for different sex.","5de204bc":"## Age","4a0ffbde":"Practically thinking, 'Embarked' doesn't seem to have any important effect on survival rate. But it looks like there is a slight higher chance of survival among the passengers boarding from the C=Cherbourg port. But it could be pure luck or may be because the people boarding from this port were mostly of Pclass 1. Let's see if we can find something out.","ba2e716a":"## Sibsp","65a76873":"## Pclass","ed3443b1":"As wxpected. Among the passengers boarding from port C there are higher number of Pclass 1. And thus resulted in a higher chance of survival. Still we will do a feature importance afterwards while doing the feature selection.","6aa701fa":"# Part 2","dc36dcce":"## Removing age null values","3d5df497":"## Name \nWe have already extracted the initials as a feature. Here we will extract 2 more features number of vowels and consonenst. This might not give us anything so we will later decide wether to keep them or not","b9de9330":"So the rate of survival is pretty low. "}}