{"cell_type":{"58cffdf2":"code","9c596844":"code","ecb83ae7":"code","4e3ebc1d":"code","6bab1e01":"code","cfe3af1d":"code","ae89fb07":"code","c279b863":"code","f7b14296":"code","97abcd77":"code","8e629308":"code","9e762096":"code","e54dfca3":"code","5c691ac7":"code","5f42b4a2":"code","97433d25":"code","dd2eef70":"code","d05c4665":"code","0ba52459":"code","2ea2bcfb":"code","f087aba0":"code","bd2f5b86":"code","6af433f2":"code","69d35f7a":"code","3315a188":"code","4f298259":"code","c8f333b5":"code","b80a3be5":"code","3cd7c418":"code","ee4bda86":"code","17b9a1cd":"code","7f3ff924":"code","7dc4b78a":"code","68f8e852":"code","62c51354":"code","0a071c37":"code","61a7b05a":"code","07e0379c":"code","33dd1425":"code","16db4b6c":"code","76557f2d":"code","51d897a9":"code","4c1e39ec":"code","b3782bf0":"code","95385f51":"code","e5faeb16":"code","d814b18c":"code","46433895":"code","6cf8b126":"code","83b4e4b7":"code","32ade2ba":"code","f913507c":"code","038e54b9":"code","3730d1cf":"code","684490f3":"code","9c3632a6":"markdown","b1314391":"markdown","9ab92f46":"markdown","5cc31229":"markdown","85160f6c":"markdown","da2a98ac":"markdown","9d5ae296":"markdown","6d4731ea":"markdown","46912ee5":"markdown","80665d7d":"markdown","2ae9d23f":"markdown","ff09bad6":"markdown","a21035f9":"markdown","5de5a1b3":"markdown","c3e66597":"markdown","0b3e1ab7":"markdown","daec4f25":"markdown","222c1a22":"markdown","06dff628":"markdown","9417a37b":"markdown","e9e5017f":"markdown","6436bade":"markdown","dfcfb437":"markdown","48e47e8d":"markdown","382a9d2e":"markdown","7d498eee":"markdown","4763883a":"markdown","f1946ba9":"markdown"},"source":{"58cffdf2":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","9c596844":"df = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\", low_memory = False)","ecb83ae7":"df.shape","4e3ebc1d":"df.head()","6bab1e01":"lt = df.Q3.value_counts()[10::-1]\nfig = px.histogram(lt, x=lt.index, y = lt.values,title='Top 10 Country with most responses')\nfig.update_layout(\n    xaxis_title=\"Responses\",\n    yaxis_title=\"Count\"\n)\nfig.show()","cfe3af1d":"def getCountries(df, country, column):\n    countryData = df[df[column] == country]\n    restOfTheWorld = df[df[column] != country]\n\n    df[\"country\"] = \"Rest of the World\"\n    df[\"country\"].iloc[countryData.index] = country\n    \n    return countryData, restOfTheWorld","ae89fb07":"selectedCountry = \"Pakistan\"\ncountry, restOfTheWorld = getCountries(df, selectedCountry, \"Q3\")","c279b863":"lt = df.country.value_counts()\npercent =[len(restOfTheWorld)\/len(df)*100,len(country)\/len(restOfTheWorld)*100]\nfig = px.bar(x=lt.index, y = lt.values,title='Propotion of ' +str(selectedCountry)+ ' responses compared to rest of the world',\n                  text=(np.round(percent,2)))\nfig.update_layout(\n    xaxis_title=\"Country\",\n    yaxis_title=\"Responses count\"\n)\nfig.show()","f7b14296":"df_2017 = pd.read_csv(\"..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv\",encoding =\"ISO-8859-1\",low_memory=False)\ndf_2018 = pd.read_csv(\"..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv\",low_memory=False)\ndf_2019 = pd.read_csv(\"..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv\",low_memory=False)\ndf_2020 = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\",low_memory=False)","97abcd77":"country_2017, restOfTheWorld_2017 = getCountries(df_2017, selectedCountry, \"Country\")\ncountry_2018, restOfTheWorld_2018 = getCountries(df_2018, selectedCountry, \"Q3\")\ncountry_2019, restOfTheWorld_2019 = getCountries(df_2019, selectedCountry, \"Q3\")\ncountry_2020, restOfTheWorld_2020 = getCountries(df_2020, selectedCountry, \"Q3\")\n\nresponses = pd.DataFrame()\nresponses[\"year\"]=[2017,2018,2019,2020,2021]\nresponses[\"country\"]=[len(country_2017),len(country_2018),len(country_2019),len(country_2020),len(country)]\nresponses[\"total\"]=[len(restOfTheWorld_2017), len(restOfTheWorld_2018), len(restOfTheWorld_2019), len(restOfTheWorld_2020), len(restOfTheWorld)]\nresponses[\"percent\"]=[len(country_2017)\/len(restOfTheWorld_2017)*100, len(country_2018)\/len(restOfTheWorld_2018)*100, len(country_2019)\/len(restOfTheWorld_2019)*100, len(country_2020)\/len(restOfTheWorld_2020)*100, len(country)\/len(restOfTheWorld)*100]\nresponses[\"percentRest\"]=[len(restOfTheWorld_2017)\/len(df_2017)*100, len(restOfTheWorld_2018)\/len(df_2018)*100, len(restOfTheWorld_2019)\/len(df_2019)*100, len(restOfTheWorld_2020)\/len(df_2020)*100, len(restOfTheWorld)\/len(df)*100]","8e629308":"responses","9e762096":"fig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=responses.year, y=responses.country,text=(np.round(responses.percent,2)),textposition='outside'),\n    go.Bar(name='Rest of the world', x=responses.year, y=responses.total,text=(np.round(responses.percentRest,2)),textposition='outside')\n])\nfig.update_layout(barmode='group',title=str(selectedCountry) + \" responses throughout the years\")\nfig.show()","e54dfca3":"c_age = country.Q1.value_counts()\nrest_age = restOfTheWorld[1:].Q1.value_counts()\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=c_age.index, values=c_age.values, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest_age.index, values=rest_age.values, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(\n    title_text=\"Age groups of Kagglers (\" + str(selectedCountry) + \" vs Rest of the World)\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)])\nfig.show()","5c691ac7":"emp = country.Q5.value_counts(normalize=True)\nrest_emp = restOfTheWorld[1:].Q5.value_counts(normalize=True)\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=emp.index, y=emp.values),\n    go.Bar(name='Rest of the world', x=rest_emp.index, y=rest_emp.values)])\nfig.update_layout(barmode='group',title=\"Employment Status\")\nfig.show()","5f42b4a2":"edu = country.Q4.value_counts(normalize=True)\nrest_edu = restOfTheWorld[1:].Q4.value_counts(normalize=True)\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=edu.index, y=edu.values),\n    go.Bar(name='Rest of the world', x=rest_edu.index, y=rest_edu.values)])\nfig.update_layout(barmode='group',title=\"Education\")\nfig.show()","97433d25":"exp = country.Q6.value_counts(normalize=True)\nrest_exp = restOfTheWorld[1:].Q6.value_counts(normalize=True)\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=exp.index, y=exp.values),\n    go.Bar(name='Rest of the world', x=rest_exp.index, y=rest_exp.values)])\nfig.update_layout(barmode='group',title=\"Years of Experience\")\nfig.show()","dd2eef70":"def getMultipleChoice(data,question_number,choices,part=None):\n    \"\"\"\n    Creates a single dataframe for multiple choice questions as they are spread in multiple columns.\n\n    Parameters\n    ----------\n    data : dataframe\n    question_number : int\n        The question number we want to extract\n    choice: int\n        Number of choices the question had\n    part: str\n        applicable if it has subparts\n\n    Returns\n    -------\n    dataframe\n        Dataframe with category, values, and their percentage\n    \"\"\" \n    \n    questions = []\n    if(part==None):\n        questions = ['Q'+ str(question_number) +'_Part_'+ str(i) for i in range(1, choices)]\n        questions.append('Q'+ str(question_number) + '_OTHER')\n    else:\n        questions = ['Q'+ str(question_number) +'_' + str(part) +'_Part_' + str(i) for i in range(1, choices)]    \n        questions.append('Q'+ str(question_number) +'_' + str(part) + '_OTHER')\n    \n    category = []\n    values = []\n    for i in questions:\n        try:\n            cat = data[i].value_counts().index[0]\n        except:\n            continue\n        try:\n            val = data[i].value_counts().values[0]\n        except:\n            continue\n        \n        category.append(cat)\n        values.append(val)\n       \n    single_df = pd.DataFrame()\n    single_df['category'] = category\n    single_df['value'] = values\n    \n    single_df = single_df.sort_values(['value'],ascending=False)\n    \n    single_df['percent'] = (single_df['value'] \/ single_df['value'].sum()) * 100\n    \n    return single_df","d05c4665":"rest_languages = getMultipleChoice(restOfTheWorld[1:],7,12)\nlanguages = getMultipleChoice(country,7,12)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=languages.category, y=languages.percent),\n    go.Bar(name='Rest of the world', x=rest_languages.category, y=rest_languages.percent)])\nfig.update_layout(barmode='group',title=\"Commonly used languages\")\nfig.show()","0ba52459":"rec = country.Q8.value_counts()\nrest_rec = restOfTheWorld[1:].Q8.value_counts()\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=rec.index, values=rec.values, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest_rec.index, values=rest_rec.values, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(\n    title_text=\"Recommendation by language\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)])\nfig.show()","2ea2bcfb":"rest_languages = getMultipleChoice(restOfTheWorld[1:],9,12)\nlanguages = getMultipleChoice(country,9,12)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=languages.category, y=languages.percent),\n    go.Bar(name='Rest of the world', x=rest_languages.category, y=rest_languages.percent)])\nfig.update_layout(barmode='group',title=\"Integrated development tool\")\nfig.show()","f087aba0":"rest_languages = getMultipleChoice(restOfTheWorld[1:],10,16)\nlanguages = getMultipleChoice(country,10,16)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=languages.category, y=languages.percent),\n    go.Bar(name='Rest of the world', x=rest_languages.category, y=rest_languages.percent)])\nfig.update_layout(barmode='group',title=\"Hosted notebook environment\")\nfig.show()","bd2f5b86":"comp = country.Q11.value_counts()\nrest_comp = restOfTheWorld[1:].Q11.value_counts()\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=comp.index, values=comp.values, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest_comp.index, values=rest_comp.values, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(\n    title_text=\"Computing platform\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)],\nlegend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\nfig.show()","6af433f2":"rest_hardware = getMultipleChoice(restOfTheWorld[1:],12,5)\nhardware = getMultipleChoice(country,12,5)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'polar'}, {'type':'polar'}]])\nfig.add_trace(go.Scatterpolar(\n                     r=rest_hardware.value,\n                     theta=rest_hardware.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r= hardware.value,\n                     theta= hardware.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=1, col=2)\n\nfig.update_layout(\n    title_text=\"Specialized Hardware\")\nfig.show()","69d35f7a":"tpu = country.Q13.value_counts()\nrest_tpu = restOfTheWorld[1:].Q13.value_counts()\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=tpu.index, values=tpu.values, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest_tpu.index, values=rest_tpu.values, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(\n    title_text=\"Tensor Processing Unit Usage\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)])\nfig.show()","3315a188":"rest_lib = getMultipleChoice(restOfTheWorld[1:],14,11)\nlib = getMultipleChoice(country,14,11)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=lib.category, y=lib.percent),\n    go.Bar(name='Rest of the world', x=rest_lib.category, y=rest_lib.percent)])\nfig.update_layout(barmode='group',title=\"Visualization Libraries\")\nfig.show()","4f298259":"ml = country.Q15.value_counts(normalize=True)\nrest_ml = restOfTheWorld[1:].Q15.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=ml.index, y=ml.values),\n    go.Bar(name='Rest of the world', x=rest_ml.index, y=rest_ml.values)])\nfig.update_layout(barmode='group',title = \"ML experience\")\nfig.show()","c8f333b5":"rest_ml_lib = getMultipleChoice(restOfTheWorld[1:],16,17)\nml_lib = getMultipleChoice(country,16,17)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=ml_lib.category, y=ml_lib.percent),\n    go.Bar(name='Rest of the world', x=rest_ml_lib.category, y=rest_ml_lib.percent)])\nfig.update_layout(barmode='group',title=\"ML Libraries\")\nfig.show()","b80a3be5":"rest_ml_algo = getMultipleChoice(restOfTheWorld[1:],17,11)\nml_algo = getMultipleChoice(country,17,11)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=ml_algo.category, x=ml_algo.percent, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_ml_algo.category, x=rest_ml_algo.percent, orientation='h')])\nfig.update_layout(barmode='group',title=\"ML Algorithms\")\nfig.show()","3cd7c418":"rest_cv_algo = getMultipleChoice(restOfTheWorld[1:],18,6)\ncv_algo = getMultipleChoice(country,18,6)\n\nrest_cv_cat = rest_cv_algo.category.str.split('(')\nrest_cv_cat = [i[0] for i in rest_cv_cat]\ncv_cat = cv_algo.category.str.split('(')\ncv_cat = [i[0] for i in cv_cat]\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=cv_cat, x=cv_algo.percent, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_cv_cat, x=rest_cv_algo.percent, orientation='h')])\nfig.update_layout(barmode='group',title=\"CV Algorithms\")\nfig.show()","ee4bda86":"rest_nlp_algo = getMultipleChoice(restOfTheWorld[1:],19,5)\nnlp_algo = getMultipleChoice(country,19,5)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=nlp_algo.category, x=nlp_algo.percent, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_nlp_algo.category, x=rest_nlp_algo.percent, orientation='h')])\nfig.update_layout(barmode='group',title=\"NLP Algorithms\")\nfig.show()","17b9a1cd":"emp = country.Q20.value_counts(normalize=True)\nrest_emp = restOfTheWorld[1:].Q20.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=emp.index, x=emp.values, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_emp.index, x=rest_emp.values, orientation='h')])\nfig.update_layout(barmode='group',title = \"Current Employer\")\nfig.show()","7f3ff924":"size = country.Q21.value_counts(normalize=True)\nrest_size = restOfTheWorld[1:].Q21.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=size.index, x=size.values, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_size.index, x=rest_size.values, orientation='h')])\nfig.update_layout(barmode='group',title = \"Size of company\")\nfig.show()","7dc4b78a":"size = country.Q21.value_counts(normalize=True)\nrest_size = restOfTheWorld[1:].Q21.value_counts(normalize=True)\n\nfig = make_subplots(rows=1, cols=2,specs=[[{'type': 'polar'},{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest_size.values,\n                     theta=rest_size.index,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=size.values,\n                     theta=size.index,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=1, col=2)\n\n\nfig.update_layout(title_text=\"Cloud Platform\")","68f8e852":"work = country.Q22.value_counts(normalize=True)\nrest_work = restOfTheWorld[1:].Q22.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=work.index, x=work.values, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_work.index, x=rest_work.values, orientation='h')])\nfig.update_layout(barmode='group',title = \"Size of company\")\nfig.show()","62c51354":"use = country.Q23.value_counts(normalize=True)\nrest_use = restOfTheWorld[1:].Q23.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=use.index, y=use.values),\n    go.Bar(name='Rest of the world', x=rest_use.index, y=rest_use.values)])\nfig.update_layout(height=800, width=1200, barmode='group',title = \"Use of ML in company\")\nfig.show()","0a071c37":"rest_role = getMultipleChoice(restOfTheWorld[1:],24,7)\nrole = getMultipleChoice(country,24,7)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=role.category, y=role.percent),\n    go.Bar(name='Rest of the world', x=rest_role.category, y=rest_role.percent)])\nfig.update_layout(height=800, width=1200, barmode='group',title=\"Role in company\")\nfig.show()","61a7b05a":"salary = country.Q25.value_counts(normalize=True)\nrest_salary = restOfTheWorld[1:].Q25.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=salary.index, y=salary.values),\n    go.Bar(name='Rest of the world', x=rest_salary.index, y=rest_salary.values)])\nfig.update_layout(barmode='group',title = \"Salary\")\nfig.show()","07e0379c":"spent = country.Q26.value_counts(normalize=True)\nspent_index = [\"$0\",\"$1-99\",\"$100-999\",\"$1000-9,999\",\"$10,000-99,999\",\"$100,000\"]\nrest_spent = restOfTheWorld[1:].Q26.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=spent_index, y=spent.values),\n    go.Bar(name='Rest of the world', x=spent_index, y=rest_spent.values)])\nfig.update_layout(barmode='group',title = \"Spent on ML\")\nfig.show()","33dd1425":"rest_cloud = getMultipleChoice(restOfTheWorld[1:],27,11,'A')\ncloud = getMultipleChoice(country,27,11,'A')\n\nfig = make_subplots(rows=2, cols=1,specs=[[{'type': 'polar'}], [{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest_cloud.value,\n                     theta=rest_cloud.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=cloud.value,\n                     theta=cloud.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=2, col=1)\n\n\nfig.update_layout(height=1000, width=800, title_text=\"Cloud Platform\")","16db4b6c":"enj = country.Q28.value_counts()\nrest_enj = restOfTheWorld[1:].Q28.value_counts()\n\nfig = make_subplots(rows=2, cols=1,specs=[[{'type': 'polar'}], [{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest_enj.values,\n                     theta=rest_enj.index,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=enj.values,\n                     theta=enj.index,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=2, col=1)\n\n\nfig.update_layout(height=1000, width=800, title_text=\"Enjoyable Cloud Platform\")","76557f2d":"rest_cloud_use = getMultipleChoice(restOfTheWorld[1:],29,4,'A')\ncloud_use = getMultipleChoice(country,29,4,'A')\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=cloud_use.category, x=cloud_use.percent, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_cloud_use.category, x=rest_cloud_use.percent, orientation='h')])\nfig.update_layout(barmode='group',title=\"Regular Cloud usage\")\nfig.show()","51d897a9":"rest_cloud_sto = getMultipleChoice(restOfTheWorld[1:],30,7,'A')\ncloud_sto = getMultipleChoice(country,30,7,'A')\n\nfig = make_subplots(rows=2, cols=1,specs=[[{'type': 'polar'}], [{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest_cloud_sto.value,\n                     theta=rest_cloud_sto.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=cloud_sto.value,\n                     theta=cloud_sto.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=2, col=1)\n\n\nfig.update_layout(height=1000, width=800, title_text=\"Cloud Storage Use\")","4c1e39ec":"rest_cloud_ml = getMultipleChoice(restOfTheWorld[1:],31,9,'A')\ncloud_ml = getMultipleChoice(country,31,9,'A')\n\nfig = make_subplots(rows=2, cols=1,specs=[[{'type': 'polar'}], [{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest_cloud_ml.value,\n                     theta=rest_cloud_ml.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=cloud_ml.value,\n                     theta=cloud_ml.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=2, col=1)\n\n\nfig.update_layout(height=1000, width=800, title_text=\"Machine learning Products Usage\")","b3782bf0":"rest_bigd_p = getMultipleChoice(restOfTheWorld[1:],32,20,'A')\nbigd_p = getMultipleChoice(country,32,20,'A')\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=bigd_p.category, x=bigd_p.percent, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_bigd_p.category, x=rest_bigd_p.percent, orientation='h')])\nfig.update_layout(barmode='group',title=\"Regularly used Big Data Products\")\nfig.show()","95385f51":"pro = country.Q33.value_counts(normalize=True)\nrest_pro = restOfTheWorld[1:].Q33.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=pro.index, x=pro.values, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest_pro.index, x=rest_pro.values, orientation='h')])\nfig.update_layout(barmode='group',title = \"Most often used Big data product\")\nfig.show()","e5faeb16":"rest = getMultipleChoice(restOfTheWorld[1:],34,16,'A')\nbi = getMultipleChoice(country,34,16,'A')\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=bi.category, x=bi.percent, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest.category, x=rest.percent, orientation='h')])\nfig.update_layout(barmode='group',title=\"Regularly used Business intelligence tools\")\nfig.show()","d814b18c":"mostUsedBi = country.Q35.value_counts(normalize=True)\nrest = restOfTheWorld[1:].Q35.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=mostUsedBi.index, x=mostUsedBi.values, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest.index, x=rest.values, orientation='h')])\nfig.update_layout(barmode='group',title = \"Most often used Business intelligence tools\")\nfig.show()","46433895":"rest = getMultipleChoice(restOfTheWorld[1:],36,7,'A')\nmle = getMultipleChoice(country,36,7,'A')\n\nfig = make_subplots(rows=2, cols=1,specs=[[{'type': 'polar'}], [{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest.value,\n                     theta=rest.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=mle.value,\n                     theta=mle.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=2, col=1)\n\n\nfig.update_layout(height=1000, width=800, title_text=\"Tools for Machine Learning experiments\")","6cf8b126":"rest = getMultipleChoice(restOfTheWorld[1:],37,7,'A')\naml = getMultipleChoice(country,37,7,'A')\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, x=aml.category, y=aml.percent),\n    go.Bar(name='Rest of the world', x=rest.category, y=rest.percent)])\nfig.update_layout(height=800, width=1000, barmode='group',title=\"Automated ML tools\")\nfig.show()","83b4e4b7":"rest = getMultipleChoice(restOfTheWorld[1:],38,11,'A')\namlt = getMultipleChoice(country,38,11,'A')\n\nfig = make_subplots(rows=2, cols=1,specs=[[{'type': 'polar'}], [{\"type\": \"polar\"}]])  \n    \nfig.add_trace(go.Scatterpolar(\n                     r=rest.value,\n                     theta=rest.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name='Rest of the world'),\n                     row=1, col=1)\n\nfig.add_trace(go.Scatterpolar(\n                     r=amlt.value,\n                     theta=amlt.category,\n                     fill='toself',\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     name=selectedCountry),\n                     row=2, col=1)\n\n\nfig.update_layout(height=1000, width=800, title_text=\"Automated machine learning tools\")","32ade2ba":"rest = getMultipleChoice(restOfTheWorld[1:],39,9)\npk = getMultipleChoice(country,39,9)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=pk.category, values=pk.value, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest.category, values=rest.value, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(\n    title_text=\"Publicly sharing of data analysis or machine learning applications\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)])\nfig.show()","f913507c":"rest = getMultipleChoice(restOfTheWorld[1:],40,11)\npk = getMultipleChoice(country,40,11)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=pk.category, values=pk.value, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest.category, values=rest.value, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(height=800, width=1000,\n    title_text=\"Online learning courses\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)],\nlegend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\nfig.show()","038e54b9":"pk = country.Q41.value_counts(normalize=True)\nrest = restOfTheWorld[1:].Q41.value_counts(normalize=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=selectedCountry, y=pk.index, x=pk.values, orientation='h'),\n    go.Bar(name='Rest of the world', y=rest.index, x=rest.values, orientation='h')])\nfig.update_layout(barmode='group',title = \"Tools at work or school\")\nfig.show()","3730d1cf":"rest = getMultipleChoice(restOfTheWorld[1:],42,11)\npk = getMultipleChoice(country,42,11)\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=pk.category, values=pk.value, name=selectedCountry),\n              1, 1)\nfig.add_trace(go.Pie(labels=rest.category, values=rest.value, name=\"Rest of the World\"),\n              1, 2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name+value\")\n\nfig.update_layout(height=800, width=1000,\n    title_text=\"Media Sources for DS topics\",\n    annotations=[dict(text=selectedCountry, x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Rest', x=0.81, y=0.5, font_size=20, showarrow=False)],\nlegend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n))\nfig.show()","684490f3":"#df.iloc[:,265:].head(2)\n#df.iloc[0,190]\n#df[\"Q41\"][0]","9c3632a6":"## Cloud","b1314391":"If you want to analyze the data using some other country, change the second parameter of the getCountries function.","9ab92f46":"Around the world, most of the Kagglers so have a Masters degree but in Pakistan, for most Kagglers the highest level of degree is Bachelors.","5cc31229":"### Development tools","85160f6c":"As expected, python is the most favourite language but R is not as popular as complated to rest of the world.","da2a98ac":"We can see a little bit of improvement but not to a great extent. So, let's hope for next year.","9d5ae296":"In this notebook, we are looking into every question of the survey to help us get started with further analysis on it. So, if you are also getting started this might be a good starting point for you.\n\nIn this notebook, analysis is done for <b>Pakistan<\/b> but if you want to analyze trends in your country, feel free to change the code.\n\nIf you like this notebook or it helps you in any way, do remember to give an <b>upvote<\/b>.","6d4731ea":"We are using propotion instead of counts because comparing only the count of something won't give us a lot of information as there is a huge difference between number of response from Pakistan and from the rest of the world.","46912ee5":"#### Age","80665d7d":"## Technical ","2ae9d23f":"Surprisingly there are more people in Pakistan who have never written a code in there life then the individuals which have more then 5 years of experience.","ff09bad6":"#### Education","a21035f9":"### Languages","5de5a1b3":"#### Experience","c3e66597":"## Libraries & Algorithms","0b3e1ab7":"In Pakistan, there are more people who don't use ML models then the people who have more then 1 year of experience in ML.","daec4f25":"We can see that most of the Kagglers from Pakistan are Students. Which is basically the same as comparing with rest of the world.","222c1a22":"<img src=\"https:\/\/i.ibb.co\/Vtp6z27\/meme.jpg\" align=\"center\">","06dff628":"#### Employment status","9417a37b":"We can assume one more vote for Plotly because when I was filling in the survey, I didn't know Plotly.","e9e5017f":"### Importing data","6436bade":"Colab is most popular so it means that people love free things. Whereas more people are using Kaggle notebooks rather then colab then it means that they are unaware that Colab is free ;-). ","dfcfb437":"## Responses Analysis\n\nAs we are only gonna be focusing on responses from Pakistani Kagglers so, lets take an overview the total respondants that we'll be missing out on. ","48e47e8d":"<img src=\"https:\/\/media.giphy.com\/media\/xUOxeYzt1Ei7AMnsFq\/giphy.gif\" width=\"750\" align=\"center\">\n\nLearning from Kevin, we are going to do most of our talking using plots only. So, lets get started.\n\n<b> Note <\/b>: We are using plotly for our analysis which provides interactive plots so feel free to play with it a little bit.\n","382a9d2e":"People from all over the world are recommending python so if you don't know it yet, this might be a good time to gain its understanding. Also it seems like Bash is equally hated throughout the World.","7d498eee":"Pakistan do reside in the top 10 countries with most response but if we check its total contribution then it is just 2.08%. Has it improved from previous years? To validate that lets compare it with previous Kaggle ML and DS surveys.","4763883a":"## General Information","f1946ba9":"Most of the Kagglers in Pakistan are youngsters between 18-30 years of age. And none of the responses is from an individual who is above 70 years of age."}}