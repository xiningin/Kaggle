{"cell_type":{"9b3a7442":"code","1705379a":"code","1a5cda67":"code","a04f14c9":"code","a2abe9ac":"code","1649d1d6":"code","ad58e3f0":"code","6e6e51f7":"code","6ac724e4":"code","937576e9":"code","236b4b21":"code","275edc7c":"code","000d37ba":"code","59154ca9":"code","69767e5e":"code","f85eee41":"code","fc41d861":"code","f671e3dc":"code","bd5f2aad":"code","a1d85e8f":"markdown","2fc189ab":"markdown","187c44d6":"markdown","3e46ee91":"markdown","22f19396":"markdown","058dc8a8":"markdown"},"source":{"9b3a7442":"# Import basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom plotly.offline import plot\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, SimpleRNN, LSTM, GRU","1705379a":"# Load data\ndoge = pd.read_csv('..\/input\/dogecoin-cryptocurrency-dataset\/DOGE-USD.csv')\ndoge","1a5cda67":"# Sorting DataFrame\ndoge.sort_values(by='Date', ascending=False, inplace=True)\ndoge.reset_index(drop=True, inplace=True)\ndoge","a04f14c9":"# Check whether 'doge' contains NaN.\ndoge.isnull().sum()","a2abe9ac":"# Fill NaN with median values\ndoge.fillna(doge.median(), inplace=True)","1649d1d6":"# Normalization - MinMaxScaler\ncolumns = ['Open', 'High', 'Low', 'Close', 'Volume']\nfor column in columns:\n    scaler = MinMaxScaler()\n    scaler = scaler.fit(doge[columns])\n    doge[columns] = scaler.transform(doge[columns])","ad58e3f0":"# Preprocessed DataFrame\ndoge","6e6e51f7":"# Utility Function\ndef make_dataset(data, label, window_size=20):\n    feature_list = []\n    label_list = []\n    for i in range(len(data) - window_size):\n        feature_list.append(np.array(data.iloc[i:i+window_size]))\n        label_list.append(np.array(label.iloc[i+window_size]))\n    return np.array(feature_list), np.array(label_list)","6ac724e4":"# Set feature, label dataset\ntrain_feature = doge[['Open', 'High', 'Low', 'Close', 'Volume']]\ntrain_label = doge['Adj Close']","937576e9":"# train dataset\ntrain_feature, train_label = make_dataset(train_feature, train_label, 10)","236b4b21":"# Set X, y\nX = train_feature\ny = train_label","275edc7c":"# Split datasets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=11)","000d37ba":"model = Sequential()\nmodel.add(SimpleRNN(20, activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(Dense(1))","59154ca9":"model.summary()","69767e5e":"model.compile(loss='mse', optimizer='adam', metrics=['mse'])","f85eee41":"history = model.fit(X_train, y_train, batch_size=80, epochs=100, validation_data=(X_val, y_val))","fc41d861":"# Plot epochs - loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend(['train', 'val'])\nplt.show()","f671e3dc":"# Evaluate model\nfrom sklearn.metrics import mean_squared_error\n\ntrain_pred = model.predict(X_train)\ntrain_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n\ntest_pred = model.predict(X_test)\ntest_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n\nprint(f\"Train RMSE: {train_rmse.round(2)}\")\nprint(f\"Test RMSE: {test_rmse.round(2)}\")","bd5f2aad":"# Prediction Plot\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=y_test.ravel(),\n                    mode='lines',\n                    name='test'))\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=test_pred.ravel(),\n                    line=dict(dash='dash', width=3),\n                    name='pred'))\n\nfig.update_layout(\n    title=\"Adj Close Prediction of DogeCoin\",\n    height=500)\nfig.show()","a1d85e8f":"# Data Preprocessing","2fc189ab":"# Modeling","187c44d6":"# Outline\nGoal: Predict 'Adj Close' as target with features as follows: 'Open', 'High', 'Low', 'Close' and 'Volume'","3e46ee91":"# Create Datasets","22f19396":"# Import libraries and data","058dc8a8":"# To be continued\n**What needs to be improved**\n1. drop outliers in order to predict more precisely.\n2. Applying various algorithms: LSTM, GRU.\n3. Make comparison with three other algorithms."}}