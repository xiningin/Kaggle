{"cell_type":{"3398a5a3":"code","b7a235b5":"code","88777910":"code","6b265569":"code","e5399fdf":"code","35b0f8b2":"code","917ca8ef":"code","e42cbc7e":"code","ac264156":"code","3a692953":"code","8abd0b7c":"code","9d88e4d7":"code","511c86c7":"code","399b6986":"code","286561b0":"code","0ffee877":"code","5b3ba610":"code","c4b55d14":"code","d2866208":"code","a70d447d":"code","6c189e82":"code","fc86a84c":"code","86a5af1d":"code","b8829a34":"code","a6d91105":"code","06530884":"code","25b769fa":"code","1ba95583":"code","034bdb9b":"code","fec37bf4":"code","dd02bc92":"code","b5d147ce":"code","bd0416ae":"markdown","cae0a71f":"markdown"},"source":{"3398a5a3":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b7a235b5":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ndata = train.append(test).reset_index(drop = True)","88777910":"train.head(3)","6b265569":"data.head(2)","e5399fdf":"print(train.isnull().sum())\nprint('*' * 30)\nprint(test.isnull().sum())","35b0f8b2":"print(train.info())\nprint('*' * 30)\nprint(test.info())","917ca8ef":"data.describe()","e42cbc7e":"print(train.shape)\nprint('#' * 30)\nprint(test.shape)","ac264156":"display(data[['Sex', 'Survived']].groupby(['Sex'], as_index = False).mean())\nsns.countplot(x = data['Sex'], hue = data['Survived'])","3a692953":"display(data[['Embarked', 'Survived']].groupby(['Embarked'], as_index = False).mean())\nsns.countplot(x = data['Embarked'], hue = data['Survived'])","8abd0b7c":"display(data[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean())\nsns.countplot(x = data['Pclass'], hue = data['Survived'])","9d88e4d7":"display(data[['Parch', 'Survived']].groupby(['Parch'], as_index = False).mean())\nsns.countplot(x = data['Parch'], hue = data['Survived'])","511c86c7":"display(data[['SibSp', 'Survived']].groupby(['SibSp'], as_index = False).mean())\nsns.countplot(x = data['SibSp'], hue = data['Survived'])","399b6986":"#assigning 0 and 1 to male and female\ndata['SexMF'] = data['Sex'].map({'male':0, 'female':1}) \ndata.head(3)","286561b0":"#family feature with parch and sibsp\ndata['Fam'] = data['Parch'] + data['SibSp'] + 1\ndata['Fam'].head(3)","0ffee877":"display(data[['Fam', 'Survived']].groupby(['Fam'], as_index = False).mean())\nsns.countplot(x = data['Fam'], hue = data['Survived'])","5b3ba610":"#pessengers, if they are alone or not?\ndata['IsAlone'] = 1\ndata.loc[data.Fam == 1, 'IsAlone'] = 0\n\ndisplay(data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index = False).mean())\nsns.countplot(x = data['IsAlone'], hue = data['Survived'])","c4b55d14":"#bins for Fare\ndata['Fare'].fillna(80.0, inplace = True)\ndata.isna().sum()","d2866208":"data['FareBin'] = pd.qcut(data['Fare'], 6)\ndata.head()","a70d447d":"data['Age'].fillna(data['Age'].mean(), inplace = True)\ndata['Age'] = data['Age'].astype('int')\ndata['Age'].dtype\ndata['AgeBin'] = pd.qcut(data['Age'], 4)\ndata.head(5)","6c189e82":"from sklearn.preprocessing import LabelEncoder \nlb = LabelEncoder()\ndata['FareBin'] = lb.fit_transform(data['FareBin'])","fc86a84c":"lb = LabelEncoder()\ndata['AgeBin'] = lb.fit_transform(data['AgeBin'])","86a5af1d":"data['Embarked'].fillna(data['Embarked'].mode()[0], inplace = True)\ndata['Embarken'] = lb.fit_transform(data['Embarked'])","b8829a34":"#spliting train and test data\ntrain_data = data[:len(train)]\ntest_data = data[len(train):]\n\n#data training \nX_train = train_data.drop(labels = ['Survived', 'PassengerId'], axis = 1)\ny_train = train_data['Survived']","a6d91105":"features = ['SexMF', 'Pclass', 'FareBin', 'IsAlone', 'Fam', 'AgeBin', 'Embarken']\n# X_test = test_data[features]","06530884":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier","25b769fa":"x_train = train_data[features]\ny_train = train_data['Survived']\nx_test = test_data[features]\n\nlr = LinearRegression()\nlr.fit(x_train, y_train)\ny_pred1 = lr.predict(x_test)\nresult1 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred1})\nresult1 = result1.astype('int')\nresult1.to_csv('submission1.csv', index = False)\nresult1.head(20)","1ba95583":"from sklearn.linear_model import LogisticRegression","034bdb9b":"lgr = LogisticRegression()\nlgr.fit(x_train, y_train)\ny_pred2 = lgr.predict(x_test)\nresult2 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred2})\nresult2 = result2.astype('int')\nresult2.to_csv('submission2.csv', index = False)\nresult2.head(20)\n","fec37bf4":"xgbc = XGBClassifier(random_state = 3)\nxgbc.fit(x_train, y_train)\ny_pred3 = xgbc.predict(x_test)\nresult3 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred3})\nresult3 = result3.astype('int')\nresult3.to_csv('submission3.csv', index = False)\nresult3.head(20)","dd02bc92":"xgb = XGBRegressor()\nxgb.fit(x_train, y_train)\ny_pred4 = xgb.predict(x_test)\nresult4 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred4})\nresult4 = result4.astype('int')\nresult4.to_csv('submission4.csv', index = False)\nresult4.head(20)","b5d147ce":"RFC = RandomForestClassifier(random_state=2, n_estimators=300, min_samples_split=40)\nRFC.fit(x_train, y_train)\ny_pred5 = RFC.predict(x_test)\nresult5 = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': y_pred5})\nresult5 = result5.astype('int')\nresult5.to_csv('submission5.csv', index = False)\nresult5.head(20)","bd0416ae":"# > Data Cleaning","cae0a71f":"Age and Cabin have some missing values"}}