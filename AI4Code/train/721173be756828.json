{"cell_type":{"7d748a7b":"code","1a85c24a":"code","7460528e":"code","6142c09a":"code","9517bad8":"code","a357abee":"code","d782813d":"code","256a7b6c":"code","66745132":"code","845aed65":"code","0f14d3c6":"code","b75e9d24":"code","c5852146":"code","aab5998f":"code","f8c096e8":"code","f0211939":"code","9b1decaa":"code","b66d5d8b":"code","c5151dd4":"code","6c5a321f":"code","330d6f13":"code","a9da259a":"code","7b74ad7e":"code","bb38664a":"code","aad2c19c":"code","c6cf3e6c":"code","c2a4d703":"code","574d617e":"code","f41dff6a":"code","3707bd55":"code","f8e55fbb":"code","74866186":"code","6f9f285d":"code","7319d0ae":"code","dd79203e":"code","fc688e83":"code","030c75b1":"code","73d9cbc2":"code","5c105037":"code","b7296875":"code","8648cf14":"code","fed75504":"code","8f3ff834":"code","e7bface7":"code","ba6ed4fe":"code","787833c0":"code","58c1fafa":"code","f83c5c4c":"markdown"},"source":{"7d748a7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a85c24a":"train=pd.read_csv(\"\/kaggle\/input\/stock-time-series-20050101-to-20171231\/CAT_2006-01-01_to_2018-01-01.csv\")","7460528e":"train.tail()","6142c09a":"train.drop([\"Name\"],axis=1,inplace=True)","9517bad8":"train","a357abee":"train[\"Date\"]=pd.to_datetime(train[\"Date\"],infer_datetime_format=True)","d782813d":"train=train.set_index(['Date'])","256a7b6c":"train.head()","66745132":"from matplotlib.pylab import rcParams\nrcParams['figure.figsize']=10,6\n","845aed65":"train[\"Open\"].plot()\nplt.xlabel(\"open\")","0f14d3c6":"train[\"High\"].plot()\nplt.xlabel(\"High\")","b75e9d24":"train[\"Low\"].plot()\nplt.xlabel(\"Low\")","c5852146":"train[\"Close\"].plot()\nplt.xlabel(\"Close\")","aab5998f":"train[\"Volume\"].plot()\nplt.xlabel(\"Volume\")","f8c096e8":"from sklearn.preprocessing import MinMaxScaler\nscale=MinMaxScaler()\nscale=scale.fit(train)\ndata=scale.transform(train)","f0211939":"def sss(w):\n    t1,t2=w.shape\n    a=[]\n    t={}\n    for i in range(t2):\n        for j in range(t1):\n                a.append(w[j][i])\n        ss=pd.Series(a)\n        t.update({i:ss})\n        a=[]\n    k=[]\n    for i,j in t.items():\n        k.append(j)\n    ww=pd.concat(k,axis=1)\n    n=len(ww.columns)\n    for i in range(n):\n         ww[n+i]=ww[i].shift(-1)\n    return ww\n    ","9b1decaa":"w=sss(data)","b66d5d8b":"w","c5151dd4":"w.fillna(method='ffill',inplace=True)","6c5a321f":"w.drop([6,7,8,9],axis=1,inplace=True)\n","330d6f13":"w","a9da259a":"w.info()","7b74ad7e":"www=w.values","bb38664a":"xtrain,xtest,ytrain,ytest=www[:2015,0:5],www[2015:,0:5],www[:2015,-1],www[2015:,-1]","aad2c19c":"xtes=xtest","c6cf3e6c":"xtes","c2a4d703":"xtrain = xtrain.reshape(xtrain.shape[0], xtrain.shape[1], 1)\nxtest = xtest.reshape(xtest.shape[0], xtest.shape[1], 1)","574d617e":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM,Dropout\nfrom keras.layers import Bidirectional","f41dff6a":"model=Sequential()\nmodel.add(Bidirectional(LSTM(50,activation=\"relu\",return_sequences=True,input_shape=(xtrain.shape[1],xtrain.shape[2]))))\nmodel.add(LSTM(50,activation=\"relu\"))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')","3707bd55":"model.fit(xtrain,ytrain,validation_data=(xtest,ytest),epochs=50,batch_size=32,verbose=2)","f8e55fbb":"y_pred=model.predict(xtest)","74866186":"y_pred[:5]","6f9f285d":"from numpy import concatenate","7319d0ae":"y_pred= concatenate((y_pred,xtes[:, 1:]), axis=1)","dd79203e":"xtes[:5]","fc688e83":"y_pred[:5]","030c75b1":"y_pred = scale.inverse_transform(y_pred)","73d9cbc2":"ypred= y_pred[:,0]\ny_pred[:5]","5c105037":"ytest = ytest.reshape((len(ytest), 1))","b7296875":"ytest[:5]","8648cf14":"\nfrom numpy import concatenate","fed75504":"ytest= concatenate((ytest,xtes[:, 1:]), axis=1)","8f3ff834":"y_test = scale.inverse_transform(ytest)","e7bface7":"y_test=y_test[:,0]\ny_test[:5]","ba6ed4fe":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_test,ypred))","787833c0":"y_test[:5]","58c1fafa":"ypred[:5]","f83c5c4c":"BidirectionalLSTM=1.150973,BidirectionalLSTM1=1.245855,LSTM=1.502515,stackedlstm1-1.53426,stackedlstm2=1.790709,stackedlstm-2.1193"}}