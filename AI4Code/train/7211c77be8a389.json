{"cell_type":{"7a34af60":"code","41d0cd31":"code","feb52cc2":"code","80294286":"code","12d72839":"code","4b9f8d01":"code","7ac125b2":"code","4d1819d2":"code","a824c27b":"code","e7848e95":"code","562905a2":"code","3b020dcf":"code","4703c912":"code","195e68b3":"code","e21c35d6":"code","047a2cec":"markdown"},"source":{"7a34af60":"######### imports ############\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport os\nfrom PIL import Image\nimport cv2\n\nimport tensorflow as tf\nfrom keras import optimizers\nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras.models import Sequential, Model \nfrom keras.utils import np_utils\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator","41d0cd31":"from keras.applications.vgg19 import VGG19\n\nmodel = VGG19(weights = \"imagenet\", include_top=False, input_shape = (224, 224, 3))\nprint(model.summary())","feb52cc2":"####Adding output Layer\nx = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(1024, activation=\"relu\")(x)\npredictions = Dense(12, activation=\"softmax\")(x) ","80294286":"\nmodel_final = Model(input = model.input, output = predictions)\n#compling our model\nmodel_final.compile(loss = \"categorical_crossentropy\", optimizer = optimizers.SGD(lr=0.0001, momentum=0.9), metrics=[\"accuracy\"])\n","12d72839":"model_final.summary() #Model summary","4b9f8d01":"#############    Data Augmentation\ngen = ImageDataGenerator(\n            rotation_range=360.,\n            width_shift_range=0.3,\n            height_shift_range=0.3,\n            zoom_range=0.3,\n            horizontal_flip=True,\n            vertical_flip=True)","7ac125b2":"data_dir = \"..\/input\/plant-seedlings-classification\"\ntrain_data_dir = \"..\/input\/plant-seedlings-classification\/train\"\ntrain_generator = gen.flow_from_directory(\n                        train_data_dir,\n                        target_size = (224, 224),\n                        batch_size = 16, \n                        class_mode = \"categorical\")","4d1819d2":"checkpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='loss', min_delta=0, patience=10, verbose=1, mode='auto')","a824c27b":"model_final.fit_generator(\n                    train_generator,\n                    epochs = 30,\n                    shuffle= True,\n                    callbacks = [checkpoint, early])","e7848e95":"classes = train_generator.class_indices  \nprint(classes)\n\n#Invert Mapping\nclasses = {v: k for k, v in classes.items()}\nprint(classes)\n","562905a2":"\n\ntest_dir = os.path.join(data_dir, 'test')\ntest = []\n\nfor file in os.listdir(test_dir):\n    test.append(['test\/{}'.format(file), file])\n \ntest = pd.DataFrame(test, columns=['filepath', 'file'])\ntest.head(2)\ntest.shape\n","3b020dcf":"prediction = []\nfor filepath in test['filepath']:\n    img = cv2.imread(os.path.join(data_dir,filepath))\n    img = cv2.resize(img,(224,224))\n    img = np.asarray(img)\n    img = img.reshape(1,224,224,3)\n    pred = model_final.predict(img)\n    prediction.append(classes.get(pred.argmax(axis=-1)[0]))\n    #Invert Mapping helps to map Label","4703c912":"data_dir = '..\/input\/plant-seedlings-classification'\nsample_submission = pd.read_csv(os.path.join(data_dir, 'sample_submission.csv'))","195e68b3":"test = test.drop(columns =['filepath']) #Remove file path from test DF","e21c35d6":"\ntest.to_csv('submission.csv', index=False)\ntest.head()\n","047a2cec":"references : https:\/\/www.kaggle.com\/atrisaxena\/keras-plant-seedlings-vgg19-augmentation"}}