{"cell_type":{"ba6dcd76":"code","1738b561":"code","7487502e":"code","8229f8cb":"code","6029af35":"code","9d5c0526":"code","52325ae9":"code","d0eba6c1":"code","2956d740":"code","ecc48e3e":"code","30d069f4":"code","da37d77a":"code","d703a530":"code","bc006f1c":"code","a04feba1":"code","05c591ac":"code","65c8b62d":"code","c314cf9c":"code","bc0eefc5":"code","18451b11":"code","b917f111":"code","18dbad44":"code","16f5ec36":"code","3028f3c3":"code","5072d754":"code","88bea597":"code","5a391eb5":"code","d41d540a":"code","53bf97c5":"code","1d986cf9":"code","cbb46cea":"code","1dd2f9eb":"code","376227d5":"code","38cefc25":"code","7f75b507":"code","2fd4d627":"code","0ea2435d":"code","ecb8a02f":"markdown","696cc74d":"markdown","e5a8d5fd":"markdown","d1620856":"markdown","c3d48950":"markdown","13b090d8":"markdown"},"source":{"ba6dcd76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1738b561":"data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata.head()","7487502e":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","8229f8cb":"print(\"Train data shape\",data.shape)\nprint(\"Test data shape\",test_data.shape)","6029af35":"data[\"Age\"].mean(skipna=True)","9d5c0526":"ax = data[\"Age\"].hist(bins=15, density=True, stacked=True, alpha=0.6)\ndata[\"Age\"].plot(kind='density')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","52325ae9":"sns.heatmap(data.isnull(),yticklabels=False,cbar=False,cmap = 'Paired')","d0eba6c1":"(data.isnull().sum()\/len(data))*100","2956d740":"data.drop('Cabin',axis=1,inplace=True)\ndata.head()","ecc48e3e":"sns.set_style('whitegrid')\nsns.boxplot(x='Pclass',y='Age',data=data)","30d069f4":"print(data[\"Age\"].where(data[\"Pclass\"]==1).mean(skipna=True))\nprint(data[\"Age\"].where(data[\"Pclass\"]==2).mean(skipna=True))\nprint(data[\"Age\"].where(data[\"Pclass\"]==3).mean(skipna=True))","da37d77a":"def missing_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass==1:\n            return 37\n        elif Pclass==2:\n            return 29\n        elif Pclass==3:\n            return 24\n    else:\n        return Age\ndata[\"Age\"]=data[[\"Age\",\"Pclass\"]].apply(missing_age,axis=1)","d703a530":"sns.heatmap(data.isnull(),yticklabels=False,cbar=False,cmap='Paired')","bc006f1c":"sns.set_style('whitegrid')\nsns.countplot(x=\"Survived\",hue='Pclass',data=data,palette='rainbow')","a04feba1":"sns.set_style('whitegrid')\nsns.countplot(x=\"Survived\",hue='Sex',data=data,palette='RdBu_r')","05c591ac":"sns.heatmap(data.corr())","65c8b62d":"(data.isnull().sum()\/len(data))*100","c314cf9c":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ndata[\"Sex\"] = encoder.fit_transform(data[\"Sex\"])\nprint(encoder.classes_)\ndata[\"Embarked\"] = encoder.fit_transform(data[\"Embarked\"])\nprint(encoder.classes_)\ndata.head()","bc0eefc5":"from sklearn import tree\n\ndata1 = data[[\"Survived\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]]\ndata1.head()","18451b11":"tree_model = tree.DecisionTreeClassifier()\ntree_model.fit(X=data[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Embarked\"]],y=data[\"Survived\"])","b917f111":"tree_model.score(X=data[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Embarked\"]],y=data[\"Survived\"])","18dbad44":"test_data[\"Sex\"] = encoder.fit_transform(test_data[\"Sex\"])\nprint(encoder.classes_)\ntest_data[\"Embarked\"] = encoder.fit_transform(test_data[\"Embarked\"])\nprint(encoder.classes_)\ntest_data.head()","16f5ec36":"x_test = test_data[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Embarked\"]]","3028f3c3":"(test_data.isnull().sum()\/len(data))*100","5072d754":"test_data[\"Age\"]=test_data[[\"Age\",\"Pclass\"]].apply(missing_age,axis=1)","88bea597":"(test_data.isnull().sum()\/len(data))*100","5a391eb5":"ypred = tree_model.predict(x_test)","d41d540a":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': ypred})\noutput.to_csv('my_submission_DT.csv', index=False)\nprint(\"saved successfully!\")","53bf97c5":"gender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ngender_submission.head()","1d986cf9":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nclf = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nclf.fit(x,y)","cbb46cea":"test_data.head()","1dd2f9eb":"ypred = clf.predict(x_test)","376227d5":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\naccuracy = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Accuracy:\",accuracy)\nprint(\"Confusion matrix:\\n\",cm)\nprint(\"Classification Report:\\n\",classification_report(ypred,y_test))","38cefc25":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': ypred})\noutput.to_csv('my_submission_randomforest.csv', index=False)\nprint(\"saved successfully!\")","7f75b507":"from sklearn.svm import SVC\n\nsvm = SVC(kernel = 'poly')\nsvm.fit(x,y)\ny_pred = svm.predict(x_test)","2fd4d627":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\naccuracy = accuracy_score(y_test,y_pred)\ncm = confusion_matrix(y_test,y_pred)\nprint(\"Accuracy:\",accuracy)\nprint(\"Confusion matrix:\\n\",cm)\nprint(\"Classification Report:\\n\",classification_report(y_pred,y_test))","0ea2435d":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': ypred})\noutput.to_csv('my_submission_svm.csv', index=False)\nprint(\"saved successfully!\")","ecb8a02f":"# Decision tree classifier","696cc74d":"we can observe that the mean age for Pclass1 is 36,Pclass2 is 29 and Pclass3 is 24.  \nwe are going to replace the missing values of ages by their mean values. ","e5a8d5fd":"# Random Forest Classifier","d1620856":"# SVM","c3d48950":"# **Exploratory Data Analytics**","13b090d8":"As we can see Age , cabin , Embarked have missing data.  \nwe drop cabin column as it contains 77.10% of missing data."}}