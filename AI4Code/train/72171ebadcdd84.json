{"cell_type":{"606e7397":"code","01542469":"code","c061403f":"code","7e22f5e5":"code","3942ccd0":"code","c5a53c05":"code","ffa7913e":"code","d796d516":"code","db304210":"code","c7ea103d":"code","dd39a9ed":"code","ab95e5ca":"code","5567d3cc":"code","aa4547b2":"code","c9953c52":"code","dd6a5505":"code","bdbbecd9":"code","ba2c548c":"code","d79327de":"code","3c61f866":"code","cdfa7119":"code","faf805bd":"code","27e46de7":"markdown","975aed3c":"markdown","a2b46390":"markdown","54d876a3":"markdown","e058b687":"markdown","8c187871":"markdown","3a98aa62":"markdown","1be5960f":"markdown","c792573d":"markdown","f85d01a0":"markdown","bdcd3325":"markdown"},"source":{"606e7397":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01542469":"# LOADING REQUIRED DATA FOR ASSIGNMENT\ndata = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-4\/train.csv')\nevaluation = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-4\/eval.csv')\n","c061403f":"data.shape","7e22f5e5":"# CHECKING TO SEE IF THERE ARE ANY COLUMNS THAT ARE CATEGORICAL\ndata.dtypes.sample(100)","3942ccd0":"# CHECKING TO SEE IF THERE ARE ANY COLUMNS THAT ARE CATEGORICAL\nevaluation.dtypes.sample(100)","c5a53c05":"data.head(10)","ffa7913e":"evaluation.head(10)","d796d516":"#check for null vals\nnull_vals = data.isnull().sum() \/ data.shape[0]\nprint(null_vals)\n\nprint(\"\")\n\nnan_vals = data.isna().sum() \/ data.shape[0]\nprint(nan_vals)\n#There are no null or Nan values here","db304210":"#Splitting\nfrom sklearn.model_selection import train_test_split\nX_Total = data.drop(columns=['id', 'label'])\nY_Total = data['label']\n\n\nX_train, X_test, Y_train, Y_test = train_test_split(X_Total, Y_Total, test_size=0.2, random_state=42)\nX_eval = evaluation.drop(columns=['id'])\n","c7ea103d":"g = sns.countplot(x = Y_Total)\nY_Total.value_counts()","dd39a9ed":"X_train = X_train \/ 255.0\nX_eval = X_eval \/ 255.0\n\n","ab95e5ca":"X_train = X_train.values.reshape(-1,28,28,1)\nX_eval = X_eval.values.reshape(-1,28,28,1)\n\n\n","5567d3cc":"print(X_train.shape)\nprint(X_eval.shape)","aa4547b2":"from keras.utils.np_utils import to_categorical\nY_train = to_categorical(Y_train, num_classes = 10)\n","c9953c52":"g = plt.imshow(X_train[0][:,:,0])","dd6a5505":"g = plt.imshow(X_eval[36][:,:,0])","bdbbecd9":"from sklearn.metrics import accuracy_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n\nmodel = Sequential()\n# 64 filters\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu',\n                input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# 32 filters\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', activation ='relu'))\n# 16 filters\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', activation ='relu'))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n","ba2c548c":"model.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(100, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","d79327de":"print(model.summary())\n","3c61f866":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nprint(\"Training started..., this can take a while:\")\n\nmodel.fit(X_train, Y_train, epochs = 20)\n","cdfa7119":"prediction = model.predict(X_eval)\nprediction=np.argmax(prediction,axis=1)\nprediction.shape","faf805bd":"#LOADING SAMPLE SUBMISSION DATA TO USE THE COLUMN LABELS\nsubmission = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-4\/sample_submission.csv')\nsubmission['label'] = prediction\nsubmission.head()\nsubmission.to_csv(\"submission.csv\",index=False)\n\n#PRINTING OUT CONTENTS OF SUBMISSION FILE\n\n\nprint(submission.to_string())\n","27e46de7":"Models","975aed3c":"PRINTING OUT MY SUBMISSION DATA","a2b46390":"Splitting Data","54d876a3":"Normalize Data","e058b687":"Reshaping","8c187871":"FLATTENING AND ADDING LAYERZZZZZ","3a98aa62":"Analysing Data","1be5960f":"Encoding","c792573d":"MY MODEL SUMMARY","f85d01a0":"MY SUBMISSION DATA","bdcd3325":"COMPILING AND PREDICTING THE MODEL"}}