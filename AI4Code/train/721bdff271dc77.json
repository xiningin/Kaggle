{"cell_type":{"95c5b4ab":"code","2c80b845":"code","1e361d6d":"code","201d70ca":"code","5067680d":"code","a00f13b0":"code","bf027d59":"code","30b219f1":"code","bedf7c71":"code","76db3c13":"code","8fe9b728":"code","3b3f0125":"code","2c32050d":"code","1c5aaa3f":"code","a82dde02":"code","a053f653":"code","41f98a04":"code","5d9ed669":"code","6f9c25e0":"code","4799d1af":"code","eea36de0":"code","455041ce":"code","015683f1":"code","a3a1f29e":"code","cf202d58":"code","c4fd463e":"code","59712d4b":"code","90545102":"code","31b536ac":"code","91d067d7":"code","dabfc4fa":"code","e0fd032c":"code","05fd0598":"code","c48cba07":"code","64d947f2":"code","e4e0e562":"code","568fe215":"code","79b196cc":"code","dec7da94":"code","53160398":"code","132d1cce":"code","5e18a34d":"markdown","1fc28840":"markdown","3df111be":"markdown","2c4fb2f2":"markdown","4bd3968e":"markdown","97e56045":"markdown","6f1e9602":"markdown","53e64cea":"markdown","891144bf":"markdown","d63c2c4b":"markdown","6191a486":"markdown","3099b91a":"markdown","b96607e0":"markdown","e3eedc3f":"markdown","e410083b":"markdown","9dbb0e74":"markdown","fc10253b":"markdown","d030d6cd":"markdown","f7decd30":"markdown"},"source":{"95c5b4ab":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","2c80b845":"data = '..\/input\/automobile-dataset\/Automobile_data.csv'","1e361d6d":"df = pd.read_csv(data)\n# show the first 2 rows using dataframe.head() method\nprint(\"The first 5 rows of the dataframe\") \ndf.head()","201d70ca":"# create headers list\nheaders = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]\nprint(\"headers\\n\", headers)","5067680d":"# add headers using followingmethod\ndf.columns = headers\ndf.head(3)","a00f13b0":"# we can drop missing values along the column \"price\" as follows\ndf.dropna(subset=[\"price\"], axis=0)","bf027d59":"# replace \"?\" to NaN\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head(3)","30b219f1":"missing_data = df.isnull()\nmissing_data.head(3)","bedf7c71":"# Using loop in Python\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print(missing_data[column].value_counts())\n    print('='*50)","76db3c13":"avg_norm_loss = df['normalized-losses'].astype('float').mean()\nprint('Average of normalized losses:', avg_norm_loss)","8fe9b728":"df['normalized-losses'].replace(np.nan, avg_norm_loss, inplace = True)","3b3f0125":"avg_bore=df['bore'].astype('float').mean()\nprint(\"Average of bore:\", avg_bore)\ndf[\"bore\"].replace(np.nan, avg_bore, inplace=True)","2c32050d":"#Replace \"NaN\" by mean value in \"stroke\" column\navg_stroke=df['stroke'].astype('float').mean()\nprint('Avg of storke:', avg_stroke)\ndf['stroke'].replace(np.nan,avg_stroke,inplace =True)","1c5aaa3f":"#Calculate the mean value for the 'horsepower' column\navg_horsepower = df['horsepower'].astype('float').mean(axis=0)\nprint(\"Average horsepower:\", avg_horsepower)\ndf['horsepower'].replace(np.nan, avg_horsepower, inplace=True)","a82dde02":" #Calculate the mean value for 'peak-rpm' column:\navg_peakrpm=df['peak-rpm'].astype('float').mean(axis=0)\nprint(\"Average peak rpm:\", avg_peakrpm)\n#Replace NaN by mean value:\ndf['peak-rpm'].replace(np.nan, avg_peakrpm, inplace=True)","a053f653":"#To see which values are present in a particular column, we can use the \".value_counts()\" method:\ndf['num-of-doors'].value_counts()","41f98a04":"df['num-of-doors'].value_counts().idxmax()","5d9ed669":"#replace the missing 'num-of-doors' values by the most frequent \ndf[\"num-of-doors\"].replace(np.nan, \"four\", inplace=True)","6f9c25e0":"# simply drop whole row with NaN in \"price\" column\ndf.dropna(subset =['price'], axis = 0, inplace =True)\n\n# reset index, because we droped two rows\ndf.reset_index(drop = True, inplace =True)","4799d1af":"df.head()","eea36de0":"df.dtypes","455041ce":"#Convert data types to proper format\ndf[['bore','stroke']] = df[['bore','stroke']].astype(\"float\")\ndf[['normalized-losses']] = df[['normalized-losses']].astype('int')\ndf[\"price\"] = df[\"price\"].astype(\"float\")\ndf[[\"peak-rpm\"]] = df[[\"peak-rpm\"]].astype(\"float\")","015683f1":"#Let us list the columns after the conversion\ndf.dtypes","a3a1f29e":"# 1st Method\ndf['length'] = df['length']\/df['width'].max()\ndf[['width']] = df[['width']] \/ df[['width']].max()","cf202d58":"# Lets do 2nd Method now\ndf['height'] = df['height']-df['height'].min() \/ df['height'].max() -df['height'].min()","c4fd463e":"df[[\"length\",\"width\",\"height\"]].head()","59712d4b":"#Convert data to correct format\ndf[\"horsepower\"]=df[\"horsepower\"].astype(int, copy=True)","90545102":"#We would like 3 bins of equal size bandwidth so we use numpy's linspace(start_value, end_value, numbers_generated function.\nbins = np.linspace(min(df[\"horsepower\"]), max(df[\"horsepower\"]), 4)\nbins","31b536ac":"# we set the group names\ngroup_names = ['Low', 'Medium', 'High']","91d067d7":"#We apply the function \"cut\" the determine what each value of \"df['horsepower']\" belongs to.\ndf['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels =group_names, include_lowest=True)\ndf[['horsepower','horsepower-binned']].head()","dabfc4fa":"df[\"horsepower-binned\"].value_counts()","e0fd032c":"# Indicator variable (or dummy variable)\n\n# What is an indicator variable?\n# An indicator variable (or dummy variable) is a numerical variable used to label categories. They are called 'dummies' because the numbers themselves don't have inherent meaning.\n\n# Why we use indicator variables?\n\n# So we can use categorical variables for regression analysis in the later modules.\n\n# Example\n# We see the column \"fuel-type\" has two unique values, \"gas\" or \"diesel\". Regression doesn't understand words, only numbers. To use this attribute in regression analysis, we convert \"fuel-type\" into indicator variables.\n\n# We will use the panda's method 'get_dummies' to assign numerical values to different categories of fuel type.","05fd0598":"df.columns","c48cba07":"dummy_variable_1 =pd.get_dummies(df['fuel-type'])\ndummy_variable_1","64d947f2":"dummy_variable_1.rename(columns ={'fuel-type-diesel':'gas', 'fuel-type-diesel':'diesel'}, inplace =True)\ndummy_variable_1","e4e0e562":"# merge data frame \"df\" and \"dummy_variable_1\" \ndf = pd.concat([df, dummy_variable_1], axis=1)\n\n# drop original column \"fuel-type\" from \"df\"\ndf.drop(\"fuel-type\", axis = 1, inplace=True)","568fe215":"df.head()","79b196cc":"dummy_variable_2 = pd.get_dummies(df[\"aspiration\"])\ndummy_variable_2.rename(columns={'aspiration':'std', 'aspiration':'turbo'}, inplace=True)\ndummy_variable_2.head()","dec7da94":"# merge data frame \"df\" and \"dummy_variable_1\" \ndf = pd.concat([df, dummy_variable_2], axis=1)\n\n# drop original column \"fuel-type\" from \"df\"\ndf.drop(\"aspiration\", axis = 1, inplace=True)","53160398":"df.head()","132d1cce":"df.to_csv('Automobile_data_set')","5e18a34d":"<p>As we can see above, some columns are not of the correct data type. Numerical variables should have type 'float' or 'int', and variables with strings such as categories should have type 'object'. For example, 'bore' and 'stroke' variables are numerical values that describe the engines, so we should expect them to be of the type 'float' or 'int'; however, they are shown as type 'object'. We have to convert data types into a proper format for each column using the \"astype()\" method.<\/p> ","1fc28840":"<h4>Calculate the mean value for 'bore' column<\/h4>","3df111be":"## Evaluating for Missing Data\n","2c4fb2f2":"\"True\" stands for missing value, while \"False\" stands for not missing value.","4bd3968e":"<h3 id=\"deal_missing_values\">Deal with missing data<\/h3>\n<b>How to deal with missing data?<\/b>\n\n<ol>\n    <li>drop data<br>\n        a. drop the whole row<br>\n        b. drop the whole column\n    <\/li>\n    <li>replace data<br>\n        a. replace it by mean<br>\n        b. replace it by frequency<br>\n        c. replace it based on other functions\n    <\/li>\n<\/ol>","97e56045":"<h2 id=\"binning\">Binning<\/h2>\n<p>\n    Binning is a process of transforming continuous numerical variables into discrete categorical 'bins', for grouped analysis.\n<p>In our dataset, \"horsepower\" is a real valued variable ranging from 48 to 288, it has 57 unique values. What if we only care about the price difference between cars with high horsepower, medium horsepower, and little horsepower (3 types)? Can we rearrange them into three \u2018bins' to simplify analysis? <\/p>\n\n<p>We will use the Pandas method 'cut' to segment the 'horsepower' column into 3 bins <\/p>\n\n\n","6f1e9602":"1. <h3>Bins visualization<\/h3>\nNormally, a histogram is used to visualize the distribution of bins we created above. ","53e64cea":"Normalization is the process of transforming values of several variables into a similar range. Typical normalizations include scaling the variable so the variable average is 0, scaling the variable so the variance is 1, or scaling variable so the variable values range from 0 to 1\n\n Example\n\n To demonstrate normalization, let's say we want to scale the columns \"length\", \"width\" and \"height\"\n\n Target:would like to Normalize those variables so their value ranges from 0 to 1.\n\n> replace (original value) by (original value)\/(maximum value)\nThere are 3 methods to normalize Data,\n#1st ...x(new)=x(old) \/ x(max) simple feaature scales method\n#2nd... x(new)=x(old)-x(min) \/ x(max)-x(min) min -max method\n#3rd ...x(new) = x(old)-x(mean)\/x(std) Z-score method","891144bf":"## ADD Headers(columns)","d63c2c4b":"**Now, we have successfully read the raw dataset and add the correct headers into the data frame**","6191a486":"#### Count missing values in each column","3099b91a":"> <h4>Replace \"NaN\" by mean value in \"normalized-losses\" column<\/h4>","b96607e0":"# This is Section 1","e3eedc3f":"<h4>Calculate the average of the column <\/h4>","e410083b":"We can see that four doors are the most common type. We can also use the \".idxmax()\" method to calculate for us the most common type automatically:","9dbb0e74":"#### Finally, let's drop all rows that do not have price data:","fc10253b":"## Data Normalization","d030d6cd":"<h3 id=\"correct_data_format\">Correct data format<\/h3>\n<b>We are almost there!<\/b>\n<p>The last step in data cleaning is checking and making sure that all data is in the correct format (int, float, text or other).<\/p>\n\nIn Pandas, we use \n<p><b>.dtype()<\/b> to check the data type<\/p>\n<p><b>.astype()<\/b> to change the data type<\/p>","f7decd30":"## AutoDataSet:\n1. Evaluating Missing Data\n1. Correct Data Format\n1. Data normalization\n1. Binning"}}