{"cell_type":{"0f01a565":"code","ff6148d9":"code","ecc9b40a":"code","bc5da108":"code","624d4cb8":"code","a2171e6d":"code","a18708ef":"code","fd9b8c45":"code","87f6241d":"code","d412c592":"code","3c809b6b":"code","2e6e75fa":"code","3a182f35":"code","6adb05b5":"code","c153e486":"code","213da959":"code","ad86e9d1":"code","e66ee5f2":"code","1d89d9aa":"code","34bd0d76":"code","77d2e1a0":"code","76c7d6fb":"code","88d037ff":"code","09833712":"code","7dfe64a7":"markdown","6e4ba73d":"markdown"},"source":{"0f01a565":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff6148d9":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport numpy as np","ecc9b40a":"(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()","bc5da108":"len(X_train) #60 thousands images","624d4cb8":"len(X_test) #10 thousands images","a2171e6d":"X_train[0] #Numbers in 2D array","a18708ef":"plt.matshow(X_train[0]) #Above number in image","fd9b8c45":"y_train[0]  #Above number in label","87f6241d":"X_train.shape","d412c592":"X_train = X_train\/255 #divide by 255 to scale the data, to increase the accuracy\nX_test = X_test\/255","3c809b6b":"X_train_flattened = X_train.reshape(len(X_train),28*28)\nX_test_flattened = X_test.reshape(len(X_test),28*28)","2e6e75fa":"print(X_train_flattened.shape) #both are flattened now\nprint(X_test_flattened.shape)","3a182f35":"X_train_flattened[0] #compare the above X_train and this. Array has been flattened now","6adb05b5":"model = keras.Sequential([\n    keras.layers.Dense(10, input_shape=(784,),activation='sigmoid') #10 is the output shape because our numbers are from 0 t0 9\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n    \n)\n\nmodel.fit(X_train_flattened, y_train, epochs=5)","c153e486":"model.evaluate(X_test_flattened, y_test)","213da959":"plt.matshow(X_test[0]) #Check what was my first image","ad86e9d1":"y_predicted = model.predict(X_test_flattened)\ny_predicted[0] #this is probability of getting number from 0 to 9, check probability at number 8, ","e66ee5f2":"np.argmax(y_predicted[0]) #get the maximum probability from y_predicted, our model predicted right","1d89d9aa":"y_predicted_labels = [np.argmax(i) for i in y_predicted]\ny_predicted_labels[:10]","34bd0d76":"cm = tf.math.confusion_matrix(labels=y_test, predictions=y_predicted_labels)\ncm","77d2e1a0":"#check the confusion matrix in fancy way\nplt.figure(figsize=(10,6))\nimport seaborn as sns\nsns.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","76c7d6fb":"#Now we will add a layer to show that after adding a layer our accuracy increases\nmodel = keras.Sequential([\n    keras.layers.Dense(100, input_shape=(784,),activation='relu'),\n    keras.layers.Dense(10, activation='sigmoid')\n    \n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n    \n)\n\nmodel.fit(X_train_flattened, y_train, epochs=5)","88d037ff":"model.evaluate(X_test_flattened, y_test)","09833712":"y_predicted = model.predict(X_test_flattened)\n\ny_predicted_labels = [np.argmax(i) for i in y_predicted]\ncm = tf.math.confusion_matrix(labels=y_test, predictions=y_predicted_labels)\nplt.figure(figsize=(10,6))\nimport seaborn as sns\nsns.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('truth')","7dfe64a7":"check the heatmap previos and this, the accuracy has increased. ","6e4ba73d":"Now we need to flatten this array because neurons don't take multidimensional matrix as input"}}