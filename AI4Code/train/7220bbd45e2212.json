{"cell_type":{"6e1857ba":"code","404cca48":"code","6b507551":"code","de50b7f5":"code","0be97aab":"code","65436aab":"code","cbdb39ad":"code","aa7b5e07":"code","6e88ea52":"code","54511256":"code","631da75b":"code","4a83c2f1":"code","0e74eff4":"code","7ea9ee80":"code","1c8454f9":"code","80256a26":"code","9bbcb0de":"code","6b8373dd":"code","c85347b9":"code","0a7cc615":"code","b065a586":"code","b3e08f57":"code","bebb8905":"code","993b6990":"code","4d37cd9b":"code","efc7d5d3":"code","579f664b":"code","5559ab3e":"code","34e3afc0":"code","31d9ddf7":"code","76fda96f":"code","38185f6b":"code","5ab173c2":"code","6d8c4cd3":"code","5c4020d1":"code","84a31eae":"code","b9a6eff3":"markdown","764cab45":"markdown","6bb8757b":"markdown","38614027":"markdown","ed24e8d0":"markdown","e09fcd99":"markdown","f7f3d88c":"markdown","ea3c87a7":"markdown","01e5ba41":"markdown"},"source":{"6e1857ba":"import pandas as pd\nfrom itertools import product\nimport numpy as np\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport shap\nimport warnings\nwarnings.filterwarnings(\"ignore\")","404cca48":"def compute_wk_num(input_date):\n    wk_num = input_date.week\n    if (input_date.year == 2021) & (wk_num < 53):\n        wk_num += 52\n\n    return wk_num","6b507551":"df_covid = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")","de50b7f5":"df_covid[\"Country\/Region\"].value_counts()","0be97aab":"#read COVID-19 data and some clean up\n\ndf_covid = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndf_covid['date'] = pd.to_datetime(df_covid['ObservationDate'])\ndf_covid = df_covid[df_covid[\"Province\/State\"] != \"Unknown\"]\ndf_covid['Country\/Region'] = df_covid['Country\/Region'].replace('Mainland China', 'China')\ndf_covid[\"province_country\"] = df_covid[\"Province\/State\"] + \" \" + df_covid[\"Country\/Region\"]\n\n#count the entries for each place, use to filter out places with few data\n\ndf_count_entries = df_covid[\"province_country\"].value_counts().to_frame().reset_index()\ndf_count_entries.columns = [\"province_country\",\"count\"]\ndf_count_entries = df_count_entries[df_count_entries[\"count\"] > 40]\n\n#compute daily cases, data records accumulated numbers\n\ndf_covid_daily = pd.DataFrame()\nfor i in df_covid[\"province_country\"].unique():\n    \n    if i not in list(df_count_entries[\"province_country\"]):\n        continue\n        \n    current_place = df_covid[df_covid[\"province_country\"] == i]\n    \n    current_place['daily_confirmed'] = current_place[\"Confirmed\"] - current_place[\"Confirmed\"].shift(1) \n    current_place['daily_deaths'] = current_place[\"Deaths\"] - current_place[\"Deaths\"].shift(1) \n    current_place['daily_recovered'] = current_place[\"Recovered\"] - current_place[\"Recovered\"].shift(1)\n    \n    df_covid_daily = df_covid_daily.append(current_place)\n    \ndf_covid_daily[\"daily_confirmed\"] = df_covid_daily[\"daily_confirmed\"].fillna(df_covid_daily[\"Confirmed\"])\ndf_covid_daily[\"daily_deaths\"] = df_covid_daily[\"daily_deaths\"].fillna(df_covid_daily[\"Deaths\"])\ndf_covid_daily[\"daily_recovered\"] = df_covid_daily[\"daily_recovered\"].fillna(df_covid_daily[\"Recovered\"])\n\n#Compute week numbers\n\ndf_covid_daily[\"wk_num\"] = df_covid_daily.apply(lambda x: compute_wk_num(x[\"date\"]), axis=1)\ndf_covid_daily[\"wk_num_52\"] = df_covid_daily[\"wk_num\"]%53\ndf_covid_daily['wk_num_52'] = df_covid_daily['wk_num_52'].replace(0, 1)","65436aab":"df_temperature = pd.read_csv(\"..\/input\/daily-temperature-of-major-cities\/city_temperature.csv\")\ndf_temperature['Country'] = df_temperature['Country'].replace('United Kingdom','UK')\ndf_temperature['Country'] = df_temperature['Country'].replace('The Netherlands','Netherlands')\n\n#clean temperature data, use \n\ndf_temperature_hold = df_temperature[df_temperature[\"Year\"]==2019]\ndf_temperature_hold[\"AvgTemperature_c\"] = (df_temperature_hold[\"AvgTemperature\"] - 32)*(5\/9)\ndf_temperature_hold[\"Year\"] = df_temperature_hold[\"Year\"].astype(str)\ndf_temperature_hold[\"Month\"] = df_temperature_hold[\"Month\"].astype(str)\ndf_temperature_hold[\"Day\"] = df_temperature_hold[\"Day\"].astype(str)\ndf_temperature_hold[\"date\"] = df_temperature_hold[\"Year\"] + \"-\" + \\\n                                df_temperature_hold[\"Month\"] + \"-\" + df_temperature_hold[\"Day\"]\ndf_temperature_hold[\"date\"] = pd.to_datetime(df_temperature_hold[\"date\"])\n\n#compute weekly average for each country, prep for merge\n\ndf_temperature_hold[\"wk_num_52\"] = df_temperature_hold.apply(lambda x: compute_wk_num(x[\"date\"]), axis=1)\ndf_temperature_hold = df_temperature_hold[df_temperature_hold[\"wk_num_52\"]<=52]\ndf_temperature_hold = df_temperature_hold.groupby([\"Country\",\"wk_num_52\"]).agg({'AvgTemperature_c': 'mean'}).reset_index()\ndf_temperature_hold.columns = [\"Country\/Region\", \"wk_num_52\", \"AvgTemperature_c\"]","cbdb39ad":"df_covid_daily = pd.merge(df_covid_daily,df_temperature_hold,on=[\"Country\/Region\",\"wk_num_52\"],how='left')\n\n#remove since no temperature data\ndf_covid_daily = df_covid_daily[df_covid_daily[\"Country\/Region\"] != \"Peru\"]\ndf_covid_daily = df_covid_daily[df_covid_daily[\"Country\/Region\"] != \"Chile\"]\ndf_covid_daily = df_covid_daily[df_covid_daily[\"Country\/Region\"] != \"Macau\"]","aa7b5e07":"df_mobility = pd.read_csv(\"..\/input\/mobility-country\/mobility_country.csv\")\ndf_mobility[\"date\"] = pd.to_datetime(df_mobility[\"date\"])\n\ndf_mobility['country_region'] = df_mobility['country_region'].replace('United Kingdom','UK')\ndf_mobility['country_region'] = df_mobility['country_region'].replace('United States','US')\n\ndf_mobility[\"wk_num\"] = df_mobility.apply(lambda x: compute_wk_num(x[\"date\"]), axis=1)\n\ndf_mobility = df_mobility.drop([\"date\",\"country_region_code\",\"sub_region_1\",\"sub_region_2\",\"metro_area\",\"iso_3166_2_code\",\\\n                                \"census_fips_code\",\"place_id\"], axis=1)\n\ndf_mobility.columns = [\"Country\/Region\",\"retail_and_recreation\",\"grocery_and_pharmacy\",\"parks\",\"transit_stations\",\\\n                       \"workplaces\",\"residential\",\"wk_num\"]\n\nretail_and_recreation = df_mobility.groupby([\"Country\/Region\",\"wk_num\"]).agg({'retail_and_recreation': 'mean'}).reset_index()\ngrocery_and_pharmacy = df_mobility.groupby([\"Country\/Region\",\"wk_num\"]).agg({'grocery_and_pharmacy': 'mean'}).reset_index()\nparks = df_mobility.groupby([\"Country\/Region\",\"wk_num\"]).agg({'parks': 'mean'}).reset_index()\ntransit_stations = df_mobility.groupby([\"Country\/Region\",\"wk_num\"]).agg({'transit_stations': 'mean'}).reset_index()\nworkplaces = df_mobility.groupby([\"Country\/Region\",\"wk_num\"]).agg({'workplaces': 'mean'}).reset_index()\nresidential = df_mobility.groupby([\"Country\/Region\",\"wk_num\"]).agg({'residential': 'mean'}).reset_index()\n\ndf_covid_daily = pd.merge(df_covid_daily,retail_and_recreation,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)\ndf_covid_daily = pd.merge(df_covid_daily,grocery_and_pharmacy,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)\ndf_covid_daily = pd.merge(df_covid_daily,parks,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)\ndf_covid_daily = pd.merge(df_covid_daily,transit_stations,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)\ndf_covid_daily = pd.merge(df_covid_daily,workplaces,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)\ndf_covid_daily = pd.merge(df_covid_daily,residential,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)","6e88ea52":"df_vac = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\ndf_vac[\"date\"] = pd.to_datetime(df_vac[\"date\"])\ndf_vac['country'] = df_vac['country'].replace('United States','US')\ndf_vac[\"wk_num\"] = df_vac.apply(lambda x: compute_wk_num(x[\"date\"]), axis=1)\ndf_vac = df_vac[[\"wk_num\",\"country\",\"people_fully_vaccinated_per_hundred\",\"people_vaccinated_per_hundred\"]]\ndf_vac.columns = [\"wk_num\",\"Country\/Region\",\"fully_vac_per100\", \"vac_per100\"]\ndf_vac[\"fully_vac_per100\"] = df_vac[\"fully_vac_per100\"].fillna(0)\ndf_vac[\"vac_per100\"] = df_vac[\"vac_per100\"].fillna(0)\ndf_full_vac_wk = df_vac.groupby([\"Country\/Region\",\"wk_num\"]).agg({'fully_vac_per100': 'mean'}).reset_index()\ndf_vac_wk = df_vac.groupby([\"Country\/Region\",\"wk_num\"]).agg({'vac_per100': 'mean'}).reset_index()\n\ndf_covid_daily = pd.merge(df_covid_daily,df_full_vac_wk,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)\ndf_covid_daily = pd.merge(df_covid_daily,df_vac_wk,on=[\"Country\/Region\",\"wk_num\"],how='left').fillna(0)","54511256":"df_population = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\ndf_population = df_population[[\"Country (or dependency)\", \"Density (P\/Km\u00b2)\"]]\ndf_population.columns = [\"Country\/Region\", \"density\"]\ndf_covid_daily = pd.merge(df_covid_daily,df_population,on=[\"Country\/Region\"],how='left')","631da75b":"df_gdp = pd.read_csv(\"..\/input\/gdp-per-capita-all-countries\/GDP.csv\")\ndf_gdp['Country '] = df_gdp['Country '].replace('United Kingdom','UK')\ndf_gdp['Country '] = df_gdp['Country '].replace('United States','US')\ndf_gdp['Country '] = df_gdp['Country '].replace('Hong Kong SAR, China','Hong Kong')\ndf_gdp['Country '] = df_gdp['Country '].replace('Russian Federation','Russia')\ndf_gdp = df_gdp[[\"Country \",\"2018\"]]\ndf_gdp.columns = [\"Country\/Region\", \"2018_gdp\"]\ndf_covid_daily = pd.merge(df_covid_daily,df_gdp,on=[\"Country\/Region\"],how='left')","4a83c2f1":"#label encoding for country\/state\n\ndf_covid_daily[\"province_country\"] = df_covid_daily[\"province_country\"].astype('category')\ndf_covid_daily[\"place\"] = df_covid_daily[\"province_country\"].cat.codes\ndf_covid_daily[\"Country\/Region\"] = df_covid_daily[\"Country\/Region\"].astype('category')\ndf_covid_daily[\"country\"] = df_covid_daily[\"Country\/Region\"].cat.codes","0e74eff4":"df_country_code = df_covid_daily[[\"Country\/Region\", \"country\"]]\ndf_place_code = df_covid_daily[[\"province_country\", \"place\"]]","7ea9ee80":"df_country_code.drop_duplicates(inplace=True)\ndf_place_code.drop_duplicates(inplace=True)","1c8454f9":"#get country\/state map\n\ndf_place_country = df_covid_daily[[\"place\", \"country\"]]\ndf_place_country.drop_duplicates(inplace=True)","80256a26":"# Create \"grid\" with columns\n\nindex_cols = ['place', 'wk_num']\n\ngrid = []\nfor wk_num in df_covid_daily['wk_num'].unique():\n    province = df_covid_daily.loc[df_covid_daily['wk_num'] == wk_num, 'place'].unique()\n    grid.append(np.array(list(product(*[province, [wk_num]])),dtype='int32'))\n\ngrid = pd.DataFrame(np.vstack(grid), columns = index_cols, dtype=np.int32)","9bbcb0de":"# merge weekly sum of place\n\ndf_w = df_covid_daily.groupby(['wk_num','place']).agg({'daily_confirmed': 'sum'}).reset_index()\ndf_w = pd.merge(grid,df_w,on=['wk_num','place'],how='left').fillna(0)\ndf_w = pd.merge(df_w,df_place_country,on=[\"place\"],how='left')","6b8373dd":"# merge weekly sum of country\n\ndf_c = df_covid_daily.groupby(['wk_num','country']).agg({'daily_confirmed':'sum'}).reset_index()\ndf_c.columns = [\"wk_num\",\"country\",\"daily_confirmed_country\"]\ndf_w = pd.merge(df_w,df_c,on=['wk_num','country'],how='left')","c85347b9":"# merge weekly average temperature\n\ndf_temp = df_covid_daily[['wk_num','country','AvgTemperature_c']]\ndf_temp.drop_duplicates(inplace=True)\ndf_w = pd.merge(df_w,df_temp,on=['wk_num','country'],how='left')\ndf_w[\"AvgTemperature_c\"] = df_w[\"AvgTemperature_c\"].round()","0a7cc615":"# merge mobility\n\ndf_mobility = df_covid_daily[['wk_num','country','retail_and_recreation','grocery_and_pharmacy','parks','transit_stations','workplaces','residential']]\ndf_mobility.drop_duplicates(inplace=True)\ndf_w = pd.merge(df_w,df_mobility,on=['wk_num','country'],how='left')","b065a586":"# merge vaccination\n\ndf_vac = df_covid_daily[['wk_num','country','fully_vac_per100', 'vac_per100']]\ndf_vac.drop_duplicates(inplace=True)\ndf_w = pd.merge(df_w,df_vac,on=['wk_num','country'],how='left')","b3e08f57":"# merge pop\n\ndf_pop = df_covid_daily[['country','density']]\ndf_pop.drop_duplicates(inplace=True)\ndf_w = pd.merge(df_w,df_pop,on=['country'],how='left')","bebb8905":"# merge gdp\n\ndf_gdp = df_covid_daily[['country','2018_gdp']]\ndf_gdp.drop_duplicates(inplace=True)\ndf_w = pd.merge(df_w,df_gdp,on=['country'],how='left')","993b6990":"#compute lag features\n\nlag_variables  = ['daily_confirmed','daily_confirmed_country', 'AvgTemperature_c',\n                  'retail_and_recreation','grocery_and_pharmacy','parks','transit_stations','workplaces','residential',\n                  'fully_vac_per100','vac_per100']\nlags = [3]\n# we will keep the results in this dataframe\ncovid_means = df_w.copy()\nfor lag in lags:\n    new_df = df_w.copy()\n    new_df.wk_num += lag\n    # subset only the lag variables we want\n    new_df = new_df[['place','wk_num'] + lag_variables]\n    new_df.columns = ['place','wk_num'] + [lag_feat + '_lag_' + str(lag) for lag_feat in lag_variables]\n    covid_means = pd.merge(covid_means, new_df, on=['place','wk_num'] ,how='left')\n    \nfor feat in covid_means.columns:\n    if 'daily_confirmed' in feat:\n        covid_means[feat]=covid_means[feat].fillna(0)\n        \nX_train = covid_means[(covid_means['wk_num']<73) & (covid_means[\"wk_num\"]>15)]\nX_cv =  covid_means[covid_means['wk_num'] >= 73]\nY_train = X_train['daily_confirmed']\nY_cv = X_cv['daily_confirmed']\n\n#delete answer and non-lagging features\nX_train = X_train.drop(lag_variables, axis=1)\nX_cv = X_cv.drop(lag_variables, axis=1)","4d37cd9b":"fig, axs = plt.subplots(4, 6)\nplt.rcParams[\"figure.figsize\"] = (40,20)\nfor i in set(covid_means[\"country\"]):\n\n    country = df_country_code[df_country_code[\"country\"] == i][\"Country\/Region\"].iloc[0]\n    one_country = covid_means[covid_means[\"country\"] == i][[\"wk_num\",\"daily_confirmed_country\",\"fully_vac_per100\"]]\n    one_country.drop_duplicates(inplace=True)\n    \n    ax = axs[i%4,i\/\/4]\n    # Plot linear sequence, and set tick labels to the same color\n    ax.plot(one_country[\"wk_num\"], one_country[\"daily_confirmed_country\"], color='red', label = 'daily confirmed')\n    ax.tick_params(axis='y', labelcolor='red')\n    ax.set_title(country)\n    # Generate a new Axes instance, on the twin-X axes (same position)\n    ax2 = ax.twinx()\n\n    # Plot exponential sequence, set scale to logarithmic and change tick color\n    ax2.plot(one_country[\"wk_num\"], one_country[\"fully_vac_per100\"], color='green', label = 'fully vac per 100 pax')\n    ax2.tick_params(axis='y', labelcolor='green')\n    \n    ax.legend(loc = 'upper left')\n    ax2.legend(loc = 'upper right')\n\nplt.show()\n","efc7d5d3":"#get baseline prediction\n\ncovid_test = covid_means[covid_means['wk_num'] >= 73]\n\npreds = covid_test.copy()\n\nbaseline_rmse = np.sqrt(mean_squared_error(preds['daily_confirmed'],preds['daily_confirmed_lag_3']))\nbaseline_mae = mean_absolute_error(preds['daily_confirmed'],preds['daily_confirmed_lag_3'])\n\nprint(baseline_mae)","579f664b":"model_xgb = XGBRegressor(n_estimators=15)\nmodel_xgb.fit(X_train, Y_train)\npredict_xgb = model_xgb.predict(X_cv)\nmae_xgb = mean_absolute_error(Y_cv,predict_xgb)\nmae_xgb","5559ab3e":"feature_importances = pd.DataFrame({'col': X_train.columns,'imp':model_xgb.feature_importances_})\nfeature_importances = feature_importances.sort_values(by='imp',ascending=False)\npx.bar(feature_importances,x='col',y='imp')","34e3afc0":"X_importance  = X_train\nexplainer = shap.TreeExplainer(model_xgb)\nshap_values = explainer.shap_values(X_importance,check_additivity=False)","31d9ddf7":"# Plot summary_plot\nshap.summary_plot(shap_values, X_importance)","76fda96f":"# Plot summary_plot as barplot:\nshap.summary_plot(shap_values, X_importance, plot_type='bar')","38185f6b":"shap.dependence_plot(\"grocery_and_pharmacy_lag_3\", shap_values, X_importance, interaction_index=None)","5ab173c2":"shap.dependence_plot(\"transit_stations_lag_3\", shap_values, X_importance, interaction_index=None)","6d8c4cd3":"shap.dependence_plot(\"AvgTemperature_c_lag_3\", shap_values, X_importance, interaction_index=None)","5c4020d1":"shap.dependence_plot(\"fully_vac_per100_lag_3\", shap_values, X_importance, interaction_index=None)","84a31eae":"shap_values = explainer(X_train)\n\n# visualize the first prediction's explanation\nshap.plots.waterfall(shap_values[100])","b9a6eff3":"## COVID-19 Data","764cab45":"## Modelling COVID-19 with climate, mobility, and economic features\nBy building a general regression model, we study how climate, mobility, and economic features impact future number of COVID-19 cases.","6bb8757b":"## Train Model","38614027":"## Density and Urban pop % Data","ed24e8d0":"## SHAP value analysis","e09fcd99":"## Vaccination Data","f7f3d88c":"## Temperature Data","ea3c87a7":"## GDP data","01e5ba41":"## Mobility Data"}}