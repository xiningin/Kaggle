{"cell_type":{"544e0462":"code","e73451c9":"code","3e0a4480":"code","04a20aca":"code","ced27310":"code","1e34e77e":"code","e63464a5":"code","8ab8ee20":"code","a06e0baa":"code","0fc47b7c":"code","00e17612":"code","a3586f6f":"code","40fee88a":"code","aa6da9c5":"code","6b1e03ca":"code","06e34018":"code","ff1f2364":"code","ed152380":"code","1ff4e860":"code","e716a2a1":"code","46f2188b":"code","f581c9cf":"code","db3033f1":"code","096d6695":"code","2053f0b8":"code","a2058c9d":"code","9492d947":"code","37585326":"code","e7a553c8":"code","d2c95374":"code","f37f9ac9":"code","7b477be6":"code","6842e981":"code","6ef22180":"markdown","e876d516":"markdown","f099cb71":"markdown","659d68a2":"markdown","fa9be34b":"markdown","f11a7454":"markdown","a6f0db83":"markdown","6ce08d97":"markdown","1c13d499":"markdown","c285d9aa":"markdown","0396a3e1":"markdown","4ede2d28":"markdown","a2e44b14":"markdown","0c3e04b0":"markdown","7a26f9d6":"markdown","64301cd9":"markdown","db9b8074":"markdown","4f5d1485":"markdown","bdacce25":"markdown","6b2e5e90":"markdown","9822e343":"markdown","07ecaae7":"markdown"},"source":{"544e0462":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e73451c9":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv\")","3e0a4480":"train[0:9].T","04a20aca":"test[0:9].T","ced27310":"#train.info(), test.info()","1e34e77e":"def check(df):\n    col_list = df.columns.values\n    rows = []\n    for col in col_list:\n        tmp = (col,\n              train[col].dtype,\n              train[col].isnull().sum(),\n              train[col].count(),\n              train[col].nunique(),\n              train[col].unique())\n        rows.append(tmp)\n    df = pd.DataFrame(rows) \n    df.columns = ['feature','dtype','nan','count','nunique','unique']\n    return df\n\ncheck(train)","e63464a5":"def check(df):\n    col_list = df.columns.values\n    rows = []\n    for col in col_list:\n        tmp = (col,\n              test[col].dtype,\n              test[col].isnull().sum(),\n              test[col].count(),\n              test[col].nunique(),\n              test[col].unique())\n        rows.append(tmp)\n    df = pd.DataFrame(rows) \n    df.columns = ['feature','dtype','nan','count','nunique','unique']\n    return df\n\ncheck(test)","8ab8ee20":"mtr = train.isna().any().sum()\nmts = test.isna().any().sum()\nprint(\"train_missing_values : \", mtr,\"   test_missing_values : \", mts)","a06e0baa":"cover_type_count = train.Cover_Type.value_counts()\nprint(cover_type_count)","0fc47b7c":"# Reduce memory usage\nfor col in train.columns:\n    if train[col].dtype == \"int64\":\n        train[col]=pd.to_numeric(train[col], downcast=\"integer\")\n        \nfor col in test.columns:\n    if test[col].dtype == \"int64\":\n        test[col]=pd.to_numeric(test[col], downcast=\"integer\")","00e17612":"sub = test[['Id']]\ntrain.drop(\"Id\", axis=1, inplace=True)\ntest.drop(\"Id\", axis=1, inplace=True)\ntc = train['Cover_Type']","a3586f6f":"plt.figure(figsize=(8,15))\nsns.set('notebook','darkgrid', 'winter')\naxs = sns.countplot(x= tc)\naxs.bar_label(axs.containers[0])\nplt.title('Train_Cover_Type')\nplt.legend()\nplt.show()","40fee88a":"train.groupby('Cover_Type').max().astype(int).T.style.bar( align = 'mid', width = 90, axis = None, color = ['#d65f5f','#5fba7d'])","aa6da9c5":"sns.set('notebook','darkgrid', 'winter')\nsns.kdeplot(x = train['Elevation'], fill = True)\nplt.show()","6b1e03ca":"sns.set('notebook','darkgrid', 'Paired')\nsns.kdeplot(x = train['Horizontal_Distance_To_Roadways'], fill = True)\nsns.kdeplot(x = train['Horizontal_Distance_To_Fire_Points'], fill = True)\nplt.legend(labels = [\"Fire_Points\",\"Roadways\"])\nplt.show()","06e34018":"sns.set('notebook','darkgrid', 'summer')\nsns.kdeplot(x = train['Horizontal_Distance_To_Hydrology'], fill = True)\nsns.kdeplot(x = train['Vertical_Distance_To_Hydrology'], fill = True)\nplt.legend(labels = [\"Horizontal_Distance\",\"Vertical_Distance\"])\nplt.title('Hydrology')\nplt.show()","ff1f2364":"sns.set('notebook','darkgrid', 'copper')\nsns.kdeplot(x = train['Slope'], fill = True)\nplt.title('Slope')\nplt.show()","ed152380":"sns.set('notebook','darkgrid', 'cool')\nsns.kdeplot(x = train['Aspect'], fill = True)\nplt.title('Aspect')\nplt.show()","1ff4e860":"sns.set('notebook','darkgrid', 'icefire')\n\nsns.kdeplot(data = train['Hillshade_9am'])\nsns.kdeplot(data = train['Hillshade_Noon'])\nsns.kdeplot(data = train['Hillshade_3pm'])\nplt.title('Hillshade')\nplt.legend(labels = [\"9am\",\"Noon\",\"3pm\"])\n","e716a2a1":"sns.set('notebook','darkgrid', 'rainbow')\n\nsns.kdeplot(x = train['Wilderness_Area1'])\nsns.kdeplot(x = train['Wilderness_Area3'])\n\nplt.legend(labels = [\"Area1\",\"Area3\"])\nplt.title('train_Wilderness_Area1 & 3')\n","46f2188b":"sns.set('notebook','darkgrid', 'rainbow')\n\nsns.kdeplot(x = test['Wilderness_Area1'])\nsns.kdeplot(x = test['Wilderness_Area3'])\n\nplt.legend(labels = [\"Area1\",\"Area3\"])\nplt.title('test_Wilderness_Area1 & 3')","f581c9cf":"sns.set('notebook','darkgrid', 'rainbow')\n\nsns.kdeplot(x = train['Wilderness_Area2'])\nsns.kdeplot(x = train['Wilderness_Area4'])\nsns.kdeplot(x = test['Wilderness_Area2'])\nsns.kdeplot(x = test['Wilderness_Area4'])\n\nplt.legend(labels = [\"train.Area2\",\"train.Area4\",\"test.Area2\",\"test.Area4\" ])\nplt.title('train & test Wilderness_Area2 & 4')","db3033f1":"\ntc = train[['Elevation','Cover_Type']]\nte = test[['Elevation']]\n\nidx = train[train[\"Cover_Type\"] == 5].index\ntrain.drop(idx, axis=0, inplace=True)\n\ncols = [\"Soil_Type7\", \"Soil_Type15\"]\ntrain.drop(cols, axis=1, inplace=True)\ntest.drop(cols, axis=1, inplace=True)\n\n# labelE=encoder\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ntrain[\"Cover_Type\"] = encoder.fit_transform(train[\"Cover_Type\"])\n\n\nX = train.drop('Cover_Type', axis = 1).copy()\ny = train['Cover_Type'].copy()\n\nX_test = test.copy()\n\ndel train\ndel test","096d6695":"\n# scaler\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X))\nX_test = pd.DataFrame(scaler.transform(X_test))\n","2053f0b8":"from sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators = 100, random_state = 0)\nmodel.fit(X,y)\n\npred_valid = model.predict(X)\nascore = accuracy_score(y, pred_valid)\nprint('accuracy_score : ', ascore)\n\ntest_preds = model.predict(X_test)\n\nlabels = X.columns.values\nimportances = model.feature_importances_\nidx = np.argsort(importances)\nprint(idx)\n","a2058c9d":"imp = pd.DataFrame()\nimp['importance'] = importances\nimp = imp['importance']","9492d947":"plt.figure(figsize = (10,10))\nplt.title('feature importances')\nimp.nlargest(25).plot(kind='barh')\nplt.show()","37585326":"\nprediction = encoder.inverse_transform(test_preds)\n\nsub['Cover_Type'] = prediction\n\nsub.to_csv(\"submission.csv\",index=False)\nsub[0:10]","e7a553c8":"\ns_cover_type_count = sub.Cover_Type.value_counts()\nprint(s_cover_type_count)","d2c95374":"plt.figure(figsize=(8,15))\nsns.set('notebook','darkgrid', 'winter')\naxs = sns.countplot(x= sub['Cover_Type'])\naxs.bar_label(axs.containers[0])\nplt.title(\"RondomForestClassifier\")\nplt.legend()\nplt.show()","f37f9ac9":"labels = ['1:Spruce', '2:Lodgepole Pine', '3:Ponderosa Pine', '4:Cottonwood\/Willow', '5:Aspen', '6:Douglas-fir', '7:Krummholz']","7b477be6":"plt.figure(figsize=(16,12))\nsns.set('notebook','darkgrid', 'winter')\nsns.histplot(tc[tc.Cover_Type==1]['Elevation'], label=labels[0], color = 'C0',bins = 30)\nsns.histplot(tc[tc.Cover_Type==2]['Elevation'], label=labels[1], color = 'C4', bins = 30)\nsns.histplot(tc[tc.Cover_Type==3]['Elevation'], label=labels[2], color = 'C2', bins = 30)\nsns.histplot(tc[tc.Cover_Type==4]['Elevation'], label=labels[3], color = 'C5', bins = 30)\nsns.histplot(tc[tc.Cover_Type==5]['Elevation'], label=labels[4], color = 'black', bins = 30)\nsns.histplot(tc[tc.Cover_Type==6]['Elevation'], label=labels[5], color = 'crimson', bins = 30)\nsns.histplot(tc[tc.Cover_Type==7]['Elevation'], label=labels[6], color = 'green', bins = 30)\n\nplt.title('Train_Elvation&Cover_Type')\nplt.legend()\nplt.show()","6842e981":"plt.figure(figsize=(16,12))\n\nte[\"Cover_Type\"] = sub['Cover_Type']\nsns.set('notebook','darkgrid', 'winter')\nsns.histplot(te[te.Cover_Type==1]['Elevation'], label=labels[0], color = 'C0',bins = 30)\nsns.histplot(te[te.Cover_Type==2]['Elevation'], label=labels[1], color = 'C4',bins = 30)\nsns.histplot(te[te.Cover_Type==3]['Elevation'], label=labels[2], color = 'C2',bins = 30)\nsns.histplot(te[te.Cover_Type==4]['Elevation'], label=labels[3], color = 'C5',bins = 30)\nsns.histplot(te[te.Cover_Type==5]['Elevation'], label=labels[4], color = 'black',bins = 30)\nsns.histplot(te[te.Cover_Type==6]['Elevation'], label=labels[5], color = 'crimson',bins = 30)\nsns.histplot(te[te.Cover_Type==7]['Elevation'], label=labels[6], color = 'green',bins = 30)\n\nplt.title('Submission_Elvation&Cover_Type')\nplt.legend()\nplt.show()","6ef22180":"# 3.Let's find an importance feature","e876d516":"* Wilderness_Area2 and Wilderness_Area4 are almost the same shap","f099cb71":"----------------------","659d68a2":"# Tabular playground series Dec 2021 update version6! Back to the feature(simple is the best?)\n* and light version(sorry guys, it take too long (loading time )\n* This dataset is based off of the original[ Forest Cover Type](https:\/\/www.kaggle.com\/c\/forest-cover-type-prediction\/overview\/) Prediction competition.\n1. * Let's take a look at the dataset\n1. * Visualisation\n1. * Let's find an importance feature\n\n>Thank you for reading! I hope this will help you.Please excuse if there are any mistakes\ud83d\ude4f\n\n","fa9be34b":"test id dosen,t much train id.","f11a7454":"# \ud83c\udf33TPS_DEC_21_EDA and RandomForestClassifier \ud83c\udf32","a6f0db83":"# Work in progress \ud83d\udc69\u200d\ud83d\udcbb","6ce08d97":"\n* additional infomation \u27a1[here: TPS_DEC_21_EDA_add_info](https:\/\/www.kaggle.com\/m1y7k8\/tps-dec-21-eda-add-info\/)\n* #  Hmmm...Some Wilderness_Area are overlapped.\n* #  Some soil count is zero.\n* # Well, I think...I get it..but...What do I do?\ud83d\ude28","1c13d499":"* Wilderness_Area1's ratio between 0 and 1 is approximately 3:1.\n* Wilderness_Area3's ratio between 0 and 1 is approximately 1:2.","c285d9aa":"# 2. Visualization\ud83d\udcca","0396a3e1":"The most importance feature is Elevation","4ede2d28":"submission result : Cover_Type5 is no data.","a2e44b14":"1.  Cover_Type 5 (Aspen) :\n> * Elevation 2953, \n> * soile type 4 only\n> * Horizontal_Distance_To_Fire_Points 7633,\n> * Wilderness_Area3\n1. Cover_type 4(cotton wood \/ willow)\n>  * Elevation 1794 to 2430 \n> * not soile type 7,15,29,32\n> * Horizontal_Distance_To_Fire_Points -47 to 1916\n> * Wilderness_Area2 or 4\n1. Cover_type 7(krummnholz)\n>  * Elevation 3075 to 4355\n> * not soile type 7,15\n> * Horizontal_Distance_To_Fire_Points -250 to 7867\n> * Wilderness_Area1,2 < 3\n1. Cover_type 1 (Spruce\/Fir)\n>  * Elevation 2521 to 4357\n> * not soile type 7,15\n> * Horizontal_Distance_To_Fire_Points -277 to 8075\n> * Wilderness_Area2,3,4 ( not 1)\n1. Cover_type 6 (Duaglus fir)\n>  * Elevation 1795 to 2868\n> * not soile type 7,15\n> * Horizontal_Distance_To_Fire_Points -177 to 7081\n> * Wilderness_Area1,2,3,4 (all)\n1. Cover_type 3 (Ponderose pine)\n>  * Elevation 1773 to 3034\n> * not soile type 7,15\n> * Horizontal_Distance_To_Fire_Points -267 to 7372\n> * Wilderness_Area1,2,3,4 (all)\n1. Cover_type 2 (Lodepole pine)\n>  * Elevation 1923 to 4383\n> * not soile type 7,15\n> * Horizontal_Distance_To_Fire_Points -277 to 8074\n> * Wilderness_Area1,2,3,4 (all)","0c3e04b0":"* train: Wilderness_Area1\tint64\t0\t4000000\t2\t[1, 0]\n* test: Wilderness_Area1\tint64\t0\t1000000\t2\t[0, 1]\n* Soil_Type_15 and Soil_Type7 are zero.","7a26f9d6":"n_estimators = 100 > 150,200, random_state = 0 > 42, 2021 \ud83d\udc4d\n\n","64301cd9":" #  1: Let's take a look at the dataset\ud83d\udd0d\u00b6","db9b8074":"wow! Area3 is defferent from train shapes.\ud83d\ude44\n* train :  Wilderness_Area3         0.0 0.00  (50% 1.0) (75% 1.00)    1.0\n* test: Wilderness_Area3            0.0 0.00  (50% 0.0) (75% 1.00)  1.0","4f5d1485":"* There are 7 types.\n>  1. \ud83c\udf32Spruces\/Fir (evergreen,needle_leaf,pulpwood)\n>  1. \ud83c\udf32Lodgepole (evergreen,needle_leaf,\ud83c\udf04partial sun(minimum of 4Hr),fuel ladder,find \ud83c\udf44)\n>  1. \ud83c\udf32Ponderose pine (evergreen,needle_leaf, \ud83d\udd25\ud83d\udd01fire ecology(natural ignition)\n>  1. \ud83c\udf33Cottonwood\/Willow (deciduous, \ud83c\udf42broad_leaf,\ud83c\udf1efull sun,wet_soil)\n>  1. \ud83c\udf33Aspen (deciduous,\ud83c\udf42broad_leaf,\ud83c\udf1efull sun)\n>  1. \ud83c\udf32Douglas fir(evergreen,needle_leaf, big and tall tree, live over 400yr)\n>  1. \ud83c\udf32Krummholz(Spruce,Fir or Lodgepole are damaged by winter storm(windy,snow cover))\n*  Cover_Type_2 is the most count of value.(a common tree in WUA)\n*  Cover_Type_5 is one count.","bdacce25":"* Elevation is between 1773.0 and 4383.0(m)\n* forest line(alpen timber_line) making the upper limit of tree growth in mountain can be a factor for type of cover.","6b2e5e90":"> I try a simple feature this time.(no categorical features)\ud83d\udc40 but..It is not the best score.\n> So I revert it back to the original feature.","9822e343":"------------------","07ecaae7":"> # Describe feature (Thank you all!)\n> > **Name \/ Data Type \/ Measurement \/ Description**\n> > 1. Elevation \/ quantitative \/meters \/ Elevation in meters\n> > 1. Aspect \/ quantitative \/ azimuth \/ Aspect in degrees azimuth\n> > 1. Slope \/ quantitative \/ degrees \/ Slope in degrees\n> > 1. Horizontal_Distance_To_Hydrology \/ quantitative \/ meters \/ Horz Dist to nearest surface water features\n> > 1.Vertical_Distance_To_Hydrology \/ quantitative \/ meters \/ Vert Dist to nearest surface water features\n> > 1. Horizontal_Distance_To_Roadways \/ quantitative \/ meters \/ Horz Dist to nearest roadway\n> > 1. Hillshade_9am \/ quantitative \/ 0 to 255 index \/ Hillshade index at 9am, summer solstice\n> > 1. Hillshade_Noon \/ quantitative \/ 0 to 255 index \/ Hillshade index at noon, summer soltice\n> > 1. Hillshade_3pm \/ quantitative \/ 0 to 255 index \/ Hillshade index at 3pm, summer solstice\n> > 1. Horizontal_Distance_To_Fire_Points \/ quantitative \/ meters \/ Horz Dist to nearest wildfire ignition points\n> > 1. Wilderness_Area (4 binary columns) \/ qualitative \/ 0 (absence) or 1 (presence) \/ Wilderness area designation\n> > 1. Soil_Type (40 binary columns) \/ qualitative \/ 0 (absence) or 1 (presence) \/ Soil Type designation\n> > 1. 1. Cover_Type (7 types) \/ integer \/ 1 to 7 \/ Forest Cover Type designation\n> **************************\n> > * 1 - Rawah Wilderness Area\n> > * 2 - Neota Wilderness Area\n> > * 3 - Comanche Peak Wilderness Area\n> > * 4 - Cache la Poudre Wilderness Area\n> *************************\n> The soil types \n> 1.  Cathedral family - Rock outcrop complex, extremely stony.\n> 1.  Vanet - Ratake families complex, very stony. \n> 1.  Haploborolis - Rock outcrop complex, rubbly. \n> 1.  Ratake family - Rock outcrop complex, rubbly. \n> 1.  Vanet family - Rock outcrop complex complex, rubbly. \n> 1.  Vanet - Wetmore families - Rock outcrop complex, stony. \n> 1.  Gothic family. \n> 1.  Supervisor - Limber families complex. \n> 1.  Troutville family, very stony. \n> 1.  Bullwark - Catamount families - Rock outcrop complex, rubbly. \n> 1.  Bullwark - Catamount families - Rock land complex, rubbly. \n> 1.  Legault family - Rock land complex, stony. \n> 1.  Catamount family - Rock land - Bullwark family complex, rubbly. \n> 1.  Pachic Argiborolis - Aquolis complex. \n> 1.  unspecified in the USFS Soil and ELU Survey. \n> 1.  Cryaquolis - Cryoborolis complex. \n> 1.  Gateview family - Cryaquolis complex. \n> 1.  Rogert family, very stony. \n> 1.  Typic Cryaquolis - Borohemists complex. \n> 1.  Typic Cryaquepts - Typic Cryaquolls complex. \n> 1.  Typic Cryaquolls - Leighcan family, till substratum complex. \n> 1.  Leighcan family, till substratum, extremely bouldery. \n> 1.  Leighcan family, till substratum - Typic Cryaquolls complex. \n> 1.  Leighcan family, extremely stony. \n> 1.  Leighcan family, warm, extremely stony. \n> 1.  Granile - Catamount families complex, very stony. \n> 1.  Leighcan family, warm - Rock outcrop complex, extremely stony. \n> 1.  Leighcan family - Rock outcrop complex, extremely stony. \n> 1.  Como - Legault families complex, extremely stony. \n> 1.  Como family - Rock land - Legault family complex, extremely stony. \n> 1.  Leighcan - Catamount families complex, extremely stony. \n> 1.  Catamount family - Rock outcrop - Leighcan family complex, extremely stony. \n> 1.  Leighcan - Catamount families - Rock outcrop complex, extremely stony. \n> 1.  Cryorthents - Rock land complex, extremely stony. \n> 1.  Cryumbrepts - Rock outcrop - Cryaquepts complex. \n> 1.  Bross family - Rock land - Cryumbrepts complex, extremely stony. \n> 1.  Rock outcrop - Cryumbrepts - Cryorthents complex, extremely stony. \n> 1.  Leighcan - Moran families - Cryaquolls complex, extremely stony. \n> 1.  Moran family - Cryorthents - Leighcan family complex, extremely stony. \n> 1.  Moran family - Cryorthents - Rock land complex, extremely stony.\n> > *******************\n> > * reference : Roosevelt National Forest in north central Colorado.\n> > [Data info](\/https:\/\/archive.ics.uci.edu\/ml\/datasets\/Covertype\/)\n> > * Five wildfires burned over 300,000 acres of National Forest System lands on the Arapaho and Roosevetl National Forests in 2020\ud83d\ude28\n"}}