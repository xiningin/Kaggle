{"cell_type":{"2e63a284":"code","729fbee5":"code","ebaf8d60":"code","708dbbdc":"code","4da3fa2f":"code","d048c9e6":"code","e1427d92":"code","a2a11273":"code","6c76b514":"code","a83255ab":"code","8d58c38d":"code","74575a27":"code","44ecb2a3":"code","4639d449":"code","cb4d0721":"code","130a5f04":"code","2b9a7e73":"code","2d0107f1":"code","56b00f58":"code","c70dc962":"code","b3e34657":"code","55d7f1ac":"code","3f4f552b":"markdown","cec3a4ad":"markdown","ea2ff1c7":"markdown","98cd4507":"markdown","18ddc581":"markdown","c290261d":"markdown","ff3db1c4":"markdown","d7795f98":"markdown","8c8c0af7":"markdown","0a2c92ac":"markdown","06a63684":"markdown","f833c52a":"markdown","42474531":"markdown"},"source":{"2e63a284":"# check directory of input\nimport os\nprint(os.listdir(\"\/kaggle\/input\/\"))","729fbee5":"# check directory of sign-language-mnist\nprint(os.listdir(\"\/kaggle\/input\/sign-language-mnist\"))","ebaf8d60":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sign-language-mnist\/amer_sign2.png\")","708dbbdc":"Image(\"\/kaggle\/input\/sign-language-mnist\/american_sign_language.PNG\")","4da3fa2f":"# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.utils import to_categorical","d048c9e6":"# Read Dataset\ntrain = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')","e1427d92":"# show data format\ntrain.head()","a2a11273":"# get labels \nlabels = train['label']","6c76b514":"# droping the label coloumn from the training set\ntrain.drop('label', axis = 1, inplace = True)\nprint(train.shape)","a83255ab":"# Reshape\nx_train = train.values.reshape(train.shape[0],28,28,1)","8d58c38d":"# Show a reshape image\nplt.imshow(x_train[0].reshape(28,28), cmap='gray')","74575a27":"# explore the label distribution of training images\nplt.figure(figsize = (18,8))\nsns.countplot(x =labels)","44ecb2a3":"# one-hot encoding\nlabels = to_categorical(labels)\nprint(labels.shape)","4639d449":"# Split Dataset into Train and Test\nx_train, x_test, y_train, y_test = train_test_split(x_train, labels, test_size = 0.2, random_state = 2)","cb4d0721":"# Normalize Dataset\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.0","130a5f04":"print(x_train.shape)\nprint(x_test.shape)","2b9a7e73":"num_classes = 25\ninput_shape = (28,28,1)","2d0107f1":"# Build Model\nmodel = models.Sequential()\n\nmodel.add(layers.Conv2D(64, kernel_size=(3,3), padding='same', activation = 'relu', input_shape=input_shape ))\nmodel.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(layers.Conv2D(64, kernel_size = (3, 3), padding='same', activation = 'relu'))\nmodel.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(layers.Conv2D(64, kernel_size = (3, 3), padding='same', activation = 'relu'))\nmodel.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation = 'relu'))\nmodel.add(layers.Dropout(0.20))\nmodel.add(layers.Dense(num_classes, activation = 'softmax'))\n\nmodel.summary()","56b00f58":"# Compile Model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam' , metrics = ['accuracy'])","c70dc962":"# Train Model\nbatch_size = 128\nnum_epochs = 20\n\nhistory = model.fit(x_train, y_train, batch_size=batch_size, epochs=num_epochs, validation_data = (x_test, y_test))","b3e34657":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,t1,t2): \n    plt.plot(hisData.history[t1])\n    plt.plot(hisData.history[t2])\n    plt.title('Training History')\n    plt.ylabel('value')\n    plt.xlabel('epoch')\n    plt.legend([t1, t2], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","55d7f1ac":"# Test Accuracy\nscore = model.evaluate(x_test, y_test, verbose = 0)\nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","3f4f552b":"Each letter indicates a sign produced by our fingers.","cec3a4ad":"## Introduction ","ea2ff1c7":"## Train Model","98cd4507":"## Build CNN model","18ddc581":"each picture is 28x28 pixels","c290261d":"## Read Dataset","ff3db1c4":"## Training History","d7795f98":"## Prepare Data","8c8c0af7":"*As you can see each one is almost equally distributed !*","0a2c92ac":"## American Sign Language (ASL)","06a63684":"## Data exploration","f833c52a":"# Sign-Language MNIST","42474531":"## Evaluate Model"}}