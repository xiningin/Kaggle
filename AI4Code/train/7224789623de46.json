{"cell_type":{"34bea2ee":"code","c88429a7":"code","f801116a":"code","bf18e3a9":"code","fc9e4f8f":"code","433b05e9":"code","ecdbdb45":"code","239737d0":"code","279d2a05":"markdown","8daaa095":"markdown","f570ab52":"markdown","e8d0d646":"markdown","4256a094":"markdown","909abdc2":"markdown","1902e59d":"markdown"},"source":{"34bea2ee":"import pandas as pd\nfrom pandas import DataFrame\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport matplotlib.pyplot as py\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection, preprocessing, metrics\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras import initializers\n\n\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")","c88429a7":"d = {'pregnancies',\n     'glucose',\n     'BloodPressure'\n     'Skinthickness',\n     'Insulin',\n     'BMI',\n     'DiabetesPedigreeFunction',\n     'Age',\n     'outcome'}\ndf = pd.DataFrame(d)\n\nprint(df)","f801116a":"dt = pd.read_csv(\"..\/input\/daibetes-dataset\/diabetes_saru.csv\")","bf18e3a9":"dt.head (5)","fc9e4f8f":"features_list = list(df.drop(column='Outcome').column)\ncolumns = list(df.column)\nprint(features_list)","433b05e9":"# Scaling\nfrom sklearn.preprocessing import RobustScaler\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\n\n# Models\nimport torch\nimport torch.nn as nn\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve\n\n# Cross Validation\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nprint('Packages imported...')","ecdbdb45":"X = DataFrame.iloc[:, 0:9].values\ny = DataFrame.iloc[:, 9].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","239737d0":"classifier = Sequential()\n\nclassifier.add(Dense(units = 4, kernel_initializer=initializers.RandomNormal(stddev=0.01), bias_initializer=initializers.Zeros(), activation = 'relu', input_dim = 8))\nclassifier.add(Dense(units = 2, kernel_initializer=initializers.RandomNormal(stddev=0.01), bias_initializer=initializers.Zeros(), activation = 'relu'))\nclassifier.add(Dense(units = 1, kernel_initializer=initializers.RandomNormal(stddev=0.01), bias_initializer=initializers.Zeros(), activation = 'sigmoid'))\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n                   \nclassifier.fit(X_train, y_train, batch_size = 10, epochs = 100)\n\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n","279d2a05":"**The Model**","8daaa095":"**The Data**","f570ab52":"In the next part I am building my model","e8d0d646":"I am loading data to my notebook","4256a094":"In this part, I am importing data packages.","909abdc2":"Here,\nThe data are similar to regular clinical data. The meaning of some of the column headers are obvious. The following are the meaning\nStarting from 0-15 is the column number.\n* Pregnancies: The number of times female was pregnant\n* Glucose : The person's glucose level\n* Blood pressure: The person's blood pressure (mm Hg on admission to the hospital)\n* Skin thickness : The person's triceps of skin fold thickness\n* Insulin : The person's insulin level\n* BMI: The person's body mass index ( kg\/m^2)\n* DiabetesPedigreeFunction: The person's risk of diabetes II on genetic bases\n* Age: The person's age (year)\n* Outcome: O meaning no risk of diabetes and 1 meaning risk of diabetes\n\nNote: NaN here means Not a Number. Hence, the data might be corrupted or missing.\n\n","1902e59d":"Now, I am checking if my data are correctly uploaded or not"}}