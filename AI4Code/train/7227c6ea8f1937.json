{"cell_type":{"efbd8e51":"code","2d50603d":"code","0245316e":"code","7cfb2409":"code","0b494573":"code","f8793336":"code","c78687a0":"code","fc4dbb40":"code","259a08c5":"code","2e37d025":"code","5044a921":"code","c375cd96":"code","d0623e2c":"code","b74acbc3":"code","4a030b08":"code","fb1c987a":"code","f7feb45b":"code","e125a781":"code","b00b5d6e":"code","0ad0f773":"code","f260f35b":"code","52f299fd":"code","333ed5c2":"markdown","48ff4532":"markdown","c4f12839":"markdown","c5cae9f4":"markdown","89203334":"markdown","cf7050c9":"markdown","fc18f83b":"markdown"},"source":{"efbd8e51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d50603d":"#Loading Data \ntrain = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')","0245316e":"print(train.shape)\ntrain.head() #We need to seperate Label ","7cfb2409":"print(test.shape)\ntest.head()","0b494573":"Y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1)","f8793336":"#Test data\nY_test = test[\"label\"]\nX_test = test.drop(labels = [\"label\"],axis= 1)","c78687a0":"#Lets Visualize number of digits classes\nprint(Y_train.value_counts())\nplt.figure(figsize=(15,9))\nsns.countplot(Y_train,palette = \"icefire\")\nplt.title(\"Number of Digits Label Pixels\")","fc4dbb40":"#plotting some of the samples  \nplt.subplot(2,2,1)\nimg1 = X_train.iloc[0].to_numpy().reshape((28,28))\nplt.imshow(img1,cmap='gray')\nplt.subplot(2,2,2)\nimg2 = X_train.iloc[10].to_numpy().reshape((28,28))\nplt.imshow(img2,cmap='gray')\nplt.subplot(2,2,3)\nimg3 = X_train.iloc[98].to_numpy().reshape((28,28))\nplt.imshow(img3,cmap='gray')\nplt.subplot(2,2,4)\nimg4 = X_train.iloc[25].to_numpy().reshape((28,28))\nplt.imshow(img4,cmap='gray')\nplt.show()","259a08c5":"#Let's Normalize the Data \nX_train = X_train.astype(\"float32\")\nX_test = X_test.astype(\"float32\")\nX_train = X_train \/ 255.0\nX_test = X_test \/ 255.0\nprint(\"X_train shape : \",X_train.shape)\nprint(\"Test shape : \",X_test.shape)","2e37d025":"#Reshape \nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nprint(\"X_train shape : \",X_train.shape)\nprint(\"Test shape : \",X_test.shape)","5044a921":"#Label Encoding \nfrom keras.utils.np_utils import to_categorical \nY_train = to_categorical(Y_train,num_classes = 10) #we got 10 labels \nY_test = to_categorical(Y_test,num_classes = 10)","c375cd96":"from sklearn.model_selection import train_test_split \nX_train, X_val, Y_train, Y_val = train_test_split(X_train,Y_train, test_size = 0.10, random_state = 42)\nprint(\"X_train shape\",X_train.shape)\nprint(\"X_val shape\",X_val.shape)\nprint(\"Y_train shape\",Y_train.shape)\nprint(\"Y_val shape\",Y_val.shape)","d0623e2c":"from sklearn.metrics import confusion_matrix\nimport itertools \n\nfrom keras.utils.np_utils import to_categorical #Converting to one hot encoding \nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers.normalization import BatchNormalization\n\nepochs = 15\nbatch_size = 250\nnum_classes = 10\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = \"Same\", \n                 activation ='relu', input_shape = (28,28, 1))) \n             \nmodel.add(MaxPool2D(pool_size=(3,3)))                                    \nmodel.add(Dropout(0.25)) \n#\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = \"Same\", \n                 activation ='relu'))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n# \nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = \"Same\",\n                 activation ='relu'))\n\n\n\n\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\")) #Hidden layer 1\nmodel.add(Dropout(0.3))\nmodel.add(Dense(10, activation = \"softmax\"))","b74acbc3":"optimizer = Adam(lr=0.001, beta_1 = 0.9, beta_2= 0.999)","4a030b08":"model.compile(optimizer = optimizer, loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","fb1c987a":"model.summary()","f7feb45b":"#data augmentation \ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.1,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 5%\n        width_shift_range=0.1,  # randomly shift images horizontally 5%\n        height_shift_range=0.1,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)\n\ndatagen.fit(X_train)    ","e125a781":"history = model.fit_generator(datagen.flow(X_train, Y_train, \n                                           batch_size = batch_size),\n                                           epochs = epochs, \n                                           validation_data = (X_val,Y_val),\n                             steps_per_epoch = X_train.shape[0] \/\/ batch_size)","b00b5d6e":"score = model.evaluate(X_test,Y_test,verbose = 0)\nprint(\"Test Loss : \",score[0])\nprint(\"Test Accuracy : \",score[1])","0ad0f773":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Validation Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","f260f35b":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","52f299fd":"import matplotlib.pyplot as plt\n%matplotlib inline\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","333ed5c2":"### Normalisation - Reshaping - Label Encoding \n- Normalisation\n    - If we don't do normalisation \u0131t may cause problems also CNN algorithm will be faster\n- Reshape\n    - When we want to use Keras we need to reshape our data as 3d (28x28x1)\n- Label Encoding\n   - We got 10 labels (0,1,2,.....,9)\n   - 2 >> [0,0,1,0,0,0,0,0,0,0] #Second index is 1 others 0\n   - 4 >> [0,0,0,0,1,0,0,0,0,0] #Fourth index is 1 others 0","48ff4532":"### Train and Test (Validation) Split \n- %10 Validation \n- %85 Train \n","c4f12839":"**Data Augmentation**\n- We use data augmentation to avoid overfitting to, we'll do some variations on the pics such as zoom in, rotation, flip ... to train our model more effectively","c5cae9f4":"**Compile Model**","89203334":"**Define Optimizer**\n- In this kernel we'll use ADAM optimizer to change learning rate automaticly \n- If our learning rate is so slow adam optimizer will increase it \n- Beside adam optimize it. ","cf7050c9":"## CNN Model \n<a href=\"https:\/\/ibb.co\/sKHpTLb\"><img src=\"https:\/\/i.ibb.co\/8rcnyFN\/gec2.jpg\" alt=\"9\" border=\"0\"><\/a>\n- **IMPLEMENTING WITH KERAS**\n\n    - Create Model >> Conv - Max Pooling - Dropout - Conv - Max Pool Dropout - Fully Connected\n    - Dropout is a technique where randomly selected neurons are ignored during training - We apply this technique to avoid overfitting","fc18f83b":"**Fitting the Model**\n- Let's train our model "}}