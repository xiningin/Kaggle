{"cell_type":{"2d8014fd":"code","819c80bd":"code","ae0366d1":"code","0b893983":"code","147aa156":"code","70ae11d6":"code","1c518105":"code","70bc06c4":"code","df7b8a63":"code","f421e47e":"code","15b85c0c":"code","13d1d9b2":"code","0e4f09a3":"code","760320f2":"code","89b2f53e":"code","3f41048f":"code","f2b1a4a0":"code","55d9076e":"code","3fa8460b":"code","dd2ff82e":"code","74d96bbc":"code","e179dcf9":"code","150338bd":"code","42371fe9":"code","1481b846":"code","d174659d":"code","6d1fd217":"code","69401f70":"code","8ba43aa7":"code","890b4edd":"code","9a47e27e":"code","b1455d33":"code","13ca7ee8":"code","dfee47dc":"code","332566eb":"code","d1f5d16d":"code","56c2d684":"code","9bcfccfa":"code","fda99ee1":"code","22cfd0f7":"code","79bfa13b":"code","0f87b503":"code","141be770":"code","10f1abad":"markdown","25328952":"markdown","cabff824":"markdown","6b9eb637":"markdown","5f1c9449":"markdown","a78276fb":"markdown"},"source":{"2d8014fd":"# Import the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport os\nimport time\nimport warnings\nimport os\nfrom six.moves import urllib\nimport matplotlib\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')","819c80bd":"#Add All the Models Libraries\n\n# Scalers\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.utils import shuffle\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\n\n# Models\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error\n\n#regression\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix\nfrom scipy.stats import reciprocal, uniform\n\n# Cross-validation\nfrom sklearn.model_selection import KFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nfrom sklearn.model_selection import cross_validate\n\n# GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\n#Common data processors\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.utils import check_array\nfrom scipy import sparse\n\n#Accuracy Score\nfrom sklearn.metrics import accuracy_score","ae0366d1":"# to make this notebook's output stable across runs\nnp.random.seed(123)\n\n# To plot pretty figures\n%matplotlib inline\nplt.rcParams['axes.labelsize'] = 14\nplt.rcParams['xtick.labelsize'] = 12\nplt.rcParams['ytick.labelsize'] = 12","0b893983":"#merge the data for feature engineering and later split it, just before applying Data Pipeline\nTrainFile = pd.read_csv(\"..\/input\/train.csv\") #read the data from the csv file.\nTestFile = pd.read_csv(\"..\/input\/test.csv\")","147aa156":"TrainFile.info()","70ae11d6":"TestFile.info()","1c518105":"TrainFile.describe()","70bc06c4":"TestFile.describe()","df7b8a63":"TrainFile.shape","f421e47e":"TestFile.shape","15b85c0c":"TrainFile.head(2)","13d1d9b2":"TestFile.head(2)","0e4f09a3":"DataFile = TrainFile.append(TestFile,sort=False)\nDataFile.reset_index(inplace=True)\nDataFile.drop('index',inplace=True,axis=1)","760320f2":"DataFile.shape","89b2f53e":"DataFile['date'] = DataFile.datetime.apply(lambda x: x.split()[0])\nDataFile['hour'] = DataFile.datetime.apply(lambda x: x.split()[1].split(\":\")[0]).astype(\"int\")\nDataFile['year']  = DataFile.datetime.apply(lambda x: x.split()[0].split(\"-\")[0])\nDataFile['month'] = DataFile.date.apply(lambda x: datetime.strptime(x,\"%Y-%m-%d\").month)\nDataFile['weekday'] = DataFile.date.apply(lambda x: datetime.strptime(x,\"%Y-%m-%d\").weekday())\nDataFile = DataFile.drop([\"datetime\", \"date\"],axis=1)","3f41048f":"DataFile[\"season\"] = DataFile.season.map({1: \"Spring\", 2 : \"Summer\", 3 : \"Fall\", 4 :\"Winter\" })","f2b1a4a0":"DataFile[\"weather\"] = DataFile.weather.map({1: \" Clear + Few clouds + Partly cloudy + Partly cloudy\",\\\n                                        2 : \" Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \", \\\n                                        3 : \" Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\", \\\n                                        4 :\" Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \" })","55d9076e":"categoryVariableList = [\"hour\",\"weekday\",\"month\",\"season\",\"weather\",\"holiday\",\"workingday\",\"year\"]\nfor var in categoryVariableList:\n    DataFile[var] = DataFile[var].astype(\"category\")","3fa8460b":"import seaborn as sn\n\ncorrelation_matrix = DataFile[:].corr()\nmask = np.array(correlation_matrix)\nmask[np.tril_indices_from(mask)] = False\nfigure = plt.gcf()\nfigure.set_size_inches(20,10)\nsn.heatmap(data=correlation_matrix, mask=mask, square=True, annot=True, cbar=True);","dd2ff82e":"#DROP the column atemp because of correlation.\nDataFile = DataFile.drop(labels='atemp', axis=1)","74d96bbc":"## Exploratory Outlier Analysis - Idea from https:\/\/www.kaggle.com\/viveksrinivasan\/eda-ensemble-model-top-10-percentile\nfig,axes = plt.subplots(nrows=2,ncols=2)\nfig.set_size_inches(20,15)\nsn.boxplot(data = DataFile, x='hour', y='count', orient = 'v', ax = axes[1][1])\nsn.boxplot(data = DataFile, x='humidity', y='count', orient = 'v', ax = axes[0][1])\nsn.boxplot(data = DataFile, x='windspeed',y='count', orient = 'v', ax = axes[1][0])\nsn.boxplot(data = DataFile, y='count', orient = 'v', ax = axes[0][0])\n\naxes[0][0].set(ylabel='count',title=\"Box Plot On Count\")\naxes[0][1].set(xlabel='humidity', ylabel='Count',title=\"Box Plot On Count for Humidity range\")\naxes[1][0].set(xlabel='windspeed', ylabel='Count',title=\"Box Plot On Count for different wind speeds\")\naxes[1][1].set(xlabel='workingday', ylabel='Count',title=\"Box Plot On Count Across Working Day\")","e179dcf9":"# Visualizations : Check the counts vs Season, Weather, Hour, Weekday - idea taken from https:\/\/www.kaggle.com\/viveksrinivasan\/eda-ensemble-model-top-10-percentile\nfig,(ax1,ax2,ax3)= plt.subplots(nrows=3)\nfig.set_size_inches(12, 30)\nsortOrder = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\nhueOrder = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\nhourAggregated = pd.DataFrame(DataFile.groupby([\"hour\",\"season\"],sort=True)[\"count\"].mean()).reset_index()\nsn.pointplot(x=hourAggregated[\"hour\"], y=hourAggregated[\"count\"],hue=hourAggregated[\"season\"], data=hourAggregated, join=True,ax=ax1)\nax1.set(xlabel='Hour Of The Day', ylabel='Users Count',title=\"Average Users Count By Hour Of The Day Across Season\",label='big')\n\nhourAggregated = pd.DataFrame(DataFile.groupby([\"hour\",\"weather\"],sort=True)[\"count\"].mean()).reset_index()\nsn.pointplot(x=hourAggregated[\"hour\"], y=hourAggregated[\"count\"],hue=hourAggregated[\"weather\"], data=hourAggregated, join=True,ax=ax2)\nax2.set(xlabel='Hour Of The Day', ylabel='Users Count',title=\"Average Users Count By Hour Of The Day Across Weather\",label='big')\n\nhourTransformed = pd.melt(DataFile[[\"hour\",\"casual\",\"registered\"]], id_vars=['hour'], value_vars=['casual', 'registered'])\nhourAggregated = pd.DataFrame(hourTransformed.groupby([\"hour\",\"variable\"],sort=True)[\"value\"].mean()).reset_index()\n\nsn.pointplot(x=hourAggregated[\"hour\"], y=hourAggregated[\"value\"],hue=hourAggregated[\"variable\"],hue_order=[\"casual\",\"registered\"], data=hourAggregated, join=True,ax=ax3)\nax3.set(xlabel='Hour Of The Day', ylabel='Users Count',title=\"Average Users Count By Hour Of The Day Across User Type\",label='big')","150338bd":"DataFile = DataFile.drop(['casual','registered'],axis=1)","42371fe9":"# Removing the potential outliers from the training set and maintain the test set\n\ntest_set = DataFile[~pd.notnull(DataFile['count'])]\ntrain_set = DataFile[np.abs(DataFile[\"count\"]-DataFile[\"count\"].mean())<=(3*DataFile[\"count\"].std())] \ntest_set = test_set.drop('count',axis = 1)","1481b846":"test_set.shape","d174659d":"train_set.shape","6d1fd217":"#Check for the missing values to check if any random extraction happened? Validate that shuffle was false\n\nobs = train_set.isnull().sum().sort_values(ascending = False)\npercent = round(train_set.isnull().sum().sort_values(ascending = False)\/len(train_set)*100, 2)\npd.concat([obs, percent], axis = 1,keys= ['Number of Observations', 'Percent'])","69401f70":"#Check for the missing values in test data\nobs = test_set.isnull().sum().sort_values(ascending = False)\npercent = round(test_set.isnull().sum().sort_values(ascending = False)\/len(test_set)*100, 2)\npd.concat([obs, percent], axis = 1,keys= ['Number of Observations', 'Percent'])","8ba43aa7":"# The CategoricalEncoder class will allow us to convert categorical attributes to one-hot vectors.\n\nclass CategoricalEncoder(BaseEstimator, TransformerMixin):\n    def __init__(self, encoding='onehot', categories='auto', dtype=np.float64,\n                 handle_unknown='error'):\n        self.encoding = encoding\n        self.categories = categories\n        self.dtype = dtype\n        self.handle_unknown = handle_unknown\n\n    def fit(self, X, y=None):\n        \"\"\"Fit the CategoricalEncoder to X.\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_feature]\n            The data to determine the categories of each feature.\n        Returns\n        -------\n        self\n        \"\"\"\n\n        if self.encoding not in ['onehot', 'onehot-dense', 'ordinal']:\n            template = (\"encoding should be either 'onehot', 'onehot-dense' \"\n                        \"or 'ordinal', got %s\")\n            raise ValueError(template % self.handle_unknown)\n\n        if self.handle_unknown not in ['error', 'ignore']:\n            template = (\"handle_unknown should be either 'error' or \"\n                        \"'ignore', got %s\")\n            raise ValueError(template % self.handle_unknown)\n\n        if self.encoding == 'ordinal' and self.handle_unknown == 'ignore':\n            raise ValueError(\"handle_unknown='ignore' is not supported for\"\n                             \" encoding='ordinal'\")\n\n        X = check_array(X, dtype=np.object, accept_sparse='csc', copy=True)\n        n_samples, n_features = X.shape\n\n        self._label_encoders_ = [LabelEncoder() for _ in range(n_features)]\n\n        for i in range(n_features):\n            le = self._label_encoders_[i]\n            Xi = X[:, i]\n            if self.categories == 'auto':\n                le.fit(Xi)\n            else:\n                valid_mask = np.in1d(Xi, self.categories[i])\n                if not np.all(valid_mask):\n                    if self.handle_unknown == 'error':\n                        diff = np.unique(Xi[~valid_mask])\n                        msg = (\"Found unknown categories {0} in column {1}\"\n                               \" during fit\".format(diff, i))\n                        raise ValueError(msg)\n                le.classes_ = np.array(np.sort(self.categories[i]))\n\n        self.categories_ = [le.classes_ for le in self._label_encoders_]\n\n        return self\n\n    def transform(self, X):\n        \"\"\"Transform X using one-hot encoding.\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_features]\n            The data to encode.\n        Returns\n        -------\n        X_out : sparse matrix or a 2-d array\n            Transformed input.\n        \"\"\"\n        X = check_array(X, accept_sparse='csc', dtype=np.object, copy=True)\n        n_samples, n_features = X.shape\n        X_int = np.zeros_like(X, dtype=np.int)\n        X_mask = np.ones_like(X, dtype=np.bool)\n\n        for i in range(n_features):\n            valid_mask = np.in1d(X[:, i], self.categories_[i])\n\n            if not np.all(valid_mask):\n                if self.handle_unknown == 'error':\n                    diff = np.unique(X[~valid_mask, i])\n                    msg = (\"Found unknown categories {0} in column {1}\"\n                           \" during transform\".format(diff, i))\n                    raise ValueError(msg)\n                else:\n                    # Set the problematic rows to an acceptable value and\n                    # continue `The rows are marked `X_mask` and will be\n                    # removed later.\n                    X_mask[:, i] = valid_mask\n                    X[:, i][~valid_mask] = self.categories_[i][0]\n            X_int[:, i] = self._label_encoders_[i].transform(X[:, i])\n\n        if self.encoding == 'ordinal':\n            return X_int.astype(self.dtype, copy=False)\n\n        mask = X_mask.ravel()\n        n_values = [cats.shape[0] for cats in self.categories_]\n        n_values = np.array([0] + n_values)\n        indices = np.cumsum(n_values)\n\n        column_indices = (X_int + indices[:-1]).ravel()[mask]\n        row_indices = np.repeat(np.arange(n_samples, dtype=np.int32),\n                                n_features)[mask]\n        data = np.ones(n_samples * n_features)[mask]\n\n        out = sparse.csc_matrix((data, (row_indices, column_indices)),\n                                shape=(n_samples, indices[-1]),\n                                dtype=self.dtype).tocsr()\n        if self.encoding == 'onehot-dense':\n            return out.toarray()\n        else:\n            return out","890b4edd":"class DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names]","9a47e27e":"# Now define x and y.\n\n#the Y Variable\ntrain_set_y = train_set[\"count\"].copy()\ntrain_set_y = train_set_y.astype(int)\n\n# Need to reshape y to apply standard scaler.\n\n#the X variables\ntrain_set_X = train_set.drop(\"count\", axis=1)","b1455d33":"cat_pipeline = Pipeline([\n        (\"selector\", DataFrameSelector(['season','weather'])),\n        (\"cat_encoder\", CategoricalEncoder(encoding='onehot-dense')),\n    ])\n\nnum_pipeline = Pipeline([\n        (\"selector\", DataFrameSelector([\"temp\",\"humidity\",\"windspeed\"])),\n        ('scaler', MinMaxScaler())\n    ])\nno_pipeline = Pipeline([\n        (\"selector\", DataFrameSelector(['holiday','workingday','hour','year','month','weekday']))\n    \n])","13ca7ee8":"full_pipeline = FeatureUnion(transformer_list=[\n    (\"cat_pipeline\", cat_pipeline),\n    (\"num_pipeline\",num_pipeline),\n    (\"no_pipeline\", no_pipeline)\n    ])\n\nfinal_train_X = full_pipeline.fit_transform(train_set_X)\nfinal_test_X = full_pipeline.transform(test_set)\nfinal_train_y = np.log1p(train_set_y)","dfee47dc":"#pd.DataFrame(final_train_y).to_csv(\"test.csv\")\n#final_train_y","332566eb":"#Random Forest Regressor.\nforest_class = RandomForestRegressor(random_state = 42)\n\nn_estimators = [500]\nmax_features = [\"auto\",'sqrt','log2']\n\nparam_grid_forest = {'n_estimators' : n_estimators, 'max_features' : max_features}\n\n\nrand_search_forest = GridSearchCV(forest_class, param_grid_forest, cv = 4, \n                                        scoring='neg_mean_squared_log_error', refit = True, n_jobs = -1, verbose=2)\n\nrand_search_forest.fit(final_train_X, final_train_y)","d1f5d16d":"random_estimator = rand_search_forest.best_estimator_\n\ny_pred_rf= random_estimator.predict(final_train_X)\nrf_msle = mean_squared_error(final_train_y, y_pred_rf)\nrf_rmsle = np.sqrt(rf_msle)\nrf_rmsle","56c2d684":"#ADA Regressor\n\nada_boost = AdaBoostRegressor(random_state = 42)\n\nn_estimators = [500]\n\nparam_grid_ada = {'n_estimators' : n_estimators}\n\nrand_search_ada = GridSearchCV(ada_boost, param_grid_ada, cv = 4, scoring='neg_mean_squared_log_error', refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_ada.fit(final_train_X, final_train_y)","9bcfccfa":"ada_estimator = rand_search_ada.best_estimator_\n\ny_pred_ada= ada_estimator.predict(final_train_X)\nada_msle = mean_squared_error(final_train_y, y_pred_ada)\nada_rmsle = np.sqrt(ada_msle)\nada_rmsle","fda99ee1":"#Implement SVR\n\nSVR_Reg = SVR()\n\nSVR_Reg.fit(final_train_X, final_train_y)","22cfd0f7":"y_pred_svr= SVR_Reg.predict(final_train_X)\nsvr_msle = mean_squared_error(final_train_y, y_pred_svr)\nsvr_rmsle = np.sqrt(svr_msle)\nsvr_rmsle","79bfa13b":"GB_Classifier = GradientBoostingRegressor(random_state = 42)\n\nn_estimators = [50,500]\n\nparam_grid_grad_boost_class = {'n_estimators' : n_estimators}\n\nrand_search_grad_boost_class = GridSearchCV(GB_Classifier, param_grid_grad_boost_class, cv = 4, scoring='neg_mean_squared_log_error', \n                               refit = True, n_jobs = -1, verbose = 2)\n\nrand_search_grad_boost_class.fit(final_train_X, final_train_y)","0f87b503":"y_pred_gb= rand_search_grad_boost_class.predict(final_train_X)\ngb_msle = mean_squared_error(final_train_y, y_pred_gb)\ngb_rmsle = np.sqrt(gb_msle)\ngb_rmsle","141be770":"pred=random_estimator.predict(final_test_X)\nd={'datetime':TestFile['datetime'],'count':np.exp(pred)}\nans=pd.DataFrame(d)\nans.to_csv('answer.csv',index=False) ","10f1abad":"Convert Season and Weather into Categorical Values","25328952":"Random Forest gives the best prediction","cabff824":"One Hot Encoding","6b9eb637":"I have taken some references Vivek Srinivasan EDA & Ensemble Model (Top 10 Percentile) to build this kernel","5f1c9449":"Now We Build the Models","a78276fb":"Create New Columns from DataTime Column"}}