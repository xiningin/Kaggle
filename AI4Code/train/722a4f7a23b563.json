{"cell_type":{"b720745f":"code","d05c9e89":"code","0063f597":"code","8fe00ce2":"code","6ff972b7":"code","5db5f61e":"code","fd855b08":"code","4986845e":"code","2db67cd9":"code","12203d6f":"code","9cdbcf55":"code","9bc73115":"code","c597a12e":"code","b49a63f6":"code","eccd6556":"code","a08c3883":"code","b1fcc827":"code","10dc71bb":"code","291253a3":"code","d084b1f6":"code","ff48a3cf":"code","5bd98a8c":"code","e55e1d72":"code","4372b6fd":"markdown","3701d8e4":"markdown","4ec5b3ab":"markdown","54a06218":"markdown"},"source":{"b720745f":" import tensorflow.compat.v1 as tf","d05c9e89":"import json\nimport math\nimport os\n\nimport cv2\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\n\nfrom tqdm import tqdm\nimport keras\nfrom keras.datasets import mnist\n\nimport datetime\n\n%matplotlib inline\n\nBATCH_SIZE = 32\nIMG_SIZE = 224","0063f597":"np.random.seed(2019)\ntf.set_random_seed(2019)","8fe00ce2":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\nprint(train_df.shape)\ntrain_df.head()","6ff972b7":"train_df['diagnosis'].hist()\ntrain_df['diagnosis'].value_counts()","5db5f61e":"def display_samples(df, columns=4, rows=3):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'id_code']\n        image_id = df.loc[i,'diagnosis']\n        img = cv2.imread(f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_path}.png')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.imshow(img)\n    \n    plt.tight_layout()\n\ndisplay_samples(train_df)","fd855b08":"def get_pad_width(im, new_shape, is_rgb=True):\n    pad_diff = new_shape - im.shape[0], new_shape - im.shape[1]\n    t, b = math.floor(pad_diff[0]\/2), math.ceil(pad_diff[0]\/2)\n    l, r = math.floor(pad_diff[1]\/2), math.ceil(pad_diff[1]\/2)\n    if is_rgb:\n        pad_width = ((t,b), (l,r), (0, 0))\n    else:\n        pad_width = ((t,b), (l,r))\n    return pad_width\n\ndef preprocess_image(image_path, desired_size=IMG_SIZE):\n    im = Image.open(image_path)\n    im = im.resize((desired_size, )*2, resample=Image.LANCZOS)\n    \n    return im\n\n\n\n\nN = train_df.shape[0]\nx_train = np.empty((N, IMG_SIZE, IMG_SIZE, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(train_df['id_code'])):\n    x_train[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_id}.png'\n    )","4986845e":"y_train = pd.get_dummies(train_df['diagnosis']).values\n#one hot encode\n\nprint(x_train.shape)\nprint(y_train.shape)","2db67cd9":"y_train_multi = np.empty(y_train.shape, dtype=y_train.dtype)\ny_train_multi[:, 4] = y_train[:, 4]\n\nfor i in range(3, -1, -1):\n    y_train_multi[:, i] = np.logical_or(y_train[:, i], y_train_multi[:, i+1])\n\nprint(\"Original y_train:\", y_train.sum(axis=0))\nprint(\"Multilabel version:\", y_train_multi.sum(axis=0))","12203d6f":"x_train_val, x_test, y_train_val, y_test = train_test_split(\n    x_train, y_train_multi, \n    test_size=0.1, \n    random_state=2019\n)\nx_train, x_val, y_train, y_val = train_test_split(\n    x_train_val, y_train_val, \n    test_size=0.1, \n    random_state=2019\n)\nprint(\"shape of train images is :\",x_train.shape)\nprint(\"shape of test images is :\",x_test.shape)\nprint(\"shape of valid images is :\",x_val.shape)\nprint(\"shape of train labels is :\",y_train.shape)\nprint(\"shape of test labels is :\",y_test.shape)\nprint(\"shape of valid labels is :\",y_val.shape)","9cdbcf55":"\n\ndef create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.15,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images\n    )\n\n# Using original generator\ndata_generator = create_datagen().flow(x_train, y_train, batch_size=BATCH_SIZE, seed=2019)","9bc73115":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_kappas = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_val = y_val.sum(axis=1) - 1\n        \n        y_pred = self.model.predict(X_val) > 0.5\n        y_pred = y_pred.astype(int).sum(axis=1) - 1\n\n        _val_kappa = cohen_kappa_score(\n            y_val,\n            y_pred, \n            weights='quadratic'\n        )\n\n        self.val_kappas.append(_val_kappa)\n\n        print(f\"val_kappa: {_val_kappa:.4f}\")\n        \n        if _val_kappa == max(self.val_kappas):\n            print(\"Validation Kappa has improved. Saving model.\")\n            self.model.save('model.h5')\n\n        return","c597a12e":"!pip install keras_efficientnets\n#!pip install -U efficientnet","b49a63f6":"#import efficientnet.keras as efn \nfrom keras_efficientnets import *\neffnet = EfficientNetB4(\n         weights=None,\n         include_top=False,\n         input_shape=(IMG_SIZE,IMG_SIZE,3)\n)\n","eccd6556":"def build_model():\n    model = Sequential()\n    model.add(effnet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(5, activation='sigmoid'))\n    \n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=0.00005),\n        metrics=['accuracy']\n    )\n    \n    return model","a08c3883":"\nmodel = build_model()\nmodel.summary()","b1fcc827":"def subtime(date1, date2):\n    date1 = datetime.datetime.strptime(date1, \"%Y-%m-%d %H:%M:%S\")\n    date2 = datetime.datetime.strptime(date2, \"%Y-%m-%d %H:%M:%S\")\n    return date2 - date1\n\n\n\nstartdate = datetime.datetime.now() \nstartdate = startdate.strftime(\"%Y-%m-%d %H:%M:%S\") ","10dc71bb":"from keras.callbacks import Callback, ModelCheckpoint,EarlyStopping\nkappa_metrics = Metrics()\nest=EarlyStopping(monitor='val_loss',patience=5, min_delta=0.005)\ncall_backs=[est,kappa_metrics]\n\nhistory = model.fit_generator(\n    data_generator,\n    steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n    validation_data=(x_val,y_val),\n     epochs=15,\n    callbacks=call_backs)","291253a3":"enddate = datetime.datetime.now() \nenddate = enddate.strftime(\"%Y-%m-%d %H:%M:%S\") \n\nprint('start date ',startdate)\nprint('end date ',enddate)\nprint('Time ',subtime(startdate,enddate)) ","d084b1f6":"import numpy\nclass MyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, numpy.integer):\n            return int(obj)\n        elif isinstance(obj, numpy.floating):\n            return float(obj)\n        elif isinstance(obj, numpy.ndarray):\n            return obj.tolist()\n        else:\n            return super(MyEncoder, self).default(obj)\n\nwith open('history.json', 'w') as f:\n    json.dump(history.history, f,cls=MyEncoder)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['accuracy', 'val_accuracy']].plot()","ff48a3cf":"plt.plot(kappa_metrics.val_kappas)","5bd98a8c":"model.load_weights('model.h5')\nresults = model.evaluate(x_test,  y_test, verbose=0)\n\nprint(\"test loss:\",results[0])\nprint(\"test accuracy:\",results[1])","e55e1d72":"def get_preds_and_labels(model):\n    preds = []\n    labels = []\n   \n    preds.append(model.predict(x_test))\n    labels.append(y_test)\n   \n    return np.concatenate(preds).ravel(), np.concatenate(labels).ravel()\ntest_kappas = []\ny_pred, labels = get_preds_and_labels(model)\ny_pred = np.rint(y_pred).astype(np.uint8).clip(0, 4)\n_test_kappa = cohen_kappa_score(labels, y_pred, weights='quadratic')\ntest_kappas.append(_test_kappa)\nprint(f\"test_kappa: {round(_test_kappa, 4)}\")","4372b6fd":"resize image","3701d8e4":"training","4ec5b3ab":"kappa","54a06218":"model effientnet"}}