{"cell_type":{"45b2d34e":"code","953257e8":"code","b7a364de":"code","9e78f8e4":"code","21008672":"code","92e7c041":"code","2eda4be1":"code","060fc609":"code","fb391f76":"code","10aec703":"code","94ceea8c":"code","925a7337":"code","f072fc9d":"code","f81576ab":"code","51d928e1":"code","5cff7423":"code","e209251a":"code","6edab886":"code","f54e5367":"code","3b60cae6":"code","f797a87a":"code","10908d61":"code","76877af5":"code","0f1dc09f":"code","2b574a1a":"code","91274624":"code","07138891":"code","48b77b4d":"code","05778d93":"code","ad379580":"code","c558d93e":"code","08eca3fd":"code","7053a61f":"code","b28dd1b8":"code","6d8734ad":"code","2b7c9424":"code","423f34ec":"code","fc125028":"code","d569733a":"code","534c101b":"code","4ff8922d":"code","311657b2":"code","9d05ccb4":"code","6ab123ca":"code","0b12e80a":"code","7e588506":"code","71f50a61":"code","4e2c186f":"code","3fc256c4":"code","b053413f":"code","08039b07":"code","b6c3f6f3":"code","9b824f85":"code","2ff0ec96":"code","3441670f":"code","7fb4818b":"code","52235079":"code","55f9002c":"code","622ddfd5":"code","37bb1ed6":"code","8b5703d5":"code","fa792d82":"code","02a91b58":"code","fbe67f10":"code","d522f398":"code","321caebb":"code","2a119a06":"code","4516b7af":"code","6fbc42d1":"code","f69bba86":"code","3cfd6320":"code","af3e4c46":"code","8e23470f":"code","4b13f168":"code","66d24065":"code","9a2612fd":"code","1b8aaa56":"code","6224d199":"code","920d95e0":"code","ed2332c0":"code","31f4c660":"code","a16b1e52":"code","6432fa8b":"code","5eebb352":"code","655c99a2":"code","7f886eb5":"code","4d3e815f":"code","5e463f46":"code","be674eca":"code","8859f248":"code","991a88c8":"code","7b8ceacf":"code","e35b591b":"code","2063e1b2":"code","20d85b4a":"code","273d86b1":"code","bf893951":"code","3835a943":"code","ceb0e769":"code","1e7739f1":"code","4882b056":"code","fd6bd577":"code","76c7bbf3":"code","298ca866":"code","68227d83":"code","816e569d":"code","266ea6c1":"code","d4c9c589":"code","99f4607c":"code","58f8077a":"code","25400f26":"code","d35d0925":"code","76a4d5b3":"code","abc8510b":"code","1e8f92f3":"code","767bc25a":"code","fda4acc2":"code","65da101d":"code","c932a606":"code","da78089f":"code","9cc8c9d7":"code","51b16f95":"code","0ee07e3c":"code","5ab9e17b":"code","b1e0688d":"code","847b12e9":"code","ebbe7b37":"code","1cd631a9":"code","02e4025f":"code","b048d00c":"markdown","86ae73f4":"markdown","632f069d":"markdown","71583876":"markdown","33e96391":"markdown","a6d6ea20":"markdown","2f2612f7":"markdown","5e4de226":"markdown","bc86de17":"markdown","a553a9f5":"markdown","796c9fc7":"markdown","88841d8a":"markdown","8c21f8bb":"markdown","798b581c":"markdown","27841a95":"markdown","46f1054e":"markdown","5ad56773":"markdown","7e0faea3":"markdown","72bb444a":"markdown","0a610ece":"markdown","cf5a4bda":"markdown","d0810b37":"markdown","ae310c50":"markdown","44da0789":"markdown","192c1c6b":"markdown","284b63ff":"markdown","2247b0e8":"markdown","4eeed0ec":"markdown","52915a96":"markdown","5dc1bb55":"markdown","1b951fa2":"markdown","c4e90b13":"markdown","84d0f64f":"markdown","b96cbf7c":"markdown","2c643b10":"markdown","0d06bb97":"markdown","be333877":"markdown","79657723":"markdown","1eab5ae4":"markdown","10d71fe0":"markdown","1d1656be":"markdown","496983f7":"markdown","f6b1aec3":"markdown","abdc40c5":"markdown","ade7b048":"markdown","064b675a":"markdown","21bc024c":"markdown","7773ea11":"markdown","688227a7":"markdown","d56fd170":"markdown","79f777ae":"markdown","847dc1a7":"markdown","5411f001":"markdown","ec540997":"markdown","f2345c7f":"markdown","b79c0e2d":"markdown","e37a1f7f":"markdown","02e883e6":"markdown","b8ded1a4":"markdown","0a5d20b2":"markdown","99bc6a37":"markdown","20ceb1d6":"markdown","972116a4":"markdown","7241db04":"markdown"},"source":{"45b2d34e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","953257e8":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","b7a364de":"import warnings\nwarnings.filterwarnings('ignore')","9e78f8e4":"matplotlib.rcParams.update({'font.size': 14})","21008672":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","92e7c041":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","2eda4be1":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.tail()","060fc609":"train_df.dtypes","fb391f76":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","10aec703":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', test_df.shape[0])","94ceea8c":"train_df.shape[1] - 1 == test_df.shape[1]","925a7337":"train_df.dtypes","f072fc9d":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['Id'].dtype","f81576ab":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","51d928e1":"train_df.describe()","5cff7423":"train_df.select_dtypes(include='object').columns.tolist()","e209251a":"train_df['Ecology_2'].value_counts()","6edab886":"train_df['Ecology_3'].value_counts()","f54e5367":"train_df['Shops_2'].value_counts()","3b60cae6":"train_df['Rooms'].value_counts()","f797a87a":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","10908d61":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\ntrain_df.loc[train_df['Rooms'] >= 6, 'Rooms'] = train_df['Rooms'].median()\ntrain_df['Rooms'].value_counts()","76877af5":"train_df['cost_sq_meter'] = train_df['Price'] \/ train_df['Square']\ntrain_df","0f1dc09f":"train_df['cost_sq_meter'].describe()","2b574a1a":"train_df.loc[(train_df['Square'] < 20) & (train_df['Square'] >= 10), 'cost_sq_meter'].describe()","91274624":"train_df.loc[(train_df['Square'] < 10), 'cost_sq_meter'].describe()","07138891":"condition = (train_df['Square'].isna()) \\\n             | (train_df['Square'] < 10)\n        \ntrain_df.loc[condition, 'Square'] = train_df['Square'].median()","48b77b4d":"train_df['Square'].quantile(.995)","05778d93":"train_df.loc[train_df['Square'] > 130, 'cost_sq_meter'].describe()","ad379580":"train_df.loc[(train_df['Square'] > 133) & (train_df['cost_sq_meter'] < 1000)]","c558d93e":"train_df.loc[(train_df['cost_sq_meter'] < 1000), 'Square'] = train_df['Square'].median()","08eca3fd":"train_df['cost_sq_meter'] = train_df['Price'] \/ train_df['Square']","7053a61f":"train_df['cost_sq_meter'].describe()","b28dd1b8":"plt.figure(figsize = (16, 8))\n\ntrain_df['cost_sq_meter'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('cost_sq_meter')\n\nplt.title('Target distribution')\nplt.show()","6d8734ad":"train_df['LifeSquare_nan'] = 0\ntrain_df.loc[train_df['LifeSquare'].isna(), 'LifeSquare_nan'] = 1\ntrain_df['LifeSquare_nan'].value_counts()","2b7c9424":"train_df['share_of_livingSpace_in_total'] = 0\ntrain_df.loc[train_df['LifeSquare'].notnull(), 'share_of_livingSpace_in_total'] = train_df['LifeSquare'] \/ train_df['Square']\ntrain_df.loc[train_df['LifeSquare'].notnull()].head()","423f34ec":"mean_share_of_living = train_df.loc[train_df['LifeSquare'].notnull(), 'share_of_livingSpace_in_total'].mean()\nmean_share_of_living","fc125028":"train_df.loc[train_df['LifeSquare_nan'] == 1, 'share_of_livingSpace_in_total'] = mean_share_of_living","d569733a":"train_df['LifeSquare'] = train_df['LifeSquare'].fillna(mean_share_of_living * train_df['Square'])","534c101b":"train_df","4ff8922d":"train_df['KitchenSquare'].value_counts()","311657b2":"train_df['KitchenSquare'].quantile(.975), train_df['KitchenSquare'].quantile(.025)","9d05ccb4":"train_df['KitchenSquare'].describe()","6ab123ca":"train_df.loc[train_df['KitchenSquare'] == 6]","0b12e80a":"mean_share_of_Kitchen = (train_df.loc[train_df['KitchenSquare'] == train_df['KitchenSquare'].quantile(.5), 'KitchenSquare']\\\n                         \/ train_df.loc[train_df['KitchenSquare'] == train_df['KitchenSquare'].quantile(.5), 'Square']).mean()\nmean_share_of_Kitchen","7e588506":"condition = (train_df['KitchenSquare'].isna()) \\\n             | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.975))\n        \ntrain_df.loc[condition, 'KitchenSquare'] = (mean_share_of_Kitchen * train_df['Square']).round(0) # train_df['KitchenSquare'].median() \ntrain_df.loc[train_df['KitchenSquare'] < 3, 'KitchenSquare'] = (mean_share_of_Kitchen * train_df['Square']).round(0)","71f50a61":"train_df['KitchenSquare'].value_counts()","4e2c186f":"train_df.loc[(train_df['KitchenSquare'] == 37) | (train_df['KitchenSquare'] == 21) | (train_df['KitchenSquare'] == 29)]","3fc256c4":"train_df['share_of_Kitchen_in_total'] = 0","b053413f":"train_df['share_of_Kitchen_in_total'] = train_df['KitchenSquare'] \/ train_df['Square']","08039b07":"train_df.head()","b6c3f6f3":"train_df['HouseFloor'].sort_values().unique()","9b824f85":"train_df['Floor'].sort_values().unique()","2ff0ec96":"(train_df['Floor'] > train_df['HouseFloor']).sum()","3441670f":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","7fb4818b":"floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","52235079":"train_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","55f9002c":"train_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor']\\\n                                                .apply(lambda x: random.randint(1, x))","622ddfd5":"(train_df['Floor'] > train_df['HouseFloor']).sum()","37bb1ed6":"train_df['HouseYear'].sort_values(ascending=False)","8b5703d5":"train_df.loc[train_df['HouseYear'] > 2020, 'HouseYear'] = 2020","fa792d82":"train_df.isna().sum()","02a91b58":"train_df['Healthcare_1'].describe()","fbe67f10":"tmp = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Healthcare_1':'median'})\\\n                            .rename(columns={'Healthcare_1':'Health1ByDistrictRooms'})\ntmp","d522f398":"train_df = train_df.merge(tmp, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","321caebb":"train_df.loc[train_df['Health1ByDistrictRooms'].isna(), 'Health1ByDistrictRooms'] = train_df['Health1ByDistrictRooms'].median()","2a119a06":"train_df.loc[train_df['DistrictId'] == 0, 'Rooms']","4516b7af":"train_df.isna().sum()","6fbc42d1":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        \n        self.medians = None\n        self.kitchen_square_quantile = None\n        self.mean_share_of_kitchen = None\n        self.mean_share_of_living = None\n        self.med_health1_by_district = None\n        self.med_health1_by_district_median  = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d \u0438 \u0434\u043e\u043b\u0435\u0439\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        self.mean_share_of_kitchen = (X.loc[X['KitchenSquare'] == X['KitchenSquare'].quantile(.5), 'KitchenSquare']\\\n                         \/ X.loc[X['KitchenSquare'] == X['KitchenSquare'].quantile(.5), 'Square']).mean()\n        self.mean_share_of_living = X['LifeSquare'].quantile(.5) \/ X['Square'].quantile(.5) \n        self.med_health1_by_district = X.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Healthcare_1':'median'})\\\n                            .rename(columns={'Healthcare_1':'Health1ByDistrictRooms'})\n        self.med_square_by_rooms = (X_train['Square'] \/ X_train['Rooms']).quantile(.5)\n        self.med_health1_by_district_median = self.med_health1_by_district['Health1ByDistrictRooms'].median()\n        \n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        \n        # Square\n        conditionSquare = (X['Square'].isna()) | (X['Square'] < 10)\\\n                                               | ((X_train['Square'] \/ X_train['Rooms']) > (X_train['Square'] \/ X_train['Rooms']).quantile(.999))\n        \n        X.loc[conditionSquare, 'Square'] = self.medians['Square']\n\n        X['Square'].fillna(self.medians['Square'], inplace=True)\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        \n        # KitchenSquare\n        conditionKitchen = (X['KitchenSquare'].isna()) | (X['KitchenSquare'] < 3) \\\n                    | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[conditionKitchen, 'KitchenSquare'] = (self.mean_share_of_kitchen * X['Square']).round(0) \n        self.mean_share_of_kitchen = (X.loc[X['KitchenSquare'] == X['KitchenSquare'].quantile(.5), 'KitchenSquare']\\\n                         \/ X.loc[X['KitchenSquare'] == X['KitchenSquare'].quantile(.5), 'Square']).mean()\n        \n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n                                            .apply(lambda x: random.randint(1, x))\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Healthcare_1\n        if self.med_health1_by_district is not None:\n            X = X.merge(self.med_health1_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['Health1ByDistrictRooms'].fillna(self.med_health1_by_district_median, inplace=True)\n            if 'Healthcare_1' in X.columns:\n                X.drop('Healthcare_1', axis=1, inplace=True)\n        \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        \n        conditionLifeSquare = (X['LifeSquare'] >= X['Square']) | ((X['LifeSquare'] \/ X['Square']) < 0.35 ) \n        X.loc[conditionLifeSquare, 'LifeSquare'] = self.mean_share_of_living * X['Square']\n        X['LifeSquare'] = X['LifeSquare'].fillna(self.mean_share_of_living * X['Square'])\n        self.mean_share_of_living = X['LifeSquare'].quantile(.5) \/ X['Square'].quantile(.5) \n        \n        # X['share_of_livingSpace_in_total'] = 0 - \u0432\u0432\u0435\u0434\u0451\u043c \u043d\u0438\u0436\u0435 \u0433\u0434\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0438\u0447\u0438\n        # X.loc[X['LifeSquare'].notnull(), 'share_of_livingSpace_in_total'] = X['LifeSquare'] \/ X['Square']\n        # mean_share_of_living = X.loc[X['LifeSquare'].notnull(), 'share_of_livingSpace_in_total'].mean()\n        \n        \n        # share_of_Kitchen\n        X['ShareOfKitchen'] = X['KitchenSquare'] \/ X['Square']\n        \n        # share_of_living\n        X['ShareOfLiving'] = X['LifeSquare'] \/ X['Square']\n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","f69bba86":"binary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","3cfd6320":"district_size = train_df['DistrictId'].value_counts().reset_index()\\\n                    .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head()","af3e4c46":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","8e23470f":"(train_df['DistrictSize'] > 100).value_counts()","4b13f168":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","66d24065":"train_df","9a2612fd":"med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'MedPriceByDistrict'})\n\nmed_price_by_district.head()","1b8aaa56":"med_price_by_district.shape","6224d199":"train_df = train_df.merge(med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","920d95e0":"med_cost_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'cost_sq_meter':'median'})\\\n                            .rename(columns={'cost_sq_meter':'MedCostSqByDistrict'})\n\nmed_cost_by_district.head()","ed2332c0":"med_cost_by_district.shape","31f4c660":"train_df = train_df.merge(med_cost_by_district, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head()","a16b1e52":"med_cost_sq_by_floorrooms = train_df.groupby(['Floor', 'Rooms'], as_index=False).agg({'cost_sq_meter':'median'})\\\n                            .rename(columns={'cost_sq_meter':'MedCostSqByFloorRooms'})\n\nmed_cost_sq_by_floorrooms.head()","6432fa8b":"med_cost_sq_by_floorrooms.shape","5eebb352":"train_df = train_df.merge(med_cost_sq_by_floorrooms, on=['Floor', 'Rooms'], how='left')\ntrain_df.head()","655c99a2":"med_cost_sq_by_houseyearrooms = train_df.groupby(['HouseYear', 'Rooms'], as_index=False).agg({'cost_sq_meter':'median'})\\\n                            .rename(columns={'cost_sq_meter':'MedCostSqByHouseYearRooms'})\n\nmed_cost_sq_by_houseyearrooms.head()","7f886eb5":"med_cost_sq_by_houseyearrooms.shape","4d3e815f":"train_df = train_df.merge(med_cost_sq_by_houseyearrooms, on=['HouseYear', 'Rooms'], how='left')\ntrain_df.head()","5e463f46":"def floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    X.loc[X['Floor'] <= 3, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n    X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n    X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n    return X\n\n\ndef floor_to_cat_pandas(X):\n    bins = [0, 3, 5, 9, 15, X['Floor'].max()]\n    X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n    \n    X['floor_cat'].fillna(-1, inplace=True)\n    return X\n\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1941, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X\n\n\ndef year_to_cat_pandas(X):\n    bins = [0, 1941, 1945, 1980, 2000, 2010, X['HouseYear'].max()]\n    X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n    X['year_cat'].fillna(-1, inplace=True)\n    return X","be674eca":"bins = [0, 3, 5, 9, 15, train_df['Floor'].max()]\npd.cut(train_df['Floor'], bins=bins, labels=False)","8859f248":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","991a88c8":"med_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\nmed_price_by_floor_year.head()","7b8ceacf":"train_df = train_df.merge(med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head()","e35b591b":"train_df.columns.tolist()","2063e1b2":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3', \n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'Health1ByDistrictRooms', 'LifeSquare_nan', 'ShareOfKitchen',  \n                     'ShareOfLiving', 'DistrictSize', 'new_district', 'IsDistrictLarge', 'MedPriceByFloorYear', \n                     'MedCostSqByFloorRooms', 'MedCostSqByYearRooms', 'MedCostSqByDistrictRooms']\n\ntarget_name = 'Price'","20d85b4a":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","273d86b1":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","bf893951":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None  # 623 \n        self.med_price_by_floor_year = None  # 26\n        self.med_cost_sq_by_floor_room = None  # 110\n        self.med_cost_sq_by_year_room = None   # 302\n        self.med_cost_sq_by_floor_room_median = None\n        self.med_cost_sq_by_year_room_median = None\n        self.med_cost_sq_by_district_room = None  # 623\n        self.med_cost_sq_by_district_room_median = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        self.cost_sq_meter = None  # 6700\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## cost per square meter\n        if y is not None:\n            df['Price'] = y.values\n            df['CostSquareMeter'] = df['Price'] \/ df['Square']\n            self.cost_sq_meter = df['Price'] \/ df['Square']\n        \n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'CostSquareMeter':'median'}).\\\n                                            rename(columns={'CostSquareMeter':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n        ## floor, room\n        if y is not None:\n            self.med_cost_sq_by_floor_room = df.groupby(['Floor', 'Rooms'], as_index=False).agg({'CostSquareMeter':'median'})\\\n                                            .rename(columns={'CostSquareMeter':'MedCostSqByFloorRooms'})\n            \n            self.med_cost_sq_by_floor_room_median = self.med_cost_sq_by_floor_room['MedCostSqByFloorRooms'].median()\n        \n        ## year, room\n        if y is not None:\n            self.med_cost_sq_by_year_room = df.groupby(['HouseYear', 'Rooms'], as_index=False).agg({'CostSquareMeter':'median'})\\\n                                            .rename(columns={'CostSquareMeter':'MedCostSqByYearRooms'})\n            \n            self.med_cost_sq_by_year_room_median = self.med_cost_sq_by_year_room['MedCostSqByYearRooms'].median()\n        \n        ## District, Rooms and CostSquareMeter\n        if y is not None:\n            self.med_cost_sq_by_district_room = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'CostSquareMeter':'median'})\\\n                                            .rename(columns={'CostSquareMeter':'MedCostSqByDistrictRooms'})\n            \n            self.med_cost_sq_by_district_room_median = self.med_cost_sq_by_district_room['MedCostSqByDistrictRooms'].median()\n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n\n        if self.med_cost_sq_by_floor_room is not None:\n            X = X.merge(self.med_cost_sq_by_floor_room, on=['Floor', 'Rooms'], how='left')\n            X['MedCostSqByFloorRooms'].fillna(self.med_cost_sq_by_floor_room_median, inplace=True)\n        \n        if self.med_cost_sq_by_year_room is not None:\n            X = X.merge(self.med_cost_sq_by_year_room, on=['HouseYear', 'Rooms'], how='left')\n            X['MedCostSqByYearRooms'].fillna(self.med_cost_sq_by_year_room_median, inplace=True)\n            \n        if self.med_cost_sq_by_district_room is not None:\n            X = X.merge(self.med_cost_sq_by_district_room, on=['DistrictId', 'Rooms'], how='left')\n            X['MedCostSqByDistrictRooms'].fillna(self.med_cost_sq_by_district_room_median, inplace=True)\n            \n#         if self.cost_sq_meter is not None:\n#             X['CostSquareMeter'] = self.cost_sq_meter\n            \n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [0, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n\n        X['floor_cat'].fillna(-1, inplace=True) \n        return X\n     \n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n\n        X['year_cat'].fillna(-1, inplace=True)\n        return X\n            \n    ","3835a943":"X_train.loc[X_train['LifeSquare'] > X_train['Square']]","ceb0e769":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","1e7739f1":"preprocessor.med_square_by_rooms","4882b056":"X_train['ShareOfLiving'].describe()","fd6bd577":"preprocessor.medians","76c7bbf3":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","298ca866":"X_train.head()","68227d83":"test_df.head()","816e569d":"features_gen.cost_sq_meter.describe()","266ea6c1":"X_train","d4c9c589":"X_train.loc[X_train['Health1ByDistrictRooms'].isna(),'Health1ByDistrictRooms'].sum()","99f4607c":"X_train.columns.tolist()","58f8077a":"X_train['ShareOfKitchen'].describe()","25400f26":"X_train.loc[X_train['ShareOfKitchen'] < 0.05]","d35d0925":"(X_train['Square'] \/ X_train['Rooms']).describe()","76a4d5b3":"(X_train['Square'] \/ X_train['Rooms']).quantile(.999)","abc8510b":"X_train.loc[(X_train['Square'] \/ X_train['Rooms']) > (X_train['Square'] \/ X_train['Rooms']).quantile(.999)]","1e8f92f3":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","767bc25a":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","fda4acc2":"rf_model = RandomForestRegressor(criterion='mse',\n                                 max_depth=20,\n                                 min_samples_leaf=30,\n                                 n_estimators=100,\n                                 random_state=21)\nrf_model.fit(X_train, y_train)","65da101d":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","c932a606":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","da78089f":"cv_score.mean()","9cc8c9d7":"feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","51b16f95":"from sklearn.ensemble import StackingRegressor, VotingRegressor, BaggingRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\ngb = GradientBoostingRegressor()\n\nstack = StackingRegressor([('lr', lr), ('rf', rf_model)], final_estimator=gb)\nstack.fit(X_train, y_train)","0ee07e3c":"y_train_preds = stack.predict(X_train)\ny_test_preds = stack.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","5ab9e17b":"test_df.shape","b1e0688d":"test_df","847b12e9":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","ebbe7b37":"predictions = rf_model.predict(test_df)\npredictions","1cd631a9":"submit['Price'] = predictions\nsubmit.head()","02e4025f":"submit.to_csv('rf_submit.csv', index=False)","b048d00c":"## 5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","86ae73f4":"### **MedPriceByDistrict**","632f069d":"#### \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u044b","71583876":"### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","33e96391":"## 4. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","a6d6ea20":"#### \u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u043b\u0438\u0437\u043a\u043e\u0435 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438.\n#### \u041c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0446\u0435\u043d, \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u0446\u0435\u043d\u044b. \u0421\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0448\u0435\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.","2f2612f7":"#### \u0418\u0437 \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043e 10(\u0441\u043f\u0440\u0430\u0432\u0430) \u043a\u0432. \u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0446\u0435\u043d\u044b \u043a\u0432.\u043c\u0435\u0442\u0440\u0430. \n#### \u0427\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u0440\u0430. \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u043b\u0435\u0436\u0438\u0442 \u0432 \"\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0445\" \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445.\n#### \u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0434\u043e 10(\u0441\u043b\u0435\u0432\u0430) \u043a\u0432.\u043c\u0435\u0442\u0440\u043e\u0432.","5e4de226":"#### \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","bc86de17":"#### \u0418\u0437\u0443\u0447\u0438\u043c \u043f\u0440\u0430\u0432\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Square","a553a9f5":"#### \u041f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u0440\u0430 (cost_sq_meter) - \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Square.\n#### \u0418 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438.","796c9fc7":"## 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","88841d8a":"#### **Dummies**","8c21f8bb":"#### **MedPriceByFloorYear**","798b581c":"#### \u0414\u043e\u043c\u0430 \u0441 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0432\u043d\u043e\u0439 0 \u0443\u0441\u043b\u043e\u0432\u0438\u043c\u0441\u044f \"\u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c\" \u0434\u043e \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435.","27841a95":"#### \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 Ecology_2, Ecology_3, Shops_2 - \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u0432\u0438\u0434\u043d\u043e, \n#### \u0447\u0442\u043e \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 'A' \u0438 'B'. \u041e\u043d\u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u044b \u043d\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","46f1054e":"## 7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n#### **\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**","5ad56773":"#### MedCostSqByDistrict","7e0faea3":"#### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u0434\u043b\u044f \"\u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\" \u0438 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","72bb444a":"#### \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441 \u0446\u0435\u043b\u044c\u044e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443, \n#### \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0441 \u043e\u0431\u043e\u0438\u0445 \u043a\u043e\u043d\u0446\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","0a610ece":"#### \u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435.","cf5a4bda":"#### \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u044d\u0442\u0430\u0436\u043e\u043c \u0432 \u044d\u0442\u043e\u043c \u0437\u0434\u0430\u043d\u0438\u0438.","d0810b37":"#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 **LifeSquare** \u043c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0440\u0430\u043d\u0435\u0435. \u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 **Healthcare_1**","ae310c50":"#### **\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","44da0789":"#### \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u044f\u0447\u0435\u0439\u043a\u0430\u043c, \u0433\u0434\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u043e\u0432\u0430\u043b\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 LifeSquare","192c1c6b":"### **KitchenSquare**","284b63ff":"#### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 2,5% \u0441 \u043e\u0431\u043e\u0438\u0445 \u043a\u043e\u043d\u0446\u043e\u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","2247b0e8":"## 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","4eeed0ec":"#### \u0423\u0441\u043b\u043e\u0432\u0438\u043c\u0441\u044f \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0437\u0430 \"\u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e\u0435\" \u0432\u0441\u0451 \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043b\u0438\u0431\u043e \u0440\u0430\u0432\u043d\u043e 6.\n#### \u0412\u0432\u0435\u0434\u0451\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \"\u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439\" \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0435\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1.","52915a96":"#### \u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c","5dc1bb55":"#### \u041f\u0440\u043e\u0432\u0435\u0434\u0451\u043c \u0430\u043d\u0430\u043b\u0438\u0437 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","1b951fa2":"#### **\u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438**","c4e90b13":"## 1. EDA\n\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 (Nan)\n- \u041f\u043e\u0438\u0441\u043a \u0438\u0434\u0435\u0439 \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","84d0f64f":"#### \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 **DistrictId** \u0432\u0432\u0435\u0434\u0435\u043c \u0434\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 **DistrictSize**, **IsDistrictLarge**.\n#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a *DistrictSize* \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c \"\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\" \u0440\u0430\u0439\u043e\u043d\u0430 \u0432 \u0438\u0437\u0443\u0447\u0430\u0435\u043c\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.\n#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a *IsDistrictLarge* \u0431\u0443\u0434\u0435\u0442 \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e \"\u0440\u0430\u0437\u043c\u0435\u0440\u0435\" \u0440\u0430\u0439\u043e\u043d\u0430.","b96cbf7c":"#### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 **HouseFloor, Floor**","2c643b10":"#### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a **KitchenSquare**","0d06bb97":"#### \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u0432\u0435\u0434\u0451\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0434\u043e\u043b\u044f \u043a\u0443\u0445\u043d\u0438 \u0432 \u043e\u0431\u0449\u0435\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u0438.","be333877":"#### \u041f\u043e\u043c\u0435\u0442\u0438\u043c \u0440\u0430\u0439\u043e\u043d\u044b \u0431\u043e\u043b\u044c\u0448\u0435 100 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043a\u0430\u043a \u043a\u0440\u0443\u043f\u043d\u044b\u0435.","79657723":"## 6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","1eab5ae4":"### **LifeSquare**","10d71fe0":"#### \u0421\u0430\u043c\u044b\u043e\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 95 \u044d\u0442\u0430\u0436\u0435\u0439, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0432\u044b\u0441\u043e\u0442\u0435 \u0434\u043e\u043c\u0430 \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b.\n#### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0442\u0430\u043a \u0436\u0435 \u0435\u0441\u0442\u044c \u043b\u0438 \u0442\u0430\u043a\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u0430\u043a \u0432\u044b\u0441\u043e\u0442\u0430 \u044d\u0442\u0430\u0436\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432\u044b\u0448\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0437\u0434\u0430\u043d\u0438\u044f.","1d1656be":"#### \u0418\u0437 \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043e 10 \u043a\u0432. \u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0446\u0435\u043d\u044b \u043a\u0432.\u043c\u0435\u0442\u0440\u0430.\n#### \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 10 \u043a\u0432.\u043c. \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","496983f7":"#### \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u044d\u0442\u043e **LifeSquare** \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043f\u043e\u043f\u0443\u0442\u043d\u043e \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438, \u0432\u0432\u043e\u0434\u044f \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f.","f6b1aec3":"#### \u0412 \u044d\u0442\u0438\u0445 \u0442\u0440\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 - Ecology_2, Ecology_3, Shops_2 - \u0438\u043c\u0435\u0435\u043c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0445 \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","abdc40c5":"### **Rooms**","ade7b048":"#### **\u041a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f**","064b675a":"#### \u0423\u0441\u043b\u043e\u0432\u0438\u043c\u0441\u044f, \u0447\u0442\u043e 0 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 \u044d\u0442\u043e \u0441\u0442\u0443\u0434\u0438\u0438 \u0438 \"\u043f\u0440\u0438\u043f\u0438\u0448\u0435\u043c\" \u0438\u0445 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043e\u0434\u043d\u043e\u043a\u043e\u043c\u043d\u0430\u0442\u043d\u044b\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440,\n#### \u0430 \u0442\u0430\u043c \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f >= 6 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.","21bc024c":"#### \u0418\u0437 \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u043e\u0440\u044f\u0434\u043e\u043a. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u043e \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n#### \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0446\u0435\u043d \u043d\u0430 \u043e\u0431\u044a\u0435\u0442 (\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c \u0434\u0440\u043e\u0431\u0438) \u043b\u0438\u0431\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043b\u0438\u0431\u043e \u0438 \u0442\u043e \u0438 \u0434\u0440\u0443\u0433\u043e\u0435 \u0432\u043c\u0435\u0441\u0442\u0435. \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c.\n#### \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043c\u0430\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 (\u0434\u043e 10 \u043a\u0432.\u043c\u0435\u0442\u0440\u043e\u0432 (\u0441\u043f\u0440\u0430\u0432\u0430))","7773ea11":"#### \u0414\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0434\u043e\u043b\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0432 \u043e\u0431\u0449\u0435\u0439 - **share_of_livingSpace_in_total**,\n#### \u0438 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0433\u0434\u0435 \u043d\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a **LifeSquare**.","688227a7":"#### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u044d\u0442\u0430\u0436\u0435\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0423\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0451 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e.","d56fd170":"#### \u0412 \u0442\u0435\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445, \u0433\u0434\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0445 (\u0432\u044b\u0431\u0440\u043e\u0441\u044b) \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043b\u0438\u0431\u043e \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043b\u0438\u0431\u043e \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443,\n#### \u043b\u0438\u0431\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","79f777ae":"#### \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u044e \u043a\u0443\u0445\u043d\u0438 \u0432 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438","847dc1a7":"#### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a **HouseYear**","5411f001":"#### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c \u0442\u0430\u043a\u0443\u044e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u044b\u0445.\n#### \u0412\u0432\u0435\u0434\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u0442\u0430\u043a\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b.","ec540997":"#### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432.","f2345c7f":"#### \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 - Rooms, Square, LifeSquare, KitchenSquare, HouseFloor, HouseYear, Social_3 - \u0438\u043c\u0435\u044e\u0442 \u0441\u043f\u0440\u0430\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0435 \n#### \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043b\u0438\u0431\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443, \u0447\u0442\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n#### \u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 LifeSquare, Healthcare_1 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \"\u0432\u043e\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u044c\" \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.","b79c0e2d":"#### \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","e37a1f7f":"## 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","02e883e6":"### **Square**. \n#### \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u044d\u0442\u043e **Square** \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u043f\u043e\u043f\u0443\u0442\u043d\u043e \u0432\u0432\u0435\u0434\u0451\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u0440\u0430 - **cost_sq_meter**.","b8ded1a4":"#### \u0418\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u0440\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0435\u043d\u044c\u0448\u0435 1000 \u0432\u0438\u0434\u043d\u043e \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c.\n#### \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","0a5d20b2":"#### \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443.","99bc6a37":"#### \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 (\u0426\u0435\u043d\u044b \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442)","20ceb1d6":"#### \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \"\u0434\u043e\u043b\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0432 \u043e\u0431\u0449\u0435\u0439\".","972116a4":"#### **\u0418\u0434\u0435\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439:**","7241db04":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n- Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n- DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n- Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n- Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n- LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n- KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n- Floor - \u044d\u0442\u0430\u0436\n- HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n- HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n- Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n- Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n- Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n- Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n- Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b"}}