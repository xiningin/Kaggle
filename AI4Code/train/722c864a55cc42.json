{"cell_type":{"5591a280":"code","70853fb3":"code","cf9bde31":"code","71428c04":"code","96ab145c":"code","855a2aec":"code","0fc9bdc8":"code","a9de4045":"code","540f5a3d":"code","02b9f0a3":"code","c16b0c55":"markdown","6a9246a6":"markdown","a9a0c67d":"markdown","d341722d":"markdown","57a1713f":"markdown","d33d93c4":"markdown"},"source":{"5591a280":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70853fb3":"import matplotlib\nfrom os.path import dirname, join as pjoin\nimport scipy.io as sio\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndata_dir = pjoin(dirname(sio.__file__), 'matlab', 'tests', 'data')\nX = sio.loadmat(\"\/kaggle\/input\/k-means-trail-data\/ex7data2.mat\")\n\nX = X[\"X\"]\n","cf9bde31":"def random_init(X,no_of_clusters):\n    K = X[np.random.randint(X.shape[0], size=no_of_clusters), :]\n    return K\n    ","71428c04":"def K_nearest_assignment(X,K):\n    #K = random_init(X,no_of_clusters)\n    Cx = np.zeros((X.shape[0],1))\n    K_Centroids_Values = np.zeros((X.shape[0],1))\n    for a in range(X.shape[0]):\n        for i in range(K.shape[0]):\n            temp_cent_value = sum((X[a,:] - K[i,:])**2)  \n            if i == 0:\n                K_Centroids_Values[a] =  temp_cent_value\n                Cx[a] = i \n            if temp_cent_value < K_Centroids_Values[a]:\n                K_Centroids_Values[a] =  temp_cent_value\n                Cx[a] = i\n    J = sum(K_Centroids_Values)\/X.shape[0]\n    K_Centroids_Values\n    return Cx,J,K_Centroids_Values\n            \n                ","96ab145c":"def k_assigned_means(X,no_of_clusters,Cx):\n    dx = np.c_[X,Cx]\n    dx = pd.DataFrame(dx)\n    k_means = np.zeros((no_of_clusters,X.shape[1]))\n    #int_cx = np.unique(Cx)\n    for i in np.unique(Cx).astype(int):\n        temp_set = dx[dx.iloc[:,-1]==i]\n        k_means[i,:] = np.reshape(((np.sum(temp_set,0).values[:-1])\/temp_set.shape[0]),(1,X.shape[1]))\n    return k_means\n        \n    \n    ","855a2aec":"def K_means(X,no_of_clusters,no_of_iterations):\n    K = random_init(X,no_of_clusters)\n    J = np.zeros((no_of_iterations,1))\n    Cx = np.zeros((X.shape[0],no_of_iterations))\n    k_assign = np.zeros((no_of_iterations,no_of_clusters,X.shape[1]))\n    for i in range(no_of_iterations):\n        cx, J[i], K_values_j = K_nearest_assignment(X,K)\n        Cx[:,i] = cx.flatten()\n        K = k_assigned_means(X,no_of_clusters,cx) #[:,i]\n        k_assign[i] = k_assigned_means(X,no_of_clusters,cx) #[:,i]\n        \n        \n    return Cx[:,-1]\n        \n    \n    ","0fc9bdc8":"sns.scatterplot(x=X[:,0],y =X[:,1])","a9de4045":"# After running our K-means with four random initialisation to make sure it does not get stuck in local optima\n\nlabels = K_means(X,3,20) \n\nrows = 2\ncols = 2\nfig, ax = plt.subplots(rows, cols, figsize=(10,10))\nfig.suptitle(\"How K-means converge\", y=1.05, fontsize=24) # Adding  y=1.05, fontsize=24 helped me fix the suptitle overlapping with axes issue\nfor i in range(rows):\n  for j in range(cols):\n    sns.scatterplot(ax =ax[i][j], x=X[:,0],y =X[:,1],hue=labels)\n    \nplt.setp(ax, xticks=[],yticks=[])\nplt.tight_layout()","540f5a3d":"from sklearn.cluster import KMeans","02b9f0a3":"kmeans = KMeans(n_clusters=3, random_state=0).fit(X)\nsns.scatterplot(x=X[:,0],y =X[:,1],hue=kmeans.labels_)","c16b0c55":"# Now lets use sklearn. ","6a9246a6":"# Same results!!!!!!   Hope you like it.!!!! Upvote if you like!!!!!! Cheeers!!!!!!!","a9a0c67d":"# Looks great","d341722d":"# How K-means works?\n\n1. First it takes some random k-cluster centroids prefeberaly from the given set. E.g. If i want to have three clusters it will take three training examples (here rows). And initialise them as k-centroids. \n2. Then it will iterate through the dataset and calculate the least_squares_distance for each training example for each initialised k_-centroids and will asign the training example to the k-centroid with least least_squares_distance value. \n3. Now We have each example (row). Assigned to one of the k-centroids. \n4. Now we will take the average value of all the training example of the same cluster and assign that average value as the new value for that k-centroid.\n5. We will calculate the cost function which is the sum of least square distances from step 2. \n5. Now we will repeat from step 2 with the new averageed k-centroid values","57a1713f":"# This is how the data looks like","d33d93c4":"# We will code K-means and check its performance against sklearn.kmeans "}}