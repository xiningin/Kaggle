{"cell_type":{"438cd009":"code","acce5cb3":"code","952b9303":"code","7b6a9a67":"code","04407721":"code","97e6e122":"code","c0653ff3":"code","2105a9f4":"code","83589b18":"code","26a85863":"code","9e0d17ef":"code","0ea607fc":"code","23b51ed1":"code","a7f33eda":"code","f030dd55":"code","2fd59dff":"code","6258ec36":"code","d92798ff":"code","e9568c70":"code","ca302021":"code","8313110d":"code","80f086e2":"code","d56520c1":"code","0d26873b":"code","f1351f82":"code","e31f4721":"code","602b6ef2":"code","546b6071":"code","a8ff2d14":"code","c2b66531":"code","a86b4920":"code","ea159284":"code","0580de19":"code","1865bb6a":"code","569c6bd1":"code","ffaa2c16":"code","3249f9ff":"code","6f82c0e0":"code","1b4ba3b2":"code","2c379d6c":"code","05eacfb4":"code","e5f7ac64":"code","8f8e0436":"code","33e03d8b":"code","7d986b66":"code","d07d606f":"code","aeef8d3a":"code","7a299de7":"code","2c0fc3b9":"code","ebbc635d":"code","93b25d8e":"code","7c730acb":"code","147aacf2":"code","58e2dbd1":"code","a8f3821f":"code","2fe7c852":"code","e488a446":"code","e5c2293f":"code","11c90996":"code","5a12fc0c":"code","0d4353d6":"code","4bb8a7e3":"code","9f3dad08":"code","502d692b":"code","3b8c0709":"code","dcb1b5b1":"code","2150de99":"code","17097832":"code","dd7aecba":"code","3546e048":"code","8ef43a3a":"code","dc15edbc":"code","76e18a7d":"code","9cd1e719":"code","e265ca73":"code","bb8b23f5":"code","2f8ed8d5":"code","f6ebe1a8":"code","781dc5b9":"code","2bee62fc":"code","9a726c4b":"code","2d5c42df":"code","66bbd059":"code","f41228e6":"code","108018ce":"code","4ef562f4":"code","dbbb0bce":"code","acebb0a5":"code","3028c98d":"code","18974b0d":"code","f1abfce6":"code","b13951f4":"code","9926d5a5":"code","85652afc":"code","766a1bab":"code","42e7bdaf":"code","17761a93":"code","9dcb1d63":"code","e8b45589":"code","1d838076":"code","0bb8476f":"code","141b1256":"code","e937ca6b":"code","f62282b2":"code","e72471a9":"code","ac0ae364":"markdown","df195d76":"markdown","fcffcf3e":"markdown","e18b69c3":"markdown","50e6869e":"markdown","d42b99f2":"markdown","cccb45b1":"markdown","e453d36a":"markdown","dc5ce3e7":"markdown","018eab04":"markdown","96e8579e":"markdown","120b2f96":"markdown","6b35d659":"markdown","0ff36438":"markdown","cb65ec9c":"markdown","39eb850f":"markdown","30a38218":"markdown","3fc07e0b":"markdown","c4cee788":"markdown","8a2d30ba":"markdown","b9165df7":"markdown","31106afd":"markdown","14605678":"markdown","fdea98b6":"markdown","90dd0788":"markdown","83ed8bbe":"markdown","111f0f34":"markdown","8bbf2796":"markdown","9f0ad4b1":"markdown","9a5ee6f7":"markdown","b36e48dd":"markdown","9a588a12":"markdown","58dcc29e":"markdown","00d05f21":"markdown","4b287efb":"markdown","c17711b4":"markdown","75b918d0":"markdown","9d627489":"markdown","6547b75d":"markdown","c5a284aa":"markdown","7536c047":"markdown","63159034":"markdown","b52d4d9b":"markdown"},"source":{"438cd009":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\n!pip3 install ppscore\nimport ppscore as pps\n#Import Library RobustScaler\nfrom sklearn.preprocessing import RobustScaler\n#Cluster Model\nfrom sklearn.cluster import KMeans \nfrom sklearn.metrics import silhouette_score","acce5cb3":"#load_data\ndata = pd.read_csv('..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv' ,sep =',' , encoding = 'utf8' )\ndata.head()","952b9303":"#drop column (Unnamed) as semiler ID column\ndata.drop(['Unnamed: 0'], axis=1 ,inplace=True)\n#show data after drop\ndata.head(2)","7b6a9a67":"#data about data\ndata.info()","04407721":"#show shape of data 7197 Row and 16 columns\ndata.shape","97e6e122":"data.isnull().sum().sum()\n#not found null data","c0653ff3":"data.currency.value_counts()\n#All of Apps has same currency paid","2105a9f4":"data.nunique()\n#target maybe vpp_lic","83589b18":"data.price.value_counts()\n#4056 free apps\n#another apps is paid","26a85863":"sns.distplot(data.price)","9e0d17ef":"free_apps = data[(data.price==0.00)]\n\npaid_apps  = data[(data.price>0)]","0ea607fc":"free_apps.head(2)","23b51ed1":"paid_apps.head(2)","a7f33eda":"paid_apps.price.value_counts()","f030dd55":"free_apps.price.value_counts()","2fd59dff":"sns.distplot(free_apps['price'])","6258ec36":"sns.distplot(paid_apps['price'])","d92798ff":"sns.histplot(paid_apps['price'])","e9568c70":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(6,4))\n\nplt.subplot(2,1,2)\nplt.title('Visual price distribution')\nsns.stripplot(data=paid_apps,y='price',jitter= True,orient = 'h' ,size=6)\nplt.show()","ca302021":"Top_Apps=paid_apps[paid_apps.price>50][['track_name','price','prime_genre','user_rating']]\nTop_Apps\n#7 Top apps with price, prime_genre and user rating","8313110d":"#Function for visualizaiton\ndef visualizer(x, y, plot_type, title, xlabel, ylabel, rotation=False, rotation_value=60, figsize=(15,8)):\n    plt.figure(figsize=figsize)\n    \n    if plot_type == \"bar\":  \n        sns.barplot(x=x, y=y)\n    elif plot_type == \"count\":  \n        sns.countplot(x)\n   \n    plt.title(title, fontsize=20)\n    plt.xlabel(xlabel, fontsize=18)\n    plt.ylabel(ylabel, fontsize=18)\n    plt.yticks(fontsize=13)\n    if rotation == True:\n        plt.xticks(fontsize=13,rotation=rotation_value)\n    plt.show()","80f086e2":"Top_Apps = Top_Apps.sort_values('price', ascending=False)\n\nvisualizer(Top_Apps.price,Top_Apps.track_name, \"bar\", \"TOP 7 APPS ON THE BASIS OF PRICE\",\"Price (in USD)\",\"APP NAME\")\n#names of track in y axis to be readable","d56520c1":"paid_apps.head(2)","0d26873b":"#sum of all paid apps \nsum_paid = paid_apps.price.value_counts().sum()\nsum_paid","f1351f82":"#sum of all free apps\nsum_free = free_apps.price.value_counts().sum()\nsum_free","e31f4721":"data.prime_genre.value_counts()","602b6ef2":"data.head()","546b6071":"new_data_cate = data.groupby([data.prime_genre])[['id']].count().reset_index().sort_values('id' ,ascending = False)\nnew_data_cate.columns = ['prime_genre','# of Apps']\nnew_data_cate.head()\n#Categories and number of apps in each category","a8ff2d14":"#Top_Categories accorrding number of apps\nnew_data_cate.head(10)","c2b66531":"sns.barplot(y = 'prime_genre',x = '# of Apps', data=new_data_cate.head(10))","a86b4920":"#Lower Categories according number of apps Categories unpopular\nnew_data_cate.tail(10)","ea159284":"sns.barplot(x= '# of Apps' , y = 'prime_genre' , data = new_data_cate.tail(10))","0580de19":"plt.figure(figsize=(10,5))\nplt.scatter(y=paid_apps.prime_genre ,x=paid_apps.price,c='DarkBlue')\nplt.title('Price & Category')\nplt.xlabel('Price')\nplt.ylabel('Category')\nplt.show()","1865bb6a":"free_apps.head(2)","569c6bd1":"paid_apps.head(2)","ffaa2c16":"names = ['sum_free', 'sum_paid']\nvalues = [sum_free, sum_paid]\nplt.figure(figsize=(3, 3))\nplt.suptitle('Count of free and paid apps')\nplt.bar(names, values)\nplt.show()","3249f9ff":"print('number of Catigories in free apps is' ,  len(free_apps.prime_genre.value_counts().index))\nprint('number of Catigories in paid apps is' ,  len(paid_apps.prime_genre.value_counts().index))\n#all categories has free & paid apps","6f82c0e0":"free_apps.head()","1b4ba3b2":"free = free_apps.prime_genre.value_counts().sort_index().to_frame()\npaid = paid_apps.prime_genre.value_counts().sort_index().to_frame()\ntotal = data.prime_genre.value_counts().sort_index().to_frame()\nfree.columns=['free']\npaid.columns=['paid']\ntotal.columns=['total']\nfig  =free.join(paid).join(total)\nfig['%paid'] = fig.paid*100 \/fig.total\nfig['%free'] = fig.free*100\/ fig.total\nfig","2c379d6c":"# for pie chart\npies = fig[['%free','%paid']].head()\npies.columns=['free %','paid %']\n","05eacfb4":"plt.figure(figsize=(15,10))\npies.T.plot.pie(subplots=True,figsize=(20,4),colors=['#D62598','#FBDD7A'],autopct = '%1.0f%%')\nplt.show()","e5f7ac64":"data[data['rating_count_tot']==data['rating_count_tot'].max()]\n#Most rated & highest total rating for all version app:\n","8f8e0436":"sns.set_style('white')\nsns.violinplot(x=paid_apps['user_rating'],color='#D62598')\nplt.xlim(0,5)\nplt.xlabel('Rating (0 to 5 stars)')\n_ = plt.title('Distribution of App Ratings')","33e03d8b":"paid_apps.cont_rating.value_counts()","7d986b66":"bins = (0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5)\nplt.style.use('seaborn-white')\nplt.hist(paid_apps[paid_apps['cont_rating']=='4+']['user_rating'],alpha=.8,bins=bins,color='purple')\nplt.xticks((0,1,2,3,4,5))\nplt.title('User Ratings (4+)')\nplt.xlabel('Rating')\nplt.ylabel('Frequency')\n_ = plt.xlim(right=5.5)","d07d606f":"visualizer(paid_apps['user_rating'],paid_apps.prime_genre, \"bar\", \"User-Rating in All Categories\",\"User_Rating\",\"Categories\")","aeef8d3a":"Top_Apps = Top_Apps.sort_values('price', ascending=False)\n\nvisualizer(Top_Apps.user_rating,Top_Apps.track_name, \"bar\", \"TOP 7 APPS ON THE BASIS OF PRICE With User-Rating\",\"User_Rating\",\"APP NAME\")\n#names of track in y axis to be readable","7a299de7":"Lower_Apps=paid_apps[paid_apps.price<=50][['track_name','price','prime_genre','user_rating']]\nLower_Apps.head()","2c0fc3b9":"Lower_Apps = Lower_Apps.sort_values('price', ascending=True)\nlower = Lower_Apps.head()\nvisualizer(lower.user_rating,lower.track_name, \"bar\", \"Lower 5 APPS ON THE BASIS OF PRICE With User-Rating\",\"User_Rating\",\"APP NAME\")","ebbc635d":"numCol = paid_apps[['rating_count_tot', 'user_rating', 'sup_devices.num', 'price','lang.num', 'prime_genre']]\nsns.pairplot(data = numCol, hue='prime_genre',palette='Set1')","93b25d8e":"plt.style.use('seaborn-white')\nplt.scatter(data['size_bytes'],data['price'])\nplt.title('Byte Size vs. Price')\nplt.xlabel('Size (Bytes)')\nplt.ylabel('Price')\nplt.xlim(0)","7c730acb":"grp = paid_apps.groupby('prime_genre')\nx = grp['user_rating'].agg(np.mean)","147aacf2":"y = grp['price'].agg(np.sum)\nz = grp['user_rating_ver'].agg(np.mean)\nprint(x)\nprint(y)\nprint(z)","58e2dbd1":"# lets plot\nplt.plot(x)","a8f3821f":"#again need to expand\nplt.figure(figsize=(12,5))\nplt.plot(x, 'ro')\nplt.xticks(rotation=90)\nplt.show()","2fe7c852":"# for x\nplt.figure(figsize=(16,5))\nplt.plot(x, 'ro')\nplt.xticks(rotation=90)\nplt.title('Category wise rating')\nplt.xlabel('Categories')\nplt.ylabel('Rating')\nplt.show()","e488a446":"# for Y\nplt.figure(figsize=(16,5))\nplt.plot(y, 'r--')\nplt.xticks(rotation=90)\nplt.title('Category wise pricing')\nplt.xlabel('Categories')\nplt.ylabel('Prices')\nplt.show()","e5c2293f":"# reducing the number of categories to 5 categories\n\ns = data.prime_genre.value_counts().index[:4]\ndef categ(x):\n    if x in s:\n        return x\n    else : \n        return \"Others\"\n\ndata['broad_genre']= data.prime_genre.apply(lambda x : categ(x))","11c90996":"data['broad_genre'].value_counts()","5a12fc0c":"BlueOrangeWapang = ['#fc910d','#f5ed05','#09ed52','#ed3b09','#e01bda']\nplt.figure(figsize=(15,15))\nlabel_names=data.broad_genre.value_counts().sort_index().index\nsize = data.broad_genre.value_counts().sort_index().tolist()\n\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\nplt.pie(size, labels=label_names, colors=BlueOrangeWapang ,autopct = '%1.0f%%',)\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","0d4353d6":"free = data[data.price==0].broad_genre.value_counts().sort_index().to_frame()\npaid = data[data.price>0].broad_genre.value_counts().sort_index().to_frame()\ntotal = data.broad_genre.value_counts().sort_index().to_frame()\nfree.columns=['free']\npaid.columns=['paid']\ntotal.columns=['total']\nfive_ca  =free.join(paid).join(total)\nfive_ca['Paid_per'] = five_ca.paid*100 \/five_ca.total\nfive_ca['Free_per'] = five_ca.free*100\/ five_ca.total\nfive_ca","4bb8a7e3":"plt.figure(figsize=(15,15))\nf=pd.DataFrame(index=np.arange(0,10,2),data=five_ca['free'].values,columns=['num'])\np=pd.DataFrame(index=np.arange(1,11,2),data=five_ca['paid'].values,columns=['num'])\nfinal = pd.concat([f,p],names=['labels']).sort_index()\nfinal.num.tolist()\n\nplt.figure(figsize=(25,25))\ngroup_names=data.broad_genre.value_counts().sort_index().index\ngroup_size=data.broad_genre.value_counts().sort_index().tolist()\nh = ['Free', 'Paid']\nsubgroup_names= 5*h\nsub= ['#45cea2','#fdd470']\nsubcolors= 5*sub\nsubgroup_size=final.num.tolist()\n\n\n# First Ring (outside)\nfig, ax = plt.subplots()\nax.axis('equal')\nmypie, _ = ax.pie(group_size, radius=2.5, labels=group_names, colors=BlueOrangeWapang)\nplt.setp( mypie, width=1.2, edgecolor='white')\n\n# Second Ring (Inside)\nmypie2, _ = ax.pie(subgroup_size, radius=1.6, labels=subgroup_names, labeldistance=0.7, colors=subcolors)\nplt.setp( mypie2, width=0.8, edgecolor='white')\nplt.margins(0,0)\n\n# show it\nplt.show()","9f3dad08":"paid_apps.plot(kind='density' , subplots=True , layout=(4,4) , sharex=False ,\n          fontsize=8 , figsize=(10,10))\nplt.tight_layout()","502d692b":"data.plot(kind='density' , subplots=True , layout=(4,4) , sharex=False ,\n          fontsize=8 , figsize=(10,10))\nplt.tight_layout()","3b8c0709":"data.rating_count_tot.value_counts()","dcb1b5b1":"free_apps.vpp_lic.value_counts()","2150de99":"paid_apps.vpp_lic.value_counts()","17097832":"data.vpp_lic.value_counts()","dd7aecba":"sns.histplot(data['lang.num'])","3546e048":"from sklearn.preprocessing import LabelEncoder\nUSD_LABEL =  LabelEncoder()\ndata['currency']= USD_LABEL.fit_transform(data['currency'])","8ef43a3a":"data.drop(['broad_genre'] ,\n          #['currency'],\n          axis = 1, inplace = True)","dc15edbc":"data.drop(['currency'],\n          axis = 1, inplace = True)","76e18a7d":"data.info()","9cd1e719":"#encoding object columns int\ntrack_name_LABEL =  LabelEncoder()\ndata['track_name']= track_name_LABEL.fit_transform(data['track_name'])","e265ca73":"ver_LABEL =  LabelEncoder()\ndata['ver']= ver_LABEL.fit_transform(data['ver'])\n\nprime_genre_LABEL =  LabelEncoder()\ndata['prime_genre']= prime_genre_LABEL.fit_transform(data['prime_genre'])\n\n\ncont_rating_LABEL =  LabelEncoder()\ndata['cont_rating']= cont_rating_LABEL.fit_transform(data['cont_rating'])","bb8b23f5":"data.head()","2f8ed8d5":"data.drop(['id'] , axis =1 , inplace = True)","f6ebe1a8":"data.info()","781dc5b9":"#Data about Data\ndata.describe().style.background_gradient(cmap='Purples')","2bee62fc":"D_corr = data.corr()\nD_corr.style.background_gradient()","9a726c4b":"mask = np.zeros_like(data.corr())\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"ticks\"):\n    f, ax = plt.subplots(figsize=(9, 5))\n    ax = sns.heatmap(data.corr(), mask=mask, vmax=.3,annot=True,fmt=\".0%\",linewidth=0.5,square=False)","2d5c42df":"#Calculating ppscore \nimport ppscore\nc=pps.matrix(data)\nc","66bbd059":"figsize=(20,20)\na = pps.matrix(data).pivot(columns='x', index='y', values='ppscore')\nsns.heatmap(a, annot=True)","f41228e6":"mask = np.zeros_like(a)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"ticks\"):\n    f, ax = plt.subplots(figsize=(9, 5))\n    ax = sns.heatmap(a, mask=mask, vmax=.3,annot=True,fmt=\".0%\",linewidth=0.5,square=False)","108018ce":"#Show outliers with boxplot\nplt.figure(figsize = (15,20))\ncol_names = [ 'size_bytes', 'price', 'rating_count_tot',\n       'rating_count_ver', 'user_rating', 'user_rating_ver', 'ver',\n       'cont_rating', 'prime_genre', 'sup_devices.num']\nfor i in range(10):\n    plt.subplot(5,2,i+1)#3 number of row #2 number of columns\n    sns.boxplot(x=data[col_names[i]], linewidth=2.5)\nplt.show()","4ef562f4":"data.shape","dbbb0bce":" outliers_list = []\n# For each feature find the data points with extreme high or low values\nfor feature in data.keys():\n    \n    # Calculate Q1 (25th percentile of the data) for the given feature\n    Q1 = np.percentile(data[feature], 25)\n    \n    # Calculate Q3 (75th percentile of the data) for the given feature\n    Q3 = np.percentile(data[feature], 75)\n    \n    # Use the interquartile range to calculate an outlier step (1.5 times the interquartile range)\n    step = (Q3 - Q1) * 1.5\n    \n    # Display the outliers\n    print(\"Data points considered outliers for the feature '{}':\".format(feature))\n    outliers = list(data[~((data[feature] >= Q1 - step) & (data[feature] <= Q3 + step))].index.values)\n    \n    display(data[~((data[feature] >= Q1 - step) & (data[feature] <= Q3 + step))])\n    print('-=-=-=-=-=-=-=-=-=-=-=-=-------------------------------=-=-=-=-=-=-=-=-=-=-=-=')\n    outliers_list.extend(outliers)\n    \n#print(\"List of Outliers -> \\n :{}\".format(outliers_list))","acebb0a5":"#duplicate_outliers_list = list(set([x for x in outliers_list if outliers_list.count(x) >= 2]))\n#duplicate_outliers_list.sort()\n#print(\"\\nList of Common Outliers -> {}\".format(duplicate_outliers_list))\n# Remove the outliers\n#outliers  = duplicate_outliers_list\n#new_data = data.drop(data.index[outliers]).reset_index(drop = True)","3028c98d":"#new_data.head()","18974b0d":"#new_data.shape","f1abfce6":"#Before clustering, we transform features from original version to standardize version\n#Creat Object from RobustScaler\ns = RobustScaler()\n#fit_transform for dataset\ndata_robustscaler = s.fit_transform(data)","b13951f4":"data.columns","9926d5a5":"df_robust = pd.DataFrame(data_robustscaler , columns=['track_name', 'size_bytes', 'price', 'rating_count_tot',\n       'rating_count_ver', 'user_rating', 'user_rating_ver', 'ver',\n       'cont_rating', 'prime_genre', 'sup_devices.num', 'ipadSc_urls.num',\n       'lang.num', 'vpp_lic'])\ndf_robust.head()","85652afc":"ilist = [] #list of inertias #sum of distance between data point and center of cluster\nn=25 #number of clusters \nfor i in range (1,n):\n    KMeanModel = KMeans(n_clusters=i , init='k-means++' , random_state=33 , algorithm='auto')\n    KMeanModel.fit(df_robust)#Fitting Model\n    ilist.append(KMeanModel.inertia_)\n    \nilist    ","766a1bab":"plt.plot(range(1,n) , ilist)\nplt.title('Elbow Graph')\nplt.xlabel('Clusters')\nplt.ylabel('Inertias')\nplt.show()\n#elbo graph to show less inertias as accuracy will be increasing ","42e7bdaf":"#calculate silhouette_score\nscore = []\nfor n in range(2,11):\n    KMean = KMeans(n_clusters=n , init='k-means++' , random_state=33 , algorithm='auto')\n    KMean.fit(df_robust)\n    result = KMean.labels_\n    print(n ,\"    \" , silhouette_score(df_robust , result))\n    score.append(silhouette_score(df_robust , result))","17761a93":"plt.style.use(\"fivethirtyeight\")\nplt.plot(range(2,11) , score)\nplt.title('*Elbow for # of cluster with  silhouette_score*')\nplt.xlabel('Cluster')\nplt.ylabel('silhouette_score')\nplt.show()","9dcb1d63":"KMeanModel = KMeans(n_clusters= 7, init='k-means++' , random_state=33 , algorithm='auto')\n#algorithm is auto , full or elkan\n#Fitting Model\nKMeanModel.fit(df_robust)\ny_predict=KMeanModel.predict(df_robust)\ncenters = KMeanModel.cluster_centers_\nlabels  = KMeanModel.labels_\ninertial= KMeanModel.inertia_\niteration=KMeanModel.n_iter_  ","e8b45589":"silhouette_Score = silhouette_score(df_robust , labels)\nprint('Silutescore Score for KMean :: ',silhouette_Score)","1d838076":"print('\\n Centers of 3 clusters :: \\n' , centers)\nprint('\\n Labels is :: \\n',labels)\nprint('\\n Y_Predictions :: \\n' , y_predict)\nprint('\\n Inertial is :: ',inertial)\nprint('\\n Iteration is :: ',iteration)","0bb8476f":"#convert data fram to np.array to avoid error\ndf_robust = np.array(df_robust) #that all\n# Visualising the clusters\nplt.scatter(df_robust[y_predict == 0, 0], df_robust[y_predict == 0, 1], s = 20, c = 'black', label = 'Cluster 1')\nplt.scatter(df_robust[y_predict == 1, 0], df_robust[y_predict == 1, 1], s = 20, c = '#05fadd', label = 'Cluster 2')\nplt.scatter(df_robust[y_predict == 2, 0], df_robust[y_predict == 2, 1], s = 20, c = 'green', label = 'Cluster 3')\nplt.scatter(df_robust[y_predict == 3, 0], df_robust[y_predict == 3, 1], s = 20, c = '#fa05dd', label = 'Cluster 4')\nplt.scatter(df_robust[y_predict == 4, 0], df_robust[y_predict == 4, 1], s = 20, c = '#0c0d0d', label = 'Cluster 5')\n\nplt.scatter(df_robust[y_predict == 5, 0], df_robust[y_predict == 5, 1], s = 20, c = '#f205de', label = 'Cluster 4')\nplt.scatter(df_robust[y_predict == 6, 0], df_robust[y_predict == 6, 1], s = 20, c = '#f27805', label = 'Cluster 5')\n\n\nplt.scatter(KMeanModel.cluster_centers_[:, 0], KMeanModel.cluster_centers_[:, 1], s = 100, c = 'yellow', label = 'Centroids')\nplt.title('Clusters of Apps')\nplt.legend()\n\nplt.show()\n","141b1256":"df_robust","e937ca6b":"df_robust = pd.DataFrame(df_robust ,columns=['track_name', 'size_bytes', 'price', 'rating_count_tot',\n       'rating_count_ver', 'user_rating', 'user_rating_ver', 'ver',\n       'cont_rating', 'prime_genre', 'sup_devices.num', 'ipadSc_urls.num',\n       'lang.num', 'vpp_lic'])\ndf_robust.head()","f62282b2":"pre = pd.DataFrame(y_predict ,columns=['cluster'])\npre.head()","e72471a9":"# Now we can use supervised learning\n#df_robust['Cluster'] =pre['cluster']\n#df_robust.head()","ac0ae364":"# Visualising the Clusters","df195d76":"**Top 7 apps on the basis of price**","fcffcf3e":"**from this graph The number of apps that have a price greater than 50 is few compared to before 50 USD**","e18b69c3":"**3 Cluster**","50e6869e":"# Clustering Model","d42b99f2":"# What about paid apps Vs Free apps ?","cccb45b1":"**Top app category is Games Games  # is 3862 and Entertainment # is 535**","e453d36a":"**The number of apps decreases with increasing his price**","dc5ce3e7":"after clustering we have 3 clusters from Apps according all features\n\nfuture work use this cluster to apply classification model ","018eab04":"# Important Libraries","96e8579e":"# PPS(Predictive Power Score)\nNon Linear Data","120b2f96":"# Finally!...","6b35d659":"we found variation in data as standard deviation is different\n\nsome of columns has big outliers ","0ff36438":"# Feature Engineering","cb65ec9c":"* Top Price in important Category (Business , Navigation , Education , Productivity )\n* in another side price for all of apps less than 50 USD\n* Education Apps has a higher price \n* Shopping Apps has a lower price","39eb850f":"# Are paid apps good enough ?","30a38218":"Rating of paid Apps between 3.5 - 5\n\nmaybe say is good paid apps","3fc07e0b":"In general # of Free apps greater than # of paid apps \nbut in (Business , Education ,Health ,Fitness,Medical,Music,Navigation ,Photo & Video,Productivity,Reference,Utilities,Weather)\n#of paid apps greater than # of free apps","c4cee788":"**Elbow for # of cluster with  silhouette_score**","8a2d30ba":"size of App not corelated with price \n\nwe show that if size is big ,price is low\n\nthe value of an app to the user isn't necessarily related to its size.","b9165df7":"Corellation between columns is very low ","31106afd":"data has float64(for 3 columns) , int64(8 columns), object(5 columns)\n\nwill Apply encoding for object columns ","14605678":"lower_apps in price also has high user-rating so paid apps is good","fdea98b6":"High Rating with catalogs , shopping\n\nLow rating in social networking","90dd0788":"#                               App_Store Clustering ","83ed8bbe":"# Standardizing - RobustScaler","111f0f34":"***when number of cluster is big ,inertia is low***","8bbf2796":"Correlation between user_rating_var , user_rating is high 77%\n\nipadSc_urls.num , user_rating is 27%\n\nipadSc_urls.num , user_rating_var is 28%","9f0ad4b1":"![20160711115215-Mobile-Business.jpeg](attachment:020631df-64e7-4628-ae6c-a62974538245.jpeg)","9a5ee6f7":"**Elbow Graph for Inertias & # of clusters**","b36e48dd":"| Column Name | Description |\n| --- | --- |\n| id | App ID |\n| track_name | App Name |\n| size_bytes | Size in bytes |\n| currency | Currency Type |\n| price | Price ammount |\n| ratingcounttot | User Rating counts (for all versions) |\n| ratingcountver | User Rating counts (for current version) |\n| user_rating | Average User Rating value (for all versions) |\n| userratingver | Average User Rating value (for current version) |\n| ver | Latest version code |\n| cont_rating | Content Rating |\n| prime_genre | Primary Genre |\n| sup_devices.num | Number of supporting devices |\n| ipadSc_urls.num | Number of screenshots showed for display |\n| lang.num | Number of supported languages |\n| vpp_lic | Vpp Device Based Licensing Enabled |","9a588a12":"higher Rating in Shopping & Catalogs","58dcc29e":"# How do you visualize price distribution of paid apps ?","00d05f21":"apps has high price also has high user-rating acording for that paid apps is good enough","4b287efb":"# Read Data","c17711b4":"**Cluster 2 or 3 **","75b918d0":"# How are the apps distributed category wise ? Can we split by paid category ?","9d627489":"Cataloge has Higher # of Free-Apps \n\nEducation has Higher # of Paid-Apps","6547b75d":"# As the size of the app increases do they get pricier ?","c5a284aa":"# Exploratory Data Analaysis","7536c047":"# How does the price distribution get affected by category ?","63159034":"## Data description","b52d4d9b":"**count of paid apps less than count of free apps**"}}