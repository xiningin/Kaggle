{"cell_type":{"39684383":"code","d7418903":"code","06450b32":"code","57546a68":"code","e8b60c50":"code","0e6be520":"code","b7f44536":"code","fa4e4d68":"code","be7019ae":"code","083c2f42":"code","750cefd0":"code","2dfc0b3a":"code","eeeb000e":"code","a7a0f503":"code","20d473db":"code","d78f80e1":"code","2e72b97c":"code","5a2530b8":"code","d8c1dd6c":"code","117c8173":"code","e7a19d57":"code","dec8038f":"code","7dca5cce":"code","dc14fa19":"code","bfc4e195":"code","c64b3565":"markdown","03b3d466":"markdown","5f732000":"markdown"},"source":{"39684383":"import csv\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport random","d7418903":"os.chdir(\"\/kaggle\/input\/\")","06450b32":"with open(\".\/digit-recognizer\/train.csv\") as f:\n    reader = csv.reader(f)\n    next(reader)\n    label = []\n    train = []\n    for row in reader:\n        label.append(np.float_(row[0]))\n        pixels = [np.float_(data) for data in row[1: ]]\n        train.append(pixels)","57546a68":"# Create a function to plot training dataset\ndef plot_random(data):\n    n = 6 # Number of instances\n    f = plt.figure(figsize=(10, 10))        \n    for plot in range(n):\n        random_id = random.randint(0, len(data)) # Pick random data\n        f.add_subplot(1, n, plot + 1)            # adding subplot for multiple plots\n        plt.imshow(np.array(data[random_id]).reshape(28, 28), cmap='gray',); # Plot the data using imshow function from matplotlib\n    plt.show(block = True)","e8b60c50":"plot_random(train)","0e6be520":"# Splitting The Dataset for Training Process\n\nsplit_ratio = int(0.1*len(train))\n\n# Converting the data into numpy array and normalizing it by dividing the pixels with 255.0\ntrain_images = [np.array(data)\/255.0 for data in train[split_ratio:]]\ntrain_label = [np.array(data) for data in label[split_ratio:]]\n\nvalidation_images = [np.array(data)\/255.0 for data in train[0:split_ratio]]\nvalidation_label = [np.array(data) for data in label[0:split_ratio]]","b7f44536":"import tensorflow as tf\nprint(tf.__version__)","fa4e4d68":"# Callback is used to stop training process if desired accuracy is achieved.\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if logs.get('accuracy') == 1:\n            print('\\n Target Accuracy Achieved.')\n            self.model.stop_training = True\ncallbacks = myCallback()            ","be7019ae":"# Construct the model layout\nmodel = tf.keras.models.Sequential([\n        # CNN\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape = (28, 28, 1)), # Define input shape as 28x28x1 since the image is in grayscale\n        tf.keras.layers.MaxPool2D(2, 2), \n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.MaxPool2D(2, 2),\n        # DNN\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(32, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Output Model Summary\nmodel.summary()\n\n# Define Optimizer, Loss, and metrics\n# Sparse Categorical Crossentropy is used for multiple classes classification.\nmodel.compile(optimizer = 'SGD', loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])","083c2f42":"# Reshape the input data to fit the model expected input.\ntrain_images = np.array(train_images).reshape(len(train_images), 28, 28, 1)\ntrain_label = np.array(train_label)\nvalidation_images = np.array(validation_images).reshape(len(validation_images), 28, 28, 1)\nvalidation_label = np.array(validation_label)","750cefd0":"# Fit the model and evaluate on validation data\nhistory = model.fit(x = train_images, y = train_label,\n          shuffle = True,\n          validation_data=(validation_images, validation_label),  \n          epochs = 100, verbose = 1, batch_size = 64,\n          callbacks = [callbacks])","2dfc0b3a":"# PLOT LOSS AND ACCURACY\n%matplotlib inline\n\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\naccuracy = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, 'r', label = 'Training Accuracy')\nplt.plot(epochs, val_acc, 'b', label = 'Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend();\nplt.figure();\n\nplt.plot(epochs, loss, 'r', label = 'Training Loss')\nplt.plot(epochs, val_loss, 'b', label = 'Validation Loss')\nplt.title('Training and Validation Loss')\nplt.legend();\nplt.figure();","eeeb000e":"# Change directory to output directory\n\nos.chdir('..\/working')","a7a0f503":"# Saving the model into determined path\nos.mkdir('.\/Saved_Model')\nmodel.save('.\/Saved_Model\/CNN')","20d473db":"# my_model directory\n!ls '.\/Saved_Model'\n\n# Contains an assets folder, saved_model.pb, and variables folder.\n!ls '.\/Saved_Model\/CNN'","d78f80e1":"# Load the model if needed.\n\n# model = tf.keras.models.load_model('Saved_Model\/CNN')\n\n# # Check its architecture\n# model.summary()","2e72b97c":"!pwd","5a2530b8":"# Open the Unseen Dataset\nwith open(\"..\/input\/digit-recognizer\/test.csv\") as f:\n    reader = csv.reader(f)\n    next(reader)\n    test = []\n    for row in reader:\n        pixels = [np.float_(data) for data in row]\n        test.append(pixels)\nlen(test)","d8c1dd6c":"# Plotting the unseen dataset.\nplot_random(test)","117c8173":"# Converting data into desired shape and type.\ntest_images = [np.array(data)\/255.0 for data in test]\ntest_images = np.array(test_images).reshape(len(test_images), 28, 28, 1)","e7a19d57":"test_images[0].shape","dec8038f":"# Using the tensorflow model to predict classes\npredictions = model.predict_classes(test_images)","7dca5cce":"import pandas as pd","dc14fa19":"# Generate submission file\nanswer = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nanswer['Label'] = predictions\nanswer.to_csv('.\/submission_digit_mnist.csv', index=False)","bfc4e195":"pd.read_csv('.\/submission_digit_mnist.csv')","c64b3565":"# Making Prediction","03b3d466":"# Digit Recognizer","5f732000":"# Training Model"}}