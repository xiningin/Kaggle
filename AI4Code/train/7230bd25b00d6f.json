{"cell_type":{"1f436aa6":"code","7866927b":"code","cb537d54":"code","86ff2355":"code","c85bc522":"code","b04e6f7f":"code","8e9b77a5":"code","37df31db":"code","9fa4b65b":"code","0c90da96":"code","4eb8cd5f":"code","66a6d2a5":"code","78c7df32":"code","e5fc1b3a":"code","6bb51e70":"code","da65474d":"markdown","556dea26":"markdown","368f9599":"markdown","fbc9ea1c":"markdown"},"source":{"1f436aa6":"#import libraries\nimport keras\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import preprocess_input","7866927b":"#Creating generator for Training DataSet\ntrain_datagen = ImageDataGenerator(\n        preprocessing_function=preprocess_input,\n        shear_range=0.1,\n        zoom_range=0.1,\n        horizontal_flip=True)\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/input\/100-bird-species\/train',\n        target_size=(224, 224),\n        batch_size=64,\n        class_mode='categorical')\n\n#Creating generator for Validation DataSet\nval_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\nval_generator = val_datagen.flow_from_directory(\n        '..\/input\/100-bird-species\/valid',\n        target_size=(224, 224),\n        batch_size=32,\n        class_mode='categorical')\n\n#Creating generator for Test DataSet\ntest_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_generator = test_datagen.flow_from_directory(\n        '..\/input\/100-bird-species\/test',\n        target_size=(224, 224),\n        batch_size=32,\n        class_mode='categorical')","cb537d54":"#instantiate a base model with pre-trained weigts.\nbase_model=keras.applications.VGG16(\n    include_top=False,\n    weights=\"imagenet\",\n    input_shape=(224,224,3))","86ff2355":"#freeze the base model\nbase_model.trainable = False","c85bc522":"#Create new model on top\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Dropout\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Flatten())\nmodel.add(Dense(2048,activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.35))\nmodel.add(Dense(2048,activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.35))\nmodel.add(Dense(200,activation='softmax',kernel_initializer='glorot_normal'))","b04e6f7f":"model.summary()","8e9b77a5":"#Train the model on new data.\nmodel.compile(optimizer=keras.optimizers.Adam(1e-4),loss='categorical_crossentropy',metrics=['accuracy'])\nhistory=model.fit(train_generator,epochs=40,validation_data=val_generator,workers=10,use_multiprocessing=True)","37df31db":"#Some visualizations\nimport matplotlib.pyplot as plt\n#Loss\nplt.plot(history.history['loss'],label='loss')\nplt.plot(history.history['val_loss'],label='val_loss')\nplt.legend()\nplt.show()\n#Accuracy\nplt.plot(history.history['accuracy'],label='acc')\nplt.plot(history.history['val_accuracy'],label='val_acc')\nplt.legend()\nplt.show()","9fa4b65b":"base_model=model.layers[0]","0c90da96":"#Un-Freezing last 2 blocks(i.e. block4 and 5)\n\nbase_model.trainable = True\n\nset_trainable = False\nfor layer in base_model.layers:\n    if layer.name == 'block4_conv1':\n        set_trainable = True\n    if set_trainable:\n        layer.trainable = True\n    else:\n        layer.trainable = False\n        \nbase_model.summary()\nmodel.summary()","4eb8cd5f":"model.compile(optimizer=keras.optimizers.Adam(1e-5),loss='categorical_crossentropy',metrics=['accuracy'])","66a6d2a5":"#Lets fine-tune finally....\nhistory=model.fit(train_generator,epochs=30,validation_data=val_generator,workers=10,use_multiprocessing=True)","78c7df32":"#few more epochs with low l_rate\nmodel.compile(optimizer=keras.optimizers.Adam(1e-6),loss='categorical_crossentropy',metrics=['accuracy'])\nhistory=model.fit(train_generator,epochs=10,validation_data=val_generator,workers=10,use_multiprocessing=True)","e5fc1b3a":"model.save(\"model_fine_tuned\")","6bb51e70":"model.evaluate(test_generator,use_multiprocessing=True,workers=10)","da65474d":"# **2.) Build and Train CNN (VGG16)** ","556dea26":"# **1.) Data-Preprocessing**","368f9599":"# 3.) Evaluation on Test Set","fbc9ea1c":"# **Fine-Tuning**"}}