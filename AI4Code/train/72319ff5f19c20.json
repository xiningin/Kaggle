{"cell_type":{"5e8c5676":"code","03939e05":"code","9f7790b2":"code","dd21d7af":"code","593f8d2d":"code","a52aac92":"code","2e7b781d":"code","9c956a5c":"code","9604e63c":"code","7e4911cd":"code","db2063a0":"code","b6038c99":"code","de814169":"code","8f5f6622":"code","1fce73f4":"code","5a4c05b3":"code","f16ba5bd":"code","ece5f564":"code","43a6a616":"code","49cd76da":"code","42210c8e":"code","51a6cd93":"code","8554f223":"code","6e1b2141":"code","cb5a7e4e":"code","886faf22":"code","e787f9b6":"code","59c18dab":"code","a936ed5d":"code","fdb10abf":"code","1f48639f":"code","134def49":"code","70b397db":"code","96ebb4dc":"code","3328e45a":"code","6c2b990c":"code","d1d80592":"code","3e5e3c65":"code","e384546a":"code","b0c67b1c":"code","bf724f1c":"markdown","253f9fc5":"markdown"},"source":{"5e8c5676":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', None)\n\nimport matplotlib.pyplot as plt","03939e05":"#Data Loading\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nprint('train_dim:', train.shape)\ntrain.head()","9f7790b2":"#Missing Values\ntrain.isna().sum()[train.isna().sum()>0].sort_values(ascending=False)","dd21d7af":"#Missing Values percentage\nNan_features = [features for features in train.columns if train[features].isna().sum()>0]\n\nfor feature in Nan_features:\n    print(feature, np.round(train[feature].isna().mean(),4),'% missing values')","593f8d2d":"#Relationship b\/w missing value and sale price\nfor feature in Nan_features:\n    df = train.copy()\n    df[feature] = np.where(df[feature].isna(),1,0)\n    \n    df.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","a52aac92":"# Numerical variables\n\nnumerical_features = [features for features in train.columns if train[features].dtypes != 'O']\nprint(\"number of numerical features: \", len(numerical_features))\ntrain[numerical_features].head()","2e7b781d":"# Temporal Variables\/ Datetime Variables\nYr_features = [features for features in train.columns if 'Yr' in features or 'Year' in features]\nprint('number of Temporal Variables:', len(Yr_features))\ntrain[Yr_features].head()","9c956a5c":"for feature in Yr_features:\n    data = train.copy()\n    data.groupby(feature)['SalePrice'].median().plot()\n    plt.title('House Prize vs '+feature)\n    plt.xlabel(feature)\n    plt.ylabel('median of Saleprice')\n    plt.show()\n    ","9604e63c":"## Here we will compare the difference between All years feature with SalePrice\n\nfor feature in Yr_features:\n    data = train.copy()\n    if feature != 'YrSold':\n        data[feature] = data['YrSold'] - data[feature]\n        data.groupby(feature)['SalePrice'].median().plot()\n        plt.title(feature)\n        plt.xlabel(feature)\n        plt.ylabel('median of sale price')\n        plt.show()\n","7e4911cd":"## Here we will compare the difference between All years feature with SalePrice with scatter plot\n\nfor feature in Yr_features:\n    data = train.copy()\n    if feature != 'YrSold':\n        data[feature] = data['YrSold'] - data[feature]\n        plt.scatter(data[feature], data['SalePrice'])\n        plt.title(feature)\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()\n        \n","db2063a0":"for feature in train.columns:\n    print(feature,'has', train[feature].nunique(), 'unique values')","b6038c99":"## Numerical variables are usually of 2 type\n## 1. Continous variable and Discrete Variables\n\ndiscrete_feature = [features for features in numerical_features if train[features].nunique()<50 and features not in Yr_features+['Id']]\nprint('number od discrete variables:', len(discrete_feature))\ntrain[discrete_feature].head()","de814169":"# Find the realtionship between them and Sale PRice\n\nfor feature in discrete_feature:\n    data = train.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.xlabel(feature)\n    plt.ylabel('median of sale price')\n    plt.show()\n    ","8f5f6622":"# Continuous variables\ncontinuous_features = [features for features in numerical_features if features not in discrete_feature and features not in Yr_features+['Id']]\nprint(\"number of continuous variables:\", len(continuous_features))\ntrain[continuous_features].head()\n","1fce73f4":"# Find the realtionship between them and Sale PRice\nfor feature in continuous_features:\n    data = train.copy()\n    plt.hist(data[feature])\n    plt.show()","5a4c05b3":"#checking skewness\n\nfrom scipy.stats import skew \n\nnumeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumerics2 = []\nfor i in train.columns:\n    if train[i].dtype in numeric_dtypes:\n        numerics2.append(i)\nprint(len(numerics2))\n\nskew_features = train[numerics2].apply(lambda x: skew(x)).sort_values(ascending = False)\nhigh_skewed  = skew_features[skew_features>0.5]\nprint(high_skewed.shape)\nskew_index = high_skewed.index\nhigh_skewed","f16ba5bd":"# Find the realtionship between them and Sale PRice\nfor feature in continuous_features:\n    data = train.copy()\n    plt.figure(figsize=(10,5))\n    sns.distplot(data[feature])\n#     plt.title(feature)\n#     plt.xlabel(feature)\n#     plt.ylabel('median of SalePrice')\n    plt.show()","ece5f564":"for feature in continuous_features:\n    try:\n        data = train.copy()\n        data[feature]=np.log(data[feature])\n        sns.distplot(data[feature])\n        plt.show()\n    except:\n        pass","43a6a616":"skew_log = data[continuous_features].apply(lambda x: skew(x)).sort_values(ascending=False)\nskew_log","49cd76da":"from scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\nfor i in skew_index:\n    train[i] = boxcox1p(train[i], boxcox_normmax(train[i] + 1))","42210c8e":"#cheking skewness after applying box-cox\nskew_boxcox = train[skew_index].apply(lambda x: skew(x)).sort_values(ascending=False)\nskew_boxcox","51a6cd93":"# distplot after box-cox\n# for feature in skew_index:\n#     data = train.copy()\n#     plt.figure(figsize=(10,5))\n#     sns.distplot(data[feature])\n# #     plt.title(feature)\n# #     plt.xlabel(feature)\n# #     plt.ylabel('median of SalePrice')\n#     plt.show()","8554f223":"# for feature in continuous_features:\n#     data = train.copy()\n#     if 0 in data[feature].unique():\n#         pass\n#     else:\n#         plt.scatter(data[feature], data['SalePrice'])\n#         plt.title(feature)\n#         plt.xlabel(feature)\n#         plt.ylabel('SalePrice')\n#         plt.show()","6e1b2141":"for feature in continuous_features:\n    data = train.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data['SalePrice'] = np.log(data['SalePrice'])\n        plt.scatter(data[feature], data['SalePrice'])\n        plt.title(feature)\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","cb5a7e4e":"#Outliers\n\nfor features in continuous_features:\n    data = train.copy()\n    if 0 in data[features].unique():\n        pass\n    else:\n        data[features] = np.log(data[features])\n        data.boxplot(column = features)\n    #     plt.title(features)\n    #     plt.xlabel(features)\n    #     plt.ylabel(features)\n        plt.show()","886faf22":"# Categorical Variables\ncat_features = [features for features in train.columns if train[features].dtypes == 'O']\nprint('number of categorical variables:', len(cat_features))\ntrain[cat_features].head()","e787f9b6":"for feature in cat_features:\n    print('{} has {} unique categories'.format(feature,train[feature].nunique()))","59c18dab":"# relationship between categorical variable and dependent feature SalesPrice\nfor feature in cat_features:\n    data = train.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.xlabel(feature)\n    plt.ylabel('median of Sale price')\n    plt.show()","a936ed5d":"# lets handle Categorical features which are missing\nfeatures_cat_nan = [features for features in train.columns if train[features].isnull().sum()>1 and train[features].dtypes=='O']\n\nfor features in features_cat_nan:\n    print('{}: {} % of missing values'.format(features, np.round(train[features].isnull().mean(),3)))","fdb10abf":"## Replace missing value with a new label\ntrain[features_cat_nan] = train[features_cat_nan].fillna('Missing')\ntrain[features_cat_nan].isnull().sum()","1f48639f":"# check for numerical variables the contains missing values\nfeatures_nue_nan = [features for features in train.columns if train[features].isna().sum()>0 and train[features].dtypes != 'O']\n\nfor features in features_nue_nan:\n    print('{}: {} % of missing values'.format(features, np.round(train[features].isnull().mean(),3)))","134def49":"# Replacing the numerical Missing Values and create a new feature to capture nan values\nfor features in features_nue_nan:\n    train[features+'Nan'] = np.where(train[features].isna(),1,0)\n    train[features].fillna(train[features].median(), inplace=True)\n\ntrain[features_nue_nan].isna().sum()","70b397db":"print(train.shape)\ntrain.head()","96ebb4dc":"## Temporal Variables (Date Time Variables)\n\ntemporal_features = [feature for feature in train.columns if 'Yr' in feature or 'Year' in feature]\ntemporal_features","3328e45a":"temporal_features = ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']\n\nfor feature in temporal_features:\n    train[feature] = train['YrSold']-train[feature]\n\ntrain[temporal_features].head()","6c2b990c":"# Since the numerical variables are skewed we will perform log normal distribution\nimport numpy as np\nnum_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\n\nfor feature in num_features:\n    train[feature]=np.log(train[feature])","d1d80592":"#Handling Rare Categorical Feature\n#We will remove categorical variables that are present less than 1% of the observations\n\ncategorical_features=[feature for feature in train.columns if train[feature].dtype=='O']\nprint(categorical_features)","3e5e3c65":"for feature in categorical_features:\n    temp=train.groupby(feature)['SalePrice'].count()\/len(train)\n    temp_df=temp[temp>0.01].index\n    train[feature]=np.where(train[feature].isin(temp_df),train[feature],'Rare_var')","e384546a":"train.groupby('LotShape')['SalePrice'].count()\/len(train)\n","b0c67b1c":"train.head()","bf724f1c":"### Box-Cox ","253f9fc5":"### Log tranform"}}