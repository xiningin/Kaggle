{"cell_type":{"755ecb22":"code","8b3a5e89":"code","b4abc0bc":"code","8272c20c":"code","475cabe8":"code","77b19fc8":"code","22bf53cc":"code","72683c24":"code","8f848254":"code","d819d3c9":"code","c0d25ce1":"code","acbb2d92":"code","d5f416f3":"code","8c4f3459":"code","57c437d2":"code","11db3f4d":"code","73cdee21":"code","6089b26f":"code","88b13074":"code","0933b5b9":"code","1163ea5e":"code","1a3b4f32":"code","2689b228":"code","22a27656":"code","9076533f":"code","8b0a53b8":"code","f30dcbee":"code","67df4cc4":"code","92b40e8c":"code","a69d2799":"code","ec647f09":"code","d071a4de":"code","81994612":"markdown","4acc4ed9":"markdown"},"source":{"755ecb22":"import numpy as np # linear algebra\nimport pandas as pd\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8b3a5e89":"train_datapath = '..\/input\/demand-forecasting-kernels-only\/train.csv'\ntest_datapath = '..\/input\/demand-forecasting-kernels-only\/test.csv'\nsubmission_datapath = '..\/input\/demand-forecasting-kernels-only\/sample_submission.csv'","b4abc0bc":"df_train = pd.read_csv(train_datapath)\ndf_test = pd.read_csv(test_datapath)\ndf_submission = pd.read_csv(submission_datapath)","8272c20c":"df_train.head()","475cabe8":"df_test.head()","77b19fc8":"df_submission.head()","22bf53cc":"def convert_dates(x):\n    x['date']=pd.to_datetime(x['date']) #converting date column to datetime format\n    x['month']=x['date'].dt.month #creating a new column 'month' from 'date' using dt.month\n    x['year']=x['date'].dt.year #same - for year\n    x['dayofweek']=x['date'].dt.dayofweek #same - for day\n    x.pop('date') #delete 'date' column\n    return x","72683c24":"df_train = convert_dates(df_train)","8f848254":"df_train.head()","d819d3c9":"df_test = convert_dates(df_test)","c0d25ce1":"df_test.head()","acbb2d92":"def add_avg(x):\n    x['daily_avg']=x.groupby(['item','store','dayofweek'])['sales'].transform('mean') #daily_avg column based on sales per day\n    x['monthly_avg']=x.groupby(['item','store','month'])['sales'].transform('mean') #monthly_avg column based on sales per month\n    return x","d5f416f3":"df_train = add_avg(df_train)","8c4f3459":"df_train.head()","57c437d2":"daily_avg = df_train.groupby(['item','store','dayofweek'])['sales'].mean().reset_index() #finding daily_avg value to use in x_pred","11db3f4d":"monthly_avg = df_train.groupby(['item','store','month'])['sales'].mean().reset_index() #finding monthly_avg value to use in x_pred","73cdee21":"def merge(x,y,col,col_name):\n    x =pd.merge(x, y, how='left', on=None, left_on=col, right_on=col,\n            left_index=False, right_index=False, sort=True,\n             copy=True, indicator=False,validate=None)\n    x=x.rename(columns={'sales':col_name})\n    return x","6089b26f":"df_test = merge(df_test, daily_avg,['item','store','dayofweek'],'daily_avg')\ndf_test = merge(df_test, monthly_avg,['item','store','month'],'monthly_avg')","88b13074":"df_test.sample(10)","0933b5b9":"x_train,x_test,y_train,y_test = train_test_split(df_train.drop('sales',axis=1),df_train.pop('sales'),random_state=123,test_size=0.2) #splitting train dataset to test\/train","1163ea5e":"def XGBmodel(x_train,x_test,y_train,y_test):\n    matrix_train = xgb.DMatrix(x_train,label=y_train)\n    matrix_test = xgb.DMatrix(x_test,label=y_test)\n    model=xgb.train(params={'objective':'reg:linear','eval_metric':'mae'} #reg:linear cuz target value is a regression, mae for mean absolute error, can be rmse as well. More info - see documentation\n                    ,dtrain=matrix_train,num_boost_round=200, \n                    early_stopping_rounds=20,evals=[(matrix_test,'test')],) #early_stopping_rounds = 20 : stop if 20 consequent rounds without decrease of error\n    return model\n\nmodel=XGBmodel(x_train,x_test,y_train,y_test)","1a3b4f32":"x_test_pred = model.predict(xgb.DMatrix(x_test))","2689b228":"from sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom math import sqrt","22a27656":"mean_squared_error(y_true=y_test,\n                   y_pred=x_test_pred)","9076533f":"root_mean_sqaure_error_RMSE = sqrt(mean_squared_error(y_true=y_test, y_pred=x_test_pred))\nroot_mean_sqaure_error_RMSE","8b0a53b8":"mean_absolute_error(y_true=y_test,\n                   y_pred=x_test_pred)","f30dcbee":"submission = pd.DataFrame(df_test.pop('id'))","67df4cc4":"submission.head()","92b40e8c":"y_pred = model.predict(xgb.DMatrix(df_test), ntree_limit = model.best_ntree_limit) #best_ntree_limit derives from best iteration in the model which is 87. For that, need to enable early stopping in the model.","a69d2799":"submission['sales']= y_pred","ec647f09":"submission.to_csv('submission.csv',index=False)","d071a4de":"submission.head()","81994612":"# XGBoost\n\nInstead of numpy arrays or pandas dataFrame, XGBoost uses DMatrices. A DMatrix can contain both the features and the target. If you already have loaded you data into numpy arrays X and y, you can create a DMatrix with: <br>\n\nxgb.DMatrix(X, label=y)","4acc4ed9":"https:\/\/blog.cambridgespark.com\/hyperparameter-tuning-in-xgboost-4ff9100a3b2f - Tutorial Link\nhttps:\/\/xgboost.readthedocs.io\/en\/latest\/parameter.html - Documentation"}}