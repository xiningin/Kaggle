{"cell_type":{"96b27a1f":"code","01b2f83d":"code","95d24e69":"code","c27e0dae":"code","4329d77c":"code","28023392":"code","205f2eee":"code","1cdf55ad":"code","2065da32":"code","50b2a101":"code","414677f4":"code","6a2d7278":"code","bf106d4c":"code","89ff3213":"code","d8590f31":"code","3653d10e":"code","5dd65240":"code","692255bb":"code","15b79c7a":"code","94a78c6f":"code","cdea95bd":"code","df28a54c":"code","6fb6c467":"code","5d369f82":"code","f3668112":"code","7ab0b81c":"code","ee2408ad":"code","cb3fd806":"code","914f9248":"code","d81d8eda":"code","bebaf48f":"code","b2899379":"code","b4f402c8":"code","b733aa73":"code","b7b1065d":"code","727eb2da":"code","3834ac8c":"code","e2170092":"markdown","c9090cbf":"markdown","ea86ba0e":"markdown","63adc106":"markdown"},"source":{"96b27a1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.utils import to_categorical\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01b2f83d":"import cv2\nimport os\nimport glob\nimport gc\nimport random","95d24e69":"\ndef lire_images(img_dir, xdim, ydim, nmax=5000) :\n    \"\"\" \n    Lit les images dans les sous r\u00e9pertoires de img_dir\n    nmax images lues dans chaque r\u00e9pertoire au maximum\n    Renvoie :\n    X : liste des images lues, matrices xdim*ydim\n    y : liste des labels num\u00e9riques\n    label : nombre de labels\n    label_names : liste des noms des r\u00e9pertoires lus\n    \"\"\"\n    label = 0\n    label_names = []\n    X = []\n    y=[]\n    for dirname in os.listdir(img_dir):\n        print(dirname)\n        label_names.append(dirname)\n        data_path = os.path.join(img_dir + \"\/\" + dirname,'*g')\n        files = glob.glob(data_path)\n        n=0\n        for f1 in files:\n            if n>nmax : break\n            img = cv2.imread(f1) # Lecture de l'image dans le repertoire\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Conversion couleur RGB\n            img = cv2.resize(img, (xdim,ydim)) # Redimensionnement de l'image\n            X.append(np.array(img)) # Conversion en tableau et ajout a la liste des images\n            y.append(label) # Ajout de l'etiquette de l'image a la liste des etiquettes\n            n=n+1\n        print(n,' images lues')\n        label = label+1\n    X = np.array(X)\n    y = np.array(y)\n    gc.collect() # R\u00e9cup\u00e9ration de m\u00e9moire\n    return X,y, label, label_names","c27e0dae":"X, y, Nombre_classes, Classes = lire_images(\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\", 224, 224, 1000)","4329d77c":"Nombre_classes","28023392":"Classes","205f2eee":"\nplt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    j = random.randint(0,len(X))\n    plt.axis('off')\n    plt.imshow(X[j])\n    plt.title(Classes[y[j]])","1cdf55ad":"y = to_categorical(y)\ny","2065da32":"X.shape","50b2a101":"# Normalisation entre 0 et 1\nX = X \/ 255\nprint(X[0][0])","414677f4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","6a2d7278":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(224, 224, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","bf106d4c":"model.summary()","89ff3213":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=1)","d8590f31":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","3653d10e":"# On d\u00e9finit une fonction pour afficher un graphique des scores :\ndef plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","5dd65240":"plot_scores(train)","692255bb":"predict_x=model.predict(X_test)\ny_cnn=np.argmax(predict_x,axis=1)","15b79c7a":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<6):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (Classes[y_cnn[j]], Classes[y_test[j].argmax(axis=-1)]))\n        i+=1","94a78c6f":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(224, 224, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","cdea95bd":"model.summary()","df28a54c":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, verbose=1)","6fb6c467":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","5d369f82":"plot_scores(train)","f3668112":"model.save('mnist_cnn2.h5')","7ab0b81c":"new_model = load_model('mnist_cnn2.h5')\nnew_model.summary()","ee2408ad":"scores = new_model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","cb3fd806":"from tensorflow.keras.applications import VGG16\nvgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))\nvgg16.trainable = False","914f9248":"vgg16.summary()","d81d8eda":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(Nombre_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","bebaf48f":"model.summary()","b2899379":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=30, verbose=1)","b4f402c8":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","b733aa73":"for i in range (len(vgg16.layers)):\n    print (i,vgg16.layers[i])","b7b1065d":"plot_scores(train)","727eb2da":"predict_x=model.predict(X_test)\ny_cnn=np.argmax(predict_x,axis=1)","3834ac8c":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j].argmax(axis=-1)) & (i<10):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (Classes[y_cnn[j]], Classes[y_test[j].argmax(axis=-1)]))\n        i+=1","e2170092":"## Keras","c9090cbf":"# Lecture des images","ea86ba0e":"# CNN","63adc106":"# Couche Convolutionnelle"}}