{"cell_type":{"e11ede85":"code","dd5a52ef":"code","69505713":"code","24deff8e":"code","13693593":"code","9d23db53":"code","8fd95712":"code","f40f32d5":"code","aae76965":"code","b288302e":"code","3148f0a7":"code","e022bb07":"code","c1934e25":"code","a138a50a":"code","48338fa6":"code","e578e9eb":"code","f4c68326":"code","6d01ed6a":"code","0c5ab896":"code","4f0199fe":"code","7e1637eb":"code","8084d9f6":"code","a1ab015b":"code","9cd3844c":"code","95ae9961":"code","01fa7018":"code","b1370178":"code","650f71a9":"code","c902f32a":"code","b1427ec2":"code","47a61754":"code","07e1df16":"code","20feca85":"code","bb80bd7b":"code","5c2c9719":"code","980189dc":"code","093553ba":"code","c2edead4":"code","15ced6f7":"code","a5d06560":"code","fb4f10cc":"code","d8a91b8b":"code","6ea16416":"code","93071302":"code","0969bf0f":"code","6773fc0f":"code","0dfb69ac":"code","4b3709ba":"code","a46aafd9":"code","d15b39b9":"code","2c9f0280":"code","00cb5982":"code","4a100bbc":"code","bad04eb1":"code","7ba598fd":"code","3211a80c":"code","f83798e8":"code","9e9174f3":"code","dec1a6da":"code","431a0d80":"code","e755fcec":"code","3c54007f":"code","c0c5d936":"code","0fd57f96":"code","d4c8733b":"code","4a673100":"code","61ce3c42":"code","1514493c":"code","df6ea6e9":"code","af58585a":"code","7147fa4a":"code","e0f763cb":"code","6642f3b0":"code","03a6df66":"code","388f0c9d":"code","47ac45a8":"code","e9ae1b7d":"code","a17fa29c":"code","d91a589b":"code","7856cf3e":"code","3c6c1618":"code","f19a19d9":"code","f3073fe7":"code","d25bd3b6":"code","52a9c328":"code","139c59c0":"code","b4e732cc":"code","ccacb7ec":"markdown","30b11a3d":"markdown","4ffaa1ae":"markdown","df23fe7e":"markdown","e74f94ba":"markdown","62ab9718":"markdown","c80ac160":"markdown","16c30c36":"markdown","fd07bc1f":"markdown","d0084a85":"markdown","81d83acc":"markdown","027138cb":"markdown","b7a2483f":"markdown","31766f3d":"markdown","bcb227a6":"markdown","69a4d402":"markdown","a0dad4fb":"markdown","2cc085b9":"markdown","6eacd8e5":"markdown","5eb861b1":"markdown","34b4a180":"markdown","da95154c":"markdown","0ac91fa6":"markdown","25015790":"markdown","7fa833b5":"markdown","5141edd2":"markdown","c8f0d0fa":"markdown","2298acf9":"markdown","ff7e00c4":"markdown","e00d287c":"markdown","85c9d02b":"markdown","73350d90":"markdown","4f770ceb":"markdown","1a61f48a":"markdown","48acac18":"markdown","998a6a2d":"markdown","e612f011":"markdown","a5b25e5f":"markdown","d7c0ad68":"markdown","03895647":"markdown","5bacfd5f":"markdown","36160568":"markdown","9c6139cf":"markdown","e7a4aa96":"markdown","4e9d1d21":"markdown"},"source":{"e11ede85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd5a52ef":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_PassengerId = test_df['PassengerId']","69505713":"train_df.columns","24deff8e":"train_df.head()","13693593":"train_df.describe()","9d23db53":"def bar_plot(variable): \n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    \n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","8fd95712":"category1 = ['Survived','Sex','Pclass','Embarked','SibSp', 'Parch']\nfor c in category1:\n    bar_plot(c)","f40f32d5":"category2 = ['Cabin','Name','Ticket']\nfor c in category2:\n    print(\"{}: \\n\".format(train_df[c]))","aae76965":"def plot_hist(variable):\n    plt.figure(figsize =(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","b288302e":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","3148f0a7":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","e022bb07":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","c1934e25":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","a138a50a":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","48338fa6":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","e578e9eb":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f4c68326":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","6d01ed6a":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","0c5ab896":"train_df.head()","4f0199fe":"train_df.columns[train_df.isnull().any()]","7e1637eb":"train_df.isnull().sum()","8084d9f6":"train_df[train_df[\"Embarked\"].isnull()]","a1ab015b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","9cd3844c":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","95ae9961":"train_df[train_df[\"Fare\"].isnull()]","01fa7018":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","b1370178":"train_df[train_df[\"Fare\"].isnull()]","650f71a9":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","c902f32a":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b1427ec2":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","47a61754":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","07e1df16":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","20feca85":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","bb80bd7b":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","5c2c9719":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","980189dc":"train_df[train_df[\"Age\"].isnull()]","093553ba":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","c2edead4":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","15ced6f7":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","a5d06560":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","fb4f10cc":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","d8a91b8b":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","6ea16416":"train_df[train_df[\"Age\"].isnull()]","93071302":"train_df[\"Name\"].head(10)","0969bf0f":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","6773fc0f":"train_df[\"Title\"].head(10)","0dfb69ac":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","4b3709ba":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","a46aafd9":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","d15b39b9":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","2c9f0280":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","00cb5982":"train_df.head()","4a100bbc":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","bad04eb1":"train_df.head()","7ba598fd":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","3211a80c":"train_df.head()","f83798e8":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","9e9174f3":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","dec1a6da":"train_df.head(10)","431a0d80":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","e755fcec":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","3c54007f":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","c0c5d936":"train_df[\"Embarked\"].head()","0fd57f96":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","d4c8733b":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","4a673100":"train_df[\"Ticket\"].head(20)","61ce3c42":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","1514493c":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","df6ea6e9":"train_df[\"Ticket\"].head(20)","af58585a":"train_df.head()","7147fa4a":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","e0f763cb":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","6642f3b0":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","03a6df66":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","388f0c9d":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","47ac45a8":"train_df.columns","e9ae1b7d":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","a17fa29c":"train_df_len","d91a589b":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","7856cf3e":"test.head()","3c6c1618":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","f19a19d9":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","f3073fe7":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","d25bd3b6":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","52a9c328":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","139c59c0":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))\n","b4e732cc":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","ccacb7ec":"## Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","30b11a3d":"<a id=\"26\"><a\/>\n## Pclass","4ffaa1ae":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","df23fe7e":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","e74f94ba":"* pclass is important feature for model training.","62ab9718":"<a id=\"30\"><a\/>\n## Train - Test Split","c80ac160":"<a id=\"4\"><a\/>\n## Categorical Variable Analysis","16c30c36":"<a id=\"3\"><a\/>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","fd07bc1f":"<a id=\"17\"><a\/>\n## Pclass -- Survived -- Age\n    ","d0084a85":"<a id=\"19\"><a\/>\n## Embarked -- Fare -- Pclass -- Survived","81d83acc":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","027138cb":"<a id=\"16\"><a\/>\n## Age -- Survived","b7a2483f":"* Sex is not informative for age prediction, age distribution seems to be same.","31766f3d":"<a id=\"32\"><a\/>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n    \nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n    * Decision Tree\n    * SVM\n    * Random Forest\n    * KNN\n    * Logistic Regression","bcb227a6":"<a id=\"15\"><a\/>\n## Pclass -- Survived","69a4d402":"<a id=\"25\"><a\/>\n## Ticket","a0dad4fb":"<a id=\"20\"><a\/>\n## Fill Missing: Age Feature","2cc085b9":"<a id=\"9\"><a\/>\n## Find Missing Value","6eacd8e5":"<a id=\"2\"><a\/>\n## Variable Description\n    \n1.PassengerId: unique id number to each passenger\n    \n2.Survived: passenger survive(1) or died(0)\n    \n3.Pclass: passenger class\n    \n4.Name: name\n    \n5.Sex: gender of passenger\n    \n6.Age: age of passenger\n    \n7.SibSp(Siblings-Spouses): number of siblings\/spouses\n    \n8.Parch(Parent-Child): number of parents\/children\n    \n9.Ticket: ticket number\n    \n10.Fare: amount of money spent on ticket\n    \n11.Cabin: cabin category\n    \n12.Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","5eb861b1":"<a id=\"14\"><a\/>\n## Parch -- Survived","34b4a180":"<a id=\"10\"><a\/>\n## Fill Missing Value\n    * Embarked has 2 missing value\n    * Fare has only 1","da95154c":"<a id=\"27\"><a\/>\n## Sex","0ac91fa6":"<a id=\"5\"><a\/>\n## Numerical Variable Analysis","25015790":"<a id=\"24\"><a\/>\n## Embarked","7fa833b5":"<a id=\"33\"><a\/>\n## Ensemble Modeling","5141edd2":"<a id=\"1\"><a\/>\n## Load ans Check Data","c8f0d0fa":"* loat64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","2298acf9":"<a id=\"18\"><a\/>\n## Embarked -- Sex -- Pclass -- Survived","ff7e00c4":"<a id=\"13\"><a\/>\n## SibSp -- Survived","e00d287c":"<a id=\"7\"><a\/>\n## Outlier Detection","85c9d02b":"<a id=\"29\"><a\/>\n## Modeling","73350d90":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","4f770ceb":"* Female passengers have much better survival rate than males.\n* males have better surv\u015fval rate in pclass 3 in C.\n* embarked and sex will be used in training.","1a61f48a":"<a id=\"31\"><a\/>\n## Simple Logistic Regression","48acac18":"* Small familes have more chance to survive than large families.","998a6a2d":"* Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","e612f011":"<a id=\"21\"><a\/>\n## Feature Engineering","a5b25e5f":"<a id=\"28\"><a\/>\n## Drop Passenger ID and Cabin","d7c0ad68":"<a id=\"23\"><a\/>\n## Family Size","03895647":"<a id=\"34\"><a\/>\n## Prediction and Submission","5bacfd5f":"<a id=\"22\"><a\/>\n## Name -- Title","36160568":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","9c6139cf":"<a id=\"12\"><a\/>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived\n","e7a4aa96":"<a id=\"8\"><a\/>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","4e9d1d21":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwredcks in the history. In 1992, during her voyage, the Titaniv sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color='red'>\nContent:\n\n1. [Load ans Check Data](#1)\n2. [Varible Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n8. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)"}}