{"cell_type":{"8f6c9852":"code","3c7b2551":"code","f490b503":"code","3cf67dfd":"code","8e07c6b4":"code","ab51113b":"code","858b4e34":"code","4a523286":"code","580647d1":"code","b1af8ecf":"markdown","e66ce5e1":"markdown"},"source":{"8f6c9852":"from read_arabic_letters_dataset import (\n    ReadArabicHandwrittenLettersDataset,\n    plot_letter,\n    plot_multiple_letters\n)","3c7b2551":"data = ReadArabicHandwrittenLettersDataset()","f490b503":"data.x_train.shape, data.Y_train.shape, data.x_test.shape, data.Y_test.shape","3cf67dfd":"type(data.x_train), type(data.Y_train)","8e07c6b4":"plot_multiple_letters(data.x_train, 4, 17)","ab51113b":"plot_letter(ix=7, data=data.x_train)","858b4e34":"sample_data = data.get_sample_data([2, 6]) # two letters only e.g. h and b (each letter has 480 example in train and 120 in test)\nplot_letter(0, sample_data)\nplot_letter(600, sample_data)","4a523286":"plot_multiple_letters(sample_data, rows=4, cols=10)","580647d1":"%%writefile read_arabic_letters_dataset.py\n\n\"\"\"This script reads and prepares the \"ahcd1\/Arabic Handwritten Characters Dataset CSV\" dataset\n\nBy: https:\/\/github.com\/iamaziz\nMon May 11 19:42:55 EDT 2020\n\nDownload the dataset at: https:\/\/www.kaggle.com\/mloey1\/ahcd1\n\"\"\"\nfrom functools import lru_cache\nfrom typing import List\n\nimport numpy as np\nimport matplotlib.pyplot as plt  # for plotting letters\n\n\nDATA_DIR = \"\/kaggle\/input\/ahcd1\/\"\nFILE_NAMES = [\n    \"csvTrainImages 13440x1024.csv\",\n    \"csvTestImages 3360x1024.csv\",\n    \"csvTrainLabel 13440x1.csv\",\n    \"csvTestLabel 3360x1.csv\",\n]\n\n\nclass ReadArabicHandwrittenLettersDataset:\n    def __init__(self):\n        self.files = [f\"{DATA_DIR}{f}\" for f in FILE_NAMES]\n        # raw data\n        print(\"reading data ..\")\n        self.X_train, self.X_test, self.Y_train, self.Y_test = [\n            self.csv2ndarray(i) for i in range(len(self.files))\n        ]\n        print(\"raw: \")\n        print(\n            self.X_train.shape, self.X_test.shape, self.Y_train.shape, self.Y_test.shape\n        )\n        # pre-processed data\n        self.x_train, self.x_test = self.reshape_data()\n        print(\"reshaped:\")\n        print(\n            self.x_train.shape, self.x_test.shape, self.Y_train.shape, self.Y_test.shape\n        )\n\n        self.LETTERS_IDS_train = list(set(self.Y_train))\n        self.LETTERS_IDS_test = list(set(self.Y_test))\n\n    @lru_cache()\n    def csv2ndarray(self, i) -> np.ndarray:\n        \"\"\"Read csv matrix data with Numpy\"\"\"\n        return np.genfromtxt(self.files[i], delimiter=\",\")\n\n    def reshape_data(self):\n        x_train = self.X_train.reshape((13440, 32, 32))\n        x_test = self.X_test.reshape((3360, 32, 32))\n        return x_train, x_test\n\n    @staticmethod\n    def indices_of_letter(letter_num: float, data: np.ndarray) -> List:\n        return np.where(data == letter_num)[0]\n\n    def _letters_indices_in_dataset(self, letters):\n        # .. from train data\n        sample_train_idxs = [self.indices_of_letter(l, self.Y_train) for l in letters]\n        sample_train_idxs = [item for sublist in sample_train_idxs for item in sublist]\n        # in train data each letter has 480 samples\n        assert len(sample_train_idxs) == 480 * len(letters)\n\n        # .. from test data\n        sample_test_idxs = [self.indices_of_letter(l, self.Y_test) for l in letters]\n        sample_test_idxs = [item for sublist in sample_test_idxs for item in sublist]\n        # in test data each letter has 120 samples\n        assert len(sample_test_idxs) == 120 * len(letters)\n\n        print(len(sample_train_idxs), len(sample_test_idxs))\n\n        # concat indices\n        sample_idx = sample_train_idxs + sample_test_idxs\n        len(sample_idx)\n\n        return sample_train_idxs, sample_test_idxs\n\n    def get_sample_data(self, sample_letters: List[int]) -> np.ndarray:\n        train_idxs, test_idxs = self._letters_indices_in_dataset(letters=sample_letters)\n        # select target letters data\n        sample_train_data = self.x_train[train_idxs]\n        sample_test_data = self.x_test[test_idxs]\n        print(sample_train_data.shape, sample_test_data.shape)\n        sample_data = np.concatenate([sample_train_data, sample_test_data])\n        print(sample_data.shape)\n        return sample_data\n\n\n#################\n# -- HELPERS -- #\n#################\n\n\ndef plot_letter(ix: int, data: np.ndarray):\n    number = data[ix].T\n    plt.imshow(number, cmap=\"gray\")\n    plt.show()\n\n\ndef plot_multiple_letters(data: np.ndarray, rows=2, cols=3):\n    \"\"\"plot randomly selected letters from `data`\"\"\"\n    from random import randint\n\n    fig, axes = plt.subplots(rows, cols, figsize=(13, 7))\n\n    idx = [(i, j) for i in range(rows) for j in range(cols)]\n    for i, ix in enumerate(idx):\n        ax = axes[ix]\n        i = randint(0, len(data))\n        d = data[i].T  # TODO: FIX letters reshaping and rotation! must be without .T\n        ax.imshow(d, cmap=\"gray\")\n    plt.show()","b1af8ecf":"<hr>\n<hr>","e66ce5e1":"This script reads, preprocesses, and plot the `ahcd1` dataset.\n\n\n> NOTE: run the last cell of this notebook (at the bottom) to create `read_arabic_letters_dataset.py` file"}}