{"cell_type":{"bfa94448":"code","d6a3d6f4":"code","fd4fdb7b":"code","3ad74fc3":"code","c07501a7":"code","bde66bbc":"code","bc409903":"code","09200db3":"code","3d22e37b":"code","cb633bf3":"code","4f337bb0":"code","fcf6fe83":"code","d1fa5590":"code","10c49b10":"code","7e79baad":"code","02235228":"code","9c8cbbc0":"code","93d99a9f":"code","fae717f4":"code","d28b9568":"code","118c95ed":"code","5a07ec6e":"code","7c928dd0":"code","fb2c4d97":"code","bd3720be":"code","2bf791f8":"code","ac569593":"code","07efff4d":"code","e808ce22":"code","2a79cbce":"code","4acf4e00":"code","7d2248d7":"code","19dd6148":"code","f2f9de3a":"code","b3651507":"markdown","d986bacc":"markdown","83184828":"markdown","c4a5bca5":"markdown","77fa27bb":"markdown","2de785f7":"markdown","21eaa984":"markdown","7cd05281":"markdown","c57bd7ab":"markdown","ba835559":"markdown","1621ab36":"markdown","ba520f2a":"markdown","510fe655":"markdown","a18aaec2":"markdown","8fb884db":"markdown"},"source":{"bfa94448":"import pandas as pd","d6a3d6f4":"train_df = pd.read_csv('\/kaggle\/input\/siim-covid19-preprocessed-datasettrain\/custom_train.csv')","fd4fdb7b":"train_df.head()","3ad74fc3":"sorted(train_df.OpacityCount.unique())","c07501a7":"train_df[train_df.OpacityCount == 8]","bde66bbc":"sample_outlier = train_df[train_df.OpacityCount == 8]\nsample_outlier","bc409903":"import matplotlib.pyplot as plt","09200db3":"img = plt.imread(sample_outlier.path.values[0])\nimg","3d22e37b":"plt.imshow(img, cmap='gray');","cb633bf3":"sample_box_position = sample_outlier.boxes.values[0]\nsample_box_position","4f337bb0":"print('count of x : ',sample_box_position.count('x'))\nprint('count of y : ',sample_box_position.count('y'))\nprint('count of height : ',sample_box_position.count('height'))\nprint('count of width : ',sample_box_position.count('width'))","fcf6fe83":"import re\np = re.compile(\"[-+]?\\d*\\.\\d+|\\d+\") # extract floats from a string\np_list = p.findall(sample_box_position) # return in word bundle form\nprint(p_list)\n\n# ^ : start char string\n# [0-9] : range (all of numbers)\n# + : no limit of count of each number\n# $ : end char string","d1fa5590":"count_box = len(p_list) \/\/ 4\ncount_box","10c49b10":"x_idx = []\ny_idx = []\nheight_idx = []\nwidth_idx = []\nfor i in range(count_box):\n    i *= 4\n    x_idx.append(i)\n    y_idx.append(i+1)\n    height_idx.append(i+2)\n    width_idx.append(i+3)\nprint('x_idx : ',x_idx)\nprint('y_idx : ',y_idx)\nprint('height_idx : ',height_idx)\nprint('width_idx : ',width_idx)","7e79baad":"[p_list[x] for x in x_idx]","02235228":"x_list = [float(p_list[idx]) for idx in x_idx]\ny_list = [float(p_list[idx]) for idx in y_idx]\nheight_list = [float(p_list[idx]) for idx in height_idx]\nwidth_list = [float(p_list[idx]) for idx in width_idx]\nprint('x_list : ',x_list)\nprint('y_list : ',y_list)\nprint('height_list : ',height_list)\nprint('width_list : ',width_list)","9c8cbbc0":"train_df[train_df.OpacityCount == 8]","93d99a9f":"sample_height_ratio = train_df[train_df.OpacityCount == 8].height_ratio.values\nsample_width_ratio = train_df[train_df.OpacityCount == 8].width_ratio.values","fae717f4":"x_list","d28b9568":"sample_height_ratio","118c95ed":"resized_x_list = x_list*sample_width_ratio\nresized_y_list = y_list*sample_height_ratio\nresized_width_list = width_list*sample_width_ratio\nresized_height_list = height_list*sample_height_ratio","5a07ec6e":"print('resized_x_list : \\n',resized_x_list)\nprint('resized_y_list : \\n',resized_y_list)\nprint('resized_width_list : \\n',resized_width_list)\nprint('resized_height_list : \\n',resized_height_list)","7c928dd0":"import matplotlib\nimport matplotlib.pyplot as plt","fb2c4d97":"resized_x_list","bd3720be":"count_box","2bf791f8":"fig, ax = plt.subplots(1,1, figsize=(4,4))\nfor i in range(count_box):\n    p = matplotlib.patches.Rectangle((resized_x_list[i], resized_y_list[i]),\n                                      resized_width_list[i], resized_height_list[i],\n                                      ec='r', fc='none', lw=2.)\n    ax.add_patch(p)\n    \nax.imshow(img, cmap='gray')\nplt.show()","ac569593":"train_df.head()","07efff4d":"p = re.compile(\"[-+]?\\d*\\.\\d+|\\d+\")\nbox_positions = train_df.boxes.apply(lambda x : p.findall(str(x)))\nbox_positions","e808ce22":"train_df.OpacityCount","2a79cbce":"import numpy as np\n\ndef resize_box_position(df, c):\n    count_box = train_df.OpacityCount[c]\n    x_idx = []\n    y_idx = []\n    height_idx = []\n    width_idx = []\n\n    for i in range(count_box):\n        i *= 4\n        x_idx.append(i)\n        y_idx.append(i+1)\n        height_idx.append(i+2)\n        width_idx.append(i+3)\n\n    if train_df.boxes[c] != train_df.boxes[c]:\n        return pd.Series([0,0,0,0], index=df.columns)\n    \n    else:\n        p_list = p.findall(train_df.boxes[c]) \n        x_list = [float(p_list[idx]) for idx in x_idx]\n        y_list = [float(p_list[idx]) for idx in y_idx]\n        height_list = [float(p_list[idx]) for idx in height_idx]\n        width_list = [float(p_list[idx]) for idx in width_idx]\n\n        x_ratio = np.array(train_df.width_ratio[c])\n        y_ratio = np.array(train_df.height_ratio[c])\n\n        resized_x_list = x_list*x_ratio\n        resized_y_list = y_list*y_ratio\n        resized_width_list = width_list*x_ratio\n        resized_height_list = height_list*y_ratio\n        return pd.Series([resized_x_list, resized_y_list, resized_width_list, resized_height_list], index=df.columns)","4acf4e00":"resized_box_x = []\nresized_box_y = []\nresized_box_width = []\nresized_box_height = []\n\ndf = pd.DataFrame(columns=['resized_box_x', 'resized_box_y', 'resized_box_width', 'resized_box_height'])\n\nfor idx in train_df.index:\n    df = df.append(resize_box_position(df, idx), ignore_index=True)\n    if idx % 500 == 0:\n        print('saved - {}\/{}'.format(idx, max(train_df.index)))\n    elif idx == 6333:\n        print('complete - {}\/{}'.format(idx, max(train_df.index)))","7d2248d7":"df","19dd6148":"train_df = pd.concat([train_df,df], axis=1)\ntrain_df","f2f9de3a":"train_df.to_csv('train_full_info.csv')","b3651507":"### 3-c. Concat DataFrame and Save","d986bacc":"### 2-e. Extract corrected positions that resizing ratio is calculated","83184828":"## Step 1. Import Dataset","c4a5bca5":"> Index\n```\nStep 1. Import Dataset\nStep 2. Test Sample data(1 row) before make the preprocessing function\n     2-a. The image with the most opacity detected is taken as a sample\n     2-b. visualize resized image without boxes\n     2-c. extract position information\n     2-d. Extract all box's information for sample image.\n     2-e. Extract corrected positions that resizing ratio is calculated\n     2-f. visualize resized image with boxes\nStep 3. Build Function for reuse\n     3-a. Test the functions that go into the function\n     3-b. Build Function and Create New DataFrame with loop\n     3-c. concat dataframe and save\n```","77fa27bb":"## Step 2. Test Sample data(1 row) before make the preprocessing function","2de785f7":"# SIIM: Step-by-Step Image Detection for Beginners \n## Mini Part. Preprocessing for Multi-Output Regression that Detect Opacities\n\n\ud83d\udc49 Part 1. [EDA to Preprocessing](https:\/\/www.kaggle.com\/songseungwon\/siim-covid-19-detection-10-step-tutorial-1)\n\n\ud83d\udc49 Part 2. [Basic Modeling - Simplest Image Classification Models using Keras](https:\/\/www.kaggle.com\/songseungwon\/siim-covid-19-detection-10-step-tutorial-2)","21eaa984":"### 2-d. Extract all box's information for sample image.","7cd05281":"### 3-a. Test the functions that go into the function","c57bd7ab":"Now we are going to create a neural network (drawing boxes) that detects opacity. The model is planned to be constructed in the form of simply returning four continuous dependent variables y.\n\nTo do this, we need a training dataset consisting of X matrices in the form of images and 4-y vectors.\n\nLet's create a short training dataset in this mini part.","ba835559":"### 2-c. extract position information","1621ab36":"### 2-f. visualize resized image with boxes","ba520f2a":"### 2-a. The image with the most opacity detected is taken as a sample.","510fe655":"## Step 3. Build Function for reuse","a18aaec2":"### 2-b. visualize resized image without boxes","8fb884db":"### 3-b. Build Function and Create New DataFrame with loop"}}