{"cell_type":{"21879e3a":"code","37d87458":"code","07d7d08b":"code","dd08a825":"code","3c947337":"code","0b7367bb":"code","8320c63a":"code","16ce0a9f":"code","9b5c2bff":"code","0387eb1a":"code","d1614cef":"code","90f984c0":"code","9224e20b":"code","9e26d0e7":"code","5a250ee8":"code","cb9efa4e":"code","f23f328f":"code","62059a88":"code","2b6a5bbd":"code","9d833a40":"code","980d6da4":"code","0a2f1298":"code","b79e2cfe":"code","45108059":"code","1df391cc":"code","f3128cb8":"code","d9b57ed3":"code","d9d58b34":"code","6228f396":"code","8788023b":"code","097e8717":"code","60271bb4":"code","69fa8251":"code","641d24a8":"code","9c8db7bb":"markdown","f7e9622b":"markdown","40805f4a":"markdown","b378acf5":"markdown","454f80ca":"markdown","1fa9522a":"markdown","99041174":"markdown","41bf09c8":"markdown","2f0a9dd9":"markdown","35895530":"markdown","0d9fba59":"markdown","79eb12af":"markdown","592460f3":"markdown","d4542af5":"markdown","3b3d0dfe":"markdown","6e2a17a6":"markdown","039e4d61":"markdown","d3aa1a99":"markdown","84ee551f":"markdown","1e38cfe7":"markdown","8e004e5f":"markdown","108bc887":"markdown","37ab5566":"markdown","35eecf2c":"markdown","71711211":"markdown","84a3340e":"markdown","d82fe9dd":"markdown","0e91f882":"markdown","19bcca45":"markdown","cdad14dd":"markdown","0924386d":"markdown","24a08487":"markdown"},"source":{"21879e3a":"#I import some codes from here https:\/\/www.kaggle.com\/olavomendes\/rental-prices-in-brazil?fbclid=IwAR3LeW1eWl_dvfkOs2leVNA3l5Zc2HiDlu1BUqQdItVjdvc1y78YMkdoLG8\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","37d87458":"raw_data = pd.read_csv('..\/input\/brasilian-houses-to-rent\/houses_to_rent_v2.csv')\n\nraw_data.head(10)","07d7d08b":"#To view last 10 rows\nraw_data.head(-10)","dd08a825":"# Shape\nprint('ROWS: ', raw_data.shape[0])\nprint('COLUMNS: ', raw_data.shape[1])","3c947337":"# Basic info\nraw_data.info()","0b7367bb":"# Basic description\n#we notice in area values, the variance is big as min =11 and max=46335 so we have a small flats and a huge filla.\n#we notice also in no. of rooms, the variance is big as min =1 and max=13 so we have a small flats and a huge filla\n#so we conclude that we have outliers in our dataset.\nraw_data.describe().T","8320c63a":"# NULL values\n#we conclude no null values.\nraw_data.isnull().sum()","16ce0a9f":"plt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.barplot(x=raw_data['rooms'], y=raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(x=raw_data['rooms'])\nplt.xticks(np.arange(raw_data['rooms'].min(), raw_data['rooms'].max(), step=1))\n\n\nplt.show()","9b5c2bff":"plt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.barplot(x=raw_data['bathroom'], y=raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(x=raw_data['bathroom'])\nplt.xticks(np.arange(raw_data['bathroom'].min(), raw_data['bathroom'].max(), step=1))\n\n\nplt.show()","0387eb1a":"plt.figure(figsize=(12, 6))\n\nplt.subplot(1, 2, 1)\nsns.barplot(x=raw_data['parking spaces'], y=raw_data['rent amount (R$)'])\n\nplt.subplot(1, 2, 2)\nsns.boxplot(x=raw_data['parking spaces'])\nplt.xticks(np.arange(raw_data['parking spaces'].min(), raw_data['parking spaces'].max(), step=1))\n\n\nplt.show()","d1614cef":"plt.figure(figsize=(15, 6))\n\nplt.subplot(1, 2, 1)\nsns.regplot(x=raw_data['fire insurance (R$)'], y=raw_data['rent amount (R$)'], line_kws={'color': 'r'})\n\nplt.show()","90f984c0":"furniture = raw_data['furniture'].value_counts()\npd.DataFrame(furniture)","9224e20b":"plt.figure(figsize=(11, 5))\n\nplt.subplot(1, 2, 1)\nplt.title('Furniture ratio')\nplt.pie(furniture, labels = ['not furnished', 'furnished'], colors= ['r', 'g'], \n        explode = (0, 0.1), autopct='%1.1f%%')\n\nplt.subplot(1, 2, 2)\nplt.title('Furniture vs Rent amount')\nsns.barplot(x=raw_data['furniture'], y=raw_data['rent amount (R$)'])\n\nplt.tight_layout()\nplt.show()","9e26d0e7":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\n# ML models\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor","5a250ee8":"catTransformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","cb9efa4e":"#Encoding\nnumTransformer = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])","f23f328f":"#select half of features depend on previous analysis\ncols = ['city', 'rooms', 'bathroom', 'parking spaces', 'fire insurance (R$)', 'furniture']\nX = raw_data[cols]\nX.head()","62059a88":"#scaling for fire insurence\nfor col in X:\n    X = X.astype('object')\nX['fire insurance (R$)'] = X['fire insurance (R$)'].astype('int64')\nX.info()","2b6a5bbd":"#we seperate our output rent amount\ny = raw_data['rent amount (R$)']\ny","9d833a40":"#change \"object\" to \"integer\"\nnumFeatures = X.select_dtypes(include=['int64']).columns\nnumFeatures","980d6da4":"catFeatures = X.select_dtypes(include=['object']).columns\ncatFeatures","0a2f1298":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('numeric', numTransformer, numFeatures),\n        ('categoric', catTransformer, catFeatures)])","b79e2cfe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","45108059":"regressors = [\n    DecisionTreeRegressor(),\n    RandomForestRegressor(),\n    SVR(),\n    LinearRegression(),\n    XGBRegressor()\n]","1df391cc":"# Seed\nnp.random.seed(42)\n\nfor regressor in regressors:\n    \n    estimator = Pipeline(steps=[\n        ('preprocessor', preprocessor),\n        ('regressor', regressor)\n    ])\n    \n    estimator.fit(X_train, y_train)\n    preds = estimator.predict(X_test)\n    \n    print(regressor)\n\n    print('MAE:', mean_absolute_error(y_test, preds))\n    print('RMSE:', np.sqrt(mean_squared_error(y_test, preds)))\n    print('R2:', r2_score(y_test, preds))\n    print('-' * 40)","f3128cb8":"#search for the best parameters \npipe = Pipeline(steps=[('preprocessor', preprocessor),\n                       ('model', XGBRegressor(random_state=42))\n                      ])","d9b57ed3":"params = {\n            'model__learning_rate': [0.01, 0.1],\n            'model__n_estimators': [100, 150, 200],\n            'model__max_depth': [2, 4, 6, 8],\n            'model__subsample': [0.8, 1],\n            'model__colsample_bytree': [0.8, 1],\n            'model__gamma': [0, 1, 5]\n            #'model__min_samples_split': [2, 4, 6, 8],\n            #'model__min_samples_leaf': [2, 4, 6, 8],\n         }","d9d58b34":"estimator = GridSearchCV(pipe, cv=10, param_grid=params)\nestimator.fit(X_train,y_train)","6228f396":"estimator.best_params_","8788023b":"preds = estimator.predict(X_test)\npreds[0:10]","097e8717":"print('MAE:', mean_absolute_error(y_test, preds))\nprint('RMSE:', np.sqrt(mean_squared_error(y_test, preds)))\nprint('R2:', r2_score(y_test, preds))","60271bb4":"plt.figure(figsize=(8, 6))\n\nsns.boxplot(raw_data['city'], raw_data['rent amount (R$)'])\n\nplt.show()","69fa8251":"plt.figure(figsize=(8, 6))\n\nsns.distplot(y_test, hist=False, color='b', label ='Actual')\nsns.distplot(preds, hist=False, color='r', label = 'Predicted')\n\nplt.show()","641d24a8":"from joblib import dump, load\ndump(estimator, 'model_2.joblib')\nmodel = load('model_2.joblib')","9c8db7bb":"The number of rooms usually varies between 1 and 4, and we noticed that the more rooms, the higher the rent, which is already expected.","f7e9622b":"### Evaluate","40805f4a":"### Furniture","b378acf5":"### Numerical columns handler","454f80ca":"There are about 3x more unfurnished houses than furnished","1fa9522a":"### Select FEATURES (X)","99041174":"#### Categorical columns handler","41bf09c8":"# Save model","2f0a9dd9":"The number of parking spaces usually varies between 0 and 5, and we noticed that the more parking spaces, the higher the rent, which is already expected.","35895530":"### rooms","0d9fba59":"# Testing ML models (data with outliers)","79eb12af":"### List of ML models","592460f3":"### Best params","d4542af5":"### Predict with the best params","3b3d0dfe":"### Fit all ML models and select best","6e2a17a6":"The fact that the house is furnished increases the rent price","039e4d61":"### Select TRAIN and TEST data","d3aa1a99":"The number of bathrooms usually varies between 1 and 6, and we noticed that the more bathrooms, the higher the rent, which is already expected.","84ee551f":"# Objective","1e38cfe7":"### Parking spaces","8e004e5f":"## Analysis of important features","108bc887":"#### Handling numerical and categorical features","37ab5566":"### GridSearchCV with the best model (XGBRegressor)","35eecf2c":"### Select categorical features","71711211":"#In this Nootbook, \n1) We read the data then we view the first 10 coloumns and the last 10 coloumns.\n2) we view numbers of coloumns(features) and numbers of rows(dataset samples).\n3) we view some informations about data using data.describe order then data.info and comment the results.\n4) we check null data and solve this problem if it found.\n5) we do labelencoder for categorical features.\n6) we choose half of features using one of feature tools.\n7) we do datascaling using one of tools.\n8) we divide data to testing and training.\n9) we execute 5 algorithems  from sklearn library and view the score for each agorithm.\n10) we use classification data ,so we view Percision and recall.\n11) we use gridsearch tool with used algorithm to get best parameters.\n12) we choose the best algorithm and use it to perdict X_test then we view first 10 rows results\n13) in the case of law performances, we 'll comment this to do some steps to enhance the performance.\n","84a3340e":"### Fire insurance","d82fe9dd":"### Bathroom\n","0e91f882":"### Select numerical features","19bcca45":"**XGBoost** is the best model!","cdad14dd":"The features are:\n* **city** - city where the property is located\n* **area** - property area\n* **rooms** - quantity of rooms\n* **bathroom** - quantity of bathrooms\n* **parking spaces** - quantity of parking spaces\n* **floor** - floor\n* **animal** - acept animals?\n* **furniture** - furniture?\n* **hoa** - Homeowners association tax\n* **property tax** - IPTU \/ property tax\n* **rent amount** - rental price\n* **fire insurance** - fire insurance\n* **total** - total value\n","0924386d":"# View number of coloumns and number of rows ","24a08487":"# Output seperation \"rent amount\"\n"}}