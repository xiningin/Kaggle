{"cell_type":{"16bbb187":"code","8d07c9f0":"code","3c326ad4":"code","47e8552e":"code","80898db8":"code","64db957b":"code","128015d0":"code","acdca49c":"code","7f903fa0":"code","ea939554":"code","225acfb8":"code","11f16652":"code","676bb43f":"code","dd968c22":"code","556814ed":"code","bbbb1916":"code","e65699c0":"code","f9dc551c":"code","93435f67":"code","4eeac57c":"code","9a79ccac":"code","04041d88":"code","a6f938d5":"code","ab0a8c79":"code","fea19f2e":"code","870b65dc":"code","703940f9":"code","2afcdd85":"code","3e249005":"code","7f940e8d":"code","c13d1b77":"code","6b96b994":"code","1f3e0e5e":"code","5e5400f4":"code","13d91a58":"code","e55a141f":"code","9aa1bc90":"code","e01d2bd6":"code","d3de6755":"code","9e9f9be6":"code","634aa453":"code","a30e53c2":"code","45853b43":"code","39ffa50b":"code","0f44150a":"code","6119328f":"code","44ea8d90":"code","b0bd9337":"code","cb6454b1":"code","4f58fc39":"code","83787113":"code","9e73926f":"code","57f054f4":"code","3b6b236f":"code","5466830f":"code","19b12784":"code","ecf4aeee":"code","ef0e58f9":"code","a3229c46":"code","9696c273":"code","17f5d878":"code","1d63f830":"code","f272b2ba":"code","4455a5bd":"code","4b543a43":"code","8a508744":"code","84bf0a6e":"code","ee1b84b3":"code","2973b6ea":"code","4a0915e2":"code","5a25c1c1":"code","e9628243":"code","e371abfd":"code","73a5e41b":"code","b815893d":"code","60f3c850":"code","4b242394":"code","495da755":"code","fd0ad4c0":"code","9717115d":"code","45af2837":"code","4033f88b":"code","ae594f7e":"code","9212402d":"code","244ab175":"code","b2488557":"code","bd598081":"code","0d801e36":"code","25588e9f":"code","fb09f980":"code","35f52d80":"code","39a66545":"code","dd5e9890":"code","45db0666":"code","76c8ca41":"code","70590749":"code","2da68a9d":"code","95ef0237":"markdown","447040a7":"markdown","7cddcd81":"markdown","c3ae0c18":"markdown","4325de43":"markdown","630733e9":"markdown","dbbd6b11":"markdown","9e705c82":"markdown","78d074cf":"markdown","325de930":"markdown","42e0781d":"markdown","4361f24d":"markdown","de8e4126":"markdown","b7e159f5":"markdown","208de799":"markdown","c5471915":"markdown","e728af1c":"markdown","991a5d4f":"markdown","8b6e8a05":"markdown","1dd2f465":"markdown","6d098b77":"markdown","8554646f":"markdown","23856e01":"markdown","cdea7771":"markdown","caecf913":"markdown","a36c13cd":"markdown","c3e16650":"markdown","632bde8f":"markdown"},"source":{"16bbb187":"#data analysis and wrangling\nimport pandas as pd\nimport numpy as np\n#data visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","8d07c9f0":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","3c326ad4":"train_data.head()","47e8552e":"test_data.head()","80898db8":"train_data.info()\nprint(' ')\ntest_data.info()","64db957b":"train_data.isnull().sum()","128015d0":"test_data.isnull().sum()","acdca49c":"Women_survived_perc = np.sum(train_data[train_data.Sex == \"female\"][\"Survived\"])\/len(train_data[train_data.Sex == \"female\"][\"Survived\"])","7f903fa0":"Women_survived_perc","ea939554":"Men_survived_perc = np.sum(train_data[train_data.Sex == \"male\"][\"Survived\"])\/len(train_data[train_data.Sex == \"male\"][\"Survived\"])","225acfb8":"Men_survived_perc","11f16652":"train_data.Age.isnull().sum()\/len(train_data)","676bb43f":"train_data.loc[train_data[\"Age\"].isnull()]","dd968c22":"train_data.Cabin.isnull().sum()\/len(train_data)","556814ed":"train_data = train_data.drop(['Ticket','Cabin'],axis =1)","bbbb1916":"test_data = test_data.drop(['Ticket','Cabin'],axis =1)","e65699c0":"train_data[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean()","f9dc551c":"train_data[['Sex','Survived']].groupby(['Sex'], as_index=False).mean()","93435f67":"train_data[['SibSp','Survived']].groupby(['SibSp'], as_index=False).mean()","4eeac57c":"train_data[['Parch','Survived']].groupby(['Parch'], as_index=False).mean()","9a79ccac":"train_data[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean()","04041d88":"train_data[['Age','Survived']].groupby(['Age'], as_index=False).sum()","a6f938d5":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","ab0a8c79":"grid = sns.FacetGrid(train_data, col='Survived', row='Pclass')\ngrid.map(plt.hist, 'Age')\ngrid.add_legend();","fea19f2e":"grid = sns.FacetGrid(train_data, col='Survived', row='Pclass')\ngrid.map(plt.hist, 'Sex')\ngrid.add_legend();","870b65dc":"grid = sns.FacetGrid(train_data, col='Survived', row='Embarked')\ngrid.map(plt.hist, 'Sex')\ngrid.add_legend();","703940f9":"grid = sns.FacetGrid(train_data, col='Survived',hue ='Sex',height=4.2)\ngrid.map(plt.hist, 'Parch')\ngrid.add_legend();","2afcdd85":"train_data.isnull().sum()","3e249005":"test_data.isnull().sum()","7f940e8d":"train_data.Embarked.value_counts()","c13d1b77":"train_data['Embarked'] = train_data.Embarked.fillna(\"S\")","6b96b994":"train_data['Embarked']","1f3e0e5e":"train_data.Embarked.value_counts()","5e5400f4":"train_data.isnull().sum()","13d91a58":"train_data['Age'] = np.round(train_data['Age'],0)","e55a141f":"train_data[['Pclass','Age']].groupby(['Pclass']).mean()","9aa1bc90":"train_data.loc[(train_data['Age'].isnull()) & (train_data['Pclass'] == 1), 'Age'] = 38\ntrain_data.loc[(train_data['Age'].isnull()) & (train_data['Pclass'] == 2), 'Age'] = 30\ntrain_data.loc[(train_data['Age'].isnull()) & (train_data['Pclass'] == 3), 'Age'] = 25","e01d2bd6":"test_data[['Pclass','Age']].groupby(['Pclass']).mean()","d3de6755":"test_data.loc[(test_data['Age'].isnull()) & (test_data['Pclass'] == 1), 'Age'] = 41\ntest_data.loc[(test_data['Age'].isnull()) & (test_data['Pclass'] == 2), 'Age'] = 29\ntest_data.loc[(test_data['Age'].isnull()) & (test_data['Pclass'] == 3), 'Age'] = 24","9e9f9be6":"test_data['Fare'].mean()","634aa453":"test_data['Fare'] = test_data.Fare.fillna(35.6271884892086)","a30e53c2":"train_data.isnull().sum()","45853b43":"test_data.isnull().sum()","39ffa50b":"train_data.head()","0f44150a":"test_data.head()","6119328f":"from sklearn.preprocessing import LabelEncoder \n  \nle = LabelEncoder() \n  \ntrain_data['Sex']= le.fit_transform(train_data['Sex']) #M=1 and f=0\ntrain_data['Embarked']= le.fit_transform(train_data['Embarked']) #S =2 and C=0 and Q=1\ntest_data['Sex']= le.fit_transform(test_data['Sex']) #M=1 and f=0\ntest_data['Embarked']= le.fit_transform(test_data['Embarked']) #S =2 and C=0 and Q=1","44ea8d90":"train_data.head(20)","b0bd9337":"test_data.head(20)","cb6454b1":"train_data['Title']=train_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)","4f58fc39":"test_data['Title']=test_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)","83787113":"train_data['Title'].value_counts()","9e73926f":"Title_mapping = {'Dr':'Others','Rev':'Others','Mile':'Others','Col':'Others','Major':'Others','Capt':'Others','Don':'Others','Lady':'Others','Jonkheer':'Others','Mme':'Others','Countess':'Others','Sir':'Others','Ms':'Others','Mlle':'Others','Dona':'Others'}\ntrain_data['Title'] = train_data['Title'].replace(Title_mapping)\ntest_data['Title'] = test_data['Title'].replace(Title_mapping)","57f054f4":"train_data['Parch'].value_counts()","3b6b236f":"train_data = train_data.drop('Name', axis =1)\ntest_data = test_data.drop('Name', axis =1)","5466830f":"train_data['Title']= le.fit_transform(train_data['Title'])\ntest_data['Title']= le.fit_transform(test_data['Title'])","19b12784":"train_data['Age'].value_counts()","ecf4aeee":"train_data['Age range'] = pd.cut(train_data['Age'], 5)","ef0e58f9":"test_data['Age range'] = pd.cut(test_data['Age'], 5)","a3229c46":"train_data['Age range'].value_counts()","9696c273":"train_data['Age']= le.fit_transform(train_data['Age range'])","17f5d878":"test_data['Age']= le.fit_transform(test_data['Age range'])","1d63f830":"train_data['Age'].value_counts()","f272b2ba":"train_data.head()","4455a5bd":"train_data['Fareband'] = pd.cut(train_data['Fare'], 4)","4b543a43":"test_data['Fareband'] = pd.cut(test_data['Fare'], 4)","8a508744":"train_data[['Fareband','Survived']].groupby(['Fareband'], as_index=False).mean()","84bf0a6e":"train_data['Fare']= le.fit_transform(train_data['Fareband'])","ee1b84b3":"test_data['Fareband'].isnull().sum()","2973b6ea":"test_data['Fare']= le.fit_transform(test_data['Fareband'])","4a0915e2":"train_data[['Fare','Survived']].groupby(['Fare'], as_index=False).mean()","5a25c1c1":"train_data.head()","e9628243":"train_data = train_data.drop('Fareband', axis =1)\ntrain_data = train_data.drop('Age range', axis =1)","e371abfd":"test_data = test_data.drop('Fareband', axis =1)\ntest_data = test_data.drop('Age range', axis =1)","73a5e41b":"train_data = train_data.drop('PassengerId', axis =1)\ntesting_data = test_data.drop('PassengerId', axis =1)","b815893d":"train_data.head()","60f3c850":"test_data.head()","4b242394":"indep_x = train_data.drop('Survived', axis =1)","495da755":"dep_y = train_data['Survived']","fd0ad4c0":"indep_x","9717115d":"dep_y","45af2837":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(indep_x, dep_y)\nY_pred = decision_tree.predict(testing_data)\nacc_decision_tree = round(decision_tree.score(indep_x, dep_y) * 100, 2)\ntest_decision_tree = round(decision_tree.score(testing_data, Y_pred) * 100, 2)\nprint(acc_decision_tree)\n","4033f88b":"Y_pred","ae594f7e":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': Y_pred})\noutput.to_csv('my_submission.csv', index=False)","9212402d":"train_data['Family'] = train_data['SibSp'] + train_data['Parch']","244ab175":"test_data['Family'] = test_data['SibSp'] + test_data['Parch']","b2488557":"train_data['Family']= le.fit_transform(train_data['Family'])\ntest_data['Family']= le.fit_transform(test_data['Family'])","bd598081":"train_data.head()","0d801e36":"test_data.head()","25588e9f":"train_data = train_data.drop('SibSp', axis =1)\ntest_data = test_data.drop('SibSp', axis =1)","fb09f980":"train_data = train_data.drop('Parch', axis =1)\ntest_data = test_data.drop('Parch', axis =1)","35f52d80":"test_data.head()","39a66545":"testing_data = test_data.drop('PassengerId', axis =1)","dd5e9890":"indep_x = train_data.drop('Survived', axis =1)","45db0666":"dep_y = train_data['Survived']","76c8ca41":"decision_tree_2 = DecisionTreeClassifier()\ndecision_tree_2.fit(indep_x, dep_y)\nY_pred = decision_tree_2.predict(testing_data)\nacc_decision_tree_2 = round(decision_tree_2.score(indep_x, dep_y) * 100, 2)\ntest_decision_tree_2 = round(decision_tree_2.score(testing_data, Y_pred) * 100, 2)\nprint(acc_decision_tree_2)\n","70590749":"Y_pred","2da68a9d":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': Y_pred})\noutput.to_csv('my_submission_2.csv', index=False)","95ef0237":"We are using Decision tree to train our model and to predict the outcomes of target values from testing data","447040a7":"**Which features contain blank, null or empty values?**\n\nThese will require correcting.\n\nCabin, Age and Embarked features contain a number of null values in training dataset.\nCabin and Age are incomplete in case of testing dataset.","7cddcd81":"Now as all our categorical variables converted into numerical ordinals. We dont need band columns. Drop it","c3ae0c18":"Classification of survival percentage with respect to other independent variables","4325de43":"It was observed that 19.86% of data for age column is not known. We cannot remove the column","630733e9":"# Modelling and Predictions\n\nSeperate the dependent and independent variables from training dataset","dbbd6b11":"You can observe from above output the mean age is different for different Pclass. Imputation done in similar way","9e705c82":"Now name title is not needed. Drop it","78d074cf":"Replace the other titles rather than common titles with 'Others'","325de930":"Convert the Title categorical to numerical with the help of label encoder","42e0781d":"**What is the count of null values present?**\n\nTotal amount of null values in data can helps in either cleaning or imputing the missing values.\n","4361f24d":"Convert the age range into ordinals using label encoder","de8e4126":"# Visualization\n\nThis method provide us the bigger picture of classifying the variables\n","b7e159f5":"**What is the survival rate with respect to other variables?**\n\n**Women Survival Rate** : It shows 74.2% women survived from total number of women onboarded","208de799":"It is observed that 77.1% of data for cabin column is not known. Hence the best method is to remove that column","c5471915":"# Further feature engineering techniques to improve the score","e728af1c":"Merge the sibSp and Parch into one column as Family and use the label encoder to convert into ordinals","991a5d4f":"We want to check whether name column can be used in extracting . We apply feature engineering and create the new column with Title containing the titles of each names","8b6e8a05":"# About data\n\nYou can observe the feature available in dataset. You can find categorical, numerical and alphanumerical variables in dataset:\n\nNumerical Features: Age (Continuous), Fare (Continuous), SibSp (Discrete), Parch (Discrete)\n\nCategorical Features: Survived, Sex, Embarked, Pclass\n\nAlphanumeric Features: Ticket, Cabin","1dd2f465":"**Problem Statement:**\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\n\n**Problem Workflow**\n\n1. Classifying - We will see how the independent variables are affecting dependent variable by categorizing the samples. \n2. Visualization - We will visualize the data in graphical form and compare the variables impacting the survival rate.\n3. Cleaning - We will clean the missing data present in the dataset and also impute the missing values with best imputatio methods.\n4. Feature engineering - We will use some basic feature engineering methods to improve our score.\n5. Modelling - We will then build the model to predict our dependent variable on test data by training the model on train data\n\n\n","6d098b77":"**Men Survival Rate** : It shows 18.9% men survived from total number of men onboarded","8554646f":"Imputing the missing values of Embarked with most frequent values 'S'","23856e01":"We convert the age into age range","cdea7771":"Impute the mean fare in missing position of fare column in test data","caecf913":"# Feature Engineering\n\nConverting categorical to numerical","a36c13cd":"**Fetching the data set**\n\nWe will use the titanic dataset from kaggle which provides the training and testing dataset. We will be using pandas to acquire the same.","c3e16650":"Similarly we do it for fare and convert them into fare band ","632bde8f":"# Analyse by classifying the data set\n\n**What all features are present in dataset?**\n\nPandas helps in determining the different features of variable in data set and helps in categorizing and visualising the dataset easier."}}