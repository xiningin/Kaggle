{"cell_type":{"e880a9a1":"code","ebe60d5e":"code","e1ceb491":"code","88c43e08":"code","8cca2e14":"code","e335fcfc":"code","23cac768":"code","0cb9ec9d":"code","af6fcf64":"code","3ee0cb77":"code","151b5ad4":"code","41c9bc14":"code","ced6c1f4":"code","77632ee5":"code","d454373c":"code","71968677":"markdown"},"source":{"e880a9a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ebe60d5e":"data=pd.read_csv(\"..\/input\/PimaIndians.csv\") ","e1ceb491":"data.info() \ndata.head()","88c43e08":"data.test=[0 if i==\"negatif\" else 1 for i in data.test ] \ny=data.test.values","8cca2e14":"data","e335fcfc":"x_data=data.drop([\"test\"],axis=1) ","23cac768":"x_data","0cb9ec9d":"x=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values ","af6fcf64":"from sklearn.model_selection import train_test_split #Arrange train&test data","3ee0cb77":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42) ","151b5ad4":"x_train=x_train.T\nx_test=x_test.T\ny_train=y_train.T\ny_test=y_test.T\n","41c9bc14":"print(\"x train:\",x_train.shape)\nprint(\"x test:\",x_test.shape)\nprint(\"y train:\",y_train.shape)\nprint(\"y test:\",y_test.shape)","ced6c1f4":"# initialize parameters\n# dimension=counts of examples\ndef initialize_weight_and_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\n#calculation of z\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head\n#x_train for features & y_train for loss method.\ndef forward_backward_propagation(w,b,x_train,y_train):\n    #fp\n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z)\n    loss=-(1-y_train)*np.log(1-y_head)-y_train*np.log(y_head) \n    #-((1-y_train)*np.log(1-y_head)+y_train*np.log(y_head))\n    #(1-y_train)*np.log(1-y_head)+y_train*np.log(y_head) \n    #-(1-y_train)*np.log(1-y_head)-y_train*np.log(y_head) \n    cost=(np.sum(loss))\/x_train.shape[1]\n    #bp\n    derivative_weight=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\":derivative_weight,\"derivative_bias\":derivative_bias}\n    return cost,gradients\n#Learning parameters\ndef update(w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list=[]\n    cost_list1=[]\n    index=[]\n    #1 Forward-Backward Propagation=1 Number of iteration\n    #we do that for learning gradients,cost func and the most optimized parameters\n    for i in range(number_of_iteration):\n        cost,gradients=forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w=w-learning_rate*gradients[\"derivative_weight\"]\n        b=b-learning_rate*gradients[\"derivative_bias\"]\n        #if i%2==0:\n        cost_list1.append(cost)\n        index.append(i)\n        print(\"Cost after iteration %i: %f\"%(i,cost))\n    #update parameters with the most optimized parameters\n    parameters={\"weight\":w,\"bias\":b}\n    plt.plot(index,cost_list1)\n    plt.xticks(index,rotation=\"vertical\")\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters,gradients,cost_list\n\ndef predict(w,b,x_test):\n    #x_test input for forward propagation\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction=np.zeros((1,x_test.shape[1]))\n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            Y_prediction[0,i]=0\n        else:\n            Y_prediction[0,i]=1\n    return Y_prediction\ndef logistic_regression(x_train,y_train,x_test,y_test,learning_rate,num_iterations):\n    #initializng for w and b\n    dimension=x_train.shape[0]\n    w,b=initialize_weight_and_bias(dimension)\n    #update parameters, learning gradients & cost func\n    parameters,gradients,cost_list=update(w,b,x_train,y_train,learning_rate,num_iterations)\n    y_prediction_test=predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    #y_test for learning accuracy of our model\n    print(\"test accuracy:{}%\".format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n    \n#train datalar\u0131n\u0131 i\u00e7eren t\u00fcm metodlar \u00f6\u011frenmek i\u00e7in, test datalar\u0131n\u0131 i\u00e7erenler ise tahmin i\u00e7in   ","77632ee5":"logistic_regression(x_train,y_train,x_test,y_test,learning_rate=4,num_iterations=200)","d454373c":"#Logistic Regression with sklearn\nfrom sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"accuracy {}\".format(lr.score(x_test.T,y_test.T)*100))","71968677":"# Introduction:\nMy first study for LR.In this kernel I will be learning the basics of Logistic Regression"}}