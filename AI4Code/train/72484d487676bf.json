{"cell_type":{"8b74ab0b":"code","4d50e52f":"code","698e1c50":"code","614ae9c3":"code","8237cc08":"code","f2521033":"code","1828ee48":"code","5dffdd41":"code","030a1e43":"code","57f1e331":"code","bc81f974":"code","9813459e":"code","8fc91c12":"code","6190f83d":"code","010e7a9a":"code","c2417479":"code","e2d58433":"code","d3ea4534":"code","c9028ef1":"code","c20ce1a4":"code","365182e8":"code","41f7d255":"code","60dd1834":"code","252d02dd":"code","2bb4a2aa":"code","cbd5b7d5":"code","c332c8c6":"code","c3fa5838":"code","ee308e46":"code","6ca90ac8":"code","0a6db0f9":"code","ba81cb92":"code","be7832c0":"code","58af678b":"code","adf5f650":"code","fb5c439b":"code","a5612d6c":"code","87ce2c53":"code","1e9697e7":"code","65a6436a":"code","2de336c4":"markdown","fdee6a7a":"markdown","643c4f81":"markdown","284c09de":"markdown","c7298af0":"markdown","41fe0864":"markdown","4c4b9721":"markdown","0502b4c1":"markdown","773cca14":"markdown","6bf319a8":"markdown","fcda5bf3":"markdown","88c242c6":"markdown","d060489c":"markdown","afe9d05f":"markdown","ee33173d":"markdown","b5bfe493":"markdown"},"source":{"8b74ab0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d50e52f":"df1 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q1 2018.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q2 2018.csv')\ndf3 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q3 2018.csv')\ndf4 = pd.read_csv('\/kaggle\/input\/toronto-bikeshare-data\/bikeshare2018\/bikeshare2018\/Bike Share Toronto Ridership_Q4 2018.csv')","698e1c50":"df2018 = df1.copy()\ndf2018 = df2018.append([df2, df3, df4], sort=False)\ndel df1\ndel df2\ndel df3\ndel df4","614ae9c3":"df2018.head(10)","8237cc08":"# prepare the dataset\ndf2018['time'] = pd.to_datetime(df2018.trip_start_time)\ndf2018.index = df2018.time.dt.date\ndf2018.index.name = 'index'\n","f2521033":"# cleaning the dataset\ndf2018 = df2018.dropna(subset=['from_station_name','to_station_name'])\ndf = df2018.copy()","1828ee48":"station = list(set(list(df.from_station_name.values) + list(df.to_station_name.values)))\ndate = df.index.unique().values","5dffdd41":"route = df.copy()\nroute = route[['from_station_name', 'to_station_name']]","030a1e43":"twoway = route.copy()\ntwoway = twoway[twoway.from_station_name == twoway.to_station_name]\noneway = route.copy()\noneway = oneway[oneway.from_station_name != oneway.to_station_name]","57f1e331":"twoway_map = twoway.groupby('from_station_name').count().sort_values(by='to_station_name', ascending=False)\nprint('10 Stations with the highest number of two-way traveller')\ntwoway_map[:10]","bc81f974":"# mapping the number of outgoing bike from each station each day in 2018\noutmap = pd.get_dummies(route.from_station_name).groupby('index').sum()\n# mapping the number of incoming bike to each station each day in 2018\ninmap = pd.get_dummies(route.to_station_name).groupby('index').sum()","9813459e":"outmap.head(5) # number of bikes leaves the station","8fc91c12":"inmap.head(5) # number of bikes entering the station","6190f83d":"print('number of station with enough bike to use next morning, aka number of bikes entering > number of bikes leaving the station')\n((inmap - outmap)>=0).sum(axis=1)","010e7a9a":"print('number of station with less bike to use next morning, or need a crew to return bikes back to station before next morning')\n((inmap - outmap)<0).sum(axis=1)","c2417479":"print('Station and the total number of days in 2018 where stations need more bikes to be returned by the crew every night')\n((inmap - outmap)<0).sum(axis=0).sort_values(ascending=False)[:20]","e2d58433":"bike_minus = inmap - outmap # incoming bikes minus leaving bikes\nbike_minus = np.absolute(bike_minus[bike_minus < 0]) # show only minus value","d3ea4534":"bike_minus.head(10) # number of bikes that required by crew to be returned to each station","c9028ef1":"print('20 Stations with the highest number of required returned bikes in a day')\nnp.max(bike_minus, axis=0).sort_values(ascending=False)[:20]","c20ce1a4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","365182e8":"#import chart_studio.plotly as py\n","41f7d255":"import plotly.express as px\nimport plotly.graph_objects as go\n","60dd1834":"from plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","252d02dd":"bike_share = df2018","2bb4a2aa":"bike_share['trip_start_time'] = pd.to_datetime(bike_share['trip_start_time'])\nbike_share['trip_stop_time'] = pd.to_datetime(bike_share['trip_stop_time'])","cbd5b7d5":"bike_share['hour_start'] = bike_share['trip_start_time'].apply(lambda time: time.hour)\nbike_share['month_start'] = bike_share['trip_start_time'].apply(lambda time: time.month)\nbike_share['weekday_start'] = bike_share['trip_start_time'].apply(lambda time: time.dayofweek)","c332c8c6":"bike_share['hour_stop'] = bike_share['trip_stop_time'].apply(lambda time: time.hour)\nbike_share['month_stop'] = bike_share['trip_stop_time'].apply(lambda time: time.month)\nbike_share['weekday_stop'] = bike_share['trip_stop_time'].apply(lambda time: time.dayofweek)","c3fa5838":"mon = {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\nbike_share['month_start'] = bike_share['month_start'].map(mon)\nbike_share['month_stop'] = bike_share['month_stop'].map(mon)","ee308e46":"day = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nbike_share['weekday_start'] = bike_share['weekday_start'].map(day)\nbike_share['weekday_stop'] = bike_share['weekday_stop'].map(day)","6ca90ac8":"bike_share.head()","0a6db0f9":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nsns.countplot(x='user_type',data=bike_share,palette='viridis')\nplt.title('Bike Share Toronto Membership 2018')","ba81cb92":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nridership = sns.countplot(data=bike_share, x='month_start', hue='user_type', palette='coolwarm')\nplt.title('Bike Share Toronto Ridership 2018')\nplt.legend(bbox_to_anchor=(1.02, 1), loc=2, borderaxespad=0.)","be7832c0":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nridership = sns.countplot(data=bike_share, x='weekday_start', hue='user_type', palette='coolwarm')\nplt.title('Bike Share Toronto Ridership 2018')\nplt.legend(bbox_to_anchor=(1.02, 1), loc=2, borderaxespad=0.)","58af678b":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nridership = sns.countplot(data=bike_share, x='hour_start', hue='user_type', palette='coolwarm')\nplt.title('Bike Share Toronto Ridership 2018')\nplt.legend(bbox_to_anchor=(1.02, 1), loc=2, borderaxespad=0.)","adf5f650":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nsns.countplot(y=bike_share[bike_share['user_type']=='Annual Member']['from_station_name'],data=bike_share, palette='coolwarm',order=bike_share[bike_share['user_type']=='Annual Member']['from_station_name'].value_counts().index[:5])\nplt.title('Top 5 Departing Stations (Annual Members)')","fb5c439b":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nsns.countplot(y=bike_share[bike_share['user_type']=='Annual Member']['to_station_name'],data=bike_share, palette='coolwarm',order=bike_share[bike_share['user_type']=='Annual Member']['to_station_name'].value_counts().index[:5])\nplt.title('Top 5 Arriving Stations (Annual Members)')","a5612d6c":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nsns.countplot(y=bike_share[bike_share['user_type']=='Casual Member']['from_station_name'],data=bike_share, palette='viridis',order=bike_share[bike_share['user_type']=='Casual Member']['from_station_name'].value_counts().index[:5])\nplt.title('Top 5 Departing Stations (Casual Members)')","87ce2c53":"plt.figure(figsize=(10,5))\nsns.set_style('darkgrid')\nsns.countplot(y=bike_share[bike_share['user_type']=='Casual Member']['to_station_name'],data=bike_share, palette='viridis',order=bike_share[bike_share['user_type']=='Casual Member']['to_station_name'].value_counts().index[:5])\nplt.title('Top 5 Arriving Stations (Casual Members)')","1e9697e7":"daily_activity = bike_share.groupby(by=['weekday_start','hour_start']).count()['user_type'].unstack()\ndaily_activity.head()","65a6436a":"plt.figure(figsize=(12,6))\nsns.heatmap(daily_activity,cmap='coolwarm')","2de336c4":"Now we are going to extract the hour, month and day of the week from both columns:","fdee6a7a":"I'm going to create a heat map to see the daily activity.\n\nBefore that happens, I'll group the DataFrame by the hour and the day of the week:","643c4f81":"Most of the activity occured on Wednesday, Tuesday and Thursday at 5.","284c09de":"Here's the head of the DataFrame:","c7298af0":"So how did the Bike Share Toronto membership look in 2018?","41fe0864":"Create a table regarding to the number of bikes leaving ('from_station') and entering ('to_station') each day","4c4b9721":"Make four class, consist of Fall, Winter, Spring and Summer","0502b4c1":"Now the top stations for casual members:","773cca14":"82% are annual members!\n\nRidership per month:","6bf319a8":"Diagram Analysis\n\nLet's first import our data visualization libraries!","fcda5bf3":"The amount of rides increased as the weather got warmer. Ridership peaked during the summer months.\n\nRidership per day:","88c242c6":"Annual members rode between 8am-9am and 4pm-6pm; while casual members were riding throughout the day (noon to the early evening hours).\n\n\nNow the top stations for annual members:","d060489c":"calculate the number of bikes entering the station minus number of bikes leaving the station\n\nif the result >= 0 then there are enough bike available in the station to be used next morning\nif the result < 0 then we need crew to return some bikes back to the station from other station","afe9d05f":"Annual members rode mostly during the week; especially from Tuesday to Thursday. Casual members were riding mostly on weekends.\n\nRidership per hour:","ee33173d":"We still use 2018 data","b5bfe493":"Before moving forward with the EDA, We are going to convert the objects into DateTime format:"}}