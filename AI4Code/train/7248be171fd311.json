{"cell_type":{"e5657522":"code","f68f672a":"code","75536566":"code","7e871cbf":"code","f744d97f":"code","06fa6506":"code","1b8fde9d":"code","3279229e":"code","15afd8f9":"code","cead3d97":"code","26941504":"code","bc8fe427":"code","110cb49a":"code","b8c3f432":"code","0c87f597":"code","72a8d09c":"code","29f5b84f":"code","f540f137":"code","904bb8a7":"code","b064b0b9":"code","2d575baf":"code","3b8cd748":"code","99996e4b":"code","40aad3a2":"code","c0d1ba0e":"code","31500871":"code","6d7caa02":"code","8421c991":"code","16758d33":"code","abec9420":"code","c42251e3":"code","918ffa92":"code","8dc4119f":"code","c79b15e6":"code","67fffef2":"code","1fdf4d2b":"code","54c20ec6":"code","1477859e":"code","03538750":"code","d1dc1da0":"code","4d135ec4":"code","c3e59dc6":"code","e72bbffb":"code","480f2cf9":"code","bdb85539":"code","4692261a":"code","85a842a7":"code","3a73a0ca":"code","25d255ab":"code","2ce453e2":"code","b0429a53":"markdown","4f78056a":"markdown","8679afae":"markdown","ed7390d2":"markdown","d364a712":"markdown","64d02c2d":"markdown","a1ef85e5":"markdown","1342f492":"markdown","baa60c05":"markdown","c122d20c":"markdown","7f444410":"markdown","2c6350d0":"markdown","19b59c27":"markdown","d9588590":"markdown","0c36703f":"markdown","f0ccc3a3":"markdown","1e4792f1":"markdown","94148612":"markdown","a00a72bc":"markdown","37f0c0e7":"markdown","26b28231":"markdown","dbebec65":"markdown","5b32caf5":"markdown","43eb04cb":"markdown","75aa2710":"markdown","65fa0078":"markdown","e3d81961":"markdown","1543334d":"markdown","9d47529c":"markdown"},"source":{"e5657522":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.integrate import odeint\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)","f68f672a":"country_codes = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\ncountry_codes = country_codes.drop('GDP (BILLIONS)', 1)\ncountry_codes.rename(columns={'COUNTRY': 'Country', 'CODE': 'Code'}, inplace=True)","75536566":"virus_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nprev_index = 0\nfirst_time = False\ntmp = 0\n\n\nfor i, row in virus_data.iterrows():\n\n    if(virus_data.loc[i,'SNo'] < 1342 and virus_data.loc[i,'Province\/State']=='Hubei'):\n        if(first_time):\n            tmp = virus_data.loc[i,'Confirmed']\n            prev_index = i\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[i,'Confirmed'] + 593\n            first_time = False\n        else:\n            increment = virus_data.loc[i,'Confirmed'] - tmp\n            tmp = virus_data.loc[i,'Confirmed']\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[prev_index,'Confirmed'] + increment + 593\n            prev_index = i\n    \n\nvirus_data.rename(columns={'Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)\nvirus_data = virus_data.fillna('unknow')\nvirus_data['Country'] = virus_data['Country'].str.replace('US','United States')\nvirus_data['Country'] = virus_data['Country'].str.replace('UK','United Kingdom') \nvirus_data['Country'] = virus_data['Country'].str.replace('Mainland China','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('South Korea','Korea, South')\nvirus_data['Country'] = virus_data['Country'].str.replace('North Korea','Korea, North')\nvirus_data['Country'] = virus_data['Country'].str.replace('Macau','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('Ivory Coast','Cote d\\'Ivoire')\nvirus_data = pd.merge(virus_data,country_codes,on=['Country'])\n#virus_data.head()\n#print(len(virus_data))","7e871cbf":"top_country = virus_data.loc[virus_data['Date'] == virus_data['Date'].iloc[-1]]\ntop_country = top_country.groupby(['Code','Country'])['Confirmed'].sum().reset_index()\ntop_country = top_country.sort_values('Confirmed', ascending=False)\ntop_country = top_country[:30]\ntop_country_codes = top_country['Country']\ntop_country_codes = list(top_country_codes)\n\n#countries = virus_data.loc[virus_data['Country'] in top_country_codes]\ncountries = virus_data[virus_data['Country'].isin(top_country_codes)]\ncountries_day = countries.groupby(['Date','Code','Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nexponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n    \n## TOP 30 ##\n\"\"\"\nchina = countries_day.loc[countries_day['Code']=='CHN']\n\nnew_confirmed_cases_china = []\nnew_confirmed_cases_china.append( list(china['Confirmed'])[0] - list(china['Deaths'])[0] \n                           - list(china['Recovered'])[0] )\n\nfor i in range(1,len(china)):\n\n    new_confirmed_cases_china.append( list(china['Confirmed'])[i] - \n                                     list(china['Deaths'])[i] - \n                                     list(china['Recovered'])[i])\n    \n\"\"\"\nitaly = countries_day.loc[countries_day['Code']=='ITA']\n\nnew_confirmed_cases_ita = []\nnew_confirmed_cases_ita.append( list(italy['Confirmed'])[0] - list(italy['Deaths'])[0] \n                           - list(italy['Recovered'])[0] )\n\nfor i in range(1,len(italy)):\n    \n    new_confirmed_cases_ita.append( list(italy['Confirmed'])[i] - \n                                  list(italy['Deaths'])[i] - \n                                  list(italy['Recovered'])[i])\n    \n    \nindia = countries_day.loc[countries_day['Code']=='IND']\n\nnew_confirmed_cases_india = []\nnew_confirmed_cases_india.append( list(india['Confirmed'])[0] - list(india['Deaths'])[0] \n                           - list(india['Recovered'])[0] )\n\nfor i in range(1,len(india)):\n    \n    new_confirmed_cases_india.append( list(india['Confirmed'])[i] - \n                                     list(india['Deaths'])[i] - \n                                    list(india['Recovered'])[i])\n    \n\nspain = countries_day.loc[countries_day['Code']=='ESP']\n\nnew_confirmed_cases_spain = []\nnew_confirmed_cases_spain.append( list(spain['Confirmed'])[0] - list(spain['Deaths'])[0] \n                           - list(spain['Recovered'])[0] )\n\nfor i in range(1,len(spain)):\n    \n    new_confirmed_cases_spain.append( list(spain['Confirmed'])[i] - \n                                     list(spain['Deaths'])[i] - \n                                    list(spain['Recovered'])[i])\n    \n\nus = countries_day.loc[countries_day['Code']=='USA']\n\nnew_confirmed_cases_us = []\nnew_confirmed_cases_us.append( list(us['Confirmed'])[0] - list(us['Deaths'])[0] \n                           - list(us['Recovered'])[0] )\n\nfor i in range(1,len(us)):\n    \n    new_confirmed_cases_us.append( list(us['Confirmed'])[i] - \n                                     list(us['Deaths'])[i] - \n                                    list(us['Recovered'])[i])\n    \n    \ngerman = countries_day.loc[countries_day['Code']=='DEU']\n\nnew_confirmed_cases_german = []\nnew_confirmed_cases_german.append( list(german['Confirmed'])[0] - list(german['Deaths'])[0] \n                           - list(german['Recovered'])[0] )\n\nfor i in range(1,len(german)):\n    \n    new_confirmed_cases_german.append( list(german['Confirmed'])[i] - \n                                     list(german['Deaths'])[i] - \n                                    list(german['Recovered'])[i])\n    \np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\n#p1.line(np.log(list(china['Confirmed'])), np.log(new_confirmed_cases_china), color='#DBAE23', \n#        legend_label='China', line_width=1)\n#p1.circle(np.log(list(china['Confirmed'])[-1]), np.log(new_confirmed_cases_china[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(italy['Confirmed'])), np.log(new_confirmed_cases_ita), color='#3EC358', \n        legend_label='Italy', line_width=1)\np1.circle(np.log(list(italy['Confirmed'])[-1]), np.log(new_confirmed_cases_ita[-1]), fill_color=\"white\", size=5)\n\n#p1.line(np.log(list(corea_s['Confirmed'])), np.log(new_confirmed_cases_corea), color='#C3893E', \n#       legend_label='South Korea', line_width=1)\n#p1.circle(np.log(list(corea_s['Confirmed'])[-1]), np.log(new_confirmed_cases_corea[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(india['Confirmed'])), np.log(new_confirmed_cases_india), color='#3E4CC3', \n        legend_label='India', line_width=1)\np1.circle(np.log(list(india['Confirmed'])[-1]), np.log(new_confirmed_cases_india[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(spain['Confirmed'])), np.log(new_confirmed_cases_spain), color='#F54138', \n        legend_label='Spain', line_width=1)\np1.circle(np.log(list(spain['Confirmed'])[-1]), np.log(new_confirmed_cases_spain[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(us['Confirmed'])), np.log(new_confirmed_cases_us), color='#23BCDB', \n        legend_label='United States', line_width=1)\np1.circle(np.log(list(us['Confirmed'])[-1]), np.log(new_confirmed_cases_us[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(german['Confirmed'])), np.log(new_confirmed_cases_german), color='#010A0C', \n        legend_label='Germany', line_width=1)\np1.circle(np.log(list(german['Confirmed'])[-1]), np.log(new_confirmed_cases_german[-1]), fill_color=\"white\", size=5)\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","f744d97f":"countries = virus_data[virus_data['Country'].isin(top_country_codes)]\ncountries_day = countries.groupby(['Date','Code','Country'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nexponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n       \nindia = countries_day.loc[countries_day['Code']=='IND']\n\nnew_confirmed_cases_india = []\nnew_confirmed_cases_india.append( list(india['Confirmed'])[0] - list(india['Deaths'])[0] \n                           - list(india['Recovered'])[0] )\n\nfor i in range(1,len(india)):\n    \n    new_confirmed_cases_india.append( list(india['Confirmed'])[i] - \n                                     list(india['Deaths'])[i] - \n                                    list(india['Recovered'])[i])\n    \n \np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19 in India\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\np = figure(plot_width=400, plot_height=400)\np.outline_line_width = 7\np.outline_line_alpha = 0.3\np.outline_line_color = \"navy\"\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(india['Confirmed'])), np.log(new_confirmed_cases_india), color='#3E4CC3', \n        legend_label='India', line_width=1)\np1.circle(np.log(list(india['Confirmed'])[-1]), np.log(new_confirmed_cases_india[-1]), fill_color=\"white\", size=5)\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus_india.html\", title=\"India.py\")\n\nshow(p1)","06fa6506":"import plotly as py\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=False)","1b8fde9d":"corona_data=pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nchoro_map=px.choropleth(corona_data, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"ObservationDate\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","3279229e":"import pandas as pd\nimport numpy as np\nzone=pd.read_csv('\/kaggle\/input\/covid-19-india-zone-classification\/lockdownindiawarningzones.csv')","15afd8f9":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]}')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n    \ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","cead3d97":"plotPerColumnDistribution(zone, 10, 5)","26941504":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\nstatewise_cases = pd.DataFrame(covid_India_cases.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nstatewise_cases[\"Country\"] = \"India\" # in order to have a single root node\nfig = px.treemap(statewise_cases, path=['Country','State'], values='Confirmed',\n                  color='Confirmed', hover_data=['State'],\n                  color_continuous_scale='Rainbow')\nfig.show()","bc8fe427":"import IPython\nIPython.display.HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","110cb49a":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\nstatewise_cases = pd.DataFrame(covid_India_cases.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nlast=statewise_cases\npos=pd.read_csv('..\/input\/utm-of-india\/UTM ZONES of INDIA.csv')\nind_grp=last.merge(pos , left_on='State', right_on='State \/ Union Territory')","b8c3f432":"import folium\nmap = folium.Map(location=[20.5937, 78.9629], zoom_start=4,tiles='cartodbpositron')\n\nfor lat, lon,state,Confirmed,Recovered,Deaths in zip(ind_grp['Latitude'], ind_grp['Longitude'],ind_grp['State'],ind_grp['Confirmed'],ind_grp['Recovered'],ind_grp['Deaths']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='YlOrRd',\n                      popup =(\n                    'State: ' + str(state) + '<br>'\n                    'Confirmed: ' + str(Confirmed) + '<br>'\n                      'Recovered: ' + str(Recovered) + '<br>'\n                      'Deaths: ' + str(Deaths) + '<br>'),\n\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(map)\nmap","0c87f597":"from folium.plugins import HeatMap\nm = folium.Map(location = [20.5937, 78.9629], zoom_start = 4,tiles='cartodbpositron',columns = ['State\/UnionTerritory','Confirmed'],)\n\nheat_data = [[row['Latitude'],row['Longitude']] for index, row in ind_grp.iterrows()]\nHeatMap(heat_data,radius=16.5, blur = 5.5).add_to(m)\n\nm","72a8d09c":"ind_map=pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\n#ind_map.head()\npos=pd.read_csv('..\/input\/utm-of-india\/UTM ZONES of INDIA.csv')\nind_map1=ind_map.merge(pos , left_on='State\/UnionTerritory', right_on='State \/ Union Territory')\n#ind_map1.head()","29f5b84f":"#ind_map = ind_grp\nind_map1  = ind_map1.groupby(['Date', 'State\/UnionTerritory','Latitude','Longitude'])['Confirmed'].sum()\n\n\nind_map1 = ind_map1.reset_index()\nind_map1.head()\nind_map1['size'] = ind_map1['Confirmed']*90000000\nind_map1\nfig = px.scatter_mapbox(ind_map1, lat=\"Latitude\", lon=\"Longitude\",\n                     color=\"Confirmed\", size='size',hover_data=['State\/UnionTerritory'],\n                     color_continuous_scale='burgyl', animation_frame=\"Date\", \n                     title='Spread total cases over time in India')\nfig.update(layout_coloraxis_showscale=True)\nfig.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=3, mapbox_center = {\"lat\":20.5937,\"lon\":78.9629})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","f540f137":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport squarify\nimport plotly_express as px\n\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline","904bb8a7":"age_details = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\n#ICMR_details = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n","b064b0b9":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')","2d575baf":"india_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'])\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])","3b8cd748":"cumulative_df = india_covid_19.groupby([\"State\/UnionTerritory\", \"Date\"])[\"Confirmed\", \"Deaths\", \"Cured\"].sum().reset_index()\ncumulative_df[\"Date\"] = pd.to_datetime(cumulative_df[\"Date\"] , format=\"%m\/%d\/%Y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"Date\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"Date\"]>=start_date]\ncumulative_df[\"Date\"] = cumulative_df[\"Date\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Confirmed\", y=\"Deaths\", animation_frame=\"Date\", animation_group=\"State\/UnionTerritory\",\n           size=\"Confirmed\", color=\"State\/UnionTerritory\", hover_name=\"State\/UnionTerritory\",\n           log_x=False, size_max=55, range_x=[0,15000], range_y=[-20,800])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of confirmed & death cases over time in India states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of confirmed cases\",\n    yaxis_title = \"Total number of death cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()","99996e4b":"import plotly.express as px\n\nfig = px.pie(age_details, values='TotalCases', names='AgeGroup',title='Confirmed cases of India')\nfig.show()","40aad3a2":"labels = ['Missing', 'Male', 'Female']\nsizes = []\nsizes.append(individual_details['gender'].isnull().sum())\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0, 0.1, 0)\ncolors = ['#ffcc99','#66b3ff','#ff9999']\n\nplt.figure(figsize= (15,10))\nplt.title('Percentage of Gender',fontsize = 20)\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.tight_layout()\n\n","c0d1ba0e":"labels = ['Male', 'Female']\nsizes = []\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0.1, 0)\ncolors = ['#66b3ff','#ff9999']\n\nplt.figure(figsize= (10,8))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.title('Percentage of Gender (Ignoring the Missing Values)',fontsize = 20)\nplt.axis('equal')\nplt.tight_layout()\n\n","31500871":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]","6d7caa02":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] \n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\nplt.legend();\n\n","8421c991":"df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndata = df.copy()\ndata['Date'] = data['Date'].apply(pd.to_datetime)\ndata.drop(['Sno', 'Time'],axis=1,inplace=True)\n\n# collect present data\nfrom datetime import date\ndata_apr = data[data['Date'] > pd.Timestamp(date(2020,4,12))]\n\n# prepaing data state wise\nstate_cases = data_apr.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)","16758d33":"state_details = pd.pivot_table(df, values=['Confirmed','Deaths','Cured'], index='State\/UnionTerritory', aggfunc='max')\nstate_details['Recovery Rate'] = round(state_details['Cured'] \/ state_details['Confirmed'],2)\nstate_details['Deaths']['Madhya Pradesh#']=119\n\nstate_details['Deaths']=state_details['Deaths'].astype(np.float32)\n#state_details=state_details.reset_index()\nstate_details['Active']=state_details['Confirmed']-state_details['Cured']-state_details['Deaths']\n\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\nstate_details = state_details.sort_values(by='Confirmed', ascending= False)\n#state_details.style.background_gradient(cmap='PuBuGn')\nstate_details.style.bar(subset=['Confirmed'], color='#FDD017')\\\n                    .bar(subset=['Cured'], color='lime')\\\n                    .bar(subset=['Deaths'], color='red')\\\n                    .bar(subset=['Active'], color='#0000FF')\\\n                    .bar(subset=['Recovery Rate'], color='#B1FB17')\\\n                    .bar(subset=['Death Rate'], color='#C0C0C0')","abec9420":"state_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\nstate_testing","c42251e3":"labs = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingLabs.csv\")\nfig = px.treemap(labs, path=['state','city'],\n                  color='city', hover_data=['lab','address'],\n                  color_continuous_scale='reds')\nfig.show()","918ffa92":"testing=state_testing.groupby('State').sum().reset_index()\ntesting=testing.sort_values(['TotalSamples'], ascending=True)\nfig = px.bar(testing, \n             x=\"TotalSamples\",\n             y=\"State\", \n             orientation='h',\n             height=800,\n             title='Testing statewise insight')\nfig.show()","8dc4119f":"import plotly.express as px\nvalues = list(ICMR_labs['state'].value_counts())\nnames = list(ICMR_labs['state'].value_counts().index)\ndf = pd.DataFrame(list(zip(values, names)), \n               columns =['values', 'names'])\n\nfig = px.bar(df, \n             x=\"values\", \n             y=\"names\", \n             orientation='h',\n             height=1000,\n             title='ICMR Testing Centers in each State')\nfig.show()\n","c79b15e6":"plt.figure(figsize=(20,60))\nplt.subplot(4,1,1)\nhospital_beds=hospital_beds.sort_values('NumUrbanHospitals_NHP18', ascending= False)\nsns.barplot(data=hospital_beds,y='State\/UT',x='NumUrbanHospitals_NHP18',color=sns.color_palette('RdBu')[0])\nplt.title('Urban Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospital_beds.shape[0]):\n    count = hospital_beds.iloc[i]['NumUrbanHospitals_NHP18']\n    plt.text(count+10,i,count,ha='center',va='center')\n\nplt.subplot(4,1,2)\nhospital_beds=hospital_beds.sort_values('NumRuralHospitals_NHP18', ascending= False)\nsns.barplot(data=hospital_beds,y='State\/UT',x='NumRuralHospitals_NHP18',color=sns.color_palette('RdBu')[1])\nplt.title('Rural Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospital_beds.shape[0]):\n    count = hospital_beds.iloc[i]['NumRuralHospitals_NHP18']\n    plt.text(count+100,i,count,ha='center',va='center')\n\nplt.subplot(4,1,3)\nhospitalBeds=hospital_beds.sort_values('NumUrbanBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumUrbanBeds_NHP18',color=sns.color_palette('RdBu')[5])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumUrbanBeds_NHP18']\n    plt.text(count+1500,i,count,ha='center',va='center')\n\nplt.subplot(4,1,4)\nhospitalBeds=hospitalBeds.sort_values('NumRuralBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumRuralBeds_NHP18',color=sns.color_palette('RdBu')[3])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumRuralBeds_NHP18']\n    plt.text(count+1500,i,count,ha='center',va='center')\n\nplt.show()\nplt.tight_layout()\n","67fffef2":"zone=pd.read_csv('\/kaggle\/input\/covid-19-india-zone-classification\/lockdownindiawarningzones.csv')\nzone.style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'})","1fdf4d2b":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]}')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n    \ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","54c20ec6":"plotPerColumnDistribution(zone, 10, 5)","1477859e":"fig = px.treemap(zone, path=[\"State\",'Zone','District'],\n                  color='Zone',\n                 color_discrete_map={'(?)':'black','Green Zone':'#00FF00', 'Red Zone':'#ff0000', 'Orange Zone':'#FFA500'},\n                 hover_data=['Zone'])\nfig.show()","03538750":"country_codes = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\ncountry_codes = country_codes.drop('GDP (BILLIONS)', 1)\ncountry_codes.rename(columns={'COUNTRY': 'Country', 'CODE': 'Code'}, inplace=True)","d1dc1da0":"virus_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\nprev_index = 0\nfirst_time = False\ntmp = 0\n\n\nfor i, row in virus_data.iterrows():\n\n    if(virus_data.loc[i,'SNo'] < 1342 and virus_data.loc[i,'Province\/State']=='Hubei'):\n        if(first_time):\n            tmp = virus_data.loc[i,'Confirmed']\n            prev_index = i\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[i,'Confirmed'] + 593\n            first_time = False\n        else:\n            increment = virus_data.loc[i,'Confirmed'] - tmp\n            tmp = virus_data.loc[i,'Confirmed']\n            virus_data.loc[i,'Confirmed'] = virus_data.loc[prev_index,'Confirmed'] + increment + 593\n            prev_index = i\n    \n\nvirus_data.rename(columns={'Country\/Region': 'Country', 'ObservationDate': 'Date'}, inplace=True)\nvirus_data = virus_data.fillna('unknow')\nvirus_data['Country'] = virus_data['Country'].str.replace('US','United States')\nvirus_data['Country'] = virus_data['Country'].str.replace('UK','United Kingdom') \nvirus_data['Country'] = virus_data['Country'].str.replace('Mainland China','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('South Korea','Korea, South')\nvirus_data['Country'] = virus_data['Country'].str.replace('North Korea','Korea, North')\nvirus_data['Country'] = virus_data['Country'].str.replace('Macau','China')\nvirus_data['Country'] = virus_data['Country'].str.replace('Ivory Coast','Cote d\\'Ivoire')\nvirus_data = pd.merge(virus_data,country_codes,on=['Country'])\n#virus_data.head()\n#print(len(virus_data))","4d135ec4":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases=covid_India_cases.dropna()\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\ncovid_India_cases = covid_India_cases.fillna('unknow')\ntop_country = covid_India_cases.loc[covid_India_cases['Date'] == covid_India_cases['Date'].iloc[-1]]\ntop_country = top_country.groupby(['State'])['Confirmed'].sum().reset_index()\ntop_country = top_country.sort_values('Confirmed', ascending=False)\ntop_country = top_country[:30]\ntop_country_codes = top_country['State']\ntop_country_codes = list(top_country_codes)\n\n#countries = virus_data.loc[virus_data['Country'] in top_country_codes]\ncountries = covid_India_cases[covid_India_cases['State'].isin(top_country_codes)]\ncountries_day = countries.groupby(['Date','State'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nexponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n    \n################################    Maharashtra    #################\nMaharashtra = countries_day.loc[countries_day['State']=='Maharashtra']\nMaharashtra=Maharashtra.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Maharashtra = []\nnew_confirmed_cases_Maharashtra.append( list(Maharashtra['Confirmed'])[0] - list(Maharashtra['Deaths'])[0] \n                           - list(Maharashtra['Recovered'])[0] )\n\nfor i in range(1,len(Maharashtra)):\n\n    new_confirmed_cases_Maharashtra.append( list(Maharashtra['Confirmed'])[i] - \n                                     list(Maharashtra['Deaths'])[i] - \n                                     list(Maharashtra['Recovered'])[i])\n    \n#######################   Gujarat   ############\nGujarat = countries_day.loc[countries_day['State']=='Gujarat']\nGujarat=Gujarat.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Gujarat = []\nnew_confirmed_cases_Gujarat.append( list(Gujarat['Confirmed'])[0] - list(Gujarat['Deaths'])[0] \n                           - list(Gujarat['Recovered'])[0] )\n\nfor i in range(1,len(Gujarat)):\n    \n    new_confirmed_cases_Gujarat.append( list(Gujarat['Confirmed'])[i] - \n                                  list(Gujarat['Deaths'])[i] - \n                                  list(Gujarat['Recovered'])[i])\n    \n###########################    Delhi   ##################3\nDelhi = countries_day.loc[countries_day['State']=='Delhi']\nDelhi=Delhi.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Delhi = []\nnew_confirmed_cases_Delhi.append( list(Delhi['Confirmed'])[0] - list(Delhi['Deaths'])[0] \n                           - list(Delhi['Recovered'])[0] )\n\nfor i in range(1,len(Delhi)):\n    \n    new_confirmed_cases_Delhi.append( list(Delhi['Confirmed'])[i] - \n                                     list(Delhi['Deaths'])[i] - \n                                    list(Delhi['Recovered'])[i])\n    \n#############################    Madhya Pradesh    ################3\nMadhya_Pradesh = countries_day.loc[countries_day['State']=='Madhya Pradesh']\nMadhya_Pradesh=Madhya_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Madhya_Pradesh = []\nnew_confirmed_cases_Madhya_Pradesh.append( list(Madhya_Pradesh['Confirmed'])[0] - list(Madhya_Pradesh['Deaths'])[0] \n                           - list(Madhya_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Madhya_Pradesh)):\n    \n    new_confirmed_cases_Madhya_Pradesh.append( list(Madhya_Pradesh['Confirmed'])[i] - \n                                     list(Madhya_Pradesh['Deaths'])[i] - \n                                    list(Madhya_Pradesh['Recovered'])[i])\n    \n################################   Rajasthan  ##########\nRajasthan = countries_day.loc[countries_day['State']=='Rajasthan']\nRajasthan=Rajasthan.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Rajasthan = []\nnew_confirmed_cases_Rajasthan.append( list(Rajasthan['Confirmed'])[0] - list(Rajasthan['Deaths'])[0] \n                           - list(Rajasthan['Recovered'])[0] )\n\nfor i in range(1,len(Rajasthan)):\n    \n    new_confirmed_cases_Rajasthan.append( list(Rajasthan['Confirmed'])[i] - \n                                     list(Rajasthan['Deaths'])[i] - \n                                    list(Rajasthan['Recovered'])[i])\n    \n#################################    Uttar Pradesh   ##############\nUttar_Pradesh = countries_day.loc[countries_day['State']=='Uttar Pradesh']\nUttar_Pradesh=Uttar_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Uttar_Pradesh = []\nnew_confirmed_cases_Uttar_Pradesh.append( list(Uttar_Pradesh['Confirmed'])[0] - list(Uttar_Pradesh['Deaths'])[0] \n                           - list(Uttar_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Uttar_Pradesh)):\n    \n    new_confirmed_cases_Uttar_Pradesh.append( list(Uttar_Pradesh['Confirmed'])[i] - \n                                     list(Uttar_Pradesh['Deaths'])[i] - \n                                    list(Uttar_Pradesh['Recovered'])[i])\n    \n#####################################  Tamil Nadu  ############\nTamil_Nadu = countries_day.loc[countries_day['State']=='Tamil Nadu']\nTamil_Nadu=Tamil_Nadu.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Tamil_Nadu = []\nnew_confirmed_cases_Tamil_Nadu.append( list(Tamil_Nadu['Confirmed'])[0] - list(Tamil_Nadu['Deaths'])[0] \n                           - list(Tamil_Nadu['Recovered'])[0] )\n\nfor i in range(1,len(Tamil_Nadu)):\n    \n    new_confirmed_cases_Tamil_Nadu.append( list(Tamil_Nadu['Confirmed'])[i] - \n                                     list(Tamil_Nadu['Deaths'])[i] - \n                                    list(Tamil_Nadu['Recovered'])[i])\n######################################## Andhra Pradesh ##############\nAndhra_Pradesh = countries_day.loc[countries_day['State']=='Andhra Pradesh']\nAndhra_Pradesh=Andhra_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Andhra_Pradesh = []\nnew_confirmed_cases_Andhra_Pradesh.append( list(Andhra_Pradesh['Confirmed'])[0] - list(Andhra_Pradesh['Deaths'])[0] \n                           - list(Andhra_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Andhra_Pradesh)):\n    \n    new_confirmed_cases_Andhra_Pradesh.append( list(Andhra_Pradesh['Confirmed'])[i] - \n                                     list(Andhra_Pradesh['Deaths'])[i] - \n                                    list(Andhra_Pradesh['Recovered'])[i])\n\n########################################Telengana#####################\n\n#Telengana = countries_day.loc[countries_day['State']=='Telengana']\n#Telengana=Telengana.sort_values('Confirmed',ascending=True)\n\n#new_confirmed_cases_Telengana = []\n#new_confirmed_cases_Telengana.append( list(Telengana['Confirmed'])[0] - list(Telengana['Deaths'])[0] \n#                           - list(Telengana['Recovered'])[0] )\n\n#for i in range(1,len(Telengana)):\n    \n#    new_confirmed_cases_Telengana.append( list(Telengana['Confirmed'])[i] - \n#                                     list(Telengana['Deaths'])[i] - \n#                                    list(Telengana['Recovered'])[i])\n\n\n##########################################  West Bengal #####################33\nWest_Bengal = countries_day.loc[countries_day['State']=='West Bengal']\nWest_Bengal=West_Bengal.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_West_Bengal = []\nnew_confirmed_cases_West_Bengal.append( list(West_Bengal['Confirmed'])[0] - list(West_Bengal['Deaths'])[0] \n                           - list(West_Bengal['Recovered'])[0] )\n\nfor i in range(1,len(West_Bengal)):\n    \n    new_confirmed_cases_West_Bengal.append( list(West_Bengal['Confirmed'])[i] - \n                                     list(West_Bengal['Deaths'])[i] - \n                                    list(West_Bengal['Recovered'])[i])\n############################################ \np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(Maharashtra['Confirmed'])), np.log(new_confirmed_cases_Maharashtra), color='#DBAE23', \n        legend_label='Maharashtra', line_width=1)\np1.circle(np.log(list(Maharashtra['Confirmed'])[-1]), np.log(new_confirmed_cases_Maharashtra[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Gujarat['Confirmed'])), np.log(new_confirmed_cases_Gujarat), color='#3EC358', \n        legend_label='Gujarat', line_width=1)\np1.circle(np.log(list(Gujarat['Confirmed'])[-1]), np.log(new_confirmed_cases_Gujarat[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Delhi['Confirmed'])), np.log(new_confirmed_cases_Delhi), color='#C3893E', \n       legend_label='Delhi', line_width=1)\np1.circle(np.log(list(Delhi['Confirmed'])[-1]), np.log(new_confirmed_cases_Delhi[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(Madhya_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Madhya_Pradesh), color='#3E4CC3', \n        legend_label='Madhya Pradesh', line_width=1)\np1.circle(np.log(list(Madhya_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Madhya_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Rajasthan['Confirmed'])), np.log(new_confirmed_cases_Rajasthan), color='#F54138', \n        legend_label='Rajasthan', line_width=1)\np1.circle(np.log(list(Rajasthan['Confirmed'])[-1]), np.log(new_confirmed_cases_Rajasthan[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Uttar_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Uttar_Pradesh), color='#23BCDB', \n        legend_label='Uttar Pradesh', line_width=1)\np1.circle(np.log(list(Uttar_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Uttar_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Tamil_Nadu['Confirmed'])), np.log(new_confirmed_cases_Tamil_Nadu), color='#010A0C', \n        legend_label='Tamil Nadu', line_width=1)\np1.circle(np.log(list(Tamil_Nadu['Confirmed'])[-1]), np.log(new_confirmed_cases_Tamil_Nadu[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Andhra_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Andhra_Pradesh), color='#bf40bf', \n        legend_label='Andhra Pradesh', line_width=1)\np1.circle(np.log(list(Andhra_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Andhra_Pradesh[-1]), fill_color=\"white\", size=5)\n\n#p1.line(np.log(list(Telengana['Confirmed'])), np.log(new_confirmed_cases_Telengana), color='lime', \n#        legend_label='Telengana', line_width=1)\n#p1.circle(np.log(list(Telengana['Confirmed'])[-1]), np.log(new_confirmed_cases_Telengana[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(West_Bengal['Confirmed'])), np.log(new_confirmed_cases_West_Bengal), color='#0000ff', \n        legend_label='West Bengal', line_width=1)\np1.circle(np.log(list(West_Bengal['Confirmed'])[-1]), np.log(new_confirmed_cases_West_Bengal[-1]), fill_color=\"white\", size=5)\n\n\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","c3e59dc6":"p1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(Maharashtra['Confirmed'])), np.log(new_confirmed_cases_Maharashtra), color='#DBAE23', \n        legend_label='Maharashtra', line_width=1)\np1.circle(np.log(list(Maharashtra['Confirmed'])[-1]), np.log(new_confirmed_cases_Maharashtra[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(West_Bengal['Confirmed'])), np.log(new_confirmed_cases_West_Bengal), color='Blue', \n        legend_label='West_Bengal', line_width=1)\np1.circle(np.log(list(West_Bengal['Confirmed'])[-1]), np.log(new_confirmed_cases_West_Bengal[-1]), fill_color=\"white\", size=5)\n\n\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","e72bbffb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n# Any results you write to the current directory are saved as output.\ntrain=pd.read_csv('\/kaggle\/input\/coronavirus-2019ncov\/covid-19-all.csv')","480f2cf9":"train.head(5)","bdb85539":"country_df = train[train['Country\/Region']=='India'].groupby('Date')['Confirmed','Deaths'].sum()\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\nydata = country_df.Confirmed\nxdata = country_df.day_count\ncountry_df['rate'] = (country_df.Confirmed-country_df.Confirmed.shift(1))\/country_df.Confirmed\ncountry_df['increase'] = (country_df.Confirmed-country_df.Confirmed.shift(1))\n\nplt.plot(xdata, ydata, 'o')\nplt.title(\"India\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()","4692261a":"from scipy.optimize import curve_fit\nimport pylab\n\n\ndef sigmoid(x,c,a,b):\n     y = c*1 \/ (1 + np.exp(-a*(x-b)))\n     return y\n#country_df.ConfirmedCases\n#country_df.day_count\nxdata = np.array([1, 2, 3,4, 5, 6, 7])\nydata = np.array([0, 0, 13, 35, 75, 89, 91])\n\n#([low_a,low_b],[high_a,high_b])\n#low x --> low b\n#high y --> high c\n#a is the sigmoidal shape.\npopt, pcov = curve_fit(sigmoid, xdata, ydata, method='dogbox',bounds=([0.,0., 0.],[100,2, 10.]))\nprint(popt)\n\nx = np.linspace(-1, 10, 50)\ny = sigmoid(x, *popt)\n\npylab.plot(xdata, ydata, 'o', label='data')\npylab.plot(x,y, label='fit')\npylab.ylim(-0.05, 105)\npylab.legend(loc='best')\npylab.show()","85a842a7":"in_df = train[train['Country\/Region']=='India'].groupby('Date')['Confirmed','Deaths','Recovered'].sum().reset_index(False)\nin_df['Active']=in_df['Confirmed']-in_df['Deaths']-in_df['Recovered']\nin_df = in_df[in_df.Active>=100]","3a73a0ca":"in_df.tail()","25d255ab":"from scipy.optimize import curve_fit\nimport pylab\nfrom datetime import timedelta\n\nin_df['day_count'] = list(range(1,len(in_df)+1))\nin_df['increase'] = (in_df.Active-in_df.Active.shift(1))\nin_df['rate'] = (in_df.Active-in_df.Active.shift(1))\/in_df.Active\n\n\ndef sigmoid(x,c,a,b):\n     y = c*1 \/ (1 + np.exp(-a*(x-b)))\n     return y\n\nxdata = np.array(list(in_df.day_count)[::2])\nydata = np.array(list(in_df.Active)[::2])\n\npopulation=1.332*10**9\n#popt, pcov = curve_fit(sigmoid, xdata, ydata, method='dogbox',bounds=([0.,0., 0.],[population,6, 100.]))\n#print(popt)","2ce453e2":"est_a = 197000 #popt[0]\nest_b = 0.07 #popt[1]\nest_c = 76 #popt[2]\nx = np.linspace(-1, in_df.day_count.max()+50, 50)\ny = sigmoid(x,est_a,est_b,est_c)\npylab.plot(xdata, ydata, 'o', label='data')\npylab.plot(x,y, label='fit',alpha = 0.6)\npylab.ylim(-0.05, est_a*1.05)\npylab.xlim(-0.05, est_c*2.05)\npylab.legend(loc='best')\nplt.xlabel('days from day 1')\nplt.ylabel('confirmed cases')\nplt.title('India')\npylab.show()\n\n\n#print('model start date:',in_df[in_df.day_count==1].index[0])\n#print('model start infection:',int(in_df[in_df.day_count==1].Active[0]))\nprint('model fitted max Active at:',int(est_a))\nprint('model sigmoidal coefficient is:',round(est_b,3))\nprint('model curve stop steepening, start flattening by day:',int(est_c))\nprint('model curve flattens by day:',int(est_c)*2)\ndisplay(in_df.head(3))\ndisplay(in_df.tail(3))","b0429a53":"## From this, its seen that in case of India if the graph goes like that:\n*  **max Active case: 197000**  \u2620\ufe0f\n* \u00a0**curve stop steepening, start flattening by day: 76 ,which is: 29\/05\/2020**\n* \u00a0**curve flattens by day: 152  which is: 12\/08\/2020**","4f78056a":"![](https:\/\/media.giphy.com\/media\/UUsOy6IWmzw6mmeOpQ\/giphy.gif)","8679afae":"# State view: ","ed7390d2":"# Hope you guys find this notebook useful. \n# If you like this notebook, please upvote.***\ud83d\udc4d \n# Thanks in advance**","d364a712":"* **Looks like Telengana is goint into a safe zone**\n* **Here comes the most controversial state - \"West Bengal\" along with the most infected state - \"Maharashtra\":**","64d02c2d":"![](https:\/\/media0.giphy.com\/media\/WOkuHrhNv4LQVeSoik\/giphy.gif?cid=ecf05e4748c6ef5d1983f3a0b50e6195a51aa49635340b4c&rid=giphy.gif)","a1ef85e5":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/38\/CSIR_Corona_Combat_Mission.png\/463px-CSIR_Corona_Combat_Mission.png)","1342f492":"# The Story of COVID-19 in India","baa60c05":"# Containment Zones in India","c122d20c":"# Time plot ","7f444410":"# Laboratory","2c6350d0":"# Global","19b59c27":"The first case of the 2019\u201320 coronavirus pandemic in India was reported on 30 January 2020, originating from China. Experts suggest the number of infections could be much higher as India's testing rates are among the lowest in the world. The infection rate of COVID-19 in India is reported to be 1.7, significantly lower than in the worst affected countries.\n\nThe outbreak has been declared an epidemic in more than a dozen states and union territories, where provisions of the Epidemic Diseases Act, 1897 have been invoked, and educational institutions and many commercial establishments have been shut down. India has suspended all tourist visas, as a majority of the confirmed cases were linked to other countries.\n\nOn 22 March 2020, India observed a 14-hour voluntary public curfew at the instance of the prime minister Narendra Modi. The government followed it up with lockdowns in 75 districts where COVID cases had occurred as well as all major cities. Further, on 24 March, the prime minister ordered a nationwide lockdown for 21 days, affecting the entire 1.3 billion population of India.\n\nThe World Health Organisation chief executive director of health emergencies programme Michael Ryan said that India had \"tremendous capacity\" to deal with the coronavirus outbreak and, as the second most populous country, will have enormous impact on the world's ability to deal with it.Other commentators worried about the economic devastation caused by the lockdown, which has huge effects on informal workers, micro and small enterprises, farmers and the self-employed, who are left with no livelihood in the absence of transportation and access to markets. The lockdown was justified by the government and other agencies for being preemptive to prevent India from entering a higher stage which could make handling very difficult and cause even more losses thereafter.\n\nAccording to a study at Shiv Nadar University, India could have witnessed a surge of 31,000 cases of disease between March 24 and April 14 without lockdown.","d9588590":"# Testings","0c36703f":"I thought of a sigmoidal function because China's data resembled a sigmoidal shape. Therefore, I try to fit sigmoid functions onto India's. Its just a guess as per the graph about the cases in India.","f0ccc3a3":"# India COVID19 Forecasting","1e4792f1":"# Map View","94148612":"# Sigmoid model","a00a72bc":"# Heat Map ","37f0c0e7":"# Containment Zones","26b28231":"# Tree plot","dbebec65":"\n****Sigmoid function,\n\nHere is a snap of how I learnt to fit Sigmoid Function - y = c\/(1+np.exp(-a*(x-b))) and 3 coefficients [c, a, b]:\n\n* c - the maximum value (eventual maximum infected people, the sigmoid scales to this value eventually)\n* a - the sigmoidal shape (how the infection progress. The smaller, the softer the sigmoidal shape is)\n* b - the point where sigmoid start to flatten from steepening (the midpoint of sigmoid, when the rate of increase start to slow down)\n\n","5b32caf5":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/ef\/COVID-19_Outbreak_Cases_in_India.svg\/512px-COVID-19_Outbreak_Cases_in_India.svg.png)","43eb04cb":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/5\/5c\/Trakectproes-Covid-confirmed-cases-since-100th-case.svg\/800px-Trakectproes-Covid-confirmed-cases-since-100th-case.svg.png)","75aa2710":"# Time Plot","65fa0078":"# Introduction","e3d81961":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/95\/COVID-19_India_Total_Cases_Animated_Map.gif\/527px-COVID-19_India_Total_Cases_Animated_Map.gif)","1543334d":"# Hospital Bed","9d47529c":"![](https:\/\/images.livemint.com\/img\/2020\/04\/19\/600x338\/newheaderwithjkandts_1587287652517_1587287652901.png)"}}