{"cell_type":{"6ed5b5d7":"code","8f4b331c":"code","97a5b8ae":"code","290b359f":"code","2427046d":"code","ac3d9d8f":"code","a8fe04ba":"code","1b611f48":"code","54930e4f":"code","6cf74c75":"code","9c229aa0":"code","2dd27a3a":"code","8e3e5664":"code","473ec251":"code","2511e4e1":"markdown","41353c28":"markdown","b932f545":"markdown","cc44e7c4":"markdown","b22053bd":"markdown","a66218d2":"markdown","fb1afe14":"markdown"},"source":{"6ed5b5d7":"import numpy as np\nimport pandas as pd","8f4b331c":"df = pd.read_csv(\"..\/input\/groceries-dataset-for-market-basket-analysismba\/Groceries data.csv\")","97a5b8ae":"df.head()","290b359f":"df['date'] = pd.to_datetime(df[['year', 'month', 'day']])\ndf.head()","2427046d":"df['member_date'] = list(zip(df['Member_number'], df['date'].dt.date))\ndf['quantity'] = 1","ac3d9d8f":"df.shape","a8fe04ba":"df.groupby('itemDescription').size().sort_values(ascending=False)","1b611f48":"basket = df.groupby(['member_date', 'itemDescription'])['quantity'].count().unstack().fillna(0)","54930e4f":"def convert_values(value):\n    if value >= 1:\n        return 1\n    else:\n        return 0 ","6cf74c75":"basket = basket.applymap(convert_values)","9c229aa0":"from mlxtend.frequent_patterns import apriori \nfrom mlxtend.frequent_patterns import association_rules","2dd27a3a":"basket_items = apriori(basket, min_support = 0.005, use_colnames = True, max_len = 2)","8e3e5664":"rules = association_rules(basket_items, metric = 'lift')","473ec251":"rules.sort_values(\"confidence\", ascending=False).head(15)","2511e4e1":"> **Here we can see, on descending order, the more often products bought on the given shop, and also we see that the shop has 167 products. Next, we'll build the structure to make the analysis, grouping the items in the same Member_number, year, month and day. It is import to note that, by grouping Membernumber, year, month and day, we are considering that a Member made 1 purchase on that specific day, with 1 or more items on that purchase.**","41353c28":"> **We need to perform a grouping on Member_number and date of purchase by putting them in a tuple, to impose that a purchase is defined by a combination of the Member going to the store on a specific day. This would be easier if we had an orderId field, but in this case, we had to construct the member_date field, which is our own orderId in this case. We are also creating a redundant field \"quantity\" which means each product was bought in 1 unit.**","b932f545":"> **This analysis can also be used to make product recomendation, or to verify if certain product combos are behaving as expected(people are really buying the white shirt+pants combo instead of buying a purple shirt and white pants).**","cc44e7c4":"> **And here we have our association rules for the MBA Analysis. Note that we are giving more importance to the \"confidence\" field here, which is the chance of buying the second product(consequent) given the first one(antecedent) was bought. Since the 'whole milk' is the most purchased product in this shop, it'll be the consequent for most antecedents, but we can see in the 6\u00ba line of the table that someone who buys 'frankfurter' has a 13% chance of buying 'other vegetables'.**","b22053bd":"> **We'll be creating a date column by collapsing the columns year, month and day to help us manage the data.**","a66218d2":"### **Dataset**\n\n> **We'll be dealing with the Groceries dataset provided by Kaggle to perform the Market Basket Analysis. This analysis can be used as a way to offer products based on items that has been purchased often together, or to infer the rate which products that should be bought together, in fact are. As an example, suppose a companny offers a combo shirt+shorts, with this analysis, you may know how good the combo is performing.**","fb1afe14":"> **Wel'll be using MLXtend package which offers us tools to make the calculations needed for the association rules.**"}}