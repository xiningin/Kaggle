{"cell_type":{"22e9a661":"code","c937bbee":"code","c481a6be":"code","bc717a12":"code","a25df7cb":"code","5a240b2a":"code","bd412a03":"code","1b1e611a":"code","55d667ab":"code","61e01f0d":"code","0e65b901":"code","5243bb71":"code","f66aa2fe":"code","ab99cfc5":"code","6ac9b06b":"code","8fc33443":"code","7be1c5db":"code","300d8da7":"code","6c485675":"code","07c9d882":"code","68fc9ece":"code","5dcbcc25":"code","583328b8":"code","e69c16db":"code","9b1f3aaf":"code","c227754b":"code","e7e95491":"code","434d8d0b":"code","a9973793":"code","e1200b19":"code","3fdcd24c":"code","eae6a9b6":"code","0518f5c0":"code","65f5c696":"code","f9240a16":"code","429a6eb3":"code","111cea07":"code","2b4e2e7f":"code","161ad319":"code","9c9ec495":"code","d18f6273":"code","e9bb5d03":"code","792f1256":"code","642379be":"code","835a70ba":"code","5b90c614":"code","6f8d2a49":"code","81912a16":"code","c977513f":"code","b8f99bd3":"code","0ece8240":"code","ebe0a290":"code","917eb318":"code","0bae7f5a":"code","1f2c4408":"code","283138e3":"code","de7167f6":"markdown","caf5437c":"markdown"},"source":{"22e9a661":"import pandas as pd\nimport pandas_datareader.data as web\n#import quandl\nfrom datetime import datetime\nimport warnings\nfrom datetime import timedelta\nimport numpy as np","c937bbee":"start = datetime(2018, 1, 1)\nend = datetime.now()","c481a6be":"data_input = pd.DataFrame()\ndata_input['head'] = ['spot','lib_yen','lib_eur','us_Tres','us_goods','for_goods','nasdaq','gold_etf','vix','vixsp','gold' ]\ndata_input['tag'] = ['DCOILWTICO','JPY3MTD156N','EUR3MTD156N','DLTIIT','DTWEXBGS','DTWEXAFEGS','NASDAQCOM','GVZCLS','VIXCLS','VXVCLS','GOLDPMGBD228NLBM']\nprint(data_input)","bc717a12":"drip = pd.read_csv(r'..\/input\/ext1data\/DRIP.csv')\ndrip['DATE'] = pd.to_datetime(drip['DATE'],format = '%Y-%m-%d')\ndrip.set_index(\"DATE\", inplace = True)\nspdr = pd.read_csv(r'..\/input\/ext1data\/spdroil.csv')\nspdr['DATE'] = pd.to_datetime(spdr['DATE'],format = '%Y-%m-%d')\nspdr.set_index(\"DATE\", inplace = True)\ndow_oil = pd.read_excel(r'..\/input\/ext1data\/dow_oil.xlsx')\ndow_oil['DATE'] = pd.to_datetime(dow_oil['DATE'],format = '%Y-%m-%d')\ndow_oil.set_index(\"DATE\", inplace = True)\nCrude_oil_WTI = pd.read_csv(r'..\/input\/ext1data\/Crude_oil_trend.csv')\nCrude_oil_WTI['Date'] = pd.to_datetime(Crude_oil_WTI['Date'],format = '%Y-%m-%d')\nCrude_oil_WTI.rename(columns={ 'Date':\"DATE\" }, inplace = True)\nwti_1m = Crude_oil_WTI.copy()\nCrude_oil_WTI.rename(columns = {'Price':'sp_price'}, inplace = True)\n#Crude_oil_WTI['DATE'] = pd.to_datetime(Crude_oil_WTI['DATE'],format = '%Y-%m-%d')\nprint(list(Crude_oil_WTI.columns))\nprint(Crude_oil_WTI.head())\nCrude_oil_WTI.set_index(\"DATE\", inplace = True)\nCrude_oil_WTI = Crude_oil_WTI[start:end]\nCrude_oil_WTI = Crude_oil_WTI.join(drip, how='left')\nCrude_oil_WTI = Crude_oil_WTI.join(spdr, how='left')\nCrude_oil_WTI = Crude_oil_WTI.join(dow_oil, how='left')\nfor index, row in data_input.iterrows():\n    h=row['head']\n    t=row['tag']\n    #print(h)\n    #print(t)\n    fred = pd.DataFrame()\n    fred = web.get_data_fred(t, start, end) #3-Month London Interbank Offered Rate (LIBOR), based on Euro (EUR3MTD156N)\n    fred = pd.DataFrame(fred)\n    fred.rename(columns={ fred.columns[0]:h }, inplace = True)\n    fred.reset_index(drop=False, inplace=True)\n    fred['DATE'] = pd.to_datetime(fred['DATE'],format = '%Y-%m-%d')\n    fred.set_index(\"DATE\", inplace = True)\n    #if h=='wti':\n    #        fred_df = fred\n   #else:\n    Crude_oil_WTI = Crude_oil_WTI.join(fred, how='left')\nprint(Crude_oil_WTI.head())\n ","a25df7cb":"wti = Crude_oil_WTI.copy(deep=True)","5a240b2a":"corrmat = Crude_oil_WTI.corr()\nprint(corrmat['sp_price'])","bd412a03":"wti['sp_price'].max()","1b1e611a":"wti['sp_price'].min()","55d667ab":"wti = wti[\"2018-01-01\":\"2020-07-06\"]\nwti = wti[wti['sp_price'].notna()]\nwti=wti.dropna()\nwti.head()\nwti_1m.head()","61e01f0d":"wti.reset_index(drop=False, inplace=True)\nwti['DATE'] = pd.to_datetime(wti['DATE'],format = '%Y-%m-%d')\nwti['1m_DATE'] = wti['DATE'] + pd.DateOffset(days=51)\nwti_1m['DATE'] = pd.to_datetime(wti_1m['DATE'],format = '%Y-%m-%d')\nwti_1m.rename(columns={ 'DATE':\"DATE_2m\" }, inplace = True)\nwti = pd.merge(wti,wti_1m,left_on='1m_DATE',right_on='DATE_2m',how='left')\nwti.head()","0e65b901":"wti.set_index(\"DATE\", inplace = True)\nwti = wti.drop(columns='DATE_2m',axis=1)\nwti['Price'] = wti['Price'].fillna(method='bfill')\nwti.head()","5243bb71":"wti.head()","f66aa2fe":"wti.iloc[:, 1:16]","ab99cfc5":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.preprocessing import MinMaxScaler\nMinmax = MinMaxScaler(feature_range=(27,70))\n\nwti.iloc[:, 1:16] = Minmax.fit_transform(wti.iloc[:, 1:16])\n\n\n#wti.loc[:, wti.columns != {'Price','sp_price','1m_DATE'}] = QuantileTransformer(output_distribution='normal').fit_transform(wti.loc[:, wti.columns != {'Price','sp_price','1m_DATE'}])\n#wti.iloc[:, 1:17] = QuantileTransformer(output_distribution='normal').fit_transform(wti.iloc[:, 1:17])\n    # PowerTransformer(method='box-cox').fit_transform(X)),\n   # ('Data after quantile transformation (gaussian pdf)',\n     #   QuantileTransformer(output_distribution='normal')\n      #  .fit_transform(X)),","6ac9b06b":"wti = wti.drop(columns='spot',axis=1)\ncorrmat = wti.corr()\nprint(corrmat['Price'])","8fc33443":"wti","7be1c5db":"\nwti_c = wti.drop(columns={'drip_vol','spdr_oil_vol','lib_yen','lib_eur','nasdaq'},axis=1)","300d8da7":"wti_c.head()","6c485675":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\ncol = list(wti_c.columns)\ncol.remove('1m_DATE')\ncol.remove('Price')\nfor i in col:\n    # multiple line plot\n    plt.plot( wti_c.index, wti_c['Price'], marker='', color='Blue',label=\"Price\")\n    plt.plot( wti_c.index, wti_c[i] , marker='', color='red', linewidth=2,label=i)\n    plt.legend()\n    plt.show()","07c9d882":"wti_c = wti_c.drop(columns='gold',axis=1)\nwti_c.tail()","68fc9ece":"#wti_c.to_csv(r'E:\\python\\kaggle map comp\\Ext Data\\Ext Data\\1Jul2020\\wti_c.csv')","5dcbcc25":"train = wti_c[:\"2020-04-13\"]\ntest1 = wti_c[\"2020-04-14\":\"2020-07-06\"]\ntrain.tail()","583328b8":"train.head()","e69c16db":"from sklearn.linear_model import LinearRegression","9b1f3aaf":"model = LinearRegression()","c227754b":"train.reset_index(drop=False,inplace=True)\ntest1.reset_index(drop=False,inplace=True)\nx_train = train.iloc[:, 1:11]\n\nx_test1 = test1.iloc[:, 1:11]\nx_train.head()","e7e95491":"y_train = train['Price']\n\ny_test1 = test1['Price']\ny_train.head()","434d8d0b":"model = LinearRegression()\nmodel.fit(x_train, y_train)","a9973793":"pred = model.predict(x_test1)","e1200b19":"print(pred)","3fdcd24c":"test1.head()","eae6a9b6":"test1['lin_Pred'] = pred\nresult = test1.iloc[:,11:14]\nresult.head()","0518f5c0":"result.tail()","65f5c696":"import xgboost as xgb\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt ","f9240a16":"xg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)","429a6eb3":"xg_reg.fit(x_train,y_train)","111cea07":"preds = xg_reg.predict(x_test1)","2b4e2e7f":"preds\ntest1['xgb_Pred'] = preds\nresult = test1.iloc[:,11:15]\nresult.head()","161ad319":"result.set_index('1m_DATE',drop=False,inplace=True)\nrm = result[\"2020-06-04\":\"2020-07-02\"]\nrm.tail()\n","9c9ec495":"rmse_xgb = np.sqrt(mean_squared_error(rm['Price'], rm['xgb_Pred']))\nprint(\"RMSE: %f\" % (rmse_xgb))","d18f6273":"rmse_lin= np.sqrt(mean_squared_error(rm['Price'], rm['lin_Pred']))\nprint(\"RMSE: %f\" % (rmse_lin))\n","e9bb5d03":"xgb_res = result[\"2020-07-07\":\"2020-08-21\"]","792f1256":"xgb_res = xgb_res.drop(columns = ['Price','lin_Pred'],axis=1)","642379be":"xgb_res.reset_index(drop=True,inplace=True)","835a70ba":"xgb_res.rename(columns = {'1m_DATE':'Date','xgb_Pred':\"Price\"}, inplace = True) \nxgb_res['Date'] = pd.to_datetime(xgb_res['Date'],format = '%Y-%m-%d')\nxgb_res","5b90c614":"Crude_oil_WTI.head()","6f8d2a49":"df = Crude_oil_WTI[\"2020-04-29\":\"2020-07-06\"]","81912a16":"df = df.loc[:, ['sp_price']]","c977513f":"df\n","b8f99bd3":"xgb_res.rename(columns = {'DATE':'Date'}, inplace = True) \ndf.rename(columns = {'sp_price':\"Price\"}, inplace = True) \ndf.reset_index(drop=False,inplace=True)\ndf.rename(columns = {'DATE':'Date'}, inplace = True) ","0ece8240":"df = df.append(xgb_res,ignore_index=True)\ndf['Date'] = pd.to_datetime(df['Date'],format = '%Y-%m-%d')","ebe0a290":"df = df[df[\"Date\"].dt.weekday < 5]\ndf.head()","917eb318":"df","0bae7f5a":"df = df.append({'Date':'2020-07-03','Price': 27.18413333},ignore_index=True)","1f2c4408":"df = df.append({'Date':'2020-07-13','Price': 26.92253333},ignore_index=True)\ndf = df.append({'Date':'2020-07-07','Price': 27.4512},ignore_index=True)\ndf = df.append({'Date':'2020-07-14','Price': 26.92253333},ignore_index=True)\ndf = df.append({'Date':'2020-07-15','Price': 26.92253333},ignore_index=True)\ndf = df.append({'Date':'2020-07-20','Price': 26.50946667},ignore_index=True)\ndf = df.append({'Date':'2020-07-21','Price': 26.50946667},ignore_index=True)\ndf = df.append({'Date':'2020-07-27','Price': 27.49241829},ignore_index=True)\ndf = df.append({'Date':'2020-07-28','Price': 27.49241829},ignore_index=True)\ndf = df.append({'Date':'2020-08-03','Price': 23.95260429},ignore_index=True)\ndf = df.append({'Date':'2020-08-04','Price': 23.95260429},ignore_index=True)\ndf = df.append({'Date':'2020-08-10','Price': 23.95260429},ignore_index=True)\ndf = df.append({'Date':'2020-08-11','Price': 23.95260429},ignore_index=True)\ndf = df.append({'Date':'2020-08-17','Price': 23.95260429},ignore_index=True)\ndf = df.append({'Date':'2020-08-18','Price': 23.95260429},ignore_index=True)\ndf['Date'] = pd.to_datetime(df['Date'],format = '%Y-%m-%d')","283138e3":"df.to_csv(r'\/kaggle\/working\/submission.csv',index=False)","de7167f6":"Data downloaded for model","caf5437c":"# XGB Regressor model using multiple variables downloaded online from US Federal reserve bank stats\n\nWe have tried using XGB regressor to develop a time independent model to predict WTI prices using US Federal reserve online\n\n\n3-Month London Interbank Offered Rate (LIBOR), based on Japanese Yen (JPY3MTD156N)\n3-Month London Interbank Offered Rate (LIBOR), based on Euro (EUR3MTD156N)\nTreasury Inflation-Indexed Long-Term Average Yield (DLTIIT)\nTrade Weighted U.S. Dollar Index: Broad, Goods and Services (DTWEXBGS)\nTrade Weighted U.S. Dollar Index: Advanced Foreign Economies, Goods and Services (DTWEXAFEGS)\nNASDAQ Composite Index (NASDAQCOM)\nCBOE Gold ETF Volatility Index (GVZCLS)\nCBOE Volatility Index: VIX (VIXCLS)\nCBOE S&P 500 3-Month Volatility Index (VXVCLS)\nNatural Gas Consumption (NATURALGASD11)\nBusiness Expectations: Employment Growth Index (ATLSBUEGEI)\nHigh-Propensity Business Applications for the United States (HBUSAPPWNSAUSYY)\nCrude Oil Prices: West Texas Intermediate (WTI) - Cushing, Oklahoma (DCOILWTICO)\nGold Fixing Price 3:00 P.M. (London time) in London Bullion Market, based in U.S. Dollars (GOLDPMGBD228NLBM)\nWeekly Economic Index (Lewis-Mertens-Stock) (WEI)"}}