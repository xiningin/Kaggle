{"cell_type":{"002db68a":"code","350bb737":"code","2055bbd9":"code","753beb6d":"code","32d97bee":"code","b6c78122":"code","73cad55f":"code","c4a8573b":"code","d2fd042c":"code","9535b3e8":"code","98484f65":"code","6b8d1352":"code","326e33a4":"code","dfc7cbd1":"code","e3969b9c":"code","4de3a00d":"code","81982188":"code","6a8129c8":"code","18e15c32":"code","8549a1b7":"code","00dc2a61":"code","1fc08156":"code","3cd6b57e":"code","87a2fef5":"code","c3b60f78":"code","5b7b4578":"code","c622e6b7":"code","5a91ebf7":"code","c21f8948":"code","c9d9e93d":"code","f6be85c1":"code","9cef3a74":"code","da1fdf49":"code","455749f1":"code","debbf612":"code","bf5dcc90":"code","11e9f1f9":"code","3792f485":"code","257782ae":"code","39561ba2":"code","e10a26f5":"code","ec4388af":"code","519985b5":"code","ec36d576":"code","169f7827":"code","2f06abd7":"code","9182aaae":"code","aebae6e0":"code","39b5c741":"markdown"},"source":{"002db68a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D,InputLayer, Dropout, BatchNormalization, Flatten, Dense, MaxPooling2D\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.models import Sequential","350bb737":"Dataset = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')\nDataset.head(5)","2055bbd9":"Dataset.shape","753beb6d":"Dataset.describe()","32d97bee":"Dataset.info()","b6c78122":"# Actually images are in string format, let's transform it in more useful type of data.\n\nDataset['pixels'] = Dataset['pixels'].map(lambda x: np.array(x.split(' '), dtype=np.float32).reshape(48, 48))","73cad55f":"Dataset['pixels'].shape","c4a8573b":"Dataset['age'].hist()","d2fd042c":"Dataset[\"age_cat\"] = pd.cut(Dataset[\"age\"],\n                               bins=[0., 20., 40.0, 60., 80., np.inf],\n                               labels=[1, 2, 3, 4, 5])","9535b3e8":"Dataset[\"age_cat\"].value_counts()","98484f65":"Dataset[\"age_cat\"].hist()","6b8d1352":"Dataset['age_cat'].value_counts()\/len(Dataset)","326e33a4":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(Dataset, Dataset[\"age_cat\"]):\n    strat_train_set = Dataset.loc[train_index]\n    strat_test_set = Dataset.loc[test_index]","dfc7cbd1":"strat_test_set['age_cat'].value_counts()\/len(strat_test_set)","e3969b9c":"def age_cat_proportions(data):\n    return data[\"age_cat\"].value_counts() \/ len(data)\n\ntrain_set, test_set = train_test_split(Dataset, test_size=0.2, random_state=42)\n\ncompare_props = pd.DataFrame({\n    \"Overall\": age_cat_proportions(Dataset),\n    \"Stratified\": age_cat_proportions(strat_test_set),\n    \"Random\": age_cat_proportions(test_set),\n}).sort_index()\ncompare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] \/ compare_props[\"Overall\"] - 100\ncompare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] \/ compare_props[\"Overall\"] - 100","4de3a00d":"compare_props","81982188":"for set_ in (strat_train_set, strat_test_set):\n    set_.drop(\"age_cat\", axis=1, inplace=True)","6a8129c8":"strat_train_set","18e15c32":"full_dataset = strat_train_set.append(strat_test_set)","8549a1b7":"full_dataset.head()","00dc2a61":"strat_test_set","1fc08156":"full_dataset['pixels'] = full_dataset['pixels'].apply(lambda x: x\/255)\n\n## calculating distributions\nage_dist = full_dataset['age'].value_counts()\n#print(age_dist)\nethnicity_dist = full_dataset['ethnicity'].value_counts()\n#print(ethnicity_dist)\ngender_dist = full_dataset['gender'].value_counts().rename(index={0:'Male',1:'Female'})\n#print(gender_dist)","3cd6b57e":"X = np.array(full_dataset['pixels'].tolist())\n\n## Converting pixels from 1D to 3D\nX = X.reshape(X.shape[0],48,48,1)","87a2fef5":"\n# split the data into train ad test\nnp.random.seed(42)\ny_age = np.array(full_dataset['age'])\ny_gender = np.array(full_dataset['gender'])\nprint('X',X.shape)\nprint('y_age',y_age.shape)\nprint('y_gender',y_gender.shape)\n\nX_train, X_test, y_age_train, y_age_test, y_gender_train, y_gender_test = train_test_split(X,y_age, y_gender, test_size=0.2, random_state=42)\n","c3b60f78":"y_age_train","5b7b4578":"full_dataset['pixels'][0].shape\nfull_dataset['gender'][0]","c622e6b7":"def plot(X,y):\n        plt.title(y)\n        plt.imshow(X.reshape(48,48))\n        plt.show()","5a91ebf7":"plot(full_dataset['pixels'][10],full_dataset['gender'][10])","c21f8948":"import tensorflow.keras.layers as L\n\ntf.keras.backend.clear_session()\n\nAgeModel = tf.keras.Sequential([\n    L.InputLayer(input_shape=(48,48,1)),\n    L.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    L.BatchNormalization(),\n    L.MaxPooling2D((2, 2)),\n    L.Conv2D(64, (3, 3), activation='relu'),\n    L.MaxPooling2D((2, 2)),\n    L.Flatten(),\n    L.Dense(64, activation='relu'),\n    L.Dropout(rate=0.5),\n    L.Dense(1)\n])\n\n\nsgd = tf.keras.optimizers.SGD(momentum=0.9)\n\nAgeModel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\n","c9d9e93d":"## Stop training when validation loss reach 0.2700\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_loss')<0.2700):\n            print(\"\\nReached 0.2700 val_loss so cancelling training!\")\n            self.model.stop_training = True\n        \ncallback = myCallback()","f6be85c1":"AgeModel.summary()","9cef3a74":"history = AgeModel.fit(X_train, y_age_train, epochs=7, validation_split=0.2, batch_size=64,callbacks=[callback])","da1fdf49":"pd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\n#plt.gca().set_ylim(0.03, 0.05) # setting limits for y-axis\nplt.show()","455749f1":"loss, acc = AgeModel.evaluate(X_test,y_age_test,verbose=0)\nprint('mean_squared_error: {}'.format(loss))\nprint('mae: {}'.format(acc))","debbf612":"y_age_test[:10]","bf5dcc90":"y_age_pred = AgeModel.predict(X_test[:10])\nnp.round(y_age_pred)","11e9f1f9":"##Gender Model\ntf.keras.backend.clear_session()\nGenderModel = tf.keras.Sequential([\n    L.InputLayer(input_shape=(48,48,1)),\n    L.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    L.BatchNormalization(),\n    L.MaxPooling2D((2, 2)),\n    L.Conv2D(64, (3, 3), activation='relu'),\n    L.MaxPooling2D((2, 2)),\n    L.Flatten(),\n    L.Dense(64, activation='relu'),\n    L.Dropout(rate=0.5),\n    L.Dense(1, activation='sigmoid')\n])\n\nsgd = tf.keras.optimizers.SGD(learning_rate=0.007)\n\nGenderModel.compile(optimizer='sgd',\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['accuracy'])\n","3792f485":"GenderModel.summary()","257782ae":"Gender_history = GenderModel.fit(\n    X_train, y_gender_train, epochs=14, validation_split=0.2, batch_size=64)","39561ba2":"pd.DataFrame(Gender_history.history).plot(figsize=(8, 5))\nplt.grid(True)\n#plt.gca().set_ylim(0.03, 0.05) # setting limits for y-axis\nplt.show()","e10a26f5":"loss, acc = GenderModel.evaluate(X_test,y_gender_test,verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","ec4388af":"y_gender_test[:10]","519985b5":"y_gender_pred = GenderModel.predict(X_test)\nnp.round(y_gender_pred)","ec36d576":"def mean_absolute_percentage_error(y_age_test,y_age_pred): \n    return np.mean(np.abs((y_age_test-y_age_pred) \/ y_age_test)) * 100\nmean_absolute_percentage_error(y_age_test,y_age_pred)","169f7827":"def plot(X,y_age,y_gender):\n    if y_gender<=0.5:\n        plt.title('Male and Age is ' +str(y_age))\n        \n    else:\n        plt.title('Female and Age is ' +str(y_age))\n    plt.imshow(X.reshape(48,48))\n    plt.show()","2f06abd7":"n=2\nplot(X_test[n],y_age_pred[n],y_gender_pred[n])","9182aaae":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nimport seaborn as sns\n\nActual = np.round(y_gender_test[:])\nPredicted = np.round(y_gender_pred[:])\nsns.heatmap(confusion_matrix(Actual,Predicted),annot=True,cbar=False,fmt=\"d\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\");","aebae6e0":"print(classification_report(Actual,Predicted))","39b5c741":"**Measuring Accuracy Using Cross-Validation**"}}