{"cell_type":{"6a88c2de":"code","78e96cfb":"code","549af229":"code","aa6287ac":"code","e070e62e":"code","b1f2c5e0":"code","ef7258ef":"code","a19c8f7a":"code","6903db59":"code","9e18f061":"code","6b3b9914":"code","e07eb6f5":"code","afa74b44":"code","5c42a7eb":"code","1cd729a4":"code","dcbc814e":"code","0134b4d3":"code","681251d4":"code","5deea477":"code","a17af57e":"code","8756819c":"code","fd8fee81":"code","5049763e":"code","deb038ff":"code","927e97ca":"code","e0715c2b":"code","fac148dd":"code","f5f8d70d":"code","7485c58a":"code","cd41fa8a":"code","6d8debb3":"code","3d39d863":"code","271d0b67":"code","f8261fbd":"code","ce89bd44":"code","558789a5":"code","52f8257b":"markdown","c1a56ad7":"markdown"},"source":{"6a88c2de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78e96cfb":"df_gender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","549af229":"df_gender_submission","aa6287ac":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","e070e62e":"df_train","b1f2c5e0":"df_test","ef7258ef":"sns.countplot(x=df_train['Survived'])","a19c8f7a":"survive_rate = sum(df_train['Survived']) \/ len(df_train['Survived'])\nprint (\"The survice rate is %s\" % survive_rate)","6903db59":"df_train['Pclass'].isna().any()","9e18f061":"sns.countplot(x=df_train['Pclass'])","6b3b9914":"fig,axes = plt.subplots(1,3,figsize=(16,7))\ndf_train['Survived'][df_train['Pclass']==1].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[0])\ndf_train['Survived'][df_train['Pclass']==2].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[1])\ndf_train['Survived'][df_train['Pclass']==3].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[2])\n\naxes[0].set_title('Survived (Pclass_1)')\naxes[1].set_title('Survived (Pclass_2)')\naxes[2].set_title('Survived (Pclass_3)')\nplt.show()","e07eb6f5":"df_train['Sex'].isna().any()","afa74b44":"sns.countplot(x=df_train['Sex'])","5c42a7eb":"fig,axes = plt.subplots(1,2,figsize=(16,7))\ndf_train['Survived'][df_train['Sex']==\"male\"].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[0])\ndf_train['Survived'][df_train['Sex']==\"female\"].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[1])\n\naxes[0].set_title('Survived (male)')\naxes[1].set_title('Survived (female)')\n\nplt.show()","1cd729a4":"df_train['Age'].isna().any(), df_test['Age'].isna().any()","dcbc814e":"avg_age = df_train['Age'].mean()","0134b4d3":"df_train['Age'].fillna(avg_age, inplace=True)\ndf_test['Age'].fillna(avg_age, inplace=True)","681251d4":"df_train['Age'].isna().any(), df_test['Age'].isna().any()","5deea477":"bins = [0,18,30,60,120]\ndf_train['Age_level'] = pd.cut(df_train['Age'], bins, labels = [\"age_level1\", \"age_level2\", \"age_level3\", \"age_level4\"])\ndf_test['Age_level'] = pd.cut(df_test['Age'], bins, labels = [\"age_level1\", \"age_level2\", \"age_level3\", \"age_level4\"])","a17af57e":"sns.countplot(x=df_train['Age_level'])","8756819c":"fig,axes = plt.subplots(1,4,figsize=(16,7))\ndf_train['Survived'][df_train['Age_level']==\"age_level1\"].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[0])\ndf_train['Survived'][df_train['Age_level']==\"age_level2\"].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[1])\ndf_train['Survived'][df_train['Age_level']==\"age_level3\"].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[2])\ndf_train['Survived'][df_train['Age_level']==\"age_level4\"].value_counts().plot.pie(autopct='%0.1f%%',ax=axes[3])\n\naxes[0].set_title('Survived (age_level1)')\naxes[1].set_title('Survived (age_level2)')\naxes[2].set_title('Survived (age_level3)')\naxes[3].set_title('Survived (age_level4)')\n\n\nplt.show()","fd8fee81":"test_passenger_id = df_test[\"PassengerId\"]\ndf_train.drop(labels=[\"SibSp\",\"Parch\",\"Cabin\",\"Fare\", \"Ticket\", \"Name\", \"PassengerId\", \"Embarked\"], axis=1, inplace = True)\ndf_test.drop(labels=[\"SibSp\",\"Parch\",\"Cabin\",\"Fare\", \"Ticket\", \"Name\", \"PassengerId\", \"Embarked\"], axis=1, inplace = True)","5049763e":"df_train","deb038ff":"df_train = pd.get_dummies(df_train,columns=[\"Pclass\"])\ndf_train = pd.get_dummies(df_train,columns=[\"Sex\"])\ndf_train = pd.get_dummies(df_train,columns=[\"Age_level\"])\n\ndf_test = pd.get_dummies(df_test,columns=[\"Pclass\"])\ndf_test = pd.get_dummies(df_test,columns=[\"Sex\"])\ndf_test = pd.get_dummies(df_test,columns=[\"Age_level\"])","927e97ca":"df_test","e0715c2b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","fac148dd":"train_data = df_train.drop(\"Survived\", axis=1)\nlabel_train = df_train[\"Survived\"]","f5f8d70d":"X_train, X_test, y_train, y_test = train_test_split(train_data, label_train, test_size=0.2, random_state=42)","7485c58a":"lr_model = LogisticRegression(random_state=42, max_iter=500)\nlr_model.fit(X_train, y_train)","cd41fa8a":"pred = lr_model.predict(X_test)\nprint(accuracy_score(y_test, pred))","6d8debb3":"test_result = pd.Series(lr_model.predict(df_test), name = \"Survived\").astype(int)","3d39d863":"results = pd.concat([test_passenger_id, test_result],axis = 1)\nresults.to_csv(\"lr_Submission.csv\", index = False)","271d0b67":"from sklearn.svm import SVC\nsvc = SVC(gamma = 0.01, C = 100)\nsvc.fit(X_train, y_train)","f8261fbd":"pred = svc.predict(X_test)\nprint(accuracy_score(y_test, pred))","ce89bd44":"test_result = pd.Series(svc.predict(df_test), name = \"Survived\").astype(int)","558789a5":"results = pd.concat([test_passenger_id, test_result],axis = 1)\nresults.to_csv(\"svm_Submission.csv\", index = False)","52f8257b":"### 2. have a look at train and test dataset","c1a56ad7":"### 1. have a look at gender_submission.csv"}}