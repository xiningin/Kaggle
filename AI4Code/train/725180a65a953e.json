{"cell_type":{"66b583e8":"code","af859df0":"code","11ca7539":"code","85cd6418":"code","3a79f05f":"code","57e9861f":"code","8446708a":"code","11615d2f":"code","3ca12cce":"code","915445eb":"code","a5afd87f":"code","5445793e":"markdown","69798ad2":"markdown","cc984409":"markdown","d95ac2b3":"markdown","ca5a97f5":"markdown","42d0ec45":"markdown","3e2a889b":"markdown","d2bd5256":"markdown","e6756ea7":"markdown"},"source":{"66b583e8":"import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer()\ndocs = np.array([\n    'The sun is shining',\n    'The weather is sweet',\n    'The sun is shining and the weather is sweet'\n])\n\nbag = count.fit_transform(docs)","af859df0":"from sklearn.feature_extraction.text import TfidfTransformer\n\ntfidf = TfidfTransformer()\nnp.set_printoptions(precision=2)\n\nprint(tfidf.fit_transform(count.fit_transform(docs)).toarray())","11ca7539":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/movie_data.csv')\n\ndf.loc[49941, 'review'][-50:]","85cd6418":"import re\n\ndef preprocessor(text):\n    text = re.sub('<[^>]*>', '', text)\n    emoticons = re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', text)\n    text = re.sub('[\\W]+', ' ', text.lower())\n    text = text + \" \".join(emoticons).replace('-', '')\n    return text\n\npreprocessor(\"<\/a>This :) is :( a test :-)!\")","3a79f05f":"df['review'] = df['review'].apply(preprocessor)\n\nprint(df.tail())","57e9861f":"def tokenizer(text):\n    return text.split()\n\ntokenizer('runners like running and thus they run')","8446708a":"from nltk.stem.porter import PorterStemmer\n\nporter = PorterStemmer()\n\ndef tokenizer_porter(text):\n    return [porter.stem(word) for word in text.split()]\n\ntokenizer_porter('runners like running and thus they run')","11615d2f":"import nltk\nnltk.download('stopwords')","3ca12cce":"from nltk.corpus import stopwords\n\nstop = stopwords.words('english')\n\n[w for w in tokenizer_porter('a runner likes running and runs a lot') if w not in stop]","915445eb":"X = df.review\ny = df.sentiment\n\nfrom sklearn.model_selection import train_test_split \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)","a5afd87f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer(strip_accents=None, lowercase=False, preprocessor=None)\n\nparam_grid = [{'vect__ngram_range': [(1,1)],\n              'vect__stop_words': [stop, None],\n              'vect__tokenizer': [tokenizer, tokenizer_porter],\n              'clf__penalty': ['l1', 'l2'],\n              'clf__C': [1.0, 10.0, 100.0]},\n             {'vect__ngram_range': [(1,1)],\n              'vect__stop_words': [stop, None],\n              'vect__tokenizer': [tokenizer, tokenizer_porter],\n              'vect__use_idf': [False],\n              'vect__norm': [None],\n              'clf__penalty': ['l1', 'l2'],\n              'clf__C': [1.0, 10.0, 100.0]}]\n\nlr_tfidf = Pipeline([('vect', tfidf), ('clf', LogisticRegression(random_state=0))])\n\ngs_lr_tfidf = GridSearchCV(lr_tfidf, param_grid, scoring='accuracy', cv=3, verbose=1, n_jobs=-1)\n\ngs_lr_tfidf.fit(X_train, y_train)\n\nprint('Best parameter set: %s' % gs_lr_tfidf.best_params_)","5445793e":"We will remove all HTML markup as well as punctuation and other non-letter characters and keep only emoticon characters since those are certainly useful for sentiment analysis. To accomplish that, we will use Python's regular expressions library `re`.","69798ad2":"Another strategy is **word stemming**, which is the process of transforming a word into its root form that allow us to map related words to the same stem. We will use **Porter stemming algorithm** implemented by `nltk` package.","cc984409":"Next we will use a `GridSearchCV` to hypertune our logistic regression (besides his name, its a classification model) model using 5-fold cross-validation:","d95ac2b3":"# Training a logistic regression model for document classification\n\nIn this section, we will train a logictic regression model to classify the movie reviews into positive and negative reviews. First, lets divide the `DataFrame` of cleaned text document into 50:50 ratio for training and testing.","ca5a97f5":"# Cleaning text data\n\nThe first important step - before we build our bag-of-words model - its to clean the text data by stripping it of all unwanted characters. To illustrate, lets display the last 50 characters from a random document of the dataset:","42d0ec45":"# First things first\n\nFirst of all, we have to convert categorical data into a numerical form before we can pass it on to a machine learning algorithm. We doing so using the **bag-of-words** model. The idea behind it is quite simple and can be summarized as follows:\n1. We create a **vocabulary** of unique **tokens** - for example, words - from the entire set of documents.\n2. We construct a feature vector from each document that contains the counts of how ofter each word occurs in the particular document.\n\n### Transforming words into feature vectors\n\nTo construct the bag-of-words model, we can use the `CountVectorizer` class implemented in `scikit-learn`, as follows.","3e2a889b":"### Assessing word relevancy via term frequency-inverse document frequency\n\nThis technique can be used to downweight frequently occuring words that don't contain useful or discriminatory information in the feature vectors. `scikit-learn` implements it with the `TfidfTransformer`.","d2bd5256":"Before we jump into the training of a machine learning model using the bag-of-word, lets remove those extremely common words (called **stop-words**) that doesn't add useful information to the text.","e6756ea7":"# Processing documents into tokens\n\nNow that we successfully prepared the dataset, we need to think how to split the text into individual elements. We can do so:"}}