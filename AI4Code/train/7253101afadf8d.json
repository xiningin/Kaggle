{"cell_type":{"bd600cb8":"code","a45940f7":"code","e9be588f":"code","66bf8b63":"code","65cb6fe5":"code","39abf38a":"code","8b02b367":"code","7d81dc4b":"code","66bf41c0":"code","78acc02c":"code","a73d6640":"code","03fe1516":"code","28632fde":"code","bc895d00":"code","3dc46792":"code","ebb4c549":"code","0b5b03f6":"code","9c570353":"code","76054a31":"markdown","546a8a2b":"markdown"},"source":{"bd600cb8":"from IPython.display import Image\nImage(\"..\/input\/species-predictor\/main_app.png\")","a45940f7":"import pandas as pd\nimport numpy as np\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e9be588f":"df = pd.read_csv(\"..\/input\/iris-dataset\/iris.csv\")","66bf8b63":"df.head(2)","65cb6fe5":"df.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)\nplt.show()","39abf38a":"sns.pairplot(df); #relationship b\/w attr","8b02b367":"array = df.values\nX = array[:,0:4]    #1st 4 cols are training attributes\nY = array[:,4]      #5th col is the class (species name in our case)","7d81dc4b":"validation_size = 0.20\nseed = 41\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)","66bf41c0":"from sklearn.linear_model import LogisticRegression\nlogit = LogisticRegression()","78acc02c":"logit.fit(X_train,Y_train)","a73d6640":"logit.predict(X_test)","03fe1516":"mysample = np.array([4.5,3.2,1.2,0.5])\nex1 = mysample.reshape(1,-1)\nlogit.predict(ex1)\n","28632fde":"ex2 = np.array([6.2,3.4,5.4,2.3]).reshape(1,-1)\nlogit.predict(ex2)","bc895d00":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","3dc46792":"knn = KNeighborsClassifier()\ndtree = DecisionTreeClassifier()\nsvm = SVC()","ebb4c549":"knn.fit(X_train, Y_train)\nprint(\"accuracy :\" , knn.score(X_test,Y_test))","0b5b03f6":"dtree.fit(X_train, Y_train)\nprint(\"accuracy :\" , dtree.score(X_test,Y_test))","9c570353":"svm.fit(X_train, Y_train)\nprint(\"accuracy :\" , svm.score(X_test,Y_test))","76054a31":"*Best way to learn is to visualize the stuff. Keeping this in mind, I have created a python flask webapp which deals with iris dataset and predict the species based on attributes chosen by User*\n\nMore info: https:\/\/github.com\/vjcalling\/Species-Predictor\n\n","546a8a2b":"## Applying classification on Iris dataset"}}