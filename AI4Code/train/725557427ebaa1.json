{"cell_type":{"6d40c558":"code","6232ffc3":"code","ac715187":"code","0d5d8579":"code","f9f1e139":"code","c9e765aa":"code","aabb5bfb":"code","3b6d62e6":"code","cce91d9c":"code","6976f05b":"code","a55ce381":"code","096ebb50":"code","a895e808":"markdown","e4a96002":"markdown","10cf2b51":"markdown","84981a07":"markdown","90180bdd":"markdown","7ae1ed47":"markdown"},"source":{"6d40c558":"pip install pycaret","6232ffc3":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAsHCBUTExcVFRUYFxcYFxgcGxgaGiAeHh4dGhkeHx0gIRgeJTEnHyItIhgZNTwpLTM1ODk4HSc\/RT43QzE3ODUBCwwMEQ8RHxISIDYtJi03OzU3NT03NT09NjU3NTY9PTU1Nzc3NTg6OjU3OD03NTVANTVBNT43NjU1OjU2NTU4Ov\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAEAAgMBAQEAAAAAAAAAAAAAAwUEBgcCAQj\/xABDEAACAQIEAQcICAUDBQEBAAABAhEAAwQSITEFBhMiQVFhgRQVMlJxkZLRFkJTobHB0vAHFyNickNUgjM0orPh8ST\/xAAaAQEAAgMBAAAAAAAAAAAAAAAAAQIDBAUG\/8QAMhEAAgECAgcGBgMBAQAAAAAAAAECAxExUQQSIUGRofAFExRhcdEiUoGxweEVMkJyBv\/aAAwDAQACEQMRAD8AxhUiVGKkSvZM8qyRalWolqVaxMxskWpFqNakWsTKMkWpFqNakFY2Y2bLyQtf9R\/8QPvP5itjqv4NhOasqp33PtP\/AMj3VYVwa89eo2er0Sm6dGMXjv8AV7RSlKwm0KUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClYfEeK2MMua\/et2h1F3Cz7JOvhWBw\/lfgcQ2S3irRadFLZWPsVoLeFAXdKUoBSlKA40KkSoxUiV7JnlWSLUq1EtSrWJmNki1ItRrUi1iZRki1bcn8Bz10SOgkFu\/sHifwNVuFsNcdVUSWMAfPurfOG4JbFsIPaT2nt\/fZWjpdbUjZYvq\/sbmg6N31TWf9Vj65e\/ls3mZSqXlnea3gL7ozIypIZSVI6Q2I1Fajf4zfTBmxcuuMRauWGFwMwa5auEFTmmT6UHwBk1yoU3JXR6GVRRdmdIpWqXMVc8vxiZ3yrgwyrmMK0bhdge8VrXCsfdIwZt4nFnEXboDi87cwyAnPBfRjAA6JJ1IGsVMaTavfq1yHUS687HUKVz\/G4hmx+MR3x5VDZyLhS5C5rQLSqyFkxHb0q2HjLta4ZcZHuhlw8q7sRcByiCzbhu3vqrp2t525llO6b9eRf0rnfBMZcOJwa2sRimZ0zX1xDHIQEBPNhwCxnNGWdADsDXzlVyjZcZcZL7IuFNkcyHyi8zPNwZZ1hTBnaKuqLbsuttirqpK762X+x0WlaTy1xd9r2CGEusGuJfuKFZgLnNotxQVBAYEAiD61TcJ415VxC29t2Ft8BnNvMcquLxVpXbMIImOqqd29VSLKacnE3Clc15M8XvYy1h8Hz9y2xFx7t9nbnHC3CRbtuTJOWJM6AHsIOy86y8WS0HfmxgZyF2ILC6RmIJ1aB6R176mdJwbTIhUUldGy0rmHJzjeITCuL124wxOHxDWLhZmZblpWDKHJkEhVI1321NWox968nDcKLzp5TbZrt1WPOEW0zQLh1BMGTvt3zaVFxduutliqqpq\/W3q5vVK1Lgl9VxV6xZxb3YRyLV4XGKXEYKSLzLqk9QJmZFVPBsVet3rK4q\/irGIN0hxdBexeDNoiQ2VDBABGgJ66r3WPXIt3iOh0qq5QYS5dtqq3zYQMGusNCba6sBckZPb3dk1q2E4nes4LHX7b3HshgMM90lmgtkZgW1KglSJ7D31EYay2dXEp6r2m\/UrScHzuFxeBQX7t1cVbuc4txy4zIgbMub0dW6uoVFyksX7bjJirr4y7fBsWkYqi2gdmtSVKgAyx3juNSqd2lfrpB1LJu2BvdYPF+LWcJaN6++S2u7ZWb7lBNa\/jg+L4jcw5vXbVuzYVgLTlCXcjpEjUgA7HTQd853IXiNzE4G3cunM\/TUsevKxAJ74ie2quFo63pzJU7yt68jVeKfxgsjTC2Hu\/33GCL7QBLH2HLWncW\/iFxHESOf5pT9WwMn\/mSXHgwrrfF+ROAxUm5h0DHUvbm2xPaWSM3jNch4\/wAn7WFxeKQG49vDm1lUsoZjdRWgvlgAFjqFkiNjrWKUlFXfV3b7+izaRkSuUNu1cvOxAa48S7EljA62c7DTcmonUbaEfdWRisa7DIQLdsGRbUZVntO5dv7mJPfWKzgbkCohrPbJJeXu8OHFku24tOE8pMXhIFjE3LajZJzJ4I8qPAVuXCf4vX0gYnDpcHrWyUaP8TIY+K1zRsQOoE\/dXZeRP8P8C+Fw+Iuo157tpLhDscoLqCQEWARr9aauVL\/kzy4wnEGyWTcFwCTbZCCB\/ksr99bJUGEwluyoS1bVFGyooUDwAip6A40KkSoxUiV7JnlWSLUq1EtSisTMbJFqexaZ2CqCxJgAbmvfDOG3cQ2VFkTqx0A9p\/Ia1u\/COEW8MumrkauRr7uod1aOkaTGlsxeXubGj6JOu74Rz9utnrsPHBOEjDrJhnYdI93YO7v\/APwW1KVwpzc3rSxPR06cacVGK2IwuL8OXE2XsszKtwQSsSNQdJBHVVXxnkjYxXMlmZWsqFDLEsoiA0gyARPia2E1SWr2Mi30BMWVuBssz0+eYFGgf6ZG\/WIEyEZyjgyXFSxRM3BEN+7fzNmu2RbYaQAOsaTNYx5L2\/J8PYzuBh7q3EbTMWUkidIjpdUbCpFGMy2JPSy2+djJlzZl5wtMmMofLl6zrGkFs4sW7Rzk3Fw7Z1ITK14KuWdJgnN6LKNBtTWeY1UZGC4QlrEX8QrMWv8AN5gYgc2pURAnUHrmp+K4FcRYeyxKrcUqSsSAeydKw8HfxTXCroqqAdYHXOXXMZaMsgAqJbpGBONim4hzLBBbzlIBgSrZLgnVgp6QtHYAAtodKi7vcmytYyG5P2ycI2dgcIIQ6agoqkNp1hRtFecFybs27N2003Oea4zu0Zi1wQxkAR3RRrmO5wqqWwknpnU64hYhQw\/0S5\/yA31B9s2MzKQEANu1mUwQHi4bgUyDqebEkkQNBuanXlhcjVWNiHC8mktthG5y4xwi3FScuq3BlhoH1VgCI266cP5LWbGKuYpGYNcDApplGcqWI0karO\/Wa+s2OYHRVOVgsARmBbKx6R3BTo67HXt9XbuNPoooynriGlLsAwxKgNzExr6USKnXln1iNSOXWBiryOsjDWrAuXAbLl7d4FRcUsxYwcsQZ2jqHZViOEL5UuKLsbgs81GmUjMWmImZPbFecHexWdRdtrkZTJWJVsxgHpGRlAkjr230iBxYJgZpeDmyZQJbVcpVgsZASxZtPROpMOcni+mFFLAxTyMsHBLgy7lUcutzo5wxYkkGI2ZhtsamxPJe09mxbD3EbDgc1dUgOsAAzpBBgSI6qjW5xBFPQR9CZaDqti3AhDMG6LuwJ1Gwr1YxmOdcwtKBDxmXK0i64UFC+hKC2ZmNWPYKnvJZ+ZGpHI9YTk0q3WvXL1y9ce01py5ABViNMqgZQI2Ebk7mobPJJQbQfEXrluy4uW7TlYDCcssFDMBOgJ7ttKsEbE8+hIAtG0ucdEgP0s0Gc0zk7RAPXWJh2x4VMwUmFD5okkCyrFSpAAP\/APSwkdS6DamvLMnURkcoeBjG2xae7ctpMsEIGbsBkGQDrHb7BXnDcBAtXLN29cvW7iBMr5RlABHRyKI3HsgUW5jQVBS2RnQMevKZLN6UaAqO2VJghgBE748pGW2rc1OYAQLhtNoAWMgOV17B7ajXdrDVV7nzhnJhbN23de9dvG0hS0HywikQYygSY0k9XhEI5JReuX1xeIW5c9Jhzcx1LqhhRpoOwdlZVy7jpYKiFcrlSYmecfKCMwA6PN9v1p6hXvF+VFgUzKObXMBzZXNmGYLm1z5c0E9GcveanvJXvcjUjkR8V5Pi9e59L1yxc5s22ZMvSQmYIYHWdiNfcIz+EcOt4Wylm2DlQQJMkkkkkntJJPjVYwxuXd5Fu3JHM6v0c2WRAIhpzCDmMZcqze2c2Vc0ZoGaNpjWO6ahybViVFJ3Pdcz5b8k8Q9\/E3bIW55SbJRFYKwNpVVgQxAIhQZBnUiNNemVh37DG7bcRC5p19YRWvXvqqyvtjw1lfgtplp2vtyf2Zwi\/wAnMYhhsJiPC07D3qpFVN7k5jC7ZcHiTr1WLn6a\/TNKzFD878N\/h3xO+QBhjbB3a6VQDvKk5vcDXeOAYA4bC2LBIY2rSIWGgJVQCQOzSrClAKUpQHKBwTE\/YXfgb5VkWuT+Kbaw\/iAv4kV0+ldZ9qTeEVzOb\/HQ+Z8vY0HCckMS3pZUHXmMnwAkGrvA8kLKa3C109noj3AyfE1sdK1Z6dWnvt6dXM0NBox3X9erciO1aVFCqAoGwA0HhUlKVpm4KUoaAUrHuXI+sB+NYt3FD158K1p6TGPS9zJGm5YFlNJqhv8AEo+sT\/yj8BVZieLa9bD\/ACP5kVrT7Qit3P8ARtU9BnPr9o29nA3NYlzitpTBcT3EH865\/wAX5WrYjMoltFRQGdj3L+96qLvKjHNJTC5RrGe4qsdYHRjSTMdWlY\/G1JK8UkvPfxa\/JsLs5RdpPbkv0pHV14taP1x4kD86LxOydA6k9gIP4VxxuU75guIR7RJ0JINsnsFxdKtsNxm5aEKVHtVT+INY3p1aL+JLrLbbmbcOx4VFeEvphb12XXBHT04hbJ9IDvJFS2sQjzlZWjeDNc1PKW7Gotn2ov5CszgnKS8Lg6JZJ6S27a5j4gfn4islPT9qUly\/ZSp2LUUXKO7z\/XsdEpWDgMZzozc1dtjq5wKs+Ek+8VnV1U01dHDnBwk4yx+n4FKVj3cUiMqsYZpgAE6LEkwNAMyyTA1FSVMilYh4jZgEXUMgkQwJIEyQAZMZW27D2V9XH2jtdtnU7Ov1RLdfUCCewGgMqlYh4ja+1TYH0hAB2JMwAeqd6ktYu25Ko6sQASAwJAIBBgHYgjXvFAT0pSgKTG8pLVq89tlaUJzMIICrYN1iBMmAFEDWWHVXg8qLOcKA3o5mJ0K9OypGTViYxKGQI6gT1S+d2BbNZbS4VAAaYDXBJlQOkLalQDrzigwCGMA48ygl8O+ikkqNgthLhHSidXYR3e2gMg8orOdUE5mCECRADX1snUEiQ1xdOuriqD6RaMww7sFDarBByXubIGksNCRAkxETV\/QClKUApSlAKUpQClKUApSlAKVHdvKvpMF9pA\/GtQ4lywQMcjnTTLC7jsI3FYK1eNFXkYK1eNJXkbgbqjdh768XMQgGrCPfXPLnKlfqpJ72\/IVXXseLhzHQ9zNH41zJdpS3RXP2Rz5dp2wj9\/Y3zG4vDgn+qqz1Edf3e6qzFYwEShLDtC\/iCDWvYTGRsbfjqfzqwXH9r+4GuZV0qTf9UvS\/5f4LR7dq03hf1S9\/yGu3GOzeIH5LUV\/CuVLtmCqCSSGMACT1DsrLTEE9Z90fjUPGQ1zC30Xd7F1R7WQgfeawRqxbtI2o\/wDp6\/8AlJGv8A5PteXyu45W7e1QEA5E3QKpIzCNwDPjU78FMkC4ZA9WQCD0Qe4Et1TAEiZrK5O48PgrBWI5pQYzgAqIaUkKACNy0GDXjEYBmZROXUwB2wDtpBiDrGldujCFWtKFtqbVskn55YES7c0yOyEt+Ucb+a6wGG5Gi+hU3VZI2ZJGghRmnowDvMkkxpEuT3I1y17DNiNbBXK2X07bTlIhv7T7htWy8BQIAcwmZDEKIzaxmKkiQRAgAyIJM1LwJhc4ljbiEFUSxaLAzmcAkgkdHMuxAmNOua7dLs+h3VTWSbSvjg9aK3Y42bw4HS0ftfS3qzctuGEcMsOvq71x\/h4\/+4X4D+qrfg3AsTZZc2LLW1j+nlOw6tToI7K2SlasNGpwd4q31ZtVe09Iqx1ZtNf8x9hSlK2DnisXFYC3dZWdZZM2U5iIzROxEzlG\/ZWVSgNdbC4U3A5zqFJQA5sjEc6pM76ZroJJAAg6AgmJTw5wMygZkMBi0lWw9smQCf8ASyb9amNZNXnm6zJPNJJbMTkElgWMzG8u\/wATdprw3CrBUrzSAFSphQDBQIQCNR0QBp1CKArhdwC9HMAUYPEvmDLcVJI3kMqAg90jXXOwHCLdhyyFoyqqoWlVUACFG+uRZJJkiva8IsBCnNIVIIIZQ0gmSDO4J1isnEuVRiNwpI8BQEtK5OP4l42PQsfA\/wCuvv8AMvG+pY+B\/wBdbPhqhr+Jp9I6vQiuUfzLxvqWPgf9dP5l431LHwP+uo8NUHiafSOqogAAAAA2Ar1XKP5l431LHwP+un8y8b6lj4H\/AF08NUHiafSOg3uPWkxa4Rzld0V0Y+ixLMMvc3Q07Z99tXCuO8buY26t26FDKgQZAVEKxYHViZljrPZW+cheWfPZcNiW\/q7JcP1+wE+v39ft3tU0dxjrL6kU9IUpNP6G80pStU2RSlKAUpSgFKVXX+N2UN0M8Gz6YgzPNi5AG7dAzp1A9hgD1j+EWL+t20rkCASNY7M28b1pvE+R+IuM6WrOGtW5BV890sBO2sidNYUDXfrrdvL7Uhc6yTETroxU+zpAie2B1ioV41YkAXAZjUA9fOQJiCZs3BA1BWI1FY5UoyxRjlShLFGmWP4a3T6eKA7ltlvvLCrKx\/DmwPSu3G9mVfyNbGOMWOkedWFALGdACFO\/sdCewMCYmsqxeDrmXaSPcSD94NUWjUl\/kxrRaK\/z9yksci8Gu9sse1rjn7gQPuqwscFw6ejaUez51YVgY9L5e2bbALs4MfaWjOoP1FujTrYe0W7mn8q4IuqNNYRXBEvm+16n3n50832vV+8\/OsG1bxgy5mtk\/wBMNvEEHOQI0ILDL2hYO815C47myS1rPAgAQpMrILGYXRoMTBEgkax3FL5FwRbu4ZLgimvcJfAXmu2LRvYa42d7QlmtP0iXt25gglgSBrp3CPice4ddWTfRdAWD9FwGS4DI2L57jSFnqO0Grm7ZxgzZXUmejOwEpMaCWgXCJJEleqRU+HwJcucRbss2bosEB0gdskeJnfbSunCvScbVIbc00r+qaab89mbuyrp5GuXOKrfzW8Ba524xKteiLNrOssTcIOYBjIA1nNGmhveG8BFjCmyjkuzZ3u9buSC5MGQGAjQyBGsiasFxdlRlFxABpAYCPCa9eXWvtE+IfOqVJpx7ulDVWLzfq7LDcklm7siKgne65FZd4TeYEc\/C9SgGF1XQEtOmW5rOueNAoFfGwGLUiL2cG6CQeiAuedI1MLKxsYB3Ji08utfaJ8Q+dPLrX2ifEPnWvqyyMmvHNcUYXDsDftshfEG4ApDSIknrAG0nXWY2GlWtY\/l1r7RPiHzoMda+0T4h86assgpxzXFFF9N8P6l34V\/VX36bYf1LvuT9daEmw9leq7L0OlfA4q0+s1u4G9\/TbD+pd9yfrp9NsP6l33J+utEpUeDpZDx1Xy4G9\/TbD+pd9yfrqLFcs8O1twEuyVYbL1g\/3VpNebnon2H8KeDpZDx1Xy4GsqNK9UpViwr5mFfa3Lhzzw4JmNtBZxBa6rplL842VGtlSxLAgaEGCI7apOeqXpw13Y02lfK+1coKUpQHTOQnLTnsuGxLf1dkuH6\/YCfX7+v277zX56VSSAoJYkAASSSToABqTPZXb+TK4hcMgxTA3Y17QPqhjszRuR9+552k0ox+Jb9x0NHquXwvdvLalKVqG0KUpQCqni64e2rPeSVcsXIBPo2mzMVGp\/pow0BJBjUGravD2wdCAfaJ6o\/An30BRti8GGMW5bM+YZCDOZi+8SAytMSM0HeovLMEiE83GXPC5DmOQ4gkgzEnJiSDIOp2Jq+8mSScqydzA1gyJ8ST418bCIdSikwRqo2bQ9XWN6AqFbBXG5rIpJZ0goQCyKFYSRGyKO8L1gGru3bCiAIEkwO0kk\/eTXgYdAZCrMkzlEyRBM9pHXU1AKVp+Ix1xWYC40Sev299R+cL32jfEfnWfuHmcd9rU07ar5G6UrS\/OF77RviPzp5wvfaN8R+dT3DzH8vT+V8vc3SlaX5wvfaN8R+dffON37RviPzp3DzC7Yp\/K+XuYN30j7fzrzQmldg8\/YUr6BJj8dvGsrGYMIqsHDBiRsR6MaidxrvUOSTsy6ptptLD0MSlKVJSyKIV9r4K+1lOgT4DBteuLbTdj4ADUk+wAmszlDw9bFxQisqtbDdL0i2syOo7SOqaqyKlvX2fLmM5QoXuC+iPCqNS1k77Mi6lHUaa25kdebnon2H8K9V5YSCO6rmM1ulZLYFgYJE1s3Cv4e3cRZS6t9FDiQCrEjUjee6tSclBXlsOhBOb+HaahXyK3n+V97\/c2\/gb50\/lfe\/3Nv4G+dY\/EU8zL3FTL7e5o9K3j+V97\/c2\/gb50\/lfe\/3Nv4G+dR39PMdxUy+3uaPRUJIABLEgAASSTsABuSeqrXlHyffBX0slhcZ0VlyqdczFQoXcmV++t\/5D8jhhQL98A3yOiu4tA9Q7WI3PVsOsmZ1oxjrcCIUZSlq8T5yH5GjCgX74BvkdFdxaB6h2tG56th1k7lSlcuc3N3Z04xUVZClKVUsKUpQFVc4iwYiBoY9xr552b1R+\/GsXFem\/+R\/Oo62VCNjhy0iqm\/iM7zs3qj9+NPOzeqP341g0pqRyI8TV+YzvOzeqP34087N6o\/fjWDSmpHILSavzFVeaWJ7TPvNR16ubn2n8a81snE3s+1LewroAXQqDtP4HsPcaiHurPx95CgW3czCZbQyzEasZqrbujJCEXGTb2rDatv0eP0w89iK+lKVYxkNKUmt4H1WggwDBBg6gx1EdlZWLx2dQipkAJMZp1MaT2aViTSahxTd2WjVcU0nj6ClJpNSVusym5puw1k4fhF+4odLTsDMEDQwYP3g1lXrc6jf8a3Pkp\/2dr\/n\/AOxqx6RWdOGslvOnocY6RNxb3X5r3NH8wYr7B\/dTzBivsH91dOpWn4+eS5nU\/j4Zvl7HMfMGK+wf3U8wYr7B\/dXTqU8fPJcx\/HwzfL2OWXuTeKYf9B56jFb\/AMmMO1vCWkcFWVSCDuDmNWlKwVtJlVSTRno6NGk7psUpStY2hSlKArm4PabEjFMua4tsIs7KAWJIHrHMRPYNIkzY0pS5CVhSlKEilKUApSlAa\/ivTf8AyP51HUmK9N\/8j+dR1trA85L+zAMGYB7jt41NjB0tgNF20+qOqoa+UJ1tlut59pSlSVKi5ufafxrzWbdwoBnWCasOGcIt3LeZgZkjQ\/8AyruaSuzUp6LUqT1Y2viUVK2j6PWf7vePlT6PWf7vePlVO\/j5m1\/F6R5cf0avSto+j1n+73j5U+j1n+73j5U7+PmR\/F6R5cf0aqy1tHJ+wrYdSVBPS1IBPpGvX0es\/wB3vHyrOweFW0gVZgTvvqarVrKcbI3dB0KrRqa07WtbH0PvkyeovuFPJk9RfcKmpWtd5nYsiHyZPUX3CnkyeovuFTUpd5iyIfJk9RfcK920CiAAB2AR91e6VF2LIUpShIpSlAKUpQClKUArGx2LSzbNy4cqrEmCdyANBqdSKyao+W\/\/AGN3\/h\/7FrLQpqpVjB72lxZirTcKcprcm+CH0wwf2v8A4P8AKvVjlVhHYKt3pMQolGGpMASRA1rV+JYGzh7KRZsl+atls91s+Z94thtIkGdvdUFvgww2Isq10G5ztuUCMBBYdJWYAMOqRXYWg6NJXTksbbVu9E9nqc16TpMZJNR3Xx2Xfm154XOk0pSuEdcUpSgFKUoCqucOYsTI1M+81880t6w\/fhVtSr95I1HodJu9uZU+aW9Yfvwp5pb1h+\/CralO8kPBUsuZU+aW9Yfvwp5pb1h+\/CralO8kPBUsuZU+am7R+\/Csvh+GNpMpIOpOnfWXSoc21Zl6ejU6ctaK2ilKVU2BSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgIWxKAwXUHsLAH3V7t3FYSrBh2gz+FaPxfD2muXZy52vsCSVDKkKNAxAB9IgxG0kVncCY28LcFiTGJygrL6RbzGQhkFQ2uUxPXXSloK1FKMnd2xWzbbzf2NOOkvXcWtm3fl9F9+JttUvK6w1zB3VRSzdAwBJMOpMAb6VIcdcUsMjELlhyrEmRqcqgTBBEAakrtqaDG3tzaKjr0ZiNGnQDXVT7ZX1hGvShOnNVFbY08fR9czJUlGpFwzTX4NRxmKxV1szYFZzAk8wxLZYgEtJywACBGlerCYm5dwy+TNbt2rgIAW5AlgW6TkwOjtoBWy2MTfygwzEFyQVjMFQABTlB6TNIMA6EAEDWV8ddIYC2ZyvByt0jLhY0hR0VJk\/W8T0\/Eyj8MYR2bMXs3fbhf1NPuE3eU5cI7dqe5Z8S4pVXg8Y3RVlb0AScrSDmCwSRvqNevU6AaxjiV2FPNHWCRlaQOjK6gDMAzGdjlIGsxyO5ney+\/WR0O9jiXFKr8DiLrNFxAoiZE76aSd9c3gAevSwrHKLi7MtGWsrilKVUsKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQGJc4bZYktZtsTuSgJPtJGtSYbDJbEIioJmFUAT2wPYKUqXOTVm9mRXVSexE9KUqCwpSlAKUpQClKUB\/\/Z',width=400,height=400)","ac715187":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom pandas_profiling import ProfileReport \nfrom pycaret.regression import *\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d5d8579":"df = pd.read_csv('..\/input\/indian-universities-rankings-2020\/dental.csv', encoding='ISO-8859-2')\ndf.head()","f9f1e139":"# checking dataset\n\nprint (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",df.nunique())","c9e765aa":"# Distribution of different type of amount\nfig , ax = plt.subplots(1,3,figsize = (12,5))\n\ntlr = df.tlr.values\nrpc = df.rpc.values\ngo = df.go.values\n\nsns.distplot(tlr , ax = ax[0] , color = 'blue').set_title('Teaching\/Learning\/Resources' , fontsize = 14)\nsns.distplot(rpc , ax = ax[1] , color = 'cyan').set_title('Research\/Professional Practice' , fontsize = 14)\nsns.distplot(go , ax = ax[2] , color = 'purple').set_title('Graduation Outcomes' , fontsize = 14)\n\n\nplt.show()","aabb5bfb":"import matplotlib.gridspec as gridspec\nfrom scipy.stats import skew\nfrom sklearn.preprocessing import RobustScaler,MinMaxScaler\nfrom scipy import stats\nimport matplotlib.style as style\nstyle.use('seaborn-colorblind')","3b6d62e6":"def plotting_3_chart(df, feature): \n    ## Creating a customized chart. and giving in figsize and everything. \n    fig = plt.figure(constrained_layout=True, figsize=(10,6))\n    ## crea,ting a grid of 3 cols and 3 rows. \n    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)\n    #gs = fig3.add_gridspec(3, 3)\n\n    ## Customizing the histogram grid. \n    ax1 = fig.add_subplot(grid[0, :2])\n    ## Set the title. \n    ax1.set_title('Histogram')\n    ## plot the histogram. \n    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)\n\n    # customizing the QQ_plot. \n    ax2 = fig.add_subplot(grid[1, :2])\n    ## Set the title. \n    ax2.set_title('QQ_plot')\n    ## Plotting the QQ_Plot. \n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    ## Plotting the box plot. \n    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );\n \n\nprint('Skewness: '+ str(df['perception'].skew())) \nprint(\"Kurtosis: \" + str(df['perception'].kurt()))\nplotting_3_chart(df, 'perception')","cce91d9c":"train_heat=df[df[\"perception\"].notnull()]\ntrain_heat=train_heat.drop([\"perception\"],axis=1)\nstyle.use('ggplot')\nsns.set_style('whitegrid')\nplt.subplots(figsize = (10,8))\n## Plotting heatmap. \n\n# Generate a mask for the upper triangle (taken from seaborn example gallery)\nmask = np.zeros_like(train_heat.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nsns.heatmap(train_heat.corr(), \n            cmap=sns.diverging_palette(255, 133, l=60, n=7), \n            mask = mask, \n            annot=True, \n            center = 0, \n           );\n## Give title. \nplt.title(\"Heatmap of Ranking Parameters\", fontsize = 30);","6976f05b":"report_df = ProfileReport(df)\nreport_df","a55ce381":"int_features = ['rank']        \n\nfloat_features = [ 'tlr', 'rpc', 'go', 'oi']\n\nobj_features = ['institute_id', 'name', 'city', 'state']\n\nexp_reg = setup(df, #Train Data\n                target = 'perception',  #Target\n                categorical_features = obj_features, # Categorical Features\n                numeric_features = int_features + float_features, # Numeric Features\n                normalize = True, # Normalize Dataset\n                remove_outliers = True, # Remove 5% Outliers\n                remove_multicollinearity = True, # Remove Multicollinearity\n                silent = True # Process Automation\n               )","096ebb50":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.name)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set1', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","a895e808":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh!   @mpwolke   ","e4a96002":"#I had so many issues with Pycaret after saving the version (inside they looked perfect) that I #deleted all(elbow\/PCA\/clusters). Therefore, I returned to the comfort of WordCloud.","10cf2b51":"#That snippet helped me to find out the `session_id`. That I\u00b4ll need in the next block.","84981a07":"The NIRF rankings are given to the universities based on 5 parameter (According to the Dataset's Author)\n\n1) Teaching, Learning & Resources (TLR)\n\n2) Research and Professional Practice (RPC)\n\n3) Graduation Outcomes (GO)\n\n4) Outreach and Inclusivity (OI)\n\n5) Peer Perception","90180bdd":"#First install Pycaret to avoid Errors","7ae1ed47":"Target feature figures only in Target."}}