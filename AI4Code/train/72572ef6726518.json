{"cell_type":{"df465818":"code","78cbc092":"code","c0e14a20":"code","d1fe03da":"code","6720624a":"code","54439e73":"code","b0fb2bf9":"code","fb74ed0d":"code","45ea117e":"code","bcfe22da":"code","8d401593":"code","e71c30a6":"code","9a7a1438":"code","04df866e":"code","ff52406a":"code","e7cb598f":"code","32d30a23":"code","12cef886":"code","f38fc061":"code","f45be374":"code","55a7e6b9":"code","684bcd19":"code","09b287fa":"code","805fdd47":"code","b69c4889":"code","ff76cab9":"code","c7af9cba":"code","e5a69f5f":"code","ad81f4b1":"code","9b98ce80":"code","bb780fde":"code","198f633e":"code","d34b3f20":"code","b93eda29":"code","dd6bc620":"code","3006c737":"code","1f9a4050":"code","673a6631":"code","1b58544b":"code","c8287082":"code","28943d3f":"code","9e562399":"markdown","b3d5ce5c":"markdown","f86a59f1":"markdown"},"source":{"df465818":"import numpy as np # linear algebra\nimport pandas as pd","78cbc092":"import requests\nurl = \"http:\/\/182.18.164.20\/transformer_api\/current_voltage\/867322031102411\"\nuser = \"admin\"\npasswd = \"admin@123\"\nauth_values = (user, passwd)\nresponse = requests.get(url, auth=auth_values)","c0e14a20":"cv = pd.DataFrame.from_dict(response.json(), orient='columns')\ncv.head()","d1fe03da":" cv.isnull().sum()","6720624a":"cv['DeviceTimeStamp_'] = pd.to_datetime(cv['DeviceTimeStamp'])\ncv.head()","54439e73":"cv['DeviceTimeStamp_'] = pd.to_datetime(cv['DeviceTimeStamp'])\ncv.head()","b0fb2bf9":"cv['DeviceTimeStamp_'] = pd.to_datetime(cv['DeviceTimeStamp'])\ncv.head()","fb74ed0d":"import datetime\nx=cv['DeviceTimeStamp_'].max()\ny=cv['DeviceTimeStamp_'].min()\ndays = datetime.timedelta(7)\nweek=x-days","45ea117e":"cvlastweek=cv[cv['DeviceTimeStamp_']>=week]\ncvlastweek","bcfe22da":"cvlastweek = cvlastweek.iloc[::-1]\ncvlastweek","8d401593":"cvlastweek=cvlastweek.reset_index()\ncvlastweek","e71c30a6":"#define function for ADF test\nfrom statsmodels.tsa.stattools import adfuller\ndef adf_test(timeseries):\n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n       dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n\n#apply adf test on the series\nadf_test(cvlastweek['IL1'])","9a7a1438":"d=cvlastweek['IL1']\nprint(len(d))","04df866e":"df=cvlastweek.copy()","ff52406a":"hours=[]\nfor i in df['DeviceTimeStamp']:\n    ts = i[0:13]+':00:00'\n    hours.append(ts)\n    print(ts)","e7cb598f":"df['hours'] = hours\ndf","32d30a23":"df=df.groupby(['hours']).mean()\ndf","12cef886":"df=df.groupby(['hours']).mean()\ndf","f38fc061":"df=df.reset_index()\ndf","f45be374":"df['hours_'] = pd.to_datetime(df['hours'])\ndf","55a7e6b9":"train = df[:145]","684bcd19":"test = df[145:]\nlen(train)","09b287fa":"train","805fdd47":"ax=d.plot()\nax.set_xlabel(\"time\")\nax.set_ylabel(\"IL1\")","b69c4889":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\n%matplotlib inline","ff76cab9":"pip install --upgrade statsmodels","c7af9cba":"fit1 = SimpleExpSmoothing(d, initialization_method=\"heuristic\").fit(smoothing_level=0.2,optimized=False)\nfcast1 = fit1.forecast(100).rename(r'$\\alpha=0.2$')\nfit2 = SimpleExpSmoothing(d, initialization_method=\"heuristic\").fit(smoothing_level=0.6,optimized=False)\nfcast2 = fit2.forecast(100).rename(r'$\\alpha=0.6$')\nfit3 = SimpleExpSmoothing(d, initialization_method=\"estimated\").fit()\nfcast3 = fit3.forecast(100).rename(r'$\\alpha=%s$'%fit3.model.params['smoothing_level'])\n\nplt.figure(figsize=(12, 8))\nplt.plot(d, marker='o', color='black')\nplt.plot(fit1.fittedvalues, marker='o', color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.plot(fit2.fittedvalues, marker='o', color='red')\nline2, = plt.plot(fcast2, marker='o', color='red')\nplt.plot(fit3.fittedvalues, marker='o', color='green')\nline3, = plt.plot(fcast3, marker='o', color='green')\nplt.legend([line1, line2, line3], [fcast1.name, fcast2.name, fcast3.name])","e5a69f5f":"from sklearn.metrics import mean_squared_error,mean_absolute_error\nimport math\nres=mean_squared_error(d,fit1.fittedvalues)\nres\nmae=mean_absolute_error(d,fit1.fittedvalues)\nmae\nrmse=math.sqrt(res)\nrmse\ns=fit1.fittedvalues\ndef MAPE(d,s):\n    mape = np.mean(np.abs((d - s)\/d))*100\n    return mape\nmape1=MAPE(d,s)\nprint(res,mae,rmse,mape1)","ad81f4b1":"\nres1=mean_squared_error(d,fit2.fittedvalues)\nres1\nmae1=mean_absolute_error(d,fit2.fittedvalues)\nmae1\nrmse1=math.sqrt(res1)\nrmse1\ns_1=fit2.fittedvalues\ndef MAPE(d,s_1):\n    mape = np.mean(np.abs((d - s_1)\/d))*100\n    return mape\nmape2=MAPE(d,s_1)\nprint(res1,mae1,rmse1,mape2)","9b98ce80":"res2=mean_squared_error(d,fit3.fittedvalues)\nres2\nmae2=mean_absolute_error(d,fit3.fittedvalues)\nmae2\nrmse2=math.sqrt(res2)\nrmse2\ns_2=fit3.fittedvalues\ndef MAPE(d,s_2):\n    mape = np.mean(np.abs((d - s_2)\/d))*100\n    return mape\nmape3=MAPE(d,s_2)\nprint(res2,mae2,rmse2,mape3)","bb780fde":"fit1 = Holt(d, initialization_method=\"estimated\").fit(smoothing_level=0.8, smoothing_trend=0.2, optimized=False)\nfcast1 = fit1.forecast(100).rename(\"Holt's linear trend\")\nfit2 = Holt(d, exponential=True, initialization_method=\"estimated\").fit(smoothing_level=0.8, smoothing_trend=0.2, optimized=False)\nfcast2 = fit2.forecast(100).rename(\"Exponential trend\")\nfit3 = Holt(d, damped_trend=True, initialization_method=\"estimated\").fit(smoothing_level=0.8, smoothing_trend=0.2)\nfcast3 = fit3.forecast(100).rename(\"Additive damped trend\")\n\nplt.figure(figsize=(12, 8))\nplt.plot(d, marker='o', color='black')\nplt.plot(fit1.fittedvalues, color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.plot(fit2.fittedvalues, color='red')\nline2, = plt.plot(fcast2, marker='o', color='red')\nplt.plot(fit3.fittedvalues, color='green')\nline3, = plt.plot(fcast3, marker='o', color='green')\nplt.legend([line1, line2, line3], [fcast1.name, fcast2.name, fcast3.name])","198f633e":"res=mean_squared_error(d,fit1.fittedvalues)\nres\nmae=mean_absolute_error(d,fit1.fittedvalues)\nmae\nrmse=math.sqrt(res)\nrmse\ns_11=fit1.fittedvalues\ndef MAPE(d,s_11):\n    mape = np.mean(np.abs((d - s_11)\/d))*100\n    return mape\nmape2=MAPE(d,s_11)\nprint(res,mae,rmse,mape2)","d34b3f20":"res1=mean_squared_error(d,fit2.fittedvalues)\nres1\nmae1=mean_absolute_error(d,fit2.fittedvalues)\nmae1\nrmse1=math.sqrt(res1)\nrmse1\ns_12=fit2.fittedvalues\ndef MAPE(d,s_12):\n    mape = np.mean(np.abs((d - s_12)\/d))*100\n    return mape\nmape3=MAPE(d,s_12)\nprint(res1,mae1,rmse1,mape3)","b93eda29":"res2=mean_squared_error(d,fit3.fittedvalues)\nres2\nmae2=mean_absolute_error(d,fit3.fittedvalues)\nmae2\nrmse2=math.sqrt(res2)\nrmse2\ns_13=fit3.fittedvalues\ndef MAPE(d,s_13):\n    mape = np.mean(np.abs((d - s_13)\/d))*100\n    return mape\nmape4=MAPE(d,s_13)\nprint(res2,mae2,rmse2,mape4)","dd6bc620":"fit1 = SimpleExpSmoothing(d, initialization_method=\"estimated\").fit()\nfcast1 = fit1.forecast(100).rename(\"SES\")\nfit2 = Holt(d, initialization_method=\"estimated\").fit()\nfcast2 = fit2.forecast(100).rename(\"Holt's\")\nfit3 = Holt(d, exponential=True, initialization_method=\"estimated\").fit()\nfcast3 = fit3.forecast(100).rename(\"Exponential\")\nfit4 = Holt(d, damped_trend=True, initialization_method=\"estimated\").fit(damping_trend=0.98)\nfcast4 = fit4.forecast(100).rename(\"Additive Damped\")\nfit5 = Holt(d, exponential=True, damped_trend=True, initialization_method=\"estimated\").fit()\nfcast5 = fit5.forecast(100).rename(\"Multiplicative Damped\")\n\nax = d.plot(color=\"black\", marker=\"o\", figsize=(12,8))\nd.plot(ax=ax, color=\"black\", marker=\"o\", legend=False)\nfcast1.plot(ax=ax, color='red', legend=True)\nfcast2.plot(ax=ax, color='green', legend=True)\nfcast3.plot(ax=ax, color='blue', legend=True)\nfcast4.plot(ax=ax, color='cyan', legend=True)\nfcast5.plot(ax=ax, color='magenta', legend=True)\nax.set_ylabel('Livestock, sheep in Asia (millions)')\nplt.show()\nprint('Figure 7.5: Forecasting livestock, sheep in Asia: comparing forecasting performance of non-seasonal methods.')","3006c737":"fit1 = ExponentialSmoothing(d, seasonal_periods=100, trend='add', seasonal='add', use_boxcox=True, initialization_method=\"estimated\").fit()\nfit2 = ExponentialSmoothing(d, seasonal_periods=100, trend='add', seasonal='mul', use_boxcox=True, initialization_method=\"estimated\").fit()\nfit3 = ExponentialSmoothing(d, seasonal_periods=100, trend='add', seasonal='add', damped_trend=True, use_boxcox=True, initialization_method=\"estimated\").fit()\nfit4 = ExponentialSmoothing(d, seasonal_periods=100, trend='add', seasonal='mul', damped_trend=True, use_boxcox=True, initialization_method=\"estimated\").fit()\nresults=pd.DataFrame(index=[r\"$\\alpha$\",r\"$\\beta$\",r\"$\\phi$\",r\"$\\gamma$\",r\"$l_0$\",\"$b_0$\",\"SSE\"])\nparams = ['smoothing_level', 'smoothing_trend', 'damping_trend', 'smoothing_seasonal', 'initial_level', 'initial_trend']\nresults[\"Additive\"]       = [fit1.params[p] for p in params] + [fit1.sse]\nresults[\"Multiplicative\"] = [fit2.params[p] for p in params] + [fit2.sse]\nresults[\"Additive Dam\"]   = [fit3.params[p] for p in params] + [fit3.sse]\nresults[\"Multiplica Dam\"] = [fit4.params[p] for p in params] + [fit4.sse]\n\nax = d.plot(figsize=(10,6), marker='o', color='black', title=\"Forecasts from Holt-Winters' multiplicative method\" )\nax.set_ylabel(\"International visitor night in Australia (millions)\")\nax.set_xlabel(\"Year\")\nfit1.fittedvalues.plot(ax=ax, style='--', color='red')\nfit2.fittedvalues.plot(ax=ax, style='--', color='green')\n\nfit1.forecast(100).rename('Holt-Winters (add-add-seasonal)').plot(ax=ax, style='--', marker='o', color='red', legend=True)\nfit2.forecast(100).rename('Holt-Winters (add-mul-seasonal)').plot(ax=ax, style='--', marker='o', color='green', legend=True)\n\nplt.show()\nprint(\"Figure 7.6: Forecasting international visitor nights in Australia using Holt-Winters method with both additive and multiplicative seasonality.\")\n\nresults","1f9a4050":"res=mean_squared_error(d,fit1.fittedvalues)\nres\nmae=mean_absolute_error(d,fit1.fittedvalues)\nmae\nrmse=math.sqrt(res)\nrmse\ns_11=fit1.fittedvalues\ndef MAPE(d,s_11):\n    mape = np.mean(np.abs((d - s_11)\/d))*100\n    return mape\nmape2=MAPE(d,s_11)\nprint(res,mae,rmse,mape2)","673a6631":"df = pd.DataFrame(np.c_[d, fit1.level, fit1.trend, fit1.season, fit1.fittedvalues],\n                  columns=[r'$y_t$',r'$l_t$',r'$b_t$',r'$s_t$',r'$\\hat{y}_t$'],index=d.index)\ndf.append(fit1.forecast(100).rename(r'$\\hat{y}_t$').to_frame(), sort=True)","1b58544b":"df = pd.DataFrame(np.c_[d, fit2.level, fit2.trend, fit2.season, fit2.fittedvalues],\n                  columns=[r'$y_t$',r'$l_t$',r'$b_t$',r'$s_t$',r'$\\hat{y}_t$'],index=d.index)\ndf.append(fit2.forecast(100).rename(r'$\\hat{y}_t$').to_frame(), sort=True)","c8287082":"states1 = pd.DataFrame(np.c_[fit1.level, fit1.trend, fit1.season], columns=['level','slope','seasonal'], index=d.index)\nstates2 = pd.DataFrame(np.c_[fit2.level, fit2.trend, fit2.season], columns=['level','slope','seasonal'], index=d.index)\nfig, [[ax1, ax4],[ax2, ax5], [ax3, ax6]] = plt.subplots(3, 2, figsize=(12,8))\nstates1[['level']].plot(ax=ax1)\nstates1[['slope']].plot(ax=ax2)\nstates1[['seasonal']].plot(ax=ax3)\nstates2[['level']].plot(ax=ax4)\nstates2[['slope']].plot(ax=ax5)\nstates2[['seasonal']].plot(ax=ax6)\nplt.show()","28943d3f":"fit = ExponentialSmoothing(d, seasonal_periods=100, trend='add', seasonal='mul', initialization_method=\"estimated\").fit()\nsimulations = fit.simulate(100, repetitions=100, error='mul')\n\nax = d.plot(figsize=(14,12), marker='o', color='black',\n               title=\"Forecasts and simulations from Holt-Winters' multiplicative method\" )\nax.set_ylabel(\"International visitor night in Australia (millions)\")\nax.set_xlabel(\"Year\")\nfit.fittedvalues.plot(ax=ax, style='--', color='green')\nsimulations.plot(ax=ax, style='-', alpha=0.05, color='grey', legend=False)\nfit.forecast(100).rename('Holt-Winters (add-mul-seasonal)').plot(ax=ax, style='--', marker='o', color='green', legend=True)\nplt.show()","9e562399":"# Refer this for Simple Exponential smoothing","b3d5ce5c":"# Refer this for holt's","f86a59f1":"Holt's"}}