{"cell_type":{"d73b78df":"code","93c874d4":"code","ab35f4ee":"code","91c9e614":"code","1ff53463":"code","712001e4":"code","52b4eb1a":"code","3e23816a":"code","bfc11627":"code","25b4d43b":"code","7fee5657":"code","21dfd1d0":"code","ce48e8f5":"code","0b421eef":"code","16cf5bf4":"code","6aa307c1":"code","9047aecd":"code","488fd645":"code","c2bd6c77":"code","b713e428":"code","11824bd4":"code","038b5509":"code","0bc2fce6":"code","18089981":"code","be4dc888":"code","1b7738ea":"markdown","16ae447f":"markdown","0de0c7d5":"markdown","a119b4c8":"markdown","9ef3d3c3":"markdown"},"source":{"d73b78df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","93c874d4":"test = pd.read_csv('..\/input\/test.csv', header=0)\ntrain = pd.read_csv('..\/input\/train.csv', header=0)\ngender = pd.read_csv('..\/input\/gender_submission.csv', header=0)","ab35f4ee":"test.head()","91c9e614":"train.head()","1ff53463":"# print both train and test shape\nprint(train.shape, test.shape)","712001e4":"# check if there are np.nan values in train columns\ntrain.isnull().sum()","52b4eb1a":"# show description\ntrain.describe()","3e23816a":"# show all culumns data types and there values lenght\ntrain.info()","bfc11627":"# We need to clean Sex, Embarked and Survived. Let's look at their values\nprint(train.Sex.unique())\nprint(train.Embarked.unique())\nprint(train.Survived.unique())","25b4d43b":"# this help us to not directly modify our initial dataframes\ntrain_data = train.copy()\ntest_data = test.copy()","7fee5657":"# let's replace Sex values on both train_data and test_data \ntrain_data.loc[train_data.Sex == \"male\", 'Sex'] = 1\ntrain_data.loc[train_data.Sex == \"female\", 'Sex'] = 2\ntest_data.loc[test_data.Sex == \"male\", 'Sex'] = 1\ntest_data.loc[test_data.Sex == \"female\", 'Sex'] = 2","21dfd1d0":"# print changes\nprint(train_data.Sex.head(3))\nprint(test_data.Sex.head(3))","ce48e8f5":"# replace missings values by the column mean\ntrain_data.Age.fillna(train_data.Age.mean(), inplace=True)\ntest_data.Age.fillna(test_data.Age.mean(), inplace=True)\n# there is no missing values for Fare Column in train_data\n# only test_data is in concern\ntest_data.Fare.fillna(test_data.Fare.mean(), inplace=True)","0b421eef":"# replace Embarked missings by the most frequent value\nembarked_val = {'S': 1, 'C': 2, 'Q': 3}\ntrain_data.Embarked.fillna(train_data.Embarked.value_counts().idxmax(), inplace=True)\ntest_data.Embarked.fillna(test_data.Embarked.value_counts().idxmax(), inplace=True)\ntrain_data.Embarked = train_data.Embarked.replace(embarked_val)\ntest_data.Embarked = test_data.Embarked.replace(embarked_val)","16cf5bf4":"# look at changes\ntrain_data.Embarked.unique()","6aa307c1":"# drop useless Columns, these columns won't affect our prediction\ntrain_data.drop('Name', axis=1, inplace=True)\ntrain_data.drop('Cabin', axis=1, inplace=True)\ntrain_data.drop('Ticket', axis=1, inplace=True)\ntrain_data.drop('PassengerId', axis=1, inplace=True)\ntest_data.drop('Name', axis=1, inplace=True)\ntest_data.drop('Cabin', axis=1, inplace=True)\ntest_data.drop('Ticket', axis=1, inplace=True)\ntest_data.drop('PassengerId', axis=1, inplace=True)","9047aecd":"train_data.info()","488fd645":"test_data.info()","c2bd6c77":"# make values readable for Scikit-Learn\ny_train = train_data.Survived.values\nX_train = train_data.drop(['Survived'], axis=1).values\nX_test = test_data.values","b713e428":"# import LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nreg = LogisticRegression()\n# Fit training data\nreg.fit(X_train, y_train)","11824bd4":"# Predict test data\nresult = reg.predict(X_test)\nprint(len(result))\nprint(result[:20])","038b5509":"survived = pd.DataFrame(test.PassengerId)\nsurvived['Survived'] = result\nsurvived.head()","0bc2fce6":"survived.tail()","18089981":"# check my score\naccuracy = accuracy_score(y_true=gender.Survived.values, y_pred=result)\nprint(accuracy)","be4dc888":"# save result in CSV file\nsurvived.to_csv('submission.csv', index = False)","1b7738ea":"# 2- Cleaning Data","16ae447f":"Look at entries of  cleaned data","0de0c7d5":"Read test and train files and explore them","a119b4c8":"# 3- Prediction","9ef3d3c3":"# 1- Read csv files with pandas"}}