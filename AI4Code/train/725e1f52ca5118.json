{"cell_type":{"0e8e190e":"code","5c42dc65":"code","55f20f5f":"code","06fc5aa1":"code","4fe89a8e":"code","15038003":"code","7cfa67d7":"code","1d02d0a9":"code","35de701a":"code","291e1f0d":"code","aef561e2":"code","12be559e":"code","950c345c":"code","4e12f8ba":"code","da7bb00b":"code","bee3946c":"code","094b335c":"code","b361168e":"code","9304df21":"markdown"},"source":{"0e8e190e":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt","5c42dc65":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","55f20f5f":"# ekstraksi file zip\n#import zipfile,os\n#local_zip = '\/content\/archive (21).zip'\n#zip_ref = zipfile.ZipFile(local_zip, 'r')\n#zip_ref.extractall('\/content\/')\n#zip_ref.close","06fc5aa1":"#utama='\/content\/train\/train\/'\nutama=r\"..\/input\/fruit-recognition\/train\/train\"","4fe89a8e":"train_datagen= ImageDataGenerator(\n                   rescale = 1.\/255,\n                   rotation_range=20,\n                   shear_range=0.2,\n                   zoom_range=0.2,\n                   horizontal_flip=True,\n                   validation_split=0.2,\n                   fill_mode= 'nearest')\ntest_datagen= ImageDataGenerator(\n                   rescale = 1.\/255,\n                   rotation_range=20,\n                   shear_range=0.2,\n                   zoom_range=0.2,\n                   horizontal_flip=True,\n                   validation_split=0.2,\n                   fill_mode= 'nearest')","15038003":"train_generator = train_datagen.flow_from_directory(\n    utama,\n    target_size=(100,100),\n    subset='training',\n    class_mode='categorical')\nvalidation_generator = test_datagen.flow_from_directory(\n    utama,\n    target_size=(100,100),\n    subset='validation',\n    class_mode='categorical')","7cfa67d7":"print(train_generator.class_indices)","1d02d0a9":"model = tf.keras.models.Sequential([\n    #konvolusi pertama\n    tf.keras.layers.Conv2D(33,(3,3),activation='relu',input_shape=(100,100,3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    #konvolusi ke 2\n    tf.keras.layers.Conv2D(66,(3,3),activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    #konvolusi ke 3\n    tf.keras.layers.Conv2D(99,(3,3), activation = 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    #konvolusi ke 4\n    tf.keras.layers.Conv2D(66,(3,3),activation= 'relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    #meratakan hasil untuk dilatih dengan DNN\n    tf.keras.layers.Flatten(),\n    #tf.keras.layers.Dropout(0.2),\n    #128 neuron untuk hidden layer\n    tf.keras.layers.Dense(33, activation = 'relu'),\n    tf.keras.layers.Dense(33, activation='softmax')\n])","35de701a":"#callback pada akurasi 98%\nstop=0.98\nclass interupsi(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('accuracy') > stop):\n      print(\"\\n %2.3f%% accuracy.\"%(stop*100))\n      self.model.stop_training = True","291e1f0d":"#callbacks = interupsi()\nfrom keras.callbacks import EarlyStopping","aef561e2":"#compile model\nopt = tf.keras.optimizers.RMSprop(learning_rate=0.001)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=opt,\n              metrics=['accuracy'])\n#pelatihan dengan backpropagation\ntampilin=model.fit_generator(\n    train_generator,\n    #steps_per_epoch=20,\n    epochs=50,\n    validation_data = validation_generator,\n    #validation_steps=5,\n    #callbacks=[callbacks]\n    callbacks=[EarlyStopping(monitor='val_loss',\n                             patience=3,\n                             min_delta=0.0001)],\n    verbose=1)","12be559e":"#dekalarasi variabel untuk ploting gambar\nacc = tampilin.history['accuracy']\nval_acc = tampilin.history['val_accuracy']\nloss = tampilin.history['loss']\nval_loss = tampilin.history['val_loss']","950c345c":"#menampilkan diagram garis accuracy dan loss\nepochs = range(1, len(acc) + 1)\n \nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Test accuracy')\nplt.title('Training and Test accuracy')\nplt.legend()\n \nplt.figure()\n \nplt.plot(epochs, loss, 'r', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Test loss')\nplt.title('Training and Test loss')\nplt.legend()\n \nplt.show()","4e12f8ba":"#convert menjadi tflite\n#converter = tf.lite.TFLiteConverter.from_keras_model(model)\n#tflite_model = converter.convert()","da7bb00b":"#menyimpan model dalam format.tflite\n#with tf.io.gfile.GFile('model.tflite', 'wb') as f:\n#  f.write(tflite_model)","bee3946c":"from keras.preprocessing import image\nimport numpy as np\n#from keras.models import load_model\n\ncategories = ['Apple Braeburn', 'Apple Granny Smith',\n              'Apricot', 'Avocado', 'Banana', 'Blueberry',\n              'Cactus fruit', 'Cantaloupe', 'Cherry',\n              'Clementine', 'Corn', 'Cucumber Ripe',\n              'Grape Blue', 'Kiwi', 'Lemon', 'Limes',\n              'Mango', 'Onion White', 'Orange', 'Papaya',\n              'Passion Fruit', 'Peach', 'Pear', 'Pepper Green',\n              'Pepper Red', 'Pineapple', 'Plum', 'Pomegranate',\n              'Potato Red', 'Raspberry', 'Strawberry', 'Tomato\n              'Watermelon']\n#model = load_model('fruitModel.h5')\n#img_width, img_height = 100,100\nfolder_path='..\/input\/fruit-recognition\/test\/test'\n\nimages=[]\nfor img in os.listdir(folder_path):\n    img = os.path.join(folder_path, img)\n    img = image.load_img(img, target_size=(100,100)) \n    img = image.img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    images.append(img)\n\n# stack up images list to pass for prediction\nimages = np.vstack(images)\nclasses = np.argmax(model.predict(images), axis=-1)\n#output = np.argmax(classes)\nprediction = []\n\nprediction = [categories[i] for i in classes]\nprint(prediction)","094b335c":"import pandas as pd\noutput = pd.DataFrame({'categories':prediction})\noutput.to_csv(\"out.csv\", index=False)\nprint(\"selesai\")","b361168e":"hasil= pd.read_csv('out.csv')\nhasil","9304df21":"Google Colab Notebook"}}