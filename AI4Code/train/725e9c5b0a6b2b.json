{"cell_type":{"d3456984":"code","1b75ecf7":"code","2d24f340":"code","eed14ea6":"code","d3060108":"code","1a0cdc85":"code","c95a1c12":"code","5c3a399f":"code","90f2247e":"code","98b8fbc3":"code","9a90981b":"code","5509f6ef":"code","ff43fcc8":"code","9601dcc0":"code","4d123866":"code","e1ff5479":"code","fe6ea74e":"markdown","a27583f7":"markdown","eba29989":"markdown","62c927ba":"markdown"},"source":{"d3456984":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1b75ecf7":"data  = pd.read_csv('\/kaggle\/input\/investdatatest\/INVEST.csv',delimiter=\";\")","2d24f340":"data","eed14ea6":"data.info()","d3060108":"data[\"PRECIO_CIERRE\"] = [float(x.replace(',','.')) for x in data[\"PRECIO_CIERRE\"]]","1a0cdc85":"data.info()","c95a1c12":"data['FECHA'] =  pd.to_datetime(data['FECHA'])\ndatagrouped = data.groupby(['COMPA\u00d1IA'])","5c3a399f":"data","90f2247e":"datagrouped.head()","98b8fbc3":"datagrouped.first().info()","9a90981b":"import matplotlib.pyplot as plt","5509f6ef":"cierres = []\nfor name, group in datagrouped:\n    group.index = group['FECHA']\n    datagraph = group['2019-08-01':'2019-10-31']\n    datagraph = datagraph[['PRECIO_CIERRE']]\n    dif = datagraph['PRECIO_CIERRE']['2019-10-31']-datagraph['PRECIO_CIERRE']['2019-08-01']\n    cierre = dif*100\/datagraph['PRECIO_CIERRE']['2019-08-01']\n    maxima = \"Maxima\",datagraph['PRECIO_CIERRE'].max\n    cierres.append({'name':name,'value':cierre})\n    fig= plt.figure(figsize=(10,10))\n    axes = fig.add_axes([0.1,0.1,0.8,0.8])\n    axes.plot(datagraph['PRECIO_CIERRE'])\n    \n    # axes.text('2019-08-30', maxima, 'Test', color='red')\n    axes.text(0.95, 0.01, '% Crecimiento: {0:3f}%'.format(cierre),\n        verticalalignment='bottom', horizontalalignment='right',\n        transform=axes.transAxes,\n        color='blue', fontsize=15)\n    \n    plt.title(name)\n    plt.grid(True)\n    plt.show()","ff43fcc8":"mayores = {'company': [], 'value': []}\nfor i in cierres:\n    mayores['company'].append(i['name'])\n    mayores['value'].append(i['value'])\ndatacierres = pd.DataFrame(mayores)\ndatacierres.head()","9601dcc0":"datacierres = datacierres.sort_values(['value'], ascending=False, axis =0)\ndatacierres.index = datacierres['company']\ndatacierres","4d123866":"fig= plt.figure(figsize=(10,10))\naxes = fig.add_axes([0.1,0.1,0.8,0.8])\nimport matplotlib.pyplot as plt\nfor name, group in datagrouped:\n    if (name in datacierres['company'].iloc[0:5].values):\n        # print(name)\n        group.index = group['FECHA']\n        datagraph = group['2019-08-01':'2019-10-31']\n        #datagraph = datagraph[['PRECIO_CIERRE']]\n        datagraph = datagraph[['PRECIO_CIERRE']]\/datagraph[['PRECIO_CIERRE']].values.max()\n        axes.plot(datagraph['PRECIO_CIERRE'], label= name )\n#plt.yticks([i*100 for i in range(12)]) \naxes.legend()\nplt.grid(True)","e1ff5479":"fig= plt.figure(figsize=(10,10))\naxes = fig.add_axes([0.1,0.1,0.8,0.8])\nimport matplotlib.pyplot as plt\nfor name, group in datagrouped:\n    if (name in datacierres['company'].iloc[0:5].values):\n        # print(name)\n        group.index = group['FECHA']\n        datagraph = group['2019-08-01':'2019-10-31']\n        datagraph = datagraph[['PRECIO_CIERRE']]\n        #datagraph = datagraph[['PRECIO_CIERRE']]\/datagraph[['PRECIO_CIERRE']].values.max()\n        axes.plot(datagraph['PRECIO_CIERRE'], label= name )\nplt.yticks([i*100 for i in range(12)]) \naxes.legend()\nplt.grid(True)","fe6ea74e":"Una Descripci\u00f3n de los tipos de datos nos muestra que no hay valores nulos y que ademas, los campos que necesitamos son de texto, para ello vamos a hacer una tranformacino de los datos\n\n1. Reemplazar las comas por puntos en cada campo de nuestro inter\u00e9s\n2. COnvertir a tipo num\u00e9rico","a27583f7":"Visualizando la tabla de datos","eba29989":"Con el preprocesamiento terminado","62c927ba":"Agregaciones por Compa\u00f1ia"}}