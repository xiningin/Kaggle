{"cell_type":{"2dd95ff4":"code","d0cf8081":"code","f0350962":"code","35c48b01":"code","bb197b3c":"code","284756e6":"code","7576acd0":"code","e0f48ba9":"code","0ed3b077":"code","f3a7154c":"code","7437c744":"code","fc7e9d6f":"code","497c8965":"code","6313ff29":"code","bf02a591":"code","01b192c6":"code","9971315c":"code","61bf59ac":"code","19842ef6":"code","e4479119":"code","ab3327a9":"code","dbe71a58":"code","751f296e":"code","a5b1ccea":"code","17233602":"code","b94adde0":"code","2e62c412":"code","9f016ef1":"code","1c42e8b3":"code","471846e1":"code","81f567f2":"code","a5160af2":"markdown","398f8900":"markdown","9c41673b":"markdown","f1245fd3":"markdown","34c51d1e":"markdown","18c6abdf":"markdown","9694421a":"markdown","f9939fc7":"markdown","c04d7cbe":"markdown","d4b80dd6":"markdown","7bc9318c":"markdown","767d66ab":"markdown","8db49b5c":"markdown","4d732b83":"markdown","c5165e2a":"markdown","273d7894":"markdown","e1b239b2":"markdown","b059b66e":"markdown","c24e971c":"markdown","f82182df":"markdown"},"source":{"2dd95ff4":"# \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\nfile_path = \"\/kaggle\/input\/price-of-flats-in-moscow\/flats_moscow.csv\"\ndata = pd.read_csv(file_path)","d0cf8081":"# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0440\u0430\u0437\u0443 \u0443\u0437\u043d\u0430\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u043e\u043b\u044e, \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c, \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u0442\u0434\ndata.describe()","f0350962":"# target - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f\ntarget = data.price\n# \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\nsns.distplot(target)\nplt.show()","35c48b01":"# \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u043e - \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430\u043c\u0438\nsns.distplot(np.log(target))\nplt.show()","bb197b3c":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0444\u0438\u0433\u0443\u0440\u0443 10 \u043d\u0430 5 \u0434\u044e\u0439\u043c\u043e\u0432\nfig = plt.figure(figsize=(10, 5))\n# \u041f\u0440\u0438\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u044c, \u0432 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0432\u044b\u0431\u0440\u0430\u043b 1 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 2 \u0441\u0442\u043e\u0431\u0446\u0430\n# \u0421\u0442\u0440\u043e\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u0433\u0440\u0430\u0444\u0438\u043a \u0432 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0435 (1 \u0441\u0442\u0440\u043e\u043a\u0430, 2 \u0441\u0442\u043e\u0431\u0446\u0430)\n# \u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f totsp - \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043a\u0432.\u043c.\nfig.add_subplot(1, 2, 1)\nsns.distplot(data.totsp)\n# \u0421\u0442\u0440\u043e\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u0433\u0440\u0430\u0444\u0438\u043a \u0432 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0435 (1 \u0441\u0442\u0440\u043e\u043a\u0430, 2 \u0441\u0442\u043e\u0431\u0446\u0430)\n# \u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f livetsp - \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043a\u0432.\u043c.\nfig.add_subplot(1, 2, 2)\nsns.distplot(data.livesp)\n\nplt.tight_layout()\nplt.show()","284756e6":"# \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430\u043c\u0438\nfig = plt.figure(figsize=(10, 5))\nfig.add_subplot(1, 2, 1)\nsns.distplot(np.log(data.totsp))\nfig.add_subplot(1, 2, 2)\nsns.distplot(np.log(data.livesp))\n    \nplt.tight_layout()\nplt.show()\n","7576acd0":"# \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e numpy \u0434\u043b\u044f \u0432\u0441\u0435\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u0435\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u0435\u0439\nmain = np.log(data.livesp)\n# \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ntarget_log = np.log(target)","e0f48ba9":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0444\u0438\u0433\u0443\u0440\u0443 10 \u043d\u0430 10 \u0434\u044e\u0439\u043c\u043e\u0432, \u0431\u0443\u0431\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0443 2x2 (2 \u0441\u0442\u0440\u043e\u043a\u0438, 2 \u0441\u0442\u043e\u043b\u0431\u0446\u0430)\nfig = plt.figure(figsize=(10, 10))\n# \u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043e\u0431\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\nfig.add_subplot(2, 2, 1)\nsns.scatterplot(data.livesp, target)\n# \u041d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 livesp \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430, \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\nfig.add_subplot(2, 2, 2)\nsns.scatterplot(main, target)\n# \u041d\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430 livesp \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430\nfig.add_subplot(2, 2, 3)\nsns.scatterplot(data.livesp, target_log)\n# \u041d\u0430 \u0447\u0435\u0442\u0432\u0451\u0440\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430, \u0438 livesp, \u0438 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u044b\nfig.add_subplot(2, 2, 4)\nsns.scatterplot(main, target_log)\n    \nplt.tight_layout()\nplt.show()","0ed3b077":"# \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0434\u0432\u0443\u043c \u0442\u043e\u0447\u043a\u0430\u043c, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e x\nmin_x = main.min()\nmax_x = main.max()","f3a7154c":"# \u0438 \u0432 \u044d\u0442\u0438\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u043d\u0430\u0439\u0434\u0451\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 h\nt0 = 0\nt1 = 1\nhmn = t0 + t1 * min_x\nhmx = t0 + t1 * max_x\n\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0432\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c\nfig, ax = plt.subplots()\n# \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0442\u043e\u0447\u043a\u0430\u043c\u0438\nsns.scatterplot(main, target_log, ax=ax)\n# \u043f\u0440\u044f\u043c\u0430\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 h\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)","7437c744":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J\nJ = 0\nfor i in range(len(data.livesp)):\n    J += (np.exp(t0 + t1 * main[i]) - data.price[i])**2\nJ \/= 2 * len(data.livesp)\nprint(J)","fc7e9d6f":"sns.regplot(main, target_log)\nplt.show()","497c8965":"# \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432\nt1_arr = []\nt2_arr = []\nJ_arr = []\nbest_t1 = -1\nbest_t2 = -1\nbest_J = 1000000\nfor i in np.arange(-2.5, 2.5, 0.1):\n    for j in np.arange(0.0, 2.0, 0.1):\n        tmp_J = 0\n        for k in range(len(data.livesp)):\n            tmp_J += (np.exp(i + j * main[k]) - data.price[k])**2\n        tmp_J \/= 2 * len(data.livesp)\n        if tmp_J < best_J:\n            best_i = i\n            best_j = j\n            best_J = tmp_J\n        t1_arr.append(i)\n        t2_arr.append(j)\n        J_arr.append(min(tmp_J, 10000))\nprint(best_J)\nprint(i)\nprint(j)","6313ff29":"# 3D \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0430 \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432.\n# \u041f\u043e \u043e\u0441\u0438 X \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 theta0, \u043f\u043e \u043e\u0441\u0438 Y \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 theta1, \u0430 \u043f\u043e Z \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J(theta1, theta)\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\n\ntrace1 = go.Scatter3d(\n    x=t1_arr,\n    y=t2_arr,\n    z=J_arr,\n    mode='markers',\n    marker=dict(\n        size=5,\n        line=dict(\n            color='rgba(217, 217, 217, 0.14)',\n            width=0.1\n        ),\n        opacity=1\n    ),\n    name = 'price'\n)\nfig = go.Figure(data=trace1)\npy.iplot(fig)","bf02a591":"t0_best = t0\nt1_best = t1\nhmn = t0_best + t1_best * min_x\nhmx = t0_best + t1_best * max_x\n\n# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0432\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c\nfig, ax = plt.subplots()\n# \u0434\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0442\u043e\u0447\u043a\u0430\u043c\u0438\nsns.scatterplot(main, target_log, ax=ax)\n# \u043f\u0440\u044f\u043c\u0430\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 h\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)\nplt.show()","01b192c6":"t0_best = t0\nt1_best = t1\nalpha = 0.0001\n# \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\neps = 0.0001\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nc = 1\n\n# \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\nJ_t0 = 0\nfor i in range(len(data.livesp)):\n    J_t0+= (t0_best + t1_best * main[i] - target_log[i])\n# \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\nJ_t0 \/= len(data.livesp)\n# \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nJ_t0 *= alpha\n\n# \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_1 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\nJ_t1 = 0\nfor i in range(len(data.livesp)):\n    J_t1 += (t0_best + t1_best * main[i] - target_log[i]) * main[i]\n# \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\nJ_t1 \/= len(data.livesp)\n# \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nJ_t1 *= alpha\n\n# \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\nt0_best = t0_best - J_t0\nt1_best = t1_best - J_t1\nprint(J_t0, J_t1)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\nprint(t0_best, t1_best)\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\nhmn = t0_best + t1_best * min_x\nhmx = t0_best + t1_best * max_x\nfig, ax = plt.subplots()\nsns.scatterplot(main, target_log, ax=ax)\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)\nplt.show()","9971315c":"# \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f 0.01\nalpha = 0.01\n# \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\neps = 0.0001\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nc = 1\n\n# \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\nJ_t0 = 0\nfor i in range(len(data.livesp)):\n    J_t0+= (t0_best + t1_best * main[i] - target_log[i])\n# \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\nJ_t0 \/= len(data.livesp)\n# \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nJ_t0 *= alpha\n\n# \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_1 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\nJ_t1 = 0\nfor i in range(len(data.livesp)):\n    J_t1 += (t0_best + t1_best * main[i] - target_log[i]) * main[i]\n# \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\nJ_t1 \/= len(data.livesp)\n# \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nJ_t1 *= alpha\n\n# \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\nt0_best = t0_best - J_t0\nt1_best = t1_best - J_t1\n\n# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043f\u043e\u043a\u0430 J_t0 \u0438 J_t1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_t0 \u0438 J_t1 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c t0_best \u0438 t1_best\n# \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u043d eps, \u0442\u043e \u043c\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nwhile (abs(J_t0) > eps or abs(J_t1) > eps):\n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_t0 = 0\n    for i in range(len(data.livesp)):\n        J_t0+= (t0_best + t1_best * main[i] - target_log[i])\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_t0 \/= len(data.livesp)\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_t0 *= alpha\n\n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_1 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_t1 = 0\n    for i in range(len(data.livesp)):\n        J_t1 += (t0_best + t1_best * main[i] - target_log[i]) * main[i]\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_t1 \/= len(data.livesp)\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_t1 *= alpha\n    # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\n    t0_best = t0_best - J_t0\n    t1_best = t1_best - J_t1\n    c += 1\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432\nprint(c)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u043d\u0430\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_t0 \u0438 J_t1, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nprint(J_t0, J_t1)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043b\u0443\u0447\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f t0 \u0438 t1\nprint(t0_best, t1_best)\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\nhmn = t0_best + t1_best * min_x\nhmx = t0_best + t1_best * max_x\nfig, ax = plt.subplots()\nsns.scatterplot(main, target_log, ax=ax)\nsns.lineplot(x=[min_x, max_x], y=[hmn, hmx], ax=ax)\n\nplt.show()","61bf59ac":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J \u0432 \u0442\u043e\u0447\u043a\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u044f t0, t1 \n# \u0432 \u043c\u043e\u0451\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (0, 1)\n# \u0435\u0441\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0448\u043b\u0430 \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0432\u0437\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0443 e^(h(x))\n# \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e np.exp \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\nJ = 0\nfor i in range(len(data.livesp)):\n    J += (np.exp(t0 + t1 * main[i]) - data.price[i])**2\nJ \/= 2 * len(data.livesp)\nprint(J)\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J \u0432 \u0442\u043e\u0447\u043a\u0435 t0_best, t1_best\n# \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0435\u0441\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0448\u043b\u0430 \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0432\u0437\u044f\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0442\u0443 e^(h(x))\n# \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438, \u0442\u043e np.exp \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\nJ = 0\nfor i in range(len(data.livesp)):\n    J += (np.exp(t0_best + t1_best * main[i]) - data.price[i])**2\nJ \/= 2 * len(data.livesp)\nprint(J)","19842ef6":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u0433\u043e\u0434\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\nattribs = data.select_dtypes(exclude='object').drop('price', axis=1).copy()\n\n# \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0441\u0435 10 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0444\u0438\u0433\u0443\u0440\u0435\nfig = plt.figure(figsize=(20,25))\nfor i in range(len(attribs.columns)):\n    fig.add_subplot(4, 3, i+1)\n    # \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    sns.distplot(attribs.iloc[:, i].dropna())\n    plt.xlabel(attribs.columns[i])\n    \nplt.tight_layout()\nplt.show()","e4479119":"features = ['totsp', 'livesp', 'kitsp', 'dist', 'metrdist', 'walk', 'brick', 'code']","ab3327a9":"X_corr = data[features + ['price']]\nX_corr.describe()\n\nx_corr_info =  X_corr.corr()\nf, ax = plt.subplots(figsize=(14, 12))\nsns.heatmap(x_corr_info, annot=True)\nplt.show()","dbe71a58":"features = ['totsp', 'livesp', 'kitsp', 'dist', 'brick']\nprint(len(features))\ntheta0 = 0\nthetaJ = [1 for i in range(len(features))]","751f296e":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 J\nthetaJnp = np.array(thetaJ)\nX = data[features]\n#print(X)\nhtheta = thetaJnp.dot(np.transpose(X))\nJ = 0\nfor i in range(len(htheta)):\n    J += (t0 + htheta[i] - data['price'][i])**2\nJ \/= 2 * len(htheta)\nprint(J)","a5b1ccea":"# \u0412\u043e\u0437\u044c\u043c\u0451\u043c \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f 0.0001\nalpha = 0.00022\n# \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\neps = 0.0001\n# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\nc = 1\n\nX = data[features]\n\n# \u0437\u0430\u0434\u0430\u0451\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0435\ntheta0_best = 0\ntheta_best = [1 for i in range(len(features))]\nhtheta_best = np.array(theta_best).dot(np.transpose(X))\n\ncont = True\n# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043f\u043e\u043a\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 eps\nwhile True:  \n    # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_0 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n    J_theta0 = 0\n    for i in range(len(htheta_best)):\n        J_theta0 += (theta0_best + htheta_best[i] - data.price[i])\n    # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n    J_theta0 \/= len(htheta_best)\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n    J_theta0 *= alpha\n\n    J_theta = [0 for i in range(len(features))]\n    for j in range(len(features)):\n        # \u0412\u044b\u0441\u043b\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043f\u043e t_j \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u043e\u0447\u043a\u0430\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c\n        J_theta[j] = 0\n        for i in range(len(htheta_best)):\n            J_theta[j] += (theta0_best + htheta_best[i] - data.price[i]) * data[features[j]][i]\n        # \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n        J_theta[j] \/= len(htheta_best)\n        # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n        J_theta[j] *= alpha\n\n    # \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u0442\u0430\n    theta0_best = theta0_best - J_theta0\n    theta_best = np.subtract(theta_best, J_theta)\n    htheta_best = np.array(theta_best).dot(np.transpose(X))\n    # \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n    J = 0\n    for i in range(len(htheta_best)):\n        J += (theta0_best + htheta_best[i] - data['price'][i])**2\n    J \/= 2 * len(htheta_best)\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d J, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e\u0446\u0435\u043d\u043e\u0447\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f\n    # \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f, \u0442\u043e \u0446\u0438\u043a\u043b \u043d\u0443\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u0441\u043a\u043e\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c alpha\n    print(J)\n    # \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u0435 \u0432 200 \u0448\u0430\u0433\u043e\u0432, \u0438\u043d\u0430\u0447\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043e\u043b\u0433\u043e \u0441\u0445\u043e\u0434\u0438\u0442\u0441\u044f\n    c += 1\n    if c == 200:\n        break\n    # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f J_theta0 \u0438 J_theta \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c theta0_best \u0438 theta_best\n    # \u0438 \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u043d eps, \u0442\u043e \u043c\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n    continue_loop = False\n    for i in range(len(J_theta)):\n        if abs(J_theta[i]) > eps:\n            continue_loop = True\n            break\n    continue_loop = continue_loop or abs(J_theta0) > eps\n    if not continue_loop:\n        break   \n\nprint('t0 =', theta0_best)\nfor i in range(len(theta_best)):\n    print('t', i + 1, ' = ', theta_best[i], sep=\"\")","17233602":"X1 = data[features][:len(data[features]) \/\/ 2]\nX2 = data[features][len(data[features]) \/\/ 2:]\ny1 = data['price'][:len(data[features]) \/\/ 2]\ny2 = data['price'][len(data[features]) \/\/ 2:]","b94adde0":"from sklearn.linear_model import LinearRegression\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1 y1\nlreg = LinearRegression().fit(X1, y1)\nprint(lreg.score(X1, y1))\nprint(lreg.score(X2, y2))","2e62c412":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1\ny_pred1 = lreg.predict(X1)\nJ = 0\nfor i in range(len(y_pred1)):\n    J += (y1[i] - y_pred1[i])**2\nJ \/= 2 * len(y_pred1)\nprint(J)\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X2\ny_pred2 = lreg.predict(X2)\nJ = 0\nfor i in range(len(y_pred2)):\n    J += (y2[i + len(y_pred1)] - y_pred2[i])**2\nJ \/= 2 * len(y_pred2)\nprint(J)","9f016ef1":"from sklearn.ensemble import GradientBoostingRegressor\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1 y1\ngbr = GradientBoostingRegressor(learning_rate=0.02).fit(X1, y1)\nprint(gbr.score(X1, y1))\nprint(gbr.score(X2, y2))","1c42e8b3":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1\ny_pred_gbr1 = gbr.predict(X1)\nJ = 0\nfor i in range(len(y_pred_gbr1)):\n    J += (y1[i] - y_pred_gbr1[i])**2\nJ \/= 2 * len(y_pred_gbr1)\nprint(J)\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X2\ny_pred_gbr2 = gbr.predict(X2)\nJ = 0\nfor i in range(len(y_pred_gbr2)):\n    J += (y2[i + len(y_pred_gbr1)] - y_pred_gbr2[i])**2\nJ \/= 2 * len(y_pred_gbr2)\nprint(J)","471846e1":"from sklearn.ensemble import AdaBoostRegressor\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1 y1\nada = AdaBoostRegressor().fit(X1, y1)\nprint(ada.score(X1, y1))\nprint(ada.score(X2, y2))","81f567f2":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X1\ny_pred_ada1 = ada.predict(X1)\nJ = 0\nfor i in range(len(y_pred_ada1)):\n    J += (y1[i] - y_pred_ada1[i])**2\nJ \/= 2 * len(y_pred_ada1)\nprint(J)\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 J \u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u0435 X2\ny_pred_ada2 = ada.predict(X2)\nJ = 0\nfor i in range(len(y_pred_ada2)):\n    J += (y2[i + len(y_pred_ada1)] - y_pred_ada2[i])**2\nJ \/= 2 * len(y_pred_ada2)\nprint(J)","a5160af2":"**price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 $1000\n\n**totsp** - \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043a\u0432.\u043c.\n\n**livesp** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b, \u043a\u0432.\u043c.\n\n**kitsp** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438, \u043a\u0432.\u043c.\n\n**dist** - \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u0446\u0435\u043d\u0442\u0440\u0430 \u0432 \u043a\u043c.\n\n**metrdist** - \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043e \u043c\u0435\u0442\u0440\u043e \u0432 \u043c\u0438\u043d\u0443\u0442\u0430\u0445\n\n**walk** - 1 \u2013 \u043f\u0435\u0448\u043a\u043e\u043c \u043e\u0442 \u043c\u0435\u0442\u0440\u043e, 0 \u2013 \u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0435\n\n**brick** - 1 \u2013 \u043a\u0438\u0440\u043f\u0438\u0447\u043d\u044b\u0439, \u043c\u043e\u043d\u043e\u043b\u0438\u0442 \u0436\/\u0431, 0 \u2013 \u0434\u0440\u0443\u0433\u043e\u0439\n\n**floor** - 1 \u2013 \u044d\u0442\u0430\u0436 \u043a\u0440\u043e\u043c\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e, 0 \u2013 \u0438\u043d\u0430\u0447\u0435.\n\n**code** - \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 8, \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u044b \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u043e\u0434\u0432\u044b\u0431\u043e\u0440\u043a\u0430\u043c: 1. \u041d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u0441\u0435\u0432\u0435\u0440\u0435, \u0432\u043e\u043a\u0440\u0443\u0433 \u041a\u0430\u043b\u0443\u0436\u0441\u043a\u043e-\u0420\u0438\u0436\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 2. \u0421\u0435\u0432\u0435\u0440, \u0432\u043e\u043a\u0440\u0443\u0433 \u0421\u0435\u0440\u043f\u0443\u0445\u043e\u0432\u0441\u043a\u043e-\u0422\u0438\u043c\u0438\u0440\u044f\u0437\u0435\u0432\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 3. \u0421\u0435\u0432\u0435\u0440\u043e-\u0437\u0430\u043f\u0430\u0434, \u0432\u043e\u043a\u0440\u0443\u0433 \u0417\u0430\u043c\u043e\u0441\u043a\u0432\u043e\u0440\u0435\u0446\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 4. \u0421\u0435\u0432\u0435\u0440\u043e-\u0437\u0430\u043f\u0430\u0434, \u0432\u043e\u043a\u0440\u0443\u0433 \u0422\u0430\u0433\u0430\u043d\u0441\u043a\u043e-\u041a\u0440\u0430\u0441\u043d\u043e\u043f\u0440\u0435\u0441\u043d\u0435\u043d\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 5. \u042e\u0433\u043e-\u0432\u043e\u0441\u0442\u043e\u043a, \u0432\u043e\u043a\u0440\u0443\u0433 \u041b\u044e\u0431\u043b\u0438\u043d\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 6. \u042e\u0433\u043e-\u0432\u043e\u0441\u0442\u043e\u043a, \u0432\u043e\u043a\u0440\u0443\u0433 \u0422\u0430\u0433\u0430\u043d\u0441\u043a\u043e-\u041a\u0440\u0430\u0441\u043d\u043e\u043f\u0440\u0435\u0441\u043d\u0435\u043d\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 7. \u0412\u043e\u0441\u0442\u043e\u043a, \u0432\u043e\u043a\u0440\u0443\u0433 \u041a\u0430\u043b\u0438\u043d\u0438\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430 8. \u0412\u043e\u0441\u0442\u043e\u043a, \u0432\u043e\u043a\u0440\u0443\u0433 \u0410\u0440\u0431\u0430\u0442\u0441\u043a\u043e-\u041f\u043e\u043a\u0440\u043e\u0432\u0441\u043a\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u043c\u0435\u0442\u0440\u043e\u043f\u043e\u043b\u0438\u0442\u0435\u043d\u0430","398f8900":"## $h_\\theta(x) = \\theta_0 + \\theta_1 \\cdot x_1 + \\theta_2 \\cdot x_2 + \\dots + \\theta_n \\cdot x_n$","9c41673b":"## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 pandas \u0438 \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f","f1245fd3":"## \u0412\u0430\u0436\u043d\u043e! \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f $\\theta_0$ \u0438 $\\theta_1$ \u043d\u0443\u0436\u043d\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e","34c51d1e":"##  $\\theta_0 = \\theta_0 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_0} (\\frac{1}{2m}\\sum_{i = 1}^{m} (h_\\theta(x_i) - y_i)^2)$\n##  $\\theta_1 = \\theta_1 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_1} (\\frac{1}{2m}\\sum_{i = 1}^{m} (h_\\theta(x_i) - y_i)^2)$","18c6abdf":"##  $\\theta_0 = \\theta_0 - \\frac{\\alpha}{m}\\sum_{i = 1}^{m} (\\theta_0 + \\theta_1 \\cdot x_i - y_i)$\n##  $\\theta_1 = \\theta_1 - \\frac{\\alpha}{m}\\sum_{i = 1}^{m} (\\theta_0 + \\theta_1 \\cdot x_i - y_i)\\cdot x_i$","9694421a":"### LinearRegression","f9939fc7":"### \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439","c04d7cbe":"# \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","d4b80dd6":"##  $\\theta_0 = \\theta_0 - \\frac{\\alpha}{m}\\sum_{i = 1}^{m} (\\theta_0 + \\theta_1 \\cdot x^{(1)}_i + \\dots + \\theta_n \\cdot x^{(n)}_i - y_i)$\n##  $\\theta_j = \\theta_j - \\frac{\\alpha}{m}\\sum_{i = 1}^{m} (\\theta_0 + \\theta_1 \\cdot x^{(1)}_i + \\dots + \\theta_n \\cdot x^{(n)}_i - y_i)\\cdot x^{(j)}_i$","7bc9318c":"### AdaBoostRegressor","767d66ab":"##  $\\theta_0 = \\theta_0 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_0} (\\frac{1}{2m}\\sum_{i = 1}^{m} (\\theta_0 + \\theta_1 \\cdot x_i - y_i)^2)$\n##  $\\theta_1 = \\theta_1 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_1} (\\frac{1}{2m}\\sum_{i = 1}^{m} (\\theta_0 + \\theta_1 \\cdot x_i - y_i)^2)$","8db49b5c":"##  $\\theta_0 = \\theta_0 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_0}J(\\theta_0, \\theta_1)$\n##  $\\theta_1 = \\theta_1 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_1}J(\\theta_0, \\theta_1)$","4d732b83":"## $h_\\theta(x) = \\theta_0 + \\theta_1 \\cdot x$","c5165e2a":"## $J(\\theta_0, \\theta_1, \\dots, \\theta_n) = \\frac{1}{2m}\\sum_{i = 1}^{m} (h_\\theta(x_i) - y_i)^2 $","273d7894":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439","e1b239b2":"##  $\\theta_0 = \\theta_0 - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_0}J(\\theta_0, \\theta_1, \\dots, \\theta_n)$\n##  $\\theta_j = \\theta_j - \\alpha \\cdot \\frac{\\partial}{\\partial \\theta_j}J(\\theta_0, \\theta_1, \\dots, \\theta_n)$","b059b66e":"## $J(\\theta_0, \\theta_1) = \\frac{1}{2m}\\sum_{i = 1}^{m} (h_\\theta(x_i) - y_i)^2 $","c24e971c":"# \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a","f82182df":"### GradientBoostingRegressor"}}