{"cell_type":{"40ab323c":"code","f3be065e":"code","5e4d11b1":"code","80c5c029":"code","11f36d0b":"code","9fd43155":"code","9740b8f7":"code","327e8e6f":"code","0ee68468":"code","4a7665d5":"code","8850f30c":"code","a17c5390":"code","c4a4ed0b":"code","b3ddffad":"code","25c5bca3":"code","864d524b":"code","807c4b48":"code","caa951af":"code","73f75039":"code","98a9ac66":"code","afd294cc":"code","84e6c8ed":"markdown","78690967":"markdown"},"source":{"40ab323c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3be065e":"df_train =pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\")","5e4d11b1":"df_train.head()","80c5c029":"df_train.info()","11f36d0b":"df_train.isna().sum()","9fd43155":"df_train.describe()","9740b8f7":"df_test=pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\")","327e8e6f":"df_test.head()","0ee68468":"df_test.isnull().sum()\n","4a7665d5":"df_train.shape","8850f30c":"x = df_train.iloc[:, 1:15].values  \nprint(x) \ny = df_train.iloc[:, -1].values ","a17c5390":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x\n                                                    , y, test_size=0.2, random_state=0)","c4a4ed0b":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=500, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","b3ddffad":"from sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","25c5bca3":"from sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","864d524b":"preds=regressor.predict(df_test.iloc[:,1:])","807c4b48":"sub=pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv\")","caa951af":"sub.head()","73f75039":"sub.target =preds","98a9ac66":"sub.to_csv(\"submission.csv\", index=False)","afd294cc":"sub.head()","84e6c8ed":"Data is clean with continues target variable. let's make split into 70:30 train and validation data. and drop id column. ","78690967":"Now let's check test data."}}