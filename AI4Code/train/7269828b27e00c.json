{"cell_type":{"0a4a8f90":"code","06daabe2":"code","a9fb81e1":"code","b98a6e63":"code","7404fe5b":"code","356b6119":"code","85488cd7":"code","e54f86c7":"code","3ea233c2":"code","b3f8f8df":"code","b20cdc5b":"code","771fc890":"code","faa2fd92":"markdown","0a103b9b":"markdown"},"source":{"0a4a8f90":"# import packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport random\nimport cv2\nimport PIL\nimport json\nimport os\nimport time\nimport warnings\nwarnings.WarningMessage\n\n\nimport tensorflow as tf\nfrom tensorflow.keras.applications import EfficientNetB4\nfrom tensorflow.keras.preprocessing.image import load_img, array_to_img, img_to_array\nfrom tensorflow.keras.layers import Flatten, Dense, Dropout, Conv2D, MaxPool2D, BatchNormalization\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split, KFold\n\n%matplotlib inline","06daabe2":"# Load Data set\ndf_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint('------------------ DATA ARE LOADED ------------------')","a9fb81e1":"X = df_train.drop(['label'], axis = 1).astype(np.float32) \/ 255.0\ny = df_train['label'].values","b98a6e63":"X = X.values.reshape(-1, 28, 28, 1)\ny = tf.keras.utils.to_categorical(y, 10)","7404fe5b":"plt.imshow(X[1])\nprint(y[1])","356b6119":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=42)","85488cd7":"datagen = ImageDataGenerator(\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=False,  # set each sample mean to 0\n    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n    samplewise_std_normalization=False,  # divide each input by its std\n    zca_whitening=False,  # apply ZCA whitening\n    rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n    zoom_range = 0.1, # Randomly zoom image \n    width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip=False,  # randomly flip images\n    vertical_flip=False  # randomly flip images\n)\n\ntrain_datagen = datagen.flow(x=X_train, y=y_train)\n","e54f86c7":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.summary()","3ea233c2":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])","b3f8f8df":"history = model.fit(train_datagen, epochs=2, batch_size=64, verbose=1, validation_data=(X_val, y_val))","b20cdc5b":"# Ploting acc and loss of model\ndf_his = pd.DataFrame(history.history)\n\nfig, axs = plt.subplots(ncols=2, figsize=(14, 5))\n\ndf_his[['acc', 'val_acc']].plot(ax=axs[0])\n\ndf_his[['loss', 'val_loss']].plot(ax=axs[1])\nplt.show","771fc890":"X_test = df_test.values.astype(np.float32)\/255\nX_test = X_test.reshape(-1, 28, 28, 1)\npred = model.predict_classes(X_test)\npred_df = pd.DataFrame({'ImageId' : [i for i in range(1, len(pred) + 1)], 'Label' : pred})\npred_df.to_csv('submission.csv', header=True, index=False)","faa2fd92":"# Data","0a103b9b":"# Model"}}