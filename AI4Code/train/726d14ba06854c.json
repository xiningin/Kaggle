{"cell_type":{"00045347":"code","1cab465b":"code","f97618af":"code","693ec677":"code","441bcde9":"code","f02a7066":"code","ebec22d1":"code","b4be39ed":"code","817ee6a0":"code","3769e037":"code","d2dccada":"code","29c62c29":"code","fe3d2217":"code","55a1a4d0":"code","de3a478c":"code","cc59f1c6":"markdown"},"source":{"00045347":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[:2]:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1cab465b":"!pip install --user opencv-python","f97618af":"import cv2\nimport numpy as np\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications import DenseNet121\nfrom tensorflow.keras.callbacks import Callback, ModelCheckpoint\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import load_model\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport tensorflow as tf","693ec677":"def build_model(pretrained):\n    model = Sequential([\n        pretrained,\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(1, activation='sigmoid')\n    ])\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(),\n        metrics=['accuracy']\n    )\n    \n    return model","441bcde9":"\"\"\"\nPlot the training and validation loss\nepochs - list of epoch numbers\nloss - training loss for each epoch\nval_loss - validation loss for each epoch\n\"\"\"\ndef plot_loss(epochs, loss, val_loss):\n    plt.plot(epochs, loss, 'bo', label='Training Loss')\n    plt.plot(epochs, val_loss, 'orange', label = 'Validation Loss')\n    plt.title('Training and Validation Loss')\n    plt.legend()\n    plt.show()\n    \n    \n\"\"\"\nPlot the training and validation accuracy\nepochs - list of epoch numbers\nacc - training accuracy for each epoch\nval_acc - validation accuracy for each epoch\n\"\"\"\ndef plot_accuracy(epochs, acc, val_acc):\n    plt.plot(epochs, acc, 'bo', label='Training accuracy')\n    plt.plot(epochs, val_acc, 'orange', label = 'Validation accuracy')\n    plt.title('Training and Validation Accuracy')\n    plt.legend()\n    plt.show()","f02a7066":"# base_path = '..\/combined-real-and-fake-faces\/combined-real-vs-fake\/'\nbase_path = '\/kaggle\/input\/140k-real-and-fake-faces\/real_vs_fake\/real-vs-fake\/'\nimage_gen = ImageDataGenerator()\n\ntrain_flow = image_gen.flow_from_directory(\n    base_path + 'train\/',\n    target_size=(224, 224),\n    batch_size=64,\n    color_mode='grayscale',\n    class_mode='binary'\n)\n\nvalid_flow = image_gen.flow_from_directory(\n    base_path + 'valid\/',\n    target_size=(224, 224),\n    batch_size=64,\n    color_mode='grayscale',\n    class_mode='binary'\n)\n","ebec22d1":"test_flow = image_gen.flow_from_directory(\n    base_path + 'test\/',\n    target_size=(224, 224),\n    batch_size=1,\n    color_mode='grayscale',\n    shuffle = False,\n    class_mode='binary'\n)","b4be39ed":"densenet = DenseNet121(\n    weights=None,\n    include_top=False,\n    input_shape=(224,224,1)\n)\nmodel = build_model(densenet)\nmodel.summary()","817ee6a0":"train_steps = 100000\/\/64\nvalid_steps = 20000\/\/64\n\nhistory = model.fit_generator(\n    train_flow,\n    epochs = 10,\n    steps_per_epoch = train_steps,\n    validation_data = valid_flow,\n    validation_steps = valid_steps \n)","3769e037":"model.save('grayscale_densenet.h5')","d2dccada":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']","29c62c29":"plot_loss(range(1, len(loss) + 1), loss, val_loss)","fe3d2217":"plot_accuracy(range(1, len(loss) + 1), acc, val_acc)","55a1a4d0":"y_pred = model.predict(test_flow)\ny_test = test_flow.classes","de3a478c":"print(\"ROC-AUC Score:\", metrics.roc_auc_score(y_test, y_pred))\nprint(\"AP Score:\", metrics.average_precision_score(y_test, y_pred))\nprint()\nprint(metrics.classification_report(y_test, y_pred > 0.5))","cc59f1c6":"This notebook was built on the notebook shared by [xhlulu](https:\/\/www.kaggle.com\/xhlulu\/real-vs-fake-starter-code)."}}