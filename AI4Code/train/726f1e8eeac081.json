{"cell_type":{"20cf7e34":"code","fa163ce8":"code","cc520354":"code","bcad28de":"code","f604954e":"code","c7becf7e":"code","d1049aab":"code","6593a903":"code","6d2d0493":"code","c8d1937d":"code","2f9988e4":"code","8b886811":"code","68d4e4e6":"code","5441915d":"markdown","0d10f8e6":"markdown","c21219a6":"markdown","d516e219":"markdown","66bd89e0":"markdown","f0293be9":"markdown","a9c3c3dd":"markdown"},"source":{"20cf7e34":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport random as rnd ","fa163ce8":"exp=rnd.choices(['E', 'F'], weights=[0.5,0.5])\n#print(exp)\nn=10\np=0.75 \nfor i in np.arange(n):\n    exp=rnd.choices(['E', 'F'],weights=[p,1-p])\n    print(i,\" \",exp)\n\n# simular una bernoulli    \n    \ndef bernoulli(p,k=1):\n    if(p<0 or p>1):\n        return(\"La probabilidad debe ser un n\u00famero entre 0 y 1\")\n    else: \n        return(rnd.choices([1, 0],k=k,weights=[p,1-p]))\n\nbernoulli(0.3,k=10)\n","cc520354":"# una vez\nexp=rnd.choices(['C', 'S'], weights=[0.5,0.5])\n#print(exp)\n\n# n monedas  \nn=3 \np=0.75 # probabillidad de sello \nres=[] # para guardar los resultados \nfor i in np.arange(n):\n    res+=rnd.choices(['C', 'S'],weights=[p,1-p])\n\nprint(res)\n# contar el n\u00famero de sellos \nres=np.array(res)\nsum(res=='S')\n\n# ahora repetiremos el c\u00f3digo anterior R veces \nR=8000 # numero de repeticiones (las veces que se lanzan las n monedas)\nn=3 # n\u00famero de monedas  \n#p=0.5 # probabillidad de sello \n\nNumSellos=[] # para guardar los valores de la variable # de sellos \n\nfor j in np.arange(R):\n    res=[] # para guardar los resultados \n    for i in np.arange(n):\n        res+=rnd.choices(['S', 'C'],weights=[p,1-p])\n    res=np.array(res)\n    NumSellos.append(sum(res=='S'))\n\nX=np.array(NumSellos)\ndf=pd.DataFrame({'X':X})\n# frec observadas \nobs=df['X'].value_counts(sort=False)\/R\nobs","bcad28de":"import itertools \nm=['S', 'C']\n### todos los posibles resultados \nS0=[f'{a}{b}{c}' for a, b, c in itertools.product(m,m,m)]\n### se organizan en un dataframe \nS=pd.DataFrame({'Ei':S0})\nS\n# numero de elementos en S \nn=S.shape[0] \n### cuantos 'S' hay en cada fila \n#S.Ei.str.count('S')\nS['X']=S['Ei'].str.count('S')\n#print(S.head())\n#print(S)\nDistProb=S.groupby('X').count()\/n\nDistProb['Oi']=obs\nDistProb","f604954e":"DistProb.plot(kind='bar',alpha=0.8,rot=0)\n#for i in np.arange(len(DistProb.index)):\n#    plt.text(DistProb.index[i]-0.5,DistProb.Ei[i]+0.5,round(DistProb.Ei[i],3))\nplt.legend(loc=0)\nplt.xlabel(\"N\u00famero de sellos\")\nplt.ylabel(\"Probabilidad\") \nplt.show()","c7becf7e":"#plt.bar(DistProb.index,DistProb.Ei)\n#plt.bar(DistProb.index+0.5,DistProb.Oi)\n#for i in np.arange(len(DistProb.index)):\n#    plt.text(DistProb.index[i]-0.5,DistProb.Ei[i]+0.5,round(DistProb.Ei[i],3))","d1049aab":"width = 0.35\nx = np.arange(DistProb.shape[0])\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, DistProb['Ei'], width, label='Esperado')\nrects2 = ax.bar(x + width\/2, DistProb['Oi'], width, label='Observado')\nax.set_ylabel('Probabilidades')\nax.set_title('Probs esperadas y observadas')\nax.set_xticks(x)\nax.set_xticklabels(x)\nax.legend()\nplt.show()\n# para colocar encima las probabilidades encima de cada barra \n# ****no funciona **** \n# si lo pone a funcionar y me explica que pasa tiene bono\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\nautolabel(rects1)\nautolabel(rects2)\nfig.tight_layout()\nplt.show()","6593a903":"p=0.3 # probabillidad de Exito  \nres=['Fr'] # para guardar los resultados \ni=0\nimp=False ## si quieres ver los resultados pon True aqu\u00ed \nwhile 'Fr' in res:\n  res=rnd.choices([\"Ex\", \"Fr\"],weights=[p,1-p])\n  i += 1\n  if imp:\n    print(res,i)","6d2d0493":"### simulaci\u00f3n\nR=10000 # numero de repeticiones del experimento   \nX=[]\nfor j in np.arange(R):\n    res=['Fr'] # para guardar los resultados \n    i=0\n    imp=False ## si quieres ver los resultados pon True aqu\u00ed \n    while 'Fr' in res:\n      res=rnd.choices([\"Ex\", \"Fr\"],weights=[p,1-p])\n      i += 1\n      if imp:\n        print(res,i)\n    X.append(i)","c8d1937d":"df=pd.DataFrame({'X':X})\npr_obs=df[\"X\"].value_counts()\/R\npr_obs.head()\n#df.head()\nxo=pr_obs.index\ndfo=pd.DataFrame({'x':xo,'pr':pr_obs})\ndfo1=dfo.sort_values(by=['x'])\ndfo1.head()\ndfo1.tail()","2f9988e4":"### Lo te\u00f3rico \n# para calcular la funci\u00f3n de probabilidad \n# recuerda que el rango de esta variable es\n# el conjunto de los naturales por eso se hace hasta la media mas \n# 3 desciaviones est\u00e1ndar \n#p=0.01 # probabilidad de \u00e9xito \nEx=1\/p # valor esperado te\u00f3rico \nVx=(1-p)\/p**2 # varianza te\u00f3rica \ndfo1[\"prt\"]=(1-p)**(dfo1.x-1)*p #probabilidades te\u00f3ricas \ndfo1.head()","8b886811":"### para no usar todos los valores de x que aparecen\n### en la simulaci\u00f3n. Tomar\u00e9 los menores que la media m\u00e1s\n### dos desviaciones est\u00e1ndar \nlim=Ex+2*np.sqrt(Vx)\ndfo1=dfo1.iloc[range(0,round(lim)),]\ndfo1[[\"pr\",\"prt\"]].plot(kind=\"bar\",alpha=0.8,rot=90)\n#for i in np.arange(len(DistProb.index)):\n#    plt.text(DistProb.index[i]-0.5,DistProb.Ei[i]+0.5,round(DistProb.Ei[i],3))\nxtpaso=20\nplt.xticks(list(range(1,max(dfo1.x)+1,xtpaso)),[str(i) for i in range(1,max(dfo1.x)+1,xtpaso)])\nplt.legend(loc=0)\nplt.xlabel(\"N\u00famero de ensayos\")\nplt.ylabel(\"Probabilidad\") \nplt.show()\n","68d4e4e6":"d={(i,j):i+j for i in range(1,7) for j in range(1,7)}\ndf=pd.DataFrame.from_dict(d,orient='index')\ndf.columns=['Suma']\ndf.head()","5441915d":"### Gr\u00e1fico: Otra forma menos elegante ","0d10f8e6":"### Variable aleatoria gem\u00e9trica \n\nCuando se repiten experimentos de bernoulli independientes, con probabilidad de \u00e9xito constante, hasta que se obtenga el primer \u00e9xito y contamos el n\u00famero de ensayos realizados, la variable aleatoria as\u00ed registrada se dice que tiene distribuci\u00f3n `geom\u00e9trica`  \n\n\n\n### Simulaci\u00f3n de una VA geom\u00e9trica\n\nCada 10 minutos se verifica el volumen de llenado de las latas que salen de una m\u00e1quina llenadora autom\u00e1tica. La evaluaci\u00f3n contin\u00faa hasta que se encuentre una lata que no  cumpla con las especificaciones.\n\nSea $Y$ la variable aleatoria que asigna a cada punto de $S$ el **n\u00famero de latas**  que es necesario analizar **hasta encontrar** una lata que no cumpla las especificaciones de volumen. Si la probabilidad de que una lata no cumpla\nes $p=0.01$ y las observaciones son **independientes**, simule datos de este experimento y compare con la distribuci\u00f3n de probabilidad te\u00f3rica","c21219a6":"### Experimento binomial \nCuando se repiten experimentos de bernoulli independientes, con probabilidad de \u00e9xito constante, $n$ veces, estamos frente a un experimento `binomial`.  \n\n### Simulaci\u00f3n de un experimento binomial \n\nSimularemos el lanzamiento de una moneda $(p=0.5)$ tres veces $(n=3)$ y contaremos el n\u00famero de sellos $X$ ","d516e219":"### Te\u00f3ricos","66bd89e0":"### Ejercicios \n\n* Abordar el problema del experimento que consiste del lanzamiento de dos datos de 6 caras pero ahora uno de los datos no es **legal** o **justo**. En este caso las probabilidades de los resultados del dado no legal son $P(1)=P(2)=P(3)=\\frac19$ y $P(4)=P(5)=P(6)=\\frac29$. La variable aleatoria de inter\u00e9s $X$ es la suma de las dos caras obtenidas, como el primer caso. Se debe obtener la distribuci\u00f3n de probabilidad de $X$ y comparar los resultados con el caso donde los dos dados son legales.\n\n* Simular una binomial negativa y realizar un gr\u00e1fico donde se muestre las probabilidades te\u00f3ricas y las simuladas (frecuencias relativas)  ","f0293be9":"# Probabilidad y variables aleatorias discretas\nEn esta secci\u00f3n se simular\u00e1n algunos experimentos aleatorios que dan lugar a variables aleatorias discretas\n* Ensayos y variables aleatorias de bernoulli\n + Lanzamiento de una o m\u00e1s monedas\n + Experimentos de Bernoulli con valores de $p$ ajustables.\n* Simulaci\u00f3n de una variable geom\u00e9trica y binomial negativa.\n* Simulaci\u00f3n de una hipergeom\u00e9trica.\n* Simulaci\u00f3n del lanzamiento de dos o m\u00e1s dados. \n\n## Simulaci\u00f3n de ensayos y variables de Bernoulli\n\nUn ensayo de Bernoulli es un experimento aleatorio que tiene solo dos resultados posibles, denominados `\u00e9xito` y `fracaso`. La probabilidad de \u00e9xito se denota por $p$ y, por supuesto, la de fracaso ser\u00e1 $1-p$.\n\nLa variable aleatoria que  asigna 0 (cero) a fracaso y 1 (uno) a \u00e9xito de acuerdo con los resultados de un ensayo de Bernoulli se dice que tiene distribuci\u00f3n de Bernoulli de par\u00e1metro $p$    \n","a9c3c3dd":"### Lanzamiento de dados  \nAbordaremos el problema del experimento que consiste del lanzamiento de dos dados de 6 caras legales. La variable aleatoria de inter\u00e9s $X$ es la suma de las dos caras obtenidas. Deseamos obtener la distribuci\u00f3n de probabilidad de $X$. En primer lugar contruimos un *data frame* con todos los posible resultados del experimento.  "}}