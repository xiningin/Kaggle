{"cell_type":{"65958655":"code","64057dc4":"code","4c5d9d62":"code","f3f036b2":"code","eee51ba5":"code","dd5a44e5":"code","c5605a78":"code","5279d3f1":"code","6d3416a8":"code","4e39b57b":"code","32762f00":"code","85d85937":"code","e762a4eb":"code","9b0695d9":"code","f4bd64bb":"code","0b62ddf7":"code","c52403a4":"code","ef2eeaee":"code","b6fc54bd":"code","4fff5c98":"code","05073c21":"code","b3ff2289":"code","6a9f6843":"code","2a941776":"code","315a6110":"code","4fc1caac":"code","990cdca2":"code","d5ac9d60":"code","8e72176c":"code","f3097fd9":"code","5f30b363":"code","3643e33a":"code","8df33892":"code","a79ab6c6":"code","5fbde28a":"code","2b091967":"code","2234bd50":"code","3d86dd2a":"code","c835980d":"code","df0e13e6":"code","1a1b985a":"code","5a24899c":"code","75fa3e9d":"code","eadabc9a":"code","25ec9a31":"code","c97f9d5a":"code","735bef5f":"code","f7423275":"code","49ff5418":"code","103998ed":"code","890c89a1":"code","3577d498":"code","e49b123d":"code","baa80ab7":"code","4641cdf8":"code","2c056a90":"code","fe37db29":"code","2963f40d":"code","28abc0da":"code","b24931da":"code","63d7e728":"code","8e25930c":"code","d930db87":"code","ba8134fe":"code","b3288df4":"code","d309e77c":"code","849cbbf7":"code","94bf0b7b":"code","3c78478f":"code","c121f192":"code","deea3f69":"code","02c7a860":"code","c0cfc6ea":"code","42ef59b3":"code","3b25dd4c":"code","67c14353":"code","2892f705":"code","3667f218":"code","381b88ec":"code","afc1c5ea":"code","54a62537":"code","020c4c64":"code","55086edf":"code","3d79b73d":"code","5202f5c8":"code","2a2a8d55":"code","bc71624c":"code","965ca427":"code","bc2af902":"code","6c557517":"code","c197e2ad":"markdown","a8326a4d":"markdown","47d24bf4":"markdown","0c56a742":"markdown","393ac426":"markdown","785ab397":"markdown","c703a3a1":"markdown","db0483cf":"markdown","885866e3":"markdown","b69e1c1c":"markdown","5ce8472b":"markdown","4cffe5ed":"markdown","e3e297a5":"markdown","387038e2":"markdown","be46e945":"markdown","5dabed33":"markdown","ead9226c":"markdown","51fa18aa":"markdown","b65ff570":"markdown","a5eeec39":"markdown","a6512818":"markdown","8393c974":"markdown","79084a9a":"markdown","ddb54faf":"markdown","f6e1cb1a":"markdown","7337929b":"markdown","d72867e3":"markdown","2c04f327":"markdown","b31014b3":"markdown","cfe96673":"markdown"},"source":{"65958655":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64057dc4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.max_columns', None)","4c5d9d62":"df = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv',sep='\\t')","f3f036b2":"df.head(4)","eee51ba5":"df.info()","dd5a44e5":"plt.figure(figsize=(10,8))\nsns.heatmap(df.isnull(),cmap='viridis',cbar=False)","c5605a78":"df.isnull().sum()","5279d3f1":"sns.histplot(df['Year_Birth'])","6d3416a8":"plt.figure(figsize=(8,6))\naxis=sns.countplot(x=\"Education\",palette='tab10',data=df)\nfor patch in axis.patches:\n    axis.text(x = patch.get_x() + patch.get_width()\/2, y = patch.get_height()\/2,\n    s = f\"{np.round(patch.get_height()\/len(df)*100, 1)}%\",\n    ha = 'center', size = 9, rotation = 0, weight = 'bold',color = 'black')\nplt.xlabel(\"Job\", size=14)\nplt.ylabel('Count', size=14)\nplt.xticks(rotation=90)\nplt.show()","4e39b57b":"plt.figure(figsize=(8,6))\naxis=sns.histplot(x=\"Income\",palette='tab10',data=df)\nplt.xlabel(\"Income\", size=14)\nplt.ylabel('Count', size=14)\nplt.xticks(rotation=90)\nplt.show()","32762f00":"plt.figure(figsize=(8,6))\naxis=sns.countplot(x=\"Kidhome\",palette='tab10',data=df)\nfor patch in axis.patches:\n    axis.text(x = patch.get_x() + patch.get_width()\/2, y = patch.get_height()\/2,\n    s = f\"{np.round(patch.get_height()\/len(df)*100, 1)}%\",\n    ha = 'center', size = 14, rotation = 0, weight = 'bold',color = 'black')\nplt.xlabel(\"Job\", size=14)\nplt.ylabel('Count', size=14)\nplt.xticks(rotation=90)\nplt.show()","85d85937":"plt.figure(figsize=(8,6))\naxis=sns.countplot(x=\"Teenhome\",palette='tab10',data=df)\nfor patch in axis.patches:\n    axis.text(x = patch.get_x() + patch.get_width()\/2, y = patch.get_height()\/2,\n    s = f\"{np.round(patch.get_height()\/len(df)*100, 1)}%\",\n    ha = 'center', size = 14, rotation = 0, weight = 'bold',color = 'black')\nplt.xlabel(\"Job\", size=14)\nplt.ylabel('Count', size=14)\nplt.xticks(rotation=90)\nplt.show()","e762a4eb":"date = pd.to_datetime(df['Dt_Customer'])","9b0695d9":"start_date = min(date)\nprint(\"1st data collected date  : \",start_date)\nend_date = max(date)\nprint(\"Last data collected date : \",end_date)","f4bd64bb":"sns.histplot(df['Recency'])\nplt.xlabel('Recency')\nplt.ylabel('Count')\nplt.show()","0b62ddf7":"plt.figure(figsize=(10,6))\nsns.set(style=\"darkgrid\")\n\nsns.histplot(data=df, x=\"MntWines\", color=\"skyblue\", label=\"Wines\", kde=True)\nsns.histplot(data=df, x=\"MntFruits\", color=\"red\", label=\"Fruits\", kde=True)\nsns.histplot(data=df, x=\"MntMeatProducts\", color=\"blue\", label=\"Meat\", kde=True)\nsns.histplot(data=df, x=\"MntFishProducts\", color=\"purple\", label=\"Fish\", kde=True)\nsns.histplot(data=df, x=\"MntSweetProducts\", color=\"green\", label=\"Sweet\", kde=True)\nsns.histplot(data=df, x=\"MntGoldProds\", color=\"black\", label=\"Gold\", kde=True)\nplt.title('Spendings on diffrent Products')\nplt.xlabel('Prdducts')\nplt.ylabel('Count')\nplt.legend() ","c52403a4":"plt.figure(figsize=(8,6))\nsns.set(style=\"darkgrid\")\n\nsns.histplot(data=df, x=\"NumWebPurchases\", color=\"red\", label=\"Web\", kde=True)\nsns.histplot(data=df, x=\"NumCatalogPurchases\", color=\"blue\", label=\"Catalog\", kde=True)\nsns.histplot(data=df, x=\"NumStorePurchases\", color=\"green\", label=\"Store\", kde=True)\nplt.title('Spendings on diffrent deals')\nplt.xlabel('Purchased Deals')\nplt.ylabel('Count')\nplt.legend() ","ef2eeaee":"df['NumDealsPurchases'].unique()","b6fc54bd":"len(df['NumDealsPurchases'].unique())","4fff5c98":"plt.figure(figsize=(8,6))\nsns.set(style=\"whitegrid\")\nsns.histplot(x='NumDealsPurchases',bins=15,data=df)\nplt.title('Deals Purchased on Discounts')\nplt.xlabel('Deals on Discounts')\nplt.show()","05073c21":"plt.figure(figsize=(8,6))\nsns.set(style=\"whitegrid\")\nsns.histplot(x='NumWebVisitsMonth',bins=15,data=df)\nplt.title('Hits on website per month')\nplt.xlabel('Websites hits')\nplt.ylabel('Count')\nplt.show()","b3ff2289":"fig, axs = plt.subplots(3, 2, figsize=(12, 12))\nsns.countplot(data=df, x='AcceptedCmp1', ax=axs[0, 0])\nsns.countplot(data=df, x='AcceptedCmp2', ax=axs[0, 1])\nsns.countplot(data=df, x='AcceptedCmp3', ax=axs[1, 0])\nsns.countplot(data=df, x='AcceptedCmp4', ax=axs[1, 1])\nsns.countplot(data=df, x='AcceptedCmp5', ax=axs[2, 0])\nsns.countplot(data=df, x='Response', ax=axs[2, 1])","6a9f6843":"plt.figure(figsize=(8,6))\naxis=sns.countplot(x=\"Complain\",palette='tab10',data=df)\nfor patch in axis.patches:\n    axis.text(x = patch.get_x() + patch.get_width()\/2, y = patch.get_height()\/2,\n    s = f\"{np.round(patch.get_height()\/len(df)*100, 1)}%\",\n    ha = 'center', size = 14, rotation = 0, weight = 'bold',color = 'black')\nplt.xlabel(\"Complaints\", size=14)\nplt.ylabel('Count', size=14)\nplt.xticks(rotation=90)\nplt.show()","2a941776":"df.head(3)","315a6110":"print(df['Z_CostContact'].unique())\nprint(len(df['Z_CostContact'].unique()))","4fc1caac":"print(df['Z_Revenue'].unique())\nprint(len(df['Z_Revenue'].unique()))","990cdca2":"df = df.dropna()","d5ac9d60":"columns_dict = {'Year_Birth':'Age','Education':'Qualification','Dt_Customer':'Total Days','Recency':'Last Purchased','MntWines':'Wine',\n                'MntFruits':'Fruits','MntMeatProducts':'Meat','MntFishProducts':'Fish','MntSweetProducts':'Sweets','MntGoldProds':'Gold',\n                'NumDealsPurchases':'Deals','NumWebPurchases':'Web','NumCatalogPurchases':'Catalog','NumStorePurchases':'Store',\n               'NumWebVisitsMonth':'Web Visit','AcceptedCmp3':'camp3','AcceptedCmp1':'Camp1','AcceptedCmp2':'Camp2',\n                'AcceptedCmp4':'Camp4','AcceptedCmp5':'Camp5','Response':'Last Camp'}","8e72176c":"df = df.rename(columns=columns_dict)","f3097fd9":"df.columns","5f30b363":"df.head(3)","3643e33a":"backup_df = df.copy()","8df33892":"df['Age']= 2021 - df['Age']","a79ab6c6":"df['Qualification'].unique()","5fbde28a":"QUALIFICATION_DICT = {'Graduation':'Graduate','PhD':'Post Graduate','Master':'Post Graduate',\n                      'Basic':'Under Graduate','2n Cycle':'Under Graduate'}","2b091967":"QUALIFICATION_DICT","2234bd50":"df['Qualification'] = df['Qualification'].map(QUALIFICATION_DICT)","3d86dd2a":"df['Qualification'].unique()","c835980d":"QUALIFICATION_DICT2 = {'Under Graduate':1,'Graduate':2,'Post Graduate':3}","df0e13e6":"df['Qualification'] = df['Qualification'].map(QUALIFICATION_DICT2)","1a1b985a":"df.head(2)","5a24899c":"df['Marital_Status'].unique()","75fa3e9d":"MARITAL_DICT = {'Married':'Together','Divorced':'Single','Widow':'Single','Alone':'Single',\n                'Absurd':'Single','YOLO':'Single','Single':'Single','Together':'Together'}","eadabc9a":"MARITAL_DICT","25ec9a31":"df['Marital_Status'] = df['Marital_Status'].map(MARITAL_DICT)","c97f9d5a":"df['Marital_Status'].unique()","735bef5f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","f7423275":"df.Marital_Status = le.fit_transform(df.Marital_Status)","49ff5418":"df['Marital_Status'].unique()","103998ed":"def family_size(values):\n    total=0\n    marital = values[0]\n    kid = values[1]\n    teen = values[2]\n    \n    if marital==0:\n        total = kid+teen+1\n        return total\n    else:\n        total = kid+teen+2\n        return total","890c89a1":"df['Family Size'] = df[['Marital_Status','Kidhome','Teenhome']].apply(family_size,axis=1)","3577d498":"df.info()","e49b123d":"from datetime import date\ntoday = date.today()\nprint(today)\ndf['Todays date'] = today","baa80ab7":"df['Total Days'] = pd.to_datetime(df['Total Days'])\ndf['Todays date'] = pd.to_datetime(df['Todays date'])","4641cdf8":"df['Membership period'] = df['Todays date'] - df['Total Days'] ","2c056a90":"df['Membership period'] = df['Membership period'].astype(str)\ndf['Membership period'] = df['Membership period'].replace('[^0-9]','',regex=True)","fe37db29":"df['Spendings'] = df['Wine']+df['Fruits']+df['Meat']+df['Fish']+df['Sweets']+df['Gold']","2963f40d":"df['Total Purchase'] = df['Deals']+df['Web']+df['Catalog']+df['Store']","28abc0da":"df['Offer Used'] = df['camp3']+df['Camp4']+df['Camp5']+df['Camp1']+df['Camp2']+df['Last Camp']","b24931da":"df['Offer Used'].unique()","63d7e728":"df.head(3)","8e25930c":"DROP=['Total Days','Todays date','ID','Z_Revenue','Z_CostContact']","d930db87":"df = df.drop(DROP,axis=1)","ba8134fe":"df.head(2)","b3288df4":"selected_features = ['Age','Income','Last Purchased','Family Size','Spendings','Total Purchase','Marital_Status']","d309e77c":"sns.pairplot(df[selected_features],hue='Marital_Status')","849cbbf7":"df.describe()","94bf0b7b":"Q1 = df['Age'].quantile(0.25)\nQ3 = df['Age'].quantile(0.75)\nIQR = Q3 - Q1    #IQR is interquartile range for Age\n\nfilter = (df['Age'] >= Q1 - 1.5 * IQR) & (df['Age'] <= Q3 + 1.5 *IQR)\ndf = df.loc[filter]  ","3c78478f":"Q1 = df['Income'].quantile(0.25)\nQ3 = df['Income'].quantile(0.75)\nIQR = Q3 - Q1    #IQR is interquartile range for Income\n\nfilter = (df['Income'] >= Q1 - 1.5 * IQR) & (df['Income'] <= Q3 + 1.5 *IQR)\ndf = df.loc[filter]","c121f192":"df.describe()","deea3f69":"plt.figure(figsize=(20,20))\nsns.heatmap(df.corr(),cmap='coolwarm',annot=True,center=0)","02c7a860":"from sklearn.preprocessing import StandardScaler","c0cfc6ea":"sc = StandardScaler()\ndf_new = sc.fit_transform(df)","42ef59b3":"new_df = pd.DataFrame(df_new,columns=df.columns)","3b25dd4c":"new_df.head(3)","67c14353":"from sklearn.decomposition import PCA","2892f705":"pc = PCA(n_components=len(new_df.columns))","3667f218":"train_pc = pc.fit_transform(new_df)\npc_df_train = pd.DataFrame(train_pc, columns=['PC_'+str(i) for i in range(1,pc.n_components_+1)])","381b88ec":"plt.figure(figsize=(20,8))\nplt.xlabel('Principal Component')\nplt.ylabel('Standard Deviation')\nplt.title('PCA EigenValues')\nplt.title(\"Scree Plot (Principal Component Ananlysis)\")\nplt.plot(pc_df_train.std())\nplt.show()","afc1c5ea":"variance = pc.explained_variance_ratio_\nvar = np.cumsum(np.round(pc.explained_variance_ratio_, decimals=3)*100)\nplt.xlabel('% Variance explained variance')\nplt.ylabel('# of features')\nplt.title('PCA Variance Explained')\nplt.ylim(min(var),100.5)\nplt.style.context('seaborn-whitegrid')\nplt.axhline(y=80, color='r', linestyle='--')\nplt.title(\"Scree Plot (Principal Component Ananlysis)\")\nplt.plot(var)\nplt.show()","54a62537":"pc = PCA(n_components=3)\nX_train_pc = pc.fit_transform(new_df)","020c4c64":"from sklearn.cluster import KMeans\nkms = KMeans()","55086edf":"wcss = []\nfor i in range(1,40):\n    kms = KMeans(n_clusters=i, init='k-means++',random_state=0)\n    kms.fit(X_train_pc)\n    wcss.append(kms.inertia_)","3d79b73d":"plt.plot(range(1,40),wcss)\nplt.title('The Elbow Method')\nplt.xlabel('No of Clusters')\nplt.ylabel('WCSS')\nplt.show()","5202f5c8":"from yellowbrick.cluster import KElbowVisualizer\nElbow_M = KElbowVisualizer(KMeans(), k=10)\nElbow_M.fit(X_train_pc)\nElbow_M.show()","2a2a8d55":"kmeans = KMeans(n_clusters=4,init='k-means++',random_state=0)","bc71624c":"y_kmeans = kmeans.fit_predict(X_train_pc)","965ca427":"df['Clusters'] = y_kmeans","bc2af902":"plt.figure(figsize=(10,8))\nax = plt.axes(projection='3d')\nplt.scatter(X_train_pc[y_kmeans == 0, 0], X_train_pc[y_kmeans == 0, 1], s=100, c='red', label='Cluster1')\nplt.scatter(X_train_pc[y_kmeans == 1, 0], X_train_pc[y_kmeans == 1, 1], s=100, c='blue', label='Cluster2')\nplt.scatter(X_train_pc[y_kmeans == 2, 0], X_train_pc[y_kmeans == 2, 1], s=100, c='green', label='Cluster3')\nplt.scatter(X_train_pc[y_kmeans == 3, 0], X_train_pc[y_kmeans == 3, 1], s=100, c='teal', label='Cluster4')\nplt.title('Clusters of Customers')\nplt.show()","6c557517":"plt.figure(figsize=(10,8))\nplt.scatter(X_train_pc[y_kmeans == 0, 0], X_train_pc[y_kmeans == 0, 1], s=100, c='red', label='Cluster1')\nplt.scatter(X_train_pc[y_kmeans == 1, 0], X_train_pc[y_kmeans == 1, 1], s=100, c='blue', label='Cluster2')\nplt.scatter(X_train_pc[y_kmeans == 2, 0], X_train_pc[y_kmeans == 2, 1], s=100, c='green', label='Cluster3')\nplt.scatter(X_train_pc[y_kmeans == 3, 0], X_train_pc[y_kmeans == 3, 1], s=100, c='teal', label='Cluster4')\nplt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],s=300,c='yellow',label='centroids')\nplt.title('Clusters of Customers')\nplt.show()","c197e2ad":"**From the above data its clear that a maximum hits on the website from each customer is 5 and it seems we have few outliers too.**","a8326a4d":"**I cannot find any details about these 2 features, it may seems it about the organization not about the specific customer.**","47d24bf4":"**From the above histogram we can tell that max days a person can have no purchase is 100 days.**","0c56a742":"**The best value for cluster here is 10 as clearly seen by elbow method**","393ac426":"**We have few null values in \"Income\" feature**","785ab397":"**For this project we can choose pc value as 3 to reduce dimensions to 3**","c703a3a1":"**From above data we can say that maximum purchase come from \"Stores\" and minimum purchase come from \"Catalog\".**","db0483cf":"**Now we have 12 features and before clustering I need to reduce the dimensions to get a good result, Here I will use PCA for dimensionality reduction**","885866e3":"**Very few customers have accepted the offer in campaign 2, and approx same number of people have accepted the offer in campaign1,campaign3 and campaign4. Those who havent accepted the offers in these campaign have accquired in the last campaign named as response.**","b69e1c1c":"**I have created a new column \"Family Size\".**\n1. When MaritalStatus is single i.e 1+kidhome+teenhome\n2. When MaritalStatis is Together i.e 2+kidhome+teenhome","5ce8472b":"**Kids and teenage almost say result we have**","4cffe5ed":"**From the above pairplot I can see we have some outliers in Income and age. I am going to take a threshold value and going to cap the max value.**","e3e297a5":"**From the above histplot its clear that majority of the people are earning 0-100000 but we have few exceptions which we need to handle afterward.**","387038e2":"### **From the overall EDA it seems our data needs lot of preprocessing and cleaning which we will do now in Data Pre processing.**","be46e945":"**From the above data visualization we can find that the highest grossing products are wines and meat.**","5dabed33":"**Most of the people have acquired the deals 2 to 6 times, but some people have also acquired the deal for 14 times**","ead9226c":"**from the above screeplot we can choose the pca value We can take pc value as 15**","51fa18aa":"**So we have data of the people born from 1940 to 2000, as well as few data of the people born in 1900.**","b65ff570":"**Now our data is almost clean. We can move to the next step of transforming our data.**","a5eeec39":"**I have transformed the qualification categories into 3 unique categories.**","a6512818":"### PCA","8393c974":"**Using IQR values I have removed outliers from our data**","79084a9a":"**24 Null values in Income which we will handle in Data pre processing.**","ddb54faf":"**Instead of date of joining now we have membership period.**","f6e1cb1a":"**All features are int and float except 2 features which are objects, we need to transform these featrure to respected int format.**","7337929b":"**Now Instead of date of birth year we have age of the customers**","d72867e3":"**Yes as we can see only .9% of people have registerd a complaint for the past 2 years.**","2c04f327":"**Dropping Null Values**","b31014b3":"**We have data of the people which are having qualification, classified as 5 categories. I will transform these categories afterward.**","cfe96673":"**So,almost we have data for almost 2 years.**"}}