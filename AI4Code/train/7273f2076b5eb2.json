{"cell_type":{"7d8523db":"code","4af85d61":"code","829324d7":"code","d5ec4425":"code","f76d9e51":"code","500acebc":"code","473ff160":"code","9eac7d2d":"code","ac971be2":"code","29203b78":"code","9f795775":"code","e9f554d3":"code","2c4ad153":"code","dc651023":"code","3be14cc4":"code","dc2b7b38":"code","0a015b90":"code","78a77d97":"code","3c68c93b":"code","e9d13371":"code","c4d4dba2":"code","5214133b":"code","fb60f514":"code","1acb5815":"code","59fc6831":"code","34f8477c":"code","347214ca":"code","55ef1d75":"code","e8728c41":"code","96b25428":"markdown","1e3a490d":"markdown","6fa2418b":"markdown","8a2fecbe":"markdown","fa59e067":"markdown","398e6213":"markdown","524a3b49":"markdown","489cfcde":"markdown","6d1839c5":"markdown","05dc8893":"markdown","a1112e38":"markdown","d918418d":"markdown","2b8f57e0":"markdown"},"source":{"7d8523db":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix,classification_report, accuracy_score\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4af85d61":"data_time = pd.read_csv(\"..\/input\/cwru-bearing-datasets\/feature_time_48k_2048_load_1.csv\")\ndata_time","829324d7":"train_data, test_data = train_test_split(data_time, test_size = 750, stratify = data_time['fault'], random_state = 1234)\ntest_data['fault'].value_counts()","d5ec4425":"# Scale each column to have zero mean and standard deviation equal to 1\nscaler = StandardScaler()\ntrain_data_scaled = scaler.fit_transform(train_data.iloc[:,:-1])\npd.DataFrame(train_data_scaled).describe()","f76d9e51":"test_data_scaled = (test_data.iloc[:,:-1].values - scaler.mean_)\/np.sqrt(scaler.var_)\npd.DataFrame(test_data_scaled).describe()","500acebc":"from sklearn.svm import SVC","473ff160":"svc_model = SVC()\nsvc_model.fit(train_data_scaled, train_data['fault'])","9eac7d2d":"train_predictions = svc_model.predict(train_data_scaled)\ntest_predictions = svc_model.predict(test_data_scaled)","ac971be2":"from sklearn.metrics import classification_report,confusion_matrix","29203b78":"train_confu_matrix = confusion_matrix(train_data['fault'], train_predictions)\ntest_confu_matrix = confusion_matrix(test_data['fault'], test_predictions)","9f795775":"fault_type = data_time.fault.unique()\n\nplt.figure(1,figsize=(18,8))\n\nplt.subplot(121)\nsns.heatmap(train_confu_matrix, annot= True,fmt = \"d\",\nxticklabels=fault_type, yticklabels=fault_type, cmap = \"Blues\", cbar = False)\nplt.title('Training Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.subplot(122)\n\nplt.subplot(122)\nsns.heatmap(test_confu_matrix, annot = True,\nxticklabels=fault_type, yticklabels=fault_type, cmap = \"Blues\", cbar = False)\nplt.title('Test Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('True')\n\nplt.show()","e9f554d3":"# Classification report (test set)\nclass_report = classification_report(y_pred = test_predictions, y_true = test_data['fault'])\nprint(class_report)","2c4ad153":"parameters = {\"C\":[1, 10, 45, 47,49, 50, 51, 55, 100, 300, 500],\n             'gamma':[0.01, 0.05, 0.1, 0.5, 1, 5],\n             'kernel':[\"rbf\"]}","dc651023":"# Define the Grid Search optimization analysis\ntuned_svm_clf = GridSearchCV(SVC(),parameters,n_jobs = -1, cv= 10)\ntuned_svm_clf","3be14cc4":"# Train the move for the every pair of hyperparameters,\n#   and determine the best combination\ntuned_svm_clf.fit(train_data_scaled, train_data['fault'])","dc2b7b38":"# Hyperparameter of the best model\ntuned_svm_clf.best_params_","0a015b90":"#Let's select the best model and provide results on them\nbest_clf = tuned_svm_clf.best_estimator_\nbest_clf","78a77d97":"# Compute the predictions\ntrain_predictions_best = best_clf.predict(train_data_scaled)\ntest_predictions_best = best_clf.predict(test_data_scaled)","3c68c93b":"# Compute confusion matrix for training and test datasets\ntrain_confu_matrix_best = confusion_matrix(train_data['fault'], train_predictions_best)\ntest_confu_matrix_best = confusion_matrix(test_data['fault'], test_predictions_best)","e9d13371":"plt.figure(1,figsize=(18,8))\n\nplt.subplot(121)\nsns.heatmap(train_confu_matrix_best, annot= True,fmt = \"d\",\nxticklabels=fault_type, yticklabels=fault_type, cmap = \"Blues\", cbar = False)\nplt.title('Training Confusion Matrix (best model)')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.subplot(122)\n\nplt.subplot(122)\nsns.heatmap(test_confu_matrix_best, annot = True,\nxticklabels=fault_type, yticklabels=fault_type, cmap = \"Blues\", cbar = False)\nplt.title('Test Confusion Matrix (best model)')\nplt.xlabel('Predicted')\nplt.ylabel('True')\n\nplt.show()","c4d4dba2":"# Classification report (test set)\nclass_report_best = classification_report(y_pred = test_predictions_best, y_true = test_data['fault'])\nprint(class_report_best)","5214133b":"# Remember the metrics for the non-optimized model\nprint(class_report)","fb60f514":"# Logistic regression classifier\nfrom sklearn.linear_model import LogisticRegression\n\n# Setup the model\nlogis_model = LogisticRegression(multi_class='multinomial', solver='lbfgs', max_iter=1000)\n\n# Train the model\nlogis_model.fit(train_data_scaled, train_data['fault'])","1acb5815":"# Compute the predictions\ntest_predictions_lr = logis_model.predict(test_data_scaled)","59fc6831":"# Compute confusion matrix \ntest_confu_matrix_lr = confusion_matrix(test_data['fault'], test_predictions_lr)","34f8477c":"# Classification report\nclass_report_lr = classification_report(y_pred = test_predictions_lr, y_true = test_data['fault'])\nprint(class_report_lr)","347214ca":"# Compute the predictions\ntrain_predictions_logis = logis_model.predict(train_data_scaled)\ntest_predictions_logis = logis_model.predict(test_data_scaled)","55ef1d75":"# Classification report (test set)\nclass_report_logis = classification_report(y_pred = test_predictions_logis, y_true = test_data['fault'])\nprint(class_report_logis)","e8728c41":"plt.figure(1,figsize=(8,6))\n\nsns.heatmap(test_confu_matrix_lr, annot = True,\nxticklabels=fault_type, yticklabels=fault_type, cmap = \"Blues\", cbar = False)\nplt.title('Test Confusion Matrix (logistic regression)')\nplt.xlabel('Predicted')\nplt.ylabel('True')\n\nplt.show()","96b25428":"### Compare with non optimized versions","1e3a490d":"## Multinomial logistic regression\nThis is the alternative model for comparing with SVC performance","6fa2418b":"- **recall**    =    para cada fallo, proporci\u00f3n de los correctamente identificados sobre el total de los reales = `TP \/ (TP + sum(FN))`\n- **precision** = para cada fallo, proporci\u00f3n de los correctamente identificados sobre el total en la predicci\u00f3n = `TP \/ (TP + sum(FP))`\n\nRefer to [Understanding Data Science Classification Metrics in Scikit-Learn in Python](https:\/\/towardsdatascience.com\/understanding-data-science-classification-metrics-in-scikit-learn-in-python-3bc336865019) for the explanation of these metrics","8a2fecbe":"## Split into train and test datasets","fa59e067":"Plot confusion matrixes.","398e6213":"## Fault type identification\nThere are 10 types of faults, linked to each bearing deffect:\n\n- **Ball_007_1**: Ball defect (0.007 inch)\n- **Ball_014_1**: Ball defect (0.014 inch)\n- **Ball_021_1**: Ball defect (0.021 inch)\n- **IR_007_1**: Inner race fault (0.007 inch)\n- **IR_014_1**: Inner race fault (0.014 inch)\n- **IR_021_1**: Inner race fault (0.021 inch)\n- **Normal_1**: Normal\n- **OR_007_6_1**: Outer race fault (0.007 inch, data collected from 6 O'clock position)\n- **OR_014_6_1**: Outer race fault (0.014 inch, 6 O'clock)\n- **OR_021_6_1**: Outer race fault (0.021 inch, 6 O'clock)","524a3b49":"## Scale features in train set","489cfcde":"## Best model evaluation","6d1839c5":"## Train a model using Support Vector Classifier\nCall the SVC() model from sklearn and fit the model to the training data.","05dc8893":"We will check a grid of parameters to find the best one. For each parameter combination, 10 fold cross-validation is performed.\n- Understand what [10 fold cross-validation](https:\/\/machinelearningmastery.com\/k-fold-cross-validation\/) is","a1112e38":"## Tuning hyperparameters for model optimization","d918418d":"## Get the data\nThe file we will read is the result of preprocessing the raw data files (folder `\/kaggle\/input\/cwru-bearing-datasets\/raw\/`).\n\nTime series segments contains 2048 points each. Given that the sampling frequency is 48kHz each time serie covers 0.04 seconds.","2b8f57e0":"## Model Evaluation\nNow get predictions from the model and create a confusion matrix and a classification report."}}