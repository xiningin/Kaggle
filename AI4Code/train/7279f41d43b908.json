{"cell_type":{"ddf5a7a9":"code","2b3b59f0":"code","56ee0607":"code","cf13d5ce":"code","a6fb8333":"code","6ca881be":"code","44b010a3":"code","3d2618b1":"code","f83190f1":"code","cb83954c":"code","adf5506a":"code","49e1c876":"code","cfa09184":"code","de592b1a":"code","449a862f":"code","22b7d194":"code","5d516e6d":"code","016f7bd6":"code","8f49330d":"code","23f0e084":"code","70a28217":"code","17c58b34":"code","5c87c9a8":"code","67484039":"code","9cbcab38":"code","1071a500":"code","26e68076":"code","1fb0a658":"code","211561c0":"code","fbb5bcbd":"code","d74b0dd4":"code","527b66cf":"code","97f87908":"code","90cd8616":"code","be3d949b":"code","404e5599":"code","040ff898":"code","1d0dc056":"code","60f98a50":"code","8890255c":"code","e8711c94":"code","aeb94a1e":"code","fe7d916c":"code","a101ff56":"code","3ad490d4":"code","66266164":"code","ac2c3dac":"code","9b674aa9":"markdown","feee2ec1":"markdown","f8bf76fe":"markdown","abbf4e97":"markdown","a3a86477":"markdown","750e640b":"markdown","68db2de0":"markdown","9b67e483":"markdown","ac4f0ae0":"markdown","9a1bca12":"markdown","f5ca4d1d":"markdown","df8dd86b":"markdown","a5698745":"markdown","d3f23f4f":"markdown","3f5e31d7":"markdown","19cff217":"markdown","0998a1db":"markdown","163ddee9":"markdown","8bfd11e2":"markdown","3795f313":"markdown","ffc0d0da":"markdown","66fdcd51":"markdown","e61614a7":"markdown","b4031061":"markdown","ac936720":"markdown","e25a0ad8":"markdown","9cdd10f3":"markdown","316127e9":"markdown","7296cbd8":"markdown","1bec1f7a":"markdown","33caa94b":"markdown","d03edf7e":"markdown","601c530e":"markdown","aec1c9ab":"markdown","5dbfb2f4":"markdown"},"source":{"ddf5a7a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b3b59f0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom scipy import stats as st\nimport phik\nRANDOM_STATE = 12345\nimport warnings \nwarnings.filterwarnings('ignore')\nfrom dateutil import relativedelta as rdelta\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, recall_score, precision_score, roc_curve, f1_score, roc_auc_score\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.neighbors import KNeighborsClassifier, RadiusNeighborsClassifier\nCURRENT_DATE = dt.datetime(2020,2,1,0,0,0)","56ee0607":"def open_file_info(path,file_name):\n    file=pd.read_csv(path)\n    print('\\033[1m' + '\u0418\u041d\u0424\u041e\u0420\u041c\u0410\u0426\u0418\u042f \u041e \u0424\u0410\u0419\u041b\u0415 '+file_name + '\\033[0m')\n    print('\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430')\n    display(file.sample(10,random_state = RANDOM_STATE))\n    print('\u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0444\u0430\u0439\u043b\u0435')\n    print(file.info())\n    return file\n\ndata = open_file_info('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv','CHURN')","cf13d5ce":"print('cusomerID unique values count: ',data['customerID'].nunique())\nprint('Contract unique values count: ',data['Contract'].nunique())","a6fb8333":"col_set = ['gender','Partner','Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','PaymentMethod','Contract','Churn','TotalCharges']\nfor column in col_set:\n    print('\\033[1m' +column+' unique values: '+'\\033[0m')\n    print(data[column].sort_values().unique())","6ca881be":"data.query('TotalCharges == \" \"')","44b010a3":"data['TotalCharges'] = np.where(data['TotalCharges'] == ' ',0,data['TotalCharges'])\ndata['TotalCharges'] = data['TotalCharges'].astype('float')\nprint('Successfully changed!')","3d2618b1":"num_cols =['SeniorCitizen','MonthlyCharges','TotalCharges','tenure']\nfor column in num_cols:\n    print('\\033[1m' +column+' describe: '+'\\033[0m')\n    print(data[column].describe())","f83190f1":"def change_yes_no(df,column):\n    uv = df[column].sort_values().unique()\n    if len(uv) == 2 and uv[0] == 'No'and uv[1] == 'Yes':\n        df[column] = np.where(df[column] == 'Yes', 1, 0)\n        print('Values in '+column+' has changed')\n    else:\n        df[column] = np.where(df[column] == 'Yes', 1, np.where(df[column] == 'No', 0, -1))\n        print('Values in '+column+' has changed')\n    return df[column]\ncolumns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn','TotalCharges']\nfor column in columns:\n    change_yes_no(data,column)","cb83954c":"data = data.drop(['PhoneService','TotalCharges'],axis=1)\nprint('Columns dropped successfully')","adf5506a":"quit_users = data.query('Churn == 1')\ncurr_users = data.query('Churn == 0')\nprint('Successfully finished')","49e1c876":"count_quits = data['Churn'].sum()\nquits_percent = count_quits \/ data.shape[0]\nprint('Total Churn: ', count_quits)\nprint('Churn percent: {:.2%}'.format(quits_percent))\nvals = [quits_percent,1-quits_percent]\nlabels=['1-churn','0-current']\n\nplt.pie(vals, labels=labels , autopct='%1.2f%%')\nplt.title('Churn (1) and current (0) users percent')\nplt.show()\n","cfa09184":"def print_bar_charts(data_full,data_quit,data_curr,column,xlabel,lr):\n    \n    print('\\033[1m'+'Countplot for column '+column+'('+xlabel+')'+'\\033[0m')\n    plt.figure(1)\n    ax1 = plt.subplot2grid((1,2), (0,0))\n    sns.countplot(x=column, hue=\"Churn\" , data=data_full, ax = ax1)\n    ax1.set_xlabel(xlabel)\n    ax1.set_ylabel('users amount')\n    ax1.set_title('Users amount: churn(1) and current(0)')\n    ax1.tick_params(labelrotation = lr)\n\n    ax3 = plt.subplot2grid((1,2), (0,1))\n    sns.countplot(x=column, data=data_full, ax = ax3)\n    ax3.set_xlabel(xlabel)\n    ax3.set_ylabel('users amount')\n    ax3.set_title('total users amount')\n    ax3.tick_params(labelrotation = lr)\n    \n    plt.subplots_adjust(top=1, bottom=0.1, left=0.10, right=1.5, hspace=1, wspace=0.4)\n    plt.show()\n","de592b1a":"print_bar_charts(data,quit_users,curr_users,'Contract','payment type',0)","449a862f":"def add_subplots(data, column, num_column,expl,n_cols,un_list,n_rows,ttop,expl_gr): \n    color = (0.1, 0.2, 0.3)\n    ax0 = plt.subplot2grid((n_rows,n_cols), (0,0))\n    sns.distplot(a=data[num_column], norm_hist = False, kde = False, ax=ax0,color = color)\n    ax0.set_title('All values: '+expl_gr)\n    ax0.set_ylabel('Clients amount')\n    ax0.set_xlabel(expl)\n    for k in range(n_cols):\n        if k>0:\n            curr_col = un_list[k-1]         \n            ax1 = plt.subplot2grid((n_rows,n_cols), (0,k))\n           # color_new = \n            sns.distplot(a=data.query(column+' == \"'+curr_col+'\"')[num_column], norm_hist = False, kde = False, ax=ax1, color = (0.1+k\/10,0.2+2*k\/10,0.3+k\/10))\n            ax1.set_title(expl_gr+': '+curr_col)\n            ax1.set_xlabel(expl)\n    plt.subplots_adjust(top=ttop, bottom=0.1, left=0.10, right=3, hspace=0.7, wspace=0.1)\n    plt.show()\n\ndef print_dist_hist(data, column,data_quit, data_curr, num_column,expl,expl_gr): \n    n_rows = 1\n    un_list = data[column].unique()\n    n_cols = len(un_list) + 1 \n    ttop = 0.8\n    \n    fig = plt.figure(1, facecolor = 'pink')\n    print('\\033[1m'+'Hist '+expl+' for ALL clients depending on '+expl_gr+'------'+'\\033[0m')\n    add_subplots(data, column, num_column,expl,n_cols,un_list,n_rows,ttop,expl_gr)  \n    \n    plt.figure(1, facecolor = 'ivory')\n    print('\\033[1m'+'Hist '+expl+' for CHURN clients depending on '+expl_gr+'-------'+'\\033[0m')\n    add_subplots(data_quit, column, num_column,expl,n_cols,un_list,n_rows,ttop,expl_gr)\n    \n    \n    plt.figure(1, facecolor = 'lightgreen')\n    print('\\033[1m'+'Hist '+expl+' for CURRENT clients depending on  '+expl_gr+'-------'+'\\033[0m')\n    add_subplots(data_curr, column, num_column,expl,n_cols,un_list,n_rows,ttop,expl_gr)\n\nprint_dist_hist(data, 'Contract', quit_users, curr_users,'MonthlyCharges','\"Monthly charge\"','Payment type')\n","22b7d194":"print_dist_hist(data, 'Contract', quit_users, curr_users,'tenure','\"Tenure\"','Payment type')","5d516e6d":"def get_pivot(data, group_set):    \n    data_to_pivot = data[['Churn','Contract','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]\n    data_to_pivot['Additiional_IS'] = data_to_pivot['OnlineSecurity']+data_to_pivot['OnlineBackup']+data_to_pivot['DeviceProtection']+data_to_pivot['TechSupport']+data_to_pivot['StreamingTV']+data_to_pivot['StreamingMovies']\n    data_to_pivot=data_to_pivot.drop(['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies'],axis=1)\n    data_to_pivot['Additiional_IS'] = np.where(data_to_pivot['Additiional_IS']<=0,'Not use','Use')\n    data_to_pivot['MultipleLines'] = np.where(data_to_pivot['MultipleLines'] == -1,'NOT USE',np.where(data_to_pivot['MultipleLines'] == 0,'1 Line','Multiple lines'))\n    pivot_data = pd.pivot_table(data_to_pivot, values='Churn', index=group_set, aggfunc='count', margins = True)\n    return pivot_data\n    \nindex_set = ['MultipleLines','InternetService']    \npivot_quit = get_pivot(quit_users,index_set)\npivot_curr = get_pivot(curr_users,index_set)\n\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432')\nmerged = pivot_quit.merge(pivot_curr, on= index_set, suffixes = ['_churn','_curr'])\nmerged['Churn_all'] = merged['Churn_churn'] + merged['Churn_curr']\nmerged['Churn_churn_percent'] = (merged['Churn_churn'] \/ merged['Churn_all']) \nmerged['Churn_curr_percent'] = (merged['Churn_curr'] \/ merged['Churn_all']) \nmerged","016f7bd6":"data_short = data[['Churn','Partner','Dependents','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']]\ndata_short['InternetService'] = np.where(data_short['InternetService']=='DSL',1,np.where(data_short['InternetService']=='Fiber optic',0,-1))\nphik_overview = data_short.phik_matrix()\nphik_overview.round\nplt.figure(figsize = (12,5))\n\nsns.heatmap(phik_overview.values,cmap= sns.color_palette(palette=\"RdBu\"),linewidths=0.5,annot=True)\nplt.show()\n","8f49330d":"print_bar_charts(data,quit_users,curr_users,'PaymentMethod','Payment method',90)","23f0e084":"print_dist_hist(data, 'PaymentMethod', quit_users, curr_users,'tenure','\"Tenure\"','Payment method')","70a28217":"data.head()","17c58b34":"data = data.drop(['customerID'],axis = 1)\nprint('Deleted successfully')","5c87c9a8":"data['AddServices'] = data['OnlineSecurity']+data['OnlineBackup']+data['DeviceProtection']+data['TechSupport']+data['StreamingTV']+data['StreamingMovies']\ndata = data.drop(['OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies'],axis=1)\ndata.head()","67484039":"data_cat = data.copy()\ncat_features = ['Contract','PaymentMethod','gender','InternetService']\nnum_features = ['MonthlyCharges','tenure','AddServices','MultipleLines']\nall_features = cat_features + num_features\ndata=pd.get_dummies(data,drop_first = True)\nprint('Data encoded')\ndata.head()","9cbcab38":"\ndata_target = data['Churn']\ndata_features = data.drop('Churn',axis=1)\n\ndata_cat_target = data_cat['Churn']\ndata_cat_features = data_cat.drop('Churn',axis = 1)\nprint('Split successfully')","1071a500":"def split_features(features,target):\n    feat_train,feat_test,targ_train,targ_test = train_test_split(features,target,test_size=0.2,random_state = RANDOM_STATE)\n    print('Train size: '+str(feat_train.shape[0])+', train percent: '+str(feat_train.shape[0]\/features.shape[0]))\n    print('Test size: '+str(feat_test.shape[0])+', test percent: '+str(feat_test.shape[0]\/features.shape[0]))\n    return feat_train,feat_test,targ_train,targ_test","26e68076":"data_feat_train,data_feat_test,data_targ_train,data_targ_test = split_features(data_features,data_target)","1fb0a658":"data_cat_feat_train,data_cat_feat_test,data_cat_targ_train,data_cat_targ_test = split_features(data_cat_features,data_cat_target)","211561c0":"data_features.info()","fbb5bcbd":"Scaler = StandardScaler()\ndata_cat_feat_train[num_features] = Scaler.fit_transform(data_cat_feat_train[num_features])\ndata_cat_feat_test[num_features] = Scaler.transform(data_cat_feat_test[num_features])\nprint('Features of data_cat standartized')\n","d74b0dd4":"Scaler = StandardScaler()\ndata_feat_train[num_features] = Scaler.fit_transform(data_feat_train[num_features])\ndata_feat_test[num_features] = Scaler.transform(data_feat_test[num_features])\nprint('Features of data standartized')","527b66cf":"def print_basic_metrics(target_valid, predicted_valid, model, features_valid,model_name,roc_auc_train, acc_train):\n    accuracy = accuracy_score(target_valid,predicted_valid)\n    recall = recall_score(target_valid,predicted_valid)\n    precision = precision_score(target_valid,predicted_valid)\n    f1 = f1_score(target_valid,predicted_valid)\n    conf_matrix = confusion_matrix(target_valid,predicted_valid)\n    roc_auc = roc_auc_score(target_valid,model.predict_proba(features_valid)[::,1])\n    print()\n    print('\\033[1m'+'Metrics for '+model_name+' (test data)'+'\\033[0m')\n    print()\n    #\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043c\u0435\u0442\u0440\u0438\u043a\u0438, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\n   # print(model.feature_importances_)\n    print('accuracy = ',accuracy)\n    print('recall = ',recall)\n    print('precision = ',precision)\n    print('f1 = ',f1)\n    print('auc roc = ',roc_auc)\n    print('confusion matrix: ')\n    print(conf_matrix)\n    #\u0432\u044b\u0432\u043e\u0434\u0438\u043c roc-\u043a\u0440\u0438\u0432\u0443\u044e\n    is_fi = True\n    try:\n        coef = pd.Series(model.feature_importances_, index = features_valid.columns)\n        imp_coef = coef.sort_values()\n    except:\n        try:\n            coef = pd.Series(model.coef_[0], index = features_valid.columns)\n            imp_coef = coef.sort_values()\n        except:\n            is_fi = False\n    \n    try:\n        plt.figure(1)\n        #plt.rcParams['figure.figsize'] = (8.0, 10.0)\n        ax1 = plt.subplot2grid((1,2), (0,0))\n        preds = model.predict_proba(features_valid)[::,1]\n        # = probs[:,1]\n        fpr, tpr, thresholds = roc_curve(target_valid,preds)\n        ax1.plot(fpr, tpr,marker ='.' ,label = 'AUC = %0.2f' % roc_auc)\n        #plt.rcParams['figure.figsize'] = (8.0, 10.0)\n        ax1.legend(loc = 'lower right')\n        ax1.plot([0,1],[0,1],linestyle = \"--\")\n        \n        ax1.set_xlabel('FPR')\n        ax1.set_ylabel('TPR')\n        ax1.set_title('ROC-Curve')\n        if is_fi == True:\n            ax2 = plt.subplot2grid((1,2), (0,1))\n            imp_coef.plot(kind = \"bar\", ax=ax2)\n            ax2.set_title(\"Feature importance\")\n            \n        plt.subplots_adjust(top=1, bottom=0.1, left=0.10, right=1.5, hspace=1, wspace=0.4)\n        plt.show()\n    except:\n        print('No prdict_proba')\n    if roc_auc >= 0.84:\n        add_to_best_models(model, roc_auc_train, roc_auc, acc_train, accuracy, recall, precision, f1, model_name)\n    return accuracy, recall, precision, f1, conf_matrix, roc_auc\n\n#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 accuracy \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e 100% \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \ndef find_accuracy_zero_model(target, goal_const):\n    target_pred_const = pd.Series([goal_const] * len(target))\n    print(' accuracy with 100% prediction ',goal_const,' = ',accuracy_score(target,target_pred_const))","97f87908":"def add_to_model_types_compare(mtc,mod_name,roc_auc_train,roc_auc_test,time, acc_train, acc_test):\n    mtc = mtc.append({'model_name':mod_name,'acc_Train':acc_train,'acc_Test':acc_test,'_ROC_AUC_Train_Full ':roc_auc_train,'_ROC_AUC_Test_Data':roc_auc_test,'fit time':time},ignore_index = True)\n    display(mtc)\n    return mtc\nmodel_types_compare = pd.DataFrame()\nprint('Compare dataset created')","90cd8616":"def add_to_best_models(model, roc_auc_train, roc_auc_test, acc_train, acc_test, recall_test, precision_test, f1_test, model_name):\n    global best_models\n    best_models = best_models.append({'_model_name':model_name, '01_ROC_AUC_TRAIN':roc_auc_train,'02_ROC_AUC_TEST':roc_auc_test,'03_Accuracy_TRAIN':acc_train,'04_Accuracy_TEST':acc_test,'05_Recall_TEST':recall_test,'06_Precision_TEST':precision_test,'07_F1_TEST':f1_test},ignore_index=True)\n    return best_models\nbest_models = pd.DataFrame()\nprint('best models compare dataset created')","be3d949b":"def find_best_model(model,params,features_train,target_train,features_test,target_test,mtc,mod_name,mod_lib,cat_features):\n    grd = GridSearchCV(estimator = model, param_grid = params, \n                               cv = 5, n_jobs = -1, scoring = 'roc_auc')\n    if mod_lib == 'CB':\n        grd.fit(features_train, target_train,cat_features = cat_features)\n    elif mod_lib == 'SL':\n        grd.fit(features_train, target_train)\n    elif mod_lib == 'LGBM':\n        grd.fit(features_train, target_train,categorical_feature = 'auto')\n    #bs = grd.best_score_\n    bp = grd.best_params_\n    est = grd.best_estimator_\n    \n    pred = est.predict(features_test)\n    train_pred = est.predict(features_train)\n    \n    train_score = roc_auc_score(target_train,est.predict_proba(features_train)[::,1])\n    test_score = roc_auc_score(target_test,est.predict_proba(features_test)[::,1])\n    time = grd.refit_time_\n    acc_train = accuracy_score(target_train,train_pred)\n    acc_test = accuracy_score(target_test,pred)\n    \n    mtc = add_to_model_types_compare(mtc,mod_name,train_score,test_score,time,acc_train,acc_test)\n    print_basic_metrics(target_test, pred, est, features_test,mod_name,train_score,acc_train)\n    print('Best model params')\n    print(grd.best_params_)\n    return mtc,est,bp","404e5599":"def print_fi_plot(fi,indexes,mod_name):\n    coef = pd.Series(fi, index = indexes)\n    imp_coef = coef.sort_values()\n    plt.rcParams['figure.figsize'] = (8.0, 10.0)\n    imp_coef.plot(kind = \"barh\")\n    plt.title(\"Feature importance for \"+mod_name)\n    plt.show()","040ff898":"dec_tree = DecisionTreeClassifier()\ndepth_list = [i for i in range(1,50)]\nparams = {'max_depth':depth_list,'random_state':[RANDOM_STATE],'class_weight':[None,'balanced']}\nmodel_types_compare ,best_DT,best_DT_BP= find_best_model(dec_tree,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'DecisionTree','SL',[])\n","1d0dc056":"random_forest = RandomForestClassifier()\ndepth_list = [i for i in range(2,12)]\nestim_list = [i for i in range(45,75,5)]\nparams = {'max_depth':depth_list,'n_estimators':estim_list,'random_state':[RANDOM_STATE],'class_weight':[None,'balanced']}\nmodel_types_compare ,best_RF,best_RF_BP= find_best_model(random_forest,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'RandomForest','SL',[])\n\n","60f98a50":"ada_boost = AdaBoostClassifier()\nestim_list = [i for i in range(5,100,5)]\nparams = {'learning_rate':[0.1,0.5,1,1.5,2],'n_estimators':estim_list,'random_state':[RANDOM_STATE]}\nmodel_types_compare ,best_AB,best_AB_BP= find_best_model(ada_boost,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'AdaBoostClassifier','SL',[])\n","8890255c":"gb_boost = GradientBoostingClassifier()\nestim_list = [i for i in range(50,200,5)]\nparams = {'learning_rate':[0.001,0.05,0.1,0.5,1],'n_estimators':estim_list,'random_state':[RANDOM_STATE]}\nmodel_types_compare ,best_GB,best_GB_BP= find_best_model(gb_boost,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'GradientBoostingClassifier','SL',[])\n","e8711c94":"LogReg = LogisticRegression()\nparams = {'penalty':['l1','l2'],'C':[20,25,30,32,35,36,37],'random_state':[RANDOM_STATE],'class_weight':[None,'balanced'],'solver':['liblinear']}\nmodel_types_compare ,best_LR,best_LR_BP= find_best_model(LogReg,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'LogisticRegression','SL',[])\n","aeb94a1e":"SGD = SGDClassifier()\nparams = {'fit_intercept':[True,False],'loss':['log'],'alpha':[0.000001,0.00001,0.00005,0.0001,0.0005,0.001],'random_state':[RANDOM_STATE],'class_weight':[None,'balanced']}\nmodel_types_compare ,best_SGD,best_SGD_BP= find_best_model(SGD,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'SGDClassifier','SL',[])\n","fe7d916c":"KNCl = KNeighborsClassifier()\nparams = {'n_neighbors':[60,65,70,75,80,85,90,100],'weights':['uniform', 'distance']}\nmodel_types_compare ,best_KNCl,best_KNCl= find_best_model(KNCl,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'KNeighborsClassifier','SL',[])\n","a101ff56":"params = {'learning_rate':[0.01,0.05],'n_estimators':[700,750,800],'random_seed':[RANDOM_STATE],'verbose':[1000],'class_weights':[[1,1],[1,3]]}\ncbc = CatBoostClassifier()\n\nmodel_types_compare, best_CBC,best_CBC_BP = find_best_model(cbc,params,data_cat_feat_train, data_cat_targ_train, data_cat_feat_test, data_cat_targ_test,model_types_compare,'CatBoostClassifier','CB',cat_features)\n","3ad490d4":"params = {'class_weight':[None,'balanced'],'learning_rate':[0.001,0.005,0.01],'n_estimators':[500,550,600,650], 'max_depth':[5,10,15],'random_state':[RANDOM_STATE]}\nlgbm = LGBMClassifier()\n\ndata_cat_feat_train[cat_features] = data_cat_feat_train[cat_features].astype('category')\ndata_cat_feat_test[cat_features] = data_cat_feat_test[cat_features].astype('category')\nmodel_types_compare, best_lgbm, best_lgbm_BP = find_best_model(lgbm,params,data_cat_feat_train, data_cat_targ_train, data_cat_feat_test, data_cat_targ_test,model_types_compare,'LGBMClassifier','LGBM',[])","66266164":"mlp = MLPClassifier()\nparams = {'random_state':[RANDOM_STATE], 'max_iter':[300,400], 'alpha': [0.05,0.1]}\nmodel_types_compare ,best_mlp,best_mpl= find_best_model(mlp,params,data_feat_train, data_targ_train, data_feat_test, data_targ_test,model_types_compare,'MLPClassifier','SL',[])","ac2c3dac":"best_models[['02_ROC_AUC_TEST','04_Accuracy_TEST','05_Recall_TEST','06_Precision_TEST','07_F1_TEST','_model_name']]","9b674aa9":"**Features encoding**","feee2ec1":"**Train and test models**","f8bf76fe":"\u041c\u043e\u0436\u0435\u043c \u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u0443 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u0430\u0431\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u043e\u0434\u043d\u0430\u043a\u043e \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u044d\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","abbf4e97":"### Features prepare","a3a86477":"We can see an empty value in TotalCharges, let's check it","750e640b":"We can see that customers who chose the monthly payment type are leaving the company to a greater extent. Almost half of all clients who chose the \"monthly\" payment type chose to leave the company. Although, in principle, this type of payment is the most popular. This is probably due to the size of the monthly payments. You can also see that there is also a small churn among clients who have entered into a contract for 1-2 years (periodicity of payments). At the same time, despite the fact that the total number of customers who chose the payment method once every 1 or 2 years is approximately the same, the customers who chose the payment method \"once every 2 years\" leave much more slowly. Here, both the total amount of payment, in terms of monthly payments, and the fact that the term of their contract has not expired can play a role, and we can only record the fact of a customer churn after 6 months of no payment.\nFirst, let's examine how the size of monthly payments influenced the fact of the client's departure:","68db2de0":"Let's split data to features and target","9b67e483":"let's check data in columns","ac4f0ae0":"# File opening","9a1bca12":"**Standartization**","f5ca4d1d":"let's drop useless info","df8dd86b":"**Conclusion**\nThey found that a significant proportion of customers who left were new customers, as well as customers who use fiber services and prefer the monthly payment type, as well as customers who have a high monthly payment. If new customers leave who choose a particular service, then it is necessary to analyze the price \/ quality ratio for this service, or the prices offered by the market: it is quite possible that they tend to decrease, and the business does not react quickly enough to this.","a5698745":"# Model Train and Test","d3f23f4f":"All customerID's are unique","3f5e31d7":"Tenure = 0 for that rows, that means that clients are new. fill the gaps by 0","19cff217":"### Analysis of customer behavior depending on the type of services used","0998a1db":"As you can see, in fact, the share of those whose monthly payments is quite high (from 70) prevails among the departed clients, while among the remaining clients there are more and more those who have small monthly payments, so monthly costs played a role. However, the amount of monthly payments may also depend on the number of services provided.\n\nWe saw that among those customers who canceled the contract, the largest number of customers with the Month-to month payment type. However, I would like to understand which clients prevail in this case: new ones or those who have been with the company for a long time.","163ddee9":"We don't need CustomerID","8bfd11e2":"Best model - CatBoostClassifier","3795f313":"All the meanings are OK","ffc0d0da":"let's get to DataFrames for analysis","66fdcd51":"# Analysis","e61614a7":"We can see that most often the customers leave who use the Electronic check payment type. The number of clients who left in this way is almost equal to the number of those who remain. Moreover, this method is the most popular. However, when compared with such methods as bank transfer and credit card, it is probably less convenient, but more controlled by the client himself (it is not automatic), perhaps that is why he is chosen more often than others. All other methods are about the same in popularity, and there is much less customer churn.","b4031061":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043e\u043f\u043b\u0430\u0442\u044b","ac936720":"**Train and test split**","e25a0ad8":"Consider what services were used by clients who left the company","9cdd10f3":"We saw earlier that there are quite a few indications associated with the use of additional Internet services. The influence of each of them on the target feature is not too great, but I would like to leave the fact of using these features in the model. To do this, we will create one common feature - the number of additional services, correlation between them is too strong. And we will remove these signs themselves.","316127e9":"You can see a clear class disbalance. 26.5% of customers have completed their interactions with the company.","7296cbd8":"As you can see, the largest share of abandoned customers are those using telephony and fiber optic services. Moreover, almost half of all clients using these services have left the company. Even for DSL customers, the churn rate is low. The question is why customers using fiber optic line are leaving so actively. It may be worth analyzing the competitive market value and quality of the services provided. Moreover, considering that the most active churn is from new customers using Month-to-month payments, then, most likely, the issue is precisely the price \/ quality ratio (if the price were not attractive enough, new customers would not come). Moreover, if we consider that among customers using telephone services (both with one and several lines), but not using Internet services, the percentage outflow is rather weak, then we can assume that the issue is mostly in the quality of fiber-optic services. communication.\n\nLet's consider if there is a correlation between the target attribute and the fact of using the services:","1bec1f7a":"You can see that a significant proportion of churn for customers using the Electronic check payment method are new customers (there are even more of them than new customers with this type of payment remaining in the company), there are also a lot of new customers among customers using Mailed Check. who chose to get away from cooperation. However, among the clients using the bank transfer or credit card payment type, the majority are those who have been with the company for a long time. Among such customers, the churn of \"newcomers\" is also noticeable, but in general it is lower than with other payment methods. And, in principle, there is a tendency that new customers prefer Electronic check or Mailed Check, they are not very interested in methods with auto payments. They are probably more cautious, and do not want to automate such an item of expenditure, especially when they are not yet sure whether they will remain.","33caa94b":"### Analysis of customer behavior depending on the type of payment","d03edf7e":"**Users behaviour analysis**","601c530e":"Let's compare the distributions of categorical variables for all clients and for clients who have completed their contracts (departed clients)","aec1c9ab":"Let's understand Churn percent","5dbfb2f4":"As you can see from the graph, new customers prevail among leaving customers, especially among those with the Month-to-month payment type. Moreover, among the newest customers there are more leaving than the remaining ones. However, among the clients who pay once a year or once every 2 years, those who have been a client of the company for the longest leave more often, but their total number is still much less than those who stayed. At the same time, one can also see that among the clients who conclude a contract for a long term \"there are more of those who have been with the company for a long time (more than 4 years), but fewer and fewer new clients conclude a contract for a long term."}}