{"cell_type":{"d30dfe84":"code","7e0c82a4":"code","7012688e":"code","e9aca297":"code","511b0983":"code","f1c386a0":"code","76dd6d7f":"code","d61013e8":"code","13cbad11":"code","4aa2a10b":"code","fcd627fc":"code","80e11c7d":"code","e7367149":"code","eae3048f":"code","0127bb65":"code","e1bde4d4":"code","e58fab1d":"code","5c43f748":"code","811df9f9":"code","7f86e285":"code","bb2787f0":"code","65d39a27":"code","5ee82565":"code","9395d0ad":"code","2ecd05d2":"code","75abb405":"code","77a9ad6c":"code","80e794eb":"code","759e2360":"code","9309678d":"code","c7cb131c":"code","ae32bcd5":"code","0b015127":"code","f3fad82e":"code","85a4736b":"code","6484f087":"code","531a2e55":"code","04768d68":"code","e8d11bce":"code","3e85fb37":"code","1a246fd7":"code","f62bc2dc":"code","b7bd6e67":"code","dd29abd2":"code","a2aaed85":"code","dbef2b51":"code","d39c2042":"code","a369716c":"code","f08c4f84":"code","f7eb697f":"code","4518fda6":"code","b6eee550":"code","ff133eff":"code","195168f3":"code","bca320a0":"code","20ce6128":"code","a38a7eda":"code","564a0afd":"code","1d59ef87":"code","0149573b":"code","c614667e":"code","92250648":"code","fc318104":"code","eb997a92":"code","bc66c66a":"code","a86036e6":"code","48ae493e":"code","61453064":"code","4f422631":"code","40ddebf7":"code","6ea74f55":"code","6f26a9ac":"code","d43eff9e":"code","668d5185":"code","350ed7cc":"code","4ee1ebcc":"code","bd618598":"code","889bf62a":"code","463f90e6":"code","d06a4f75":"code","48e02ade":"code","a34ff716":"code","9027f184":"code","3d646e6b":"code","88d14788":"code","17725626":"code","69a4a19b":"code","fcef5e28":"code","89c79a45":"code","650dc742":"code","f096653d":"code","76158f50":"code","449d6534":"code","9ffd7139":"code","66915594":"code","5d15f418":"code","550b3296":"code","a94132fc":"code","fe5167a4":"code","e8926f2c":"code","8b850e82":"code","4c4f04e7":"code","1cc38538":"code","87ada450":"code","27a789c5":"code","e2831a66":"code","c44c3594":"code","46288963":"code","669d1a7b":"code","84d5a98e":"code","5ee1dc3d":"code","522f1d8e":"code","f349561f":"code","e623c9bd":"code","98c889ec":"code","8e0a6851":"code","4e4ff9ac":"code","6de9307c":"code","74240e28":"code","0c529b29":"code","3f2e1a2f":"code","1dde3d2a":"code","e92053e5":"code","a35aef0d":"code","bb132b4f":"code","3a0db57a":"code","37ca5e75":"code","5ba8613e":"code","fdc654e7":"code","68504e82":"code","bd1cd32c":"code","4237ec31":"code","e565b96e":"code","171bfd31":"code","641808e0":"code","1b3f798b":"code","328f094b":"code","4048eaba":"code","4178051a":"code","50875841":"code","fb098941":"code","9a158da8":"markdown","bb19699b":"markdown","8d78291a":"markdown","ed4c72ca":"markdown","f239de6d":"markdown","18a1ba62":"markdown","e19181cb":"markdown","54e6ff66":"markdown","a06d7d78":"markdown","55aae1cc":"markdown","a563236b":"markdown","7495f066":"markdown","f99c04fe":"markdown","a27863a8":"markdown"},"source":{"d30dfe84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7e0c82a4":"titanic_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntitanic_data.head(50)","7012688e":"test_data=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data","e9aca297":"test_data.Cabin.isnull().sum()","511b0983":"example_data=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nexample_data.head(50)","f1c386a0":"training_data=titanic_data.copy()\n","76dd6d7f":"training_data.dtypes\n","d61013e8":"training_data.shape","13cbad11":"len(training_data['PassengerId'].unique())==len(training_data['PassengerId'].values)\n    ","4aa2a10b":"training_data.isnull().sum()","fcd627fc":"missing_fraction=(training_data['Age'].isnull().sum()\/len(training_data['Age']))*100\nmissing_fraction","80e11c7d":"import seaborn as sns\nsns.boxplot('Survived', 'Age', data=training_data)","e7367149":"sns.pairplot(training_data)","eae3048f":"matrix=training_data.corr()\nprint(matrix)","0127bb65":"training_data['Cabin'].unique()","e1bde4d4":"training_data.drop('PassengerId',inplace=True,axis=1)","e58fab1d":"training_data","5c43f748":"import string\ndef substrings_in_string(big_string, substrings):\n    for substring in substrings:\n        if big_string.find( substring) != -1:\n            return substring\n    print (big_string)\n    return np.nan","811df9f9":"title_list=['Mrs', 'Mr', 'Master', 'Miss', 'Major', 'Rev',\n                    'Dr', 'Ms', 'Mlle','Col', 'Capt', 'Mme', 'Countess',\n                    'Don', 'Jonkheer']","7f86e285":"training_data['Title']=training_data['Name'].map(lambda x: substrings_in_string(x, title_list))","bb2787f0":"def replace_titles(x):\n    title=x['Title']\n    if title in ['Don', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col']:\n        return 'Mr'\n    elif title in ['Countess', 'Mme']:\n        return 'Mrs'\n    elif title in ['Mlle', 'Ms']:\n        return 'Miss'\n    elif title =='Dr':\n        if x['Sex']=='Male':\n            return 'Mr'\n        else:\n            return 'Mrs'\n    else:\n        return title\ntraining_data['Title']=training_data.apply(replace_titles, axis=1)","65d39a27":"training_data['Family_Size']=training_data['SibSp']+training_data['Parch']","5ee82565":"training_data['Age*Class']=training_data['Age']*training_data['Pclass']","9395d0ad":"training_data['Fare_Per_Person']=training_data['Fare']\/(training_data['Family_Size']+1)","2ecd05d2":"cabin_list = ['A', 'B', 'C', 'D', 'E', 'F', 'T', 'G', 'Unknown']\ntraining_data['Deck']=training_data['Cabin'].map(lambda x: substrings_in_string(str(x), cabin_list))","75abb405":"def feature_engineering(data):\n    data['Title']=data['Name'].map(lambda x: substrings_in_string(x, title_list))\n    data['Title']=data.apply(replace_titles, axis=1)\n    data['Family_Size']=data['SibSp']+data['Parch']\n    data['Age*Class']=data['Age']*data['Pclass']\n    data['Fare_Per_Person']=data['Fare']\/(data['Family_Size']+1)\n    data['Deck']=data['Cabin'].map(lambda x: substrings_in_string(str(x), cabin_list))\n    return data","77a9ad6c":"training_data","80e794eb":"print(training_data.corr())","759e2360":"training_data.drop(['Name','Cabin'],inplace=True,axis=1)\ntraining_data","9309678d":"error_fares=training_data['Fare'][training_data['Fare']==0.0000]\nindexes=error_fares.index\nindexes","c7cb131c":"for index in indexes:\n    training_data.drop([index],axis=0,inplace=True)\n    \n","ae32bcd5":"checking_errors=training_data['Fare'][training_data['Fare']==0.0000]\nchecking_errors","0b015127":"identifying_missing_decks=pd.concat([training_data['Fare_Per_Person'],training_data['Deck']],axis=1)","f3fad82e":"identifying_missing_decks","85a4736b":"for_a=identifying_missing_decks[identifying_missing_decks['Deck']=='A']\nfor_a","6484f087":"average_fare_for_a=for_a['Fare_Per_Person'].mean()","531a2e55":"for_b=identifying_missing_decks[identifying_missing_decks['Deck']=='B']\nfor_b","04768d68":"average_fare_for_b=for_b['Fare_Per_Person'].mean()","e8d11bce":"for_c=identifying_missing_decks[identifying_missing_decks['Deck']=='C']\nfor_c","3e85fb37":"average_fare_for_c=for_c['Fare_Per_Person'].mean()\naverage_fare_for_c","1a246fd7":"'D', 'E', 'F', 'T', 'G'","f62bc2dc":"for_d=identifying_missing_decks[identifying_missing_decks['Deck']=='D']\naverage_fare_for_d=for_d['Fare_Per_Person'].mean()","b7bd6e67":"average_fares=[]\nfor string in cabin_list:\n    for_deck=identifying_missing_decks[identifying_missing_decks['Deck']==string]\n    average_fare_for_deck=for_deck['Fare_Per_Person'].mean()\n    average_fares.append(average_fare_for_deck)","dd29abd2":"average_fares","a2aaed85":"identify_missing_decks1=pd.concat([training_data['Fare'],training_data['Deck']],axis=1)","dbef2b51":"average_fares1=[]\nfor string in cabin_list:\n    for_deck=identify_missing_decks1[identify_missing_decks1['Deck']==string]\n    average_fare_for_deck=for_deck['Fare'].mean()\n    average_fares1.append(average_fare_for_deck)","d39c2042":"average_fares1","a369716c":"\nfor string in cabin_list:\n    for_deck=identify_missing_decks1[identify_missing_decks1['Deck']==string]\n    print(for_deck['Fare'].describe())","f08c4f84":"identifying_missing_decks_by_fare=training_data[['Fare','Deck']]\nidentifying_missing_decks_by_fare","f7eb697f":"identifying_missing_decks_by_fare['Deck'].replace(to_replace=['F','G'],value='low',inplace=True)\nidentifying_missing_decks_by_fare['Deck'].replace(to_replace=['A','E'],value='medium',inplace=True)\nidentifying_missing_decks_by_fare['Deck'].replace(to_replace='D',value='medium_high',inplace=True)\nidentifying_missing_decks_by_fare['Deck'].replace(to_replace=['B','C'],value='high',inplace=True)        \n","4518fda6":"\nidentifying_missing_decks_by_fare","b6eee550":"quality_list=['low','medium','medium_high','high']\nfor string in quality_list:\n    for_deck=identifying_missing_decks_by_fare[identifying_missing_decks_by_fare['Deck']==string]\n    print(for_deck['Fare'].describe())\n","ff133eff":"t=identifying_missing_decks_by_fare[identifying_missing_decks_by_fare['Deck']=='T']\nt.index","195168f3":"identifying_missing_decks_by_fare.drop(t.index,axis=0,inplace=True)","bca320a0":"training_data.drop(t.index,axis=0,inplace=True)","20ce6128":"identifying_missing_decks_by_fare['Deck'].unique()","a38a7eda":"identifying_missing_decks_by_fare.reset_index(inplace=True)","564a0afd":"identifying_missing_decks_by_fare.drop(['index'],axis=1,inplace=True)","1d59ef87":"for i in range(len(identifying_missing_decks_by_fare)):\n    fare=identifying_missing_decks_by_fare['Fare'][i]\n    if identifying_missing_decks_by_fare['Deck'][i] is np.nan:\n        if fare<=26:\n            identifying_missing_decks_by_fare['Deck'][i]='low'\n        elif fare>26 and fare<=55:\n            identifying_missing_decks_by_fare['Deck'][i]='medium'\n        elif fare>55 and fare<=75:\n            identifying_missing_decks_by_fare['Deck'][i]='medium_high'\n        if fare>75:\n            identifying_missing_decks_by_fare['Deck'][i]='high'\n    else:\n        identifying_missing_decks_by_fare['Deck'][i]=identifying_missing_decks_by_fare['Deck'][i]","0149573b":"identifying_missing_decks_by_fare","c614667e":"training_data","92250648":"first_class=training_data[training_data['Pclass']==1]\nfirst_class","fc318104":"unknown_values=first_class[first_class['Deck'].isna()]\nunknown_values","eb997a92":"unknown_values['Deck'].value_counts()","bc66c66a":"unknown_values['Deck'].isnull().sum()","a86036e6":"training_data[training_data['Deck'].isna()]","48ae493e":"test_data","61453064":"test_for_decks=test_data.copy()","4f422631":"test_for_decks['Deck']=test_for_decks['Cabin'].map(lambda x: substrings_in_string(str(x), cabin_list))","40ddebf7":"class_1_test=test_for_decks[test_for_decks['Pclass']==1]","6ea74f55":"class_1_test","6f26a9ac":"class_1_test['Deck'].value_counts()","d43eff9e":"class_1_test['Deck'].isnull().sum()","668d5185":"first_class\n","350ed7cc":"first_class.isnull().sum()","4ee1ebcc":"first_class.dropna(subset=['Deck'],axis=0,inplace=True)","bd618598":"first_class['Deck'].isnull().sum()","889bf62a":"first_class.corr()","463f90e6":"first_class.drop(['Pclass','Age','SibSp','Parch','Ticket'],axis=1,inplace=True)","d06a4f75":"first_class","48e02ade":"first_class.drop(first_class[first_class['Embarked'].isna()].index,axis=0,inplace=True)","a34ff716":"first_class.isnull().sum()","9027f184":"train_1_class=first_class.iloc[:,1:]\ntest_1_class=first_class['Survived']","3d646e6b":"from sklearn.preprocessing import OneHotEncoder,StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\n\ncategorical=['Sex','Title','Deck','Embarked']\n\nnumerical=['Fare','Family_Size','Age*Class','Fare_Per_Person']\npipeline=Pipeline([\n    ('imputer',SimpleImputer(strategy='median')),\n    ('std_scaler',StandardScaler()),\n])\n\nfrom sklearn.compose import ColumnTransformer\n\nfull_pipeline=ColumnTransformer([\n    ('num',pipeline,numerical),\n    ('cat',OneHotEncoder(),categorical)\n])\n\nprepared_data_for_first_class=full_pipeline.fit_transform(train_1_class)","88d14788":"prepared_data_for_first_class","17725626":"from sklearn import svm\nparameters={'gamma' : ['auto','scale'],'C' : [0.1, 1, 10],'degree' : [0, 1, 2, 3, 4, 5, 6]}\nsvc=svm.SVC()\nfrom sklearn.model_selection import GridSearchCV\nclf=GridSearchCV(svc,parameters,cv=2)\nclf.fit(prepared_data_for_first_class,test_1_class)            ","69a4a19b":"clf.best_estimator_","fcef5e28":"svc_for_1_class=svm.SVC(C=1,degree=0,gamma='auto')\nsvc_for_1_class.fit(prepared_data_for_first_class,test_1_class)","89c79a45":"from sklearn.metrics import accuracy_score,confusion_matrix\naccuracy_score(test_1_class, svc_for_1_class.predict(prepared_data_for_first_class))","650dc742":"confusion_matrix(test_1_class, svc_for_1_class.predict(prepared_data_for_first_class))","f096653d":"from sklearn.metrics import precision_score,recall_score,f1_score\nprint(precision_score(test_1_class, svc_for_1_class.predict(prepared_data_for_first_class)))\nprint(recall_score(test_1_class, svc_for_1_class.predict(prepared_data_for_first_class)))\nprint(f1_score(test_1_class, svc_for_1_class.predict(prepared_data_for_first_class)))","76158f50":"other_classes=training_data[training_data['Pclass']!=1]\nother_classes.isnull().sum()\n","449d6534":"other_classes['Deck'].value_counts()","9ffd7139":"other_classes=other_classes[other_classes['Deck'].isna()]\nother_classes","66915594":"other_classes.drop(['Deck'],axis=1,inplace=True)","5d15f418":"test=other_classes['Survived']\nother_classes.drop(['Survived'],axis=1,inplace=True)","550b3296":"other_classes.drop(['Age*Class'],axis=1,inplace=True)\nimputer=SimpleImputer(strategy='median')\nother_classes['Age']=imputer.fit_transform(other_classes['Age'].values.reshape(-1,1))\nother_classes['Age*Class']=other_classes['Age']*other_classes['Pclass']","a94132fc":"other_classes.drop(['Pclass','Age','Ticket','SibSp','Parch'],axis=1,inplace=True)","fe5167a4":"other_classes","e8926f2c":"\nnumerical=['Fare','Family_Size','Age*Class','Fare_Per_Person']\ncategorical=['Sex','Title','Embarked']\nfull_pipeline=ColumnTransformer([\n    ('num',pipeline,numerical),\n    ('cat',OneHotEncoder(),categorical)\n])\nother_classes_prepared=full_pipeline.fit_transform(other_classes)","8b850e82":"parameters={'gamma' : ['auto','scale'],'C' : [0.1, 1, 10,15,20],'degree' : [0, 1, 2, 3, 4, 5, 6]}","4c4f04e7":"svc5=svm.SVC()\nclf5=GridSearchCV(svc,parameters,cv=3)\nclf5.fit(other_classes_prepared,test)   ","1cc38538":"clf5.best_estimator_","87ada450":"svc_for_other_class=svm.SVC(C=10,degree=0,gamma='auto')\nsvc_for_other_class.fit(other_classes_prepared,test)","27a789c5":"accuracy_score(test, svc_for_other_class.predict(other_classes_prepared))","e2831a66":"test_data","c44c3594":"passengers=test_data['PassengerId']\n","46288963":"test_data=feature_engineering(test_data)","669d1a7b":"test_data.isnull().sum()","84d5a98e":"test_data_for_1_class=test_data[test_data['Pclass']==1]","5ee1dc3d":"test_data_for_1_class","522f1d8e":"test_data_for_1_class.isnull().sum()","f349561f":"test_data_for_1_class.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)","e623c9bd":"test_data_for_1_class['Deck'].value_counts()","98c889ec":"print(35\/sum(test_data_for_1_class['Deck'].value_counts()))\nprint(18\/sum(test_data_for_1_class['Deck'].value_counts()))\nprint(11\/sum(test_data_for_1_class['Deck'].value_counts()))\nprint(9\/sum(test_data_for_1_class['Deck'].value_counts()))\nprint(7\/sum(test_data_for_1_class['Deck'].value_counts()))","8e0a6851":"test_data_for_1_class['Deck'].replace(to_replace=[np.nan],value=np.random.choice(a=['C','B','D','E','A'],p=[0.4375,0.225,0.1375,0.1125,0.0875]),inplace=True)","4e4ff9ac":"test_data_for_1_class['Deck'].isnull().sum()","6de9307c":"test_data_for_1_class.drop(['Pclass','SibSp','Parch','Age'],inplace=True,axis=1)\ntest_data_for_1_class","74240e28":"test_data_for_1_class.index","0c529b29":"categorical=['Sex','Title','Deck','Embarked']\n\nnumerical=['Fare','Family_Size','Age*Class','Fare_Per_Person']\npipeline=Pipeline([\n    ('imputer',SimpleImputer(strategy='median')),\n    ('std_scaler',StandardScaler()),\n])\n\n\n\nfull_pipeline=ColumnTransformer([\n    ('num',pipeline,numerical),\n    ('cat',OneHotEncoder(),categorical)\n])\n\ntest_1_class=full_pipeline.fit_transform(test_data_for_1_class)","3f2e1a2f":"predicted_for_1_class=svc_for_1_class.predict(test_1_class)","1dde3d2a":"type(predicted_for_1_class)\n","e92053e5":"other_classes_test=test_data[test_data['Pclass']!=1]","a35aef0d":"other_classes_test.isnull().sum()","bb132b4f":"other_classes_test.drop(['Deck'],axis=1,inplace=True)","3a0db57a":"other_classes_test.drop(['Age*Class'],axis=1,inplace=True)\nimputer=SimpleImputer(strategy='median')\nother_classes_test['Age']=imputer.fit_transform(other_classes_test['Age'].values.reshape(-1,1))\nother_classes_test['Age*Class']=other_classes_test['Age']*other_classes_test['Pclass']","37ca5e75":"other_classes_test","5ba8613e":"other_classes_test.drop(['PassengerId','Pclass','Age','Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)\nother_classes_test","fdc654e7":"numerical=['Fare','Family_Size','Age*Class','Fare_Per_Person']\ncategorical=['Sex','Title','Embarked']\nfull_pipeline=ColumnTransformer([\n    ('num',pipeline,numerical),\n    ('cat',OneHotEncoder(),categorical)\n])\nother_classes_prepared_test=full_pipeline.fit_transform(other_classes_test)","68504e82":"predicted_test_other_class=svc_for_other_class.predict(other_classes_prepared_test)","bd1cd32c":"test_other=pd.Series(predicted_test_other_class)\ntest_1=pd.Series(predicted_for_1_class)","4237ec31":"test_1.index=test_data_for_1_class.index","e565b96e":"test_1","171bfd31":"test_other.index=other_classes_test.index","641808e0":"test_other","1b3f798b":"predicted=pd.concat([test_other,test_1],axis=0)\n\n\npredicted","328f094b":"predicted.sort_index(inplace=True)\npredicted","4048eaba":"predicted=predicted.to_frame()\ndataframe=pd.concat([passengers,predicted],axis=1)\ndataframe\n","4178051a":"def preprocess_the_data(data):\n    ","50875841":"def check_accuracy_of_model(model,number_of_cv):\n    ","fb098941":"def apply_model_to_test_data(model,test_data)\n    ","9a158da8":"**THERE IS SOMETHING UNFITTED.I FORGET SOME THINGS: FIRST THING IS MULTICORRINEARITY(IF I WANT TO ADD DECKS,I SHOULD DROP FARE FEATURE,WHICH IS NOT A GOOD OPTION).SECOND ONE IS DEPENDENCE(CHOICE OF DECKS CAN BE DEPENDENT ALSO ON THE NUMBER OF RELATIVES AND SIZE OF FAMILY,SO DOING REGRESSION,WE CAN DETERMINE DECKS,BUT WE SHOULD DROP NOT ONLY FARE,BUT ALSO FEATURES,RELATED TO PERSONAL INFORMATION).AND THE THIRD ONE IS UNCLEARITY OF INFORMATION ABOUT DECKS.WHAT I MEAN BY UNCLEARITY?SOME DECKS WERE NOT DEPENDENT ON THE SIZE OF FARE,AND DECKS CAN ALSO BE DEPENDENT ON TICKET NUMBER,SO I THINK THAT I MUST START AGAIN THIS JOURNEY OF REPLACING NAN'S,BECAUSE IT IS NOTICEABLE THAT MAJORITY OF PEOPLE IN THIS COMPETITION DID NOT USE DECK COLUMN AS A PREDICTOR VARIABLE,AND ALSO THAT DECK CAN CONTAIN SOME VALUABLE PATTERNS IN DATA. **","bb19699b":"This approach more spreader in terms of results,than previous one.\nBut the mean itself will not be enough so let me compare standard deviations as well","8d78291a":"price <26-low.price>26 but <55-medium.>55 but <75 medium-high.>75-high.","ed4c72ca":"A,D,E,T are almost the same.Lets check the difference in fares themselves\n","f239de6d":"WHAT CAN WE DO HERE IS JUST SPLITTING DATASET INTO TWO MINI-DATASETS:NAN VALUES IN FIRST CLASS WILL BE DROPPED,AND DECK WILL BE USED AS A FEATURE,AND OTHER MINI-DATASET WILL INCLUDE 2 AND 3 CLASS PASSENGERS,BUT WHOLE DECK FEATURE WILL BE DROPPED.","18a1ba62":"precision score is great,and this is good,because it is more important to care about false positives,rather than false negatives ","e19181cb":"THERE ARE NO DUPLICATES,WHICH MEANS THAT EVERY CASE IS UNIQUE","54e6ff66":"THERE IS NO CONNECTION BETWEEN TICKET AND DECKS(LOOKING THROUGH TICKET WE CAN NOT PREDICT THE CATEGORY OF DECK)","a06d7d78":"FALSE NEGATIVE(WHEN ACTUAL RESULT IS 0,BUT MODEL SHOWS 1)IS MORE OF A CONCERN,THAN FALSE POSITIVE(ACTUAL-1,MODEL-0).SO RECALL WILL BE MORE PRIORITIZED THAN PRECISION.","55aae1cc":"THATS ALL.DATAFRAME IS CREATED.NOW IT IS TIME FOR AS MUCH AUTOMATIZATION AS POSSIBLE","a563236b":"it will be good if we remove some types of decks due to the lack of data,and combine known decks as:low,medium,and high quality decks.B and C seem to us as high(combine them),A and E medium,F and G low,and D between medium and high.T should be deleted because there is only one who purchased it.","7495f066":"LOTS OF CASES DO NOT CONTAIN INFO ABOUT CABIN,AND ALMOST 20% OF AGE INFO IS MISSED","f99c04fe":"***SO LETS TAKE A LOOK TO OTHER CLASSES***","a27863a8":"LETS TAKE A LOOK TO DECISION TREE AND RANDOM FOREST AND HOW IT WILL PERFORM"}}