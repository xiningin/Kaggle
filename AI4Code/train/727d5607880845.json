{"cell_type":{"896f2b44":"code","6741eacb":"code","6002b07f":"code","a50de130":"code","56ea8b58":"code","de53965e":"code","2b99794f":"code","d85e58f5":"code","d6563df5":"code","5813c2b0":"code","50a85bec":"code","db9a22d2":"code","da82c374":"code","225dc8ae":"code","e36c14c6":"code","e52a300b":"code","99d11949":"code","5d53e5d2":"code","c5e6601c":"code","9b06d775":"code","d310fd23":"code","a536edc0":"code","e3d0526d":"code","7fea65c3":"code","ff58195f":"code","49733ce5":"code","e2203a66":"code","21c75782":"code","59d1f925":"code","ddad146b":"markdown","829764c1":"markdown","b044b6af":"markdown","33a707ae":"markdown","24ffc1c5":"markdown","e2dae04a":"markdown","0687ae5b":"markdown","a6773bf7":"markdown","ecbf8013":"markdown","b0c02058":"markdown","cf664371":"markdown","71efab14":"markdown","38612e90":"markdown","3139e9a3":"markdown","e1954da3":"markdown","a3f87b56":"markdown","900bdd0f":"markdown","1f8285ae":"markdown","cfbb4750":"markdown"},"source":{"896f2b44":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt","6741eacb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","6002b07f":"stock_data = pd.read_csv('\/kaggle\/input\/google-data-historic-dataset\/GOOGL.csv')","a50de130":"stock_data.head()","56ea8b58":"# Shape of the data\nstock_data.shape","de53965e":"# Making training and test data\ndata_training = stock_data[stock_data['Date']<'2019-01-01'].copy()\ndata_test = stock_data[stock_data['Date']>='2019-01-01'].copy()\n\n# This will sound confusing right now. Just wait.\ndata_train = data_training.copy()","2b99794f":"# Dropping 'Date' and 'Adj Close'\ndata_training = data_training.drop(['Date', 'Adj Close'], axis = 1)","d85e58f5":"print(data_training.shape)\nprint(data_test.shape)","d6563df5":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()","5813c2b0":"# Scaling the training data\ndata_training = sc.fit_transform(data_training)","50a85bec":"data_training","db9a22d2":"X_train = []\ny_train = []\n\nfor i in range(60, data_training.shape[0]):\n    X_train.append(data_training[i-60:i])\n    y_train.append(data_training[i, 0])\n    \nX_train, y_train = np.array(X_train), np.array(y_train)","da82c374":"print(X_train.shape)\nprint(y_train.shape)","225dc8ae":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM, Dropout","e36c14c6":"regressor = Sequential()","e52a300b":"regressor = Sequential()\n\nregressor.add(LSTM(units = 60, activation = 'relu', return_sequences = True, input_shape = (X_train.shape[1], 5)))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 60, activation = 'relu', return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 80, activation = 'relu', return_sequences = True))\nregressor.add(Dropout(0.2))\n\nregressor.add(LSTM(units = 120, activation = 'relu'))\nregressor.add(Dropout(0.2))\n\nregressor.add(Dense(units = 1))","99d11949":"regressor.summary()","5d53e5d2":"regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')","c5e6601c":"regressor.fit(X_train, y_train, epochs = 50, batch_size = 32)","9b06d775":"data_test.head()","d310fd23":"past_60_days = data_train.tail(60)","a536edc0":"df = past_60_days.append(data_test, ignore_index = True)\ndf = df.drop(['Date', 'Adj Close'], axis = 1)\ndf.head()","e3d0526d":"# Scaling test data\ninputs = sc.transform(df)\ninputs","7fea65c3":"X_test = []\ny_test = []\n\nfor i in range(60, inputs.shape[0]):\n    X_test.append(inputs[i-60:i])\n    y_test.append(inputs[i, 0])\n\nX_test, y_test = np.array(X_test), np.array(y_test)\nX_test.shape, y_test.shape","ff58195f":"y_pred = regressor.predict(X_test)","49733ce5":"sc.scale_","e2203a66":"scale = 1\/8.18605127e-04\nscale","21c75782":"y_pred = y_pred*scale\ny_test = y_test*scale","59d1f925":"# Visualising the results\nplt.figure(figsize=(14,5))\nplt.plot(y_test, color = 'red', label = 'Real Google Stock Price')\nplt.plot(y_pred, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","ddad146b":"### Importing keras libraries","829764c1":"past_60_days contains the data of the past 60 days required to predict the opening of the 1st day in the test data set.","b044b6af":"### Prepare test data","33a707ae":"## ***Making the predictions and visualizing the results***","24ffc1c5":"### Loading the data","e2dae04a":"Do upvote if you liked this notebook","0687ae5b":"We are going to append data_test to past_60_days and ignore the index of data_test and drop Date and Adj Close.","a6773bf7":"![image.png](attachment:image.png)","ecbf8013":"### Importing the libraries","b0c02058":"### Compiling the RNN","cf664371":"### Splitting training_data into X_train and y_train\nWe are going to train the model on data of 60 days at a time. So the code mentioned below divides the data into chunks of 60 rows.","71efab14":"### *In this tutorial I am using LSTM-RNN to predict the prices of Google Stocks from Google Stock Data (August 2004 to September 2020)*\n\n***The dataset consists of 7 columns which contain the date, opening price, highest price, lowest price, closing price, adjusted closing price and volume of share for each day.***\n","38612e90":"## ***Building the RNN***","3139e9a3":"### Initializing the RNN","e1954da3":"## ***Data Processing***","a3f87b56":"### Feature scaling\nLet's do some scaling on the data to convert it into a similar scale.\nHere, I am using Min-Max Scaler, you can do other scaling techniques as well.","900bdd0f":"### Fitting the RNN to the training set","1f8285ae":"As we can see X_train now consists of 3557 chunks of data having 60 lists each and each list has 5 elements which correspond to the 5 attributes in the dataset.","cfbb4750":"### Creating the data in suitable format to feed to our LSTM model"}}