{"cell_type":{"0b900be5":"code","39794255":"code","f0065f14":"code","a9235480":"code","7decd059":"code","c5d96c63":"code","bffe6074":"code","522c34c3":"code","26528bba":"code","39feb61d":"code","74ad3d8b":"code","ac6874ad":"code","dfcc1080":"code","a293a16b":"code","98b094ec":"code","e7646dde":"code","797e96a1":"code","a670b39b":"code","f9c60c8c":"code","46b55dc2":"code","3e70ec38":"code","74164dee":"code","6c73e89e":"code","ee12c8af":"code","1de79375":"code","59b36d74":"code","1deb5793":"code","0a1ed21e":"code","e0186b6e":"code","062cbeb1":"code","4825b015":"code","a0f457c0":"code","72bf81ef":"code","34f1f802":"code","4ab1190d":"code","97c493ba":"code","bab8fd2a":"code","0cbdec68":"code","080e76a4":"code","3be3ee6c":"code","06b11a29":"code","ce8e2dd8":"code","ac108fe9":"code","c4901060":"code","a2740e7b":"code","e8e4ba31":"code","83d4ba11":"code","bfff8c89":"code","64a484d3":"code","d0eb58b8":"code","bf9badab":"code","2268aae9":"code","53b8691f":"code","49bd7cc4":"code","6a4033ad":"code","c58e2ccf":"code","a7493d7a":"code","6feaa9b0":"code","070ce9d4":"code","1221217b":"code","db202450":"code","cb3dbbf5":"code","a54e7c52":"code","3ff5993b":"code","3a3e8554":"code","79d479eb":"code","e6ea42c5":"code","7886ad9a":"markdown"},"source":{"0b900be5":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n\nfrom sklearn.model_selection import train_test_split\n#from sklearn.preprocessing import OneHotEncoder\nfrom xgboost import XGBRegressor,XGBClassifier\n#from sklearn.impute import SimpleImputer\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# combined_products = pd.concat([gaming_products, movie_products])\n# if to combine two dataset refer above code_line\n\n\n\n\n\n","39794255":"train_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data","f0065f14":"test_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data","a9235480":"print(len(train_data))","7decd059":"train_results = train_data[\"Survived\"].copy()\ntrain_data.drop(\"Survived\", axis=1, inplace=True, errors=\"ignore\")\ntitanic = pd.concat([train_data, test_data])\ntraindex = train_data.index\ntestdex = test_data.index","c5d96c63":"titanic","bffe6074":"titanic[titanic['Cabin']=='B51 B53 B55']\n#the 2nd person is probably a false one","522c34c3":"titanic.index=range(len(titanic))\n","26528bba":"titanic","39feb61d":"# titanic=titanic.drop(['Cabin'],axis=1)\n#cabin has 600+ null entries , so it will increase noise hence drop it\n","74ad3d8b":"titanic.info()","ac6874ad":"titanic[pd.isnull(titanic['Fare'])]","dfcc1080":"mean=titanic[titanic['Pclass']==3][titanic['Embarked']=='S'][titanic['Sex']=='male'][titanic['Age']>=40][titanic['SibSp']==0][titanic['Parch']==0]\nmean['Fare'].describe()","a293a16b":"titanic[['Fare']]=titanic[['Fare']].fillna(value=7.69)","98b094ec":"titanic.isnull().sum()","e7646dde":"\n\ntitanic[\"Title\"] = titanic.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(titanic['Title'], titanic['Sex'])\n\n","797e96a1":"\n\ntitanic['Title'] = titanic['Title'].replace('Mlle', 'Miss')\ntitanic['Title'] = titanic['Title'].replace('Ms', 'Miss')\ntitanic['Title'] = titanic['Title'].replace('Mme', 'Mrs')\n\n","a670b39b":"titanic['Title'] = titanic['Title'].replace(['Lady', 'Countess','Capt','Col','Don', 'Dr', 'Major','Rev', 'Sir', 'Jonkheer', 'Dona'], 'Not married')","f9c60c8c":"titanic['Title'] = titanic['Title'].replace(['Mr', 'Mrs'], 'Married')","46b55dc2":"pd.crosstab(titanic['Title'], titanic['Sex'])","3e70ec38":"titanic","74164dee":"titanic[\"Surname\"] = titanic.Name.str.split(',').str.get(0)","6c73e89e":"titanic","ee12c8af":"titanic=titanic.drop(['Name'],axis=1)","1de79375":"titanic","59b36d74":"titanic.Ticket.value_counts()\n","1deb5793":"titanic['TicketFreq']=titanic.groupby('Ticket')['Ticket'].transform('count')\n\n","0a1ed21e":"titanic","e0186b6e":"titanic['customizedFare']=titanic.Fare\/(titanic.TicketFreq*titanic.Pclass)","062cbeb1":"titanic","4825b015":"titanic.isnull().sum()","a0f457c0":"titanic.Age.describe()","72bf81ef":"titanic[titanic['Title']=='Master'].Age.median()","34f1f802":"titanic.loc[(titanic.Age.isnull()) & (titanic.Title=='Master'),'Age']=int(4.0)","4ab1190d":"titanic","97c493ba":"titanic.isnull().sum()","bab8fd2a":"titanic[titanic['Sex']=='female'].Age.median()","0cbdec68":"titanic.loc[(titanic.Age.isnull()) & (titanic.Sex=='female'),'Age']=int(27.0)","080e76a4":"titanic[titanic['Title']!='Master'][titanic['Sex']=='male'].Age.median()","3be3ee6c":"titanic.loc[(titanic.Age.isnull()) & (titanic.Sex=='male'),'Age']=int(30.0)","06b11a29":"titanic['Embarked'].fillna('S',inplace=True)\n\n#to rename columns refer below\n#renamed = reviews.rename(columns=dict(region_1='region', region_2='locale'))","ce8e2dd8":"titanic.isnull().sum()","ac108fe9":"titanic['Family']=titanic['SibSp']+titanic['Parch']+1\ntitanic=titanic.drop(['SibSp','Parch'],axis=1)","c4901060":"def FamilyGroup(family):\n    a=''\n    if family<=1:\n        a='Solo'\n    elif family<=4:\n        a='Small'\n    else:\n        a='Large'\n    return a\ntitanic['FamilyGroup']=titanic['Family'].map(FamilyGroup)\ntitanic=titanic.drop(['Family'],axis=1)  ","a2740e7b":"titanic.head()","e8e4ba31":"print(\"Unique values in 'FamilyGroup' column in training data:\", titanic['FamilyGroup'].unique())","83d4ba11":"titanic['Cabin']=titanic['Cabin'].notnull().astype(str).str[0]","bfff8c89":"titanic['Cabin'].isnull().sum()","64a484d3":"titanic.Cabin.isnull()","d0eb58b8":"titanic=titanic.drop(['Fare','PassengerId','TicketFreq','Title','Ticket','Surname'], axis=1)\n","bf9badab":"titanic","2268aae9":"def AgeGroup(age):\n    a=''\n    if age<=15:\n        a='Child'\n    elif age<=30:\n        a='Young'\n    elif age<=50:\n        a='Adult'\n    else:\n        a='Old'\n    return a\ntitanic['AgeGroup']=titanic['Age'].map(AgeGroup)\ntitanic=titanic.drop(['Age'],axis=1)","53b8691f":"titanic","49bd7cc4":"titanic_data=pd.get_dummies(titanic,columns=['Sex','Embarked','FamilyGroup','AgeGroup','Cabin'])","6a4033ad":"titanic_data.head()","c58e2ccf":"print(traindex)","a7493d7a":"print(testdex)","6feaa9b0":"titanic_data.shape","070ce9d4":"titanic_data.loc[0:890]","1221217b":"titanic_data.loc[891:1308]","db202450":"# Train\ntrain_df = titanic_data.loc[0:890]\ntrain_df['Survived'] = train_results\n\n# Test\ntest_df = titanic_data.loc[891:1308]","cb3dbbf5":"\nprint(train_df)","a54e7c52":"print(test_df)","3ff5993b":"X=train_df.drop(['Survived'],axis=1)\nX.head()\ny=train_df.Survived\ny.head()\n","3a3e8554":"# X_train , X_test, y_train, y_test=train_test_split(X,y, test_size=0.3,random_state=1)\n\n#use it to test your model on training data","79d479eb":"xgbr=XGBClassifier(n_estimators=2800,\n    min_child_weight=0.1,\n    learning_rate=0.002,\n    max_depth=2,\n    subsample=0.47,\n    colsample_bytree=0.35,\n    gamma=0.4,\n    reg_lambda=0.4,\n    random_state=42,\n    n_jobs=-1,)\nxgbr.fit(X,y)\n\npredicts=xgbr.predict(test_df)\n\n","e6ea42c5":"\n\n\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": test_data[\"PassengerId\"],\n        \"Survived\": predicts\n    })\nsubmission.Survived = submission.Survived.round().astype(\"int\")\nsubmission.to_csv('titanic.csv', index=False)\nprint(\"Submitted Successfully\")\n\n\n\n","7886ad9a":"First we will combine both training and test dataset"}}