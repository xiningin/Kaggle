{"cell_type":{"7d2a2927":"code","cd45c8d0":"code","a282bb6f":"code","ae05648d":"code","44e18d25":"code","fdbbdd26":"code","3ee688e1":"code","be4b5add":"code","999ec15c":"code","5fe42f00":"code","21dac53e":"code","a79cb2c3":"code","2b27d867":"code","b90a8621":"code","8a773652":"code","eba840bd":"code","b58b646c":"code","5824ed23":"code","057fdcf1":"code","14880649":"code","4f252d14":"code","196f4bf2":"code","dcb61900":"code","8471ed8f":"code","d251c7bd":"code","27ef5cc1":"code","b2db406b":"code","f175151f":"code","64a89023":"code","35149e41":"code","28e8f12e":"code","1d752b8c":"code","34efbec7":"code","6ac3d8c2":"code","cda3c9cd":"code","2d3e7dc0":"code","08bf6e8b":"code","ef3f6b64":"code","c384ce3b":"code","d472c773":"code","cc50d5de":"code","ffa82438":"code","e7bc1a4c":"code","80d0a4d7":"code","f45a35fa":"code","18674437":"code","53b9ea57":"code","ebf9ba98":"code","1cbd31ff":"code","f767b3b4":"markdown","7ead8eb9":"markdown","d5dbff8e":"markdown","c2fae0cd":"markdown","322d678e":"markdown","117b3897":"markdown","fa0e62c6":"markdown","7d2f4a6c":"markdown","9f360529":"markdown","da2abdc6":"markdown","d18fe6ce":"markdown","d9167499":"markdown","3b7dab7d":"markdown","058fb0fc":"markdown","e5e007a9":"markdown","978685db":"markdown","80517c00":"markdown","645eec7d":"markdown","8fb394e2":"markdown","a3f9998f":"markdown","1c31e949":"markdown","47e66183":"markdown"},"source":{"7d2a2927":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os \nimport re\n# for data cleaning\nimport string\n# for calculating Polarity and Subjectivity\nfrom textblob import TextBlob\n# import all the necessary libraries\nimport warnings\n#for Tokenization\nimport nltk\n #for Wordscloud\nfrom wordcloud import WordCloud\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import sent_tokenize, word_tokenize\n#Ignoring unnecessory warnings\nwarnings.filterwarnings(\"ignore\")                   \n# for stopwords Removal\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n# for removing accented and special chracters\nimport plotly.express as px\nimport unicodedata\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier              #for data manipulation and analysis \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.linear_model import LinearRegression\n","cd45c8d0":"# reading train dataset\ntrain_df=pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\n# reading test dataset\ntest_df=pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\nprint(train_df.shape)\ntrain_df.head(10)","a282bb6f":"train_df.isna().sum()","ae05648d":"def data_clean(train_df):\n    train_df.fillna(0,inplace=True)\n    print(train_df.isnull().sum())\n    \ndata_clean(train_df)","44e18d25":"# First lets remove Punctuations from the Reviews\ndef punctuation_removal(messy_str):\n    clean_list = [char for char in messy_str if char not in string.punctuation]\n    clean_str = ''.join(clean_list)\n    return clean_str\n\ntrain_df['excerpt'] = train_df['excerpt'].apply(punctuation_removal)","fdbbdd26":"# lets make a function to remove Numbers from the reviews\ndef drop_numbers(list_text):\n    list_text_new = []\n    for i in list_text:\n        if not re.search('\\d', i):\n            list_text_new.append(i)\n    return ''.join(list_text_new)\n\ntrain_df['excerpt'] = train_df['excerpt'].apply(drop_numbers)","3ee688e1":"train_df['excerpt'].head(2).value_counts()","be4b5add":"# sentence Tokenizations\nsentence_data = '''Hal and Chester found ample time to take an i\nnventory of the generals car It was a huge machine and besides being fitted up \nluxuriously was also furnished as an office that the general might still be at work\nwhile he hurried from one part of the field to another \nwhen events demanded his immediate presence Even now with \ntreachery threatening and whirling along at a terrific speed General Joffre \nprobably because of habit fell to work sorting papers studying maps and other\ndrawings\\nFor almost two hours the car whirled along at top speed and at length\npulled up in the rear of an immense body of troops who even to Hal and Chester could \nbe seen preparing for an advance General Joffre was out of the car before it came to\na full stop and Hal and Chester were at his heels An orderly approached\\nMy respects \nto General Tromp and tell him I desire his presence immediately ordered General Joffre '''                                                                                                              \n\nnltk_tokens = nltk.sent_tokenize(sentence_data)\nprint (nltk_tokens)","999ec15c":"# Words Tokenization\nword_data =  '''Hal and Chester found ample time to take an i\nnventory of the generals car It was a huge machine and besides being fitted up \nluxuriously was also furnished as an office that the general might still be at work\nwhile he hurried from one part of the field to another \nwhen events demanded his immediate presence Even now with \ntreachery threatening and whirling along at a terrific speed General Joffre \nprobably because of habit fell to work sorting papers studying maps and other\ndrawings\\nFor almost two hours the car whirled along at top speed and at length\npulled up in the rear of an immense body of troops who even to Hal and Chester could \nbe seen preparing for an advance General Joffre was out of the car before it came to\na full stop and Hal and Chester were at his heels An orderly approached\\nMy respects \nto General Tromp and tell him I desire his presence immediately ordered General Joffre '''\n\nnltk_tokens = nltk.word_tokenize(word_data)\nprint (nltk_tokens)","5fe42f00":"# lets create a function to remove accented characters\ndef remove_accented_chars(text):\n    new_text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n    return new_text\n\n# lets apply the function\ntrain_df['excerpt'] = train_df.apply(lambda x: remove_accented_chars(x['excerpt']), axis = 1)","21dac53e":"#Create a function to remove special characters\ndef remove_special_characters(text):\n    pat = r'[^a-zA-z0-9]' \n    return re.sub(pat, ' ', text)\n \n# lets apply this function\ntrain_df['excerpt'] = train_df.apply(lambda x: remove_special_characters(x['excerpt']), axis = 1)","a79cb2c3":"train_df['excerpt'][:5]","2b27d867":"train_df.describe().style.background_gradient(cmap = 'copper')","b90a8621":"# lets check the summary of Date, Variation and Reviews\ntrain_df.describe(include = 'object').style.background_gradient(cmap = 'copper')","8a773652":"# Lets calculate the length of the Reviews\ntrain_df['length'] = train_df['excerpt'].apply(len)","eba840bd":"# Lets calculate the Polarity of the Reviews\ndef get_polarity(text):\n    textblob = TextBlob(str(text.encode('utf-8')))\n    pol = textblob.sentiment.polarity\n    return pol\n\n# lets apply the function\ntrain_df['polarity'] = train_df['excerpt'].apply(get_polarity)","b58b646c":"# Lets calculate the Subjectvity of the Reviews\ndef get_subjectivity(text):\n    textblob = TextBlob(str(text.encode('utf-8')))\n    subj = textblob.sentiment.subjectivity\n    return subj\n\n# lets apply the Function\ntrain_df['subjectivity'] = train_df['excerpt'].apply(get_subjectivity)","5824ed23":"## lets summarize the Newly Created Features\ntrain_df[['length','polarity','subjectivity']].describe().style.background_gradient(cmap = 'copper')","057fdcf1":"# calculating the Character Count in the Reviews\ntrain_df['char_count'] = train_df['excerpt'].apply(len)","14880649":"# calculating the Word Count\ntrain_df['word_count'] = train_df['excerpt'].apply(lambda x: len(x.split()))","4f252d14":"# Calculating the Word Density\ntrain_df['word_density'] = train_df['char_count'] \/ (train_df['word_count']+1)","196f4bf2":"punctuation = string.punctuation\n\n# Calculating the Punctuation Count\ntrain_df['punctuation_count'] = train_df['excerpt'].apply(lambda x: len(\"\".join(_ for _ in x if _ in punctuation))) ","dcb61900":"## lets summarize the Newly Created Features\ntrain_df[['char_count','word_count','word_density','punctuation_count']].describe().style.background_gradient(cmap = 'copper')","8471ed8f":" #lets create a Part of speech Dictionary\npos_dic = {\n    'noun' : ['NN','NNS','NNP','NNPS'],\n    'pron' : ['PRP','PRP$','WP','WP$'],\n    'verb' : ['VB','VBD','VBG','VBN','VBP','VBZ'],\n    'adj' :  ['JJ','JJR','JJS'],\n    'adv' : ['RB','RBR','RBS','WRB']\n}\n\n# function to check and get the part of speech tag count of a words in a given sentence\ndef pos_check(x, flag):\n    cnt = 0\n    try:\n        wiki = TextBlob(x)\n        for tup in wiki.tags:\n            ppo = list(tup)[1]\n            if ppo in pos_dic[flag]:\n                cnt += 1\n    except:\n        pass\n    return cnt","d251c7bd":"# lets calculate the count of Nouns in the Text\ntrain_df['noun_count'] = train_df['excerpt'].apply(lambda x: pos_check(x, 'noun'))","27ef5cc1":"# lets calculate the count of Verbs in the Text\ntrain_df['verb_count'] = train_df['excerpt'].apply(lambda x: pos_check(x, 'verb'))","b2db406b":"#3 lets summarize the Newly Created Features\ntrain_df[['noun_count','verb_count']].describe().style.background_gradient(cmap = 'copper')","f175151f":"# lets calculate the Count of Adjectives in the Text\ntrain_df['adj_count'] = train_df['excerpt'].apply(lambda x: pos_check(x, 'adj'))","64a89023":"# lets calculate the count of Adverbs in the Text\ntrain_df['adv_count'] = train_df['excerpt'].apply(lambda x: pos_check(x, 'adv'))","35149e41":"# lets calculate the count of Pronouns in the Text\ntrain_df['pron_count'] = train_df['excerpt'].apply(lambda x: pos_check(x, 'pron'))","28e8f12e":"## lets summarize the Newly Created features\ntrain_df[['adj_count','adv_count','pron_count']].describe().style.background_gradient(cmap = 'copper')","1d752b8c":"# creating bag of words\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(max_features = 30000)\n\nX = cv.fit_transform(train_df['excerpt']).toarray()\ny = train_df.iloc[:, 4].values\n\nprint(X.shape)\nprint(y.shape)","34efbec7":"X[:10]","6ac3d8c2":"y[:10]","cda3c9cd":"# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","2d3e7dc0":"# Feature Scaling\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","08bf6e8b":"# Fitting Decision Tree Regression to the dataset\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 10000000, criterion='mse',\n    splitter='best')\nregressor.fit(X, y)","ef3f6b64":"# Predicting a new result\ny_pred=regressor.predict(X_train)\ny_pred","c384ce3b":"score=regressor.score(X_train,y_train)\nscore","d472c773":"#Fitting Linear Regression to the data set\nlin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)\n","cc50d5de":"#Calculating Details\nprint('LogisticRegressionModel Train Score is : ' , lin_reg .score(X_train, y_train))\nprint('LogisticRegressionModel Test Score is : ' , lin_reg .score(X_test, y_test))\n","ffa82438":"#Calculating Prediction\ny_pred = lin_reg.predict(X_test)\nprint(\"The Preduction:\\n\",list(y_pred[:5]))","e7bc1a4c":"## Visualizing Polarity and Subjectivity\n\nplt.rcParams['figure.figsize'] = (10, 4)\n\nplt.subplot(1, 2, 1)\nsns.distplot(train_df['polarity'])\n\nplt.subplot(1, 2, 2)\nsns.distplot(train_df['subjectivity'])\n\nplt.suptitle('Distribution of Polarity and Subjectivity')\nplt.show()","80d0a4d7":"# lets check relation between Polarity and Subjectivity\n\nsns.scatterplot(train_df['polarity'], train_df['subjectivity'])\nplt.title('Polarity vs Subjectivity')\nplt.show()","f45a35fa":"## Visualizing the Most Frequent Words\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(train_df['excerpt'])\nsum_words = words.sum(axis=0)\n\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\nfrequency = pd.DataFrame(words_freq, columns=['word', 'freq'])\n\nplt.style.use('fivethirtyeight')\ncolor = plt.cm.ocean(np.linspace(0, 1, 20))\nfrequency.head(20).plot(x='word', y='freq', kind='bar', figsize=(15, 6), color = color)\nplt.title(\"Most Frequently Occuring Words - Top 20\")\nplt.show()","18674437":"## Visualizing the Least Frequent Words\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(train_df['excerpt'])\nsum_words = words.sum(axis=0)\n\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\nfrequency = pd.DataFrame(words_freq, columns=['word', 'freq'])\n\nplt.style.use('fivethirtyeight')\ncolor = plt.cm.ocean(np.linspace(0, 1, 20))\nfrequency.tail(20).plot(x='word', y='freq', kind='bar', figsize=(15, 6), color = color)\nplt.title(\"Least Frequently Occuring Words - Top 20\")\nplt.show()","53b9ea57":"# lets plot the Wordscloud\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(train_df['excerpt'])\nsum_words = words.sum(axis=0)\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\n\nwordcloud = WordCloud(background_color = 'lightcyan', width = 2000, height = 2000).generate_from_frequencies(dict(words_freq))\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.title(\"Vocabulary from Reviews\", fontsize = 20)\nplt.show()","ebf9ba98":"# lets check the Distribution of Rating and Useful Count\n\nplt.rcParams['figure.figsize'] = (15, 4)\n\nplt.subplot(1, 2, 1)\nsns.distplot(train_df['polarity'])\n\nplt.subplot(1, 2, 2)\nsns.distplot(train_df['subjectivity'])\n\nplt.suptitle('Distribution of subjectivity and polarity Count \\n ', fontsize = 20)\nplt.show()","1cbd31ff":"fig = px.scatter_3d(train_df.iloc[:500], x='polarity', y='subjectivity', z='subjectivity',\n                    color='target')\nfig.show()","f767b3b4":"![df](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoGBxMSExYTExMWFhYWGhgWFhkZGR0ZGRoZHBggGRkZFhkaIisiGhwoHRoZIzQjKCwuMTExGiE3PDcvOyswMTABCwsLDw4PHRERHTIpIik5MDA2MDAxMjIwMDAuMDAwMDswLjIwMDA5MjAwMDAwMC4wMDAuMDAwMC4wMDAwMC47MP\/AABEIAIMBfwMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAABQYBAwQCB\/\/EAFAQAAIBAgMEBAcMBgcGBwAAAAECAwARBBIhBQYTMSJBUZIyUmFxgZHSFBUWIzNTcqGxssHRQkNUY3OTBzRigoPC4RckorTD8DVVhJSjs9P\/xAAZAQEAAwEBAAAAAAAAAAAAAAAAAQIEAwX\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\/7Qov2fEd1fap\/tCi\/Z8R3V9qo80PknwZPgt1Kg9gbzJii4EckeQA9Owve\/Kx8lTYN9RV4yUlaOcouLpnqlKVYgxSqvv1vFLg+Fwghz582cE+DltaxHaary77bQOohTX92\/tVxnnjF0ztDBOcbR9JpXzf4bbQ+ZT+W\/tVN7o7yTzPIMSqRqqgqcpS5J1F2OtI54ydISwTirZbqVrilVhdSCO0G\/2VsrscSu71YsQh5SCRHGXsNL2ubVUoN8ZHUMmBxDKeTKCQerQhbGpTeVy+ExEpN+NHLIuumQgrHbsvGqHzk1AJtSTDbKgkiIDZsuouLFnJ09ArFlk1Nm\/DFOC2O\/4Vzf8Al2K7p9mp\/dretpm4cuFmgVELZ5eivRsLXIGupPoNVGHF7YdVZUjIYBh8nyIuOuvXG214kf8A8ftVWGSUXe\/+Fp4oyVbf6fSBtuA8pVb6N2+7esHbkXVxT9GGVvuoahtzdpYtg4x2UNmURZQNRbW+Unrtzq01tjJSVowTi4umR\/v3GeST\/wDt5h9sdZ99geUUx\/wmH3rVIVirFSnb84tmw7nJJGQEsWsCemOWVifXbnUC+yY0VDJjHQuoYAnyAm2vlq5b5bLafDOsYLSHKFFwAemCeenK9U3eXD\/G4WNx1BGHpVSLj01izxak2bv48k4pFg3Z21hoE4bYpXF2bO7a62081W1GBAI5HUV84x2C2fC2SQZWte15DofMasOyd78MSIzLqSqIMjdegF8vm510xZPUmjnmxfdFMtNKUrSZTFVM7NhhOMlGGEkqMzAHpZ1ktLfLqAMzOtwL2jq21GydDEq3VLGUJ\/tRtmQd15T\/AHahqyU6OPYeGSaFJhHJh2YE5FdkAsSL5AQpB56r112e4518DEZv4satp2LwuHbzm9c20dmzviYpknKRILPHrZtTfTkb3A15WqRwOPimBaKRXANiVIIB7NKhP0w17Rp90YhfChVx+7k6R\/uyBQO8ax77oPlEljPXmjbKPPIoKDvVI0qxBzYTGxyi8ciOO1GDD1g1pm2vAhs00YJvZcwLG3PKo1J8wrk3mwMckYzKuYvEgewzqHkVDlYi4Niah93Zfckr4OHCyuqdN5AVDMxAto2VctjYdK+nLnVW6aRZK02WDbcLywMsdyWyHL4JZA6s6a2sWUMutvC1pu9hWihysuTpyMqXByK0jMiXGmikaDQchoBWyPETMG+K4fROUuynpdV1QnT09VZ2Pimlghla2Z40draC7KCbAk6XPbVipo25yX0\/hUXUptzkvp\/Cous2XsasXUUpSqHUUpSgJfYngt9L8BUhUfsTwW+l+AqQrTDqjHPszNK5cRtGGP5SaNPpOq\/aa0HbcP6LM\/8ADR5B641NXKFKxxttLFeZfuJUUN5nP6od4\/lUjiJc+PxLAMAVXRgVbwE5qdR6ajt25skMz2vlsbeZSa8ufZ\/tnrY60L9Iz8JX+aHrP5U+Er\/ND1n8q8\/Chvmx3j+VPhQ3zY7x\/Kq3+S1fgyd5H+aHrP5VObF35kLxQ8BQGZEzZjoCQL2t5agvhQ3zY7x\/Knwob5te8fyq0JuLtMpPGpqmj60DWao+5288szcBIkFlZ7s7DrGmgPjVas+J8SHvuP8AJXowmpK0ebODhKmVH+lj9R\/if5K5hiBHArkXCopsPMBWP6UZJviM6RDw7WkY+LzvGLVx4tpfc3SSMLw11EjE9VuiYwPrrHl7s34OiPPwlT5tvWKfCZPm29YrGw8FE0Ad0Um7XJ7Aa3ZcF+69dcNzvsd+y9\/YokyGKQ6k3BWrCNse6cHxIwyGY8JOWZSz8MuOroi7+Zap+XBfuvXXjG7dkg4JwpheOIuxjL2ILAjNGpsGNmk0J6xYHlWnDld1J7GTNgVaorcs+\/UGXCzhVsqwMBYaABTp6BVA2jiozsmFA4LBxdQbkdKTwreD6ati7Tw+PhaOR524qtHmzKVViLELEuTiMP4beeoPfPDRYfZ6QJISEkXLxBw5CDnYkxsARqbcqtmhzJFf4+RbRfydu1cfLFh8LwnylkUHQG\/QW3MeWthwe0vnk+r2K5Nv\/wBXwf0V+4ldO+uNkjaPhyMlw98pIvqOdq4P22aV6S\/J6XC7SBuJ008o9ip3djZ54YTESTPIWbUYia2Xq\/THl6qrvvPj\/wBpH81\/ZouydoA3GIsf4sns1fHNwd0znkgpqrRfhsaL94fPNKftes+80Pit6Xc\/a1ROw5sQsUcbSI8nSzM4Z7ksSOlcG2Ww5dVS1sV2wep\/zrbGWpWYJRcXQ95YPmgfPc\/aaiNubppK0TxssQhu2UJfMcwbncW5eXnUvfFdkHrcfhTNivFg77+zSUVJUxGTi7RQNrYZZNoRpIt1ZBcG4\/Rc\/aK1zYvAwSkcB80b6EHTMp0Iu\/aKtmO3eaSYYuRrSIAoROkpFiLkkA36R9Qqs7GX\/e8VcA2z6Edefy1hnjcGb8eRTj+kWPd3fOLESLDlkztcgkKFsFvrZr9R6qtN6+YbN2vi5RnigiNjYkDLY2v1sDyNWndra2JJZcUiIqgZCupJvrezHyV3xZb2ZnzYa3iWeo3b3RRJfmZEkJ7EvkkPojdz6Kka1YqBZEaNxdXVkYdoYWI9RrSZjYwvVZxwTZcV8Ph3kEjjMAzG2mmtieqwHlqa2NMzwxs5u+XK\/wBNei\/\/ABBq7TVWr\/ZKdHmNrgG1r9VeqgoExMWJmlmlT3LluoJAy8tToLW6Vzc3uPRMQTq6hkYMp1BBuCPIRROw0cm3fk1\/jYf\/AO+OpGo7b\/yS\/wAbD\/8AMR1I1Yg1Twq6lHUMrAhlYAgg8wQdCK84TDJEoSNFRReyqAqi5ubAaakk+mt9KAi9ucl9P4VF1Kbc5L6fwqLrNk7GrF1FKUqh1FKUoDTLs\/FOTJBMeGAFMPgXPMurqVYsQQLFlGnOmGVCRHLAsjeJNLIZGPXkSfMjgdqyMPLU7sTwW+l+ArrxOHSRSjorqeasAwPnBrTDqjHPsyMw2KhhABwz4fyCG4HneHMg9Jruwu0IpdI5UcjmFYEjzgHSuY7Pkj1hlIHzcl5E9BJzr2eEVHi1pxc8Z0xmHVQP02USxefPa6DyuFHnq5QqWP8A\/EcV5l+4lQ2xP6viPo\/5TXdisInu\/EcJ2VcqlSj3W2ROQN1I9FRWxklGHns6kZdQyanonkykAd015k0tT\/s9XG\/oX9EjsOcR4dnIuFYm3X1Cs\/CWP5tvqrl2cT7ikzAA5jyN\/F7QKmd3dlQPh42eJGY5rkjU9MiqxTeyLyaW7I\/4Sx\/Nt9VPhLH8231VYPeTDfMJ6qe8mG+YT1Vfxy+Snkj8EAN5o\/m2+qrFurvS+IYQIqqVQtdgbWUgdTeWvHvJhvmE9Vb8DgooWzxIqNYi6ixseY+oequmPVB3Zyy6ZxqtyK\/pT4nxGbJ+sta48Xtrhxxk9ynRLcNOs+TyVd5djw4uNDOhcqWy9Jltc6+CRfkKqu8MQSGVVFlXogdgDADU+SmaLvV8kYJqtHwcOw7+5WvblJy9NRmyNkcdWbPlsbcr9V+2pTYv9VPmk\/GvG6Xyb\/S\/yis\/NGnizz8GB86e5\/rT4Lj509z\/AFrgw8E88jrEzEgsbZ7aZrdZ8tdXvDjfL\/NH50q+EG65ZYdibPjVFgZbsxI4i2VrMeTKQVkUX8FwV8ldm1NgjJw5ULxXB6AMkYIFhnwzElFF\/wBSRzJIUVUxsLGjUE\/zf9as+5CTwGU4l2IYJku5k5Zs3WbcxWrFkfWSMebEu8WVje\/ZqxLAyJFwyzZHwzFQQLC5jHZ53Ned7Z1YxgSs5AckOAsiglbBlyqRy6xevoeP2HDPaQKFfwg4UEE\/20YFX5AXIzAciOdUD+kiJo3hXEKh6LkSL4J1XUqelGfSR\/aqc2PZv0MOW2k+Tv3wnkVoFjdkLFx0WK3N0Avbz1ze8uP+eP8AOevW8sSq+FyszKXJUs5fQtHyZiSR5ya8b8yMJY7EjoHkSP0qzvls0x4SPa7H2gNROQf4r1bN3pcRHCkbZZZbuWMkrDS5K2bIxOnmqoDdXEH9ePW9ehuriB+vHeer45Sg7SKZYRmqbR9C4uK+ag\/muf8ApUzYrxIO+\/sVHbDxfueCOOQO7LoSqs5JJJvYAsefZUgNrL1Rz\/yXH2it0ZalZ58ouLozfFdkA9Ln8BUO27rI8swCZ5MxfKX69f0mta\/YKmPfT91N\/LP41g7TP7POf7qj7WFJRUluIzcXaPne7khGCxDKSCCxBBsQeGvIivOzcFjJ4xImIYA3teR76G3UDVu27h2khkWPCzKSjAWEQF7aXAkv6hVaxmHlh2fkdWjcMLjkReS45eSsM8bhs+DfjyKe\/uyzbomaFWTESNIzOMpzM9hYC131GtWcV8uO7kgsTigt9RcsP81W3dLEJDEIpJ1cgs2cuNbtcDU36\/qrviyfazhmxfciT2Yckk8XY4lUf2JRcn0yrLUlUbiTlxELg9GVXiNutgOJGb9gVZe9UlWkynJtHBJPG0Ti6sLGxsfQe29Qwx0eAfD4JInKvoGve2Zzcnt1JJ7AasdeWFVa9rklP0+Dh2\/8kv8AFw\/\/ADEdSAqqJ7qSBvdroTx8PkIyjo8dCeQGmlxfWwN6tdSnaDVMzSlKkgi9u8l9P4VF1KbbFwnp\/CozIew+qs2TsasT+kxSs5D2H1UyHsPqqlF7MUrOQ9h9VMh7D6qULJbYngN9L8BUhUfsQdBvpfgKkK0w4Rkn2ZmsVmlXKlB27uu0eImxKuI1lsFEehvlFyykZDfKeYPOqtsaSRcPPdM4y+EmhHRPNGPLzEnyV9exeESRcrC46vIbWvVI2tu4uDhkVGdwyMSWA0stuoeWsebG09S4NuDKmtL5K9s2dWwcoVgSCbjkw8G2ZTqPTVm3X\/q0Xmb75qsw4dHwbllBKk5T+kPB8FhqPRVl3VFsLEPI3Pn4ZrjCr2NE7olKUpXY4ilKUIO7BY9kTKIJnsTqoSx16izCtW2WfERPEcLiAHFiQYLjUHrl8lSWyPkx5z9tdlaUrjRkk6laPm2JwzYZHhEExAVjd2hB1BOuWQ1G7qTSZHtET0hzdR1Dz19Q2lheJG6gDMyMoJ7SCBrVH2bsSTCApLluxzDKbi1ra3ArJlx6XaWxsw5dapvci9ync4ibMoAyt+lf9MdVquFVPc7+sTfRb74q2VGPqWn2F6UpVyhP7P8Ak081bHiVuag+cA1r2f8AJr5q6K1LgxPlnzTfzZIhmwxjYKzu5sB0Ccyasl7XJOpFie2uDfN3MicRApCnk2ZW6R1XkR5iPXzr6tLGCLWHI2r5x\/SDs+QSxgKz9A6qpP6R7Ky58bSbRs\/j5baTPG98jB4FV2UMCDlJHWo6q7Tu0P2jEd8flXDvh8rhv+\/0lq0GuSSbdnZtpKiFG7Y6sTiO\/wD6VZd3maNUhzFwL9Nzdze7an6q5K24RHLqEYK2upXMOR6rj7a7Y1plscMr1R3LHSoxoMZ1YiD04dz9k4r0seLHOWA\/4Tr\/ANU1rMZIVXt9djvPA4iXNISlhcAWDC\/M25VJXxQ6oD6XX8DXhpsZ1Q4c\/wCO4+rgGqyipKmWjJxdoo29GGDzYaNr2YlTbnqVBtWjEbHwCMUadww0IuNP+CrFtjYWImmhmKQxrESz5ZHctqDoDGvYahNn4OOXF4kSIrgG4uL21rDODjLg9DHNSjsydO8UDxBVlUvEVkUAG5SLpP1czGrj01bqp2H2ZAjBliRSLi4GtiLH1gkemrHsONlgiV2zMsaKW8YhbZj57X9NasUm1TMWWCTtHfSlK7HIi94NhR4yMRylgA2YFSAb2I6wRyJ6q74YwqhRyAAHmAtWylRSuyb2ozSlKkgVihNZoBSleHcAXJAHaTagPdK8Zx2jq+vlWOKt7Zhc9V9aA2UrANZoBSlKAVy4\/CCWN4mJAdWQkc7EWNvLW8MLkdle6NBMoG8O74wuHkWMOyABiWsdSwB5AdgrZuv\/AFaLzN981cNpYFJ42ie+VxY2Nj26H0VCLsxYPiow2RfBvqdekdfOTWSeLTK1wa4ZtUdMuTzSvXCbxT6jThN4p9RqKZa0eaV64TeKfUacJvFPqNKYtEzsj5Mec\/bXZXJsoERi4tqftrrrVHhGSfZiubE4FHILqCRoK6qxUtJ8kJtcHzzYexZoMRK8kRRGzhCSDe73HIk8hU5U\/jMKJAASRY30rm96F8ZvqrP4q2Rp8ye8iJpUt7zr4zfVT3nXxm+qnjkPLE6dnfJr5q6K1wR5VCjq0rZWhcGZ8maxWaVJB863\/wAGUnw9rte55cumtTpqysL1ye9UfYfXWd4d217NKz\/Sk\/RC11bL+VX0\/dNSHvVH2H117i2eikMAbjy1McbTsiWWLVHXSlK7mcUpSgMGqy+7xinlnVi\/GOqhfB6+d9as1KpKClyWjNxexXPcsniN6jU7hFIRQdDYfZW6vAkB0v2\/Vz+2kY6SZzcuTZSlKuUFKUoBSleGcAXJsPLQHLtnDNLh5oltmkjkRb8rshAv5LmoPaWzcSpeRHkOcspQSvaxni4eQC4jtHxQWUXs2t7C1ppQFYw+y8YoVeISpMd7zOWjjTEvIVzEXkYwskZYm5yak8zkbCcYKKDIWeI6XlzkMAwDZ5lfMOlyINgdBoBVmpQFal2VKTJmijZpMOkLyXyK8gBuxUdIKM2mtxbS3OteG2DOhhtlLxt05SVPEUy55GdChIkdTe6lbMT1AA2mlARWwcK0QlBjWNWkZ0CkEWYC+g5G4J9NStKUApSlAaHja5II1ABuL8r+UdtZyv4y90+1W6lCKNOV\/GXun2qZX8Ze6fardSgo05X8Ze6faplfxl7p9qt1KA05X8Ze6faplfxl7p9qt1KA05X8Ze6faplfxl7p9qt1KCjTlfxl7p9qmV\/GXun2qj94XmAiWEkM0gU2IXo8N21Yo+UXA1y+TrqNO8M44+aIKI2KL0Sz6S8NXcZlBV16YN1sCOdBRYsr+MvdPtUyv4y90+1Vc2fvBOcskyhUfgsUyOGiSTDlySf0vjQE5cyRWG3gxPC4giUXaJOkrjKXgWVne5HRDNw7aa8zpYhRZMr+MvdPtVrndlF+idVHI9ZC35+WobaGNm42EGfhrJG7SgMAucNDlUM0ZJNnksvRvrqLVzptqeQoSqoolZSCjHiKsZeORTcZFcrcDXsJvcVIosuV\/GXun2qZX8Ze6faqty7x4hCFMOduC0jBUcDPwmlVVNyzeCE8HUnnfo1799Z+JbOjoRhsuSNlzFsUY5irMToqZbjyg3HOoFFhs\/avdPtUs\/avdPtVW8Dt7FS5QIkUvwzcpJlQvHK7xODYl0MSAnT5QaDrsOz5zJFHIRlLorFewsoNvRego95X7V7p9qmV+1e6fardSgo02ftXun86ZX7V7p9qt1KCjTZ+1e6fapZ+1e6fardSgo02ftXun86WftXun2q3UoKNOV+1e6faplftXun2q3UoKNOV\/GXun2q8CEixBF+le406RB7fJWva8jpBK0YzSCNygtmuwUlRlHha9XXUBidpvGVeOaadRHLdnQWzmTDqtwgjU2Dub3GW76gAgBRZsr+MvdPtUyv4y90+1VZO80+S\/DUMYY5bFWsCWQSBjcZWAc5UNgxHhizWYjGzvIJFLhEWVwmV1LNlhy3AI5cR+iwbkesAgKLI7OLarqbeCewnt8lesr+MvdPtVW9o7xyIhcIGZZGAjEb3UKG6LsWAzEDQgHnorDWsHbWJQkNZyGxCk5GVY1XExRxtIBctaKRnuCLqvnYSKLNZ+1e6farXNCzKVLCx7FPbftqEwe28Q5UmJQl4w3RcFw+IkhDx38FcqJLY30fn11ZKChSlKgkUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoD\/2Q==)\n\n\n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Feature Extraction<\/p>\n","7ead8eb9":"![LIT](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBYWFRgWFhYZGBgaHCQeHBoaHBwhHhwcHyEaHBwcGhweIS4lHB4rJBwcJjgmKy8xNTU1GiQ7QDs0Py40NTEBDAwMEA8QHhISHzYrJCs0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQxNDQ0NP\/AABEIAKEBOQMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAFAAIDBAYBB\/\/EAEEQAAIAAwQFCQYEBQQDAQAAAAECAAMRBBIhMQUiQVFxBjJhgZGhsdHwE0JScpLBI2Ki4RQVM4KyJMLS8QcWNGP\/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQIDBP\/EACgRAAICAwACAQMDBQAAAAAAAAABAhESITEDQVETYYEiMnEEQpGx8f\/aAAwDAQACEQMRAD8AxEiSztdUVMWP5bM+EfUPOHaHH4g4GNBcPTHJGKa2dcm09GeGjJnwj6h5wv5ZM+HvHnGiUU39kdUceyKwQsmZr+XTPh7xHJlgdSAVxIrmPONC4oOvdEFv564+6PvDUIsHJghNGTTkv6l84R0XN+H9S+caezSsM+6FNSm6FghZSMs+jpii8VFOI8442j3Hu94g5aqlCqgk9AJiw8ogAlTluMGCLvRm\/wCBf4e8Rz+DeoFMSaDEZnCDyrerRSeAJ8IhnIQyEqRRxmCNo3w144kuTRQbQs4e4PqXzjn8mnfCPqXzjTTJmXrdDPadBhKCJcmZwaGnfCPqXzjh0PO+EfUvnGmSaPHfujntAcIMEGbM0NDzfhH1L5x0aGnfCPqXzjRS2FREyTlFamBwQKTMquiJp90fUPOFM0RNUAlRQ4c4RqUFBn4eUNt51EH5vtCwiVlIzaaFnHJR9Q847\/Ip\/wAA+pfONdZlFBE7KIMIk5Mw7aHnCuqMPzL5w1dFTSK3RT5l8411oXVbhFGxMzAqANUDEk41r0dEGKNL\/Tf3M2NHv8PeIeujJp93vjTNZX\/L9R\/4xFfZDQrXgf2h4InIBPoWcFLFMB0jhEaaMmNko+oRsXDvLICgZZtuIO7oitox2IwXvhYIMnRnP5LO+AfUvnHP5LO+EfUI2\/tN6nu84gdx8PcIMUJSZjxoacWK3BUCvOXLLfHToSd8A+pfONKk2kxmYEBgFXaScTkKxaDrub6W8oMUNyZjjoed8A+pfOHpoOeckH1L5xrCw+E\/S3lEiMMcDl8J8oMULJmGGj3qBdxJAGIzOA2xb\/8AX7R8A+pfOCEmhZD+ddm45d0aUP0GG4JA5MxB0DP+AfUvnC\/kM\/4B9S+cbUrxhEcYWKFmzAWyxvLIDihOIxB8Irwf5Xc9PlPjACIktmsXov6F\/qjgY0YjPaCH4o+UxpKRpDhEukE5tkQu5BwOzzieYmNYrzI0RA9HvUU7SPGK0uWDiak7yTE1jNXTj9oUhYXs0fDqoRkzfU3nDJgO0ntPnFnZEM0jdARZJolaTG+X7iLtvc3SBFLRrfiH5P8AcIs244Nwg9hLTK+jpxDNll9x5xNpOYWCA5X1r27YqWLnE\/l+6w60zKlKfGu3p4RVbIsIPLUUoq9m6GUG4dgidx4GIhEIps4qjcOwQiKUwHYPKFu4w7Op9bYZNnA24DsEPl0NagdkQIdaJkwrCY0QpLX4P0iHTkW+mqOblQbzHEh789fl+5gG2WSi\/COwQrq\/COyOgYQrvrCAmyIoM7optqBEclFDsFUAXFyHTM8otKM4hkj8RvkXxmQFXoj9ocqxRtBNYtqlHunj1RBakxzHf5Q0Iv2FyRSKuiycqxLo9sQK+MQ6OhD9MInr7IgbiewRPEZFTASVp6a0v5\/BTFti0QWka8kdLf4wSstlLuEXbt3DaYC3xFG80SXmocIPzdBywyoJrCYwJAIBBp0DLI7dkBLTKZGZGzBoYSaYmmgBLOuo\/wD0X\/KD7JGar+Ip\/Op\/VG60NZL8wEiqpiePujt8IctKw66Bj2dlAYowGwkEA8CYZB3lHbLxEsZLi3Sdg6ge\/ogGVxhJ2hSVOjK8reenynxgDB\/laNdPlPjACMpdNocCOgj+MOBjRsYymjib+GdDBNbW94rXZujWCtEy6GEasDrU2NB0xEtpff3CIXmMcY0SZLaL+jhWYvWYdIwiHQ9b95jsiSzVZ7qippXshNbG5Kiw4FaVHf5RFOlg4g9WPlFxbG9a07xHHsTk5DuhCtFTR+Ez+z\/csWrSK19boYlldXDECl2mYzqD9olcMa0HeIPYpbKej\/e4U7\/2iCc2Kj86+MX7NZXFek7DsiG0WdycMaEEDfTGnGKvZITmDwP2iEnAetphfxFfdMdDVoAhJyA28O+IRVCTwhLkab\/ONhZrNLskr2kwAuRjtNTkiV8evKBdudJ1na0iWJbK91heGsuqASaDGrAdvRCysMQCRzfW2OXqCFOn\/l4awis85iME74YJF4J0HsENmDXX5fuYQeHgawP5fvAIlHrKHr6xEVbVMoCce39odYJVZasxqSK1qciajupAInOFYilc9vlXxeO3BvPaYfKRMTt4nZ6MBXopvg5r1RXmvU5eMWLQATnTtiMSk3GCwoksL6wFBnTKGWAaxi1ZLKCRdVi2ylSewRXsqkOwIIIzBqCOqCx1ovvjEayzEimEzwEFS0N+NJHzf4xrOTcnWd+r13H+2MnaB+NK4N4RsrBqWV32kMevFViJcNF6\/gi0XWbaXm7FrTr1VHZWBWlD7W0lUprMFB2YAKTwqDDZWkXRGRDdDHEgY7sDsh2hQomqzPcCgnjT3fW6Cq2K7VAm3clbSr0VA4qGvqyhc8jfIoRG60bI9lLJYgEmpNcAMhj39cee6QtBtNoYksVZhdUk0GQApkNmW+N3px7kkIpxNF6ht7qdcOVtJMapNsE2mSlWZpt5jU0RCandU0oIHsusIWtv7v3gbbtIOj3ABmBXGuNPOGiVFzuvQG5W89PlPjAGDPKWt9amuB8YDRlLprHhc0V\/U6jF5R+IeEUdEuBMBJAFDnF1nF8kEUpGvj4KRJSOFPWMPC9MWJVnAF58ANm+NLJUXJjbEKejEdjmFXqPhP2iBZ816NJRFSpArSrU34w+wSnaYqGl8kqaZdsOuil9ufJpLAT7MFsS1TjuOXdF+zaPmTuYmG1iaKOvaegQesHJ9VAaZr0yUc0bqnNurDjBS12qXKUXiFAyUU7FURk5fBKj8nnN7WKkYjMcMDEwmAZAQ2YoLMRtJPaY4EiyLJVmEmICuuOPrbDgIhnzlWYKkDjCZSIE57j8x8TGj5L2IF2mvzUFRhgWxPXQY8SIzKWlPaPrLQsaYjGp2RvLUy2azKCQt0VOQ1qin62XqBiZN8KS3YC5Q21ps26KlUwAGOt73Hd1dMW+UDrIsa2cEF2KXqbNdWYnsoIAi1S8w6V4iKtvtSFQAwJvA59NYMeIaeyeemIhXCBepq5Vo1K7q5Vi\/ouxGc6qAStRfIGS7cdnRB9bWXtIkinsVDJ7OgukKprXgR3QOVBiZGWeHYYkoS6AYkg0AGeO6CSaJd501JbYSyaV40Va7\/KLuipdx5bU\/EmEolRzUXWmNxNLsDkhKLM\/b01WFMRWsPsx\/Bl\/Iv8AiI1syyJMtDO6hlqEVTkzKKsx3gAEdJwgTygsqicERQtQoCgAAE1AoBgNkClehuOgTSkE7RoV0lGZeFRS8m1QaZnfiMOmCVr0dKSYrAGiJfcbGu4J1s1cOiJgl6zr7RqB2vzT+UaxA67ixLl8Ao\/Jlf5bMMv2tw3N5plvpnTp6YqIpJptypt7I3OkZxFkZmFC64LuvHVXqXwgZyRsALNNYc3BfmOZ4gUHXDUtNsGtpD7JLazWYuRdmTGuitKqv2yJ6xuiG3Sy9mkzW1pl67e2stXoCduAHfvh9r0itoJRqrdc3GUXqjIAiox4b4JTxKQ2eQxLMpWlKAE80MwOOJrgIm2mVqiHScjCVZkUXqAlqDCgoT16xPCJNMSpaWYIAMaXN5OBLdla8aQzS0+5PRQRemsinDmywQH25sTTgpiHStmmTrRcQgKqi8SCbtaknnDE7BAvQNdM1PH4sv5W+0au2tdsSD4go7732gFpUBpi3CLktWVRTFi1Lzlq7SBsyEH9MWWYySpctLwA1iTQCgCjE9cN+g9a+DMxoNAWVPZvMdQ1CcxkFAJp290QDQN0Xps1E6BU95pU9USWC1I0t7OrhTXUZ8A4NK8DmKbqdNE3a0JKnsz3JWxmbab4WiIb5FTRcaogO3HuBgnyx0kUY0Fbo27yaf7a9cF9ASElO0mXRrq3pj7WckADoAAbDp31jJ6bLWi0tZ0Q32e6GwoAuDMegAExSdsGtBHRy35JnNgpFEG9zs4DGsDrRo6+18k1qDQUphTo6INWu6gSSnMlC6PzH3mPSTFRjDr2Tk42kYzlQpDpUUqp8YCwf5Xc9PlPjACMZdNY8Lmijr9RgveG4dkB9F88cDBcjEcY38f7TOT2X7FZVapprClM\/DKK8+1J7S4+zbU0DbmHZjF3RR5\/EeEUdOWAc8YGutuNdvGLik3sUvJKMWkWkUAUwUVJqMBiTjxx7YfoaYsu1o91XFDmSQNU6wxpUU279+MAwxpSppurhD9Hzrk5dzCnCoIrFvx0m7If9TnUa\/6ek27lLq0kjovEeA8+yAEyazksxJJ2nExz+AdVDlSFJoGINCc+vjEYTpHrrjJRSG22OBjsNCj4hDgB8Q7oZIgMYHaTAvnDHCCYpvEC9KDX7IRUdD9BWcTLRKSnvgnguue4RoP\/ACLNoktPie8eChqd7nsgdyIX\/U8EY9eqPuYdy\/mVmKPhoO4t\/uif70aXoHaKu3ebnvAh9psoJFE5xoKDM4YccR2iI9EoWIUCpJoBv3RqtJhJBs6nEyzffpJIrT6TTgIcnTJV9LVrnrYZEtUUMbwBGV7a7cdg3VG6BnJmUjT51oE1mRASUdSLhclqlqlWIAOW8ZRc5RWJ7S0v2QvpdNGqLoJONTwAgXpC0pKQ2SS1aAtOcbWNBQdmO4ADfGa2jW9BrRjo0mfMk+0vOxFWIrfORUA6qgvEWjSjWwqtbsmXcWpOSlQTniSa49EA9Cacazq6XLwbEY0KsRSvSMBh0QLlzWU3lYht4JBxzxisekZcNxoqYHtEwgkrLFxccCWYl3plUkHHcYHaOf8AibS02oCI9a7KKSqDiboMB+T+mVs8wl63GFGIFaUxDU2jPDpi5abfJ9isqzV9lUlmINXNScbwBz6Ng2CE4tMMrQV5UTAgK1F6YQT8iAUB\/vJMVdJ6WR5KIlchfwOFNlaY1OPUIENaHfFnLUFBU1oMcIYHO+KURORreUFnaaZMtOaxLE0NAAAATuFGPHCJrLaEuvZ5WDIpVMtY0NSDvvZ9sZ6TpqcJZQMKUoDTWA3A\/tXpgMHI2mJUXVA5bs09gsH8P+NOwI5iVBJbfhh5ZwAn2pncux1ia4bMqU3U+wjqTSSSxJPSa74aGIiktib0S2qe7OjliWCCjHE4GogrN087oUuqpPOcYEim7YaYVgLNFWX5B4x0rDpMMmaHk7oxHDTHAYA0AOVQASTvzEd0nygYkpKNAPfwJPy7h38IApaHVSFdgDmFJAPEA4xDJbExLj7YKWqRIrsyBmYlic2NSc9pivOxzPcInsxqin1tjk5IpCb2HORDC9NFcaLTLIXgcuI7YqaZIsiO1QbTaCyqw9xC2sRuOXXT4YCy57obysVYZEHGB2m7U7sHdiz7z0UpTcISjch5ao1LmGnbHGMd3wyDJ8r+enynxjPxoOV\/PT5T4xn4xl06IcLei+eOBg0y1pQisBdFuA4J3GD7riNWmMa+N0iZRbdlrQzVv8QO6HaV5jdXiIboUYzPmHhF15CvVGrQ7s8MY0Tp2YyV2jKkx6hyZ5Kypah3\/EmbQwAVDXEBa45ZnoOrGd0ZoaQjlptXS41Awwv4XSaZ7RQ4VIwj0HRcwMhZTUF2oceH2\/7jVyUloxUJRdsE8rbY132QlvdJDNMpqihNFr8VaZ02Z1jFKe+PQeU\/\/wA7fMvj6\/aPPjGcumqaaQmNIs6Os3tHRdmNSNwx\/aKpxg9ybkYu+wao4nE+A7YiTpFRVui9M0PKYUAKEe8CT9Sk49VIx2m5ZSYUbNTjTEdR3R6DGF5TrSe3VEQk26ZpKKW0M5N29ZNoV25pqrHcG28KgdUFOWmjprzUaWjuHIIKAsOaFxIFBlmd8ZZDjBtNPzrOiXGBWp1XF4dWRHUYtp5WiU9UzQ6A0QLKhnTyA4GAGN2uwHa5y9GBNutJmuXNMTlUYDYOyKs3S82eQzsMMlUUUdROfSYdebp7IlJ3bBv0gdNtTpeAdgCTUKxAPEA0MQ6Nesx\/k+8TW8VxMVdA4zH+X7iGl0u6iXmk1yqDviuSaY5\/aCKpht6hWKc6XicD2fvDszRRtBwPD1ti9ooVk8CfGv3ilaU1Th3HzgjoOUwlG8rKGN5bwIvAgUK1zGGYhvgFmVkeEMpSJrufCDcxPZIJJAFZLTJpIHOYESlrsutd62hITM8poDDJgEWBJLMEUVLMABvJNBBvTdnoiSFW9dmBUCjWa6h9q1QK4swH9nRAgM6rgCp9ZxJLNaZ5bMYL6BsDKJs95Rb2aaiOhoztWnOzApjuvV2QGAIYg0rXGlKV20u4dkFAOtODr8o8TEqpeooFScABmScAPCILWdcfKPEwU5Kh3n3gLwlIzXfial1F6CSa\/wBsCVgyGzaLnP7RVQm5UNlqkVqMczhkMYHohBONesdO6Nho6YVDTQ15EUpLoMZ056FnoBUknZ8NNxjOy7CxYIaglrpAXEY0OqBUkY4QS4C6VbH\/AE1ENtb4Uxx3GDi2SXMnOt72S3qLLVCSdlM6KcKmuAqdgiORohJs1wjO0pFvFgBfYjYgyqxwHCBIYAnUCgf7hAnSJwXr212iDulbEyM1ypQG6DeHOCqWWowa6WpUCmW+M\/b2OFdnTXdFLo61ZrFyGGzyhExI65UiIrEEmX5Xc9PlPjACD\/K0a6fKfEQAjCXTeHCayDW6jGml6wTefKM5o0VccDGgsUxFZPaXgg513E3a0NOoRtH9on01ujNEXFdHS49bwatby+6QQaEDEEbCOmKMtDfyOFa9GzxMbu6pUAZACldgphnFbSkhUszBVC1uk0GbVUkneYIttMzkqaMyLOWBcHBCK\/3VAjU8nP6A+Zv8vX7QHsMv\/TT233B2Gv3EGeTn9AfM3ifXnFeNb\/BM3r8hKbJV1KuoYVGBFRXprt9YxVbRFn2yZf0L5ReXI+vXhEc5LykVI6Rs27Y1ZmgVP0NZmwEoDpBYeBiVLIiqFVQoGVPWMJ59wlX90AlwDdoxIF74Tgd4yxxESNNUC8WFN9RTtjkm5Xs6Y41oqzJJXpG+MHp1S9pKLSrMFHbTsj0BZxchUwVrwDkYErgyqu1s86c050jlv0RJoj3Bfl0Cv71Dq0Y+9gTnti4QaTkyZSV0jJaS0dKlyQiS7zmlCFq5OBLYCtAMTsxAjOaUbUTiftG80zpdLKi4VmuDTAmg2k02Cow29sYLSk5XRW1jiSxKsMTxG+Kg2DRNYBhn4xeYYevKBlhnpTb2N5Rde0JT9j5QNiom0VZkeaPaf0kVpkz5VFSOs0HXBDkzo+SrWhGl64lF5jEk+wZiDLkLvYLUsdpFNhi3yUs49haJwCmlAt4hVqmvrM2AWpUt0LAawWxBMSySnv8AtJgafOOHtXbA3K4lFzB2mp246RWiXvRwjCKk0eqCNoJFnmzvYpcuymJcqALqqKCWWzZiVZieNDgYjtdkR5IIRROmTQgC6ty8DMVaLQVCEVwrTE4isTQrM1oDR6zrQiNQpW89QKFVF4g9BpTriza7bOnTAqAu7M0wg+4Hu3ExwULLVCcqFmrjGll3ZT2j2aJdkSGUMQLzOFDveObZrWtaYZXsQPJ6WnsJ\/tJoWdMVWdmYVEt2vMFG12XWp+dBvh1qh\/ch0bZZrT5aOt0M9DVSKhTrgVzpQiLXKe1OzTjKViqt+JMu4ArRVQVyUZk7WO4Ak\/8AxEszbLPdwksS6ICwpfYMGBJxooABJ2lemA9o0jKlrNZHRnestEwa6t4l5jg4Eu2sAa+6MQKApIW2x2h\/a\/xdmkOLqyZJmNUqTVqkkleaLzLQHYvTEKz5ky0TJqMqpJR2UsDjgcaAjWZmL8TSH6P0x7Z7UZaATns7MaG8XdVVUCimAGxccXNSaCKYtz2dQguM5xmqyAjZcQiua849LUOUDodOyTSUqYLJIkkMXmuZjbSfdQY5kgqeqJp+hFEyTIUUYopmveqAWNKDZhgBQCt4RLpi26suaJiu5kKigYlXNfau4HNNDQDeSfdjuh7ZMmOJ04qFVWcKqFS5lLS+5JxVSQo3ljSlGgDdAvTtjVJjKrMTgFU0rdFdZzsqeaBiRjhhW3oSeLPZLTNZSxdllBQ1wm9gaMASpAcnL3Yz1qnuXDswLMKkkHE1OOdY4ukZjmXIYrc9p7SgWhvqppjXLohJ7G46NBaNIPfQrRAlLiLzUpuBzO8nODVqZJE9ZjKFuKF1FAvzGFXemAIUMOsgVjMuaxK1pZ3VphLhSKhicVGN3oBx7YSZLQYs1+guMUlsQqzCo9rMYnWuDexI6AFWpwMT6QtyK9okq\/swwWjKppWoMwm4KliCR00phFKdpZbzTEvtMNQhcKqylNQAqhjVgMK4QFfEw7FRDpCbeICVCLqoDSt2tST+YmpPGmQjPaUGIjQzJdRhnALS8o31G\/CBdNPRotGzL0tDu1T1YRYIgfopCgYEggmopXA0x+0XTPERaBrZluV\/PT5T4iM\/BzlVMvOnynxgHGMumseFiwmj9RjU8m7AbTPWWagE1Y7kXE9uXEiMtYTrjgY9H\/8AGdDNnHaEAHAkXu8LG\/iX6SJOrPQBKG3GKHKH+g3FfGCkBOVFqRJBLEAXlFTvrkI0cUotIxUm5KyPR1nrZH\/NebrGA\/xixyc\/oD5m\/wAvX7Q2x2kJZlcGqCXfw2i7eNN9Yh5F2n2lkR\/iZ8ssGIw7P2MOMap\/YUpXa+4fXI+vXjDXagrDlyPV69YQx1rhFEgeyI7kvMBWrllT9KM43hVWg2YnM6r\/AGKicCFUG4xwAzvJjxxi4y0NIrsh9oGphcYV6SUI8DABBbpbrryxVgwcp8RGBK1wDlar0g7wILEB1ocj\/wBxXArFmWlBACBuntDraJLJQXhrI259g4HI\/tHmFpH4LAilCvVrCPZY8p5QABrQBkJp\/wA4iSSo0hJvoMsA1YtARVsJwi6sQ+mlhSVpwSbPKSWfxBOLOpBustGW6TkQwIHVwji6BrPlWyxXXlBrzIxUGSwxKtUjVHaBvFDAOc1W\/wCvKK0hyJ6gEgNmATQ0DEVG2GmCjabNDbNLMs0tJAl3WZqqb1XaoZyWGsCDQAjAdJNaI0tPVHQPUOxZzSpvEEMQ2YLDA7xDLQ2LY9X2EQuoNRmaVy2D13QIgMaN01PvMz695CrBwSCpzFKj98YGWSc7MzNQszEkmgJJxJzhaOU41B2+ssf2iKwQDsKMx3D11xSetdlOrziy7YZeMRO2QFMYmgTAjMyTFKMysC1GUkEZjAjEZwbBxgRaV\/FHHygo5xg+DXyLf4QmGJHXBa16Sl+yYS71+YiS7pAAlomLANXWLNU5DM5GBAUVrtIpHOv12w7MqHT1wT5fOKaYT0J2XvA+cW5j835R4mKlkas9flMCGwv7TH10w0P0b4e7msK+fQhC0cD4et5hO\/RCD9A7IdUbhALQpbD11QH09iUHSP8AdBcAE5DsgPphQrpTeD4wLpSC9kSijCJJq4ZeuyFZ31RHZjwCMlyoADpT4T4wEg5yqarp8p8RAOMZdNo8JbMdaNdyO0kLNaVZzRG1HO4NTHgGAPAGMpo\/njCpoacdkEbMc9vGNvH+38ktW3\/B71Ge5VWB3k6i3nluroPiIwIxz1WbDfSAXJXlYEVZVoOoMEmfCNit+XcdnDLeI4YAghlIqCCCCNhB2iNkzmlGtMzHJW1Wl0ZZ8oy7lLhIK3ga1F1jXCgxy1uiNBYqa43NWnQQCDwrXrU5RP7MboZMs4JqpKsNopluINQRFE0Uja2E4qTVCwWm6qKwNdtSaGtcOGN\/169dkUZsm5rNjrqWY03rUnYAAOwQ6RaWM51IBStFO4hVJqcQfe4UhAEbtYjuDcImiO+CYBiAjsKILZa0lIXdro7z0AbTABHpO3LJlvMbJRgPib3VHEx5TbGJlOzYszAk7yWBOyL\/ACg049pfIrLXmJj9Tb2PdlvJG2t\/wiOkeIjOTtmsY0RaPi3txgVLtNwVzpDhpRjjQQYtg3QQnipBwxgfK\/8ApTr8Gi2jzCK3BTpMQS7M\/tA9Bw6iM+uFRUZa9\/4L046x8\/XqsV5iAmvQRHZ01gTq47qnyis1rIzXPp\/aGkQ39i9Yc+2OaNfx2AffKGaOmXicCMOiFoxfRpCH6CU01oASOoRGr1NMa16Ifcx2doiJ5esDh3QgQLtZ\/FHH7rF5zjFC1Yzh62rF9zjnCN\/J38L\/AEPQGOOh3GnCOKRv8POHsARn4ecBkR2oUoKbB4mK+jh\/qP7D9osW7JT0D7xW0Uf9QfkPiIa4DCrDE8YRjs3A9cMc4QiToEKvrtjkhoeB9vCAB6nL1nWBGmv6iCC6DEethgPpg\/jJw8oa6NBiRkIa4oxOOIoeqHyshDZxhAZflSddNuqfGAcG+U510+U+MBIxl02jwmso1t2BgpKQDaeyA8uYVNRFgW5tw7\/ONISio0yZJ3oMvgh4GCGgtNzrMiXHopqbjYocTs2cRQxmH0i5FCB3w9dJsFVbq6u3HaSccemKU4oHFs9W0fy5lthNRkPxLrL2YEd8aCzaZs782anAm6exqGPCl0sw9xf1ecSJppx7ifq84f1kZvxM9+VgciDwxiBrNS6VABU1C5A4EEYZZnHYaHojwa0aYd7uogpurt6+iJRp+ZSlF\/V5w\/rRF9Jnud8Io9o6rvqwHTmTlA62cqbJKGM1WO5AX71w7THi76Yc+6vf5xE2kWOxe\/zhfWRUfD8noelP\/IjkMtmlXaYX5mJ6kXAdZPCBlm0i9pW+7F3GDE\/YZAHOgwjFpbCK4DHjFiw6VeWxZVUkimNfOE\/Imh\/TrgetMkhsvXbENpXUOG7xHTA6bygds0TqvecQzdMOy3Sq9\/nCU0ViyxMU3YhsMss4XPjFdtIMRSi9\/nHbJpFkqVVSTtNfOK+rGicHdmsL7OAjhGtntEZ0adf4U7\/OOnT71rdTv84jOI8WGbQhY9HHp8IoOWVgw5ykERUGnX+BO\/ziN9LOTW6vf5xSnEMWHNHspdiK0NSOgEVp1Vp1RzRpzgJZtMOlaKuNc67euH2bTjpkqHjXzgziJxbNZ64REcWHrfAEcp5nwJ+rzhrcpZh9xP1ecLNAoMmtj0nE+tkTmcNob6W8oCPpFi9+i13Y08Ye2l3OxRwvecGUTR3eg6k4fC30N5RZV9lx\/ofyjOS9Nuvur+rziYco5nwp+r\/lCziS0wxPmqxu0Y3RTmtgRWoyhlnS499Q3NpQo\/RjWnRAQaae8WuriSfe2474sDlJM+BP1ecPKIsWH3tpOw\/Q\/lEc\/SN1SSP0sM8NogJ\/7JM+BO\/ziG06cd1ulEHSK1w64WcQxZpUmNQEKMRXOOfxLj3B1N+0ZxdPzAAKLgKZQ3+eTOiDJDxNOLU1eZ+oeUDrcxaemFDTKtd0CF05MG7sHlEb6WcuHwqN4w7qQ1KKE4s3EutMo5NrTI9sZQcpp3wy+xv+UcblLOOxOw\/8oWSFizvKfnp8p8YCRZt9uaaQXAFBTCv3MVozk9mqWhQoUKJAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgAUKFCgGf\/2Q==)\n\n\n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Make EDA and using the ML to Preduction<\/p>\n### Introduction\nHi, all in first ask your self-question: **Do you love reading** do you interest when you reading a book. if not. then you must read the book we know that reading is very hopeful and increasing your mind.\n> This Notebook contant that: \n1. Cleaning Data:\n    * Removing Punctuations and Numbers\n    * Performing Tokenization\n    * Removing Special and Accented Characters\n    \n2. Feature Engineering:\n   * Reading and Summarizing Data\n   * Finding the Length, Polarity and Subjectivity of the Text\n   * Finding the Words, Characters, and Punctuation Count\n   * Counting Nouns and Verbs in the Text\n   * Counting Adjectives, Adverbs, and Pronouns\n   \n3. Feature Extraction:\n      * Implementing Bag of Words and TF-IDF\n      * Implementing N Grams Analysis\n   \n4. Data Visualization\n    *   Visualizing Polarity and Subjectivity\n    *   Part-of-Speech Tagging\n    *   Visualizing Most Frequent Words\n    *   Words Cloud","d5dbff8e":"### Adverbs\n\n    An adverb is a word or an expression that modifies a verb, adjective, another adverb, determiner, clause, preposition, or sentence. Adverbs typically express manner, place, time, frequency, degree, level of certainty, etc., answering questions such as how?, in what way?, when?, where?, and to what extent?","c2fae0cd":"\n![to](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMRERYREhQXFhYXFhEWFhkWExgTFxcWGBkdFxYWGRkZHyojGRwnHBgZIzclKSstMDAxGyI3PTguOyovMC0BCwsLDw4PGxEQGC8nIR4vLy8vLy8vLy8tLy8vOC84Ly8vLy8vLy8vLy8vMi8vLy8vLy8vLy8vLy8vLS8vLy8vL\/\/AABEIAH8BjgMBIgACEQEDEQH\/xAAbAAEBAAMBAQEAAAAAAAAAAAAABQMEBgIBB\/\/EAEcQAAIBAwEDCAYGCAUEAgMAAAECAwAEERIGEyEFFSIxVJOU0xRBUVJT0RYjMjRh0jNxdJGSlbPUcnOBsbIkQoKhQ8MHRGL\/xAAVAQEBAAAAAAAAAAAAAAAAAAAAAf\/EABgRAQEBAQEAAAAAAAAAAAAAAAARIQFB\/9oADAMBAAIRAxEAPwD9xpSlApSlApSlApSlApWtf3QhieUgkRo7kDrIUFiB+PCtMcoTn\/8AVbvYvzUFWlS\/T7jsrd7F+anp9x2Vu9i\/NQVKVL9PuOyt3sX5qen3HZW72L81BUpUv0+47K3exfmp6fcdlbvYvzUFFzgE\/gah8lJdSwRSm4UGSONyBAMAsobA6X41sSX8+k\/9K3Uf\/li\/NWTZr7nb\/wCRB\/wFB59Duu0r4cfmp6HddpXw4\/NVWlBK9Duu0r4cfmp6HddpXw4\/NXKbQWUg5ThjF5dJHPHeSuqTYCmLd6Qg09EdNuHGvl1tlJJbFjFuRcWd5PaOsutxuo9Y3i6QEbSysNJYcCM0PXWeh3XaV8OPzU9Duu0r4cfmrj+Rtvs2HpG71hDZwKXkKySzyqgLOugmOPLghuJYZIXqzTj2wkZYgtv9ZLctbYZ3SPIiaYSo7RhnjIUDOkHr4cOIXfQ7rtK+HH5qeh3XaV8OPzVzlntM9xLakRlHfnNGTfndCS2IQhvq8upIyGwCvsPVWC32+kaAztbx6XuEtrdknd452OrXJq3QYRLpPEKxbBwOrIdV6HddpXw4\/NT0O67Svhx+aoEG18sr20Udth5zeK+8leNU9GK6nUmLVIjB8qdKnq4DjjsxQS\/Q7rtK+HH5qx3NvcqjN6SvBWP6AeoZ96rNa99+ik\/wP\/saDzyfMZIo3PWyIxx1ZZQT\/vW1UDkm+nFvCPRmP1UX\/wAsXuj\/APqtv0+47K3exfmoKlKl+n3HZW72L81PT7jsrd7F+agqUqX6fcdlbvYvzU9PuOyt3sX5qCpSpfp9x2Vu9i\/NT0+47K3exfmoKlKl+n3HZW72L81LXlJmmEUkLRko7qS6MCFZVYdEnBy60FSlKUClKUClKUClKUClKUClKUClKUClKUClKUEzaX7ncf5E\/wDwNUIvsj9QqZtQ4WyuCxAG4mGScDJQgdf41Qt5AyKykEEDBByD+oigzUpSgUpSgUpSg8SdR\/Ua57kDly3S1gRpVVlhhVgcgghACCMcDmukpQS\/pFa\/GT99PpFa\/GT99VKUHPT39g8yTtIhliWRUbUw0rJp1jA4HOlesHqqdDZclIHClAHjkiK72QqkUn6SOJS2IFPrEenqHsFdlSg497fksqykpho4Ym+skHQgOYTkHg6HqcdIcOPAV7g5sTdqrpmKV7hMyuzmUgo8rMzFpCQ5BLE9Y\/CutqVL9+j\/AGef+pFQQ3tOSiApZcAXY4TSj70c3HEN\/wBx\/d6sV4t7LkuOLcCQ7sbrSrXdw+7MfGMxFpCYSPUU0nqrtKUHKWnNsTROjIGgEwjOtyRviDMWJP1jMVBLNk5yc8TVf6RWvxk\/fVSlBL+kVr8ZP31gveX7YxuBMhJRwOv2GrdKDS5IBFvED1iOMHPt0it2lKBSlKBSlKBSlKBUqb79F+z3P9SCqtRp519PiXUNW4ueGoZ\/SQnq6+oH91BZpSlApSlApSlApSlApSlBo8rXZhiaRVDEaQAWKglmCjJAOBx9lYN7efCt\/ESeTX3aT7s\/64v6i1J285bltI4DHLDDvbhYnknXVGiGN21Ea19aAdfroKu9vPhW\/iJPJpvbz4Vv4iTya57ZnbEuNM7JLqu\/RYZ7dCsUxMW91AFjgDDKSCRkVRXa+AlAiSu0kt1CiqgJaS2JEg68AcDgkgfqoKG9vPhW\/iJPJpvbz4Vv4iTya5u829iSW2cN\/wBPPBcSAbtt60qSRxpEi9Zcs7Lpx1j2V85e2ymie6SOBl9Gjs53Z9LAxyOd6pCtwIRWwRnirZ4AZDpd7efCt\/ESeTTe3nwrfxEnk1xN9t7Oj3ulYyirILE4OZJYpEt5A\/HDfXSoABjhmuq+lMKybpix0yx27yhPqVncKREWzkE6lGcYBYAnPCgx8vWFzd20ttJFAFljdCRPISuRwYZh6wcEfqrYsYbqGNIY4bcJGiIg9Ik4Ko0qP0PsFaw2xgMby6JdCTG3B0D6yfeGLdxjOWOodfAcevgcTG2gu5ob6SFo4jazOAssDOTGkCylGAkXDa2PSBIwBjPXUo6Te3nwrfxEnk03t58K38RJ5NQOSdp5I4I2um30skC3Om2t2XdQFQSzgu2rBJAxxODhTg19bbRFvTDqEkckFm9usS6pJnmaTJXjgoEQMScBRkk1Uq9vbz4Vv4iTyab28+Fb+Ik8mtWPam3afcAv+leAPo+qM6KXeEN7wAPHGMgjORitW02ygmC6BKm8inkiZ4sK+54SAceJU44cAfUaKqb28+Fb+Ik8mm9vPhW\/iJPJqPDtgiR2e8SVzdLbiN0iULI8iByRHvCyADiesKPWa2odsLd3KjXj\/qND6cJKbfO+WM54lcHrxnBIyBmg3WmvAM7q38RJ5NbXJl1voI5cad5HG+M5xqUNjPDPXWtyRyst3AJ40dUdQyGRQpZWUMGABPDj68dXs4162a+52\/8AkW\/9NaCnSlKBSlKBUqX79H+zz\/1Iqq1Kl+\/R\/s8\/9SKgq0pSgUpSgVhuJNKM3XpVjjqzgZrNWvffopP8D\/7GgmWl3eSRpIIbcBlVhm4k6mGfg\/jWbe3nwrfxEnk1m5Jz6NFjgd1Hj18dAxXGQ7Q3kM12bueFobLctLurV1eRZY9fRzMdOCR7c49VB1u9vPhW\/iJPJpvbz4Vv4iTya0Lva6GL9Ikq4jE0mUBMMJYqssmGOFJUnAycAkgYNZX2ptxPuMvwlSAyBMxLO6h1iLe8Qy8cYywGcnFBtb28+Fb+Ik8mm9vPhW\/iJPJqJsxtfvljWdWV5ZruONghETNDJIAgOSdW7jz7Dg448K2PpvbaZmYSruYRcMrR6XMJJAcLnI4qei2lurhQU97efCt\/ESeTTe3nwrfxEnk1A5e20WOGVogUkhksQ4nTSBDcSqgk6+orr6zkEcQK93u12GtZ4+FrLJcxO7rpLaInkjljOfsExNxI4ggjh1hc3t58K38RJ5NSJORZmvkvzDb71IHgH18n2WYMD+h6x0h+pzUHZ3bW7nS3SZI455LlRKNLaVtTbel6+J4NpZVyeAOa6WDbK3ZS+JFUwyXEZZNImhjALvHx49a8Dg9IHGONBQ3t58K38RJ5NN7efCt\/ESeTU5dromWIrHMWmjeWNd2CxhUKTMQG6KdNRg9Ik4ANc\/c7RX7cn2l9HJAu\/Fojo1u79OaQRl1IkGFAYdHB6uvjQdjvbz4Vv4iTyab28+Fb+Ik8mptvtMkZ3M7l3jkSCWdICkCzyYMcZyzFSQ6DPEAsMkZxWps3tgszzRSkGSKa9DaB0YoIZCiPKSeiWA4es4JAwDQXd7efCt\/ESeTTe3nwrfxEnk1LO3FsIZJmEirHFHcdJMM8DnSsqDPEZ9Rww4ZAyK+Xu1cemQKXikimtI3EsWo4ndQhChhwYNjOej6xwxQVd7efCt\/ESeTTe3nwrfxEnk1oybWwpPJbypLG0UUk7syoUWFM\/WEoxKg4OMgE+yscu2lukbyOsqlPR9SGP6zTO2iFwoPEMc+vIwQQDwoKLTXgGd1b+Ik8mtnki738EU2NO8jjk05zp1qGxnAzjPXWSKUtHqKshKk6WxqX8DpJGf1GtPZT7ja\/s9v\/AE1oPu0v3Z\/1xf1FrHyzyXHctAzvjcTrMoGkhmCOmls+rDn9wqnNCrqVdQykYIYBgR7CD11pcwWvZoO4j+VBrct8jpcCHEm6aGVZo2TQcMAykFWBBUq7D\/WtDk3ZSGF4XE7sYpbyYainTa5zr1aQOAycYxVjmC17NB3EfypzBa9mg7iP5UHNSbAWrpFHJIziKK6jQnRqUzybzeqcdGRGHRIqjJs3G7zPJMzb+2jt5wQmHCBwsnV0W+sbgOH4VU5gtezQdxH8qcwWvZoO4j+VBzybC2ois4d4xFnLvUOpcyHVvGEntBcKx\/FRW3NstEZGbeuInuEuXhymhp00kHOnUFLIrFQeJHsJBrcwWvZoO4j+VOYLXs0HcR\/KgktsvF6ObcSsMXL3SSAprSUzGcEAgggMSMEcRWSz2dSOO6jaZnN0ZGkZtGQXiER0hQBgBRgYqlzBa9mg7iP5U5gtezQdxH8qCNJssmmPd3EkTJbLaMybsmSIDhkOpAcHJBHvHrrBPsPalxIjmN44rWGBl0loBbsWRkZgTk5wwPAjga6DmC17NB3EfypzBa9mg7iP5UEW02Pto7o3SsMtLJOV0Qk71x0jvNG805JbTq4E+zhX232ShRLdBKx3Ed1GpOjpC4+0W4dY9WKscwWvZoO4j+VOYLXs0HcR\/KkyCDY7HrBNDKly+YLeG2iDrG6pGgAYqCOiz44sOPq6hSy2JtoXd0bAYXOBohypnyXJkCa3xqYKC3AEjjwxf5gtezQdxH8qcwWvZoO4j+VB85Ks0t7aO3V9SxRRxKSRkhFCgnHr4U2a+52\/+Rb\/ANNa+8wWvZoO4j+Vb0cYUAAAAAAADAAHUAKDJSlKBSlKBUqX79H+zz\/1Iqq1Kl+\/R\/s8\/wDUioKtKUoFKUoFa9\/+ik\/wP\/sa2K8kZ4Gg0uR5B6PDxH6KL1j3RUa\/2Wim9MzMw9MEIfBTobtAg0cPWBnjmqvMFp2WDuY\/lX3mC17NB3EfyoIvLux9vdTCd2AbdpE3Qhk1IrFhpMiMY24sMrjg34Ah9D7b0s3QIBMqzFdEJy6oEGHKF1Toq2kNjIzwyQbXMFr2aDuI\/lTmC17NB3EfyoIdhsfHEY83EjpFJcSxoTGoWWfXqbUqhjgSPgZ4Zzx4Y0bf\/wDHsCRSRb9yJLX0Q9GJcR6i4foqMyZZssc5zmuq5gtezQdxH8qcwWvZoO4j+VBG5X2RguWmMkhxMLJXXoEYtpDIowRxDFiDn1Vg5U2Jgns5LEyssLSmWMKUBgydRjj4fYyXwD1ByOoADoOYLXs0HcR\/KnMFr2aDuI\/lQTH2XtzfenFul6Obbd5XRpJ+17dWno9fVWrFsbEE3bTyOqW81rDq3eYYpQFbBCjW2FUZbPBfaSTd5gtezQdxH8qcwWvZoO4j+VSCZNs4hMDRzvE8MLQB13ZLwsFDKwZSM5jVgR1EescK+DZmIWUFjvW0QNbsrZXU24cSKD6uJUZqpzBa9mg7iP5U5gtezQdxH8qokXGysTyO29cRSzxXEkIKaHmj06TqK6gpMcZIB4lR6iQcFrsVbxSPKrkNJJdtN9kb2O4OXifA4qpwVPWMfic3uYLXs0HcR\/KnMFr2aDuI\/lQczDsBbLby24kwssSQaljhjZY1Oc5RBrc4GWbOdI\/1pcobMQyyTSNKwM0llIQCuAbVgyAfgSONVOYLXs0HcR\/KnMFr2aDuI\/lQQ4NkYwbreTtIt2ZN+GEYZlZCioHA1KqqeiB1f61ittiLdImi3n2ntX1COCI\/UOsiDEaKDqZcsTxOfVwroeYLXs0HcR\/KnMFr2aDuI\/lQbjyrpPSHUfWK0NlPuNr+z2\/9Na98wWvZoO4j+Vb0aBQAAAAAABwAA6gKDJSlKBSlKBSlKBSlKBSlKBSlKBSlaF3yvBE2iSaNGwDpaRVOD1HBPVwNBv0qX9IrTtMPfJ86fSK07TD3yfOg+XvKzRy7qOCWZgiu27MICqxZVzvZEySUbqz1Vj54n7Bc95af3FYuTL6Ka9mMUiSAQWwJRgwB3k3XitHaraaS1uIYIxb5ljmcvczm3QbsoNIYI2SdfV+BoKfPE\/YLnvLT+4pzxP2C57y0\/uKmch7ZRS2q3E+Iy0s8SrGWnEjRMwZodC6pEwpbIXgASerNULzai0iVWeZdLRGYFQ0g3IGd6SgOlPYxwCeA40HvnifsFz3lp\/cU54n7Bc95af3FG2ktg6IZRqcRFei2Bvf0QZsaUL9ShiCfVmibSWzS7gSje65Iyml9QZFDvkYyFCsp1fZ6Q48RQOeJ+wXPeWn9xUGa3nblGO\/9FuwqW8kRi3ttpLl1Kvp9I0\/Z1A\/iFPqqxZ7UW9yum0kWSRomkhDiSJJAOGQxTioYgNpBK54ipPJO1dyzz+lR28MVvLuZXWeSRjIUVkEamIasmRR7SeABoLnPE\/YLnvLT+4pzxP2C57y0\/uK0uUNq41Fu8JV1luVt5C2qMxZVmbUrAFWGkdFgOutmTaq0WNJTL0JFd0OhzmNPtS4C5EQyOmcLgg5wRQZOeJ+wXPeWn9xTnifsFz3lp\/cV4vNqLSFzHJKFZd0W6LsFEnCNmYAhVJ4aicZrG+0kcbT709CGRY8xRzzMuYhKTKFj6HA5yCVxjJBOKDPzxP2C57y0\/uKc8T9gue8tP7isX0ss9Mb74aZUWRDofG7Y6Vkfo\/VoTwDPgE1t23LUEkz26OWkjOJAI3whwGAZ9OkEhgRx48cdRwGOz5YZ5Vhe2mhLJI6mRoGUhCgYfVSuQemOse2q9QuVruOK7geR1Rd1djLsFGdUJxk+vAP7q2fpFadph75PnQVKVL+kVp2mHvk+dPpFadph75PnQVKVL+kVp2mHvU+dbVlfxTAmKRJADglHDYOM4OOo4NBtUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgUpSgVLsh\/wBVcf4bf\/ZqqVLsvvVx\/ht\/9moKeKYr7SglQ\/fpf2e2\/qTVqctbNR3VzFLKEeNIbmJo3QNq3pjOoE9WAhH\/AJVt8o8iRTuHcyqwULmK5ntyVBJAbcuurBJxnOMn21g+isHxLv8AmV751BBbYmXdwJ6Rqa1adYWdZBmCUALHIYpEYsulekDxC8RxzUzl\/kF7RGjthIzScnm0wlm8yMylymlkbEBJkb7fQwRx4cew+i0Hv3X8yvfOp9FYPiXf8yvfOqQQI9hSzq7SAK62RmQh26duqr0MSBOOheLKSCMj1Y3Y9l5Vvn5Q3ymRxJG6CLCm3wN1GpzkSKy6ixznURgDGKX0Wg9+6\/mV751fforB8S7\/AJle+dVHN7A7PzrDYy3DafR7eREi3JjdWkwG3hY8cKuAAB15NULjY8sJyJQHkvYb2I6MhHiEYVXXUNYJj44I+1+FU\/orB791\/Mr3zq+\/RWD4l3\/Mr3zqCFylsGLlSLh1cyXiXU4CMiOqR7lYUGvK9EL0iTk59vDzd7DyOsRNwDJFDNa6nSTDQuwMZYRyLqdQoBySrccgeq\/9FYPiXf8AMr3zq+fRWD4l1\/Mr7z6CRe7Ea0uo0lCrcW9lAgKE7sW+rBPHpZDdXDGK8ctbGyzi4RJ1RLm4imlUxsdUUcSRmAlXBAYx8SPUcVb+isHxLv8AmV751PorB8S7\/mV751BD5V2Ied9bSouuCO3lRY5BHojdiu7QSgfYdlw+odRx6jf5F5H9HluZNWoTyrKBjGgLEkeknPH7Gc\/jXj6KwfEu\/wCZXvnV8+i0Hv3X8yvfOoM9399g\/wAm7\/5QVVxUqw5Bigk3iGZm0sgMt1cT4ViCwAlkYLkqvEceFVqD5imK+0oPmBUzk\/7zc\/rg\/wCFVKl2H3m5\/XB\/woKlKUoFKUoFKUoFKUoFKUoFKUoFKUoFKUoFKUoFS5uWoUdozvCykBtFvNIASA2NSIRnDA9frqpUfkx8PdnGcT5wOs4t4eA\/Gg98\/Re7N4S48unP0XuzeEuPLqTb7dWzvZxgSZvVZ4squEC+qXpdEluiMauIqtyPy3Fcxb5Mqm9liUvpGpo5GjJXBOQWU49f4Cgc\/Re7N4S48unP0XuzeEuPLrfadQdJZQeGASAePVw\/0P7qi8sbVQ2zOjh20W1xckxhWG7gKh14sOn0xgdX4ig2+fovdm8JceXTn6L3ZvCXHl1P5H2tjnkELwT27mIzJ6QiKJIwQGZWR2HDUuQSD0hV43Cetl6gftDqPUf1Gg0efovdm8JceXXP8lXbx391NLJM0Mgt9wnokw04B3mSIsnB6s+012G\/XBOoYGcnIwMdeT6q07vlaGN4Y3kUNMxWIdeshS5wRwAwp4nh1DrIoMfP0XuzeEuPLpz9F7s3hLjy6k2O2e9ufRfQrtHAjLl0hCojkqrsVmJ05VuoE8OqqnLfLsdrbtcNl0VkUiPSzZZwg62A4FhnjQeufovdm8JceXTn6L3ZvCXHl1vb9cElgAvBuI4fr9lfXnVftMo4Z4kDh1Z\/9ig0Ofovdm8JceXTn6L3ZvCXHl1mflECVo2UqFRH3jFRH0mKhc6s6uHsxxHGtgXSEata4zjOoYz7M+2g0efovdm8JceXWay5TjlZkTXqUKxDxSRnDEgEa1GRlT1eytlp1B0llB4YBIB49XD\/AEP7qnxffpP2e3\/qTUFalKUClKUCpkvLUKuyfWEqdLaLeaQBsBsakQjOGB6\/XVOuXl5WSzivbmRXZI5wWCAFtJihBbDEDAzk8eoHroKfP0XuzeEuPLpz9F7s3hLjy6l3O29tHPdW7a9drAbiUhRpZAquwQ6ukwDpw4faHGt\/kvaGKeR4groyLbsRJpGd9HvFUYY5YDgfx6s9dBl5+i92bwlx5dOfovdm8JceXXh9oIkfRJmMmfcR68fWPo15TST0cZ4tj7J\/DNNZQSQCMjGRniM9WR6qCfz9F7s3hLjy6c\/Re7N4S48ut5bhCCQy4BwTqGAfZn219364LahgZycjAx15NBoc\/Re7N4S48uuf5Hu3jvruWV5mgk3G4T0SYacJ9ZnEWTxwBn1V15nULrLLp9uRj8ONemlAIBIBPVkgZ\/V7aCdz9F7s3hLjy6c\/Re7N4S48upXKe2Xo9wLY2d3I7a92Y44SkgQAuULSg4GodYFX5r1VR3PHQpZlGCwAGrBGeBoNXn6L3ZvCXHl05+i92bwlx5dZOSOVY7mGOdOCyxpKqtgOEcBgWAJx1+3FbfpC4Dalweo6hg+vgfX1H91Boc\/Re7N4S48unP0XuzeEuPLrLLyiFeNNJZZBId4pTdoEAPTJYHjnhgHq44rZS6RgSHUgcSQwIA\/H2UGjz9F7s3hLjy6zWXKcczMiatShWIeKSM6WJCnDqMglW6vZWw9ygAJZQDxBLAAj2g1Og+\/zfs1p\/UuKCxSlKBSlKBSlKBSlKBSlKBUrkj9LdftA\/oQ1VqS3JLB5HjuJY94wdlVYWGoIqcNcZPUg9dBwUWw90iXpUrvFlibk\/LDCrFcNdqDx6OXcqc44AVurshLFFAphjuQlgbYxu6gJOxDSTDWCCrnIYjpAKMA5NdlzZN2ub+C38qnNk3a5v4LfyqDmOTdkpllZpGDOOTra2Sc9JxMm8EjjPSH2lOfXUZdjrjdlEtYoiOSbiyJWRPrZ20aW4f8AadLEM3Hic49f6BzZN2ub+C38qnNs3a5u7t\/Kp0c5LsKvokyq8r3EtpJbq887zCPWmCq54KpYDOB6hUnlfZq8uI7n6gIZbGzt0UyoSZIpWZ8kcAMNkH9Xr4DuebZu1zd3b+VTm2btc3d2\/lUHJ3+yku8uDFEm6a45OmWIFUSZYVAlQr1KSQDxGCVGeHGs0uz7l7OYWkUYhuriVoVdWKxyo6h+OFDa2Vyq8AerJrpubZu1zd3b+VTm2btc3d2\/lUHPcubPXE01+0bCMT2cMET6sfWKZSwOOKjpqM\/iak8rbJ3E0NyIYEthLFYxpCjJjXDLrebo9AELhR6yFGccBXb82Tdrm\/gt\/KpzZN2ub+C38qpMHFzbI3IgihA1rBdzSlgYTJcxyI+mVhKpjM6u+DrGDp1Ag4x7tNjJALdJY1kSKxvYSHZJQsszoyIOgoKhQyghQAABXY82Tdrm\/gt\/KpzZN2ub+C38qndHER8gX8URZIo5JubLC2AldGTfxu5dm1Z1BQwYeokYrFLsVKIbaOKF1SEXSyRu1s7yyTKv153gkj4nWp\/7gGOOHA95zbN2ubu7fyqc2zdrm7u38qr3TmOf2c2XeG7SaVQ4jsbS3SRmEjiSNpDJhiAepl6WBmr0X36T9nt\/6k1eubZu1zd3b+VXqw5NMcjStK8jMiJ0xGMKpZhjQi+tz10FKlKUClKUCubNgLiLlC3bqlkljP8A528S5\/8AddJUk8jsHkeO4lj3ja2VVhZdWlU4a4yepB66D87bYa9ks4N5o9JknlF70xj0abQkgBBwSI4IeA\/GrPL+ycsz30iQoXl5v9HYlQw3OkvgnimCP9a63mybtc38Fv5VObZu1zd3b+VQchdbLzGVptykgHKgugpZMtCbYQnGrgDrwdJI+z+qsHJWxlwlwzyEnB5RJfXEiyi4LaEJSLfHgQTqbolF06hgDtubZu1zd3b+VTmybtc38Fv5VB+X8sbPz2nJl5vVURNDZIA5iLl0mUFS8CqGiAIAZlD8T1Vfu9m7g+kNFBHGk01i3o4MbdGD9JKoI3QkY6MBgRiME4PAde3Jch4G6lP647c\/\/VXrmybtc38Fv5VBxXJ2ytxFHBvIUlWGflB2gLxkMtwWMci5AQsoYjBC8GbHsOLlnYu4lddKhENtawKkUseLdopGZtMksTOFAKlWjw2pBkAAEd1zZN2ub+C38qnNk3a5v4LfyqDR5U5Mlkv7SZR0Io7tZGyAQZFQJgeviprmuStkriPcKY0RoIr5JplYFrszKQucdLixEja+plAGeuuz5sm7XN\/Bb+VTm2btc3d2\/lUH59ydsLdx2MtqSGeWGwYyM6lg0WkS2ZOCDDpUheBXpNkHPHfttkJcQa0yo5QFy8cjQnTGIHjzoiRYwS5UlVB4knJJNdlzZN2ub+C38qnNk3a5v4LfyqDj7LZq4heFlgRlhl5aZY9aBSk7FrdB6grdRHq9daVtshcG0ZWh3dw9xb3FywMGiYI2d1EvSUKgxpDrgkceskd7zbN2ubu7fyqc2zdrm7u38qpByHJ2yEoeyMqBkinv5pFkaNt2JkYRgKiKn2jqwq4Uk4Jxmurt\/v8AL+zWn9SesnNk3a5v4LfyqWHJhjkeZpZJHdI0y4jACoXYABEX1yN1\/hVFSlKUClKUClKUH\/\/Z)\n\n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Tokenization<\/p>\n\n    In Python tokenization basically refers to splitting up a larger body of text into smaller lines, words or even creating words for a non-English language. The various tokenization functions in-built into the nltk module","322d678e":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">END<\/p>","117b3897":"### Removing Accented Characters\n\nAccented characters are important elements which are used to signify emphasis on a particular word during pronunciation or understanding. In some instances, the accent mark also clarifies the meaning of a word, which might be different without the accent. While their use in English is largely limited but there are very good chances that you will come across accented characters\/letters in a free text corpus. Words such as r\u00e9sum\u00e9, caf\u00e9, pr\u00f3test, divorc\u00e9, co\u00f6rdinate, expos\u00e9, latt\u00e9 etc","fa0e62c6":"* Now it's very clean","7d2f4a6c":"### Spliting data","9f360529":"\n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Visualization for data<\/p>","da2abdc6":"### Adjectives\n\n    In linguistics, an adjective is a word that modifies a noun or noun phrase or describes its referent. Its semantic role is to change information given by the noun. Adjectives are one of the main parts of speech of the English language, although historically they were classed together with nouns.","d18fe6ce":"### Text Polarity\n\n    It is the expression that determines the sentimental aspect of an opinion. In textual data, the result of sentiment analysis can be determined for each entity in the sentence, document or sentence. The sentiment polarity can be determined as positive, negative and neutral.","d9167499":"\n <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Reading and summarizeing Data<\/p>","3b7dab7d":"![fea](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAUYAAACaCAMAAADighEiAAABm1BMVEX\/\/\/+y1Ov937vsvsAAAACy3sf8\/Pzy8vLe3t74+PjAwMChoaEAcby32vHa2tr\/5cC\/EBr88\/Obm5tOTk756Om9AAB5eXny19js7OzS0tKxsbH0xce5ubmjg4SVd3iRkZHmyqp\/f39ta2qHqJcAkkU3LyVWVlfBJy2pqalyiZg6ODlCU0ohHRobISGCcl5MWmVMX1VtX09KODlZa3jjoqVZcWSzyuA4LCzEOT7RcXTXg4ViYmIvLy9DQ0NcXFyo0rzSuZsAaLmSgWwpKSmcw6+qln6SrsFWS0DBm50UFBQiHhuStqNmf3IyPjchKSV5l4cAiUGAZ2jasLJZSEhxW1yDnK0xOkFOXWcEeL8vAACpIicAJUgAQnQAFDIAZqoAWZQAS38AN18AFyoTCgAiEhMJGRIZERcAVSQAaS8AQxkAHwCmXmBZKCc4Rj8AeTkmHyS9UlW8bXoAMRTMU1e2qry9X2u5h5ZhgITCq49fialFPTS0vNBWd485h8aawuFkoNLP5fOHs9lUg612oMhxEhZKAAOVHiIHGhrdkpQf2co7AAASpElEQVR4nO2di0PbRrbGBxj0NIZKiasRAiHR2EJACCEhEFnmYUPsQEKAhNDHtru32zS9u2nTpXuTPkhImu7mz74zkmyMLcmyEYWAPsAyEiPLP5+Zc2bmjAAgUaJEiRIlSpQoUZ0oijrtSzgHwhRZNkF5LLGKXihkOInGJE\/7Ws6w2PDDjAg\/\/+KLv8AMg0EmHAMk2SbyPaBwzoYu\/uXLFNZX0EozCccgFfwhAjWrOdsMTLn6CqqIoROM\/tIVbJGFgoQEUJB0m7V0ShclfIAjGCkK\/tXDmPpc5NJSYo7+oos8yCBFRRooSlDSZGAY6Qw+oDjWmIZfVjH+9WsjMcdAUSZns0wWY8xLWWBLQDXtQ4xctU6TWi1w6QRjkGRVZNMWUh2MIgM0xdntYKSYQ2v84q6g4Fp9uhd7ViUjGxmqpqRtIy\/ZQNARJzKkbVSISVLs3b9VMf4PzMqJNQaIExCgZGyAsoJY7LVlA3Aqgw9IxIVTrAG\/cin+7WuxAi2UYOxAFCtl4Be4Xn\/5ObRUXjChGBAgJQoRxsiokOiurvK4aUQWnDQSi2xXFC2lOVXXNVXgFSfekTBWTYpYOkwne+FnSxRLS4hTZMOQOeR1Bmk5D\/UodTuUInuhQBKODCJKHw5NUCgLTS4cAycIaojkCzbQQRGQEiNJ9JH3jV0P5OmQcpN\/vx6iv1fQBeNIQBI1NmesUIEZJrDM5PBgiIYqCuZ4oTACt5Xz2cvZMOsfSVIsxtgTqMEhaHABHfTQFjWSkzqtsp0rbcGi7FO3W2MM6VlGpBjspE60LHsizpEEQGpTANQaoyojv2E3Q48qPqBxVSOUlWnfsqwWoSznX\/b4MopQTx\/d1TFGc2cmmnZM\/9F4Co7fbKVvCv4zIgycvtpKUGU6btRbNQlIhDZXX0U7xzjWF01jec7PSVEsHO1tpfGAEWgGjvS30pUM6nT0mqYptkWTwGRgxTis2x1ipCiMsSuK+saKvk6KoqNgtGW\/EWgKY+xuof4rOu7NdYCRFswnP4iG1KpJoAXcS3QDINzrPnmM7vBn0xkiYTR5348gHQVjwf\/jazEQi57Ab58+\/Q6KEeJlxYRZDgOFaqcY2TYwOmdoejvRMOKPoFOMWb+PIG3a6cbTEfEF3tlK8LtPiB5gjhEmWJEF8wr23Rx1sTBmGYBrIE2MEj\/gb4l847ZOMh281v9+4ur7iBOsklqBEFak4kljnAjGuLDQ27tQZVZyHtdOFqMmkMQIUUIqsCUxL9kZOiu6AMkgDgufehg\/+c5WfH1rkwwyPmnlo2BseiPxYFy\/2btQ8Tgu3Hc2cGH8JDFSogYshtOcmcEK0BHgZUYnAE1yiQg+qGJ8+sSI1g22nXFe2Bqjz8nacDEhGG\/e7y3Bkofxnoux3h7jxwhAQamfYGWAZopkUlAQyEGuDiPMiypNSa0sEuUtVVa4Fm3jp\/\/49\/ztZr3\/ZxwYrz3r3RhfW7h3b7T3\/r37vevPbmJrvNdbeXZ\/YW3y\/s0TwSgLWRrpHkaRAaozwcoUnBNL8Psqxm9\/yNo6zWI7KxpA4nAQGgSSvLeap\/aDeWM+l5t7\/ny+WXu53I+\/RgEZivHZ+ujN9dH1jdL4xjqu1PcxQoIR9o6vjZdGTwIjb5iMgjuKjKmZkg0MUUGmgqO\/vMannbbqO4\/iA5gVcOyPrZET0gARP8IAI2PITY6erqDD8HtouNwE8vbA3D+eqHLaZ0iDNTefX\/7x2BjXrt0c3bg5unBvfWPh3lrl2riH8dra\/YUTwZgmXQ8OkR9nghUp3i5FkQhGBX7rYvzXE+1I1gRFY36KnocmoIt5S0O1FD8EoVCzxkr5ennwKMi9gduhnvqn3N7s8TBiYhtr6+ujC882MEbHyVQx3jsZjOGiWEmF\/\/r+wYOn3zzR1aAcHoqTVZEDMjZQUwJpDW\/FasAzMTg0vLU5tDXUU97CD4Ri7sZgKMa+2b25lhxbYLy2tnazdO\/axsLkzcne8fWNWqXeePbsVDAyvImxPDEzzgRrmHuhGMTxLNAcP13xPPXE1nZ5C1vkrZ5bQ+VNvGs+1zpunJ3797EwlnDUuFDqLWHnXCphj71Wwn7a+VnoLW38+RjdCVZe1TRVMJSICWUOR73iYry7vT04iDFub93afFjG3mXgRmuMXb8O\/NTX1dcX4mtCMYaoNDo+2gpjf+wYXY6KLOMQJkpnkMgi47jVzuDE4HZ5c\/hheXhz8+H2Fq7SzwcjYOz7vxwGtbNzAhjX11rFjSNXqxxfkl\/7V5b7D9F2ihFzZNJkfjVy7jfJPD10MT3DQ7e2HpbLcOvhQ2KMWz0BGFG6rhczm\/upb2oV0\/KYedFkX1dfCEbHKXbYp1boGsbFXzxm\/S9H+j2M\/bD\/WBi9CVYsup05iFrAs91THh7a3i73XB8cGhrsmd\/rCcIoQ40GVYx9Pz7vm5rt65qZml2dmpnd2Vmd6RpbHRsbe7Sz2vV4xh+jBgUWNGAsjb4YezT2YrTUAqMFZQp4GO+MXJ1e7l+5M7I8MnJneWXlzp2XL+HVkemVY2Csm2Btp0zAQNne7RpGpSFuVLBfMmp96p8G+qZmxh7NYHxdU5hfV77r8erjqdmd2alHM13uCE\/jGXCjnFeOjH4vbPy8v5tKpXb3f95YqMeIURxtD3QIbcRUMU6MXFn8ZaR7enH65dXllemRK92w++rL41ijR7Jd1xSAMfe+itEWLT1TryzxTHbFw\/jrQNcUNr+dqZ2uGfgIY8Tb1cerq5OP4WxlFVfuseYzkJACinUYS2P7tWTh\/bFDgxyv2NmGsnm3rIfxTv+dRWyQ04tXuleWV5a7Mcb+xSsjx8XYtoIwOn7axVjQM1q9Cg7Gux7G2YHZqVXcJnZ1zTyaqcM4hQ1xdnKWYBQbz2A3YCz9nKrT7m+lQ4xNZZ2PIFuPsX\/65RGM\/Yu\/nBrG8vZDtzO41YjRr1JPHlZqF+PqzmzX1KOpR2MzXTurO6vY6VRWZ2fJ3oBKbSqHbePCGK7MS6maQe6OhVdq8bBS\/4IxjuDavDi9Mu1irCyOnCLGoc2tW1sk22SbPB7B2OggjrgYgnGMwJpanX08toqRruLNGAaLq\/rUI38Xk4F8vYvZ2F96xb5+dXBYrzdCXExFBp6LGVkZwQ5m8epy98pI99Wry4svu5e7X17FtnmKGAc3h4ZubZbhD+WHt8qNGOuvJl0f8GCMzkAPicCdH2fj7XF2+GDkjgY8v73e7cN76dRSyvseWwjEyNH14bfzRR66cdV2okb3t1PEOLw5OPjDFg69cWcmDKNbrA5j551BR6OvMcS+168AOFh6fZDaP9hN7ZcCMTplmzuDL39ZjqUX45xeaD\/arMM4vPWwgjEODl0PwKjWFYsP41pql6WXlpYOwKulN4AlVrm70S5GYoWxYcwcB+PD8i0McXurvB1gjQgqh8Xiw7iRegWkpdRSF\/XqgKW6DsDBq90XbWOMqU\/doWoYt4du9UzgnuD2cJk89cMowiJbKxYfxhcp\/Our\/Tf4gQWvl1IHgN5v3xrPBsat4WHcJg6Xt7aGe4aGhvwwkmFKtVYsxrZxKfWa7Dl484aVsId5A1IdVOqzgbHHGfl2f0jE04yRnoTOfIRXLMa2cX9pHxx0gf0l\/Cqvl3YPwP7u6GlipPT2Vwq27MVUMbrLbvT4MZbeplK\/p5Z+30053prGbePbtj11rBjbWlCETEsTZCUiRsmd1IYodoy9L8ighBMx7rKAAm+WUi+Cw+8\/AWObCpvub+rFZD2Mxfgxrr2tdQP7Xi8d7C9VjfHDwBiWfNKIkdbJqEBR0zLp2DHi3mCVIzHJpVpf8EPA6K4xnAxIhfILeDQo1t5IrBjrOGK9rVE8JYxsPrKLQRY0SWIeCkjM88OYOTGMvaNvqyD3f67bfUrWGHXxr5yHJA+NrpvuP12MvaWN337f393\/\/beN+lmEs1yppcOkZZlqPWz752Ds7V1YIzqy6wxjRBlYrFtDeHYw+umsYuREKB5Z0XocjI5mB2ZbLOg4maTl1gs6TgwjPwkzEZcXtca4M0X0eCo3FarHO8WglQjPrrXSN4ErEe5MtxL0X4lwXEkahGpTil3HGIWsaJtEuetmuHTD77ZAFKtVzxCijOyLUcpEKKv5rqk5npAOTdknHOoYI81wisHzvJAT+FAZsm9OEcVKaU42WpXl\/NLYo5aN+x5jsg0tzvdIhxidlCHEYSkDMtdCiPFFQTMItSzqm48UsWy8dw5k1Uo1wGmWg9FHAze8ZelBGMk9GYjQAGJayD8LvXaG8LK+JI5TtjORNYJ8cOcGY\/z6lo9y\/3S3E1BV\/DA6mS401qWBS3QLBeTDkFSZ1kUDy7YqGvSynYjLQtu\/Nteux8hYWbFJuW3vicXXHMQRjNVl4R8NXGq9QjzgtSMp\/rIRVF+aNUyYadE\/dFtrXmjUwJC75euSTo9i9EQwnjMhQ06z1TsE05rfav4mkdYaO4pGDZTdbb2DuBgYneFDmOck0mVABViUoxi111qnG3R5y91V7yDOA0ZKbkFFg+8+y+U++wPyDCOTO51EPbFfay1d\/viwqa6+7nnAqKt+0fOhFPifnKN3\/81MQs130bC\/\/Npm9vLHoKmhPgcY2UnyaCCAJAnRSAEy\/iY+mFNcs5t8l\/P0KfYrTQFTO1yxKIyxSecAI9B0bJGyyFiIyyCoaFraUK00oKAx4dwME35Wxfgu35y8xPgRCNG5xQhUkTUBL2cQp6EMqAAgyhoPqCLQHaOEVYq5\/0ChqT+fhYf5N1F0fjFiW7SBYejIWVONMeZ5I13FSKE6a\/wvGZk6mhRIJq\/ayqw\/vxgtzgYqp3GK5tz7213VT026GOmqh8nl\/jAb74dFOQnTatCJfXReMbJiUQVc3gLpikVuoc5VNKkoMpgQyBCMbAbW6rTVaI2CO1Mf8daiROcVoysq6FeKZu5\/+plL0VYbhoyreSN6Gy90rjEGCneNORv+8e7dH9DWhAZPrXsYYeggxdHzXUyMxByRms3fE3VVMLij46QIIRVWyBBo9NNdVIysxCBnVN938NyAE2E3Zm0+3QXF6HJE3ph909RHgjGqagPrfmPnCcbIIiuBvcHzpmMJxjYUPHSeYIxFCcZYlGCMRQnGWJRgjEUJxliUYIxFCcZYlGCMRQnGWJRgjEUJxliUYIxFCcZYlGCMRQnGWJRgjEUJxlhkwEobOROBGO3mnRcKIwOtttLyfTEqfmlAFwojaPc+4n4YgZ9BXyyMbcofo58SjCFKMLpieYNsqOalv67k8IUKVYyKIAmBf2SQfPLzjdHinSRlyqy2Z8g4clyTQ4t7GDMaxwQnjTvZ0ucaI50HZLFbGtgSxTPY+DhNTANKMViWk9OAlfXwVHAXI4MDHEkEEk8D2aAkZJCUNFl2n9Fy4dxjBJqGbUkuApu2FJvVVaQWGMByqiZBGVKWkI+CEWXIv0GjbMUCnCZwUMYfDuU8421g88XzjxFoFmVyNhLTec5WsFUpJOajVRFbl41s7z9IBcrFqODPgslyBc6kJLWANGDS5GYLGtJBXpp0sqXPO0Zgc3mFo0WU5ziE2zdZIxXUcDGK0TBiXBijYnEIiZyHkRF5gtGUihcEY9qmAWUzFdxIVljHsjiNsQnGNK7mUTDSExJGn8YfAs9LWU4DeRoIMtI4bI0sBNa5x0jbeQFwtg4smrMzQJkUJNyS0WJGp\/E+Sclnw\/PAPU+Nija2PC2rSrauIRUUWCCZloDtMgv4vEiCpnON8bhKwu9YlGCMRQnGWORhbLojlm42\/mWCMUSep7Yadqcbd1wMjLjvouD+DKtrgFcVWddYJhvemfbkYlShyvGqIXJA1TIgneWsioKwj9dUWbUMNUOWd14EjJzNQMZCGg71rAxjMpCypWyU2QQXI44vhbxE00V6EllIlCjOYickm60YyJQgcmLPC4FRAzalyqJaMCxJFnAPG\/LFKEveXIw4VBdkwKiTUh6onKDjbg0OIy2mSOHNBBDIv7u\/EBgzLkbEsFkHowQZJtJtZQ4xsnnJdjACTahiZPGmQqkXBaOSoUxKUzIyDURGyqMKlUeRJlqpAQdjnhZkDLGCO9AaR\/45tgUqpFITjNDFeGngo5N9D2dAyAAqpSBWy0iCBGTVZCVdjTS5tddDHlWBQ4DXBFoDclrQJYYHnIWARuEnGqWQDuXHAyf6Ds6iJDvy\/ODt+Yh\/+H6vw4v5YFUoRF+XPhi1rs7d6PBqLoSoiHh6Lp\/\/pvE46onkgdm59yd+JR+2nkdp9ObnEmMM10e5+ZYO6fZA1IGgi6tLc3vh9frSfEIxgj6av\/w+GOSlGwMtMCfyNDh3ee6Gz13Be3pu7F2e6znty\/tw9PGN+Tk\/7b1P6nOiRIkSJUqUKNGZ0v8DURDU9v3zTpcAAAAASUVORK5CYII=)\n\n\n<h1><center> Feature Engineering<\/center><\/h1>","058fb0fc":"### Data Cleaning\n    Make a clean for data from NAN value","e5e007a9":"### Verbs\n\n    A verb, from the Latin verbum meaning word, is a word that in syntax conveys an action, an occurrence, or a state of being. In the usual description of English, the basic form, with or without the particle to, is the infinitive. In many languages, verbs are inflected to encode tense, aspect, mood, and voice.","978685db":"### Removing Special Characters\n\nSpecial characters, as you know, are non-alphanumeric characters. These characters are most often found in comments, references, currency numbers etc. These characters add no value to text-understanding and induce noise into algorithms. Thankfully, regular-expressions (regex) can be used to get rid of these characters and numbers.","80517c00":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Importing Libraries<\/p>","645eec7d":"### Bag of Words\n\n    The bag-of-words model is a simplifying representation used in natural language processing and information retrieval (IR). In this model, a text (such as a sentence or a document) is represented as the bag (multiset) of its words, disregarding grammar and even word order but keeping multiplicity.","8fb394e2":"### Text Subjectivity\n\n    In natural language, subjectivity refers to expression of opinions, evaluations, feelings, and speculations and thus incorporates sentiment. Subjective text is further classified with sentiment or polarity.","a3f9998f":"* we see this columns have NAN mising value\n* will drop for NAN columns","1c31e949":"### Pronouns\n\n    A pronoun (I, me, he, she, herself, you, it, that, they, each, few, many, who, whoever, whose, someone, everybody, etc.) is a word that takes the place of a noun. In the sentence Joe saw Jill, and he waved at her, the pronouns he and her take the place of Joe and Jill, respectively.","47e66183":"### Nouns\n\n    A noun is a word that functions as the name of a specific object or set of objects, such as living creatures, places, actions, qualities, states of existence, or ideas. However, noun is not a semantic category, so that it cannot be characterized in terms of its meaning."}}