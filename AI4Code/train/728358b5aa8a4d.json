{"cell_type":{"5b805f71":"code","c319eef3":"code","9fe7ff80":"code","29cc2139":"code","e5da2dee":"code","b96ecac4":"code","998312e2":"code","0a912491":"code","c0523752":"code","1b29dbe1":"code","9abb511f":"code","224c701b":"code","3d0a7516":"code","bbd39009":"code","5d88bd2d":"code","173b7ec4":"code","ec1d8f62":"code","af95100d":"code","064554c9":"code","17b5b983":"code","51c7892f":"code","50ec99fd":"code","640e288c":"code","817d7856":"code","f69a91cf":"code","b39dd834":"code","5c506412":"code","ecd27784":"code","097b4f95":"code","3b6be814":"code","0e74a821":"code","ff9073c8":"code","6c2ad433":"code","e7efd068":"code","778ead29":"markdown","09a1a008":"markdown","ae182cf9":"markdown","9eaaacf8":"markdown","dd5f437a":"markdown","f7cf1c29":"markdown","1ddee20c":"markdown","cff9037f":"markdown","33a6f7bd":"markdown","8ea4e6d7":"markdown","4bf8c977":"markdown","07cc1fc9":"markdown","20d957fd":"markdown","23139bcf":"markdown","0d80244e":"markdown","4e7f0cd2":"markdown","c5250367":"markdown","341fc0e6":"markdown","6fbde88f":"markdown","27fd5ddb":"markdown"},"source":{"5b805f71":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.style.use('ggplot')\n\nimport seaborn as sns\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.metrics import plot_confusion_matrix","c319eef3":"df = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\ndf = df[df.columns[:-2]]\n","9fe7ff80":"df.info()","29cc2139":"def run_int(df,col):\n  df = df.replace(col)\n  return df","e5da2dee":"\nGender = {'M':1,'F':0}\nAttrition_Flag = {'Existing Customer':1, 'Attrited Customer':0}\nIncome_Category = {'Less than $40K':1,'$40K - $60K':2,'$80K - $120K':4,'$60K - $80K':3,'Unknown':0,'$120K +':4}\n\ndf = run_int(df,Gender)\ndf = run_int(df,Attrition_Flag)\ndf = run_int(df,Income_Category)\ndf.info()","b96ecac4":"Education_Level = {'Graduate':1,'High School':2,'Uneducated':4,'College':3,'0':0,'Post-Graduate':4,'Doctorate':5}\nMarital_Status = {'Married':1,'Single':2,'Divorced':3,'0':0}\nCard_Category = {'Blue':1,'Silver':2,'Gold':3,'Platinum':0}","998312e2":"example = run_int(df,Education_Level)\nexample = run_int(example,Marital_Status)\nexample = run_int(example,Card_Category)\nexample.info()","0a912491":"from scipy.stats import shapiro\nresult = df.copy()\nalpha = 0.05\nfor col in df.columns:\n  if result.dtypes[col] != np.object:\n    if shapiro(result[col])[1] > alpha:\n\t    print('Sample looks Gaussian (fail to reject H0)')\n    else:\n\t    print('Sample does not look Gaussian (reject H0)')","c0523752":"plt.subplots(figsize=(16,12))\nsns.heatmap(example.corr(method='spearman'),annot=True,fmt='.1g')\nplt.show()","1b29dbe1":"t = df[\"Attrition_Flag\"].value_counts()\nfig1, ax1 = plt.subplots()\nax1.pie(t, labels=t.index, autopct='%1.1f%%', shadow=None)\nplt.title(\"Percentage of customers who left\", fontsize=14)\nplt.show()\n","9abb511f":"sns.displot(data=df, x=\"Income_Category\", col=\"Gender\", kde=True)\nexample.groupby(['Gender'])['Income_Category'].value_counts().sort_values(ascending=False)","224c701b":"df1 = df.copy()\ndf1[\"age\"] = pd.cut(df.Customer_Age, [18, 30, 40, 50, 60, 70, 80])\nsns.boxplot( x = df1['age'], y = df1['Credit_Limit']).set_title('The dependence of the credit limit on age')","3d0a7516":"sns.scatterplot(data=example, x=\"Credit_Limit\", y=\"Avg_Open_To_Buy\")","bbd39009":"\nsns.scatterplot(data=example, x=\"Total_Trans_Amt\", y=\"Total_Trans_Ct\")\n","5d88bd2d":"x = example[example['Attrition_Flag'] == 0]['Avg_Utilization_Ratio']\ny = example[example['Attrition_Flag'] == 1]['Avg_Utilization_Ratio']\nfrom scipy.stats import mannwhitneyu\ncoef,p = mannwhitneyu(x, y)\nprint('Statistics=%.3f, p=%.3f' % (coef, p))\n# interpret\nalpha = 0.05\nif p > alpha:\n\tprint('Same distribution(fail to reject H0)')\nelse:\n\tprint('Different distribution (reject H0)')\n \nsns.displot(data=df, x=\"Avg_Utilization_Ratio\", col=\"Attrition_Flag\", kde=True)","173b7ec4":"df = pd.get_dummies(df, columns = ['Card_Category', 'Education_Level', 'Marital_Status'])\ndf.head()","ec1d8f62":"df.drop(columns=['Avg_Open_To_Buy','Total_Trans_Ct'],inplace=True)\ndf.info()","af95100d":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nclass preprocessing ():\n  def __init__ (self,df):\n    self.X = df[df.columns[2:]]\n    self.y = df[df.columns[1]]\n  def scaler(self):\n    scaler = StandardScaler()\n    self.train = np.array(self.X)\n    self.test = np.array(self.y).reshape(-1,1)\n    self.train_sc = scaler.fit_transform(self.X)\n    print(self.train_sc.shape,self.test.shape)\n  def train_test_split(self):\n    X_train,X_test,y_train,y_test = train_test_split(self.train_sc,np.ravel(self.test),test_size=0.3)\n    return X_train,X_test,y_train,y_test\nproc = preprocessing(df)\nscaler = proc.scaler()\nX_train,X_test,y_train,y_test = proc.train_test_split()","064554c9":"y_test","17b5b983":"from xgboost import XGBClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom sklearn.metrics import plot_confusion_matrix","51c7892f":"# \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b xgboost\nparam_dist = {\n    'n_estimators':[i for i in range(50,200,25)], #\u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n    'max_depth' : [i for i in range (2,10,2)],\n    'learning_rate' : [0.1,0.01],\n    'nthread' : [4],\n\n}","50ec99fd":"model = XGBClassifier()\ngs = GridSearchCV(model,param_grid=param_dist,scoring='f1', n_jobs=-1)\nresult = gs.fit(X_train,y_train)\nmeans = result.cv_results_ ['mean_test_score']\n","640e288c":"result.best_estimator_.feature_importances_","817d7856":"plt.figure(figsize=(10,10))\nimportance = pd.Series(result.best_estimator_.feature_importances_,index=df.columns[2:])\nimportance.nlargest(7).sort_values(ascending=True).plot(kind='barh')","f69a91cf":"importance.nsmallest(5).plot(kind='barh')","b39dd834":"result.best_params_","5c506412":"def predict (model,X_train, X_test, y_train, y_test):\n  model.fit(X_train,y_train)\n  predict = model.predict(X_test)\n  print(classification_report (y_test, predict, target_names=['0', '1']))\n  cm = confusion_matrix(y_test,predict,labels=model.classes_,normalize='true')\n  disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=model.classes_)\n  disp.plot()","ecd27784":"model = XGBClassifier(learning_rate = 0.1, max_depth = 6, n_estimators = 125, nthread = 4)\npredict(model,X_train, X_test, y_train, y_test)","097b4f95":"df.drop(columns=['Card_Category_Platinum','Card_Category_Platinum','Education_Level_Doctorate','Marital_Status_Divorced'],inplace=True)","3b6be814":"proc = preprocessing(df)\nscaler = proc.scaler()\nX_train,X_test,y_train,y_test = proc.train_test_split()","0e74a821":"# \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b xgboost\nparam_dist = {\n    'n_estimators':[i for i in range(50,200,25)], #\u043a\u043e\u043b-\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\n    'max_depth' : [i for i in range (2,10,2)],\n    'learning_rate' : [0.1,0.01],\n    'nthread' : [4],\n\n}","ff9073c8":"model = XGBClassifier()\ngs = GridSearchCV(model,param_grid=param_dist,scoring='f1', n_jobs=-1)\nresult = gs.fit(X_train,y_train)\nmeans = result.cv_results_ ['mean_test_score']\n","6c2ad433":"result.best_params_","e7efd068":"model = XGBClassifier(learning_rate = 0.1, max_depth = 6, n_estimators = 150, nthread = 4)\npredict(model,X_train, X_test, y_train, y_test)","778ead29":"## XGBoost","09a1a008":"<a href=\"https:\/\/colab.research.google.com\/github\/Bell993\/BankChurners\/blob\/main\/BankChurners_kaggle.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","ae182cf9":"## Delete no importance features","9eaaacf8":"## Income category & Gender","dd5f437a":"# Work in Data","f7cf1c29":"## Credit_Limit & Avg_Open_To_Buy\n\nthe data is linearly dependent","1ddee20c":"## Spearman correlation \nis a method of nonparametric analysis, checking for the normality of the distribution is not required","cff9037f":"## Shapiro-Wilk \nTest for normality\n\n\np > alpha : Sample looks Gaussian\n\np < alpha : Sample does not look Gaussian","33a6f7bd":"## Total_Trans_Amt & Total_Trans_Ct\nthe data is linearly dependent\n","8ea4e6d7":"# Data preprocessing","4bf8c977":"## Attrition_Flag","07cc1fc9":"# Data Cleaning ","20d957fd":"## XGBoost","23139bcf":"# Feature selections\n","0d80244e":"## Credit_limit & Age","4e7f0cd2":"### Introduction\n\nThis notebook goes through various statistical techniques and machine learning. Please leave comments about where I can improve and what you liked. Thanks!","c5250367":"# Model selection\n\n## GridSearchCV","341fc0e6":"# Data visualization","6fbde88f":"## Importance Features","27fd5ddb":"## Hypotheses \nabout the relationship between the Avg_Utilization_Ratio and Attrited Customer\n\n"}}