{"cell_type":{"7fb0212d":"code","2dc9f51c":"code","73882840":"code","40b6a46b":"code","95eac218":"code","b09af4fd":"code","cfd77ed2":"code","90e16ee7":"code","883cd1be":"code","211ea62e":"code","0158f416":"code","6b5c6391":"code","cbb80576":"code","281e2fcb":"code","6a0a8821":"code","d8a26f98":"code","1f035538":"code","92b31862":"code","c51fdd8e":"code","9af61e65":"code","7b17e816":"code","b0dad729":"code","af7b9248":"code","85cf218c":"code","93f58e78":"code","25853e09":"code","a37f94df":"code","b3bc80ed":"code","7f276c65":"code","9de51e7c":"code","2ffebb20":"code","0156b936":"code","769ce10c":"code","9355a732":"code","d3a1c847":"code","85c00247":"code","ce2d86af":"code","36ec7441":"code","1caa09ba":"code","0730be3c":"code","4893cdce":"code","2ba100e9":"code","ca38186f":"code","d6673f71":"code","07ff5273":"code","9cff73aa":"code","a8c9aa74":"code","ab06aad2":"code","014a15f1":"code","995fb50f":"code","6a688511":"code","d5985366":"code","b027faaa":"code","9723f54a":"code","5509dd25":"code","2d0097b1":"code","35cf4f98":"code","8b754b5c":"markdown","0633e6b1":"markdown","fed9b0c1":"markdown","c44ebdbf":"markdown","f76f6a09":"markdown","2b0168e1":"markdown","f43fbf10":"markdown","3dc90b73":"markdown","5d93bd19":"markdown","1beb0676":"markdown"},"source":{"7fb0212d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nbox_train = pd.read_csv(\"..\/input\/train.csv\", index_col='id')","2dc9f51c":"print(box_train.info())","73882840":"print(box_train.describe())","40b6a46b":"example = 2\nfor i in range(len(box_train.iloc[example])):\n    print(box_train.columns[i],' ==> ', box_train.iloc[example,i])","95eac218":"box_train.loc[:,['original_title','title']].head(10)","b09af4fd":"box_train.loc[:,['homepage']].head()","cfd77ed2":"print(box_train.status.unique())\nrumored = box_train[box_train['status'] == 'Rumored']\nrumored","90e16ee7":"box_train.nunique()","883cd1be":"box_test = pd.read_csv(\"..\/input\/test.csv\", index_col='id')\n\nbox = pd.concat([box_train.drop('revenue', axis=1), box_test])\nbox.info()","211ea62e":"not_useful_columns = ['homepage', 'imdb_id', 'original_title', 'overview', 'poster_path',\n                     'tagline', 'title']\nbox_train.drop(not_useful_columns, axis=1, inplace=True)\nbox_train.info()","0158f416":"num_box = box_train[['budget', 'popularity', 'runtime', 'revenue']]","6b5c6391":"import seaborn\n\ncorr_mx = num_box.corr()\nprint(corr_mx)\nseaborn.heatmap(corr_mx)\nplt.show()","cbb80576":"num_box.hist(bins=100, figsize=(16,12))\nplt.show()","281e2fcb":"import ast\n\n# Function to transfer unique dictionary value in DataFrame\n\ndef get_as_dataframe(df, column):\n    as_dataframe = pd.DataFrame()\n    for i in range(1,len(df)+1):\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            temp = pd.DataFrame(temp_list)\n            as_dataframe = pd.concat([as_dataframe, temp], ignore_index=True)\n    return as_dataframe.drop_duplicates()","6a0a8821":"def get_as_dataframe_for_top_5_cast(df, column):\n    as_dataframe = pd.DataFrame()\n    for i in range(1,len(df)+1):\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n                temp = pd.DataFrame(temp_list)\n                temp = temp.iloc[:5,:]\n                as_dataframe = pd.concat([as_dataframe, temp], ignore_index=True)\n    return as_dataframe.drop_duplicates()","d8a26f98":"def get_as_dataframe_for_director(df, column):\n    as_dataframe = pd.DataFrame()\n    for i in range(1,len(df)+1):\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n                temp = pd.DataFrame(temp_list)\n                temp = temp[temp['job'] == 'Director']\n                as_dataframe = pd.concat([as_dataframe, temp], ignore_index=True)\n    return as_dataframe.drop_duplicates()","1f035538":"dataframes = {}","92b31862":"def prepare_as_dataframe(df, column, index_col):\n    temp = get_as_dataframe(df, column)\n    print(column,' - length : ',str(len(temp)))\n    temp = temp.set_index(index_col).sort_index()\n    temp['count'], temp['popularity'], temp['budget'] = 0, 0.0, 0.0\n    return temp","c51fdd8e":"def prepare_belongs_to_collection_as_dataframe(df):\n    temp = get_as_dataframe(df, 'belongs_to_collection')\n    temp = temp[['id', 'name']]\n    print('belongs_to_collection - length : ', str(len(temp)))\n    temp = temp.set_index('id').sort_index()\n    temp['count'], temp['popularity'], temp['budget'] = 0, 0.0, 0.0\n    return temp","9af61e65":"def prepare_top_5_cast_as_dataframe(df):\n    temp = get_as_dataframe_for_top_5_cast(df, 'cast')\n    temp = temp[['id', 'name']].drop_duplicates()\n    temp = temp.set_index('id').sort_index()\n    print('cast - length : ', str(len(temp)))\n    temp['count'], temp['popularity'], temp['budget'] = 0, 0.0, 0.0\n    return temp","7b17e816":"def prepare_director_as_dataframe(df):\n    temp = get_as_dataframe_for_director(df, 'crew')\n    temp = temp[['id', 'name']].drop_duplicates()\n    temp = temp.set_index('id').sort_index()\n    print('director - length : ', str(len(temp)))\n    temp['count'], temp['popularity'], temp['budget'] = 0, 0.0, 0.0\n    return temp","b0dad729":"dataframes['belongs_to_collection'] = prepare_belongs_to_collection_as_dataframe(box)\ndataframes['genres'] = prepare_as_dataframe(box, 'genres', 'id')\ndataframes['production_companies'] = prepare_as_dataframe(box, 'production_companies', 'id')\ndataframes['production_countries'] = prepare_as_dataframe(box, 'production_countries', 'iso_3166_1')\ndataframes['spoken_languages'] = prepare_as_dataframe(box, 'spoken_languages', 'iso_639_1')\ndataframes['Keywords'] = prepare_as_dataframe(box, 'Keywords', 'id')\ndataframes['cast'] = prepare_top_5_cast_as_dataframe(box)\ndataframes['crew'] = prepare_director_as_dataframe(box)","af7b9248":"dataframes['belongs_to_collection'].head()","85cf218c":"dataframes['genres'].head()","93f58e78":"dataframes['production_companies'].head()","25853e09":"dataframes['production_countries'].head()","a37f94df":"dataframes['spoken_languages'].head()","b3bc80ed":"dataframes['Keywords'].head()","7f276c65":"dataframes['cast'].head()","9de51e7c":"dataframes['crew'].head()","2ffebb20":"def add_popularity_and_budget(df, raw_id, popularity, budget):\n    cnt = df.loc[raw_id, 'count']\n    pop = df.loc[raw_id, 'popularity']\n    bdgt = df.loc[raw_id, 'budget']\n    pop = (pop*cnt + popularity)\n    bdgt = (bdgt*cnt + budget)\n    cnt = cnt+1\n    pop = pop\/cnt\n    bdgt = bdgt\/cnt\n    df.loc[raw_id, 'count'] = cnt\n    df.loc[raw_id, 'popularity'] = pop   \n    df.loc[raw_id, 'budget'] = bdgt","0156b936":"def update_popularity_and_budget(df, column, index_name):\n    for i in range(1,len(df)+1):\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n                temp = pd.DataFrame(temp_list)\n                temp = temp.set_index(index_name)\n                for j in temp.index:\n                    add_popularity_and_budget(dataframes[column], j, df.loc[i,'popularity'], df.loc[i, 'budget'])   ","769ce10c":"def update_popularity_and_budget_for_top_5_cast(df, column, index_name):\n    for i in range(1,len(df)+1):\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n                temp = pd.DataFrame(temp_list)\n                temp = temp.iloc[:5,:]\n                temp = temp.set_index(index_name)\n                for j in temp.index:\n                    add_popularity_and_budget(dataframes[column], j, df.loc[i,'popularity'], df.loc[i, 'budget'])","9355a732":"def update_popularity_and_budget_for_directors(df, column, index_name):\n    for i in range(1,len(df)+1):\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n                temp = pd.DataFrame(temp_list)\n                temp = temp[temp['job'] == 'Director']\n                temp = temp.set_index(index_name)\n                for j in temp.index:\n                    add_popularity_and_budget(dataframes[column], j, df.loc[i,'popularity'], df.loc[i, 'budget'])","d3a1c847":"update_popularity_and_budget(box, 'belongs_to_collection', 'id')\nupdate_popularity_and_budget(box, 'genres', 'id')\nupdate_popularity_and_budget(box, 'production_companies', 'id')\nupdate_popularity_and_budget(box, 'production_countries', 'iso_3166_1')\nupdate_popularity_and_budget(box, 'spoken_languages', 'iso_639_1')\nupdate_popularity_and_budget(box, 'Keywords', 'id')\nupdate_popularity_and_budget_for_top_5_cast(box, 'cast', 'id')\nupdate_popularity_and_budget_for_directors(box, 'crew', 'id')","85c00247":"# parameters\n# column: column name\n# entity: 'popularity' or 'budget'\n# title: title for plot\n# n: top n result, default is 20.\ndef plot_top_items(column, entity, title, n=20):\n    temp = dataframes[column].sort_values(entity, ascending=False).iloc[:n, :]\n    plt.rcParams[\"figure.figsize\"] = [16, 14]\n    fig, ax = plt.subplots()\n    y_pos = np.arange(len(temp))\n    ax.barh(y_pos, temp[entity])\n    ax.set_yticks(y_pos)\n    ax.set_yticklabels(temp['name'])\n    ax.invert_yaxis()\n    ax.set_xlabel(entity)\n    ax.set_title(title)\n    plt.show()","ce2d86af":"plot_top_items(column='belongs_to_collection', entity='popularity', title='Top 20 popular collections')","36ec7441":"plot_top_items(column='belongs_to_collection', entity='budget', title='Top 20 most expensive collections')","1caa09ba":"plot_top_items(column='genres', entity='popularity', title='Genres popularity')","0730be3c":"plot_top_items(column='genres', entity='budget', title='Genres budget')","4893cdce":"def add_popularity_budget_features(df, column, index_name):\n    df['has_{}'.format(column)] = 0\n    df['{}_popularity'.format(column)] = 0\n    df['{}_budget'.format(column)] = 0\n    for i in range(df.index[0], len(df)+df.index[0]):\n#         pop = 0\n#         bud = 0\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n#                 df.loc[i, 'has_{}'.format(column)] = 1\n                temp = pd.DataFrame(temp_list)\n                temp = temp.set_index(index_name)\n                if len(temp) > 0:\n                    df.loc[i, '{}_popularity'.format(column)] = dataframes[column].loc[temp.index, 'popularity'].mean()\n                    df.loc[i, '{}_budget'.format(column)] = dataframes[column].loc[temp.index, 'budget'].mean()\n                    df.loc[i, 'has_{}'.format(column)] = 1\n#                 for j in temp.index:\n#                     pop = pop + dataframes[column].loc[j, 'popularity']\n#                     bud = bud + dataframes[column].loc[j, 'budget']\n#                 df.loc[i, '{}_popularity'.format(column)] = pop\/len(temp)\n#                 df.loc[i, '{}_budget'.format(column)] = bud\/len(temp)","2ba100e9":"def add_popularity_budget_for_director(df, column, index_name):\n    df['has_director'] = 0\n    df['director_popularity'] = 0\n    df['director_budget'] = 0\n    for i in range(df.index[0], len(df)+df.index[0]):\n#         pop = 0\n#         bud = 0\n        if str(df.loc[i, column]) != 'nan':\n            temp_list = ast.literal_eval(df.loc[i, column])\n            if temp_list:\n                temp = pd.DataFrame(temp_list)\n                temp = temp[temp['job'] == 'Director']\n                temp = temp.set_index(index_name)\n#                 has_director = 0\n                if len(temp) > 0:\n                    df.loc[i, 'director_popularity'] = dataframes[column].loc[temp.index, 'popularity'].mean()\n                    df.loc[i, 'director_budget'] = dataframes[column].loc[temp.index, 'budget'].mean()\n                    df.loc[i, 'has_director'] = 1\n#                 for j in temp.index:\n#                     pop = pop + dataframes[column].loc[j, 'popularity']\n#                     bud = bud + dataframes[column].loc[j, 'budget']\n#                     has_director = 1\n#                 df.loc[i, 'director_popularity'] = pop\/len(temp)\n#                 df.loc[i, 'director_budget'] = bud\/len(temp)\n#                 df.loc[i, 'has_director'] = has_director","ca38186f":"def add_popularity_budget_for_5_cast(df, column, index_name):\n    for n in range(1,6):\n        df['has_{}_{}'.format(column, n)] = 0\n        df['{}_{}_popularity'.format(column, n)] = 0\n        df['{}_{}_budget'.format(column, n)] = 0\n    for i in range(df.index[0], len(df)+df.index[0]):\n        try:\n            if str(df.loc[i, column]) != 'nan':\n                temp_list = ast.literal_eval(df.loc[i, column])\n                if temp_list:\n                    temp = pd.DataFrame(temp_list)\n                    if len(temp) > 5:\n                        temp = temp.iloc[:5,:]\n                        temp = temp.set_index(index_name)\n                        cnt = 1\n                        for j in temp.index:\n                            df.loc[i, 'has_{}_{}'.format(column, cnt)] = 1\n                            df.loc[i, '{}_{}_popularity'.format(column, cnt)] = dataframes[column].loc[j, 'popularity']\n                            df.loc[i, '{}_{}_budget'.format(column, cnt)] = dataframes[column].loc[j, 'budget']\n                            cnt = cnt+1\n        except ValueError:\n            print('Oops ! Not valid value. Row # ', i)","d6673f71":"from datetime import datetime\n\ndef add_date_features(df, column):\n    df['release_day'] = 1\n    df['release_month'] = 1\n    df['release_year'] = 2000\n    for i in range(df.index[0], len(df)+df.index[0]):\n        if str(df.loc[i, column]) != 'nan':\n            release_date = datetime.strptime(str(df.loc[i, column]), '%m\/%d\/%y')\n            df.loc[i, 'release_day'] = release_date.day\n            df.loc[i, 'release_month'] = release_date.month\n            df.loc[i, 'release_year'] = release_date.year","07ff5273":"from sklearn.preprocessing import OneHotEncoder\n\ndef add_catagoriacal_features(df, column):\n    df[column].fillna(column+'_unknown', inplace=True)\n    cat_encoder = OneHotEncoder(sparse=False, categories='auto', dtype=np.int)\n    features = cat_encoder.fit_transform(df[[column]])\n    temp_df = pd.DataFrame(features, \n                           index=range(df.index[0], len(df)+df.index[0]), \n                           columns=[column+'_'+str(i) for i in cat_encoder.categories_[0]])\n    df = pd.concat([df, temp_df], axis=1)\n    return df","9cff73aa":"# Preparing data for machine learning Model\n\nbox_train_feature = box_train.copy()\n\n# Popularity and budget related features\nadd_popularity_budget_features(box_train_feature, 'belongs_to_collection', 'id')\nadd_popularity_budget_features(box_train_feature, 'genres', 'id')\nadd_popularity_budget_features(box_train_feature, 'production_companies', 'id')\nadd_popularity_budget_features(box_train_feature, 'production_countries', 'iso_3166_1')\nadd_popularity_budget_features(box_train_feature, 'spoken_languages', 'iso_639_1')\nadd_popularity_budget_features(box_train_feature, 'Keywords', 'id')\nadd_popularity_budget_for_director(box_train_feature, 'crew', 'id')\nadd_popularity_budget_for_5_cast(box_train_feature, 'cast', 'id')\n\n# Release date related features\nadd_date_features(box_train_feature, 'release_date')\n\n# Categorical features\n# box_train_feature = add_catagoriacal_features(box_train_feature, 'status')\n# box_train_feature = add_catagoriacal_features(box_train_feature, 'original_language')\nbox_train_feature = add_catagoriacal_features(box_train_feature, 'release_day')\nbox_train_feature = add_catagoriacal_features(box_train_feature, 'release_month')\n\n# Filling not available numerical feature\nbox_train_feature.runtime.fillna(box_train_feature.runtime.median(), inplace=True)\n\n# Removing un-necessary columns\nun_necessary_columns = ['belongs_to_collection', 'genres', 'original_language', \n                        'production_companies', 'production_countries', 'release_date', \n                        'spoken_languages', 'status', 'Keywords', 'crew', 'cast', \n                        'release_day', 'release_month']\nbox_train_feature.drop(un_necessary_columns, axis=1, inplace=True)","a8c9aa74":"numerical_ftr = ['budget', \n                 'belongs_to_collection_budget', 'genres_budget', 'production_companies_budget', \n                 'production_countries_budget', 'spoken_languages_budget', 'Keywords_budget', \n                 'cast_1_budget', 'cast_2_budget', 'cast_3_budget', 'cast_4_budget', 'cast_5_budget', \n                 'director_budget',\n                 'popularity', \n                 'belongs_to_collection_popularity', 'genres_popularity', 'production_companies_popularity', \n                 'production_countries_popularity', 'spoken_languages_popularity', 'Keywords_popularity', \n                 'cast_1_popularity', 'cast_2_popularity', 'cast_3_popularity', 'cast_4_popularity', \n                 'cast_5_popularity', 'director_popularity', \n                 'runtime', \n                 'revenue']\n\nbox_numerical_ftr = box_train_feature[numerical_ftr]\ncorr_mx_ftr = box_numerical_ftr.corr()\npd.DataFrame(corr_mx_ftr, index=numerical_ftr, columns=numerical_ftr)","ab06aad2":"seaborn.heatmap(corr_mx_ftr)\nplt.show()","014a15f1":"# Separating features and target\n\nX = box_train_feature.drop('revenue', axis=1)\n# X = box_train_feature[['budget', 'popularity']]\ny = box_train_feature['revenue']\n\n# from sklearn.decomposition import PCA\n# pca = PCA(n_components=0.99)\n# X = pca.fit_transform(X)\n# print(pca.explained_variance_ratio_)\n\n# Spliting dataset to test and val\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val =  train_test_split(X, y, test_size=0.2)","995fb50f":"# from sklearn.preprocessing import StandardScaler\n\n# std_scaler = StandardScaler()\n# X_scaled = std_scaler.fit_transform(X)","6a688511":"from sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\n\ndef sqrt_mean_squared_log_error(actual, pred):\n    return np.sqrt(mean_squared_log_error(actual, pred))\n\nparam_grid = [{'n_estimators':[100, 500, 1000], 'max_features':['auto', 'log2'], \n              'min_samples_split':[5, 12, 20], 'max_depth':[5, 20, 50], 'n_jobs':[-1]}]\n\nrf_reg = RandomForestRegressor()\n\ngrid = GridSearchCV(rf_reg, param_grid, scoring='neg_mean_squared_log_error', n_jobs=-1)\ngrid.fit(X, y)\n\n# rf_reg.fit(X_train, y_train)","d5985366":"rf_reg = grid.best_estimator_","b027faaa":"grid.best_params_","9723f54a":"y_train_pred = rf_reg.predict(X)\ny_train_pred[y_train_pred < 0] = 0\n\nerror = np.sqrt(mean_squared_log_error(y, y_train_pred))\nprint(error)\nplt.scatter(y, y_train_pred)\nplt.show()","5509dd25":"# y_val_pred = rf_reg.predict(X_val)\n# y_val_pred[y_val_pred < 0] = 0\n\n# error = np.sqrt(mean_squared_log_error(y_val, y_val_pred))\n# print(error)\n# plt.scatter(y_val, y_val_pred)\n# plt.show()","2d0097b1":"box_test_feature = box_test.copy()\n\n# Popularity and budget related features\nadd_popularity_budget_features(box_test_feature, 'belongs_to_collection', 'id')\nadd_popularity_budget_features(box_test_feature, 'genres', 'id')\nadd_popularity_budget_features(box_test_feature, 'production_companies', 'id')\nadd_popularity_budget_features(box_test_feature, 'production_countries', 'iso_3166_1')\nadd_popularity_budget_features(box_test_feature, 'spoken_languages', 'iso_639_1')\nadd_popularity_budget_features(box_test_feature, 'Keywords', 'id')\nadd_popularity_budget_for_director(box_test_feature, 'crew', 'id')\nadd_popularity_budget_for_5_cast(box_test_feature, 'cast', 'id')\n\n# Release date related features\nadd_date_features(box_test_feature, 'release_date')\n\n# Categorical features\n# box_test_feature = add_catagoriacal_features(box_test_feature, 'status')\n# box_test_feature = add_catagoriacal_features(box_test_feature, 'original_language')\nbox_test_feature = add_catagoriacal_features(box_test_feature, 'release_day')\nbox_test_feature = add_catagoriacal_features(box_test_feature, 'release_month')\n\n# Filling not available numerical feature\nbox_test_feature.runtime.fillna(box_test_feature.runtime.median(), inplace=True)\n\n# Removing un-necessary columns\nun_necessary_columns = ['belongs_to_collection', 'genres', 'original_language', \n                        'production_companies', 'production_countries', 'release_date', \n                        'spoken_languages', 'status', 'Keywords', 'crew', 'cast', \n                        'release_day', 'release_month']\nbox_test_feature.drop(un_necessary_columns+not_useful_columns, axis=1, inplace=True)","35cf4f98":"X_test = box_test_feature.copy()\n\ny_test_pred = rf_reg.predict(X_test)\ny_test_pred[y_test_pred < 0] = 0\n# y_test_pred.shape\n# np.array(range(3001, 3001+len(y_test_pred))).reshape()\nprediction = pd.DataFrame({'id':np.array(range(3001, 3001+len(y_test_pred))), 'revenue':y_test_pred})\nprediction.to_csv('submission.csv', index=False)","8b754b5c":"**Feature engineering**\n    \n    As we have seen from analysis, provided data contains information in various forms and various datatype. To use those available information, they need to be transformed before we feed it into machine learning model.\n1. Data in dectionary format\n    * First of all seperate dataframes will be created for each columns which has information in dectionary type. Let's understand it with example of genres column: genres dataframe will have 'id' and 'name' of genres appeared in dataset.\n    * Then average popularity and budget will be calculated for each entry in genres dataframe. Average will be calculated over popularity and budget of all movies for which that gerne is appeared.\n    * Now, popularity and budget of any movie according to genres will be created by calculating average of popularity and budget of all gernes for that movie.\n    * Only top 5 cast will be considered from 'cast' column.\n    * Only Directors will be considered from 'crew' column.    \n1. 'release_date' will be converted into 3 columns, day, month and year.\n1. Categorical values will be converted into One-Hot matrix","0633e6b1":"**Segregating numerical columns**","fed9b0c1":"**Getting insight of data**\n\nTry to get following information:\n* Number of columns and data availability per column\n* Type of data in each column\n* Understanding meaning of data in each column","c44ebdbf":"**Insight from individual provided features**\n1. Original_title can be removed since title contains same information in English.\n1. Homepage url does not provide any useful information hence it can be removed too.\n1. imdb_id contains unique id to map movie to imdb database.\n1. Poster_path column contains image name which can be retrieved from themoviedb.org website. Base url to fetch the image is http:\/\/image.tmdb.org\/t\/p\/w185\/ . example: http:\/\/image.tmdb.org\/t\/p\/w185\/\/nBNZadXqJSdt05SHLqgT0HuC5Gm.jpg.\n1. overview, tagline and title contains text information.\n1. belongs_to_collection, genres, production_companies, production_countries, Keywords, cast, crew and spoken_language contains information as list of dictionary items.","f76f6a09":"**Adding new features**","2b0168e1":"**Analysing individual features**","f43fbf10":"**Correlation among numerical features with respect to target(revenue)**\n\n    As seen, Revenue looks fairly correlated with budget followed by popularity. Popularity is mildly correlated with revenue.","3dc90b73":"**Not useful(at least for this implementation) columns will be removed.**","5d93bd19":"    Let's check value distribution of numerical features.\n* Budget and revenue follows almost similar distribution.","1beb0676":"**There are 6 different types of data available**\n1. Numerical\n1. String\n1. Date\n1. Image\n1. Categorical\n1. URL"}}