{"cell_type":{"23b5f899":"code","b944b0f9":"code","3fb53feb":"code","da81b51b":"code","cebfa468":"code","9a6c9eb9":"code","fb0ba8f0":"code","dc3bb856":"code","9a7696be":"code","6aad7ff7":"code","06de16a0":"code","93f66ea5":"code","bd5f82b7":"code","25da4292":"code","95a97c1f":"code","3f92492a":"code","2316f8e4":"code","c0654f8d":"code","39eb81dd":"code","df0526d6":"code","e2f3e2d4":"code","3f35a4de":"code","c7cc4bfd":"code","00d97cd3":"code","7116082f":"code","297d5422":"code","56aea7a0":"code","5c170d14":"code","48b44ae9":"code","b4fb16c3":"markdown","94a1f7c6":"markdown","bc4137e6":"markdown","1cc36733":"markdown","cb511ad1":"markdown","6201962d":"markdown"},"source":{"23b5f899":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b944b0f9":"df = pd.read_csv(\"\/kaggle\/input\/2019-coronavirus-dataset-01212020-01262020\/2019_nCoV_20200121_20200131.csv\", delimiter=',')\ndf.head()","3fb53feb":"df.info()","da81b51b":"df = df.fillna({\"Province\/State\": \"Unknown\"})\ndf = df.fillna(0)  ","cebfa468":"df.isnull().sum()","9a6c9eb9":"df['Province\/State'] = df['Province\/State'].astype('category')\ndf['Country\/Region'] = df['Country\/Region'].astype('category')\ndf = df.rename(columns={'Country\/Region': 'Country', 'Province\/State': 'Province'})\ndf.head()","fb0ba8f0":"df.Country.unique()","dc3bb856":"for i,col in enumerate(df.columns):\n    print(i+1,\". column: \",col)","9a7696be":"china= df[df['Country'] == 'Mainland China']\nchina= pd.DataFrame(china.groupby(['Province'])['Confirmed','Suspected','Recovered','Death'].agg('sum')).reset_index()\nchina.head(35)","6aad7ff7":"china.sort_values(by=['Confirmed'], inplace=True,ascending=False)\n\nplt.figure(figsize=(25,12))\n\n#  title\nplt.title(\"Number of Provinces Confirmed People in China\")\n\n# Bar chart showing Number of Patients Confirmed Infected by Corona Virus, by Country\nsns.barplot(y=china['Province'],x=china['Confirmed'],orient='h')\n\n\n# Add label for vertical axis\nplt.ylabel(\"Number of Confirmed People\")","06de16a0":"other= df[df['Country'] != 'Mainland China']\nother= pd.DataFrame(other.groupby(['Province'])['Confirmed','Suspected','Recovered','Death'].agg('sum')).reset_index()\nother.head(35)","93f66ea5":"other.sort_values(by=['Confirmed'], inplace=True,ascending=False)\n\nplt.figure(figsize=(25,14))\n\n#  title\nplt.title(\"Number of Confirmed People, not induding China\")\n\n# Bar chart showing Number of Patients Confirmed Infected by Corona Virus, by Country\nsns.barplot(y=other['Province'],x=other['Confirmed'],orient='h')\n\n\n# Add label for vertical axis\nplt.ylabel(\"Count of Confirmed People by Province\/State\")","bd5f82b7":"other.sort_values(by=['Suspected'], inplace=True,ascending=False)\n\nplt.figure(figsize=(25,10))\n\n#  title\nplt.title(\"Number of People Suspected, not in China\")\n\n# Bar chart showing Number of Patients Confirmed Infected by Corona Virus, by Country\nsns.barplot(y=other['Province'],x=other['Suspected'],orient='h')\n\n\n# Add label for vertical axis\nplt.ylabel(\"Number of Suspected People\")","25da4292":"other.sort_values(by=['Recovered'], inplace=True,ascending=False)\n\nplt.figure(figsize=(25,10))\n\n#  title\nplt.title(\"Number of Recovered People, not in China\")\n\n# Bar chart showing Number of Patients Confirmed Infected by Corona Virus, by Country\nsns.barplot(y=other['Province'],x=other['Recovered'],orient='h')\n\n\n# Add label for vertical axis\nplt.ylabel(\"Number of Recovered People\")","95a97c1f":"plt.figure(figsize=(12,8))\nsns.catplot(x = \"Confirmed\", y = \"Country\", kind = \"bar\", \n            height=5, # make the plot 5 units high\n            aspect=3,\n            palette = \"bright\", \n            #edgecolor = \".6\", data = df) \n            data = df)\n           #set_xticklabels=45) \nplt.show()","3f92492a":"df.Province.value_counts()","2316f8e4":"plt.figure(figsize=(14,9))\nsns.catplot(x = \"Confirmed\", y = \"Province\", kind = \"bar\", \n            height=8, # make the plot 5 units high\n            aspect=2,\n            palette = \"muted\", \n            #edgecolor = \".6\", data = df) \n            data = df[:22],\n            orient='h')\n           #set_xticklabels=45) \nplt.show()","c0654f8d":"import plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom IPython.display import HTML, Image\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.offline as py\nimport plotly.express as px\n\nfig = go.Figure(\niplot([go.Scatter(x=df['Country'], y= df['Confirmed'], mode= 'markers')])\n)\niplot","39eb81dd":"fig = go.Figure(\n    data=[go.Bar(x=df['Province'], y=df['Confirmed'])],\n    layout=dict(title=dict(text=\"A Bar Chart Confirmed Provinces\"))\n)\nfig.show()","df0526d6":"df2 = df['Country'].value_counts()\n\niplot([go.Choropleth(\n    locationmode='country names',\n    locations=df2.index.values,\n    text=df2.index,\n    z=df2.values\n)])","e2f3e2d4":"#df3 = df[df['Country'] != 'Mainland China']\ndf3 = df[df['Confirmed'] >= 1]\ndf3.head()","3f35a4de":"df3.Country.value_counts()","c7cc4bfd":"#import plotly.graph_objs as go\n#import plotly.figure_factory as ff\n#from IPython.display import HTML, Image\n#from plotly.offline import init_notebook_mode, iplot\n#init_notebook_mode(connected=True)\n#import plotly.offline as py\n#import plotly.express as px","00d97cd3":"#china = df[df['Country'] == 'Mainland China'] or df3 = df[df['Country'] != 'Mainland China']\n#                                                 df3 = df[df['Confirmed'] > 1]\n#other = df[df['Country'] != 'Mainland China'] \n\ntrace = go.Pie(labels = ['china', 'other'], values = df['Country'].value_counts(), \n               textfont=dict(size=15), opacity = 0.8,\n               marker=dict(colors=['lightskyblue','gold'], \n                           line=dict(color='#000000', width=1.5)))\n\n\nlayout = dict(title =  'Distribution of China vs Other Countries')\n           \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","7116082f":"hist_data = [df['Confirmed'],df['Suspected'],df['Recovered'],df['Death']]\ngroup_labels = list(df.iloc[:,3:7].columns)\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=5)\niplot(fig, filename='Distplot of all corona stats')","297d5422":"c = go.Box(y=df[\"Confirmed\"],name=\"Confirmed\")\ns = go.Box(y=df[\"Suspected\"],name=\"Suspected\")\nr = go.Box(y=df[\"Recovered\"],name=\"Recovered\")\nd = go.Box(y=df[\"Death\"],name=\"Death\")\n \ndata = [c,s,r,d]\niplot(data)","56aea7a0":"fig = ff.create_scatterplotmatrix(df.iloc[:,3:7], index='Confirmed', diag='box', size=2, height=800, width=800)\niplot(fig, filename ='Scatterplotmatrix.png',image='png')","5c170d14":"#china = df[df['Country\/Region'] == 'Mainland China']\n#other = df[df['Country\/Region'] != 'Mainland China']\n\ndef count():\n    trace = go.Bar( x = df['Country'].value_counts().values.tolist(), \n                    y = ['Confirmed', 'Suspected', 'Recovered', 'Deaths'], \n                    orientation = 'h', \n                    text=df['Country'].value_counts().values.tolist(), \n                    textfont=dict(size=15),\n                    textposition = 'auto',\n                    opacity = 0.8,marker=dict(\n                    color=['lightskyblue', 'gold'],\n                    line=dict(color='#000000',width=1.5)))\n\n    layout = dict(title =  'Count of variables')\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)\n\ndef percent():\n    trace = go.Pie(labels = ['Confirmed', 'Suspected', 'Recovered', 'Deaths'], values = df['Country'].value_counts(), \n                   textfont=dict(size=15), opacity = 0.8,\n                   marker=dict(colors=['lightskyblue', 'gold'], \n                               line=dict(color='#000000', width=1.5)))\n\n\n    layout = dict(title =  'Percentage of features: Confirmed, Suspected, Recovered, Death')\n\n    fig = dict(data = [trace], layout=layout)\n    py.iplot(fig)","48b44ae9":"count()\npercent()","b4fb16c3":"# Coronavirus Data\n\nAs you know, at the beginning of 2020 was the Coronavirus outbreak first instance in China -approximately in December 2019. Moreover later in the world corona disease and its spread is still a very big problem.   \n\nWho know how the disease will be predicted or what will be the outcome now or in the future.","94a1f7c6":"### Another Look on Confirmed Countries","bc4137e6":"When we look at some data, nearly 85% of corona cases are in the category- Confirmed, 8.7% Suspected, etc.\n\n Proportion of countries is nearly 91% in China vs aproximately 9% in other world.\n##### This is only some short overview because I tried this visual from the older data in the end of January 19.","1cc36733":"### Provinces or States:","cb511ad1":"## Let\u00b4s look at some visualizations in Plotly:\n\nFor me it\u00b4s a better choice Plotly\n- if you decide to click on the viz, it can show you more precise outcome ( only my personal point of view)","6201962d":"#### Below I found an amazing inspiration from this kernel:\n    \nhttps:\/\/www.kaggle.com\/vincentlugat\/pima-indians-diabetes-eda-prediction-0-906"}}