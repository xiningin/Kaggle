{"cell_type":{"570b438c":"code","10da9255":"code","2d23d55e":"code","745ed6d2":"code","774d459f":"code","6c5afb63":"code","6685ec9f":"markdown","aa7d3dce":"markdown","0d024a94":"markdown","a5dbafa1":"markdown","9cdc0563":"markdown","8dd3e880":"markdown","929566dd":"markdown","2b81e4fb":"markdown","925ca73b":"markdown","bed5e1c6":"markdown","e15a801c":"markdown","d143fb19":"markdown","d9fca7ad":"markdown"},"source":{"570b438c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10da9255":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf","2d23d55e":"df.isnull().sum()","745ed6d2":"x = df.drop(columns=['diagnosis'])\ny = df['diagnosis']\nprint(x)\nprint(y)","774d459f":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()  \nx= x.apply(label_encoder.fit_transform)\nprint(x)\ny= label_encoder.fit_transform(y)\nprint(y)\n","6c5afb63":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0).fit(x, y)\nclf.score(x, y)","6685ec9f":"# Pros","aa7d3dce":"# Splitting the dataset and Target variable.","0d024a94":"# References","a5dbafa1":"# Describing Null values","9cdc0563":"* Logistic regression is easier to implement, interpret, and very efficient to train.\n* It makes no assumptions about distributions of classes in feature space.","8dd3e880":"Label Encoding refers to converting the labels into numeric form so as to convert it into the machine-readable form. Machine learning algorithms can then decide in a better way on how those labels must be operated. It is an important pre-processing step for the structured dataset in supervised learning.","929566dd":"# Cons","2b81e4fb":"* If the number of observations is lesser than the number of features, Logistic Regression should not be used, otherwise, it may lead to overfitting\n* It constructs linear boundaries.","925ca73b":"# Logistic Regression Classifier","bed5e1c6":"# Logistic Regression Classifier","e15a801c":"# Label encoding","d143fb19":"Logistic regression is a classification algorithm, used when the value of the target variable is categorical in nature. Logistic regression is most commonly used when the data in question has binary output, so when it belongs to one class or another, or is either a 0 or 1.","d9fca7ad":"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html"}}