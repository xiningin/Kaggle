{"cell_type":{"7f6a17ae":"code","fc87475e":"code","f2b9ee35":"code","47f1e66c":"code","ed44dde6":"code","192a0c9f":"code","659a31d1":"code","a70976f0":"code","b1eddb5d":"code","e69478f3":"code","96a5dfdd":"code","b2231f16":"code","d8d0d673":"code","89446b02":"code","b9b930ac":"code","d3c35a28":"code","b7bb1f5e":"code","8010ac14":"code","b42f5d89":"code","505da688":"code","4b143981":"code","95c9f2ba":"code","76b5085d":"code","a8c39551":"code","fbeb7be9":"code","6a713440":"code","ee6e6306":"code","bb930499":"code","dbe6950d":"code","107b7164":"code","464732b4":"code","9dc5c207":"code","ad5082b4":"code","2d0353dd":"code","464d2502":"code","2916b04a":"code","a1fa7826":"code","e8ab9bba":"code","fc1e9a3c":"code","1fb1826b":"code","f065e0c0":"code","630b2340":"code","03c42d33":"code","de2b899d":"code","3febff59":"code","4a261245":"code","86fa106f":"code","0959627a":"code","bf75904b":"code","bce7c2ad":"code","cbf30ec9":"code","5ed8eacd":"code","29c79771":"code","3d9dc0c7":"code","9c0d1243":"code","e1e3386f":"code","4a17d777":"code","f21571ee":"code","c1c2409f":"code","c6afbf03":"markdown","cd2cf95a":"markdown","2a873d6d":"markdown","672c8def":"markdown","959cfcfe":"markdown","55421ae6":"markdown","404ea383":"markdown","440104b8":"markdown","a45f5628":"markdown"},"source":{"7f6a17ae":"%load_ext autoreload\n%autoreload 2","fc87475e":"%matplotlib inline\n\nfrom fastai.imports import *\nfrom fastai.structured import *\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\nfrom sklearn import metrics","f2b9ee35":"PATH = \"..\/input\/\"\n\n#df_raw = pd.read_feather('tmp\/bulldozers-raw')\n### have to read the data all over again\ndf_raw = pd.read_csv(f'{PATH}Train.csv', low_memory=False, parse_dates=[\"saledate\"])\ndf_raw.SalePrice = np.log(df_raw.SalePrice)\nadd_datepart(df_raw, 'saledate')\ntrain_cats(df_raw)\n###\ndf_trn, y_trn, nas = proc_df(df_raw, 'SalePrice')","47f1e66c":"def split_vals(a,n): return a[:n], a[n:]\nn_valid = 12000\nn_trn = len(df_trn)-n_valid\nX_train, X_valid = split_vals(df_trn, n_trn)\ny_train, y_valid = split_vals(y_trn, n_trn)\nraw_train, raw_valid = split_vals(df_raw, n_trn)","ed44dde6":"x_sub = X_train[['YearMade', 'MachineHoursCurrentMeter']]","192a0c9f":"class TreeEnsemble():\n    def __init__(self, x, y, n_trees, sample_sz, min_leaf=5):\n        np.random.seed(42)\n        self.x,self.y,self.sample_sz,self.min_leaf = x,y,sample_sz,min_leaf\n        self.trees = [self.create_tree() for i in range(n_trees)]\n\n    def create_tree(self):\n        rnd_idxs = np.random.permutation(len(self.y))[:self.sample_sz]\n        return DecisionTree(self.x.iloc[rnd_idxs], self.y[rnd_idxs], min_leaf=self.min_leaf)\n        \n    def predict(self, x):\n        return np.mean([t.predict(x) for t in self.trees], axis=0)","659a31d1":"class DecisionTree():\n    def __init__(self, x, y, idxs=None, min_leaf=5):\n        self.x,self.y,self.idxs,self.min_leaf = x,y,idxs,min_leaf","a70976f0":"m = TreeEnsemble(X_train, y_train, n_trees=10, sample_sz=1000, min_leaf=3)","b1eddb5d":"m.trees[0]","e69478f3":"class DecisionTree():\n    def __init__(self, x, y, idxs=None, min_leaf=5):\n        if idxs is None: idxs=np.arange(len(y))\n        self.x,self.y,self.idxs,self.min_leaf = x,y,idxs,min_leaf\n        self.n,self.c = len(idxs), x.shape[1]\n        self.val = np.mean(y[idxs])\n        self.score = float('inf')\n        self.find_varsplit()\n        \n    # This just does one decision; we'll make it recursive later\n    def find_varsplit(self):\n        for i in range(self.c): self.find_better_split(i)\n            \n    # We'll write this later!\n    def find_better_split(self, var_idx): pass\n    \n    @property\n    def split_name(self): return self.x.columns[self.var_idx]\n    \n    @property\n    def split_col(self): return self.x.values[self.idxs,self.var_idx]\n\n    @property\n    def is_leaf(self): return self.score == float('inf')\n    \n    def __repr__(self):\n        s = f'n: {self.n}; val:{self.val}'\n        if not self.is_leaf:\n            s += f'; score:{self.score}; split:{self.split}; var:{self.split_name}'\n        return s","96a5dfdd":"m = TreeEnsemble(X_train, y_train, n_trees=10, sample_sz=1000, min_leaf=3)","b2231f16":"m.trees[0]","d8d0d673":"m.trees[0].idxs","89446b02":"ens = TreeEnsemble(x_sub, y_train, 1, 1000)\ntree = ens.trees[0]\nx_samp,y_samp = tree.x, tree.y\nx_samp.columns","b9b930ac":"tree","d3c35a28":"m = RandomForestRegressor(n_estimators=1, max_depth=1, bootstrap=False)\nm.fit(x_samp, y_samp)\ndraw_tree(m.estimators_[0], x_samp, precision=2)","b7bb1f5e":"def find_better_split(self, var_idx):\n    x,y = self.x.values[self.idxs,var_idx], self.y[self.idxs]\n\n    for i in range(1,self.n-1):\n        lhs = x<=x[i]\n        rhs = x>x[i]\n        if rhs.sum()==0: continue\n        lhs_std = y[lhs].std()\n        rhs_std = y[rhs].std()\n        curr_score = lhs_std*lhs.sum() + rhs_std*rhs.sum()\n        if curr_score<self.score: \n            self.var_idx,self.score,self.split = var_idx,curr_score,x[i]","8010ac14":"%timeit find_better_split(tree,1)\ntree","b42f5d89":"find_better_split(tree,0); tree","505da688":"tree = TreeEnsemble(x_sub, y_train, 1, 1000).trees[0]","4b143981":"def std_agg(cnt, s1, s2): return math.sqrt((s2\/cnt) - (s1\/cnt)**2)\n\ndef find_better_split_foo(self, var_idx):\n    x,y = self.x.values[self.idxs,var_idx], self.y[self.idxs]\n    \n    sort_idx = np.argsort(x)\n    sort_y,sort_x = y[sort_idx], x[sort_idx]\n    rhs_cnt,rhs_sum,rhs_sum2 = self.n, sort_y.sum(), (sort_y**2).sum()\n    lhs_cnt,lhs_sum,lhs_sum2 = 0,0.,0.\n\n    for i in range(0,self.n-self.min_leaf-1):\n        xi,yi = sort_x[i],sort_y[i]\n        lhs_cnt += 1; rhs_cnt -= 1\n        lhs_sum += yi; rhs_sum -= yi\n        lhs_sum2 += yi**2; rhs_sum2 -= yi**2\n        if i<self.min_leaf or xi==sort_x[i+1]:\n            continue\n            \n        lhs_std = std_agg(lhs_cnt, lhs_sum, lhs_sum2)\n        rhs_std = std_agg(rhs_cnt, rhs_sum, rhs_sum2)\n        curr_score = lhs_std*lhs_cnt + rhs_std*rhs_cnt\n        if curr_score<self.score: \n            self.var_idx,self.score,self.split = var_idx,curr_score,xi","95c9f2ba":"%timeit find_better_split_foo(tree,1)\ntree","76b5085d":"find_better_split_foo(tree,0); tree","a8c39551":"DecisionTree.find_better_split = find_better_split","fbeb7be9":"tree = TreeEnsemble(x_sub, y_train, 1, 1000).trees[0]; tree","6a713440":"m = RandomForestRegressor(n_estimators=1, max_depth=2, bootstrap=False)\nm.fit(x_samp, y_samp)\ndraw_tree(m.estimators_[0], x_samp, precision=2)","ee6e6306":"def find_varsplit(self):\n    for i in range(self.c): self.find_better_split(i)\n    if self.is_leaf: return\n    x = self.split_col\n    lhs = np.nonzero(x<=self.split)[0]\n    rhs = np.nonzero(x>self.split)[0]\n    self.lhs = DecisionTree(self.x, self.y, self.idxs[lhs])\n    self.rhs = DecisionTree(self.x, self.y, self.idxs[rhs])","bb930499":"DecisionTree.find_varsplit = find_varsplit","dbe6950d":"tree = TreeEnsemble(x_sub, y_train, 1, 1000).trees[0]; tree","107b7164":"tree.lhs","464732b4":"tree.rhs","9dc5c207":"tree.lhs.lhs","ad5082b4":"tree.lhs.rhs","2d0353dd":"cols = ['MachineID', 'YearMade', 'MachineHoursCurrentMeter', 'ProductSize', 'Enclosure',\n        'Coupler_System', 'saleYear']","464d2502":"%time tree = TreeEnsemble(X_train[cols], y_train, 1, 1000).trees[0]\nx_samp,y_samp = tree.x, tree.y","2916b04a":"m = RandomForestRegressor(n_estimators=1, max_depth=3, bootstrap=False)\nm.fit(x_samp, y_samp)\ndraw_tree(m.estimators_[0], x_samp, precision=2, ratio=0.9, size=7)","a1fa7826":"def predict(self, x): return np.array([self.predict_row(xi) for xi in x])\nDecisionTree.predict = predict","e8ab9bba":"if something:\n    x= do1()\nelse:\n    x= do2()","fc1e9a3c":"x = do1() if something else do2()","1fb1826b":"x = something ? do1() : do2()","f065e0c0":"def predict_row(self, xi):\n    if self.is_leaf: return self.val\n    t = self.lhs if xi[self.var_idx]<=self.split else self.rhs\n    return t.predict_row(xi)\n\nDecisionTree.predict_row = predict_row","630b2340":"%time preds = tree.predict(X_valid[cols].values)","03c42d33":"plt.scatter(preds, y_valid, alpha=0.05)","de2b899d":"metrics.r2_score(preds, y_valid)","3febff59":"m = RandomForestRegressor(n_estimators=1, min_samples_leaf=5, bootstrap=False)\n%time m.fit(x_samp, y_samp)\npreds = m.predict(X_valid[cols].values)\nplt.scatter(preds, y_valid, alpha=0.05)","4a261245":"metrics.r2_score(preds, y_valid)","86fa106f":"class TreeEnsemble():\n    def __init__(self, x, y, n_trees, sample_sz, min_leaf=5):\n        np.random.seed(42)\n        self.x,self.y,self.sample_sz,self.min_leaf = x,y,sample_sz,min_leaf\n        self.trees = [self.create_tree() for i in range(n_trees)]\n\n    def create_tree(self):\n        idxs = np.random.permutation(len(self.y))[:self.sample_sz]\n        return DecisionTree(self.x.iloc[idxs], self.y[idxs], \n                    idxs=np.array(range(self.sample_sz)), min_leaf=self.min_leaf)\n        \n    def predict(self, x):\n        return np.mean([t.predict(x) for t in self.trees], axis=0)\n\ndef std_agg(cnt, s1, s2): return math.sqrt((s2\/cnt) - (s1\/cnt)**2)","0959627a":"class DecisionTree():\n    def __init__(self, x, y, idxs, min_leaf=5):\n        self.x,self.y,self.idxs,self.min_leaf = x,y,idxs,min_leaf\n        self.n,self.c = len(idxs), x.shape[1]\n        self.val = np.mean(y[idxs])\n        self.score = float('inf')\n        self.find_varsplit()\n        \n    def find_varsplit(self):\n        for i in range(self.c): self.find_better_split(i)\n        if self.score == float('inf'): return\n        x = self.split_col\n        lhs = np.nonzero(x<=self.split)[0]\n        rhs = np.nonzero(x>self.split)[0]\n        self.lhs = DecisionTree(self.x, self.y, self.idxs[lhs])\n        self.rhs = DecisionTree(self.x, self.y, self.idxs[rhs])\n\n    def find_better_split(self, var_idx):\n        x,y = self.x.values[self.idxs,var_idx], self.y[self.idxs]\n        sort_idx = np.argsort(x)\n        sort_y,sort_x = y[sort_idx], x[sort_idx]\n        rhs_cnt,rhs_sum,rhs_sum2 = self.n, sort_y.sum(), (sort_y**2).sum()\n        lhs_cnt,lhs_sum,lhs_sum2 = 0,0.,0.\n\n        for i in range(0,self.n-self.min_leaf-1):\n            xi,yi = sort_x[i],sort_y[i]\n            lhs_cnt += 1; rhs_cnt -= 1\n            lhs_sum += yi; rhs_sum -= yi\n            lhs_sum2 += yi**2; rhs_sum2 -= yi**2\n            if i<self.min_leaf or xi==sort_x[i+1]:\n                continue\n\n            lhs_std = std_agg(lhs_cnt, lhs_sum, lhs_sum2)\n            rhs_std = std_agg(rhs_cnt, rhs_sum, rhs_sum2)\n            curr_score = lhs_std*lhs_cnt + rhs_std*rhs_cnt\n            if curr_score<self.score: \n                self.var_idx,self.score,self.split = var_idx,curr_score,xi\n\n    @property\n    def split_name(self): return self.x.columns[self.var_idx]\n    \n    @property\n    def split_col(self): return self.x.values[self.idxs,self.var_idx]\n\n    @property\n    def is_leaf(self): return self.score == float('inf')\n    \n    def __repr__(self):\n        s = f'n: {self.n}; val:{self.val}'\n        if not self.is_leaf:\n            s += f'; score:{self.score}; split:{self.split}; var:{self.split_name}'\n        return s\n\n    def predict(self, x):\n        return np.array([self.predict_row(xi) for xi in x])\n\n    def predict_row(self, xi):\n        if self.is_leaf: return self.val\n        t = self.lhs if xi[self.var_idx]<=self.split else self.rhs\n        return t.predict_row(xi)","bf75904b":"ens = TreeEnsemble(X_train[cols], y_train, 5, 1000)","bce7c2ad":"preds = ens.predict(X_valid[cols].values)","cbf30ec9":"plt.scatter(y_valid, preds, alpha=0.1, s=6);","5ed8eacd":"metrics.r2_score(y_valid, preds)","29c79771":"%load_ext Cython","3d9dc0c7":"def fib1(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b","9c0d1243":"%%cython\ndef fib2(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b","e1e3386f":"%%cython\ndef fib3(int n):\n    cdef int b = 1\n    cdef int a = 0\n    cdef int t = 0\n    while b < n:\n        t = a\n        a = b\n        b = a + b","4a17d777":"%timeit fib1(50)","f21571ee":"%timeit fib2(50)","c1c2409f":"%timeit fib3(50)","c6afbf03":"## Single branch","cd2cf95a":"## Full single tree","2a873d6d":"## Basic data structures","672c8def":"# Putting it together","959cfcfe":"### Speeding things up","55421ae6":"# Random Forest from scratch!","404ea383":"## Load in our data from last lesson","440104b8":"## Predictions","a45f5628":"### Find best split given variable"}}