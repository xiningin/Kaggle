{"cell_type":{"bd59e682":"code","4dc4ae58":"code","b2ec3d84":"code","78e71ab7":"code","a7ae4fd0":"code","380680eb":"code","b87b3de5":"code","f13fd1c7":"code","fb70dbde":"code","9605424d":"code","6cf9626a":"code","67960712":"code","ff089c39":"code","d8a8be73":"code","a41daa08":"code","ef59b0f6":"code","dba3b77f":"code","bc29366e":"code","ab075928":"code","b775dc23":"code","ca57f208":"code","b63bc80c":"code","2350d466":"code","5555a753":"code","2b8f2f4a":"code","f4d8f891":"code","8a1c897b":"code","1ef11dbc":"code","d47ee506":"code","3ab3eb5f":"code","b250dcf5":"code","7b3f1c09":"code","88dfce38":"markdown","3cfb7810":"markdown","b4f6e367":"markdown","dcfae708":"markdown","7fbdeeee":"markdown","820af519":"markdown","a343c182":"markdown","507fcc3f":"markdown","8cfa7bce":"markdown","11ea2914":"markdown"},"source":{"bd59e682":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4dc4ae58":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('display.max_columns',None)","b2ec3d84":"train_dataset=pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest_dataset=pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ntrain_dataset.head()","78e71ab7":"print(train_dataset.shape)\nprint(test_dataset.shape)","a7ae4fd0":"#lets store number of test and train rows\ntrainrow=train_dataset.shape[0]\ntestrow=test_dataset.shape[0]","380680eb":"#combining train and test data\ndata=pd.concat((train_dataset,test_dataset)).reset_index(drop=True)\ndata=data.drop('Id',1)\ndata.head()\n","b87b3de5":"# getting the list of features which has missing values\nfeature_with_na=[]\nfor feature in data:\n    if data[feature].isnull().sum()>=1:\n        feature_with_na.append(data[feature].name)\nfeature_with_na","f13fd1c7":"# get percentage of missing values\nfor feature in feature_with_na:\n    print(feature,' has ' ,np.round(data[feature].isnull().sum()\/len(data[feature])*100,4),' % of missing values')","fb70dbde":"## Get List of Numeriacal Features\nnumerical_features=[]\nfor feature in data.columns:\n    if data[feature].dtype!='O' and feature!= 'SalePrice':\n        numerical_features.append(feature)\nprint('Number of Numerical Features ',len(numerical_features))\n\ndata[numerical_features].head()\n","9605424d":"## Get list of temporal variables \ntemporal_features=[]\nfor feature in data.columns:\n    if 'Year' in feature or 'Yr' in feature:\n        temporal_features.append(feature)\ndata[temporal_features].head()","6cf9626a":"## exploring Temporal features with sales price\nfor temp_feature in temporal_features:\n    data.groupby(temp_feature)['SalePrice'].median().plot()\n    plt.xlabel(temp_feature)\n    plt.ylabel('Sale Price')\n    plt.title(temp_feature +' vs '+' SalePrice')\n    plt.show()","67960712":"## exploring all yearvalues diffrence with Year sold\n\nfor i in temporal_features:\n        if i!= 'YrSold':\n            plt.scatter((data['YrSold']-data[i]),data['SalePrice'])\n            plt.xlabel(temp_feature)\n            plt.ylabel('Sale Price')\n            plt.title(temp_feature +' vs '+' SalePrice')\n            plt.show()\n            ","ff089c39":"## get list of all discrete variables\ndiscrete_variables=[]\nfor feature in numerical_features:\n    if len(data[feature].unique())<=25 and feature != 'SalePrice':\n        discrete_variables.append(feature)\ndata[discrete_variables].head()","d8a8be73":"## exporing discrete variables\nfor feature in discrete_variables:\n     data.groupby(feature)['SalePrice'].mean().plot.bar()\n     plt.xlabel(feature)\n     plt.ylabel('Sale Price')\n     plt.title(feature +' vs '+' SalePrice')\n     plt.show()","a41daa08":"## Getting List of Continuous Variable\ncontinuous_variables=[]\nfor feature in numerical_features:\n    if feature not in discrete_variables and feature not in temporal_features:\n        continuous_variables.append(feature)\ndata[continuous_variables].head()","ef59b0f6":"## Exploring the distribution of continuous variables\nfor feature in continuous_variables:\n     data[feature].hist(bins=30)\n     plt.title(feature)\n     plt.show()\n","dba3b77f":"## visualize outliers\nfor feature in continuous_variables:\n    if 0 in data[feature].unique():\n        pass\n    else:\n        sns.boxplot(y=np.log(data[feature]))\n        plt.show()","bc29366e":"## get the list of categoriacl features\ncategorical_features=[]\nfor feature in data.columns:\n    if data[feature].dtype=='O':\n        categorical_features.append(feature)\nprint(len(categorical_features))\ndata[categorical_features].head()","ab075928":"#visualize categorical features\nfor feature in categorical_features:\n    data.groupby(feature)['SalePrice'].mean().plot.bar()\n    plt.title(feature + 'vs Sale Price')\n    plt.show()","b775dc23":"## replace NAN values of categorical features\nfor feature in categorical_features:\n    if feature in feature_with_na:\n        data[feature]=data[feature].fillna('missing')\ndata.head()","ca57f208":"for feature in categorical_features:\n    labels_ordered=data.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    data[feature]=data[feature].map(labels_ordered)\n    \ndata.head()","b63bc80c":"## replace nan values of numerical features with median as outliers are their\nfor feature in numerical_features:\n    if feature in feature_with_na:\n        data[feature]=data[feature].fillna(data[feature].median())\ndata.head(10)","2350d466":"## handle temporay varables\nfor feature in temporal_features:\n    if feature != 'YrSold' :\n        data[feature]=data['YrSold']-data[feature]\ndata.head(10)","5555a753":"## Droping Yr Buid Feature\ndata=data.drop('YrSold',axis=1)\ndata.head()","2b8f2f4a":"data_x=data.iloc[:,:-1]\ndata_y=data.iloc[:,-1]\ntrain_x_data=data_x.iloc[:trainrow]\ntest_x_data=data_x.iloc[trainrow:]\ntrain_y_data=data_y.iloc[:trainrow]\ntest_y_data=data_y.iloc[trainrow:]\ntrain_x_data","f4d8f891":"from sklearn.preprocessing import MinMaxScaler","8a1c897b":"scaler = MinMaxScaler()\nscaler=scaler.fit(train_x_data)\nscaled_x_data=scaler.transform(train_x_data)\nscaled_x_data_test=scaler.transform(test_x_data)\nscaled_x_data","1ef11dbc":"from sklearn.linear_model import LinearRegression\nreg_liner=LinearRegression()\nreg_liner.fit(scaled_x_data,train_y_data)\nreg_liner.score(scaled_x_data,train_y_data)","d47ee506":"# scaled_x_data_test.shape\ntest_dataset","3ab3eb5f":"preds_test = reg_liner.predict(scaled_x_data_test)","b250dcf5":"\noutput = pd.DataFrame({'Id': test_dataset.Id,\n                      'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","7b3f1c09":"## Please Give Your valuable feedback","88dfce38":"### outliers\n","3cfb7810":"#### continuous variable","b4f6e367":"we can see as year sold is increasing sale price is decreasing which should not a expected behaviour","dcfae708":"## Feature Engineering","7fbdeeee":"#### discrete Variable","820af519":"#### Temporal Features(eg: Year)","a343c182":"## Feature Scaling","507fcc3f":"### Numerical Features","8cfa7bce":"#### Categorical Feature","11ea2914":"#### Done with Feture Scaling now lets build model"}}