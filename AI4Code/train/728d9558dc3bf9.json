{"cell_type":{"8add6d2a":"code","a75664fb":"code","3ca2481a":"code","0b029434":"code","2d664c8d":"code","1ee245e9":"code","72f9a4fa":"code","a7f77f70":"code","a54d7c2a":"code","ec80302a":"code","c95b910d":"code","3d0d0890":"code","313ebe20":"code","bd2639d3":"code","c59f7712":"markdown","e4f4b81c":"markdown","d627ac76":"markdown","980f596f":"markdown","4be716de":"markdown","4a30469f":"markdown"},"source":{"8add6d2a":"#Import the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC \nfrom sklearn.neural_network import MLPClassifier\n","a75664fb":"data = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","3ca2481a":"data","0b029434":"mappings = list()\n\nencoder = LabelEncoder()\n\nfor column in range(len(data.columns)) : \n    data[data.columns[column]] = encoder.fit_transform(data[data.columns[column]])\n    mappings_dict = {index: label for index, label in enumerate (encoder.classes_)}\n    mappings.append(mappings_dict)","2d664c8d":"mappings","1ee245e9":"Y = data['class']\nX = data.drop('class', axis = 1)\n","72f9a4fa":"scaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)","a7f77f70":"X_train, X_test, Y_train , Y_test = train_test_split(X, Y , train_size = 0.8 )","a54d7c2a":"log_model = LogisticRegression( )\nsvm_model = SVC( C = 1, kernel = 'rbf')\nnn_model = MLPClassifier(hidden_layer_sizes= (128, 128))","ec80302a":"np.sum(Y)\/len(Y)","c95b910d":"log_model.fit(X_train , Y_train)\nsvm_model.fit(X_train , Y_train)\nnn_model.fit(X_train , Y_train)","3d0d0890":"print(f\"--- Logistic Regression: {log_model.score(X_test,Y_test)}\")\nprint(f\"Support Vector Machine : {svm_model.score(X_test,Y_test)}\")\nprint(f\"--------Neural Network : {nn_model.score(X_test,Y_test)}\")","313ebe20":"X_test.shape","bd2639d3":"corr = data.corr()\n\nsns.heatmap(corr)","c59f7712":"# Visualization","e4f4b81c":"# Result \n**Astounding results, 100% accuracy with Support Vector Machine and Neural Network.**","d627ac76":"# Training","980f596f":"# Let's Begin","4be716de":"# Preprocessing","4a30469f":"# Model Selection"}}