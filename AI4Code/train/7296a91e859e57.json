{"cell_type":{"9d24e953":"code","2c551340":"code","bc2788db":"code","e53dda4f":"code","4cc73bbc":"code","750503eb":"code","24b26dce":"code","8b930796":"code","6e6b4700":"code","64e08a8d":"code","eee2987d":"markdown","2fb9d527":"markdown","09007374":"markdown","097e8ca9":"markdown","42076d5a":"markdown","323a0381":"markdown","41bf5577":"markdown","2922685c":"markdown","45595a43":"markdown"},"source":{"9d24e953":"# Familiar imports\nimport time\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import cross_validate, cross_val_predict\n\n\nfrom sklearn.compose import make_column_selector\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import  ElasticNet\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.experimental import enable_hist_gradient_boosting  # noqa\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nimport xgboost as xgb\nfrom sklearn.svm import LinearSVR\n\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import KFold\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings('ignore')","2c551340":"# Load the training data\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)\n\n# Preview the data\ntrain.head()","bc2788db":"# Separate target from features\ny = train['target']\nfeatures = train.drop(['target'], axis=1)\n\n# Preview features\nfeatures.head()","e53dda4f":"# List of categorical columns\nobject_cols = [col for col in features.columns if 'cat' in col]","4cc73bbc":"# Get number of unique entries in each column with categorical data\nobject_nunique = list(map(lambda col: features[col].nunique(), object_cols))\nd = dict(zip(object_cols, object_nunique))\n\n# Print number of unique entries by column, in ascending order\nsorted(d.items(), key=lambda x: x[1])","750503eb":"# Columns that will be one-hot encoded\nlow_cardinality_cols = [col for col in object_cols if features[col].nunique() < 10]\n\n# Columns that will be dropped from the dataset\nhigh_cardinality_cols = list(set(object_cols)-set(low_cardinality_cols))\n\nprint('Categorical columns that will be one-hot encoded:', low_cardinality_cols)\nprint('\\nCategorical columns that will be dropped from the dataset:', high_cardinality_cols)","24b26dce":"from sklearn.preprocessing import OneHotEncoder\n\n# Use as many lines of code as you need!\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\n\nOH_cols_X = pd.DataFrame(OH_encoder.fit_transform(features[low_cardinality_cols])) # Your code here\nOH_cols_X_test = pd.DataFrame(OH_encoder.transform(test[low_cardinality_cols]))      # Your code here\n\nOH_cols_X.index = features.index\nOH_cols_X_test.index = test.index\n\nnum_X = features.drop(object_cols, axis=1)\nnum_X_test = test.drop(object_cols, axis=1)\n\nX = pd.concat([num_X, OH_cols_X], axis=1)\nX_test = pd.concat([num_X_test, OH_cols_X_test], axis=1)","8b930796":"xgb_params = {\n    'booster': 'gbtree',\n    'n_estimators': 10000,\n    'learning_rate': 0.05,\n    'reg_lambda': 10,\n    'reg_alpha': 26,\n    'subsample': 0.9,\n    'colsample_bytree': 0.12,\n    'max_depth': 3,\n    'random_state': 91 \n}","6e6b4700":"N_FOLD = 7\n\n#Setting the kfold parameters\nkf = KFold(n_splits=N_FOLD, shuffle=True)\n\noof_preds = np.zeros((X.shape[0],))\npredictions = 0\nmodel_fi = 0\nmean_rmse = 0\n\nfor num, (train_idx, valid_idx) in enumerate(kf.split(X)):\n    # split the train data into train and validation\n    X_train = X.iloc[train_idx]\n    X_valid = X.iloc[valid_idx]\n    y_train = y.iloc[train_idx]\n    y_valid = y.iloc[valid_idx]\n    \n    model = XGBRegressor(**xgb_params)\n    model.fit(X_train, y_train, \n          eval_set=[(X_valid,y_valid)],\n          early_stopping_rounds=400,\n          verbose=100)\n    \n    #Mean of the predictions\n    predictions += model.predict(X_test) \/ N_FOLD\n    \n    #Mean of feature importance\n    model_fi += model.feature_importances_ \/ N_FOLD \n    \n    #Out of Fold predictions\n    oof_preds[valid_idx] = model.predict(X_valid)\n    fold_rmse = np.sqrt(mean_squared_error(y_valid, oof_preds[valid_idx]))\n    print(f\"Fold {num} | RMSE: {fold_rmse}\")\n    \n    mean_rmse += fold_rmse \/ N_FOLD\n    \nprint(f\"\\nOverall RMSE: {mean_rmse}\")","64e08a8d":"# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","eee2987d":"In the code cell above, we set `squared=False` to get the root mean squared error (RMSE) on the validation data.\n\n# Step 5: Submit to the competition\n\nWe'll begin by using the trained model to generate predictions, which we'll save to a CSV file.","2fb9d527":"[this kernel](https:\/\/www.kaggle.com\/sergeyzemskov\/xgboost-tuned-hyperparams-eda?scriptVersionId=73319681&cellId=38),help me to set param for xgb","09007374":"Welcome to the **[30 Days of ML competition](https:\/\/www.kaggle.com\/c\/30-days-of-ml\/overview)**!  In this notebook, you'll learn how to make your first submission.\n\nBefore getting started, make your own editable copy of this notebook by clicking on the **Copy and Edit** button.\n\n# Step 1: Import helpful libraries\n\nWe begin by importing the libraries we'll need.  Some of them will be familiar from the **[Intro to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)** course and the **[Intermediate Machine Learning](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)** course.","097e8ca9":"# Step 6: Keep Learning!\n\nIf you're not sure what to do next, you can begin by trying out more model types!\n1. If you took the **[Intermediate Machine Learning](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)** course, then you learned about **[XGBoost](https:\/\/www.kaggle.com\/alexisbcook\/xgboost)**.  Try training a model with XGBoost, to improve over the performance you got here.\n\n2. Take the time to learn about **Light GBM (LGBM)**, which is similar to XGBoost, since they both use gradient boosting to iteratively add decision trees to an ensemble.  In case you're not sure how to get started, **[here's a notebook](https:\/\/www.kaggle.com\/svyatoslavsokolov\/tps-feb-2021-lgbm-simple-version)** that trains a model on a similar dataset.","42076d5a":"# Step 2: Load the data\n\nNext, we'll load the training and test data.  \n\nWe set `index_col=0` in the code cell below to use the `id` column to index the DataFrame.  (*If you're not sure how this works, try temporarily removing `index_col=0` and see how it changes the result.*)","323a0381":"# Step 3: Prepare the data\n\nNext, we'll need to handle the categorical columns (`cat0`, `cat1`, ... `cat9`).  \n\nIn the **[Categorical Variables lesson](https:\/\/www.kaggle.com\/alexisbcook\/categorical-variables)** in the Intermediate Machine Learning course, you learned several different ways to encode categorical variables in a dataset.  In this notebook, we'll use ordinal encoding and save our encoded features as new variables `X` and `X_test`.","41bf5577":"The next code cell separates the target (which we assign to `y`) from the training features (which we assign to `features`).","2922685c":"Once you have run the code cell above, follow the instructions below to submit to the competition:\n1. Begin by clicking on the **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the file you would like to submit, and click on the **Submit** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.","45595a43":"# Step 4: Train a model\n\nNow that the data is prepared, the next step is to train a model.  \n\nIf you took the **[Intro to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)** courses, then you learned about **[Random Forests](https:\/\/www.kaggle.com\/dansbecker\/random-forests)**.  In the code cell below, we fit a random forest model to the data."}}