{"cell_type":{"f79944ac":"code","467bcdd5":"code","f7208125":"code","37f3a581":"code","1e6151a4":"code","4e7646cc":"code","175f5c42":"code","f72a5c69":"code","1d05ed6c":"code","22e03da3":"code","05217537":"code","4e7e5879":"code","ad6498e9":"code","f87ca1a2":"code","6f944351":"code","2a4c811b":"code","3567e80d":"code","d45d5d2c":"code","de2cfac0":"code","c293e4d3":"code","3737bebb":"code","559133c3":"code","62a5a3e4":"code","920a8d3f":"code","b8825f98":"code","d55637e2":"code","36f19f56":"code","c22dd989":"code","79393da7":"code","48ba8a75":"code","9aa46831":"code","bd7a5332":"code","897542f6":"code","ebb2f347":"code","d2e89631":"code","18a3b261":"code","8caad164":"code","bd0bf10f":"code","22be914e":"markdown","151555e4":"markdown","d8ee2f22":"markdown","055f0e19":"markdown","e8e1ab32":"markdown","a76ebf80":"markdown"},"source":{"f79944ac":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","467bcdd5":"import random\nimport gc\nfrom sklearn.preprocessing import RobustScaler,StandardScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve,RocCurveDisplay,ConfusionMatrixDisplay,confusion_matrix,roc_auc_score,accuracy_score\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn import preprocessing\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","f7208125":"train = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv') \ntest = pd.read_csv('..\/input\/g-research-crypto-forecasting\/example_test.csv') \nsub = pd.read_csv('..\/input\/g-research-crypto-forecasting\/example_sample_submission.csv') \nasset_details = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv')  ","37f3a581":"train.head()","1e6151a4":"test.head()","4e7646cc":"print(f\"We have {train.shape[0]} rows in the training set while we have {test.shape[0]} in the test set\")","175f5c42":"train.info()","f72a5c69":"test.info()","1d05ed6c":"#Check if there'is null values\ntrain.isnull().sum()","22e03da3":"(750338\/train.shape[0])*100","05217537":"#Check if there'is null values\ntest.isnull().sum()","4e7e5879":"train.describe()","ad6498e9":"test.describe()","f87ca1a2":"asset_details","6f944351":"sub.head()","2a4c811b":"train[train['timestamp']==1514764860]","3567e80d":"# after 60 seconds\ntrain[train['timestamp']==1514764920]","d45d5d2c":"# Target distribution\nplt.figure(figsize = (12,6))\nsns.distplot(train.Target, kde = True, hist=True)","de2cfac0":"train['timestamp'] = pd.to_datetime(train['timestamp'], unit='s')\ntrain['timestamp'] = pd.to_datetime(train['timestamp']).dt.to_period('D')\n\ntrain['avg_Volume_per_Day'] = train.groupby('timestamp').Volume.transform('mean')\ntrain['avg_Close_per_Day'] = train.groupby('timestamp').Close.transform('mean')\ntrain['avg_Low_per_Day'] = train.groupby('timestamp').Low.transform('mean')\ntrain['avg_High_per_Day'] = train.groupby('timestamp').High.transform('mean')\ntrain['avg_Open_per_Day'] = train.groupby('timestamp').Open.transform('mean')\ntrain['avg_Count_per_Day'] = train.groupby('timestamp').Count.transform('mean')\ntrain['avg_VWAP_per_Day'] = train.groupby('timestamp').VWAP.transform('mean')\ntrain['avg_Target_per_Day'] = train.groupby('timestamp').Target.transform('mean')\ntrain.head(5)","c293e4d3":"data  = train.drop_duplicates(subset=['timestamp'])","3737bebb":"data","559133c3":"data = data.set_index(\"timestamp\")","62a5a3e4":"moving_average = data['avg_Open_per_Day'].rolling(window=1,       # 1 day window\n    center=True,      # puts the average at the center of the window \n).mean()              # compute the mean (could also do median, std, min, max, ...)\n\nax = data['avg_Open_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_Open_per_Day\", legend=False);","920a8d3f":"moving_average = data['avg_High_per_Day'].rolling(window=1, center=True).mean()             \n\nax = data['avg_High_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_High_per_Day\", legend=False);","b8825f98":"moving_average = data['avg_Low_per_Day'].rolling(window=1,center=True).mean()              \n\nax = data['avg_Low_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_Low_per_Day\", legend=False);","d55637e2":"moving_average = data['avg_Close_per_Day'].rolling(window=1,center=True).mean()              \n\nax = data['avg_Close_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_close_per_Day\", legend=False);","36f19f56":"moving_average = data['avg_VWAP_per_Day'].rolling(window=1,center=True).mean()\n\nax = data['avg_VWAP_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_VWAP_per_Day\", legend=False);","c22dd989":"moving_average = data['avg_Volume_per_Day'].rolling(window=1,center=True).mean()              \n\nax = data['avg_Volume_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_Volume_per_Day\", legend=False);","79393da7":"moving_average = data['avg_Target_per_Day'].rolling(window=1,center=True).mean()              \n\nax = data['avg_Target_per_Day'].plot(style=\".\", color=\"0.5\",figsize=(24,5))\nmoving_average.plot(ax=ax, linewidth=3, title=\"avg_Target_per_Day\", legend=False);","48ba8a75":"corr = train[['Count', 'Open', 'High', 'Low', 'Close','Volume', 'VWAP', 'Target']].corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(5)","9aa46831":"#scatter plot avg_Close_per_Day\/avg_High_per_Day\ndata.plot.scatter(x=\"avg_Close_per_Day\", y='avg_High_per_Day');","bd7a5332":"#scatter plot avg_Close_per_Day\/avg_Low_per_Day\ndata.plot.scatter(x=\"avg_Close_per_Day\", y='avg_Low_per_Day');","897542f6":"#scatter plot avg_Close_per_Day\/avg_Open_per_Day\ndata.plot.scatter(x=\"avg_Close_per_Day\", y='avg_Open_per_Day');","ebb2f347":"#scatter plot avg_Close_per_Day\/avg_VWAP_per_Day\ndata.plot.scatter(x=\"avg_Close_per_Day\", y='avg_VWAP_per_Day');","d2e89631":"#scatter plot avg_Close_per_Day\/avg_Count_per_Day\ndata.plot.scatter(x=\"avg_Close_per_Day\", y='avg_Count_per_Day');","18a3b261":"#scatter plot avg_Volume_per_Day\/avg_Target_per_Day\ndata.plot.scatter(x=\"avg_Volume_per_Day\", y='avg_Target_per_Day');","8caad164":"#drop null values\ntrain = train.dropna()\ntrain_median = train.Target.median()\ntrain_median","bd0bf10f":"# make submission with the target median\nimport gresearch_crypto\nenv = gresearch_crypto.make_env()\niter_test = env.iter_test()\nfor (test, sample_prediction_df) in iter_test:\n    sample_prediction_df['Target'] = train_median\n    env.predict(sample_prediction_df)","22be914e":"* <h3>The data is about historic trades from 2018-01-01 to 2021-09-21 (1360 Days).<\/h3>","151555e4":"# Submission","d8ee2f22":"<b>* Close, High, Low, Volume, Open and VWAP are friends, with a linear relationship \ud83d\ude0b","055f0e19":"* we have 750338 rows with null target value!!! which means that 3% of the training set with null target ","e8e1ab32":"# In Progress .... \ud83c\udfc2\ud83c\udffb","a76ebf80":"# Some Exploratory Data Analysis"}}