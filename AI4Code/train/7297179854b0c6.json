{"cell_type":{"4e007cca":"code","6c2b9b8d":"code","cac9b7f4":"code","f3fb7344":"code","1021a49a":"code","323bdcca":"code","35dfad3a":"markdown","ca1bb531":"markdown","7984d71c":"markdown","a8a51607":"markdown","f13c77ff":"markdown"},"source":{"4e007cca":"from keras.datasets import mnist\nfrom keras.utils import to_categorical\nfrom keras import models\nfrom keras import Sequential\nfrom keras import layers\nfrom keras.optimizers import Adam\nimport pandas as pd\nimport numpy as np\nfrom sklearn import metrics\nfrom keras.layers import Dense, Activation, Convolution2D, MaxPooling2D, Flatten, Input, Dropout\nfrom keras.utils import np_utils\nfrom keras.models import Sequential, Model\nimport xgboost\n\nimport os\nos.environ['CUDA_VISIBLE_DEVICES']='0'","6c2b9b8d":"(X_train, y_train), (X_test, y_test) = mnist.load_data('mnist.npz')\nprint(y_train[:1])","cac9b7f4":"X_train = X_train.reshape(-1, 1,28, 28)\/255.\nX_test = X_test.reshape(-1, 1,28, 28)\/255.\nY_train = np_utils.to_categorical(y_train, num_classes=10)\nY_test = np_utils.to_categorical(y_test, num_classes=10)\nprint(Y_train[:1])","f3fb7344":"inputs = Input(shape=(1, 28,28))\n\nconv2d1 = Convolution2D(filters=64, kernel_size=5, padding='same', data_format='channels_first')(inputs)\nactivation1 = Activation('relu')(conv2d1)\nmaxpooling1 = MaxPooling2D(pool_size=2, strides=2, padding='same', data_format='channels_first')(activation1)\ndropout1 = Dropout(0.25)(maxpooling1)\n\nconv2d2 = Convolution2D(filters=64, kernel_size=4, padding='same', data_format='channels_first')(dropout1)\nactivation2 = Activation('relu')(conv2d2)\nmaxpooling2 = MaxPooling2D(pool_size=2, strides=2, padding='same', data_format='channels_first')(activation2)\n\nflatten = Flatten()(maxpooling2)\n\ndense1 = Dense(1024)(flatten)\nactivation3 = Activation('relu')(dense1)\n\ndense2 = Dense(10)(activation3)\nactivation4 = Activation('softmax')(dense2)\n\nmodel_dense2_output = Model(inputs=inputs, outputs=activation3)","1021a49a":"X_train_xg = model_dense2_output.predict(X_train)\nX_test_xg = model_dense2_output.predict(X_test)","323bdcca":"z = np.concatenate([np.array(X_train_xg).reshape(60000,1024),np.array(y_train).reshape(60000,1)],axis=1)\nz = pd.DataFrame(z)\nz.to_csv('train_xg.csv',index=False)\n\nz = np.concatenate([np.array(X_test_xg).reshape(10000,1024),np.array(y_test).reshape(10000,1)],axis=1)\nz = pd.DataFrame(z)\nz.to_csv('test_xg.csv',index=False)\n\ntrain = pd.read_csv('train_xg.csv')\ntrain_y = train['1024'].astype('int')\ntrain_x = train.drop(['1024'],axis=1)\ndataset = xgboost.DMatrix(train_x, label=train_y)\nwatchlist = [(dataset, 'train')]\nparams = {'max_depth':7, 'eta':0.1, 'silent':1, 'num_class':10,'objective':'multi:softmax' } \nmodel_xg = xgboost.train(params, dataset, num_boost_round=150, evals=watchlist)\n\ntest = pd.read_csv('test_xg.csv')\ntest_y = test['1024'].astype('int')\ntest_x = test.drop(['1024'],axis=1)\n\ntest_x = xgboost.DMatrix(test_x)\nresult = model_xg.predict(test_x)\n\nprint(metrics.classification_report(test_y, result))\nprint(metrics.confusion_matrix(test_y, result))","35dfad3a":"**Importing libraries**","ca1bb531":"**Let's setup data for XGBoost**","7984d71c":"**Data pre-processing**","a8a51607":"<div style=\"text-align:center;font-size:24px;font-weight:bold;\">Build XGBoost on top of CNN<\/div>\n\n![unknown1.png](attachment:unknown1.png)","f13c77ff":"<div style=\"text-align:center;font-size:24px;font-weight:bold;\">Build CNN<\/div>\n\n![unknown.png](attachment:unknown.png)\n"}}