{"cell_type":{"7511021c":"code","317c4cb8":"code","5b09a892":"code","8e8afdad":"code","2f8f1927":"code","37395bb9":"code","5dc91208":"code","940e25a9":"code","b71a9d27":"code","6ffa50db":"code","428e8c0b":"code","5042cbdb":"code","6d4d6951":"code","c9f802f9":"code","8774f0a9":"code","631ef95c":"code","24f5f697":"code","a693cf7c":"code","f2d51310":"code","10fef949":"code","8252254f":"code","87337667":"code","deb489c5":"code","b28de31b":"code","15ebf70b":"code","448ee0a2":"code","e518d830":"code","4ed37fce":"code","45c3fc15":"code","5cec795c":"code","bc3e2bd4":"code","19a26e96":"code","376dbb99":"code","dbc1e094":"code","90570e0f":"code","bd0e72cd":"code","435e2c56":"code","725ab52e":"code","3a7574ed":"code","ff4a2147":"code","67d991ab":"code","262f14b5":"code","9802792a":"code","74472a53":"code","470704a1":"code","6df08e80":"code","d3389b2e":"code","38595b1e":"code","18c10b61":"code","c720517f":"code","3628b65a":"code","0ab93e63":"code","f5252934":"code","3f75f1a0":"code","787bf198":"code","9d12efc9":"code","7579e18a":"code","dd3c28a1":"code","8cb83d0d":"code","9971312f":"code","3fb64813":"code","36a94602":"code","c042ad2d":"code","8e7fffc4":"code","c495a888":"code","d1d5d9dd":"code","c03a68cc":"code","60bb02bb":"code","0540b0d9":"code","1312d05f":"code","7f5d3a75":"code","e306929e":"code","3ed6859a":"code","c6508468":"code","617dd544":"code","64c1604f":"code","685e2e5c":"code","c6320373":"code","214726b9":"code","16ac6fb1":"code","58112542":"code","473c4337":"code","750449a2":"code","649d0009":"code","c5b0a187":"code","53cdfb03":"code","9b8f987e":"code","0b9ee85d":"code","0db6b8ff":"code","d7944e56":"code","15e024e4":"code","666f518f":"code","69beae9e":"code","ed2c7f10":"markdown","934aace0":"markdown","1d3352ec":"markdown","20cdf8b7":"markdown","5ef31765":"markdown","70c62dcd":"markdown","8f006fa5":"markdown","aceb03c5":"markdown","e1223b7c":"markdown","3344e574":"markdown","e539fd05":"markdown","8da86923":"markdown","d5bb816f":"markdown","17770104":"markdown","e6a918fd":"markdown","aff8f4c4":"markdown","cfe883a4":"markdown","a0388640":"markdown","8b9ca72e":"markdown","521c4dad":"markdown","38318245":"markdown","62798b9c":"markdown","563d5033":"markdown","1cba9e32":"markdown","9c5649e1":"markdown","6c1bb3fa":"markdown","93d7fde5":"markdown","a43387c3":"markdown","2ca57ab7":"markdown","1f62e427":"markdown","e155dc35":"markdown","1394f236":"markdown","92251011":"markdown","57a99c48":"markdown"},"source":{"7511021c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","317c4cb8":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\n#ignore warning\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","5b09a892":"df_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","8e8afdad":"df_train.describe()","2f8f1927":"df_test.describe()","37395bb9":"for col in df_train.columns:\n    msg='columns: {:>10}\\t Percent of NaN value: {: 2f}%'.format(col,100*(df_train[col].isnull().sum()\/df_train[col].shape[0]))\n    print(msg)","5dc91208":"for col in df_test.columns:\n    msg='columns: {:>10}\\t Percent of NaN value: {: 2f}%'.format(col,100*(df_test[col].isnull().sum()\/df_test[col].shape[0]))\n    print(msg)","940e25a9":"f, ax= plt.subplots(1,2,figsize=(18,8)) # 1\ud5892\uc5f4, \uac00\ub85c 18 \uc138\ub85c 8\uc758 plot \ub9cc\ub4e4\uae30 \ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],# pie plot \uac04\uc5d0 \uac04\uaca9 \ubc8c\ub824\uc90c\n                                             autopct='%1.1f%%',ax=ax[0],shadow=True) # \ud37c\uc13c\ud2b8 \ud45c\uc2dc\uc640 \uadf8\ub9bc\uc790 \uc124\uc815\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel(' ')\nsns.countplot('Survived',data=df_train,ax=ax[1])\nax[1].set_title('Countplot - Survived')\nax[1].set_ylabel(' ')\nplt.show()","b71a9d27":"df_train.shape","6ffa50db":"df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).count()","428e8c0b":"df_train[['Pclass','Survived']]","5042cbdb":"pd.crosstab(df_train['Pclass'],df_train['Survived'],margins=True).style.background_gradient(cmap='cool')","6d4d6951":"y_position=1.02\nf, ax= plt.subplots(1,2,figsize=(18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'],ax=ax[0])\nax[0].set_title('number of passenger by pclass')\nax[0].set_ylabel('count')\nsns.countplot('Pclass',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('pclass: survived vs dead',y=y_position)\nplt.show()","c9f802f9":"f, ax= plt.subplots(1,2,figsize=(18,8))\ndf_train[['Sex','Survived']].groupby(['Sex'],as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nax[0].set_ylabel(' ')\nsns.countplot('Sex',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()\n","8774f0a9":"pd.crosstab(df_train['Sex'],df_train['Survived'],margins=True).style.background_gradient(cmap='summer')","631ef95c":"sns.factorplot('Pclass','Survived',hue='Sex',data=df_train,size=6,aspect=1.5)\nplt.show()","24f5f697":"sns.factorplot('Sex','Survived',col='Pclass',data=df_train,size=6,aspect=1.5)\nplt.show()","a693cf7c":"print('oldest people age: {:.1f} Years'.format(df_train['Age'].max()))\nprint('youngest people age: {:.1f} Years'.format(df_train['Age'].min()))\nprint('mean age: {:.1f} Years'.format(df_train['Age'].mean()))","f2d51310":"f,ax= plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived']==1]['Age'],ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","10fef949":"plt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])\nplt.show()","8252254f":"cummulate_suvival_ratio=[]\nfor i in range(1, 80):\n    cummulate_suvival_ratio.append(df_train[df_train['Age']<i]['Survived'].sum()\/len(df_train[df_train['Age']<i]['Survived']))\n\nplt.figure(figsize=(7,7))\nplt.plot(cummulate_suvival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","87337667":"f, ax= plt.subplots(1,2,figsize=(18,8))\nsns.violinplot('Pclass','Age',hue='Survived',data=df_train,sclae='count',split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\n\nsns.violinplot('Sex','Age',hue='Survived',data=df_train,sclae='count',split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\n\nplt.show()\n","deb489c5":"##\ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874 \ub192\ub2e4 \ud2b9\ud788 \uc5ec\uc131\uacfc \uc544\uc774\ub4e4\uc744 \uba3c\uc800 \ucc59\uacbc\ub2e4\ub294 \uac78 \uc54c \uc218 \uc788\ub2e4.\n","b28de31b":"f,ax= plt.subplots(1,1,figsize=(7,7))\ndf_train[['Embarked','Survived']].groupby(['Embarked'],as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar(ax=ax)\n","15ebf70b":"##\uc0dd\uc874\ub960\uc740 \ud0d1\uc2b9\ud56d\uad6c\ubcc4\ub85c \ube44\uc2b7\ud55c \uac78\ub85c \ubcf4\uc784","448ee0a2":"f,ax = plt.subplots(2,2,figsize=(15,10))\nsns.countplot('Embarked',data=df_train,ax=ax[0,0])\n\nsns.countplot('Embarked',hue='Sex',data=df_train,ax=ax[0,1])\n\nsns.countplot('Embarked',hue='Pclass',data=df_train,ax=ax[1,0])\n\nsns.countplot('Embarked',hue='Survived',data=df_train,ax=ax[1,1])\n\nplt.subplots_adjust(wspace=0.5, hspace=0.6) #\uc88c\uc6b0\uc0c1\ud558 \uac04\uaca9 \uc124\uc815\ud574\uc90c\nplt.show()","e518d830":"df_train['FamilySize']=df_train['SibSp']+df_train['Parch']+1 #\uc790\uae30 \uc790\uc2e0 \ud3ec\ud568\ud574\uc57c \ud574\uc11c 1 \ub354\ud568, \ucd1d \uac00\uc871 \uc218 \uad6c\ud55c \uac83.\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 ","4ed37fce":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","45c3fc15":"f,ax= plt.subplots(1,3,figsize=(40,10))\nsns.countplot('FamilySize',data=df_train,ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","5cec795c":"f, ax = plt.subplots(1,1,figsize=(8,8))\ng=sns.distplot(df_train['Fare'],color='b',label='skewness : {:.2f}'.format(df_train['Fare'].skew()),ax=ax)\ng=g.legend(loc='best')","bc3e2bd4":"print('max: ',df_train['Fare'].max())\nprint('min: ',df_train['Fare'].min())\nprint('mean: ',df_train['Fare'].mean())\n","19a26e96":"df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658","376dbb99":"df_train['Fare']=df_train['Fare'].map(lambda i : np.log(i) if i>0 else 0)\ndf_test['Fare']=df_test['Fare'].map(lambda i : np.log(i) if i>0 else 0)","dbc1e094":"f, ax = plt.subplots(1,1,figsize=(8,8))\ng=sns.distplot(df_train['Fare'],color='b',label='skewness : {:.2f}'.format(df_train['Fare'].skew()),ax=ax)\ng=g.legend(loc='best')","90570e0f":"df_train.isnull().sum()","bd0e72cd":"df_train['Name']","435e2c56":"df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.')\n","725ab52e":"df_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.')","3a7574ed":"pd.crosstab(df_train['Initial'],df_train['Sex']).T.style.background_gradient(cmap='summer')","ff4a2147":"pd.crosstab(df_test['Initial'],df_test['Sex']).T.style.background_gradient(cmap='summer')","67d991ab":"df_train['Initial'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Master','Miss','Mlle','Mme','Mr','Mrs','Ms','Rev','Sir','Dona'],\n                           ['Mr','Mr','Other','Mr','Mr','Other','Miss','Mr','Master','Miss','Miss','Mrs','Mr','Mrs','Miss','Other','Other','Other'],inplace=True)","262f14b5":"df_test['Initial'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major','Master','Miss','Mlle','Mme','Mr','Mrs','Ms','Rev','Sir','Dona'],\n                           ['Mr','Mr','Other','Mr','Mr','Other','Miss','Mr','Master','Miss','Miss','Mrs','Mr','Mrs','Miss','Other','Other','Other'],inplace=True)","9802792a":"df_train.groupby(['Initial']).mean().sort_values(by='Survived',ascending=False)","74472a53":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","470704a1":"df_all=pd.concat([df_train,df_test])","6df08e80":"df_all","d3389b2e":"df_all.reset_index(drop=True)","38595b1e":"df_all.groupby('Initial').mean()","18c10b61":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age']=33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age']=37\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age']=22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age']=5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age']=33\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age']=33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age']=37\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age']=22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age']=5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age']=33","c720517f":"df_train.isnull().sum()","3628b65a":"df_train['Embarked'].isnull().sum()","0ab93e63":"df_train['Embarked'].fillna('S',inplace=True)","f5252934":"df_train['Embarked'].value_counts()","3f75f1a0":"def age_cat(x):\n    if x<10:\n        return 0\n    elif x<20:\n        return 1\n    elif x<30:\n        return 2\n    elif x<40:\n        return 3\n    elif x<50:\n        return 4\n    elif x<60:\n        return 5\n    elif x<70:\n        return 6\n    else:\n        return 7\n    \ndf_train['Age_cat']=df_train['Age'].apply(age_cat)","787bf198":"df_test['Age_cat']=df_train['Age'].apply(age_cat)","9d12efc9":"df_train.drop(['Age'],axis=1,inplace=True)\ndf_test.drop(['Age'],axis=1,inplace=True)","7579e18a":"df_train['Initial']=df_train['Initial'].map({'Master':0,'Miss':1,'Mr':2,'Mrs':3,'Other':4})","dd3c28a1":"df_test['Initial']=df_test['Initial'].map({'Master':0,'Miss':1,'Mr':2,'Mrs':3,'Other':4})","8cb83d0d":"df_train['Embarked'].unique()","9971312f":"df_train['Embarked']=df_train['Embarked'].map({'C':0,'Q':1,'S':2})","3fb64813":"df_test['Embarked']=df_test['Embarked'].map({'C':0,'Q':1,'S':2})","36a94602":"df_train.head()","c042ad2d":"df_train.isnull().any()","8e7fffc4":"df_train['Sex']=df_train['Sex'].map({'female':0,'male':1})\ndf_test['Sex']=df_test['Sex'].map({'female':0,'male':1})","c495a888":"df_train.head()","d1d5d9dd":"heatmap_data=df_train[['Survived','Pclass','Sex','SibSp','Fare','Embarked','FamilySize','Initial','Age_cat']]\n\ncol_map=plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(),linewidths=0.1,vmax=1.0,\n           square=True,cmap=col_map,linecolor='White',annot=True,annot_kws={'size':16})\n\ndel heatmap_data\n","c03a68cc":"df_train=pd.get_dummies(df_train,columns=['Initial'],prefix='Initial')","60bb02bb":"df_test=pd.get_dummies(df_test,columns=['Initial'],prefix='Initial')","0540b0d9":"df_train=pd.get_dummies(df_train,columns=['Embarked'],prefix='Embarked')\ndf_test=pd.get_dummies(df_test,columns=['Embarked'],prefix='Embarked')","1312d05f":"df_train.head()","7f5d3a75":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","e306929e":"df_train.head()","3ed6859a":"df_test.head()","c6508468":"#importing all the required ML packages\nfrom sklearn.linear_model import LogisticRegression #logistic regression\nfrom sklearn import svm #support vector Machine\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest\nfrom sklearn.neighbors import KNeighborsClassifier #KNN\nfrom sklearn.naive_bayes import GaussianNB #Naive bayes\nfrom sklearn.tree import DecisionTreeClassifier #Decision Tree\nfrom sklearn.model_selection import train_test_split #training and testing data split\nfrom sklearn import metrics #accuracy measure\nfrom sklearn.metrics import confusion_matrix #for confusion matrix","617dd544":"train,valid=train_test_split(df_train,test_size=0.3,random_state=0,stratify=df_train['Survived'])\ntrain_X=train[train.columns[1:]]\ntrain_Y=train[train.columns[:1]]\nvld_X=valid[valid.columns[1:]]\nvld_Y=valid[valid.columns[:1]]\nX=df_train[df_train.columns[1:]]\nY=df_train['Survived']","64c1604f":"model=svm.SVC(kernel='rbf',C=1,gamma=0.1)\nmodel.fit(train_X,train_Y)\nprediction1=model.predict(vld_X)\nprint('Accuracy for rbf SVM is ',metrics.accuracy_score(prediction1,vld_Y))","685e2e5c":"model=svm.SVC(kernel='linear',C=0.1,gamma=0.1)\nmodel.fit(train_X,train_Y)\nprediction2=model.predict(vld_X)\nprint('Accuracy for linear SVM is',metrics.accuracy_score(prediction2,vld_Y))","c6320373":"model = LogisticRegression()\nmodel.fit(train_X,train_Y)\nprediction3=model.predict(vld_X)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction3,vld_Y))","214726b9":"model=DecisionTreeClassifier()\nmodel.fit(train_X,train_Y)\nprediction4=model.predict(vld_X)\nprint('The accuract of Decision Tree is' ,metrics.accuracy_score(prediction4,vld_Y))","16ac6fb1":"model=KNeighborsClassifier()\nmodel.fit(train_X,train_Y)\nprediction5=model.predict(vld_X)\nprint('The accuracy of KNN is ',metrics.accuracy_score(prediction5,vld_Y))","58112542":"a_index=list(range(1,11))\na=pd.Series()\nx=[0,1,2,3,4,5,6,7,8,9,10]\nfor i in list(range(1,11)):\n    model=KNeighborsClassifier(n_neighbors=i) \n    model.fit(train_X,train_Y)\n    prediction=model.predict(vld_X)\n    a=a.append(pd.Series(metrics.accuracy_score(prediction,vld_Y)))\nplt.plot(a_index, a)\nplt.xticks(x)\nfig=plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()\nprint('Accuracies for different values of n are:',a.values,'with the max value as ',a.values.max())","473c4337":"model=GaussianNB()\nmodel.fit(train_X,train_Y)\nprediction6=model.predict(vld_X)\nprint('The accuracy of the GaussianNB is', metrics.accuracy_score(prediction6,vld_Y))\n","750449a2":"model=RandomForestClassifier(n_estimators=100)\nmodel.fit(train_X,train_Y)\nprediction7=model.predict(vld_X)\nprint('The accuracy of the Random Forests is',metrics.accuracy_score(prediction7,vld_Y))","649d0009":"from pandas import Series","c5b0a187":"feature_importance=model.feature_importances_\nSeries_feat_imp=Series(feature_importance,index=df_test.columns)","53cdfb03":"plt.figure(figsize=(8,8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature Importance')\nplt.ylabel('Feature')\nplt.show()","9b8f987e":"from sklearn.model_selection import KFold #for K-fold cross validation\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nkfold = KFold(n_splits=10, random_state=22) # k=10, split the data into 10 equal parts\nxyz=[]\naccuracy=[]\nstd=[]\nclassifiers=['Linear Svm','Radial Svm','Logistic Regression','KNN','Decision Tree','Naive Bayes','Random Forest']\nmodels=[svm.SVC(kernel='linear'),svm.SVC(kernel='rbf'),LogisticRegression(),KNeighborsClassifier(n_neighbors=9),DecisionTreeClassifier(),GaussianNB(),RandomForestClassifier(n_estimators=100)]\nfor i in models:\n    model = i\n    cv_result = cross_val_score(model,X,Y, cv = kfold,scoring = \"accuracy\")\n    cv_result=cv_result\n    xyz.append(cv_result.mean())\n    std.append(cv_result.std())\n    accuracy.append(cv_result)\nnew_models_dataframe2=pd.DataFrame({'CV Mean':xyz,'Std':std},index=classifiers)       \nnew_models_dataframe2","0b9ee85d":"new_models_dataframe2['CV Mean'].plot.barh(width=0.8)\nplt.title('Average CV Mean Accuracy')\nfig=plt.gcf()\nfig.set_size_inches(8,5)\nplt.show()","0db6b8ff":"model=svm.SVC(kernel='rbf',C=1,gamma=0.1)\nmodel.fit(train_X,train_Y)","d7944e56":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.head()\n","15e024e4":"prediction_final=model.predict(df_test)","666f518f":"submission['Survived']=prediction_final","69beae9e":"submission.to_csv('.\/myfirstsubmission.csv',index=False)","ed2c7f10":"**\uc0c1\uad00\uad00\uacc4 \ubcf4\uae30**","934aace0":"\uc5f0\uc18d\ud615\uc778 Age\ub97c \uce74\ud14c\uace0\ub9ac\ub85c \ubc14\uafb8\uae30 \uc704\ud574 \uc5f0\ub839\ub300 \ubcc0\uc218 \ub9cc\ub4e4\uae30","1d3352ec":"**string\uc778 \uc5f4 \ubaa8\ub450 \uc22b\uc790\ud615\uc73c\ub85c \ubc14\uafd4\uc8fc\uae30**","20cdf8b7":"\ud074\ub798\uc2a4\uac00 \ub192\uc744 \uc218\ub85d \ub098\uc774 \ub9ce\uc740 \uc0ac\ub78c\uc758 \ube44\uc911\uc774 \ub192\ub2e4.","5ef31765":"**Random Forests**","70c62dcd":"S \uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \ud0d1\uc2b9\ud588\uc73c\uba70 S\ub294 \ub0a8\uc131\uc774 \ub354 \ub9ce\uc774 \ud0d4\ub2e4. ","8f006fa5":"\uc0dd\uc874\uc790\ub4e4\uc740 \ub098\uc774\uac00 \uc5b4\ub780 \uacbd\uc6b0\uac00 \ub9ce\uc558\ub2e4.","aceb03c5":"skewness 4.79\ub85c \uad49\uc7a5\ud788 \uce58\uc6b0\ucce4\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4. \uc774\ub300\ub85c \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uba74 \uc88b\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc5d0 Fare\uc5d0 log\ub97c \ucde8\ud574\uc900\ub2e4.\n","e1223b7c":"**K-Nearest Neighbours(KNN)**","3344e574":"null \uac12 \ucc44\uc6b0\uae30","e539fd05":"\ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \ud655\uc2e4\ud788 \uc0dd\uc874\ud655\ub960\uc774 \ub192\ub2e4.\n\n\n\uc911\uc694 \ud53c\uccd0\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4.","8da86923":"**\uc5ec\uc131\uc774 \uc5b4\ub290 \ud074\ub798\uc2a4\ub358 \uc0dd\uc874\ud55c \ud655\ub960\uc774 \ub192\uc73c\uba70 \ub0a8\uc131 \uc5ec\uc131 \ubaa8\ub450 \ud074\ub798\uc2a4\uac00 \ub0ae\uc544\uc9c8\uc218\ub85d \uc0ac\ub9dd\ud655\ub960\uc774 \ub192\uc558\ub2e4.**","d5bb816f":"**Submission**","17770104":"**Embarked","e6a918fd":"**\ub300\ubd80\ubd84 \ud63c\uc790\uc11c \ud0d1\uc2b9, \uac00\uc871\uc218\uac00 \ub108\ubb34 \uc801\uc5b4\ub3c4, \ub9ce\uc544\ub3c4 \uc0dd\uc874\ud655\ub960\uc774 \ub0ae\uc74c\uc744 \uc54c\uc218 \uc788\uc73c\uba70 4,3,2\uba85\uc774 \uc0dd\uc874\ud655\ub960\uc774 \ub192\uc740 \ud3b8\uc774\ub2e4.**","aff8f4c4":"**Feature engineering**","cfe883a4":"**Family - sibsp+parch**","a0388640":"Pclass, Sex, Age violin plot","8b9ca72e":"**Radial Support Vector Machines(rbf-SVM)**","521c4dad":"**Logistic Regression**","38318245":"**Age**","62798b9c":"\ub9c8\ucc2c\uac00\uc9c0\uc758 \ub0b4\uc6a9\uc774\uba70 hue\ub97c col\ub85c \ud574\uc11c \uadf8\ub9ac\uba74 col\uc758 \ud56d\ubaa9 \ubcc4\ub85c \uad6c\ubd84\ud574\uc11c \uadf8\ub824\uc900\ub2e4.","563d5033":"log \ud6c4 \ubd84\ud3ec\uac00 \uad1c\ucc2e\uc544\uc84c\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.","1cba9e32":"**1. Read dataset**","9c5649e1":"pclass","6c1bb3fa":"**Gaussian Naive Bayes**","93d7fde5":"Embarked fill na","a43387c3":"SEX","2ca57ab7":"**Modeling **","1f62e427":"**one-hot-encoding**","e155dc35":"**\ubaa8\ub4e0 \ubcc0\ud658 \ub05d\ub09c \ud6c4 \ud544\uc694\uc5c6\ub294 feature \uc81c\uac70.**","1394f236":"**Fare**","92251011":"**Decision Tree**","57a99c48":"**Linear Support Vector Machine(linear-SVM)**"}}