{"cell_type":{"de985fbe":"code","5f6717fc":"code","6d266284":"code","61decb2b":"code","9bd964c4":"code","bb6774cf":"code","3c22a3f0":"code","c0e6e5a9":"code","eb533dc6":"code","76f4ebeb":"code","df71cc85":"code","f43f27ab":"code","f347e55a":"code","373a2954":"code","7b46f04d":"code","d9b99dc7":"code","ec1e191b":"code","1f60f2cd":"code","d666d639":"code","1f8dd39d":"code","03fb72a0":"code","4a3a818f":"code","04f9b241":"code","25c220bf":"code","fecdf4ad":"code","5fadde8c":"code","4c903e95":"code","50adee1b":"markdown","5d882b16":"markdown","0d7e8d83":"markdown","6b0a0b72":"markdown"},"source":{"de985fbe":"import numpy as np\nimport pandas as pd\nimport os\nimport tqdm\nimport time\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, f1_score, classification_report\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nprint(os.listdir(\"..\/input\"))","5f6717fc":"train = pd.read_csv('..\/input\/train.csv')\ntrain.head()","6d266284":"train.info()","61decb2b":"train['difficulty'].value_counts()","9bd964c4":"train['target'].value_counts()","bb6774cf":"train = train.drop(['Id'], axis=1)\ntrain.head()","3c22a3f0":"Xtrain, Xtest, ytrain, ytest = train_test_split(train.iloc[:,:2], train['target'], test_size = 0.1, random_state = 0)","c0e6e5a9":"diff1 = Xtrain[Xtrain['difficulty'] == 1]\ndiff2 = Xtrain[Xtrain['difficulty'] == 2]\ndiff3 = Xtrain[Xtrain['difficulty'] == 3]\ndiff4 = Xtrain[Xtrain['difficulty'] == 4]","eb533dc6":"diff1['ciphertext'] = diff1['ciphertext'].apply(lambda x: x.replace('1', ' '))\ndiff2['ciphertext'] = diff2['ciphertext'].apply(lambda x: x.replace('8', ' '))\ndiff3['ciphertext'] = diff3['ciphertext'].apply(lambda x: x.replace('8', ' '))\ndiff4['ciphertext'] = diff4['ciphertext'].apply(lambda x: x.replace('8', ' '))\ndiff1.head()","76f4ebeb":"diff_test1 = Xtest[Xtest['difficulty'] == 1]\ndiff_test2 = Xtest[Xtest['difficulty'] == 2]\ndiff_test3 = Xtest[Xtest['difficulty'] == 3]\ndiff_test4 = Xtest[Xtest['difficulty'] == 4]\n\ndiff_test1['ciphertext'] = diff_test1['ciphertext'].apply(lambda x: x.replace('1', ' ')).fillna(0)\ndiff_test2['ciphertext'] = diff_test2['ciphertext'].apply(lambda x: x.replace('8', ' ')).fillna(0)\ndiff_test3['ciphertext'] = diff_test3['ciphertext'].apply(lambda x: x.replace('8', ' ')).fillna(0)\ndiff_test4['ciphertext'] = diff_test4['ciphertext'].apply(lambda x: x.replace('8', ' ')).fillna(0)\ndiff1.head()","df71cc85":"start = time.time()\nvect1 = TfidfVectorizer(analyzer = 'char_wb', lowercase = False, ngram_range=(1, 6))\ntrain_vect1 = vect1.fit_transform(diff1['ciphertext'])\ntest_vect1 = vect1.transform(diff_test1['ciphertext'])\nprint('Time: ' + str(time.time() - start) + 's')\n\nstart = time.time()\nvect2 = TfidfVectorizer(analyzer = 'char_wb', lowercase = False, ngram_range=(1, 6))\ntrain_vect2 = vect2.fit_transform(diff2['ciphertext'])\ntest_vect2 = vect2.transform(diff_test2['ciphertext'])\nprint('Time: ' + str(time.time() - start) + 's')\n\nstart = time.time()\nvect3 = TfidfVectorizer(analyzer = 'char_wb', lowercase = False, ngram_range=(1, 6), max_features = 660000)\ntrain_vect3 = vect3.fit_transform(diff3['ciphertext'])\ntest_vect3 = vect3.transform(diff_test3['ciphertext'])\nprint('Time: ' + str(time.time() - start) + 's')\n\nstart = time.time()\nvect4 = TfidfVectorizer(analyzer = 'char_wb', lowercase = False, ngram_range=(1, 6), max_features = 660000)\ntrain_vect4 = vect4.fit_transform(diff4['ciphertext'])\ntest_vect4 = vect4.transform(diff_test4['ciphertext'])\nprint('Time: ' + str(time.time() - start) + 's')","f43f27ab":"model1 = LogisticRegression(tol=0.001, C=13.0, random_state=34, solver='sag', max_iter=100, multi_class='auto', verbose=1, n_jobs=-1)\nmodel1.fit(train_vect1, ytrain.loc[diff1.index])\n\nmodel2 = LogisticRegression(tol=0.001, C=59.0, random_state=29, solver='sag', max_iter=100, multi_class='auto', verbose=1, n_jobs=-1)\nmodel2.fit(train_vect2, ytrain.loc[diff2.index])\n\nmodel3 = LogisticRegression(tol=0.001, C=10.0, random_state=0, solver='sag', max_iter=100, multi_class='auto', verbose=1, n_jobs=-1)\nmodel3.fit(train_vect3, ytrain.loc[diff3.index])\n\nmodel4 = LogisticRegression(tol=0.001, C=10.0, random_state=0, solver='sag', max_iter=100, multi_class='auto', verbose=1, n_jobs=-1)\nmodel4.fit(train_vect4, ytrain.loc[diff4.index])","f347e55a":"pred1 = model1.predict(test_vect1)\npred2 = model2.predict(test_vect2)\npred3 = model3.predict(test_vect3)\npred4 = model4.predict(test_vect4)","373a2954":"print(accuracy_score(pred1, ytest.loc[diff_test1.index]))\nprint(accuracy_score(pred2, ytest.loc[diff_test2.index]))\nprint(accuracy_score(pred3, ytest.loc[diff_test3.index]))\nprint(accuracy_score(pred4, ytest.loc[diff_test4.index]))","7b46f04d":"print(f1_score(pred1, ytest.loc[diff_test1.index], average='macro')) # 0.6561271380779565\nprint(f1_score(pred2, ytest.loc[diff_test2.index], average='macro')) # 0.6593521513806591 \nprint(f1_score(pred3, ytest.loc[diff_test3.index], average='macro')) # 0.4219906210294547\nprint(f1_score(pred4, ytest.loc[diff_test4.index], average='macro'))","d9b99dc7":"test1 = pd.read_csv('..\/input\/test.csv')\ntest = test1.copy()\ntest.head()","ec1e191b":"test_diff1 = test[test['difficulty'] == 1]\ntest_diff2 = test[test['difficulty'] == 2]\ntest_diff3 = test[test['difficulty'] == 3]\ntest_diff4 = test[test['difficulty'] == 4]","1f60f2cd":"test_diff1['ciphertext'] = test_diff1['ciphertext'].apply(lambda x: x.replace('1', ' '))\ntest_diff2['ciphertext'] = test_diff2['ciphertext'].apply(lambda x: x.replace('8', ' '))\ntest_diff3['ciphertext'] = test_diff3['ciphertext'].apply(lambda x: x.replace('8', ' '))\ntest_diff4['ciphertext'] = test_diff4['ciphertext'].apply(lambda x: x.replace('8', ' '))","d666d639":"start = time.time()\ntest_vect_1 = vect1.transform(test_diff1['ciphertext'])\ntest_vect_2 = vect2.transform(test_diff2['ciphertext'])\ntest_vect_3 = vect3.transform(test_diff3['ciphertext'])\ntest_vect_4 = vect4.transform(test_diff4['ciphertext'])\nprint('Time taken: ' + str(time.time() - start))","1f8dd39d":"test_pred1 = model1.predict(test_vect_1)\ntest_pred2 = model2.predict(test_vect_2)\ntest_pred3 = model3.predict(test_vect_3)\ntest_pred4 = model4.predict(test_vect_4)","03fb72a0":"test_diff1['pred'] = test_pred1\ntest_diff2['pred'] = test_pred2\ntest_diff3['pred'] = test_pred3\ntest_diff4['pred'] = test_pred4","4a3a818f":"test_diff1.head()","04f9b241":"test_diff = pd.concat([test_diff1, test_diff2, test_diff3, test_diff4])","25c220bf":"test_diff = test_diff.set_index('Id').loc[test1['Id']]","fecdf4ad":"test_diff = test_diff.drop(['difficulty', 'ciphertext'], axis=1)\ntest_diff = test_diff.reset_index()","5fadde8c":"test_diff.columns = ['Id', 'Predicted']","4c903e95":"test_diff.to_csv('submission.csv', index=False)","50adee1b":"## ML Models","5d882b16":"### Logistic Regression","0d7e8d83":"### Test Prediction","6b0a0b72":"### Vectorization"}}