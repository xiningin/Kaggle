{"cell_type":{"9bf2ec7e":"code","bc201d09":"code","2a8e8349":"code","52c5fae6":"code","f72f145c":"code","e2d2432e":"code","f7fdd729":"code","30c1eb90":"code","7698391a":"code","30374154":"code","d6d866cd":"code","d24ed48e":"code","1355d8cd":"code","8ac120e4":"code","185ed9d9":"code","c98815bc":"code","7cd43552":"code","a616a57f":"code","0b93fb37":"code","bdb28e13":"code","111b4661":"markdown","37e427e2":"markdown","43ec7232":"markdown","a19125a5":"markdown","afd3918e":"markdown","4761b79d":"markdown","45e824a4":"markdown","b9f768b5":"markdown","97ed6409":"markdown","44ab2e4a":"markdown","aa0c4468":"markdown"},"source":{"9bf2ec7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc201d09":"dataset=pd.read_csv(\"..\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv\")\n\nx=dataset.iloc[:,3:13]\ny=dataset.iloc[:,13]","2a8e8349":"x","52c5fae6":"y","f72f145c":"x.info()","e2d2432e":"geography=pd.get_dummies(x[\"Geography\"],drop_first=True)\ngender=pd.get_dummies(x[\"Gender\"],drop_first=True)","f7fdd729":"x=pd.concat([x,geography,gender],axis=1)","30c1eb90":"## Drop Unnecessary columns\nx=x.drop(['Geography','Gender'],axis=1)","7698391a":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)","30374154":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)\n#scales test train to float data type from unknown datatype","d6d866cd":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout","d24ed48e":"# Initialising the ANN\nclassifier = Sequential()","1355d8cd":"# Adding the input layer and the first hidden layer\nclassifier.add(Dense(units = 6, kernel_initializer = 'he_uniform', activation = 'relu', input_dim = 11 ))","8ac120e4":"# Adding the second hidden layer\nclassifier.add(Dense(units = 6, kernel_initializer = 'he_uniform', activation = 'relu'))","185ed9d9":"# Adding the output layer\nclassifier.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))","c98815bc":"# Compiling the ANN\nclassifier.compile(optimizer='adam',loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","7cd43552":"# Fitting the ANN to the Training set\nclassifier.fit(x_train, y_train, batch_size = 10, epochs = 100  )","a616a57f":"#Predicting the Test set results\ny_pred = classifier.predict(x_test)\n\n#Threshold of 50%\ny_pred = (y_pred>0.5)\n\ny_pred","0b93fb37":"#Making the COnfusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\ncm","bdb28e13":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(y_pred,y_test)\nscore","111b4661":"Cost Function : Measure the generated error by comparing the predicted value with the true value.\n\nCompiling the ANN -\n\noptimizer \u2014 algorithm to use to find the best weights that will make our system powerful\n\nloss \u2014 Loss function within our optimizer algorithm\n\nmetric \u2014 criteria to evaluate the model","37e427e2":"**To define the first hidden layer, we firstly will have to define an activation function. The best one is the Rectifier Function and we\u2019ll choose this one for the hidden layers. Furthermore, also by using a Sigmoid function to the output layer will allow us to calculate the probabilities of the different class (leaving or staying the bank). In the end, we will be able to rank the customers by their probability to leave the bank.**","43ec7232":"Back-Propagation: from the output to the input layer, the calculated error is back-propagated and the weights get updated according to the influence they had on the error. The learning rates indicate how much these weights are updated.\n\nReinforcement Learning : Update weights at each observation or Batch Learning : Update the weights after each batch of observations\n\nWhen the system has gone through the whole training dataset, an epoch has been run.","a19125a5":"# Lets Make ANN","afd3918e":"# Lets Encode Geography And Gender","4761b79d":"Randomly initialise the weights with small numbers close to zero but not zero. This will be done by our Dense function.\n\nDistribute features of the first observation, from your dataset, per each node in the input layer. Thus, eleven independent variables will be added to our input layer.","45e824a4":"batch_size : number of observations after which we update the weights\n\nepochs: How many times you train your model","b9f768b5":"**According to our model the first five customer will not leave the bank while the sixth on the rank will.**","97ed6409":"# In ANN feature scaling is very important so that all inputs are at a comparable range and only the weights assigned to them are, in fact, the only factor which makes a difference on the predicted value.","44ab2e4a":"Adding the input layer\n\nunits - number of nodes to add to the hidden layer.\n\nTip: units should be the average of nodes in the input layer (11 nodes) and the number of nodes in the output layer (1 node). For this case is 11+1\/2 = 6\n\nkernel_initializer - randomly initialize the weight with small numbers close to zero, according to uniform distribution.\n\nactivation - Activation function.\n\ninput_dim - number of nodes in the input layer, that our hidden layer should be expecting","aa0c4468":"# Prediction Time !"}}