{"cell_type":{"10470793":"code","ee310704":"code","baba3470":"code","dd65a104":"code","86f77ffc":"code","2d46d5dc":"code","ac28b1fc":"code","451c8433":"code","b0d374d3":"code","476e1e4d":"code","3627332e":"code","066da5b4":"code","0ac82171":"code","dbae52ae":"code","20257e20":"code","7a35d56b":"code","35bb6ce9":"code","460a8c38":"code","35153465":"code","32b029d0":"code","50d9359a":"code","986e336e":"code","0c88da5c":"code","7fb4b551":"code","652da684":"code","ff9fc55d":"code","cc92abaa":"code","b3183e49":"code","1394798a":"code","c4a77c9f":"code","58a9ca35":"code","85db2496":"code","a1327ba3":"code","64055712":"code","9ccd9a0b":"code","ba64768b":"code","a1a7e51a":"code","4415a00b":"code","8b3eafca":"code","fabffcc4":"code","53c2abe4":"code","603affb3":"code","06a6a57f":"code","d37cb465":"code","102874ff":"code","073f4c34":"code","e8498b94":"code","ef1660cb":"code","854fbee4":"code","468f26eb":"code","e5f2932e":"code","17b671b5":"code","caaf4bac":"code","d71dd456":"code","b5f8c461":"code","a9dbc9f4":"code","fe258f5f":"code","a9d29884":"code","92b6e1a1":"code","7cb7741e":"code","b8879dd6":"markdown","037970b9":"markdown","5ffe4d75":"markdown","bc492acb":"markdown","aa665e4d":"markdown","18d1b983":"markdown","1bb0bad7":"markdown","c39a832d":"markdown","1669b77b":"markdown","339e5104":"markdown","24805f7a":"markdown","a01b6005":"markdown"},"source":{"10470793":"import warnings\nwarnings.filterwarnings('ignore')","ee310704":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\n\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","baba3470":"titanic_train = pd.read_csv('..\/input\/titanic-machine-learning-from-disaster\/train.csv')\ntitanic_test = pd.read_csv('..\/input\/titanic-machine-learning-from-disaster\/test.csv')","dd65a104":"titanic_train.head()","86f77ffc":"titanic_train.info()","2d46d5dc":"# removing name,passengerid,ticket,cabin column from train, test\ntitanic_train = titanic_train.drop(['PassengerId','Name','Ticket','Cabin'],1)\ntitanic_test = titanic_test.drop(['Name','Ticket','Cabin'],1)","ac28b1fc":"# remove row with embarked as null value\ntitanic_train = titanic_train.dropna(subset=['Embarked'])","451c8433":"# hence, replace NAN values with mean\/average values\ntitanic_train['Age'].fillna((titanic_train['Age'].mean()), inplace=True)\ntitanic_train['Age'].isnull().sum()\n\ntitanic_test['Age'].fillna((titanic_test['Age'].mean()), inplace=True)\ntitanic_test['Age'].isnull().sum()\ntitanic_test['Fare'].fillna((titanic_test['Fare'].mean()), inplace=True)\ntitanic_test['Fare'].isnull().sum()","b0d374d3":"titanic_train.info()","476e1e4d":"titanic_train.describe()","3627332e":"titanic_train.head()","066da5b4":"sns.barplot('Sex','Survived',data=titanic_train)","0ac82171":"sns.barplot('Embarked','Survived',data=titanic_train)","dbae52ae":"sns.heatmap(titanic_train.corr(), annot = True)","20257e20":"# Encoding\ncat_vars = ['Sex','Embarked']\nstatus = pd.get_dummies(titanic_train[cat_vars], drop_first = True)\nstatus.head(1)","7a35d56b":"# concat\ntitanic_train = pd.concat([titanic_train,status], axis = 1)\ntitanic_train.head(1)","35bb6ce9":"titanic_train = titanic_train.drop(['Sex','Embarked'], 1)","460a8c38":"titanic_train.describe()","35153465":"titanic_train.info()","32b029d0":"print(sum(titanic_train['Survived'])\/len(titanic_train['Survived'].index)*100)","50d9359a":"titanic_train['Pclass'].value_counts()","986e336e":"varlist = ['Pclass']\n\ndef newclass_map(x):\n    return x.map({1 : 'Pclass_1', 2 : 'Pclass_2',3 : 'Pclass_3'})\n\n# apply function\ntitanic_train[varlist] = titanic_train[varlist].apply(newclass_map)\ntitanic_train.head()","0c88da5c":"status = pd.get_dummies(titanic_train[varlist], drop_first = True)\ntitanic_train = pd.concat([titanic_train,status], 1)\ntitanic_train.head(1)","7fb4b551":"titanic_train = titanic_train.drop(['Pclass'],1)\ntitanic_train.head(1)","652da684":"titanic_train['SibSp'].value_counts()","ff9fc55d":"titanic_train['Parch'].value_counts()","cc92abaa":"scaler = MinMaxScaler()","b3183e49":"res_vars = ['Age','Fare','SibSp','Parch']\ntitanic_train[res_vars] = scaler.fit_transform(titanic_train[res_vars])\ntitanic_train.head(2)","1394798a":"plt.figure(figsize = (20,12))\nsns.heatmap(titanic_train.corr(), annot =True)\nplt.show()","c4a77c9f":"y_train = titanic_train.pop('Survived')\nX_train = titanic_train","58a9ca35":"lr_model = sm.GLM(y_train, (sm.add_constant(X_train)), family = sm.families.Binomial())\nlr_model.fit().summary()","85db2496":"# high pvalues : Embarked_Q, Parch, Fare\n# remove Embarked_Q\nX_train = X_train.drop(['Embarked_Q'],1)","a1327ba3":"X_train_sm = sm.add_constant(X_train)\nlr_model = sm.GLM(y_train, X_train_sm, family = sm.families.Binomial())\nres = lr_model.fit()\nres.summary()","64055712":"vif = pd.DataFrame()\nvif['Feature'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = ['VIF'], ascending = False)\nvif","9ccd9a0b":"y_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","ba64768b":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","a1a7e51a":"y_train_pred_final = pd.DataFrame({'CustomerId':y_train.index,'Survived':y_train, 'Survived_Prob':y_train_pred})\ny_train_pred_final['Survived_Predicted'] = y_train_pred_final.Survived_Prob.map(lambda x: 1 if x>0.5 else 0)\ny_train_pred_final","4415a00b":"print(metrics.confusion_matrix(y_train_pred_final.Survived,y_train_pred_final.Survived_Predicted))","8b3eafca":"print(metrics.accuracy_score(y_train_pred_final.Survived,y_train_pred_final.Survived_Predicted))","fabffcc4":"X_train_sm = sm.add_constant(X_train)\nX_train_sm = X_train_sm.drop(['Parch'],1)\nlr_model = sm.GLM(y_train, X_train_sm, family = sm.families.Binomial())\nres = lr_model.fit()\nres.summary()","53c2abe4":"vif = pd.DataFrame()\nX_train_vif = X_train_sm.drop(['const'],1)\nvif['Feature'] = X_train_vif.columns\nvif['VIF'] = [variance_inflation_factor(X_train_vif.values, i) for i in range(X_train_vif.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = ['VIF'], ascending = False)\nvif","603affb3":"X_train_sm = sm.add_constant(X_train)\nX_train_sm = X_train_sm.drop(['Fare','Parch'],1)\nlr_model = sm.GLM(y_train, X_train_sm, family = sm.families.Binomial())\nres = lr_model.fit()\nres.summary()","06a6a57f":"vif = pd.DataFrame()\nX_train_vif = X_train_sm.drop(['const'],1)\nvif['Feature'] = X_train_vif.columns\nvif['VIF'] = [variance_inflation_factor(X_train_vif.values, i) for i in range(X_train_vif.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = ['VIF'], ascending = False)\nvif","d37cb465":"y_train_pred_final = pd.DataFrame({'CustomerId':y_train.index,'Survived':y_train, 'Survived_Prob':res.predict(X_train_sm).values.reshape(-1)})\ny_train_pred_final['Survived_Predicted'] = y_train_pred_final.Survived_Prob.map(lambda x: 1 if x>0.5 else 0)\n\nprint(X_train_sm.columns)\ny_train_pred_final","102874ff":"confusion = metrics.confusion_matrix(y_train_pred_final.Survived,y_train_pred_final.Survived_Predicted)\nprint(confusion)","073f4c34":"print(metrics.accuracy_score(y_train_pred_final.Survived,y_train_pred_final.Survived_Predicted))","e8498b94":"TP = confusion[1,1]\nprint(TP)\nTN = confusion[0,0]\nprint(TN)\nFP = confusion[0,1]\nprint(FP)\nFN = confusion[1,0]\nprint(FN)","ef1660cb":"# Sensitivity\nprint(TP\/float(TP+FN))","854fbee4":"# Specificity\nprint(TN\/float(TN+FP))","468f26eb":"titanic_test.head()","e5f2932e":"titanic_test.info()","17b671b5":"# Encoding\ncat_vars = ['Sex','Embarked']\nstatus = pd.get_dummies(titanic_test[cat_vars], drop_first = True)\ntitanic_test = pd.concat([titanic_test,status], axis = 1)\ntitanic_test = titanic_test.drop(['Sex','Embarked'], 1)\ntitanic_test.head(1)","caaf4bac":"varlist = ['Pclass']\n\ndef newclass_map(x):\n    return x.map({1 : 'Pclass_1', 2 : 'Pclass_2',3 : 'Pclass_3'})\n\n# apply function\ntitanic_test[varlist] = titanic_test[varlist].apply(newclass_map)\nstatus = pd.get_dummies(titanic_test[varlist], drop_first = True)\ntitanic_test = pd.concat([titanic_test,status], 1)\ntitanic_test = titanic_test.drop(['Pclass'],1)\ntitanic_test.head(1)","d71dd456":"# rescale\nres_vars = ['Age','Fare','SibSp','Parch']\ntitanic_test[res_vars] = scaler.transform(titanic_test[res_vars])\ntitanic_test.head(1)","b5f8c461":"titanic_test.describe()","a9dbc9f4":"submission_final = pd.DataFrame({'PassengerId':titanic_test.PassengerId})\nsubmission_final.head(1)","fe258f5f":"X_test = titanic_test.drop(['PassengerId','Embarked_Q','Parch','Fare'],1)\nX_test_sm = sm.add_constant(X_test)\nX_test_sm.head()","a9d29884":"y_test_prob = res.predict(X_test_sm)\ny_test_prob[:10]","92b6e1a1":"submission_final['Survived'] = y_test_prob.map(lambda x: 1 if x>0.5 else 0)\nsubmission_final","7cb7741e":"submission_final.to_csv('gender_submission.csv', index = False)","b8879dd6":"# Test Set","037970b9":"# Confusion Matrix and Accuracy","5ffe4d75":"##### Accuracy","bc492acb":"# EXPORT CSV","aa665e4d":"### Rescaling","18d1b983":"# FINAL_SUBMISSION","1bb0bad7":"# VIF","c39a832d":"## Visualize","1669b77b":"##### Checking Survived Rate","339e5104":"##### Checking values","24805f7a":"##### Try Removing Variables","a01b6005":"##### Significity and Sensitivity"}}