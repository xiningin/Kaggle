{"cell_type":{"f0d0bc10":"code","0ac32d00":"code","d9cee7c7":"code","d4a3ae3b":"code","9e1daf69":"code","93e7e34c":"code","3ce48273":"markdown"},"source":{"f0d0bc10":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ac32d00":"from sklearn import preprocessing\nfrom sklearn.naive_bayes import GaussianNB\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix\nimport numpy as np \nimport matplotlib.pyplot as plt","d9cee7c7":"data_train = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_test.csv')\n\ndata_train.head()\n#data_train.head()\n","d4a3ae3b":"le = preprocessing.LabelEncoder() \ndata_train_df = pd.DataFrame(data_train)\ndata_train_df_encoded = data_train_df.apply(le.fit_transform)\n\n# instance LabelEncoder dg object le\n# mengubah data teks dari file train & test menjadi data numeric\n# encode data train \nprint(data_train_df_encoded.head())\n\ndata_test_df = pd.DataFrame(data_train)\ndata_test_df_encoded = data_test_df.apply(le.fit_transform)\n","9e1daf69":"x_train = data_train_df_encoded.drop(['play'],axis=1)\ny_train = data_train_df_encoded['play']\n\nx_test = data_test_df_encoded.drop(['play'],axis=1)\ny_test = data_test_df_encoded['play']","93e7e34c":"model = GaussianNB\nnbtrain = model.fit(x_train, y_train)\n\ny_pred = nbtrain.predict(x_test)\nprint (\"accuracy:\",metrics.accurary_score(y_test, y_pred))","3ce48273":"Import all necessary libraries ####\nscikit-learn = sklearn"}}