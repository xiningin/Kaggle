{"cell_type":{"e11fada1":"code","70e40d54":"code","0d8cf7d0":"code","b17f88d3":"code","51a335a3":"code","8cf35577":"code","1bdf1377":"code","d817cb7e":"code","065a7943":"code","6021c70c":"code","ce7037c6":"code","c788320e":"code","8be661cf":"code","f9289a70":"code","20818b8d":"code","3e96ae66":"code","1a696f47":"code","ec2497e4":"code","642d72bd":"code","47ae2d74":"code","d1015fd5":"code","f06c2922":"code","61dc86eb":"code","cbe68904":"code","d6a020f9":"code","c0e8317b":"code","d5c2e850":"code","168d99f7":"code","9544c646":"code","3fdfa88e":"code","398cf4b3":"code","45df4387":"code","01210709":"code","511e612b":"code","a62040a9":"code","1b2cd4f2":"code","81a72742":"code","2afb1d56":"code","f5780e3b":"code","819f8ba7":"code","b4b71688":"code","f3fae216":"code","ab97f540":"code","d8b0b319":"code","2bb9790a":"code","87c92108":"code","7e648b3d":"code","fef9d984":"code","28701d35":"code","58ebfc26":"code","89ce2508":"code","46829eed":"code","99be00df":"code","d8ef8ea2":"code","8473bfe1":"code","dee90503":"code","61e26e1d":"code","774e74d5":"code","104c07af":"code","f2b5fb5e":"code","1e073d08":"markdown","87a5a181":"markdown","63639096":"markdown","3560c9fb":"markdown","fa286076":"markdown","bae3280f":"markdown","785dc16b":"markdown","9beee5f8":"markdown","dc6d396d":"markdown","d3b661d2":"markdown","9ef959b4":"markdown","3834b901":"markdown","fcf87b2d":"markdown","d7fe999b":"markdown","2ef51de2":"markdown","7c648801":"markdown","8226ada6":"markdown","7cc8b7a4":"markdown","fc09348a":"markdown","cf600ab2":"markdown","356eab30":"markdown","87a40072":"markdown","b84f3cbc":"markdown","2e16811f":"markdown","0157fe5e":"markdown","434c08a5":"markdown","b72fc271":"markdown","da226934":"markdown"},"source":{"e11fada1":"### Data Analaysis\nimport numpy as np\nimport pandas as pd\n\n### Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)","70e40d54":"pd.set_option('display.max_columns', None)\nfifa = pd.read_csv(r'..\/input\/fifa19\/data.csv',index_col=0)","0d8cf7d0":"fifa.head()","b17f88d3":"fifa.info()","51a335a3":"fifa.drop(['ID','Photo','Flag','Club Logo','Real Face','Jersey Number','Loaned From'],\n          axis=1,inplace=True)","8cf35577":"#Numerical Features\nfifa['International Reputation'].fillna(fifa['International Reputation'].mean(), inplace = True) \nfifa['Skill Moves'].fillna(fifa['Skill Moves'].mean(), inplace = True)\nfifa['Weak Foot'].fillna(fifa['Weak Foot'].mean(), inplace = True)\nfifa['Crossing'].fillna(fifa['Crossing'].mean(), inplace = True)\nfifa['Finishing'].fillna(fifa['Finishing'].mean(), inplace = True)\nfifa['HeadingAccuracy'].fillna(fifa['HeadingAccuracy'].mean(), inplace = True)\nfifa['ShortPassing'].fillna(fifa['ShortPassing'].mean(), inplace = True)\nfifa['Volleys'].fillna(fifa['Volleys'].mean(), inplace = True)\nfifa['Dribbling'].fillna(fifa['Dribbling'].mean(), inplace = True)\nfifa['Curve'].fillna(fifa['Curve'].mean(), inplace = True) \nfifa['FKAccuracy'].fillna(fifa['FKAccuracy'].mean(), inplace = True)\nfifa['LongPassing'].fillna(fifa['LongPassing'].mean(), inplace = True)\nfifa['BallControl'].fillna(fifa['BallControl'].mean(), inplace = True)\nfifa['Acceleration'].fillna(fifa['Acceleration'].mean(), inplace = True)\nfifa['SprintSpeed'].fillna(fifa['SprintSpeed'].mean(), inplace = True)\nfifa['Agility'].fillna(fifa['Agility'].mean(), inplace = True)\nfifa['Reactions'].fillna(fifa['Reactions'].mean(), inplace = True)\nfifa['Balance'].fillna(fifa['Balance'].mean(), inplace = True)\nfifa['ShotPower'].fillna(fifa['ShotPower'].mean(), inplace = True)\nfifa['Jumping'].fillna(fifa['Jumping'].mean(), inplace = True)\nfifa['Stamina'].fillna(fifa['Stamina'].mean(), inplace = True)\nfifa['Strength'].fillna(fifa['Strength'].mean(), inplace = True)\nfifa['LongShots'].fillna(fifa['LongShots'].mean(), inplace = True)\nfifa['Aggression'].fillna(fifa['Aggression'].mean(), inplace = True)\nfifa['Interceptions'].fillna(fifa['Interceptions'].mean(), inplace = True)\nfifa['Positioning'].fillna(fifa['Positioning'].mean(), inplace = True)\nfifa['Vision'].fillna(fifa['Vision'].mean(), inplace = True)\nfifa['Penalties'].fillna(fifa['Penalties'].mean(), inplace = True)\nfifa['Composure'].fillna(fifa['Composure'].mean(), inplace = True)\nfifa['Marking'].fillna(fifa['Marking'].mean(), inplace = True)\nfifa['StandingTackle'].fillna(fifa['StandingTackle'].mean(), inplace = True)\nfifa['SlidingTackle'].fillna(fifa['SlidingTackle'].mean(), inplace = True)\nfifa['GKDiving'].fillna(fifa['GKDiving'].mean(), inplace = True)\nfifa['GKHandling'].fillna(fifa['GKHandling'].mean(), inplace = True)\nfifa['GKKicking'].fillna(fifa['GKKicking'].mean(), inplace = True)\nfifa['GKPositioning'].fillna(fifa['GKPositioning'].mean(), inplace = True)\nfifa['GKReflexes'].fillna(fifa['GKReflexes'].mean(), inplace = True)","1bdf1377":"# Value, Wage and Release Clause Conversion\ndef value_and_wage_conversion(Value):\n    if isinstance(Value,str):\n        out = Value.replace('\u20ac', '')\n        if 'M' in out:\n            out = float(out.replace('M', ''))*1000000\n        elif 'K' in Value:\n            out = float(out.replace('K', ''))*1000\n        return float(out)\n\n\nfifa['Value'] = fifa['Value'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Wage'] = fifa['Wage'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Release Clause'] = fifa['Release Clause'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Release Clause'].fillna(fifa['Release Clause'].mean(), inplace = True)","d817cb7e":"#Categorical Columns\nfifa['Club'].fillna('No Club', inplace = True)\nfifa['Position'].fillna('unknown',inplace=True)","065a7943":"#Joined Column\ndef clean_date(x):\n    l=[]\n    if isinstance(x,str):\n        l=x.split(\", \")\n        x=l[-1]\n    return(x)\n\nfifa['Joined']=fifa['Joined'].replace(np.nan,0)\nfifa['Joined'] = fifa['Joined'].apply(clean_date).astype('str')","6021c70c":"#Contract Valid Until Column\nimport datetime\nfifa['Contract Valid Until']=pd.to_datetime(fifa['Contract Valid Until'])\nfifa['year'] = pd.DatetimeIndex(fifa['Contract Valid Until']).year.astype(str)\nfifa['Contract Valid Until'].fillna('Not available', inplace = True) ","ce7037c6":"#Height Column\ndef clean_height(x):\n    l=[]\n    s=1\n    if isinstance(x,str):\n        l=x.split(\"'\")\n        i=int(l[0])\n        j=int(l[1])\n        s=((i*12)+j)\/12\n    return(s)\n\n\nfifa['Height'] = fifa['Height'].apply(clean_height)\nfifa['Height'].fillna((fifa['Height'].mean()), inplace = True)","c788320e":"#Weight Column\ndef clean_weight(x):\n    \n    if isinstance(x,str):\n        return(x.replace('lbs', ''))\n    return(x)\n\nfifa['Weight'] = fifa['Weight'].apply(clean_weight).astype('float')\nfifa['Weight'].fillna((fifa['Weight'].mean()), inplace = True) ","8be661cf":"#Work Rate Column\nfifa['Work Rate'].value_counts()","f9289a70":"fifa['Work Rate'].fillna('Medium\/ Medium', inplace = True)","20818b8d":"#Preferred Foot column\nfifa['Preferred Foot'].value_counts()","3e96ae66":"fifa['Preferred Foot'].fillna('Right', inplace = True)","1a696f47":"#Body Type Column\nfifa['Body Type'].value_counts()","ec2497e4":"fifa['Body Type'][fifa['Body Type'] == 'Messi'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'C. Ronaldo'] = 'Normal'\nfifa['Body Type'][fifa['Body Type'] == 'Neymar'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'Courtois'] = 'Lean'\n\n#PLAYER_BODY_TYPE_25 is Normal body type\nfifa['Body Type'][fifa['Body Type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'\nfifa['Body Type'][fifa['Body Type'] == 'Shaqiri'] = 'Stocky'\nfifa['Body Type'][fifa['Body Type'] == 'Akinfenwa'] = 'Stocky'\nfifa['Body Type'].fillna('Normal', inplace = True)","642d72bd":"#Skill Columns\n\n#Function to convert skill rating at each position.\ndef skillConverter(val):\n    if type(val) == str:\n        s1 = val[0:2]\n        s2 = val[-1]\n        val = int(s1) + int(s2)\n        return val\n    else:\n        return val\n\nskill_columns = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']\n\nfor col in skill_columns:\n    fifa[col] = fifa[col].apply(skillConverter)\n    fifa[col].fillna(0.0, inplace = True)","47ae2d74":"fifa.head()","d1015fd5":"def pie_count(data, field=\"Nationality\", percent_limit=0.5, title=\"Number of players by \"):\n    \n    title += field\n    #data[field] = data[field].fillna('NA')\n    data = data[field].value_counts().to_frame()\n\n    total = data[field].sum()\n    data['percentage'] = 100 * data[field]\/total    \n\n    percent_limit = percent_limit\n    otherdata = data[data['percentage'] < percent_limit] \n    others = otherdata['percentage'].sum()  \n    maindata = data[data['percentage'] >= percent_limit]\n    \n    data = maindata\n    other_label = \"Others(<\" + str(percent_limit) + \"% each)\"       \n    data.loc[other_label] = pd.Series({field:otherdata[field].sum()}) \n    \n    labels = data.index.tolist()   \n    datavals = data[field].tolist()\n    \n    trace = go.Pie(labels = labels,\n                values = datavals)\n\n    layout = go.Layout(\n        title = title,\n        height=700\n        )\n    \n    fig = go.Figure(data=[trace], layout=layout)\n    fig.show()\n    \npie_count(fifa, 'Nationality')\npie_count(fifa, 'Club')\npie_count(fifa, 'Preferred Foot')\npie_count(fifa, 'Work Rate', 0.1)\npie_count(fifa, 'Body Type', 0.1)\npie_count(fifa, 'Position', 0.1)","f06c2922":"x = fifa['Age']\nplt.figure(figsize=(10,8))\nax = sns.countplot(x,color='#00ffff')\nax.set_xlabel(xlabel = 'Age of the Players', fontsize = 16)\nax.set_title(label = 'Distribution of Age of the Players', fontsize = 20)\nplt.show()","61dc86eb":"overall = pd.DataFrame(fifa.groupby([\"Age\"])['Overall'].mean())\npotential = pd.DataFrame(fifa.groupby([\"Age\"])['Potential'].mean())\n\nmerged = pd.merge(overall, potential, on='Age', how='inner')\nmerged['Age']= merged.index\n\nfig, ax = plt.subplots(figsize=(10,8))\n\nmerged.reset_index(drop = True, inplace = True)\n\nplt.plot('Age', 'Overall', data=merged, marker='.', color='#00ffff', lw=1, label =\"Overall\" )\nplt.plot('Age', 'Potential', data=merged, marker='+', color='#0000cc', lw=1, label = \"Potential\")\nplt.xlabel('Overall Rating')\nplt.ylabel('Average Growth Potential by Age')\nplt.legend();","cbe68904":"club = fifa.groupby('Club')['Value'].mean().reset_index().sort_values('Value', ascending=True).tail(20)\nfig = px.bar(club, x=\"Value\", y=\"Club\", orientation='h')\nfig.show()","d6a020f9":"club = fifa.groupby('Club')['Overall'].mean().reset_index().sort_values('Overall', ascending=True).tail(20)\nfig = px.bar(club, x=\"Overall\", y=\"Club\", orientation='h')\nfig.show()","c0e8317b":"player_features = ['Crossing', 'Finishing', 'HeadingAccuracy',\n       'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n       'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n       'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n       'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n       'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n       'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']\ndf_postion  = pd.DataFrame()\nfor position_name, features in fifa.groupby(fifa['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    df_postion[position_name] = tuple(top_features)\ndf_postion.head()","d5c2e850":"position = []\nplayer = []\nclub_l = []\nfor col in df_postion.columns:\n    tmp_df = pd.DataFrame()\n    l = [df_postion[col].values]\n    l = l[0]\n    l = list(l)\n    l.append('Name')\n    tmp_df = pd.DataFrame.copy(fifa[fifa['Position'] == col][l])\n    tmp_df['mean'] = np.mean(tmp_df.iloc[: , :-1] , axis = 1)\n    name = tmp_df['Name'][tmp_df['mean'] == tmp_df['mean'].max()].values[0]\n    club = fifa['Club'][fifa['Name'] == str(name)].values[0]\n    position.append(col)\n    player.append(name)\n    club_l.append(club)\n    \ngk = ['GK']\nforward = ['LS', 'ST', 'RS','LF', 'CF', 'RF']\nmidfeilder = ['LW','RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM',\n              'RCM', 'RM', 'LDM', 'CDM', 'RDM' ]\ndefenders = ['LWB','RWB', 'LB', 'LCB', 'CB',]\n\nprint('GoalKeeper : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in gk:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nFORWARD : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in forward:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nMIDFEILDER : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in midfeilder:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nDEFENDER : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in defenders:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))","168d99f7":"CAM = 'H. Nakagawa'\nCB = 'D. God\u00edn'\nCDM = 'Casemiro'\nCF = 'S. Giovinco'\nCM = 'N. Ke\u00efta'\nGK = 'De Gea'\nLAM = 'Paulo Daineiro'\nLB = 'Jordi Alba'\nLCB = 'G. Chiellini'\nLCM = 'David Silva'\nLDM = 'N. Kant\u00e9' \nLF = 'E. Hazard' \nLM = 'Douglas Costa' \nLS = 'J. Mart\u00ednez' \nLW = 'Neymar Jr' \nLWB = 'M. Pedersen' \nRAM = 'J. Cuadrado' \nRB = 'N\u00e9lson Semedo' \nRCB = 'Sergio Ramos' \nRCM = 'L. Modri\u0107' \nRDM = 'P. Pogba' \nRF = 'L. Messi' \nRM = 'Gelson Martins' \nRS = 'A. Saint-Maximin' \nRW = 'R. Sterling' \nRWB = 'M. Millar' \nST = 'Cristiano Ronaldo' ","9544c646":"def create_football_formation(formation = [] , label_1 = None ,\n                              label_2 = None , label_3 = None ,\n                              label_4 = None,label_4W = None ,\n                              label_5 = None , label_3W = None):\n    \n    plt.scatter(x = [1] , y = [6] , s = 300 , color = 'blue')\n    plt.annotate('De Gea \\n(Manchester United)' , (1 - 0.5 , 6 + 0.5))\n    plt.plot(np.ones((11 , ))*1.5 , np.arange(1 , 12) , 'w-')\n    plt.plot(np.ones((5 , ))*0.5 , np.arange(4 , 9) , 'w-')\n    \n    n = 0\n    for posi in formation:\n        if posi ==  1:\n            n += 3\n            dot = plt.scatter(x = [n]  , y = [6] , s = 400 , color = 'white')\n            plt.scatter(x = [n]  , y = [6] , s = 300 , color = 'red')\n            for i, txt in enumerate(label_1):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, ( n-0.5 , 6+0.5))\n            \n        elif posi == 2:\n            n += 3\n            y = [5 , 7.5]\n            x = [ n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_2):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')') \n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n        elif posi == 3:\n            n+=3\n            y = [3.333 , 6.666 , 9.999]\n            x = [n , n  , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_3):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n            if not label_3W == None:\n                n+=3\n                y = [3.333 , 6.666 , 9.999]\n                x = [n , n  , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_3W):\n                    txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n        elif posi == 4 and not label_4 == None:\n            n+=3\n            y = [2.5 , 5 , 7.5 , 10]\n            x = [n , n  , n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_4):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n            if not label_4W == None:\n                n+=3\n                y = [2.5 , 5 , 7.5 , 10]\n                x = [n , n  , n , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_4W):\n                    txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n                \n        elif posi == 5:\n            n+=3\n            y = [2 , 4 , 6 , 8 , 10]\n            x = [n , n , n  , n  , n]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_5):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n    plt.plot(np.ones((5 , ))*(n+0.5) , np.arange(4 , 9) , 'w-')\n    plt.plot(np.ones((11 , ))*(n\/2) , np.arange(1 , 12) , 'w-')\n    plt.yticks([])\n    plt.xticks([])\n    ax = plt.gca()\n    ax.set_facecolor('#28fc03')            ","3fdfa88e":"plt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('Best Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LAM , LDM , RDM , RAM],\n                         label_2 = [LS , RS],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LDM , RDM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LCM , RCM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LF , CAM , RF],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LB , RB , RWB],\n                         label_2 = [LAM , RAM],\n                         label_3 = [LW , CF , RW],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))\ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , CB , RCB , RWB],\n                         label_2 = [CM , CAM],\n                         label_3 = [LF , CM , RF],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\n\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LDM , CAM , RDM],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 5, 4 , 1 ] , \n                         label_5 = [LWB , LCB , CB , RCB , RWB],\n                         label_4 = [LW, LDM , RDM , RW],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 5-4-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_3 = [LW, CAM , RW],\n                         label_3W = [LF , ST , RF])\nplt.title('Best Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CM , RAM],\n                         label_3W = [LS , CF , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LB , LCB , RCB , RB],\n                         label_3 = [LDM, CDM , RDM],\n                         label_3W = [LF , CF , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CAM , RAM],\n                         label_3W = [LS , ST , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LCM, CAM , RCM],\n                         label_3W = [LF , ST , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n","398cf4b3":"#Get a count of Nationalities in the Dataset, make of list of those with over 250 Players (Major Playing Nations)\nnat_counts = fifa[\"Nationality\"].value_counts()\nnat_list = nat_counts[nat_counts > 250].index.tolist()\n\n#Replace Nationality with a binary indicator variable for 'Major Nation'\ndef major_nation(df):\n    if (df[\"Nationality\"] in nat_list):\n        return 1\n    else:\n        return 0\n    \nfifa['Major_Nation'] = fifa.apply(major_nation,axis = 1)","45df4387":"#Turn Preferred Foot into a binary indicator variable\ndef right_footed(df):\n    if (df['Preferred Foot'] == 'Right'):\n        return 1\n    else:\n        return 0\nfifa['Right_Foot'] = fifa.apply(right_footed, axis=1)","01210709":"#Create a simplified position varaible to account for all player positions\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'DF'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\n    \nfifa['Simple_Position'] = fifa.apply(simple_position,axis = 1)","511e612b":"#Split the Work Rate Column in two\ntempwork = fifa[\"Work Rate\"].str.split(\"\/ \", n = 1, expand = True) \n\n#Create new column for first work rate\nfifa[\"WorkRate1\"]= tempwork[0]   \n\n#Create new column for second work rate\nfifa[\"WorkRate2\"]= tempwork[1]","a62040a9":"# Drop Columns\nfifa.drop(['Name','Nationality','Club','Wage','Preferred Foot','Work Rate','Position','Joined',\n          'Contract Valid Until','Release Clause','year'],axis=1,inplace=True)","1b2cd4f2":"fifa.head()","81a72742":"fifa['Body Type'].unique()","2afb1d56":"body_type= {\n    'Lean':0,\n           'Normal':1,\n           'Stocky':2\n}\nfifa['Body Type'] = fifa['Body Type'].map(body_type)","f5780e3b":"fifa['Simple_Position'].unique()","819f8ba7":"simple_position = {\n    'ST':0,\n    'AM':1,\n    'GK':2,\n    'MF':3,\n    'DF':4,\n    'DM':5,\n    'unknown':6\n}\nfifa['Simple_Position'] = fifa['Simple_Position'].map(simple_position)","b4b71688":"fifa['WorkRate1'].unique()","f3fae216":"fifa['WorkRate2'].unique()","ab97f540":"work_rate ={\n    'Medium':0,\n    'High':1,\n    'Low':2\n}\nfifa['WorkRate1'] = fifa['WorkRate1'].map(work_rate)\nfifa['WorkRate2'] = fifa['WorkRate2'].map(work_rate)","d8b0b319":"#dropping the converted columns\nfifa.drop(['Body Type','Simple_Position', 'WorkRate1','WorkRate2'],axis=1, inplace=True)","2bb9790a":"fifa.head()","87c92108":"fifa.columns","7e648b3d":"X = fifa[['Age','Overall', 'Potential','Special','International Reputation', 'Weak Foot', \n          'Skill Moves', 'Height', 'Weight','Crossing', 'Finishing', 'HeadingAccuracy', \n          'ShortPassing', 'Volleys','Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', \n          'BallControl','Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n          'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n          'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n          'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n          'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes',\n          'Major_Nation', 'Right_Foot']]\ny = np.log1p(fifa['Value'])","fef9d984":"sns.distplot(y,kde=False)","28701d35":"y_index = y[y>7].index\nX = X.loc[y_index]\ny = y[y>7]\nprint(X.shape, y.shape)","58ebfc26":"X.head()","89ce2508":"X.shape","46829eed":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import MinMaxScaler\nX_norm = MinMaxScaler().fit_transform(X)\n\nsel_ = SelectFromModel(Lasso(alpha=.0001, random_state=42)) \nsel_.fit(X_norm, y)","99be00df":"sel_.get_support()","d8ef8ea2":"selected_feat = X.columns[(sel_.get_support())]\n\n# let's print some stats\nprint('total features: {}'.format((X.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\nprint('features with coefficients shrank to zero: {}'.format(\n    np.sum(sel_.estimator_.coef_ == 0)))","8473bfe1":"selected_feat","dee90503":"X_model = X[selected_feat]\nX_model.shape","61e26e1d":"#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_model, y, test_size=0.3, random_state=42)","774e74d5":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","104c07af":"# define some handy analysis support function\nfrom sklearn.metrics import mean_squared_error, explained_variance_score, r2_score\n\ndef plot_prediction_analysis(y, y_pred, figsize=(10,4), title=''):\n    fig, axs = plt.subplots(1, 2, figsize=figsize)\n    axs[0].scatter(y, y_pred)\n    mn = min(np.min(y), np.min(y_pred))\n    mx = max(np.max(y), np.max(y_pred))\n    axs[0].plot([mn, mx], [mn, mx], c='red')\n    axs[0].set_xlabel('$y$')\n    axs[0].set_ylabel('$\\hat{y}$')\n    rmse = np.sqrt(mean_squared_error(y, y_pred))\n    evs = explained_variance_score(y, y_pred)\n    r2 = r2_score(y, y_pred)\n    axs[0].set_title('rmse = {:.2f}, evs = {:.2f}, r2 = {:,.2f}'.format(rmse, evs, r2))\n    \n    axs[1].hist(y-y_pred, bins=50)\n    avg = np.mean(y-y_pred)\n    std = np.std(y-y_pred)\n    axs[1].set_xlabel('$y - \\hat{y}$')\n    axs[1].set_title('Histrogram prediction error, $\\mu$ = {:.2f}, $\\sigma$ = {:.2f}'.format(avg, std))\n    \n    if title!='':\n        fig.suptitle(title)","f2b5fb5e":"from sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\n\n#model = LinearRegression()\nmodel = Pipeline((\n        (\"standard_scaler\", StandardScaler()),\n        (\"poly\", PolynomialFeatures(degree=2)),\n        (\"lin_reg\", Lasso(alpha=0.01))\n    ))\n\nmodel.fit(X_train, y_train)\n\ny_train_pred = model.predict(X_train)\n\nplot_prediction_analysis(y_train, y_train_pred, title='Polynomial Model - Trainingset')\n\ny_test_pred = model.predict(X_test)\nplot_prediction_analysis(y_test, y_test_pred, title='Polynomial Model - Testset')","1e073d08":"<a id = '5.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Feature Engineering<\/strong><\/p> ","87a5a181":"![giphy.gif](https:\/\/media.giphy.com\/media\/VfzCHygL4YxvPXK5Nu\/giphy.gif)","63639096":"<a id = '4.6'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Top Features for every Playing Position<\/strong><\/p>","3560c9fb":"\n<p style = \"font-size : 30px; color : #4e8d7c ; font-family : 'Comic Sans MS';  \"><strong>Introduction :-<\/strong><\/p>\n\n<p style = \"font-size : 23px; color : #000080 ; font-family : 'Comic Sans MS';  \"><strong>FIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. It is the 26th installment in the FIFA series, and was released on 28 September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows.<\/strong><\/p>\n\n\n\n","fa286076":"<a id = '4.8'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Dream Team in different Formation<\/strong><\/p>","bae3280f":"<a id = '4.2'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Distribution of age for each Players<\/strong><\/p>","785dc16b":"![PlayerPosition.jpg](attachment:PlayerPosition.jpg)","9beee5f8":"<img style=\"float: center;  border:5px solid #ffb037; width:80%\" src = https:\/\/fifauteam.com\/wp-content\/uploads\/2018\/08\/A1639-7.jpg>","dc6d396d":"<a id = '7.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Data Modeling<\/strong><\/p> \n","d3b661d2":"<p style = \"font-size : 50px; color : #532e1c ; font-family : 'Comic Sans MS'; text-align : center; background-color : #bedcfa; border-radius: 5px 5px;\"><strong>FIFA19 \u26bd Player & Team Analysis and Value Predict<\/strong><\/p>\n","9ef959b4":"<p style = \"font-size : 19px; color : #DC143C ; font-family : 'Comic Sans MS';  \"><strong>Please upvote this kernel if you like it. It motivates me to produce more quality content :)<\/strong><\/p>\n","3834b901":"<a id = '4.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Exploratory Data Analysis (EDA)<\/strong><\/p>","fcf87b2d":"<a id = '4.5'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Top 20 teams with highest player's average Overall rating<\/strong><\/p>","d7fe999b":"<img style=\"float: center;  border:5px solid #ffb037; width:100%\" src = https:\/\/www.fifaultimateteam.it\/en\/wp-content\/uploads\/2018\/08\/DkkLl5DU4AMLOXy.jpg>","2ef51de2":"<a id = '2.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Loading the data<\/strong><\/p> ","7c648801":"<a id = '4.7'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Dream Team<\/strong><\/p>","8226ada6":"<a id = '5.1'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Converting Categorical to Numerical columns<\/strong><\/p>","7cc8b7a4":"![giphy.gif](https:\/\/media.giphy.com\/media\/Rk8qnQKhMXQQnyZ1aT\/giphy.gif)","fc09348a":"<a id = '3.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Data Cleaning<\/strong><\/p> ","cf600ab2":"<a id = '4.1'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong> Number of players for each categorical variables<\/strong><\/p>","356eab30":"<a id = '2.1'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Eliminating the columns from analysis<\/strong><\/p> ","87a40072":"<a id = '4.3'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Distribution of Age By Potential and Overall Rating<\/strong><\/p>","b84f3cbc":"<a id = '0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Table of Contents<\/strong><\/p> \n\n* [Imporing Libraries](#1.0)\n* [Loading the data](#2.0)\n    * [Eliminating the columns from analysis](#2.1)\n* [Data Cleaning](#3.0) \n* [Exploratory Data Analysis (EDA)](#4.0) \n    * [Number of players for each categorical variables](#4.1)\n    * [Distribution of age for each Players](#4.2)\n    * [Distribution of Age By Potential and Overall Rating](#4.3)\n    * [Top 20 teams with highest player's average value](#4.4)\n    * [Top 20 teams with highest player's average Overall rating](#4.5)\n    * [Top Features for every Playing Position](#4.6)\n    * [Dream Team](#4.7)\n    * [Dream Team in different Formation](#4.8)            \n* [Feature Engineering](#5.0)\n    * [Converting Categorical to Numerical columns](#5.1)\n* [Feature Selection](#6.0)\n* [Data Modeling](#7.0)\n   \n","2e16811f":"\n\n![giphy.gif](https:\/\/media.giphy.com\/media\/8cErtfLLFX1ePTFYnK\/giphy.gif)","0157fe5e":"<a id = '6.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Feature Selection<\/strong><\/p> \n","434c08a5":"![giphy.gif](https:\/\/media.giphy.com\/media\/8EoCZQ7lDDVKNMvNzL\/giphy.gif)","b72fc271":"<a id = '1.0'><\/a>\n<p style = \"font-size : 35px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #f9b208; border-radius: 5px 5px;\"><strong>Importing Libraries<\/strong><\/p> ","da226934":"<a id = '4.4'><\/a>\n<p style = \"font-size : 25px; color : #34656d ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Top 20 teams with highest player's average value<\/strong><\/p>"}}