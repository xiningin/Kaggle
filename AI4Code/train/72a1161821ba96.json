{"cell_type":{"8d2c44fe":"code","d3cd994b":"code","1db61c59":"code","3d17b4bb":"code","70136bbb":"code","7d9711f0":"code","4dd9d000":"code","4d09eee0":"code","db72c897":"code","4e873aa6":"code","5d8e1b3e":"code","d3b0a45a":"code","25ad2dcd":"code","4014a194":"code","89962a23":"code","dc1452ba":"code","97b869c2":"code","69f41e2f":"code","faf1c841":"code","a5c6b263":"markdown","39aaff2d":"markdown","0f1c35ce":"markdown","5fe0fabc":"markdown","f81cc871":"markdown","3eed847f":"markdown","9a304bb1":"markdown"},"source":{"8d2c44fe":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","d3cd994b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\ntrain = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\n\nY1=train['ConfirmedCases']\nY2=train['Fatalities']","1db61c59":"test.columns","3d17b4bb":"train['Complete_Date'] = train['Date'].astype('datetime64[ns]')\ntest['Complete_Date'] = test['Date'].astype('datetime64[ns]')\n\nmonth = [int(el[5:7]) for el in list(train['Date'].values)]\nday = [int(el[8:10]) for el in list(train['Date'].values)]\n\nmonth_test = [int(el[5:7]) for el in list(test['Date'].values)]\nday_test = [int(el[8:10]) for el in list(test['Date'].values)]\n\ndf_month= pd.DataFrame(month, columns= ['Month'])\ndf_day= pd.DataFrame(day, columns= ['Day'])\n\ndf_month_test= pd.DataFrame(month_test, columns= ['Month'])\ndf_day_test= pd.DataFrame(day_test, columns= ['Day'])\n\ntrain=pd.concat([train, df_month], axis=1)\ntest=pd.concat([test, df_month_test], axis=1)\n\ntrain=pd.concat([train, df_day], axis=1)\ntest=pd.concat([test, df_day_test], axis=1)\n\ntrain['Date']=train['Month']*100+train['Day']\ntest['Date']=test['Month']*100+test['Day']","70136bbb":"train['Province_State'].fillna('',inplace=True)\ntest['Province_State'].fillna('',inplace=True)\n\ntrain['Province_State']=train['Province_State'].astype(str)\ntest['Province_State']=test['Province_State'].astype(str)\n\ny= train['Country_Region']+train['Province_State']\ny= pd.DataFrame(y, columns= ['Place'])\n\ny_test= test['Country_Region']+test['Province_State']\ny_test= pd.DataFrame(y_test, columns= ['Place'])\n\ntrain=pd.concat([train, y], axis=1)\ntest=pd.concat([test, y_test], axis=1)","7d9711f0":"Country_df=train[\"Place\"]\nConfirmedCases_df=train[\"ConfirmedCases\"]\nCountry_df.to_numpy()\nConfirmedCases_df.to_numpy()\nCountry=Country_df[0]\nNbDay = pd.DataFrame(columns=['NbDay'])\nday=0\ncount=0\nfor x in train[\"Month\"]:\n    if (ConfirmedCases_df[count]==0):      \n        NbDay = NbDay.append({'NbDay': int(0)}, ignore_index=True)\n        count=count+1 \n    else:\n        if (Country_df[count]==Country):\n            day=day+1\n            NbDay = NbDay.append({'NbDay': int(day)}, ignore_index=True)\n            count=count+1\n        else:\n            Country=Country_df[count]\n            day=1\n            NbDay = NbDay.append({'NbDay': int(day)}, ignore_index=True)\n            count=count+1\ntrain=pd.concat([train, NbDay], axis=1)\n\n# Adding NbDay feature to the test data\nNbDay_test_array=np.zeros(test.shape[0])\ni=0\ndf=test[\"Place\"]\nPlace_array=df.to_numpy()\nfor t in test.Date:\n    place=Place_array[i]\n    if t==402:\n        row=train.loc[(train['Place'] == place) & (train['Date'] ==t)]\n        row=row.to_numpy()\n        NbDay_test_array[i]= row[0][10]\n    else: \n        NbDay_test_array[i]=0\n    i=i+1\n\nNbDay=pd.DataFrame(NbDay_test_array, columns=['NbDay1'])\ntest=pd.concat([test,NbDay], axis=1)\n\nCountry_df=test[\"Place\"]\nNbDay_df=test['NbDay1']\nCountry_df.to_numpy()\nday_array=NbDay_df.to_numpy()\nCountry=Country_df[0]\nNbDay = pd.DataFrame(columns=['NbDay'])\nday=0\ncount=0\nfor t in test[\"Date\"]:\n    if (t==402):\n        day=day_array[count] \n        NbDay = NbDay.append({'NbDay': int(day)}, ignore_index=True)  \n        count=count+1\n    else:\n        day=day+1\n        NbDay = NbDay.append({'NbDay': int(day)}, ignore_index=True)\n        count=count+1\ntest=pd.concat([test,NbDay], axis=1)","4dd9d000":"train=train[['Place','Country_Region','NbDay','ConfirmedCases','Fatalities']]\ntest=test[['Place','Country_Region','NbDay','ForecastId']]","4d09eee0":"country_array=train['Place'].to_numpy()\n\ndef distinct_values(country_array):\n    liste=[]\n    liste.append(country_array[0])\n    for i in range(1,len(country_array)): \n        if country_array[i]!=country_array[i-1]:\n            liste.append(country_array[i])\n    return liste\n\nCountries_liste=distinct_values(country_array)\n\nlen(Countries_liste)","db72c897":"# Adding some exponential features\ndef exponentiate_alpha(column,v):\n    array=column.to_numpy()\n    string='NbDay'+str(v)\n    array=np.power(v,array)\n    frame=pd.DataFrame(array, columns=[string])\n    return frame\n\ndef product(column1,column2,number):\n    array=column1.to_numpy()\n    array2=column2.to_numpy()\n    \n    string='Product'+str(number)\n    array=np.multiply(array,array2)\n    frame=pd.DataFrame(array, columns=[string])\n    return frame","4e873aa6":"df1=exponentiate_alpha(train['NbDay'],1.0001)","5d8e1b3e":"df2=product(df1,train['NbDay'],1)","d3b0a45a":"train['NbDay_exp']=df1\ntrain['Product']=df12","25ad2dcd":"train.columns","4014a194":"import xgboost\n\nmodel = xgboost.XGBRegressor(colsample_bytree=0.4,\n                 gamma=0,                 \n                 learning_rate=0.07,\n                 max_depth=5,\n                 min_child_weight=1.5,\n                 n_estimators=10000,                                                                    \n                 reg_alpha=0.75,\n                 reg_lambda=0.45,\n                 subsample=0.6,\n                 seed=42,\n                 objective='reg:squarederror',\n                 eval_metric='rmse')","89962a23":"ConfirmedCasesPredictions=[]\n\ni=1\nfor country in Countries_liste:\n    \n    #print('For country ',i,': *******************', country, '')\n    \n    # Train\n    train_=train[train['Place']==country][['NbDay']]\n    y_=train[train['Place']==country]['ConfirmedCases']\n    \n    train_=train_.astype(float)\n\n    \n    \n    # Test\n    test_=test[test['Place']==country][['NbDay']]\n    \n    test_=test_.astype(float)\n\n    \n    # Train the model using the training sets\n    model.fit(train_, y_)\n\n    \n    # Make predictions using the testing set\n    y_pred = model.predict(test_)\n    y_pred = list(y_pred)\n\n    ConfirmedCasesPredictions+=y_pred\n    \n    i=i+1\n    #print('___________________________________________')","dc1452ba":"ConfirmedCases=np.array(ConfirmedCasesPredictions)\nConfirmedCases=pd.DataFrame(ConfirmedCases, columns=['ConfirmedCases'])\ntest['ConfirmedCases']=ConfirmedCases","97b869c2":"ConfirmedFatalities=[]\n\n#i=1\nfor country in Countries_liste:\n    \n    #print('For country ',i,': *******************', country, '')\n    \n    # Train\n    train_=train[train['Place']==country][['NbDay','ConfirmedCases']]\n    y_=train[train['Place']==country]['Fatalities']\n    \n    train_=train_.astype(float)\n    \n    # Test\n    test_=test[test['Place']==country][['NbDay','ConfirmedCases']]\n\n    test_=test_.astype(float)\n\n    \n    # Train the model using the training sets\n    model.fit(train_, y_)\n\n    \n    # Make predictions using the testing set\n    y_pred = model.predict(test_)\n    \n    y_pred = list(y_pred)\n    ConfirmedFatalities+=y_pred\n    \n    #i=i+1\n    #print('___________________________________________')","69f41e2f":"Fatalities=np.array(ConfirmedFatalities)\nFatalities=pd.DataFrame(Fatalities, columns=['Fatalities'])\ntest['Fatalities']=Fatalities","faf1c841":"# Submission\n\n\nsub = pd.DataFrame()\nsub['ForecastId'] = test['ForecastId']\nsub['ConfirmedCases'] = test['ConfirmedCases']\nsub['Fatalities'] = test['Fatalities']\nsub.to_csv('submission.csv', index=False)","a5c6b263":"## 5) Taking the essential features for the next steps","39aaff2d":"## 1) Reading the Data","0f1c35ce":"# I) Preparing the Data","5fe0fabc":"## 4) Making a new features counting days since the starting of the pandemic for each region","f81cc871":"## 2) Modifiying date feature","3eed847f":"## 3) Combining Province_State and Country_Region in one Feature","9a304bb1":"# III) Building the model"}}