{"cell_type":{"7c2273f4":"code","51f8c705":"code","b71bf96a":"code","0cfe6ae4":"code","1967a262":"code","a4d710a1":"code","26c1a18a":"code","99018efd":"code","a22932b0":"code","2c9b6b0f":"code","0d0e376e":"code","03ce27cf":"code","be84afba":"code","23fd5266":"code","227b4755":"code","a6471c3a":"code","cbd208b6":"code","442a21fd":"code","546acc9c":"code","50988d1f":"code","84c6262b":"code","483fc27b":"code","2a20508a":"code","56d54c18":"code","e0dfe528":"code","af9c3f55":"code","d0c30245":"code","c24c86e1":"code","c2096963":"code","dad1abf3":"code","9e07ea4c":"code","52cb98b1":"code","089267d7":"code","2b57dfd1":"code","54708012":"code","ef5d07a0":"code","bb4fe4f6":"code","0df5288d":"code","2fd939cc":"code","87da71a3":"code","bc8d140c":"markdown","de7fac66":"markdown","9bffa8ce":"markdown","00ebcb8f":"markdown","0217101d":"markdown","481bc0e2":"markdown","1a3bc3e4":"markdown","b454405c":"markdown","70dead35":"markdown","8663d99a":"markdown","a1b5c52f":"markdown","67d89eac":"markdown","95867c4b":"markdown","84ec28d7":"markdown"},"source":{"7c2273f4":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")","51f8c705":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","b71bf96a":"#statics of data\ndf.describe()","0cfe6ae4":"df.shape","1967a262":"#Check null values\ndf.isnull().sum()","a4d710a1":"df.info() #information of datatype","26c1a18a":"#drop the column\ndf = df.drop(columns =['Id'])\ndf.head()","99018efd":"df['Species'].value_counts()","a22932b0":" df['SepalLengthCm'].hist()\n# Range of value(x) to the corresponding range of count(y)","2c9b6b0f":"df['PetalLengthCm'].hist()","0d0e376e":"df['SepalWidthCm'].hist()","03ce27cf":"df['PetalWidthCm'].hist()","be84afba":"colors = ['red','purple','orange']\nspecies = ['Iris-setosa','Iris-virginica','Iris-versicolor']","23fd5266":"for i in range(3):\n    x=df[df['Species']== species[i]]\n    plt.scatter(x['SepalLengthCm'],x['SepalWidthCm'],c=colors[i],label = species[i])\nplt.title('plot between SepalLength and sepalWidth')\nplt.xlabel('sepalLength')\nplt.ylabel('sepalWidth')\nplt.legend()","227b4755":"for i in range(3):\n    x=df[df['Species']== species[i]]\n    plt.scatter(x['PetalLengthCm'],x['PetalWidthCm'],c=colors[i],label = species[i])\nplt.title('plot between PetalLength and PetalWidth')\nplt.xlabel('PetalLength')\nplt.ylabel('PetalWidth')\nplt.legend()","a6471c3a":"df.corr()","cbd208b6":"corr = df.corr()\nfig,ax = plt.subplots(figsize=(5,4))\nsns.heatmap(corr,annot = True,ax=ax,cmap = 'coolwarm')","442a21fd":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()","546acc9c":"df['Species'] = LE.fit_transform(df['Species'])\ndf.head()","50988d1f":"from sklearn.model_selection import train_test_split\n#train\n#test\nx= df.drop(columns=['Species'])\ny= df['Species']\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.30)","84c6262b":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()","483fc27b":"model.fit(x_train,y_train)","2a20508a":"from sklearn.model_selection import cross_val_score\naccuracy1= model.score(x_test,y_test)*100\nprint(\"Logistic Regression Accuracy is:\",accuracy1)\nprint(cross_val_score(model,x,y,cv=5))","56d54c18":"predictions = model.predict(x_test)\nfrom sklearn.metrics import confusion_matrix","e0dfe528":"from sklearn.metrics import classification_report\nprint(classification_report(predictions,y_test))","af9c3f55":"from sklearn.tree import DecisionTreeClassifier \nmodel2 = DecisionTreeClassifier(criterion='entropy', random_state=0)  \nmodel2.fit(x_train, y_train)  ","d0c30245":"y_pred= model2.predict(x_test) \naccuracy2 = model2.score(x_test,y_test)*100\nprint(\"Decision Tree Accuracy is:\",accuracy2)\nprint(cross_val_score(model2,x,y,cv=5))","c24c86e1":"print(classification_report(y_pred,y_test))","c2096963":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(x_train, y_train)","dad1abf3":"accuracy3 = knn.score(x_test,y_test)*100\nprint(\"Decision Tree Accuracy is:\",accuracy3)\n","9e07ea4c":"pred= knn.predict(x_test)\nprint(cross_val_score(knn,x,y,cv=5))","52cb98b1":"print(classification_report(pred,y_test))","089267d7":"from sklearn.svm import SVC\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.25)\nclassifiers = SVC(kernel=\"linear\",random_state =0)  \nclassifiers.fit(x_train, y_train)\ny_predicted = classifiers.predict(x_test)  ","2b57dfd1":"accuracy4 = accuracy_score(y_predicted,y_test)*100\nprint(\"The accuracy OF Support vector :\",accuracy4)\nprint(cross_val_score(classifiers,x,y,cv=5))","54708012":"print(classification_report(y_predicted,y_test))","ef5d07a0":"from sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\n","bb4fe4f6":"gaussian.fit(x_train, y_train)\ny_predictt = gaussian.predict(x_test) ","0df5288d":"accuracy5 = gaussian.score(x_test,y_test)*100\nprint(\"Decision Tree Accuracy is:\",accuracy5)","2fd939cc":"print(classification_report(y_predictt,y_test))","87da71a3":"from prettytable import PrettyTable\nTable = PrettyTable([\"Algorithm\", \"Accuracy\"])\nTable.add_row([\"LogisticRegression\", accuracy1])\nTable.add_row([\"Decision Tree\", accuracy2])\nTable.add_row([\"KNN\", accuracy3])\nTable.add_row([\"SVC\", accuracy4])\nTable.add_row([\"gaussian\", accuracy5])\nprint(Table)","bc8d140c":"#setosa is a different class than other two and the sepal width is starting from 3cm to maximum of 4.4cm\n#virginicia is overlapping with versicolor from the sepal length 6cm to 7cm\n","de7fac66":"# Logistic Regression\n","9bffa8ce":"As we can see it comes under normal distribution","00ebcb8f":"# Decision Tree","0217101d":"# Importing library","481bc0e2":"dataset contains multiple labels in one or more than one columns . these labels can be in the form of words and numbers Label Encoding refers to convertingthe label into numeric form so as to convert it into the machine-readable form.","1a3bc3e4":"# KNN Algorithm","b454405c":"# Coorelation Matrix","70dead35":"# Label Encoder","8663d99a":"# Support Vector ","a1b5c52f":"As we can see that one class is saparated by another class","67d89eac":"# Reading the dataset","95867c4b":"# Gaussian NB","84ec28d7":"# Model Training"}}