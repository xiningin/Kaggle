{"cell_type":{"13485835":"code","ea909ce0":"code","aeadc06e":"code","e9f6d462":"code","4003de71":"code","146d3280":"code","705af221":"code","bddcfc47":"code","709f6330":"code","25e34a6e":"code","40e0da70":"code","80f55092":"code","2e3cb9e6":"code","a8edcd8b":"code","ba343dca":"code","447b75f7":"code","f692cd12":"code","7bc84bee":"code","7d409bd6":"code","a8087410":"code","9fc16bdd":"code","c40c99e9":"code","2374c365":"code","de9b45ef":"code","d97b314c":"code","46f7649f":"code","bf9d8908":"code","f1b85fa2":"code","809c859b":"code","06d911d7":"code","f2cd0452":"code","b8e99404":"markdown"},"source":{"13485835":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea909ce0":"!pip install imbalanced-learn","aeadc06e":"data =pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","e9f6d462":"data = data.drop(columns=['customerID'])","4003de71":"import seaborn as sns\nimport matplotlib.pyplot as plt","146d3280":"def split_columns(data):\n    categorical_col = data.select_dtypes(include=['object','category']).columns.tolist()\n    numerical_col = data.select_dtypes(include=['int64','float64']).columns.tolist()\n    return categorical_col,numerical_col\n    ","705af221":"data.head()","bddcfc47":"data['TotalCharges']= pd.to_numeric(data['TotalCharges'],errors='coerce')","709f6330":"cat,num = split_columns(data)","25e34a6e":"len(cat),len(num)","40e0da70":"num","80f55092":"# Visualize numerics\n\nfigure,axes = plt.subplots(2,2,figsize=(6,6))\ncount =0\nfor key in num:\n    sns.histplot(data[key],ax=axes[int(count\/2),count%2])\n    count = count+1\n    ","2e3cb9e6":"\nfigure,axes = plt.subplots(4,4,figsize=(20, 20))\ncount = 0;\n\n\nfor key in cat:\n    sns.countplot(y=key, data=data, orient='v', ax=axes[int(count\/4),(count%4)]);\n    count = count+1\n    \n\n    \n    \n    \n    \n        ","a8edcd8b":"for key in cat:\n    val = data[key].unique()\n    if(len(val)==2):\n            if(key=='gender'):\n                data['gender'] = data['gender'].map({'Male': 1, 'Female': 0})\n            else:\n                data[key] = data[key].map({\"Yes\":1,\"No\":0})\n","ba343dca":"data.head()\ndata.info()","447b75f7":"data =pd.get_dummies(data)","f692cd12":"data","7bc84bee":"data.info()","7d409bd6":"data['TotalCharges'].unique()","a8087410":"data['TotalCharges']","9fc16bdd":"num","c40c99e9":"data.info()","2374c365":"data = data.dropna()","de9b45ef":"cat,num = split_columns(data)\nnum","d97b314c":"from sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nX = data\nscaler = MinMaxScaler().fit(X)\nX = scaler.transform(X)\nX = pd.DataFrame(X,columns= data.columns)\n","46f7649f":"fig,ax =  plt.subplots(figsize=(18, 16))\nsns.heatmap(X.corr())","bf9d8908":"X.corr()['Churn'].sort_values(ascending=False)","f1b85fa2":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import f1_score\nY = X['Churn'].astype('int')\nX = X.drop(columns=['Churn'])\n\noversample = SMOTE()\nX_smote, Y_smote = oversample.fit_resample(X, Y)\n\nrf = RandomForestClassifier()\ngbc = GradientBoostingClassifier()\n\n","809c859b":"def train(X,Y):\n    X_train,X_test,y_train,y_ytest = train_test_split(X,Y,test_size=0.3,random_state=42)\n    len(X_train),len(X_test)\n    rf.fit(X_train,y_train)\n    #gbc.fit(X_train,y_train)\n    rf.score(X_test,y_ytest)\n    plot_confusion_matrix(rf,X_test,y_ytest)\n    #plot_confusion_matrix(gbc,X_test,y_ytest)\n    y_pred1 = rf.predict(X_test)\n   # y_pred2 = gbc.predict(X_test)\n    f11 = f1_score(y_ytest,y_pred1)\n    #f12 = f1_score(y_ytest,y_pred2)\n    return f11\n    ","06d911d7":"f1 = train(X,Y)\nf2 = train(X_smote,Y_smote)","f2cd0452":"print(\"Original   : \",f1)\nprint(\"With Smote : \",f2)\n","b8e99404":"# EDA"}}