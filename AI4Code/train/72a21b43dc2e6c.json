{"cell_type":{"27eea324":"code","2f7e1c41":"code","38f0884c":"code","0fd106ea":"code","d4802a69":"code","996c9a9b":"code","3716007c":"code","fcb9b54c":"code","aee3b309":"code","e9804cac":"markdown","8d068933":"markdown","7e5e3cfe":"markdown","b7c222d7":"markdown","643e40ea":"markdown","e44e00a7":"markdown","f1b7a59d":"markdown","b4da4462":"markdown","747eab92":"markdown","081c7e1d":"markdown","a402a988":"markdown","5d24a093":"markdown","583fa1bd":"markdown","90b9f60b":"markdown","05afaac5":"markdown","e57343c7":"markdown","3e0ef887":"markdown"},"source":{"27eea324":"import numpy as np\nimport pandas as pd\nfrom pandas import Timestamp\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, confusion_matrix \nfrom sklearn.model_selection import train_test_split\nfrom IPython.display import HTML, display\nfrom tabulate import tabulate\nimport ipywidgets as widgets","2f7e1c41":"#Importing the data\ndf_sky = pd.read_csv(\"..\/input\/Skyserver_SQL2_27_2018 6_51_39 PM.csv\", dtype={'class':'category'})\ndf_sky.drop(['objid','specobjid'],axis =1,inplace=True)\ndf_sky.head()","38f0884c":"counts = df_sky.groupby(['class'])['class'].count().plot(kind='bar')","0fd106ea":"for column in df_sky.columns:\n    if column not in ['rerun','class']:\n        df_sky.groupby('class')[column].plot.kde()\n        plt.title(column)\n        plt.legend()\n        plt.show()","d4802a69":"X = df_sky.drop('class',axis=1)\ny = df_sky['class']","996c9a9b":"model = KNeighborsClassifier(n_neighbors=3)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nmodel.fit(X_train,y_train)\npredicted = model.predict(X_test)\n#print(confusion_matrix(y_test, predicted))  \npredict_table = widgets.HTML(value = \"\")\npredict_table.value = \"<pre>\" + classification_report(y_test, predicted) + \"<\/pre>\"\ndisplay(predict_table)\nprint(classification_report(y_test, predicted))","3716007c":"svclassifier = SVC(kernel='linear')\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nclf = svclassifier.fit(X_train,y_train)\ny_pred = svclassifier.predict(X_test)\n#print(confusion_matrix(y_test, predicted))  \n# predict_table = widgets.HTML(value = \"\")\n# predict_table.value = \"<pre>\" + classification_report(y_test, y_pred) + \"<\/pre>\"\nprint(classification_report(y_test, y_pred))","fcb9b54c":"svclassifier = SVC(kernel='poly')\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nclf = svclassifier.fit(X_train,y_train)\ny_pred = svclassifier.predict(X_test)\n#print(confusion_matrix(y_test, predicted))  \n# predict_table = widgets.HTML(value = \"\")\n# predict_table.value = \"<pre>\" + classification_report(y_test, predicted) + \"<\/pre>\"\n# display(predict_table)\nprint(classification_report(y_test, predicted))","aee3b309":"svclassifier = SVC(kernel='rbf')\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nclf = svclassifier.fit(X_train,y_train)\ny_pred = svclassifier.predict(X_test)\n#print(confusion_matrix(y_test, predicted))  \n# predict_table = widgets.HTML(value = \"\")\n# predict_table.value = \"<pre>\" +  + \"<\/pre>\"\nprint(classification_report(y_test, y_pred))","e9804cac":"# Analisando dados","8d068933":"## Gr\u00e1fico de densidade","7e5e3cfe":"Para classificar essa base utilizamos o KNN e varia\u00e7\u00f5es do SVM a fim de comparar os resulados.","b7c222d7":"# Preparar base de dados","643e40ea":"Percebemos que a quantidade de Quasar \u00e9 bem menor que as outras classses.","e44e00a7":"# SVM Gaussian","f1b7a59d":"# SVM Linear","b4da4462":"Aqui inicializamos a base de dados e retiramos duas colunas que n\u00e3o v\u00e3o fazer diferen\u00e7a para a nossa clasifica\u00e7\u00e3o, a coluna 'objid' e 'specobjid' que s\u00e3o identificadores de objeto.\n<p> E mostra uma pequena a mostra da base de dados com todos seus atributos.","747eab92":"# Importando a base de dados","081c7e1d":"<p> Separa o DataFrame em partes de treino e de teste, no qual a coluna 'classe' \u00e9 retirada do DataFrame. E y \u00e9 a classe correspondente ao DataFrame X.","a402a988":"## Imports","5d24a093":"# SVM Poly","583fa1bd":"## Quantidade de amostras por classe","90b9f60b":"# KNN","05afaac5":"# Classificadores","e57343c7":"Plota gr\u00e1ficos de densidade, no qual \u00e9 poss\u00edvel verficar a distribui\u00e7\u00e3o dos dados. ","3e0ef887":"# Predicting Stars, Galaxys and Quasars"}}