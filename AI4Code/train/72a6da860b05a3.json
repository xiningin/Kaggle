{"cell_type":{"c5046388":"code","1b6d318c":"code","c31d6445":"code","70098266":"code","216adf7d":"code","97abdcc4":"code","dedca95d":"code","9b9190c2":"code","bf9847fe":"code","49b9a6db":"code","4447fb9f":"code","495e56ab":"code","e0617fb2":"code","12c7faa8":"code","b0782f1b":"code","9c77394f":"code","8bda8f5d":"code","6c94c945":"code","ee7c2f48":"code","2666a2fa":"code","e0e6db3c":"code","a95f41d9":"code","dc83ba85":"code","7ec7b6da":"code","283c77aa":"code","34c7b167":"code","66596bed":"code","b68c3d34":"code","e3a436ad":"code","0a1e033b":"code","ffe3294e":"code","cd10d39e":"code","cfd765fe":"code","86d226d7":"code","8a7c4717":"markdown","c7ec6786":"markdown","5333f873":"markdown","d75092b7":"markdown","7981a7e8":"markdown","df2ce505":"markdown","4965d549":"markdown","c0305a26":"markdown","822d06cc":"markdown","378b09e0":"markdown","44a6b56f":"markdown","ef09df51":"markdown","6afe7426":"markdown","4e75e804":"markdown","ee65508d":"markdown","332b71c3":"markdown","3e9e9bba":"markdown"},"source":{"c5046388":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nprint('Done')\n","1b6d318c":"df = pd.read_csv ('..\/input\/titanic.csv')","c31d6445":"df.head()","70098266":"df.isnull().sum()","216adf7d":"#Replace the null value for sibsp and parch  with zero\n\ndf['parch'] = df['parch'].fillna(0)\ndf['sibsp'] = df['sibsp'].fillna(0)\ndf.head(2)","97abdcc4":"#fill the null value for age with mean\ndf['age'].fillna((df['age'].mean()), inplace=True)\nprint('Done')","dedca95d":"#convert sex to numeric\ngender_int = {'male': 0, 'female': 1}\n\ndf['sex'] = df['sex'].map(gender_int)\ndf.head(5)","9b9190c2":"#convert embarked to numeric\nembk_int = {'C': 1, 'Q': 2, 'S': 3}\n\ndf['embarked'] = df['embarked'].map(embk_int)\ndf.head(5)","bf9847fe":"#create indicator for cabin\ndf['cabin1'] = np.where(df['cabin'].isnull(), 0, 1)\ndf.head(2)","49b9a6db":"#drop the cabin with object datatype and rename the new numeric colum\ndf.drop(['cabin'], axis=1, inplace=True)\ndf.rename(columns={'cabin1': 'cabin'}, inplace=True)\ndf.head(2)","4447fb9f":"df.pivot_table('survived', index='sex', columns='embarked', aggfunc='count')","495e56ab":"df.pivot_table('survived', index='cabin', columns='embarked', aggfunc='count')","e0617fb2":"men = df.loc[df.sex == False][\"survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","12c7faa8":"women = df.loc[df.sex == True][\"survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","b0782f1b":"mean_survived = df.groupby('survived').mean()\nmean_survived","9c77394f":"#add a new column category next to the age group. and convert continuous ages into categorical groups. \n#Child:1,Young:2,Adult:3\ncategory = pd.cut(df.age,bins=[-1,16,36,99],labels=[1, 2, 3])\ndf.insert(5,'age_group',category)\ndf.head(2)","8bda8f5d":"# hot encode categorical values \ncat_columns = ['embarked', 'pclass', 'cabin', 'sex', 'age_group']\ndf = pd.get_dummies(df, prefix_sep=\"_\", columns=cat_columns)\n","6c94c945":"#drop unnecessary variables\ndf.drop(['name', 'home.dest', 'boat', 'body', 'ticket', 'age'], axis=1, inplace=True)\ndf.head()","ee7c2f48":"df.info()","2666a2fa":"#convert the data type to category\ndf['survived'] = df['survived'].astype('category', copy=False)","e0e6db3c":"df.isnull().sum()","a95f41d9":"#There are one to three null values in some columns. Drop all rows with null value\ndf = df.dropna(how='any',axis=0) ","dc83ba85":"df.isnull().sum()","7ec7b6da":"from sklearn.model_selection import train_test_split","283c77aa":"#split the data for training, test, and validation (60,20,20)\nX = df.drop('survived', axis=1)\ny = df['survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=30)\nX_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.5, random_state=30)\n\nprint(len(X), len(y_train), len(y_val), len(y_test))","34c7b167":"for dataset in [y_train, y_val, y_test]:\n    print(round(len(dataset) \/ len(y), 1))","66596bed":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_validate","b68c3d34":"RFC = RandomForestClassifier()\nprint(cross_validate(RFC, X_train, y_train.values, cv=5))","e3a436ad":"def print_results(results):\n    print('BEST PARAMS: {}\\n'.format(results.best_params_))\n\n    means = results.cv_results_['mean_test_score']\n    stds = results.cv_results_['std_test_score']\n    for mean, std, params in zip(means, stds, results.cv_results_['params']):\n        print('{} (+\/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))","0a1e033b":"rfc = RandomForestClassifier()\nparameters = {\n    'n_estimators': [5, 50, 100],\n    'max_depth': [2, 10, 20, None]\n}\n\ncv = GridSearchCV(rfc, parameters, cv=5)\ncv.fit(X_train, y_train.values.ravel())\n\nprint_results(cv)","ffe3294e":"rfc1 = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nrfc1.fit(X_train, y_train.values.ravel())\n\nrfc2 = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nrfc2.fit(X_train, y_train.values.ravel())\n\nrfc3 = RandomForestClassifier(n_estimators=50, max_depth=10, random_state=1)\nrfc3.fit(X_train, y_train.values.ravel())","cd10d39e":"from sklearn.metrics import accuracy_score, precision_score, recall_score","cfd765fe":"# evaluate on validation test\nfor mdl in [rfc1, rfc2, rfc3]:\n    y_pred = mdl.predict(X_val)\n    accuracy = round(accuracy_score(y_val, y_pred), 3)\n    precision = round(precision_score(y_val, y_pred), 3)\n    recall = round(recall_score(y_val, y_pred), 3)\n    print('MAX DEPTH: {} \/ # OF EST: {} -- A: {} \/ P: {} \/ R: {}'.format(mdl.max_depth,\n                                                                         mdl.n_estimators,\n                                                                         accuracy,\n                                                                         precision,\n                                                                         recall))\n","86d226d7":"y_pred = rfc1.predict(X_test)\naccuracy = round(accuracy_score(y_test, y_pred), 3)\nprecision = round(precision_score(y_test, y_pred), 3)\nrecall = round(recall_score(y_test, y_pred), 3)\nprint('MAX DEPTH: {} \/ # OF EST: {} -- A: {} \/ P: {} \/ R: {}'.format(rfc1.max_depth,\n                                                                     rfc1.n_estimators,\n                                                                     accuracy,\n                                                                     precision,\n                                                                     recall))","8a7c4717":"## Preprocessing and Data Transformation","c7ec6786":"The survival rate for women is higher than men. ","5333f873":"## Explore the data and Look for patterns","d75092b7":"### Fit the best model from last result to training set","7981a7e8":"### Survival rate for men and women","df2ce505":"## Look for patterns","4965d549":"The table shows higher survival for those without cabin","c0305a26":"# Hot Encoding","822d06cc":"## Fit and evaluate a basic model using 5-fold Cross-Validation","378b09e0":"## Besed on previous evaluations the following model is so far the best model to predict the survived passengers (with 81% accuracy).","44a6b56f":"## Prepare for Training","ef09df51":"## Hyperparameter Tuning ","6afe7426":"Embarked:  0 = Cherbourg, 1 = Queenstown, 2 = Southampton <br>\nThe table shows higher survival for Southhampton port. ","4e75e804":"#### With no null value the dataset is ready for training","ee65508d":"### Validate the model","332b71c3":"### Titanic Challenge\n\n \n**Data Dictionary:**\n- **Name** = Name of the passenger\n- **Pclass** = Ticket class\n- **Sex** = Sex of the passenger\n- **Age** = Age in years\n- **SibSp** = Number of siblings and spouses aboard\n- **Parch** = Number of parents and children aboard\n- **Ticket** = Ticket number\n- **Fare** = Passenger fare\n- **Cabin** = Cabin number\n- **Embarked** = where the passenger boarded the Titanic (C = Cherbourg, Q = Queenstown, S = Southampton)\n- **boat** = Number of life boats\n- **body** = the body identification number for victims.\n- **home.des** = passenger's home\/destination.","3e9e9bba":"## Train the Model"}}