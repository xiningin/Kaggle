{"cell_type":{"795fdcaf":"code","54856b05":"code","38df4f99":"code","be4da22d":"code","ceb7bb2b":"code","a5686ef9":"code","8bef04c6":"code","3824558f":"code","f5ccb27d":"code","0fceb81b":"code","f4bad42d":"code","c91dc213":"code","b3d73234":"code","7895e935":"code","7820835c":"code","d89fbb30":"code","c3f9723b":"code","48925920":"code","67d7288d":"code","346fe133":"code","a0291236":"code","e3835efd":"code","de538109":"code","67937433":"markdown","28cf8328":"markdown","77bc76df":"markdown","d53fa0e9":"markdown","018a0f0e":"markdown","eba57897":"markdown","33f76c4f":"markdown","76e51804":"markdown","7e911c39":"markdown","ca9163fc":"markdown"},"source":{"795fdcaf":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRjIl1Op0bm-nYXHPasa_xoMGXvGEfxDqPOGfSaPgpyHPKTXCKD&usqp=CAU',width=400,height=400)","54856b05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport unicodedata\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","38df4f99":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/harry-potter-dataset\/Characters.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'Characters.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","be4da22d":"df = df.rename(columns={'Blood status':'bloodstatus', 'Hair colour': 'hair', 'Eye colour': 'eye'})","ceb7bb2b":"fig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","a5686ef9":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nfig = plt.figure(figsize=(12,8))\naxes1 = plt.subplot(2,2,1)\naxes1 = sns.countplot(x='bloodstatus', data=df)\naxes1.set_title('bloodstatus')\naxes1.set_ylabel('Count')\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\n\naxes2 = plt.subplot(2,2,2)\naxes2 = sns.countplot(x='House', data=df)\naxes2.set_title('House')\naxes2.set_ylabel('Count')\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\n\nplt.tight_layout()","8bef04c6":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARUAAAC2CAMAAADAz+kkAAABs1BMVEX\/\/\/\/\/mczMzMz\/AAD\/ZgD\/\/wAAAAD\/kZH\/m8\/o6Oj\/ntP\/Li7\/jY3S0tLLeaKGjYpfJ0TCwsJmZmaRkZE3NzfLUADl5QBiYlxsbDvg4ONfAABbW1v5+QCzs7N0dHTGyMb1k8HribqDg4J4eABQdHSorqulWY1wVlFjXVjOzgDb3dx8fHyTcJiuUoBwRFqmpqZWNEW0tADbg6\/JyQCnpwC5uQCKU25GRgBwcABdXQB9fQC2tgA0NACLi4uaXHv\/bwCTkwAqKgBQUFB2LwDtXwC0bJBwLFqgYIBdOEpOHwBCQgBQUACLiwAaGgDc3ACcnJw0NDTfWQCJNwChQAB4SGC8SwD\/Ghr\/UFAuLgAQEACzy8tGRkZ\/MwBGKjhgJgDDTgBkZElubl9\/f4xwcB4gIABsbEViYiJra3ZCYWF9np5xcZQdHR2sxcVbaWlpi4s7SUktMzBVOzxaRVhRGzdSDAB8WnvJdKacZnh\/cnLNjJt5WF1dTF1qTTtpUCu6eKJZT1xkPmM1FQD\/rOUeEhhVIgAvEwCcVm\/fi64gDQBQRFSpc3eIJwx5XHJ4RlKOW4luaFSHQGn2JfZRAAAOQUlEQVR4nO2diWPaRhbGDYsUMbtSFrBpXU7huA3QcojDYHMFrIKPgDGkbUKwm67btM2m3TZteqTbw023x7bZ\/sk74hTwBJJNcAjz2ZaxzDze+2lmNMfDXvoL0aiWLtqBZ1KECiRM5Y1LRDK92aby1yUimS4RKoD+RqgAIlQgESqQCBVIhAokQgXSBVExpZ0vqJbFYpyxexdCRf9eLuy1qlY4umlZnamDF0EluG+lNCr29kyrywVQYfe1MsGy2mbo4UVQedd+BipUNDhDF2dPxZGLbOxGqNjuRqQfc2Ji\/bHemWEbmj2Vd7xUko5QYTohrwnhSVTs\/3iuqXgwleiGNbqHqSTwVy6xmYushan9RGIslbUZ3oYuhkqZLucwhEQ4kYzSXtpObWzmdiOpBadi38iVpaoR3U1ar0kP9jCVCS3ouaeyR+2fUMkklUwkk1veMr4nbazlUtTmQlOJJKKxnHdtLUIlNjd3aZr2RtYS5f3k2LHdc09lIFo89veO7VAWkgq1mdxTM6xbMCoqRagsKJVderDR5OhRDOXW0dq9YS8AlfIQFWuEGlF7pLtPRxaFSnIDU0nuRqnI9WTuWoy2pt4qn+xFacqeSsWs11JbNBW7flNqaZFYcnNBqERpXFfCtJW2UmupJL1GUxjI\/kmCpiLhiPQDPoNHuxILrzQjWBwqVJtKIhG97m1T2YthFnhQR+VOvD0qm+UIXV4MKl46SkfwIWW3b7Rmh5FN2pvc3aKt4ZMc7U3cjOD6sSuNYrwpO+5ZygtBhfJuxWKUN2ylrFtea8waC8fwZ8Qai1CRrf4jPAHABzv+eTGonEWECqFCqLREqEAaRyW2DwxyF54KdVNxB+T5pxKJWu3RsD1qj0YpaitqD1sjXm84jH+4lqOkc4tIJUKHT+yb9H45mUjmKC+9QafoNTu9uZHDVKJ7m8mFpBKlE0k8O8SD13ISE8Dj\/3ByjboZTSQwlbXrCXBVewGoUDF7OUzHcsk9iYq3SyVJXZMOYBN6zqm846USezH7ifVk17u7kYpsXi+nttbeKl9LpajoW6lyaq+8gFQsMfgmcxPuZbuyvvtc7zPr4e3kKE2P3Q+yOmfn4kXkr6QVKst4vTjLHLCLyAB79wxj\/twsk3ouhMrqnbBdm6zvVWbp4AVllgbvvv0ioL29Pej0iy+8M9sUygvLQjaujsrYoA+g86uzTrd9tnKzbfTyRbvQFqECiVCBRKhAIlQgESqQCBVIhAokQgUSoQKJUIFEqEAiVCARKpAIFUiECiRCBdJToGLUq5ZrcJVthArrUm9rihFMncqqp2Ezq5ftfSfbLzxIJdh4X4Mlcz7vmFYQ06YSvLJuYrXo1rp5vVdaTsXo9GizxDo+cE5rgXe6VBxX1Nf4jlj9h6ZucTkV8y3tpoL+6YQxXSpGpVDYccGYbN1LLKNSscBlxlpiL0+pEU2VSlApFPO4YFhPd1+wT8V4xXQGS\/pbH08ljulSMQdhnx1mRyskpVi6fxmiT8V3BX6yqWNJwRTb8E0lkKlSsTkULrCjdYnz8K\/1bL5bvkfF5AHjZv2OBisVUMDP3jcp+aZJM6DCBp0mZ5DFbBqqqThgKg6zyWNhWafDptDArswPFY\/T6fSwbMV575xU2LRkScJ8MP9UGj7W12DZZV\/+vFSWfSxrM+FvznmnwjpxL1DJO1l9w+aEewuVVFhP3sIG82bM2GaDLc0NFXzDYFtf7cM5qHStjLE0P1QmSn1vO9ESoUKoECqSCBVChVBRH8tB2tPSAX2v88iWJlToUV0mVA48\/pYa9L3OI1JX9Gx3fcW5EP2KSZrDuUyymRw4qev1tspU2jbkllzQpsg8UDEd0D48paP765ZsBcIymYprmcZzqQrt758NgjPROaDCetIe1uRZ7k8OexNFjVRYiwdPt53SqtV4S\/NAxe\/Isw5\/nmWDDQtryjdos83hch4MryeooRJssHqb2cU6Gmm9ydyg886K3r88vJ4wJ1Q8+KPBshY\/7TObVvOuhsNS0QfPUFeCafxhc7EV\/z2X37HqNOWDQQ87vHw7J1QqlYa0DGdzNViTrRFsnRnZPFZFxeFp+Gz4duWyuVxmXPUsEpURS3NAxdTAlcXjuIdhWO4FnZ6KRd86U9HcgnDjMfn9pgML67EsW9JObEk6kx4e1cwFFVwvHKyjgut5Jehw4qtrDgZZx8iuhQoqkiVsL8iylWAw7ZEs4TPDeOeCSmczi209YtMVh8MMriyqoDJgqWLpWBoxNhdUBj1Oe\/zwgFUFlcHnVzx+hd\/MHRXFJWjtI35lS88iFfP6OCqK+qe5U75PxadQrSaIzU8ng2WqVNZHuj9VoVg8nfJ9Ksb7GnK\/+nomcxKM5rPEcut+t3yfypJFYX99vD6a0nvBp5zr9NEZMpT8vVQcGRWjzaQZC9triufVlPPi0k6TXlMyG64p\/be1y6gsGT\/+QK\/JFB7U3J\/Wm8GnnUNpyt\/\/wKJeH5nlOZRyKpiwza\/BkuVDW3paQUw\/39bImrRoIE12kMqST5Ml13TSnFp6pnKzh6hcnAgVSIQKJEIFEqECiVCBRKhAIlQgESqQCBVIWqgYn7bM9MFTfw1Vy1IaqBiBNJP5k6o\/3LhwVFS93UwblXOuitroc77Xa\/m8BjxPg8r5JuvG\/HmDOqDPuQRJqEB6KlTOtwL4XFJZOm+\/cn4q\/7pAKr506cHfAQUC0NlPQleHG5bR8qmCAdDCg7uucxkoha4Obxkag6989tlLoyoUCsDZlz77ZPByAVTWP+d4HVItN8\/FLw\/YXL8r8urLIx3\/8IvBhWjXlyKvxQLP\/eYZqMa+O7XqtkG9tqu1L+W9wyiVyqsMw+g0CD\/7ZXm9XP9Cp82AjtF9JX8zv+vrn7V6wDx8JDPg+0YLkraq\/5ZhGaHC\/uGGXhh1\/QeFMv0qrP9dKfRxcb3W3xUyfqrw3HEW0LeWflB3qpqhYCyyUe8Ile\/c0IujeAsLI4LIdDr+au9S+TnQe0bkx2FBj\/qV9aFC+Bk0zsD3vY0lx+EZoBgMtf7O1DAVfQB8aXddkFx1Z+CQdbonPZMP4Og7RZWaBqp3sRrNsAFGiEuXhFFAwzzsdW4vbJ+JyvFlRSqOOPSqqCiEkOSY2ISdYp50byPGEPiMTlFUFBUMvNy95xofwfURNTmRwXbqMBUd36ei1EYKBkO2oNi6Vq4qUll\/DbiYDB93i9glFML3GzjoV7tUfK+DT2gXZUSuqNDAXu7ehlZfgTu2IscH8Pe6ANdmGZW8Qti3q0fZw+ptpZqkmYoYj8eLOobD3zL8Wah0iuJWEFKiYhlPxV3EFjgGu6JQXSdTqR3uZFcOf5gWFdQ8RajuRiE8NhDBqCZRQaFTqSiK89zZqDBCEaFTDCR0CjdRFVQeZx9nf8geTokKUwyJSAjVuVAcuUNNMKjxVJhOUQbVS2D5iVRQKMSjjORHsySCXCdTqe4c1bI7R4VptSCEuzmE8Cd2b1K\/Ajb7XlEEl5\/cgqRyXT9AC5OpTJBWKpM1icpkA5OoTBShAolQgUSoQCJUIBEqkAgVSIQKJEIFEqECiVCBRKhAIlQgESqQZkmFac3bB2bv4EqBIhXUMSB\/siYqrUWIyR7MkgqTabbWa5tC7zSqQ8tKSqtOqCQVdTdly4o8tGqkSIXhmnGkQ\/GmON4DBSq1H2r4WNhZGUKwPbo7oqGuoB+LbkYIZFBrywFfN8RAS0+KVBj+R5HBkWE00tXuGGBGDSjWFVSK8wyfCbU90PU8GEYLU8nu1LYN1du3hwhkD4fPaKNSKgooIMQREuOI4UuBAF9ETCmgmopQDCEUEjkGxUWEuEA9wItIKA1vFYyjIhSRyJUQI5Qw2lKgzhWxsYAwhEWhBR3dODYcVgvZwrHhqGpYOSoUDFV82C4Yto+2z05F5HRxTEUocnEUQu56sYm\/xdVTycTd7rrI4cAynJBBohjKoNJIIxhPRScKJYTdCEkL6iGORnF+ZFVdicrKDUOtilEcGm7cwO1mpbZ9Gx8MhexOdefMVEKnIU7k44gvxuOomMlwqOWaeipx3AR0mIpQLHFubIDnJSoaWhC+BkIdH3VFXO3ETEbExeO8yhZkeJw9qmIGEhWJT61WbR8K2Z9qNfVUBv1lmqjEiTg0TnTXUV0QGKSxrsRRIO4ucq3Ly2cEAQlxBqorSrtkHSpN5A60Hgo6\/BgbU9mCdrKFlQ6Vn37ZPqxWDe1DIfs4e6iWiunrwaCKAREVUT0gIBF3KXQ9kIkHcHUZdqm\/o7r0YDAm3I8InDuAa0c8EBCa9YAonQkNUdWh\/3TzaoyP+AHLHO7qM6iIX1UoBTjcsdWL+Ex9eGeW+blHxSYL9Uahlj3MHhaqhuOj7er2L4VCrXW4XahuPx7qV5yKVHy\/DtUVabOh1eNLt4\/Q6SluC+3byaD6GQGfDBLDRRmmu+khFE9PAzoEbKGjP3tJDWZ+cHDQ8qCz6SHt1+E6C3iAfuslhzmHb8M9VQ+z2dsr+ABtld1wKFJZ8n+lPLhlhGaoCI7B+D7nILyJ1X6eGGrCe49CP1NjuBEPqhkKwPa\/62H1Ke2D4ch3do4Nxzs7N4Df\/Vc5U0NKCRgTFbxFxei+l6XG3eU1G9Ch32WZbc4xBpS22VBGltlmgYKepGPZP1EfzQAzvS5lVGmS+w95aiP7iNdqAH0u\/7\/uxl+\/1WqAeeKRG\/ifdiy1qzIDQLag7\/4TTpNeuz+Yceq7+6c2A69eHUqirHz9rTYPvhtKoqz8+3hFk75ZlxeHMkuNLstlDaqM\/iUYl5byly+bRvJ49UFtBkbSo30VTQbWB5Njn6l3TT0zIlQgESqQCBVIhAokQgUSoQKJUIFEqEC61KbyxiUimd5sUyEaEaECiVCB9H904VIU1oGoXAAAAABJRU5ErkJggg==',width=400,height=400)","3824558f":"sns.countplot(x=\"Species\",data=df,palette=\"GnBu_d\",edgecolor=\"black\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\n# changing the font size\nsns.set(font_scale=1)","f5ccb27d":"warnings.filterwarnings(\"ignore\")\nfig = plt.figure(figsize=(12,8))\nsns.distplot(df['Id'], kde=True, bins=50)\nplt.title('Id Distribution')","0fceb81b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTEhMVFhMXGBgXGBYVFxcYGBgXGhoXGBgVGRgYHiggGxolGxgZIjEhKCkrLi4uGB8zRDMtNygtLisBCgoKDg0OGhAQGy0lICYwLS0tLS0tLS0tLS8rNS8tLS0tLS0tLS0tNS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLf\/AABEIAMIBAwMBIgACEQEDEQH\/xAAcAAEAAgIDAQAAAAAAAAAAAAAABQYEBwIDCAH\/xABHEAACAQMCAwUDCAQMBwEBAAABAgMAERIEIQUTMQYiQVFhBzJxFCOBkZKhsdFCUnLBFhckM1NUYnOCstLwFTRDRJPT8TUl\/8QAGQEBAAMBAQAAAAAAAAAAAAAAAAECAwQF\/8QAIxEBAAICAwABBAMAAAAAAAAAAAECAxESITFBEyJRYQQywf\/aAAwDAQACEQMRAD8A3jSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlKBSlUfUdu2VnUQKcWZf5w74ki\/u+lVteK+rRWZ8Xila21PtNlVrDSKfXmn8MK6ZfajMAT8iX\/wAx\/wDXUfUr+U8LNn0rVUHtXnaxOijVf1jOf\/Xv9FZ8ftJlN\/5IpAHVZb\/igqecI4S2NStZv7VDey6ZSfEGRgQfEEFKw29smL4SaZR5ESlt9rD3NtzSLxK84bxG\/wDYbYpWo4vbKzEgaRMQbZGcgAkG2R5ewuLX9a2Z2f4mNTp45wABILixuLXIuCQLjbyqYnalqzHqQqtcN4tq9T89AkA0wlZFEhk5kiI5jeUMuybqxVSrXAFyt9rLVW4Pw7W6UfJ4l08mmEjskrySLJHG7lzGYhGQ5XIgEOoIA2FSq7uFdovmDLMHZvlGphUQwySG0U80a3WMMR3IxdjYX+IrJbtTpsInVncShyixRSyORGbSExopZcWIU3AIYheptUNN2e1awJHGysPlOqlkjXUTabOOaWaSMc+JC6lc1JUCxsdzbfD\/AIJ6lNHFCiRHUI2qZNQNTNG8BmmeRGV+WzSrZlyVjZigBy6gLavG4jOYF5jOCAxWKUojFcwryBcFbGxsSPeX9YXrXE+1jj5JHG921Go1EbSx6WeRVWEzjFU3u4aNVY36B2sF3Ga\/BtT8tjmQRxgFedMkz31CCPHGTTcvl5ZWs+V1Cix\/Rrr4f2ZmQ6Mkp8xqtbO9id0n+VYBe7uw5y3vboeviEkvaOJEZpXDfPyQIsUUpdmUn5sRgFncBSSyi1gTsK+6vtTp40Ej84IU5hb5PqCI0BILS2T5uxBuGsQATawvUV\/B\/Uxss0QieVNVqZhG7sivFPkLZhGKOLg+6RsR43rG7U9n9dq1dWMYWTTtHguq1ESQytzAzkRoPlKlWQWew7h27xoJuLtOja59Fy5brHHIJBHKUJfmbFgmIUBBZ8rMSVG6muOn7URDT6eSRzI88YdBp4JmMgCgs6QqGkVBcdemQF7kX+abhc8esWZRG0T6aKCS7sroYWmcMq4EOGMtrEra19+lRfDOzur0qaJ4hBLLBpDpZI3keNCCYmzSQRsdmj6FdwfC24TE3a\/SKsLcxm56u0SxxSu78sqJFEaKWzUsLqQCLNcDE2k+GcQjniWWFso2vY2IOxIIIYAqwIIIIuCCKrvBuzMsU2mlZkOA1zS4lrczVzRTYxgjdFKsLmx6G2+0v2Z4c+ngMblS3O1EndJIxl1Esq9QN8XF\/W9BK0pSgUpSgUpSgUpSgUpSgUpSgVprWfzkv95J\/nNblrTesHzkn95J\/nNc+fyG2H5Q8\/8AOCoztLxPlLivvt9w8\/yqWnX5wVQ+1TMdVIPAYgfDFTb6yapjruV7zqOnU3Ei2x8\/M\/RWRDrh0yYD0Pj8Ppr7o+zwNuZJjfyF7fX41bezvAOGBwHMsrgg2kOKfDFQLj0N62tkrCtMVrM7Q9kNRNphqmYL3M1Vgc2XqL+W3T0Na84rEczexubj6d\/31vrUdp4kcQYXJsLXAtcbCxrSvGtPizobjF3X1sGYD7hWWO+5aZaarpX4z4DY7f4vS1eofZj\/APlaP+6H4mvMGohttXo7sBrXThehC2N4Re9\/M+tdMOVeaVB\/8Wl8k+o\/nQcWl8k+o\/nUmk5Sq2O0f9uLrbx6+XWu88WlH6KfUfzqImJNSnaVAHjEvkn1H\/VU3p3LIrHqVBNvMipQ7KUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQKUpQK1Nqoe+5t\/1JP8AO1bZrXr6W97dS8n+dqxzRvTXEqk8Pzw+j91UvtBpA+od0\/WAN9u8tlJHptWydRp\/n\/pH7qrPaTg5SQyqt0a52FyrHrsPPrf1NYUnUt5rEx2x+GaBJu6zFT5ipjX8Gi0sMZUAsr3VhsST3jck7jbp+dVrR6ixBBtVm4gyzpGrAsB62Fz1ufuqLbif06KREx+1y0Om00xMyhS0gRpALd4r7t\/G4rWfb\/TKNXLj0LBreRZQSPvv9NbC4KyomKxIgB3xa5+m6i\/gL1Qu2DhtTI3qn3KoqMc\/cjNXVVT1WjG5I6W3+it7dhkvwzRf3I\/E1qLVw5K4\/sg\/UK3N2Ejtw3SDyit95rqxztw3rpIGKq72p4osSMvNCNYWRd3kJ6bW2UH7\/LxnOP68aeFpCCbCwA8T+6tHx8RebXPKFyZlJCjYbFRsT02qMk7+1OOvy7Y9NriSVMmLE55HoD6E2vatk9jOPpNp0jmYDUoMWuRuQSB9JH4VFLrWMQKRsxJsRcDEjY3NUXiZEOtdrgbq4sbkHbIehuCfqrOJmGs0iW8THVg0o7i\/sj8Kr3CuIDURJNiVyANj5EXH0EEH6asUHur8B+FdMTuNua0anTr4hHI0UixOI5SjBHKhgjkHFip2NjY2pw+ORYo1lcSShFDuFxDuAAzBR7tzc2rIpUqqFLw\/VcuWALNy2aTUh8jfIO9tON8hd+XKPAguOlhWZxTjGqjyFnFjMpcoqrd9VAmlCuykFjFIQLBtxuCRY3C9RfGOMRQsscqsQ6SvsoK2jCko1z1IO3gbWuCRcKxoeOTtNCh1LFAY+Y2C3LvqNRFyXHJv1jSMMBGNma5vt94B8tjighOUKx6aJVXktIO7pRcsFTaRZ7jEyC4QALdr1Z34hpUbcxhk2Hd3F2VMU237zopC9C6jxFd83FYVjWRnAR\/dO5y7pfYAX91WPwBoOHAZpHgVpQ4fvXzsGNmIDWwSwIsQCqmxFxepCsFOLwkAhwQWCA2NsjjYE22vktr9clte4rpTj+nPSQFd9\/X5rEAHdi3OjtYG+a+YuEpSo\/UcYjWw3LExgCxBIkdEDDIC4BkW9ulx51yfi8IZkMgyXqN+vc7o23bvp3Rv318xQZ1Kj241pxa8qgFS197WAZjc+BxRjY72VttjXH\/jcN7ZG1ib2N7hlXDG2WRyBAtuKCSpXCGVXUMpDKwDKwNwQRcEHxBFc6BSlKBSlKBWvtZxOGO4eaNTk91ZwD77eHWtg1qTX+ynUPLLIJ4QHkdwCH2DMWsdvWq2ryXpbi6dX2i0wlz5qkXvcBj5eQqp9re3OStFphYHrIRY\/BR4fE\/V41ZX9j+rP\/cwfVJ+VYU3sR1Z\/wC6g+zJVK4qxK05JlSE16hrA7efh9dTPD+LFCD1AqfPsR1X9ag+zJ+Vff4k9Xa3yuEfRL+FLY4leuXj8uer7bII7AXfYb28QTuOttj\/ALNV52Mt28Sb363NWRPYzqwqr8p09wb3xff\/AHvUlp\/ZXqlFvlEP1P8AlUVw1hOTNNp9U8J71+hW33VuTsSv\/wDP0v8Ad\/vNUuX2Wao9NRD9T\/lWwuA8ObT6aGF2DMi4llvYm53F6vWnFla20Z20lSPTO7YgbKSTjt5XsSRt0FaO4QQdUOUC2A3tsLdN7+d7D1+FSPtE7YTaiZ0RyNOGKhRaxttc+tVrgHHDpnBCgqzoZbi5aMXugB2GzE+pAqLY9zMpi+o02pwxiFtYbk2APeJY3ta3Xeqvx\/hS6fUESklpVyysNiT3gpPlbrttauD8W0sWpcxyyfJVGaxxk4M4GyAX7t2N\/LbpVX432hl1fK51i0YcAjxVmDAH1FrX8bDxvfOMW2lsmtN49g9WzRKgA5YUW8wd9r+IsB8KvkXuj4CtB9ge28i6iGKRVwYrGT9y2Ftjcit+p0HwrTHWYrqWWSYmdw5UrH4gJDFIISgmxbllwSgexxLAb43te1OHiQRIJiplxXmFAQhewyKg743va9aM3zU6CKQ3kijcgWBdFY28rkV0cW4PFqAVlUkFGj2JFgxRrgjowaNSD1BFVKU6vlywg6jdpNSJe\/cKrv8AydXHevzFRgvQxuVGwqQ1\/aGeO6lCCDMCeU9v+Zhi04Vj3WdopLhQTkfDYigmjwKEvmQ18sgMjZWMiTMQP7UkasfgelzXJuCQ93ubqSchsxukkfebqQFka1+l6ruj7QzNLFG0i49zN+WQAXmnj5Uh\/wCnJ82iAfrlx5Vw7L67W4aWJkACwQBhNzQ7j5KGZssDZxN3DkdgrXFytBPzdnIGZWIa6urjvbZKIQpt6ciP6j4MQcThfZNI41jdssbYFF5eNjCwbqbtnAjXJPla21Yx1upTVOApJZk+awdkI5JLFZyAoAZQOg32Iu6246TimrdoVFyjvGHlOndMbwaiSRMGPds8cS5G9ubibsKCY\/g\/DzOYci\/dNy291aJxv1PehQ\/X0vXXN2cidpGlLOHbIKT3UPzRBC9CcoUO+3Xbc348C1WoZjzrYsmQtGUxPMdcbkm\/dCn43PQgCboIXWdm43RkBZckZdvdyMbxCQotgSFci2w6eQI5zdnYWByDMxORZjkS10sxuLGwRRuOgqXpQcIYwqhR0UAD4AWHSudKUClKUClKUClKj+LmL5sSqWJYhAAScsG8undy3oQkKVrH2hOflMN735Iv4fpGtO9sO00krmGNysKmxxJBdh4k+Q8B9Pwtx62rNu9PWFK8ydkOxjahBLNM6oegVje1Y\/G9JPwxxy52aNzcE9QRfz9D8CDWUZKzbi3tgyRTnMdPUdK0l2f46NRAHv3h3XF+jjrb0OxHoa5a3Vnff766YxRMb25pvr4brqO49qBHBLIdgkbsT8FJrQE+rOdrn66whGWPU7+tc+S0Ulpj3dWpJyRY+J+873\/Guq1fJT0+Ncqss+Bj08Otc0WuA61kRja9BkcLlxljYfoyI31MDXrYV5I4ZHlJGo6llH1kCvW4oiX2lKUQVF8Z4jp0Ih1ADCRJHCshdWWIBmB2IvY3APWx8qy9ToIpDeSNGIFrsATby3rF41wOPUqRIXF43jBQgFcijZgkHvBo1I8OtwaDqI0KNcjSq8IAueUrRAnujzTvPt03f1rOl4lCqLI0saxtbF2dQjXBYWYmxuAT8BWC3Z2MvmWk2bNVutkJmjne3duQ0kSk3JtuBaux+AxEIO8ChJyFrm8csdmNtwFla3ragyE4pAcbTRnI4rZ1OTAgYjfc3IFvUedcE41pzfGaIgA5MJEIW2Gzb7G0iH\/EPMXw5ezcZYNzJRZ0kxBXEsg04W4K+HyddxY95999sLhnZIJEqSyMWTHFlxuCp07KxJXchtMhAIIA7u4AoJqXi8ItaRWJMYsjKx+cZVRrA+7d1N\/I1zbicIZkM0YZBdlzXJR3dyL3HvL9oeYrBbs8hk5ryyu3dIyKWGLwvtZBYFoVJHTvNa164v2fykldppRm2ShCgCX5N\/0bm\/KsQSQQxFt6DObi+nG5niAxV\/5xPdb3W6+6fA+NcNRxvTJlnPGCpUMMwSubKq5AbgEuu5\/WFYf8GIuWseT9woVY8sm6RmIbFMTdCbi3jtbau2Ts\/GbEM6kXxK4DE5QMCAVtsYEsLW67eQSUGoR74MrYkqcSDZh1Bt0I8q7axNBoBEZCGY5uXIOICk9cQoAFzuT1JJJJNZdApSlApSlAqN4ukxaAQsq\/OHMsuXcwe4AuN8sakqiuO66OEwvIxC5kC3iTG+340gav9s2smgbJ3U5JjEVXEgkm99zcjretHRbkedx1+NbT9vPEnlfREjFGhaQftMwFviAB9qtb9ntIJtTHGb4lrtbrYbmptZEUmbahtjhPGtNCi6cZmSwAAW9yfgTb4Gq9224vp9QrxrkGW9iQbZDb8xtVu0ei0sEoayK21idrDYXPqTYVUOMQQSNqTYGzsQy\/2t9rev4Vw148tvZzReMfGZhAdiOK8ubAnuyDH\/EN1P3kfVVy10\/WtWaBG5kYXqXFvoO\/4VsLWTXrtm+nixWJdM8gJBrK4Xa+\/SojTv36l+FrckfGuTNLr\/jx2pvyOTe8cvTYCNjdrjbpsOu\/pXwaKX+ik+w35V7CpXW59vH66OX+ik+w35VLcC4M886xMjqpDktiRbGNn8R17treteqqUNvKvZjh8r6nTry3BMsfVWFu8PEjavVIr7SiCldeonWNGd2VUUFmZiAqqBcsSdgAPGmnnWRFdGDIwDKykFWUi4YEbEEeNB1alpb\/ADaxkW3zZgb\/AEKawONxu0kAQTDvhmkjYhVVWQlGQGzZ+7uCAuZuDYHuj45Ecd7BhKbtYBRC2LljfYXro1\/aWCNc8g6kXDKy4luYkOFybA5uAfKx8qCKi0OpCAK02SMcGZmBbuqWZxJI1iChUfokue6AcqkXj1LJpuX82VZw+eUgwCSKhYZqxJ7h3JIJ333rL13GooZI0mYJzEkcMzKFHLMYKkk9fnL\/AAVq+rxqH9N1jPMeMB2VSxRghK77i5A\/xDzoK\/8ALNbDCC4buxxKc8LbpCC\/MJJ5nNaQEtdQFuRsC3bFrtcyx8scxGUZS2TZmvEbDu5KjWkLWsy9L3FT54tBdxzo7xgl++vdANiW32sdvjX3hXEU1CcyM3TORAQQQTG7RkggkWupoIrTyax5MTnHHzd2IjZgmMt1BxtbJYt7E947nqPvZ1tUBEs\/Mb+TrmzhARMMQ2RUd4k5WINrL0NwxsFKCpKNeYSCXU4KAEEeQIhgYkFr3Yy85dzb8T91kmuZmwjeyOpTMx3IHPVrWxBuvLYBtrsASO8FtlKCI4LJqGeXn7LkcBYdM3xNwPGPAkb2N+nuiXpSgUpSgUpSgVSvai9otNuB\/KBuen81LV1qt9skjLaIyFQq6kN3uhtFNtTW+hpf2sNG+m0gSQM8YbPcm2RHdG3n+FUvsRrlh1SM9grDG58CbWrbnti1mmgeGZVXmOjd0AAt7uJt4Drc+laHmfJiSBcknYWG\/kPAVN67jRW01tybm4nrZFDsgSxNrtll0OyhR0+nxNU7XaspFIWAF+gUHqTt1qK4d2z1MScu4dfAt7w9L1gcR4nJqWANhc+dgK5q4rROnbl\/k1tG49dvZaQLNv1xIsBfr5AePT66tGoasngPCo4IAQ4cv3s190+i+g+vrWHrWF7ggj0q9571py1r1tj6Vu\/UiuraJJHUXYBiAfO1Ruk9+svXEqj296xt9VYZG+Lb0\/SlK7HKUpSgUpSg69RAsiMkiqyMCrKwBVlIsVIOxBHhTTwLGqoihUUBVVQAqqBYKANgAPCuylBA\/wAF4wLoxjkxnHMQKr\/PNkWyG9wem9IezKqBeRiQxe9h1M8eoI3ubZIB1JsepO9SupmkBskeYt1yC\/RY1G8f1EisAryonLkIaGPmEyjDBSMW8CxAtv8ARQOK9nVlN1kaO8c0bWAbJZ+Xme9ezfNix6eh6Vwn7NK2YEjBZBIkgsDlHI2RUE7qRuMvJj42Ix5+MatL3hBuD7qOcCskCMzHKzjGV2AGO0R3O5GTq+I6hY42WNSxieSQBHYEph82tiCpbJrXva3Q2oOuTssrG5la6lzF3V7hknj1Rv8ArjmRJbp3QQbk3qV4VoeShTIuS8khYgDeR2kIsPAFiB6AdetRUfE9S7lFRVu+IZopbRgGUd7vASXCKbqQO8PNSeWr4rqeSskcNmMRlKurNciMPygFIKsSSu4v6HpQT9KrOq47PFbOO+PNzIidUKoZcXDljgO4pIIbZhvuK64ONahlyIAN8WPKktF3xbmRK5bLEg2y6MDsL0FqpVbg4pPJqAmDiNZF73KdLgrqVYG5NxeONgdvfXbcX6249OebigIVpEBWGRsCk3KUN3wHyW7XUjHE9elBaKVVpON6zEuIVFygVWSTa8Cytm19gZG5dwvdxPvE4jsn4nq\/1Qq82wPJkYiNdRyTl3t8ks+QAsLncbgLLSlKBSlKBWtfbvxFoNFBIoBYagAX6XMU25rZVQnavstp+IRLDqgxRXEgCsVOQDL1HoxpE6HkXiGvkncyTOzu3VmNzt0HoB5Vsjsx7MYNTpoZ2mmUyJkQoSwPpt0rZP8AEvwr+jl\/8zVzj4YYA+l06pyIwIwZSSQCL4g3361jntMRExOlLdKIvsegILc+bEfpfNVgj2d6LmBRPqAp\/TIjIJ8hYffV+j4eVkWzXWPvY3NmPiTtYL610yKpeSRLBb5YL7gPpWP1p11KkzOla\/gLDCVEer1I32BWP8MbW+NfdR2RQ375UXHgt28yBVilLMVUeRJJJtc\/vFWDs7w9McyxslwbbE+hI8NulTW979WlNJtM9KDouwsbDISTnewCx3J87bVI6vhcEcDacwSlpWU82RMZFtjYLce7sfrNbMXVotlUAD0sBX3UKsilXUEevh6jyNX+lE+ztvE3r5KscU7cyxAWhQ3\/ALRqNPtNm\/q6fab8qhu1SFZWU7lbj4jw+4XqvhR438b\/ALqc7GobEj9oUh6Qp9pqyV7cS\/0SfaaqHw0jpf7\/AIVLEVnOS35NNm9n+JHURcxlCnIiw3G3xqSqv9iP+WH7b\/jVgrqpO6wqUpSrBWDxHiYiIXCSRirORGFJCLbJjkR4sNhdj4A2NuzVcOhkIMkUbkCwLorEDyuR0rr4hwxZSCWdSFZCUbElHtkp+yNxZh4EXNB8XjOnN7SqSADa++5UAAeJu6Cw376\/rC\/2fi8CKrvKio4yVidiotdr+QuLnoL1jars5A4symwysNrC7xSe6QQbNClgQRsRuDXfJweNlVTeyxtGLWXuthlsoAB7g6AUHIcXgsDzFAOVidh3MsgSdgRg9wd+43ka4rxqHc57Da\/9rJlK4+9kCrX28D5G2DxDstFJkQzK5WUKSclVpedk+J\/v32BF+7f3RbnpOzyqq5Oc1JKvGAmO8nQG4JtK4JNycietBmScUizWK+TO\/LIt07kr3IPVSInFxe5B8jbr03EdKissbIFjJDKg2UhmVtlHgysDboVN+lcNN2fhSUzDIyFg9yfECYAdN9p5Otz03sBWOvZeMq4kd3yeRvCyrJLJKUCkEEfOeN\/dUi1hYJBuMQAsOavdIDb7AkZbnoO6QT5AgnqK6l41pgcVdSeZyyEBNpC0gN8R+ukgJ\/WVh1rhL2ehYKCPdJIuFbqFUizqRYhF8L7dRXYOCxg3BYHLMEHx5jyHqOhMjj4H6aCSpSlApSlApSlApSlAqk8bYid8E3DBiWNgTYfcKu1a77RaCeTUago8cYTFhIzYlTYEbje\/X03rDPTlEQrYjkIfcouXgoJufK53I8akBwRCovcnr5evQVCcB1ILI0hubHc3O53JvVuTWp51zRWNs+lTmhVJP0rDe5NcoeMBYJ1W7Y96yje2w\/G311YsYpVewJIvuCLGqby+VqihtvdSL3tkNunrarxTra+L7bxLFTtSyRpJi7KxxG2\/7PxHgfSrNo+MSsokt3T57EEW6ioGHW3UxCNdiDujkHffbGw\/aqW12qVYWZsbWti3Rr7BPpNvoBqKR11L1clIjuYVztZrxJICuxsMjt1AH17bVBg38\/8Ad\/301TMX3JuSSfXf\/wC106dr\/R\/9q7hmO+mfpxa1tv8AfTapVJhbc7+XWovRgk7msxyB1HWqShs7sIf5KP22\/GrFVd7BNfSA\/wBtqsVdlP6wpLH4jzeVJyMOdg3L5l8M7HHPHfG9r2pw7m8qPn4c7BeZy74Z2GWGW+N72v4VkUqwoU8+sViFM\/cz0SmzsM5i7Rapr+\/go0wz8OZLc9al34jKkojXK2cpbJJJMo0VcQrFv5xmIsvQgOfDezVg67iscTojlrv0spI9+OO5I6d6RB9PkDQQXDOMaqVrBRiHfcxMC6LDBIqg5Ygl5GXIXHdI6gmsLT8Y1IDTElrrpywEEqH3JmeOKNzvLniLEjbu+8KtT8Y04YKZo8i\/KADAnmWY4G3RrK2x8q+aHjEEsInSROWQpLFl7uQBCtvZW7w29aDPpWEvGNOVLCeHEWu3MSwuLi5vtcAn6K5HiMWZQSIXBAZQy5Le9she46H6qDLpUdPxvTqhfmowCNJZHViyoGLFQDv7rfUayZddEriNpEDkXCFlDEbm4Um5Flb6j5UGRSsMcVgsDzorMGKnNdwnvkb7hbG\/lauMnF9OouZ4vdLjvrcoAxLAXuQArG4\/VPlQZ1Kx9LropP5uRGuobusCcTuDbyN6yKBSlKBSlKBSlKBWlu3y\/wAsn\/aH+Va3TWme3Y\/lk\/7Q\/wAq1TJ4rZ2dnJQ0QFtx41YOHa0KxzF7VWOy2RQhRUlxHiLaTlyyKrRE95SbMyG4JUj9IG2x6\/fWMV3LLXaWjMjB3hjCGU4HEk7fr42G\/wAPOoyXQLE4fVTLFGWUebNkT1A90HFtz5GoPiXtFlJtFGsa38NyR5E+N6qfGuOSTQqrsScizE+Oy4\/i1XriiPZ2tWO2zOMQvDqGIRcHbutjtv4X8\/Tx61m8Q4QZdK+I3ADISbXYEX9NwSPLpWt9NxzUzHT4TNnGgiVctsg3dZgdmDDG9+uNbI7WcdH\/AA3mMOVI7RoVO1nyUkA+K2BN\/KlcURMuu2ebV1pROIRGPISAhjcWsetiNvQEnp5106WPYi3hfe462rrh48iyKNSskigNkPdbKyKu9zexDG+18qytDqY5fdJ9QdiNunla4rPJTjHTOttwydIpvtt5\/Dpbb664SyAXUgnbwt16AVl6eHpe351i8TBHjsATb1A2rGJ7aabO9nBPyMXNyJJBf6atNVn2drbRJfrk1Wau6n9YZT6UpSrIY2p0Mchu6BiBa58qw+L8Cj1DxyOzAxggWCeLRve7KSrAxLZlIIud72IlaUEPB2fRGVhJJdSmN8O6qc0LH7u4tM4ubncb33rnpuAxpGIgz4jk9cb\/ADGATwtvgL\/T0qVpQQep7MxuHAllTMWbAqLjKdiDdSCL6hjY\/qr5G+Npuy+8qyvlG7OQFO9mMtl6d0BZWuATdu9t0qy0oILXdmhNbmzztZGS14wO8k0ZbEJYNjMdxa+CeW\/brOCcydpTI6qUiXFMR3ozMQxYqSLGUEWI3Xe42qYpQQidmowrKXkYsGBYlcu8UbL3bXBRet\/W9ck7NxDxbe17YqCQZyTsvUmdyT4mx87zNKCP0HChE+fMdiVVSDgAxAUZsEUAvZQL+W3SwEhSlApSlApSlApSlArU3a7hsr6yUhCVLjpbcYre162zWJJw6JmyK3bzufzrPJWZjpW0TPig9mNI7h0ZcFU7Bdhbbx8a157ROJLJqmij\/m4fmx6sPfP2iR\/hr0GmgjHRbfSfzqAf2e8NJJOlUkkkkvLck7knvVFMcx6itdPPUTXHwrHLbV6MX2ecNHTSr9uT\/VXz+Lnhn9UX7cn+qtFtPPeg1fLOVgdivwuNmH9oGxB8xWTxTjcuoWJJGukQxRfIE9T5nwv5AVvv+Lnhn9UX7cn+qg9nPDP6ov25P9VDTzqu\/wDv6q79NOUN1JBt1FehB7O+Gf1Vftyf6qfxd8M\/qq\/bk\/1UTDWPZ\/WiVL3GS7MPI+B+B\/Os3VQ5jr4\/H\/5Wx9L2G4fGck04U2ts8nT7VZn8GdL\/AEI+0\/51z2wTvpfmw+wRvpR4d9rbW22tVjrH0WiSJcI1xW5Nrk7n41kVvWNRpWZ3JSlKsgpSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlApSlB\/\/2Q==',width=400,height=400)","f4bad42d":"sns.pairplot(df, hue='bloodstatus', palette='coolwarm')","c91dc213":"g = sns.pairplot(df, hue=\"House\", palette=\"husl\")","b3d73234":"warnings.filterwarnings(\"ignore\")\nsns.boxplot(x='Id', y='bloodstatus', data=df, palette='rainbow')","7895e935":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('House').size()\/df['bloodstatus'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","7820835c":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","d89fbb30":"plotPerColumnDistribution(df, 6, 3)","c3f9723b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQwli6k4TUMtZXuR7kRUL0wuBsxXhsTNj6RvFfSLfJYRGwYisiM&usqp=CAU',width=400,height=400)","48925920":"# filling missing values with NA\ndf[['House', 'bloodstatus']] = df[['House', 'bloodstatus']].fillna('NA')","67d7288d":"fig = px.bar(df[['House','bloodstatus']].sort_values('bloodstatus', ascending=False), \n                        y = \"bloodstatus\", x= \"House\", color='bloodstatus', template='ggplot2')\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\nfig.update_layout(title_text=\"Harry Potter\")\n\nfig.show()","346fe133":"fig = px.parallel_categories(df, color=\"Id\", color_continuous_scale=px.colors.sequential.Viridis)\nfig.show()","a0291236":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSZ8XDPKCkDaXr1wHy-_U3SOV_TTgM9uUsYjKoqOyDULf21-hD0&usqp=CAU',width=400,height=400)","e3835efd":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.bloodstatus)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","de538109":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT-MGd4fw5-ZGFXFjKUu8KmOEmSAlwseh75I4MF39NWCdJWiIb9&usqp=CAU',width=400,height=400)","67937433":"hp-lexicon.org","28cf8328":"Sometimes people aren't pure blood though they are very engaged and commited to the cause. And friends, we must NOT forget that we are nothing without family and friends.","77bc76df":"slideshare.net","d53fa0e9":"youtube.com","018a0f0e":"Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","eba57897":"How can I mend that? I'll be glad to read something about that.","33f76c4f":"#Thank you Joanne, aka J. K. Rowling.","76e51804":"imgur.com   Maybe she's not a genius but someone that must work harder to prove her worth.","7e911c39":"icollector.com","ca9163fc":"Harry Potter is a series of fantasy novels written by British author J. K. Rowling. The novels chronicle the lives of a young wizard, Harry Potter, and his friends Hermione Granger and Ron Weasley, all of whom are students at Hogwarts School of Witchcraft and Wizardry. The main story arc concerns Harry's struggle against Lord Voldemort, a dark wizard who intends to become immortal, overthrow the wizard governing body known as the Ministry of Magic and subjugate all wizards and Muggles (non-magical people).https:\/\/en.wikipedia.org\/wiki\/Harry_Potter"}}