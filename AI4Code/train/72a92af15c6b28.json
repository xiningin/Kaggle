{"cell_type":{"74852247":"code","f9664452":"code","24c9bde6":"code","30c5f3aa":"code","4ea1686c":"code","a97da793":"code","54d85ec9":"code","ac1d6453":"code","6932f2bc":"code","1143153e":"code","1c912079":"code","eca5037c":"code","06ff65e9":"code","78ad371c":"code","1173487e":"code","b133c5f3":"code","89c6beeb":"code","76c3bc9b":"code","4e95fbd2":"code","91689c62":"code","67d0e1c6":"code","6b040a33":"code","90085167":"code","29ad9844":"code","909fd901":"code","b3529f7a":"code","5712be4b":"code","c086a072":"code","db87355e":"code","a39b1a79":"code","c3dc83db":"code","8d86f676":"code","8d8d85a0":"code","b5039cb6":"code","bdfff08e":"code","53663c36":"code","dc00f9b5":"code","4ccc03ce":"code","6b3babe3":"code","086fa194":"code","10f65861":"code","3ab06234":"code","e816e8c9":"code","faa97428":"code","4f421383":"code","94d74408":"code","fcae043a":"code","1af60cd3":"code","4519e69d":"code","64590bc3":"code","d83ef13d":"code","81d016c3":"code","0f2ee7ec":"code","9f548671":"code","650d5eb3":"code","122eebd4":"code","f53819b5":"code","2db52894":"code","06b540fa":"code","8ba25ce1":"code","ca2d3d89":"code","a009f1e8":"code","d8d9032a":"code","7a04feb9":"code","96fc406a":"code","6a8e302a":"code","1f4ec062":"code","a0c8a88a":"code","c2ab5356":"markdown","b00522df":"markdown","2b30f2f4":"markdown","e5bcd89a":"markdown","a78bd5b8":"markdown","fbb2dea1":"markdown","4d67fe0c":"markdown","f3533651":"markdown","45747967":"markdown","03287af9":"markdown","2990e37d":"markdown","0e742db3":"markdown","7ad40c24":"markdown","0a30691b":"markdown","b08580d7":"markdown","38fbdf12":"markdown","497c2a8d":"markdown","460a8c17":"markdown","a9c3f6b4":"markdown","39e779ed":"markdown","185aab68":"markdown","6c22a290":"markdown","159003cd":"markdown","7c1cf5dc":"markdown","15b45a72":"markdown","162807bb":"markdown","95560796":"markdown","f54ddcad":"markdown","d2e8c46b":"markdown","b67fd3b5":"markdown","28679de0":"markdown","7e86f372":"markdown","9898bec6":"markdown"},"source":{"74852247":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f9664452":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\na = 5 #integer\nb = 7 #integer\nc = 4 #integer\nd = 10 #integer\n\nvar_sum = a + b #Adds our values a and b\nvar_subtracts = d - c #Subtracts our values d and c\n\n#we use the print () command to print our values\n\nprint(var_sum)\nprint(var_subtracts)","24c9bde6":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 1:\na = 100\nx = 500\nd = 400\ne = 600\n\nvar_transactions = (d+e) - (a+x)\n\nprint(var_transactions)","30c5f3aa":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 2:\ns = 10\nd = 40\nc = 50\na = 20\n\nvar_math = ((s*d) \/ c) * a\n\nprint(var_math)","4ea1686c":"#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 3:\nx = 4\ny = 5\nz = 8\n\nvar_math = (x+y+z)**2 #'**2'it takes the square of the released value.\n\nprint(var_math)","a97da793":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n\na = 10.2 #float\nb = 9.8 #float\nc = 20.5 #float\nd = 34.2 #float\n\nvar_sum = a + b #Adds our values a and b\nvar_subtracts = d - c #Subtracts our values d and c\n\n#we use the print () command to print our values\n\nprint(var_sum)\nprint(var_subtracts)","54d85ec9":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 1\n\na = 10 #integer\nb = 2.2 #float\nc = 100 #integer\nd = 14.8 #float\n\nvar_math1 = (a*b) + (a*c) - (c*d)\n\nprint(var_math1)","ac1d6453":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 2\n\na = 10 #integer\nb = 2.2 #float\nc = 100 #integer\nd = 14.8 #float\n\nvar_math2 = (a+b)**2\n\nprint(var_math2)","6932f2bc":"#float: We can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)\n#integer(int): We use it in definitions of numbers that are external to certain (decimal numbers).\n\n#EXAMPLE 3\n\nx = 1000\nc = 100\nd = 10\ne = 10.5\n\nvar_math3 = ((x\/c) * d) * e + 1000\n\nprint(var_math3)","1143153e":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\nname = \"john\" #string\nsurname = \"jackson\" #string\njob = \"doctor\" #string\n\nprint(name, surname, \"is a\", job)","1c912079":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\n#EXAMPLE 1\n\nnumber1 = \"100\"\nnumber2 = \"300\"\n\nprint(number1,number2)\nprint(number1 + number2)","eca5037c":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\n#INCORRECT EXAMPLE\n\nnumber3 = \"100\"\nnumber4 = 300\n\nprint(number3 + number4) #We can't do the aggregation of the post with an integer value.\n# TypeError: must be str, not int","06ff65e9":"#string: We use not as a number, but as a variable we assign to our texts or texts.\n\n#EXAMPLE 2\n\nname1 = \"Alex\"\nsurname2 = \"John\"\nage = 19 #integer\njob = \"Student\"\n\nprint(name1,surname2, age, \"years old and\", \"He is a\", job)","78ad371c":"#usage: dir(class) -- we write whatever class we want to call the class\n\ndir(str)","1173487e":"#usage: dir(class) -- we write whatever class we want to call the class\n\ndir(int)","b133c5f3":"# It shows which variable we use our data. usage: type(class)\n\na = 10 #integer\nb = 50 #integer\n\nx = a + b\nprint(x)\ntype(x)","89c6beeb":"# It shows which variable we use our data. usage: type(class)\n\nname4 = \"angelica\"\nsurname4 = \"john\"\n\nx = name4 + surname4\nprint(x)\ntype(x)","76c3bc9b":"# It gives us information about the text length (s) of the variable we have defined. - len(class)\n\nx = \"100\"\nc = \"he is 20 years old\"\n\nlen(x) # \"100\" converted us to 3 because its value is 3 characters","4e95fbd2":"# It gives us information about the text length (s) of the variable we have defined. - len(class)\n\n#EXAMPLE 1:\n\nx = 100 #int\ny = \"20000\" #str\nz = x + len(y) #int + len(str)\n\nprint(z)","91689c62":"# As the name suggests, a method that allows us to change a certain value. -- variable.replace(\"value\",\"new_value\")\n\ntxt = \"He is 10 years old\"\nx = txt.replace(\"10\",\"20\")\n\nprint(txt) #default\nprint(x) #replace","67d0e1c6":"# Converts the first character to upper case -- variable.capitalize()\n\nhigh = \"hello world\"\nhigh.capitalize()","6b040a33":"# Converts string into lower case - variable.casefold()\n\nhigh2 = \"HELLO WORLD\"\nhigh2.casefold()","90085167":"#Returns true if the string ends with the specified value. -- variable.endswith()\n\nvariable = \"hello world\"\nvariable.endswith(\"d\")","29ad9844":"#Returns true if the string ends with the specified value. -- variable.endswith()\n\nvariable = \"hello world\"\nvariable.endswith(\"a\")","909fd901":"# Searches the string for a specified value and returns the position of where it was found -- variable.index()\n\nvariables = \"hello world\"\nvariables.index(\"d\")","b3529f7a":"# Searches the string for a specified value and returns the position of where it was found -- variable.index()\n\n# EXAMPLE 1:\n\nvariable2 = 10\nvariables = \"hello world\"\nvariables.index(\"d\")\n\nx = variable2 + variables.index(\"d\")\nprint(x)","5712be4b":"#islower: Returns True if all characters in the string are lower case\n\nis_lower = \"this a text\"\nx = is_lower.islower()\n\nprint(x)","c086a072":"#isupper: Returns True if all characters in the string are upper case\n\nis_upper = \"THIS A TEXT\"\nx = is_upper.isupper()\n\nprint(x)","db87355e":"#lower: Converts a string into lower case\n\nlower_text = \"LOWER TEXT\"\nz = lower_text.lower()\n\nprint(z)","a39b1a79":"#upper: Converts a string into upper case\n\nupper_text = \"upper text\"\nz = upper_text.upper()\n\nprint(z)","c3dc83db":"#strip: Returns a trimmed version of the string\n\nstrip_text = \"xx ddarkk007 xx\"\ns = strip_text.strip(\"xx\")\n\nprint(s)\n\n#lstrip: Returns a left trim version of the string\n\nlstrip_text = \"yy ddarkk007 yy\"\nl = lstrip_text.lstrip(\"yy\")\n\nprint(l)\n\n#rstrip: Returns a right trim version of the string\n\nrstrip_text = \"zz ddarkk007 zz\"\nr = rstrip_text.lstrip(\"zz\")\n\nprint(r)","8d86f676":"#center: Returns a centered string\n\ncenter_text = \"centered string\"\nx = center_text.center(50)\n\nprint(x)","8d8d85a0":"#A list is a collection which is ordered and changeable. In Python lists are written with square brackets.\n\nlist1 = [\"orange\",\"apple\",\"watermelon\"] #create a list\nprint(list1)","b5039cb6":"#Is list1 really a list?\n\nprint(type(list1)) #ok this a list","bdfff08e":"#You access the list items by referring to the index number:\n\nlist2 = [\"first\",\"second\",\"third\"]\nx = list2[0] #we called element 0 of the list\n\nprint(x)","53663c36":"# Let's call the element at the bottom of the list\n\nlist3 = [\"first\",\"second\",\"third\"]\ny = list3[-1]\n\nprint(y)","dc00f9b5":"# You can specify a range of indexes by specifying where to start and where to end the range.\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\nx = thislist[1:4] # 1.banana 2.cherry 3.orange 4.kiwi(not included)\n\nprint(x)","4ccc03ce":"# Reverse the list\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\na = thislist[::-1]\n\nprint(a)","6b3babe3":"# To change the value of a specific item, refer to the index number:\n# default list = thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"strawberry\"]\nthislist[0] = \"watermelon\"\nthislist[1] = \"apple\"\n\nprint(thislist)","086fa194":"# EXAMPLES\n\n# EXAMPLE 1: Create a list!\ncreate_list = [\"1\",\"2\",\"3\",\"4\",\"5\"]\n\n# EXAMPLE 2: Select the 1st element by synchronizing the list values to c\nc = create_list[0]\nprint(c)\n\n# EXAMPLE 3: Print from 1 to 3\nprint(create_list[0:3])\n\n# EXAMPLE 4: create_list query your type\nprint(type(create_list))\n\n# EXAMPLE 5: Reverse a list\nprint(create_list[::-1])","10f65861":"# To add an item to the end of the list, use the append() method:\n\nx = secondlist = [\"ddarkk\",\"yellow\",\"green\",\"world\"] #default list\nprint(x)\n\nsecondlist.append(\"hello\") #append hello list\nprint(secondlist)","3ab06234":"# To add an item at the specified index, use the insert() method:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(1, \"orange\")\n\nprint(thislist)","e816e8c9":"# The remove() method removes the specified item:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)","faa97428":"# The pop() method removes the specified index, (or the last item if index is not specified):\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop(1)\nprint(thislist)","4f421383":"# The del keyword removes the specified index:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist[0]\nprint(thislist)","94d74408":"# The list failed because it was deleted\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel thislist\n\nprint(thislist)","fcae043a":"#The clear() method empties the list:\n\nnew_list = [\"green\",\"yellow\",\"black\"]\nnew_list.clear()\nprint(new_list)","1af60cd3":"#There are ways to make a copy, one way is to use the built-in List method copy().\n\nnew_list = [\"green\",\"yellow\",\"black\"]\ncopy_list = new_list.copy()\nprint(copy_list)","4519e69d":"# There are several ways to join, or concatenate, two or more lists in Python.\n\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist3 = list1 + list2\nprint(list3) ","64590bc3":"# Use the extend() method to add list2 at the end of list1:\n\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nlist1.extend(list2)\nprint(list1)","d83ef13d":"dir(list)","81d016c3":"# Create and print a dictionary:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nnew_dict","0f2ee7ec":"#Is new_dict really a dictionaries?\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nprint(type(new_dict))","9f548671":"# You can access the items of a dictionary by referring to its key name, inside square brackets:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nx = new_dict[\"model\"]\nprint(x)\n\n# There is also a method called get() that will give you the same result:\n\ny = new_dict.get(\"year\")\nprint(y)","650d5eb3":"# You can change the value of a specific item by referring to its key name:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nz = new_dict[\"model\"] = \"New_Dictionaries\"\nprint(new_dict)","122eebd4":"# To determine how many items (key-value pairs) a dictionary has, use the len() method.\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nprint(len(new_dict))","f53819b5":"# Adding an item to the dictionary is done by using a new index key and assigning a value to it:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nnew_variable = new_dict[\"color\"] = \"red\"\n\nprint(new_variable)\nprint(new_dict)","2db52894":"# There are several methods to remove items from a dictionary:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nnew_variable = new_dict[\"color\"] = \"red\"\nremove_variable = new_dict.pop(\"color\")\n\nprint(remove_variable)\nprint(new_dict)","06b540fa":"# The del keyword removes the item with the specified key name:\n\nnew_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\ndel new_dict[\"year\"]\n\nprint(new_dict)","8ba25ce1":"# Convert a dictionary to a list\n\nz = list(new_dict)\nprint(z)\n","ca2d3d89":"# It is also possible to use the dict() constructor to make a new dictionary:\n\nthisdict = dict(brand=\"Ford\", model=\"Mustang\", year=1964)\nthisdict","a009f1e8":"new1_dict = {\n    \"brands\": \"Python\",\n    \"model\": \"Dictionaries\",\n    \"year\": 2020\n}\n\nmy_dict = new1_dict.copy()\n\nprint(my_dict)\n","d8d9032a":"# Create a Tuple:\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2)","7a04feb9":"# You can access tuple items by referring to the index number, inside square brackets:\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[1])","96fc406a":"# Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[-1])","6a8e302a":"# You can specify a range of indexes by specifying where to start and where to end the range.\n# When specifying a range, the return value will be a new tuple with the specified items.\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[0:2])","1f4ec062":"# Specify negative indexes if you want to start the search from the end of the tuple:\n\ntuple2 = (\"python\",\"ddarkk\",\"green\")\nprint(tuple2[-2:-1])","a0c8a88a":"\"\"\"\nOnce a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.\nBut there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.\n\"\"\"\n\nx = (\"apple\", \"banana\", \"cherry\")\ny = list(x) #x convert to list\ny[1] = \"kiwi\"\nx = tuple(y)\n\nprint(x)","c2ab5356":"<a id='19'><\/a>\n# strip() method\nReturns a trimmed version of the string","b00522df":"<a id='5'><\/a>\n# Most Used Methods","2b30f2f4":"<a id='13'><\/a>\n# endswith() method\nReturns true if the string ends with the specified value.","e5bcd89a":"<a id=2><\/a>\n## Integer(int)\nWe use it in definitions of numbers that are external to certain (decimal numbers).","a78bd5b8":"<a id='23'><\/a>\n# insert() methods\nTo add an item at the specified index, use the insert() method:","fbb2dea1":"<a id='6'><\/a>\n## dir() method\nIt is a method that allows us to see what methods are created by Python.","4d67fe0c":"<a id='24'><\/a>\n# remove() methods\nThe remove() method removes the specified item:","f3533651":"<a id='26'><\/a>\n# Tuples and Methods\nA tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.","45747967":"<a id='14'><\/a>\n# index() method\nSearches the string for a specified value and returns the position of where it was found","03287af9":"<a id='16'><\/a>\n# isupper() method\nReturns True if all characters in the string are upper case","2990e37d":"<a id='25'><\/a>\n# Dictionaries and Methods\nA dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.\n\n    *Can change, new data can be added and unordered","0e742db3":"<a id='12'><\/a>\n# casefold() method\nConverts string into lower case","7ad40c24":"<a id='11'><\/a>\n# capitalize() method\nConverts the first character to upper case","0a30691b":"<a id='9'><\/a>\n# String Methods\nWe will apply useful and necessary methods for the articles.","b08580d7":"<a id='31'><\/a>\n# Other lists methods","38fbdf12":"<a id='21'><\/a>\n# Lists and Methods\nIn this section we will look at lists and methods.\n* Features of the lists; Ordered, data can be added,removed and changed","497c2a8d":"<a id='20'><\/a>\n## Other Methods\n[Different and other methods](https:\/\/www.w3schools.com\/python\/python_strings.asp)","460a8c17":"<a id='29'><\/a>\n# Liste Merge\nThere are severalaways to join, or concatenate, two or more lists in Python.","a9c3f6b4":"<a id='10'><\/a>\n# replace() method\nAs the name suggests, a method that allows us to change a certain value.","39e779ed":"<a id='4'><\/a>\n## String(str)\nWe use not as a number, but as a variable we assign to our texts or texts.","185aab68":"<a id='8'><\/a>\n## len() method\nIt gives us information about the text length (s) of the variable we have defined.","6c22a290":"<a id='25'><\/a>\n# pop() methods\nThe pop() method removes the specified index, (or the last item if index is not specified):","159003cd":"<a id='18'><\/a>\n# upper() method\nConverts a string into upper case","7c1cf5dc":"<a id='17'><\/a>\n# lower() method\nConverts a string into lower case","15b45a72":"<a id='30'><\/a>\n# extend() method\nUse the extend() method to add list2 at the end of list1:","162807bb":"<a id='1'><\/a>\n# Introduction to Variables","95560796":"<a id='15'><\/a>\n# islower() method\nReturns True if all characters in the string are lower case","f54ddcad":"<a id='22'><\/a>\n# append() methods\nTo add an item to the end of the list, use the append() method:","d2e8c46b":"<a id='26'><\/a>\n# del methods\nThe del keyword removes the specified index:","b67fd3b5":"<a id='28'><\/a>\n# copy() methods\nThere are ways to make a copy, one way is to use the built-in List method copy().","28679de0":"<a id='7'><\/a>\n## type() method\nIt shows which variable we use our data.","7e86f372":"<a id='27'><\/a>\n# clear() methods\nThe clear() method empties the list:","9898bec6":"<a id='3'><\/a>\n## Float\nWe can say that it is a data variable containing decimal numbers other than normal numbers (example; 10.2)"}}