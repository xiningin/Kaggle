{"cell_type":{"90fd5fc7":"code","50b370eb":"code","1ef9aeaa":"code","016b91f8":"code","26a9425a":"code","83847845":"code","f822a25e":"code","b9e16318":"code","cf157f78":"code","18b3867e":"code","96c571e0":"code","ebeb7eee":"code","71628b19":"code","898434bd":"code","2870f107":"code","56bf21fb":"code","76be146b":"code","030ab2b7":"code","8d9fd4ff":"code","40917313":"code","486193fc":"code","069ce2c3":"code","6b06b104":"code","52a5b6d9":"code","4eaca6e7":"markdown","bc7bc488":"markdown","85d9e831":"markdown","2cac61e2":"markdown","b8a9824a":"markdown","dd8280dc":"markdown","d54e2c63":"markdown","d380a1d0":"markdown","13df261c":"markdown","248e4a17":"markdown","988a6a4d":"markdown","acfe9554":"markdown","6a719510":"markdown"},"source":{"90fd5fc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50b370eb":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","1ef9aeaa":"df = pd.read_csv('\/kaggle\/input\/iot-sensorscsv\/Sensors.csv')","016b91f8":"df.head()","26a9425a":"df.columns","83847845":"df.columns = (['Sensor_Value', 'Tolerance_Value', 'Output'])","f822a25e":"df.shape","b9e16318":"df.info()","cf157f78":"df.describe().T","18b3867e":"df.isna().sum()","96c571e0":"i=1\nfor x in df.columns[:-1]:\n    plt.subplot(1,2,i)\n    sns.boxplot(y=df[x])\n    i+=1","ebeb7eee":"df.Output.unique()","71628b19":"df.Output=df.Output.map({'pH':0,'dht':1,'ultrasonic':2})","898434bd":"X = df.iloc[:,0:2]","2870f107":"Y = df.Output","56bf21fb":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaler.fit(X)\nX=scaler.transform(X)## will checck Mu and sigma values for each varible \nprint(X)","76be146b":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, \nrandom_state=10)\n","030ab2b7":"from sklearn.linear_model import LogisticRegression\n\nc=LogisticRegression()\n\nc.fit(X_train, Y_train)\n\nY_pred=c.predict(X_test)","8d9fd4ff":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(Y_test,Y_pred))\nprint(classification_report(Y_test,Y_pred))\nlracc = accuracy_score(Y_test,Y_pred)\nprint(lracc)","40917313":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(X_train,Y_train)\nY_pred = dt.predict(X_test)","486193fc":"print(confusion_matrix(Y_test,Y_pred))\nprint(classification_report(Y_test,Y_pred))\ndtacc = accuracy_score(Y_test,Y_pred)\nprint(dtacc)","069ce2c3":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train,Y_train)\nY_pred = rf.predict(X_test)","6b06b104":"print(confusion_matrix(Y_test,Y_pred))\nprint(classification_report(Y_test,Y_pred))\nrfacc = accuracy_score(Y_test,Y_pred)\nprint(rfacc)","52a5b6d9":"sns.barplot(y=['Logistic Regression','Decision Tree','Random Forest'],x=[lracc,dtacc,rfacc])\nplt.show()","4eaca6e7":"No missing values in the data set","bc7bc488":"# Linear Regression","85d9e831":"# Read data","2cac61e2":"# Decision Tree","b8a9824a":"# Data Inspection","dd8280dc":"No outliers, all data points are clustered","d54e2c63":"# Checking Ouliers","d380a1d0":"# Create X and Y","13df261c":"# Random Forest","248e4a17":"# Scaling","988a6a4d":"# Checking Missing Values","acfe9554":"# Import libraries","6a719510":"# Model Comparision"}}