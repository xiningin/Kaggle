{"cell_type":{"92a452cf":"code","c5420701":"code","adedeca7":"code","8f84e30e":"code","afbe24cb":"code","2a6a33d8":"code","c0e1b382":"code","f0a29c53":"code","c04e7bc3":"code","dab06079":"code","f8c75898":"code","38ce59cc":"code","3fb9bf08":"code","00fd0165":"code","8d449fac":"code","0f5252ff":"code","49917cfb":"code","cb15300e":"code","ca4a3f63":"code","04070804":"code","b310f0ed":"code","8122e1a4":"code","9b7c6864":"code","066e5ca0":"code","d4a86c3f":"code","8001addf":"code","87852848":"code","92483cee":"code","515164e6":"code","abdc53e0":"code","2091644b":"code","66a6643c":"code","3e780984":"code","d0b46218":"code","1159d37d":"code","80e684a8":"code","c3b3835e":"code","92d7a161":"code","2031981a":"code","31ca5233":"code","8a62006e":"code","530079bd":"code","322e4bfe":"code","d604b4cf":"code","e6c1aa54":"code","9aea467f":"code","2c85e2de":"code","9b40efbf":"code","7e2b8e58":"code","1d003ed0":"code","c431a0fa":"markdown","08a61833":"markdown","b61261d4":"markdown","51be03c6":"markdown","6d216994":"markdown","e74392f8":"markdown","beaf2521":"markdown","26c876b5":"markdown","752d3f20":"markdown","8315cfad":"markdown","237ca881":"markdown","4ff97446":"markdown","71cdfc8f":"markdown","29beac9c":"markdown","53be3313":"markdown","92949c7e":"markdown","1b223daa":"markdown"},"source":{"92a452cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5420701":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndf","adedeca7":"df.isnull().sum()","8f84e30e":"df[df['iso_code'].isnull()]['country'].value_counts()","afbe24cb":"import pycountry\n\n\ndef do_fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n        return result[0].alpha_3\n    except:\n        return np.nan","2a6a33d8":"df['iso_code']= df[\"country\"].apply(lambda country: do_fuzzy_search(country))","c0e1b382":"#only Northern Cyprus can't transfer isocode.so use lambda x to change them.\ndf['iso_code']=df[['country', 'iso_code']].apply(lambda x: 'CYP' if (pd.isnull(x[1]))\n                                             else x[1], axis=1)\ndf.fillna(0, inplace=True)","f0a29c53":"#create new datafram which contains country\u3001isocode and vaccine\nvaccine_type = df[['country', 'iso_code' , 'vaccines', 'total_vaccinations']]\nprint(vaccine_type.isnull().sum())\n","c04e7bc3":"#Total number of vaccines used\nvaccine_type = df[['country', 'iso_code' , 'vaccines', 'total_vaccinations']]\nvaccine_total_number=vaccine_type.groupby('vaccines')['total_vaccinations'].sum().reset_index()\nvaccine_total_number.sort_values('total_vaccinations', ascending=False).head(20)","dab06079":"import plotly.express as px\nvaccine_total_number = vaccine_total_number.sort_values('total_vaccinations', ascending=False).head(10)\nfig = px.bar(vaccine_total_number, y='total_vaccinations', x='vaccines', color=\"total_vaccinations\", text='total_vaccinations', title='Vaccines in Use Top 10', height=700)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","f8c75898":"#Differentiating the number of vaccines used by country\nvaccine_type=vaccine_type.groupby(['vaccines', 'country', 'iso_code'])['total_vaccinations'].max().reset_index()\nvaccine_type.sort_values('total_vaccinations', ascending=False)\nvaccine_type[vaccine_type['country']=='United States']","38ce59cc":"import plotly.express as px\nimport pandas as pd\n\nfig = px.choropleth(vaccine_type, locations=\"iso_code\", \n                    locationmode='ISO-3',\n                    color=\"vaccines\", \n                    hover_name=\"country\", \n                    hover_data=['total_vaccinations']\n                   )\nfig.update_layout(title_text='Vaccine Preference by Country')\nfig.show()","3fb9bf08":"total=df.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()\ntotal.sort_values('total_vaccinations', ascending=False)","00fd0165":"import plotly.express as px\ntotal = total.sort_values('total_vaccinations', ascending=False).head(20)\nfig = px.bar(total, y='total_vaccinations', x='country', color=\"total_vaccinations\", text='total_vaccinations', title=\"Total accinations Top 20 Country\", height =600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","8d449fac":"import plotly.graph_objects as go\nimport pandas as pd\nfig = go.Figure(data=go.Choropleth(\n    locations = total['iso_code'],\n    z = total['total_vaccinations'].astype(float),\n    text = total['country'],\n    colorscale = 'Jet',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='Total vaccinations by each country',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","0f5252ff":"total_people=df.groupby(['country', 'iso_code'])['people_vaccinated'].max().reset_index()\ntotal_people.sort_values('people_vaccinated', ascending=False)","49917cfb":"import plotly.express as px\ntotal_people = total_people.sort_values('people_vaccinated', ascending=False).head(20)\nfig = px.bar(total_people, y='people_vaccinated', x='country', color_discrete_sequence =['green']*len(total_people), text='people_vaccinated', title=\"People Vaccinated Top 20 Country\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","cb15300e":"import plotly.graph_objects as go\nimport pandas as pd\nfig = go.Figure(data=go.Choropleth(\n    locations = total_people['iso_code'],\n    z = total_people['people_vaccinated'].astype(float),\n    text = total_people['country'],\n    colorscale = 'Greens',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='People Vaccinated by each country',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","ca4a3f63":"total_vaccinated_per=df.groupby(['country', 'iso_code'])['people_fully_vaccinated_per_hundred'].max().reset_index()\ntotal_vaccinated_per.sort_values('people_fully_vaccinated_per_hundred', ascending=False)","04070804":"import plotly.express as px\ntotal_vaccinated_per = total_vaccinated_per.sort_values('people_fully_vaccinated_per_hundred', ascending=False).head(20)\nfig = px.bar(total_vaccinated_per, y='people_fully_vaccinated_per_hundred', x='country', color_discrete_sequence =['teal']*len(total_vaccinated_per), text='people_fully_vaccinated_per_hundred', title=\"People Fully Vaccinated Per Hundred Top 20 Country\", height=700)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","b310f0ed":"import plotly.graph_objects as go\nimport pandas as pd\nfig = go.Figure(data=go.Choropleth(\n    locations = total_vaccinated_per['iso_code'],\n    z = total_vaccinated_per['people_fully_vaccinated_per_hundred'].astype(float),\n    text = total_vaccinated_per['country'],\n    colorscale = 'tealrose',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'people_fully_vaccinated_per_hundred',\n))\n\nfig.update_layout(\n    title_text='Larger Percent From Population of Country',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","8122e1a4":"data = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\n\nimport pycountry\n\n\ndef do_fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n        return result[0].alpha_3\n    except:\n        return np.nan\n    \ndata['iso_code']= data[\"country\"].apply(lambda country: do_fuzzy_search(country))\ndata['iso_code']= data[['country', 'iso_code']].apply(lambda x: 'CYP' if (pd.isnull(x[1]))\n                                             else x[1], axis=1)\n\n","9b7c6864":"data.isnull().sum()","066e5ca0":"#total_vaccinations is comulative number where NA means didn't record, so we need to drop it.\n# Drop all rows with NaNs in total_vaccinations.\ndata = data.dropna(subset=['total_vaccinations'])\ndata[data['country'] == 'United States']\ndata.sort_values('date', inplace=True)\n","d4a86c3f":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)\ndf['date'] = df['date'].dt.strftime('%m-%d-%Y')","8001addf":"data","87852848":"#create the figure \n\nfigure = px.line(data, x='date', y='total_vaccinations', color='country', template='plotly_dark', text='total_vaccinations', title= 'Total Vaccinations by Country')\n\nfigure.show()","92483cee":"pip install pycountry-convert","515164e6":"def do_fuzzy_search(country):\n    try:\n        result = pycountry.countries.search_fuzzy(country)\n        return result[0].alpha_2\n    except:\n        return np.nan\n    \ndata['iso2_code']= data[\"country\"].apply(lambda country: do_fuzzy_search(country))","abdc53e0":"data[data['iso2_code'].isnull()]['country'].value_counts()","2091644b":"data['iso2_code'] = data[['country', 'iso2_code']].apply(lambda x: 'CY' if x[0] == 'Northern Cyprus'\n                                                         else 'FO' if x[0] == 'Faeroe Islands'\n                                                         else x[1], axis=1)\n\nimport pycountry_convert as pc\ndef convert(row):\n    conti_code = pc.country_alpha2_to_continent_code(row.iso2_code)\n    return conti_code\ndata['continent'] = data.apply(convert, axis=1)\ndata","66a6643c":"data_EU = data[data['continent']=='EU']\nfigure = px.line(data_EU, x='date', y='total_vaccinations', color='country', template='plotly_dark', text='total_vaccinations', title= 'Total Vaccinations EU')\n\nfigure.show()","3e780984":"data_EU_max_total_vacci = data_EU.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()","d0b46218":"data_EU_max_total_vacci_top20 = data_EU_max_total_vacci.sort_values('total_vaccinations', ascending=False).head(20)\nfig = px.bar(data_EU_max_total_vacci_top20, y='total_vaccinations', x='country', color=\"total_vaccinations\", text='total_vaccinations', title=\"Total accinations Top 20 EU\", height =600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","1159d37d":"fig = go.Figure(data=go.Choropleth(\n    locations = data_EU_max_total_vacci['iso_code'],\n    z = data_EU_max_total_vacci['total_vaccinations'].astype(float),\n    text = data_EU_max_total_vacci['country'],\n    colorscale = 'bluyl',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='Total vaccinations by each country in Europe',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","80e684a8":"data_AS = data[data['continent']=='AS']\nfigure = px.line(data_AS, x='date', y='total_vaccinations', color='country', template='plotly_dark', title= 'Total Vaccinations ASIAN')\n\n\nfigure.show()","c3b3835e":"data_AS_max_total_vacci = data_AS.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()\ndata_AS_max_total_vacci_top20 = data_AS_max_total_vacci.sort_values('total_vaccinations', ascending=False).head(20)\nfig = px.bar(data_AS_max_total_vacci_top20, y='total_vaccinations', x='country', color=\"total_vaccinations\", text='total_vaccinations', title=\"Total accinations Top 20 ASIAN\", height =600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","92d7a161":"fig = go.Figure(data=go.Choropleth(\n    locations = data_AS_max_total_vacci['iso_code'],\n    z = data_AS_max_total_vacci['total_vaccinations'].astype(float),\n    text = data_AS_max_total_vacci['country'],\n    colorscale = 'brwnyl',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='Total vaccinations by each country in Asian',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","2031981a":"data_NA = data[data['continent']=='NA']\nfigure = px.line(data_NA, x='date', y='total_vaccinations', color='country', template='plotly_dark', title= 'Total Vaccinations North America')\n\n\nfigure.show()","31ca5233":"data_NA_max_total_vacci = data_NA.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()\ndata_NA_max_total_vacci_top20 = data_NA_max_total_vacci.sort_values('total_vaccinations', ascending=False).head(20)\nfig = px.bar(data_NA_max_total_vacci_top20, y='total_vaccinations', x='country', color=\"total_vaccinations\", text='total_vaccinations', title=\"Total accinations Top 20 North America\", height =600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","8a62006e":"fig = go.Figure(data=go.Choropleth(\n    locations = data_NA_max_total_vacci['iso_code'],\n    z = data_NA_max_total_vacci['total_vaccinations'].astype(float),\n    text = data_NA_max_total_vacci['country'],\n    colorscale = 'plasma',\n    autocolorscale=False,\n    reversescale=True,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='Total vaccinations by each country in North America',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","530079bd":"data_SA = data[data['continent']=='SA']\nfigure = px.line(data_SA, x='date', y='total_vaccinations', color='country', template='plotly_dark', title= 'Total Vaccinations South America')\n\n\nfigure.show()","322e4bfe":"data_SA_max_total_vacci = data_SA.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()\ndata_SA_max_total_vacci_top20 = data_SA_max_total_vacci.sort_values('total_vaccinations', ascending=False).head(20)\nfig = px.bar(data_SA_max_total_vacci_top20, y='total_vaccinations', x='country', color=\"total_vaccinations\", text='total_vaccinations', title=\"Total accinations Top 20 South America\", height =600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","d604b4cf":"fig = go.Figure(data=go.Choropleth(\n    locations = data_SA_max_total_vacci['iso_code'],\n    z = data_SA_max_total_vacci['total_vaccinations'].astype(float),\n    text = data_SA_max_total_vacci['country'],\n    colorscale = 'twilight',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='Total vaccinations by each country in South America',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","e6c1aa54":"data_AF = data[data['continent']=='AF']\nfigure = px.line(data_AF, x='date', y='total_vaccinations', color='country', template='plotly_dark', title= 'Total Vaccinations Africa')\n\n\nfigure.show()","9aea467f":"data_AF_max_total_vacci = data_AF.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()\ndata_AF_max_total_vacci_top20 = data_AF_max_total_vacci.sort_values('total_vaccinations', ascending=False).head(20)\nfig = px.bar(data_AF_max_total_vacci_top20, y='total_vaccinations', x='country', color=\"total_vaccinations\", text='total_vaccinations', title=\"Total accinations Top 20 Africa\", height =600)\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","2c85e2de":"fig = go.Figure(data=go.Choropleth(\n    locations = data_AF_max_total_vacci['iso_code'],\n    z = data_AF_max_total_vacci['total_vaccinations'].astype(float),\n    text = data_AF_max_total_vacci['country'],\n    colorscale = 'oranges',\n    autocolorscale=False,\n    reversescale=False,\n    marker_line_color='darkgray',\n    marker_line_width=0.05,\n    colorbar_tickprefix = '',\n    colorbar_title = 'total_vaccinations',\n))\n\nfig.update_layout(\n    title_text='Total vaccinations by each country in Africa',\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    annotations = [dict(\n        x=1,\n        y=1,\n        xref='paper',\n        yref='paper',\n        showarrow = False\n    )]\n)\n\nfig.show()","9b40efbf":"data['continent'].unique()","7e2b8e58":"\ndata_EU_max_total_vacci = data_EU.groupby(['country', 'iso_code'])['total_vaccinations'].max().reset_index()","1d003ed0":"!pip install dash\n!pip install jupyter-dash\n#Dashboard\nimport pandas as pd \nimport numpy as np\nimport dash\nimport dash_table\nfrom dash.dependencies import Input, Output\nimport dash_core_components as dcc\nimport dash_html_components as html\nimport plotly.graph_objs as go\nfrom jupyter_dash import JupyterDash\n\ntotal_newdata=df.groupby(['country', 'iso_code'])['total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated'].max().reset_index()\ntotal_newdata.sort_values('total_vaccinations', ascending=False)\n\n#make dashboard\nexternal_stylesheets = ['https:\/\/codepen.io\/chriddyp\/pen\/bWLwgP.css']\n\napp= JupyterDash(__name__, external_stylesheets=external_stylesheets)\n\napp.title= 'Covid19 data in any Country'\n    \napp.layout= html.Div([\n        html.Div([\n            html.H1('Covid19 data in any Country')],\n            style={'textAlign': 'center', 'padding-bottom': '30'}\n        ),\n        html.Div([html.Span('Metric to display:', className='eight columns',\n                             style={'text-align': 'right', 'width': '40%', 'padding-top': 10}),\n                  dcc.Dropdown(id='value-selected', value= 'total_vaccinations',\n                               options=[{'label': 'total_vaccinations', 'value': 'total_vaccinations'},\n                                        {'label': 'people_vaccinated', 'value': 'people_vaccinated'},\n                                        {'label': 'people_fully_vaccinated','value': 'people_fully_vaccinated'}],\n                               style={'display': 'black', 'margin-left': 'auto', 'margin-right': 'auto',\n                                      'width': '70%'},\n                               className='eight columns')], className='row'),\n        dcc.Graph(\n            id='my-graph')\n        ], className='container')\n\n@app.callback(\n    dash.dependencies.Output(\"my-graph\", \"figure\"),\n    [dash.dependencies.Input(\"value-selected\", \"value\")]\n)\ndef update_figure(selected):\n    total_newdata['hover_text'] = total_newdata['country'] + ':' + total_newdata[selected].apply(str)\n    \n    trace= go.Choropleth(locations= total_newdata['country_code'], z=np.log(total_newdata[selected]),\n                        text= total_newdata['hover_text'],\n                        hoverinfo= \"text\",\n                        marker_line_color= 'white',\n                        autocolorscale= False,\n                        reversescale= True,\n                        colorscale=\"RdBu\",marker={'line': {'color': 'rgb(180,180,180)','width': 0.5}},\n                        colorbar={\"thickness\": 10,\"len\": 0.3,\"x\": 0.9,\"y\": 0.7,\n                                  'title': {\"text\": 'persons', \"side\": \"bottom\"},\n                                  'tickvals': [ 2, 10],\n                                  'ticktext': ['100', '100,000']})\n    \n    return {\"data\": [trace],\n            \"layout\": go.Layout(height=800,geo={'showframe': False,'showcoastlines': False,\n                                                                      'projection': {'type': \"miller\"}})}\nif __name__ == '__main__':\n    app.run_server(mode='inline')","c431a0fa":"* Africa","08a61833":"Kindly Upvote if you like the notebook and share possible improvements in the comments.","b61261d4":"* Asian","51be03c6":"* choose country, iso_code, vaccines, and total_vaccinations to make the chart.\n* Use the chart to understand What vaccines are used and in which countries?","6d216994":"* choose country, iso_code, and total_vaccinations to make the chart.\n* Use the chart to understand What country is vaccinated more people?","e74392f8":"# People Vaccinated Per Country","beaf2521":"# Larger Percent From Population of Country\n* choose country, iso_code, and people_fully_vaccinated_per_hundred to make the chart.\n* Use the chart to understand What country is vaccinated a larger percent from its population?","26c876b5":"* South America","752d3f20":"* In this case, the iso_code is an important information, we need to fill the NA.\n* We use the pycountry library to fill the NA.Scotland, Norther Ireland, Wales, and England are part of United Kingdom,which is GBR.\n* Northern Cyprus  is CYP.\n* another missing data will be filled with 0.","8315cfad":"# Covid19 Vaccinations Analysis In Each Country\n![image.png](attachment:image.png)","237ca881":"# Vaccine Types Used Per Country\n","4ff97446":"# Total Vaccines Per Country","71cdfc8f":"* North America","29beac9c":"* Europe","53be3313":"# COVID-19 World Vaccination Progress Per Region","92949c7e":"# COVID-19 Dashboard\n* An Interactive visualization to show geographical heat map\n* But in the kaggle it can't work, maybe you can use it by Jupter notebook.","1b223daa":"* first you have to add the new column 'continent'.\n* make iso 2 change to continent with pycountry-convert library."}}