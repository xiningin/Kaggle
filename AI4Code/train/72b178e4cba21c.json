{"cell_type":{"befcc58e":"code","b93bb222":"code","9ea7611f":"code","5ad0353d":"code","c5fde650":"code","b5a3f654":"code","1e825e32":"code","446954b7":"code","2dcc75bf":"code","e577d8e8":"markdown","1159f278":"markdown","ce8d56f0":"markdown","93e1fa9b":"markdown","e9d1c7a7":"markdown","7d3a2f70":"markdown","777fdef0":"markdown"},"source":{"befcc58e":"import os\n\n# Work in PC or Kaggle\nIN_PC = ('VSCODE_CWD' in os.environ) and (not 'AK_KAGGLE_ENV' in os.environ)\nIN_DOCKER = ('AK_KAGGLE_ENV' in os.environ)\nIN_COLAB = ('COLAB_GPU' in os.environ)\nIN_KAGGLE = ('KAGGLE_DATA_PROXY_URL' in os.environ)\n# DATA_PATH = \"..\/..\/data\" if os.path.exists(\"..\/..\/data\") and IN_PC else \"..\/..\/..\/data\" if os.path.exists(\"..\/..\/..\/data\") and IN_PC else \"\/kaggle\"\n\nif IN_PC:\n    DATA_PATH = os.path.abspath(\"..\/..\/data\") if os.path.isdir(\"..\/..\/data\") else os.path.abspath(\"..\/..\/..\/data\")\nelif(IN_COLAB):\n    DATA_PATH = \"\/content\/drive\/MyDrive\/Colab_Kaggle\/data\"\nelse: # IN_KAGGEL\n    DATA_PATH = \"\/kaggle\"","b93bb222":"\nfor dirname, _, filenames in os.walk(DATA_PATH + '\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9ea7611f":"if IN_COLAB:\n    from google.colab import drive\n    drive.mount('\/content\/drive');\n    \n!pip install -q optuna","5ad0353d":"# import optuna\nimport time\nimport pandas as pd\nimport gc\n# import datatable as dt\nimport shutil, os\nimport numpy as np\nimport psutil\nimport joblib\nimport optuna\n\nfrom catboost import *\n\n# Sklearn\nfrom sklearn.model_selection import *\nfrom sklearn.impute import *\nfrom sklearn.preprocessing import *\nfrom sklearn.metrics import *\nfrom sklearn.pipeline import *\nfrom sklearn.compose import *\nfrom sklearn.ensemble import *\nfrom sklearn.linear_model import *","c5fde650":"percent=10 # 10% == 0.1\nn_splits=5\ntarget_col='num_sold' # name of target column\nid_col='row_id'\ncompetition='tps0122'\nfullname_competition ='tabular-playground-series-jan-2022'\n\n# GO_ON=True\nGPU=True\ngpu_info = !nvidia-smi\nif ('\\n'.join(gpu_info)).find('failed') >= 0:\n\tGPU=False\nprint (GPU)\n\nWORKING_PATH = DATA_PATH + '\/working\/'+ competition + '\/'\nORGIN_CSV_PATH = DATA_PATH + '\/input\/'+ fullname_competition +'\/'\nPKL_PATH = WORKING_PATH + 'pkl\/'\nBOOSTERS_PATH = PKL_PATH + 'boosters\/'\nCSV_PATH_PRE = DATA_PATH + '\/input\/tps-0122-preprocessing-feature-engineering\/tps0122\/CSV\/'","b5a3f654":"train = pd.read_csv(CSV_PATH_PRE + 'train-ak.csv')\ntest = pd.read_csv(CSV_PATH_PRE + 'test-ak.csv')\nsubmission = pd.read_csv(ORGIN_CSV_PATH + 'sample_submission.csv')","1e825e32":"train.head()","446954b7":"y = train[target_col]\nX = train.drop(columns=[target_col, id_col])\n# del train; gc.collect();\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=(1 \/ n_splits), random_state=59)","2dcc75bf":"def cat_objective(trial):\n    global parameters_csv\n    cat_params = {\n        \"task_type\" : \"GPU\",\n        \"depth\": trial.suggest_int(\"depth\", 1, 12), # ('depth',1, 15),\n        \"used_ram_limit\": \"20gb\", # \"12gb\",\n        \"one_hot_max_size\": trial.suggest_int(\"one_hot_max_size\", 2, 20),  \n        'iterations':trial.suggest_int(\"iterations\", 1000, 20000),\n        'learning_rate' : trial.suggest_float(\"learning_rate\", 1e-4, 1.0, log=True),\n        'reg_lambda': trial.suggest_float(\"reg_lambda\", 1e-8, 10.0, log=True), # reg_lambda == l2_leaf_reg\n        'random_strength': trial.suggest_uniform('random_strength',10,50), # Only CPU\n        'od_wait':trial.suggest_int('od_wait', 500, 2000),\n        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30), # (\"min_data_in_leaf\", 2, 20),\n        'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n        'verbose': False,\n        \"random_state\": 59,\n        \n    }\n\n\n    cat_params[\"bootstrap_type\"] = \"Bayesian\"\n    \n    if cat_params[\"bootstrap_type\"] == \"Bayesian\":\n        cat_params[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n\n    if not GPU :\n        del cat_params['task_type']\n        # del cat_params['random_strength']\n\n        cat_params[\"colsample_bylevel\"] = trial.suggest_float(\"colsample_bylevel\", 0.01, 0.1)\n        \n    model = eval(config['model'])(**cat_params)\n    model.fit(\n        X_train, y_train,\n        eval_set=[(X_test, y_test)],\n#         eval_metric=[\"error\", \"logloss\", \"auc\"],\n        verbose=100,\n        early_stopping_rounds = early_stopp_ing\n        )\n    # #==== Binary classification\n    # y_predicted = model.predict_proba(X_test)\n    # accuracy = roc_auc_score(y_test, y_predicted[:, 1])\n\n    # #==== Multiclass classification\n    y_predicted = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_predicted)\n    # print('Accuracy:', round(accuracy_score(y_test, y_predicted[:, 1]) * 100,2),'%')\n    \n    if accuracy > min_accuracy:\n        cat_params['score'] = accuracy\n        cat_params['model'] = config['model']\n        cat_params['date'] = time.strftime('%Y-%m-%d %H:%M:%S')\n        cat_params['task_type'] = 'GPU'\n        del cat_params['used_ram_limit']\n        \n        err,ok1,ok2 = 0,0,0\n        id = parameters_csv.shape[0]+1\n        cat_params['name'] = f'cat-{id}'\n\n        for i, k in cat_params.items():\n            if i in parameters_csv.columns:\n                parameters_csv.loc[id, i] = k\n    \n        parameters_csv.to_csv(CSV_PATH, index=False,  float_format='%g')\n        parameters_csv = pd.read_csv(CSV_PATH, dtype='str')\n        parameters_csv = parameters_csv.drop_duplicates(subset=parameters_csv.columns[2:].to_list())\n        parameters_csv.to_csv(CSV_PATH, index=False,  float_format='%g')\n\n        # print('@@@'*30)\n        # print(model.get_all_params())\n        # print('@@@'*30)\n\n    print(\"[%s] ============ Accuracy: %.4f%% ==============\" % (time.strftime('%Y-%m-%d %H:%M:%S'), accuracy * 100.0))\n    return accuracy","e577d8e8":"# Variables","1159f278":"# DATA_PATH","ce8d56f0":"# Train Test Split","93e1fa9b":"# Colab","e9d1c7a7":"# Hyperparameters Catboost","7d3a2f70":"# Imports","777fdef0":"# Initial loading Date"}}