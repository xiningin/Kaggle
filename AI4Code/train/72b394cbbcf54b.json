{"cell_type":{"bc58e884":"code","faff4ed1":"code","e501e0bc":"code","cc3d78a3":"code","71fb9055":"code","5bdaafea":"code","de409453":"code","6daa6b46":"code","042bf4df":"code","f432c2b2":"code","73ed2b38":"code","dfb1f871":"code","7dcdbe59":"markdown","dfe73831":"markdown","b186bde3":"markdown","51da4cdb":"markdown","5feaec79":"markdown","ba6b8634":"markdown","9885b8d4":"markdown","cb02932e":"markdown","7be42fd2":"markdown","06702c94":"markdown"},"source":{"bc58e884":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error","faff4ed1":"# Load data\ndata = pd.read_csv('..\/input\/train.csv')\n# Take a Quick Look at the Data Structure\ndata.head()","e501e0bc":"# quick description\ndata.describe()","cc3d78a3":"data.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = data.SalePrice\nX_numeric = data.drop(['SalePrice'], axis=1).select_dtypes(exclude=['object'])\nX_categorical = data.drop(['SalePrice'], axis=1).select_dtypes(include=['object'])\nX_categorical_dummy = pd.get_dummies(X_categorical)\nX = X_numeric.join(X_categorical_dummy)\n","71fb9055":"train_X, test_X, train_y, test_y = train_test_split(X.values, y.values, test_size=0.25)\n","5bdaafea":"# make predictions\npredictions = train_y.mean()\n# evaluate performance\nperformance = mean_absolute_error([predictions]*len(test_y), test_y)\nprint(f'Mean Absolute Error : {performance:.2f}')","de409453":"my_model = XGBRegressor()\nmy_model.fit(train_X, train_y, verbose=False)","6daa6b46":"feature_names = X.columns\nimportance = my_model.feature_importances_\ndata = pd.DataFrame(data=importance, index=feature_names, columns=[\"score\"]).sort_values(by = \"score\", ascending=False).head(10)\n\ntrace = go.Bar(x=data.score, y=data.index, name='Feature importance', orientation='h')\nfig = go.Figure(data=[trace], layout={'title': 'XGB Feature importance', 'xaxis': {'title': 'importance'}, 'yaxis': {'title': 'feature name'}})\npy.iplot(fig)","042bf4df":"# make predictions\npredictions = my_model.predict(test_X)\n# evaluate performance\nperformance = mean_absolute_error(predictions, test_y)\nprint(f'Mean Absolute Error : {performance:.2f}')","f432c2b2":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode()\nimport plotly.graph_objs as go","73ed2b38":"results = []\nfor max_depth in range(1, 10):\n    my_model = XGBRegressor(n_estimators=10, learning_rate=0.3, reg_lambda=0, max_depth=max_depth)\n    my_model.fit(train_X, train_y, verbose=False)\n    train_mae = mean_absolute_error(my_model.predict(train_X), train_y)\n    test_mae = mean_absolute_error(my_model.predict(test_X), test_y)\n    results.append({'max_depth': max_depth, 'train_mae': train_mae, 'test_mae': test_mae})\n\nperformance = pd.DataFrame(results)\ntrain_trace = go.Scatter(x=performance['max_depth'], y=performance['train_mae'], mode='lines+markers', name='TRAIN')\ntest_trace = go.Scatter(x=performance['max_depth'], y=performance['test_mae'], mode='lines+markers', name='TEST')\n\nfig = go.Figure(data=[train_trace, test_trace], layout={'title': 'learning curves', 'xaxis': {'title': 'max_depth'}, 'yaxis': {'title': 'ERROR'}})\npy.iplot(fig)","dfb1f871":"# \u6a2a\u8f74\u8bad\u7ec3\u6570\u636e\u91cf\uff0c\u7eb5\u8f74\u6d4b\u8bd5\u8bef\u5dee\u3001\u8bad\u7ec3\u8bef\u5dee\nresults = []\nfor training_set_size in range(1, 500):\n    my_model = XGBRegressor(n_estimators=30)\n    my_model.fit(train_X[:training_set_size], train_y[:training_set_size], verbose=False)\n    train_mae = mean_absolute_error(my_model.predict(train_X), train_y)\n    test_mae = mean_absolute_error(my_model.predict(test_X), test_y)\n    results.append({'training_set_size': training_set_size, 'train_mae': train_mae, 'test_mae': test_mae})\n\nperformance = pd.DataFrame(results)\ntrain_trace = go.Scatter(x=performance['training_set_size'], y=performance['train_mae'], mode='lines+markers', name='TRAIN')\ntest_trace = go.Scatter(x=performance['training_set_size'], y=performance['test_mae'], mode='lines+markers', name='TEST')\n\nfig = go.Figure(data=[train_trace, test_trace], layout={'title': 'learning curves', 'xaxis': {'title': 'training_set_size'}, 'yaxis': {'title': 'ERROR'}})\npy.iplot(fig)","7dcdbe59":"## 4.2 \u6570\u636e\u91cf\u8d8a\u591a\u8d8a\u597d","dfe73831":"# 3. \u6a21\u578b\n","b186bde3":"## 3.1 \u8bad\u7ec3\u4e00\u4e2aXGB\u6a21\u578b","51da4cdb":"# 2. \u6570\u636e\n## 2.1 \u52a0\u8f7d\u6570\u636e","5feaec79":"## 4.1 \u6a21\u578b\u590d\u6742\u5bb9\u6613\u8fc7\u62df","ba6b8634":"## 3.0 \u786e\u5b9a\u6a21\u578b\u6027\u80fd\u53c2\u8003\u503c","9885b8d4":"## 3.2 \u5728\u6d4b\u8bd5\u96c6\u4e0a\u8861\u91cf\u6548\u679c","cb02932e":"## 2.2 \u5212\u5206\u8bad\u7ec3\u6d4b\u8bd5\u96c6","7be42fd2":"# 1. scoping\n* Frame the Problem\n* Select a Performance Measure\n\n$$\n\\mathrm{MAE}=\\frac{1}{n} \\sum_{j=1}^{n}\\left|y_{j}-\\hat{y}_{j}\\right|\n$$","06702c94":"# 4. \u6a21\u578b\u8bef\u5dee\u5206\u89e3"}}