{"cell_type":{"1d064dda":"code","ae40bccf":"code","201ae506":"code","786aacf2":"code","1500c26a":"code","6dff3863":"code","88b43bc2":"code","a508e3c1":"code","9c43fbe0":"code","05c6b5c3":"code","c4f14cc5":"code","a9faa927":"code","d8558ee9":"code","d438ffd2":"code","832576e4":"code","510a956a":"code","cc1adcad":"markdown","465f5e8f":"markdown","67a81d48":"markdown","96cdfbfa":"markdown","9e387dc0":"markdown","0fb957db":"markdown","b7b1c7d2":"markdown","5b9b4c1b":"markdown","adedb70c":"markdown","8670f83a":"markdown","ed5c8f82":"markdown","e778658f":"markdown","d0532d16":"markdown","3f7d1eaf":"markdown","4c5c8a9f":"markdown","dbd5e3ee":"markdown","9261375c":"markdown"},"source":{"1d064dda":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\niris = load_iris()","ae40bccf":"#It contains keys and values: dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename'])\nprint(iris.keys())","201ae506":"#The feature names are a list of strings, giving the description of each feature\nprint(iris['feature_names'])","786aacf2":"#the target names \nprint(iris['target_names'])","1500c26a":"#The rows * columns,\nprint(iris['data'].shape)","6dff3863":"#numpy array: numpy.ndarray\nprint(type(iris['data']))","88b43bc2":"#the feature values for the first five samples:\nprint(iris['data'][:5])","a508e3c1":"#the target values for the first five samples:\nprint(iris['target'][:5])","9c43fbe0":"# Convert a NumPy Array to Pandas DataFrame\niris_dataframe = pd.DataFrame(iris.data, columns=iris.feature_names)\nprint(iris_dataframe.head(10))","05c6b5c3":"X = iris.data\nY = iris.target\n\n#the feature values for the first five samples:\nprint(X[:5,:]) \nprint(Y)","c4f14cc5":"gr = pd.plotting.scatter_matrix(iris_dataframe, c=Y, figsize=(15, 15), marker=\"o\",hist_kwds={'bins': 30}, s=60, alpha=.8)","a9faa927":"#train_test_split: is a function in Sklearn model selection for splitting data arrays into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(iris['data'], iris['target'],train_size=0.75,random_state=42)\nprint(\"X_train shape =\", X_train.shape)\nprint(\"X_test shape=\",X_test.shape)\nprint(\"y_train shape=\",y_train.shape)\nprint(\"y_test= shape\",y_test.shape)","d8558ee9":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=4)","d438ffd2":"knn.fit(X_train, y_train)","832576e4":"y_pred = knn.predict(X_test)\n#We can also use the score method of the knn object, which will compute the test set accuracy for us:\nprint(\"accuracy of test set=\",knn.score(X_test, y_test))\n\n\ny_pred = knn.predict(X_train)\nprint(\"accuracy of train set=\",knn.score(X_train, y_train))","510a956a":"X_new = np.array([[5, 2.9, 1, 0.2]])\n\n#To make prediction we call the predict method of the knn object:\nprediction = knn.predict(X_new)\nprint(prediction)\nprint(iris['target_names'][prediction])","cc1adcad":"* We can improve the accuracy of the model by changing **n_neighbors=4**, we will see  more details in incoming lessons","465f5e8f":"### [**Back to course home**](https:\/\/www.kaggle.com\/ammarnassanalhajali\/machine-learning-in-python-course-1)","67a81d48":"## 3-Choose a Model:\n* There are many classification algorithms in scikit-learn that we could use.\n* Here we will use a k nearest neighbors classifier, which is easy to understand.\n* The k-NN algorithm is arguably the simplest machine learning algorithm.\n* To make a prediction for a new data point, the algorithm finds the closest data points in the training dataset\u2014its \u201cnearest neighbors.\u201d","96cdfbfa":"## 6-Parameter Tuning:","9e387dc0":"## 7-Make Predictions:\n* Imagine we found an iris in the wild with a \n    * sepal length of 5 cm.\n    * sepal width of 2.9 cm.\n    * petal length of 1 cm.\n    * petal width of 0.2 cm.\n    \n**What species of iris would this be?**","0fb957db":"## Take a look at the data","b7b1c7d2":"## Split Dataset ","5b9b4c1b":"## 5-Evaluate the Model:\n* We can measure how well the model works by computing the accuracy","adedb70c":"* From the plots, we can see that the three classes seem to be relatively well separated using the sepal and petal measurements. \n* This means that a machine learning model will likely be able to learn to separate them.","8670f83a":"* This is a small machine learning project for classifying the iris flower and its prediction using four attributes (features)  Sepal length, Sepal width, Petal Length, and Petal width.\n\n* Every iris in the dataset belongs to one of three classes, ('setosa' 'versicolor' 'virginica'),so this problem is a three-class classification problem.\n\n* Our goal is to build a machine learning model that can learn from the measurements of these irises whose species is known so that we can predict the species for a new iris.","ed5c8f82":"- The iris object that is returned by load_iris is a **bunch object**, which is very similar to a dictionary. It contains keys and values:","e778658f":"## 4-Train the Model:\n* We call the fit method of the knn object,which takes as arguments the numpy array X_train containing the training data and the numpy array y_train of the corresponding training labels:","d0532d16":"\n# **4-A First Application: Classifying Iris Species**","3f7d1eaf":"# 1-Data collection\n\n* Dataset is included in scikit-learn in the datasets module. We can load it by calling the load_iris function:","4c5c8a9f":"## Visualize data\n\n* One of the best ways to inspect data is to visualize it.\n* One way to do this is by using a scatter plot. ","dbd5e3ee":"# 2-Data Preparation","9261375c":"\n\n\n\n![1q.png](attachment:cc85f3d5-37b4-4538-a630-60ee7ecefb56.png)\n\n"}}