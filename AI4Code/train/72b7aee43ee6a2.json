{"cell_type":{"4de1a521":"code","71df3781":"code","1366008e":"code","f1b30bed":"code","ac96ceca":"code","367ce7d5":"code","5b54487d":"code","e0910316":"code","86c27bb6":"code","ef3aa556":"code","cdda5bfe":"code","2d51f442":"code","29b9ed58":"code","17da6f44":"code","4423b9df":"code","c0d78a3e":"code","249c0885":"code","5936c72d":"code","a09800e6":"code","c562d1dc":"code","26348bec":"code","88cde3b1":"code","2e41f021":"code","930c7986":"code","5cf5d7ea":"code","6a86991d":"code","bcb0f835":"code","834ea8f2":"code","7e1c5afa":"code","c5baff3a":"code","66220b72":"code","b935303b":"code","d04167a8":"code","c6fd3837":"code","1d0b6502":"code","37d77668":"code","6af5361e":"code","026b40e3":"code","a4c94109":"code","07dd3c5e":"code","58f26c9b":"code","9564cafc":"code","476a39ba":"code","2a8979a7":"code","b7061618":"code","8685f32c":"code","8e219f42":"code","670a1ffa":"code","717573bf":"markdown","72a600bf":"markdown","81dadb77":"markdown","ff604c1b":"markdown","e1b67282":"markdown","959a5917":"markdown","50fac441":"markdown"},"source":{"4de1a521":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn\nimport re\nfrom sklearn import model_selection \nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","71df3781":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","1366008e":"df_train.head()","f1b30bed":"df_test.head()","ac96ceca":"df_train.shape","367ce7d5":"df_train.info()","5b54487d":"df_train.describe()","e0910316":"df_train['Survived'].value_counts()","86c27bb6":"df_train['Embarked'].value_counts()","ef3aa556":"df_train['Died'] = 1 - df_train['Survived']","cdda5bfe":"df_train.groupby('Pclass').agg('sum')[['Survived','Died']].plot(kind='bar', figsize=(25, 7), stacked=True, color=['c', 'm']);\nplt.show()","2d51f442":"df_train.groupby('Sex').agg('sum')[['Survived', 'Died']].plot(kind='bar', figsize=(25, 7), stacked=True, color=['b', 'y']);\nplt.show()","29b9ed58":"plt.hist([df_train[df_train['Survived'] == 1]['Age'],df_train[df_train['Survived']== 0]['Age']], bins = 10, stacked = True, color = ['g','r'], label = ['Survived','Died'] )\nplt.xlabel('Age')\nplt.ylabel('Number of passengers')\nplt.legend()\nplt.show()","17da6f44":"plt.hist([df_train[df_train['Survived'] == 1]['Fare'],df_train[df_train['Survived']== 0]['Fare']], bins = 10, stacked = True, color = ['g','r'], label = ['Survived','Died'] )\nplt.xlabel('Fare')\nplt.ylabel('Number of passengers')\nplt.legend()\nplt.show()","4423b9df":"plt.figure(figsize = (30,10))\nax = plt.subplot()\nax.scatter(df_train[df_train['Survived'] == 1]['Age'], df_train[df_train['Survived'] == 1]['Fare'], c = 'm', s = df_train[df_train['Survived'] == 1]['Fare'])\nax.scatter(df_train[df_train['Survived'] == 0]['Age'], df_train[df_train['Survived'] == 0]['Fare'], c = 'y', s = df_train[df_train['Survived'] == 0]['Fare'])\nplt.show()","c0d78a3e":"# adults with largest ticket fare survived (magenta) and adults with low ticket fare died(yellow). \n#childern between 0-10 with magenta dots survived.  ","249c0885":"label = df_train['Survived']\ndf_train = df_train.drop(['Survived','Died'], axis = 1)\ndf = df_train.append(df_test)\ndf.reset_index(inplace=True)\ndf = df.drop(['index','PassengerId'], axis = 1)\n","5936c72d":"df.shape","a09800e6":"df['Age'] = df['Age'].fillna(df['Age'].median()) # using median bcz more robust with outliers ","c562d1dc":"df['Fare'] = df['Fare'].fillna(df['Fare'].median())","26348bec":"df.head()","88cde3b1":"# Processing the column 'Cabin'. \n# Step 1. Replacing all the NaN with N \n# Step 2. Replacing other Cabin Numbers with their first letter.\n# Step 3. Counting all the unique values and numbering them from 0 to the total number of unique values and replacing the Cabin column with those numbers. ","2e41f021":"# Step 1\ndf['Cabin'].fillna('N',inplace = True)","930c7986":"# Step 2\nfor x,y in zip(df['Cabin'],range(df.shape[0])):\n    df.loc[y,'Cabin'] = str(x)[0]","5cf5d7ea":"df.head()","6a86991d":"# Step 3\ncabin_list = list(df['Cabin'].unique())\nfor x,y in zip(df['Cabin'],range(df.shape[0])):\n               df.loc[y,'Cabin'] = cabin_list.index(x)\n    ","bcb0f835":"df.head(10)","834ea8f2":"# Processing the column 'Embarked'. \n# Step 1. Replacing all the NaN with S which is the highest count in this column.  \n# Step 2. Counting all the unique values and numbering them from 0 to the total number of unique values and replacing the Cabin column with those` numbers. ","7e1c5afa":"df['Embarked'].value_counts()","c5baff3a":"# Step 1\ndf['Embarked'].fillna('S',inplace = True)","66220b72":"# Step 2\nembarked_list = list(df['Embarked'].unique())\nfor x,y in zip(df['Embarked'],range(df.shape[0])):\n               df.loc[y,'Embarked'] = embarked_list.index(x)","b935303b":"df.head(10)","d04167a8":"# Processing the column Sex\n# Step 1. Replacing 'male' as 0\n# Step 2. Replacing 'female' as 1","c6fd3837":"# Step 1\ndf['Sex'].replace('male',0,inplace = True)","1d0b6502":"# Step 2\ndf['Sex'].replace('female',1,inplace = True)","37d77668":"df.head(10)","6af5361e":"for name,y in zip(df['Name'],range(df.shape[0])):\n    df.loc[y,'Name'] = name.split(',')[1].split('.')[0]","026b40e3":"name_list = list(df['Name'].unique())\nfor x,y in zip(df['Name'],range(df.shape[0])):\n    df.loc[y,'Name'] = name_list.index(x)","a4c94109":"df.head(10)","07dd3c5e":"for x,y in zip(df['Ticket'],range(df.shape[0])):\n    x = x.replace('\/','')\n    x = x.replace('.','')\n    p = re.findall('[a-zA-Z0-9]',x)\n    for i in range(1):\n        if p[i].isdigit():\n            df.loc[y,'Ticket'] = 'x'\n            continue\n        else:\n            df.loc[y,'Ticket'] = p[0] + p[1]    ","58f26c9b":"df.head(10)","9564cafc":"Ticket_list = list(df['Ticket'].unique())\nfor x,y in zip(df['Ticket'],range(df.shape[0])):\n    df.loc[y,'Ticket'] = Ticket_list.index(x)","476a39ba":"df.head()","2a8979a7":"x = np.array(df[:891].astype(float))\nx = preprocessing.scale(x)\ny = np.array(label)\nx_train,x_test,y_train,y_test = model_selection.train_test_split(x, y, test_size = 0.2,random_state=7)","b7061618":"model = LogisticRegression(solver='liblinear', multi_class='ovr')\nkfold = model_selection.KFold(n_splits=10, random_state=7)\ncv_results = model_selection.cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')\nprint(cv_results.mean())","8685f32c":"models = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('QDA', QuadraticDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))","8e219f42":"results = []\nnames = []\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10, random_state=7)\n    cv_results = model_selection.cross_val_score(model, x_train, y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    print(\"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std()))","670a1ffa":"RF = RandomForestClassifier(bootstrap = True, n_estimators = 32, n_jobs = -1, max_depth = 16,  min_samples_split = 4, min_samples_leaf = 1)\nRF.fit(x_train, y_train)\npredictions = RF.predict(x_test)\npred_result = accuracy_score(y_test, predictions)\nprint(pred_result)\n\nRF.fit(x_train, y_train)\npredictions = RF.predict(x_test)\nprint(RF, ':', accuracy_score(y_test, predictions))\nnew_pred = RF.predict(np.array(df[891:].astype(float)))\nnew_pred_df = pd.DataFrame(new_pred, columns = ['Survived'])\nnew_pred_df['PassengerId'] = df_test['PassengerId']\nnew_pred_df = new_pred_df[['PassengerId','Survived']]\nnew_pred_df.to_csv('submission3.csv',index = False)","717573bf":"# Combining the train and test data ","72a600bf":"# Importing Data ","81dadb77":"# Hyperparameters Tuning","ff604c1b":"# Data Visualization ","e1b67282":"# Data Cleaning ","959a5917":"# Data Exploration ","50fac441":"# Import Libraries "}}