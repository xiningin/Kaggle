{"cell_type":{"f2653627":"code","316f80a2":"code","bed48cf8":"code","b7eeab2e":"code","7da06e34":"code","55f99b4e":"code","e415783a":"code","d19c8b48":"code","2b52564f":"code","aa9a8d7f":"code","20beda5b":"code","fb0f12c7":"code","f8ece4eb":"markdown","f5c112b7":"markdown"},"source":{"f2653627":"import numpy as np\nfrom numpy import linalg as LA\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport json\nimport glob\nimport seaborn as sns\n\nfrom tqdm import tqdm\n\nimport math\n\nfrom collections import defaultdict\nimport collections","316f80a2":"TEAMNAME = \"WeKick\"\nreplay_dir = \"..\/input\/wekick-small\/wekick_small\/\"","bed48cf8":"action_set_v1=[\n\"idle\",\"left\",\"top_left\",\"top\",\"top_right\",\"right\",\"bottom_right\",\"bottom\",\"bottom_left\",\"long_pass\",\"high_pass\",\"short_pass\",\"shot\",\"sprint\",\"release_direction\",\"release_sprint\",\"sliding\",\"dribble\",\"release_dribble\"\n]","b7eeab2e":"json_paths=[]\nfor path in glob.glob(replay_dir+\"*\"): \n    json_paths.append(path)\n        \nprint(\"replay num: {}\".format(len(json_paths)))","7da06e34":"# return action list\ndef create_episode_dict(json_path):\n    act_lis =[]\n    \n    json_open = open(json_path, 'r')\n    json_load = json.load(json_open)\n    \n    sub_id = int(json_path.split(\"\/\")[-1].split(\"_\")[0])\n    \n    for frame in range(len(json_load[\"steps\"])-1):\n        if TEAMNAME in json_load[\"info\"][\"TeamNames\"][0]:\n            team=0\n        elif TEAMNAME in json_load[\"info\"][\"TeamNames\"][1]:\n            team=1\n        else:\n            raise BaseException(\"teamname{} not found!\".format(TEAMNAME))\n\n        raw = json_load[\"steps\"][frame][team][\"observation\"][\"players_raw\"][0]\n        action = json_load[\"steps\"][frame+1][team][\"action\"][0]\n        \n        act_lis.append(action)\n\n    \n    return act_lis,sub_id","55f99b4e":"from joblib import Parallel, delayed\nsub = Parallel(n_jobs=-1, verbose=10)( [delayed(create_episode_dict)(j) for j in json_paths] )","e415783a":"subs = defaultdict(list)\n\nfor act_lis,sub_id in sub:\n    subs[sub_id].extend(act_lis)","d19c8b48":"sub_action_prob= defaultdict(list)\n\nfor subid, actions in subs.items():\n    c = collections.Counter(actions)\n    \n    for act in range(19):\n        sub_action_prob[subid].append(c[act]\/len(actions))","2b52564f":"act_df = pd.DataFrame(sub_action_prob)\nact_df.index = action_set_v1\nact_df = act_df.reindex(sorted(act_df.columns), axis=1)\nact_df","aa9a8d7f":"plt.figure(figsize = (15,5))\nplt.plot(act_df)\nplt.xticks(rotation=45)\nplt.grid()","20beda5b":"df_corr = act_df.corr()\nplt.figure(figsize = (8,8))\nsns.heatmap(df_corr, square=True,vmax=1, vmin=-1, center=0)","fb0f12c7":"from scipy.spatial.distance import squareform\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\ncorr_condensed =squareform(1-df_corr)\n\nz = linkage(corr_condensed, method='average')\ndn = dendrogram(z,  leaf_rotation=70)","f8ece4eb":"This is part of team s_toppo's solusion.  \n\nIt is very important to choose which agent to learn,\nwhen imitating other team's replay.  \nWe found \"clustering\" these agents gives good result.\n\nLet's take WeKick's replay as an example.  \nThank you WeKick!","f5c112b7":"Now we can see 3 \"clusters\""}}