{"cell_type":{"55387486":"code","c840705b":"code","4301e9d4":"code","e7bd7676":"code","83639439":"code","ae568a5f":"code","94754dba":"code","9569d408":"code","5d319080":"code","cf641ad3":"code","031fca72":"code","957b0d0a":"code","99246442":"code","c9b5fbd5":"code","d8efa1e6":"code","b1ba37de":"code","2c5a3d41":"code","bb0878e6":"code","1275a121":"code","b936c37b":"code","a8ee3a17":"code","918999c3":"code","6925faeb":"code","2c406bf9":"code","20bea789":"code","ebb0f5dc":"code","ba6b68cf":"code","cad6435b":"code","b614603d":"code","1cefbc33":"code","79212c24":"code","c6b17936":"code","e927633d":"code","3a0bd01f":"code","37f8f236":"code","c6158129":"code","714197c4":"code","a52aba85":"code","53cc1bb3":"code","be12167f":"code","bc7b78b0":"code","9df546de":"code","fe0712ed":"code","11692936":"code","226fa20c":"markdown","9f063f7f":"markdown","50f7705a":"markdown","c1510358":"markdown","5e667ab9":"markdown","e4b06252":"markdown","a85cca78":"markdown","073fd17a":"markdown","3a2aa743":"markdown","ee0cdd02":"markdown","f389316d":"markdown","2af95096":"markdown","733915bf":"markdown","faa0745c":"markdown","3dda43a8":"markdown","6207cd11":"markdown","def2f8d3":"markdown","9bfe6507":"markdown","7e505ff0":"markdown","d8d156bd":"markdown","ed876c88":"markdown","29c7afd9":"markdown","6b024a5c":"markdown","4e4adf04":"markdown","9fbdf4c4":"markdown","f3e3115f":"markdown","8ce1c5ac":"markdown","5d290dbc":"markdown","b9d81aef":"markdown","dc33760f":"markdown","9bca5d2a":"markdown","8d8e737d":"markdown"},"source":{"55387486":"# Matematica\nimport pandas as pd\nimport numpy as np\n\n# Visualizaci\u00f3n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\ncolor = sns.color_palette()\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\nimport plotly.tools as tls\n\nfrom sklearn.model_selection import cross_val_score\nfrom scipy.sparse import hstack\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nos.listdir(\"..\/input\/grammar-and-online-product-reviews\")","c840705b":"df=pd.read_csv('..\/input\/grammar-and-online-product-reviews\/GrammarandProductReviews.csv')\ndf.head()","4301e9d4":"# Lineas nulas\ndf.isnull().sum()","e7bd7676":"# Eliminar nulos\ndf = df.dropna(subset=['reviews.text'])","83639439":"df['reviews.text'] = df['reviews.text'].apply(lambda line: line.lower())","ae568a5f":"import string\npunc_ext = string.punctuation + '\u00a1\u00bf'\ndef remove_punctuation(text):\n    return text.translate(text.maketrans('', '', punc_ext))","94754dba":"remove_punctuation('\u00a1hola! TIO!?')","9569d408":"df['reviews.text'] = df['reviews.text'].apply(lambda line: remove_punctuation(line))","5d319080":"import re\ndef remove_url(text):\n    return re.sub(r'^https?:\\\/\\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)","cf641ad3":"df['reviews.text'] = df['reviews.text'].apply(lambda line: remove_url(line))","031fca72":"import emoji\ndf['reviews.text'] = df['reviews.text'].apply(lambda line: emoji.demojize(line))","957b0d0a":"import nltk\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))","99246442":"sns.set(style=\"darkgrid\")\nsns.countplot(df['reviews.rating'])","c9b5fbd5":"r1 = df.ix[df['reviews.rating']==1, ['reviews.text']]\nr2 = df.ix[df['reviews.rating']==2, ['reviews.text']]\nr3 = df.ix[df['reviews.rating']==3, ['reviews.text']]\nr4 = df.ix[df['reviews.rating']==4, ['reviews.text']]\nr5 = df.ix[df['reviews.rating']==5, ['reviews.text']]","d8efa1e6":"stopwords = set(STOPWORDS)\n\ndef most_used_words(data):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    plt.imshow(wordcloud)\n    plt.show()","b1ba37de":"most_used_words(r1)","2c5a3d41":"most_used_words(r2)","bb0878e6":"most_used_words(r3)","1275a121":"most_used_words(r4)","b936c37b":"most_used_words(r5)","a8ee3a17":"df['reviews_length'] = df['reviews.text'].apply(len)\ng = sns.FacetGrid(df,col='reviews.rating',size=5)\ng.map(plt.hist,'reviews_length', range=(0, 1200))","918999c3":"corr = df.corr()\nf, ax = plt.subplots(figsize=(10, 5))\nsns.heatmap(corr, cbar=True, annot=True,\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","6925faeb":"def classifyRating(rate):\n    if rate < 3:\n        return 'Bad'\n    elif rate == 3:\n        return 'Neutral'\n    else:\n        return 'Good'","2c406bf9":"df['ReviewType'] = df['reviews.rating'].apply(lambda rate: classifyRating(rate))","20bea789":"def classifyRating2(rate):\n    if rate < 3:\n        return '0'\n    elif rate == 3:\n        return '1'\n    else:\n        return '2'","ebb0f5dc":"df['numberRate'] = df['reviews.rating'] < 4","ba6b68cf":"buenas = {}\nmalas = {}\n    \nfor review, classType in zip(df['reviews.text'], df['ReviewType']):\n    text = review.split(' ')\n    for word in text:\n        if word not in stop_words and word != '':\n            if classType == 'Good':\n                counter = buenas.get(word)\n                if counter:\n                    buenas[word] = counter + 1\n                else:\n                    buenas[word] = 1\n            elif classType == 'Bad':\n                counter = malas.get(word)\n                if counter:\n                    malas[word] = counter + 1\n                else:\n                    malas[word] = 1\n                ","cad6435b":"import operator\nbest_good = sorted(buenas.items(), key=operator.itemgetter(1))\nbest_good.reverse()\nbest_good","b614603d":"best_bad = sorted(malas.items(), key=operator.itemgetter(1))\nbest_bad.reverse()\nbest_bad","1cefbc33":"def return_next(modelo, texto):\n    return diccionario[:6]","79212c24":"from keras.layers import Dense, Input, Flatten\nfrom keras.layers import GlobalAveragePooling1D, Embedding\nfrom keras.models import Model","c6b17936":"np.random.seed(32)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.manifold import TSNE\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import LSTM, Conv1D, MaxPooling1D, Dropout\nfrom keras.utils.np_utils import to_categorical","e927633d":"train_text, test_text, train_y, test_y = train_test_split(df['reviews.text'],df['numberRate'],test_size = 0.3)","3a0bd01f":"MAX_NB_WORDS = 20000\n\ntexts_train = train_text.astype(str)\ntexts_test = test_text.astype(str)\n\ntokenizer = Tokenizer(nb_words=MAX_NB_WORDS, char_level=False)\ntokenizer.fit_on_texts(texts_train)\nsequences = tokenizer.texts_to_sequences(texts_train)\nsequences_test = tokenizer.texts_to_sequences(texts_test)\n\nword_index = tokenizer.word_index","37f8f236":"index_to_word = dict((i, w) for w, i in tokenizer.word_index.items())\n\" \".join([index_to_word[i] for i in sequences[0]])","c6158129":"MAX_SEQUENCE_LENGTH = 150\n\nx_train = pad_sequences(sequences, maxlen=MAX_SEQUENCE_LENGTH)\nx_test = pad_sequences(sequences_test, maxlen=MAX_SEQUENCE_LENGTH)","714197c4":"y_train = train_y\ny_test = test_y\n\ny_train = to_categorical(np.asarray(y_train))\nprint('Shape of label tensor:', y_train.shape)","a52aba85":"from keras.layers import Dense, Input, Flatten\nfrom keras.layers import GlobalAveragePooling1D, Embedding\nfrom keras.models import Model\n\nEMBEDDING_DIM = 50\nN_CLASSES = 2\n\n# input: a sequence of MAX_SEQUENCE_LENGTH integers\nsequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')\n\nembedding_layer = Embedding(MAX_NB_WORDS, EMBEDDING_DIM,\n                            input_length=MAX_SEQUENCE_LENGTH,\n                            trainable=True)\nembedded_sequences = embedding_layer(sequence_input)\n\naverage = GlobalAveragePooling1D()(embedded_sequences)\npredictions = Dense(N_CLASSES, activation='softmax')(average)\n\nmodel = Model(sequence_input, predictions)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam', metrics=['acc'])","53cc1bb3":"sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')\nembedded_sequences = embedding_layer(sequence_input)","be12167f":"x = LSTM(128, dropout=0.2, recurrent_dropout=0.2)(embedded_sequences)\npredictions = Dense(2, activation='softmax')(x)\n\n\nmodel = Model(sequence_input, predictions)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['acc'])","bc7b78b0":"model.fit(x_train, y_train, validation_split=0.1,\n          nb_epoch=2, batch_size=128)","9df546de":"output_test = model.predict(x_test)\nprint(\"test auc:\", roc_auc_score(y_test,output_test[:,1]))","fe0712ed":"def predictor(modelo, texto):\n    return return_next(modelo, texto)\n    ","11692936":"predictor(model, 'this is a test of a bad bad bad bad bad review i hated this product a lot it sucked')","226fa20c":"## Eliminar may\u00fasculas a min\u00fasculas","9f063f7f":"## Eliminar caracteres especiales","50f7705a":"### Rating 3","c1510358":"### Rating 5","5e667ab9":"# 3. Preprocesamiento","e4b06252":"## Procesamiento de nulos\n# El an\u00e1lisis debe realizarse utilizando los reviews de las personas, por lo que una l\u00ednea sin un review es inservible. Se eliminar\u00e1n estas.","a85cca78":"### Clasificaci\u00f3n de palabras buenas y malas","073fd17a":"### Rating 1","3a2aa743":"## N\u00famero de palabras seg\u00fan calificaci\u00f3n","ee0cdd02":"## Carga de librer\u00edas","f389316d":"Seg\u00fan el an\u00e1lisis realizado, el que tiene el peor modelo presenta una mayor cantidad de palabras negativas y emoticones de no agrado. Para mejorar sus reviews se recomienda enfocarse en las palabras que m\u00e1s se utilizan para describir descpectivamente a un producto y enfocarse en corregirlo exactamente en ese punto.","2af95096":"## Eliminar emoticones\nPara eliminar los emojis de los reviews, se utilizar\u00e1 la librer\u00eda *emoji*, esta los convertir\u00e1 a texto para que as\u00ed puedan ser utilizadas para el an\u00e1lisis de calidad de review.","733915bf":"# 1. Preparaci\u00f3n de entorno de ejecuci\u00f3n","faa0745c":"## Frecuencia de tipos de calificaciones","3dda43a8":"# 7. Estrategia para producto con menos reviews","6207cd11":"### Eliminar stop-words","def2f8d3":"### Rating 2","9bfe6507":"### Terminar de cargar librer\u00edas","7e505ff0":"## Carga de data","d8d156bd":"### Rating 4","ed876c88":"## Correlaci\u00f3n entre variables","29c7afd9":"# 5. Algoritmo de clasificaci\u00f3n","6b024a5c":"### Creaci\u00f3n de nuevas categor\u00edas de clasificaci\u00f3n","4e4adf04":"## Determinaci\u00f3n de palabras positivas y negativas","9fbdf4c4":"# Laboratorio 6: An\u00e1lisis de sentimientos\n# * Eric Mendoza\n# * Javier Jo\n# * Marlon Fuentes\n# ---","f3e3115f":"Ahora se presenta el algoritmo de predicci\u00f3n de palabras. Este utiliza los modelos generados en las secciones anteriores junto con el diccionario desarrollado.","8ce1c5ac":"# 6. Resultados","5d290dbc":"### LSTM","b9d81aef":"# 4. An\u00e1lisis exploratorio","dc33760f":"### Divisi\u00f3n en datasets y preparaci\u00f3n de librer\u00edas","9bca5d2a":"## Palabras m\u00e1s utilizadas seg\u00fan tipo de calificaci\u00f3n","8d8e737d":"## Eliminar URL's"}}