{"cell_type":{"c9086dd7":"code","fab11cfc":"code","9415fa1b":"code","8eeaaceb":"code","3c885acf":"code","10a5dc38":"code","f6d2a4b7":"code","afe9fdd1":"code","5fa0c8f2":"code","a58b191c":"code","3affab3c":"code","0c30ed49":"code","56705aad":"code","99bd31b4":"code","68517abc":"code","e1bd4191":"code","65564f85":"code","ebd9d954":"code","e442eae3":"code","8521d485":"code","0865f906":"code","6c1b9586":"code","bcb66abe":"code","b5af4b2b":"code","184bb68b":"code","7323c567":"code","4d2ad7f8":"code","62eb67f2":"code","2a279b8d":"code","a4052f2c":"code","d5495f98":"code","610c94ef":"code","2cc8985a":"code","4bad532d":"code","1190ce90":"code","8dc692af":"code","4f6a01a7":"code","6461de15":"code","04439242":"code","a3766492":"code","98241527":"code","60d32ec7":"code","80e74fa1":"code","03aa25d9":"code","27bfe12f":"code","750e5739":"code","ae5f5398":"code","452020db":"code","113fd85b":"code","1c5638ef":"code","6615c0fd":"markdown","54975ea1":"markdown"},"source":{"c9086dd7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n\n\n# import various functions to perform classification\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# import functions to perform logistic regression\nimport statsmodels\nimport statsmodels.api as sm\nfrom sklearn.linear_model import SGDClassifier\n\nfrom math import radians, cos, sin, sqrt, asin\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier","fab11cfc":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","9415fa1b":"train.head()","8eeaaceb":"test.head()","3c885acf":"print(train.info())\nprint(test.info())","10a5dc38":"\n# plot heatmap to visualize the null values in each column\n# 'cbar = False' does not show the color axis \nsns.heatmap(train.isnull(), cbar=False)\n\n# display the plot\nplt.show()","f6d2a4b7":"train.isnull().sum()","afe9fdd1":"test.isnull().sum()","5fa0c8f2":"train['Embarked'].value_counts()","a58b191c":"train['Age']=train['Age'].fillna(train['Age'].mean())\ntest['Age']=test['Age'].fillna(test['Age'].mean())","3affab3c":"train['Embarked']=train['Embarked'].fillna(train['Embarked'].mode()[0])","0c30ed49":"test['Fare']=test['Fare'].fillna(test['Fare'].mean())","56705aad":"train.drop(['Cabin','Ticket','Name'],axis=1,inplace=True)\ntest.drop(['Cabin','Ticket','Name'],axis=1,inplace=True)","99bd31b4":"train.info()","68517abc":"train['Embarked'].value_counts()","e1bd4191":"from sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ntrain['Embarked'] = le.fit_transform(train['Embarked'])","65564f85":"test['Embarked'] = le.fit_transform(test['Embarked'])","ebd9d954":"train=pd.get_dummies(train)\ntest=pd.get_dummies(test)","e442eae3":"train.describe()","8521d485":"train['Pclass']=train['Pclass'].astype('O')\ntrain['SibSp']=train['SibSp'].astype('O')\ntrain['Parch']=train['Parch'].astype('O')","0865f906":"test['Pclass']=test['Pclass'].astype('O')\ntest['SibSp']=test['SibSp'].astype('O')\ntest['Parch']=test['Parch'].astype('O')","6c1b9586":"for i in train.iloc[:,:-1].columns:\n    \n    if train[i].dtype!=object:\n        print('Feature: ', i)\n        sns.boxplot(x = train[i], data= train, palette='rainbow', orient='h', )\n    \n        plt.show()","bcb66abe":"correlation_train=train.corr()\nsns.set(font_scale=2)\nplt.figure(figsize = (50,35))\nax = sns.heatmap(correlation_train, annot=True,annot_kws={\"size\": 30},fmt='.1f',cmap='Reds', linewidths=.3)","b5af4b2b":"train.head()","184bb68b":"test.head()","7323c567":"# Step-3\ny = train[\"Survived\"]\n\n# This ensures same pre processing steps are applied to both train and test sets.\nX= train.drop('Survived',axis=1) #Training data\n\nrf=RandomForestClassifier()\nrf.fit(X,y)","4d2ad7f8":"dr=DecisionTreeClassifier()\ndr.fit(X,y)","62eb67f2":"test['Survived']=rf.predict(test)","2a279b8d":"train.head()","a4052f2c":"test.head()","d5495f98":"test[['PassengerId','Survived']].to_csv(\".\/submission-07.csv\",index=False)","610c94ef":"\ntest.drop('Survived',axis=1,inplace=True)","2cc8985a":"from sklearn.preprocessing import StandardScaler","4bad532d":"scaler = StandardScaler()\nscaler.fit(X,y)\nStandardScaler()\n","1190ce90":"train.head()","8dc692af":"X.head()","4f6a01a7":"dr=DecisionTreeClassifier()\ndr.fit(X,y)","6461de15":"test['Survived']=dr.predict(test)","04439242":"test[['PassengerId','Survived']].to_csv(\".\/submission-08.csv\",index=False)","a3766492":"from sklearn.svm import SVC","98241527":"from sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(X, y)","60d32ec7":"test.drop('Survived',axis=1,inplace=True)","80e74fa1":"test.head()","03aa25d9":"test['Survived']=clf.predict(test)","27bfe12f":"test[['PassengerId','Survived']].to_csv(\".\/submission-09.csv\",index=False)","750e5739":"from sklearn import svm\n\n#Create a svm Classifier\nclf = svm.SVC(kernel='rbf') # Linear Kernel\n\n#Train the model using the training sets\nclf.fit(X, y)","ae5f5398":"test.drop('Survived',axis=1,inplace=True)","452020db":"test.head()","113fd85b":"test['Survived']=clf.predict(test)","1c5638ef":"test[['PassengerId','Survived']].to_csv(\".\/submission-10.csv\",index=False)","6615c0fd":"# missing value treatment","54975ea1":"# Try with SKLearn SVM model"}}