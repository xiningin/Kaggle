{"cell_type":{"910f5241":"code","a9a3ca54":"code","839dd62c":"code","9f546a06":"code","3a2063af":"code","5b847ac3":"code","5b1c0cdb":"code","aaa9bd35":"code","66cb0d49":"code","6ef4fe41":"code","f17eeb1d":"code","b5e74e7f":"code","cc2935ad":"code","35686798":"code","d0fc2b6f":"code","c79381c1":"code","18044059":"code","47f226c7":"code","bd203f86":"code","e7026d45":"code","e3ed7be6":"code","1e6e673e":"code","d44b7ed4":"code","a5bd0bf0":"code","b6462288":"code","294cddac":"code","176a395b":"markdown","d9586a26":"markdown","8b9a5720":"markdown","5ab19dbf":"markdown","819b4359":"markdown","97d15d6d":"markdown","1f7c5847":"markdown","24953b38":"markdown","d24ee412":"markdown","ea43cdc7":"markdown","d8b7271a":"markdown","810c9713":"markdown","ffc50e2a":"markdown"},"source":{"910f5241":"import pandas as pd          \nimport numpy as np          # For mathematical calculations\nimport matplotlib.pyplot as plt  # For plotting graphs\nfrom datetime import datetime    # To access datetime\nfrom pandas import Series        # To work on series\n%matplotlib inline\nimport warnings                   # To ignore the warnings\nwarnings.filterwarnings(\"ignore\")","a9a3ca54":"# Now let\u2019s read the data\ncandies=pd.read_csv(\"..\/input\/candy_production.csv\")","839dd62c":"candies_original=candies.copy()","9f546a06":"candies.columns","3a2063af":"candies.dtypes","5b847ac3":"candies.shape","5b1c0cdb":"candies.head()","aaa9bd35":"candies.tail()","66cb0d49":"candies['observation_date'] = pd.to_datetime(candies.observation_date,format='%Y-%m-%d')  \ncandies_original['observation_date'] = pd.to_datetime(candies_original.observation_date,format='%Y-%m-%d')","6ef4fe41":"#  let\u2019s extract the year, month and day from the observation_date\nfor i in (candies,candies_original):\n    i['year']=i.observation_date.dt.year \n    i['month']=i.observation_date.dt.month \n    i['day']=i.observation_date.dt.day","f17eeb1d":"candies.head()","b5e74e7f":"# let\u2019s look at yearly production count.\nplt.figure(figsize=(16,8))\ncandies.groupby('year')['IPG3113N'].mean().plot.bar()","cc2935ad":"# let\u2019s look at monthly production count.\nplt.figure(figsize=(16,8))\ncandies.groupby('month')['IPG3113N'].mean().plot.bar()","35686798":"candies.index = candies['observation_date'] # indexing the Datetime to get the time period on the x-axis.\nts = candies['IPG3113N']\nplt.figure(figsize=(16,8))\nplt.plot(ts, label='% Candy Production')\nplt.title('Candy Production')\nplt.xlabel(\"Time(year)\")\nplt.ylabel(\"% Candy Production\")\nplt.legend(loc='best')","d0fc2b6f":"train=candies.ix[:'2011-10-01']\ntest=candies.ix['2011-11-01':]","c79381c1":"train.head()","18044059":"train.IPG3113N.plot(figsize=(15,8), title= 'Candy Production', fontsize=14, label='train')\ntest.IPG3113N.plot(figsize=(15,8), title= 'Candy Production', fontsize=14, label='test')\nplt.xlabel(\"observation_date\")\nplt.ylabel(\"production count\")\nplt.legend(loc='best')\nplt.show()","47f226c7":"# predictions using naive approach for the validation set.\ndd= np.asarray(train['IPG3113N'])\ny_hat = test.copy()\ny_hat['naive'] = dd[len(dd)-1]\nplt.figure(figsize=(12,8))\nplt.plot(train.index, train['IPG3113N'], label='Train')\nplt.plot(test.index,test['IPG3113N'], label='Test')\nplt.plot(y_hat.index,y_hat['naive'], label='Naive Forecast')\nplt.legend(loc='best')\nplt.title(\"Naive Forecast\")\nplt.show()","bd203f86":"# RMSE(Root Mean Square Error) to check the accuracy of our model on validation data set.\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nrms = sqrt(mean_squared_error(test['IPG3113N'], y_hat.naive))\nprint(rms)","e7026d45":"from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\ny_hat_ex = test.copy()\nfit2 = SimpleExpSmoothing(np.asarray(train['IPG3113N'])).fit(smoothing_level=0.6,optimized=False)\ny_hat_ex['SES'] = fit2.forecast(len(test))\nplt.figure(figsize=(16,8))\nplt.plot(train['IPG3113N'], label='Train')\nplt.plot(test['IPG3113N'], label='Test')\nplt.plot(y_hat_ex['SES'], label='SES')\nplt.legend(loc='best')\nplt.show()","e3ed7be6":"rms = sqrt(mean_squared_error(test['IPG3113N'], y_hat_ex['SES']))\nprint(rms)","1e6e673e":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\ny_hat_avg = test.copy()\nfit1 = SARIMAX(train['IPG3113N'], order=(2, 1, 4),seasonal_order=(0,1,1,7),enforce_stationarity=False,enforce_invertibility=False).fit()\ny_hat_ex['SARIMA'] = fit1.predict(start=\"2011-11-01\", end=\"2017-08-01\", dynamic=True)\nplt.figure(figsize=(16,8))\nplt.plot( train['IPG3113N'], label='Train')\nplt.plot(test['IPG3113N'], label='Test')\nplt.plot(y_hat_ex['SARIMA'], label='SARIMA')\nplt.legend(loc='best')\nplt.show()","d44b7ed4":"# Let\u2019s check the rmse value for the validation part.\n\nrms = sqrt(mean_squared_error(test['IPG3113N'], y_hat_ex.SARIMA))\nprint(rms)","a5bd0bf0":"candies_original['IPG3113N'] = pd.to_numeric(candies_original['IPG3113N'], errors='coerce')","b6462288":"candies_original['observation_date'] = pd.to_numeric(candies_original['observation_date'], errors='coerce')","294cddac":"# Machine Learning\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nX = candies_original.iloc[:, :1]\ny = candies_original.iloc[:, :2]\n\n# Create training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n\n# Create the regressor: reg_all\nreg_all = LinearRegression()\n\n# Fit the regressor to the training data\nreg_all.fit(X_train, y_train)\n\n# Predict on the test data: y_pred\ny_pred = reg_all.predict(X_test)\n\n# Compute and print R^2 and RMSE\nprint(\"R^2: {}\".format(reg_all.score(X_test, y_test)))\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(\"Root Mean Squared Error: {}\".format(rmse))\n","176a395b":"### Components of a Time Series\n**1. Trend :** Trend is a general direction in which something is developing or changing.\n\n**2. Seasonality :** The pattern is repeating at regular time interval which is known as the seasonality. Any predictable change or pattern in a time series that recurs or repeats over a specific time period can be said to be seasonality.\n","d9586a26":"** Feature Extraction**","8b9a5720":"## SARIMAX\n\nSARIMAX model takes into account the seasonality of the time series. So we will build a SARIMAX model on the time series.\n","5ab19dbf":"Let\u2019s look at the data types of each feature.","819b4359":"### Naive","97d15d6d":"**Dataset Structure and Content**","1f7c5847":" ### Simple Exponential Smoothing","24953b38":"## 5. EDA - Plots (trend? seasonality?)","d24ee412":"** Import libraries and  loading the data**","ea43cdc7":" **Simple models**","d8b7271a":"Let\u2019s make a copy of data so that even if we do changes in these dataset we do not lose the original dataset.","810c9713":"### Splitting the data into training and validation part","ffc50e2a":"** Exponential models**"}}