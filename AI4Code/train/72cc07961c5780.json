{"cell_type":{"05000056":"code","c1f44740":"code","b5a25186":"code","4f026150":"code","21f04cb7":"code","0464ea8f":"code","2e1d20bb":"code","2ec71980":"code","36b751e0":"code","d5ba0c77":"code","16a13858":"code","bf0090f7":"code","cf67253f":"code","0a69d98d":"code","7e811403":"markdown","723183fd":"markdown","c3e600e4":"markdown","bd28af35":"markdown","60c3e4e2":"markdown","79207996":"markdown","c0cd6636":"markdown","62f1f746":"markdown","56cc4334":"markdown","8e412e77":"markdown","c37a31f1":"markdown","f3288d53":"markdown","15d1a119":"markdown","3da659ba":"markdown","3c6b3f6e":"markdown","9e749355":"markdown"},"source":{"05000056":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('display.max_columns', 50)\npd.options.display.float_format = '{:,.2f}'.format","c1f44740":"general = pd.read_csv('\/kaggle\/input\/covid19-mx\/covid-19_general_MX.csv')\ngeneral.rename( columns={'Unnamed: 0' :'#'}, inplace=True )\n\nprint(general.shape)\ndisplay(general.head())\nprint(general.info())","b5a25186":"from sklearn.preprocessing import StandardScaler\nfeatures = general.copy()\n\n# Parse dates\nfeatures['FECHA_INGRESO'] = pd.to_datetime(features['FECHA_INGRESO'])\nfeatures['FECHA_SINTOMAS'] = pd.to_datetime(features['FECHA_SINTOMAS'])\nfeatures['MUERTE'] = (features['FECHA_DEF'] != '9999-99-99').replace([True, False], [1, 0])\nfeatures['FECHA_DEF'].replace({'9999-99-99': '2099-01-01'}, inplace=True)\nfeatures['FECHA_DEF'] = pd.to_datetime(features['FECHA_DEF'])\nfeatures['DIAS'] = (features['FECHA_DEF'] - features['FECHA_SINTOMAS']).dt.days\nfeatures['DIAS_INCUBA'] = (features['FECHA_INGRESO'] - features['FECHA_SINTOMAS']).dt.days\n\n# Select inputs and autputs\ncond_headers = ['DIABETES', 'EPOC', 'ASMA', 'INMUSUPR', 'HIPERTENSION', 'CARDIOVASCULAR', 'OBESIDAD', 'RENAL_CRONICA', 'TABAQUISMO', 'OTRA_CON']\noutcome_headers = ['NEUMONIA', 'INTUBADO', 'UCI', 'MUERTE']\n\n# Format binary features\nbinary_headers = list(set(features.columns) - set(['index', 'EDAD']))\nfeatures[binary_headers] = features[binary_headers].replace({1: 1, 2: 0, 3: np.nan, 97: np.nan, 98: np.nan, 99: np.nan})\nfeatures.loc[:] = features.dropna()\n\n#features['EDAD'] = StandardScaler().fit_transform(features['EDAD'].values.reshape(-1,1))\n\n# Select only confirmed COVID cases, drop unused columns\ninfectados = features[features['RESULTADO'] == 1]\ninfectados = infectados.drop(columns=['SECTOR', 'ENTIDAD_UM', 'ENTIDAD_RES', 'TIPO_PACIENTE', 'NACIONALIDAD', \n                                'OTRO_CASO', 'FECHA_INGRESO', 'FECHA_SINTOMAS', 'FECHA_DEF', 'RESULTADO', '#'])\n\nfeature_headers = list(set(infectados.columns) - set(outcome_headers))\n\ndisplay(infectados.info())","4f026150":"fig, ax = plt.subplots(1, len(outcome_headers), figsize=(25,5))\nfor i, target in enumerate(outcome_headers):\n    groups = infectados[cond_headers + [target, 'SEXO']].groupby([target, 'SEXO']).sum()\n    groups = groups.unstack().unstack().reset_index(name='count')\n    groups.replace('SEXO', {0:'male', 1:'female'}, inplace=True)\n\n    alive = groups[groups[target]==0]\n    dead = groups[groups[target]==1].copy()\n    rate = dead['count'] \/ (dead['count'] + alive['count'].values)\n    dead['rate']=rate\n\n    sns.barplot(data=dead.sort_values('rate', axis='rows', ascending=False),\n                ax=ax[i],\n                x='level_0',\n                y='rate',\n                hue='SEXO',\n                palette=sns.color_palette(\"BrBG\", 2))\n    ax[i].tick_params(labelrotation=60)\n    ax[i].set_title('Percent of patients that resulted in ' + target)\n    ax[i].set_xlabel('')\n    ax[i].set_ylabel('')\nplt.show()","21f04cb7":"fig, ax = plt.subplots(1, 4, figsize=(20, 5))\nax[0].grid()\nax[1].grid()\n\n# Days-from-symptoms histogram\ndata = infectados[infectados['MUERTE']==0]['DIAS_INCUBA']\nsns.distplot(data, ax = ax[3], hist=True, kde=False, label=\"Non fatal cases\").set_title('Days from symptoms to treatment')\ndata = infectados[infectados['MUERTE']==1]['DIAS_INCUBA']\nsns.distplot(data, ax = ax[3], hist=True, kde=False, label=\"Fatal cases\")\nax[3].set_xlabel('days')\nax[3].legend()\nplt.sca(ax[3])\nplt.xlim(0, 15)\n\n# Days-to-death histogram\ndata = infectados[infectados['MUERTE']==1]['DIAS']\nsns.distplot(data, ax = ax[0]).set_title('Days from symptoms to death')\nax[0].set_xlabel('days')\nplt.sca(ax[0])\nplt.xlim(0, 40)\n\n# Age histogram\ndata = infectados['EDAD']\nsns.distplot(data,\n             hist=True, \n             kde=False, \n             ax=ax[1], \n             label='Total cases').set_title('Death distribution by age')\ndata = infectados[infectados['MUERTE']==1]['EDAD']\nsns.distplot(data, \n             hist=True,\n             kde=False,\n             ax=ax[1],\n             label='Deaths').set_title('Cases distribution by age')\nax[1].legend()\nax[1].set_xlabel('age')\n\n# Death histogram\nsns.lineplot(data=infectados.replace('SEXO', {0: 'Male', 1: 'Female'}),\n             x='EDAD',\n             y='MUERTE',\n             hue='SEXO',\n             ci=None,\n             ax=ax[2]).set_title('Death rate by age and sex')\nax[2].set_xlabel('age')\nax[2].set_ylabel('')\nplt.sca(ax[2])\nplt.xlim(20, 80)\nplt.ylim(0, .6)\n\nplt.show()","0464ea8f":"from sklearn.preprocessing import PowerTransformer, StandardScaler\n\ndef plot_death_rate(column, ax, scale=False):\n    df = infectados.groupby(['EDAD', 'MUERTE']).mean().reset_index()\n    \n    plt.sca(ax)\n    plt.xlim(20, 80)\n#    plt.ylim(0, .15)\n    if (scale):\n        df[column] = PowerTransformer().fit_transform(df[column].values.reshape(-1,1))\n    else: \n        ax.set_ylabel('Percent of ' + column)\n\n    ax.scatter(data=df[df['MUERTE']==0], x='EDAD', y=column, label='non fatal')\n    ax.scatter(data=df[df['MUERTE']==1], x='EDAD', y=column, label='fatal')\n    ax.set_xlabel('age')\n    ax.set_title(column + ' by age group')\n    ax.legend()\n    \n\nheaders = ['DIABETES', 'HIPERTENSION', 'OBESIDAD']\nfig, ax = plt.subplots(1, 3, figsize=(20, 5))\nfor i, condition in enumerate(headers):\n    plot_death_rate(condition, ax[i])\nplt.show()    \n","2e1d20bb":"headers = list(set(cond_headers) - set(headers))\nfig, ax = plt.subplots(1, 7, figsize=(30, 5))\nfor i, condition in enumerate(headers):\n    plot_death_rate(condition, ax[i], True)\nplt.show()    ","2ec71980":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","36b751e0":"def grid_search_report(estimator, params, X_train, y_train):\n    cv = GridSearchCV(estimator, params, cv=3).fit(X_train, y_train)\n    results = pd.DataFrame(cv.cv_results_)\n    test_scores = results[['split0_test_score', 'split1_test_score', 'split2_test_score']]#, 'split3_test_score', 'split4_test_score']]\n    test_scores = test_scores.transpose()\n    sns.barplot(data=test_scores)\n    plt.xlabel('combinations')\n    plt.ylabel('train score')\n    plt.show()\n    print('Best param combination: ', cv.best_params_)\n    return cv","d5ba0c77":"def print_classification_results(estimator, X, y, plot_proba=False, debug=True):\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    estimator.fit(X_train, y_train)\n    y_pred = estimator.predict(X_test)\n    \n    if (debug):\n        print('\\nPositives count: ' + str(len(positives)) + '; Negatives count: ' + str(len(negatives)), '\\n')\n        print('INPUT:\\n')\n        display(X_train.info())\n        print('\\nCONFUSION MATRIX:\\n\\n' + str(metrics.confusion_matrix(y_test, y_pred)))\n        print('\\nCLASSIFICATION REPORT:\\n\\n', metrics.classification_report(y_test, y_pred))\n\n    y_proba = estimator.predict_proba(X_test)\n    comparison = pd.DataFrame(columns=['EDAD', 'prediction', 'actual result'])\n    comparison['EDAD'] = X_test['EDAD'].reset_index(drop=True)\n    comparison['prediction'] = pd.DataFrame(y_proba)[1]\n    comparison['actual result'] = y_test.reset_index(drop=True)\n\n    if (plot_proba):\n        plt.figure(figsize=(10, 10))\n#        plt.xlim(20,85)\n        sns.scatterplot(data=comparison, x='EDAD', y='prediction', hue='actual result')\n        plt.ylabel('predicted probability for ' + target)\n        plt.xlabel('normalized age')\n        plt.show()\n        \n    return comparison","16a13858":"from sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.metrics import fbeta_score, make_scorer\n\ndef get_cv_results(estimator, X, y):\n    scoring = {\n            'f1': make_scorer(metrics.f1_score),\n            'recall': make_scorer(metrics.recall_score),\n            'accuracy': make_scorer(metrics.accuracy_score)\n            }\n    cv_results = cross_validate(estimator, X, y, scoring=scoring)\n    mean_f1 = np.mean(cv_results['test_f1'])\n    mean_accuracy = np.mean(cv_results['test_accuracy'])\n    mean_recall = np.mean(cv_results['test_recall'])\n    \n    df = pd.DataFrame([[type(estimator).__name__, mean_accuracy, mean_recall, mean_f1]], columns=['Estimator', 'Accuracy Score', 'Recall Score', 'F1 Score'])\n    return df","bf0090f7":"from sklearn import linear_model\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier, RadiusNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn import ensemble\nfrom sklearn.decomposition import PCA\n\n# Balance dataset\npositives = features[features['RESULTADO']==1][features['MUERTE']==1]\nnegatives = features[features['RESULTADO']==1][features['MUERTE']==0]\nmin_samples = min(2000, len(positives), len(negatives))\nnegatives = negatives.sample(min_samples)\npositives = positives.sample(min_samples)\nbalanced_data = pd.concat([negatives, positives])\n\n# Split\nX = balanced_data[['EDAD', 'SEXO', 'OBESIDAD', 'CARDIOVASCULAR', 'RENAL_CRONICA', 'INMUSUPR', 'DIAS_INCUBA']] # <- The features that make more sens to me\n#X = balanced_data.drop(columns=outcome_headers + ['DIAS', '#', 'FECHA_SINTOMAS', 'FECHA_DEF', 'FECHA_INGRESO', 'OTRA_CON']) # <- All features but outcomes\ny = balanced_data['MUERTE']\n\n# Scale\nX = pd.DataFrame(PowerTransformer().fit_transform(X), columns=X.columns)\n\n# Reduce Dimensionality\n#pca = PCA(n_components=16).fit(X)\n#print(X.info(), '\\n\\nPCA:')\n#print(np.cumsum(pca.explained_variance_ratio_))\n#X = pca.transform(X) # <- It barely has any effect\n\n# Grid Search\n#grid_search_report(RadiusNeighborsClassifier(),{}, X, y)\n\n# Report cross validation results\npd.options.display.float_format = '{:,.4f}'.format\ndf = pd.DataFrame()\ndf = df.append(get_cv_results(KNeighborsClassifier(n_neighbors=500), X, y))\ndf = df.append(get_cv_results(MLPClassifier(activation='logistic'), X, y))\ndf = df.append(get_cv_results(linear_model.LogisticRegression(), X, y))\ndf = df.append(get_cv_results(linear_model.RidgeClassifier(normalize=True), X, y))\ndf = df.append(get_cv_results(SVC(C=.01, kernel='poly', degree=1), X, y))\n#df = df.append(get_cv_results(DecisionTreeClassifier(), X, y))\n#df = df.append(get_cv_results(RadiusNeighborsClassifier(p=1, weights='distance', radius=10), X, y))\ndisplay(df.reset_index().sort_values(by='F1 Score', ascending=False))\n\nselected_estimator = KNeighborsClassifier(n_neighbors=500)","cf67253f":"results = print_classification_results(selected_estimator, X, y, True)","0a69d98d":"# Imports for Deep Learning\nfrom keras.layers import Conv2D, Dense, Dropout, Flatten\nfrom keras.models import Sequential\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nX_train = np.array(X_train).reshape(7,-1)\ny_train = np.array(y_train).reshape(1,-1)\ndisplay(X_train.shape, y_train.shape)\n\nmodel=Sequential([\n                  Dense(7, input_shape=[7]),\n                  Dense(1, activation=\"sigmoid\")\n                ])\ndisplay(model.summary())\nmodel.compile()\nmodel.fit(X_train, y)","7e811403":"* Diabetes and Hypertension increase with age groups, while Obesity tends to center around 50's\n* There seems to be a direct correlation between Diabetes, Hypertension and Age. So if Age is a major risk factor, maybe due to these conditions.\n* Obesity seems to count towards death rate even in younger age groups","723183fd":"## Death Rate","c3e600e4":"## Algorithm Comparison","bd28af35":"## K-Neares Neighbor Classifier\nThis KNN Classifier is one of the best-performing classifiers tested. However, it's getting a **65% precision score** (not too good if you note that randomly you get a 50% change of guessing) and a **70% recall score**.\nThis accuracy means that if the model predicts someone could die from COVID, it would be true only 65% of the time.\nThe the recall score of 70% means that the other 30% of actual COVID deaths won't be predicted by the model.\n","60c3e4e2":"## Feature Selection\nTo try to predict patient death, these relevant features chosen:\n\n* Age (discarded Hypertension and Diabetes as they all show direct correlation)\n* Sex\n* Obesity\n* Chronic Renal\n* Cardiovascular\n* Immunosuppression","79207996":"# Intro\nAs a first ML practice, I'm analyzing Mexico's COVID patients dataset to find any relation between medical conditions and death reate; and looking for a model that can predict the probability of a person to die from COVID.","c0cd6636":"#### Correlation of other conditions to seath rate\nThese are the non principal conditions, data has been scaled","62f1f746":"# Exploration\n## Incidence of complications by medical condition","56cc4334":"# Dataset\nThis is the official dataset from Mexico's Secretariat of Health regarding confirmed COVID cases in public hospitals.\nLet's see what we have here...","8e412e77":"# Model Selection","c37a31f1":"## Correlation Analysis\n\n### Incidence of conditions among age groups\n\nMost of the conditions have a presence too low to be considered, so only Diabetes, Hypertension and Obesity are analyzed.\n","f3288d53":"* Cardiovascular diseases, chronic renal deseases and immunosuppression seem to present a clustering pattern that may be exploited for a classification algorithm.","15d1a119":"## Clean Data, Select Features and Targets\n* Parse values, filter NaNs.\n* Choose only confirmed positive COVID cases.\n* Select patient conditions as inputs: *EDAD* (age), *SEXO*, *DIABETES*, *EPOC*, *ASMA*, *INMUSUPR*, *HIPERTENSION*, *CARDIOVASCULAR*, *OBESIDAD*, *RENAL_CRONICA*, *TABAQUISMO*, *OTRA_CON* (other).\n* Select complications and death as outputs: *MUERTE* (death), *NEUMONIA*, *UCI*, *INTUBADO*","3da659ba":"# Final Notes\n* Age-Hipertension-Diabetes seems to be the more influent feature on death rate. Sex plays its part too.\n* There is no obvious influence in medical conditions upon death rate. Surprisingly Asthma and Smoking seem to represent the lower death rates.\n* None of the tested models for classification with its parameters (up to 10 models tested), got pass 70% accuracy.\n\nImprovements to data and models are welcome!","3c6b3f6e":"* Complications on female patients are notably lower","9e749355":"* Again, female patients have a lower death rate\n* Above the age of 60, reath rate rises considerably\n* The time a patient spends with symptoms before getting to the hospital does not chance the chances of death"}}