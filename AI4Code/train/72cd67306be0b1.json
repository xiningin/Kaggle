{"cell_type":{"8a039051":"code","b08aeee2":"code","8bb80013":"code","3a807c39":"code","4b5381b4":"code","174c0933":"code","248c250c":"code","0a4500c1":"code","fcb77220":"code","af221d2f":"code","cbb6b654":"code","5914fa26":"code","7a2599aa":"code","6756d8eb":"code","22655c42":"code","607765ca":"markdown","21c45148":"markdown"},"source":{"8a039051":"# import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport optuna\n\nfrom sklearn import model_selection\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import preprocessing\nfrom sklearn import impute\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","b08aeee2":"from pathlib import Path\n\ndata_dir = Path('..\/input\/tabular-playground-series-sep-2021\/')","8bb80013":"# Uncomment this if you want to set your own folds\n# df_train = pd.read_csv(data_dir \/ 'train.csv')\n# skf = model_selection.StratifiedKFold(n_splits=10, shuffle=True, random_state=42) #create 10 folds, modify n_splits to change the number of folds\n\n# df_train['kfold'] = -1\n\n# for fold, (train_idx, valid_idx) in enumerate(skf.split(X=df_train, y=df_train['claim'])):\n#     df_train.loc[valid_idx, 'kfold'] = fold\n\n# df_train.to_csv('train_stratfold.csv', index=False)","3a807c39":"df = pd.read_csv('..\/input\/tpssept2021skfold10\/train_stratfold.csv')\ndf_test = pd.read_csv(data_dir\/'test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\nuseful_features = [c for c in df.columns if c not in ['id', 'claim', 'kfold']]\ndf_test = df_test[useful_features]","4b5381b4":"df.isna().sum() # there are missing values but we opt to not impute. Try imputing and check if the score improves","174c0933":"# Model 1 - XGBClassifier\n# df = pd.read_csv('..\/input\/tpssept2021skfold10\/train_stratfold.csv')\n# df_test = pd.read_csv(data_dir\/'test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\nuseful_features = [c for c in df.columns if c not in ['id', 'claim', 'kfold']]\ndf_test = df_test[useful_features]\n\nfinal_test_predictions = []\nfinal_valid_predictions = {}\nscores = []\n\nfor fold in range(10):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n    \n    valid_ids = xvalid.id.values.tolist()\n\n    ytrain = xtrain['claim']\n    yvalid = xvalid['claim']\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n\n    imputer = impute.SimpleImputer(missing_values=np.nan, strategy='constant', \n                               fill_value=-999, add_indicator=True)\n    \n    xtrain = imputer.fit_transform(xtrain)\n    xvalid = imputer.transform(xvalid)\n    xtest = imputer.transform(xtest)\n    \n    scaler = preprocessing.StandardScaler()\n    xtrain = scaler.fit_transform(xtrain)\n    xvalid = scaler.transform(xvalid)\n    xtest = scaler.transform(xtest)     \n    \n    model = XGBClassifier(\n        max_depth= 2, \n        n_estimators= 10000,\n        random_state=0,\n        use_label_encoder=False,\n        objective='binary:logistic',\n        tree_method='gpu_hist',  # Use GPU acceleration\n        gpu_id=0,\n        predictor='gpu_predictor',\n    )\n    \n    model.fit(xtrain, ytrain, early_stopping_rounds=300, eval_metric='auc', eval_set=[(xvalid, yvalid)], verbose=1000)\n    preds_valid = model.predict_proba(xvalid)[:,1]\n    test_preds = model.predict_proba(xtest)[:,1]\n    final_test_predictions.append(test_preds)\n    final_valid_predictions.update(dict(zip(valid_ids, preds_valid)))\n    auc = roc_auc_score(yvalid, preds_valid)\n    scores.append(auc)\n    \nprint(np.mean(scores), np.std(scores))\nfinal_valid_predictions = pd.DataFrame.from_dict(final_valid_predictions, orient=\"index\").reset_index()\nfinal_valid_predictions.columns = [\"id\", \"pred_1\"]\nfinal_valid_predictions.to_csv(\"train_pred_1.csv\", index=False)\n\nsubmission['claim'] = np.mean(np.column_stack(final_test_predictions), axis=1)\nsubmission.columns = [\"id\", \"pred_1\"]\nsubmission.to_csv(\"test_pred_1.csv\", index=False)","248c250c":"# Model 2 - XGBClassifier\n# df = pd.read_csv('..\/input\/tpssept2021skfold10\/train_stratfold.csv')\n# df_test = pd.read_csv(data_dir\/'test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\nuseful_features = [c for c in df.columns if c not in ['id', 'claim', 'kfold']]\ndf_test = df_test[useful_features]\n\nfinal_test_predictions = []\nfinal_valid_predictions = {}\nscores = []\n\nfor fold in range(10):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n    \n    valid_ids = xvalid.id.values.tolist()\n\n    ytrain = xtrain['claim']\n    yvalid = xvalid['claim']\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]   \n    \n    imputer = impute.SimpleImputer(missing_values=np.nan, strategy='constant', \n                               fill_value=-999, add_indicator=True)\n    \n    xtrain = imputer.fit_transform(xtrain)\n    xvalid = imputer.transform(xvalid)\n    xtest = imputer.transform(xtest)\n    \n    scaler = preprocessing.StandardScaler()\n    xtrain = scaler.fit_transform(xtrain)\n    xvalid = scaler.transform(xvalid)\n    xtest = scaler.transform(xtest)     \n\n    params = {\n            'lambda': 0.004562711234493688, \n            'alpha': 7.268146704546314, \n            'colsample_bytree': 0.6468987558386358, \n            'colsample_bynode': 0.29113878257290376, \n            'colsample_bylevel': 0.8915913499148167, \n            'subsample': 0.37130229826185135, \n            'learning_rate': 0.021671163563123198, \n            'grow_policy': 'lossguide', \n            'max_depth': 18, \n            'min_child_weight': 215, \n            'max_bin': 272\n            }\n    \n    model = XGBClassifier(\n        **params,\n        n_estimators = 10000,\n        random_state=0,\n        use_label_encoder=False,\n        objective='binary:logistic',\n        tree_method='gpu_hist',  # Use GPU acceleration\n        gpu_id=0,\n        predictor='gpu_predictor',\n    )\n    \n    model.fit(xtrain, ytrain, early_stopping_rounds=300, eval_metric='auc', eval_set=[(xvalid, yvalid)], verbose=1000)\n    preds_valid = model.predict_proba(xvalid)[:,1]\n    test_preds = model.predict_proba(xtest)[:,1]\n    final_test_predictions.append(test_preds)\n    final_valid_predictions.update(dict(zip(valid_ids, preds_valid)))\n    auc = roc_auc_score(yvalid, preds_valid)\n    scores.append(auc)\n    \nprint(np.mean(scores), np.std(scores))\nfinal_valid_predictions = pd.DataFrame.from_dict(final_valid_predictions, orient=\"index\").reset_index()\nfinal_valid_predictions.columns = [\"id\", \"pred_2\"]\nfinal_valid_predictions.to_csv(\"train_pred_2.csv\", index=False)\n\nsubmission['claim'] = np.mean(np.column_stack(final_test_predictions), axis=1)\nsubmission.columns = [\"id\", \"pred_2\"]\nsubmission.to_csv(\"test_pred_2.csv\", index=False) # 0.8038324284174964 0.0011344720245805547","0a4500c1":"# Model 3 - CatBoostClassifier\n# df = pd.read_csv('..\/input\/tpssept2021skfold10\/train_stratfold.csv')\n# df_test = pd.read_csv(data_dir\/'test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\nuseful_features = [c for c in df.columns if c not in ['id', 'claim', 'kfold']]\ndf_test = df_test[useful_features]\n\nfinal_test_predictions = []\nfinal_valid_predictions = {}\nscores = []\n\nfor fold in range(10):\n    xtrain = df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n    \n    valid_ids = xvalid.id.values.tolist()\n    \n    ytrain = xtrain['claim']\n    yvalid = xvalid['claim']\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    imputer = impute.SimpleImputer(missing_values=np.nan, strategy='constant', \n                               fill_value=-999, add_indicator=True)\n    \n    xtrain = imputer.fit_transform(xtrain)\n    xvalid = imputer.transform(xvalid)\n    xtest = imputer.transform(xtest)\n    \n    scaler = preprocessing.StandardScaler()\n    xtrain = scaler.fit_transform(xtrain)\n    xvalid = scaler.transform(xvalid)\n    xtest = scaler.transform(xtest)     \n\n    params = {\n        'verbose': 0,\n        'n_estimators': 10000,\n         'max_depth': 6,\n         'learning_rate': 0.04,\n        \"grow_policy\": \"SymmetricTree\",\n        \"l2_leaf_reg\": 3.0,\n        \"random_strength\": 1.0,\n        'task_type':'GPU'\n        }\n    \n    # Define the model \n    model = CatBoostClassifier(**params, random_state=1, eval_metric='AUC')\n    model.fit(xtrain, ytrain, early_stopping_rounds=300, \n              eval_set=[(xvalid, yvalid)], verbose=1000)\n\n    preds_valid = model.predict_proba(xvalid)[:,1]\n    test_preds = model.predict_proba(xtest)[:,1]\n    final_test_predictions.append(test_preds)\n    final_valid_predictions.update(dict(zip(valid_ids, preds_valid)))\n    auc = roc_auc_score(yvalid, preds_valid)\n    scores.append(auc)\n\nprint(np.mean(scores), np.std(scores))\nfinal_valid_predictions = pd.DataFrame.from_dict(final_valid_predictions, orient=\"index\").reset_index()\nfinal_valid_predictions.columns = ['id', 'pred_3']\nfinal_valid_predictions.to_csv('train_pred_3.csv', index=False)\n\nsubmission['claim'] = np.mean(np.column_stack(final_test_predictions), axis=1)\nsubmission.columns = ['id', 'pred_3']\nsubmission.to_csv('test_pred_3.csv', index=False)","fcb77220":"# LightGBM\n# df = pd.read_csv('..\/input\/tpssept2021skfold10\/train_stratfold.csv')\n# df_test = pd.read_csv(data_dir\/'test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\nuseful_features = [c for c in df.columns if c not in ['id', 'claim', 'kfold']]\ndf_test = df_test[useful_features]\n\nfinal_test_predictions = []\nfinal_valid_predictions = {}\nscores = []\n\nfor fold in range(5):\n    xtrain = df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n    \n    valid_ids = xvalid.id.values.tolist()\n    \n    ytrain = xtrain['claim']\n    yvalid = xvalid['claim']\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n\n    params = {\n        'device_type':'gpu',  # Use GPU acceleration\n        'gpu_device_id':0,\n        'gpu_platform_id':0,\n        'objective':'binary',\n        'metric': 'auc',\n        'num_leaves': 150,\n         'learning_rate': 0.001921842542288596,\n         'max_depth': 1,\n         'reg_alpha': 1.9202032662611252e-08,\n         'reg_lambda': 0.00024793231855030215,\n         'min_child_weight': 0.9162585787332472,\n        'n_estimators': 10000,\n        }\n    \n    # Define the model \n    model = LGBMClassifier(**params, random_state=fold)\n    model.fit(xtrain, ytrain, early_stopping_rounds=300, eval_set=[(xvalid, yvalid)], verbose=1000)\n\n    preds_valid = model.predict_proba(xvalid)[:,1]\n    test_preds = model.predict_proba(xtest)[:,1]\n    final_test_predictions.append(test_preds)\n    final_valid_predictions.update(dict(zip(valid_ids, preds_valid)))\n    auc = roc_auc_score(yvalid, preds_valid)\n    scores.append(auc)\n\nprint(np.mean(scores), np.std(scores))\nfinal_valid_predictions = pd.DataFrame.from_dict(final_valid_predictions, orient=\"index\").reset_index()\nfinal_valid_predictions.columns = ['id', 'pred_4']\nfinal_valid_predictions.to_csv('train_pred_4.csv', index=False)\n\nsubmission['claim'] = np.mean(np.column_stack(final_test_predictions), axis=1)\nsubmission.columns = ['id', 'pred_4']\nsubmission.to_csv('test_pred_4.csv', index=False)","af221d2f":"## Stack train and test oof predictions\ndf = pd.read_csv('..\/input\/tpssept2021skfold10\/train_stratfold.csv')\ndf_test = pd.read_csv(data_dir\/'test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\ndf1 = pd.read_csv(\"train_pred_1.csv\")\ndf2 = pd.read_csv(\"train_pred_2.csv\")\ndf3 = pd.read_csv(\"train_pred_3.csv\")\ndf4 = pd.read_csv(\"train_pred_4.csv\")\n\ndf_test1 = pd.read_csv(\"test_pred_1.csv\")\ndf_test2 = pd.read_csv(\"test_pred_2.csv\")\ndf_test3 = pd.read_csv(\"test_pred_3.csv\")\ndf_test4 = pd.read_csv(\"test_pred_4.csv\")\n\ndf = df.merge(df1, on=\"id\", how=\"left\")\ndf = df.merge(df2, on=\"id\", how=\"left\")\ndf = df.merge(df3, on=\"id\", how=\"left\")\ndf = df.merge(df4, on=\"id\", how=\"left\")\n\ndf_test = df_test.merge(df_test1, on=\"id\", how=\"left\")\ndf_test = df_test.merge(df_test2, on=\"id\", how=\"left\")\ndf_test = df_test.merge(df_test3, on=\"id\", how=\"left\")\ndf_test = df_test.merge(df_test4, on=\"id\", how=\"left\")\n\ndf.head()\n\ndf.to_csv('level0_train_fold.csv', index=False)\ndf_test.to_csv('level0_test.csv', index=False)","cbb6b654":"from sklearn.linear_model import LogisticRegression","5914fa26":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer","7a2599aa":"# Final predictions\n# df = pd.read_csv('.\/level0_train_fold.csv')\n# df_test = pd.read_csv('.\/level0_test.csv')\nsubmission = pd.read_csv(data_dir\/'sample_solution.csv')\n\nuseful_features = ['pred_1', 'pred_2', 'pred_3', 'pred_4']\ndf_test = df_test[useful_features]\n\nfinal_predictions = []\nscores = []\n\nfor fold in range(10):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain['claim']\n    yvalid = xvalid['claim']\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    imputer = IterativeImputer(random_state=0)\n    xtrain[useful_features] = imputer.fit_transform(xtrain[useful_features])\n    xvalid[useful_features] = imputer.transform(xvalid[useful_features])\n    xtest[useful_features] = imputer.transform(xtest[useful_features])\n    \n    model = LogisticRegression(fit_intercept=False)\n    model.fit(xtrain, ytrain)\n    \n    preds_valid = model.predict_proba(xvalid)[:,1]\n    test_preds = model.predict_proba(xtest)[:,1]\n    final_predictions.append(test_preds)\n    auc = roc_auc_score(yvalid, preds_valid)\n    print(fold, auc)\n    scores.append(auc)\n\nprint(np.mean(scores), np.std(scores))","6756d8eb":"submission['claim'] = np.mean(np.column_stack(final_predictions), axis=1)\nsubmission.to_csv('submission_blend.csv', index=False)","22655c42":"!pip install chime --quiet\n\nimport chime\nimport time\nchime.success()\ntime.sleep(0.5)\nchime.success()","607765ca":"## Create train folds","21c45148":"## Train model"}}