{"cell_type":{"2ae01c40":"code","2eccebbe":"code","a15646c2":"code","fbea6eec":"code","bb601f72":"code","5beeda64":"code","58dcf033":"code","6c6ef53e":"code","6e827542":"code","5e5154f1":"code","c2092d8a":"code","fb90266c":"code","ee24f4cc":"code","9d81506c":"code","503d0708":"code","33fb5b53":"code","c08d7955":"code","01096c52":"code","595eb0fa":"code","9d547056":"markdown","e1e2a29f":"markdown","dba4376c":"markdown","97d51714":"markdown","0045e62a":"markdown","f091b2df":"markdown"},"source":{"2ae01c40":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n## General Libraries\nimport pandas as pd\nimport numpy as np\nimport re\n\n## modules for \n## stemming and lemmatization \nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nfrom nltk.corpus import stopwords\n\n## some sklearn modules\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, GridSearchCV\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score","2eccebbe":"## Loading the data\n## removing empty columns\n## appropriate renaming others\ndf = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", sep=\",\", encoding='latin-1').iloc[:,:2]\ndf.rename(columns={\"v1\":\"Class\", \"v2\":\"Text\"}, inplace=True)\ndf.head()","a15646c2":"## stemmer object\nps = PorterStemmer()\n\n## Lemmatizer object\nwn = WordNetLemmatizer()","fbea6eec":"## A function to clean the text\ndef clean_text(st, process=\"lemma\"):\n    \"\"\"\n        clean_text: returns the stem or lemma of a given word\n        \n        args: \n            st - input string\n            process - takes either \"stem\" or \"lemma\"\n                    - stem performes stemming and lemma performs lemmatization\n    \"\"\"\n    cleaned = re.sub(\"[^A-z]\", \" \", st)\n    cleaned = cleaned.lower().split()\n    \n    if process==\"stem\": cleaned = [ps.stem(wrd) for wrd in cleaned if wrd not in stopwords.words(\"english\")]\n    elif process==\"lemma\": cleaned = [wn.lemmatize(wrd) for wrd in cleaned if wrd not in stopwords.words(\"english\")]\n    \n    return \" \".join(cleaned)\n\n## updating dataframe\ndf[\"Stemmed\"] = df.Text.apply(lambda x:clean_text(x, \"stem\"))\ndf[\"Lemmatized\"] = df.Text.apply(lambda x:clean_text(x, \"lemma\"))\n\ndf.head()","bb601f72":"## initializing an empty dict for storing metrics\nmetrics = {\n    \"stem_NB\":[], \"lemma_NB\":[],\n    \"stem_SGD\":[], \"lemma_SGD\":[],\n}\n\n## Loops runs through all keys of metrics\n## splits the X, y accordingly\n## trains, tests and records the evaluation metric\nfor key in metrics.keys():\n    if \"stem\" in key: X, y = df.Stemmed, pd.get_dummies(df.Class).iloc[:,1]\n    elif \"lemma\" in key: X, y = df.Lemmatized, pd.get_dummies(df.Class).iloc[:,1]\n\n    skf = StratifiedKFold(n_splits=5)\n    for train_index, test_index in skf.split(X, y):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        vect = CountVectorizer(max_features=2500)\n        X_train_dtm = vect.fit_transform(X_train)\n        X_test_dtm = vect.transform(X_test)\n        \n        if \"NB\" in key:\n            clf = MultinomialNB()\n        elif \"SGD\" in key:\n            clf = SGDClassifier()\n            \n        clf.fit(X_train_dtm, y_train)\n        y_pred = clf.predict(X_test_dtm)\n        \n        metrics[key].append(accuracy_score(y_test, y_pred))\n\n    scores = np.array(metrics[key])\n    print('Mean accuracy: ', np.mean(scores, axis=0))\n    print('Std for accuracy: ', np.std(scores, axis=0))\n    print(f\"{key} ------------------------------------: complete\\n\")","5beeda64":"## metrics recieved\nmetricsDf = pd.DataFrame.from_dict(metrics).transpose()\nmetricsDf","58dcf033":"## a heatmap of metrics\nmetricsDf.style.background_gradient(cmap=\"viridis\")","6c6ef53e":"### Final Splitting of X,y\nX, y = df.Stemmed, pd.get_dummies(df.Class).iloc[:,1]\n\nskf = StratifiedKFold(n_splits=5)\nfor train_index, test_index in skf.split(X, y):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    vect = CountVectorizer(max_features=2500)\n    X_train_dtm = vect.fit_transform(X_train)\n    X_test_dtm = vect.transform(X_test)","6e827542":"## required classifier\nclf = MultinomialNB()\nclf.fit(X_train_dtm, y_train)","5e5154f1":"## Training Scores\nclf.score(X_train_dtm, y_train)","c2092d8a":"## Cross validation Scores\ncross_val_score(clf, X_train_dtm, y_train, cv=5)","fb90266c":"## log prior probabilities\nclf.class_log_prior_","ee24f4cc":"## params for grid search\nparams = { 'alpha': [0.01, 0.1, 0.5, 1.0, 10.0, ] }\n\n## grid searching the req clf\ngrid_search = GridSearchCV(clf, param_grid=params, n_jobs=-1, cv=5)\ngrid_search.fit(X_train_dtm, y_train)","9d81506c":"grid_search.best_params_","503d0708":"grid_search.best_score_","33fb5b53":"grid_search.best_estimator_","c08d7955":"grid_search.best_estimator_.score(X_train_dtm, y_train)","01096c52":"grid_search.best_estimator_.score(X_test_dtm, y_test)","595eb0fa":"### Final Testing with test data\nfin_clf = grid_search.best_estimator_\nfin_clf.fit(X_train_dtm, y_train)\nprint(f\"Test Scores: {fin_clf.score(X_test_dtm, y_test)}\")\n\ny_pred = fin_clf.predict(X_test_dtm)\nprint(f\"Accuracy: {accuracy_score(y_pred, y_test)}\")","9d547056":"#### Evaluation","e1e2a29f":"As per the above analysis, stemming works well for this dataset than Lemmatization. And Also Navie Bayes Classifer worked well than SGD.","dba4376c":"### Preprocessing","97d51714":"#### Loading Libraries","0045e62a":"### Hyperparameter Tuning","f091b2df":"#### Final Split"}}