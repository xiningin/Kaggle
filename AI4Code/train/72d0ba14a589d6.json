{"cell_type":{"48a4994c":"code","ec8d21ea":"code","1309b35b":"code","cc52d94c":"code","7601463e":"code","dda3ddc4":"code","218ecdf6":"code","055eaf47":"code","724a0d9c":"code","17f763c9":"code","e6acbc6e":"code","e5e92fd3":"code","b56b5c90":"code","1a293bec":"code","aeeebd46":"code","25605a09":"code","ac39c875":"code","53d7d4db":"code","ca4899e6":"code","d0f6826a":"code","7fefb35c":"code","2c9580fe":"code","6166ef92":"code","d561898f":"code","344db222":"code","9bd7c168":"code","cdfbec5b":"code","0fa14a0e":"code","f8da73df":"code","32dd0924":"code","d7df0ced":"code","eadf20a8":"code","bd39b52b":"code","11f5252f":"code","f8321332":"code","1d5959d5":"code","0cfe993c":"code","b76e1076":"code","ae223485":"code","466d5a7a":"code","0772e35f":"code","b5a155f0":"code","c10974e8":"code","232e1764":"code","3a550432":"code","97f54f47":"code","6e6f4435":"code","60197709":"code","ceaa1d80":"code","cc215ee7":"code","b693b79d":"code","d7599eeb":"code","27f0d4f1":"code","0451b049":"code","65f8eefd":"code","587ad698":"code","02863ee6":"code","a038e619":"code","f5ffda63":"code","633bf49f":"code","1bec2cfe":"code","c9370d84":"code","f4ba7402":"code","5b224865":"code","9008866e":"code","e31999c7":"code","03fe346a":"code","8854a96d":"code","446d241a":"code","74fc5ebd":"code","520ad1d0":"code","442892c8":"code","c3e3e375":"code","f56df16e":"code","a2495084":"code","827d1da5":"code","a9fc5c0c":"code","9e7edbe1":"code","2ead4b68":"code","e7f046dd":"code","93a728db":"code","afafa369":"code","21c2bf44":"code","ac133b91":"code","9a556fbb":"code","168e2d1b":"code","dd6912dc":"code","09a4a8cb":"code","73847d23":"code","afbe74a0":"code","eac278bd":"code","c4e7fd49":"code","453e898f":"code","2945cdfb":"code","a76d99b9":"code","1936529d":"code","52796eb7":"code","bcbe8899":"code","2581ae8f":"code","b2f5137b":"code","977b073e":"code","9a00beff":"markdown","3098d974":"markdown","188e8867":"markdown","dcc4ecf4":"markdown","7c0df356":"markdown","dce3344f":"markdown","f44e468c":"markdown","4b732507":"markdown","a977efdb":"markdown","df263815":"markdown","06831a37":"markdown","9c2edf6d":"markdown","47a17c87":"markdown","ec911590":"markdown","ed0d1662":"markdown","8e69e0a7":"markdown","cbde1a29":"markdown","cc9d0c84":"markdown","243edfb9":"markdown","96c2c95d":"markdown","02ef166e":"markdown","ae158e3f":"markdown","e16baac1":"markdown","b93f4c62":"markdown","a7b170bd":"markdown","2445a028":"markdown","12b45a83":"markdown","831fcb1b":"markdown","5a7fe3c7":"markdown","5a53975f":"markdown","1b5ac405":"markdown","742a854c":"markdown","ad0f909d":"markdown","476096c6":"markdown"},"source":{"48a4994c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec8d21ea":"#linear algebra and data manipulation\nimport numpy as np\nimport pandas as pd\n\n#visualation imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas.plotting import scatter_matrix\n%matplotlib inline\n\n#consistent sized plots\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 12,5\nrcParams['axes.labelsize'] = 12\nrcParams['xtick.labelsize'] = 12\nrcParams['ytick.labelsize'] = 12\nrcParams['axes.titlesize'] = 15\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings(action='ignore',category=DeprecationWarning)\nwarnings.filterwarnings(action='ignore',category=FutureWarning)\n\n#data preprocessing\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n#models\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge,Lasso\nfrom sklearn.svm import LinearSVR\nfrom sklearn.linear_model import PassiveAggressiveRegressor\n#model evaluation\nfrom sklearn.metrics import mean_squared_error\n\n#deep learning models\nimport tensorflow as tf","1309b35b":"#load the dataset \ntrain = pd.read_csv('\/kaggle\/input\/machine-hack-work-hour-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/machine-hack-work-hour-prediction\/test.csv')","cc52d94c":"#view the dataset\ntrain.head()","7601463e":"#check the info .. \ntrain.info()","dda3ddc4":"#check the info of the test data\ntest.info()","218ecdf6":"#basic stats of the numerical features\ntrain.describe()","055eaf47":"#plot of the hours per week\nplt.hist(train['hours-per-week'],bins=50,color = 'r',alpha=0.5)\nplt.title('Histogram Plot of the Hours per Week')\nplt.grid()\nplt.show()","724a0d9c":"#pair plot of all the numerical features .. \nsns.pairplot(train,hue='sex',diag_kind='kde')\nplt.show()","17f763c9":"#list of categorical features\ncat_features = train.select_dtypes(include='object').columns.to_list()\ncat_features","e6acbc6e":"#check the count of the unique values\nfor col in cat_features:\n    print('Feature Name: {}'.format(col))\n    print(train[col].value_counts().sort_values(ascending=False))    \n    print('\\n')","e5e92fd3":"#boxplot of the hours per week categorized based on income category \nplt.figure(figsize=(15,7))\nsns.boxplot(x='income',y='hours-per-week',data=train)\nplt.title('Boxplot of Work Hours per Week vs Income')\nplt.grid()\nplt.show()","b56b5c90":"#boxplot of the hours per week categorized based on country\nplt.figure(figsize=(21,7))\nsns.boxplot(x='native-country',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Native Country',)\nplt.xlabel('Native Country')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","1a293bec":"#boxplot of the hours per week categorized based on income category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='sex',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Sex',)\nplt.xlabel('Native Country')\nplt.ylabel('Sex')\nplt.grid()\nplt.show()","aeeebd46":"#boxplot of the hours per week categorized based on income category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='relationship',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Relationship',)\nplt.xlabel('Relationship')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","25605a09":"#boxplot of the hours per week categorized based on income category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='race',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Race',)\nplt.xlabel('Race')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","ac39c875":"#boxplot of the hours per week categorized based on income category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='occupation',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Occupation',)\nplt.xlabel('Occupation')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","53d7d4db":"#boxplot of the hours per week categorized based on income category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='marital-status',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Marital Status',)\nplt.xlabel('Marital Status')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","ca4899e6":"#boxplot of the hours per week categorized based on workclass category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='workclass',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Workclass',)\nplt.xlabel('Workclass')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","d0f6826a":"#boxplot of the hours per week categorized based on education category \nplt.figure(figsize=(21,7))\nsns.boxplot(x='education',y='hours-per-week',data=train)\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Education')\nplt.xlabel('Education')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","7fefb35c":"#box plot of the years of education\nplt.boxplot(train['education-num'])\nplt.title('Box Plot of Number of Years of Education')\nplt.grid()\nplt.show()","2c9580fe":"#boxplot of the workers age\nplt.boxplot(train['age'])\nplt.title('Box Plot of Workers Age')\nplt.grid()\nplt.show()","6166ef92":"#first quartile age\nQ1 = np.percentile(train['age'], 25, interpolation = 'midpoint')\n# Third quartile (Q3)\nQ3 = np.percentile(train['age'], 75, interpolation = 'midpoint')\n#Inter Quartile Range\nIQR = Q3 - Q1\nprint('First Quartile Age {}'.format(Q1))\nprint('Third Quartile Age {}'.format(Q3))\nprint('Inter Quartile Age {}'.format(IQR))","d561898f":"#check the worker who is more than years of age\ntrain[train['age'] > 90]","344db222":"#number of rows where capital gain is less than 0\nprint('Number of samples with negative capital gain {}'.format(len(train[train['capital-gain'] < 0])))","9bd7c168":"plt.boxplot(train['capital-gain'])\nplt.title('Box Plot of Workers Capital Gain')\nplt.yscale('log')\nplt.ylabel('log scale')\nplt.grid()\nplt.show()","cdfbec5b":"#get the correlation \ntrain.corr()['hours-per-week'].sort_values(ascending=False)[1:]","0fa14a0e":"#first quartile hours per week\nQ1 = np.percentile(train['hours-per-week'], 25, interpolation = 'midpoint')\n# Third quartile (Q3)\nQ3 = np.percentile(train['hours-per-week'], 75, interpolation = 'midpoint')\n#Inter Quartile Range\nIQR = Q3 - Q1\nprint('First Quartile Work Hours {}'.format(Q1))\nprint('Third Quartile Work Hours {}'.format(Q3))\nprint('Inter Quartile Work Hours {}'.format(IQR))","f8da73df":"#create a heatmap\nsns.heatmap(train.corr(),annot=True)\nplt.title('Plot of the correlation heatmap')\nplt.show()","32dd0924":"plt.scatter(x='age',y='hours-per-week',data=train,alpha=0.5,c='r')\nplt.title('Scatter Plot of Work hours vs Age')\nplt.xlabel('Worker Age')\nplt.ylabel('Work Hours per Week')\nplt.show()","d7df0ced":"#visualize the same using a regression plot\nsns.regplot(x='age',y='hours-per-week',data=train,y_jitter=0.5,scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\nplt.title('Regression Plot of Work Hours vs Age')\nplt.xlabel('Worker Age')\nplt.ylabel('Work Hours per Week')\nplt.show()","eadf20a8":"sns.regplot(x='education-num',y='hours-per-week',data=train,y_jitter=0.5,scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nplt.title('Regression Plot of Work Hours vs Years of Education')\nplt.xlabel('Years of Education')\nplt.ylabel('Work Hours per Week')\nplt.show()","bd39b52b":"#check the count of the income categories\nax = sns.countplot(train['income'], order = train['income'].value_counts().index)\n\nfor p, label in zip(ax.patches, train['income'].value_counts()):\n    ax.annotate(label, (p.get_x()+0.385, p.get_height()+0.15))\nplt.title('Plot of the count of the income categories')\nplt.show()","11f5252f":"#check the count of the years of education categories\nax = sns.countplot(train['education-num'], order = train['education-num'].value_counts().index)\n\nfor p, label in zip(ax.patches, train['education-num'].value_counts()):\n    ax.annotate(label, (p.get_x() + 0.25, p.get_height() + 0.5))\nplt.title('Plot of the count of the years of education categories')\nplt.show()","f8321332":"#check the count of the years of education categories\nax = sns.countplot(train['education-num'], order = train['education-num'].value_counts().index,hue=train['sex'])\nplt.title('Countplot of the years of education separated by gender')\nplt.show()","1d5959d5":"ax = sns.countplot(train['sex'], order = train['sex'].value_counts().index)\n\nfor p, label in zip(ax.patches, train['sex'].value_counts()):\n    ax.annotate(label, (p.get_x()+0.385, p.get_height()+0.15))\nplt.title('Countplot of the gender distribution')\nplt.show()","0cfe993c":"ax = sns.countplot(train['native-country'], order = train['native-country'].value_counts().index[:10])\n\n\nfor p, label in zip(ax.patches, train['native-country'].value_counts()):\n    ax.annotate(label, (p.get_x()+0.385, p.get_height()+0.5))\nplt.xticks(rotation='vertical')\nplt.title('Countplot of the top 10 native country representation in the dataset')\nplt.show()","b76e1076":"#check the count of the type of education\nax = sns.countplot(train['education'], order = train['education'].value_counts().index)\n\nfor p, label in zip(ax.patches, train['education'].value_counts()):\n    ax.annotate(label, (p.get_x() + 0.25, p.get_height() + 0.5))\nplt.xticks(rotation='vertical')\nplt.title('Plot of the count of the type of education')\nplt.show()","ae223485":"#view of the data\ntrain.head(3)","466d5a7a":"train.tail(3)","0772e35f":"#split the data into features and labels\nX = train.drop('hours-per-week',axis=1)\ny = train[['hours-per-week']]\n\nprint(X.shape,y.shape)","b5a155f0":"#trim the whitespaces in the values of the categorical columns\nfor col in cat_features:\n    X[col] = X[col].str.strip()\n    test[col] = test[col].str.strip()","c10974e8":"#club all countries other than United-States into one category\nX['native-country-new'] = X['native-country'].apply(lambda x: 'Other' if (x!='United-States') else 'United-States')\n#apply the changes on the test data\ntest['native-country-new'] = test['native-country'].apply(lambda x: 'Other' if (x!='United-States') else 'United-States')","232e1764":"X['native-country-new'].value_counts()","3a550432":"test['native-country-new'].value_counts()","97f54f47":"#boxplot of the hours per week categorized based on country\nsns.boxplot(x=X['native-country-new'],y=y['hours-per-week'])\nplt.xticks(rotation='vertical')\nplt.title('Boxplot of Work Hours per Week vs Native Country',)\nplt.xlabel('Native Country')\nplt.ylabel('Work Hours Per Week')\nplt.grid()\nplt.show()","6e6f4435":"X['education'].value_counts()","60197709":"#clubbing categories in the education feature\nX['education-new'] = X['education'].apply(lambda x: 'Some-school' if x in ['11th','7th-8th','10th','5th-6th','9th','12th','1st-4th','Preschool'] else x)","ceaa1d80":"#check all the new values under the education feature after applying the changes\nX['education-new'].value_counts()","cc215ee7":"#apply the same changes on the test data\ntest['education-new'] = test['education'].apply(lambda x: 'Some-school' if x in ['11th','7th-8th','10th','5th-6th','9th','12th','1st-4th','Preschool'] else x)","b693b79d":"X['marital-status'].value_counts().sort_values(ascending=False)","d7599eeb":"#create a new feature based on age which is categorical based on various age groups \nX['age-new'] = pd.cut(X['age'],bins=[0,30,50,70,90,100],labels=['young','mid','senior','super-senior','centenarian'])","27f0d4f1":"#apply the same changes in the test data\ntest['age-new'] = pd.cut(X['age'],bins=[0,30,50,70,90,100],labels=['young','mid','senior','super-senior','centenarian'])","0451b049":"X['education-num'].value_counts()","65f8eefd":"#create a new feature based on years of education, this will change to categorical \nX['education-num-new'] = pd.cut(X['education-num'],bins=[0,10,20],labels=['under-10','above-10'])\ntest['education-num-new'] = pd.cut(X['education-num'],bins=[0,10,20],labels=['under-10','above-10'])","587ad698":"cat_features","02863ee6":"#clubbing categories in the race category -- . white and black \nX['race-new'] = X['race'].apply(lambda x: 'Black' if x not in ['White'] else x )\ntest['race-new'] = test['race'].apply(lambda x: 'Black' if x not in ['White'] else x )","a038e619":"#reducing the number of categories in the marital status, all  staying single clubbed into one category\nX['marital-status-new'] = X['marital-status'].apply(lambda x: 'Single' if x in ['Never-Married','Divorced','Separated','Widowed'] else x)\ntest['marital-status-new'] = test['marital-status'].apply(lambda x: 'Single' if x in ['Never-Married','Divorced','Separated','Widowed'] else x)\n","f5ffda63":"#club all the government employees into one category\nX['workclass-new'] = X['workclass'].apply(lambda x: 'Goverment' if x in ['Local-gov','State-gov','Federal-gov'] else x)\ntest['workclass-new'] = test['workclass'].apply(lambda x: 'Goverment' if x in ['Local-gov','State-gov','Federal-gov'] else x)","633bf49f":"X['education'].value_counts()","1bec2cfe":"#drop the least correlated features\nX.drop(['fnlwgt','capital-loss'],axis=1,inplace=True)\ntest.drop(['fnlwgt','capital-loss'],axis=1,inplace=True)","c9370d84":"#first quartile hours per week\nQ1 = np.percentile(train['capital-gain'], 25, interpolation = 'midpoint')\n# Third quartile (Q3)\nQ3 = np.percentile(train['capital-gain'], 75, interpolation = 'midpoint')\n#Inter Quartile Range\nIQR = Q3 - Q1\nprint('First Quartile Capital Gain {}'.format(Q1))\nprint('Third Quartile Capital Gain {}'.format(Q3))\nprint('Inter Quartile Capital Gain {}'.format(IQR))","f4ba7402":"#visualize the hours per week against capital gain\nsns.regplot(x='capital-gain',y='hours-per-week',data=train,y_jitter=0.5,scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\nplt.title('Regression Plot of Work Hours vs Capital Gain')\nplt.xlabel('Worker Capital Gain')\nplt.ylabel('Work Hours per Week')\nplt.show()","5b224865":"#create separate bins for the capital gain\nX['capital-gain-new'] = pd.cut(X['capital-gain'],bins=[float('-inf'),2000,6000,10000,17000],labels=['very-low','low','medium','high'])\ntest['capital-gain-new'] = pd.cut(test['capital-gain'],bins=[float('-inf'),2000,6000,10000,17000],labels=['very-low','low','medium','high'])","9008866e":"X.columns","e31999c7":"test.columns","03fe346a":"#drop the redundant columns\ndrop_columns = ['age','workclass','education','marital-status','race','capital-gain','native-country','education-num']\n\nfor col in drop_columns:\n    X.drop(col,axis=1,inplace=True)\n    test.drop(col,axis=1,inplace=True)\ntest.drop('hours-per-week',axis=1,inplace=True)","8854a96d":"#verify if both the X and test have the same column list\nX.columns.to_list() == test.columns.to_list()","446d241a":"#check the new data\nX.head()","74fc5ebd":"X.info()","520ad1d0":"#new set of categorical features\ncat_features = X.columns.to_list()\ncat_features","442892c8":"random_state = 42\ntest_size = 0.2","c3e3e375":"#split the data\nX_train,X_test,y_train,y_test = train_test_split(X,y,random_state=random_state,test_size=test_size,stratify=X['occupation'])\n\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","f56df16e":"# encode the categorical features \nencoder = OneHotEncoder(sparse=False,handle_unknown='ignore')\nX_train_1_hot =  encoder.fit_transform(X_train)\nX_test_1_hot = encoder.transform(X_test)\ntest_1_hot = encoder.transform(test)","a2495084":"#check the shape of the transformed data\nX_train_1_hot.shape, X_test_1_hot.shape, test_1_hot.shape","827d1da5":"#baseline model with a simple model\nmodel = LinearRegression(normalize=True)\n\n#model = LinearSVR(random_state=42,C= 1.0,max_iter=2000)\n\nmodel.fit(X_train_1_hot,np.ravel(y_train))\n#predict on the X_test and X_train\nX_test_predictions = model.predict(X_test_1_hot)\nX_train_predictions = model.predict(X_train_1_hot)","a9fc5c0c":"#plot of the predicted data \nplt.hist(X_test_predictions, color='b', alpha=0.35, histtype='stepfilled',bins=50)\nplt.title('Plot of the predicted hours per week on the X_test dataset')\nplt.grid()\nplt.show()","9e7edbe1":"#evaluation metric -- root mean squared error on the X_train and X_test dataset\nprint('Root Mean Squared error on the X_test set')\nprint(np.sqrt(mean_squared_error(y_test,X_test_predictions)))\nprint('--------------------------------------------')\nprint('Root Mean Squared error on the X_train set')\nprint(np.sqrt(mean_squared_error(y_train,X_train_predictions)))","2ead4b68":"#predict on the actual test set\n#final_predictions = model.predict(test_1_hot)\n#submission = pd.DataFrame(data=final_predictions,columns=['hours-per-week'])\n#create the submission file\n#submission.to_csv('submission_3.csv',index=False)","e7f046dd":"final_predictions = model.predict(test_1_hot)","93a728db":"#plot of the predicted data \nplt.hist(final_predictions, color='r', alpha=0.3, histtype='stepfilled',bins=50)\nplt.title('Plot of the predicted hours per week on the test dataset')\nplt.grid()\nplt.show()","afafa369":"def deep_model(X_train,activation='relu',optimizer='adam'):\n    '''Deep learing model'''\n    model = tf.keras.Sequential()\n    #add the layers\n    model.add(tf.keras.layers.Dense(64,input_dim=X_train.shape[1],activation=activation))\n    model.add(tf.keras.layers.Dense(32,activation=activation))\n    model.add(tf.keras.layers.Dense(16,activation=activation))\n    model.add(tf.keras.layers.Dense(1))\n    #compile the model\n    model.compile(loss='mean_squared_error',optimizer=optimizer,metrics=['mse'])\n    #return the model\n    return model","21c2bf44":"y_train_arr = np.asarray(y_train)\ny_test_arr = np.asarray(y_test)","ac133b91":"#instantiate the model\nmodel = deep_model(X_train=X_train_1_hot,activation='relu',optimizer='adam')\n\n#initialize the variables \nbatch_size = 64\nepochs = 100\npatience = 25\n#define the callback\nearly_stop = tf.keras.callbacks.EarlyStopping(patience=patience,restore_best_weights=True)\n#fit the model\nhistory = model.fit(X_train_1_hot,y_train_arr,epochs=epochs,batch_size=batch_size,\n                   validation_data=(X_test_1_hot,y_test_arr),callbacks=[early_stop],verbose=2)","9a556fbb":"#create a dataframe of model history\nmodel_history = pd.DataFrame(data = history.history)","168e2d1b":"#plot the model training history \nmodel_history[['mse','val_mse','loss','val_loss']].plot()\nplt.title('Model History')\nplt.show()","dd6912dc":"#predictions and model eveluation\nX_test_predictions_nn = model.predict(X_test_1_hot)\nX_train_predictions_nn = model.predict(X_train_1_hot)\n\n#evaluation metric -- root mean squared error on the X_train and X_test dataset\nprint('Root Mean Squared error on the X_test set')\nprint(np.sqrt(mean_squared_error(y_test_arr,X_test_predictions_nn)))\nprint('--------------------------------------------')\nprint('Root Mean Squared error on the X_train set')\nprint(np.sqrt(mean_squared_error(y_train_arr,X_train_predictions_nn)))","09a4a8cb":"#predict on the actual test set\nfinal_predictions_nn = model.predict(test_1_hot)\nsubmission = pd.DataFrame(data=final_predictions_nn,columns=['hours-per-week'])\n#create the submission file\nsubmission.to_csv('submission_nn_2.csv',index=False)","73847d23":"#plot of the predicted data X_test\nplt.hist(X_test_predictions_nn, color='b', alpha=0.3, histtype='stepfilled',bins=50)\nplt.title('Plot of the predicted hours per week on the X_test dataset')\nplt.grid()\nplt.show()","afbe74a0":"#plot of the predicted data \nplt.hist(final_predictions_nn, color='r', alpha=0.3, histtype='stepfilled',bins=50)\nplt.title('Plot of the predicted hours per week on the test dataset')\nplt.grid()\nplt.show()","eac278bd":"#stack the X_train and X_test \nX_full_1_hot = np.vstack((X_train_1_hot,X_test_1_hot))\nX_full_1_hot.shape","c4e7fd49":"#stack the y_train and y_test\ny_train_full = np.vstack((y_train,y_test))\ny_train_full.shape","453e898f":"#linear regression on the entire train set \nmodel = LinearRegression(normalize=True)\nmodel.fit(X_full_1_hot,np.ravel(y_train_full))\n#predictions on the entire train set \nX_full_predictions = model.predict(X_full_1_hot)","2945cdfb":"#plot of the predicted data \nplt.hist(X_full_predictions, color='b', alpha=0.35, histtype='stepfilled',bins=50)\nplt.title('Plot of the predicted hours per week on the X_full dataset')\nplt.grid()\nplt.show()","a76d99b9":"'''Evaluate model on the full train set '''\nprint('Root Mean Squared error on the X_full set')\nprint(np.sqrt(mean_squared_error(y_train_full,X_full_predictions)))","1936529d":"#predict on the actual test set\nfinal_full_predictions = model.predict(test_1_hot)\nsubmission = pd.DataFrame(data=final_full_predictions,columns=['hours-per-week'])\n#create the submission file\nsubmission.to_csv('submission_full.csv',index=False)","52796eb7":"y_train_full_arr = np.asarray(y_train_full)\n#instantiate the model\nmodel = deep_model(X_train=X_full_1_hot,activation='relu',optimizer='adam')\n\n#initialize the variables \nbatch_size = 64\nepochs = 100\npatience = 25\n#define the callback\nearly_stop = tf.keras.callbacks.EarlyStopping(patience=patience,restore_best_weights=True)\n#fit the model\nhistory = model.fit(X_full_1_hot,y_train_full_arr,epochs=epochs,batch_size=batch_size,\n                   validation_split=0.1,callbacks=[early_stop],verbose=2)","bcbe8899":"#create a dataframe of model history\nmodel_history = pd.DataFrame(data = history.history)","2581ae8f":"#plot the model training history \nmodel_history[['mse','val_mse','loss','val_loss']].plot()\nplt.title('Model History')\nplt.show()","b2f5137b":"X_full_predictions_nn = model.predict(X_full_1_hot)\n\n#evaluation metric -- root mean squared error on the X_train and X_test dataset\nprint('Root Mean Squared error on the X_full set')\nprint(np.sqrt(mean_squared_error(y_train_full_arr,X_full_predictions_nn)))","977b073e":"#predict on the actual test set using the neural net model \nfinal_full_predictions_nn = model.predict(test_1_hot)\nsubmission = pd.DataFrame(data=final_predictions_nn,columns=['hours-per-week'])\n#create the submission file\nsubmission.to_csv('submission_full_nn.csv',index=False)","9a00beff":"# _Work Hour Prediction_\n***\n\n<b> Overview <\/b>\n\nWith the rise in different career opportunities, it's a challenging balance between work and personal life. We are learning and upskilling ourselves to grow ourselves in the competitive world. The wages are linked to the working hours and the skills we learn over time. The working hours vary at different locations with respect to earn the same income.\n\n<b>Problem Statement <\/b>\n\nIn this hackathon we need to  predict the working hours per week at different locations with attributes such as workclass, education, marital-status, occupation capital-gain, capital-gain, capital-loss etc. to get the desired salary in a range. \n\n<b> Data: Download the data from https:\/\/machinehack.com\/hackathons\/fortnight_hackathon_series_for_data_scientists_work_hour_prediction_challenge\/overview<\/b>\n\n\n- Age: in years\n- Workclass: Private, Self-emp-not-inc, State-gov, Self-emp-inc, Federal-gov, Local-gov, Never-worked, Without-pay\n- Fnlwgt:  number of people the census believes\n- Education: HS-grad, Bachelors, Masters, Some-college, 7th-8th, Doctorate, Prof-school,  Assoc-voc, Assoc-acdm, 5th-6th, 11th, 9th, 1st-4th, 12th, 10th, Preschool\n- Education-num:  represents a numerical value of education\n- Marital-status: Never-married, Married-civ-spouse, Divorced, Married-spouse-absent, Separated, Widowed, Married-AF-spouse\n- Occupation: Other-service, Sales, Transport-moving, Prof-specialty, Exec-managerial, Adm-clerical, Handlers-cleaners, Farming-fishing, Craft-repair, Protective-serv, Machine-op-inspct, Tech-support, Priv-house-serv, Armed-Forces\n- Relationship: Unmarried, Husband, Not-in-family, Own-child, Wife, Other-relative\n- Race: White, Amer-Indian-Eskimo, Asian-Pac-Islander, Black, Other\n- Sex:  Female, Male.\n- Capital-gain: negative or positive\n- Capital-loss: negative or positive\n- Hours-per-week: in Hours (Target)\n- Native-country: United-States, Cuba, Philippines, Mexico, Honduras, Jamaica, England, India, Canada, Puerto-Rico, South, Guatemala, Haiti Iran, Outlying-US(Guam-USVI-etc), El-Salvador, Italy, Cambodia, Germany, Portugal, Japan, Yugoslavia, Ireland, China, Dominican-Republic, Taiwan, Ecuador, Poland, Trinadad&Tobago, Vietnam, Thailand, Columbia, Peru, France, Greece, Hungary, Laos, Scotland, Hong, Nicaragua,  Holand-Netherlands\n\nTrain: 18944 rows x 15 columns\nTest: 8119 rows x 14 columns \nTarget Column: \u201chours-per-week\u201d","3098d974":"_Observations from the pair plot_\n\n- _It is mostly males who are working for more than 60 and 80 hours per week. However, there are still females who work beyond 40 hours per week_\n- _There are many with capital gain and loss with 0 values and that does not seem to have any correlation with the hours per week_\n- _Hours per week and number of years of education does not seem significantly correlated_\n- _The census data shows more males than females working for more than 40 and 60 hours per week_","188e8867":"- _The median work hours per week for both the income groups appear to be similar_\n- _The IQR of the workers with higher income is higher than those with the lower income_","dcc4ecf4":"- _Workers with 9 years of education is the maximum, followed with those with 12 years and 8 years. There are only a handful of workers with 14 and 16 years of education_","7c0df356":"Observation\n- _There are extremes where hours per week is more than 80 hours per week_\n- _On an average, the work hour is most frequently distributed with 30 to 60 hours in general_","dce3344f":"### _Summary from Exploratory Data Analysis_\n\n- _The important categorical features are the following_\n    - native-country\n    - workclass\n    - education \n    - occupation\n    \n- _The importance of any of any of the other categorical features cannot be ruled out and that can be decided during feature selection or during dimensionality reduction technique_\n\n- _With respect to the numerical features, there are no features which have strong positive or negative correlation with the hours per week_\n\n-  _Capital gain and Capital loss has very weak correlation with the hours per week_\n\n- _Age feature can be converted to categorical using binning. In fact there are two clusters of age. One below 50 years of age and the other above 50 years of age. Check the pairplot_\n\n- _Similarly the number of years of education can also be binned into categories instead of being treated as a numerical features. There appears to be 3 clusters of number of years of education_\n\n- _The number of people as the census believes is not a good representation of the native country. This may vary depending on the size of the country. There are a few countries which have very less observations_\n\n- _So in general, it is the categorical features which are deterministic of the hours per week. Converting a few numerical features like eduction-num, age to categorical feature will also help in better model predictability_\n\n- _The data is highly skewed when it comes to native country distribution. United States has 16,000 while the rest of the countries combined is barely a couple of thousand. It is better to have only two categories US or Others_\n\n- _The education feature can also be clubbed to have lesser number of categories. All eduction prior to 12th standard can be clubbed into one_","f44e468c":"Observation\n\n- _The sex and the relationship does not seem to have a big influence on the work hours per week. Do not see much variation in the median and the IQR of the work hours per week_","4b732507":"## _Data Preprocessing_","a977efdb":"- _The one with 99 years of age is a female who is widowed, works as a self employed salesperson, earns less than 50K, is white, works for 39 hours per week and holds a bachelors degree_\n","df263815":"## _Train on the entire dataset_","06831a37":"- _The gender representation is fairly balanced in the dataset_","9c2edf6d":"## _Basic Deep Learning Model_\n","47a17c87":"- _Now we do not see much of the variance which was earlier visible when we had multiple native-countries_","ec911590":"- _test dataset also has hours-per-week which can be dropped and added later if needed for submission_","ed0d1662":"- _Again here no so much of variation due to the race_","8e69e0a7":"Observation\n- _The workclass has influence over the total work hours per week. Especially, we can see that those who are self-employed work much higher_\n- _Private, State Government and with no pay, the median work hours appears to be within the same range_","cbde1a29":"- _The maximum worker's age is 100 years and there are quite a few with age beyond 80 years_\n- _The median age is 40 years_","cc9d0c84":"Observation\n- _We can clearly see there are 4 different clusters of capital gain_\n- _These can be separated by different cluster labels or categories_","243edfb9":"Observation\n- _Work hours per week and marital status does not seem to have a good relationship. Do not see any significant variation w.r.t the various martial statuses_","96c2c95d":"Observation\n- _There is visible variation in the hours per week based on the type of education the worker has received_\n","02ef166e":"- _There does not appear to be a strong correlation of hours per week with any of the numerical features. This was also evident from the pairplot plotted earlier_","ae158e3f":"_Observation_\n- _There is a significant relationship between the native country and the work hours per week_\n- _There are a lot of outliers for a few countries, especially for United States of America_\n- _There are very few datapoints for some countries. Example France and Netherlands_","e16baac1":"## _Feature Engineering and Data Preparation_","b93f4c62":"### _create the submission file_","a7b170bd":"# _Exploratory Data Analysis_","2445a028":"### _Linear Models for Prediction - Simple, yet very effective_","12b45a83":"Observation\n- _The entire set of feature is either object or of categorical type_","831fcb1b":"## _Import Libraries and Load Data_","5a7fe3c7":"## _Other improvements_\n- _Feature selection using sklearn Kbest with Chi-square test_\n- _Regularized Decision Trees_\n- _Hyperparameter tuning of the deep learning model_","5a53975f":"- _There are no null values in both the train and the test dataset_\n- _Train dataset is almost double of the test dataset_ \n- _Income is a categorical feature and that is understandable in the way it is presented in the dataset_\n","1b5ac405":"- _Males on an average show higher work hours compared to the females_","742a854c":"- _There is a weak positive correlation with the age. As we have seen earlier, there are octogenarians who work as many number of hours as a younger person and that is mainly decided by other factors like occupation, marital status etc._","ad0f909d":"- _50% of the samples have work hours between 35 to 44 hours per week._ ","476096c6":"### _Baseline model evaluation_"}}