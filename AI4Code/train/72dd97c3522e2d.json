{"cell_type":{"702e913c":"code","b4b1aa42":"code","781caab4":"code","92f7a4bc":"code","30cebce6":"code","e5e95bab":"code","36acbce5":"markdown"},"source":{"702e913c":"import numpy as np\nfrom lightfm.datasets import fetch_movielens\nfrom lightfm import LightFM ","b4b1aa42":"data = fetch_movielens(min_rating = 4.0)\n\nprint(repr(data['train']))\nprint(repr(data['test']))","781caab4":"data","92f7a4bc":"model = LightFM(loss='warp')\n#training model\nmodel.fit(data['train'])","30cebce6":"def sample_recommendation(model, data, user_ids):\n    n_users, n_items = data['train'].shape\n    for user_id in user_ids: \n        #movies they always like\n        known_positives = data['item_labels'][data['train'].tocsr()[user_id].indices]\n        scores = model.predict(user_id, np.arange(n_items))\n        #rank in order of most liked to least\n        top_items = data['item_labels'][np.argsort(-scores)]\n        #print results\n        print(\"\\nUser %s\" % user_id)\n        print(\"Most Liked:\")\n\n        for x in known_positives[:3]:\n            print(\"%s\" % x)\n        \n        print(\"Recommend:\")\n\n        for x in top_items[:3]:\n            print(\"%s\" % x)","e5e95bab":"\nsample_recommendation(model, data, [0, 4, 25, 9, 389])","36acbce5":"# Movie-Recommendation\nMovie Recommendation Engine using LightFM Library and deploying the same to make a Web App \n\n### Problem Statement\nRecommending user movies based on different parameters by taking input as movie name and giving the output as movie suggestions along with similarity score.\n\n### Process\n\n* Step 1-\nUnderstanding the problem statement and concepts\n\n* Step 2-\nPre Processing, Data Visualization and Modelling\n\n* Step 3-\nDeploying the recommender system\n\n### Algorithms Used\n\n* Inbuilt algorithms of Light FM library\n\n### Deployment\n\n* Using TMDB API, deploying the Recommendation System\n\n"}}