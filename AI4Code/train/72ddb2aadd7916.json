{"cell_type":{"8e07b927":"code","dd2a094f":"code","f084b901":"code","b8d0b8c5":"code","32299cb5":"code","beea58c8":"code","32323d40":"code","4e5c684f":"code","2267ceb9":"code","133347b8":"code","31aa8217":"code","4a8ff727":"code","93792d3d":"code","fcd36af1":"code","6defd684":"code","3f7bf8f2":"code","d16a00bc":"code","a15ac66f":"code","526bbe66":"code","c108cc49":"code","4f02b059":"code","693d1c36":"code","80a60d19":"code","9a02751e":"code","d2732440":"code","11951d7c":"code","ed9672b6":"code","2f694f08":"code","430fd81b":"code","6cf6f701":"code","8a2c793d":"code","3d765305":"code","c7e20852":"code","6f176740":"code","7383b4c1":"code","cf27da21":"code","963054ee":"code","c17c8f34":"code","04b33e06":"markdown","3f7bb3b1":"markdown","bb17cda1":"markdown","53da7071":"markdown","74c3fc30":"markdown","17926f34":"markdown","917c5ae5":"markdown","17236508":"markdown","ab4eeda3":"markdown","7ac94539":"markdown","c22ff932":"markdown","cbcd2112":"markdown","2de2ea5d":"markdown","a705f02e":"markdown","57ef9a1c":"markdown"},"source":{"8e07b927":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Tensorflow\nimport tensorflow as tf\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\n\n# Visualization\nimport seaborn as sns\n\n# SMOTE\nfrom imblearn.over_sampling import SMOTE\n\n# Scaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# Scoring\nfrom sklearn.metrics import confusion_matrix, accuracy_score, plot_confusion_matrix\nfrom sklearn.metrics import classification_report\n\n# Split\nfrom sklearn.model_selection import train_test_split\n\n# Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dd2a094f":"df = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')","f084b901":"df.head()","b8d0b8c5":"df.shape","32299cb5":"df.info()","beea58c8":"df.describe()","32323d40":"df['HeartDisease'].value_counts()","4e5c684f":"sns.countplot(x='HeartDisease',data=df)","2267ceb9":"# Correlations\ndf.corrwith(df['HeartDisease'])","133347b8":"# Check missing value\ndf.isnull().sum()","31aa8217":"# Check Duplicate data\ndf[df.duplicated()].any()","4a8ff727":"df.hist(figsize=(10,15))","93792d3d":"le = LabelEncoder()","fcd36af1":"df.head()","6defd684":"df['Sex']= le.fit_transform(df['Sex'])\ndf['ExerciseAngina']= le.fit_transform(df['ExerciseAngina'])","3f7bf8f2":"df.head()","d16a00bc":"df = pd.get_dummies(df, columns=[\"ChestPainType\",\"RestingECG\",\"ST_Slope\"])","a15ac66f":"df.head()","526bbe66":"X = df.drop(['HeartDisease'], axis=1)\ny = df['HeartDisease']","c108cc49":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","4f02b059":"y_train.value_counts()","693d1c36":"# Handle imbalance class using oversampling minority class with SMOTE method\nos = SMOTE(sampling_strategy='minority',random_state = 1,k_neighbors=5)\ntrain_smote_X,train_smote_Y = os.fit_resample(X_train,y_train)\nX_train = pd.DataFrame(data = train_smote_X, columns = X_train.columns)\ny_train = pd.DataFrame(data = train_smote_Y)","80a60d19":"y_train.value_counts()","9a02751e":"#scaling the data\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","d2732440":"model = Sequential()","11951d7c":"model.add(Dense(16, activation='swish')) # First hidden layer\nmodel.add(Dropout(0.25))\nmodel.add(Dense(16, activation='swish')) # Second hidden layer\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1, activation='sigmoid')) # Output layer","ed9672b6":"model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['Accuracy'])","2f694f08":"earlystopping = callbacks.EarlyStopping(monitor='val_loss',\n                                        mode='min',\n                                        verbose=1,\n                                        patience=20)","430fd81b":"history = model.fit(X_train, y_train,validation_data=(X_test,y_test), batch_size = 32, epochs = 300, callbacks =[earlystopping])","6cf6f701":"# summarize history for acc\nplt.plot(history.history['Accuracy'])\nplt.plot(history.history['val_Accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='lower right')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.show()","8a2c793d":"print('Max val_acc achieved: %.2f' %(max(history.history['val_Accuracy'])*100), '%')\nprint('Max acc achieved: %.2f' %(max(history.history['Accuracy'])*100), '%')","3d765305":"print('Final val_acc achieved: %.2f' %(history.history['val_Accuracy'][-1]*100), '%')\nprint('Final acc achieved: %.2f' %(history.history['Accuracy'][-1]*100), '%')","c7e20852":"val_accuracy = np.mean(history.history['val_Accuracy'])\nprint(\"\\n%s: %.2f%%\" % ('Mean of validation accuracy', val_accuracy*100))","6f176740":"y_pred = model.predict(X_test)","7383b4c1":"y_pred = (y_pred > 0.5)","cf27da21":"ann_cm = confusion_matrix(y_test, y_pred)\nann_acc = round(accuracy_score(y_pred,y_test) * 100, 2)\nprint(ann_cm)\nprint(ann_acc,'%')","963054ee":"cmap1 = sns.diverging_palette(275,150,  s=40, l=65, n=6)\nplt.subplots(figsize=(10,6))\ncf_matrix = confusion_matrix(y_test, y_pred)\nsns.heatmap(ann_cm\/np.sum(ann_cm), cmap = cmap1, annot = True, annot_kws = {'size':15})","c17c8f34":"print(classification_report(y_pred,y_test))","04b33e06":"<a id=\"introduction\"><\/a>\n## 1. Introduction","3f7bb3b1":"<a id=\"model\"><\/a>\n## 5. Building ANN Model","bb17cda1":"#### 4.1.2 One-Hot Encoder","53da7071":"<a id=\"data_preprocessing\"><\/a>\n## 4. Data Preprocessing","74c3fc30":"> <center><img src=\"https:\/\/media.istockphoto.com\/photos\/an-elderly-indian-man-with-heart-problems-picture-id909850922?b=1&k=20&m=909850922&s=170667a&w=0&h=0hhwcUpGlP_jUtF5ty3S-d6VyKmbSkeo2DWg3PcoPRk=\" width=\"800px\"><\/center>\n","17926f34":"### Import Libaries","917c5ae5":"<a id=\"data_acquisition\"><\/a>\n## 2. Data Acquisition","17236508":"### 4.1 Encode some Features","ab4eeda3":"#### 4.1.1 Label Encoder","7ac94539":"### Load the Dataset","c22ff932":"<a id=\"eda\"><\/a>\n## 3. EDA","cbcd2112":"<h1 style='color:white;background-color:black' > Table of Contents <\/h1>\n\n* [Introduction](#introduction)\n* [Data Acquisition](#data_acquisition)\n* [EDA](#eda)\n* [Data Preprocessing](#data_preprocessing)\n* [Building the Model](#model)\n* [Evaluation](#evaluation)","2de2ea5d":"# **Heart Failure Prediction**","a705f02e":"<div align='left'><font size=\"3\" color=\"#000000\"> Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worldwide. Four out of 5CVD deaths are due to heart attacks and strokes, and one-third of these deaths occur prematurely in people under 70 years of age. Heart failure is a common event caused by CVDs and this dataset contains 11 features that can be used to predict a possible heart disease.\n<\/font><\/div>\n\n* **Problem Statement:**\n<div align='left'><font size=\"3\" color=\"#000000\"> People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.\n<\/font><\/div>","57ef9a1c":"<a id=\"model\"><\/a>\n## 6. Evaluation"}}