{"cell_type":{"cb07b68a":"code","ac31e7e2":"code","dba0d2d8":"code","a1a8f5e4":"code","fd63f20a":"code","dfec014a":"code","1e7b97e0":"code","a0b8f971":"code","8f25774e":"code","a71c454a":"code","c52a8c68":"code","931fedbb":"code","3fbfb443":"code","41ca98be":"code","076cd429":"code","8e360a0e":"code","582334f9":"code","b5d45bbd":"code","2ec49807":"code","ffc770bc":"code","52d8ed1c":"code","cdc9f9d5":"code","11de92af":"code","3199a1e7":"code","30b09755":"code","efcb7fcf":"code","15a3691d":"markdown","9488ca03":"markdown","b6dd9eed":"markdown","5f571484":"markdown","893595b0":"markdown","1d87a147":"markdown"},"source":{"cb07b68a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ac31e7e2":"#Reading the datasets.\ncodebook=pd.read_excel('\/kaggle\/input\/customer-purchase-journey-netherlands\/codebook.xlsx')\ndata=pd.read_csv('\/kaggle\/input\/customer-purchase-journey-netherlands\/TravelData.csv')\ndemo=pd.read_csv('\/kaggle\/input\/customer-purchase-journey-netherlands\/TravelDataDemos.csv')","dba0d2d8":"#Chcking few columns.\npd.set_option('display.max_colwidth', -1)\ncodebook.head()","a1a8f5e4":"#Merging the two major datasets.\nmaster=pd.merge(demo,data)\nmaster.head(1)","fd63f20a":"#Changing columns name from dutch to english.\nmaster.rename(columns={'SPSS_Regio5':'Region','RESP_GEM_GROOTTE':'Size_of_Manucipality','BAS_huishoudgrootte':'Household_Size','GenderID':'Gender','BAS_werkzaamheid_resp':'Kind_of_work','BAS_bruto_jaarinkomen':'Gross_income','afg_kinderen_huishouden':'no_of_children','AFG_sk2015':'Social_Class','BAS_voltooide_opleiding8_resp':'Education','SPSS_Lifestage':'Lifestage'},inplace=True)\ndemo.rename(columns={'SPSS_Regio5':'Region','RESP_GEM_GROOTTE':'Size_of_Manucipality','BAS_huishoudgrootte':'Household_Size','GenderID':'Gender','BAS_werkzaamheid_resp':'Kind_of_work','BAS_bruto_jaarinkomen':'Gross_income','afg_kinderen_huishouden':'no_of_children','AFG_sk2015':'Social_Class','BAS_voltooide_opleiding8_resp':'Education','SPSS_Lifestage':'Lifestage'},inplace=True)\nmaster.head(1)","dfec014a":"#Checking the relation between different features of customers.\nd=demo.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(d,linewidth=.02,cmap=\"YlGnBu\",annot=True)\nplt.show()","1e7b97e0":"master['TIMESPSS']=pd.to_datetime(master['TIMESPSS'])\nmaster['DayOfWeekNum'] = master['TIMESPSS'].dt.dayofweek\nmaster['week_name'] = master['TIMESPSS'].dt.weekday_name\nmaster['Day'] = master['TIMESPSS'].dt.day\nmaster['Hour'] = master['TIMESPSS'].dt.hour\nmaster['Month'] = master['TIMESPSS'].dt.month\nmaster.head()","a0b8f971":"#Count of device used by customers with respect to gender.\nmylabels=['Male','Female']\nlines=sns.countplot(data=master,x='DEVICE_TYPE',hue='Gender')\nplt.legend(labels=mylabels)\nplt.ylabel('Count of Device used')\nplt.show()","8f25774e":"#Binning the touchpoints into Customer Initiated and Firm Initiated Touchpoints.\nmaster['touch']=pd.cut(master['type_touch'],[0,16,22],right=False,labels=['CIT ','FIT'])","a71c454a":"#Quering to get only the rows where purchase happened and initiated by Counsumer.\nm1=master.query('purchase_any==1 or purchase_own==1 and touch==\"CIT\"')","c52a8c68":"plt.figure(figsize=(10,7))\nax=sns.countplot(data=master,x='Hour')\nsns.set(style=\"darkgrid\",color_codes=True)\nax.set(xlabel='Count Of Purchases', ylabel='Hour',title='Traffic on online websites on different hours of a day')\nplt.show()","931fedbb":"plt.figure(figsize=(10,7))\nax=sns.countplot(data=master,x='week_name',order=master['week_name'].value_counts().index)\nsns.set(style=\"darkgrid\",color_codes=True)\nax.set(xlabel='Count Of Purchases', ylabel='Weekday',title='Traffic on online websites on different days of a week')\nplt.show()","3fbfb443":"plt.figure(figsize=(10,7))\nax=sns.countplot(data=m1,x='Region',palette='Set3',order=master['Region'].value_counts().index)\nsns.set(style=\"darkgrid\")\nax.set(xlabel='Count Of Purchases', ylabel='Region',title='CIT who got converted with respect to region')\nplt.xticks(np.arange(5),('Amsterdam, Rotterdam, Den Haag','West','North','East','South'))\nplt.xticks(rotation=90)\nplt.show()","41ca98be":"sns.set(style=\"darkgrid\", palette=\"Set1\", color_codes=True)\nplt.figure(figsize=(10,5))\nax=sns.countplot(x='Gross_income',data=m1,hue='Gender',order = master['Gross_income'].value_counts().index)\nax.set(xlabel='Count Of Purchases', ylabel='Region',title='Customers who got converted with respect to income and gender')\nplt.legend(labels=mylabels)\nplt.show()","076cd429":"newfig=m1.groupby('Lifestage')[['UserID']].count().reset_index()\nexplode = (0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.05) \nplt.figure(figsize=(10,7))\nplt.pie(newfig['Lifestage'],autopct='%1.1f%%', startangle=90, pctdistance=0.85,shadow=True,explode=explode)\nplt.title='% of customers who bought the products in different Lifestages'\ncentre_circle = plt.Circle((0,0),0.6,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.legend(newfig['Lifestage'])\nplt.axis('equal')\nplt.title='% of customers who bought the products in different Lifestages'\nplt.show()","8e360a0e":"sns.set(style=\"darkgrid\", palette=\"magma_r\", color_codes=True)\nplt.figure(figsize=(10,5))\nb=sns.countplot(x='Education',data=m1,hue='Gender',order=m1['Education'].value_counts().index)\nb.set(ylabel='Count of customers', xlabel='Education',title='Most common education background of customer who bought the product with respect to gender.')\nplt.legend(labels=mylabels)\nplt.show()","582334f9":"prange=m1.groupby('type_touch')[['UserID']].count().sort_values(by='UserID',ascending=False).head().reset_index()\nexplode = (0.08, 0.08, 0.08,0.08,0.08)\nplt.figure(figsize=(10,5))\nax=plt.pie(prange['UserID'], explode=explode, labels=['Accomodations Website','Touroperator \/ Travel agent Website Competitor','Touroperator \/ Travel agent Website Focus brand','Information \/ comparison Website','Flight tickets Website'],\nautopct='%1.1f%%',shadow=True, startangle=90) \nplt.title='Most sucessfull touchpoints'\nplt.gca().legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()","b5d45bbd":"sns.set( palette=\"tab20c\", color_codes=True)\nplt.figure(figsize=(10,5))\na=sns.countplot(x='purchase_any',data=master,hue='touch')\na.set(xlabel='Conversion_status', ylabel='Count',title='Ratio of customers who purchased and not purchased with reference to touchtype')\nplt.xticks(np.arange(2),('Not Purchased','Purchased'))\nplt.show()","2ec49807":"master.isnull().sum()","ffc770bc":"#Nan values were there in every column so dropped them.\nmaster.dropna(inplace=True)","52d8ed1c":"from sklearn.preprocessing import LabelEncoder\nlb=LabelEncoder()\nmaster['DEVICE_TYPE']=lb.fit_transform(master['DEVICE_TYPE'])","cdc9f9d5":"X=master.drop(columns=['UserID','PurchaseID','Duration','purchase_own','purchase_any','TIMESPSS'])\nY=master['purchase_any']","11de92af":"from sklearn.preprocessing import MinMaxScaler\nmm=MinMaxScaler()\nX_data=mm.fit_transform(X)\nX_df=pd.DataFrame(X_data,columns=X.columns)","3199a1e7":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split\n#Training and testing\nx_train,x_test,y_train,y_test=train_test_split(X_df,Y,test_size=0.3,random_state=42)\nprint(len(x_train),len(x_test))","30b09755":"#Getting regression and prediction\nreg = LinearRegression()\nreg.fit(x_train,y_train)\ny_pred = reg.predict(x_test)","efcb7fcf":"#Checking RMSE and R-score.\nrmse=np.sqrt(mean_squared_error(y_test,y_pred))\nr2=r2_score(y_test,y_pred)\nprint('RMSE =',rmse)\nprint('R-squared =',r2*100,'%')","15a3691d":"### Encoding","9488ca03":"## Data Cleaning:","b6dd9eed":"### Normalizing X","5f571484":"## Descriptive Analysis","893595b0":"## Applying Liner Regression Model","1d87a147":"### Checking for NaN values:\n"}}