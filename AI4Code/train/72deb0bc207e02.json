{"cell_type":{"0857b2f2":"code","f54ab96a":"code","bae3e521":"code","d5f4450e":"code","b07da989":"code","19214376":"code","d3467154":"code","2d320004":"code","3ed481ac":"code","0292d10b":"code","5178e28d":"code","2504d183":"code","1927e910":"code","5b0e4158":"code","b1720b08":"code","3b2fedf7":"code","ab5c0975":"code","e694ede0":"code","f987c208":"code","8e4a9382":"code","87b795f7":"code","91d6d4b3":"code","7f840d3b":"code","9476ed90":"code","8857382c":"code","e7c9c7ab":"code","9a03826d":"code","e93e8072":"code","1d591041":"code","f04f09da":"code","b0c58aa2":"code","9ae5b344":"code","801a8657":"code","b1c8eb58":"code","17351b77":"markdown","71026df0":"markdown","f872af15":"markdown","56303d29":"markdown","2a8f29e6":"markdown","4f1c4653":"markdown","e65dcce3":"markdown","3ed786d6":"markdown","ffe20ba5":"markdown","600fbc2d":"markdown","86c3f947":"markdown","b5f16336":"markdown","4734ce93":"markdown","91672b5e":"markdown","3d0d4dc0":"markdown","1dab7dd3":"markdown"},"source":{"0857b2f2":"%config Completer.use_jedi = False","f54ab96a":"\nimport numpy as np \nimport pandas as pd  \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))        ","bae3e521":"path = \"\/kaggle\/input\/test-file\/tested.csv\"\ndf = pd.read_csv(path)\ndf.info()","d5f4450e":"df.count()","b07da989":"df[\"Sex\"].value_counts()\n","19214376":"df[\"Cabin\"].value_counts()","d3467154":"#df navigation\n\ndf.iloc[4]","2d320004":"df.iloc[0:10]","3ed481ac":"\ndf[df[\"Sex\"]==\"female\"]","0292d10b":"df[(df[\"Sex\"]==\"female\") & (df[\"Age\"]>65)]","5178e28d":"df =  df[(df[\"Sex\"]==\"female\") & (df[\"Age\"]>40) &(df[\"Survived\"]==1)] \nprint(\"Rows found ==> \",df.shape[0])","2504d183":"df[(df[\"Sex\"]==\"female\") & (df[\"Age\"]>40) &(df[\"Survived\"]==1)] ","1927e910":"df['Sex'].head(2)","5b0e4158":"df['Sex'].replace(\"female\", \"Woman\").head(2)\n","b1720b08":"df['Sex'].replace([\"female\", \"male\"], [\"Woman\", \"Man\"]).head(5)\n","3b2fedf7":"\ndf.rename(columns={'Pclass': 'Passenger Class'}).head(2)\n\n","ab5c0975":"# Calculate statistics\nprint('Maximum:', dataframe['Age'].max())\nprint('Minimum:', dataframe['Age'].min())\nprint('Mean:', dataframe['Age'].mean())\nprint('Sum:', dataframe['Age'].sum())\nprint('Count:', dataframe['Age'].count())","e694ede0":"df.Sex.unique()","f987c208":"## Select missing values, show two rows\ndf[df['Cabin'].isnull()].head(2)","8e4a9382":"df['Cabin'] = df['Cabin'].replace('E84', np.nan)\ndataframe = df","87b795f7":"df.drop(['Age', 'Sex'], axis=1).head(2)","91d6d4b3":"df.drop(df.columns[1], axis=1).head(2)","7f840d3b":"# Delete rows, show first two rows of output\ndataframe[dataframe['Sex'] != 'male'].head(2)","9476ed90":"#delete a single row by row index:\ndataframe[dataframe.index != 0].head(2)\n","8857382c":"dataframe.groupby('Survived')['Name'].count()\n","e7c9c7ab":"df.groupby(['Sex','Survived'])['Age'].mean()\n","9a03826d":"# Create date range\ntime_index = pd.date_range('06\/06\/2017', periods=100000, freq='30S')\n# Create DataFrame\ndfr = pd.DataFrame(index=time_index)\n# Create column of random values\ndfr['Sale_Amount'] = np.random.randint(1, 10, 100000)\ndfr.resample('W').sum()\n","e93e8072":"def uppercase(x):\n    return x.upper()\n# Apply function, show two rows\ndataframe['Name'].apply(uppercase)[0:2]","1d591041":"dataframe.groupby('Sex').apply(lambda x: x.count())","f04f09da":"data_a = {'id': ['1', '2', '3'],\n'first': ['Alex', 'Amy', 'Allen'],\n'last': ['Anderson', 'Ackerman', 'Ali']}\ndataframe_a = pd.DataFrame(data_a, columns = ['id', 'first', 'last'])\n# Create DataFrame\ndata_b = {'id': ['4', '5', '6'],\n'first': ['Billy', 'Brian', 'Bran'],\n'last': ['Bonder', 'Black', 'Balwner']}\ndataframe_b = pd.DataFrame(data_b, columns = ['id', 'first', 'last'])\n# Concatenate DataFrames by rows\npd.concat([dataframe_a, dataframe_b], axis=0)","b0c58aa2":"row = pd.Series([10, 'Chris', 'Chillon'], index=['id', 'first', 'last'])\n# Append row\ndataframe_a.append(row, ignore_index=True)","9ae5b344":"employee_data = {'employee_id': ['1', '2', '3', '4'],\n'name': ['Amy Jones', 'Allen Keys', 'Alice Bees',\n'Tim Horton']}\ndataframe_employees = pd.DataFrame(employee_data, columns = ['employee_id',\n'name'])\n# Create DataFrame\nsales_data = {'employee_id': ['3', '4', '5', '6'],\n'total_sales': [23456, 2512, 2345, 1455]}\ndataframe_sales = pd.DataFrame(sales_data, columns = ['employee_id',\n'total_sales'])\n# Merge DataFrames\npd.merge(dataframe_employees, dataframe_sales, on='employee_id')","801a8657":"pd.merge(dataframe_employees, dataframe_sales, on='employee_id', how='left')\n","b1c8eb58":"pd.merge(dataframe_employees,\ndataframe_sales,\nleft_on='employee_id',\nright_on='employee_id')","17351b77":"# Renaming Columns","71026df0":"# Replacing Values","f872af15":"# Applying a Function Over All Elements in a Column","56303d29":"To have full functionality with NaN we need to import the NumPy library first:\n\n","2a8f29e6":"Left, right or outer join using How parameter:-","4f1c4653":"# By time","e65dcce3":"# Finding Unique Values","3ed786d6":"# Grouping Rows by Values","ffe20ba5":"# add a new row to a DataFrame:","600fbc2d":"# Concatenating DataFrames","86c3f947":"# Finding the Minimum, Maximum, Sum, Average, and Count","b5f16336":"# apply function to groups\n","4734ce93":"Merging by column name","91672b5e":"# merge two DataFrames.","3d0d4dc0":"# Deleting a Column","1dab7dd3":"# Handling Missing Values"}}