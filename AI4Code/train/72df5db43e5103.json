{"cell_type":{"ef2f6d5f":"code","a1b8cb62":"code","c862941a":"code","349498a8":"code","8f9cb9c8":"code","bc3c7b87":"code","c88a602f":"code","f9304b58":"code","17ecbcba":"code","e7521858":"code","0a582fb8":"code","b83912a8":"code","49785bf9":"code","32b6611d":"code","48b9897b":"code","153515f7":"code","f4e9df43":"code","9698cedf":"code","3907afb0":"code","c46eb4ae":"code","85323577":"code","d1a90707":"code","ddf5a01b":"code","3db00ea4":"code","2ca8c318":"code","ce66e1a6":"code","ad8acffa":"code","a78cc934":"code","c302fe54":"code","ce57308f":"code","3fea11e3":"code","ddf946c0":"code","77963fae":"code","c31cc1db":"markdown","4ed86012":"markdown","a50fb859":"markdown","a509bfe1":"markdown","1c53b878":"markdown","6b9d39ee":"markdown","ca5b0413":"markdown","c15637ed":"markdown","58ead770":"markdown","40575052":"markdown","47ad3f7a":"markdown","1ecfb888":"markdown","c5a797e0":"markdown"},"source":{"ef2f6d5f":"# import th\u01b0 vi\u1ec7n\nimport numpy as np \nimport pandas as pd\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nimport cv2\nimport pandas as pd\nimport random\nimport os\nimport PIL\nimport tensorflow as tf\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping","a1b8cb62":"path = '..\/input\/plant-pathology-2021-fgvc8'","c862941a":"train_df = pd.read_csv(r'..\/input\/plant-pathology-2021-fgvc8\/train.csv')","349498a8":"train_df.labels.value_counts()","8f9cb9c8":"plt.figure(figsize=(15,12))\nlabels = sns.barplot(train_df.labels.value_counts().index,train_df.labels.value_counts())\nfor item in labels.get_xticklabels():\n    item.set_rotation(45)\nplt.title('Label Distribution', weight='bold')\nplt.show()","bc3c7b87":"train_img_Path = '..\/input\/plant-pathology-2021-fgvc8\/train_images'\ntest_img_Path = '..\/input\/plant-pathology-2021-fgvc8\/test_images'\nsample_submission = pd.read_csv(r'..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')","c88a602f":"train_df.head()","f9304b58":"train_df['labels'] = train_df['labels'].apply(lambda s: s.split(' '))\ntrain_df.head()","17ecbcba":"fig1 = plt.figure(figsize=(20,10))\n\nfor i in range(1, 10):\n    \n    rand =  random.randrange(1, 18000)\n    sample = os.path.join('..\/input\/plant-pathology-2021-fgvc8\/train_images', train_df['image'][rand])\n    \n    img = PIL.Image.open(sample)\n    \n    ax = fig1.add_subplot(4,3,i)\n    ax.imshow(img)\n    \n    title = f\"{train_df['labels'][rand]}{img.size}\"\n    plt.title(title)\n    \n    fig1.tight_layout()","e7521858":"TRAIN_PATH = '..\/input\/resized-plant2021\/img_sz_256\/'\nTEST_PATH = '..\/input\/plant-pathology-2021-fgvc8\/test_images\/'\n\nIMG_RES = 256","0a582fb8":"resized_train = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')","b83912a8":"resized_train.shape","49785bf9":"resized_train['labels'] = resized_train['labels'].apply(lambda s: s.split(' '))\nresized_train.head()","32b6611d":"trans_label = MultiLabelBinarizer().fit(resized_train['labels'])\nlabels = pd.DataFrame(trans_label.transform(resized_train['labels']), columns=trans_label.classes_)\ntrain_df = pd.concat([resized_train['image'], labels], axis=1)\ntrain_df.head()","48b9897b":"resized_train","153515f7":"import keras\ndatagen = keras.preprocessing.image.ImageDataGenerator(rescale=1\/255.0,\n                                                        preprocessing_function=None,\n                                                        data_format=None,\n                                                        validation_split= 0.2\n                                                    )","f4e9df43":"train_data = datagen.flow_from_dataframe(\n    resized_train,\n    directory = '..\/input\/resized-plant2021\/img_sz_256',\n    x_col = 'image',\n    y_col = 'labels',\n    subset=\"training\",\n    color_mode=\"rgb\",\n    target_size = (224,224),\n    class_mode=\"categorical\",\n    batch_size=32,\n    shuffle=False,\n    seed=40,\n)","9698cedf":"valid_data = datagen.flow_from_dataframe(\n    resized_train,\n    directory = '..\/input\/resized-plant2021\/img_sz_256',\n    x_col = 'image',\n    y_col = 'labels',\n    subset=\"validation\",\n    color_mode=\"rgb\",\n    target_size = (224,224),\n    class_mode=\"categorical\",\n    batch_size=32,\n    shuffle=False,\n    seed=40,\n)","3907afb0":"from sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\nhot_labels = mlb.fit_transform(resized_train['labels'])\nprint(mlb.classes_)\nprint(hot_labels)","c46eb4ae":"df_labels = pd.DataFrame(hot_labels,columns=mlb.classes_,index=resized_train.index)\ndf_labels","85323577":"plt.figure(figsize=(15,10))\nsns.barplot(x=df_labels.columns,y=df_labels.sum().values)","d1a90707":"from keras.applications import InceptionResNetV2\nfrom keras.applications import MobileNetV2\nfrom keras.applications import DenseNet121\nfrom keras.applications import DenseNet169\n\nimport keras\nfrom keras.layers import Dense,Dropout,Flatten\nfrom tensorflow.keras.layers import GlobalAveragePooling2D\nfrom keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport tensorflow_addons as tfa\n\nweight_path='..\/input\/tf-keras-pretrained-model-weights\/No Top\/densenet169_weights_tf_dim_ordering_tf_kernels_notop.h5'\nbase_model=DenseNet169(weights=weight_path,include_top=False, input_shape=(224,224,3))\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(128,activation='relu')(x)\nx=Dropout(0.4)(x)\nx=Dense(64,activation='relu')(x)\npredictions=Dense(6,activation='sigmoid')(x)\n\nmodel=Model(inputs=base_model.input,outputs=predictions)\n\nfor layer in base_model.layers:\n    layer.trainable=False","ddf5a01b":"f1 = tfa.metrics.F1Score(num_classes=6,average='macro')\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy',f1])\nes=EarlyStopping(patience=4,monitor=f1,mode='max',restore_best_weights=True)\nhist = model.fit_generator(generator=train_data,\n                    validation_data=valid_data,\n                    epochs=20,\n                    steps_per_epoch=train_data.samples\/\/128,\n                    validation_steps=valid_data.samples\/\/128,\n                    callbacks=[es])","3db00ea4":"model.layers[595:]","2ca8c318":"for layer in model.layers[:595]:\n    layer.trainable=False\n\nfor layer in model.layers[143:]:\n    layer.trainable=True\n\nfor layer in model.layers[595:]:\n    layer.trainable=False\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy',f1])\nhistory = model.fit_generator(generator=train_data,\n                    validation_data=valid_data,\n                    epochs=20,\n                    steps_per_epoch=train_data.samples\/\/128,\n                    validation_steps=valid_data.samples\/\/128,\n                    callbacks=[es])","ce66e1a6":"plt.figure(figsize=(15,6))\nepoch_list = list(range(1, len(history.history['accuracy']) + 1))\nplt.plot(epoch_list, history.history['accuracy'],label='accuracy')\nplt.plot(epoch_list, history.history['val_accuracy'],label='val_accuracy')\nplt.xlabel('epoches')\nplt.legend()\nplt.show()","ad8acffa":"plt.figure(figsize=(15,6))\nepoch_list = list(range(1, len(history.history['loss']) + 1))\nplt.plot(epoch_list, history.history['loss'],label='loss')\nplt.plot(epoch_list, history.history['val_loss'],label='val_loss')\nplt.xlabel('epoches')\nplt.legend()\nplt.show()","a78cc934":"plt.figure(figsize=(15,6))\nepoch__list = list(range(1,len(history.history['f1_score'])+1))\nplt.plot(epoch__list, history.history['f1_score'],label='f1_score')\nplt.plot(epoch__list, history.history['val_f1_score'],label='val_f1_score')\nplt.xlabel('epoches')\nplt.ylabel('f1')\nplt.legend()\nplt.show()","c302fe54":"test_path=\"..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\"\ntest = pd.read_csv(test_path)\ntest","ce57308f":"test_data = datagen.flow_from_dataframe(\n    test,\n    directory='..\/input\/plant-pathology-2021-fgvc8\/test_images',\n    x_col='image',\n    y_col=None,\n    color_mode='rgb',\n    target_size=(224,224), # chu\u1ea9n h\u00f3a test_images v\u1ec1 size 224 * 224\n    class_mode=None,\n    shuffle=False\n)\npredictions = model.predict(test_data)\nprint(predictions)\n\nclass_idx=[]\nfor pred in predictions:\n    pred=list(pred)\n    temp=[]\n    for i in pred:\n        if (i>0.4):\n            temp.append(pred.index(i))\n    if (temp!=[]):\n        class_idx.append(temp)\n    else:\n        temp.append(np.argmax(pred))\n        class_idx.append(temp)\nprint(class_idx)\n","3fea11e3":"class_dict = train_data.class_indices\ndef get_key(val):\n    for key,value in class_dict.items():\n        if (val==value):\n            return key\nprint(class_dict)\n\nsub_pred=[]\nfor img_ in class_idx:\n    img_pred=[]\n    for i in img_:\n        img_pred.append(get_key(i))\n    sub_pred.append( ' '.join(img_pred))\nprint(sub_pred)","ddf946c0":"sub = test[['image']]\nsub['labels']=sub_pred\nsub","77963fae":"sub.to_csv('submission.csv',index=False)","c31cc1db":"# D\u1ef1 \u0111o\u00e1n","4ed86012":"# S\u1eed d\u1ee5ng b\u1ed9 data \u0111\u00e3 \u0111\u01b0\u1ee3c resize s\u1eb5n","a50fb859":"# Bi\u1ec3u \u0111\u1ed3","a509bfe1":"# **Transfer Learning DenseNet 169**","1c53b878":"# H\u00ecnh \u1ea3nh k\u00edch th\u01b0\u1edbc l\u1edbn + k\u00edch th\u01b0\u1edbc kh\u00e1c nhau","6b9d39ee":"# T\u00e1ch c\u00e1c nh\u1eabn k\u1ebft h\u1ee3p ra","ca5b0413":"18632 \u1ea3nh( v\u1eabn gi\u1eef nguy\u00ean)","c15637ed":"S\u1ed1 l\u01b0\u1ee3ng image m\u1ed7i label \n* Kh\u00f4ng \u0111\u1ed3ng \u0111\u1ec1u\n* B\u00e0i to\u00e1n multi label classification","58ead770":"\u0111\u00f3ng b\u0103ng c\u00e1c l\u1edbp \u0111\u00e3 \u0111\u00e0o t\u1ea1o, sau \u0111\u00f3 \u0111\u00e0o t\u1ea1o kh\u1ed1i  th\u1ee9 hai v\u00e0 th\u1ee9 ba trong","40575052":"# **Submit**","47ad3f7a":"# Bi\u1ec3u di\u1ec5n s\u1ed1 l\u01b0\u1ee3ng c\u00e1c nh\u00e3n xu\u1ea5t hi\u1ec7n","1ecfb888":"# **M\u1ed9t v\u00e0i h\u00ecnh \u1ea3nh ng\u1eabu nhi\u00ean trong t\u1eadp train_images**","c5a797e0":"# Rescale \n\/255 \u0111\u1ec3 gi\u1ea3m \u1ea3nh h\u01b0\u1edfng c\u1ee7a c\u00e1c data point, tr\u00e1nh vi\u1ec7c thi\u00ean v\u1ecb cho c\u00e1c datapoint l\u1edbn\nChia t\u1eadp data train ra l\u00e0m 2 ph\u1ea7n: \n* 80% \u0111\u1ec3 hu\u1ea5n luy\u1ec7n\n* 20% \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh\n\nresize \u1ea3nh v\u1ec1 22 * 22 cho qu\u00e1 tr\u00ecnh h\u1ecdc"}}