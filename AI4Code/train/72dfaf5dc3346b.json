{"cell_type":{"3245ca23":"code","0720710d":"code","b45dd086":"code","b3b51dfd":"code","da83a7d1":"code","48a21003":"code","e407be69":"code","815726a8":"code","4c4c54b7":"code","07b2e227":"code","2edca94d":"code","6d131362":"code","914352f1":"code","7eeace72":"code","f9d6e11a":"code","b57ab5f7":"code","7ddf2862":"code","90a49b16":"code","16019f27":"code","afb7c16a":"code","869bc67a":"code","ecbcea4f":"markdown","8ad6b79f":"markdown","a6a334d1":"markdown","e773b201":"markdown","cbe8979f":"markdown"},"source":{"3245ca23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split,cross_val_score,cross_val_predict\nimport seaborn as sns","0720710d":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","b45dd086":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","b3b51dfd":"test_data['Survived'] = -1\ntrain_data['Set'] = 'Train'\ntest_data['Set'] = 'Test'\n\nDATA = train_data.append(test_data)\nDATA.reset_index(inplace=True)\nDATA.dtypes","da83a7d1":"women = train_data.loc[train_data.Sex == 'female']['Survived']\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","48a21003":"men = train_data.loc[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\n\nprint(\"% of women who survived:\", rate_men)","e407be69":"train_data.shape","815726a8":"train_data.info()","4c4c54b7":"print(\"nulls?\")\ntrain_data.isna().sum()","07b2e227":"print(\"fill in\")\ntrain_data.Embarked.fillna('S', inplace = True)\ntrain_data.isna().sum()","2edca94d":"def print_all_info(data):\n    for i in data.select_dtypes(exclude='object').columns:\n        print('_________________________________________________________')\n        print(i)\n        print(data.groupby(['Survived'])[i].describe())\n        \nprint_all_info(train_data)","6d131362":"DATA['FamilySize'] = DATA.SibSp + DATA.Parch + 1\ng = sns.catplot(x=\"FamilySize\",y=\"Survived\",data=DATA[DATA.Set == 'Train'], kind=\"bar\", height = 6, palette = \"muted\")\ng = g.set_ylabels(\"survival probability - FamilySize\")","914352f1":"def familySize_to_cat(size):\n    if size == 1: return \"alone\"\n    if size >= 2 and size <= 4: return 'small'\n    if size >= 5 and size <= 7: return 'medium'\n    if size > 7 : return \"large\"\n\nDATA['FamilySizeCategory'] = DATA.FamilySize.apply(familySize_to_cat)\n\ng = sns.catplot(x=\"FamilySizeCategory\",y=\"Survived\",data=DATA[DATA.Set == 'Train'], kind=\"bar\", height = 6, palette = \"muted\")\ng = g.set_ylabels(\"survival probability - FamilySizeCategory\")","7eeace72":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nsns.set_style('whitegrid')\nplt.rc('patch', edgecolor='black')\nsns.set_context(\"notebook\", font_scale=1.3, rc={\"lines.linewidth\": 1.5})\n\nsns.factorplot('Embarked','Survived',data=train_data)","f9d6e11a":"categorical = [\"Embarked\"]\n\nDATA = pd.get_dummies(DATA, columns=[\"Embarked\", \"FamilySizeCategory\"])\n\n\nprint_all_info(DATA)\n\nwrite_submission = True\n\n\n\n\n","b57ab5f7":"features = [\n    \"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\n    \"FamilySizeCategory_alone\",\n    \"FamilySizeCategory_large\",\n    \"FamilySizeCategory_medium\",\n#     \"Embarked_C\",\n#     \"Embarked_S\",\n#     \"Embarked_Q\"\n]\n\nTRAIN = DATA[DATA.Set == 'Train']\nTEST = DATA[DATA.Set == 'Test']\n\n\nX = pd.get_dummies(TRAIN[features])\ny = TRAIN[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","7ddf2862":"X.head()","90a49b16":"TEST.head()","16019f27":"# manual param sweep\n\nreg_params = [1, 10, 100, 1000]\n\nfor reg in reg_params:\n    model = svm.SVC(probability=True, kernel='rbf', C=reg)\n    model.fit(X_train, y_train)\n    train_predictions = model.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"score: \", acc, \" reg: \", reg)\n    score = cross_val_score(model, X, y, cv=10)\n\n    print(\"scores: \", score, \" reg: \", reg)\n    ","afb7c16a":"# C is the regularization param\ntuned_parameters = [\n    {\"kernel\": [\"rbf\"], \"gamma\": [1e-3, 1e-4], \"C\": [1, 10, 100, 1000]},\n    {\"kernel\": [\"linear\"], \"C\": [1, 10, 100, 1000]},\n]\n\n\nscores = [\"precision\", \"recall\"]\n\nfor score in scores:\n    \n    model = GridSearchCV(svm.SVC(), tuned_parameters, scoring=\"%s_macro\" % score, cv=5)\n    model.fit(X_train, y_train)\n    \n    print(\"Best parameters set found on development set:\")\n    print()\n    print(model.best_params_)\n    print()\n    print(\"Grid scores on development set:\")\n    print()\n    means = model.cv_results_[\"mean_test_score\"]\n    stds = model.cv_results_[\"std_test_score\"]\n    for mean, std, params in zip(means, stds, model.cv_results_[\"params\"]):\n        print(\"%0.3f (+\/-%0.03f) for %r\" % (mean, std * 2, params))\n    print()\n\n    print(\"Detailed classification report:\")\n    print()\n    print(\"The model is trained on the full development set.\")\n    print(\"The scores are computed on the full evaluation set.\")\n    print()\n    y_true, y_pred = y_test, model.predict(X_test)\n    print(classification_report(y_true, y_pred))\n    print()","869bc67a":"# code submission\n\n# best model\nmodel = svm.SVC(kernel='rbf', C=1000, gamma=0.001)\nmodel.fit(X_train, y_train)\ntest_predictions = model.predict(pd.get_dummies(TEST[features]))\n\noutput = pd.DataFrame({\"PassengerId\": TEST.PassengerId, \"Survived\": test_predictions})\noutput.to_csv(\"submission.csv\", index=False)\n\n\nprint(\"Submission saved!\")\n\nprint(pd.read_csv(\"submission.csv\"))","ecbcea4f":"## automatic hyper param sweep","8ad6b79f":"## merge data for exploration","a6a334d1":"## separate data for training","e773b201":"## feature engineering","cbe8979f":"### family size\n\nMake it a category"}}