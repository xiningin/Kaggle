{"cell_type":{"109acff7":"code","591d6a79":"code","2775b818":"code","2d45dc68":"code","cd3bb669":"code","96ec3e34":"code","f7cb43f9":"code","49ff9f0d":"code","2f26700f":"code","e8968398":"code","fb522432":"code","9d2689b9":"code","54d4d2e0":"code","c74b5775":"code","35bd8933":"code","7de7ff1a":"code","7e774254":"code","4192ffee":"code","f23c4ae1":"code","98a20935":"code","e27cf0fb":"code","c6f37232":"code","4c0a48e9":"code","6dd2edce":"code","4ca86838":"code","16b0f24f":"code","3aa9c6c9":"code","d3735fe2":"code","00ea365d":"code","df0195bc":"code","9eb1b31f":"code","c24671b4":"code","3d2eb64b":"code","910a4e1a":"code","b6753a22":"code","fc5198c2":"code","3854c406":"code","f06da19a":"code","ed5d8965":"code","bda168dc":"code","6c1c6dfa":"code","3230b126":"code","78a48ddc":"code","456a8340":"code","1130d645":"code","4c81e81c":"code","2c3a5d6e":"code","7807520e":"code","ad7f1c9e":"code","1de14dec":"code","a4ed51df":"code","20bf6f9a":"code","b51eb769":"code","95ff303a":"code","7bf2430a":"code","4936589c":"code","1d300eeb":"code","bb3b5eaa":"code","c375789c":"markdown","1f00586b":"markdown","1c6a5865":"markdown","da259705":"markdown","a729d424":"markdown","ae961f15":"markdown","1225456f":"markdown","65eec157":"markdown","a1830fb4":"markdown","abfee544":"markdown","ba93d9f1":"markdown","6ebefecb":"markdown","32b6f767":"markdown","e110aba0":"markdown","3d98ecc0":"markdown","7396ffbd":"markdown","f4a12336":"markdown","21046a37":"markdown","abefa010":"markdown","b16e231a":"markdown","8898b426":"markdown","dc5fe542":"markdown","3695ce22":"markdown","c9626c08":"markdown","3a90c7f7":"markdown","0d54cfe2":"markdown","778dfb08":"markdown","622260e7":"markdown","4658c16b":"markdown","94826dca":"markdown","204c3920":"markdown","a2480b2b":"markdown","2927fcd3":"markdown","e8e791fb":"markdown","4da95788":"markdown","cd67e0a0":"markdown","71f91dcb":"markdown","3e054c0b":"markdown","6cac4ed0":"markdown","97eeb3f8":"markdown","e1b5adfb":"markdown","1d756c6e":"markdown","894b9e8c":"markdown","15cade21":"markdown","3aa186e6":"markdown","e65433f0":"markdown","fca6b648":"markdown","b0ea22d6":"markdown","c05261f0":"markdown","68ce6321":"markdown","1f8ddc5f":"markdown","b70ec86d":"markdown","cf0af62a":"markdown","f45836b9":"markdown","01cb53d0":"markdown","bad14773":"markdown","c616e61d":"markdown","53889dcf":"markdown","1635f511":"markdown","0a4dd796":"markdown","65caf09f":"markdown","f39207bc":"markdown","54cc91aa":"markdown","97bea0df":"markdown","01aa7bf3":"markdown","a65f4a02":"markdown","75832c49":"markdown","5e01258e":"markdown","971e63a0":"markdown","8b9ce20d":"markdown","17f5be29":"markdown","0ebbbcc0":"markdown","13aad429":"markdown","a103e9d6":"markdown","622dbbe2":"markdown","20b34ee9":"markdown","1793ff87":"markdown","bc8e9e80":"markdown"},"source":{"109acff7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","591d6a79":"# package providing fast, flexible, and expressive data structures designed \n# to make working with \u201crelational\u201d or \u201clabeled\u201d data both easy and intuitive\nimport pandas as pd\n\n# the fundamental package for scientific computing\nimport numpy as np\n\n# plotting library for the Python programming language and its numerical mathematics extension NumPy\nimport matplotlib.pyplot as plt\n\n# sets the backend of matplotlib to the 'inline' backend\n%matplotlib inline\n\n# data visualization and exploratory data analysis\nimport seaborn as sns\n\n# probabilistic distributions and statistical operations\nfrom scipy import stats\nfrom scipy.stats import norm\n\n# removes the mean and scales each feature\/variable to unit variance\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n\n#for way to warn programmers about changes in language \n#or library features in anticipation of backwards incompatible changes coming with Python 3.0.\nimport warnings\nwarnings.filterwarnings('ignore')\n","2775b818":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","2d45dc68":"df_train.columns","cd3bb669":"df_train['SalePrice'].describe()","96ec3e34":"sns.distplot(df_train['SalePrice']);","f7cb43f9":"print(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","49ff9f0d":"df_train.corr()['SalePrice'].sort_values()","2f26700f":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","e8968398":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","fb522432":"#scatter plot GarageCars\/saleprice\nvar = 'GarageCars'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","9d2689b9":"#scatter plot GarageArea\/saleprice\nvar = 'GarageArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","54d4d2e0":"#correlation matrix\ndf_train_kor = df_train.corr()\nplt.figure(figsize=(18,18))\nsns.heatmap(df_train_kor, vmin=-1, vmax=1, cmap=\"viridis\", annot=True, linewidth=0.1)","c74b5775":"#saleprice correlation matrix\nk = 11 #number of variables for heatmap\ncols = df_train_kor.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","35bd8933":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","7de7ff1a":"#missing data\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","7e774254":"#dealing with missing data\ndf_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index,1)\ndf_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)\ndf_train.isnull().sum().max() ","4192ffee":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","f23c4ae1":"#bivariate analysis saleprice\/grlivarea\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","98a20935":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));\nplt.axvline(x=4000,color='purple')\nplt.axhline(y=700000,color='purple')","e27cf0fb":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));\nplt.axvline(x=4000,color='purple')\nplt.axhline(y=300000,color='purple')","c6f37232":"#deleting 2 points outliars GRLivarea\ndf_train.sort_values(by = 'GrLivArea', ascending = False)[:2]\ndf_train = df_train.drop(df_train[df_train['Id'] == 1299].index)\ndf_train = df_train.drop(df_train[df_train['Id'] == 524].index)","4c0a48e9":"#bivariate analysis saleprice\/TotalBsmtsf\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","6dd2edce":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));\nplt.axvline(x=3000,color='purple')\nplt.axhline(y=350000,color='purple')","4ca86838":"#histogram and normal probability plot\nsns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","16b0f24f":"#applying log transformation\ndf_train['SalePrice'] = np.log(df_train['SalePrice'])","3aa9c6c9":"#transformed histogram and normal probability plot\nsns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","d3735fe2":"#histogram and normal probability plot\nsns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","00ea365d":"#data transformation\ndf_train['GrLivArea'] = np.log(df_train['GrLivArea'])","df0195bc":"#transformed histogram and normal probability plot\nsns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","9eb1b31f":"#histogram and normal probability plot\nsns.distplot(df_train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['TotalBsmtSF'], plot=plt)","c24671b4":"#create column for new variable (one is enough because it's a binary categorical feature)\n#if area>0 it gets 1, for area==0 it gets 0\ndf_train['HasBsmt'] = pd.Series(len(df_train['TotalBsmtSF']), index=df_train.index)\ndf_train['HasBsmt'] = 0 \ndf_train.loc[df_train['TotalBsmtSF']>0,'HasBsmt'] = 1","3d2eb64b":"#transform data\ndf_train.loc[df_train['HasBsmt']==1,'TotalBsmtSF'] = np.log(df_train['TotalBsmtSF'])","910a4e1a":"#histogram and normal probability plot\nsns.distplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], plot=plt)","b6753a22":"sns.scatterplot(data=df_train, x='GrLivArea', y='SalePrice')","fc5198c2":"#scatter plot\nplt.scatter(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], df_train[df_train['TotalBsmtSF']>0]['SalePrice']);","3854c406":"#convert categorical variable into dummy\ndf_train = pd.get_dummies(df_train)","f06da19a":"df_train.head()","ed5d8965":"# Use numpy to convert to arrays\nimport numpy as np\n\n# Labels are the values we want to predict\nlabels = np.array(df_train['SalePrice'])\n\n# Remove the labels from the features\n# axis 1 refers to the columns\ndf_train= df_train.drop('SalePrice', axis = 1)\n\n# Saving feature names for later use\ndf_train_list = list(df_train.columns)\n\n# Convert to numpy array\ndf_train = np.array(df_train)","bda168dc":"# Using Skicit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n# Split the data into training and testing sets\ntrain_df_train, test_df_train, train_labels, test_labels = train_test_split(df_train, labels, test_size = 0.25, random_state = 42)","6c1c6dfa":"print('Training df_train Shape:', train_df_train.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing df_train Shape:', test_df_train.shape)\nprint('Testing Labels Shape:', test_labels.shape)\n","3230b126":"# The baseline predictions are the historical averages\nbaseline_preds = test_df_train[:, df_train_list.index('OverallQual')]\n\n# Baseline errors, and display average baseline error\nbaseline_errors = abs(baseline_preds - test_labels)\nprint('OverallQual baseline error: ', round(np.mean(baseline_errors), 2))\n","78a48ddc":"# The baseline predictions are the historical averages\nbaseline_preds = test_df_train[:, df_train_list.index('GrLivArea')]\n\n# Baseline errors, and display average baseline error\nbaseline_errors = abs(baseline_preds - test_labels)\nprint('GrLivArea baseline error: ', round(np.mean(baseline_errors), 2))","456a8340":"# The baseline predictions are the historical averages\nbaseline_preds = test_df_train[:, df_train_list.index('GarageArea')]\n# Baseline errors, and display average baseline error\nbaseline_errors = abs(baseline_preds - test_labels)\nprint('GarageArea baseline error: ', round(np.mean(baseline_errors), 2))","1130d645":"# The baseline predictions are the historical averages\nbaseline_preds = test_df_train[:, df_train_list.index('TotalBsmtSF')]\n\n# Baseline errors, and display average baseline error\nbaseline_errors = abs(baseline_preds - test_labels)\nprint('TotalBsmtSF baseline error: ', round(np.mean(baseline_errors), 2))","4c81e81c":"# The baseline predictions are the historical averages\nbaseline_preds = test_df_train[:, df_train_list.index('FullBath')]\n\n# Baseline errors, and display average baseline error\nbaseline_errors = abs(baseline_preds - test_labels)\nprint('FullBath baseline error: ', round(np.mean(baseline_errors), 2))","2c3a5d6e":"# The baseline predictions are the historical averages\nbaseline_preds = test_df_train[:, df_train_list.index('YearBuilt')]\n\n# Baseline errors, and display average baseline error\nbaseline_errors = abs(baseline_preds - test_labels)\nprint('YearBuilt baseline error: ', round(np.mean(baseline_errors), 2))","7807520e":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n\n# Train the model on training data\nrf.fit(train_df_train, train_labels);","ad7f1c9e":"# Use the forest's predict method on the test data\npredictions = rf.predict(test_df_train)\n\n# Calculate the absolute errors\nerrors = abs(predictions - test_labels)\n\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'Value')","1de14dec":"# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ test_labels)\n\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')\n","a4ed51df":"# Get numerical feature importances\nimportances = list(rf.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(feature, round(importance, 2)) for feature, importance in zip(df_train_list, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances];","20bf6f9a":"# New random forest with only the two most important variables\nrf_most_important = RandomForestRegressor(n_estimators= 1000, random_state=42)\n\n# Extract the two most important features\nimportant_indices = [df_train_list.index('OverallQual')]\ntrain_important = train_df_train[:, important_indices]\ntest_important = test_df_train[:, important_indices]\n\n# Train the random forest\nrf_most_important.fit(train_important, train_labels)\n\n# Make predictions and determine the error\npredictions = rf_most_important.predict(test_important)\nerrors = abs(predictions - test_labels)\n\n# Display the performance metrics\nprint('OverallQual Mean Absolute Error:', round(np.mean(errors), 1), 'Rates')\nmape = np.mean(100 * (errors \/ test_labels))\naccuracy = 100 - mape\nprint('Accuracy:', round(accuracy, 1), '%.')","b51eb769":"# New random forest with only the two most important variables\nrf_most_important = RandomForestRegressor(n_estimators= 1000, random_state=42)\n\n# Extract the two most important features\nimportant_indices = [df_train_list.index('GrLivArea')]\ntrain_important = train_df_train[:, important_indices]\ntest_important = test_df_train[:, important_indices]\n\n# Train the random forest\nrf_most_important.fit(train_important, train_labels)\n\n# Make predictions and determine the error\npredictions = rf_most_important.predict(test_important)\nerrors = abs(predictions - test_labels)\n\n# Display the performance metrics\nprint('GrLivArea Mean Absolute Error:', round(np.mean(errors), 1), 'square feet')\nmape = np.mean(100 * (errors \/ test_labels))\naccuracy = 100 - mape\nprint('Accuracy:', round(accuracy, 1), '%.')","95ff303a":"# New random forest with only the two most important variables\nrf_most_important = RandomForestRegressor(n_estimators= 1000, random_state=42)\n\n# Extract the two most important features\nimportant_indices = [df_train_list.index('TotalBsmtSF')]\ntrain_important = train_df_train[:, important_indices]\ntest_important = test_df_train[:, important_indices]\n\n# Train the random forest\nrf_most_important.fit(train_important, train_labels)\n\n# Make predictions and determine the error\npredictions = rf_most_important.predict(test_important)\nerrors = abs(predictions - test_labels)\n\n# Display the performance metrics\nprint('TotalBsmtSF Mean Absolute Error:', round(np.mean(errors), 1), 'square feet')\nmape = np.mean(100 * (errors \/ test_labels))\naccuracy = 100 - mape\nprint('Accuracy:', round(accuracy, 1), '%.')","7bf2430a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib.pyplot as plt\n\nfrom subprocess import check_output\nfrom datetime import time\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n","4936589c":"# Scale the data to be between -1 and 1\nscaler = StandardScaler()\nscaler.fit(train_df_train)\ntrain_df_train = scaler.transform(train_df_train)\ntest_df_train = scaler.transform( test_df_train)\n\n","1d300eeb":"# Establish model\nmodel = RandomForestRegressor(n_jobs=-1)","bb3b5eaa":"# Try different numbers of n_estimators - this will take a minute or so\nestimators = np.arange(10, 200, 10)\nscores = []\nfor n in estimators:\n    model.set_params(n_estimators=n)\n    model.fit(train_df_train, train_labels)\n    scores.append(model.score(test_df_train, test_labels))\nplt.title(\"Effect of n_estimators\")\nplt.xlabel(\"n_estimator\")\nplt.ylabel(\"score\")\nplt.plot(estimators, scores)\n\n ","c375789c":"# 6.1 Variable Importances","1f00586b":"# 2.5 Comparison of GrLivArea in a normal distribution","1c6a5865":"# 2.3 Comparison of PriceSale in a normal distribution","da259705":"It's mean error of TotalBsmtSF must be under 5.29 for get correct modelling","a729d424":"# 1.9 look all variable with Correlation matrix (heatmap style)","ae961f15":"\n# 1.4 Correlation in percentage between pricesale and all independent variables","1225456f":"> # Import Library","65eec157":"Outliers are cases or data that have unique characteristics that look very different from other observations and appear in the form of extreme values for either a single variable or a combination (Ghozali, 2011: 41).","a1830fb4":"# 2.13 Re-check Train and Test datasets ","abfee544":"OverallQual trend data is linear to pricesale","ba93d9f1":"# 5. Evaluation Model","6ebefecb":"# 1.5 Overview OverallQual 79,09%","32b6f767":"It's mean error of GarageArea must be under 457.1 for get correct modelling","e110aba0":"# 2. Data Preparation","3d98ecc0":"# 2.2 Overview Outliar","7396ffbd":"# 1.10 only overview variable is above 50%","f4a12336":"# 5.2 Determine Performance Metrics","21046a37":"# 2.11 Features and Targets and Convert Data to Arrays","abefa010":"# 2.1 Overview Missing Data","b16e231a":"# 2.7 Comparison of TotalBsmtSF in a normal distribution","8898b426":"# 1.2 Overview data train descriotion pricesale","dc5fe542":"the price sale has a positive skewness distribution and still follows a linear diagonal line","3695ce22":"# 1.7 Overview GarageCars 64,04%","c9626c08":"Descriptive statistics is a statistical technique used to analyze and describe the data that has been collected as without making general conclusions or generalizations. The description described is only in the form of an accumulation, it does not explain a thing relationships using hypotheses, making predictions, and drawing conclusion. (Mahramah, Maiyastri, & Asdi, 2016)\n\nDescriptive statistics are used to provide information and describe a situation based on data by drawing conclusions only based on existing data (Hasan, 2005)","3a90c7f7":"# Machine Learning WorkFlow","0d54cfe2":"It's mean error of GrLivArea must be under 4.76 for get correct modelling","778dfb08":"from Histogram is known :\n\n- Deviate from the normal distribution.\n\n- Have appreciable positive skewness. tail on the right side\n\n- lepto kurtosis. value > 3","622260e7":"import the random forest regression model from skicit-learn, instantiate the model, and fit (scikit-learn\u2019s name for training) the model on the training data","4658c16b":"**bivariate analysis GRLivArea VS Pricesales**","94826dca":"# 1.6 Overview GrLivArea 70,86%","204c3920":"Establish baseline for measure model. If te model cannot improve upon the baseline, then it will be a failure and should try a different model or admit that machine learning is not right for problem.","a2480b2b":"1 data TotalBsmtP is a remote data. does this also include outliar?\n\nWait, after observing [Ames Iowa city for known](https:\/\/www.cityofames.org\/about-ames\/about-ames). Ames Iowa is centrally and conveniently located in the heart of the Midwest and Iowa, Ames is known for its strong, stable economy, thriving cultural environment, comprehensive medical care, high quality schools, acres of parks and recreational opportunities. , and the world-famous State University of Iowa. \n\nso with a city character like this, it seems that there are people who are looking for a house with a spacious basement character but the price is cheap, maybe they are farmers and need more warehouse\n","2927fcd3":"# 3. Choosing Model","e8e791fb":"Missing data is missing or unavailable information for an object.","4da95788":"# 1.3 Pricesale Histogram Plot","cd67e0a0":"Data labeling is the process of labeling data that has been cleaning process is carried out. Labeling to help machines learn patterns from data. so Machine Learning can make predictions or classifications on data unlabeled","71f91dcb":"The effect of the transformation to a normal distribution has changed the scatter plot of GrLivARea","3e054c0b":"# 7. predictions","6cac4ed0":"It's mean error of OverallQual must be under 5.96 for get correct modelling","97eeb3f8":"***Of the 10 most influential data on price sale, it turns out that there are still some data that have a direct correlation so that it can still be eliminated by choosing only one variable***\n\n- GarageCars and GarageArea\nthis is just a logical view because to detail the number of cars that can fit into the garage depends also on the size of the car\n\n- TotalBsmtSF and 1stFirsF\nWe know that a house that has a basement can also be said that the basement is the 1st floor\n\n- TotRmsAbvGrd and 'GrLivArea'\nbecause wherever the place is, whether it's upstairs or underground, the room can be said to be the same\n","e1b5adfb":"From describe above pricesale has 1450 data, and average 190921.19 standard deviation 79442.50 is quite high because it has a fairly large range with maximum 755000 and minimum 34900","1d756c6e":"# 6. Parameter Tuning","894b9e8c":"# 5.1 Make Predictions on the Test Set","15cade21":"**bivariate analysis TotalBsmtSF VS Pricesale**","3aa186e6":"Because GrLivArea is numeric features, so using scatte. [The advantage of the scatterplot](https:\/\/www.coursehero.com\/file\/ph6j5g\/Keunggulan-dari-metode-scatterplot-adalah-memungkinkan-kita-untuk-melihat-data\/) method is that it allows us to see the data visually.","e65433f0":"The totalBsmtSF cannot be directly transformed into a normal distribution because there is still data 0. or it means that in Awes Iowa there are also houses that are sold and do not have a basement. so the data is converted to binary first","fca6b648":"Bottom 2 data look far away, that outliers because they don't follow a linear trend. so can deleted","b0ea22d6":"It's mean error of YearBuilt must be under 1959.48 for get correct modelling","c05261f0":"# 2.4 Transform price sale into a normal distribution","68ce6321":"# 2.12 Training and Testing Sets","1f8ddc5f":"from results near 0 is no problem beacuse same with analyze to Univariate analysis . the problem is around 7 beacuse so far value","b70ec86d":"From the percentage of missing data above, it can be seen that there are several variables have missing. They are not important when someone wants to buy a house, besides that variables can actually be replaced with other variables. because still have similarities in philosophy. Of all the missing data, it turns out that there is 1 very important variable, namely: Electrical.","cf0af62a":"# 4. Training Model","f45836b9":"# 2.10 Data Labeling","01cb53d0":"**Comparison scatter Plot GrlivArea VS SalePrice after transform to normal distribution**","bad14773":"in this case data modeling does not need to be done because all data has been converted to numeric","c616e61d":"**[bivariate analysis](https:\/\/www.statisticshowto.com\/bivariate-analysis\/)** used to find out if there is a relationship between two sets of values. It usually involves the variables X and Y. and now bivariate analysis with 80% approach","53889dcf":"# 1. Data Collection","1635f511":"# 2.9 dummy variables","0a4dd796":"# 2.8 Transform totalBsmtSF to Binary categorical features","65caf09f":"It's mean error of FullBath must be under 10.46 for get correct modelling","f39207bc":"# 1.8 Overview GarageArea 62,34%","54cc91aa":"GrLivArea and PriceSale have Linear Relation","97bea0df":"# 1.1 Overview Column data train","01aa7bf3":"# 2.6 Transforms GrLivArea into a normal distribution","a65f4a02":"[**Univariate analysis**](https:\/\/www.statisticshowto.com\/univariate\/) is the simplest form of analyzing data. \u201cUni\u201d means \u201cone\u201d, so in other words your data has only one variable.\n\n\nThe primary concern here is to establish a threshold that defines an observation as an outlier. To do so, we'll standardize the data. In this context, data standardization means converting data values to have mean of 0 and a standard deviation of 1.Univariate analysis\nThe primary concern here is to establish a threshold that defines an observation as an outlier. To do so, we'll standardize the data. In this context, data standardization means converting data values to have mean of 0 and a standard deviation of 1. ([Pedro Marcelino, PhD](https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python))","75832c49":"There is one final step of data preparation: splitting data into training and testing sets","5e01258e":"# 3.1 Establish Baseline","971e63a0":"From the results of the scatter plot above, it turns out that there are some similarities between variables such as: Yearbuilt is almost the same as GliveArea, TotalBsmtSF. and other similaritie","8b9ce20d":"Top 2 data look far away, but not outliers because they follow a linear trend with other data","17f5be29":"Broadly, the relationship can be seen, but analytically it is very difficult to do further analysis, so it is necessary to do a zoom variable process","0ebbbcc0":"from the percentage above, it can be seen that not all independent variables have a strong relationship. there are only 10 variables that have a strong relationship seen from the percentage greater than 50%","13aad429":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAiYAAABbCAMAAABwM75CAAABGlBMVEX\/\/\/+tlX72ZWCbm5sIv8VjcnWPSoFFP1SrknpBO1FkX3D2YFqYmJj19fX4+PmgoKCzs7NUTmLz7PKqqqr2XVjm39i5ubns+\/sexMqss7WTUYZcbHCMRX56h4r7y8n4fnrWyr\/U2Nm6ppOhaJX7vbtVz9N5dYKNl5n5jor59fnm+fmfp6pcVmmmcZysfKL8xcPCsKCg4uVs0taD2t3R0dHo6utxf4L94uHAxcY6M0vdydnLvK7Cn7vb0ciJPXrs4eq56+3929r6p6SfnKa6k7LOssjR8vP+7u7j0+D3dnL5lpPXwNKQ3+LCwMaurLSbXo+MiZX6oZ77sa+zh6pwa3v4enaDLXOCfoswKEPIqMFMX2L2U017EGksIkHqF1wEAAAgAElEQVR4nO2dC1vqOrOAI3hDabgjcpMiCIggagNFpIDITURcoNvlWuf8\/79xkrRgadPSont9397Pmb0fhNJkgXmdmUwmEwBkgbzoDdgTb1jggJFA\/jiXsCk5ERn2Bzqz\/IlNyc86xv2FUpW0TamkQsb9nV9dZyP2JHvdPjfsr9Wbl07tSelhXDDsD01eXg\/syevLZHVAONHpdrud9gS3cHvZA8sd78RiO3YlFoslBPaXzIyCh4cOm3J4eDi6ZPfXTO\/v72\/ZFNIkxe6vn93eTK7ZoAzLcSke37Uncdzmwc\/sj3931V32pe5651WdBOwiskTFKbI+VMI+IwtUigwNNcgH7SKyJCU\/0PfHVewzskAlzfrDuNkQEiyRNqO\/O9uILFGZ3jL6e95zufY2Etfe83JUne5P\/WBdlDZhPSXVjSnBnOR0nNRGh0v1YEOUNm81HSXp\/aV6sCELTvSW53pzSrBcabuDc2mhHmyJ0qan+3zdugyJXWUit+kuKJH1gsembxKQ6XJr9QmqyuNdtemaVHdiMidwtb\/BySFFxPFmzzV5c1BSDk80+gRW6Ijvb9n1TbYoKvtpLccLXWLTNYlEDDi5o5TEd6c2fZMpJSW+O9b091yXx9tn0zfxUVBcLqpPOGpx3F6egzYFiRQUN7\/yoWCOjHYsISKbHXLomKqhmEY\/PRKLczjK1AoFO90VCrUZVUPB+9X+UnSwt1J2Px\/kmlQN7VdW+2vLg4390SN7ct6WPZrIqn9yK9HBfhj6C\/bEPy5TTqar\/gkvD\/bZBHH2BAnvtOkeGWCRDrWB67hGkAc3dgdW\/vxFOtRFaNTGtD\/q1FRXzH+HqITgI8PFWC+DPFUoKxMetMVUCZYENignK2bnKGvoYqyXK5kw9aXCaZwM9XCj\/nqEE+lu5do7VSaTjfqbUD10hr+5Z3NK8O\/cqVMnCWo4Nu2vqlMnj4fEcGzYHyQGK\/hDfYmM9IaUYCEGa1WdyMqkvWF\/Tzp1cks1wmaUKAYrqp4X82Sk65tRgjkhjLkQQFQfbNgJAIJb48Ui4l9UNx0FwMeIwVKpogH1LzbSJURqxGKN1M2J4dg3CYCYC0f9WPXXo\/7rzab9gazWO3nAmEgfG\/dXIrpI7Z108UC7Xjbuj9id+rM8zpsqE\/xrI+pEbXWIzYkdb9wfqGqsTocok\/zm\/VGzo7I6dJzTm\/fX0FJGx9k4TLZO2hqrI9scdvTDioxJ8wfVBTrOvOH9akHP+muCbHXCxDUxiX6uE+IAe1R\/XccEE9an4pBaDNVNkXgnqvaXBJOMyQcYmHtBM9I++fk6RIa5YXg7dtw40w5p+9Tn6yMyX4mYfgRT6RNMsp+v\/VM8zKfW2hZaw1tt4LVFTFbp8zV8dWEn1JJ2530MnLgLjNkF8GqGWSX41wXXeqJhTXvtMC8Erc6Pq0Y+7rGmfYYMs0EslcqjLi6yIpfB1fbaYVYL16ykia5pmNgkbfvzyOow2xUtZhSTkvH9S2n1ytNoPP5Xa\/WyP7ranjvAmFxY+ST8xcu73jhB3H7PZ4wJDGNbInrWqSurmPAJokOWKiWR0IZHFLGByYDOdPMEk8HM6PMlg6vayASTFIm3pRv7lfR+xRCU\/w5MCrflXUmSdqe70jpMLswxgXgw5JF4fede6mdaX3ctJgF3wOtZ67ZYxwR\/GF5U7oQJ\/pg9G7KjTfLEmGSIf3r\/dUw4OerWACEuhH82DfqzgMn5zfX1U9\/oA2lkI0xuSxiR0t1taxiXNG6MLUyg0H298F28vgh4cLpnLwfCa13DgikmXBiF3W5PwON2imF9OF4l1jHh8DTmVxGgXLGYExLHwk6R1Z8dTGqPYJC5v88MBsZhFauY0Aj+fpNDjUojhEL7RpOh9ZgooXuLkx8bmBQUxVF4iEu7czplHkq7mpvsYMKf1eUFwXr9VQB83cdPdDNnU0xEt9sdRkQlBTAtZg6QHUzEWCwHII8FHedyiSqrP1u+yeAxn+l0Mif3xgvoVjGhumS\/EaILPaEmtj7s\/tZicrVYq5H1ydU1WxZzYBuYlKQyWddrTSVp3hqOiRrpSVpv1wYmzy78Vp0I+fl8duHz6eMrppjAT2sT1i3arIgdTGACv8OJsvD8VzAp3ONJ7uBNeWOWx5xcMudDFjFpUkqasuXZT3OprS1WbxYwuV7F5Jq91LNUNpYxgaXT1l18Oh7uSrs9OJem0hiAsibiagcTstRT93UnwqR7QZ5ecHCidzFMMUGfITMYcCKT+Y4d34QXRYFDx2Eq4pcwAZ38DJws4yGZH+CRbXisYSIvGu83uLS8DkzcE1ZvFjB5WsXkhj1ZjtjFpFA6JTPP8VSKT1ugNy2A26jfH5W0eQOWMRF+qrIEJr69PRczUmuCCfQG3J+hFMHt9DK\/KhUbmIixRCKWg4vJztcwwZ+y8\/j5\/LFmYHesYRJS0gSQnGOQxrZnQ0yOlglKcszsmzAplMv0Cw6n8VNsbR7m+DtHWz1pqv3aVjHBE2WXTwCoe+A76CJEp82s8JkJJpxbvZyH3E4TJ9YGJsWdnepOgk\/kiCSKX8UE3KuCq5dGUx1rmKTk3IKKsnycwj839E3OF+kBytjrMXkibolNTArlv+4IEMOoRNd\/x1E\/GE9bpzqbYxmTSZ0s9Ai+V2x0zi4uXshrRhDW1OggjwoTztQ5sYVJLLZTVZazEfdlTNSJaZ0fzFtsYJJuhJqpVCiF9UgDNbBWYU+J1xqdZSab7KRqMDk6P6J328PEXyqPS9NxYTiViC4Bw9bDtBQd96SoJmpiHZMzl+sVIF+XjDO\/5+LpBYZzYeqbhJ2fl5Bp7MSGC8sTz1XglTjs17TJ4PKytopJ5zLJsjvWMGns7zeb6XSzmQKhUIgL7dOFYJYSXj8hzqptjhaT6+3+Bpj0sMXBbslpNF4iXNzGS3480\/FPpQegFYuYIB9RJi\/v2KfoPl+8vJzRtWDGFzbVJgFVcoD4XdpE+XcXqzpfwqQzy9TuVUs1l7PObMbyYa1iUiFT4a1mqpKGlXRlyzApZT0m\/Yg6OUCNyVH\/aDNM5DWTwkOcLuqNd6Uy0SllaapfIrSICe\/aqyPuQgCTn\/Wf7\/glh7ATy9AHZpiI2DlZXENOt5vngNFinQ1tclxUyxdnOoBMdj6f541WdqwanUqThtcq+\/tKMuPGmIBzcmWxZqzGpL19tRkmC3mQsP64jUslojfvpDgjPdoiJkLdVeeQD4GX+p7rHaA9BH0uVlaKGSacICw4QR6nIIY9osfAjbWBibAiX4ubUMkvr8\/u2XdYn+mkEaEjVNla5FNr0kqM2rPWdK6yn\/sqKCb9djZyRDBpfwWTXgujIZXjEp30fEjMrBRb2sTHg+efrp9dgFyIs69NAB3+MI94\/DZ2KZyBsNfpDbDCJ3Z8k+\/GpHCijP\/9o2Fkx2J4Lb1VCTUqoVSzGWosN1uw8g3WYdK\/iVwfRZ76kezVEXmNMek\/ZftZjMf11zBpSdKQbM2Il8mX\/ZAYjgmw7pvsueoCOOsC2D144cDzBU2ZZYzbGkwCbo+8y8LNh2kQBc9+WB\/LBiYrNqcY\/jomAP6gE5y84cKfZUxCW1uNVLNBkqKbX8DkiMZgj7avrhaZjzeRPnFUvo5JYSqVIIAlKT4HhJJ4lBkpsogJfHXVX4CghNSEPezOulwHDA7WYMKLHHZkBY738gFZFyGnwPibtYEJWk1M+gZMACQ+Sc0suc3qmk6KOiRNAkdjf2NM5BBse\/tGnu6ck\/kxeXqlYPIF36Qn7bYAfDjFdueh8BGX5lHWxi3LE+JuncyCn\/e6iEP4EZsdV73L6G9dIgEWwcvRDRrK2+rQ7FJs5Jusbir+eniNyI\/kYJAxUSbWEwloYI1sGm0uvRNW5MQcEzm2dr2dlZ88KbtGr8CXtYk\/il0R+DAl\/kn8dFeag48Sy9JaxYRMbA4QmLz6LnwHE8C9sm2OFUxk4d3Kx\/Gy4ic2tAmn3ijyPdoEzE7y+ROzHEjraUlEiaSbqWZqYXSYcVhTTM7lkEk2soidXFEI+vidPuif4wkx+UkWe4wxibIxuZN2C+D2lIRNPrB\/Mof4TpY6oe1Vy8aGazrPWJ284l804hEE6Ky+x1Qm1jFBihKBThZtWkzoMDO0DtEmK3JsDROSpBhMsu6k0nnEYpbmSDHR5sIyA6yQaJF0Iy1vCTSd6ajaH6kxIW4Ifh25JpgsovZZVobSKiYrubBxoiq0QpUJgNgdGY8xMnPyl\/tQZnRciMZ34+o3CABnrO+L33DtdXkIId\/14YnPGZMCS5jwAgqLSuReZO7TIGEVdfgNVWPMXTo638Rg6Y+2V2\/AOAkGT4zTSWp5LGbbMwoj3F59A4mMsL9vaH8JSJrmOzLvamjaPy0Xg2VMCCFP5EHRKBHWZsDzJSY0P6Wt6q8Xl3b1u3R6kuyx+udSHNsdam8+dlkJ+Lh9VN2ef907YKbEw\/c6SUja8+3VSR7Bq0FC9HpMEB9wepyiGAjwHAo72RE2JNAPwfPK2CKR5ekSTES1hAU2Jov2wiIfcpC5NKYEDAgmpnndg8tLQkkns2AlFDK4n9v\/nOJwzVTK4Lcitw81F7\/7\/meVkva27JWoHowqWnwmt8ntz6\/ayuvWWD\/6eIJDFvlgLypJ8wJWGWNCjnazsLq9v7c0SYZKoKsUHSDCtDjAEiY8Wc3hvAGvN0ASHo3+NUATZ90B020cWkxEHrExkSX3K8bycPSSGRnVMFmR2e9gcN19aInJ+t1eTaxtUrqrbTUX1xHiu\/av2KKxRGQfRvbI8J8bxvE0x\/+BIZELU\/SioPcXc6azbCBJ5bXbIs5cVJOYJVWvx4STs2A5j4inOwiYUSDvHTS7g98paiRnggmie4ktcVIw0TWfN9EiFms4CdnAJM30hFcxOTcphqQVuq5snKB\/J53ePuxKUvRD\/raF05IuIWlFyN7BeHnNr4bfc03QxFUXeEZ2oyLrMUGKz+o1zZmWb6X71c044cI6MVlRRHKFFGub1SwIlIudmE2JlERHKuv3yaeVvJRVWcHE1oZROf3AUJ+UsF+KNcnH0hw9mFOC3yd7ztdw8lJ\/hQC66jx5ZnCPBaMTlmfA5tZEuXUtJ\/aETngs6hMrkgmu1yfLsJqFvaMh+c7U6tWjfv\/8vK+IsQlhiJLNZMCJf1eKT+e3n4P+wY6tfUprGl\/LCecjiUgUE6FeNxi69ZjAAF3+461sMYbeb+ak+M36ZEZLWJj5J3BZPSltoepGaIupTzaWvhknrfLdrdqvbUXZ3qv6FpmTuQknz3Uf2TxRx5jAA3bUxJI2geGAwIse4w2\/6ntlTjz\/tZxk5BpbJpyElmKlvz\/KiUagLmlNL+v1yftPshcUkqA9eP55wP7bsBI3EUSvU\/Raq2jzX8+JrE9M9yPbErbd2VzscGJF1nIC5XqedHMoNzFSFZaisJyNUQ9\/MyfHO9\/LyaWsT8z9WBsSMl4g3EjM\/RP74qecxEtWpoKGYo6JXoMY6RSOV4QE4ww5gZqfyjNWji6\/lITMCcs10n91mgjI+o10kop0Hg8NObFRA+zTNsk+L5MTxlAbjH77U5QtPixOIC0PAeWf8iXyXSHjC7duFRn25NqOLE5oV6v9cfK\/oL3RNLPeKQoej0fwBMSwhyauhZ0BjgsHdEAhp64EqJ4TlNgphneq1eNqtXi8UyXBeDyVQSihj+uTYP1CFkVA9ZzkHfkkHvHZaIR\/jkgw\/tJxmBy8Hea1vxL4FlzKolisfkW5QrbmbG2l0ulKcytNgvEhukBc0U96KvoaoHpObrYjbawbSOHpdiRCCrNhk3JD1EVbc+cRI0Ib0XFyG939mEejpYfotFeKRu9oXLZUuI3GdRlsH9JSlOKy8VMdJ5O9vef3vb3Xlz3f5NVHdnVhJ\/YVHfhc2rEzzYUNoAAneMj\/0OtFbg6DwwcE5GXk4OsrD+s5Eat8AgkxJOwgcJxAMR5wVTFXDCdE3SphmFVTVhth6Rx2TpK1YLLmSILk4WCE9cPJ\/SyfeeusluMD8tKfrqiwlhO0Fao0uf0mh9EI7XPpFKahkUqT3Eft913G4FSi4+QocnVzfRS5Ocpeg\/Pt9nWWpCe1t\/uRtm6afBRhcKLTJ+X5eFp4mPrvpn4wvSO7dIbSMDqeP4y1e4jJ0p+uprBOn5y9Ty64l1fUPYDQ153gGc+kLuxNuIm2IIEpJgLZD8p7gIAH3BuWMeG8AnnU\/toYmDh1S8l8TOQA\/4vjsaOBMfnFY6WBjos8L+gwOWZgoi0BCgaHswEoBDsDxyXFZAbgyeXlyaCWHGlXi1mYBLWberitBgfgfkiNSTO0BRp6bWIJExAhKdORJ5C9PlIwuc7iJ5GbJ+2dTEwi2vDtXXRYAHengGASVTAB0175bqhd\/yGJBPrS09q7Xnw8B7qvoHuAgO+ZYuJCvglJdtTImn06PMXE7UVhbHjAGkw0RkfvdB5jhUAxSfDHO6QCDqqSAicwoSteIWOyanT0UeBLxz0YEExOLjvBk\/xAxgQ\/6pYBKSYrdacdh\/r86tBWQ8Yk3cQahBQcx5ikQ+mUASZqm8MyOv0IVggEk8j1+TY1OtfZ\/nY7ex3R1gpmYRLRpR4U5tEhxSReLkynpx9AwWQ61eYcyJio607v0u2kq4LOfDzFZO8MXVwcYKMjY6Ivl2SGCeRED6TahANeuoHYHBMlCzrA1iVkb054BxFMqsTokD6INskpz1eEYlKUVwdzRpSAQfIwSbUJNTrkX6DaZFBjGp3DxwwVxYVlZOFzIaxHltqEXCGYpLYqugw2mm9SaVIxdmHP+5FriskNMTrkCtEm\/XNwfa25U05LkpcDb4woAYXWfEoxwW5G9IFuE6WYfIwlzZ0Uk2mPyp0RJQDx7xeyNgFA3vknY3Jhq3CFEEZORDGByooO8qCAISbKVYFCwirDJSZQVVhiQq5wVaFYRAznVJWWJMoWh7H0U3PUTmYUkw7GhHxLeDLL5DMnBpjIsZLOyJCSLVRpUExCmAOqkCqpZhqFGlvaUJsqew2ljSg5irRvIktM6KjfEG0S6We1Kz2q7DVllzqDEjB\/uI0XKCYAROm+4aHUIkZnHNXcqcp+K5TiBpRgrTH5CQkmrxgTunV4Uud9E+TSDZ7pTMfp9ELeiY1OQJS1CfSSeo+mmIhufS3hRX\/VnSrH\/0J8rFosygvDxViML8aqCa2R+MREjBlRgh1Wh6NT+N0ZHI7yl0HaxSwYzNQcjjdtitJnkmPSwSpNLktlaytEjc5WpSlrkyZNFGgyjY6MiRKGZYZNbkgeLMFkm3iu5EqfOKbZzwymhXxiYkIJqSlcBg9YoUjT3pRiUphij2Mc1810PjHxlyQjSrDucJ2BF4xJ\/WIiY8LtuXxosmdrQoytBHnAxodbTqVpkRN9eGGJiUIJO7gGaaSP1NPkoPKPIY50zzY6BJOwCSVYn2AcyP+DAVTAGJCXNd0HXGKSlL1Xg31f5IPIn2+RxSN\/NN3nW2JiRgm2OtgJPToCR\/in4o6ek+HXrwcuMTlnFrBfiL9FUyag3w+VzAnYgvJlzY0LTPynhroEkNAr\/YYcQlApcAp5MiC6Gy3nwprLAhOZkq9UmJVlgYmZLrEjC0wUSsyS8C3JAhNzSqzLApMjU0qsywIThZLS5oWIZfleTAQ64fk6JQtM+G+iZIFJ7fB7KFlgwn1XoH6ByTdRssSk9A2BeiLfiwnphjUTti0KJvK8+OuULDC5DLLDr7ZFwST0Pbpkicn5N1GywMRvGKa3Kd+LCbY537Pop2CCbU7sOyhZYNIJHh5+ByVLbULiJt+x6LfQJpHvoWSBCZzGlcIFX5TvxYQLe74nJUnBBBarie+gZOmbzEajb1kaXvgmzTSJ1X5dFpi0s5HsN1CyNDrD0+j8q34JkW92YZdzAiTyNpZbdbKc6SxOGBgkmVWQrMpypjNQeoGh0Be+7udMZzkr6Guz5G3J54R4AclwbCHpyFCWMx24gISffMUX+G5MFDHazmVVtLv+yHYu3bKvDdFuDjXZzmVJdJtLyep\/e\/P+dCdo3EnSxocuAcbm0ud6\/adR2rwF+ZswMdocalVsbg5dK8w9xEYF6S0I86CUbz3aIL4b128OtSxaTKDlEzDY8jdhYrTV3KrYPihljdg4AcOS\/O0nYBhsNbcqdk\/AWCf\/j8lG8t9xUIqx\/FFMOJ43q0CuEouYIEGw5tmaYVJLdmDnB2tjeefeqPN\/MCaF29tb217ZH8WEdwc+J7iimathEZPjWKKaWPSTM+nQBJOMY+S4TDqYmMz+hZi0\/ppG1wXbx8ZLf7L8vZg4Oc4bACjsFSBGRoCCN8weW6uYJDhULQIhlxOBGEuI3HGuyOzQGJOBYwYHhaTjnpRay+Qfa2CAnw7ADD\/tPBYu7+\/zSVB7zNNKbJl8Xk4p+Edj0hpKt4WH8oMfPozLw9tyuQda84\/yR698R2oKz1ut6XQOh\/PyGNzefdCSfX8YEwgEJ8S2x8kjt8ABHoXZp9BaxgSC4yq2PeIOz\/8SOCjwOea82RiT5CFJYEwGM8nftaQjOXOAx3zn5EftdyY5uHQMZr+Ts9Eg\/9j5TfhIdu4dVGH\/ozG57UlDOB5OHwqn0zt\/63YcHw7\/6vWku7E0vJVuH0r+03nLP\/0Yx1s9qUx3Av4HMAG8N+AWgJMcghPwsAtX2MNEzCV2eO4XAqiIjRCrPzNMiLnBRqcQ7PzIg1qw48iA2dsg77iHBBMH6Dhqj4\/JYI0ct3Mykq3TPxkTSYrfYfVxujsvkLzGXuk0fjv8y9+Kt\/zR4Uf8dDr1lx\/AMH6Kr\/eUwo5\/FhMPhwJegPWIRwBuHogky57ZjXWjw+8co5iIdniEMSlWuaJNTAaH92AwkDGZnYBOkKRK\/zjBjklwhq\/ORhiTQXL0SJTJZbB2uRkm3CJdzSBWa4rJ0epmnH5b2xq2mZn1RtpkiD2ucgmWMCY94P+r19qlmOwSTHpRf8EPMCat+C300xN2aHszTHT7cOAEwcnnNZ6Rn2ruwrrdXg4EPF6MScAj8k6v16nrgohVTH79iuUgrCZyOwLYqYbDsVzCJiYgE\/z9O5kMDga\/O4O3N8cPrFlOHMnaKO\/oKNrkcJBxvJ0kyQ6NfP7QEiZ0DU+Vo5ZanGxfUd2kEjNMSC0bda7r0+qGm3Yf322cvSaLGpP\/IVH7u3h5Wi5MsTaJTktYm\/yPvyW1\/PHbwnRamoM7qex\/2C2fFnq76zGZ\/Pxf1+qOclSf8MqBBmgCwIvNA2ahfKA0RJDj8CNJczIog2MRE07ukEMc7YwjO1dturAkOW0ACqQQbEFOX6MX6MOgRv6HtdooOXjM03eAvBVjrTZBzf0Qx4W4JgilmhwIhUAz1Px8AgHXbKaQYftVTNrn5+02OH86719dnRNM8Kv+FTi6emqTbPv2Eb6K3zrCyLSv6CKOCSY0Pw3TQrRGy0\/ypgv+AmzR6y38K2jJD7jN0L\/MYzPFpC5060gQhAkQnjEV\/PPEN+Gesef5\/IzODp65yQRw+ClGRnhWxuBfGV4bjH7MVleC1xsdkiMd2kpXQCpVqYBGGqS3UukGqDTAVjq1leK2GmlVTUdzTG6e+jcRgsfV0zX9eZ0FV9ugf\/203W5vZ6\/62\/3+9nU2C663b7J009afDK9N6gj\/3\/VdYDy6B89o7\/3FJfD\/i4S9lxfhAmNy9g4u3l8u0OTny7uiZP6VmIDaZWZ1Q5cVTLDqIHW0QqnKFkcwaYBUmmCSToFGhdtH6t065phks21MQuQJtG+y2+dXMiYRrF6ut58AqcS2TTCSH9s0veTPYuJzvYOuD4F3jMnBZA8hn8D\/RC+kICjZovP+jqGBvudJnUN1edfDvxMTnVjEZAvhn82GBpMmxgSk0+ozzs0xIZ5H9nr7nOiVT0yOMD0RDSbZ\/wgmzwJH9+acHUwmwmSPkzF5J5icEUxeBIwJVjZ1iFwWMOHCHL+SFUSPJGd9rC9hgnsVj1cvbYbJ4IeyP+dee6tVbYJAc7+p1ib4cStFbVClYRmTbPYKG5ksfob1xzk2Ok\/bV5HIUSR7tX0DIlTV4LeI0cHaZNs6JqsTFHhnXFLL3IUlA9XFr8J7z88T5Hrp1onRmew9d9HLBTE60PfS9fH4RvTTAibIjVYmwFwYAp5ZW+srmKAcBIIGvg0xcci5BvBNu8FiPSYIv+JIEdhmKtSEoSb2XLH9IY8p\/IRs\/lNv6jLD5Ojm5qaNH7FOubppPx31n7Dzip+A\/s0V8WVvrs5vsAt783QO2lizPFn2TW41Z6L0jBNSzDDhu2SgJmRfjtDt8vhh8owQvjjpPkOu2yUuLCJv8F380tA3gWIgDFGYbO9zIiFAimqJeCADARR2B3ghjGkJiAB6hUB4CYYBJjAXzhU5LifkEJ9LCOC4WEzgz5VLHGM4xBx3nMjxMLeT4MNFfAFf5XLhRJGziMns\/vEk8+PtEmuRtx8DkDn5gTG5PMnXwIl9TNZII82FLGKyiVjBpDXdLbXmY3B3B+cfpVILzMeF0sfp3A8+Tk9PV5H5A+G1cIBD0CMijyBj4g1zAYF347krKU0gBkAgjDAnbnLHohsjTHZyqHoMYwkR7Yh8DBWr+H88C+ZJdC0nAB4dx0hxAlDMgeoxqoa5X8eI5EhbwuTe0flx2JkdgseTQT4\/+H2ZdCQ7v2uZ0eD7McFmyKpvsolYwQSWy34SOZmXC6enfhJs+yjE5\/7o3VBqzTWF6\/9+TCA5OAcDAsJhign0eAIeUSRrOXwAYkyghyePbh54l6bCEBMRE8DFyI6banWHxzQIMSgmqjEBxRDgivgiEBNQuUl+TIStYpIHmTeQPCyMZuDSkXQUCqNkJjgajWrfj4lG\/iP5JvM5gNMeeKBB+4cSxWQMSg+t3XFJk+n2B7RJIAwgh1EIiMQ3wcoDWxhItpsD3kMwAViJhMPWMKkeg1wRkkom+BUHigkg7qBfWLdQTPBzMQbEKsEEYKKwvaXk190AAAS1SURBVPm1ASYw\/wPcv3WCNeybJIMDMID\/WkwK0ztQ+sQEUkwKpfKdJiPlD2DCe7xhiF0RbHuo0UEBrxdx+DVCngDCmPABbwBZxCSRq\/Jk7LFpyeVAsZrD4CQSxSrFhK\/mijv4MUHUjJhIJJBtTEaYANg5OXlLgvzocYQfT\/L3hX8nJuNo2f+xWz7FmNwp2kQimPin01NN5dc\/sfRHouj4AZKt5qSGI0d2JEO6LZmG7el7ZNM5t9aF3RFJM5oChxBxQeRe8H80SC\/H6skj\/cHRW5FVF3ZAw\/Mkbk\/D9bA2INsraiRqb1yRQJZ\/JCY0JN9qyUF7f4s8tgr48a7sH\/71x13YTcTEN1FL0eqmjO8Or13+KzAxkLvp3by0Rpt8T2Y9HeYvbJjQYkYwwd4oEFb7ZCxRs0Ubd6GYfGG\/Hm2vPZ3rC7s6mZhEDG9fK9r2FBNt3T0jgcOxNlu2xdiAsefbXA9QbeSjBSeYpWusCfQ4nU71AcWk4ETs2LjBOqG1YFWIJckwP27eX56UIlCVUEIWzy4wElJIS32QCqSlBDbf1tneXs0+KJCCE\/HN96\/dkubq2c8ZxqS++QDz5GCmV8ATTLyb90Kaq4uj8WSYmZkk1vojykRdQmlA65KYHdNmKgNCyUjVHJJKWPub\/3XRghVqTUlPHtYVaLQsysminzLH42xw7pYVKRNMeqoLXXJCm9HZW+vlxUWbQ8NKWFaE8+haE3WwsTrh9K3zX1In+tZUHWysTvStqTrQ1cqyKvrWY1IKK7rpNuIxKWsSVafjk9PKmcfaWxKBtCbKSC7suhknXIA0Xi09TX3QDevXcLmYxubIVsewFtYagfe0rMlK2b6QXL9ms+3w9LDi1b2lcsVOZsW09SJTslLdsUAqzcdLm3FyS4vfrETcILE6Lt9mnPA+0vgAKArB6RQtbt9SCSd43HpVxCUoJzn7dQk4UW6qUUXUuzjMJ20bnkHyhCKmUUW0TOd+umnb8MBQRW66+s2u5Ao2T7b9k6P+9TZDFVF1Eo9+2C47AVsPlBKNKhLq9NzHru0BhqhLzot0uehOdV6urecJeG2KR26oLdvKy3U6dxI5m1KVG2prxdZGlBPHW96mjGjpxsORhi9OPoBtK12xKWm53JquBqgy2JGsXVGqBWscGzinnMSjpbI9OZXrkK94JkSId0IUyuuZPXn10YYLx0aQq+u57YrcSn\/cjrioIW5T5EZV3ey845DrQx\/aFLmRrlIsCCmn2+\/bFLmRjpJFdb1NRXcmYIFW6lyWirYucqs7bX\/wvS6fJGtXaKP6y2KABSer8LwlcYcZqkyoss4nsCQx1sbRzohReN6aHL4xjjzn0ozC89aEQQnm5PoLlDAmSYW5pD+fwJrEd7W6hHDyIg\/5BuJydT8HGHmXFedtMeL2sD0jlIttAkosVmVPkQY\/HMHD9UzoGAk67tkRiNTW\/gak4DYNtkdzxTqgwIoYuL69qRS3Twopt8ZOWJoc1Ov2SXG56gerFXSQ4PXYpSRgsgcdiYqrYUMSRcHQrRxkHkd2KRk9Xhq6vTDUSNulJF0xcXvb17ZJiWRvDOdHcPhwyjjLwlSipQ\/j+ZHQPfDZxeSgu9AC\/wcKIeohqSOXXQAAAABJRU5ErkJggg==)","a103e9d6":"convert the Pandas dataframes to Numpy arrays because that is the way the algorithm works. save the column headers, which are the names of the features, to a list to use for later visualization","622dbbe2":"**Comparison scatter Plot TotalBsmtSF VS SalePrice after transform to normal distribution**","20b34ee9":"[The dummy variable is](https:\/\/www.researchgate.net\/publication\/330171105_REGRESI_LINIER_BERGANDA_metode_DUMMY) the variable used to categorize the data that is qualitative in nature and the qualitative data is in the form of a nominal scale. The independent variable used is dummy","1793ff87":"Because OverAllQual is categorical features, so using bloxplot. [Boxplots have the following strengths:](https:\/\/khansamhamnida.wordpress.com\/2011\/04\/14\/boxplot-keuntungan-menggunakan-boxplot\/) Graphically displays variable locations and spreads at a glance. useful for comparing distributions between groups or data sets.","bc8e9e80":"# Before starting this analysis, I would like to thank for:\n\n1. Mr. Pedro Marcelino, PhD for his insight about.[Comprehensive data exploration with Python](https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python)\n2. Mr. Will Koehrsen for his insigth about. [Random Forest in Python](https:\/\/towardsdatascience.com\/random-forest-in-python-24d0893d51c0)\n3. Mr. Nick Rose for his insight about. [Random Forest Regressor (accuracy >= 0.91)](https:\/\/www.kaggle.com\/nsrose7224\/random-forest-regressor-accuracy-0-91)\n"}}