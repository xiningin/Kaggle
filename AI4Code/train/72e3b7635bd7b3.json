{"cell_type":{"91943020":"code","97e0a700":"code","a98e31de":"code","985db7a0":"code","5f8074e4":"code","a166fe47":"code","ea6ee30b":"code","96fb2a28":"code","f1e00382":"code","b93a1be4":"code","91dd4604":"code","e61dd280":"code","fcb6c7c0":"code","9387da93":"code","b2a6f259":"code","76115886":"code","f09c3ee6":"code","c8e99f7f":"code","8278188b":"code","7a362c3e":"code","95e111ab":"code","b9d35c50":"code","60aa3b45":"code","72d724d4":"code","bfaa3416":"code","782f5fbf":"code","fee3fced":"code","34d343b7":"code","692bc012":"code","dc342404":"code","11d23d49":"code","fa89adaf":"code","e009ace1":"code","a44ebb41":"code","971b5b20":"code","8813113b":"code","64360e4c":"code","704f2c3e":"code","51af2bba":"code","d22ac6d1":"code","ea07634b":"code","e2aa5b13":"code","1f54826b":"code","af48ac44":"code","b75612fb":"code","c739e295":"code","887fcc94":"code","7d370ad4":"code","694393e5":"code","fe9cc5ae":"code","2575a99a":"code","b47e811e":"code","aab2b53c":"code","f51c3bc8":"code","3385094b":"code","457f6b5f":"code","f1223f8f":"markdown","f50b31ac":"markdown","a9114d19":"markdown","9bee1567":"markdown","0625e067":"markdown","c3e6264a":"markdown","d0269403":"markdown","31cf9f5d":"markdown","8c77144f":"markdown","e54ef497":"markdown","e9f761ca":"markdown","84d198bc":"markdown","116a14ca":"markdown","4e590524":"markdown","90f9864f":"markdown","ebe9429d":"markdown","e34bdc49":"markdown","5a1c15ea":"markdown","c840c62b":"markdown","f14d78d4":"markdown","9ac8a932":"markdown","42972ec0":"markdown","d4642e90":"markdown"},"source":{"91943020":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","97e0a700":"import seaborn as sns\nimport matplotlib.pyplot as plt\n","a98e31de":"gps_df=pd.read_csv('..\/input\/googleplaystore.csv')","985db7a0":"gps_df.shape","5f8074e4":"gps_df.isnull().any()","a166fe47":"#Deleting Null rows from Rating, Type, Content Rating (Leaving Current Ver and Android ver as right now \n#we are not using these columns for any prediction)\n\ngps_df.dropna(subset=['Rating','Type','Content Rating'], inplace=True)\n","ea6ee30b":"gps_df.shape","96fb2a28":"gps_df.describe()\n","f1e00382":"gps_df.sample(7)","b93a1be4":"gps_df['Price'].unique()","91dd4604":"gps_df['Size'].unique()","e61dd280":"#REplace $ by a '' and 'M' also by a ''\ngps_df['Price'].replace(to_replace=r'[\\$]',value='',regex=True, inplace=True)\n\n\n#gps_df.sort_values('Price', ascending=False)","fcb6c7c0":"gps_df['Size'].replace(to_replace='Varies with device',value=np.nan,inplace=True)","9387da93":"#gps_df['Size'].replace(to_replace=r'[\\\\Mk]',value='',regex=True).apply(lambda x: float(x)*1000000),regex=True)\ngps_df_extracted=gps_df['Size'].str.extract(r'(\\d?.\\d?)([\\\\Mk])')","b2a6f259":"gps_df_extracted=gps_df_extracted.replace(to_replace=['k','M'],value=[1000,1000000]).astype(float)","76115886":"gps_df_extracted","f09c3ee6":"gps_df['Size']=gps_df_extracted[0]*gps_df_extracted[1]","c8e99f7f":"gps_df['Size'].unique","8278188b":"gps_df[gps_df['Size'].isnull()].shape","7a362c3e":"gps_df.groupby('Category').Size.mean()","95e111ab":"gps_df['Size'].fillna(gps_df.groupby('Category').Size.transform('mean'), inplace=True)","b9d35c50":"#Converting Price to numeric\ngps_df['Price']=pd.to_numeric(gps_df.Price)","60aa3b45":"# Lets find most reviewed apps\n#Converting the Reviews column to numeric\ngps_df['Reviews']=pd.to_numeric(gps_df.Reviews)","72d724d4":"#REplace , and + by a ''\ngps_df['Installs'].replace(to_replace=r'[\\,]|[\\+]',value='',regex=True,inplace=True)","bfaa3416":"#Converting Installs to numeric\ngps_df['Installs']=pd.to_numeric(gps_df.Installs)","782f5fbf":"gps_df.dtypes","fee3fced":"gps_df.sort_values('Reviews', ascending=False).head(8)","34d343b7":"gps_df.sort_values('Reviews', ascending=False, inplace=True)","692bc012":"gps_df[gps_df.duplicated(['App','Category'])].head(10)","dc342404":"gps_df.drop_duplicates(['App','Category'], inplace=True)","11d23d49":"plt.figure(figsize=(12,8))\nax=sns.barplot(y='App',x='Reviews',data=gps_df.head(10))\nplt.show()","fa89adaf":"gps_df_categ=gps_df.groupby('Category')","e009ace1":"gps_df_categ.count().shape","a44ebb41":"gps_df_categcount=gps_df_categ.count()","971b5b20":"gps_df_categcount.sort_values('App', ascending=False, inplace=True)","8813113b":"\nplt.figure(figsize=(15,10))\nax=sns.barplot(y=gps_df_categcount.index, x='App',data=gps_df_categcount, palette='Blues_d')\nax.set(xlabel='Number of Apps')\nplt.show()","64360e4c":"gps_df_type=gps_df.groupby(['Type','Category']).count()","704f2c3e":"gps_df_type.index.levels\n","51af2bba":"gps_df_type=gps_df_type.unstack(level=0)","d22ac6d1":"#Some of the categories have no paid apps so filling NaN values with 0\ngps_df_type=gps_df_type['App'].fillna(value=0,axis=1)","ea07634b":"#Plotting the Type of Paid and free Apps\ngps_df_type.plot(kind='bar',figsize=(15,10))\n","e2aa5b13":"sns.scatterplot(x='Rating',y='Content Rating',data=gps_df)","1f54826b":"#removing the unrated data\ngps_df=gps_df[gps_df['Content Rating']!='Unrated']","af48ac44":"\nfrom pandas.plotting import scatter_matrix\n\nsns.distplot(gps_df['Rating'], bins=50)\n#gps_df.hist()\nsns.pairplot(gps_df)\nplt.show()","b75612fb":"gps_df.corr()","c739e295":"new_gps_df= gps_df[['Category','Reviews','Size','Installs','Price','Content Rating','Rating']]","887fcc94":"#applying log to data\n\nlog_gps_df=np.log1p(new_gps_df[['Reviews','Size','Installs','Price','Rating']])","7d370ad4":"log_gps_df['Category']=new_gps_df[['Category']]","694393e5":"log_gps_df['Content Rating']=new_gps_df[['Content Rating']]","fe9cc5ae":"#plotting the tranformed data\nsns.pairplot(log_gps_df)","2575a99a":"log_gps_df.corr()","b47e811e":"from tempfile import mkdtemp\nfrom shutil import rmtree\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import MinMaxScaler,LabelEncoder,OneHotEncoder,StandardScaler\nfrom sklearn.linear_model import LinearRegression,Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.metrics import r2_score\nimport statistics\n\n\n    \nnumeric_features = ['Reviews','Installs','Size','Price']\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\n\ncategorical_features = ['Content Rating','Category']\ncategorical_transformer = Pipeline(steps=[\n        ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\ncolumn_trans = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])\n\ncolumn_trans_cat = ColumnTransformer(\n    transformers=[\n        \n        ('cat', categorical_transformer, categorical_features)],\n        remainder='passthrough')\n\n","aab2b53c":"\n    \nclf = Pipeline(steps=[('preprocessor', column_trans),\n                          ('classifier',Ridge(alpha=0.1, random_state=2)\n                            )])\n\n\nX = log_gps_df.drop(['Rating'], axis=1)\ny = log_gps_df['Rating']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf.fit(X_train, y_train)\ny_test_pred=clf.predict(X_test)\nTest_mse= mean_squared_error(y_test,y_test_pred)\n\ncat_features=list(clf.named_steps['preprocessor'].named_transformers_['cat'].named_steps['onehot'].get_feature_names())\ncoefficients=list(clf.named_steps['classifier'].coef_)\n   \nnum_features=[]\nnum_features=['Reviews','Installs','Size','Price']\ncoefficients=list(clf.named_steps['classifier'].coef_)\ncat_features.extend(num_features)\n\nfeatures_importance_1=[(cat_features, np.round(coefficients, 3)) for cat_features, coefficients in zip(cat_features, coefficients)]\ncoef_sum=0\n    \nprint(\"Intercepts::\",clf.named_steps['classifier'].intercept_)\n\nprint(\"Test MAE::\", mean_absolute_error(y_test,y_test_pred))\nprint(\"Test MSE::\",(Test_mse))\n\nprint(\"Test R^2 score::\",(r2_score(y_test,y_test_pred)))\n   \nfor pair in sorted(features_importance_1, key=lambda x: x[1]):\n    coef_sum=coef_sum+pair[1]\n    print(pair)\n  \nprint(\"coef_sum::\",coef_sum)","f51c3bc8":"clf_new=Pipeline(steps=[('scaler', StandardScaler(with_mean=False)),\n                           ('classifier',Ridge(alpha=0.1, random_state=2))\n                            ])\n\nX = log_gps_df.drop(['Rating'], axis=1)\ny = log_gps_df['Rating']\n                            \nX_transformed=column_trans_cat.fit_transform(X)\nprint(\"X_transformed::\",X_transformed.shape)\n\nX_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size=0.2, random_state=42)\n\n   \nclf_new.fit(X_train, y_train)\ny_test_pred=clf_new.predict(X_test)\nTest_mse= mean_squared_error(y_test,y_test_pred)\n    \n    \ncat_features=list(column_trans_cat.named_transformers_['cat'].named_steps['onehot'].get_feature_names())\n    #Category_features=list(clf.named_steps['preprocessor'].named_transformers_['cat'])\nnum_features=[]\nnum_features=['Reviews','Installs','Size','Price']\n\ncoefficients=list(clf_new.named_steps['classifier'].coef_)\ncat_features.extend(num_features)\n\nfeatures_importance_2=[(cat_features, np.round(coefficients, 3)) for cat_features, coefficients in zip(cat_features, coefficients)]\ncoef_sum=0\n    \n\n    \nprint(\"Intercepts::\",clf_new.named_steps['classifier'].intercept_)\n\n\nprint(\"Test MAE::\", mean_absolute_error(y_test,y_test_pred))\nprint(\"Test MSE::\",(Test_mse))\n\nprint(\"Test R^2 score::\",r2_score(y_test,y_test_pred))\n   \nfor pair in sorted(features_importance_2, key=lambda x: x[1]):\n    coef_sum=coef_sum+pair[1]\n    print(pair)\n \nprint(\"coef_sum::\",coef_sum)","3385094b":"def plotting_feature_importances(features_importance,title):\n    plt.figure(figsize=(30,15))\n\n    for pair in sorted(features_importance, key=lambda x: x[1]):\n            plt.barh(pair[0],pair[1])\n\n    plt.tick_params(axis='both', which='major', labelsize=15)\n    plt.xlabel(\"Features\", fontsize=18)\n    plt.ylabel(\"Importance\",fontsize=18)\n    plt.title(title,  fontsize=20)\n    plt.show()","457f6b5f":"\nplotting_feature_importances(features_importance_1, \"Features Importances\/weights when OnehotEncoding+Scaling+Learning in Pipeline\")\n\nplotting_feature_importances(features_importance_2, \"Features Importances\/weights when first OnehotEncoding and then Scaling+Learning in Pipeline\")","f1223f8f":"After log transformation ,the data appears to be much normal.\nReviews and Installs correlation is now stronger than before","f50b31ac":"### Comparing their results","a9114d19":"\n**Lets find out the redundant App entries in the dataset. \nKeeping the ones with the highest reviews and dropping the other redundant entries based on App name and category.**","9bee1567":"### Using first categorical transformer on whole data and then splitting into train test data for Scaling + Learning","0625e067":"# Predicting the Rating","c3e6264a":"### Conclusion","d0269403":"Category Family has max no of Free and Paid Apps ","31cf9f5d":"We see that the Price column contains '$' sign ,the Size column contains 'M','k' signs, Installs contain ',' and '+' signs. Taking care of all these.\n","8c77144f":"Lets predict the rating of an app using variables-\nReviews,Installs,Size,Price,Content Rating, Category\n\nsince content Rating and Category are categorical data. Using one hot encoding on it.","e54ef497":"WE can replace the 'NaN' of \"varies with device\" in size with mean of its category.\n","e9f761ca":"## Plotting the features to predict rating","84d198bc":"**Finding missing values in the data**\n\n","116a14ca":"**Max no of apps are from the 'Family' category, Games and Tools taking 2nd and 3rd position.**","4e590524":"# Preprocessing Data","90f9864f":"Reviews and Installs are correlated. More downloaded apps have more reviews.","ebe9429d":"Plots reveal that the dataset is skewed. For better predictions lets log transform the data.","e34bdc49":"**We have 33 distinct categories in GPS dataset**","5a1c15ea":"From the above results we can see that both of them give similar MSE and R^2 score but the coeffiecients weights\/importances differ.\n\nLow R^2 score also suggests that the predictor variables contribute less for predictng the best response. \n\nI would say that if only prediction accuracy\/MSE required then it doesn't matter how you go but if the weights\/importances are also required then the 2nd method that is first using onehotencoding on whole dataset and then scaling+Learning gives much accurate result.\n\n#### Reviews get the highest weight followed by Category Everyone.\n","c840c62b":"**10 most popular apps on google play based on reviews**","f14d78d4":"**Categories in Google Playstore**","9ac8a932":"Rating mean is quite high.","42972ec0":"  ### Splitting the data and then using numeric + categorical transformer and then learning","d4642e90":"# **Cleaning the Dataset**"}}