{"cell_type":{"281d5d02":"code","e0053a45":"code","12ee4c07":"code","67ad7c80":"code","268e38d6":"code","825ddf5b":"code","f87092a5":"code","d003737a":"markdown","dc5c1a10":"markdown","18d69666":"markdown","944d69cd":"markdown","4a413516":"markdown"},"source":{"281d5d02":"import pandas as pd\nfrom sklearn.decomposition import PCA\nimport pickle\nfrom sklearn import preprocessing\nfrom sklearn.manifold import SpectralEmbedding\nfrom sklearn.model_selection import StratifiedKFold","e0053a45":"train_df =pd.read_pickle('..\/input\/ump-train-picklefile\/train.pkl')\n#train_df.info(verbose = True) # dataset is too large for pandas profiling (e.g. auto EDA tool)\ntrain_df = train_df.reset_index(drop = False)\ny_time = train_df.pop('time_id').values\ny = train_df.pop('target').values","12ee4c07":"train_df.pop('row_id')","67ad7c80":"x = train_df.values\n# scaler = preprocessing.StandardScaler().fit(features)\n# pickle.dump(scaler, open('scaler.pkl','wb'))\n# features = scaler.transform(features)\n\n# pca = PCA(n_components=150, random_state=22)\n# pca.fit(features)\n# x = pca.transform(features)\n# pickle.dump(pca,  open('pca.pkl', 'wb'))","268e38d6":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\ni = 0\nmodels = []\nskf = StratifiedKFold(n_splits=30)\n\nfor train_index, test_index in skf.split(x, y_time):\n    regr = LinearRegression()\n    X_train, X_test = x[train_index], x[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    regr.fit(X_train, y_train)\n    pickle.dump(regr,  open('trained_lr'+str(i)+'.pkl', 'wb'))\n    models.append(regr)\n    i += 1","825ddf5b":"df = pd.DataFrame(columns=np.arange(len(models)))\n\nfor i, model in enumerate(models):\n    df[i]=model.predict(x)\n\nregr = LinearRegression()\nregr.fit(df.values, y)\n\npickle.dump(regr,  open('final_trained_lr.pkl', 'wb'))","f87092a5":"# from keras.models import Sequential\n# from keras.layers import Dense\n# from keras.layers import LSTM\n\n# model = Sequential()\n# model.add(LSTM(50, input_shape=(x.shape[1], x.shape[2])))\n# model.add(Dense(1))\n# model.compile(loss = 'mae', optimizer = 'adam')\n# model.fit(x, y)\n\n# model.save('trained_lstm')\n\n","d003737a":"Train the base models - Using Stratified Kfolding creates multiple datasets with sample distributions equal to the overall training dataset. Each fold will train 1 model. A final regressor will then ensemble the models' using their predictions as training data.\n","dc5c1a10":"Train final meta model - This model takes the predictions from the other models as input and produces a final prediction","18d69666":"Get the Data - The csv is very large, so we need to assign data types to control the memory required.","944d69cd":"Prepare the Data - Scale each feature of x to have a mean of 0 and standard deviation of 1. \n                   Reduce the dimensionality using PCA ","4a413516":"Future Work: Use LSTM for time series prediction"}}