{"cell_type":{"301af2b1":"code","9f153eb7":"code","1caa37f6":"code","f134d4e9":"code","0212b67f":"code","d133eb32":"code","80466897":"code","c050fd0b":"code","63af7024":"code","7e016a74":"code","a63da62e":"code","70aafeb0":"code","3fcf3726":"code","b2801a8e":"code","3814fb37":"code","b2bbb040":"code","b3f2492d":"code","a7371428":"code","1c2c5489":"code","2949380d":"code","663819e9":"code","d10076a4":"code","9d117b2a":"code","48fe9b2d":"code","1dc9a4f2":"code","b2a254f8":"code","690db9fe":"code","8172d969":"code","59d33766":"code","f03c72ca":"code","1dd8c36d":"code","4a8651f5":"code","2ec57a23":"code","aed1af66":"code","a7bd7608":"code","be95805c":"code","4f0f28c7":"markdown","17c5e231":"markdown","f679c0f8":"markdown","abedbc98":"markdown","51c0238b":"markdown","1c8b533a":"markdown","c4f5bf6f":"markdown","0497c8b1":"markdown","b7273cec":"markdown","718e6bd9":"markdown","4b4ebb00":"markdown","c8656461":"markdown","fe1e9c44":"markdown","10d2bfa9":"markdown","d0cd0a32":"markdown","a92eb8d9":"markdown"},"source":{"301af2b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras\n","9f153eb7":"print('tf version:',tf.__version__,'\\n' ,'keras version:',keras.__version__,'\\n' ,'numpy version:',np.__version__)","1caa37f6":"p_data_filename = '..\/input\/101-univariate-and-cnn-model-on-daily-solar-power\/predicted_data.hdf5'\np_data_filename2 = 'predicted_data103B_2.hdf5'\np_data_filename3 = 'predicted_data103B_3.hdf5'\npredicted_data = pd.read_hdf(p_data_filename)","f134d4e9":"solarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",header = None,skiprows=1 ,names = ['date','cum_power','Elec_kW', \n                                                                            'Gas_mxm'], sep=',',usecols = [0,1,2,3],\n                     \n                     parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))","0212b67f":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","d133eb32":"solarpower.head(2), solarpower.tail(2)","80466897":"solarpower_plus =   solarpower.copy()\nsolarpower_plus['Elec_kW'] = solarpower_plus.Elec_kW - solarpower_plus.Elec_kW.min()\nsolarpower_plus.describe()","c050fd0b":"X_train = solarpower_plus[:'2019-10-28']\nX_valid = solarpower_plus['2019-10-29':'2020-10-27'] # is 365 days\nX_train.shape, X_valid.shape","63af7024":"X_train.tail(2), X_valid.head(2)","7e016a74":"# we devide the series into multiple input and output patterns\ndef my_split_window(array, out_sequence, window):\n    '''\n    the Pandas dataframe has the columns (features) that we use as input (X).\n    out_sequence is the time series that matches the input\n    Returns array X with the features windowed in shape (number of windows, window, n_features)\n    and array y\n    '''\n    X = []\n    y = []\n    n_steps = len(out_sequence) - window + 1\n    for step in range(n_steps):\n        X_w = []\n        for i in range(window):\n            X_w.append(array[(step + i),:])\n        X.append(X_w)\n        y.append(out_sequence[step + window -1])\n    X = np.array(X)\n    y = np.array(y)\n    return X, y","a63da62e":"import timeit\nstart = timeit.timeit()\n# test my_split_window\ndf = pd.DataFrame()\ndf['feature1'] = [10,20,30,40,50,60,70,80,90]\ndf['feature2'] = [11,21,31,41,51,61,71,81,91]\narray = np.array(df[['feature1', 'feature2']])\n\nout_sequence = [26, 46, 66, 86, 106, 126, 146, 166, 186]\nwindow = 3\nX_, y_ = my_split_window(array, out_sequence, window)\nstop = timeit.timeit()\nprint(stop-start)\nX_, y_\n","70aafeb0":"X_.shape, y_.shape","3fcf3726":"# apply my_split_window on dayly solar power with a window of 365 days (we do not make account for leap years)\n# the input series is the daily solar power\nstart = timeit.timeit()\nX_features = ['Elec_kW' , 'Gas_mxm']\nX_train_input = np.array(X_train[ X_features])\nout_sequence = X_train.day_power.values\nwindow = 365\nX, y = my_split_window(X_train_input, out_sequence,  window)\nX_solar_f2 = X\ny_solar_f2 = y\nstop = timeit.timeit()\nprint(stop-start)\n# print a sample\nfor i in range(3):\n    print(X[i][-5:], y[i])","b2801a8e":"# plot funciotn for the loss of the fitted moddel\ndef plot_history(history):\n    plt.plot(history.history['loss'])\n    plt.title('loss')\n    plt.xlabel('epochs')\n    plt.show()\n    return","3814fb37":"# input model is part 1 of the multi head\ndef input_model_visible(window, n_features=1):\n    visible = tf.keras.layers.Input(shape=(window, n_features))\n    cnn = tf.keras.layers.BatchNormalization()(visible)\n    cnn = tf.keras.layers.Conv1D(filters = 32, kernel_size=2, activation='relu')(cnn)\n    cnn = tf.keras.layers.MaxPooling1D(pool_size=2)(cnn)\n    cnn = tf.keras.layers.Flatten()(cnn)\n    return cnn, visible\n\n# output model for 2 input features\ndef output_model_2_heads(cnn1, cnn2, visible1, visible2):\n    merge = tf.keras.layers.Concatenate()(inputs=([cnn1, cnn2]))\n    bn = tf.keras.layers.BatchNormalization()(merge)\n    dense = tf.keras.layers.Dense(50, activation='relu')(bn)\n    output = tf.keras.layers.Dense(1)(merge)\n    model = tf.keras.Model(inputs=[visible1, visible2], outputs=output)\n    return model\n\n# output model for 3 features\ndef output_model_3_heads(cnn1, cnn2, cnn3, visible1, visible2, visible3):\n    merge = tf.keras.layers.Concatenate()(inputs=([cnn1, cnn2, cnn3]))\n    bn = tf.keras.layers.BatchNormalization()(merge)\n    dense = tf.keras.layers.Dense(50, activation='relu')(bn)\n    output = tf.keras.layers.Dense(1)(merge)\n    model = tf.keras.Model(inputs=[visible1, visible2, visible3], outputs=output)\n    return model\n\ndef multi_2_head_model(window):\n    cnn1, visible1 = input_model_visible(window)\n    cnn2, visible2 = input_model_visible(window)\n    model = output_model_2_heads(cnn1, cnn2, visible1, visible2)\n    return model\n\ndef multi_3_head_model(window):\n    cnn1, visible1 = input_model_visible(window)\n    cnn2, visible2 = input_model_visible(window)\n    cnn3, visible3 = input_model_visible(window)\n    model = output_model_3_heads(cnn1, cnn2, cnn3, visible1, visible2, visible3)\n    return model","b2bbb040":"### tf.keras.backend.clear_session()  # For easy reset of notebook state.\n\n# This model requires input split into two elements\n# we need an input shape = (number of windows, window, feature1=1) \n#  and we have a window size of one year (365 days) \n# we have to reshape\n\nwindow = 365\nX1 = X[:,:,0].reshape(X.shape[0], X.shape[1], 1)\nX2 = X[:,:,1].reshape(X.shape[0], X.shape[1], 1)\n    \nmodel_solar = multi_2_head_model(window)\n\nmodel_solar.compile(optimizer='adam', loss='mae')\n\nepochs = 20\n# fit model\nhistory_solar = model_solar.fit([X1, X2], y, epochs=epochs, verbose=0)\nplot_history(history_solar)","b3f2492d":"# predicting next year\n# the model expects an input of shape(n_time steps = window size, n_features)\n\n\ny_hat = []\nfeatures = ['Elec_kW' , 'Gas_mxm']\n\n\ndef predict_next_year_from_valid(X_train, features, X_valid, model):\n    X_input =  np.array(X_train[features][-365:]) #  next value based on data of last year\n    X_input = X_input.reshape(1, X_input.shape[0], X_input.shape[1]) # input must have 3 dimensions\n    x_input = X_input\n    for i in range(365):\n        new_x = np.array(X_valid[features].iloc[i])\n        new_x = new_x.reshape(1, 1, X_input.shape[2])\n        x_input = np.concatenate((x_input[:, -364:], new_x), axis=1)\n        x_input1 = x_input[:,:,0].reshape(1, 365, 1)\n        x_input2 = x_input[:,:,1].reshape(1, 365, 1)\n        y_hat.append((model.predict([x_input1, x_input2], verbose=0).ravel())[0])\n    \n    return y_hat\n\ny_hat_solar = predict_next_year_from_valid(X_train, features, X_valid, model_solar)","a7371428":"\nplt.plot(y_hat_solar, label='predicted_power')\n\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","1c2c5489":"first_r2_score = r2_score(y_true, y_hat) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat)\nprint('r2_score %.5f' % first_r2_score)\nprint('mae %.2f' % first_mae)","2949380d":"# 100 epochs : 0.42520212661926315","663819e9":"def cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","d10076a4":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat)\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","9d117b2a":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","48fe9b2d":"# we have to train the models for every feature otherwise we can not predict future features\n# first we have to make new split windows\nwindow = 365\n\nfeatures_solar = ['Elec_kW' , 'Gas_mxm']\nfeatures_elec = ['day_power', 'Gas_mxm']\nfeatures_gas = ['day_power', 'Elec_kW']\n\nX_solar, y_solar = X_solar_f2, y_solar_f2  # restore backup X,y\nprint('solar done')\n\nX_train_input_elec = np.array(X_train[ features_elec])\nout_sequence_elec = X_train.Elec_kW.values\nX_elec, y_elec = my_split_window(X_train_input_elec, out_sequence_elec,  window)\nprint('elec done')\n\nX_train_input_gas = np.array(X_train[ features_gas ])\nout_sequence_gas = X_train.Gas_mxm.values\nX_gas, y_gas = my_split_window(X_train_input_gas, out_sequence_gas,  window)\nprint('gas done')\n\nX1_solar = X_solar[:,:,0].reshape(X_solar.shape[0], X_solar.shape[1], 1)\nX2_solar = X_solar[:,:,1].reshape(X_solar.shape[0], X_solar.shape[1], 1)\n\nX1_elec = X_elec[:,:,0].reshape(X_elec.shape[0], X_elec.shape[1], 1)\nX2_elec = X_elec[:,:,1].reshape(X_elec.shape[0], X_elec.shape[1], 1)\n\nX1_gas = X_gas[:,:,0].reshape(X_gas.shape[0], X_gas.shape[1], 1)\nX2_gas = X_gas[:,:,1].reshape(X_gas.shape[0], X_gas.shape[1], 1)\n\nmodel_solar = multi_2_head_model(window)\nmodel_solar.compile(optimizer='adam', loss='mae')\n\nmodel_elec = multi_2_head_model(window)\nmodel_elec.compile(optimizer='adam', loss='mae')\n\nmodel_gas = multi_2_head_model(window)\nmodel_gas.compile(optimizer='adam', loss='mae')\n\nepochs = 10\n# fit models\nhistory_solar = model_solar.fit([X1_solar, X2_solar], y_solar, epochs=epochs, verbose=0)\nprint('solar model ok')\n#epochs = 50\nhistory_elec = model_elec.fit([X1_elec, X2_elec], y_elec, epochs=epochs, verbose=0)\nprint('elec model ok')\n#epochs = 30\nhistory_gas = model_gas.fit([X1_gas, X2_gas], y_gas, epochs=epochs, verbose=0) \nprint('gas model ok')\n\nprint('solar')\nplot_history(history_solar)\nprint('elec')\nplot_history(history_elec)\nprint('gas')\nplot_history(history_gas)","1dc9a4f2":"# predicting next year\n# the model expects an input of shape(n_time steps = window size, n_features)\n\n\ndef predict_next_year_from_valid(X_train, \n                                 features_solar, \n                                 features_elec,\n                                 features_gas,\n                                 model_solar, model_elec, model_gas):\n    y_hat_solar = []\n    y_hat_elec = []\n    y_hat_gas = []\n    X_in_solar =  np.array(X_train[features_solar][-365:]) #  next value based on data of last year\n    X_in_solar = X_in_solar.reshape(1, X_in_solar.shape[0], X_in_solar.shape[1]) # input must have 3 dimensions\n    X_in_elec =  np.array(X_train[features_elec][-365:]) #  next value based on data of last year\n    X_in_elec = X_in_elec.reshape(1, X_in_elec.shape[0], X_in_elec.shape[1]) # input must have 3 dimensions\n    X_in_gas =  np.array(X_train[features_gas][-365:]) #  next value based on data of last year\n    X_in_gas = X_in_gas.reshape(1, X_in_gas.shape[0], X_in_gas.shape[1]) # input must have 3 dimensions\n    print(X_in_gas.shape)\n    for i in range(365):\n        X_in1_solar = X_in_solar[:,:,0].reshape(1, 365, 1)\n        X_in2_solar = X_in_solar[:,:,1].reshape(1, 365, 1)\n        y_hat_solar.append((model_solar.predict([X_in1_solar, X_in2_solar], verbose=0).ravel())[0])\n        if np.array(y_hat_solar[i]) < 0:\n            y_hat_solar[i] = 0 \n        new_X_solar = np.array(y_hat_solar[i])\n\n        #print(new_X_solar)\n        X_in1_elec = X_in_elec[:,:,0].reshape(1, 365, 1)\n        X_in2_elec = X_in_elec[:,:,1].reshape(1, 365, 1)\n        y_hat_elec.append((model_elec.predict([X_in1_elec, X_in2_elec], verbose=0).ravel())[0])\n        if np.array(y_hat_elec[i]) < 0:\n            y_hat_elec[i] = 0        \n        new_X_elec = np.array(y_hat_elec[i])\n\n        #print(new_X_elec)\n        X_in1_gas = X_in_gas[:,:,0].reshape(1, 365, 1)\n        X_in2_gas = X_in_gas[:,:,1].reshape(1, 365, 1)\n        y_hat_gas.append((model_gas.predict([X_in1_gas, X_in2_gas], verbose=0).ravel())[0])\n        if np.array(y_hat_gas[i]) < 0:\n            y_hat_gas[i] = 0\n        new_X_gas = np.array(y_hat_gas[i])\n        \n        new_X_gas2 = np.array((new_X_solar, new_X_elec))\n        new_X_gas2 = new_X_gas2.reshape(1,1,2)\n        \n        new_X_elec2 = np.array((new_X_solar, new_X_gas))\n        new_X_elec2 = new_X_elec2.reshape(1,1,2)\n        \n        new_X_solar2 = np.array((new_X_elec, new_X_gas))\n        new_X_solar2 = new_X_solar2.reshape(1,1,2)\n        \n        X_in_gas = np.concatenate((X_in_gas[:, -364:], new_X_gas2), axis=1)        \n        X_in_solar = np.concatenate((X_in_solar[:, -364:], new_X_solar2), axis=1)\n        X_in_elec = np.concatenate((X_in_elec[:, -364:], new_X_elec2), axis=1)\n\n\n\n    return y_hat_solar, y_hat_elec, y_hat_gas\n\ny_hat_solar, y_hat_elec, y_hat_gas  = predict_next_year_from_valid(X_train, features_solar, features_elec, features_gas,\n                                           model_solar, model_elec, model_gas)","b2a254f8":"plt.plot(y_hat_solar, label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()","690db9fe":"first_r2_score = r2_score(y_true, y_hat_solar) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat)\nprint('r2_score %.2f' % first_r2_score)\nprint('mae %.2f' % first_mae)","8172d969":"y_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat_solar)\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","59d33766":"\npredicted_data['103B_Elec_Gas_2features_gas_elec'] = y_hat_solar\n\npredicted_data.to_hdf(p_data_filename2, key='predicted_data', mode='a')\n\n# predicted_data = pd.read_hdf('predicted_data.hdf5')","f03c72ca":"X_train = X_train.copy()\nX_valid = X_valid.copy()\nX_train['Gas_plus_Elec'] = X_train.Gas_mxm + X_train.Elec_kW\nX_valid['Gas_plus_Elec'] = X_valid.Gas_mxm + X_valid.Elec_kW\n\n# apply my_split_window on dayly solar power with a window of 365 days (we do not make account for leap years)\n# the input series is the daily solar power\nX_features = ['Elec_kW' , 'Gas_mxm', 'Gas_plus_Elec']\nX_train_input = np.array(X_train[ X_features])\nout_sequence = X_train.day_power.values\nwindow = 365\nX, y = my_split_window(X_train_input, out_sequence,  window)\nX_solar_3f = X\ny_solar_3f = y\n# print a sample\nfor i in range(3):\n    print(X[i][-2:], y[i])\n\n\ntf.keras.backend.clear_session()  # For easy reset of notebook state.\n\n# This model requires input split into three elements\n# we need an input shape = (number of windows, window, feature1=1) \n#  and we have a window size of one year (365 days) \n# we have to reshape\n\nwindow = window = 365\nX1 = X[:,:,0].reshape(X.shape[0], X.shape[1], 1)\nX2 = X[:,:,1].reshape(X.shape[0], X.shape[1], 1)\nX3 = X[:,:,2].reshape(X.shape[0], X.shape[1], 1)\n\nmodel_solar2 = multi_3_head_model(window)\nmodel_solar2.compile(optimizer='adam', loss='mae')\n\n# fit model\nepochs = 10\nhistory = model_solar2.fit([X1, X2, X3], y, epochs=epochs, verbose=0)\n\n# graph of the loss shows convergence\nplot_history(history)\n\n\n# predicting next year with X_valid as input\n# the model expects an input of shape(n_time steps = window size, n_features)\ny_hat = []\nfeatures = ['Elec_kW' , 'Gas_mxm', 'Gas_plus_Elec']\nX_input =  np.array(X_train[features][-365:]) #  next value based on data of last year\nX_input = X_input.reshape(1, X_input.shape[0], X_input.shape[1]) # input must have 3 dimensions\nx_input = X_input\nfor i in range(365):\n    new_x = np.array(X_valid[features].iloc[i])\n    new_x = new_x.reshape(1, 1, X_input.shape[2])\n    x_input = np.concatenate((x_input[:, -364:], new_x), axis=1)\n    x_input1 = x_input[:,:,0].reshape(1, 365, 1)\n    x_input2 = x_input[:,:,1].reshape(1, 365, 1)\n    x_input3 = x_input[:,:,2].reshape(1, 365, 1)    \n    y_hat.append((model_solar2.predict([x_input1, x_input2, x_input3], verbose=0).ravel())[0])\n    \n\n\nplt.plot(y_hat, label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()\n\nfirst_r2_score = r2_score(y_true, y_hat) # Best possible score is 1.0 \nfirst_mae = mean_absolute_error(y_true, y_hat)\nprint('r2_score %.2f' % first_r2_score)\nprint('mae %.2f' % first_mae)\n\ny_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat)\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()\n\ntrue_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","1dd8c36d":"# 11 Use three features 'Elec_kW' ,'Gas_mxm' ,'Gas_plus_Elec' to predict the next solar power step\n# we have to train the models for every feature otherwise we can not predict future features\n# first we have to make new split windows\nwindow = 365\n\nfeatures_solar = ['Elec_kW' ,'Gas_mxm' ,'Gas_plus_Elec']\nfeatures_elec = ['day_power','Gas_mxm' , 'Gas_plus_Elec']\nfeatures_gas = ['day_power', 'Elec_kW', 'Gas_plus_Elec']\nfeatures_gas_elec = ['day_power', 'Elec_kW', 'Gas_mxm']\n\nX_train_input_solar = np.array(X_train[ features_solar])\nout_sequence_solar = X_train.day_power.values\nX_solar, y_solar = my_split_window(X_train_input_solar, out_sequence_solar,  window)\nprint('solar done')\n\nX_train_input_elec = np.array(X_train[ features_elec])\nout_sequence_elec = X_train.Elec_kW.values\nX_elec, y_elec = my_split_window(X_train_input_elec, out_sequence_elec,  window)\nprint('elec done')\n\nX_train_input_gas = np.array(X_train[ features_gas])\nout_sequence_gas = X_train.Gas_mxm.values\nX_gas, y_gas = my_split_window(X_train_input_gas, out_sequence_gas,  window)\nprint('gas done')\n\nX_train_input_gas_elec = np.array(X_train[ features_gas_elec ])\nout_sequence_gas_elec = X_train.Gas_plus_Elec.values\nX_gas_elec, y_gas_elec = my_split_window(X_train_input_gas_elec, out_sequence_gas_elec,  window)\nprint('gas_elec done')\n\nX1_solar = X_solar[:,:,0].reshape(X_solar.shape[0], X_solar.shape[1], 1)\nX2_solar = X_solar[:,:,1].reshape(X_solar.shape[0], X_solar.shape[1], 1)\nX3_solar = X_solar[:,:,2].reshape(X_solar.shape[0], X_solar.shape[1], 1)\n\nX1_elec = X_elec[:,:,0].reshape(X_elec.shape[0], X_elec.shape[1], 1)\nX2_elec = X_elec[:,:,1].reshape(X_elec.shape[0], X_elec.shape[1], 1)\nX3_elec = X_elec[:,:,2].reshape(X_elec.shape[0], X_elec.shape[1], 1)\n\nX1_gas = X_gas[:,:,0].reshape(X_gas.shape[0], X_gas.shape[1], 1)\nX2_gas = X_gas[:,:,1].reshape(X_gas.shape[0], X_gas.shape[1], 1)\nX3_gas = X_gas[:,:,2].reshape(X_gas.shape[0], X_gas.shape[1], 1)\n\nX1_gas_elec = X_gas_elec[:,:,0].reshape(X_gas_elec.shape[0], X_gas_elec.shape[1], 1)\nX2_gas_elec = X_gas_elec[:,:,1].reshape(X_gas_elec.shape[0], X_gas_elec.shape[1], 1)\nX3_gas_elec = X_gas_elec[:,:,2].reshape(X_gas_elec.shape[0], X_gas_elec.shape[1], 1)\n\nmodel_solar = multi_3_head_model(window)\nmodel_solar.compile(optimizer='adam', loss='mae')\n\nmodel_elec = multi_3_head_model(window)\nmodel_elec.compile(optimizer='adam', loss='mae')\n\nmodel_gas = multi_3_head_model(window)\nmodel_gas.compile(optimizer='adam', loss='mae')\n\nmodel_gas_elec = multi_3_head_model(window)\nmodel_gas_elec.compile(optimizer='adam', loss='mae')\n\nepochs = 25\n# fit models\nhistory_solar = model_solar.fit([X1_solar, X2_solar, X3_solar], y_solar, epochs=epochs, verbose=0)\nprint('solar model ok')\nepochs = 50\nhistory_elec = model_elec.fit([X1_elec, X2_elec, X3_elec] , y_elec, epochs=epochs, verbose=0)\nprint('elec model ok')\n#epochs = 30\nhistory_gas = model_gas.fit([X1_gas, X2_gas, X3_gas], y_gas, epochs=epochs, verbose=0) \nprint('gas model ok')\nepochs = 50\nhistory_gas_elec = model_gas_elec.fit([X1_gas_elec, X2_gas_elec, X3_gas_elec], y_gas_elec, epochs=epochs, verbose=0) \nprint('gas_elec model ok')\n\nprint('solar')\nplot_history(history_solar)\nprint('elec')\nplot_history(history_elec)\nprint('gas')\nplot_history(history_gas)\nprint('gas_elec')\nplot_history(history_gas_elec)","4a8651f5":"# predicting next year\n# the model expects an input of shape(n_time steps = window size, n_features)\n\n\ndef predict_next_year_from_valid(X_train, \n                                 features_solar, \n                                 features_elec,\n                                 features_gas,\n                                 features_gas_elec,\n                                 model_solar, model_elec, model_gas ,model_gas_elec):\n    y_hat_solar = []\n    y_hat_elec = []\n    y_hat_gas = []\n    y_hat_gas_elec = []\n    X_in_solar =  np.array(X_train[features_solar][-365:]) #  next value based on data of last year\n    X_in_solar = X_in_solar.reshape(1, X_in_solar.shape[0], X_in_solar.shape[1]) # input must have 3 dimensions\n    X_in_elec =  np.array(X_train[features_elec][-365:]) #  next value based on data of last year\n    X_in_elec = X_in_elec.reshape(1, X_in_elec.shape[0], X_in_elec.shape[1]) # input must have 3 dimensions\n    X_in_gas =  np.array(X_train[features_gas][-365:]) #  next value based on data of last year\n    X_in_gas = X_in_gas.reshape(1, X_in_gas.shape[0], X_in_gas.shape[1])\n    X_in_gas_elec =  np.array(X_train[features_gas_elec][-365:]) #  next value based on data of last year\n    X_in_gas_elec = X_in_gas_elec.reshape(1, X_in_gas_elec.shape[0], X_in_gas_elec.shape[1]) # input must have 3 dimensions\n    print(X_in_gas_elec.shape)\n    for i in range(365):\n        # split X_solar into 3 input series\n        X_in1_solar = X_in_solar[:,:,0].reshape(1, 365, 1)\n        X_in2_solar = X_in_solar[:,:,1].reshape(1, 365, 1)\n        X_in3_solar = X_in_solar[:,:,2].reshape(1, 365, 1)\n        y_hat_solar.append((model_solar.predict([X_in1_solar, X_in2_solar, X_in3_solar], verbose=0).ravel())[0])\n        if np.array(y_hat_solar[i]) < 0:\n            y_hat_solar[i] = 0 \n        new_X_solar = np.array(y_hat_solar[i])\n\n        # split X_elec into 3 input series\n        X_in1_elec = X_in_elec[:,:,0].reshape(1, 365, 1)\n        X_in2_elec = X_in_elec[:,:,1].reshape(1, 365, 1)\n        X_in3_elec = X_in_elec[:,:,2].reshape(1, 365, 1)\n        y_hat_elec.append((model_elec.predict([X_in1_elec, X_in2_elec, X_in3_elec], verbose=0).ravel())[0])\n        if np.array(y_hat_elec[i]) < 0:\n            y_hat_elec[i] = 0        \n        new_X_elec = np.array(y_hat_elec[i])\n\n        # split X_gas into 3 input series\n        X_in1_gas = X_in_gas[:,:,0].reshape(1, 365, 1)\n        X_in2_gas = X_in_gas[:,:,1].reshape(1, 365, 1)\n        X_in3_gas = X_in_gas[:,:,2].reshape(1, 365, 1)\n        y_hat_gas.append((model_gas.predict([X_in1_gas, X_in2_gas, X_in3_gas], verbose=0).ravel())[0])\n        if np.array(y_hat_gas[i]) < 0:\n            y_hat_gas[i] = 0\n        new_X_gas = np.array((y_hat_gas[i]))\n\n        # split X_gas_elec into 3 input series\n        X_in1_gas_elec = X_in_gas_elec[:,:,0].reshape(1, 365, 1)\n        X_in2_gas_elec = X_in_gas_elec[:,:,1].reshape(1, 365, 1)\n        X_in3_gas_elec = X_in_gas_elec[:,:,2].reshape(1, 365, 1)\n        y_hat_gas_elec.append((model_gas_elec.predict([X_in1_gas_elec, X_in2_gas_elec, X_in3_gas_elec], verbose=0).ravel())[0])\n        if np.array(y_hat_gas_elec[i]) < 0:\n            y_hat_gas_elec[i] = 0\n        new_X_gas_elec = np.array((y_hat_gas_elec[i]))\n        \n        # reshape new_X_solar\n        new_X_solar2 = np.array((new_X_elec, new_X_gas ,new_X_gas_elec))\n        new_X_solar2 = new_X_solar2.reshape(1,1,3)\n        \n        # reshape new_X_elec\n        new_X_elec2 = np.array((new_X_solar, new_X_gas, new_X_gas_elec))\n        new_X_elec2 = new_X_elec2.reshape(1,1,3)\n        \n        # reshape new_X_gas\n        new_X_gas2 = np.array((new_X_solar, new_X_elec, new_X_gas_elec))\n        new_X_gas2 = new_X_gas2.reshape(1,1,3)\n        \n        # reshape new_X_gas_elec\n        new_X_gas_elec2 = np.array((new_X_solar, new_X_elec, new_X_gas))\n        new_X_gas_elec2 = new_X_gas_elec2.reshape(1,1,3)\n        \n        # concatenate with new       \n        X_in_solar = np.concatenate((X_in_solar[:, -364:], new_X_solar2), axis=1)\n        X_in_elec = np.concatenate((X_in_elec[:, -364:], new_X_elec2), axis=1)\n        X_in_gas = np.concatenate((X_in_gas[:, -364:], new_X_gas2), axis=1) \n        X_in_gas_elec = np.concatenate((X_in_gas_elec[:, -364:], new_X_gas_elec2), axis=1) \n\n\n    return y_hat_solar, y_hat_elec, y_hat_gas, y_hat_gas_elec","2ec57a23":"y_hat_solar, y_hat_elec, y_hat_gas, y_hat_gas_elec  = predict_next_year_from_valid(X_train, \n                                            features_solar, features_elec, features_gas , features_gas_elec,\n                                               model_solar, model_elec, model_gas , model_gas_elec)\n\nplt.plot(y_hat_solar, label='predicted_power')\ny_true = X_valid.day_power.values\nplt.plot(y_true, label='true_power')\nplt.legend()\nplt.show()\n\nplt.plot(y_hat_elec)\nplt.plot(y_hat_gas)\nplt.plot(y_hat_gas_elec)\nplt.show()\ny_true_cumulative = cumulate(y_true)\ny_predicted_cumulative = cumulate(y_hat_solar)\n\nplt.plot(y_predicted_cumulative, label='predicted_power')\nplt.plot(y_true_cumulative, label='true_power')\nplt.legend()\nplt.show()","aed1af66":"# import h5py\n\npredicted_data['103B_Elec_Gas_3features_elec_gas_gas_plus_elec'] = y_hat_solar\n\npredicted_data.to_hdf(p_data_filename3 ,key='predicted_data', table='true',mode='a')\n\n\npredicted_data.head()","a7bd7608":"predicted_data.columns","be95805c":"true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\npredicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\nprint('true cumulative power after one year:', true_cumulative_power_after_one_year)\nprint('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n\nacc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\nacc_one_year = acc_one_year * 100\n\nprint('accuracy after one year: %.2f' %  acc_one_year,'%')\nprint('r2 score %.5f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\nprint('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))","4f0f28c7":"4. Devide the series into multiple input and output patterns","17c5e231":"3. Split in training set from beginning to oktober 2018, validation is one year after training set","f679c0f8":"This notbook uses :  \ntf version: 2.0.0-beta1 ;\n keras version: 2.2.4 ; \n numpy version: 1.16.4 ","abedbc98":"8. Predict the solar power based on the validation features to check the model","51c0238b":"6. Apply my_split_window on X_train","1c8b533a":"2. Make Elec_kW postive","c4f5bf6f":"# 7. Multi-headed CNN model\nThere is an other more elaborate way to the problem. Each input series can be handled by a separate CNN and the output of each of these submodels can be combined.  \nIt offers more flexibility or better performance.  \nWe will make a two-headed model first.\n\n","0497c8b1":"# 10. We have used the validation set for predicting but when we want to predict the future we have to use the last prediction(s) of all features\n","b7273cec":"# 12. Use predictions to predict the future","718e6bd9":"test 103 : test prediction solarpower with *multivariate mulitiple input series* and CNN\n\nMulti-Headed 1D CNN model","4b4ebb00":"5. Test my_split_window on test dataframe to check if function ok","c8656461":"These notebooks are based on the excellent article by Jason Brownlee:\nHow to Develop Convolutional Neural Network Models for Time Series Forecasting.  \nhttps:\/\/machinelearningmastery.com\/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting\/","fe1e9c44":"We want to use a one-dimensional Convolutional Neural Network (1D CNN). Just like in a CNN for images,  \na 1D CNN extracts features. It is very usefull in timeseries. More info is on the links:  \nhttps:\/\/missinglink.ai\/guides\/keras\/keras-conv1d-working-1d-convolutional-neural-networks-keras\/  \nhttps:\/\/machinelearningmastery.com\/cnn-models-for-human-activity-recognition-time-series-classification\/  \n","10d2bfa9":"# 9. But the cumulative power is actually much more intersting.#\n# It tels us what the the total expected solar power of that year will be. #","d0cd0a32":"# 11 what if we add a feature?\nWe can make an extra feature by adding Elecricty and Gas","a92eb8d9":"1. Make cumulative solar power stationary"}}