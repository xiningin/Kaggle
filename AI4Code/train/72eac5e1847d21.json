{"cell_type":{"350f83c4":"code","04748267":"code","d5e32284":"code","90c3ed84":"code","b2dcf393":"code","b1949739":"code","a90b08ca":"code","e77cb8e8":"code","e6f99751":"code","50817e8b":"code","0ea366c4":"code","a67185e4":"code","239c6af2":"markdown","c9618bfe":"markdown","05704d52":"markdown","738bb20d":"markdown","ecd060ee":"markdown","483ccf94":"markdown","1f4201f5":"markdown","74bdd6c5":"markdown","d847e175":"markdown"},"source":{"350f83c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04748267":"# making Training Data X, y and Test Data X_test\nfrom sklearn.model_selection import train_test_split\ndata = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nX_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nX = data.drop('Survived', axis= 1)\ny = data.Survived","d5e32284":"X.info()","90c3ed84":"X_test.info()","b2dcf393":"X['Age'].fillna(X['Age'].mean(), inplace= True)\nX_test['Age'].fillna(X_test['Age'].mean(), inplace= True)","b1949739":"X['Embarked'].fillna('S', inplace= True)","a90b08ca":"X_test['Fare'].fillna(X_test['Fare'].mean(), inplace= True)","e77cb8e8":"X['Sex'].replace({'male':0, 'female':1}, inplace= True)\nX_test['Sex'].replace({'male':0, 'female':1}, inplace= True)\nX['Embarked'].replace({'S':0, 'C':1, 'Q':2}, inplace= True)\nX_test['Embarked'].replace({'S':0, 'C':1, 'Q':2}, inplace= True)","e6f99751":"col_not_used = ['PassengerId', 'Name', 'Ticket', 'Cabin']\nX_clean = X.drop(col_not_used, axis= 1)\nX_test_clean = X_test.drop(col_not_used, axis= 1)","50817e8b":"X_clean.head()","0ea366c4":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Splitting the clean data  into Training Data and Validation Data\nX_train, X_valid, y_train, y_valid = train_test_split(X_clean, y, random_state= 0)\n\n\n# Making scores dictionary with different parameters\nmodel = RandomForestClassifier(n_estimators= 6)\nmodel.fit(X_train, y_train)\n\ny_train_pred = classification_report(y_train, model.predict(X_train))\ny_valid_pred = classification_report(y_valid, model.predict(X_valid))\nprint(y_train_pred, y_valid_pred)\n","a67185e4":"pred = model.predict(X_test_clean)\noutput = pd.DataFrame({'PassengerId': X_test.PassengerId, 'Survived':pred})\noutput.to_csv('my_submission.csv', index= False)\nprint('Submission was saved')\n","239c6af2":"\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u8aac\u660e\u5909\u6570 X\u3068\u76ee\u7684\u5909\u6570 y\u3092\u4f5c\u308b","c9618bfe":"# \u6b20\u640d\u5024\u3092\u57cb\u3081\u308b","05704d52":"\u307e\u305a\u5e74\u9f62['Age']\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u307e\u3059","738bb20d":"\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u6b20\u640d\u5024\u306e\u3042\u308b\u4e57\u8239\u5834\u6240['Embarked']\u3092\u6700\u3082\u591a\u3044\u6e2f 'S'\u3067\u57cb\u3081\u307e\u3059","ecd060ee":"\u5fc5\u8981\u304c\u306a\u3044\u3068\u601d\u308f\u308c\u308b\u30b3\u30e9\u30e0 \u4e57\u5ba2\u756a\u53f7['PassengerId']\u3001\u6c0f\u540d['Name']\u3001\u30c1\u30b1\u30c3\u30c8\u756a\u53f7['Ticket']\u3001\u5ba2\u5ba4\u756a\u53f7['Cabin']\u3092\u53d6\u308a\u9664\u304f","483ccf94":"# RandomForestClassifier\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u306e\u4f5c\u6210","1f4201f5":"# \u6587\u5b57\u30c7\u30fc\u30bf\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u3048\u308b\n\u6027\u5225['Sex']\u3092 'male'= 0, 'female' = 1 \u306b\u7f6e\u304d\u63db\u3048\u3001\u4e57\u8239\u5834\u6240['Embarked']\u3092 'S' = 0, 'C' = 1, 'Q' = 2 \u306b\u7f6e\u304d\u63db\u3048\u308b","74bdd6c5":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u6b20\u640d\u5024\u306e\u3042\u308b\u30c1\u30b1\u30c3\u30c8\u4ee3\u91d1['Fare']\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u307e\u3059","d847e175":"\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3057\u3066CSV\u306b\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8"}}