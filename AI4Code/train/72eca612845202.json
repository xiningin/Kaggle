{"cell_type":{"6ea06aea":"code","59f68fa6":"code","23b8094a":"code","e35ed834":"code","3f38c2b4":"code","3afa2aaa":"code","1b84d4b3":"code","ff02f28f":"code","09ef8b1e":"code","e37445a3":"code","569b5491":"code","6021ad4b":"code","c1717fe1":"code","83a77712":"code","cd866474":"code","4cbcaece":"code","3a90ff0a":"code","2a7e3ac5":"code","4a2e5ac4":"code","caf10ade":"code","c5e6baca":"code","6539dced":"code","029e73c1":"code","93ce001d":"code","0f551f8a":"code","4118f7cc":"code","aa34d02f":"markdown","9df8dfce":"markdown","d5d55c31":"markdown","6f556cd8":"markdown","a5f89e17":"markdown","647cbd27":"markdown","febf694d":"markdown","88810ecf":"markdown","8489ef4b":"markdown","4c908667":"markdown","0c2a02c0":"markdown","4e3237fc":"markdown","6f2c1120":"markdown","00f0d2c6":"markdown","a2fbb6f5":"markdown","bab1e02b":"markdown","a54bed3e":"markdown","d81eb928":"markdown","d3aabfcb":"markdown","f01a933e":"markdown","edb4bc0f":"markdown","76940325":"markdown","be010044":"markdown","07368b60":"markdown","5b10e010":"markdown"},"source":{"6ea06aea":"# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","59f68fa6":"# !pip install cufflinks\n# !pip install plotly\n# !pip install textblob","23b8094a":"import pandas as pd\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport plotly as py\n\n\n%matplotlib inline","e35ed834":"def screen_data_frame(df):\n    '''\n    funciton to print the common characteristics of the input data frame.\n    \n    '''\n    print(f'No. of rows : {df.shape[0]} \\nNo. of Columns : {df.shape[1]}' )\n    print(f'Columns : {df.columns.to_list()}' )\n    print('-'*40 , f'\\nNull value count : \\n{df.isnull().sum()}' )\n    print('-'*40 , f'\\nUnique value count : \\n{df.nunique()}\\n' ,'-'*40 )\n    ","3f38c2b4":"movies = pd.read_csv('..\/input\/movielens-dataset\/movies.csv')\nmovies.sample(3)","3afa2aaa":"screen_data_frame(movies)","1b84d4b3":"def strp_parenthesis(x):\n    '''\n    Function to clean up extra parenthesis at the beginning and end of the string.\n    '''\n    return (x.str.strip('()'))\n\nmovies['year'] = movies['title'].str.extract('(\\(\\d{4}\\))').apply(strp_parenthesis)\n\n# converting year string to datetime 'year' values\nmovies['year'] = pd.to_datetime(movies['year'] , format='%Y')\n\nmovies.head()","ff02f28f":"# Movies that do not have Year infomration available.\nmovies['year'].isnull().sum()","09ef8b1e":"# Dropping such records with no Year informationa on them\nmovies.dropna(subset=['year'] , inplace=True)\n\n# Converting year column from datetime to Year \nmovies['year'] = movies['year'].dt.year\n\nmovies.head()","e37445a3":"# year range\nprint ( 'min year:' , movies['year'].min() , ' |  max year:', movies['year'].max())\n\nscreen_data_frame(movies)","569b5491":"ratings = pd.read_csv('..\/input\/movielens-dataset\/ratings.csv')\nscreen_data_frame(ratings)","6021ad4b":"tags = pd.read_csv('..\/input\/movielens-dataset\/tags.csv')\nscreen_data_frame(tags)","c1717fe1":"avg_ratings = ratings[['movieId' , 'rating']].groupby('movieId').mean().round(2)\nmovies = movies.merge(avg_ratings, how='inner', on='movieId')\nmovies.head(4)","83a77712":"year_mask = movies['year'] > 1995\n\nmovies_after_1995 = movies[year_mask]\n\nmovies_after_1995.head()\n\n\n\nx = movies_after_1995['year'].unique()\n\ny1 = movies_after_1995[['year','rating']].groupby('year').mean()  # average ratings\n\ny2 = movies_after_1995[['year','title']].groupby('year').count()  # count of movies\n\n","cd866474":"# plot graph keeping year scale common for rating and movie counts\n\nfig, (ax1,ax2) = plt.subplots(2,1, figsize=(16,5), sharex=True)\n\nax1.set_title('Movie Ratings and No. of movies over the years', loc = 'center' , pad = 20 , fontdict={'fontsize':20 , 'color' : 'indigo', \n#                                                                                  'fontstyle' : 'italic',\n                                                                                'fontfamily' : 'Tahoma'})\nax1.plot(x,y1,color='brown')\nax1.set_ylabel('Avg. Rating')\nax1.set_ylim(2,)\n\nax2.bar( x, y2.title.values,  color = 'lightyellow', label=True, edgecolor = 'purple' )\nax2.set_ylabel('Count of Movies')\nax2.set_xlabel('Year')\n\nplt.show()\n","4cbcaece":"ratings['timestamp'] = pd.to_datetime(ratings['timestamp'], unit='s').dt.year\nratings.rename(columns={'timestamp' : 'ratings_year'} , inplace=True)\n\n# Count of ratings collected per year\nratings_per_year = ratings[['ratings_year' , 'movieId']].groupby('ratings_year').count()\n\n# plot commong graph keeping year scale common for rating and movie counts\n\nfig, ax1 = plt.subplots(figsize=(16,4))\n\nax1.set_title('Release Counts vs Ratings Counts for the years')\nax1.plot(x,y2,color='Blue')\nax1.set_ylabel('Count of Movies Released in the year')\nax1.set_xlabel('Year')\nax1.grid(None)\nax1.set_ylim(0,)\n# ax1.legend(True)\n\nax2 = ax1.twinx()\nax2.plot(ratings_per_year,'-ro' , color='red' )\nax2.set_ylabel('Ratings counts for the year')\nax2.set_ylim(0,)\n\nplt.show()","3a90ff0a":"# count of ratings\ncount_of_ratings = ratings[['movieId' , 'userId']].groupby('movieId').count()\ncount_of_ratings.rename(columns={'userId' : 'Count of Ratings'}, inplace=True)\n\n# Joining count of ratings with movies names\n# top 25 most rated movies of all time\nmovie_rating_counts = movies[['movieId','title']].merge(count_of_ratings, on='movieId')\n\nmovie_rating_counts.sort_values('Count of Ratings' , ascending=False)[:25] [['title' , 'Count of Ratings']]\n\n","2a7e3ac5":"movies = movies.merge(movie_rating_counts[['movieId' , 'Count of Ratings']])\n\n# top 10 all time highly rated movies -- min. 5000 user ratings available.\nmovies[movies['Count of Ratings'] > 5000].sort_values('rating', ascending=False) [:10]\n\n","4a2e5ac4":"# Fetch unique list of genres available in the data  - total available genres \nunique_genre = pd.DataFrame(movies_after_1995['genres'].str.split('|').to_list()).stack().unique()\n\n# number of movies per gneres\nfrom collections import Counter\n\ngenres_counts = Counter(pd.DataFrame(movies_after_1995['genres'].str.split('|').to_list()).stack().to_list())\n\ndf = pd.DataFrame(genres_counts.items(), columns=['genre','movie_counts'])\n\nbar_genres = df.plot.bar(x='genre' , rot = 60, figsize = (16,4), grid = True, \n                         colormap = 'tab10_r',\n                         title='Movie Counts per Genre',\n                         fontsize = 14,  )\n","caf10ade":"genre_filter = df.sort_values('movie_counts', ascending=False).head(7)['genre']\nmovies_genre = movies_after_1995.join(movies_after_1995['genres'].str.get_dummies().astype(bool))\nmovies_genre.drop('genres', axis = 1, inplace= True )\n\n# making skeleton dataframe, with adding 'avg_rating' column for all the movies\ndf_new = movies_genre[['year', 'rating']].groupby('year').mean()\ndf_new.rename(columns = {'rating' : 'avg_rating'}, inplace=True)\n\n\n# for loop to go over each genre and calculate genre specifc yearly average rating\nfor genre in genre_filter:\n    df_tmp = movies_genre[movies_genre[genre]][['year', 'rating']].groupby('year').mean()\n    df_new[genre] = df_tmp['rating']\n\ndf_new.fillna(method='ffill', inplace=True)    \ndf_new.head() \n","c5e6baca":"fig, ax = plt.subplots(figsize = (18,6), clear = True , facecolor = 'white')\n\nsns.lineplot(data = df_new.loc[:,df_new.columns!='avg_rating'], \n             dashes = False, \n             legend='full',\n             palette = 'pastel')\n\n\nax.set_ylabel('Ratings Score', fontdict={'fontsize' : 20, 'color' : 'gray'})\nax.set_xlabel('Year',fontdict={'fontsize' : 20, 'color' : 'gray'})\nax.set_ylim(2)\nax.set_title('Ratings of Genres over the years',fontdict={'fontsize' : 30 , 'color' : 'gray'})\nax.grid(False)","6539dced":"# Find all the tags for the top 100 rated movies\ndf1= movies[movies['Count of Ratings'] > 5000].sort_values('rating', ascending=False)[['movieId' , 'title']].head(100)\n\npopular_movies_tags = tags.merge(right=df1, on=['movieId'], how='inner')\n\nprint(f\"total mmovies : {popular_movies_tags['movieId'].nunique()}, total tags : {popular_movies_tags['tag'].nunique()}\")\n","029e73c1":"from wordcloud import WordCloud\n\nlist_of_tags = popular_movies_tags['tag'].to_list()\n\n\nwc1 = WordCloud(max_words=150,\n                scale=5,\n#                 max_font_size=50,\n               colormap=\"rainbow\",\n                background_color=\"black\").generate(\" \".join(list_of_tags))\n\n\nplt.figure(figsize = (20,20), facecolor=None)\n\nplt.style.use('seaborn')\nplt.grid(False)\n\nplt.imshow( wc1 , interpolation='bilinear')\n\nplt.title(\"Themes about most popular movies\",  fontdict ={'fontsize' : 30 , 'color' : 'indigo'} , loc='center' , pad=20)\n\nplt.axis(\"off\")\n\nplt.show()\n","93ce001d":"# bringing in 'count of Ratings' in the movie_genre data frame\nmovie_genre = movies_genre.merge(movies[['movieId' , 'Count of Ratings']] , left_on='movieId' \n                                 , right_on='movieId' , how='inner')\n\ngenre_list = movie_genre.columns[5:24]\n\ngenre_list","0f551f8a":"   \nrating_counts_per_genre = { x : movie_genre[movie_genre[x]]['Count of Ratings'].sum() for x in genre_list}\n\nrating_counts_per_genre\n    ","4118f7cc":"from collections import Counter\n\npie1_lables = rating_counts_per_genre.keys()\n\nc = Counter(rating_counts_per_genre)\ntop_3_values = [x[0] for x in c.most_common(3)]\n\n# explode only the top 3 categories\nexpand_list = [ 0.07 if x in top_3_values else 0  for x in pie1_lables ]\n\ncmap = sns.color_palette(palette='pastel')\n    \n\npie1, ax1 = plt.subplots(figsize = (12,12))\n\n\nplt.pie(x = rating_counts_per_genre.values() ,  labels=pie1_lables , \n        explode=expand_list, \n        textprops={'fontsize':15, 'color':'black'}, autopct='%.1f%%',\n        rotatelabels = True ,\n        pctdistance=0.85, \n        colors = cmap,\n#         startangle=40\n       )\n\ncenter_circle = plt.Circle((0,0) , 0.7 , fc = 'white')\nfig = plt.gcf()\nplt.gca().add_artist(center_circle)\nplt.title('Genres attacting most ratings from users', loc = 'center' , pad = 50 , fontdict={'fontsize':20 , 'color' : 'indigo', \n#                                                                                  'fontstyle' : 'italic',\n                                                                                'fontfamily' : 'Tahoma'})\n\nplt.axis('equal')\nplt.show()","aa34d02f":"# Objective of this exploratory anlaysis\n\nCurrent analysis is aiming towards examining the available movies, ratings and tags data in integrated manner. Following are key objectives for this analysis.\n\n**Objective 1 : Trends analysis of the following sub-items**\n   * Identify number of movies made for each genre \n   * Number of movies released over the years\n   * Change in movie quality (aggregate ratings) over the year\n     \n**Objective 2 : Find the characteristics (keywords \/ tags) that are common among the most popular movies,**\n\n**Objective 3 : Identify the genres that attracted most users to rate the movies.**\n","9df8dfce":"# Find most common tags for top 100 rated movies of all time (min. 5000 rating)","d5d55c31":"# Find which genre performed better over the years\n\nFor this analysis, we will consider movies from 1995 onwards. Also based on earlier analysis on genre counts, we will consider only the top 7 most rated genres","6f556cd8":"## View trends of movies released and when ratings are collected","a5f89e17":"#### Drama, Comedy and Action are the top 3 genres for which users have shared most of the ratings.","647cbd27":"# Dataset used for analysis : movielens","febf694d":"Preparing basic imports and reusable methods","88810ecf":"##### Number of movies getting released have increased over the years. Comparatively, the annual average movie ratings for the year shows consistency until 2017 after which the ratings aggregate is sloping down for the subsequent years.\n","8489ef4b":"#### Above comparison shows the number of movies made over the years specific to various genres. Drama , Thriller and Comedy are the most favorite genres for movie makers.\n","4c908667":"# Top 10 highly rated movies of all time (that have atleast 5000 user ratings)","0c2a02c0":"**Data Source :**\n    \n    * Source Description: MovieLens web site (filename: ml-25m.zip)\n    * Location: https:\/\/grouplens.org\/datasets\/movielens\/\n\n**Available Data Entities :**\n    * movies.csv\n    * ratings.cs\n    * tags.csv\n","4e3237fc":"### Reading Movies data from the dataset","6f2c1120":"### Reading ratings and tags data","00f0d2c6":"Tags are available for approx. 45K movies","a2fbb6f5":"### Reading tags data from dataset","bab1e02b":"# View relation beween movies over the year and the ratings over the years\n\nWe will filter on all movies released after 1995 to keep our focus on the latest trends.","a54bed3e":"#### Above wordcloud is depicting most common tags for top 100 rated movies of all time (min. 5000 rating). Sci Fi, Thought Provoking and Twisted Ending are the top 3 tags for most successful movies.\n","d81eb928":"Movies data is clean, there are no missing values.\n\nAdding Year as new column in the data set","d3aabfcb":"# Acknowledgements \n\nSincere thanks to the team at grouplens.org for collecting and maintaining annual updates to the movieLens dataset at the site : https:\/\/grouplens.org\/datasets\/movielens\/\n","f01a933e":"# Find which genres were rated the most","edb4bc0f":"### Join Movies with their avg ratings","76940325":"Ratings data is available for approx. 59K out of 62K movies\u00b6","be010044":"# Find most common genre of the movies\n\nWe will focus on movies after 1995 for the trend analysis","07368b60":"# Motivation\n\nMovies have been an integral part of the modern day living. Over the years in past 4 decades, movie making has become $140 billion dollar industry worldwide. \n\nOn the adjacent path, Internet technology advancements has enabled viewers to rate the movies in increasing numbers. Such ratings data collected over the years can reveal critical key factors that particular audience did or did not like , thus allowing broadcasters and movie makers to deploy such findings in restructuring their  resources to aim better success rate of the movie they are working on.\n","5b10e010":"# Find Top 25 most rated movies of all time"}}