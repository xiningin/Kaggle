{"cell_type":{"0c854d24":"code","9e82d14b":"code","9174214b":"code","d54f1c5b":"code","51593e95":"code","d05abf48":"code","dd9ac160":"code","d51fa367":"code","e052fdce":"code","cdb893fd":"code","d35409bd":"code","226742c4":"code","7e020f2b":"code","b6a013b2":"code","e914fad1":"code","470e1eec":"code","011f554c":"code","7d21105b":"code","b59e2ec7":"code","eecb3af2":"code","e2339ae5":"markdown","462bb946":"markdown","1426be4d":"markdown","ff344f8d":"markdown","9cb563b8":"markdown"},"source":{"0c854d24":"\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom os import path\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n","9e82d14b":"path=\"..\/input\/CORD-19-research-challenge\"\nmetadata=pd.read_csv(\"..\/input\/CORD-19-research-challenge\/metadata.csv\")\n# import os\n# os.listdir(path)\nmetadata.head()","9174214b":"metadata.columns","d54f1c5b":"metadata.shape","51593e95":"word_cloud_text = ''.join(str(i) for i in metadata['title'])\nword_cloud_text","d05abf48":"\nplt.figure( figsize=(20,10) )\n\nwordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"black\").generate(word_cloud_text)\n# plt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","dd9ac160":"for i in metadata['title'].values:\n    if 'incubation' in str(i):\n        print(i)\n        print('*******')","d51fa367":"cure_text=''\nfor i in metadata['abstract'].values:\n    if 'cure' in str(i):\n        cure_text+=i\nimport pprint\npprint.pprint(cure_text)","e052fdce":"plt.figure( figsize=(20,10) )\nwordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"black\").generate(cure_text)\n# plt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","cdb893fd":"medicine_text=''\nfor i in metadata['abstract'].values:\n    if 'medicine' in str(i):\n        medicine_text+=i\n        print(i)\n        print('********************')\nmedicine_text\n        ","d35409bd":"import spacy \n  \nnlp = spacy.load('en_core_web_sm') \n  \nsentence = cure_text\n  \ndoc = nlp(sentence ) \n  \nfor ent in doc.ents: \n    if ent.label_ not in['DATE','GPE']:\n        print(ent.text,  ent.label_) ","226742c4":"# temperature_text=''\n# for i in metadata['abstract'].values:\n#     if 'temperature' or'weather' or 'warm' or 'cool' or 'cold' in str(i):\n#         temperature_text+=str(i)\n#         print(i)\n#         print('********************')\n# temperature_text","7e020f2b":"global_temp_country = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\")\ndf_temp=global_temp_country.groupby('Country')['AverageTemperature'].mean()\n# Series({'avg_temp_by_country' : global_temp_country.groupby( \"Country\")['AverageTemperature'].mean()}).reset_index()\ndf_temp=df_temp.apply(pd.Series).reset_index()\ndf_temp.columns=['Country\/Region','avg_temp_by_country']\ndf_temp","b6a013b2":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","e914fad1":"cases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","470e1eec":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()","011f554c":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f","7d21105b":"df_final = pd.merge(df_temp,temp_f,how='left',on=['Country\/Region'])\ndf_final\n","b59e2ec7":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = df_final.corr()\n# ax = sns.heatmap(\n#     corr, \n#     vmin=-1, vmax=1, center=0,\n#     cmap=sns.diverging_palette(20, 220, n=200),\n#     square=True\n# )\n\nplt.figure(figsize = (16,5))\nsns.heatmap(corr, annot=True, linewidths=.5)","eecb3af2":"plt.figure(figsize=(30,15))\nfrom scipy import stats\nsns.jointplot(x=\"avg_temp_by_country\", y=\"Deaths\",data=df_final,kind='reg',stat_func=stats.pearsonr)\n# plt.figure(figsize=(30,15))\nplt.show()","e2339ae5":"papers containing the word'cure' in them..","462bb946":"I will constantly update this notebook , if suggestions or hints appreciated .","1426be4d":"although there is some relation between temperature and deaths, it may not be statistically significant ","ff344f8d":"papers containing the word'incubation' in them..","9cb563b8":"### <font size='4' color='blue'>If you think this was useful please leave an upvote,helps me create better content in future<\/font>"}}