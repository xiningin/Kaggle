{"cell_type":{"5630f902":"code","83757954":"code","9b1d2fc8":"code","ce6b527b":"code","dc8ce022":"code","9ff141bc":"code","7f2987cd":"code","997c4841":"code","8e495ef8":"code","eebc9fb9":"code","655de3f9":"code","5db2a163":"code","8f84c064":"code","53050ace":"code","da57c666":"code","eb5307b4":"code","0a138a30":"code","2d5626fc":"code","e5f66a25":"code","0ac2ae07":"code","246ffc34":"markdown","87026ef7":"markdown","8dc8134a":"markdown","35a05e5a":"markdown","7dcc1b8a":"markdown","7305f010":"markdown","1e00cc56":"markdown","3c29835b":"markdown","0ba5e4f7":"markdown","e879726b":"markdown","2f2bf645":"markdown","375c4105":"markdown","011e92d7":"markdown","b31527e1":"markdown","5fa31bff":"markdown","18b68a65":"markdown","bdbbf1ba":"markdown","4fec51a4":"markdown","92f644bb":"markdown","101f41ea":"markdown"},"source":{"5630f902":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas import read_csv\nimport time\nimport math\nimport tensorflow as tf\n\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error","83757954":"# \u8a13\u7df4\u6a23\u672c\u6578\u6bd4\u4f8b\nSPLIT_RATIO = 0.5\n# \u611f\u77e5\u5668\u8a18\u61b6\u9577\u5ea6\nLOOK_BACK = 240","9b1d2fc8":"np.random.seed(5)","ce6b527b":"nvda_prices = read_csv('..\/input\/quantitative-trading\/NVDA.csv', index_col=None, delimiter=',')","dc8ce022":"labels = nvda_prices['close'].values","9ff141bc":"dataset = labels.reshape(-1, 1)","7f2987cd":"print(f'\u8cc7\u6599\u96c6 {dataset[:10]} \u9577\u5ea6 {len(dataset)}')","997c4841":"Scaler = MinMaxScaler(feature_range=(0, 1))\ndataset = Scaler.fit_transform(dataset)","8e495ef8":"split_size = int(len(dataset) * SPLIT_RATIO)\ntest_size = len(dataset) - split_size\n\ntrain_dataset = dataset[0:split_size, :]\ntest_dataset = dataset[split_size:len(dataset), :]\n\nprint(f'\u8a13\u7df4\u8cc7\u6599\u96c6 {train_dataset[:10]} \u9577\u5ea6 {len(train_dataset)}')\nprint(f'\u6e2c\u8a66\u8cc7\u6599\u96c6 {test_dataset[:10]} \u9577\u5ea6 {len(test_dataset)}')","eebc9fb9":"def buildDataset(dataset, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset) - look_back - 1):\n        a = dataset[i:(i + look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)","655de3f9":"train_x, train_y = buildDataset(train_dataset, LOOK_BACK)\ntest_x, test_y = buildDataset(test_dataset, LOOK_BACK)","5db2a163":"train_x = np.reshape(train_x, (train_x.shape[0], 1, train_x.shape[1]))\ntest_x = np.reshape(test_x, (test_x.shape[0], 1, test_x.shape[1]))","8f84c064":"Model = Sequential()\nModel.add(LSTM(250, input_shape=(1, LOOK_BACK)))\nModel.add(Dropout(0.1))\nModel.add(Dense(1))\nModel.compile(loss='mse', optimizer='adam')\n# \u8abf\u6574\u8a13\u7df4\u6b21\u6578\u53ef\u4ee5\u63d0\u5347\u6e96\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u89c0\u5bdf\u5230\u904e\u64ec\u5408\u7684\u554f\u984c\nModel.fit(train_x, train_y, epochs=1000, batch_size=240, verbose=0)","53050ace":"train_predict = Model.predict(train_x)\ntest_predict = Model.predict(test_x)","da57c666":"train_predict = Scaler.inverse_transform(train_predict)\ntrain_y = Scaler.inverse_transform([train_y])\ntest_predict = Scaler.inverse_transform(test_predict)\ntest_y = Scaler.inverse_transform([test_y])","eb5307b4":"train_score = math.sqrt(mean_squared_error(train_y[0], train_predict[:,0]))\nprint(f'\u8a13\u7df4\u8aa4\u5dee\u5206\u6578(RMSE)\uff1a{np.round(train_score, 3)}')\n\ntest_score = math.sqrt(mean_squared_error(test_y[0], test_predict[:,0]))\nprint(f'\u6e2c\u8a66\u8aa4\u5dee\u5206\u6578(RMSE)\uff1a{np.round(test_score, 3)}')","0a138a30":"train_predict_plot = np.empty_like(dataset)\ntrain_predict_plot[:, :] = np.nan\ntrain_predict_plot[LOOK_BACK:len(train_predict) + LOOK_BACK, :] = train_predict","2d5626fc":"test_predict_plot = np.empty_like(dataset)\ntest_predict_plot[:, :] = np.nan\ntest_predict_plot[len(train_predict) + (LOOK_BACK * 2) + 1:len(dataset)-1, :] = test_predict","e5f66a25":"plt.figure(figsize=(20, 7))\nplt.plot(Scaler.inverse_transform(dataset))\n\nplt.plot(train_predict_plot)\nplt.plot(test_predict_plot)\nplt.show()","0ac2ae07":"test_prices=Scaler.inverse_transform(dataset[test_size+LOOK_BACK:])\n\nresult = pd.DataFrame(\n    data={\n        \"\u6e2c\u8a66\u50f9\u683c\": np.around(list(test_prices.reshape(-1)), decimals=2),\n        \"\u9810\u6e2c\u50f9\u683c\": np.around(list(test_predict.reshape(-1)), decimals=2)\n    }\n)\nresult.to_csv(\"\u80a1\u50f9\u9810\u6e2c\u5c0d\u6bd4.csv\", sep=',', index=None)\nprint(result)","246ffc34":"## \u532f\u51fa CSV \u6a94\u6848","87026ef7":"## \u5efa\u7acb LSTM \u6a21\u578b","8dc8134a":"### [\u6a23\u672c, \u5e8f\u5217(\u6642\u9593)\u8de8\u5ea6, \u7279\u5fb5]","35a05e5a":"## \u9810\u6e2c\u8cc7\u6599","7dcc1b8a":"## \u6574\u7406\u7e6a\u5716\u8cc7\u6599","7305f010":"RNN \u6a21\u578b\u7528\u65bc\u80a1\u50f9\u9810\u6e2c\n\n[\u674e\u5b8f\u6bc5\u8001\u5e2b\u7684\u6295\u5f71\u7247](https:\/\/www.youtube.com\/watch?v=xCGidAeyS4M)\n\nX \u70ba\u7576\u524d\u72c0\u614b\u4e0b\u7684\u8f38\u5165\uff0c h \u8868\u793a\u63a5\u6536\u5230\u7684\u4e0a\u4e00\u500b\u7bc0\u9ede\u7684\u8f38\u5165\u3002\n\nY \u70ba\u7576\u524d\u72c0\u614b\u4e0b\u7684\u8f38\u51fa\uff0c\u800c h' \u70ba\u50b3\u905e\u5230\u4e0b\u4e00\u500b\u7bc0\u9ede\u7684\u8f38\u51fa\u3002\n\n\u53ef\u4ee5\u770b\u5f97\u51fa\u4f86\uff1ah' \u8207 X \u3001h \u5bc6\u5207\u76f8\u95dc\uff0c\u7576\u6211\u5011\u628a\u5f88\u591a\u55ae\u5143\u7d50\u5408\u518d\u4e00\u8d77\u7684\u6642\u5019\uff0c\u5c31\u662f\u4e00\u7a2e RNN \u6a21\u578b","1e00cc56":"LSTM (Long-Short Term Memory) \u662f\u4e00\u7a2e RNN (\u5faa\u74b0\u795e\u7d93\u7db2\u8def)\uff0c\u8ddf\u4e00\u822c\u6df1\u5ea6\u795e\u7d93\u7db2\u8def\u4e0d\u540c\uff0c\u591a\u4e86\u8cc7\u6599\u7684\u65b9\u5411\u6027(\u6642\u5e8f\u95dc\u806f)\uff0cRNN \u6703\u5c07\u6bcf\u4e00\u500b\u96b1\u85cf\u5c64\u7684\u7d50\u679c\u5132\u5b58\u5728\u8a18\u61b6\u55ae\u5143\uff0c\u4e26\u4e14\u7576\u65b0\u7684\u8cc7\u6599\u8fd1\u4f86\u7684\u6642\u5019\uff0c\u6703\u8003\u616e\u8a18\u61b6\u55ae\u5143\u7684\u503c\u53bb\u8a08\u7b97\n\nLSTM \u8207\u4e00\u822c RNN \u7684\u5dee\u5225\n[\u674e\u5b8f\u6bc5\u8001\u5e2b\u7684\u6295\u5f71\u7247](https:\/\/www.youtube.com\/watch?v=xCGidAeyS4M)\n\n\u7c21\u55ae\u7684\u8aaa\uff0cLSTM \u4e00\u5171\u5305\u542b 4 \u500b\u5143\u4ef6\uff1a\u8f38\u5165\u9598\u9053\u3001\u8a18\u61b6\u55ae\u5143\u3001\u8f38\u51fa\u9598\u9053\u3001\u6e05\u9664\u9598\u9053\n\n- \u8f38\u5165\u9598\u9053\uff1a\u7576\u5c07feature\u8f38\u5165\u6642\uff0cinput gate\u6703\u53bb\u63a7\u5236\u662f\u5426\u5c07\u9019\u6b21\u7684\u503c\u8f38\u5165\n- \u8a18\u61b6\u55ae\u5143\uff1a\u5c07\u8a08\u7b97\u51fa\u7684\u503c\u5132\u5b58\u8d77\u4f86\uff0c\u4ee5\u5229\u4e0b\u500b\u968e\u6bb5\u62ff\u51fa\u4f86\u4f7f\u7528\n- \u8f38\u51fa\u9598\u9053\uff1a\u63a7\u5236\u662f\u5426\u5c07\u9019\u6b21\u8a08\u7b97\u51fa\u4f86\u7684\u503coutput\n- \u6e05\u9664\u9598\u9053\uff1a\u662f\u5426\u5c07Memory\u6e05\u6389(format)\uff0crestart\u7684\u6982\u5ff5\u3002","3c29835b":"### \u8a08\u7b97\u9810\u6e2c\u8aa4\u5dee Root Mean Squared Error","0ba5e4f7":"## \u4f7f\u7528 LSTM \u6a21\u578b\u9810\u6e2c\u80a1\u50f9","e879726b":"## \u6a19\u6e96\u5316\u8cc7\u6599","2f2bf645":"### \u8a2d\u5b9a\u8a13\u7df4\u5e38\u6578","375c4105":"### \u53cd\u8f49\u9810\u6e2c\u7d50\u679c\uff0c\u65b9\u4fbf\u7d50\u679c\u6bd4\u5c0d","011e92d7":"### \u62c6\u5206 \u8a13\u7df4\u8cc7\u6599\u3001\u6e2c\u8a66\u8cc7\u6599","b31527e1":"\u5faa\u74b0\u795e\u7d93\u7db2\u8def\uff08Recurrent Neural Network\uff0cRNN\uff09\u662f\u4e00\u7a2e\u7528\u65bc\u8655\u7406\u5e8f\u5217\u6578\u64da\u7684\u795e\u7d93\u7db2\u8def\u3002\u76f8\u6bd4\u4e00\u822c\u7684\u795e\u7d93\u7db2\u8def\u4f86\u8aaa\uff0c\u4ed6\u80fd\u5920\u8655\u7406\u5e8f\u5217\u8b8a\u5316\u7684\u6578\u64da\u3002\u6bd4\u5982\u67d0\u500b\u55ae\u8a5e\u7684\u610f\u601d\u6703\u56e0\u70ba\u4e0a\u6587\u63d0\u5230\u7684\u5167\u5bb9\u4e0d\u540c\u800c\u6709\u4e0d\u540c\u7684\u542b\u7fa9\uff0cRNN\u5c31\u80fd\u5920\u5f88\u597d\u5730\u89e3\u6c7a\u9019\u985e\u554f\u984c\u3002\u67b6\u69cb\u5982\u4e0b\u5716\n\n![RNN](https:\/\/adventuresinmachinelearning.com\/wp-content\/uploads\/2017\/09\/Recurrent-neural-network.png)","5fa31bff":"### \u8a2d\u5b9a\u6392\u5e8f\u96a8\u6a5f\u78bc\uff0c\u4e4b\u5f8c\u80fd\u5920\u91cd\u73fe\u8a13\u7df4\u904e\u7a0b","18b68a65":"### \u8f09\u5165\u5e02\u5834\u8cc7\u6599\uff0c\u5728 data \u8cc7\u6599\u593e\u88e1\u9762\uff1a\n- NVDA.csv \uff1a \u8f1d\u9054 > \u6bcf\u5206\u9418\u9593\u9694\n- SPY.csv \uff1a \u6a19\u666e 500 ETF > \u6bcf\u65e5\u9593\u9694\n\n**\u8981\u6ce8\u610f\u8cc7\u6599\u6b04\u4f4d\u683c\u5f0f\u4e0d\u4e00\u6a23**","bdbbf1ba":"### \u4f7f\u7528 adam \u512a\u5316\u5668\u3001\u55ae\u5c64 250 \u500b\u795e\u7d93\u5143\u3001\u96a8\u6a5f\u6392\u9664 10% \u6b0a\u91cd","4fec51a4":"### \u52a0\u5165\u5957\u4ef6\uff0c\u5305\u542b Keras (TensorFlow)\u3001scikit-learn","92f644bb":"## \u91cd\u5851\u8a13\u7df4\u8cc7\u6599","101f41ea":"### LSTM"}}