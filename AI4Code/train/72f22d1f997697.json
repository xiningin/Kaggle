{"cell_type":{"c27c98b2":"code","6491e63f":"code","9483a692":"code","215c4d02":"code","0bd576cb":"code","ca92cc29":"code","cdaebeca":"code","214f3c90":"code","3a97d142":"code","23487114":"code","03664faf":"code","8b5c31b9":"code","836618bf":"code","91430a03":"code","d3f3b933":"code","e6bfc0a8":"code","4cf6bd57":"code","05b6f50c":"code","963029a0":"code","f436518a":"code","4924719f":"code","9cecb0ba":"code","40272325":"code","638b51db":"code","fc4373da":"code","39f40900":"code","7bfb89c3":"code","bbe2416d":"code","13ff11ac":"markdown","75ae886f":"markdown","6289a407":"markdown","4dbef231":"markdown","e7e612ae":"markdown","39b27931":"markdown","a89ab617":"markdown"},"source":{"c27c98b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport re\n%matplotlib inline\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6491e63f":"df = pd.read_csv('..\/input\/lionsgates-movies-dataset-from-2000-to-2019\/lionsgate-movies-data.csv')\n\n\npd.set_option('display.max_columns', 17)\npd.set_option('display.max_rows', 50)","9483a692":"df.head()","215c4d02":"df.shape","0bd576cb":"df.info()","ca92cc29":"df.describe()","cdaebeca":"df.isna().sum()","214f3c90":"df.duplicated().sum()","3a97d142":"df.head(2)","23487114":"class FE:\n    def __init__(self, dataframe):\n        self.dataframe = dataframe\n    \n    def drop_col(self):\n        col = 'Unnamed: 0'\n        try:\n            self.dataframe.drop(col, axis=1, inplace=True)\n        except:\n            pass\n        \n        \n    def rename_col(self):\n        columns = self.dataframe.columns\n        self.dataframe.columns = [column.lower().replace(' ', '_') for column in columns]\n        \n    \n    def add_col(self):\n        new_columns = ['year', 'month', 'date']\n        for index, row in enumerate(self.dataframe.release_date):\n            try:\n                for column, value in zip(new_columns, row.split('-')):\n                    self.dataframe.loc[index, column] = value\n            except:\n                pass\n        \n        \n    def fix_value(self):\n        columns = self.dataframe.select_dtypes(include=np.object).columns\n        fix_val = FixValue(self.dataframe, columns)\n        fix_val.get_val()","03664faf":"class FixValue(FE):\n    fmt = r\"'([^']*)'\"\n    \n    def __init__(self, dataframe, columns):\n        super().__init__(dataframe)\n        self.columns = columns\n\n        \n    def converter(self, row):\n        try:\n            val = re.findall(FixValue.fmt, row)\n            val_len = len(val)\n            \n            if val_len == 0:\n                return row\n            else:\n                converted_val = str()\n                for item in val:\n                    converted_val += f'{item}, '\n                return converted_val\n        except:\n            return None\n        \n    def get_val(self):\n        for column in self.columns:\n            rows = self.dataframe[column]\n            for index, row in enumerate(rows):\n                result = self.converter(row)\n                \n                self.dataframe.loc[index, column] = result","8b5c31b9":"fe = FE(df)\nfe.drop_col()\nfe.rename_col()\nfe.add_col()\nfe.fix_value()","836618bf":"df.head(2)","91430a03":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(24,6))\nfig.suptitle('Movies Budget Distribution (USD)\\n\\n', fontsize=20)\n\nsns.distplot(df.budget, ax=ax1)\nsns.boxplot(ax=ax2, data=df, x='budget')\n\nplt.show()","d3f3b933":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(24,6))\nfig.suptitle('Movies Revenue Distribution (USD)\\n\\n', fontsize=20)\n\nsns.distplot(df.box_office, ax=ax1)\nsns.boxplot(ax=ax2, data=df, x='box_office')\n\nplt.show()","e6bfc0a8":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(24,6))\nfig.suptitle('Movies Running Time\\n\\n', fontsize=20)\n\nsns.distplot(df.running_time, ax=ax1)\nsns.boxplot(ax=ax2, data=df, x='running_time')\n\nplt.show()","4cf6bd57":"plt.figure(figsize=(25,6))\nsns.countplot(data=df.sort_values(by='year'), x='year')\nplt.title('Movies Count per Year\\n', fontsize=20)","05b6f50c":"plt.figure(figsize=(25,6))\nsns.countplot(data=df.sort_values(by='month'), x='month')\nplt.title('Movies Count per Month\\n', fontsize=20)","963029a0":"year_group = df.groupby('year')\nyears = [year for year, df in year_group]\nyears_data = list()\n\nfor year in years:\n    year_dict = dict()\n    year_dict['year'] = year\n    for col in ['budget', 'box_office', 'running_time']:\n        val = df[df.year == year][col].mean()\n        year_dict[f'med_{col}'] = val\n    years_data.append(year_dict)\n    \ndf_year = pd.DataFrame(years_data)\n\ndf_year.med_budget = df_year.med_budget.apply(lambda x: x\/1000000)\ndf_year.med_box_office = df_year.med_box_office.apply(lambda x: x\/1000000)","f436518a":"df_year.head()","4924719f":"figure, axes = plt.subplots(3,1, figsize=(22,20))\n\nsns.barplot(ax=axes[0], data=df_year, x='year', y='med_budget')\naxes[0].set_title('Mean Budget (Million USD)')\naxes[0].grid(axis='y', alpha=0.5)\n\nsns.barplot(ax=axes[1], data=df_year, x='year', y='med_box_office')\naxes[1].set_title('Mean Box Office (Million USD)')\naxes[1].grid(axis='y', alpha=0.5)\n\nsns.lineplot(ax=axes[2], data=df_year, x='year', y='med_running_time')\naxes[2].set_title('Average Running Time')\naxes[2].grid(axis='y', alpha=0.5)\n\nplt.tight_layout()\nplt.show()","9cecb0ba":"top10_revenue = df.sort_values(by='box_office', ascending=False)[['title', 'box_office']].head(10)\ntop10_revenue.box_office = top10_revenue.box_office.apply(lambda x: x\/1000000)\n\ntop10_budget = df.sort_values(by='budget', ascending=False)[['title', 'budget']].head(10)\ntop10_budget.budget = top10_budget.budget.apply(lambda x: x\/1000000)\n\ntop10_longest = df.sort_values(by='running_time', ascending=False)[['title', 'running_time']].head(10)","40272325":"figure, axes = plt.subplots(3,1, figsize=(15,20))\n\nsns.barplot(ax=axes[0] ,data=top10_revenue, x='box_office', y='title', palette='crest')\naxes[0].set_title('Top 10 Movies Sales', fontsize=18)\naxes[0].set_xlabel('Million USD\\n\\n\\n', fontsize=16)\naxes[0].grid(axis='x', alpha=0.75)\n\nsns.barplot(ax=axes[1] ,data=top10_budget, x='budget', y='title', palette='crest')\naxes[1].set_title('Top 10 Movies Budget', fontsize=18)\naxes[1].set_xlabel('Million USD\\n\\n\\n', fontsize=16)\naxes[1].grid(axis='x', alpha=0.75)\n\nsns.barplot(ax=axes[2] ,data=top10_longest, x='running_time', y='title', palette='rocket')\naxes[2].set_title('Top 10 Longest Duration', fontsize=18)\naxes[2].set_xlabel('Minutes\\n\\n\\n', fontsize=16)\naxes[2].grid(axis='x', alpha=0.75)\n\nplt.tight_layout()\nplt.show()","638b51db":"df['profit'] = df.box_office - df.budget","fc4373da":"top10_profit = df.sort_values(by='profit', ascending=False)[['title', 'profit', 'budget', 'box_office']].head(10)\nfor col in ['profit', 'budget', 'box_office']:\n    top10_profit[col] = top10_profit[col].apply(lambda x: x\/1000000)\n\ntop10_loss = df.sort_values(by='profit')[['title', 'profit', 'budget', 'box_office']].head(10)\nfor col in ['profit', 'budget', 'box_office']:\n    top10_loss[col] = top10_loss[col].apply(lambda x: x\/1000000)","39f40900":"top10_profit.head()","7bfb89c3":"top10_loss.head()","bbe2416d":"figure, axes = plt.subplots(2,1, figsize=(15,15))\n\nsns.barplot(ax=axes[0] ,data=top10_profit, x='profit', y='title', palette='crest')\naxes[0].set_title('Top 10 Movies Profits', fontsize=18)\naxes[0].set_xlabel('Million USD\\n\\n\\n', fontsize=16)\naxes[0].grid(axis='x', alpha=0.75)\n\nsns.barplot(ax=axes[1] ,data=top10_loss, x='profit', y='title', palette='crest')\naxes[1].set_title('Top 10 Movies Loss', fontsize=18)\naxes[1].set_xlabel('Million USD\\n\\n\\n', fontsize=16)\naxes[1].grid(axis='x', alpha=0.75)\n\nplt.tight_layout()\nplt.show()","13ff11ac":"### *Conclusion*\n1. **There is an unwanted column located at the first index, we may remove it**\n1. **There's also quite a lot of nan values**\n1. **Some of the rows' values are in a form of lists**","75ae886f":"# **Feature Engineering**\n**In this part, we will do some data cleaning this process includes;treating nan values, formatting unwanted values, adding new columns, and renaming the columns.**","6289a407":"# **Exploratory Data Analysis**","4dbef231":"### **Average Budget, Box Office, and Running Time each Year**","e7e612ae":"# **Data Visualization**","39b27931":"### Movies with Greatest Profits and Loss","a89ab617":"#### Our plots definitely don't look very aesthetic since we have a lot of outliers and nan values in the data. However, I don't really want to mess with the outliers since it's the true value of how much the movie was generating money."}}