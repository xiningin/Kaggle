{"cell_type":{"9d191056":"code","72d6db12":"code","5fa368a1":"code","1c29c3df":"code","58c1fa69":"code","d8375630":"code","8c8029e4":"code","155468cb":"code","1ba98835":"code","49757da3":"code","5d402ad9":"code","430253e9":"code","354cad5b":"code","fd108e1f":"code","c58b8526":"code","f7fc523e":"code","0185234e":"code","98187edb":"code","ff720784":"code","5384c154":"code","9d796a70":"code","402da152":"code","15d9629c":"code","b492d6cc":"code","9125e67b":"code","76815b2e":"code","376e203d":"code","0059aefc":"code","80a53b81":"code","8b496fd8":"code","9c13be4d":"code","085a6e32":"code","daa4431c":"markdown","ec58c250":"markdown","a242eea9":"markdown"},"source":{"9d191056":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","72d6db12":"import warnings; warnings.filterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pylab\nfrom pylab import rcParams\n\n\nplt.style.use('dark_background')\nplt.rcParams['figure.figsize'] = 18,8\npd.set_option('display.max_columns', None)\n\n\nfrom sklearn.metrics import mean_squared_error\n\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n#import pmdarima as pm","5fa368a1":"import os.path","1c29c3df":"df_holi = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/holidays_events.csv')\ndf_oil = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/oil.csv')\ndf_stores = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/stores.csv')\ndf_trans = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/transactions.csv')\n\ndf_train = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/train.csv')\ndf_test = pd.read_csv('..\/input\/store-sales-time-series-forecasting\/test.csv')","58c1fa69":"df_train1 = df_train.merge(df_holi, on = 'date', how='left')\ndf_train1 = df_train1.merge(df_oil, on = 'date', how='left')\ndf_train1 = df_train1.merge(df_stores, on = 'store_nbr', how='left')\ndf_train1 = df_train1.merge(df_trans, on = ['date', 'store_nbr'], how='left')\ndf_train1 = df_train1.rename(columns = {\"type_x\" : \"holiday_type\", \"type_y\" : \"store_type\"})\n\ndf_train1['date'] = pd.to_datetime(df_train1['date'])\ndf_train1['year'] = df_train1['date'].dt.year\ndf_train1['month'] = df_train1['date'].dt.month\ndf_train1['week'] = df_train1['date'].dt.isocalendar().week\ndf_train1['quarter'] = df_train1['date'].dt.quarter\ndf_train1['day_of_week'] = df_train1['date'].dt.day_name()","d8375630":"df_train1.head()","8c8029e4":"df_train1.describe()","155468cb":"df = df_train1","1ba98835":"print(f'The merged dataframe has {df.shape[0]} rows and {df.shape[1]} columns')","49757da3":"df.info()","5d402ad9":"print(f'The data is available from {df.date.max()} to {df.date.min()}')","430253e9":"df['date'] = df['date'].dt.floor('d')","354cad5b":"df = df[['date', 'sales']]","fd108e1f":"df = df.set_index(df.date)\ndf.drop('date', axis=1, inplace=True)","c58b8526":"df.isna().sum()","f7fc523e":"df = df.resample('M').mean()","0185234e":"y = df['sales']\nfig, ax = plt.subplots(figsize=(18, 8))\nax.plot(y,marker='o', markersize=8, linestyle='-', label='Monthly Mean Resample', color='fuchsia')\nax.set_ylabel('sales')\nax.set_title('Average sales per month')\nax.set_xlabel('years')\nax.grid(axis='x')\nax.legend();","98187edb":"df_dec=seasonal_decompose(df,model='additive', extrapolate_trend='freq')\ndf_dec.plot();","ff720784":"#How does the sales look like?\nsns.distplot(df['sales'])\nplt.axvline(x=np.mean(df['sales']), c='red', ls='--', label='mean')\nplt.axvline(x=np.percentile(df['sales'],25),c='green', ls='--', label = '25th percentile:Q1')\nplt.axvline(x=np.percentile(df['sales'],75),c='orange', ls='--',label = '75th percentile:Q3' )\nplt.legend()","5384c154":"sales_mean = df.sales.rolling(window=12).mean()\nsales_std = df.sales.rolling(window=12).std()","9d796a70":"fig, ax = plt.subplots(figsize=(18, 8))\nax.plot(df.sales,marker='x', markersize=8, label='Sales',color='cyan')\nax.plot(sales_mean,marker='o', markersize=4, label='rolling mean', color='red');\nax.plot(sales_std,marker='*', markersize=4, label='rolling std', color='royalblue');\nax.legend()\nplt.xlabel('Years')\nplt.ylabel('Avg sales')\nplt.title('Check of stationarity')\nax.grid(axis='x')","402da152":"dftest = adfuller(df.dropna(), autolag='AIC')\nprint('Test statistic = {:.3f}'.format(dftest[0]))\nprint('P-value = {:.3f}'.format(dftest[1]))\nprint('Critical values :')\nfor k, v in dftest[4].items():\n    print('\\t{}: {} - The data is {} stationary with {}% confidence'.format(k, v, 'not' if v<dftest[0] else '', 100-int(k[:-1])))","15d9629c":"df_lag12 = df.sales - df.sales.shift(12)\ndf_lag12.tail(5)","b492d6cc":"y = df_lag12\nfig, ax = plt.subplots(figsize=(18, 8))\nax.plot(y,marker='o', markersize=8, linestyle='-', label='Monthly Mean Resample', color='fuchsia')\nax.set_ylabel('sales')\nax.set_title('Average sales per month')\nax.set_xlabel('years')\nax.grid(axis='x')\nax.legend();","9125e67b":"dftest = adfuller(df_lag12.dropna(), autolag='AIC')\nprint('Test statistic = {:.3f}'.format(dftest[0]))\nprint('P-value = {:.3f}'.format(dftest[1]))\nprint('Critical values :')\nfor k, v in dftest[4].items():\n    print('\\t{}: {} - The data is {} stationary with {}% confidence'.format(k, v, 'not' if v<dftest[0] else '', 100-int(k[:-1])))","76815b2e":"df_dec_lag12 =seasonal_decompose(df_lag12.dropna(),model='additive', extrapolate_trend='freq')\ndf_dec.plot()","376e203d":"df['shifted_sales'] = df.sales.shift(1)\ndf.head()","0059aefc":"fig, ax = plt.subplots(figsize=(18, 8))\nax.plot(df.sales,marker='*', markersize=8, label='Sales',color='white')\nax.plot(df.shifted_sales,marker='o', markersize=4, label='Shifted Sales', color='cyan');\nplt.xlabel('Year')\nplt.ylabel('avg sales')\nplt.title('Naive model')\nax.legend()\nplt.show()","80a53b81":"df = df.dropna()","8b496fd8":"mse = mean_squared_error(df.sales, df.shifted_sales)\n\nrmse = np.sqrt(mse)\n\nprint(f'The root mean square error : {rmse}')\n","9c13be4d":"from datetime import datetime\ndf['new_date']=pd.to_datetime(df['date'],format='%Y-%m-%d',errors='coerce')","085a6e32":"df[[\"year\", \"month\", \"day\"]] = df[\"date\"].str.split(\"-\", expand = True)\n\n\ndf['month'].replace(['01','02','03','04','05','06','07','08','09','10','11','12'],['Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'],inplace=True)\ndf['month'] = pd.Categorical(df['month'],\n                                   categories=['Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec'],\n                                   ordered=True)\ndf['day'] = pd.Categorical(df['day'],categories=['01','02','03','04','05','06','07','08','09','10','11', '12', '14','15','16','17','18','19','20','21','22','23', '24', '25', '26', '27','28','29','30','31'],ordered=True)","daa4431c":"Differencing","ec58c250":"Augmented Dickey-Fuller test (ADF test)\nH0 : 'The time series is not stationary'\nHa : 'The time series is stationary'","a242eea9":"Time series model building\n\n>Naive Forecasting\n"}}