{"cell_type":{"b9d1ceb5":"code","28a1110e":"code","f53b63a1":"code","1f3b6e3a":"code","48d6eed9":"code","98d711a9":"code","b3519700":"code","498ceaaa":"markdown"},"source":{"b9d1ceb5":"import pandas\nfrom matplotlib import pyplot as plt\nfrom matplotlib import colors\nfrom collections import defaultdict\nimport numpy as np\n\n###################################### Explore data from \"anime.csv\"\nall_data = pandas.read_csv(\"..\/input\/anime-recommendation-database-2020\/anime.csv\", dtype=str) \nprint (\"anime.csv feathes = \", list(all_data.columns))","28a1110e":"################### get genres\nGenders = defaultdict(int)\nfor val in all_data['Genders']:\n  for v in val.split(','):\n    Genders[ v.strip() ] += 1\n\nprint(\"anime genres = \", list(dict(Genders).keys()) )\n\n################### get episodes\nEpisodes = defaultdict(int)\nfor val in all_data['Episodes']:\n  if val == \"Unknown\" : \n    Episodes[ 0 ] += 1;\n  else : Episodes[ int(val.strip()) ] += 1\n\nprint(\"anime Episodes = \", list(dict(Episodes)) )\n#for val in sorted(dict(Episodes).keys()):  print(val, Episodes[val] )\n\n################### get durations\nDurations = defaultdict(int)\nfor val in all_data['Duration']:\n  Durations[ val ] += 1\n\nprint(\"anime Durations = \", list(dict(Durations)) )\n\n################### get Types\nTypes = defaultdict(int)\nfor val in all_data['Type']:\n  Types[ val.strip() ] += 1\nprint(\"anime types = \", list(dict(Types)) )","f53b63a1":"################### create release date\nyears  = []\nmonths = []\nfor val in all_data['Aired']:\n  vr = val.split()\n  y = 'Unknown'\n  m = 'Unknown'\n  for v in vr:\n    if v.isdigit() and len(v) == 4 :\n      y = v\n      break\n  for v in vr:\n    if not v.isdigit() and len(v) >= 3 and v[0].isupper() and v != 'Unknown' :\n      m = v[:3]\n      break\n        \n  years += [ y ]\n  months += [ m ]\n\nall_data['Year'] = years\nall_data['Month'] = months","1f3b6e3a":"###################################### Plots\nscore_var  = 'Score'\nfor f in ['Genders', 'Type', 'Source', 'Rating'] :\n  all_data[f] = all_data[f].str.split(', ')\n  datas = defaultdict(list)\n  for score, types in zip( all_data[score_var], all_data[f] ):\n    if score == \"Unknown\": continue\n    for type in types :\n      datas[ type ] += [ float(score) ]\n\n  sorted_datas = sorted(datas.items(), key=lambda f : sum(f[1])\/len(f[1]) )\n\n  fig, ax = plt.subplots()\n  ax.set_title( f )\n  if f == \"Genders\" : \n    ax.set_title( \"Genres\" )\n    fig.set_figheight( 2*fig.get_figheight() )\n  ax.boxplot( [f[1] for f in sorted_datas], vert=False, flierprops=dict(markerfacecolor='g', marker='D') )\n  ax.set_yticklabels( [f[0] for f in sorted_datas] )\n  ax.set_xlabel('MyAnimelist Score')\n  plt.show()","48d6eed9":"################### Stackplots per Year\nfor f in ['Genders', 'Type', 'Source', 'Rating'] :\n  datas = {}\n  for year in [ str(y) for y in range(1910, 2030) ]:\n    datas[ year ] = defaultdict(list)\n\n  all_types = []\n  for score, types, year in zip( all_data[score_var], all_data[f], all_data[\"Year\"] ):\n    if year == \"Unknown\":  continue\n    if score == \"Unknown\": continue\n    for type in types :\n      datas[year][ type ] += [ float(score) ]\n      all_types += [ type ]\n\n  x_data = defaultdict(list)\n  for type in list(set(all_types)):\n    for year in [ str(y) for y in range(1980, 2021) ]:\n      x_data[ type ] += [ len( datas[ year ][ type ] ) ]\n\n  sorted_datas = sorted(x_data.items(), key=lambda f : -sum(f[1]) )\n\n  for i in range(len(sorted_datas[0][1])) :\n    summ = sum( [ ff[1][i] for ff in sorted_datas ] )\n    for j in range(len(sorted_datas)):\n      sorted_datas[j][1][i] \/= summ\n\n  if len(sorted_datas) > 18:\n    others = []\n    for i in range(len(sorted_datas[0][1])) :\n      summ = sum( [ ff[1][i] for ff in sorted_datas[18:] ] )\n      others += [ summ ]\n    sorted_datas = sorted_datas[:18] + [ [\"...\", others] ]\n\n  fig, ax = plt.subplots()\n  ax.stackplot([y for y in range(1980, 2021)], [f[1] for f in sorted_datas], labels=[f[0] for f in sorted_datas] )\n  ax.set_xlabel('Year')\n  plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n  fig.subplots_adjust(right=0.5)\n  fig.set_figwidth( 2*fig.get_figwidth() )\n\n  ax.set_title( \"Anime \" + f )\n  if f == \"Genders\" :    ax.set_title( \"Anime Genre\" )\n  if f == \"Rating\" :     ax.set_title( \"Anime Age rating\" )\n  if f == 'Year_class' : ax.set_title( \"Anime Release year\" )\n  if f == 'Month' :      ax.set_title( \"Anime Release month\" )\n\n  ax.set_ylabel('Fraction of Anime')","98d711a9":"  ################### check number of 'Episodes'\n  N_episodes_regions = [1, 5, 10, 20, 30, 45, 70, 100, 9000]\n  for N in N_episodes_regions :\n    all_data[ 'Episodes_' + str(N) ] = 0\n    \n  episodes = []\n  for i in all_data.index:\n    eps = all_data.at[i, 'Episodes']\n    if eps == \"Unknown\" : continue\n    eps = int(eps)\n    for N in N_episodes_regions :\n      if eps > N : continue\n      all_data.at[i, 'Episodes_' + str(N) ] = 1\n      break\n    if eps < 2 : continue\n    if eps > 100 : continue\n    episodes += [ eps ]\n\n  fig, ax = plt.subplots(tight_layout=True)\n  hist = ax.hist(episodes, bins=50, facecolor='g')\n  ax.set_xlabel('Number of series (>1)')\n  ax.set_ylabel('Number of Anime')\n\n  datas = defaultdict(list)\n  for i, N in enumerate(N_episodes_regions) :\n    title  = 'Episodes_' + str(N)\n    xtitle = str( ([0] + N_episodes_regions)[i] ) + \"-\" + str(N_episodes_regions[i])\n    tmp_df = all_data[all_data[title] == 1]\n    tmp_df = tmp_df[tmp_df[\"Score\"] != \"Unknown\"]\n    datas[ xtitle ] = tmp_df[\"Score\"].tolist()\n  # print( datas )\n\n  sorted_datas = sorted(datas.items(), key=lambda f : int(f[0].split(\"-\")[0]) )\n\n  fig, ax = plt.subplots()\n  ax.set_title( \"Anime Number of episodes\" )\n  ax.boxplot( [[float(x) for x in f[1]] for f in sorted_datas], vert=False, flierprops=dict(markerfacecolor='g', marker='D') )\n  ax.set_yticklabels( [f[0] for f in sorted_datas] )\n  ax.set_xlabel('MyAnimelist Score')\n\n  # pie\n  fig, ax = plt.subplots()\n\n  data_x = [len(f[1]) for f in sorted_datas]\n  data_y = [f[0] for f in sorted_datas]\n\n  patches, texts, autotexts = ax.pie(data_x, labels = data_y, autopct='%d%%')\n  ax.set(aspect=\"equal\", title=\"Fraction of Anime films\")\n  plt.setp(autotexts, size=12, weight=\"bold\", color=\"white\")\n\n  plt.title(\"% of Anime per Number of episodes\")","b3519700":"  # Add number of voters\n  def get_voters(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10):\n    x = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10]\n    def f(val) :\n      if val == \"Unknown\" : return 0\n      return float(val)\n    return int(sum(map(f, x)))\n  all_data[\"N_votes\"] = all_data.apply(lambda x: get_voters(x['Score-1'], x['Score-2'], x['Score-3'], x['Score-4'], x['Score-5'], x['Score-6'], x['Score-7'], x['Score-8'], x['Score-9'], x['Score-10']), axis=1) \n\n  for f in ['Genders', 'Type', 'Source', 'Rating'] : \n    datas = defaultdict(list)\n    for score, types in zip( all_data[\"N_votes\"], all_data[f] ):\n      if score == \"Unknown\": continue\n      for type in types :\n        datas[ type ] += [ float(score) ]\n\n    sorted_datas = sorted(datas.items(), key=lambda f : sum(f[1]) )\n    data_x = [sum(f[1]) for f in sorted_datas]\n    data_xx = [len(f[1]) for f in sorted_datas]\n    data_y = [f[0] for f in sorted_datas]\n\n    if f == 'Source':\n      data_x = data_x[-9:] + [ sum(data_x[:-9]) ]\n      data_y = data_y[-9:] + [ '...' ]\n    if f == 'Genders':\n      data_x = data_x[-16:] + [ sum(data_x[:-18]) ]\n      data_y = data_y[-16:] + [ '...' ]\n    if f == 'Year_class':\n      data_x = data_x[-8:] + [ sum(data_x[:-8]) ]\n      data_y = data_y[-8:] + [ '...' ]\n\n    data_x = list(reversed(data_x))\n    data_y = list(reversed(data_y))\n\n    fig, ax = plt.subplots()\n    data_y = data_y[::2] + list(data_y[1::2])\n    wedges, texts, autotexts = ax.pie(data_x[::2] + list(data_x[1::2]), wedgeprops=dict(width=0.5), startangle=-40, autopct='%d%%', pctdistance=0.80)\n\n    bbox_props = dict(boxstyle=\"square,pad=0.2\", fc=\"w\", ec=\"k\", lw=0.72)\n    kw = dict(arrowprops=dict(arrowstyle=\"-\"), bbox=bbox_props, zorder=0, va=\"center\")\n\n    for i, p in enumerate(wedges):\n      ang = (p.theta2 - p.theta1)\/2. + p.theta1\n      y = np.sin(np.deg2rad(ang))\n      x = np.cos(np.deg2rad(ang))\n      horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n      connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n      kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n      if data_y[i] == \"Unknown\" : continue\n      if data_y[i] == \"Music\" : continue\n      extra = 0\n      if data_y[i] == \"Rx - Hentai\" : extra = 0.1\n      if data_y[i] == \"OVA\" : extra = 0.1\n      ax.annotate(data_y[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.1*y+extra), horizontalalignment=horizontalalignment, **kw)\n  \n    plt.setp(autotexts, size=10, weight=\"bold\", color=\"black\")\n    ax.set_aspect(aspect=1.25)\n\n    plt.title(\"% of User Votes per Anime \" + f)\n    if f == \"Genders\" : plt.title( \"% of User Votes per Anime Genre\" )\n    if f == \"Rating\"  : plt.title( \"% of User Votes per Anime Age rating\" )\n    if f == 'Year_class' : plt.title( \"% of User Votes per Anime Release year\" )\n    if f == 'Month' :      plt.title( \"% of User Votes per Anime Release month\" )","498ceaaa":"### Snippet of the code used for following presentation:\nhttps:\/\/github.com\/pmandrik\/AnimeRecommendationSystem2020\/raw\/78ec99295bc1fdc87f9e1fb9bff487ce630f84b2\/pmandrik_anime_I.pdf\n\n### The full version of code is available at (or will be):\nhttps:\/\/github.com\/pmandrik\/AnimeRecommendationSystem2020"}}