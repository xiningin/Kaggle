{"cell_type":{"a9f226ba":"code","7d1e4da0":"code","56a1f2fe":"code","84788399":"code","87e22746":"code","ca2a8de1":"code","6cd134b8":"code","7a9edd92":"code","f183eb8c":"code","7d2e46be":"code","bbfca76d":"code","40df829a":"code","0c770ffe":"code","5e45639c":"code","56ca182f":"code","75d42170":"code","5e530014":"markdown","2a191d6f":"markdown","0575d9d6":"markdown","6484fca1":"markdown","ccf12661":"markdown","621f93f6":"markdown","59b912a5":"markdown","efce86a5":"markdown","3fd2c2c1":"markdown","7ba38bcd":"markdown","33f45868":"markdown","cccd6b33":"markdown","1d0b2b25":"markdown"},"source":{"a9f226ba":"!pip install six","7d1e4da0":"pip install pydotplus","56a1f2fe":"import pandas as pd\nimport seaborn as sns\nfrom sklearn import preprocessing  \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\n\n# libraries required for visualizing the decision tree\nfrom six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus","84788399":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf","87e22746":"df = df.drop(['Id'], axis = 1)  # dropping unnecessary column\ndf","ca2a8de1":"df.info()   # getting an insight into the type of data ","6cd134b8":"sns.pairplot(df)  # to show relation between columns","7a9edd92":"# using Pearson's correlation for quantifying the relationship\ncorr = df.corr(method='pearson')\nsns.heatmap(corr, annot=True)","f183eb8c":"label_encoder = preprocessing.LabelEncoder()  # for columns not with int\/float type values","7d2e46be":"df['Species'] = label_encoder.fit_transform(df['Species'])   # label encoding 'Species' column  \ndf","bbfca76d":"data = df.values\nX, y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)  # splitting in the ratio 70:30","40df829a":"clf = DecisionTreeClassifier()\nclf = clf.fit(X_train,y_train)","0c770ffe":"pred = clf.predict(X_test)","5e45639c":"score = clf.score(X_test, pred)\nscore","56ca182f":"df = df.drop(['Species'], axis = 1) \ndf","75d42170":"# visualizing the graph\ndot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data, feature_names=df.columns, filled=True, rounded=True,special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())","5e530014":"### Applying Decision Tree Classifier on Training Data","2a191d6f":"### Making Predictions","0575d9d6":"### Data Preprocessing","6484fca1":"### Data Visualisation","ccf12661":"### Splitting Data for Training and Testing","621f93f6":"# **Iris Species Classification using Decision Trees**","59b912a5":"### Importing Libraries","efce86a5":"### Label Encoding","3fd2c2c1":"### The Decision Tree","7ba38bcd":"### Preparing Data for Graphical Visualization","33f45868":"### Getting Data","cccd6b33":"### Accuracy Check","1d0b2b25":"### **Classification is 100% accurate.**"}}