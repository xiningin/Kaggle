{"cell_type":{"41f66725":"code","773eb730":"code","e3221c8c":"code","ac1d716f":"code","29a086c7":"code","46eecbfc":"code","b7c97b43":"code","dbcfa6b5":"code","f632057f":"code","b9f6ee75":"code","cf005624":"code","43413aaf":"code","26697eac":"code","dc03bb19":"code","819c22de":"code","3bc85dd6":"code","0f18052b":"code","89bb77c9":"markdown"},"source":{"41f66725":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","773eb730":"# re-arrange the dataset\n!mkdir \/kaggle\/working\/testset\nfl = open('\/kaggle\/input\/food41\/meta\/meta\/classes.txt')\ncls = fl.readline()\nwhile(cls):\n    !mkdir \/kaggle\/working\/testset\/{cls}\n    cls = fl.readline()\n# Moving test files to testset\/, train files will be left.\ntestfile = open('\/kaggle\/input\/food41\/meta\/meta\/test.txt')\nimg = testfile.readline().strip()\nwhile(img):\n    cls = img.split('\/')[0]\n    !mv \/kaggle\/input\/food41\/images\/{img}.jpg \/kaggle\/working\/testset\/{cls}\/\n    print(f'\\r{img}',end='')\n    img = testfile.readline().strip()","e3221c8c":"!nvidia-smi","ac1d716f":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nfrom datetime import datetime\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import SGD, Adam\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, TensorBoard, ModelCheckpoint\nfrom tensorflow.keras.models import load_model","29a086c7":"train_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        rotation_range=30,\n        shear_range=0.3,\n        horizontal_flip=True,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range=0.25,\n)\nvalid_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n)","46eecbfc":"batch_size = 128\n\ntrain_data = train_datagen.flow_from_directory(\n    'food-101\/images\/',\n    batch_size=batch_size,\n    target_size=(224, 224),\n    shuffle=True,\n)\nvalid_data = valid_datagen.flow_from_directory(\n    'food-101\/testset\/',\n    target_size=(224, 224),\n    batch_size=batch_size,\n    shuffle=False,\n)","b7c97b43":"def visualize_images(images,labels):\n    figure, ax = plt.subplots(nrows=3, ncols=3, figsize=(12, 14))\n    classes = list(train_data.class_indices.keys())\n    img_no = 0\n    for i in range(3):\n        for j in range(3):\n            img = images[img_no]\n            lbl = np.argmax(labels[img_no])\n\n            ax[i,j].imshow(img)\n            ax[i,j].set_title(classes[lbl])\n            ax[i,j].set_axis_off()\n            img_no+=1","dbcfa6b5":"images, labels = next(train_data)\nvisualize_images(images,labels)","f632057f":"images, labels = next(valid_data)\nvisualize_images(images,labels)","b9f6ee75":"base = MobileNetV2(input_shape=(224,224,3),include_top=False,weights='imagenet')\nbase.trainable = True\nmodel = Sequential()\nmodel.add(base)\n# model.add(Flatten())\nmodel.add(GlobalAveragePooling2D())\n# model.add(Dense(512, activation='relu'))\n# model.add(Dropout(0.1))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(101, activation='softmax'))\n# opt = SGD(lr=0.001, momentum=0.9)\nopt = Adam(learning_rate=0.001)\nmodel.compile(optimizer=opt,loss = 'categorical_crossentropy',metrics=['accuracy'])","cf005624":"reduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy',patience = 1,verbose = 1)\nearly_stop = EarlyStopping(monitor = 'val_accuracy',patience = 5,verbose = 1,restore_best_weights = True)\nlog = \"logs\/scalars\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard = TensorBoard(log_dir=log,write_graph=False,update_freq=100)\nchkp = ModelCheckpoint('drive\/MyDrive\/mobilenetv2_tuned.h5',monitor='val_accuracy',verbose=1,save_best_only=True)","43413aaf":"!rm -r logs\n%reload_ext tensorboard\n%tensorboard --logdir logs","26697eac":"history = model.fit(train_data, \n                    epochs=20,\n                    validation_data = valid_data,\n                    callbacks=[early_stop, reduce_lr, tensorboard, chkp])","dc03bb19":"preds = model.predict(valid_data)","819c22de":"out = preds.argmax(axis=1)\nout.shape","3bc85dd6":"from sklearn.metrics import accuracy_score\nval_acc = accuracy_score(valid_data.labels,out)\nprint(f'Validation Accuracy: {val_acc:.2f}') ","0f18052b":"import time\ninp = np.random.randint(0,255,(1,224,224,3))\nt1 = time.time()\nout = model.predict(inp)\nt2 = time.time()\nprint(f'Inference Time: {t2-t1}')\nprint(f'FPS: {1\/(t2-t1)}')","89bb77c9":"\n# Note:\n\nThis Code was written on google colab and has not been tested on kaggle. There could be minor bugs in it BUT you can get decent results if you can make it run!\n"}}