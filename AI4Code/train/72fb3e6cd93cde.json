{"cell_type":{"53f00de7":"code","2981d822":"code","13f4f007":"code","61913d08":"code","44796dd5":"code","cca542d8":"code","01ffcfbe":"code","90888ffc":"code","2683c9ff":"code","26e82c15":"code","b2330ea2":"code","1673f909":"code","fa68e93e":"code","3d6b3a89":"code","4b39e3b5":"code","147c9836":"code","faa799bd":"code","337aa5d3":"code","57684233":"code","dbc3c4eb":"code","27d5d4a2":"code","2c440374":"code","8d042755":"code","4b98a69d":"code","882564a3":"code","93700229":"code","6cd6adc7":"code","59ac831e":"code","6f9e100a":"code","bd132000":"code","dbeb808f":"code","42b337dd":"code","329dec34":"code","45bad8c6":"code","7e3df967":"code","458b4599":"code","33c59bf9":"code","32b2fc8f":"code","9a53a848":"code","72a67d28":"code","8954f2b6":"code","f849e401":"code","04fff662":"code","7d797dbf":"code","60ba9bed":"code","7a732a07":"code","57d1832d":"code","8983e8b9":"markdown","2568a6f9":"markdown","a46f7ee8":"markdown","79ba5ff2":"markdown","571b2870":"markdown","817a1d17":"markdown","d46f10c0":"markdown","b01aab1f":"markdown","ef85ceb2":"markdown","5b851311":"markdown","64273eb8":"markdown","ef79d4a8":"markdown","765cdb6c":"markdown","86ba6d65":"markdown","dce296c0":"markdown","a8d2aaa8":"markdown","2c24ad31":"markdown","11dcc581":"markdown","f4bd4036":"markdown","7aab5c79":"markdown","13710277":"markdown","03773335":"markdown","c9ea6809":"markdown","6c3cfde5":"markdown","a6ba8999":"markdown","497a7028":"markdown","4e729dab":"markdown","4180ac64":"markdown","5e1e1d10":"markdown","b2ee894a":"markdown","58c5a3e2":"markdown","aeadf621":"markdown","1d1bed18":"markdown","458ce0ce":"markdown","2e447954":"markdown","20eb8a03":"markdown","f4dcc08e":"markdown","f461b58e":"markdown","b8102d2c":"markdown","347f7e06":"markdown","93ed025c":"markdown","15b23a0d":"markdown","aa925070":"markdown","2bb219f0":"markdown","35085335":"markdown"},"source":{"53f00de7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import plot_model\n\nsns.set_style(\"darkgrid\")\npd.set_option(\"display.max_columns\", None)   # setting to display all columns\npd.options.plotting.backend = \"plotly\"\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2981d822":"df = pd.read_csv(\"\/kaggle\/input\/autism-screening-on-adults\/autism_screening.csv\")\n\ndf.head()","13f4f007":"print(f'Shape of dataframe is: {df.shape}')","61913d08":"pd.DataFrame(df.dtypes,\n             columns = [\"Data Type\"])","44796dd5":"df.describe()","cca542d8":"pd.DataFrame(df.isnull().sum(), columns=[\"Missing Values\"]).style.bar(color = \"#84A9AC\")","01ffcfbe":"print(f\"Maximum age is data: {df['age'].max()}\\n\")\n\nprint(f\"Minimum age is data: {df['age'].min()}\")","90888ffc":"df[df['age'] == df['age'].max()]","2683c9ff":"# dropping record number 52\ndf.drop(index = 52, inplace = True)\n\n# resetting index\ndf.reset_index(inplace = True)","26e82c15":"df['age'] = df['age'].fillna(np.round(df['age'].mean(), 0))","b2330ea2":"pd.DataFrame(df.isnull().sum(), columns=[\"Missing Values\"])","1673f909":"for col in df.select_dtypes('O').columns:\n    print(\"-------------------------------\")\n    print(f'Column name: {col}\\n')\n    print(f'Unique values:\\n{df[col].unique()}\\n\\n')","fa68e93e":"df['ethnicity'] = df['ethnicity'].replace('?', 'Others')","3d6b3a89":"df['ethnicity'] = df['ethnicity'].replace('others', 'Others')","4b39e3b5":"df['ethnicity'].unique()","147c9836":"df['relation'] = df['relation'].replace('?', df['relation'].mode()[0])","faa799bd":"df['relation'].unique()","337aa5d3":"fig = px.histogram(df, x=\"gender\",                   \n                   template='plotly_dark',\n                   color_discrete_sequence = [\"#84A9AC\"])\n\nfig.update_layout(title = \"<b>Counts of Male and Female<\/b>\",\n                  title_x = 0.5,\n                  title_font = dict(size = 20),\n                  uniformtext_minsize = 15)\n\nfig.show()","57684233":"fig = px.pie(df, names = \"gender\",\n             title = \"<b>Counts of Male and Female<\/b>\",\n             hole = 0.5, template = \"plotly_dark\")\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 1.5)))\n\nfig.update_layout(title_x = 0.5,\n                  title_font = dict(size = 20),\n                  uniformtext_minsize = 15)\n\n\nfig.show()","dbc3c4eb":"df['Class\/ASD'].value_counts()","27d5d4a2":"fig = px.pie(df, names = \"Class\/ASD\",\n             title = \"<b>Autism Spectrum Disorder Counts<\/b>\",\n             template = \"plotly_dark\")\n\nfig.update_traces(textposition='inside',\n                  textinfo = 'percent+label',\n                  marker = dict(line = dict(color = '#000000', width = 1.5)))\n\nfig.update_layout(title_x = 0.5,\n                  title_font = dict(size = 20),\n                  uniformtext_minsize = 15)\n\n\nfig.show()","2c440374":"fig = df.groupby('gender').agg({'age':'mean'}).plot(kind='bar',                                                    \n                                                    template = \"seaborn\",\n                                                    labels = {\"gender\":\"Gender\",\n                                                              \"value\":\"Age\"},\n                                                    color_discrete_sequence = [\"#84b1b5\"]);\n\nfig.update_layout(title = \"<b>Average Age<\/b>\\n\",\n                  title_font = dict(size = 20),)\n\n\nfig.show()","8d042755":"fig = df[df['Class\/ASD'] == \"YES\"]['gender'].value_counts().plot(kind = 'bar',                                                               \n                                                                 template = \"seaborn\",\n                                                                 color_discrete_sequence = [\"#84b1b5\"],\n                                                                 labels = {\"index\":\"Gender\",\n                                                                          \"value\":\"Counts\"});\n\nfig.update_layout(title = \"<b>Gender Count of ASD Patients<\/b>\\n\",\n                  title_font = dict(size = 20), width = 900)\n\nfig.show()","4b98a69d":"asd_patients_country_wise = pd.DataFrame(df[df['Class\/ASD'] == \"YES\"]['contry_of_res'].value_counts()).rename({\"contry_of_res\":\"ASD_Patient_Counts\"}, axis = 1)","882564a3":"asd_patients_country_wise.style.bar(color=\"#84A9AC\") ","93700229":"asd_patients_country_wise.index","6cd6adc7":"fig = px.bar(data_frame = asd_patients_country_wise, \n             x = asd_patients_country_wise.index,    \n             y = \"ASD_Patient_Counts\",\n             labels = {\"index\" : \"Country\"},     \n             color_discrete_sequence = px.colors.qualitative.D3_r,\n             template='plotly_dark')\n\nfig.update_xaxes(tickangle = 310)\n\nfig.update_layout(title={\n        'text': \"<b>Counts of ASD Patients Country Wise<\/b>\",\n        'y':0.93,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\nfig.show()\n","59ac831e":"label = asd_patients_country_wise.index\nvalue = asd_patients_country_wise['ASD_Patient_Counts']\n\nfig = go.Figure(data=[go.Pie(labels = label,\n                             values = value,\n                             rotation = 90)])\n\nfig.update_traces(textposition = 'inside',\n                  textinfo = 'percent+label',\n                  marker = dict(line = dict(color = '#000000', width = 1.5)))\n\nfig.update_layout(title_text='<b>Country Wise Counts of ASD Patients<\/b>',\n                  title_x = 0.5,\n                  title_font = dict(size = 20),\n                  uniformtext_minsize = 15,\n                  template='plotly_dark')\n\nfig.show()","6f9e100a":"df.drop(['index','age_desc'], axis = 1, inplace = True)","bd132000":"X = df.drop(\"Class\/ASD\", axis = 1)    # select all other feature except \"Class\/ASD\" for training\nY = df['Class\/ASD']","dbeb808f":"X = pd.get_dummies(X)\nY = pd.get_dummies(Y)","42b337dd":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25)","329dec34":"print(f\"Shape of X_train is: {X_train.shape}\")\nprint(f\"Shape of Y_train is: {Y_train.shape}\\n\")\nprint(f\"Shape of X_test is: {X_test.shape}\")\nprint(f\"Shape of Y_test is: {Y_test.shape}\")","45bad8c6":"input_dim = X.shape[1]","7e3df967":"model = Sequential()\nmodel.add(Dense(8, input_dim = input_dim, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(5, activation = \"relu\", kernel_initializer='normal'))\nmodel.add(Dense(2, activation = 'sigmoid'))","458b4599":"# compiling model\nmodel.compile(optimizer = Adam(learning_rate = 0.001),\n              loss = 'binary_crossentropy',\n              metrics = ['accuracy'])","33c59bf9":"model.summary()","32b2fc8f":"plot_model(model,\n           show_dtype = True,\n           show_layer_names = True,\n           show_shapes = True)","9a53a848":"result = model.fit(X_train, Y_train, epochs = 20, batch_size = 10)","72a67d28":"acc = result.history['accuracy']\nloss = result.history['loss']\n\nepoch = [i + 1 for i in range(len(acc))]","8954f2b6":"acc_loss_df = pd.DataFrame({\"Accuracy\" : acc,\n                            \"Loss\" : loss,\n                            \"Epoch\" : epoch})\n\nacc_loss_df.style.bar(color = '#84A9AC',\n                      subset = ['Accuracy','Loss'])","f849e401":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = acc_loss_df['Epoch'],\n                         y = acc_loss_df['Accuracy'],\n                         mode='lines+markers',\n                         name='Accuracy'))\n\nfig.add_trace(go.Scatter(x = acc_loss_df['Epoch'],\n                         y = acc_loss_df['Loss'],\n                         mode='lines+markers',\n                         name = 'Loss'))\n\nfig.update_layout(title = {'text': \"<b>Training Accuracy Vs Training Loss<\/b>\\n\",\n                           'xanchor': 'center',\n                           'yanchor': 'top',\n                           'y':0.9,'x':0.5,},\n                  xaxis_title=\"Epoch\",\n                  yaxis_title = \"Accuracy \/ Loss\",\n                  title_font = dict(size = 20))\n\nfig.layout.template = 'plotly_dark'\n\nfig.show()","04fff662":"loss, acc = model.evaluate(X_test, Y_test)","7d797dbf":"print(f\"Accuracy on unseen data is: { np.round(acc, 2) }\")\nprint(f'Loss on unseen data is: { np.round(loss, 2) }')","60ba9bed":"prediction = model.predict(X_test)\nprediction = np.argmax(prediction, axis = 1)","7a732a07":"print(accuracy_score(Y_test[['YES']], prediction))","57d1832d":"print(classification_report(Y_test[['YES']], prediction))","8983e8b9":"<a id=\"8\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Visualization<\/p>","2568a6f9":"**Checking unique values in `ethnicity` after fixing problems**","a46f7ee8":"**Only `age` feature has 2 missing values**","79ba5ff2":"<a id=\"10.4\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Training Model<\/p>\n","571b2870":"<a id=\"9.3\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">OneHotEncoding of Categorical features<\/p>\n","817a1d17":"<a id=\"10.2\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Checking summary of Model<\/p>\n","d46f10c0":"<a id=\"8.4\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Gender Counts of ASD Patients<\/p>\n","b01aab1f":"<a id=\"6\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Checking for NaN values<\/p>","ef85ceb2":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Reading Data<\/p>","5b851311":"<a id=\"7\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Checking unique values in Categorical feature<\/p>","64273eb8":"**Missing values are now imputed**","ef79d4a8":"<a id=\"10\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Creating ANN Model<\/p>","765cdb6c":"**Checking unique values in `relation` after fixing problems**","86ba6d65":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Statistical information of data<\/p>","dce296c0":"<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Record which has maximum value in Age<\/p>","a8d2aaa8":"**Replacing `?` in `relation` with mode of relation**","2c24ad31":"**383 age is outlier so dropping it**","11dcc581":"**In `ethnicity` feature, \"Others\" and \"others\" are same thing but it is considered different because one is in small case and other is in letter case. So fixing this.**","f4bd4036":"<a id=\"10.3\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Visualizing Model Layers<\/p>\n","7aab5c79":"![Autistic](https:\/\/images.indianexpress.com\/2018\/03\/autism-759.jpg)","13710277":"<a id=\"1\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Importing Libraries<\/p>\n","03773335":"<a id=\"4\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Meta information of dataframe<\/p>","c9ea6809":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">\ud83d\udccb TABLE OF CONTENTS<\/p>   \n\n\n* [1. Importing Libraries](#1)\n    \n* [2. Reading Data](#2)\n    \n* [3. Feature Description](#3)\n    \n* [4. Meta Information of Dataframe](#4)\n    \n    * [4.1- Shape of Dataframe](#4.1)\n    \n    * [4.2- Datatype of Each feature](#4.2)\n    \n    \n* [5. Statistical information of data](#5) \n    \n* [6. Checking for NaN values](#6)\n    \n    * [6.1 Imputing NaN values in `Age`](#6.1)\n   \n    \n* [7. Checking unique values in Categorical features](#7)\n    \n    * [7.1 Replacing invalid value in `ethnicity`](#7.1)\n    \n    * [7.2 Replacing invalid value in `relation`](#7.2)\n    \n\n* [8. Visualization](#8)\n    \n    * [8.1 Counts of Males and Females in Data](#8.1)\n    \n    * [8.2 Autism Spectrum Disorder Counts](#8.2)\n    \n    * [8.3 Average age of Males and Females](#8.3)\n    \n    * [8.4 Gender Counts of ASD Patients](#8.4)\n    \n    * [8.5 Counts of ASD Patients Country Wise](#8.5)\n    \n    \n    \n* [9. Preprocessing data for Classification model](#9)\n    \n    * [9.1 Dropping Unwanted columns](#9.1)\n    \n    * [9.2 Splitting Data in X and Y](#9.2)\n    \n    * [9.3 OneHotEncoding of Categorical features](#9.3)\n    \n    * [9.4 Splitting data in Train and Test](#9.4)\n    \n    \n* [10 Creating ANN Model](#10)\n    \n    * [10.1 Compiling Model](#10.1)\n    \n    * [10.2 Summary of Model](#10.2)\n    \n    * [10.3 Visualizing Model Layers](#10.3)\n    \n    * [10.4 Training Model](#10.4)\n    \n* [11 Visualize Model Accuracy & Loss](#11)\n    \n* [12 Evaluating Model](#12)\n    \n* [13 Confusion Matrix](#13)\n    \n* [14 Classification Report](#14)\n    \n* [15 End](#15)\n    \n\n    \n    \n    \n\n    \n    \n    \n    \n\n\n    \n    \n    \n    \n    \n    \n    \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    ","6c3cfde5":"<a id=\"12\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Evaluating Model<\/p>\n","a6ba8999":"<a id=\"4.2\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Datatype of Each Feature<\/p>","497a7028":"<a id=\"7.1\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Replacing invalid value in ethnicity<\/p>\n","4e729dab":"<a id=\"9.1\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Dropping Unwanted columns<\/p>\n","4180ac64":"<a id=\"8.2\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Autism Spectrum Disorder Counts<\/p>\n","5e1e1d10":"<a id=\"9.2\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Splitting data in X and Y<\/p>\n","b2ee894a":"<a id=\"3\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Features Description<\/p>","58c5a3e2":"<a id=\"8.1\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Counts of Males to Females in dataset<\/p>\n","aeadf621":"<a id=\"8.5\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Counts of ASD Patients Country Wise<\/p>\n","1d1bed18":"<a id=\"9\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Preprocessing data for Classification model<\/p>","458ce0ce":"<a id=\"9.4\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Splitting data in train and test<\/p>\n","2e447954":"<a id=\"4.1\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Shape of DataFrame<\/p>","20eb8a03":"<a id=\"11\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Visualize Model Accuracy & Loss<\/p>\n","f4dcc08e":"<a id=\"15\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:130%;text-align:center;border-radius:10px 10px;\">I Hope you like this kernel. If so, don't forget to Upvote \ud83d\ude0a<\/p>","f461b58e":"<a id=\"6.1\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Imputing NaN values in age with mean of age<\/p>\n","b8102d2c":"<a id=\"7.2\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Replacing invalid value in relation<\/p>\n","347f7e06":"<a id=\"13\"><\/a>\n# <p style=\"background-color:#3B6978;font-family:newtimeroman;color:#FFF9ED;font-size:150%;text-align:center;border-radius:10px 10px;\">Classification Report<\/p>","93ed025c":"<a id=\"8.3\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Average age of males and females<\/p>\n","15b23a0d":"|Feature | Description\n|------|------------\n| index | The participant\u2019s ID number\n|AX_Score|Score based on the Autism Spectrum Quotient (AQ) 10 item screening tool [AQ-10](https:\/\/docs.autismresearchcentre.com\/tests\/AQ10.pdf)\n|age|Age in years\n|gender| Male or Female\n|ethnicity|Ethnicities in text form\n|jaundice|Whether or not the participant was born with jaundice?\n|autism|Whether or not anyone in tbe immediate family has been diagnosed with autism?\n|country_of_res|Countries in text format\n|used_app_before|Whether the participant has used a screening app\n|result|Score from the AQ-10 screening tool\n|age_desc|Age as categorical\n|relation|Relation of person who completed the test\n|Class\/ASD|Participant classification\n","aa925070":"**`ethnicity` and `relation` contains some invalid values**","2bb219f0":"<a id=\"10.1\"><\/a>\n<p style=\"background-color:#84A9AC;font-family:newtimeroman;color:#FFF9ED;font-size:120%;text-align:center;border-radius:20px 80px;\">Compiling Model<\/p>\n","35085335":"#### **27% people are ASD patient in dataset**"}}