{"cell_type":{"d38f1246":"code","3eaf7474":"code","abbecc41":"code","4c36aeee":"code","0b231c48":"code","a6d0fd45":"code","1ce7f811":"code","33f8206f":"code","c1c7b887":"code","c4f46268":"code","a337b85c":"code","103f9fe6":"code","08a5cc30":"code","91f14efe":"code","d2c7f6b7":"code","1ff22c51":"code","d74ead1e":"code","3d5e1abd":"code","56e7564e":"code","5a6663e9":"code","c850268b":"code","c34dca25":"code","bc63d16e":"markdown","9e6232c0":"markdown","e31a3fa0":"markdown","0153ae26":"markdown","f9e52e98":"markdown","68dcdfcc":"markdown","147acb29":"markdown","39987654":"markdown","26a75327":"markdown","68fa52cb":"markdown","f91eb635":"markdown","80f62c7d":"markdown","cc064e90":"markdown","f1844d30":"markdown","0cc3458c":"markdown","c6f9aac1":"markdown","ed9f98af":"markdown","b33f09ce":"markdown","88e85cb7":"markdown","7c80e565":"markdown","8a5b084b":"markdown","94384da3":"markdown","6070f40e":"markdown"},"source":{"d38f1246":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3eaf7474":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly import subplots\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nfrom sklearn import metrics\nfrom scipy import stats\n\nfrom copy import deepcopy","abbecc41":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]\n\nplt.rcParams['axes.facecolor'] = primary_bgcolor\n\ncolors = [primary_blue, primary_blue2, primary_blue3, primary_grey, primary_black, primary_bgcolor, primary_green]\nsns.palplot(sns.color_palette(colors))","4c36aeee":"df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndescriptions = df.loc[0, :]\ndf = df.loc[1:, :]\ndf.head()","0b231c48":"#Create proffesionals df\nq23_columns = [column for column in df.columns if 'Q23' in column]\ndf_prof = df[df[q23_columns].isnull().sum(axis=1) != len(q23_columns)]\ndf.loc[df[q23_columns].isnull().sum(axis=1) != len(q23_columns), 'Prof_Stud'] = 'Professional'\n\n# Create Students df\ndf_stud = df[df['Q5'] == 'Student']\ndf.loc[df['Q5'] == 'Student', 'Prof_Stud'] = 'Student'","a6d0fd45":"q = pd.DataFrame(df['Q1'].value_counts()).reset_index().sort_values('index')\nq.columns = ['ages', 'value']\n\nfig = go.Figure(go.Scatter(\n    x = q['ages'],\n    y = q['value'],\n    mode = 'lines+markers+text',\n    text = q['value'],\n    textposition=\"top right\",\n))\nfig.update_layout(\n    xaxis={'categoryorder':'category ascending'}\n)\nfig.show()","1ce7f811":"def generate_feature_resume(df, feature):\n    \n    plot_title = f\"<span style='font-size:30px; font-family:Serif'><b>{feature.capitalize()}<\/b> resume<\/span>\"\n    (osm, osr), (slope, intercept, r) = stats.probplot(df[feature], plot=None)\n    \n    q1_value = train_df[feature].quantile(0.25)\n    mean_value = train_df[feature].mean()\n    fig2 = ff.create_distplot([df[feature]], [feature], colors=[primary_blue],\n                             bin_size=.05, show_rug=False)\n\n    fig = make_subplots(\n        rows=3, cols=2,\n        specs=[\n            [{\"rowspan\": 2}, {\"rowspan\": 2}],\n            [None, None],\n            [{\"colspan\": 2}, None]\n        ],\n        subplot_titles=(\n            \"Quantile-Quantile Plot\",\n            \"Box Plot\",\n            \"Distribution Plot\"\n        )\n    )\n\n    fig.add_trace(go.Scatter(\n        x=osm,\n        y=slope*osm + intercept,\n        mode='lines',\n        line={\n            'color': '#c81515',\n            'width': 2.5\n        }\n\n    ), row=1, col=1)\n    \n    ## QQ-Plot\n    fig.add_trace(go.Scatter(\n        x=osm,\n        y=osr,\n        mode='markers',\n        marker={\n            'color': primary_blue\n        }\n    ), row=1, col=1)\n\n    ## Box Plot\n    fig.add_trace(go.Box(\n        y=df[feature], \n        name='',\n        marker_color = primary_blue\n    ), row=1, col=2)\n\n    ## Distribution plot\n    fig.add_trace(go.Scatter(\n        fig2['data'][1],\n        line=dict(\n            color=primary_blue, \n            width=1.5,\n        ),\n        fill='tozeroy'\n    ), row=3, col=1)\n    \n    ## InterQuartile Range (IQR)\n    fig.add_vrect(\n        x0=df[feature].quantile(0.25), \n        x1=df[feature].quantile(0.75), \n        annotation_text=\"IQR\", \n        annotation_position=\"top left\",\n        fillcolor=primary_grey, \n        opacity=0.25, \n        line_width=2,\n        row=3, col=1,\n    )\n    \n    ## Mean line\n    fig.add_vline(\n        x=mean_value,\n        line_width=2, \n        line_dash=\"dash\", \n        line_color=primary_black,\n        annotation_text=\"Mean\", \n        annotation_position=\"bottom right\",\n        row=3, col=1,\n    )\n    \n    fig.add_annotation(\n        xref=\"x domain\", yref=\"y domain\",\n        x=0.98, y=0.98,\n        text=f\"<span style='font-family:Serif>Skew: %.2f<\/span>\"%(df[feature].skew()),\n        showarrow=False,\n        bordercolor=primary_black,\n        borderwidth=1, borderpad=2,\n        row=3, col=1,\n    )\n    \n    fig.update_layout(\n        showlegend=False, \n        title_text=plot_title,\n        height=720,\n    )\n\n    fig.show()","33f8206f":"q = df['Q2'].value_counts().sort_values()\n\ncolors = px.colors.qualitative.Plotly\ncolors = list(reversed(['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A']))\n\nfig = go.Figure(go.Bar(\n    x = q.values,\n    y = q.index,\n    text = q.values,\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color = colors,\n    orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.8,\n)\nfig.show()","c1c7b887":"q = pd.DataFrame(df['Q3'].value_counts()[:10].sort_values(ascending=False)).reset_index()\nq.loc[q['index'] == 'United States of America', 'index'] = 'United States'\nq.loc[q['index'] == 'United Kingdom of Great Britain and Northern Ireland', 'index'] = 'United Kingdom'\n\nregions_df = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\nq = q.merge(regions_df, left_on='index', right_on='country', how='left')\n\nfig = go.Figure(go.Bar(\n    x = q['index'],\n    y = q['Q3'],\n    text = q.values,\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n))\nfig.update_traces(\n    marker_color='rgb(158,202,225)', \n    marker_line_color='rgb(8,48,107)',\n    marker_line_width=1.5, \n    opacity=0.6,\n)\nmax_y_val = q['Q3'].max()\nfor country, flag_url, ppl_vac in zip(q['index'], q['image_url'], q['Q3']):\n    if not flag_url or not isinstance(flag_url, str):\n        continue\n    fig.add_layout_image(\n        dict(\n            source=flag_url,\n            x=country, \n            y=ppl_vac + 0.1 * max_y_val,\n            sizex=0.5, \n            sizey=0.08 * max_y_val,\n            xanchor=\"center\", yanchor=\"bottom\",\n            sizing='stretch',\n            xref='x',\n            yref=\"y\",\n        ),\n    )\n\nfig.update_yaxes(range=[0, max_y_val + 0.2*max_y_val])\nfig.update_layout(\n    title = 'Top 10: Residence country',\n)\nfig.show()","c4f46268":"q = df['Q4'].value_counts()[:10]\n\nfig = go.Figure(go.Pie(\n    labels = q.index,\n    values = q.values,\n    # hole=.1,\n    pull=[0.1, 0, 0, 0]\n))\nfig.update_traces(\n    hoverinfo='label+percent', \n    textinfo='value', \n    textfont_size=15,\n    marker=dict(\n        line=dict(color='#000000', width=1)\n    )\n)\nfig.update_layout(\n    title = 'Kagglers education',\n)\nfig.show()","a337b85c":"q = df['Q5'].value_counts()\n\ncolors = px.colors.qualitative.Light24\n\nfig = go.Figure(go.Bar(\n    y = q.values,\n    x = q.index,\n    text = q.values,\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color = colors,\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.8,\n)\nfig.show()","103f9fe6":"# I want to thank @spitfire2nd for the idea of this plot and some code guidelines\n# A guide for this kind of plot, here: https:\/\/plotly.com\/python\/horizontal-bar-charts\/\n\nfields = df[\"Q5\"].unique()\neducation_df = pd.DataFrame()\n\ncolours_coffe = [\"#a2885e\", \"#e9cf87\", \"#f1efd9\", \"#8eb3aa\", \"#235f83\", primary_blue3]\n\nfor field in fields:\n    education_df[field] = df[df[\"Q5\"] == field][\"Q4\"].value_counts()\neducation_df = education_df.dropna(axis=1, how='all')\neducation_df = education_df.drop('I prefer not to answer')\neducation_df = education_df \/ education_df.sum()\n\neducation_df = education_df.reindex([\"Doctoral degree\", \"Master\u2019s degree\", \n                                     \"Professional degree\", \"Bachelor\u2019s degree\", \n                                     \"Some college\/university study without earning a bachelor\u2019s degree\", \n                                     \"No formal education past high school\"])\n\n# Adding spacing and formatting directly to the column names.\n#education_df.columns = [(\"<span style='font-size:14px; font-family:Helvetica'>\"+label + \"<\/span>  \") for label in education_df.columns]\n\ntraces = []\nfor i, field in enumerate(education_df.index):\n    traces.append(go.Bar(\n        y = education_df.columns,\n        x = education_df.loc[field],\n        name = field,\n        marker = dict(color = colours_coffe[i]),\n        orientation = \"h\"\n    ))\n\nlarge_title_format = \"<span style='font-size:30px; font-family:Times New Roman'>What educational qualifications do I need?<\/span>\"\nlayout = dict(\n    title = dict(text=large_title_format, x=0.5, y=0.963),\n    xaxis = dict(\n        title=\"<span style='font-size:13px; font-family:Helvetica'><b>Color Key: <\/b>Educational qualifications of professionals<\/span>\", \n        side=\"top\",\n        title_standoff=0, \n        domain=[0,0.95], \n        showticklabels = False\n    ),\n    xaxis2 = dict(domain=[0, 1], tickformat = '%'),\n    yaxis = dict(domain=[0.85,1], showticklabels = False),\n    yaxis2={\n        'categoryorder':'array',\n        'categoryarray': education_df.loc[\"Doctoral degree\"].sort_values(ascending=True).keys(),\n        'domain':[0,0.83]\n    },\n    barmode = \"stack\",\n    bargap = 0.05,\n    showlegend = False,\n    width = 700,\n    height = 600,\n    # plot_bgcolor = \"#fff\"\n)\n\n# Adding a separate subplot that will act as a color key\ncolorscale = ff.create_annotated_heatmap(\n    z=[[1,2,3,4,5,6]],\n    annotation_text = [[text \n                       for text in [\"Doctoral<br>degree\",\"Master's<br>degree\",\"Professional<br>degree\",\"Bachelor's<br>degree\",\"Education<br>without<br>degree\",\"High school<br>education\"]\n                      ]],\n    colorscale= [\n        [0.000,\"#a2885e\"],[0.166,\"#a2885e\"],\n        [0.166,\"#e9cf87\"],[0.333,\"#e9cf87\"],\n        [0.333,\"#f1efd9\"],[0.500,\"#f1efd9\"],\n        [0.500,\"#8eb3aa\"],[0.666,\"#8eb3aa\"],\n        [0.666,\"#235f83\"],[0.833,\"#235f83\"],\n        [0.833,primary_blue3],[1.000,primary_blue3],\n    ],\n    font_colors = [\"white\", \"white\", \"black\", \"white\", \"white\", \"white\"],\n    xgap = 1.5,\n    showscale = False\n)\n\nfig = subplots.make_subplots(\n    rows=2, \n    cols=1, \n    shared_yaxes=True, \n    shared_xaxes=False, \n    horizontal_spacing=0.02, \n    vertical_spacing=0.01\n)\n\nfig.append_trace(colorscale.data[0],1,1); \n\nfor trace in traces:\n    fig.add_trace(trace, 2, 1)\n\n# Workaround to show annotations with ff.create_annotated_heatmap() subplots.\nannot1 = list(colorscale.layout.annotations)\nfor k in range(len(annot1)):\n    annot1[k]['xref'] = 'x'\n    annot1[k]['yref'] = 'y'\nfig.update_layout(annotations=annot1) \n\nfig.update_layout(layout)\nfig.show()","08a5cc30":"q = df['Q6'].value_counts()\n\nfig = go.Figure(go.Pie(\n    labels = q.index,\n    values = q.values,\n    hole=.3,\n    # pull=[0.2, 0, 0, 0]\n))\nfig.update_traces(\n    hoverinfo='value+percent', \n    textinfo='label+percent', \n    textfont_size=13,\n    marker=dict(\n        line=dict(color='#000000', width=.7)\n    )\n)\nfig.update_layout(\n    title = 'Kagglers programming experience',\n)\nfig.show()","91f14efe":"q = {}\nfor i in range(1,13):\n    q.update(dict(df[f\"Q7_Part_{i}\"].value_counts()))\nq = pd.DataFrame(q.items(), columns = ['languague', 'counts'])\nq['colour'] = px.colors.qualitative.Light24[:12]\n\ntop_lang = q['languague'][:5]\n\nfig = go.Figure(go.Bar(\n    y = q['counts'],\n    x = q['languague'],\n    text = q['counts'],\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color = q['colour'],\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nfig.update_layout(\n    xaxis={'categoryorder':'total descending'}\n)\nfig.show()","d2c7f6b7":"q7_columns = [column for column in df.columns if 'Q7' in column]\n\ndf_q7 = pd.DataFrame()\n\nfor column in q7_columns:\n    lang = df[column].dropna().unique()[0]\n    df_q7.loc['Student', lang] = df_stud[column].notnull().sum() \/ len(df_stud)\n    df_q7.loc['Professional', lang] = df_prof[column].notnull().sum() \/ len(df_prof)\n\nfig = go.Figure()\n\nfor i, category in enumerate(df_q7.index):\n    fig.add_trace(go.Bar(\n        y = df_q7.columns,\n        x = df_q7.loc[category],\n        orientation = 'h',\n        marker = dict(color = [primary_blue2, primary_blue][i]),\n        text = np.round(df_q7.loc[category] * 100),\n        textposition = 'auto',\n        texttemplate = \"%{text}%\",\n        name = category,\n    ))\n    \n\nfig.update_layout(\n    title = 'Which languague should I Learn?',\n    margin = dict(t=150),\n    legend=dict(#title = \"<span style='font-size:16px'>  Legend<\/span>\",\n                orientation=\"h\",\n                yanchor='top',xanchor='center',\n                y= 1.06,x=0.5,\n                font=dict(size= 16),\n                traceorder='reversed',\n#                 bordercolor=primary_grey,\n#                 borderwidth=1, \n#                 bgcolor = \"#f4f0ea\"\n               ),\n    yaxis={'categoryorder':'array',\n           'categoryarray': df_q7.T.sort_values('Professional', ascending=True).index\n          },\n    xaxis=dict(side=\"top\",showgrid=False, tickformat=\"%\"),\n    barmode = \"group\",\n    bargap = 0.05,\n    bargroupgap =0.1,\n    width = 800,\n    height= 1000,\n)\nfig.show()","1ff22c51":"q8 = pd.DataFrame(df['Q8'].value_counts()).reset_index()\nq8.columns = ['languague', 'counts']\n\nq = pd.merge(q, q8, on=[\"languague\"])\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = q['counts_y'],\n    x = q['languague'],\n    text = q['counts_y'],\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color = q['colour'],\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nfig.update_layout(\n    xaxis={'categoryorder':'total descending'}\n)\nfig.show()","d74ead1e":"usage_colours = [primary_blue3 for _ in range(len(q['languague']))]\nusage_colours[0] = primary_blue\nrecom_colours = [primary_grey for _ in range(len(q['languague']))]\nrecom_colours[0] = primary_blue2\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y = q['counts_y'],\n    x = q['languague'],\n    name = 'Recommendation (Single-Choice)',\n    marker_color = recom_colours,\n    # orientation='h',\n))\nfig.add_trace(go.Bar(\n    y = q['counts_x'],\n    x = q['languague'],\n    name = 'Real Usage (Multi-Choice)',\n    marker_color = usage_colours,\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\n# Rectangle to highlight range\nfig.add_vrect(\n    x0=-0.5, x1=2.6,\n    fillcolor=\"#e9cf87\",\n    layer=\"below\", \n    opacity=0.25, \n    line_width=0,\n    xref = 'paper'\n)\nfig.add_annotation(\n    dict(\n        x=0.08,\n        y=0.7,\n        text=\"  Top 3 languagues:<br><b>Python, SQL, R<\/b>\",\n        showarrow = False,\n        yref = 'paper',\n        xref = 'paper',\n    )\n)\n\nfig.update_layout(\n    xaxis={'categoryorder':'total descending'},\n    legend=dict(title=\"  Color Key:\", yanchor='top',xanchor='right', x=0.98, y=0.95, font=dict(family=\"Tahoma\", size= 14),traceorder='normal', bordercolor=\"#4d4d4d\", borderwidth=0.5),\n)\nfig.show()","3d5e1abd":"q = {}\nfor i in range(1,11):\n    q.update(dict(df[f\"Q9_Part_{i}\"].value_counts()))\nq = pd.DataFrame(q.items(), columns = ['ide', 'counts'])\nq = q.sort_values('counts')\n\nq['colour'] = [primary_grey for _ in range(len(q['ide']))]\nq.loc[0, 'colour'] = primary_blue\nq.loc[1:3, 'colour'] = primary_blue2\n\nfig = go.Figure(go.Bar(\n    x = q['counts'],\n    y = q['ide'],\n    marker_color = q['colour'],\n    orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nfig.update_layout(\n    yaxis={'categoryorder':'total ascending'}\n)\nfig.show()","56e7564e":"q = {}\nfor i in range(1,14):\n    q.update(dict(df[f\"Q10_Part_{i}\"].value_counts()))\nq = pd.DataFrame(q.items(), columns = ['ide', 'counts'])\nq = q.sort_values('counts', ascending=False)\n# Calculate the percents\nq['counts'] = q['counts'] \/ q['counts'].sum()\n# Delete spaces before and after the hubs names\nq['ide'] = q['ide'].str.strip()\n\ncloud_notebooks_hubs = ['Azure Notebooks', 'IBM Watson Studio', 'Amazon Sagemaker Studio',\n                        'Amazon EMR Notebooks', 'Databricks Collaborative Notebooks', \n                        'Paperspace \/ Gradient', 'Code Ocean']\n\n#Add new column\nq.loc[len(q)] = ['Other', q[q['ide'].isin(cloud_notebooks_hubs)].sum()['counts']]\n\n# Remove cloud hubs\nq = q[~q['ide'].isin(cloud_notebooks_hubs)]\n\nq = q.reset_index()\n\nq['colour'] = [primary_grey for _ in range(len(q['ide']))]\nq.loc[0, 'colour'] = primary_blue\nq.loc[1:2, 'colour'] = primary_blue2\n\nfig = go.Figure(go.Bar(\n    x = q['counts'],\n    y = q['ide'],\n    marker_color = q['colour'],\n    orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nmain_annot_format = \"<span style='font-size:12px; font-family:Tahoma;'><b> %s <\/b><br> %s<\/span>\"\nfig.add_annotation(dict(\n        x=0.65,\n        y=0.22,\n        xref = \"paper\",\n        yref = \"paper\",\n        text= main_annot_format % (\"Included in others:                                      \",\n                                   \"\"\"1. Azure Notebooks - 3.4%                           <br>2. IBM Watson Studio - 3.3%                       <br>3. Amazon Sagemaker Studio - 1.9%            <br>4. Databricks Collaborative Notebooks - 1.6%<br>5. Amazon EMR Notebooks - 1.0%               <br>6. Paperspace \/ Gradient - 0.7%                  <br>7. Code Ocean - 0.4%                                \"\"\"),\n        ax=0, ay=0\n))\nfig.update_layout(\n    yaxis={'categoryorder':'total ascending'},\n    xaxis=dict(side=\"top\", zerolinecolor = \"#4d4d4d\", zerolinewidth = 1, gridcolor=\"#e7e7e7\",tickformat=\"%\"),\n)\nfig.show()","5a6663e9":"q = df.groupby(['Prof_Stud', 'Q11']).agg({'Q1': 'count'}).reset_index()\nq.columns = ['Prof_Stud', 'Q11', 'counts']\n\nmapper = {\n    'A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)': 'Cloud Platform',\n    'A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)': 'DeepLearning WS',\n    'A personal computer or laptop': 'Laptop',\n    'None': 'None',\n    'Other': 'Other',\n}\n\nq['Q11'] = q['Q11'].map(mapper)\n\nfig = px.bar(q, x='Q11', y='counts', color='Prof_Stud')\nfig.update_layout(barmode='group')\nfig.show()","c850268b":"fig = px.sunburst(q, path=['Prof_Stud', 'Q11'], values='counts')\nfig.show()","c34dca25":"q12_columns = [column for column in df.columns if 'Q12' in column]\nq = {}\n\nfor column in q12_columns:\n    q.update(dict(df[column].value_counts()))\n\nq = pd.DataFrame(q.items(), columns = ['hardware', 'counts'])\n\nfig = go.Figure(go.Pie(\n    labels = q['hardware'],\n    values = q['counts'],\n    hole=.3,\n    # pull=[0.2, 0, 0, 0]\n))\nfig.update_traces(\n    hoverinfo='value+percent', \n    textinfo='label+percent', \n    textfont_size=13,\n    marker=dict(\n        line=dict(color='#000000', width=.7)\n    )\n)\nfig.update_layout(\n    title = 'Kagglers hardware selection',\n    yaxis={\n        'categoryorder':'array',\n        'categoryarray': ['GPUs', 'TPUs', 'Other', 'None']\n    }\n)\nfig.show()","bc63d16e":"## Q4 & Q5","9e6232c0":"As we can see, Google Colab and Kaggle notebooks are the most used platforms.\n* Colab is a really powerfull tool because you can edit the notebook simultaneusly with the team mates, so the first position is logic. Even more, its free and has some free tier TPU and GPU accelerators.\n* Kaggle notebooks are higher too because the survey is from kaggle and almost all the participants know and use it. So it's a little bit biased","e31a3fa0":"In this notebook i will try to show a Graph Story about all the questions and answers in this dtaset.\n\nThe main flow will be:\n1. Show the answers of each question\n2. Show some sunburst plots and charts about the relation between some answers\n3. Try to conclude","0153ae26":"# Q2: What is your gender?","f9e52e98":"# Q10: Which of the following hosted notebook products do you use on a regular basis?\n\nMulti choice question","68dcdfcc":"As we can see in the scatter plot, it seems to be a normal distribution with mean the mean arround 17 years.\n\nIts obius that there some kagglers under 18 but probably the minority. Also we can see that there is a huge number of persons from 40 years old and above, which is a really good notice :)","147acb29":"# Q9: Which of the following integrated development environments (IDE's) do you use on a regular basis?\n\nMulti choice question","39987654":"# Q5: Select the title most similar to your current role","26a75327":"# Q3: In which country do you currently reside?","68fa52cb":"# Q6: For how many years have you been writing code and\/or programming?","f91eb635":"It seems that India is the country with the highest number of kagglers ahead of EEUU. Its really nice to see that so many countries are participating in this community. This make the community better and more variated! (Here a kaggler from Spain) ","80f62c7d":"# Q1: What is your age (# years)?","cc064e90":"# Q8: What programming language would you recommend an aspiring data scientist to learn first?","f1844d30":"# Q7: What programming languages do you use on a regular basis? (Select all that apply)","0cc3458c":"# Q12: Which types of specialized hardware do you use on a regular basis?\n(Select all that apply)","c6f9aac1":"## Q7 & Q8\n\nIt's obvious that there is going to be higher usage numbers than recomendation as long as recommendation is a single choice question and usage is a multi-choice question. But as we can see the difference is much lower in **Python** than in the other lenaguagues. ","ed9f98af":"# Q4: What is the highest level of formal education that you have attained or plan to attain within the next 2 years?","b33f09ce":"# Q11: What type of computing platform do you use most often for your data science projects?","88e85cb7":"As this is mostly a Scientific community, most of the community have a masters or bachelor's degree. ","7c80e565":"![kaggle-python.png](attachment:kaggle-python.png)\n\n<p style=\"font-family:newtimeroman; font-size:200%; text-align:center;\"><b>This kernel is part of a Plotly guide that I am developing at the moment and it's focused showing the main tips and tricks for the Data Analysis.<\/b><\/p>\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/eda-beginner-to-expert-plotly'>Part I: Netflix Analysis<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/video-games-eda-and-visualization'>Part II: Video Games Analysis (this one)<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/covid-progression-a-plotly-animated-guide'>Part III: COVID-19 World Vaccination Progress<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/kaggle-survey-a-graph-story'><b>Part IV: Kaggle Survey: A Graph Story<\/b><\/a><\/i><\/p>","8a5b084b":"# Kaggle Survey \ud83d\udcca A Graph Story","94384da3":"# Q7: Languague based on Studente \/ Professional","6070f40e":"As it happens in the engineering dregrees, there are more mean than women."}}