{"cell_type":{"a482717b":"code","7f2f092e":"code","f0bf8e2c":"code","c944c7d9":"code","fef38343":"code","8e4c90fd":"code","6f31d7fb":"code","d92bf9d8":"code","a469e3f2":"code","62ffd169":"code","48e07f57":"code","38e7ad81":"code","61a0b3be":"code","ef70e842":"code","6340a080":"code","28a96195":"code","c12152ca":"code","c46e0225":"code","8f9b62af":"code","a1037324":"code","f4f2d3a0":"code","9b4aba05":"code","a10269a6":"code","de0487fc":"code","60d8cf3c":"code","393ac423":"code","ab14d1ae":"code","5c4af170":"code","51f3db5b":"code","db59256c":"code","f00834df":"code","ff309bff":"code","435e1901":"code","ea355e8b":"code","e2415cff":"code","3c187c7c":"code","75551f7a":"code","bce351b8":"code","69839896":"code","f1aa4545":"code","855838c5":"markdown","af3126d3":"markdown","3a53777c":"markdown","da8501e8":"markdown","980ed761":"markdown","fe36bbb2":"markdown","6c2c4f73":"markdown","dd3915b2":"markdown","4ca8ce7e":"markdown","abded93b":"markdown","4302e16a":"markdown","929cad7b":"markdown","9fffadb3":"markdown","1b156a35":"markdown","58a2354c":"markdown","bbb3bbd3":"markdown","5d67bc5c":"markdown","33e0cd77":"markdown","5b7d64bc":"markdown","57871fcc":"markdown","ef3712ed":"markdown","414533ee":"markdown","f55d2c0e":"markdown","89d1ff38":"markdown","02b95290":"markdown","092dbfe7":"markdown","9edb131e":"markdown"},"source":{"a482717b":"'''\n\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e25\u0e37\u0e2d\u0e01 Configuration \u0e2b\u0e25\u0e31\u0e01\u0e46 \u0e02\u0e2d\u0e07 Deep Learning Model \u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48\u0e04\u0e23\u0e31\u0e1a\n---------------------------------------------------------------\n\nN_SPLITS : \u0e04\u0e48\u0e32 K \u0e43\u0e19 Stratified K-Folds, \u0e42\u0e14\u0e22\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e25\u0e37\u0e2d\u0e01 5 \u0e2b\u0e23\u0e37\u0e2d 10 \n\nBATCH_SIZE : \u0e08\u0e33\u0e19\u0e27\u0e19 Mini-batch \u0e43\u0e19 forward \u0e41\u0e25\u0e30 backward propagation\n\nEPOCHS : \"\u0e08\u0e33\u0e19\u0e27\u0e19\u0e23\u0e2d\u0e1a\" \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e43\u0e2b\u0e49 Model \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\n\nHID : \u0e08\u0e33\u0e19\u0e27\u0e19 Hidden Units \u0e43\u0e19 LSTM\n\nLR : learning rate \u0e2b\u0e23\u0e37\u0e2d \u0e2d\u0e31\u0e15\u0e23\u0e32\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e02\u0e2d\u0e07 LSTM\n\nSIGNAL_TYPE : \u0e40\u0e25\u0e37\u0e2d\u0e01\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30 input \u0e43\u0e2b\u0e49 model \u0e42\u0e14\u0e22\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e14\u0e49 3 \u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e04\u0e37\u0e2d\n  1) 'raw' -- signal input \u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23 denoising process\n  2) 'denoised' -- signal \u0e16\u0e39\u0e01 denoised \u0e14\u0e49\u0e27\u0e22 wavelet transform\n  3) 'both' -- \u0e19\u0e33\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07\u0e17\u0e31\u0e49\u0e07 1) \u0e41\u0e25\u0e30 2) \u0e21\u0e32\u0e23\u0e27\u0e21\u0e01\u0e31\u0e19\n[\u0e16\u0e49\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e1c\u0e34\u0e14\u0e44\u0e1b\u0e08\u0e32\u0e01 3 options \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e0b\u0e47\u0e15\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 option 'both' \u0e42\u0e14\u0e22 default \u0e04\u0e23\u0e31\u0e1a]\n  \nFEATURE_TIME_STEPS : \u0e08\u0e33\u0e19\u0e27\u0e19 time steps (\u0e08\u0e33\u0e19\u0e27\u0e19\u0e01\u0e23\u0e2d\u0e1a\u0e2a\u0e35\u0e41\u0e14\u0e07\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19) \u0e02\u0e2d\u0e07 signal \n\u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23 pre-process \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 vector \u0e41\u0e25\u0e49\u0e27\n\nOption \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15 : ReduceOnPlateau -- LR_FACTOR, PATIENCE\n'''\nN_SPLITS = 5\nBATCH_SIZE = 128\nEPOCHS = 50\nHID = 64\nLR = 0.001\n\n# SIGNAL_TYPE \u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e14\u0e49 3 options \u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a : 'raw', 'denoised', 'both'\nSIGNAL_TYPE = 'denoised' \nFEATURE_TIME_STEPS = 160 # \u0e16\u0e49\u0e32\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e08\u0e32\u0e01 160, \u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e14\u0e49\u0e40\u0e09\u0e1e\u0e32\u0e30 'denoised' \u0e04\u0e23\u0e31\u0e1a","7f2f092e":"'''Import functions \u0e08\u0e32\u0e01 Libraries \u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e04\u0e23\u0e31\u0e1a'''\n\nimport os \n# basic numpy, panda, matplotlib \u0e14\u0e39\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48 Workshops \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e2b\u0e19\u0e49\u0e32\u0e02\u0e2d\u0e07 ThAIKeras \u0e04\u0e23\u0e31\u0e1a\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pyarrow.parquet as pq # \u0e44\u0e1f\u0e25\u0e4c Signal \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e01\u0e47\u0e1a\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b .parq \u0e0b\u0e36\u0e48\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e42\u0e21\u0e14\u0e39\u0e25\u0e19\u0e35\u0e49\u0e2d\u0e48\u0e32\u0e19\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e04\u0e23\u0e31\u0e1a\nfrom sklearn.model_selection import StratifiedKFold # \u0e43\u0e0a\u0e49\u0e17\u0e33 Stratified K-Folds \u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e19\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\nfrom tqdm import tqdm # Processing time measurement\n\n'''Keras Modules \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e04\u0e23\u0e31\u0e1a'''\nfrom keras.layers import * # \u0e43\u0e0a\u0e49\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30 layers \u0e43\u0e19 Neural Networks\nfrom keras.models import Model # \u0e43\u0e0a\u0e49\u0e2a\u0e23\u0e49\u0e32\u0e07 Model \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e01\u0e33\u0e2b\u0e19\u0e14 layer \u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\nfrom keras import backend as K # \u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e23\u0e35\u0e22\u0e01 Tensorflow function \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48 Keras \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 function \u0e1a\u0e32\u0e07\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e27\u0e49\nfrom keras import optimizers # \u0e43\u0e0a\u0e49\u0e40\u0e23\u0e35\u0e22\u0e01 Optimization Algorithm \u0e17\u0e35\u0e48\u0e08\u0e30\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19 Neural Networks \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e21\u0e35\nfrom keras.callbacks import * # \u0e43\u0e0a\u0e49\u0e40\u0e23\u0e35\u0e22\u0e01 function \u0e0a\u0e48\u0e27\u0e22\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e08\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01 Log files \u0e41\u0e25\u0e30 save model \u0e17\u0e35\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e43\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e2a\u0e2d\u0e19","f0bf8e2c":"# \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19 constants \u0e04\u0e37\u0e2d\u0e04\u0e48\u0e32 voltage \u0e17\u0e35\u0e48\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e27\u0e31\u0e14\u0e44\u0e14\u0e49\u0e43\u0e19 1 \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35\u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\nsample_size = 800000 # \u0e2b\u0e49\u0e32\u0e21\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e48\u0e32\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e02\u0e2d\u0e07 Training Data","c944c7d9":"# \u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d function MCC \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e48\u0e07\u0e43\u0e2b\u0e49 Keras \u0e43\u0e0a\u0e49\u0e27\u0e31\u0e14\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e02\u0e2d\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\u0e40\u0e23\u0e32\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e23\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e04\u0e23\u0e31\u0e1a\ndef matthews_correlation(y_true, y_pred):\n\n    y_pred_pos = K.round(K.clip(y_pred, 0, 1))\n    y_pred_neg = 1 - y_pred_pos\n\n    y_pos = K.round(K.clip(y_true, 0, 1))\n    y_neg = 1 - y_pos\n\n    tp = K.sum(y_pos * y_pred_pos)\n    tn = K.sum(y_neg * y_pred_neg)\n\n    fp = K.sum(y_neg * y_pred_pos)\n    fn = K.sum(y_pos * y_pred_neg)\n\n    numerator = (tp * tn - fp * fn)\n    denominator = K.sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))\n\n    return numerator \/ (denominator + K.epsilon())","fef38343":"'''\u0e19\u0e35\u0e48\u0e04\u0e37\u0e2d MCC \u0e17\u0e35\u0e48 implement \u0e14\u0e49\u0e27\u0e22 Numpy (\u0e2a\u0e48\u0e27\u0e19\u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19\u0e17\u0e35\u0e48 implement \u0e14\u0e49\u0e27\u0e22 Keras) \n\u0e40\u0e23\u0e32\u0e17\u0e33 MCC version \u0e19\u0e35\u0e49\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 Keras \u0e08\u0e30\u0e40\u0e23\u0e47\u0e27\u0e01\u0e27\u0e48\u0e32\u0e21\u0e32\u0e01\u0e04\u0e23\u0e31\u0e1a'''\ndef my_mat_cor(y_true, y_pred):\n    assert y_true.shape[0] == y_pred.shape[0]\n\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    tn = np.sum((y_true == 0) & (y_pred == 0))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n\n    numerator = (tp * tn - fp * fn) \n    denominator = ((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn)) ** .5\n\n    return numerator \/ (denominator + 1e-15)\n\n","8e4c90fd":"''' Function \u0e17\u0e35\u0e48\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e04\u0e48\u0e32 threshold \u0e17\u0e35\u0e48\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e04\u0e48\u0e32 MCC \u0e2a\u0e39\u0e07\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e43\u0e19 validation set\ny_true : array \u0e02\u0e2d\u0e07 label \u0e17\u0e35\u0e48\u0e41\u0e17\u0e49\u0e08\u0e23\u0e34\u0e07\ny_proba : array \u0e02\u0e2d\u0e07 p_t (\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19) \u0e14\u0e31\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e02\u0e49\u0e32\u0e07\u0e15\u0e49\u0e19\n'''\ndef threshold_search(y_true, y_proba):\n    best_threshold = 0\n    best_score = 0\n\n    for threshold in [i * 0.01 for i in range(20,80)]:\n        score = my_mat_cor(y_true,(y_proba > threshold).astype(np.uint8))\n        if score > best_score:\n            best_threshold = threshold\n            best_score = score\n    search_result = {'threshold': best_threshold, 'matthews_correlation': best_score}\n    return search_result","6f31d7fb":"!ls ..\/input","d92bf9d8":"'''\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e25\u0e30 Class \u0e17\u0e35\u0e48\u0e42\u0e08\u0e17\u0e22\u0e4c\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e21\u0e32\u0e43\u0e2b\u0e49'''\n!ls ..\/input\/vsb-power-line-fault-detection\/","a469e3f2":"# metadata_train \u0e08\u0e30\u0e1a\u0e2d\u0e01\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e44\u0e27\u0e49 \u0e40\u0e23\u0e32\u0e21\u0e32\u0e14\u0e39\u0e01\u0e31\u0e19\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e1a\u0e49\u0e32\u0e07\ndf_train = pd.read_csv('..\/input\/vsb-power-line-fault-detection\/metadata_train.csv')\n# \u0e40\u0e0b\u0e47\u0e15\u0e48\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e20\u0e4c id_measurement, phase \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 index \u0e43\u0e19 panda, \u0e40\u0e17\u0e04\u0e19\u0e34\u0e01\u0e40\u0e25\u0e47\u0e01\u0e46 \u0e17\u0e35\u0e48\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e04\u0e49\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e23\u0e47\u0e27\u0e02\u0e36\u0e49\u0e19\ndf_train = df_train.set_index(['id_measurement', 'phase'])\ndf_train.head(9) #\u0e25\u0e2d\u0e07\u0e14\u0e39\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e01\u0e31\u0e19","62ffd169":"yy = df_train['target'].values\nprint(yy.shape)\n\n#\u0e14\u0e39\u0e27\u0e48\u0e32\u0e21\u0e35\u0e04\u0e25\u0e32\u0e2a 1 \u0e01\u0e35\u0e48\u0e15\u0e31\u0e27 \u0e41\u0e25\u0e30\u0e01\u0e35\u0e48 %\nprint(sum(yy), sum(yy)\/len(yy))","48e07f57":"!ls ..\/input\/vsb-wavelet-denoised\nparq_sample_dn = pq.read_pandas('..\/input\/vsb-wavelet-denoised\/train_dn.parquet', columns=[str(i) for i in range(0, 6)]).to_pandas()\nparq_sample = pq.read_pandas('..\/input\/vsb-power-line-fault-detection\/train.parquet', columns=[str(i) for i in range(0, 6)]).to_pandas()","38e7ad81":"'''\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e1f\u0e2a\u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e01\u0e47\u0e1a\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e20\u0e4c\u0e04\u0e23\u0e31\u0e1a (\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e20\u0e4c\u0e21\u0e35 8 \u0e41\u0e2a\u0e19\u0e41\u0e16\u0e27\u0e41\u0e17\u0e19 8\u0e41\u0e2a\u0e19\u0e04\u0e48\u0e32 voltages \u0e17\u0e35\u0e48\u0e27\u0e31\u0e14\u0e21\u0e32\u0e44\u0e14\u0e49) \n\u0e42\u0e14\u0e22\u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e20\u0e4c 0,1,2 \u0e04\u0e37\u0e2d\u0e40\u0e1f\u0e2a 0,1,2 \u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e41\u0e25\u0e30\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e20\u0e4c 3,4,5 \u0e04\u0e37\u0e2d\u0e40\u0e1f\u0e2a 0,1,2 \u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e07'''\nparq_sample","61a0b3be":"%%time\nplt.figure(figsize=(10, 5))\n# plt.title(\"ID measurement:0, Target:0\",\n#          fontdict={'fontsize':36})\nplt.subplot(1,2, 1)\nplt.plot(parq_sample[\"0\"].values, marker=\"o\", label='Phase 0')\nplt.plot(parq_sample[\"1\"].values, marker=\"o\", label='Phase 1')\nplt.plot(parq_sample[\"2\"].values, marker=\"o\", label='Phase 2')\nplt.ylim(-60,60)\nplt.legend()\nplt.title('Class 0')\n# plt.show()\n\n# plt.figure(figsize=(15, 10))\n# plt.title(\"ID measurement:1, Target:1\",\n#          fontdict={'fontsize':36})\nplt.subplot(1,2, 2)\nplt.plot(parq_sample[\"3\"].values, marker=\"o\", label='Phase 0')\nplt.plot(parq_sample[\"4\"].values, marker=\"o\", label='Phase 1')\nplt.plot(parq_sample[\"5\"].values, marker=\"o\", label='Phase 2')\nplt.ylim(-60,60)\nplt.legend()\nplt.title('Class 1')\n# plt.show()","ef70e842":"%%time\nplt.figure(figsize=(10, 5))\n# plt.title(\"ID measurement:0, Target:0\",\n#          fontdict={'fontsize':36})\nplt.subplot(1,2, 1)\nplt.plot(parq_sample_dn[\"0\"].values, marker=\"o\", label='Phase 0')\nplt.plot(parq_sample_dn[\"1\"].values, marker=\"o\", label='Phase 1')\nplt.plot(parq_sample_dn[\"2\"].values, marker=\"o\", label='Phase 2')\nplt.ylim(-60,60)\nplt.legend()\nplt.title('Class 0')\n# plt.show()\n\n# plt.figure(figsize=(15, 10))\n# plt.title(\"ID measurement:1, Target:1\",\n#          fontdict={'fontsize':36})\nplt.subplot(1,2, 2)\nplt.plot(parq_sample_dn[\"3\"].values, marker=\"o\", label='Phase 0')\nplt.plot(parq_sample_dn[\"4\"].values, marker=\"o\", label='Phase 1')\nplt.plot(parq_sample_dn[\"5\"].values, marker=\"o\", label='Phase 2')\nplt.ylim(-60,60)\nplt.legend()\nplt.title('Class 1')\n# plt.show()","6340a080":"#\u0e25\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e2a\u0e31\u0e01\u0e40\u0e25\u0e47\u0e01\u0e19\u0e49\u0e2d\u0e22\ndel parq_sample_dn, parq_sample","28a96195":"# \u0e04\u0e48\u0e32 127, -128 \u0e04\u0e37\u0e2d\u0e04\u0e48\u0e32\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e41\u0e25\u0e30\u0e15\u0e48\u0e33\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07 voltage \u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e21\u0e35\nmax_num = 127\nmin_num = -128\n\n# \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 ts \u0e22\u0e48\u0e2d\u0e21\u0e32\u0e08\u0e32\u0e01 'time_series' \u0e0b\u0e36\u0e48\u0e07\u0e41\u0e17\u0e19\u0e04\u0e27\u0e32\u0e21\u0e2b\u0e21\u0e32\u0e22\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 input \u0e02\u0e19\u0e32\u0e14 (1,800000) \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e1a\ndef min_max_transf(ts, min_data, max_data, range_needed=(-1,1)):\n    if min_data < 0:\n        ts_std = (ts + abs(min_data)) \/ (max_data + abs(min_data))\n    else:\n        ts_std = (ts - min_data) \/ (max_data - min_data)\n    if range_needed[0] < 0:    \n        return ts_std * (range_needed[1] + abs(range_needed[0])) + range_needed[0]\n    else:\n        return ts_std * (range_needed[1] - range_needed[0]) + range_needed[0]","c12152ca":"# \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 ts \u0e22\u0e48\u0e2d\u0e21\u0e32\u0e08\u0e32\u0e01 'time_series' \u0e0b\u0e36\u0e48\u0e07\u0e41\u0e17\u0e19\u0e04\u0e27\u0e32\u0e21\u0e2b\u0e21\u0e32\u0e22\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 input \u0e02\u0e19\u0e32\u0e14 (1,800000) \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e1a\n\ndef transform_ts(ts, n_dim=FEATURE_TIME_STEPS, min_max=(-1,1)):\n    # \u0e01\u0e48\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 voltage \u0e43\u0e2b\u0e49\u0e21\u0e35\u0e04\u0e48\u0e32\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 (-1, 1)\n    ts_std = min_max_transf(ts, min_data=min_num, max_data=max_num)\n    \n    # bucket_size \u0e04\u0e37\u0e2d\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 window \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 800000\/160 = 5000\n    bucket_size = int(sample_size \/ n_dim)\n    \n    # new_ts \u0e04\u0e37\u0e2d matrix output \u0e02\u0e19\u0e32\u0e14 160x19\n    new_ts = []\n    \n    # \u0e27\u0e19\u0e25\u0e39\u0e1b\u0e2d\u0e48\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e25\u0e30 window\n    for i in range(0, sample_size, bucket_size):\n        # \u0e15\u0e31\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 window \u0e17\u0e35\u0e48 i \u0e2d\u0e2d\u0e01\u0e21\u0e32\n        ts_range = ts_std[i:i + bucket_size]\n        \n        # \u0e04\u0e48\u0e32\u0e2a\u0e16\u0e34\u0e15\u0e34\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e43\u0e19 window\n        mean = ts_range.mean()\n        std = ts_range.std() # standard deviation\n        std_top = mean + std # I have to test it more, but is is like a band\n        std_bot = mean - std\n        \n        # \u0e04\u0e48\u0e32 percentile \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e43\u0e19 window\n        percentil_calc = np.percentile(ts_range, [0, 1, 25, 50, 75, 99, 100]) \n        max_range = percentil_calc[-1] - percentil_calc[0] # this is the amplitude of the chunk\n        relative_percentile = percentil_calc - mean # maybe it could heap to understand the asymmetry\n\n        # \u0e23\u0e27\u0e21 features \u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19\u0e40\u0e02\u0e49\u0e32\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19\u0e14\u0e49\u0e27\u0e22 concatenation \u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e31\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08 1 window\n        new_ts.append(np.concatenate([np.asarray([mean, std, std_top, std_bot, max_range]),percentil_calc, relative_percentile]))\n        \n    # \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 list \u0e02\u0e2d\u0e07 160 vectors \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 numpy array 160x19\n    return np.asarray(new_ts)","c46e0225":"# start, end \u0e04\u0e37\u0e2d\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e41\u0e25\u0e30\u0e08\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2d\u0e48\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e32\u0e1a\u0e32\u0e07\u0e2a\u0e48\u0e27\u0e19 (\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d 4356 \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e15\u0e47\u0e21\u0e46 \u0e04\u0e37\u0e2d 8712 \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13) \n# \u0e17\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e14\u0e49\u0e27\u0e22\u0e02\u0e49\u0e2d\u0e08\u0e33\u0e01\u0e31\u0e14\u0e02\u0e2d\u0e07 RAM\ndef prep_data(start, end):\n    \n    # \u0e2d\u0e48\u0e32\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 denoised \u0e41\u0e25\u0e49\u0e27\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 (start,end) \u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e42\u0e21\u0e14\u0e39\u0e25 parquet\n    praq_train = pq.read_pandas('..\/input\/vsb-wavelet-denoised\/train_dn.parquet', columns=[str(i) for i in range(start, end)]).to_pandas()\n    \n    # X,y \u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e08\u0e30\u0e23\u0e27\u0e21\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3 \u0e40\u0e1f\u0e2a\u0e40\u0e02\u0e49\u0e32\u0e44\u0e27\u0e49\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19\u0e41\u0e25\u0e49\u0e27\n    X = []\n    y = []\n    \n    # tqdm \u0e40\u0e1b\u0e47\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e2d\u0e01\u0e04\u0e27\u0e32\u0e21\u0e04\u0e37\u0e1a\u0e2b\u0e19\u0e49\u0e32\u0e02\u0e2d\u0e07 loop \u0e44\u0e14\u0e49 \u0e21\u0e35\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e21\u0e32\u0e01\u0e04\u0e23\u0e31\u0e1a\n    # \u0e43\u0e19\u0e25\u0e39\u0e1b\u0e43\u0e2b\u0e0d\u0e48 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e27\u0e19\u0e25\u0e39\u0e1b\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e25\u0e30 3 \u0e40\u0e1f\u0e2a \n    # \u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e27\u0e48\u0e32 start,end \u0e19\u0e31\u0e49\u0e19\u0e40\u0e1b\u0e47\u0e19 index \u0e02\u0e2d\u0e07 signal_id \u0e17\u0e35\u0e48\u0e41\u0e22\u0e01\u0e40\u0e1f\u0e2a\u0e01\u0e31\u0e19 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e17\u0e33\u0e17\u0e35\u0e25\u0e30 3 \u0e40\u0e1f\u0e2a \u0e43\u0e19\u0e25\u0e39\u0e1b\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e2b\u0e32\u0e23 3 \u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e19\u0e35\u0e49\n    for id_measurement in tqdm(df_train.index.levels[0].unique()[int(start\/3):int(end\/3)]):\n        \n        # X_signal \u0e08\u0e30\u0e40\u0e01\u0e47\u0e1a vector \u0e02\u0e19\u0e32\u0e14 (160,57) \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3\u0e40\u0e1f\u0e2a\n        X_signal = []\n        # \u0e27\u0e19\u0e25\u0e39\u0e1b\u0e2d\u0e48\u0e32\u0e19\u0e17\u0e35\u0e25\u0e30\u0e40\u0e1f\u0e2a\n        for phase in [0,1,2]:\n            \n            # \u0e2d\u0e48\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 signal_id, target (class) \u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e1f\u0e2a\u0e19\u0e35\u0e49\n            signal_id, target = df_train.loc[id_measurement].loc[phase]\n            \n            # \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e22\u0e38\u0e1a 3\u0e40\u0e1f\u0e2a\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e14\u0e35\u0e22\u0e27 \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01 label y \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27 (\u0e41\u0e17\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e17\u0e33\u0e17\u0e31\u0e49\u0e07 3 \u0e40\u0e1f\u0e2a)\n            if phase == 0:\n                y.append(target)\n            \n            # \u0e40\u0e23\u0e35\u0e22\u0e01 transform_ts \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 vector (160,19) \u0e17\u0e35\u0e25\u0e30\u0e40\u0e1f\u0e2a \n            X_signal.append(transform_ts(praq_train[str(signal_id)]))\n        \n        # concatenate 3\u0e40\u0e1f\u0e2a\u0e44\u0e27\u0e49\u0e43\u0e19 X_signal : 3*(160,19) --> (160,57)\n        X_signal = np.concatenate(X_signal, axis=1)\n\n        # \u0e1a\u0e23\u0e23\u0e08\u0e38\u0e41\u0e15\u0e48\u0e25\u0e30 vector \u0e25\u0e07\u0e44\u0e1b\u0e44\u0e27\u0e49\u0e43\u0e19\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 X\n        X.append(X_signal)\n    \n    # \u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22 X.shape = (4356\/3,160,57) = (1452,160,57)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    return X, y","8f9b62af":"# \u0e42\u0e04\u0e49\u0e14\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e35\u0e49\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e04\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19 prep_data \u0e2a\u0e2d\u0e07\u0e23\u0e2d\u0e1a\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 (\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e14\u0e49\u0e27\u0e22\u0e02\u0e49\u0e2d\u0e08\u0e33\u0e01\u0e31\u0e14\u0e02\u0e2d\u0e07 RAM \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e17\u0e33\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49)\n# \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Notebook \u0e08\u0e30\u0e41\u0e2a\u0e14\u0e07\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07 vector \u0e40\u0e09\u0e1e\u0e32\u0e30 denoised signal \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e15\u0e31\u0e49\u0e07\u0e0a\u0e37\u0e48\u0e2d output variable \u0e27\u0e48\u0e32 X_dn\nX_dn = []\ny = []\ndef load_all():\n    total_size = len(df_train)\n    for ini, end in [(0, int(total_size\/2)), (int(total_size\/2), total_size)]:\n        X_temp, y_temp = prep_data(ini, end)\n        X_dn.append(X_temp)\n        y.append(y_temp)\nload_all()\nX_dn = np.concatenate(X_dn)\ny = np.concatenate(y)","a1037324":"print(X_dn.shape, y.shape)\n# save data \u0e44\u0e27\u0e49\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e42\u0e2b\u0e25\u0e14\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e1b\u0e25\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e0b\u0e49\u0e33\u0e2d\u0e35\u0e01\nnp.save(\"X_dn.npy\",X_dn)\nnp.save(\"y.npy\",y)","f4f2d3a0":"!ls ..\/input\/5-fold-lstm-attention-fully-commented-0-694","9b4aba05":"X_orig = np.load('..\/input\/5-fold-lstm-attention-fully-commented-0-694\/X.npy')\nprint(X_orig.shape)","a10269a6":"if SIGNAL_TYPE == 'raw':\n    X = X_orig\nelif SIGNAL_TYPE == 'denoised':\n    X = X_dn\nelse: # SIGNAL_TYPE = 'both'\n    X = np.concatenate([X_orig,X_dn],axis=-1)\n    \nprint(SIGNAL_TYPE, X.shape)","de0487fc":"def model_lstm(input_shape):\n    \n    # \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e41\u0e17\u0e19 Input \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e0b\u0e36\u0e48\u0e07\u0e01\u0e47\u0e04\u0e37\u0e2d 3D-array \u0e14\u0e31\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e44\u0e27\u0e49\u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19\n    # LSTM \u0e23\u0e31\u0e1a 3D array \u0e41\u0e15\u0e48 Keras \u0e08\u0e30\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e23\u0e30\u0e1a\u0e38 shape \u0e02\u0e2d\u0e07 dimension \u0e17\u0e35\u0e48 2 (TIME_STEPS) \u0e41\u0e25\u0e30 3 (D) \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\n    inp = Input(shape=(input_shape[1], input_shape[2],))\n    \n    # \u0e2a\u0e23\u0e49\u0e32\u0e07 Bi-LSTM layer\u0e41\u0e23\u0e01\u0e23\u0e31\u0e1a 3D-array input \u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07 output \u0e43\u0e19\u0e0a\u0e37\u0e48\u0e2d x0\n    x0 = Bidirectional(CuDNNLSTM(HID, return_sequences=True))(inp)\n    \n    # \u0e2a\u0e23\u0e49\u0e32\u0e07 Bi-LSTM layer\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e07\u0e23\u0e31\u0e1a x0 \u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07 output \u0e43\u0e19\u0e0a\u0e37\u0e48\u0e2d x\n    x = Bidirectional(CuDNNLSTM(HID, return_sequences=True))(x0)\n\n    # \u0e2a\u0e23\u0e49\u0e32\u0e07 2 pooling layers \u0e21\u0e32\u0e41\u0e25\u0e30 concat output \u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07\u0e40\u0e02\u0e49\u0e32\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19\n    x1 = GlobalAveragePooling1D()(x)\n    x2 = GlobalMaxPooling1D()(x)\n    x = Concatenate()([x1,x2])\n    \n    # \u0e2a\u0e23\u0e49\u0e32\u0e07 Dense layers \u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e31\u0e19 3 \u0e0a\u0e31\u0e49\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e1b\u0e25\u0e07 vectors \u0e43\u0e2b\u0e49\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 [0,1]\n    x = Dense(64, activation=\"relu\")(x)\n    x = Dense(16, activation=\"relu\")(x)\n    x = Dense(1, activation=\"sigmoid\")(x)\n    \n    # \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 layers \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e2a\u0e23\u0e49\u0e32\u0e07 model \u0e42\u0e14\u0e22\u0e23\u0e30\u0e1a\u0e38 input \u0e41\u0e23\u0e01 \u0e41\u0e25\u0e30 output \u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\n    model = Model(inputs=inp, outputs=x)\n    \n    # \u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e0a\u0e49 binary crossentropy loss, Adam optimization, \u0e41\u0e25\u0e30\u0e27\u0e31\u0e14\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 MCC \u0e15\u0e32\u0e21\u0e17\u0e35\u0e48 Kaggle \u0e01\u0e33\u0e2b\u0e19\u0e14\n    model.compile(loss='binary_crossentropy', optimizer=optimizers.Adam(lr=LR), metrics=[matthews_correlation])\n    \n    return model","60d8cf3c":"# \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 Stratified K-Folds \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32 import \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e19 cell \u0e41\u0e23\u0e01\u0e46 (\u0e14\u0e39 Step 0.)\n# input \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e30\u0e1a\u0e38\u0e04\u0e37\u0e2d N_SPLITS (K) \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48 Input (X,y) \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e40\u0e1e\u0e37\u0e48\u0e2d\n# \u0e43\u0e2b\u0e49\u0e17\u0e33 Stratification \u0e44\u0e14\u0e49\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e15\u0e32\u0e21 class distribution\nsplits = list(StratifiedKFold(n_splits=N_SPLITS).split(X, y))\n\n# list \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e01\u0e47\u0e1a\u0e04\u0e33\u0e17\u0e33\u0e19\u0e32\u0e22\u0e1a\u0e19 validation set \u0e41\u0e25\u0e30 true labels \u0e44\u0e27\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e40\u0e21\u0e34\u0e19 MCC \u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07\npreds_val_list = [] #\u0e04\u0e33\u0e17\u0e33\u0e19\u0e32\u0e22\ny_val_list = [] #label \u0e08\u0e23\u0e34\u0e07\n\n# \u0e43\u0e19\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 splits \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 list \u0e17\u0e35\u0e48\u0e40\u0e01\u0e47\u0e1a index \u0e02\u0e2d\u0e07 training \u0e41\u0e25\u0e30 valid \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30 fold \u0e44\u0e27\u0e49\n# \u0e42\u0e14\u0e22 splits = [(train_idx_fold1, valid_idx_fold1), ..., (train_idx_foldK, valid_idx_foldK)]\n# \u0e41\u0e25\u0e30\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 enumerate(['a', 'b', 'c']) returns [(0, 'a'), (1, 'b'), (2, 'c')]\n\n#\u0e27\u0e19\u0e25\u0e39\u0e1b K folds\nfor idx, (train_idx, val_idx) in enumerate(splits):\n    K.clear_session() # \u0e40\u0e04\u0e25\u0e35\u0e22\u0e23\u0e4c\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e08\u0e33\u0e02\u0e2d\u0e07 Keras\n    \n    print(\"Beginning fold {}\".format(idx+1))\n    \n    # \u0e2a\u0e23\u0e49\u0e32\u0e07 train, valid set \u0e08\u0e32\u0e01 index \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01 stratified K-Folds\n    train_X, train_y, val_X, val_y = X[train_idx], y[train_idx], X[val_idx], y[val_idx]\n    \n    # \u0e2a\u0e23\u0e49\u0e32\u0e07 2-layer bi-lstm \u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e44\u0e27\u0e49\n    model = model_lstm(train_X.shape)\n    \n    # \u0e23\u0e30\u0e1a\u0e38\u0e43\u0e2b\u0e49 Keras \u0e2a\u0e23\u0e49\u0e32\u0e07 log file\n    csv_logger = CSVLogger('trainlog.csv', append=True, separator=',')\n    \n    # \u0e23\u0e30\u0e1a\u0e38\u0e43\u0e2b\u0e49 Keras save model \u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e48\u0e32 Validation MCC \u0e2a\u0e39\u0e07\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e44\u0e27\u0e49\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 Fold\n    ckpt = ModelCheckpoint('weights_{}.h5'.format(idx), \n                           save_best_only=True, save_weights_only=True, \n                           verbose=1, monitor='val_matthews_correlation', \n                           mode='max')\n    \n    # \u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49 model parameters \u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 \u0e0b\u0e36\u0e48\u0e07\u0e42\u0e04\u0e49\u0e14\u0e40\u0e1e\u0e35\u0e22\u0e07 1 \u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\n    model.fit(train_X, train_y, batch_size=BATCH_SIZE, epochs=EPOCHS, \n              validation_data=[val_X, val_y], \n              callbacks=[ckpt,csv_logger], verbose=0)\n    \n    #\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\u0e43\u0e2b\u0e49\u0e42\u0e2b\u0e25\u0e14 parameters \u0e17\u0e35\u0e48\u0e44\u0e14\u0e49 validation MCC \u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e17\u0e35\u0e48\u0e40\u0e0b\u0e1e\u0e44\u0e27\u0e49\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\n    model.load_weights('weights_{}.h5'.format(idx))\n    \n    #\u0e19\u0e33\u0e42\u0e21\u0e40\u0e14\u0e25\u0e19\u0e31\u0e49\u0e19\u0e21\u0e32\u0e17\u0e33\u0e19\u0e32\u0e22 \"\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\" \u0e17\u0e35\u0e48\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e44\u0e1f\u0e08\u0e30\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e43\u0e19 validation set \u0e2d\u0e35\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07 \n    preds_1fold = model.predict(val_X, batch_size=512)\n    \n    # \u0e04\u0e33\u0e19\u0e27\u0e19 threshold \u0e17\u0e35\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14 \u0e41\u0e25\u0e30 valid MCC Score \u0e17\u0e35\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e43\u0e19 Fold \u0e19\u0e35\u0e49\n    result = threshold_search(val_y, preds_1fold[:,0])\n    print('optimized threshold is %.2f and have score %.4f' % \n          (result['threshold'], result['matthews_correlation']))\n\n    \n    # \u0e40\u0e01\u0e47\u0e1a\u0e04\u0e33\u0e17\u0e33\u0e19\u0e32\u0e22\u0e41\u0e25\u0e30 label \u0e08\u0e23\u0e34\u0e07\u0e44\u0e27\u0e49\u0e04\u0e33\u0e19\u0e27\u0e19 threshold \u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46 \u0e01\u0e31\u0e19\u0e17\u0e31\u0e49\u0e07 KFolds \u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07\n    preds_val_list.append(preds_1fold)\n    y_val_list.append(val_y)\n\n# \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 list \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 numpy array\npreds_val = np.concatenate(preds_val_list)[...,0]\ny_val = np.concatenate(y_val_list)\nprint(preds_val.shape, y_val.shape)\n","393ac423":"%%time\n# \u0e01\u0e48\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e27\u0e01 signal_id, measurement_id \u0e02\u0e2d\u0e07 test set \n# \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e0a\u0e48\u0e19\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a training set \u0e43\u0e19 Step 1. \u0e04\u0e23\u0e31\u0e1a\nmeta_test = pd.read_csv('..\/input\/vsb-power-line-fault-detection\/metadata_test.csv')","ab14d1ae":"meta_test = meta_test.set_index(['signal_id'])\nmeta_test.head()","5c4af170":"%%time\n'''\n\u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 denoised signal \u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e1f\u0e2a\u0e43\u0e19 test set \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 \nVector \u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3\u0e40\u0e1f\u0e2a\u0e40\u0e0a\u0e48\u0e19\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e17\u0e35\u0e48\u0e17\u0e33\u0e43\u0e19\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d 1.2 \u0e0b\u0e36\u0e48\u0e07\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e08\u0e30\u0e04\u0e25\u0e49\u0e32\u0e22\u0e46 \u0e01\u0e31\u0e19\n\u0e41\u0e25\u0e30\u0e43\u0e2b\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2d\u0e48\u0e32\u0e19\u0e42\u0e04\u0e49\u0e14\u0e40\u0e2d\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e41\u0e1a\u0e1a\u0e1d\u0e36\u0e01\u0e2b\u0e31\u0e14\n\n\u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e04\u0e37\u0e2d\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 test set \u0e19\u0e31\u0e49\u0e19\u0e40\u0e22\u0e2d\u0e30\u0e01\u0e27\u0e48\u0e32 training set \u0e21\u0e32\u0e01\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\n\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 10 \u0e2a\u0e48\u0e27\u0e19\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e04\u0e33\u0e19\u0e27\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19 RAM \u0e17\u0e35\u0e48\u0e08\u0e33\u0e01\u0e31\u0e14\n'''\n\nfirst_sig = meta_test.index[0]\nn_parts = 10\nmax_line = len(meta_test)\npart_size = int(max_line \/ n_parts)\nlast_part = max_line % n_parts\nprint(first_sig, n_parts, max_line, part_size, last_part, n_parts * part_size + last_part)\n\n# Here we create a list of lists with start index and end index for each of the 10 parts and one for the last partial part\nstart_end = [[x, x+part_size] for x in range(first_sig, max_line + first_sig, part_size)]\nstart_end = start_end[:-1] + [[start_end[-1][0], start_end[-1][0] + last_part]]\nprint(start_end)\nX_test_raw = []\n\n# now, very like we did above with the train data, we convert the test data part by part\n# transforming the 3 phases 800000 measurement in matrix (160,57)\nfor start, end in start_end:\n    subset_test = pq.read_pandas('..\/input\/vsb-wavelet-denoised\/test_dn.parquet', columns=[str(i) for i in range(start, end)]).to_pandas()\n    for i in tqdm(subset_test.columns):\n        id_measurement, phase = meta_test.loc[int(i)]\n        subset_test_col = subset_test[i]\n        subset_trans = transform_ts(subset_test_col)\n        X_test_raw.append([i, id_measurement, phase, subset_trans])","51f3db5b":"# \u0e22\u0e38\u0e1a\u0e23\u0e27\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 vector \u0e02\u0e2d\u0e07\u0e17\u0e31\u0e49\u0e07 3 \u0e40\u0e1f\u0e2a\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 1 vector\nX_test_dn = np.asarray([np.concatenate([X_test_raw[i][3],X_test_raw[i+1][3], X_test_raw[i+2][3]], axis=1) for i in range(0,len(X_test_raw), 3)])\nnp.save(\"X_test_dn.npy\",X_test_dn)\nX_test_dn.shape","db59256c":"# \u0e43\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e02\u0e2d\u0e07 Test Signal Data \u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 Raw \u0e40\u0e23\u0e32\u0e01\u0e47\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e1b\u0e47\u0e19 vector \u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\n# \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e0a\u0e48\u0e19\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e01\u0e23\u0e13\u0e35 Training Data\nX_test_orig = np.load('..\/input\/5-fold-lstm-attention-fully-commented-0-694\/X_test.npy')\nprint(X_test_orig.shape)","f00834df":"if SIGNAL_TYPE == 'raw':\n    X_test = X_test_orig\nelif SIGNAL_TYPE == 'denoised':\n    X_test = X_test_dn\nelse: # SIGNAL_TYPE = 'both'\n    X_test = np.concatenate([X_test_orig,X_test_dn],axis=-1)\n    \nprint(SIGNAL_TYPE)\nprint(X_test.shape)","ff309bff":"result = threshold_search(y_val, preds_val)\nbest_threshold = result['threshold']\nprint(result['threshold'],result['matthews_correlation'])","435e1901":"preds_test_prob = []\nfor i in range(N_SPLITS):\n    model.load_weights('weights_{}.h5'.format(i))\n    pred = model.predict(X_test, batch_size=300, verbose=1)\n    pred_3 = np.repeat(pred,3)\n\n    preds_test_prob.append(pred_3)\n\n","ea355e8b":"# \u0e13 \u0e08\u0e38\u0e14\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e21\u0e35\u0e04\u0e33\u0e19\u0e32\u0e22\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e2d\u0e07 data \u0e41\u0e22\u0e01\u0e40\u0e1f\u0e2a\u0e01\u0e31\u0e19\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 K \u0e0a\u0e38\u0e14\nprint(np.array(preds_test_prob).shape)","e2415cff":"# \u0e40\u0e09\u0e25\u0e35\u0e48\u0e22 \"\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\" \u0e02\u0e2d\u0e07\u0e17\u0e31\u0e49\u0e07 K model \u0e40\u0e02\u0e49\u0e32\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19\npreds_test_prob = np.squeeze(np.mean(preds_test_prob, axis=0))\n\nnp.save('preds_test_prob.npy',preds_test_prob)\nprint(preds_test_prob.shape)","3c187c7c":"# \u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 class 0 \u0e2b\u0e23\u0e37\u0e2d 1 \u0e08\u0e32\u0e01\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e14\u0e49\u0e27\u0e22 best_threshold\n# \u0e17\u0e35\u0e48\u0e1b\u0e23\u0e30\u0e40\u0e21\u0e34\u0e19\u0e21\u0e32\u0e08\u0e32\u0e01 validation dataset\npreds_test = (preds_test_prob > best_threshold).astype(np.int)\n\nprint(preds_test.shape)\n\n# \u0e14\u0e39\u0e27\u0e48\u0e32\u0e40\u0e23\u0e32\u0e17\u0e33\u0e19\u0e32\u0e22 class 1 \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e01\u0e35\u0e48\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\nprint(sum(preds_test))","75551f7a":"submission = pd.read_csv('..\/input\/vsb-power-line-fault-detection\/sample_submission.csv')\nprint(len(submission))\nsubmission.head()","bce351b8":"submission['target'] = preds_test\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","69839896":"# do multi threshold here [see my Tarun-General code]\nsubmission25 = submission.copy()\nsubmission30 = submission.copy()\nsubmission40 = submission.copy()\nsubmission55 = submission.copy()\nsubmission60 = submission.copy()","f1aa4545":"preds_test25 = (preds_test_prob > 0.25).astype(int)\npreds_test30 = (preds_test_prob > 0.30).astype(int)\npreds_test40 = (preds_test_prob > 0.40).astype(int)\npreds_test55 = (preds_test_prob > 0.55).astype(int)\npreds_test60 = (preds_test_prob > 0.60).astype(int)\n\nsubmission25['target'] = preds_test25\nsubmission30['target'] = preds_test30\nsubmission40['target'] = preds_test40\nsubmission55['target'] = preds_test55\nsubmission60['target'] = preds_test60\n\nsubmission25.to_csv('submission25.csv', index=False)\nsubmission30.to_csv('submission30.csv', index=False)\nsubmission40.to_csv('submission40.csv', index=False)\nsubmission55.to_csv('submission55.csv', index=False)\nsubmission60.to_csv('submission60.csv', index=False)","855838c5":"\u0e16\u0e49\u0e32\u0e40\u0e23\u0e32\u0e19\u0e33\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 signal \u0e17\u0e35\u0e48\u0e27\u0e31\u0e14\u0e04\u0e48\u0e32 Voltage \u0e17\u0e31\u0e49\u0e07 8\u0e41\u0e2a\u0e19\u0e04\u0e48\u0e32\u0e21\u0e32\u0e1e\u0e25\u0e47\u0e2d\u0e15\u0e01\u0e47\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e39\u0e1b\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a [\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e27\u0e48\u0e32\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 Denoised \u0e19\u0e31\u0e49\u0e19\u0e44\u0e14\u0e49\u0e15\u0e31\u0e14\u0e2d\u0e07\u0e04\u0e4c\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e02\u0e2d\u0e07 Sinusoidal waves \u0e44\u0e1b](https:\/\/thaikeras.com\/community\/\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a-kaggle\/\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19-vsb-power-line-fault-detection\/#post-141)","af3126d3":"# \u0e40\u0e01\u0e23\u0e34\u0e48\u0e19\u0e19\u0e33\n\n\u0e2a\u0e27\u0e31\u0e2a\u0e14\u0e35\u0e04\u0e23\u0e31\u0e1a\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 Notebook \u0e09\u0e1a\u0e31\u0e1a\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d ThAIKeras Deep Learning Workshop \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1b\u0e31\u0e0d\u0e2b\u0e32 Predictive Maintenance \u0e02\u0e2d\u0e07\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e2a\u0e32\u0e21\u0e40\u0e1f\u0e2a\u0e04\u0e23\u0e31\u0e1a\n\n\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e40\u0e04\u0e22\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Kaggle \u0e21\u0e32\u0e01\u0e48\u0e2d\u0e19\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16[\u0e2a\u0e21\u0e31\u0e04\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e15\u0e32\u0e21\u0e19\u0e35\u0e49](https:\/\/thaikeras.com\/2018\/11\/14\/setup-kaggle-workshop\/)\u0e04\u0e23\u0e31\u0e1a  \u0e41\u0e25\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16[\u0e14\u0e39 Workshops \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e02\u0e2d\u0e07\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48](https:\/\/thaikeras.com\/category\/workshop\/)\u0e04\u0e23\u0e31\u0e1a\n\n\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e1b\u0e31\u0e0d\u0e2b\u0e32 \u0e41\u0e25\u0e30\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e31\u0e19\u0e43\u0e19 Workshop \u0e19\u0e35\u0e49\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e40\u0e02\u0e35\u0e22\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e41\u0e22\u0e01\u0e41\u0e19\u0e30\u0e19\u0e33\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e19\u0e35\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48\u0e04\u0e23\u0e31\u0e1a  https:\/\/thaikeras.com\/community\/\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a-kaggle\/\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19-vsb-power-line-fault-detection\/\n\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e21\u0e48\u0e02\u0e2d\u0e01\u0e25\u0e48\u0e32\u0e27\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e0b\u0e49\u0e33\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a \u0e41\u0e25\u0e30\u0e02\u0e2d\u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2d\u0e48\u0e32\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e02\u0e49\u0e32\u0e07\u0e15\u0e49\u0e19\u0e43\u0e2b\u0e49\u0e08\u0e1a\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 scope \u0e02\u0e2d\u0e07 Workshop \u0e40\u0e23\u0e32\u0e01\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e25\u0e07\u0e21\u0e37\u0e2d\u0e17\u0e33\u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a \u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e43\u0e19\u0e08\u0e38\u0e14\u0e44\u0e2b\u0e19\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e42\u0e1e\u0e2a\u0e15\u0e4c\u0e16\u0e32\u0e21\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e04\u0e23\u0e31\u0e1a\u0e1c\u0e21 **\u0e23\u0e1a\u0e01\u0e27\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2a\u0e21\u0e31\u0e04\u0e23 Kaggle Account \u0e41\u0e25\u0e30\u0e01\u0e14 Upvote \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e33\u0e25\u0e31\u0e07\u0e43\u0e08\u0e43\u0e2b\u0e49\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e14\u0e49\u0e27\u0e22\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a**\n\n\u0e40\u0e2d\u0e32\u0e25\u0e48\u0e30\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2d\u0e48\u0e32\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e43\u0e19 ThAIKeras \u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27\u0e43\u0e0a\u0e48\u0e44\u0e2b\u0e21\u0e04\u0e23\u0e31\u0e1a \u0e16\u0e49\u0e32\u0e07\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e21\u0e32\u0e40\u0e23\u0e34\u0e48\u0e21\u0e17\u0e33 Workshop \u0e01\u0e31\u0e19\u0e40\u0e25\u0e22\u0e04\u0e23\u0e31\u0e1a\n\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21\u0e02\u0e2d\u0e07 Project \u0e41\u0e2a\u0e14\u0e07\u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e23\u0e39\u0e1b\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a\n![](https:\/\/i.ibb.co\/CW97RQw\/FD851-F08-DE4-F-4-C96-A001-D6-C6-D1-E21718.jpg)\n\n\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e41\u0e1a\u0e48\u0e07\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e04\u0e23\u0e48\u0e32\u0e27\u0e46 \u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a (\u0e1c\u0e39\u0e49\u0e17\u0e35\u0e48\u0e17\u0e33\u0e1a\u0e19 Desktop, menu navigation \u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e49\u0e32\u0e19\u0e0b\u0e49\u0e32\u0e22\u0e21\u0e37\u0e2d\u0e04\u0e23\u0e31\u0e1a)\n\n* Step 0. \u0e40\u0e0b\u0e47\u0e15\u0e04\u0e48\u0e32 Configurations \u0e41\u0e25\u0e30\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 Functions \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\n* Step 1. \u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e2a\u0e32\u0e21\u0e40\u0e1f\u0e2a\u0e08\u0e32\u0e01\u0e40\u0e14\u0e34\u0e21\u0e43\u0e19\u0e23\u0e39\u0e1b Signal \u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b 2D-Vectors (\u0e2b\u0e23\u0e37\u0e2d Matrix) \u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d $\\mathbf{x}_1, ..., \\mathbf{x}_{160}$ \u0e43\u0e19\u0e23\u0e39\u0e1b\u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19 \u0e42\u0e14\u0e22 $\\mathbf{x}_{t} \\in \\mathcal{R}^D$ (\u0e43\u0e19 Workshop \u0e19\u0e35\u0e49 $D$ \u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 57 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e0a\u0e33\u0e19\u0e32\u0e0d\u0e41\u0e25\u0e49\u0e27\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e19\u0e35\u0e49\u0e44\u0e14\u0e49\u0e04\u0e23\u0e31\u0e1a)\n* Step 2. \u0e2a\u0e23\u0e49\u0e32\u0e07 Model LSTM \u0e41\u0e25\u0e30\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b Vectors \u0e41\u0e25\u0e49\u0e27\n* Step 3. \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e14\u0e49\u0e27\u0e22 Stratified K-folds of MCC \u0e41\u0e25\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e01\u0e23\u0e30\u0e41\u0e2a\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e2a\u0e32\u0e21\u0e40\u0e1f\u0e2a\u0e27\u0e48\u0e32\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48\u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e14\u0e2a\u0e2d\u0e1a (Test Set)","3a53777c":"\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 `train.parq` \u0e41\u0e25\u0e30 `test.parq` \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 raw signals \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e43\u0e0a\u0e49\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e43\u0e19 notebook \u0e19\u0e35\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48\u0e01\u0e25\u0e48\u0e32\u0e27\u0e44\u0e27\u0e49\u0e43\u0e19\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e27\u0e48\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14\u0e40\u0e27\u0e25\u0e32 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e2d\u0e07 raw signal \u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e40\u0e25\u0e22","da8501e8":"\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e01\u0e47\u0e41\u0e1b\u0e25\u0e07 Denoised Signal \u0e40\u0e1b\u0e47\u0e19 Denoised Vectors \u0e40\u0e2a\u0e23\u0e47\u0e08\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a\n\n\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48\u0e40\u0e01\u0e23\u0e34\u0e48\u0e19\u0e44\u0e27\u0e49\u0e15\u0e2d\u0e19\u0e15\u0e49\u0e19 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14\u0e40\u0e27\u0e25\u0e32 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Raw Signal \u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e01\u0e47\u0e1a\u0e44\u0e27\u0e49\u0e43\u0e19\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `X_orig` \u0e04\u0e23\u0e31\u0e1a","980ed761":"\u0e01\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e25\u0e07\u0e21\u0e37\u0e2d\u0e41\u0e1b\u0e25\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c \u0e40\u0e23\u0e32\u0e25\u0e2d\u0e07\u0e21\u0e32\u0e14\u0e39 raw \/ denoised signals \u0e02\u0e2d\u0e07 class 0 \u0e41\u0e25\u0e30 class 1 \u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a\u0e27\u0e48\u0e32\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e32\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e41\u0e25\u0e30\u0e44\u0e21\u0e48\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e31\u0e19\u0e1a\u0e49\u0e32\u0e07 \u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e42\u0e2b\u0e25\u0e14\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3 \u0e40\u0e1f\u0e2a\u0e2a\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e23\u0e01\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e1e\u0e25\u0e47\u0e2d\u0e15\u0e04\u0e23\u0e31\u0e1a (\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3 \u0e40\u0e1f\u0e2a\u0e41\u0e23\u0e01\u0e40\u0e1b\u0e47\u0e19 class 0 \u0e41\u0e25\u0e30\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e07\u0e40\u0e1b\u0e47\u0e19 class 1) \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e2a\u0e19\u0e43\u0e08\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e41\u0e01\u0e49\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1e\u0e25\u0e47\u0e2d\u0e15\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e21\u0e32\u0e14\u0e39\u0e01\u0e47\u0e44\u0e14\u0e49\u0e04\u0e23\u0e31\u0e1a","fe36bbb2":"\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e08\u0e23\u0e34\u0e07\u0e46 \u0e41\u0e25\u0e49\u0e27\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19 \u0e41\u0e15\u0e48\u0e43\u0e19\u0e17\u0e32\u0e07\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23\u0e25\u0e07\u0e21\u0e37\u0e2d\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e08\u0e30\u0e21\u0e35\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e1b\u0e25\u0e35\u0e01\u0e22\u0e48\u0e2d\u0e22\u0e08\u0e38\u0e01\u0e08\u0e34\u0e01 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e1a\u0e48\u0e07\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 Signal \u0e40\u0e1b\u0e47\u0e19 Vector \u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 4 \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e22\u0e48\u0e2d\u0e22 (4 functions \u0e22\u0e48\u0e2d\u0e22) \u0e14\u0e31\u0e07\u0e08\u0e30\u0e02\u0e2d\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21\u0e01\u0e48\u0e2d\u0e19\u0e08\u0e30\u0e40\u0e23\u0e34\u0e48\u0e21\u0e40\u0e02\u0e35\u0e22\u0e19 Code \u0e08\u0e23\u0e34\u0e07\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a\n\n### 1) \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `load_all`\n\n__Output \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 : __ \u0e41\u0e1b\u0e25\u0e07 Signal \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e14\u0e34\u0e21\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14 `(8712, 800000)` \u0e2b\u0e23\u0e37\u0e2d 8712 \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 (\u0e41\u0e1a\u0e1a\u0e04\u0e34\u0e14\u0e41\u0e22\u0e01\u0e40\u0e1f\u0e2a) \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 \u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e02\u0e19\u0e32\u0e14 `(2904, 160, 57)` \u0e42\u0e14\u0e22 2904 \u0e19\u0e31\u0e49\u0e19\u0e04\u0e37\u0e2d 8712\/3 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e32\u0e21\u0e40\u0e1f\u0e2a\u0e44\u0e27\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27, 160 \u0e04\u0e37\u0e2d `FEATURE_TIME_STEPS` \u0e2b\u0e23\u0e37\u0e2d\u0e08\u0e33\u0e19\u0e27\u0e19 window \u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e44\u0e27\u0e49\u0e15\u0e2d\u0e19\u0e15\u0e49\u0e19 \u0e41\u0e25\u0e30 57 \u0e04\u0e37\u0e2d $D$ \u0e21\u0e34\u0e15\u0e34\u0e02\u0e2d\u0e07\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 window \u0e0b\u0e36\u0e48\u0e07\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e21\u0e34\u0e15\u0e34\u0e19\u0e31\u0e49\u0e19\u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19 `transform_ts` \u0e04\u0e23\u0e31\u0e1a\n\n__\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 : __ \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e02\u0e19\u0e32\u0e14 `(8712, 800000)` \u0e19\u0e31\u0e49\u0e19\u0e43\u0e2b\u0e0d\u0e48\u0e40\u0e01\u0e34\u0e19\u0e01\u0e27\u0e48\u0e32 RAM \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e21\u0e35\u0e43\u0e19 Kaggle Kernel \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e04\u0e48\u0e41\u0e1a\u0e48\u0e07\u0e42\u0e2b\u0e25\u0e14\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07\u0e04\u0e37\u0e2d\u0e04\u0e23\u0e31\u0e49\u0e07\u0e25\u0e30 `(4356, 800000)` \u0e41\u0e25\u0e49\u0e27\u0e2a\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e40\u0e02\u0e49\u0e32\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `prep_data` \u0e04\u0e23\u0e31\u0e1a (\u0e43\u0e19 Test Data \u0e0b\u0e36\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e2b\u0e0d\u0e48\u0e01\u0e27\u0e48\u0e32\u0e19\u0e35\u0e49\u0e21\u0e32\u0e01\u0e40\u0e23\u0e32\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e1a\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 10 \u0e0a\u0e48\u0e27\u0e07\u0e17\u0e35\u0e40\u0e14\u0e35\u0e22\u0e27)\n\n### 2) \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `prep_data`\n\n__Output \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 : __ \u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e04\u0e23\u0e36\u0e48\u0e07\u0e19\u0e36\u0e07 `(4356, 800000)` (\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e22\u0e01\u0e40\u0e1f\u0e2a) \u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 output \u0e40\u0e1b\u0e47\u0e19 vector `(1452, 160, 57)` (\u0e23\u0e27\u0e21 3 \u0e40\u0e1f\u0e2a\u0e41\u0e25\u0e49\u0e27)\n\n__\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 : __ \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 input \u0e21\u0e32\u0e41\u0e22\u0e01\u0e40\u0e1f\u0e2a\u0e01\u0e31\u0e19 \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e19\u0e35\u0e49\u0e08\u0e30\u0e2a\u0e48\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e25\u0e30\u0e40\u0e1f\u0e2a `(1,800000)` \u0e44\u0e1b\u0e40\u0e02\u0e49\u0e32\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `transform_ts` \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e25\u0e30\u0e40\u0e1f\u0e2a `(1,160,19)` \u0e41\u0e25\u0e30\u0e43\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `prep_data` \u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48 concatenate 3 vectors \u0e08\u0e32\u0e01 3 \u0e40\u0e1f\u0e2a \u0e43\u0e2b\u0e49\u0e23\u0e27\u0e21\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e40\u0e14\u0e35\u0e22\u0e27\u0e04\u0e23\u0e31\u0e1a\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e21\u0e34\u0e15\u0e34\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e19\u0e31\u0e49\u0e19\u0e21\u0e35\u0e04\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 57 = 19x3 \u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d `3x(1,160,19) --> (1,160,57)`\n\n### 3) \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `transform_ts`\n\n__Output \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 : __ \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 `(1,800000)` \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 `(1,160,19)`\n\n__\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 : __ \u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07 window \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e42\u0e14\u0e22\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 window \u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a `800000\/160 = 5000` \u0e04\u0e48\u0e32\u0e02\u0e2d\u0e07 voltages \u0e17\u0e35\u0e48\u0e27\u0e31\u0e14\u0e21\u0e32\u0e44\u0e14\u0e49\u0e04\u0e23\u0e31\u0e1a \u0e42\u0e14\u0e22\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30 extract features \u0e08\u0e32\u0e01\u0e04\u0e48\u0e32 5000 voltages \u0e19\u0e35\u0e48\u0e01\u0e47\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23\u0e2b\u0e32 mean, standard deviation, \u0e41\u0e25\u0e30 percentile \u0e0a\u0e48\u0e27\u0e07\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e04\u0e23\u0e31\u0e1a \u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e27\u0e48\u0e32\u0e04\u0e48\u0e32\u0e2a\u0e16\u0e34\u0e15\u0e34\u0e40\u0e2b\u0e25\u0e48\u0e32\u0e19\u0e35\u0e49\u0e08\u0e30\u0e1a\u0e48\u0e07\u0e1a\u0e2d\u0e01 information \u0e17\u0e35\u0e48\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 window \u0e19\u0e31\u0e49\u0e19\u0e46 \u0e04\u0e23\u0e31\u0e1a (\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 \u0e16\u0e49\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e40\u0e0a\u0e35\u0e48\u0e22\u0e27\u0e0a\u0e32\u0e0d\u0e41\u0e25\u0e49\u0e27\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07\u0e42\u0e04\u0e49\u0e14\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e35\u0e49\u0e43\u0e2b\u0e49\u0e2b\u0e32 features \u0e17\u0e35\u0e48\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e19\u0e35\u0e49\u0e44\u0e14\u0e49\u0e40\u0e0a\u0e48\u0e19\u0e04\u0e48\u0e32 Entropy \u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e19)  \n\n### 4) \u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 `min_max_transf`\n\n__Output \u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 : __ standardize \u0e04\u0e48\u0e32 voltage \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e14\u0e34\u0e21\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 (-128,127) \u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 (-1,1) \u0e04\u0e23\u0e31\u0e1a \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e40\u0e2a\u0e01\u0e25\u0e17\u0e35\u0e48\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22\u0e02\u0e36\u0e49\u0e19\n\n__\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21 : __ \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33 standardization \u0e41\u0e1a\u0e1a\u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19\n\n\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e19\u0e35\u0e49\u0e04\u0e37\u0e2d\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e04\u0e23\u0e48\u0e32\u0e27\u0e46 \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e48\u0e19\u0e04\u0e23\u0e31\u0e1a \u0e41\u0e25\u0e30\u0e40\u0e23\u0e32\u0e21\u0e32\u0e14\u0e39\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19\u0e42\u0e04\u0e49\u0e14\u0e02\u0e2d\u0e07\u0e08\u0e23\u0e34\u0e07\u0e01\u0e31\u0e19\u0e40\u0e25\u0e22\u0e04\u0e23\u0e31\u0e1a","6c2c4f73":"# Step 3. \u0e1b\u0e23\u0e30\u0e40\u0e21\u0e34\u0e19\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33 \u0e41\u0e25\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22 K-Fold Ensemble\n\n## 3.1 \u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 Test Data \u0e08\u0e32\u0e01 Signal \u0e40\u0e1b\u0e47\u0e19 Vector","dd3915b2":"LSTM \u0e19\u0e31\u0e49\u0e19\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e35\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 Diagram \u0e44\u0e14\u0e49\u0e2a\u0e2d\u0e07\u0e41\u0e1a\u0e1a\u0e04\u0e37\u0e2d\u0e41\u0e1a\u0e1a Recursive (\u0e0b\u0e49\u0e32\u0e22) \u0e41\u0e25\u0e30\u0e41\u0e1a\u0e1a Sequential (\u0e02\u0e27\u0e32) \u0e42\u0e14\u0e22\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e02\u0e27\u0e32\u0e08\u0e30\u0e07\u0e48\u0e32\u0e22\u0e15\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e04\u0e23\u0e31\u0e1a\u0e27\u0e48\u0e32 **\u0e42\u0e14\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e41\u0e17\u0e49\u0e02\u0e2d\u0e07 LSTM \u0e19\u0e31\u0e49\u0e19\u0e23\u0e31\u0e1a input \u0e40\u0e1b\u0e47\u0e19 sequence of vectors $\\mathbf{x_0}, ..., \\mathbf{x_n}$ \u0e43\u0e19\u0e23\u0e39\u0e1b \u0e41\u0e25\u0e30\u0e01\u0e47\u0e2a\u0e48\u0e07 output \u0e40\u0e1b\u0e47\u0e19 Sequence of Vectors \u0e40\u0e0a\u0e48\u0e19\u0e01\u0e31\u0e19 $\\mathbf{h_0}, ..., \\mathbf{h_n}$ ** \u0e42\u0e14\u0e22 sequence of vectors \u0e19\u0e31\u0e49\u0e19\u0e1b\u0e01\u0e15\u0e34\u0e08\u0e30\u0e40\u0e02\u0e35\u0e22\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19\u0e23\u0e39\u0e1b 2D-array  \u0e40\u0e0a\u0e48\u0e19\u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e04\u0e37\u0e2d (160, 57) \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07 \u0e17\u0e27\u0e48\u0e32\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e19\u0e35\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 2904 \u0e0a\u0e38\u0e14 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e17\u0e49\u0e32\u0e22\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19\u0e23\u0e39\u0e1b 3D-array (2904,160,57) \u0e0b\u0e36\u0e48\u0e07 LSTM \u0e43\u0e19 Keras \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e23\u0e31\u0e1a input \u0e43\u0e19 3D-array \u0e44\u0e14\u0e49\u0e42\u0e14\u0e22\u0e15\u0e23\u0e07\u0e40\u0e25\u0e22\u0e04\u0e23\u0e31\u0e1a (\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e27\u0e19\u0e25\u0e39\u0e1b\u0e17\u0e35\u0e25\u0e30 example) \n\n\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e21\u0e34\u0e15\u0e34\u0e02\u0e2d\u0e07 output vector \u0e02\u0e2d\u0e07 LSTM \u0e19\u0e31\u0e49\u0e19\u0e08\u0e30\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e19\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `HID` \u0e43\u0e19\u0e15\u0e2d\u0e19\u0e15\u0e49\u0e19\u0e02\u0e2d\u0e07 Notebook \u0e04\u0e23\u0e31\u0e1a\n\n*\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 A : * \u0e43\u0e19\u0e23\u0e39\u0e1b\u0e0b\u0e49\u0e32\u0e22\u0e19\u0e31\u0e49\u0e19\u0e41\u0e2a\u0e14\u0e07 nature \u0e04\u0e27\u0e32\u0e21\u0e40\u0e1b\u0e47\u0e19 recursive function \u0e02\u0e2d\u0e07 LSTM \u0e17\u0e35\u0e48\u0e27\u0e48\u0e32\u0e42\u0e14\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e41\u0e17\u0e49\u0e41\u0e25\u0e49\u0e27 Function \u0e17\u0e35\u0e48\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e41\u0e15\u0e48\u0e25\u0e30 time step $\\mathbf{x_t}$ \u0e19\u0e31\u0e49\u0e19\u0e41\u0e17\u0e49\u0e08\u0e23\u0e34\u0e07\u0e41\u0e25\u0e49\u0e27\u0e40\u0e1b\u0e47\u0e19 Function \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 \u0e41\u0e15\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e38\u0e01\u0e46 time steps \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e23\u0e31\u0e1a sequential inputs \u0e44\u0e14\u0e49\n\n*\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 B : * Bi-directional LSTM (\u0e2b\u0e23\u0e37\u0e2d Bi-LSTM) \u0e40\u0e2d\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e17\u0e04\u0e19\u0e34\u0e01\u0e17\u0e35\u0e48\u0e19\u0e33 LSTM \u0e17\u0e35\u0e48\u0e2d\u0e48\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e01\u0e25\u0e31\u0e1a\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e23\u0e27\u0e21\u0e01\u0e31\u0e1a LSTM \u0e1b\u0e01\u0e15\u0e34\u0e41\u0e25\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e42\u0e21\u0e40\u0e14\u0e25\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 input \u0e44\u0e14\u0e49\u0e14\u0e35\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19 \u0e2a\u0e48\u0e27\u0e19 2-layers Bi-LSTM \u0e19\u0e31\u0e49\u0e19\u0e01\u0e47\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e19\u0e33 Bi-LSTM 2 layers \u0e21\u0e32\u0e0b\u0e49\u0e2d\u0e19\u0e01\u0e31\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e1b\u0e23\u0e30\u0e21\u0e27\u0e25\u0e1c\u0e25\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e44\u0e14\u0e49\u0e21\u0e32\u0e01\u0e02\u0e36\u0e49\u0e19\u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07 \u0e43\u0e19 Workshop \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e0a\u0e49 2-layer Bi-LSTM \u0e41\u0e15\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07 architecture \u0e15\u0e23\u0e07\u0e19\u0e35\u0e49\u0e44\u0e14\u0e49\u0e15\u0e32\u0e21\u0e43\u0e08\u0e0a\u0e2d\u0e1a\u0e04\u0e23\u0e31\u0e1a","4ca8ce7e":"\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e31\u0e19\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2a\u0e34\u0e49\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e2a\u0e2d\u0e19\u0e04\u0e23\u0e31\u0e1a \u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e27\u0e48\u0e32\u0e43\u0e19 Code \u0e02\u0e49\u0e32\u0e07\u0e1a\u0e19\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e04\u0e33\u0e19\u0e27\u0e19 Validation MCC score \u0e41\u0e25\u0e30 threshold \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30 fold \u0e44\u0e27\u0e49\u0e41\u0e15\u0e48\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48 final score\/threshold \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e44\u0e1b\u0e27\u0e48\u0e32\u0e04\u0e48\u0e32 score \u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 fold \u0e19\u0e31\u0e49\u0e19\u0e2d\u0e32\u0e08\u0e22\u0e31\u0e07\u0e21\u0e35\u0e19\u0e31\u0e22\u0e22\u0e30\u0e17\u0e32\u0e07\u0e2a\u0e16\u0e34\u0e15\u0e34\u0e44\u0e21\u0e48\u0e21\u0e32\u0e01\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e08\u0e33\u0e19\u0e27\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 validation set \u0e21\u0e35\u0e19\u0e49\u0e2d\u0e22 \u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e16\u0e31\u0e14\u0e44\u0e1b \u0e40\u0e23\u0e32\u0e08\u0e30\u0e04\u0e33\u0e19\u0e27\u0e19 score\/threshold \u0e43\u0e2b\u0e21\u0e48\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46 \u0e01\u0e31\u0e19\u0e17\u0e31\u0e49\u0e07 K Folds \u0e04\u0e23\u0e31\u0e1a","abded93b":"\u0e17\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e1c\u0e25\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e23\u0e31\u0e49\u0e07\u0e08\u0e30\u0e21\u0e35 randomness \u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e49\u0e32\u0e07 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e1c\u0e21\u0e44\u0e21\u0e48\u0e17\u0e23\u0e32\u0e1a Valid MCC Scores \u0e02\u0e2d\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46\u0e17\u0e35\u0e48\u0e23\u0e31\u0e19 Workshop \u0e19\u0e35\u0e49\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e23\u0e31\u0e49\u0e07 \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21\u0e04\u0e48\u0e32 Valid MCC Score \u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 0.65-0.7 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e17\u0e35\u0e48\u0e1a\u0e48\u0e07\u0e1a\u0e2d\u0e01\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e19\u0e32\u0e22\u0e23\u0e32\u0e27\u0e46 65%-70% \u0e41\u0e25\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e17\u0e35\u0e48\u0e19\u0e48\u0e32\u0e1e\u0e2d\u0e43\u0e08\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e17\u0e35\u0e22\u0e1a\u0e01\u0e31\u0e1a performance \u0e02\u0e2d\u0e07\u0e1c\u0e39\u0e49\u0e40\u0e02\u0e49\u0e32\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19 VSB \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e04\u0e23\u0e31\u0e1a (\u0e2d\u0e31\u0e19\u0e14\u0e31\u0e1a 1 \u0e02\u0e2d\u0e07\u0e42\u0e25\u0e01\u0e17\u0e33 MCC Score \u0e44\u0e14\u0e49\u0e23\u0e32\u0e27\u0e46 0.718 \u0e41\u0e25\u0e30\u0e21\u0e35\u0e1c\u0e39\u0e49\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19 MCC \u0e40\u0e01\u0e34\u0e19 0.7 \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e2a\u0e2d\u0e07\u0e04\u0e19\u0e08\u0e32\u0e01 AI Scientists \u0e17\u0e31\u0e48\u0e27\u0e42\u0e25\u0e01\u0e23\u0e32\u0e27\u0e46 \u0e40\u0e01\u0e37\u0e2d\u0e1a 1500 \u0e17\u0e35\u0e21\u0e17\u0e31\u0e48\u0e27\u0e42\u0e25\u0e01)\n\n*\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 : * \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e14\u0e35\u0e43\u0e19 Test Set \u0e19\u0e31\u0e49\u0e19[\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48\u0e23\u0e39\u0e49\u0e01\u0e31\u0e19\u0e27\u0e48\u0e32\u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49 \u0e44\u0e14\u0e49\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e32\u0e08\u0e32\u0e01\u0e04\u0e19\u0e25\u0e30\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e01\u0e31\u0e1a Training Data](https:\/\/www.kaggle.com\/c\/vsb-power-line-fault-detection\/discussion\/87150#latest-504122) \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19 Performance \u0e1a\u0e19 Test Set \u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48\u0e23\u0e32\u0e27 0.62-0.66 \u0e04\u0e23\u0e31\u0e1a (\u0e14\u0e39\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01 LeaderBoard)","4302e16a":"## 1.2 \u0e25\u0e07\u0e21\u0e37\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 Vector \u0e08\u0e32\u0e01 Signal\n\n\u0e42\u0e14\u0e22\u0e2a\u0e34\u0e48\u0e07\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e17\u0e33\u0e2a\u0e23\u0e38\u0e1b\u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e23\u0e39\u0e1b\u0e19\u0e35\u0e49 \n\n![](https:\/\/i.ibb.co\/KjHRy8M\/signal2-Vec.jpg)\n\n\u0e02\u0e19\u0e32\u0e14\u0e02\u0e2d\u0e07 windows \u0e08\u0e30\u0e41\u0e1b\u0e23\u0e1c\u0e31\u0e19\u0e15\u0e32\u0e21\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 FEATURE_TIME_STEPS \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48 FEATURE_TIME_STEPS=160, window \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14 1\/160 \u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 (\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e41\u0e2a\u0e14\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e40\u0e21\u0e37\u0e48\u0e2d FEATURE_TIME_STEPS = 100 \u0e17\u0e33\u0e43\u0e2b\u0e49 window \u0e21\u0e35\u0e02\u0e19\u0e32\u0e14 1\/100 = 1%)\n\n\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e27\u0e48\u0e32 $x_t \\in \\mathcal{R}^D$ (\u0e43\u0e19 Workshop \u0e19\u0e35\u0e49 $D$ \u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 57 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e0a\u0e33\u0e19\u0e32\u0e0d\u0e41\u0e25\u0e49\u0e27\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\u0e19\u0e35\u0e49\u0e44\u0e14\u0e49\u0e04\u0e23\u0e31\u0e1a)","929cad7b":"\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e16\u0e39\u0e01\u0e41\u0e1a\u0e48\u0e07\u0e44\u0e27\u0e49\u0e40\u0e1a\u0e37\u0e49\u0e2d\u0e07\u0e15\u0e49\u0e19\u0e14\u0e49\u0e27\u0e22 ID \u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e44\u0e1f\u0e1f\u0e49\u0e32 3 \u0e40\u0e1f\u0e2a (`id_measurement`) \u0e42\u0e14\u0e22 `phase` \u0e08\u0e30\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1f\u0e2a\u0e17\u0e35\u0e48 0, 1 \u0e2b\u0e23\u0e37\u0e2d 2 \u0e41\u0e25\u0e30\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e42\u0e08\u0e17\u0e22\u0e4c\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15\u0e43\u0e2b\u0e49\u0e17\u0e33\u0e19\u0e32\u0e22\u0e01\u0e32\u0e23\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e22\u0e01\u0e40\u0e1b\u0e47\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e1f\u0e2a\u0e44\u0e14\u0e49 (\u0e40\u0e0a\u0e48\u0e19\u0e40\u0e1f\u0e2a 0 \u0e44\u0e21\u0e48\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e40\u0e1f\u0e2a 1 \u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07) kaggle \u0e08\u0e36\u0e07\u0e01\u0e33\u0e2b\u0e19\u0e14 `signal_id` \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e1f\u0e2a\u0e19\u0e35\u0e49\u0e41\u0e22\u0e01\u0e2d\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e01\u0e31\u0e19 \n\n\u0e41\u0e15\u0e48\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48[\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e44\u0e27\u0e49\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21](https:\/\/thaikeras.com\/community\/\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a-kaggle\/\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19-vsb-power-line-fault-detection\/#post-140)\u0e27\u0e48\u0e32\u0e01\u0e32\u0e23\u0e23\u0e27\u0e21\u0e17\u0e33\u0e19\u0e32\u0e22\u0e17\u0e31\u0e49\u0e07 3 \u0e40\u0e1f\u0e2a\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e46 \u0e01\u0e31\u0e19\u0e08\u0e30\u0e43\u0e2b\u0e49\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e35\u0e01\u0e27\u0e48\u0e32\u0e04\u0e23\u0e31\u0e1a \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e43\u0e19\u0e17\u0e32\u0e07\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e43\u0e19 notebook \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e22\u0e36\u0e14 `id_measurement` \u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e25\u0e31\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e14\u0e35 \u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d\u0e43\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e23\u0e27\u0e21\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e31\u0e49\u0e07 3\u0e40\u0e1f\u0e2a \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 (\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d 1.2)\n\n\u0e43\u0e19\u0e42\u0e04\u0e49\u0e14\u0e16\u0e31\u0e14\u0e44\u0e1b\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15 distribution \u0e02\u0e2d\u0e07 class \u0e43\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e2a\u0e2d\u0e19 **\u0e40\u0e23\u0e32\u0e08\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e43\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e31\u0e49\u0e07 8712 \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e43\u0e2b\u0e49\u0e21\u0e32\u0e19\u0e31\u0e49\u0e19\u0e21\u0e35\u0e40\u0e1e\u0e35\u0e22\u0e07 525 \u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 class 1 \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e0b\u0e36\u0e48\u0e07\u0e04\u0e34\u0e14\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07 6% \u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (Imbalance Data)**","9fffadb3":"# Step 2. \u0e2a\u0e23\u0e49\u0e32\u0e07 2-Layers Bidirectional LSTM\n\n\u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e02\u0e49\u0e32\u0e2a\u0e39\u0e48\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Deep Learning Model \u0e01\u0e31\u0e19\u0e2a\u0e31\u0e01\u0e17\u0e35\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a \u0e14\u0e49\u0e27\u0e22\u0e1e\u0e25\u0e31\u0e07\u0e02\u0e2d\u0e07 `Keras` \u0e19\u0e31\u0e49\u0e19\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e2a\u0e2d\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e21\u0e35\u0e2d\u0e22\u0e39\u0e48\u0e19\u0e31\u0e49\u0e19\u0e17\u0e33\u0e44\u0e14\u0e49\u0e07\u0e48\u0e32\u0e22\u0e14\u0e32\u0e22\u0e21\u0e32\u0e01\u0e46 \u0e40\u0e25\u0e22\u0e04\u0e23\u0e31\u0e1a\n\n## 2.1 \u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 LSTM \u0e43\u0e19\u0e21\u0e38\u0e21\u0e21\u0e2d\u0e07 BlackBox\n\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e21\u0e35\u0e25\u0e31\u0e01\u0e29\u0e13\u0e30\u0e40\u0e1b\u0e47\u0e19 Sequence of Vectors \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19 Neural Architecture \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21\u0e17\u0e35\u0e48\u0e08\u0e30\u0e21\u0e32\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e36\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e15\u0e23\u0e30\u0e01\u0e39\u0e25 RNN \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25 2-layers Bidirectional LSTM \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 RNN \u0e17\u0e35\u0e48\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e\u0e2a\u0e39\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e21\u0e32\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 vectors \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e08\u0e32\u0e01 signal data \u0e04\u0e23\u0e31\u0e1a\n\n\u0e21\u0e31\u0e19\u0e04\u0e07\u0e08\u0e30\u0e14\u0e35\u0e21\u0e32\u0e01\u0e16\u0e49\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07 RNN \u0e41\u0e25\u0e30 LSTM \u0e01\u0e31\u0e19\u0e21\u0e32\u0e1a\u0e49\u0e32\u0e07\u0e41\u0e25\u0e49\u0e27 (ThAIKeras \u0e08\u0e30\u0e17\u0e33 course \u0e2a\u0e2d\u0e19\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e04\u0e23\u0e31\u0e1a) \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e32\u0e01\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 RNN \u0e41\u0e25\u0e30 LSTM \u0e43\u0e19\u0e40\u0e0a\u0e34\u0e07\u0e25\u0e36\u0e01\u0e41\u0e19\u0e30\u0e19\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e08\u0e32\u0e01 coursera.org \u0e44\u0e1b\u0e01\u0e48\u0e2d\u0e19 \u0e41\u0e25\u0e30\u0e16\u0e49\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e04\u0e19\u0e44\u0e2b\u0e19\u0e17\u0e23\u0e32\u0e1a\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\u0e14\u0e35\u0e46 \u0e01\u0e47\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e41\u0e19\u0e30\u0e19\u0e33\u0e17\u0e48\u0e32\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e44\u0e14\u0e49\u0e43\u0e19 comments \u0e04\u0e23\u0e31\u0e1a\n\n\u0e43\u0e19\u0e21\u0e38\u0e21\u0e02\u0e2d\u0e07\u0e27\u0e34\u0e28\u0e27\u0e01\u0e23 \u0e21\u0e31\u0e19\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 LSTM \u0e43\u0e19\u0e21\u0e38\u0e21 **BlackBox** \u0e04\u0e23\u0e31\u0e1a \u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d **\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 input \u0e41\u0e25\u0e30 output** \u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07 \n\nBlackBox Diagram \u0e02\u0e2d\u0e07 LSTM \u0e41\u0e2a\u0e14\u0e07\u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e23\u0e39\u0e1b\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a\n![](https:\/\/kvitajakub.github.io\/img\/rnn-unrolled.svg)","1b156a35":"\u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e43\u0e19 code \u0e02\u0e49\u0e32\u0e07\u0e25\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e32\u0e17\u0e33 Stratified K-Folds \u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e01\u0e47\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e27\u0e19\u0e25\u0e39\u0e1b K \u0e04\u0e23\u0e31\u0e49\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e41\u0e25\u0e30\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 Fold \u0e40\u0e0b\u0e1e\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30 Fold \u0e44\u0e27\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e08\u0e30\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e19\u0e17\u0e33\u0e19\u0e32\u0e22\u0e43\u0e19\u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07\n\n\u0e43\u0e19\u0e01\u0e32\u0e23\u0e1e\u0e34\u0e08\u0e32\u0e23\u0e13\u0e32\u0e27\u0e48\u0e32\u0e42\u0e21\u0e40\u0e14\u0e25\u0e44\u0e2b\u0e19\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e19\u0e31\u0e49\u0e19 \u0e27\u0e34\u0e18\u0e35\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e01\u0e47\u0e04\u0e37\u0e2d\u0e40\u0e23\u0e32\u0e04\u0e33\u0e19\u0e27\u0e19\u0e04\u0e48\u0e32 MCC \u0e43\u0e19\u0e17\u0e38\u0e01\u0e46 \u0e23\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e2d\u0e19 (Epoch) \u0e41\u0e25\u0e30\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01 update \u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e48\u0e32 MCC \u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e44\u0e27\u0e49\u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e1a","58a2354c":"## 2.3 \u0e17\u0e33 Stratified K-Folds \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e41\u0e25\u0e30\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e02\u0e2d\u0e07\u0e42\u0e21\u0e40\u0e14\u0e25\n\n\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e1d\u0e19\u0e2b\u0e23\u0e37\u0e2d\u0e2a\u0e2d\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e35\u0e22\u0e19\u0e23\u0e39\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e22\u0e01\u0e41\u0e22\u0e30\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e01\u0e23\u0e30\u0e41\u0e2a\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e17\u0e35\u0e48\u0e14\u0e35\u0e41\u0e25\u0e30\u0e44\u0e21\u0e48\u0e14\u0e35 \u0e41\u0e25\u0e30\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e17\u0e35\u0e48\u0e22\u0e32\u0e01\u0e43\u0e19\u0e2a\u0e2d\u0e07\u0e1b\u0e23\u0e30\u0e40\u0e14\u0e47\u0e19 \u0e04\u0e37\u0e2d (1) \u0e40\u0e23\u0e32\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e19\u0e49\u0e2d\u0e22 \u0e41\u0e25\u0e30 (2) \u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e19\u0e49\u0e2d\u0e22\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e22\u0e31\u0e07\u0e21\u0e35 Imbalance Data \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e27\u0e31\u0e14 performance \u0e14\u0e49\u0e27\u0e22 Stratified K-Folds \n\n\u0e2d\u0e48\u0e32\u0e19[\u0e40\u0e2b\u0e15\u0e38\u0e1c\u0e25\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e27\u0e31\u0e14\u0e1c\u0e25\u0e14\u0e49\u0e27\u0e22 Stratified K-Folds \u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21 ThAIKeras](https:\/\/thaikeras.com\/community\/\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a-kaggle\/\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19-vsb-power-line-fault-detection\/#post-143)\u0e04\u0e23\u0e31\u0e1a\n\n![\u0e23\u0e39\u0e1b\u0e08\u0e32\u0e01 SciKit-Learn](https:\/\/i.ibb.co\/LrB6kdH\/518-CC87-A-8-C35-4-BCD-94-A2-54186-EB94-A64.jpg)\n\n\u0e43\u0e19\u0e17\u0e32\u0e07\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23\u0e17\u0e33 Stratified K-Folds \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e44\u0e14\u0e49\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1a\u0e23\u0e23\u0e17\u0e31\u0e14\u0e40\u0e14\u0e35\u0e22\u0e27\u0e14\u0e49\u0e27\u0e22\u0e1e\u0e25\u0e31\u0e07\u0e02\u0e2d\u0e07 SciKit-Learn Library \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e01\u0e47\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e15\u0e48\u0e17\u0e33\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e44\u0e1b K \u0e04\u0e23\u0e31\u0e49\u0e07 (\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e08\u0e32\u0e01\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `N_SPLITS`) \u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e42\u0e21\u0e40\u0e14\u0e25 K \u0e04\u0e23\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49\u0e41\u0e21\u0e49\u0e19\u0e08\u0e30\u0e40\u0e2a\u0e35\u0e22\u0e40\u0e27\u0e25\u0e32\u0e02\u0e36\u0e49\u0e19 K \u0e40\u0e17\u0e48\u0e32 \u0e41\u0e15\u0e48\u0e01\u0e47\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e14\u0e2a\u0e2d\u0e1a (validation set) \u0e40\u0e1e\u0e34\u0e48\u0e21\u0e02\u0e36\u0e49\u0e19 K \u0e40\u0e17\u0e48\u0e32 \u0e41\u0e25\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e21\u0e35\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 K \u0e42\u0e21\u0e40\u0e14\u0e25\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e42\u0e21\u0e40\u0e14\u0e25\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e21\u0e32\u0e0a\u0e48\u0e27\u0e22\u0e01\u0e31\u0e19\u0e17\u0e33\u0e19\u0e32\u0e22\u0e43\u0e2b\u0e49\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e02\u0e36\u0e49\u0e19\u0e44\u0e14\u0e49 (K-Fold Ensemble)","bbb3bbd3":"# \u0e1a\u0e17\u0e2a\u0e48\u0e07\u0e17\u0e49\u0e32\u0e22\nWorkshop \u0e19\u0e35\u0e49\u0e01\u0e47\u0e08\u0e1a\u0e01\u0e31\u0e19\u0e44\u0e1b\u0e41\u0e25\u0e49\u0e27\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e40\u0e22\u0e2d\u0e30\u0e01\u0e47\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e32\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e23\u0e34\u0e07 \u0e08\u0e30\u0e21\u0e35\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e08\u0e38\u0e01\u0e08\u0e34\u0e01\u0e40\u0e0a\u0e48\u0e19\u0e19\u0e35\u0e49\u0e40\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e1a  \u0e16\u0e49\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e21\u0e35\u0e04\u0e33\u0e16\u0e32\u0e21\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e16\u0e32\u0e21\u0e44\u0e14\u0e49\u0e17\u0e38\u0e01\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e43\u0e19 comments \u0e02\u0e49\u0e32\u0e07\u0e25\u0e48\u0e32\u0e07\u0e2b\u0e23\u0e37\u0e2d[\u0e43\u0e19\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e04\u0e23\u0e31\u0e1a](https:\/\/thaikeras.com\/community\/\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a-kaggle\/\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19-vsb-power-line-fault-detection\/) \n\nThAIKeras.com \u0e04\u0e37\u0e2d\u0e0a\u0e38\u0e21\u0e0a\u0e19\u0e41\u0e25\u0e01\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49 AI, \u0e41\u0e25\u0e30\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19 Professional AI Consultant \u0e22\u0e34\u0e19\u0e14\u0e35\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e04\u0e23\u0e31\u0e1a","5d67bc5c":"## \u0e27\u0e31\u0e14\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e14\u0e49\u0e27\u0e22 Matthew Correlation Coefficient (MCC)\n\n\u0e43\u0e19\u0e42\u0e08\u0e17\u0e22\u0e4c\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e19\u0e35\u0e49\u0e17\u0e32\u0e07\u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e44\u0e14\u0e49\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e27\u0e48\u0e32\u0e08\u0e30\u0e43\u0e2b\u0e49\u0e27\u0e31\u0e14\u0e1c\u0e25\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e14\u0e49\u0e27\u0e22 MCC \u0e0b\u0e36\u0e48\u0e07\u0e21\u0e35\u0e2a\u0e39\u0e15\u0e23\u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\n\\begin{equation*}\n\\text{MCC} = \\frac{ \\mathit{TP} \\times \\mathit{TN} - \\mathit{FP} \\times \\mathit{FN} } {\\sqrt{ (\\mathit{TP} + \\mathit{FP}) ( \\mathit{TP} + \\mathit{FN} ) ( \\mathit{TN} + \\mathit{FP} ) ( \\mathit{TN} + \\mathit{FN} ) } }\n\\end{equation*}\n\n\u0e42\u0e14\u0e22 $TP, TN, FP, FN$ \u0e04\u0e37\u0e2d True Positive\/Negative, False Positive\/Negative \u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a \u0e41\u0e25\u0e30\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48\u0e1c\u0e21\u0e40\u0e02\u0e35\u0e22\u0e19\u0e41\u0e22\u0e01\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e44\u0e27\u0e49\u0e43\u0e19[\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e19\u0e35\u0e49](https:\/\/www.kaggle.com\/ratthachat\/demythifying-matthew-correlation-coefficients-mcc) \u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08 MCC \u0e27\u0e48\u0e32\u0e27\u0e31\u0e14\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e43\u0e19\u0e21\u0e38\u0e21\u0e2d\u0e07\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a \n\n> $MCC = (A + B - 1)*C$ \u0e42\u0e14\u0e22 \n> * $A$ = \u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33 (Precision)\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e32\u0e22\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e1a\u0e27\u0e01\n> * $B$ = \u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e32\u0e22\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e1a\n> * $C$ = \u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e32\u0e22 \u201c\u0e2a\u0e31\u0e14\u0e2a\u0e48\u0e27\u0e19\u201d \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e1a\u0e27\u0e01\u0e41\u0e25\u0e30\u0e25\u0e1a","33e0cd77":"\u0e14\u0e39\u0e46 \u0e41\u0e25\u0e49\u0e27\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32 (class 0) \u0e01\u0e31\u0e1a\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32 (class 1) \u0e41\u0e17\u0e1a\u0e44\u0e21\u0e48\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19\u0e40\u0e25\u0e22\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a\u0e43\u0e19 Raw Signal \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e27\u0e32\u0e21\u0e22\u0e32\u0e01\u0e02\u0e2d\u0e07\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e19\u0e35\u0e49 \u0e2a\u0e48\u0e27\u0e19\u0e43\u0e19\u0e2a\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e19\u0e35\u0e49 Denoised Signal \u0e40\u0e1e\u0e2d\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e40\u0e2b\u0e47\u0e19\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e44\u0e14\u0e49\u0e40\u0e25\u0e47\u0e01\u0e19\u0e49\u0e2d\u0e22\u0e04\u0e23\u0e31\u0e1a","5b7d64bc":"## 3.2 \u0e27\u0e31\u0e14\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e Validation MCC Score\n\n\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 Test Data \u0e43\u0e19\u0e23\u0e39\u0e1b Vector \u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2a\u0e34\u0e49\u0e19\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e19\u0e33 K Models \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e21\u0e32\u0e17\u0e33\u0e19\u0e32\u0e22\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3 \u0e40\u0e1f\u0e2a\u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a\n\n\u0e01\u0e48\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e2b\u0e32 Threshold \u0e17\u0e35\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e23\u0e27\u0e21\u0e17\u0e31\u0e49\u0e07 MCC Score \u0e1a\u0e19\u0e17\u0e31\u0e49\u0e07 K-Folds \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e40\u0e21\u0e34\u0e19 Performance \u0e40\u0e1a\u0e37\u0e49\u0e2d\u0e07\u0e15\u0e49\u0e19\u0e01\u0e31\u0e19\u0e01\u0e48\u0e2d\u0e19","57871fcc":"\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e02\u0e2d\u0e07 Signal \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e2d\u0e32\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e01\u0e47\u0e08\u0e30\u0e0a\u0e36\u0e49\u0e19\u0e01\u0e31\u0e1a\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `SIGNAL_TYPE` \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e0b\u0e47\u0e15\u0e44\u0e27\u0e49\u0e43\u0e19\u0e15\u0e2d\u0e19\u0e15\u0e49\u0e19\u0e02\u0e2d\u0e07 Notebook \u0e04\u0e23\u0e31\u0e1a \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e0b\u0e47\u0e15\u0e04\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 `both` \u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e19\u0e33\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e31\u0e49\u0e07 raw \u0e41\u0e25\u0e30 denoised \u0e21\u0e32\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e19\u0e17\u0e33\u0e43\u0e2b\u0e49 \u0e21\u0e34\u0e15\u0e34\u0e02\u0e2d\u0e07\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30 window \u0e40\u0e23\u0e32\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14\u0e43\u0e2b\u0e0d\u0e48\u0e02\u0e36\u0e49\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e2d\u0e07\u0e40\u0e17\u0e48\u0e32\u0e04\u0e23\u0e31\u0e1a","ef3712ed":"## 2.2 \u0e2a\u0e23\u0e49\u0e32\u0e07 0\/1 output \u0e14\u0e49\u0e27\u0e22 Neural Network Layers \u0e2d\u0e37\u0e48\u0e19\u0e46\n\n\u0e43\u0e19\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e21\u0e35 Input \u0e40\u0e1b\u0e47\u0e19 Sequence of Vectors \u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27 (\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e17\u0e33\u0e43\u0e19 Step 1) \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e08\u0e36\u0e07\u0e2a\u0e21\u0e40\u0e2b\u0e15\u0e38\u0e2a\u0e21\u0e1c\u0e25\u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e19\u0e33 Model LSTM \u0e21\u0e32\u0e43\u0e0a\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e08\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e1e\u0e22\u0e32\u0e01\u0e23\u0e13\u0e4c\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e44\u0e1f\u0e1f\u0e49\u0e32\u0e17\u0e35\u0e48\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e19\u0e35\u0e49 \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e14\u0e35\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 LSTM \u0e19\u0e31\u0e49\u0e19\u0e01\u0e47\u0e21\u0e35 output \u0e40\u0e1b\u0e47\u0e19 Sequence of Vectors \u0e14\u0e49\u0e27\u0e22\u0e14\u0e31\u0e07\u0e20\u0e32\u0e1e \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e41\u0e1b\u0e25\u0e07 output \u0e02\u0e2d\u0e07 LSTM \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e17\u0e33\u0e19\u0e32\u0e22\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 class 0 \u0e2b\u0e23\u0e37\u0e2d 1\n\n\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e07\u0e48\u0e32\u0e22\u0e46 \u0e01\u0e47\u0e04\u0e37\u0e2d\u0e40\u0e23\u0e32\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e15\u0e48\u0e19\u0e33 Neural Network layers \u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e21\u0e35 inputs \u0e40\u0e1b\u0e47\u0e19 Sequence of Vectors \u0e41\u0e25\u0e30\u0e21\u0e35 output \u0e40\u0e1b\u0e47\u0e19 1-vector \u0e21\u0e32\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a 2-layer Bi-LSTM \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e17\u0e48\u0e32\u0e19\u0e35\u0e49\u0e40\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e1a\n\nLayer \u0e17\u0e35\u0e48\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e14\u0e31\u0e07\u0e01\u0e25\u0e48\u0e32\u0e27\u0e21\u0e35\u0e2b\u0e25\u0e32\u0e22\u0e0a\u0e19\u0e34\u0e14 \u0e40\u0e0a\u0e48\u0e19 MaxPooling (\u0e43\u0e19 Keras \u0e40\u0e23\u0e35\u0e22\u0e01 `GlobalMaxPooling1D`) \u0e17\u0e35\u0e48\u0e23\u0e31\u0e1a Input 3D-array $(N, T, HID)$ \u0e40\u0e2b\u0e25\u0e37\u0e2d $(N,HID)$ \u0e42\u0e14\u0e22\u0e23\u0e27\u0e21 information \u0e08\u0e32\u0e01\u0e17\u0e38\u0e01\u0e46 time steps \u0e43\u0e19 $T$ \u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23 return \u0e04\u0e48\u0e32 max \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e21\u0e34\u0e15\u0e34 $d \\in {1,...,HID}$ \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07 \u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49 Layer `GlobalAveragePooling1D` \u0e01\u0e47\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e04\u0e25\u0e49\u0e32\u0e22\u0e46 \u0e01\u0e31\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e15\u0e48\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e08\u0e32\u0e01 return \u0e04\u0e48\u0e32 max \u0e40\u0e1b\u0e47\u0e19\u0e04\u0e48\u0e32 average \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e21\u0e34\u0e15\u0e34\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e42\u0e14\u0e22\u0e43\u0e19\u0e42\u0e21\u0e40\u0e14\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e23\u0e31\u0e01\u0e29\u0e32 information \u0e43\u0e2b\u0e49\u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e40\u0e23\u0e32\u0e01\u0e47\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e19\u0e33\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e2d\u0e07 layers \u0e19\u0e35\u0e49\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e19\u0e04\u0e23\u0e31\u0e1a\u0e17\u0e33\u0e43\u0e2b\u0e49 output \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e1b\u0e47\u0e19 $(N,2*HID)$ \u0e2b\u0e23\u0e37\u0e2d $(2904, 128)$ \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e04\u0e48\u0e32 `HID=64` (\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48 Workshop \u0e19\u0e35\u0e49\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e21\u0e32\u0e43\u0e19\u0e15\u0e2d\u0e19\u0e41\u0e23\u0e01)\n\n\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e41\u0e15\u0e48\u0e25\u0e30 Example \u0e40\u0e23\u0e32\u0e16\u0e39\u0e01\u0e41\u0e17\u0e19\u0e14\u0e49\u0e27\u0e22 vector 1D \u0e1b\u0e01\u0e15\u0e34 (128 \u0e21\u0e34\u0e15\u0e34) \u0e41\u0e25\u0e49\u0e27\u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e16\u0e31\u0e14\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49\u0e01\u0e47\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Vector functional \u0e17\u0e35\u0e48\u0e23\u0e31\u0e1a input \u0e40\u0e1b\u0e47\u0e19 128 \u0e21\u0e34\u0e15\u0e34\u0e41\u0e25\u0e49\u0e27\u0e2a\u0e48\u0e07\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e08\u0e33\u0e19\u0e27\u0e19\u0e08\u0e23\u0e34\u0e07 1 \u0e21\u0e34\u0e15\u0e34\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e0b\u0e36\u0e48\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22 layer \u0e17\u0e35\u0e48\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d Fully Connected layer (Keras \u0e40\u0e23\u0e35\u0e22\u0e01 `Dense`) \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07\n\n\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23\u0e01\u0e32\u0e23\u0e31\u0e19\u0e15\u0e35\u0e27\u0e48\u0e32 output \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07 [0,1] \u0e2b\u0e23\u0e37\u0e2d\u0e41\u0e17\u0e19\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e44\u0e1f 3 \u0e40\u0e1f\u0e2a\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e44\u0e14\u0e49\u0e42\u0e14\u0e22\u0e40\u0e25\u0e37\u0e2d\u0e01 `activation=sigmoid` \u0e43\u0e19 `Dense` layer \u0e04\u0e23\u0e31\u0e1a\n\n\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e0a\u0e35\u0e48\u0e22\u0e27\u0e0a\u0e32\u0e0d\u0e41\u0e25\u0e49\u0e27\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e25\u0e2d\u0e07\u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21 Model \u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07\u0e04\u0e23\u0e31\u0e1a \u0e40\u0e0a\u0e48\u0e19 \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e40\u0e1e\u0e34\u0e48\u0e21 `Dropout` \u0e2b\u0e23\u0e37\u0e2d `BatchNormalization` layers \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e44\u0e14\u0e49\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e14\u0e35\u0e22\u0e34\u0e48\u0e07\u0e02\u0e36\u0e49\u0e19\u0e01\u0e47\u0e44\u0e14\u0e49","414533ee":"\u0e44\u0e1f\u0e25\u0e4c `submission.csv` \u0e40\u0e1b\u0e47\u0e19\u0e04\u0e33\u0e15\u0e2d\u0e1a\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e25\u0e2d\u0e07\u0e01\u0e14 submission \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e17\u0e35\u0e48\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2a\u0e34\u0e49\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e14\u0e39\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32\u0e44\u0e14\u0e49\u0e04\u0e30\u0e41\u0e19\u0e19 MCC \u0e43\u0e19 test data \u0e40\u0e17\u0e48\u0e32\u0e44\u0e23\u0e04\u0e23\u0e31\u0e1a \u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e02\u0e2d\u0e07\u0e42\u0e04\u0e49\u0e14\u0e43\u0e19 Notebook \u0e19\u0e35\u0e49\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e40\u0e27\u0e25\u0e32\u0e40\u0e01\u0e37\u0e2d\u0e1a\u0e46 1 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07\u0e04\u0e23\u0e31\u0e1a\n\n\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e19\u0e35\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e19\u0e38\u0e01 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e25\u0e2d\u0e07\u0e17\u0e33\u0e19\u0e32\u0e22\u0e1c\u0e25\u0e1a\u0e19 Test Data \u0e14\u0e49\u0e27\u0e22 threshold \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e43\u0e0a\u0e48 `best_threshold` \u0e01\u0e31\u0e19\u0e14\u0e39\u0e14\u0e49\u0e27\u0e22\u0e04\u0e23\u0e31\u0e1a \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c submission \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30 threshold \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e25\u0e2d\u0e07\u0e2a\u0e48\u0e07\u0e44\u0e1b\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e04\u0e48\u0e32 MCC \u0e02\u0e2d\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30 threshold \u0e01\u0e31\u0e19\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32\u0e21\u0e35\u0e04\u0e48\u0e32\u0e40\u0e17\u0e48\u0e32\u0e44\u0e23 \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 threshold \u0e19\u0e31\u0e49\u0e19\u0e2a\u0e48\u0e07\u0e1c\u0e25\u0e15\u0e48\u0e2d performance \u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e04\u0e23\u0e31\u0e1a","f55d2c0e":"\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Deep Learning Model \u0e08\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22\u0e04\u0e48\u0e32\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 **\u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19** $p_t \\in [0,1]$ \u0e41\u0e15\u0e48\u0e43\u0e19\u0e01\u0e32\u0e23\u0e04\u0e33\u0e19\u0e27\u0e19\u0e04\u0e48\u0e32 MCC \u0e40\u0e23\u0e32\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e19\u0e32\u0e22\u0e04\u0e33\u0e15\u0e2d\u0e1a\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22 $\\hat{y}_t$ \u0e40\u0e1b\u0e47\u0e19 0 \u0e2b\u0e23\u0e37\u0e2d 1 \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 threshold $T$ \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e27\u0e48\u0e32\u0e04\u0e27\u0e23\u0e08\u0e30\u0e17\u0e33\u0e19\u0e32\u0e22 0 \u0e2b\u0e23\u0e37\u0e2d 1 \u0e14\u0e31\u0e07\u0e19\u0e35\u0e49\n\n\\begin{equation}   \n\\hat{y}_t = \n\\begin{cases} \n1 & if \\  p_t > T \\\\ \n0 & otherwise\n\\end{cases}\n\\end{equation}\n\n\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e23\u0e07\u0e44\u0e1b\u0e15\u0e23\u0e07\u0e21\u0e32\u0e04\u0e37\u0e2d\u0e08\u0e30\u0e27\u0e19\u0e25\u0e39\u0e1b search \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2b\u0e32\u0e04\u0e48\u0e32 $T$ \u0e17\u0e35\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e42\u0e14\u0e22\u0e27\u0e31\u0e14\u0e1c\u0e25\u0e08\u0e32\u0e01\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e17\u0e14\u0e2a\u0e2d\u0e1a Stratified K-Folds \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49[\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21 ThAIKeras \u0e04\u0e23\u0e31\u0e1a](https:\/\/thaikeras.com\/community\/\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a-kaggle\/\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19-vsb-power-line-fault-detection\/#post-143)","89d1ff38":"\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27\u0e19\u0e30\u0e04\u0e23\u0e31\u0e1a \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e17\u0e33\u0e19\u0e32\u0e22\u0e43\u0e19\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a\u0e44\u0e1f\u0e25\u0e4c CSV \u0e15\u0e32\u0e21\u0e17\u0e35\u0e48 Kaggle \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e44\u0e27\u0e49","02b95290":"# Step 1. \u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Signal \u0e43\u0e2b\u0e49\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e23\u0e39\u0e1b Vector\n\n\u0e43\u0e19 `..\/input` \u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 3 folders \u0e04\u0e23\u0e31\u0e1a \u0e42\u0e14\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e23\u0e34\u0e07\u0e46 \u0e17\u0e35\u0e48\u0e17\u0e32\u0e07 Kaggle \u0e41\u0e25\u0e30 VSB \u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49\u0e19\u0e31\u0e49\u0e19\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Signal IDs \u0e41\u0e25\u0e30 Class (ID \u0e43\u0e14\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e25\u0e32\u0e2a 1 [\u0e44\u0e1f\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32] \u0e2b\u0e23\u0e37\u0e2d 0 [\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32]) \u0e0b\u0e36\u0e48\u0e07\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19 folder `vsb-power-line-fault-detection` \u0e04\u0e23\u0e31\u0e1a\n\n\u0e2a\u0e48\u0e27\u0e19\u0e2d\u0e35\u0e01 2 folders \u0e04\u0e37\u0e2d\n* `5-fold-lstm-attention-fully-commented-0-694` \u0e08\u0e30\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Raw Signal \u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e40\u0e1b\u0e47\u0e19 Vector \u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27\u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e43\u0e19 **\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 1.** \u0e02\u0e49\u0e32\u0e07\u0e15\u0e49\u0e19\u0e04\u0e23\u0e31\u0e1a\n\n* `vsb-wavelet-denoised` \u0e08\u0e30\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Signal \u0e17\u0e35\u0e48\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23 Denoising \u0e14\u0e49\u0e27\u0e22 Wavelet transform \u0e44\u0e27\u0e49\u0e01\u0e48\u0e2d\u0e19\u0e41\u0e25\u0e49\u0e27\u0e2d\u0e22\u0e39\u0e48 \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19 Notebook \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 signal \u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17\u0e19\u0e35\u0e49\u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 vector \u0e04\u0e23\u0e31\u0e1a\n\n## 1.1 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e21\u0e35","092dbfe7":"* **\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 1.** : \u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e43\u0e19\u0e1a\u0e2d\u0e23\u0e4c\u0e14 ThAIKeras \u0e40\u0e23\u0e32\u0e40\u0e25\u0e48\u0e32\u0e27\u0e48\u0e32 Signal Inputs \u0e2d\u0e32\u0e08\u0e40\u0e1b\u0e47\u0e19 Raw \u0e2b\u0e23\u0e37\u0e2d Denoised versions \u0e01\u0e47\u0e44\u0e14\u0e49 \u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e32\u0e08\u0e19\u0e33\u0e17\u0e31\u0e49\u0e07\u0e04\u0e39\u0e48\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e01\u0e31\u0e19\u0e01\u0e47\u0e44\u0e14\u0e49 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e43\u0e19\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07 Vectors \u0e43\u0e19 Step1. \u0e2a\u0e2d\u0e07\u0e23\u0e2d\u0e1a (Vector \u0e08\u0e32\u0e01 Raw \u0e41\u0e25\u0e30\u0e08\u0e32\u0e01 Denoised signals) \u0e0b\u0e36\u0e48\u0e07\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e19\u0e35\u0e49\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e40\u0e27\u0e25\u0e32\u0e23\u0e32\u0e27\u0e46 1 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07 \u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14\u0e40\u0e27\u0e25\u0e32 \u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e27\u0e01\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e40\u0e09\u0e1e\u0e32\u0e30 Denoised signals \u0e43\u0e19 Workshop \u0e19\u0e35\u0e49\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e41\u0e25\u0e30\u0e08\u0e30\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Raw Vectors \u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\u0e08\u0e32\u0e01 Notebook \u0e09\u0e1a\u0e31\u0e1a\u0e2d\u0e37\u0e48\u0e19\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\n\n* **\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 2.** : \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 signal \u0e41\u0e1a\u0e1a raw, denoised \u0e2b\u0e23\u0e37\u0e2d \u0e17\u0e31\u0e49\u0e07\u0e04\u0e39\u0e48 (both) \u0e42\u0e14\u0e22\u0e1b\u0e23\u0e31\u0e1a Option \u0e44\u0e14\u0e49\u0e08\u0e32\u0e01\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `SIGNAL_TYPE` \u0e43\u0e19 cell \u0e02\u0e49\u0e32\u0e07\u0e25\u0e48\u0e32\u0e07\u0e04\u0e23\u0e31\u0e1a\n\n* **\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 3.** : \u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e40\u0e23\u0e32\u0e41\u0e15\u0e01 signal \u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 $\\mathbf{x}_1, ..., \\mathbf{x}_{100}$ \u0e41\u0e15\u0e48\u0e43\u0e19 Workshop \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e0b\u0e2d\u0e22 Time steps \u0e43\u0e2b\u0e49\u0e22\u0e48\u0e2d\u0e22\u0e25\u0e07\u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 $\\mathbf{x}_1, ..., \\mathbf{x}_{160}$ \u0e41\u0e17\u0e19 \u0e2a\u0e37\u0e1a\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 **\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e2b\u0e15\u0e38 1.** \u0e02\u0e49\u0e32\u0e07\u0e15\u0e49\u0e19 \u0e17\u0e35\u0e48 Raw Vectors \u0e17\u0e35\u0e48\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e44\u0e27\u0e49\u0e41\u0e25\u0e49\u0e27\u0e19\u0e31\u0e49\u0e19\u0e21\u0e35\u0e02\u0e19\u0e32\u0e14 160 time steps \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e46 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0b\u0e47\u0e15\u0e04\u0e48\u0e32 Time steps \u0e19\u0e35\u0e49\u0e44\u0e14\u0e49\u0e43\u0e19\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `FEATURES_TIME_STEPS` \u0e02\u0e49\u0e32\u0e07\u0e25\u0e48\u0e32\u0e07 \u0e41\u0e15\u0e48\u0e16\u0e49\u0e32\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e04\u0e48\u0e32\u0e08\u0e32\u0e01 160 \u0e44\u0e1b\u0e41\u0e25\u0e49\u0e27 Workshop \u0e19\u0e35\u0e49\u0e08\u0e30\u0e23\u0e31\u0e19\u0e44\u0e14\u0e49\u0e43\u0e19\u0e42\u0e2b\u0e21\u0e14 `SIGNAL_TYPE = 'denoised'` \u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19\n\n*Credit : Notebook \u0e09\u0e1a\u0e31\u0e1a\u0e19\u0e35\u0e49\u0e14\u0e31\u0e14\u0e41\u0e1b\u0e25\u0e07\u0e21\u0e32\u0e08\u0e32\u0e01 Notebook \u0e23\u0e30\u0e14\u0e31\u0e1a\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d\u0e17\u0e2d\u0e07\u0e02\u0e2d\u0e07 Bruno \u0e0b\u0e36\u0e48\u0e07\u0e17\u0e33\u0e44\u0e27\u0e49\u0e14\u0e35\u0e21\u0e32\u0e01\u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19 VSB \u0e04\u0e23\u0e31\u0e1a \u0e02\u0e2d\u0e02\u0e2d\u0e1a\u0e1e\u0e23\u0e30\u0e04\u0e38\u0e13\u0e44\u0e27\u0e49 \u0e13 \u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e14\u0e49\u0e27\u0e22\u0e04\u0e23\u0e31\u0e1a\nhttps:\/\/www.kaggle.com\/braquino\/5-fold-lstm-attention-fully-commented-0-694 *\n\n# Step 0. \u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 Configurations \u0e41\u0e25\u0e30 Functions \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07","9edb131e":"## 3.3 \u0e17\u0e33\u0e19\u0e32\u0e22\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e1a\u0e19 Test Data \u0e14\u0e49\u0e27\u0e22 K-Fold Ensemble\n\n\u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e19\u0e35\u0e49 \u0e01\u0e47\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e04\u0e48\u0e19\u0e33 K Models \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e2a\u0e2d\u0e19\u0e08\u0e32\u0e01 Training Data \u0e21\u0e32\u0e23\u0e48\u0e27\u0e21\u0e01\u0e31\u0e19\u0e17\u0e33\u0e19\u0e32\u0e22\u0e43\u0e19 Test Data \u0e17\u0e35\u0e48\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e1b\u0e47\u0e19 Vector \u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27\u0e04\u0e23\u0e31\u0e1a\n\n\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23 K-Fold Ensemble \u0e17\u0e35\u0e48\u0e07\u0e48\u0e32\u0e22\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49\u0e43\u0e19 workshop \u0e19\u0e35\u0e49\u0e01\u0e47\u0e04\u0e37\u0e2d\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e2b\u0e49\u0e17\u0e31\u0e49\u0e07 K models \u0e17\u0e33\u0e19\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13 3\u0e40\u0e1f\u0e2a \u0e41\u0e15\u0e48\u0e25\u0e30\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e43\u0e19 Test Data \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32 \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e44\u0e14\u0e49\u0e04\u0e48\u0e32 \"\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\" \u0e21\u0e32\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 K \u0e04\u0e48\u0e32 \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30 \"\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\" \u0e04\u0e48\u0e32\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e31\u0e49\u0e07 K \u0e19\u0e35\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e44\u0e14\u0e49\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22 \u0e17\u0e35\u0e48\u0e08\u0e30\u0e1a\u0e48\u0e07\u0e0a\u0e35\u0e49\u0e27\u0e48\u0e32\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e14\u0e31\u0e07\u0e01\u0e25\u0e48\u0e32\u0e27\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e35\u0e48\u0e1a\u0e01\u0e1e\u0e23\u0e48\u0e2d\u0e07\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48\n\n\u0e41\u0e25\u0e30\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e08\u0e32\u0e01 \"\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\" \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e33\u0e15\u0e2d\u0e1a class 0 \u0e2b\u0e23\u0e37\u0e2d 1 \u0e19\u0e31\u0e49\u0e19\u0e01\u0e47\u0e08\u0e30\u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e01\u0e31\u0e19\u0e17\u0e35\u0e48\u0e04\u0e48\u0e32 \"\u0e04\u0e27\u0e32\u0e21\u0e19\u0e48\u0e32\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\" \u0e19\u0e31\u0e49\u0e19\u0e21\u0e35\u0e04\u0e48\u0e32\u0e21\u0e32\u0e01\u0e01\u0e27\u0e48\u0e32\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 `best_threshold` \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2b\u0e32\u0e21\u0e32\u0e43\u0e19\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d 3.2 \u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48\n\n\u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49\u0e21\u0e35\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e01\u0e47\u0e04\u0e37\u0e2d \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e43\u0e19\u0e01\u0e32\u0e23\u0e41\u0e02\u0e48\u0e07\u0e04\u0e23\u0e31\u0e49\u0e07\u0e19\u0e35\u0e49\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e2b\u0e49\u0e17\u0e33\u0e19\u0e32\u0e22\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e41\u0e22\u0e01\u0e01\u0e31\u0e19\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e40\u0e1f\u0e2a \u0e41\u0e15\u0e48\u0e43\u0e19\u0e01\u0e23\u0e30\u0e1a\u0e27\u0e19\u0e01\u0e32\u0e23\u0e41\u0e01\u0e49\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e19\u0e31\u0e49\u0e19\u0e43\u0e0a\u0e49\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e17\u0e31\u0e49\u0e07 3\u0e40\u0e1f\u0e2a\u0e21\u0e31\u0e01\u0e08\u0e30\u0e21\u0e35 class \u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19 \u0e41\u0e25\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e22\u0e38\u0e1a 3\u0e40\u0e1f\u0e2a\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07  1\u0e04\u0e33\u0e17\u0e33\u0e19\u0e32\u0e22 \n\n\u0e14\u0e31\u0e07\u0e19\u0e31\u0e49\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e48\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e44\u0e1b\u0e15\u0e23\u0e27\u0e08\u0e2a\u0e2d\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e41\u0e21\u0e48\u0e19\u0e22\u0e33 \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07 copy \u0e1c\u0e25\u0e01\u0e32\u0e23\u0e17\u0e33\u0e19\u0e32\u0e22\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 3\u0e40\u0e1f\u0e2a \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e2d\u0e2d\u0e01\u0e40\u0e1b\u0e47\u0e19 3\u0e0a\u0e38\u0e14 (\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e2b\u0e21\u0e32\u0e22\u0e27\u0e48\u0e32 \u0e40\u0e23\u0e32\u0e17\u0e32\u0e22 class 0 \u0e2b\u0e23\u0e37\u0e2d 1 \u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e19\u0e17\u0e31\u0e49\u0e07 3 \u0e40\u0e1f\u0e2a) \u0e0b\u0e36\u0e48\u0e07\u0e01\u0e32\u0e23 copy \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e19\u0e35\u0e49\u0e17\u0e33\u0e44\u0e14\u0e49\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e02\u0e2d\u0e07 numpy \u0e17\u0e35\u0e48\u0e0a\u0e37\u0e48\u0e2d\u0e27\u0e48\u0e32 `np.repeat` \u0e14\u0e31\u0e07\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e19\u0e42\u0e04\u0e49\u0e14\u0e04\u0e23\u0e31\u0e1a"}}