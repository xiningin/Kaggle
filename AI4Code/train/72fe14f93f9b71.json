{"cell_type":{"5816d77c":"code","11138f36":"code","87351778":"code","79a041a5":"code","8d3622aa":"code","bf4f38c2":"code","e2528290":"code","ad4cf5c2":"code","80542bc0":"code","49d3e521":"code","7c5ba353":"markdown","c1fc7145":"markdown","a4ab4238":"markdown","65678eb0":"markdown","9c64764a":"markdown","38feaac6":"markdown","aabd70f8":"markdown","15253840":"markdown","1214a6d2":"markdown"},"source":{"5816d77c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nimport matplotlib.pyplot as pplt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","11138f36":"# We shall use matplotlibe to draw the point on 2D plane. In the future kernels, i would also show how to use Seaborn,Bokeh etc\nx=[3,4,6,7,1,2,8] #numpy array to store x values\ny=[1,2,3,8,3,5,3] #numpy array to store y values\npoint =[5,4]\npplt.scatter(x,y,s=200,c='blue')\npplt.scatter(point[0],point[1],s=200,c='green')","87351778":"#Problem Statement: Find the 1 nearest neighbor of a given point\n# If you remember the basics of programming, we use functions or procedures to develop programs, the advantages include reusability, modularity, \n# ease of management etc.\n\n#pdataset contains the points in which, we shall identify the nearest neighbor\n#point contains the point and k is the number of neighbor returned back \n# In order to keep things simple, i am using sequential approach, like reading the points dataset in sequential order. \n# Later, we shall see, how to improve this algorithm further to overcome some of the challenges\/limitations of K Neareast Neighbors\ndef k_nearest_neighbors(pdataset,point,k):    \n    #minimum distance will store the minimum euclidean distance of a point in the space\n    minimum_dist = 0.0\n    # we define the counter to store first distance without any condition as we are following the sequential approach\n    counter = 0    \n    #npoint will store the closest point\/neighbor of the provided point\n    npoint=[]    \n    #Lets traverse the loop for all points in the dataset\n    for pn in pdataset:\n        # instead of writing our own function for calculating difference and square roots, we would use numpy libraray to calculate \n        #Euclidean distance of each point in our dataset from the given point\n        dist = np.sqrt(np.sum(np.square(pn-point)))        \n        #the following condition will assign first point without any checking and we assume the first point has the minimum distance to  \n        # the given point\n        if counter==0:\n            minimum_dist=dist\n            npoint=pn\n        # However, when we have our first our, then we need to compare the calculaed distance and if the distance is minimum with the existing \n        # value of mimimum_dist, it indicates we have a new result, So we overwrite the minimym_dist and npoint with their new values\n        else:\n            if dist<minimum_dist:\n                npoint=pn\n                minimum_dist = dist        \n        counter = counter + 1        \n    #Once the above loop will finish, it will store the closest point in npoint and store the minimum distance in  minimum_distance\n    # and in the end, we shall return the closest neighbor\n    print(\"minimum distance \",minimum_dist)\n    return  npoint","79a041a5":"# Lets define the dataset using X and Y\n#initially, we declare our datasets with 0s. As we have 14 values.So we would initialize our dataset with 14 values and reshape it with (7,2)\n# which means we have now 2D array, if you don't understand the shape, arrays and 2D arrays. Don't worry, I would add numpy tutorial shortly to \n# make you expert. At this stage, just remember, following statement will declare the points x and y in an array shape to calculate euclidean\n#distance\ndataset = (np.zeros(14)).reshape(7,2)\n#Assign x values to fist index\/dimension\ndataset[...,0]=x\n#Assign y values to Second dimension\ndataset[...,1]=y\n# if you want print the following statment to see the values at both index. \"...\" is used when, we want to display all values at one particular\n# index in multi-dimensional array\nprint(dataset[...,0])\nprint(dataset[...,1])\n# Last to verfiy the shape before callling our K Nearest Neighbor algorithm With K=1\ndataset.shape\nresult_point=k_nearest_neighbors(dataset,point,1)","8d3622aa":"#Lets plot the dataset,point and the nearest neighbor to varify the algorithm\nprint(result_point)\npplt.scatter(dataset[...,0],dataset[...,1],s=200,c='blue')\npplt.scatter(point[0],point[1],s=200,c='green')\npplt.scatter(result_point[0],result_point[1],s=200,c='red')","bf4f38c2":"def adjust_dist_weights(npointdic,pnpointindex,pdist,pnpoints,counter,k):         \n    npointdic[pdist]=pnpoints      \n    pnpointindex[pdist]=counter\n    rnpoints={}    \n    npointindex={}\n    \n    count=0\n    if counter<k:\n        rnpoints=npointdic\n        npointindex=pnpointindex\n    else:                    \n        for key in sorted(npointdic.keys()):\n            if count<k:\n                rnpoints[key]=npointdic[key]                \n                npointindex[key]=pnpointindex[key]\n            else:\n                break                \n                #rnpoints=sorted(npointdic.keys())\n            count = count + 1    \n    #print(rnpoints)    \n    return rnpoints,npointindex","e2528290":"def k_nearest_neighbors(pdataset,point,k):\n    old_dist = []\n    counter = 0    \n    npoint={}\n    npointindex={}\n#     for i in range(k):\n#         npoint[float(i)] = [0.0,0.0]\n#         print(i)\n    \n    for pn in pdataset:\n        dist = np.sqrt(np.sum(np.square(pn-point)))        \n        npoint,npointindex=adjust_dist_weights(npoint,npointindex,dist,pn,counter,k)        \n        counter = counter + 1        \n#     print(\"final results\")\n#     print(npoint)\n    return  npoint,npointindex","ad4cf5c2":"mydatasets = (np.random.rand(100)*100).reshape(50,2)\nmydatasets.shape","80542bc0":"%time\npoint = [57.23345,64.3456]\nk_point,k_point_index = k_nearest_neighbors(mydatasets,point,3)\nprint(k_point.values())\nprint(k_point_index.values())","49d3e521":"pplt.scatter(mydatasets[:,0],mydatasets[:,1],s=200,c='blue')\npplt.scatter(point[0],point[1],s=200,c='green')\nfor key in k_point.keys():\n    pplt.scatter(k_point[key][0],k_point[key][1],s=200,c='red')","7c5ba353":"K Nearest Neighbor is the simplest machine learning alogorithm from understanding and implementation perspective. Besides, some major drawbacks, it still work with small, uniform dataset and classify items within tolerance level. If you find this kernel helpful, please **fork** or **upvote**. If you need description or explaination.A|dd comments and i shall reply accordingly. Thanks.","c1fc7145":"Good News! We have already solved the problem, the only remaining part is coding the above formula in python and pass the point to find the nearest neighbor. So Lets start With K=1","a4ab4238":"**Great....** You have implemented first machine learning algorithm without any complexity and with minimum mathematics and statistcs knowledge. However, Real Life is not that simple. So we need to make it ready to address real world problems. But don't worry, if you are comfortable upto this point. Rest will not cause much trouble for you. But right now, just enjoy the feeling that you have implemented your first machine learning algorithm ","65678eb0":"Now, if you are like that guy or want to start machine learning in a simplest way, you have reached to a right place. We shall start this journey of implementing machine learning algorithm without going into any complexitiy of mathematics and statistics. Even, if you are not famililar with coding, I have added  a series on How to programe in Python 3.5. \n\nNow without any further delay, let's get straight into the business","9c64764a":"Let me start this kernel with a nice little story. Once upon a time, there was guy who heard about machine learning and artificial intelligence. He was amazed by hearing how machines are beating human beings in different domains like diagnosing diseases, playing games, performing labours tasks etc. Additionally, he also heard that to start with machine learning, multiple skills are required like having good command in Mathematics, Statistics, Domain knowledge etc. \n\nIn a nutshell, he wanted to start developing machine learning code but he didn\u2019t know, where to start. \n\nGuess What!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1","38feaac6":"Problem Definition:\nWe need to identify a point based on its N number of nearest neighbors. In the start to keep things simple, I would use two dimensions for our problem space. So assume we have one point (x,y)=(5,4) and we want to find its nearest neighbor out of 10 points given below. \n\n(x1,y1)=(3,1)\n(x2,y2)= (4,2)\n(x3,y3)=(6,3)\n(x4,y4)=(7,8)\n(x5,y5)=(1,3)\n(x6,y6)=(2,5)\n(x7,y7)=(8,3)\n\nFor better understanding lets draw these points on a graph","aabd70f8":"So far, everything is very simple,if you face problem in understanding array, i would add in this kernel a link to Numpy, Pandas and Matplotlib tutorials. You can refer to them for basic understandings.","15253840":"One day, he found an amazing website **kaggle** and while, he was exploring the kernels, he found this kernel as well. Which showed him a step by step guilde to implement his first simple machine learning Algorithm. He was really happy and content with what he had learnt with this kernel. Therefore, he had **forked** and **upvote**  this kerel.. I am just kidding..:):):):):):):):)","1214a6d2":"Now, we come to the actual problem and it is finding the nearest neighbor of our green point in the above chart. At this stage, we need some help from mathematics and trust me, it is the simplest formula, we would use to solve it. We call it Euclidean distance \n\n![Euclidean Distance](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/5\/55\/Euclidean_distance_2d.svg\/220px-Euclidean_distance_2d.svg.png)\n\nIn the Euclidean plane, if p = (x1, y1) and q = (x2, y2) then the distance is given by\n\n![*](https:\/\/mat292project.weebly.com\/uploads\/2\/4\/8\/6\/24869163\/4264110_orig.png)"}}