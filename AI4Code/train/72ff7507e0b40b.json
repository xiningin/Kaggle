{"cell_type":{"e290bf8f":"code","0c7bdf53":"code","cae5ef2f":"code","80431d3e":"code","e81b939e":"code","ea753a8c":"code","5ca4d902":"code","657d39c2":"code","b5e2ccbb":"code","f72797d8":"code","5ed1e828":"code","41fcdd1f":"code","b92d5f2b":"code","a197e79e":"code","491ce583":"code","edb8a0fd":"code","d4aae41f":"code","b5c351a8":"code","196e2388":"code","230a75c4":"code","d6a6547f":"code","e66e1f4b":"code","707f3a1f":"code","cadd061c":"code","cb5ff729":"markdown","4aa8a773":"markdown","8477e1cf":"markdown","69a3d365":"markdown","6ae39d62":"markdown","30e7606a":"markdown","ca8a557c":"markdown"},"source":{"e290bf8f":"# Import some necessary libraries\nfrom IPython.display import display, Markdown, Latex\nimport json\nimport pandas as pd\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Viz config\nplt.style.use('seaborn')\ncolors = [\"#4B88A2\", \"#BC2C1A\", \"#DACC3E\", \"#EA8C55\", \"#7FB7BE\"]\npalette = sns.color_palette(colors)\nsns.set_palette(palette)\nalpha = 0.7","0c7bdf53":"raw_data_file = \"\/kaggle\/input\/netherlands-rent-properties\/properties.json\"\n\ndef load_raw_data(filepath):\n    raw_data = []\n    for line in open(filepath, 'r'):\n        raw_data.append(json.loads(line))\n    \n    df = pd.DataFrame(raw_data)\n    \n    return df\n    \ndf = load_raw_data(raw_data_file)\n\nMarkdown(f\"Successfully imported DataFrame with shape: {df.shape}.\")","cae5ef2f":"# Functions from: https:\/\/www.kaggle.com\/juangesino\/starter-netherlands-rent-properties\n\n# Define all columns that need to be flatten and the property to extract\nflatten_mapper = {\n    \"_id\": \"$oid\",\n    \"crawledAt\": \"$date\",\n    \"firstSeenAt\": \"$date\",\n    \"lastSeenAt\": \"$date\",\n    \"detailsCrawledAt\": \"$date\",\n}\n\n\n# Function to do all the work of flattening the columns using the mapper\ndef flatten_columns(df, mapper):\n    \n    # Iterate all columns from the mapper\n    for column in flatten_mapper:\n        prop = flatten_mapper[column]\n        raw_column_name = f\"{column}_raw\"\n        \n        # Check if the raw column is already there\n        if raw_column_name in df.columns:\n            # Drop the generated one\n            df.drop(columns=[column], inplace=True)\n            \n            # Rename the raw back to the original\n            df.rename(columns={ raw_column_name: column }, inplace=True)        \n    \n        # To avoid conflicts if re-run, we will rename the columns we will change\n        df.rename(columns={\n            column: raw_column_name,\n        }, inplace=True)\n\n        # Get the value inside the dictionary\n        df[column] = df[raw_column_name].apply(lambda obj: obj[prop])\n        \n    return df\n\n\ndef rename_columns(df):\n    # Store a dictionary to be able to rename later\n    rename_mapper = {}\n    \n    # snake_case REGEX pattern\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    \n    # Iterate the DF's columns\n    for column in df.columns:\n        rename_mapper[column] = pattern.sub('_', column).lower()\n        \n    # Rename the columns using the mapper\n    df.rename(columns=rename_mapper, inplace=True)\n    \n    return df\n\n\ndef parse_types(df):\n    \n    df[\"crawled_at\"] = pd.to_datetime(df[\"crawled_at\"])\n    df[\"first_seen_at\"] = pd.to_datetime(df[\"first_seen_at\"])\n    df[\"last_seen_at\"] = pd.to_datetime(df[\"last_seen_at\"])\n    df[\"details_crawled_at\"] = pd.to_datetime(df[\"details_crawled_at\"])\n    df[\"latitude\"] = pd.to_numeric(df[\"latitude\"])\n    df[\"longitude\"] = pd.to_numeric(df[\"longitude\"])\n    \n    return df","80431d3e":"def add_features(df):\n    \n    df[\"rent_per_area\"] = df[\"rent\"] \/ df[\"area_sqm\"]\n    \n    return df","e81b939e":"df = (df\n      .pipe(flatten_columns, mapper=flatten_mapper)\n      .pipe(rename_columns)\n      .pipe(parse_types)\n      .pipe(add_features)\n     )","ea753a8c":"df.columns","5ca4d902":"Markdown(f\"\"\"\nThe dataset contains **{len(df)}** observations with **{len(df.columns)}** feature (columns).\n\"\"\")","657d39c2":"df.info()","b5e2ccbb":"df.describe()","f72797d8":"cols = [\"area_sqm\", \"city\", \"property_type\", \"rent\", \"rent_per_area\"]\n\ndisplay(Markdown(\"## Top 5 Highest Rent Properties\"))\ndisplay(df[cols].sort_values(by = [\"rent\"], ascending=False).head())\n\ndisplay(Markdown(\"## Top 5 Lowest Rent Properties\"))\ndisplay(df[cols].sort_values(by = [\"rent\"], ascending=True).head())\n\ndisplay(Markdown(\"## Top 5 Highest Area Properties\"))\ndisplay(df[cols].sort_values(by = [\"area_sqm\"], ascending=False).head())\n\ndisplay(Markdown(\"## Top 5 Lowest Area Properties\"))\ndisplay(df[cols].sort_values(by = [\"area_sqm\"], ascending=True).head())\n\ndisplay(Markdown(\"## Top 5 Highest Rent per Sqm\"))\ndisplay(df[cols].sort_values(by = [\"rent_per_area\"], ascending=False).head())\n\ndisplay(Markdown(\"## Top 5 Lowest Rent per Sqm\"))\ndisplay(df[cols].sort_values(by = [\"rent_per_area\"], ascending=True).head())","5ed1e828":"output_md = \"<p float='left'>\"\n\nfor i in range(8):\n    img = df.sort_values(by = [\"area_sqm\"], ascending=False).iloc[i][\"cover_image_url\"]\n    output_md += f\"<img src='{img}' width=200 style='float: left; margin: 15px'>\"\n    \noutput_md += \"<\/p>\"\nMarkdown(output_md)","41fcdd1f":"fif, (ax1, ax2) = plt.subplots(1, 2, figsize=(22, 6))\n\nsns.boxplot(x='rent', data=df, ax=ax1, color=colors[0], boxprops=dict(alpha=alpha))\nax1.set_facecolor('white')\nax1.set_xlabel(\"Total Rent\", labelpad=14)\nax1.set_title(\"Boxplot Rent\", pad=14)\n\nsns.boxplot(x='area_sqm', data=df, ax=ax2, color=colors[1], boxprops=dict(alpha=alpha))\nax2.set_facecolor('white')\nax2.set_xlabel(\"Area (sqm)\", labelpad=14)\nax2.set_title(\"Boxplot Area\", pad=14)\n\nfix2, ax = plt.subplots(1, 1, figsize=(22,8))\nsns.boxplot(x='rent_per_area', data=df, ax=ax, color=colors[2], boxprops=dict(alpha=alpha))\nax.set_facecolor('white')\nax.set_xlabel(\"Rent per Square Meter\", labelpad=14)\nax.set_title(\"Boxplot Rent per Square Meter\", pad=14)\n\nplt.show()","b92d5f2b":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20,6))\n\nsns.distplot(df['rent'], color=colors[0], ax=ax1)\nax1.set_xlabel(\"Rent\", labelpad=14)\nax1.set_title(\"Distribution of Rent\", pad=14)\n\nsns.distplot(df['area_sqm'], color=colors[1], ax=ax2)\nax2.set_xlabel(\"Area\", labelpad=14)\nax2.set_title(\"Distribution of Area\", pad=14)\n\nsns.distplot(df['rent_per_area'], color=colors[2], ax=ax3)\nax3.set_xlabel(\"Rent per Square Meter\", labelpad=14)\nax3.set_title(\"Distribution of Rent per Square Meter\", pad=14)\n\ngrid = sns.FacetGrid(df, hue='property_type', palette=palette, height=7, aspect=3)\ngrid.map(sns.distplot, 'area_sqm', bins=50)\nax = grid.axes[0][0]\nax.legend()\nax.set_xlabel(\"Area\", labelpad=14)\nax.set_title(\"Distribution of Area by Property Type\", pad=14)\n\ngrid = sns.FacetGrid(df, hue='property_type', palette=palette, height=7, aspect=3)\ngrid.map(sns.distplot, 'rent_per_area', bins=50)\nax = grid.axes[0][0]\nax.legend()\nax.set_xlabel(\"Rent per Square Meter\", labelpad=14)\nax.set_title(\"Distribution of Rent per Square Meter by Property Type\", pad=14)\nplt.show()","a197e79e":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(25,5))\n\nax1.scatter(df['area_sqm'], df['rent'], alpha=0.2)\nax1.set_xlabel(r'Area $(m^2)$', fontsize=15)\nax1.set_ylabel(r'Rent (\u20ac)', fontsize=15)\nax1.set_title('Rental price and area')\n\nn, bins, patches = ax2.hist(df['area_sqm'], bins=20, alpha=0.7)\nax2.set_ylabel(r'Frequency', fontsize=15)\nax2.set_xlabel(r'Area $(m^2)$', fontsize=15)\nax2.set_title('Area histogram')\n\nax3.hist(df['rent'], bins=20, alpha=0.7)\nax3.set_ylabel(r'Frequency', fontsize=15)\nax3.set_xlabel(r'Rent (\u20ac)', fontsize=15)\nax3.set_title('Rent histogram')\n\nplt.show()","491ce583":"y_rent = df.groupby(['property_type'])['rent'].mean().index.values\nx_rent = df.groupby(['property_type'])['rent'].mean().values\n\ny_area = df.groupby(['property_type'])['area_sqm'].mean().index.values\nx_area = df.groupby(['property_type'])['area_sqm'].mean().values\n\ny_rent_sqm = df.groupby(['property_type'])['rent_per_area'].mean().index.values\nx_rent_sqm = df.groupby(['property_type'])['rent_per_area'].mean().values\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,6))\n\nsns.barplot(x=x_rent, y=y_rent, ax=ax1, palette=palette, alpha=alpha)\nax1.set_xlabel(\"Average Rent\", labelpad=14)\nax1.set_title(\"Average Rent by Propery Type\", pad=14)\n\nsns.barplot(x=x_area, y=y_area, ax=ax2, palette=palette, alpha=alpha)\nax2.set_xlabel(\"Average Area\", labelpad=14)\nax2.set_title(\"Average Area by Propery Type\", pad=14)\n\nfig2, ax = plt.subplots(1, 1, figsize=(20,8))\nsns.barplot(x=x_rent_sqm, y=y_rent_sqm, ax=ax, palette=palette, alpha=alpha)\nax.set_xlabel(\"Average Rent per Square Meter\", labelpad=14)\nax.set_title(\"Average Rent per Square Meter by Properly Type\", pad=14)\nplt.show()","edb8a0fd":"group_city = df.groupby(['city'])['rent', 'area_sqm', 'rent_per_area'].mean()\n\ndisplay(Markdown(\"## Top 10 Most Expensive Cities\"))\ndisplay(pd.DataFrame(group_city.sort_values(by = ['rent_per_area'], ascending=False)['rent_per_area'].head(10)))\n\ndisplay(Markdown(\"## Top 10 Least Expensive Cities\"))\ndisplay(pd.DataFrame(group_city.sort_values(by = ['rent_per_area'], ascending=True)['rent_per_area']).head(10))","d4aae41f":"fig, ax = plt.subplots(1, 1, figsize=(20,8))\nsns.scatterplot(x=\"area_sqm\", y=\"rent\", data=df, hue=\"property_type\", palette=palette, alpha=alpha)\nax.set_ylabel(\"Rent\", labelpad=14)\nax.set_xlabel(\"Area\", labelpad=14)\nax.set_title(\"Relationship Between Rent and Area by Property Type\", pad=14)\nlegend = ax.legend()\nlegend.texts[0].set_text(\"Property Types\")\nplt.show()","b5c351a8":"group = df.groupby(['internet'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1, alpha=alpha)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2, alpha=alpha)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3, alpha=alpha)\n\nax1.set_title(\"Number of Properties by Internet Provided\")\nax2.set_title(\"Average Rent by Internet Provided\")\nax3.set_title(\"Average Rent per Square Meter by Internet Provided\")\n\nplt.show()","196e2388":"group = df.groupby(['energy_label'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1, alpha=alpha)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2, alpha=alpha)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3, alpha=alpha)\n\nax1.set_title(\"Number of Properties by Energy Label\")\nax2.set_title(\"Average Rent by Energy Label\")\nax3.set_title(\"Average Rent per Square Meter by Energy Label\")\n\nplt.show()","230a75c4":"group = df.groupby(['furnish'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1, alpha=alpha)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2, alpha=alpha)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3, alpha=alpha)\n\nax1.set_title(\"Number of Properties by Furnish Status\")\nax2.set_title(\"Average Rent by Furnish Status\")\nax3.set_title(\"Average Rent per Square Meter by Furnish Status\")\n\nplt.show()","d6a6547f":"group = df.groupby(['kitchen'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1, alpha=alpha)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2, alpha=alpha)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3, alpha=alpha)\n\nax1.set_title(\"Number of Properties by Kitchen Status\")\nax2.set_title(\"Average Rent by Kitchen Status\")\nax3.set_title(\"Average Rent per Square Meter by Kitchen Status\")\n\nplt.show()","e66e1f4b":"group = df.groupby(['toilet'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1, alpha=alpha)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2, alpha=alpha)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3, alpha=alpha)\n\nax1.set_title(\"Number of Properties by Toilet Status\")\nax2.set_title(\"Average Rent by Toilet Status\")\nax3.set_title(\"Average Rent per Square Meter by Toilet Status\")\n\nplt.show()","707f3a1f":"group = df.groupby(['roommates'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1, alpha=alpha)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2, alpha=alpha)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3, alpha=alpha)\n\nax1.set_title(\"Number of Properties by Number of Roommates\")\nax2.set_title(\"Average Rent by Number of Roommates\")\nax3.set_title(\"Average Rent per Square Meter by Number of Roommates\")\n\nplt.show()","cadd061c":"group = df.groupby(['match_gender'])\nfix, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))\nsns.barplot(y=group['rent'].count().index.values, x=group['rent'].count().values, palette=palette, ax=ax1)\nsns.barplot(y=group['rent'].mean().index.values, x=group['rent'].mean().values, palette=palette, ax=ax2)\nsns.barplot(y=group['rent_per_area'].mean().index.values, x=group['rent_per_area'].mean().values, palette=palette, ax=ax3)\n\nax1.set_title(\"Number of Properties by Preferred Gender\")\nax2.set_title(\"Average Rent by Preferred Gender\")\nax3.set_title(\"Average Rent per Square Meter by Preferred Gender\")\n\nplt.show()","cb5ff729":"We will add a new pipe for adding new generated features.","4aa8a773":"### Describe Data","8477e1cf":"## Introduction\n\nFollowing my previous notebook [Starter: Netherlands Rent Properties](https:\/\/www.kaggle.com\/juangesino\/starter-netherlands-rent-properties), I wanted to provide a notebook that shows a little bit of an EDA on my dataset [Netherlands Rent Properties](https:\/\/www.kaggle.com\/juangesino\/netherlands-rent-properties). So here we go.\n\nBear in mind that this will not be the full extent of what an EDA on this dataset could be, there's a lot more to do, but I wanted to show how to get started.","69a3d365":"We can even try to show some pictures from those very big properties:","6ae39d62":"## Exploratory Data Analysis","30e7606a":"## Import Data\n\nWe'll start the same way I did in my previous notebook, by importing the dataset","ca8a557c":"## Clean Data\n\nIn order to clean and properly format the data, I'll simply copy the functions I used in my previous notebook and use them in my pipeline"}}