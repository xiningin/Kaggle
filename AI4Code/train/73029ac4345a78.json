{"cell_type":{"72680b08":"code","7dfe3446":"code","cb5981ac":"code","ab2943a6":"code","ff2813f9":"code","a81fd0f4":"code","2ae2d2e3":"code","9e717eb0":"code","781f7a4d":"code","328a0ed4":"code","8175794c":"markdown","e5da8d4c":"markdown"},"source":{"72680b08":"#This Kernal is still a work in progress\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\n","7dfe3446":"flow = pd.read_csv(\"..\/input\/flow_2017.csv\")\nhumid = pd.read_csv(\"..\/input\/humidity_2017.csv\")\ntemp = pd.read_csv(\"..\/input\/temperature_2017.csv\")\nweight = pd.read_csv(\"..\/input\/weight_2017.csv\")\n\nprint(flow.head())\nprint(humid.head())\nprint(temp.head())\nprint(weight.head())\n\n","cb5981ac":"timestamp = flow['timestamp']\nflow_1 = flow['flow']\nhumid_1 = humid['humidity']\ntemp_1 = temp['temperature']\nweight_1 = weight['weight']\n\nprint(flow_1.count())\nprint(humid_1.count())\nprint(temp_1.count())\nprint(weight_1.count())\n\nfinaldf = pd.concat([flow_1, humid_1, temp_1, weight_1], axis=1, join='inner').sort_index()\n","ab2943a6":"#Correlation Map\n\nimport seaborn as sns\ncorr_mat = finaldf.corr(method='pearson')\nplt.figure(figsize=(20,10))\nsns.heatmap(corr_mat,vmax=1,square=True,annot=True,cmap='cubehelix')","ff2813f9":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n\nmodel_lm = ols('flow ~ humidity + temperature + weight', \n               data = finaldf).fit()\naov_table = sm.stats.anova_lm(model_lm, typ=2)\nprint(aov_table)\n\nesq_sm = aov_table['sum_sq'][0]\/(aov_table['sum_sq'][0]+aov_table['sum_sq'][1])\nprint('\\n',esq_sm)\n\n","a81fd0f4":"X = finaldf[[\"humidity\",\"temperature\",\"weight\"]].head(8737)\ny = flow_1.head(8737)\nprint(X.describe())\nprint('\\n', y.describe())\n\n\nmodel = sm.OLS(y,X).fit()\n\npred = model.predict(X)\n\nprint(model.summary())\nprint(model.params)","2ae2d2e3":"import sklearn\nfrom sklearn.feature_selection import chi2\nfrom sklearn.linear_model import LogisticRegression\n\n#Logistic Regression of Flow \nclf = LogisticRegression(random_state=0, solver='lbfgs',multi_class='multinomial').fit(X, y)\nprint(clf.predict_proba(X))\nprint(clf.score(X, y))","9e717eb0":"#Bayesian\nclf2 = sklearn.linear_model.BayesianRidge()\nprint(clf2.fit(X,y))\nprint(clf2.predict(X))","781f7a4d":"print(sklearn.feature_selection.f_regression(X, y))","328a0ed4":"import seaborn as sns\nX = finaldf[[\"humidity\",\"temperature\"]].head(8737)\ny = weight_1.head(8737)\nprint(X.describe())\nprint('\\n', y.describe())\n\n\nprint(\"\\n Regression of Weight\")\nmodel = sm.OLS(y,X).fit()\n\npred = model.predict(X)\n\nprint(model.summary())\nprint(model.params)\n\nprint(\"\\n\")\n\nprint(\"ANOVA\")\nmodel_lm = ols('weight ~ humidity + temperature', \n               data = finaldf).fit()\n\naov_table = sm.stats.anova_lm(model_lm, typ=2)\nprint(aov_table)\n\nesq_sm = aov_table['sum_sq'][0]\/(aov_table['sum_sq'][0]+aov_table['sum_sq'][1])\nprint('\\n',esq_sm)\n\n","8175794c":"Regression of weight,humidity,and temperature","e5da8d4c":"Regression of flow and humidity, temperature, weight"}}