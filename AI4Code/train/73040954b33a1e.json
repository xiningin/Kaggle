{"cell_type":{"b392a5ab":"code","56c35a5d":"code","0df171cd":"code","e4e424d9":"code","5843b141":"code","f5325d9d":"code","fa41c49d":"code","e665b7ca":"code","8f699de3":"code","f32e0ebf":"code","53de909f":"code","7fb1146c":"code","9b5b07a2":"code","7c7d6e43":"code","cba2619a":"code","71b354b7":"code","934364cd":"markdown","1bf8bbad":"markdown","83465ca6":"markdown","ec1f5f7e":"markdown","f92d8d4b":"markdown","7c6b4e49":"markdown","451174c2":"markdown","c038adbe":"markdown"},"source":{"b392a5ab":"!rm -r \/opt\/conda\/lib\/python3.7\/site-packages\/lightgbm","56c35a5d":"!git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM","0df171cd":"!apt-get install -y -qq libboost-all-dev","e4e424d9":"# If you have trouble with cmake, run this: ldd \"$(type -p cmake)\"\n# and find out what library is missing or has a wrong version\n!rm \/opt\/conda\/lib\/libcurl.so.4","5843b141":"%%bash\ncd LightGBM\nmkdir build\ncd build\ncmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\nmake -j$(nproc)","f5325d9d":"!cd LightGBM\/python-package\/;python3 setup.py install --precompile","fa41c49d":"!mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n!rm -r LightGBM","e665b7ca":"# Importing core libraries\nimport numpy as np\nimport pandas as pd\nfrom time import time\nimport pprint\nimport joblib\nfrom functools import partial\n\n# Suppressing warnings because of skopt verbosity\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Classifiers\nimport lightgbm as lgb\n\n# Model selection\nfrom sklearn.model_selection import KFold, StratifiedKFold\n\n# Metrics\nfrom sklearn.metrics import mean_squared_error","8f699de3":"# Loading data \nX = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\")\nX_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")","f32e0ebf":"# Preparing data as a tabular matrix\ny = X.target\nX = X.set_index('id').drop('target', axis='columns')\nX_test = X_test.set_index('id')","53de909f":"# Stratifying the target\ny_stratified = pd.cut(y, bins=10, labels=False)","7fb1146c":"# Dealing with categorical data\ncategoricals = [item for item in X.columns if 'cat' in item]\ncat_values = sorted(np.unique(X[categoricals].values))\ncat_dict = dict(zip(cat_values, range(len(cat_values))))\n\nX[categoricals] = X[categoricals].replace(cat_dict).astype('category')\nX_test[categoricals] = X_test[categoricals].replace(cat_dict).astype('category')","9b5b07a2":"# Transferring the best parameters to our basic regressor\n\nbest_params = dict([('colsample_bytree', 0.45),\n                    ('learning_rate', 0.01),\n                    ('max_depth', 8),\n                    ('min_child_samples', 83),\n                    ('min_child_weight', 8.7),\n                    ('n_estimators', 2700),\n                    ('num_leaves', 512),\n                    ('objective', 'tweedie'),\n                    ('reg_alpha', 0.005),\n                    ('reg_lambda', 1e-09),\n                    ('subsample', 0.46),\n                    ('subsample_freq', 2)])\n\ngpu_params = {'device': 'gpu',\n              'gpu_platform_id': 0,\n              'gpu_device_id': 0,\n              'num_threads': 4}\n\nreg = lgb.LGBMRegressor(boosting_type='gbdt',\n                        verbose=-1,\n                        random_state=0,\n                        **best_params,\n                        **gpu_params)","7c7d6e43":"# Cross-validation prediction\nfolds = 10\nskf = StratifiedKFold(n_splits=folds,\n                      shuffle=True, \n                      random_state=0)\n\npredictions = np.zeros(len(X_test))\nfor k, (train_idx, val_idx) in enumerate(skf.split(X, y_stratified)):\n    reg.fit(X.iloc[train_idx, :], y[train_idx])\n    val_preds = reg.predict(X.iloc[val_idx, :])\n    val_rmse = mean_squared_error(y_true=y[val_idx], y_pred=val_preds, squared=False)\n    print(f\"Fold {k} RMSE: {val_rmse:0.5f}\")\n    predictions += reg.predict(X_test).ravel()\n    \npredictions \/= folds","cba2619a":"# Preparing the submission\nsubmission = pd.DataFrame({'id':X_test.index, \n                           'target': predictions})\n\nsubmission.to_csv(\"submission.csv\", index = False)","71b354b7":"submission","934364cd":"Let's install the Boost development library","1bf8bbad":"Now we can just test our GPU-based LightGBM","83465ca6":"#### LightGBM utilizes GPU only for some but not all sub-tasks during the boosting process, which requires transferring data CPU <-> GPU\n#### Therefore you may not see GPU usage over 5% during training","ec1f5f7e":"At this point we can re-install LightGBM with GPU support","f92d8d4b":"Since there's some mess with the libraries used by cmake, we make a quick fix","7c6b4e49":"# GPU-accelerated LightGBM\u00b6\n\nIn order to use GPU with LightGBM, you need to re-install it after compiling with GPU settings.\n\nIt is necessary that you turn on both Internet on and GPU accelerator when running this notebook.\n\nFirst, let's remove the CPU only version of LightGBM:","451174c2":"We create libnvidia-opencl.so.1 and the just clean up LightGBM directory","c038adbe":"Then let's clone LightGBM repository from Github"}}