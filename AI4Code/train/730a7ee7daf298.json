{"cell_type":{"a81194ad":"code","0b3950d9":"code","bb6e452a":"code","c988f642":"code","e6d146f0":"code","dd17a13f":"code","a0c2e64c":"code","3ca2e2ff":"code","b71cbcb8":"code","514aa4c6":"code","fe7835b9":"code","963acd50":"code","56d67dc8":"code","07cfea36":"code","65302e74":"code","8bede859":"code","013961c7":"code","9bfd28da":"code","9a753d61":"code","486a6c3f":"code","a587abcb":"code","6846852a":"code","e3fba479":"code","d0c6afff":"code","10721d9d":"code","2a7f6a16":"code","db2f2e25":"code","a593c59e":"markdown","f09074fb":"markdown","84dd8024":"markdown","a7ee6bcb":"markdown","26a30ac0":"markdown","382605e8":"markdown","2d7f1423":"markdown","49dc71a5":"markdown","643b42d6":"markdown","7f0d16be":"markdown","5f387839":"markdown","5fe055c6":"markdown","e7725d74":"markdown","cce50437":"markdown","3f051e21":"markdown","bec27411":"markdown","96a229da":"markdown","8c88f1eb":"markdown"},"source":{"a81194ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b3950d9":"df=pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')","bb6e452a":"df.head()","c988f642":"df.isnull().sum()","e6d146f0":"df['total score'] = df.loc[:,['math score', 'reading score', 'writing score']].sum(axis=1)","dd17a13f":"df.head()","a0c2e64c":"print(' Number of records: {} \\n Number of columns: {}'.format(df.shape[0], df.shape[1]))","3ca2e2ff":"import numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns","b71cbcb8":"print('The highest score in maths is {}'.format(df['math score'].max()))\nprint('The highest score in reading is {}'.format(df['reading score'].max()))\nprint('The highest score in writing is {}'.format(df['writing score'].max()))\n\nprint('The highest total score is {}'.format(df['total score'].max()))","514aa4c6":"print('The average score in maths is {}'.format(np.mean(df['math score'])))\nprint('The average score in reading is {}'.format(np.mean(df['reading score'])))\nprint('The average score in writing is {}'.format(np.mean(df['writing score'])))\n\nprint('The average score in total is {}'.format(np.mean(df['total score'])))","fe7835b9":"m_a = df.loc[df['math score'] >= 50, 'math score'] \nm_b = df.loc[df['math score'] < 50, 'math score']\nlen_m_a = len(m_a)\nlen_m_b = len(m_b)\nmy_labels = 'marks >= 50','marks < 50'\nplt.pie([len_m_a, len_m_b], labels=my_labels, autopct='%1.1f%%')\nplt.title('Students performance in Math')\nplt.axis('equal')\nplt.show()\n\nr_a = df.loc[df['reading score'] >= 50, 'reading score'] \nr_b = df.loc[df['reading score'] < 50, 'reading score']\nlen_r_a = len(r_a)\nlen_r_b = len(r_b)\nmy_labels = 'marks >= 50','marks < 50'\nmy_colors = ['lightblue', 'lightsteelblue']\nplt.pie([len_r_a, len_r_b], labels=my_labels, autopct='%1.1f%%', colors=my_colors)\nplt.title('Students performance in reading')\nplt.axis('equal')\nplt.show()\n\n\nw_a = df.loc[df['writing score'] >= 50, 'writing score'] \nw_b = df.loc[df['writing score'] < 50, 'writing score']\nlen_w_a = len(w_a)\nlen_w_b = len(w_b)\nmy_labels = 'marks >= 50','marks < 50'\nmy_colors = ['yellow', 'red']\nplt.pie([len_w_a, len_w_b], labels=my_labels, autopct='%1.1f%%')\nplt.title('Students performance in writing')\nplt.axis('equal')\nplt.show()","963acd50":"ax = sns.countplot(x='gender', data = df, hue = 'test preparation course', palette=\"Set3\")","56d67dc8":"df['Top scorer'] = np.where((df['math score'] >= 85) & (df['reading score'] >= 85) & (df['writing score'] >= 85),'yes','no')","07cfea36":"df.head()","65302e74":"ax_1 = sns.countplot(x='gender', data = df, hue = 'Top scorer', palette=\"Set3\")","8bede859":"df['Result'] = np.where((df['math score'] >= 40) & (df['reading score'] >=40) & (df['writing score'] >=40),'pass','fail')","013961c7":"df.head()","9bfd28da":"ax_1 = sns.countplot(x='parental level of education', data = df, hue = 'Result')\nax_1.set_xticklabels(ax_1.get_xticklabels(), rotation=40, ha=\"right\")","9a753d61":"ax_2 = sns.countplot(x='parental level of education', data = df, hue = 'Top scorer')\nax_2.set_xticklabels(ax_2.get_xticklabels(), rotation=40, ha=\"right\")","486a6c3f":"df['avg_score'] = df.loc[:,['math score', 'reading score', 'writing score']].mean(axis=1)","a587abcb":"df.head()","6846852a":"df['avg_score'] = df['avg_score'].round(decimals=2)","e3fba479":"df.head()","d0c6afff":"print('Average Score of Male students: {}'.format(df.loc[df['gender']=='male', 'avg_score'].mean()))\nprint('Average Score of Female students: {}'.format(df.loc[df['gender']=='female', 'avg_score'].mean()))","10721d9d":"df[['gender', 'race\/ethnicity', 'parental level of education','avg_score']].sort_values(by='avg_score',ascending=False).head(10).style.background_gradient(\"YlGn\")","2a7f6a16":"df[['gender', 'race\/ethnicity', 'parental level of education','avg_score']].sort_values(by='avg_score',ascending=True).head(10).style.background_gradient(\"Reds\")","db2f2e25":"correlation=df[[\"math score\",\"reading score\",\"writing score\",\"avg_score\"]].corr()\nsns.heatmap(correlation,mask=np.triu(np.ones_like(correlation,dtype=np.bool)),cmap=\"RdBu_r\",annot=True)\nplt.show()","a593c59e":"**Below study is to check how the parent's degree is affecting the performance of a student**\n1. checking wether student has passed or not in all three subjects combinedly","f09074fb":"**Loading data into the dataset**","84dd8024":"**Checking the null values column wise**","a7ee6bcb":"**Average score by gender**","26a30ac0":"2. Checking wether student is a top scorer or not","382605e8":"### Observations:\n\n1. reading score and writing score are highly correlated.\n2. If reading score is high, then average score is also high.","2d7f1423":"**Observing the percentage of students whose scores in the three course(math, reading and writing) have\/haven't crossed 50**","49dc71a5":"**Correlations**","643b42d6":"**Observing sample records in the dataset**","7f0d16be":"**Last 10 scores**","5f387839":"**Gender wise, test preparation course completion**","5fe055c6":"**Adding a new column named, total score which sums the scores of math, reading and writing**","e7725d74":" ### *Learnt some of the techniques from the notebooks created by Shruti Pansuriya and Ravi Chaubey ","cce50437":"**Adding the column avg_score, which is average of the scores obtained**","3f051e21":"**Observing the top scorers(score >= 85) in the all the course**","bec27411":"**Top 10 students**","96a229da":"**Gender wise, top scorers(score in each subject >=85)**","8c88f1eb":"> Note that, you can even have individual result columns for each subject as well, but for convinience I have taken the three subjects combindely."}}