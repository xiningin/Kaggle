{"cell_type":{"babc9c34":"code","61a6bafa":"code","2249639a":"code","7b634b23":"code","7ccb504a":"code","10d136bc":"code","d45f8956":"code","0b811fd4":"code","5b1bae65":"code","746d011c":"code","a6779c4d":"code","35271a2d":"code","0e119e54":"code","ae0c6c32":"code","8613d867":"code","becde712":"code","84c4873d":"code","888ae7b1":"code","791d9cd7":"code","bcbc9e80":"code","ebf0bf7e":"code","f783b68c":"code","417acd43":"code","bf63c48b":"code","b216f07e":"code","bb752f23":"code","f7d86176":"code","05561599":"code","293bd0a2":"code","466fc54e":"code","7671e282":"code","91809504":"code","9ebf1eca":"code","29cee582":"code","6fd0ce22":"code","627b279c":"code","2ef1865b":"code","efa0521a":"code","e18dde58":"code","49c03881":"code","9c1981ad":"code","85830580":"code","2b7fdce3":"code","12cf1e52":"code","f837a947":"code","f83c2280":"code","65453580":"code","11cdf520":"code","d8c2db16":"markdown","b9a78d09":"markdown","de702911":"markdown","cdd0400f":"markdown","01583a93":"markdown","cd28b9fe":"markdown","239677c5":"markdown","dffbfaea":"markdown","350b00b4":"markdown","fbfc3503":"markdown","e873fe35":"markdown","2b47d184":"markdown","25d88649":"markdown","ccc99792":"markdown","609b923d":"markdown","ccf87276":"markdown","c1ce0f80":"markdown","00f32ada":"markdown"},"source":{"babc9c34":"import warnings, itertools, datetime, matplotlib\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\n\n\nplt.style.use('fivethirtyeight')\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'\n%matplotlib inline\nwarnings.filterwarnings('ignore')","61a6bafa":"apple = pd.read_csv('..\/input\/applestocks\/Apple_Stocks.csv')\napple.head()","2249639a":"apple.tail()","7b634b23":"apple.plot()","7ccb504a":"apple.set_index(pd.DatetimeIndex(apple.Date), drop=True, inplace=True)\ny = apple['Close'].resample('MS').mean()\ny_train = y['2010': '2019']\ny_test = y['2020':'2020']\nlen(y_train), len(y_test)","10d136bc":"y_train.plot(figsize=(15, 6))\nplt.show()","d45f8956":"from IPython.display import Image\nImage(filename='..\/input\/pres-imgs\/RMSE1.jpg')","0b811fd4":"from sklearn.metrics import mean_squared_error\n\ndef rmse(y_true, y_pred):\n    y_pred = y_pred*np.ones(len(y_true))\n    return np.sqrt(mean_squared_error(y_true, y_pred))","5b1bae65":"y_pred = np.mean(y_train)\nprint(rmse(y_test, y_pred))","746d011c":"y_pred = []\ndef moving_avg(y_train, window_size, num_forecasts):\n    for i in range(num_forecasts):\n        if i < window_size:\n            ma_sum = np.sum(y_train[-window_size+i:]) + np.sum(y_pred)\n        else:    \n            ma_sum = np.sum(y_pred[-window_size:])\n        y_pred.append((ma_sum)\/window_size)\n    return y_pred\n        \ny_pred = moving_avg(y_train, 6, 11)\nprint(rmse(y_test, y_pred))","a6779c4d":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 07-51-59.png')","35271a2d":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 12-53-15.png')","0e119e54":"from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\nfit1 = SimpleExpSmoothing(y_train).fit(smoothing_level=0.7,optimized=False)\nfcast1 = fit1.forecast(11).rename(r'$\\alpha=0.2$')\nplt.figure(figsize=(12, 8))\nplt.plot(y_train, marker='o', color='black')\nplt.plot(fit1.fittedvalues, marker='o', color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.legend([line1], [fcast1.name])","ae0c6c32":"y_pred = fit1.predict(start='2020-01-01', end='2020-11-01').values\nprint(rmse(y_test, y_pred))","8613d867":"y_pred = y_train[-1]\nprint(rmse(y_test, y_pred))","becde712":"from statsmodels.tsa.ar_model import AutoReg, ar_select_order\nfrom statsmodels.tsa.api import acf, pacf, graphics","84c4873d":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 12-54-36.png')","888ae7b1":"from pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nsns.set_style('darkgrid')\nplt.rc('figure',figsize=(16,12))\nplt.rc('font',size=13)","791d9cd7":"mod = AutoReg(y_train, 2)\nres = mod.fit()","bcbc9e80":"fig = res.plot_predict(start='2011-01-01', end='2020-11-01')","ebf0bf7e":"y_pred = res.predict(start='2020-01-01', end='2020-11-01')\nprint(rmse(y_test, y_pred))","f783b68c":"from statsmodels.tsa.seasonal import STL\nstl = STL(y_train)\nres = stl.fit()\nfig = res.plot()","417acd43":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 10-19-55.png')","bf63c48b":"fit1 = Holt(y_train).fit(smoothing_level=0.7, smoothing_slope=0.2, optimized=False)\nfcast1 = fit1.forecast(11).rename(\"Holt's linear trend\")\n\nplt.figure(figsize=(12, 8))\nplt.plot(y_train, marker='o', color='black')\nplt.plot(fit1.fittedvalues, color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.legend([line1], [fcast1.name])","b216f07e":"y_pred = fit1.predict(start='2020-01-01', end='2020-11-01').values\nprint(rmse(y_test, y_pred))","bb752f23":"fit1 = Holt(y_train, exponential=True).fit(smoothing_level=0.7, smoothing_slope=0.27, optimized=False)\nfcast1 = fit1.forecast(11).rename(\"Holt's linear trend\")\n\nplt.figure(figsize=(12, 8))\nplt.plot(y_train, marker='o', color='black')\nplt.plot(fit1.fittedvalues, color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.legend([line1], [fcast1.name])","f7d86176":"y_pred = fit1.predict(start='2020-01-01', end='2020-11-01').values\nprint(rmse(y_test, y_pred))","05561599":"fit1 = ExponentialSmoothing(y_train, seasonal_periods = 12, trend='add', seasonal='add').fit(smoothing_level=0.7, smoothing_slope=0.2, use_boxcox=True)\nfcast1 = fit1.forecast(11).rename(\"Holt's linear trend\")\n\nplt.figure(figsize=(12, 8))\nplt.plot(y_train, marker='o', color='black')\nplt.plot(fit1.fittedvalues, color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.legend([line1], [fcast1.name])","293bd0a2":"y_pred = fit1.predict(start='2020-01-01', end='2020-11-01').values\nprint(rmse(y_test, y_pred))","466fc54e":"fit1 = ExponentialSmoothing(y_train, seasonal_periods = 12, trend='add', seasonal='mul').fit(smoothing_level=0.7, smoothing_slope=0.2, use_boxcox=True)\nfcast1 = fit1.forecast(11).rename(\"Holt's linear trend\")\n\nplt.figure(figsize=(12, 8))\nplt.plot(y_train, marker='o', color='black')\nplt.plot(fit1.fittedvalues, color='blue')\nline1, = plt.plot(fcast1, marker='o', color='blue')\nplt.legend([line1], [fcast1.name])","7671e282":"y_pred = fit1.predict(start='2020-01-01', end='2020-11-01').values\nprint(rmse(y_test, y_pred))","91809504":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 11-07-06.png')","9ebf1eca":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 11-09-23.png')","29cee582":"def difference(dataset, interval=1):\n    diff = list()\n    for i in range(interval, len(dataset)):\n        value = dataset[i] - dataset[i - interval]\n        diff.append(value)\n    return pd.Series(diff)\n\ndifs = difference(y_train)\ndifs.plot()","6fd0ce22":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 11-09-32.png')","627b279c":"difs2 = difference(difs)\ndifs2.plot()","2ef1865b":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 11-12-47.png')","efa0521a":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfig, ax = plt.subplots(2, figsize=(12,6))\nax[0] = plot_acf(y_train, ax=ax[0], lags=20)\nax[1] = plot_pacf(y_train, ax=ax[1], lags=20)","e18dde58":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfig, ax = plt.subplots(2, figsize=(12,6))\nax[0] = plot_acf(difs, ax=ax[0], lags=20)\nax[1] = plot_pacf(difs, ax=ax[1], lags=20)","49c03881":"model = sm.tsa.statespace.SARIMAX(y_train, order=(1,1,0))\nres = model.fit()","9c1981ad":"y_pred = res.predict(start='2020-01-01', end='2020-11-01', dynamic=False)\nprint(rmse(y_test, y_pred))","85830580":"pred_uc = res.get_forecast(steps=11)\npred_ci = pred_uc.conf_int()\nax = y_train.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","2b7fdce3":"res.plot_diagnostics(figsize=(16, 8))\nplt.show()","12cf1e52":"Image(filename='..\/input\/pres-imgs\/Screenshot from 2020-12-02 12-49-41.png')","f837a947":"model = sm.tsa.statespace.SARIMAX(y_train, order=(1,1,0), seasonal_order=(1,1,0,12))\nres = model.fit()","f83c2280":"pred_uc = res.get_forecast(steps=11)\npred_ci = pred_uc.conf_int()\nax = y_train.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","65453580":"res.plot_diagnostics(figsize=(16, 8))\nplt.show()","11cdf520":"y_pred = res.predict(start='2020-01-01', end='2020-11-01', dynamic=True)\nprint(rmse(y_test, y_pred))","d8c2db16":"### Holt's Linear Trend Method","b9a78d09":"### Stationarity and Differencing","de702911":"A stationary time series is one whose properties do not depend on the time at which the series is observed. Thus, time series with trends, or with seasonality, are not stationary \u2014 the trend and seasonality will affect the value of the time series at different times. On the other hand, a white noise series is stationary \u2014 it does not matter when you observe it, it should look much the same at any point in time.\n\n","cdd0400f":"### Most Frequent or the Naive Method","01583a93":"### Autoregressive Modelling","cd28b9fe":"### Simple Exponential Smoothing","239677c5":"### Seasonal ARIMA (SARIMA)","dffbfaea":"### Holts-Winter Multiplicative Seasonal Method","350b00b4":"#### d = 1\n#### p = 1 (as lag-1 acf is +ve also pacf drops at lag 1)\n#### q = 0(as lag-1 is +ve and pacf is not dropping gradually)","fbfc3503":"### Metric\n\n#### RMSE","e873fe35":"AR I MA (p,d,q)","2b47d184":"### Moving Average with 6 months as window","25d88649":"### 1. **choosing the differencing order d**\n### 2. **choosing the p**\n### 3. **choosing the q**","ccc99792":"### Holts-Winter Additive Seasonal Method","609b923d":"### Seasonal-Trend decomposition using LOESS(locally estimated scatterplot smoothing)\n\n","ccf87276":"### Non Seasonal ARIMA Models","c1ce0f80":"### Holt's Exponential Trend Method","00f32ada":"### Average Model"}}