{"cell_type":{"8914528f":"code","5365a66e":"code","87ae1bf8":"code","4d584560":"code","1e70732b":"code","34188842":"code","e1258b34":"code","4977cdc4":"code","eb8c52f0":"code","4989a018":"code","e820cbfb":"code","6e9e6fd8":"markdown","2e6d58c2":"markdown","998a5f37":"markdown"},"source":{"8914528f":"!pip install -q pytorch-tabnet","5365a66e":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nimport lightgbm as lgb\nimport optuna\nimport joblib\nfrom pytorch_tabnet.tab_model import TabNetClassifier","87ae1bf8":"train_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","4d584560":"def label_encoder(c):\n    lc = LabelEncoder()\n    return lc.fit_transform(c)","1e70732b":"def preprocess(df):\n    label_cols = ['Name', 'Ticket']\n    onehot_cols = ['Pclass', 'Sex', 'Cabin', 'Embarked']\n    numerical_cols = ['Age', 'SibSp', 'Parch', 'Fare', 'Survived']\n    age_map = df[['Age', 'Pclass']].dropna().groupby('Pclass').mean().to_dict()\n    df.Age = df.Age.fillna(df.Pclass.map(age_map['Age']))\n    df.Cabin = df.Cabin.fillna('X').map(lambda x: x[0].strip())\n    df.Ticket = df.Ticket.fillna('X').map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\n    df.Fare = df.Fare.fillna(df.Fare.mean())\n    df.Embarked = df.Embarked.fillna('X')\n    df.Name = df.Name.map(lambda x: x.split(',')[0])\n    onehot_encoded_df = pd.get_dummies(df[onehot_cols])\n    label_encoded_df = df[label_cols].apply(label_encoder)\n    numerical_df = df[numerical_cols]\n    return pd.concat([numerical_df, label_encoded_df, onehot_encoded_df], axis=1)","34188842":"all_df = preprocess(df = pd.concat([train_df, test_df]))","e1258b34":"# Re-split all data\nX = all_df[:train_df.shape[0]]\ny = X.pop('Survived')\nX_ = all_df[train_df.shape[0]:].drop(columns=['Survived'])","4977cdc4":"folds = KFold(n_splits = 16)\noof = np.zeros(X.shape[0])\npredictions = np.zeros(X_.shape[0])","eb8c52f0":"BEST_PARAMS = {\n        'n_a': 16,\n        'n_d': 16,\n        'n_steps': 3,\n        'n_independent': 2,\n        'batch_size': 1024,\n        'virtual_batch_size': 128,\n        'seed': 42,\n    }","4989a018":"for fold_, (trn_idx, val_idx) in enumerate(folds.split(X, y)):\n    print(\"Fold {}\".format(fold_))\n    X_train = X.iloc[trn_idx].values\n    y_train = y[trn_idx]\n    X_test = X.iloc[val_idx].values\n    y_test = y[val_idx]\n    clf = TabNetClassifier(\n        n_a=BEST_PARAMS['n_a'],\n        n_d=BEST_PARAMS['n_d'],\n        n_steps=BEST_PARAMS['n_steps'],\n        n_independent=BEST_PARAMS['n_independent'],\n        seed=42,\n    )\n    clf.fit(\n        X_train=X_train, y_train=y_train,\n        eval_set=[(X_train, y_train), (X_test, y_test)],\n        eval_name=['train', 'valid'],\n        eval_metric=['accuracy'],\n        max_epochs=50,\n        patience=10, \n        batch_size=BEST_PARAMS['batch_size'],\n        virtual_batch_size=BEST_PARAMS['virtual_batch_size']\n    )\n    \n    predictions += clf.predict(X_.values) \/ folds.n_splits","e820cbfb":"binarizer = np.vectorize(lambda x: 1 if x >= .5 else 0)\nprediction_binarized = binarizer(predictions)\nsubmission = pd.concat([sample_submission,pd.DataFrame(prediction_binarized)], axis=1).drop(columns=['Survived'])\nsubmission.columns = ['PassengerId', 'Survived']\nsubmission.to_csv('submission.csv', index=False)","6e9e6fd8":"# Inference with Best Params","2e6d58c2":"# Acknowledgements\n\n- built-upon Juan Pablo Margni's wonderful starter: https:\/\/www.kaggle.com\/jmargni\/tps-apr-2021-lightgbm-optuna","998a5f37":"# Imports"}}