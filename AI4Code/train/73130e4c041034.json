{"cell_type":{"9cc8e33f":"code","822f7dfe":"code","4f8f33fc":"code","967a971a":"code","401aa162":"code","ed396c02":"code","65841cfc":"code","6486bcd6":"code","35e0bb83":"code","223e8188":"code","e9e1f628":"code","3d75d1a9":"code","dffe32a6":"code","a0502445":"code","964cffa0":"code","035b9b29":"code","0153355d":"code","1342fb82":"code","bf678e4b":"code","57b000fc":"code","ab636085":"code","9be73262":"code","1e0f6d8f":"code","02c0b341":"code","bb9cd20f":"code","a284fe94":"code","0f51fb25":"code","e5894a46":"markdown","afed01fa":"markdown","272c6917":"markdown","a3443f9e":"markdown","5a00b472":"markdown","5463ccbf":"markdown","9fa1dd9c":"markdown","ec272fa4":"markdown","aee97975":"markdown","c3a41b76":"markdown","add78ca0":"markdown","3c9d459e":"markdown","a621677b":"markdown","941719a4":"markdown"},"source":{"9cc8e33f":"!ls ..\/input\/*","822f7dfe":"# Basic packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rd # generating random numbers\nimport datetime # manipulating date formats\n# Viz\nimport matplotlib.pyplot as plt # basic plotting\nimport seaborn as sns # for prettier plots\n\n\n# TIME SERIES\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scs\n\n\n# settings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n","4f8f33fc":"# Read all data \nsales=pd.read_csv(\"..\/input\/sales_train.csv\")\n\n\nitem_cat=pd.read_csv(\"..\/input\/item_categories.csv\")\nitem=pd.read_csv(\"..\/input\/items.csv\")\nsub=pd.read_csv(\"..\/input\/sample_submission.csv\")\nshops=pd.read_csv(\"..\/input\/shops.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","967a971a":"sales.head(2)","401aa162":"#formatting the date column correctly\nsales.date=sales.date.apply(lambda x:datetime.datetime.strptime(x, '%d.%m.%Y'))\n# check\nprint(sales.info())","ed396c02":"# Aggregate to monthly level the required metrics\n\nmonthly_sales=sales.groupby([\"date_block_num\",\"shop_id\",\"item_id\"])[\n    \"date\",\"item_price\",\"item_cnt_day\"].agg({\"date\":[\"min\",'max'],\"item_price\":\"mean\",\"item_cnt_day\":\"sum\"})\n","65841cfc":"monthly_sales.head(20)","6486bcd6":"# number of items per cat \nx=item.groupby(['item_category_id']).count()\nx=x.sort_values(by='item_id',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.item_category_id, x.item_id, alpha=0.8)\nplt.title(\"Items per Category\")\nplt.ylabel('# of items', fontsize=12)\nplt.xlabel('Category', fontsize=12)\nplt.show()","35e0bb83":"#date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\nts=sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nplt.figure(figsize=(16,8))\nplt.title('Total Sales of the company')\nplt.xlabel('Time')\nplt.ylabel('Sales')\nplt.plot(ts);","223e8188":"plt.figure(figsize=(16,6))\nplt.plot(ts.rolling(window=12,center=False).mean(),label='Rolling Mean');\nplt.plot(ts.rolling(window=12,center=False).std(),label='Rolling sd');\nplt.legend();","e9e1f628":"import statsmodels.api as sm\n# multiplicative\nres = sm.tsa.seasonal_decompose(ts.values,freq=12,model=\"multiplicative\")\n#plt.figure(figsize=(16,12))\nfig = res.plot()\n#fig.show()","3d75d1a9":"from pylab import rcParams\nrcParams['figure.figsize'] = 16, 8\n\nres = sm.tsa.seasonal_decompose(ts.values,freq=12,model=\"additive\")\nfig = res.plot()\nplt.show()","dffe32a6":"# Stationarity tests\ndef test_stationarity(timeseries):\n    \n    #Perform Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n\ntest_stationarity(ts)\n","a0502445":"# to remove trend\nfrom pandas import Series as Series\n# create a differenced series\ndef difference(dataset, interval=1):\n    diff = list()\n    for i in range(interval, len(dataset)):\n        value = dataset[i] - dataset[i - interval]\n        diff.append(value)\n    return Series(diff)\n\n# invert differenced forecast\ndef inverse_difference(last_ob, value):\n    return value + last_ob\n\n","964cffa0":"new_ts = difference(ts)\ntest_stationarity(new_ts)","035b9b29":"fig = plt.figure(figsize=(16,10))\nlayout = (2,2)\nts_ax = plt.subplot2grid(layout, (0, 0), colspan=2)\nacf_ax = plt.subplot2grid(layout, (1, 0))\npacf_ax = plt.subplot2grid(layout, (1, 1))\nnew_ts.plot(ax=ts_ax)\nts_ax.set_title(\"1st order differencing\")\nplot_acf(ts, ax=acf_ax, alpha=0.5)\nplot_pacf(ts, ax=pacf_ax, alpha=0.5)\nplt.tight_layout()\n","0153355d":"model = ARIMA(ts.values, order=(1,2,3))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","1342fb82":"import itertools\np = q = d = range(0, 4)\npdq = itertools.product(p, d, q)\nfor param in pdq:\n    try:\n        mod = ARIMA(ts.values,order=param)\n        results = mod.fit()\n        print('ARIMA{} - AIC:{}'.format(param, results.aic))\n    except:\n        continue","bf678e4b":"model = ARIMA(ts.values, order=(1,2,2))\nresult = model.fit()\nprint(result.summary())","57b000fc":"pred = result.predict(start = 24, end=40)\nprediction = pd.Series(pred, index=range(24,41,1))\n#prediction","ab636085":"new_ts.plot()\nprediction.plot()","9be73262":"# Plot residual errors\nresiduals = pd.DataFrame(result.resid)\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()","1e0f6d8f":"min_aic = 1000\nimport itertools\np = q = d = range(0, 3)\npdq = itertools.product(p, d, q)\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(ts.values,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n            if results.aic < min_aic:\n                min_aic = results.aic\n        except:\n            continue\n","02c0b341":"min_aic","bb9cd20f":"#ARIMA(2, 2, 0)x(1, 1, 0, 12)\nmod = sm.tsa.statespace.SARIMAX(ts.values,\n                                            order=(2,2,0),\n                                            seasonal_order=(1,1,0,12),\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\nresult = mod.fit()\nresult.summary()","a284fe94":"residuals = pd.DataFrame(result.resid)\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()","0f51fb25":"pred = result.predict(start = 24, end=40)\nprediction = pd.Series(pred, index=range(24,41,1))\nts.plot()\nprediction.plot()","e5894a46":"### Building ARIMA model","afed01fa":"From the above PACF plot, 1st lag is above the confidence level whereas 2nd lag is below it. \n\nSo, p=1. AR(1) model","272c6917":"ARIMA(1, 2, 2) has lowest AIC","a3443f9e":"## Stationarity:\n\nStationarity refers to time-invariance of a series. (ie) Two points in a time series are related to each other by only how far apart they are, and not by the direction(forward\/backward)\n\nWhen a time series is stationary, it can be easier to model. Statistical modeling methods assume or require the time series to be stationary.\n\n\nThere are multiple tests that can be used to check stationarity.\n* ADF( Augmented Dicky Fuller Test) \n* KPSS \n* PP (Phillips-Perron test)\n\nLet's just perform the ADF which is the most commonly used one.\n","5a00b472":"**Quick observations:**\nThere is an obvious \"seasonality\" (Eg: peak sales around a time of year) and a decreasing \"Trend\".","5463ccbf":"After first order differencing, p<0.05. So, d = 1","9fa1dd9c":"### Plotting ACF and PACF plots for new_ts","ec272fa4":"### Determining AR term (p)","aee97975":"From the ACF plot, values till lag 4 are above confidence interval. So, q = 4","c3a41b76":"### Determining differencing term (d)","add78ca0":"### Imports:\n","3c9d459e":"### Determining MA term (q)","a621677b":"# Single series:\n","941719a4":"### SARIMA model"}}