{"cell_type":{"331b05f2":"code","9de2bbbb":"code","19bdef60":"code","2cafc1d8":"code","bb1437e0":"code","fbe1d0c8":"code","a1073394":"code","026070aa":"code","62845e73":"code","3407a9fa":"code","f5b606a5":"code","edf7e6d5":"code","e181bcab":"code","e1da1a07":"code","0ee4fe44":"markdown","521141d1":"markdown"},"source":{"331b05f2":"import numpy as np\nimport keras\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Dropout, MaxPool2D, Input, Softmax, Activation, Flatten\nfrom keras.models import Model\nimport os\nprint(os.listdir(\"..\/input\"))\nimport cv2\nimport scipy\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.utils.vis_utils import plot_model\nimport matplotlib.pyplot as plt","9de2bbbb":"from tqdm import tqdm\ndef get_data(folder):\n    \"\"\"\n    Load the data and labels from the given folder.\n    \"\"\"\n    X = []\n    y = []\n    z = []\n    for wbc_type in os.listdir(folder):\n        if not wbc_type.startswith('.'):\n            if wbc_type in ['NEUTROPHIL']:\n                label = 1\n                label2 = 1\n            elif wbc_type in ['EOSINOPHIL']:\n                label = 2\n                label2 = 1\n            elif wbc_type in ['MONOCYTE']:\n                label = 3  \n                label2 = 0\n            elif wbc_type in ['LYMPHOCYTE']:\n                label = 4 \n                label2 = 0\n            else:\n                label = 5\n                label2 = 0\n            for image_filename in tqdm(os.listdir(folder + wbc_type)):\n                img_file = cv2.imread(folder + wbc_type + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = scipy.misc.imresize(arr=img_file, size=(60, 80, 3))\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n                    z.append(label2)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    z = np.asarray(z)\n    return X,y,z\nX_train, y_train, z_train = get_data('..\/input\/dataset2-master\/dataset2-master\/images\/TRAIN\/')\nX_test, y_test, z_test = get_data('..\/input\/dataset2-master\/dataset2-master\/images\/TEST\/')\n\n# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nfrom keras.utils.np_utils import to_categorical\ny_trainHot = to_categorical(y_train, num_classes = 5)\ny_testHot = to_categorical(y_test, num_classes = 5)\nz_trainHot = to_categorical(z_train, num_classes = 2)\nz_testHot = to_categorical(z_test, num_classes = 2)\ndict_characters = {1:'NEUTROPHIL',2:'EOSINOPHIL',3:'MONOCYTE',4:'LYMPHOCYTE'}\ndict_characters2 = {0:'Mononuclear',1:'Polynuclear'}\nprint(dict_characters)\nprint(dict_characters2)","19bdef60":"print(\"Train X Shape --> \",X_train.shape)\nprint(\"Train y Shape --> \",y_trainHot.shape)\nprint(\"Train z Shape --> \",z_trainHot.shape)\n##\n# Input Layer (-1, 60, 80, 3) All three channel RGB\n# Output Layer 1 (-1, 5) Softmax\n# Output Layer 2 (-1, 2) Softmax (Doesn't work as 2nd output backpropogation messes all the weights)\n##","2cafc1d8":"def keras_model():\n    inp = Input(shape=(60,80,3))\n    x = Conv2D(32, (11,11), padding=\"same\",activation=\"relu\")(inp)\n    x = Conv2D(32, (7,7), padding=\"valid\",activation=\"relu\")(inp)\n    x = MaxPool2D(pool_size=(2, 2))(x)\n    #x = BatchNormalization()(x)\n    #x = Dropout(0.5)(x)\n    x = Conv2D(32, (5, 5), padding=\"same\",activation=\"relu\")(x)\n    x = Conv2D(32, (5, 5), padding=\"valid\",activation=\"relu\")(x)\n    x = MaxPool2D(pool_size=(2, 2))(x)\n    #x = BatchNormalization()(x)\n    #x = Dropout(0.5)(x)\n    x = Conv2D(64, (3, 3), padding=\"same\",activation=\"relu\")(x)\n    x = Conv2D(64, (3, 3), padding=\"valid\",activation=\"relu\")(x)\n    x = MaxPool2D(pool_size=(2, 2))(x)\n    x = BatchNormalization()(x)\n    #x = Dropout(0.5)(x)\n    x = Flatten()(x)\n    x = Dense(1024,activation=\"relu\")(x)\n    x = Dropout(0.5)(x)\n    y = Dense(5,activation=\"softmax\")(x)\n#    z = Dense(2,activation=\"softmax\")(x)\n    model = Model(inp, y)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer='adam',\n                  metrics=['accuracy'])\n    return model","bb1437e0":"model = keras_model()\n#plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\n#plt.imshow(plt.imread('model_plot.png'))\nmodel.summary()","fbe1d0c8":"filepath = \".\/weight_tr5.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\nhistory = model.fit(X_train,\n         y_trainHot,\n         epochs = 300,\n         batch_size = 512,\n         validation_data = (X_test,y_testHot),\n         callbacks = callbacks_list,\n         verbose = 1)","a1073394":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n# \"bo\" is for \"blue dot\"\nplt.plot(epochs, loss, label='Training loss')\n# b is for \"solid blue line\"\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","026070aa":"#Accuracy Plot\nhistory_dict = history.history\nhistory_dict.keys()\nplt.clf()   # clear figure\nacc_values = history_dict['acc']\nval_acc_values = history_dict['val_acc']\n\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.show()","62845e73":"## Loading Best Weights from the Gang\nmodel.load_weights(filepath)","3407a9fa":"from keras.preprocessing.image import ImageDataGenerator","f5b606a5":"datagentrain = ImageDataGenerator(\n        rotation_range=60,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest')\ndatagentrain.fit(X_train)","edf7e6d5":"history = model.fit_generator(datagentrain.flow(X_train, y_trainHot, batch_size=32),\n                    steps_per_epoch=1024,\n                    epochs=200,\n                    workers=4,\n                    use_multiprocessing=True,validation_data = (X_test,y_testHot),\n         callbacks = callbacks_list,)","e181bcab":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n# \"bo\" is for \"blue dot\"\nplt.plot(epochs, loss, label='Training loss')\n# b is for \"solid blue line\"\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","e1da1a07":"#Accuracy Plot\nhistory_dict = history.history\nhistory_dict.keys()\nplt.clf()   # clear figure\nacc_values = history_dict['acc']\nval_acc_values = history_dict['val_acc']\n\nplt.plot(epochs, acc, label='Training acc')\nplt.plot(epochs, val_acc, label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.show()","0ee4fe44":"## What's NExT -- > Data Agumentation to make model robust","521141d1":"# Basic Keras CNN Approach\n### Thanks to Paul Moonely for How to load data"}}