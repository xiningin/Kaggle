{"cell_type":{"372cd489":"code","0b2539a8":"code","a4a68568":"code","5aec6a5e":"code","973d0095":"code","1cce16cb":"code","001040e2":"code","dfb74e39":"code","aba3c586":"markdown","053f3d66":"markdown"},"source":{"372cd489":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns # data visualization library  \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b2539a8":"df_train = pd.read_csv(\"\/kaggle\/input\/gs-4519-ai-course-in-class-competition\/train.csv\",index_col=0)\nprint(df_train.shape)\ndf_train.head()  # gives the first 5 rows","a4a68568":"f,ax = plt.subplots(figsize=(14, 12))\nsns.heatmap(df_train.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","5aec6a5e":"Y = df_train.Y\nax = sns.countplot(Y,label=\"Count\") \nprint(Y.value_counts())","973d0095":"list = ['Y']\nX = df_train.drop(list,axis = 1)\nprint(X.shape)\nX.head()","1cce16cb":"# **(2) Display testing data**","001040e2":"df_test = pd.read_csv(\"\/kaggle\/input\/gs-4519-ai-course-in-class-competition\/test.csv\",index_col=0)\nprint(df_test.shape)\ndf_test.head()  # gives the first 5 rows","dfb74e39":"f,ax = plt.subplots(figsize=(14, 12))\nsns.heatmap(df_test.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","aba3c586":"# **(2) Display testing data**","053f3d66":"# **(1) Display training data**"}}