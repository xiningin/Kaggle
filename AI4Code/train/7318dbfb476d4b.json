{"cell_type":{"eb7eda70":"code","80fd53f9":"code","dd805a69":"code","f46e5dc7":"code","0230cd48":"code","f1bb5623":"code","f116bbae":"code","abb39903":"code","9a068d93":"code","750a41e0":"code","1fda32d5":"code","be2e87cc":"code","7404ab7a":"code","c823fdc8":"code","c910f639":"code","3776fb52":"code","49a1b5af":"code","3b267363":"code","0bfcf400":"code","34d7de11":"code","638431c4":"markdown","c8a3d8da":"markdown","87c439ed":"markdown","0d263be1":"markdown","0c0dba6d":"markdown","7819c466":"markdown","04bacb5b":"markdown","9f48cb69":"markdown","3efeaadb":"markdown","6b681419":"markdown","88162321":"markdown","a0f32904":"markdown","636ee2d6":"markdown","47643f54":"markdown","6cd486c8":"markdown","d6ed5a8f":"markdown","7a724a53":"markdown","538e7841":"markdown","c407a4c8":"markdown","bfa9174f":"markdown","47c2cea1":"markdown"},"source":{"eb7eda70":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","80fd53f9":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","dd805a69":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","f46e5dc7":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","0230cd48":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","f1bb5623":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# districtLevel.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/districtLevel.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'districtLevel.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f116bbae":"df1.head(5)","abb39903":"plotPerColumnDistribution(df1, 10, 5)","9a068d93":"plotCorrelationMatrix(df1, 8)","750a41e0":"plotScatterMatrix(df1, 20, 10)","1fda32d5":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# indiaSummary.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/indiaSummary.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'indiaSummary.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","be2e87cc":"df2.head(5)","7404ab7a":"plotPerColumnDistribution(df2, 10, 5)","c823fdc8":"plotCorrelationMatrix(df2, 8)","c910f639":"plotScatterMatrix(df2, 20, 10)","3776fb52":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# stateSummary.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/stateSummary.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'stateSummary.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","49a1b5af":"df3.head(5)","3b267363":"plotPerColumnDistribution(df3, 10, 5)","0bfcf400":"plotCorrelationMatrix(df3, 8)","34d7de11":"plotScatterMatrix(df3, 20, 10)","638431c4":"Correlation matrix:","c8a3d8da":"Distribution graphs (histogram\/bar graph) of sampled columns:","87c439ed":"Let's take a quick look at what the data looks like:","0d263be1":"Distribution graphs (histogram\/bar graph) of sampled columns:","0c0dba6d":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","7819c466":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","04bacb5b":"## Introduction\n\nData regarding migration is *scarce* and official figures are **under-estimated**\nI have pre-processed the migration data available as part of Census 2011 and gathered it over here. ","9f48cb69":"Correlation matrix:","3efeaadb":"Scatter and density plots:","6b681419":"Let's take a quick look at what the data looks like:","88162321":"Correlation matrix:","a0f32904":"Scatter and density plots:","636ee2d6":"Scatter and density plots:","47643f54":"There are 4 csv files in the current version of the dataset:\n","6cd486c8":"Let's take a quick look at what the data looks like:","d6ed5a8f":"### Let's check 3rd file: \/kaggle\/input\/stateSummary.csv","7a724a53":"### Let's check 2nd file: \/kaggle\/input\/indiaSummary.csv","538e7841":"### Let's check 1st file: \/kaggle\/input\/districtLevel.csv","c407a4c8":"## Exploratory Analysis","bfa9174f":"Distribution graphs (histogram\/bar graph) of sampled columns:","47c2cea1":"Now you're ready to read in the data and use the plotting functions to visualize the data."}}