{"cell_type":{"d73c8abb":"code","b633d9bb":"code","594f20fc":"code","2b057ebe":"code","d2ad50a5":"code","f4a5e100":"code","f1ae8c18":"code","e4f9a764":"code","1b6bc3b2":"code","918f11f1":"code","9b983a95":"code","1385e2b3":"code","3f0430ea":"code","9e2635b0":"code","fc270585":"markdown","4356da83":"markdown","ed30de70":"markdown","48706d23":"markdown","18e12754":"markdown","3a29311b":"markdown","12d185c9":"markdown"},"source":{"d73c8abb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b633d9bb":"import matplotlib.pyplot as plt \nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras import  layers\nimport keras\nfrom sklearn import datasets\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt","594f20fc":"!pip install openpyxl","2b057ebe":"#load data\npath = '..\/input\/antarctica-temperature'\ndata5 = pd.read_excel(os.path.join(path,'all5.xlsx'),engine='openpyxl')\ndf2= data5.drop(data5.columns[[9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,-2,-1]], axis=1)\ndf2 = df2.fillna(method='pad',axis=1)\n# print(np.any(df2.isnull())) \ndf2_index = pd.period_range('1991-01',periods=df2.shape[0],freq='M')\ndf2 = df2.drop(df2.columns[[0,4,5]],axis=1)\ndf2.index = df2_index\n# data clean over \ndf2.head()","d2ad50a5":"#use 5 features to predict\nvis = df2[['\u5e73\u5747\u6c14\u6e29\u22640\u2103\u7684\u5929\u6570','\u5e73\u5747\u98ce\u901f(knots)','\u5e73\u5747\u6700\u5927\u6301\u7eed\u98ce\u901f(knots)','\u5355\u65e5\u6700\u5927\u5e73\u5747\u98ce\u901f(knots)','\u5e73\u5747\u6c14\u6e29(\u2103)']].values\nvis = vis.reshape(-1,5)\n# min-max scaler\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(vis)\n# print(scaled_data)\nscaled_data_series = scaled_data.reshape(-1,5)\nprint(scaled_data_series.shape)\n# plt.plot(scaled_data)\n# plt.show()\n# print(scaled_data,)","f4a5e100":"def split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps\n        # check if we are beyond the sequence\n        if end_ix > len(sequence)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix][-1]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)\n\n\nprint(len(scaled_data_series))\nraw_seq = scaled_data_series\n\n# choose a number of time steps\n#12 month a year as a sequence\nn_steps = 12\n\n# split into samples\nX, y = split_sequence(raw_seq, n_steps)\n\n#predict the last 2 years\ntrain_data = X[:-24]\ntest_data = X[-24:]\n\ntrain_y = y[:-24]\ntest_y = y[-24:]\n\ny1 = np.arange(1,train_data.shape[0]+1)\ny2 = np.arange(train_data.shape[0],train_data.shape[0]+test_data.shape[0])\n\n#make dataset to input model\nn_features = 5\ntrain_data = train_data.reshape(train_data.shape[0], train_data.shape[1], n_features)\ntest_data = test_data.reshape(test_data.shape[0], test_data.shape[1], n_features)","f1ae8c18":"#a very simple model\nmodel = Sequential()\nmodel.add(LSTM(50, activation='relu', input_shape=(n_steps, n_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')","e4f9a764":"history = model.fit(train_data, train_y, epochs=20, batch_size=2, verbose=2)","1b6bc3b2":"plt.plot(history.history['loss'])\n# plt.savefig('loss')\nplt.show()","918f11f1":"loss = model.evaluate(train_data, train_y, verbose=0)\nprint(loss)","9b983a95":"#predict\npredictions = model.predict(test_data, verbose=2)\ntrain_pre = model.predict(train_data,verbose=2)\npredictions = predictions.reshape(predictions.shape[0])\nprint(predictions.shape, test_y.shape)","1385e2b3":"show_data = np.hstack((train_y,test_y))\nprint(len(show_data))\nprint(train_pre.shape,predictions.shape)\ntrain_pre = train_pre.squeeze()\npre_data = np.hstack((train_pre,predictions))","3f0430ea":"fig = plt.figure(figsize=(16, 7))\nplt.plot(range(len(show_data)), show_data,'r',range(len(show_data)),pre_data,'b')\n# plt.savefig('all1.png')\nplt.show()","9e2635b0":"tool = np.ones((24,4))\ntest_y = test_y[:,np.newaxis]\npredictions = predictions[:,np.newaxis]\n\n\ntest_y.squeeze()\nreal = np.concatenate([tool,test_y],axis=1)\npre_real1 =np.concatenate([tool,predictions],axis=1) \n\ntool2 = scaler.inverse_transform(real)\ntool3 = scaler.inverse_transform(pre_real1)\n\nprint(tool2[:,-1])\nprint(tool3[:,-1])","fc270585":"## Load data\n### for example,we will use all5.xlsx to train and predict. And we also need to drop some useless columns, fill the nan use method='pad'","4356da83":"## Model build","ed30de70":"## Split_sequence \n### Function: Reconstruct this time series dataset as a supervised learning problem by using the value at the previous time point to predict the value at the next time point\n","48706d23":"## Train over, start to predict","18e12754":"## return real predict data ,use inverse transform","3a29311b":"## Visualisation\n#### red is predict while blue is the real","12d185c9":"## Import libraries\n### we will use keras to train and predict the temperature\n"}}