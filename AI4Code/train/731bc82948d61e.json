{"cell_type":{"2bd84b2e":"code","a4c2c18f":"code","b66b3caa":"code","b747ce11":"code","ad39e7ce":"code","444cc557":"code","7fcd7ee1":"code","48345f60":"code","9dacebae":"code","59a7ae4a":"code","2477c21b":"code","da28a6bd":"code","6ba457a6":"code","239be926":"code","7b8c9006":"code","b1be0819":"code","fd2abee2":"code","94495c00":"code","f9ff60d6":"code","64209cea":"code","964ac2f5":"code","6bdf13b5":"code","376a5f05":"code","2b242330":"code","1d9259b3":"code","5317a516":"code","b3def876":"code","11167b87":"code","062b7ee0":"code","084fba6e":"code","a622a02d":"code","777bd58c":"code","77218e49":"code","622a66c5":"markdown","251c96b9":"markdown","08b443c4":"markdown","912ac712":"markdown","16d901f5":"markdown","e846ca14":"markdown","90417525":"markdown","029ce446":"markdown","d5f4e60a":"markdown","ff393fa9":"markdown","f9b57dc0":"markdown","0edea882":"markdown","02a5c4a5":"markdown"},"source":{"2bd84b2e":"# Import Dependencies\n%matplotlib inline\n\n# Data Manipulaiton\nimport numpy as np\nimport pandas as pd\n\n# Data Visualisation\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n#SQL\nimport sqlite3, csv\nfrom sqlalchemy import create_engine\n\n# Ignoring warning \nimport warnings\nwarnings.filterwarnings('ignore')\n\nprint(\"Setup Complete\")","a4c2c18f":"covid_filepath = '..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv'\ncovid_df = pd.read_csv(covid_filepath)\npopulation_filepath = '..\/input\/population-by-country-2020\/population_by_country_2020.csv'\npopulation_df = pd.read_csv(population_filepath)\nprint('Import complete')","b66b3caa":"# Is there any missing data?\nmissingno.matrix(covid_df, figsize=(30,10))","b747ce11":"covid_df.isnull().sum()","ad39e7ce":"covid_df.tail()","444cc557":"print(\"Number of unique dates is: {}\" .format(len(covid_df['date'].unique())))","7fcd7ee1":"print(\"Dates in the dataset range from {0} to {1}\".format(covid_df['date'].min(), covid_df['date'].max()))","48345f60":"# Converting CSV using pandas.DataFrame.to_sql\nengine = create_engine('sqlite:\/\/',  echo = False) \npopulation_df.to_sql('population_sql', con = engine)\ncovid_df.to_sql('covid_sql', con = engine)","9dacebae":"sql_query = '''SELECT name FROM sqlite_master WHERE type='table';'''\nprint(engine.execute(sql_query).fetchall())","59a7ae4a":"# Creating subtable\nsql_query = \"\"\"\n            SELECT DISTINCT country, vaccines\n            FROM covid_sql\n            ORDER BY country\n            \"\"\"\ncountry_vaccines = pd.read_sql_query(sql_query, con = engine)\n\n# Stats per country\n# Total Vaccinations\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(total_vaccinations) AS total_vaccinations\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY total_vaccinations DESC\n            \"\"\"\ntotal = pd.read_sql_query(sql_query, con = engine)\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(total_vaccinations) AS total_vaccinations\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY total_vaccinations DESC\n            LIMIT 10\n            \"\"\"\ntop10_total = pd.read_sql_query(sql_query, con = engine)\n\n# People fully vaccinated\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(people_fully_vaccinated) AS people_fully_vaccinated\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY people_fully_vaccinated DESC\n            LIMIT 10\n            \"\"\"\ntop10_people_full = pd.read_sql_query(sql_query, con = engine)\n\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(people_fully_vaccinated) AS people_fully_vaccinated\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY people_fully_vaccinated DESC\n            \"\"\"\npeople_full = pd.read_sql_query(sql_query, con = engine)\n\n\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(people_vaccinated) AS people_vaccinated\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY people_vaccinated DESC\n            LIMIT 10\n            \"\"\"\ntop10_people = pd.read_sql_query(sql_query, con = engine)\n\n# Daily vaccinations\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(daily_vaccinations) AS daily_vaccinations\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY daily_vaccinations DESC\n            \"\"\"\ndaily = pd.read_sql_query(sql_query, con = engine)\n\nsql_query = \"\"\"\n            SELECT DISTINCT country, MAX(daily_vaccinations) AS daily_vaccinations\n            FROM covid_sql\n            GROUP BY country\n            ORDER BY daily_vaccinations DESC\n            LIMIT 10\n            \"\"\"\ntop10_daily = pd.read_sql_query(sql_query, con = engine)\n\n# Joining 'Population (2020)' from 'populaiton_by_country'\nsql_query = \"\"\"\n            SELECT covid_sql.*, population_sql.'Population (2020)' AS population\n            FROM covid_sql \n            INNER JOIN population_sql \n                ON population_sql.'Country (or dependency)' = covid_sql.country\n            \"\"\"\nvaccinations_population = pd.read_sql_query(sql_query, con = engine)","2477c21b":"vaccinations_population.to_sql('vaccinations_population', con = engine)  ","da28a6bd":"# Percentage of populaiton vaccinated\nsql_query = \"\"\"\n            SELECT DISTINCT country, (MAX(people_vaccinated)\/MAX(population))*100 AS percentage_vaccinated\n            FROM vaccinations_population\n            GROUP BY country\n            ORDER BY percentage_vaccinated DESC\n            LIMIT 15;\n            \"\"\"\npercent_vaccinated = pd.read_sql_query(sql_query, con = engine)\n\nsql_query = \"\"\"\n            SELECT DISTINCT country, (MAX(people_fully_vaccinated)\/MAX(population))*100 AS 'fully_vaccinated_(%)'\n            FROM vaccinations_population\n            WHERE people_fully_vaccinated > 0\n            GROUP BY country\n            ORDER BY 'fully_vaccinated_(%)' DESC\n            \"\"\"\npercent_fully_vaccinated = pd.read_sql_query(sql_query, con = engine)","6ba457a6":"# Estimated number of days until 100% population is vaccinated\nsql_query = \"\"\"\n            SELECT DISTINCT country, ((MAX(population) - MAX(people_fully_vaccinated))\/MAX(daily_vaccinations))*\n               (MAX(total_vaccinations)\/MAX(people_fully_vaccinated)) AS estimated_days_until_100_percent_vaccinations\n            FROM vaccinations_population\n            WHERE people_fully_vaccinated > 0\n            GROUP BY country\n            ORDER BY 'fully_vaccinated_(%)' DESC\n            \"\"\"\nestimated_days_until_100_percent_vaccinations = pd.read_sql_query(sql_query, con = engine)","239be926":"# Splitting strings in 'vaccines'\na = country_vaccines['vaccines']\ncountry_vaccines['split']=[i.rsplit(',',3)[0] for i in a]\ncountry_vaccines['split'].tail()","7b8c9006":"# Vaccines used in each country\ncountry_vaccines","b1be0819":"# Populatiry of each vaccine (1 per country)\nplt.figure(figsize=(10,20))\nsns.countplot(y =country_vaccines['vaccines'])\nplt.title('Number of Countries using Vaccine')\nplt.ylabel('Vaccine Name')\nplt.xlabel('Number of Countries');","fd2abee2":"fig = px.treemap(total,path = ['country'],values = 'total_vaccinations')\nfig.update_layout(title='Total Vaccinations for Each Country',title_x=0.5)\nfig.show()","94495c00":"plt.figure(figsize=(20,8))\nsns.barplot(x = top10_total[\"country\"], y = top10_total['total_vaccinations'])\nplt.title('Top 10 Countries with Total Vaccinations')","f9ff60d6":"fig = go.Figure(data=[go.Scatter(\n    x=top10_people['country'], y=top10_people['people_vaccinated'],\n    mode='markers',\n    marker=dict(\n        color=top10_people['people_vaccinated'],\n        size=top10_people['people_vaccinated']*0.000005,\n        showscale=True\n    ))])\n\nfig.update_layout(title='Top 10 Countries with People Vaccinated',xaxis_title=\"Country\",yaxis_title=\"People Vaccinated\",title_x=0.5)\nfig.show()","64209cea":"fig = go.Figure(go.Funnel(\n    x=percent_vaccinated[\"percentage_vaccinated\"],\n    y=percent_vaccinated[\"country\"] ))\nfig.update_layout(title='Top 10 Countries with Highest Percent of Population Vaccinated (%)',yaxis_title=\"Country\",xaxis_title=\" Percent of Population Vaccinated \",title_x=0.5)\nfig.show()","964ac2f5":"# Creating function to get the name of the dataframe\ndef get_df_name(data):\n    name =[x for x in globals() if globals()[x] is data][0]\n    return name","6bdf13b5":"def auto_plot(target_column, data, title, figsize=(20,10)):\n    \n    plt.figure(figsize=figsize)\n    sns.barplot(x=data['country'], y = data[target_column])\n    plt.title('Top 10 Countries for {}'.format(title))\n    plt.xlabel('Country')\n    ","376a5f05":"auto_plot('people_fully_vaccinated', top10_people_full, title='People Fully Vaccinated')","2b242330":"fig = px.treemap(daily,path = ['country'],values = 'daily_vaccinations')\nfig.update_layout(title='Daily Vaccinations by Country',title_x=0.5)\nfig.show()","1d9259b3":"percent_fully_vaccinated_10 = percent_fully_vaccinated.sort_values(by=['fully_vaccinated_(%)'], ascending = False)[:10]","5317a516":"percent_fully_vaccinated_10","b3def876":"auto_plot('fully_vaccinated_(%)', percent_fully_vaccinated_10, title='Percent of Population Fully Vaccinated')","11167b87":"percent_fully_vaccinated = percent_fully_vaccinated.sort_values(by=['fully_vaccinated_(%)'], ascending = False)","062b7ee0":"fig = px.treemap(percent_fully_vaccinated,path = ['country'],values = 'fully_vaccinated_(%)')\nfig.update_layout(title='Percent of Population Fully Vaccinated',title_x=0.5)\nfig.show()","084fba6e":"auto_plot('daily_vaccinations', top10_daily, title = 'Daily Vaccinations')","a622a02d":"estimated_days_until_100_percent_vaccinations_10 = estimated_days_until_100_percent_vaccinations.sort_values(by=['estimated_days_until_100_percent_vaccinations'], ascending = True)[:10]","777bd58c":"auto_plot('estimated_days_until_100_percent_vaccinations', estimated_days_until_100_percent_vaccinations_10, title = 'Fewest Estimated Days Until 100% Population Vaccinated')","77218e49":"estimated_days_until_100_percent_vaccinations_10","622a66c5":"# Track the progress of COVID-19 vaccination\n\n### Task Details\nAnswer to questions like:\n\n* What vaccines are used and in which countries?\n* What country is vaccinated more people?\n* What country is vaccinated a larger percent from its population?","251c96b9":"# Using SQL to manipulate dataframe","08b443c4":"### Issue with code:\nNeed to split vaccine companies in 'vaccines'.","912ac712":"## Estimated Number of Days Until 100% Population Vaccinated","16d901f5":"## People Fully Vaccinated","e846ca14":"There is seemingly a large amount of missing information across the board.","90417525":"For further visualisations on this dataset visit:\n\nhttps:\/\/public.tableau.com\/profile\/joseph.awonusi#!\/vizhome\/COVID-19VaccinationProgress\/Dashboard1","029ce446":"# Vaccines Used Per Country","d5f4e60a":"# Data Description\n\nThe data contains the following information:\n\n* Country- this is the country for which the vaccination information is provided;\n* Country ISO Code - ISO code for the country;\n* Date - date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;\n* Total number of vaccinations - this is the absolute number of total immunizations in the country;\n* Total number of people vaccinated - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;\n* Total number of people fully vaccinated - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;\n* Daily vaccinations (raw) - for a certain data entry, the number of vaccination for that date\/country;\n* Daily vaccinations - for a certain data entry, the number of vaccination for that date\/country;\n* Total vaccinations per hundred - ratio (in percent) between vaccination number and total population up to the date in the country;* \n* Total number of people vaccinated per hundred - ratio (in percent) between population immunized and total population up to the date in the country;\n* Total number of people fully vaccinated per hundred - ratio (in percent) between population fully immunized and total population up to the date in the country;\n* Number of vaccinations per day - number of daily vaccination for that day and country;\n* Daily vaccinations per million - ratio (in ppm) between vaccination number and total population for the current date in the country;\n* Vaccines used in the country - total number of vaccines used in the country (up to date);\n* Source name - source of the information (national authority, international organization, local organization etc.);\n* Source website - website of the source of information;","ff393fa9":"## Daily Vaccinations","f9b57dc0":"## People Vaccinated","0edea882":"## Total Vaccinations","02a5c4a5":"# Data Visulisation\n\n**Visulisations for:**\n* Total vaccinations\n* People Vaccinated\n* Percentage of people vaccinated\n* People fully vaccinated\n* Percentage of people fully vaccinated\n* Daily vaccinations\n* Estimated days until 100% of population is vaccinated"}}