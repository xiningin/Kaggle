{"cell_type":{"0b34ac0e":"code","13b12f48":"code","49ded318":"code","7069b6f6":"code","1795288f":"code","cfeedc9b":"code","ff8260d4":"code","bd0f7304":"code","67810116":"code","cbc3dcf1":"code","ac9fe1d7":"code","30956d5e":"code","5b9722bc":"code","a2318284":"code","d109afb3":"code","40db91aa":"code","b34eef84":"code","f36db6be":"code","0599c704":"code","4e5db394":"code","50f705ed":"code","5f1f0681":"code","8d582279":"code","3bfc5d87":"code","ac0bd810":"code","e03cff98":"code","dd20d837":"code","48a40000":"code","cbdc8bf6":"code","297ff926":"code","c1838d0f":"code","ac2dfcd3":"code","34c69206":"code","9622bcb6":"code","7247a3bf":"code","72f2a4c9":"code","c6d729de":"code","7663d4b7":"code","9b9f1c4f":"code","a8212d9b":"code","26b93667":"code","90000350":"code","cfc9d074":"code","d3ef0765":"code","4cb26be7":"code","7a4bb7f1":"code","d3e3bcb1":"code","131125b7":"code","1a26b5dd":"code","9d7f313c":"code","8e7205d7":"code","d366b75e":"code","f158a398":"code","bee6ec26":"code","668edf3e":"code","3927f8dd":"code","fd69a757":"markdown","d01cc062":"markdown","6db5429f":"markdown","11d91f41":"markdown","b2b347e7":"markdown","65057b47":"markdown","8c73b4d1":"markdown"},"source":{"0b34ac0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13b12f48":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report","49ded318":"path_train = '\/kaggle\/input\/loan-pred-traincsv\/'\n    \npl_train = pd.read_csv(path_train+'Loan pred_train.csv')\npl_train.head()","7069b6f6":"pl_train.columns","1795288f":"pl_train.info()","cfeedc9b":"pl_train.isnull().sum()","ff8260d4":"# Running value counts on Gender for train\npl_train['Gender'].value_counts()","bd0f7304":"pl_train['Gender'] = pl_train['Gender'].fillna('unknown')","67810116":"# Value counts after fillna\npl_train['Gender'].value_counts()","cbc3dcf1":"pl_train['Married'].value_counts()","ac9fe1d7":"pl_train['Married'] = pl_train['Married'].fillna('unknown')","30956d5e":"# Value counts of Married after fillna\npl_train['Married'].value_counts()","5b9722bc":"# Running value counts on Dependents for train\npl_train['Dependents'].value_counts()","a2318284":"# FIlling max count value\npl_train['Dependents'] = pl_train['Dependents'].fillna('0')","d109afb3":"# chaning 3+ to 3 for ease in future processing\npl_train['Dependents'] = pl_train['Dependents'].replace({'3+':3})","40db91aa":"# Value Counts after fillna and chaning 3+ to 3\npl_train['Dependents'].value_counts()","b34eef84":"pl_train['Self_Employed'].value_counts()","f36db6be":"pl_train['Self_Employed'] = pl_train['Self_Employed'].fillna('unknown')","0599c704":"# Running Value conuts again after fillna\npl_train['Self_Employed'].value_counts()","4e5db394":"np.mean(pl_train['Loan_Amount_Term'])","50f705ed":"# Replacing null values with mean of data\npl_train['Loan_Amount_Term'] = pl_train['Loan_Amount_Term'].fillna(342.0)","5f1f0681":"pl_train['Loan_Amount_Term'].isnull().sum()","8d582279":"# Running value counts on Credit_History for train\npl_train['Credit_History'].value_counts()","3bfc5d87":"# Creating additional category\npl_train['Credit_History'] = pl_train['Credit_History'].fillna(1.0)","ac0bd810":"# Running value counts on Loan Amount Terms\npl_train['Credit_History'].value_counts()","e03cff98":"np.mean(pl_train['LoanAmount'])","dd20d837":"#filling null values of Loan amount with mean(146.4)\npl_train['LoanAmount'] = pl_train['LoanAmount'].fillna(146.4)","48a40000":"pl_train['LoanAmount'].isnull().sum()","cbdc8bf6":"pl_train.isnull().sum()","297ff926":"pl_train['Property_Area'].value_counts()","c1838d0f":"mylist_train = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Credit_History', 'Property_Area' , 'Loan_Status']","ac2dfcd3":"for i in mylist_train:\n    pl_train[i] = pl_train[i].astype({i:'category'})","34c69206":"pl_train.info()","9622bcb6":"# Evaluating percentage of loan status to yes and no\npl_train['Loan_Status'].value_counts(normalize=True)*100","7247a3bf":"sns.factorplot('Loan_Status','ApplicantIncome', data=pl_train, hue='Self_Employed')","72f2a4c9":"sns.factorplot('Loan_Status','ApplicantIncome', data=pl_train,hue='Credit_History')","c6d729de":"sns.factorplot('Loan_Status','ApplicantIncome', data=pl_train,hue='Education')","7663d4b7":"sns.factorplot('Loan_Status','ApplicantIncome', data=pl_train, hue='Property_Area')","9b9f1c4f":"sns.factorplot('Loan_Status','ApplicantIncome', data=pl_train, hue='Dependents')","a8212d9b":"sns.factorplot('Loan_Status','CoapplicantIncome', data=pl_train, hue='Married')","26b93667":"sns.factorplot('Loan_Status','CoapplicantIncome', data=pl_train, hue='Dependents')","90000350":"# Male = 0, Female = 1\npl_train['Gender'] = pl_train['Gender'].replace({'Male':0, 'Female':1,'unknown' : 2})","cfc9d074":"# Yes = 1, No = 0\npl_train['Married'] = pl_train['Married'].replace({'Yes' :1, 'No': 0, 'unknown':2})","d3ef0765":"# Graduate = 1, Not Graduate = 0\npl_train['Education'] = pl_train['Education'].replace ({'Graduate' : 1, 'Not Graduate' : 0})","4cb26be7":"# Yes: 1\n# No : 0\n# unknown:2\npl_train['Self_Employed'] = pl_train['Self_Employed'].replace ({'Yes': 1,'No' : 0, 'unknown':2})","7a4bb7f1":"pl_train['Property_Area'] = pl_train['Property_Area'].replace ({'Semiurban': 1,'Urban' : 0, 'Rural':2})","d3e3bcb1":"pl_train['Loan_Status'] = pl_train['Loan_Status'].replace({'Y':1, 'N':0})","131125b7":"pl_train = pl_train.drop(columns=['Loan_ID'])","1a26b5dd":"X_train = pl_train.drop(columns=['Loan_Status'])","9d7f313c":"y_train = pl_train['Loan_Status']","8e7205d7":"lr = LogisticRegression()","d366b75e":"lr.fit(X_train,y_train)","f158a398":"lr.score(X_train,y_train)","bee6ec26":"knn = KNeighborsClassifier()","668edf3e":"knn.fit(X_train,y_train)","3927f8dd":"knn.score(X_train,y_train)","fd69a757":"# changing Datatype of attributes","d01cc062":"* Education, ApplicantIncome, CoapplicantIncome, Property_Area, Loan_Status do not have any null entries\n* Gender contains 13 null entries\n* Married contains 03 null entries\n* Dependents contains 14 null entiries           \n* Self_Employed contains 32 null entries\n* LoanAmount contains 22 null entries\n* Loan_Amount_Term contains 14 null entries\n* Credit_History contains 50 null entries","6db5429f":"# Addressing Missing values","11d91f41":"* Converting categories to numbers for model learning","b2b347e7":"* Loan_ID, Gender, Married, Dependents, Education, Self_Employed, Property_Area, Loan_Status are all attributes with data type as object\n* ApplicantIncome is a attribute with datatype as int64  \n* CoapplicantIncome, LoanAmount, Loan_Amount_Term, Credit_History are attributes with datatype as float","65057b47":"# Plotting Graphs","8c73b4d1":"# ML Model"}}