{"cell_type":{"bc7376a2":"code","d0092f02":"code","246eb5a0":"code","49936601":"code","fc8d729f":"code","8d4d68e4":"code","242e3b49":"code","16d09b9a":"code","6c405f6e":"code","2c1c0053":"code","d324afef":"code","8e603da7":"code","89b4a658":"code","9454de51":"code","c8541c4d":"code","bc741ab4":"code","97e44e70":"code","df01abac":"code","65a3b196":"code","a564b01f":"code","6369502a":"code","abd76dd0":"code","8a3f3bea":"code","a3768191":"code","c3e1a7ca":"code","d672f5fe":"code","1b3a2ab0":"code","29b72459":"code","a9a5c46d":"markdown","36b54ab2":"markdown","eab8d1f0":"markdown","9279c823":"markdown","7d9646ae":"markdown"},"source":{"bc7376a2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline","d0092f02":"data = pd.read_csv(\"..\/input\/body-fat-prediction-dataset\/bodyfat.csv\")","246eb5a0":"data.head()","49936601":"data['Weight'] = data['Weight'] * 0.45\ndata['Height'] = data['Height'] * 2.54","fc8d729f":"data","8d4d68e4":"data.info()","242e3b49":"data.describe()","16d09b9a":"data.isnull().sum()","6c405f6e":"def plot_hist(variables):\n    data[variables].plot.hist()\n    print(variables)\n    plt.show()","2c1c0053":"for c1 in list(data.columns):\n    plot_hist(c1)\n    ","d324afef":"data","8e603da7":"sns.pairplot(data);","89b4a658":"sns.scatterplot(x=data['Weight'],y=data['BodyFat'])","9454de51":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","c8541c4d":"X= data.drop(['BodyFat'],axis=1)\ny= data['BodyFat']","bc741ab4":"X_train, X_test, y_train, y_test = train_test_split(X,y , test_size= .2, random_state=42)","97e44e70":"ss= StandardScaler()\nscaled_train= ss.fit_transform(X_train)\nscaled_test = ss.fit_transform(X_test)","df01abac":"from sklearn.neighbors import KNeighborsRegressor\nknn= KNeighborsRegressor()\nknn.fit(scaled_train,y_train)\nprint(knn.score(scaled_test,y_test))","65a3b196":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(scaled_train, y_train)\nprint(rf.score(scaled_test,y_test))","a564b01f":"from sklearn.tree import DecisionTreeRegressor\ndtc = DecisionTreeRegressor()\ndtc.fit(scaled_train,y_train)\nprint(dtc.score(scaled_test, y_test))","6369502a":"from lightgbm import LGBMRegressor\nlgbmr= LGBMRegressor()\nevals = [(scaled_test, y_test)]\nlgbmr.fit(scaled_train, y_train)","abd76dd0":"lgbmr.score(scaled_test,y_test)","8a3f3bea":"from lightgbm import LGBMRegressor\nlgbmr= LGBMRegressor()\nevals = [(scaled_test, y_test)]\nlgbmr.fit(scaled_train, y_train,early_stopping_rounds=100, eval_metric='logloss', verbose=True, eval_set=evals)","a3768191":"preds = lgbmr.predict(scaled_test)\npreds","c3e1a7ca":"from sklearn.model_selection import cross_validate\ncross_val = cross_validate(estimator=lgbmr,\n                          X=X,y=y)\n\nprint(\"avg fit time {}, std :{}\".format(cross_val['fit_time'].mean(), cross_val['fit_time'].std()))\nprint(\"avg score_time {}, std :{}\".format(cross_val['score_time'].mean(), cross_val['score_time'].std()))\nprint(\"avg test_score {}, std :{}\".format(cross_val['test_score'].mean(), cross_val['test_score'].std()))","d672f5fe":"from lightgbm import plot_importance, plot_metric, plot_tree","1b3a2ab0":"import graphviz\nplot_metric(lgbmr);","29b72459":"plot_importance(lgbmr,figsize=(12,10));","a9a5c46d":"# Library","36b54ab2":"# EDA","eab8d1f0":"1 inch = 2.54 cm <br>\n1 lbs = 0.45 kg","9279c823":"# split","7d9646ae":"# LightGBM"}}