{"cell_type":{"14c49b19":"code","0227a763":"code","2ab71ba3":"code","12bfa26d":"code","ce87f991":"code","20e9fe37":"code","86e97071":"code","8a2a329c":"code","dfb0697f":"code","275fecd7":"code","bd81e4ba":"code","63aea5e5":"code","3a8148e4":"code","6591b625":"code","71ad3496":"code","01fe8c8b":"code","fd399f2c":"code","1af0a5c2":"code","9fb66d1d":"code","7dbaab60":"code","26820858":"code","dc37c807":"code","edda8f3a":"code","df8fa9fd":"code","23ae7f02":"code","89f89e9b":"code","788167f9":"code","3fb59271":"code","fc780043":"code","2dda551e":"code","46bd768e":"code","5ded0eb0":"code","483c9d8b":"code","a55d7c3d":"code","9551e07b":"code","113b9d5f":"code","2c500e7a":"code","9aedeb15":"code","c05f3fbe":"code","5d04cfcb":"code","5d0c9cfb":"code","7837f698":"code","70354195":"code","457f68d6":"code","f01949cc":"code","c7e637c9":"code","f7069080":"code","d8d05382":"code","d4f57d7c":"code","4e628880":"code","8d0c2669":"code","9a23fa4d":"code","5ae30f18":"code","13f69a4a":"code","f9494146":"code","28d75b09":"code","e0d2e175":"code","6c51eb8b":"code","7aa39572":"code","0912946d":"code","3b426419":"code","4a4479b2":"code","016814fa":"code","c83a97b8":"code","17d98e44":"code","cb1482b5":"code","7b79fd9e":"code","6b98f4c3":"code","d3b9a1dd":"code","88fe9503":"code","3d00f154":"code","f8aa1f89":"code","b1102748":"code","cb399d2d":"code","56a031f9":"code","3e886085":"code","caa4225d":"code","00c3dc8a":"code","d1706eef":"code","aad3b933":"code","62279dc0":"code","ae2aabe3":"code","32066e4d":"code","af334bc8":"code","48624658":"code","e62c62ca":"code","2ebe4430":"code","1e81e90b":"code","0510a5da":"code","a4dba6e9":"code","58169503":"code","661b3fac":"code","6b256df3":"code","2674354f":"code","569e5c5c":"code","3c409bc7":"code","dba090c8":"code","ac7042f2":"code","5aa7b85e":"code","17340180":"markdown","8aebce55":"markdown","1788e891":"markdown","cdf3939b":"markdown","b326792b":"markdown","28ac2ad6":"markdown","9e4296c1":"markdown","2009abb4":"markdown","ab56fa5d":"markdown","a77c537b":"markdown","96d1d6c4":"markdown","aba3782c":"markdown"},"source":{"14c49b19":"print(\"acaba oldumu\")","0227a763":"v_massage = \"hello world\"\nprint(\"hi\")","2ab71ba3":"v_name = \"lokum\"\nv_surname = \"ayy\u0131ld\u0131z\"\n\nv_fullname = v_name + v_surname\nprint(v_fullname)","12bfa26d":"v_fullname = (v_name +\" \"+v_surname)\n\nprint(v_fullname)","ce87f991":"v_num1 = \"1005\"\nv_num2 = \"1014\"\nv_numSun1 = v_num1 +v_num2\n\nprint(v_numSun1)","20e9fe37":"v_lenFull = len(v_fullname)\n\nprint(\"v_fullname : \" ,v_fullname, \"and lengt is:\" ,v_lenFull )","86e97071":"\n#upper\nv_upperF = v_fullname.upper()\n\n#lower\nv_lowerF = v_name.lower()\nprint(\"v_fullname : \" , v_upperF ,\"lower : \" , v_lowerF)","8a2a329c":"v_titlef = v_fullname.title()\nprint(\"v_fullname : \", \" and title is : \",v_titlef)","dfb0697f":"v_num1 = 1015\nv_num2 = 1004\nv_sum1 = v_num1 + v_num2\n\nprint(v_sum1 , \"and type : \" , type(v_sum1))","275fecd7":"v_fl1 = 55.9\nv_fl2 = 20.5\nv_s3 = v_fl1 + v_fl2\n\nprint(v_s3 , type (v_s3))","bd81e4ba":"def f_SayHello():\n    print(\"Hi. I am coming from f_SayHello\")\n    \ndef f_SayHello2():\n    print(\"Hi. I am coming from from f_SayHello2\")\n    print(\"Good\")\n    \nf_SayHello()","63aea5e5":"f_SayHello2()","3a8148e4":"def f_sayMassage(v_Massage1):\n    print(v_Massage1 , \" came from 'f_sayMassage'\")\n    \ndef f_getFullName(v_FirstName , v_Surname , v_Age):\n    print(\"wellcome\" , v_FirstName , \" \" , v_Surname , \"your age : \" , v_Age)","6591b625":"f_getFullName(\"lokum\" , \"ayy\u0131ld\u0131z\" , 13)","71ad3496":"def f_Calc1(f_Num1 , f_Num2 , f_Num3):\n    v_cevap = f_Num1 + f_Num2 + f_Num3\n    print(\"cevap = \" ,\" \" , v_cevap)\n    ","01fe8c8b":"f_Calc1(123 , 456 , 890)","fd399f2c":"# return function\ndef f_Calc2(v_Num1 , v_Num2 , v_Num3):\n    v_Out = v_Num1+v_Num2+v_Num3*2\n    print(\"Hi from f_Calc2\")\n    return v_Out","1af0a5c2":"v_gelen =  f_Calc2(4,7,9)\nprint(\"Score is : \" , v_gelen)","9fb66d1d":"# Default Functions :\ndef f_getSchoolInfo(v_Name,v_StudentCount,v_City = \"ISTANBUL\"):\n    print(\"Name : \" , v_Name , \" St Count : \" , v_StudentCount\n          , \" City : \" , v_City)","7dbaab60":"f_getSchoolInfo(\"AAIHL\" , 353)\nf_getSchoolInfo(\"RIL\" , 353 , \"R\u0130ZE\")","26820858":"# Flexible Functions :\n\ndef f_Flex1(v_Name , *v_messages):\n    print(\"Hi \" , v_Name , \" your first message is : \" , v_messages[2])\n","dc37c807":"f_Flex1(\"Lokum\" , \"Nbr\" , \"Aram\u0131yosun?\" , \"Ge\u00e7mi\u015folsun\")","edda8f3a":"# Lambda Function :\n\nv_result1 = lambda x : x*5\nprint(\"Result is : \" , v_result1(401))","df8fa9fd":"def f_alan(kenar1,kenar2):\n    print(kenar1*kenar2)","23ae7f02":"f_alan(6,9)","89f89e9b":"l_list1 = [1,3,0,2,4,7]\nprint(l_list1)\nprint(\"Type of 'l_list1' is : \" , type(l_list1))","788167f9":"v_list1_4 = l_list1[0]\nprint(v_list1_4)\nprint(\"Type of 'v_list1_4' is : \" , type(v_list1_4))","3fb59271":"l_list2 = [\"g\u00fcn1\",\"g\u00fcn2\",\"g\u00fcn3\",\"g\u00fcn4\",\"g\u00fcn5\"]\nprint(l_list2)\nprint(\"Type of 'l_list2' is : \" , type(l_list1))","fc780043":"v_list2_4 = l_list2[3]\nprint(v_list2_4)\nprint(\"Type of 'v_list2_4' is : \" , type(v_list2_4))","2dda551e":"v_list2_x3 = l_list2[-3]\nprint(v_list2_x3)","46bd768e":"l_list2_2 = l_list2[0:3]\nprint(l_list2_2)","5ded0eb0":"#Len\nv_len_l_list2_2 = len(l_list2_2)\nprint(\"Size of 'l_list2_2' is : \",v_len_l_list2_2)\nprint(l_list2_2)","483c9d8b":"#Append\nl_list2_2.append(\"g\u00fcn9\")\nprint(l_list2_2)\n\nl_list2_2.append(\"g\u00fcn95\")\nprint(l_list2_2)","a55d7c3d":"#Reverse\nl_list2_2.reverse()\nprint(l_list2_2)","9551e07b":"#Sort\nl_list2_2.sort()\nprint(l_list2_2)","113b9d5f":"#Remove\n\n#First add 'Saturday' then Remove 'Saturday'\nl_list2_2.append(\"g\u00fcn53\")\nprint(l_list2_2)","2c500e7a":"d_dict1 = {\"Tower\":\"Kule\" , \"msu\u0131o\" : \"Okul\" , \"Worker\": \"\u00c7al\u0131\u015fan\"}\n\nprint(d_dict1)\nprint(type(d_dict1))","9aedeb15":"v_school = d_dict1[\"Tower\"]\nprint(v_school)\nprint(type(v_school))","c05f3fbe":"#Keys & Values\n\nv_keys = d_dict1.keys()\nv_values = d_dict1.values()\n\n\nprint(v_keys)\nprint(type(v_keys))\n\nprint()\nprint(v_values)\nprint(type(v_values))","5d04cfcb":"v_var1 = 2394823\nv_var2 = 1238967\n\nif v_var1 > v_var2:\n    print(v_var1 , \"bu b\u00fc\u00fck bundan \" , v_var2)\nelif v_var1 < v_var2:\n    print(v_var1 , \"bu g\u00fccc\u00fck bundan \" , v_var2)\nelse : \n    print(\"bu 2 degi\u015fken\")","5d0c9cfb":"# < , <= , > , >= , == , <>\ndef f_Comparison1(v_Comp1 , v_Comp2):\n    if v_Comp1 > v_Comp2:\n        print(v_Comp1 , \" bu bundan b\u00fc\u00fck \" , v_Comp2)\n    elif v_Comp1 < v_Comp2:\n        print(v_Comp1 , \" bu bundan k\u00fc\u00e7\u00fck \" , v_Comp2)\n    else :\n        print(\"These \" , v_Comp1 , \" bir birilerine e\u015fitler\")\n        \nf_Comparison1(53,11)\nf_Comparison1(61,99)\nf_Comparison1(11,11)","7837f698":"# using 'IN' with LIST\n\n\ndef f_IncludeOrNot(v_search, v_searchList):\n    if v_search in v_searchList :\n        print(\"Buldum!! \",v_search , \"is in list.\")\n    else :\n        print(v_search , \" \u00f6z\u00fcr dileirm bulamd\u0131m yaaa :(\")\n        \nl_list = list(d_dict1.keys()) \nprint(l_list)\nprint(type(l_list))\n\nf_IncludeOrNot(\"Tower\" , l_list)\nf_IncludeOrNot(\"u\u00e7ak\" , l_list)","70354195":"for a in range(0,54):\n    print(\"Denek \" , a)\n","457f68d6":"v_happyMessage = \"BEN RIZE LIYIM\"\nprint(v_happyMessage)","f01949cc":"for v_chrs in v_happyMessage:\n    print(v_chrs)\n    print(\"********************\")","c7e637c9":"for v_chrs in v_happyMessage.split():\n    print(v_chrs)","f7069080":"i = 0\nwhile(i < 20):\n    print(\"selam denek\" , i)\n    i = i+1","d8d05382":"l_list1 = (\"1\",\"4\",\"5\",\"3\")","d4f57d7c":"print(l_list1)\nprint()\n\ni = 0\nk = len(l_list1)\n\nwhile(i<k):\n    print(l_list1[i])\n    i=i+1","4e628880":"#Let's find minimum and maximum number in list\n\nl_list2 = [9,1,4,-2,-912903801938,135,912389123347,910923819,-189000]\n\nv_min = 0\nv_max = 0\n\nv_index = 0\nv_len = len(l_list2)\n\nwhile (v_index < v_len):\n    v_current = l_list2[v_index]\n    \n    if v_current > v_max:\n        v_max = v_current\n    \n    if v_current < v_min:\n        v_min = v_current\n    \n    v_index = v_index+1\n\nprint (\"Maximum number is : \" , v_max)\nprint (\"Minimum number is : \" , v_min)","8d0c2669":"# Import libary to use\nimport numpy as np ","9a23fa4d":"v_array1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nv_array2_np = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])","5ae30f18":"print(\"v_array1 : \" , v_array1)\nprint(\"Type of v_array1 : \" , type(v_array1))","13f69a4a":"print(\"v_array2_np : \" , v_array2_np)\nprint(\"Type of v_array2_np : \" , type(v_array2_np))","f9494146":"# shape\nv_shape1 = v_array2_np.shape\nprint(\"v_shape : \" , v_shape1 , \" and type is : \" , type(v_shape1))","28d75b09":"# Reshape\nv_array3_np = v_array2_np.reshape(5,4)\nprint(v_array3_np)","e0d2e175":"# Dimension\nv_dimen1 = v_array3_np.ndim\nprint(\"v_dimen1 : \" , v_dimen1 , \" type is : \" , type(v_dimen1))","6c51eb8b":"# Size\nv_size1 = v_array3_np.size\nprint(\"v_size1 : \" , v_size1 , \" and type : \" , type(v_size1))","7aa39572":"# Let's create 3x4 array\nv_array4_np = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]])\nprint(v_array4_np)\nprint(\"---------------\")\nprint(\"Shape is : \" , v_array4_np.shape)","0912946d":"# Zeros\nv_array5_np = np.zeros((10,5))\nprint(v_array5_np)","3b426419":"# Update an item on this array \nv_array5_np[9,4] = 99\nprint(v_array5_np)","4a4479b2":"# Ones\nv_array6_np = np.ones((99,99))\nprint(v_array6_np)","016814fa":"# Empty\nv_array7_np = np.empty((3,2))\nprint(v_array7_np)","c83a97b8":"# Arrange\nv_array8_np = np.arange(10,45,5)\nprint(v_array8_np)\nprint(v_array8_np.shape)","17d98e44":"# Linspace\nv_array9_np = np.linspace(10,30,5)\nv_array10_np = np.linspace(10,40,30)\n\nprint(v_array9_np)\nprint(v_array9_np.shape)\nprint(\"-----------------------\")\nprint(v_array10_np)\nprint(v_array10_np.shape)","cb1482b5":"# Sum , Subtract , Square\nv_np1 = np.array([4,7,9])\nv_np2 = np.array([5,7,8])\n\nprint(v_np1 + v_np2)\nprint(v_np1 - v_np2)\nprint(v_np2 - v_np1)\nprint(v_np1 ** 2)","7b79fd9e":"# Sinus\nprint(np.sin(v_np2))","6b98f4c3":"# True \/ False\nv_np2_TF = v_np2 < 8\nprint(v_np2_TF)\nprint(v_np2_TF.dtype.name)","d3b9a1dd":"# Element wise Prodcut\nv_np1 = np.array([5,6,7])\nv_np2 = np.array([8,9,11])\nprint(v_np1 * v_np2)","88fe9503":"# Transpose\nv_np5 = np.array([[1,2,5],[9,5,3]])\nv_np5Transpose = v_np5.T\nprint(v_np5)\nprint(v_np5.shape)\nprint()\nprint(v_np5Transpose)\nprint(v_np5Transpose.shape)","3d00f154":"# Matrix Multiplication\nv_np6 = v_np5.dot(v_np5Transpose)\nprint(v_np6)","f8aa1f89":"# Exponential --> We will use on Statistics Lesson\nv_np5Exp = np.exp(v_np5)\n\nprint(v_np5)\nprint(v_np5Exp)","b1102748":"# Random \nv_np8 = np.random.random((6,6)) # --> It will get between 0 and 1 random numbers\nprint(v_np8)","cb399d2d":"#Sum , Max ,Min\nv_np8Sum = v_np8.sum()\nprint(\"Sum of array : \", v_np8Sum)  #--> Remember ! If you get sum of array we can use that :  sum(array1)\nprint(\"Max of array : \", v_np8.max()) #--> Remember ! If you get max of array we can use that :  max(array1)\nprint(\"Min of array : \", v_np8.min()) #--> Remember ! If you get min of array we can use that :  min(array1)","56a031f9":"# Sum with Column or Row\nprint(\"Sum of Columns :\")\nprint(v_np8.sum(axis=0)) # --> Sum of Columns\nprint()\nprint(\"Sum of Rows :\")\nprint(v_np8.sum(axis=1)) #Sum of Rows","3e886085":"# Square , Sqrt\nprint(np.sqrt(v_np8))\nprint()\nprint(np.square(v_np8))","caa4225d":"# Add\nv_np10 = np.array([1,2,3,4,5])\nv_np11 = np.array([52,51,50,49,48])\n\nprint(np.add(v_np10,v_np11))","00c3dc8a":"v_np12 = np.array([4,3,5,8,5,6,7,8,8])\n\nprint(\"First item is : \" , v_np12[8])\nprint(\"Third item is : \" , v_np12[1])","d1706eef":"# Get top 4 rows :\nprint(v_np12[0:4])\n","aad3b933":"# Reverse\nv_np12_Rev = v_np12[::-1]\nprint(v_np12_Rev)","62279dc0":"v_np13 = np.array([[5,4,3,2,1],[15,14,153,16,15]])\nprint(v_np13)\nprint()\nprint(v_np13[1,3]) #--> Get a row\n\nprint()\nv_np13[1,3] = 314 #--> Update a row\nprint(v_np13)","ae2aabe3":"# Get all rows but 3rd columns :\nprint(v_np13[:,2])","32066e4d":"#Get 2nd row but 2,3,4th columns\nprint(v_np13[1,1:4])","af334bc8":"# Get last row all columns\nprint(v_np13[-1,:])","48624658":"# Get last columns but all rows\nprint(v_np13[:,-1])","e62c62ca":"#Flatten\nv_np14 = np.array([[53,34,61],[1,6,45],[14,51,32],[33,19,13]])\nv_np15 = v_np14.ravel()\n\nprint(v_np14)\nprint(\"Shape of v_np14 is : \" ,v_np14.shape)\nprint()\nprint(v_np15)\nprint(\"Shape of v_np15 is : \" ,v_np15.shape)\nprint()","2ebe4430":"# Reshape\nv_np16 = v_np15.reshape(3,4)\nprint(v_np16)\nprint(\"Shape of v_np16 is : \" ,v_np16.shape)","1e81e90b":"v_np17 = v_np16.T\nprint(v_np17)\nprint(\"Shape of v_np17 is : \" ,v_np17.shape)","0510a5da":"v_np20 = np.array([[9,8],[7,6],[5,4]])\n\nprint(v_np20)\nprint()\nprint(v_np20.reshape(2,3))\n\nprint()\nprint(v_np20) #--> It has not changed !!","a4dba6e9":"# Resize\nv_np20.resize((2,3))\nprint(v_np20) # --> Now it changed !  Resize can change its shape","58169503":"v_np21 = np.array([[33,71],[37,43]])\nv_np22 = np.array([[13,64],[71,83]])\n\nprint(v_np21)\nprint()\nprint(v_np22)","661b3fac":"# Vertical Stack\nv_np23 = np.vstack((v_np21,v_np22))\nv_np24 = np.vstack((v_np22,v_np21))\n\nprint(v_np23)\nprint()\nprint(v_np24)","6b256df3":"# Horizontal Stack\nv_np25 = np.hstack((v_np21,v_np22))\nv_np26 = np.hstack((v_np22,v_np21))\n\nprint(v_np25)\nprint()\nprint(v_np26)","2674354f":"v_list1 = [3,4,9,8]\nv_np30 = np.array(v_list1)\n\nprint(v_list1)\nprint(\"Type of list : \" , type(v_list1))\nprint()\nprint(v_np30)\nprint(\"Type of v_np30 : \" , type(v_np30))","569e5c5c":"v_list2 = list(v_np30)\nprint(v_list2)\nprint(\"Type of list2 : \" , type(v_list2))","3c409bc7":"v_list3 = v_list2\nv_list4 = v_list2\n\nprint(v_list2)\nprint()\nprint(v_list3)\nprint()\nprint(v_list4)","dba090c8":"v_list2[0] = 55\n\nprint(v_list2)\nprint()\nprint(v_list3) # --> Same address with list2\nprint()\nprint(v_list4) # --> Same address with list2","ac7042f2":"v_list5 = v_list2.copy()\nv_list6 = v_list2.copy()\n\nprint(v_list5)\nprint()\nprint(v_list6)","5aa7b85e":"v_list2[0] = 71\n\nprint(v_list2)\nprint()\nprint(v_list5) # --> Not same address with list2\nprint()\nprint(v_list6) # --> Not same address with list2","17340180":"8.2. Basic Operations\n\n","8aebce55":"8.1 Basic\n","1788e891":"8.Numpy","cdf3939b":"8.4.Shape Manipulation\n\n","b326792b":"7.WH\u0130LE LOOP****","28ac2ad6":"5.If Else****","9e4296c1":"6.For Loop","2009abb4":"8.5.Stacking Arrays","ab56fa5d":"2) FUNCTIONS\n","a77c537b":"* 2)VARIBLES****","96d1d6c4":"8.3. Indexing and Slicing","aba3782c":"8.6.Convert and Copy Array"}}