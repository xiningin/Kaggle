{"cell_type":{"e5c4714a":"code","6053e2c0":"code","88bf5843":"code","eb66522f":"code","62dcebfb":"code","0edb421e":"code","983da664":"code","b127a23d":"code","7fce205a":"code","67cc5cee":"code","bcc854e9":"code","c51d6e8d":"code","cde86a84":"code","d6d0acb9":"code","956d810b":"markdown","626218c2":"markdown","5044a3bc":"markdown","fedf0ba5":"markdown","562f38f2":"markdown"},"source":{"e5c4714a":"# import all the libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Embedding, Dense, LSTM, Bidirectional","6053e2c0":"data_path = '..\/input\/womens-ecommerce-clothing-reviews\/Womens Clothing E-Commerce Reviews.csv'\n\ndata = pd.read_csv(data_path).head(1000)\ndata.head()\n","88bf5843":"data.describe()","eb66522f":"print(\"Shape of the data :\", data.shape)\nprint(\"The info of the data :\", data.info)","62dcebfb":"\nsentences = data['Review Text'].astype(str).str.lower()\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(sentences)\ntotal_words = len(tokenizer.word_index) + 1\nprint(total_words)\ntokenized_sentences = tokenizer.texts_to_sequences(data['Review Text'].astype(str))\n\n\n","0edb421e":"tf.keras.backend.clear_session()\n\ninput_sequences = []\nfor line in tokenized_sentences:\n\tfor i in range(1, len(line)):\n\t\tn_gram_sequence = line[:i+1]\n\t\tinput_sequences.append(n_gram_sequence)\n\n# pad sequences \nmax_sequence_len = max([len(x) for x in input_sequences])\ninput_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n\n# create predictors and label\nxs, labels = input_sequences[:,:-1],input_sequences[:,-1]\n\nys = tf.keras.utils.to_categorical(labels, num_classes=total_words)","983da664":"len(xs), len(ys)","b127a23d":"#Hyperparameters\nvocab_size = 10000\nembedding_dim = 64\n\n\nmodel = Sequential()\nmodel.add(Embedding(total_words, embedding_dim, input_length=max_sequence_len-1))\nmodel.add(Bidirectional(LSTM(250)))\nmodel.add(Dense(total_words\/2, activation='relu'))\nmodel.add(Dense(total_words, activation='softmax'))\n\nadam = Adam(learning_rate=0.001)\n\nmodel.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])\n\n\n\nprint(model.summary())","7fce205a":"history = model.fit(xs, ys, epochs=50, verbose=1)","67cc5cee":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.show()\n    \n    \nplot_graphs(history, 'accuracy')","bcc854e9":"def complete_this_paragraph(seed_text, next_words):\n    for _ in range(next_words):\n        token_list = tokenizer.texts_to_sequences([seed_text])[0]\n        token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n        #predicted = model.predict_classes(token_list, verbose=0)\n        predicted = np.argmax(model.predict(token_list, verbose=0), axis=-1)\n        \n        output_word = \"\"\n        for word, index in tokenizer.word_index.items():\n            if index == predicted:\n                output_word = word\n                break\n        seed_text += \" \" + output_word\n    return seed_text","c51d6e8d":"complete_this_paragraph(\"this is a good\", 40)\n","cde86a84":"complete_this_paragraph(\"i loved that dress\", 40)","d6d0acb9":"complete_this_paragraph(\"This shirt is so\", 40)","956d810b":"### Dataset","626218c2":"Here we will be generating Text so the useful column for this project is \"Review Text\"","5044a3bc":"### Prediction","fedf0ba5":"### Modelling","562f38f2":"### Data Prepocessing"}}