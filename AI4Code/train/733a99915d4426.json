{"cell_type":{"d23f9ea2":"code","2c2cb756":"code","da30ecaa":"code","72275609":"code","2ce51bb3":"code","f6e4d238":"code","e6cd9a15":"code","c3657cdf":"code","8f28f6ad":"code","95a14e3d":"code","0921e7ea":"code","8d9c50fe":"code","1c8afb5e":"code","5fcc2f08":"code","cda35e57":"code","a909865f":"code","70184c56":"code","fb04e068":"code","83b8143b":"code","28c55997":"code","87f36b6a":"code","419cd210":"code","9e57fa8f":"code","af63fe4a":"code","09a9988d":"code","edeb33f1":"code","509b753d":"code","b65e3360":"code","f9cfcbb3":"code","5fc8547d":"code","8d524ca2":"code","a947d0e8":"code","33f2db28":"code","1337d3c8":"code","c0c675aa":"code","c7e27582":"code","9ca35d5f":"code","14bfa99f":"code","2e57cfe3":"code","414adf42":"code","fff7b105":"code","67e63384":"code","35bd0836":"markdown","c5a5c11c":"markdown","78408ebf":"markdown","f32aa073":"markdown","e6ae712d":"markdown","4661f8b5":"markdown","9312530d":"markdown","785e9334":"markdown","0b5b74cd":"markdown","81be60b0":"markdown","6ef8a7f6":"markdown","82c258a0":"markdown","f0f22a71":"markdown","99536bb3":"markdown","8aa6fcd4":"markdown","30a7aaef":"markdown","8fa11298":"markdown","a9f5bfc3":"markdown","a791b29d":"markdown"},"source":{"d23f9ea2":"import tensorflow as tf\n\nfrom tensorflow import keras #deep learning framework\nfrom tensorflow.keras import layers,losses\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.layers import Activation,Dense,Dropout,BatchNormalization,Input,Flatten\nfrom tensorflow.keras.metrics import Recall\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2c2cb756":"df=pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')","da30ecaa":"df.head(10)","72275609":"df.info()","2ce51bb3":"df.describe()","f6e4d238":"df.isna()","e6cd9a15":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(100,80))\nsns.heatmap(df.isnull(), cbar=False)\n","c3657cdf":"cat_columns=['Alley','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Electrical','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PoolQC','Fence','MiscFeature']\nnum_columns=['LotFrontage','MasVnrArea','GarageYrBlt']","8f28f6ad":"for cat_ in cat_columns:\n    df[cat_]=df[cat_].fillna(-1)","95a14e3d":"plt.figure(figsize=(100,80))\nsns.heatmap(df.isnull(), cbar=False)","0921e7ea":"df['LotFrontage']=df['LotFrontage'].fillna(df['LotFrontage'].mean())\ndf['MasVnrArea']=df['MasVnrArea'].fillna(df['MasVnrArea'].mean())\ndf['GarageYrBlt']=df['GarageYrBlt'].fillna(1979.0)","8d9c50fe":"plt.figure(figsize=(100,80))\nsns.heatmap(df.isnull(), cbar=False)","1c8afb5e":"num_var = [key for key in dict(df.dtypes)\n             if dict(df.dtypes)[key] in ['float64','int64']]\ncat_var = [key for key in dict(df.dtypes)\n             if dict(df.dtypes)[key] in ['object'] ]\ndf[cat_var].head()","5fcc2f08":"from sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor col in cat_var:\n    df[col] = le.fit_transform(df[col].astype(str))\ndf.head()\n    ","cda35e57":"df.info()","a909865f":"rs = np.random.RandomState(0)\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","70184c56":"column_corr=['Id','MSSubClass','LandContour','Street','Utilities','LotConfig','LandSlope','Condition2','OverallCond','MasVnrType','BsmtFinType1','BsmtFinSF2','LowQualFinSF','BsmtHalfBath','3SsnPorch','PoolQC','MiscFeature','MiscVal','MoSold','YrSold','SaleType']","fb04e068":"for col1 in column_corr:\n    df = df.drop(col1,axis=1)\nrs = np.random.RandomState(0)\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","83b8143b":"corr_column=['1stFlrSF','TotRmsAbvGrd','FireplaceQu','GarageArea','GarageQual']\nfor col2 in corr_column:\n    df=df.drop(col2,axis=1)\nrs = np.random.RandomState(0)\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","28c55997":"colu=['Alley','Condition1','BldgType','RoofMatl','Exterior1st','Exterior2nd','ExterCond','Heating','Functional','EnclosedPorch','ScreenPorch','PoolArea']\nfor col_ in colu:\n    df=df.drop(col_,axis=1)\nrs = np.random.RandomState(0)\ncorr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","87f36b6a":"X= df.iloc[:,0:42]\ny= df.iloc[:,42]\ny.head()","419cd210":"from sklearn import model_selection\ndf.loc[:,'kfold']= -1\ndf = df.sample(frac=1).reset_index(drop=True)\nkf = model_selection.KFold(n_splits=10)\nfor fold, (trn_, val_) in enumerate(kf.split(X=df)):\n    df.loc[val_, 'kfold'] = fold\ndf.head()","9e57fa8f":"model = Sequential([\n    Input(42),\n    layers.BatchNormalization(),\n    Dense(42, activation=tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    Dense(64, activation=tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    Dense(32, activation=tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    Dense(16, activation=tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    Dense(8, activation =tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    Dense(4, activation=tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    layers.Dropout(0.5),\n    Dense(2, activation =tf.nn.leaky_relu),\n    layers.BatchNormalization(),\n    Dense(1, activation =tf.nn.relu)\n    \n    \n])\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=0.8,beta_1=0.3),\n    loss='mean_squared_error',\n    metrics=tf.keras.metrics.RootMeanSquaredError()\n)\n#(learning_rate=0.02),\nmodel.summary()","af63fe4a":"def func(arg):\n    arg=tf.convert_to_tensor(arg, dtype=tf.float32)\n    return arg","09a9988d":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self,epoch,logs={}):\n        if(logs.get('val_root_mean_squared_error')<27000.0000):\n            self.model.stop_training=True\ncallback= myCallback()","edeb33f1":"def run(fold):\n    if fold==0:\n        epoch=1000\n    else:\n        epoch=1000\n    df_train= df[df.kfold != 0]\n    df_valid=df[df.kfold==0]\n    X_train=df_train.iloc[: , :42].values\n    y_train=df_train.iloc[:,42].values\n    X_valid=df_valid.iloc[: , :42].values\n    y_valid=df_valid.iloc[:,42].values\n    history=model.fit(X_train,y_train , verbose=2, epochs=epoch, \n         validation_data=(X_valid,y_valid),batch_size=2048,callbacks=[callback])","509b753d":"for fold in range(10):\n    run(fold)","b65e3360":"df_test=pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\nId=df_test['Id']\ndf_test.head()","f9cfcbb3":"column_corr=['Id','MSSubClass','LandContour','Street','Utilities','LotConfig','LandSlope','Condition2','OverallCond','MasVnrType','BsmtFinType1','BsmtFinSF2','LowQualFinSF','BsmtHalfBath','3SsnPorch','PoolQC','MiscFeature','MiscVal','MoSold','YrSold','SaleType','1stFlrSF','TotRmsAbvGrd','FireplaceQu','GarageArea','GarageQual','Alley','Condition1','BldgType','RoofMatl','Exterior1st','Exterior2nd','ExterCond','Heating','Functional','EnclosedPorch','ScreenPorch','PoolArea']\nfor col in column_corr:\n    df_test=df_test.drop(col,axis=1)\ndf_test.info()","5fc8547d":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(100,80))\nsns.heatmap(df_test.isnull(), cbar=False)","8d524ca2":"num_var = [key for key in dict(df_test.dtypes)\n             if dict(df_test.dtypes)[key] in ['float64','int64']]\ncat_var = [key for key in dict(df_test.dtypes)\n             if dict(df_test.dtypes)[key] in ['object'] ]\ndf_test[cat_var]=df_test[cat_var].fillna(-1)\n","a947d0e8":"plt.figure(figsize=(100,80))\nsns.heatmap(df_test.isnull(), cbar=False)","33f2db28":"df_test['GarageYrBlt']=df_test['GarageYrBlt'].fillna(1979)","1337d3c8":"num_var = [key for key in dict(df_test.dtypes)\n             if dict(df_test.dtypes)[key] in ['float64','int64']]\nfor num_ in num_var:\n    df_test[num_]=df_test[num_].fillna(df_test[num_].mean())\n","c0c675aa":"cat_var = [key for key in dict(df_test.dtypes)\n             if dict(df_test.dtypes)[key] in ['object'] ]","c7e27582":"from sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor col in cat_var:\n    df_test[col] = le.fit_transform(df_test[col].astype(str))","9ca35d5f":"df_test.info()","14bfa99f":"test_preds =model.predict(df_test)","2e57cfe3":"test_preds=np.array(test_preds).tolist()\noutput=[]\nimport itertools\n\ndef oneDArray(x):\n    return list(itertools.chain(*x))\ntest_preds=oneDArray(test_preds)","414adf42":"output = pd.DataFrame({'Id': Id})\noutput['SalePrice']=test_preds","fff7b105":"output.head()","67e63384":"output.to_csv('submission.csv', index=False)","35bd0836":"***Now we are going to find the repair our data.And make it suitable for our models. So first thing is to deal with missing values***\n***We need to remember two things and that is there are two types of columns ***\n***1.Categorical- Columns with descreate values.Such as Salecondition column have values normal or abnormal missing values in these columns should be exchange with -1. So the model will treat missing value as a new class.And we need numerical values for our models.\n2.Numerical- They have numerical values its better to replace missing values with mean values.***","c5a5c11c":"***This class help us to stop the training as per our requirement. On the basis of metrics and losses.***","78408ebf":"# Data","f32aa073":"# Preprocessing","e6ae712d":"# Callback","4661f8b5":"***So we need to read the data the tabular data is most commonly stored in csv file. The data is present in the form of a dataframe.Now lets do some pactical.***","9312530d":"### This is a basic notebook to understand how can we approach a tabular competition with deep learning.Most of us are familier with this competition.Regression model are used when we required the continuous quantity such as price of the house can range to every possible reala number inbetween zero to let's say 100,000,000. But in case of classifier we need discreate output a whole number.So in this problem we are required to build a regression model to predict the housing prices.We are provided with various columns(factors that affect the value of the house).And a target column that told us how the prices are changing with respect to othe coulmns such are lotares etc.","785e9334":"***This is how our train data looks like.Train data is used to train the data and test data is used for examining and evaluation.***","0b5b74cd":"# Predictions","81be60b0":"# Please upvote if you like.Please choose GPU accelerator.","6ef8a7f6":"# Libraries\n\n**These are the modules that will help us to make things easy for us.They provided us with different functions that work to give insight of data and building model.**","82c258a0":"# Introduction","f0f22a71":"# Test\n***Now we do the same processing as we do to training data.***","99536bb3":"***So for training its important to give two data training data and test data trainig data is used to train data and validation data is used checking the model overfitting or underfitting. Now we will use kfold cross validation it means we are not using a constant set of value to our model we are changing our trainning and validation data.***","8aa6fcd4":"# Feel free to comment.","30a7aaef":"***We should drop the columns that are less useful for our model.One of the highly correlative columns should be dropped because they contribute very less in the model and we should always try to reduce dimensions of our models.***","8fa11298":"***So,This is our final dataFrame looklike.***","a9f5bfc3":"# Model","a791b29d":"# Training"}}