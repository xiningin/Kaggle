{"cell_type":{"605538c4":"code","adfd2b17":"code","60778569":"code","c76eb39f":"code","c202536e":"code","7634ffc4":"code","8eb6f95b":"code","8c151502":"code","3dac1074":"code","0d913910":"code","a03414d6":"code","487e23ba":"code","c10264c3":"code","5c00045b":"code","137a9c74":"code","555b4e5b":"code","312883ea":"code","4f391bef":"code","eafa82c4":"code","1e3052bf":"code","40158a56":"code","3a711e4b":"code","1713ca9a":"code","bcec23ca":"code","c250210c":"code","2990f37e":"code","154d7483":"code","eeb37f5e":"code","c897934e":"code","4730f526":"code","c8c4c9c3":"code","504ac3ec":"code","3cf41ef0":"code","f7a03501":"code","4abe5826":"code","be9a7f74":"code","495554a2":"code","2ac6074c":"code","3a341d83":"code","c594e5b0":"code","fd015f73":"code","d74f88f9":"code","67a5391d":"code","30b53789":"code","7c8ba484":"code","bec8a528":"code","3105770b":"code","5bb5fea2":"markdown"},"source":{"605538c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","adfd2b17":"df = pd.read_csv('\/kaggle\/input\/pakistan-car-prices\/updated_pakwheels.csv')","60778569":"df.head()","c76eb39f":"df.isnull().sum()","c202536e":"df.head()","7634ffc4":"df.drop(['Ad No','URL'],axis=True, inplace=True)","8eb6f95b":"df.head()","8c151502":"df['Brand Name'] = df.Name.apply(lambda x : x.split()[0])","3dac1074":"df['Location 2'] = df.Location.apply(lambda x: x.split()[-1])","0d913910":"def get(val):\n    if val!= 'Un-Registered':\n        return 'Registered'\n    else:\n        return val\ndf['Registered'] = df['Registered City'].apply(get)","a03414d6":"df.head(3)","487e23ba":"def Engine(val):\n    dis = {\n        1:\"Petrol\",\n        2:'Diesel',\n        3:'Hybrid'   \n    }\n    return dis[val]\ndef Trans(val):\n    dis = {\n        1: \"Automatic\",\n        2: \"Manual\"\n    }\n    return dis[val]","c10264c3":"df['Transmision Type'] = df.Transmission.apply(Trans)\ndf['Engine'] = df['Engine Type'].apply(Engine)","5c00045b":"df.head()","137a9c74":"df2  = df.drop(['Name','Location','Registered City','Engine Type','Transmission','Last Updated'],axis=1)","555b4e5b":"df2.head()","312883ea":"# 1 for Hatchback 2 for Sedan 3 for Suv 4 for mini van 5 for Crossover 6 for Van","4f391bef":"def Body(val):\n    dist = {\n        1:\"Hatchback\",\n        2:\"Sedan\",\n        3:'SUV',\n        4:'Mini Van',\n        5:'Cross Over',\n        6:'Van'\n    }\n    return dist[val]\n","eafa82c4":"df2['Body'] = df2['Body Type'].apply(Body)","1e3052bf":"df2.head()","40158a56":"df2.drop('Body Type',axis=1,inplace=True)","3a711e4b":"df2.head()","1713ca9a":"df2.isnull().sum()","bcec23ca":"corr = df2.corr()","c250210c":"corr.loc['Price']","2990f37e":"df2.drop('Color',axis=1,inplace=True)","154d7483":"df2.drop(['Features'],axis=1,inplace=True)","eeb37f5e":"df2.head()","c897934e":"new = pd.DataFrame(df2.dtypes,columns=['dtype'])","4730f526":"list(new[new['dtype']=='object'].index)","c8c4c9c3":"def OneHotEncoder(data):\n    values = pd.get_dummies(data)\n    return values.drop(list(data.value_counts().tail(1).index),axis=1)","504ac3ec":"df3 = df2.copy()","3cf41ef0":"for i in list(new[new['dtype']=='object'].index):\n    df3= pd.concat([df3,OneHotEncoder(df3[i])],axis=1)","f7a03501":"df3.head()","4abe5826":"df4 = df3.drop(list(new[new['dtype']=='object'].index),axis=1)","be9a7f74":"df4.head()","495554a2":"df4.isnull().sum()","2ac6074c":"X = df4.drop('Price',axis=1)\nY = df4.Price","3a341d83":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor","c594e5b0":"x_train,x_test,y_train,y_test = train_test_split(X,Y,random_state=1)","fd015f73":"model1 = RandomForestRegressor()\nmodel2 = LinearRegression()","d74f88f9":"model1.fit(x_train,y_train)\nmodel2.fit(x_train,y_train)","67a5391d":"model1.score(x_test,y_test)","30b53789":"model2.score(x_test,y_test)","7c8ba484":"# Linear Regression Model is not Good enough to go","bec8a528":"RFM = RandomForestRegressor(n_estimators=50)\nRFM.fit(x_train,y_train)","3105770b":"RFM.score(x_test,y_test)","5bb5fea2":"We have Achieved the 91.88 or 92% of Model Accuracy Score"}}