{"cell_type":{"87f305f0":"code","3523a507":"code","3495c63c":"code","f256fe63":"code","af623fcd":"code","9ed9ebe4":"code","b05326bc":"code","9ec83bfd":"code","35c4a7a9":"code","f36722ba":"code","c4cf9b7b":"code","089e0dc0":"code","825ac098":"code","9a8ff181":"code","662715c0":"code","d583828a":"code","d21fa2fa":"code","77f2c59f":"code","7d6f09b3":"code","253b01a1":"code","3d8b71d6":"code","a96f2f1c":"code","8cfc9e74":"markdown","2cacbe3d":"markdown","c2243af0":"markdown","0736ce94":"markdown","f59a9147":"markdown","db8e2aca":"markdown","9a930c95":"markdown","bbc0fdd7":"markdown","7b24d2fd":"markdown","660b7278":"markdown"},"source":{"87f305f0":"# importing the essential Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport tensorflow as tf\n\n# loading data\ndataFrame = pd.read_csv('\/kaggle\/input\/superconductor-dataset\/train.csv')\n\n#doing a sanity check\ndataFrame[0:10]","3523a507":"dataFrame.describe()","3495c63c":"plt.style.use('ggplot')\nplt.figure(figsize = (50, 50))\nsb.heatmap(dataFrame.corr(), annot= True)\nplt.show()","f256fe63":"correlations = dataFrame.corr()['critical_temp'].sort_values(ascending=False)\n#correlations_abs = correlations.abs()\nprint('\\n\u6b63\u306e\u76f8\u95a2TOP10\\n', correlations.head(11))","af623fcd":"correlations = dataFrame.corr()['critical_temp'].sort_values(ascending=True)\n#correlations_abs = correlations.abs()\nprint('\\n\u8ca0\u306e\u76f8\u95a2TOP10\\n', correlations.head(11))","9ed9ebe4":"# lets try to visualize range of tc, it's distribution and outliers\n# Tc\u306e\u7bc4\u56f2\u3001\u5206\u5e03\u3001\u5916\u308c\u5024\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u308b\nsb.displot(data = dataFrame, x = 'critical_temp')\nsb.displot(data = dataFrame, x = 'critical_temp', kind = 'kde')","b05326bc":"# plotting scatter plot for sample's Temperature\n# \u30b5\u30f3\u30d7\u30eb\u306e\u6e29\u5ea6\u306e\u6563\u5e03\u56f3\u3092\u63cf\u304f\nplt.style.use('ggplot')\nplt.figure(figsize = (10, 7))\nplt.scatter(dataFrame.index, dataFrame['critical_temp'], color = 'green')\n#plt.xlim(0,10)\n#plt.ylim(0,150)\nplt.title('Scatter Plot for Sample Temperature')\nplt.show()","9ec83bfd":"featuresNeeded = dataFrame.columns[: -1]\n\nfeatures = np.array (dataFrame[featuresNeeded])\ntargets =  np.array(dataFrame['critical_temp'])\n\n# let standardize our feature Vector First for PCA and futher usage\n# PCA\u3084\u305d\u306e\u4ed6\u306e\u7528\u9014\u306e\u305f\u3081\u306b\u3001\u307e\u305a\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u6a19\u6e96\u5316\u3057\u3088\u3046\nfrom sklearn.preprocessing import StandardScaler\nstdc = StandardScaler()\nfeatures = stdc.fit_transform(features)\n\nfrom sklearn.decomposition import PCA\npca = PCA(n_components = 2)\npca.fit(features)\ndimReducedFrame = pca.transform(features)","35c4a7a9":"# converting to dataFrame and Plotting\n# dataFrame\u306b\u5909\u63db\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3059\u308b\ndimReducedFrame = pd.DataFrame(dimReducedFrame)\ndimReducedFrame = dimReducedFrame.rename(columns = {0: 'V1', 1 : 'V2'})\ndimReducedFrame['critical_temp'] = targets\n\n# Plotting\nplt.figure(figsize = (10, 7))\nsb.scatterplot(data = dimReducedFrame, x = 'V1', y = 'V2', hue = 'critical_temp')\nplt.grid(True)\nplt.show()","f36722ba":"print('\u5404\u6b21\u5143\u306e\u5bc4\u4e0e\u7387: {0}'.format(pca.explained_variance_ratio_))\nprint('\u7d2f\u7a4d\u5bc4\u4e0e\u7387: {0}'.format(sum(pca.explained_variance_ratio_)))","c4cf9b7b":"plt.figure(figsize = (15, 5))\nplt.subplot(1, 2, 1)\nsb.regplot(data = dimReducedFrame, x = 'V1', y = 'critical_temp' , color = 'green')\nplt.title('Relation of Tc with 1st Principal Compnent')\n\nplt.subplot(1, 2, 2)\nsb.regplot(data = dimReducedFrame, x = 'V2', y = 'critical_temp' , color = 'green')\nplt.title('Relation of Tc with 2nd  Principal Compnent')\n\n\nplt.show()","089e0dc0":"# Running some Pandas Queries \n\nl0 = len (dataFrame[ (dataFrame['critical_temp'] >= 0) & \n                     (dataFrame['critical_temp'] <= 49)\n                   ]\n         )\n\nprint ('Number of samples with Tc in range 0 K- 49 K:   {}'.format(l0))\n\n\nl1 = len (dataFrame[ (dataFrame['critical_temp'] >= 50) & \n                     (dataFrame['critical_temp'] <= 100)\n                   ]\n         )\n\nprint ('Number of samples with Tc in range 50 K- 100 K:   {}'.format(l1))\n\n\nl2 = len (dataFrame[ (dataFrame['critical_temp'] >= 101) & \n                     (dataFrame['critical_temp'] <= 140)\n                   ]\n         )\n\nprint ('Number of samples with Tc in range 101 K- 140 K:   {}'.format(l2))\n\n\nl3 = len (dataFrame[ (dataFrame['critical_temp'] >= 140) & \n                     (dataFrame['critical_temp'] <= 150)\n                   ]\n         )\n\nprint ('Number of samples with Tc in range 141 K- 150 K:   {}'.format(l3))\n\nl4 = len (dataFrame[ (dataFrame['critical_temp'] >= 151)])\n\nprint ('Number of samples with Tc greater than 150K: {}'.format(l4))\n","825ac098":"# normalizing our targets\n# \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u6b63\u898f\u5316\nmaxTc = max(targets)\ntargets = targets\/1\n\n# splitting data into train and test frame\n# \u30c7\u30fc\u30bf\u3092train\u3068test\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u5206\u5272\u3059\u308b\nfrom sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(features, targets, test_size = 0.2, random_state = 42)\n","9a8ff181":"# writting Function to visualize our models performance\n# \u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u53ef\u8996\u5316\u3059\u308b\u95a2\u6570\nfrom sklearn.metrics import mean_squared_error as mse\ndef PerformanceCalculator(trueVals, predVals, name):\n    plt.plot([0,0.001,0.01,1], [0,0.001,0.01,1], color = 'blue')\n    plt.scatter(trueVals, predVals, color = 'green')\n    er = mse(trueVals, predVals)\n    er = pow(er, 0.5)\n    er = int(er * 10000) \/ 10000\n    plt.title('RMSE: ' + str(er) + ' for '+ name)\n    plt.show()\n    \n    ","662715c0":"# lets start our Analysis with linear regression\n# \u7dda\u5f62\u56de\u5e30\u3067\u5206\u6790\u3092\u59cb\u3081\u3088\u3046\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(xTrain, yTrain)\n\npredictions = lr.predict(xTest)\nPerformanceCalculator(yTest, predictions, 'Linear Regression')","d583828a":"# lets do one better by using a decission Tree\n# \u6c7a\u5b9a\u6728\u3092\u4f7f\u304a\u3046\nfrom sklearn.tree import DecisionTreeRegressor\nlr = DecisionTreeRegressor()\nlr.fit(xTrain, yTrain)\n\npredictions = lr.predict(xTest)\nPerformanceCalculator(yTest, predictions, 'Decission Tree Regressor')","d21fa2fa":"# Decission Tree looks an improvement over linear regression\n# observe alot more samples are now along y = x line which is a good sign\n# lets Try gradient Boosting Regressor\n# \u30c7\u30b7\u30b8\u30e7\u30f3\u30c4\u30ea\u30fc\u306f\u7dda\u5f62\u56de\u5e30\u3088\u308a\u3082\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\n# \u3088\u308a\u591a\u304f\u306e\u30b5\u30f3\u30d7\u30eb\u304c y = x \u306e\u7dda\u306b\u6cbf\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u826f\u3044\u5146\u5019\u3067\u3042\u308b\u3002\n# \u52fe\u914d\u30d6\u30fc\u30b9\u30c8\u30ec\u30ae\u30e5\u30ec\u30fc\u30bf\u3092\u8a66\u3059\nfrom sklearn.ensemble import GradientBoostingRegressor\nlr = GradientBoostingRegressor()\n\nlr.fit(xTrain, yTrain)\n\npredictions = lr.predict(xTest)\nPerformanceCalculator(yTest, predictions, 'Gradient Boosting Regressor')","77f2c59f":"# lets try Random Forest\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u8a66\u3057\u3066\u307f\u3088\u3046\nfrom sklearn.ensemble import RandomForestRegressor\n\nlr1 = RandomForestRegressor()\nlr1.fit(xTrain, yTrain)\n\npredictions = lr1.predict(xTest)\nPerformanceCalculator(yTest, predictions, 'Random Forest Regressor')","7d6f09b3":"ylab = yTest\npredVals = lr1.predict(xTest)\n\ndiff = abs(ylab - predVals)\nansFrame = {\n    'True Tc' :  ylab,\n    'Predicted Tc': predVals,\n    'Absolute error': diff\n}\n\nansFrame = pd.DataFrame(ansFrame)\nansFrame[0:20]","253b01a1":"# Let's try bagging classifier\n# \u30d0\u30ae\u30f3\u30b0\u5206\u985e\u6cd5\u3092\u8a66\u3057\u3066\u307f\u3088\u3046\nfrom sklearn.ensemble import BaggingRegressor\nlr = BaggingRegressor()\n\n#lr = RandomForestRegressor()\nlr.fit(xTrain, yTrain)\n\npredictions = lr.predict(xTest)\nPerformanceCalculator(yTest, predictions, 'Bagging Regressor')","3d8b71d6":"# lets try essembling\n# \u7d44\u307f\u7acb\u3066\u3066\u307f\u3088\u3046\npred1 = lr1.predict(xTest)\npred2 = lr.predict(xTest)\npredictions = (pred1 + pred2)\/ 2\n\nPerformanceCalculator(yTest, predictions, '(Random Forest + Bagging)')","a96f2f1c":"ylab = yTest\npredVals = lr1.predict(xTest)\n\ndiff = abs(ylab - predVals)\nansFrame = {\n    'True Tc' :  ylab,\n    'Predicted Tc': predVals,\n    'Absolute error': diff\n}\n\nansFrame = pd.DataFrame(ansFrame)\nansFrame[0:20]","8cfc9e74":"Thanks for Reading...","2cacbe3d":"# 2D visualization of dataset using Dimensionality Reduction\n# \u6b21\u5143\u524a\u6e1b\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e2\u6b21\u5143\u53ef\u8996\u5316","c2243af0":"# Introduction\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSEhIVFRUVFhUXFRUVFRUYFRUVFRUWFhUVFRUYHSggGBolHRUVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OFQ8PFysdFR0tLS0tLS0rKysrKy0rKystLS0tLS0tLS0tLSstLSstLSstKy0tLS0tLS0tLS0tLS0rLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAADBAECBQAGBwj\/xAA+EAACAQIDBAcFBQcFAQEAAAAAAQIDEQQhMUFRYXEFEoGRocHwBhOx0eEUFSKS8TJCQ1JTcqIWI4LC0jMH\/8QAGAEBAQEBAQAAAAAAAAAAAAAAAgEAAwT\/xAAfEQEBAQEBAAICAwAAAAAAAAAAARESAgMTMVEhQWH\/2gAMAwEAAhEDEQA\/APjaLxBovEYDwYeAtFh4MUE1TY3TYlTY1TY4B6kx2izPpMcpMcGtOjI0KEjLoMfoscc61KEjQoTMqhIfoyOkCtajMcpSMujMdpTFArQhIPCQlTmHjIQm1IupC0ZF1ImLo3WOcgXWIciY2rykDlIrKYKUhYmunIWqyLzkK1ZkqyA1piFeYxWmIVpBpQtWkZ9aQ1XkIVmc66QrXkIVmNVmI1WCnC1ZidVjFVilVgpwvUYvNhqjATBTgM2CYSbBSIQbIJZBFSi8QZeJmGiGgBgFixiYgxmmxSDGabLBp2kxykxCkxuixwK0KMh+jMzKQ9QHArToyH6MzLpSHKMhwK1aMx2lMy6T4jdKYhrTpzGITM+nMapXeib5C0TkZFlIWTYRSLo4N1iHIH1iHI2su5ApyIlIFORNZE5CtWRepIVqzIQNViVZh60xGtUYaUL1mIVpDNWoJVZgpwtWYjWHakhKrIFOFZq4lVY5UYlXBThaowE2FmwM2GnApsHIvJg5BKBsgllSKsi8WDRZMrDJhYMBELFlExBjFNi0BqmKDTNIdpIRhIPTYoNaVOfEbo1DMpMdpOw4FjTpSG6UzMoyHKTFBadKY5SqmXSkOUpDgVp06ojPpCpGblGTSTeWyy4BYzshCbzzOfyX8L8cegwXtH1n+NJPfnb6GzCtCa6ysm1rfI8HvHeja04SXVlbetljjp3xHq6zsrdXPW6t6Rzgmrpq2el9i2mLU6WrZ5rVpOy09fALDpuo0\/wxTtnqu3IXVHmNHqJu2j7AFSm9dm8WXT6y\/wBtNbeeuV0Mrpum1nB5W0t2CnyUb4JVZClWQ\/VxtGprGUW9qSXJtaGVimk2lLrLer\/BnSe5U5sArTEqsw1WoJ1Zo1WAVZClVh6khWow04WqyYpVYxVYnWkClAajFqgSpIXlIJwGrEVmNyYvVQaUpZg5BJsEwnFWQSyoVWsSiIsuoixloBYg4xCwV9hRo9JjdODFEuqHpVmKBf8ADUIMao03uYmqgzSYoNPUk1+6ximxWnN72NUqj3ijmbpyGqTE4y4IapSW1CSnqchmncSh1d7HKbyyYgpiMmBqZjVGm3fkDqUHdZanP3+XTxSryH8MrbOOXLMo6a0sMU8r8jnhWuq2SWubvbc95brKT42ts2hYxXV\/EtnEX6ivKz5Lb2FAadNWyKdVJZethMLpW435FakMiopGF9V3bNwtj8pW7x7CxyfP15GdipJyfd3ZD8paTqzFKjD1mLVZiWAzFKsg1SdxOsw0gqjFqoSpIWlMFKA1RWY1KQvUiE4EwFUO07AKu4iwpMGwk1YG0F0irIJsd1SYrglOVgKLRLGw6qitoT7zcgFNhlEQYLTkMQjfTuFo5DNKRYNEghuhOwJWavtJhJFGn4NbxijUsIwYxSY4DQhK4zTE6KG4xewQ03TsNRjuE6XIfpp2zyKJ7o9ZSfIdoSyz8RTAr8DW2+nZk+Q0o2Ofr8rBJ4bJNcyVTa7cvAaguJyp556BWl5v8Oejy5cBRytZ6PXv9MbxKa7dgFpO18ipFYxVr6LL0yZO\/rI6bsrLT4FU7Z633+fYZhaLSi77b+BgVaj7zYxsurTfJeL39rMGch+RBrSE6khiohSsUoWq1BaTCzAyTDTCnK4tVYeaAthqwrJFQlQHJkNFSotBOa2lqzYFBJ1XMWaCzkAkyFHMqzrkqRCcoloolQLxhvMmugGplYtBIlC0SEQsURIJFCEalkXggdNBUtxRpimO0YITo0m2aFKmlxEJrD0Xb5jEY7iMLJtDdGlmWVFqEWmadF3WeoCEEHjyKmLSg4tNZPYzQwmIjJWeUuOj5AYRbViqw5kxrUbrYNVIXvsM\/C4vqWUl1ktu36j0OkKbX7y7EHEpapT3gKlKy3XT+Y9UxlLR3e7IWniKUrXk+VmbE0lKm1awRQTfPLhxYeWLpLV2vwYBY6gnfreDfkbG0j05UySW1\/BfUx3wHuka6nO8b9VZK+3PUUlJbPEcUrOVgFaCYepLgL1iFCUkBqIdcbX4ieIhuJVKTzAVkMxiyKlK619cAlCDyA1t4XEIVcthCgU2VehaSsCqS2EIKpEBKIxIo4hw5SzOCyRTqEwtMda2hMc9QkqFmFp0r7CueqRpho07BadHgO0sJfZoUdK0qdxiOHSWY2sOlqd7rcUbSvU2JDFGiMU8LtGoUrLMqaFRp20GoQz0D4bDuSuotra0m14Gph+hK8l1o0Kr3fglZ8nYo6Tw8B6lFLNsYo+z+Kl\/An2qy8R3D+zGKa\/+Vv7pRXmVNhSkopby7rxRq4b2TxL1jCPOa7\/w3GF7H1nq6S\/5S\/8AJU1kU662DKxDtx3mpT9j6u2dNdsn\/wBQv+k6uiqQtv8AxX7reZtiayPfX1tzSBzk9xvQ9k53zqxtwi34XCR9lpf1Y\/kfzNsbXm1UdsxSpWvyPVVvY9tq1ZW2\/gd+64JexT\/rq39j\/wDRdia87CSazYjiINPXI9dP2JnsrR7Yv5g6nsZVat72n\/l36G2M8a5FG1vPWVPYSvbKtTb3NSS77eQvP2HxC0lSf\/KSfc4m1tjzdaPMVmm2ev8A9G4q38N8Ou8u9WAf6RxSz92nynDv1Mux5edIXqx3LU9VW9lsWv4L7JQf\/YzqvQGJhG8qFRcVFv4EXqPNOL8BOcJJnoqvRdZWvRqLPJuEs+WRnYiKzi1a3eTF1j1L3FKsFfQ2JUgVTDXzWpMKVkqnfK\/IWlSa2GrLDbSK2H2raTC6Y8oFGh+dHgUdMmHpRWepKoxe8NKkQoGbTlKjfUaoYdtqMU23kkldt7rI+q4D2OwdKz925vfUfW\/xVl4HoMPTjFKMIqMd0Ukl2IU8OF+X9R8r6L9kcVOz9w0t82o+Dd\/A9Pg\/YWq7dedOK1y60nytZLxPZqXrzDxqWFzHP7PTzFL2Cpfv1Zv+2MY+LuO4X2Mwcf2oSn\/fN5dkLG7734F41C4N9X9s+l7NYRJWw8Hbem++7zNKjg6cLONOEWtHGEU0t10iVMs5dpR0WLLOfMUlV7H8fqCnNv5eaIx6VW21EPEL1n8DPc2t9gcpfR38DFjQ+3L5\/oRPpC2zzyMybBSqELGrU6S7uRT70trYx1PeDnMi416nS0vVrA5dLy3+T+RiTkDVXvK3Le++Hz+BH3xJ7fAwnUKRqWZG5ehfTD3pdhD6ae74\/MwpVuJEau3abW5j0P3vnnp4\/Iv98cPI846zCxru2RdS+Xo4dKJ7PALHHLVo83Gq9\/PPVhoTfZ8e8o2PQrFp+si8ayef6GDCb235X9WDwqvZ46d3mZMasZbblK1GM1aSjLg0nfncTjLi3y0D06naUf4J1uhsNLKWHpPf\/tx2ckZ1X2SwTafuUrfyynFdyeZ6CYJrPYZNs\/t5LE+wWFecZVYcFKMlzzi34mdiP\/z3K0K9+E4W8U\/I92yjZshT36\/b5VjvYPFxV1GE+EJ590kr9hhYroOvTv7yjOPFxdu\/Q+4sG3mHmOk+Wvz66JZYU+24\/ofD13epRhJ6da1pfmjmY9X2Kwsnde8gt0ZJr\/JN+JuXT7Xo4vu4l1l+nzAQkr8WtCYz3arYVyw1BZF1bJPvF3U2LtSzJ9672vfsMmG4vc\/qXUtwk527dgRVFbzva3Mo2H4TW3IlysIqd1rnw\/QvCrtyXD0ipyNObBt8beZbrp6oiUFx9cyNArteviikmg8o7mCcFfO3riiHKFNAZQ4DigtLrtYRUF\/MiFrKlF225C8kz0EcLEh4GL2GxO48zUTb0YNxZ6j7FDcS8HD+UuJ9keXSJ6vA9P8AY4bIon7JDcTlfsjy04lcz1LwcNyBvo+Gtl2G5b7I844tbC0b21+Zvz6PhtRH2GFthsbuMmnFB1xfmNywS\/mXLIpLCSWjXeXE6CvyXDdzCRhtz+YSnhpLW3N28w0cPxXZ9WUL\/KlOO+73a5jtFLSxWKSVsy6yz2G1sqWBlK\/AmpN\/LUDLbftM2LdZaFWQ5b8iIyRlxEnuBzkFl6\/QE422mXFGictvmEpxSJ6tyauPPxxV7XS7JJDMKz26czxlPFXbbzS0W9jX3hlm+zRHPXo4exVbjlvLQmnpot31PJUOlWlrb+3LLixql0zZ36ysubf1L0P116aE7t\/N+YSnLPhs\/RnnvvWL0avrdpX5XvkOU+mIKOfdG1\/iXRvitdVE75pPl8blqcm1klbn9DIXSVPqptys+Lv8Q0ek4O3V8bl1Oa0vf9XK9+S+QXr3M+OIe29u\/wBdxaFaLzz5Zp\/U2jhlvWz9dgOdTt9bwFTGLfbg7ZgI4hb3yvfyJpSGauIeywpKq9rsCnNXyfgBqT4\/MhyLyrtbXcBOu977ys5bcxeUwnIZeKntlLvZeGOqL9+WeubM\/rndc2rzD0ekKl\/25fmZf7wqr+JL8zM5TO94bU5n6P8A26f9SX5mR9vqf1J\/mYip3ONrcw\/9ob1bfFsPSxFtpnRuGXFlSxq08Vd6vyY3SrX087+JjU6i+thmFXlzzLKFjWjU4vt+qLvEO2eXh3Gaq7eq7bfJl1X2ZLmn5i1zvk\/SrX25d5d1M\/SQn763HkvNFViHnkr7svFouphyU93f8inXz+PpCTrPVpR5vL4FZY2Cy8U8u82rydk87537yvX4eT7hCpj9zXD1mAnjnpt9bdpNblp+8u3s7ikqm137zJ+1ZtZZrdZgauKfrdwNq8tiWJj2+t5McYY8q99Hou\/sLwrZfDkVHgo1bJXet8uZSdV5erWOOOFr24meLeS3BFi0tDjiauJWKk9WFhitzOONrYNDpSSy7wi6Re15\/DkScXUwzR6alpe\/F5\/ENHpTi0+D8iThDfMSul7bW297y7i8ul21qr8kccZuY6jj3L9p5cSJY93yaSOOM2RSeP7eZV42PI44hSKPGRbI+1q+pxxFwR4hbyFXVtTjipiI4k547fc44i5BqeOinqEn0mll+jOOEHMTDpC91kuRE8e47briccZMjp9Kfh\/C7cFcGulb2TuzjjLzBX0pJO3Wy3MvQ6RvdXOOLBvmYXj0h+JqT1yDQrKScb+kccWB6BjXs+q\/05EPEvVv9n4HHFQb7Ur9ZPRELEx6yXHLk0ccUbFuq1K8XldLv2DMLW1SOOKNj\/\/Z)\n\nA superconductor is a substance that conducts electricity without resistance when it becomes colder than a \"critical temperature. The intention of this Notebook is do an Expolatory Data Analysis on the given data and:\n* Find the factors the affects Tc.\n* Visualizing the given data in 2D in space using PCA.\n* Develope and compare Various models for predicting Tc.\n\n\u3053\u306e\u30ce\u30fc\u30c8\u306e\u610f\u56f3\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6307\u6570\u95a2\u6570\u7684\u306a\u30c7\u30fc\u30bf\u89e3\u6790\u3092\u884c\u3044\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002\n\n* Tc\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8981\u56e0\u3092\u898b\u3064\u3051\u308b\u3002\n* PCA\u3092\u4f7f\u3063\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u30922D\u306e\u7a7a\u9593\u306b\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3002\n* Tc\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306e\u69d8\u3005\u306a\u30e2\u30c7\u30eb\u3092\u958b\u767a\u3057\u3001\u6bd4\u8f03\u3059\u308b\u3002","0736ce94":"Inference: This looks like Sample with higher Tc values tends to have low values for V1 (first principal component) and V2 (second principal component) with exceptions. Let's check this infernce with regplots.\n\n\u63a8\u8ad6\n\n\u3053\u308c\u306f\u3001Tc\u5024\u304c\u9ad8\u3044Sample\u306f\u3001V1\uff08\u7b2c\u4e00\u4e3b\u6210\u5206\uff09\u3068V2\uff08\u7b2c\u4e8c\u4e3b\u6210\u5206\uff09\u306e\u5024\u304c\u4f4e\u3044\u50be\u5411\u306b\u3042\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u4f8b\u5916\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u7d50\u679c\u3092regplot\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","f59a9147":"# Inference from distributions\nFrom the above distribution Plot we can infer:\n* A majority of the samples in our data set has very low Tc (14855 samples to be precise).\n* 5611 samples have Tc between 50K - 100K .\n* 760 samples have Tc between 101K - 140 K.\n* 2 samples have Tc between 141K - 150K.\n* only 1 sample has Tc greater than 150K.\n# \u5206\u5e03\u304b\u3089\u306e\u63a8\u8ad6\n\u4e0a\u8a18\u306e\u5206\u5e03\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\n* \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5927\u90e8\u5206\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3001\u975e\u5e38\u306b\u4f4e\u3044Tc\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff08\u6b63\u78ba\u306b\u306f14855\u30b5\u30f3\u30d7\u30eb\uff09\u3002\n* 5611 \u500b\u306e\u30b5\u30f3\u30d7\u30eb\u306e Tc \u306f 50K \uff5e 100K \u3067\u3042\u308b\u3002\n* 5611\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u306eTc\u306f50K\uff5e100K\u3067\u3001760\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u306eTc\u306f101K\uff5e140K\u3067\u3042\u308b\u3002\n* 141K\uff5e150K\u306eTc\u3092\u6301\u3064\u30b5\u30f3\u30d7\u30eb\u306f2\u3064\u3002\n* Tc\u304c150K\u4ee5\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u306f1\u3064\u3060\u3051\u3067\u3059\u3002","db8e2aca":"# Developing Models & Usual sklearn stuff..","9a930c95":"# Inference from Correlation Plot\nFrom the above heatmap we can see Tc has **High Positive Correlation**  with the following features:\n* Number of Elements           (0.60)\n* Entropy_atomic_mass          (0.54)\n* wtd_entropy_atomic mass      (0.63)\n* range_atomic_mass            (0.49)\n* entropy_fie                  (0.57)\n* range_fie                    (0.6)\n* std_fie                      (0.54)\n* wtd_std_fie                  (0.58)\n* entropy_atomic_radius        (0.56)\n* wtd_entropy_atomic_radius    (0.6)\n* range_atomic_radius          (0.65)\n* std_atomic_radius            (0.56)\n* wtd_std_atomic_radius        (0.60)\n* entropy_fusion_heat          (0.55)\n* wtd_entropy_fusion_heat      (0.56)\n* range_thermal_conductivity   (0.69)\n* std_thermal_conductivity     (0.65)\n* wtd_std_thermal_conductivty  (0.72)\n* entropy_valence              (0.56)\n* wtd_entropy_valence          (0.6)\n\nAnd with Following features Tc has **Strong negative Correlation** :\n* gmean_density     (-0.54)\n* wtd_gmean_density (-0.54)\n* mean_valence      (-0.60)\n* wtd_mean_valence  (-0.63)\n* gmean_valence     (-0.57)\n* wtd_gmean_valence (-0.62)\n\n\nCommentary: This dataset is highly correlated we might not be having any major problems developing a model for this data!","bbc0fdd7":"# True values, Predicted values, errors for Random Forest\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u771f\u5024\u3001\u4e88\u6e2c\u5024\u3001\u8aa4\u5dee","7b24d2fd":"\u76f8\u95a2\u56f3\u304b\u3089\u306e\u63a8\u8ad6\n\u4e0a\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304b\u3089\u3001Tc\u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3068\u9ad8\u3044\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u5143\u7d20\u6570 (0.60)\n\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u539f\u5b50\u8cea\u91cf (0.54)\nwtd_\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u539f\u5b50\u8cea\u91cf (0.63)\nrange_atomic_mass (0.49)\nentropy_fie (0.57)\nrange_fie (0.6)\nstd_fie (0.54)\nwtd_std_fie (0.58)\nentropy_atomic_radius (0.56)\nwtd_entropy_atomic_radius (0.6)\n\u30ec\u30f3\u30b8\u30fb\u30a2\u30c8\u30df\u30c3\u30af\u30fb\u30e9\u30b8\u30aa\u30b0\u30e9\u30d5\u30a3\u30af\u30b9 (0.65)\nstd_atomic_radius (0.56)\nwtd_std_atomic_radius (0.60)\n\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u878d\u5408\u71b1 (0.55)\nwtd_entropy_fusion_heat (0.56)\n\u71b1\u4f1d\u5c0e\u7387\u306e\u7bc4\u56f2 (0.69)\n\u6a19\u6e96\u71b1\u4f1d\u5c0e\u7387 (0.65)\nWTD_STD_\u71b1\u4f1d\u5c0e\u5ea6 (0.72)\n\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u30fb\u30d0\u30ea\u30e5\u30a8\u30fc\u30b7\u30e7\u30f3 (0.56)\nWTD_\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u30fb\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 (0.6)\n\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3068Tc\u306f\u5f37\u3044\u8ca0\u306e\u76f8\u95a2\u304c\u3042\u308a\u307e\u3059\u3002\n\ngmean_density (-0.54)\nwtd_gmean_density (-0.54)\n\u5e73\u5747\u5024 (-0.60)\nwtd_\u5e73\u5747\u5024 (-0.63)\ngmean_valence (-0.57)\nwtd_gmean_valence (-0.62)\n\u89e3\u8aac \u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u76f8\u95a2\u6027\u304c\u9ad8\u3044\u306e\u3067\u3001\u3053\u306e\u30c7\u30fc\u30bf\u306e\u30e2\u30c7\u30eb\u958b\u767a\u306b\u5927\u304d\u306a\u554f\u984c\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","660b7278":"\u5168\u3066\u306e\u6a5f\u80fd\u304c\u6570\u5024\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u69d8\u3005\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3068Tc\u306e\u76f8\u95a2\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002"}}