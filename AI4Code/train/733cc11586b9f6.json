{"cell_type":{"822aca45":"code","020f7da9":"code","487a8e18":"code","83b936eb":"code","6ed1175f":"code","b1c0d076":"code","e555210b":"code","0d628c45":"code","fa2303b8":"code","10e0373e":"code","9229d3f9":"code","9f9d518d":"code","82b387fa":"code","e2e78599":"code","636ddb92":"code","40a04eb2":"code","215dee14":"code","43ad355e":"code","aa0110f8":"code","7de035ca":"code","bee63c3c":"code","18d1d83c":"markdown","08e35854":"markdown","21a4ea0d":"markdown","13459df4":"markdown","9accc036":"markdown","25541bad":"markdown","9219b4eb":"markdown","049904c0":"markdown","8e5b1c57":"markdown","763c903e":"markdown","61ac6627":"markdown"},"source":{"822aca45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","020f7da9":"import sklearn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.ticker import StrMethodFormatter\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\n","487a8e18":"df_=pd.read_csv(\"..\/input\/sleep-pattern\/Sleep_Analysis.csv\")\ndf_.head()","83b936eb":"df_.info()","6ed1175f":"df_.isnull().sum()\n","b1c0d076":"pd.set_option('precision',3)\ndf_.describe()","e555210b":"df_.shape","0d628c45":"df = df_.drop([\"meals\/day\",\"sleep direction\",\"beverage\"],axis=1)\ndf.head()","fa2303b8":"\ncorr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nf, ax  = plt.subplots(figsize=(11,9))\ncmap = sns.diverging_palette(230,20, as_cmap= True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=3, center=0, square=True, linewidth =5, cbar_kws={\"shrink\":.5})","10e0373e":"print(df['sleep time'].value_counts())\n#df['sleep time'].value_counts().plot.pie();\ndf.hist(bins=50,figsize=[10,7])\nprint('Total time : ', df['sleep time'].sum())","9229d3f9":"sleep_time = pd.crosstab(index = df['sleep time'], columns = df['physical illness'])\nprint(sleep_time)\ncorr = sleep_time.corr()\ncorr.style.background_gradient(cmap='Blues')","9f9d518d":"sleep_time = pd.crosstab(index = df['sleep time'], columns = df['Age'])\nprint(sleep_time)\ncorr = sleep_time.corr()\ncorr.style.background_gradient(cmap='Blues')","82b387fa":"scrn_time = pd.crosstab(index = df['sleep time'], columns = df['screen time'])\nprint(scrn_time)\nscrn_time.plot.bar();\nplt.gca().xaxis.set_major_formatter(StrMethodFormatter('{x:,.2f}'))","e2e78599":"# Replacing YES\/NO to 0\/1 in data\ndf.replace(('yes','no','sometimes'),(1,0,1), inplace=True)\ndf.head()","636ddb92":"#smoke\/drink vs all\nX_2d1= df[['Age','physical illness','exercise','bluelight filter']]\ny_2d1 = df['smoke\/drink' ]\ny_smoke = y_2d1 ==1\nX_train, X_test, y_train, y_test= (train_test_split(X_2d1.to_numpy(),\n                                                   y_smoke.to_numpy(),\n                                                   random_state=85))","40a04eb2":"y_smoke.values","215dee14":"\nclf_sm = LogisticRegression(C=600)#Regularization parameter for more accuracy\nc=clf_sm.fit(X_train, y_train)\nprint('Accuracy of Logistic regression classifier on training set: {:.2f}'\n     .format(c.score(X_train, y_train)))\nprint('Accuracy of Logistic regression classifier on test set: {:.2f}'\n     .format(c.score(X_test, y_test)))\nlog_sc=\"{:.1f}\".format(c.score(X_test, y_test))","43ad355e":"\n\n# Prediction using test data\nthis_C=1.5\nclf1 = SVC(kernel = 'linear', C=this_C).fit(X_train, y_train)\nprint('Accuracy of Support Vector Machine classifier on training set: {:.2f}'\n     .format(clf1.score(X_train, y_train)))\nprint('Accuracy of Support Vector Machine classifier on test set: {:.2f}'\n     .format(clf1.score(X_test, y_test)))\nsvm_sc=\"{:.2f}\".format(clf1.score(X_test, y_test))\n","aa0110f8":"\nclf2 = KNeighborsClassifier(n_neighbors=3)\nX = X_2d1.values\ny = y_smoke.values\ncv_scores= cross_val_score(clf2, X, y)\n#clf: model want to evaluate, the dataset , the corresponding ground truth target labels or values\n\nprint('Cross-validation scores (3-fold):', cv_scores)\nprint('Mean Cross-validation scores (3-fold): {:.3f}'.format((np.mean(cv_scores))))\nkn_sc=\"{:.2f}\".format((np.mean(cv_scores)))","7de035ca":"\nX_train, X_test,y_train, y_test = train_test_split(X_2d1.values, y_2d1,random_state=2)\nclf3 = DecisionTreeClassifier(max_depth=3).fit(X_train, y_train)\n\n\nprint('Accuracy of decision tress classifier on training set: {:.2f}'\n     .format(clf3.score(X_train, y_train)))\nprint('Accuracy of decision tress classifier on test set: {:.2f}'\n     .format( clf3.score(X_test, y_test)))\ndec_sc =\"{:.2f}\".format(clf3.score(X_test, y_test))","bee63c3c":"models = pd.DataFrame({\n    'Model': ['Logistic Regression','Support Vector Machines','K - Nearest Neighbors', 'Decision Tree' ],\n    'Score': [log_sc, svm_sc, kn_sc, dec_sc]})\n\nmodels.sort_values(by='Score', ascending=False)","18d1d83c":"***logistic regressions which is used for classification use binary variable instead of a continuous value as target value. Hence, creating 1 vs all***","08e35854":"**KNeighborsClassifier**","21a4ea0d":"# **Spliting data into Test and Training Data**","13459df4":"****","9accc036":"**DecisionTreeClassifier**","25541bad":"**logistic regressions**","9219b4eb":"# *:)*","049904c0":"****","8e5b1c57":"**Support Vector Machine**","763c903e":"****","61ac6627":"# **Data Visualization**"}}