{"cell_type":{"7500380f":"code","c958b3d0":"code","0885fa3d":"code","c21c2084":"code","a57c6bc9":"code","fcebaae8":"code","7bd6cc8b":"code","252eb000":"code","c814f643":"code","e45c2c67":"markdown","62817ff5":"markdown","59be7f43":"markdown","9e15941e":"markdown","5a285bda":"markdown","b6663ca9":"markdown","d549ecd5":"markdown","17282abe":"markdown"},"source":{"7500380f":"# General libraries\nimport os\nimport numpy as np\nimport pandas as pd \nimport random\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Deep learning libraries\nimport keras.backend as K\nfrom keras.models import Model, Sequential\nfrom keras.layers import Input, Dense, Flatten, Dropout, BatchNormalization\nfrom keras.layers import Conv2D, SeparableConv2D, MaxPool2D, LeakyReLU, Activation\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\nimport tensorflow as tf\n\n# Setting seeds for reproducibility\nseed = 232\nnp.random.seed(seed)\ntf.set_random_seed(seed)","c958b3d0":"# input_path = '..\/input\/chest_xray\/chest_xray\/'\ninput_path = '..\/input\/chest-xray-pneumonia\/\/chest_xray\/chest_xray\/'\n\nfig, ax = plt.subplots(2, 3, figsize=(15, 7))\nax = ax.ravel()\nplt.tight_layout()\n\nfor i, _set in enumerate(['train', 'val', 'test']):\n    set_path = input_path+_set\n    ax[i].imshow(plt.imread(set_path+'\/NORMAL\/'+os.listdir(set_path+'\/NORMAL')[0]), cmap='gray')\n    ax[i].set_title('Set: {}, Condition: Normal'.format(_set))\n    ax[i+3].imshow(plt.imread(set_path+'\/PNEUMONIA\/'+os.listdir(set_path+'\/PNEUMONIA')[0]), cmap='gray')\n    ax[i+3].set_title('Set: {}, Condition: Pneumonia'.format(_set))","0885fa3d":"# Distribution of our datasets\nfor _set in ['train', 'val', 'test']:\n    n_normal = len(os.listdir(input_path + _set + '\/NORMAL'))\n    n_infect = len(os.listdir(input_path + _set + '\/PNEUMONIA'))\n    print('Set: {}, normal images: {}, pneumonia images: {}'.format(_set, n_normal, n_infect))","c21c2084":"# input_path = '..\/input\/chest_xray\/chest_xray\/'\ninput_path = '..\/input\/chest-xray-pneumonia\/\/chest_xray\/chest_xray\/'\n\ndef process_data(img_dims, batch_size):\n    # Data generation objects\n    train_datagen = ImageDataGenerator(rescale=1.\/255, zoom_range=0.3, vertical_flip=True)\n    test_val_datagen = ImageDataGenerator(rescale=1.\/255)\n    \n    # This is fed to the network in the specified batch sizes and image dimensions\n    train_gen = train_datagen.flow_from_directory(\n    directory=input_path+'train', \n    target_size=(img_dims, img_dims), \n    batch_size=batch_size, \n    class_mode='binary', \n    shuffle=True)\n\n    test_gen = test_val_datagen.flow_from_directory(\n    directory=input_path+'test', \n    target_size=(img_dims, img_dims), \n    batch_size=batch_size, \n    class_mode='binary', \n    shuffle=True)\n    \n    # I will be making predictions off of the test set in one batch size\n    # This is useful to be able to get the confusion matrix\n    test_data = []\n    test_labels = []\n\n    for cond in ['\/NORMAL\/', '\/PNEUMONIA\/']:\n        for img in (os.listdir(input_path + 'test' + cond)):\n            img = plt.imread(input_path+'test'+cond+img)\n            img = cv2.resize(img, (img_dims, img_dims))\n            img = np.dstack([img, img, img])\n            img = img.astype('float32') \/ 255\n            if cond=='\/NORMAL\/':\n                label = 0\n            elif cond=='\/PNEUMONIA\/':\n                label = 1\n            test_data.append(img)\n            test_labels.append(label)\n        \n    test_data = np.array(test_data)\n    test_labels = np.array(test_labels)\n    \n    return train_gen, test_gen, test_data, test_labels","a57c6bc9":"# Hyperparameters\nimg_dims = 150\nepochs = 10\nbatch_size = 32\n\n# Getting the data\ntrain_gen, test_gen, test_data, test_labels = process_data(img_dims, batch_size)","fcebaae8":"# Input layer\ninputs = Input(shape=(img_dims, img_dims, 3))\n\n# First conv block\nx = Conv2D(filters=16, kernel_size=(3, 3), activation='relu', padding='same')(inputs)\nx = Conv2D(filters=16, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\n\n# Second conv block\nx = SeparableConv2D(filters=32, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=32, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\n\n# Third conv block\nx = SeparableConv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=64, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\n\n# Fourth conv block\nx = SeparableConv2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\nx = Dropout(rate=0.2)(x)\n\n# Fifth conv block\nx = SeparableConv2D(filters=256, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = SeparableConv2D(filters=256, kernel_size=(3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPool2D(pool_size=(2, 2))(x)\nx = Dropout(rate=0.2)(x)\n\n# FC layer\nx = Flatten()(x)\nx = Dense(units=512, activation='relu')(x)\nx = Dropout(rate=0.7)(x)\nx = Dense(units=128, activation='relu')(x)\nx = Dropout(rate=0.5)(x)\nx = Dense(units=64, activation='relu')(x)\nx = Dropout(rate=0.3)(x)\n\n# Output layer\noutput = Dense(units=1, activation='sigmoid')(x)\n\n# Creating model and compiling\nmodel = Model(inputs=inputs, outputs=output)\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Callbacks\ncheckpoint = ModelCheckpoint(filepath='best_weights.hdf5', save_best_only=True, save_weights_only=True)\nlr_reduce = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=2, verbose=2, mode='max')\nearly_stop = EarlyStopping(monitor='val_loss', min_delta=0.1, patience=1, mode='min')","7bd6cc8b":"# Fitting the model\nhist = model.fit_generator(\n           train_gen, steps_per_epoch=train_gen.samples \/\/ batch_size, \n           epochs=epochs, validation_data=test_gen, \n           validation_steps=test_gen.samples \/\/ batch_size, callbacks=[checkpoint, lr_reduce])","252eb000":"fig, ax = plt.subplots(1, 2, figsize=(10, 3))\nax = ax.ravel()\n\nfor i, met in enumerate(['acc', 'loss']):\n    ax[i].plot(hist.history[met])\n    ax[i].plot(hist.history['val_' + met])\n    ax[i].set_title('Model {}'.format(met))\n    ax[i].set_xlabel('epochs')\n    ax[i].set_ylabel(met)\n    ax[i].legend(['train', 'val'])","c814f643":"from sklearn.metrics import accuracy_score, confusion_matrix\n\npreds = model.predict(test_data)\n\nacc = accuracy_score(test_labels, np.round(preds))*100\ncm = confusion_matrix(test_labels, np.round(preds))\ntn, fp, fn, tp = cm.ravel()\n\nprint('CONFUSION MATRIX ------------------')\nprint(cm)\n\nprint('\\nTEST METRICS ----------------------')\nprecision = tp\/(tp+fp)*100\nrecall = tp\/(tp+fn)*100\nprint('Accuracy: {}%'.format(acc))\nprint('Precision: {}%'.format(precision))\nprint('Recall: {}%'.format(recall))\nprint('F1-score: {}'.format(2*precision*recall\/(precision+recall)))\n\nprint('\\nTRAIN METRIC ----------------------')\nprint('Train acc: {}'.format(np.round((hist.history['acc'][-1])*100, 2)))","e45c2c67":"# Preparing the data for the model\n\nUsing Keras' `ImageDataGenerator()` and `.flow_from_directory()` we can feed the data in batches directly from the directory since it is already organized by class while also feeding augmented copies of the data. This ensures we do not run out of memory while training the model.","62817ff5":"There is too little validation data for it to provide any reliable insight, for this reason I will be using the test set for validation.","59be7f43":"# Results\n\nIt is good practice to visualize train vs. validation accuracy and loss. This gives you insight on what an adequate number of epochs is while also helping you determine if you are overfitting to the training set.","9e15941e":"Lets first look at some of our X-ray images and how each dataset is distributed:","5a285bda":"The fifth convolutional block was a bit overkill but it produced better results more consistently than with only 4 blocks. ","b6663ca9":"Finally, analyze the metrics of your model so you can decide which metric you would like to optimize for. Recall is a good measure of fit in this case since you would like to catch as many positive cases as posible to prevent spreading the disease (although only certain types of pneumonia are contagious).","d549ecd5":"# The Model\n\nI would like to acknowledge that this Kaggle kernel: https:\/\/www.kaggle.com\/aakashnain\/beating-everything-with-depthwise-convolution motivated me to learn about separable depthwise convolution and implement it in my model. My results were instantly better when swapping out the convolutional blocks with these types of layers.","17282abe":"# Load weights (if any)\nmodel.load_weights('..\/input\/pneumonia-weights\/best_weights.hdf5')"}}