{"cell_type":{"bc64bb81":"code","b7b9c6e1":"code","43ccc38a":"code","48626d4e":"code","d6beda2a":"code","efd687b1":"code","0edb6bd6":"code","bb540bc1":"code","3e70d5dd":"code","c76b3817":"code","3c1c096c":"code","2fda444e":"code","3edaaa54":"markdown","f4f37ea7":"markdown","f9394167":"markdown","7e5e9c03":"markdown","c9457a95":"markdown","7b207f95":"markdown"},"source":{"bc64bb81":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport cv2\nimport keras\nfrom skimage.transform import resize\nfrom keras.layers import *\nfrom keras.models import *\nfrom keras.optimizers import *","b7b9c6e1":"train_data = pd.read_csv('..\/input\/train.csv')","43ccc38a":"unique_images = train_data.ImageId.unique()","48626d4e":"def get_masks(image_id, resized_shape=(128, 128)):\n  masks = dict()\n  temp = train_data[train_data.ImageId == image_id]\n  for i in range(temp.shape[0]):\n    width = temp.iloc[i].Width\n    height = temp.iloc[i].Height\n    class_id = temp.iloc[i].ClassId.split()[0]\n    mask_encoded = temp.iloc[i].EncodedPixels.split()\n    mask = [0] * (width*height)\n    for j in range(0, len(mask_encoded), 2):\n      mask[int(mask_encoded[j]): int(mask_encoded[j])+int(mask_encoded[j+1])] = [1]*int(mask_encoded[j+1])\n    mask = np.fliplr(np.flip(np.rot90(np.array(mask).reshape((width, height)))))\n    mask = resize(mask, resized_shape, anti_aliasing=True)\n    masks[int(class_id)] = mask\n  masks_classes = []\n  for i in range(46):\n    if i in masks:\n      masks_classes.append(masks[i])\n    else:\n      masks_classes.append(np.zeros(resized_shape))\n  masks_classes = np.array(masks_classes)\n  return masks_classes","d6beda2a":"train_data[train_data.ImageId == unique_images[1]]","efd687b1":"masks = get_masks(unique_images[1], (2448, 2448))","0edb6bd6":"plt.imshow(masks[33])","bb540bc1":"masks = get_masks(unique_images[1], (128, 128))","3e70d5dd":"plt.imshow(masks[33])","c76b3817":"model_resize = Sequential()\nmodel_resize.add(MaxPool2D((2, 2), data_format='channels_first', input_shape=(46, 1024, 1024)))\nmodel_resize.add(MaxPool2D((2, 2), data_format='channels_first'))\nmodel_resize.add(MaxPool2D((2, 2), data_format='channels_first'))","3c1c096c":"masks = get_masks(unique_images[1], (1024, 1024))\nmasks = model_resize.predict(np.array([masks]))[0]","2fda444e":"plt.imshow(masks[33])","3edaaa54":"The following function get the mask for each of the 46 category","f4f37ea7":"Using Maxpooling for resizing not to lose the edges that are very thin","f9394167":"resizing to 1024 using usual resizing then to 128 using maxpooling","7e5e9c03":"resizing to the size we need for the model","c9457a95":"resizing to the same size","7b207f95":"Get the unique image ids"}}