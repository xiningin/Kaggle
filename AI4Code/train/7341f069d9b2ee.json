{"cell_type":{"843bfe86":"code","2a0d5418":"code","f3605a6c":"code","10782499":"code","30bc46f7":"code","eb66bda0":"code","40bab8e2":"code","0b4c5ae8":"code","c8ec6aa4":"code","551c29f2":"code","3de3b02c":"code","8edd2e21":"code","04464715":"code","7a613ed5":"code","b27f96c7":"code","d85ce978":"code","6599a434":"code","26b76270":"code","1dcd3810":"code","79129773":"code","4fbc6aca":"code","d3d2d948":"code","fb89dd3b":"code","3b6659d1":"code","035ff48e":"code","acb620b9":"code","ed20412d":"code","339ae38f":"code","aa17658b":"code","49cd0c37":"code","15893878":"code","4ef9b30a":"code","20c5667d":"code","bd688158":"code","48a62b34":"code","f1db5c84":"code","5a4464f9":"markdown","0e1847cd":"markdown","c25db81f":"markdown","5f89ad1c":"markdown","bfc122c4":"markdown","a8c1cab5":"markdown","c0a1a22b":"markdown","6cd0fdd7":"markdown","5e22773c":"markdown"},"source":{"843bfe86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a0d5418":"import tarfile\nfrom six.moves import urllib","f3605a6c":"DOWNLOAD_ROOT = \"https:\/\/raw.githubusercontent.com\/ageron\/handson-ml2\/master\/\"\nHOUSING_PATH = os.path.join(\"datasets\", \"housing\")\nHOUSING_URL = DOWNLOAD_ROOT + \"datasets\/housing\/housing.tgz\"\n\ndef fetch_housing_data(housing_url = HOUSING_URL, housing_path = HOUSING_PATH):\n    if not os.path.isdir(housing_path):\n        os.makedirs(housing_path)\n    tgz_path = os.path.join(housing_path, \"housing.tgz\")\n    urllib.request.urlretrieve(housing_url, tgz_path)\n    housing_tgz = tarfile.open(tgz_path)\n    housing_tgz.extractall(path=housing_path)\n    housing_tgz.close()","10782499":"def load_housing_data(housing_path = HOUSING_PATH):\n    csv_path = os.path.join(housing_path, \"housing.csv\")\n    return pd.read_csv(csv_path)","30bc46f7":"fetch_housing_data()\nhousing = load_housing_data()\nhousing.head()","eb66bda0":"housing.info()","40bab8e2":"housing[\"ocean_proximity\"].value_counts()","0b4c5ae8":"housing.describe()","c8ec6aa4":"%matplotlib inline\nimport matplotlib.pyplot as plt\nhousing.hist(bins = 50, figsize=(20,15))\nplt.show()","551c29f2":"from sklearn.model_selection import train_test_split\n\nhousing[\"income_cat\"]  = pd.cut(housing[\"median_income\"],\n                                bins = [0., 1.5, 3.0, 4.5, 6., np.inf],\n                                labels = [1, 2, 3, 4, 5])\n\nhousing[\"income_cat\"].hist()\n","3de3b02c":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits = 1, test_size = 0.2, random_state = 42)\nfor train_index, test_index in split.split(housing, housing[\"income_cat\"]):\n    strat_train_set = housing.loc[train_index]\n    strat_test_set = housing.loc[test_index]","8edd2e21":"strat_test_set[\"income_cat\"].value_counts() \/ len(strat_test_set)","04464715":"housing[\"income_cat\"].value_counts() \/ len(housing)","7a613ed5":"for set_ in (strat_train_set, strat_test_set):\n    set_.drop(\"income_cat\", axis = 1, inplace = True)","b27f96c7":"housing = strat_train_set.copy()","d85ce978":"housing.plot(kind = \"scatter\", x = \"longitude\", y = \"latitude\", alpha = 0.1)","6599a434":"housing.plot(kind = \"scatter\", x = \"longitude\", y = \"latitude\", alpha = 0.4,\n             s = housing[\"population\"]\/100, label = \"population\", figsize=(10,7),\n             c = \"median_house_value\", cmap = plt.get_cmap(\"jet\"), colorbar = True)\nplt.legend()","26b76270":"corr_matrix = housing.corr()\ncorr_matrix[\"median_house_value\"].sort_values(ascending = False)","1dcd3810":"from pandas.plotting import scatter_matrix\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\", \"housing_median_age\"]\nscatter_matrix(housing[attributes], figsize=(12, 8))","79129773":"housing.plot(kind=\"scatter\", x=\"median_income\", y = \"median_house_value\", alpha = 0.1)","4fbc6aca":"housing[\"rooms_per_household\"] = housing[\"total_rooms\"]\/housing[\"households\"]\nhousing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]\/housing[\"total_rooms\"]\nhousing[\"population_per_household\"] = housing[\"population\"]\/housing[\"households\"]\n\ncorr_matrix = housing.corr()\ncorr_matrix[\"median_house_value\"].sort_values(ascending=False)","d3d2d948":"housing = strat_train_set.drop(\"median_house_value\", axis = 1)\nhousing_labels = strat_train_set[\"median_house_value\"].copy()","fb89dd3b":"housing.sample(5)","3b6659d1":"housing_labels.sample(5)","035ff48e":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy = \"median\")\n\nhousing_num = housing.drop(\"ocean_proximity\", axis = 1)\nimputer.fit(housing_num)","acb620b9":"X = imputer.transform(housing_num)\nhousing_tr = pd.DataFrame(X, columns=housing_num.columns)","ed20412d":"from sklearn.base import BaseEstimator, TransformerMixin\n\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True):\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n        \n    def fit(self, X, y = None):\n        return self\n    \n    def transform(self, X, y = None):\n        rooms_per_household = X[:,rooms_ix] \/ X[:, households_ix]\n        population_per_household = X[:, population_ix] \/ X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]","339ae38f":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n                ('imputer', SimpleImputer(strategy=\"median\")),\n                ('attribs_adder', CombinedAttributesAdder()),\n                ('std_scaler', StandardScaler())\n])","aa17658b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nnum_attribs = list(housing_num)\ncat_attribs = [\"ocean_proximity\"]\n\nfull_pipeline = ColumnTransformer([\n                (\"num\", num_pipeline, num_attribs),\n                (\"cat\", OneHotEncoder(), cat_attribs),\n])\n\nhousing_prepared = full_pipeline.fit_transform(housing)","49cd0c37":"housing_prepared","15893878":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(housing_prepared, housing_labels)","4ef9b30a":"from sklearn.metrics import mean_squared_error\nhousing_predictions = lin_reg.predict(housing_prepared)\nlin_mse = mean_squared_error(housing_labels, housing_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","20c5667d":"from sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()\ntree_reg.fit(housing_prepared, housing_labels)\n\nhousing_predictions = tree_reg.predict(housing_prepared)\ntree_mse = mean_squared_error(housing_labels, housing_predictions)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","bd688158":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(tree_reg, housing_prepared, housing_labels, scoring=\"neg_mean_squared_error\", cv = 10)\ntree_rmse_scores = np.sqrt(-scores)","48a62b34":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n    \ndisplay_scores(tree_rmse_scores)","f1db5c84":"lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels, scoring=\"neg_mean_squared_error\", cv = 10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)","5a4464f9":"Better Evaluation Using Cross-Validation","0e1847cd":"Experimenting with Attribute Combinations","c25db81f":"Looking for Correlations","5f89ad1c":"Fine-Tune Your Model\n\nGrid Search\n-----------\nfor few combinations\n\nfrom sklearn.model_selection import GridSearchCV\n\nRandom Search\n-----------\nUsed when hyperparameter search space is large\n","bfc122c4":"Create Test Set\n- Using stratified sampling","a8c1cab5":"Transformation Pipelines","c0a1a22b":"Visualizing Geographical Data","6cd0fdd7":"Handling Text and Categorical Attributes","5e22773c":"Select and Train a Model"}}