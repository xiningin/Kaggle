{"cell_type":{"48ad565d":"code","91ca02ae":"code","ca122122":"code","3be88307":"code","98edcc5f":"code","2902b47c":"code","807faef7":"code","46a6381f":"code","a8e623ae":"code","709c10ee":"code","7d1ce599":"code","450a4d07":"code","d3cd19ce":"code","df70641d":"code","55e69189":"code","9e92f618":"code","7ba9f239":"code","ae30e629":"code","2d0aca41":"code","7110d764":"code","8b014a19":"code","07407860":"code","7fa4e9ca":"code","bf4bfdf1":"code","c5b45289":"code","df871876":"code","6ddf36ee":"code","94a0339e":"code","d243400d":"code","48b2bcbe":"code","d726d3e8":"code","45bad752":"code","eb2dae94":"code","7c921ef8":"code","862c8329":"code","a529986a":"code","2024727b":"code","a58f4891":"code","e445e33a":"code","498ba292":"code","a0c08d17":"code","8608606f":"code","26a2b3a3":"code","4b98ca5f":"code","1088da1e":"code","c426fa2a":"code","9e83d6c1":"code","51beae94":"code","9022f39e":"code","88478317":"code","b4714aee":"code","fa42ca64":"code","50d77084":"code","bc0f8ad4":"code","ba39caf4":"code","d579bc97":"code","8a3ea3cc":"code","8278d119":"code","58ff1279":"code","f3b57bb9":"code","524251da":"code","0e6a32b4":"code","5a6895a1":"code","97a038ba":"code","3fbad168":"code","2f4b0c24":"code","4db42803":"code","535eafdf":"code","93d900e4":"code","31d0adc9":"code","c92789c8":"code","6baecd80":"markdown","1a889613":"markdown","a6913d71":"markdown","7429c6dc":"markdown","e9e0d7b4":"markdown","a8a8e039":"markdown","0364ac7d":"markdown","52b1dfca":"markdown","39619de4":"markdown","f9f826eb":"markdown","9618ea72":"markdown","9dea1597":"markdown","e1f52c26":"markdown","e0e96b0f":"markdown","74e486fc":"markdown","f0e43ff4":"markdown","8141d96a":"markdown","facb9d00":"markdown","fa2a81f4":"markdown","34e9b0e6":"markdown","b68738ef":"markdown","3165504d":"markdown","572aa4b4":"markdown","9e2e2d98":"markdown","bf7ff890":"markdown","88ecd994":"markdown","5a4c855f":"markdown","e41ae260":"markdown","7c9b2a4b":"markdown","d0de7659":"markdown","f059a1f4":"markdown","847d12a6":"markdown","5b394777":"markdown","07aa16b0":"markdown","851cfd68":"markdown","86c6eaac":"markdown","82788a00":"markdown","14b73924":"markdown","df159a73":"markdown","5e020809":"markdown","01916b59":"markdown","5b88d314":"markdown","b0727ec5":"markdown","a01fc664":"markdown","256cc080":"markdown","194197d6":"markdown","379ab701":"markdown","495fecc3":"markdown","9d813e8a":"markdown","e7bf8810":"markdown","3b56c4bf":"markdown","e2500b7a":"markdown","41db5124":"markdown","b0760a4e":"markdown","8fc1fcad":"markdown","b50d06fb":"markdown","1d85ccbe":"markdown","aa2ba623":"markdown","0af09104":"markdown","dae6f6df":"markdown"},"source":{"48ad565d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport warnings\nwarnings.simplefilter(action='ignore')\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\nimport math\nimport sklearn.model_selection as ms\nimport sklearn.metrics as sklm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","91ca02ae":"a = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nb = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","ca122122":"#Use this code to show all the 163 columns\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","3be88307":"a.head()","98edcc5f":"print('The shape of our training set: ',a.shape[0], 'houses', 'and', a.shape[1], 'features')\nprint('The shape of our testing set: ',b.shape[0], 'houses', 'and', b.shape[1], 'features')\nprint('The testing set has 1 feature less than the training set, which is SalePrice, the target to predict  ')","2902b47c":"num=a.select_dtypes(include='number')\nnumcorr=num.corr()\nf,ax=plt.subplots(figsize=(9, 9))\nsns.heatmap(numcorr.sort_values(by=['SalePrice'], ascending=False)[['SalePrice']], cmap='Blues')\nplt.title(\" Numerical features correlation with the sale price\", weight='bold', fontsize=18)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold', color='dodgerblue', rotation=0)\n\n\nplt.show()","807faef7":"Num=numcorr['SalePrice'].sort_values(ascending=False).head(10).to_frame()\n\ncm = sns.light_palette(\"cyan\", as_cmap=True)\n\ns = Num.style.background_gradient(cmap=cm)\ns","46a6381f":"plt.figure(figsize=(15,6))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color='crimson', alpha=0.5)\nplt.title('Ground living area\/ Sale price', weight='bold', fontsize=16)\nplt.xlabel('Ground living area', weight='bold', fontsize=12)\nplt.ylabel('Sale price', weight='bold', fontsize=12)\nplt.xticks(weight='bold')\nplt.yticks(weight='bold')\nplt.show()","a8e623ae":"# Figure Size\nfig, ax = plt.subplots(figsize=(9,6))\n\n# Horizontal Bar Plot\ntitle_cnt=a.Neighborhood.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1], color=sns.color_palette('Reds',len(title_cnt)))\n\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n# Add x,y gridlines\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Most frequent neighborhoods',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\n\n\nplt.show()\n# Show Plot\nplt.show()","709c10ee":"# Figure Size\nfig, ax = plt.subplots(figsize=(9,6))\n\n# Horizontal Bar Plot\ntitle_cnt=a.BldgType.value_counts().sort_values(ascending=False).reset_index()\nmn= ax.barh(title_cnt.iloc[:,0], title_cnt.iloc[:,1], color=sns.color_palette('Greens',len(title_cnt)))\n\n\n\n\n# Remove axes splines\nfor s in ['top','bottom','left','right']:\n    ax.spines[s].set_visible(False)\n\n# Remove x,y Ticks\nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\n# Add padding between axes and labels\nax.xaxis.set_tick_params(pad=5)\nax.yaxis.set_tick_params(pad=10)\n\n# Add x,y gridlines\nax.grid(b=True, color='grey', linestyle='-.', linewidth=1, alpha=0.2)\n\n# Show top values \nax.invert_yaxis()\n\n# Add Plot Title\nax.set_title('Building type: Type of dwelling',weight='bold',\n             loc='center', pad=10, fontsize=16)\nax.set_xlabel('Count', weight='bold')\n\n\n# Add annotation to bars\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+0.5, str(round((i.get_width()), 2)),\n            fontsize=10, fontweight='bold', color='grey')\nplt.yticks(weight='bold')\n\n\nplt.show()","7d1ce599":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\n\nplt.subplots(0,0,figsize=(15,3))\n\na.isnull().mean().sort_values(ascending=False).plot.bar(color='black')\nplt.axhline(y=0.1, color='r', linestyle='-')\nplt.title('Missing values average per column: Train set', fontsize=20, weight='bold' )\nplt.show()\n\nplt.subplots(1,0,figsize=(15,3))\nb.isnull().mean().sort_values(ascending=False).plot.bar(color='black')\nplt.axhline(y=0.1, color='r', linestyle='-')\nplt.title('Missing values average per column: Test set ', fontsize=20, weight='bold' )\nplt.show()","450a4d07":"na = a.shape[0]\nnb = b.shape[0]\ny_train = a['SalePrice'].to_frame()\n#Combine train and test sets\nc1 = pd.concat((a, b), sort=False).reset_index(drop=True)\n#Drop the target \"SalePrice\" and Id columns\nc1.drop(['SalePrice'], axis=1, inplace=True)\nc1.drop(['Id'], axis=1, inplace=True)\nprint(\"Total size is :\",c1.shape)","d3cd19ce":"c=c1.dropna(thresh=len(c1)*0.9, axis=1)\nprint('We dropped ',c1.shape[1]-c.shape[1], ' features in the combined set')","df70641d":"allna = (c.isnull().sum() \/ len(c))\nallna = allna.drop(allna[allna == 0].index).sort_values(ascending=False)\nplt.figure(figsize=(12, 8))\nallna.plot.barh(color='purple')\nplt.title('Missing values average per column', fontsize=25, weight='bold' )\nplt.show()","55e69189":"print('The shape of the combined dataset after dropping features with more than 90% M.V.', c.shape)","9e92f618":"NA=c[allna.index.tolist()]","7ba9f239":"NAcat=NA.select_dtypes(include='object')\nNAnum=NA.select_dtypes(include='number')\nprint('We have :',NAcat.shape[1],'categorical features with missing values')\nprint('We have :',NAnum.shape[1],'numerical features with missing values')","ae30e629":"NAnum.head()","2d0aca41":"#MasVnrArea: Masonry veneer area in square feet, the missing data means no veneer so we fill with 0\nc['MasVnrArea']=c.MasVnrArea.fillna(0)\n#GarageYrBlt:  Year garage was built, we fill the gaps with the median: 1980\nc['GarageYrBlt']=c[\"GarageYrBlt\"].fillna(1980)\n#For the rest of the columns: Bathroom, half bathroom, basement related columns and garage related columns:\n#We will fill with 0s because they just mean that the hosue doesn't have a basement, bathrooms or a garage","7110d764":"NAcat.head()","8b014a19":"NAcat1= NAcat.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nNAcat1 = NAcat1.style.background_gradient(cmap=cm)\nNAcat1","07407860":"#We start with features having just few missing value:  We fill the gap with forward fill method:\nc['Electrical']=c['Electrical'].fillna(method='ffill')\nc['SaleType']=c['SaleType'].fillna(method='ffill')\nc['KitchenQual']=c['KitchenQual'].fillna(method='ffill')\nc['Exterior1st']=c['Exterior1st'].fillna(method='ffill')\nc['Exterior2nd']=c['Exterior2nd'].fillna(method='ffill')\nc['Functional']=c['Functional'].fillna(method='ffill')\nc['Utilities']=c['Utilities'].fillna(method='ffill')\nc['MSZoning']=c['MSZoning'].fillna(method='ffill')","7fa4e9ca":"#Categorical missing values\nNAcols=c.columns\nfor col in NAcols:\n    if c[col].dtype == \"object\":\n        c[col] = c[col].fillna(\"None\")","bf4bfdf1":"#Numerical missing values\nfor col in NAcols:\n    if c[col].dtype != \"object\":\n        c[col]= c[col].fillna(0)","c5b45289":"c.isnull().sum().sort_values(ascending=False).head()","df871876":"c['TotalArea'] = c['TotalBsmtSF'] + c['1stFlrSF'] + c['2ndFlrSF'] + c['GrLivArea'] +c['GarageArea']\n\nc['Bathrooms'] = c['FullBath'] + c['HalfBath']*0.5 \n\nc['Year average']= (c['YearRemodAdd']+c['YearBuilt'])\/2","6ddf36ee":"#c['MoSold'] = c['MoSold'].astype(str)\nc['MSSubClass'] = c['MSSubClass'].apply(str)\nc['YrSold'] = c['YrSold'].astype(str)","94a0339e":"cb=pd.get_dummies(c)\nprint(\"the shape of the original dataset\",c.shape)\nprint(\"the shape of the encoded dataset\",cb.shape)\nprint(\"We have \",cb.shape[1]- c.shape[1], 'new encoded features')","d243400d":"Train = cb[:na]  #na is the number of rows of the original training set\nTest = cb[na:] ","48b2bcbe":"fig = plt.figure(figsize=(15,15))\nax1 = plt.subplot2grid((3,2),(0,0))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color=('yellowgreen'), alpha=0.5)\nplt.axvline(x=4600, color='r', linestyle='-')\nplt.title('Ground living Area- Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(0,1))\nplt.scatter(x=a['TotalBsmtSF'], y=a['SalePrice'], color=('red'),alpha=0.5)\nplt.axvline(x=5900, color='r', linestyle='-')\nplt.title('Basement Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(1,0))\nplt.scatter(x=a['1stFlrSF'], y=a['SalePrice'], color=('deepskyblue'),alpha=0.5)\nplt.axvline(x=4000, color='r', linestyle='-')\nplt.title('First floor Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(1,1))\nplt.scatter(x=a['MasVnrArea'], y=a['SalePrice'], color=('gold'),alpha=0.9)\nplt.axvline(x=1500, color='r', linestyle='-')\nplt.title('Masonry veneer Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(2,0))\nplt.scatter(x=a['GarageArea'], y=a['SalePrice'], color=('orchid'),alpha=0.5)\nplt.axvline(x=1230, color='r', linestyle='-')\nplt.title('Garage Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(2,1))\nplt.scatter(x=a['TotRmsAbvGrd'], y=a['SalePrice'], color=('tan'),alpha=0.9)\nplt.axvline(x=13, color='r', linestyle='-')\nplt.title('TotRmsAbvGrd - Price scatter plot', fontsize=15, weight='bold' )\n\n","d726d3e8":"a['GrLivArea'].sort_values(ascending=False).head(2)","45bad752":"a['TotalBsmtSF'].sort_values(ascending=False).head(1)","eb2dae94":"a['MasVnrArea'].sort_values(ascending=False).head(1)","7c921ef8":"a['1stFlrSF'].sort_values(ascending=False).head(1)","862c8329":"a['GarageArea'].sort_values(ascending=False).head(4)","a529986a":"a['TotRmsAbvGrd'].sort_values(ascending=False).head(1)","2024727b":"#train=Train[(Train['GrLivArea'] < 4600) & (Train['MasVnrArea'] < 1500) & (Train['GarageArea'] < 1240)\n#           & (Train['TotRmsAbvGrd'] < 13)]\n\n#print('We removed ',Train.shape[0]- train.shape[0],'outliers')","a58f4891":"train=Train[(Train['GrLivArea'] < 4600) & (Train['MasVnrArea'] < 1500)]\n\nprint('We removed ',Train.shape[0]- train.shape[0],'outliers')","e445e33a":"target=a[['SalePrice']]\ntarget.loc[1298]","498ba292":"target.loc[523]","a0c08d17":"#train=Train.copy()\n#pos=[30,   88,  142,  277,  308,  328,  365,  410,  438,  462,  495,\n#        523,  533,  581,  588,  628,  632,  681,  688,  710,  714,  728,\n#        774,  812,  874,  898,  916,  935,  968,  970, 1062, 1168, 1170,\n#        1181, 1182, 1298, 1324, 1383, 1423, 1432, 14]\n#target.drop(target.index[pos], inplace=True)\n#train.drop(target.index[pos], inplace=True)","8608606f":"#pos = [1298,523, 297, 581, 1190, 1061, 635, 197,1328, 495, 583, 313, 335, 249, 706]\npos = [1298,523, 297]\ntarget.drop(target.index[pos], inplace=True)","26a2b3a3":"print('We make sure that both train and target sets have the same row number after removing the outliers:')\nprint( 'Train: ',train.shape[0], 'rows')\nprint('Target:', target.shape[0],'rows')","4b98ca5f":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,5))\n#1 rows 2 cols\n#first row, first col\nax1 = plt.subplot2grid((1,2),(0,0))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color=('orchid'), alpha=0.5)\nplt.title('Area-Price plot with outliers',weight='bold', fontsize=18)\nplt.axvline(x=4600, color='r', linestyle='-')\n#first row sec col\nax1 = plt.subplot2grid((1,2),(0,1))\nplt.scatter(x=train['GrLivArea'], y=target['SalePrice'], color='navy', alpha=0.5)\nplt.axvline(x=4600, color='r', linestyle='-')\nplt.title('Area-Price plot without outliers',weight='bold', fontsize=18)\nplt.show()","1088da1e":"print(\"Skewness before log transform: \", a['GrLivArea'].skew())\nprint(\"Kurtosis before log transform: \", a['GrLivArea'].kurt())","c426fa2a":"from scipy.stats import skew\n\n#numeric_feats = c.dtypes[c.dtypes != \"object\"].index\n\n#skewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\n#skewed_feats = skewed_feats[skewed_feats > 0.75]\n#skewed_feats = skewed_feats.index\n\n#train[skewed_feats] = np.log1p(train[skewed_feats])\n\n","9e83d6c1":"print(\"Skewness after log transform: \", train['GrLivArea'].skew())\nprint(\"Kurtosis after log transform: \", train['GrLivArea'].kurt())","51beae94":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,10))\n#1 rows 2 cols\n#first row, first col\nax1 = plt.subplot2grid((2,2),(0,0))\nsns.distplot(a.GrLivArea, color='plum')\nplt.title('Before: Distribution of GrLivArea',weight='bold', fontsize=18)\n#first row sec col\nax1 = plt.subplot2grid((2,2),(0,1))\nsns.distplot(a['1stFlrSF'], color='tan')\nplt.title('Before: Distribution of 1stFlrSF',weight='bold', fontsize=18)\n\n\nax1 = plt.subplot2grid((2,2),(1,0))\nsns.distplot(train.GrLivArea, color='plum')\nplt.title('After: Distribution of GrLivArea',weight='bold', fontsize=18)\n#first row sec col\nax1 = plt.subplot2grid((2,2),(1,1))\nsns.distplot(train['1stFlrSF'], color='tan')\nplt.title('After: Distribution of 1stFlrSF',weight='bold', fontsize=18)\nplt.show()","9022f39e":"print(\"Skewness before log transform: \", target['SalePrice'].skew())\nprint(\"Kurtosis before log transform: \",target['SalePrice'].kurt())","88478317":"#log transform the target:\ntarget[\"SalePrice\"] = np.log1p(target[\"SalePrice\"])","b4714aee":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,5))\n#1 rows 2 cols\n#first row, first col\nax1 = plt.subplot2grid((1,2),(0,0))\nplt.hist(a.SalePrice, bins=10, color='mediumpurple',alpha=0.5)\nplt.title('Sale price distribution before normalization',weight='bold', fontsize=18)\n#first row sec col\nax1 = plt.subplot2grid((1,2),(0,1))\nplt.hist(target.SalePrice, bins=10, color='darkcyan',alpha=0.5)\nplt.title('Sale price distribution after normalization',weight='bold', fontsize=18)\nplt.show()","fa42ca64":"print(\"Skewness after log transform: \", target['SalePrice'].skew())\nprint(\"Kurtosis after log transform: \",target['SalePrice'].kurt())","50d77084":"x=train\ny=np.array(target)","bc0f8ad4":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y,test_size = .3, random_state=0)","ba39caf4":"from sklearn.preprocessing import RobustScaler\nscaler= RobustScaler()\n# transform \"x_train\"\nx_train = scaler.fit_transform(x_train)\n# transform \"x_test\"\nx_test = scaler.transform(x_test)\n#Transform the test set\nX_test= scaler.transform(Test)","d579bc97":"#from sklearn.linear_model import LinearRegression\n\n#lreg=LinearRegression()\n#MSEs=ms.cross_val_score(lreg, x, y, scoring='neg_mean_squared_error', cv=5)\n#meanMSE=np.mean(MSEs)\n#print(meanMSE)\n#print('RMSE = '+str(math.sqrt(-meanMSE)))","8a3ea3cc":"import sklearn.model_selection as GridSearchCV\nfrom sklearn.linear_model import Ridge\n\nridge=Ridge()\nparameters= {'alpha':[x for x in range(1,101)]}\n\nridge_reg=ms.GridSearchCV(ridge, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\nridge_reg.fit(x_train,y_train)\nprint(\"The best value of Alpha is: \",ridge_reg.best_params_)\nprint(\"The best score achieved with Alpha=11 is: \",math.sqrt(-ridge_reg.best_score_))\nridge_pred=math.sqrt(-ridge_reg.best_score_)","8278d119":"ridge_mod=Ridge(alpha=15)\nridge_mod.fit(x_train,y_train)\ny_pred_train=ridge_mod.predict(x_train)\ny_pred_test=ridge_mod.predict(x_test)\n\nprint('Root Mean Square Error train = ' + str(math.sqrt(sklm.mean_squared_error(y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, y_pred_test))))   ","58ff1279":"from sklearn.linear_model import Lasso\n\nparameters= {'alpha':[0.0001,0.0009,0.001,0.002,0.003,0.01,0.1,1,10,100]}\n\nlasso=Lasso()\nlasso_reg=ms.GridSearchCV(lasso, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\nlasso_reg.fit(x_train,y_train)\n\nprint('The best value of Alpha is: ',lasso_reg.best_params_)","f3b57bb9":"lasso_mod=Lasso(alpha=0.0009)\nlasso_mod.fit(x_train,y_train)\ny_lasso_train=lasso_mod.predict(x_train)\ny_lasso_test=lasso_mod.predict(x_test)\n\nprint('Root Mean Square Error train = ' + str(math.sqrt(sklm.mean_squared_error(y_train, y_lasso_train))))\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, y_lasso_test))))","524251da":"coefs = pd.Series(lasso_mod.coef_, index = x.columns)\n\nimp_coefs = pd.concat([coefs.sort_values().head(10),\n                     coefs.sort_values().tail(10)])\nimp_coefs.plot(kind = \"barh\", color='yellowgreen')\nplt.xlabel(\"Lasso coefficient\", weight='bold')\nplt.title(\"Feature importance in the Lasso Model\", weight='bold')\nplt.show()","0e6a32b4":"\nprint(\"Lasso kept \",sum(coefs != 0), \"important features and dropped the other \", sum(coefs == 0),\" features\")","5a6895a1":"from sklearn.linear_model import ElasticNetCV\n\n#alphas = [10,1,0.1,0.01,0.001,0.002,0.003,0.004,0.005,0.00054255]\n#l1ratio = [0.1, 0.3,0.5, 0.9, 0.95, 0.99, 1]\n\n#elastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\n#elasticmod = elastic_cv.fit(x_train, y_train.ravel())\n#ela_pred=elasticmod.predict(x_test)\n#print('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, ela_pred))))\n#print(elastic_cv.alpha_)","97a038ba":"from sklearn.linear_model import ElasticNetCV\n\nalphas = [0.000542555]\nl1ratio = [0.1, 0.3,0.5, 0.9, 0.95, 0.99, 1]\n\nelastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\nelasticmod = elastic_cv.fit(x_train, y_train.ravel())\nela_pred=elasticmod.predict(x_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, ela_pred))))\nprint(elastic_cv.alpha_)","3fbad168":"from xgboost.sklearn import XGBRegressor\n\n#xg_reg = XGBRegressor()\n#xgparam_grid= {'learning_rate' : [0.01],'n_estimators':[2000, 3460, 4000],\n#                                     'max_depth':[3], 'min_child_weight':[3,5],\n#                                     'colsample_bytree':[0.5,0.7],\n#                                     'reg_alpha':[0.0001,0.001,0.01,0.1,10,100],\n#                                    'reg_lambda':[1,0.01,0.8,0.001,0.0001]}\n\n#xg_grid=GridSearchCV(xg_reg, param_grid=xgparam_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n#xg_grid.fit(x_train,y_train)\n#print(xg_grid.best_estimator_)\n#print(xg_grid.best_score_)","2f4b0c24":"xgb= XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=3, min_child_weight=0, missing=None, n_estimators=4000,\n             n_jobs=1, nthread=None, objective='reg:squarederror', random_state=0,\n             reg_alpha=0.0001, reg_lambda=0.01, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)\nxgmod=xgb.fit(x_train,y_train)\nxg_pred=xgmod.predict(x_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, xg_pred))))","4db42803":"from sklearn.ensemble import VotingRegressor\n\nvote_mod = VotingRegressor([('Ridge', ridge_mod), ('Lasso', lasso_mod), ('Elastic', elastic_cv), \n                            ('XGBRegressor', xgb)])\nvote= vote_mod.fit(x_train, y_train.ravel())\nvote_pred=vote.predict(x_test)\n\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, vote_pred))))","535eafdf":"from mlxtend.regressor import StackingRegressor\n\n\nstregr = StackingRegressor(regressors=[elastic_cv,ridge_mod, lasso_mod, vote_mod], \n                           meta_regressor=xgb, use_features_in_secondary=True\n                          )\n\nstack_mod=stregr.fit(x_train, y_train.ravel())\nstacking_pred=stack_mod.predict(x_test)\n\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, stacking_pred))))","93d900e4":"final_test=(0.3*vote_pred+0.5*stacking_pred+ 0.2*y_lasso_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, final_test))))\n","31d0adc9":"#VotingRegressor to predict the final Test\nvote_test = vote_mod.predict(X_test)\nfinal1=np.expm1(vote_test)\n\n#StackingRegressor to predict the final Test\nstack_test = stregr.predict(X_test)\nfinal2=np.expm1(stack_test)\n\n#LassoRegressor to predict the final Test\nlasso_test = lasso_mod.predict(X_test)\nfinal3=np.expm1(lasso_test)\n","c92789c8":"#Submission of the results predicted by the average of Voting\/Stacking\/Lasso\nfinal=(0.2*final1+0.6*final2+0.2*final3)\n\nfinal_submission = pd.DataFrame({\n        \"Id\": b[\"Id\"],\n        \"SalePrice\": final\n    })\nfinal_submission.to_csv(\"final_submission.csv\", index=False)\nfinal_submission.head()","6baecd80":"To have a better idea, we sort the features according to their correlation with the sale price","1a889613":"I just created a copy with small enhancements of https:\/\/www.kaggle.com\/amiiiney\/price-prediction-top-15-regularization-stacking. See also my comment https:\/\/www.kaggle.com\/amiiiney\/price-prediction-top-15-regularization-stacking#805478","a6913d71":"So, 18 categorical features and 10 numerical features to clean.\n* We start with the numerical features, first thing to do is have a look at them to learn more about their distribution and decide how to clean them:\n- Most of the features are going to be filled with 0s because we assume that they don't exist, for example GarageArea, GarageCars with missing values are simply because the house lacks a garage.\n- GarageYrBlt: Year garage was built can't be filled with 0s, so we fill with the median (1980).\n\n> ### 2.2 Numerical features:","7429c6dc":"The skewness and kurtosis values look fine after log transform. We can now move forward to Machine Learning.\n\n*P.S.To get our original SalePrice values back, we will apply **np.expm1** at the end of the study to cancel the log1p transformation after training and testing the models.*","e9e0d7b4":"We finally end up with a clean dataset, next thing to do is create new features","a8a8e039":"> ### 4.2 One hot encoding:","0364ac7d":">> ## ElasticNet","52b1dfca":"Interesting! The **overall quality**, **the living area, basement area, garage cars and garage area** have the highest correlation values with the sale price, which is logical, better quality and bigger area = Higher price.\n* Also some features such as, **full bath** or **1st floor surface** have a higher correlation, those are luxury features, more luxury = Higher price.\n* and **Year built**, the newer buildings seem to have higher sale prices.\n\n\n> **Example of a strong correlation between 2 numerical features: Sale price and ground living area**","39619de4":"* Next we try Lasso regularization: Similar procedure as ridge regularization but Lasso tends to have a lot of 0 entries in it and just few nonzeros (easy selection). In other words, lasso drops the uninformative features and keeps just the important ones.\n* As with Ridge regularization, we need to find the **alpha** parameter that penalizes the error","f9f826eb":"> ### 6.3 Regularization: ","9618ea72":"Let's dig in more into the data, those are just the numerical features. I assume that categorical features will be very important, for example, the neighborhood feature will be important, maybe the most important, given that good locations nowadays cost good money.\n> Example of categorical features: **Neighborhood**","9dea1597":">> ## Lasso regression","e1f52c26":"Averaging the 3 best models: Stacking, Voting and Lasso gave the best results: **The lowest RMSE**\n* The coefficients assigned to the 3 models were tested manually, the models combination above gave the best RMSE score","e0e96b0f":"Blending and submitting the **FINAL AVERAGE OF 3 REGRESSORS**","74e486fc":"> ### 2.3 Categorical features:\n\nAnd we have 18 Categorical features with missing values:\n* Some features have just 1 or 2 missing values, so we will just use the forward fill method because they are obviously values that can't be filled with 'None's\n* Features with many missing values are mostly basement and garage related (same as in numerical features) so as we did with numerical features (filling them with 0s), we will fill the categorical missing values with \"None\"s assuming that the houses lack basements and garages.","f0e43ff4":"## If you made it this far, thank you for your attention.\n **In order to improve my LB score, I will keep updating this kernel by:**\n* **Creating new features**\n* **Detecting other outliers**\n* **Trying new regressors and stacking\/blending them**","8141d96a":"Feature engineering is very important to improve the model's performance, I will start in this kernel just with the TotalArea, Bathrooms and average year features and will keep updating the kernel by creating new features.\n* ** This part of the kernel is not finished yet.**","facb9d00":"We do the same thing with \"SalePrice\" column, we localize those outliers and make sure they are the right outliers to remove. \n* They both have the same price range as the detected outliers. So, we can safely drop them.","fa2a81f4":"\nWe can safely remove those points.","34e9b0e6":"Then, we split them to train and test sets","b68738ef":"# 1- Exploratory data analysis\n***\nBefore starting, I would like to mention that I will be using alphabets to name my datasets to make my workflow easier:\n        \n         a=train\n         b=test\n         c= combined dataset (train+test)\n\nWe read and open our train and test datasets","3165504d":">> ## STACKING REGRESSOR:","572aa4b4":"* We check next, the important features that our model used to make predictions\n* The number of uninformative features that were dropped. Lasso give a 0 coefficient to the useless features, we will use the coefficient given to the important feature to plot the graph","9e2e2d98":"We stack all the previous models, including the votingregressor with XGBoost as the meta regressor:","bf7ff890":"* Good news! Most of the features are clean from missing values\n\n* We combine first the train and test datasets to run all the data munging and feature engineering on both of them.","88ecd994":"> ### 6.5 ENSEMBLE METHODS:\n>> ## VOTING REGRESSOR:\n* A voting regressor is an ensemble meta-estimator that fits base regressors each on the whole dataset. It, then, averages the individual predictions to form a final prediction.\n\n* After running the regressors, we combine them first with voting regressor in order to get a better model","5a4c855f":"Last thing to do before Machine Learning is to log transform the target as well, as we did with the skewed features.\n\n*P.S. Log transoform is only applied on the target in this version, not on the features. I will be applying the log transoform on the features in future versions of this kernel*","e41ae260":"*P.S. I didn't drop all the outliers because dropping all of them led to a worst RMSE score. More investigation is needed to filter those outliers.*","7c9b2a4b":"## Aim:\n***\nThe aim of this competition is to predict the sale price of residential homes in Ames, Iowa. We will practice feature engineering and regression algorithms to achieve the lowest prediction error (RMSE is the metric used in this competition).","d0de7659":"We split them to:\n* Categorical features\n* Numerical features","f059a1f4":"* We dealt already with small missing values or values that can't be filled with \"0\" such as Garage year built.\n* The rest of the features are mostly basement and garage related with 100s of missing values, we will just fill 0s in the numerical features and 'None' in categorical features, assuming that the houses don't have basements, full bathrooms or garage.","847d12a6":"Let's have a look first at the correlation between numerical features and the target \"SalePrice\", in order to have a first idea of the connections between features. Just by looking at the heatmap below we can see many dark colors, many features have high correlation with the target.","5b394777":"We first start by trying the very basic regression model: Linear regression. \n* We use 5- Fold cross validation for a better error estimate:\n \n> ### 6.2 Linear regression\n","07aa16b0":"# 5- Outliers detection:\n***\n> ### 5.1 Outliers visualization:\n\nThis part of the kernel will be a little bit messy. I didn't want to deal with the outliers in the combined dataset to keep the shape of the original train and test datasets. Dropping them would shift the location of the rows.\n* If you know a better solution to this, I will be more than happy to read your recommandations.\n\n* OK. So we go back to our original train dataset to visualize the important features \/ Sale price scatter plot to find outliers","851cfd68":"# 3- Feature engineering:\n***\nSince the area is a very important variable, we will create a new feature \"**TotalArea**\" that sums the area of all the floors and the basement.\n* **Bathrooms**: All the bathroom in the ground floor\n* **Year average**: The average of the sum of the year the house was built and the year the house was remodeled\n\n","86c6eaac":"The outliers are the points in the right that have a larger area or value but a very low sale price. We localize those points by sorting their respective columns\n\n* Interesting! The outlier in \"basement\" and \"first floor\" features is the same as the first outlier in ground living area: **The outlier with index number 1298. **\n\n> ### 5.2 Outliers localization:\n\nWe sort the columns containing the outliers shown in the graph, we will use the function *head()* to show the outliers: ***head(number of outliers or dots shown in each plot)***","82788a00":"# 2- Data cleaning\n***\n   > ### 2.1 Features with >90% missing values\n   \nFirst thing to do is get rid of the features with more than 90% missing values *(figure above)*. For example the PoolQC's missing values are probably due to the lack of pools in some buildings, which is very logical. But replacing those (more than 90%) missing values with \"no pool\" will leave us with a feature with low variance, and low variance features are uniformative for machine learning models. So we drop the features with more than 90% missing values.","14b73924":"* Our goal is to minimize the error, we use regularization methods: Ridge, Lasso and ElasticNet, in order to lower the squared error","df159a73":"# 6- Machine Learning:\n***\n> ### 6.1 Preprocessing\n\nWe start machine learning by setting the features and target:\n* Features: x\n* Target: y","5e020809":">> Number of missing values per column:","01916b59":"* Last thing to do is average our regressors and fit them on the testing dataset","5b88d314":"We will try other kind of regressors, such as XGBRegressor and ExtraTreesRegressor","b0727ec5":"# 4- Encoding categorical features:\n***\n> ### 4.1 Numerical features:\n\nWe start with numerical features that are actually categorical, for example \"Month sold\", the values are from 1 to 12, each number is assigned to a month November is number 11 while March is number 3. 11 is just the order of the months and not a given value, so we convert the \"Month Sold\" feature to categorical","a01fc664":"\n> # COMPONENTS OF THIS PROJECT\n***\n     \n     1- EXPLORATORY DATA ANALYSIS\n\n     2- DATA CLEANING\n\n     3- FEATURE ENGINEERING\n\n     4- ENCODING CATEGORICAL FEATURES\n\n     5- DETECTING OUTLIERS\n\n     6- MACHINE LEARNING","256cc080":"We use RobustScaler to scale our data because it's powerful against outliers, we already detected some but there must be some other outliers out there, I will try to find them in future versions of the kernel","194197d6":"Next, we try ElasticNet. A regressor that combines both ridge and Lasso.\nWe use cross validation to find:\n* Alpha\n* Ratio between Ridge and Lasso, for a better combination of both","379ab701":"> ### 6.6 Fit the model on test data\n\nNow, we fit the models on the test data and then submit it to the competition\n\n* We apply **np.expm1** to cancel the **np.logp1** *(we did previously in data processing)* and convert the numbers to their original form","495fecc3":"> ### 6.4 XGB and ExtraTrees regressors:","9d813e8a":">> ## Ridge regression:\n* Minimize squared error + a term **alpha** that penalizes the error\n* We need to find a value of **alpha** that minimizes the train and test error (avoid overfitting)","e7bf8810":"We gather all the outliers index positions and drop them from the target dataset","3b56c4bf":"\nHere is a glimpse of what we will be dealing with:\n* Many features, many missing values and one target feature: \"SalePrice\" which is the price of the houses we are supposed to predict","e2500b7a":"I tried numberers that round alpha=0.0005 and found out that 0.0005425 gives the best score, so we continue with alpha=0.0005425","41db5124":"Nice! The most important feature is the new feature we created \"**TotalArea**\". \n* Other features such as neighborhood or overall quality are among the main important features.","b0760a4e":">> ## Averaging Regressors","8fc1fcad":"We are done with the cleaning and feature engineering. Now, we split the combined dataset to the original train and test sets","b50d06fb":"* But before going any futher, we start by cleaning the data from missing values. I set the threshold to 90% (red line), all columns with more than 90% missing values will be dropped.","1d85ccbe":"The gridSearch above tunes the hyperparamaters, but it takes forever to run. I copy the best estimator results to the model below. Feel free to uncomment and check it out.","aa2ba623":"> ## Log transform skewed numeric features:\n\nWe want our skewness value to be around 0 and kurtosis less than 3. For more information about skewness and kurtosis,I recommend reading [this article.](https:\/\/codeburst.io\/2-important-statistics-terms-you-need-to-know-in-data-science-skewness-and-kurtosis-388fef94eeaa)\n\nHere are two examples of skewed features: Ground living area and 1st floor SF. We will apply **np.log1p** to the skewed variables.","0af09104":"Before cleaning the data, we zoom at the features with missing values, those missing values won't be treated iqually. Some features have barely 1 or 2 missing values, we will use the forward fill method to fill them.","dae6f6df":"We isolate the missing values from the rest of the dataset to have a good idea of how to treat them"}}