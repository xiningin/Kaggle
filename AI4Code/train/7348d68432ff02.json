{"cell_type":{"784c74a0":"code","bfec0b74":"code","fdb03aca":"code","23422a16":"code","65082434":"code","9c27f4e9":"code","961df6ba":"code","890ece51":"code","03a4e00b":"code","82bc3a28":"code","823d0d11":"code","53a688a9":"code","a294ce81":"code","93b157bb":"code","938a2edf":"code","3bad2de8":"code","76713590":"code","2cc27857":"code","95f935d1":"code","60eb12b3":"code","30a93ab9":"code","e5215907":"code","ed347761":"code","3d5ea183":"code","14f2e96b":"code","3f1c9226":"code","7ec091e9":"code","468af938":"code","5c1f418d":"code","43e04ab5":"code","147ff238":"code","d53fd57f":"code","b43fe715":"code","1c82bb73":"code","3425eb57":"code","1f800d29":"code","8ede026d":"code","ee158c8e":"code","116da8c4":"code","51d91ebd":"markdown","aea94946":"markdown","4bce387d":"markdown","7a231452":"markdown","f0b8cbfc":"markdown","7030e119":"markdown","fb98fe3c":"markdown","03e72679":"markdown","d7a3462e":"markdown","b43ee556":"markdown","2509bf53":"markdown","da038967":"markdown","da375861":"markdown","093d4537":"markdown","fcdc7b75":"markdown","11a5afcc":"markdown","e71e5d59":"markdown","8fc82c36":"markdown","3dfa62eb":"markdown","e4ffb913":"markdown","c80418fc":"markdown","375891f2":"markdown","d02c043f":"markdown"},"source":{"784c74a0":"## Introduction\n\u041f\u0440\u043e\u0442\u043e\u0442\u0438\u043f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0430\u0444\u0438\u043a\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0442\u0440\u0430\u0444\u0438\u043a\u0430. \u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u043f\u043e\u0437\u043e\u0432\u043b\u0438\u043b \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430. 1) Benign: Legit ,2) DoS slowloris:DoS attack and 3). DoS Hulk: DDoS attack. ","bfec0b74":"from mpl_toolkits.mplot3d import Axes3D #For Basic ploting\nfrom sklearn.preprocessing import StandardScaler #Preprocessing\nfrom sklearn import preprocessing    # Preprocessing\nfrom sklearn.naive_bayes import GaussianNB #import gaussian naive bayes model\nfrom sklearn.tree import DecisionTreeClassifier #import Decision tree classifier\nfrom sklearn import metrics  #Import scikit-learn metrics module for accuracy calculation\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","fdb03aca":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","23422a16":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","65082434":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","9c27f4e9":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","961df6ba":"nRowsRead = 1000 # specify No. of row. 'None' for whole data\n# test_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/test_mosaic.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test_mosaic.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","890ece51":"df1.head(5)","03a4e00b":"plotPerColumnDistribution(df1, 10, 5)","82bc3a28":"plotCorrelationMatrix(df1, 19)","823d0d11":"\n\nplotScatterMatrix(df1, 20, 10)\n\n","53a688a9":"nRowsRead = 1000 # specify No. of rows. 'None' for whole file\n# train_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/train_mosaic.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train_mosaic.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","a294ce81":"df2.head(5)","93b157bb":"plotPerColumnDistribution(df2, 10, 5)","938a2edf":"plotCorrelationMatrix(df2, 19)","3bad2de8":"plotScatterMatrix(df2, 20, 10)","76713590":"nRowsRead = None # specify No. of row. 'None' for whole data\n# test_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ntrain_data = pd.read_csv('\/kaggle\/input\/train_mosaic.csv', delimiter=',', nrows = nRowsRead)\ntrain_data.dataframeName = 'train_mosaic.csv'\nnRow, nCol = train_data.shape\nprint(f'There are {nRow} rows and {nCol} columns')","2cc27857":"train_data.head()","95f935d1":"nRowsRead = None # specify No. of row. 'None' for whole data\n# test_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ntest_data = pd.read_csv('\/kaggle\/input\/test_mosaic.csv', delimiter=',', nrows = nRowsRead)\ntest_data.dataframeName = 'test_mosaic.csv'\nnRow, nCol = test_data.shape\nprint(f'There are {nRow} rows and {nCol} columns')","60eb12b3":"test_data.head()","30a93ab9":"train_data['Label'].unique()\ntest_data['Label'].unique()","e5215907":"# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\ntrain_data['Label'] = label_encoder.fit_transform(train_data['Label'])\ntest_data['Label'] = label_encoder.fit_transform(test_data['Label'])","ed347761":"train_data.head()","3d5ea183":"test_data.head()","14f2e96b":"X_train = train_data.drop('Label',axis=1)\nX_test = test_data.drop('Label',axis=1)\ny_train = train_data['Label']\ny_test = test_data['Label']\n","3f1c9226":"X_train.head()","7ec091e9":"y_train.head()","468af938":"X_test.head()","5c1f418d":"y_test.head()","43e04ab5":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom numpy.random import seed\nimport tensorflow ","147ff238":"def create_model(lyrs=[10], act='linear', opt='Adam', dr=0.0):\n    \n    # set random seed for reproducibility\n    seed(42)\n    tensorflow.random.set_seed(42)\n    \n    model = Sequential()\n    \n    # create first hidden layer\n    model.add(Dense(lyrs[0], input_dim=X_train.shape[1], activation=act))\n    \n    # create additional hidden layers\n    for i in range(1,len(lyrs)):\n        model.add(Dense(lyrs[i], activation=act))\n    \n    # add dropout, default is none\n    model.add(Dropout(dr))\n    \n    # create output layer\n    model.add(Dense(1, activation='sigmoid'))  # output layer\n    \n    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n    \n    return model","d53fd57f":"model = create_model()\nprint(model.summary())","b43fe715":"# train model on full train set, with 80\/20 CV split\ntraining = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, verbose=0)\n\n#Predict the response for test dataset\ndt_pred = training.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","1c82bb73":"plt.plot(training.history['acc'])\nplt.plot(training.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","3425eb57":"# train model on full train set, with 80\/20 CV split\ntraining = model.fit(X_train, y_train, epochs=50, batch_size=32, \n                     validation_split=0.2, verbose=0)\n\n# evaluate the model\nscores = model.evaluate(X_train, y_train)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n","1f800d29":"# create gaussian naive bayes classifier\ngnb = GaussianNB()\n#Train the model using the training sets\ngnb.fit(X_train,y_train)\n#Predict the response for test dataset\ngnb_pred = gnb.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy : \",metrics.accuracy_score(y_test,gnb_pred))","8ede026d":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ndt_pred = clf.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","ee158c8e":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ndt_pred1 = clf.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred1))","116da8c4":"print(\"Naive Bayes Accuracy:\",metrics.accuracy_score(y_test, gnb_pred))\nprint(\"Decision Tree Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","51d91ebd":"\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0430\u0442\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432  Naive Bayes \u0438 Decision Tree.","aea94946":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430:","4bce387d":"\n\n\u0413\u0440\u0430\u0444 \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f:\n","7a231452":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0430\u0442\u0430\u043a.","f0b8cbfc":"\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: X_train,X_test  y_train,y_test ","7030e119":"> **Decision Tree**","fb98fe3c":"\u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. ","03e72679":"\u0413\u0440\u0430\u0444 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f (histogram\/bar graph):","d7a3462e":"> **Decion Tree with Max Depth 3**","b43ee556":"\u041d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c","2509bf53":"> \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:","da038967":"**Comparison**","da375861":"### \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u0430: \/kaggle\/input\/test_mosaic.csv","093d4537":"\n\n\u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f:\n","fcdc7b75":"The next hidden code cells define functions for plotting data.","11a5afcc":"## \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 : \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 .","e71e5d59":"> \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:","8fc82c36":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430:","3dfa62eb":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u0430: \/kaggle\/input\/train_mosaic.csv","e4ffb913":"\u0413\u0440\u0430\u0444 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f (histogram\/bar graph):","c80418fc":"There are 2 csv files in the current version of the dataset:\n","375891f2":"**> Naive Bayes**","d02c043f":"**Above results shows that the Decision Tree gave high accuracy as compared to the Naive bayes.**"}}