{"cell_type":{"88dbbcb9":"code","e364d684":"code","79fb64fe":"code","0eab8afc":"code","f7d7bd99":"code","3b2d2286":"code","f625cd5c":"code","da250a23":"code","d7597f95":"code","dad596f0":"code","5d1a7f8e":"code","c5318d4d":"code","ee4619a1":"code","040f69b6":"code","7a20122f":"code","67994f46":"markdown","27f5075a":"markdown","a8f51b7b":"markdown","f37d62c8":"markdown","54a41850":"markdown","c21199a9":"markdown","f493825c":"markdown","db6e0d90":"markdown","2bddfb74":"markdown"},"source":{"88dbbcb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e364d684":"! pwd","79fb64fe":"from keras.datasets import mnist","0eab8afc":"(x_train,y_train),(x_test,y_test) = mnist.load_data()","f7d7bd99":"print(x_train.shape,y_train.shape,x_test.shape,y_test.shape)","3b2d2286":"from matplotlib import pyplot as plt\nplt.imshow(x_train[11000])\nplt.show()","f625cd5c":"x_train = x_train.reshape(x_train.shape[0],28,28,1)\nx_test = x_test.reshape(x_test.shape[0],28,28,1)","da250a23":"y_train[0:5]","d7597f95":"from keras.utils import np_utils\ny_train  = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)","dad596f0":"y_train[0]","5d1a7f8e":"from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D\nfrom keras.optimizers import SGD\nfrom keras.models import Sequential","c5318d4d":"model = Sequential()\nmodel.add(Conv2D(32,kernel_size=(3,3),\n                activation='relu',\n                input_shape = (28,28,1)))\nmodel.add(Conv2D(64,kernel_size=(3,3),\n                activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n             optimizer=SGD(0.01),\n             metrics=['accuracy'])\nprint(model.summary())","ee4619a1":"batch_size=32\nepochs=10\nhistory = model.fit(x_train,y_train,\n                   batch_size=batch_size,\n                   epochs=epochs,\n                   verbose=1,\n                   validation_data = (x_test,y_test))\nscore = model.evaluate(x_test,y_test,verbose=0)\nprint(\"Test Loss:\",score[0])\nprint(\"Test Accuracy:\",score[1])","040f69b6":"hist_dict = history.history","7a20122f":"from matplotlib import pyplot as plt\n\nplt.plot(range(1,epochs+1),hist_dict['val_loss'])\nplt.plot(range(1,epochs+1),hist_dict['loss'])\nplt.xlabel('epochs')\nplt.ylabel('loss')","67994f46":"# HAND DIGIT RECOGNITION","27f5075a":"## plotting loss & accuracy","a8f51b7b":"The number shown was 6","f37d62c8":"## Create the Model","54a41850":"## Training","c21199a9":"## Using famous MNIST Dataset****","f493825c":"## Opening a random image","db6e0d90":"## Changing the shape of the data to (X,Y,1) ie., Gray Scale Images","2bddfb74":"## One-Hot Encode our target column"}}