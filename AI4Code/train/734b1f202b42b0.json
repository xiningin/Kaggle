{"cell_type":{"297f72a9":"code","f32c8cd3":"code","b2d745e0":"code","9982e207":"code","e2d5af88":"markdown"},"source":{"297f72a9":"!pip install python-vivid","f32c8cd3":"from itertools import product\n\nimport pandas as pd\nfrom sklearn.datasets import load_boston\n\nfrom vivid.core import AbstractFeature\nfrom vivid.out_of_fold import EnsembleFeature\nfrom vivid.out_of_fold.boosting import XGBoostRegressorOutOfFold, OptunaXGBRegressionOutOfFold, LGBMRegressorOutOfFold\nfrom vivid.out_of_fold.boosting.block import create_boosting_seed_blocks\nfrom vivid.out_of_fold.ensumble import RFRegressorFeatureOutOfFold\nfrom vivid.out_of_fold.kneighbor import KNeighborRegressorOutOfFold\nfrom vivid.out_of_fold.linear import RidgeOutOfFold\n\n\nclass BostonProcessFeature(AbstractFeature):\n    def call(self, df_source: pd.DataFrame, y=None, test=False):\n        out_df = pd.DataFrame()\n        n_cols = len(df_source.columns)\n        for a, b in product(range(n_cols), range(n_cols)):\n            out_df[f'sum_{a}_{b}'] = df_source[a] + df_source[b]\n        return out_df\n\n\nclass CopyFeature(AbstractFeature):\n    def call(self, df_source: pd.DataFrame, y=None, test=False) -> pd.DataFrame:\n        return df_source\n\nX, y = load_boston(return_X_y=True)\ntrain_df = pd.DataFrame(X)","b2d745e0":"\ncopy_feat = CopyFeature(name='copy', root_dir='.\/boston_stacking')\nprocess_feat = BostonProcessFeature(name='boston_base', root_dir='.\/boston_stacking')\nconcat_faet = [copy_feat, process_feat]\n\nsingles = [\n    XGBoostRegressorOutOfFold(name='xgb_simple', parent=concat_faet),\n    RFRegressorFeatureOutOfFold(name='rf', parent=concat_faet),\n    KNeighborRegressorOutOfFold(name='kneighbor', parent=concat_faet),\n    OptunaXGBRegressionOutOfFold(name='xgb_optuna', n_trials=20, parent=concat_faet),\n    # seed averaging block\n    create_boosting_seed_blocks(feature_class=XGBoostRegressorOutOfFold, prefix='xgb_', parent=concat_faet),\n    create_boosting_seed_blocks(feature_class=LGBMRegressorOutOfFold, prefix='lgbm_', parent=concat_faet),\n\n    # only processed feature\n    create_boosting_seed_blocks(feature_class=LGBMRegressorOutOfFold, prefix='only_process_lgbm_',\n                                parent=process_feat)\n]\nens = EnsembleFeature(name='ensumble', parent=singles)  # ensemble of stackings\n\n# create stacking models\nstackings = [\n    # ridge model has single models as input\n    RidgeOutOfFold(name='stacking_ridge', parent=singles, n_trials=10),\n    # xgboost parameter tuned by optuna\n    OptunaXGBRegressionOutOfFold(name='stacking_xgb', parent=singles, n_trials=100),\n]\nstacking_stacking_knn \\\n    = KNeighborRegressorOutOfFold(name='stacking_stacking_knn', parent=stackings)\nnaive_xgb = XGBoostRegressorOutOfFold(name='naive_xgb', parent=copy_feat)\n\nens_all = RidgeOutOfFold(name='all_ridge', parent=[*singles, *stackings, ens, stacking_stacking_knn, naive_xgb])","9982e207":"ens_all.fit(train_df, y)","e2d5af88":"fit all models recursively"}}