{"cell_type":{"68567fd8":"code","c653f9c6":"code","84ca3bad":"code","8d06aaaf":"code","0364f152":"code","5ce6ab8b":"code","de5d2f37":"code","aa03916a":"code","4d80712e":"code","f5fb943c":"code","1b7cbb5d":"code","e6f81e34":"code","defe83b7":"code","381f3696":"code","fdf2c9b0":"code","d17254c6":"code","93fcfb89":"markdown","42201ff2":"markdown","981b2baa":"markdown","93a40f7a":"markdown","d0c08b7d":"markdown","f358e4f2":"markdown","8c920f3b":"markdown","14a7f8a3":"markdown","41c87942":"markdown","a2830767":"markdown","0c9df734":"markdown","b7ca19c6":"markdown","ed2269ef":"markdown"},"source":{"68567fd8":"my_empty_list = []\nprint('empty list: {}, type: {}'.format(my_empty_list, type(my_empty_list)))","c653f9c6":"list_of_ints = [1, 2, 6, 7]\nlist_of_misc = [0.2, 5, 'Python', 'is', 'still fun', '!']\nprint('lengths: {} and {}'.format(len(list_of_ints), len(list_of_misc)))","84ca3bad":"my_list = ['Python', 'is', 'still', 'cool']\nprint(my_list[0])\nprint(my_list[3])","8d06aaaf":"coordinates = [[12.0, 13.3], [0.6, 18.0], [88.0, 1.1]]  # two dimensional\nprint('first coordinate: {}'.format(coordinates[0]))\nprint('second element of first coordinate: {}'.format(coordinates[0][1]))","0364f152":"my_list = [0, 1, 2, 3, 4, 5]\nmy_list[0] = 99\nprint(my_list)\n\n# remove first value\ndel my_list[0]\nprint(my_list)","5ce6ab8b":"languages = ['Java', 'C++', 'Go', 'Python', 'JavaScript']\nif 'Python' in languages:\n    print('Python is there!')","de5d2f37":"if 6 not in [1, 2, 3, 7]:\n    print('number 6 is not present')","aa03916a":"original = [1, 2, 3]\nmodified = original\nmodified[0] = 99\nprint('original: {}, modified: {}'.format(original, modified))","4d80712e":"original = [1, 2, 3]\nmodified = list(original)  # Note list() \n# Alternatively, you can use copy method\n# modified = original.copy()\nmodified[0] = 99\nprint('original: {}, modified: {}'.format(original, modified))","f5fb943c":"my_list = [1]\nmy_list.append('ham')\nprint(my_list)","1b7cbb5d":"my_list = ['Python', 'is', 'sometimes', 'fun']\nmy_list.remove('sometimes')\nprint(my_list)\n\n# If you are not sure that the value is in list, better to check first:\nif 'Java' in my_list:\n    my_list.remove('Java')\nelse:\n    print('Java is not part of this story.')","e6f81e34":"numbers = [8, 1, 6, 5, 10]\nnumbers.sort()\nprint('numbers: {}'.format(numbers))\n\nnumbers.sort(reverse=True)\nprint('numbers reversed: {}'.format(numbers))\n\nwords = ['this', 'is', 'a', 'list', 'of', 'words']\nwords.sort()\nprint('words: {}'.format(words))","defe83b7":"numbers = [8, 1, 6, 5, 10]\nsorted_numbers = sorted(numbers)\nprint('numbers: {}, sorted: {}'.format(numbers, sorted_numbers))","381f3696":"first_list = ['beef', 'ham']\nsecond_list = ['potatoes',1 ,3]\nfirst_list.extend(second_list)\nprint('first: {}, second: {}'.format(first_list, second_list))","fdf2c9b0":"first = [1, 2, 3]\nsecond = [4, 5]\nfirst += second  # same as: first = first + second\nprint('first: {}'.format(first))\n\n# If you need a new list\nsummed = first + second\nprint('summed: {}'.format(summed))","d17254c6":"my_list = ['a', 'b', 'ham']\nmy_list.reverse()\nprint(my_list)","93fcfb89":"## Updating values","42201ff2":"## `list.reverse()`","981b2baa":"## `sorted(list)`\nWhile `list.sort()` sorts the list in-place, `sorted(list)` returns a new list and leaves the original untouched:","93a40f7a":"## List are mutable","d0c08b7d":"Alternatively you can also extend lists by summing them:","f358e4f2":"## `list.append()`","8c920f3b":"## `list.sort()`","14a7f8a3":"## `list.extend()`","41c87942":"## Accessing values","a2830767":"You can get around this by creating new `list`:","0c9df734":"# Lists","b7ca19c6":"## Checking if certain value is present in list","ed2269ef":"## `list.remove()`"}}