{"cell_type":{"9d8a04c1":"code","bffaebeb":"code","32095cc3":"code","634844d3":"code","b54d7461":"code","e5325490":"code","734e664b":"code","a8726061":"code","4356c4fa":"code","eed567d7":"code","1a288ef9":"code","febbefd8":"code","3f53e799":"code","bdb34ee1":"code","ac4def45":"code","aff63886":"code","bce76d1a":"code","85bcb6e1":"code","cc63b1db":"code","9473fde2":"code","df73de7a":"code","82e4878b":"code","f8e31327":"code","42730190":"code","a1e42749":"code","6d0629c4":"code","ae30a733":"code","5e82179e":"code","afbab7b4":"code","c3edd405":"markdown","fb72f54f":"markdown","be181ebe":"markdown","b66482d5":"markdown","2b628885":"markdown","d55d264c":"markdown","14297618":"markdown","97ea785d":"markdown","ee05209a":"markdown","51b605ee":"markdown","58bb140b":"markdown"},"source":{"9d8a04c1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.stattools import acf,pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport seaborn as sns\nsns.set()\n\nfigsize = (20,7)\nfigsize2 = (20,5)\n\nimport os\ndirectory = '..\/input\/hourly-weather-surface-brazil-southeast-region\/'\nos.chdir(directory)\nimport make_dataset as mk","bffaebeb":"df_raw = pd.read_csv('southeast.csv')\n\nstations = ['A612']\nstart_date = '2006-11-01'\ndf = mk.make_dataset(stations, start_date, df_raw)\ndf_raw = None","32095cc3":"## adding covariables\ndf.date_time = pd.to_datetime(df.date_time)\ndf['hour'] = df.date_time.dt.hour\ndf['month'] = df.date_time.dt.month\ndf['year'] = df.date_time.dt.year\ndf['day_of_year'] = df.date_time.dt.day_of_year\ndf['weekofyear'] = df.date_time.dt.weekofyear\n\n## transforming start hour in 9, to use hour**3, some models are hierarchical so is necessary to keep hour**2 \ndf['hour_9'] = df['hour'].apply(lambda x: (x-9)%24)\ndf['hour_9**2'] = df['hour_9']**2\ndf['hour_9**3'] = df['hour_9']**3","634844d3":"# setting target variables to be easy to call later\ny1,y2,y3 = 'A612_prcp','A612_tmax','A612_tmin'# 'A612 - total precipitation (mm)' \"max temp\" \"min temp\"","b54d7461":"def two_line_plot(df, x1, x2, freq = 'M', figsize = (20,5), tittle = ''):\n    temp = df[['date_time',x1,x2]]\n    temp.index = temp.date_time\n    temp = temp.resample(freq).mean()\n    temp.reset_index(inplace=True)\n    plt.figure(figsize = figsize)\n    _ = sns.lineplot(x = temp['date_time'],y = temp[x1]).set_title(tittle,fontsize=20)\n    _ = sns.lineplot(x = temp['date_time'],y = temp[x2])\n    \ndef two_hist_plot(df, x1, x2, freq = 'M', figsize = figsize2, tittle = ''):\n    temp = df[['date_time',x1,x2]]\n    temp.index = temp.date_time\n    temp = temp.resample(freq).mean()\n    temp.reset_index(inplace=True)\n    plt.figure(figsize = figsize)\n    _ = sns.histplot(df[x1],color = 'red').set_title(tittle,fontsize=20)\n    _ = sns.histplot(df[x2]) \n\ndef one_line_plot(df, x1, freq = 'M', figsize = figsize2, tittle = ''):\n    temp = df[['date_time',x1]]\n    temp.index = temp.date_time\n    temp = temp.resample(freq).mean()\n    temp.reset_index(inplace=True)\n    plt.figure(figsize = figsize)\n    _ = sns.lineplot(x = temp['date_time'],y = temp[x1]).set_title(tittle,fontsize=20)\n\ndef one_hist_plot(df, x1, freq = 'M', figsize = figsize2, tittle = ''):\n    temp = df[['date_time',x1]]\n    temp.index = temp.date_time\n    temp = temp.resample(freq).mean()\n    temp.reset_index(inplace=True)\n    plt.figure(figsize = figsize)\n    _ = sns.histplot(df[x1],color = 'red').set_title(tittle,fontsize=20)","e5325490":"plt.figure(figsize=figsize2)\ntittle = 'Hour`s Boxplots'\n_ = sns.boxplot(data=df[df.month == 6],y = y2, x='hour_9').set_title(tittle,fontsize=20)","734e664b":"# change y for y1 and y2 to se other results\nplt.figure(figsize=figsize)\ntittle = 'Months`s Boxplots'\n_ = sns.boxplot(data=df,y = y2, x='month').set_title(tittle,fontsize=20)","a8726061":"plt.figure(figsize=figsize2)\ntittle = 'Year`s Boxplots'\n_ = sns.boxplot(data=df,y = y2, x='year').set_title(tittle,fontsize=20)","4356c4fa":"two_line_plot(df,y2,y3,freq='W')","eed567d7":"plt.figure(figsize=figsize)\ntittle = 'Maximum and Minimum Temperature Histograms'\n_ = sns.histplot(df[y2],color = 'red').set_title(tittle,fontsize=20)\n_ = sns.histplot(df[y3])\n## plot have these holes because we just have one number after the .","1a288ef9":"tittle = 'week x year x precipitation'\nplt.figure(figsize = figsize)\ntemp = df[['weekofyear','year',y1]]\ntemp = temp.groupby(['year','weekofyear']).sum()\ntemp.reset_index(inplace=True)\ntemp = temp.pivot(index='year',columns='weekofyear',values=y1)\n_ = sns.heatmap(temp,cmap=\"flare\").set_title(tittle,fontsize=20)\n## in summer we have more rain","febbefd8":"tittle = 'week x year x precipitation'\nplt.figure(figsize = figsize)\nsns.histplot(df[df[y1]>0][y1],bins=20).set_title(tittle,fontsize=20)\n## dont rain most of the days thats why we see the zeros","3f53e799":"df.columns","bdb34ee1":"x1 = 'A612_temp'#'A612 - air temperature - dry bulb (\u00b0c)'\ntittle = x1\nplt.figure(figsize=figsize)\none_line_plot(df,x1 = x1, freq='M', tittle = tittle)\none_hist_plot(df,x1 = x1, freq='M', tittle = tittle)","ac4def45":"pd.read_csv('columns_description.csv')","aff63886":"x1 = 'A612_hmax'#'A612 - relative humidity max. in the previous hour (%)'\nx2 = 'A612_hmin'#'A612 - relative humidity min. in the previous hour (%)'\ntittle = 'Maximum and Minimum umidade rel. max. na hora ant.'\nplt.figure(figsize=figsize)\ntwo_line_plot(df,x1 = x1,x2 =x2 ,freq='M', tittle = tittle)\ntwo_hist_plot(df,x1 = x1,x2 =x2 ,freq='M', tittle = tittle)","bce76d1a":"plt.figure(figsize = (20,20))\nsns.heatmap(df.iloc[:,1:-6].corr(),cmap=\"YlGnBu\",vmin=0,annot=True)\n# can see that will be necessary select the variables because of multicolinearity, or a PCA or a \"AR PCA\"","85bcb6e1":"plt.figure(figsize = (20, 20)) \n_ = sns.pairplot(df.iloc[:,2:-9])\n# we can see the multicolinearity again","cc63b1db":"from statsmodels.regression.linear_model import OLS\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom sklearn.model_selection import train_test_split\nfrom metrics import create_metrics","9473fde2":"def make_dummies(series):\n    df = pd.get_dummies(series,drop_first=True)\n    df.columns = list(map(lambda x: '{}_'.format(series.name) + str(x),list(df.columns)))\n    return df","df73de7a":"def ols_model(x, y, codename=None):\n    if codename == None:\n        codename = f'{x.shape[1]}_{y.name.split(\"_\")[1]}'\n        \n    x_train, x_test = x[df_model.date_time<'01-01-2018'], x[df_model.date_time>='01-01-2018']\n    y_train, y_test = y[df_model.date_time<'01-01-2018'], y[df_model.date_time>='01-01-2018']\n    \n    model = OLS(y_train,x_train)\n    fit = model.fit()\n    y_pred = fit.predict(x_test)\n    \n    metrics = create_metrics(y_test,y_pred)\n    return {'y_pred': y_pred, 'fit': fit, 'model':model, 'metrics':metrics, 'codename': codename}\n","82e4878b":"df_model = df[df.date_time < '01-01-2020']","f8e31327":"_y_ = df_model[[y1,y2,y3]]\nx = df_model.iloc[:,-7:]\nx['hour'] = df_model.hour\nx = x.drop(['day_of_year','weekofyear','year'],axis=1)","42730190":"x = pd.concat([x,make_dummies(x['month'])],axis=1)\nx.drop(['month', 'hour'],axis=1,inplace=True)\nx['intercept'] = 1","a1e42749":"model = ols_model(x,_y_.iloc[:,1])","6d0629c4":"residuals = model['fit'].resid\nplt.xlim(-10,10)\n_ = sns.histplot(residuals)","ae30a733":"_ = plot_acf(residuals)\n_ = plot_pacf(residuals)","5e82179e":"df_plot = pd.DataFrame(df_model.date_time[:len(residuals)])\ndf_plot['resid'] = residuals\ndf_plot.index = df_plot.date_time\ndf_plot.drop('date_time',inplace=True,axis=1)\ndf_plot = df_plot.resample('M').mean()","afbab7b4":"_ = df_plot.plot()","c3edd405":"<a href=\"https:\/\/ibb.co\/ZccxLYV\"><img src=\"https:\/\/i.ibb.co\/KVVW0LX\/A612-Station.png\" alt=\"A612-Station\" border=\"0\"><\/a>  \nlat -20.2666, long -40.3","fb72f54f":"### Importing Libs","be181ebe":"### Reading data\nDataset 0 has 46 columns, for the Exploratory Data Analysis we just need the Index and the Maximum Temperature from Station A612.  \nAll other columns are dummies just needed to make the autoregressive models. To get the month and year information we will use methods from Pandas","b66482d5":"## Conclusions\n#### EDA:\n1. year sazonality\n2. hour transformation\n3. multicolinarity\n4. 2020 unregular year\n5. outliers (possibles errors) created by cleanning NAs(will be replaced in the future)\n\n#### Ordinary Least Squares\n1. Errors look like are normal (not tested)\n2. Autoregressive information in the regression residuals\n\nmetric|value\n---|---\nmean abs deviation| 2.907495302172599\nmean absolute error| 1.6822048040370292\nmedian abs deviation| 2.400000000000002\nmedian absolute error| 1.398029803702002\n\nThe OLS model have a decent fit with just non-stocastic covariables, but we still have information in the data that we will try to explained using autoregressive information and adding extra covariables.","2b628885":"---\n## 4.  Errors from Linear Regression","d55d264c":"#### Objectives from this notebook:\n1. understand the data\n    1. define Y - Target variables (min max temperature and rain)\n    1. descriptive\n    2. understand basic sazonalities\n    1. understand relations between variables\n    2. check for outliers\n2. Understand autoregressive structures\n    1. Make linear models using non stocastic variables\n    2. ACF and PACF from linear regression errors\n    3. Check for sazonalities in errors\n\n### Proposal notebook structure:\n1. Imports and adding non-stocastic covariables\n<!-- 2. Descriptive about the dataframe -->\n2. Y - Targets variables descriptive\n    1. year, month and day Boxplots\n    2. Lineplot with min and max temperatures\n    3. histogram plot with rain\n3. X\n    1. Histogram\n    2. Lineplots\n    4. Crosstable just with target variables\n4. Errors from Linear Regression\n    1. First model: OLS with non-stocastic variables (month dummies and transformed hour)\n    2. Analyse the errors from the linear model\n    3. Acf and pacf from errors\n    4. Erros sazonality","14297618":"# EDA - Exploratory Data Analysis\nThis notebook just for Descriptive Analysis to make inference about the dataset ES_0 (collected info from cimate station A612). \nWith those inferences we will proceed to make our first models.","97ea785d":"## Min Max temperature","ee05209a":"---\n## 2. Y - Target variables descriptive analysis","51b605ee":"---\n## Rain","58bb140b":"---\n## 3. X - Covariables\nIf you want to change a variable to see the graph copy from df.columns output and paste in x1 or x2 variables\n\n#### Min max variables\n1. atmospheric pressure min max\n2. temperatura orvalho min e max\n3. humidity min e max\n\n#### Single variables\n1. air temperature - bulbo seco\n2. air temperature - dew\n3. wind direction\n4. wind max gust\n5. wind speed\n6. radiation"}}