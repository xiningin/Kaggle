{"cell_type":{"4d717b73":"code","f23984e2":"code","065ed232":"code","23f07299":"code","837eda15":"code","9ab8945c":"code","89be0755":"code","32d3783e":"code","6d4aa7be":"code","6fcaa537":"code","ae696ddc":"code","c99b48fd":"code","8261079e":"code","973195bd":"code","307dc159":"code","33f9d4e7":"code","1fd11957":"code","d70b70e9":"code","30426bd3":"code","0ab203c2":"code","630407d0":"code","3b8b7b78":"code","dba3be09":"code","964da6b8":"code","a6d20015":"code","91fb9fd1":"code","7b1618f1":"code","998c449e":"code","7350096a":"code","21cde7cc":"code","ecffcc95":"code","0181f5ab":"code","f9cf01ee":"code","a8fc53ab":"code","d29c8bdb":"code","fd988308":"code","406e6871":"code","5af07ee8":"code","bedd420a":"code","a46b6b7a":"code","1eddb1a4":"code","a3b80a2f":"markdown","9114f1ba":"markdown","01323fe9":"markdown","dd7fcfa7":"markdown","8f6a276f":"markdown","0e0b63cd":"markdown","4125894f":"markdown","3d694087":"markdown","a497b83d":"markdown","563e4ba1":"markdown","23aa01b0":"markdown","d9a4011a":"markdown","89796b33":"markdown","ec3293fa":"markdown","b42bcbeb":"markdown","8c09f56f":"markdown","f92766d1":"markdown","fcfdffcc":"markdown","5b54260f":"markdown","813b74f9":"markdown"},"source":{"4d717b73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f23984e2":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings('ignore')","065ed232":"df = pd.read_csv(\"\/kaggle\/input\/used-car-auction-prices\/car_prices.csv\",nrows=400000)","23f07299":"df.head()","837eda15":"df.shape","9ab8945c":"df.info()","89be0755":"df.isna().sum().sort_values(ascending=False)","32d3783e":"categorical_columns = []\ncontinous_columns = []\ndiscrete_columns = []\n\nfor x in df.columns:\n  if df[x].dtypes == 'O':\n    categorical_columns.append(x)\n  else:\n    if df[x].nunique()>20:\n      continous_columns.append(x)\n    else:\n      discrete_columns.append(x)\n\n","6d4aa7be":"categorical_columns","6fcaa537":"continous_columns","ae696ddc":"discrete_columns","c99b48fd":"for x in continous_columns:\n  df[x].fillna(df[x].median(),inplace=True)","8261079e":"for x in categorical_columns:\n  df[x].fillna(df[x].mode()[0],inplace=True)","973195bd":"df.isna().sum().sort_values(ascending=False)","307dc159":"df[continous_columns].plot(kind='box',subplots=True,layout=(2,3),figsize=(14,8))\nplt.show()","33f9d4e7":"# function to return index for column that have data points greater than given limit\ndef outs(col,limit):\n    index = []\n    index = df[df[col]>limit].index\n\n    return index","1fd11957":"# This index have data points that are very far away from group of data points\n# Replacing this points with value near to the cluster\nind = outs('odometer',900000)\nind","d70b70e9":"value = round(np.percentile(df.odometer,99),1)\nvalue","30426bd3":"df.loc[ind,'odometer'] = value","0ab203c2":"# This index have data points that are very far away from group of data points\n# Replacing this points with value near to the cluster\nind = outs('mmr',100000)\nind","630407d0":"value = round(np.percentile(df.mmr,99),1)\nvalue","3b8b7b78":"df.loc[ind,'mmr'] = value","dba3be09":"# This index have data points that are very far away from group of data points\n# Replacing this points with value near to the cluster\nind = outs('sellingprice',100000)\nind","964da6b8":"value = round(np.percentile(df.sellingprice,99),1)\nvalue","a6d20015":"df.loc[ind,'sellingprice'] = value","91fb9fd1":"categorical_columns","7b1618f1":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor x in categorical_columns:\n  df[x] = le.fit_transform(df[x])\n","998c449e":"X = df.copy()","7350096a":"X.drop('sellingprice',inplace=True,axis=1)","21cde7cc":"Y = df.sellingprice","ecffcc95":"from sklearn.ensemble import ExtraTreesRegressor\net = ExtraTreesRegressor()\net.fit(X,Y)","0181f5ab":"zip(et.feature_importances_,X.columns)","f9cf01ee":"imp_col = pd.DataFrame(zip(et.feature_importances_,X.columns),columns=['Importance','Columns'])","a8fc53ab":"imp_col.sort_values(by='Importance',ascending=False).head()","d29c8bdb":"X = X[['mmr','year','condition','odometer','vin']]","fd988308":"X","406e6871":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, \nrandom_state=10)","5af07ee8":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train, Y_train)\nY_pred=lr.predict(X_test)","bedd420a":"# Evaluation\nfrom sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\nimport numpy as np\n\nlracc = r2_score(Y_test,Y_pred)\nprint('Score ->',lracc)\n\nlrmae = mean_absolute_error(Y_test,Y_pred)\nprint('MAE ->',lrmae)\n\nlrmse = mean_squared_error(Y_test,Y_pred)\nprint('MSE ->',lrmse)\n\nlrrmse = np.sqrt(mean_squared_error(Y_test,Y_pred))\nprint('RMSE ->',lrrmse)\n\nadjusted_r_squared = 1 - (1-lracc)*(len(Y)-1)\/(len(Y)-X.shape[1]-1) \nprint('Adjusted R2 ->',adjusted_r_squared)","a46b6b7a":"sns.scatterplot(x=Y_test,y=Y_pred)","1eddb1a4":"sns.distplot(Y_test-Y_pred)","a3b80a2f":"selling price","9114f1ba":"Distplot of residuals","01323fe9":"Filling missing values of categorical columns with mode\n","dd7fcfa7":"# Read Data","8f6a276f":"Filling missing values as per column data type. \\\nCategorical columns -> Mode \\\nContinous columns -> Mean\/Median \\\nDiscreate columns -> Mode","0e0b63cd":"# Checking Null Values","4125894f":"# Data Inspection","3d694087":"# Label Encoding","a497b83d":"# Checking Outliers","563e4ba1":"# Linear Regression","23aa01b0":"# Model Building","d9a4011a":"Outlier handling Completed","89796b33":"Odometer Column","ec3293fa":"# Import Libraries\n\n","b42bcbeb":"Filling missing values of continous columns with median","8c09f56f":"No missing values, data is clean now","f92766d1":"mmr column","fcfdffcc":"Selecting First 5 columns","5b54260f":"Scatter plot of Actual vs Predicted values","813b74f9":"# Feature Selection"}}