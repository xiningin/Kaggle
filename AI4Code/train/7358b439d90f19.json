{"cell_type":{"460ce56f":"code","a1c38e7c":"code","714806aa":"code","3585683b":"code","50d1261d":"code","4055c46f":"code","28738ff4":"code","75ba1671":"code","174a541c":"code","ae18daf6":"code","2d5a2aac":"code","6652ea21":"code","020358b3":"code","2f576a44":"code","1cc50a06":"code","44675c9e":"code","3c614104":"code","17d17d24":"code","44f6d95a":"code","c09b6c7d":"code","32565309":"code","dece8443":"code","8d19e803":"code","5e6b77f5":"code","1eeda1ea":"code","0e94c812":"code","4fd12cd9":"code","00d0d564":"code","6ca01dff":"markdown","66b941f7":"markdown","9f34620c":"markdown","8a1c02dc":"markdown","72e921e0":"markdown","5fc4446a":"markdown","9fe06f98":"markdown","876151c6":"markdown","00d4b20f":"markdown","f6f8ae05":"markdown","47888385":"markdown"},"source":{"460ce56f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport scipy as sp\nimport sklearn\n\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import norm, skew\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import neighbors\nfrom sklearn.metrics import f1_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import neural_network\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nimport datetime\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.metrics import confusion_matrix\npd.set_option('display.max_columns', 500)\nimport warnings\nwarnings.filterwarnings('ignore')","a1c38e7c":"dataset = pd.read_csv('..\/input\/Pokemon.csv')\ndataset.head()","714806aa":"duplicate_nums = pd.DataFrame(dataset['#'].value_counts())\nduplicate_nums = duplicate_nums[duplicate_nums['#'] > 1]\nduplicate_nums.reset_index(level=0, inplace=True)\nduplicate_entries = dataset[dataset['#'].isin(duplicate_nums['index'])]\nmega_evolution = duplicate_entries[duplicate_entries['Name'].str.contains('Mega')]\nmega_evolution","3585683b":"dataset = pd.merge(dataset, mega_evolution[['Name']], on=['Name'], how='left', indicator='Mega_Flag')\ndataset['Mega_Flag'] = np.where(dataset.Mega_Flag == 'both', 1, 0)\ndataset.head()","50d1261d":"dataset.rename(columns={'Type 1': 'Type_1', 'Type 2': 'Type_2'}, inplace=True)\nq1a = pd.value_counts(dataset.Type_1).to_frame().reset_index()\nq1b = pd.value_counts(dataset.Type_2).to_frame().reset_index()\nq1a.rename(columns={'Type_1': 'Type'}, inplace=True)\nq1b.rename(columns={'Type_2': 'Type'}, inplace=True)\nq1 = q1a.append(q1b)","4055c46f":"#The value counts function doesn't account for NaNs\nq1.fillna(0)","28738ff4":"q1 = q1.groupby(['index']).sum()","75ba1671":"q1.reset_index(level=0, inplace=True)\nq1 = q1.sort_values(by=['Type'],ascending = False)","174a541c":"ax = sns.catplot(x=\"Type\",y=\"index\", data= q1)\nax.set(xlabel='Number of Pokemon', ylabel='Pokemon Type')\nplt.show()","ae18daf6":"dataset['Dual_Type']  = np.where(dataset.Type_2.isnull(), \"No\", \"Yes\")\ndataset.head(10)","2d5a2aac":"q2 = pd.value_counts(dataset.Dual_Type).to_frame().reset_index()\nq2.set_index('index')","6652ea21":"q2.plot(kind = \"pie\", y=\"Dual_Type\", autopct='%1.1f%%',labels=q2['index'])","020358b3":"q3a = dataset[['Type_1','Generation','Legendary','Mega_Flag']]\nq3b = dataset[['Type_2','Generation','Legendary','Mega_Flag']]\nq3a.rename(columns={'Type_1': 'Type'}, inplace=True)\nq3b.rename(columns={'Type_2': 'Type'}, inplace=True)\nq3 = q3a.append(q3b)\nq3.head()","2f576a44":"q3 = q3.groupby(['Type','Generation']).count()[['Legendary']].reset_index()\nq3.head()","1cc50a06":"g = sns.FacetGrid(q3, col=\"Generation\",height=4, aspect=4, col_wrap=1)\ng = g.map(plt.bar,'Type','Legendary',color=['lightgreen', 'black', 'darkslateblue', 'yellow', 'pink'\n                                            ,'brown','red','mediumpurple','indigo','limegreen','khaki',\n                                           'lightcyan','lightgrey','purple','deeppink','darkgoldenrod',\n                                           'lightslategrey','dodgerblue'])\ng.add_legend()\nplt.show()","44675c9e":"q3a = dataset[['Type_1','Generation','Legendary','Mega_Flag']]\nq3b = dataset[['Type_2','Generation','Legendary','Mega_Flag']]\nq3a.rename(columns={'Type_1': 'Type'}, inplace=True)\nq3b.rename(columns={'Type_2': 'Type'}, inplace=True)\nq3 = q3a.append(q3b)\nq3.head()","3c614104":"q3['Legendary'].value_counts()","17d17d24":"q3 = q3.loc[q3.Legendary]","44f6d95a":"q3 = q3.groupby(['Type']).count()[['Legendary']].reset_index()\nq3.head()","c09b6c7d":"q3 = q3.sort_values(by=['Legendary'],ascending = False)\nax = sns.catplot(x=\"Legendary\",y=\"Type\", data= q3)\nax.set(xlabel='Number of Legendary Pokemon', ylabel='Pokemon Type')\nplt.show()","32565309":"q3a = dataset[['Type_1','Generation','Legendary','Mega_Flag']]\nq3b = dataset[['Type_2','Generation','Legendary','Mega_Flag']]\nq3a.rename(columns={'Type_1': 'Type'}, inplace=True)\nq3b.rename(columns={'Type_2': 'Type'}, inplace=True)\nq3 = q3a.append(q3b)\nq3.head()","dece8443":"q3 = pd.DataFrame(q3.loc[q3['Mega_Flag'] == 1])\nq3.head()","8d19e803":"q3 = q3.groupby(['Type']).count()[['Legendary']].reset_index()\nq3.head()","5e6b77f5":"q3 = q3.sort_values(by=['Legendary'],ascending = False)\nax = sns.catplot(x=\"Legendary\",y=\"Type\", data= q3)\nax.set(xlabel='Number of Pokemon that can Mega Evolve', ylabel='Pokemon Type')\nq3.head()","1eeda1ea":"q4raw_1 = dataset[['Type_1','HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']]\nq4raw_2 = dataset[['Type_2','HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']]\nq4raw_1.rename(columns={'Type_1': 'Type'}, inplace=True)\nq4raw_2.rename(columns={'Type_2': 'Type'}, inplace=True)\nq4raw = q4raw_1.append(q4raw_2)\nq4raw.rename(columns={'Sp. Atk': 'Special_Attack'}, inplace=True)\nq4raw.rename(columns={'Sp. Def': 'Special_Defense'}, inplace=True)\nq4raw.head()","0e94c812":"q4raw = q4raw[q4raw.Type.notnull()]\nq4raw.shape","4fd12cd9":"q4melt = pd.melt(q4raw, id_vars = ['Type'], value_vars = ['HP', 'Attack','Defense','Special_Attack','Special_Defense','Speed'])\nq4melt.head()","00d0d564":"q4melt.rename(columns={'variable': 'Stat_Type'}, inplace=True)\nq4melt.rename(columns={'value': 'Stat_Value'}, inplace=True)\nsns.set()\ng = sns.catplot(x = \"Stat_Type\", y = \"Stat_Value\", col = \"Type\", data = q4melt, kind = \"violin\", col_wrap = 1, aspect = 3)\nplt.grid(True)","6ca01dff":"Analysis:\n\nWhen it comes to Legendaries and Mega Evolutions, the Psychic and Dragon type Pokemon are more abundant while they are further down in the popularity when those filters are not applied","66b941f7":"Analysis:\n\nGeneration 1 has a lot of Poison Pokemon which is not in abundance in the remaining generations, this could be attributed to a lot of dual typings, Pokemon like the Bulbasaur line, The Paras line, The Bellsprout line, The Oddish line all have a Grass\/Poison dual typing. Even a Ghost pokemon like the Gastly line has the dual typing with Poison \n\nThe Dark and Steel type Pokemon have only been introduced from the second generation onwards, hence the low number of these Pokemon are present in Generation 1.. In case you were wondering why there are still those types of Pokemon in Generation 1, Pokemon like the Magnemite line were Pure Electric converted into Electric\/Steel in the later generations","9f34620c":"Question 2: Single Type\/Dual Type Pokemon Count? ","8a1c02dc":"Create a mega flag in the main dataset","72e921e0":"On the speed front, the hypothesis seems to be correct as the rock and steel pokemon have median speed below 50. Also, the electric pokemon have a median speed close to 100\n\nIn terms of bulk, the hypothesis is also correct, in fact, the defense of steel pokemon even rises to 250+ (courtesy of Mega Steelix)\n\nThe initial hypothesis is a bit off in terms of the water and fire pokemon's special attack because although fire pokemon have a higher median special attack than the rest of the special pokemon, the same cannot be said for water pokemon. Take Kingler for example, he can learn surf but that doesn't mean his special attack is high. There are also too many water pokemon to make this generalization.","5fc4446a":"Alright, time for some Exploratory Data Analysis on this data","9fe06f98":"Examining the dataset","876151c6":"Question 4: Stat Distributions\n\nWithout looking at the data I am guessing that Rock, Steel and Ground types will be bulky and slow which means they might have good defenses and slow speed. Another hypothesis is Electric Pokemon will be fast and will be good at special attack. One more thing I can think of is that Fire and Water Pokemon will have the cliched moves like Flamethrower and Surf so they will be special attackers too as it makes sense in the Pokemon Games. Let's analyze if these hypothesis is correct","00d4b20f":"Alright, the concept of Mega Evolutions seems to be interesting:\nThere are two ways to flag the mega evolution pokemon\n(a) Check if Mega is in the name (Bad idea - Meganium also has Mega in the name)\n(b) Filter out cases where the Pokemon number is the same and then do the first check","f6f8ae05":"Question 3: Based on Generation, Legendary, Megas, which type is more popular?","47888385":"Question 1: Which is the most\/least popular Pokemon type?"}}