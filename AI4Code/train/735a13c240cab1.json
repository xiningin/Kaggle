{"cell_type":{"da74fbbc":"code","1536abed":"code","3e9a9928":"code","b94858d7":"code","579eab52":"code","2499e751":"code","72a5b8db":"code","beb50267":"code","f09b5b05":"code","59ed1fd3":"code","35d2172d":"code","61781b3d":"code","5865139c":"code","d1580bd0":"code","1b0ab2e3":"code","4b96566c":"code","fca1c296":"code","4ef7cfe0":"code","3c92f4cc":"code","cc02fd13":"code","1fd9a03b":"code","9066035a":"code","e2d6c59d":"code","c7203ebb":"code","d5aefc2c":"code","ae362636":"code","5a1b0298":"code","e4fb485f":"code","2fd35e07":"code","72424dbe":"code","47f95a9b":"code","a33ddae5":"code","e754645e":"code","c4a0746f":"code","76411640":"code","36e8a1d1":"code","0b8b7198":"markdown","94c2dca7":"markdown","d0007dd8":"markdown","696b6799":"markdown","a6276552":"markdown","d52ddc50":"markdown","37aff608":"markdown","92cfd13f":"markdown","9a193d42":"markdown","6078d8dc":"markdown","71c1c5fa":"markdown","65ac7d93":"markdown","3b1af15b":"markdown","47883a13":"markdown","18b44f1a":"markdown"},"source":{"da74fbbc":"import numpy as np \nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.float_format', lambda x: '%.3f' % x)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1536abed":"wids_train = pd.read_csv('\/kaggle\/input\/widsdatathon2022\/train.csv')\nwids_train.info()","3e9a9928":"# plot\nwids_train['Year_Factor'].value_counts(normalize = True).sort_values().plot(kind='bar', figsize=(10,4), rot=0)\n\nplt.xlabel(\"Year Factor\", labelpad=10, fontsize=20)\nplt.ylabel(\"Percent of data\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"Percent of data belonging to each year in the train set\", y=1.02, fontsize=20)","b94858d7":"wids_test = pd.read_csv('\/kaggle\/input\/widsdatathon2022\/test.csv')\n# plot\nwids_test['Year_Factor'].value_counts(normalize = True).sort_values().plot(kind='bar', figsize=(10,4), rot=0)\n\nplt.xlabel(\"Year Factor\", labelpad=10, fontsize=20)\nplt.ylabel(\"Percent of data\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"Percent of data belonging to each year in the test set\", y=1.02, fontsize=20)","579eab52":"plt.figure(figsize = (15,6))\ndf = wids_train[wids_train['site_eui'] <= 200]\nsns.boxplot(x = df['Year_Factor'], y= df['site_eui'])\nplt.xlabel(\"Year Factor\", labelpad=10, fontsize=20)\nplt.ylabel(\"site eui\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"Year wise site eui\", y=1.02, fontsize=20)","2499e751":"fig = px.histogram(wids_train, x='site_eui', color='Year_Factor')\nfig.update_layout(title_text='Year wise distribution of site energy usage', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","72a5b8db":"# plot\nwids_train['State_Factor'].value_counts(normalize = True).sort_values().plot(kind='bar', figsize=(10,4), rot=0)\n\nplt.xlabel(\"State Factor\", labelpad=10, fontsize=20)\nplt.ylabel(\"Percent of data\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"Percent of data belonging to each state in the train set\", y=1.02, fontsize=20)","beb50267":"# plot\nwids_test['State_Factor'].value_counts(normalize = True).sort_values().plot(kind='bar', figsize=(10,4), rot=0)\n\nplt.xlabel(\"State Factor\", labelpad=10, fontsize=20)\nplt.ylabel(\"Percent of data\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"Percent of data belonging to each state in the test set\", y=1.02, fontsize=20)","f09b5b05":"plt.figure(figsize = (15,6))\ndf = wids_train[wids_train['site_eui'] <= 200]\nsns.boxplot(x = df['State_Factor'], y= df['site_eui'])\nplt.xlabel(\"State Factor\", labelpad=10, fontsize=20)\nplt.ylabel(\"site eui\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"State wise site eui\", y=1.02, fontsize=20)","59ed1fd3":"wids_train.groupby('State_Factor')['site_eui'].describe()","35d2172d":"fig = px.histogram(wids_train, x='site_eui', color='State_Factor')\nfig.update_layout(title_text='State wise distribution of site energy usage', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","61781b3d":"plt.figure(figsize = (15,6))\nsns.boxplot(x = wids_train['building_class'], y= wids_train['site_eui'])\nplt.xlabel(\"Building Type\", labelpad=10, fontsize=20)\nplt.ylabel(\"site eui\", labelpad=10, fontsize=20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.grid()\nplt.title(\"Building type wise site eui\", y=1.02, fontsize=20)","5865139c":"wids_train['facility_type'].unique()","d1580bd0":"temp = wids_train[['building_class', 'facility_type', 'site_eui']]\ntemp_com = temp[temp['building_class'] == 'Commercial']\ntemp_com_group = temp_com.groupby(\"facility_type\")['site_eui'].agg('median').reset_index().sort_values(by ='site_eui', ascending = False).head(10)\ntemp_com_group\nfig = px.bar(temp_com_group, x=\"facility_type\", y=\"site_eui\")\nfig.update_layout(title_text='Top 10 commercial facilities that have high site_eui', \n                  title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\n\nfig.show()","1b0ab2e3":"temp_res = temp[temp['building_class'] == 'Residential']\ntemp_res_group = temp_res.groupby(\"facility_type\")['site_eui'].agg('median').reset_index().sort_values(by ='site_eui', ascending = False)\nfig = px.bar(temp_res_group, x=\"facility_type\", y=\"site_eui\")\nfig.update_layout(title_text='Residential facilities that have high site_eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","4b96566c":"wids_train['floor_area'].describe()","fca1c296":"fig = px.scatter(wids_train, x=\"floor_area\", y=\"site_eui\", trendline=\"ols\", color = 'building_class')\nfig.update_layout(title_text='floor_area wr.t site eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","4ef7cfe0":"# categorize the floor area based on above statistics\nwids_train['floor_area_cat'] = pd.cut(wids_train['floor_area'], bins = [900,10000,50000,100000, 500000, 800000], \n                                labels = ['upto_10K', '10K-50K','50K-100K', '100K-500K', 'above_500K'])\n\ntemp = wids_train[['floor_area_cat', 'site_eui']]\n\ndf = temp.groupby(\"floor_area_cat\")['site_eui'].agg('median').reset_index().sort_values(by ='site_eui', ascending = False)\nfig = px.bar(df, x=\"floor_area_cat\", y=\"site_eui\")\nfig.update_layout(title_text='Median site_eui w.r.t floor area in square feet', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","3c92f4cc":"# wids_train['year_built'] = pd.to_datetime(wids_train['year_built'])\ntemp_year_group = (wids_train.query('year_built >=1950')).groupby(\"year_built\")['site_eui'].agg('median').reset_index()#.sort_values(by ='site_eui', ascending = False)\ntemp_year_group['year_built'] = temp_year_group['year_built'].astype(str)\nfig = px.line(temp_year_group, x=\"year_built\", y=\"site_eui\")\nfig.update_layout(title_text='Median site eui of building built in last 50 years', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","cc02fd13":"temp = wids_train.groupby(\"energy_star_rating\")[\"site_eui\"].agg('median').reset_index()\nfig = px.scatter(temp, x=\"energy_star_rating\", y=\"site_eui\")\nfig.update_layout(title_text='Median site eui of building when compared with building rating', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","1fd9a03b":"fig = px.scatter(wids_train, x=\"energy_star_rating\", y=\"floor_area\")\nfig.update_layout(title_text='How does energy star rating varies with floor area', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","9066035a":"# wids_train['year_built'] = pd.to_datetime(wids_train['year_built'], format = '%Y', errors = 'coerce')\n\nfig = px.scatter(wids_train, x=\"energy_star_rating\", y=\"site_eui\", color = 'building_class')\nfig.update_layout(title_text='How does energy star rating varies with bulding class', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","e2d6c59d":"fig = px.scatter(wids_train.query('ELEVATION >= 0'), x=\"ELEVATION\", y=\"site_eui\", trendline=\"ols\")\nfig.update_layout(title_text='Elevation wr.t site eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","c7203ebb":"temp_min = wids_train[['State_Factor','january_min_temp', 'february_min_temp', 'march_min_temp', 'april_min_temp',\n       'may_min_temp', 'june_min_temp', 'july_min_temp', 'august_min_temp', 'september_min_temp',\n       'october_min_temp', 'november_min_temp','december_min_temp']].set_index('State_Factor')\ndf_temp_min = temp_min.unstack().reset_index().rename(columns = {0:'temp_min', 'level_0': 'month'})\n\nstatewise_min_temp = df_temp_min.groupby(['month', 'State_Factor'])['temp_min'].agg('median').reset_index()\n\n# parse the month column\nmonth = ['january', 'february', 'march', 'april','may', 'june', \n         'july', 'august', 'september','october', 'november','december']\nstatewise_min_temp['month'] = statewise_min_temp['month'].apply(lambda x: x.split('_')[0])\nstatewise_min_temp['month'] = pd.Categorical(statewise_min_temp['month'], categories = month, ordered = True)\nstatewise_min_temp.sort_values(by = 'month', inplace=True)","d5aefc2c":"fig = px.line(statewise_min_temp, x=\"month\", y=\"temp_min\", color = 'State_Factor')\nfig.update_layout(title_text='Statewise yearly minimum temperature trend', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","ae362636":"temp_max = wids_train[['State_Factor','january_max_temp', 'february_max_temp', 'march_max_temp', 'april_max_temp',\n       'may_max_temp', 'june_max_temp', 'july_max_temp', 'august_max_temp', 'september_max_temp',\n       'october_max_temp', 'november_max_temp','december_max_temp']].set_index('State_Factor')\ndf_temp_max = temp_max.unstack().reset_index().rename(columns = {0:'temp_max', 'level_0': 'month'})\n\nstatewise_max_temp = df_temp_max.groupby(['month', 'State_Factor'])['temp_max'].agg('median').reset_index()\n\n# parse the month column\nmonth = ['january', 'february', 'march', 'april','may', 'june', \n         'july', 'august', 'september','october', 'november','december']\nstatewise_max_temp['month'] = statewise_max_temp['month'].apply(lambda x: x.split('_')[0])\nstatewise_max_temp['month'] = pd.Categorical(statewise_max_temp['month'], categories = month, ordered = True)\nstatewise_max_temp.sort_values(by = 'month', inplace=True)\n\nfig = px.line(statewise_max_temp, x=\"month\", y=\"temp_max\", color = 'State_Factor')\nfig.update_layout(title_text='Statewise yearly max temperature trend', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","5a1b0298":"plt.figure(figsize=(10,6))\nsns.kdeplot(data = wids_train[['heating_degree_days', 'cooling_degree_days']])\nplt.grid()\nplt.title('HDD and CDD spread')","e4fb485f":"degree_days = wids_train.groupby('State_Factor').agg({'cooling_degree_days': 'median', \n                                              'heating_degree_days': 'median', \n                                              'site_eui': 'median'}).reset_index()\n\ndegree_days","2fd35e07":"fig = px.scatter(degree_days, x=\"cooling_degree_days\", y=\"site_eui\", size = 'site_eui', color = 'State_Factor')\nfig.update_layout(title_text='State wise median coling degree days Vs. median site eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","72424dbe":"fig = px.scatter(degree_days, x=\"heating_degree_days\", y=\"site_eui\", size = 'site_eui', color = 'State_Factor')\nfig.update_layout(title_text='State wise median heating degree days Vs. median site eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","47f95a9b":"fig = px.scatter(wids_train.query('site_eui <= 200'), x=\"precipitation_inches\", y=\"site_eui\", trendline=\"ols\")\nfig.update_layout(title_text='Precipitation wr.t site eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","a33ddae5":"fig = px.scatter(wids_train.query('site_eui <= 200'), x=\"snowfall_inches\", y=\"site_eui\", trendline=\"ols\")\nfig.update_layout(title_text='Snowfall wr.t site eui', title_x=0.5, title_y=1, margin=dict(t=30, l=30, r=30, b=30))\nfig.show()","e754645e":"df = wids_train[['Year_Factor', 'State_Factor', 'floor_area', 'year_built', 'energy_star_rating', 'ELEVATION',\n       'january_min_temp', 'january_avg_temp', 'january_max_temp',\n       'february_min_temp', 'february_avg_temp', 'february_max_temp',\n       'march_min_temp', 'march_avg_temp', 'march_max_temp', 'april_min_temp',\n       'april_avg_temp', 'april_max_temp', 'may_min_temp', 'may_avg_temp',\n       'may_max_temp', 'june_min_temp', 'june_avg_temp', 'june_max_temp',\n       'july_min_temp', 'july_avg_temp', 'july_max_temp', 'august_min_temp',\n       'august_avg_temp', 'august_max_temp', 'september_min_temp',\n       'september_avg_temp', 'september_max_temp', 'october_min_temp',\n       'october_avg_temp', 'october_max_temp', 'november_min_temp',\n       'november_avg_temp', 'november_max_temp', 'december_min_temp',\n       'december_avg_temp', 'december_max_temp', 'cooling_degree_days',\n       'heating_degree_days', 'precipitation_inches', 'snowfall_inches',\n       'snowdepth_inches', 'avg_temp', 'days_below_30F', 'days_below_20F',\n       'days_below_10F', 'days_below_0F', 'days_above_80F', 'days_above_90F',\n       'days_above_100F', 'days_above_110F', 'direction_max_wind_speed',\n       'direction_peak_wind_speed', 'max_wind_speed', 'days_with_fog',\n       'site_eui']]\n","c4a0746f":"df = wids_train[['Year_Factor', 'State_Factor', 'floor_area', 'year_built', \n                 'energy_star_rating', 'ELEVATION','cooling_degree_days', \n                 'heating_degree_days', 'precipitation_inches', 'snowfall_inches',\n       'snowdepth_inches', 'avg_temp', 'days_below_30F', 'days_below_20F',\n       'days_below_10F', 'days_below_0F', 'days_above_80F', 'days_above_90F',\n       'days_above_100F', 'days_above_110F', 'direction_max_wind_speed',\n       'direction_peak_wind_speed', 'max_wind_speed', 'days_with_fog',\n       'site_eui']]\n\n\nplt.figure(figsize = (25,25))\nmask = np.triu(np.ones_like(df.corr(), dtype=bool))\nsns.heatmap(df.corr(), mask = mask, cmap=\"YlGnBu\", annot=True)","76411640":"# let's just see the correlation matrix for buildings with high and low site eui.\n\ndf_low = df[df['site_eui'] <= 200]\nplt.figure(figsize = (25,25))\nmask = np.triu(np.ones_like(df_low.corr(), dtype=bool))\nsns.heatmap(df_low.corr(), mask = mask, cmap=\"YlGnBu\", annot=True)","36e8a1d1":"df_high = df[df['site_eui'] > 200]\nplt.figure(figsize = (25,25))\nmask = np.triu(np.ones_like(df_high.corr(), dtype=bool))\nsns.heatmap(df_high.corr(), mask = mask, cmap=\"YlGnBu\", annot=True)","0b8b7198":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Year Built:<\/b><\/p>\n<\/div>\n\nObservations:\n\n>1. Newer buildings tend to have less median site_eui when compared to old buildings","94c2dca7":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Temperature:<\/b><\/p>\n<\/div>\n\nObservation:\n\n> 1. State 4 seems to be having the lowest min temperature among other states and from the box plots above from states, we also know that the state 4 has the highest median site eui.\n> 2. State 11 seems to have lowest median site eui with low cooling and heating degree days. The temperature trend line also shows that State 11's lowest temperature varies between lower 30s to upper 50s and the highest temperature varies between upper 60s to upper 90s. Looks like state 11 has optimum temperature as compared to other states.","d0007dd8":"# <b>1 <span style='color:#DC143C'>|<\/span> ABOUT THE ANALYSIS<\/b>\n\nThe aim of this analysis is to perform the exploratory analysis of train dataset and get some insights on how each of the variables relate to our target variable which is 'site_eui' (Site Energy Usage Intensity-the amount of heat and electricity consumed by a building). We have about 64 attributes(including the target). ","696b6799":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Precipitation and Snow:<\/b><\/p>\n<\/div>","a6276552":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Year Factor:<\/b><\/p>\n<\/div>\n\nObservations:\n\n> 1. The year in which the observations are made. \n> 2. Most of the data belong to year 6\n> 3. The median site energy usage intensity remains same for all years\n> 4. There are a lot of outliers present beyond 200 site_eui\n> 5. There is just one year in the test set which we need to predict.","d52ddc50":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Elevation:<\/b><\/p>\n<\/div>","37aff608":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Facility Type:<\/b><\/p>\n<\/div>\n\nObservations:\n\n>1. The median site eui is highest for Data centers that comes under commercial category\n>2. For residential category Mixed use type facilities have highest median eui","92cfd13f":"The below correlation matrix is just for the data where site eui is more than 100.","9a193d42":"# <b>3 <span style='color:#DC143C'>|<\/span> RECAP OF THE EDA:<\/b>\n\n\n> 1. We have around 64 features including our target and an id\n\n> 2. Most of the features are temperature related, for example we have monthly statistics of temperature for each month\n\n> 3. We have the heating degree days and cooling degree days features that are also derived from the temperature\n\n> 4. There are another set of features such as days below and above 40F, 30F etc. \n\n> 5. Nearly half of the wind and fog related features are missing\n\n> 6. Almost 35% of energy star rating features are missing. And this is the feature that is most related to the site_eui. If you can see below the median site_eui (our target variable) has an inverse relationship between them\n\n> 7. We also found that the age of a building has some impact on the site_eui\n\n> 8. The Year Factor has 6 years in the train set and we have to predict the 7th year site_eui in the test set","6078d8dc":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Building Class:<\/b><\/p>\n<\/div>\n\nObservation:\n\n>1. The median site eui is slightly looks about same for residential buildings as compared to the commercial buildings\n>2. We need to further investigate the facility type for some clairty","71c1c5fa":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Floor Area:<\/b><\/p>\n<\/div>\n\nObservations:\n\n>1. The floor area varies between 900 square feet to 63K square feet\n>2. Floor area of 50K square feet and above tend to have high median site_eui","65ac7d93":"# <b>2 <span style='color:#DC143C'>|<\/span> EDA<\/b>","3b1af15b":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> Energy Star Rating:<\/b><\/p>\n<\/div>\n\nObservations:\n\n>1. The Building Energy Star rating is usually high for buildings that have low eui.\n","47883a13":"Some times the very high Site eui numbers do not make sense to me when it comes to correlation. I am trying to split the eui below and above 200 just to check if removing the high eui's will make our correlation matrix any stronger or not.\n\nAfter doing so, i found that the lower site eui (less than 200 in this case) have a little stronger correlation matrix especially with the heating degree days and cooling degree days as compared to taking correlations using all of site eui data. I did this just out of curiosity. ","18b44f1a":"<div style=\"color:white;display:fill;border-radius:5px;background-color:#FFD700;\n       font-size:150%;font-family:Nexa;letter-spacing:0.5px\">\n    <p style=\"padding: 10px;color:black;\"><b> State Factor:<\/b><\/p>\n<\/div>\n\nObservations:\n\n> 1. There are 7 unique states\n> 2. State 6 has most data in the train set. But the tricky part is the test data doesn't have any samples from state 6\n> 3. The median site_eui for state 4 and state 6 is the highest among other states"}}