{"cell_type":{"4d06464f":"code","2b7b0d33":"code","5391fa59":"code","c5790729":"code","3e1edfc2":"markdown","9df05176":"markdown","12afaeb9":"markdown"},"source":{"4d06464f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b7b0d33":"\nclass Apparel:\n    counter=100\n    def __init__(self,price,item_type,item_id):\n        Apparel.counter=100\n        self.__item_type=item_type\n        self.__price=price\n        self.__item_id=item_id[0]+str(Apparel.counter)\n        \n    def get_price(self):\n        return self.__price\n    def set_price(self):\n        self.__price=price\n    def get_item_id(self):\n        return self.__item_id\n    def get_item_type(self):\n        return self.__item_type\n    def calculate_price(self):\n        self.__price=self.__price+(self.__price*0.05)\n        \nclass Cotton(Apparel):\n    def __init__(self,price,discount):\n        super().__init__(price,\"Cotton\")\n        self.__discount=discount\n        \n    def get_discount(self):\n        return self.__discount\n    def calculate_price(self):\n        super().calculate_price()\n        price=self.grt_price()\n        price=price-(price*self.__discount\/100)\n        price=price+(price*0.05)\n        self.set_price(price)\n        \nclass Silk(Apparel):\n    def __init__(self,price):\n        self.__points=0\n        super().__init__(price,\"Silk\")\n    \n    def get_points(self):\n        return self.__points\n    def calculate_price(self):\n        super().calcualte_price\n        price=self.get_price()\n        if price>10000:\n            self.__points=10\n        else:\n            self.__points=3\n            price=price+price*0.1\n            self.set_price(peice)\n            \nc1=Cotton(8000,2)\nc1.calculate_price()\nprint(c1.get_price(),c1.get_item_type(),c1.get_discount())","5391fa59":"class FruitInfo:\n    __fruit_name_list=[\"Apple\",\"Gauva\",\"Orange\",\"Mango\",\"Sweet Lime\"]\n    __fruit_price_list=[200,80,70,110,60]\n    def get_fruit_price(fruit_name):\n        if fruit_name in FruitInfo.__fruit_name_list:\n            frut_indx=FruitInfo.__fruit_namr_list.index(fruit_name)\n            return FruitInfo.__fruit_price_list[frut_indx]\n        else:\n            return -1\n    def get_fruit_name_list():\n        return FruitInfo.__fruit_name_list\n    def get_fruit_price_list():\n        return FruitInfo.__fruit_pricr_list\n\nclass Customer:\n    def __init__(self,customer_name,customer_type):\n        self.__customer_name=customer_name\n        self.__customer_type=customer_type\n        \n    def get_customer_name(self):\n        return self.__customer_name\n    def get_customer_type(self):\n        return self.__customer_type\n    \nclass Purchase:\n    __counter=101\n    def __init__(self,cudtomer,fruit_name,quantity):\n        self.__Purchase_id=None\n        self.__customer=customer\n        self.__fruit_name=fruit_name\n        self.__quantity=quantity\n        \n    def get_purchase_id(self):\n        return self.__purchase_id\n    def get_customer(self):\n        return self.__customer\n    def get_quantity(self):\n        return self.__quantity\n    \n    def calcualte_price(self):\n        max_price=max(FruitInfo.get_fruit_name_price_list())\n        min_price=min(FruitInfo.get_fruit_name_price_list())\n        price_kg=FruitInfo.get_fruit_name_price(self.__fruit_name)\n        \n        if price_kg>0:\n            self.__purchase_id='p'+str(purchase.__counter)\n            purchase.__counter +=1\n            bill_amount=self.__quantity*price_kg\n            if price_kg==max_price and self.__quantity>1:\n                bill_amount=bill_amount-bill_amount*0.02\n            elif price_kg==min_price and self.__quantity>4:\n                bill_amount=bill_amount-bill_amount*0.05\n            if customer.get_cust_type(self.__customer)==\"wholesale\":\n                bill_amount=bill_amount-bill_amount*0.10\n                return bill_amount\n        else:\n            return -1\nc1=Customer(\"Rahul\",1)","c5790729":"class ThemePark:\n    dict_of_games={\"Game1\":[35.5,5],\"Game2\":[40.0,6],\"Game3\":[120.0,10],\"Game4\":[60.0,7],\"Game5\":[25.0,4]}\n    def validate_game(game_input):\n        if game_input in ThemePark.dict_of_games:\n            return True\n        else:\n            return False\n    def get_points(game_input):\n        return ThemePark.dict_of_games[game_input][1]\n    def get_amount(game_input):\n        return ThemePark.dict_of_games[game_input][0]\n    \nclass Ticket:\n    __ticket_count=200\n    def __init__(self):\n        self.__ticket_id=None\n        self.__ticket_amount=0\n    def generate_ticket(self):\n        Ticket.__ticket_count+=1\n        self.__ticket_id=ticket.__ticket_count\n    def calculate_amount(self,list_of_games):\n        for game in list_of_games:\n            if ThemePark.validate_game(game):\n                self.__ticket_amount+=ThemePark.get_amount(game)\n            else:\n                self.__ticket_amount=0\n                return False\n        return True\n    def get_ticket_id(self):\n        return self.__ticket_id\n    def get_ticket_amount(self):\n        return self.__ticket_amount\n    \nclass Customer:\n    def __init__(self,name,list_of_games):\n        self.__name=name\n        self.__list_of_games=list_of_games\n        self.__ticket=Ticket()\n        self.__points_earned=0\n        self.__food_coupon=\"No\"\n        \n    def play_game(self):\n        total_points=0\n        if \"Game3\" in self.__list_of_games and \"Game2\" not in self.__list_of_games:\n            self.__list_of_games.append(\"Game2\")\n        for game in self.__list_of_games:\n            total_points+=ThemePark.grt_points(game)\n        self.__points_earned=total_points\n            \n    def update_food_coupon(self):\n        if \"Game4\" in self.__list_of_games and self.__points_earned>14:\n            self.__food_coupon=\"yes\"\n    def book_ticket(self):\n            if Ticket.calculate_amount(self.__ticket,self.__list_of_games):\n                Ticket.generate_ticket_id(self.__ticket)\n                self.play_game()\n                self.update_food_coupon()\n                return True\n            else:\n                return False\n            \n    def get_name(self):\n        return self.__name\n    def get_list_of_games(self):\n        return self.__list_of_games\n    def get_ticket(self):\n        return self.__ticket\n    def get_points_earned(self):\n        return self.__points_earned\n    def get_food_coupon(self):\n        return self.__food_coupon\n        \n            \n            \ncust1=Customer(\"Rahul\",[\"Game1\",\"Game2\"])\nif cust1.book_ticket():\n    print(cust1.get_name(),cust1.get_list_of_games(),cust1.get_ticket().get_ticket_id(),cust1.get_ticket().get_ticket_amount(),cust1.get_points_earned(),cust1.get_food_coupon())\n    \n        \n                \n                \n        ","3e1edfc2":"Assignment=26\n![image.png](attachment:image.png)\n![image.png](attachment:image.png)","9df05176":"assignment=24\n![image.png](attachment:image.png)\n![image.png](attachment:image.png)\n","12afaeb9":"##assignment=25"}}