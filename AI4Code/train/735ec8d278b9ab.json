{"cell_type":{"de33deb4":"code","ff5ea297":"code","6d06519e":"code","67840c92":"code","a7bf2021":"code","644cb608":"code","172ebc7d":"code","52e1ee5f":"code","c69061c5":"code","3c88767a":"code","408a916f":"code","0d942e4c":"code","417ebf90":"markdown","9a9a4880":"markdown"},"source":{"de33deb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom graphviz import Source\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff5ea297":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\n\n\nfrom scipy.stats import skew\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.style.use('ggplot')","6d06519e":"df = pd.read_csv(\"\/kaggle\/input\/ai4all-project\/data\/viral_calls\/sample_overviews.csv\")\ndf.head()","67840c92":"df.isna().sum()","a7bf2021":"categorical_cols = [col for col in df.columns if df[col].dtype == 'object']\nlabel_encoder = LabelEncoder()\nlabelled_df = df.copy()\nfor col in categorical_cols:\n    labelled_df[col] = label_encoder.fit_transform(df[col])\nlabelled_df.head()","644cb608":"import seaborn as sbn\n\ncorrelation=labelled_df.corr()\nplt.figure(figsize=(15,15))\nsbn.heatmap(correlation,annot=True,cmap=plt.cm.Greens)","172ebc7d":"cols_to_drop=['sample_name', 'uploader', 'upload_date', 'overall_job_status', 'host_genome', 'sample_type', 'nucleotide_type', 'collection_date', 'water_control', 'collection_location', 'notes']\ndf=df.drop(cols_to_drop,axis=1)\ndf.columns","52e1ee5f":"x = df.drop(['reads_after_trimmomatic', 'reads_after_star'], axis=1)\nx.fillna(999999, inplace=True)\ny = df['reads_after_star']","c69061c5":"dt = DecisionTreeClassifier(max_depth=3)","3c88767a":"dt.fit(x, y)","408a916f":"dt_feat = pd.DataFrame(dt.feature_importances_, index=x.columns, columns=['feat_importance'])\ndt_feat.sort_values('feat_importance').tail(8).plot.barh()\nplt.show()","0d942e4c":"from IPython.display import SVG\nos.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\ngraph = Source(export_graphviz(dt, out_file=None, feature_names=x.columns, filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","417ebf90":"#RNA sequencing dataset characterizing transcriptomic responses to dietary changes in Caenorhabditis elegans\n#Authors Scott T.SchumackerbChloe A.M.ChidesteraRaymond A.EnkebcMatthew R.Marcelloa\nhttps:\/\/doi.org\/10.1016\/j.dib.2019.104006\n\n![](https:\/\/ars.els-cdn.com\/content\/image\/1-s2.0-S2352340919303592-gr1.jpg)\nFig. Bioinformatics pipeline, assessment of read mapping and sample variance. (a) Flowchart overview of the RNA-seq experiment. (b) Per sample summary of Kallisto pseudo-alignment of RNA-seq reads to C. elegans WBcel235 reference transcriptome. Number of reads are plotted on the x-axis is in millions (M). Additional details about the alignment are listed in Table 1. (c) Principal Component Analysis (PCA) Biplot of experimental sample variance. (d) Heat map analysis of experimental samples variance. Key: Jensen Shannon Divergence (jsd) = similarity between samples; 0 = identical (blue); 1 = no overlap (white).https:\/\/www.sciencedirect.com\/science\/article\/pii\/S2352340919303592","9a9a4880":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke "}}