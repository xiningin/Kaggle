{"cell_type":{"c9d5049f":"code","a505bd4a":"code","fefd974b":"code","98455f27":"code","690a1f03":"code","adcfae10":"code","bd7e4d96":"code","9ee5f425":"code","bd0523d8":"code","8b30835b":"code","18fa5aaf":"code","f4b203c6":"markdown","29594e22":"markdown","a8736527":"markdown","fc38d072":"markdown","3c819358":"markdown"},"source":{"c9d5049f":"import numpy as np, pandas as pd\nfrom glob import glob\nimport shutil, os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GroupKFold\nfrom tqdm.notebook import tqdm\nimport seaborn as sns","a505bd4a":"%cd \/kaggle\/working\n!git clone https:\/\/github.com\/train255\/yolov5","fefd974b":"%cd \/kaggle\/working\/yolov5\n!pip install -qr requirements.txt --use-feature=2020-resolver\n%cd \/kaggle\/working\/","98455f27":"dim = 'original' #1024, 512, 256, 'original'\ntest_dir = f'\/kaggle\/input\/vinbigdata-{dim}-image-dataset\/vinbigdata\/test'\nweights_dir = '\/kaggle\/input\/vingbigdata-yolov5-pretrained-16-class\/best.pt'","690a1f03":"test_df = pd.read_csv(f'\/kaggle\/input\/vinbigdata-{dim}-image-dataset\/vinbigdata\/test.csv')\ntest_df.head()","adcfae10":"# shutil.copytree('\/kaggle\/input\/yolov5-official-v31-dataset\/yolov5', '\/kaggle\/working\/yolov5')\nos.chdir('\/kaggle\/working\/yolov5') # install dependencies\n\nimport torch\nfrom IPython.display import Image, clear_output  # to display images\n\nclear_output()\nprint('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))","bd7e4d96":"%cd \/kaggle\/working\/yolov5\n!python detect.py --weights $weights_dir\\\n--img 640\\\n--conf 0.009\\\n--iou 0.45\\\n--source $test_dir\\\n--save-txt --save-conf --exist-ok","9ee5f425":"def yolo2voc(image_height, image_width, bboxes):\n    \"\"\"\n    yolo => [xmid, ymid, w, h] (normalized)\n    voc  => [x1, y1, x2, y1]\n    \n    \"\"\" \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    bboxes[..., [0, 2]] = bboxes[..., [0, 2]]* image_width\n    bboxes[..., [1, 3]] = bboxes[..., [1, 3]]* image_height\n    \n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] - bboxes[..., [2, 3]]\/2\n    bboxes[..., [2, 3]] = bboxes[..., [0, 1]] + bboxes[..., [2, 3]]\n    \n    return bboxes","bd0523d8":"image_ids = []\nPredictionStrings = []\n\nfor file_path in tqdm(glob('\/kaggle\/working\/yolov5\/runs\/detect\/exp\/labels\/*txt')):\n    image_id = file_path.split('\/')[-1].split('.')[0]\n    w, h = test_df.loc[test_df.image_id==image_id,['width', 'height']].values[0]\n    f = open(file_path, 'r')\n    data = np.array(f.read().replace('\\n', ' ').strip().split(' ')).astype(np.float32).reshape(-1, 6)\n    data = data[:, [0, 5, 1, 2, 3, 4]]\n    bboxes = list(np.round(np.concatenate((data[:, :2], np.round(yolo2voc(h, w, data[:, 2:]))), axis =1).reshape(-1), 1).astype(str))\n    for idx in range(len(bboxes)):\n        bboxes[idx] = str(int(float(bboxes[idx]))) if idx%6!=1 else bboxes[idx]\n    if str(bboxes[0]) != \"15\":\n        image_ids.append(image_id)\n        if str(bboxes[0]) != \"14\":\n            PredictionStrings.append(' '.join(bboxes))\n        else:\n            PredictionStrings.append(\"14 1 0 0 1 1\")","8b30835b":"pred_df = pd.DataFrame({'image_id':image_ids,\n                        'PredictionString':PredictionStrings})\nsub_df = pd.merge(test_df, pred_df, on = 'image_id', how = 'left').fillna(\"14 1 0 0 1 1\")\nsub_df = sub_df[['image_id', 'PredictionString']]\nsub_df.to_csv('\/kaggle\/working\/submission.csv',index = False)\nsub_df.tail()","18fa5aaf":"shutil.rmtree('\/kaggle\/working\/yolov5')","f4b203c6":"## Approach\n\n- Add \"Finding\" label with images that contain the abnormalcy\n```python\nlabels = [\n    \"Aortic enlargement\",\n    \"Atelectasis\",\n    \"Calcification\",\n    \"Cardiomegaly\",\n    \"Consolidation\",\n    \"ILD\",\n    \"Infiltration\",\n    \"Lung Opacity\",\n    \"Nodule\/Mass\",\n    \"Other lesion\",\n    \"Pleural effusion\",\n    \"Pleural thickening\",\n    \"Pneumothorax\",\n    \"Pulmonary fibrosis\",\n    \"No finding\",\n    \"Finding\"\n]\n```\n\n- Each abnormalcy can be predicted by many radiologists. We can get [the average of the coordinates](https:\/\/www.kaggle.com\/duythanhng\/take-the-average-of-the-coordinates-using-iou) to reduce overlapping labels\n\nClick [here](https:\/\/etrain.xyz\/en\/posts\/vinbigdata-chest-x-ray-abnormalities-detection) for more detail of the approach","29594e22":"# Inference","a8736527":"## Result","fc38d072":"# YOLOv5 Stuff","3c819358":"# Process Submission"}}