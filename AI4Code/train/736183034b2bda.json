{"cell_type":{"1997d089":"code","0caf9894":"code","8c8a0e9f":"code","db3b43a7":"code","21d6a913":"code","a3d1bf08":"code","3be956fc":"code","2826554a":"code","32e3d642":"code","f8ef2ca4":"code","7f901b34":"code","ae964034":"code","c12f8c75":"code","87b12af2":"code","c1babb67":"code","fe4fb20f":"code","7369375d":"code","e62191ec":"code","b25c4998":"code","6218fe07":"code","8995aa96":"code","a48cecda":"code","02abf670":"code","f834521f":"code","8d33c043":"code","593a3569":"code","b4a95f3f":"code","8e654bb3":"code","e6c5688a":"code","461a116d":"code","41ccb783":"markdown","a71496c5":"markdown","8f6f5955":"markdown","4a1a55bf":"markdown","b369e624":"markdown","24695141":"markdown","37db6935":"markdown","07e3f59e":"markdown","a97ffe89":"markdown","5998075f":"markdown","13131dff":"markdown","504aa0e4":"markdown","6bad29b6":"markdown","05f08937":"markdown","04990f8f":"markdown","c75f6bd2":"markdown","1d14a24c":"markdown","52a86d6c":"markdown","65dcabb5":"markdown","88a5858d":"markdown"},"source":{"1997d089":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0caf9894":"#\u0456\u043c\u043f\u043e\u0440\u0442\u0438\n# \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u0430\u0454\u043c\u043e TensorFlow, \u0431\u043e \u0432\u0456\u043d \u0432 \u043a\u0443\u0440\u0441\u0456 Coursera \u0431\u0443\u0432, \u044f \u0439\u043e\u0433\u043e \u0442\u0440\u043e\u0448\u043a\u0438 \u0437\u043d\u0430\u044e\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D","8c8a0e9f":"# \u0444\u0443\u043d\u043a\u0446\u0456\u044f \u0434\u043b\u044f \u0432\u0438\u0442\u044f\u0433\u0443\u0432\u0430\u043d\u043d\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\n# \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0454 \u0442\u0430\u0431\u043b\u0438\u0446\u044e \u0456 \u0432\u0441\u0435\n# \u0432\u0437\u0430\u0433\u0430\u043b\u0456-\u0442\u043e \u043c\u043e\u0436\u043d\u0430 \u0431\u0443\u043b\u043e \u0431 \u0456 \u0431\u0435\u0437 \u043d\u0435\u0457 \u043e\u0431\u0456\u0439\u0442\u0438\u0441\u044c... \u0430\u043b\u0435 \u0432\u0436\u0435 \u0431\u0430\u0439\u0434\u0443\u0436\u0435\ndef load_ds(path):\n    return np.loadtxt(path, skiprows=1 ,delimiter=',')\n\n'''\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0433\u043e\u0442\u043e\u0432\u0438\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \n    dataset - \u0432\u044b\u0442\u044f\u043d\u0443\u0442\u044b\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430\n    classes_count - \u043a\u043e\u043b-\u0432\u043e \u043a\u043b\u0430\u0441\u043e\u0432, int\n    shape - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 2 \u0438\u043b\u0438 3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        [0] - row_size - \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n        [1] - col_size - \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n        [2] - dim_size - \u0447\u0438\u0441\u043b\u043e \"\u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439\" \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - 1)\n\u0412\u043e\u0437\u0432\u0440\u0430\u0442: \n    \u0421\u043f\u0438\u0441\u043e\u043a data\n        [0] - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n        [1] - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438\n'''\ndef prepare_images(dataset, classes_count, shape):\n    row_size = shape[0]\n    col_size = shape[1]\n    dim_size = 1\n    if len(shape)>=3:\n        dim_size = shape[2]\n    \n    # \u0432\u0438\u0434\u0430\u043b\u044f\u0454\u043c\u043e id\n    dataset = np.delete(dataset, 0, 1)\n    # \u043f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u0430\u0446\u0456\u044f \u0434\u0430\u043d\u0438\u0445 \u043f\u0440\u043e \u043f\u0456\u043a\u0441\u0435\u043b\u0456\n    imgs_raw = dataset[:, 1:] # \u0432\u0438\u0442\u044f\u0433\u0430\u0454\u043c\u043e \u0434\u0430\u043d\u0456\n    images_num = dataset.shape[0] # \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u0447\u0438\u0441\u043b\u043e\n    # \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044e\n    images = imgs_raw.reshape(images_num, row_size, col_size, dim_size) \n    images = images \/ 255 # \u043d\u043e\u0440\u043c\u0430\u043b\u0456\u0437\u0443\u0454\u043c\u043e\n    # \u043f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043c\u0456\u0442\u043e\u043a \n    labels = dataset[:, 0] # \u0432\u0438\u0442\u044f\u0433\u0430\u0454\u043c\u043e \u043c\u0456\u0442\u043a\u0438\n    # \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0443\u0454\u043c\u043e\n    labels = keras.utils.to_categorical(labels, classes_count) \n    return [images, labels]\n\n\n\n\"\"\"\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0442\u044c. \n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \n    conlayers - \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043d\u0432\u043e\u043b\u044e\u0446\u0438\u043e\u043d\u043d\u044b\u044a\u0445 \u0441\u043b\u043e\u0451\u0432\n    shape - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 2 \u0438\u043b\u0438 3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        [0] - row_size - \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n        [1] - col_size - \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n        [2] - dim_size - \u0447\u0438\u0441\u043b\u043e \"\u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439\" \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - 1)\n    params - \u0438\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438\n        \"dense_neurons\" - \u0447\u0438\u0441\u043b\u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043b\u043e\u044f\n            (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - 64)\n    \n\u0412\u043e\u0437\u0432\u0440\u0430\u0442: \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c model\n\"\"\"\ndef create_network(conlayers, shape, classes_count, **params):\n    row_size = shape[0]\n    col_size = shape[1]\n    dim_size = 1\n    if len(shape)>=3:\n        dim_size = shape[2]\n    \n    # \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n    dense_neurons = params.get(\"dense_neurons\", 64)\n    kernel_0, kernel_1 = 3, 3\n    if kernel_0>shape[0]:\n        kernel_0 = shape[0]\n    if kernel_1>shape[1]:\n        kernel_1 = shape[1]\n    kernel_size = params.get(\"kernel_size\", (kernel_0, kernel_1))\n    \n    # \u0444\u043e\u0440\u043c\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456\n    model = Sequential() # \u043c\u043e\u0434\u0435\u043b\u044c - \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u0430 \n    # \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u0448\u0430\u0440\n    # \u0442\u0443\u0442 \u0432\u0441\u0435 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u0430\u043b\u0435 \u043c\u0438 \u0442\u0430\u043a\u043e\u0436 \u0432\u043a\u0430\u0437\u0443\u0454\u043c\u043e \u043d\u0430\u0448\u0443 \u0444\u0456\u0433\u0443\u0440\u0443: \u043c\u0430\u0442\u0440\u0438\u0446\u044e R\u0445Cx1\n    # \u0434\u043b\u044f \u0456\u043d\u0448\u0438\u0445 \u0432\u0441\u0435 \u044f\u043a \u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0432\u0438\u0449\u0435\n    model.add(Conv2D(12, kernel_size=kernel_size, activation='relu', \n                     input_shape=(row_size, col_size, dim_size)))\n    for i in range(1, conlayers):\n        model.add(Conv2D(12, kernel_size=kernel_size, activation='relu'))\n    model.add(Flatten()) # \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0456\u0439\u043d\u0438\u0439 \u0448\u0430\u0440 \n    model.add(Dense(dense_neurons, activation='relu')) # \u043f\u043e\u0432\u043d\u043e\u0437'\u0454\u0434\u043d\u0430\u043d\u0438\u0439 \u0448\u0430\u0440\n    model.add(Dense(classes_count, activation='softmax')) # \u0432\u0438\u0445\u0456\u0434\u043d\u0438\u0439 \u0448\u0430\u0440\n    return model\n\ndef create_network_1D(conlayers, shape, classes_count, **params):\n    from tensorflow.keras.layers import Conv1D\n    row_size = shape[0]\n    col_size = shape[1]\n    if len(shape)>=2:\n        col_size = shape[2]\n    \n    # \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n    dense_neurons = params.get(\"dense_neurons\", 64)\n    \n    # \u0444\u043e\u0440\u043c\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456\n    model = Sequential() # \u043c\u043e\u0434\u0435\u043b\u044c - \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u0430 \n    # \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u0448\u0430\u0440\n    # \u0442\u0443\u0442 \u0432\u0441\u0435 \u0437\u0440\u043e\u0437\u0443\u043c\u0456\u043b\u043e, \u0430\u043b\u0435 \u043c\u0438 \u0442\u0430\u043a\u043e\u0436 \u0432\u043a\u0430\u0437\u0443\u0454\u043c\u043e \u043d\u0430\u0448\u0443 \u0444\u0456\u0433\u0443\u0440\u0443: \u043c\u0430\u0442\u0440\u0438\u0446\u044e R\u0445Cx1\n    # \u0434\u043b\u044f \u0456\u043d\u0448\u0438\u0445 \u0432\u0441\u0435 \u044f\u043a \u0432 \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0432\u0438\u0449\u0435\n    model.add(Conv1D(256, 8,  \n                     activation='relu',\n                     input_shape=(row_size, col_size)))\n        \n    for i in range(1, conlayers):\n        model.add(Conv1D(256, 8, activation='relu'))\n    model.add(Flatten()) # \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0456\u0439\u043d\u0438\u0439 \u0448\u0430\u0440 \n    model.add(Dense(dense_neurons, activation='relu')) # \u043f\u043e\u0432\u043d\u043e\u0437'\u0454\u0434\u043d\u0430\u043d\u0438\u0439 \u0448\u0430\u0440\n    model.add(Dense(classes_count, activation='softmax')) # \u0432\u0438\u0445\u0456\u0434\u043d\u0438\u0439 \u0448\u0430\u0440\n    return model\n\n\"\"\"\n\u041a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0442\u044c\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \n    model - \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438\n    \"loss\" - \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044c (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - \u043a\u0440\u043e\u0441\u0441\u0435\u043d\u0442\u0440\u043e\u043f\u0438\u044f)\n    \"optimizer\" - \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0442\u043e\u0440 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - Adam)\n    \"metrics\" - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, accuracy)\n\u0412\u043e\u0437\u0432\u0440\u0430\u0442: \u043d\u0435\u0442\n\"\"\"\ndef compile_network(model, **kwargs):\n    loss_func = kwargs.get(\"loss\", keras.losses.categorical_crossentropy)\n    opti_func = kwargs.get(\"optimizer\", 'adam')\n    metrics = kwargs.get(\"metrics\", ['accuracy'])\n    model.compile(loss=loss_func, optimizer=opti_func, metrics=metrics)\n    pass\n\n\"\"\"\n\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: \n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \n    model - \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438\n    data - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 2 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        [0] - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n        [1] - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438\n    bsize - batch_size, int\n    eps - epochs, int\n    val - validation_split, double (0-1)\n\u0412\u043e\u0437\u0432\u0440\u0430\u0442: \u043d\u0435\u0442    \n\"\"\"\ndef fit(model, data, bsize, eps, val):\n    model.fit(data[0], data[1], batch_size=bsize, epochs=eps, validation_split=val)\n    pass\n\n","db3b43a7":"\"\"\"\n\u0428\u0430\u0431\u043b\u043e\u043d \u0444\u0443\u043d\u043a\u0446\u0456\u0457: \n- \u0412\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456: \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\n- \u0412\u0438\u0445\u0456\u0434\u043d\u0456 \u0434\u0430\u043d\u0456 - \u0441\u043b\u043e\u0432\u043d\u0438\u043a\n    \"data\" - \u0442\u0440\u0435\u043d\u0443\u0432\u0430\u043b\u044c\u043d\u0456 \u0434\u0430\u043d\u0456. \u0421\u043f\u0438\u0441\u043e\u043a\n        [0] - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n        [1] - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438\n    \"shape\" - \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 2 \u0438\u043b\u0438 3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        [0] - row_size - \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n        [1] - col_size - \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435\n        [2] - dim_size - \u0447\u0438\u0441\u043b\u043e \"\u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439\" \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447. - 1)\n    \"test\" - \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0444\u043e\u0440\u043c\u0430\u0442 \u0442\u043e\u0442 \u0436\u0435, \u0447\u0442\u043e \u0438 \u0443 \"data\")\n    \"classes_count\" - \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n\"\"\"","21d6a913":"def mnist():\n    # \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u0432\u0430\u0440\u0456\u0430\u043d\u0442\u0456\u0432 \u0432\u0438\u0431\u043e\u0440\u0443 (\u043a\u043b\u0430\u0441\u0456\u0432)\n    classes_count = 10 \n    # \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u0456\u0441\u0442\u044c \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f\n    shape = [28, 28, 1]\n    train_dataset = load_ds(\"..\/input\/data-given-from-task\/train.csv\")\n    train_data = prepare_images(train_dataset, classes_count, shape)\n    # print(\"mnist: train data prepared!\")    \n    \n    test_features = load_ds(\"..\/input\/data-given-from-task\/test.csv\")[:, 1:]\n    test_answ = load_ds(\"..\/input\/mnist-answ\/answer_key.csv\")[:, 1]\n    test_num = test_features.shape[0] # \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u0447\u0438\u0441\u043b\u043e\n    test = test_features.reshape(test_num, shape[0], shape[1], shape[2]) \n    test = test \/ 255\n    \n    return {\"data\":train_data, \n            \"shape\":shape, \n            \"test\":[test, test_answ], \n            \"classes_count\":classes_count}","a3d1bf08":"def NSL_KDD():\n    \"\"\"\n    \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 - \u0432\u0435\u043a\u0442\u043e\u0440 \u0438\u0437 41 \u043f\u043e\u043b\u0435\u0439 \u043f\u0430\u043a\u0435\u0442\u0430\n    \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 - 43 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 (42) - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 - \u043c\u044b \u0443\u0434\u0430\u043b\u0438\u043c\n    \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 (41) - \u0442\u0438\u043f \u0430\u0442\u0430\u043a\u0438 - \u044d\u0442\u043e \u043d\u0430\u0448\u0438 \u043c\u0435\u0442\u043a\u0438\n    \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 (41 \u043f\u043e\u043b\u0435, \u043e\u0442 0 \u0434\u043e 40) - \u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    \"\"\"\n    shape = [41, 1, 1]\n\n    # \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n    \n    '''types = [float, str, str, str]\n    for i in range(4, 41):\n        types.append(float)\n    types.append(str)\n    types.append(float)\n    '''\n    dataset = np.loadtxt(\n        \"..\/input\/packets-classification\/NSL_KDD-master\/KDDTrain+.csv\", \n        skiprows=1 ,\n        delimiter=',', \n        dtype=str)\n    \n    test = np.loadtxt(\n        \"..\/input\/packets-classification\/NSL_KDD-master\/KDDTest+.csv\", \n        skiprows=1 ,\n        delimiter=',', \n        dtype=str)\n    \n    # \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0438\u043a (40\u0439)\n    # \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f \u0430\u0442\u0430\u043a\u0438 \n    np.delete(dataset, 42, 1)\n    np.delete(test, 42, 1)\n    \n    # \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0447\u0438\u0441\u043b\u0430\n    protocols = dict()\n    services = dict()\n    flags = dict()\n    attacks = dict()\n    pctr = 0\n    sctr = 0\n    fctr = 0\n    actr = 0\n    # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0447\u0438\u0441\u043b\u0430\u043c\u0438\n    for packet in dataset:\n        # \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043f\u043e\u043b\u0435\u0439\n        proto = packet[1]\n        serv = packet[2]\n        flag = packet[3]\n        attack_label = packet[41]\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u043c, \u0431\u044b\u043b \u043b\u0438 \u0443 \u043d\u0430\u0441 \u0443\u0436\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\n        if protocols.get(proto)==None:\n            protocols[proto] = pctr\n            pctr += 1\n        if services.get(serv)==None:\n            services[serv] = sctr\n            sctr += 1\n        if flags.get(flag)==None:\n            flags[flag] = fctr\n            fctr += 1\n        \"\"\"\n        \u0432\u044b\u0432\u043e\u0434 \u043a\u0430\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0430\u0442\u0430\u043a\u0438 \u044f \u043f\u043e\u043f\u044b\u0442\u0430\u044e\u0441\u044c \u043d\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \n        (\u0431\u0443\u0434\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439), \u043d\u043e \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a-\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n        \"\"\"\n        if attacks.get(attack_label)==None:\n            attacks[attack_label] = actr\n            actr += 1\n        packet[1] = protocols[proto]\n        packet[2] = services[serv]\n        packet[3] = flags[flag]\n        packet[41] = attacks[attack_label]\n    classes_count = actr\n    \n    # \u0442\u043e \u0436\u0435 - \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u0442\u0430\n    for packet in test:\n        packet[1] = protocols[packet[1]]\n        packet[2] = services[packet[2]]\n        packet[3] = flags[packet[3]]\n        if attacks.get(packet[41]) == None:\n            attacks[packet[41]] = actr\n            actr += 1\n        packet[41] = attacks[packet[41]]\n    \n    # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0435\u0442\u043e\u043a\n    labels = dataset[:, 41] # \u0432\u0438\u0442\u044f\u0433\u0430\u0454\u043c\u043e \u043c\u0456\u0442\u043a\u0438\n    # \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0443\u0454\u043c\u043e\n    labels = keras.utils.to_categorical(\n        labels, \n        classes_count) \n    \n    # \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0442.\u043a. \u0442\u0430\u043c \u0438\u043b\u0438 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\n    # \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e, \u0438\u043b\u0438 \u0447\u0438\u0441\u043b\u043e-\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \n    # \u0435\u0441\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440 \u0437\u0430\u043c\u0430\u0442\u0435\u0440\u0438\u0442\u0441\u044f - \u0442\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u043c \u0434\u0443\u043c\u0430\u0442\u044c\n    data = dataset[:, :41]\n    count = dataset.shape[0] # \u043e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u0447\u0438\u0441\u043b\u043e\n    # \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u044e\n    data = data.reshape(count, shape[0], shape[1], shape[2]) \n    data = data.astype(np.float)\n    \n    # \u0442\u043e \u0436\u0435 - \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u0442\u0430\n    test_data = test[:, :41]\n    count = test.shape[0]\n    test_data=test_data.reshape(count, shape[0], shape[1], shape[2])\n    test_data = test_data.astype(np.float)\n    \n    return {\"data\":[data, labels], \n            \"shape\":shape, \n            \"test\":[test_data, test[:, 41]], \n            \"classes_count\":classes_count}    ","3be956fc":"def compute_accuracy(score, answers):\n    good = 0\n    count = len(score)\n    if len(answers)<count:\n        count = len(answers)\n    for i in range(0, count-1):\n        if int(score[i]) == int(answers[i]):\n            good += 1\n    return good\/count\n\n\"\"\"\n model - \u043c\u043e\u0434\u0435\u043b\u044c\n test_data - \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n     [0] - \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n     [1] - \u043e\u0442\u0432\u0435\u0442\u044b (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c None, \u043d\u043e \u0442\u043e\u0433\u0434\u0430 \u0438 accuracy = 0)\n \u0432\u043e\u0437\u0432\u0440\u0430\u0442: \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f (accuracy)\n\"\"\"\ndef test(model, test_data):\n    score = model.predict(test_data[0], verbose = 0)\n    score = np.argmax(score, axis=1)\n    return compute_accuracy(score, test_data[1])\n\n\"\"\"\n\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0438 \u043e\u0431\u0443\u0447\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c. \n\u0417\u0430\u043c\u0435\u0440\u044f\u0435\u0442 \u0432\u0440\u0435\u043c\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\n    prep_data - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439-\u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0435\n        \u0421\u043b\u043e\u0432\u0430\u0440\u044c. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f: \n            data: \u0434\u0430\u043d\u043d\u044b\u0435. \u0421\u043f\u0438\u0441\u043e\u043a: [\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043c\u0435\u0442\u043a\u0438], \n            shape: \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0430\u043d\u043e\u0433\u043e. \u0421\u043f\u0438\u0441\u043e\u043a [\u0445, y, z], \n            test:\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430. \u0421\u043f\u0438\u0441\u043e\u043a: [\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043c\u0435\u0442\u043a\u0438-\u043e\u0442\u0432\u0435\u0442\u044b], \n            classes_count: \u043a\u043e\u043b-\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n    param - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n        \u0421\u043b\u043e\u0432\u0430\u0440\u044c. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f: \n            conlayers: \u0447\u0438\u0441\u043b\u043e (\u0446\u0435\u043b\u043e\u0435) \u043a\u043e\u043d\u0432\u043e\u043b\u044e\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0451\u0432 \n            dense_neurons: \u0447\u0438\u0441\u043b\u043e (\u0446\u0435\u043b\u043e\u0435) \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u043d\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b.\u0441\u043b\u043e\u0435\n            epocs: \u0447\u0438\u0441\u043b\u043e (\u0446\u0435\u043b\u043e\u0435) \u044d\u043f\u043e\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f,\n            batch_size: \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430 (\u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e), \n            validation_split:\u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 (0.0-1.0)\n\"\"\"\ndef experiment(prep_data, param):\n    if param == None:\n        param = dict()\n    conlayers = param.get(\"conlayers\", 2)\n    dense_neurons = param.get(\"dense_neurons\", 64)\n    epocs = param.get(\"epocs\", 2)\n    batch_size = param.get(\"batch_size\", 100)\n    validation_split = param.get(\"validation_split\", 0.2)\n    \n    data = prep_data.get(\"data\")\n    shape = prep_data.get(\"shape\")\n    test_data = prep_data.get(\"test\")\n    classes_count = prep_data.get(\"classes_count\")\n    \n    # \u0430\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0441\u0442\u0438 \u0444\u0438\u0433\u0443\u0440\u044b\n    vector = (shape[1]==1) and (len(shape)<3 or shape[2] == 1)\n    \n    # \u0435\u0441\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u0432\u0435\u043a\u0442\u043e\u0440 - \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u0441\u0435\u0442\u044c \u043a\u0430\u043a \u0434\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430\n    if vector:\n        model = create_network_1D(conlayers, \n                           shape, \n                           classes_count, \n                           dense_neurons=dense_neurons)\n    else:    \n        model = create_network(conlayers, \n                           shape, \n                           classes_count, \n                           dense_neurons=dense_neurons)\n    # print(\"exp: network created!\") \n    \n    compile_network(model)\n    # print(\"exp: network compiled!\") \n    \n    import time\n    start = time.time()\n    fit(model, data, batch_size, epocs, validation_split)\n    time = time.time() - start\n    \n    acc = 0\n    if test_data != None:\n        acc = test(model, test_data)\n    \n    return {\n        \"model\":model, \n        \"fit_time\":time, \n        \"accuracy\":acc}\n\n","2826554a":"'''\ntest_params = {\"conlayers\":3, \n              \"dense_neurons\": 64, \n              \"epocs\":3,\n              \"batch_size\":100, \n              \"validation_splits\":0.2}\n\n\n'''","32e3d642":"# for MNIST\n'''\nmnist_data = mnist()\nres = experiment(mnist_data, test_params)\nres\n'''","f8ef2ca4":"# for NSL_KDD\n\n# nsl_data = NSL_KDD()","7f901b34":"# res = experiment(nsl_data, test_params)\n# res","ae964034":"\"\"\"\ntest_data = nsl_data[\"test\"]\nmodel = res[\"model\"]\nscore = model.predict(test_data[0], verbose = 0)\nscore = np.argmax(score, axis=1)\nanswers = test_data[1]\ngood = 0\ncount = len(score)\nif len(answers)<count:\n    count = len(answers)\nfor i in range(0, count-1):\n    if int(score[i]) == int(answers[i]):\n        good += 1\nacc = good\/count\nprint(\"acc = \"+str(acc))\nprint(\"good=\"+str(good))\nprint(\"count=\"+str(count))\n\"\"\"","c12f8c75":"#for i in range(0, count-1):\n#    print(str(score[i])+\" | \"+str(answers[i]))","87b12af2":"\n'''\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 \u043d\u0430\u0431\u043e\u0440\u044b. \n\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u043e\u0447\u0435\u0440\u0451\u0434\u043d\u043e \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c, \u0437\u0430\u043c\u0435\u0449\u0430\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439\n\u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 k \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 (k - \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e\n\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 k \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0432\u043e\u043f\u043b\u043e\u0449\u0430\u0435\u0442 \u0441\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442). \ndefined - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438\nkeys - \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 (\u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f)\nindex - \u0438\u043d\u0434\u0435\u043a\u0441 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 (\u043a\u043b\u044e\u0447 \u2116...)\nparam_set - \u043e\u0431\u0449\u0435\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 (\u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f)\n\u0432\u043e\u0437\u0432\u0440\u0430\u0442 - \"\u0440\u0430\u0437\u0432\u0451\u0440\u043d\u0443\u0442\u043e\u0435\" \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0434\u043b\u044f \n    \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430. \n    \u0422.\u0435. \u0438\u0441\u0445\u043e\u0434\u043d\u043e \u0434\u0430\u043d\u043e: \n        {a : [1,2,3], b : [4,5]}\n    \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0444-\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430: \n        [ \n            {a:1, b:4}, {a:1, b:5}\n            {a:2, b:4}, {a:2, b:5}\n            {a:3, b:4}, {a:3, b:5}\n        ]\n'''\ndef expand(param_set):\n    keys = list(param_set.keys())\n    dest = [param_set.copy()]\n    for k in keys:\n        variants = param_set[k]\n        count = len(variants)\n        if count==0:\n            for d in dest:\n                del d[k]\n            continue\n        if count==1:\n            for d in dest:\n                d[k] = variants[0]\n            continue\n        new_dest = []\n        for case in dest:\n            for var in variants:\n                d_case = case.copy()\n                d_case[k] = var\n                new_dest.append(d_case)\n        dest = new_dest\n    return dest\n    \n\"\"\"\ndata - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \n    (data, shape, train, classes_count)\nparam_set - \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e-\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f\n    \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432. \u0415\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e\n    \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430, \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043e\u043d\u044b\u0439, \u0430 \u043f\u043e\u0442\u043e\u043c - \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \n    \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0433\u0434\u0435 \u043d\u0430\u0431\u043e\u0440\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \n    \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 \n    (conlayers, dense_neurons, epocs, batch_size, validation_split)\n    \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \n    (fit_time, accuracy)\n\u0412\u044b\u0432\u043e\u0434: \n    \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439\n    \n\u0412\u0410\u0416\u041d\u041e! \n    \u0412 \u0441\u0435\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \n    \u0441\u043b\u043e\u0432\u0430\u0440\u044f\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432,\u0447\u0442\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f experiment. \n    \u0442.\u0435. \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \"batch_sizes\" - \u0442\u043e\u043b\u044c\u043a\u043e \"batch_size\", \n    \u0432 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 (\u043d\u0443 \u0438 \u0442.\u0434. \u0438 \u0442.\u043f.). \n    \u042d\u0442\u043e \u043d\u0430\u0434\u043e, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0438\u043d\u0438-\u0441\u043b\u043e\u0432\u0430\u0440\u0438, \n    \u0430 \u0442\u0435 \u0438\u0434\u0443\u0442 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e. \n    \u041a\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 - \u0441\u043c. \u0432 docstring-\u0435 \u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 expand. \n\"\"\"\n\ndef experiments_for_data(data, param_set, **kwargs):\n    experiments = expand(param_set)\n    results = []\n    do_print = kwargs.get(\"print\", False)\n    num = 1\n    for param in experiments:\n        res = experiment(data, param)\n        exp = dict()\n        exp.update(param)\n        exp.update(res)\n        results.append(exp)\n        if do_print:\n            print('Experiment #'+str(num)+\" done!\")\n            print(exp)\n    return results","c1babb67":"def save_csv(dictlist, path, **kwargs):\n    import pandas as pd\n    df = pd.DataFrame(dictlist)\n    # \u0442\u044f\u043d\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u043b\u044f \u0438\u0433\u043d\u043e\u0440\u0430 \n    # (\u043c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0444\u0430\u0439\u043b \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u0442\u043e\u043c\u0443 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435\n    # \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0435 \u0434\u043e\u0431\u0440\u043e)\n    ignored = kwargs.get(\"ignore_cols\", [\"model\"])\n    # \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0444\u0440\u0435\u0439\u043c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u043f\u043e\u0440\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438\n    for i in ignored:\n        del df[i]\n    df.to_csv(path, sep='\\t', encoding='utf-8')\n    pass","fe4fb20f":"# \u043f\u0441\u0435\u0432\u0434\u043e\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043d\u043d\u044f \u0437\u0431\u0435\u0440\u0435\u0436\u0435\u043d\u043d\u044f \u0432 .csv\ntest_results = [\n    {\n        \"conlayers\":2, \n        \"dense_neurons\": 64, \n        \"epocs\":2,\n        \"batch_size\":100, \n        \"validation_split\":0.2,\n        \"model\":None, \n        \"fit_time\":100, \n        \"accuracy\":0.95 \n    }, \n    {\n        \"conlayers\":2, \n        \"dense_neurons\": 64, \n        \"epocs\":3,\n        \"batch_size\":100, \n        \"validation_split\":0.2,\n        \"model\":None, \n        \"fit_time\":200, \n        \"accuracy\":0.99 \n    }\n]\n\n# path = \".\/test.csv\"\n# ignore = ['model']\n# save_csv(test_results, path, ignore_cols=ignore)","7369375d":"\"\"\"\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432. \n\u041a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 - 1 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442. \n    conlayers - \u043a\u043e\u043d\u0432\u043e\u043b\u044e\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 (\u0447\u0438\u0441\u043b\u043e, 2 - \u043c\u0438\u043d\u0438\u043c\u0443\u043c)\n    dense_neurons - \u043d\u0435\u0439\u0440\u043e\u043d\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043b\u043e\u044f\n    epocs - \u0447\u0438\u0441\u043b\u043e \u044d\u043f\u043e\u0445\n    batch_size - \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043f\u0430\u043a\u0435\u0442\u043e\u0432\n    validation_split - \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043f\u043e\u0441\u043b\u0435 \u044d\u043f\u043e\u0445\u0438\n\"\"\"\npar_set = {\n    \"conlayers\":[2,3,4,5], \n    \"dense_neurons\": [64], \n    \"epocs\":[2,3,4],\n    \"batch_size\":[50, 100, 200, 400], \n    \"validation_split\":[0.2]}\n\nsmall_par_set = {\n        \"conlayers\":[2], \n        \"dense_neurons\": [64], \n        \"epocs\":[2,3],\n        \"batch_size\":[50, 100], \n        \"validation_split\":[0.2]}","e62191ec":"def main(loader, par_set, dstpath):\n    dataset = loader()\n    res = experiments_for_data(dataset, par_set)\n    save_csv(res, dstpath)\n    pass","b25c4998":"def use_mnist(par_set, dstpath):\n    main(mnist, par_set, dstpath)\n    pass","6218fe07":"# MNIST Dataset\nmnist_small_res_path = \".\/mnist_small.csv\"\nmnist_res_path = \".\/mnist.csv\"\n\n# 4 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\n# main(mnist, small_par_set, mnist_small_res_path)\n# \u0432\u0441\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b (48 \u0448\u0442\u0443\u043a) \n# main(mnist, par_set, mnist_res_path)","8995aa96":"# NSL Dataset\nnsl_small_res_path = \".\/nsl_small.csv\"\nnsl_res_path = \".\/nsl.csv\"\n\n# 4 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\n# main(NSL_KDD, small_par_set, nsl_small_res_path)\n# \u0432\u0441\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b (48 \u0448\u0442\u0443\u043a) \n# main(NSL_KDD, par_set, nsl_res_path)","a48cecda":"\"\"\"\n\u0421\u0435\u0442\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438. \u041a\u043b\u043e\u0430\u0441\u0441 \u0441\u043e\u0437\u0434\u0430\u043d \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \n\u0426\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b - \u0441\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u0442\u0435\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432, \n\u0447\u0442\u043e \u0443\u0436\u0435 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0438\u0441\u044c. \n\"\"\"\nclass Grid:\n    data = dict()\n    \n    def _init_(self, data):\n        self.data = data\n        pass\n    \n    def get(self, point, default=None):\n        subdict = self.data.get(point[0])\n        if subdict is None:\n            return default\n        val = subdict.get(point[1], default)\n        return val\n    \n    def exist(self, point):\n        return not (get(point) is None)\n    \n    def put(self, point, value):\n        subdict = self.data.get(point[0])\n        if subdict is None:\n            subdict = dict()\n            self.data[point[0]] = subdict\n        val = subdict.get(point[1])\n        subdict[point[1]] = value\n        return val \n    \n    def clear(self):\n        return self.data.clear()","02abf670":"\"\"\"\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0442\u043e\u0447\u043a\u0435. \n\u0417\u0430\u0434\u0430\u0447\u0430 - \u0430\u0431\u0441\u0442\u0440\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0442\u043e\u0433\u043e, \u0431\u0435\u0440\u0451\u0442\u0441\u044f \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437\n\u0438\u043b\u0438 \u0432\u044b\u0442\u044f\u0433\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u0435\u0442\u043a\u0438. \u0418\u0437\u0432\u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u043e\u0432 - \n\u0430 \u0432\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044e, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043b\u043e\u0436\u0438\u0442\u0441\u044f \u043d\u0430 \n\u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434. \n\"\"\"\ndef getVal_Grid(point, func, grid):\n    if grid is None:\n        return func(point)\n    else:\n        val = grid.get(point)\n        if val == None:\n            val = func(point)\n            grid.put(point, val)\n        return val\n\ndef getVal_dict(point, func, grid):\n    subdict = self.data.get(point[0])  \n    if subdict is None:\n        subdict = dict()\n        grid_dict_of_dict[point[0]] = subdict\n    val = subdict.get(point[1], None)\n    if val is None:\n        val = func(point)\n        grid_dict_of_dict[point[0]][point[1]] = val\n    return val\n\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c)\n# \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 - \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0438 \u0437\u0430\u043e\u0434\u043d\u043e \u0437\u0430\u043d\u043e\u0441\u0438\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n# \u0432\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u0434\u0442\u0438 \u0442\u0443\u0442 \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0443\u0442\n# \u0434\u043b\u044f \u0432\u0441\u0435\u0433\u043e \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u043a\u043e\u0434\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0435\u0441\u0442\u044c (\u0438\u043b\u0438 \u0435\u0451 \u043d\u0435\u0442)\n# \u0447\u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u0438 \u043a\u0430\u043a \u043e\u043d\u043e \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0435\u043c\u0443 \u043a\u043e\u0434\u0430 \u0434\u043e \u043b\u0430\u043c\u043f\u043e\u0447\u043a\u0438\ndef getValue(point, func, grid=None):\n    if grid is None:\n        return func(point)\n    if isinstance(grid, Grid):\n        return getVal_Grid(point, func, grid)\n    if isinstance(grid, dict):\n        return getVal_dict(point, func, grid)\n    return func(point)","f834521f":"# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0443\u0445 \u0442\u043e\u0447\u0435\u043a\ndef equals(point1, point2):\n    if len(point1) != len(point2):\n        return False\n    for i in range(0, len(point1)):\n        if point1[i] != point2[i]:\n            return False\n    return True\n\n'''\n\u0418\u0449\u0435\u0442 4 \u043e\u043a\u0440\u0443\u0436\u0430\u0449\u0438\u0435 \u0442\u043e\u0447\u043a\u0438 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0434\u043b\u044f \u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \n\u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a\n'''\ndef getPoints(point, func, step, grid=None):\n    # \u0418\u0434\u0451\u043c \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 \u0432 4 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445\n    P1 = [point[0]+step[0], point[1]]\n    P2 = [point[0]-step[0], point[1]]\n    P3 = [point[0], point[1]+step[1]]\n    P4 = [point[0], point[1]-step[1]]\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439\n    v1 = getValue(P1, func, grid)\n    v2 = getValue(P2, func, grid)\n    v3 = getValue(P3, func, grid)\n    v4 = getValue(P4, func, grid)\n    value = getValue(point, func, grid)\n    results = [(point, value), \n               (P1, v1), \n               (P2, v2), \n               (P3, v3), \n               (P4, v4)]\n    results.sort(key = lambda t: -t[1])\n    return results\n\n'''\n\u0418\u0434\u0435\u044f: \n    \u0415\u0441\u0442\u044c \u0442\u043e\u0447\u043a\u0430 \u043d\u0430 2-\u043c\u0435\u0440\u043d\u043e\u0439 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438, \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f\n    \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \n    \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u0440\u0435\u043a\u0443\u0440\u0435\u043d\u0442\u043d\u043e. \n    1. \u041e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0438\u0434\u0451\u043c \u0432 4 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\n    2. \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n    3. \u0415\u0441\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u043b\u0438\u0441\u044c \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u0443\u044e - \u043e\u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0438\u0432\u0430\u0435\u043c \u0448\u0430\u0433\u0438 \u043f\u043e \u043e\u0441\u044f\u043c\n        \u0415\u0441\u043b\u0438 \u043d\u0435 \u0432\u044b\u0448\u043b\u043e - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 (\u043e\u043d\u0430 \u043b\u0443\u0447\u0448\u0430\u044f \u0438 \u0432\u0441\u0451 \n        \u0442\u0443\u0442)\n    4. \u0415\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u0430\u044f \u043b\u0443\u0447\u0448\u0430\u044f \u043d\u0435 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 - \u0438\u0434\u0451\u043c \u043a \u043b\u0443\u0447\u0448\u0435\u0439\n    5. \u0415\u0441\u043b\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u0430 - \u043e\u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0438\u0432\u0430\u0435\u043c \u0448\u0430\u0433\u0438 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439\n    6. \u0415\u0441\u043b\u0438 \u043d\u0435 \u043e\u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f - \u0432\u0441\u0451, \u043a\u043e\u043d\u0435\u0446, \u043f\u0440\u0438\u043f\u043b\u044b\u043b\u0438.\n'''\ndef getMax2D(point, step, func, **param):\n    \n    grid = param.get(\"grid\", None)\n    value = param.get(\"value\", getValue(point, func, grid))\n    limitation = param.get(\"limitation\", -1)\n    \n    # \u0435\u0441\u043b\u0438 \u043b\u0438\u043c\u0438\u0442 \u0448\u0430\u0433\u043e\u0432 \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043d - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0430\u043c\u0443 \u0442\u043e\u0447\u043a\u0443\n    if limitation == 0:\n        return [point, value]\n    \n    results = getPoints(point, func, step, grid)\n    \n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n    best = results[0]\n    \n    print(str(limitation)+': ('+\n               str(best[0][0])+','+\n               str(best[0][1])+') = '+\n               str(best[1]))\n    \n    if equals(best[0], point):\n        step_0 = step[0] \/\/ 2\n        step_1 = step[1] \/\/ 2\n        if step_0 == 0 and step_1 == 0:\n            return [point, value]\n        else:\n            step = [step_0, step_1]\n    res = getMax2D(best[0], \n                    step, \n                    func, \n                    grid = grid, \n                    limitation = limitation-1, \n                    value = best[1])\n    if res[1] > value:\n        return res\n    else:\n        return [point, value]","8d33c043":"\"\"\"\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \n\u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435, \u0442\u0443\u0442 - \u043d\u0438\u0447\u0435\u0433\u043e \u0443\u043c\u043d\u043e\u0433\u043e, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u043e\u0432\n\"\"\"\ndef best_value(point, step, func, limitation = 1000, grid = None):\n    import pandas as pd\n    if grid is None:\n        grid = Grid()\n    res = getMax2D(point, \n                    step, \n                    func, \n                    grid = grid, \n                    limitation = limitation)\n    # \u043f\u043e\u0441\u0442\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430. \n    # \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c, \u043d\u043e \u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u043e\u0431\u043e\u0439\u0434\u0451\u043c\u0441\u044f \u0431\u0435\u0437 \u043d\u0435\u0451. \n    if False:\n        pass\n    else:\n        return res","593a3569":"\"\"\"\n\u041d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0442\u0435\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b. \n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0437\u044f\u0442\u0430 \u043e\u0442 \u0444\u043e\u043d\u0430\u0440\u044f. \n\"\"\"\n'''\ndef f(point):\n    x, y = point[0], point[1]\n    return x**2 - 4*x + x*y - y**2\n\nt = best_value([0,0], [4, 4], f, 5)\nprint('('+str(t[0][0])+','+str(t[0][1])+') = '+str(t[1]))\n'''","b4a95f3f":"# \u0441\u0435\u0442 \u0433\u0440\u0443\u0437\u0438\u043c \u0437\u0430\u0440\u0430\u043d\u0435\u0435\nmnist_data = mnist()","8e654bb3":"# \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 \u043a\u0430\u043a \u0444-\u0446\u0438\u0438 \u043e\u0442 \u0442\u043e\u0447\u043a\u0438\ndef f_for_mnist(point):\n    if point[0]<=0 or point[1]<=0:\n        return 0.0\n    test_params = {\"conlayers\":2, \n              \"dense_neurons\": 64, \n              \"epocs\":point[0],\n              \"batch_size\":point[1], \n              \"validation_splits\":0.2}\n    res = experiment(mnist_data, test_params)\n    return res[\"accuracy\"]","e6c5688a":"# \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0435\nt = best_value([2, 50], [8, 512], f_for_mnist, 100)\nprint('('+str(t[0][0])+','+str(t[0][1])+') = '+str(t[1]))","461a116d":"def getMax2D_Grad(point, step, func, **param):\n    grid = param.get(\"grid\", None)\n    value = param.get(\"value\", getValue(point, func, grid))\n    limitation = param.get(\"limitation\", -1)\n    epsilon = param.get(\"epsilon\", 0)\n    \n    # \u0435\u0441\u043b\u0438 \u043b\u0438\u043c\u0438\u0442 \u0448\u0430\u0433\u043e\u0432 \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043d - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0430\u043c\u0443 \u0442\u043e\u0447\u043a\u0443\n    if limitation == 0:\n        return [point, value]\n    \n    # \u0418\u0434\u0451\u043c \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 \u0432 4 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u0445\n    P1 = [point[0]+step[0], point[1]]\n    P2 = [point[0]-step[0], point[1]]\n    P3 = [point[0], point[1]+step[1]]\n    P4 = [point[0], point[1]-step[1]]\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439\n    v1 = getValue(P1, func, grid)\n    v2 = getValue(P2, func, grid)\n    v3 = getValue(P3, func, grid)\n    v4 = getValue(P4, func, grid)\n\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\n    dz_to_dx = (v1 - v2) \/ (2*step[0])\n    dz_to_dy = (v3 - v4) \/ (2*step[1])\n    grad = (dz_to_dx, dz_to_dy)\n    \n    # \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\n    # \u0441\u0443\u0442\u044c - \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0448\u0430\u0433\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438\n    # \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u043a \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0433\u0443\n    # \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0443 \u043d\u0430\u0441 d\/dx \u0438 d\/dy - \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b (\u043c\u0435\u043d\u044c\u0448\u0435 0,5)\n    # \u0430 \u043f\u043e\u0442\u043e\u043c\u0443 \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0438\u043c \u0432\u0441\u0435 \u044f\u0447\u0435\u0439\u043a\u0438 \u043d\u0430 \u043e\u0431\u0449\u0435\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435\n    # \u0442\u0430\u043a \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0448\u0430\u0433\u0438\n    grad_norm = grad[:]\/grad[0]*grad[1]\n    \n    # \u0442\u0443\u0442 \u043c\u044b \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u043a \u0446\u0435\u043b\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443, \u043f\u043e\u043b\u0443\u0447\u0430\u044f \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f\n    shifts = int(grad_norm[:])\n    \n    # \u0438\u0449\u0435\u043c \u0442\u043e\u0447\u043a\u0443, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0430\u043d\u043e\u0439\n    while (not shifts.all(0)):\n        nxt = [point[0] + shifts[0], point[1] + shifts[1]]\n        v_nxt = getValue(nxt)\n        if v_nxt > value:\n            # \u0438\u0434\u0451\u043c \u043d\u0430 \u0441\u043b\u0435\u0434.\u0442\u043e\u0447\u043a\u0443\n            res = getMax2D_Grad(\n                nxt, \n                step, \n                func, \n                grid = grid,\n                value = v_nxt, \n                limitation = limitation - 1\n            )\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u0441\u044f\n            if res[1] < value:\n                return [point, value]\n            else:\n                return res\n        else:\n            # \u0434\u0435\u043b\u0438\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e \u043d\u0430 2\n            # \u043d\u0430\u043c \u0432\u0430\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0434\u043e\u043b\u044c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430\n            # \u0435\u0441\u043b\u0438 \u0438\u0437-\u0437\u0430 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0451\u043c - \u043d\u0438\u0447\u0435\u0433\u043e\n            # \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u0432 \u0442\u043e\u0447\u043a\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u044b\n            # \u0430 \u0435\u0441\u043b\u0438 \u0437\u0430\u043d\u0443\u043b\u0438\u043c\u0441\u044f - \u043d\u0443 \u0438 \u0444\u0438\u0433 \u0441 \u043d\u0438\u043c\n            shifts = shifts \/\/ 2\n            continue\n    else:\n        # \u0435\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0434\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u044f\n        # \u0437\u0430\u043d\u0443\u043b\u0438\u043b\u0438\u0441\u044c, \u0430 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 - \u043d\u0435\u0442. \n        # \u0442\u0443\u0442 \u043d\u0430\u043c \u0432\u0430\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u043d\u0430\u0448\u0430 \u0442\u043e\u0447\u043a\u0430 - \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0430\u044f\n        # \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445, \u043a\u043e\u0433\u043e \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435\n        # \u0435\u0441\u043b\u0438 \u0434\u0430 - \u0442\u043e \u043c\u044b \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0435, \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442\n        # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 - \u043d\u0430\u0434\u043e \u0431\u044b \u043f\u0440\u043e\u0433\u0443\u043b\u044f\u0442\u044c\u0441\u044f \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043b\u0443\u0447\u0448\u0435\u0439\n        # \u043f\u0440\u044f\u043c \u043a\u0430\u043a \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0435\n        results = [(point, value), \n               (P1, v1), \n               (P2, v2), \n               (P3, v3), \n               (P4, v4)]\n        results.sort(key = lambda t: -t[1])\n        # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043b\u0443\u0447\u0448\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n        best = results[0]\n        print(str(limitation)+': ('+\n               str(best[0][0])+','+\n               str(best[0][1])+') = '+\n               str(best[1]))\n        if equals(best[0], point):\n            step_0 = step[0] \/\/ 2\n            step_1 = step[1] \/\/ 2\n            if step_0 == 0 and step_1 == 0:\n                return [point, value]\n            else:\n                step = [step_0, step_1]\n               \n        res = getMax2D_Grad(best[0], \n                    step, \n                    func, \n                    grid = grid, \n                    limitation = limitation-1, \n                    value = best[1])\n        if res[1] > value:\n            return res\n        else:\n            return [point, value]\n                \n            \n        \n    ","41ccb783":"## 2.1. MNIST\n\n","a71496c5":"![image_2020-12-04_12-01-19%20%281%29.png](attachment:image_2020-12-04_12-01-19%20%281%29.png)\n(\u043f\u043e\u043b\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0443 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u0440\u0456\u0432\u043d\u044f)","8f6f5955":"\u041f\u0440\u0438\u043a\u043b\u0430\u0434 \u0432\u043c\u0456\u0441\u0442\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443: \n![image.png](attachment:image.png)","4a1a55bf":"## 3.1. \u041d\u0443 \u0449\u043e, \u043f\u043e\u0433\u0430\u043d\u044f\u0454\u043c\u043e?!\n\n\u041f\u043e\u0440\u0430 \u0431 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0443\u0432\u0430\u0442\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u043a\u043e\u0434. \u041f\u0456\u0441\u043b\u044f \u0443\u0441\u043f\u0456\u0448\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0443 \u043a\u043e\u0434 \u0431\u0443\u0434\u0435 (\u0442\u043e\u0447\u043d\u0456\u0448\u0435, \u0431\u0443\u043b\u043e) \u0437\u0430\u043a\u0440\u0438\u0442\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u044f\u043c\u0438: \u0449\u043e\u0431 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0432\u0441\u044c\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0443 \u0447\u0430\u0441 \u043d\u0435 \u0432\u0438\u0442\u0440\u0430\u0447\u0430\u0442\u0438. ","b369e624":"# 2. Data - \u043d\u0430\u0448\u0435 \u0432\u0441\u0435\n\n\u041f\u0435\u0440\u0448 \u043d\u0456\u0436 \u043f\u043e\u0447\u0438\u043d\u0430\u0442\u0438 \u0440\u043e\u0431\u043e\u0442\u0443 \u0442\u0440\u0435\u0431\u0430 \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0438\u0442\u0438 \u0434\u0430\u043d\u0456 \u0442\u0430 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c \u0457\u0445 \u043f\u0456\u0434\u0433\u043e\u0442\u0443\u0432\u0430\u0442\u0438. \u041f\u0440\u0438\u043d\u0446\u0438\u043f \u043f\u0440\u043e\u0441\u0442\u0438\u0439: \n- \u043a\u043e\u0436\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0456\u044f - \u0441\u0432\u0456\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n- \u0432\u0438\u0432\u0456\u0434 - \u043e\u0434\u043d\u043e\u0442\u0438\u043f\u043d\u0438\u0439 (\u0441\u043b\u043e\u0432\u043d\u0438\u043a, \u0432 \u044f\u043a\u043e\u043c\u0443 \u0454 \u043e\u0434\u043d\u0456 \u0439 \u0442\u0456 \u0436 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c\u0443 \u0456 \u0442\u043e\u043c\u0443 \u0436 \u0444\u043e\u0440\u043c\u0430\u0442\u0456)","24695141":"# 6. \u0421\u0442\u0440\u0430\u0448\u043d\u0438\u0439 \u0421\u0443\u0434\n\n\u0406 \u0431\u0443\u0434\u0435 \u0437\u043d\u0430\u0439\u0434\u0435\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0444\u0443\u043d\u043a\u0446\u0456\u0457 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0456 \u0437\u0430\u043b\u0435\u0436\u043d\u043e \u0432\u0456\u0434 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432 epochs \u0442\u0430 batch_size, \u0456 \u0443\u0432\u0456\u0439\u0434\u0435 \u043a\u0440\u0430\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0426\u0430\u0440\u0441\u0442\u0432\u043e \u041a\u0443\u0440\u0441\u043e\u0432\u0435, \u043f\u043e\u0433\u0430\u043d\u0456 \u0436 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u0431\u0443\u0434\u0435 \u0432\u0456\u0434\u043a\u0438\u043d\u0443\u0442\u043e \u0443 \u0442\u0435\u043c\u0440\u044f\u0432\u0443 \u0437\u043e\u0432\u043d\u0456\u0448\u043d\u044e, \u0434\u0435 \u0437\u0431\u0456\u0440\u043a\u0430 \u0441\u043c\u0456\u0442\u0442\u044f \u0442\u0430 \u0441\u043a\u0440\u0435\u0436\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043a\u0438. ","37db6935":"# \u041a\u0443\u0440\u0441\u043e\u0432\u0430 \u0440\u043e\u0431\u043e\u0442\u0430\n\u0417 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0456\u043d\u0438 \"\u0421\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u0435, \u043d\u0435\u0439\u0440\u043e\u043c\u0435\u0440\u0435\u0436\u0435\u0432\u0435 \u0442\u0430 \u0435\u043c\u0435\u0440\u0434\u0436\u0435\u043d\u0442\u043d\u0435 \u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f\"\n\n\u0412\u0438\u043a\u043e\u043d\u0430\u043b\u0438: \n\u0413\u043e\u043d\u0447\u0430\u0440\u0435\u043d\u043a\u043e \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440, \u0433\u0440\u0443\u043f\u0430 \u0406\u0412-91\u043c\u043d\n\u041a\u043e\u0440\u0435\u043d\u043a\u043e \u0414\u043c\u0438\u0442\u0440\u043e, \u0433\u0440\u0443\u043f\u0430 \u0406\u0412-91\u043c\u043d","07e3f59e":"# 3. \u0415\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442 - \u0434\u0456\u043b\u043e \u0441\u0432\u044f\u0442\u0435\n\n\u0422\u0443\u0442 - \u043a\u043e\u0434 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0443 \u0437 \u0447\u0456\u0442\u043a\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438. \u041f\u043e \u0441\u0443\u0442\u0456 - \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u0430 \u0440\u043e\u0431\u043e\u0442\u0430 \u21161, \u0430\u043b\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u0433\u043e\u0432\u0430\u043d\u0430 \u0432\u0456\u0434 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c. ","a97ffe89":"![image_2020-12-04_11-58-02.png](attachment:image_2020-12-04_11-58-02.png)\n(\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u0440\u0443\u043a\u043e\u043f\u0438\u0441\u043d\u0438\u0445 \u0446\u0438\u0444\u0440 \u0434\u043b\u044f \u043d\u0430\u043e\u0447\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0443)","5998075f":"## 1.1. \u0417\u0430\u043d\u0430\u0447\u043a\u0430 \u0437 \u043a\u043e\u0440\u0438\u0441\u043d\u043e\u0441\u0442\u044f\u043c\u0438\n\n\u041f\u0435\u0440\u0448 \u043d\u0456\u0436 \u043a\u0438\u0434\u0430\u0442\u0438\u0441\u044c \u0432\u0438\u0440\u0456\u0448\u0443\u0432\u0430\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432\u0430\u0440\u0442\u043e \u043f\u0456\u0434\u0433\u043e\u0442\u0443\u0432\u0430\u0442\u0438 \u0441\u043e\u0431\u0456 \u043f\u0456\u0434\u0433\u0440\u0443\u043d\u0442\u044f. \u0404 \u0434\u0435\u044f\u043a\u0456 \u0434\u0456\u0457, \u044f\u043a\u0456 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0456 \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u0437\u0430\u0432\u0434\u0430\u043d\u043d\u044f \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0432\u0430\u0442\u0438\u0441\u044c. \u0425\u043e\u0440\u043e\u0448\u0430 \u0456\u0434\u0435\u044f - \u043e\u043f\u0438\u0441\u0430\u0442\u0438 \u0457\u0445 \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0444\u0443\u043d\u043a\u0446\u0456\u0439. \n\u0429\u043e \u0441\u044e\u0434\u0438 \u0432\u0456\u0434\u043d\u043e\u0441\u0438\u0442\u044c\u0441\u044f. \n- \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0435\u043d\u043d\u044f \u0437 \u0444\u0430\u0439\u043b\u0443\n- \u043f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u0438\u0445\n- \u0444\u043e\u0440\u043c\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u0435\u0440\u0435\u0436\u0456\n- \u043a\u043e\u043c\u043f\u0456\u043b\u044f\u0446\u0456\u044f \u043c\u0435\u0440\u0435\u0436\u0456\n- \u043d\u0430\u0432\u0447\u0430\u043d\u043d\u044f \u043c\u0435\u0440\u0435\u0436\u0456","13131dff":"# 5. \u041c\u043e\u043c\u0435\u043d\u0442 \u0456\u0441\u0442\u0438\u043d\u0438\n\n\u041a\u043e\u043b\u0438 \u043a\u043e\u0434\u0438 \u0434\u043b\u044f \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0456\u0432 \u0437\u0456\u0439\u0434\u0443\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0456\u0437 \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u043e\u0432\u043e\u0457 \u0431\u0435\u0437\u043e\u0434\u043d\u0456 \u043f\u043e\u0441\u0442\u0430\u043d\u0435 \u0432\u0435\u043b\u0438\u043a\u0438\u0439 \u0441\u043b\u043e\u0432\u043d\u0438\u043a par_set, \u0434\u0435 \u0432\u0441\u0456 \u043c\u043e\u0436\u043b\u0438\u0432\u0456 \u0432\u0430\u0440\u0456\u0430\u043d\u0442\u0438 \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0456\u0432 \u0441\u043f\u043b\u044f\u0442\u044c \u0443 \u0432\u0456\u0447\u043d\u043e\u043c\u0443 \u0441\u043d\u0456. \u0406 \u043a\u043e\u043b\u0438 \u0447\u0430\u0441 \u043d\u0430\u0441\u0442\u0430\u043d\u0435, \u043f\u0440\u043e\u0446\u0435\u0441\u043e\u0440 \u043f\u043e\u043a\u043b\u0438\u0447\u0435 \u0456\u0437 \u0441\u0445\u043e\u0432\u0438\u0449\u0430 \u0434\u0430\u043d\u0456, \u0456 \u0437\u0430\u0432\u0430\u043d\u0442\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432\u043e\u043d\u0438 \u0443 \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u043d\u0456 \u0437\u043c\u0456\u043d\u043d\u0456, \u0456 \u0442\u043e\u0434\u0456 \u043f\u043e\u0440\u043e\u0434\u0438\u0442\u044c par_set \u043d\u0430\u0449\u0430\u0434\u043a\u0456\u0432 \u0441\u043e\u0431\u0456 (\u0456 \u0447\u0438\u0441\u043b\u043e \u0457\u043c 48). \u041f\u043e \u0447\u0435\u0440\u0437\u0456 \u0432\u043e\u043d\u0438 \u0443\u0432\u0456\u0439\u0434\u0443\u0442\u044c \u0443 \u0441\u0432\u044f\u0442\u0430 \u0441\u0432\u044f\u0442\u0438\u0445, \u0432 \u0444\u0443\u043d\u043a\u0446\u0456\u044e \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0443, \u0456 \u043f\u043e\u0440\u043e\u0434\u044f\u0442\u044c \u0441\u043e\u0431\u0456 \u043c\u043e\u0434\u0435\u043b\u0456 \u043f\u043e \u0447\u0438\u0441\u043b\u0443 \u0441\u0432\u043e\u0454\u043c\u043e, \u0456 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u044f\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043a\u0440\u0456\u0437\u044c \u043d\u0438\u0445, \u0449\u043e\u0431\u0438 \u0431\u0443\u043b\u0430 \u0432\u0438\u043c\u0456\u0440\u044f\u043d\u0430 \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044c. \u0406 \u043f\u043e\u0431\u0430\u0447\u0438\u0442\u044c to_csv \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u0457\u0445, \u0456 \u0437\u0431\u0435\u0440\u0435\u0436\u0435 \u0457\u0445 \u0443 \u0444\u0430\u0439\u043b .csv, \u0437\u0432\u0456\u0434\u043a\u0438 \u0432\u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442\u044c \u0432\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0456 \u0432 \u043a\u0443\u0440\u0441\u043e\u0432\u0443 \u0440\u043e\u0431\u043e\u0442\u0443. \u0410\u043c\u0456\u043d\u044c! ","504aa0e4":"# 1. \u041f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u043e \u0431\u043e\u044e","6bad29b6":"\u0424\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u043d\u0438\u0445: \n![image.png](attachment:image.png)\n\n\u0422\u043e\u0431\u0442\u043e: \u043a\u043e\u0436\u043d\u0435 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0454\u0442\u044c\u0441\u044f \u0443 \u0432\u0438\u0433\u043b\u044f\u0434\u0456 \u0440\u044f\u0434\u043a\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0456. \u0412 \u0440\u044f\u0434\u043a\u0443 \u0454 \u043f\u043e\u043b\u0435 id (\u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u0438\u0439 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f), label (\u0446\u0438\u0444\u0440\u0430, \u044f\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043d\u0430 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u0456) \u0456 784 (28x28) \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0449\u043e \u043c\u0456\u0441\u0442\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043f\u0456\u043a\u0441\u0435\u043b\u0456\u0432. \u0417\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u044f - \u0447\u043e\u0440\u043d\u043e-\u0431\u0456\u043b\u0435 (\u0442\u043e\u0431\u0442\u043e, \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u043c\u0438 \u043f\u0456\u043a\u0441\u0435\u043b\u0456\u0432 \u0454 \u0447\u0438\u0441\u043b\u0430 \u0432\u0456\u0434 0 \u0434\u043e 255). \n\n\u041d\u0430 \u0436\u0430\u043b\u044c, \u043f\u043e\u0432\u043d\u0438\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0438\u0439 \u043f\u0440\u0438\u043a\u043b\u0430\u0434 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u0441\u0438\u0442\u044c \u0441\u043a\u043b\u0430\u0434\u043d\u043e, \u043e\u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u0432\u0456\u043d \u0441\u044e\u0434\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0432\u043b\u0456\u0437\u0435. \u0422\u043e\u043c\u0443 \u0434\u0438\u0432. \u0442\u0430\u0431\u043b\u0438\u0446\u044e \u0456 \u043f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u044c.  ","05f08937":"# 4. \u0420\u0430\u0437\u043e\u043c \u043d\u0430\u0441 \u0431\u0430\u0433\u0430\u0442\u043e!\n\n\u0422\u0443\u0442 - \u043a\u043e\u0434, \u0449\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u0433\u0440\u0443\u043f\u0443 \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0456\u0432. \u0406\u0434\u0435\u044f - \u043f\u0440\u043e\u0441\u0442\u0456\u0448\u0435 \u043d\u0435\u043c\u0430 \u043a\u0443\u0434\u0438: \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0437\u044f\u0442\u0438 \u0432\u0436\u0435 \u043d\u0430\u044f\u0432\u043d\u0438\u0439 \u043a\u043e\u0434, \u043d\u0430\u043c\u0430\u043b\u044e\u0432\u0430\u0442\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0432\u0430\u0440\u0456\u0430\u043d\u0442\u0456\u0432 \u0456 \u043f\u0440\u043e\u0433\u043d\u0430\u0442\u0438 \u043f\u043e \u0447\u0435\u0440\u0437\u0456 \u0441\u0442\u0456\u043b\u044c\u043a\u0438 \u0440\u0430\u0437\u0456\u0432, \u0441\u043a\u0456\u043b\u044c\u043a\u0438 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e.","04990f8f":"## 4.1. \u0412\u0440\u044f\u0442\u0443\u0439 \u0442\u0430 \u0437\u0431\u0435\u0440\u0435\u0436\u0438!\n\n\u0417\u0431\u0435\u0440\u0435\u0436\u0435\u043d\u043d\u044f \u0432 .csv. \u041a\u043e\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438 \u0454 - \u0457\u0445 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u0432\u0438\u0432\u0435\u0441\u0442\u0438. \u0422\u0430\u043a \u0456 \u0434\u0456\u0430\u0433\u0440\u0430\u043c\u0438 \u043c\u0430\u043b\u044e\u0432\u0430\u0442\u0438 \u0437\u0440\u0443\u0447\u043d\u0456\u0448\u0435, \u0456 \u0442\u0430\u0431\u043b\u0438\u0446\u0456 \u0454. ","c75f6bd2":"# 7. \u0416\u0430\u0445\u0438 \u043f\u043e\u0441\u0442\u0430\u043f\u043e\u043a\u0430\u043b\u0456\u043f\u0441\u0438\u0441\u0443\n\n\u0421\u043f\u0440\u043e\u0431\u0430 \u043e\u043f\u0442\u0438\u043c\u0456\u0437\u0443\u0432\u0430\u0442\u0438 \u0440\u043e\u0431\u043e\u0442\u0443 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0441\u0442\u043e\u0441\u0443\u0432\u0430\u043d\u043d\u044f \u0433\u0440\u0430\u0434\u0456\u0454\u043d\u0442\u0443. \n\u0429\u043e \u0437\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c - \u0434\u0438\u0432. \u0442\u0435\u043a\u0441\u0442 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0457 \u0440\u043e\u0431\u043e\u0442\u0438. \n\u041d\u0435 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u043b\u043e\u0441\u044c \u0456 \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u043e\u0441\u044c.\n\n\u041e\u0431'\u0454\u043a\u0442\u0443 \u043f\u0440\u0438\u0441\u0432\u043e\u0454\u043d\u043e \u043a\u043b\u0430\u0441 \u043a\u0435\u0442\u0435\u0440. \u0417\u0431\u0435\u0440\u0456\u0433\u0430\u0442\u0438 \u0432 \u0434\u0430\u043d\u043e\u043c\u0443 \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0456. \u0423 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0441\u0430\u043c\u043e\u0432\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0442\u0435\u0440\u043c\u0456\u043d\u043e\u0432\u043e \u043f\u0435\u0440\u0435\u0440\u0432\u0430\u0442\u0438 \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f. \u042f\u043a\u0449\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u043f\u0435\u0440\u0435\u0440\u0432\u0430\u0442\u0438 \u043d\u0435 \u0432\u0434\u0430\u0454\u0442\u044c\u0441\u044f - \u0437\u0430\u0434\u0456\u044f\u0442\u0438 [\u0412\u0418\u0414\u0410\u041b\u0415\u041d\u041e]. \u041d\u0435\u0432\u0447\u0430\u0441\u043d\u0430 \u0440\u0435\u0430\u043a\u0446\u0456\u044f \u043d\u0430 \u0437\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u0436\u0435 \u043f\u0440\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u0434\u043e \u043d\u0430\u0441\u0442\u0430\u043d\u043d\u044f \u043f\u043e\u0434\u0456\u0457 \u043a\u043b\u0430\u0441\u0443 \u041a.\n\n\u041e\u043f\u0438\u0441. \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0434\u0430\u043d\u0438\u0439 \u043a\u043e\u0434 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0454 \u25fb\u25fb\u25fb\u25fb\u25fb\u25fb\u25fb\u25fb\u25fb\u25fb, \u0449\u043e \u043f\u043e\u0440\u043e\u0434\u0436\u0443\u0454 \u25fb\u25fb\u25fb\u25fb\u25fb\u25fb. \u0426\u0435, \u0432 \u0441\u0432\u043e\u044e \u0447\u0435\u0440\u0433\u0443, \u0432\u043f\u043b\u0438\u0432\u0430\u0454 \u043d\u0430 [\u0412\u0418\u0414\u0410\u041b\u0415\u041d\u041e] \u0456 \u043f\u0440\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e [\u0414\u0410\u041d\u0406 \u0412\u0418\u0414\u0410\u041b\u0415\u041d\u0406]. ","1d14a24c":"\u0406\u043c\u043f\u043e\u0440\u0442\u0443\u0454\u043c\u043e \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0438 \u0442\u0430 \u0444\u0430\u0439\u043b\u043e\u0432\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u0443\n(\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0456 \u0456\u043c\u043f\u043e\u0440\u0442\u0438)","52a86d6c":"\u0412\u0441\u0435 \u0437\u0430\u043a\u043e\u043c\u0435\u043d\u0442\u043e\u0432\u0430\u043d\u043e \u0449\u043e\u0431 \u0447\u0430\u0441 \u043d\u0435 \u0432\u0438\u0442\u0440\u0430\u0447\u0430\u0442\u0438. ","65dcabb5":"# \u0412\u0441\u0442\u0443\u043f\n\n\u0412 \u0434\u0430\u043d\u043e\u043c\u0443 \u0444\u0456\u0439\u043b\u0456 \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u043d\u044f \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0457 \u0440\u043e\u0431\u043e\u0442\u0438. \u0412\u0430\u0440\u0442\u043e \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0442\u0438, \u0449\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456 \u0456 \u043c\u0456\u0442\u043a\u0438 \u0442\u0443\u0442 \u043e\u0440\u0456\u0454\u043d\u0442\u043e\u0432\u0430\u043d\u0456 \u0431\u0456\u043b\u044c\u0448\u0435 \u043d\u0430 \u0430\u0432\u0442\u043e\u0440\u0441\u044c\u043a\u0438\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0442\u0438\u0432 \u0442\u0430 \u0456\u043d\u0448\u0438\u0445 \u043f\u043e\u0434\u0456\u0431\u043d\u0438\u0445 \u0447\u0438\u0442\u0430\u0447\u0456\u0432. \u0412\u043e\u043d\u0438 \u043d\u0435 \u0454 \u043e\u0444\u0456\u0446\u0456\u0439\u043d\u043e\u044e \u0447\u0430\u0441\u0442\u0438\u043d\u043e\u044e \u0440\u043e\u0431\u043e\u0442\u0438 \u044f\u043a \u0442\u0430\u043a\u043e\u0457. \n\n- \u0422\u0443\u0442 \u043d\u0435\u043c\u0430\u0454 \u043e\u0444\u0456\u0446\u0456\u043e\u0437\u0443. \n- \u0422\u0443\u0442 \u043d\u0435\u043c\u0430\u0454 \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u044f. \n- \u0422\u0443\u0442 \u043d\u0435\u043c\u0430\u0454 \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0441\u0435\u043d\u0441\u0443 \u0442\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0433\u043b\u0443\u0437\u0434\u0443. \n- \u0422\u0443\u0442 \u0454 \u0436\u0430\u0440\u0442\u0438\u043a\u0438, \u0435\u043f\u0456\u0442\u0435\u0442\u0438, \u043c\u0435\u0442\u0430\u0444\u043e\u0440\u0438 \u0442\u0430 \u0456\u043d\u0448\u0430 \u0445\u0443\u0434\u043e\u0436\u043d\u044f \u043b\u0456\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430. \n- \u041c\u043e\u0432\u0430 \u0442\u0435\u043a\u0441\u0442\u0443 - \"\u044f\u043a\u0430 \u0454\". \u0404 \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430, \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u0430, \u0440\u0456\u0434\u0448\u0435 - \u0430\u043d\u0433\u043b\u0456\u0439\u0441\u044c\u043a\u0430. \u0406\u043d\u043e\u0434\u0456 \u043c\u043e\u0432\u0430 \u0442\u0435\u043a\u0441\u0442\u0443 \u043c\u0456\u043d\u044f\u0454\u0442\u044c\u0441\u044f \u0434\u0443\u0436\u0435 \u0440\u0456\u0437\u043a\u043e \u0456 \u0431\u0435\u0437 \u0443\u0441\u044f\u043a\u043e\u0433\u043e \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u043d\u044f. \u0426\u0435 \u0442\u043e\u043c\u0443 \u0449\u043e \u0434\u0435\u043a\u043e\u043c\u0443 (\u0442\u043e\u0431\u0442\u043e - \u0430\u0432\u0442\u043e\u0440\u0443 \u0442\u0435\u043a\u0441\u0442\u0443) \u0431\u0443\u043b\u043e \u043b\u0456\u043d\u044c \u043d\u0430\u0442\u0438\u0441\u043d\u0443\u0442\u0438 ctrl+alt. \n- \u041b\u044e\u0434\u0438\u043d\u0430, \u0449\u043e \u043f\u0438\u0441\u0430\u043b\u0430 \u0446\u0435\u0439 \u0442\u0435\u043a\u0441\u0442 \u0456 \u0446\u0435\u0439 \u043a\u043e\u0434 \u044f\u0432\u043d\u043e \u043d\u0435 \u0454 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u044e. \u0410\u043b\u0435 \u044f\u043a\u0449\u043e \u043a\u043e\u0434 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u0440\u0438\u0432\u0438\u0439, \u0442\u043e \u0449\u043e\u0434\u043e \u043a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0456\u0432 \u0454 \u0433\u0456\u043f\u043e\u0442\u0435\u0437\u0430, \u0449\u043e \u0442\u0443\u0442 \u043d\u0435 \u043e\u0431\u0456\u0439\u0448\u043b\u043e\u0441\u044c \u0431\u0435\u0437 \u0434\u0438\u044f\u0432\u043e\u043b\u044c\u0441\u044c\u043a\u0438\u0445 \u043f\u0456\u0434\u0441\u0442\u0443\u043f\u0456\u0432, \u0432\u043f\u043b\u0438\u0432\u0443 \u0432\u0430\u0440\u043f\u0443 \u0442\u0430 \u043c\u043e\u0433\u0443\u0442\u043d\u043e\u0441\u0442\u0456 \u0434\u0430\u0432\u043d\u043e \u0437\u0430\u0431\u0443\u0442\u0438\u0445 \u0442\u0435\u043c\u043d\u0438\u0445 \u0431\u043e\u0433\u0456\u0432, \u0449\u043e \u043c\u0435\u0440\u0442\u0432\u0438\u043c \u0441\u043d\u043e\u043c \u0441\u043f\u043b\u044f\u0442\u044c \u0432 \u0447\u043e\u0440\u043d\u0456\u0439 \u0431\u0435\u0437\u043e\u0434\u043d\u0456 \u0437\u0430 \u043c\u0435\u0436\u0435\u044e \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0456. \u0422\u0430\u043c, \u0432 \u0436\u0430\u0445\u043b\u0438\u0432\u043e\u043c\u0443 \u0442\u0435\u043c\u043d\u043e\u043c\u0443 \u0446\u0438\u043a\u043b\u043e\u043f\u0456\u0447\u043d\u043e\u043c\u0443 \u043f\u0430\u043b\u0430\u0446\u0456, \u043f\u0456\u0434 \u0430\u0440\u0438\u0442\u043c\u0456\u0447\u043d\u0456 \u0437\u0432\u0443\u043a\u0438 \u0432\u0438\u043a\u0440\u0438\u0432\u043b\u0435\u043d\u0438\u0445 \u0444\u043b\u0435\u0439\u0442 \u0442\u0430\u043d\u0446\u044e\u044e\u0442\u044c \u0441\u0442\u0440\u0430\u0445\u0456\u0442\u043b\u0438\u0432\u0456 \u0434\u0435\u043c\u043e\u043d\u0438, \u0432\u0438\u0433\u043b\u044f\u0434 \u044f\u043a\u0438\u0445 \u0437\u0434\u0430\u0442\u0435\u043d \u0437\u0432\u0435\u0441\u0442\u0438 \u0437 \u0440\u043e\u0437\u0443\u043c\u0443 \u043d\u0430\u0432\u0456\u0442\u044c \u043d\u0430\u0439\u0434\u043e\u0441\u0432\u0456\u0434\u0447\u0435\u043d\u0456\u0448\u043e\u0433\u043e \u0434\u043e\u0441\u043b\u0456\u0434\u043d\u0438\u043a\u0430 \u043e\u043a\u043a\u0443\u043b\u044c\u0442\u043d\u0438\u0445 \u0433\u043b\u0438\u0431\u0438\u043d. \u0406 \u0432 \u0441\u0432\u043e\u0454\u043c\u0443 \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443, \u043c\u0435\u0440\u0437\u0435\u043d\u043d\u043e\u043c\u0443 \u0442\u0430 \u043f\u043e\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u043e\u043c\u0443 \u0432\u0441\u044f\u043a\u043e\u0457 \u043b\u043e\u0433\u0456\u043a\u0438 \u0442\u0430\u043d\u0446\u0456 \u0432\u043e\u043d\u0438 \u0441\u043f\u0456\u0432\u0430\u044e\u0442\u044c \u043f\u0456\u0441\u043d\u044e, \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u044e\u0447\u0438 \u0456\u0437 \u043d\u0435\u0431\u0443\u0442\u0442\u044f \u0436\u0430\u0445\u043b\u0438\u0432\u0438\u0445 \u043f\u043e\u0442\u0432\u043e\u0440, \u0432\u0438\u043a\u0440\u0438\u0432\u043b\u044e\u044e\u0447\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c, \u0434\u0430\u044e\u0447\u0438 \u0431\u0435\u0437\u0443\u043c\u0441\u0442\u0432\u0443 \u0444\u043e\u0440\u043c\u0443 \u0442\u0430 \u0440\u043e\u0437\u0442\u0430\u0448\u0443\u0432\u0430\u043d\u043d\u044f. \u0421\u0435\u0440\u0435\u0434 \u0446\u0438\u0445 \u043a\u043e\u0448\u043c\u0430\u0440\u0456\u0432, \u0432 \u0432\u0456\u0447\u043d\u0456\u0439 \u0442\u0435\u043c\u0440\u044f\u0432\u0456, \u0449\u043e \u0440\u043e\u0437\u0440\u0438\u0432\u0430\u0454\u0442\u044c\u0441\u044f \u0432\u0456\u0434 \u043a\u0440\u0438\u043a\u0456\u0432 \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0437\u0430\u043a\u0430\u0442\u043e\u0432\u0430\u043d\u0438\u0445 \u0434\u0443\u0448, \u043a\u043d\u044f\u0437\u044c \u0434\u0435\u043c\u043e\u043d\u0456\u0432 \u0410\u0437\u0430\u0442\u043e\u0442 \u0432\u0456\u0447\u043d\u043e \u0441\u043f\u043e\u0433\u043b\u044f\u0434\u0430\u0454 \u0446\u0435\u0439 \u0431\u043e\u0436\u0435\u0432\u0456\u043b\u044c\u043d\u0438\u0439 \u0442\u0430\u043d\u043e\u043a, \u043b\u0438\u0448\u0435 \u0456\u043d\u043e\u0434\u0456 \u0432\u0456\u0434\u0432\u043e\u043b\u0456\u043a\u0430\u044e\u0447\u0438\u0441\u044c, \u043a\u0438\u0434\u0430\u044e\u0447\u0438 \u0441\u0432\u0456\u0439 \u043f\u043e\u0433\u043b\u044f\u0434 \u043d\u0430 \u043c\u0430\u0442\u0435\u0440\u0456\u0430\u043b\u044c\u043d\u0438\u0439 \u0441\u0432\u0456\u0442, \u0456 \u0446\u0435\u0439 \u043f\u043e\u0433\u043b\u044f\u0434 \u043f\u043e\u0440\u043e\u0434\u0436\u0443\u0454 \u0443 \u043f\u0456\u0434\u0441\u0432\u0456\u0434\u043e\u043c\u043e\u0441\u0442\u0456 \u0441\u043c\u0435\u0440\u0442\u043d\u0438\u0445 \u0431\u043e\u0433\u043e\u0445\u0443\u043b\u044c\u043d\u0456 \u0432\u0438\u0434\u0456\u043d\u043d\u044f, \u043b\u0435\u0434\u044c \u0443\u0441\u0432\u0456\u0434\u043e\u043c\u043b\u044e\u0432\u0430\u043d\u0438\u0439 \u043e\u0431\u0440\u0430\u0437 \u043d\u0435\u0432\u0438\u043c\u043e\u0432\u043d\u043e\u0433\u043e \u0436\u0430\u0445\u0443, \u0449\u043e \u0446\u0430\u0440\u044e\u0454 \u0437\u0430 \u043c\u0435\u0436\u0430\u043c\u0438 \u0437\u0432\u0438\u0447\u043d\u043e\u0457 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0456, \u0432\u0456\u0447\u043d\u043e \u0433\u043e\u043b\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0448\u043c\u0430\u0440\u0443, \u044f\u043a\u0438\u0439 \u0442\u0456\u043b\u044c\u043a\u0438-\u043d\u043e \u0447\u0435\u043a\u0430\u0454 \u0441\u0432\u043e\u0433\u043e \u0447\u0430\u0441\u0443, \u043a\u043e\u043b\u0438 \u043c\u0435\u0436\u0430, \u0449\u043e \u0432\u0456\u0434\u0434\u0456\u043b\u044f\u0454 \u043d\u0430\u0448 \u0441\u0432\u0456\u0442 \u0432\u0456\u0434 \u0445\u0430\u043e\u0441\u0443 \u0440\u043e\u0437\u0456\u0440\u0432\u0435\u0442\u044c\u0441\u044f, \u0432\u043f\u0443\u0441\u043a\u0430\u044e\u0447\u0438 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u0434\u0430\u0432\u043d\u043e \u0437\u0430\u0431\u0443\u0442\u0435 \u0437\u043b\u043e. \u0426\u0435\u0439 \u0431\u0435\u0437\u043b\u0438\u043a\u0438\u0439 \u0436\u0430\u0445, \u043f\u043e\u0440\u043e\u0434\u0436\u0435\u043d\u0438\u0439 \u0432\u043e\u043b\u043e\u0434\u0430\u0440\u0435\u043c \u0437\u043b\u0430, \u043f\u0440\u043e\u043d\u0438\u043a\u0430\u0454 \u043a\u0440\u0456\u0437\u044c \u0442\u0440\u0456\u0449\u0438\u043d\u0438 \u0432 \u0441\u0432\u0456\u0442\u043e\u0431\u0443\u0434\u043e\u0432\u0456, \u0437\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0441\u0432\u043e\u0454 \u043c\u0456\u0441\u0446\u0435 \u0432 \u0440\u043e\u0437\u0443\u043c\u0456 \u043d\u0435\u0441\u0447\u0430\u0441\u043d\u0438\u0445, \u0449\u043e \u043f\u043e\u0442\u0440\u0430\u043f\u043b\u044f\u044e\u0442\u044c\u0441\u044f \u0439\u043e\u043c\u0443 \u043d\u0430 \u0448\u043b\u044f\u0445\u0443, \u0456 \u0432\u0442\u0456\u043b\u044e\u0454\u0442\u044c\u0441\u044f \u043d\u0438\u043c\u0438 \u0432 \u043f\u0438\u0441\u044c\u043c\u0435\u043d\u0430, \u044f\u043a\u0438\u043c \u043d\u0435 \u043c\u0456\u0441\u0446\u0435 \u0432 \u0446\u044c\u043e\u043c\u0443 \u0441\u0432\u0456\u0442\u0456. \u0422\u0430\u043a \u0437'\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u043d\u0435\u0447\u0435\u0441\u0442\u0438\u0432\u0438\u0439 \u041d\u0435\u043a\u0440\u043e\u043d\u043e\u043c\u0456\u043a\u043e\u043d, \u043f\u043e\u0432\u043d\u0438\u0439 \u0442\u0435\u043c\u043d\u0438\u0445 \u0437\u0430\u043a\u043b\u044f\u0442\u044c \u0442\u0430 \u0440\u0438\u0442\u0443\u0430\u043b\u0456\u0432, \u0449\u043e \u0434\u0430\u0454 \u0447\u0435\u0440\u043d\u043e\u043a\u043d\u0438\u0436\u043d\u0438\u043a\u0430\u043c \u0437\u043c\u043e\u0433\u0443 \u0432\u0438\u043a\u043b\u0438\u043a\u0430\u0442\u0438 \u0456\u0441\u0442\u043e\u0442 \u0456\u0437 \u043f\u043e\u0442\u043e\u0439\u0431\u0456\u0447\u0447\u0430. \u0422\u0430\u043a \u0437'\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u0447\u0438\u0441\u0435\u043b\u044c\u043d\u0456 \u0442\u0432\u043e\u0440\u0438 \u043f\u0440\u043e \u0441\u0442\u0440\u0430\u0448\u043d\u0456 \u0440\u0435\u0447\u0456 \u0437\u0430 \u043c\u0435\u0436\u0430\u043c\u0438 \u0443\u044f\u0432\u0438, \u0449\u043e \u0434\u0430\u044e\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0438\u043c \u0441\u043c\u0435\u0440\u0442\u043d\u0438\u043c \u0437\u043c\u043e\u0433\u0443 \u043f\u0440\u0438\u0442\u043e\u0440\u043a\u043d\u0443\u0442\u0438\u0441\u044c \u0434\u043e \u0442\u043e\u0433\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0436\u0430\u0445\u0443 \u0437-\u0437\u0430 \u043c\u0435\u0436. \u0422\u0430\u043a \u0437'\u044f\u0432\u0438\u0432\u0441\u044f \u0442\u0435\u043a\u0441\u0442 \u0434\u0430\u043d\u043e\u0457 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0457 \u0440\u043e\u0431\u043e\u0442\u0438. \u041d\u0430\u0441\u043e\u043b\u043e\u0434\u0436\u0443\u0439\u0442\u0435\u0441\u044c! :)\n\u0422\u043e\u043c\u0443 \u044f\u043a\u0449\u043e \u0432\u0438 - \u0432\u0438\u043a\u043b\u0430\u0434\u0430\u0447, \u0456 \u0432\u0438 \u0447\u0438\u0442\u0430\u0454\u0442\u0435 \u0446\u0435\u0439 \u0442\u0435\u043a\u0441\u0442 - \u0432\u0438 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u0436\u0435\u043d\u0456. \u0410\u0432\u0442\u043e\u0440\u0438 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442\u044c \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u043b\u044c\u043d\u0456\u0441\u0442\u044c \u0437\u0430 \u0432\u0441\u0456 \u043d\u0430\u0441\u043b\u0456\u0434\u043a\u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u043d\u044f  \u0442\u0435\u043a\u0441\u0442\u0443 \u0434\u0430\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0443, \u043d\u0430\u043a\u0448\u0442\u0430\u043b\u0442: \n- \u043d\u0456\u0447\u043d\u0438\u0445 \u043a\u043e\u0448\u043c\u0430\u0440\u0456\u0432\n- \u043d\u0435\u0447\u0435\u0441\u0442\u0438\u0432\u0438\u0445 \u0432\u0438\u0434\u0456\u043d\u044c \u0442\u0430 \u0433\u0430\u043b\u044e\u0446\u0456\u043d\u0430\u0446\u0456\u0439\n- \u0434\u0438\u0432\u043d\u0438\u0445 \u0432\u0438\u043f\u0430\u0434\u043a\u0456\u0432\n- \u0441\u043f\u043e\u043d\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0443\u0448\u0435\u043d\u043d\u044f \u0437\u0430\u043a\u043e\u043d\u0456\u0432 \u0444\u0456\u0437\u0438\u043a\u0438\n- \u0431\u043e\u0436\u0435\u0432\u0456\u043b\u043b\u044f\n- \u0440\u0443\u0439\u043d\u0443\u0432\u0430\u043d\u044c \u0431\u0443\u0434\u044c-\u044f\u043a\u043e\u0433\u043e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0443 \n- \u0441\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u043d\u043e\u0432\u0438\u0445 \u0441\u0432\u0456\u0442\u0456\u0432 \u0447\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439\n- \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u043e\u0433\u043e \u0432\u0438\u043a\u043b\u0438\u043a\u0443 \u0440\u0456\u0437\u043d\u043e\u043c\u0430\u043d\u0456\u0442\u043d\u0438\u0445 \u0441\u0443\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u0437 \u0442\u043e\u0433\u043e \u0431\u043e\u043a\u0443 \u0431\u0443\u0442\u0442\u044f\n- \u0432\u0456\u0434\u043a\u0440\u0438\u0442\u0442\u044f \u043f\u043e\u0440\u0442\u0430\u043b\u0456\u0432 \u0432 \u043f\u0430\u0440\u0430\u043b\u0435\u043b\u044c\u043d\u0456 \u0441\u0432\u0456\u0442\u0438, \u0441\u043f\u043e\u043d\u0442\u0430\u043d\u043d\u0438\u0445 \u0434\u0435\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u0439 \u0447\u0430\u0441\u043e\u043f\u0440\u043e\u0441\u0442\u043e\u0440\u0443\n- \u043a\u0456\u043d\u0446\u044f \u0441\u0432\u0456\u0442\u0443\n- \u043f\u0435\u0440\u043c\u0430\u043d\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043f\u043e\u0440\u0442\u0432\u043e\u0440\u0435\u043d\u043d\u044f \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0445 \u0437\u0430\u043a\u043e\u043d\u0456\u0432 \u0441\u0432\u0456\u0442\u043e\u0431\u0443\u0434\u043e\u0432\u0438\n- \u043e\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f \u0437\u0430\u0434\u043e\u0432\u043e\u043b\u0435\u043d\u043d\u044f\n\u0422\u0430\u043a \u0449\u043e, \u044f\u043a\u0449\u043e \u0432\u0438 \u0437\u0433\u043e\u0434\u043d\u0456 \u043f\u0440\u0438\u0439\u043d\u044f\u0442\u0438 \u0440\u0438\u0437\u0438\u043a\u0438 - \u043f\u0440\u0438\u0454\u043c\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u043d\u043d\u044f :)","88a5858d":"## 2.2. NSL KDD"}}