{"cell_type":{"a3258006":"code","aad47aff":"code","68b1e948":"code","a9264510":"code","544288c6":"code","a3ce2787":"code","15a6fd3a":"code","5cf99e7a":"code","f3959e16":"code","a1ad20f6":"code","0edef268":"code","fa032cdb":"code","a8295aca":"code","27c1a4c0":"code","bd7c7585":"code","c503fce6":"code","352bfca2":"code","c56f8e54":"code","1c2d4233":"code","ee7d14c8":"code","925b41b0":"code","97830265":"code","f4e7f506":"code","dd62f880":"code","231b2994":"code","e5d1892e":"code","eaf7d02a":"code","fbc28b7e":"code","7f683f4c":"code","06cdbcac":"code","c0763faa":"code","40ae47ff":"code","7efc0958":"code","3a173f56":"code","c76c84c0":"code","fadfe265":"code","a8fd0cbe":"code","aaf3140b":"code","0aba1da5":"code","ef4a1bca":"code","d9e3c045":"code","566805e6":"code","359e836f":"code","c974e9a7":"code","d2c7fa3a":"code","d034d3e1":"code","3dc0a643":"code","1b8e18ee":"code","be37cccf":"code","b631c0a2":"code","f01d59e2":"code","fb226cd5":"code","f05a02f9":"code","4a5c297c":"code","1f7da377":"code","1ab9774b":"code","63df88ee":"code","c58cf689":"code","3ff606b8":"code","974e2602":"code","77b63bd1":"code","fef18b0a":"code","35175da9":"code","755857f3":"code","7043b7eb":"markdown","9f07a88c":"markdown","213e9d40":"markdown","72ac6f9c":"markdown","f98a0ef3":"markdown","533e564a":"markdown","169d0d4a":"markdown","7d6e89ae":"markdown","3b61faf1":"markdown","b5f8611a":"markdown","de488d50":"markdown","9a62214c":"markdown","1ceaae42":"markdown","84ac562b":"markdown","9429508d":"markdown","a355bcb3":"markdown","c5e37bea":"markdown","d6352aff":"markdown","b6581156":"markdown","d998780d":"markdown","bd93a3bd":"markdown","33a9bf04":"markdown","bdada869":"markdown","84f0462d":"markdown","29805b09":"markdown"},"source":{"a3258006":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","aad47aff":"%matplotlib inline\nfrom pandas_profiling import ProfileReport\nimport pandas.util.testing as tm","68b1e948":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a9264510":"data_file_path = \"\/kaggle\/input\/videogamesales\/vgsales.csv\"\ncompanie_region_path = \"\/kaggle\/input\/videogamescompaniesregions\/video-games-developers.csv\"\ntotal_sales_column = \"Total_Sales\"","544288c6":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]\n\nplt.rcParams['axes.facecolor'] = primary_bgcolor\n\ncolors = [primary_blue, primary_blue2, primary_blue3, primary_grey, primary_black, primary_bgcolor, primary_green]\nsns.palplot(sns.color_palette(colors))","a3ce2787":"# Load core data\ndata_df = pd.read_csv(data_file_path)\ndata_df.head()","15a6fd3a":"# Load companie-region data\nregion_df = pd.read_csv(companie_region_path)\nregion_df.head()","5cf99e7a":"df = pd.merge(data_df, region_df[['Developer', 'Country']], left_on='Publisher', right_on='Developer', how='left')\ndf.head()","f3959e16":"df.columns","a1ad20f6":"vgames_profile = ProfileReport(df, title='Video Games Profile Report')","0edef268":"vgames_profile","fa032cdb":"if 'Total_Shipped' in df.columns:\n    df[total_sales_column] = df['Total_Shipped'].fillna(0) + df['Global_Sales'].fillna(0)\nelse:\n    regions = ['NA', 'JP', 'EU', 'Other']\n    region_sales_sufix = '_Sales'\n    \n    df[total_sales_column] = df['Global_Sales']","a8295aca":"tdf = df.copy()\n# tdf['Year'] = df['Year'].fillna(df['Year'].mean())\ntdf = df[df['Year'].notna()] # Carefull about this\ntdf = tdf.sort_values('Year', ascending=True)","27c1a4c0":"fig = px.histogram(\n    tdf,\n    x='Platform',\n    animation_frame='Year',\n    range_y=[0, 550],\n)\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","bd7c7585":"top_tdf = tdf.groupby(['Platform', 'Year']).agg({total_sales_column: 'count'}).reset_index()\ntop_tdf.columns = ['Platform', 'Year', 'Count']\ntop_tdf = top_tdf[top_tdf['Year'].isin([2016, 2017, 2018, 2019])]\ntop_tdf = top_tdf[top_tdf['Count'] > top_tdf['Count'].sum() * 0.01]\ntop_tdf['Year'] = top_tdf['Year'].astype(str)\n","c503fce6":"fig = px.bar(\n    top_tdf,\n    x='Platform',\n    y='Count',\n    color='Year',\n    barmode=\"group\"\n)\nfig.update_layout(title=\"Total released video-games by platform\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","352bfca2":"platform_tops = ['PS4', 'PSV', 'XOne', 'PC']","c56f8e54":"platform_tdf = tdf.groupby(['Platform', 'Year']).agg({total_sales_column: 'sum'}).reset_index()\nplatform_tdf = platform_tdf.sort_values('Year', ascending=True)\nplatform_tdf.head()","1c2d4233":"fig = px.bar(\n    platform_tdf,\n    x='Platform',\n    y=total_sales_column,\n    animation_frame='Year',\n    range_y=[0, 150],\n)\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","ee7d14c8":"platform_top_tdf = platform_tdf[platform_tdf['Year'].isin([2016, 2017, 2018, 2019])]\nplatform_top_tdf = platform_top_tdf[platform_top_tdf[total_sales_column] > platform_top_tdf[total_sales_column].sum() * 0.005]\nplatform_top_tdf['Year'] = platform_top_tdf['Year'].astype(str)\n\nfig = px.bar(\n    platform_top_tdf,\n    x='Platform',\n    y=total_sales_column,\n    color='Year',\n    barmode=\"group\"\n)\nfig.update_layout(title=\"Total sales by platforms (Millions)\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","925b41b0":"platform_sum_tdf = platform_tdf.groupby(['Platform']).agg({total_sales_column: 'sum'}).reset_index()\nplatform_sum_tdf = platform_sum_tdf[platform_sum_tdf[total_sales_column] > platform_sum_tdf[total_sales_column].sum() * 0.03]","97830265":"fig = px.bar(\n    platform_sum_tdf,\n    x='Platform',\n    y=total_sales_column,\n)\nfig.update_layout(title=\"Total sales of all time in the most important platforms (Millions)\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","f4e7f506":"platform_tmp_tdf = tdf.groupby(['Platform', 'Year']).agg({total_sales_column: ['sum', 'count']})\n# Here we can check ","dd62f880":"df.head()","231b2994":"if 'Total_Shipped' in df.columns:\n    regions = ['NA', 'JP', 'PAL', 'Other']\nelse:\n    regions = ['NA', 'JP', 'EU', 'Other']\n\nregion_sales_sufix = '_Sales'\nregions_agg = {}\n\nfor region in regions:\n    regions_agg[region + region_sales_sufix] = 'sum'\n\nregions_agg[total_sales_column] = 'sum'\nregions_agg","e5d1892e":"geo_tdf = tdf.groupby(['Year']).agg(regions_agg).reset_index()\ngeo_tdf = geo_tdf.sort_values('Year', ascending=True)\ngeo_tdf.head(10)","eaf7d02a":"fig = go.Figure()\n\nfor region in regions:\n    \n    fig.add_trace(go.Scatter(\n        x=geo_tdf['Year'], \n        y=geo_tdf[region + region_sales_sufix], \n        mode='lines',\n        name=region,\n    ))\nfig.update_layout(title=\"Total sales per year by region (Millions)\")\nfig.update_xaxes(type='category')\nfig.show()","fbc28b7e":"# Thanks to @amritachatterjee09 for this cool function\n\nyear_geo_df = tdf[[\"Year\",'NA_Sales','EU_Sales','JP_Sales','Other_Sales']]\n\nyear_geo_df[['NA_mean','EU_mean','JP_mean','Other_mean']] = year_geo_df.groupby('Year')[['NA_Sales','EU_Sales','JP_Sales','Other_Sales']].transform('sum')\nyear_geo_df = year_geo_df.drop(['NA_Sales','EU_Sales','JP_Sales','Other_Sales'], axis=1)\nyear_geo_df = year_geo_df.drop_duplicates()\nyear_geo_df = year_geo_df.sort_values(\"Year\")\n\ntemp_df1 = pd.DataFrame({'Place': ['NA_Sales']*year_geo_df.shape[0], 'Year':year_geo_df['Year'], 'Sales': year_geo_df['NA_mean']})\ntemp_df2 = pd.DataFrame({'Place': ['EU_Sales']*year_geo_df.shape[0], 'Year': year_geo_df['Year'], 'Sales': year_geo_df['EU_mean']})\ntemp_df3 = pd.DataFrame({'Place': ['JP_Sales']*year_geo_df.shape[0], 'Year': year_geo_df['Year'], 'Sales': year_geo_df['JP_mean']})\ntemp_df4 = pd.DataFrame({'Place': ['Other_Sales']*year_geo_df.shape[0], 'Year': year_geo_df['Year'], 'Sales': year_geo_df['Other_mean']})\n\nfinal = pd.concat([temp_df1,temp_df2,temp_df3,temp_df4], axis=0)\nfinal = final.sort_values(\"Year\")\n\nfig=px.bar(\n    final,\n    x='Place', \n    y=\"Sales\", \n    animation_frame=\"Year\",\n    animation_group=\"Place\", \n    color=\"Place\", \n    hover_name=\"Place\",\n    range_y=[0, 200]\n)\nfig.update_layout(title=\"Year sales distribution by region\",title_x=0.5)\n\nfig.show()","7f683f4c":"genre_tdf = tdf.groupby(['Genre']).agg(regions_agg)\ngenre_tdf = genre_tdf.sort_values(total_sales_column, ascending=False)\ngenre_tdf.head()","06cdbcac":"fig = px.imshow(genre_tdf.drop(total_sales_column, 1).T)\nfig.update_layout(title=\"Sales distribution by genre and region (Millions)\")\nfig.show()","c0763faa":"genre_last_tdf = tdf[tdf['Year'].isin([2016, 2017, 2018, 2019])]\ngenre_last_tdf = genre_last_tdf.groupby(['Genre']).agg(regions_agg)\ngenre_last_tdf = genre_last_tdf.sort_values(total_sales_column, ascending=False)\ngenre_last_tdf.head()","40ae47ff":"fig = px.imshow(genre_last_tdf.drop(total_sales_column, 1).T)\nfig.update_layout(title=\"Sales distribution by genre and region (Millions) last four years\")\nfig.show()","7efc0958":"# Reorder df to total genre scattewr plot\ngenre_total_tdf = genre_tdf.reset_index().sort_values(total_sales_column, ascending=False)","3a173f56":"fig = go.Figure()\n    \nfig.add_trace(go.Scatter(\n    x=genre_total_tdf['Genre'], \n    y=genre_total_tdf[total_sales_column], \n    mode='lines+markers',\n))\nfig.update_layout(title=\"Total sales by genre (Millions)\")\nfig.update_xaxes(type='category')\n# fig.update_xaxes(categoryorder='total descending')\nfig.show()","c76c84c0":"genre_tops = list(genre_total_tdf.loc[genre_total_tdf[total_sales_column] > genre_total_tdf[total_sales_column].sum() * 0.03, 'Genre'])\ngenre_tops","fadfe265":"genre_tops_df = tdf[tdf['Genre'].isin(genre_tops)]\n\nfig = px.pie(genre_tops_df,\n             values=total_sales_column,\n             names='Genre',\n             title='Population of European continent',\n             hover_data=['Genre'], \n             labels={'lifeExp':'Video Games Genres'},\n             hole=0.3,\n            )\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","a8fd0cbe":"fig  = go.Figure()\nfig.add_trace(go.Pie(\n    labels=genre_tops_df['Genre'], \n    values=genre_tops_df[total_sales_column], \n    pull=[0, 0, 0.1, 0.05, 0, 0, 0.05, 0, 0.05],\n))\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(title=\"Percent of sales by Genre\")\nfig.show()","aaf3140b":"# Reorder df to total genre scattewr plot\ngenre_last_total_tdf = genre_last_tdf.reset_index().sort_values(total_sales_column, ascending=False)","0aba1da5":"fig = go.Figure()\n    \nfig.add_trace(go.Scatter(\n    x=genre_last_total_tdf['Genre'], \n    y=genre_last_total_tdf[total_sales_column], \n    mode='lines+markers',\n))\nfig.update_layout(title=\"Total sales by genre (Millions)\")\nfig.update_xaxes(type='category')\n# fig.update_xaxes(categoryorder='total descending')\nfig.show()","ef4a1bca":"if 'ESRB_Rating' in df.columns:\n    esrb_tdf = tdf.groupby('ESRB_Rating').agg({total_sales_column: 'sum'}).reset_index()\n    esrb_tdf.head(10)","d9e3c045":"if 'ESRB_Rating' in df.columns:\n    fig = px.bar(esrb_tdf, x='ESRB_Rating', y=total_sales_column)\n    fig.show()","566805e6":"if 'ESRB_Rating' in df.columns:\n    esrb_tops = list(esrb_tdf.loc[esrb_tdf[total_sales_column] > esrb_tdf[total_sales_column].sum() * 0.03, 'ESRB_Rating'])\n    esrb_tops","359e836f":"if 'ESRB_Rating' in df.columns:\n    esbr_region_tdf = tdf[tdf['ESRB_Rating'].isin(esrb_tops)].groupby(['ESRB_Rating']).agg(regions_agg)\n    esbr_region_tdf.head()","c974e9a7":"if 'ESRB_Rating' in df.columns:\n    z = esbr_region_tdf.drop(total_sales_column, 1).values\n    x = esbr_region_tdf.drop(total_sales_column, 1).columns.tolist()\n    y = esbr_region_tdf.drop(total_sales_column, 1).index.tolist()\n\n    z_text = np.around(z)\n\n    fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\n    fig.update_layout(title=\"Sales distribution by genre and region (Millions)\")\n    fig.show()","d2c7fa3a":"if 'ESRB_Rating' in df.columns:\n    esrb_genre_tdf = tdf[tdf['ESRB_Rating'].isin(esrb_tops)].groupby(['ESRB_Rating', 'Genre']).agg({total_sales_column: 'sum'}).reset_index()\n    esrb_genre_tdf.head(10)","d034d3e1":"if 'ESRB_Rating' in df.columns:\n    esrb_genre_tdf = esrb_genre_tdf[esrb_genre_tdf['Genre'].isin(genre_tops)]\n    esrb_genre_tdf = esrb_genre_tdf.pivot(index='ESRB_Rating', columns='Genre', values=total_sales_column)\n    esrb_genre_tdf.head()","3dc0a643":"if 'ESRB_Rating' in df.columns:\n    z = esrb_genre_tdf.values\n    x = esrb_genre_tdf.columns.tolist()\n    y = esrb_genre_tdf.index.tolist()\n\n    z_text = np.around(z)\n\n    fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\n    fig.update_xaxes(categoryorder='total descending')\n    fig.update_layout(title=\"Sales distribution by genre and ESRB (Millions)\")\n    fig.show()","1b8e18ee":"# Replace nana values in Country before groupby\npub_tdf = tdf.copy()\npub_tdf['Country'] = tdf['Country'].fillna(value='Unknown')\n\n# Groupby publisher and country\npub_tdf = pub_tdf.groupby(['Publisher', 'Country']).agg({total_sales_column: ['sum', 'count']}).reset_index()\npub_tdf.columns = ['Publisher', 'Country', 'Sales_Sum', 'Sales_Count']\n\npub_tdf = pub_tdf[pub_tdf['Publisher'] != 'Unknown']\n\npub_tdf.head()","be37cccf":"# Filter 5% over sales or 5% over games published\npub_tdf = pub_tdf[(pub_tdf['Sales_Sum'] > pub_tdf['Sales_Sum'].sum() * 0.01) |\n                  (pub_tdf['Sales_Count'] > pub_tdf['Sales_Count'].sum() * 0.01)\n                 ]","b631c0a2":"top_publishers = [\n    'Nintendo', \n    'Sony Computer Entertainment',\n    'Microsoft Game Studios',\n    'Konami Digital Entertainment',\n    'Electronic Arts'\n]\n\ntop_pub_tdf = tdf.loc[:,[\"Year\",\"Publisher\", total_sales_column]]\ntop_pub_tdf['total_sales'] = top_pub_tdf.groupby([top_pub_tdf.Publisher, top_pub_tdf.Year])[total_sales_column].transform('sum')\ntop_pub_tdf.drop(total_sales_column, axis=1, inplace=True)\n\ntop_pub_tdf = top_pub_tdf.drop_duplicates()\ntop_pub_tdf = top_pub_tdf[(top_pub_tdf['Year'] >= 2006)]\ntop_pub_tdf = top_pub_tdf.loc[top_pub_tdf['Publisher'].isin(top_publishers)]\ntop_pub_tdf = top_pub_tdf.sort_values(\"Year\")\n\nfig=px.bar(\n    top_pub_tdf,\n    x='Publisher', \n    y=\"total_sales\", \n    animation_frame=\"Year\", \n    animation_group=\"Publisher\", \n    color=\"Publisher\", \n    hover_name=\"Publisher\",\n    range_y=[0,200]\n)\nfig.update_layout(title_text=\"Top Publisher Game Sale by Year\", xaxis_domain=[0.05, 1.0])\n\nfig.show()","f01d59e2":"# ad-hoc adjustment for Microsoft and Bandai\nmicrosoft_row = pub_tdf[pub_tdf['Publisher'].str.startswith('Microsoft')].sum()\nmicrosoft_row['Publisher'] = 'Microsoft'\nmicrosoft_row['Country'] = 'United States'\nbandai_row = pub_tdf[pub_tdf['Publisher'].str.endswith('Bandai')].sum()\nbandai_row['Publisher'] = 'Namco Bandai'\nbandai_row['Country'] = 'Japan'\n\n# Drop old columns\npub_tdf = pub_tdf[~pub_tdf['Publisher'].str.startswith('Microsoft')]\npub_tdf = pub_tdf[~pub_tdf['Publisher'].str.endswith('Bandai')]\n\n# Append new rows to teh DF\npub_tdf = pub_tdf.append(microsoft_row, ignore_index=True)\npub_tdf = pub_tdf.append(bandai_row, ignore_index=True)","fb226cd5":"pub_tdf = pub_tdf.sort_values('Sales_Sum', ascending=False)\npub_tdf.head()","f05a02f9":"publisher_tops = list(pub_tdf['Publisher'])\nlen(publisher_tops)","4a5c297c":"fig = px.scatter(\n    pub_tdf,\n    x='Publisher',\n    y='Sales_Sum',\n    size='Sales_Count',\n    color='Country',\n)\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and region (Millions)\")\nfig.show()","1f7da377":"# Thanks to https:\/\/www.kaggle.com\/amritachatterjee09\/video-game-sales-eda-with-plotly\/notebook\n# for this amazing pchart!!\n\nEU = tdf.pivot_table('EU_Sales', columns='Publisher', aggfunc='sum').T\nEU = EU.sort_values(by='EU_Sales', ascending=False).iloc[0:5]\nEU_publishers = EU.index\n\nJP = tdf.pivot_table('JP_Sales', columns='Publisher', aggfunc='sum').T\nJP = JP.sort_values(by='JP_Sales', ascending=False).iloc[0:5]\nJP_publishers = JP.index\n\nNA = tdf.pivot_table('NA_Sales', columns='Publisher', aggfunc='sum').T\nNA = NA.sort_values(by='NA_Sales', ascending=False).iloc[0:5]\nNA_publishers = NA.index\n\nOther = tdf.pivot_table('Other_Sales', columns='Publisher', aggfunc='sum').T\nOther = Other.sort_values(by='Other_Sales', ascending=False).iloc[0:5]\nOther_publishers = Other.index\n\nGlobal = tdf.pivot_table('Global_Sales', columns='Publisher', aggfunc='sum').T\nGlobal = Global.sort_values(by='Global_Sales', ascending=False).iloc[0:5]\nGlobal_publishers = Global.index","1ab9774b":"# Initialize figure\nfig = go.Figure()\n\n# Add Traces\nfig.add_trace(\n    go.Bar(y=NA['NA_Sales'],\n           x=NA_publishers,\n           name=\"North America\",\n          marker={'color': NA['NA_Sales'],'colorscale': 'tealgrn'}))\nfig.add_trace(\n    go.Bar(y=EU['EU_Sales'],\n           x=EU_publishers,\n           name=\"Europe\",\n           marker={'color': EU['EU_Sales'],'colorscale': 'tealgrn'},\n           visible=False))\nfig.add_trace(\n    go.Bar(y=JP['JP_Sales'],\n           x=JP_publishers,\n           name=\"Japan\",\n           marker={'color': JP['JP_Sales'],'colorscale': 'tealgrn'},\n           visible=False))\n\nfig.add_trace(\n    go.Bar(y=Other['Other_Sales'],\n           x=Other_publishers,\n           name=\"Others\",\n           marker={'color': Other['Other_Sales'],'colorscale': 'tealgrn'},\n           visible=False))\n\nfig.add_trace(\n    go.Bar(y=Global['Global_Sales'],\n           x=Global_publishers,\n           name=\"Global\",\n           marker={'color': Global['Global_Sales'],'colorscale': 'tealgrn'},\n               visible=False ))\n\nbuttons = []\ncountries = ['North America', 'Europe', 'Japan', 'Others', 'Global']\nfor i, country in enumerate(countries):\n    buttons.append(dict(\n        label=country,\n        method=\"update\",\n        args=[{\"visible\": [False] * i + [True] + [False] * (3-i+1)},\n              {\"title\": f\"Top 5 Publishers for {country}\"}]\n    ))\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=0.57,\n            y=1.2,\n            buttons=buttons,\n        )\n    ])\n\n# Set title\nfig.update_layout(\n    title_text=\"Top 5 Publishers per region\",\n    xaxis_domain=[0.05, 1.0]\n)\n\nfig.show()","63df88ee":"pub_genre_df = tdf.groupby(['Publisher', 'Genre']).agg(regions_agg).reset_index()\npub_genre_df = pub_genre_df[pub_genre_df['Publisher'].isin(publisher_tops)]\npub_genre_df = pub_genre_df[pub_genre_df['Genre'].isin(genre_tops)]\npub_genre_df.head()","c58cf689":"fig = px.scatter(\n    pub_genre_df,\n    x='Publisher',\n    y=total_sales_column,\n    color='Genre',\n)\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and genre (Millions)\")\nfig.show()","3ff606b8":"# Re-create the df to only select top 10 Publishers\npub_genre_df = tdf.groupby(['Publisher', 'Genre']).agg(regions_agg).reset_index()\npub_genre_df = pub_genre_df[pub_genre_df['Publisher'].isin(publisher_tops[:10])]\npub_genre_df = pub_genre_df[pub_genre_df['Genre'].isin(genre_tops)]\npub_genre_df.head()\n\npub_genre_pivot_df = pub_genre_df.pivot(index='Publisher', columns='Genre', values=total_sales_column)\n\nz = pub_genre_pivot_df.values\nx = pub_genre_pivot_df.columns.tolist()\ny = pub_genre_pivot_df.index.tolist()\n\nz_text = np.around(z)\n\n# Create heatmap\nfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and genre (Millions)\")\nfig.show()","974e2602":"fig = px.box(tdf[tdf['Genre'].isin(genre_tops)], \n             y=total_sales_column, \n             color='Genre',\n             hover_data=['Name', 'Year'],\n            )\nfig.update_layout(title=\"Games sells boxplot by genre\")\nfig.show()","77b63bd1":"plat_genre_df = tdf[(tdf['Genre'].isin(genre_tops[:4])) & (tdf['Platform'].isin(platform_tops[:4]))]\n\nfig = px.sunburst(plat_genre_df, path=['Genre', 'Platform'], values=total_sales_column)\nfig.show()","fef18b0a":"genre_pub_df = tdf[(tdf['Genre'].isin(genre_tops[:4])) & (tdf['Publisher'].isin(publisher_tops[:5]))]\n\nfig = px.sunburst(genre_pub_df, path=['Genre', 'Publisher'], values=total_sales_column)\nfig.show()","35175da9":"plat_pub_df = tdf[(tdf['Platform'].isin(platform_tops[:4])) & (tdf['Publisher'].isin(publisher_tops[:5]))]\n\nfig = px.sunburst(plat_pub_df, path=['Platform', 'Publisher'], values=total_sales_column)\nfig.show()","755857f3":"genre_pub_genre_df = tdf[(tdf['Genre'].isin(genre_tops[:4])) & \n                         (tdf['Publisher'].isin(publisher_tops[:5])) & \n                         (tdf['Platform'].isin(platform_tops[:4]))\n                        ]\n\nfig = px.sunburst(genre_pub_genre_df, path=['Genre', 'Platform', 'Publisher'], values=total_sales_column)\nfig.show()","7043b7eb":"## Distribution of ESRB by region","9f07a88c":"## Publisher sales by region","213e9d40":"### All together","72ac6f9c":"## Distribution of sales by genres and region","f98a0ef3":"<p style=\"font-family:newtimeroman; font-size:200%; text-align:center;\"><b>This kernel is part of a Plotly guide that I am developing at the moment and it's focused showing the mai tips and tricks for the Data Analysis.<\/b><\/p>\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/eda-beginner-to-expert-plotly'><b>Part I: Netflix Analysis<\/b><\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/video-games-eda-and-visualization'>Part II: Video Games Analysis (this one)<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/covid-progression-a-plotly-animated-guide'>Part III: COVID-19 World Vaccination Progress<\/a><\/i><\/p>\n\n<p style=\"font-family:newtimeroman; font-size:150%; text-align:center;\"><i><a href='https:\/\/www.kaggle.com\/andreshg\/kaggle-survey-a-graph-story'>Part IV: Kaggle Survey: A Graph Story<\/a><\/i><\/p>","533e564a":"<a id='4'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">4. Distribution of sales by genre \ud83d\ude45<\/p>","169d0d4a":"<a id='6'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">6. Publisher analysis \ud83d\udcf8<\/p>","7d6e89ae":"<a id='2'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">2. Sales analysis \ud83d\udcb5<\/p>","3b61faf1":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">Sunburst platforms - genres - publishers<\/p>","b5f8611a":"## Publisher sales by year","de488d50":"As we can see in this plot, if we focus on the top genres (Action, Sports, Shooters and Role-Plating), there are some out-layers that distort the total sells calculation.\nFor example:\n- In sports genre, Wii sports hold the most parts of the sells but the median is lower than action and shooters for example\n- In Role-Playing aswell, the out-layers are not so deviated and there is much competition in the sellings. Also, have in mind that the outlayers are really old (Year)","9a62214c":"## Distribution of ESRB by Genre","1ceaae42":"## Aggregated sales analysis ","84ac562b":"### Last four years","9429508d":"<a id='1'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">1. Released games by year \ud83d\udcdd<\/p>","a355bcb3":"## Lets evaluate competence","c5e37bea":"<a id='ldata'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Load data \ud83d\udcda<\/p>","d6352aff":"## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">Table of Content<\/p>\n\n* [Loading Data \ud83d\udcda](#ldata)\n* [Pandas Profiling \ud83d\udd0e](#prof)\n* [1. Released games by year \ud83d\udcdd](#1)\n* [2. Sales analysis \ud83d\udcb5](#2)\n* [3. Sales distribution \ud83d\udcc8](#3)\n* [4. Distribution of sales by genre \ud83d\ude45](#4)\n* [5. Sales distribution by ESRB Rating \ud83d\udd1e](#5)\n* [6. Publisher analysis \ud83d\udcf8](#6)","b6581156":"<a id='begin'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:250%; text-align:center; border-radius: 15px 50px;\">\ud83c\udfae Video Games Sales analysis \ud83d\udcca<\/p>","d998780d":"### Last four years","bd93a3bd":"<a id='5'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">5. Sales distribution by ESRB Rating \ud83d\udd1e<\/p>","33a9bf04":"![The-Best-Video-Game-Publishers.jpg](attachment:The-Best-Video-Game-Publishers.jpg)","bdada869":"<a id='3'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">3. Sales distribution \ud83d\udcc8<\/p>","84f0462d":"<a id='prof'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">Pandas Profiling \ud83d\udd0e<\/p>","29805b09":"## Genres by publisher"}}