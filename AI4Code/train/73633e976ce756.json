{"cell_type":{"eae2b1cb":"code","562cc1b1":"code","784459d1":"code","517b79f5":"code","11e648f5":"code","1a686b3b":"code","2b622ae1":"code","606ee994":"code","ca2bfa1a":"code","a1a61898":"code","01611ebf":"code","6d783525":"code","6e17a71f":"code","f99ffff8":"code","bbd871f2":"code","9f6e9b8f":"code","749eaf23":"code","6c40295a":"code","2b818888":"code","50b70bc6":"code","d961e15f":"code","3cecd749":"code","1a1a2753":"code","115592d6":"code","cc720eea":"code","3fee5c20":"code","1a7a22a7":"code","bc790872":"code","6cba8e77":"code","78dad319":"code","0d5f429e":"code","fc2de17d":"code","d6bcd49f":"code","e8c90ecf":"code","563ba50c":"code","7ae24a2d":"code","bb4964eb":"code","a3113d2b":"markdown","a7027f7f":"markdown"},"source":{"eae2b1cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","562cc1b1":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn import preprocessing\nfrom sklearn import datasets\nfrom sklearn import metrics\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.feature_selection import f_regression\nfrom matplotlib import pyplot\nimport tensorflow\ntensorflow.random.set_seed(1)\nfrom tensorflow.python.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.python.keras.models import Sequential\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nimport xgboost as xg \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import mean_squared_error as MSE \nfrom catboost import CatBoostRegressor\nfrom xgboost import XGBClassifier","784459d1":"df_train=pd.read_csv(os.path.join(dirname,'train.csv'))\ndf_test=pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')","517b79f5":"df_train\n","11e648f5":"df_train.info()","1a686b3b":"df_train['Survived'].unique()","2b622ae1":"df_train['Survived'].value_counts()","606ee994":"for col in df_train.columns:\n    print(df_train[col].unique())\n    print(len(df_train[col].unique()))\n    #(df_train[col].value_counts)","ca2bfa1a":"from collections import Counter\ncounter = Counter(list(df_train['Cabin']))","a1a61898":"#counter","01611ebf":"for col in df_train.columns:\n    print(col,\":\",df_train[col].isnull().values.any())","6d783525":"df_train['Fare'].fillna(value=0,inplace=True)\ndf_train['Ticket'].fillna(value='NOA',inplace=True)\ndf_train['Cabin'].fillna(value='NoCabin',inplace=True)\ndf_train['Embarked'].fillna(value='unknown',inplace=True)\ndf_train['Age'].fillna(value=round(df_train['Age'].mean()),inplace=True)","6e17a71f":"df_train","f99ffff8":"#One hot Encoding\n#categorical fields Pclass,Sex,Embarked,Cabin\ndf_train=pd.concat([df_train,pd.get_dummies(df_train.Pclass,prefix='Pclass')],axis=1)\ndf_train=df_train.drop(['Pclass','Pclass_1'],axis=1)\ndf_train=pd.concat([df_train,pd.get_dummies(df_train.Sex,prefix='Sex')],axis=1)\ndf_train=df_train.drop(['Sex','Sex_male'],axis=1)\ndf_train=pd.concat([df_train,pd.get_dummies(df_train.Embarked,prefix='Embarked')],axis=1)\ndf_train=df_train.drop(['Embarked','Embarked_S'],axis=1)\n#df_train=pd.concat([df_train,pd.get_dummies(df_train.Cabin,prefix='Cabin')],axis=1)\n#df_train=df_train.drop(['Cabin','Cabin_NoCabin'],axis=1)","bbd871f2":"df_train","9f6e9b8f":"X=df_train.drop(['PassengerId','Survived','Name','Ticket','Cabin'],axis=1).values","749eaf23":"\nfrom sklearn.preprocessing import MinMaxScaler\n","6c40295a":"scaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n","2b818888":"y=df_train['Survived'].values","50b70bc6":"for col in df_test.columns:\n    print(col,\":\",df_test[col].isnull().values.any())","d961e15f":"### Preprocessing Test Data\ndf_test['Fare'].fillna(value=0,inplace=True)\ndf_test['Ticket'].fillna(value='NOA',inplace=True)\ndf_test['Cabin'].fillna(value='NoCabin',inplace=True)\ndf_test['Embarked'].fillna(value='unknown',inplace=True)\ndf_test['Age'].fillna(value=round(df_train['Age'].mean()),inplace=True)\n\n#One hot Encoding\n#categorical fields Pclass,Sex,Embarked,Cabin\ndf_test=pd.concat([df_test,pd.get_dummies(df_test.Pclass,prefix='Pclass')],axis=1)\ndf_test=df_test.drop(['Pclass','Pclass_1'],axis=1)\ndf_test=pd.concat([df_test,pd.get_dummies(df_test.Sex,prefix='Sex')],axis=1)\ndf_test=df_test.drop(['Sex','Sex_male'],axis=1)\ndf_test=pd.concat([df_test,pd.get_dummies(df_test.Embarked,prefix='Embarked')],axis=1)\ndf_test=df_test.drop(['Embarked','Embarked_S'],axis=1)\ndf_train=pd.concat([df_train,pd.get_dummies(df_train.Cabin,prefix='Cabin')],axis=1)\ndf_train=df_train.drop(['Cabin','Cabin_NoCabin'],axis=1)","3cecd749":"p_id=df_test['PassengerId']","1a1a2753":"X_test=df_test.drop(['PassengerId','Name','Ticket','Cabin'],axis=1).values","115592d6":"X_test_scaled=scaler.transform(X_test)","cc720eea":"def select_features(X_train, y_train, X_test):\n    # configure to select all features\n    fs = SelectKBest(score_func=f_regression, k=6)\n    # learn relationship from training data\n    fs.fit(X_train, y_train)\n    # transform train input data\n    X_train_fs = fs.transform(X_train)\n    # transform test input data\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs, fs","3fee5c20":"X_test_scaled.shape,X_scaled.shape","1a7a22a7":"X_train_fs, X_test_fs, fs = select_features(X_scaled, y, X_test_scaled)\n\nfor i in range(len(fs.scores_)):\n    print('Feature %d: %f' % (i, fs.scores_[i]))\n\npyplot.bar([i for i in range(len(fs.scores_))], fs.scores_)\npyplot.show()","bc790872":"from xgboost import XGBClassifier","6cba8e77":"model = XGBClassifier()\nmodel.fit(X_train_fs, y) ","78dad319":"y_pred = model.predict(X_test_fs)\npredictions = [round(value) for value in y_pred]","0d5f429e":"csvlist=[]\nfor i in range(len(predictions)):\n    csvlist.append([p_id[i],predictions[i]])","fc2de17d":"Output=pd.DataFrame(csvlist,columns=['PassengerId','Survived'])\nOutput.to_csv('output_XGB.csv',index=False)","d6bcd49f":" from sklearn.linear_model import ElasticNet","e8c90ecf":"reg = ElasticNet(random_state=0)\nreg.fit(X_train_fs, y)","563ba50c":"y_pred = reg.predict(X_test_fs)\npredictions = [round(value) for value in y_pred]","7ae24a2d":"csvlist=[]\nfor i in range(len(predictions)):\n    csvlist.append([p_id[i],predictions[i]])","bb4964eb":"Output=pd.DataFrame(csvlist,columns=['PassengerId','Survived'])\nOutput.to_csv('output_ElasticNet.csv',index=False)","a3113d2b":"TEST DATA","a7027f7f":"ELASTIC NET"}}