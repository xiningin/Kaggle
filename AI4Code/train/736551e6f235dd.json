{"cell_type":{"ceb0648e":"code","dd032e73":"code","05ca0c72":"code","6fcb2837":"code","c7feb4b1":"code","4d04c594":"code","0ddc68cb":"code","08796a75":"code","d112942b":"code","9bb76696":"code","52be72e1":"code","b5a8266f":"code","77564001":"code","a842b6f6":"code","3fb80093":"code","613b6dea":"code","0d96df38":"code","89ea8d5a":"code","8c6a149f":"code","ce4b8d2d":"code","ae5a60f7":"code","1775a3e0":"markdown","8539fdb4":"markdown","2f628bd1":"markdown","32a3790c":"markdown","3844344e":"markdown","4d4ea849":"markdown","19833ca4":"markdown","18f865e8":"markdown","d1768419":"markdown","dac77857":"markdown","8981f285":"markdown"},"source":{"ceb0648e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd032e73":"df = pd.read_csv('\/kaggle\/input\/heart-attack-prediction\/data.csv')\ndf.head()","05ca0c72":"df.isnull().sum()","6fcb2837":"x = df.drop(columns=['slope','ca','thal','fbs'])\nprint(x)","c7feb4b1":"y = df['fbs']\nprint(y)","4d04c594":"from sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()  \nx= x.apply(label_encoder.fit_transform)\nprint(x)","0ddc68cb":"y= label_encoder.fit_transform(y)\nprint(y)","08796a75":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","d112942b":"iplot([go.Histogram2dContour(x=df.head(500)['age'], \n                             y=df.head(500)['fbs'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df.head(1000)['age'], y=df.head(1000)['fbs'], mode='markers')])","9bb76696":"df = df.assign(n=0).groupby(['fbs', 'age'])['n'].count().reset_index()\ndf = df[df[\"age\"] < 100]\nv = df.pivot(index='age', columns='fbs', values='n').fillna(0).values.tolist()","52be72e1":"iplot([go.Surface(z=v)])","b5a8266f":"import seaborn as sns\nimport matplotlib.pyplot as plt","77564001":"# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n\n# Add title\nplt.title(\"Heart attack prediction\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=df['fbs'], y=df['age'])\n\n# Add label for vertical axis\nplt.ylabel(\"age\")","a842b6f6":"sns.lineplot(data=y)","3fb80093":"sns.scatterplot(data=df, x=\"age\", y=\"fbs\")","613b6dea":"df['fbs'].value_counts().head(10).plot.pie()","0d96df38":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","89ea8d5a":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)","8c6a149f":"nb = GaussianNB()\nnb.fit(x_train, y_train)","ce4b8d2d":"y_pred = nb.predict(x_test)\nprint(y_pred)\n\nprint(accuracy_score(y_test, y_pred))","ae5a60f7":"from sklearn import model_selection\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n# random forest model creation\nrfc = RandomForestClassifier()\nrfc.fit(x_train,y_train)\n# predictions\nrfc_predict = rfc.predict(x_test)\n\nprint(\"Accuracy:\",accuracy_score(y_test, rfc_predict))","1775a3e0":"Predictions using Naive-Bayes Classifier","8539fdb4":"Predictions using Randomforest","2f628bd1":"Bar chart using Seaborn","32a3790c":"Scatterplot using seaborn","3844344e":" **Surface contours using plotly**","4d4ea849":"3D plots using plotly","19833ca4":"Line plot using Seaborn","18f865e8":"Label Encoding is needed to convert the string value to integer.","d1768419":"Pie charts","dac77857":"We are going to find the null values presented in the datasets.","8981f285":"We are dropping three columns, which is necessary to our dataset."}}