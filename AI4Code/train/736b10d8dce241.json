{"cell_type":{"42afae9c":"code","8da155c7":"code","9a2478ac":"code","fc724e26":"code","7c85432f":"code","d36d5b16":"code","20636669":"markdown"},"source":{"42afae9c":"\"\"\"\n1. \u0412\u0438\u043a\u043e\u043d\u0430\u0442\u0438 \u043a\u043b\u0430\u0441\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u0438\u0445 \"Sonar classification\" (\nhttps:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/ionosphere\/).\n\n2. \u0420\u043e\u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0456 \u0442\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0456\n\u2022 \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0456\u0448\u0435\u043d\u044c;\n\u2022 \u0431\u0435\u0433\u0456\u043d\u0433 \u0434\u0435\u0440\u0435\u0432 \u0440\u0456\u0448\u0435\u043d\u044c;\n\u2022 \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0438\u0439 \u043b\u0456\u0441;\n\n3. \u041f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043e\u0431\u0447\u0438\u0441\u043b\u044e\u0432\u0430\u043b\u044c\u043d\u0456 \u0435\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438 \u0437 \u0440\u0456\u0437\u043d\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n\u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0442\u0430 \u0437\u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443 \u043a\u043e\u043d\u0444\u0456\u0433\u0443\u0440\u0430\u0446\u0456\u044e \u0437 \u043d\u0430\u0439\u0431\u0456\u043b\u044c\u0448\u043e\u044e \u0442\u043e\u0447\u043d\u0456\u0441\u0442\u044e\n\u043a\u043b\u0430\u0441\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457\n\"\"\"\n\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier, BaggingClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nimport pandas as pd\nimport seaborn as sns\nimport graphviz\nimport random\n\n# \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a\ncolumns = [f'prop_{str(i)}' for i in range(1, 35)] + ['class']\n\n# \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\ndata = pd.read_csv('..\/input\/ionosphere\/ionosphere.csv', delimiter=',', names=columns)\n\ndf = pd.DataFrame(data) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 DataFrame\ndf.head(10)","8da155c7":"df.loc[df['class'] == 'g', 'class'] = 1\ndf.loc[df['class'] == 'b', 'class'] = 0\ndf.head(10)","9a2478ac":"# \u043d\u0430\u0431\u043e\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ninformation = df.loc[:,columns[3:-1]]\nresearch = df['class'] # \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\n# \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 , \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f 4 \"\u043f\u043e\u0440\u0446\u0438\u0438\" \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\nX_train, X_test, Y_train, Y_test = train_test_split(information, research, test_size=0.4, random_state=0)\nY_train = Y_train.astype('int')\nY_test = Y_test.astype('int')","fc724e26":"#\u0414\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439\nclf = DecisionTreeClassifier(max_depth=10)\nclf.fit(X_train, Y_train)\nY_pred = clf.predict(X_test) \ndec_tree_score = clf.score(X_test, Y_test)\nprint('\u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439: ', dec_tree_score)\n\ndot_data = tree.export_graphviz(clf, out_file=None, feature_names=information.columns, \n                                class_names=['good', 'bad'], filled=True, rounded=True,  \n                                special_characters=True)\ngraph = graphviz.Source(dot_data)  \ngraph","7c85432f":"#\u0411\u0435\u0433\u0433\u0438\u043d\u0433 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\ntrees_amount = 500\nclf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=trees_amount, max_samples=50, \n                        bootstrap=True, n_jobs=-1)\nclf.fit(X_train, Y_train)\nY_pred = clf.predict(X_test) \nbag_score = clf.score(X_test, Y_test)\nprint('\u0411\u0435\u0433\u0433\u0438\u043d\u0433 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u044f: ', bag_score)\n\nrandom_tree_number = random.randint(0, trees_amount - 1)\nestimator = clf.estimators_[random_tree_number]  # \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043e\u0434\u043d\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e\ndot_data = tree.export_graphviz(estimator, out_file=None, feature_names=information.columns, \n                                class_names=['good', 'bad'], filled=True, rounded=True,  \n                                special_characters=True, precision=2)\ngraph = graphviz.Source(dot_data)  \ngraph","d36d5b16":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\ntrees_amount = 100\n\nclf = RandomForestClassifier(n_estimators=trees_amount, max_depth=5, random_state=0)\nclf = clf.fit(X_train, Y_train) \nY_pred = clf.predict(X_test) \nrand_frst_score = clf.score(X_test, Y_test) \nprint('\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441: ',rand_frst_score) \n\nrandom_tree_number = random.randint(0, trees_amount - 1)\nestimator = clf.estimators_[random_tree_number]  # \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043e\u0434\u043d\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e\ndot_data = tree.export_graphviz(estimator, out_file=None, feature_names=information.columns, \n                                class_names=['good', 'bad'], filled=True, rounded=True,  \n                                special_characters=True, precision=2)\ngraph = graphviz.Source(dot_data)  \ngraph","20636669":"\u0412\u044b\u0432\u043e\u0434:\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 ionospehere. \u042d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0434\u0430\u0440\u043e\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0438\u0437 16 \u0432\u044b\u0441\u043e\u043a\u043e\u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0445 \u0430\u043d\u0442\u0435\u043d\u043d \u0441 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0439 \u043c\u043e\u0449\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u043a\u043e\u043b\u043e 6.4 \u043a\u0412. \u0426\u0435\u043b\u044c\u044e \u0431\u044b\u043b\u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0435 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u044b \u0432 \u0438\u043e\u043d\u043e\u0441\u0444\u0435\u0440\u0435. \"\u0425\u043e\u0440\u043e\u0448\u0438\u0439\" \u0440\u0430\u0434\u0430\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u044b\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u0438\u043e\u043d\u043e\u0441\u0444\u0435\u0440\u0435, \"\u043f\u043b\u043e\u0445\u043e\u0439\" - \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b\u0438 \u0441\u043a\u0432\u043e\u0437\u044c \u0438\u043e\u043d\u043e\u0441\u0444\u0435\u0440\u0443.\n\n\u0414\u0430\u043d\u043d\u044b\u0435 ionospehere \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 351 \u0437\u0430\u043f\u0438\u0441\u044c \u0441 34 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0438 1 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c \"\u043a\u043b\u0430\u0441\u0441\u0430\" ('g' - good, 'b' - bad).\n\n\u0411\u044b\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0442\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0438:\u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0411\u0435\u0433\u0433\u0438\u043d\u0433 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441.\n\n\u0414\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u043b \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441."}}