{"cell_type":{"4c8039ae":"code","f9789495":"code","f855e803":"code","333a9e98":"code","e9a918f4":"code","a38fe248":"code","0042d1b1":"code","098cf06d":"code","6f1045ca":"code","c521dcaa":"code","ecd08238":"code","da3d082c":"code","199e59c0":"code","09113f99":"code","dc6e5682":"code","d83970f5":"code","c96d7f7f":"code","94ff489e":"code","c302d3df":"code","fe33e6ae":"code","696a9c95":"code","b2695fd5":"code","0d4745d8":"code","02875600":"code","74f02d11":"code","b9bcd59a":"code","e9087192":"code","e93b7c02":"code","2def9f99":"code","4e8554b9":"code","79fd3788":"code","929ff5bb":"code","08103725":"code","ca2d1bcf":"code","787fdd7b":"code","c11995fd":"code","5b1a88fd":"code","d444744f":"code","24298ae6":"code","670bd6a8":"code","4659cadb":"code","7181260d":"code","16103f61":"code","ca2b29fc":"code","6bd43c19":"code","f4567ae5":"code","ba8467a8":"code","16d3e952":"code","3e7e18b7":"code","71372949":"code","35184aaa":"code","fd9d10cb":"code","bc657c1c":"code","990346eb":"code","82147b3b":"markdown","6caffe51":"markdown","d7ceef29":"markdown","bf739ca9":"markdown","b5d9a539":"markdown","1e410bae":"markdown","e40b9abe":"markdown","77ef442e":"markdown","b243f2ef":"markdown","d475e002":"markdown","0a4aae41":"markdown","636f1032":"markdown","886da812":"markdown","e488c0d7":"markdown","94780e1f":"markdown","c152b9f3":"markdown","ec9eddc4":"markdown"},"source":{"4c8039ae":"from datetime import datetime\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","f9789495":"df = pd.read_csv(\"..\/input\/youtube-trending-video-dataset\/IN_youtube_trending_data.csv\", \n                 parse_dates=['publishedAt', 'trending_date'])\ndf.head(3)","f855e803":"df.shape","333a9e98":"df.info()","e9a918f4":"df.isna().sum().sum()","a38fe248":"df.isna().sum()","0042d1b1":"df.loc[df.channelTitle.isna()] ## channel title --> Juvis Productions (from channel id)","098cf06d":"df.channelTitle.fillna('Juvis Productions', inplace=True)","6f1045ca":"df.isna().sum()","c521dcaa":"mask = (df.view_count<=0)\ndf = df.loc[~mask]","ecd08238":"## Start time\n\ndf.publishedAt.min()","da3d082c":"## End time \n\ndf.publishedAt.max()","199e59c0":"df.rename(columns={'trending_date':'trendingAt'}, inplace=True)","09113f99":"df.insert(loc=3, column='published_date', value=df.publishedAt.dt.date)\ndf.insert(loc=4, column='published_month', value=df.publishedAt.dt.month_name())\ndf.insert(loc=5, column='published_day', value=df.publishedAt.dt.day_name())\n\ndf.insert(loc=10, column='trending_date', value=df.trendingAt.dt.date)\ndf.insert(loc=11, column='trending_month', value=df.trendingAt.dt.month_name())\ndf.insert(loc=12, column='trending_day', value=df.trendingAt.dt.day_name())","dc6e5682":"df.published_date = df.published_date.astype(np.datetime64)\ndf.trending_date = df.trending_date.astype(np.datetime64)","d83970f5":"df.head(3)","c96d7f7f":"date_group = df.groupby('published_date')['title'].unique().to_frame()\ndate_group['total_unique'] = date_group.title.transform(lambda x: len(x))\ndate_group = date_group.sort_values(by='total_unique', ascending=False)\n\ndate_group.head(10)","94ff489e":"xticks = date_group.index.astype(np.object)[:10].to_list()\nxticks = [d.strftime(\"%Y-%m-%d\") for d in xticks]\n# xticks","c302d3df":"def plot_barplot(x, y, \n                 xticks=None, \n                 yticks=None, \n                 xlabel=None, \n                 ylabel=None, \n                 title=None, \n                 figsize=(15,8),\n                 rotation=0,\n                 barh=False):\n    \n    fig, ax = plt.subplots(figsize=figsize)\n    \n    if barh:\n        g = plt.barh(y=y, width=x, color='orange', ec='k')\n        plt.yticks(ticks=y, labels=yticks)\n        \n        for rect in g.get_children():\n            h = rect.get_height()\n            w = rect.get_width()\n            x = rect.get_x()\n            y = rect.get_y()\n            plt.annotate(f\"{w}\", (w, y+h\/2), ha='left', va='center', fontsize=14)\n    else:\n        g = plt.bar(x=x, height=y, color='orange', ec='k')\n        plt.xticks(ticks=x, labels=xticks, rotation=rotation)\n\n        for rect in g.get_children():\n            h = rect.get_height()\n            w = rect.get_width()\n            x = rect.get_x()\n            plt.annotate(f\"{h}\", (x+w\/2, h), ha='center', va='bottom', fontsize=14)\n\n    \n    plt.xlabel(xlabel, fontsize=14)\n    plt.ylabel(ylabel, fontsize=14)\n    plt.title(title, fontsize=16, color=\"#E43D40\")\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n    plt.show()","fe33e6ae":"plot_barplot(np.arange(10), date_group.total_unique[:10], xticks=xticks, xlabel=\"Date\", \n             ylabel=\"Total Unique Titles\", \n             title=\"Top-10 Day of Most unique titles in a day\")","696a9c95":"channels_df = (df.groupby(['channelTitle'])['channelTitle']\n               .agg('count')\n               .to_frame()\n               .rename(columns={'channelTitle':'total'}))\n\nchannels_df = channels_df.sort_values(by='total', ascending=False)\nchannels_df.head()","b2695fd5":"plot_barplot(channels_df.total[:10], channels_df.index[:10], \n             xlabel=\"Channel Title\",\n             ylabel=\"No. of videos\", \n             title=\"Top 10 channels on Trending Page\", barh=True)","0d4745d8":"df.categoryId.value_counts(normalize=True)","02875600":"df.categoryId.value_counts(normalize=True).plot.bar(figsize=(15, 8), rot=0, color='orange', ec='k')\nplt.xlabel(\"Videos Category ID\")\nplt.ylabel(\"Relative frequency of videos\")\nplt.title(\"Video categories by relative frequency\")\nplt.show()","74f02d11":"#group titles by their published date and minimum trending date\n\ntime_df = df.groupby(\"title\")[['published_date', 'trending_date']].agg('min')\n\n## add time column by differencing trending datetime and published datetime\ntime_df['time'] = time_df['trending_date'] - time_df['published_date']\n\n# convert time to seconds\ntime_df.time = time_df.time.dt.days\n\n# sort df by time column\ntime_df = time_df.sort_values(by='time')\n\ntime_df.head()","b9bcd59a":"same_day_df = time_df[time_df.time==0]\n\nprint(\"Total videos on same day trending page are\", len(same_day_df))","e9087192":"# select only same day trending video titles\nfull_sd_df = df.loc[df.title.isin(same_day_df.index.to_list())]\n\n# Unique titles in each channel\nfull_sd_df = full_sd_df.groupby('channelTitle')['title'].unique().to_frame()\n\n# add column with total number to unique titles on same day\nfull_sd_df['counts_unique'] = full_sd_df.title.transform(lambda x: len(x))\n\n# sort dataframe by 'count_unique'\nfull_sd_df = full_sd_df.sort_values(by='counts_unique', ascending=False)\n\nfull_sd_df.head()","e93b7c02":"plot_barplot(x=np.arange(10), y=full_sd_df.counts_unique[:10], \n             xticks=full_sd_df.index[:10],\n             xlabel=\"Channel Name\", ylabel=\"No. of videos\", \n             title=\"Top-10 Channels with most no. of unique videos on same day trending page\",\n             figsize=(15,8), rotation=15)","2def9f99":"full_sd_df = df.loc[df.title.isin(same_day_df.index.to_list())]\n\nfull_sd_df = full_sd_df.groupby('categoryId')['title'].unique().to_frame()\nfull_sd_df['counts_unique'] = full_sd_df.title.transform(lambda x: len(x))\n\nfull_sd_df = full_sd_df.sort_values(by='counts_unique', ascending=False)\n\nfull_sd_df.head()","4e8554b9":"plot_barplot(x=np.arange(10), \n             y=full_sd_df.counts_unique[:10], \n             xticks=full_sd_df.index[:10],\n             xlabel=\"Channel Name\", \n             ylabel=\"No. of videos\", \n             title=\"Top-10 Video categories with most no. of unique videos on same day trending page\",\n             figsize=(15,8))","79fd3788":"## Longest time to came on trending page\n\ntime_df.tail(5)","929ff5bb":"plot_barplot(x=time_df.time[-10:],\n             y=np.arange(10), yticks=time_df.index[-10:],\n             xlabel=\"Days\", ylabel=\"Video title\",\n             title=\"Videos with longest time to came on trending page\",\n             barh=True)","08103725":"## LOGIC: A video can be on trending page from its' start on trending page to alternate day or regular day, or skipping many days.\n## So, we cannot just calucalte the difference of first trending day and last trending day\n## we need to calculate each day, the video was actually on trending\n\ndays_df = df.groupby('title')['trendingAt'].unique().to_frame()\n\ndays_df['days'] = days_df.trendingAt.transform(lambda x: len(x))\n\ndays_df = days_df.sort_values(by='days', ascending=False)\n\ndays_df.head()","ca2d1bcf":"plot_barplot(x=days_df.days[:10], \n             y=np.arange(10), \n             yticks=days_df.index[:10],\n             ylabel=\"Video Title\", \n             xlabel=\"No. of days\", \n             title=\"top-10 Videos with most no. of days on trending page\",\n             figsize=(15,8), barh=True)","787fdd7b":"sub_df = df.groupby('title')[['view_count', 'likes', 'dislikes','comment_count']].max()\nsub_df.head()","c11995fd":"g = sub_df.view_count.sort_values(ascending=False)[:10].sort_values()\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of Views\", \n             title=\"Top-10 Videos with Most Views\",\n             figsize=(15,8), barh=True)","5b1a88fd":"g = sub_df.likes.sort_values(ascending=False)[:10].sort_values()\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of Likes\", \n             title=\"Top-10 Videos with Most Likes\",\n             figsize=(15,8), barh=True)","d444744f":"g = sub_df.dislikes.sort_values(ascending=False)[:10].sort_values()\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of dislikes\", \n             title=\"Top-10 Videos with Most Dislikes\",\n             figsize=(15,8), barh=True)","24298ae6":"g = sub_df.comment_count.sort_values(ascending=False)[:10].sort_values()\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of comments\", \n             title=\"Top-10 Videos with Most Comments\",\n             figsize=(15,8), barh=True)","670bd6a8":"min_df = df.groupby('title')[['view_count', 'likes', 'dislikes','comment_count']].min()\nmin_df.head()","4659cadb":"g = min_df.view_count.sort_values()[:10]\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of views\", \n             title=\"Videos with least views\",\n             figsize=(15,8), barh=True)","7181260d":"g = min_df.likes[min_df.likes>0].sort_values()[:10]\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of likes\", \n             title=\"Videos with least likes\",\n             figsize=(15,8), barh=True)","16103f61":"g = min_df.dislikes[min_df.dislikes>0].sort_values()[:10]\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of dislikes\", \n             title=\"Videos with least dislikes\",\n             figsize=(15,8), barh=True)","ca2b29fc":"g = min_df.comment_count[min_df.comment_count>0].sort_values()[:10]\n\nplot_barplot(x=g, \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of comments\", \n             title=\"Videos with least comments\",\n             figsize=(15,8), barh=True)","6bd43c19":"sub_df['likes_per_1k_views'] = sub_df.likes.divide(sub_df.view_count) * 1000\nsub_df['dislikes_per_1k_views'] = sub_df.dislikes.divide(sub_df.view_count) * 1000\nsub_df['comments_per_1k_views'] = sub_df.comment_count.divide(sub_df.view_count) * 1000\n\nsub_df.head()","f4567ae5":"g = sub_df.likes_per_1k_views.sort_values(ascending=False)[:10]\n\nplot_barplot(x=g.astype('int'), \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of Likes\/1000 views\", \n             title=\"Videos with most likes per 1k views\",\n             figsize=(15,8), barh=True)","ba8467a8":"g = sub_df.dislikes_per_1k_views.sort_values(ascending=False)[:10]\n\nplot_barplot(x=g.astype('int'), \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of Dislikes\/1000 views\", \n             title=\"Videos with most dislikes per 1k views\",\n             figsize=(15,8), barh=True)","16d3e952":"g = sub_df.comments_per_1k_views.sort_values(ascending=False)[:10]\n\nplot_barplot(x=g.astype('int'), \n             y=np.arange(10), \n             yticks=g.index,\n             ylabel=\"Video Title\", \n             xlabel=\"No. of comments\/1000 views\", \n             title=\"Videos with most comments per 1k views\",\n             figsize=(15,8), barh=True)","3e7e18b7":"comment_df = df.groupby('comments_disabled')['title'].unique().to_frame()\ncomment_df['total'] = comment_df.title.transform(lambda x: len(x))\ncomment_df['percentage'] = comment_df.total \/ comment_df.total.sum()*100\ncomment_df","71372949":"rating_df = df.groupby('ratings_disabled')['title'].unique().to_frame()\nrating_df['total'] = rating_df.title.transform(lambda x: len(x))\nrating_df['percentage'] = rating_df.total \/ rating_df.total.sum()*100\nrating_df","35184aaa":"corr = sub_df.likes.corr(sub_df.view_count)\n\nsns.lmplot(data=sub_df, x='view_count', \n           y='likes', \n           scatter_kws={'color':'orange', 'alpha':0.2, 's':sub_df.likes\/10000},\n           height=6, aspect=1.5)\nplt.title(f\"Regression plot between Views and Likes - correlation: {corr:.3f}\", fontdict={'size':18, 'color':'blue'})\nplt.show()","fd9d10cb":"corr = sub_df.dislikes.corr(sub_df.view_count)\n\nsns.lmplot(data=sub_df, x='view_count', \n           y='dislikes', \n           scatter_kws={'color':'orange', 'alpha':0.2, 's':sub_df.dislikes\/1000},\n           height=6, aspect=1.5)\nplt.title(f\"Regression plot between Views and Disikes - correlation: {corr:.3f}\", fontdict={'size':18, 'color':'blue'})\nplt.show()","bc657c1c":"sub_df = sub_df.sort_values(by='dislikes', ascending=False)\n\ncorr = sub_df.dislikes[1:].corr(sub_df.view_count[1:])\n\nsns.lmplot(data=sub_df.iloc[1:], x='view_count', \n           y='likes', \n           scatter_kws={'color':'orange', 'alpha':0.2, 's':sub_df.iloc[1:].likes\/10000},\n           height=6, aspect=1.5)\nplt.title(f\"Regression plot between Views and Likes - correlation: {corr:.3f}\", fontdict={'size':18, 'color':'blue'})\nplt.show()","990346eb":"corr = sub_df.comment_count.corr(sub_df.view_count)\n\nsns.lmplot(data=sub_df, x='view_count', \n           y='comment_count', \n           scatter_kws={'color':'orange', 'alpha':0.2, 's':sub_df.comment_count\/1000},\n           height=6, aspect=1.5)\nplt.title(f\"Regression plot between Views and comments - correlation: {corr:.3f}\", fontdict={'size':18, 'color':'blue'})\nplt.show()","82147b3b":"## Min Viewed, liked and Disliked Videos on Trending Page","6caffe51":"## No. of videos on same day Trending Page","d7ceef29":"## Likes, Dislikes, and Commensts per 1000 views","bf739ca9":"## Top-10 channels On Trending Page","b5d9a539":"## Top Video Categories On Trending Page","1e410bae":"## Most unique titles in a day on trending page.","e40b9abe":"- **Let's remove the outlier**","77ef442e":"## Most Viewed, liked and Disliked Videos on Trending Page","b243f2ef":"## Correlation","d475e002":"## Channel and Category with the most trending videos on the same day","0a4aae41":"- **Time Period of data**","636f1032":"## Data Loading and Preprocessing","886da812":"- **Less than 1% videos on trending page have their comments disabled**","e488c0d7":"- **Less than 1% videos on trending page have their ratings disabled**","94780e1f":"## Longest Time to came on trending page","c152b9f3":"## Videos that stayed for max number of days on Trending Page","ec9eddc4":"## Feature Engineering"}}