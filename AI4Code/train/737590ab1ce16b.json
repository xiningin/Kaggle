{"cell_type":{"e37add2a":"code","b8aec7bb":"code","aad1a13a":"code","cc472bbd":"code","30f486ef":"code","f730d9d3":"code","a22f9d81":"code","8c5c6883":"code","0e906ec0":"code","966cc4cf":"code","aa99d378":"code","06d26781":"code","c24e7a70":"code","a8f6835e":"code","c0a5bad8":"code","beec3830":"code","6607a866":"code","4e8b8b1a":"code","6b771334":"code","4dd894f6":"code","2648fd23":"code","fb89095c":"code","572ee06a":"code","b8dbbdad":"code","f231c23b":"code","d3ca53da":"code","173c9657":"code","611e867b":"code","01c94d8b":"code","6315db10":"code","c188f6b3":"code","66f70743":"code","01d06c7c":"code","d0477dea":"code","8d89fa8f":"code","0f914526":"code","7eb979c2":"code","a0d11989":"code","19237a1c":"code","f18a30a3":"code","f11ed560":"code","a2951c5d":"code","1b816889":"code","a36c43c2":"code","edc90ece":"code","d5327cbf":"code","54710c03":"code","e8279879":"code","4b6c222e":"code","8a012e7d":"code","a90d3d93":"code","5a7af430":"code","444f2d99":"code","48b8883a":"code","e3ecf64d":"code","a4d239de":"code","306500d9":"code","204dd132":"code","b0cbf817":"code","36b6df6c":"code","9aa53287":"code","7677a0e8":"code","b4c67b9d":"code","2a0f1117":"code","454f19db":"code","5ceead51":"code","77f205f6":"code","bfaa5d53":"code","f664a923":"code","97bc996d":"code","380499d3":"code","41c3d2a2":"code","f0739864":"code","f69e9317":"code","84c1d25b":"code","f998f9a9":"code","ad7fc784":"code","31d5e30d":"code","abafed57":"code","a478e88a":"code","559a3fe4":"code","b8f42d32":"code","4443d14b":"code","c0d2f44f":"code","491d91c4":"code","da7cff38":"code","2920cc7b":"code","70bbca76":"code","5944205e":"markdown","e379bc1d":"markdown","7317165d":"markdown","1dcfd410":"markdown","02d11417":"markdown","24732085":"markdown","23234b78":"markdown","7a113eb9":"markdown","c65d94c7":"markdown","65c6411e":"markdown","3125bb43":"markdown","7dea3084":"markdown","3f317036":"markdown","476b7bc8":"markdown","f9e36a3f":"markdown","a2199043":"markdown","a8bf4ea7":"markdown","c02b8846":"markdown","e1945283":"markdown","8a985562":"markdown","1384b786":"markdown","249f7f39":"markdown","0d76cbe4":"markdown","72847d9e":"markdown","eeac75d7":"markdown","21781dc4":"markdown","a3ea1fea":"markdown","7ff33eca":"markdown","ed272010":"markdown","731c8df6":"markdown","c503813c":"markdown","4b09afbf":"markdown","a7362453":"markdown","31152266":"markdown","5b0f8cb3":"markdown","3ed4d738":"markdown","1e7a646b":"markdown","05929ef3":"markdown","391555cf":"markdown","2e074c9d":"markdown","c0f63c7b":"markdown","895464fd":"markdown","65f403c0":"markdown","9dc9ce16":"markdown","3a402cde":"markdown","06b3443f":"markdown","35fae06a":"markdown","cd140f68":"markdown","156323bb":"markdown","9f5cd637":"markdown","02633ae9":"markdown","926fcdbb":"markdown","8f18a287":"markdown","4e672e0d":"markdown","004a8f07":"markdown","c9b4c728":"markdown","4f7a436d":"markdown","11248708":"markdown","897ff711":"markdown","e7ac0a00":"markdown","249e4571":"markdown","bdcce4dd":"markdown","b33cd132":"markdown","2d2556ac":"markdown","875d5805":"markdown","3ad6e698":"markdown","21d6d570":"markdown","5629a580":"markdown","f2ee4256":"markdown","5e2006f0":"markdown","a8680d6c":"markdown","7571027e":"markdown","18eb0e99":"markdown","b054802d":"markdown","bbe7f2e3":"markdown","2f0b7e0a":"markdown","5d700698":"markdown","5a2d07e4":"markdown","4fb090a2":"markdown","2a54d853":"markdown","3fd902f8":"markdown","7b84f3dc":"markdown","4f06f017":"markdown","1bdb8c64":"markdown"},"source":{"e37add2a":"#Import required libraries:\n\nimport numpy as np\nimport pandas as pd\nimport requests\nimport matplotlib.pyplot as plt\nimport datetime\nimport json\nimport os\nimport re\nfrom matplotlib import rcParams\nimport seaborn as sns\n%matplotlib inline\nimport random\nfrom pandas import *","b8aec7bb":"#Set the display rows and width\npd.set_option(\"display.max_rows\", 2500)\npd.set_option('display.width', 1000)\npd.set_option(\"display.max_colwidth\", 1)","aad1a13a":"#Read the .csv file in dataframe twitter_archive_enhanced:\n\ntwitter_archive_enhanced = pd.read_csv('..\/input\/data-wrangling\/wrangle\/twitter-archive-enhanced-2.csv')","cc472bbd":"#Download .tsv file programmatically using url\n\nlink  = \"https:\/\/d17h27t6h515a5.cloudfront.net\/topher\/2017\/August\/599fd2ad_image-predictions\/image-predictions.tsv\"\n\nfile_name = 'image_predictions.tsv'\nr = requests.get(link)\nwith open(file_name, 'wb') as f:\n        f.write(r.content)\n        \n#Read the .tsv file in dataframe image-predictions:\n\nimage_predictions= pd.read_csv('image_predictions.tsv', sep = '\\t')","30f486ef":"#Read tweet_json.txt file, line by line, and create a list of dictionaries:\n\ntwitter_api = []\nwith open ('..\/input\/weratedogs\/tweet_json.txt', 'r') as file:\n    for line in file:\n        tweet = json.loads(line)\n        \n        tweet_id = tweet['id']\n        retweet_count = tweet['retweet_count']\n        favorite_count = tweet['favorite_count']\n        \n        twitter_api.append({'tweet_id' : tweet_id,\n                         'retweet_count' : retweet_count,\n                         'favorite_count':favorite_count})","f730d9d3":"#Read the .json file in twitter_api dataframe:\ntwitter_api = pd.DataFrame(twitter_api)","a22f9d81":"#Show the twitter_archive_enhanced\ntwitter_archive_enhanced.head()","8c5c6883":"#Show the image_predictions\nimage_predictions.head()","0e906ec0":"#Show the twitter_api\ntwitter_api.head()","966cc4cf":"#Use .info() to know the data types and null values\ntwitter_archive_enhanced.info()","aa99d378":"#Check for duplicates\ntwitter_archive_enhanced.duplicated().sum()","06d26781":"#Get some statistics for the numerical values\ntwitter_archive_enhanced.describe()","c24e7a70":"#Show the values of source\ntwitter_archive_enhanced.source.value_counts()","a8f6835e":"#Percentage of missing values in expanded_urls\nexpanded_urls_null = (100*twitter_archive_enhanced.expanded_urls.isnull().sum()\/twitter_archive_enhanced.expanded_urls.count()).round(2)\nprint(expanded_urls_null, \"%\")","c0a5bad8":"#Count of only tweets\n#tweet_id count - (in_reply_to_status_id count + retweeted_status_id)\n2356 - (78 + 181)","beec3830":"#Check the values of name\ntwitter_archive_enhanced.name.value_counts()","6607a866":"#Count of correct values for name column\ntwitter_archive_enhanced.name.str.istitle().sum() - twitter_archive_enhanced.query('name == \"None\"').count()[0]","4e8b8b1a":"#Use .info() to know the data types and null values\nimage_predictions.info()","6b771334":"#Check for duplicates\nimage_predictions.duplicated().sum()","4dd894f6":"#Get some statistics for the numerical values\nimage_predictions.describe()","2648fd23":"#Use .info() to know the data types and null values\ntwitter_api.info()","fb89095c":"#Check for duplicates\ntwitter_api.duplicated().sum()","572ee06a":"#Get some statistics for the numerical values\ntwitter_api.describe()","b8dbbdad":"#Use .copy to create copies\narchive_copy = twitter_archive_enhanced.copy()\nimage_copy = image_predictions.copy()\napi_copy = twitter_api.copy()","f231c23b":"#Create a loop to filter for NaN values and then drop the columns\nlist = ['in_reply_to_status_id', 'in_reply_to_user_id', 'retweeted_status_id',\n        'retweeted_status_user_id', 'retweeted_status_timestamp']\n\nfor i in list:\n    archive_copy = archive_copy[archive_copy[i].isnull()]\n    archive_copy = archive_copy.drop([i], axis = 1)","d3ca53da":"#Check for drop columns\narchive_copy.columns","173c9657":"#Make sure that we have only 2097 rows\narchive_copy.shape[0]","611e867b":"df_list = [archive_copy, image_copy, api_copy]\n\nfor i in df_list:\n    i.tweet_id = i.tweet_id.astype(str)","01c94d8b":"#Check the new datatype\narchive_copy.tweet_id.dtype","6315db10":"#Check the new datatype\nimage_copy.tweet_id.dtype","c188f6b3":"#Check the new datatype\napi_copy.tweet_id.dtype","66f70743":"#Cut the last 6 characters from datetime to fit our pattern\narchive_copy.timestamp = archive_copy.timestamp.astype('str').str[:-6]\narchive_copy.timestamp = pd.to_datetime(archive_copy.timestamp, format = '%Y-%m-%d %H:%M:%S')","01d06c7c":"#Check the new datatype\narchive_copy.timestamp.dtype","d0477dea":"#Create a list for the columns\ndog_stages = ['doggo', 'puppo', 'pupper', 'floofer']\n\n#Create a loop to replace the None in the 4 columns with space ''\nfor i in dog_stages:\n    archive_copy[i] = archive_copy[i].replace('None','')","8d89fa8f":"#Create a new column for dog stage and fill it with the data in the 4 columns\narchive_copy['stage'] = archive_copy['doggo'] + archive_copy['puppo'] + archive_copy['pupper'] + archive_copy['floofer']","0f914526":"#Check the new stage values \narchive_copy.stage.value_counts()","7eb979c2":"#Add a \"-\" between the two stages in one cell\narchive_copy['stage'] = archive_copy['stage'].replace('doggopupper','doggo pupper')\narchive_copy['stage'] = archive_copy['stage'].replace('doggopuppo','doggo puppo')\narchive_copy['stage'] = archive_copy['stage'].replace('doggofloofer','doggo floofer')","a0d11989":"#Check the new stage values \narchive_copy.stage.value_counts()","19237a1c":"#Drop the 4 columns ['doggo', 'puppo', 'pupper', 'floofer']\narchive_copy = archive_copy.drop(['doggo', 'puppo', 'pupper', 'floofer'], axis = 1)","f18a30a3":"#Check the new columns of archive_copy\narchive_copy.columns","f11ed560":"#Rename the 9 columns\nimage_copy = image_copy.rename(columns={'p1':'dog_1', 'p1_conf':'conf_1', 'p1_dog':'result_1', \n                                        'p2':'dog_2', 'p2_conf':'conf_2', 'p2_dog':'result_2', \n                                        'p3':'dog_3', 'p3_conf':'conf_3', 'p3_dog':'result_3'})","a2951c5d":"#Check the new names for the 9 columns\nimage_copy.columns","1b816889":"#Check the values of rating_denominator\narchive_copy.rating_denominator.value_counts()","a36c43c2":"#Replace 11, 7, 2 values with 10 in rating_denominator\narchive_copy['rating_denominator'] = archive_copy['rating_denominator'].replace(7,10)\narchive_copy['rating_denominator'] = archive_copy['rating_denominator'].replace(11,10)\narchive_copy['rating_denominator'] = archive_copy['rating_denominator'].replace(2,10)","edc90ece":"#Check the new values of rating_denominator\narchive_copy.rating_denominator.value_counts()","d5327cbf":"#Create a new column dog_rating\narchive_copy['dog_rating'] = 100*(archive_copy['rating_numerator']\/archive_copy['rating_denominator'])","54710c03":"#Check the values of dog_rating\narchive_copy.dog_rating.value_counts()","e8279879":"#Drop the 2 columns rating_numerator & rating_denominator\narchive_copy = archive_copy.drop(['rating_numerator', 'rating_denominator'], axis = 1)","4b6c222e":"#Check the new columns of archive_copy\narchive_copy.columns","8a012e7d":"#Show some tweet_link samples to create a suitable pattern\narchive_copy.text.sample(5)","a90d3d93":"#Create a new column and Use regex to extract tweet's link from text\narchive_copy['tweet_link'] = archive_copy.text.str.extract(\"(https:\/\/t.co\/[a-zA-Z0-9-]+)\", expand = True)","5a7af430":"#Check the new column and some samples\narchive_copy['tweet_link'].sample(3)","444f2d99":"#Show some samples of text to find a pattern to extract the name \narchive_copy.text.sample(15)","48b8883a":"#Extract dog_name from text\narchive_copy['dog_name'] = archive_copy.text.str.extract(\n    \"((?<= named )[A-Z][a-z]+| (?<= [i,']s )[A-Z][a-z]+| (?<=[M,m]eet )[A-Z][a-z]+| (?<= to )[A-Z][a-z]+)\", expand = True)","e3ecf64d":"#Check the new real dog names count\narchive_copy.dog_name.str.istitle().sum() - archive_copy.query('dog_name == \"None\"').count()[0]","a4d239de":"#Let's check the correct names in name column to evaluate our result\narchive_copy.name.str.istitle().sum() - archive_copy.query('name == \"None\"').count()[0]","306500d9":"#Drop the column name\narchive_copy = archive_copy.drop(['name'], axis = 1)","204dd132":"#Check the new columns of archive_copy\narchive_copy.columns","b0cbf817":"#Use regex to extract the source \narchive_copy.source = archive_copy.source.str.extract(r\"(?<=>)(.*)(?=<)\")","36b6df6c":"#Show the new values of source\narchive_copy.source.value_counts()","9aa53287":"#Let's check first\narchive_copy.timestamp.max()","7677a0e8":"#Use notna to keep only the tweets with photos \narchive_copy = archive_copy[archive_copy['expanded_urls'].notna()]","b4c67b9d":"#Check for NaN values in expanded_urls\narchive_copy['expanded_urls'].isnull().sum()","2a0f1117":"#Use pd.wide_to_long to reshape the 9 columns of predictions\nimage_copy = pd.wide_to_long(image_copy, stubnames=['dog', 'conf', 'result'], \n                             i=['tweet_id', 'jpg_url', 'img_num'], j='pred', sep=\"_\").reset_index()","454f19db":"#Check some samples\nimage_copy.sample(3)","5ceead51":"archive_copy.info()","77f205f6":"#Merge twitter_archive_enhanced & image_predictions on tweet_id\narchive_image = pd.merge(archive_copy, image_copy, on='tweet_id')","bfaa5d53":"#Merge archive_image & twitter_api on tweet_id\ntwitter_archive_master = pd.merge(archive_image, api_copy, on='tweet_id')","f664a923":"#Rearrange columns\ntwitter_archive_master = twitter_archive_master[['tweet_id', 'retweet_count', 'favorite_count', 'dog_name', 'stage',\n                                                 'dog_rating', 'timestamp', 'source', 'tweet_link', 'text', 'jpg_url',\n                                                 'img_num', 'pred', 'dog', 'conf', 'result' ]]","97bc996d":"#Make sure that our new dataframe matches our cleaning steps\ntwitter_archive_master.info()","380499d3":"twitter_archive_master.sample(3)","41c3d2a2":"#Store the  dataframe to .csv file\ntwitter_archive_master.to_csv('twitter_archive_master.csv',index = False)","f0739864":"#Check the new dataframe from .csv file\ndf = pd.read_csv('twitter_archive_master.csv')\ndf.head(3)","f69e9317":"#Make sure we got the desired datatypes\ndf.info()","84c1d25b":"#Change timestampe to datetime\ndf.timestamp = pd.to_datetime(df.timestamp, format = '%Y-%m-%d %H:%M:%S')","f998f9a9":"#Recheck the timestamp dtype\ndf.timestamp.dtype","ad7fc784":"#Analyze the numeric values\ndf.describe()","31d5e30d":"#General basics for visualization\n#Define a function for labels and titles\ndef labels_and_title(x, y, title):\n    plt.xlabel(x);\n    plt.ylabel(y);\n    plt.title(title);\n    return labels_and_title\n\n#Pick a palette\ncolor = sns.color_palette()[0]\n\n#Specify figure size\nrcParams['figure.figsize'] = 11.69, 8.27","abafed57":"#Discover numerical columns in easier way\ndf_numeric = df[['retweet_count', 'favorite_count', 'dog_rating', 'img_num', 'conf']]\ndf_numeric.hist(figsize = (12,12));","a478e88a":"#Plot a heatmap to show the correlation between the numeric variables, and use a diverging palette.\nsns.heatmap(df_numeric.corr(), annot = True, fmt = '.2f', cmap = 'coolwarm', center = 0);","559a3fe4":"#Let's see which twitter application is used the most\ndf.source.value_counts()","b8f42d32":"#Prepar the proportions\ncounts = df.source.value_counts()\norder = counts.index\ntotal = counts.sum()\nmax_count = counts[0]\nmax_prop = max_count \/ total\ntick_props = np.arange(0, max_prop+0.05, 0.05)\ntick_names = ['{:0.2f}'.format(v) for v in tick_props]\n\n#Plot Source on x axis and its count on y axis\nsns.countplot(data = df, x = 'source', color = color);\n\n#Titles and labels\nlabels_and_title(\"Count\", \"Source\", 'Applications Usage')\nlocs, labels = plt.xticks(rotation=0)\n\n#Make a loop for each pair of locations and labels\nfor loc, label in zip(locs, labels):\n\n    # get the text property for the label\n    count = counts[label.get_text()]\n    pct_string = '{:0.1f}%'.format(100*count\/total)\n\n    # print the text on the specified locations\n    plt.text(loc, count+2, pct_string, ha = 'center', va = 'bottom', color = 'black')","4443d14b":"#Percentages of true & false in result\nresults = df.result.value_counts()\nplt.pie(results, labels=results.index, autopct='%1.1f%%', startangle=90,\n         pctdistance=0.85, counterclock = False, labeldistance=1.1)\nplt.axis('square')\nplt.title('Prediction Results');","c0d2f44f":"#Draw a pie chart for top 5 dog stages\n\n#colors\ncolors = ['#057322','#07ad33','#06d63e','#56cc75', '#86f0a2']\n#explosion\nexplode = (0.05, 0.05, 0.05, 0.05, 0.05)\n\n#Top 5 dog stages\nstages_pie = df.stage.value_counts()[:5]\n\nplt.pie(stages_pie, colors = colors, labels=stages_pie.index, autopct='%1.1f%%', startangle=90,\n         pctdistance=0.85, explode = explode, counterclock = False, labeldistance=1.1)\nplt.axis('square');\n\n#Draw circle\ncentre_circle = plt.Circle((0,0),0.60, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n#Figure title\nplt.title('Dog Stages');\nplt.show()","491d91c4":"#Let's plot a scatter diagram shows the relationship between the retweets & favorites count.\nplt.scatter(data=df, x='retweet_count', y='favorite_count', alpha = 0.1);\n\n#Titles and labels\nlabels_and_title('Retweet Count', 'Favorite Count', 'Retweet & Favorite count relationship');","da7cff38":"#Let's plot two scatter diagrams in one graph to show the relationship between the retweets & favorites count over time.\n\nfavorite = df.plot(kind='scatter', y='timestamp', x='favorite_count', color='blue')    \nretweet = df.plot(kind='scatter', y='timestamp', x='retweet_count', color='orange', ax=favorite)    \n\n#Titles and labels\nlabels_and_title('Retweet \/ Favorite Count', 'Date', 'Retweet & Favorite count overtime')\nplt.legend([\"Favorite\", \"Retweet\"]);","2920cc7b":"#Let's groupby the dog type and get the mean of rating\nrating_type = df.groupby(['dog']).dog_rating.mean().sort_values(ascending = False)[:20]\nrating_type","70bbca76":"#Let's draw a strip plot between image_num & conf. \nsns.stripplot(data = df, x = 'img_num', y = 'conf', alpha = 0.5)\n\n#Titles and labels\nlabels_and_title('Number of Images', 'Confidence', 'How can Number of images affects the confidence');","5944205e":"# <font color = grey>9\n### Define\n- Extract real dog names from text and get rid of (a, an, just, ... etc) values in `twitter_archive_enhanced`\n\n### Code-1","e379bc1d":"# <font color = grey>8\n### Define\n- Extract Tweet's link from text in `twitter_archive_enhanced`\n\n### Code","7317165d":"- It seems that most of them are not even dogs, I will not try to plot that.","1dcfd410":"<a id='clean'><\/a> \n## <font color = navy>3- Clean:\n\n### Firstly, we need to make a copy for each dataframe.","02d11417":"### Test-1","24732085":"### Test-2","23234b78":"- I thought that number of images would result more confident results, but that seems not to be true.\n- Most of the high confidence results were based on 1 image.","7a113eb9":"Our pattern must follow:\n- After is, 's, Meet, named, to\n- Start with a capital letter","c65d94c7":"### Test","65c6411e":"<a id='conclusions'><\/a> \n## Conslusions:\n- We have conf. = 100%, it must be clear picture for a specific breed of dog.\n- Some dogs got 0\/10 rating, that's weird in such account.\n- Most of tweets have only one image.\n- All numeric variables have right skewed distribution, that means that the least values have occurred the most.\n- We have a good percentage of high prediction cases (> 0.8).\n- Most of dog ratings fall between 0 and 200, and we have extreem values reached >17500.\n- The only relationship we can mention here, is the strong positive correlation between the retweets count & favorite count. and that makes sense.\n- The more images the tweet has, the more likely to get retweets & favorites.\n- Twitter for iPhone is the most used application for Twitter users of WeRateDogs.\n- Almost 75% of the results are True.\n- Multi_stages dogs have very little percentages.\n- Pupper & Doggo stages have more than 80% of the dogs.\n- Most of tweets had retweets less than 10,000 and favorites up to 32,000.\n- We have a few tweets that got much more favorites & retweets.\n- Alwayse the favorites count is bigger than the retweets count.\n- There is a slight increase in favorites & retweets overtime.\n- The biggest retweet count was about 75,000 and that was in June 2016.\n- The highest mean ratings are not associated to dogs at all.\n- I thought that number of images would result more confident results, but that seems not to be true.\n- Most of the high confidence results were based on 1 image.","3125bb43":"### Test","7dea3084":"## <font color = purple>5- What are our top 4 dog stages?","3f317036":"### Test-1","476b7bc8":"### Test","f9e36a3f":"- That's definitely better, it shows us that Twitter for iPhone is the most used application for Twitter users of WeRateDogs.","a2199043":"- Multi_stages dogs have very little percentages.\n- Pupper & Doggo stages have more than 80% of the dogs.","a8bf4ea7":"# <font color = purple>We Rate Dogs - Data Wrangling Project\n\n## Table of Contents\n<ul>\n    <li><a href=\"#intro\">Introduction<\/a><\/li>\n    <li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n        <ol>\n            <li><a href=\"#gather\">Gather<\/a><\/li>\n            <li><a href=\"#assess\">Assess<\/a><\/li>\n            <li><a href=\"#clean\">Clean<\/a><\/li>  \n<\/ul>\n<ul>    \n    <li><a href=\"#store\">Storing<\/a><\/li>\n    <li><a href=\"#da\">Data Analysis<\/a><\/li>\n    <li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n    <li><a href=\"#ref\">References<\/a><\/li>\n<\/ul>","c02b8846":"### Test","e1945283":"## <font color = blue> c. Twitter API","8a985562":"`twitter_archive_enhanced`\n\n### <font color = red> Quality Issues\n\n#### <font color = green> Completeness:\n- We should have only 2097 row\n\n#### <font color = green> Accuracy   \n- Values of rating_denominator must be 10 and it's multiplies, other values should be dropped.\n- Extract Tweet's link from text.\n- Use regex to extract the source (Twitter for iPhone, Twitter Web Client, or TweetDeck) from source column.\n\n\n#### <font color = green> Consistency\n- Change the datatype of timestamp to datetime.\n    \n### <font color = red> Tidiness Issue\n#### <font color = green> Single observation is stored in multiple tables \n- The dataframes `twitter_archive_enhanced`, `image_predictions` and `twitter_api` should be merged on tweet_id.","1384b786":"## <font color = purple>8- I think images number has an effect to our prediction's confidence, let's see.","249f7f39":"### Test","0d76cbe4":"<a id='store'><\/a> \n## Storing:","72847d9e":"- It's Twitter for iPhone, we can represent it as a bar chart for better view.","eeac75d7":"## <font color = purple>6- Have a better look at the relationship between the retweets & favorites count.","21781dc4":"#### That's good, our result is better. Let's drop the name column.","a3ea1fea":"`image_predictions`\n\n### <font color = red> Quality Issues\n\n#### <font color = green> Consistency\n- Change the datatype of tweet_id to string.","7ff33eca":" ### <font color = purple> Now we have three dataframes, let's assess them visually & programmatically \n `twitter_archive_enhanced`\n `image_predictions`\n `twitter_api`\n    \nAnd get:  \n- Only tweets (not retweet or replies), with images and Not After 1st Aug. 2017","ed272010":"# <font color = grey>11\n## <font color = green> Validity:\n### Define\n- Make sure we have only tweets before Aug. 2017\n### Code","731c8df6":"- Alwayse the favorites count is bigger than the retweets count.\n- There is a slight increase in favorites & retweets overtime.\n- The biggest retweet count was about 75,000 and that was in June 2016.","c503813c":"I can see that this dataframe will have less quality & tideness issues\n\nWe have 2328 row *  3 columns in `twitter_api`\n\n### <font color = red> Quality issues:\n#### <font color = green> Validity:\n- We have less tweets than the ones in `twitter_archive_enhanced` and much more than the ones in `image_predictions`","4b09afbf":"## <font color = blue> a. Twitter Archive Enhanced - .csv file","a7362453":"# <font color = grey>6\n## <font color = green> Accuracy   \n### Define\n- Values of rating_denominator must be 10 and it's multiplies, other values should be dropped in `twitter_archive_enhanced`\n\n### Code","31152266":"## <font color = purple>7- Time impact on  retweets & favorites count.","5b0f8cb3":"## <font color = blue> b. Image Predictions - .tsv file","3ed4d738":"## <font color = purple>4- Do we have good results about our predictions?","1e7a646b":"# <font color = grey>1\n## <font color = red> Quality Issues:\n## <font color = green> Completeness:\n### Define\nWe need to drop in_reply_to_status_id, in_reply_to_user_id, retweeted_status_id, retweeted_status_user_id & retweeted_status_timestamp after filtering them to only tweets and keep only NaN values in twitter_archive_enhanced\n\n### Code","05929ef3":"<a id='da'><\/a> \n## Data Analysis & Visualizations:","391555cf":"- The only relationship we can mention here, is the strong positive correlation between the retweets count & favorite count. and that makes sense.\n- And we can say that the more images the tweet has, the more likely to get retweets & favorites.","2e074c9d":"<a id='wrangling'><\/a> \n## Data Wrangling:","c0f63c7b":"We have 2075 row *  12 columns in `image_predictions`\n\n### <font color = red> Quality issues:\n#### <font color = green> Validity:\n- We have less tweets than the ones in `twitter_archive_enhanced`\n    \n### <font color = red> Tidiness Issue\n#### <font color = green> Headers are values not variable names\n- The 9 columns of predictions can be presented in more clear form.","895464fd":"### Test","65f403c0":"# <font color = grey>13\n## <font color = red> Tidiness Issues\n## <font color = green> Headers are values not variable names\n### Define\n- The 9 columns of predictions can be presented in more clear form in `image_predictions`.\n\n### Code","9dc9ce16":"### Test","3a402cde":"### Code-2","06b3443f":"## <font color = blue> b. Programmatic Assessment","35fae06a":"<a id='gather'><\/a> \n## <font color = navy>1- Gather:","cd140f68":"### <font color = green> Now we have a clean tidy version of out dataset \ud83e\udd73","156323bb":"### Test-1","9f5cd637":"# <font color = grey>4\n### Define\n- Find a way to represent the dog stage in more useful form in `twitter_archive_enhanced`.\n\n### Code-1","02633ae9":"## <font color = navy> Cleaning Summary\n\n### <font color = red> Quality Issues:\n    \n#### <font color = green> Completeness:\n- We need to drop the non NaN values in_reply_to_status_id, in_reply_to_user_id, retweeted_status_id, retweeted_status_user_id & retweeted_status_timestamp after filtering them to only tweets in `twitter_archive_enhanced`\n\n\n#### <font color = green> Consistency\n- Change the datatype of tweet_id to string in the 3 dataframes (`twitter_archive_enhanced`, `image_predictions`, `twitter_api`).\n- Change the datatype of timestamp to datetime in `twitter_archive_enhanced`.\n- Find a way to represent the dog stage in more useful form in `twitter_archive_enhanced`.\n- Rename 'p1', 'p1_conf', 'p1_dog', 'p2', 'p2_conf', 'p2_dog', 'p3', 'p3_conf', 'p3_dog' to more descriptive headers in `image_predictions `.\n\n#### <font color = green> Accuracy   \n- Use regex to extract the source (Twitter for iPhone, Twitter Web Client, or TweetDeck) from source column in `twitter_archive_enhanced`\n- Extract Tweet's link from text in `twitter_archive_enhanced`\n- Extract real dog names from text and get rid of (a, an, just, ... etc) values in `twitter_archive_enhanced`\n- I noticed some values in rating_denominator don't equal 10, we have to a column to represent the dog rating regardless to the denominator in `twitter_archive_enhanced`\n\n#### <font color = green> Validity:\n- We have less tweets than the ones in `twitter_archive_enhanced` and much more than the ones in `image_predictions` in `twitter_api`\n- We have less tweets than the ones in `twitter_archive_enhanced`in `image_predictions`\n\n#### I think the above two points would be solved by merging the 3 dataframes on tweed_id, so we will postpone this step after the merging step.\n- Make sure we have only tweets before Aug. 2017\n- Include only tweets with images and drop NaN values of expanded_url in `twitter_archive_enhanced`\n    \n    \n### <font color = red> Tidiness Issues\n#### <font color = green> Headers are values not variable names\n- The 9 columns of predictions can be presented in more clear form in `image_predictions`.\n\n#### <font color = green> Single observation is stored in multiple tables \n- The dataframes `twitter_archive_enhanced`, `image_predictions` and `twitter_api` should be merged on tweet_id.\n    \n### I'll proceed to clean these point and see if we need to reassess.","926fcdbb":"### Test-2","8f18a287":"# <font color = grey>2\n## <font color = green> Consistency\n### Define\n- Change the datatype of tweet_id to string in the 3 dataframes (`twitter_archive_enhanced`, `image_predictions`, `twitter_api`).\n\n### Code","4e672e0d":"# <font color = grey>7\n### Define\n- We have to a column to represent the dog rating regardless to the denominator in `twitter_archive_enhanced`\n\n### Code-1","004a8f07":"- Emoji source https:\/\/getemoji.com\/\n- How to draw a dount chart https:\/\/medium.com\/@kvnamipara\/a-better-visualisation-of-pie-charts-by-matplotlib-935b7667d77f\n- How to plot 2 scatter diagrams in one chart https:\/\/stackoverflow.com\/questions\/43061768\/plotting-multiple-scatter-plots-pandas\n- How to add a legend to scatter https:\/\/www.geeksforgeeks.org\/how-to-add-a-legend-to-a-scatter-plot-in-matplotlib\/","c9b4c728":"### Code-3","4f7a436d":"- All numeric variables have right skewed distribution, that means that the least values have occurred the most.\n- We have a good percentage of high prediction cases (> 0.8).\n- Most of dog ratings fall between 0 and 200, and we have extreem values reached >17500.","11248708":"# <font color = grey>12\n### Define\n- Include only tweets with images and drop NaN values of expanded_url in twitter_archive_enhanced\n### Code","897ff711":"<a id='intro'><\/a> \n## Introduction:","e7ac0a00":"### Test-3","249e4571":"## <font color = purple>2- Relationships & Correlation Coefficient  between numeric variables.","bdcce4dd":"### Code-2","b33cd132":"<a id='assess'><\/a> \n## <font color = navy>2- Assess:","2d2556ac":"### Test","875d5805":"> WeRateDogs (dog_rates) is a Twitter account that rates people's dogs with a funny comment about the dog, our target is to wrangle its archive data from different sources to create a clean tidy dataframe, and then perform data analysis and visualization for the resulted dataframe. ","3ad6e698":"# <font color = grey>5\n### Define\n- Rename 'p1', 'p1_conf', 'p1_dog', 'p2', 'p2_conf', 'p2_dog', 'p3', 'p3_conf', 'p3_dog' to more descriptive headers\n\n### Code","21d6d570":"# <font color = grey>3\n### Define\n- Change the datatype of timestamp to datetime in `twitter_archive_enhanced`.\n\n### Code","5629a580":"# <font color = grey>14\n## <font color = green> Single observation is stored in multiple tables \n### Define\n- The dataframes `twitter_archive_enhanced`, `image_predictions` and `twitter_api` should be merged on tweet_id.\n\n### Code","f2ee4256":"## <font color = purple>1- Distributions of numeric columns.","5e2006f0":"- We have conf. = 100%, it must be clear picture for a specific breed of dog.\n- Some dogs got 0\/10 rating, that's weird in such account.\n- Most of tweets have only one image.","a8680d6c":"### Test-2","7571027e":"<a id='ref'><\/a> \n## References:","18eb0e99":"# <font color = grey>10\n\n### Define\n- Use regex to extract the source (Twitter for iPhone, Twitter Web Client, or TweetDeck) from source column in `twitter_archive_enhanced`\n\n### Code","b054802d":"### Test","bbe7f2e3":"#### It's ok, we don't need to do anything here","2f0b7e0a":"## <font color = blue> a. Visual Assessment","5d700698":"#### It seems that storing affects the datatypes, I'll fix only the timestamp.","5a2d07e4":"### Code-2","4fb090a2":"We have 2356 row *  17 columns in `twitter_archive_enhanced`\n\n### <font color = red> Quality issues:\n\n#### <font color = green> Completeness:\n- We need to drop in_reply_to_status_id, in_reply_to_user_id, retweeted_status_id, retweeted_status_user_id & retweeted_status_timestamp after filtering to only tweets and keep only the NaN values.\n\n    \n#### <font color = green> Accuracy\n- Extract real dog names from text and get rid of (a, an, just, ... etc) values.\n- I noticed some values in rating_denominator don't equal 10, we have to a column to represent the dog rating regardless to the denominator.\n- We can present the values of source column in more useful form. \n    \n#### <font color = green> Consistency\n- Find a way to represent the dog stage in more useful form.","2a54d853":"- Most of tweets had retweets less than 10,000 and favorites up to 32,000.\n- We have a few tweets that got much more favorites & retweets.","3fd902f8":"- That's a good percentage, almost 75% of the results are True.","7b84f3dc":"## <font color = purple>3- Which Twitter application is the most perferred by #WeRateDogs followers?","4f06f017":"### Test","1bdb8c64":"`twitter_api`\n\n### <font color = red> Quality Issues\n\n#### <font color = green> Consistency\n- Change the datatype of tweet_id to string."}}