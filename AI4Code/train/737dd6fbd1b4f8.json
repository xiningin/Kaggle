{"cell_type":{"77950468":"code","ff7c23e7":"code","f4e96c76":"code","db1e5245":"code","73c8dcae":"code","1b8453b5":"code","a65065e6":"code","822d41d9":"code","729a3de9":"code","0e5348fa":"code","c5dbd16e":"code","1428d274":"code","d94738f2":"code","ddd0da74":"code","4b9d880b":"code","5867bbd2":"code","f65b4726":"code","54132696":"code","dcac2d44":"code","d104b3c7":"code","e0971ec1":"code","ccfe7f74":"code","6c47642d":"code","2ffd00b9":"code","1dbd2fc3":"code","388ad277":"code","e36de985":"code","da859e35":"code","5b718b68":"code","eef21da9":"code","88d1888c":"code","18bb6bb5":"code","c1b88330":"code","ba2f5493":"code","6bec318f":"code","31e31be2":"code","1df4ddd8":"code","bad4c6ce":"code","144fb116":"code","97bbc46d":"code","60a40485":"code","3b5f98b2":"code","22b671c2":"code","847cfd32":"code","8fa8da2d":"code","707bd0e5":"code","eaf8f190":"code","4ad058fe":"code","26d95a3e":"code","4612f7e9":"code","350cba2b":"code","30906cd4":"code","a20057fd":"code","45141343":"code","fb7f9836":"code","bd9185bb":"code","f036d3f4":"markdown","e56ab04b":"markdown","be57e08d":"markdown","0bf62fe5":"markdown","d8b20a61":"markdown","8f785d4d":"markdown","224942de":"markdown","27898c64":"markdown","9df64a17":"markdown","daf54bbb":"markdown","e18d4767":"markdown","5ff58e3d":"markdown","584ad453":"markdown","09cd493a":"markdown","f4abbe8a":"markdown","1c8a8132":"markdown","19c96d3b":"markdown","e40df296":"markdown","57db7bf9":"markdown","7eb26ca4":"markdown","13597496":"markdown","39d0f8e4":"markdown","1cce880f":"markdown","a728bd4b":"markdown","92fb45ba":"markdown","d5fa6d51":"markdown","db238a42":"markdown","14f1e856":"markdown","9a1a1442":"markdown","73260a75":"markdown","7a255407":"markdown","9d9398a8":"markdown","69c6457f":"markdown","31ce0f04":"markdown","d3f4e8bd":"markdown","fc5dcfde":"markdown","46a4a6cb":"markdown","c9949f62":"markdown","107671f4":"markdown","fd764f90":"markdown","685fd096":"markdown","d7012eb0":"markdown","1e470347":"markdown","ef003a1f":"markdown","3b98ee4c":"markdown","7d20ea36":"markdown","23c55c20":"markdown","4308cc79":"markdown","cbbcf86d":"markdown","58e0c955":"markdown","94d63070":"markdown","12b85ecd":"markdown","e8e50f26":"markdown","2b990f0b":"markdown"},"source":{"77950468":"print('Hello My name is Bashir Abubakar and welcome to this exploration!')","ff7c23e7":"from bs4 import BeautifulSoup\nimport requests  # library to handle requests\nimport pandas as pd\nimport json  # library to handle JSON files\nfrom pandas.io.json import json_normalize  # transform json files to pandas dataframes\nfrom geopy.geocoders import Nominatim  # convert an address into latitude and longitude values\n\n# Matplotlib and associated plotting modules\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# import k-means for clustering stage\nfrom sklearn.cluster import KMeans\n\n#!conda install -c conda-forge folium=0.5.0 --yes\nimport folium # map rendering library\n# chart studio library\n!pip install chart_studio\n!pip install cufflinks\nfrom chart_studio.plotly import plot, iplot\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.figure_factory as ff\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\nimport plotly\nimport chart_studio\nchart_studio.tools.set_credentials_file(username='bashman18', api_key='\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022')\ninit_notebook_mode(connected=True)\n\nimport numpy as np\nimport csv\n\nprint('All modules imported')","f4e96c76":"# Lets save the webpage for The Lagos State Data\n\nlagos_state_link = 'https:\/\/en.wikipedia.org\/wiki\/List_of_Lagos_State_local_government_areas_by_population'","db1e5245":"source = requests.get(lagos_state_link).text","73c8dcae":"soup = BeautifulSoup(source,'lxml')\n\n# Let's print it to see what it looks like...\n\n#print(soup.prettify())","1b8453b5":"table_data = soup.find_all('td')\n\n# Let's view the table\n\ntable_data[:10]","a65065e6":"type(table_data)","822d41d9":"table_text = []\n\nfor data in table_data:\n    table_text.append(data.text)","729a3de9":"relevant_table_data = table_text[4:-3]\n\n# Next let's see the first 3 elements\nrelevant_table_data[:]","0e5348fa":"table_dict={'LGA':[], 'POP':[]}\ncount = 0\n\nfor item in relevant_table_data:\n    # First let's strip off the \\n at the end\n    item = item.strip('\\n')\n    try:\n        item = int(item)\n    except:\n        # if second item after the int, append to POP\n        if count > 0:\n            # First let's remove the commas\n            item = item.replace(',','')\n            # Next let's convert to an integer so we can use it for calculations\n            item = int(item)\n            # Finally, let's append it to the Population list of the dictionary\n            table_dict['POP'].append(item)\n            count = 0\n        else:\n         # if first item after the int, append to LGA\n            table_dict['LGA'].append(item)\n            count +=1","c5dbd16e":"lagos_df = pd.DataFrame(table_dict)\n\n# Let's see the corresponding rows\nlagos_df","1428d274":"def latitude_longitude(LGA):\n    import time\n    \"\"\" Method takes a Series object and returns\n    a list of Latitude and corresponding Longitude data,\n    using the geopy library.\n    This method also prints out the coordinate data\"\"\"\n    \n    address = str(LGA)\n    \n    # We must define a geolocator user agent\n    geolocator = Nominatim(user_agent=\"NG_explorer\")\n    location = geolocator.geocode(address)\n    latitude = location.latitude\n    longitude = location.longitude\n    print('The geograpical coordinates of {} are lat {} and long {}.'.format(address, latitude, longitude))\n    # WARNING: let 2 secs pass after calling each location lat\/lon so that the geocode function would not crash as it crashes quite often\n    time.sleep(5)  \n    return [latitude, longitude]","d94738f2":"lagos_df['latitude'] = lagos_df['LGA'].apply(latitude_longitude)","ddd0da74":"lagos_df.head()","4b9d880b":"lon_list = []\nfor i, j in lagos_df.iterrows():\n    lon_list.append(j.latitude[1])\n    lagos_df.iat[i,2] = j.latitude[0]\n\nlagos_df['longitude'] = lon_list","5867bbd2":"lagos_df.head()","f65b4726":"#next let's convert our dataframe to a csv file by calling the to_csv function\n#lagos_df.to_csv(r'dataset.csv')","54132696":"print(os.listdir(\"..\/input\"))","dcac2d44":"# let's read in our data from csv\ncompiled_df=pd.read_csv('..\/input\/dataset.csv')\ncompiled_df","d104b3c7":"# lets drop the column \"unnamed\"\ncompiled_df.drop(['Unnamed: 0'], axis = 1,inplace = True) \ncompiled_df","e0971ec1":"CLIENT_ID = 'PJSZT3QA54UA1VYW0VH4AYT30HWXXIJG0LFDRCTITDB3X5CD' # your Foursquare ID\nCLIENT_SECRET = 'TETQTTIFLDIS00B4FPS00HAHTJMS4KQILT12DNX05BKFGKUB' # your Foursquare Secret\nVERSION = '20200606'\nLIMIT = 100\nprint('Your credentials:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","ccfe7f74":"compiled_df.head()","6c47642d":"#let's returnt the geographical coordinates of Lagos state with geopy\naddress = 'Lagos, NG'\n\ngeolocator = Nominatim(user_agent=\"ng_explorer\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate of Lagos State are {}, {}.'.format(latitude, longitude))","2ffd00b9":"# next let's create a map showcasing lagos state LGAs\nmap_lagos_state = folium.Map(location=[latitude, longitude], zoom_start=10)\n\n# add markers to map\nfor lat, lng, LGA  in zip(compiled_df['latitude'], compiled_df['longitude'], compiled_df['LGA']):\n    label = '{}'.format(LGA)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=6,\n        popup=label,\n        color='green',\n        fill=True,\n        fill_color='white',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_lagos_state)  \n    \nmap_lagos_state","1dbd2fc3":"def getNearbyVenues(names, latitudes, longitudes, radius=10000):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['LGA', \n                  'LGA_Latitude', \n                  'LGA_Longitude', \n                  'Venue', \n                  'Venue_Latitude', \n                  'Venue_Longitude', \n                  'Venue_Category']\n    \n    return(nearby_venues)","388ad277":"lagos_state_venues = getNearbyVenues(names= compiled_df['LGA'],\n                                     latitudes= compiled_df['latitude'],\n                                     longitudes= compiled_df['longitude'])","e36de985":"lagos_state_venues.shape","da859e35":"lagos_state_venues.head(5)","5b718b68":"lgs_venue=lagos_state_venues.groupby('LGA').count()\nlgs_venue","eef21da9":"#let's visualize the data\n\nlgs_venue.iplot(kind='bar',xTitle='LGA',\n    yTitle='Venue',\n    mode='markers',\n    color='crimson',\n    y='Venue',\n    title='Total number of venues per LGA')\n           \n","88d1888c":"print('There are {} unique categories of venues returned for Lagos State.'.format(lagos_state_venues['Venue_Category'].nunique()))","18bb6bb5":"# one hot encoding\nlagos_onehot = pd.get_dummies(lagos_state_venues[['Venue_Category']], prefix=\"\", prefix_sep=\"\")\n\n# add LGA column back to dataframe\nlagos_onehot['LGA'] = lagos_state_venues['LGA'] \n\n# move LGA column to the first column\nfixed_columns = [lagos_onehot.columns[-1]] + list(lagos_onehot.columns[:-1])\nlagos_onehot = lagos_onehot[fixed_columns]\n\nlagos_onehot.head()","c1b88330":"lagos_onehot.shape","ba2f5493":"lagos_grouped = lagos_onehot.groupby('LGA').mean().reset_index()\n\nlagos_grouped","6bec318f":"lagos_grouped.shape","31e31be2":"def return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]","1df4ddd8":"num_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['LGA']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nlga_venues_sorted = pd.DataFrame(columns=columns)\nlga_venues_sorted['LGA'] = lagos_grouped['LGA']\n\nfor ind in np.arange(lagos_grouped.shape[0]):\n    lga_venues_sorted.iloc[ind, 1:] = return_most_common_venues(lagos_grouped.iloc[ind, :], num_top_venues)\n\nlga_venues_sorted.head(10)","bad4c6ce":"# set number of clusters\nkclusters = 5\n\nlagos_grouped_clustering = lagos_grouped.drop('LGA', 1)\n\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(lagos_grouped_clustering)\n\n# check cluster labels generated for each row in the dataframe\nkmeans.labels_","144fb116":"compiled_df.tail()","97bbc46d":"# insert clustering labels\nlga_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\n\n# Let's select LGA, latitude and longitude data columns from lagos_df\nlagos_merged = compiled_df[['LGA', 'latitude', 'longitude']]\n\n# merge lagos_merged with lga_venues_sorted to add latitude\/longitude for each neighborhood\nlagos_merged = lagos_merged.join(lga_venues_sorted.set_index('LGA'), on='LGA')","60a40485":"lagos_merged","3b5f98b2":"import plotly.express as px\nfig = px.scatter(lagos_merged, x=\"LGA\", y=\"Cluster Labels\")\nfig.show(renderer='notebook_connected')","22b671c2":"# create map\nmap_clusters = folium.Map(location=[latitude, longitude], zoom_start=10)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(lagos_merged['latitude'], lagos_merged['longitude'], lagos_merged['LGA'], lagos_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color= rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","847cfd32":"cluster1 = lagos_merged[lagos_merged['Cluster Labels'] == 0]\ncluster2 = lagos_merged[lagos_merged['Cluster Labels'] == 1]\ncluster3 = lagos_merged[lagos_merged['Cluster Labels'] == 2]\ncluster4 = lagos_merged[lagos_merged['Cluster Labels'] == 3]\ncluster5 = lagos_merged[lagos_merged['Cluster Labels'] == 4]\n\nfor i in range(5):\n    x = lagos_merged[lagos_merged['Cluster Labels'] == i]\n    print('cluster'+str(i+1) + ' shape is {}'.format(x.shape))","8fa8da2d":"cluster_one = lagos_merged[lagos_merged['Cluster Labels'] == 0]\ncluster_one","707bd0e5":"cluster1_lgas = (cluster1['LGA'])\ncluster1_lgas\ncluster1_lgas.to_frame() \n","eaf8f190":"cluster_two = lagos_merged[lagos_merged['Cluster Labels'] == 1]\ncluster_two","4ad058fe":"cluster_three = lagos_merged[lagos_merged['Cluster Labels'] == 2]\ncluster_three","26d95a3e":"cluster_four = lagos_merged[lagos_merged['Cluster Labels'] == 3]\ncluster_four","4612f7e9":"cluster_five = lagos_merged[lagos_merged['Cluster Labels'] == 4]\ncluster_five","350cba2b":"from PIL import Image # Used for converting images into arrays\n!pip install wordcloud\n# import wordcloud package and its set of stopwords\nfrom wordcloud import WordCloud, STOPWORDS\n\nprint ('Wordcloud is installed and imported!')","30906cd4":"stopwords = set(STOPWORDS)","a20057fd":"# Let's select only the columns in lagos_merged DataFrame that we need\nselection = lagos_merged.iloc[:, 4:]\n\n# Let's view the first 5 rows of our selection\nselection.head()","45141343":"# Next lets write code to iterate through each column of our selection DataFrame and append each category word to a string object\n\ncol_list = list(selection.columns)\n\nwords = ''\n\nfor i in col_list:\n    for j in list(selection[i]):\n        words += j\n        words += ', '\n\nprint(len(words))\nwords","fb7f9836":"# Instantiate a WordCloud object\ntop_venues_wc = WordCloud(max_font_size=50,\n          background_color='white',\n          max_words= len(words),\n          stopwords=stopwords)\n\n# Generate the WordCloud\ntop_venues_wc.generate(words)","bd9185bb":"# Generate the WordCloud\ntop_venues_wc.generate(words)\n\n# Set the Size\nplt.figure(figsize=(10, 15))\n\n# Display the WC\nplt.imshow(top_venues_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","f036d3f4":"#### Inspecting The Clusters","e56ab04b":"Interesting! So the most common or freqent venues in all of Lagos State are:-\n<br>**Food Restaurant**,\n<br>**Hotel**,\n<br>**Fast Food**,\n<br>**Shopping Mall**,\n<br>**Lounge**,\n<br>**Restaurant**,\n<br>**Pizza Place**","be57e08d":"#### Let's create a method to return a DataFrame of the venues in lagos state in each LGA ","0bf62fe5":"**So please sit back, relax and enjoy the ride as we explore Lagos City**","d8b20a61":"First let's import required libraries","8f785d4d":"Let's confirm the new shape","224942de":"First let's onehot encode the DataFrame","27898c64":"We can inspect Cluster Three closely","9df64a17":"Appending the Latitude and Longitude Values:<br>\nFirst let's define a simple method to extract each LGA Latitudes and Longitudes data","daf54bbb":"Now let's create the new dataframe and display the top 10 venues for each LGA in Lagos","e18d4767":"Lets Use BeautifulSoup to parse it","5ff58e3d":"In this notebook we explored Lagos State using it's [wikipedia page](https:\/\/en.wikipedia.org\/wiki\/List_of_Lagos_State_local_government_areas_by_population). We scraped the page using Beautiful soup and acquired its data using the request library and eventually we converted same from JSON format to a DataFrame using the json_normalize module.<br>\nWe used the foursquare API to get the details of venues for each location, using the geopy library to convert addresses to latitude and longitude.<br>\n<br> Then we clustered Lagos state into 5 clusters using the K-means algorithm, and finally we displayed the Top venue categories in Lagos state using a word cloud object.\n<br> ","584ad453":"Next let's loop through the data frame and separate Latitude from Longitude and make lat and long just numbers not lists","09cd493a":"##### Let's Create a map of Lagos State with LGAs superimposed on top.","f4abbe8a":"The word cloud object emphasizes the most frequent words in a document or string, by making them bigger than others. In other words, the more frequent a word is in the word cloud object, the bigger the word becomes in comparison to other words.","1c8a8132":"Get the source code HTML data from the website","19c96d3b":"#### Let's check the size of the resulting dataframe and the first 5 rows.","e40df296":"Let's see the data frame again","57db7bf9":"Next let's create a Dataframe of each LGA and its respective Population","7eb26ca4":"Next, let's use the stopwords that we imported from word_cloud. We use the function set to remove any redundant stopwords.\n\n","13597496":"### To Recap:","39d0f8e4":"Create a word cloud object and generate a word cloud.","1cce880f":"We can clearly see that Fast food Restaurants are the most common venues in majority of LGA areas in Lagos State.<br>Other common venues are hotel and shopping malls","a728bd4b":"<h2>Description<\/h2>","92fb45ba":"Next, let's group rows by LGA and taking the mean of the frequency for each category","d5fa6d51":"#### Let's see how many venues were returned for each neighborhood","db238a42":"We have about 2690 words for our wordCloud application. let's go on.","14f1e856":"We can inspect Cluster Five closely","9a1a1442":"Let's see our table with the separated latitude and longitude values","73260a75":"We shall explore Lagos city through its respective Local Government Areas. The above link is a web page that shows the respective LGAs in Lagos State and each population data. It's a Wikipedia data page.\n<br>This data shall be analysed thoroughly through the following steps:-\n<br>Scrape the web page using the beautiful soup library\n<br>Use the Foursquare API calls to retrieve geolocation data\n<br>Fetch the text data using the requests library\n<br>Convert it from JSON to Pandas data frame using the json_normalize module\n<br>Use The folium library to render the maps and plot these via The Matplotlib library. Then we shall explore respective LGAs and analyse each area.\n<br>After this, we shall select our top location.\n<br>Finally, to add some fun, we shall use the word-cloud library to display the names of the top categories of venues per LGAs.","7a255407":"Now, we can examine each cluster and determine the discriminating venue categories that distinguish each cluster. Based on the defining categories, we can then assign a name to each cluster.","9d9398a8":"First let's extract only the relevent data from the table","69c6457f":"Awesome! Now that the word cloud is created, let's visualize it.","31ce0f04":"We can inspect Cluster Two closely","d3f4e8bd":"#### Let's find out how many unique categories can be curated from all the returned venues","fc5dcfde":"<h2>Data Requirements and Overview<\/h2>","46a4a6cb":"Let's write a function to sort the venues in descending order.","c9949f62":"#### Let's Cluster Neighborhoods in Lagos State by LGAs","107671f4":"Next, let's create a string object with all the venue category words from the DataFrame showing the first 10 Top categories per LGA (lagos_merged).","fd764f90":"Next lets create a dictionary and append the LGA and corresponding Population data to it","685fd096":"**The Dataset is the wikipedia page of Lagos state** see [link](https:\/\/en.wikipedia.org\/wiki\/List_of_Lagos_State_local_government_areas_by_population)","d7012eb0":"We can inspect Cluster Four closely","1e470347":"Next let's get the table that contains the data we want to scrape","ef003a1f":"Next, let's select only needed columns from the DataFrame for our wordCloud object","3b98ee4c":"####  let's visualize the resulting clusters\n","7d20ea36":"And let's examine the new dataframe size.","23c55c20":"Next let's iterate through each link and append the text parts","4308cc79":"Exploring Lagos state data to get the top 10 venues for each LGA.\nThen clustered Lagos state into 5 clusters using the K-means algorithm, and finally displayed the Top venue categories in Lagos state using a word cloud object.","cbbcf86d":"#### Next let's display the names of the Top 10 venues from each LGA in Lagos State, using the word cloud application.","58e0c955":"We can inspect Cluster One closely","94d63070":"Now Let's explore the data using foursquare API","12b85ecd":"## Exploring Lagos States LGA(s) and Venues","e8e50f26":"Run k-means to cluster the State into 5 clusters.","2b990f0b":"#### Let's return the top 10 most frequent venues for each LGA"}}