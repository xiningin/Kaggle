{"cell_type":{"45ccc4e9":"code","56849d43":"code","07a5c3c0":"code","0474ff9a":"code","cd2ca477":"code","2ff248ba":"code","1021ce4d":"markdown","1285c02e":"markdown"},"source":{"45ccc4e9":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import GridSearchCV\n\ntourney_result = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneyCompactResults.csv')\ntourney_seed = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MNCAATourneySeeds.csv')\n# deleting unnecessary columns\ntourney_result = tourney_result.drop(['DayNum', 'WScore', 'LScore', 'WLoc', 'NumOT'], axis=1)\ntourney_result = pd.merge(tourney_result, tourney_seed, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Seed':'WSeed'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result = pd.merge(tourney_result, tourney_seed, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Seed':'LSeed'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result\ndef get_seed(x):\n    return int(x[1:3])\n\ntourney_result['WSeed'] = tourney_result['WSeed'].map(lambda x: get_seed(x))\ntourney_result['LSeed'] = tourney_result['LSeed'].map(lambda x: get_seed(x))\ntourney_result\nseason_result = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MRegularSeasonCompactResults.csv')\nseason_win_result = season_result[['Season', 'WTeamID', 'WScore']]\nseason_lose_result = season_result[['Season', 'LTeamID', 'LScore']]\nseason_win_result.rename(columns={'WTeamID':'TeamID', 'WScore':'Score'}, inplace=True)\nseason_lose_result.rename(columns={'LTeamID':'TeamID', 'LScore':'Score'}, inplace=True)\nseason_result = pd.concat((season_win_result, season_lose_result)).reset_index(drop=True)\nseason_score = season_result.groupby(['Season', 'TeamID'])['Score'].sum().reset_index()\ntourney_result = pd.merge(tourney_result, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Score':'WScoreT'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result = pd.merge(tourney_result, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Score':'LScoreT'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_win_result = tourney_result.drop(['Season', 'WTeamID', 'LTeamID'], axis=1)\ntourney_win_result.rename(columns={'WSeed':'Seed1', 'LSeed':'Seed2', 'WScoreT':'ScoreT1', 'LScoreT':'ScoreT2'}, inplace=True)\ntourney_lose_result = tourney_win_result.copy()\ntourney_lose_result['Seed1'] = tourney_win_result['Seed2']\ntourney_lose_result['Seed2'] = tourney_win_result['Seed1']\ntourney_lose_result['ScoreT1'] = tourney_win_result['ScoreT2']\ntourney_lose_result['ScoreT2'] = tourney_win_result['ScoreT1']\ntourney_win_result['Seed_diff'] = tourney_win_result['Seed1'] - tourney_win_result['Seed2']\ntourney_win_result['ScoreT_diff'] = tourney_win_result['ScoreT1'] - tourney_win_result['ScoreT2']\ntourney_lose_result['Seed_diff'] = tourney_lose_result['Seed1'] - tourney_lose_result['Seed2']\ntourney_lose_result['ScoreT_diff'] = tourney_lose_result['ScoreT1'] - tourney_lose_result['ScoreT2']\ntourney_win_result['result'] = 1\ntourney_lose_result['result'] = 0\ntourney_result = pd.concat((tourney_win_result, tourney_lose_result)).reset_index(drop=True)\ntest_df = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MSampleSubmissionStage1.csv')\ntest_df['Season'] = test_df['ID'].map(lambda x: int(x[:4]))\ntest_df['WTeamID'] = test_df['ID'].map(lambda x: int(x[5:9]))\ntest_df['LTeamID'] = test_df['ID'].map(lambda x: int(x[10:14]))\ntest_df = pd.merge(test_df, tourney_seed, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Seed':'Seed1'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, tourney_seed, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Seed':'Seed2'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Score':'ScoreT1'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Score':'ScoreT2'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df['Seed1'] = test_df['Seed1'].map(lambda x: get_seed(x))\ntest_df['Seed2'] = test_df['Seed2'].map(lambda x: get_seed(x))\ntest_df['Seed_diff'] = test_df['Seed1'] - test_df['Seed2']\ntest_df['ScoreT_diff'] = test_df['ScoreT1'] - test_df['ScoreT2']\ntest_df = test_df.drop(['ID', 'Pred', 'Season', 'WTeamID', 'LTeamID'], axis=1)\nimport h2o\nh2o.init(\n  nthreads=-1,            ## -1: use all available threads\n  max_mem_size = \"8G\")  \ntrain_list=list(tourney_result.columns)[:-1]\ntrain_1=h2o.H2OFrame(tourney_result)\ntrain_1['result']=train_1['result'].asfactor()\nparam = {\n      \"ntrees\" : 2000\n    , \"max_depth\" : 20\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True,\"booster\":\"dart\"\n}\nfrom h2o.estimators import H2OXGBoostEstimator\nmodel_xgb = H2OXGBoostEstimator(**param)\nmodel_xgb.train(x = train_list, y = 'result', training_frame = train_1)\nparam={\n    \"ntrees\" : 1000\n    , \"max_depth\" : 20\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True\n\n }\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator  # import gbm estimator\nmodel_gbm = H2OGradientBoostingEstimator(**param)\nmodel_gbm.train(x = train_list, y = 'result', training_frame = train_1)\nfrom h2o.estimators import H2OStackedEnsembleEstimator\nstack = H2OStackedEnsembleEstimator(model_id=\"ensemble11\",\n                                       training_frame=train_1,\n                                       #validation_frame=test,\n                                       base_models=[model_xgb.model_id,model_gbm.model_id],metalearner_algorithm=\"glm\")\nstack.train(x=train_list, y=\"result\", training_frame=train_1)\ntest_1=h2o.H2OFrame(test_df)\npred1=model_xgb.predict(test_1)\npred2=model_gbm.predict(test_1)\npred_df1=pred1.as_data_frame()\npred_df2=pred2.as_data_frame()","56849d43":"pred_df1.to_csv('pred_df1.csv', index=None)\npred_df2.to_csv('pred_df2.csv', index=None)","07a5c3c0":"# import pandas as pd \n# import numpy as np\n\n# pred_df1 = pd.read_csv('..\/input\/ncaam-predictions-v2\/pred_df1.csv')\n# pred_df2 = pd.read_csv('..\/input\/ncaam-predictions-v2\/pred_df2.csv')\n","0474ff9a":"ids = pd.read_csv('..\/input\/ncaam-march-mania-2021\/MSampleSubmissionStage1.csv').ID.values\nvalues = pred_df2.p1 * 0.9 + pred_df1.p1 * 0.1\n\nfinal_df = pd.DataFrame(columns=['ID', 'Pred'])\nfinal_df.ID = ids\nfinal_df.Pred = values\nfinal_df.to_csv('submission.csv', columns=['ID','Pred'], index=None)","cd2ca477":"final_df.to_csv('submission.csv', index=None)","2ff248ba":"final_df","1021ce4d":"# NCAAM Predictions\n---\n# If you fork, do leave an upvote!","1285c02e":"---\n# Give this notebook an upvote!"}}