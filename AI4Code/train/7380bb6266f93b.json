{"cell_type":{"77951c31":"code","fb9182df":"code","79c50182":"code","2958d021":"code","bffbc229":"code","946e61ea":"code","ba7738b1":"code","ffc0722e":"code","9729eafc":"code","d84b2c65":"code","cd63008b":"code","f2aad10f":"code","2453df42":"code","25a616eb":"code","64fec5f1":"code","e8c88b14":"code","fe0317d4":"code","3d2afafa":"code","574d4013":"code","da117d7c":"code","825ad121":"code","5c58e0bc":"code","7a9b4437":"code","d377865d":"code","32206cf2":"code","7df58689":"code","9efd3e27":"code","4cf85a44":"code","348cff94":"code","ba2cd3e0":"code","a967365d":"code","19e81812":"markdown","23fd429c":"markdown","010ed508":"markdown","fd40b573":"markdown","81a1bdc7":"markdown"},"source":{"77951c31":"import pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nimport matplotlib.pyplot as plt\nimport seaborn as sns   \nfrom tqdm import tqdm, trange","fb9182df":"print('Pandas : %s'%(pd.__version__))\nprint('Numpy : %s'%(np.__version__))\nprint('Scikit-Learn : %s'%(sklearn.__version__))\n!python --version","79c50182":"def grap_year(data):\n    data = str(data)\n    return int(data[:4])\n\ndef grap_month(data):\n    data = str(data)\n    return int(data[4:])","2958d021":"jeju = pd.read_csv('..\/input\/dacon-jeju-creditcard-competition\/201901-202003.csv')","bffbc229":"jeju2 = pd.read_csv('..\/input\/daconjejuaprildataset\/202004.csv')","946e61ea":"jeju3 = pd.concat([jeju,jeju2], ignore_index=True)","ba7738b1":"data = jeju3.fillna('')\ndata['year'] = data['REG_YYMM'].apply(lambda x: grap_year(x))\ndata['month'] = data['REG_YYMM'].apply(lambda x: grap_month(x))\ndata = data.drop(['REG_YYMM'], axis=1)","ffc0722e":"data.head()","9729eafc":"print(data['CNT'].describe())","d84b2c65":"print(data['CSTMR_CNT'].describe())","cd63008b":"test = False\n\nif test:\n    patition = int(len(data)*0.001) #24697\n    data2 = data[:patition]\nelse:\n    data2 = data.copy()","f2aad10f":"data['CNT'][1]","2453df42":"def feature_extra(data):\n    for i in trange(len(data)):\n        if data['CNT'][i] <= 5:\n            data['CNT'][i] = 0\n        elif data['CNT'][i] > 5 & data['CNT'][i] <= 12:\n            data['CNT'][i] = 1\n        elif data['CNT'] > 12 & data['CNT'][i] <= 40:\n            data['CNT'][i] = 2\n        else:\n            data['CNT'][i] = 3\n            \n        if data['CSTMR_CNT'][i] <= 4:\n            data['CSTMR_CNT'][i] = 0\n        elif data['CSTMR_CNT'][i] > 4 & data['CSTMR_CNT'][i] <= 8:\n            data['CSTMR_CNT'][i] = 1\n        elif data['CSTMR_CNT'] > 8 & dtdata1['CSTMR_CNT'][i] <= 24:\n            data['CSTMR_CNT'][i] = 2\n        else:\n            data['CSTMR_CNT'][i] = 3\n            \n    return data","25a616eb":"data3 = feature_extra(data2)","64fec5f1":"# \ub370\uc774\ud130 \uc815\uc81c\ndf = data3.copy()\ndf = df.drop(['CARD_CCG_NM', 'HOM_CCG_NM'], axis=1)\n\ncolumns = ['CARD_SIDO_NM', 'STD_CLSS_NM', 'HOM_SIDO_NM', 'AGE', 'SEX_CTGO_CD', 'FLC', 'year', 'month','CNT','CSTMR_CNT']\ndf = df.groupby(columns).sum().reset_index(drop=False)\n\n# \uc778\ucf54\ub529\ndtypes = df.dtypes\nencoders = {}\nfor column in df.columns:\n    if str(dtypes[column]) == 'object':\n        encoder = LabelEncoder()\n        encoder.fit(df[column])\n        encoders[column] = encoder\n        \ndf_num = df.copy()        \nfor column in encoders.keys():\n    encoder = encoders[column]\n    df_num[column] = encoder.transform(df[column])","e8c88b14":"df_num.head()","fe0317d4":"# \uc0c1\uad00\uad00\uacc4\nplt.figure(figsize=(10,10))\nsns.heatmap(data = df_num.corr(), annot=True, \nfmt = '.2f', linewidths=.5, cmap='Blues')","3d2afafa":"def dataset_cv(data, cv):\n    train_num = data.sample(frac=1, random_state=0)\n    \n    x = train_num.drop(['AMT'], axis=1)\n    y = np.log1p(train_num['AMT'])\n    \n    k = int(len(x)*0.2)\n    \n    if (cv == 1):\n        x_train = x[k:]\n        y_train = y[k:]\n        x_val = x[:k]\n        y_val = y[:k]\n        \n    elif (cv == 2):\n        x_train = x[k*2:]\n        x_train = x_train.append(x[:k])\n        y_train = y[k*2:]\n        y_train = y_train.append(y[:k])\n\n        x_val = x[k:k*2]\n        y_val = y[k:k*2]\n        \n    elif (cv == 3):\n        x_train = x[k*3:]\n        x_train = x_train.append(x[:k*2])\n        y_train = y[k*3:]\n        y_train = y_train.append(y[:k*2])\n\n        x_val = x[k*2:k*3]\n        y_val = y[k*2:k*3]\n        \n    elif (cv == 4):\n        x_train = x[k*4:]\n        x_train = x_train.append(x[:k*3])\n        y_train = y[k*4:]\n        y_train = y_train.append(y[:k*3])\n\n        x_val = x[k*3:k*4]\n        y_val = y[k*3:k*4]\n        \n    elif (cv == 5):\n        x_train = x[:k*4]\n        y_train = y[:k*4]\n        x_val = x[k*4:]\n        y_val = y[k*4:]\n        \n    return x_train, y_train, x_val, y_val","574d4013":"import lightgbm as lgb\n\nparams = {\n            'boosting_type': 'gbdt',\n            'objective': 'tweedie',\n            'tweedie_variance_power': 1.1,\n            'metric': 'rmse',\n            'subsample': 0.5,\n            'subsample_freq': 1,\n            'learning_rate': 0.03,\n            'num_leaves': 2**11-1,\n            'min_data_in_leaf': 2**12-1,\n            'feature_fraction': 0.5,\n            'max_bin': 1000,\n            'n_estimators': 1000,\n            'boost_from_average': False,\n            'verbose': -1\n        }\n","da117d7c":"def run_lgbm():\n    submission_list = []\n    \n    for i in range(5):\n        print(i+1,'loop..')\n        x_train, y_train, x_val, y_val = dataset_cv(df_num,i+1)\n        \n        train_ds = lgb.Dataset(x_train, label=y_train)\n        val_ds = lgb.Dataset(x_val, label=y_val)\n        \n        model = lgb.train(params,\n                  train_ds,\n                  10,\n                  val_ds,\n                  verbose_eval = 1000,\n                  early_stopping_rounds = 100\n                 )\n        \n        CARD_SIDO_NMs = df_num['CARD_SIDO_NM'].unique()\n        STD_CLSS_NMs  = df_num['STD_CLSS_NM'].unique()\n        HOM_SIDO_NMs  = df_num['HOM_SIDO_NM'].unique()\n        AGEs          = df_num['AGE'].unique()\n        SEX_CTGO_CDs  = df_num['SEX_CTGO_CD'].unique()\n        FLCs          = df_num['FLC'].unique()\n        years         = [2020]\n        months        = [4,7]\n        CSTMR_CNTs    = df_num['CSTMR_CNT'].unique()\n        CNTs          = df_num['CNT'].unique()\n\n        temp = []\n        for CARD_SIDO_NM in CARD_SIDO_NMs:\n            for STD_CLSS_NM in STD_CLSS_NMs:\n                for HOM_SIDO_NM in HOM_SIDO_NMs:\n                    for AGE in AGEs:\n                        for SEX_CTGO_CD in SEX_CTGO_CDs:\n                            for FLC in FLCs:\n                                for year in years:\n                                    for month in months:\n                                        for CSTMR_CNT in CSTMR_CNTs:\n                                            for CNT in CNTs:\n                                                temp.append([CARD_SIDO_NM, STD_CLSS_NM, HOM_SIDO_NM, AGE, SEX_CTGO_CD, FLC, year, month, CSTMR_CNT, CNT])\n\n        \n        temp = np.array(temp)\n        temp = pd.DataFrame(data=temp, columns=x_train.columns)\n        \n        pred = model.predict(temp)\n            \n        pred = np.expm1(pred)\n\n        temp['AMT'] = np.round(pred, 0)\n        temp['REG_YYMM'] = temp['year']*100 + temp['month']\n        temp = temp[['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM', 'AMT']]\n        temp = temp.groupby(['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM']).sum().reset_index(drop=False)\n        \n       \n        temp['CARD_SIDO_NM'] = encoders['CARD_SIDO_NM'].inverse_transform(temp['CARD_SIDO_NM'])\n        temp['STD_CLSS_NM'] = encoders['STD_CLSS_NM'].inverse_transform(temp['STD_CLSS_NM'])\n\n        submission = pd.read_csv('..\/input\/dacon-jeju-creditcard-competition\/submission.csv', index_col=0)\n        submission = submission[697:] # 7\uc6d4\n        submission.reset_index(drop=True)\n        submission = submission.drop(['AMT'], axis=1)\n        submission = submission.merge(temp, left_on=['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM'], right_on=['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM'], how='left')\n        submission.index.name = 'id'\n        \n        submission_list.append(submission)\n        \n    return submission_list","825ad121":"submission_list = run_lgbm()","5c58e0bc":"for i in range(1,5):\n    submission_list[0]['AMT'] = submission_list[0]['AMT'] + submission_list[i]['AMT']","7a9b4437":"submission_list[0]['AMT'] = submission_list[0]['AMT']\/5","d377865d":"submission_list[0].to_csv('lgbm_5cv_submission.csv', encoding='utf-8-sig')\nsubmission_list[0].head()","32206cf2":"july_result = submission_list[0]","7df58689":"april_data = pd.read_csv('..\/input\/daconjejuaprildataset\/202004.csv')\napril_data2 = april_data.fillna('')\napril_data3 = april_data2[['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM', 'AMT']]\napril_data4 = april_data3.groupby(['REG_YYMM', 'CARD_SIDO_NM', 'STD_CLSS_NM']).sum().reset_index(drop=False)\napril_data5 = april_data4[['CARD_SIDO_NM', 'STD_CLSS_NM','AMT']]","9efd3e27":"april = pd.read_csv('..\/input\/dacon-jeju-creditcard-competition\/submission.csv', index_col=0)\napril2 = april[:697] # 7\uc6d4\napril3 = april2[['REG_YYMM','CARD_SIDO_NM', 'STD_CLSS_NM']]\napril4 = april3.merge(april_data5, left_on=['CARD_SIDO_NM', 'STD_CLSS_NM'], right_on=['CARD_SIDO_NM', 'STD_CLSS_NM'], how='left')\napril5 = april4.fillna(0)","4cf85a44":"april_result = april5","348cff94":"april_result","ba2cd3e0":"final_result = pd.concat([april_result,july_result], ignore_index=True)","a967365d":"final_result.to_csv('submission.csv', encoding='utf-8-sig')\nfinal_result.head()","19e81812":"# Feature Engineering & Modeling","23fd429c":"# Data Cleaning & pre-processing","010ed508":"# Import Library","fd40b573":"# April result","81a1bdc7":"# Exploratory Data Analysis"}}