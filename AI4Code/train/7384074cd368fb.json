{"cell_type":{"0e398035":"code","afbcb927":"code","5dc18027":"code","034711f5":"code","04a72b5a":"code","9aae4bc7":"code","eb9e7670":"code","5b996f05":"code","90c318cb":"code","8efd6df1":"code","b9b7230b":"markdown","8305d664":"markdown","c1f7889c":"markdown","71c04f58":"markdown","beecd144":"markdown","ed48dfa4":"markdown","b0db1f8e":"markdown","af941378":"markdown","ba94262a":"markdown","8578bed5":"markdown","3bd565cf":"markdown","4f26a72b":"markdown","b84e31da":"markdown","bfa0588e":"markdown","0d2eed44":"markdown","a2885d2f":"markdown","51145504":"markdown"},"source":{"0e398035":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as pgo\nimport plotly.io as pio\nimport plotly.subplots as psp\n\npd.set_option('display.max_columns', None)\n\npio.templates['custom'] = pgo.layout.Template(\n    layout=pgo.Layout(**dict(\n        width=600,\n        title=dict(\n            x=.5,\n            xanchor='center',\n            xref='paper',\n        ),\n        legend=dict(\n            bgcolor='rgba(0,0,0,0)',  # transparent background\n        ),\n        margin=dict(\n            l=50,\n            r=50,\n            b=50,\n        )\n    ))\n)\npio.templates.default = 'custom'\n\npop_df = pd.read_csv('\/kaggle\/input\/polish-demographics-20182019\/population_2019.csv')\n\nwith open('\/kaggle\/input\/poland-presidential-elections-2020-results\/polish_provinces.geojson', 'r', encoding='utf-8') as f:\n    geojson = json.loads(f.read())\n    \"\"\"\n    geojson['features'] = [\n        {\n          \"type\": \"Feature\",\n          \"properties\": {\n              'id': '381',\n              'powiat': 'statki',\n              'teryt_code': 149800\n          },\n          \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n              [\n                [\n                  21.075210571289062,\n                  52.153293169484385\n                ],\n                [\n                  21.14593505859375,\n                  52.153293169484385\n                ],\n                [\n                  21.14593505859375,\n                  52.20129455694109\n                ],\n                [\n                  21.075210571289062,\n                  52.20129455694109\n                ],\n                [\n                  21.075210571289062,\n                  52.153293169484385\n                ]\n              ]\n            ]\n          }\n        },\n        {\n            \"type\": \"Feature\",\n            \"properties\": {\n              'id': '382',\n              'powiat': 'zagranica',\n              'teryt_code': 149900\n            },\n            \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n              [\n                [\n                  21.150741577148438,\n                  52.19498154435874\n                ],\n                [\n                  21.223526000976562,\n                  52.19498154435874\n                ],\n                [\n                  21.223526000976562,\n                  52.24041522350549\n                ],\n                [\n                  21.150741577148438,\n                  52.24041522350549\n                ],\n                [\n                  21.150741577148438,\n                  52.19498154435874\n                ]\n              ]\n            ]\n            }\n        }\n    ] + geojson['features']\n    \"\"\"\n\ndef bold(txt):\n    return '<b>' + str(txt) + '<\/b>'\n\ndef make_title(txt, **kwargs):\n    return dict(\n        text=bold(str(txt).upper()),\n        **kwargs\n    )\n\ndef multiline_text(*args):\n    return '<br>'.join(map(str, args))\n\ndef make_hover_text(lines):\n    return '<br>'.join([\n        (bold(label) + ': ' + value).strip(' :')\n        for label, value in lines \n    ])\n\ndef make_simple_colorscale(hash_color):\n    hash_color = hash_color.lstrip('#')\n    return [\n        # Let first 10% (0.1) of the values have color rgb(0, 0, 0)\n        [0, \"rgb(255, 255, 255)\"],\n        [1, f\"rgb({int(hash_color[:2], 16)}, {int(hash_color[2:4], 16)}, {int(hash_color[4:], 16)})\"]]\n\nTRAD_COLS = [\n    'electoral_district_id',\n    'teryt_code', \n    'powiat',\n    'voivodeship',\n    'n_received_ballot_papers',\n    'n_entitled_voters',\n    'n_unused_voting_cards',\n    'n_voters_issued_ballot_papers',\n    'n_voters_by_proxy',\n    'n_voters_with_displacement_certificate',\n    'n_voters_issued_voting_pack',\n    'n_received_envelopes',\n    'n_envelopes_withouth_vote',\n    'n_envelopes_unsigned',\n    'n_envelopes_withouth_voting_card',\n    'n_improperly_sealed_envelopes',\n    'n_envelopes_put_in_ballot_box',\n    'n_cards_in_ballot_box',\n    'n_cards_taken_from_envelope',\n    'n_invalid_cards',\n    'n_valid_cards',\n    'n_invalid_votes',\n    'multiple_candidates_crossed',\n    'no_candidate_crossed',\n    'candidate_name_crossed',\n    'n_valid_votes',\n    'n_counties']\n\nCANDIDATES_COLORS = dict(zip(\n    ['duda', 'trzaskowski', 'ho\u0142ownia', 'bosak', 'kosiniak-kamysz',\n     'biedro\u0144', '\u017c\u00f3\u0142tek', 'jakubiak', 'tanajno', 'witkowski', 'piotrowski'],\n    ['#df0000', '#009bdf', '#eca900', '#0d2e87', '07b895',\n     '#5704f1', '#841fc2', '#192966', '#ed6ec8', '#f15a04', '#f1044d']))\n\nCITIES_TERYT_CODES = list(set(pop_df['teryt_code']) - set(pop_df[pop_df['area_type'] == 'rural']['teryt_code']))","afbcb927":"votes1_df = pd.read_csv('\/kaggle\/input\/poland-presidential-elections-2020-results\/results_provinces_round1.csv', sep=';', low_memory=False)\n\nvotes1_df.columns = TRAD_COLS[:-1] + votes1_df.columns[len(TRAD_COLS)-1:-1].str.split().str[-1].str.lower().tolist() + TRAD_COLS[-1:]\nvotes1_df['powiat'] = votes1_df['powiat'].str.lower().str.strip()\nvotes1_df['teryt_code'] = votes1_df['teryt_code'].replace({146501: 146500})\nvotes1_df['is_city'] = votes1_df['teryt_code'].isin(CITIES_TERYT_CODES)\nvotes1_df = votes1_df.set_index('teryt_code')\n\nvotes1_df['turnout'] = votes1_df['n_cards_in_ballot_box'] \/ votes1_df['n_entitled_voters']\n\nall_candidates = list(CANDIDATES_COLORS.keys())\nothers = [c for c in all_candidates if c not in ['duda', 'trzaskowski']]\nvotes1_df['others'] = votes1_df[others].sum(axis=1)\n\nvotes1_df[[f'{c}_perc' for c in all_candidates]] = (\n    votes1_df[all_candidates]\n    .apply(lambda row: row \/ row.sum(), axis=1))\nvotes1_df['others_perc'] = votes1_df[others].sum(axis=1) \/ votes1_df[all_candidates].sum(axis=1)\n\nvotes1_df['winner'] = votes1_df[all_candidates].apply(lambda row: row.idxmax(), axis=1)\nvotes1_df['duda_trzaskowski_diff'] = votes1_df['duda'] \/ votes1_df[['duda', 'trzaskowski']].sum(axis=1) - 0.5\n\nvotes1_df['by_proxy_perc'] = votes1_df['n_voters_by_proxy'] \/ votes1_df['n_valid_votes']\nvotes1_df['by_post_perc'] = votes1_df['n_voters_issued_voting_pack'] \/ votes1_df['n_entitled_voters']\nvotes1_df['post_efficiency'] = votes1_df['n_received_envelopes'] \/ votes1_df['n_voters_issued_voting_pack']\n\nvotes1_df_l = votes1_df[~votes1_df['powiat'].isin(['statki', 'zagranica'])]","5dc18027":"fig = psp.make_subplots(\n    rows=1, cols=2, \n    specs=[[dict(type='choropleth'), dict(type='choropleth')]],\n    subplot_titles=list(map(bold, ['Registered Voters per Province'.upper(), 'Provinces Type'.upper()]))\n)\n\nfig.add_trace(\n    row=1, col=1,\n    trace=pgo.Choropleth(\n        geojson=geojson,\n        locations=votes1_df_l.index,\n        featureidkey=\"properties.teryt_code\",\n        z=votes1_df['n_entitled_voters'],\n        customdata=votes1_df_l[['powiat', 'voivodeship']].applymap(str.title),\n        name='',\n        colorscale='Reds',\n        hoverinfo='text',\n        hovertemplate=make_hover_text([\n            ('Voivodeship', '%{customdata[1]}'),\n            ('Powiat',  '%{customdata[0]}'),\n            ('', ''),\n            ('Entitled Voters', '%{z:.0f}')\n        ]),\n        marker_line_width=2.,\n        colorbar=dict(x=.53, xanchor='right', len=.7, tickprefix='<b>', ticksuffix='<\/b>')\n    )\n)\n\ndata = votes1_df_l[votes1_df_l['is_city']]\nfig.add_trace(\n    row=1, col=2,\n    trace=pgo.Choropleth(\n        geojson=geojson,\n        locations=data.index,\n        featureidkey=\"properties.teryt_code\",\n        z=[1] * len(data),\n        customdata=data[['powiat', 'voivodeship']].applymap(str.title),\n        name='City',\n        colorscale=[(0, '#c6c6c7',), (1, '#c6c6c7',)],\n        hoverinfo='text',\n        hovertemplate=make_hover_text([\n            ('Voivodeship', '%{customdata[1]}'),\n            ('Powiat',  '%{customdata[0]}'),\n            ('', ''),\n            ('Type', 'City')\n        ]),\n        marker_line_width=2.,\n        showscale=False,\n        showlegend=True\n    )\n)\ndata = votes1_df_l[~votes1_df_l['is_city']]\nfig.add_trace(\n    row=1, col=2,\n    trace=pgo.Choropleth(\n        geojson=geojson,\n        locations=data.index,\n        featureidkey=\"properties.teryt_code\",\n        z=[1] * len(data),\n        customdata=data[['powiat', 'voivodeship']].applymap(str.title),\n        name='Countryside',\n        colorscale=[(0, '#59a80c',), (1, '#59a80c',)],\n        hoverinfo='text',\n        hovertemplate=make_hover_text([\n            ('Voivodeship', '%{customdata[1]}'),\n            ('Powiat',  '%{customdata[0]}'),\n            ('', ''),\n            ('Type', 'Countryside')\n        ]),\n        marker_line_width=2.,\n        showscale=False,\n        showlegend=True\n    )\n)\n\nfig.update_layout(\n    width=800,\n    margin={\"r\":0,\"t\":80,\"l\":0,\"b\":80},\n    legend=dict(x=.9, xanchor='left', y=1),\n    geo=dict(showframe=False,\n             fitbounds=\"locations\",\n             visible=False,\n             projection=pgo.layout.geo.Projection(type = 'mercator')),\n    geo2=dict(showframe=False,\n             fitbounds=\"locations\",\n             visible=False,\n             projection=pgo.layout.geo.Projection(type = 'mercator')),\n)\n\nfig","034711f5":"pie_data = (\n    votes1_df_l\n    .groupby('is_city')\n    ['n_entitled_voters']\n    .sum()\n    .rename(index={False: 'Countryside', True: 'City'}))\n\npie_data['Abroad'] = votes1_df[votes1_df['powiat'] == 'zagranica']['n_entitled_voters'].sum()\npie_data['Ships'] = votes1_df[votes1_df['powiat'] == 'statki']['n_entitled_voters'].sum()\n\nfig = pgo.Figure()\n\nfig.add_trace(\n    trace=pgo.Pie(\n        labels=pie_data.index,\n        values=pie_data.values,\n        marker_colors=['#59a80c', '#c6c6c7', '#d57d01', '#0189d5'],\n        marker_line_width=2,\n        name='',\n        texttemplate=multiline_text(bold('%{label}'), '%{percent}', '%{value}')\n    )\n)\n\nfig.update_layout(\n    title=make_title('Registered Voters by Area Type'))\n\nfig","04a72b5a":"pie_data = (\n    votes1_df_l[votes1_df_l['is_city']]\n    .reset_index()\n    .groupby(['powiat'])\n    ['n_entitled_voters']\n    .sum()\n    .sort_values()\n    .iloc[::-1]\n)\n\npie_data = pd.concat([\n    pie_data[pie_data >= 250_000],\n    pd.Series([pie_data[pie_data < 250_000].sum()], index=['others'])\n])\n\nfig = pgo.Figure()\n\nfig.add_trace(\n    pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2, sort=False,\n        texttemplate=multiline_text(bold('%{label}'), '%{percent}', '%{value}'),\n        textposition='outside',\n        showlegend=False\n    )\n)\n\nfig.update_layout(\n    title=make_title('Urban Electorate', yref='container', y=.98),\n)\n\nfig","9aae4bc7":"fig = psp.make_subplots(\n    rows=2, cols=7, \n    specs=[[dict(type='domain', rowspan=2), dict(type='domain', colspan=2), None, dict(type='domain', colspan=2), None, dict(type='domain', colspan=2), None],\n           [None, None, dict(type='domain', colspan=2), None, dict(type='domain', colspan=2), None, None]],\n    horizontal_spacing=0.005, vertical_spacing=.05,\n    column_widths=[.75,1\/6,1\/6,1\/6,1\/6,1\/6,1\/6],\n    subplot_titles=list(map(bold, ['Overall', 'Big Cities', 'Cities', 'Countryside', 'Abroad', 'Ships'])))\n\npie_data = (\n    votes1_df\n    [all_candidates].sum()\n)\n\nfig.add_trace(\n    row=1, col=1,\n    trace=pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2,\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in pie_data.index],\n        name=''\n    )\n)\n\npie_data = (\n    votes1_df\n    [votes1_df['is_city'] & votes1_df['n_entitled_voters'].ge(250_000)]\n    [all_candidates].sum()\n)\n\nfig.add_trace(\n    row=1, col=2,\n    trace=pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2,\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in pie_data.index],\n        name='',\n        textposition='inside',\n    )\n)\n\npie_data = (\n    votes1_df\n    [votes1_df['is_city'] & votes1_df['n_entitled_voters'].lt(250_000)]\n    [all_candidates].sum()\n)\n\nfig.add_trace(\n    row=1, col=4,\n    trace=pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2,\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in pie_data.index],\n        name='',\n        textposition='inside',\n        domain=dict(row=2, column=1)\n    )\n)\n\npie_data = (\n    votes1_df\n    [~votes1_df['is_city'] & ~votes1_df['powiat'].isin(['zagranica', 'statki'])]\n    [all_candidates].sum()\n)\n\nfig.add_trace(\n    row=1, col=6,\n    trace=pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2,\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in pie_data.index],\n        name='',\n        textposition='inside',\n        domain=dict(row=2, column=1)\n    )\n)\n\npie_data = (\n    votes1_df\n    [votes1_df['powiat'].isin(['zagranica'])]\n    [all_candidates].sum()\n)\n\nfig.add_trace(\n    row=2, col=3,\n    trace=pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2,\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in pie_data.index],\n        name='',\n        textposition='inside',\n        domain=dict(row=2, column=1)\n    )\n)\n\npie_data = (\n    votes1_df\n    [votes1_df['powiat'].isin(['statki'])]\n    [all_candidates].sum()\n)\n\nfig.add_trace(\n    row=2, col=5,\n    trace=pgo.Pie(\n        labels=pie_data.index.str.title(),\n        values=pie_data.values,\n        marker_line_width=2,\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in pie_data.index],\n        name='',\n        textposition='inside',\n        domain=dict(row=2, column=1)\n    )\n)\n\nfig.update_layout(\n    width=900, height=600,\n    title=make_title('Votes Repartition'),\n    margin=dict(b=120, t=120)\n)\n\nfig","eb9e7670":"fig = pgo.Figure()\n\norder = ['duda', 'bosak', 'kosiniak-kamysz', 'jakubiak', 'piotrowski',\n         'trzaskowski', 'ho\u0142ownia', 'biedro\u0144', 'tanajno', 'witkowski',  '\u017c\u00f3\u0142tek']\nheatmap_df = (\n    votes1_df_l[[f'{c}_perc' for c in all_candidates] + ['n_entitled_voters']]\n    .corr()\n    .loc[:, ['n_entitled_voters']]\n    .iloc[:-1, :]\n    .sort_values('n_entitled_voters')\n)\n\nfig.add_trace(\n    pgo.Heatmap(\n        z=heatmap_df.values,\n        zmin=-1, zmax=1,\n        x=[''],\n        y=heatmap_df.index.str[:-5].str.title(),\n        colorscale='RdYlGn',\n        colorbar=dict(outlinewidth=2, tickprefix='<b>', ticksuffix='<\/b>',\n                      tickmode='array', tickvals=[1, 0, -1], \n                      ticktext=list(map(bold, ['1 - Big Cities', '0 - Both Types', '-1 - Rural Areas'])),\n                      tickangle=0),\n        hovertemplate=multiline_text(\n            bold('%{y}') + ': %{z:.3f}'\n        ),\n        xgap=3,ygap=3,\n        name='',\n    )\n)\n\nfig.update_layout(\n    width=700,\n    height=700,\n    autosize=True,\n    margin=dict(l=150, r=300, b=100),\n    title=make_title('VOTES SHARE vs PROVINCE SIZE'),\n    annotations=[*[\n        dict(\n            x=c,\n            y=r,\n            text=round(v,2),\n            showarrow=False,\n            font_color='#ffffff' if abs(v) > .5 else '#000000',\n            font_size=10\n        )\n        for r, row in enumerate(heatmap_df.values)\n        for c, v in enumerate(row)\n    ], *[\n        dict(x=.5, y=1.1, xref='paper', yref='paper', showarrow=False,\n             text=multiline_text(\n                 'How candidates\\' results correlate to the province size?',\n                 'Does a candidate have more success in the cities or in the rural areas?'\n             ),\n             font_size=15),\n    ]]\n)\n\nfig","5b996f05":"ncols=4\nnrows=int(np.ceil(len(CANDIDATES_COLORS) \/ ncols))\n\nfig = psp.make_subplots(\n    rows=nrows, cols=ncols, \n    specs=[[dict(type='choropleth') for _ in range(ncols)] for _ in range(nrows)],\n    horizontal_spacing=0, vertical_spacing=0)\n\nfig.add_traces(\n    rows=[(i \/\/ ncols) + 1 for i in range(len(CANDIDATES_COLORS))], \n    cols=[i % ncols + 1 for i in range(len(CANDIDATES_COLORS))], \n    data=[\n        pgo.Choropleth(\n            geojson=geojson,\n            locations=votes1_df_l.index,\n            featureidkey=\"properties.teryt_code\",\n            z=votes1_df_l[f'{candidate}_perc'] * 100,\n            customdata=votes1_df_l[['powiat', 'voivodeship']].applymap(str.title),\n            name='',\n            colorscale=make_simple_colorscale(color),\n            colorbar=dict(\n                x=1\/ncols*.85 + 1\/ncols * (i % ncols), \n                y=1\/nrows * (nrows - (i \/\/ ncols)) - 1\/(2*nrows),\n                yanchor='middle',\n                len=1\/nrows*.75, \n                thickness=20,\n                outlinewidth=2, tickprefix='<b>', ticksuffix='%<\/b>'),\n            hoverinfo='text',\n            hovertemplate=make_hover_text([\n                ('Voivodeship', '%{customdata[1]}'),\n                ('Powiat',  '%{customdata[0]}'),\n                ('', ''),\n                ('Voters', '%{z:.1f}%')\n            ]),\n            marker_line_width=1.5\n        )\n        for i, (candidate, color) in enumerate(CANDIDATES_COLORS.items())\n    ])\n\nfig.update_geos(\n    fitbounds=\"locations\",\n    visible=False,)\n\nratio=5\/6\nsubplot_width=1300 \/\/ ncols\nsubplot_height=int(subplot_width*ratio)\nfig.update_layout(\n    width=subplot_width * ncols,\n    height=subplot_height * nrows,\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0},\n    **{f'geo{i}': dict(showframe=False, projection=pgo.layout.geo.Projection(type = 'mercator'))\n       for i in range(1, len(CANDIDATES_COLORS) +1)})\nfig.update_layout(\n    title=make_title('Candidates\\' Votes Map'),\n    annotations=[*[\n        dict(x=1\/ncols*.80 + 1\/ncols * (i % ncols), \n             y=1\/nrows * (nrows - (i \/\/ ncols)), \n             xanchor='right',\n             yanchor='top',\n             text=f'<b>{candidate.title()}<\/b>', \n             font_size=18,\n             showarrow=False)\n        for i, candidate in enumerate(CANDIDATES_COLORS.keys())\n    ], dict(\n        x=.5, y=1.035, xref='paper', yref='paper', \n        showarrow=False,\n        text='How is candidates\\' success distributed over the territory?',\n         font_size=15\n    )])\n\nfig","90c318cb":"fig = pgo.Figure()\n\norder = ['duda', 'bosak', 'kosiniak-kamysz', '\u017c\u00f3\u0142tek', 'jakubiak', 'piotrowski',\n         'trzaskowski', 'ho\u0142ownia', 'biedro\u0144', 'tanajno', 'witkowski']\nheatmap_df = (\n    votes1_df_l[[f'{p}_perc' for p in ['duda', 'trzaskowski'] + others]]\n    .corr()\n    .loc[[f'{p}_perc' for p in order], [f'{p}_perc' for p in order]]\n    .iloc[::-1]\n)\n\nfig.add_trace(\n    pgo.Heatmap(\n        z=heatmap_df.values,\n        zmin=-1, zmax=1,\n        x=heatmap_df.columns.str[:-5].str.title(),\n        y=heatmap_df.index.str[:-5].str.title(),\n        colorscale='RdYlGn',\n        colorbar=dict(outlinewidth=2, tickprefix='<b>', ticksuffix='<\/b>',\n                      tickmode='array', tickvals=[1, 0, -1], \n                      tickangle=90,\n                      ticktext=['                  <b>Agreement<\/b>', \n                                '<b>Indifference<\/b>', \n                                '<b>Contrast<\/b>             ']),\n        hovertemplate=multiline_text(\n            bold('%{x}') + ' vs ' + bold('%{y}'),\n            bold('Correlation') + ': %{z}'\n        ),\n        xgap=3,ygap=3,\n        name='',\n    )\n)\n\nfig.update_layout(\n    width=700,\n    height=700,\n    autosize=True,\n    margin=dict(l=150, b=100),\n    title=make_title('Candidates Results Correlation'),\n    annotations=[*[\n        dict(\n            x=c,\n            y=r,\n            text=round(v,2),\n            showarrow=False,\n            font_color='#ffffff' if abs(v) > .5 else '#000000',\n            font_size=10\n        )\n        for r, row in enumerate(heatmap_df.values)\n        for c, v in enumerate(row)\n    ], *[\n        dict(x=.5, y=1.1, xref='paper', yref='paper', showarrow=False,\n             text=multiline_text(\n                 'How candidates\\'s results in the different powiats relate to one another?',\n                 'Does the success of a candidate imply the defeat of another one?'\n             ),\n             font_size=15),\n    ]]\n)\n\nfig","8efd6df1":"group_a = ['duda', 'bosak', 'kosiniak-kamysz', 'jakubiak', 'piotrowski']\ngroup_b = ['trzaskowski', 'ho\u0142ownia', 'biedro\u0144', 'tanajno', 'witkowski']\ngroup_c =['\u017c\u00f3\u0142tek']\n\nlabels = [*[f'{g[0]} & Co.'.title() for g in [group_a, group_b, group_c]], \n          *[v.title() for g in [group_a, group_b, group_c] for v in g]]\nparents = [\"\", \"\", \"\", *[f'{g[0]} & Co.'.title() for g in [group_a, group_b, group_c] for _ in range(len(g))]]\nvalues = [*[votes1_df[g].sum().sum() for g in [group_a, group_b, group_c]], \n          *[votes1_df[c].sum().sum() for g in [group_a, group_b, group_c] for c in g]]\n\nfig = pgo.Figure()\n\nfig.add_trace(\n    pgo.Sunburst(\n        labels=labels,\n        parents=parents,\n        values=values,\n        branchvalues=\"total\",\n        marker_colors=[CANDIDATES_COLORS.get(c) for c in ['duda', 'trzaskowski', '\u017c\u00f3\u0142tek'] + group_a + group_b + group_c],\n        texttemplate='<b>%{label}<\/b><br>%{percentEntry}',\n        marker_line_width=3, marker_line_color='#444',\n        leaf_opacity=1\n    )\n)\n\nfig.update_layout(\n    title=make_title('Round 2 Results Guess'))\n\nfig","b9b7230b":"## Two Very Different Battlefields: Cities vs Countryside","8305d664":"## The Battlefield: Poland\n\nNow that we know who is in for it, let's take a look at where it takes place.","c1f7889c":"# **(WORK IN PROGRESS... Round 2 is coming!)**","71c04f58":"## The Generals: Meet the Candidates\n\n![](https:\/\/cdn.galleries.smcloud.net\/t\/galleries\/gf-4V5b-ddzH-1iFk_wybory-2020-kandydaci-664x442-nocrop.jpg)\n\nThese are the 11 presidential candidates:\n- **Robert Biedro\u0144** <br>\n  the candidate of the Left (*Lewica*). Currently a Member of the European Parliament, former mayor of S\u0142upsk and Poland\u2032s first openly gay mayor. Robert Biedro\u0144 is 44 years old, has higher political science education and is an LGBT activist. <br>Key points: minimum pension PLN 1600 net, 7.2% of GDP for healthcare, one million cheap apartments to rent.\n  <img src='https:\/\/i.iplsc.com\/kandydat-lewicy-w-wyborach-prezydenckich-lider-wiosny-robert\/000A7DKG210WMF7R-C123-F4.webp' width='400'>\n\n- **Krzysztof Bosak** <br>\n  the candidate of the Confederation (*Konfederacja), the nationalistic far-right party. 38-year-old, currently a member of the Polish Parliament. Bosak has a secondary education. <br>Key points: \"economic freedom\" (i.e. entrepreneur has complete freedom in the selection of associates, contractors, employees and clients), radical simplification of economic law and national ownership of natural resources.\n  <img src='https:\/\/i.iplsc.com\/kandydat-konfederacji-na-prezydenta-rp-krzysztof-bosak\/000A7DKQO4GXCXQT-C123-F4.webp' width='400'>\n\n- **Andrzej Duda** <br>\n  the current President of the Republic of Poland, technically a non-party candidate, practically a member of the conservative and populist party Law and Justice (*Prawo i Sprawiedliwo\u015b\u0107*). 48 years old, higher legal education. <br>Key points: maintaining the \"500+\" program and other social programs, introducing a solidarity allowance for people who have lost their jobs as a result of the Coronavirus pandemic; ban on privatization of health care, investments for the war against smog.\n  <img src='https:\/\/i.iplsc.com\/prezydent-rp-andrzej-duda\/000A7DL4NUAUFMVJ-C123-F4.webp' width='400'>\n\n- **Szymon Ho\u0142ownia** <br>\n  a non-party candidate. 43-year-old publicist, secondary education. <br>Key points: Poland without coal by 2050, joining the Green Deal project, preserving the abortion compromise.\n  <img src='https:\/\/i.iplsc.com\/kandydat-na-prezydenta-rp-szymon-holownia\/000A7DLC126Q8VR8-C123-F4.webp' width='400'>\n\n- **Marek Jakubiak** <br>\n  candidate for the Federation for the Republic. 61-years old, secondary education. <br>Key points: strengthening the role of the president, tax-free amount of 12 minimum salaries, reform of the judiciary system.\n  <img src='https:\/\/i.iplsc.com\/kandydat-na-prezydenta-rp-przedsiebiorca-marek-jakubiak\/000A7DLI0QPFXGGX-C123-F4.webp' width='400'>\n\n- **W\u0142adys\u0142aw Kosiniak-Kamysz** <br>\n  candidate of the Polish People's Party (*PSL*), a conservative and agrarian party. 38-year-old, higher medical education, currently a member of the Polish Parliament. <br>Key points: president over divisions, 7.2% of GDP for healthcare, 30% higher salaries to employees of medical facilities, 0 percent VAT on healthy food, increasing the tax-free amount to PLN 8,000.\n  <img src='https:\/\/i.iplsc.com\/prezes-polskiego-stronnictwa-ludowego-kandydat-w-wyborach-pr\/000A7DLR4QABQQKJ-C123-F4.webp' width='400'>\n\n- **Miros\u0142aw Piotrowski** <br>\n  candidate of the True Europe Movement (*Ruchu Prawdziwa Europa*). 54 years old, higher historical education, university teacher. <br>Key points: radical tax cuts, reform of the Social Insurance Institution system, protection of human life from conception to natural death.\n  <img src='https:\/\/i.iplsc.com\/kandydat-w-wyborach-prezydenckich-prof-miroslaw-piotrowski\/000A7DMB6W0CQMWR-C123-F4.webp' width='400'>\n\n- **Pawe\u0142 Tanajno** <br>\n  a non-party candidate. 45 years old, higher education in management. <br>Key points: improving the image of Poland abroad, ensuring prosperity, low taxes and freedom, returning sovereignty to citizens.\n  <img src='https:\/\/i.iplsc.com\/kandydat-w-wyborach-prezydenckich-pawel-tanajno\/000A7DMLNF9087AV-C123-F4.webp' width='400'>\n\n- **Rafa\u0142 Trzaskowski** <br>\n  candidate of the second biggest party in Poland, Civic Coalition (*PO*, *Platforma Obywatelska*), and the current Mayor of Warsaw. 48 years old, higher education in political science, studied abroad in Oxford and Paris and speaks 5 languages. <br>Key points: equal opportunities for men and women, mantaining the \"500+\" program, introduction of civil unions, investments in clean air.\n  <img src='https:\/\/i.iplsc.com\/prezydent-warszawy-kandydat-w-wyborach-prezydenckich-rafal-t\/000A7DMRIGTQ8WY2-C123-F4.webp' width='400'>\n\n- **Waldemar Witkowski** <br>\n  66 years old, university education, member of the Labor Union. <br>Key points: a seven-hour working day, environmental protection, privileged cooperation with the European Union, instead of the USA.\n  <img src='https:\/\/i.iplsc.com\/kandydat-na-prezydenta-rp-waldemar-witkowski\/000A7DMYMS6GTP4F-C123-F4.webp' width='400'>\n  \n- **Stanis\u0142aw \u017b\u00f3\u0142tek**<br> \n  candidate of the New Right Congress. 64-year-old, secondary education. Member of the Congress of the New Right and Polexit.<br>Key points: abolition of the election threshold, strengthening of the president's authority (similarly to the USA), liquidation of counties, right to possess weapons.\n  <img src='https:\/\/i.iplsc.com\/kandydat-na-urzad-prezydenta-rp-stanislaw-zoltek\/000A7DNCPWFH2WE9-C123-F4.webp' width='400'>","beecd144":"## Did I Miss Something? Winners and Losers\n\nThe first round has already come to an end. Let's now look at the winners and losers.","ed48dfa4":"Here we have it. It seems Duda (theoretical) coalition is stronger than Trzaskowski's and will win again in Round 2. Even leaving Zoltek as a third random variable, it is clear that it has no influence whatsoever on the results.","b0db1f8e":"## The War is not Over Yet: What's Next?","af941378":"Cheching the correlation between candidates' success and size of the province (by number of registered voters) we confirm our feelings:\n- Duda has a negative correlation, saying it gets better results in smaller, rural, areas; not surprisingly Kosiniak-Kamisz has the same fate, being also the leader of an agrarian party (PSL);\n- Trzaskoswski, on the other hand has a the same but positive correlation with the province size, suggesting he gets better results in largely populated areas;\n- interestingly, Biedro\u0144 has more success in larger centers, too: a possible reason for this is his sexual orientation. Being openly gay, it seems he finds more supports from bigger centers that have a more open mind and less prejudice, while in the countriside (where many people still believe that homosexuality is an illness) he faces more resistance;\n- similarly to Biedro\u0144, also Witkowski, due to his very progressive views (e.g. adoption for LGBT couples), finds more support in larger areas with possibly more open minds;\n- as we've seen earlier, since Ho\u0142ownia and Bosak seem to have a steady support accross all types of areas, they have a correlation very close to 0.\n\nStill, it must be noted that having almost the same support in all area types does not mean having the same support throughout all the country. A candidate can still get 15% of all the votes in the cities but maybe thanks to a big win in only a couple of cities while taking almost no votes in the rest. Supporters can be mostly located in specific or strategic regions and provinces and the distribution accross provinces can be very skewed, still. So, let's now have a look at how candidates' success is actually spread across Poland.","ba94262a":"What emerges from these maps is a real clash of clans. It is evident that there is a pretty strong contrast between two sets of candidates that dominate two different and very clear areas:\n- on one side we have Duda and Bosak, together with Kosiniak-Kamysz, Zoltek, Jakubiak and Piotrowski, mainly representatives of right and far-right, populist parties in Poland, getting most of their support from the cities and the provinces in the East and South-East of the Country;\n- on the other one Trzaskowski, Holownia and Biedron, together with Tanajno and Witkowski, representing the progressive right, center and left wings, respectively, taking on the West and North-West areas, plus the cities in the East (it is pretty evident in Warsaw);\n\nTo confirm our feelings we can also check the correlation between candidates' results. Does the success of a candidate come together with the success of another candidate?","8578bed5":"So what's next? Well, none of the candidate could get more than the 50%, so a second round between the two most-voted candidates is required.\nAt this point it seems we can make a guess about how people will vote in the second round: we have Duda & Co. vs Trzaskowski & Co., plus the enygmatic Mr. \u017b\u00f3\u0142tek. Let's see what comes out.","3bd565cf":"Moreover, if we look into cities we can see that only 9 cities are above 250k voters and they are sort of outliers, while the rest are very small cities.\n\nAt this point we know that 75% of the voters live either in the countryside or in small cities. It is pretty clear that that's were one must harvest most votes. Controlling the countryside really means controlling the whole country.","4f26a72b":"So the winner really is Andzrej Duda with 43.5% of the votes, followed by Trzaskowski with 30.5%. Quite a defeat.\n\nHowever, what really strikes about these plots is:\n- firstly, it seems that Duda consensus drops as the size of the province\/city increases: he goes from a stunning 49.5% in the countryside, to a fair 37.1% in the smaller cities and to a very meager 28.8% in the larger cities (with more than 250k voters); the very opposite can be said for Trzaskowski that gets a larger and larger share of votes as we move from countryside to the city.\n- secondly, although Trzaskowski crushed Duda in the bigger cities, abroad and on the ships, took a draw in the cities and only succumbed in the countryside, he stil lost overall by almost 15%. This is a really brutal reminder that to win the war you certainly must win the battle in the countryside given the size of it.\n- while Trzaskowski is the man of the cities and Duda is the man of the countryside, the third and the fourth major candidates Szymon Ho\u0142ownia and Krzysztof Bosak are everyman's men, keeping a steady 14-17% and 6-8% in all the areas, respectively.\n- also, the behavior of the Poles abroad (300k people) is really in line with the behaviour of a big city. We could really look at it as one big city outside Poland's borders. On the other hand, ships have a totally unique behavior and really look as they live on another... surface.\n\nMore in general, we can check if and how candidates' support is related to the province size.","b84e31da":"## Another Battle Inside the Battle: North-West vs South-East","bfa0588e":"Here we can see that Poland is largely made by rural areas and that's were the battle has to be won: cities make only 1\/3 of the electorate. Also, (to my surprise, I must say), Poles abroad are only 370k+ (a record, anyway) a bit more than 1% and happen to have very little impact.","0d2eed44":"Our guess was pretty accurate: the correlation matrix highlights even more the presence of a strong regional duality between two areas in the country: the progressiv East and the conservative West. Interestingly, the only candidate who according to numbers does not seem to have a strong regional support is Zoltek.","a2885d2f":"# The Context","51145504":"# Round 1"}}