{"cell_type":{"9036c2da":"code","e39c5f77":"code","1c0dd176":"code","23eb6290":"code","2394d4ce":"code","83c20ff9":"code","a3598a3d":"code","bd0c3047":"code","722a6984":"code","290335ae":"code","0837e6a9":"code","04a905e4":"code","a93756d2":"code","ca93d41e":"code","8b39d853":"code","a4bf4bfd":"code","4a929954":"code","ed22e0d7":"code","b8db7f95":"code","8e19a024":"code","5f8a5713":"code","195e7acd":"code","d71fa7bf":"code","e0099d16":"code","1d9df420":"code","2c0d15fb":"code","098be523":"markdown","99e96222":"markdown","01cbc6b1":"markdown","f8e41376":"markdown","5171eff0":"markdown","df8aa54d":"markdown","6bcb90ba":"markdown","b9b7b4c6":"markdown","a1e16882":"markdown","85b99454":"markdown","2831f353":"markdown","2e66698d":"markdown"},"source":{"9036c2da":"import numpy as np \nimport pandas as pd \nimport nltk\nimport os\nimport gc\nfrom keras.preprocessing import sequence,text\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Embedding,LSTM,Conv1D,GlobalMaxPooling1D\nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import to_categorical\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report,f1_score\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#pd.set_option('display.max_colwidth',100)\npd.set_option('display.max_colwidth', -1)","e39c5f77":"gc.collect()","1c0dd176":"train=pd.read_csv('..\/input\/train.tsv',sep='\\t')\nprint(train.shape)\ntrain.head()","23eb6290":"test=pd.read_csv('..\/input\/test.tsv',sep='\\t')\nprint(test.shape)\ntest.head()","2394d4ce":"sub=pd.read_csv('..\/input\/sampleSubmission.csv')\nsub.head()","83c20ff9":"test['Sentiment']=-999\ntest.head()","a3598a3d":"df=pd.concat([train,test],ignore_index=True)\nprint(df.shape)\ndf.tail()","bd0c3047":"del train,test\ngc.collect()","722a6984":"from nltk.tokenize import word_tokenize\nfrom nltk import FreqDist\nfrom nltk.stem import SnowballStemmer,WordNetLemmatizer\nstemmer=SnowballStemmer('english')\nlemma=WordNetLemmatizer()\nfrom string import punctuation\nimport re\n","290335ae":"def clean_review(review_col):\n    review_corpus=[]\n    for i in range(0,len(review_col)):\n        review=str(review_col[i])\n        review=re.sub('[^a-zA-Z]',' ',review)\n        #review=[stemmer.stem(w) for w in word_tokenize(str(review).lower())]\n        review=[lemma.lemmatize(w) for w in word_tokenize(str(review).lower())]\n        review=' '.join(review)\n        review_corpus.append(review)\n    return review_corpus","0837e6a9":"df['clean_review']=clean_review(df.Phrase.values)\ndf.head()\n","04a905e4":"df_train=df[df.Sentiment!=-999]\ndf_train.shape","a93756d2":"df_test=df[df.Sentiment==-999]\ndf_test.drop('Sentiment',axis=1,inplace=True)\nprint(df_test.shape)\ndf_test.head()","ca93d41e":"del df\ngc.collect()","8b39d853":"train_text=df_train.clean_review.values\ntest_text=df_test.clean_review.values\ntarget=df_train.Sentiment.values\ny=to_categorical(target)\nprint(train_text.shape,target.shape,y.shape)","a4bf4bfd":"X_train_text,X_val_text,y_train,y_val=train_test_split(train_text,y,test_size=0.2,stratify=y,random_state=123)\nprint(X_train_text.shape,y_train.shape)\nprint(X_val_text.shape,y_val.shape)","4a929954":"all_words=' '.join(X_train_text)\nall_words=word_tokenize(all_words)\ndist=FreqDist(all_words)\nnum_unique_word=len(dist)\nnum_unique_word","ed22e0d7":"r_len=[]\nfor text in X_train_text:\n    word=word_tokenize(text)\n    l=len(word)\n    r_len.append(l)\n    \nMAX_REVIEW_LEN=np.max(r_len)\nMAX_REVIEW_LEN","b8db7f95":"max_features = num_unique_word\nmax_words = MAX_REVIEW_LEN\nbatch_size = 128\nepochs = 10\nnum_classes=y.shape[1]","8e19a024":"tokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(X_train_text))\nX_train = tokenizer.texts_to_sequences(X_train_text)\nX_val = tokenizer.texts_to_sequences(X_val_text)\nX_test = tokenizer.texts_to_sequences(test_text)","5f8a5713":"X_train = sequence.pad_sequences(X_train, maxlen=max_words)\nX_val = sequence.pad_sequences(X_val, maxlen=max_words)\nX_test = sequence.pad_sequences(X_test, maxlen=max_words)\nprint(X_train.shape,X_val.shape,X_test.shape)","195e7acd":"model=Sequential()\nmodel.add(Embedding(max_features,250,mask_zero=True))\nmodel.add(LSTM(128,dropout=0.4, recurrent_dropout=0.4,return_sequences=True))\nmodel.add(LSTM(64,dropout=0.5, recurrent_dropout=0.5,return_sequences=False))\nmodel.add(Dense(num_classes,activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel.summary()","d71fa7bf":"%%time\nhistory=model.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=5, batch_size=batch_size, verbose=1)","e0099d16":"y_pred=model.predict_classes(X_test)\ny_pred","1d9df420":"sub.Sentiment=y_pred\nsub.head()","2c0d15fb":"sub.to_csv('sub1.csv',index=False)","098be523":"** Tokenize Text**","99e96222":"### Finding number of unique words in train set","01cbc6b1":"** cleaning review**","f8e41376":"## Importing Library","5171eff0":"## Building Keras LSTM model","df8aa54d":"### Finding max length of a review in train set","6bcb90ba":"## 1. LSTM model","b9b7b4c6":"### Splitting Train dataset into train and 20% validation set","a1e16882":"**Adding Sentiment column to test datset and joing train and test for preprocessing**","85b99454":"### Loading dataset and basic visualization","2831f353":"** sequence padding**","2e66698d":"** seperating train and test dataset**"}}