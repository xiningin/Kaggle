{"cell_type":{"3a278196":"code","00da7bb1":"code","d47a900e":"markdown"},"source":{"3a278196":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00da7bb1":"import pandas as pd\nfrom tqdm import tqdm\n\n\n# load data\ntrain = pd.read_csv('..\/input\/ameshousing-csv\/AmesHousing.csv')\ntrain.drop(['PID'], axis=1, inplace=True)\n\norigin = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.columns = origin.columns\n\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nid=test['Id']\nsaleprice=0\noutput=pd.DataFrame({'Id':id,'SalePrice':saleprice})\n\nmissing = test.isnull().sum()\nmissing = missing[missing>0]\ntrain.drop(missing.index, axis=1, inplace=True)\n\n\ntest.dropna(axis=1, inplace=True)\n\nl_test = tqdm(range(0, len(test)), desc='Matching')\nfor i in l_test:\n    for j in range(0, len(train)):\n        for k in range(1, len(test.columns)):\n            if test.iloc[i,k] == train.iloc[j,k]:\n                continue\n            else:\n                break\n        else:\n            output.iloc[i, 1] = train.iloc[j, -1]\n            break\nl_test.close()\n\n\noutput.to_csv('tqdm_Submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n\n","d47a900e":"Here i used **tqdm**\n\ntqdm means \"progress\" in Arabic (taqadum, \u062a\u0642\u062f\u0651\u0645) and is an abbreviation for \"I love you so much\" in Spanish (**te quiero demasiado**).\n\nInstantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable), and you're done!\n\nin this link there is more info about  **tqdm**\n\nhttps:\/\/pypi.org\/project\/tqdm\/#manual\n"}}