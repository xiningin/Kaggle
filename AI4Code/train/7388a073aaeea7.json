{"cell_type":{"11b370c2":"code","e4cbfe5f":"code","f0071bf6":"code","0625e912":"code","f6406f17":"code","741b3229":"code","d2267dfb":"code","663b0bba":"code","e87048e5":"code","749755af":"code","b104c78b":"code","6809d733":"code","cbc0ca51":"code","73b81ba3":"code","ab83e2fa":"code","784e9f28":"code","75abdadd":"code","a5ef0185":"code","3ebf5dc4":"code","8cccb634":"code","2c31a6f3":"code","63236760":"code","24a0dde2":"code","9f28efab":"code","72d08e80":"code","422c9f6a":"code","d74311e6":"code","0d2ac1fe":"markdown","7f5ddc97":"markdown","2b660158":"markdown","3577f9ab":"markdown","d776e8a2":"markdown","06e02ad9":"markdown","4aac6c8b":"markdown","513a8fa7":"markdown","b627c641":"markdown","2baf66d0":"markdown","d8b4647b":"markdown","1a37ed3c":"markdown","2f209e86":"markdown","6e09794c":"markdown","6145d32d":"markdown","9f037df7":"markdown","b66cadf5":"markdown","e62905e0":"markdown","1ef6164d":"markdown","bf6fe877":"markdown","84435c73":"markdown"},"source":{"11b370c2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.metrics import plot_confusion_matrix\nfrom scipy.stats import norm, boxcox\nfrom collections import Counter\nfrom scipy import stats\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e4cbfe5f":"data = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\ndata.head()","f0071bf6":"# columns \ndata.columns","0625e912":"data.describe()","f6406f17":"data.info()","741b3229":"#check missing values\ndata.isnull().sum()","d2267dfb":"# \ubcc0\uc218\ubcc4 \uc0c1\uad00\uacc4\uc218 \ud655\uc778\nplt.figure(figsize=(10,10))\nsns.heatmap(data.corr(), annot=True)","663b0bba":"data[[\"volatile acidity\",\"quality\"]].groupby([\"quality\"], as_index = False).mean().sort_values(by = \"quality\").style.background_gradient(\"Reds\")","e87048e5":"data[[\"total sulfur dioxide\",\"quality\"]].groupby([\"quality\"], as_index = False).mean().sort_values(by = \"quality\").style.background_gradient(\"Reds\")","749755af":"data[[\"density\", \"quality\"]].groupby([\"quality\"], as_index = False).mean().sort_values(by = \"quality\").style.background_gradient(\"Reds\")","b104c78b":"bins = (2, 6.5, 8)\nlabels = [0, 1]\ndata['quality'] = pd.cut(x = data['quality'], bins = bins, labels = labels)","6809d733":"data['quality'].value_counts()","cbc0ca51":"data","73b81ba3":"plt.figure(figsize=(7,5))\nsns.countplot(data[\"quality\"], palette='Set2')\nplt.title(\"quality distribution\", color = \"black\", fontweight= 'bold', fontsize = 11)\nplt.show()","ab83e2fa":"from sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import SMOTE\nimport collections","784e9f28":"y = data['quality']\nx = data.drop(['quality', 'volatile acidity', 'total sulfur dioxide', 'density'], axis=1)","75abdadd":"x.head()","a5ef0185":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state=22)","3ebf5dc4":"smote = SMOTE(random_state=14)\nx_train_sm, y_train_sm = smote.fit_resample(x_train, y_train)\n\nprint(\"Before: \", collections.Counter(y_train))\nprint(\"After: \", collections.Counter(y_train_sm))","8cccb634":"scaler = StandardScaler()\nx_train_sm = scaler.fit_transform(x_train_sm) \nx_test = scaler.transform(x_test) ","2c31a6f3":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix","63236760":"accs = []","24a0dde2":"dt=DecisionTreeClassifier()\n\n#train\ndt.fit(x_train_sm, y_train_sm)\ny_pred=dt.predict(x_test)\n\na = dt.score(x_test, y_test)\naccs.append(a)\nprint(\"Accuracy:\", a * 100)\nprint(classification_report(y_test, y_pred))\n\nprint()\n\ncm_aaa = confusion_matrix(y_test, y_pred)\n\nplot_confusion_matrix(dt, x_test, y_test, cmap='binary')\nplt.show()","9f28efab":"rf=RandomForestClassifier()\n\n#train\nrf.fit(x_train_sm, y_train_sm)\ny_pred=rf.predict(x_test)\n\na = rf.score(x_test, y_test)\naccs.append(a)\nprint(\"Accuracy:\", a * 100)\nprint(classification_report(y_test, y_pred))\n\nprint()\n\ncm_aaa = confusion_matrix(y_test, y_pred)\n\nplot_confusion_matrix(rf, x_test, y_test, cmap=\"binary\")\nplt.show()","72d08e80":"xgb=XGBClassifier()\n\n#train\nxgb.fit(x_train_sm, y_train_sm)\ny_pred=xgb.predict(x_test)\n\na = xgb.score(x_test, y_test)\naccs.append(a)\nprint(\"Accuracy:\", a * 100)\nprint(classification_report(y_test, y_pred))\n\nprint()\n\ncm_aaa = confusion_matrix(y_test, y_pred)\n\nplot_confusion_matrix(xgb, x_test, y_test, cmap=\"binary\")\nplt.show()","422c9f6a":"df_result = pd.DataFrame({\"accuracy\":accs, \"model\":[\"Decision Tree\",\"RandomForest\",\n             \"XGBClassifier\"]})\n\ndf_result.style.background_gradient(\"Greens\")","d74311e6":"g = sns.barplot(\"accuracy\", \"model\", data = df_result, palette='Set3')\ng.set_xlabel(\"score\")\ng.set_title(\"Classifier Model Test Accuracy\", color = \"Black\")\nplt.show()","0d2ac1fe":"#### Quality Class \ubcc0\ud658\n\n* if quality > 6.5: 1\n* else: 0\n\n\uac00 \ub418\ub3c4\ub85d quality \uceec\ub7fc\uc758 \uac12\uc744 \ubcc0\ud658\ud574\uc900\ub2e4.","7f5ddc97":"## Model Evaluation","2b660158":"# Red Wine Quality Classification\n\nDataset URL: https:\/\/www.kaggle.com\/uciml\/red-wine-quality-cortez-et-al-2009\n\n\n## \ubb38\uc81c\n**quality \uceec\ub7fc\uc758 \uac12\uc774 6.5\ubcf4\ub2e4 \ud06c\uba74 \uc640\uc778\uc774 good\uc774\uace0, \uc544\ub2c8\ub77c\uba74 bad\ub85c \ubd84\ub958\ub418\ub3c4\ub85d \ud558\ub294 \ubb38\uc81c\ub97c \ud47c\ub2e4.**\n\nWhat might be an interesting thing to do, is aside from using regression modelling, is to set an arbitrary cutoff for your dependent variable (wine quality) at e.g. 7 or higher getting classified as 'good\/1' and the remainder as 'not good\/0'.\n\n* $quality$ > 6.5 => \"good\"\n* TRUE => \"bad\"\n\n\n## Inspiration\nUse machine learning to determine which physiochemical properties make a wine 'good'!","3577f9ab":"### XGB","d776e8a2":"## \ub370\uc774\ud130 \ubd84\uc11d","06e02ad9":"\ud074\ub798\uc2a4\ubcc4\ub85c **\uade0\ud615\uc7a1\ud78c \ub370\uc774\ud130\uc14b**\uc774 \uc544\ub2d8\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","4aac6c8b":"quality \uceec\ub7fc\uc758 \uac12\uc774 0\uacfc 1\ub85c \ubcc0\uacbd\ub418\uc5c8\ub2e4.","513a8fa7":"Target column\uc778 'quality'\uc640 \uac00\uc7a5 \uc5f0\uad00\uc131\uc774 \ub5a8\uc5b4\uc9c0\ub294 \uceec\ub7fc\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\n1. volatile acidity\n2. total sulfur dioxide\n3. density","b627c641":"missing values\uac00 \uc5c6\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\ub2e4.","2baf66d0":"## Model Train","d8b4647b":"\ub530\ub77c\uc11c, SMOTE\ub97c \ud65c\uc6a9\ud574 balance\ub97c \ub9de\ucdb0\uc900\ub2e4.","1a37ed3c":"train, test set\uc744 \ubd84\ub9ac\ud55c\ub2e4.","2f209e86":"quality(\ub4f1\uae09) \ubcc4 \ud3c9\uade0 \uce58\ub85c \ubcf4\uc558\uc744 \ub54c, \ub69c\ub837\ud55c \ud328\ud134\uc774 \uc5c6\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\ub2e4.","6e09794c":"### Scale \uc870\uc815","6145d32d":"\ub370\uc774\ud130 \ubd84\uc11d\uc5d0\uc11c \ud655\uc778\ud55c target(quality)\uc640 \uc5f0\uad00\uc131\uc774 \uc801\uc740 \uceec\ub7fc 3\uac1c\ub8f0 \uc81c\uac70\ud55c\ub2e4.","9f037df7":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","b66cadf5":"### Decision Tree","e62905e0":"## Load Data","1ef6164d":"### Imbalanced Dataset\n\n\uc55e\uc11c \ud655\uc778\ud588\ub4ef\uc774 \uc774 \ub370\uc774\ud130\uc14b\uc740 0, 1 \ud074\ub798\uc2a4 \uc911 1\uc758 \uacbd\uc6b0\uac00 \uc801\uc740 imbalanced dataset\uc774\ub2e4.","bf6fe877":"# Conclusion\n\n3\uac00\uc9c0 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574 \ud559\uc2b5\ud574\ubcf8 \uacb0\uacfc,\n\nRandom Forest Classifier\uc758 \uc131\ub2a5\uc774 \uc815\ud655\ub3c4 \uc57d 90.00 %\ub85c \uac00\uc7a5 \ub192\uc558\ub2e4. Random Forest Classifier\uc758 f1-score\ub294 0.94\uc774\ub2e4.\n\n<br><\/br>\n\n### \ucd94\uac00\n\n\uc2e4\ud589\ud560 \ub54c\ub9c8\ub2e4 \uacb0\uacfc\uac00 \uc57d\uac04\uc529 \ucc28\uc774\ub97c \ubcf4\uc778\ub2e4.\n\n\ud558\uc9c0\ub9cc \ud56d\uc0c1 88 ~ 90% \uc815\ub3c4\uc758 \uacb0\uacfc\ub97c \ubcf4\uc600\ub2e4.","84435c73":"### RandomForest"}}