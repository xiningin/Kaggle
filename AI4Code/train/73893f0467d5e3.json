{"cell_type":{"299912e0":"code","d8530abe":"code","3db59fa1":"code","670781cf":"code","e08fcf1f":"code","b5619c22":"code","63784e92":"code","3eb711d3":"code","5e976e17":"code","a685c030":"code","a43f67b5":"code","fb483297":"code","03525efa":"code","c6ad111b":"code","67b178d2":"code","d7b21dac":"code","daf6d569":"code","f20950cb":"code","97fb0676":"code","f0e0ed45":"code","ddef59ce":"code","4e9dc37a":"code","f07a2f5d":"code","1ba9fa84":"code","99d6339a":"code","1c15c52e":"code","256da767":"code","7904b0c6":"code","231ce208":"code","2542b0d5":"code","a4d327c2":"code","fd99cc94":"code","7bf741a3":"code","a834090d":"code","fd5ae0ec":"code","1d534d12":"code","0f1a30cb":"code","8a4322e2":"code","930c1eca":"code","5f5f8ae3":"code","66a50ac6":"code","557b009d":"code","71bd9e79":"code","1a645ec7":"code","404c0d41":"code","dbee0f44":"code","28109897":"code","6c6134eb":"code","96d61837":"code","21971fc1":"code","b328d4fa":"code","96e099fd":"code","9d5d5cb8":"code","f1f51708":"code","87494924":"code","b7c65e65":"code","aff39cb9":"code","481c5a4c":"code","65f3c6fd":"code","fbafacae":"code","5dba0aca":"code","6e1f07aa":"code","e7d2976a":"code","3eb2ef29":"code","9b81d7d1":"code","f9d021c5":"code","4ea8ddc1":"code","57448b1b":"code","a46085e3":"code","3e7da1d9":"code","f0439535":"code","6937f28f":"code","6035bc71":"code","cc69d610":"code","5732ca3e":"code","88b325f0":"code","b8a91e41":"code","52277fa3":"markdown","d79c7252":"markdown","9c4dc2ef":"markdown","71059795":"markdown","d9bfb41c":"markdown","02852e94":"markdown","b63e5f4c":"markdown","068631d8":"markdown","eb904ddc":"markdown","d44c8ef1":"markdown","a1056fd8":"markdown","c25556bd":"markdown","badcc9d7":"markdown","e57a5c79":"markdown","1d9e6510":"markdown","9218716b":"markdown","afad1264":"markdown"},"source":{"299912e0":"import pandas as pd ","d8530abe":"df=pd.read_csv(\"\/kaggle\/input\/breast-cancer-prediction-dataset\/Breast_cancer_data.csv\")\ndf.head()","3db59fa1":"#Checking missing values \ndf.isnull().sum()","670781cf":"import seaborn as sns","e08fcf1f":"sns.boxplot(df[\"mean_radius\"])","b5619c22":"df[\"mean_radius\"].describe()","63784e92":"max_rad=(15.78+(1.5*(15.78-11.7)))\nmax_rad","3eb711d3":"df[\"mean_radius\"][df[\"mean_radius\"]>max_rad]=max_rad","5e976e17":"sns.boxplot(df[\"mean_radius\"])","a685c030":"# Ditribution and PDF and CDF\n#sns.displot(df[\"mean_radius\"])","a43f67b5":"sns.distplot(df[\"mean_radius\"])","fb483297":"#sns.ecdfplot(df[\"mean_radius\"])","03525efa":"sns.boxplot(df[\"mean_texture\"])","c6ad111b":"df[\"mean_texture\"].describe()","67b178d2":"max_text=(21.8+(1.5*(21.8-16.17)))\nmax_text","d7b21dac":"df[\"mean_texture\"][df[\"mean_texture\"]>max_text]=max_text","daf6d569":"sns.boxplot(df[\"mean_texture\"])","f20950cb":"# Distribution PDF and CDF\n#sns.displot(df[\"mean_texture\"])","97fb0676":"sns.distplot(df[\"mean_texture\"])","f0e0ed45":"#sns.ecdfplot(df[\"mean_texture\"])","ddef59ce":"sns.boxplot(df[\"mean_perimeter\"])","4e9dc37a":"df[\"mean_perimeter\"].describe()","f07a2f5d":"max_peri=(104.1+(1.5*(104.1-75.17)))\nmax_peri","1ba9fa84":"df[\"mean_perimeter\"][df[\"mean_perimeter\"]>max_peri]=max_peri","99d6339a":"sns.boxplot(df[\"mean_perimeter\"])","1c15c52e":"# Distribution, PDF and CDF \n#sns.displot(df[\"mean_perimeter\"])","256da767":"sns.distplot(df[\"mean_perimeter\"])","7904b0c6":"#sns.ecdfplot(df[\"mean_perimeter\"])","231ce208":"sns.boxplot(df[\"mean_area\"])","2542b0d5":"df[\"mean_area\"].describe()","a4d327c2":"max_area=(782.7+(1.5*(782.7-420.3)))\nmax_area","fd99cc94":"df[\"mean_area\"][df[\"mean_area\"]>max_area]=max_area","7bf741a3":"sns.boxplot(df[\"mean_area\"])","a834090d":"# Distribution PDF and CDF\n#sns.displot(df[\"mean_area\"])","fd5ae0ec":"sns.distplot(df[\"mean_area\"])","1d534d12":"#sns.ecdfplot(df[\"mean_area\"])","0f1a30cb":"sns.boxplot(df[\"mean_smoothness\"])","8a4322e2":"df[\"mean_smoothness\"].describe()","930c1eca":"max_smooth=(0.1053+(1.5*(.1053-.08637)))\nmax_smooth","5f5f8ae3":"df[\"mean_smoothness\"][df[\"mean_smoothness\"]>max_smooth]=max_smooth","66a50ac6":"sns.boxplot(df[\"mean_smoothness\"])","557b009d":"# Distribution,PDF and CDF\n#sns.displot(df[\"mean_smoothness\"])","71bd9e79":"sns.distplot(df[\"mean_smoothness\"])","1a645ec7":"#sns.ecdfplot(df[\"mean_smoothness\"])","404c0d41":"X=df.iloc[:,[0,1,2,3,4]]\nX.head()","dbee0f44":"y=df.iloc[:,[5]]\ny.head()","28109897":"## Relationship between features \nsns.pairplot(X)","6c6134eb":"from sklearn.feature_selection import VarianceThreshold\nvar=VarianceThreshold(threshold=0.8)\nvar.fit(X)","96d61837":"var.get_support()","21971fc1":"var.get_support().sum()","b328d4fa":"X.columns[var.get_support()]","96e099fd":"const_columns=[column for column in X.columns\n              if column not in X.columns[var.get_support()]]\nprint (const_columns)","9d5d5cb8":"X=X.drop(\"mean_smoothness\",axis=1)","f1f51708":"X.head()","87494924":"from sklearn.ensemble import ExtraTreesClassifier\nimp=ExtraTreesClassifier()\nimp.fit(X,y)","b7c65e65":"imp.feature_importances_","aff39cb9":"df.features=pd.DataFrame(X.columns,columns=[\"Features\"])\ndf.importances=pd.DataFrame(imp.feature_importances_,columns=[\"Importances\"])\nafter_concat=pd.concat([df.features,df.importances],axis=1)\nafter_concat.nlargest(4,\"Importances\")","481c5a4c":"sns.heatmap(X.corr(),annot=True)","65f3c6fd":"def correlation(dataset, threshold): \n    col_corr = set()                                 # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)): \n      for j in range(i): \n        if abs(corr_matrix.iloc[i, j]) > threshold:  # we are interested in absolute coeff value \n          colname = corr_matrix.columns[i]           # getting the name of column\n          col_corr.add(colname) \n    return col_corr","fbafacae":"correlation(X,0.6)","5dba0aca":"X=X.drop(\"mean_area\",axis=1)","6e1f07aa":"X.head()","e7d2976a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.25,random_state=100)\nprint(X_train.shape)\nprint(X_test.shape)","3eb2ef29":"from sklearn.linear_model import LogisticRegression\nlogreg=LogisticRegression()\nlogreg.fit(X_train,y_train)","9b81d7d1":"y_predlog_test=logreg.predict(X_test)\ny_predlog_test","f9d021c5":"y_predlog_train=logreg.predict(X_train)\ny_predlog_train","4ea8ddc1":"from sklearn.metrics import confusion_matrix\ncnf_test=confusion_matrix(y_test,y_predlog_test)\ncnf_test","57448b1b":"cnf_train=confusion_matrix(y_train,y_predlog_train)\ncnf_train","a46085e3":"from sklearn import metrics\nprint (\"Accuracy for test\", metrics.accuracy_score(y_test,y_predlog_test))\nprint (\"Accuracy for train\", metrics.accuracy_score(y_train,y_predlog_train))","3e7da1d9":"print (\"Precision for test\",metrics.precision_score(y_test,y_predlog_test))\nprint (\"Precision for train\",metrics.precision_score(y_train,y_predlog_train))","f0439535":"print (\"Recall for test\",metrics.recall_score(y_test,y_predlog_test))\nprint (\"Recall for train\",metrics.recall_score(y_train,y_predlog_train))","6937f28f":"from sklearn.svm import SVC\nsvc=SVC()\nsvc.fit(X_train,y_train)","6035bc71":"y_predsvc_test=svc.predict(X_test)\ny_predsvc_test","cc69d610":"y_predsvc_train=svc.predict(X_train)\ny_predsvc_train","5732ca3e":"cnfsvc_test=metrics.confusion_matrix(y_test,y_predsvc_test)\ncnfsvc_test","88b325f0":"cnfsvc_train=metrics.confusion_matrix(y_train,y_predsvc_train)\ncnfsvc_train","b8a91e41":"print (\"Accuracy for test\", metrics.accuracy_score(y_test,y_predsvc_test))\nprint (\"Accuracy for train\", metrics.accuracy_score(y_train,y_predsvc_train))","52277fa3":"## Accuracy Check for test and train","d79c7252":"# Feature Selection ","9c4dc2ef":"# Support Vector Classifier ","71059795":"# Missing Values ","d9bfb41c":"# Logistic Regression","02852e94":"## For mean_perimeter","b63e5f4c":"## Variance Threshold","068631d8":"## For mean_smoothness ","eb904ddc":"# Train Test Split","d44c8ef1":"## For mean_radius","a1056fd8":"## Feature Importance ","c25556bd":"## For mean_texture","badcc9d7":"## Correation ","e57a5c79":"# EDA","1d9e6510":"## Accuracy check for test and train\n","9218716b":"# Extracting features (Independent and Dependent variables)","afad1264":"## For mean_area"}}