{"cell_type":{"3ce93a35":"code","dfb7d3ac":"code","a7867c1e":"code","fd1ee048":"code","e6fcff43":"code","120c9315":"code","dfd27370":"code","7494abf3":"code","7b5080e0":"code","d0b3fbfa":"code","b22bfd77":"code","483e0ce5":"code","bc5d65b7":"code","6ad1a852":"code","7d3249ed":"code","40ba0162":"code","6fff8aba":"code","46fb14de":"code","b268cd14":"code","281f975a":"code","3771ca81":"code","2ecc3b37":"code","aa85f49c":"code","f746385c":"code","361be8ed":"code","347a619d":"code","0522f999":"code","5d14033c":"code","1407edb8":"code","fc989353":"code","19e72185":"code","b88a85d6":"code","2e392a74":"code","f8d817a2":"code","df4ce1f7":"code","0f421a90":"code","cf7e9c54":"code","73d6b6f7":"code","223b89b6":"code","8237f143":"code","da856c02":"code","d1e867ed":"code","c77dc595":"code","6a71c0e2":"code","ea41326e":"code","0a956d29":"code","56f121cf":"code","ff266339":"code","d9655a85":"code","d263f6d2":"code","9cbcf099":"code","abd53a72":"code","219d00ae":"code","719649dc":"code","027b19d5":"code","215b199b":"code","35db88c8":"code","ad817a90":"code","9bdd4cdf":"code","4231c4fa":"code","bec6c929":"code","6492de6e":"code","ecceb6d9":"code","949048d2":"code","7d610721":"code","0ebc08e1":"code","d645449c":"code","3f74fa49":"code","4ea6d930":"code","eaeb267b":"code","e745df59":"code","41924458":"code","8eee8085":"code","bd5345a2":"code","f3ddec21":"code","29340953":"code","1ff13078":"code","19f63c7b":"code","a4c05cad":"code","2c7bdf2f":"code","8270ce6c":"code","09133d04":"code","fdcb3a83":"code","fafe6e9a":"code","f1cd2afd":"code","0ca31591":"code","8c39dc82":"code","950772af":"code","c7827ca4":"code","2a4e6867":"code","e750b7b9":"code","a168cb75":"code","d84cfcec":"code","a239eedc":"code","534daa33":"code","9a13854c":"code","12f196e9":"code","001f1f55":"code","fa31341f":"markdown","e5bc41d7":"markdown","d0a535b4":"markdown","e3789959":"markdown","9f68d2f4":"markdown","84ce818f":"markdown","46db3b2f":"markdown","a8d238b0":"markdown","4d2885d6":"markdown","f3a19ac6":"markdown","5f0e9a5a":"markdown","1934283b":"markdown","b1b59bca":"markdown","3952b279":"markdown","0496ecbb":"markdown","21c61413":"markdown","1c754e38":"markdown","9a031e93":"markdown","703ed845":"markdown","fc36a620":"markdown","2c7c05bd":"markdown","56a5a8f2":"markdown","8101dea3":"markdown","a7ac2d99":"markdown","c79530f7":"markdown","de42daad":"markdown","f90f5cd2":"markdown","a38d46d8":"markdown","0518c995":"markdown","b16041cb":"markdown","2e74ba2c":"markdown","7edba060":"markdown","1cb374d1":"markdown","d5d5ef8d":"markdown","6b8d69d6":"markdown","b01ee932":"markdown","96ded34b":"markdown","ea1490f0":"markdown","fbf979d9":"markdown","f3994156":"markdown","eb738271":"markdown","92088511":"markdown","a3de474d":"markdown","3a8b5eb0":"markdown","f9700dc0":"markdown","94c4ea67":"markdown","709720b6":"markdown","c03ff2d1":"markdown"},"source":{"3ce93a35":"#Import Libraries\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dfb7d3ac":"df_hyundi = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv')\ndf_hyundi.head()","a7867c1e":"hyundi = df_hyundi.rename({'tax(\u00a3)': 'tax'}, axis=1)","fd1ee048":"hyundi.head()","e6fcff43":"# This will get the names of the files in the dataset's folder\nfiles = [file for file in os.listdir('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/')]\ndata_nine_col = pd.DataFrame()\ndata_seven_col = pd.DataFrame()\n\nfor file in files:\n    if file in ['unclean focus.csv', 'unclean cclass.csv']:\n        continue\naudi = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\nbmw = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')\nford = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/ford.csv')\nmerc = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv')\nskoda= pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv')\ntoyota = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/toyota.csv')\nvauxhall = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vauxhall.csv')\nvw = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vw.csv')\nfocus = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/focus.csv')\ncclass = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/cclass.csv')\n    \ndata_nine_col = pd.concat([data_nine_col, audi, bmw, ford, merc, skoda, toyota, vauxhall, vw, hyundi])\ndata_seven_col= pd.concat([data_seven_col, focus, cclass])","120c9315":"data_nine_col.head()","dfd27370":"sum(data_nine_col.duplicated())","7494abf3":"data_nine_col=data_nine_col.drop_duplicates()","7b5080e0":"data_nine_col = data_nine_col.reset_index(drop=True)","d0b3fbfa":"data_nine_col.shape","b22bfd77":"data_nine_col['model']=data_nine_col['model'].str.replace(' ', '')","483e0ce5":"data_nine_col.tail()","bc5d65b7":"data_nine_col.info()","6ad1a852":"data_nine_col.describe().T","7d3249ed":"data_nine_col[data_nine_col['year']==2060]","40ba0162":"data_nine_col['year'].replace({2060: 2010}, inplace=True)","6fff8aba":"data_nine_col = data_nine_col.reset_index(drop=True)","46fb14de":"plt.figure(figsize=(20,10))\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"year\", data=data_nine_col, palette=\"Blues\")\nax.set_xlabel('Year',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Year',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","b268cd14":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_nine_col, x='price', ax=ax[0],kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Price',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_nine_col, x='price',ax=ax[1])\nax[1].set_xlabel('Price',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","281f975a":"plt.figure(figsize=(8,4))\nax = sns.countplot(x=\"transmission\", data=data_nine_col)\nax.set_xlabel('Transmission',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Transmission',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","3771ca81":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_nine_col, x='mileage', ax=ax[0],kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Mileage',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_nine_col, x='mileage',ax=ax[1])\nax[1].set_xlabel('Mileage',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","2ecc3b37":"plt.figure(figsize=(8,4))\nax = sns.countplot(x=\"fuelType\", data=data_nine_col)\nax.set_xlabel('Fuel Type',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Fuel Type',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","aa85f49c":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_nine_col, x='tax', ax=ax[0], kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Tax',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_nine_col, x='tax',ax=ax[1])\nax[1].set_xlabel('Tax',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","f746385c":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_nine_col, x='mpg', ax=ax[0], kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of MPG',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_nine_col, x='mpg',ax=ax[1])\nax[1].set_xlabel('MPG',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","361be8ed":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_nine_col, x='engineSize', ax=ax[0], kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Engine Size',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_nine_col, x='engineSize',ax=ax[1])\nax[1].set_xlabel('Engine Size',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","347a619d":"corrmat = data_nine_col.corr()\nf, ax = plt.subplots(figsize =(12, 8)) \nsns.heatmap(corrmat, ax = ax,  linewidths = 0.1, annot=True, cmap=\"copper_r\")","0522f999":"fig = px.scatter(data_nine_col, x=\"year\", y=\"price\", color=\"model\", size=\"price\", \n                   labels={\"price\": \"Price\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Prices over Years\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","5d14033c":"fig = px.scatter(data_nine_col, x=\"year\", y=\"tax\", color=\"engineSize\", size=\"tax\",\n                   labels={\"tax\": \"Tax\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes by Engine Size over Years\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","1407edb8":"fig = px.scatter(data_nine_col, x=\"engineSize\", y=\"price\", color=\"year\", size=\"price\", \n                   labels={\"price\": \"Price\", \"engineSize\": \"Engine Size\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Price by Engine Size over Years\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","fc989353":"fig = px.scatter(data_nine_col, x=\"tax\", y=\"price\", color=\"model\", size=\"price\", \n                   labels={\"price\": \"Price\", \"tax\": \"Tax\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes by Prices\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","19e72185":"fig = px.scatter(data_nine_col, x=\"engineSize\", y=\"tax\", color=\"model\", size=\"tax\", \n                   labels={\"engineSize\": \"Engine Size\", \"tax\": \"Tax\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes by Engine Size\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","b88a85d6":"fig = px.scatter(data_nine_col, x=\"engineSize\", y=\"mileage\", color=\"model\", size=\"price\", \n                   labels={\"engineSize\": \"Engine Size\", \"mileage\": \"Mileage\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Mileages with Engine Size by Prices\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","2e392a74":"fig = px.scatter(data_nine_col, x=\"mpg\", y=\"mileage\", color=\"fuelType\", size=\"engineSize\",\n                   labels={\"engineSize\": \"Engine Size\", \"tax\": \"Tax\"})\nfig.update_layout(\n    title={\n        'text': \"Cars MPG with Mileages by Fuel Type\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","f8d817a2":"fig = px.box(data_nine_col, x=\"fuelType\", y=\"mileage\", color=\"transmission\",  \n                   labels={\"mileage\": \"Mileage\", \"fuelType\": \"Fuel Type\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Mileage by Fuel Type based on Transmission\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","df4ce1f7":"fig = px.box(data_nine_col, x=\"transmission\", y=\"price\", color='fuelType',\n                 labels={\"transmission\":\"Transmission\", \"price\": \"Price\"} \n                )\nfig.update_layout(\n    title={\n        'text': \"Cars Prices based on Transmission by Fuel Type\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\n\nfig.show()\n","0f421a90":"fig = px.box(data_nine_col, x=\"transmission\", y=\"tax\", color='fuelType',\n                 labels={\"transmission\":\"Transmission\", \"tax\": \"Tax\"} \n                )\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes by Transmission based on Fuel Type\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\n\nfig.show()","cf7e9c54":"fig = px.scatter(data_nine_col, x=\"mileage\", y=\"price\", color='transmission',size=\"price\",\n                 labels={\"mileage\":\"Mileage\", \"price\": \"Price\"} # customize axis label\n                )\nfig.update_layout(\n    title={\n        'text': \"Cars Prices based on Mileages by Transmission\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\n\nfig.show()","73d6b6f7":"fig = px.treemap(data_nine_col, path=[px.Constant(\"model\"), 'transmission', 'fuelType', 'model'], \n                 values='mileage', color='transmission',\n                  color_discrete_map={'Manual':'lightgrey', 'Automatic':'gold', 'Semi-Auto':'darkblue', 'Other':'red'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","223b89b6":"tax_0 = data_nine_col[data_nine_col['tax']==0]","8237f143":"tax_0.describe().T","da856c02":"fig = px.scatter(tax_0, x=\"year\", y=\"engineSize\", color=\"model\", size='price',\n                   labels={\"engineSize\": \"Engine Size\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes by Engine Size\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","d1e867ed":"fig = px.treemap(tax_0, path=[px.Constant(\"model\"), 'transmission', 'fuelType', 'model'], \n                 values='mileage', color='transmission',\n                  color_discrete_map={'Manual':'lightgrey', 'Automatic':'gold', 'Semi-Auto':'darkblue', 'Other':'red'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","c77dc595":"tax_less_than_125 = data_nine_col[data_nine_col['tax'].between(1, 125)]","6a71c0e2":"tax_less_than_125.describe().T","ea41326e":"fig = px.scatter(tax_less_than_125, x=\"year\", y=\"engineSize\", color=\"model\", size='price',\n                   labels={\"engineSize\": \"Engine Size\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes less than 125 by Engine Size\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","0a956d29":"fig = px.treemap(tax_less_than_125, path=[px.Constant(\"model\"), 'transmission', 'fuelType', 'model'], \n                 values='mileage', color='transmission',\n                  color_discrete_map={'Manual':'lightgrey', 'Automatic':'gold', 'Semi-Auto':'darkblue', 'Other':'red'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","56f121cf":"tax_between_126_145 = data_nine_col[data_nine_col['tax'].between(126,145)]","ff266339":"tax_between_126_145.describe().T","d9655a85":"fig = px.scatter(tax_between_126_145, x=\"year\", y=\"engineSize\", color=\"model\", size='price',\n                   labels={\"engineSize\": \"Engine Size\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes between 126-145 by Engine Size\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","d263f6d2":"fig = px.treemap(tax_between_126_145, path=[px.Constant(\"model\"), 'transmission', 'fuelType', 'model'], \n                 values='mileage', color='transmission',\n                  color_discrete_map={'Manual':'lightgrey', 'Automatic':'gold', 'Semi-Auto':'darkblue', 'Other':'red'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","9cbcf099":"tax_between_146_580 = data_nine_col[data_nine_col['tax'].between(146,580)]","abd53a72":"tax_between_146_580.describe().T","219d00ae":"fig = px.scatter(tax_between_146_580, x=\"year\", y=\"engineSize\", color=\"model\", size='price',\n                   labels={\"engineSize\": \"Engine Size\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Taxes between 146-580 by Engine Size\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","719649dc":"fig = px.treemap(tax_between_146_580, path=[px.Constant(\"model\"), 'transmission', 'fuelType', 'model'], \n                 values='mileage', color='transmission',\n                  color_discrete_map={'Manual':'lightgrey', 'Automatic':'gold', 'Semi-Auto':'darkblue', 'Other':'red'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","027b19d5":"class MultiColumnLabelEncoder:\n    def __init__(self,columns = None):\n        self.columns = columns # array of column names to encode\n\n    def fit(self,X,y=None):\n        return self # not relevant here\n\n    def transform(self,X):\n        '''\n        Transforms columns of X specified in self.columns using\n        LabelEncoder(). If no columns specified, transforms all\n        columns in X.\n        '''\n        output = X.copy()\n        if self.columns is not None:\n            for col in self.columns:\n                output[col] = LabelEncoder().fit_transform(output[col])\n        else:\n            for colname,col in output.iteritems():\n                output[colname] = LabelEncoder().fit_transform(col)\n        return output\n\n    def fit_transform(self,X,y=None):\n        return self.fit(X,y).transform(X)","215b199b":"data_nine_col_en=MultiColumnLabelEncoder(columns = ['model','transmission', 'fuelType']).fit_transform(data_nine_col)","35db88c8":"data_nine_col_en.head()","ad817a90":"X = data_nine_col_en.drop('price', axis=1)\ny = data_nine_col_en.price","9bdd4cdf":"scaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX_scaled = scaler.fit_transform(X)\n","4231c4fa":"#Splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","bec6c929":"RandomForestRegressorModel = RandomForestRegressor(n_estimators=282,max_depth=26, random_state=33)\nRandomForestRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Random Forest Regressor Train Score is : %.2f' %(RandomForestRegressorModel.score(X_train, y_train)*100))\nprint('Random Forest Regressor Test Score is : %.2f' %(RandomForestRegressorModel.score(X_test, y_test)*100))","6492de6e":"GBRModel = GradientBoostingRegressor(n_estimators=50,max_depth=26,learning_rate = 0.5 ,random_state=33)\nGBRModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('GBRModel Train Score is : %.2f' %(GBRModel.score(X_train, y_train)*100))\nprint('GBRModel Test Score is : %.2f' %(GBRModel.score(X_test, y_test)*100))","ecceb6d9":"DecisionTreeRegressorModel = DecisionTreeRegressor(max_depth=23,random_state=33)\nDecisionTreeRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('DecisionTreeRegressor Train Score is : %.2f' %(DecisionTreeRegressorModel.score(X_train, y_train)*100))\nprint('DecisionTreeRegressor Test Score is : %.2f' %(DecisionTreeRegressorModel.score(X_test, y_test)*100))","949048d2":"KNeighborsRegressorModel = KNeighborsRegressor(n_neighbors = 9, weights='distance', algorithm = 'brute')    \nKNeighborsRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('KNeighborsRegressorModel Train Score is : %.2f' %(KNeighborsRegressorModel.score(X_train, y_train)*100))\nprint('KNeighborsRegressorModel Test Score is : %.2f' %(KNeighborsRegressorModel.score(X_test, y_test)*100))","7d610721":"from xgboost import XGBRegressor\nXGBModel = XGBRegressor(n_estimators=1000, max_depth=8, eta=0.1, subsample=0.99, colsample_bytree=0.77,random_state=0)\nXGBModel.fit(X_train,y_train)\n\n#Calculating Details\nprint('XGBRegressorModel Train Score is : %.2f ' %(XGBModel.score(X_train, y_train)*100))\nprint('XGBRegressorModel Test Score is : %.2f ' %(XGBModel.score(X_test,y_test)*100))","0ebc08e1":"data_seven_col.head()","d645449c":"sum(data_seven_col.duplicated())","3f74fa49":"data_seven_col=data_seven_col.drop_duplicates()","4ea6d930":"data_seven_col = data_seven_col.reset_index(drop=True)","eaeb267b":"data_seven_col.shape","e745df59":"data_seven_col['model'] = data_seven_col['model'].str.replace(' ', '')","41924458":"data_seven_col.info()","8eee8085":"data_seven_col.describe().T","bd5345a2":"plt.figure(figsize=(20,10))\nsns.set_theme(style=\"darkgrid\")\nax = sns.countplot(x=\"year\", data=data_seven_col, palette=\"Blues\")\nax.set_xlabel('Year',fontsize=20)\nax.set_ylabel('Count', fontsize=20)\nax.set_title('Distribution of Year',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","f3ddec21":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_seven_col, x='price', ax=ax[0],kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Price',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_nine_col, x='price',ax=ax[1])\nax[1].set_xlabel('Price',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","29340953":"plt.figure(figsize=(8,4))\nax = sns.countplot(x=\"transmission\", data=data_seven_col)\nax.set_xlabel('Transmission',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Transmission',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","1ff13078":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_seven_col, x='mileage', ax=ax[0],kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Mileage',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_seven_col, x='mileage',ax=ax[1])\nax[1].set_xlabel('Mileage',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","19f63c7b":"plt.figure(figsize=(8,4))\nax = sns.countplot(x=\"fuelType\", data=data_seven_col)\nax.set_xlabel('Fuel Type',fontsize=14)\nax.set_ylabel('Count', fontsize=14)\nax.set_title('Distribution of Fuel Type',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.show()","a4c05cad":"fig,ax = plt.subplots(nrows=2, ncols=1,sharex=True,gridspec_kw={\"height_ratios\": (0.60, 0.10)}, \n                      figsize=(14,7))\nsns.set_theme(style=\"darkgrid\")\n\nax[0]=sns.histplot(data=data_seven_col, x='engineSize', ax=ax[0], kde=True)\nax[0].set_ylabel('Count', fontsize=20)\nax[0].set_title('Distribution of Engine Size',fontsize=20, weight='bold')\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nax[1]=sns.boxplot(data=data_seven_col, x='engineSize',ax=ax[1])\nax[1].set_xlabel('Engine Size',fontsize=20)\nax[1].set_ylabel('Count', fontsize=20)\nplt.xticks(fontsize =13)\nplt.yticks(fontsize =13)\nplt.tight_layout()\nplt.show()","2c7bdf2f":"corrmat = data_seven_col.corr()\nf, ax = plt.subplots(figsize =(12, 8)) \nsns.heatmap(corrmat, ax = ax,  linewidths = 0.1, annot=True, cmap=\"copper_r\")","8270ce6c":"fig = px.scatter(data_seven_col, x=\"year\", y=\"price\", color=\"model\", size=\"price\", \n                   labels={\"price\": \"Price\", \"year\": \"Year\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Prices over Years\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","09133d04":"fig = px.scatter(data_seven_col, x=\"engineSize\", y=\"price\", color=\"year\", size=\"price\", \n                   labels={\"price\": \"Price\", \"engineSize\": \"Engine Size\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Price by Engine Size over Years\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","fdcb3a83":"fig = px.scatter(data_seven_col, x=\"engineSize\", y=\"mileage\", color=\"model\", size=\"price\", \n                   labels={\"engineSize\": \"Engine Size\", \"mileage\": \"Mileage\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Mileages by Engine Size\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","fafe6e9a":"fig = px.box(data_seven_col, x=\"fuelType\", y=\"mileage\", color=\"transmission\",  \n                   labels={\"mileage\": \"Mileage\", \"fuelType\": \"Fuel Type\"})\nfig.update_layout(\n    title={\n        'text': \"Cars Mileage by Fuel Type based on Transmission\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\nfig.show()","f1cd2afd":"fig = px.box(data_seven_col, x=\"transmission\", y=\"price\", color='fuelType',\n                 labels={\"transmission\":\"Transmission\", \"price\": \"Price\"} \n                )\nfig.update_layout(\n    title={\n        'text': \"Cars Prices based on Transmission by Fuel Type\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\n\nfig.show()\n","0ca31591":"fig = px.scatter(data_seven_col, x=\"mileage\", y=\"price\", color='transmission',size=\"price\",\n                 labels={\"mileage\":\"Mileage\", \"price\": \"Price\"} # customize axis label\n                )\nfig.update_layout(\n    title={\n        'text': \"Cars Prices based on Mileages by Transmission\",\n        'y':0.95,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'}, font=dict(\n        family=\"Sans serif monospaced\",\n        size=18,\n        color=\"RebeccaPurple\"))\n\nfig.show()","8c39dc82":"fig = px.treemap(data_seven_col, path=[px.Constant(\"model\"), 'transmission', 'fuelType', 'model'], \n                 values='mileage', color='transmission',\n                  color_discrete_map={'Manual':'lightgrey', 'Automatic':'gold', 'Semi-Auto':'darkblue', 'Other':'red'})\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()","950772af":"class MultiColumnLabelEncoder:\n    def __init__(self,columns = None):\n        self.columns = columns # array of column names to encode\n\n    def fit(self,X,y=None):\n        return self # not relevant here\n\n    def transform(self,X):\n        '''\n        Transforms columns of X specified in self.columns using\n        LabelEncoder(). If no columns specified, transforms all\n        columns in X.\n        '''\n        output = X.copy()\n        if self.columns is not None:\n            for col in self.columns:\n                output[col] = LabelEncoder().fit_transform(output[col])\n        else:\n            for colname,col in output.iteritems():\n                output[colname] = LabelEncoder().fit_transform(col)\n        return output\n\n    def fit_transform(self,X,y=None):\n        return self.fit(X,y).transform(X)","c7827ca4":"data_seven_col_en=MultiColumnLabelEncoder(columns = ['model','transmission', 'fuelType']).fit_transform(data_seven_col)","2a4e6867":"data_seven_col_en.head()","e750b7b9":"X = data_seven_col_en.drop('price', axis=1)\ny = data_seven_col_en.price","a168cb75":"scaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nX_scaled = scaler.fit_transform(X)","d84cfcec":"#Splitting data\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=44, shuffle =True)\n\n#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","a239eedc":"RandomForestRegressorModel = RandomForestRegressor(n_estimators=170,max_depth=9, random_state=0)\nRandomForestRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Random Forest Regressor Train Score is : %.2f' %(RandomForestRegressorModel.score(X_train, y_train)*100))\nprint('Random Forest Regressor Test Score is : %.2f' %(RandomForestRegressorModel.score(X_test, y_test)*100))","534daa33":"GBRModel = GradientBoostingRegressor(n_estimators=60,max_depth=8,learning_rate = 0.5 ,random_state=0)\nGBRModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('GBRModel Train Score is : %.2f'  %(GBRModel.score(X_train, y_train)*100))\nprint('GBRModel Test Score is : %.2f'  %(GBRModel.score(X_test, y_test)*100))","9a13854c":"DecisionTreeRegressorModel = DecisionTreeRegressor(max_depth=9,random_state=34)\nDecisionTreeRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('DecisionTreeRegressor Train Score is : %.2f' %(DecisionTreeRegressorModel.score(X_train, y_train)*100))\nprint('DecisionTreeRegressor Test Score is : %.2f' %(DecisionTreeRegressorModel.score(X_test, y_test)*100))","12f196e9":"KNeighborsRegressorModel = KNeighborsRegressor(n_neighbors = 35, weights='distance', #also can be : distance, or defined function \n                                               algorithm = 'auto')    #also can be : ball_tree ,  kd_tree  , brute\nKNeighborsRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('KNeighborsRegressorModel Train Score is : %.2f' %(KNeighborsRegressorModel.score(X_train, y_train)*100))\nprint('KNeighborsRegressorModel Test Score is : %.2f' %(KNeighborsRegressorModel.score(X_test, y_test)*100))","001f1f55":"\nXGBModel = XGBRegressor(n_estimators=1100, max_depth=6, eta=0.01, subsample=0.99, colsample_bytree=0.5, random_state=0)\nXGBModel.fit(X_train,y_train)\n\n#Calculating Details\nprint('XGBRegressorModel Train Score is : %.2f ' %(XGBModel.score(X_train, y_train)*100))\nprint('XGBRegressorModel Test Score is : %.2f ' %(XGBModel.score(X_test,y_test)*100))","fa31341f":"The distribution between price & mileage is skewed to right, and notice the Semi-Auto transmission Most densely distributed.","e5bc41d7":"The distribution between price & year is skewed to left.","d0a535b4":"As we see No relationship between price and tax, even if the price increase the tax is constant.","e3789959":"## Introduction\nThis Data set for more than 100000 UK used car in 10 brand with many models from this brands with date of  manufacture , fuel type, transmission,  engine size, price, etc....\n\nLets import libraries and loading all dataset:","9f68d2f4":"By tax between 146 to 580 we notice all engine sizes are found.","84ce818f":"drop duplicated rows and reset index of data","46db3b2f":"The relationship between price and mileage with engine size are relationship inverse.","a8d238b0":"The Manual & Automatic transmissions are higer Mileage in the Diesel & Petrol fuel, while the Semi-Auto transmission are lower in the Petrol & Diesel & Hybrid fuel, & Other transmission are very low Mileage in the all fuel type.","4d2885d6":"Hybrid and Other are higher a car's MPG with lower mileage, Petrol and Diesel lower a car's MPG with higher mileage.","f3a19ac6":"## Table of contents\n\n1. [Introduction](#Introduction)\n2. [Data Cleaning](#Data-Cleaning)\n3. [Data with Nine Columns](#Data-with-Nine-Columns)\n -  3.1 [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n -  3.2 [Data Analysis by tax](#Data-Analysis-by-tax)\n -  3.3 [Label Encoding](#Label-Encoding)\n -  3.4 [Data Modeling](#Data-Modeling)\n4. [Data with Seven Columns](#Data-with-Seven-Columns)\n - 4.1 [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n - 4.2 [Label Encoding](#Label-Encoding)\n - 4.3 [Data Modeling](#Data-Modeling)\n5. [Conclusion](#Conclusion)  \n \n\n","5f0e9a5a":"# 100000 UK Used car Data Analysis","1934283b":"I concatenation the data set in two group first with 9 columns and the second with 7 columns: ","b1b59bca":"## Data with Nine Columns","3952b279":"The distribution skewed to right. ","0496ecbb":"## Data Modeling","21c61413":"We filtered data nine columns in 4 groups by tax column:\n* 1. by tax = 0\n* 2. by tax between (1, 125)\n* 3. by tax between (126, 145)\n* 4. by tax between (146, 580)\n","1c754e38":"The distribution of mileage is skewed to left.","9a031e93":"drop duplicated rows and reset index of data","703ed845":"## Exploratory Data Analysis","fc36a620":"Most data by tax between 1 to 125 are engine size between 1 to 2.1 & date of manufactured between 2008 to 2017.","2c7c05bd":"## Data Cleaning ","56a5a8f2":"The car tax with Manual transmission:\n* 0 to 580 pound in the Petrol fuel.\n* 0 to 325 pound in the Diesel fuel.\n* 0 to 150 pound in the Hybrid and Other fuel.\n\nThe car tax with Automatic transmission:\n* 0 to 580 pound in the Petrol and Diesel fuel.\n* 0 to 195 pound in the Hybrid fuel.\n* 0 to 300 pound in the Other fuel.\n\nThe car tax with Semi-Auto transmission:\n* 0 to 580 in the Petrol and Diesel fuel.\n* 0 to 150 in the Hybrid fuel.\n\n\n","8101dea3":"## Data with Seven Columns","a7ac2d99":"Most data by tax = 0 are engine size between 1 to 2.2 & date of manufactured between 2009 to 2018.","c79530f7":"The car price with Manual transmission in the Petrol, Diesel, Hybrid, and Other fuel are less than 60000 pound, while the car price with Automatic transmission in the all types are cheap and expensive, and the car price with Other transmission in all types are less than 23000 pound.","de42daad":"## Exploratory Data Analysis","f90f5cd2":"As the years progress, we notice that the prices of cars increase and are directly proportional to the sizes of the engines, as the greater the size of the engine, the higher the price of the car and inversely proportional to the number of miles, as the more it increases, the price of the car decreases. All of this also depends on the type of transmission if manual or automatic or semi-auto or other.","a38d46d8":"Six clusters by tax between 126-145.","0518c995":"The distribution of year is skewed to left.","b16041cb":"There is a positive relationship between price and engine size, the larger the engine size the price increases for cars.","2e74ba2c":"The distribution price & year is skewed to left, in this data set most data between 2010 to 2020.","7edba060":"The distribution is normal","1cb374d1":"The larger the engine size, the higher the price of the car, in addition to the year of manufacture.","d5d5ef8d":"There is a positive relationship between tax and engine size, the larger the engine size the tax increases for cars.","6b8d69d6":"* MPG, or miles per gallon, is the distance, measured in miles, that a car can travel per gallon of fuel. MPG is also the primary measurement of a car's fuel efficiency: The higher a car's MPG, the more fuel efficient it is. \n","b01ee932":"## Data Modeling","96ded34b":"## Data Analysis by tax","ea1490f0":"The distribution of price is skewed to right.","fbf979d9":"Over all engine sizes, the higher mileage, the lower the price of the car.","f3994156":"The Manual & Automatic transmissions are higer Mileage in the Diesel & Petrol fuel, while the Semi-Auto transmission are lower in the Petrol & Diesel & Hybrid fuel, & Other transmission are very low Mileage in the all fuel type.","eb738271":"**I had checking before every data set and i saw six problems:**\n* In hyundi dataset need tax(\u00a3) column to rename to tax.\n* no need to read unclean focus & unlclean cclass data sets.\n* The focus & cclass datasets are 7 columns for each data sets while the remainder of datasets are 9 columns for each data sets.\n* we need to drop duplicate rows and reset index after that.\n* we need to remove space in model column by replace.\n* The max value in year column is 2060 we need to checking and replace with right value.","92088511":"Six clusters by tax with year.","a3de474d":"## Conclusion","3a8b5eb0":"i notice the max value of year column is 2060 for the ford fiesta car, after searching based on tax 205 in ford data set i notice same tax value with same ford model the year manufactured this model is 2010, so we replace it to 2010.","f9700dc0":"The car price with Manual transmission in the Petrol & Diesel fuel are less than 55000 pound, while the car price with Automatic transmission in the Petrol fuel are less than 70000 pound & in the Diesel & Hybrid & Other fuel are less than 45000 pound, and the car price with Semi-Auto transmission in the Petrol fuel are less than 89000 pound & in the Diesel & Hybrid fuel are less than 47000 pound.","94c4ea67":"## Label Encoding","709720b6":"## Label Encoding","c03ff2d1":"The distribution between price and mileage is skewed to right, and notice the Semi-Auto transmission Most densely distributed. "}}