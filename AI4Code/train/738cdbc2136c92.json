{"cell_type":{"5ec14329":"code","2a387238":"code","b1c3c1dd":"code","e0373328":"code","a76c547b":"code","aab828bc":"code","631df1d0":"code","e33e97ad":"code","0540d41b":"code","ac947325":"code","c351e313":"code","537cf0ca":"code","0c46dc3e":"code","1dd9c6ac":"code","54150d32":"code","dfc6b7af":"code","8a765732":"code","8cfde41f":"code","27ed70ce":"code","677d201c":"code","3cc197fe":"code","41f8df6e":"code","103db47a":"code","75e9486d":"code","469d8c7e":"code","900052f0":"code","78689264":"code","d11ce412":"code","dfb9f3ba":"code","a3bc4ccc":"code","b7bfad3e":"code","ba2df936":"code","902560e3":"code","448cc901":"code","f3cf7bc4":"code","89dfdc97":"code","c19051e9":"code","cb083189":"code","35232b41":"code","a506d373":"code","58e01a91":"code","7e03c1d1":"code","e7c1fa5e":"code","7897b2d0":"code","643e7f8a":"code","52e5111e":"code","bc4097a6":"code","eafc2a20":"code","5dbc17b6":"code","951f165e":"code","45e6975c":"code","73051a54":"code","f744c5d3":"code","d6b5666d":"code","47baff39":"code","935076ca":"code","d3fe365d":"code","0e426bd3":"code","9e098068":"code","cee99fe1":"code","554d828b":"code","dcd2ca29":"code","d66a466c":"code","3e26f380":"code","0ac9992d":"markdown","fb3fa8c0":"markdown","db1ea42a":"markdown","283e808a":"markdown","006540b8":"markdown","cf35f73b":"markdown","24221906":"markdown","9433cbd3":"markdown","d5db2ea5":"markdown","b0ec0d5b":"markdown","1547fa85":"markdown","734a8aa6":"markdown","aa8cfeea":"markdown","5af27459":"markdown","a6910c24":"markdown","83b0d3f2":"markdown","73e61c39":"markdown","5792f0be":"markdown","6dfd0a82":"markdown","1f34ad77":"markdown","66be3c95":"markdown","a0c5496f":"markdown","eb44164a":"markdown","dcfc4dc4":"markdown","1ba804af":"markdown","40805f43":"markdown","5ad1bf3a":"markdown","6aae237d":"markdown","eaca9996":"markdown","bf0348df":"markdown","9e67c67f":"markdown","a355f60b":"markdown","bcdba2b2":"markdown","7babea2a":"markdown","6fc74026":"markdown","2df26da9":"markdown","922e8d25":"markdown","7965d2c2":"markdown"},"source":{"5ec14329":"#Installation of required libraries\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report,plot_roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import  train_test_split, cross_validate","2a387238":"#Reading the dataset\ndf = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","b1c3c1dd":"# The first 5 observation units of the data set were accessed.\ndf.head()","e0373328":"# The size of the data set was examined. It consists of 768 observation units and 9 variables.\ndf.shape","a76c547b":"#Feature information\ndf.info()","aab828bc":"# Descriptive statistics of the data set accessed.\ndf.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","631df1d0":"# The distribution of the Outcome variable was examined.\ndf[\"Outcome\"].value_counts()*100\/len(df)","e33e97ad":"# The classes of the outcome variable were examined.\ndf.Outcome.value_counts()","0540d41b":"# The histagram of the Age variable was reached.\ndf[\"Age\"].hist(edgecolor = \"red\");","ac947325":"df.groupby(['Outcome']).agg({\"Age\":[\"mean\", \"median\"],\n                            \"Glucose\":[\"mean\",\"median\"],\n                            \"Pregnancies\":[\"mean\", \"median\"],\n                            \"BMI\":[\"mean\", \"median\"],\n                            \"SkinThickness\":[\"mean\", \"median\"]})","c351e313":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, num_cols, cat_but_car\ncat_cols, num_cols, cat_but_car = grab_col_names(df)","537cf0ca":"def cat_summary(dataframe, col_name, plot=False):\n\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n\n    if plot:\n        plt.style.use('seaborn-darkgrid')\n        fig, ax = plt.subplots(1, 2)\n        ax = np.reshape(ax, (1, 2))\n        ax[0, 0] = sns.countplot(x=dataframe[col_name], color=\"green\", ax=ax[0, 0])\n        ax[0, 0].set_ylabel('Count')\n        ax[0, 0].set_xticklabels(ax[0, 0].get_xticklabels(), rotation=-45)\n        ax[0, 1] = plt.pie(dataframe[col_name].value_counts().values, labels=dataframe[col_name].value_counts().keys(),\n                           colors=sns.color_palette('bright'), shadow=True, autopct='%.0f%%')\n        plt.title(\"Percent\")\n        fig.set_size_inches(10, 6)\n        fig.suptitle('Analysis of Categorical Variables', fontsize=13)\n        plt.show()","0c46dc3e":"cat_summary(df, 'Pregnancies', plot=True)","1dd9c6ac":"def num_summary(dataframe, numerical_col):\n    # setup the plot grid\n    plt.style.use('seaborn-darkgrid')\n    fig, ax = plt.subplots(1, 2)\n    ax = np.reshape(ax, (1, 2))\n    ax[0, 0] = sns.histplot(x=dataframe[numerical_col], color=\"blue\", bins=20, ax=ax[0, 0])\n    ax[0, 0].set_ylabel('Count')\n    ax[0, 0].set_title('Distribution')\n    ax[0, 1] = sns.boxplot(y=dataframe[numerical_col], color=\"blue\", ax=ax[0, 1])\n    ax[0, 1].set_title('Quantiles')\n\n    fig.set_size_inches(12, 8)\n    fig.suptitle('Analysis of Numerical Variables', fontsize=13)\n    plt.show()","54150d32":"num_summary(df, 'BMI')","dfc6b7af":"def correlated_map(dataframe, plot=False):\n    corr = dataframe.corr()\n    if plot:\n        sns.set(rc={'figure.figsize': (10, 10)})\n        sns.heatmap(corr, cmap=\"YlGnBu\", annot=True, linewidths=.7)\n        plt.xticks(rotation=60, size=10)\n        plt.yticks(size=10)\n        plt.title('Correlation Map', size=20)\n        plt.show()\n\ncorrelated_map(df, plot=True)","8a765732":"df.isnull().sum()","8cfde41f":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","27ed70ce":"df.head()","677d201c":"# Now, we can look at where are missing values\ndf.isnull().sum()","3cc197fe":"df.columns = [col.upper() for col in df.columns]\n\ncat_cols = [x.upper() for x in cat_cols]\nnum_cols = [x.upper() for x in num_cols]\ncat_but_car = [x.upper() for x in cat_but_car]\n","41f8df6e":"columns = df.columns\ncolumns = columns.drop(\"OUTCOME\")","103db47a":"for i in columns:    \n  df[i] = df[i].fillna(df.groupby(\"OUTCOME\")[i].transform(\"median\"))","75e9486d":"df.head()","469d8c7e":"#BMI CATEGORY\nbins = [df['BMI'].min()-1, 18.5, 24.9, 29.9, 39.9, df['BMI'].max()]\nlabels = ['THIN', 'NORMAL_WEIGHTED', 'OVER_WEIGHTED', 'OBESE', 'MOREBID_OBESE']\ndf['NEW_BMI_CAT'] = pd.cut(df['BMI'], bins, labels = labels).astype(str)","900052f0":"#AGE_CATEGORY\nbins = [df['AGE'].min()-1, 26.9, 39.9, 59.9, df['AGE'].max()]\nlabels = ['YOUNG', 'MIDDLE', 'MATURE', 'OLD']\ndf['NEW_AGE_CAT'] = pd.cut(df['AGE'], bins, labels=labels).astype(str)","78689264":"#BLOOD PRESSURE\nbins = [df['BLOODPRESSURE'].min() - 1, 69, 90 , df['BLOODPRESSURE'].max()]\nlabels = ['LOW_BLOODPRESSURE', 'NORMAL_BLOODPRESSURE', 'HIGH_BLOODPRESSURE']\ndf['NEW_BLOODPRESSURE_CAT'] = pd.cut(df['BLOODPRESSURE'], bins, labels=labels).astype(str)","d11ce412":"#SKIN THICKNESS\nbins = [df['SKINTHICKNESS'].min() - 1, 14.9, 28.0, df['SKINTHICKNESS'].max()]\nlabels = ['THIN_SKIN', 'NORMAL_SKIN', 'THICK_SKIN']\ndf['NEW_SKINTHICKNESS_CAT'] = pd.cut(df['SKINTHICKNESS'], bins, labels=labels).astype(str)","dfb9f3ba":"#DIABETSPEDIGREE\nbins = [df['DIABETESPEDIGREEFUNCTION'].min() - 1, 0.3, 0.50, 0.70, df['DIABETESPEDIGREEFUNCTION'].max()]\nlabels = ['LOW_PROB', 'NORMAL_PROB', 'HIGH_PROB', 'CRITICAL']\ndf['NEW_DIABETESPEDIGREEFUNCTION_CAT'] = pd.cut(df['DIABETESPEDIGREEFUNCTION'], bins, labels=labels).astype(str)","a3bc4ccc":"num_summary(df,\"GLUCOSE\")","b7bfad3e":"#NEW_GLUCOSE\nNewGlucose = pd.Series([\"LOW\", \"NORMAL\", \"OVERWEIGHT\", \"HIGH\"], dtype=\"category\")\ndf[\"NEW_GLUCOSE\"] = NewGlucose\ndf.loc[df[\"GLUCOSE\"] <= 70, \"NEW_GLUCOSE\"] = NewGlucose[0]\ndf.loc[(df[\"GLUCOSE\"] > 70) & (df[\"GLUCOSE\"] <= 99), \"NEW_GLUCOSE\"] = NewGlucose[1]\ndf.loc[(df[\"GLUCOSE\"] > 99) & (df[\"GLUCOSE\"] <= 126), \"NEW_GLUCOSE\"] = NewGlucose[2]\ndf.loc[df[\"GLUCOSE\"] > 126, \"NEW_GLUCOSE\"] = NewGlucose[3]","ba2df936":"cat_summary(df,\"NEW_GLUCOSE\", plot=True)","902560e3":"#INSULIN\nbins = [df['INSULIN'].min()-1, 15.9, 165.9, df['INSULIN'].max()]\nlabels = ['LOW_INSULIN', 'NORMAL', 'HIGH_INSULIN']\ndf['NEW_INSULIN_CAT'] = pd.cut(df['INSULIN'], bins, labels=labels).astype(str)","448cc901":"#AGE x NUMBER OF PREGNANCY\ndf.loc[((df['NEW_AGE_CAT'] == 'YOUNG') | (df['NEW_AGE_CAT'] == 'MIDDLE')) & (df['PREGNANCIES'] > 3), 'NEW_YOUNG_MULTI_PREGNANCY'] = 1\ndf.loc[((df['NEW_AGE_CAT'] == 'MATURE') | (df['NEW_AGE_CAT'] == 'OLD')) & (df['PREGNANCIES'] < 3), 'NEW_MATURE_FEW_PREGNANCY'] = 1\n\ndf['NEW_YOUNG_MULTI_PREGNANCY'] = df['NEW_YOUNG_MULTI_PREGNANCY'].fillna(0)\ndf['NEW_MATURE_FEW_PREGNANCY'] = df['NEW_MATURE_FEW_PREGNANCY'].fillna(0)","f3cf7bc4":"#BLOODPRESSURE X AGE\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'LOW_BLOODPRESSURE') & ((df['NEW_AGE_CAT'] == 'YOUNG') | (df['NEW_AGE_CAT'] == 'MIDDLE')), 'NEW_AGE_BLOODPRESSURE'] = 'YOUNG_LOW_BLOODPRESSURE'\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'LOW_BLOODPRESSURE') & (df['NEW_AGE_CAT'] == 'MATURE'), 'NEW_AGE_BLOODPRESSURE'] = 'MATURE_LOW_BLOODPRESSURE'\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'LOW_BLOODPRESSURE') & (df['NEW_AGE_CAT'] == 'OLD'), 'NEW_AGE_BLOODPRESSURE'] = 'OLD_LOW_BLOODPRESSURE'\n\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'NORMAL_BLOODPRESSURE') & ((df['NEW_AGE_CAT'] == 'YOUNG') | (df['NEW_AGE_CAT'] == 'MIDDLE')), 'NEW_AGE_BLOODPRESSURE'] = 'YOUNG_NORMAL_BLOODPRESSURE'\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'NORMAL_BLOODPRESSURE') & (df['NEW_AGE_CAT'] == 'MATURE'), 'NEW_AGE_BLOODPRESSURE'] = 'MATURE_NORMAL_BLOODPRESSURE'\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'NORMAL_BLOODPRESSURE') & (df['NEW_AGE_CAT'] == 'OLD'), 'NEW_AGE_BLOODPRESSURE'] = 'OLD_NORMAL_BLOODPRESSURE'\n\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'HIGH_BLOODPRESSURE') & ((df['NEW_AGE_CAT'] == 'YOUNG') | (df['NEW_AGE_CAT'] == 'MIDDLE')), 'NEW_AGE_BLOODPRESSURE'] = 'YOUNG_HIGH_BLOODPRESSURE'\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'HIGH_BLOODPRESSURE') & (df['NEW_AGE_CAT'] == 'MATURE'), 'NEW_AGE_BLOODPRESSURE'] = 'MATURE_HIGH_BLOODPRESSURE'\ndf.loc[(df['NEW_BLOODPRESSURE_CAT'] == 'HIGH_BLOODPRESSURE') & (df['NEW_AGE_CAT'] == 'OLD'), 'NEW_AGE_BLOODPRESSURE'] = 'OLD_HIGH_BLOODPRESSURE'","89dfdc97":"df.head()","c19051e9":"def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","cb083189":"for col in num_cols:\n    print(outlier_thresholds(df, col))","35232b41":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\nfor col in num_cols:\n    replace_with_thresholds(df,col)","a506d373":"df.describe().T","58e01a91":"binary_cols = [col for col in df.columns if df[col].dtype not in [int, float] and df[col].nunique() == 2]\n\nfor col in binary_cols:\n    df = label_encoder(df, col)","7e03c1d1":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","e7c1fa5e":"ohe_cols = [col for col in df.columns if 10 >= df[col].nunique() > 2]","7897b2d0":"# Here, by making One Hot Encoding transformation, categorical variables were converted into numerical values. It is also protected from the Dummy variable trap.\ndf = one_hot_encoder(df, ohe_cols)","643e7f8a":"df.head()","52e5111e":"y = df['OUTCOME']\nX = df.drop(['OUTCOME'], axis = 1)","bc4097a6":"cols = X.columns\nindex = X.index","eafc2a20":"# The variables in the data set are an effective factor in increasing the performance of the models by standardization.  \n# There are multiple standardization methods. These are methods such as\" Normalize\",\" MinMax\",\" Robust\" and \"Scale\".\nfrom sklearn.preprocessing import RobustScaler\ntransformer = RobustScaler().fit(X)\nX = transformer.transform(X)\nX = pd.DataFrame(X, columns = cols, index = index)","5dbc17b6":"X.head()","951f165e":"log_model = LogisticRegression(solver='lbfgs', max_iter=1000).fit(X, y)","45e6975c":"# Prediction\ny_pred = log_model.predict(X)","73051a54":"def plot_confusion_matrix(y, y_pred):\n    acc = round(accuracy_score(y, y_pred), 2)\n    cm = confusion_matrix(y, y_pred)\n    sns.heatmap(cm, annot=True, fmt=\".0f\")\n    plt.xlabel('y_pred')\n    plt.ylabel('y')\n    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n    plt.show()\n\nplot_confusion_matrix(y, y_pred)","f744c5d3":"print(classification_report(y, y_pred))","d6b5666d":"\ncv_results = cross_validate(log_model,\n                            X, y,\n                            cv=10,\n                            scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"roc_auc\"])","47baff39":"cv_results['test_accuracy'].mean()\n","935076ca":"cv_results['test_precision'].mean()","d3fe365d":"cv_results['test_recall'].mean()\n","0e426bd3":"cv_results['test_f1'].mean()\n","9e098068":"cv_results['test_roc_auc'].mean()","cee99fe1":"# Splitting the dataset into train-test:\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.50, random_state=17)\n\n\n# Creating the model with the train set:\nlog_model = LogisticRegression().fit(X_train, y_train)","554d828b":"# Giving the test set as input for prediction in the model created:\ny_pred = log_model.predict(X_test)\n\n\n# y_prob for AUC Score (probability of belonging to 1st class)\ny_prob = log_model.predict_proba(X_test)[:, 1]\ny_prob","dcd2ca29":"# Classification report\nprint(classification_report(y_test, y_pred))","d66a466c":"# ROC Curve\nplot_roc_curve(log_model, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()","3e26f380":"roc_auc_score(y_test, y_prob)","0ac9992d":"Diabetes is defined as the body's inability to use blood sugar properly. Today, diabetes has become a well-known and common disease almost as much as the flu. Diabetes has increased tremendously in recent years. This disorder, which is frequently seen in the world and in our country, continues to increase day by day. However, even if the disease spreads, not all people are conscious of this issue yet. For this reason, unfortunately, the negative situations and deaths continue. It is very important to keep blood sugar under control in order to prevent diabetes. Although the numbers are frightening, preventing diabetes can be possible with getting rid of a sedentary lifestyle and proper eating habits.","fb3fa8c0":"We suppress the remaining data in the extreme 5 percent.","db1ea42a":"Now we can actually observe how many missing values there are.","283e808a":"# 5 - FEATURE ENGINEERING","006540b8":"# Label Encoding","cf35f73b":"![image.png](attachment:e2a1bc47-f48d-4414-94d2-47364719aaa0.png)","24221906":"**Blood Pressure (BP)** \nThe pressure of circulating blood against the walls of blood vessels. Most of this pressure results from the heart pumping blood through the circulatory system. When used without qualification, the term \"blood pressure\" refers to the pressure in the large arteries.","9433cbd3":"**Model Validation: Holdout**","d5db2ea5":"# Explaratory Data Analysis","b0ec0d5b":"# 3 - Data Visualization","1547fa85":"# 6 - OUTLIERS","734a8aa6":"**Details About the Dataset:**\n\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\n\n\n* Pregnancies: Number of times pregnant\n* Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure: Diastolic blood pressure (mm Hg)\n* SkinThickness: Triceps skin fold thickness (mm)\n* Insulin: 2-Hour serum insulin (mu U\/ml)\n* BMI: Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction: Diabetes pedigree function\n* Age: Age (years)\n* Outcome: Class variable (0 or 1)\n\nNumber of Observation Units: 768\n\nVariable Number: 9","aa8cfeea":"# 9- MODEL CREATION","5af27459":"# REFERENCES","a6910c24":"# 4- MISSING VALUES","83b0d3f2":"# 8 - SCALING","73e61c39":"If the correlation value is bigger than 0, there is a positive correlation. While the value of one variable increases, the value of the other variable also increases. When there is equality of Correlation = 0 means no correlation. If the correlation is smaller than 0, there is a negative correlation. While one variable increases, the other variable decreases. When the correlations are examined, there are 2 variables that act as a positive correlation to the Outcome dependent variable. These variables are Glucose. As these increase, Outcome variable increases.","5792f0be":"**Glucose**","6dfd0a82":"# Steps to be Followed :\n\n1. Importing Essential Libraries.\n2. Data preparing.\n3. Data Visualization(By Categorical and Numerical Values)\n4. Handling Missing Values\n5. Feature Engineering (to discover essential features in the process of applying machine learning).\n6. Outliers\n7. Encoding Categorical Variables.\n8. Scaling\n9. Model Creation\n10. Cross Validation","1f34ad77":"**Model Validation: 10-Fold Cross Validation**","66be3c95":"[1] Derraik, J. G., Rademaker, M., Cutfield, W. S., Pinto, T. E., Tregurtha, S., Faherty, A., ... & Hofman, P. L. (2014). Effects of age, gender, BMI, and anatomical site on skin thickness in children and adults with diabetes. PLoS One, 9(1), e86637.\n\n[2] Collier, A., Matthews, D. M., Kellett, H. A., Clarke, B. F., & Hunter, J. A. (1986). Change in skin thickness associated with cheiroarthropathy in insulin dependent diabetes mellitus. British medical journal (Clinical research ed.), 292(6525), 936.\n\n[3] Narayan, K. V., Boyle, J. P., Thompson, T. J., Gregg, E. W., & Williamson, D. F. (2007). Effect of BMI on lifetime risk for diabetes in the US. Diabetes care, 30(6), 1562-1566.\n\n[4] J\u00f8rgensen, H. S., Nakayama, H., Olsen, T. S., & Raaschou, H. O. (1994). Effect of blood pressure and diabetes on stroke in progression. The Lancet, 344(8916), 156-159.\n\n[5] Ripsin, C. M., Kang, H., & Urban, R. J. (2009). Management of blood glucose in type 2 diabetes mellitus. American family physician, 79(1), 29-36.\n\n[6] https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC3784870\/#:~:text=The%20mean%20skin%20thickness%20of,3.00%20mm%20%5BTable%204%5D.","a0c5496f":"# 2- DATA PREPROCESSING","eb44164a":"# 10 - CROSS VALIDATION","dcfc4dc4":"**Correlation Map**","1ba804af":"**Analysing Categorical Columns**","40805f43":"# 1. Importing Essential Libraries.","5ad1bf3a":"What distinguishes AI technology from traditional technologies of healthcare is its ability to collect data, process it, and deliver a well-defined output to the end user. AI does this through machine learning algorithms and deep learning. These algorithms can recognize patterns of behavior and create their own logic. Machine learning models need to be trained using large amounts of input data to obtain useful insights and predictions.","6aae237d":"# DATASET","eaca9996":"**Analysing Numerical Columns**","bf0348df":"**Skin thickness**\nAt arm, the mean skin thickness was more in males as compared to females in the BMI range 17-19 kg\/m2 and 19-23 kg\/m2 (P < 0.05), whereas in other BMI ranges, skin thickness was comparable (P > 0.05). The mean skin thickness of males ranged from 0.60 mm to 3.20 mm and in females it ranged from 1.50 mm to 2.80 mm","9e67c67f":"When we examine NaN values with isnull() in the data set, no records are found; however, too many 0's stand out in the columns such as blood pressure, BMI, skin thickness. This is illogical, so these values should be treated as missing values.","a355f60b":"# One Hot Encoding","bcdba2b2":"# 7 - ENCODING","7babea2a":"As you can see, we have taken a reasonable action on null values very easily.","6fc74026":"# DIABETES","2df26da9":"We capitalize the titles of all columns for ease of reading.","922e8d25":"To fill in the blank values, we will group the columns with empty values according to OUTCOME and add the median value of the target variable corresponding to the relevant blank value.","7965d2c2":"# Robust Scaler"}}