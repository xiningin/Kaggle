{"cell_type":{"c7fb734d":"code","49b6fde9":"code","7dc9a946":"code","9056e238":"code","dc60bce8":"code","855d1e9a":"code","40b7943f":"code","9df84a8d":"code","e49a72f6":"code","a5625119":"code","c062a199":"code","15666637":"code","fbeff159":"code","46e5534c":"code","2a05f0f7":"code","1e532045":"code","35b7aa34":"code","882103d2":"code","fb05a539":"code","bfafccdf":"code","7d879f9a":"markdown"},"source":{"c7fb734d":"import os\nimport numpy as np\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nimport scipy.ndimage\nimport pandas as pd\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport tensorflow as tf\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.applications.resnet import ResNet50, ResNet101, ResNet152\nfrom tensorflow.keras.applications import InceptionV3\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization","49b6fde9":"data_dir = \"..\/input\/corn-or-maize-leaf-disease-dataset\/data\"","7dc9a946":"classes = os.listdir(data_dir)\nnum_classes = len(classes)\nimage_size = (224, 224)\nbatch_size = 16\nepochs=2","9056e238":"for i in classes:\n    directory = os.path.join(data_dir, i)\n    print(\"Images of label \\\"\" + i + \"\\\":\\t\", len(os.listdir(directory)))","dc60bce8":"train = tf.keras.preprocessing.image_dataset_from_directory(\n    data_dir,\n    subset= \"training\",\n    validation_split = 0.2,\n    seed=1,\n    image_size = image_size,\n    batch_size = batch_size,\n    label_mode = \"categorical\",\n    class_names = classes\n)\n\ntest = tf.keras.preprocessing.image_dataset_from_directory(\n    data_dir,\n    subset= \"validation\",\n    validation_split = 0.2,\n    seed=1,\n    image_size = image_size,\n    batch_size = batch_size,\n    label_mode = \"categorical\",\n    class_names = classes\n)","855d1e9a":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(15,15))\n\nplt.figure()\nfor images, labels in train.take(1):\n    for i in range(15):\n        ax = plt.subplot(3,5,i+1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(classes[np.argmax(labels[i])])\n        plt.axis(\"off\")\nplt.show()","40b7943f":"from keras import backend\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization\n\nbackend.set_image_data_format('channels_last')\n\nRN50_model = ResNet50( weights=\"imagenet\", include_top=True)\nRN50_model.trainable = False\n\nx = RN50_model.output\nx = Dense(256, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\nRN50_predictions = Dense(len(classes), activation='softmax')(x)\n\n# this is the model we will train\nmodel_RN50 = Model(inputs=RN50_model.input, outputs=RN50_predictions)\n\nfor layer in RN50_model.layers:\n    layer.trainable = False\n\nmodel_RN50.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=[\"accuracy\"],)","9df84a8d":"RN101_model = ResNet101( weights='imagenet', include_top=False)\nRN101_model.trainable = False\n\nx = RN101_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dense(256, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\nRN101_predictions = Dense(len(classes), activation='softmax')(x)\n\nmodel_RN101 = Model(inputs=RN101_model.input, outputs=RN101_predictions)\n\nfor layer in RN101_model.layers:\n    layer.trainable = False\n\nmodel_RN101.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=[\"accuracy\"],)","e49a72f6":"RN152_model = ResNet152(weights='imagenet', include_top=False)\nRN152_model.trainable = False\n\nx = RN152_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dense(256, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\nRN152_predictions = Dense(len(classes), activation='softmax')(x)\n\nmodel_RN152 = Model(inputs=RN152_model.input, outputs=RN152_predictions)\n\nfor layer in RN152_model.layers:\n    layer.trainable = False\n\nmodel_RN152.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=[\"accuracy\"],)","a5625119":"RN50_history = model_RN50.fit(train, epochs=epochs, validation_data=test)","c062a199":"RN101_history = model_RN101.fit(train, epochs=epochs, validation_data=test)","15666637":"RN152_history = model_RN152.fit(train, epochs=epochs, validation_data=test)","fbeff159":"score_RN50= model_RN50.evaluate(train, verbose=0)\nval_RN50= model_RN50.evaluate(test, verbose=0)\nprint('Test loss RN50:', val_RN50[0])\nprint('Test accuracy RN50:', val_RN50[1])","46e5534c":"score_RN101= model_RN101.evaluate(train, verbose=0)\nval_RN101= model_RN101.evaluate(test, verbose=0)\nprint('Test loss RN101:', val_RN101[0])\nprint('Test accuracy RN101:', val_RN101[1])","2a05f0f7":"score_RN152= model_RN152.evaluate(train, verbose=0)\nval_RN152= model_RN152.evaluate(test, verbose=0)\nprint('Test loss RN152:', val_RN152[0])\nprint('Test accuracy RN152:', val_RN152[1])","1e532045":"def predict(model, test):\n    y_test=[]\n    y_test_pred =[]\n    \n    for imagen, targets in test:\n        for image, target in zip(images, targets):\n            img_array = image.numpy().astype(\"uint8\")\n            prediction = model.predict(np.array([img_array]))\n            y_test_pred.append(np.argmax(prediction))\n            y_test.append(np.argmax(target))\n    return (y_test, y_test_pred)","35b7aa34":"from sklearn.metrics import confusion_matrix\nimport plotly.express as px","882103d2":"(RN50_y_test, RN50_y_test_pred) = predict(model_RN50, test)\n\ncm50=confusion_matrix(RN50_y_test, RN50_y_test_pred)\n            \nfig = px.imshow(\n    cm50, \n    labels = dict(x=\"Predicciones\", y=\"Reales\"),\n    x=classes,\n    y=classes\n)\nfig.update_xaxes(side=\"top\")\nfig.show()","fb05a539":"(RN101_y_test, RN101_y_test_pred) = predict(model_RN101, test)\n\ncm101=confusion_matrix(RN101_y_test, RN101_y_test_pred)\n            \nfig = px.imshow(\n    cm101, \n    labels = dict(x=\"Predicciones\", y=\"Reales\"),\n    x=classes,\n    y=classes\n)\nfig.update_xaxes(side=\"top\")\nfig.show()","bfafccdf":"(RN152_y_test, RN152_y_test_pred) = predict(model_RN152, test)\n\ncm152=confusion_matrix(RN152_y_test, RN152_y_test_pred)\n            \nfig = px.imshow(\n    cm152, \n    labels = dict(x=\"Predicciones\", y=\"Reales\"),\n    x=classes,\n    y=classes\n)\nfig.update_xaxes(side=\"top\")\nfig.show()","7d879f9a":"Transfer Learning\n\nUtilice el dataset Corn or Maize Leaf Disease Dataset para detectar si una planta de ma\u00edz esta sana o tiene una de las siguientes 3 enfermedades: Common Rust, Gray Leaf Spot o Blight.\n\nUtilice Transfer Learning con al menos 3 modelos base diferentes (3 pts c\/u).\n\nMuestre los accuracy y val_accuracy de cada modelo base mediante una tabla en markdown (3 pts)\n\nMuestre el accuracy y el loss a lo largo del tiempo \/ epocs (2 pts)\n\nMuestre sus resultados con una matriz de confusi\u00f3n o un reporte (2 pts)"}}