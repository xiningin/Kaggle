{"cell_type":{"5d9ff596":"code","732c2e5e":"code","597923f5":"code","5f0234ef":"code","1d92b768":"code","e1c237a7":"code","321dd1e7":"code","52dc1ff9":"code","cb04b575":"code","252a7d23":"code","ed1d283e":"code","feb29a21":"markdown","c67b1b17":"markdown","d7b1efbb":"markdown","c9b0212f":"markdown","1251e243":"markdown","1e9f6776":"markdown","d372dc4d":"markdown","80900b38":"markdown","9718b212":"markdown"},"source":{"5d9ff596":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np \nimport pandas as pd \nfrom  sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","732c2e5e":"df = pd.read_csv(\"..\/input\/voice.csv\")\ndf.label = [1 if each == \"male\" else 0 for each in df.label]\nprint(df.info())\n\ny = df.label.values\nx_data = df.drop([\"label\"],axis=1)\n","597923f5":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","5f0234ef":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","1d92b768":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b","e1c237a7":"def sigmoid(z):\n    return 1\/(1+np.exp(-z))","321dd1e7":"def forward_backward_propagation(w,b,x_train,y_train):\n    z = np.dot(w.T,x_train)+b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\":derivative_weight,\"derivative_bias\":derivative_bias}\n    return cost,gradients\n\n","52dc1ff9":"def update(w,b,x_train,y_train,learning_rate,num_iteration):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    \n    for i in range(num_iteration):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w - learning_rate*gradients[\"derivative_weight\"]\n        b = b - learning_rate*gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    parameters={\"weight\":w,\"bias\":b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters,gradients,cost_list\n\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(number_of_iterarion):\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterations\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters, gradients, cost_list     ","cb04b575":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_pre = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            Y_pre[0,i] = 0\n        else:\n            Y_pre[0,i]=1\n    \n    return Y_pre\n","252a7d23":"def logistic_regression(x_train,x_test,y_train,y_test,learning_rate,num_iteration):\n    \n    dimension = x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n    parameters,gradients,cost_list = update(w,b,x_train,y_train,learning_rate,num_iteration)\n    y_pre_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    print(\"test accuracy:{}%\".format(100-np.mean(np.abs(y_pre_test-y_test)*100)))\n    \n    ","ed1d283e":"logistic_regression(x_train,x_test,y_train,y_test,learning_rate=1,num_iteration=501)","feb29a21":"Forward propagation for our logistic regression model\n*  z = b + w1*x1+w2*x2+w3*x3..wn*xn\n*  y_head = activation_function(z)\n*  cost = \u03a3(loss)","c67b1b17":"sigmoid function zipping values -->0-1 so\n* if our predict lower than 0.5, it means female(0)\n* if our predict higher than 0.5, it means male(1)","d7b1efbb":"Importing data","c9b0212f":"We built our activation function. \nAnd I choose sigmoid function.","1251e243":"Spliting data for training and testing","1e9f6776":"# Introduction\n* My first logistic regression model.    ","d372dc4d":"Final Chapter","80900b38":"Normalizing x values","9718b212":"We did forward propagation but we need to repeat it with updated values. So I wrote a update function.\n* new weight = old_weight - learning_rate(hypervalue)* derivative of old_weight\n* new bias = old_bias - learning_rate(hypervalue)* derivative of old_bias\n\n"}}