{"cell_type":{"cee6e77d":"code","0a9bf032":"code","9e7fd144":"code","e68c6d05":"code","aa6346a3":"code","eec4e577":"code","7a80f938":"code","693b1854":"code","7b838bb8":"code","f56f0d20":"code","a5d64bae":"code","044908b2":"code","fc5b8d53":"code","ed0218ac":"code","5d7a1027":"code","4e788aa3":"code","7ed2b030":"code","481ad777":"code","1e036b00":"code","750077ef":"code","172314e4":"code","a16b2514":"code","43054252":"code","47feeab4":"code","f45d679c":"markdown","e7839e59":"markdown","84620da5":"markdown","d7548846":"markdown","77b244a9":"markdown","cef6672a":"markdown","82eabc12":"markdown"},"source":{"cee6e77d":"# Ref: SARS-CoV2 pretrained model written by Professor Chen, Brain Tumor MRI Classification | VGG16 written by Loai abdalslam on Kaggle\nimport numpy as np\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass","0a9bf032":"disease_types = ['yes', 'no']\ntrain_dir = '..\/input\/brain-mri-images-for-brain-tumor-detection'\nos.path.isdir(train_dir)","9e7fd144":"import os\ntrain_data = []\nfor disease_id, disease_dir in enumerate(disease_types):\n    for f in os.listdir(os.path.join(train_dir, disease_dir)):\n        train_data.append(['{}\/{}'.format(disease_dir, f), disease_id, disease_dir])\n        \ntrain = pd.DataFrame(train_data, columns = ['File', 'DiseaseID', 'Disease Type'])\nprint(train)","e68c6d05":"import cv2\nfrom tqdm.notebook import tqdm\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\nIMAGE_SIZE = 224\nX = []\nfor i, file in tqdm(enumerate(train['File'].values), total=len(train)):\n    image = cv2.imread(os.path.join(train_dir, file))\n    if image is not None:\n        image = cv2.resize(image, (IMAGE_SIZE, IMAGE_SIZE), interpolation = cv2.INTER_AREA)\n        X.append(preprocess_input(image))\nX = np.array(X)","aa6346a3":"y = train['DiseaseID'].values\nprint(X.shape, y.shape)","eec4e577":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=1)","7a80f938":"len(y_train)","693b1854":"import matplotlib.pyplot as plt\nimport random as ran\ni = ran.randint(0, len(y_train)-1)\nprint (i)\nplt.imshow(X_train[i])\nplt.ylabel(i)\nplt.xlabel('Tumor: {}'.format(True if y[i] == 0 else False), fontsize=20, fontfamily='serif')","7b838bb8":"from keras import models\nfrom keras import layers\nfrom tensorflow.keras.applications.vgg16 import VGG16\nnp.random.seed(3)","f56f0d20":"baseModel = VGG16(weights=\"imagenet\", include_top=False, input_tensor=layers.Input(shape=(224, 224, 3)))\nheadModel = baseModel.output\nheadModel = layers.Dropout(0.2)(headModel)\nheadModel = layers.Flatten(name=\"flatten\")(headModel)\nheadModel = layers.Dropout(0.5)(headModel)\nheadModel = layers.Dense(1, activation=\"sigmoid\")(headModel)\nmodel = models.Model(inputs=baseModel.input, outputs=headModel)","a5d64bae":"for i, layer in enumerate(baseModel.layers):\n    print (i, layer)\n    layer.trainable = False","044908b2":"from keras.utils import plot_model\nplot_model(model, show_shapes=True, show_layer_names=True)","fc5b8d53":"model.summary()","ed0218ac":"from keras import callbacks\nfilepath = '\/kaggle\/working\/model1.hdf5'\nif os.path.exists(filepath):\n    os.remove(filepath)\ncheckpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss', save_best_only=True, mode='min', verbose=1)\ncallbacks_list = [checkpoint]","5d7a1027":"from keras_preprocessing.image import ImageDataGenerator\nBATCH_SIZE = 72\ntraining_datagen = ImageDataGenerator(\n    horizontal_flip=True,\n    vertical_flip=True)","4e788aa3":"training_datagen.fit(X_train)\ntrain_generator = training_datagen.flow(X_train, y_train, batch_size=BATCH_SIZE)","7ed2b030":"from keras import metrics, optimizers\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy', metrics.AUC()])","481ad777":"history = model.fit(train_generator, batch_size=BATCH_SIZE, epochs=10, verbose=1, validation_data=(X_test, y_test), callbacks=callbacks_list)","1e036b00":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.figure()\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.show()","750077ef":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.figure()\nplt.plot(epochs, loss, 'g', label='Training loss')\nplt.plot(epochs, val_loss, 'y', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","172314e4":"model.load_weights('\/kaggle\/working\/model1.hdf5')\nscore = model.evaluate(X_test, y_test, verbose=1)\nprint(score)","a16b2514":"import random\ntest_img=cv2.imread(\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/1 no.jpeg\")\ntest_resized = cv2.resize(test_img, (IMAGE_SIZE, IMAGE_SIZE), interpolation = cv2.INTER_AREA)\ntest_resized = preprocess_input(test_resized)\ntestimg_data = np.array([test_resized])\ntestimg_data.shape","43054252":"results = model.predict(testimg_data)\nprint(results)","47feeab4":"plt.imshow(test_img)\nplt.xlabel('Prediction = {}'.format('Tumor' if results[0][0] < 0.5 else 'No-Tumor'), fontsize=20, fontfamily='serif')","f45d679c":"## Data augmentation","e7839e59":"## Define when to save","84620da5":"## Define model","d7548846":"## Train\/test split","77b244a9":"## Prepare Data","cef6672a":"## Train the model","82eabc12":"## Testing"}}