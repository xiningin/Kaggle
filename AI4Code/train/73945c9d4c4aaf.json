{"cell_type":{"c8776398":"code","975c5749":"code","445e1951":"code","1d842c0f":"code","ffc5dd2a":"code","3ce6313c":"code","79f7803a":"code","de251efe":"code","ff98b47f":"code","7d56cbce":"code","30748915":"code","d624d224":"code","b75ca0b5":"code","371298f1":"code","bb1f7cb4":"code","a7ce0c11":"code","97acce93":"code","e508f3a9":"code","b6663e54":"markdown"},"source":{"c8776398":"#import libraries\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.constraints import maxnorm\nfrom keras.optimizers import gradient_descent_v2 \nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers import Dense, Conv2D ,Flatten,Dropout,MaxPool2D, BatchNormalization\nfrom keras.utils import np_utils\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory  \nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.layers import Flatten\nimport keras\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np \nimport tensorflow as tf\nimport pandas as pd\nimport seaborn\nfrom sklearn.metrics import confusion_matrix , classification_report","975c5749":"#import our data\ntrain_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,rotation_range=10, fill_mode='nearest',\n     featurewise_center=True,\n    featurewise_std_normalization=True,\n    vertical_flip= True,\n    shear_range=0.2,\n    zoom_range=0.2,\n    brightness_range = (0.4,0.6),\n    horizontal_flip=True,validation_split=0.3)","445e1951":"train_generator = train_datagen.flow_from_directory(\n    '..\/input\/eurosatrgb\/eurosat-rgb-reduced',\n    target_size=(299, 299),\n    batch_size=32,\n    class_mode='binary',subset='training'\n  )","1d842c0f":"test_generator = train_datagen.flow_from_directory(\n     '..\/input\/eurosatrgb\/eurosat-rgb-reduced',\n    target_size=(299, 299),\n    batch_size=32,\n    class_mode='binary',subset='validation'\n  )","ffc5dd2a":"train_dataset = image_dataset_from_directory('..\/input\/eurosatrgb\/eurosat-rgb-reduced',\n                                             shuffle=True,\n                                             batch_size=32,image_size=(299,299))\nclass_name =  train_dataset.class_names\nplt.figure(figsize = (10,10))\nfor image , label in train_dataset.take(1):\n    for i in range(10) :\n        plt.subplot(2,5,i+1)\n        plt.imshow(image[i].numpy().astype(\"uint8\"))\n        plt.title(class_name[label[i]])\n        plt.axis(\"off\")","3ce6313c":"#call Xception model\nXception_model = Xception(include_top=True ,weights='imagenet')\nfor models in Xception_model.layers:\n  models.trainable= False","79f7803a":"#converting from functionally model to sequential model\n#removing the last 2 layer to get rid of output layer in VGG16\nXception_model = keras.Model(inputs=Xception_model.input, outputs=Xception_model.layers[-2].output)\nmodel = keras.Sequential()\nmodel.add(Xception_model)\n\nmodel.add(Dense(10, activation='softmax')) # output layer s\u0131n\u0131f say\u0131s\u0131 kadar \u00e7\u0131kt\u0131 olmal\u0131","de251efe":"model.compile(optimizer=\"adam\", loss=keras.losses.SparseCategoricalCrossentropy(), metrics=['accuracy'])","ff98b47f":"early = tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=5,restore_best_weights=True)","7d56cbce":"FIT =model.fit(train_generator,\n    validation_data = test_generator, \n    callbacks = [early],\n    epochs = 50)","30748915":"model.evaluate(test_generator)","d624d224":"#classes names \nclass_name = {0:\"AnnualCrop\",1:\"Forest\" , 2 : 'HerbaceousVegetation', 3: 'Highway', 4:\"Industrial\", 5:\"Pasture\", 6 : 'PermanentCrop', 7: 'Residential', 8 : 'River', 9: 'SeaLake'}","b75ca0b5":"#predict test data\ny = model.predict(test_generator)\ny =  np.argmax(y,axis= 1 )\ny ","371298f1":"#y_true and y_pred\ny_true = np.array([])\ny_pred = np.array([])\n\ni = 0\nfor data, labels in test_generator:\n  i += 1\n  y = np.argmax(model.predict(data), axis=1)\n  y_true = np.append(y_true, labels)\n  y_pred = np.append(y_pred, y)\n  \n  if i == test_generator.samples \/\/ 32 + 1:\n    break","bb1f7cb4":"cm  = confusion_matrix(y_pred,y_true)\ndf_cm = pd.DataFrame(cm, index = [i for i in range(10)],\n                  columns = [i for i in range(10)])\nseaborn .heatmap(df_cm, annot=True, annot_kws={\"size\": 16}, fmt='d')\nplt.title('confusion matrix')\nplt.xlabel('prediction')\nplt.ylabel('Actual');","a7ce0c11":"print(classification_report(y_pred, y_true))","97acce93":"#plot the result\nimport matplotlib.pyplot as plt\nacc = FIT.history['accuracy']\nval_acc = FIT.history['val_accuracy']\nloss = FIT.history['loss']\nval_loss = FIT.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n#accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n#loss plot\nplt.plot(epochs, loss, color='pink', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","e508f3a9":"model.save('Xception_model.h5')","b6663e54":"**Xception Model target size = (299,299, 3)**"}}