{"cell_type":{"a978799b":"code","c5f6ec8d":"code","64de1806":"code","9bdd4ac4":"code","afafd614":"code","94d30b1f":"code","b319a38f":"code","5bcc4bd3":"code","56cc15da":"code","86cf179e":"code","85add549":"code","8d884b74":"code","bc9f4fce":"code","0c736208":"code","2fb539b8":"code","a7c6183c":"code","29ece716":"code","0eda4e01":"code","9b3e3d51":"code","95849f75":"code","c3034053":"code","c441500f":"code","99e55636":"markdown","b57d7e83":"markdown","91f8fc85":"markdown","b34486bd":"markdown","96c0785a":"markdown","eaab9908":"markdown","dc3c7bad":"markdown","0f015fac":"markdown","c8d92656":"markdown","c1aa0eef":"markdown"},"source":{"a978799b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5f6ec8d":"import pandas as pd\ntrain = pd.read_csv(\"\/kaggle\/input\/song-popularity-prediction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/song-popularity-prediction\/test.csv\")\nsample_submit = pd.read_csv(\"\/kaggle\/input\/song-popularity-prediction\/sample_submission.csv\")","64de1806":"train.head()","9bdd4ac4":"print(\"Missing values in train: \", train.isna().sum().sum())\nprint(\"Missing values in test: \", test.isna().sum().sum())","afafd614":"train.head().style.highlight_null('yellow')","94d30b1f":"train.isnull().mean() * 100","b319a38f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"white\")","5bcc4bd3":"sns.histplot(train['song_duration_ms'])","56cc15da":"sns.pairplot(train.drop(['id', 'danceability','energy','instrumentalness','key','speechiness'], axis=1), hue='song_popularity')","86cf179e":"song_popularity = train['song_popularity'].map({0:'Not Popular', 1:'Popular'})\na = sns.countplot(data = train, x =song_popularity)","85add549":"df_heatmap = train.drop('id', axis =1)","8d884b74":"sns.heatmap(df_heatmap.corr(), linewidths = 0.5)","bc9f4fce":"import missingno as msno\nmsno.bar(train)","0c736208":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\ndef iterative_imputer(df):\n    imputer = IterativeImputer(max_iter=5)\n    data = imputer.fit_transform(df)\n    df = pd.DataFrame(data, columns=list(df.columns))\n    return df","2fb539b8":"train = iterative_imputer(train)\nprint(train.isna().sum())","a7c6183c":"X_test = iterative_imputer(test)","29ece716":"X_t = X_test.drop(['id'], axis=1)","0eda4e01":"X_train = train.drop(['id', 'song_popularity'], axis=1)\ny_train = train['song_popularity']","9b3e3d51":"from sklearn.ensemble import GradientBoostingClassifier\ngb_clf = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0).fit(X_train, y_train)","95849f75":"y_pred = gb_clf.predict(X_t)","c3034053":"gb_clf.score(X_t, y_pred)","c441500f":"X_test['song_popularity'] = y_pred\nsubmission = X_test[['id', 'song_popularity']]\nsubmission.to_csv('submission.csv', index=False)","99e55636":"# Some more features","b57d7e83":"# Let's look at the data","91f8fc85":"# Missing data","b34486bd":"# Data Cleaning","96c0785a":"# Highlight missing data","eaab9908":"# Splitting into Dependent 'X' and Independent 'y' variable","dc3c7bad":"# Histogram of song_duration_ms feature","0f015fac":"# Training the model","c8d92656":"# Heatmap of all features","c1aa0eef":"# % of null values in each feature"}}