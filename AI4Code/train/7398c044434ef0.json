{"cell_type":{"fa44df3b":"code","c4d4768d":"code","8d8c544f":"code","ed9fcb32":"code","393ec8b4":"code","254488b5":"code","6e7ab679":"code","d4084b1b":"code","fff033e9":"code","eac7c845":"code","9a75cef7":"code","52136102":"code","5f96b3dd":"code","09ee9981":"code","e6bd04e9":"code","73eb2709":"code","9a6249d1":"code","f521fe27":"code","fb4c4b14":"code","14804671":"code","3d057ab9":"code","ac859438":"code","52b7a976":"code","9d95494e":"code","34e4b0b7":"code","2c1db8cd":"code","7ec9b3a1":"code","d5089d5d":"code","4af2edb9":"code","296a4b69":"code","65a17d23":"code","7857b151":"code","75f30d5c":"code","37c5bf12":"markdown"},"source":{"fa44df3b":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor","c4d4768d":"data = pd.read_csv(\"..\/input\/now-you-are-playing-with-power\/train.csv\")\ntest = pd.read_csv(\"..\/input\/now-you-are-playing-with-power\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/now-you-are-playing-with-power\/sample_submission.csv\")","8d8c544f":"data.shape","ed9fcb32":"data.head()\n","393ec8b4":"data.columns","254488b5":"data.describe(include='object')","6e7ab679":"y = data['output_gen']\ndata = data.drop(['output_gen','obs_day'],axis = 1)","d4084b1b":"data = data.drop(['id'],axis = 1)\ntest = test.drop(['id','obs_day'],axis = 1)","fff033e9":"cat = (data.dtypes == 'object')\nobject_cols = list(cat[cat].index)","eac7c845":"print(\"Categorical variables are:\")\nprint(object_cols)","9a75cef7":"print(data.isnull().sum())","52136102":"print(test.isnull().sum())","5f96b3dd":"null_columns = data.columns[data.isnull().any()]","09ee9981":"test_null_columns = test.columns[test.isnull().any()]","e6bd04e9":"null_columns","73eb2709":"for col in null_columns:\n    data[col].fillna(value=data[col].mean(), inplace=True)\n    \nfor col in test_null_columns:\n    test[col].fillna(value=test[col].mean(), inplace=True)","9a6249d1":"print(data.isnull().sum())","f521fe27":"print(test.isnull().sum())","fb4c4b14":"corr_new_data = pd.concat([data,y],axis=1)","14804671":"features = data.columns.tolist()\ntarget = y.name","3d057ab9":"from scipy.stats import pearsonr\ncorrelations = {}\nfor f in features:\n    data_temp = corr_new_data[[f,target]]\n    x1 = data_temp[f].values\n    x2 = data_temp[target].values\n    key = f + ' vs ' + target\n    correlations[key] = pearsonr(x1,x2)[0]","ac859438":"data_correlations = pd.DataFrame(correlations, index=['Value']).T\ndata_correlations.loc[data_correlations['Value'].abs().sort_values(ascending=False).index]","52b7a976":"data = data.drop(['obs_minute'],axis = 1)","9d95494e":"test = test.drop(['obs_minute'],axis = 1)","34e4b0b7":"X = data\npoly_dict = {}\nfor feature in X.columns:\n    for p in range(2, 5):\n        X_train_poly = X\n        X_train_poly['sq'] = X_train_poly[feature] ** p\n        lr = LinearRegression()\n        lr.fit(X_train_poly, y)\n        poly_dict[lr.score(X_train_poly, y)] = [feature, p]\n    \npoly_dict[max(poly_dict.keys())]\n","2c1db8cd":"X['vap_pressure_square'] = X['vap_pressure']**2\ntest['vap_pressure_square'] = test['vap_pressure']**2","7ec9b3a1":"X.drop('sq', axis = 1, inplace = True)","d5089d5d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)","4af2edb9":"regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(X_train,y_train)","296a4b69":"test_preds = regressor.predict(X_test)","65a17d23":"rmse = np.sqrt(mean_squared_error(y_test,test_preds))\nprint(rmse)","7857b151":"test_data_preds = regressor.predict(test)","75f30d5c":"submission['output_gen'] = test_data_preds\nsubmission.to_csv('submission.csv', index=False)","37c5bf12":"# Playing with Power\n\n## Kaggle Meet Up Moscow"}}