{"cell_type":{"59861ba6":"code","68dd2c8f":"code","d3c0118b":"code","c7127b11":"code","30f051b5":"code","aa3bfd3b":"code","009a6bcf":"code","46ea0884":"code","b061e914":"code","6b4ceb55":"code","5cf04849":"code","191273cc":"code","d6e6259e":"code","36f22bbd":"code","73b8b845":"code","2c96ed15":"code","479dda09":"code","7864fec4":"code","7c73d223":"code","b3d92c0c":"code","3b480082":"code","7e50abca":"code","a2a768c0":"code","139465d0":"code","8c12b2d0":"code","7a041c81":"code","c08d488a":"code","7b9c1a16":"code","c9dc1fbe":"code","53186227":"code","4b2536c3":"code","5a9c2233":"code","2c281bf7":"code","efc599fa":"code","99743203":"code","9cd3254d":"markdown","783d4990":"markdown","d061fb64":"markdown","01ee6185":"markdown","ac2615d7":"markdown","fae769f2":"markdown","3cd1cb90":"markdown","9ecb215a":"markdown","e26be426":"markdown","768251b9":"markdown","3f177174":"markdown","aa5662c5":"markdown","32d7733f":"markdown","f3bc2710":"markdown","8b3a3e5f":"markdown","521874f4":"markdown","a46f4bd8":"markdown","22542c3f":"markdown","bb0ba1cd":"markdown","ca2e942b":"markdown","df2c07a7":"markdown"},"source":{"59861ba6":"import numpy as np   #Linear algera Library\nimport pandas as pd\nimport matplotlib.pyplot as plt  #to plot graphs\nimport seaborn as sns  #to plot graphs\nfrom sklearn.linear_model import LinearRegression   #for linear regression model\nsns.set()  #setting seaborn as default \n\nimport warnings\nwarnings.filterwarnings('ignore')","68dd2c8f":"data=pd.read_csv('..\/input\/housing-dataset\/Housing.csv')   #reads the input data\ndata.head()   #displays the first five rows","d3c0118b":"data.info()","c7127b11":"data.describe(include ='all')   #parameter include=all will display NaN values as well","30f051b5":"data.isnull().sum() # No null values","aa3bfd3b":"#first fetch all the categorical columns with Yes and NO\ncategorical =  ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']\n#write a function to change yes to 1 and no to 0\ndef binary_map(x):\n    return x.map({'yes': 1, \"no\": 0})\n\n# now replace yes and no with 1 and 0 in our dataset\ndata[categorical] = data[categorical].apply(binary_map)\n\n","009a6bcf":"data.head()","46ea0884":"table = pd.get_dummies(data['furnishingstatus'])   #add the column into table variable\ntable.head()","b061e914":"table = pd.get_dummies(data['furnishingstatus'], drop_first = True)  #recreate table but now drop the first column(furnished)\ntable.head()","6b4ceb55":"data = pd.concat([data, table], axis = 1)  #attach the other two columns to our data set\ndata.head()","5cf04849":"data.drop(['furnishingstatus'], axis = 1, inplace = True) #drop the old column from the dataset\ndata.head()","191273cc":"sns.pairplot(data)\nplt.show()","d6e6259e":"data.columns","36f22bbd":"from sklearn.model_selection import train_test_split\nnp.random.seed(0) #so data can have same values\ndf_train, df_test = train_test_split(data, train_size = 0.7, test_size = 0.3, random_state = 100)","73b8b845":"df_train.head()\n","2c96ed15":"from sklearn.preprocessing import MinMaxScaler    #to make all the numbers to the same scale\nscaler = MinMaxScaler()","479dda09":"var_to_scale = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking','price']\n#appied scale to all numerical columns(not the yes\/no and dummy columns)","7864fec4":"#apply the scaled values to our training data set\ndf_train[var_to_scale] = scaler.fit_transform(df_train[var_to_scale])  \n","7c73d223":"df_train.head()","b3d92c0c":"df_train.describe()","3b480082":"# only output price is poped out of df_Train and put into y_train\ny_train = df_train.pop('price') \nx_train = df_train","7e50abca":"y_train.head()","a2a768c0":"#using linear regression\nlm=LinearRegression()\nlm.fit(x_train,y_train)","139465d0":"lm.coef_","8c12b2d0":"#values from 0 to 1\n#0 model explain None of the variability\n#1 model explain Entire of the variability\nlm.score(x_train,y_train)","7a041c81":"var_to_scale = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking','price']","c08d488a":"df_test[var_to_scale] = scaler.fit_transform(df_test[var_to_scale])","7b9c1a16":"y_test = df_test.pop('price')\nx_test = df_test","c9dc1fbe":"#predict the output(predictions) using the test data\npredictions = lm.predict(x_test)","53186227":"from sklearn.metrics import r2_score \nr2_score(y_test, predictions)","4b2536c3":"\n#AttributeError: 'Series' object has no attribute 'flatten' --to avoid this error in the next step\ny_test.shape\ny_test_matrix = y_test.values.reshape(-1,1)\n","5a9c2233":"#load actual and predecited values side by side\ndframe=pd.DataFrame({'actual':y_test_matrix.flatten(),'Predicted':predictions.flatten()}) \n#flatten toget single axis of data (1 dimension only)","2c281bf7":"dframe.head(15)","efc599fa":"#using scatter plot compare the actual and predicted data\nfig = plt.figure()\nplt.scatter(y_test,predictions)\nplt.title('Actual versus Prediction ')\nplt.xlabel('Actual', fontsize=20)                         \nplt.ylabel('Predicted', fontsize=20)                         ","99743203":"#trying the same with a reg plot(optonal)\nsns.regplot(y_test,predictions)\nplt.title('Actual versus Prediction ')\nplt.xlabel('Actual', fontsize=20)                         \nplt.ylabel('Predicted', fontsize=20)   ","9cd3254d":"## 14. Plot Graph","783d4990":"furnished will be 00 and to avoid redudency we drop it. semi-furnished will be 10 and unfurnished will be 01","d061fb64":"## 11. Run model using Test data","01ee6185":"## 13. Compare the actual and predicted values","ac2615d7":"## 4. Check for NULL values","fae769f2":"## 3. Understand your data","3cd1cb90":"## 12. check R squared value","9ecb215a":"Dummy Variables - Now the last column(furnishingstatus) has 3 categories i.e. furnished,semi-furnished and unfurnished. We need to convert this to numbers as well","e26be426":"### a) YES\/NO categories","768251b9":"## 9. Train the model","3f177174":"## 7. Split data into Training and Testing data","aa5662c5":"## 10. Scaling Test Data: MinMaxScaler","32d7733f":"## 6. See the plots on a graph ","f3bc2710":"## 1. Import the required libraries","8b3a3e5f":"### b) Dummy variable","521874f4":"## 8. Scaling Training Data: MinMaxScaler","a46f4bd8":"## 5. Data Preparation","22542c3f":"# Predict the price of houses using Linear Regression","bb0ba1cd":"## 2. Read the input data","ca2e942b":"### Here we are trying to predict the house prices (output) based on different features. ","df2c07a7":"It is seen that there are some columns with categorical values like 'YES' or 'NO'. We need to change them to 0 and 1"}}