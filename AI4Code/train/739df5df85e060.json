{"cell_type":{"b338b530":"code","e23df7fd":"code","dc55ab0d":"code","9ed148b0":"code","7d2fe860":"code","20b4d886":"code","af48923e":"code","7af64f51":"code","d11b72b6":"code","94eb5584":"code","97761645":"code","f62a780c":"code","fff07fae":"code","83f94626":"code","a2a63a6c":"code","ccabd290":"markdown"},"source":{"b338b530":"import numpy as np \nimport pandas as pd \nimport datetime\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets","e23df7fd":"df = pd.read_csv(\"\/kaggle\/input\/screen-actors-guild-awards\/screen_actor_guild_awards.csv\")\ndf.head()","dc55ab0d":"df.shape","9ed148b0":"ensemble = df[df.category.apply(lambda x: True if 'ENSEMBLE' in x or x == 'CAST IN A MOTION PICTURE' else False)]\ndf = df[~(df.category.apply(lambda x: True if 'ENSEMBLE' in x or x == 'CAST IN A MOTION PICTURE' else False))]\nensemble = ensemble.groupby(['year','category','show'], as_index=False).first()\nensemble['full_name'] = 'ENSEMBLE'\ndf = pd.concat([df, ensemble], sort=False)","7d2fe860":"df= df.loc[(df.index != 5756) & (df.index != 5758),:].copy()\ndf['year'] = df['year'].apply(lambda x: str(x)[:4])\ndf['year'] = df['year'].astype('float64')","20b4d886":"df.year = df.year.astype('int32')","af48923e":"df['description'] = \"<br>\"+df.year.apply(lambda x: str(x)[:4]) + \": \"+ df.full_name.apply(lambda x: \"\" if pd.isnull(x) else \"(\"+x+\") \")+ df.category\n\ndf.head()","7af64f51":"df['won_desc'] = df[df['won'] == True].groupby(['year'])['description'].apply(list)\ndf['won_desc'] = df[df['won'] == True].groupby(['year'])['description'].apply(list)\n\ni = pd.crosstab(index=[df['won'], df['show']],columns=[df['won']]).reset_index()\ni['won_desc'] = df.groupby(['won','show'])['description'].apply(list).values\ni['lost_desc'] = df.groupby(['won','show'])['description'].apply(list).values\n\ni['won_desc'] = i['won_desc'].apply(lambda x: str(x).strip('[]'))\ni['lost_desc'] = i['lost_desc'].apply(lambda x: str(x).strip('[]'))\n\ntotal_wins_losses = i.groupby('show', as_index=False)[[False,True]].sum()\ntotal_wins_losses['won_desc'] = i.groupby('show')['won_desc'].max().values\ntotal_wins_losses['lost_desc'] = i.groupby('show')['lost_desc'].max().values\ntotal_wins_losses['year'] = df.groupby('show')['year'].first().values.astype('int32')\ntotal_wins_losses['nominations'] = total_wins_losses[False] + total_wins_losses[True]\n\nyears_nominated = df.groupby(['year','show'])['category'].count().reset_index()\nyears_nominated = years_nominated.groupby(['show'])['category'].count().reset_index()\nfilms = years_nominated[years_nominated.category == 1].show.values\nshows = years_nominated[~(years_nominated.category == 1)].show.values","d11b72b6":"year = widgets.IntSlider(\n    value=total_wins_losses.year.min(),\n    min=total_wins_losses.year.min(),\n    max=total_wins_losses.year.max(),\n    step=1.0,\n    description='Year:',\n    continuous_update=False\n)\n\n# dropdown box\ntextbox = widgets.Dropdown(\n    description='Film or TV Show:',\n    value='Films',\n    options=['TV Shows','Films']\n)\nshow_or_film = {'TV Shows': shows, 'Films': films}\n\n# data shown when plot is first initialised\ndf2 = total_wins_losses[(total_wins_losses.show.isin(show_or_film[textbox.value])) & \n                      (total_wins_losses.year >= year.value)].sort_values(by=[True,False], ascending=False)[:15]\n\n# assigning an empty figure widget with two traces\ntrace1 = go.Bar(x=df2.show[:15], y=df2[True], name='Won', hovertext=df2.won_desc)\ntrace2 = go.Bar(x=df2.show[:15], y=df2[False], name='Lost', hovertext=df2.lost_desc)\ng = go.FigureWidget(data=[trace1, trace2],\n                    layout=go.Layout(\n                        title=str(textbox.value +\" with most wins since \" + str(year.value)),\n                        barmode='stack'\n                    ))","94eb5584":"# updating the data whenever a widget is changed.\ndef response(change):\n    \n    df2 = total_wins_losses[(total_wins_losses.show.isin(show_or_film[textbox.value])) & \n                      (total_wins_losses.year >= year.value)].sort_values(by=[True,False], ascending=False)[:15]\n    \n    with g.batch_update():\n        g.data[0].x = df2.show\n        g.data[1].x = df2.show\n        \n        g.data[0].y = df2[True]\n        g.data[1].y = df2[False]\n        \n        g.data[0].hovertext = df2.won_desc\n        g.data[1].hovertext = df2.lost_desc\n        \n        g.layout.barmode = 'stack'\n        g.layout.xaxis.title = textbox.value\n        g.layout.title = str(textbox.value +\" with most wins since \" + str(year.value))\n\nyear.observe(response, names=\"value\")\ntextbox.observe(response, names=\"value\")","97761645":"container = widgets.HBox([year, textbox])\nwidgets.VBox([container, g])","f62a780c":"df_name = pd.read_csv(\"\/kaggle\/input\/screen-actors-guild-awards\/screen_actor_guild_awards.csv\")\n\ndf_name= df_name.loc[(df_name.year != ' ESQ.') & (df_name.index != 5757) & (df_name.index != 5758),:].copy()\ndf_name['year'] = df_name['year'].apply(lambda x: str(x)[:4])\ndf_name['year'] = df_name['year'].astype('float64')\n\ndf_name = df_name[~(df_name.full_name.isna())]\ndf_name['description'] = \"<br>\"+df_name.year.apply(lambda x: str(x)[:4]) + \": \"+ df_name.category\ndf = df_name\n\ndf['won_desc'] = df[df['won'] == True].groupby(['year'])['description'].apply(list)\ndf['won_desc'] = df[df['won'] == True].groupby(['year'])['description'].apply(list)\n\ni = pd.crosstab(index=[df['won'], df['full_name']],columns=[df['won']]).reset_index()\ni['won_desc'] = df.groupby(['won','full_name'])['description'].apply(list).values\ni['lost_desc'] = df.groupby(['won','full_name'])['description'].apply(list).values\n\ni['won_desc'] = i['won_desc'].apply(lambda x: str(x).strip('[]'))\ni['lost_desc'] = i['lost_desc'].apply(lambda x: str(x).strip('[]'))\n\ntotal_wins_losses = i.groupby('full_name', as_index=False)[[False,True]].sum()\ntotal_wins_losses['won_desc'] = i.groupby('full_name')['won_desc'].max().values\ntotal_wins_losses['lost_desc'] = i.groupby('full_name')['lost_desc'].max().values\ntotal_wins_losses['year'] = df.groupby('full_name')['year'].first().values.astype('int32')\ntotal_wins_losses['nominations'] = total_wins_losses[False] + total_wins_losses[True]\n\nyears_nominated = df.groupby(['year','full_name'])['category'].count().reset_index()\nyears_nominated = years_nominated.groupby(['full_name'])['category'].count().reset_index()\nfilms = years_nominated[years_nominated.category == 1].full_name.values\nshows = years_nominated[~(years_nominated.category == 1)].full_name.values","fff07fae":"year = widgets.IntSlider(\n    value=total_wins_losses.year.min(),\n    min=total_wins_losses.year.min(),\n    max=total_wins_losses.year.max(),\n    step=1.0,\n    description='Year:',\n    continuous_update=False\n)\n\n# data shown when plot is first initialised\ndf2 = total_wins_losses[(total_wins_losses.full_name.isin(show_or_film[textbox.value])) & \n                      (total_wins_losses.year >= year.value)].sort_values(by=[True,False], ascending=False)[:15]\n\n# assigning an empty figure widget with two traces\ntrace1 = go.Bar(x=df2.full_name[:15], y=df2[True], name='Won', hovertext=df2.won_desc)\ntrace2 = go.Bar(x=df2.full_name[:15], y=df2[False], name='Lost', hovertext=df2.lost_desc)\ng = go.FigureWidget(data=[trace1, trace2], \n                    layout=go.Layout(\n                        title=str(\"Actor with most wins since \" + str(year.value)),\n                        barmode='stack'\n                        \n                    )).update_yaxes(dtick=1)\n","83f94626":"# updating the data whenever a widget is changed.\ndef response(change):\n    \n    df2 = total_wins_losses[(total_wins_losses.year >= year.value)].sort_values(by=[True,False], ascending=False)[:15]\n    \n    with g.batch_update():\n        g.data[0].x = df2.full_name\n        g.data[1].x = df2.full_name\n        \n        g.data[0].y = df2[True]\n        g.data[1].y = df2[False]\n        \n        g.data[0].hovertext = df2.won_desc\n        g.data[1].hovertext = df2.lost_desc\n        \n        g.layout.barmode = 'stack'\n        g.layout.title = str(\"Actor with most wins since \" + str(year.value))\n\nyear.observe(response, names=\"value\")\ntextbox.observe(response, names=\"value\")","a2a63a6c":"container = widgets.HBox([year])\nwidgets.VBox([container, g])","ccabd290":"# Interactive Charts Using Plotly"}}