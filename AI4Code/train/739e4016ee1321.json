{"cell_type":{"dd303f85":"code","24fd5761":"code","9383d599":"code","485b7169":"code","afe36230":"code","4f3c2245":"code","9a59e65c":"code","68fc507a":"code","2ef579f2":"code","e1f27536":"code","fe95100d":"code","2d7b02b9":"markdown","2fa9c5f9":"markdown","4091001b":"markdown","8e9614f4":"markdown","b0843095":"markdown","f757d7dd":"markdown"},"source":{"dd303f85":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","24fd5761":"data = pd.read_csv('..\/input\/property-prices-in-tunisia\/Property Prices in Tunisia.csv')","9383d599":"data","485b7169":"data.info()","afe36230":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Encode missing values properly\n    df = df.replace(-1, np.NaN)\n    \n    # Fill missing values with column medians\n    for column in ['room_count', 'bathroom_count', 'size']:\n        df[column] = df[column].fillna(df[column].median())\n    \n    # Binary encoding\n    df['type'] = df['type'].replace({'\u00c0 Louer': 0, '\u00c0 Vendre': 1})\n    \n    # One-hot encoding\n    for column in ['category', 'city', 'region']:\n        dummies = pd.get_dummies(df[column], prefix=column)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    \n    # Drop log_price column\n    df = df.drop('log_price', axis=1)\n    \n    # Split df into X and y\n    y = df['price']\n    X = df.drop('price', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","4f3c2245":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","9a59e65c":"X_train","68fc507a":"y_train","2ef579f2":"models = {\n    \"                     Linear Regression\": LinearRegression(),\n    \" Linear Regression (L2 Regularization)\": Ridge(),\n    \" Linear Regression (L1 Regularization)\": Lasso(),\n    \"                   K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"                        Neural Network\": MLPRegressor(),\n    \"                         Decision Tree\": DecisionTreeRegressor(),\n    \"                         Random Forest\": RandomForestRegressor(),\n    \"                     Gradient Boosting\": GradientBoostingRegressor()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","e1f27536":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n    print(name + \" RMSE: {:.2f}\".format(rmse))","fe95100d":"for name, model in models.items():\n    r2 = model.score(X_test, y_test)\n    print(name + \" R^2: {:.4f}\".format(r2))","2d7b02b9":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/-S-3M7hvqrA","2fa9c5f9":"# Training","4091001b":"# Preprocessing","8e9614f4":"# Task for Today  \n\n***\n\n## Tunisian Property Price Prediction  \n\nGiven *data about properties in Tunisia*, let's try to predict the **price** of a given property.\n\nWe will use a variety of regression models to make our predictions.","b0843095":"# Results","f757d7dd":"# Getting Started"}}