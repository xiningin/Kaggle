{"cell_type":{"56d7cbbe":"code","d67c09a6":"code","eaf38854":"code","a1e17f44":"code","527850f7":"code","ef649567":"code","ef3e03b0":"code","0703dfb4":"code","fb0c3cf6":"code","dad823dc":"code","737ec0cf":"code","efce6942":"code","5db0bf39":"code","5996a34d":"code","99db10dd":"code","d1817c1c":"code","2183da4d":"code","5b1b8760":"code","3fa17b8d":"code","073dfee4":"code","d9eacb2c":"code","d9222cd2":"code","70fb67d7":"code","792c389b":"code","da742660":"code","895fe813":"code","7afb7fe3":"markdown","25d0a39c":"markdown"},"source":{"56d7cbbe":"import numpy as np \nimport pandas as pd ","d67c09a6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","eaf38854":"df= pd.read_csv('..\/input\/titanic\/train.csv')","a1e17f44":"sns.pairplot(df)","527850f7":"corr = df.corr()\ncorr","ef649567":"df.isnull().sum()","ef3e03b0":"# selecting useful features from the original dataframe.\ntraining=df.loc[:, ['PassengerId', 'Survived', 'Pclass', 'Sex',\n                 'Age', 'SibSp','Parch', 'Fare', 'Embarked' ]]","0703dfb4":"# since there are missing values in age the values that are missing is replaced with the median of age.\nmedian= training['Age'].median()\ntraining['Age'].fillna(median, inplace=True)\ntraining['Age'].describe()","fb0c3cf6":"groups = [training['Age'].between(0, 3), \n          training['Age'].between(4, 9), \n          training['Age'].between(10, 18),\n          training['Age'].between(19, 59),\n          training['Age'].between(60, 80)]\nvalues = [1, 2, 3, 4, 5]\ntraining['AgeCategory'] = np.select(groups, values, 0)\ntraining","dad823dc":"training= training.drop(['Age'], axis=1)","737ec0cf":"# sex is given categorical values\nd = {'male': 1, 'female': 0}\ntraining['Sex'] = training['Sex'].map(d)\n","efce6942":"training['Embarked'].value_counts()","5db0bf39":"# the missing values are filled ith S since S is the most repeated value\ntraining['Embarked'].fillna(value='S', inplace=True)","5996a34d":"#embark is given categorical values\nd = {'Q': 1, 'C': 2, 'S': 3}\ntraining['Embarked'] = training['Embarked'].map(d)\ntraining.head()","99db10dd":"from sklearn.model_selection import train_test_split\n\npredictors = training.drop(['Survived', 'PassengerId'], axis=1)\ntarget = training[\"Survived\"]\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.25, random_state = 0)","d1817c1c":"testing= pd.read_csv('..\/input\/titanic\/test.csv')","2183da4d":"\ntesting=testing.loc[:, ['PassengerId', 'Pclass', 'Sex',\n                  'Age', 'SibSp','Parch', 'Fare',\n                  'Embarked' ]]","5b1b8760":"age_median=testing['Age'].median()\ntesting['Age'].fillna(value= age_median, inplace=True)","3fa17b8d":"groups = [testing['Age'].between(0, 3), \n          testing['Age'].between(4, 9), \n          testing['Age'].between(10, 18),\n          testing['Age'].between(19, 59),\n          testing['Age'].between(60, 76)]\n \n\nvalues = [1, 2, 3, 4, 5]\n\ntesting['AgeCategory'] = np.select(groups, values, 0)\n","073dfee4":"testing=testing.drop(['Age'], axis=1)","d9eacb2c":"fare_median=testing['Fare'].median()\ntesting['Fare'].fillna(value= fare_median, inplace=True)","d9222cd2":"# converting the values from sex variable into 1 an 0\nd = {'male': 1, 'female': 0}\ntesting['Sex'] = testing['Sex'].map(d)\n","70fb67d7":"d={'Q':1, 'C':2, 'S':3}\ntesting['Embarked']= testing['Embarked'].map(d)","792c389b":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.ensemble import GradientBoostingClassifier\nparam_grid={'n_estimators':[100], \n            'learning_rate': [0.1],\n            'max_depth':[4], \n            'min_samples_leaf':[3], \n            'max_features':[1.0] } \nn_jobs=4\nestimator = GradientBoostingClassifier() \nclassifier = GridSearchCV(estimator=estimator, cv=5, param_grid=param_grid, n_jobs=n_jobs)\ngbc = classifier.fit(x_train, y_train)\ny_pred = gbc.predict(x_val)\ngbc_cv = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(gbc_cv)","da742660":"predictions_gbc= gbc.predict(testing.drop('PassengerId',axis=1))","895fe813":"#saving predictions in CSV\nids = testing[\"PassengerId\"]\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions_gbc})\noutput.to_csv('kaggle_submit_gbc', index=False)","7afb7fe3":"# PREPROCESSING OF DATA","25d0a39c":"since classification models are used the input given to the models should be categorical hence categories are allocated to certain values that are used."}}