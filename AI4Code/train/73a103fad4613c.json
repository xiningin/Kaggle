{"cell_type":{"4fd1cdbe":"code","11caa061":"code","e534d682":"code","3509fa4b":"code","ae5ca84f":"code","c5c2355f":"code","0b1e03f8":"code","092be4ad":"code","a784f548":"code","9b65f2f0":"code","82472617":"code","5475f015":"code","84195009":"code","7e0f2f7a":"code","0b1b3645":"code","4ed2edf4":"code","cbebf078":"code","bd56a032":"code","f67b7061":"code","3612a54f":"code","03b78f8d":"code","fd270ca7":"code","408dfe63":"code","1110b9eb":"code","42e25e6e":"code","601a42c3":"code","69c4cb39":"code","488f7384":"markdown","e3a1f096":"markdown","e2defa93":"markdown","98b375ee":"markdown","b0d4c709":"markdown","6814067a":"markdown","c1d4a615":"markdown","04a8c5d5":"markdown","842e20da":"markdown","a58a2680":"markdown","a576bb38":"markdown","3027f813":"markdown","34268bf2":"markdown","bc37b2f5":"markdown","283bd62c":"markdown","4a093fd8":"markdown","78fb45de":"markdown","d6f3cb18":"markdown","53c095b0":"markdown","958982e5":"markdown","b06fadda":"markdown","356b1d23":"markdown","539f80e8":"markdown","a370fefb":"markdown","0e11f2d0":"markdown","78dad7bf":"markdown","222a10b7":"markdown","e756dee7":"markdown","b1a11c9e":"markdown","d9fe2e28":"markdown","df1e5531":"markdown","a82cf1ac":"markdown","b58dd4e5":"markdown"},"source":{"4fd1cdbe":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd","11caa061":"import numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport matplotlib.ticker as mtick\n","e534d682":"geolocation = pd.read_csv('..\/input\/geolocation_olist_public_dataset.csv')\ngeolocation.head()","3509fa4b":"public_classified = pd.read_csv('..\/input\/olist_classified_public_dataset.csv')\npublic_classified.head()","ae5ca84f":"# Columns of dataset\npublic_classified.columns","c5c2355f":"public_dataset = pd.read_csv('..\/input\/olist_public_dataset_v2.csv')\npublic_dataset.head()","0b1e03f8":"# Dataset Columns\npublic_dataset.columns","092be4ad":"customers = pd.read_csv('..\/input\/olist_public_dataset_v2_customers.csv')\ncustomers.head()","a784f548":"payments = pd.read_csv('..\/input\/olist_public_dataset_v2_payments.csv')\npayments.head()","9b65f2f0":"public_classified.shape","82472617":"types_class = public_classified.groupby('most_voted_class').sum()\ntypes = types_class[['votes_before_estimate',\n             'votes_delayed',\n             'votes_low_quality',\n             'votes_return',\n             'votes_not_as_anounced',\n             'votes_partial_delivery',\n             'votes_other_delivery',\n             'votes_other_order',\n             'votes_satisfied']]","5475f015":"sns.set()\ntypes.plot(kind='bar', stacked=True, figsize=(12,6))","84195009":"type_class_city = public_classified.groupby(['most_voted_class']).agg({'most_voted_class':'count'})\ntype_class_city.plot.pie(subplots=True, figsize=(8,8), startangle=90, autopct='%.2f')","7e0f2f7a":"k = public_classified.groupby(['customer_state','most_voted_class'])['most_voted_class']\\\n                        .size().groupby(level=0)\\\n                        .apply(lambda x: 100 * x \/ x.sum())\\\n                        .unstack()\nk.fillna(0)\n\nax = k.plot(kind='bar',stacked=True, figsize=(20,10), title='% to Type of Response')\npl = ax.legend(bbox_to_anchor=(1.2, 0.5))\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.1f} %'.format(height), (p.get_x()+.15*width, p.get_y()+.4*height))\n\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n","0b1b3645":"invoice_state = public_dataset.groupby(['customer_state']).sum()\ninvoice_state['order_products_value'].plot.bar(figsize=(16,8))","4ed2edf4":"invoice_state = public_dataset.groupby(['customer_state']).count()\ninvoice_state['order_products_value'].plot.bar(figsize=(16,8))","cbebf078":"invoice_state = public_dataset.groupby(['customer_state']).median()\ninvoice_state['order_products_value'].plot.bar(figsize=(16,8))","bd56a032":"invoice_state = public_dataset.groupby(['customer_state']).median()\n\n#invoice_state['order_products_value'].plot.pie(subplots=True, figsize=(8,8), startangle=90, autopct='%.2f')\ninvoice_state['order_freight_value'].plot.bar(figsize=(16,8))","f67b7061":"type_payments = payments.groupby(['payment_type']).agg({'payment_type':'count'})\ntype_payments.plot.pie(subplots=True, figsize=(8,8), startangle=90, autopct='%.2f')","3612a54f":"merge_payments = pd.merge(payments, public_dataset, on=['order_id'])","03b78f8d":"\nresult_payments = merge_payments.groupby(['customer_state']).median()\n\n#invoice_state['order_products_value'].plot.pie(subplots=True, figsize=(8,8), startangle=90, autopct='%.2f')\nresult_payments['installments'].plot.bar(figsize=(16,8))","fd270ca7":"k = merge_payments.groupby(['customer_state','payment_type'])['value'].median().unstack().fillna(0)\n\nax = k.plot(kind='bar', stacked=True, figsize=(20,10))\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}'.format(height), (p.get_x()+.15*width, p.get_y()+.4*height))\n","408dfe63":"\nk = merge_payments.groupby(['customer_state','payment_type'])['payment_type']\\\n                        .size().groupby(level=0)\\\n                        .apply(lambda x: 100 * x \/ x.sum())\\\n                        .unstack()\nk.fillna(0)\n\nax = k.plot(kind='bar',stacked=True, figsize=(20,10))\npl = ax.legend(bbox_to_anchor=(1.2, 0.5))\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.1f} %'.format(height), (p.get_x()+.15*width, p.get_y()+.4*height))\n\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n","1110b9eb":"order_p = pd.to_datetime(merge_payments['order_purchase_timestamp'], errors='coerce')\norder_a = pd.to_datetime(merge_payments['order_aproved_at'], errors='coerce')\norder_estimated_delivery = pd.to_datetime(merge_payments['order_estimated_delivery_date'], errors='coerce')\norder_delivery = pd.to_datetime(merge_payments['order_delivered_customer_date'], errors='coerce')\n\n# difference time in payment (in hours)\ndifference_time_payment = (order_a - order_p).astype('timedelta64[m]')\nmerge_payments['difference_time_payment'] = difference_time_payment\n\n# difference time in estimetad delivery (in days)\ndifference_time_delivery = (order_delivery - order_estimated_delivery).astype('timedelta64[h]')\/24\nmerge_payments['difference_time_delivery'] = difference_time_delivery\n\n# difference time in aprovad to delivery\ntime_to_delivery = (order_delivery - order_a ).astype('timedelta64[h]')\/24\nmerge_payments['time_to_delivery'] = time_to_delivery","42e25e6e":"k = merge_payments.groupby(['payment_type'])['difference_time_payment'].median().fillna(0)\n\nax = k.plot(kind='bar', stacked=True, figsize=(20,10))\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}'.format(height), (p.get_x()+.15*width, p.get_y()+.4*height))\n","601a42c3":"k = merge_payments.groupby(['customer_state'])['difference_time_delivery'].median().fillna(0)\n\nax = k.plot(kind='bar', stacked=True, figsize=(20,10))\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}'.format(height), (p.get_x()+.15*width, p.get_y()+.4*height))","69c4cb39":"k = merge_payments.groupby(['customer_state'])['time_to_delivery'].median().fillna(0)\n\nax = k.plot(kind='bar', stacked=True, figsize=(20,10))\n\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate('{:.2f}'.format(height), (p.get_x()+.15*width, p.get_y()+.4*height))","488f7384":"#### Median values by type of payment and by state","e3a1f096":"This was an initial analysis of the data, as future work, it would be important to implement other intersections of important information such as the seasonal nature of sales, either total and \/ or state.","e2defa93":"### 2.5 Analysis of delivery times, payment confirmation and delays","98b375ee":"This kernel has the objective of making an exploratory analysis of the datasets made available by Olist under the name of Brazilian E-Commerce Public Dataset by Olist.","b0d4c709":"### 2.4 Payment Analysis","6814067a":"#### 1.2 Loading Datasets","c1d4a615":"#### 1.1 Importing libraries","04a8c5d5":"### 2.3 Sales Analysis","842e20da":"## 1. Introduction","a58a2680":"#### Payment type by state","a576bb38":"#### Median Payment Confirmation Time (in minutes)","3027f813":"Here are the analyzes of the classification of the customers as to the quality of service provided. Basically they are divided into three classes called: Delivery Problems, Quality Problems and Satisfied with the request.<br>\n\nRegarding the problems with the deliveries we can highlight the complaints for partial deliveries and for delay in delivery.<br>\n\nThus, when analyzing the problems with quality, it turns out that the main complaint is how much the difference with the advertised product.<br>\n\nFinally, we have to customer satisfaction is around 58%, even considering the customers who responded as satisfied even before the delivery of the product.","34268bf2":"#### Median Sales by State","bc37b2f5":"#### Median of expected delivery date x actual delivery date","283bd62c":"## 2. Data Exploration","4a093fd8":"#### Total Sales by state","78fb45de":"<b>Unclassified Orders Dataset<\/b>","d6f3cb18":"#### Difference between the times","53c095b0":"## 3. Conclusion","958982e5":"#### Median Freight by State","b06fadda":"<b>Geolocation<\/b><br>\nAccording to the dataset description: \"This dataset includes random latitudes and lengths from a given zip prefix code.\"","356b1d23":"#### Percentage by type of payment","539f80e8":"## See you soon!","a370fefb":"#### Merge the payment with the sales dataset","0e11f2d0":"<b> Customer Dataset <\/b>","78dad7bf":"# Brazilian Ecommerce Analysis","222a10b7":"#### Type of Problems by State","e756dee7":"<b>Classified Public Dataset <\/b><br>\nAccording to the dataset description:<br> \n\"This dataset was classified by three independent analysts. Each analyst voted for a class that he thinks a comment should belong to. After that we have classified a comment by choosing the most voted class.\n\n<b>votes_before_estimate:<\/b> votes received for delivery before the estimated date messages.<br>\n<b>votes_delayed:<\/b> votes received for delayed complaints.<br>\n<b>votes_low_quality:<\/b> votes received for low product quality complaints.<br>\n<b>votes_return:<\/b> votes received for wishing to return product to seller complaints.<br>\n<b>votes_not_as_anounced:<\/b> votes received for product not as announced complaints.<br>\n<b>votes_partial_delivery:<\/b> votes received for partial delivery (not all products delivered) complaints.<br>\n<b>votes_other_delivery:<\/b> votes received for other delivery related complaints.<br>\n<b>votes_other_order:<\/b> votes received for other order related complaints.<br>\n<b>votes_satisfied:<\/b> votes received for customer satisfied messages.<br>\n<b>most_voted_subclass:<\/b> selects the most voted subclass for that comment<br>\n<b>most_voted_class:<\/b> aggregate subclasses into 3 class (satisfied, delivery complaints and quality complaints)<br>","b1a11c9e":"#### Median Time to Delivery (in days) by State","d9fe2e28":"### 2.1 Public Classified Analysis","df1e5531":"<b> Payments Dataset <\/b>","a82cf1ac":"#### Sales Amount by State","b58dd4e5":"#### Median Installments by State"}}