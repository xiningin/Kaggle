{"cell_type":{"df3169ed":"code","b9406be2":"code","75254746":"code","ff1ac347":"code","420b2daf":"code","defcdb3c":"code","2647ed39":"code","214d1510":"code","9c595b34":"code","f9d655e2":"code","fdbc69b2":"code","2090144a":"code","d0b13d3f":"code","59ab2409":"code","87b879a9":"code","f8508951":"code","5a0ba73b":"code","9630a113":"code","2cd9427e":"code","786af6f3":"code","ece98cc3":"code","2a576ed9":"code","ab673f9c":"code","bc734714":"code","ddde09d2":"code","8da8059b":"code","f715fe0e":"code","57893a1d":"code","a38e47f6":"code","ef6ef6a3":"code","339eb2dc":"code","8784b2d5":"code","0c056e21":"code","5969bdac":"code","01ba6656":"code","847cd702":"code","30f21ace":"code","4a63b30f":"code","d0874377":"code","72ec6156":"code","c831001c":"code","481bed62":"code","3d96fc5d":"code","cdc41aaa":"code","755fde9a":"code","5eb87d9a":"code","1c9531fb":"code","80f5cc91":"code","d3886e4f":"code","b6f4425c":"code","69fd682e":"code","4b3953b2":"code","8e4e337f":"code","5647aca7":"code","5ea2fa07":"code","c833b44f":"code","6205fa99":"code","44e873f8":"code","97fc7a36":"code","b7198aec":"code","cdd1dc84":"code","52418ac8":"code","f8f4b7aa":"code","53a2deb0":"code","ddaa5d44":"code","ac6a1c30":"code","d82c3b8b":"code","e1e2848d":"code","3e1fb784":"code","6364381c":"code","59c1dcd7":"code","22a17c93":"code","964d730d":"code","4ffad3fa":"code","843f8c64":"code","1660601c":"code","05a81220":"code","f0416438":"markdown","a93e94fc":"markdown","4a5b4407":"markdown","2c5a17d0":"markdown","dfb6633b":"markdown","9fc73f51":"markdown","b95ee9d6":"markdown","fd4774ea":"markdown","5b1e69e2":"markdown","a92f677d":"markdown","2535328e":"markdown","e249a146":"markdown","5a1fcc4c":"markdown","3d21b2fd":"markdown","4552476f":"markdown","e036baa4":"markdown","88fa9008":"markdown","e4af515c":"markdown","873e5a43":"markdown","c4859159":"markdown"},"source":{"df3169ed":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno","b9406be2":"from warnings import filterwarnings\nfilterwarnings('ignore')","75254746":"data = pd.read_csv(r'..\/input\/student-grade-prediction\/student-mat.csv')","ff1ac347":"data.head().transpose()","420b2daf":"cardinality = {'columns' : data.columns,\n               'cardinal' : []}","defcdb3c":"for i in cardinality['columns']:\n    cardinality['cardinal'].append(data[i].nunique())","2647ed39":"len(data)","214d1510":"missingno.matrix(data)","9c595b34":"plt.figure(figsize = (10,10))\ndata['G3'].value_counts().sort_values().plot(kind = 'barh', width = 0.8, color = sns.color_palette(\"RdBu\", 40))","f9d655e2":"b = sns.countplot(data['G3'])\nb.set_xlabel('Final Grade')\nb.set_ylabel('Count')","fdbc69b2":"corr = data.corr()","2090144a":"plt.figure(figsize=(12,12))\nsns.heatmap(corr, cmap = 'coolwarm', annot = True)","d0b13d3f":"sns.distplot(data['age'], kde= False, color = 'r')","59ab2409":"sns.kdeplot(data['age'], shade = True, color = 'r')","87b879a9":"plt.figure(figsize = (7,5))\nsns.countplot(data['age'], hue = data['sex'])","f8508951":"data['sex'].unique()","5a0ba73b":"sns.kdeplot(data.loc[data['sex'] == 'F', 'G3'], label='Female', shade = True)\nsns.kdeplot(data.loc[data['sex'] == 'M', 'G3'], label='Male', shade = True)\nplt.title('Does gender affect your graders?', fontsize = 20)\nplt.show()","9630a113":"sns.kdeplot(data.loc[data['romantic'] == 'yes', 'G3'], label='Relationship', shade = True)\nsns.kdeplot(data.loc[data['romantic'] == 'no', 'G3'], label='Single', shade = True)\nplt.title('Does relationship affect studies?', fontsize = 20)\nplt.show()","2cd9427e":"sns.kdeplot(data.loc[data['address'] == 'U', 'G3'], label='Urban', shade = True)\nsns.kdeplot(data.loc[data['address'] == 'R', 'G3'], label='Rural', shade = True)\nplt.title('Do urban students score higher than rural students?', fontsize = 20)\nplt.xlabel('Grade', fontsize = 20);\nplt.ylabel('Density', fontsize = 20)\nplt.show()","786af6f3":"sns.kdeplot(data.loc[data['address'] == 'U', 'age'], label='Urban', shade = True)\nsns.kdeplot(data.loc[data['address'] == 'R', 'age'], label='Rural', shade = True)\nplt.title('Do urban students attend more years of school?', fontsize = 20)\nplt.show()","ece98cc3":"copy_set = data.copy()","2a576ed9":"from sklearn.preprocessing import LabelEncoder, LabelBinarizer","ab673f9c":"binary_cols = []\n\nfor col in data.columns:\n    if data[col].nunique()==2:\n        binary_cols.append(col)","bc734714":"for i in binary_cols:\n    data[i] = LabelBinarizer().fit_transform(data[i])","ddde09d2":"data.head().transpose()","8da8059b":"categorical_cols = [column for column in data.columns if (data[column].nunique()<=30)]","f715fe0e":"str_col = [col for col in categorical_cols if data[col].dtype =='O']","57893a1d":"str_col","a38e47f6":"for i in str_col:\n    print(i, ' :', data[i].unique())","ef6ef6a3":"data_ = data.copy()","339eb2dc":"for i in str_col:\n    print(i)\n    data = pd.concat([data.drop(i, axis = 1), pd.get_dummies(data[i], prefix=i, drop_first = True)], axis = 1)","8784b2d5":"data['pass'] = data['G3'].copy()","0c056e21":"def classify(x):\n    if x >= 10:\n        return 1\n    else:\n        return 0\n\ndata['pass'] = data['pass'].apply(classify)","5969bdac":"data_clf = data.drop(['G1', 'G2', 'G3'], axis = 1)","01ba6656":"from sklearn.model_selection import train_test_split","847cd702":"X_train, X_test, y_train, y_test = train_test_split(data_clf.drop('pass', 1), data_clf['pass'], random_state = 42, test_size = 0.2)","30f21ace":"from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.svm  import SVC\nimport xgboost as xgb\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB\nfrom sklearn.linear_model import LogisticRegression","4a63b30f":"scores_df = {'name': [],\n             'train_score': [],\n             'test_score' : []}","d0874377":"def base_score(model_info):\n    \n    model, name = model_info\n    model.fit(X_train, y_train)\n    scores_df['name'].append(name)\n    scores_df['train_score'].append( model.score(X_train, y_train))\n    scores_df['test_score'].append(model.score(X_test, y_test))","72ec6156":"models = [(RandomForestClassifier(),'rf'), (GradientBoostingClassifier(), 'gbc'), (LogisticRegression(), 'lr'),\n          (BernoulliNB(), 'naive_b'), (GaussianNB(), 'naive_g'), (SVC(), 'svc'), (xgb.XGBClassifier(), 'xgb')]","c831001c":"for i in models:\n    base_score(i)","481bed62":"scores_df = pd.DataFrame(scores_df)\nscores_df.set_index('name', inplace = True)\nscores_df","3d96fc5d":"from sklearn.metrics import classification_report, accuracy_score","cdc41aaa":"from sklearn.model_selection import RandomizedSearchCV","755fde9a":"model_rf = RandomForestClassifier()\nmodel_gbc = GradientBoostingClassifier()\nmodel_xgb = xgb.XGBClassifier()\nmodel_lr = LogisticRegression()","5eb87d9a":"params = {\n    model_rf: \n    {\n        'n_estimators' : np.arange(10,100,10),\n        'max_features' : [0.2, 0.5, 1],\n        'max_depth' : [2,3,5,7],\n    },\n    model_gbc: \n    {\n        'n_estimators' : np.arange(10,100,10),\n        'learning_rate' : np.arange(0.01, 0.05, 1),\n        'subsample' : [0.2, 0.5, 0.8, 1],\n        'max_depth' : [2, 3, 5]\n        \n    },\n    model_xgb:\n    {\n        'max_depth' : [2, 3, 5],\n        'subsample' : [0.2, 0.5, 1],\n        'n_estimators' : np.arange(40,150,10),\n        'learning_rate': np.arange(0.01, 0.5, 1),\n    },\n    model_lr:\n    {\n        'penalty': ['l2', 'l1'],\n        'C': np.arange(0.1, 1, 0.1),\n    }\n         }","1c9531fb":"best_estimators = []","80f5cc91":"for model in params.keys():\n    clf = RandomizedSearchCV(model, params[model], cv = 3, n_jobs = -1, random_state = 42)\n    search = clf.fit(X_train, y_train)\n    best_estimators.append(search.best_estimator_)","d3886e4f":"def scoring(estimator):\n    estimator.fit(X_train, y_train)\n    print(estimator.score(X_test, y_test))\n    \nfor estimator in best_estimators:\n    print(estimator)\n    scoring(estimator)","b6f4425c":"model_rf = RandomForestClassifier(max_depth=5, max_features=0.5, n_estimators=50)","69fd682e":"model_lr = LogisticRegression(C=0.1)","4b3953b2":"model_xgb = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n                              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n                              importance_type='gain', interaction_constraints='',\n                              learning_rate=0.01, max_delta_step=0, max_depth=5,\n                              min_child_weight=1, monotone_constraints='()',\n                              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n                              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.2,\n                              tree_method='exact', validate_parameters=1, verbosity=None)","8e4e337f":"model_rf.fit(X_train, y_train)\nmodel_xgb.fit(X_train, y_train)\nmodel_lr.fit(X_train, y_train)","5647aca7":"def Voting(data):\n    \n    preds_1 = np.array(model_lr.predict(data))\n    preds_2 = np.array(model_xgb.predict(data))\n    preds_3 = np.array(model_rf.predict(data))\n    \n    pred = preds_1 + preds_2 + preds_3\n    prediction = []\n    \n    for i in pred:\n        if i<=1.5:\n            prediction.append(0)\n        elif i>=1.5:\n            prediction.append(1)\n    \n    return np.array(prediction)","5ea2fa07":"preds = Voting(X_test)","c833b44f":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, preds)","6205fa99":"rf_imps = model_rf.feature_importances_","44e873f8":"xgb_imps = model_xgb.feature_importances_","97fc7a36":"cols = X_train.columns","b7198aec":"df = {'columns' : cols,\n      'rf_imp': rf_imps,\n      'xgb_imps': xgb_imps}","cdd1dc84":"df = pd.DataFrame(df)","52418ac8":"df['mean_importance'] = (df['rf_imp'] + df['xgb_imps'])\/2","f8f4b7aa":"df = df.sort_values(by=['mean_importance'], ascending = False)","53a2deb0":"df_copy = df.copy()","ddaa5d44":"num_cols = 15","ac6a1c30":"df = df_copy.copy()","d82c3b8b":"df = df.head(num_cols)","e1e2848d":"df.shape","3e1fb784":"columns = df['columns']","6364381c":"X_train_2 = X_train[columns]","59c1dcd7":"X_test_2 = X_test[columns]","22a17c93":"model_rf = RandomForestClassifier(max_depth=5, max_features=0.5, n_estimators=50)","964d730d":"model_lr = LogisticRegression(C=0.1)","4ffad3fa":"model_xgb = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n                              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n                              importance_type='gain', interaction_constraints='',\n                              learning_rate=0.01, max_delta_step=0, max_depth=5,\n                              min_child_weight=1, monotone_constraints='()',\n                              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n                              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.2,\n                              tree_method='exact', validate_parameters=1, verbosity=None)","843f8c64":"X_train_2.shape","1660601c":"model_rf.fit(X_train_2, y_train)\nmodel_xgb.fit(X_train_2, y_train)\nmodel_lr.fit(X_train_2, y_train)","05a81220":"preds = Voting(X_test_2)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, preds)","f0416438":"#### Corelation Matrix","a93e94fc":"### ENSEMBLE","4a5b4407":"Lets see relation between sex and grades","2c5a17d0":"### LABEL ENCODING:\n","dfb6633b":"### EDA","9fc73f51":"### HyperParameter Optimization :","b95ee9d6":"This is close enough to the accuracy we got with 39 features","fd4774ea":"NO MISSING VALUES !","5b1e69e2":"### MODEL INTERPRETATION :","a92f677d":"The ensemble model works better than each of the induvidual classifiers!!","2535328e":"### Classification - \n    - If the G3 score is greater than 10, the student has passed else the student has failed","e249a146":"Lets take only the 18 most important features and see if our model performs better","5a1fcc4c":"Lets see how relationships affect grades","3d21b2fd":"there seems to be an unusually high number of 0's, this could mean NaN in this case but as we saw before there were 0 null values thus lets ignore this","4552476f":"Lets see the Distribution of Age Variable, and its relation with gender","e036baa4":"We can one hot encode these features","88fa9008":"### MOST IMPORTANT FEATURES IN DETERMINING IF A STUDENT PASSES ARE: \n    - 'failures', 'higher', 'absences', 'goout', 'age', 'schoolsup', 'Walc',\n    - 'Medu', 'Fjob_teacher', 'studytime', 'traveltime', 'reason_reputation',\n    - 'freetime', 'Dalc', 'Mjob_services'","e4af515c":"Thus we can conclude that Logistic Regression performs the best amongst the given","873e5a43":"MISSING VALUES","c4859159":"1. Dependent Variable"}}