{"cell_type":{"17b27252":"code","b1b6a9ec":"code","499d2c12":"code","0d2e4d69":"code","efbe4cd8":"code","f5d11b40":"code","6fe322a0":"code","1a969f5e":"code","495c6275":"code","1ade8ca2":"code","bfb6a303":"code","370356f1":"code","b46a588f":"code","47476e24":"code","db759e82":"code","1a9f0cfc":"code","d81d7f66":"code","94151d9a":"code","88ef9bf5":"code","ca8de65c":"code","38331727":"code","e6421be0":"code","ade6a3e7":"code","f4ea9665":"code","e800725e":"code","2ccaf6a3":"code","981aa3ca":"code","7e7f6625":"code","513aa0ca":"code","ac798669":"code","0105c208":"code","e8bfae30":"code","dcdef2b8":"code","70a35fe5":"code","0350403f":"code","b72525d3":"code","15af05f2":"code","6b9dd6a5":"code","d4d44ab6":"code","c190dba9":"code","27c1b43f":"code","51bc4dad":"markdown","938683be":"markdown","67a5a5a9":"markdown","bb16fb1c":"markdown","8b7bba90":"markdown","5e15f4e2":"markdown","452490c9":"markdown","57c62b8d":"markdown"},"source":{"17b27252":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1b6a9ec":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head()","499d2c12":"df.info()","0d2e4d69":"df.isnull().sum()","efbe4cd8":"df.smoking_status.value_counts()","f5d11b40":"df['smoking_status'] = df['smoking_status'].replace('Unknown','never smoked')","6fe322a0":"df.work_type.value_counts()","1a969f5e":"df.columns","495c6275":"df.gender.value_counts()","1ade8ca2":"df['gender'] = df['gender'].replace('Other','Male')","bfb6a303":"plt.subplots(figsize=(18,12))\nsns.scatterplot(x='avg_glucose_level', y ='bmi',data=df,hue='stroke')","370356f1":"df.plot(kind=\"scatter\", x=\"avg_glucose_level\", y=\"bmi\",alpha=0.7, figsize=(18,12),\nc=\"age\", cmap=plt.get_cmap(\"jet\"), colorbar=True)\nplt.xlabel('avg_glucose_level')\nplt.legend()","b46a588f":"# plt.subplots(figsize=(18,12))\nsns.set(rc={'figure.figsize':(18,12)})\n\nsns.displot(df, x=\"avg_glucose_level\", y=\"bmi\", hue=\"stroke\", kind=\"kde\",col='gender')","47476e24":"df_plt= df[['age','avg_glucose_level','bmi','stroke']]\n# df_plt\nplt.figure(figsize=(12,12))\ndata = pd.melt(df_plt,id_vars=\"stroke\",\n                    var_name=\"features\",\n                    value_name='value')\n# data\nsns.violinplot(x= 'features', y= 'value',hue= 'stroke', data = data,split=True, inner=\"quart\")\nplt.xticks(rotation = 90)","db759e82":"sns.catplot(x=\"hypertension\", y=\"bmi\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"heart_disease\", y=\"bmi\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"work_type\", y=\"bmi\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")","1a9f0cfc":"df.smoking_status.unique()","d81d7f66":"sns.catplot(x=\"hypertension\", y=\"avg_glucose_level\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"heart_disease\", y=\"avg_glucose_level\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"work_type\", y=\"avg_glucose_level\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")","94151d9a":"sns.catplot(x=\"Residence_type\", y=\"bmi\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"work_type\", y=\"avg_glucose_level\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"gender\", y=\"avg_glucose_level\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")\nsns.catplot(x=\"work_type\", y=\"bmi\", data=df,kind='violin',hue='stroke',col='smoking_status',split=True, inner=\"quart\")","88ef9bf5":"df.bmi.fillna(np.mean(df.bmi),inplace=True)\ndf.info()","ca8de65c":"df.drop('id',axis=1,inplace=True)\ndf.head()","38331727":"df_one = pd.get_dummies(df,columns=['Residence_type','work_type','smoking_status','gender'])\ndf_one.head()","e6421be0":"df_one['ever_married'] = df_one.ever_married.replace({'Yes': 1,'No':0})\ndf_one","ade6a3e7":"f, axs = plt.subplots(1,3,figsize=(15,8))\nplt.subplot(1, 3, 1)\nplt.hist(df_one.age)\nplt.xlabel('age')\nplt.subplot(1, 3, 2)\nplt.hist(df_one.bmi)\nplt.xlabel('bmi')\nplt.subplot(1, 3, 3)\nplt.hist(df_one.avg_glucose_level)\nplt.xlabel('avg_glucose_level')","f4ea9665":"df_one.head()","e800725e":"dummy = df_one.copy()","2ccaf6a3":"from sklearn import preprocessing\ndf_trans = df_one[['avg_glucose_level','bmi','age']]\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(df_trans)\ndf_normalized = pd.DataFrame(x_scaled)\ndf_normalized.rename(columns={0: \"avg_glucose_level\", 1: \"bmi\", 2: 'age'},inplace=True)\ndf_normalized.head()","981aa3ca":"f, axs = plt.subplots(1,3,figsize=(15,8))\nplt.subplot(1, 3, 1)\nplt.hist(df_normalized.age)\nplt.xlabel('age')\nplt.subplot(1, 3, 2)\nplt.hist(df_normalized.bmi)\nplt.xlabel('bmi')\nplt.subplot(1, 3, 3)\nplt.hist(df_normalized.avg_glucose_level)\nplt.xlabel('avg_glucose_level')","7e7f6625":"df_normalized.describe()","513aa0ca":"dummy.drop('stroke',axis=1,inplace=True)\ndummy.head()\n","ac798669":"df_one.drop(['avg_glucose_level','bmi','age'],axis=1,inplace=True)\ndf_one.head()","0105c208":"X = pd.concat([df_one,df_normalized],axis=1)\ny= X[['stroke']]\nX.drop('stroke',axis=1)\nX.head()","e8bfae30":"y","dcdef2b8":"y.value_counts()","70a35fe5":"from sklearn.model_selection import train_test_split\n\n# split data train 70 % and test 30 %\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","0350403f":"y_test.value_counts()","b72525d3":"from sklearn.ensemble import RandomForestClassifier \n# using regression to get predicted data \nrf = RandomForestClassifier()#n_estimators=40, max_depth=7) \nrf.fit(x_train, y_train)\ny_pred = rf.predict(x_test)\n","15af05f2":"from sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nac = accuracy_score(y_test,y_pred)\nprint('Accuracy is: ',ac)\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True,fmt=\"d\")","6b9dd6a5":"from sklearn.metrics import precision_score, recall_score, f1_score\n\nrecall_score(y_test, rf.predict(x_test))\nprecision_score(y_test, rf.predict(x_test))\n# f1_score(y_test, rf.predict(x_test))","d4d44ab6":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\nns_probs = [0 for _ in range(len(y_test))]\nlr_probs = rf.predict_proba(x_test)\nlr_probs = lr_probs[:, 1]\n\nns_auc = roc_auc_score(y_test, ns_probs)\nlr_auc = roc_auc_score(y_test, lr_probs)\n\nprint('No Skill: ROC AUC=%.3f' % (ns_auc))\nprint('RFC: ROC AUC=%.3f' % (lr_auc))\n\n# calculate roc curves\nns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\nlr_fpr, lr_tpr, _ = roc_curve(y_test, lr_probs)\n# plot the roc curve for the model\nplt.plot(ns_fpr, ns_tpr, linestyle='--', label='Dummy Classifer')\nplt.plot(lr_fpr, lr_tpr, marker='.', label='RF')\n# axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# show the legend\nplt.legend()\n# show the plot\nplt.show()","c190dba9":"from sklearn.metrics import precision_recall_curve\ny_scores = rf.predict_proba(x_train)[:,1]\n#y_scores\n\nprecisions, recalls, thresholds = precision_recall_curve(y_train, y_scores)\n\n# print(precisions, recalls)\n\ndef plot_prc (precisions, recalls, thresholds):\n    plt.plot(thresholds, precisions[:-1], 'b--', label='Precision')\n    plt.plot(thresholds, recalls[:-1], 'g-', label='Recall')\n    plt.xlabel('Thresholds')\n    plt.legend(loc='center left')\n    plt.ylim([0,1])\n\nplot_prc(precisions, recalls, thresholds)","27c1b43f":"dummy.head()","51bc4dad":"## You can test the accuracy from the dataframe which was not feature scaled, the accuracy falls","938683be":"## EDA","67a5a5a9":"## Confusion Matrix","bb16fb1c":"# Replacing Unknown with never smoked in smoking_status column","8b7bba90":"## Getting dummies for categorical columns","5e15f4e2":"## Feature scaling for numerical data","452490c9":"## Training Model with RandomforestClassifier","57c62b8d":"# Replacing Other with Male in gender column"}}