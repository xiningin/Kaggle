{"cell_type":{"d253c326":"code","94086e94":"code","1efcca98":"code","72eab356":"code","ab851c17":"code","8863f277":"code","19b86461":"code","7e0e89f9":"code","e732caf4":"code","08b61b0c":"code","94a36c20":"code","f3e59058":"code","519fecf0":"code","7e1d9a6a":"code","9af004a1":"code","cfdcb950":"code","4934b173":"code","bb9a8cc4":"code","b2575088":"code","151adfff":"code","efea273a":"code","832d1cc6":"code","1df5b076":"code","bb033b9e":"code","2fbde4e8":"code","78780ed3":"code","881172ca":"code","b2e1556b":"code","56096f62":"code","44c8aad2":"code","75a4dbe4":"markdown","56614a27":"markdown","035c8309":"markdown","d79d8eb7":"markdown","e93a53bc":"markdown","eaf541de":"markdown","e45cff47":"markdown","11c5114d":"markdown","3040c191":"markdown","8b26af18":"markdown","95ded469":"markdown","472a722e":"markdown","c5e4338f":"markdown"},"source":{"d253c326":"!pip install pyjanitor\n!pip install icecream\n!pip install opendatasets\n!pip install kaleido\n!pip install --upgrade orjson\n!pip install pingouin","94086e94":"import pandas as pd\nimport numpy as np\nimport janitor\nfrom icecream import ic\nimport json\nimport pickle\nimport orjson\nimport plotly.express as px\nimport plotly.io as pio\nimport plotly.graph_objects as go\nimport missingno as msno\nimport warnings\nimport time\nfrom icecream import ic\nfrom functools import lru_cache\nfrom scipy.stats import iqr\nimport statsmodels.api as sm\nfrom statsmodels.graphics.gofplots import qqplot\n\n\n# kernel setttings\nwarnings.filterwarnings(action='ignore')\npd.set_option('display.max_columns', 200)\npio.templates.default = 'plotly_white'\ncolors = [\"#074f57\",\"#077187\",\"#74a57f\",\"#9ece9a\",\"#e4c5af\"]\n\n# data filepath\ndata_fp = '..\/input\/bondora-peer-to-peer-lending-loan-data\/LoanData_Bondora.csv'\n\n\n@lru_cache(maxsize=128)\ndef load_data(cols=None, fp=data_fp)-> pd.DataFrame:\n    data = pd.read_csv(fp, low_memory=False,\n        usecols=cols, parse_dates=True)\n\n    data = data.remove_empty() \\\n        .clean_names().drop(columns=[\n            'loanid', 'loannumber', 'username'])\n\n    return data\n\n\ndef figure_show(plot, static: bool, **kwargs)-> go.Figure:\n    \"\"\"\n    Sets figure with custom layout parameters\n    \"\"\"\n    config = {'staticPlot': True}\n    plot.update_layout(\n        **kwargs,\n        font=dict(color='Dark Gray', size=10),\n        margin=dict(pad=10),\n        width=780)\n    \n    if static:\n        return plot.show(config=config)\n    else:\n        return plot.show()","1efcca98":"df = load_data()\ncols = sorted(df.columns.tolist())\ndf.head(3)","72eab356":"print(f\"\"\"\nThe dataset has {df.shape[0]} observations with {df.shape[1]} features.\n\"\"\")","ab851c17":"df.info('dtypes')","8863f277":"# Create list comprehension for unique dtypes\nbool_dtype = sorted([*df.select_dtypes('bool')])\nobj_dtype = sorted([*df.select_dtypes('object')])\nfloat_dtype = sorted([*df.select_dtypes('float64')])\nint_dtype = sorted([*df.select_dtypes('int')])\n\n\ndef plot_dtypes()-> go.Figure:\n    \":returns: Plotly Graph Obj. Data Type Counts\"    \n    title=\"<b>Bondora Loan Data<\/b><br> Data Types\"\n    \n    # create dictionary for figure data reference\n    d_counts = dict(\n        DataType = ['Float', 'Object', 'Integer', 'Bool'],\n        Counts = [len(float_dtype), len(obj_dtype),\n            len(int_dtype), len(bool_dtype)])\n\n    # create figure\n    fig_colors = [colors[2]] * 4\n    fig_colors[0] = colors[3]\n    fig = px.bar(d_counts, x='DataType', y='Counts', text='Counts')\n    \n    # tweak traces\n    fig.update_traces(\n            textposition='outside',\n            marker_color=fig_colors, \n            marker=dict(line=dict(\n                width=1, color='Black'))) \\\n        .update_yaxes(visible=False)\n\n    return figure_show(fig, title=title, static=False)\n\nplot_dtypes()","19b86461":"def get_top_missing()-> pd.DataFrame:\n    \"\"\"\n    :returns: Top 15 Missing Data\n    \"\"\"\n    \n    def plot_bar_missing(df):\n        title = '<b>Top<\/b> 15 features <br> Missing data'\n        \n        # select the top 15 from data\n        df = df[:15]\n        \n        # create colors\n        miss_color = [colors[1]] * 15\n        for i in range (0, 5):\n            miss_color[i] = colors[3]\n        \n        # set labels and values for figure\n        labels = [names for names in df['Cols']]\n        vals = np.round(df.Percentage, 0)\n        \n        # create figure\n        fig = go.Figure() \\\n        .add_trace(go.Bar(\n            orientation='h',\n            x=vals,\n            y=labels)) \\\n        .update_traces(marker_color=miss_color,\n            marker=dict(line=dict(\n                width=1, color='Black'))) \\\n        .update_xaxes(title='% of missing values') \\\n        .update_yaxes(title='Features')\n        \n        return figure_show(fig, title=title, static=False)\n        \n    # count missing data\n    missing = df.isna().sum() \\\n        .sort_values(ascending=False)\n\n    # convert to dataframe\n    missing_df = pd.DataFrame(missing) \\\n        .reset_index()\\\n        .rename(columns={\n            'index': 'Cols',\n            0 : 'Counts'})\n        \n    # get percentages\n    missing_df['Percentage'] = missing_df.Counts\\\n        .apply(lambda val: np.round(val\/len(df) * 100), 2)\n    \n    # get top 15 features\n    top = missing_df.loc[:15]\\\n        .style.background_gradient(\n            subset=['Percentage'],\n            cmap='ocean')\n    \n    bar_plot = plot_bar_missing(missing_df)\n    \n    return bar_plot\n","7e0e89f9":"get_top_missing()","e732caf4":"def plot_ts_counts_yr()-> go.Figure:\n    \"\"\"\n    Plots Bar Graph for loan issued yearly.\n    \"\"\"\n    title='<b>Lifetime Loans Issues<\/b> Yearly'\n    fig = go.Figure()\n\n    loan_freq_color = [colors[2]] * len(loan_freq_year)\n    loan_freq_color[0] = colors[3]\n\n    fig.add_trace(go.Bar(\n        x=loan_freq_year.index,\n        y=loan_freq_year.values))\n\n    fig.update_xaxes(tickmode='linear')\n    fig.update_traces(\n        marker_color=loan_freq_color,\n        marker=dict(line=dict(width=1, color='Black')))\n    \n    return figure_show(fig, title=title, static=False)\n\nloan_freq_ts = pd.to_datetime(df['loandate'])\nloan_freq_year = loan_freq_ts.dt.year.value_counts()\nplot_ts_counts_yr()","08b61b0c":"demo = df[[\n    'age', \n    'gender', \n    'country',\n    'education',\n    'incometotal']]\n\ndemo_employment = df[[\n    'employmentdurationcurrentemployer',\n    'employmentstatus',]]","94a36c20":"country_name = []\nfor country in demo.country:\n    if country == 'EE':\n        country_name.append('Estonia')\n    if country == 'ES':\n        country_name.append('Spain')\n    if country == 'FI':\n        country_name.append('Finland')\n    if country == 'SK':\n        country_name.append('Slovakia')\n\nuser_country = pd.Series(country_name).value_counts()\nuser_country = user_country.apply(lambda val: np.round(val \/ user_country.sum() * 100, 0))","f3e59058":"def plot_waffle():\n\n    z_val = np.zeros(100)\n    i = 0\n    counter = 0\n    for vals in user_country[:3]:\n        to = counter + int(vals)\n        z_val[counter: to] = z_val[: int(vals)] + i\n        i += 1\n        counter += int(vals)\n\n    title = \"Borrower <b>Country<\/b>\"\n    fig = px.imshow(\n        z_val.reshape(-1, 10),\n        color_continuous_scale=[\n            (0.00, colors[0]), (0.33, colors[0]),\n            (0.33, colors[1]), (0.66, colors[1]),\n            (0.66, colors[2]), (1.00, colors[2])])\\\n        .update_traces(ygap=2, xgap=2)\\\n        .update_layout(\n            title=title,\n            width=780,\n            coloraxis_colorbar=dict(\n                title=\"Country\",\n                tickvals=[0,1,2],\n                ticktext=[\"Estonia\", \"Spain\", \"Finland\"],\n                lenmode=\"pixels\", len=100))\\\n        .update_yaxes(visible=False)\\\n        .update_xaxes(visible=False)\n\n    return figure_show(fig, static=True)","519fecf0":"plot_waffle()","7e1d9a6a":"def plot_age_hist():\n    title = 'Borrower <b>Age<\/b>'\n    fig = px.histogram(demo, x='age') \\\n        .update_layout(title=title, width=780) \\\n        .update_traces(\n            marker_color=colors[2],\n            nbinsx=10)\n    return figure_show(fig, static=False)\n\nplot_age_hist()","9af004a1":"education_list = []\nfor code in df.education:\n    if code == 1.0:\n        education_list.append('Primary Education')\n    if code == 2.0:\n        education_list.append('Basic Education')\n    if code == 3.0:\n        education_list.append('Vocational Education')\n    if code == 4.0:\n        education_list.append('Secondary Education')\n    if code == 5.0:\n        education_list.append('Higher Education')\n        \neducation = pd.Series(education_list).value_counts()","cfdcb950":"def plot_education() -> go.Figure:\n    title = 'Borrower <b>Education<\/b>'\n    \n    # create figure loop\n    i = 0\n    fig = go.Figure()\n    for idx, vals, color in zip(education.index, education.values, colors):\n        fig.add_trace(go.Bar(y=[idx], x=[vals], name=idx,\n            marker_color=colors[i]))\n        i += 1\n\n    # update orientation\n    fig = fig.update_traces(\n        marker=dict(line=dict(width=1, color='Black')),\n        orientation='h')\\\n        .update_layout(title=title)\n\n    # show figure\n    return figure_show(fig, static=False)\n\nplot_education()","4934b173":"employment = []\nfor code in df.employmentstatus:\n    if code == 1:\n        employment.append('Unemployed')\n    if code == 2:\n        employment.append('Partially Employed')\n    if code == 3:\n        employment.append('Fully Employed')\n    if code == 4:\n        employment.append('Self-Employed')\n    if code == 5:\n        employment.append('Entrepreneur')\n    if code == 6:\n        employment.append('Retiree')\n\nemployment = pd.Series(employment).value_counts()","bb9a8cc4":"def plot_employment() -> go.Figure:\n    title = 'Borrower <b>Employment<\/b>'\n    \n    # create figure loop\n    i = 0\n    fig = go.Figure()\n    for idx, vals, color in zip(employment.index, employment.values, colors):\n        fig.add_trace(go.Bar(y=[idx], x=[vals], name=idx,\n            marker_color=colors[i]))\n        i += 1\n\n    # update orientation\n    fig = fig.update_traces(\n        marker=dict(line=dict(width=1, color='Black')),\n        orientation='h')\\\n        .update_layout(title=title)\n\n    # show figure\n    return figure_show(fig, static=False)\n\nplot_employment()","b2575088":"use_loan = []\nfor codes in df.useofloan:\n    if codes == 1:\n        use_loan.append('Real Estate')\n    if codes == 2:\n        use_loan.append('Home Improvement')\n    if codes == 3:\n        use_loan.append('Business')\n    if codes == 4:\n        use_loan.append('Education')\n    if codes == 5:\n        use_loan.append('Travel')\n    if codes == 6:\n        use_loan.append('Vehicle')\n    if codes == 7:\n        use_loan.append('Other')\n    if codes == 8:\n        use_loan.append('Health')\n    if codes == 101:\n        use_loan.append('Working Capital Financing')\n    if codes == 102:\n        use_loan.append('Purchase of Machinery Equipment')\n    if codes == 103:\n        use_loan.append('Renovation of Real Estate')\n    if codes == 104:\n        use_loan.append('Accounts Receivalbe Financing')\n    if codes == 105:\n        use_loan.append('Acquisition of Means of Transport')\n    if codes == 106:\n        use_loan.append('Construction Finance')\n    if codes == 107:\n        use_loan.append('Acquisition of Stocks')\n    if codes == 108:\n        use_loan.append('Acquisition of Real Estate')\n    if codes == 109:\n        use_loan.append('Guaranteeing Obligation')\n    if codes >= 110:\n        use_loan.append('Other Business')\n        \nuse_loan = pd.Series(use_loan).value_counts()\n\ndef plot_loan_use() -> go.Figure:\n    title = 'Borrower <b>Use of Loan<\/b>'\n    \n    # create figure loop\n    i = 0\n    fig = go.Figure()\n    for idx, vals, color in zip(use_loan.index, use_loan.values, colors):\n        fig.add_trace(go.Bar(y=[idx], x=[vals], name=idx,\n            marker_color=colors[i]))\n        i += 1\n\n    # update orientation\n    fig = fig.update_traces(\n        marker=dict(line=dict(width=1, color='Black')),\n        orientation='h')\\\n        .update_layout(title=title)\n\n    # show figure\n    return figure_show(fig, static=False)\n\nplot_loan_use()","151adfff":"# sort values for by duration in days\nloan_duration = df['loanduration'] \\\n    .value_counts() \\\n    .reset_index() \\\n    .sort_values(by='index', ascending=False)\n\n# create label for 4 cuts\nlabels = [\n    '1 to 8 days',\n    '8 to 16 days',\n    '16 to 27 days',\n    '27 to 60 days']\n\n# use pandas cut and sum counts\nloan_duration['cat'] = pd.qcut(loan_duration['index'], q=4, labels=labels)\nloan_duration_plot = loan_duration.groupby(['cat']).sum()['loanduration']","efea273a":"def plot_loan_duration() -> go.Figure:\n    title = 'Loan <b>Duration<\/b>'\n    \n    # create figure loop\n    i = 0\n    fig = go.Figure()\n    for idx, vals, color in zip(loan_duration_plot.index, loan_duration_plot.values, colors):\n        fig.add_trace(go.Bar(y=[idx], x=[vals], name=idx,\n            marker_color=colors[i]))\n        i += 1\n\n    # update orientation\n    fig = fig.update_traces(\n        marker=dict(line=dict(width=1, color='Black')),\n        orientation='h')\\\n        .update_layout(title=title)\n\n    # show figure\n    return figure_show(fig, static=False)\n\nplot_loan_duration()","832d1cc6":"income_liab = df[['incometotal', 'liabilitiestotal']]","1df5b076":"def plot_qq(qqplot_data, plt_title)-> go.Figure:\n    \"\"\"\n    returns: QQ-Plotly Figure of qq_plot_data\n    \"\"\"\n    \n    # get marker data\n    x = qqplot_data[0].get_xdata()\n    y = qqplot_data[0].get_ydata()\n\n    # get line data\n    x_lines = qqplot_data[1].get_xdata()\n    y_lines = qqplot_data[1].get_ydata()\n\n    # create qqplot figure\n    fig = go.Figure()\n    fig.add_trace(go.Scattergl(\n        x=x, y=y,\n        mode='markers',\n        name='Scatter',\n        marker_color=colors[3]))\n    \n    fig.add_trace(go.Scattergl(\n        x=x_lines,\n        y=y_lines,\n        mode='lines',\n        name='Line'))\n    \n    fig.update_xaxes(title='Theoretical Quantiles')\n    fig.update_yaxes(title='Sample Quantiles')\n    fig.update_traces(marker=dict(line=dict(width=1, color='Black')))\n                      \n    return figure_show(fig, static=True, title=plt_title)\n\ndef get_qq(data_array):\n    return qqplot(data_array,line='s').gca().lines","bb033b9e":"income_qq = get_qq(income_liab.incometotal)\nliab_qq = get_qq(income_liab.liabilitiestotal)","2fbde4e8":"plot_qq(liab_qq, plt_title='<b>QQ Plot<\/b><br>Liabilities')","78780ed3":"plot_qq(income_qq, plt_title='<b>QQ Plot<\/b><br>Income')","881172ca":"# drop outliers\nincome_iqr = iqr(income_liab.incometotal)\nliabilities_iqr = iqr(income_liab.liabilitiestotal)\nn_income = income_liab[income_liab.loc[:, 'incometotal'] <= income_iqr]\nincome_liab = n_income[n_income.loc[:, 'liabilitiestotal'] <= liabilities_iqr]\nincome_qq = get_qq(income_liab.incometotal)\nliab_qq = get_qq(income_liab.liabilitiestotal)","b2e1556b":"plot_qq(income_qq, plt_title='<b>QQ Plot<\/b><br>Income')","56096f62":"plot_qq(liab_qq, plt_title='<b>QQ Plot<\/b><br>Liabilities')","44c8aad2":"income_liab.describe().T.style.bar(subset=['std', '50%'],\n    color=colors[3])","75a4dbe4":"## Current Income and Liabilities","56614a27":"## The Loan","035c8309":"Feature Reference: https:\/\/www.bondora.com\/en\/public-reports\n\nThe goal of this exploratory data analysis is to better understand the features of this dataset. \nThe demographics data such as age, education, employment, income. As well as how their application went\nfrom their contract date and payment date.","d79d8eb7":"We're doing outlier detection to have a better grasp of the values of income and liabilities of a borrower without the extreme outliers that skews our mean. Though for our model we don't have to normalize our data.","e93a53bc":"### Outlier Detection\n\n---","eaf541de":"# **<font color='#74a57f'>Bondora<\/font> Peer to Peer Lending Loan Data**\n### Exploratory Data Analysis and Random Forest Classification\n\n---\n\ud83d\udc68\u200d\ud83d\udd27 Work in progress..\n","e45cff47":"## Top 15 <font color='#74a57f'> Missing Features<\/font> for Loan Data\n---","11c5114d":"## Borrower <font color='#74a57f'>Demographics<\/font> \n\n---","3040c191":"### Borrower <font color='#74a57f'>Country<\/font> \n\n---","8b26af18":"## <b>Background<\/b>\nPeer-to-peer lending has attracted considerable attention in recent years, largely because it offers a novel way of connecting borrowers and lenders. But as with other innovative approaches to doing business, there is more to it than that. Some might wonder, for example, what makes peer-to-peer lending so different\u2013or, perhaps, so much better\u2013than working with a bank, or why has it become popular in many parts of the world.\n\nCertainly, the industry has witnessed strong growth in recent years. According to Business Insider, transaction volumes in the U.S. and Europe, the world\u2019s leading P2P markets, have expanded at double and, in some cases, triple-digit percentage rates, bolstered by widespread acceptance of doing business online and a supportive regulatory environment.\n\nFor investors, \"peer-2-peer lending,\" or \"P2P,\" offers an attractive way to diversify portfolios and enhance long-term performance. When they invest through a peer-to-peer platform, they can profit from an asset class that has proven itself in both good times and bad. Equally important, they can avoid the risks associated with putting all their eggs in one basket, especially at a time when many experts believe that traditional favorites such as stocks and bonds are riskier than ever.\n\nDefault risk has long been a significant risk factor to test borrowers\u2019 behaviour in Peer-to-Peer (P2P) lending. In P2P lending, loans are typically uncollateralized and lenders seek higher returns as compensation for the financial risk they take. In addition, they need to make decisions under information asymmetry that works in favor of the borrowers. In order to make rational decisions, lenders want to minimize the risk of default of each lending decision and realize the return that compensates for the risk.\n\nAs in the financial research domain, there are very few datasets available that can be utilized for building and analyzing credit risk models. This dataset will help the research community in building and performing research in the credit risk domain.\n\n## Content\nThis dataset has been retrieved from a publicly available data set of a leading European P2P lending platform, Bondora (https:\/\/www.bondora.com\/en). The retrieved data is a pool of both defaulted and non-defaulted loans from the time period between February 2009 and July 2021. The data comprises demographic and financial information of borrowers and loan transactions.\n\n","95ded469":"## What is the <font color='#74a57f'>**Dominant** Data Type<\/font>\n---","472a722e":"## Bandora <font color='#74a57f'>Loan Transactions<\/font> \n\n---","c5e4338f":"# The Loan <font color='#74a57f'>Bondora Dataset<\/font>\n## Exploratory Data Analysis\n\n---"}}