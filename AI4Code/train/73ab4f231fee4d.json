{"cell_type":{"ff6c93bc":"code","9ce9955a":"code","14068e84":"code","c35415ea":"code","8fb26732":"code","3a648fc2":"code","edbcb2d5":"code","1a48039d":"code","d8f6c836":"code","6751b00a":"code","2b779d2f":"code","525c0a93":"code","7696547d":"code","71eafde5":"code","695561c0":"code","95d60c6c":"code","0ad3f9d8":"code","6a34be65":"code","1fcb63ae":"code","44bd1c41":"code","b6c06fcd":"code","30ea673d":"code","7fa22180":"code","9fede39d":"code","b496b5ea":"code","230fb952":"code","b8486f4b":"code","58a38c24":"code","1db48f83":"code","984c3994":"code","0caecd4f":"code","a38c2754":"code","7e0903e2":"code","516dd6eb":"code","d721d54c":"code","00bea2c8":"code","72f04bb9":"code","9be7a523":"code","a337d680":"code","f53e49fb":"code","a950666f":"code","6e2235c3":"code","d7ff8a69":"code","46881b7b":"markdown","99e9d01d":"markdown","20b483ed":"markdown","ad346965":"markdown","c1e95c26":"markdown","62332917":"markdown","07c281ff":"markdown","8128e822":"markdown","f2a7102f":"markdown","377c39ae":"markdown","46e388a4":"markdown","f512b79b":"markdown","7864d217":"markdown","736b75de":"markdown","fe9a6311":"markdown","be6b1f09":"markdown","fbf07b26":"markdown","e89fe534":"markdown","61a10651":"markdown","0df4de43":"markdown","a41d4b5a":"markdown","8abbf475":"markdown","43965e13":"markdown","993185b5":"markdown","1421422b":"markdown","1e8dd969":"markdown","eb4e7290":"markdown","1f3cfa36":"markdown","906553b7":"markdown","9a9a0009":"markdown","a5ae2659":"markdown","857f3c56":"markdown","b329cd6d":"markdown","6c6889ee":"markdown","b48a415c":"markdown"},"source":{"ff6c93bc":"import numpy as np  # \u79d1\u5b66\u8ba1\u7b97\u5de5\u5177\u5305\nimport pandas as pd  # \u6570\u636e\u5206\u6790\u5de5\u5177\u5305\nimport matplotlib.pyplot as plt # \u56fe\u8868\u7ed8\u5236\u5de5\u5177\u5305\nimport seaborn as sns # \u57fa\u4e8e matplot, \u5bfc\u5165 seaborn \u4f1a\u4fee\u6539\u9ed8\u8ba4\u7684 matplotlib \u914d\u8272\u65b9\u6848\u548c\u7ed8\u56fe\u6837\u5f0f\uff0c\u8fd9\u4f1a\u63d0\u9ad8\u56fe\u8868\u7684\u53ef\u8bfb\u6027\u548c\u7f8e\u89c2\u6027\n\n# \u7b97\u6cd5\u5e93\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\n\n# \u5728 jupyter notebook \u91cc\u9762\u663e\u793a\u56fe\u8868\n%matplotlib inline ","9ce9955a":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","14068e84":"train_df.head()","c35415ea":"train_df.info()\nprint('_'*40)\ntest_df.info()","8fb26732":"train_df.describe()","3a648fc2":"train_total = train_df.isnull().sum().sort_values(ascending=False)\npercent_1 = train_df.isnull().sum()\/train_df.isnull().count()*100\npercent_2 = round(percent_1,1).sort_values(ascending=False)\ntrain_miss_data = pd.concat([train_total,percent_2],axis=1,keys=['total','%'])\ntrain_miss_data.head()","edbcb2d5":"test_total = test_df.isnull().sum().sort_values(ascending=False)\npercent_1 = test_df.isnull().sum()\/test_df.isnull().count()*100\npercent_2 = round(percent_1,1).sort_values(ascending=False)\ntest_miss_data = pd.concat([test_total,percent_2],axis=1,keys=['total','%'])\ntest_miss_data.head()","1a48039d":"train_df.columns.values","d8f6c836":"# \u6309\u6027\u522b\u7b5b\u9009\u51fa\u6570\u636e\nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\n\n# \u5728\u6027\u522b\u7684\u57fa\u7840\u4e0a\u7b5b\u9009\u51fa\u5b58\u6d3b\u548c\u672a\u5b58\u6d3b\u7684\u6570\u636e\n\n# \u9009\u51fa\u5b58\u6d3b\u7684\u6570\u636e\nF_survived = women[women['Survived']==1]\nM_survived = men[men['Survived']==1]\n\n# \u9009\u51fa\u672a\u5b58\u6d3b\u7684\u6570\u636e\nF_not_surv = women[women['Survived']==0]\nM_not_surv = men[men['Survived']==0]\n\nF_survived.head()","6751b00a":"# \u6bcf\u79cd\u6570\u636e\u53bb\u9664 Age \u7f3a\u5931\u503c\nprint('\u53bb\u9664\u524d\uff0cFemale survived null', F_survived.Age.isnull().sum())\n\n# \u53bb\u9664 Age \u7f3a\u5931\u503c\nF_survived.Age.dropna()\nM_survived.Age.dropna()\nF_not_surv.Age.dropna()\nM_not_surv.Age.dropna()\n\nprint('\u53d6\u51fa\u540e\uff0cFemale survived null',F_survived.Age.dropna().isnull().sum())","2b779d2f":"sns.set() # \u58f0\u660e\u4f7f\u7528 Seaborn \u6837\u5f0f\n\nfig,axes = plt.subplots(nrows=1,ncols=2,figsize=(16,8)) # \u521b\u5efa\u4e00\u4e2a Figure, \u5b50\u56fe\u4e3a1\u884c\uff0c2\u5217\nsurvived = 'survived' # \u56fe\u4f8b label \nnot_survived = 'not survived' # \u56fe\u4f8b label\n\nax = sns.distplot(F_survived.Age.dropna(),bins=18,ax=axes[0],kde=False)\nax = sns.distplot(F_not_surv.Age.dropna(),bins=40,ax=axes[0],kde=False)\nax.legend([survived,not_survived]) # \u56fe\u4f8b label \u653e\u7f6e\u4f4d\u7f6e1\nax.set_title('Female')\n\nax = sns.distplot(M_survived.Age.dropna(),bins=18,ax=axes[1],label=survived,kde=False) # \u56fe\u4f8b label \u653e\u7f6e\u4f4d\u7f6e2\nax = sns.distplot(M_not_surv.Age.dropna(),bins=40,ax=axes[1],label=not_survived,kde=False)\nax.legend()\nax.set_title('Male')","525c0a93":"import matplotlib.pyplot as plt #\u5bfc\u5165 matplotlib.pyplot\uff0c\u5e76\u7b80\u5199\u6210plt\nimport seaborn as sns\nimport numpy as np  #\u5bfc\u5165numpy\u5305\uff0c\u7528\u4e8e\u751f\u6210\u6570\u7ec4\nimport pandas as pd #\u5bfc\u5165pandas\u5305\uff0c\u7528\u4e8e\u6570\u636e\u5206\u6790\n#IPython notebook\u4e2d\u7684\u9b54\u6cd5\u65b9\u6cd5\uff0c\u8fd9\u6837\u6bcf\u6b21\u8fd0\u884c\u540e\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u56fe\u50cf\uff0c\u4e0d\u518d\u9700\u8981\u4f7f\u7528plt.show()\n%matplotlib inline  \n\ng = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","7696547d":"import matplotlib.pyplot as plt #\u5bfc\u5165 matplotlib.pyplot\uff0c\u5e76\u7b80\u5199\u6210plt\nimport seaborn as sns\nimport numpy as np  #\u5bfc\u5165numpy\u5305\uff0c\u7528\u4e8e\u751f\u6210\u6570\u7ec4\nimport pandas as pd #\u5bfc\u5165pandas\u5305\uff0c\u7528\u4e8e\u6570\u636e\u5206\u6790\n#IPython notebook\u4e2d\u7684\u9b54\u6cd5\u65b9\u6cd5\uff0c\u8fd9\u6837\u6bcf\u6b21\u8fd0\u884c\u540e\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u56fe\u50cf\uff0c\u4e0d\u518d\u9700\u8981\u4f7f\u7528plt.show()\n%matplotlib inline  \n\nsns.barplot(x='Sex', y='Survived', data=train_df)","71eafde5":"grid = sns.FacetGrid(train_df, row='Embarked',height=2.2, aspect=1.6) \ngrid.map(sns.pointplot, 'Pclass', 'Survived','Sex',palette='deep',hue_order=['female','male'],order=[1,2,3]) \ngrid.add_legend()","695561c0":"sns.barplot(x='Pclass', y='Survived', data=train_df)","95d60c6c":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","0ad3f9d8":"# \u6216\u8005\u7528\u8fd9\u4e2a\ngrid = sns.FacetGrid(train_df,hue='Survived',row='Pclass')\ngrid.map(plt.hist,\"Age\",bins=20)\ngrid.add_legend()","6a34be65":"data = [train_df, test_df]  # \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1\n    dataset['not_alone'] = dataset['not_alone'].astype(int)\ntrain_df['not_alone'].value_counts()\n","1fcb63ae":"df1 = pd.DataFrame(np.random.rand(8,4),index=list('abcdefgh'),columns=['A','B','C','D'])\nprint(df1)\n\ndf1.loc[df1['A']<0.5,'\u5c0f\u4e8e0.5'] = 1\ndf1.loc[df1['A']>0.5,'\u5c0f\u4e8e0.5'] = 0\nprint(df1)","44bd1c41":"df1 = pd.DataFrame(np.random.rand(8,4),index=list('abcdefgh'),columns=['A','B','C','D'])\nprint(df1)\n\ndf1.loc[df1['A']<0.5,'\u5c0f\u4e8e0.5'] = 1\nprint(df1)\nprint(df1['\u5c0f\u4e8e0.5'].value_counts())\ndf1.loc[df1['A']>0.5,'\u5c0f\u4e8e0.5'] = 0\nprint(df1['\u5c0f\u4e8e0.5'].value_counts(normalize=True))","b6c06fcd":"df1['\u5c0f\u4e8e0.5'].astype(int).value_counts()","30ea673d":"grid = sns.catplot('relatives','Survived', data=train_df, kind='point',aspect = 2.5)","7fa22180":"# \u5408\u5e76\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\ntitanic = train_df.append(test_df, ignore_index=True)\n\n# \u4fdd\u5b58\u6d4b\u8bd5\u96c6\u7684 PassengerId \u7528\u4e8e\u6700\u540e\u63d0\u4ea4\npassengerId = test_df.PassengerId\n\n# \u521b\u5efa\u7d22\u5f15\uff0c\u540e\u671f\u7528\u4e8e\u5206\u5f00\u6570\u636e\u96c6\ntrain_idx = len(train_df)\ntest_idx = len(titanic) - len(test_df)\n\nprint(titanic.info())","9fede39d":"#train_df = train_df.drop(['PassengerId'], axis=1)","b496b5ea":"# \u6b63\u5219\u6d4b\u8bd5\nimport re\n\ntest = 'Braund,the Countess. Owen Harris'\npattern =re.compile(\",(.+)\\.\")\nprint(pattern.search(test).group(1))","230fb952":"# \u8bad\u7ec3\u96c6\ntrain_df['Title'] = train_df['Name'].map(lambda x:(re.compile(\",(.+?)\\.\").search(x).group(1)).strip())\nprint(list(train_df['Title'].drop_duplicates()))\n\n# \u6d4b\u8bd5\u96c6\ntest_df['Title'] = test_df['Name'].map(lambda x:(re.compile(\",(.+?)\\.\").search(x).group(1)).strip())\nprint(list(test_df['Title'].drop_duplicates()))","b8486f4b":"Title_Dictionary = {\n    \"Capt\": \"Officer\",\n    \"Col\": \"Officer\",\n    \"Major\": \"Officer\",\n    \"Jonkheer\": \"Royalty\",\n    \"Don\": \"Royalty\",\n    \"Sir\" : \"Royalty\",\n    \"Dr\": \"Officer\",\n    \"Rev\": \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Mme\": \"Mrs\",\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Mrs\",\n    \"Mr\" : \"Mr\",\n    \"Mrs\" : \"Mrs\",\n    \"Miss\" : \"Miss\",\n    \"Master\" : \"Master\",\n    \"Lady\" : \"Royalty\",\n    \"Dona\":\"Royalty\"\n}\n\ntitanic['Title'] = titanic['Name'].map(lambda x:(re.compile(\",(.+?)\\.\").search(x).group(1)).strip())\ntitanic['Title'] = titanic['Title'].map(Title_Dictionary)\n\n# \u67e5\u770b\u7f3a\u5931\u503c\nprint(titanic['Title'].isnull().sum())\n#titanic[titanic['Title'].isnull() == True]","58a38c24":"# \u76f8\u540c\u5c0a\u79f0\u7684\u4eba\u6570\ntitanic['Title'].value_counts()","1db48f83":"grouped = titanic.groupby(['Sex','Pclass', 'Title'])  \ngrouped[\"Age\"].median()","984c3994":"titanic[\"Age\"] = grouped[\"Age\"].apply(lambda x: x.fillna(x.median()))\n\n# \u67e5\u770b\u5904\u7406\u540e\u7684\u60c5\u51b5\ntitanic.info()","0caecd4f":"# \u8bad\u7ec3\u96c6\ntrain_df['Cabin'] = train_df['Cabin'].fillna(\"U0\") # \u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a \u201cU0\u201d  \u8868\u793a Unknow\n# \u6b63\u5219\u83b7\u53d6\u5939\u677f\u53f7 \u5e76 \u4f7f\u7528 drop_duplicates() \u53bb\u91cd\nprint(list(train_df['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group()).drop_duplicates()))","a38c2754":"# \u6d4b\u8bd5\u96c6\ntest_df['Cabin'] = test_df['Cabin'].fillna(\"U0\") # \u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a \u201cU0\u201d  \u8868\u793a Unknow\n# \u6b63\u5219\u83b7\u53d6\u5939\u677f\u53f7 \u5e76 \u4f7f\u7528 drop_duplicates() \u53bb\u91cd\nprint(list(test_df['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group()).drop_duplicates()))","7e0903e2":"import re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\n\ntitanic['Cabin'] = titanic['Cabin'].fillna(\"U0\") # \u6ca1\u6709\u8239\u8231\u53f7 \u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a \u201cU0\u201d\ntitanic['Deck'] = titanic['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())#\u6b63\u5219\u83b7\u53d6\u5939\u677f\u53f7\ntitanic['Deck'] = titanic['Deck'].map(deck) # \u901a\u8fc7\u5b57\u5178\u7528 map \u6620\u5c04\u5939\u677f\u53f7\u4e3a\u6570\u5b57\ntitanic['Deck'] = titanic['Deck'].fillna(0) # \u6ca1\u6709\u5939\u677f\u53f7 \u5c06\u7f3a\u5931\u503c\u586b\u5145\u4e3a \u201c0\u201d\ntitanic['Deck'] = titanic['Deck'].astype(int) # \u5c06dateframe\u67d0\u4e00\u5217\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u5316\u4e3a\u6574\u6570\u578b\n\n# \u5904\u7406\u5b8c\u5220\u9664 cabin \u7279\u5f81\n# train_df = train_df.drop(['Cabin'], axis=1)\n# test_df = test_df.drop(['Cabin'], axis=1)\n\n# \u5904\u7406\u540e\u7684\u60c5\u51b5\ntitanic.info()","516dd6eb":"# \u7528 value_counts() \u83b7\u53d6\u4f17\u6570\nprint(titanic['Embarked'].value_counts()) # \u9ed8\u8ba4\u964d\u5e8f\n\n# \u83b7\u53d6\u884c\u6807\u7b7e\nprint(titanic['Embarked'].value_counts().index)\n\n# \u83b7\u53d6\u7b2c\u4e00\u884c\u7684\u884c\u6807\u7b7e\nprint(titanic['Embarked'].value_counts().index[0])","d721d54c":"# \u7528 mode() \u83b7\u53d6\u4f17\u6570\nprint(titanic['Embarked'].mode())\nprint(titanic['Embarked'].mode().iloc[0])","00bea2c8":"# \u7528\u4f17\u6570\u586b\u5145 Embarked\ntitanic['Embarked'] = titanic['Embarked'].fillna(titanic['Embarked'].mode().iloc[0])\n\n# \u7528\u4e2d\u4f4d\u6570\u586b\u5145 Fare\ntitanic['Fare'] = titanic['Fare'].fillna(titanic['Fare'].median())\n\n# \u7528\u2018U\u2019\u586b\u5145 Cabin\ntitanic['Cabin'] = titanic['Cabin'].fillna('U')\n\n# \u770b\u5904\u7406\u540e\u7ed3\u679c\ntitanic.info()","72f04bb9":"# \u540c\u884c\u5bb6\u5ead\u6570 (\u5305\u62ec\u4e58\u5ba2\u672c\u8eab)\ntitanic['FamilySize'] = titanic['Parch'] + titanic['SibSp'] + 1","9be7a523":"titanic['Deck'] = titanic['Cabin'].map(lambda x: x[0])\ntitanic['Deck']","a337d680":"titanic.head()","f53e49fb":"# \u5c06\u6027\u522b\u8f6c\u5316\u4e3a\u6574\u6570\u5f62\u5f0f\ntitanic['Sex'] = titanic['Sex'].map({\"male\": 0, \"female\":1})\n\n# \u7c7b\u522b\u53d8\u91cf\u8f6c\u5316\u4e3adummy \u53d8\u91cf\npclass_dummies = pd.get_dummies(titanic.Pclass, prefix=\"Pclass\")\ntitle_dummies = pd.get_dummies(titanic.Title, prefix=\"Title\")\ndeck_dummies = pd.get_dummies(titanic.Deck, prefix=\"Deck\")\nembarked_dummies = pd.get_dummies(titanic.Embarked, prefix=\"Embarked\")\n\n# \u5408\u5e76 dummy \u5217\u548c\u539f\u6570\u636e\u96c6\ntitanic_dummies = pd.concat([titanic, pclass_dummies, title_dummies, deck_dummies, embarked_dummies], axis=1)\n\n# \u5220\u9664\u7c7b\u522b\u5b57\u6bb5\ntitanic_dummies.drop(['Pclass', 'Title', 'Cabin','Deck','Embarked', 'Name', 'Ticket'], axis=1, inplace=True)\n\ntitanic_dummies.head()","a950666f":"# \u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\ntrain = titanic_dummies.iloc[ :train_idx]\ntest = titanic_dummies.iloc[test_idx: ]\n\n# \u8f6c\u5316 Survived \u7279\u5f81\u4e3a\u6574\u6570\u578b\ntrain.Survived = train.Survived.astype(int)\n\n# \u8bad\u7ec3\u96c6\u5206\u6210 X \u548c Y(\u76ee\u6807\u53d8\u91cf\uff1aSurvived) \nx_train = train.drop('Survived', axis=1).values \ny_train = train.Survived.values\n\n# \u6d4b\u8bd5\u96c6\u5220\u9664\uff0c\u8bad\u7ec3\u96c6\u7684\u76ee\u6807\u53d8\u91cf\uff1aSurvived\nx_test = test.drop('Survived', axis=1).values\n\nprint(train.head())\nprint(train.info())","6e2235c3":"# classifier models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# create param grid object \nforrest_params = dict(     \n    max_depth = [n for n in range(9, 14)],     \n    min_samples_split = [n for n in range(4, 11)], \n    min_samples_leaf = [n for n in range(2, 5)],     \n    n_estimators = [n for n in range(10, 60, 10)],\n)\n\n# instantiate Random Forest model\nforrest = RandomForestClassifier()\n\n# build and fit model \nforest_cv = GridSearchCV(estimator=forrest, param_grid=forrest_params, cv=5) \nforest_cv.fit(x_train, y_train)\n\nprint(\"Best score: {}\".format(forest_cv.best_score_))\nprint(\"Optimal params: {}\".format(forest_cv.best_estimator_))","d7ff8a69":"# random forrest prediction on test set\nforrest_pred = forest_cv.predict(x_test)\n\n# dataframe with predictions\nkaggle = pd.DataFrame({'PassengerId': passengerId, 'Survived': forrest_pred})\n# save to csv\nkaggle.to_csv('submission.csv', index=False)\nprint(\"Submitted successfully\")","46881b7b":"### \u83b7\u53d6\u6570\u636e\u96c6\n\n\u8bfb\u53d6\u53c2\u6570\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u8fd4\u56de\u4e00\u4e2aDataFrame\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\n\n\u6709\u4e24\u4e2a\u6570\u636e\u96c6\uff1a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002 \u6211\u4eec\u5c06\u4f7f\u7528\u8bad\u7ec3\u96c6\u6765\u6784\u5efa\u6211\u4eec\u7684\u9884\u6d4b\u6a21\u578b\uff0c\u7528\u6d4b\u8bd5\u96c6\u6765\u5bf9\u5176\u8fdb\u884c\u8bc4\u5206\u5e76\u751f\u6210\u8f93\u51fa\u6587\u4ef6\u4ee5\u5728Kaggle\u8bc4\u4f30\u7cfb\u7edf\u4e0a\u63d0\u4ea4\u3002","99e9d01d":"\u53ef\u4ee5\u770b\u51fa\n- \u5a74\u513f\uff08Age<=4\uff09\u6709\u8f83\u9ad8\u7684\u751f\u5b58\u7387\n- \u8001\u4eba\uff08Age=80\uff09\u5168\u90e8\u751f\u8fd8\n- \u5927\u91cf\u768415-25\u5e74\u7eaa\u7684\u4e58\u5ba2\u6ca1\u6709\u751f\u8fd8\n- \u4e58\u5ba2\u4e3b\u8981\u572815-35\u7684\u5e74\u7eaa\u8303\u56f4\u5185\n\n###### 1.3 \u7c7b\u522b\u578b Sex\u3001 \u6570\u503c\u578b Survived \u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb (\u8fd9\u91cc\u7528\u7684\u662f\u6570\u503c\u578b Survived\uff0c\u53ef\u80fd\u9700\u8981\u653e\u5230\u5176\u4ed6\u4f4d\u7f6e)","20b483ed":"\u660e\u663e\u53ef\u4ee5\u770b\u51fa Pclass=1\u7684\u4e58\u5ba2\u5b58\u6d3b\u7387\u66f4\u9ad8\n\n##### 2.3 \u7c7b\u522b\u578b Pclass\u3001\u6570\u503c\u578b Age\u3001 \u7c7b\u522b\u578b Survived \u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\n\naspect:\u6bcf\u4e2a\u5c0f\u56fe\u8868\u7684\u6a2a\u8f74\u957f\u5ea6\u548c\u7eb5\u8f74\u7684\u6bd4\uff0c\u9ed8\u8ba4\u4e3a1; height:\u6bcf\u4e2a\u5c0f\u56fe\u8868\u7684\u9ad8\u5ea6\u8bbe\u5b9a\uff0c\u9ed8\u8ba4\u4e3a3","ad346965":"----\n**\u77e5\u8bc6\u70b9**\n\ndisplot()\u96c6\u5408\u4e86matplotlib\u7684hist()\u4e0e\u6838\u51fd\u6570\u4f30\u8ba1kdeplot\u7684\u529f\u80fd\uff0c\u589e\u52a0\u4e86rugplot\u5206\u5e03\u89c2\u6d4b\u6761\u663e\u793a\u4e0e\u5229\u7528scipy\u5e93fit\u62df\u5408\u53c2\u6570\u5206\u5e03\u7684\u65b0\u9896\u7528\u9014\u3002\u5177\u4f53\u7528\u6cd5\u5982\u4e0b\uff1a\uff1a\n\n```\nseaborn.distplot(a, bins=None, hist=True, kde=True, rug=False, fit=None, hist_kws=None, kde_kws=None, rug_kws=None, fit_kws=None, color=None, vertical=False, norm_hist=False, axlabel=None, label=None, ax=None)\n```\n    - \u53c2\u6570 ax\uff1a\u9009\u62e9\u4f4d\u7f6e\n    - \u53c2\u6570 hist\u3001kde\uff0c\u8c03\u8282\u662f\u5426\u663e\u793a\u76f4\u65b9\u56fe\u53ca\u6838\u5bc6\u5ea6\u4f30\u8ba1(\u9ed8\u8ba4hist,kde\u5747\u4e3aTrue)\n\n---\n\n\u95ee\u9898\uff1a\u76f4\u65b9\u56fe\u4e2d\u53c2\u6570 bins\uff0c\u8fd9\u91cc\u662f\u6839\u636e\u4ec0\u4e48\u8bbe\u7f6e\u7684?\n\n- \u6781\u7aef\u60c5\u51b5, bins = 1\n\u4e0a\u56fe\u5c55\u73b0\u4e86\u6781\u7aef\u60c5\u51b5, \u5f53 bins = 1\uff0c\u8868\u793a\u6240\u6709\u7684\u6570\u636e\u90fd\u5728\u4e00\u4e2a\u7ec4\u5185\u3002\u5206\u7ec4\u592a\u7c97\u7cd9\u5f71\u54cd\u6570\u636e\u5206\u7ec4\u89c4\u5f8b\u7684\u660e\u663e\u6027\uff0c\u4ec0\u4e48\u90fd\u770b\u4e0d\u51fa\u3002\n\n- \u6781\u7aef\u60c5\u51b5, bins = \u6570\u636e\u5927\u5c0f\n\u4e0b\u56fe\u8fdb\u884c\u6781\u7aef\u60c5\u51b5\u7684\u5bf9\u6bd4, \u5f53 bins = len(data)\uff0c\u8868\u793a\u5982\u679c\u6240\u6709\u7684\u6570\u636e\u90fd\u4e0d\u540c,\u5c06\u51fa\u73b0\u548c\u6570\u636e\u957f\u5ea6\u4e00\u6837\u7684\u7ec4\u3002\u5206\u7ec4\u592a\u7ec6\u81f4\u4f1a\u5f15\u8d77\u8f83\u5927\u7684\u8bef\u5dee\uff0c\u56e0\u6b64\u7ec4\u6570\u7684\u786e\u5b9a\u8981\u9002\u5f53\u3002\n\n\u7ec4\u8ddd\u7684\u5bbd\u5ea6\uff1a\u7528\u6570\u636e\u4e2d(\u6700\u5927\u503c-\u6700\u5c0f\u503c)\/\u7ec4\u6570\n\n----\n","c1e95c26":"\u77e5\u8bc6\u70b9\uff1a**[loc \u6839\u636e\u6761\u4ef6\uff0c\u5bf9\u65b0\u589e\u5217\u8d4b\u503c](https:\/\/blog.csdn.net\/qq_36523839\/article\/details\/80502574)**\n\n`df.loc[\u6761\u4ef6,\u65b0\u589e\u5217] = \u8d4b\u521d\u59cb\u503c`\n\n\u5982\u679c\u65b0\u589e\u5217\u540d\u4e3a\u5df2\u6709\u5217\u540d\uff0c\u5219\u5728\u539f\u6765\u7684\u6570\u636e\u5217\u4e0a\u6539\u53d8","62332917":"#### \u5047\u8bbe\n\n**\u54ea\u4e9b\u7279\u5f81\u53ef\u80fd\u548c\u5b58\u6d3b\u6709\u5173\uff1f**","07c281ff":"### \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\n\n\u5f00\u59cb\u63a2\u7d22\u6570\u636e\uff0c\u5e26\u7740\u95ee\u9898\u53bb\u7406\u89e3\u6570\u636e\u3002\n\n\u901a\u8fc7\u4ee5\u4e0b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u4e86\u89e3\u6570\u636e\n+ \u5c5e\u6027\n    + `df.columns.value` \u6570\u636e\u96c6\u4e2d\u6240\u6709\u5217\u540d(\u7279\u5f81),numpy.ndarray \u7c7b\u578b\n+ \u65b9\u6cd5\n    + `df.head()`  \u9884\u89c8\u6570\u636e\u96c6\u524d5\u884c\n    + `df.tail()`  \u9884\u89c8\u6570\u636e\u96c6\u540e5\u884c\n    + `df.info()`  \u663e\u793a\u5927\u81f4\u6570\u636e\u4fe1\u606f\uff0c\u5305\u62ec\u6bcf\u5217\u540d\u79f0\uff0c\u975e\u7a7a\u503c\u6570\u91cf\uff0c\u6bcf\u5217\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5185\u5b58\u5360\u7528\u7b49\u4fe1\u606f\u3002\n    + `df.describe()` \u5c55\u793a\u6570\u636e\u7684\u4e00\u4e9b\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f,\u4f46\u4f1a\u8fc7\u6ee4\u6389\u7f3a\u5931\u503c\u3002\u9ed8\u8ba4\u53ea\u7edf\u8ba1\u6570\u503c\u7c7b\u578b\u7684\u5b57\u6bb5\u5185\u5bb9\u3002\n        - `describe(include=\u2018ALL\u2018)`,\u7edf\u8ba1\u6240\u6709\u7c7b\u578b\u7684\u6570\u636e\n        - `describe(include=[np.number])` \u53ea\u7edf\u8ba1\u6570\u503c\u7c7b\u578b\u7684\u5b57\u6bb5\u5185\u5bb9\uff1acount\u8ba1\u6570\uff0cmean\u5e73\u5747\u6570\uff0cstd\u65b9\u5dee\uff0cmin\u6700\u5c0f\u503c\uff0c\u56db\u5206\u4f4d\u6570\uff0cmax \u6700\u5927\u503c\n        - `describe(include=[np.object])` \u53ea\u7edf\u8ba1object\u7c7b\u578b\u7684\u5b57\u6bb5\u5185\u5bb9\n        - `describe(include=\u2018O\u2019) \u53ea\u7edf\u8ba1\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5b57\u6bb5\u5185\u5bb9\uff1acount\u8ba1\u6570\uff0cunique\u552f\u4e00\u503c\u6570\u91cf\uff0ctop\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5185\u5bb9\uff0cfreq\u6700\u9ad8\u51fa\u73b0\u9891\u7387\n        - `describe(percentiles=[])`:\u8bbe\u7f6e\u8f93\u51fa\u7684\u767e\u5206\u4f4d\u6570\uff0c\u9ed8\u8ba4\u4e3a[.25\uff0c.5\uff0c.75]\uff0c\u8fd4\u56de\u7b2c25\uff0c\u7b2c50\u548c\u7b2c75\u767e\u5206\u4f4d\u6570\u3002\n\n#### \u9884\u89c8\u6570\u636e \n\n- `df.head()` \u9884\u89c8\u6570\u636e\u96c6\u524d5\u884c","8128e822":"##### \u5904\u7406\u7279\u5f81 Cabin - \u521b\u5efa\u65b0\u7684\u7279\u5f81\uff1a\u7532\u677f\u53f7 (\u6682\u65f6\u4e0d\u7528\u8fd9\u4e2a\u65b9\u6cd5)\n\n\u4e4b\u524d\u60f3\u76f4\u63a5\u5220\u9664'Cabin'\u8fd9\u4e2a\u7279\u5f81\uff0c\u4f46\u540e\u6765\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u4e1c\u897f\u3002\u8239\u8231\u53f7\u7801'C123'\uff0c\u770b\u8d77\u6765\u5b57\u6bcd\u4ee3\u8868\u7684\u662f\u7532\u677f\u53f7\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u63d0\u53d6\u8fd9\u4e9b\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7279\u5f81\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u4eba\u7684\u7532\u677f\u53f7\n\n- fillna \u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u5145\nPandas \u4e2d\uff0c\u7f3a\u5931\u6570\u636e\u4e00\u822c\u91c7\u7528 NaN \u6807\u8bb0 NaN \u4ee3\u8868 Not a Number\u3002\u7279\u522b\u5730\uff0c\u5728\u65f6\u95f4\u5e8f\u5217\u91cc\uff0c\u65f6\u95f4\u6233\u7684\u4e22\u5931\u91c7\u7528 NaT \u6807\u8bb0\u3002","f2a7102f":"\u6309\u7167\u6027\u522b\u5206\u7c7b\uff0cEmbarked \u4f3c\u4e4e\u4e0e\u5b58\u6d3b\u7387\u6709\u5173\u3002\n\n- \u4e0d\u8bba\u4ece\u54ea\u4e2a\u6e2f\u53e3\u767b\u8239\uff0cPclass \u4e00\u6837\u7684\u524d\u63d0\u4e0b\uff0c\u5973\u6027\u4e58\u5ba2\u7684\u5b58\u6d3b\u7387\u90fd\u9ad8\u4e8e\u7537\u6027\u3002\n- \u5bf9\u4e8e\u4eceS\u6216C\u6e2f\u53e3\u767b\u8239\u7684\u7537\u6027\u4e58\u5ba2\u4e2d\uff0cPclass=1\u7684\u5b58\u6d3b\u7387\u6bd4 Pclass =2, Pclass=3 \u90fd\u9ad8\u3002\n- \u5bf9\u4e8e\u4eceQ\u6e2f\u53e3\u767b\u8239\u7684\u7537\u6027\u4e58\u5ba2\u4e2d\uff0cPclass=3\u7684\u5b58\u6d3b\u7387\u6bd4 Pclass =1, Pclass=2 \u9ad8\u3002\n\nPclass \u4f3c\u4e4e\u4e5f\u4e0e\u5b58\u6d3b\u7387\u6709\u5173\u3002\u4e0b\u9762\u6765\u89c2\u5bdf Pclass \u548c Survived \u7684\u5173\u7cfb\n\n##### 2.2\u7c7b\u522b\u578b Pclass\u3001 \u6570\u503c\u578b Survived \u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb","377c39ae":"\u521b\u5efa Title \u7279\u5f81\uff0c\u8fd8\u80fd\u7528\u6765\u66f4\u597d\u5730\u4f30\u8ba1\u7f3a\u5931\u503c\u7684\u5e74\u9f84\u3002\n\n#### \u5904\u7406\u7279\u5f81 Age - \u7f3a\u5931\u503c\u586b\u5199\n\n\u4e0d\u662f\u7b80\u5355\u5730\u7528\u6570\u636e\u96c6\u7684\u5e73\u5747\u5e74\u9f84\u6216\u4e2d\u4f4d\u5e74\u9f84\u6765\u586b\u8865\u7f3a\u5931\u7684Age\u503c\uff0c\u800c\u662f\u901a\u8fc7\u5bf9\u4e58\u5ba2\u7684\u6027\u522b\u3001\u7b49\u7ea7\u548c\u8fdb\u884c\u5206\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u4e58\u5ba2\u7684\u5e74\u9f84\u3002\n\n\u6211\u4eec\u5c06\u6309\u7167\u6027\u522b\u3001Pclass\uff08\u4e58\u5ba2\u7b49\u7ea7\uff09\u548cTitle\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u5b50\u96c6\u8ba1\u7b97\u4e2d\u4f4d\u6570\u5e74\u9f84\u3002\n\n\u4e3a\u4e86\u907f\u514d\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6570\u636e\u6cc4\u6f0f\uff0c\u4f7f\u7528\u4ece\u8bad\u7ec3\u96c6\u8ba1\u7b97\u7684\u503c\u6765\u586b\u5145\u6d4b\u8bd5\u96c6\u4e2d\u7684\u5e74\u9f84\u3002","46e388a4":"\u4e8e\u662f\u6211\u4eec\u628a\u79f0\u8c13\u4fe1\u606f\u63d0\u53d6\u51fa\u6765\uff0c\u7531\u4e8e\u6709\u4e9b\u79f0\u8c13\u7684\u4eba\u6570\u91cf\u8fc7\u5c11\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u505a\u4e00\u4e2a\u6620\u5c04\n\n- Mme\uff1a\u79f0\u547c\u975e\u82f1\u8bed\u6c11\u65cf\u7684\"\u4e0a\u5c42\u793e\u4f1a\"\u5df2\u5a5a\u5987\u5973,\u53ca\u6709\u804c\u4e1a\u7684\u5987\u5973\uff0c\u76f8\u5f53\u4e8eMrs\n- Jonkheer:\u4e61\u7ec5\n- Capt\uff1a\u8239\u957f\uff1f\u3002\u3002\n- Lady\uff1a\u8d35\u65cf\u592b\u4eba\u7684\u79f0\u547c\n- Don\uff1a\u662f\u897f\u73ed\u7259\u8bed\u4e2d\u8d35\u65cf\u548c\u6709\u5730\u4f4d\u8005\u7684\u5c0a\u79f0\n- sir\uff1a\u90fd\u61c2\n- the Countess\uff1a\u5973\u4f2f\u7235\n- Ms\uff1aMs.\u6216Mz \u7f8e\u56fd\u8fd1\u6765\u7528\u6765\u79f0\u547c\u5a5a\u59fb\u72b6\u6001\u4e0d\u660e\u7684\u5987\u5973\n- Col\uff1a\u4e2d\u6821:Lieutenant Colonel(Lt. Col.)\u4e0a\u6821:Colonel(Col.)\n- Major\uff1a\u5c11\u6821\n- Mlle:\u5c0f\u59d0\n- Rev\uff1a\u7267\u5e08","f512b79b":"\u53ef\u4ee5\u770b\u51fa\uff0c\u5973\u6027\u4e58\u5ba2\u7684\u5e78\u5b58\u7387\u6bd4\u7537\u6027\u9ad8\u3002\n\n##### 2.1 \u7c7b\u522b\u578b Embarked\u3001\u7c7b\u522b\u578b Pclass\u3001\u7c7b\u522b\u578b Sex\u3001\u6570\u503c\u578b Survived 4\u8005\u4e4b\u95f4\u7684\u5173\u7cfb","7864d217":"\u6c42\u67d0\u4e00\u5217\u7684\u7f3a\u5931\u503c\u60c5\u51b5\n\n\u7531\u4e8e Dataframe \u6570\u636e\u4e2d\u9009\u62e9\u67d0\u4e00\u5217\u7684\u65b9\u5f0f\u6709 (\u6309\u7167\u5b57\u5178\u578b\u6807\u8bb0\u6216\u5c5e\u6027\u90a3\u6837\u68c0\u7d22\u4e3a Series)\n    - df.A \u7684\u5c5e\u6027\u65b9\u5f0f\n    - df['A'] \u7684\u65b9\u5f0f\n\u6240\u4ee5\u6c42\u67d0\u4e00\u5217\u7684\u7f3a\u5931\u503c\u60c5\u51b5\u4e5f\u6709\u4e24\u79cd\n    - df.A.isnull().sum()\n    - df['A'].isnull().sum()\n\n\u6839\u636e\u67d0\u4e00\u5217\u53bb\u9664\u7f3a\u5931\u503c\n    - df.A.isnull().dropna()\n    - df['A'].isnull().dropna()","736b75de":"##### \u77e5\u8bc6\u70b9\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\n\n- `\"([a-zA-Z]+)\"` \u8fd9\u4e2a\u8868\u793a\u81f3\u5c11\u5339\u914d1\u4e2a\u6216\u591a\u4e2a\u5927\/\u5c0f\u5199\u5b57\u6bcd\uff0c\u5e26\u5206\u7ec4\n    - . \u5339\u914d\u9664\u6362\u884c\u7b26\u4e4b\u5916\u7684\u4efb\u610f\u5b57\u7b26\n    - + \u5339\u914d\u524d\u9762\u7684\u5b57\u7b261\u6b21\u6216\u591a\u6b21\uff08>=1\uff09\n    - [a-zA-Z_] \u53ef\u4ee5\u5339\u914d\u4e00\u4e2a\u5b57\u6bcd\u65e0\u8bba\u5927\u5c0f\u5199\n\n- `re.compile(pattern, flags=0)`\n\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06\u6b63\u5219\u5b57\u7b26\u4e32\u7f16\u8bd1\u6210\u6b63\u8868\u8fbe\u5f0f\u5bf9\u8c61\uff08Pattern\u5bf9\u8c61\uff09\uff0c\u4ee5\u4fbf\u5728\u540e\u9762\u7684\u5339\u914d\u4e2d\u590d\u7528\n    ```\n    prog = re.compile(pattern)\n    result = prog.search(string)\n    ```\n    \u7b49\u4ef7\u4e8e\n    `result = re.search(pattern, string)`\n\n- \u5206\u7ec4\n\u53ef\u4ee5\u4f7f\u7528group(num) \u6216 groups() \u5339\u914d\u5bf9\u8c61\u51fd\u6570\u6765\u83b7\u53d6\u5339\u914d\u8868\u8fbe\u5f0f\u3002\n    - group(num=0) \u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32\n    - group() \u53ef\u4ee5\u4e00\u6b21\u8f93\u5165\u591a\u4e2a\u7ec4\u53f7\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u90a3\u4e9b\u7ec4\u6240\u5bf9\u5e94\u503c\u7684\u5143\u7ec4\u3002\n    - groups() \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u5c0f\u7ec4\u5b57\u7b26\u4e32\u7684\u5143\u7ec4\uff0c\u4ece 1 \u5230 \u6240\u542b\u7684\u5c0f\u7ec4\u53f7\u3002\n    \n- \u533f\u540d\u51fd\u6570\n`lambda x: x * x`\n\u5173\u952e\u5b57lambda\u8868\u793a\u533f\u540d\u51fd\u6570\uff0c\u5192\u53f7\u524d\u9762\u7684x\u8868\u793a\u51fd\u6570\u53c2\u6570\u3002\u7b49\u4ef7\u4e8e\n    ```\n    def f(x):\n        return x * x\n    ```\n\n- \u6620\u5c04\n    - Series \u6570\u636e\n        - s.map() \u90fd\u662f\u628a\u5bf9\u5e94\u7684\u6570\u636e\u9010\u4e2a\u5f53\u4f5c\u53c2\u6570\u4f20\u5165\u5230\u5b57\u5178\u6216\u51fd\u6570\u4e2d\uff0c\u5f97\u5230\u6620\u5c04\u540e\u7684\u503c\n            - \u4f7f\u7528\u5b57\u5178\u8fdb\u884c\u6620\u5c04\n            - \u4f7f\u7528\u51fd\u6570\u8fdb\u884c\u6620\u5c04\n        - s.apply() \u4f5c\u7528\u539f\u7406\u548cmap\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8eapply\u80fd\u591f\u4f20\u5165\u529f\u80fd\u66f4\u4e3a\u590d\u6742\u7684\u51fd\u6570(\u4f20\u5165map\u7684\u51fd\u6570\u53ea\u80fd\u63a5\u6536\u4e00\u4e2a\u53c2\u6570)\n    - DataFrame \u6570\u636e(\u9ed8\u8ba4 axis=1)  (axis=1\u4e3a\u6a2a\u5411\uff0caxis=0\u4e3a\u7eb5\u5411)\n        - df.apply() \u5c06\u51fd\u6570\u5e94\u7528\u5230\u6bcf\u884c\u6216\u8005\u6bcf\u4e00\u5217\u4e0a\u9762\n            - axis =1 \u5c06\u6bcf\u4e00\u884c\u6570\u636e\u4ee5Series\u7684\u5f62\u5f0f\uff08Series\u7684\u7d22\u5f15\u4e3a\u5217\u540d\uff09\u4f20\u5165\u6307\u5b9a\u51fd\u6570\n            - axis =0 \u5c06\u5404\u5217(columns)\u4ee5Series\u7684\u5f62\u5f0f\u4f5c\u4e3a\u53c2\u6570\uff0c\u4f20\u5165\u5230\u4f60\u6307\u5b9a\u7684\u64cd\u4f5c\u51fd\u6570\u4e2d \n        - df.applymap() \u5c06\u67d0\u51fd\u6570\u5e94\u7528\u5230\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a\n        \n- astype(int)\n    \u7528\u4e8e\u8f6c\u5316dateframe\u67d0\u4e00\u5217\u7684\u6570\u636e\u7c7b\u578b\n\n##### \u5904\u7406\u5176\u4ed6\u7279\u5f81 Embarked\u3001Fare - \u7f3a\u5931\u503c\u586b\u5145\n\n- \u8bad\u7ec3\u96c6\u4e2d Embarked \u7279\u5f81\u53ea\u67092\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u7528\u4f17\u6570\u8fdb\u884c\u586b\u8865\u3002\n- \u8bad\u7ec3\u96c6\u4e2d Fare \u7279\u5f81\u53ea\u67091\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u7528\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u8865\u3002\n- \u8bad\u7ec3\u96c6\u4e2d Cabin \u7279\u5f81\u6709687\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u7528\u5e38\u6570 \u2018U\u2019(Unknow) \u8fdb\u884c\u586b\u8865\u3002\n\n    - \u4f17\u503c\u586b\u5145\n        - `df.fillna(df.value_counts().index[0]) `\n        - `df.fillna(df.mode().iloc[0]) `\n\n    - \u4e2d\u4f4d\u6570\u586b\u5145\n    `df.fillna(df.median())` ","fe9a6311":"##### 2.4 \u6570\u503c\u578b SibSp\u3001 \u6570\u503c\u578b Parch\u3001 \u6570\u503c\u578b Survived 3\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\n\nSibSp \u548c Parch \u7ec4\u5408\u5728\u4e00\u8d77\u4f7f\u7528\u624d\u66f4\u6709\u610f\u4e49\uff0c\u7ec4\u5408\u8d77\u6765\u8868\u793a\u4e0e\u4e58\u5ba2\u540c\u884c\u7684\u4eb2\u5c5e\u4eba\u6570\u3002\u5e76\u8ba1\u7b97\u51fa\u5355\u72ec\u51fa\u884c\u548c\u975e\u5355\u72ec\u51fa\u884c\u7684\u4eba\u6570","be6b1f09":"#### \u7f16\u7801\n\n\u5728\u5f00\u59cb\u5efa\u6a21\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u6267\u884c\u7684\u6700\u540e\u4e00\u6b65\u662f\u5c06\u6211\u4eec\u6240\u6709\u7684\u5206\u7c7b\u7279\u5f81\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7b97\u6cd5\u53ea\u80fd\u63a5\u53d7\u4e00\u4e2a\u6570\u5b57\u6570\u7ec4\u4f5c\u4e3a\u8f93\u5165\uff0c\u800c\u4e0d\u662f\u540d\u5b57\u6216\u5b57\u6bcd\u3002\u6211\u4eec\u6709\u51e0\u4e2a\u5217\u8981\u8f6c\u6362\u3002\u6211\u4eec\u4f7f\u7528Pandas\u7684pd.get_dummies()\u65b9\u6cd5\uff0c\u5c06\u5206\u7c7b\u7279\u5f81\u8f6c\u6362\u4e3a\u6570\u5b57\u7279\u5f81\u3002\n\nLabel-Encoding, One-Hot-Encoder \u7f16\u7801\u533a\u522b\n[Categorical encoding using Label-Encoding and One-Hot-Encoder](https:\/\/towardsdatascience.com\/categorical-encoding-using-label-encoding-and-one-hot-encoder-911ef77fb5bd)","fbf07b26":"- Survied \u7684\u5747\u503c\u4e3a 0.383838\uff0c\u800c survied \u503c\u53ea\u67090\u62161\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5747\u503c\u53cd\u5e94\u4e86\u5b58\u6d3b\u7387\u3002\n    + \u6837\u672c\u5b58\u6d3b\u7387\u7ea638%\uff0c\u5b9e\u9645\u5b58\u6d3b\u7387\u4e3a32%(2224-1502\/2224=32.4%)\n    \n\u4ece\u76ee\u524d\u6765\u770b\uff0c\u8981\u6ce8\u610f\u51e0\u70b9\u3002\n\n- \u9700\u8981\u5c06\u975e\u6570\u503c\u578b\u7279\u5f81\u8f6c\u6362\u4e3a\u6570\u503c\u578b\u7279\u5f81\uff0c\u4ee5\u4fbf\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u540e\u671f\u5904\u7406\u3002\n- \u8fd9\u4e9b\u7279\u5f81\u7684\u8303\u56f4\u6709\u5f88\u5927\u7684\u5dee\u5f02\uff0c\u9700\u8981\u5c06\u5176\u8f6c\u6362\u4e3a\u5927\u81f4\u76f8\u540c\u7684\u5c3a\u5ea6\u3002\n- \u4e00\u4e9b\u7279\u5f81\u5305\u542b\u7f3a\u5931\u503c\uff08NaN = \u4e0d\u662f\u6570\u5b57\uff09\uff0c\u4eec\u9700\u8981\u5904\u7406\u3002\n\n#### \u6570\u636e\u96c6\u7f3a\u5931\u503c\u8be6\u60c5\n\n- `df.isnull()` \u8fd4\u56de\u8868\u660e\u54ea\u4e9b\u503c\u662f\u7f3a\u5931\u503c\u7684\u5e03\u5c14\u503c\n- `df.notnull()` \u8fd4\u56de\u8868\u660e\u54ea\u4e9b\u503c\u4e0d\u662f\u7f3a\u5931\u503c\u7684\u5e03\u5c14\u503c\n- `df.dropna()` \u6839\u636e\u6bcf\u4e2a\u6807\u7b7e\u7684\u503c\u662f\u5426\u662f\u7f3a\u5931\u6570\u636e\u6765\u7b5b\u9009\u8f74\u6807\u7b7e\uff0c\u5e76\u6839\u636e\u5141\u8bb8\u4e22\u5931\u7684\u6570\u636e\u91cf\u6765\u786e\u5b9a\u9600\u503c\n- `df.sort_values()` \u6392\u5e8f\uff0c\u9ed8\u8ba4\u5347\u5e8f\uff0cascending = False\u8868\u793a\u964d\u5e8f\n- `pd.concat([])` \u4f7f\u5bf9\u8c61\u5728\u8f74\u5411\u4e0a\u8fdb\u884c\u7c98\u5408\u6216\u201c\u5806\u53e0\u201c\uff0c\u9ed8\u8ba4\u662f\u6cbf\u7740 axis=0(\u884c) \u7684\u8f74\u5411\u3002axis=1 \u8868\u793a(\u5217)\u7684\u8f74\u5411\u3002\n- `round(x[, n])` \u65b9\u6cd5\u8fd4\u56de\u6d6e\u70b9\u6570x\u7684\u56db\u820d\u4e94\u5165\u503c,n\u5c0f\u6570\u70b9\u4f4d\u6570","e89fe534":"* \u8bad\u7ec3\u6570\u636e\u96c6\n    - \u884c\u6570 \uff1a 891\u4e2a\u6837\u672c\u5927\u5c0f\n    - \u5217\u6570 \uff1a12\uff0811\u4e2a\u7279\u5f81+1\u4e2a**\u76ee\u6807\u53d8\u91cf Survived**\uff09\n    - \u6570\u636e\u7c7b\u578b \uff1a 7\u4e2a\u7279\u5f81\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff0c5\u4e2a\u7279\u5f81\u662f\u5b57\u7b26\u4e32\n    - \u7f3a\u5931\u503c\u60c5\u51b5 \uff1aCabin > Age > Embarked  (\u6570\u91cf\u4ece\u5927\u5230\u5c0f\u6392\u5e8f)\n    - \u6570\u503c\u578b\u6570\u636e \uff1aPassengerId\uff0cAge\uff0cFare,SibSp,Parch\n    - \u7c7b\u522b\u6570\u636e \uff1aSurvived,Sex,Embarked,Pclass\n    - \u6df7\u5408\u578b\u6570\u636e\uff1aTicket,Cabin \n\n* \u6d4b\u8bd5\u6570\u636e\u96c6\n    - \u5217\u6570 \uff1a11\u4e2a\u7279\u5f81\n    - \u6570\u636e\u7c7b\u578b \uff1a 6\u4e2a\u7279\u5f81\u662f\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff0c5\u4e2a\u7279\u5f81\u662f\u5b57\u7b26\u4e32\n    - \u7f3a\u5931\u503c\u60c5\u51b5 \uff1aCabin > Age > Fare (\u6570\u91cf\u4ece\u5927\u5230\u5c0f\u6392\u5e8f)\n\n------\n\n**\u77e5\u8bc6\u70b9**\n* **\u7c7b\u522b\u6570\u636e(\u5b9a\u6027\u6570\u636e)**\n\n    \u6570\u636e\u88ab\u5212\u5206\u4e3a\u5404\u79cd\u7c7b\u522b\uff0c\u7528\u4ee5\u63cf\u8ff0\u67d0\u7c7b\u5f97\u6027\u8d28\u6216\u7279\u5f81\u3002\u56e0\u6b64\uff0c\u7c7b\u522b\u6570\u636e\u4e5f\u79f0\u4e3a\u5b9a\u6027\u6570\u636e\u3002\u6e38\u620f\u79cd\u7c7b\u5c31\u662f\u5b9a\u6027\u6570\u636e\u7684\u4e00\u4e2a\u5b9e\u4f8b \u2014\u2014 \u6bcf\u79cd\u6e38\u620f\u79cd\u7c7b\u5f62\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u7c7b\u522b\u3002\u5173\u4e8e\u5b9a\u6027\u6570\u636e\uff0c\u8bf7\u8bb0\u4f4f\u4e00\u4e2a\u91cd\u70b9\uff1a\u4e0d\u80fd\u5c06\u6570\u636e\u503c\u7406\u89e3\u4e3a\u6570\u5b57\u3002\n    \n\n* **\u6570\u503c\u578b\u6570\u636e(\u5b9a\u91cf\u6570\u636e)**\n\n    \u6570\u503c\u578b\u6570\u636e\u4e0d\u540c\uff0c\u5b83\u6240\u6d89\u53ca\u7684\u662f\u6570\u5b57\u3002\u6570\u503c\u578b\u6570\u636e\u4e2d\u7684\u6570\u503c\u5177\u6709\u6570\u5b57\u7684\u610f\u4e49\uff0c\u4f46\u8fd8\u6d89\u53ca\u8ba1\u91cf\u6216\u8ba1\u6570\u3002\u7531\u4e8e\u6570\u503c\u578b\u6570\u636e\u63cf\u8ff0\u7684\u662f\u6570\u91cf\uff0c\u6240\u4ee5\u4e5f\u79f0\u4e3a\u5b9a\u91cf\u6570\u636e\u3002\n\n------\n\n#### \u6570\u636e\u96c6\u7684\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\n\n`df.describe()` \u8fd4\u56de\u6570\u636e\u6570\u503c\u60c5\u51b5\uff0c\u6570\u503c\u6570\u636e\u7684\u5b57\u6bb5\u5185\u5bb9\uff1acount\u8ba1\u6570\uff0cmean\u5e73\u5747\u6570\uff0cstd\u65b9\u5dee\uff0cmin\u6700\u5c0f\u503c\uff0c\u56db\u5206\u4f4d\u6570\uff0cmax \u6700\u5927\u503c ","61a10651":"Oliva y Ocana, **Dona**. Fermina\u3002\u8fd9\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u6ca1\u6709\u9047\u5230\u8fd9\u4e2a\u79f0\u8c13\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u7684Dona\u662f\u5973\u58eb\u7684\u5c0a\u79f0\u3002","0df4de43":"\u53ef\u4ee5\u770b\u51fa\n\n- \u5bf9\u4e8e\u7537\u6027\u6765\u8bf4\uff0c\u5927\u698220\u5c81\u523035\u5c81\u4e4b\u95f4\u7684\u5b58\u6d3b\u7387\u8f83\u9ad8\u7684\uff1b5\u5c81\u523018\u5c81\u4e4b\u95f4\u7684\u5b58\u6d3b\u6982\u7387\u5f88\u4f4e\uff0c\n- \u5bf9\u4e8e\u5973\u6027\u6765\u8bf4\uff0c\u5927\u698215\u5c81\u523040\u5c81\u4e4b\u95f4\u7684\u5b58\u6d3b\u6982\u7387\u66f4\u9ad8\n- \u65e0\u8bba\u7537\u5973\uff0c\u5a74\u513f\u7684\u5b58\u6d3b\u6982\u7387\u4f1a\u9ad8\u4e00\u70b9\u3002\n\n\u4f3c\u4e4e\u6709\u4e00\u4e9b\u7279\u5b9a\u7684\u5e74\u9f84\u6bb5\uff0c\u5b58\u6d3b\u51e0\u7387\u4f1a\u589e\u52a0\u3002\u4e0b\u9762\u6765\u89c2\u5bdf Age \u548c Survived \u7684\u5173\u7cfb\n\n###### 1.2 \u6570\u503c\u578b Age\u3001 \u7c7b\u522b\u578b Survived \u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\n\nFacetGrid\u5f53\u60a8\u60f3\u8981\u5728\u6570\u636e\u96c6\u7684\u5b50\u96c6\u4e2d\u5206\u522b\u53ef\u89c6\u5316\u53d8\u91cf\u7684\u5206\u5e03\u6216\u591a\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u65f6\uff0c\u8be5\u7c7b\u975e\u5e38\u6709\u7528\u3002\u4e00\u4e2aFacetGrid\u53ef\u4ee5\u4e0e\u591a\u8fbe\u4e09\u4e2a\u7ef4\u5ea6\u53ef\u4ee5\u5f97\u51fa\uff1arow\uff0ccol\uff0c\u548chue\u3002\u524d\u4e24\u4e2a\u4e0e\u5f97\u5230\u7684\u8f74\u9635\u5217\u6709\u660e\u663e\u7684\u5bf9\u5e94\u5173\u7cfb; \u5c06\u8272\u8c03\u53d8\u91cf\u89c6\u4e3a\u6cbf\u6df1\u5ea6\u8f74\u7684\u7b2c\u4e09\u4e2a\u7ef4\u5ea6\uff0c\u5176\u4e2d\u4e0d\u540c\u7684\u7ea7\u522b\u7528\u4e0d\u540c\u7684\u989c\u8272\u7ed8\u5236\u3002\n\n```\nFacetGrid(data,\u00a0row=None,\u00a0col=None,\u00a0hue=None,\u00a0col_wrap=None,\u00a0sharex=True,\u00a0sharey=True,\u00a0height=3,\u00a0aspect=1,\u00a0palette=None,\u00a0row_order=None,\u00a0col_order=None,\u00a0hue_order=None,\u00a0hue_kws=None,\u00a0dropna=True,\u00a0legend_out=True,\u00a0despine=True,\u00a0margin_titles=False,\u00a0xlim=None,\u00a0ylim=None,\u00a0subplot_kws=None,\u00a0gridspec_kws=None,\u00a0size=None)\n```\n\n- col \u5217\u4e0a\u7684\u53d8\u91cf(\u5de6\u53f3)\n- row \u884c\u4e0a\u7684\u53d8\u91cf(\u4e0a\u4e0b)\n\n\u8fd9\u91cc\u5c06 FacetGrid \u51fd\u6570\u7528\u4e8e\u4e0d\u540c\u5b58\u6d3b\u7387\u7684\u503c\uff0c\u72ec\u7acb\u5206\u6210\u4e24\u4e2a\u76f4\u65b9\u56fe\u3002","a41d4b5a":"#### \u5904\u7406\u7279\u5f81 SibSp \u548c Parch - \u521b\u5efa\u65b0\u7684\u7279\u5f81 FamilySize ","8abbf475":"#### \u5904\u7406\u7279\u5f81 Name - \u521b\u5efa\u65b0\u7684\u7279\u5f81:\u4e58\u5ba2\u79f0\u8c13\n\n\u5728\u67e5\u770b\u4e58\u5ba2\u59d3\u540d\u65f6\uff0c\u4eba\u4eec\u53ef\u80fd\u60f3\u77e5\u9053\u5982\u4f55\u5904\u7406\u5b83\u4eec\u4ee5\u63d0\u53d6\u6709\u7528\u7684\u4fe1\u606f\u3002\u5982\u679c\u4f60\u4ed4\u7ec6\u770b\u770b\u8fd9\u4e9b\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n- Braund, Mr. Owen Harris\n- Heikkinen, Miss. Laina\n- Peter, Master. Michael J\n\n\u4f60\u4f1a\u6ce8\u610f\u5230\u6bcf\u4e2a\u540d\u5b57\u90fd\u6709\u4e00\u4e2a\u79f0\u8c13\uff01\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f\u59d0\uff08Miss.\uff09\u6216\u592a\u592a\uff08Mrs.\uff09\uff0c\u4f46\u5b83\u6709\u65f6\u53ef\u80fd\u50cf Master\uff0cSir \u90a3\u6837\u66f4\u590d\u6742\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5bf9\u79f0\u8c13\u8fdb\u884c\u5927\u7684\u5206\u7c7b\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u5c06\u5982\u4f55\u5728\u4e0b\u9762\u7684\u51fd\u6570\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\n\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b\u5728\u8bad\u7ec3\u96c6\u4e2d\u6709\u4ec0\u4e48\u4e0d\u540c\u7684\u79f0\u8c13\u3002","43965e13":"\u89c2\u5bdf\uff1a\n- \u540c\u884c\u5bb6\u5c5e\u57281\u52303\u4f4d\u7684\u5b58\u6d3b\u7387\u8f83\u9ad8\n- \u9664\u4e866\u4f4d\uff0c\u540c\u884c\u5bb6\u5c5e\u53ea\u67091\u4f4d\u6216\u8005\u8d85\u8fc73\u4f4d\u7684\u5b58\u6d3b\u7387\u8f83\u4f4e\n\n\u51b3\u7b56\uff1a\n- \u7eb3\u5165\u6a21\u578b\n\n### \u7279\u5f81\u5de5\u7a0b\n\n\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u90fd\u9700\u8981\u5904\u7406\uff0c\u6240\u4ee5\u5c06\u5176\u5408\u5e76\u3002\n\n\u65b9\u6cd5\n- \u5220\u9664\u65e0\u5173\u7279\u5f81\n- \u521b\u5efa\u65b0\u7684\u7279\u5f81(\u6839\u636e\u5df2\u6709\u7279\u5f81\uff0c\u6316\u6398\u6709\u6548\u4fe1\u606f\u521b\u5efa\u65b0\u7684\u7279\u5f81)\n- \u5904\u7406\u7f3a\u5931\u503c\n    \u6839\u636e\u4e4b\u524d\u6211\u4eec\u77e5\u6653\u7684\u7f3a\u5931\u503c\u60c5\u51b5,\u5bf9\u5176\u4e00\u4e00\u5904\u7406\n    * \u8bad\u7ec3\u6570\u636e\u96c6\n        + Embarked \u7279\u5f81\u53ea\u67092\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u586b\u8865\u3002\n        + Age \u7279\u5f81\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u5b83\u6709177\u4e2a\u7f3a\u5931\u503c\u3002\n        + Cabin \u7279\u5f81\u9700\u8981\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u4f46\u770b\u8d77\u6765\u53ef\u80fd\u8981\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u5b83\uff0c\u56e0\u4e3a\u7f3a\u5931\u503c\u6bd4\u4f8b\u9ad8\u8fbe 77%\u3002\n    * \u6d4b\u8bd5\u6570\u636e\u96c6\n        + Fare \u7279\u5f81\u53ea\u67092\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u586b\u8865\u3002\n        + Age \u7279\u5f81\u670986\u4e2a\u7f3a\u5931\u503c\u3002\n        + Cabin \u7279\u5f81\u9700\u8981\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u4f46\u770b\u8d77\u6765\u53ef\u80fd\u8981\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u5b83\uff0c\u56e0\u4e3a\u7f3a\u5931\u503c\u6bd4\u4f8b\u9ad8\u8fbe 78.2%\u3002","993185b5":"#### \u5904\u7406\u7279\u5f81 PassengerId - \u5220\u9664\u7279\u5f81\n\n\u8bad\u7ec3\u96c6\u4e2d\u5220\u9664\u7279\u5f81 PassengerId\uff0c\u56e0\u4e3a\u5b83\u5e76\u4e0d\u4f1a\u5bf9\u751f\u5b58\u7387\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002\u76ee\u524d\u4e0d\u80fd\u5220\u9664\u6d4b\u8bd5\u96c6\u4e2d PassengerId\uff0c\u56e0\u4e3a\u8981\u63d0\u4ea4\u3002","1421422b":"\u521d\u6b65\u5224\u65ad\uff0c\u9664\u4e86PassengerId\u3001Ticket\u548c Name\u4e4b\u5916,\u5176\u4ed6\u7279\u5f81\u90fd\u53ef\u80fd\u4e0e\u5b58\u6d3b\u6709\u5173\u3002\n\n##### 1.1 \u6570\u503c\u578b Age\u3001\u7c7b\u522b\u578b Sex\u3001\u7c7b\u522b\u578b Survived \u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb:\n\n* \u9996\u5148\u5c06\u6570\u636e\u6309\u7167\u6027\u522b(Female, Male)\u5212\u5206 \n* \u57fa\u4e8e\u6027\u522b\uff0c\u518d\u6839\u636e\u5b58\u6d3b\u72b6\u6001(Survived,Not_Survived)\u5212\u5206 \n* \u5c31\u4f1a\u6709\u56db\u79cd\u642d\u914d\n        - Female & Survived\n        - Female & Not_Survived\n        - Male & Survived\n        - Male & Not_Survived\n* \u9274\u4e8e Age \u7279\u5f81\u6709\u7f3a\u5931\u503c\uff0c\u5728\u6b64\u5904\u53ef\u89c6\u5316\u5206\u6790\u65f6\uff0c\u9700\u8981\u53bb\u9664 Age \u7684\u7f3a\u5931\u503c","1e8dd969":"\u5bf9 NAN \u586b\u5145\"U0\"\uff0c\u53bb\u91cd\uff0c\u53ef\u4ee5\u770b\u5230\u7532\u677f\u53f7\uff0c\u8bad\u7ec3\u96c6\u4eceA\u5230G,\u7136\u540eT\uff0c\u800c\u6d4b\u8bd5\u96c6\u662f\u4eceA\u5230G\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0d\u5b58\u5728\u4e8e\u8bad\u7ec3\u96c6\u4e2d\u7684\u5939\u677f\u53f7\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u7279\u5f81\u8f6c\u6362\u6210\u4e00\u4e2a\u6570\u5b57\u53d8\u91cf\u3002\u7f3a\u5c11\u7684\u503c\u5c06\u88ab\u8f6c\u6362\u4e3a\u96f6\u3002","eb4e7290":"\u77e5\u8bc6\u70b9 **astype(int)**\n\n\u7528\u4e8e\u8f6c\u5316dateframe\u67d0\u4e00\u5217\u7684\u6570\u636e\u7c7b\u578b\n\n\u5982\u4e0b\u5c06dateframe\u67d0\u5217\u7684str\u7c7b\u578b\u8f6c\u4e3aint\uff0c\u6ce8\u610fastype()\u6ca1\u6709replace=True\u7684\u7528\u6cd5\uff0c\u60f3\u8981\u5728\u539f\u6570\u636e\u4e0a\u4fee\u6539\uff0c\u8981\u5199\u6210\u5982\u4e0b\u5f62\u5f0f\u3002\n\n`app_train[['uid','index']] = app_train[['uid','index']].astype(int)`\n\n\u6ce8\u610f\u53ea\u6709\u5f53\u8be5\u5217\u7684\u5b57\u7b26\u4e32\u5168\u662f\u7531\u7eaf\u6570\u5b57\u6784\u6210\u65f6\u624d\u53ef\u4ee5\u8fd9\u6837\u5199\uff0c\u5982\u679c\u6df7\u6709\u5b57\u6bcd\uff0c\u4f1a\u62a5\u9519\uff1aValueError: invalid literal for int() with base 10\n\n\u5229\u7528int()\u51fd\u6570\u8f6c\u5b57\u7b26\u4e32\u4e5f\u7c7b\u4f3c\n\nisdigit()\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u7531\u7eaf\u6570\u5b57\u6784\u6210\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue,\u5426\u5219False","1f3cfa36":"* \u8bad\u7ec3\u6570\u636e\u96c6\n    + Embarked \u7279\u5f81\u53ea\u67092\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u586b\u8865\u3002\n    + Age \u7279\u5f81\u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u5b83\u6709177\u4e2a\u7f3a\u5931\u503c\u3002\n    + Cabin \u7279\u5f81\u9700\u8981\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u4f46\u770b\u8d77\u6765\u53ef\u80fd\u8981\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u5b83\uff0c\u56e0\u4e3a\u7f3a\u5931\u503c\u6bd4\u4f8b\u9ad8\u8fbe 77%\u3002\n* \u6d4b\u8bd5\u6570\u636e\u96c6\n    + Fare \u7279\u5f81\u53ea\u67091\u4e2a\u7f3a\u5931\u7684\u503c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u586b\u8865\u3002\n    + Age \u7279\u5f81\u670986\u4e2a\u7f3a\u5931\u503c\u3002\n    + Cabin \u7279\u5f81\u9700\u8981\u8fdb\u4e00\u6b65\u8c03\u67e5\uff0c\u4f46\u770b\u8d77\u6765\u53ef\u80fd\u8981\u4ece\u6570\u636e\u96c6\u4e2d\u5220\u9664\u5b83\uff0c\u56e0\u4e3a\u7f3a\u5931\u503c\u6bd4\u4f8b\u9ad8\u8fbe 78.2%\u3002\n\nisnull\u7528\u6cd5 \n\n- df.isnull()  #\u5143\u7d20\u4e3a\u7a7a\u6216\u8005NA\u5c31\u663e\u793aTrue\uff0c\u5426\u5219\u5c31\u662fFalse\n- df.isnull().any()  #\u5224\u65ad\u54ea\u4e9b\u5217\u5305\u542b\u7f3a\u5931\u503c\uff0c\u8be5\u5217\u5b58\u5728\u7f3a\u5931\u503c\u5219\u8fd4\u56deTrue\uff0c\u53cd\u4e4bFalse\u3002\n\n\u5bf9\u6bd4count() \u3001isnull().count()\u548cisnull().sum()\n\n- df.count() #\u6bcf\u4e00\u5217\u4e2d\u975e\u7f3a\u5931\u503c\u7684\u4e2a\u6570\n- df.isnull().count() #\u6bcf\u4e00\u5217\u603b\u5143\u7d20\u4e2a\u6570\n- df.isnull().sum() #\u6bcf\u5217\u7f3a\u5931\u6570\u636e\u7684\u4e2a\u6570","906553b7":"# \u6cf0\u5766\u5c3c\u514b\u53f7\u5e78\u5b58\u8005\u9884\u6d4b \n\n## \u6570\u636e\u79d1\u5b66\u5206\u6790\u57fa\u672c\u6d41\u7a0b\n\nData Science Solutions book \u8fd9\u672c\u4e66\u4e3a\u7c7b\u4f3c Kaggle \u7f51\u7ad9\u4e0a\u89e3\u51b3\u6570\u636e\u79d1\u5b66\u7ade\u8d5b\u95ee\u9898\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u5206\u6790\u6d41\u7a0b\uff1a\n\n- \u5b9a\u4e49\u95ee\u9898\n- \u83b7\u53d6\u8bad\u7ec3\u6570\u636e\u4ee5\u53ca\u6d4b\u8bd5\u6570\u636e\n- \u52a0\u5de5\u3001\u51c6\u5907\u4ee5\u53ca\u6e05\u6d17\u6570\u636e\n- \u5206\u6790\u3001\u8bc6\u522b\u6570\u636e\u7684\u6a21\u5f0f\uff0c\u5e76\u5bf9\u6570\u636e\u505a\u53ef\u89c6\u5316\n- \u5efa\u6a21\u3001\u9884\u6d4b\uff0c\u5e76\u89e3\u51b3\u95ee\u9898\n- \u5bf9\u7ed3\u679c\u505a\u53ef\u89c6\u5316\uff0c\u751f\u6210\u62a5\u544a\uff0c\u5e76\u4e14\u5c55\u793a\u95ee\u9898\u7684\u89e3\u51b3\u6b65\u9aa4\u548c\u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\n- \u63d0\u4ea4\u7ed3\u679c\n\n\u73b0\u5b9e\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u4e25\u683c\u9075\u5faa\u4ee5\u4e0a\u6d41\u7a0b\uff1a\n\n- \u53ef\u80fd\u4f1a\u7ed3\u5408\u591a\u4e2a\u6b65\u9aa4\u3002\u4f8b\u5982\uff0c\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u5c31\u5f00\u59cb\u7528\u53ef\u89c6\u5316\n- \u63d0\u524d\u6267\u884c\u67d0\u4e2a\u6b65\u9aa4\u3002\u4f8b\u5982,\u6570\u636e\u52a0\u5de5\u524d\u540e\u90fd\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\n- \u591a\u6b21\u6267\u884c\u67d0\u4e2a\u6b65\u9aa4\u3002\u4f8b\u5982\uff0c\u591a\u6b21\u5bf9\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\n- \u5b8c\u5168\u5f03\u7528\u4e00\u4e2a\u6b65\u9aa4\u3002\u4f8b\u5982\u5728\u975e\u7ade\u8d5b\u573a\u5408\u53ef\u80fd\u5e76\u4e0d\u9700\u8981\u505a\u63d0\u4ea4\u7ed3\u679c\u7684\u6b65\u9aa4\n\n## \u6d41\u7a0b\u76ee\u6807\n\n\u4e3b\u8981\u67097\u4e2a\u76ee\u6807\uff1a\n\n- **\u5206\u7c7b**\uff1a\u53ef\u80fd\u8981\u5bf9\u6211\u4eec\u7684\u6837\u672c\u8fdb\u884c\u5206\u7c7b\u3002\u6211\u4eec\u53ef\u80fd\u4e5f\u5e0c\u671b\u4e86\u89e3\u4e0d\u540c\u7c7b\u548c\u6211\u4eec\u7684\u76ee\u6807\u4e4b\u95f4\u7684\u5173\u8054\u3002\n- **\u76f8\u4e92\u6027**\uff1a\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bad\u7ec3\u96c6\u91cc\u53ef\u7528\u7684\u7279\u5f81\u6765\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u3002\u90a3\u5230\u5e95\u5728\u6570\u636e\u96c6\u91cc\u7684\u54ea\u4e9b\u7279\u5f81\u4f1a\u5bf9\u89e3\u51b3\u95ee\u9898\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\u5462\uff1f\u4ece\u7edf\u8ba1\u5b66\u4e0a\u6765\u8bf4\uff0c\u662f\u5426\u5728\u67d0\u4e2a\u7279\u5f81\u4e0e\u95ee\u9898\u7684\u89e3\u4e4b\u95f4\u5b58\u5728\u67d0\u79cd\u8054\u7cfb\uff1f\u5982\u679c\u8fd9\u4e2a\u7279\u5f81\u7684\u503c\u6539\u53d8\u540e\uff0c\u76f8\u5e94\u95ee\u9898\u7684\u89e3\u662f\u5426\u4e5f\u4f1a\u6539\u53d8\u5462\uff1f\u53cd\u8fc7\u6765\u7684\u60c5\u51b5\u662f\u5426\u4e5f\u662f\u5982\u6b64\u5462\uff1f\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6570\u636e\u96c6\u91cc\u7684\u6570\u503c\u578b\u4ee5\u53ca\u79bb\u6563\u578b\u7684\u7279\u5f81\u505a\u6d4b\u8bd5\u6765\u5f97\u5230\u3002\u6211\u4eec\u53ef\u80fd\u4e5f\u5e0c\u671b\u5f97\u5230\u7279\u5f81\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5f97\u5230\u7279\u5f81\u4e0e\u95ee\u9898\u89e3\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u627e\u5230\u4e00\u4e9b\u7279\u5b9a\u5c5e\u6027\u4e4b\u95f4\u7684\u5173\u8054\u6027\u53ef\u80fd\u4f1a\u5728\u521b\u5efa\u3001\u8865\u5168\u4ee5\u53ca\u4fee\u6b63\u7279\u5f81\u4e0a\u8d77\u5230\u4e00\u5b9a\u4f5c\u7528\n- **\u8f6c\u6362**\uff1a\u5bf9\u4e8e\u5efa\u6a21\u9636\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u53bb\u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u3002\u6839\u636e\u6a21\u578b\u7684\u7b97\u6cd5\uff0c\u53ef\u80fd\u9700\u8981\u5c06\u7279\u5f81\u503c\u5168\u90e8\u8f6c\u5316\u4e3a\u6570\u5b57\u503c\u3002\u4f8b\u5982\u628a\u6587\u672c\u7279\u5f81\u503c\u8f6c\u5316\u4e3a\u6570\u5b57\u503c\u3002\n- **\u586b\u7f3a**\uff1a\u6570\u636e\u7684\u51c6\u5907\u5de5\u4f5c\u4e2d\u53ef\u80fd\u4e5f\u9700\u8981\u6211\u4eec\u53bb\u4f30\u8ba1\u4e00\u4e9b\u7279\u5f81\u7684\u7f3a\u5931\u503c\uff0c\u5f53\u6ca1\u6709\u7f3a\u5931\u503c\u65f6\uff0c\u6a21\u578b\u7b97\u6cd5\u53ef\u80fd\u6548\u679c\u6700\u597d\u3002\n- **\u4fee\u6b63**\uff1a\u6211\u4eec\u4e5f\u53ef\u4ee5\u53bb\u5206\u6790\u6570\u636e\u96c6\u4e2d\u7684\u9519\u8bef\u4ee5\u53ca\u53ef\u80fd\u5b58\u5728\u7684\u5f02\u5e38\u7279\u5f81\u503c\uff0c\u4ece\u800c\u53bb\u4fee\u6b63\u8fd9\u4e9b\u5305\u542b\u9519\u8bef\u503c\u7684\u6837\u672c\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u68c0\u6d4b\u6837\u672c\u6216\u7279\u5f81\u4e2d\u7684\u5f02\u5e38\u503c\u3002\u5982\u679c\u4e00\u4e2a\u7279\u5f81\u4e0d\u9002\u5408\u5206\u6790\uff0c\u6216\u8005\u4f1a\u4e25\u91cd\u5f71\u54cd\u7ed3\u679c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b8c\u5168\u820d\u5f03\u6389\u5b83\u3002\n- **\u521b\u9020**\uff1a\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5df2\u5b58\u5728\u7684\u7279\u5f81\u6216\u8005\u7279\u5f81\u5e8f\u5217\u6765\u521b\u5efa\u65b0\u7684\u7279\u5f81\uff0c\u4f7f\u5f97\u65b0\u7279\u5f81\u7b26\u5408\u76f8\u5173\u6027\u3001\u8f6c\u6362\u4ee5\u53ca\u5b8c\u6574\u6027\u76ee\u6807\n- **\u5236\u56fe**\uff1a\u5982\u4f55\u6839\u636e\u539f\u6570\u636e\u96c6\u4ee5\u53ca\u8981\u89e3\u51b3\u95ee\u9898\uff0c\u5bf9\u6570\u636e\u505a\u5408\u9002\u7684\u53ef\u89c6\u5316\u56fe \n\n\n\n## \u5b9a\u4e49\u95ee\u9898\n\n\n\u201c\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5728\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u4e58\u5ba2\u7684\u5177\u4f53\u6570\u636e\u4ee5\u53ca\u4ed6\u4eec\u662f\u5426\u5728\u90a3\u6b21\u707e\u96be\u4e2d\u5b58\u6d3b\u7684\u4fe1\u606f\u3002\u53c2\u8d5b\u8005\u80fd\u5426\u901a\u8fc7\u5df2\u6709\u7684\u8bad\u7ec3\u6570\u636e\u8bad\u7ec3\u51fa\u4e00\u4e2a\u6a21\u578b\uff0c\u6b64\u6a21\u578b\u9700\u8981\u6839\u636e\u8f93\u5165\u7684\u6d4b\u8bd5\u6570\u636e\u91cc\u4e58\u5ba2\u4fe1\u606f\uff0c\u6765\u9884\u6d4b\u6b64\u4e58\u5ba2\u662f\u5426\u80fd\u5728\u707e\u96be\u4e2d\u5b58\u6d3b\u201d\n\n\u6211\u4eec\u53ef\u80fd\u4e5f\u60f3\u8981\u901a\u8fc7\u95ee\u9898\u63cf\u8ff0\u83b7\u53d6\u66f4\u591a\u6709\u5173\u6b64\u95ee\u9898\u7684\u4fe1\u606f\u3002\u5728\u6b64\u95ee\u9898\u7684\u63cf\u8ff0\u4e2d\uff0c\u6bd4\u8f83\u6709\u610f\u4e49\u7684\u63cf\u8ff0\u5982\u4e0b\uff1a\n    - \u6cf0\u5766\u5c3c\u514b\u53f7\u57281912\u5e744\u670815\u65e5\u4e0e\u51b0\u5c71\u78b0\u649e\u540e\u6c89\u6ca1\u3002\u5728\u4e00\u51712224\u540d\u4e58\u5ba2\u4e0e\u8239\u5458\u91cc\uff0c\u67091502\u4eba\u4e0d\u5e78\u901d\u4e16\u3002\u8fd9\u4e2a\u4fe1\u606f\u5373\u8868\u660e\u4e86\u6b64\u6b21\u4e8b\u4ef6\u4e2d\u751f\u8fd8\u7387\u4e3a32%\u3002\n    - \u4e00\u4e2a\u4f7f\u5f97\u5728\u8fd9\u6b21\u707e\u96be\u4e2d\u6709\u5982\u6b64\u4e4b\u5927\u6b7b\u4ea1\u7387\u7684\u539f\u56e0\u662f\uff1a\u5728\u8239\u4e0a\u6ca1\u6709\u8db3\u591f\u7684\u6551\u751f\u8239\u63d0\u4f9b\u7ed9\u4e58\u5ba2\u4ee5\u53ca\u8239\u5458\n    - \u5c3d\u7ba1\u5728\u6b64\u6b21\u707e\u96be\u4e2d\u751f\u8fd8\u5b58\u5728\u8fd0\u6c14\u7684\u6210\u5206\uff0c\u4f46\u662f\u4ecd\u65e7\u4f1a\u6709\u4e9b\u7fa4\u4f53\u7684\u751f\u8fd8\u7387\u9ad8\u4e8e\u5176\u4ed6\u4eba\uff0c\u5982\u5973\u4eba\u3001\u5c0f\u5b69\uff0c\u4ee5\u53ca\u4e0a\u7b49\u4ed3\u7684\u4eba\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n### \u53c2\u8003\u6587\u7ae0\n- [How I scored in the top 9% of Kaggle\u2019s Titanic Machine Learning Challenge\n](https:\/\/medium.com\/i-like-big-data-and-i-cannot-lie\/how-i-scored-in-the-top-9-of-kaggles-titanic-machine-learning-challenge-243b5f45c8e9)\n- [How to score 0.8134 in Titanic Kaggle Challenge(https:\/\/www.ahmedbesbes.com\/blog\/kaggle-titanic-competition)\n- [Predicting the Survival of Titanic Passengers](https:\/\/towardsdatascience.com\/predicting-the-survival-of-titanic-passengers-30870ccc7e8)\n\n### \u5bfc\u5165\u76f8\u5173\u5e93\n\n\u5bfc\u5165\u9700\u8981\u7684\u5e93\uff0c\u540c\u65f6\uff0c\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u8bbe\u7f6e\u3002","9a9a0009":"\u6211\u4eec\u7684\u6570\u636e\u73b0\u5728\u5df2\u7ecf\u662f\u6211\u4eec\u9700\u8981\u7684\u683c\u5f0f\uff0c\u4f7f\u7528\u4e4b\u524d\u7684 train_idx \u548c test_idx \u7d22\u5f15\u5206\u79bb\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\n\n\u8fd8\u5c06\u628a\u8bad\u7ec3\u96c6\u5206\u6210X\uff0c\u4ee3\u8868\u9884\u6d4b\u53d8\u91cf\uff0cy \u4ee3\u8868\u6211\u4eec\u7684\u76ee\u6807\u53d8\u91cf\uff0c\u5373 Survived \u7279\u5f81\u3002\n\n- \uff1f\u95ee\u9898\uff1aSurvived \u7279\u5f81\u5408\u5e76\u524d\u662f int64 \u7684\u683c\u5f0f\uff0c\u4e3a\u4ec0\u4e48\u5408\u5e76\u540e\u53d8\u6210\u4e86 float64 \u7684\u683c\u5f0f\n- \uff1f\u95ee\u9898\uff1a\u8b66\u544a\u9700\u8981\u89e3\u51b3","a5ae2659":"#### \u5904\u7406\u7279\u5f81 Cabin - \u521b\u5efa\u65b0\u7684\u7279\u5f81 Deck\n\u8239\u8231\u53f7\u7801'C123'\uff0c\u770b\u8d77\u6765\u5b57\u6bcd\u4ee3\u8868\u7684\u662f\u7532\u677f\u53f7\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u63d0\u53d6\u8fd9\u4e9b\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7279\u5f81\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u4eba\u7684\u7532\u677f\u533a\u57df","857f3c56":"\u77e5\u8bc6\u70b9\uff1a**value_counts() \u65b9\u6cd5**\n\n\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217 Series\uff0c\u8be5\u5e8f\u5217\u5305\u542b\u6bcf\u4e2a\u503c\u7684\u6570\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6570\u636e\u6846\u4e2d\u7684\u4efb\u4f55\u5217\uff0cvalue-counts () \u65b9\u6cd5\u4f1a\u8fd4\u56de\u8be5\u5217\u6bcf\u4e2a\u9879\u7684\u8ba1\u6570\u3002\n\n- \u5bf9\u8be5\u5217\u4e2d\u51fa\u73b0\u7684\u6bcf\u4e2a\u503c\u8fdb\u884c\u8ba1\u6570(\u65e0\u6548\u503c\u4f1a\u88ab\u6392\u9664)  \u9ed8\u8ba4\u964d\u5e8f\u6392\u5e8f\n    - `value_counts(ascending=True)` \u5347\u5e8f\n- \u6c42\u5404\u4e2a\u503c\u7684\u76f8\u5bf9\u9891\u7387\n    - `value_counts(normalize=True)`","b329cd6d":"### \u5efa\u6a21","6c6889ee":"\u6b64 dataframe \u5c06\u5e2e\u52a9\u6211\u4eec\u6839\u636e\u4e0d\u540c\u7684\u6807\u51c6\u4f30\u7b97\u7f3a\u5931\u7684\u5e74\u9f84\u503c\u3002\u67e5\u770b\u4e2d\u4f4d\u5e74\u9f84\u5217\uff0c\u770b\u770b\u8fd9\u4e2a\u503c\u5982\u4f55\u6839\u636e Sex\uff0cPclass \u548c Title \u7ec4\u5408\u5728\u4e00\u8d77\u3002\n\u4f8b\u5982\uff1a\n\n- \u5982\u679c\u4e58\u5ba2\u662f\u5973\u6027\uff0c\u5219\u6765\u81ea Pclass 1 \u548c\u6765\u81ea\u738b\u5ba4\uff08royalty\uff09\uff0c\u4e2d\u4f4d\u5e74\u9f84\u4e3a40.5\u5c81\u3002\n- \u5982\u679c\u4e58\u5ba2\u662f\u7537\u6027\uff0c\u6765\u81ea Pclass 3\uff0c\u62e5\u6709 Mr \u79f0\u8c13\uff0c\u5219\u5e74\u9f84\u4e2d\u4f4d\u6570\u4e3a26\u5c81\u3002\n\n\u7528\u4e0d\u540c\u7ec4\u5408\u7684\u7684\u4e2d\u4f4d\u6570\u5e74\u9f84\u586b\u5145\u7f3a\u5931\u7684\u5e74\u9f84\u3002","b48a415c":"**Survived \u5217\u662f\u76ee\u6807\u53d8\u91cf\uff0c\u8fd9\u662f\u6211\u4eec\u8981\u9884\u6d4b\u7684\u53d8\u91cf\u3002** \u5982\u679c Survived \u4e3a 1\uff0c\u4e58\u5ba2\u5e78\u514d\u4e8e\u96be\uff0c\u4e3a 0\uff0c\u8868\u793a\u672a\u5b58\u6d3b\u3002\n\nSurvived |  \u662f\u5426\u5b58\u6d3b\n-|-\n0 | \u6b7b\u4ea1\n1 | \u5b58\u6d3b\n\n\u5176\u4ed6\u63cf\u8ff0\u4e58\u5ba2\u7684\u53d8\u91cf\uff0c\u662f**\u7279\u5f81**\u3002\n\n\u6570\u636e\u7279\u5f81 | \u610f\u601d  \n-|-\nPassengerId | \u4e58\u5ba2ID\nPclass | \u4e58\u5ba2\u7b49\u7ea7(1,2,3)\nName | \u4e58\u5ba2\u59d3\u540d\nSex | \u4e58\u5ba2\u6027\u522b (Female,Male)\nAge | \u4e58\u5ba2\u5e74\u9f84\nSibSp | \u4e0e\u4e58\u5ba2\u540c\u884c\u7684\u5144\u5f1f\u59d0\u59b9\u548c\u914d\u5076\u7684\u6570\u91cf\nParch | \u4e0e\u4e58\u5ba2\u540c\u884c\u7684\u7236\u6bcd\u548c\u5b69\u5b50\u7684\u6570\u91cf\nTicket | \u8239\u7968\u53f7\u7801\nFare | \u7968\u4ef7\nCabin | \u8239\u8231\u53f7\u7801\nEmbarked | \u4e58\u5ba2\u767b\u8239\u6e2f\u53e3(C = Cherbourg, Q = Queenstown, S = Southampton)\n\n\n#### \u6570\u636e\u96c6\u7684\u5927\u81f4\u4fe1\u606f\n\n`df.info()` \u663e\u793a\u5927\u81f4\u6570\u636e\u4fe1\u606f\uff0c\u5305\u62ec\u6bcf\u5217\u540d\u79f0\uff0c\u975e\u7a7a\u503c\u6570\u91cf\uff0c\u6bcf\u5217\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5185\u5b58\u5360\u7528\n"}}