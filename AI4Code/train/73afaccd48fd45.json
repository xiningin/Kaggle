{"cell_type":{"95cba65f":"code","efd0e295":"code","31baa5ae":"code","e8f07bfa":"code","462f4d56":"code","fb5673ac":"code","2766da9b":"code","dcab3621":"code","437ccc37":"code","2c3f4aef":"code","beab231c":"code","38415107":"code","28d48bab":"code","bdbf8c93":"code","49db2bbe":"code","f0848d8d":"code","4ddcab32":"code","d587ef8e":"code","933c80d0":"code","95580497":"code","2ed42928":"code","d98347d8":"code","34aa0157":"code","730f0285":"code","3c869afb":"code","4264f51a":"code","54925dad":"code","eca80ce0":"code","35299d6d":"markdown","3f4b1e2c":"markdown","97290acb":"markdown","8b43df43":"markdown","22d9fdb1":"markdown","811ee9ac":"markdown","3254431d":"markdown","f9356cd3":"markdown","2e7a18d4":"markdown","55561e28":"markdown","041426c9":"markdown","927beb27":"markdown","06e23372":"markdown"},"source":{"95cba65f":"# Basic library\nimport numpy as np\nimport pandas as pd\nimport gc\nimport os\n\n# visualization\nfrom matplotlib import pyplot as plt\nplt.style.use(\"fivethirtyeight\")\nimport seaborn as sns\n\n# Factor analyze\n!pip install factor_analyzer\nfrom factor_analyzer import FactorAnalyzer\n\n# PCA\nfrom sklearn.decomposition import PCA\n\n# Coluster analyze\nfrom sklearn.cluster import KMeans\n\n# file\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","efd0e295":"path = \"\/kaggle\/input\/electric-motor-temperature\"\n\ndata = pd.read_csv(os.path.join(path, \"pmsm_temperature_data.csv\"))","31baa5ae":"data.head()","e8f07bfa":"# dtype change\nfloat_col = ['ambient', 'coolant', 'u_d', 'u_q', 'motor_speed', 'torque', 'i_d', 'i_q', 'pm', 'stator_yoke', 'stator_tooth', 'stator_winding']\nint_col = [\"profile_id\"]\n\nfor f in float_col:\n    data[f] = data[f].astype(\"float32\")\nfor i in int_col:\n    data[i] = data[i].astype(\"int16\")","462f4d56":"data.info()","fb5673ac":"# profile id num\nid_num = data[\"profile_id\"].unique()\n\n# create time columns, 2Hz\nlist_time = []\nfor n in id_num:\n    df_samp = data[data[\"profile_id\"]==n]\n    # create time columns\n    time_ = list(np.arange(0,len(df_samp))*0.5)\n    list_time = list_time + time_\n\ndata[\"time\"] = list_time","2766da9b":"# garvage collect\ngc.collect()","dcab3621":"# Create columns\n\n# Motor work load\ndata[\"Motor_work\"] = (data[\"motor_speed\"] - data[\"motor_speed\"].min()) * (data[\"torque\"] - data[\"torque\"].min())\n\n# electric work, voltage * current\ndata[\"w_d\"] = data[\"u_d\"]*data[\"i_d\"]\ndata[\"w_q\"] = data[\"u_q\"]*data[\"i_q\"]","437ccc37":"# Columns\ntemp_col = [\"ambient\", \"coolant\", \"pm\", \"stator_yoke\", \"stator_tooth\", \"stator_winding\"]\nelec_col = [\"u_d\", \"u_q\", \"i_d\", \"i_q\", \"w_d\", \"w_q\"]\nwork_col = [\"motor_speed\", \"torque\", \"Motor_work\"]\nall_col = temp_col + elec_col + work_col","2c3f4aef":"# define heat map, feature correlation\ndef corr_matrix(data, colname):\n    cm = np.corrcoef(data[colname].T)\n    plt.figure(figsize=(10,10))\n    hm = sns.heatmap(cm, \n                     cbar=True,\n                     annot=True,\n                     square=True,\n                     cmap=\"bwr\",\n                     fmt='.2f',\n                     annot_kws={\"size\":10},\n                     yticklabels=colname,\n                     xticklabels=colname,\n                     vmax=1,\n                     vmin=-1)\n    \n# define pair plot\ndef pair_plot(data, colname, sample_num=1000):\n    samp = data[colname].sample(sample_num)\n    sns.pairplot(samp)","beab231c":"# plot\npair_plot(data=data, colname=temp_col, sample_num=1000)","38415107":"# correlation matrix\ncorr_matrix(data, temp_col)","28d48bab":"# plot\npair_plot(data=data, colname=elec_col, sample_num=1000)","bdbf8c93":"# correlation matrix\ncorr_matrix(data, elec_col)","49db2bbe":"# plot\npair_plot(data=data, colname=work_col, sample_num=1000)","f0848d8d":"# correlation matrix\ncorr_matrix(data, work_col)","4ddcab32":"# plot\npair_plot(data=data, colname=all_col, sample_num=1000)","d587ef8e":"# correlation matrix\ncorr_matrix(data, all_col)","933c80d0":"# garvage collect\ngc.collect()","95580497":"# define time series, comparing 2 params\ndef time_series_2_comp(data, colname1, colname2):\n    fig, ax = plt.subplots(13,4, figsize=(5*4,5*13))\n    plt.subplots_adjust(hspace=0.3)\n    for i in range(0,13):\n        for j in range(0,4):\n            id_ = id_num[i*4+j]\n            samp = data[data[\"profile_id\"]==id_]\n            ax[i,j].plot(samp[\"time\"], samp[colname1], label=colname1)\n            ax[i,j].plot(samp[\"time\"], samp[colname2], label=colname2)\n            ax[i,j].set_title(\"profile_id : \" + str(id_))\n            ax[i,j].legend()","2ed42928":"### pm and motor work\ntime_series_2_comp(data, \"pm\", \"Motor_work\")","d98347d8":"# scree plot\n# calculate eigen values\neigen_vals = sorted(np.linalg.eigvals(data[all_col].corr()), reverse=True)\n\n# plot\nplt.figure(figsize=(10,6))\nplt.plot(eigen_vals, 's-')\nplt.xlabel(\"factor\")\nplt.ylabel(\"eigenvalue\")","34aa0157":"# features num = 4\n# Create instance\nfa = FactorAnalyzer(n_factors=4, rotation=\"varimax\", impute=\"drop\")\n\n# Fitting\nfa.fit(data[all_col])\nresult = fa.loadings_\ncolnames = all_col\n\n# Visualization by heatmap\nplt.figure(figsize=(10,10))\nhm = sns.heatmap(result, cbar=True, annot=True, cmap='bwr', fmt=\".2f\", \n                 annot_kws={\"size\":10}, yticklabels=colnames, xticklabels=[\"factor1\", \"factor2\", \"factor3\", \"factor4\"], vmax=1, vmin=-1, center=0)\nplt.xlabel(\"factors\")\nplt.ylabel(\"variables\")","730f0285":"# Create instance\npca = PCA(n_components=4)\n\n# Fitting\npca_result = pca.fit_transform(data[all_col])\npca_result = pd.DataFrame(pca_result, columns=(\"pca1\", \"pca2\", \"pca3\", \"pca4\"))\npca_result.head()","3c869afb":"# visualization by plot\nx = pca_result[\"pca1\"]\ny = pca_result[\"pca2\"]\nc = data[\"profile_id\"]\n\nplt.figure(figsize=(10,8))\nplt.scatter(x, y, c=c, alpha=0.8, s=1)\nplt.xlabel(\"pca1\")\nplt.ylabel(\"pca2\")\nplt.colorbar()","4264f51a":"# garvage collect\ngc.collect()","54925dad":"# elbow\ndistortions = []\nfor i in range(1,11):\n    km = KMeans(n_clusters=i, init=\"k-means++\", n_init=10, max_iter=100, random_state=10)\n    km.fit(data[all_col])\n    distortions.append(km.inertia_)\n    \n# Plotting distortions\nplt.figure(figsize=(10,6))\nplt.plot(range(1,11), distortions, marker='o')\nplt.xlabel(\"Number of clusters\")\nplt.xticks(range(1,11))\nplt.ylabel(\"Distortion\")","eca80ce0":"# Create instance\nkmeans = KMeans(n_clusters=4, max_iter=30, init=\"k-means++\", random_state=10)\n\n# Fitting\nkmeans.fit(data[all_col])\n\n# output\ncluster = kmeans.labels_\n\n# visualization by plot\nx = pca_result[\"pca1\"]\ny = pca_result[\"pca2\"]\nc = cluster\n\nplt.figure(figsize=(10,8))\nplt.scatter(x, y, c=c, alpha=0.8, s=1)\nplt.xlabel(\"pca1\")\nplt.ylabel(\"pca2\")\nplt.colorbar()","35299d6d":"# EDA","3f4b1e2c":"# Libraries","97290acb":"# Data loading","8b43df43":"### Motor work features","22d9fdb1":"# K-means, try to grouping profile_id","811ee9ac":"# Factor analysis","3254431d":"## PCA","f9356cd3":"### Temperature features","2e7a18d4":"### Electric features","55561e28":"## Time series visualization","041426c9":"### Data check","927beb27":"### All features","06e23372":"# Data preparing"}}