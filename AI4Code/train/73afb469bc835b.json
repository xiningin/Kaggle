{"cell_type":{"4c6c5070":"code","fb497a14":"code","5eeff008":"code","e9ef7a4c":"code","c54a88cc":"code","414e84ba":"code","658e1d0f":"code","bc9dc6a1":"code","4efe1bce":"code","3a8f1c57":"code","fa846db4":"code","901bf6cb":"code","e861919a":"code","a8dd1eb1":"code","981bfe0a":"code","a45900fb":"code","97bb3db9":"code","091ff176":"code","39ef54f8":"code","f06d0dd1":"code","9bb1363b":"code","b74a3ea7":"code","baeec605":"code","17ad5012":"code","a81f78f9":"code","992626d7":"code","23c90d15":"code","7c97be6f":"code","77ecb2ae":"code","16cea8f3":"code","d81802c0":"code","a552a48f":"code","07f198d2":"code","789f3700":"code","9a7a4fe0":"code","5b644ca9":"code","53e9c095":"code","e5d2b857":"code","b314fffc":"code","beffa3d5":"code","9ae2ccbd":"code","48113b76":"code","e226b5ad":"code","50d757f1":"code","19a8cc36":"code","e8d2539f":"code","4284f994":"code","74cd8b02":"code","80d59cb3":"code","c8590aa9":"code","cb8cab3b":"code","40b973d1":"code","a18fdf39":"code","2e803a64":"code","5f8af7b4":"code","fdc6e0ae":"code","c9244b1c":"code","da3b1f5c":"code","6fd29ef2":"code","a74ae43f":"code","a6b37659":"code","3eec6846":"code","7d565d4b":"markdown","30e9c742":"markdown","6af3027e":"markdown","316811e8":"markdown","f88b069b":"markdown","bc89e40b":"markdown","40821d3e":"markdown","e8efaf31":"markdown","07e6b567":"markdown","19cd4e84":"markdown","301a9ffa":"markdown","31b95ca8":"markdown","5567e05c":"markdown","ca18495f":"markdown","8ada7e0e":"markdown","848fe0db":"markdown","b352e248":"markdown","541bb0bf":"markdown","b7ae7ca6":"markdown","55b03fa5":"markdown","449a2151":"markdown","8fecf2b5":"markdown"},"source":{"4c6c5070":"import os\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# librosa is a Python library for analyzing audio and music.\n# It can be used to extract the data from the audio files we will see it later\nimport librosa \nimport librosa.display\n\n# to play the audio files\nfrom IPython.display import Audio\nplt.style.use('seaborn-white')","fb497a14":"DATA_FRAMES = True\nfem_path = '..\/input\/features\/Female_features.csv'\nmal_path = '..\/input\/features\/Male_features.csv'","5eeff008":"TESS = \"..\/input\/toronto-emotional-speech-set-tess\/tess toronto emotional speech set data\/TESS Toronto emotional speech set data\/\"\nRAV = \"..\/input\/ravdess-emotional-speech-audio\/audio_speech_actors_01-24\/\"\nSAVEE = \"..\/input\/surrey-audiovisual-expressed-emotion-savee\/ALL\/\"\nCREMA = \"..\/input\/cremad\/AudioWAV\/\"","e9ef7a4c":"# Get the data location for SAVEE\ndir_list = os.listdir(SAVEE)\n\n# parse the filename to get the emotions\nemotion=[]\npath = []\nfor i in dir_list:\n    if i[-8:-6]=='_a':\n        emotion.append('angry')\n    elif i[-8:-6]=='_d':\n        emotion.append('disgust')\n    elif i[-8:-6]=='_f':\n        emotion.append('fear')\n    elif i[-8:-6]=='_h':\n        emotion.append('happy')\n    elif i[-8:-6]=='_n':\n        emotion.append('neutral')\n    elif i[-8:-6]=='sa':\n        emotion.append('sad')\n    elif i[-8:-6]=='su':\n        emotion.append('surprise')\n    else:\n        emotion.append('unknown') \n    path.append(SAVEE + i)\n\n# Now check out the label count distribution \nSAVEE_df = pd.DataFrame(emotion, columns = ['labels'])\nSAVEE_df = pd.concat([SAVEE_df, pd.DataFrame(path, columns = ['path'])], axis = 1)\nprint('SAVEE dataset')\nSAVEE_df.head()","c54a88cc":"# Get the data location for TESS\npath = []\nemotion = []\ndir_list = os.listdir(TESS)\n\nfor i in dir_list:\n    fname = os.listdir(TESS + i)   \n    for f in fname:\n        if i == 'OAF_angry' or i == 'YAF_angry':\n            emotion.append('angry')\n        elif i == 'OAF_disgust' or i == 'YAF_disgust':\n            emotion.append('disgust')\n        elif i == 'OAF_Fear' or i == 'YAF_fear':\n            emotion.append('fear')\n        elif i == 'OAF_happy' or i == 'YAF_happy':\n            emotion.append('happy')\n        elif i == 'OAF_neutral' or i == 'YAF_neutral':\n            emotion.append('neutral')                                \n        elif i == 'OAF_Pleasant_surprise' or i == 'YAF_pleasant_surprised':\n            emotion.append('surprise')               \n        elif i == 'OAF_Sad' or i == 'YAF_sad':\n            emotion.append('sad')\n        else:\n            emotion.append('Unknown')\n        path.append(TESS + i + \"\/\" + f)\n\nTESS_df = pd.DataFrame(emotion, columns = ['labels'])\n#TESS_df['source'] = 'TESS'\nTESS_df = pd.concat([TESS_df,pd.DataFrame(path, columns = ['path'])],axis=1)\nprint('TESS dataset')\nTESS_df.head()","414e84ba":"# Importing datas from RAVDESS\ndir = os.listdir(RAV)\n\nmales = []\nfemales = [] \n        \nfor actor in dir:\n       \n    files = os.listdir(RAV + actor)\n        \n    for file in files: \n        part = file.split('.')[0]\n        part = part.split(\"-\")           \n            \n        temp = int(part[6])        \n                \n        if part[2] == '01':\n            emotion = 'neutral'\n        elif part[2] == '02':\n            emotion = 'calm'\n        elif part[2] == '03':\n            emotion = 'happy'\n        elif part[2] == '04':\n            emotion = 'sad'\n        elif part[2] == '05':\n            emotion = 'angry'\n        elif part[2] == '06':\n            emotion = 'fear'\n        elif part[2] == '07':\n            emotion = 'disgust'\n        elif part[2] == '08':\n            emotion = 'surprise'\n        else:\n            emotion = 'unknown'\n            \n        if temp%2 == 0:\n            path = (RAV + actor + '\/' + file)\n            #emotion = 'female_'+emotion\n            females.append([emotion, path]) \n        else:\n            path = (RAV + actor + '\/' + file)\n             #emotion = 'male_'+emotion\n            males.append([emotion, path])   \n    \n   \nRavFemales_df = pd.DataFrame(females)\nRavFemales_df.columns = ['labels', 'path']\n\nRavMales_df = pd.DataFrame(males)\nRavMales_df.columns = ['labels', 'path']\n\nprint('RAVDESS datasets')\nRavFemales_df.head()","658e1d0f":"RavMales_df.head()","bc9dc6a1":"files = os.listdir(CREMA)\n\nfemale = [1002,1003,1004,1006,1007,1008,1009,1010,1012,1013,1018,1020,1021,1024,1025,1028,1029,1030,1037,1043,1046,1047,1049,\n          1052,1053,1054,1055,1056,1058,1060,1061,1063,1072,1073,1074,1075,1076,1078,1079,1082,1084,1089,1091]\nmales = []\nfemales = []\n\nfor file in files: \n    part = file.split('_')   \n    \n    if part[2] == 'SAD':\n        emotion = 'sad'\n    elif part[2] == 'ANG':\n        emotion = 'angry'\n    elif part[2] == 'DIS':\n        emotion = 'disgust'\n    elif part[2] == 'FEA':\n        emotion = 'fear'\n    elif part[2] == 'HAP':\n        emotion = 'happy'\n    elif part[2] == 'NEU':\n        emotion = 'neutral'  \n    else:\n        emotion = 'unknown'\n        \n    if int(part[0]) in female:\n        path = (CREMA + '\/' + file)\n        #emotion = 'female_'+emotion\n        females.append([emotion, path]) \n    else:\n        path = (CREMA + '\/' + file)\n        #emotion = 'male_'+emotion\n        males.append([emotion, path])   \n    \nCremaFemales_df = pd.DataFrame(females)\nCremaFemales_df.columns = ['labels', 'path']\n\nCremaMales_df = pd.DataFrame(males)\nCremaMales_df.columns = ['labels', 'path']\n    \nprint('CREMA datasets')\nCremaFemales_df.head()","4efe1bce":"CremaMales_df.head()","3a8f1c57":"# Now lets merge all the dataframe\nMales = pd.concat([SAVEE_df, RavMales_df, CremaMales_df], axis = 0)\nMales.to_csv(\"males_emotions_df.csv\", index = False)\n\nFemales = pd.concat([TESS_df, RavFemales_df, CremaFemales_df], axis = 0)\nFemales.to_csv(\"females_emotions_df.csv\", index = False)","fa846db4":"order = ['angry','calm','disgust','fear','happy','neutral','sad','surprise']\n\nfig = plt.figure(figsize=(17, 5))\n\nfig.add_subplot(121)\nplt.title('Count of Females Emotions', size=16)\nsns.countplot(Females.labels, order = order)\nplt.ylabel('Count', size=12)\nplt.xlabel('Emotions', size=12)\nsns.despine(top=True, right=True, left=False, bottom=False)\n\nfig.add_subplot(122)\nplt.title('Count of Males Emotions', size=16)\nsns.countplot(Males.labels, order = order)\nplt.ylabel('Count', size=12)\nplt.xlabel('Emotions', size=12)\nsns.despine(top=True, right=True, left=False, bottom=False)\n\nplt.show()","901bf6cb":"def create_waveplot(data, sr, e):\n    plt.figure(figsize=(10, 3))\n    plt.title(f'Waveplot for audio with {e} emotion', size=15)\n    librosa.display.waveplot(data, sr=sr)\n    plt.show()","e861919a":"emotion='Angry'\npath = '..\/input\/ravdess-emotional-speech-audio\/Actor_01\/03-01-05-01-01-01-01.wav'\ndata, sampling_rate = librosa.load(path)\ncreate_waveplot(data, sampling_rate, emotion)\nAudio(path)","a8dd1eb1":"emotion='Very Angry' \npath = '..\/input\/ravdess-emotional-speech-audio\/Actor_01\/03-01-05-02-01-01-01.wav'\ndata, sampling_rate = librosa.load(path)\ncreate_waveplot(data, sampling_rate, emotion)\nAudio(path)","981bfe0a":"emotion='Sing Angry'\npath = '..\/input\/ravdess-emotional-song-audio\/Actor_01\/03-02-05-01-01-01-01.wav'\ndata, sampling_rate = librosa.load(path)\ncreate_waveplot(data, sampling_rate, emotion)\nAudio(path)","a45900fb":"emotion='Sing Very Angry' \npath = '..\/input\/ravdess-emotional-song-audio\/Actor_01\/03-02-05-02-01-01-01.wav'\ndata, sampling_rate = librosa.load(path)\ncreate_waveplot(data, sampling_rate, emotion)\nAudio(path)","97bb3db9":"def noise(data):\n    noise_amp = 0.04*np.random.uniform()*np.amax(data)\n    data = data + noise_amp*np.random.normal(size=data.shape[0])\n    return data\n\ndef stretch(data, rate=0.70):\n    return librosa.effects.time_stretch(data, rate)\n\ndef shift(data):\n    shift_range = int(np.random.uniform(low=-5, high = 5)*1000)\n    return np.roll(data, shift_range)\n\ndef pitch(data, sampling_rate, pitch_factor=0.8):\n    return librosa.effects.pitch_shift(data, sampling_rate, pitch_factor)\n\ndef higher_speed(data, speed_factor = 1.25):\n    return librosa.effects.time_stretch(data, speed_factor)\n\ndef lower_speed(data, speed_factor = 0.75):\n    return librosa.effects.time_stretch(data, speed_factor)\n\n# taking any example and checking for techniques.\npath = path = '..\/input\/ravdess-emotional-speech-audio\/Actor_01\/03-01-05-01-01-01-01.wav'\ndata, sample_rate = librosa.load(path)","091ff176":"plt.figure(figsize=(10,3))\nx = noise(data)\nlibrosa.display.waveplot(y=x, sr=sample_rate)\nAudio(x, rate=sample_rate)","39ef54f8":"plt.figure(figsize=(10,3))\nx = stretch(data)\nlibrosa.display.waveplot(y=x, sr=sample_rate)\nAudio(x, rate=sample_rate)","f06d0dd1":"plt.figure(figsize=(10,3))\nx = shift(data)\nlibrosa.display.waveplot(y=x, sr=sample_rate)\nAudio(x, rate=sample_rate)","9bb1363b":"plt.figure(figsize=(10,3))\nx = pitch(data, sample_rate)\nlibrosa.display.waveplot(y=x, sr=sample_rate)\nAudio(x, rate=sample_rate)","b74a3ea7":"plt.figure(figsize=(10,3))\nx = higher_speed(data)\nlibrosa.display.waveplot(y=x, sr=sample_rate)\nAudio(x, rate=sample_rate)","baeec605":"plt.figure(figsize=(10,3))\nx = lower_speed(data)\nlibrosa.display.waveplot(y=x, sr=sample_rate)\nAudio(x, rate=sample_rate)","17ad5012":"#sample_rate = 22050\n\ndef extract_features(data):\n    \n    result = np.array([])\n    \n    #mfccs = librosa.feature.mfcc(y=data, sr=22050, n_mfcc=42) #42 mfcc so we get frames of ~60 ms\n    mfccs = librosa.feature.mfcc(y=data, sr=22050, n_mfcc=58)\n    mfccs_processed = np.mean(mfccs.T,axis=0)\n    result = np.array(mfccs_processed)\n     \n    return result\n\ndef get_features(path):\n    # duration and offset are used to take care of the no audio in start and the ending of each audio files as seen above.\n    data, sample_rate = librosa.load(path, duration=3, offset=0.5, res_type='kaiser_fast') \n    \n    #without augmentation\n    res1 = extract_features(data)\n    result = np.array(res1)\n    \n    #noised\n    noise_data = noise(data)\n    res2 = extract_features(noise_data)\n    result = np.vstack((result, res2)) # stacking vertically\n    \n    #stretched\n    stretch_data = stretch(data)\n    res3 = extract_features(stretch_data)\n    result = np.vstack((result, res3))\n    \n    #shifted\n    shift_data = shift(data)\n    res4 = extract_features(shift_data)\n    result = np.vstack((result, res4))\n    \n    #pitched\n    pitch_data = pitch(data, sample_rate)\n    res5 = extract_features(pitch_data)\n    result = np.vstack((result, res5)) \n    \n    #speed up\n    higher_speed_data = higher_speed(data)\n    res6 = extract_features(higher_speed_data)\n    result = np.vstack((result, res6))\n    \n    #speed down\n    lower_speed_data = higher_speed(data)\n    res7 = extract_features(lower_speed_data)\n    result = np.vstack((result, res7))\n    \n    return result","a81f78f9":"if not DATA_FRAMES:\n    \n    female_X, female_Y = [], []\n    for path, emotion in zip(Females.path, Females.labels):\n        features = get_features(path)\n        #adding augmentation, get_features return a multi dimensional array (for each augmentation), so we have to use a loop to fill the df\n        for elem in features: \n            female_X.append(elem)        \n            female_Y.append(emotion)\n    \n\n    male_X, male_Y = [], []\n    for path, emotion in zip(Males.path, Males.labels):\n        features = get_features(path)\n        for elem in features:\n            male_X.append(elem)\n            male_Y.append(emotion)\n            \n    print(f'Check shapes:\\nFemale features: {len(female_X)}, labels: {len(female_Y)}\\nMale features:   {len(male_X)}, labels: {len(male_Y)}')","992626d7":"def setup_dataframe(gender, features, labels):\n    df = pd.DataFrame(features)\n    df['labels'] = labels\n    df.to_csv(f'{gender}_features.csv', index=False)\n    \n    print(f'{gender} dataframe')\n    df.sample(frac=1).head()\n    \n    return df","23c90d15":"if not DATA_FRAMES:\n    Females_Features = setup_dataframe('Female', female_X, female_Y)\nelse:\n    Females_Features = pd.read_csv(fem_path)","7c97be6f":"if not DATA_FRAMES:\n    Males_Features = setup_dataframe('Male', male_X, male_Y)\nelse:\n    Males_Features = pd.read_csv(mal_path)","77ecb2ae":"from sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split","16cea8f3":"female_X = Females_Features.iloc[: ,:-1].values\nfemale_Y = Females_Features['labels'].values\n\nmale_X = Males_Features.iloc[: ,:-1].values\nmale_Y = Males_Features['labels'].values","d81802c0":"# As this is a multiclass classification problem onehotencoding our Y.\nencoder = OneHotEncoder()\n\nfemale_Y = encoder.fit_transform(np.array(female_Y).reshape(-1,1)).toarray()\nmale_Y = encoder.fit_transform(np.array(male_Y).reshape(-1,1)).toarray()","a552a48f":"nogender_X = np.concatenate((female_X, male_X))\nnogender_Y = np.concatenate((female_Y, male_Y))\n\nx_train, x_test, y_train, y_test = train_test_split(nogender_X, nogender_Y, random_state=0, test_size=0.20, shuffle=True)\nx_train.shape, y_train.shape, x_test.shape, y_test.shape","07f198d2":"x_trainF, x_testF, y_trainF, y_testF = train_test_split(female_X, female_Y, random_state=0, test_size=0.20, shuffle=True)\nx_trainF.shape, y_trainF.shape, x_testF.shape, y_testF.shape","789f3700":"x_trainM, x_testM, y_trainM, y_testM = train_test_split(male_X, male_Y, random_state=0, test_size=0.20, shuffle=True)\nx_trainM.shape, y_trainM.shape, x_testM.shape, y_testM.shape","9a7a4fe0":"scaler = StandardScaler()\n\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)\n\nx_trainF = scaler.fit_transform(x_trainF)\nx_testF = scaler.transform(x_testF)\n\nx_trainM = scaler.fit_transform(x_trainM)\nx_testM = scaler.transform(x_testM)","5b644ca9":"x_train = np.expand_dims(x_train, axis=2)\nx_test = np.expand_dims(x_test, axis=2)\nx_train.shape, y_train.shape , x_test.shape , y_test.shape","53e9c095":"x_trainF = np.expand_dims(x_trainF, axis=2)\nx_testF = np.expand_dims(x_testF, axis=2)\nx_trainF.shape, y_trainF.shape, x_testF.shape, y_testF.shape","e5d2b857":"x_trainM = np.expand_dims(x_trainM, axis=2)\nx_testM = np.expand_dims(x_testM, axis=2)\nx_trainM.shape, y_trainM.shape, x_testM.shape, y_testM.shape","b314fffc":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv1D, MaxPooling1D, Flatten, Dropout, BatchNormalization, AveragePooling1D\nfrom keras.utils import np_utils, to_categorical\nfrom keras.callbacks import ModelCheckpoint","beffa3d5":"print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))","9ae2ccbd":"# Create a MirroredStrategy.\nstrategy = tf.distribute.MirroredStrategy()\nprint('Number of devices: {}'.format(strategy.num_replicas_in_sync))","48113b76":"with strategy.scope():\n    \n    def build_model(in_shape):\n        \n        model=Sequential()\n        model.add(Conv1D(256, kernel_size=6, strides=1, padding='same', activation='relu', input_shape=(in_shape, 1)))\n        model.add(AveragePooling1D(pool_size=4, strides = 2, padding = 'same'))\n\n        model.add(Conv1D(128, kernel_size=6, strides=1, padding='same', activation='relu'))\n        model.add(AveragePooling1D(pool_size=4, strides = 2, padding = 'same'))\n\n        model.add(Conv1D(128, kernel_size=6, strides=1, padding='same', activation='relu'))\n        model.add(AveragePooling1D(pool_size=4, strides = 2, padding = 'same'))\n        model.add(Dropout(0.2))\n\n        model.add(Conv1D(64, kernel_size=6, strides=1, padding='same', activation='relu'))\n        model.add(MaxPooling1D(pool_size=4, strides = 2, padding = 'same'))\n        \n        model.add(Flatten())\n        model.add(Dense(units=32, activation='relu'))\n        model.add(Dropout(0.3))\n\n        model.add(Dense(units=8, activation='softmax'))\n        model.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])\n          \n        \n        return model","e226b5ad":"def model_build_summary(mod_dim, tr_features, val_features, val_labels):\n    model = build_model(mod_dim)\n    model.summary()\n    \n    score = model.evaluate(val_features, val_labels, verbose = 1)\n    accuracy = 100*score[1]\n    \n    return model","50d757f1":"rlrp = ReduceLROnPlateau(monitor='loss', factor=0.4, verbose=0, patience=4, min_lr=0.000001)\n\nbatch_size = 32\nn_epochs = 75","19a8cc36":"def show_graphs(history):\n    epochs = [i for i in range(n_epochs)]\n    fig , ax = plt.subplots(1,2)\n    train_acc = history.history['accuracy']\n    train_loss = history.history['loss']\n    test_acc = history.history['val_accuracy']\n    test_loss = history.history['val_loss']\n\n    fig.set_size_inches(30,12)\n    ax[0].plot(epochs , train_loss , label = 'Training Loss')\n    ax[0].plot(epochs , test_loss , label = 'Testing Loss')\n    ax[0].set_title('Training & Testing Loss')\n    ax[0].legend()\n    ax[0].set_xlabel(\"Epochs\")\n\n    ax[1].plot(epochs , train_acc , label = 'Training Accuracy')\n    ax[1].plot(epochs , test_acc , label = 'Testing Accuracy')\n    ax[1].set_title('Training & Testing Accuracy')\n    ax[1].legend()\n    ax[1].set_xlabel(\"Epochs\")\n    plt.show()","e8d2539f":"total_model = model_build_summary(x_train.shape[1], x_train, x_test, y_test)","4284f994":"female_model = model_build_summary(x_trainF.shape[1], x_trainF, x_testF, y_testF)","74cd8b02":"male_model = model_build_summary(x_trainM.shape[1], x_trainM, x_testM, y_testM)","80d59cb3":"history = total_model.fit(x_train, y_train, batch_size=batch_size, epochs=n_epochs, validation_data=(x_test, y_test), callbacks=[rlrp])","c8590aa9":"female_history = female_model.fit(x_trainF, y_trainF, batch_size=batch_size, epochs=n_epochs, validation_data=(x_testF, y_testF), callbacks=[rlrp])","cb8cab3b":"male_history = male_model.fit(x_trainM, y_trainM, batch_size=batch_size, epochs=n_epochs, validation_data=(x_testM, y_testM), callbacks=[rlrp])","40b973d1":"'''\nfrom keras import backend as K\n\nlayer_name = 'conv1d_11'\nintermediate_layer_model = keras.Model(inputs=female_model.input,\n                                       outputs=female_model.get_layer(layer_name).output)\nintermediate_output = intermediate_layer_model(x_testF)\nprint(intermediate_output[1,0])\n'''","a18fdf39":"# genderless\nscore = total_model.evaluate(x_train,y_train, verbose = 0)\nprint(\"Mixed-gender emotions training Accuracy: {0:.2%}\".format(score[1]))\n\nscore = total_model.evaluate(x_test, y_test, verbose=0)\nprint(\"Mixed-gender emotions testing Accuracy: {0:.2%}\".format(score[1]))","2e803a64":"score = female_model.evaluate(x_trainF,y_trainF, verbose = 0)\nprint(\"Female emotions training Accuracy: {0:.2%}\".format(score[1]))\n\nscore = female_model.evaluate(x_testF, y_testF, verbose=0)\nprint(\"Female emotions testing Accuracy: {0:.2%}\".format(score[1]))","5f8af7b4":"score = male_model.evaluate(x_trainM,y_trainM, verbose = 0)\nprint(\"Male emotions training Accuracy: {0:.2%}\".format(score[1]))\n\nscore = male_model.evaluate(x_testM, y_testM, verbose=0)\nprint(\"Male emotions testing Accuracy: {0:.2%}\".format(score[1]))","fdc6e0ae":"show_graphs(history)","c9244b1c":"show_graphs(female_history)","da3b1f5c":"show_graphs(male_history)","6fd29ef2":"# predicting on test data.\npred_test = female_model.predict(x_testF)\ny_pred = encoder.inverse_transform(pred_test)\ny_test_ = encoder.inverse_transform(y_testF)","a74ae43f":"cm = confusion_matrix(y_test_, y_pred)\nplt.figure(figsize = (12, 10))\ncm = pd.DataFrame(cm , index = [i for i in encoder.categories_] , columns = [i for i in encoder.categories_])\nsns.heatmap(cm, linecolor='white', cmap='Blues', linewidth=1, annot=True, fmt='')\nplt.title('Confusion Matrix for Female Emotions', size=20)\nplt.xlabel('Predicted Labels', size=14)\nplt.ylabel('Actual Labels', size=14)\nplt.show()","a6b37659":"# predicting on test data.\npred_test = male_model.predict(x_testM)\ny_pred = encoder.inverse_transform(pred_test)\ny_test_ = encoder.inverse_transform(y_testM)","3eec6846":"cm = confusion_matrix(y_test_, y_pred)\nplt.figure(figsize = (12, 10))\ncm = pd.DataFrame(cm , index = [i for i in encoder.categories_] , columns = [i for i in encoder.categories_])\nsns.heatmap(cm, linecolor='white', cmap='Blues', linewidth=1, annot=True, fmt='')\nplt.title('Confusion Matrix for Male Emotions', size=20)\nplt.xlabel('Predicted Labels', size=14)\nplt.ylabel('Actual Labels', size=14)\nplt.show()","7d565d4b":"# <center> Data Visualization\n\nFirst, we will plot the number of emotions (of wich above there are the proportions).\nThen using Librosa there will be some waveplots related to each emotion","30e9c742":"# <center>Modeling<center>","6af3027e":"**Uncomment the code below to see the output of a specific layer","316811e8":"## Splitting data","f88b069b":"## Making our data compatible to model","bc89e40b":"## Performance Evaluations","40821d3e":"*ReduceLROnPlateau* reduce learning rate when a metric has stopped improving.<br>\n\nModels often benefit from reducing the learning rate by a factor of 2-10 once learning stagnates. This callback monitors a quantity and if no improvement is seen for a 'patience' number of epochs, the learning rate is reduced.","e8efaf31":"#### Definition:\n* Data augmentation is the process by which we create new synthetic training samples by adding small perturbations on our initial training set.\n* The objective is to make our model invariant to those perturbations and enhace its ability to generalize.\n* In order to this to work adding the perturbations must conserve the same label as the original training sample.\n* In images data augmention can be performed by shifting the image, zooming, rotating ...\n* In our case we will add noise, stretch and roll, pitch shift ...","07e6b567":"# <center>Emotions Speech datasets<center>  \n\n**Content**\nData set contains files from RAVDESS speechs, CREMA-D, SAVEE, TESS.\n   \nOut of all files data sets make up:\n* CREMA-D - 7,442 \n* TESS - 2,800 \n* RAVDESS - 2,076 \n* SAVEE - 480","19cd4e84":"## Model Summary and Pre-training Accuracy","301a9ffa":"## Model training","31b95ca8":"## Adding augmentation","5567e05c":"## Confusion matrix","ca18495f":"# <center> Feature Extraction<\/center>","8ada7e0e":"* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html  \nWe are going to scale our features throught the StandarScaler module, it standardize the features in a **Normal curve**, i.e.:<br><br>\n  <center> $Z = (X -{\\mu})\/{\\sigma}$. <\/center><br>\n*Standardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual features do not more or less look like standard normally distributed data (e.g. Gaussian with 0 mean and unit variance).*","848fe0db":"## Mel-Frequency Cepstral Coefficients (MFCCs)\nThis feature is one of the most important method to extract a feature of an audio signal and is used majorly whenever working on audio signals. The mel frequency cepstral coefficients (MFCCs) of a signal are a small set of features (usually about 10\u201320) which concisely describe the overall shape of a spectral envelope.","b352e248":"# <center>Emotional Speech Recognition","541bb0bf":"# <center>Data Preparation\nAs of now we have extracted the data, now we need to normalize and split our data for training and testing.","b7ae7ca6":"## Training and Validation trends","55b03fa5":"** Since the feature extraction require a huge amount of time, before we start, in the codelines below, specify if there are already dataframes available and if so the path of those ones.  ","449a2151":"As we understand, the data provided from audio cannot be understood by the models directly, so we need to convert them into an understandable format for which feature extraction is used.\nThe audio signal is a three-dimensional signal in which three axes represent time, amplitude and frequency.\n\n\nLooking at the waveplots above seems clear (from an eye test) that the waveform itself may not necessarily yield clear class identifying information. Infact they look quite similar.<br\/>  \nIt turns out one of the best tool to feature extract from audio waveforms ( and digital signal in general) is   **Mel Frequency Cepstral Coefficents (MFCCs)**.  Below we will go through a brief technical discussion, just to see how MFCCs works\n\n## add to references \n* All the infos about feature extraction and audio processing were taken from https:\/\/medium.com\/comet-ml\/applyingmachinelearningtoaudioanalysis-utm-source-kdnuggets11-19-e160b069e88\n* Mel Frequency Cepstral Coefficients (MFCCs), introduced by Davis and Mermelstein in 1980.","8fecf2b5":"Just for adding more proves that gender separation have sense"}}