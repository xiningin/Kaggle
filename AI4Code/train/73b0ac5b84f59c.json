{"cell_type":{"2efa6da0":"code","4392d733":"code","c9afbf8c":"code","f4b9d8ce":"code","89856766":"code","0264adcd":"code","296208ca":"code","39f6b6f6":"code","57fec57c":"code","a412c1f6":"code","23696d1f":"code","7b23c805":"code","66c4b547":"code","759099b7":"code","aef7ef26":"code","03d775cb":"code","653500ab":"code","1f9e40cb":"code","5f69820a":"code","2dbba9d2":"code","7f035f88":"code","a575f54f":"code","2ae4807d":"code","1b095c16":"code","f3def628":"code","b015624b":"code","63d64fec":"code","3c9175b2":"code","9876b344":"code","96eef05d":"code","2f0454c5":"code","705c9ea6":"code","d78a05b7":"code","33159d72":"code","9d2d70b2":"code","7c9a3e51":"code","4da61b9a":"code","8feda2cd":"code","5578d940":"code","eadd0066":"code","d0b4f6d5":"code","179600a5":"code","64f3f798":"code","bc331c19":"code","d093fbac":"code","87888282":"code","b058ba65":"code","b4d42d5d":"code","c1ea583f":"code","16a1f1dd":"code","adb48c2a":"code","bc637245":"code","764d1784":"code","42e2857a":"code","8818d6bf":"code","9ff2f963":"code","fbbe035d":"code","ea2ba6e9":"code","811fa733":"code","056253b0":"code","98b2cf75":"code","dd271334":"code","901ffd1c":"code","6ddfb49d":"code","0e163df8":"code","dd3b08fd":"code","815d64b7":"code","074f7775":"code","d52d363b":"code","832b3aad":"code","8dc7c1ed":"code","86ae3084":"code","d196f3a7":"code","fa5a22a2":"code","990f6e44":"code","671b361f":"code","cfd7c1e9":"code","8fbc8165":"code","1889a5e5":"code","c258766f":"code","bbdfece5":"code","7cc5a036":"code","13ef3b72":"code","34a218ef":"code","3d1b9159":"code","760a8922":"code","eb4ac11a":"code","76faf297":"code","6b97f40c":"code","b91c3747":"code","48d71789":"code","becc7f87":"code","17ddd981":"markdown","a2212ac4":"markdown","8b2464e5":"markdown","91f36060":"markdown","c987e58d":"markdown","31bf3486":"markdown","20fdd42f":"markdown","3e311b6c":"markdown","916687eb":"markdown","197f3975":"markdown","cbf8438b":"markdown","59a0001a":"markdown"},"source":{"2efa6da0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4392d733":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c9afbf8c":"train=pd.read_csv(r\"\/kaggle\/input\/titanic\/train.csv\")","f4b9d8ce":"train.head()","89856766":"train=train.rename(columns={'Pclass':'Ticket Class','SibSp':'No of sib\/Spouses','Parch':'No of parents\/children','Ticket':'Ticket no'})","0264adcd":"train.head()","296208ca":"train.shape","39f6b6f6":"train.info()","57fec57c":"train.describe(include='all')","a412c1f6":"train.isnull().sum()","23696d1f":"train.drop(['Cabin','Ticket no'],axis=1,inplace=True)","7b23c805":"train.describe(include='all')\nfrom scipy import stats","66c4b547":"train['Embarked'].replace(np.nan,'S',inplace=True)","759099b7":"train['Age'].replace(np.nan,0,inplace=True)","aef7ef26":"train.isnull()","03d775cb":"train.dtypes","653500ab":"sns.heatmap(train.corr())","1f9e40cb":"train.head()","5f69820a":"train['Age'].plot.box()","2dbba9d2":"train['Ticket Class'].value_counts().plot(kind='bar',cmap='Set3')\nplt.xlabel(\"Ticket Class\")\nplt.ylabel(\"Frequency\")","7f035f88":"train['Sex'].value_counts().plot(kind='pie',\n                                    autopct=\"%1.1f%%\",\n                                     startangle=90,\n                                figsize=(15,6),\n                                 explode=[0.1,0.01],\n                                 colors=['lightcoral','lightskyblue']\n                                   )\nplt.axis('equal')\nplt.title('Frequency of gender')\nplt.legend()","a575f54f":"sns.countplot(train['No of sib\/Spouses'])\nplt.title(\"Count of siblings and spouses \")","2ae4807d":"sns.countplot(train['No of parents\/children'])\nplt.title(\"Count of Parents and Children \")","1b095c16":"plt.scatter(x='Ticket Class',y='Fare',data=train)\nplt.xlabel('Ticket Class')\nplt.ylabel('Fare')\nplt.title('Ticket Class VS Fare')\nplt.xticks([1,2,3])","f3def628":"train['Fare'].plot.box()","b015624b":"train=train[train['Fare']<500]","63d64fec":"train['Fare'].plot.box()","3c9175b2":"sns.countplot('Survived',hue='Sex',data=train)\nplt.grid()","9876b344":"train['Survived'].value_counts()","96eef05d":"print('Percentage of people who didnt survived=',(549\/train.shape[0]))\nprint('Percentage of people who  survived=',(339\/train.shape[0]))","2f0454c5":"from imblearn.over_sampling import SMOTE","705c9ea6":"sns.countplot('Embarked',hue='Sex',data=train)\nplt.title(\"Count of Embarked\")","d78a05b7":"from sklearn.preprocessing import LabelEncoder","33159d72":"train.head()","9d2d70b2":"train['Sex']=train['Sex'].replace({'male':'1','female':'0'})","7c9a3e51":"encoder=LabelEncoder()\ntrain['Embarked']=encoder.fit(train['Embarked']).transform(train['Embarked'])","4da61b9a":"train.head()","8feda2cd":"X=train[['Ticket Class','Sex','Age','No of sib\/Spouses','No of parents\/children','Embarked','Fare']]","5578d940":"y=train['Survived']","eadd0066":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nX=scaler.fit(X).transform(X)","d0b4f6d5":"sm=SMOTE(random_state=2)\nX_train,y_train=sm.fit_sample(X,y.ravel())\nprint(\"Size of balanced X=\",X_train.shape,\"And size of balanced y=\",y_train.shape)","179600a5":"from sklearn.linear_model import LogisticRegression","64f3f798":"model1=LogisticRegression(C=0.01,solver='lbfgs',penalty='l2')\nmodel1.fit(X,y)\ny1=model1.predict(X)","bc331c19":"from sklearn.metrics import f1_score,classification_report,confusion_matrix\nprint('F1 Score=',f1_score(y,y1))\nprint('Classification Report=', classification_report(y,y1))","d093fbac":"y1_prob=model1.predict_proba(X)","87888282":"solvers=['liblinear','lbfgs','newton-cg']\npenalty=['l1','l2']\nc_values=[100,10,1.0,0.1,0.01]\ngrid=dict(solver=solvers,penalty=penalty,C=c_values)","b058ba65":"from sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV,RandomizedSearchCV\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model1, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_result = grid_search.fit(X, y)","b4d42d5d":"print(\"Best Score=\",grid_result.best_score_)\nprint(\"Best parameters=\",grid_result.best_params_)","c1ea583f":"print(confusion_matrix(y,y1))","16a1f1dd":"from sklearn.tree import DecisionTreeClassifier","adb48c2a":"model2=DecisionTreeClassifier()\nmodel2.fit(X,y)\ny2=model2.predict(X)","bc637245":"print('F1 Score=',f1_score(y,y2))\nprint('Classification Report=', classification_report(y,y2))\nprint(confusion_matrix(y,y2))","764d1784":"from sklearn import tree","42e2857a":"tree.plot_tree(model2)","8818d6bf":"from sklearn.ensemble import RandomForestRegressor\nmodel3=RandomForestRegressor()\nmodel3.fit(X,y)\ny3=model3.predict(X)","9ff2f963":"for i in range(0,888):\n    if y3[i]>=.5:\n        y3[i]=1\n    else:\n        y3[i]=0","fbbe035d":"y3","ea2ba6e9":"print('F1 Score=',f1_score(y,y3))\nprint('Classification Report=', classification_report(y,y3))\nprint(confusion_matrix(y,y3))","811fa733":"y3.shape","056253b0":"from xgboost import XGBClassifier\nmodel4=XGBClassifier()\nmodel4.fit(X,y)","98b2cf75":"y4=model4.predict(X)\ny4","dd271334":"print('F1 Score=',f1_score(y,y4))\nprint('Classification Report=', classification_report(y,y4))\nprint(confusion_matrix(y,y4))","901ffd1c":"from sklearn.svm import SVC","6ddfb49d":"model5=SVC(kernel='rbf',C=10,gamma=0.04)","0e163df8":"model5.fit(X,y)\ny5=model5.predict(X)","dd3b08fd":"print('F1 Score=',f1_score(y,y5))\nprint('Classification Report=', classification_report(y,y5))\nprint(confusion_matrix(y,y5))","815d64b7":"kernel=['rbf']\n\ngamma=[0.03,0.003,0.004,0.04,0.01,1,10,100,2,3,]\nc=[1.0,0.1,0.01,10,0.001,0.2,0.02,0.3,0.03]\ngrid1=dict(kernel=kernel,gamma=gamma,C=c)\n","074f7775":"grid_search_1 = GridSearchCV(estimator=model5, param_grid=grid1,cv=5)","d52d363b":"grid_result_1 = grid_search_1.fit(X, y)","832b3aad":"print(\"Best Score=\",grid_result_1.best_score_)\nprint(\"Best parameters=\",grid_result_1.best_params_)","8dc7c1ed":"test=pd.read_csv(r\"\/kaggle\/input\/titanic\/test.csv\")","86ae3084":"test.head()","d196f3a7":"test.drop(['Cabin','Ticket'],axis=1,inplace=True)","fa5a22a2":"test=test.rename(columns={'Pclass':'Ticket Class','SibSp':'No of sib\/Spouses','Parch':'No of parents\/children'})","990f6e44":"test.head()","671b361f":"test.isnull().sum()","cfd7c1e9":"test['Age'].replace(np.nan,0,inplace=True)","8fbc8165":"test['Fare'].replace(np.nan,0,inplace=True)","1889a5e5":"test['Sex']=test['Sex'].replace({'male':'1','female':'0'})\nencoder=LabelEncoder()\ntest['Embarked']=encoder.fit(test['Embarked']).transform(test['Embarked'])","c258766f":"test.head()","bbdfece5":"X_test=test[['Ticket Class','Sex','Age','No of sib\/Spouses','No of parents\/children','Embarked','Fare']]","7cc5a036":"scaler=StandardScaler()\nX_test=scaler.fit(X_test).transform(X_test)","13ef3b72":"sub=pd.read_csv(r\"\/kaggle\/input\/titanic\/gender_submission.csv\")","34a218ef":"sub.head()","3d1b9159":"dt_pred=model2.predict(X_test)\nsub['Survived']=dt_pred","760a8922":"dt_pred.shape","eb4ac11a":"LR_pred=model1.predict(X_test)\nsub['Survived']=LR_pred\nsub.to_csv(r'\/kaggle\/working\/Lr.csv',index=False)","76faf297":"rf_pred=model3.predict(X_test)\nsub['Survived']=rf_pred\nsub.to_csv(r'\/kaggle\/working\/rf.csv',index=False)","6b97f40c":"xg_pred=model4.predict(X_test)\nsub['Survived']=xg_pred\nsub.to_csv(r'\/kaggle\/working\/xgb.csv',index=False)","b91c3747":"svm_pred=model5.predict(X_test)\nsub['Survived']=svm_pred\nsub.to_csv(r'\/kaggle\/working\/svm.csv',index=False)","48d71789":"import pickle","becc7f87":"pickle.dump(model5,open('\/kaggle\/working\/model5.pkl','wb'))","17ddd981":"# 2.Decision Tree","a2212ac4":"# 3. Random Forest","8b2464e5":"# Thankyou!","91f36060":"# Test set evaluation","c987e58d":"# 5. SVM","31bf3486":"# Embarked :\n    S=Southampton\n    C=Cherbourg\n    Q=Queenstown","20fdd42f":"<center> <img src=\"https:\/\/cdn.britannica.com\/79\/4679-050-BC127236\/Titanic.jpg\"> <\/center>","3e311b6c":"## Parameter tuning of SVM\n","916687eb":"# Maximum number of people belong to class 3","197f3975":"# 1.Logistic Regression","cbf8438b":"# 4. XgBoost","59a0001a":"# Out of all models SVM turned out to be the best with a score of 0.77 on test data"}}