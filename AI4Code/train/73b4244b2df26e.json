{"cell_type":{"3b23c297":"code","85ae84e7":"code","670f2162":"code","a4b35ca1":"code","a8635e61":"code","c29aff48":"code","b8134430":"code","13481ab9":"code","ab374d6c":"code","24bf9376":"code","f41dd1c9":"code","a7cb244c":"code","e5324f73":"code","ecfddccf":"code","cfacc744":"code","f911aa70":"code","86cb70c3":"code","631b3633":"code","45a5c9b4":"code","eddc3174":"code","7222af0b":"code","19fa96f0":"code","109a162b":"code","521a1b87":"code","23e8659e":"code","3bd20112":"code","0f164db3":"code","7cccd5f6":"code","c32cc956":"code","d50a20e8":"code","1bea62b3":"code","480cd070":"code","7f73d9d5":"code","37dc9ed7":"code","fc38bc93":"code","5228a8ac":"code","632c46bb":"code","9987fd3b":"code","a1e96d68":"code","ee6d79f9":"markdown"},"source":{"3b23c297":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","85ae84e7":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","670f2162":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","a4b35ca1":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","a8635e61":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/cusersmarildownloadsetudiantscsv\/etudiants.csv', delimiter=';', nrows = nRowsRead)\ndf1.dataframeName = 'etudiants.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","c29aff48":"df1.head(5)","b8134430":"df1.shape","13481ab9":"df1.columns","ab374d6c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n","24bf9376":"ax = sns.swarmplot(x=\"sexe\", y=\"effectif\", hue=\"rentree\",\n...                    data=df1, palette=\"Set2\", dodge=True)","f41dd1c9":" ax = sns.swarmplot(x=\"rentree\", y=\"sexe\", data=df1)","a7cb244c":"ax = sns.swarmplot(x=\"rentree\", y=\"effectif\", data=df1)","e5324f73":" ax = sns.swarmplot(x=\"sexe\", y=\"effectif\", hue=\"rentree\", data=df1)","ecfddccf":"ax = sns.swarmplot(x=\"sexe\", y=\"effectif\", data=df1, size=6)","cfacc744":"ax = sns.boxplot(x=\"rentree\", y=\"effectif\", data=df1, whis=np.inf)\nax = sns.swarmplot(x=\"rentree\", y=\"effectif\", data=df1, color=\".2\")","f911aa70":" g = sns.catplot(x=\"sexe\", y=\"effectif\",\n...                 hue=\"rentree\", col=\"secteur\",\n...                 data=df1, kind=\"swarm\",\n...                 height=4, aspect=.7);","86cb70c3":"df1.info","631b3633":"df1.describe()","45a5c9b4":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","eddc3174":"plotPerColumnDistribution(df1, 10, 5)","7222af0b":"plotCorrelationMatrix(df1, 8)","19fa96f0":"plotScatterMatrix(df1, 15, 10)","109a162b":"df1.rentree.describe()","521a1b87":"print (\"Skew is:\", df1.rentree.skew())\nplt.hist(df1.rentree, color='purple')\nplt.show()","23e8659e":"target = np.log(df1.rentree)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='orange')\nplt.show()","3bd20112":"numeric_features = df1.select_dtypes(include=[np.number])\nnumeric_features.dtypes","0f164db3":"corr = numeric_features.corr()\n\nprint (corr['rentree'].sort_values(ascending=False)[1:11], '\\n')\nprint (corr['rentree'].sort_values(ascending=False)[-10:])","7cccd5f6":"df1.rentree.unique()","c32cc956":"df1.effectif.unique","d50a20e8":"#Define a function which can pivot and plot the intended aggregate function \ndef pivotandplot(data,variable,onVariable,aggfunc):\n    pivot_var = data.pivot_table(index=variable,\n                                  values=onVariable, aggfunc=aggfunc)\n    pivot_var.plot(kind='bar', color='purple')\n    plt.xlabel(variable)\n    plt.ylabel(onVariable)\n    plt.xticks(rotation=0)\n    plt.show()","1bea62b3":"pivotandplot(df1,'rentree','sexe',np.median)","480cd070":"# numpy, matplotlib, seaborn\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","7f73d9d5":"# It is a continous variable and hence lets look at the relationship of rentree (start of the university year) with sexe (gender) using a Regression plot\n\n_ = sns.regplot(df1['rentree'], df1['sexe'])","37dc9ed7":"import matplotlib.pyplot as plt\nplt.style.use(style='ggplot')\nplt.rcParams['figure.figsize'] = (10, 6)","fc38bc93":"df1.plot(kind='scatter', x='rentree', y='effectif', alpha=0.5, color='mediumorchid', figsize = (12,9))\nplt.title('rentree And effectif')\nplt.xlabel(\"rentree\")\nplt.ylabel(\"effectif\")\nplt.show()","5228a8ac":"ax = sns.scatterplot(x=\"sexe\", y=\"effectif\", \\\n                     hue=\"rentree\", legend=\"full\", palette='RdPu', data=df1)","632c46bb":"# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df1['rentree'], df1['sexe'], df1['effectif'], c='darkolivegreen', s=60)\nax.view_init(30, 185)\nplt.show()","9987fd3b":"ax = sns.violinplot(x=\"rentree\", y=\"effectif\", data=df1, \n                    inner=None, color=\".8\")\nax = sns.stripplot(x=\"rentree\", y=\"effectif\", data=df1, \n                   jitter=True)\nax.set_title('effectif vs rentree')\nax.set_ylabel('effectif rentree')","a1e96d68":"fig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(16,8))\n\nsns.boxplot(x='rentree', y='effectif', data=df1, ax=axis1);\naxis1.set_title('effectif vs rentree')\naxis1.set_ylabel('effectif index')\nsns.boxplot(x='rentree', y='sexe', data=df1, ax=axis2);\naxis2.set_title('sexe vs rentree')\naxis2.set_ylabel('sexe index')\nsns.boxplot(x='rentree', y='effectif_ing', data=df1, ax=axis3);\naxis3.set_title('effectif_ing vs rentree')\naxis3.set_ylabel('effectif index')","ee6d79f9":"The SWARMPLOTS!"}}