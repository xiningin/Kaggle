{"cell_type":{"0dcf8c07":"code","dd4d9b80":"code","b1f414b5":"code","dd18914a":"code","4de2ed6d":"code","33b301ee":"code","5f628487":"code","6a6b74cf":"code","5d4af53c":"code","74d1f684":"code","b713787c":"code","220d62d8":"code","73ee717e":"code","dea99bf8":"code","348b2993":"code","d2b1d641":"code","0bfd4409":"code","b4f20743":"code","95b5951f":"code","54a3ef37":"code","9629b6fc":"code","f6c96c92":"code","ca92cdc7":"code","e2bf896c":"code","541b3716":"code","cdaf0458":"code","9c0aefa4":"code","b4a7df09":"code","13330995":"code","31734c74":"code","b0a50839":"code","ce20f24e":"code","28ef52fa":"code","dd2010ab":"code","73e3ef21":"code","06302443":"code","c51f8807":"code","2f89590d":"code","19fb1290":"code","849d12d5":"code","c3651639":"markdown","6e0e2646":"markdown","685512ef":"markdown","aa25427f":"markdown"},"source":{"0dcf8c07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd4d9b80":"Covid_Testing = pd.read_csv('\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\nCovid_Testing.head()","b1f414b5":"Covid_Testing['State'].unique()","dd18914a":"print(Covid_Testing['Date'].min())\nprint(Covid_Testing['Date'].max())","4de2ed6d":"def transform_to_datetime(column):\n    Covid_Testing[column] = pd.to_datetime(Covid_Testing[column])","33b301ee":"for i in ['Date']:\n    transform_to_datetime(i)","5f628487":" Covid_Testing.dtypes","6a6b74cf":"Covid_Summary = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\nCovid_Summary.head()","5d4af53c":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","74d1f684":"Covid_Summary.isnull().sum()","b713787c":"Covid_Summary.info()","220d62d8":"Covid_Summary = Covid_Summary.drop(['Sno','ConfirmedIndianNational', 'ConfirmedForeignNational'], axis=1)\nCovid_Summary.head()","73ee717e":"Covid_Summary['Active'] = Covid_Summary['Confirmed'] - Covid_Summary['Cured'] - Covid_Summary['Deaths']\nCovid_Summary.tail()","dea99bf8":"Covid_Summary['Date'] = pd.to_datetime(Covid_Summary['Date'])","348b2993":"Covid_Summary.info()","d2b1d641":"india_cases = Covid_Summary[Covid_Summary['Date'] == Covid_Summary['Date'].max()].copy().fillna(0)\nindia_cases.index = india_cases[\"State\/UnionTerritory\"]\nindia_cases = india_cases.drop(['State\/UnionTerritory', 'Time','Date'], axis=1)","0bfd4409":"india_cases.head()","b4f20743":"df = pd.DataFrame(pd.to_numeric(india_cases.sum())).transpose()\ndf.style.background_gradient(cmap='BuGn',axis=1)","95b5951f":"Trend = Covid_Summary.groupby(['Date'])['Confirmed', 'Deaths','Cured',].sum().reset_index()\nTrend.head()","54a3ef37":"fig = go.Figure(go.Bar(x= Trend.Date, y= Trend.Cured, name='Recovered'))\nfig.add_trace(go.Bar(x=Trend.Date, y= Trend.Deaths, name='Deaths'))\nfig.add_trace(go.Bar(x=Trend.Date, y= Trend.Confirmed, name='Confirmed'))\n\nfig.update_layout(barmode='stack',legend_orientation=\"h\",legend=dict(x= 0.3, y=1.1),\n                 paper_bgcolor='white',\n                 plot_bgcolor = \"white\",)\nfig.show()","9629b6fc":"import plotly.express as px","f6c96c92":"def horizontal_bar_chart(df, x, y, title, x_label, y_label, color):\n    fig = px.bar(df, x=x, y=y, orientation='h', title=title, \n                 labels={x.name: x_label,\n                         y.name: y_label}, color_discrete_sequence=[color])\n    fig.update_layout(yaxis={'categoryorder': 'total ascending'})\n    fig.show()","ca92cdc7":"top_10_death_states = india_cases.sort_values('Deaths',ascending = False)[:10]\nhorizontal_bar_chart(top_10_death_states,top_10_death_states.Deaths, top_10_death_states.index,\n                     'Top 10 States with most deaths','Number of deaths(In Thousands)','State Name','Orange')","e2bf896c":"top_10_confirmed_states = india_cases.sort_values('Confirmed', ascending=False)[:10]\nhorizontal_bar_chart(top_10_confirmed_states,top_10_confirmed_states.Confirmed, top_10_confirmed_states.index,\n            'Top 10 Indian States (Confirmed Cases)', 'Number of Confirmed cases (in Thousands)','States Name','blue')\n","541b3716":"top_10_recovered_states = india_cases.sort_values('Cured', ascending=False)[:10]\nhorizontal_bar_chart(top_10_recovered_states, top_10_recovered_states.Cured, top_10_recovered_states.index,\n                    'Top 10 States (Cured Cases)', 'Number of Cured cases (in Thousands)', 'States Name', 'Purple')","cdaf0458":"vaccination = pd.read_csv(r\"..\/input\/covid19-in-india\/covid_vaccine_statewise.csv\")\nvaccination.tail()","9c0aefa4":"vaccination['Total Vaccinatons'] = vaccination['First Dose Administered']+vaccination['Second Dose Administered']\n\n#Renaming columns\nvaccination.rename(columns = {'Updated On':'Date'}, inplace = True)","b4a7df09":"Maharashtra = vaccination[vaccination[\"State\"]==\"Maharashtra\"]\nfig = px.line(Maharashtra,x=\"Date\",y=\"Total Vaccinatons\",title=\"Vaccination till date in Maharashtra\")  \nfig.update_xaxes(rangeslider_visible=True) ","13330995":"fig = px.line(Maharashtra,x=\"Date\",y=\"CoviShield (Doses Administered)\",title=\"CoviShield Administered in Mahrashtra\")  \nfig.update_xaxes(rangeslider_visible=True) ","31734c74":"fig = px.line(Maharashtra,x=\"Date\",y=' Covaxin (Doses Administered)',title=\"Covaxin Administered in Maharashtra\")  \nfig.update_xaxes(rangeslider_visible=True) ","b0a50839":"from fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfrom plotly.offline import iplot, init_notebook_mode\nmodel = Prophet()","ce20f24e":"Confirmed = Trend.loc[:, ['Date', 'Confirmed']] \nConfirmed.tail()","28ef52fa":"Cured = Trend.loc[:, ['Date', 'Cured']] \nCured.tail()","dd2010ab":"# Dataframe must have columns \"Date\" and \"Values\" with the dates and values  for prophet prediction\nConfirmed.columns = ['ds', 'y']\nmodel.fit(Confirmed)","73e3ef21":"future = model.make_future_dataframe(periods=60) # helper function to extend the dataframe for specified days\nfuture.tail()","06302443":"# yhat represents the prediction, while yhat_lower and yhat_upper represent the lower and upper bound\nforecast_india_conf = model.predict(future)\nforecast_india_conf","c51f8807":"fig = plot_plotly(model, forecast_india_conf) \n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","2f89590d":"model1 = Prophet()\n# Dataframe must have columns \"Date\" and \"Values\" with the dates and values  for prophet prediction\nCured.columns = ['ds', 'y']\nmodel1.fit(Cured)\n\nfuture_1 = model1.make_future_dataframe(periods=60) # helper function to extend the dataframe for specified days\nfuture_1.tail()\n","19fb1290":"# yhat represents the prediction, while yhat_lower and yhat_upper represent the lower and upper bound\nforecast_india_cured = model1.predict(future_1)\nforecast_india_cured","849d12d5":"fig = plot_plotly(model1, forecast_india_cured) \n\nfig.update_layout(template='plotly_white')\n\niplot(fig) ","c3651639":"# Let's take a look at data.","6e0e2646":"# Import required libraries","685512ef":"#  Handle Date Column","aa25427f":"For the prediction purpose we have use Prophet library produced by Facebook which is used for Time series Forecasting. Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data"}}