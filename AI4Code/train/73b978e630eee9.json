{"cell_type":{"0bfab218":"code","ef1d8a29":"code","cdaa5e86":"code","f919043e":"code","9d166eb5":"code","fc60d3ea":"code","cccc7b2f":"code","21893304":"code","489c659b":"code","e34a943a":"code","ca795ab6":"code","8c64d946":"code","d9179618":"code","1ce9b03c":"code","fef2a9c8":"code","17fc2938":"code","1f3e5509":"code","a2d65a34":"code","6bdd8cac":"code","126c2637":"markdown","35f4ba90":"markdown","46ecc154":"markdown","a3166462":"markdown","f18202b1":"markdown","b53c7388":"markdown","7b800705":"markdown","3e4b70e7":"markdown","c6f39ff1":"markdown","702686b6":"markdown","302dfafe":"markdown"},"source":{"0bfab218":"import numpy as np\nimport pandas as pd\n\npd.set_option('display.max_colwidth', None)\npd.set_option('display.max_rows', 999)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport itertools\nimport math\n\nimport h2o\nfrom h2o.automl import H2OAutoML","ef1d8a29":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntrain['date'] = pd.to_datetime(train.date)\nprint(train.info())\ntrain.head()","cdaa5e86":"test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\ntest['date'] = pd.to_datetime(test.date)\nprint(test.info())\ntest.head()","f919043e":"holiday_df = pd.read_csv('..\/input\/public-and-unofficial-holidays-nor-fin-swe-201519\/holidays.csv')\nprint(holiday_df.info())\nholiday_df.head()","9d166eb5":"gdp_df = pd.read_csv('..\/input\/gdp-20152019-finland-norway-and-sweden\/GDP_data_2015_to_2019_Finland_Norway_Sweden.csv')\nprint(gdp_df.info())\ngdp_df.head()","fc60d3ea":"weather_df = pd.read_csv('..\/input\/finland-norway-and-sweden-weather-data-20152019\/nordics_weather.csv')\nweather_df['date'] = pd.to_datetime(weather_df.date)\nprint(weather_df.info())\nweather_df.head()","cccc7b2f":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","21893304":"# sns.relplot(data=train, x='date', y='num_sold', row='country', col='store', hue='product',\n#             aspect=3, height=2.5, kind='line')","489c659b":"h2o.init(min_mem_size=\"14G\")","e34a943a":"H_train = h2o.H2OFrame(train)\nH_test = h2o.H2OFrame(test)","ca795ab6":"target = 'num_sold'\n\nfeatures = [f for f in train.columns if f != target]\nfeatures.remove('row_id')\nfeatures.remove('date')\n\nfrom h2o.automl import H2OAutoML \n\naml = H2OAutoML(max_runtime_secs = 120, \n                seed = 42,\n                stopping_metric='MAE') \n\naml.train(x=features,\n          y=target,\n          training_frame=H_train) \n\nlb = aml.leaderboard \nlb.head(5)","8c64d946":"print(train.shape, train.isna().sum().sum())\ntrain = train.merge(weather_df, on=['country', 'date'], how='left')\nprint(train.shape, train.isna().sum().sum())\n\nprint(test.shape, test.isna().sum().sum())\ntest = test.merge(weather_df, on=['country', 'date'], how='left')\nprint(test.shape, test.isna().sum().sum())","d9179618":"H_train = h2o.H2OFrame(train)\nH_test = h2o.H2OFrame(test)\n\nfeatures = [f for f in train.columns if f != target]\nfeatures.remove('row_id')\nfeatures.remove('date')\n\naml = H2OAutoML(max_runtime_secs = 360, \n                seed = 42,\n                stopping_metric='MAE') \n\naml.train(x=features,\n          y=target,\n          training_frame=H_train) \n\nlb = aml.leaderboard \nlb.head(5)","1ce9b03c":"# https:\/\/www.kaggle.com\/maxencefzr\/tps-jan22-catboost-using-pycaret\nimport dateutil.easter as easter\n\ndef holiday_features(holiday_df, df):\n    \n    fin_holiday = holiday_df.loc[holiday_df.country == 'Finland']\n    swe_holiday = holiday_df.loc[holiday_df.country == 'Sweden']\n    nor_holiday = holiday_df.loc[holiday_df.country == 'Norway']\n    \n    df['fin holiday'] = df.date.isin(fin_holiday.date).astype(int)\n    df['swe holiday'] = df.date.isin(swe_holiday.date).astype(int)\n    df['nor holiday'] = df.date.isin(nor_holiday.date).astype(int)\n    \n    df['holiday'] = np.zeros(df.shape[0]).astype(int)\n    \n    df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\n    df.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\n    df.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']\n    \n    df.drop(['fin holiday', 'swe holiday', 'nor holiday'], axis=1, inplace=True)\n    \n    # Easter\n    easter_date = df.date.apply(lambda date: pd.Timestamp(easter.easter(date.year)))\n    df['days_from_easter'] = (df.date - easter_date).dt.days.clip(-5, 65)\n    \n    # Last Sunday of May (Mother's Day)\n    sun_may_date = df.date.dt.year.map({\n        2015: pd.Timestamp(('2015-5-31')),\n        2016: pd.Timestamp(('2016-5-29')),\n        2017: pd.Timestamp(('2017-5-28')),\n        2018: pd.Timestamp(('2018-5-27')),\n        2019: pd.Timestamp(('2019-5-26'))\n    })\n    #new_df['days_from_sun_may'] = (df.date - sun_may_date).dt.days.clip(-1, 9)\n    \n    # Last Wednesday of June\n    wed_june_date = df.date.dt.year.map({\n        2015: pd.Timestamp(('2015-06-24')),\n        2016: pd.Timestamp(('2016-06-29')),\n        2017: pd.Timestamp(('2017-06-28')),\n        2018: pd.Timestamp(('2018-06-27')),\n        2019: pd.Timestamp(('2019-06-26'))\n    })\n    df['days_from_wed_jun'] = (df.date - wed_june_date).dt.days.clip(-5, 5)\n    \n    # First Sunday of November (second Sunday is Father's Day)\n    sun_nov_date = df.date.dt.year.map({\n        2015: pd.Timestamp(('2015-11-1')),\n        2016: pd.Timestamp(('2016-11-6')),\n        2017: pd.Timestamp(('2017-11-5')),\n        2018: pd.Timestamp(('2018-11-4')),\n        2019: pd.Timestamp(('2019-11-3'))\n    })\n    df['days_from_sun_nov'] = (df.date - sun_nov_date).dt.days.clip(-1, 9)\n    \n    return df\n\nprint(train.shape, train.isna().sum().sum())\ntrain = holiday_features(holiday_df, train)\nprint(train.shape, train.isna().sum().sum())\n\nprint(test.shape, test.isna().sum().sum())\ntest  = holiday_features(holiday_df, test)\nprint(test.shape, test.isna().sum().sum())","fef2a9c8":"H_train = h2o.H2OFrame(train)\nH_test = h2o.H2OFrame(test)\n\nfeatures = [f for f in train.columns if f != target]\nfeatures.remove('row_id')\nfeatures.remove('date')\n\naml = H2OAutoML(max_runtime_secs = 360, \n                seed = 42,\n                stopping_metric='MAE') \n\naml.train(x=features,\n          y=target,\n          training_frame=H_train) \n\nlb = aml.leaderboard \nlb.head(5)","17fc2938":"def new_date_features(df):\n    df['year'] = df.date.dt.year \n    df['quarter'] = df.date.dt.quarter\n    df['month'] = df.date.dt.month  \n    df['week'] = df.date.dt.week \n    df['day'] = df.date.dt.day  \n    df['weekday'] = df.date.dt.weekday\n    df['day_of_week'] = df.date.dt.dayofweek  \n    df['day_of_year'] = df.date.dt.dayofyear  \n    df['week_of_year'] = df.date.dt.weekofyear\n    df['day_of_month'] = df.date.dt.days_in_month  \n    df['is_weekend'] = np.where((df['weekday'] == 5) | (df['weekday'] == 6), 1, 0)\n    df['is_friday'] = np.where((df['weekday'] == 4), 1, 0)\n    \n#     df.drop('date', axis=1, inplace=True)\n    \n    return df\n    \nprint(train.shape, train.isna().sum().sum())\ntrain = new_date_features(train)\nprint(train.shape, train.isna().sum().sum())\n\nprint(test.shape, test.isna().sum().sum())\ntest  = new_date_features(test)\nprint(test.shape, test.isna().sum().sum())","1f3e5509":"H_train = h2o.H2OFrame(train)\nH_test = h2o.H2OFrame(test)\n\nfeatures = [f for f in train.columns if f != target]\nfeatures.remove('row_id')\nfeatures.remove('date')\n\naml = H2OAutoML(max_runtime_secs = 360, \n                seed = 42,\n                stopping_metric='MAE') \n\naml.train(x=features,\n          y=target,\n          training_frame=H_train) \n\nlb = aml.leaderboard \nlb.head(5)","a2d65a34":"H_train = h2o.H2OFrame(train)\nH_test = h2o.H2OFrame(test)\n\ntarget = 'num_sold'\n\nfeatures = [f for f in train.columns if f != target]\nfeatures.remove('row_id')\n\nH_train['fold'] = H_train['year'] - 2015\nH_train.summary()\n\nfrom h2o.automl import H2OAutoML \n\naml = H2OAutoML(max_runtime_secs = 10 * 3600, \n                seed = 42,\n                stopping_metric='MAE') \n\naml.train(x=features,\n          y=target,\n          training_frame=H_train,\n          fold_column='fold') \n\nlb = aml.leaderboard \nlb.head()","6bdd8cac":"test['num_sold'] = np.round(aml.predict(H_test).as_data_frame().values)\nsubmission = test[['row_id', 'num_sold']].copy()\nsubmission.to_csv('submission.csv', index=False)","126c2637":"# Competition Metric\nhttps:\/\/www.kaggle.com\/cpmpml\/smape-weirdness","35f4ba90":"# H2O Final","46ecc154":"# Date features","a3166462":"## Weather\nhttps:\/\/www.kaggle.com\/adamwurdits\/finland-norway-and-sweden-weather-data-20152019\nhttps:\/\/www.kaggle.com\/adamwurdits\/tps-01-2022-weather-eda","f18202b1":"# Baseline","b53c7388":"# Load the data","7b800705":"# Libraries","3e4b70e7":"## Holidays\nhttps:\/\/www.kaggle.com\/maxencefzr\/tps-jan22-catboost-using-pycaret\n","c6f39ff1":"# Submission","702686b6":"# Summary","302dfafe":"# Feature Engineering\n"}}