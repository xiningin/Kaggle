{"cell_type":{"e1682240":"code","08cf04f1":"code","908c463d":"code","de34600d":"code","4c88577d":"code","8a90af2a":"code","8c7b867f":"code","ded548c9":"code","8f57b024":"code","1b636dfb":"code","d495ba53":"code","f9c0d8b6":"code","aecf426b":"code","2a3ac8fc":"code","12a449ea":"code","ebb924dd":"code","ec6d6ace":"code","bfc6311d":"code","790b7cf3":"code","9f10bb4c":"code","a6201c5f":"markdown","29c9d482":"markdown","c4f461e5":"markdown","c95410ca":"markdown","731561a7":"markdown","2b4717d1":"markdown","06f6f256":"markdown","7771d211":"markdown"},"source":{"e1682240":"import gc, os, re, sys, time\nimport pandas as pd, numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML, display\nfrom wordcloud import WordCloud\nfrom bs4 import BeautifulSoup\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.manifold import TSNE\nimport plotly.express as px\nfrom nltk.stem import SnowballStemmer\nstemmer = SnowballStemmer(\"english\")\n\nMK = Path(f'..\/input\/meta-kaggle')\nID = 'Id'\nFORUM_ID = 'ForumId'\nHOST = 'https:\/\/www.kaggle.com'\n\n# Copied from:\n# https:\/\/github.com\/GaelVaroquaux\/my_topics\/blob\/master\/topics_extraction.py\nPROTECTED_WORDS = ['pandas', 'itertools', 'physics', 'keras']\n\ndef no_plural_stemmer(word):\n    \"\"\" A stemmer that tries to apply only on plural. The goal is to keep\n        the readability of the words.\n    \"\"\"\n    word = word.lower()\n    if word.endswith('s') and not (word in PROTECTED_WORDS\n                                   or word.endswith('sis')):\n        stemmed_word = stemmer.stem(word)\n        if len(stemmed_word) == len(word) - 1:\n            word = stemmed_word\n    return word\n\n# Not perfect but better than nothing\nclass StemmedTfidfVectorizer(TfidfVectorizer):\n    def build_analyzer(self):\n        analyzer = super(TfidfVectorizer, self).build_analyzer()\n        return lambda doc: (no_plural_stemmer(w) for w in analyzer(doc))\n\ndef simple_slug(txt):\n    return re.sub('[^a-zA-Z0-9\\-_]+', '-', txt.lower())\n\ndef html_to_text(r):\n    return BeautifulSoup(r, 'html').text\n\ndef search_url(q):\n    return f'https:\/\/www.kaggle.com\/search?q={q}'","08cf04f1":"NROWS = None # For testing on subset\n\n# Competitions\ncomps = pd.read_csv(MK \/ 'Competitions.csv', parse_dates=['DeadlineDate'], index_col=ID)\ntags = pd.read_csv(MK \/ 'Tags.csv', index_col=ID)\nctags = pd.read_csv(MK \/ 'CompetitionTags.csv')\nctags['Slug'] = ctags.TagId.map(tags.Slug)\ncomps['Tags'] = ctags.groupby('CompetitionId').Slug.apply(\" : \".join)\ncomps['Tags'] = comps['Tags'].fillna(\"none\")\ncomps['Year'] = comps.DeadlineDate.dt.year\ncomps = comps.drop_duplicates(subset=['ForumId'], keep='last') # 575380 and 585319\n\n# Forum Details\nforums = pd.read_csv(MK \/ 'Forums.csv', index_col=ID)\ntopics = pd.read_csv(MK \/ 'ForumTopics.csv', index_col=ID)\ntopics.Title.fillna('', inplace=True)\n\n# Forum Messages\nmsgs = pd.read_csv(MK \/ 'ForumMessages.csv', index_col=ID, nrows=NROWS)\nmsgs = msgs.dropna(subset=['Message'])\nmsgs.insert(0, 'ForumId', msgs.ForumTopicId.map(topics.ForumId))\nmsgs.insert(0, 'ParentForumId', msgs.ForumId.map(forums.ParentForumId))\ntext = ('<html>' + msgs.Message + '<\/html>').apply(html_to_text)\ntext = text.str.replace(r'(https?:\/\/\\S+|\\[\/?quote.*?\\])', ' ') # strip URLs, [quote] \ntext = text.str.replace(r'([\\W_]{4,})', ' ') # and junk\ntext = text.str.replace(r'([a-fA-F0-9]{12,})', ' ') # long hash-like strings\n# Add topic titles to each post - this over-weights the title words a little,\n#  depending on how many messages are in a topic\nmsgs['Text'] = msgs.ForumTopicId.map(topics.Title) + \" \" + text\nmsgs.shape","908c463d":"forums.shape","de34600d":"forums.describe(include='all').T","4c88577d":"top_level = forums[forums.ParentForumId.isnull()].copy()\ntop_level['ForumCount'] = forums.groupby('ParentForumId').size()\ntop_level","8a90af2a":"colormaps = [\n    # Sequential\n    'Purples',\n    'Blues',\n    'Greens',\n    'Oranges',\n    'Reds',\n    'YlOrBr',\n    'YlOrRd',\n    'OrRd',\n    'PuRd',\n    'RdPu',\n    'BuPu',\n    'GnBu',\n    'PuBu',\n    'PuBuGn',\n    'BuGn',\n    'YlGn',\n    # Qualitative\n    'Paired',\n    'Accent',\n    'Set1',\n    'Set2',\n    'Set3',\n    'tab10',\n    'tab20',\n    # Sequential2\n    'spring',\n    'summer',\n    'autumn',\n    'winter',\n    'cool',\n    'Wistia',\n    # Miscellaneous\n    'gist_rainbow',\n    'rainbow'\n]","8c7b867f":"np.random.seed(42) # what else?\nnp.random.shuffle(colormaps)","ded548c9":"def competition_html(forumid):\n    df = comps[comps['ForumId'] == forumid]\n    if len(df) != 1:\n        return \"\"\n    c = df.iloc[0]\n    return (\n        '<p>'\n        f'<i>{c.HostSegmentTitle} Competition<\/i>:'\n        f'   <b><a target=_blank href=\"{HOST}\/c\/{c.Slug}\">{c.Title}<\/a><\/b>'\n        f'   \"<i>{c.Subtitle}<\/i>\"'\n        '<br\/>'\n        f'<i>TotalTeams<\/i>: <b>{c.TotalTeams}<\/b>'\n        '<br\/>'\n        f'<i>DeadlineDate<\/i>: <b>{c.DeadlineDate.strftime(\"%c\")}<\/b>'\n    )","8f57b024":"NTOP = 200\nSHOW_TOP_WORDS = 20\n\n# Using a class is better than one big function.\n# For example you can fork the Notebook and have a look at the 'tfv' member.\nclass CloudGenerator:\n    def __init__(self, tag, par, max_df=0.95):\n        self.par = par\n        self.tag = tag\n        docs = {}\n        # One big document per FORUM_ID.\n        # Note: code in 'run' relies on Python 3 feature of storing key\/value pairs\n        #  in order they were added.\n        for fid, df in par.groupby(FORUM_ID):\n            docs[fid] = '\\n'.join(df.Text)\n\n        self.tfv = StemmedTfidfVectorizer(ngram_range=(1, 1),\n                                     max_df=max_df,\n                                     dtype=np.float32,\n                                     stop_words='english')\n        self.xall = self.tfv.fit_transform(docs.values())\n        self.words = self.tfv.get_feature_names()\n        self.ids = list(docs.keys())\n        self.rows = []\n\n    def save(self):\n        tag = self.tag\n        # save the stop words (determined by the max_df parameter)\n        np.savetxt(f'{tag}_stop_words.txt', list(sorted(self.tfv.stop_words_)), '%s')\n        # save stats of all forums to one file\n        cols = [ FORUM_ID, 'count', 'max', 'mean' ] + [f'tok{i}' for i in range(NTOP)]\n        df = pd.DataFrame(self.rows, columns=cols).set_index(FORUM_ID)\n        df.insert(0, 'Title', df.index.map(forums.Title))\n        df.to_csv(f'{tag}_word_stats.csv')\n        \n    def run(self):\n        for row, (fid, df) in enumerate(self.par.groupby(FORUM_ID)):\n            x = self.xall[row]\n            s = pd.Series(index=self.words, data=x.toarray().ravel())\n            s = s.sort_values(ascending=False)\n            \n            # save top words for CSV output\n            l = s.head(NTOP).index.str.replace(' ', '_').tolist()\n            self.rows.append([fid, (s > 0).sum(), s.max(), s.mean()] + l)\n        \n            title = forums.Title[fid]\n            nchars = df.Message.str.len().sum()\n            ntopics = df.ForumTopicId.nunique()\n            nmsg = df.shape[0]\n            top = s.head(SHOW_TOP_WORDS).index\n            top = [f\"<a href='{search_url(w)}'>{w}<\/a>\" for w in top]\n            top = ', '.join(top)\n            query = title\n        \n            html = f\"<h1 id='{simple_slug(title)}'>{title}<\/h1>\"\n            html += competition_html(fid)\n            url = f\"{HOST}\/search?q={query}+in%3Atopics\"\n\n            html += (\n                f\"<h3>Forum<\/h3>\"\n                f\"<ul>\"\n                f\"<li>Search Kaggle for <a href='{url}'>{query}<\/a> in topics\"\n                f\"<li>{ntopics} topics; {nmsg\/ntopics:.1f} messages per topic\"\n                f\"<li>{nmsg} messages; {nchars} raw characters; {nchars\/nmsg:.0f} chars per message\"\n                f\"<li>{df.PostUserId.nunique()} unique users\"\n                f\"<li>Top {SHOW_TOP_WORDS} words: {top}\"\n                f\"<\/ul>\"\n            )\n            \n            wc = WordCloud(background_color='black',\n                           width=800,\n                           height=600,\n                           colormap=colormaps[row % len(colormaps)],\n                           collocations=False,\n                           random_state=row,\n                           min_font_size=10,\n                           max_font_size=200).generate_from_frequencies(s[s>0])\n            \n            if False:\n                # wordcloud library now supports SVG\n                #   - but needs latest docker image; and\n                #   - renders poorly on this site, with overlapping words\n                html += wc.to_svg()\n                display(HTML(html))\n            else:\n                display(HTML(html))\n                fig, ax = plt.subplots(figsize=(12, 9))\n                ax.imshow(wc, interpolation='bilinear')\n                ax.axis('off')\n                plt.tight_layout()\n                plt.show()","1b636dfb":"cg = CloudGenerator('Competitions', msgs.query(\"ParentForumId==8\"))\ncg.run()\ncg.save()","d495ba53":"forums.query(\"ParentForumId==9\")","f9c0d8b6":"cg2 = CloudGenerator('General', msgs.query(\"ParentForumId==9\")) #, max_df=1.0\ncg2.run()\ncg2.save()","aecf426b":"NSVD = 120\nsvd = TruncatedSVD(n_components=NSVD, random_state=42)\nxc = svd.fit_transform(cg.xall)\nnp.round(svd.explained_variance_ratio_.cumsum(), 2)","2a3ac8fc":"svd_df = pd.DataFrame(xc, index=list(map(int,cg.ids))).add_prefix('svd')\nsvd_df['Title'] = forums['Title']\nsvd_df.to_csv(\"CompetitionForumsSVD.csv\", index_label=FORUM_ID)\nsvd_df.shape","12a449ea":"tsne = TSNE(perplexity=20,\n            early_exaggeration=1,\n            init='pca',\n            method='exact',\n            learning_rate=5,\n            n_iter=5000)\nx2 = tsne.fit_transform(xc)\ntsne_df = pd.DataFrame(x2, index=list(map(int, cg.ids))).add_prefix('tsne')\ntsne_df.shape","ebb924dd":"CTYPE = 'CType'\ncomps[CTYPE] = \"Default\"\ncomps.loc[comps.Title.str.contains(r\"Santa\\b\"), CTYPE] = 'Santa'\ncomps.loc[comps.Tags.str.contains(\"tabular-\"), CTYPE] = 'Tabular'\ncomps.loc[comps.Tags.str.contains(\"image-\"), CTYPE] = 'Image'\ncomps.loc[comps.Tags.str.contains(\"basketball\"), CTYPE] = 'Basketball'\ncomps[CTYPE].value_counts()","ec6d6ace":"forums_full = forums.join(tsne_df)\nforums_full['TopicCount'] = forums_full.index.map(topics.ForumId.value_counts())\nforums_full = forums_full.join(comps.reset_index().set_index(FORUM_ID).drop([\"Title\"], 1))\nforums_full = forums_full.dropna(subset=['Year'] + list(tsne_df.columns))\nforums_full.shape","bfc6311d":"forums_full.to_csv(\"CompetitionForumsTSNE.csv\", index_label=FORUM_ID)","790b7cf3":"# Forums TSNE\ntmp = forums_full.assign(DeadlineDate=forums_full.DeadlineDate.dt.strftime('%c'))\nfig = px.scatter(tmp,\n                 title='Competition Forums',\n                 x='tsne0',\n                 y='tsne1',\n                 symbol=CTYPE,\n                 hover_name='Title',\n                 hover_data=[\n                     'EvaluationAlgorithmAbbreviation', 'TopicCount',\n                     'DeadlineDate', 'TotalTeams', 'Tags'\n                 ],\n                 color='Year')\nfig.update_traces(marker=dict(size=9,\n                              line=dict(width=1, color='black')),\n                  selector=dict(mode='markers'))\nfig.update_layout(height=750, showlegend=False)","9f10bb4c":"_ = \"\"\"\nRe-run to include recently completed competitions:\n\n\tSlug:rsna-miccai-brain-tumor-radiogenomic-classification\n\tSlug:nfl-health-and-safety-helmet-assignment\n\tSlug:ventilator-pressure-prediction\n\tSlug:chaii-hindi-and-tamil-question-answering\n\tSlug:tabular-playground-series-oct-2021\n\tSlug:tabular-playground-series-nov-2021\n\n\"\"\"","a6201c5f":"### See Also\n\n[What Are You Talking About?](https:\/\/www.kaggle.com\/jtrotman\/what-are-you-talking-about)","29c9d482":"# \\*\\*\\* Bonus Content \\*\\*\\*\n\nNot just competition forums - let's also look at the top level ***General Forums*** found where *ParentForumId* is 9.\n","c4f461e5":"# WordClouds of Competition Forums\n\nThis Notebook generates visualisations of the most common terms in each competition forum using the forum posts HTML source available in [Meta Kaggle][1]. It's a simple method to show an eye-catching, bandwidth-busting, browser-melting, at-a-glance view of what each competition is about.\n\nIf you use simple counts of words for each competition all the common words rise to the top every time, like *data*, *kaggle*, *model*, *thanks for sharing*, *congratulations* etc :)\n\nWe need a way to ignore the words common to all competitions and let the competition-specific terms rise to the top. Using [Tf-Idf][2] and treating each forum as a document works quite well!\n\nThe title of each thread is prepended to every message, then the complete text of all the forum posts for a competition is concatenated together and treated as one document. The *Inverse document frequency* weights demote common words, whilst the *term frequency* weights count most frequent words in a competition, the `tf*idf` product is used for the word cloud frequencies.\n\n**There's now a [T-SNE scatterplot][5] at the end showing all competitions in a 2D space built from the words that the Kagglers\/hosts\/sponsors chose to write :)**\n\n### Credits\n\nNone of the actual mathematics of doing this are apparent in this notebook;\nwhat you see here is just glue code sitting on libraries, so many thanks to the authors:\n\n - https:\/\/amueller.github.io\/word_cloud\/\n - https:\/\/github.com\/amueller\/word_cloud\n - https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html\n - https:\/\/plotly.com\/python\/plotly-express\/\n\n### Directions\n\n\n&uarr; Use *Edit &rarr; Find in This Page...* (or *\u2318+F* or *control+F*) to search words (top 20 per forum are shown. e.g. search \"magic\")\n\n&rarr; Use the navigation bar to find specific competitions.\n\n### See Also\n\nThe [same idea can be applied to the top ranked discussion users][4]. Concatenate all their posts and generate a wordcloud per user instead of per forum. Then see each user's specific areas of expertise ;)\n\n\n[1]: https:\/\/www.kaggle.com\/kaggle\/meta-kaggle \"Meta Kaggle\"\n[2]: https:\/\/en.wikipedia.org\/wiki\/Tf%E2%80%93idf\n[3]: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.TfidfVectorizer.html \"TfidfVectorizer\"\n[4]: https:\/\/www.kaggle.com\/jtrotman\/what-are-you-talking-about\n[5]: #Scatter-Plot\n","c95410ca":"Add competition fields into the forums table","731561a7":"Define type of competition for scatterplot symbol","2b4717d1":"# Forums TSNE\n\nReduce the competitions down to two dimensions based on their forum text - competitions with similar forums should appear close together.\n\nFirst reduce using SVD.","06f6f256":"# Scatter Plot\n\nNote how there seems to be a drift over time - towards image competitions.\n\nThe long running Christmas optimization competitions get a space of their own, in a space closer to \"old\" forums. Similarly for the long running NCAA March Madness (most of the \"basketball\" type).\n\nImage based competitions appear to cluster in the \"newer\" region (2019 onwards), presumably because the forums discuss the same metrics. etc.\n\n(This makes a good competition browsing UI! Would be nice to be able to click links to competitions here...)","7771d211":"# General Forums\n\nQuick preview of the forums table.\n\nMeta Kaggle does not generally include forums for active competitions - the exceptions within the *Active Competitions* category refer to *InClass* competitions (teaching\/learning).\n\nThe main attention-grabbing *Featured* and *Research* competitions appear under *Past Competitions*. There are over 300 and these are the focus: there will be one wordcloud for each."}}