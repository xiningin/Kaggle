{"cell_type":{"3ad33230":"code","fa98531a":"code","fd92b845":"code","4c24465a":"code","bdb57a3e":"code","a91b2698":"code","f75df779":"code","533b2bf5":"code","b841a7a0":"code","7c117018":"code","ff15e503":"code","9f9fc61b":"code","f0bbb2b2":"code","5d091c49":"code","31a08b09":"code","41cf050b":"code","39616c9d":"code","edbb3547":"code","b9b5880f":"markdown"},"source":{"3ad33230":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa98531a":"df = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","fd92b845":"df.sample(10)","4c24465a":"df.shape","bdb57a3e":"#Description of DataFrame\ndf.describe(include = \"all\")","a91b2698":"#See if missing values are present\ndf.isna().sum()","f75df779":"#How many types of values are present\nprint(pd.value_counts(df['Class']))","533b2bf5":"LABELS = [\"Normal\", \"Fraud\"]","b841a7a0":"#Display plot of value counts\nclass_counts = pd.value_counts(df['Class'], sort = True)\nclass_counts.plot(kind = 'bar', rot=0, color=['blue','red']) #Added colors as a list \nplt.title('Counts of Fraud\/Normal')\nplt.xticks(range(2), LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Count\")","7c117018":"fraud = df[df[\"Class\"]==1]\n\nnormal = df[df[\"Class\"]==0]","ff15e503":"print(fraud.shape, normal.shape)","9f9fc61b":"#Use describe to look at how much the range of values are in the entire DataFrames\n#fraud.describe()\n#For specific column add column name like so\nfraud.Amount.describe()","f0bbb2b2":"normal.Amount.describe()","5d091c49":"#Subplots can be used to add multiple plots in the same window\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nfig.suptitle(\"Amount per class\", fontsize='large')\nbins = 50 #Best view possible\n\n#Specify which axis where you are going to plot\nax1.hist(fraud.Amount, bins = bins)\nax1.set_title('Fraudulent amount')\n#ax1.set_ylabel('Number of Transactions') Line shortened\n\nax2.hist(normal.Amount, bins = bins)\nax2.set_title('Normal amount')\n\nplt.xlabel('Amount ($)')\nplt.ylabel('Number of Transactions')\n#plt.xlim((0, 20000))\nplt.yscale('log') # Used to better view the second plot\nplt.show()","31a08b09":"df_sample = df.sample(frac=0.1, random_state=1)\n\nX = df_sample[df.columns.tolist()]\ny = df_sample[\"Class\"]\n\noutlier_fraction = len(fraud)\/ float(len(normal))\nstate = np.random.RandomState(42)","41cf050b":"from sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM","39616c9d":"classifiers = {\n    \"Isolation Forest\":IsolationForest(n_estimators=100, max_samples=len(X), \n                                       contamination=outlier_fraction, random_state=state, verbose=0),\n    \"Local Outlier Factor\":LocalOutlierFactor(n_neighbors=20, algorithm='auto', \n                                              leaf_size=30, metric='minkowski',\n                                              p=2, metric_params=None, contamination=outlier_fraction),\n    \"Support Vector Machine\":OneClassSVM(kernel='rbf', degree=3, gamma=0.1,nu=0.05, \n                                         max_iter=-1) #Random state not in OneClassSVM\n   \n}","edbb3547":"n_outliers = len(fraud)\nfor i, (clf_name,clf) in enumerate(classifiers.items()):\n    #Fit the data and tag outliers\n    if clf_name == \"Local Outlier Factor\":\n        y_pred = clf.fit_predict(X)\n        scores_prediction = clf.negative_outlier_factor_\n    elif clf_name == \"Support Vector Machine\":\n        clf.fit(X)\n        y_pred = clf.predict(X)\n    else:    \n        clf.fit(X)\n        scores_prediction = clf.decision_function(X)\n        y_pred = clf.predict(X)\n    #Reshape the prediction values to 0 for Valid transactions , 1 for Fraud transactions\n    y_pred[y_pred == 1] = 0\n    y_pred[y_pred == -1] = 1\n    n_errors = (y_pred != y).sum()\n    # Run Classification Metrics\n    print(\"{}: {}\".format(clf_name,n_errors))\n    print(\"Accuracy Score :\")\n    print(accuracy_score(y,y_pred))\n    print(\"Classification Report :\")\n    print(classification_report(y,y_pred))","b9b5880f":"# Sources:\n\nhttps:\/\/www.kaggle.com\/pavansanagapati\/anomaly-detection-credit-card-fraud-analysis\n\nhttps:\/\/matplotlib.org\/3.3.0\/api\/_as_gen\/matplotlib.pyplot.xticks.html\n\nhttps:\/\/matplotlib.org\/3.3.0\/api\/_as_gen\/matplotlib.pyplot.subplots.html\n\nhttps:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.suptitle.html\n\nhttps:\/\/www.geeksforgeeks.org\/matplotlib-pyplot-xlim-in-python\/#:~:text=The%20xlim()%20function%20in,limits%20of%20the%20current%20axes.\n\nhttps:\/\/matplotlib.org\/3.3.0\/api\/_as_gen\/matplotlib.pyplot.yscale.html\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.sample.html\n\nhttps:\/\/en.wikipedia.org\/wiki\/Isolation_forest"}}