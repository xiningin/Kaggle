{"cell_type":{"b37f070c":"code","94363346":"code","fc2fecaa":"code","aa6007a1":"code","840f6d12":"code","67e549fc":"code","a40ccadb":"code","df0d318b":"code","f59a5954":"code","29c848ae":"code","d8db50f8":"code","86306e0c":"code","5dc65c4b":"code","54baf2a8":"code","92b547ab":"code","918be5ce":"code","f3cfef08":"code","340a017b":"code","d4728dd1":"code","d2a95d8d":"code","27f71be0":"code","a3b3ceec":"code","0778ec9d":"code","06072717":"code","aa4e851f":"code","5a6a2fb7":"code","cf620392":"code","18edd6f6":"code","b5e1a72e":"code","4f5b28ef":"code","5d2b8f39":"code","e3610dd0":"code","8e5877d6":"code","47db2bff":"code","bb1aaae6":"code","854e1278":"code","6b489a8c":"code","ba7d54db":"code","95e3429d":"code","3e03f764":"code","c23fdf08":"code","811d98d5":"code","32589c51":"code","7436907b":"code","bad1a617":"code","7988689a":"code","e63eb1e7":"code","9781ed08":"code","0b0f4ec3":"code","581e1ca3":"code","3bbe7711":"code","b132f92d":"code","cb9c71c3":"code","76a99f94":"code","86dd0d02":"code","454d907e":"code","3266981f":"code","6d5c542e":"code","0220e0b4":"code","6c87e029":"code","0a99aa5a":"code","468a8b35":"code","1ccbd5ea":"code","bb28bc46":"code","f047fc2f":"code","1aaa7c71":"code","1d335e62":"code","eef59cc2":"code","34dd238d":"code","03319814":"code","ada00fd8":"code","80d605f3":"code","552166c6":"code","64adf28a":"code","fe16613f":"code","b3b640f9":"code","8b65aacb":"code","6e9706e7":"code","661b71eb":"code","abf42aca":"code","5b9ee75e":"code","c359eb64":"code","3c66767f":"code","33231568":"code","c251582a":"code","9de61540":"code","602f44c0":"code","edfdb4b9":"code","cf1fcbda":"code","76b5c766":"code","564120ec":"code","af769b74":"code","1069ec6f":"code","68516900":"code","e08e770c":"code","965e5aac":"code","3075dffd":"code","b503ad74":"code","b1675647":"code","0c0a5d5b":"code","a31c74d0":"code","d14d4f57":"code","87e02b7b":"code","a40ff915":"code","f6c93d02":"code","3d0543b6":"code","32d4bda7":"code","1c4781d8":"code","c28dad8f":"code","f034cffb":"code","9522c997":"code","e5ae7498":"code","9374cfa0":"code","15dab02f":"code","d048d669":"code","22080e88":"code","7cef6be8":"code","068a6220":"code","ed40d03c":"code","9eaef085":"code","4238854e":"code","33604187":"code","bed6a7e2":"code","c2c2e080":"code","54eac942":"code","b659cad7":"code","f3e0f904":"code","e732bd73":"code","bb5dd05a":"code","56471a72":"code","786a29ae":"code","f846b3a9":"code","1b154231":"code","6d500a6e":"code","85855ba9":"code","8c99c53d":"code","a4be19fe":"code","206284dc":"code","c608ead3":"code","5e75f8eb":"code","0f03f064":"code","cb170e70":"markdown","c6374d4c":"markdown","8c387138":"markdown","c4c86bbc":"markdown","598ce9d3":"markdown","f21f41ae":"markdown","6fc06c0b":"markdown","bcb238b8":"markdown","a9229b1a":"markdown","e46ca73b":"markdown","0c2ded59":"markdown","051cfb45":"markdown","4a4000b3":"markdown","f6a5935d":"markdown","44798de7":"markdown","b1efb15f":"markdown","22c0e479":"markdown","6ed5de58":"markdown","f3c6c7c4":"markdown","6a85bc4b":"markdown","e92012b9":"markdown","ab2dc2ad":"markdown","ad9f828f":"markdown","7d666d66":"markdown","1b4973cd":"markdown","e459e189":"markdown","c1ec6f6a":"markdown","014b2783":"markdown","38f31577":"markdown","65e1d4e0":"markdown","dc2fec3f":"markdown","acf163c0":"markdown","6a6c7b84":"markdown","80352450":"markdown","421ef582":"markdown","ccf2fae7":"markdown","e698d82b":"markdown","c857ac83":"markdown","2153a7e1":"markdown","dbaf14b6":"markdown","d30c937e":"markdown","c365a46d":"markdown","06dc656e":"markdown","7fc0b493":"markdown","f21e2635":"markdown","2a4b2af7":"markdown","7cc746fb":"markdown","168bde8e":"markdown","b39ecf03":"markdown","2c85511e":"markdown","24bcbe80":"markdown"},"source":{"b37f070c":"# Load necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport numpy as np\nimport os\nfrom pandas.plotting import register_matplotlib_converters\n\n# %config InlineBackend.figure_format='retina'\n\nregister_matplotlib_converters()\n# can add font_scale=1.5 if necessary to increase font size\nsns.set(style='whitegrid', palette='muted', font_scale=1.25)\n\nplt.style.use('fivethirtyeight')\n# NOTE: rcParams need to be after plt.style.use\nplt.rcParams[\"figure.figsize\"] = (16, 10)\n\n# Ignore warnings if necessary\n# import warnings\n# warnings.filterwarnings('ignore')\n\n# Remove scientific notation if necessary for df.describe()\n# pd.set_option('display.float_format', lambda x: f'{x:,.5f}')","94363346":"# Set max columns to be displayed\npd.set_option('display.max_columns', 99)","fc2fecaa":"DATA_PATH = '..\/input\/fitbit\/Fitabase Data 4.12.16-5.12.16\/'","aa6007a1":"df = pd.read_csv(DATA_PATH + 'dailyActivity_merged.csv', parse_dates={'Date': [1]})\ndf.head()","840f6d12":"# Get the name of day of the week, e.g. Tuesday\n#  and insert into the column after the Date column, i.e. index=1\ndf.insert(1, 'Day', df['Date'].dt.day_name())\ndf.head()","67e549fc":"df.shape","a40ccadb":"df.info()","df0d318b":"df.describe()","f59a5954":"df.nunique()","29c848ae":"# 31 days in total\nprint(df.Date.nunique())\nprint(df.Date.unique())","d8db50f8":"# 33 instead of 30 respondents?\nprint(df.Id.nunique())\nprint(df.Id.unique())","86306e0c":"user_id2encoded = {user_id: idx for idx, user_id in enumerate(df.Id.unique())}\nuser_encoded2id = {idx: user_id for user_id, idx in user_id2encoded.items()}","5dc65c4b":"df['user_id'] = df.Id.map(user_id2encoded)","54baf2a8":"df.groupby('Id')['Day'].count()","92b547ab":"# checking every csv file at once\nfor csv_file in os.listdir(DATA_PATH):\n    csv_df = pd.read_csv(DATA_PATH + csv_file)\n    print(csv_file)\n    print(csv_df.shape)\n    display(csv_df.head())","918be5ce":"daily_sleep = pd.read_csv(DATA_PATH + 'sleepDay_merged.csv', parse_dates={'Date': [1]})\ndaily_sleep.head()","f3cfef08":"daily_sleep.describe()","340a017b":"weight_log = pd.read_csv(DATA_PATH + 'weightLogInfo_merged.csv', parse_dates=['Date'])\nweight_log.head()","d4728dd1":"weight_log.describe()","d2a95d8d":"def find_duplicated_data(df):\n    return df[df.duplicated()]","27f71be0":"# only daily sleep data has duplicated data\nlen(find_duplicated_data(df)), len(find_duplicated_data(daily_sleep)), len(find_duplicated_data(weight_log))","a3b3ceec":"daily_sleep.shape","0778ec9d":"# There are some duplicated data in the daily sleep data\ndaily_sleep[daily_sleep.duplicated(keep=False)]","06072717":"# Dropping the duplicates\ndaily_sleep.drop_duplicates(inplace=True, ignore_index=False)","aa4e851f":"def remove_outliers(df, cols):\n    all_outliers = set()\n    for col in cols:\n        q1 = np.percentile(df[col], 25)\n        q3 = np.percentile(df[col], 75)\n\n        iqr = q3 - q1\n\n        lower_boundary = q1 - (iqr * 1.5)\n        upper_boundary = q3 + (iqr * 1.5)\n\n        outliers = df[(df[col] < lower_boundary) | (df[col] > upper_boundary)]\n        n_outliers = len(outliers)\n        pct_outliers = n_outliers \/ len(df) * 100\n        print(f\"[INFO] Found {n_outliers} outliers ({pct_outliers:.2f}%) for {col}\")\n        all_outliers.update(outliers.index)\n    df = df.drop(all_outliers).reset_index(drop=True)\n    print(f\"[INFO] Removed {len(all_outliers)} rows.\")\n    return df","5a6a2fb7":"daily_sleep.head()","cf620392":"daily_sleep.shape","18edd6f6":"daily_sleep_cleaned = remove_outliers(daily_sleep, ['TotalSleepRecords', 'TotalMinutesAsleep', 'TotalTimeInBed'])","b5e1a72e":"daily_sleep_cleaned.shape","4f5b28ef":"df.head()","5d2b8f39":"daily_col_names = df.loc[:, 'TotalSteps':].columns.values","e3610dd0":"df_cleaned = remove_outliers(df, daily_col_names)","8e5877d6":"weight_log.head()","47db2bff":"weight_log_cols = weight_log.loc[:, 'WeightKg': 'BMI'].columns.values","bb1aaae6":"weight_log_cleaned = remove_outliers(weight_log, weight_log_cols)","854e1278":"# daily_sleep_cleaned.to_csv(DATA_PATH + 'cleaned_sleepDay.csv', index=False)\n# df_cleaned.to_csv(DATA_PATH + 'cleaned_dailyActivity.csv', index=False)\n# weight_log_cleaned.to_csv(DATA_PATH + 'cleaned_weightLog.csv', index=False)","6b489a8c":"# daily_sleep = pd.read_csv(DATA_PATH + 'cleaned_sleepDay.csv', parse_dates=['Date'])\n# df = pd.read_csv(DATA_PATH + 'cleaned_dailyActivity.csv', parse_dates=['Date'])\n# weight_log = pd.read_csv(DATA_PATH + 'cleaned_weightLog.csv', parse_dates=['Date'])","ba7d54db":"daily_sleep = daily_sleep_cleaned.copy()\ndf = df_cleaned.copy()\nweight_log = weight_log_cleaned.copy()","95e3429d":"# Merging full daily data with the daily sleep data, on unique combiunations of ID and Day\n#  using LEFT JOIN to keep all the records in the full daily data\ndf_merge = pd.merge(df, daily_sleep, on=['Id', 'Date'], how='left')\ndf_merge.shape","3e03f764":"df_merge.head()","c23fdf08":"# sort the data by Id then only by date\ndf_merge.sort_values(by=['Id', 'Date'], inplace=True)","811d98d5":"df_merge.Id.nunique()","32589c51":"df_merge.Date.nunique()","7436907b":"# A lot of missing values in the daily sleep data, i.e. 63.3% missing\ndf_merge.isna().mean()","bad1a617":"# Changing variable name to `df` to simplify code\ndf = df_merge.copy()","7988689a":"df.columns","e63eb1e7":"df.Id.value_counts()","9781ed08":"heart_rate = pd.read_csv(DATA_PATH + 'heartrate_seconds_merged.csv')\nheart_rate.head()","0b0f4ec3":"heart_rate.Id.nunique()","581e1ca3":"heart_rate.sample(5)","3bbe7711":"# Use this function to convert the date into proper format\n#  to speed up the pd.to_datetime function to convert it into datetime datatype\ndef format_time(orig_time):\n    split_date = orig_time.split(' ')[0].split(\"\/\")\n    month = str.zfill(split_date[0], 2)\n    day = str.zfill(split_date[1], 2)\n    year = split_date[-1]\n    \n    split_time = orig_time.split(' ')[-2].split(':')\n    hour = str.zfill(split_time[0], 2)\n    minute = split_time[1]\n    second = split_time[2]\n    pm_or_am = orig_time[-2:]\n    \n    return f\"{day}\/{month}\/{year} {hour}:{minute}:{second} {pm_or_am}\"\n\nheart_rate.Time = heart_rate.Time.apply(format_time)","b132f92d":"heart_rate['Time'][:5]","cb9c71c3":"# Became much faster after converting the time formats using the function above\nheart_rate['Time'] = pd.to_datetime(heart_rate['Time'], format='%d\/%m\/%Y %I:%M:%S %p')","76a99f94":"heart_rate['Time'].head()","86dd0d02":"# add a date column\nheart_rate['Date'] = heart_rate.Time.dt.date","454d907e":"# saving the file to save the format of datetime to reduce time of parsing it as DateTime type\n# heart_rate.to_csv(DATA_PATH + 'heart_rate-06-Jun-21.csv', index=False)","3266981f":"# heart_rate = pd.read_csv((DATA_PATH + 'heart_rate-06-Jun-21.csv'), parse_dates=['Time'])","6d5c542e":"heart_rate.shape","0220e0b4":"total_day_used_per_user = heart_rate.groupby('Id')['Date'].nunique().sort_index()\ntotal_day_used_per_user","6c87e029":"# multiplied by 5 because the heart rate tracking takes place every 5 secs\navg_user_wearing_minute = heart_rate.Id.value_counts() * 5 \/ 3600\navg_user_wearing_minute.sort_index(inplace=True)\navg_user_wearing_minute","0a99aa5a":"# preparing the data to calculate avg usage per day\navg_heart_rate_hour = pd.concat([avg_user_wearing_minute, total_day_used_per_user], axis=1)\navg_heart_rate_hour.columns = ['avg_minute', 'total_days']\navg_heart_rate_hour","468a8b35":"avg_heart_rate_hour['avg_hour'] = avg_heart_rate_hour['avg_minute'] \/ avg_heart_rate_hour['total_days']\navg_heart_rate_hour.sort_values('avg_hour', ascending=False, inplace=True)\navg_heart_rate_hour = avg_heart_rate_hour.reset_index().rename(columns={'index': 'Id'})\navg_heart_rate_hour","1ccbd5ea":"days_lt_30 = len(avg_heart_rate_hour[avg_heart_rate_hour['total_days'] >= 30])\nprint(\"Percentage of users that used the heart tracking feature for more than 30 days:\")\ndays_lt_30 \/ len(avg_heart_rate_hour) * 100","bb28bc46":"ax = avg_heart_rate_hour['total_days'].plot(kind='bar', colormap='Paired', label='Total days used', figsize=(10, 8))\navg_heart_rate_hour['avg_hour'].plot(kind='line', label='Average hour per day')\nplt.title('Average Daily Usage of Heart Rate Tracking for Every User')\nplt.xlabel('User')\nplt.legend();","f047fc2f":"hour_step = pd.read_csv(DATA_PATH + 'hourlySteps_merged.csv', parse_dates=['ActivityHour'])\nhour_step.head()","1aaa7c71":"len(hour_step)","1d335e62":"len(hour_step[hour_step['StepTotal'] == 0]) \/ len(hour_step)","eef59cc2":"# create date without hour\nhour_step['Date'] = hour_step['ActivityHour'].dt.date","34dd238d":"# get number of hourly records per day\nhour_per_day = hour_step.groupby(['Id', 'Date']).count().reset_index()\nhour_per_day","03319814":"hour_per_day = hour_per_day[['Id', 'Date', 'ActivityHour']]","ada00fd8":"hour_per_day.rename(columns={'ActivityHour': 'Hour'}, inplace=True)","80d605f3":"# hour_per_day.to_csv(DATA_PATH + 'dailyWearingHour.csv', index=False)","552166c6":"hour_per_day.head()","64adf28a":"hour_per_day.groupby('Id')['Hour'].mean().plot(kind='bar', figsize=(16, 8))\nplt.title('Average Hourly Records for Every User');","fe16613f":"hour_step.head()","b3b640f9":"# get only the hour\nhour_step['hour'] = hour_step.ActivityHour.dt.hour","8b65aacb":"# calculate average steps for every hour\navg_hour_step = hour_step.groupby('hour')['StepTotal'].mean()","6e9706e7":"avg_hour_step.head()","661b71eb":"avg_hour_step.plot(kind='bar')\nplt.title('Average Steps Taken for Every Hour');","abf42aca":"hour_cal = pd.read_csv(DATA_PATH + 'hourlyCalories_merged.csv', parse_dates=['ActivityHour'])\nprint(hour_cal.shape)\nhour_cal.head()","5b9ee75e":"hour_cal['hour'] = hour_cal.ActivityHour.dt.hour","c359eb64":"avg_hour_cal = hour_cal.groupby('hour')['Calories'].mean()","3c66767f":"avg_hour_cal.plot(kind='bar')\nplt.title('Average Calories Burned for Every Hour');","33231568":"ax = avg_hour_step.plot(label='Average Steps', figsize=(12, 8))\navg_hour_cal.plot(ax=ax, label='Average Calories Burned')\nplt.vlines(x=18, ymin=0, ymax=620, colors='tab:green', label='Most Active Hour', linestyle='dashed')\nplt.xticks(np.arange(0, 24, 1))\nplt.title('Average Steps VS Average Calories Burned Every Hour')\nplt.legend();","c251582a":"avg_hour_step = hour_step.groupby(['Id', 'hour'])['StepTotal'].mean().reset_index()\navg_hour_step.head()","9de61540":"avg_hour_step.shape","602f44c0":"max_steps_indices = avg_hour_step.groupby('Id')['StepTotal'].idxmax()\nmax_steps_indices.head()","edfdb4b9":"max_avg_hour = avg_hour_step.loc[max_steps_indices].reset_index(drop=True)\nprint(len(max_avg_hour))\nmax_avg_hour.head()","cf1fcbda":"# Creating a function to use later\ndef get_max_avg(query_df, time_col, attr):\n    avg_df = query_df.groupby(['Id', time_col])[attr].mean().reset_index()\n    max_indices = avg_df.groupby('Id')[attr].idxmax()\n    max_avg_df = avg_df.loc[max_indices].reset_index(drop=True)\n    return max_avg_df","76b5c766":"# confirm it's working\nmax_avg_hour = get_max_avg(hour_step, 'hour', 'StepTotal')\nmax_avg_hour.head()","564120ec":"# Refactored using idxmax() as shown above\n\n# max_avg_step_per_user = avg_hour_step.groupby('Id')['StepTotal'].max()\n\n# max_avg_hour = pd.DataFrame(columns=['Id', 'hour', 'StepTotal'])\n# for user_id, max_step in max_avg_step_per_user.items():\n#     max_row = avg_hour_step[(avg_hour_step['Id'] == user_id) & (avg_hour_step['StepTotal'] == max_step)]\n#     max_avg_hour = max_avg_hour.append(max_row, ignore_index=True)","af769b74":"max_avg_hour.head()","1069ec6f":"max_avg_hour.sort_values('hour')['hour'].plot(kind='bar', figsize=(15, 8))\nplt.xlabel('User')\nplt.ylabel('Hour')\nplt.title('Hour with the Highest Average Daily Steps for every User');","68516900":"max_avg_hour.hour.value_counts(sort=False).plot(kind='bar')\nplt.title('Number of Users Having the Same Hour of Highest Activity')\nplt.xlabel('Hour with the Max Average Number of Steps')\nplt.ylabel('User count');","e08e770c":"# Using the same method as for steps taken as shown above\nmax_avg_cal_hour = get_max_avg(hour_cal, 'hour', 'Calories')\nmax_avg_cal_hour.head()","965e5aac":"# Getting the same metrics for intensities using the same method as above\n# Metrics here: Hours for each user, where each hour represents the highest average calories burnt\nhour_intensity = pd.read_csv(DATA_PATH + 'hourlyIntensities_merged.csv', parse_dates=['ActivityHour'])\nhour_intensity['hour'] = hour_intensity['ActivityHour'].dt.hour\nhour_intensity.head()","3075dffd":"# Using the same method as for steps taken as shown above\nmax_avg_int_hour = get_max_avg(hour_intensity, 'hour', 'TotalIntensity')\nmax_avg_int_hour.head()","b503ad74":"cal_users = max_avg_cal_hour.hour.value_counts(sort=False)\nsteps_users = max_avg_hour.hour.value_counts(sort=False)\nintensity_users = max_avg_int_hour.hour.value_counts(sort=False)","b1675647":"# combining them to plot on the same figure\nusers_avg_hourly = pd.concat([cal_users, steps_users, intensity_users], axis=1)\nusers_avg_hourly.columns = ['Calories', 'Steps', 'Intensity']\nusers_avg_hourly","0c0a5d5b":"users_avg_hourly.plot(kind='bar')\nplt.title('Number of Users Having the Same Hour of Most Activity')\nplt.xlabel('Hour with the Max Average Calories\/Steps\/Intensity')\nplt.ylabel('User count');","a31c74d0":"df.head()","d14d4f57":"# Order the day of week\n# https:\/\/stackoverflow.com\/questions\/47741400\/pandas-dataframe-group-and-sort-by-weekday\nfrom pandas.api.types import CategoricalDtype\n\ncats = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\ncat_type = CategoricalDtype(categories=cats, ordered=True)\ndf['Day'] = df['Day'].astype(cat_type)","87e02b7b":"df.describe()","a40ff915":"zero_step = df[(df.TotalSteps == 0) | (df.Calories == 0)].copy()\nzero_step.head()","f6c93d02":"zero_step.shape","3d0543b6":"zero_step.describe()","32d4bda7":"# Almost every day (30 out of 31 days) contains at least one user that had zero steps\nzero_step.Date.nunique()","1c4781d8":"# About 30% of the users (12 out of 33 users) had zero steps for at least one day\nzero_step.Id.nunique()","c28dad8f":"number_of_users = zero_step.Id.value_counts().reset_index(drop=True)\nnumber_of_users.plot(kind='bar')\nplt.hlines(y=number_of_users.mean(), xmin=number_of_users.index[0], xmax=number_of_users.index[-1], color='Orange', label='Average')\nplt.legend(['Average', 'Number of Days'])\nplt.xlabel('User')\nplt.ylabel('Number of Days')\nplt.title('Number of Days with Zero Step Recorded for Every User');","f034cffb":"df.head()","9522c997":"# fig = plt.figure(figsize=(18, 12))\n\ndef plot_subplot(plot_df, nrows, ncols, index, title=''):\n    ax = plt.subplot(nrows, ncols, index)\n    # Change bar colors\n    # https:\/\/stackoverflow.com\/questions\/3832809\/how-to-change-the-color-of-a-single-bar-if-condition-is-true-matplotlib\n    values = plot_df.values\n    clrs = []\n    for x in values:\n        if x == np.min(values):\n            clrs.append('tab:red')\n        elif x == np.max(values):\n            clrs.append('tab:orange')\n        else:\n            clrs.append('tab:blue')\n    plot_df.plot(kind='bar', ax=ax, color=clrs, title=title)\n    plt.xticks(rotation=45)\n    plt.xlabel(None)\n    \n    # Add annotations on bars\n    # https:\/\/queirozf.com\/entries\/add-labels-and-text-to-matplotlib-plots-annotation-examples\n    for x, y in zip(np.arange(len(plot_df)), plot_df.values):\n\n        label = \"{:,.0f}\".format(y)\n\n        plt.annotate(label, # this is the text\n                     (x, y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0, -20), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center","e5ae7498":"avg_by_day = df.groupby('Day').mean()\navg_by_day","9374cfa0":"cols_to_plot = ['TotalSteps', 'VeryActiveMinutes', 'FairlyActiveMinutes', 'LightlyActiveMinutes', 'SedentaryMinutes', 'Calories']","15dab02f":"fig = plt.figure(figsize=(16, 10))\nnrows, ncols = 3, 2\n\nfor i, col in enumerate(cols_to_plot, start=1):\n    plot_subplot(avg_by_day[col], nrows, ncols, i, title=('Average ' + col))\nplt.tight_layout()\nplt.show()","d048d669":"max_daily_cal = get_max_avg(df, 'Day', 'Calories')\nmax_daily_cal.head()","22080e88":"max_daily_cal.sort_values('Day', inplace=True)","7cef6be8":"max_daily_cal.Day.value_counts(sort=False).plot(kind='barh', figsize=(8, 8))\nplt.title('Number of Users Having the Same Day of Maximum Average Calories Burned');","068a6220":"# Inspecting some missing sleeping data\nmissing_sleep = df[df.isna().any(axis=1)].copy()\nmissing_sleep.head(10)","ed40d03c":"print(\"Number of records with missing sleep data:\", len(missing_sleep))\nprint(f\"Percentage of missing sleep data: {(len(missing_sleep) \/ len(df) * 100):.2f}%\")","9eaef085":"# number of unique dates where there are missing sleep data\nmissing_sleep.Date.nunique()","4238854e":"missing_sleep.Id.nunique()","33604187":"# Many of the users did not record their sleeping data for more than 20 days.\n# Two (2) of the users did not even record their sleeping data (31 days)\nmissing_sleep.Id.value_counts().plot(kind='bar');","bed6a7e2":"missing_sleep_users = missing_sleep.Id.value_counts()\nprint((missing_sleep_users >= 15).sum())\nprint((missing_sleep_users >= 15).mean())","c2c2e080":"daily_sleep.head()","54eac942":"daily_sleep.dtypes","b659cad7":"daily_sleep.nunique()","f3e0f904":"daily_sleep.insert(1, 'Day', daily_sleep.Date.dt.day_name())","e732bd73":"daily_sleep.Date.nunique()","bb5dd05a":"daily_sleep.TotalSleepRecords.unique()","56471a72":"daily_sleep['TotalTimeAwakeOnBed'] = daily_sleep['TotalTimeInBed'] - daily_sleep['TotalMinutesAsleep']","786a29ae":"daily_sleep.describe()","f846b3a9":"fig, axes = plt.subplots(2, 1, sharex=True, figsize=(10,5))\nfor col, ax in zip(['TotalMinutesAsleep', 'TotalTimeInBed'], axes):\n    sns.boxplot(data=daily_sleep, x=col, orient='h', ax=ax)\nplt.xticks(np.arange(200, 750, 50));","1b154231":"400 \/ 60, 530 \/ 60","6d500a6e":"375 \/ 60, 480 \/ 60","85855ba9":"fig = plt.figure(figsize=(10, 3))\nsns.boxplot(data=daily_sleep, x='TotalTimeAwakeOnBed')\nplt.xticks(np.arange(0, daily_sleep['TotalTimeAwakeOnBed'].max(), 20));","8c99c53d":"weight_log.head()","a4be19fe":"weight_log.Id.value_counts().plot(kind='bar', figsize=(8, 5))\nplt.title('Number of Records of Weights Logged for each User');","206284dc":"plt.figure(figsize=(8, 5))\nsns.countplot(data=weight_log, x='IsManualReport')\nplt.title('Number of Records Logged Manually');","c608ead3":"weight_log.groupby(['Id', 'IsManualReport']).count()","5e75f8eb":"weight_log.head()","0f03f064":"plt.figure(figsize=(10,6))\nsns.countplot(data=weight_log, x='Id', hue='IsManualReport', hue_order=[True, False])\nplt.legend(loc='upper left')\nplt.title('Number of Times the Users Manually Logged Their Weight');","cb170e70":"# Setup","c6374d4c":"#### How many days that they had zero steps? And what's the average number of days?","8c387138":"# What are the most active hours for each user?","c4c86bbc":"# Analysis","598ce9d3":"# For each user, on every day, what is the hour that they have the highest number of steps?","f21f41ae":"- **Recommendation**: Organize campaigns that target this hour (around 6 PM) to promote the ability of smartwatch to track steps taken and calories burnt, so that many users who are having their exercise routines at such time would be able to notice the value of such product.","6fc06c0b":"- This makes it not possible to determine average wearing hours for every user through the heart rate usage data, as not every user uses this feature\n- Still, it's interesting to use analyze this to determine on average how many hours do the users use this feature every day.","bcb238b8":"- There are missing sleep data for every day, but on different users","a9229b1a":"- 12 users (37.5%) did not record their sleep data for more than 15 days (half a month)\n- This shows that many of the users did not like to use the feature, or did not want to wear a smartwatch device when they are sleeping.","e46ca73b":"# Analyzing heart rate to determine average wearing hours per day","0c2ded59":"- Working hours (0800 to 1700, or 8 AM to 5 PM) tend to have many steps, which is normal.\n- The highest steps taken are around 1800 or 6 PM, which should be the hour where most users are the most active and like to enjoy their exercise routines.","051cfb45":"- These charts show that most likely Tuesdays are the most preferred days for the customers to wear the smartwatch and exercise at the same time, as shown by the highest average total steps, all the average active minutes, as well as the calories burned (although relatively similar to other days) on Tuesday.\n- The day where the customers are the least active is most likely to be Sunday, which has the lowest average number of steps taken and also lowest active minutes.","4a4000b3":"- Only 14 out of 33 users use this feature.\n- Not every user uses the feature of tracking their heart rate every second, most likely for privacy reason or finding it not useful, because it is unlikely that a user wears such a device and accidentally forgot to turn on the feature.\n- But this requires further survey for qualitative data in order to confirm this statement. \n- This survey has a huge limitation of only included quantitative data without any sorts of qualitative data that include important feedbacks from users, which is equally as important as quantitative data.","f6a5935d":"# Analyzing all daily activities","44798de7":"# Analyzing Weight Data","b1efb15f":"Recommendation: Consider organizing campaigns on Tuesdays and Sundays to let more users notice the capability of smartwatch to track their days of highest and lowest activeness.","22c0e479":"### Checking the days where the users have zero steps\/calories recorded","6ed5de58":"# Merging sleep data with full daily data","f3c6c7c4":"# Prepare by sorting and filtering, then Process by cleaning","6a85bc4b":"Recommendation: Our company can try to incorporate useful features related to sleeping patterns into marketing strategy in order to appeal to the customers to make more use of their sleeping data.","e92012b9":"# Load cleaned data","ab2dc2ad":"# The Case Study Report\nThe details for this data analysis including the business task and all the six phases of data analysis life cycle can be found in this [Google Document](https:\/\/docs.google.com\/document\/d\/1PjuteS8C1uapEPS2kFOpl6r966ZaIWHvYC0xzwxLcd0\/edit?usp=sharing).","ad9f828f":"# What are the days that the users most active and least active?","7d666d66":"# Do users wear their smartwatch the entire day generally? How many hours every day?","1b4973cd":"- This question \"How many hours of usage per day?\" is likely unable to be answered with the currently available data, because 0 step does not directly mean that the user did not wear the watch, it could also mean the user was wearing it but was resting during the recorded hour. This attribute is similar to other attributes such as hourly calories burned and hourly intensities, where 0 values could also mean that they were resting during that moment.","e459e189":"- This diagram just further proves that Tuesdays are the days where users are most likely to be the most active.","c1ec6f6a":"- This chart could be a bit misleading depending on how you interpret it. This chart is directly related to the chart above, where this chart shows the number of users that have the **same most active hour**, i.e. the hour where the users have the highest average number of steps taken.\n- For example, for the highest bar in the chart, 5 users have the same maximum average number of steps at 8 AM. This does not mean that most users tend to exercise at this hour, this just means that many of the users have their **highest maximum steps** at this hour, these could be ***any number of steps***. The users could **exercise at any hour** with less steps than this hour because number of steps taken is not directly related to exercise, this will be confirmed with amount of calories burned later.\n- This is not as insightful as an earlier chart of the average hourly steps that did not take into account the user preferences. Because this chart directly takes the hours with the maximum average steps for each user instead of the average of the total steps for each hour.","014b2783":"# Cleaning duplicated data ","38f31577":"- On average, there are at least 6 days on average (average for 15 users and not all users) that these users had zero steps recorded. This shows that many of the users did not use the smartwatch or the feature for an average of 6 days.","65e1d4e0":"- For a total of 31 days, there are some missing data especially a lot for subject of Id 4057192912","dc2fec3f":"- This is most likely because they did not wear the watch for the entire day, or they voluntarily turned off the feature for the entire day.","acf163c0":"- Most of the users did not log their weights, either manually or automatically via smartwatch function.\n- Only 6 users had some records of their weights, but only 2 persons had more than 20 days of records, while the rest of the users had 5 or less records.","6a6c7b84":"- For some reason, during some days, these users still had high amount of calories burned even though they had zero steps taken, this is a bit strange. This is most likely because they did turn off the feature of tracking their steps taken.","80352450":"# Removing Outliers","421ef582":"# Analyzing sleep data","ccf2fae7":"- The chart shows that there is only 1 user that used the automatic weight logging feature for 24 days without manually logging at all.\n- While 5 out of the 6 users had only manually recorded their weights before.\n- This further proves that most of them find it troublesome to record manually, with only one user making use of the automatic weight logging feature. More feedback from users or qualitative data are needed to understand more about this.","e698d82b":"- To further clarify what this chart means, the y-axis represents the number of users in the same hour group, and each of the hour group represents the highest average hourly activity recorded for all the users in the same hour group.\n- This chart further validates the statements above that most users definitely tend to exercise at around 1800 to 1900 (6 PM to 7 PM) as shown by the highest average amount of intensities and calories burned at this hour, although the highest number of steps taken is at 0800 (8 AM).\n- At 8 AM, the calories, total intensity and steps taken are still quite high, so it probably means that some users also exercise at this hour.","c857ac83":"Recommendation: Promote the importance of wearing the smartwatch or turning on the step tracking feature to ensure more reliable estimation of calories burned and better suggestions such as workout schedule recommendations.","2153a7e1":"NOTE: This is just a general way to remove outliers using Interquartile Range. Usually it's better to inspect them first before removing, because outliers could mean something sometimes. \n\nBut just to make things simple, I will just remove them here because I will be calculating everything based on the **average**, and removing outliers is **vital** when calculating **average** as outliers can significantly affect the average values.","dbaf14b6":"- Most of them spent around 20-40 minutes staying on bed without actually being asleep, the outliers (the dots after the right whisker) should be mistakes of the smartwatch or maybe the users were staying on bed for a very long time even after waking up. Need further data to validate this.\n\nRecommendation: The 20-40 minutes could be lessened. Campaigns can be organized to promote features such as teaching the users to meditate to fall asleep faster. ","d30c937e":"- The precision of the numbers are not exactly accurate as the heart rate tracking takes place for every 5 secs instead of every second, therefore the calculations had to take into consideration the estimation, but the margin of error should be only within 1 hour.\n- The average usage of heart rate tracking is around 12 hours, with one user using for 24 hours for every day he turned on the feature for recording.\n- Although most users averaged at 12 hours or less usage every day, the total days were much higher.\n- In summary, for a total of 14 users observed, 13 users decided to turn on the heart tracking feature for more than 15 days, and 6 users (42.9%) turned on the feature for 30 days or more, however, most of them only used the feature for around 12 hours a day. This shows that they could be neglecting the feature or turned off the feature voluntarily. Feedbacks from customers are required to verify this.","c365a46d":"- Lets compare it with the data of hourly calories burned to confirm it first","06dc656e":"- These missing sleeping data cannot be resolved easily as there are more than 60% missing values, but they are left as it is, and will be analyzed later.","7fc0b493":"- **NOTE**: In case you don't understand what does these hours mean exactly: Each of the bar represents different user's hour. And for each user, the hour (the height of the bar) here represents the highest average daily steps taken. This same method will be used to apply to the `Calories` and `Intensities` later too.","f21e2635":"- This shows that most users did not want to use this feature, probably due to the fact that they find it inconvenient to record them manually, or maybe the automatic weight logging feature was not working very well. Let's check it.","2a4b2af7":"- This validates the statement above that the highest calories burned are centered around 6 PM.\n- This also shows the positive correlation that the higher the number of steps taken, the higher the amount of calories burnt, which can also be seen more clearly with the chart below.","7cc746fb":"**Recommendation**: The company can try to promote the importance of heart rate monitoring, and mention that there have also been [cases of people](https:\/\/www.nytimes.com\/2021\/05\/20\/well\/live\/smartwatch-heart-rate-monitor.html) being saved from using smartwatch to alert the user that his heart rate is unusual. This can be incorporated into marketing strategy to showcase the ability of smartwatch to track heart rate accurately and continuously, which eventually leads to better quality of life.","168bde8e":"Recommendation: Promote the weight logging feature of smartwatch, and the ability of smartwatch to automatically log their weight accurately to be able to provide future suggestions such as weight controlling advice.","b39ecf03":"- On average, users stay im bed for around 400 to 530 minutes, which is around 7 hours to 9 hours.\n- But most of them only sleep for around 375 to 480 minutes, which is around 6 hours 15 minutes to 8 hours.\n- It is advisable for adults to sleep for around 7-9 hours per day ([source](https:\/\/www.sleepfoundation.org\/how-sleep-works\/how-much-sleep-do-we-really-need#:~:text=National%20Sleep%20Foundation%20guidelines1,to%208%20hours%20per%20night.)), therefore the time spent on bed should be better utilized to to become sleep time instead of being awake or doing other things.","2c85511e":"# Missing sleep data","24bcbe80":"- All the CSV files for the daily data were already included inside of the main `dailyActivity_merged.csv` file, therefore they can be filtered out"}}