{"cell_type":{"1a45e8b3":"code","8ae3cc27":"code","dd465507":"code","5cd3f7e3":"code","e32a92ca":"code","09a2c4a5":"code","83175279":"code","662d1d2c":"code","3f8635d4":"code","d3737140":"code","f97ecf2b":"code","2da694a1":"code","b637bfe8":"code","74ab0ffc":"code","38b69731":"code","db492e4f":"code","2726bb3a":"code","fcff3fd1":"code","474f172d":"code","cc315698":"code","f085a9f3":"code","a3fa80e9":"code","d72983a7":"code","a81771e4":"code","91195798":"code","342b1b83":"code","6e6f8646":"code","906a418b":"code","ccd0ef83":"code","9049ec74":"code","9d0832ab":"code","12e89351":"code","63844bc8":"code","cab1d97a":"code","e4390f43":"code","9cf04cee":"code","fd20b580":"code","f6f61217":"code","0cce545a":"markdown","e2dcbf06":"markdown","6ceb044a":"markdown","22181dd4":"markdown","284443b6":"markdown","8e35578a":"markdown","253287f7":"markdown","f3a510a8":"markdown","9cf2dc22":"markdown","721a2357":"markdown","4b3257a1":"markdown","9dfd0d1b":"markdown","0d46e747":"markdown","80e048d0":"markdown","f90fe49d":"markdown","b944b16b":"markdown","e12fc1d1":"markdown","09656030":"markdown","498b8427":"markdown","b11cda17":"markdown","9e7fa689":"markdown","bb1b54a9":"markdown","70db1ad7":"markdown","0360bf17":"markdown","fa49e9ed":"markdown","2e5df360":"markdown","01c70bfb":"markdown"},"source":{"1a45e8b3":"#================== TPS Jan 2022 =======================#\n#----------------  import packages  -------------------#\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom cycler import cycler\nfrom statsmodels.tsa.arima_model import ARIMA\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport scipy.stats as scs\nfrom statsmodels.tsa.stattools import adfuller\nfrom fbprophet import Prophet\nimport math\n#------------------  load data   ---------------------#\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\nssub = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')\n \nholiday_data = pd.read_csv('..\/input\/public-and-unofficial-holidays-nor-fin-swe-201519\/holidays.csv')\n\ngdp_per_capita = pd.read_csv('..\/input\/gdp-per-capita-finland-norway-sweden-201519\/GDP_per_capita_2015_to_2019_Finland_Norway_Sweden.csv', index_col='year')","8ae3cc27":"!tree ..\/input\/","dd465507":"def preparate_df(df):\n    df['date'] = pd.to_datetime(df['date'])\n    df['year'] = df['date'].dt.year\n    df['month'] = df['date'].dt.month\n    df['day'] = df['date'].dt.day\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['dayofmonth'] = df['date'].dt.days_in_month\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['weekday'] = df['date'].dt.weekday\n    df['weekofyear'] = df['date'].dt.weekofyear\n    if 'num_sold' in df.columns:\n        df['log_num_sold'] = np.log(df['num_sold'])\n    return df\n\ntrain = preparate_df(train)\ntest = preparate_df(test)\n\n\ndef holiday_features(holiday_df, df):\n    \n    fin_holiday = holiday_df.loc[holiday_df.country == 'Finland']\n    swe_holiday = holiday_df.loc[holiday_df.country == 'Sweden']\n    nor_holiday = holiday_df.loc[holiday_df.country == 'Norway']\n    \n    df['fin holiday'] = df.date.isin(fin_holiday.date).astype(int)\n    df['swe holiday'] = df.date.isin(swe_holiday.date).astype(int)\n    df['nor holiday'] = df.date.isin(nor_holiday.date).astype(int)\n    \n    df['holiday'] = np.zeros(df.shape[0]).astype(int)\n    \n    df.loc[df.country == 'Finland', 'holiday'] = df.loc[df.country == 'Finland', 'fin holiday']\n    df.loc[df.country == 'Sweden', 'holiday'] = df.loc[df.country == 'Sweden', 'swe holiday']\n    df.loc[df.country == 'Norway', 'holiday'] = df.loc[df.country == 'Norway', 'nor holiday']\n    \n    df.drop(['fin holiday', 'swe holiday', 'nor holiday'], axis=1, inplace=True)\n    \n    return df\n\nholiday_features(holiday_data, train)\nholiday_features(holiday_data, test)\n\ngdp_dict = gdp_per_capita.unstack().to_dict()\n\n# Create new 'gdp_per_capita' column\ntrain['gdp_per_capita'] = train.set_index(['country', 'year']).index.map(gdp_dict.get)\ntest['gdp_per_capita']  = test.set_index(['country', 'year']).index.map(gdp_dict.get)\n\ndef fourier_features(df):\n    # One-hot encoding (no need to encode the last categories)\n    for country in ['Finland', 'Norway']:\n        df[country] = df.country == country\n        \n    df['KaggleRama'] = df.store == 'KaggleRama'\n    \n    for product in ['Kaggle Mug', 'Kaggle Hat']:\n        df[product] = df['product'] == product\n    \n    # Seasonal variations (Fourier series)\n    # The three products have different seasonal patterns\n    dayofyear = df.date.dt.dayofyear\n    \n    for k in range(1, 3):\n        df[f'sin{k}'] = np.sin(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'cos{k}'] = np.cos(dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'mug_sin{k}'] = df[f'sin{k}'] * df['Kaggle Mug']\n        df[f'mug_cos{k}'] = df[f'cos{k}'] * df['Kaggle Mug']\n        df[f'hat_sin{k}'] = df[f'sin{k}'] * df['Kaggle Hat']\n        df[f'hat_cos{k}'] = df[f'cos{k}'] * df['Kaggle Hat']\n        \n    return df\n\nfourier_features(train)\nfourier_features(test)\n\ndef smape(y_true, y_pred):\n    return 1 \/ len(y_true) * np.sum(2 * np.abs(y_pred - y_true) \/ (np.abs(y_true) + np.abs(y_pred)) * 100)\n","5cd3f7e3":"train.head()","e32a92ca":"\n\nplt.rcParams['figure.dpi'] = 600\nplt.set_cmap('jet')\nfig, axs = plt.subplots(3, 3, figsize=(24, 12), facecolor='#f6f5f5')\nfig.subplots_adjust(hspace=0.75, wspace=0.2)\n\ncolormap = ['#1DBA94','#1C5ED2', '#FFC300', '#C70039']\nplt.rc('axes', prop_cycle=(cycler('color', colormap)))\nbackground_color = '#f6f5f5'\nmonth_teg = {0: 'Jan', 1: 'Feb', 2: 'Mar', 3: 'Apr', 4: 'May', 5: 'Jun', 6: 'Jul', 7: 'Aug', 8: 'Sen', 9: 'Oct', 10: 'Nov', 11: 'Dec'}\nmonth_labels = [month_teg[x] for x in range(0, 12)]\n\n#---------- FINLAND ----------\nplt.text(12500, 10600, 'Finland', fontsize=16, weight='heavy')\n_ = pd.DataFrame(pd.pivot_table(train[train.country == 'Finland'], index='year', values=['num_sold'], columns=['month'])['num_sold'].values, index=list(range(2015, 2019)))\n# Plot [0, 0]\ncolors = plt.cm.jet(np.linspace(0, 1, 10))\naxs[0, 0].plot(_.T)\naxs[0, 0].legend(_.T.columns, loc='upper left')\naxs[0, 0].set_title('Seasonality`s numbers of sales by Finland', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[0, 0].set_xticklabels(month_labels)\naxs[0, 0].xaxis.set_tick_params(rotation=45)\n# Plot [0, 1]\nsns.lineplot(data=train[(train.country == 'Finland') & (train.store == 'KaggleMart')], y='num_sold', x='date', hue='product', ax=axs[0, 1])\naxs[0, 1].set_title('Number of sales in KaggleMart by Finland', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[0, 1].xaxis.set_tick_params(rotation=45)\n# Plot [0, 2]\nsns.lineplot(data=train[(train.country == 'Finland') & (train.store == 'KaggleRama')], y='num_sold', x='date', hue='product', ax=axs[0, 2])\naxs[0, 2].set_title('Number of sales in KaggleRama by Finland', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[0, 2].xaxis.set_tick_params(rotation=45)\n\n#---------- NORWAY ----------\nplt.text(12500, 6700, 'Norway', fontsize=16, weight='heavy')\n_ = pd.DataFrame(pd.pivot_table(train[train.country == 'Norway'], index='year', values=['num_sold'], columns=['month'])['num_sold'].values, index=list(range(2015, 2019)))\n# Plot [1, 0]\naxs[1, 0].plot(_.T)\naxs[1, 0].legend(_.T.columns, loc='upper left')\naxs[1, 0].set_title('Seasonality`s numbers of sales by Norway', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[1, 0].set_xticklabels(month_labels)\naxs[1, 0].xaxis.set_tick_params(rotation=45)\n# Plot [1, 1]\nsns.lineplot(data=train[(train.country == 'Norway') & (train.store == 'KaggleMart')], y='num_sold', x='date', hue='product', ax=axs[1, 1])\naxs[1, 1].set_title('Number of sales in KaggleMart by Norway', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[1, 1].xaxis.set_tick_params(rotation=45)\n# Plot [1, 2]\nsns.lineplot(data=train[(train.country == 'Norway') & (train.store == 'KaggleRama')], y='num_sold', x='date', hue='product', ax=axs[1, 2])\naxs[1, 2].set_title('Number of sales in KaggleRama by Norway', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[1, 2].xaxis.set_tick_params(rotation=45)\n\n#---------- SWEDEN ----------\nplt.text(12500, 2800, 'Sweden', fontsize=16, weight='heavy')\n_ = pd.DataFrame(pd.pivot_table(train[train.country == 'Sweden'], index='year', values=['num_sold'], columns=['month'])['num_sold'].values, index=list(range(2015, 2019)))\n# Plot [2, 0]\naxs[2, 0].plot(_.T)\naxs[2, 0].legend(_.T.columns, loc='upper left')\naxs[2, 0].set_title('Seasonality`s numbers of sales by Sweden', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[2, 0].set_xticklabels(month_labels)\naxs[2, 0].xaxis.set_tick_params(rotation=45)\n# Plot [2, 1]\nsns.lineplot(data=train[(train.country == 'Sweden') & (train.store == 'KaggleMart')], y='num_sold', x='date', hue='product', ax=axs[2, 1])\naxs[2, 1].set_title('Number of sales in KaggleMart by Sweden', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[2, 1].xaxis.set_tick_params(rotation=45)\n# Plot [2, 2]\nsns.lineplot(data=train[(train.country == 'Sweden') & (train.store == 'KaggleRama')], y='num_sold', x='date', hue='product', ax=axs[2, 2])\naxs[2, 2].set_title('Number of sales in KaggleRama by Sweden', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[2, 2].xaxis.set_tick_params(rotation=45)\n\nfor i in range(3):\n    for j in range(3):\n        for s in [\"top\",\"right\"]:\n                axs[i, j].spines[s].set_visible(False)\n                axs[i, j].set_facecolor(background_color)\n                axs[i, j].grid(which='major', axis='x', zorder=1, color='#EEEEEE', linewidth=0.4)\n                axs[i, j].xaxis.offsetText.set_fontsize(4)\n                axs[i, j].yaxis.offsetText.set_fontsize(4)\n                axs[i, j].set_ylabel('')\n                axs[i, j].set_xlabel('')\n                axs[i, j].tick_params(labelsize=8, width=1)\n                if j == 0:\n                    axs[i, j].legend(list(range(2015, 2019)), ncol=4, facecolor=background_color, edgecolor=background_color, loc='upper center')\n                else:\n                    axs[i, j].legend(train['product'].unique(), ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\nplt.show();","09a2c4a5":"\nplt.rcParams['figure.dpi'] = 300\nfig, axs = plt.subplots(3, 1, figsize=(12, 10), facecolor='#f6f5f5')\n\ncolormap1 = ['#1DBA94','#1C5ED2', '#FFC300']\ncolormap2 = ['#A3E4D7', '#82E0AA', '#45B39D']\ncolormap3= ['#7FB3D5', '#F1948A']\nfig.subplots_adjust(hspace=0.5, wspace=0.3)\nplt.rc('axes', prop_cycle=(cycler('color', colormap1)))\nbackground_color = '#f6f5f5'\n\n# ax[0, 0]\n#ax.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nsns.kdeplot(train['num_sold'], data=train, ax=axs[0], color=colormap1, fill=True, hue='product')\naxs[0].set_title('Distribution numbers of sales by product', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[0].legend(train['product'].unique(), ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\nplt.rc('axes', prop_cycle=(cycler('color', colormap3)))\nsns.kdeplot(train['num_sold'], data=train, ax=axs[1], color=colormap3, fill=True, hue='store')\naxs[1].set_title('Distribution numbers of sales by store', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[1].legend(train['store'].unique(), ncol=2, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\nplt.rc('axes', prop_cycle=(cycler('color', colormap2)))\nsns.kdeplot(train['num_sold'], data=train, ax=axs[2], color=colormap2, fill=True, hue='country')\naxs[2].set_title('Distribution numbers of sales by country', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[2].legend(train['country'].unique(), ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\nfor i in range(3):\n    for s in [\"top\",\"right\"]:\n        axs[i].spines[s].set_visible(False)\n    axs[i].set_facecolor(background_color)\n    #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n    axs[i].xaxis.offsetText.set_fontsize(4)\n    axs[i].yaxis.offsetText.set_fontsize(4)\n    axs[i].set_ylabel('')\n    axs[i].set_xlabel('')\n    axs[i].tick_params(labelsize=8, width=1)\n    \nplt.show();","83175279":"growth_rate = np.exp(np.diff(np.log(train['num_sold']))) - 1\n\nseasons = {'summer': [6, 7, 8], 'autumn': [9,10,11], 'winter': [12, 1, 2], 'spring': [3, 4, 5]}\nprint('======================================================================================')\nprint(f'      Season     |     Kaggle Mugs     |     Kaggle Hats     |    Kaggle Stickers    ')\nfor year in range(2015, 2019):\n    print('------------------------------------------------------------------------------------')\n    for name in seasons:\n        _1 = train[(train['month'].isin(seasons[name])) & (train['year'] == year) & (train['product'] == 'Kaggle Mug')]['num_sold']\n        _2 = train[(train['month'].isin(seasons[name])) & (train['year'] == year) & (train['product'] == 'Kaggle Hat')]['num_sold']\n        _3 = train[(train['month'].isin(seasons[name])) & (train['year'] == year) & (train['product'] == 'Kaggle Sticker')]['num_sold']\n        growth_rate_mug = np.exp(np.diff(np.log(_1))) - 1\n        growth_rate_hat = np.exp(np.diff(np.log(_2))) - 1\n        growth_rate_st = np.exp(np.diff(np.log(_3))) - 1\n        np.mean(growth_rate)\n        print(f'  {name} of {year} | growth_rate : {np.mean(growth_rate_mug)* 100:.1f}% | growth_rate : {np.mean(growth_rate_hat)* 100:.1f}% | growth_rate : {np.mean(growth_rate_st)* 100:.1f}%')\nprint('------------------------------------------------------------------------------------')\nprint('======================================================================================')","662d1d2c":"fig, axs = plt.subplots(1, figsize=(12, 10), facecolor='#f6f5f5')\nplt.rc('axes', prop_cycle=(cycler('color', colormap1)))\nbackground_color = '#f6f5f5'\n#sns.color_palette(['#1DBA94','#1C5ED2', '#FFC300', '#C70039'], as_cmap=True)\n#cmap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colormap1)\nsns.heatmap(pd.pivot_table(train, index='month', columns='year', values='num_sold'), annot=True, ax=axs, fmt=\".2f\", cmap='YlGnBu')\naxs.set_title('Heatmap of seasons', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs.set_facecolor(background_color)","3f8635d4":"plt.rcParams['figure.dpi'] = 300\nfig, axs = plt.subplots(3, 1, figsize=(12, 10), facecolor='#f6f5f5')\nfig.subplots_adjust(hspace=0.5, wspace=0.3)\n\nbackground_color = '#f6f5f5'\ncolormap3 = ['#232267', '#12724B', '#BB3E21']\ncolormap2 = ['#20379C', '#138D75', '#E07C12']\ncolormap1 = ['#1C5ED2', '#1DBA94', '#FFC300']\n\nhalflife_15 = 8\nhalflife_30 = 15\n\n_11 = train[train['product'] == 'Kaggle Hat'][['num_sold', 'date']].set_index('date')\n_12 = _11.ewm(halflife=halflife_15).mean()\n_13 = _11.ewm(halflife=halflife_30).mean()\n_21 = train[train['product'] == 'Kaggle Mug'][['num_sold', 'date']].set_index('date')\n_22 = _21.ewm(halflife=halflife_15).mean()\n_23 = _21.ewm(halflife=halflife_30).mean()\n_31 = train[train['product'] == 'Kaggle Sticker'][['num_sold', 'date']].set_index('date')\n_32 = _31.ewm(halflife=halflife_15).mean()\n_33 = _31.ewm(halflife=halflife_30).mean()\naxs[0].plot(_11, color=colormap1[0])\naxs[0].plot(_12, color=colormap2[0], linewidth=2)\naxs[0].plot(_13, color=colormap3[0], linewidth=0.5)\naxs[0].set_title('Exponential weighted moving by Kaggle Hats', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[0].legend(['Original', 'EWM.8', 'EWM.15'], ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\naxs[1].plot(_21, color=colormap1[1])\naxs[1].plot(_22, color=colormap2[1], linewidth=2)\naxs[1].plot(_23, color=colormap3[1], linewidth=0.5)\naxs[1].set_title('Exponential weighted moving by Kaggle Mugs', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[1].legend(['Original', 'EWM.8', 'EWM.15'], ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\naxs[2].plot(_31, color=colormap1[2])\naxs[2].plot(_32, color=colormap2[2], linewidth=2)\naxs[2].plot(_33, color=colormap3[2], linewidth=0.5)\naxs[2].set_title('Exponential weighted moving by Kaggle Stickers', fontdict={'fontsize': 12, 'fontweight': 'bold'})\naxs[2].legend(['Original', 'EWM.8', 'EWM.15'], ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n\nfor i in range(3):\n    for s in [\"top\",\"right\"]:\n        axs[i].spines[s].set_visible(False)\n    axs[i].set_facecolor(background_color)\n    #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n    axs[i].xaxis.offsetText.set_fontsize(4)\n    axs[i].yaxis.offsetText.set_fontsize(4)\n    axs[i].set_ylabel('')\n    axs[i].set_xlabel('')\n    axs[i].tick_params(labelsize=8, width=1)\n    \nplt.show();","d3737140":"\ndef test_stationarity(ts, window=8):\n    #.rolling() \n    #Determing rolling statistics\n    rolmean = ts.rolling(window=window).mean()\n    rolstd = ts.rolling(window=window).std()\n    plt.rcParams['figure.dpi'] = 300\n    fig, axs = plt.subplots(1, figsize=(18, 6), facecolor='#f6f5f5')\n    fig.subplots_adjust(hspace=0.3, wspace=0.3)\n    axs.plot(ts)\n    axs.plot(rolmean, linewidth=1)\n    axs.plot(rolstd, linewidth=1)\n    for s in [\"top\",\"right\"]:\n        axs.spines[s].set_visible(False)\n    axs.set_facecolor(background_color)\n    #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n    axs.xaxis.offsetText.set_fontsize(4)\n    axs.yaxis.offsetText.set_fontsize(4)\n    axs.set_ylabel('')\n    axs.set_xlabel('')\n    axs.tick_params(labelsize=8, width=1)\n    axs.set_title('Dickey-Fuller Test', fontdict={'fontsize': 16, 'fontweight': 'bold'})\n    axs.legend(['Original', 'Rolling Mean', 'Rolling Std'], ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n    \n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(ts, autolag='AIC')\n    #print(dftest)\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', 'Lags Used', 'Number of Observations Used'])\n    for key, value in dftest[4].items():\n        dfoutput['Critical Values (%s)'%key] = value\n    print(dfoutput)\n_ = train[train['product'] == 'Kaggle Hat'][['num_sold', 'date']].set_index('date')\ntest_stationarity(_)","f97ecf2b":"_ = train[train['product'] == 'Kaggle Hat'][['log_num_sold', 'date']].set_index('date')\n\ntest_stationarity(_)","2da694a1":"from statsmodels.tsa.seasonal import seasonal_decompose\ndef get_decomposition(ts, period):\n    colormap = ['#1DBA94','#1C5ED2', '#FFC300', '#C70039']\n    \n    decomposition = seasonal_decompose(ts, period=period)\n    trend = decomposition.trend\n    seasonal = decomposition.seasonal\n    resid = decomposition.resid\n    \n    plt.rcParams['figure.dpi'] = 300\n    fig, axs = plt.subplots(4, figsize=(18, 12), facecolor='#f6f5f5')\n    fig.subplots_adjust(hspace=0.6, wspace=0.3)\n    axs[0].plot(ts, label='Original', color = colormap[0])\n    axs[1].plot(trend, label='Trend', color = colormap[1])\n    axs[2].plot(seasonal, label='Seasonal', color = colormap[2])\n    axs[3].plot(resid, label='Resid', color = colormap[3])\n    \n    for i in range(4):\n        for s in [\"top\",\"right\"]:\n            axs[i].spines[s].set_visible(False)\n        axs[i].set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        axs[i].xaxis.offsetText.set_fontsize(4)\n        axs[i].yaxis.offsetText.set_fontsize(4)\n        axs[i].set_ylabel('')\n        axs[i].set_xlabel('')\n        axs[i].tick_params(labelsize=8, width=1)\n        \n    axs[0].set_title('Original', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[1].set_title('Trend', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[2].set_title('Seasonal', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[3].set_title('Resid', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    #axs.legend(['Original', 'Rolling Mean', 'Rolling Std'], ncol=3, facecolor=background_color, edgecolor=background_color, loc='upper center')\n    \n    return resid\n_ = train[(train['product'] == 'Kaggle Hat') & (train['year'] == 2016)][['log_num_sold', 'date']].set_index('date')\nresidual = get_decomposition(_, 366)","b637bfe8":"ts_log_decompose = residual\nts_log_decompose.dropna(inplace=True)\ntest_stationarity(ts_log_decompose)","74ab0ffc":"X = train[(train['product'] == 'Kaggle Hat')][['log_num_sold', 'date']].set_index('date')\n\ndef get_ar(df, order=(2,0,1), name='ARMA(2,1)'):\n    \n    background_color = '#f6f5f5'\n    model = ARIMA(df, order=order)\n    res = model.fit(disp=-1)\n    pred = res.fittedvalues\n    print(res.summary())\n    \n    print('==================================')\n    print('----------- Metrics --------------')\n    rss = np.sum((pred.values-df.values)**2)\n    smape_val = smape(df.values, pred.values)\n    print(f'RSS | {rss:.4f}')\n    print(f'SMAPE | {smape_val:.4f}')\n    print('----------------------------------')\n    #plt.plot(res.fittedvalues, alpha=.7)\n    #plt.plot(df, alpha = 0.7)\n\n    plt.rcParams['figure.dpi'] = 300\n    fig, axs = plt.subplots(3, figsize=(18, 12), facecolor='#f6f5f5')\n    fig.subplots_adjust(hspace=0.6, wspace=0.3)\n    axs[0].plot(df, color = colormap[3], alpha = 0.7)\n    axs[0].plot(pred, color = colormap[1], alpha = 0.7)\n    axs[0].legend(['Original', 'Model'], ncol=2, facecolor=background_color, edgecolor=background_color, loc='upper center')\n    sm.graphics.tsa.plot_acf(pred, lags=12*4, ax=axs[1])\n    sm.graphics.tsa.plot_pacf(pred, lags=12*4, ax=axs[2])\n    for i in range(3):\n        for s in [\"top\",\"right\"]:\n            axs[i].spines[s].set_visible(False)\n        axs[i].set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        axs[i].xaxis.offsetText.set_fontsize(4)\n        axs[i].yaxis.offsetText.set_fontsize(4)\n        axs[i].set_ylabel('')\n        axs[i].set_xlabel('')\n        axs[i].tick_params(labelsize=8, width=1)\n        \n    axs[0].set_title(f'Model {name}', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[1].set_title('Autocorrelation', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[2].set_title('Partial Autocorrelation', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    \n    layout = (2, 2)\n    fig = plt.figure(figsize=(18, 12), facecolor='#f6f5f5')\n    qq_ax = plt.subplot2grid(layout, (0, 0))\n    pp_ax = plt.subplot2grid(layout, (0, 1))\n    sm.qqplot(pred, line='s', ax=qq_ax)\n    scs.probplot(pred, sparams=(pred.mean(), pred.std()), plot=pp_ax)\n    for i in [qq_ax, pp_ax]:\n        for s in [\"top\",\"right\"]:\n            i.spines[s].set_visible(False)\n        i.set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        i.xaxis.offsetText.set_fontsize(4)\n        i.yaxis.offsetText.set_fontsize(4)\n        i.set_ylabel('')\n        i.set_xlabel('T-Quantilies')\n        i.tick_params(labelsize=8, width=1)\n    qq_ax.set_title('QQ-Plot', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    pp_ax.set_title('Probability Plot', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    \nget_ar(X)","38b69731":"get_ar(X, (1,0,2), 'Arma(1,0,2)')","db492e4f":"X = train[(train['product'] == 'Kaggle Hat')][['log_num_sold', 'date']].set_index('date')\n\ndef get_arima(df, order=(1,1,2), name='ARMA(1,1,2)'):\n    \n    background_color = '#f6f5f5'\n    model = sm.tsa.ARIMA(df, order=order)\n    res = model.fit()\n    pred = res.fittedvalues\n    print(res.summary())\n    \n    print('==================================')\n    print('----------- Metrics --------------')\n    rss = np.sum((pred.values-df.values)**2)\n    smape_val = smape(df.values, pred.values)\n    print(f'RSS | {rss:.4f}')\n    print(f'SMAPE | {smape_val:.4f}')\n    print('----------------------------------')\n    #plt.plot(res.fittedvalues, alpha=.7)\n    #plt.plot(df, alpha = 0.7)\n\n    plt.rcParams['figure.dpi'] = 300\n    fig, axs = plt.subplots(3, figsize=(18, 12), facecolor='#f6f5f5')\n    fig.subplots_adjust(hspace=0.6, wspace=0.3)\n    axs[0].plot(df, color = colormap[3], alpha = 0.7)\n    axs[0].plot(pred, color = colormap[1], alpha = 0.7)\n    axs[0].legend([ 'Original', 'Model'], ncol=2, facecolor=background_color, edgecolor=background_color, loc='upper center')\n    sm.graphics.tsa.plot_acf(pred, lags=12*4, ax=axs[1])\n    sm.graphics.tsa.plot_pacf(pred, lags=12*4, ax=axs[2])\n    for i in range(3):\n        for s in [\"top\",\"right\"]:\n            axs[i].spines[s].set_visible(False)\n        axs[i].set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        axs[i].xaxis.offsetText.set_fontsize(4)\n        axs[i].yaxis.offsetText.set_fontsize(4)\n        axs[i].set_ylabel('')\n        axs[i].set_xlabel('')\n        axs[i].tick_params(labelsize=8, width=1)\n        \n    axs[0].set_title(f'Model {name}', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[1].set_title('Autocorrelation', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[2].set_title('Partial Autocorrelation', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    \n    layout = (2, 2)\n    fig = plt.figure(figsize=(18, 12), facecolor='#f6f5f5')\n    qq_ax = plt.subplot2grid(layout, (0, 0))\n    pp_ax = plt.subplot2grid(layout, (0, 1))\n    sm.qqplot(pred, line='s', ax=qq_ax)\n    scs.probplot(pred, sparams=(pred.mean(), pred.std()), plot=pp_ax)\n    for i in [qq_ax, pp_ax]:\n        for s in [\"top\",\"right\"]:\n            i.spines[s].set_visible(False)\n        i.set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        i.xaxis.offsetText.set_fontsize(4)\n        i.yaxis.offsetText.set_fontsize(4)\n        i.set_ylabel('')\n        i.set_xlabel('T-Quantilies')\n        i.tick_params(labelsize=8, width=1)\n    qq_ax.set_title('QQ-Plot', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    pp_ax.set_title('Probability Plot', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    \nget_arima(X, (1,1,2))","2726bb3a":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom catboost import CatBoostRegressor\nimport optuna\ndef transform(df):\n    le = LabelEncoder()\n    for col in ['country', 'product', 'store']:\n        df[col] = le.fit_transform(df[col])\n    return df\ntransform(train)\ntransform(test)\n\nFEATURES = [col for col in train.columns if col not in ['row_id', 'date', 'num_sold', 'log_num_sold']]\n\nparam = {'iterations': 62250, \n         'od_wait': 3366, \n         'learning_rate': 0.03248025377961145, \n         'reg_lambda': 0.3260692020520345, \n         'subsample': 0.855134852487254, \n         'random_strength': 13.37112038825282, \n         'depth': 12, 'min_data_in_leaf': 40, \n         'leaf_estimation_iterations': 13,\n         'eval_metric':'SMAPE',\n         'loss_function':'MAE',\n         'task_type':\"GPU\",\n         'bootstrap_type':'Poisson'\n        }\n\ny = train['num_sold']\ntrain2 = train[FEATURES]\ntest2 = test[FEATURES]\n\nkfold = TimeSeriesSplit(10)\n\ntest_pred = []\nfor fold, (train_id, test_id) in enumerate(kfold.split(train2)):\n    print('<------- fold', fold+1, '------->')\n    x_train, y_train = train2.iloc[train_id], y.iloc[train_id]\n    x_valid, y_valid = train2.iloc[test_id], y.iloc[test_id]\n    \n    cat = CatBoostRegressor(**param)\n    cat.fit(x_train, y_train, eval_set = (x_valid, y_valid), verbose = 1000, early_stopping_rounds = 1500)\n    test_pred.append(cat.predict(test2))\n    \n    train_pred = cat.predict(x_train)\n    train_score = smape(y_train, np.ceil(train_pred))\n    valid_pred = cat.predict(x_valid)\n    valid_score = smape(y_valid, np.ceil(valid_pred))\n    print(f'Train SMAPE: {valid_score}')\n    print(f'Valid SMAPE: {valid_score}')\n    #scores.append(valid_score)\n    \nsold = np.mean(test_pred, axis = 0)\nssub['num_sold'] = sold\nssub.to_csv('submission_catboost.csv', index = False)","fcff3fd1":"\nparam = {'iterations': 4000, \n         'od_wait': 3366, \n         'learning_rate': 0.03248025377961145, \n         'reg_lambda': 0.3260692020520345, \n         'subsample': 0.855134852487254, \n         'random_strength': 13.37112038825282, \n         'depth': 12, 'min_data_in_leaf': 40, \n         'leaf_estimation_iterations': 13,\n         'eval_metric':'SMAPE',\n         'loss_function':'MAE',\n         'task_type':\"GPU\",\n         'bootstrap_type':'Poisson'\n        }\n\ncat = CatBoostRegressor(**param)\ny = train['num_sold']\ntrain2 = train[FEATURES]\ncat.fit(train2, y, verbose = 1000, early_stopping_rounds = 1500)","474f172d":"train_pred = cat.predict(train2)\ntrain_score = smape(y, np.ceil(train_pred))\ntrain_score","cc315698":"plt.rcParams['figure.dpi'] = 300\nfig, axs = plt.subplots(1, figsize=(18, 12), facecolor='#f6f5f5')\nfig.subplots_adjust(hspace=0.6, wspace=0.3)\naxs.plot(train_pred, color = 'red', alpha = 0.5)\naxs.plot(y, color = 'blue', alpha = 0.5)","f085a9f3":"sns.histplot(data=train_pred)\nsns.histplot(data=y, color='red')\n","a3fa80e9":"cat.get_feature_importance()","d72983a7":"def plot_feature_importance(importance,names,model_type):\n    \n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n    \n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n    \n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n    \n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + 'FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","a81771e4":"plot_feature_importance(cat.get_feature_importance(),train2.columns,'CATBOOST')","91195798":"train.head(10)","342b1b83":"#sold = np.mean(test_pred, axis = 0)\nssub['num_sold'] = cat.predict(test2)\nssub.to_csv('submission_catboost_mean.csv', index = False)","6e6f8646":"#sold = test_pred[9]\n#ssub['num_sold'] = sold\n#ssub.to_csv('submission_catboost_9fold_[5dot50].csv', index = False)\n#\n#sold = test_pred[3]\n#ssub['num_sold'] = sold\n#ssub.to_csv('submission_catboost_9fold_[5dot53].csv', index = False)","906a418b":"#from sklearn.model_selection import train_test_split\n#def objective(trial):\n#    train_x, valid_x, train_y, valid_y = train_test_split(train2, y, test_size=0.3)\n#\n#    param = {'iterations':trial.suggest_int(\"iterations\", 1000, 100000),\n#              'od_wait':trial.suggest_int('od_wait', 500, 5000),\n#              'task_type':\"GPU\",\n#              'learning_rate' : trial.suggest_uniform('learning_rate', 0.02 , 0.06),\n#              'reg_lambda': trial.suggest_loguniform('reg_lambda', 0.30 , 0.33),\n#              'subsample': trial.suggest_uniform('subsample',0.8,1.0),\n#              'random_strength': trial.suggest_uniform('random_strength',10,50),\n#              'depth': trial.suggest_int('depth',1,15),\n#              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,50),\n#              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n#              'bootstrap_type':'Poisson',\n#              'eval_metric':'SMAPE',\n#              'loss_function':'MAE'\n#               }\n#    \n#    gbm = CatBoostRegressor(**param)\n#\n#    gbm.fit(train_x, train_y, eval_set=[(valid_x, valid_y)], verbose=0, early_stopping_rounds=100)\n#\n#    preds = gbm.predict(valid_x)\n#    pred_labels = np.rint(preds)\n#    accuracy = smape(valid_y, pred_labels)\n#    return accuracy","ccd0ef83":"#study = optuna.create_study(direction='minimize')\n#study.optimize(objective, n_trials=8, timeout=600)","9049ec74":"# Training period is between 2015-01-01 and 2018-01-01\n# Validation period is between 2018-01-01 and 2019-01-01\n# https:\/\/www.kaggle.com\/gunesevitan\/tabular-playground-series-jan-2022-prophet#3.-Holidays\nnew_year = pd.DataFrame({\n  'holiday': 'new_year',\n  'ds': pd.to_datetime(['2015-01-01', '2016-01-01', '2017-01-01', '2018-01-01', '2019-01-01']),\n  'lower_window': -1,\n  'upper_window': 0,\n})\n\neaster = pd.DataFrame({\n  'holiday': 'easter',\n  'ds': pd.to_datetime(['2015-04-05', '2016-03-27', '2017-04-16', '2018-04-01', '2019-04-21']),\n  'lower_window': 0,\n  'upper_window': 7,\n})\n\nholidays = pd.concat((new_year, easter))\n#holidays\n\nfolds = [\n    ('2015-01-01', '2018-01-01'),\n    ('2018-01-01', '2019-01-01'),\n]\n\ndf_train = train.copy()\ndf_test = test.copy()\n\ncountries = df_train['country'].unique()\nstores = df_train['store'].unique()\nproducts = df_train['product'].unique()\n\nfor country in countries:\n    for store in stores:\n        for product in products:\n            for fold, (start, end) in enumerate(folds):\n                # Skip iteration if it's the last fold\n                if fold == len(folds) - 1:\n                    continue\n                    \n                train_idx = (df_train['date'] >= start) &\\\n                            (df_train['date'] < end) &\\\n                            (df_train['country'] == country) &\\\n                            (df_train['store'] == store) &\\\n                            (df_train['product'] == product)\n                train = df_train.loc[train_idx, ['date', 'num_sold']].reset_index(drop=True)\n                train = train.rename(columns={'date': 'ds', 'num_sold': 'y'})\n                val_idx = (df_train['date'] >= folds[fold + 1][0]) &\\\n                          (df_train['date'] < folds[fold + 1][1]) &\\\n                          (df_train['country'] == country) &\\\n                          (df_train['store'] == store) &\\\n                          (df_train['product'] == product)\n                val = df_train.loc[val_idx, ['date', 'num_sold']].reset_index(drop=True)\n                val = val.rename(columns={'date': 'ds', 'num_sold': 'y'})\n                \n                model = Prophet(\n                    growth='linear',\n                    holidays=holidays,\n                    n_changepoints=10,\n                    changepoint_range=0.4,\n                    yearly_seasonality=True,\n                    weekly_seasonality=True,\n                    daily_seasonality=False,\n                    seasonality_mode='additive',\n                    seasonality_prior_scale=25,\n                    holidays_prior_scale=100,\n                    changepoint_prior_scale=0.01,\n                    interval_width=0.5,\n                    uncertainty_samples=False\n                )\n                model.fit(train)\n                \n                train_predictions = model.predict(train[['ds']])['yhat']\n                val_predictions = model.predict(val[['ds']])['yhat']\n                df_train.loc[val_idx, 'prophet_forecast'] =  val_predictions.values\n\n                train_score = smape(train['y'].values, train_predictions.values)\n                val_score = smape(val['y'].values, val_predictions.values)\n                print(f'\\nTraining Range [{start}, {end}) - {country} - {store} - {product} - Train SMAPE: {train_score:4f}')\n                print(f'Validation Range [{folds[fold + 1][0]}, {folds[fold + 1][1]}) - {country} - {store} - {product} - Validation SMAPE: {val_score:4f}\\n')\n                \n                test_idx = (df_test['country'] == country) &\\\n                           (df_test['store'] == store) &\\\n                           (df_test['product'] == product)\n                test = df_test.loc[test_idx, ['date']].reset_index(drop=True)\n                test = test.rename(columns={'date': 'ds'})\n                test_predictions = model.predict(test[['ds']])['yhat']\n                df_test.loc[test_idx, 'prophet_forecast'] = test_predictions.values\n                ","9d0832ab":"!pip install pystan==2.19.1.1\n!pip install prophet\n!pip install neuralprophet[live]\nfrom neuralprophet import NeuralProphet\nfolds = [\n    ('2015-01-01', '2018-01-01'),\n    ('2018-01-01', '2019-01-01'),\n]\n\n# Neural Prophet requires holidays to be in one-hot encoded format on all timesteps\nevents = pd.concat((holidays['ds'], pd.get_dummies(holidays['holiday'])), axis=1)\n\nfor country in countries:\n    for store in stores:\n        for product in products:\n            for fold, (start, end) in enumerate(folds):\n                # Skip iteration if it's the last fold\n                if fold == len(folds) - 1:\n                    continue\n                    \n                train_idx = (df_train['date'] >= start) &\\\n                            (df_train['date'] < end) &\\\n                            (df_train['country'] == country) &\\\n                            (df_train['store'] == store) &\\\n                            (df_train['product'] == product)\n                train = df_train.loc[train_idx, ['date', 'num_sold']].reset_index(drop=True)\n                train = train.rename(columns={'date': 'ds', 'num_sold': 'y'})\n                train = train.merge(events, on='ds', how='left').fillna(0)\n                train['easter'] = train['easter'].astype(np.uint8)\n                train['new_year'] = train['new_year'].astype(np.uint8)\n                val_idx = (df_train['date'] >= folds[fold + 1][0]) &\\\n                          (df_train['date'] < folds[fold + 1][1]) &\\\n                          (df_train['country'] == country) &\\\n                          (df_train['store'] == store) &\\\n                          (df_train['product'] == product)\n                val = df_train.loc[val_idx, ['date', 'num_sold']].reset_index(drop=True)\n                val = val.rename(columns={'date': 'ds', 'num_sold': 'y'})\n                val = val.merge(events, on='ds', how='left').fillna(0)\n                val['easter'] = val['easter'].astype(np.uint8)\n                val['new_year'] = val['new_year'].astype(np.uint8)\n                \n                model = NeuralProphet(\n                    growth='linear',\n                    n_changepoints=10,\n                    changepoints_range=0.4,\n                    trend_reg=1,\n                    trend_reg_threshold=False,\n                    yearly_seasonality=True,\n                    weekly_seasonality=True,\n                    daily_seasonality=False,\n                    seasonality_mode='additive',\n                    seasonality_reg=1,\n                    n_forecasts=365,\n                    normalize='off'\n                )\n                model = model.add_events(['new_year'], mode='multiplicative', lower_window=-1)\n                model = model.add_events(['easter'], mode='additive', upper_window=7)\n                model.fit(train, freq='D')\n                \n                train_predictions = model.predict(train)['yhat1']\n                val_predictions = model.predict(val)['yhat1']\n                df_train.loc[val_idx, 'neural_prophet_forecast'] =  val_predictions.values\n\n                train_score = smape(train['y'].values, train_predictions.values)\n                val_score = smape(val['y'].values, val_predictions.values)\n                print(f'\\nTraining Range [{start}, {end}) - {country} - {store} - {product} - Train SMAPE: {train_score:4f}')\n                print(f'Validation Range [{folds[fold + 1][0]}, {folds[fold + 1][1]}) - {country} - {store} - {product} - Validation SMAPE: {val_score:4f}\\n')\n                \n                test_idx = (df_test['country'] == country) &\\\n                           (df_test['store'] == store) &\\\n                           (df_test['product'] == product)\n                test = df_test.loc[test_idx, ['date']].reset_index(drop=True)\n                test = test.rename(columns={'date': 'ds'})\n                test['y'] = np.nan\n                test = test.merge(events, on='ds', how='left').fillna(0)\n                test['easter'] = test['easter'].astype(np.uint8)\n                test['new_year'] = test['new_year'].astype(np.uint8)\n                test_predictions = model.predict(test)['yhat1']\n                df_test.loc[test_idx, 'neural_prophet_forecast'] = test_predictions.values","12e89351":"val_idx = (df_train['date'] >= '2018-01-01') & (df_train['date'] < '2019-01-01')\nprophet_score = smape(df_train.loc[val_idx, 'num_sold'], df_train.loc[val_idx, 'prophet_forecast'])\nneural_prophet_score = smape(df_train.loc[val_idx, 'num_sold'], df_train.loc[val_idx, 'neural_prophet_forecast'])\nprint(f'Prophet - Validation SMAPE: {prophet_score:6f}')\nprint(f'Neural Prophet - Validation SMAPE: {neural_prophet_score:6f}')","63844bc8":"df_all = pd.concat((df_train, df_test), axis=0, ignore_index=True)\ntest_idx = (df_all['date'] >= '2019-01-01') & (df_all['date'] < '2020-01-01')\ndf_submission = df_all.loc[test_idx, ['row_id', 'prophet_forecast', 'neural_prophet_forecast']].reset_index(drop=True)\ndf_submission['num_sold'] = (df_submission['prophet_forecast'] + df_submission['neural_prophet_forecast']) \/ 2\ndf_submission[['row_id', 'num_sold']].to_csv('submission_prophet_neuprophet.csv', index=False)","cab1d97a":"#df_train['ds'] = df_train['date']\n#predss = model.predict(df_train)[['ds', 'yhat']].set_index('ds')","e4390f43":"df = df_all[19728:26298][['num_sold']]\npred = df_all[19728:26298][['prophet_forecast']]","9cf04cee":"def get_plot_prophet(pred, df):\n    print('==================================')\n    print('----------- Metrics --------------')\n    rss = np.sum((pred.values-df.values)**2)\n    smape_val = smape(df.values, pred.values)\n    print(f'RSS | {rss:.4f}')\n    print(f'SMAPE | {smape_val:.4f}')\n    print('----------------------------------')\n    #plt.plot(res.fittedvalues, alpha=.7)\n    #plt.plot(df, alpha = 0.7)\n    colormap = ['#1DBA94','#1C5ED2', '#FFC300', '#C70039']\n    background_color='#f6f5f5'\n    plt.rcParams['figure.dpi'] = 300\n    fig, axs = plt.subplots(3, figsize=(18, 12), facecolor='#f6f5f5')\n    fig.subplots_adjust(hspace=0.6, wspace=0.3)\n    axs[0].plot(df, color = colormap[3], alpha = 0.7)\n    axs[0].plot(pred, color = colormap[1], alpha = 0.7)\n    axs[0].legend(['Original', 'Model'], ncol=2, facecolor=background_color, edgecolor=background_color, loc='upper center')\n    sm.graphics.tsa.plot_acf(pred, lags=12*4, ax=axs[1])\n    sm.graphics.tsa.plot_pacf(pred, lags=12*4, ax=axs[2])\n    for i in range(3):\n        for s in [\"top\",\"right\"]:\n            axs[i].spines[s].set_visible(False)\n        axs[i].set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        axs[i].xaxis.offsetText.set_fontsize(4)\n        axs[i].yaxis.offsetText.set_fontsize(4)\n        axs[i].set_ylabel('')\n        axs[i].set_xlabel('')\n        axs[i].tick_params(labelsize=8, width=1)\n        \n    axs[0].set_title(f'Model', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[1].set_title('Autocorrelation', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    axs[2].set_title('Partial Autocorrelation', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    \n    layout = (2, 2)\n    fig = plt.figure(figsize=(18, 12), facecolor='#f6f5f5')\n    qq_ax = plt.subplot2grid(layout, (0, 0))\n    pp_ax = plt.subplot2grid(layout, (0, 1))\n    sm.qqplot(pred, line='s', ax=qq_ax)\n    #scs.probplot(pred, sparams=(pred.mean(), pred.std()), plot=pp_ax)\n    for i in [qq_ax, pp_ax]:\n        for s in [\"top\",\"right\"]:\n            i.spines[s].set_visible(False)\n        i.set_facecolor(background_color)\n        #ax.grid(which='major', axis='x', zorder=-2, color='#EEEEEE', linewidth=0.4)\n        i.xaxis.offsetText.set_fontsize(4)\n        i.yaxis.offsetText.set_fontsize(4)\n        i.set_ylabel('')\n        i.set_xlabel('T-Quantilies')\n        i.tick_params(labelsize=8, width=1)\n    qq_ax.set_title('QQ-Plot', fontdict={'fontsize': 12, 'fontweight': 'bold'})\n    pp_ax.set_title('Probability Plot', fontdict={'fontsize': 12, 'fontweight': 'bold'})","fd20b580":"get_plot_prophet(pred, df)","f6f61217":"df = df_all[19728:26298][['num_sold']]\npred = df_all[19728:26298][['neural_prophet_forecast']]\nget_plot_prophet(pred, df)","0cce545a":"## Stationarity\n### Dickey-Fuller Test of original target","e2dcbf06":"* More about seasons, customers prefer buying products while season is winter\n* We have some possitive trend and seasonality","6ceb044a":"### Dickey-Fuller Test of decomposition residual log target","22181dd4":"* better without ts split validation","284443b6":"* This dataset can be considered almost stationary, it has a low p-value, you only need to deal with Critical Values","8e35578a":"* The distributions are noticeably skewed\n* The first chart look loke Chi-Square Distribution ","253287f7":"* This better one, but...","f3a510a8":"* Exponential weighted moving is good tool in the fight against large variation or noise","9cf2dc22":"* This better one","721a2357":"* Despite the fact that the products have slightly different distribution parameters and variations, their growth rate are the same\n* But its not look like True, some seasons are supposed to be negative, may be some issue in my code","4b3257a1":"* Seasonality is clearly visible in the first row of graphs\n* Different products have different sales variation\n* There are also different sales in different markets\n* Products are equally preferred for all countries\n* Test period: 4 years\n* Peak at the end of the year","9dfd0d1b":"### Distribution target","0d46e747":"## Machine Learning\n### CatBoost\n* 5.4 min score\n* 6.14 mean score 10folds\n* 5.32 without cross-valid [5k iter]\n\n**updates will be asap**","80e048d0":"# TPS Jan 22\n**Table of content**\n* Data analisys of TS\n    * Basic EDA\n    * Distribution target\n    * Growth Rate\n    * Heatmap of seasons\n    * Exponential weighted moving\n* Stationarity\n    * Dickey-Fuller Test of original target\n    * Dickey-Fuller Test of log target\n    * Decomposition TS\n    * Dickey-Fuller Test of decomposition residual log target\n* Basic models\n    * Model Autoregressive [AR]\n    * Model Moving Average [MA]\n    * Model AR + MA + difference(y_t, I)[ARIMA]\n    * Prophet\n* Machine learning\n    * CatBoost\n* Prophet\n-------------------\n_May be soon_\n* Machine learning\n    * XGBoost\n    * LightGBM\n* Deep Learnig\n    * LSTM\n    * GRU","f90fe49d":"### Heatmap of seasons","b944b16b":"* Seasonal decomposition confirms some our hypotheses","e12fc1d1":"### Exponential weighted moving","09656030":"## Basic models\n### Model Autoregressive [AR]","498b8427":"### Growth Rate","b11cda17":"* My AR model is really shit...","9e7fa689":"* Okey my skill in basic tss models not well, may be someone tell me whats problem do i have in comments","bb1b54a9":"### Dickey-Fuller Test of log target","70db1ad7":"### Model Mean Average [MA]","0360bf17":"* logarithm is bad idea","fa49e9ed":"### Decomposition TS","2e5df360":"## Data analisys of TS\n### Basic EDA","01c70bfb":"### Prophet"}}