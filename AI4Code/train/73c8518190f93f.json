{"cell_type":{"848b450c":"code","7a8b97a6":"code","850c43f3":"code","af8af0af":"code","b24d87c8":"code","e842cf69":"code","42cafd7e":"code","35b03674":"code","95847943":"code","ab1bb1ae":"code","51ac76d6":"code","566f9371":"markdown","40c99c9a":"markdown"},"source":{"848b450c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pylab as plt\nimport cv2\nimport os\n","7a8b97a6":"#import data\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nimport cv2\nimport os\n\n# Read in data files\nBASE_DIR = '..\/input\/nfl-health-and-safety-helmet-assignment'\n\n# Labels and sample submission\nlabels = pd.read_csv(f'{BASE_DIR}\/train_labels.csv')\nss = pd.read_csv(f'{BASE_DIR}\/sample_submission.csv')\n\n# Player tracking data\ntr_tracking = pd.read_csv(f'{BASE_DIR}\/train_player_tracking.csv')\nte_tracking = pd.read_csv(f'{BASE_DIR}\/test_player_tracking.csv')\n\n# Baseline helmet detection labels\ntr_helmets = pd.read_csv(f'{BASE_DIR}\/train_baseline_helmets.csv')\nte_helmets = pd.read_csv(f'{BASE_DIR}\/test_baseline_helmets.csv')\n\n# Extra image labels\nimg_labels = pd.read_csv(f'{BASE_DIR}\/image_labels.csv')","850c43f3":"def add_track_features(tracks, fps=59.94, snap_frame=10):\n    \"\"\"\n    Add column features helpful for syncing with video data.\n    \"\"\"\n    tracks = tracks.copy()\n    tracks[\"game_play\"] = (\n        tracks[\"gameKey\"].astype(\"str\")\n        + \"_\"\n        + tracks[\"playID\"].astype(\"str\").str.zfill(6)\n    )\n    tracks[\"time\"] = pd.to_datetime(tracks[\"time\"])\n    snap_dict = (\n        tracks.query('event == \"ball_snap\"')\n        .groupby(\"game_play\")[\"time\"]\n        .first()\n        .to_dict()\n    )\n    tracks[\"snap\"] = tracks[\"game_play\"].map(snap_dict)\n    tracks[\"isSnap\"] = tracks[\"snap\"] == tracks[\"time\"]\n    tracks[\"team\"] = tracks[\"player\"].str[0].replace(\"H\", \"Home\").replace(\"V\", \"Away\")\n    tracks[\"snap_offset\"] = (tracks[\"time\"] - tracks[\"snap\"]).astype(\n        \"timedelta64[ms]\"\n    ) \/ 1_000\n    # Estimated video frame\n    tracks[\"est_frame\"] = (\n        ((tracks[\"snap_offset\"] * fps) + snap_frame).round().astype(\"int\")\n    )\n    return tracks\n\n\ntr_tracking = add_track_features(tr_tracking)\nte_tracking = add_track_features(te_tracking)","af8af0af":"# add home and away information on the labels\nlabels[\"team\"] = labels[\"label\"].str[0].replace(\"H\", \"Home\").replace(\"V\", \"Away\")\nlabels['x'] = labels['left'] + labels['width']\/2\nlabels['y'] = labels['top'] + labels['height']\/2\nlabels['est_frame'] = labels['frame']\n\n#now all frames are in the \"est_frame\" column","b24d87c8":"#now I add columns into the baseline_helmets dataframe so that it accepts the same functions as tr_tracking\nsk_helmets = tr_helmets.copy()\nsk_helmets['gameKey'] = sk_helmets[\"video_frame\"].str.split(\"_\").str[-4].astype('int64')\nsk_helmets['playID'] = sk_helmets[\"video_frame\"].str.split(\"_\").str[-3].astype('int64')\nsk_helmets['est_frame']  = sk_helmets[\"video_frame\"].str.split(\"_\").str[-1].astype('int64')\nsk_helmets['View']  = sk_helmets[\"video_frame\"].str.split(\"_\").str[-2]\nsk_helmets['x'] = sk_helmets['left'] + sk_helmets['width']\/2\nsk_helmets['y'] = (sk_helmets['top'] + sk_helmets['height']\/2)\nsk_helmets = sk_helmets.query('conf > 0.4 ')\ntr_baseline_helmets = sk_helmets.copy()","e842cf69":"def lines_slope_sgn(img):    \n    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    gray = cv2.blur(gray, (5, 5))\n    edges = cv2.Canny(gray,50,150,apertureSize = 3)\n    MLL = 200\n    MLG = 10\n    lines = cv2.HoughLinesP(edges,1,np.pi\/180,100,minLineLength=MLL, maxLineGap=MLG)\n    slopes = []\n    for i in range(0,len(lines)):\n        slope = (lines[i][0][3] - lines[i][0][1])\/ (lines[i][0][2] - lines[i][0][0]+0.0001)\n        slopes.append(slope)\n    slopes_nda = np.array(slopes)\n    slopes_sgn = 1*(slopes_nda > 0) - 1*(slopes_nda < 0)\n    slopes_sgn = slopes_sgn.sum()\n    return slopes_sgn\n","42cafd7e":"def camera_orientation_img(tracking_df, img):\n    x_cm = tracking_df['x'].mean()\n    if (x_cm - 60)*lines_slope_sgn(img) > 0:\n        orientation = \"OK\"\n        return orientation\n    else:\n        orientation = \"switched\"\n        return orientation\n    return False  ","35b03674":"def camera_orientation(helmets_df, tracking_df,img):\n    helmets_df = helmets_df.reset_index(drop=True)\n    tracking_df = tracking_df.reset_index(drop=True)\n    helmets_df['y'] = -helmets_df['y']\n    if len(helmets_df) > 22:\n        helmets_df = helmets_df.sort_values(by = 'conf', ascending=False).head(22)\n        return camera_orientation_img(tracking_df, img)\n    sk_x_tr = tracking_df['x'].skew()\n    sk_y_tr = tracking_df['y'].skew()\n    sk_x_he = helmets_df['x'].skew()\n    sk_y_he = helmets_df['y'].skew()\n    \n    if sk_x_tr*sk_y_tr*sk_x_he*sk_y_he > 0:\n        if sk_x_tr*sk_x_he >0:\n            orientation = \"OK\"\n            return orientation\n        else: \n            orientation = \"switched\"\n            return orientation\n\n    \n    return camera_orientation_img(tracking_df, img)\n ","95847943":"def known_camera_orientation_s(labels_df, tracking_df):\n    labels_H = labels_df.query('team == \"Home\"')\n    #labels_H = labels_H.reset_index(drop=True)\n    labels_V = labels_df.query('team == \"Away\"')\n    tracking_H = tracking_df.query('team == \"Home\"')\n    tracking_V = tracking_df.query('team == \"Away\"')\n    xh_labels_cm = labels_H['x'].mean()\n    xv_labels_cm = labels_V['x'].mean()\n    xh_tracking_cm = tracking_H['x'].mean()\n    xv_tracking_cm = tracking_V['x'].mean()\n    if (xh_labels_cm-xv_labels_cm)*(xh_tracking_cm-xv_tracking_cm)>0:\n        orientation = \"OK\"\n    else: \n        orientation = \"switched\"\n    return orientation","ab1bb1ae":"\ndf = pd.read_csv(\"..\/input\/nfl-health-and-safety-helmet-assignment\/train_labels.csv\")\n\nfiles = files = df.video.unique().tolist()\ndf_files = pd.DataFrame(files)\ndf_files  = df_files.rename(columns={0:\"video_frame\"})\ndf_files['gameKey']  = df_files[\"video_frame\"].str.split(\"_\").str[-3].astype('int64')\ndf_files['playID'] = df_files[\"video_frame\"].str.split(\"_\").str[-2].astype('int64')\ndf_files['View1']  = df_files[\"video_frame\"].str.split(\"_\").str[-1]\ndf_files['View']  = df_files[\"View1\"].str.split(\".\").str[-2]\ndf_sideline_videos = df_files.query('View == \"Sideline\"')\ndf_sideline_videos = df_sideline_videos.reset_index(drop=True)\n","51ac76d6":"for k in range(0,len(df_sideline_videos)):\n    video_name = df_sideline_videos[\"gameKey\"][k]\n    play_name = df_sideline_videos['playID'][k]\n    find_play_tracking = tr_tracking.query('gameKey == @video_name & est_frame == 4 & playID == @play_name')\n    find_play_helmets = tr_baseline_helmets.query('gameKey == @video_name & est_frame == 4 & playID == @play_name & View == \"Sideline\"')\n    find_play_labels = labels.query('gameKey == @video_name & frame == 4 & playID == @play_name')\n    find_play_tracking = find_play_tracking.reset_index(drop=True)\n    find_play_helmets = find_play_helmets.reset_index(drop=True)\n    find_play_labels = find_play_labels.reset_index(drop=True)\n    \n    path = '..\/input\/nfl-health-and-safety-helmet-assignment\/train'\n    source = os.path.join(path, df_sideline_videos['video_frame'][k])\n    \n    cap = cv2.VideoCapture(source)\n    for i in range(0,4):\n        ret,img = cap.read()\n    \n    df_sideline_videos.at[k,'camera_view'] =  camera_orientation(find_play_helmets, find_play_tracking,img)\n    df_sideline_videos.at[k,'known_camera_view'] = known_camera_orientation_s(find_play_labels, find_play_tracking)\n    df_sideline_videos.at[k,'number of helmets'] = len(find_play_helmets)\n    df_sideline_videos['agreement'] = df_sideline_videos['camera_view'] == df_sideline_videos['known_camera_view']\ndf_sideline_videos   ","566f9371":"The beginnig of this notebook uses the code from our excellent host, Rob https:\/\/www.kaggle.com\/robikscube\/helper-code-helmet-mapping-deepsort","40c99c9a":"Hi everybody. I thought about sharing a notebook with a method to identify the camera orientation in Sideline view. \nThe idea is that if one looks at an asymmetric object, say a PEAR, it will look different from two different views. This difference can be measured by the skewness of the x or y distribution. In a \"switched\" camera view the skewness along x and along y will switch signs. In  a normal view they will keep the initial sign. One can check whether the perspective view did not mess up the skewness by mutiplying all four skewnesses and check for this product to be larger than zero. If the product is lower than zero, another camera orientation function kicks in based on the slopes of the field lines. \nThe known camera orientation, that is, when we have the labels, can be calculated automatically. We just look into the label data and see at frame 4 which team was on the left and which one on the right and compare this info with the tracking data. \nYou can see in the dataframe at the end of this notebook the orientation found by the function and the known orientation calculated from the label and tracking data. \nI hope you can include this work in your workflow! Good luck everybody!"}}