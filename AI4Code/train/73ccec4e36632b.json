{"cell_type":{"e8032a54":"code","0badcd80":"code","022d8dc8":"code","e52160dd":"code","e6aa8c51":"code","94ef78dc":"code","034a3e94":"code","443fc298":"code","741eca63":"code","49a334ae":"code","c5d72cb8":"code","390836a5":"code","e094d391":"code","d3a16466":"code","275ecd6e":"code","3e7de3ec":"code","42a764d0":"code","28a4215a":"code","433a32af":"code","36e3e61d":"code","de390d89":"code","5f1fc934":"code","51e15709":"code","7d59bf1a":"code","eb3a9866":"code","7eb11a1f":"code","880e5562":"code","fd8fa7c3":"code","3e9c55d3":"code","22b4ff54":"code","533dfb98":"code","f66fb214":"code","9cc99805":"markdown","41021770":"markdown","5c980830":"markdown","bb6ef91b":"markdown","69e35a0e":"markdown","252b8973":"markdown","7bd1b2d2":"markdown","205679ab":"markdown","eba4cb76":"markdown","46a6301b":"markdown","f70fcc98":"markdown","273d5eaf":"markdown","82b603f4":"markdown","ea03c478":"markdown","23dd3068":"markdown","8f28fc15":"markdown","2f823ce1":"markdown","d9aeb465":"markdown","3e0f7326":"markdown","7dc208e9":"markdown","8647fdff":"markdown","10771e86":"markdown","b76044ef":"markdown","b8489110":"markdown","156bb56f":"markdown","2458a6f1":"markdown"},"source":{"e8032a54":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nfrom datetime import datetime\n\n%matplotlib inline","0badcd80":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","022d8dc8":"print(\"There are exists {} columns\".format(len(df.columns)))","e52160dd":"df.columns.tolist()","e6aa8c51":"plt.rcParams[\"figure.figsize\"] = (20,6) #change size of figure\nsns.heatmap(df.isnull(), cbar=False)","94ef78dc":"def renameColumns(column):\n    column = re.sub('[^a-z A-z 0-9]', '', column) #remove non-alphanumeric characters\n    column = re.sub(' +', ' ', column) #replace multiple spaces to just one\n\n    return column.strip().replace(' ', '_').lower() #apply snake_case pattern","034a3e94":"%%time\ndf.rename(columns=renameColumns, inplace=True)","443fc298":"target_columns = ['sarscov2_exam_result']\nidentifier_column = 'patient_id'","741eca63":"%%time\ncolumns_null_index = (df.isnull().sum()\/df.shape[0]).where(lambda x : x==1).dropna().index","49a334ae":"print(\"Null columns\")\ncolumns_null_index","c5d72cb8":"%%time\ndf.drop(columns_null_index, axis=1, inplace=True)\nprint(\"{} columns where removed\".format(len(columns_null_index)))","390836a5":"%%time\ndf.dtypes.groupby(df.dtypes).count()","e094d391":"%%time\nnon_numerical_columns = df.dtypes.where(lambda x: x=='object').dropna().index.tolist()\nnumerical_columns = df.dtypes.where(lambda x: x!='object').dropna().index.tolist()","d3a16466":"%%time\nnon_numerical_columns.remove(identifier_column)\n\nfor column in non_numerical_columns:\n    print(df.groupby(column).count().index)","275ecd6e":"%%time\ndf.describe()","3e7de3ec":"df['sarscov2_exam_result'] = df['sarscov2_exam_result'].map({'negative': 0, 'positive': 1})\ndf['influenza_a_rapid_test'] = df['influenza_a_rapid_test'].map({'negative': 0, 'positive': 1})\ndf['influenza_b_rapid_test'] = df['influenza_b_rapid_test'].map({'negative': 0, 'positive': 1})\ndf['strepto_a'] = df['strepto_a'].map({'negative': 0, 'positive': 1})\n\ndetect_or_not_columns = [\n    'respiratory_syncytial_virus','influenza_a','influenza_b','parainfluenza_1','coronavirusnl63','rhinovirusenterovirus','coronavirus_hku1','parainfluenza_3',\n    'chlamydophila_pneumoniae','adenovirus','parainfluenza_4','coronavirus229e','coronavirusoc43','inf_a_h1n1_2009','bordetella_pertussis','metapneumovirus',\n    'urine_protein', 'urine_hyaline_cylinders', 'urine_granular_cylinders', 'urine_yeasts', 'urine_esterase', 'urine_protein', 'urine_nitrite', 'urine_urobilinogen',\n    'urine_bile_pigments', 'urine_ketone_bodies', 'parainfluenza_2', 'urine_hemoglobin'\n]\n\ndf[detect_or_not_columns]= df[detect_or_not_columns].replace({'not_detected': 0, 'not_done': 0.5, 'detected': 1, 'absent': 2, 'normal': 3, 'present': 4})\n\ndf['urine_ph'] = df['urine_ph'].replace({\"N\u00e3o Realizado\": 0}).astype('float64')\ndf['urine_crystals'] = df['urine_crystals'].map({'Ausentes': 0, 'Oxalato de C\u00e1lcio +++': 1, 'Oxalato de C\u00e1lcio -++': 2,\n       'Urato Amorfo +++': 3, 'Urato Amorfo --+': 4})\ndf['urine_color'] = df['urine_color'].map({'citrus_yellow': 1, 'light_yellow': 2, 'orange': 3, 'yellow': 4})\ndf['urine_aspect'] = df['urine_aspect'].map({'altered_coloring': 1, 'clear': 2, 'cloudy': 3, 'lightly_cloudy': 4})\n\ndf['urine_leukocytes'] = df['urine_leukocytes'].replace({'<1000': 500}).astype('float64')\n","42a764d0":"df.dtypes.groupby(df.dtypes).count()","28a4215a":"df_target = pd.DataFrame(df[target_columns])\n\ndf_valid = df.fillna(999999999)\n\ndel df_valid[identifier_column]","433a32af":"plt.rcParams[\"figure.figsize\"] = (20,6)\nsns.heatmap(df.isnull(), cbar=False)","36e3e61d":"df[numerical_columns].describe()","de390d89":"plt.rcParams[\"figure.figsize\"] = (15,5)\nfig, (ax1, ax2) = plt.subplots(ncols=2)\n\nsns.distplot(df[df['sarscov2_exam_result'] == 1]['patient_age_quantile'], hist=True, label='Positive', ax=ax2)\nsns.distplot(df[df['sarscov2_exam_result'] == 0]['patient_age_quantile'], hist=True, label='Negative', ax=ax2)\nsns.distplot(df['patient_age_quantile'], hist=False, label='Geral', ax=ax1)\nplt.legend()\n","5f1fc934":"%%time\nnewDf = df[[identifier_column] + target_columns].groupby(target_columns).count().reset_index().replace({0: \"Negative\", 1: \"Postive\"})","51e15709":"%%time\nb = sns.barplot(y=\"patient_id\", data=newDf, x=\"sarscov2_exam_result\")\nb.set_title(\"SARS-Cov-2 Exam\",fontsize=25)\nb.set_xlabel(\"\",fontsize=15)\nb.set_ylabel(\"Quantity\",fontsize=15)\n# b.set_xticklabels(['Negative', 'Postive'])","7d59bf1a":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score\n","eb3a9866":"%%time\n\n\nX = df_valid.drop(target_columns, axis=1)\nY = df_valid[target_columns]","7eb11a1f":"model = RandomForestClassifier(n_estimators=200)","880e5562":"%%time\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.40, random_state=55)","fd8fa7c3":"%%time\nmodel.fit(X_train, Y_train.values.ravel())","3e9c55d3":"%%time\npred = model.predict(X_test)","22b4ff54":"print(classification_report(Y_test, pred))","533dfb98":"print(confusion_matrix(Y_test, pred))","f66fb214":"accuracy = accuracy_score(Y_test, pred)\n\nprint(f'Mean accuracy score: {accuracy:.3}')","9cc99805":"## Used Libs","41021770":"## Selection\n","5c980830":"### Check null\/nan fields\n\n\n* remove columns that have neither a non-null value","bb6ef91b":"#### Confusion Matrix","69e35a0e":"Only the identification field with object attribute (str) remained","252b8973":"We define which columns we will work on","7bd1b2d2":"### Group non-numeric values by column and check possible values","205679ab":"### Applying the null field check again after the processing phase","eba4cb76":"### Split target data","46a6301b":"## It is possible to predict the positive result with the random forest algorithm with a good hit\n","f70fcc98":"#### Number of missing records, black for valid records and in beige represents null records \/ nan","273d5eaf":"### The KDD (knowledge discovery data) process was used (FAYYAD, 1996), as shown in the image below[\u00b9](http:\/\/www.professores.uff.br\/fcbernardini\/wp-content\/uploads\/sites\/68\/2017\/08\/01-Introdu%C3%A7%C3%A3o-a-KDD-e-DM.pdf)\n![image.png](attachment:image.png)\n\n\n\n### Task\n* Based on the results of laboratory tests commonly collected for a suspected COVID-19 case during a visit to the emergency room, would it be possible to predict the test result for SARS-Cov-2 (positive\/negative)?","82b603f4":"# Data Mining\n- import libs from sklearn\n- building a model","ea03c478":"#### List of columns ","23dd3068":"## Transformation\n\nIt consists of applying transformation techniques such as: normalization, aggregation, creation of new attributes, reduction and synthesis of data.[\u00b2](https:\/\/medium.com\/@kvmoura\/kdd-process-9b8e3062142) ","8f28fc15":"### Check the numerical data outliers","2f823ce1":"## Exploratory analysis","d9aeb465":"### Patient age quantile geral and grouped by sarcov2 exam result","3e0f7326":"Split data in two subsets, train and test dataframe","7dc208e9":"### Rename columns to pattern [snake_case](https:\/\/en.wikipedia.org\/wiki\/Snake_case)\n\nThis pattern is useful for writing faster than others","8647fdff":"### The positive result was classified incorrectly in a much larger volume","10771e86":"### Check the type of fields","b76044ef":"### Prepare the data for the model\n\nCreates DataFrame using the target column and another with the other columns\n\nAssign the value 999999999 to null values.","b8489110":"### filter fields according to type\n\n- numerical\n- non-numerical","156bb56f":"### The categorical and numeric attributes have been converted to numeric\n\nIn addition, the value '<1000'(str) of the urine_leukocytes column was converted to 500(int)\n","2458a6f1":"## Processing\n\n- check the amount of missing \/ null records\n- understand the completeness of the data and its filling pattern\n- checking outliers\n- check the type of  fields"}}