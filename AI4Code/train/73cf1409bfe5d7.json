{"cell_type":{"4416b87c":"code","999a9d60":"code","f3ddef65":"code","2cb48e87":"code","4d1410cb":"code","c9b53779":"code","099ab825":"code","55bdd7f1":"code","671ccbec":"code","c76d190b":"code","6a73f703":"code","15036bbf":"code","829a4c68":"code","1c05175a":"code","ab9d88a7":"code","135b494b":"code","51413e38":"code","3f72086a":"code","03792200":"code","92ae4ac3":"code","ada72be2":"code","968e3daf":"code","4ade2286":"code","64b2b192":"code","f086af2b":"code","36fb84e5":"code","f2dba1b3":"code","4dc64f37":"code","eaa4d382":"markdown","3bb39ed2":"markdown","d83c9884":"markdown"},"source":{"4416b87c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","999a9d60":"input_path = '..\/input\/titanic\/'\ndf_train = pd.read_csv(input_path + 'train.csv')\ndf_test = pd.read_csv(input_path + 'test.csv')","f3ddef65":"# Show 5 first lines\ndf_train.head()","2cb48e87":"# Show 5 last lines\ndf_train.tail()","4d1410cb":"# Initialize new columns with 0 by default\ndf_train['YoungAndRich'] = 0\ndf_test['YoungAndRich'] = 0\ndf_train['Young'] = 0\ndf_test['Young'] = 0\ndf_train['RichYoungMale'] = 0\ndf_test['RichYoungMale'] = 0\ndf_train['RichYoungFemale'] = 0\ndf_test['RichYoungFemale'] = 0\ndf_train['Deck'] = 0\ndf_test['Deck'] = 0\ndf_train['LuckyParch'] = 0\ndf_test['LuckyParch'] = 0","c9b53779":"# New columns value attribution\ndf_train.loc[df_train['Age'] <= 18, 'Young'] = 1\ndf_train.loc[df_train['Age'] > 18, 'Young'] = 0\ndf_test.loc[df_test['Age'] <= 18, 'Young'] = 1\ndf_test.loc[df_test['Age'] > 18, 'Young'] = 0\n\ndf_train.loc[(df_train['Age'] <= 30) & (df_train['Pclass'] <= 2), 'YoungAndRich'] = 1\ndf_test.loc[(df_test['Age'] <= 30) & (df_test['Pclass'] <= 2), 'YoungAndRich'] = 1\n\ndf_train.loc[(df_train['YoungAndRich'] == 1) & (df_train['Sex'] == 'male'),'RichYoungMale'] = 1\ndf_test.loc[(df_test['YoungAndRich'] == 1) & (df_test['Sex'] == 'male'),'RichYoungMale'] = 1\ndf_train.loc[(df_train['YoungAndRich'] == 1) & (df_train['Sex'] == 'female'),'RichYoungFemale'] = 1\ndf_test.loc[(df_test['YoungAndRich'] == 1) & (df_test['Sex'] == 'female'),'RichYoungFemale'] = 1","099ab825":"df_train.head(10)","55bdd7f1":"# Check survivability by sex\nsns.barplot(x = 'Sex', y = 'Survived', data = df_train);","671ccbec":"# Check survivability by class\nsns.barplot(x = 'Pclass', y = 'Survived', data = df_train);","c76d190b":"# Survivability based on if is a child or not\nsns.barplot(x = 'Young', y = 'Survived', data = df_train);","6a73f703":"# Survivability by parent \nsns.barplot(x = 'Parch', y = 'Survived', data = df_train);","15036bbf":"# Survivability by Age and social class\nsns.barplot(x = \"YoungAndRich\", y=\"Survived\", data = df_train);","829a4c68":"# Surivability by Deck on the boat\nsns.barplot(x = df_test['Cabin'].str[0], y = 'Survived', data = df_train);","1c05175a":"sub = pd.read_csv(input_path + 'gender_submission.csv')","ab9d88a7":"# Fill NaN columns with average_age variables\naverage_age = np.sum(df_train['Age'].isnull()) \/ len(df_train['Age'])\ndf_train.loc[df_train[\"Age\"].isnull(),\"Age\"] = average_age \ndf_test.loc[df_test[\"Age\"].isnull(),\"Age\"] = average_age\ndf_train.loc[df_train[\"Fare\"].isnull(),\"Fare\"] = 0\ndf_test.loc[df_test[\"Fare\"].isnull(),\"Fare\"] = 0\ndf_train[\"cabin_is_null\"] = np.where(df_train[\"Cabin\"].isnull(), 1, 0)\ndf_test[\"cabin_is_null\"] = np.where(df_test[\"Cabin\"].isnull(), 1, 0)\ndf_train.loc[df_train['Cabin'].isnull(),'Cabin'] = 0\ndf_test.loc[df_test['Cabin'].isnull(),'Cabin'] = 0\n\ndf_train.loc[df_train['Cabin'] != 0, 'Deck'] = df_train['Cabin'].str[0]\ndf_test.loc[df_test['Cabin'] != 0, 'Deck'] = df_test['Cabin'].str[0]\n\ndf_train.loc[df_train['Parch'] <= 3, 'LuckyParch'] = 1\ndf_test.loc[df_train['Parch'] <= 3, 'LuckyParch'] = 1","135b494b":"df_train.head(20)","51413e38":"NUM_FEATURES = ['Age', 'Fare','Pclass', 'Young', 'SibSp', 'Parch', 'cabin_is_null', 'RichYoungFemale', 'RichYoungMale','YoungAndRich', 'LuckyParch']\nCAT_FEATURES = ['Sex', 'Embarked', 'Cabin']","3f72086a":"for c in CAT_FEATURES:\n    df_train[c] = df_train[c].astype('category').cat.codes","03792200":"# Preparing dataset for model integration\nX_train = df_train.loc[:, NUM_FEATURES]\nX_train_cat = df_train.loc[:, CAT_FEATURES]\ny_train = df_train['Survived']","92ae4ac3":"X_test = df_test.loc[:, NUM_FEATURES]\nX_test_cat = df_train.loc[:, CAT_FEATURES]","ada72be2":"pd.concat([X_train, X_train_cat], axis = 1)","968e3daf":"pd.concat([X_test, X_test_cat], axis = 1)","4ade2286":"X_train.head(50)","64b2b192":"rf = RandomForestClassifier(n_estimators=100)\nprint(rf)","f086af2b":"rf.fit(X_train, y_train)","36fb84e5":"train_acc = accuracy_score(y_train, rf.predict(X_train))\nprint(train_acc)","f2dba1b3":"rf.predict(X_test)","4dc64f37":"# Cell used to store model result\nsubmission = pd.DataFrame({'PassengerId' : df_test['PassengerId'],\n                           'Survived' : rf.predict(X_test)})\nsubmission.to_csv('submission.csv', index = False)","eaa4d382":"# Data preparation ","3bb39ed2":"### Data visualization\n> This part is used to display some data graphically","d83c9884":"### Initialisation"}}