{"cell_type":{"dbc0684e":"code","6c32aa07":"code","134506ba":"code","78d9036b":"code","2da86547":"code","3af64b45":"code","3017a0ec":"code","e9ca2c7f":"code","26fbc3ea":"code","4fd6ab1e":"code","d9531314":"code","459efca5":"code","76f30d76":"code","ebca222c":"code","0242ee21":"code","bb330277":"code","3ba2d641":"code","45c46329":"code","fc8db335":"code","61dc317a":"code","1193d23b":"code","430971e8":"code","0b2e4511":"code","d4aa2707":"code","aa3569a4":"code","31f6b062":"code","0ff0d2ce":"code","218f5735":"code","c658bc29":"code","0665b8df":"code","035504fd":"code","c48ad16a":"code","1f033b4a":"code","4717a74e":"code","bdb8fa26":"code","69bfcd28":"code","cd55fc24":"code","94bd7b45":"code","d4d49421":"code","0a9e87fa":"code","2388f5e1":"code","9286a0c2":"code","dbdd94b5":"code","b58d5d0e":"code","c16ba64e":"code","f98ddaa1":"code","f1bbab6b":"code","9f33756b":"code","a18b9d4b":"code","3a9ae6c2":"code","0a18ee78":"code","2382df10":"code","80ae37f6":"markdown","dbb0f163":"markdown","5c0913ee":"markdown","b23d7666":"markdown","e660316b":"markdown","82864b2f":"markdown","6824b309":"markdown","ce73263c":"markdown","d6302eb0":"markdown","29bab244":"markdown","4c41d837":"markdown","1c6faa3e":"markdown","9daf550c":"markdown","9fa58f23":"markdown","53aef3bf":"markdown","ddc5a2b3":"markdown","e1babaaa":"markdown","7d6f191b":"markdown","e8d7ff93":"markdown","8fe0ab40":"markdown","e5088148":"markdown","77cc8ccb":"markdown","37087c17":"markdown","3aff8243":"markdown","62b16c5d":"markdown","b4d315d6":"markdown","c52ca601":"markdown","e7dc7e2b":"markdown","e65067e7":"markdown","0a1bf076":"markdown","921a28df":"markdown","78b6c31a":"markdown","4d4addd5":"markdown","e2e9a910":"markdown","760facc9":"markdown","9fd2a93d":"markdown"},"source":{"dbc0684e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.metrics import classification_report,confusion_matrix, accuracy_score","6c32aa07":"df=pd.read_csv('..\/input\/fifa19\/data.csv')\ndf.head()","134506ba":"df.columns","78d9036b":"df.info()","2da86547":"df.duplicated().any()","3af64b45":"df.isnull().sum(axis=0)\/df.shape[0]","3017a0ec":"#Missing Height and Missing Weight is in the same line?\nmissing_height = df[df['Height'].isnull()].index.tolist()\nmissing_weight = df[df['Weight'].isnull()].index.tolist()\nif missing_height == missing_weight:\n    print('They are same')\nelse:\n    print('They are different')","e9ca2c7f":"df.drop(df.index[missing_height],inplace =True)","26fbc3ea":"df.isnull().sum()","4fd6ab1e":"missing_position = df[df['Position'].isnull()]['Name']\nmissing_position","d9531314":"df.drop(df[df['Position'].isnull()].index.tolist(),inplace =True)","459efca5":"df.isnull().sum()","76f30d76":"# we won't use these features in this work.\n# df.drop(['Loaned From','Release Clause','Joined','Photo','Flag','Club Logo','Special','Real Face','Joined','Loaned From','Contract Valid Until'\n#         ],axis=1,inplace=True)","ebca222c":"# missing_LS is a GK?\nmissing_LS = df[df['LS'].isnull()]['Position']\nmissing_LS","0242ee21":"# yeah, a GK with no LS. So we could keep these 2037 records.\ndf['Club'].fillna(value='No Club', inplace=True)\ndf = df.fillna(0)","bb330277":"df.isnull().values.any()","3ba2d641":"# there is no null value.","45c46329":"df_age_ = df[['Age','Potential','Overall']]\ndf_age_.describe().T","fc8db335":"trace1 = go.Histogram(x=df_age_['Age'], nbinsx=55, opacity=0.7)\n\nlayout = go.Layout(title='<b>Players Age Distribution<b>',\n                   xaxis=dict(title='<b><i>Age<\/b><\/i>'),\n                   yaxis=dict(title='<b><i>Count<\/b><\/i>'),\n                  )\n\nfig = go.Figure(data=[trace1], layout=layout)\npy.iplot(fig)","61dc317a":"cut_label_name = ['15-20','20-25','25-30','30-35','35-40','40-45']\ncut_bins = [15,20,25,30,35,40,45]\ndf_age_['generation'] =  pd.cut(df_age_['Age'], bins = cut_bins, labels = cut_label_name)\ndf_age_","1193d23b":"fig, ax = plt.subplots(figsize=(8,8))\nax2 = ax.twiny()\nsns.boxplot(x=\"generation\", y=\"Potential\", color = 'gold', ax=ax, data=df_age_)\nsns.boxplot(x=\"generation\", y=\"Overall\", color =\"lightblue\", ax=ax2,data=df_age_)\nplt.show()","430971e8":"fig, axes = plt.subplots(1, 2,figsize=(10,6))\nsns.boxplot(x=\"generation\", y=\"Potential\", data=df_age_, palette=\"YlOrRd\", ax=axes[0])\nsns.boxplot(x=\"generation\", y=\"Overall\", data=df_age_, palette=\"YlOrRd\", ax=axes[1])\nplt.show()","0b2e4511":"df_p = df.groupby(['Age'])['Potential'].mean()\ndf_o = df.groupby(['Age'])['Overall'].mean()\n\ndf_summary = pd.concat([df_p, df_o], axis=1)\n\nax = df_summary.plot()\nax.set_ylabel('Rating')\nax.set_title('Average Rating by Age') ","d4aa2707":"df.sort_values(by=['Potential','Overall'],ascending = False)\ndf_talented_players = df[df['Age'] < 28]\ndf_talented_players = df_talented_players[['Name','Age','Potential','Overall']]\ndf_talented_players.head(10)","aa3569a4":"top_team_list = ['Real Madrid','FC Barcelona','Juventus','Paris Saint-Germain','Manchester United','Manchester City','Chelsea','Atl\u00e9tico Madrid'\n                 ,'FC Bayern M\u00fcnchen','Tottenham Hotspur','Liverpool','Arsenal','Milan','Inter','Napoli','Lazio','Roma','Borussia Dortmund']\ndf_top_team_players = df[df['Club'].isin(top_team_list)]\ndf_top_team_players","31f6b062":"df_nations = df_top_team_players.groupby(by='Nationality').size().reset_index()\ndf_nations.columns = ['Nationality','Num_Players']\ndf_nations = df_nations.sort_values(by=['Num_Players'],ascending=False)\ndf_nations","0ff0d2ce":"df_top_nations = df_nations[:10]","218f5735":"plt.figure(figsize=(16, 5))\nplt.bar(df_top_nations['Nationality'], df_top_nations['Num_Players'],color=['red','silver','lime','blue','black','g','aqua', 'red', 'crimson', 'forestgreen'\n                                                                           ],alpha=0.8)\nplt.plot(df_top_nations['Nationality'], df_top_nations['Num_Players'],color='orange')\nplt.title('Nations of players in European top teams',fontsize='xx-large',fontweight='heavy')","c658bc29":"trace1 = dict(type='choropleth',\n              locations=df_nations['Nationality'],\n              z=df_nations['Num_Players'],\n              locationmode='country names',\n              colorscale='Portland'\n             )\n\nlayout = go.Layout(title='<b>Number of Players in top european teams each Country[2] <\/b>',\n                   geo=dict(showocean=True,\n                            oceancolor='#AEDFDF',\n                            projection=dict(type='natural earth'),\n                        )\n                  )\n\nfig = go.Figure(data=[trace1], layout=layout)\npy.iplot(fig)","0665b8df":"# got players groupby nations and arranged by age desc.\ndf_nation = df_top_team_players\ndef Age_desc(x):\n    df_nation = x.sort_values(by = ['Age'],ascending=False)\n    return df_nation\ndf_nation = df_nation.groupby('Nationality',as_index=False).apply(Age_desc)\ndf_nation ","035504fd":"df_Spain = df_nation[df_nation['Nationality']=='Spain']\ndf_Spain_ages = df_Spain.groupby(by='Age').size().reset_index()\ndf_Spain_ages.columns = ['Age','Age_num']\ndf_Spain_ages","c48ad16a":"plt.figure(figsize=(15, 6))\nplt.bar(df_Spain_ages['Age'], df_Spain_ages['Age_num'],color='yellow')\nplt.plot(df_Spain_ages['Age'], df_Spain_ages['Age_num'],color='red')\nplt.title('Age distribution of Spanish players in European top teams',fontsize='xx-large',fontweight='heavy')","1f033b4a":"df_England = df_nation[df_nation['Nationality']=='England']\ndf_England_ages = df_England.groupby(by='Age').size().reset_index()\ndf_England_ages.columns = ['Age','Age_num']\ndf_England_ages","4717a74e":"plt.figure(figsize=(15, 6))\nplt.bar(df_England_ages['Age'], df_England_ages['Age_num'],color='silver')\nplt.plot(df_England_ages['Age'], df_England_ages['Age_num'],color='red')\nplt.title('Age distribution of English players in European top teams',fontsize='xx-large',fontweight='heavy')","bdb8fa26":"df_Germany = df_nation[df_nation['Nationality']=='Germany']\ndf_Germany_ages = df_Germany.groupby(by='Age').size().reset_index()\ndf_Germany_ages.columns = ['Age','Age_num']\ndf_Germany_ages","69bfcd28":"plt.figure(figsize=(15, 6))\nplt.bar(df_Germany_ages['Age'], df_Germany_ages['Age_num'],color='silver')\nplt.plot(df_Germany_ages['Age'], df_Germany_ages['Age_num'],color='Black')\nplt.title('Age distribution of Germany players in European top teams',fontsize='xx-large',fontweight='heavy')","cd55fc24":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\n# Top six features for striker\nfor i, val in df.groupby(df['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {},{},{},{}'.format(i, *tuple(val.nlargest(6).index)))","94bd7b45":"df_skills = df[df['Position']=='ST']\ndf_skills = df_skills.sort_values(by='Overall',ascending=False)\ndf_skills.head(10)","d4d49421":"trace5a = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Finishing', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df_skills[df_skills['Name'] == 'Cristiano Ronaldo'][['Acceleration', 'Jumping', 'Finishing', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='Cristiano Ronaldo'\n                         )\ntrace5b = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Finishing', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df_skills[df_skills['Name'] == 'R. Lewandowski'][['Acceleration', 'Jumping', 'Finishing', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='R. Lewandowski'\n                         )\ntrace5c = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Finishing', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df_skills[df_skills['Name'] == 'H. Kane'][['Acceleration', 'Jumping', 'Finishing', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='H. Kane'\n                         )\n\ntrace5d = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Finishing', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df_skills[df_skills['Name'] == 'S. Ag\u00fcero'][['Acceleration', 'Jumping', 'Finishing', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='S. Ag\u00fcero'\n                         )\ntrace5e = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Finishing', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df_skills[df_skills['Name'] == 'G. Bale'][['Acceleration', 'Jumping', 'Finishing', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='G. Bale'\n                         )\nlayout = go.Layout(polar=dict(radialaxis=dict(visible=True, range=[0, 100])),\n                   showlegend=True,\n                   title='<b>Attributes of top 5 strikers [2]<\/b>'\n                  )\n\nfig = go.Figure(data=[trace5a, trace5b, trace5c, trace5d, trace5e], layout=layout)\npy.iplot(fig)","0a9e87fa":"trace5a = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Dribbling', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df[df['Name'] == 'Cristiano Ronaldo'][['Acceleration', 'Jumping', 'Dribbling', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='Cristiano Ronaldo'\n                         )\ntrace5b = go.Scatterpolar(theta=['Acceleration', 'Jumping', 'Dribbling', \n                                 'Agility', 'Balance', 'BallControl',\n                                 'Acceleration'\n                                ],\n                          r=df[df['Name'] == 'L. Messi'][['Acceleration', 'Jumping', 'Dribbling', \n                                                                     'Agility', 'Balance', 'BallControl',\n                                                                     'Acceleration'\n                                                                    ]].values[0],\n                          fill='toself',\n                          name='L. Messi'\n                         )\nlayout = go.Layout(polar=dict(radialaxis=dict(visible=True, range=[0, 100])),\n                   showlegend=True,\n                   title='<b> Messi vs C.Ronaldo <\/b>'\n                  )\n\nfig = go.Figure(data=[trace5a, trace5b], layout=layout)\npy.iplot(fig)","2388f5e1":"def height_converter(val):\n    f = val.split(\"'\")[0]\n    i = val.split(\"'\")[1]\n    h = (int(f) * 30.48) + (int(i)*2.54)\n    return h\n\ndef weight_converter(val):\n    w = int(val.split('lbs')[0])\n    return w\n\ndf['Height_cm'] = df['Height'].apply(height_converter)\ndf['Weight_pounds'] = df['Weight'].apply(weight_converter)","9286a0c2":"df.corrwith(df.Height_cm)","dbdd94b5":"X = df['Height_cm'].values.reshape(-1,1)\ny = df['Weight_pounds'].values.reshape(-1,1)\nregr = linear_model.LinearRegression().fit(X, y)\n\ny_pred = regr.predict(X)\nprint(\"Mean squared error: %.2f\"% mean_squared_error(y, y_pred))\nprint(\"Mean absolute error: %.2f\"% mean_absolute_error(y, y_pred))\nprint('Variance score: %.2f'% r2_score(y, y_pred))\n\ndef plot_chart(X, y, y_pred, x_l, x_h, y_l, y_h, c):\n    plt.figure(figsize = (12,10))\n    plt.scatter(X, y, color=c)\n    plt.plot(X, y_pred, color='red', linewidth=3)\n\n    plt.title('Height vs Weight [1]')\n    plt.ylim(y_l,y_h)\n    plt.xlim(x_l,x_h)\n    plt.ylabel('Weight')\n    plt.xlabel('Height')\n    \nplot_chart(X, y, y_pred, 140, 220, 100, 260, 'dimgray')","b58d5d0e":"regr.coef_","c16ba64e":"X = df['Height_cm'].values.reshape(-1,1)\ny = df['Overall'].values.reshape(-1,1)\nregr = linear_model.LinearRegression().fit(X, y)\n\ny_pred = regr.predict(X)\nprint(\"Mean squared error: %.2f\"% mean_squared_error(y, y_pred))\nprint(\"Mean absolute error: %.2f\"% mean_absolute_error(y, y_pred))\nprint('Variance score: %.2f'% r2_score(y, y_pred))\n\ndef plot_chart(X, y, y_pred, x_l, x_h, y_l, y_h, c):\n    plt.figure(figsize = (10,8))\n    plt.scatter(X, y, color=c)\n    plt.plot(X, y_pred, color='red', linewidth=3)\n    y1 = X\n    plt.plot(X, y1, color='blue', linewidth=3, linestyle='--')\n\n    plt.title('Height_cm vs Overall')\n    plt.ylim(y_l,y_h)\n    plt.xlim(x_l,x_h)\n    plt.ylabel('Overall')\n    plt.xlabel('Height_cm')\n    \nplot_chart(X, y, y_pred, 140, 220, 45, 100, 'dimgray')","f98ddaa1":"regr.coef_","f1bbab6b":"def currencyConverter(val):\n    if val[-1] == 'M':\n        val = val[1:-1]\n        val = float(val) * 1000000\n        return val\n        \n    elif val[-1] == 'K':\n        val = val[1:-1]\n        val = float(val) * 1000\n        return val\n    \n    else:\n        return 0\n\n\ndf['Value_Pounds'] = df['Value'].apply(currencyConverter)\ndf['Wage_Pounds'] = df['Wage'].apply(currencyConverter)\n    \nX = df['Value_Pounds'].values.reshape(-1,1)\ny = df['Wage_Pounds'].values.reshape(-1,1)\nregr = linear_model.LinearRegression().fit(X, y)\n\ny_pred = regr.predict(X)\nprint(\"Mean squared error: %.2f\"% mean_squared_error(y, y_pred))\nprint(\"Mean absolute error: %.2f\"% mean_absolute_error(y, y_pred))\nprint('Variance score: %.2f'% r2_score(y, y_pred))\n\ndef plot_chart(X, y, y_pred, x_l, x_h, y_l, y_h, c):\n    plt.figure(figsize = (12,10))\n    plt.scatter(X, y, color=c)\n    plt.plot(X, y_pred, color='red', linewidth=3)\n\n    plt.title('Value_Pounds vs Wage_Pounds')\n    plt.ylim(y_l,y_h)\n    plt.xlim(x_l,x_h)\n    plt.ylabel('Wage_Pounds')\n    plt.xlabel('Value_Pounds')\n    \nplot_chart(X, y, y_pred, 0, 130000000, 0, 600000, 'dimgray')","9f33756b":"df_nor = df\ndf_nor = df_nor[['Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties','Position']]\nmapping = {'CAM': 1, 'CDM': 1, 'CF': 1, 'CM': 1, 'LAM': 1, 'LCM': 1, 'LDM': 1, 'LF': 1, \n           'LM': 1, 'LS': 1, 'LW': 1, 'LWB': 1, 'RAM': 1, 'RCM': 1, 'RDM':1,'RF':1,'RM':1,\n          'RS':1,'RW':1,'ST':1, 'CB':0, 'GK':0, 'LB':0 , 'LCB':0, 'RB':0, 'RCB':0, 'RWB':0}\n\ndf_nor = df_nor.replace({'Position': mapping})\n\ndf_nor.iloc[::1000,]","a18b9d4b":"X = df_nor.drop(columns=['Position'])\nX = pd.get_dummies(X)\ny = df_nor['Position']","3a9ae6c2":"#Splitting dataset into train and test sets.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train, y_train)","0a18ee78":"prediction = logmodel.predict(X_test)","2382df10":"print(classification_report(y_test, prediction))\nprint('\\n')\nprint(confusion_matrix(y_test, prediction))\nprint('\\n')\nprint('Accuracy Score: ', accuracy_score(y_test, prediction))","80ae37f6":"we can see top 6 attributes of strikers are Acceleration, Jumping, Finishing,Agility,Balance,BallControl. \nThen, we can analyse these 6 features of top 5 strikers.","dbb0f163":"Finally, we choose these 6 features: Acceleration, Agility, Balance, BallControl, Dribbling,Jumping.","5c0913ee":"Accuracy score is 0.927, which could be improved when we pick out some important features.","b23d7666":"So we could say, most of Spanish players in top european teams are really young, and also there are a lot of players over 31 still play a key role in their teams, like Sergio Ramos. (^-^)","e660316b":"# # 2. England","82864b2f":"> ","6824b309":"3. Value vs Wage?","ce73263c":"Thanks for reading! Welcome any discussion (*^\u25bd^*)","d6302eb0":"# **C.Ronaldo vs Messi**","29bab244":"It seems top strikers really get high scores in these 6 features.  \nAnd we can see C.Ronaldo's jumping feature is the highest, G.Bale's acceleration is the fastest.","4c41d837":"# 2. Data Cleaning","1c6faa3e":"Then let's see age distribution of some countries.\n# # 1. Spain","9daf550c":"First of all, we gonna see descriptive statistics of ['Age','Potential','Overall'].","9fa58f23":"Value and Wage are symmetric about y = x. And most players got value less than 2,000,000 pounds, and wage less than 150,000 pounds.","53aef3bf":"# 3. Find Talented Players","ddc5a2b3":"# 5. Attributes of top 5 strikers","e1babaaa":"From this plot[1], we could find that players may reach the peak at the age of 28.  \nSo we made a definition that talented players are **'Age < 28,sort_values(by=['Potential','Overall'],desc)'**","7d6f191b":"> Position ST: Acceleration, Jumping, Finishing, Agility, Balance, BallControl [3]","e8d7ff93":"From the Scatterpolar, Messi and Ronaldo got almost same score or got quite close in BallControl, Acceleration, Agility and Dribbling. And Messi got higher score than Ronaldo in Balance, while Ronaldo won in Jumping.  \nTherefore, they are neck and neck, beyond all doubt, they are two best players in the football world!","8fe0ab40":"# 1. Have a look on dataset","e5088148":"Therefore, we got **top 10 talented players**.","77cc8ccb":"In the same way, we could compare attritubes between Ronaldo and Messi.  \nRonaldo's position is ST, Messi's position is RF, for the sake of fairness, we choose one ST's features and one RF's features.(For there are four same features of ST and RF.)","37087c17":"# 6. Linear Regression","3aff8243":"Spain has most players in top european teams, meanwhile european countries took the top 5, and got 8 seats in the top 10.  \nAs representatives of South American football, Brazil and Argentina followed.","62b16c5d":"# 4. Players in top european teams","b4d315d6":"1. Height vs Weight?","c52ca601":"Predict binary targets (attack vs defend positions) with logistic regression,  \n1(attack): CAM, CDM, CF, CM, LAM, LCM,LDM,LF,LM,LS,LW,LWB,RAM,RCM,RDM,RF,RM,RS,RW,ST  \n0(defend): CB, GK, LB, LCB, RB,RCB,RWB","e7dc7e2b":"The distribution of German players looks balanced, for they got players with almost all ages.  \nThey got peak at 22,29, that means they always have best players these years.  There's only one thing they need to pay attention to, training young and talented players.","e65067e7":"It's surprised that there are huge amount of young English players play in top european teams!   \nThat must be a good sign for English football for they have so many talented and potential players.  \nThey don't have much players over 28, this may indicate that there was a time when England didn't have many top players.","0a1bf076":"This seems a positive correlation between height and weight.","921a28df":"# References\n[1] https:\/\/www.kaggle.com\/laowingkin\/fifa-18-find-the-best-squad  \n[2] https:\/\/www.kaggle.com\/ap1495\/fifa-19-classification-regression  \n[3] https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis  ","78b6c31a":"# # 3. Germany","4d4addd5":"Position RF: **Agility**, **Acceleration**, **Balance**, **BallControl**, Dribbling, LongShots  \nPosition ST: **Acceleration**, Jumping, Finishing, **Agility**, **Balance**, **BallControl** ","e2e9a910":"# 7. Logistic Regression","760facc9":"There are 548 players in top teams of europe. ","9fd2a93d":"2. Height vs Overall"}}