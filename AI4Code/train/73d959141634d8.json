{"cell_type":{"f40b1574":"code","feb1d94c":"code","bf89fe59":"code","0670fb5c":"code","1fac1c05":"code","53d7ff4f":"code","329897b7":"code","71da6022":"code","3810befb":"code","be56fe06":"code","5074e6cf":"code","18ad1721":"code","2e4696e2":"code","625ba989":"code","51d1ab6b":"code","45eb798e":"code","234c48ea":"code","f459dc18":"code","a32a8f08":"code","69ba8879":"code","2a7e1fd6":"code","11f1d162":"code","a464aadc":"code","f08d2380":"code","bb3feba2":"code","c84b2d3c":"code","8fda2631":"code","65a9a993":"code","c97444bd":"code","dc9eefe1":"code","d6aadf63":"code","09f5f783":"code","154379ff":"code","5d5f0c40":"code","b12571b4":"code","43764854":"code","f8d24e18":"markdown","1188b7d3":"markdown","38fa17af":"markdown","df8b00e1":"markdown","a2d35450":"markdown","31feed20":"markdown","164ed3e3":"markdown","4544f3db":"markdown","7f271679":"markdown","02aa5e61":"markdown","b6d2e4eb":"markdown","ce199d0e":"markdown","ab85141e":"markdown","5b880772":"markdown"},"source":{"f40b1574":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\n\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_colwidth', -1)\n\nimport os, sys\nimport re\n","feb1d94c":"books = pd.read_csv('..\/input\/book-recommendation-dataset\/Books.csv')\nbooks.head()","bf89fe59":"users = pd.read_csv('..\/input\/book-recommendation-dataset\/Users.csv')\nusers.head()","0670fb5c":"ratings = pd.read_csv('..\/input\/book-recommendation-dataset\/Ratings.csv')\nratings.head()","1fac1c05":"\nbooks.columns = ['ISBN', 'bookTitle', 'bookAuthor', 'yearOfPublication', 'publisher', 'imageUrlS', 'imageUrlM', 'imageUrlL']\n\nprint(books.shape)\nprint(users.shape)\nprint(ratings.shape)","53d7ff4f":"#dropping last three columns containing image URLs which will not be required for analysis\nbooks.drop(['imageUrlS', 'imageUrlM', 'imageUrlL'],axis=1,inplace=True)\n\n#checking data types of columns\nbooks.dtypes","329897b7":"\nbooks.yearOfPublication.describe()\n\n","71da6022":"#investigating the rows having 'DK Publishing Inc' as yearOfPublication\nbooks.loc[books.yearOfPublication == 'DK Publishing Inc',:]","3810befb":"#From above, it is seen that bookAuthor is incorrectly loaded with bookTitle, hence making required corrections\n#ISBN '0789466953'\nbooks.loc[books.ISBN == '0789466953','yearOfPublication'] = 2000\nbooks.loc[books.ISBN == '0789466953','bookAuthor'] = \"James Buckley\"\nbooks.loc[books.ISBN == '0789466953','publisher'] = \"DK Publishing Inc\"\nbooks.loc[books.ISBN == '0789466953','bookTitle'] = \"DK Readers: Creating the X-Men, How Comic Books Come to Life (Level 4: Proficient Readers)\"\n\n#ISBN '078946697X'\nbooks.loc[books.ISBN == '078946697X','yearOfPublication'] = 2000\nbooks.loc[books.ISBN == '078946697X','bookAuthor'] = \"Michael Teitelbaum\"\nbooks.loc[books.ISBN == '078946697X','publisher'] = \"DK Publishing Inc\"\nbooks.loc[books.ISBN == '078946697X','bookTitle'] = \"DK Readers: Creating the X-Men, How It All Began (Level 4: Proficient Readers)\"\n\n#rechecking\nbooks.loc[(books.ISBN == '0789466953') | (books.ISBN == '078946697X'),:]\n#corrections done","be56fe06":"#investigating the rows having 'Gallimard' as yearOfPublication\nbooks.loc[books.yearOfPublication == 'Gallimard',:]","5074e6cf":"#making required corrections as above, keeping other fields intact\nbooks.loc[books.ISBN == '2070426769','yearOfPublication'] = 2003\nbooks.loc[books.ISBN == '2070426769','bookAuthor'] = \"Jean-Marie Gustave Le Cl\u00c3?\u00c2\u00a9zio\"\nbooks.loc[books.ISBN == '2070426769','publisher'] = \"Gallimard\"\nbooks.loc[books.ISBN == '2070426769','bookTitle'] = \"Peuple du ciel, suivi de 'Les Bergers\"\n\n\nbooks.loc[books.ISBN == '2070426769',:]\n","18ad1721":"\nbooks.yearOfPublication=pd.to_numeric(books.yearOfPublication, errors='coerce')\n\nprint(sorted(books['yearOfPublication'].unique()))\n#Now it can be seen that yearOfPublication has all values as integers","2e4696e2":"#However, the value 0 is invalid and as this dataset was published in 2004, we have assumed the the years after 2006 to be \n#invalid keeping some margin in case dataset was updated thereafer\n#setting invalid years as NaN\nbooks.loc[(books.yearOfPublication > 2006) | (books.yearOfPublication == 0),'yearOfPublication'] = np.NAN\n\n#replacing NaNs with mean value of yearOfPublication\nbooks.yearOfPublication.fillna(round(books.yearOfPublication.mean()), inplace=True)","625ba989":"#rechecking\nbooks.yearOfPublication.isnull().sum()\n#No NaNs","51d1ab6b":"#resetting the dtype as int32\nbooks.yearOfPublication = books.yearOfPublication.astype(np.int32)","45eb798e":"#exploring 'publisher' column\nbooks.loc[books.publisher.isnull(),:]\n#two NaNs","234c48ea":"#investigating rows having NaNs\n#Checking with rows having bookTitle as Tyrant Moon to see if we can get any clues\nbooks.loc[(books.bookTitle == 'Tyrant Moon'),:]\n#no clues","f459dc18":"#Checking with rows having bookTitle as Finder Keepers to see if we can get any clues\nbooks.loc[(books.bookTitle == 'Finders Keepers'),:]\n","a32a8f08":"#checking by bookAuthor to find patterns\nbooks.loc[(books.bookAuthor == 'Elaine Corvidae'),:]\n#all having different publisher...no clues here","69ba8879":"#checking by bookAuthor to find patterns\nbooks.loc[(books.bookAuthor == 'Linnea Sinclair'),:]","2a7e1fd6":"#since there is nothing in common to infer publisher for NaNs, replacing these with 'other\nbooks.loc[(books.ISBN == '193169656X'),'publisher'] = 'other'\nbooks.loc[(books.ISBN == '1931696993'),'publisher'] = 'other'","11f1d162":"users.info()","a464aadc":"plt.figure(figsize=(10, 7))\nusers.Age.hist(bins=40, color='teal')\n#Age column has some invalid entries like nan, 0 and very high values like 100 and above","f08d2380":"#In my view values below 5 and above 90 do not make much sense for our book rating case...hence replacing these by NaNs\nusers.loc[(users.Age > 90) | (users.Age < 5), 'Age'] = np.nan\n\n#replacing NaNs with mean\nusers.Age = users.Age.fillna(users.Age.mean())\n\n#setting the data type as int\nusers.Age = users.Age.astype(np.int32)\n\n","bb3feba2":"plt.figure(figsize=(10, 7))\nsns.boxenplot(users.Age, color='teal')","c84b2d3c":"\nratings.shape","8fda2631":"#ratings dataset will have n_users*n_books entries if every user rated every item, this shows that the dataset is very sparse\nn_users = users.shape[0]\nn_books = books.shape[0]\nn_users * n_books","65a9a993":"ratings['Book-Rating'].unique()","c97444bd":"#ratings dataset should have books only which exist in our books dataset, unless new books are added to books dataset\nratings_new = ratings[ratings.ISBN.isin(books.ISBN)]\n\nratings.shape,ratings_new.shape\n#it can be seen that many rows having book ISBN not part of books dataset got dropped off","dc9eefe1":"#ratings dataset should have ratings from users which exist in users dataset, unless new users are added to users dataset\nratings = ratings[ratings['User-ID'].isin(users['User-ID'])]\n\nprint(ratings.shape)\nprint(ratings_new.shape)\n#no new users added, hence we will go with above dataset ratings_new (1031136, 3)\n\n(n_users), (n_books)","d6aadf63":"\nratings['Book-Rating'].unique()","09f5f783":"#Hence segragating implicit and explict ratings datasets\nratings_explicit = ratings_new[ratings_new['Book-Rating'] != 0]\nratings_implicit = ratings_new[ratings_new['Book-Rating'] == 0]\n\n","154379ff":"\nprint(ratings_new.shape)\nprint(ratings_explicit.shape)\nprint(ratings_implicit.shape)\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(12, 8))\nsns.countplot(data=ratings_explicit , x='Book-Rating', palette='rocket_r')\n\n","5d5f0c40":"\nratings_count = pd.DataFrame(ratings_explicit.groupby(['ISBN'])['Book-Rating'].sum())\ntop10 = ratings_count.sort_values('Book-Rating', ascending = False).head(10)\n\ntop10.merge(books, left_index = True, right_on = 'ISBN')\n\n#Given below are top 10 recommendations based on popularity. It is evident that books authored by J.K. Rowling are most popular","b12571b4":"#Similarly segregating users who have given explicit ratings from 1-10 and those whose implicit behavior was tracked\nusers_exp_ratings = users[users['User-ID'].isin(ratings_explicit['User-ID'])]\nusers_imp_ratings = users[users['User-ID'].isin(ratings_implicit['User-ID'])]","43764854":"#checking shapes\nprint(users.shape)\nprint(users_exp_ratings.shape)\nprint(users_imp_ratings.shape)","f8d24e18":"**publisher**","1188b7d3":"As it can be seen from below that there are some incorrect entries in this field. It looks like Publisher names  'DK Publishing Inc' and 'Gallimard' have been incorrectly loaded as yearOfPublication in dataset due to some errors in csv file Also some of the entries are strings and same years have been entered as numbers in some places","38fa17af":">*This type of recommendation is general and not user speciifc and usually used in public user UI in recommendation systems. If you are working on colaborative filtering or more advanced methods for your rec system or are handling cold start problem , meanwhile this type of recommendation (popularity based) recommandation can be used. *\n\nAt least now i found out i should take a look at  \"The Secret lif of Bees\" !","df8b00e1":"#### At this point , a simple popularity based recommendation system can be built based on count of user ratings for different books","a2d35450":"### **Top Popularity Based Recommendation**","31feed20":"### Data Cleaning","164ed3e3":"As quoted in the description of the dataset - BX-Book-Ratings contains the book rating information. Ratings are either explicit, expressed on a scale from 1-10 \nhigher values denoting higher appreciation, or implicit, expressed by 0","4544f3db":"### **TBD**","7f271679":"**Age**","02aa5e61":"It can be seen that higher ratings are more common amongst users and rating 8 has been rated highest number of times","b6d2e4eb":"\n\nThis notebook is about to understand data requirements , cleaning and simple popularirty based recommedation.","ce199d0e":"**Users**","ab85141e":"**yearOfPublication**","5b880772":"**Ratings Dataset**"}}