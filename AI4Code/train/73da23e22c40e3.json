{"cell_type":{"0c91f53d":"code","625680e0":"code","e4163df8":"code","bbdb829e":"code","2fe53f79":"markdown","953eaf18":"markdown"},"source":{"0c91f53d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","625680e0":"class Node:\n    def __init__(self, dataval=None):\n        self.dataval = dataval\n        self.nextval = None\n\nclass LinkedList:\n    def __init__(self):\n        self.headval = None\n    \n    def printlist(self):\n        node = self.headval\n        while node is not None:\n            if node.nextval is None:\n                print(f\"{node.dataval}, \")\n                break\n            print(f\"{node.dataval}, \", end=\"\")\n            node = node.nextval\n\n    def insertAtBegin(self,newval):\n        newnode = Node(newval)\n        newnode.nextval = self.headval\n        self.headval = newnode\n        \n    def insertAtEnd(self,newval):\n        newnode = Node(newval)\n        if self.headval is None:\n            self.headval = newnode\n            return\n        node = self.headval\n        while node.nextval:\n            node = node.nextval\n        node.nextval = newnode\n    \n    def insertAfterNode(self,node, newval):\n        # node is before newnode\n        # check if Node is None -> print \"error\" and return\n        if node is None:\n            print(\"Node does not exist - Error\")\n            return\n        \n        newnode = Node(newval)\n        newnode.nextval = node.nextval\n        node.nextval = newnode\n    \n    def removeNode(self,node2Remove):\n        if node2Remove is None:\n            print(\"Node does not exist - Error\")\n            return\n        node = self.headval\n        while node.nextval:\n            if node.nextval == node2Remove:\n                node.nextval = node2Remove.nextval\n                node2Remove.nextval = None\n                #node2Remove.dataval = None\n                return\n            node = node.nextval\n            \n    # Function to insert an array\n    def insertValuesAtEnd(self, data):\n        for i in data:\n            self.insertAtEnd(i)\n    \n    # Function to get length of the Linked List\n    def getLength(self):\n        node = self.headval\n        length = 0\n        if node is not None:\n            length += 1\n        while node.nextval is not None:\n            node = node.nextval\n            length += 1\n        return length","e4163df8":"mylist = LinkedList()\nmylist.insertValuesAtEnd([35,20,15,16,96,45,81,88,2,86,2,4,10,19,60,84,87,3,34,70])\nprint(mylist.getLength())\nmylist.printlist()","bbdb829e":"def bubblesortLL(linkedlist):\n    # get length\n    length = linkedlist.getLength()\n    \n    if length <= 1:\n        return linkedlist\n\n    for i in range(length-1):\n        node = linkedlist.headval\n        while node.nextval is not None:\n            # Conditions if the headval is in the comparison\n            if node == linkedlist.headval:\n                if node.dataval > node.nextval.dataval:\n                    linkedlist.headval = node.nextval\n                    helper1 = node.nextval.nextval\n                    node.nextval.nextval = node\n                    node.nextval = helper1\n              \n            else:\n                if node.dataval > node.nextval.dataval:\n                    helper1 = node.nextval.nextval\n                    node.nextval.nextval = node\n                    helper2 = node.nextval\n                    node.nextval = helper1\n                    \n                    prevNode = linkedlist.headval\n                    while prevNode.nextval is not None:\n                        if prevNode.nextval == node:\n                            prevNode.nextval = helper2\n                            break\n                        prevNode = prevNode.nextval\n                        \n            # Check if nextval is None, if it is then the loops ends\n            if node.nextval is not None:\n                node = node.nextval\n    return linkedlist\n                \n                \nbubblesortLL(mylist)\nmylist.printlist()\nprint(sorted([35,20,15,16,96,45,81,88,2,86,2,4,10,19,60,84,87,3,34,70]))","2fe53f79":"Bubble Sort for a single Linked List","953eaf18":"Bubblesort Function"}}