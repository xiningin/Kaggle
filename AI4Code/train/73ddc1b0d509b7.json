{"cell_type":{"4a6a0a20":"code","edf2462a":"code","e486d957":"code","a8bc7a66":"code","d7d4dca3":"code","0390716a":"code","b2e34ed5":"code","4ad27d66":"code","3fe2a4d6":"code","81649cc5":"code","92dee445":"code","62c39ada":"code","17db59d1":"code","186fde45":"code","87265229":"code","a0101358":"code","074075e5":"code","e1469f2d":"markdown","0e6865c3":"markdown","a15347a7":"markdown","4fd30a83":"markdown","559eb363":"markdown","ddf5032c":"markdown","0e64239b":"markdown"},"source":{"4a6a0a20":"import pandas as pd\nimport numpy as np","edf2462a":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nprint(\"train.shape\u306e\u5927\u304d\u3055:\",train.shape)\nprint(\"test.shape\u306e\u5927\u304d\u3055:\",test.shape)","e486d957":"#12\u306e\u7279\u5fb4\u91cf\u304c\u5b58\u5728\u3059\u308b\u4e8b\u3092\u78ba\u8a8d\ntrain.head()","a8bc7a66":"#11\u306e\u7279\u5fb4\u91cf\u304c\u5b58\u5728\u3059\u308b\u4e8b\u3092\u78ba\u8a8d\ntest.head()","d7d4dca3":"#pandas\u306edescribe()\u95a2\u6570\u3092\u8aad\u3093\u3067\u57fa\u672c\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d\ntrain.describe()\n#count\u306e\u884c\u3092\u78ba\u8a8d\n#Age\u304c\u672a\u8a2d\u5b9a\u306e\u884c\u6570\u304c\u3000\uff08891-714\uff09\uff1d177\u3000\u884c\u3042\u308b","0390716a":"test.describe()\n#count\u306e\u884c\u3092\u78ba\u8a8d\n#Age\u304c\u672a\u8a2d\u5b9a\u306e\u884c\u6570\u304c\u3000\uff08418-332\uff09\uff1d\uff18\uff16\u3000\u884c\u3042\u308b\n#Fare\u304c\u672a\u8a2d\u5b9a\u306e\u884c\u6570\u304c\u3000\uff08418-417\uff09\uff1d1\u3000\u884c\u3042\u308b","b2e34ed5":"# \u2460\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndef kesson_table(df): \n        null_val = df.isnull().sum()\n        percent = 100 * df.isnull().sum()\/len(df)\n        kesson_table = pd.concat([null_val, percent], axis=1)\n        kesson_table_ren_columns = kesson_table.rename(\n        columns = {0 : '\u6b20\u640d\u6570', 1 : '%'})\n        return kesson_table_ren_columns\n\nprint(\"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u60c5\u5831\")\nkesson_table(train)","4ad27d66":"print(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u60c5\u5831\")\nkesson_table(test)","3fe2a4d6":"# \u2461\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u4e8b\u524d\u51e6\u7406\n# \u2461-(1) \u6b20\u640d\u30c7\u30fc\u30bf\u3092\u4ee3\u7406\u30c7\u30fc\u30bf\u306b\u5165\u308c\u66ff\u3048\u308b\n# \u300cCabin\u300d\u306f\u4e88\u6e2c\u30e2\u30c7\u30eb\u3067\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u300cAge\u300d\u3068\u300cEmbarked\u300d\u306e2\u3064\u306e\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u88dc\u5b8c\u3059\u308b\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306eAge\u306e\u6b20\u640d\u7b87\u6240\u306b\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306eAge\u306e\u4e2d\u592e\u5024\u3092\u4ee3\u5165\u3059\u308b\n# pandas.DataFrame.fillna() \u6b20\u640d\u5024\u3092\u5f15\u6570\u306e\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\ntrain[\"Age\"] = train[\"Age\"].fillna(train[\"Age\"].median())\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306eEmbarked\u306e\u6b20\u640d\u7b87\u6240\u306b\u3001S\u3092\u4ee3\u5165\u3059\u308b\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\n\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u3066\u6b20\u640d\u304c\u306a\u304f\u306a\u3063\u305f\u4e8b\u3092\u78ba\u8a8d(Cabin\u306f\u9664\u304f)\nkesson_table(train)","81649cc5":"# \u2461-(2) \u6587\u5b57\u5217\u30ab\u30c6\u30b4\u30ea\u5217\u30c7\u30fc\u30bf\u3092\u6570\u5b57\u3078\u5909\u63db\n# \u4e88\u60f3\u3067\u4f7f\u3046\u9805\u76ee\u3067\u6587\u5b57\u5217\u3092\u5024\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306f\u300cSex\u300d\u3068\u300cEmbarked\u300d\n# Sex\u306f\u300cmale\u300d\u300cfemale\u300d\u306e\uff12\u3064\u306e\u6587\u5b57\u5217\u5024\n# Embarked\u306f\u306f\u300cS\u300d\u300cC\u300d\u300cQ\u300d\u306e3\u3064\u306e\u6587\u5b57\u5217\u5024\u3000\u3053\u308c\u3089\u3092\u6570\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n\n# Sex\u306b\u3066male\u30920 female\u30921\u3000\u306b\u5909\u63db\ntrain[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\ntrain[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\n\n# Embarked\u306b\u3066S\u30920 C\u30921\u3000Q\u30922 \u306b\u5909\u63db\ntrain[\"Embarked\"][train[\"Embarked\"] == \"S\" ] = 0\ntrain[\"Embarked\"][train[\"Embarked\"] == \"C\" ] = 1\ntrain[\"Embarked\"][train[\"Embarked\"] == \"Q\"] = 2\n\n# \u6700\u521d\u306e10\u884c\u3092\u898b\u3066\u5909\u63db\u3055\u308c\u305f\u304b\u3092\u78ba\u8a8d\ntrain.head(10)","92dee445":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u304a\u3044\u3066\u3082\u540c\u69d8\u306b\u3001\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u4e8b\u524d\u51e6\u7406\u3092\u884c\u3046\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].median())\ntest[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\ntest[\"Sex\"][test[\"Sex\"] == \"female\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"] == \"C\"] = 1\ntest[\"Embarked\"][test[\"Embarked\"] == \"Q\"] = 2\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306fFare\u304c\u4e00\u3064\u6b20\u640d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e2d\u592e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\ntest.Fare[152] = test.Fare.median()\n\n# \u6700\u521d\u306e10\u884c\u3092\u898b\u3066\u5909\u63db\u3055\u308c\u305f\u304b\u3092\u78ba\u8a8d\ntest.head(10)","62c39ada":"# \u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u306f\"Pclass\",\"Age\",\"Sex\",\"Fare\", \"SibSp\", \"Parch\", \"Embarked\"\u3092\u4f7f\u7528\u3059\u308b\nfeatures_col = [\"Pclass\",\"Age\",\"Sex\",\"Fare\", \"SibSp\", \"Parch\", \"Embarked\"]\nfeatures = train[features_col].values\n# \u76ee\u7684\u5909\u6570\u3068\u3057\u3066\"Survived\"\u3092\u53d6\u5f97\ntarget = train[\"Survived\"].values","17db59d1":"# \u4e88\u6e2c\u30e2\u30c7\u30eb\uff08\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\uff09\u3092\u69cb\u7bc9\u3059\u308b\n# scikit-learn\u304b\u3089RandomForestClassifier\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u3059\u308b\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n#\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nparameters = {\n    \"n_estimators\":[i for i in range(10,100,10)],\n    \"criterion\":[\"gini\",\"entropy\"],\n    \"max_depth\":[6],\n    \"min_samples_split\": [12],\n    \"random_state\":[3],\n}\n#\u4ea4\u5dee\u691c\u8a3c+\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u308a\u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u691c\u7d22\nclf = GridSearchCV(RandomForestClassifier(), parameters, cv=5)\nclf.fit(features, target)","186fde45":"print(\"\u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf: {}\".format(clf.best_params_))\nprint(\"\u6700\u826f\u4ea4\u5dee\u691c\u8a3c\u30b9\u30b3\u30a2: {:.2f}\".format(clf.best_score_))\n# \u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf: {'criterion': 'gini', 'max_depth': 6, 'min_samples_split': 12, 'n_estimators': 50, 'random_state': 3}\n# \u6700\u826f\u4ea4\u5dee\u691c\u8a3c\u30b9\u30b3\u30a2: 0.82","87265229":"# \u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6539\u3081\u3066\u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n# \u6700\u826f\u30d1\u30e9\u30e1\u30fc\u30bf: {'criterion': 'gini', 'max_depth': 6, 'min_samples_split': 12, 'n_estimators': 50, 'random_state': 3}\n# public score:0.77990\nmy_tree = RandomForestClassifier(criterion='gini', max_depth=6, min_samples_split=12, n_estimators=50, random_state=3,)\nmy_tree.fit(features, target)","a0101358":"# \u300ctest\u300d\u306e\u8aac\u660e\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\ntest_features = test[features_col].values\n# \u300ctest\u300d\u306e\u8aac\u660e\u5909\u6570\u3092\u4f7f\u3063\u3066\u300cmy_tree\u300d\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\nmy_prediction = my_tree.predict(test_features)\n\n# \u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint(\"my_prediction\u306e\u5927\u304d\u3055\uff1a\",my_prediction.shape)\n#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\nprint(my_prediction)\n# \u2463\u4e88\u6e2c\u5024\u3092\u53d6\u5f97\u3057\u3066\u63d0\u51fa\u7528CSV\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n# \u5143\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089PassengerId\u3092\u53d6\u5f97\nPassengerId = np.array(test[\"PassengerId\"]).astype(int)\n# my_prediction(\u4e88\u6e2c\u30c7\u30fc\u30bf\uff09\u3068PassengerId\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078\u843d\u3068\u3057\u8fbc\u3080\nmy_submission_rfc = pd.DataFrame(my_prediction, PassengerId, columns = [\"Survived\"])\n# my_submission_rfc.csv\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\u3000\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30e9\u30d9\u30eb\u3068\u3057\u3066PassengerId\u3092\u6307\u5b9a\nmy_submission_rfc.to_csv(\"submission_rfc.csv\", index_label = [\"PassengerId\"])\nprint(my_submission_rfc.shape)","074075e5":"my_submission_rfc.head()","e1469f2d":"### \u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099(\u8aac\u660e\u5909\u6570\/\u76ee\u7684\u5909\u6570\u306e\u751f\u6210)","0e6865c3":"### \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3046","a15347a7":"## \u524d\u51e6\u7406","4fd30a83":"## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","559eb363":"## \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\/\u78ba\u8a8d","ddf5032c":"### GridSearchCV\u306b\u3088\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","0e64239b":"## Titanic - \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u7528\u3044\u305f\u5206\u6790\n\u5bfe\u8c61\u30b3\u30f3\u30da\uff1ahttps:\/\/www.kaggle.com\/c\/titanic  \n\u53c2\u8003\u8a18\u4e8b\uff1ahttps:\/\/www.codexa.net\/kaggle-titanic-beginner\/  "}}