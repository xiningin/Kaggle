{"cell_type":{"259c6277":"code","9f2933d2":"code","1bbb5691":"code","4c69a355":"code","dd5d3d82":"code","311e4efa":"code","c753cbb0":"code","ac4eeeee":"code","b5a8f19c":"code","b15bec2b":"code","b8eb96aa":"code","70391fea":"code","a2776182":"code","1c82e503":"code","259792ab":"code","2595548b":"code","f96201f3":"code","5f0433a7":"code","e8159898":"code","8ac38be4":"code","dc0599a3":"code","90195d79":"code","79a4b490":"code","07d4abc2":"code","a0063adc":"code","b0eb2c42":"code","17781642":"code","1d58d370":"code","ad55dba8":"markdown"},"source":{"259c6277":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f2933d2":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","1bbb5691":"df = pd.read_csv('\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\ndf.head()","4c69a355":"df.shape","dd5d3d82":"df.isnull().sum()","311e4efa":"df[\"Age\"].fillna((df[\"Age\"].mean()), inplace = True)\ndf[\"Height\"].fillna((df[\"Height\"].mean()), inplace = True)\ndf[\"Weight\"].fillna((df[\"Weight\"].mean()), inplace = True)","c753cbb0":"df['Medal'].fillna('No Medal', inplace = True)\ndf.head()","ac4eeeee":"df.isnull().sum()","b5a8f19c":"#Finding out the cities that have hosted Games\n#grouping by the cities based on unique year values and later we will be sorting the data based on\n#no. of occurance of each cities which hosted based on occurance\n\nCity = df.groupby('City').apply(lambda x:x['Year'].unique()).to_frame().reset_index()\nCity.columns=['City','Years']\nCity['Occurence']=[len(c) for c in City['Years']]\nCity.sort_values('Occurence',ascending=False)","b15bec2b":"#Finding out participation of Men and Women at the Olympic games\n\nprint('Total number of athletes in Olymics:',len(df.ID.unique()))\nprint('Number of female participants in 120 years:',len(df[df.Sex=='F']))\nprint('Number of male participants in 120 years:',len(df[df.Sex=='M']))","b8eb96aa":"df_summer = df[df[\"Season\"] == \"Summer\"]\ndf_summer.head()","70391fea":"#Participation of Men and Women in the Games over 120 years - Trend chart\n\nTrend = df_summer.groupby(['Sex','Year']).size().reset_index().pivot(columns='Sex', index='Year', values=0).reset_index()\nTrend.head()","a2776182":"# Create figure with secondary y-axis\n\n\nx = Trend[\"Year\"]\ny1 = Trend[\"F\"]\ny2 = Trend[\"M\"]\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(x = x, y = y1, mode = \"lines+markers\", name = \"Female\",\n                        line=dict(color='Blue', width=2)), secondary_y=False,)\nfig.add_trace(go.Scatter(x = x, y = y2, mode = \"lines+markers\", name = \"Male\",\n                        line=dict(color='Orange', width=2)), secondary_y=True,)\n\n# Add figure title\nfig.update_layout(\n    title_text=\"Number of men and women athelete over time\"\n)\n\n# Set x-axis title\nfig.update_layout(title=\"Variation in count of male and female players\",\n                 xaxis_title = \"Year\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"Female\", secondary_y=False)\nfig.update_yaxes(title_text=\"Male\", secondary_y=True)\nfig.show()","1c82e503":"fig = px.histogram(df, x=\"Season\", color=\"Sex\", barmode = \"group\", \n             color_discrete_map= {'M': 'Orange', 'F': 'Blue'},\n            )\nfig.update_layout(\n            title = \"Participation of male and female athelete in both season\",\n            yaxis_title = \"Athelete count\")","259792ab":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nx=sns.distplot(df['Age'].dropna(),color='Green')\nx.set_title('Age Distribution of Athletes',fontsize=16,fontweight=200)","2595548b":"h=sns.distplot(df['Height'].dropna(),color='Yellow')\nh.set_title('Height Distribution of Athletes',fontsize=16,fontweight=200)","f96201f3":"w=sns.distplot(df['Weight'].dropna(),color='Blue')\nw.set_title('Weight Distribution of Athletes',fontsize=16,fontweight=200)","5f0433a7":"noc = pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv')\nnoc.head(5)","e8159898":"data = pd.merge(df, noc, on='NOC', how='left')\ndata.head(5)","8ac38be4":"plt.figure(figsize=(15, 10))\ntopc=data.groupby('region')['Medal'].count().nlargest(10).reset_index()\nsns.barplot('region','Medal',data=topc)\nplt.title('Top Countries in Olympic Medals')\nplt.show()","dc0599a3":"India = data[(data['region']=='India')]\nmedals = India['Medal'].value_counts()\nmedals","90195d79":"India['Gold'] = India['Medal'].map({'Gold': 1, 'Bronze': 0,'Silver':0})\nIndia['Silver'] = India['Medal'].map({'Gold': 0, 'Bronze': 0,'Silver':1})\nIndia['Bronze'] = India['Medal'].map({'Gold': 0, 'Bronze': 1,'Silver':0})\ntotal_medals = India.groupby(['Year']).sum()","79a4b490":"total_medals.head()","07d4abc2":"total_medals= total_medals.fillna(0)\n\ntrace0 = go.Scatter(\n    x = total_medals.index,\n    y = total_medals['Gold'],\n    mode = 'lines',\n    name = 'GOLD')\n\ntrace1 = go.Scatter(\n    x = total_medals.index,\n    y = total_medals['Silver'],\n    mode = 'lines',\n    name = 'SILVER')\n\ntrace2 = go.Scatter(\n    x = total_medals.index,\n    y = total_medals['Bronze'],\n    mode = 'lines',\n    name = 'BRONZE')","a0063adc":"import plotly\nimport plotly.graph_objs as go\nplotly.offline.init_notebook_mode(connected=True)\n\ndata = [trace0, trace1, trace2]\n\nplotly.offline.iplot({\"data\": data})","b0eb2c42":"India_olympic_gold = df[(df.NOC == 'USA') & (df.Medal == 'Gold')]","17781642":"plt.figure(figsize=(10,9), facecolor='lavender')\n\nsns.scatterplot(df['Weight'], df['Height'])\nplt.title(\"Weight vs Height plot\")","1d58d370":"fig = px.scatter(df, x = \"Weight\", y = \"Height\", color = \"Sport\")\n\nfig.update_layout(title = \"Distribution of height and weight according to sport\")\nfig.show()","ad55dba8":"![](https:\/\/www.ipwatchdog.com\/wp-content\/uploads\/2021\/03\/olympic-scaled.jpg)"}}