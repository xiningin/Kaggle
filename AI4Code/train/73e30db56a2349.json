{"cell_type":{"2a1a8f4b":"code","d84ee0e3":"code","c4ec6d7d":"code","58a3b4b3":"code","42f9f2a5":"code","c9f87f8b":"code","d6d1c5b9":"code","651cbc12":"code","b068e123":"code","88153574":"code","b4975193":"code","0bd30773":"code","fc7a6ec5":"code","57b10b5c":"code","6f895d7a":"code","93d40907":"code","5a553c70":"code","ef78bb1c":"code","a93fbadd":"code","a492a3e5":"code","027f0f63":"code","c84b621f":"code","4d9c0cda":"code","e8d42c93":"code","d3a8c004":"code","5077a391":"code","94b873b5":"code","1399e4c6":"code","c81fff03":"code","888b308d":"code","22e1b578":"code","8be40aad":"code","ff1418b2":"code","eab12d5b":"code","d981b962":"code","c6368c1b":"code","5f1f75b1":"code","08629324":"code","b2570322":"code","70d536d5":"code","1653f5fc":"code","c27a9626":"code","a5b26ae2":"code","437b434f":"code","cb138bdc":"code","3e034f17":"code","ac116144":"code","849886e6":"code","dc64a5b5":"code","8a3ab009":"code","26fde61c":"code","0096f509":"code","914e5aeb":"code","73ef1b5e":"code","a6c5654a":"code","5b915cd9":"code","39272f35":"code","5550aae0":"code","00f7d795":"code","5d9214e9":"code","97458e22":"code","fccafbd4":"code","688ae6ff":"code","3e3c8494":"code","b23adf43":"code","8707ff89":"code","e0283828":"code","9132c2a7":"code","cd9a5cec":"code","1b244c46":"code","f4e11d45":"code","3db391df":"code","62523407":"code","dc78d414":"markdown","872081b6":"markdown","c8862c32":"markdown","e63a789c":"markdown"},"source":{"2a1a8f4b":"import pandas as pd\n","d84ee0e3":"ls ..\/input\/house-prices-advanced-regression-techniques\/","c4ec6d7d":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_sample = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","58a3b4b3":"df_sample","42f9f2a5":"df_test","c9f87f8b":"df_train","d6d1c5b9":"x_train = df_train['MSSubClass']\ny_train = df_train['SalePrice']","651cbc12":"x_train = x_train.values.reshape(-1,1)\ny_train = y_train.values.reshape(-1,1)","b068e123":"# \u30e2\u30c7\u30eb\u306e\u6e96\u5099\nfrom sklearn.linear_model import LinearRegression as LR\n\nmodel = LR()\n","88153574":"# \u30e2\u30c7\u30eb\u4f5c\u6210\nmodel.fit(x_train,y_train)","b4975193":"# \u691c\u8a3c\nmodel.score(x_train,y_train)","0bd30773":"x_test = df_test['MSSubClass']\nx_test = x_test.values.reshape(-1,1)","fc7a6ec5":"# \u4e88\u6e2c\npred = model.predict(x_test)\nprint(pred)","57b10b5c":"# \u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\ndf_sample['SalePrice'] = pred","6f895d7a":"df_sample.head()","93d40907":"df_sample.to_csv('submit2.csv', index = None)","5a553c70":"ls ","ef78bb1c":"from matplotlib import pyplot as plt\n","a93fbadd":"fig,ax = plt.subplots(1,1,figsize=(9,6))\ndf_train.plot.scatter(x = \"MSSubClass\", y = \"SalePrice\", ax = ax)\n\nax.spines[\"bottom\"].set_color(\"red\")\nax.spines[\"left\"].set_color(\"red\")\n[i.set_color(\"red\") for i in plt.gca().get_xticklabels()]\n[i.set_color(\"red\") for i in plt.gca().get_yticklabels()]\nax.set_xlabel(\"x-label\", color=\"red\")\nax.set_ylabel(\"y-label\", color=\"red\")","a492a3e5":"#\u30ab\u30e9\u30e0\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\ndf_train.columns.values\n","027f0f63":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index","c84b621f":"fig,ax = plt.subplots(len(numerical_feats),1,figsize=(6,9*len(numerical_feats)))\n\nfor index, column in enumerate(numerical_feats):\n    df_train.plot.scatter(x = column, y = \"SalePrice\", ax = ax[index])","4d9c0cda":"#1stFlrSF\u3067\u3084\u3063\u3066\u307f\u308b\nx_train = df_train[\"1stFlrSF\"]\ny_train = df_train[\"SalePrice\"]","e8d42c93":"x_train = x_train.values.reshape(-1,1)\ny_train = y_train.values.reshape(-1,1)","d3a8c004":"from sklearn.linear_model import LinearRegression as LR\nmodel = LR()","5077a391":"model.fit(x_train,y_train)","94b873b5":"model.score(x_train,y_train)","1399e4c6":"x_test = df_test[\"1stFlrSF\"]\nx_test = x_test.values.reshape(-1,1)","c81fff03":"pred = model.predict(x_test)\nprint(pred)","888b308d":"df_sample[\"SalePrice\"] = pred","22e1b578":"df_sample.head()","8be40aad":"df_sample.to_csv(\"submit3.csv\",index = None)","ff1418b2":"ls","eab12d5b":"#\u91cd\u56de\u5e30\u3067\u3084\u3063\u3066\u307f\u308b\uff1a\u7279\u5fb4\u91cf\u306e\u62bd\u51fa\u3092\u3001\u30b0\u30e9\u30d5\u306e\u6307\u6a19\u304b\u3089\u62bd\u51fa\u3057\u3088\u3046.\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b\nimport numpy as np","d981b962":"#1stFlrSF\u3067\u3084\u3063\u3066\u307f\u308b\nx_train = df_train[\"1stFlrSF\"]\ny_train = df_train[\"SalePrice\"]","c6368c1b":"x = np.corrcoef(x_train, y_train)","5f1f75b1":"x","08629324":"#2\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u8a08\u7b97\u30d1\u30bf\u30fc\u30f3(x_train*x_train*, x_train*y_train, y_train*x_train, y_train*y_train)\u306e\u8a08\u7b97\u7d50\u679c\u304c\u51fa\u3066\u3044\u308b\ncolumn_list = []\nfor index, column in enumerate(numerical_feats):\n    x_train = df_train[column]\n    cor = np.corrcoef(x_train, y_train)\n    if cor[0][1] > 0.6:\n        column_list.append(column)\ncolumn_list.remove(\"SalePrice\")  \nprint(column_list)\n#         print(\"%s %s\" % (column, cor[0][1], ))","b2570322":"# \u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u4f5c\u6210\nx1 = df_train[column_list]\nprint(x1)","70d536d5":"model.fit(x1,y_train)","1653f5fc":"model.score(x1,y_train)","c27a9626":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\nx1_test = df_test[column_list]\nx1_test.describe()","a5b26ae2":"# \u6b20\u640d\u5024\nprint(x1_test.isnull().sum())","437b434f":"# \u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\nx1_test[\"GarageCars\"] = x1_test[\"GarageCars\"].fillna(0)\nx1_test[\"GarageArea\"] = x1_test[\"GarageArea\"].fillna(x1_test[\"GarageArea\"].mean())\nx1_test[\"TotalBsmtSF\"] = x1_test[\"TotalBsmtSF\"].fillna(x1_test[\"TotalBsmtSF\"].mean())\nprint(x1_test.isnull().sum())","cb138bdc":"# \u4e88\u6e2c\npred = model.predict(x1_test)\nprint(pred)","3e034f17":"df_sample[\"SalePrice\"] = pred","ac116144":"df_sample.head()","849886e6":"# df_sample.to_csv('submit4.csv', index=None)","dc64a5b5":"ls","8a3ab009":"import seaborn as sns\n\n# SalePrice\u306e\u5bfe\u6570\u5024\u3092SalePrice_Log\u3068\u3057\u3066\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\ndf_train['SalePrice_Log'] = np.log(df_train['SalePrice'])\n\n# SalePrice_Log\u306e\u5206\u5e03\u3092\u78ba\u8a8d\nsns.distplot(df_train['SalePrice_Log']);\nprint(\"Skewness: %f\" % df_train['SalePrice_Log'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice_Log'].kurt())\n\n# SalePrice\u306e\u30c7\u30fc\u30bf\u3092\u524a\u9664\ndf_train.drop('SalePrice', axis= 1, inplace=True)","26fde61c":"# \u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u4f5c\u6210\nx2 = df_train[column_list]\ny_train = df_train['SalePrice_Log']\n\n# \u30e2\u30c7\u30eb\u306b\u5f53\u3066\u306f\u3081\u308b\nmodel.fit(x2,y_train)\nmodel.score(x2,y_train)","0096f509":"# \u6b20\u640d\u5024\nprint(x1_test.isnull().sum())","914e5aeb":"# # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\n# x1_test = df_test[column_list]\n\n# \u6b20\u640d\u5024\n# print(x1_test.isnull().sum())\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\npred_log = model.predict(x1_test)\nprint(pred_log)","73ef1b5e":"# \u4e88\u6e2c\u7d50\u679c\u306e\u5bfe\u6570\u3092\u5916\u3059\npred = np.exp(pred_log)\nprint(pred)","a6c5654a":"## \u524d\u56de\u306epred\n#[113457.50326472 165325.40168124 157177.04111327 ... 151715.3795335\n#  92258.21232847 240735.6592944 ]","5b915cd9":"df_sample[\"SalePrice\"] = pred\ndf_sample.head()\n# df_sample.to_csv('submit5.csv', index=None)","39272f35":"# df_sample.to_csv('submit5.csv', index=None)","5550aae0":"ls\n","00f7d795":"# setting the number of cross validations used in the Model part \nnr_cv = 5\n\n# target used for correlation \nuse_log_val = True\nif use_log_val:\n    target = 'SalePrice_Log'\nelse:\n    target = 'SalePrice'\n    \n# only columns with correlation above this threshold value\nmin_val_corr = 0.4","5d9214e9":"def plot_corr_matrix(df, nr_c, targ) :\n    \"\"\"\n    \u76f8\u95a2\u4fc2\u6570\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u53ef\u8996\u5316\u3059\u308b\n    \n    Parameters\n    ----------\n    df: DataFrame\n    nr_c: \u8aac\u660e\u5909\u6570\u306e\u30ab\u30e9\u30e0\u306e\u6570\n    targ: \u76ee\u7684\u5909\u6570\u306e\u30ab\u30e9\u30e0\n    \"\"\"\n    \n    corr = df.corr()\n    corr_abs = corr.abs()\n    cols = corr_abs.nlargest(nr_c, targ)[targ].index\n    cm = np.corrcoef(df[cols].values.T)\n\n    plt.figure(figsize=(nr_c\/1.5, nr_c\/1.5))\n    sns.set(font_scale=1.25)\n    sns.heatmap(cm, linewidths=1.5, annot=True, square=True, \n                fmt='.2f', annot_kws={'size': 10}, \n                yticklabels=cols.values, xticklabels=cols.values\n               )\n    plt.show()","97458e22":"# \u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u304c\u9ad8\u3044\u8aac\u660e\u5909\u6570\u3092\u7528\u3044\u3066\u76f8\u95a2\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\nnr_feats = len(column_list)\nplot_corr_matrix(df_train, nr_feats, target)","fccafbd4":"df_train.columns","688ae6ff":"numerical_feats = df_train.dtypes[df_train.dtypes != \"object\"].index\n# print()\n\n#2\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u8a08\u7b97\u30d1\u30bf\u30fc\u30f3(x_train*x_train*, x_train*y_train, y_train*x_train, y_train*y_train)\u306e\u8a08\u7b97\u7d50\u679c\u304c\u51fa\u3066\u3044\u308b\ncolumn_list = []\nfor index, column in enumerate(numerical_feats):\n    x_train = df_train[column]\n    cor = np.corrcoef(x_train, y_train)\n    if cor[0][1] > 0.4:\n        column_list.append(column)\ncolumn_list.remove(\"SalePrice_Log\")  \nprint(column_list)\n#         print(\"%s %s\" % (column, cor[0][1], ))","3e3c8494":"# \u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u304c\u9ad8\u3044\u8aac\u660e\u5909\u6570\u3092\u7528\u3044\u3066\u76f8\u95a2\u884c\u5217\u3092\u4f5c\u6210\u3059\u308b\nnr_feats = len(column_list)\nplot_corr_matrix(df_train, nr_feats, target)","b23adf43":"# \u6b20\u640d\u5024\nprint(df_train[column_list].isnull().sum())","8707ff89":"# \u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u4f5c\u6210\nx3 = df_train[column_list]\ny_train = df_train['SalePrice_Log']\n\n# \u30e2\u30c7\u30eb\u306b\u5f53\u3066\u306f\u3081\u308b\nmodel.fit(x3,y_train)\nmodel.score(x3,y_train)","e0283828":"# # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\nx1_test = df_test[column_list]","9132c2a7":"# \u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\nx1_test[\"GarageCars\"] = x1_test[\"GarageCars\"].fillna(0)\nx1_test[\"GarageArea\"] = x1_test[\"GarageArea\"].fillna(x1_test[\"GarageArea\"].mean())\nx1_test[\"TotalBsmtSF\"] = x1_test[\"TotalBsmtSF\"].fillna(x1_test[\"TotalBsmtSF\"].mean())\nprint(x1_test.isnull().sum())\n\n# print(df_test[column_list].isnull().sum())","cd9a5cec":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\npred_log = model.predict(x1_test)\nprint(pred_log)","1b244c46":"# \u4e88\u6e2c\u7d50\u679c\u306e\u5bfe\u6570\u3092\u5916\u3059\npred = np.exp(pred_log)\nprint(pred)","f4e11d45":"# \u524d\u56de\n#[115831.95543588 150781.73650601 148078.82504589 ... 144007.94295073\n# 102961.1784232  233494.17262556]","3db391df":"df_sample[\"SalePrice\"] = pred\ndf_sample.head()\ndf_sample.to_csv('submit6.csv', index=None)","62523407":"ls","dc78d414":"###\u8aac\u660e\u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b","872081b6":"\n\u30fb\u7279\u5fb4\u91cf\u5897\u3084\u3059\n\u3000\u30fb\u76f8\u95a2\u4fc2\u6570\u306e\u95be\u5024\u4e0b\u3052\u308b\n\u3000\u30fb\u30ab\u30c6\u30b4\u30ea\u30fb\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u5897\u3084\u3059(\u6570\u5024\u578b\u3078\u306e\u524d\u51e6\u7406\u304c\u5fc5\u8981)\u2605\n\u30fb\u7279\u5fb4\u91cf\u6e1b\u3089\u3059","c8862c32":"### \u6570\u5024\u578b\u30c7\u30fc\u30bf\u306e\u95be\u50240.4","e63a789c":"## \u65b9\u5411\u6027\n#1)\u76ee\u7684\u5909\u6570\u306e\u5bfe\u6570\u3092\u53d6\u3063\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n#2)\u7d50\u679c\u304b\u3089\u30ed\u30b0\u3092\u5916\u3059"}}