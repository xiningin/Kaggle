{"cell_type":{"adb15098":"code","acbf9c99":"code","168897a8":"code","2e3e6f17":"code","3e252942":"code","6a17aec5":"code","b80ad30c":"code","a0cdfe80":"code","2b270dff":"code","edc63525":"code","d6ed6c66":"code","c6aa6789":"code","f3c28d2a":"code","a4e47f0e":"code","bf4dd537":"code","36c2bef4":"code","054644fa":"code","f592c345":"code","8f9738b8":"code","1bd08ea3":"markdown"},"source":{"adb15098":"from brown_clustering_yangyuan import *\nimport pandas as pd\nfrom nltk.tokenize import RegexpTokenizer","acbf9c99":"forum_posts = pd.read_csv(\"..\/input\/meta-kaggle\/ForumMessages.csv\")","168897a8":"# take first 100 forum posts\nsample_data = forum_posts.Message[:100].astype('str').tolist()\n\n# toeknize\ntokenizer = RegexpTokenizer(r'\\w+')\nsample_data_tokenized = [w.lower() for w in sample_data]\nsample_data_tokenized = [tokenizer.tokenize(i) for i in sample_data_tokenized]","2e3e6f17":"corpus = Corpus(sample_data_tokenized, 0.001)\nclustering = BrownClustering(corpus, 6)\nclustering.train()","3e252942":"clustering.get_similar('kaggle')","6a17aec5":"clustering.get_similar(\"error\")","b80ad30c":"! pip install git+https:\/\/github.com\/LIAAD\/yake","a0cdfe80":"import yake","2b270dff":"# take keywords for each post & turn them into a text string \"sentence\"\nsimple_kwextractor = yake.KeywordExtractor()\n\n\n# create empty list to save our \"sentnecs\" to\nsentences = []\n\n# subsample forum posts\nsample_posts = forum_posts.Message[-1000:].astype(str)\n\nfor post in sample_posts:\n    post_keywords = simple_kwextractor.extract_keywords(post)\n    \n    sentence_output = \"\"\n    for word, number in post_keywords:\n        sentence_output += word + \" \"\n    \n    sentences.append(sentence_output)\n\n\n# use the sentences as input for brown clustering","edc63525":"tokenizer = RegexpTokenizer(r'\\w+')\nsample_data_tokenized = [w.lower() for w in sentences]\nsample_data_tokenized = [tokenizer.tokenize(i) for i in sample_data_tokenized]","d6ed6c66":"corpus = Corpus(sample_data_tokenized, 0.001)\nclustering = BrownClustering(corpus, 3)\nclustering.train()","c6aa6789":"# output is word + mutal information with provided word\nclustering.get_similar('kaggle')","f3c28d2a":"clustering.get_similar('error')","a4e47f0e":"clustering.get_similar('deadline')","bf4dd537":"clustering.get_similar('submission')","36c2bef4":"len(clustering._codes['kaggle'])","054644fa":"clustering.helper.get_cluster(0)","f592c345":"# so it looks like all the clustres have been concatenated to a single array\n# but they're in alphabetical order so we can use that to un-cat them \nmegacluster = clustering.helper.get_cluster(0)\n\n# create list with one sub list\ncluster_list = [[]] \nlist_index = 0\n\n# look at all words but last (since we compare each word\n# to the next word)\nfor i in range(len(megacluster) - 1):\n    if megacluster[i - 1] < megacluster[i]:\n        # add current word to current sublist\n        cluster_list[list_index].append(megacluster[i])\n    else:\n        # create a new sublist\n        cluster_list.append([])\n        list_index = list_index + 1\n        \n        # add current word\n        cluster_list[list_index].append(megacluster[i])","8f9738b8":"cluster_list[50:60]","1bd08ea3":"### Now let's try with keywords"}}