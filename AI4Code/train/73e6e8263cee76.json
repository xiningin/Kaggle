{"cell_type":{"83684f4a":"code","cc107687":"code","882e9ee3":"code","690e2a9f":"code","71f58d50":"code","a384ec83":"code","337f4fc8":"code","628bcae4":"code","c0a7a896":"code","5a41b6ff":"code","34acaaa3":"code","74ceff9a":"code","c491a9c7":"markdown","a3ec94b3":"markdown","511412ef":"markdown","bc9582bf":"markdown","5b7f8038":"markdown","992291ec":"markdown","908b5485":"markdown","ac897265":"markdown"},"source":{"83684f4a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","cc107687":"import glob\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfilelist = glob.glob('..\/input\/1056lab-bird-image-classification\/train\/*')\nclasses = []\nfor path in filelist:\n    species = path.split('\/')[4]\n    classes.append(species)\nclasses.sort()\nprint(classes)\n\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n)\n\nbatch_size = 32\ntrain_generator = train_datagen.flow_from_directory(\n    '\/kaggle\/input\/1056lab-bird-image-classification\/train\/',\n    target_size=(224, 224),\n    batch_size=batch_size,\n    classes=classes,\n    class_mode='categorical'\n)","882e9ee3":"from tensorflow.keras.layers.experimental import preprocessing\nfrom tensorflow.keras.models import Sequential\n\nimg_augmentation = Sequential(\n    [\n        \n    ],\n    name=\"img_augmentation\",\n)","690e2a9f":"from tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.layers import Input, GlobalAveragePooling2D, Dense, Dropout\nfrom tensorflow.keras.layers.experimental.preprocessing import CenterCrop\nfrom tensorflow.keras.models import Model\n\nbase_model = EfficientNetB0(weights='imagenet', include_top=False)\n#base_model.trainable = False\n\ninputs = Input(shape=(224, 224, 3))\nx = img_augmentation(inputs)\nx = base_model(x)\nx = GlobalAveragePooling2D()(x)\nx = Dense(512, activation='relu')(x)\nx = Dropout(rate=0.25)(x)\noutputs = Dense(len(classes), activation='softmax')(x)\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics='categorical_accuracy')\nmodel.summary()","71f58d50":"model.fit(train_generator, batch_size=batch_size, epochs=10)","a384ec83":"test_loss, test_acc = model.evaluate(train_generator, batch_size=batch_size)\nprint(f'Test loss: {test_loss:.5f}, Test accuracy {test_acc:.5f}')","337f4fc8":"import matplotlib.pyplot as plt\n\nimages, labels = next(train_generator)\nY_pred = model.predict(images)\npred = []\nfor y_pred in Y_pred:\n    class_no = np.argmax(y_pred)\n    pred.append(classes[class_no])\n\nfor i in range(4):\n    plt.figure()\n    plt.imshow(images[i])\n    plt.title('Label: '+classes[np.argmax(labels[i])]+'\\nPrediction: '+pred[i])\n    plt.axis('off')\n    plt.show()","628bcae4":"import os\nimport glob\n\ntest_data_dir = '\/kaggle\/input\/1056lab-bird-image-classification\/test'\nworking_dir = '\/kaggle\/working'\n\nif not os.path.exists(working_dir+'\/test'):\n    os.makedirs(working_dir+'\/test')\n    for c in classes:\n        os.makedirs(working_dir+f'\/test\/{c}')\npath_list = glob.glob(test_data_dir+'\/*.jpg')\nfor path in path_list:\n    filename = path.split('\/')[5]\n    src = path\n    dst = working_dir+f'\/test\/{classes[0]}\/{filename}'\n    os.symlink(src, dst)","c0a7a896":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\npredict_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n)\n\npredict_generator = predict_datagen.flow_from_directory(\n    '\/kaggle\/working\/test\/',\n    target_size=(224, 224),\n    batch_size=batch_size,\n    classes=classes,\n    class_mode='categorical',\n    shuffle=False\n)","5a41b6ff":"Y_pred = model.predict(predict_generator)\n\npred = []\nfor y_pred in Y_pred:\n    class_no = np.argmax(y_pred)\n    pred.append(classes[class_no])","34acaaa3":"submit_df = pd.read_csv('\/kaggle\/input\/1056lab-bird-image-classification\/sampleSubmission.csv')\nsubmit_df['species'] = pred\nsubmit_df.to_csv('submission.csv', index=False)\nsubmit_df","74ceff9a":"import matplotlib.pyplot as plt\n\nimages, labels = next(predict_generator)\nY_pred = model.predict(images)\npred = []\nfor y_pred in Y_pred:\n    class_no = np.argmax(y_pred)\n    pred.append(classes[class_no])\n\nfor i in range(4):\n    plt.figure()\n    plt.imshow(images[i])\n    plt.title('Label: '+classes[np.argmax(labels[i])]+'\\nPrediction: '+pred[i])\n    plt.axis('off')\n    plt.show()","c491a9c7":"# EfficientNet B0 for MNIST\nI add a average pooling layer and two fully connected layers to the EfficientNet B0.","a3ec94b3":"# Visualizing training data","511412ef":"# Image preprocessing and augmentation\nYou can change and\/or add some other methods to the list.\nSee [the API reference](https:\/\/keras.io\/api\/layers\/preprocessing_layers\/).","bc9582bf":"# Fine tuning","5b7f8038":"# ImageDataGenerator for test data","992291ec":"# Visualizaing test data","908b5485":"# Predicting","ac897265":"# ImageDataGenerator for training data"}}