{"cell_type":{"b02c0ca8":"code","c873b6ca":"code","766a0e8b":"code","3bade99d":"code","8cfc54c7":"code","e8779a00":"code","5d9caecd":"code","ca78ada5":"code","9e6c40a6":"code","48c73c80":"code","52d37e16":"markdown","b1bddbf7":"markdown","4b7afbec":"markdown","1202204b":"markdown","defc3d81":"markdown","4145f09f":"markdown","d2d3755c":"markdown","394aea4a":"markdown","2040c3af":"markdown","3fa17a67":"markdown"},"source":{"b02c0ca8":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \n\nprint(f'numpy ver : {np.__version__}')\nprint(f'pandas ver : {pd.__version__}')\nprint(f'matplotlib ver : {mpl.__version__}')\n\nplt.rcParams['figure.dpi'] = 150 # for high-resolution figure","c873b6ca":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndata.sample(3)","766a0e8b":"cnt_tmp = data.groupby('type')['release_year'].value_counts().unstack().fillna(0).astype(int).T\nmovie_count, tvshow_count = cnt_tmp['Movie'], cnt_tmp['TV Show']\n\n# Better than this way\n# movie_count = data[data['type']=='Movie']['release_year'].value_counts().sort_index()\n# tvshow_count = data[data['type']=='TV Show']['release_year'].value_counts().sort_index()\n","3bade99d":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import AutoMinorLocator, MultipleLocator\n\nnp.random.seed(19680801)\n\nX = np.linspace(0.5, 3.5, 100)\nY1 = 3+np.cos(X)\nY2 = 1+np.cos(1+X\/0.75)\/2\nY3 = np.random.uniform(Y1, Y2, len(X))\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(1, 1, 1, aspect=1)\n\n\ndef minor_tick(x, pos):\n    if not x % 1.0:\n        return \"\"\n    return f\"{x:.2f}\"\n\nax.xaxis.set_major_locator(MultipleLocator(1.000))\nax.xaxis.set_minor_locator(AutoMinorLocator(4))\nax.yaxis.set_major_locator(MultipleLocator(1.000))\nax.yaxis.set_minor_locator(AutoMinorLocator(4))\nax.xaxis.set_minor_formatter(minor_tick)\n\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\n\nax.tick_params(which='major', width=1.0)\nax.tick_params(which='major', length=10)\nax.tick_params(which='minor', width=1.0, labelsize=10)\nax.tick_params(which='minor', length=5, labelsize=10, labelcolor='0.25')\n\nax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10)\n\nax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10)\nax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\")\n\n\nax.set_title(\"Anatomy of a figure (Text Ver.)\", fontsize=20, verticalalignment='bottom')\nax.set_xlabel(\"X axis label\")\nax.set_ylabel(\"Y axis label\")\n\nax.legend()\n\n\ndef circle(x, y, radius=0.15):\n    from matplotlib.patches import Circle\n    from matplotlib.patheffects import withStroke\n    circle = Circle((x, y), radius, clip_on=False, zorder=10, linewidth=1,\n                    edgecolor='black', facecolor=(0, 0, 0, .0125),\n                    path_effects=[withStroke(linewidth=5, foreground='w')])\n    ax.add_artist(circle)\n\n\ndef text(x, y, text):\n    ax.text(x, y, text, backgroundcolor=\"white\",\n            ha='center', va='top', weight='bold', color='blue')\n\n\n# Minor tick\ncircle(0.50, -0.10)\ntext(0.50, -0.32, \"Minor tick label\")\n\ncircle(-0.15, 3.00)\ntext(-0.15, 2.80, \"Major tick label\")\n\n# X Label\ncircle(1.80, -0.27)\ntext(1.80, -0.45, \"X axis label\")\n\n# Y Label\ncircle(-0.27, 1.80)\ntext(-0.27, 1.6, \"Y axis label\")\n\n# Title\ncircle(1.60, 4.13)\ntext(1.60, 3.93, \"Title\")\n\n# Legend\ncircle(3.70, 3.80)\ntext(3.70, 3.60, \"Legend\")\n\n\nplt.show()","8cfc54c7":"# Default Setting\nfig, ax = plt.subplots(1, 1, figsize=(15, 7))\nax.bar(movie_count.index, movie_count, label='Movie') # Label for legend\nax.bar(tvshow_count.index, tvshow_count, bottom=movie_count, label='TV Show')\nax.set_title('Netflix Movie\/TV Show per Years') # Title\nax.set_xlabel('Release Year') # Label\nax.set_ylabel('# of Movies\/Tv Shows')\nax.legend() # Legend\nplt.show()","e8779a00":"# Default Setting for Text\nfig = plt.figure(figsize=(5, 5))\nax = fig.add_subplot(111)\nax.text(0.5, 0.5, s='Default')\n\n\n# for remove spine and ticks and highlighting text\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_visible(False)\n    \nax.set_xticks([])\nax.set_yticks([])\nplt.show()","5d9caecd":"# Size\nfig = plt.figure(figsize=(5, 5))\nax = fig.add_subplot(111)\n\nfor idx, size in enumerate( ['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'], 1):\n    ax.text(0.5, 1-0.12*idx, size,\n           size=size)\n\n\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_visible(False)\n    \nax.set_xticks([])\nax.set_yticks([])\nplt.show()","ca78ada5":"# Size\nfig = plt.figure(figsize=(5, 5))\nax = fig.add_subplot(111)\n\nfor idx, weight in enumerate(['light', 'normal', 'medium', 'semibold', 'bold', 'heavy', 'black'], 1):\n    ax.text(0.5, 1-0.12*idx, weight,\n           weight=weight)\n\n\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_visible(False)\n    \nax.set_xticks([])\nax.set_yticks([])\nplt.show()","9e6c40a6":"# Family\nfig = plt.figure(figsize=(5, 5))\nax = fig.add_subplot(111)\n\nfor idx, family in enumerate(['serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'], 1):\n    ax.text(0.5, 1-0.15*idx, family,\n           family=family)\n\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_visible(False)\n    \nax.set_xticks([])\nax.set_yticks([])\nplt.show()","48c73c80":"# Style\nfig = plt.figure(figsize=(5, 5))\nax = fig.add_subplot(111)\n\nfor idx, style in enumerate(['normal', 'italic', 'oblique'], 1):\n    ax.text(0.5, 1-0.15*idx, style,\n           style=style)\n\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_visible(False)\n    \nax.set_xticks([])\nax.set_yticks([])\nplt.show()\n","52d37e16":"## Text Properties\n","b1bddbf7":"In information visualization, text can be broadly classified as follows.\n\n- **Title**\n    - Text that can describe the topic of the visualization\n    - In general, there is only one title, and if there are more than one subplot, it can be classified into the title of `subplot` and the title of `figure`\n- **Label**\n    - Provide information about the axis\n    - `X-axis` and `Y-axis` in Cartesian coordinate system\n    - In polar coordinates, the r and theta axes\n- **Tick(ticklabel)**\n    - Provides scale information for the axis\n- **Legend**\n    - Supplementary information used to classify two or more different data in a graph\n- **Text (Annotation)**\n    - Added explanation for other visualizations\n    - There is a method of adding text at a desired point or by using pointing\n\n\nIn matplotlib, the following APIs are supported.\n\n|pyplot API|Objecte-oriented API|description|\n|-|-|-|\n|`suptitle`|`suptitle`|title of figure|\n|`title`|`set_title`|title of subplot `ax`|\n|`xlabel`|`set_xlabel`|x-axis label|\n|`ylabel`|`set_ylabel`|y-axis label|\n|`figtext`|`text`|figure text|\n|`text`|`text`|Axes taext|\n|`annoatate`|`annotate`|Axes annotation with arrow|\n    \nLet's draw a basic plot with various text information added.","4b7afbec":"## Reference\n\n- https:\/\/matplotlib.org\/stable\/tutorials\/text\/text_props.html\n- https:\/\/matplotlib.org\/stable\/gallery\/text_labels_and_annotations\/fonts_demo.html\n","1202204b":"\n### Advanced\n\n- `transform`\n- `bbox`\n    - `clip_box` \n    - `clip_on`\n    - `clip_path`\n\n- `picker` : for event handling\n\n\n\n\n","defc3d81":"## The goal of this notebook\n\nMany people working with data don't use additional text other than basic text when working with plots.\n\nHowever, text is the easiest and most effective tool humans can understand.\n\nThis notebook introduces you to how to use text effectively and neatly.","4145f09f":"\n### Details\n\n- `color`\n- `linespacing`\n- `backgroundcolor`: \n- `alpha`\n- `zorder`\n- `visible`\n","d2d3755c":"### Font Components\n\nEasy to Use Properties\n\n- `size` or `fontsize`\n    - `xx-small`, `x-small`, `small`, `medium`, `large`, `x-large`, `xx-large`\n- `weight` or `fontweight`\n    - `light`, `normal`, `medium`, `semibold`, `bold`, `heavy`, `black`\n- `family` \n    - `serif`, `sans-serif`, `cursive`, `fantasy`, `monospace`\n- `style` or `fontstyle` \n    - `normal`, `italic`, `oblique`\n\n---\n\n- `variant`\n- `stretch`\n- `name` or `fontname`\n- `fontproperties`\n","394aea4a":"\n### Alignment\n\n- `ha`\n- `va`\n- `rotation`\n- `multialignment`\n\n\n","2040c3af":"## Basic Setting for Explanation","3fa17a67":"To creat a barplot from raw data, you need to preprocessing what to draw.\n\n\nIn this notebook, I want to show you trends by year through `Netflix Movie\/TV Show per Years`"}}