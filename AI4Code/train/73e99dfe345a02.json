{"cell_type":{"29104cd0":"code","b8177d93":"code","983696af":"code","515cb535":"code","0bb0800a":"code","b0412b0d":"code","1f5ef1d6":"code","58c4572d":"code","fcbbb413":"code","958e7321":"code","32f74e04":"code","ed8b18dd":"code","43c5927b":"code","ebb60a16":"code","5bf3f016":"code","7289a958":"code","8dfaa549":"code","112cc71f":"code","cd4a6496":"code","ef796c06":"code","9f7bf1d2":"code","1ab8f4f3":"code","41642a67":"code","9fff20e5":"code","2a0b07b1":"code","6133cc96":"code","09e4adf8":"code","841031e8":"code","46bdce56":"code","f9442a5e":"code","98786dd4":"code","7135419f":"code","c7e8d764":"code","ff773643":"code","f57b84d5":"code","a9d999db":"code","343442df":"code","ae3c745f":"code","e597074d":"code","b9f07954":"code","d061ec4d":"code","9f0267ff":"code","0569a591":"code","eee80392":"code","f03fe742":"code","802bfe11":"code","23ee9609":"code","aa8759d7":"code","fdced16c":"code","2e91d894":"code","5f16cf44":"code","1288d3eb":"code","47853c6c":"code","891c7b99":"code","b93c7d21":"code","e4982c00":"code","244a2d9d":"code","e593cfc8":"code","66de5add":"code","e331eb5f":"code","21b95d93":"code","65c144e0":"code","2a5cda60":"code","290e56de":"code","469d4909":"code","642d1c00":"code","930244e8":"code","25793139":"code","7e3c4e96":"code","20a4533e":"code","3e7fa731":"code","2a0f782f":"code","d16bfc99":"code","1dbc151b":"code","26712e59":"markdown","63b955a8":"markdown","06f15006":"markdown","1572aed7":"markdown","8aa8c0a0":"markdown","61ce760b":"markdown","9f2de410":"markdown","dc491b70":"markdown","547f2690":"markdown"},"source":{"29104cd0":"import pandas as pd\nimport numpy as np","b8177d93":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","983696af":"movies = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\ncredits = pd.read_csv ('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')","515cb535":"movies.head(2)","0bb0800a":"movies.shape","b0412b0d":"credits.head(2)","1f5ef1d6":"credits.shape","58c4572d":"credits.head(1)['crew'].values","fcbbb413":"# Merging two data sets on basic of \"title\" column\nmovies = movies.merge(credits,on='title')\nmovies.head(1)","958e7321":"movies.info()","32f74e04":"movies.columns","ed8b18dd":"#geners,id,keywords,Original_title,overview,cast,crew\nmovies = movies[['movie_id','title','overview','genres','keywords','cast','crew' ]]\nmovies.head(1)","43c5927b":"movies.isnull().sum()","ebb60a16":"movies.dropna(inplace=True)","5bf3f016":"movies.isnull().sum()","7289a958":"movies.duplicated().sum()","8dfaa549":"#checking the 'geners' columns\nmovies.iloc[0].genres","112cc71f":"#Rechanging the columns\n#'[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]'\n#['Action','Adventure','FFantacy','SciFi']","cd4a6496":"# convert this statment we use\n'[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]'","ef796c06":"import ast\nast.literal_eval('[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]')","9f7bf1d2":"def convert(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        L.append(i['name'])\n    return L","1ab8f4f3":"movies['genres'] = movies['genres'].apply(convert)","41642a67":"movies.head()","9fff20e5":"movies['keywords'] = movies['keywords'].apply(convert)","2a0b07b1":"movies.head()","6133cc96":"# we need only three  Actress from the columns\nmovies['cast'][0]","09e4adf8":"def convert3(obj):\n    L = []\n    counter = 0\n    for i in ast.literal_eval(obj):\n        if counter != 3:\n            L.append(i['name'])\n            counter+=1\n        else:\n            break\n    return L","841031e8":"movies['cast'].apply(convert3)","46bdce56":"movies['cast'] = movies['cast'].apply(convert3)","f9442a5e":"movies.head()","98786dd4":"movies['crew'][0]","7135419f":"# each column if job title is available print the diector name\ndef fetch_director(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n            break\n    return L","c7e8d764":"movies['crew'].apply(fetch_director)","ff773643":"movies['crew'] = movies['crew'].apply(fetch_director)","f57b84d5":"movies.head()","a9d999db":"movies['overview'][0]","343442df":"# changing the entire data to single column to a list\nmovies['overview'].apply(lambda x:x.split())","ae3c745f":"movies['overview'] = movies['overview'].apply(lambda x:x.split())","e597074d":"movies.head()","b9f07954":"movies['genres'].apply(lambda x:[i.replace(\" \",\"\")for i in x])","d061ec4d":"movies['genres'] = movies['genres'].apply(lambda x:[i.replace(\" \",\"\")for i in x])\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(\" \",\"\")for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(\" \",\"\")for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(\" \",\"\")for i in x])","9f0267ff":"movies.head()","0569a591":"# Creating all columns into single data set\nmovies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']","eee80392":"movies.head()","f03fe742":"# Creating a new data frame\nnew_df = movies[['movie_id','title','tags']]","802bfe11":"new_df","23ee9609":"# Converting 'tags' column strings to list","aa8759d7":"new_df['tags'][0]","fdced16c":"new_df['tags'].apply(lambda x:\" \".join(x))","2e91d894":"new_df['tags'] = new_df['tags'].apply(lambda x:\" \".join(x))","5f16cf44":"new_df['tags'][0]","1288d3eb":"# Converting all the data to lower format\nnew_df['tags'] = new_df['tags'].apply(lambda x:x.lower())","47853c6c":"new_df.head()","891c7b99":"import nltk\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()","b93c7d21":"def stem(text):\n    y = []\n    for i in text.split():\n        y.append(ps.stem(i))\n    \n    return \" \".join(y) ","e4982c00":"new_df['tags'][0]","244a2d9d":"new_df['tags'].apply(stem)","e593cfc8":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=5000,stop_words='english')","66de5add":"cv.fit_transform(new_df['tags']).toarray().shape","e331eb5f":"vectors = cv.fit_transform(new_df['tags']).toarray()","21b95d93":"vectors","65c144e0":"cv.get_feature_names()","2a5cda60":"len(cv.get_feature_names())","290e56de":"stem('in the 22nd century, a paraplegic marine is dispatched to the moon pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization. action adventure fantasy sciencefiction cultureclash future spacewar spacecolony society spacetravel futuristic romance space alien tribe alienplanet cgi marine soldier battle loveaffair antiwar powerrelations mindandsoul 3d samworthington zoesaldana sigourneyweaver jamescameron')","469d4909":"from sklearn.metrics.pairwise import cosine_similarity","642d1c00":"cosine_similarity(vectors)","930244e8":"#caliculating distance similarity b\/e each \ncosine_similarity(vectors).shape","25793139":"similarity = cosine_similarity(vectors)\nsimilarity","7e3c4e96":"#checking first mocie similarity\nsimilarity[0]","20a4533e":"# I need to display the by searching indexs as shown below\nnew_df[new_df['title'] == 'Avatar']","3e7fa731":"new_df[new_df['title'] == 'Avatar'].index[0]","2a0f782f":"# Sorting five list with similarities\nsorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6]","d16bfc99":"def recommend(movie):\n    movie_index = new_df[new_df['title'] == movie].index[0]\n    distances = similarity[movie_index]\n    movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]\n    \n    for i in movies_list:\n        print(new_df.iloc[i[0]].title)","1dbc151b":"recommend('Batman Begins')","26712e59":"# Caliculating the distance b\/w similaraties","63b955a8":"# Checking Null values and Removing","06f15006":"# Loading Data","1572aed7":"# Importing Modules","8aa8c0a0":"# Removing Space in the columns data set","61ce760b":"# Merging 2-DataSets","9f2de410":"# Removing un necessary columns in a data set","dc491b70":"# Creating Data Frames","547f2690":"# Converting 'tags' to Vectorization"}}