{"cell_type":{"148fee3e":"code","f2aa2622":"code","4925a378":"code","f2e6cf41":"code","bd9d748b":"code","eb7b0e49":"code","7b2f210d":"code","e852d9d5":"code","c8bcc2d7":"code","c3e57190":"code","5bbb6397":"code","30ccbf2c":"code","953f2f30":"code","e7207338":"markdown","86a20db4":"markdown","9edbdcff":"markdown","055d6b47":"markdown"},"source":{"148fee3e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQOdbj2wn63Q6h01rmkEoS04b_qNrnTVOaj4LZCKG3WfuU4wm1U',width=400,height=400)","f2aa2622":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nimport plotly.graph_objs as go\nimport plotly.offline as py\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4925a378":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# UrduNewsHeadlines.csv has 2174 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/urdu-news-headlines\/UrduNewsHeadlines.csv', delimiter='\t', nrows = nRowsRead)\ndf.dataframeName = 'UrduNewsHeadlines.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f2e6cf41":"df.head()","bd9d748b":"df.isnull().sum()","eb7b0e49":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(df['\u0642\u0648\u0645\u06cc'])","7b2f210d":"cnt_srs = df['\u0642\u0648\u0645\u06cc'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Blues',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Titles distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"\u0642\u0648\u0645\u06cc\")","e852d9d5":"df['\u0642\u0648\u0645\u06cc_length']=df['\u0642\u0648\u0645\u06cc'].apply(len)","c8bcc2d7":"plt.figure(figsize=(10,8))\nax=sns.countplot(df['\u0642\u0648\u0645\u06cc'])\nax.set_xlabel(xlabel=\"\u0642\u0648\u0645\u06cc\",fontsize=17)\nax.set_ylabel(ylabel='No. of \u0642\u0648\u0645\u06cc',fontsize=17)\nax.axes.set_title('Genuine No. of \u0642\u0648\u0645\u06cc',fontsize=17)\nax.tick_params(labelsize=13)","c3e57190":"sns.set(font_scale=1.4)\nplt.figure(figsize = (10,5))\nsns.heatmap(df.corr(),cmap='coolwarm',annot=True,linewidths=.5)","5bbb6397":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","30ccbf2c":"plotPerColumnDistribution(df, 6, 4)","953f2f30":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTBPArOEJG-bHbIjVNcwEu7mNzjI2WOfE2vVYIX8f0E1uZ7boH7',width=400,height=400)","e7207338":" Hindi and Urdu are generally understood in linguistic terms as two forms or dialects of a single language, Hindustani (or Hindi-Urdu), that are written in two different scripts: Devanagari (for Hindi) and a modified Perso-Arabic script (for Urdu). Both Modern Standard Hindi and Modern Standard Urdu are literary forms of the Dehlavi dialect of Hindustani. https:\/\/en.wikipedia.org\/wiki\/Hindi\u2013Urdu_controversy","86a20db4":"semanticscholar.org","9edbdcff":"asianstudies.unc.edu","055d6b47":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke"}}