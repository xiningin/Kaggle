{"cell_type":{"8aaefb52":"code","f9275806":"code","e4935b90":"code","41406515":"code","c4de55d6":"code","c22abb7a":"code","ca048368":"code","8a604250":"code","0bacbdc9":"markdown","3c5aacde":"markdown","d8052cdf":"markdown","399b09f1":"markdown","76eeb6c9":"markdown","6440f9c9":"markdown","4a200495":"markdown"},"source":{"8aaefb52":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_df.head()\n\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_df.head()","f9275806":"man = train_df.loc[train_df.Sex == \"male\"][\"Survived\"]\nman_survive = sum(man)\/len(man)\n\nwoman = train_df.loc[train_df.Sex == \"female\"][\"Survived\"]\nwoman_survive = sum(woman)\/len(woman)\n\nprint(\"Men's survive percent: {}\".format(man_survive * 100))\nprint(\"Women's survive percent: {}\".format(woman_survive * 100))","e4935b90":"cabin = train_df[[\"Cabin\", \"Survived\"]]\ncabin_non = cabin.loc[cabin.Cabin.isna() == True]\ncabin_not_non = cabin.loc[cabin.Cabin.isna() == False]\n\nnon_survive = sum(cabin_non[\"Survived\"]) \/ len(cabin_non)\nnot_non_survive = sum(cabin_not_non[\"Survived\"]) \/ len(cabin_not_non)\n\nprint(\"People Who don't have cabin survive percent: {}\".format(non_survive * 100))\nprint(\"People Who have cabin survive percent: {}\".format(not_non_survive * 100))","41406515":"test_df.at[test_df.Cabin.isna() == True, \"Cabin\"] = 1\ntest_df.at[test_df.Cabin.isna() == False,\"Cabin\"] = 0\ntrain_df.at[train_df.Cabin.isna() == True, \"Cabin\"] = 1\ntrain_df.at[train_df.Cabin.isna() == False, \"Cabin\"] = 0\n\ntest_df.head()","c4de55d6":"parch = train_df[[\"Parch\", \"Survived\"]]\nparch_non = parch.loc[parch.Parch == 0]\nparch_not_non = parch.loc[parch.Parch != 0]\n\nnon_survive = sum(parch_non[\"Survived\"]) \/ len(parch_non)\nnot_non_survive = sum(parch_not_non[\"Survived\"]) \/ len(parch_not_non)\n\nprint(\"People Who don't have cabin survive percent: {}\".format(non_survive * 100))\nprint(\"People Who have cabin survive percent: {}\".format(not_non_survive * 100))","c22abb7a":"embarked = train_df[[\"Embarked\", \"Survived\"]]\nc = embarked.loc[embarked.Embarked == \"C\"]\nq = embarked.loc[embarked.Embarked == \"Q\"]\ns = embarked.loc[embarked.Embarked == \"S\"]\n\nc_survive = sum(c[\"Survived\"]) \/ len(c)\nq_survive = sum(q[\"Survived\"]) \/ len(q)\ns_survive = sum(s[\"Survived\"]) \/ len(s)\n\nprint(\"C survive percent: {}\".format(c_survive * 100))\nprint(\"Q survive percent: {}\".format(q_survive * 100))\nprint(\"S survive percent: {}\".format(s_survive * 100))","ca048368":"average_age = sum(train_df.loc[train_df.Age.isna() == False][\"Age\"])\ntest_df.at[test_df.Age.isna() == True, \"Age\"] = average_age\ntrain_df.at[train_df.Age.isna() == True, \"Age\"] = average_age\n\ntest_df.at[test_df.Fare.isna() == True, \"Fare\"] = 0\ntrain_df.at[train_df.Fare.isna() == True, \"Fare\"] = 0","8a604250":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_df[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Embarked\"]\nX = pd.get_dummies(train_df[features])\nX_test = pd.get_dummies(test_df[features])\n\nmodel = RandomForestClassifier(criterion=\"entropy\",\n                               n_estimators=10,\n                               max_features=None,\n                               max_depth=5,\n                               min_samples_split=2,\n                               random_state=0)  # too many estimators and depth make overfitting models\nmodel.fit(X, y)\n\ntrain_predictions = model.predict(X)\ncorrect = 0\n\nfor i in range(len(X)):\n    if y[i] == train_predictions[i]:\n        correct += 1\nprint((correct \/ len(X)) * 100) \n\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)","0bacbdc9":"## Using Random Forest\n- `RandomForestClassifier`: For Using Random Forest Model","3c5aacde":"## Relation between surviving and Cabin","d8052cdf":"## Relation between surviving and Port of Embarkation","399b09f1":"## Relation between surviving and sex","76eeb6c9":"## Relation between surviving and Parch","6440f9c9":"# File Import\n- `numpy`: For Linear Algebra\n- `pandas`: For Data Processing\n- `matplotlib.pyplot`: For Data Visualization","4a200495":"## Fill NaN data of Cabin Column"}}