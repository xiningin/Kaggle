{"cell_type":{"08ed4e38":"code","38e0b063":"code","88e13408":"code","eef3bc00":"code","9934a233":"code","aff85049":"code","d11d5e6e":"code","4491f912":"code","324039d9":"code","7d29de1f":"code","7880be9a":"code","4de1293d":"markdown","ed58dcf0":"markdown","40303be5":"markdown","d9df2772":"markdown","4f1af8d6":"markdown","be0b30dd":"markdown","78ab4344":"markdown","aef42b17":"markdown","c9c9591c":"markdown","2daf6758":"markdown"},"source":{"08ed4e38":"# Base packages used\nimport numpy as np\nimport keras\n\n# Specific neural network models & layer types\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nimport os","38e0b063":"print(os.listdir('..\/input\/keras-mnist\/'))\n\ndef mnist_load_data(path='mnist.npz'):\n    with np.load(path) as f:\n        x_train, y_train = f['x_train'], f['y_train']\n        x_test, y_test = f['x_test'], f['y_test']\n    return (x_train, y_train), (x_test, y_test)","88e13408":"\n# Load the data, split between train and test sets by default\n(X_train, y_train), (X_test, y_test) = mnist_load_data(path='..\/input\/keras-mnist\/mnist.npz')\n\n# Check out the data\nprint(f'X_train shape: {X_train.shape}')\nprint(f'y_train shape: {y_train.shape}')\nprint(f'X_test shape: {X_test.shape}')\nprint(f'y_test shape: {y_test.shape}')\nprint(f'X range: {X_train.min()}-{X_train.max()}')\nprint(f'y values: {np.unique(y_train)}')\nnum_classes = len(np.unique(y_train))\nprint(f'Number of classes: {num_classes}')","eef3bc00":"# Define input image dimensions\nimg_rows, img_cols = 28, 28\n\n# Reshape for Keras model types\nX_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\nX_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\n\nprint(f'X_train shape: {X_train.shape}')\nprint(f'X_test shape: {X_test.shape}')","9934a233":"# Modify the X values to be 0-1 instead of 0-255\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train \/= 255\nX_test \/= 255\nprint(f'X_train range: {X_train.min()}-{X_train.max()}')","aff85049":"# Modify the y labels from class vectors to binary class matrices\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\nprint(f'y_train shape: {y_train.shape}')\nprint(f'y_test shape: {y_test.shape}')","d11d5e6e":"# Create simple CNN model architecture with Pooling for dimensionality reduction \n# and Dropout to reduce overfitting\nCNN_model = Sequential()\n\nCNN_model.add(Conv2D(32, kernel_size=(3, 3), activation = 'relu', input_shape = (28, 28, 1)))\nCNN_model.add(Conv2D(64, (3, 3), activation='relu'))\nCNN_model.add(MaxPooling2D(pool_size=(2, 2)))\n\nCNN_model.add(Dropout(0.25))\nCNN_model.add(Flatten())\nCNN_model.add(Dense(128, activation='relu'))\nCNN_model.add(Dropout(0.5))\nCNN_model.add(Dense(num_classes, activation='softmax'))\n\nCNN_model.summary()","4491f912":"# Compile the model with the desired loss function, optimizer, and metric to optimize\nCNN_model.compile(loss = 'categorical_crossentropy',\n                  optimizer = 'Adam',\n                  metrics = ['accuracy'])","324039d9":"# Fit the model on the training data, defining desired batch_size & number of epochs,\n# running validation on the test data after each batch\nCNN_model.fit(X_train, y_train,\n              batch_size = 128,\n              epochs = 12,\n              verbose = 1,\n              validation_data = (X_test, y_test))","7d29de1f":"# Evaluate the model's performance on the test data\nscore = CNN_model.evaluate(X_test, y_test, verbose=1)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","7880be9a":"# import pickle\n# from pickle import Pickler\n# CNN_model.dump('CNN_model.pkl')","4de1293d":"\u00a9 BrainStation Inc. 2017 - 2019\nThis material and all course content is the proprietary intellectual property of BrainStation Inc. and may only be used by course participants or educators for educational purposes as authorized by BrainStation. Any other use is unauthorized and unlawful. <img style = \"position:absolute; TOP:0px; LEFT:60px; WIDTH:35px; HEIGHT:35px\" src= \"https:\/\/drive.google.com\/uc?export=view&id=1CanYUb53J1YjtFm-NPiNIKj3X9Rs61wu\" \/>","ed58dcf0":"#### Preparing the data","40303be5":"Here we've used a relatively simple CNN architecture and achieve an accuracy of ~99%, a value far higher than what our previous models were able to achieve.\n\nWhile the process is slightly more complex in terms of code, building a neural network model with Keras still follows the same structure as building any other type of supervised learning model:\n- Prepare the data\n- Instantiate the model\n- Fit the model\n- Evaluate its quality","d9df2772":"<div id=\"container\" style=\"position:relative;\">\n<div style=\"float:left\"><h1> Building CNNs with Keras <\/h1><\/div>\n\n<\/div>\n<\/div>","4f1af8d6":"Any model that has to calculate weights will be affected by scaling. Here we modify the pixel values to fall between 0 and 1 before passing the values into the CNN.","be0b30dd":"#### Building the model architecture\n\nNow that our data is scaled and reshaped into the proper form, we can build our model. There are a couple ways to do this, but we will use the easiest way, which is to build each layer sequentially using the Keras sequential model API:\n\n<code> keras.models.Sequential <\/code>.\n\nThis allows us to simply construct each layer one at a time by adding them to this Sequential model. A common pattern that you will see in almost all CNN architectures is Convolutional layers:\n\n<code> keras.layers.Conv2D <\/code> \n\nused to extract features. Followed by pooling layers:\n\n<code> keras.layers.MaxPooling2D <\/code>\n\nused to reduce dimensionality. This Convolution + Pooling sequence is repeated until the dimensionality is lowered enough (which is a subjective decision). At this point the output of is flattened: \n\n<code> keras.layers.Flatten <\/code>\n\nand passed to the final few dense layers:\n\n<code> keras.layers.Dense <\/code> \n\nbefore being output to the final prediction layer whose output size is set to the number of categories. \n\nThis model also uses dropout layers:\n\n<code> keras.layers.Dropout <\/code>\n\nwhich are used to reduce overfitting in our model.","78ab4344":"Keras is an open-source language in Python specifically designed to simplify the process of building neural networks. It is an API that can access elements of TensforFlow, Theano, and other popular lower-level neural network packages. Using Keras makes building neural networks quicker, easier, and more intuitive.\n\nOne important note is that Keras is __not__ compatible with Python 3.7 (the version we've been using for the entire course). You should create a new virtual environment that uses Python 3.6 and install Keras there. You can use the following commands from your terminal:\n\n1. Create the new empty environment named 'deeplearning' on Python 3.6\n\n`conda create --name deeplearning python=3.6`\n\n2. Activate the new environment\n\n`conda activate deeplearning`\n\n3. Install Keras in this environment\n\n`conda install keras`\n\n4. Install Tensorflow version 1.9 in this environment\n\n`conda install tensorflow=1.9`\n\n5. Install sci-kit learn in this environment\n\n`conda install scikit-learn`\n\n6. Install jupyter in this environment\n\n`conda install jupyter`\n\n7. Install any other packages you may want, (e.g. matplotlib, pandas, etc)\n\n`conda install <package 1> <package 2> ... <package n>`\n\n8. Open a Jupyter Notebook from this environment\n\n`jupyter notebook`","aef42b17":"Neural network classifiers also require each data point to have their y-value be an array of binary values rather than a single label value, (e.g. an image from class `3` in a 4-class dataset should have its y-value be `[0 0 1 0]` instead of its y-value being `3`).","c9c9591c":"A Keras model expects image data input to be passed in as a 4D tensor, such that: \n\n<code>image.shape <\/code>\n\nshould be in form:\n\n<code>(n_images, img_rows, img_cols, n_channels)<\/code>","2daf6758":"Now we're ready to get building. Here we will use Keras to build a relatively simple CNN architecture to see how it performs on the MNIST dataset."}}