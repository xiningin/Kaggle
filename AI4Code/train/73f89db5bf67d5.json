{"cell_type":{"8c43c897":"code","391d1f2d":"code","904be60b":"code","6ce524af":"code","8d00433b":"code","bdbdfeb9":"code","7eed5b7f":"code","21d326a4":"code","84416204":"code","c101da3a":"code","8ed208ae":"code","e6e60a71":"code","da4c8549":"code","3bab0658":"code","d257092a":"code","cecf0ada":"code","a2a06c0e":"code","7290b597":"code","c0165235":"code","1ece4fd2":"code","ae6cefee":"code","d101ef06":"code","7638dc10":"code","62fde728":"code","6c926341":"markdown","e0c7a859":"markdown","d9a40b07":"markdown","03592234":"markdown","01ca539e":"markdown","5ced3801":"markdown"},"source":{"8c43c897":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","391d1f2d":"# import libraries\nimport pandas as pd\nfrom pandas.api.types import CategoricalDtype\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","904be60b":"file = \"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\"\ndiabetes = pd.read_csv(file)\ndiabetes.head()","6ce524af":"diabetes.shape","8d00433b":"diabetes.describe(include=\"all\")","bdbdfeb9":"# check null values\ndiabetes.isnull().sum()","7eed5b7f":"# check how many zeros in each column\n(diabetes == 0).astype(int).sum(axis=0)","21d326a4":"# Replace zero to np.nan\nfor col in diabetes.iloc[:,1:6]:\n    diabetes[col].replace(0, np.nan, inplace=True)\n    \nimport missingno as msno\n# check missing data types: MCAR, MAR or MNAR\nsorted = diabetes.sort_values(\"Insulin\")\nmsno.matrix(sorted)","84416204":"### check if there is correlations between midding data variables\n# msno.heatmap(sorted)\n# msno.dendrogram(sorted) <-- The dendrogram allows you to more fully correlate variable completion","c101da3a":"# Glucose and BMI's missing data appear to be completely missing at randome. \n# Replace null values in Glucose and BMI with its mean\nfor col in diabetes.iloc[:, [1,5]]:\n    diabetes[col].replace(np.nan, diabetes[col].mean(), inplace=True)\n\n#'BloodPressure', 'SkinThickness', 'Insulin' are missing big portions of its data points, mean might not be the best method for these variables.\n# Impute with the most frequent value\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(strategy =\"most_frequent\")\ncolumns = ['BloodPressure', 'SkinThickness', 'Insulin']\nfor col in columns:\n    diabetes[col] = imp.fit_transform(diabetes[col].values.reshape(-1,1))\n","8ed208ae":"diabetes.info()","e6e60a71":"# Add range columns\n# Create conditions of each range assignment\nGlucose_conditions = [(diabetes[\"Glucose\"] <= 50),\n                      (diabetes[\"Glucose\"] > 50) & (diabetes[\"Glucose\"] <= 100),\n                      (diabetes[\"Glucose\"] > 100) & (diabetes[\"Glucose\"] <= 150),\n                      (diabetes[\"Glucose\"] > 150) & (diabetes[\"Glucose\"] <= 200),\n                     ]\nBMI_conditions = [(diabetes[\"BMI\"] <= 20),\n                      (diabetes[\"BMI\"] > 20) & (diabetes[\"BMI\"] <= 40),\n                      (diabetes[\"BMI\"] > 40) & (diabetes[\"BMI\"] <= 60),\n                      (diabetes[\"BMI\"] > 60) & (diabetes[\"BMI\"] <= 80),\n                     ]\nAge_conditions = [(diabetes[\"Age\"] >= 20) & (diabetes[\"Age\"] < 30),\n                  (diabetes[\"Age\"] >= 30) & (diabetes[\"Age\"] < 40),\n                  (diabetes[\"Age\"] >= 40) & (diabetes[\"Age\"] < 50),\n                  (diabetes[\"Age\"] >= 50) & (diabetes[\"Age\"] < 60),\n                  (diabetes[\"Age\"] >= 60) & (diabetes[\"Age\"] < 70),\n                  (diabetes[\"Age\"] >= 70) & (diabetes[\"Age\"] < 80),\n                  (diabetes[\"Age\"] >= 80) & (diabetes[\"Age\"] < 90),\n                     ]\n\n# create a list of the values we want to assign for each condition\nGlucose_values = [\"0-50\", \"51-100\",\"101-150\",\"151-200\"]\nBMI_values = [\"0-20\", \"21-40\",\"41-60\",\"61-80\"]\nAge_values = [\"20-29\",\"30-39\",\"40-49\",\"50-59\",\"60-69\",\"70-79\",\"80-89\"]\n\n# create columns that map conditions with its values\ndiabetes[\"GlucoseRange\"] = np.select(Glucose_conditions, Glucose_values)\ndiabetes[\"BMIRange\"]= np.select(BMI_conditions, BMI_values)\ndiabetes[\"AgeRange\"]= np.select(Age_conditions, Age_values)\n\n# Convert data type of range columns to category type with order\nGlucose_level = CategoricalDtype(categories=Glucose_values, ordered=True)\nBMI_level = CategoricalDtype(categories=BMI_values, ordered=True)\nAge_level = CategoricalDtype(categories=Age_values, ordered=True)\ndiabetes[\"GlucoseRange\"] = diabetes[\"GlucoseRange\"].astype(Glucose_level)\ndiabetes[\"BMIRange\"] = diabetes[\"BMIRange\"].astype(BMI_level)\ndiabetes[\"AgeRange\"] = diabetes[\"AgeRange\"].astype(Age_level)\n\n# print first 6 rows of new df\nprint(diabetes.dtypes)","da4c8549":"# plot distribution of each variable.\ndiabetes.hist(figsize=(10,10))","3bab0658":"# check correlation between different variables\nmatrix = diabetes.corr()\nmask = np.triu(np.ones_like(matrix, dtype=bool))\ncmap = sns.diverging_palette(220, 25, s=80, n=9, as_cmap=True, center=\"light\")\nplt.figure(figsize=(8, 6))\nsns.heatmap(matrix, mask=mask, annot=True, cmap=cmap, square=True, fmt='.2f',linewidth=.2, center=0, vmin=-0.15, vmax=0.55)","d257092a":"#Plot a cross tab to check how Glucose and BMI level related to Outcome\ncross = pd.crosstab(diabetes.GlucoseRange, diabetes.BMIRange, values = diabetes.Outcome, aggfunc=\"sum\", margins=True, margins_name=\"Total\", normalize='all')\nsns.heatmap(cross, cmap=\"BuGn\", annot=True, cbar=False)\n\n# Rotate tick marks for visibility\nplt.yticks(rotation=0)","cecf0ada":"#Plot a cross tab to check how Glucose and Age related to Outcome\ncross = pd.crosstab(diabetes.GlucoseRange, diabetes.AgeRange, values = diabetes.Outcome, aggfunc=\"sum\", margins=True, margins_name=\"Total\", normalize='all')\nsns.heatmap(cross, cmap=\"BuGn\", annot=True, cbar=False)\n\n# Rotate tick marks for visibility\nplt.yticks(rotation=0)","a2a06c0e":"# add noises to y axis for the better visualisation\nSkinThickness_jitter = diabetes.SkinThickness + np.random.normal(0,2,len(diabetes.SkinThickness))\ninsulin_jitter = diabetes.Insulin + np.random.normal(0,2, len(diabetes.Insulin))\nBloodPressure_jitter = diabetes.BloodPressure + np.random.normal(0,2, len(diabetes.BloodPressure))\n\n# plot multiple subplots to validate correlations\nfig, axs = plt.subplots(3, 2, figsize=(10,10))\naxs[0, 0].plot(diabetes.Age, diabetes.Pregnancies, marker=\"o\", linestyle=\"\", markersize=1.2, alpha=.8)\naxs[0, 0].set_title('Age vs Pregnancies')\naxs[0, 1].plot(diabetes.BMI, SkinThickness_jitter, marker=\"o\", linestyle=\"\", markersize=1.1, alpha=.9)\naxs[0, 1].set_title('BMI vs SkinThickness')\naxs[1, 0].plot(diabetes.Glucose, insulin_jitter, marker=\"o\", linestyle=\"\", markersize=1.1, alpha=.9)\naxs[1, 0].set_title('Glucose vs Insulin')\naxs[1, 1].plot(diabetes.BMI, BloodPressure_jitter, marker=\"o\", linestyle=\"\", markersize=1.2, alpha=.8)\naxs[1, 1].set_title('BMI vs BloodPressure')\naxs[2, 0].plot(insulin_jitter, SkinThickness_jitter, marker=\"o\", linestyle=\"\", markersize=1.2, alpha=.8)\naxs[2, 0].set_title('Insulin vs SkinThickness')\nfig.tight_layout()","7290b597":"diabetes = diabetes.drop(['GlucoseRange',\n       'BMIRange', 'AgeRange'], axis=1)","c0165235":"# Outcome vs other features\nplt.figure(figsize = (15, 15))\nplotnumber = 1\nfor col in diabetes.iloc[:, 0:8]:\n    ax = plt.subplot(3, 3, plotnumber)\n    sns.boxplot(x=diabetes[\"Outcome\"], y=diabetes[col], data=diabetes)\n    plt.ylabel(col, fontsize = 15)\n    plotnumber += 1\nplt.show()","1ece4fd2":"# Handle outliers with Z score\nfrom scipy import stats\nz = np.abs(stats.zscore(diabetes))\nthreshold = 3\nnp.where(z>threshold)\ndiabetes_cleaned = diabetes[(z < 3).all(axis=1)]\nprint(diabetes_cleaned.shape)\nprint(diabetes.shape)","ae6cefee":"sns.pairplot(diabetes, vars = ['Glucose', 'BMI',\"BloodPressure\", \"Insulin\", \"Pregnancies\",\"Age\"], hue=\"Outcome\")","d101ef06":"#Seperate dataset to features and target\nX = diabetes_cleaned.drop([\"Outcome\"], axis=1).values\ny = diabetes_cleaned[\"Outcome\"].values","7638dc10":"# First model: Knn\n# Import libraries\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.impute import SimpleImputer\n\n# Setup the pipeline steps: steps\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nknn = KNeighborsClassifier()\n\n# Set pipeline steps\nsteps = [('imputation', imp),\n         (\"scaler\", StandardScaler()),\n         (\"knn\", KNeighborsClassifier())\n        ]\npipeline = Pipeline(steps)\n\n# Split the dataset to training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = .3, stratify=y, random_state=21)\n\n# Set n_neighbors range\nparameters = {\"knn__n_neighbors\":np.arange(1,50)}\n\n# Search best params n_neighbors\nknn_cv = GridSearchCV(pipeline, param_grid=parameters, cv=5)\nknn_cv.fit(X_train, y_train)\nprint(\"The best param: \" + str(knn_cv.best_params_)) #got 'n_neighbors': 17\n\n# Using the best parames to calculate R square\ny_pred = knn_cv.predict(X_test)\nscore = knn_cv.score(X_test, y_test)\nprint(\"The Knn score is \" + str(score))\n\n# Confusion Matrix\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n","62fde728":"\"\"\"\n# Scale features\nfrom sklearn.preprocessing import scale\nX_scaled = scale(X)\n\n#Visual EDA, similar to pairplot\n#_ = pd.plotting.scatter_matrix(X, c=y, figsize=[15,15], s=150, marker=\".\", alpha=0.2)\n\n# Handle outliers with IQR\nq1 = diabetes.iloc[:, 1:8].quantile(0.25)\nq3 = diabetes.iloc[:, 1:8].quantile(0.75)\nIQR = q3 - q1\nprint(IQR)\noutliers = (diabetes < q1 - 1.5 * IQR) | (diabetes > q3 + 1.5 * IQR)\ndiabetes_new2 = diabetes[~outliers.any(axis=1)]\nprint(diabetes_new2.shape)\nprint(diabetes.shape)\n\"\"\"","6c926341":"# 3. EDA: Visualization","e0c7a859":"Goal : EDA of Pima Indians Diabetes Database before predict the onset of diabetes based on diagnostic measures.\n\nData Variables:\n* Pregnancies: Number of times pregnant\n* Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure: Diastolic blood pressure (mm Hg)\n* SkinThickness: Triceps skin fold thickness (mm)\n* Insulin: 2-Hour serum insulin (mu U\/ml)\n* BMI: Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction: Diabetes pedigree function\n* Age (years)\n* Outcome: Class variable (0 or 1)","d9a40b07":"### Put it all together: pairplot","03592234":"# 1. Basic EDA","01ca539e":"# 4. Build models","5ced3801":"# 2. Checking and handling missing data"}}