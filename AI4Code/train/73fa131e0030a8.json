{"cell_type":{"d06b5be0":"code","1d9d9e49":"code","657a11e3":"code","3898e682":"code","cb7cbc30":"code","24e9517d":"code","d2a42838":"code","681a4f01":"code","e226f39f":"code","6089072e":"code","83d1eb28":"code","e11097af":"code","8b61b15f":"markdown","0399467a":"markdown","8eb2c248":"markdown","be07ffa8":"markdown","58917482":"markdown","32f5a39a":"markdown"},"source":{"d06b5be0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d9d9e49":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","657a11e3":"#load dataset\ndata = pd.read_csv('\/kaggle\/input\/simple-house-price-prediction\/house_price.csv')\ndata.head()","3898e682":"# normalization\ndata=np.array(data,dtype=float)\nfor i in range(0,data.shape[1]-1):\n    data[:,i]=(data[:,i]-np.mean(data[:,i]))\/np.std(data[:,i])","cb7cbc30":"x=data[:,:-1]\ny=data[:,-1]\ny=np.reshape(y,(47,1))\nones=np.ones((x.shape[0],1))\nx=np.hstack((ones,x))","24e9517d":"# function to return hypothesis\ndef h(x,theta):\n    return np.matmul(x,theta)","d2a42838":"# function to return cost function\ndef cost_f(x,y,theta):\n    np.square(h(x,theta)-y)\/(2*x.shape[0])","681a4f01":"theta=np.zeros((x.shape[1],1))","e226f39f":"learning_rate=0.01\nepoche=400\nj_all=[]\nfor i in range(epoche):\n    h_x = h(x, theta)\n    cost_ = (1\/x.shape[0])*(x.T@(h_x - y))\n    theta = theta - (learning_rate)*cost_\n    j_all.append(cost_f(x,y,theta))\ntheta","6089072e":"y_predict = np.dot(x,theta)","83d1eb28":"plt.scatter(x[:,1],y)\nplt.scatter(x[:,1],y_predict)","e11097af":"from sklearn import metrics\nprint(metrics.mean_absolute_error(y, y_predict))\nprint(metrics.mean_squared_error(y, y_predict))\nprint(np.sqrt(metrics.mean_squared_error(y, y_predict)))","8b61b15f":"## Feature Normalization\nBy looking at the values, we can see that areas are very large than the number of rooms. When features differ by orders of magnitude, performing feature scaling can make gradient descent converge much more quickly","0399467a":"## Cost Function","8eb2c248":"## visualize predicted data","be07ffa8":"## Model Eveluation","58917482":"## Finding the optimal parameters using Gradient Descent","32f5a39a":"## hypothesis function"}}