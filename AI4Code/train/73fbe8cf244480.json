{"cell_type":{"c1f28a7b":"code","f8f94476":"code","06780777":"code","8191bd90":"code","9f7e78c5":"code","468cb912":"code","43dda65e":"code","7ddfe798":"code","3624205f":"code","3fd6b537":"code","fe33ffb8":"code","edc2b2e6":"code","339327db":"code","ded58d7f":"markdown","7dcd2443":"markdown","fac2aa30":"markdown","a04e6608":"markdown","0018048a":"markdown","5d1b3553":"markdown","3108ee41":"markdown","b2f6c655":"markdown","bf177753":"markdown"},"source":{"c1f28a7b":"# imports\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nfrom textblob import TextBlob\nimport collections\nfrom nltk import ngrams\nimport re, nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\n\nimport os\nreviews = pd.read_csv(\"..\/input\/employee_reviews.csv\")","f8f94476":"reviews = reviews.drop(\"Unnamed: 0\",axis=1)\n\ndef print_null(df):\n    if df.isnull().sum().any() != 0:\n        print(\"Null Values are present!\")\n        print(reviews.isnull().sum())\n    else:\n        print(\"Null values not present\")\nprint_null(reviews)","06780777":"# Filling null values in advice_to_mgmt with value none\nreviews[['advice-to-mgmt']] = reviews[['advice-to-mgmt']].fillna(value='none')\nreviews = reviews.dropna()\nprint_null(reviews)","8191bd90":"reviews.columns = reviews.columns.str.replace('-','_')\nreviews = reviews.drop([\"location\",\"dates\",\"job_title\",\"work_balance_stars\",\"culture_values_stars\",\n                       \"carrer_opportunities_stars\",\"comp_benefit_stars\",\"senior_mangemnet_stars\",\n                       \"helpful_count\",\"link\"],axis=1)\nprint(\"Current shape of the dataset is :\",reviews.shape)","9f7e78c5":"reviews[['summary']] = reviews[['summary']].astype(str)\nreviews['polarity'] = reviews.apply(lambda x: TextBlob(x['summary']).sentiment.polarity, axis=1)\n\n \ndef sentiment(df):\n    if df['polarity'] > 0:\n        val = \"Positive\"\n    elif df['polarity'] == 0:\n        val = \"Neutral\"\n    else:\n        val = \"Negative\"\n    return val\n\nreviews['sentiment_type'] = reviews.apply(sentiment, axis=1)\n\ncmp_lc = reviews[[\"company\",\"sentiment_type\"]] \ncmp_lc = cmp_lc.groupby([\"company\", \"sentiment_type\"]).size().reset_index()\ncmp_lc = cmp_lc.rename(columns={0: 'total_sentiment_types'})\n\n#For plotting it\nyears = list(cmp_lc.company.unique())\ncompany_data = []\nv = True\n\nfor i in years:\n    if i!='amazon':\n        v=False\n    data_upd = [dict(type='bar',\n                     visible = v,\n                     x = cmp_lc[cmp_lc['company']==i]['sentiment_type'],\n                     y = cmp_lc[cmp_lc['company']==i]['total_sentiment_types'],\n                     textposition = 'auto',\n                     marker=dict(\n                     color='orange',\n                     line=dict(\n                         width=1.5),\n                     ),\n                 opacity=0.6)]\n    \n    company_data.extend(data_upd)\n\nyears = [x.capitalize() for x in years]\n\n# set menus inside the plot\nsteps = []\nyr = 0\nfor i in range(0,len(company_data)):\n    step = dict(method = \"restyle\",\n                args = [\"visible\", [False]*len(company_data)],\n                label = years[yr]) \n    step['args'][1][i] = True\n    steps.append(step)\n    yr += 1\n    \n\nsliders = [dict(active = 6,\n                currentvalue = {\"prefix\": \"Company: \"},\n                pad = {\"t\": 50},\n                steps = steps)]\n\n# Set the layout\nlayout = dict(title = 'Sentiment analysis for summary text data for each company',\n              sliders = sliders)\nfig = dict(data=company_data, layout=layout)\niplot(fig)","468cb912":"#Comparing it with overall rating where 3 = neutral, below 3 is negative and above 3 is positive for amazon\npd.options.mode.chained_assignment = None  \ncmp_lc = reviews[[\"company\",\"sentiment_type\",\"overall_ratings\"]] \ncmp_lc  = cmp_lc.loc[cmp_lc[\"company\"]==\"amazon\"]\n\ndef sentiment_overall(df):\n    if df['overall_ratings'] >= 4:\n        val = \"Positive\"\n    elif df['overall_ratings'] == 3:\n        val = \"Neutral\"\n    else:\n        val = \"Negative\"\n    return val\n\ncmp_lc['sentiment_type_from_overall_rating'] = cmp_lc.apply(sentiment_overall, axis=1)\ncmp_lc1 = cmp_lc.groupby([\"company\", \"sentiment_type\"]).size().reset_index()\ncmp_lc1 = cmp_lc1.rename(columns={0: 'total_sentiment_types'})\ncmp_lc2 = cmp_lc.groupby([\"company\", \"sentiment_type_from_overall_rating\"]).size().reset_index()\ncmp_lc2 = cmp_lc2.rename(columns={0: 'total_sentiment_type_from_overall_rating'})\n\ntrace0 = go.Bar(\n    x=cmp_lc1.sentiment_type,\n    y=cmp_lc1.total_sentiment_types,\n    name='Sentiment analysed from Summary text',\n    marker=dict(\n        color='rgb(49,130,189)'\n    )\n)\ntrace1 = go.Bar(\n    x=cmp_lc2.sentiment_type_from_overall_rating,\n    y=cmp_lc2.total_sentiment_type_from_overall_rating,\n    name='Sentiment from Overall ratings',\n    marker=dict(\n        color='rgb(204,204,204)',\n    )\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(title = 'Comparasion of Sentiment from text and the rating given by user',\n    xaxis=dict(tickangle=-45),\n    barmode='group',\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","43dda65e":"# from wordcloud import WordCloud,STOPWORDS\n# stopwords = set(STOPWORDS)\n# extras = [\"great\",\"work\",\"company\",\"amazon\",\"good\",\"employee\"]\n# stopwords.update(extras)\n# temp = reviews.loc[reviews[\"company\"]==\"amazon\"]\n# text = \" \".join(str(review) for review in temp.pros)\n# wordcloud = WordCloud(stopwords=stopwords,collocations = False,width=1600, height=800, max_font_size=200).generate(text)\n# plt.figure(figsize=(12,10))\n# plt.imshow(wordcloud, interpolation='bilinear')\n# plt.axis(\"off\")\n# plt.title(\"What pros are the people talking about when it comes to Amazon?\")\n# plt.show()","7ddfe798":"#Combining all the text into a single column called Final\nreviews['final_summary'] = reviews['summary'] + ' ' + reviews['pros'] + ' ' + reviews['cons'] + ' ' + reviews['advice_to_mgmt']\nreviews = reviews.drop(\"overall_ratings\",axis=1) #As we don't need it\n# reviews[['summary']] = reviews[['summary']].astype(str)\nreviews['polarity_final'] = reviews.apply(lambda x: TextBlob(x['final_summary']).sentiment.polarity, axis=1)","3624205f":"def sentiment(df):\n    if df['polarity_final'] > 0:\n        val = \"Positive\"\n    elif df['polarity_final'] == 0: \n        val = \"Neutral\"\n    else:\n        val = \"Negative\"\n    return val\n\nreviews['final_sentiment_type'] = reviews.apply(sentiment, axis=1)\nreviews.tail(5)","3fd6b537":"cmp_lc = reviews[[\"company\",\"sentiment_type\",\"final_sentiment_type\"]] \ncmp_lc  = cmp_lc.loc[cmp_lc[\"company\"]==\"amazon\"]\ncmp_lc1 = cmp_lc.groupby([\"company\", \"sentiment_type\"]).size().reset_index()\ncmp_lc1 = cmp_lc1.rename(columns={0: 'total_sentiment_types'})\ncmp_lc2 = cmp_lc.groupby([\"company\", \"final_sentiment_type\"]).size().reset_index()\ncmp_lc2 = cmp_lc2.rename(columns={0: 'total_final_sentiment_types'})\n\ntrace0 = go.Bar(\n    x=cmp_lc1.sentiment_type,\n    y=cmp_lc1.total_sentiment_types,\n    name='Sentiment types from Summary',\n    marker=dict(\n        color='rgb(49,130,189)'\n    )\n)\ntrace1 = go.Bar(\n    x=cmp_lc2.final_sentiment_type,\n    y=cmp_lc2.total_final_sentiment_types,\n    name='Sentiment types from taking all the text',\n    marker=dict(\n        color='rgb(204,204,204)',\n    )\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(title = 'Comparasion of Sentiments from Summary and the after taking all the text entered together!',\n    xaxis=dict(tickangle=-45),\n    barmode='group',\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='angled-text-bar')","fe33ffb8":"from nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\nextras = [\"google\",\"amazon\",\"netflix\",\"microsoft\",\"apple\",\"facebook\"]\nstop_words.update(extras)\nwordnet_lemmatizer = WordNetLemmatizer()\n\ndef normalizer(tweet):\n    only_letters = re.sub(\"[^a-zA-Z]\", \" \",tweet) \n    tokens = nltk.word_tokenize(only_letters)[2:]\n    lower_case = [l.lower() for l in tokens]\n    filtered_result = list(filter(lambda l: l not in stop_words, lower_case))\n    lemmas = [wordnet_lemmatizer.lemmatize(t) for t in filtered_result]\n    return lemmas\n\npd.set_option('display.max_colwidth', -1) # Setting this so we can see the full content of cells\nreviews['normalized_summary'] = reviews.final_summary.apply(normalizer)\namazon_reviews  = reviews.loc[reviews[\"company\"]==\"amazon\"]\n# amazon_reviews = amazon_reviews.drop([\"company\",\"summary\",\"pros\",\"cons\",\"advice_to_mgmt\",\"polarity\",\"sentiment_type\"],axis=1)\namazon_reviews[['final_summary','normalized_summary']].head(2)","edc2b2e6":"def ngrams(input_list):\n    bigrams = [' '.join(t) for t in list(zip(input_list, input_list[1:]))]\n    trigrams = [' '.join(t) for t in list(zip(input_list, input_list[1:], input_list[2:]))]\n    return bigrams+trigrams\n\n\namazon_reviews['grams'] = amazon_reviews.normalized_summary.apply(ngrams)\namazon_reviews = amazon_reviews.reset_index()\namazon_reviews[['grams']].head(2)","339327db":"def count_words(input):\n    cnt = collections.Counter()\n    for row in input:\n        for word in row:\n            cnt[word] += 1\n    return cnt\n\namazon_reviews[(amazon_reviews.final_sentiment_type == 'Positive')][['grams']].apply(count_words)['grams'].most_common(20)","ded58d7f":"Normalising the summary","7dcd2443":"Applying n-grams to the summary now","fac2aa30":"Now let's see what people are saying about Amazon when it comes to positive reviews by counting the most commontly occuring phrases","a04e6608":"Now next steps - \nPreprocessing textual data","0018048a":"Summary by itself is not enough and can be biased.\nHence i will create a new column which will contain text from all the other columns combined and will identify sentiment_type on that.","5d1b3553":"What the above graph means to communicate is that when you take into account just the summaries, people had more neutral opinion about Amazon, but when you take into consideration the Pros, Cons as well as advice to management, people had more positive sentiments about it. Interesting!\nGreat going Amazon!","3108ee41":"Lets see now if our dataset has null values-","b2f6c655":"Null values are present in summary which i think is better to remove but a better option would be to replace null with ''none'' since many people had no advices for the management and wrote ''none'' elsewhere.","bf177753":"# Part II of my EDA series.\n\n\nThis notebook dives a little deeper into the unexplored part of the employee reviews dataset.\nThe following columns of the dataset will be analysed extensively in this notebook (Moslty Textual data) - \n1. summary - Provides a brief about the review by summarising it \n2. pros - Pros about working with the company\n3. cons - Cons about working with the company\n4. advice-to-mgmt - Advice to management that the reviewer felt important"}}