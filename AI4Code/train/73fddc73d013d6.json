{"cell_type":{"8b034335":"code","6eda1609":"code","98a36f57":"code","c4cafc40":"code","e58cb2f0":"code","16618ade":"code","2164356a":"code","9e5be821":"code","336a5d2d":"code","97ef9fad":"code","2cd28808":"code","0b589e8b":"markdown","a51fac85":"markdown","2ed15f75":"markdown","24bd0869":"markdown","85a483f7":"markdown"},"source":{"8b034335":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\ndf=pd.read_csv(\"..\/input\/dataset\/optiver-realized-volatility-prediction-publicleaderboard.csv\")\n","6eda1609":"df=df.head(20)\ndf['rank']=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\ndf['size']=[20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]\n\nimport plotly.express as px\nfig = px.treemap(df, path=['TeamName'], values='size',hover_data=['rank'],title='Top 20 Teams on LeaderBoard')\nfig.update_layout(margin = dict(t=50, l=25, r=25, b=25))\nfig.show()\n","98a36f57":"df=pd.read_csv(\"..\/input\/dataset\/optiver-realized-volatility-prediction-publicleaderboard.csv\")\n\n\ntemp = pd.DataFrame(df.Score.value_counts().reset_index())\ntemp.columns = ['Common_score','count']\ntemp=temp.head(10)\n               \n#df=pd.read_csv(\"..\/input\/dataset\/optiver-realized-volatility-prediction-publicleaderboard.csv\")\n\nimport matplotlib.pyplot as plt\nfrom palettable.colorbrewer.qualitative import Dark2_6\nplt.figure(figsize=(16,10))\nmy_circle=plt.Circle((0,0), 0.7, color='white')\nplt.pie(temp['count'], labels=temp.Common_score, colors=Dark2_6.hex_colors)\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.title('Most Unique Scores on LeaderBoard')\nplt.show()","c4cafc40":"df.iloc[2]\n\ndf.drop(2, inplace=True)\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport warnings \nwarnings.filterwarnings('ignore')\n# creating the text variable\n\n\ndef plot_wordcloud(text, mask=None, max_words=400, max_font_size=120, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='white',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    mask = mask)\n    wordcloud.generate(text)\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'green', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  ","e58cb2f0":"\ntext1 = \" \".join(title for title in df.TeamName)\n\nplot_wordcloud(text1, max_words=800, max_font_size=80, figure_size=(14,10))","16618ade":"\nimport numpy as np # linear algebra\nimport pandas as pd\n\ntrain = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")","2164356a":"train","9e5be821":"x_train = train.drop(['target'],axis=1)\ny_train = train['target']\nx_test = test.drop(['row_id'],axis=1)","336a5d2d":"from catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport optuna\nfrom warnings import filterwarnings\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n\nfilterwarnings(\"ignore\", category=DeprecationWarning) \nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","97ef9fad":"X_train,X_val,Y_train,Y_val = train_test_split(x_train,y_train,random_state=26)","2cd28808":"def check_rmse(model,x_val,y_val):\n    pred = model.predict(x_val)\n    return np.sqrt(mean_squared_error(y_val,pred))\n\nknn_reg = KNeighborsRegressor(n_jobs=-1)\nxgb_reg = XGBRegressor(n_jobs=-1)\nlgbm_reg = LGBMRegressor(n_jobs=-1)\ncat_reg =  CatBoostRegressor()\n\nmodels = [knn_reg,xgb_reg,lgbm_reg,cat_reg]\nmodels_name = ['knn_reg','xgb_reg','lgbm_reg','cat_reg']\n\nrmse_error = []\nfor i,model in enumerate(models):\n    model.fit(X_train,Y_train)\n    rmse = check_rmse(model,X_val,Y_val)\n    rmse_error.append(rmse)\n    print(f\"Model : {models_name[i]}   rmse = {rmse}\")\n    \n\nimport matplotlib.pyplot as plt\n%matplotlib inline   \n\nplt.barh(models_name,rmse_error)\nplt.ylabel(\"Models\")\nplt.xlabel(\"RMSE\") \nplt.show()","0b589e8b":"# Teams WordCloud","a51fac85":"# I have used copied this code from here!\n\n[link](https:\/\/www.kaggle.com\/sankalpsrivastava26\/catboost-optimization)\n","2ed15f75":"# Top 10 most Unique Scores on LeaderBoard","24bd0869":"# I Just wanted to see LeaderBoard In different Way !!!!!!!","85a483f7":"# Top Twenty on LeaderBoard\n\n"}}