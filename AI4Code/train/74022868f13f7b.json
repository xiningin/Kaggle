{"cell_type":{"53996e6e":"code","2b3571b8":"code","daa9e00f":"code","df8a75e7":"code","bbd85457":"code","db652412":"code","bbaf219a":"markdown","4725b257":"markdown","27e9ca44":"markdown","4e595002":"markdown","3ec36fb8":"markdown","c7aa2e31":"markdown","fe5d4b98":"markdown"},"source":{"53996e6e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nnp.random.seed(123)","2b3571b8":"class statistic:\n    mean           = \"mean\"\n    standard_dev   = \"std-dev\"\n    median         = \"median\"\n    percentile_95  = \"precentile_95\"\n\n    \ndef getCI(rvs, x, k=10000, n=50, statistic=statistic.mean):\n    \"\"\"returns upper and lower limits of x% C.I of rvs\"\"\"\n    m = len(rvs)\n    \n    # checks\n    if n>m: raise Exception(\"n must be less than or eq to m\")\n    if (k%10 != 0): raise Exception(\"k preferrably multiple of 10\")\n    if type(rvs)!= np.ndarray: raise Exception(\"rvs must be numpy array\")\n    \n    # 1. Sample k number of n sized random observations with replacement\n    k_samples_of_size_n = []\n    for _ in range(0, k):\n        n_random_idxs_w_replacement = np.random.choice(m, size=n) # with replacement\n        sample = rvs[n_random_idxs_w_replacement]\n        k_samples_of_size_n.append(sample)\n        \n    # 2. Find `the-statistic` for all k samples\n    k_statistics = []\n    if statistic == \"mean\":\n        for sample in k_samples_of_size_n:\n            statistic = np.mean(sample)\n            k_statistics.append(statistic)\n    elif statistic == \"median\":\n        for sample in k_samples_of_size_n:\n            statistic = np.median(sample)\n            k_statistics.append(statistic)\n    elif statistic == \"std-dev\":\n        for sample in k_samples_of_size_n:\n            statistic = np.std(sample)\n            k_statistics.append(statistic)\n    elif statistic == \"precentile_95\":\n        for sample in k_samples_of_size_n:\n            statistic = np.percentile(sample, 95)\n            k_statistics.append(statistic)\n            \n    # 3. order k-statistics in ascending order\n    asc_k_statistics = sorted(k_statistics)\n    \n    # 4. find lower limit and upper limit and return\n    gap = (k - (x\/100)*k)\/2\n    l_limit_idx = int(gap)\n    u_limit_idx = int(k-gap)\n    \n    # return range of x% C.I\n    return (asc_k_statistics[l_limit_idx], asc_k_statistics[u_limit_idx])","daa9e00f":"# gen rvs (sample from a population)\nmu, sigma = 10, 20\nglobal_population = np.random.normal(mu, sigma, 1000)\nrvs = np.random.choice(global_population, 500)\n\n# config params\nconf_percent = 99\nnum_samples  = 10000\nsample_size  = 100 # <=len(rvs) i.e <=1000\n\n# predict C.I for mean\nmean_ci_99_percent = getCI(rvs, conf_percent, k=num_samples, n=sample_size, statistic=statistic.mean)\nprint(f\"Predicted mean range from bootstrap {conf_percent}% C.I: \", mean_ci_99_percent)\nprint(\"Actual population mean: \", np.mean(global_population))","df8a75e7":"# predict C.I for median\nmedian_ci_99_percent = getCI(rvs, conf_percent, k=num_samples, n=sample_size, statistic=statistic.median)\nprint(f\"Predicted median range from bootstrap {conf_percent}% C.I: \", median_ci_99_percent)\nprint(\"Actual population median: \", np.median(global_population))","bbd85457":"# predict C.I for std-dev\nstd_ci_99_percent = getCI(rvs, conf_percent, k=num_samples, n=sample_size, statistic=statistic.standard_dev)\nprint(f\"Predicted standard_dev range from bootstrap {conf_percent}% C.I: \", std_ci_99_percent)\nprint(\"Actual population standard_dev: \", np.std(global_population))","db652412":"# predict C.I for 95th percentile\npercetile95_ci_99_percent = getCI(rvs, conf_percent, k=num_samples, n=sample_size, statistic=statistic.percentile_95)\nprint(f\"Predicted 95th percentile range from bootstrap {conf_percent}% C.I: \", percetile95_ci_99_percent)\nprint(\"Actual 95th percentile of global_population: \", np.percentile(global_population, 95))","bbaf219a":"**Predict Confidence Intervals**","4725b257":"**Implementation**","27e9ca44":"**PROCEDURE**\n\n- Takes rvs of X of any distribution of size `m`\n- Sample `k` number of `n` sized random observations **with replacement**\n    - `k` prefferably a multiple of 10\n    - `n<=m`\n- Find the statistic($\\mu  \\,\\,\/\\,\\,  \\sigma \\,\\,\/\\,\\, var \\,\\,\/\\,\\, etc.$) for `k` samples\n    - Gives `k` number of statistics\n- Order `k` statistics in ascending order\n- For `x%` confidence interval range,\n    - `gap` = `(k - (x\/100)*k)\/2` \n    - `lower limit` = `gap`th statistic in ordered `k` statistics \n    - `upper limit` = `k-gap`th statistic in ordered `k` statistics\n    - For example, if `k=1000` and `x=95`%, `gap = (1000-0.95*1000)\/2 = 25` `lower_limit = gap = 25th statistic` `upper_limit = k-gap = 975th statistic`. Hence, range is $(25th \\, statistic,\\, 975th \\, statistic)$","4e595002":"# Bootstrap Based Confidence Interval\n\n## Application\n\n**But why do we need C.I of a statistic(eg. mean) when you can actually calculate it using formula on rvs?**\n> Because `statistic of a sample ~ statistic of population` (almost equal but not 100% equal)\n\nSo, whenever we try to generalize a statistic to global population, we have to mention confidence interval w\/ confidence percent!!\n\n> Given the confidence percent and a random sample, find possible range of a statistic of **polulation** -- No matter what the distribution is\n\n    - What is 95% C.I of **median of population** of random sample X\n    - What is 99% C.I of **mean of population of** random sample  X\n    - What is 90% C.I of **std-dev of population** of random sample  X    \n    - What is 80% C.I of **90th percentile of population** of random sample  X\n    \n    \n","3ec36fb8":"**NOTE:**\n\n- `k` must be multiple of 10\n- Larger the `k` and `n` are, stronger will be confidence\n- We are only predicting upper and lower limits of range. Not the possible values \n- Non parametric ","c7aa2e31":"#### CONFIDENCE INTERVAL\n\n> *A Confidence Interval is a range of values we are fairly sure our true value lies in.*\n\n**NON-PARAMETRIC STATISTICS:** Doesn't make any assumptions about distribution of data. Techniques\/methods will work for any distribution of data.\n\n> Finding C.I using bootstrap method is a non-parametric technique. **Will work for ANY distribution**","fe5d4b98":"> Note how seamlessly we can predict **Confidence Intervals of Population** from a given sample!!"}}