{"cell_type":{"d5cda787":"code","ae9ae5f1":"code","735a463d":"code","942dc16b":"code","12f9263f":"code","d749931a":"code","d820ac07":"code","7ba4ba3e":"code","d92676d7":"code","aaeb2325":"code","cb0a3ec8":"code","1f892c86":"code","0ee88672":"code","07f7dd84":"code","24167988":"code","05fa5ff2":"code","87bda67b":"code","06846974":"code","1ff8b13c":"code","ad9407c5":"code","58a8af5a":"code","93e51be1":"code","fcc919fd":"code","afcbf2fe":"code","bd182b63":"code","98d5f908":"code","d7764c3d":"code","fad82535":"code","7b2f06bd":"code","5f64573c":"code","a5d405b2":"code","5e8d9d94":"code","e959772f":"code","a86a91f5":"code","8d9d9fda":"code","7d2058e0":"code","f2b3252c":"code","b1bba83d":"code","3a32543e":"code","28eda10d":"code","c2373d3c":"code","353f0968":"code","45991362":"code","e4f9ae42":"code","c087e634":"code","e2edb109":"code","9eb5428b":"code","4eb0c116":"code","581e69b9":"code","84cb9468":"code","3b8083d7":"code","d463d0de":"code","00947aca":"code","8b0e5f89":"code","cc59986d":"code","c72bffbe":"code","4c3e1ea6":"code","4aa0c4da":"code","86bf9951":"code","1901a484":"code","eb99e6a9":"code","d0d91461":"code","ce82fd93":"code","95de1c17":"code","cd92fc11":"code","9f8953b4":"markdown","184c4dd4":"markdown","f8442c9f":"markdown","e5c8ddd3":"markdown","f5f01deb":"markdown","b13731f3":"markdown","9749e3f8":"markdown","26c2cd2c":"markdown","42995ed0":"markdown","d3578c13":"markdown","553ddf2e":"markdown","92bf04f1":"markdown","a69329ef":"markdown","5263bbf3":"markdown","3f6c96bb":"markdown","501a55e3":"markdown","4510db0c":"markdown","00f7a41c":"markdown","6373da03":"markdown","290650ad":"markdown","c06e37f9":"markdown","aa969a20":"markdown","89b2b1a7":"markdown","ff2199b3":"markdown","4f84c777":"markdown","9b19a5dc":"markdown","a32b3956":"markdown","f321c056":"markdown","2b2e9131":"markdown","0a8443c2":"markdown","a47fe86b":"markdown","230fac5b":"markdown","8ae349d4":"markdown","d52f30ea":"markdown","4c15f7dc":"markdown","20f02742":"markdown","c7a87c4c":"markdown","b92b4885":"markdown","dbc21538":"markdown","392a4ab1":"markdown","59a81e8e":"markdown","e5609339":"markdown","2e123424":"markdown","742bde39":"markdown","d8126559":"markdown","e2a566c9":"markdown","527031e3":"markdown","fa912cff":"markdown","466e1c68":"markdown","407d3362":"markdown","bb499579":"markdown","f061f4d2":"markdown","1ef9bd50":"markdown","c7e04186":"markdown","5286ae0b":"markdown","551199b0":"markdown","33d6a06f":"markdown","f3d2ba5b":"markdown","1b91fdc5":"markdown"},"source":{"d5cda787":"#Starting with libraries for importing and exploring Data\nimport pandas as pd\nimport numpy as np","ae9ae5f1":"#Importing Data\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\nfull_data=[train_df,test_df]","735a463d":"#Checking the train Data\ntrain_df.head()","942dc16b":"#Checking test Data\ntest_df.head()","12f9263f":"#Checking the type of data in the training data\ntrain_df.info()","d749931a":"#Checking if there is null values in train data (We saw that in previous cell,but to be sure)\ntrain_df.isnull().sum()","d820ac07":"#Describing the training data\ntrain_df.describe()","7ba4ba3e":"#Looking in the columns \ntrain_df.columns.values","d92676d7":"#Dividing train data to numerical and categorical\nnumData = train_df[['Age','SibSp','Parch','Fare']]\ncatData = train_df[['Survived','Pclass','Sex','Ticket','Cabin','Embarked']]","aaeb2325":"import seaborn as sns\nimport matplotlib.pyplot as plt","cb0a3ec8":"#Checking the correlation between numerical data to see if there is any strong correlations\nprint(numData.corr())\nsns.heatmap(numData.corr())","1f892c86":"#Starting with Sex\ntrain_df[['Sex','Survived']].groupby(['Sex'],as_index = False).mean().sort_values(by='Survived',ascending=False)","0ee88672":"train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)","07f7dd84":"train_df[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False)","24167988":"train_df[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False)","05fa5ff2":"#Extracting title\nfor dataset in full_data:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)","87bda67b":"#Pivot table to see male and female titles\npd.crosstab(train_df['Title'], train_df['Sex'])","06846974":"#Checking the survival rate by title\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","1ff8b13c":"for dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')","ad9407c5":"train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","58a8af5a":"f,ax=plt.subplots(1,2,figsize=(20,10))\ntrain_df['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train_df,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","93e51be1":"f,ax=plt.subplots(1,2,figsize=(18,8))\ntrain_df[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived by Sex')\nsns.countplot('Sex',hue='Survived',data=train_df,ax=ax[1])\nax[1].set_title('Sex:Survived and Dead')\nplt.show()","fcc919fd":"f,ax=plt.subplots(1,2,figsize=(20,10))\ntrain_df[train_df['Survived']==0].Age.plot.hist(ax=ax[0],bins=20)\nax[0].set_title('Survived= 0')\nx1=list(range(0,85,5))\nax[0].set_xticks(x1)\ntrain_df[train_df['Survived']==1].Age.plot.hist(ax=ax[1])\nax[1].set_title('Survived= 1')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","afcbf2fe":"f,ax=plt.subplots(1,2,figsize=(20,10))\ntrain_df['Pclass'].value_counts().plot.bar(ax=ax[0])\nax[0].set_title('Number Of Passengers By Pclass')\nsns.countplot('Pclass',hue='Survived',data=train_df,ax=ax[1])\nax[1].set_title('Pclass:Survived and Dead')\nplt.show()","bd182b63":"sns.factorplot('Embarked','Survived',data=train_df)\nfig=plt.gcf()\nfig.set_size_inches(10,5)\nplt.show()","98d5f908":"train_df.groupby('Title')['Age'].mean()","d7764c3d":"train_df.loc[(train_df.Age.isnull())&(train_df.Title=='Mr'),'Age']=33\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Title=='Mrs'),'Age']=36\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Title=='Master'),'Age']=5\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Title=='Miss'),'Age']=22\ntrain_df.loc[(train_df.Age.isnull())&(train_df.Title=='Rare'),'Age']=46","fad82535":"train_df.Age.isnull().any()","7b2f06bd":"test_df.loc[(test_df.Age.isnull())&(test_df.Title=='Mr'),'Age']=33\ntest_df.loc[(test_df.Age.isnull())&(test_df.Title=='Mrs'),'Age']=36\ntest_df.loc[(test_df.Age.isnull())&(test_df.Title=='Master'),'Age']=5\ntest_df.loc[(test_df.Age.isnull())&(test_df.Title=='Miss'),'Age']=22\ntest_df.loc[(test_df.Age.isnull())&(test_df.Title=='Rare'),'Age']=46","5f64573c":"test_df.Age.isnull().any()","a5d405b2":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","5e8d9d94":"for dataset in full_data:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\ntrain_df.head()","e959772f":"train_df = train_df.drop(['AgeBand'], axis=1)","a86a91f5":"train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1","8d9d9fda":"train_df.loc[train_df['FamilySize'] == 1, 'IsAlone'] = 1\ntrain_df.loc[train_df['FamilySize'] != 1, 'IsAlone'] = 0\ntest_df.loc[test_df['FamilySize'] == 1, 'IsAlone'] = 1\ntest_df.loc[test_df['FamilySize'] != 1, 'IsAlone'] = 0","7d2058e0":"train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean().sort_values(by='Survived',ascending=False)","f2b3252c":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\nfull_data = [train_df, test_df]","b1bba83d":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","3a32543e":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","28eda10d":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","c2373d3c":"for dataset in full_data:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","353f0968":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","45991362":"train_df = train_df.drop(['PassengerId','Name', 'Cabin', 'Ticket'], axis=1)\ntest_df = test_df.drop(['Name', 'Cabin', 'Ticket'], axis=1)\nfull_data = [train_df, test_df]","e4f9ae42":"for dataset in full_data:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)","c087e634":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df.head()","e2edb109":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)\nfor dataset in full_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)","9eb5428b":"test_df.isnull().sum()","4eb0c116":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","581e69b9":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","84cb9468":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","3b8083d7":"coeff_df = pd.DataFrame(train_df.columns.delete(0))\ncoeff_df.columns = ['Feature']\ncoeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n\ncoeff_df.sort_values(by='Correlation', ascending=False)","d463d0de":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","00947aca":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","8b0e5f89":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","cc59986d":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","c72bffbe":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","4c3e1ea6":"sgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","4aa0c4da":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","86bf9951":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","1901a484":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","eb99e6a9":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })","d0d91461":"submission.head()","ce82fd93":"submission.count()","95de1c17":"submission.groupby('Survived').count()[['PassengerId']]","cd92fc11":"submission.to_csv('submission.csv', index=False)","9f8953b4":"Putting Age into 5 buckets.","184c4dd4":"Filling the null values.","f8442c9f":"Getting FamilySize and Alone","e5c8ddd3":"# Part 5:Feature Engeneering and Data Cleaning","f5f01deb":"Next I plot Embarked and Survived","b13731f3":"# Part 4:Visualization","9749e3f8":"Female passengers had higher survival rate.","26c2cd2c":"Dropping Parch,SibSp and FamilySize.","42995ed0":"Age:","d3578c13":"Importing libraries for models.","553ddf2e":"Next I plot Survived and Pclass","92bf04f1":"# Part 8:Predicting","a69329ef":"Filling the missing values","5263bbf3":"K-Nearest Neighbors","3f6c96bb":"Mapping Embarked (S=0,Q=1,C=2)","501a55e3":"Decision Tree","4510db0c":"Next I plot Survived and Sex.","00f7a41c":"Families with 3 or less people had higher survival rate.","6373da03":"Comparing the results from models.","290650ad":"Combining Age and Pclass","c06e37f9":"Support Vector Machine","aa969a20":"First I plot the survival rate","89b2b1a7":"This is very messy so I decided to put titles in brackets.","ff2199b3":"Putting Fare in buckets","4f84c777":"From this I see that Age and Fare aren't correlated, but Parch and SibSp are positve correlated (kids had bigger chances of survival) and Age and SibSp are negative correlated.","9b19a5dc":"Next I plot Survived and Age","a32b3956":"Mapping Sex (male=0,Female=1)","f321c056":"I found easy and interesting to explore numerical and categorical data separetly.","2b2e9131":"Importing libraries is first step. For different tasks there are different libraries that should be used. In IDE like this (or Jupyter Notebook) I prefer to import libraries just before I need them (not like old traditional way importing everything in the beginning). But I have an idea what libraries I will need at the start.for exemple in this project I will use those libraries:","0a8443c2":"* For Data Analysis : Pandas and Numpy\n* For Data Visualization : Seaborn and Matplotlib\n* For Machine Learning : Sklearn(few instances)","a47fe86b":"As I can see there are some missing values in Age,Cabin and Embarked, and I should fix before building model.","230fac5b":"Passengers of 1st class had higher survival rate.","8ae349d4":"Mapping Titles","d52f30ea":"# Part 6:Building\/Finding Models","4c15f7dc":"Next thing is extracting passengers title from the Name and see what connections I can find with other features","20f02742":"Random Forest and Decision Tree gives the best results.","c7a87c4c":"Linear SVC","b92b4885":"After taking courses and following tutorials, it's time to dive into solving problems.But first problem is that courses and tutorials gives you principles,ways,etc. but they don't give you the way to start your projects. So I needed to find my own way to start projects. That way is to sneak in others work, don't take their code(or way of thinking) but most common parts of others work and code as I think it would make most sense. At last as this is my first project any feedback would be welcome.","dbc21538":"At this moment I focus on train data.","392a4ab1":"Random Forest","59a81e8e":"Embarked:","e5609339":"Getting ready to use models.","2e123424":"Passengers with 1 or 2 siblings\/spouses aboard had higher survival rate than the others.","742bde39":"# Titanic: Starting with DS and ML","d8126559":"Analysing different features and survival rate.","e2a566c9":"Dropping Name,Ticket and Cabin","527031e3":"In this part I imported the data and checked the columns and rows,define which of columns have Numeric,Categorical and Ordinal data, make questions that should be answerd in next parts.","fa912cff":"Logistic Regression","466e1c68":"Perceptron","407d3362":"Stochastic Gradient Descent","bb499579":"# Part 1:Libraries","f061f4d2":"# Part 7:Evaluating Models","1ef9bd50":"Dropping AgeBand.","c7e04186":"In this part I will need more libraries so first import them.","5286ae0b":"# Part 3:Analysing Data","551199b0":"From this I learned some things from the data.For exemple youngest passinger had 0.42 years, the oldest had 80years, etc.","33d6a06f":"Gaussian Naive Bayes","f3d2ba5b":"And again female had higher survival rate but rare titles had very low survival rate.","1b91fdc5":"# Part 2:Importing and Exploring Data"}}