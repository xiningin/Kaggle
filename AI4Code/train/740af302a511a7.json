{"cell_type":{"92d157e0":"code","c335297d":"code","09194e56":"code","7027cd0c":"code","bd0be6e5":"code","df695ffa":"code","c7f02166":"code","64a8a1ff":"code","7f9dcc6e":"code","d80c3ec0":"code","0e58d77c":"code","353b93fd":"code","da599256":"markdown","2500e1c8":"markdown","aaa8799f":"markdown","720c8a35":"markdown","38aee23f":"markdown","452e3433":"markdown","06006573":"markdown","071ffe92":"markdown"},"source":{"92d157e0":"import numpy as np","c335297d":"# TODO your code here","09194e56":"# TODO your code here","7027cd0c":"# Q3.1 TODO your code here","bd0be6e5":"# Q3.2 TODO your code here","df695ffa":"# Q3.3 TODO your code here","c7f02166":"%matplotlib inline\nimport matplotlib.pyplot as plt","64a8a1ff":"# TODO your code here","7f9dcc6e":"# TODO your code here","d80c3ec0":"import numpy as np","0e58d77c":"def update(frame):\n    global P, C, S\n\n    # Every ring is made more transparent\n    C[:,3] = np.maximum(0, C[:,3] - 1.0\/n)\n\n    # Each ring is made larger\n    S += (size_max - size_min) \/ n\n\n    # Reset ring specific ring (relative to frame number)\n    i = frame % 50\n    P[i] = np.random.uniform(0,1,2)\n    S[i] = size_min\n    C[i,3] = 1\n\n    # Update scatter object\n    scat.set_edgecolors(C)\n    scat.set_sizes(S)\n    scat.set_offsets(P)\n\n    # Return the modified object\n    return scat,","353b93fd":"%matplotlib notebook\nfrom matplotlib.animation import FuncAnimation\n\n\nfig = plt.figure(figsize=(6,6), facecolor='white')\nax = fig.add_axes([0,0,1,1], frameon=False, aspect=1)\n\nn = 50\nsize_min = 50\nsize_max = 50*50\n\n# Ring position\nP = np.random.uniform(0,1,(n,2))\n\n# Ring colors\nC = np.ones((n,4)) * (0,0,0,1)\n# Alpha color channel goes from 0 (transparent) to 1 (opaque)\nC[:,3] = np.linspace(0,1,n)\n\n# Ring sizes\nS = np.linspace(size_min, size_max, n)\n\n# Scatter plot\nscat = ax.scatter(P[:,0], P[:,1], s=S, lw = 0.5,\n                  edgecolors = C, facecolors='None')\n\n# Ensure limits are [0,1] and remove ticks\nax.set_xlim(0,1), ax.set_xticks([])\nax.set_ylim(0,1), ax.set_yticks([])\nanimation = FuncAnimation(fig, update, interval=10, blit=True, frames=200)\nplt.show()","da599256":"#### Q3 \u521b\u5efa\u4e24\u4e2a4x2x3\u7684\u968f\u673anp\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u670d\u4eceN(2,1)\u7684\u9ad8\u65af\u5206\u5e03\u3002\n######  Q3.1\uff1a\u5c06\u4e24\u4e2a\u6570\u7ec4\u6309axis=0\u62fc\u63a5, \u6253\u5370\u62fc\u63a5\u540e\u77e9\u9635\u7684shape\u3002\n######  Q3.2\uff1a \u6253\u5370 Q3.1\u4e2d\u7684\u62fc\u63a5\u77e9\u9635\u6309axis=0\u6c42\u5747\u503c\u7684\u7ed3\u679c\u548cshape\u3002\n######  Q3.3\uff1a \u5c06Q3.1\u4e2d\u7684\u62fc\u63a5\u77e9\u9635\u7684\u6bcf\u4e2a\u5143\u7d20\u6309N(2,1)\u8fdb\u884c\u6807\u51c6\u5316, \u5373 x = (x-2)\/1\u3002\u6253\u5370\u6807\u51c6\u5316\u540e\u7684\u7ed3\u679c\u548cshape","2500e1c8":"#### Q2 \u8bf7\u9009\u4e00\u5f20\u4f60\u5076\u50cf\u7684\u7167\u7247\uff0c\u5206\u522b\u52a0\u4e0aN(0,0,01), N(0,1), N(0,10) \u548cN(0,100)\u7684\u9ad8\u65af\u566a\u58f0\uff0c\u5e76\u5c06\u56db\u5f20\u56fe\u753b\u5728\u540c\u4e00\u4e2a\u56fe\u91cc","aaa8799f":"### Matplotlib\u57fa\u672c\u64cd\u4f5c","720c8a35":"#### Q1 \u521b\u5efa\u4e00\u4e2a1\u5230100\u4e4b\u95f4\uff0c\u6240\u6709\u80fd\u88ab3\u6574\u9664\u7684np\u6570\u7ec4, \u5e76\u8f6c\u6362\u6210\u6d6e\u70b9\u578b","38aee23f":"#### Q2 \u5c06\u5e8f\u5217[0,1,2...23]\u6574\u7406\u6210\u4e00\u4e2a4x2x3\u7684np\u6570\u7ec4,\u5e76\u6309axis=2\u6c42\u5747\u503c\u3002\u6253\u5370\u6700\u540e\u7ed3\u679c\u53ca\u5176shape\u3002","452e3433":"#### (for fun) \u8bf7\u7528\u4e00\u53e5\u8bdd\u5f62\u5bb9\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u6240\u5448\u73b0\u7684\u60c5\u666f","06006573":"## Homework","071ffe92":"#### Q1 \u8bf7\u753b\u51fa\u4f60\u4e2d\u6587\u540d\u5b57\u91cc\u51fa\u73b0\u7684\u7b14\u753b\u7684bar plot. \u8bf7\u6ce8\u660e\u6a2a\u8f74\u7eb5\u8f74 "}}