{"cell_type":{"f29354ec":"code","f6f427c5":"code","da02cc69":"code","b4d06b9b":"code","0d787bf4":"code","5f497f03":"code","aa9acc16":"code","4b302a3f":"code","aedf01ae":"code","0de25e72":"code","48cef588":"code","78b71349":"code","11c86ce4":"code","b08440dd":"code","f188f5ca":"code","26a84f2e":"markdown","0a61997c":"markdown","55b4065a":"markdown","d712ab45":"markdown","1a42b200":"markdown","b134a244":"markdown","b3297946":"markdown","39256da2":"markdown","ed48d04d":"markdown","43568ec8":"markdown","faf8eb6b":"markdown","ab7ad107":"markdown","0bcfbd4e":"markdown","a80ddd2c":"markdown","158d6d4f":"markdown","43f57e02":"markdown","d767f540":"markdown"},"source":{"f29354ec":"import pandas as pd\nfrom pandas import Series, DataFrame\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.set_option('max_columns', 10, 'max_rows', 20)","f6f427c5":"tr_train = pd.read_csv('..\/input\/X_train.csv', encoding='cp949')\ntr_test = pd.read_csv('..\/input\/X_test.csv', encoding='cp949')\ntr = pd.concat([tr_train, tr_test])\ntr","da02cc69":"features = []","b4d06b9b":"f = tr.groupby('cust_id')['amount'].agg([('\ucd1d\uad6c\ub9e4\uc561', 'sum')]).reset_index()\nfeatures.append(f); f","0d787bf4":"f = tr.groupby('cust_id')['amount'].agg([('\uad6c\ub9e4\uac74\uc218', 'size')]).reset_index()\nfeatures.append(f); f","5f497f03":"f = tr.groupby('cust_id')['amount'].agg([('\ud3c9\uade0\uad6c\ub9e4\uac00\uaca9', 'mean')]).reset_index()\nfeatures.append(f); f","aa9acc16":"n = tr.gds_grp_nm.nunique()\nf = tr.groupby('cust_id')['gds_grp_nm'].agg([('\uad6c\ub9e4\uc0c1\ud488\ub2e4\uc591\uc131', lambda x: len(x.unique()) \/ n)]).reset_index()\nfeatures.append(f); f","4b302a3f":"tr['sales_date'] = tr.tran_date.str[:10]\nf = tr.groupby(by = 'cust_id')['sales_date'].agg([('\ub0b4\uc810\uc77c\uc218','nunique')]).reset_index()\nfeatures.append(f); f","aedf01ae":"def weekday(x):\n    w = x.dayofweek \n    if w < 4:\n        return 1 # \uc8fc\uc911\n    else:\n        return 0 # \uc8fc\ub9d0\nf = tr.groupby(by = 'cust_id')['sales_date'].agg([('\uc694\uc77c\uad6c\ub9e4\ud328\ud134', lambda x : pd.to_datetime(x).apply(weekday).value_counts().index[0])]).reset_index()\nfeatures.append(f); f","0de25e72":"def f1(x):\n    k = x.month\n    if 3 <= k <= 5 :\n        return('\ubd04-\uad6c\ub9e4\uac74\uc218')\n    elif 6 <= k <= 8 :\n        return('\uc5ec\ub984-\uad6c\ub9e4\uac74\uc218')\n    elif 9 <= k <= 11 :    \n        return('\uac00\uc744-\uad6c\ub9e4\uac74\uc218')\n    else :\n        return('\uaca8\uc6b8-\uad6c\ub9e4\uac74\uc218')    \n    \ntr['season'] = pd.to_datetime(tr.sales_date).apply(f1)\nf = pd.pivot_table(tr, index='cust_id', columns='season', values='amount', \n                   aggfunc=np.size, fill_value=0).reset_index()\nfeatures.append(f); f","48cef588":"f = tr.groupby('cust_id')['gds_grp_mclas_nm'].agg([('\uc8fc\uad6c\ub9e4\ucf54\ub108', lambda x: x.value_counts().index[0])]).reset_index()\nf = pd.get_dummies(f, columns=['\uc8fc\uad6c\ub9e4\ucf54\ub108'])  # This method performs One-hot-encoding\nfeatures.append(f); f","78b71349":"X_train = DataFrame({'cust_id': tr_train.cust_id.unique()})\nfor f in features :\n    X_train = pd.merge(X_train, f, how='left')\ndisplay(X_train)\n\nX_test = DataFrame({'cust_id': tr_test.cust_id.unique()})\nfor f in features :\n    X_test = pd.merge(X_test, f, how='left')\ndisplay(X_test)","11c86ce4":"IDtest = X_test.cust_id;\nX_train.drop(['cust_id'], axis=1, inplace=True)\nX_test.drop(['cust_id'], axis=1, inplace=True)\ny_train = pd.read_csv('..\/input\/y_train.csv').gender","b08440dd":"from keras.models import Sequential\nfrom keras.layers.core import Dense, Activation, Dropout\nfrom keras.constraints import max_norm\nfrom sklearn.model_selection import cross_val_score\nfrom keras.wrappers.scikit_learn import KerasClassifier\n\n# Set common values\nN_HIDDEN = 128\nDROPOUT = 0.5\nFEATURES = X_train.shape[1]\n\n# Transforms features by min-max scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Define model architecture\ndef dnn_model() :\n    model = Sequential()\n    model.add(Dense(N_HIDDEN, input_shape=(FEATURES,), activation='elu', \n                    kernel_constraint=max_norm(2.), kernel_initializer='he_normal'))\n    model.add(Dense(int(N_HIDDEN\/2), activation='elu', \n                    kernel_constraint=max_norm(2.), kernel_initializer='he_normal'))\n    model.add(Dropout(DROPOUT))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n# Instantiate the Scikit-Learn classifier interface\ndnn = KerasClassifier(build_fn=dnn_model, batch_size=64, epochs=10, verbose=1)\n\n# Evaluate the model using k-fold CV\nscore = cross_val_score(dnn, X_train, y_train, cv=5, scoring='roc_auc')\nprint('{}\\nmean = {:.5f}\\nstd = {:.5f}'.format(score, score.mean(), score.std()))","f188f5ca":"dnn.fit(X_train, y_train)\npred = dnn.predict_proba(X_test)[:,1]\nfname = 'submissions.csv'\nsubmissions = pd.concat([IDtest, pd.Series(pred, name=\"gender\")] ,axis=1)\nsubmissions.to_csv(fname, index=False)\nprint(\"'{}' is ready to submit.\" .format(fname))","26a84f2e":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud559\uc2b5\uc6a9\uacfc \uc81c\ucd9c\uc6a9 \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub97c \uc77d\uace0 \ud558\ub098\ub85c \ud569\uce5c\ub2e4.*","0a61997c":"**[\ud30c\uc0dd\ubcc0\uc218 7]** \uacc4\uc808\ubcc4 \uad6c\ub9e4\uac74\uc218: `Spring`(3~5)\/`Summer`(6~8)\/`Fall`(9-11)\/`Winter`(12~2)","55b4065a":"## Step 1) Make features ##\n<\/font>    \n- \uc0c1\ud488\ud310\ub9e4 \ub370\uc774\ud130\ub85c\ubd80\ud130 \uc801\uc808\ud55c \ud30c\uc0dd\ubcc0\uc218(feature)\ub97c \ub9cc\ub4e0 \ud6c4 \ud559\uc2b5\uc6a9(`X_train`)\uacfc \ud3c9\uac00\uc6a9(`X_test`)\uc73c\ub85c \ub098\ub204\uc5b4 \uc800\uc7a5\ud55c\ub2e4.\n- scikit-learn\uc5d0\uc11c\ub294 categorical feature\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 One-hot-encoding\uc744 \ud1b5\ud574 numeric feature\ub85c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4. ","d712ab45":"### Numeric Features","1a42b200":"**[\ud30c\uc0dd\ubcc0\uc218 2]** \uad6c\ub9e4\uac74\uc218","b134a244":"# KBA Challenge\n### starter code (using DNN)","b3297946":"**[\ud30c\uc0dd\ubcc0\uc218 3]** \ud3c9\uade0 \uad6c\ub9e4\uac00\uaca9","39256da2":"**[\ud30c\uc0dd\ubcc0\uc218 4]** \uad6c\ub9e4\uc0c1\ud488 \ub2e4\uc591\uc131: `\uad6c\ub9e4\ud55c \uc11c\ub85c\ub2e4\ub978 \ube0c\ub79c\ub4dc \uc218` \/ `1191`","ed48d04d":"### Categorical Features","43568ec8":"**[\ud30c\uc0dd\ubcc0\uc218 5]** \ub0b4\uc810\uc77c\uc218","faf8eb6b":"## Step 2) Evaluate performance ##\n<\/font>    \n- Step 1)\uc5d0\uc11c \uc0dd\uc131\ud55c `X_train`\uacfc `X_test`\ub97c \uc774\uc6a9\ud558\uc5ec \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud55c \ud6c4 DNN \ubaa8\ud615\uc131\ub2a5\uc744 \ud655\uc778\ud55c\ub2e4.\n  - [5-fold cross validation](http:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html)\uc744 \uc218\ud589\ud55c \ud6c4 \ubaa8\ud615\uc131\ub2a5\uc758 \ud3c9\uade0 \uac12\uacfc \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc744 \ucd9c\ub825\ud55c\ub2e4.\n  - \ubaa8\ud615\uc131\ub2a5\uc740 [ROC-AUC](http:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_roc.html#sphx-glr-auto-examples-model-selection-plot-roc-py)\ub85c \uce21\uc815\ud558\uba70, \uac12\uc774 \ub192\uc744\uc218\ub85d \uc131\ub2a5\uc774 \uc88b\uc740 \ubaa8\ub378\uc774\ub2e4. (*0 <= ROC-AUC <=1*)\n- \uc2e4\ud589 \ud6c4 \uc0dd\uc131\ub418\ub294 `submissions.csv`\ub97c Kaggle\uc5d0 \uc81c\ucd9c\ud558\uc5ec \"public leaderboard\"\uc5d0\uc11c \ubcf8\uc778\uc758 Score(ROC-AUC)\uc640 \ub4f1\uc218\ub97c \ud655\uc778\ud55c\ub2e4. ","ab7ad107":"**[\ud30c\uc0dd\ubcc0\uc218 6]** \uc694\uc77c \uad6c\ub9e4\ud328\ud134: `\uc8fc\uc911\ud615`\/`\uc8fc\ub9d0\ud615`","0bcfbd4e":"*\ud30c\uc0dd\ubcc0\uc218\ub97c \uc800\uc7a5\ud560 \ube48 \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e0\ub2e4.*","a80ddd2c":"**[\ud30c\uc0dd\ubcc0\uc218 1]** \ucd1d \uad6c\ub9e4\uc561","158d6d4f":"**[\ud30c\uc0dd\ubcc0\uc218 8]** \uc8fc\uad6c\ub9e4 \ucf54\ub108: 26\uac1c \ucf54\ub108 \uc911 \uac00\uc7a5 \ub9ce\uc774 \uad6c\ub9e4\ud55c \uacf3","43f57e02":"<br><br>\n*\uc544\ub798 \ucf54\ub4dc\ub97c \uc218\ud589\ud558\uba74 \uc0dd\uc131\ud55c \ubaa8\ub4e0 \ud30c\uc0dd\ubcc0\uc218\uac00 \ubcd1\ud569\ub418\uace0 \ud559\uc2b5\uc6a9\uacfc \ud3c9\uac00\uc6a9\uc73c\ub85c \ub098\ub258\uc5b4\uc9c4\ub2e4.*","d767f540":"## End"}}