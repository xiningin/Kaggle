{"cell_type":{"da2bf05b":"code","fe852815":"code","c3d5cd88":"code","ff280cd7":"code","79140c0a":"code","d4130bc4":"code","a51ce1f1":"code","b6f11b43":"code","628be27e":"code","e25e1923":"code","94a0093d":"code","376e7d8b":"code","1b9820a6":"code","80750942":"code","134a49ef":"code","ec3040a1":"code","8b2d1aa8":"code","4fa679ba":"code","48da672f":"code","baa42196":"code","662f8384":"code","fafde457":"code","868e3c90":"code","7a96e619":"code","dd19ec12":"code","b257059f":"code","df437d12":"code","936e87c5":"code","f39cf832":"code","1036a070":"code","ec05da40":"code","37873058":"code","310cf2e0":"code","8c95b51b":"code","236480f7":"code","c3dca9ad":"code","8dac961e":"markdown","8f23d400":"markdown","195b112d":"markdown","32ddf6e4":"markdown","0e91a333":"markdown","59e48ea4":"markdown","b5922c84":"markdown","7210fce4":"markdown","f1e5d9de":"markdown","1990459e":"markdown","0b3856dd":"markdown","907b0785":"markdown","32211156":"markdown","38d10327":"markdown","694bd7d1":"markdown","0fb7363d":"markdown","880e4e1d":"markdown","1470eee6":"markdown","606f7d15":"markdown","cd7dc80e":"markdown","fe091d3b":"markdown","5e88a23e":"markdown","48410daa":"markdown","b306ec35":"markdown","e55b7800":"markdown","1b91e647":"markdown","a6dbe7b9":"markdown","2c1c8ae0":"markdown","6e41827d":"markdown","7f8ef58b":"markdown"},"source":{"da2bf05b":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\n\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.style.use(['seaborn-darkgrid'])\nplt.rcParams['figure.figsize'] = (12, 9)\nplt.rcParams['font.family'] = 'DejaVu Sans'\n\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, SpectralClustering\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import LinearSVC\n\nRANDOM_STATE = 17","fe852815":"# change this if necessary\nPATH_TO_SAMSUNG_DATA = \"..\/input\"","c3d5cd88":"X_train = np.loadtxt(os.path.join(PATH_TO_SAMSUNG_DATA, \"samsung_train.txt\"))\ny_train = np.loadtxt(os.path.join(PATH_TO_SAMSUNG_DATA,\n                                  \"samsung_train_labels.txt\")).astype(int)\n\nX_test = np.loadtxt(os.path.join(PATH_TO_SAMSUNG_DATA, \"samsung_test.txt\"))\ny_test = np.loadtxt(os.path.join(PATH_TO_SAMSUNG_DATA,\n                                  \"samsung_test_labels.txt\")).astype(int)","ff280cd7":"X_train.shape,X_test.shape","79140c0a":"y_train.shape, y_test.shape","d4130bc4":"# Checking dimensions\nassert(X_train.shape == (7352, 561) and y_train.shape == (7352,))\nassert(X_test.shape == (2947, 561) and y_test.shape == (2947,))","a51ce1f1":"X = np.vstack([X_train, X_test])\ny = np.hstack([y_train, y_test])    # neden horizontal birle\u015ftirdik?","b6f11b43":"y.shape","628be27e":"X.shape","e25e1923":"np.unique(y)","94a0093d":"n_classes = np.unique(y).size\nn_classes","376e7d8b":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaledX = scaler.fit_transform(X)\n# print(scaler.mean_)","1b9820a6":"pca = PCA(n_components=0.9, random_state=RANDOM_STATE).fit(scaledX)     # n_component ? \nX_pca = pca.transform(scaledX)","80750942":"X_pca.shape   # 65 feature ","134a49ef":"round(float(pca.explained_variance_ratio_[0] *100 ))   # varyans\u0131n %51'ini ilk pca a\u00e7\u0131klar\/ kapsar. ","ec3040a1":"# Your code here\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, s=20, cmap='viridis');","8b2d1aa8":"kmeans = KMeans(n_clusters=n_classes, n_init=100, \n                random_state=RANDOM_STATE, n_jobs=1)  # random_state ile her zaman ayn\u0131 \u00f6rnekler mi al\u0131n\u0131yor yoksa sadece ayn\u0131 oranda m\u0131 b\u00f6lmesini sa\u011fl\u0131yor? \nkmeans.fit(X_pca)\ncluster_labels = kmeans.labels_","4fa679ba":"kmeans.labels_","48da672f":"cluster_labels.shape","baa42196":"kmeans.cluster_centers_.shape","662f8384":"# Your code here\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=cluster_labels, s=20, cmap='viridis');","fafde457":"tab = pd.crosstab(y, cluster_labels, margins=True)\ntab.index = ['walking', 'going up the stairs',\n             'going down the stairs', 'sitting', 'standing', 'laying', 'all']\ntab.columns = ['cluster' + str(i + 1) for i in range(6)] + ['all']\ntab","868e3c90":"# # Your code here\ninertia = []\nfor k in tqdm_notebook(range(1, n_classes + 1)):\n    kmeans = KMeans(n_clusters=k, n_init=100,random_state=RANDOM_STATE, n_jobs=1).fit(X_pca)\n    inertia.append(np.sqrt(kmeans.inertia_)) ","7a96e619":"plt.plot(range(1, n_classes+1), inertia, marker='s')","dd19ec12":"ag = AgglomerativeClustering(n_clusters=n_classes, \n                              linkage='ward').fit(X_pca)","b257059f":"# K Means Clustering \nprint(metrics.adjusted_rand_score(y, cluster_labels))","df437d12":"# Agglomerative Clustering\nprint(metrics.adjusted_rand_score(y, ag.labels_))","936e87c5":"# # Your code here\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)   # fit transformu ne zaman birlikte ne zaman ayr\u0131 kullan\u0131yoruz? \nX_test_scaled = scaler.transform(X_test)","f39cf832":"svc = LinearSVC(random_state=RANDOM_STATE)\nsvc_params = {'C': [0.001, 0.01, 0.1, 1, 10]}","1036a070":"%%time\n# # Your code here\nbest_svc = GridSearchCV(svc, svc_params, n_jobs=1, cv=3, verbose=1)\nbest_svc.fit(X_train_scaled, y_train) # x_train'in scale edilmi\u015f halini kullan\u0131rken neden y_train'i ald\u0131k?","ec05da40":"best_svc.best_params_, best_svc.best_score_","37873058":"y_predicted = best_svc.predict(X_test_scaled)","310cf2e0":"tab = pd.crosstab(y_test, y_predicted, margins=True)\ntab.index = ['walking', 'climbing up the stairs',\n              'going down the stairs', 'sitting', 'standing', 'laying', 'all']\ntab.columns = ['walking', 'climbing up the stairs',\n             'going down the stairs', 'sitting', 'standing', 'laying', 'all']\ntab","8c95b51b":"print('precision:')\nfor t in tab.drop('all', 1):\n    print(t + \":\", tab[t][t] \/ tab[t][-1])","236480f7":"print('recall:')\nfor t in tab.drop('all', 1):\n    print(t + \":\", tab[t][t] \/ tab['all'][t])","c3dca9ad":"# Your code here\npca = PCA(n_components=0.9, random_state=RANDOM_STATE)\nX_train_pca = pca.fit_transform(X_train_scaled)\n\nbest_svc.fit(X_train_pca, y_train)\n\nbest_score_svc_pca = best_svc.best_score_\nbest_svc.best_params_, best_score_svc_pca","8dac961e":"Finally, do the same thing as in Question 7, but add PCA.\n\n- Use `X_train_scaled` and` X_test_scaled`\n- Train the same PCA as before, on the scaled training set, apply scaling to the test set\n- Choose the hyperparameter `C` via cross-validation on the training set with PCA-transformation. You will notice how much faster it works now.\n\n**Question 9:** <br>\nWhat is the difference between the best quality (accuracy) for cross-validation in the case of all 561 initial characteristics and in the second case, when the principal component method was applied? Round to the nearest percent. <br>\n\n**Answer options:**\n- quality is the same\n- 2%\n- ***4%***    # 93-89 mant\u0131\u011f\u0131yla.\n- 10%\n- 20%","8f23d400":"<center>\n<img src=\"https:\/\/habrastorage.org\/webt\/ia\/m9\/zk\/iam9zkyzqebnf_okxipihkgjwnw.jpeg\">\n    \n## <center> [mlcourse.ai](https:\/\/mlcourse.ai) \u2013 Open Machine Learning Course\nAuthors: [Olga Daykhovskaya](https:\/\/www.linkedin.com\/in\/odaykhovskaya\/), [Yury Kashnitsky](https:\/\/yorko.github.io\/). All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license. Free use is permitted for any non-commercial purpose.","195b112d":"In this task, we will look at how data dimensionality reduction and clustering methods work. At the same time, we'll practice solving classification task again.\n\nWe will work with the [Samsung Human Activity Recognition](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Human+Activity+Recognition+Using+Smartphones) dataset. Download the data [here](https:\/\/drive.google.com\/file\/d\/14RukQ0ylM2GCdViUHBBjZ2imCaYcjlux\/view?usp=sharing). The data comes from accelerometers and gyros of Samsung Galaxy S3 mobile phones ( you can find more info about the features using the link above), the type of activity of a person with a phone in his\/her pocket is also known \u2013 whether he\/she walked, stood, lay, sat or walked up or down the stairs.\n\nFirst, we pretend that the type of activity is unknown to us, and we will try to cluster people purely on the basis of available features. Then we solve the problem of determining the type of physical activity as a classification problem.\n\nFill the code where needed (\"Your code is here\") and answer the questions in the [web form](https:\/\/docs.google.com\/forms\/d\/1wBf5UoRndv6PpzIwYnM9f0ysoGa4Yqcqle-HBlBP5QQ\/edit).","32ddf6e4":"**Question 10:** <br>\nSelect all the correct statements:\n\n**Answer options:**\n- Principal component analysis in this case allowed to reduce the model training time, while the quality (mean cross-validation accuracy) suffered greatly, by more than 10%\n- *PCA can be used to visualize data, but there are better methods for this task, for example, tSNE. However, PCA has lower computational complexity *\n- *PCA builds linear combinations of initial features, and in some applications they might be poorly interpreted by humans *","0e91a333":"-------------------------------","59e48ea4":"Visualize data in projection on the first two principal components. Color the dots according to the clusters obtained.","b5922c84":"It can be seen that kMeans does not distinguish activities very well. Use the elbow method to select the optimal number of clusters. Parameters of the algorithm and the data we use are the same as before, we change only `n_clusters`.","7210fce4":"[These labels correspond to:](https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/00240\/UCI%20HAR%20Dataset.names)\n- 1 \u2013 walking\n- 2 \u2013 walking upstairs\n- 3 \u2013 walking downstairs\n- 4 \u2013 sitting\n- 5 \u2013 standing\n- 6 \u2013 laying down","f1e5d9de":"Let's try another clustering algorithm, described in the article \u2013 agglomerative clustering.","1990459e":"**Question 5:** <br>\nHow many clusters can we choose according to the elbow method? <br>\n\n**Answer options:**\n- 1\n- ***2***\n- 3\n- 4","0b3856dd":"Visualize data in projection on the first two principal components.","907b0785":"Define the number of unique values of the labels of the target class.","32211156":"Reduce the number of dimensions using PCA, leaving as many components as necessary to explain at least 90% of the variance of the original (scaled) data. Use the scaled dataset and fix `random_state` (RANDOM_STATE constant).","38d10327":"**Question 2:**<br>\nWhat percentage of the variance is covered by the first principal component? Round to the nearest percent.\n\n**Answer options:**\n- 45\n- ***51***\n- 56\n- 61","694bd7d1":"We see that for each class (i.e., each activity) there are several clusters. Let's look at the maximum percentage of objects in a class that are assigned to a single cluster. This will be a simple metric that characterizes how easily the class is separated from others when clustering.\n\nExample: if for class \"walking downstairs\" (with 1406 instances belonging to it), the distribution of clusters is:\n - cluster 1 - 900\n - cluster 3 - 500\n - cluster 6 - 6,\n \nthen such a share will be 900\/1406 $ \\approx $ 0.64.\n \n\n**Question 4:** <br>\nWhich activity is separated from the rest better than others based on the simple metric described above? <br>\n\n**Answer:**\n- walking\n- ***standing***\n- walking downstairs\n- all three options are incorrect","0fb7363d":"Scale the sample using `StandardScaler` with default parameters.","880e4e1d":"Look at the correspondence between the cluster marks and the original class labels and what kinds of activities the `KMeans` algorithm is confused at.","1470eee6":"Calculate the Adjusted Rand Index (`sklearn.metrics`) for the resulting clustering and for ` KMeans` with the parameters from the 4th question.","606f7d15":"# <center>Assignment #7 (demo)\n## <center> Unsupervised learning","cd7dc80e":"**Answer options:**\n- 56 \n- ***65***\n- 66\n- 193","fe091d3b":"You can notice that the task is not very well solved when we try to detect several clusters (> 2). Now, let's solve the classification problem, given that the data is labeled.\n\nFor classification, use the support vector machine \u2013 class `sklearn.svm.LinearSVC`. In this course, we did study this algorithm separately, but it is well-known and you can read about it, for example [here](http:\/\/cs231n.github.io\/linear-classify\/#svmvssoftmax).\n\nChoose the `C` hyperparameter for` LinearSVC` using `GridSearchCV`.\n\n- Train the new `StandardScaler` on the training set (with all original features), apply scaling to the test set\n- In `GridSearchCV`, specify `cv` = 3.","5e88a23e":"------------------------------","48410daa":"**Question 3:**<br>\nIf everything worked out correctly, you will see a number of clusters, almost perfectly separated from each other. What types of activity are included in these clusters? <br>\n\n**Answer options:**\n- 1 cluster: all 6 activities\n- ***2 clusters: (walking, walking upstairs, walking downstairs ) and (sitting, standing, laying)***\n- 3 clusters: (walking), (walking upstairs, walking downstairs) and (sitting, standing, laying)\n- 6 clusters","b306ec35":"**Question 7**<br>\nWhich value of the hyperparameter `C` was chosen the best on the basis of cross-validation? <br>\n\n**Answer options:**\n- 0.001\n- 0.01\n- ***0.1 ***\n- 1\n- 10","e55b7800":"**Question 6:** <br>\nSelect all the correct statements. <br>\n\n**Answer options:**\n- *According to ARI, KMeans handled clustering worse than Agglomerative Clustering *\n- *For ARI, it does not matter which tags are assigned to the cluster, only the partitioning of instances into clusters matters *\n- *In case of random partitioning into clusters, ARI will be close to zero * ","1b91e647":"scaler = DecisionTreeRegressor()\nX_train_scaled = scaler.fit(X_train) \nX_train_tra = scaler.predict(X_train)\naccura\nX_test_scaled = scaler.fit(X_test)\nX_test_tra = scaler.predict(X_test)\naccuracy()","a6dbe7b9":"Perform clustering with the `KMeans` method, training the model on data with reduced dimensionality (by PCA). In this case, we will give a clue to look for exactly 6 clusters, but in general case we will not know how many clusters we should be looking for.\n\nOptions:\n\n- **n_clusters** = n_classes (number of unique labels of the target class)\n- **n_init** = 100\n- **random_state** = RANDOM_STATE (for reproducibility of the result)\n\nOther parameters should have default values.","2c1c8ae0":"------------------------","6e41827d":"**Question 1:** <br>\n\nWhat is the minimum number of principal components required to cover the 90% of the variance of the original (scaled) data?","7f8ef58b":"**Question 8:** <br>\nWhich activity type is worst detected by SVM in terms of precision? Recall?<br>\n\n**Answer options:**\n- precision \u2013 going up the stairs, recall \u2013 laying\n- precision \u2013 laying, recall \u2013 sitting\n- precision \u2013 walking, recall \u2013 walking\n- ***precision \u2013 standing, recall \u2013 sitting ***"}}