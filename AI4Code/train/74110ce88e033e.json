{"cell_type":{"52e3fb99":"code","c99a03e6":"code","17d71d2e":"code","1bc91f6a":"code","327309fd":"code","e51b338e":"code","c052bd97":"code","7d1222db":"code","675a57e1":"code","a54011d3":"code","7c933333":"code","6ac8fb1b":"code","5da19ae8":"code","5fff444f":"code","c81b5b1c":"code","1910765d":"code","aa67a677":"code","b470a7b8":"code","80a32642":"code","3dd1248a":"code","1e5ad1c1":"code","598b4cca":"code","a5aee7c0":"code","d010c89a":"code","f5fff8f7":"code","61fcbd78":"code","19c9cf89":"code","adaf13cd":"code","15a00bd2":"code","489d794c":"code","f7073654":"code","ae03da47":"code","560624a9":"code","cf90b8bf":"code","955b71f4":"code","5176caf5":"code","19354e44":"code","ef2f3bbd":"code","31e65388":"code","947ad797":"code","c43233a0":"code","d147724e":"code","91125e94":"code","75d2c9b6":"code","6999059d":"code","c3cf6194":"code","50895bbb":"code","90e14baa":"code","1345a4dd":"code","1dd9c55e":"markdown","4f674ea7":"markdown","6304d23c":"markdown","acc4a637":"markdown","80029a16":"markdown","760f3db8":"markdown","9c8f4f0b":"markdown","1eacd205":"markdown","c8db61be":"markdown","4fadbc89":"markdown","e9ff8f84":"markdown","c0fa9d74":"markdown","97d2e6a8":"markdown","f34023ba":"markdown","7743fa4a":"markdown","4cb32235":"markdown","98b8b465":"markdown","87f93a77":"markdown","bfb03b03":"markdown","07ab12bc":"markdown","a3f97697":"markdown","6715a6ac":"markdown","9c5bb73a":"markdown","adfe4687":"markdown","3351f15c":"markdown","e8450dd2":"markdown","95ae623d":"markdown","ac1aba69":"markdown","332c7c12":"markdown"},"source":{"52e3fb99":"# importing python packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy import stats\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","c99a03e6":"# loading Ford dataset\n\ndf = pd.read_csv('..\/input\/used-car-dataset-ford-and-mercedes\/ford.csv')\ndf.head()","17d71d2e":"# getting the shape of data\n\ndf.info","1bc91f6a":"# checking column types\n\ndf.dtypes","327309fd":"# detecting missing values in each column\n\nmissing_values = df.isnull()\n\nfor column in missing_values.columns.values.tolist():\n    print(column)\n    print(missing_values[column].value_counts())\n    print(\"\")","e51b338e":"# searching for duplicated rows\n\nduplicated_rows = df[df.duplicated()]\nduplicated_rows","c052bd97":"df.drop_duplicates(inplace = True)","7d1222db":"# models\n\ndf_mod = df['model'].value_counts().to_frame()\ndf_mod","675a57e1":"# years\n\ndf['year'].value_counts().to_frame()","a54011d3":"# dropping incorrect value\n\ndf.drop(df.loc[df['year'] == 2060].index, inplace = True)","7c933333":"# transmission\n\ndf['transmission'].value_counts().to_frame()","6ac8fb1b":"# fuel type\n\ndf['fuelType'].value_counts().to_frame()","5da19ae8":"# engine size\n\ndf['engineSize'].value_counts().to_frame()","5fff444f":"# dropping incorrect value\n\ndf.drop(df.loc[df['engineSize'] == 0.0].index, inplace = True)","c81b5b1c":"# prices grouped by models - bar chart\n\ndf_grp = df[['model', 'price']].groupby(by = ['model']).sum().sort_values(by = ['price'], ascending = False) \n\ndf_grp.plot(kind = 'bar', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.xlabel('Models', fontsize = 14)\nplt.ylabel('Price', fontsize = 14)\n\nplt.show()","1910765d":"# prices grouped by transmission - box plot\n\nplt.figure(figsize = (12, 8))\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.xlabel('Transmission type', fontsize = 14)\nplt.ylabel('Price', fontsize = 14)\n\nsns.boxplot(x = 'transmission', y = 'price', data = df, palette = 'Greens')","aa67a677":"# number of sales by models - horizontal bar chart\n\ndf_mod.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.xlabel('Used Car Sales ', fontsize = 14)\nplt.ylabel('Models', fontsize = 14)\n\nplt.show()","b470a7b8":"# prices grouped by fuel types - box plot\n\nplt.figure(figsize = (12, 8))\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.xlabel('Fuel Type', fontsize = 14)\nplt.ylabel('Price', fontsize = 14)\n\nsns.boxplot(x = 'fuelType', y = 'price', data = df, palette = 'Blues')","80a32642":"# getting statistical summary of numeric-typed columns\n\ndf.describe()","3dd1248a":"# checking correlations\n\ndf.corr()","1e5ad1c1":"# getting graphical overview with pair plots\n\nsns.pairplot(df)","598b4cca":"# year and price - regression plot\n\nsns.regplot(x = 'year', y = 'price', data = df, color = 'mediumaquamarine')\nplt.ylim(0,)","a5aee7c0":"# mileage and price - regression plot\n\nsns.regplot(x = 'mileage', y = 'price', data = df, color = 'palevioletred')\nplt.ylim(0,)","d010c89a":"# mileage and year - regression plot\n\nsns.regplot(x = 'mileage', y = 'year', data = df, color = 'steelblue')","f5fff8f7":"# tax and price - regression plot\n\nsns.regplot(x = 'tax', y = 'price', data = df, color = 'lightgrey')","61fcbd78":"# engine size and price - regression plot\n\nsns.regplot(x = 'engineSize', y = 'price', data = df, color = 'plum')","19c9cf89":"# miles per gallon and price - regression plot\n\nsns.regplot(x = 'mpg', y = 'price', data = df, color = 'tan')\nplt.ylim(0,)","adaf13cd":"# year and engine size\n\ndf['year'] = df['year'] \/ df['year'].max()\ndf['mileage'] = df['mileage'] \/ df['mileage'].max()\ndf['engineSize'] = df['engineSize'] \/ df['engineSize'].max()\n\ndf[['year', 'mileage', 'engineSize']].head()","15a00bd2":"df['fuelType'] = pd.get_dummies(df['fuelType'])\ndf['fuelType'] = df['fuelType'].astype('int')","489d794c":"# fitting and predicting\n\nX = df[['year']]\nY = df[['price']]\n\nlm_year = LinearRegression()\n\nlm_year.fit(X, Y)\n\nYhat = lm_year.predict(X)\nYhat[0:5]","f7073654":"# visualizing residuals\n\nsns.residplot(df['year'], df['price'])\nplt.show()","ae03da47":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square of train data is: \", lm_year.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","560624a9":"# fitting and predicting\n\nlm_ma = LinearRegression()\n\nX = df[['mileage']]\nY = df[['price']]\n\nlm_ma.fit(X, Y)\n\nYhat = lm_ma.predict(X)\nYhat[0:5]","cf90b8bf":"# visualizing residuals\n\nsns.residplot(df['mileage'], df['price'])\nplt.show()","955b71f4":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square is: \", lm_ma.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","5176caf5":"# fitting and predicting\n\nlm_es = LinearRegression()\n\nX = df[['engineSize']]\nY = df[['price']]\n\nlm_es.fit(X, Y)\n\nYhat = lm_es.predict(X)\nYhat[0:5]","19354e44":"# visualizing residuals\n\nsns.residplot(df['engineSize'], df['price'])\nplt.show()","ef2f3bbd":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square is: \", lm_es.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","31e65388":"# fitting and predicting\n\nlm_ft = LinearRegression()\n\nX = df[['fuelType']]\nY = df[['price']]\n\nlm_ft.fit(X, Y)\n\nYhat = lm_ft.predict(X)\nYhat[0:5]","947ad797":"# visualizing residuals\n\nsns.residplot(df['fuelType'], df['price'])\nplt.show()","c43233a0":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square is: \", lm_ft.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","d147724e":"# fitting and predicting\n\nlm_multi = LinearRegression()\n\nX = df[['year', 'mileage', 'engineSize', 'fuelType']]\nY = df[['price']]\n\nlm_multi.fit(X, Y)\n\nYhat = lm_multi.predict(X)\nYhat[0:5]","91125e94":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square is: \", lm_multi.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","75d2c9b6":"# Processing data using Pipeline\n\nX = df[['year', 'mileage', 'engineSize', 'fuelType']]\nY = df['price']\n\npipeline = [('scale', StandardScaler()), ('polynomial', PolynomialFeatures(degree = 2)), ('mode', LinearRegression())]\npoly_model = Pipeline(pipeline)","6999059d":"# fitting and predicting\n\nX = df[['year', 'mileage', 'engineSize', 'fuelType']]\nY = df[['price']]\n\npoly_model.fit(X, Y)\n\nYhat = poly_model.predict(X)\nYhat[0:5]","c3cf6194":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square is: \", poly_model.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","50895bbb":"# Processing data using Pipeline\n\nX = df[['year', 'mileage', 'engineSize', 'fuelType']]\nY = df['price']\n\npipeline = [('scale', StandardScaler()), ('polynomial', PolynomialFeatures(degree = 13)), ('mode', LinearRegression())]\npoly_model = Pipeline(pipeline)","90e14baa":"# fitting and predicting\n\nX = df[['year', 'mileage', 'engineSize', 'fuelType']]\nY = df[['price']]\n\npoly_model.fit(X, Y)\n\nYhat = poly_model.predict(X)\nYhat[0:5]","1345a4dd":"# determining model accuracy with R^2 and MSE\n\nprint(\"The R-square is: \", poly_model.score(X, Y))\nprint(\"The mean squared error is: \", mean_squared_error(df['price'], Yhat))","1dd9c55e":"# **Ford Price Prediction**","4f674ea7":"* **Simple Linear Regression**","6304d23c":"<i> \"Anyone who stops learning is old, whether at twenty or eighty. <br> Anyone who keeps learning stays young.\" <br> <br>Henry Ford","acc4a637":"Thanks Aditya for uploading this dataset, which I found greatly useful.","80029a16":"Due to correlation coefficients I've decided to use year, mileage, engine size and fuel type for price prediction. My data normalization approach here is Simple Feature Scaling.","760f3db8":"year vs price","9c8f4f0b":"# Turning fuel type into quantitative variables - One-Hot Encoding","1eacd205":"* Introduction \n* Acknowledgement\n* Importing packages, loading dataset\n* Data cleaning\n* Exploratory data analysis\n* Normalizing data for regression\n* Turning fuel type into quantitative variables - One-Hot Encoding\n* Model development and evaluation\n* Conclusion","c8db61be":"# Introduction","4fadbc89":"# Contents","e9ff8f84":"![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/a\/a0\/Ford_Motor_Company_Logo.svg\/150px-Ford_Motor_Company_Logo.svg.png)","c0fa9d74":"* Polynomial Regression","97d2e6a8":"mileage vs price","f34023ba":"fuel type vs price","7743fa4a":"The purpose of this notebook is to practice some components of a data science process, including data cleaning, exploratory data analysis (EDA) and regression. I hope we'll find few insights along the way. Constructive comments, suggestions are highly appreciated. <br> <br> I use a small part of '100,000 UK Used Car Data set', namely ford.csv. ","4cb32235":"## Conclusion","98b8b465":"* **Continuous numerical variables**","87f93a77":"# Exploratory data analysis","bfb03b03":"year, mileage, engine size and fuel type vs price","07ab12bc":"* **Multiple Linear Regression**","a3f97697":"* **Categorical variables vs price**","6715a6ac":"# Model development and evaluation","9c5bb73a":"# Data cleaning","adfe4687":"engine size vs price","3351f15c":"# Acknowledgement","e8450dd2":"# Importing packages, loading dataset","95ae623d":"# Normalizing data for regression ","ac1aba69":"Comparing the models above, we can ascertain that 13th degree polynomial regression is the best fit model since it has the highest R-squared value (0.87), and the lowest mean squared error (2929036).","332c7c12":"* **Value Counts**"}}