{"cell_type":{"98a268d5":"code","dbf29e49":"code","b13c6fec":"code","03614f4d":"code","3a62927f":"code","133618b2":"code","562df8a6":"code","aace1368":"code","9ec743ec":"code","9ef3bc7d":"code","077849c8":"code","085bacfc":"code","628e2a52":"code","6a2d7472":"code","8fdb26d8":"code","694ceec2":"code","24995f2d":"code","0606438f":"code","8eb9ea1f":"code","4239f70a":"code","4bd6e4ad":"code","b4819afd":"code","3eba0624":"markdown","3b5ea49a":"markdown","d910c72a":"markdown","a3a22ffc":"markdown","6fe8e73b":"markdown","5176eb16":"markdown","dd0e98a0":"markdown","22d827cb":"markdown","d0e1f43d":"markdown","d9f8d8dd":"markdown","b2fdbcaa":"markdown"},"source":{"98a268d5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","dbf29e49":"df_drivers = pd.read_csv('..\/input\/formula-1-world-championship-1950-2020\/drivers.csv', na_values='\\\\N')\ndf_teams = pd.read_csv('..\/input\/formula-1-world-championship-1950-2020\/constructors.csv', na_values='\\\\N')\ndf_results = pd.read_csv('..\/input\/formula-1-world-championship-1950-2020\/results.csv', na_values='\\\\N')\ndf_races = pd.read_csv('..\/input\/formula-1-world-championship-1950-2020\/races.csv', na_values='\\\\N')","b13c6fec":"# Pilotos\/Competidores\ndf_drivers.head(n=20)","03614f4d":"# Times\/Equipes\ndf_teams.head(n=20)","3a62927f":"# Corridas\ndf_races.head(n=20)","133618b2":"# Resultados\ndf_results.head(n=20)","562df8a6":"# Gera\u00e7\u00e3o dos data frames apenas com as colunas e dados que interessa.\ncol_list_drivers = ['driverId','forename','surname','code']\ndf_drivers_cl = df_drivers.filter(col_list_drivers, axis=1)\n\ncol_list_teams = ['constructorId','name']\ndf_teams_cl = df_teams.filter(col_list_teams, axis=1)\n\ncol_list_races = ['raceId','year','round']\ndf_races_cl = df_races.filter(col_list_races, axis=1) \n\n#Al\u00e9m de selecionar as colunas que fazem sentido para a analise, selecionei apenas as linhas em que o piloto ficou entre as 10 primeiras coloca\u00e7\u00f5es.\ncol_list_results = ['raceId','driverId','constructorId','position',]\ndf_results_cl = df_results[df_results['position'] < 11].filter(col_list_results, axis=1)","aace1368":"#Verifica\u00e7\u00e3o dos data frames criados anteriormente\nprint('Drivers')\nprint(df_drivers_cl.head(n=5))\nprint('')\nprint('Teams')\nprint(df_teams_cl.head(n=5))\nprint('')\nprint('Races')\nprint(df_races_cl.head(n=5))\nprint('')\nprint('Results')\nprint(df_results_cl.head(n=20))","9ec743ec":"#Visualiza\u00e7\u00e3o da quantidade de Etapas por ano\nsns.set_theme(style='whitegrid')\nfig, axis = plt.subplots(1,1, figsize=(20, 5), sharex=True)\n\ndf_races_plot = df_races_cl['year'].value_counts().reset_index()\ndf_races_plot.columns = ['Year', 'Races']\ndf_races_plot.rename(columns={'Year' : 'Races'})\ndf_races_plot.sort_values(by=['Year'], inplace=True)\ndf_races_plot.sort_values(by=['Year'])\n\ngraph = sns.barplot(x=df_races_plot['Year'], y=df_races_plot['Races'], palette=\"crest\")\ngraph.set(title='Qty races per Year', xlabel='Years', ylabel='Races')\ngraph.set_xticklabels(labels=graph.get_xticklabels(), rotation=90)\n\nmax = df_races_plot.describe() * 1.1\nmax_y = 0\n\n_, max_y_f = graph.get_ylim()\nmax_y = max_y_f if max_y_f > max_y else max_y\ngraph.set(ylim=(0, max_y))\n\nfig.show()\ndf_races_plot.transpose()","9ef3bc7d":"# Mudan\u00e7a dos valores de position e rank de Float para Int\nfloat_to_int = lambda value: int(value)\n\ntest_values = [10.0, 55.0, 2.0, 6.0]\nvalues_int = list(map(float_to_int, test_values))\n\nprint(test_values)\nprint(values_int)","077849c8":"df_results_cl.dtypes","085bacfc":"df_results_cl['position'] = df_results_cl['position'].apply(float_to_int)\n#df_results_cl['rank'] = df_results_cl['rank'].apply(float_to_int)","628e2a52":"df_results_cl.dtypes","6a2d7472":"# Adi\u00e7\u00e3o da coluna com quantidade de pontos\n\npoints = [1, 25, 18, 15, 12, 10, 8, 6, 4, 2, 1]\ndf_results_cl['points'] = 0\ndf_results_cl['year'] = 0\n\nfor index, result in df_results_cl.iterrows():\n    result['points'] = points[result['position']]\n\nfor index, result in df_results_cl.iterrows():\n    \n    raceId = int(result['raceId'])\n    year = int(df_races_cl[df_races_cl['raceId'] == raceId]['year'])\n    result['year'] = year\n        \ndf_results_cl\n    ","8fdb26d8":"# Cria\u00e7\u00e3o da listagem de anos\ndef ColumnToList(dataframe, array):\n    for n in dataframe.sort_values():\n        if n not in array:\n            array.append(n)\n\n            \nyears = []\nColumnToList(df_races_cl['year'], years)            \nprint(years)","694ceec2":"# Cria\u00e7\u00e3o do dataset de pilotos x anos x pontos que ser\u00e1 utilizado nos pr\u00f3ximos graficos\ndf_drivers_years_points = df_results_cl.filter(['driverId','constructorId','points','year'], axis=1)\npoints_drivers_array = []\npoints_teams_array=[]\n\nfor year in years:\n    \n    points_year = df_drivers_years_points[df_drivers_years_points['year'] == year]\n    for index, driver in df_drivers_cl.iterrows():\n        \n        array = []\n        driver_name = f'''{driver['forename']} {driver['surname']}'''\n        array.extend([driver_name, driver['code']])\n        array.append(year)\n        array.append(points_year[points_year['driverId'] == driver['driverId']].sum()['points'])\n        points_drivers_array.append(array)\n    \n    for index, team in df_teams_cl.iterrows():\n        \n        array = []\n        array.extend([team['name'], year])\n        array.append(points_year[points_year['constructorId'] == team['constructorId']].sum()['points'])\n        points_teams_array.append(array)\n\ndf_drivers_points = pd.DataFrame(points_drivers_array, columns=('name','code','year','points'))\ndf_teams_points = pd.DataFrame(points_teams_array, columns=('name','year','points'))\n","24995f2d":"# Visualiza\u00e7\u00e3o do dataframe dos piltos. Altere o valor de 1992 com o ano desejado.\n\nview_drivers = df_drivers_points[df_drivers_points['year'] == 1992]\nview_drivers = view_drivers[view_drivers['points'] > 0]\nview_drivers[view_drivers['year'] == 1992].sort_values(by=['points'], ascending=False)\n","0606438f":"# Visualiza\u00e7\u00e3o do dataframe das equipes. Altere o valor de 1992 com o ano desejado.\n\nview_teams = df_teams_points[df_teams_points['year'] == 1992]\nview_teams = view_teams[view_teams['points'] > 0]\nview_teams[view_teams['year'] == 1992].sort_values(by=['points'], ascending=False)\n","8eb9ea1f":"# Cria\u00e7\u00e3o dos gr\u00e1ficos\nsns.set_theme(style='whitegrid')\n\naxis = 0\nmax_y = 0\ncolumns = 2\nrows = int(len(years) \/ columns)\nview, axes = plt.subplots(rows,columns, figsize=(30, 300), sharex=False)\nplt.subplots_adjust(hspace = 0.8)\naxes = axes.flatten()\n\nfor year in years:\n    \n    plot = df_drivers_points[df_drivers_points['year'] == year]\n    plot = plot[plot['points'] > 0].sort_values(by=['points'], ascending=False, axis=0)\n    \n    fig = sns.barplot(x=plot['name'], y=plot['points'], ax=axes[axis], ci=None, palette=\"crest\")\n    fig.set(title=f'Standings of F1 {year}', xlabel='Drivers', ylabel='Points')\n    fig.set_xticklabels(labels=fig.get_xticklabels(), rotation=90)\n    \n    axis += 1\n    max = plot.describe() * 1.1\n    \n    _, max_y_f = fig.get_ylim()\n    max_y = max_y_f if max_y_f > max_y else max_y\n    fig.set(ylim=(0, max_y))\n\n    \nview.show()","4239f70a":"# Cria\u00e7\u00e3o dos gr\u00e1ficos\nsns.set_theme(style='whitegrid')\n\naxis = 0\nmax_y = 0\ncolumns = 2\nrows = int(len(years) \/ columns)\nview, axes = plt.subplots(rows,columns, figsize=(30, 300), sharex=False)\nplt.subplots_adjust(hspace = 0.4)\naxes = axes.flatten()\n\nfor year in years:\n    \n    plot = df_teams_points[df_teams_points['year'] == year]\n    plot = plot[plot['points'] > 0].sort_values(by=['points'], ascending=False, axis=0)\n    \n    fig = sns.barplot(x=plot['name'], y=plot['points'], ax=axes[axis], ci=None, palette=\"crest\")\n    fig.set(title=f'Standings of F1 {year}', xlabel='Teams', ylabel='Points')\n    fig.set_xticklabels(labels=fig.get_xticklabels(), rotation=90)\n    \n    axis += 1\n    max = plot.describe() * 1.1\n    \n    _, max_y_f = fig.get_ylim()\n    max_y = max_y_f if max_y_f > max_y else max_y\n    fig.set(ylim=(0, max_y))\n\n    \nview.show()","4bd6e4ad":"#Prepara\u00e7\u00e3o dos dataframes\n\nteams_list = []\ndrivers_list = []\n\nColumnToList(df_teams_points['name'], teams_list)\nColumnToList(df_drivers_points['name'], drivers_list)\n\ndef TotalPoints(dataframe, column_name, list):\n    array_df = []\n    for n in list:\n        \n        array = []\n        array.extend([n, dataframe[dataframe[column_name] == n].sum()['points']])\n        array_df.append(array)\n        \n    return pd.DataFrame(array_df, columns=('name', 'points'))\n\ndf_total_teams_points = TotalPoints(df_teams_points, 'name', teams_list)\ndf_total_drivers_points = TotalPoints(df_drivers_points, 'name', drivers_list)\n","b4819afd":"# Cria\u00e7\u00e3o dos graficos\n\ndataframes = [df_total_drivers_points, df_total_teams_points]\nsns.set_theme(style='whitegrid')\n\naxis = 0\nmax_y = 0\nview, axes = plt.subplots(2,1, figsize=(30, 40), sharex=False)\nplt.subplots_adjust(hspace = 0.2)\naxes = axes.flatten()\n\nfor df in dataframes:\n    \n    plot = df[df['points'] > 200].sort_values(by=['points'], ascending=False, axis=0)\n    \n    fig = sns.barplot(x=plot['name'], y=plot['points'], ax=axes[axis], ci=None, palette=\"crest\")\n    fig.set(title=f'Total points of F1', xlabel='Names', ylabel='Points')\n    fig.set_xticklabels(labels=fig.get_xticklabels(), rotation=90)\n    \n    axis += 1\n    max = plot.describe() * 1.1\n    \n    _, max_y_f = fig.get_ylim()\n    max_y = max_y_f if max_y_f > max_y else max_y\n    fig.set(ylim=(0, max_y))\n\n    \nview.show()","3eba0624":"## 2.1. Importa\u00e7\u00e3o de Bibliotecas","3b5ea49a":"## 4.1. Quantidade de Etapas por Temporada\n\nO calculo ser\u00e1 feito por etapas, em um primeiro momento \u00e9 importante separar a quantidade de etapas de cada temporada.","d910c72a":"# 2\\. Montagem da Estrutura\n\nImporta\u00e7\u00e3o de Bibliotecas e Dataset","a3a22ffc":"# 3\\. Explora\u00e7\u00e3o dos Dados\n\nVisualiza\u00e7\u00e3o e tratamento dos dados do Dataset, al\u00e9m de separar os dados que ser\u00e3o utilizados.","6fe8e73b":"## 4.2. Total de pontos por temporada\n\nVisualiza\u00e7\u00e3o do total de pontos de cada piloto e equipe por temporada.","5176eb16":"## 2.2. Carga de Dados","dd0e98a0":"# 5\\. Pontos totais\n\nCalculos e gr\u00e1ficos da soma de todos os pontos de todos os anos.","22d827cb":"# 4\\. An\u00e1lise dos dados\n\nAnalise dos dados e levantamento dos primeiros dados conforme metodo de calculo.","d0e1f43d":"# 1\\. Descri\u00e7\u00e3o e met\u00f3do de c\u00e1lculo\nA ideia \u00e9 analisar os dados de todos os anos da Formula 1 e definir o Campe\u00e3o de todos os tempos. \nSer\u00e1 utilizada uma base de dados de 1950 at\u00e9 2020, por\u00e9m o sistema de pontua\u00e7\u00e3o ser\u00e1 utilizado do ano de 2020, conforme lista abaixo.\n1. 25 pontos;\n2. 18 pontos;\n3. 15 pontos;\n4. 12 pontos;\n5. 10 pontos;\n6. 8 pontos;\n7. 6 pontos;\n8. 4 pontos;\n9. 2 pontos;\n10. 1 ponto.\n\n- N\u00e3o ser\u00e1 utilizado o ponto extra de volta mais r\u00e1pida, pois o dataset esta incompleto.","d9f8d8dd":"## 3.1. Visualiza\u00e7\u00e3o dos dados","b2fdbcaa":"## 3.2. Tratamento dos Dados\n\nMontagem da tabela principal de trabalho."}}