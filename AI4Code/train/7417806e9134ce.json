{"cell_type":{"5ee0423c":"code","b321bf01":"code","264f514a":"code","b8a780a9":"code","c9b2ff0e":"code","ca501619":"code","5134e23c":"code","66f15e59":"code","4a6e609c":"code","55ef0473":"code","fede0b97":"code","4080b6bf":"code","830e62aa":"code","02d05d01":"code","6588d57f":"code","058cf42c":"code","b7087e38":"code","f1e6d831":"code","f314a872":"code","2bc3b2d1":"code","81c9a17a":"code","11df9970":"code","eb70e6af":"code","5ce74e8c":"code","b7250df5":"code","b11d6e98":"code","61bceeab":"code","b026ed6e":"code","541b5c44":"code","eabb0062":"code","6b06f277":"code","43d8b5e0":"code","d70c78c6":"code","2d1a431a":"code","c353a3ec":"code","16c6585e":"code","f9a91580":"code","1bb275a7":"code","dff8124c":"code","dae52180":"markdown","6d14f288":"markdown","bc80cf38":"markdown","210e7b2d":"markdown","30e5f733":"markdown","fb6f404b":"markdown","57cffb4c":"markdown","ff3719ed":"markdown","47bb3b71":"markdown","5d2efdd9":"markdown","c9366ad6":"markdown","b3a2c859":"markdown","3df06284":"markdown","11a59e56":"markdown","19f71e53":"markdown","c2de3eee":"markdown","ffb75847":"markdown","f05b6bd9":"markdown","e3b48975":"markdown","e8c11ab9":"markdown","d628b3c6":"markdown","5dc174ef":"markdown","9cdf639b":"markdown","e323d857":"markdown","268edaf6":"markdown","7979c8e5":"markdown","20d17fb0":"markdown","12c07022":"markdown","4ffb145e":"markdown","b379ba94":"markdown","879a45ad":"markdown","d0c37758":"markdown"},"source":{"5ee0423c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))\n","b321bf01":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","264f514a":"train.head()","b8a780a9":"train.info()","c9b2ff0e":"likely_cat = {}\nfor c in train.columns:\n    likely_cat[c] = 1.*train[c].nunique()\/train[c].count() < 0.005\nlikely_cat= pd.Series(likely_cat)\nlikely_cat[likely_cat==True]","ca501619":"train.var_68.nunique()","5134e23c":"trainvaluedist = pd.DataFrame(train.iloc[:,2:].max(axis=0),columns=[\"Max_value\"])\ntrainvaluedist['Min_value'] = train.iloc[:,2:].min(axis=0)\ntrainvaluedist['Median_value'] = train.iloc[:,2:].median(axis=0)\ntrainvaluedist.head()","66f15e59":"sns.set(rc={'figure.figsize':(24,12)})\nline=sns.lineplot(data=trainvaluedist )\nline= line.set(yticks=[-80,-60,-40,-30,-20,-10,0,10,20,30,40,60,80])\n","4a6e609c":"colzerototen= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].min() >=0) & (train.loc[:,c].max()< 10) ]\nprint('Number of features with positive values and maximum value less than 10 :',len(colzerototen))\ncolzerototwenty= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].min() >=0) & (train.loc[:,c].max() >= 10) & (train.loc[:,c].max() < 20)  ]\nprint('Number of features with positive values maximum value between 10 & 20 :',len(colzerototwenty))\ncolzeroandtwentyplus= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].min() >=0) & (train.loc[:,c].max() >= 20)]\nprint('Number of features with positive values maximum value > 20 :',len(colzeroandtwentyplus))\ncolzerominus= [c for c in train.iloc[:,2:].columns if train.loc[:,c].max() <0 ]\nprint('Number of features with only negative values :',len(colzerominus))\ncolplustenminusten= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() <= 10) & (train.loc[:,c].min() >=-10 )& (train.loc[:,c].min()< 0 )]\nprint('Number of features with negative values between 10 and -10 :',len(colplustenminusten))\ncolplustwentyminusten= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() <= 20)& (train.loc[:,c].max() > 10) & (train.loc[:,c].min() >=-10 ) & (train.loc[:,c].min() < 0 )]\nprint('Number of features with max value between 10 and 20 and min value between  between 0 and -10  :',len(colplustwentyminusten))\ncolplustwentyminustwenty= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() <= 20) &  (train.loc[:,c].min() < -10 ) & (train.loc[:,c].min() >= -20 )]\nprint('Number of features with max value less than 20 and min value between -10 and -20 :',len(colplustwentyminustwenty))\ncolplustwentyminustwentyless= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() <= 20)& (train.loc[:,c].min() < -20 )]\nprint('Number of features with max value less than 20 and min value less than -20 :',len(colplustwentyminustwentyless))\ncolplustwentymoreminusten= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() >20)& (train.loc[:,c].min()< 0 ) & (train.loc[:,c].min()>= -10 )]\nprint('Number of features with max value more than 20 and min value more than -10 :',len(colplustwentymoreminusten))\ncolplustwentymoreminustwenty= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() >20)& (train.loc[:,c].min()< -10 ) & (train.loc[:,c].min()>= -20 )]\nprint('Number of features with max value more than 20 and min value between -10 and -20:',len(colplustwentymoreminustwenty))\ncolplustwentymoreminustwentymore= [c for c in train.iloc[:,2:].columns if (train.loc[:,c].max() >20)& (train.loc[:,c].min()< -20 )]\nprint('Number of features with max value more than 20 and min value less than -20:',len(colplustwentymoreminustwentymore))","55ef0473":"sns.set(rc={'figure.figsize':(20,8)})\nsetpositive=train.loc[:,colzerototen].boxplot(rot=90)\nsetpositive=setpositive.set(yticks=[0,2.5,5,7.5,10],title=\"Features with  positive values and maximum value less than 10\")","fede0b97":"sns.set(rc={'figure.figsize':(20,16)})\nplotlist =['hist'+ str(col) for col in colzerototen]\n\nfor k in range(len(colzerototen)):\n     plt.subplot(4,4,k+1)\n     plotlist[k] =plt.hist(train[colzerototen[k]])\n     #plotlist[k].set(title=colzerototen[k])\n    \n","4080b6bf":"sns.set(rc={'figure.figsize':(20,16)})\ndef sephist(col):\n    yes = train[train['target'] == 1][col]\n    no = train[train['target'] == 0][col]\n    return yes, no\n\nfor num, alpha in enumerate(colzerototen):\n    plt.subplot(4, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","830e62aa":"sns.set(rc={'figure.figsize':(20,8)})\nsetpositive20=train.loc[:,colzerototwenty].boxplot(rot=90)\nsetpositive20=setpositive20.set(yticks=[0,5,10,15,20],title=\"Features with  positive values and maximum value between 10 & 20\")","02d05d01":"sns.set(rc={'figure.figsize':(16,24)})\nfor num, alpha in enumerate(colzerototwenty):\n    plt.subplot(8, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","6588d57f":"sns.set(rc={'figure.figsize':(20,8)})\nsetpositive20plus=train.loc[:,colzeroandtwentyplus].boxplot(rot=90)\nsetpositive20plus=setpositive20plus.set(yticks=[0,10,20,30,40],title=\"Features with  positive values and maximum value more than 20\")","058cf42c":"sns.set(rc={'figure.figsize':(16,20)})\nfor num, alpha in enumerate(colzeroandtwentyplus):\n    plt.subplot(6, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","b7087e38":"sns.set(rc={'figure.figsize':(16,8)})\nsetplustenminusten = train.loc[:,colplustenminusten].boxplot(rot=90)\nsetplustenminusten = setplustenminusten.set(yticks=[-10,-5,0,5,10],title=\"Features with  values between 10 and -10\")","f1e6d831":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustenminusten):\n    plt.subplot(4, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","f314a872":"sns.set(rc={'figure.figsize':(16,8)})\nsetplustwentyminusten = train.loc[:,colplustwentyminusten].boxplot(rot=90)\nsetplustwentyminusten = setplustwentyminusten.set(yticks=[-10,-5,0,5,10,15,20],title=\"Features with  max value between 10 and 20 and min values between 0 and -10\")","2bc3b2d1":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustwentyminusten):\n    plt.subplot(5, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","81c9a17a":"sns.set(rc={'figure.figsize':(20,8)})\nsetplustwentyminustwenty=train.loc[:,colplustwentyminustwenty].boxplot(rot=90)\nsetplustwentyminustwenty=setplustwentyminustwenty.set(yticks=[-20,-15,-10,-5,0,5,10,15,20],title=\"Features with  max value between 10 and 20 and min values between -10  and -20\")","11df9970":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustwentyminustwenty):\n    plt.subplot(4, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","eb70e6af":"sns.set(rc={'figure.figsize':(20,8)})\nsetplustwentyminustwentyless=train.loc[:,colplustwentyminustwentyless].boxplot(rot=90)\nsetplustwentyminustwentyless=setplustwentyminustwentyless.set(yticks=[-40,-30,-20,-15,-10,-5,0,5,10,15,20],title=\"Features with  max value between 10 and 20 and min values less than -20\")","5ce74e8c":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustwentyminustwentyless):\n    plt.subplot(4, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","b7250df5":"sns.set(rc={'figure.figsize':(20,8)})\nsetplustwentymoreminusten=train.loc[:,colplustwentymoreminusten].boxplot(rot=90)\nsetplustwentymoreminusten=setplustwentymoreminusten.set(yticks=[-10,-5,0,5,10,15,20,30,40,60],title=\"Features with  max value more than 20 and min values between 0 and -10\")","b11d6e98":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustwentymoreminusten):\n    plt.subplot(7, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","61bceeab":"sns.set(rc={'figure.figsize':(20,8)})\nsetplustwentymoreminustwenty=train.loc[:,colplustwentymoreminustwenty].boxplot(rot=90)\nsetplustwentymoreminustwenty=setplustwentymoreminustwenty.set(yticks=[-20,-15,-10,-5,0,5,10,15,20,30,40,60],title=\"Features with  max value more than 20 and min values between -10 and -20\")","b026ed6e":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustwentymoreminustwenty):\n    plt.subplot(7, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","541b5c44":"sns.set(rc={'figure.figsize':(20,8)})\nsetplustwentymoreminustwentymore=train.loc[:,colplustwentymoreminustwentymore].boxplot(rot=90)\nsetplustwentymoreminustwentymore=setplustwentymoreminustwentymore.set(yticks=[-40,-30,-20,-10,0,5,10,15,20,30,40,60],title=\"Features with  max value more than 20 and min values less than -20\")","eabb0062":"sns.set(rc={'figure.figsize':(16,16)})\nfor num, alpha in enumerate(colplustwentymoreminustwentymore):\n    plt.subplot(6, 4, num+1)\n    plt.hist(sephist(alpha)[0], alpha=0.75, label='yes', color='g')\n    plt.hist(sephist(alpha)[1], alpha=0.25, label='no', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","6b06f277":"traincorr = train.iloc[:,2:].corr()\ntraincorr.head()","43d8b5e0":"sns.set(rc={'figure.figsize':(10,8)})\nsns.heatmap(traincorr,xticklabels=traincorr.columns,yticklabels=traincorr.columns,cmap=sns.diverging_palette(240, 10, n=9))","d70c78c6":"from scipy.stats import ks_2samp\nfrom tqdm import tqdm\nks_values =[]\np_values  = []\ntrain_columns = train.iloc[:,2:].columns\nfor i in tqdm(train_columns):\n    ks_values.append(ks_2samp(test[i] , train[i])[0])\n    p_values.append(ks_2samp(test[i] , train[i])[1])\np_values_series = pd.Series(p_values, index = train_columns) \n","2d1a431a":"dissimiliar_features= p_values_series[p_values_series <0.05].index","c353a3ec":"train['is_train'] = 1\ntest['is_train'] = 0\ncombined = pd.concat([train,test],sort=False)","16c6585e":"sns.set(rc={'figure.figsize':(20,48)})\ndef  diffcheck(col):\n    traindata = combined[combined['is_train'] == 1][col]\n    testdata = combined[combined['is_train'] == 0][col]\n    return traindata, testdata\n\nfor num, alpha in enumerate(dissimiliar_features):\n    plt.subplot(12, 4, num+1)\n    plt.hist(diffcheck(alpha)[0], alpha=0.75, label='train', color='g')\n    plt.hist(diffcheck(alpha)[1], alpha=0.25, label='test', color='r')\n    plt.legend(loc='upper right')\n    plt.title(alpha)\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","f9a91580":"sns.set(rc={'figure.figsize':(20,48)})\nfig, axes = plt.subplots(8,3)\nfor num, alpha in enumerate(list(dissimiliar_features[0:24])):\n    a = sns.boxenplot(x='is_train',y=alpha,data=combined, ax=axes.flatten()[num])\n# fig.delaxes(axes[11,2])\n# fig.delaxes(axes[11,3])\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0) \nplt.title(alpha)\nplt.show()\n","1bb275a7":"sns.set(rc={'figure.figsize':(20,48)})\nfig, axes = plt.subplots(8,3)\nfor num, alpha in enumerate(list(dissimiliar_features[24:])):\n    a = sns.boxenplot(x='is_train',y=alpha,data=combined, ax=axes.flatten()[num])\nfig.delaxes(axes[7,1])\nfig.delaxes(axes[7,2])\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0) \nplt.title(alpha)\nplt.show()","dff8124c":"# sns.set(rc={'figure.figsize':(16,48)})\n# set1=train.iloc[:,47:92].hist(layout=(9,5),sharey=True)","dae52180":"**Features with  max value between 10 &  20  and min values between -10 & -20**","6d14f288":"var_84, var _155, var_157 appear to have similiar distribution of values and so does  var_11, var_180 & var_185","bc80cf38":"**Features with  max value more than 20 and min values between -10 and -20**","210e7b2d":"Before concluding let's do a check of whether feature values in test and train comes from the same sampling  distribution.\nKolmogorov-Smirnov  is a two-sided test for the null hypothesis that 2 independent samples are drawn from the same continuous distribution.\nIf the K-S statistic is small or the p-value is high, then we cannot reject the hypothesis that the distributions of the two samples are the same.","30e5f733":"**Features with  max value more than 20 and min values less than -20**","fb6f404b":"**Features with  values between 10 and -10**","57cffb4c":"**Checking for correlation between feature**s","ff3719ed":"All the 200 features have numeric values . Let's check first if some of these numeric features are categorical  or boolean .In that case they will have less than 500 unique values.","47bb3b71":"For the two tailed test at 95% confidence level the pvalue has to be less than 0.05 to reject the null hypothesis that both samples are from same distribution.Let's look for values less than 0.05","5d2efdd9":"Combined all values in the features are between 80 and -90.  From the plot it looks like the features can be seggregrated into 10 groups  based on their max and min values.","c9366ad6":"**Kolmogorov-Smirnov test**","b3a2c859":"var_21 & var_172 appear to have similiar distribution of values","3df06284":"Visualizing Data is a very important step in a Data Science project.  As per the recent Kagagle Survey 10-20% of the total Data Science Project time is spent on visualizing data. https:\/\/www.kaggle.com\/rajeshcv\/state-of-data-science-machine-learning-2018\n\nSaS Data Visualization\u2019s webpage explain Data visualization  beautifully.\n\n*'The way the human brain processes information, using charts or graphs to visualize large amounts of complex data is easier than poring over spreadsheets or reports. Data visualization is a quick, easy way to convey concepts in a universal manner\u200a\u2014\u200aand you can experiment with different scenarios by making slight adjustments.'*\n\nIn the Santander Customer Transaction Prediction competition the features are predominently numeric.\n\nThis kernel's objective is to\n*     Understand the value distribution in various features through boxplots and histograms. \n*     Seggregate features into groups based on range of values.\n*     Identify  features with similiar value distribution.\n*     To understand if there is any difference in values between the two target groups 'transaction done and 'transaction not done'\n*  Check whether feature values in test and train comes from the same sampling  distribution.\n\n\n","11a59e56":"**Features with  positive values and maximum value greater than 20**","19f71e53":"var_103 values lie  between 1.1 and 2 , var_148 between 3.4 and 4.6 , var_68 values are in a narrow range between 4.99 and 5.04,   var_161 between 5 and 6.2  &  var_91 between 6.6 and 7.4.  Considering var_166 with values between 2 and 4 and var_169 and var_133  they all appear to be in sequence.\n\nHowever there is no significant difference in values between the \"transaction done\" and \"transaction not done\" groups","c2de3eee":"As per the Kolmogorov-Smirnov test 46 features have a high probability of not being from the same sampling distribution.\nWill this affect the models? \nLet's combine the test and train data to compare these features and understand their didtribution in train and test.","ffb75847":"(var_73 & var_158) , (var_92,var_154,var_159 & var_163) , ( var_20 & var_55) \nThe features within the above groups  appear to have similiar distribution of values . Here also the range  of values for the *'transaction done'* group in green appears to be shorter.","f05b6bd9":"var_12,  var_15 ,var_25, var_34,  var_43, var_108, var_125 have very low range of values further elaborated by the histogram below.","e3b48975":"**Features with  positive values and maximum value between 10 & 20**","e8c11ab9":"**Features with  max value between 10 &  20  and min values between 0 & -10**","d628b3c6":"**Data Visualization**","5dc174ef":"**Features with  max value between 10 &  20  and min values less than  -20**","9cdf639b":"**Features with  positive values and maximum value less than 10**","e323d857":"**Features with  max value greater than 20  and min values less than  -20**","268edaf6":"var_68,var_91,var_103,var_148 and var_161 have comparatively lower range of values .\nThe histograms below shows the distribution of values in cases of transaction done in green color (target=1) and transaction not done (target=0) in red colour.","7979c8e5":"From the above histogram for many of the features the ' transaction done'  group in green seems to have  lower range than the 'transaction not done' group in red.","20d17fb0":"var_39,var_65 and var_138 appear to have similiar distribution of values and so is var_63 and var_128\nFor some of the features the ' transaction done'  group in green seems to have  lower range than the 'transaction not done' group in red.","12c07022":"var_47 & var_187 appear to have similiar distribution of values","4ffb145e":"All those variables with a short range of values have values in the range 10 to 15 and as in the earlier group appear to be in some sequence.","b379ba94":"var_85, var_194 and  var_198 appear to have similiar distribution of values.  var_0, var_46 , var_56, var_175 and var_177 also appear to have a similiar value distribution.","879a45ad":"***No correlation between any features . Does this mean all features are important?***","d0c37758":"None of the features are categorical or boolean except 'target'. Let's understand the range of values of each of these features by plotting the max, min and median value of the features."}}