{"cell_type":{"eaf82c34":"code","1f085862":"code","4587384a":"code","9d82987c":"code","c05499af":"code","34f2f157":"code","a43584ad":"code","7c084025":"code","38d95d87":"code","5e379abc":"code","f09cd3b4":"code","ce2e0641":"code","3539cbeb":"code","d818aa87":"code","36c3c3cf":"code","7d7507d5":"code","b12e3136":"code","6251155f":"code","a5ec4842":"code","ad07fd99":"code","5e8b254b":"code","714c3914":"code","721505c3":"code","173de7bd":"code","cbc0e99f":"code","44eb52fe":"code","44aac603":"code","e1ef0ab5":"code","b9bed31e":"code","55af5a66":"markdown","517aa7e4":"markdown","a5ae8aec":"markdown","8f35ef1d":"markdown","c395d564":"markdown","7ec047bf":"markdown"},"source":{"eaf82c34":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom datetime import datetime","1f085862":"products_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\nproducts_df.head()","4587384a":"districts_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\ndistricts_df.head()","9d82987c":"path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    district_id = filename.split(\"\/\")[4].split(\".\")[0]\n    df[\"district_id\"] = district_id\n    li.append(df)\n    \nengagement_df = pd.concat(li)\nengagement_df = engagement_df.reset_index(drop=True)\nengagement_df[engagement_df.lp_id==92844]","c05499af":"msno.bar(products_df,color='#7209b7', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.title('product_df missing value')\nplt.show()\n\nmsno.bar(districts_df,color='#f72585', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.title('districts_df missing value')\nplt.show()\n\nmsno.bar(engagement_df,color='#4895ef', sort=\"ascending\", figsize=(10,5), fontsize=12)\nplt.title('engagement_df missing value')\nplt.show()","34f2f157":"mean_smr = engagement_df.groupby('lp_id').agg('mean').reset_index().sort_values(by='pct_access', ascending = False)\nmean_smr.lp_id = pd.Categorical(mean_smr.lp_id)\nprint('Total LP ID:', len(mean_smr))\nprint('Total LP ID with pct_access <= 0.5:', \"{0:.0%}\".format(len(mean_smr[mean_smr.pct_access<=0.5])\/len(mean_smr)))\nprint('Total LP ID with engagement index <= 20:', \"{0:.0%}\".format(len(mean_smr[mean_smr.engagement_index<=20])\/len(mean_smr)))\nmean_smr.head(3)","a43584ad":"import plotly.express as px\n\nfig = px.histogram(mean_smr, x=\"pct_access\", title='Pct Access Distribution')\nfig.show()\n\nfig = px.histogram(mean_smr, x=\"engagement_index\", title='engagement index Distribution')\nfig.show()\n\nfig = px.histogram(mean_smr[mean_smr.pct_access<=0.5], x=\"pct_access\", title='Pct Access (<=0.5) Distribution')\nfig.show()\n\nfig = px.histogram(mean_smr[mean_smr.engagement_index<=20], x=\"engagement_index\", title='engagement index (<=20) Distribution')\nfig.show()","7c084025":"def aggregation_by_group(data, group_var, id_var, agg='count', top = 10):\n    keep_data = data.copy()\n    if isinstance(group_var, list) == False:\n        keep_data[group_var] = keep_data[group_var].fillna('NULL')  \n        keep_data = keep_data[[id_var, group_var]].groupby(group_var).agg(agg).reset_index().sort_values(by=id_var, ascending = False)\n        keep_data = keep_data.rename(columns={id_var: agg}).reset_index(drop = True)\n    if isinstance(group_var, list) == True:\n        keep_var = group_var + [id_var] \n        keep_data = keep_data[keep_var].groupby(group_var).agg(agg).reset_index().sort_values(by=id_var, ascending = False)\n        keep_data = keep_data.rename(columns={id_var: agg}).reset_index(drop = True)\n    if top == 0:\n        return keep_data\n    else:\n        return keep_data.head(top)\n    \npal1 = [\"#fec5bb\",\"#fcd5ce\",\"#fae1dd\",\"#f8edeb\",\"#e8e8e4\",\"#d8e2dc\",\"#ece4db\",\"#ffe5d9\",\"#ffd7ba\",\"#fec89a\"]\npal2 = [\"#ffcbf2\",\"#f3c4fb\",\"#ecbcfd\",\"#e5b3fe\",\"#e2afff\",\"#deaaff\",\"#d8bbff\",\"#d0d1ff\",\"#c8e7ff\",\"#c0fdff\"]\npal3 = [\"#d6d2d2\",\"#f1e4f3\",\"#f4bbd3\",\"#f686bd\",\"#fe5d9f\"]\npal4 = [\"#a09abc\",\"#b6a6ca\",\"#d5cfe1\",\"#e1dee9\",\"#d4bebe\"]","38d95d87":"state_smr = aggregation_by_group(districts_df, group_var = 'state', id_var = 'district_id', agg='count', top = 0)\nplt.figure(figsize=(16, 10))\nax = sns.barplot(y=\"state\" \n                 , x=\"count\" \n                 , data=state_smr\n                 , palette='YlOrBr')","5e379abc":"locale_smr = aggregation_by_group(districts_df, group_var = 'locale', id_var = 'district_id', agg='count', top = 0)\nfig = px.pie(locale_smr, values='count', names='locale', title='Population of locale')\nfig.show()","f09cd3b4":"provider_smr = aggregation_by_group(products_df, group_var = 'Provider\/Company Name', id_var = 'LP ID', agg='count', top = 10)\nax = sns.barplot(y=\"Provider\/Company Name\" \n                 , x=\"count\" \n                 , data=provider_smr\n                 , palette=pal2)","ce2e0641":"sector_smr = aggregation_by_group(products_df, group_var = 'Sector(s)', id_var = 'LP ID', agg='count', top = 10)\nfig = px.pie(sector_smr, values='count', names='Sector(s)', title='Population of Sectors')\nfig.show()","3539cbeb":"function_smr = aggregation_by_group(products_df, group_var = 'Primary Essential Function', id_var = 'LP ID', agg='count', top = 20)\nplt.figure(figsize=(16, 10))\nax = sns.barplot(y=\"Primary Essential Function\" \n                 , x=\"count\" \n                 , data=function_smr\n                 , palette=pal2)","d818aa87":"print(products_df['LP ID'].nunique())\nprint(engagement_df.lp_id.nunique())\nprint(engagement_df['district_id'].nunique())\nprint(districts_df['district_id'].nunique())","36c3c3cf":"products_engagement_data = pd.merge(products_df, engagement_df, left_on='LP ID', right_on='lp_id')\nproducts_engagement_data.head()","7d7507d5":"product_pctaccess_smr = aggregation_by_group(products_engagement_data, group_var = 'Product Name', id_var = 'pct_access', agg='mean', top = 10)\nax = sns.barplot(y=\"Product Name\" \n                 , x=\"mean\" \n                 , data=product_pctaccess_smr\n                 , palette=pal2)","b12e3136":"product_engage_smr = aggregation_by_group(products_engagement_data, group_var = 'Product Name', id_var = 'engagement_index', agg='mean', top = 10)\nax = sns.barplot(y=\"Product Name\" \n                 , x=\"mean\" \n                 , data=product_engage_smr\n                 , palette=pal2)","6251155f":"us_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\nengagement_df[\"district_id\"] = engagement_df[\"district_id\"].astype(str).astype(int)\ndistricts_engagement_data = pd.merge(districts_df, engagement_df, left_on='district_id', right_on='district_id')\ndistricts_engagement_data['state_code'] = districts_engagement_data['state'].map(us_state_abbrev)\ndistricts_engagement_data.head()","a5ec4842":"print('products_engagement_data info:')\nprint(\"data size: \",len(products_engagement_data))\nprint('len of unique lp id',products_engagement_data['LP ID'].nunique())\nprint('len of unique district id',products_engagement_data['district_id'].nunique())\nprint()\nprint('districts_engagement_data info:')\nprint(\"data size: \",len(districts_engagement_data))\nprint('len of unique lp id',districts_engagement_data['lp_id'].nunique())\nprint('len of unique district id',districts_engagement_data['district_id'].nunique())\n","ad07fd99":"from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\ndr = pd.date_range(start='2020-01-01', end='2020-12-31')\ncal = calendar()\nholidays = cal.holidays(start=dr.min(), end=dr.max())\nholidays","5e8b254b":"pct_accs_avg_state_smr = aggregation_by_group(districts_engagement_data, group_var = ['state','time'], id_var = 'pct_access', agg='count', top = 0).sort_values(by=['state','time'])\npct_accs_avg_state_smr['time'] = pct_accs_avg_state_smr['time'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))\npct_accs_avg_state_smr['weekday'] = pct_accs_avg_state_smr.time.apply(lambda x: (x.weekday()<5) & (x not in holidays))","714c3914":"fig = px.line(pct_accs_avg_state_smr[pct_accs_avg_state_smr['weekday']==True], x=\"time\", y=\"count\", color='state')\nfig.show()","721505c3":"pct_accs_avg_locale_smr = aggregation_by_group(districts_engagement_data, group_var = ['locale','time'], id_var = 'pct_access', agg='count', top = 0).sort_values(by=['locale','time'])\npct_accs_avg_locale_smr['time'] = pct_accs_avg_locale_smr['time'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))\npct_accs_avg_locale_smr['weekday'] = pct_accs_avg_locale_smr.time.apply(lambda x: (x.weekday()<5) & (x not in holidays))\nfig = px.line(pct_accs_avg_locale_smr[pct_accs_avg_locale_smr['weekday']==True], x=\"time\", y=\"count\", color='locale')\nfig.show()","173de7bd":"import plotly.express as px\ndef dynamic_choro_map(data, iso_code, country, feature, date_var, title, animation = True):\n    \"\"\"\n    :param data: dataset\n    :param iso_code: country's iso code variable name\n    :param country: country variable name\n    :param feature: feature need to be shown in the plot\n    :param date: date (object)\n    :param title: title\n    :return:\n    \"\"\"\n    df = data[[iso_code, feature, date_var, country]]\n    df = df.sort_values(date_var, ascending = True)\n    df['date'] = df[date_var].apply(lambda x: x.strftime('%Y-%m-%d'))\n    color_range = int(df[feature].quantile(0.95))\n    if animation == True:\n        fig = px.choropleth(\n            df,                            # Input Dataframe\n            locations=iso_code,           # identify country code column\n            color=feature,                     # identify representing column\n            hover_name=country,              # identify hover name\n            animation_frame='date',\n            color_continuous_scale= 'viridis',\n            range_color=[0,color_range],\n            locationmode=\"USA-states\",\n            scope=\"usa\",\n            title='<span style=\"font-size:36px; font-family:Times New Roman\">'+title\n        )             \n    else:\n        fig = px.choropleth(\n            df,                            # Input Dataframe\n            locations=iso_code,           # identify country code column\n            color=feature,                     # identify representing column\n            hover_name=country,              # identify hover name\n            color_continuous_scale= 'viridis',\n            range_color=[0,color_range],\n            locationmode=\"USA-states\",\n            scope=\"usa\",\n            title='<span style=\"font-size:36px; font-family:Times New Roman\">'+title\n        )           \n    fig.show()","cbc0e99f":"pct_accs_avg_state_smr = aggregation_by_group(districts_engagement_data, group_var = ['state_code','state','time'], id_var = 'pct_access', agg='mean', top = 0).sort_values(by=['state','time'])\npct_accs_avg_state_smr['time'] = pct_accs_avg_state_smr['time'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))\npct_accs_avg_state_smr['weekday'] = pct_accs_avg_state_smr.time.apply(lambda x: (x.weekday()<5) & (x not in holidays))\npct_accs_avg_state_smr.head(3)","44eb52fe":"access_wide = pct_accs_avg_state_smr.pivot(index = 'time', columns = 'state')['mean'].T\naccess_wide = access_wide.head(8)\nx = access_wide.columns\ny = access_wide.values.tolist()\nlabels = access_wide.index.tolist()\n\ncolor = ['#FFE4E1','#EED5D2','#CDB7B5','#8B7D7B','#FFE4B5','#FFDEAD','#EECFA1','#CDB38B','#8B795E']\n\nfig, ax = plt.subplots(figsize=(20, 14))\nax.stackplot(x, \n             y, \n             labels=labels, \n#              colors= color, \n             baseline=\"sym\")\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()","44aac603":"dynamic_choro_map(pct_accs_avg_state_smr[pct_accs_avg_state_smr.weekday==True], \n                  'state_code', \n                  'state', \n                  'mean', \n                  'time', \n                  'Average Access Rate Change over Time by States',\n                  animation = True)","e1ef0ab5":"engage_avg_state_smr = aggregation_by_group(districts_engagement_data, group_var = ['state_code','state','time'], id_var = 'engagement_index', agg='mean', top = 0).sort_values(by=['state','time'])\nengage_avg_state_smr['time'] = engage_avg_state_smr['time'].apply(lambda x: datetime.strptime(x,'%Y-%m-%d'))\nengage_avg_state_smr['weekday'] = engage_avg_state_smr.time.apply(lambda x: (x.weekday()<5) & (x not in holidays))\nengage_avg_state_smr.head(3)","b9bed31e":"dynamic_choro_map(engage_avg_state_smr[engage_avg_state_smr.weekday==True], \n                  'state_code', \n                  'state', \n                  'mean', \n                  'time', \n                  'Average Engagement Index Change over Time by States',\n                  animation = True)","55af5a66":"### Dataset Exploration","517aa7e4":"### Distribution on engagement index and pct access mean per lp id\nFrom the following calculation, 98% lp id has average access pct less than 0.5 and 91% lp id as average engagement index less than 20.","a5ae8aec":"### Merge Data","8f35ef1d":"### Check Missing Values:","c395d564":"### Load and Review Data\nRef Code: https:\/\/www.kaggle.com\/ruchi798\/covid-19-impact-on-digital-learning-eda-w-b","7ec047bf":"### Map Plot: \nhttps:\/\/plotly.com\/python\/choropleth-maps\/"}}