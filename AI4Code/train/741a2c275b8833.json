{"cell_type":{"f820c314":"code","9e4792c3":"code","b25371b4":"code","586b94c5":"code","62a179ac":"code","2750d97f":"code","c7838dc9":"code","b909f465":"code","70eec1c7":"code","7138a97c":"code","e05c3e6b":"code","9ab37947":"code","6b698989":"code","ba2ad421":"code","d6d0c6f5":"code","eacc2602":"code","2ec62d9d":"code","31bd6746":"code","1febc020":"code","0bd30dd6":"code","6430bafd":"code","64892516":"code","334e5035":"code","53643fb7":"code","48c9a502":"code","a7a18855":"code","ff367901":"code","e979aab7":"code","ae5646bc":"code","a3889eb5":"code","01e04322":"code","f21fc133":"code","4ea56d37":"code","f190da4c":"code","d94fc7f4":"code","2207deee":"code","3dd3f804":"code","bf9a80b4":"code","430fdaf7":"code","a006d19b":"code","edd77882":"code","e6eadf95":"code","c06eb25c":"code","1b7b6ef6":"code","5a44e67c":"code","5ecb38a9":"code","9bcbfec4":"code","36416769":"code","1c4d0b45":"code","c90e3c9e":"code","8650087a":"code","d413a5eb":"code","d42f5b33":"code","c03f7049":"code","148ae772":"code","2bcc8080":"code","49a3c0b3":"code","95b28280":"code","abaddec2":"code","29fb31d0":"code","fbc1e09a":"code","3e42b3ec":"code","195606b9":"markdown","0c55ae83":"markdown","b7499dc2":"markdown","b4756536":"markdown","8d2fa9fc":"markdown"},"source":{"f820c314":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\npd.pandas.set_option('display.max_rows',None)\npd.pandas.set_option('display.max_columns',None)","9e4792c3":"train=pd.read_csv('\/kaggle\/input\/sf-crime\/train.csv.zip')\ntrain.head()","b25371b4":"train.shape","586b94c5":"train.head()","62a179ac":"target=train['Category'].unique()\nprint(target)","2750d97f":"data_dict = {}\ncount = 1\nfor data in target:\n    data_dict[data] = count\n    count+=1\n    train[\"Category\"] = train[\"Category\"].replace(data_dict)","c7838dc9":"train.head(50)","b909f465":"x=train['DayOfWeek'].unique()\nprint(x)","70eec1c7":"data_week_dict={\n    'Monday':1,\n    'Tuesday':2,\n    'Wednesday':3,\n    'Thursday':4,\n    'Friday':5,\n    'Saturday':6,\n    'Sunday':7\n}","7138a97c":"train['DayOfWeek']=train['DayOfWeek'].replace(data_week_dict)","e05c3e6b":"test=pd.read_csv('\/kaggle\/input\/sf-crime\/test.csv.zip')\ntest.head()","9ab37947":"z=test['Id']","6b698989":"test.shape","ba2ad421":"test['DayOfWeek']=test['DayOfWeek'].replace(data_week_dict)","d6d0c6f5":"train.drop(['Resolution','Descript'],axis=1,inplace=True)\ntest.drop(['Id'],axis=1,inplace=True)\n","eacc2602":"train.head()","2ec62d9d":"test.head()","31bd6746":"test_x=test.copy()\ntrain_x=train.copy()","1febc020":"dataset=pd.concat((train,test),axis=0)","0bd30dd6":"dataset.columns","6430bafd":"dataset['Dates'].head()","64892516":"dataset['Dates']=pd.to_datetime(dataset['Dates'],format='%Y-%m-%d %H:%M:%S',errors='coerce')","334e5035":"dataset['Year']=dataset['Dates'].dt.year\ndataset['Month']=dataset['Dates'].dt.month\ndataset['Date']=dataset['Dates'].dt.day\ndataset['Hour']=dataset['Dates'].dt.hour\ndataset['Minutes']=dataset['Dates'].dt.minute","53643fb7":"dataset.head()","48c9a502":"dataset.drop(['Dates'],axis=1,inplace=True)","a7a18855":"dataset.head()","ff367901":"dataset.isnull().sum()","e979aab7":"numerical_features=[feature for feature in dataset.columns if dataset[feature].dtypes!='O']\nnumerical_features","ae5646bc":"dataset[numerical_features].head()","a3889eb5":"categorical_features=[feature for feature in dataset.columns if dataset[feature].dtypes=='O']\ncategorical_features","01e04322":"dataset[categorical_features].head()","f21fc133":"dataset[categorical_features].columns","4ea56d37":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","f190da4c":"for feature in ['PdDistrict', 'Address']:\n    dataset[feature]=le.fit_transform(dataset[feature])","d94fc7f4":"dataset[categorical_features].head()","2207deee":"dataset.head()","3dd3f804":"core=dataset.corr()\ncore","bf9a80b4":"plt.figure(figsize=(20,20))\nsns.heatmap(core,annot=True)","430fdaf7":"corr=dataset.corr()\nprint(corr['Category'])","a006d19b":"dataset.head()","edd77882":"train=dataset.iloc[:878049,:]\ntrain.head()","e6eadf95":"train.shape","c06eb25c":"test=dataset.iloc[878049:]\ntest.head()","1b7b6ef6":"test.drop(['Category'],axis=1,inplace=True)","5a44e67c":"test.head()","5ecb38a9":"test=pd.concat((z,test),axis=1)","9bcbfec4":"test.head()","36416769":"test.shape","1c4d0b45":"X_train=train.drop(['Category'],axis=1)","c90e3c9e":"y_train=train['Category']","8650087a":"X_test=test","d413a5eb":"X_train['DayOfWeek'].unique()","d42f5b33":"X_test.head(100)","c03f7049":"from sklearn.linear_model import LinearRegression, Ridge,Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nimport warnings\nwarnings.filterwarnings('ignore',category=DeprecationWarning)","148ae772":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train,y_train)","2bcc8080":"X_test.head()","49a3c0b3":"X_test.drop(['Id'],axis=1,inplace=True)","95b28280":"predictions=knn.predict(X_test)","abaddec2":"from collections import OrderedDict\ndata_dict_new = OrderedDict(sorted(data_dict.items()))\nprint(data_dict_new)","29fb31d0":"predictions","fbc1e09a":"test=pd.concat((z,test),axis=1)","3e42b3ec":"result_dataframe = pd.DataFrame({\n    \"Id\": test[\"Id\"]\n})\nfor key,value in data_dict_new.items():\n    result_dataframe[key] = 0\ncount = 0\nfor item in predictions:\n    for key,value in data_dict.items():\n        if(value == item):\n            result_dataframe[key][count] = 1\n    count+=1\nresult_dataframe.to_csv(\"submission_knn.csv\", index=False)\n","195606b9":"### Dates","0c55ae83":"### Numerical Features","b7499dc2":"### Model","b4756536":"### Categorical Features","8d2fa9fc":"### Initialize logistic Regression Model"}}