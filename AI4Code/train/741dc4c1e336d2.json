{"cell_type":{"3e4f2f3d":"code","4e2c4adc":"code","8cfa6fcd":"code","a35e0348":"code","d2f3945c":"code","fe02ced9":"code","af57cd34":"code","1e54dc56":"code","cba1d001":"code","3b62f474":"code","865fe352":"code","929ce877":"code","af437e08":"code","bb09ff61":"code","a15dae1b":"code","23d6d51d":"code","1c5965e2":"code","d3f3dad1":"code","f0f68fa6":"code","e52f66ae":"code","7b20a8ce":"code","d1df4c99":"code","2e7f3dfa":"code","40b5c27c":"code","4ee07bf9":"code","58bf9289":"code","2b778eff":"code","79547a9c":"code","b778a85c":"code","b7d4ea6e":"code","b18a0ff3":"code","83301569":"code","6f8b9de6":"code","c3be36d1":"code","f96d186a":"code","cfba3094":"code","1fb19390":"code","d1abbed4":"code","bb40f693":"code","6cde78d1":"code","9a69065e":"code","3dcf3030":"code","bdc4c1b4":"code","ce70a628":"code","f4d3f7ca":"code","e1210738":"code","f1fbf9e4":"code","d2c9b961":"code","04336879":"code","e858c7e0":"code","447f63a9":"code","d434414e":"code","018a18dd":"code","cb9be869":"code","b303fedd":"code","635c6197":"code","a4168b7d":"code","83f7c75a":"code","84c794c3":"code","4ef8039e":"code","08ac14a0":"code","ef41c933":"code","3fe797db":"code","687097ad":"code","ed36c949":"code","5129900c":"code","6f249bfc":"code","c03cfcc9":"code","9f584856":"code","a7cb60e9":"code","cb49b3fd":"code","995f6ca8":"code","68328e28":"code","83fc7bc9":"code","59e18ba6":"code","bcd11cbe":"code","faa8b8dc":"markdown","b340320b":"markdown","377386fa":"markdown","e75ef8f7":"markdown","46d346cf":"markdown","4254b210":"markdown","b0e73b50":"markdown","0ee26b80":"markdown","a7c9a51c":"markdown","2af850be":"markdown","2e7bd677":"markdown","346e0e3e":"markdown","e5fb2fc5":"markdown","58cc05ad":"markdown","bae0efdb":"markdown","35c60bdd":"markdown","63f50cfe":"markdown","2feaa005":"markdown","653f6fe5":"markdown"},"source":{"3e4f2f3d":"import pandas as pd  #data reading and processing \nimport os             #reading from specific address\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom datetime import * \nimport datetime as dt\n\n\ndata=\"https:\/\/raw.githubusercontent.com\/overtunned\/Machine-Learning\/main\/covid_19_india.csv\"\ncovid19= pd.read_csv(data,parse_dates=['Date'], dayfirst=True)","4e2c4adc":"covid19.head()","8cfa6fcd":"covid19.shape","a35e0348":"covid19.drop([\"Sno\",\"Time\",\"ConfirmedIndianNational\",\"ConfirmedForeignNational\"],axis=1,inplace=True)","d2f3945c":"covid19.head()","fe02ced9":"covid19.tail()","af57cd34":"covid19.rename(columns={'State\/UnionTerritory': 'State'}, inplace=True)\ncovid19","1e54dc56":"covid19_bydate=covid19.groupby('Date').sum()\ncovid19_bydate.head()","cba1d001":"set(covid19['State'])","3b62f474":"covid19=covid19[~covid19.State.str.contains('***',regex=False)]","865fe352":"set(covid19['State'])","929ce877":"import seaborn as sns\nsns.pairplot(covid19, palette=\"Set2\")","af437e08":"covid19.shape","bb09ff61":"covid19.head()\n","a15dae1b":"# prepaing data state wise\nstate_cases = covid19.groupby('State')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)","23d6d51d":"print('Total Confirmed Cases: ',state_cases['Confirmed'].sum())\nprint('Total Deaths: ',state_cases['Deaths'].sum())\nprint('Total Cured Cases: ',state_cases['Cured'].sum())\nprint('Death Rate (per 100): ',np.round(100*state_cases['Deaths'].sum()\/state_cases['Confirmed'].sum(),2))","1c5965e2":"state_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Death Rate (per 100)\"])","d3f3dad1":"import IPython\nIPython.display.HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","f0f68fa6":"covid19_Ker = covid19[covid19['State'] == 'Kerala']\ncovid19_Ker","e52f66ae":"covid19_Ker.drop(columns=['State'],inplace=True)\n","7b20a8ce":"covid19_Ker","d1df4c99":"covid19_Ker['Date']=covid19_Ker['Date'].map(dt.datetime.toordinal)","2e7f3dfa":"covid19_Ker1=covid19_Ker.sort_values('Date',ascending=False)\ncovid19_Ker1=covid19_Ker1.set_index('Date')\ndaily=[]\nfor i in range(0,291):\n        daily.append(covid19_Ker1['Confirmed'].iloc[i]-covid19_Ker1['Confirmed'].iloc[i+1])\ndaily.append(1)\ncovid19_Ker1['Daily Confirmed']=daily\ncovid19_Ker1=covid19_Ker1.sort_values('Date')\nplt.plot(covid19_Ker1['Daily Confirmed'])","40b5c27c":"covid19_Ker1","4ee07bf9":"X=covid19_Ker1.iloc[:,0].values\ny=covid19_Ker1.iloc[:,-1].values\nX= X.reshape(-1,1)\ny= y.reshape(-1,1)","58bf9289":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=42)","2b778eff":"from sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)\nplt.scatter(X_train,y_train)","79547a9c":"plt.title('Linear Regression | Date vs Daily Confirmed')\nplt.scatter(X_train, y_train, edgecolor='w', label='Actual cases')\nplt.plot(X_train,linreg.predict(np.array(X_train).reshape(-1,1)), color='red', label='Predicted cases')\n\n\n\nplt.legend()\nplt.show()","b778a85c":"print(\"Linear Regression score is\",linreg.score(X_test,y_test))","b7d4ea6e":"from sklearn.metrics import mean_squared_error\nprint(\"The mean squared error is\",mean_squared_error(y_true=y_train, y_pred=linreg.predict(X_train)))","b18a0ff3":"from sklearn.metrics import mean_absolute_error\nprint(\"The mean absolute error is\",mean_absolute_error(y_true=y_train, y_pred=linreg.predict(X_train)))","83301569":"rmse = (np.sqrt(mean_absolute_error(y_true=y_train, y_pred=linreg.predict(X_train))))\nprint(\"The root mean square error for the above prediction model is\",rmse)","6f8b9de6":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg  = PolynomialFeatures(degree=4)\nX_poly = poly_reg.fit_transform(X)\n\nX_train,X_test,y_train,y_test = train_test_split(X_poly,y,test_size=0.20, random_state = 42)\n\npoly_reg.fit(X_poly, y) \nlinreg  = linreg.fit(X_poly,y)","c3be36d1":"plt.scatter(X, y, color = 'blue') \nplt.plot(X, linreg.predict(poly_reg.fit_transform(X)), color = 'red') \nplt.title('Polynomial Regression')\nplt.xlabel(\"Date\")\nplt.ylabel(\" Daily Confirmed\")\nplt.show()","f96d186a":"print(\"Polynomial Regression score is\",linreg.score(X_test,y_test))","cfba3094":"print(\"The mean squared error is\",mean_squared_error(y_true=y_test, y_pred=linreg.predict(X_test)))","1fb19390":"print(\"The mean absolute error is\",mean_absolute_error(y_true=y_test, y_pred=linreg.predict(X_test)))","d1abbed4":"rmse = (np.sqrt(mean_absolute_error(y_true=y_test, y_pred=linreg.predict(X_test))))\nprint(\"The root mean square error for the above prediction model is\",rmse)","bb40f693":"from sklearn.svm import SVR\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(X)\n\nss = StandardScaler()\nX = ss.fit_transform(X)\ny = ss.fit_transform(y)\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20, random_state = 42)\n\nregressor = SVR(kernel='rbf')\nregressor.fit(X_train,y_train)","6cde78d1":"print(\"Support vector score is\",regressor.score(X_test,y_test))","9a69065e":"print(\"The mean squared error is\",mean_squared_error(y_true=y_test, y_pred=regressor.predict(X_test)))\n","3dcf3030":"print(\"The mean absolute error is\",mean_absolute_error(y_true=y_test, y_pred=regressor.predict(X_test)))","bdc4c1b4":"rmse = (np.sqrt(mean_absolute_error(y_true=y_test, y_pred=regressor.predict(X_test))))\nprint(\"The root mean square error for the above prediction model is\",rmse)","ce70a628":"plt.scatter(X, y, color = 'blue')\nplt.plot(X, regressor.predict(X), color = 'red')\nplt.title('SVR Model Performance')\nplt.xlabel('Date')\nplt.ylabel('Daily Confirmed')\nplt.show()","f4d3f7ca":"covid19_Ker.head()","e1210738":"X=covid19_Ker.iloc[:,0].values\ny=covid19_Ker.iloc[:,-1].values\nX= X.reshape(-1,1)\ny= y.reshape(-1,1)","f1fbf9e4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=42)\nfrom sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X_train, y_train)\nplt.scatter(X_train,y_train)","d2c9b961":"plt.scatter(X_train,y_train,color=\"blue\")\nplt.plot(X_train,linreg.predict(X_train),color=\"red\")\nplt.title(\"Confirmed cases prediction\")\nplt.xlabel(\"Number of Days\")\nplt.ylabel(\"Total Confirmed\")\nplt.show()","04336879":"print(\"The mean squared error for the above model is\",mean_squared_error(y_true=y_test, y_pred=linreg.predict(X_test)))","e858c7e0":"print(\"Linear Regression score is\",linreg.score(X_test,y_test))","447f63a9":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg  = PolynomialFeatures(degree=2)\nX_poly = poly_reg.fit_transform(X)\n\nX_train,X_test,y_train,y_test = train_test_split(X_poly,y,test_size=0.20, random_state = 42)\n\npoly_reg.fit(X_poly, y) \nlinreg  = linreg.fit(X_poly,y)\nlinreg.score(X_test,y_test)\nplt.scatter(X, y, color = 'blue') \nplt.plot(X, linreg.predict(poly_reg.fit_transform(X)), color = 'red') \nplt.title('Polynomial Regression')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Total Confirmed\")\nplt.show() ","d434414e":"print(\"The mean squared error for the above model is\",mean_squared_error(y_true=y_test, y_pred=linreg.predict(X_test)))","018a18dd":"print(\"Polynomial Regression score is\",linreg.score(X_test,y_test))","cb9be869":"from sklearn.svm import SVR\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(X)\n\nss = StandardScaler()\nX = ss.fit_transform(X)\ny = ss.fit_transform(y)\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20, random_state = 42)\nregressor = SVR(kernel='rbf')\nregressor.fit(X_train,y_train)","b303fedd":"y_pred=regressor.predict(X_test)","635c6197":"plt.scatter(X, y, color = 'blue')\nplt.plot(X, regressor.predict(X), color = 'red')\nplt.title('SVR Model Performance')\nplt.xlabel('Date')\nplt.ylabel('Total Confirmed')\nplt.show()","a4168b7d":"print(\"SVR model score is\",regressor.score(X_test, y_test))","83f7c75a":"covid19_Ker1.head()","84c794c3":"covid19_Ker.head()","4ef8039e":"covid19_Ker.tail()","08ac14a0":"X=covid19_Ker1.iloc[:,0].values\ny=covid19_Ker1.iloc[:,-1].values\nX= X.reshape(-1,1)\ny= y.reshape(-1,1)","ef41c933":"X","3fe797db":"y","687097ad":"from sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters = 7).fit(covid19_Ker1)\n","ed36c949":"centroids = kmeans.cluster_centers_\nprint(centroids)\n","5129900c":"plt.scatter(X, y, s=70, alpha=0.125)\nplt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=70)\nplt.show()","6f249bfc":"sse = []\nk_rng = range(1,10)\nfor k in k_rng:\n    km = KMeans(n_clusters=k)\n    km.fit(covid19_Ker1[['Confirmed','Cured','Deaths']])\n    sse.append(km.inertia_)","c03cfcc9":"plt.xlabel('K')\nplt.ylabel('Sum of squared error')\nplt.plot(k_rng,sse)","9f584856":"km1 = KMeans(n_clusters=4, random_state = 1)\ny_predicted1 = km1.fit_predict(covid19_Ker1[['Confirmed','Cured','Deaths']])\ny_predicted1","a7cb60e9":"y_predicted1","cb49b3fd":"covid19_Ker1[\"Cluster\"] = y_predicted1","995f6ca8":"pk = []\nfor i in range(4):\n    pk.append((i,covid19_Ker1[covid19_Ker1[\"Cluster\"]==i][\"Confirmed\"].sum()\/len(covid19_Ker1[covid19_Ker1[\"Cluster\"]==i])))\npk.sort(key = lambda a:a[1])\nmapper = {}\nfor j,i in enumerate(pk):\n    mapper[j] = i[0]\nmapper","68328e28":"from mpl_toolkits.mplot3d import Axes3D\n\ncovid19_Ker1_1 = covid19_Ker1[covid19_Ker1.Cluster==0]\ncovid19_Ker1_2 = covid19_Ker1[covid19_Ker1.Cluster==1]\ncovid19_Ker1_3 = covid19_Ker1[covid19_Ker1.Cluster==2]\ncovid19_Ker1_4 = covid19_Ker1[covid19_Ker1.Cluster==3]\n\nfig = plt.figure()\nax = Axes3D(fig)\n\nax.scatter(covid19_Ker1_1['Confirmed'],covid19_Ker1_1['Cured'],covid19_Ker1_1['Deaths'], color = \"green\",label=\"Cluster1\")\nax.scatter(covid19_Ker1_2['Confirmed'],covid19_Ker1_2['Cured'],covid19_Ker1_2['Deaths'], color = \"orange\",label=\"Cluster2\")\nax.scatter(covid19_Ker1_3['Confirmed'],covid19_Ker1_3['Cured'],covid19_Ker1_3['Deaths'], color = \"red\",label=\"Cluster3\")\nax.scatter(covid19_Ker1_4['Confirmed'],covid19_Ker1_4['Cured'],covid19_Ker1_4['Deaths'], color = \"black\",label=\"Cluster4\")\nax.set_xlabel('Confirmed Cases')\nax.set_ylabel('Cured')\nax.set_zlabel('Deaths')","83fc7bc9":"from sklearn.preprocessing import StandardScaler\nfeatures = ['Confirmed', 'Cured','Deaths']\n# Separating out the features\nx = covid19_Ker1.loc[:, features].values\n# Standardizing the features\nx = StandardScaler().fit_transform(x)\n","59e18ba6":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = ['principal component 1', 'principal component 2'])","bcd11cbe":"fig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\n\nreduced_data = PCA(n_components=2).fit_transform(covid19_Ker1)\nresults = pd.DataFrame(reduced_data,columns=['pca1','pca2'])\nplt.scatter(x=\"pca1\", y=\"pca2\", data=results)\n\n\nax.grid()","faa8b8dc":"### Preparing data for clustering","b340320b":"### Performing KMeans clustering","377386fa":"#### Pairplot for Covid19 Dataset","e75ef8f7":"# Covid19 Analysis","46d346cf":"### Running PCA on the data and reduce the dimensions in pca_num_components dimensions\n","4254b210":"### Data processing and  cleaning","b0e73b50":"### Performing Linear Regression ","0ee26b80":"### Calculating the number of cases that are confirmed daily in Kerala","a7c9a51c":"Plotting as 3D","2af850be":"### Statewise Cases","2e7bd677":"### Taking the State 'Kerala'","346e0e3e":"### Preparing the Total confirmed data for prediction","e5fb2fc5":"The red line here shows the predicted cases and the blue circular plots are the actual cases.","58cc05ad":"Here, we have got around 72.98 % accuracy for the linear regression prediction model.","bae0efdb":"Since the Polynomial Regression shows around 90.98 % accuracy and less error when compared to linear regression model, it could be said as a good model for prediction against our dataset, comparing the eariler one.","35c60bdd":"Using k = 4 as per elbow method\n","63f50cfe":"### Prediction using Support Vector Regression","2feaa005":"### Prediction using Polynomial Regression","653f6fe5":"### Preparing the Daily confirmed data for prediction"}}