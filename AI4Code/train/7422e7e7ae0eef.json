{"cell_type":{"69110f13":"code","4e407e11":"code","acaf0502":"code","753eb2d3":"code","8015129e":"code","beb63b85":"code","0efdb6b5":"code","025241e0":"code","25bb1f3a":"code","89e2f97f":"code","1b065698":"code","d0c092ee":"code","15d9a924":"code","0d6419c5":"code","d3f5a71a":"code","05dc4e09":"code","7333f7e6":"code","918f932f":"code","a73aa31d":"code","808730c2":"code","4275355f":"code","ebed8aa0":"code","b0d11515":"code","c47649c8":"code","afc1c6e8":"code","58f67717":"code","27026a00":"code","04817cdf":"code","6b550381":"code","b19ea373":"code","81fb1c4e":"code","e839e956":"code","c535292f":"code","2033af17":"code","e45afb02":"code","02e775cd":"code","c3e30762":"code","5c231b68":"code","19cfcdb4":"code","b8b1ec3d":"code","d3b45acd":"code","6162b3da":"code","8a70ee8d":"code","60a790aa":"code","165ac58d":"code","805dae12":"code","6f318c5e":"code","6cd0d78f":"code","eef86be8":"code","4de95ec4":"code","b246c5c8":"code","48c1c3ee":"code","f2f286f1":"code","4341ced0":"code","bd17d78e":"code","85d715ae":"code","c42ce502":"code","60737abc":"code","e452ccd2":"code","b10029db":"code","d0b8d787":"code","d14004e6":"code","8cd65d06":"code","6f0bbc57":"code","256baa51":"code","df011fe6":"code","1a9dfbe6":"code","b79f732e":"code","27ff2f0f":"code","737504c8":"code","c78e7ffa":"code","976106e0":"code","214857e3":"code","723152dc":"code","3aad0cad":"code","6c84ca80":"code","cf160ffd":"code","7fd9e723":"code","4bbb2daa":"code","752ec26d":"code","e0a5e706":"code","24c2afe5":"code","67475aa9":"code","eedcc34c":"code","14c36668":"code","bbcd1829":"code","45ed0a6d":"code","e44b3554":"code","70e3d952":"code","a0a740f2":"code","b0fb1bb9":"code","300a2834":"code","c5bd3d3a":"code","9684678e":"code","b6071e30":"code","4491c2f7":"code","9c46e207":"code","76eea8d6":"code","40d8f568":"code","548490f5":"code","06c18659":"code","ba1e39e1":"code","55e44481":"markdown","6038ac93":"markdown","2a5ba2b3":"markdown","a08ccf45":"markdown"},"source":{"69110f13":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","4e407e11":"pd.options.display.max_columns = 100\npd.options.display.max_rows = 100","acaf0502":"data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","753eb2d3":"data.tail()","8015129e":"data.shape","beb63b85":"data.info()","0efdb6b5":"data.columns","025241e0":"data.describe()","25bb1f3a":"mis_val_features = [feature for feature in data.columns if data[feature].isnull().any()]\nlen(mis_val_features)","89e2f97f":"def Missing_Values(data):\n    nan_value = data.isnull().sum()\n    nan_value_percent = 100*nan_value \/ len(data)\n    nan_Dataframe = pd.concat([nan_value , nan_value_percent], axis = 1)\n    DataFrame = nan_Dataframe.rename(columns = {0:\"Missing Values\" , 1:\"Missing Values %\"}).sort_values(by = \"Missing Values %\" ,ascending = False)\n    return DataFrame","1b065698":"Missing_Values(data).head(19)","d0c092ee":"plt.style.use(\"ggplot\")\nfor feature in mis_val_features:\n    datacopy = data.copy()\n    datacopy[feature] = np.where(datacopy[feature].isnull() , \"Miss\" , \"Real\")\n    datacopy.groupby(feature)[\"SalePrice\"].median().plot.bar()\n    plt.title(feature)\n    plt.show()","15d9a924":"num_features = [feature for feature in data.columns if data[feature].dtypes != \"O\" and feature not in [\"Id\"]]\nprint(len(num_features))\nmiss_num = [feature for feature in num_features if data[feature].isnull().any()]\nprint(miss_num)","0d6419c5":"year_features = [feature for feature in num_features if \"Yr\" in feature or \"Year\" in feature]\nprint(len(year_features))\nmiss_year = [feature for feature in year_features if data[feature].isnull().any()]\nprint(miss_year)","d3f5a71a":"cat_features = [feature for feature in data.columns if data[feature].dtypes == 'O']\nprint(len(cat_features))\nmiss_cat = [feature for feature in cat_features if data[feature].isnull().any()]\nprint(miss_cat)","05dc4e09":"#len(num_features) - len(year_features) + len(cat_features) + len(year_features) + len([\"Id\"] == len(data.columns)","7333f7e6":"data[year_features].nunique()","918f932f":"for feature in year_features:\n    datacopy = data.copy()\n    datacopy.groupby(feature)[\"SalePrice\"].median().plot()\n    plt.show()","a73aa31d":"datacopy = data.copy()\ndatacopy[\"Yrold\"] = datacopy.YrSold - datacopy.YearBuilt","808730c2":"sns.scatterplot( x = datacopy[\"Yrold\"] , y = datacopy[\"SalePrice\"] , data = datacopy)\nplt.show()","4275355f":"discrete_features = [feature for feature in num_features if (data[feature].nunique() < 25)\n                    and feature not in year_features]\nprint(len(discrete_features))\nmiss_discrete = [feature for feature in discrete_features if data[feature].isnull().any()]\nprint(miss_discrete)","ebed8aa0":"data[discrete_features].head()","b0d11515":"plt.style.use(\"fivethirtyeight\")\nfor feature in discrete_features:\n    datacopy = data.copy()\n    datacopy.groupby(feature)[\"SalePrice\"].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","c47649c8":"conti_features = [feature for feature in num_features if feature not in discrete_features+year_features]\nprint(len(conti_features))\nmiss_conti = [feature for feature in conti_features if data[feature].isnull().any()]\nprint(miss_conti)","afc1c6e8":"data[conti_features].head()","58f67717":"for feature in conti_features:\n    datacopy = data.copy()\n    sns.distplot(datacopy[feature] , hist = True , bins= 50 , kde = False , rug = False)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","27026a00":"#len(discrete_features) + len(conti_features) + len(year_features) + len([\"Id\"]) == len(num_features)","04817cdf":"#log transformation","6b550381":"for feature in conti_features:\n    datacopy = data.copy()\n    datacopy[feature] = np.log1p(datacopy[feature])\n    sns.distplot(datacopy[feature] , hist = True , bins = 50 , kde = False)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()\n    ","b19ea373":"for feature in conti_features:\n    datacopy = data.copy()\n    datacopy[feature] = np.log1p(datacopy[feature])\n    sns.scatterplot(x = datacopy[feature] ,y = datacopy[\"SalePrice\"])\n    plt.xlabel(feature)\n    plt.ylabel(\"Sale Price\")\n    plt.title(feature)\n    plt.show()","81fb1c4e":"#Outliers","e839e956":"for feature in conti_features:\n    datacopy = data.copy()\n    datacopy[feature]=np.log1p(datacopy[feature])\n    sns.boxplot(datacopy[feature])\n    plt.xlabel(feature)\n    plt.ylabel(feature)\n    plt.title(feature)\n    plt.show()","c535292f":"data[cat_features].head()","2033af17":"def Categorical_Detail(data , cat_features):\n    for feature in cat_features:\n        print(\"The feature {} has {} categories\".format(feature , data[feature].nunique()))","e45afb02":"Categorical_Detail(data , cat_features)","02e775cd":"for feature in cat_features:\n    datacopy = data.copy()\n    datacopy.groupby(feature)[\"SalePrice\"].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel(\"Sale Price\")\n    plt.title(feature)\n    plt.show()","c3e30762":"Missing_Values(data).head(19)","5c231b68":"#miss_cat , miss_num , miss_year , miss_discrete , miss_conti","19cfcdb4":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b8b1ec3d":"com_data = data.append(test)","d3b45acd":"com_data","6162b3da":"def replace_cat_features(com_data , miss_cat):\n    datacopy = com_data.copy()\n    datacopy[miss_cat] = datacopy[miss_cat].fillna(\"Missing\")\n    return datacopy\ncom_data = replace_cat_features(com_data , miss_cat)\ncom_data[miss_cat].isnull().sum()","8a70ee8d":"for feature in miss_num:\n    median_val = com_data[feature].median()\n    \n    com_data[feature+'NaN'] = np.where(com_data[feature].isnull() , 1 ,0)\n    com_data[feature].fillna(median_val , inplace = True)\ncom_data[miss_num].isnull().sum()","60a790aa":"for feature in ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt']:\n    com_data[feature] = com_data[\"YrSold\"] - com_data[feature]","165ac58d":"print(com_data.shape)\ncom_data.head()","805dae12":"#log normal distribution\nnum_features_x =['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea']\n\nfor feature in num_features_x:\n    data[feature] = np.log(data[feature])\n    ","6f318c5e":"np.isfinite(com_data[num_features_x]).sum()","6cd0d78f":"com_data.head(2)","eef86be8":"data[\"SalePrice\"].corr(data[\"GrLivArea\"])      ","4de95ec4":"#Handling Rare Variables\nfor feature in cat_features:\n    var = data.groupby(feature)[\"GrLivArea\"].count() \/ len(data)\n    var_data = var[var > 0.01].index\n    data[feature] = np.where(data[feature].isin(var_data) , data[feature] , \"Rare_Var\")","b246c5c8":"com_data.head(50)","48c1c3ee":"com_data.tail(10)","f2f286f1":"cat_features","4341ced0":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor feature in cat_features:\n    if feature in com_data.columns:\n        i = com_data.columns.get_loc(feature)\n        com_data.iloc[:,i] = com_data.apply(lambda i:le.fit_transform(i.astype(str)), axis=0, result_type='expand')   ","bd17d78e":"com_data.head(5)","85d715ae":"com_data.Alley.value_counts()","c42ce502":"scaling_features = [feature for feature in com_data.columns if feature not in [\"Id\" , \"SalePrice\"]]\nlen(scaling_features)","60737abc":"com_data.shape","e452ccd2":"(com_data.isnull().sum()).nlargest(10)","b10029db":"for feature in [\"BsmtFinSF1\", \"BsmtFinSF2\"  , \"BsmtUnfSF\"  , \"TotalBsmtSF\", \"BsmtFullBath\", \"BsmtHalfBath\", \"GarageCars\" , \"GarageArea\"]:\n    median = com_data[feature].median()\n    \n    com_data[feature] = com_data[feature].fillna(median)","d0b8d787":"X = com_data.iloc[:1460, : ].drop(columns = [\"Id\" ,\"SalePrice\"])\nY = com_data[:1460][\"SalePrice\"].values","d14004e6":"X.shape , Y.shape","8cd65d06":"from sklearn.model_selection import train_test_split\nxtrain , xtest , ytrain , ytest = train_test_split(X , Y , test_size = 0.15 , random_state = 0)","6f0bbc57":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit_transform(X)","256baa51":"xtrain","df011fe6":"X.shape , Y.shape","1a9dfbe6":"from sklearn.linear_model import LassoCV , Lasso","b79f732e":"from sklearn.feature_selection import SelectFromModel","27ff2f0f":"reg = LassoCV()\nreg.fit((scaler.transform(X)) ,Y)\nprint(\"Best alpha using built-in LassoCV: %f\" % reg.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" %reg.score(xtrain,ytrain))","737504c8":"sel_ = SelectFromModel(Lasso(alpha = 122.214606 , random_state = 1))\nsel_.fit((scaler.transform(X)), Y)","c78e7ffa":"sel_.get_support()","976106e0":"selected_feat = X.columns[(sel_.get_support())]\nprint('total features: {}'.format((X.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\nprint('features with coefficients shrank to zero: {}'.format(\n      np.sum(sel_.estimator_.coef_ == 0)))","214857e3":"X_ = X[selected_feat].values","723152dc":"from sklearn.preprocessing import MinMaxScaler\nscalar = MinMaxScaler()\nX_ = scalar.fit_transform(X_)","3aad0cad":"Y","6c84ca80":"from sklearn.model_selection import GridSearchCV , RandomizedSearchCV","cf160ffd":"from sklearn.model_selection import cross_val_score","7fd9e723":"from sklearn.metrics import r2_score , mean_squared_error","4bbb2daa":"# Using Gridsearch Cv performed below\nfrom sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n                      max_depth=None, max_features=11, max_leaf_nodes=None,\n                      max_samples=None, min_impurity_decrease=0.0,\n                      min_impurity_split=None, min_samples_leaf=1,\n                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n                      n_estimators=100, n_jobs=None, oob_score=False,\n                      random_state=None, verbose=0, warm_start=False)\nrfr.fit( X_ , Y)\n","752ec26d":"#pred = rfr.predict(xtest_)","e0a5e706":"#mean_squared_error(ytest , pred , squared = False )","24c2afe5":"score = cross_val_score(rfr , X_ , Y , cv = 6)","67475aa9":"score.mean()","eedcc34c":"#uncomment to run below Cells","14c36668":"parameters = {\"max_features\" : np.arange(7 ,13 ,2) , \"n_estimators\" : np.arange(100 , 500 , 50)}","bbcd1829":"grid_r = GridSearchCV(rfr , param_grid = parameters , cv = 5 )\ngrid_r.fit(X_ , Y)","45ed0a6d":"grid_r.best_score_","e44b3554":"grid_r.best_estimator_","70e3d952":"import xgboost as xgb","a0a740f2":"# selected using RandomisedSearcv\nclf = xgb.XGBRegressor(max_depth= 5,\n    n_estimators =  3000, \n    learning_rate=  0.1,\n    subsample =  0.5,\n    colsample_bytree = 0.7,\n    min_child_weight= 1.5,\n    reg_alpha =  0.75,\n    reg_lambda= 0.4,\n    seed =  42,)\nclf.fit( X_ , Y)","b0fb1bb9":"#pred = clf.predict(xtest_)","300a2834":"#mean_squared_error(ytest , pred , squared = False)","c5bd3d3a":"scoreg = cross_val_score(clf , X_ , Y , cv = 6)","9684678e":"scoreg.mean()","b6071e30":"XTEST = com_data[1460:].drop(columns = [\"SalePrice\" , \"Id\"])","4491c2f7":"XTEST = XTEST[selected_feat].values","9c46e207":"XTEST_ = scalar.transform(XTEST)","76eea8d6":"XTEST_","40d8f568":"ypred = rfr.predict(XTEST_) #randomforest","548490f5":"y_pred = clf.predict(XTEST_) #xgboost","06c18659":"#submission_l = pd.DataFrame(pd.read_csv(\"house_test.csv\")['Id'])\n#submission_l['SalePrice'] = y_pred.astype('int32')\n#submission_l.to_csv(\"Submission_l1.csv\", index = False)  #xgboost","ba1e39e1":"# xgboost performs better than others with this kind of feature engineering , would love to improve further.","55e44481":"#  Model","6038ac93":"# Selection","2a5ba2b3":"# Explanatory Data Analysis","a08ccf45":"# Feature Engineering"}}