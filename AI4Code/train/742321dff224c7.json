{"cell_type":{"4e3a07fc":"code","57d852f7":"code","47061d14":"code","a417f244":"code","0483e22d":"code","aacd6c71":"code","f25075a1":"code","c6be09bc":"code","df943535":"code","8b31a608":"code","6970ad18":"code","dd7cf8ba":"code","f1627aa7":"code","bab82948":"code","982dab12":"code","840e18a2":"code","662deda4":"code","a71875be":"code","2db10229":"code","5157c5d8":"code","de641dda":"code","bfed61f1":"code","a1a1fbaf":"code","0936e1b2":"code","7aa55534":"code","8af963ec":"code","b5b9c6cf":"code","9dbe1fcc":"code","771c8ee5":"code","e6a053db":"code","51ee7ae0":"code","206584b8":"markdown","fffd2f6b":"markdown","43d7d21f":"markdown","6c38a440":"markdown","36bf3217":"markdown","4a99990c":"markdown","eeb4fe6e":"markdown","5cb4dee0":"markdown","447aa304":"markdown","917d635e":"markdown","a1f42c24":"markdown","d3ddc89d":"markdown","c56bacc4":"markdown","77865962":"markdown"},"source":{"4e3a07fc":"!pip install imutils","57d852f7":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport tensorflow as tf\nfrom tensorflow.keras.applications.densenet import DenseNet121\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import layers, metrics\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras import callbacks\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom imutils import paths\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport random\nimport shutil\nimport cv2\nimport os","47061d14":"from tensorflow import keras\nprint(keras.__version__)\nprint(tf.__version__)","a417f244":"dataset_path = '.\/dataset'","0483e22d":"%%bash\nrm -rf dataset\nmkdir -p dataset\/train\/covid\nmkdir -p dataset\/test\/covid\nmkdir -p dataset\/train\/normal\nmkdir -p dataset\/test\/normal","aacd6c71":"covid_dataset_path = '..\/input\/covid-chest-xray'","f25075a1":"# construct the path to the metadata CSV file and load it\ncsvPath = os.path.sep.join([covid_dataset_path, \"metadata.csv\"])\ndf = pd.read_csv(csvPath)\n#df = df[(df['finding'] == 'COVID-19')]\n#df = df[df['view'] == 'PA']\ndf_train, df_test, _, _ = train_test_split(df, df, test_size=0.20, random_state=42)\n","c6be09bc":"df[df['finding'] == 'COVID-19'].view.value_counts()","df943535":"print(df_train.shape[0])\nprint(df_test.shape[0])\nprint(df.shape[0])","8b31a608":"covid_count = 0\n# loop over the rows of the COVID-19 data frame(train)\nfor (i, row) in df_train.iterrows():\n    # build the path to the input image file\n    imagePath = os.path.sep.join([covid_dataset_path, \"images\", row[\"filename\"]])\n\n    # if the input image file does not exist (there are some errors in\n    # the COVID-19 metadeta file), ignore the row\n    if not os.path.exists(imagePath):\n        continue\n\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = row[\"filename\"].split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/train\/covid\", filename])\n    covid_count = covid_count+1\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)\n    \n    \n# loop over the rows of the COVID-19 data frame(test)\nfor (i, row) in df_test.iterrows():\n    \n    # build the path to the input image file\n    imagePath = os.path.sep.join([covid_dataset_path, \"images\", row[\"filename\"]])\n\n    # if the input image file does not exist (there are some errors in\n    # the COVID-19 metadeta file), ignore the row\n    if not os.path.exists(imagePath):\n        continue\n\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = row[\"filename\"].split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/test\/covid\", filename])\n    covid_count = covid_count+1\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)","6970ad18":"covid_count","dd7cf8ba":"pneumonia_dataset_path ='..\/input\/chest-xray-pneumonia\/chest_xray'","f1627aa7":"basePath = os.path.sep.join([pneumonia_dataset_path, \"train\", \"NORMAL\"])\nimagePaths = list(paths.list_images(basePath))\n\nfrom sklearn.model_selection import train_test_split\n\nimage_paths_train, image_paths_test, _, _ = train_test_split(imagePaths, imagePaths, test_size=0.20, random_state=42)\n\n#print(image_paths_train)\n\n# randomly sample the image paths\nrandom.seed(42)\n\n# loop over the image paths(training)\nfor (i, imagePath) in enumerate(image_paths_train):\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = imagePath.split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/train\/normal\", filename])\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)\n    \n# loop over the image paths(test)\nfor (i, imagePath) in enumerate(image_paths_test):\n    # extract the filename from the image path and then construct the\n    # path to the copied image file\n    filename = imagePath.split(os.path.sep)[-1]\n    outputPath = os.path.sep.join([f\"{dataset_path}\/test\/normal\", filename])\n\n    # copy the image\n    shutil.copy2(imagePath, outputPath)","bab82948":"len(imagePaths)","982dab12":"train_data_dir = dataset_path + \"\/train\"\ntest_data_dir = dataset_path + \"\/test\"\nimg_height = 64\nimg_width = 64\nbatch_size = 16\ntrain_datagen = ImageDataGenerator(validation_split=0.2) # set validation split\n\ntest_datagen = ImageDataGenerator()\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_data_dir,\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode='binary',\n    classes = ['normal','covid'],\n    subset='training') # set as training data\n\nvalidation_generator = train_datagen.flow_from_directory(\n    train_data_dir, # same directory as training data\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode='binary',\n    classes = ['normal','covid'],\n    subset='validation')\n\n\ntest_generator = test_datagen.flow_from_directory(\n    test_data_dir, # same directory as training data\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    classes = ['normal','covid'],\n    shuffle=False,\n    class_mode='binary')\n\n","840e18a2":"validation_generator.class_indices","662deda4":"def get_model(res, verbose=0):\n    base_model = DenseNet121(input_shape=(res, res, 3),include_top=False,weights='imagenet',pooling='avg')\n    x = base_model.output\n    x = layers.Dense(1024, activation=\"relu\")(x)\n    output = layers.Dense(1, activation=\"sigmoid\")(x)\n    model = Model(inputs=base_model.input, outputs=output)\n    model.compile(optimizer=Adam(learning_rate=1e-4),loss='binary_crossentropy',metrics=[metrics.AUC(name='auc')])\n    if verbose: print(model.summary())\n    return model","a71875be":"from collections import Counter\ndef get_class_weights(train_gen):\n    counter = Counter(train_gen.classes)                          \n    max_val = float(max(counter.values()))       \n    class_weights = {class_id : max_val\/num_images for class_id, num_images in counter.items()}           \n    print(f'class_weights {class_weights}')\n    return class_weights","2db10229":"def train_model(train_gen, val_gen, model, class_weights, epochs):\n    es_cb = callbacks.EarlyStopping(monitor='val_loss',patience=2,min_delta=0.001)\n    lr_cb = callbacks.ReduceLROnPlateau(patience=1,min_delta=.05)\n\n    history = model.fit(\n        train_gen\n        ,epochs=epochs\n        ,validation_data=val_gen\n        ,callbacks=[es_cb, lr_cb]\n        ,class_weight=class_weights)","5157c5d8":"import numpy as np\nfrom sklearn.metrics import roc_auc_score\ndef test_model(model, test_gen):\n    y_pred_prob = model.predict(test_gen)\n    y_true = test_gen.classes\n    auc_score = roc_auc_score(y_true, y_pred_prob)\n    print(f'auc_score {auc_score}')","de641dda":"res = 64\nmodel = get_model(res, verbose=0)","bfed61f1":"class_weights = get_class_weights(train_generator)","a1a1fbaf":"train_model(train_generator, validation_generator, model, class_weights, epochs=1)","0936e1b2":"test_model(model, test_generator)","7aa55534":"from sklearn.metrics import roc_curve, roc_auc_score\nimport matplotlib.pyplot as plt\ndef plot_roc(model, test_gen):\n    y_pred_prob = model.predict(test_gen)\n    y_true = test_gen.classes\n\n    fp, tp, _ = roc_curve(y_true, y_pred_prob)\n\n    plt.plot(fp, tp, label='ROC', linewidth=3)\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.plot(\n      [0, 1], [0, 1], \n      linestyle='--', \n      linewidth=2, \n      color='r',\n      label='Chance', \n      alpha=.8\n    )\n    plt.grid(True)\n    ax = plt.gca()\n    ax.set_aspect('equal')\n    plt.legend(loc=\"lower right\")\n    \n\nplot_roc(model, test_generator)","8af963ec":"y_pred_prob = model.predict(test_generator)\ny_true = test_generator.classes\nfp, tp, tr = roc_curve(y_true, y_pred_prob)","b5b9c6cf":"diff = tp - fp\nthr = tr[np.argmax(diff)]","9dbe1fcc":"thr","771c8ee5":"from sklearn.metrics import confusion_matrix\ntick_labels = ['NORMAL', 'COVID']\npredicted_vals = model.predict(test_generator)\ncm = confusion_matrix(test_generator.labels, predicted_vals > thr)\nax = sns.heatmap(cm, annot=True, fmt=\"d\")\nplt.ylabel('Actual')\nplt.xlabel('Predicted')\nax.set_xticklabels(tick_labels)\nax.set_yticklabels(tick_labels)","e6a053db":"from sklearn.metrics import classification_report\ny_pred = predicted_vals > thr\nlabels = ['NORMAL', 'COVID']\nprint(classification_report(y_true, y_pred, target_names=labels))","51ee7ae0":"model.save(dataset_path + \"\/COVID_Detection\")","206584b8":"## Data Generators","fffd2f6b":"## Create Model","43d7d21f":"## Build Dataset","6c38a440":"## Optimal Threshold","36bf3217":"### Covid xray dataset","4a99990c":"## Test Model","eeb4fe6e":"## Train Model","5cb4dee0":"Execute","447aa304":"## Import required packages","917d635e":"## Compute Class Weights","a1f42c24":"### Build normal xray dataset","d3ddc89d":"## ROC Curve","c56bacc4":"## Confusion Matrix and Classification Report","77865962":"## Save Model"}}