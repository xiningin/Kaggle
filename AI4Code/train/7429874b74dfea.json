{"cell_type":{"f46bb2ce":"code","c3bf576d":"code","0fa37bc6":"code","9b0b6a7b":"code","6db5aa02":"code","f8a65230":"code","e13d7442":"code","f0a80794":"code","d3cd1d96":"code","0566bebb":"code","a6b6c188":"code","19a981d8":"code","ab57bea3":"code","d78a12b7":"code","53923868":"code","cd5fb82b":"code","0586f3df":"markdown","7aa21155":"markdown"},"source":{"f46bb2ce":"%matplotlib inline\n#\u9019\u662fjuoyter notebook\u7684magic word\u02d9\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom IPython import display","c3bf576d":"import os\n#\u5224\u65b7\u662f\u5426\u5728jupyter notebook\u4e0a\ndef is_in_ipython():\n    \"Is the code running in the ipython environment (jupyter including)\"\n    program_name = os.path.basename(os.getenv('_', ''))\n\n    if ('jupyter-notebook' in program_name or # jupyter-notebook\n        'ipython'          in program_name or # ipython\n        'jupyter' in program_name or  # jupyter\n        'JPY_PARENT_PID'   in os.environ):    # ipython-notebook\n        return True\n    else:\n        return False\n\n\n#\u5224\u65b7\u662f\u5426\u5728colab\u4e0a\ndef is_in_colab():\n    if not is_in_ipython(): return False\n    try:\n        from google import colab\n        return True\n    except: return False\n\n#\u5224\u65b7\u662f\u5426\u5728kaggke_kernal\u4e0a\ndef is_in_kaggle_kernal():\n    if 'kaggle' in os.environ['PYTHONPATH']:\n        return True\n    else:\n        return False\n\nif is_in_colab():\n    from google.colab import drive\n    drive.mount('\/content\/gdrive')","0fa37bc6":"os.environ['TRIDENT_BACKEND'] = 'pytorch'\n\nif is_in_kaggle_kernal():\n    os.environ['TRIDENT_HOME'] = '.\/trident'\n    \nelif is_in_colab():\n    os.environ['TRIDENT_HOME'] = '\/content\/gdrive\/My Drive\/trident'\n\n#\u70ba\u78ba\u4fdd\u5b89\u88dd\u6700\u65b0\u7248 \n!pip uninstall tridentx -y\n!pip install ..\/input\/trident\/tridentx-0.7.4-py3-none-any.whl --upgrade\nimport json\nimport copy\nimport numpy as np\n#\u8abf\u7528trident api\nimport trident as T\nfrom trident import *\nfrom trident.models import resnet,efficientnet\nimport random","9b0b6a7b":"import glob\nimport pandas as pd\nimgs=glob.glob('..\/input\/severstal-steel-defect-detection\/train_images\/*jpg')\nprint(len(imgs))\n\ndf_train=pd.read_csv('..\/input\/severstal-steel-defect-detection\/train.csv')\nprint(df_train)\n","6db5aa02":"df_images_frequency=df_train['ImageId'].value_counts()\nprint(df_images_frequency)\n","f8a65230":"palette = [(0, 0, 0),(256, 192, 0), (0, 192, 256), (128, 0, 256), (256,64,0)]\n\ndef enc2mask(enc, shape=(1600,256),fill_value=0):\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    s = enc.split()\n    for i in range(len(s)\/\/2):\n        start = int(s[2*i]) - 1\n        length = int(s[2*i+1])\n        img[start:start+length] = int(fill_value)\n    return img.reshape(shape).T\n\n\ndef mask2enc(mask, n=4):\n    pixels = mask.T.flatten()\n    encs = []\n    for i in range(1,n+1):\n        p = (pixels == i).astype(np.int8)\n        if p.sum() == 0: encs.append('')\n        else:\n            p = np.concatenate([[0], p, [0]])\n            runs = np.where(p[1:] != p[:-1])[0] + 1\n            runs[1::2] -= runs[::2]\n            encs.append(' '.join(str(x) for x in runs))\n    return encs\n\n\ndef label2color(label_mask,palette):\n    num_classes = len(palette)\n\n    color_label= np.zeros((*label_mask.shape,3)).astype(np.int64)\n    for i in range(num_classes):\n        color_label[label_mask==i]=palette[i]\n    return color_label","e13d7442":"df_train['mask'] = df_train.apply(lambda row: enc2mask(enc=row.EncodedPixels,fill_value=row.ClassId),axis=1)\nprint(df_train)","f0a80794":"for i in range(10):\n    exsample_mask=df_train['mask'].iloc[i]\n    print(exsample_mask.shape)\n    print(exsample_mask.max())\n","d3cd1d96":"exsample_mask=df_train['mask'].iloc[3]\nexsample_image=image2array('..\/input\/severstal-steel-defect-detection\/train_images\/'+df_train['ImageId'].iloc[3])\nprint(exsample_mask.max())\ndisplay.display(array2image(exsample_mask))\n\nis_mask=np.expand_dims(np.greater(exsample_mask,0).astype(np.float32),-1)\ncolor_mask=label2color(exsample_mask,palette)\n\n\ndisplay.display(array2image(label2color(exsample_mask,palette)))\ndisplay.display(array2image(exsample_image))\n\ndisplay.display(array2image(0.5*exsample_image+0.5*(1-is_mask)*exsample_image+0.5*is_mask*color_mask))\n","0566bebb":"masked_dict=OrderedDict()\n\nfor index, row in df_train.iterrows():\n    img_key='..\/input\/severstal-steel-defect-detection\/train_images\/'+row['ImageId']\n    if img_key not in masked_dict:\n        masked_dict[img_key]=row['mask']\n    else:\n        masked_dict[img_key]=masked_dict[img_key]+row['mask']\n\nprint(len(masked_dict))","a6b6c188":"class MyMaskDataset(MaskDataset):\n    def __init__(self, masks, class_names=None, symbol=\"mask\", **kwargs):\n        super().__init__(masks,class_names=class_names, symbol=symbol, object_type=ObjectType.label_mask, **kwargs)\n     \n    def __getitem__(self, index: int):\n        img_id = self.items[index]  # self.pop(index)\n        if img_id in masked_dict:\n            return masked_dict[img_id].astype(np.int64)\n        else:\n            return np.zeros((256,1600,3),dtype=np.int64)\n        \n#\u5982\u679c\u662fmask\u975e\u96f6\u5247ok\uff0c\u5426\u5247\u53ea\u670920%\u6a5f\u7387\u53d6\u7528\nsample_filter=lambda x:x[-1].max()>0 or random.random()>0.9\n\nds1=ImageDataset(list(masked_dict.keys()),symbol='image')\nds2=MyMaskDataset(list(masked_dict.keys()),symbol='mask')\n\n#\u8a2d\u5b9a\u8abf\u8272\u76e4\nfor i in range(5):\n    ds2.palette[i] =palette[i]\n\ndata_provider=DataProvider(traindata=Iterator(data=ds1,label=ds2,sample_filter=sample_filter))\ndata_provider.paired_transform_funcs=[\n    RandomTransformAffine(rotation_range=5, zoom_range=0.00, shift_range=0.00, shear_range=0.1, random_flip=0.15 ,border_mode='zero'),\n    RandomRescaleCrop((224,224),scale=(0.8,1.2))]\n\ndata_provider.image_transform_funcs=[\n                     AddNoise(0.01),\n                     RandomAdjustGamma(gamma_range=(0.6,1.5)),\n                     RandomAdjustContrast(value_range=(0.6, 1.5)),\n                     RandomAdjustHue(value_range=(-0.5, 0.5)),\n                     Normalize(127.5,127.5)]\n        \n\nimg_data,mask_data=data_provider.next()\nprint(mask_data.shape)\nprint(mask_data.max())\n\n","19a981d8":"%%time\ndata_provider.preview_images()","ab57bea3":"from trident.models import efficientnet,deeplab\nbackbond_net=efficientnet.EfficientNetB0(pretrained=True,input_shape=(3,224,224))\nbackbond=backbond_net.model\nbackbond.trainable=False\ndeeplabv3=deeplab.DeeplabV3_plus(backbond,atrous_rates=(6,12,18,24),num_filters=256,classes=5)\ndeeplabv3.load_model('..\/input\/steeldefect\/Models\/deeplabv3.pth')\ndeeplabv3.summary()\n","d78a12b7":"from trident.models import densenet\ntiramisu=densenet.DenseNetFcn(blocks=(4, 5, 6, 7, 8),input_shape=(3,224,224),growth_rate=16, initial_filters=32,num_classes=5)\ntiramisu.load_model('..\/input\/steeldefect\/Models\/tiramisu_1.pth')\ntiramisu.summary()","53923868":"def draw_seg_image(training_context):\n    data_feed = training_context['data_feed']\n    data = training_context['train_data']\n    model = training_context['current_model']\n    output_data=data[data_feed['output']]\n    target_data=to_numpy(data['mask'])\n    input_data=to_numpy(data['image'])\n    output_data=np.argmax(to_numpy(output_data),1)\n    tile_images_list=[]\n    input_arr = []\n    target_arr=[]\n    output_arr=[]\n    for i in range(len(output_data)):\n        input_arr.append(image_backend_adaption(data_provider.reverse_image_transform(input_data[i])))\n        target_arr.append(label2color(target_data[i],palette))\n        output_arr.append(label2color(output_data[i],palette))\n    tile_images_list.append(input_arr)\n    tile_images_list.append(target_arr)\n    tile_images_list.append(output_arr)\n    fig = tile_rgb_images(*tile_images_list, save_path='Results\/segtile_image_{0}.png', imshow=True)\n    plt.close()\n        \n        \n    ","cd5fb82b":"deeplabv3.with_optimizer(optimizer=AdaBelief,lr=1e-3,betas=(0.9, 0.999),gradient_centralization='all')\\\n    .with_loss(DiceLoss(ignore_index=0),loss_weight=2)\\\n    .with_loss(CrossEntropyLoss(auto_balance=True)) \\\n    .with_loss(FocalLoss())\\\n    .with_metric(pixel_accuracy,name='pixel_accuracy',print_only=True)\\\n    .with_metric(iou,name='iou')\\\n    .with_regularizer('l2',reg_weight=1e-5)\\\n    .with_model_save_path('Models\/deeplabv3.pth') \\\n    .trigger_when(when='on_batch_end',frequency=50,action=draw_seg_image)\\\n    .with_automatic_mixed_precision_training()\n\ntiramisu.with_optimizer(optimizer=AdaBelief,lr=1e-3,betas=(0.9, 0.999),gradient_centralization='all')\\\n    .with_loss(DiceLoss(ignore_index=0),loss_weight=2)\\\n    .with_loss(CrossEntropyLoss(auto_balance=True)) \\\n    .with_loss(FocalLoss()) \\\n    .with_metric(pixel_accuracy,name='pixel_accuracy',print_only=True)\\\n    .with_metric(iou,name='iou')\\\n    .with_regularizer('l2',reg_weight=1e-5)\\\n    .with_model_save_path('Models\/tiramisu_1.pth') \\\n    .trigger_when(when='on_batch_end',frequency=50,action=draw_seg_image)\\\n    .with_automatic_mixed_precision_training()\n\nplan=TrainingPlan()\\\n    .add_training_item(deeplabv3,name='deeplabv3')\\\n    .add_training_item(tiramisu,name='tiramisu')\\\n    .with_data_loader(data_provider)\\\n    .repeat_epochs(30)\\\n    .with_batch_size(32)\\\n    .print_progress_scheduling(10,unit='batch')\\\n    .display_loss_metric_curve_scheduling(frequency=100,unit='batch',imshow=True)\\\n    .save_model_scheduling(20,unit='batch')\\\n\n\nplan.start_now()","0586f3df":"# Steel Defect \u8cc7\u6599\u9810\u8655\u7406\n","7aa21155":"\u4f60\u5982\u679c\u8a66\u5716\u8981\u628a\u6240\u6709mask\u751f\u6210\u51fa\u4f86\uff0c\u5f88\u5feb\u4f60\u6703\u8d85\u904ekaggle\u8a18\u61b6\u9ad4\u4e0a\u9650\u9020\u6210notebook\u91cd\u555f\uff0c\u800c\u82e5\u662f\u4e00\u5f35\u4e00\u5f35\u5b58\u6a94\u4f86\u8abf\u7528\u770b\u8d77\u4f86\u53ef\u884c\uff0c\u53ef\u662f\u6703\u4f54\u7528\u4e0d\u5c11"}}