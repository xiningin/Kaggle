{"cell_type":{"5925a917":"code","f061ddb1":"code","4ac0e652":"code","33f2230d":"code","4b8d3813":"code","9ed23446":"code","96499930":"code","0a906e8c":"code","722c0042":"code","2bae6efd":"code","79f59a65":"code","8d4b6113":"code","8ac44f3a":"code","b4185898":"code","02b05776":"code","38e5cad8":"code","d47c761b":"code","bd3d3c50":"code","e0a3f0c6":"code","c3fd0b4e":"code","93ba7439":"code","3cbe3730":"markdown","d1c49c54":"markdown","f78f2289":"markdown","5e406d28":"markdown"},"source":{"5925a917":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix,plot_confusion_matrix","f061ddb1":"df = pd.read_csv('..\/input\/gender\/gender_classification_v7.csv')","4ac0e652":"df.head()","33f2230d":"df['gender'].value_counts()","4b8d3813":"df.info()","9ed23446":"plt.subplots(figsize=(12,5))\ngender_correlation=df.corr()\nsns.heatmap(gender_correlation,annot=True,cmap='RdPu')\nplt.title('Correlation between the variables')\nplt.xticks(rotation=45)","96499930":"sns.lineplot(data=df,x=\"distance_nose_to_lip_long\",y=\"lips_thin\")","0a906e8c":"sns.lineplot(data=df,x=\"forehead_width_cm\",y=\"forehead_height_cm\")","722c0042":"sns.lineplot(data=df,x=\"long_hair\",y=\"forehead_width_cm\")","2bae6efd":"males = df.query(\"gender == 'Male'\")\nmales.groupby('nose_wide')['nose_wide'].describe()","79f59a65":"sns.histplot(data = males , x = 'nose_wide')","8d4b6113":"females = df.query(\" gender == 'Female' \")\nfemales.groupby('nose_wide')['nose_wide'].describe()","8ac44f3a":"sns.histplot(data = females , x = 'nose_wide')","b4185898":"x = df.drop('gender', axis=1)\ny = df['gender']","02b05776":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3,random_state=100)","38e5cad8":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix","d47c761b":"knn = KNeighborsClassifier()\nfrom sklearn.model_selection import GridSearchCV\nk_range = list(range(1, 31))\nparam_grid = dict(n_neighbors=k_range)\n\n# defining parameter range\ngrid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy', return_train_score=False,verbose=1)\n\n# fitting the model for grid search\ngrid_search=grid.fit(x_train, y_train)","bd3d3c50":"print(grid_search.best_params_)","e0a3f0c6":"accuracy = grid_search.best_score_ *100\nprint(\"Accuracy for our training dataset with tuning is : {:.2f}%\".format(accuracy))","c3fd0b4e":"knn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(x, y)\n\ny_test_hat=knn.predict(x_test) \n\ntest_accuracy=accuracy_score(y_test,y_test_hat)*100\n\nprint(\"Accuracy for our testing dataset with tuning is : {:.2f}%\".format(test_accuracy) )","93ba7439":"plot_confusion_matrix(grid,x_test, y_test,values_format='d' )","3cbe3730":"**Checking Accuracy on Test Data**","d1c49c54":"**Model fitting with K-cross Validation and GridSearchCV**\n\nK-cross Validation-\n\nGridSearchCV-","f78f2289":"**Splitting Dataset into Training and Testing set**","5e406d28":"**Exploratory data analysis**"}}