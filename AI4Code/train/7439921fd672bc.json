{"cell_type":{"680fd41a":"code","4364986e":"code","a7170e6b":"code","0ac17c66":"code","6fe3c0df":"code","8c84d115":"code","1efab301":"code","1a6e8cf3":"code","8baf3245":"code","f3e960e4":"code","d2ba972b":"code","be05d80c":"code","a685d81c":"code","aa52c6a2":"code","d6f07318":"code","a3ad3bd6":"code","2e47b77e":"code","0337115b":"code","e6f1e320":"code","11cc7e45":"code","9adc7cde":"code","463cd879":"code","165b5251":"code","17af9983":"code","c0b546fa":"code","45c0ff93":"code","87f4c4bd":"code","458108ef":"code","da107a67":"code","1fc6d384":"code","f22ca3a7":"code","0bb99768":"code","26058e12":"code","dbe69dff":"code","062a14a2":"code","e92de411":"code","24235262":"markdown","cb99b3cd":"markdown","6b4377e6":"markdown","c2982acf":"markdown","7f07221e":"markdown","1a0a9cc4":"markdown","db724833":"markdown","83f4a2a3":"markdown"},"source":{"680fd41a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4364986e":"!ls \"\/kaggle\/input\/titanic\"","a7170e6b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0ac17c66":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","6fe3c0df":"# check for null values\ntrain_data.info()","8c84d115":"train_data.isna().sum()","1efab301":"# fill nan values\ntrain_data = train_data.drop(['Cabin', 'Ticket', 'Name'], axis = 1)\nembarked_mode = train_data.Embarked.dropna().mode().values[0]\nage_mean = train_data.Age.dropna().mean()\ntrain_data['Embarked'].replace([np.nan], embarked_mode,inplace = True)\ntrain_data['Age'].replace([np.nan], age_mean, inplace = True)\n\ntrain_data.head()\n","1a6e8cf3":"train_data.isna().sum()","8baf3245":"train_data['Survived'] = train_data['Survived'].replace({1 : 'Y', 0 : 'N'})\ntrain_data['Survived'] = train_data['Survived'].astype('category')\ntrain_data['Pclass'] = train_data['Pclass'].astype('category')\ntrain_data.head()","f3e960e4":"plt.subplots(figsize = (10,8))\nsns.histplot(data = train_data, x = 'Survived', shrink = 0.8)\nplt.show()","d2ba972b":"plt.subplots(figsize = (10,8))\nsns.histplot(data = train_data, x = 'Survived', hue = 'Pclass', multiple = 'dodge', shrink = 0.8)\nplt.show()","be05d80c":"plt.subplots(figsize = (10,8))\nsns.histplot(data = train_data, x = 'Survived', hue = 'Sex', multiple = 'dodge', shrink = 0.8)\nplt.show()","a685d81c":"plt.subplots(figsize = (10,8))\nsns.histplot(data = train_data, x = 'Survived', hue = 'Embarked', multiple = 'dodge', shrink = 0.8)\nplt.show()","aa52c6a2":"train_data.head()","d6f07318":"plt.subplots(figsize = (10,8))\nsns.barplot(data = train_data, x = 'Survived', y = 'Fare')\nplt.show()","a3ad3bd6":"plt.subplots(figsize = (10,8))\nsns.barplot(data = train_data, x = 'Survived', y = 'Age')\nplt.show()","2e47b77e":"plt.subplots(figsize = (10,8))\nsns.barplot(data = train_data, x = 'Survived', y = 'SibSp')\nplt.show()","0337115b":"plt.subplots(figsize = (10,8))\nsns.barplot(data = train_data, x = 'Survived', y = 'Parch')\nplt.show()","e6f1e320":"# we need to convert cat deta in numerical for getting corelations and modeling \ntrain_data.head()\ntrain_data.drop(['PassengerId'], axis = 1,inplace=True)\ntrain_data.replace({'Y':1, 'N':0},inplace = True)\ntrain_data['Pclass'] = train_data['Pclass'].astype('int')\ntrain_data['Embarked'].replace({'S':0, 'C':1, 'Q':2},inplace=True)\ntrain_data['Sex'].replace({'male' : 0, 'female': 1},inplace = True)","11cc7e45":"plt.subplots(figsize = (10,8))\nsns.heatmap(train_data.corr(), annot = True)\nplt.show()\n","9adc7cde":"train_data.head()\n","463cd879":"X_train = train_data.iloc[:, 1:]\nY_train = train_data.iloc[:,0:1]\n\nX_train","165b5251":"Y_train","17af9983":"from sklearn.svm import SVC\nsvcm = SVC(kernel = 'rbf')\nsvcm.fit(X_train, Y_train)","c0b546fa":"from sklearn.metrics import accuracy_score\naccuracy_score(Y_train,svcm.predict(X_train))","45c0ff93":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv').drop(['Name','Cabin','Ticket'],axis = 1)\ntest_data.head()","87f4c4bd":"embarked_mode = test_data.Embarked.dropna().mode().values[0]\nage_mean = test_data.Age.dropna().mean()\nfare_mean = test_data.Fare.dropna().mean()\ntest_data['Embarked'].replace([np.nan], embarked_mode,inplace = True)\ntest_data['Age'].replace([np.nan], age_mean, inplace = True)\ntest_data['Fare'].replace([np.nan], fare_mean, inplace = True)\n","458108ef":"test_data.info()","da107a67":"test_data.head()","1fc6d384":"test_data['Embarked'].replace({'S':0, 'C':1, 'Q':2},inplace=True)\ntest_data['Sex'].replace({'male' : 0, 'female': 1},inplace = True)","f22ca3a7":"test_data.head()","0bb99768":"x_test = test_data.iloc[:, 1:]\ny_test = test_data.iloc[:, 0:1]\nx_test","26058e12":"y_test","dbe69dff":"y_pred = svcm.predict(x_test)\ny_pred","062a14a2":"y_test","e92de411":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': y_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint('Succesfully saved')","24235262":"* There are null values in Age, Cabin, Embarked.\n* Thange values of Pclass to low, middle and high and Survied to yes or now\n* Drop Cabin, Ticket, Name\n\n","cb99b3cd":"## TODO\n\n* try different models\n* if any more data preprocessing techniques\n* if any mode feature engineering techniques\n* learn from other notebooks","6b4377e6":"# Modeling\n","c2982acf":"# check corelation","7f07221e":"# EDA\n","1a0a9cc4":"Drop parch, sbslip and age as they are not having any good corelation coefficient","db724833":"# Data Preprocessing","83f4a2a3":"# Test the model"}}