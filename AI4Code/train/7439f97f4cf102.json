{"cell_type":{"cf0c7127":"code","663062dc":"code","a462fa74":"code","2e38000f":"code","1690965e":"code","0e23206f":"code","cfaa8413":"code","c64147ae":"code","b23f0a2b":"code","9cd5127e":"code","f739d212":"code","cb7d8704":"code","cd524867":"code","ab0bfea3":"code","23ca624e":"code","d9246e96":"code","762e6fcd":"code","758a6ddf":"code","b7aca3da":"code","84e5f2d5":"code","44544a39":"code","23624bbb":"code","fe9d0628":"code","bbd6827f":"code","b46fda09":"code","cbba2ab1":"code","a157d81a":"code","4b9916fa":"code","db6aaacb":"code","79bc5023":"code","f27b8750":"code","91c56e82":"code","e6daf4cc":"code","0b22ec45":"code","e378c85b":"markdown"},"source":{"cf0c7127":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#pd.set_option(\"display.max_rows\", 999)\n#pd.set_option(\"display.max_columns\", 999)\n#pd.reset_option(\"display.max_rows\")\n#pd.reset_option(\"display.max_columns\")\n\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","663062dc":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","a462fa74":"# Target variable\ny = train.pop(\"label\")","2e38000f":"# train set has 784 feature(pixels) and 42000 photos, test set has 784 feature and 28000 photos.  \ntrain.shape, y.shape, test.shape","1690965e":"# scale the input values to type float32 and (normalize) the input values within the interval [0, 1]\n\ntrain = train.astype('float32')\/255\ntest = test.astype('float32')\/255\ny = y.astype('float32')","0e23206f":"# Converting pandas Dataframe to numpy array\n\"\"\"\nKeras models accept three types of inputs:\n\nNumPy arrays, just like Scikit-Learn and many other Python-based libraries. This is a good option if your data fits in memory.\n\nTensorFlow Dataset objects. This is a high-performance option that is more suitable for datasets that do not fit in memory and that are streamed from disk or from a distributed filesystem.\n\nPython generators that yield batches of data (such as custom subclasses of the keras.utils.Sequence class).\n\"\"\"\ntrain = pd.DataFrame.to_numpy(train)\ntest = pd.DataFrame.to_numpy(test)","cfaa8413":"# Splitting training set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size=0.33, random_state=42)","c64147ae":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","b23f0a2b":"# Y variable has 10 different classes. Therefore we need to represent each values in y as vector. \n# This converst for example  1 to [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.] vector. \n\nfrom keras.utils import to_categorical\n\ny_train = to_categorical(y_train, num_classes=10)\n\ny_test = to_categorical(y_test, num_classes=10)","9cd5127e":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","f739d212":"# Plot confusion matrix \n# Note: This code snippet for confusion-matrix is taken directly from the SKLEARN website.\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=30)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('Actual class')\n    plt.xlabel('Predicted class')","cb7d8704":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.utils import to_categorical, plot_model\nfrom keras.regularizers import l2\nimport keras.optimizers\nfrom kerastuner.tuners import RandomSearch","cd524867":"# network parameters\nbatch_size = 128\nhidden_units = 256\ndropout = 0.5\ninput_size = 784\nnum_labels = 10","ab0bfea3":"model = Sequential()\n\nmodel.add(Dense(hidden_units, input_dim=input_size))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(dropout))\n\nmodel.add(Dense(hidden_units))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(dropout))\n\nmodel.add(Dense(num_labels))\nmodel.add(Activation('softmax'))","23ca624e":"model.compile(loss='categorical_crossentropy', \n              optimizer=keras.optimizers.Adam(learning_rate = 0.001),\n              metrics=['accuracy'])","d9246e96":"model.fit(X_train, y_train, epochs=20, batch_size=batch_size, verbose = 0)","762e6fcd":"model.evaluate(X_train, y_train, batch_size=batch_size)","758a6ddf":"model.evaluate(X_test, y_test, batch_size=batch_size)","b7aca3da":"from collections import Counter\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_test)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred, axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_test, axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10))","84e5f2d5":"# Predict () y\u00f6ntemi, t\u00fcm veri k\u00fcmesi \u00f6\u011felerinin tahminlerini i\u00e7eren bir vekt\u00f6r d\u00f6nd\u00fcr\u00fcr.\ntest_result = model.predict(test)\n\n# Sonuclar\u0131 bir csv dosyas\u0131na kaydetmek\n\n# Convert one-hot vector to number\nresults = np.argmax(test_result,axis = 1) # bu bize prediction vekt\u00f6r\u00fcndeki en y\u00fcksek olas\u0131l\u0131\u011fa g\u00f6re ilgili y de\u011ferini verir mesela 2 ya da 3\n\nresults = pd.Series(results,name=\"Label\")\n\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"test_submission_1.csv\",index=False)","44544a39":"model = Sequential()\n\nmodel.add(Dense(hidden_units,\n                kernel_regularizer=l2(0.001),\n                input_dim=input_size))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(num_labels))\nmodel.add(Activation('softmax'))","23624bbb":"model.compile(loss='categorical_crossentropy', \n              optimizer=keras.optimizers.Adam(learning_rate = 0.001),\n              metrics=['accuracy'])","fe9d0628":"model.fit(X_train, y_train, epochs=20, batch_size=batch_size, verbose=0)","bbd6827f":"model.evaluate(X_train, y_train, batch_size=batch_size)","b46fda09":"model.evaluate(X_test, y_test, batch_size=batch_size)","cbba2ab1":"# Predict the values from the validation dataset\nY_pred = model.predict(X_test)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred, axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_test, axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10))","a157d81a":"# Predict () y\u00f6ntemi, t\u00fcm veri k\u00fcmesi \u00f6\u011felerinin tahminlerini i\u00e7eren bir vekt\u00f6r d\u00f6nd\u00fcr\u00fcr.\ntest_result = model.predict(test)\n\n# Sonuclar\u0131 bir csv dosyas\u0131na kaydetmek\n\n# Convert one-hot vector to number\nresults = np.argmax(test_result,axis = 1) # bu bize prediction vekt\u00f6r\u00fcndeki en y\u00fcksek olas\u0131l\u0131\u011fa g\u00f6re ilgili y de\u011ferini verir mesela 2 ya da 3\n\nresults = pd.Series(results,name=\"Label\")\n\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"test_submission_2.csv\",index=False)","4b9916fa":"from kerastuner import HyperModel\n\nclass MyHyperModel(HyperModel):\n\n    def __init__(self, num_classes):\n        self.num_classes = num_classes\n\n    def build(self, hp):\n        \n        model = keras.Sequential()\n        \n        model.add(layers.Dense(units=hp.Int('units',\n                                            min_value=32,\n                                            max_value=512,\n                                            step=32),\n                               \n                               activation=hp.Choice('dense_activation', \n                                                    values=['relu', 'tanh']),\n\n                               input_dim=784))\n        \n        model.add(layers.Dropout(hp.Float('dropout',\n                                          min_value=0.4, \n                                          max_value=0.9,\n                                          step=0.1)))\n        \n        model.add(layers.Dense(units=hp.Int('units',\n                                            min_value=32,\n                                            max_value=512,\n                                            step=32),\n                               \n                               activation=hp.Choice('dense_activation', \n                                                    values=['relu', 'tanh'])))\n                  \n        model.add(layers.Dropout(hp.Float('dropout',\n                                          min_value=0.4, \n                                          max_value=0.9,\n                                          step=0.1)))\n                   \n        model.add(layers.Dense(self.num_classes, activation='softmax'))\n        \n        model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate',\n                                                                values=[0.001, 0.005, 0.009])),\n                      \n                      loss='categorical_crossentropy',\n                      \n                      metrics=['accuracy'])\n        \n        return model\n                  \nhypermodel = MyHyperModel(num_classes=10)","db6aaacb":"tuner = RandomSearch(\n    hypermodel,\n    objective='val_accuracy',\n    max_trials=10,\n    executions_per_trial=2)\n\ntuner.search(X_train, y_train,\n             epochs=5,\n             validation_data=(X_test, y_test))","79bc5023":"best_model = tuner.get_best_models(num_models=1)[0]","f27b8750":"best_model.evaluate(X_train, y_train)","91c56e82":"best_model.evaluate(X_test, y_test)","e6daf4cc":"# Predict the values from the validation dataset\nY_pred = best_model.predict(X_test)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred, axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_test, axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10))","0b22ec45":"# Predict () y\u00f6ntemi, t\u00fcm veri k\u00fcmesi \u00f6\u011felerinin tahminlerini i\u00e7eren bir vekt\u00f6r d\u00f6nd\u00fcr\u00fcr.\ntest_result = best_model.predict(test)\n\n# Sonuclar\u0131 bir csv dosyas\u0131na kaydetmek\n\n# Convert one-hot vector to number\nresults = np.argmax(test_result,axis = 1) # bu bize prediction vekt\u00f6r\u00fcndeki en y\u00fcksek olas\u0131l\u0131\u011fa g\u00f6re ilgili y de\u011ferini verir mesela 2 ya da 3\n\nresults = pd.Series(results,name=\"Label\")\n\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"test_submission_best.csv\",index=False)","e378c85b":"# Model with function and KERAS"}}