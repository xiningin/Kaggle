{"cell_type":{"7cea7938":"code","0fd867c5":"code","a08d37ac":"code","a980e62e":"code","a2a13d22":"code","d2781e09":"code","10a46ea0":"code","75d5b330":"code","7f632eae":"code","3713b10e":"code","c06b9f7a":"code","90524fd0":"code","844b7cf5":"code","94894129":"code","559fd085":"code","ec3faee3":"code","deb8ba5a":"code","4623adcc":"code","f524e487":"code","e3b0044d":"code","5b35afcb":"code","12445bc9":"code","6902241b":"code","b4f1530f":"code","c4d88227":"code","7d0a14df":"code","eaec9959":"code","975f4431":"code","8172d56f":"code","f46dd19e":"code","28146d63":"code","9561dd2f":"code","fa1a6926":"code","36c3b1bf":"code","1ef12c93":"code","e0d1816a":"code","ddcedab4":"code","ef7830d5":"code","4eb5b20c":"code","6f387e10":"code","007db929":"code","33af3653":"code","14bd1c2e":"code","55396b0e":"code","98ab1538":"code","9159d888":"code","683ee011":"code","bf7ca211":"code","0a85305d":"code","56541f50":"code","842ff174":"code","5817a425":"code","0c136408":"code","e2a94c21":"code","9f95364e":"code","b7d7f084":"code","cb598b8f":"code","a7cdf547":"code","0f9d3519":"code","c0d04aec":"code","734d040f":"code","0db1b3bb":"code","20c5988c":"code","f2cf6aa8":"code","6ad62f73":"code","00c23b73":"code","3dc078d2":"code","64c4ebf1":"code","5a27318d":"code","d83ee4f4":"code","66a37283":"code","e30fc234":"code","06cb36d4":"code","c5d638a0":"code","328d6ffc":"code","8fbd5454":"code","1dc47aee":"code","e78bc203":"code","4bb70599":"code","f22cad55":"code","f74ee1cd":"code","5963a64c":"code","e7f4e5d3":"code","88955cea":"code","414f06a1":"code","e68feb0b":"code","4a5ed2ac":"code","73df9455":"code","ccb5e4e3":"code","7a322486":"code","4f1d37aa":"code","e4272d93":"code","75309788":"code","e14e9b33":"code","eb390b98":"code","7dd133bd":"code","ee9010a4":"code","b4b37fbe":"code","79d4fe4b":"code","9086e141":"code","c9edc10c":"code","f5afa754":"code","72d571af":"code","212828cb":"markdown","52f68c22":"markdown","8a0a7ae2":"markdown","6af694fb":"markdown","144b0267":"markdown","dbffcd97":"markdown","12e88717":"markdown","0a74578f":"markdown","e30329a9":"markdown","d06a7e68":"markdown","1f054939":"markdown","f0493958":"markdown","8a23b9b2":"markdown","ec8d564f":"markdown","bab4c794":"markdown","8ab90fdd":"markdown","d973dfe5":"markdown"},"source":{"7cea7938":"import pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport folium\nimport requests\n!pip install googletrans\nimport googletrans\nimport re\nfrom pyproj import CRS\nfrom pandas.plotting import lag_plot\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n!pip install pmdarima\nfrom pmdarima.arima import auto_arima\nfrom fbprophet import Prophet\nfrom statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV\nimport time\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression","0fd867c5":"confirmed = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecovered = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","a08d37ac":"confirmed.head()","a980e62e":"confirmed['Province\/State'] = confirmed['Province\/State'].fillna('Unknown')\ndeaths['Province\/State'] = deaths['Province\/State'].fillna('Unknown')\nrecovered['Province\/State'] = recovered['Province\/State'].fillna('Unknown')","a2a13d22":"column = confirmed.columns[len(confirmed.columns)-1]\nconfirmed_per_country = confirmed.groupby('Country\/Region',as_index=False)[column].sum()","d2781e09":"fig = px.choropleth(confirmed_per_country, locations=confirmed_per_country['Country\/Region'],color=confirmed_per_country[column],\n                   locationmode='country names',hover_name=confirmed_per_country['Country\/Region'],\n                    color_continuous_scale=px.colors.sequential.Tealgrn)\nfig.update_layout(\n    title='Total Confirmed Cases Per Country',\n)\nfig.show()","10a46ea0":"column = deaths.columns[len(confirmed.columns)-1]\ndeaths_per_country = deaths.groupby('Country\/Region',as_index=False)[column].sum()","75d5b330":"fig = px.choropleth(deaths_per_country, locations=deaths_per_country['Country\/Region'],color=deaths_per_country[column],\n                   locationmode='country names',hover_name=deaths_per_country['Country\/Region'],\n                    color_continuous_scale=px.colors.sequential.Redor)\nfig.update_layout(\n    title='Total Deaths Per Country',\n)\nfig.show()","7f632eae":"column = recovered.columns[len(recovered.columns)-1]\nrecovered_per_country = recovered.groupby('Country\/Region',as_index=False)[column].sum()","3713b10e":"fig = px.choropleth(recovered_per_country, locations=recovered_per_country['Country\/Region'],color=recovered_per_country[column],\n                   locationmode='country names',hover_name=recovered_per_country['Country\/Region'],\n                    color_continuous_scale=px.colors.sequential.Blues)\nfig.update_layout(\n    title='Total Recoveries Per Country',\n)\nfig.show()","c06b9f7a":"top_10_countries_confirmed = confirmed_per_country.sort_values(column,ascending=True).tail(10)\nfig = plt.figure(figsize=(10,7))\nfig.suptitle('Highest Confirmed Cases as of 9-Sept-2020', fontsize=20)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=16)\nsns.set_style('whitegrid')\nsns.barplot(x=column,y='Country\/Region',data=top_10_countries_confirmed,palette='Greens')\nplt.show()","90524fd0":"top_10_countries_deaths = deaths_per_country.sort_values(column,ascending=True).tail(10)\nfig = plt.figure(figsize=(10,7))\nfig.suptitle('Highest Deaths as of 9-Sept-2020', fontsize=20)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=16)\nsns.set_style('whitegrid')\nsns.barplot(x=column,y='Country\/Region',data=top_10_countries_deaths,palette='OrRd')\nplt.show()","844b7cf5":"top_10_countries_recovered = recovered_per_country.sort_values(column,ascending=True).tail(10)\nfig = plt.figure(figsize=(10,7))\nfig.suptitle('Most Recoveries as of 9-Sept-2020', fontsize=20)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=16)\nsns.set_style('whitegrid')\nsns.barplot(x=column,y='Country\/Region',data=top_10_countries_recovered,palette='Blues')\nplt.show()","94894129":"columns = confirmed.columns[4:]\ndata = confirmed.groupby('Country\/Region',as_index=False)[columns].sum()\ntemp = data.melt(['Country\/Region'],var_name='Date', value_name='Cases')\ntemp.head()","559fd085":"fig = px.choropleth(temp, locations=temp['Country\/Region'],\n                    color=temp['Cases'],locationmode='country names', \n                    hover_name=temp['Country\/Region'], \n                    color_continuous_scale=px.colors.sequential.deep,\n                    animation_frame=\"Date\")\nfig.update_layout(\n\n    title='Evolution of confirmed cases In Each Country',\n)\nfig.show()","ec3faee3":"data_over_time = pd.DataFrame()","deb8ba5a":"dates = []\nconfirm = []\ndeath = []\nrecoveries = []\nfor col in confirmed.columns[4:]:\n    dates.append(col)\n    confirm.append(confirmed[col].sum())\n    death.append(deaths[col].sum())\n    recoveries.append(recovered[col].sum())\ndata_over_time['observationDate'] = dates\ndata_over_time['confirmCases'] = confirm\ndata_over_time['deaths'] = death\ndata_over_time['recoveries'] = recoveries\ndata_over_time['observationDate'] = pd.to_datetime(data_over_time['observationDate'])","4623adcc":"data_over_time.head()","f524e487":"temp = data_over_time.melt(id_vars='observationDate',value_vars=['confirmCases','deaths','recoveries'],var_name='Case',value_name='Count')\ntemp.head()","e3b0044d":"fig = px.area(temp, x=\"observationDate\", y=\"Count\", color=\"Case\",\n    height=600, width=700,\n             title='Cases over time', color_discrete_sequence = ['rgb(27,158,119)','#FF7F0E','#1F77B4'])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","5b35afcb":"fig = px.line(data_over_time, x=\"observationDate\", y='confirmCases', width=700, color_discrete_sequence=['rgb(27,158,119)'])\nfig.show()","12445bc9":"fig = px.line(data_over_time, x=\"observationDate\", y='deaths', width=700, color_discrete_sequence=['#FF7F0E'])\nfig.show()","6902241b":"fig = px.line(data_over_time, x=\"observationDate\", y='recoveries', width=700, color_discrete_sequence=['#1F77B4'])\nfig.show()","b4f1530f":"confirmed_china = confirmed[confirmed['Country\/Region'] == 'China'].reset_index(drop=True)","c4d88227":"gdf_china = gpd.GeoDataFrame(\n    confirmed_china, geometry=gpd.points_from_xy(confirmed_china.Long, confirmed_china.Lat))","7d0a14df":"gdf_china.head()","eaec9959":"data = pd.DataFrame()\ndata['geoid'] = gdf_china.index.astype(str)\ndata['confirmed_cases_by_9\/10\/20'] = gdf_china['9\/10\/20']\ndata['province\/state'] = gdf_china['Province\/State'].str.lower()","975f4431":"url = 'https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/496669\/922532\/china.json?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20201001%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20201001T184046Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=37959d504d9db53cb4acf85367f26d4f63ccda696901eee5132351c8a1f3b19bf765a9b2dd025526a4f1cbc7f56abc0296a31d07099f4680b21225361d175e1efbf43d05ec05ef5806648d4988f4e8a61bd73753a9e507c956f7d0959c4da996628521eabef7af98a90463943ab02cfdab8bb85525a8fa4e9e1576759de17045ccddc7d4202ddf8913a3e0002be19f0aaf3aa04feee7cb6af9f849965d43f245de55ad6beef6028d4be3c60084ed2be8d97b17f16c04ae9b7f2b621d9002a1f9171951ca995a8f379f311135e1a455d76fe009e2b9f49a90904394472cda22558a2b9e2b4848751f15f9fd4bcc20ac3ae89735dd41096c1bde571a92d4eac2a3'\nchina_geo = requests.get(url).json()\ndf = gpd.GeoDataFrame.from_features(china_geo, crs='EPSG:4326')","8172d56f":"translator = googletrans.Translator()\nresult = []\nfor name in df['name']:\n    result.append(translator.translate(name).text)\ndf['english_name'] = result","f46dd19e":"province = []\nfor name in df['english_name']:\n    #print(name)\n    a = re.match('\\w+ \\w+ autonomous region',name.lower()) \n    b = re.match('\\w+ autonomous region',name.lower())\n    c = re.match('\\w+ province',name.lower())\n    d = re.match('\\w+ \\w+ sar',name.lower())\n    e = re.match('\\w+ special administrative region',name.lower())\n    f = re.match('\\w+ \\w+ special administrative region',name.lower())\n    g = re.match('\\w+ city',name.lower())\n    if a:\n        words = a[0].split(' ')\n        province.append(words[0]+' '+words[1])\n    elif b:\n        words = b[0].split(' ')\n        province.append(words[0])\n    elif c:\n        words = c[0].split(' ')\n        province.append(words[0])\n    elif d:\n        words = d[0].split(' ')\n        province.append(words[0]+' '+words[1])\n    elif e:\n        words = e[0].split(' ')\n        province.append(words[0])\n    elif f:\n        words = f[0].split(' ')\n        province.append(words[0]+' '+words[1])\n    elif g:\n        words = g[0].split(' ')\n        province.append(words[0])\n    else:\n        province.append(name.lower())\ndf['english_province'] = province\n        ","28146d63":"df['english_name'].unique()","9561dd2f":"def correct_provinces(row):\n    province = row\n    if  row == 'macau':\n        province =  'macao'\n    elif row == 'xinjiang':\n        province = 'xinjiang uygur'\n    elif row == 'guangxi':\n        province = 'guangxi zhuang'\n    elif row == 'ningxia':\n        province = 'ningxia hui'\n    return province\ndata['province\/state'] = data['province\/state'].apply(lambda row: correct_provinces(row),1)","fa1a6926":"geometry = []\nfor province in data['province\/state']:\n    for idx,row in df.iterrows():\n        if province == row['english_province']:\n            geo = df['geometry'][idx]\n            geometry.append(geo)\n            break","36c3b1bf":"data['geometry'] = geometry","1ef12c93":"data_gdf = gpd.GeoDataFrame(\n    data, geometry='geometry')\ntype(data_gdf)","e0d1816a":"data_gdf.crs = CRS.from_epsg(4326)","ddcedab4":"m = folium.Map(location=[30.5928, 114.3055], tiles = 'cartodbpositron', control_scale=True,zoom_start=4,\n    min_zoom=3,\n    max_zoom=7)\n\nchoropleth = folium.Choropleth(\n    geo_data=data_gdf,\n    name='Confirmed Cases in China as of 9\/10\/20',\n    data=data_gdf,\n    columns=['geoid', 'confirmed_cases_by_9\/10\/20'],\n    key_on='feature.id',\n    fill_color='YlOrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    line_color='white',\n    line_weight=0,\n    highlight=True,\n    smooth_factor=1.0,\n    zoom_on_click=True,\n    #threshold_scale=[100, 250, 500, 1000, 2000],\n    legend_name= 'Confirmed Cases in China as of 9\/10\/20').add_to(m)\n\nchoropleth.geojson.add_child(folium.features.GeoJsonTooltip(\n        fields=['confirmed_cases_by_9\/10\/20'],\n        aliases=['Cases'],\n        style=('background-color: grey; color: white;'),\n        localize=True\n        )\n)\n#Show map\nm","ef7830d5":"columns = gdf_china.columns[4:-2]\ndata1 = gdf_china.groupby('Province\/State',as_index=False)[columns].sum()\ntemp = data1.melt(['Province\/State'],var_name='Date', value_name='Cases')\ntemp.head()","4eb5b20c":"fig = px.line(temp, x='Date', y='Cases', color='Province\/State', title='China: State-wise cases')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","6f387e10":"daily_confirmed = data_over_time[['observationDate','confirmCases']]","007db929":"daily_confirmed = daily_confirmed.set_index('observationDate')","33af3653":"train_size = int(len(daily_confirmed) * 0.95)\ntrain_confirmed, test_confirmed = daily_confirmed[0:train_size], daily_confirmed[train_size:len(daily_confirmed)]","14bd1c2e":"train_confirmed.head()","55396b0e":"lag_plot(train_confirmed)","98ab1538":"model_comparison = []","9159d888":"model_ar= auto_arima(train_confirmed['confirmCases'],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=7,max_q=0,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_ar.fit(train_confirmed['confirmCases'])","683ee011":"prediction_ar=model_ar.predict(len(test_confirmed['confirmCases']))","bf7ca211":"rmse = np.sqrt(mean_squared_error(test_confirmed['confirmCases'],prediction_ar))\nprint(\"Root Mean Square Error for AR Model: \",rmse)\nmodel_comparison.append(rmse)","0a85305d":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prediction_ar,\n              mode='lines+markers',name=\"AR predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases AR Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","56541f50":"AR_model_new_prediction=[]\nfor i in range(1,21):\n    AR_model_new_prediction.append(model_ar.predict(len(test_confirmed['confirmCases'])+i)[-1])\nprint(AR_model_new_prediction)","842ff174":"model_ma= auto_arima(train_confirmed['confirmCases'],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=0,max_q=6,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_ma.fit(train_confirmed['confirmCases'])","5817a425":"prediction_ma=model_ma.predict(len(test_confirmed['confirmCases']))","0c136408":"np.sqrt(mean_squared_error(test_confirmed['confirmCases'],prediction_ma))\nprint(\"Root Mean Square Error for MA Model: \",rmse)\nmodel_comparison.append(rmse)","e2a94c21":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prediction_ma,\n              mode='lines+markers',name=\"MA Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases MA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","9f95364e":"MA_model_new_prediction=[]\nfor i in range(1,21):\n    MA_model_new_prediction.append(model_ma.predict(len(test_confirmed['confirmCases'])+i)[-1])\nprint(MA_model_new_prediction)","b7d7f084":"model_arima= auto_arima(train_confirmed['confirmCases'],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=7,max_q=7,\n                   suppress_warnings=True,stepwise=False,seasonal=False)\nmodel_arima.fit(train_confirmed['confirmCases'])","cb598b8f":"prediction_arima=model_arima.predict(len(test_confirmed['confirmCases']))","a7cdf547":"rmse = np.sqrt(mean_squared_error(test_confirmed['confirmCases'],prediction_arima))\nprint(\"Root Mean Square Error for MA Model: \",rmse)\nmodel_comparison.append(rmse)","0f9d3519":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prediction_arima,\n              mode='lines+markers',name=\"ARIMA Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases ARIMA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","c0d04aec":"ARIMA_model_new_prediction=[]\nfor i in range(1,21):\n    ARIMA_model_new_prediction.append(model_arima.predict(len(test_confirmed['confirmCases'])+i)[-1])\nprint(ARIMA_model_new_prediction)","734d040f":"model_sarima= auto_arima(train_confirmed['confirmCases'],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=7,max_q=7,\n                   m=7,suppress_warnings=True,stepwise=True,seasonal=True)\nmodel_sarima.fit(train_confirmed['confirmCases'])","0db1b3bb":"prediction_sarima=model_sarima.predict(len(test_confirmed['confirmCases']))","20c5988c":"rmse = np.sqrt(mean_squared_error(test_confirmed['confirmCases'],prediction_sarima))\nprint(\"Root Mean Square Error for SARIMA Model: \",rmse)\nmodel_comparison.append(rmse)","f2cf6aa8":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prediction_sarima,\n              mode='lines+markers',name=\"SARIMA Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases SARIMA Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","6ad62f73":"prophet_daily_confirmed = data_over_time[['observationDate','confirmCases']]\nprophet_daily_confirmed.rename(columns = {\"observationDate\": \"ds\", \n                                  \"confirmCases\":\"y\"},inplace=True) ","00c23b73":"model_prophet = Prophet()\nmodel_prophet.fit(prophet_daily_confirmed)","3dc078d2":"future = model_prophet.make_future_dataframe(periods=20)\nforecast = model_prophet.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","64c4ebf1":"rmse = np.sqrt(mean_squared_error(daily_confirmed['confirmCases'],\n                    forecast['yhat'].head(daily_confirmed['confirmCases'].shape[0])))\nprint(\"Root Mean Squared Error for Prophet Model: \",rmse)\nmodel_comparison.append(rmse)","5a27318d":"fig1 = model_prophet.plot(forecast)","d83ee4f4":"fig2 = model_prophet.plot_components(forecast)","66a37283":"model_holt = Holt(np.asarray(train_confirmed['confirmCases'])).fit(smoothing_level=0.38, \n                                                                   smoothing_slope=0.38,optimized=False)","e30fc234":"prdeictions_holt = model_holt.forecast(len(test_confirmed))\nrmse = np.sqrt(mean_squared_error(\n    test_confirmed[\"confirmCases\"],prdeictions_holt))\nprint(\"Root Mean Square Error Holt's Linear Model: \",rmse)\nmodel_comparison.append(rmse)","06cb36d4":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prdeictions_holt,\n              mode='lines+markers',name=\"Holt Linear Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases Holt Linear Model Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","c5d638a0":"Holt_model_new_prediction=[]\nfor i in range(1,21):\n    Holt_model_new_prediction.append(model_holt.predict(len(test_confirmed['confirmCases'])+i)[-1])\nprint(Holt_model_new_prediction)","328d6ffc":"decomposition = seasonal_decompose(daily_confirmed)\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid","8fbd5454":"plt.figure(figsize=(10,12))\nplt.subplot(411)\nplt.plot(daily_confirmed, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","1dc47aee":"resample = daily_confirmed.resample('2W')\nweekly_mean_confirmed = resample.mean()\nweekly_mean_confirmed.head(5).plot()\nplt.show()","e78bc203":"model_es=ExponentialSmoothing(np.asarray(train_confirmed['confirmCases']),seasonal_periods=14,trend='mul', seasonal='add').fit()","4bb70599":"prdeictions_es = model_es.forecast(len(test_confirmed))\nrmse = np.sqrt(mean_squared_error(\n    test_confirmed[\"confirmCases\"],prdeictions_es))\nprint(\"Root Mean Square Error Exponential Smoothing Model: \",rmse)\nmodel_comparison.append(rmse)","f22cad55":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prdeictions_es,\n              mode='lines+markers',name=\"Exponential Smoothing Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases Exponential Smoothing Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","f74ee1cd":"ES_model_new_prediction=[]\nfor i in range(1,21):\n    ES_model_new_prediction.append(model_es.predict(len(test_confirmed['confirmCases'])+i)[-1])\nprint(ES_model_new_prediction)","5963a64c":"datewise_confirmed = data_over_time[['observationDate','confirmCases']].copy()","e7f4e5d3":"datewise_confirmed['month'] = datewise_confirmed['observationDate'].dt.month\ndatewise_confirmed['day'] = datewise_confirmed['observationDate'].dt.day\ndatewise_confirmed['week'] = datewise_confirmed['observationDate'].dt.week\ndatewise_confirmed['quarter'] = datewise_confirmed['observationDate'].dt.quarter\ndatewise_confirmed['daysSince'] = (datewise_confirmed['observationDate'] - datewise_confirmed['observationDate'].min()).dt.days","88955cea":"unixtime = []\n    \nfor date in datewise_confirmed['observationDate']:\n    unixtime.append(time.mktime(date.timetuple()))\ndatewise_confirmed['DateTime'] = unixtime\ndatewise_confirmed = datewise_confirmed.drop(['observationDate'],axis=1)","414f06a1":"datewise_confirmed.info()","e68feb0b":"train_confirmed_reg, test_confirmed_reg = datewise_confirmed[0:train_size], datewise_confirmed[train_size:len(datewise_confirmed)]\ny_train= train_confirmed_reg.pop('confirmCases')\nX_train = train_confirmed_reg\ny_test= test_confirmed_reg.pop('confirmCases')\nX_test = test_confirmed_reg","4a5ed2ac":"model_xgb = XGBRegressor()","73df9455":"parameters = {'learning_rate': [0.1, 0.2, 0.3], #so called `eta` value\n              'max_depth': [5, 6, 7],\n              'min_child_weight': [4,5,6],\n              'subsample': [0.6,0.7,0.8],\n              'colsample_bytree': [0.6,0.7,0.8],\n              'n_estimators': [500,1000,1500,2000]}","ccb5e4e3":"xgb_grid = GridSearchCV(model_xgb,\n                        parameters,\n                        cv = 2,\n                        n_jobs = 5,\n                        verbose=True)","7a322486":"xgb_grid.fit(X_train,y_train)","4f1d37aa":"xgb_grid.best_params_","e4272d93":"model_xgb1 = XGBRegressor(colsample_bytree=0.6,learning_rate=0.2,max_depth=5,min_child_weight=4,n_estimators=2000,subsample= 0.7)","75309788":"model_xgb1.fit(X_train[['daysSince','DateTime','week']],y_train)\nprdeictions_xgb = model_xgb1.predict(X_test[['daysSince','DateTime','week']])\nrmse = np.sqrt(mean_squared_error(\n    y_test,prdeictions_xgb))\nprint(\"Root Mean Square Error XGBRegressor Model: \",rmse)\nmodel_comparison.append(rmse)","e14e9b33":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prdeictions_xgb,\n              mode='lines+markers',name=\"Exponential Smoothing Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases Exponential Smoothing Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","eb390b98":"poly = PolynomialFeatures(degree=5)","7dd133bd":"train_confirmed_reg, test_confirmed_reg = datewise_confirmed[0:train_size], datewise_confirmed[train_size:len(datewise_confirmed)]","ee9010a4":"poly_train_confirmed_reg = poly.fit_transform(train_confirmed_reg[['daysSince','DateTime']])\npoly_test_confirmed_reg = poly.fit_transform(test_confirmed_reg[['daysSince','DateTime']])","b4b37fbe":"model_linear=LinearRegression(normalize=True)\nmodel_linear.fit(poly_train_confirmed_reg,y_train)","79d4fe4b":"prediction_poly=model_linear.predict(poly_test_confirmed_reg)\nrmse_poly=np.sqrt(mean_squared_error(y_test,prediction_poly))\nmodel_comparison.append(rmse_poly)\nprint(\"Root Mean Squared Error for Polynomial Regression: \",rmse_poly)","9086e141":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=train_confirmed.index,y=train_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=test_confirmed['confirmCases'],\n              mode='lines+markers',name=\"Test Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=test_confirmed.index,y=prediction_poly,\n              mode='lines+markers',name=\"Exponential Smoothing Predictions for Confirmed Cases\"))\nfig.update_layout(title=\"Confirmed Cases Exponential Smoothing Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","c9edc10c":"models = ['AR','MA','ARIMA','SARIMA','Prophet','Holt\"s Linear','Exponential Smoothing','XGBRegression','Polynomial Regression']","f5afa754":"model_rmse = pd.DataFrame()\nmodel_rmse['models'] = models\nmodel_rmse['RMSE'] = model_comparison","72d571af":"model_rmse.sort_values('RMSE',ascending=True).reset_index(drop=True)","212828cb":"SARIMA model:","52f68c22":"Seasonal periods = 14 days or 2 weeks","8a0a7ae2":"Conclusion:","6af694fb":"Prophet model:","144b0267":"<b>Machine Learning Models for Forecasting","dbffcd97":"Decomposing the time series:","12e88717":"Exponential Smoothing:","0a74578f":"<b>China:<\/b>","e30329a9":"AR model:","d06a7e68":"Seasonal component is additive(as frequency and variance does not change with time) and trend is multiplicative.","1f054939":"Prophet Model performed the best in forecasting confirmed cases round the world.","f0493958":"This is an aditive series, as the seasonality and residual component are independent of trend.","8a23b9b2":"Holt's Linear Method(Does not take Seasonality into account):","ec8d564f":"Forecasting:","bab4c794":"ARIMA model:","8ab90fdd":"Polynomial Regression:","d973dfe5":"MA model:"}}