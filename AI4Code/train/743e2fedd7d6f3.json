{"cell_type":{"7664931f":"code","834cc7ad":"code","0d15b51d":"code","ac6ecc3f":"code","ff053afa":"code","0f651056":"code","76f67b04":"code","088849df":"code","54850934":"code","140781a2":"code","b0faf241":"code","cee264b8":"code","9e4c0bd3":"code","131695d5":"code","03343aa1":"code","fea40182":"code","dd8e38c0":"code","89cecee0":"code","4687ff2d":"code","8056ba20":"code","3a08995c":"code","486a8770":"code","f68be85b":"code","80c6609e":"code","da578008":"code","dc9fc0ed":"code","57078a6c":"code","08affb3f":"code","92c79d58":"code","6e562fc6":"code","51fb1161":"code","274c44ab":"code","469a6241":"code","1bd90b7b":"code","1bbaa2c1":"code","76deec0d":"code","194b9c4c":"code","435f7757":"markdown","d8ebf119":"markdown","70d98747":"markdown","6f3c9493":"markdown","8a3da46c":"markdown","cbb57e90":"markdown","a90059ae":"markdown","9e1e22a7":"markdown","a34feb11":"markdown","ebefbb08":"markdown","36d93d86":"markdown","764cc291":"markdown","543d61a6":"markdown","8e71432b":"markdown","c65ab34a":"markdown"},"source":{"7664931f":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.model_selection import train_test_split","834cc7ad":"from plotly.offline import init_notebook_mode, iplot\nfrom collections import Counter\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly import tools\nfrom datetime import date\nimport plotly.figure_factory as ff\n\nimport random \nimport warnings\nimport operator\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)","0d15b51d":"test = pd.read_csv('..\/input\/test.csv')\ntrain = pd.read_csv('..\/input\/train.csv')\n\nprint (\"Train Dataset: Rows, Columns: \", train.shape)\nprint (\"Test Dataset: Rows, Columns: \", test.shape)","ac6ecc3f":"train.tail(n=3)","ff053afa":"print (\"Top Columns having missing values\")\nmissmap = train.isnull().sum().to_frame().sort_values(0, ascending = False)\nmissmap.head()","0f651056":"d1 = train # keeping the original dataframe untouched\nd1 = d1.fillna(value = 0) # Converting all the NaN values to 0","76f67b04":"# checking the null value removal\nmissmap = d1.isnull().sum().to_frame().sort_values(0, ascending = False)\nmissmap.head()","088849df":"def compare_plot(col, title):\n#     tr1 = d1[d1['Target'] == 1][col].value_counts().to_dict()\n#     tr2 = d1[d1['Target'] == 2][col].value_counts().to_dict()\n#     tr3 = d1[d1['Target'] == 3][col].value_counts().to_dict()\n#     tr4 = d1[d1['Target'] == 4][col].value_counts().to_dict()\n\n        tar1 = dict(Counter(d1['Target']==1)) # generating a dictionary for counts of different target values\n        tar2 = dict(Counter(d1['Target']==2))\n        tar3 = dict(Counter(d1['Target']==3))\n        tar4 = dict(Counter(d1['Target']==4))\n      \n        x_coord = ['Extereme', 'Moderate', 'Vulnerable', 'NonVulnerable'] # defining the x-co-ordinate variables\n        trace1 = go.Bar(y=[tar1[0], tar2[0], tar3[0], tar4[0]], name=\"Not Present\", x=x_coord, marker=dict(color=\"pink\", opacity=0.6))\n        trace2 = go.Bar(y=[tar1[1], tar2[1], tar3[1], tar4[1]], name=\"Present\", x=x_coord, marker=dict(color=\"darkmagenta\", opacity=0.6))\n    \n        return trace1, trace2 \n    \ntr1, tr2 = compare_plot(\"v18q\", \"Tablet\")\ntr3, tr4 = compare_plot(\"refrig\", \"Refrigirator\")\ntr5, tr6 = compare_plot(\"computer\", \"Computer\")\ntr7, tr8 = compare_plot(\"television\", \"Television\")\ntr9, tr10 = compare_plot(\"mobilephone\", \"MobilePhone\")\ntitles = [\"Tablet\", \"Refrigirator\", \"Computer\", \"Television\", \"MobilePhone\"]\n\nfig = tools.make_subplots(rows=3, cols=2, print_grid=False, subplot_titles=titles)\nfig.append_trace(tr1, 1, 1)\nfig.append_trace(tr2, 1, 1)\nfig.append_trace(tr3, 1, 2)\nfig.append_trace(tr4, 1, 2)\nfig.append_trace(tr5, 2, 1)\nfig.append_trace(tr6, 2, 1)\nfig.append_trace(tr7, 2, 2)\nfig.append_trace(tr8, 2, 2)\nfig.append_trace(tr9, 3, 1)\nfig.append_trace(tr10, 3, 1)\n\nfig['layout'].update(height=1000, title=\"Electronic Gadgets v\/s Household types\", barmode=\"stack\", showlegend=False)\niplot(fig)","54850934":"def find_prominent(row, mats):\n    for c in mats:\n        if row[c] == 1:\n            return c\n    return \n\ndef combine(starter, colname, title, replacemap):\n    mats = [c for c in train.columns if c.startswith(starter)]\n    train[colname] = train.apply(lambda row : find_prominent(row, mats), axis=1)\n    train[colname] = train[colname].apply(lambda x : replacemap[x] if x != None else x )\n\n    om1 = train[train['Target'] == 1][colname].value_counts().to_frame()\n    om2 = train[train['Target'] == 2][colname].value_counts().to_frame()\n    om3 = train[train['Target'] == 3][colname].value_counts().to_frame()\n    om4 = train[train['Target'] == 4][colname].value_counts().to_frame()\n\n    trace1 = go.Bar(y=om1[colname], x=om1.index, name=\"Extereme\", marker=dict(color='red', opacity=0.9))\n    trace2 = go.Bar(y=om2[colname], x=om2.index, name=\"Moderate\", marker=dict(color='red', opacity=0.5))\n    trace3 = go.Bar(y=om3[colname], x=om3.index, name=\"Vulnerable\", marker=dict(color='green', opacity=0.5))\n    trace4 = go.Bar(y=om4[colname], x=om4.index, name=\"NonVulnerable\", marker=dict(color='green', opacity=0.9))\n    return [trace1, trace2, trace3, trace4]\n\ntitles = [\"Outside Wall Material\", \"Floor Material\", \"Roof Material\", \"Sanitary Conditions\", \"Cooking Energy Sources\", \"Disposal Methods\"]\nfig = tools.make_subplots(rows=3, cols=2, print_grid=False, subplot_titles=titles)\n\n\n### outside material\nflr = {'paredblolad' : \"Block \/ Brick\", \"paredpreb\" : \"Cement\", \"paredmad\" : \"Wood\",\n      \"paredzocalo\" : \"Socket\", \"pareddes\" : \"Waste Material\", \"paredfibras\" : \"Fibres\",\n      \"paredother\" : \"Other\", \"paredzinc\": \"Zink\"}\nres = combine(\"pared\", \"outside_material\", \"Predominanat Material of the External Walls\", flr)      \nfor x in res:\n    fig.append_trace(x, 1, 1)\n\n### floor material \nflr = {'pisomoscer' : \"Mosaic \/ Ceramic\", \"pisocemento\" : \"Cement\", \"pisonatur\" : \"Natural Material\",\n      \"pisonotiene\" : \"No Floor\", \"pisomadera\" : \"Wood\", \"pisoother\" : \"Other\"}\nres = combine(\"piso\", \"floor_material\", \"Floor Material of the Households\", flr)\nfor x in res:\n    fig.append_trace(x, 1, 2)\n\n    \n### Roof Material\nflr = {'techozinc' : \"Zinc\", \"techoentrepiso\" : \"Fibre \/ Cement\", \"techocane\" : \"Natural Fibre\", \"techootro\" : \"Other\"}\nres = combine(\"tech\", \"roof_material\", \"Roof Material of the Households\", flr)  \nfor x in res:\n    fig.append_trace(x, 2, 1)\n\n\n### Sanitary Conditions\nflr = {'sanitario1' : \"No Toilet\", \"sanitario2\" : \"Sewer \/ Cesspool\", \"sanitario3\" : \"Septic Tank\",\n       \"sanitario5\" : \"Black Hole\", \"sanitario6\" : \"Other System\"}\nres = combine(\"sanit\", \"sanitary\", \"Sanitary Conditions of the Households\", flr)\nfor x in res:\n    fig.append_trace(x, 2, 2)\n\n### Energy Source\nflr = {'energcocinar1' : \"No Kitchen\", \"energcocinar2\" : \"Electricity\", \"energcocinar3\" : \"Cooking Gas\",\n       \"energcocinar4\" : \"Wood Charcoal\"}\nres = combine(\"energ\", \"energy_source\", \"Main source of energy for cooking\", flr)  \nfor x in res:\n    fig.append_trace(x, 3, 1)\n\n### Disposal Methods\nflr = {\"elimbasu1\":\"Tanker truck\",\n\"elimbasu2\": \"Buried\",\n\"elimbasu3\": \"Burning\",\n\"elimbasu4\": \"Unoccupied space\",\n\"elimbasu5\": \"River\",\n\"elimbasu6\": \"Other\"}\nres = combine(\"elim\", \"waste_method\", \"Rubbish Disposals Method\", flr)  \nfor x in res:\n    fig.append_trace(x, 3, 2)\n\nfig['layout'].update(height=900, title=\"Key Characteristics of Households\", barmode=\"stack\", showlegend=False)\niplot(fig)","140781a2":"def combine2(starter, colname, title, replacemap, plotme = True):\n    mats = [c for c in train.columns if c.startswith(starter)]\n    train[colname] = train.apply(lambda row : find_prominent(row, mats), axis=1)\n    train[colname] = train[colname].apply(lambda x : replacemap[x] if x != None else x )\n\n    om1 = train[train['Target'] == 1][colname].value_counts().to_frame()\n    om2 = train[train['Target'] == 2][colname].value_counts().to_frame()\n    om3 = train[train['Target'] == 3][colname].value_counts().to_frame()\n    om4 = train[train['Target'] == 4][colname].value_counts().to_frame()\n\n    trace1 = go.Bar(y=om1[colname], x=om1.index, name=\"Extereme\", marker=dict(color='red', opacity=0.9))\n    trace2 = go.Bar(y=om2[colname], x=om2.index, name=\"Moderate\", marker=dict(color='orange', opacity=0.5))\n    trace3 = go.Bar(y=om3[colname], x=om3.index, name=\"Vulnerable\", marker=dict(color='yellow', opacity=0.9))\n    trace4 = go.Bar(y=om4[colname], x=om4.index, name=\"NonVulnerable\", marker=dict(color='green', opacity=0.5))\n\n    data = [trace1, trace2, trace3, trace4]\n    layout = dict(title=title, legend=dict(y=1.1, orientation=\"h\"), barmode=\"stack\", margin=dict(l=50), height=400)\n    fig = go.Figure(data=data, layout=layout)\n    if plotme:\n        iplot(fig)\n\n\nflr = {\"instlevel1\": \"No Education\", \"instlevel2\": \"Incomplete Primary\", \"instlevel3\": \"Complete Primary\", \n       \"instlevel4\": \"Incomplete Sc.\", \"instlevel5\": \"Complete Sc.\", \"instlevel6\": \"Incomplete Tech Sc.\",\n       \"instlevel7\": \"Complete Tech Sc.\", \"instlevel8\": \"Undergraduation\", \"instlevel9\": \"Postgraduation\"}\ncombine2(\"instl\", \"education_details\", \"Education Details of Family Members\", flr)  \n\nflr = {\"estadocivil1\": \"< 10 years\", \"estadocivil2\": \"Free \/ Coupled union\", \"estadocivil3\": \"Married\", \n       \"estadocivil4\": \"Divorced\", \"estadocivil5\": \"Separated\", \"estadocivil6\": \"Widow\",\n       \"estadocivil7\": \"Single\"}\ncombine2(\"estado\", \"status_members\", \"Status of Family Members\", flr)  \n\nflr = {\"lugar1\": \"Central\", \"lugar2\": \"Chorotega\", \"lugar3\": \"Pac\u00c3\u0192\u00c2\u00adfico central\", \n       \"lugar4\": \"Brunca\", \"lugar5\": \"Huetar Atl\u00c3\u0192\u00c2\u00a1ntica\", \"lugar6\": \"Huetar Norte\"}\ncombine2(\"lugar\", \"region\", \"Region of the Households\", flr)  ","b0faf241":"d1['Toilet_Score'] = (d1['sanitario1'] + 0 * (d1['sanitario2'] + d1['sanitario3'] + d1['sanitario5'] +  d1['sanitario6']))\n# sanitario1, =1 no toilet in the dwelling\n# sanitario2, =1 toilet connected to sewer or cesspool\n# sanitario3, =1 toilet connected to  septic tank\n# sanitario5, =1 toilet connected to black hole or letrine\n# sanitario6, =1 toilet connected to other system\n\n# only houses with no toilets are provided 1 point, others 'zero'","cee264b8":"d1['Energy_Score'] = ( d1['energcocinar1'] +  (d1['energcocinar4'] ) - 1 * ( d1['energcocinar2'] + d1['energcocinar3'] ))\n# energcocinar1, =1 no main source of energy used for cooking (no kitchen)\n# energcocinar2, =1 main source of energy used for cooking electricity\n# energcocinar3, =1 main source of energy used for cooking gas\n# energcocinar4, =1 main source of energy used for cooking wood charcoal\n\n# The No kitchen scenario and the wood charcoal scenario is given 1 point, \n# the other kitchen scenarios are given negative points to balance out the overall economic conditions","9e4c0bd3":"d1['Water_Score'] = ( (0 * d1['abastaguadentro']) + (0.5 * d1['abastaguafuera']) + (1 * d1['abastaguano']))\n# abastaguadentro, =1 if water provision inside the dwelling\n# abastaguafuera, =1 if water provision outside the dwelling\n# abastaguano, =1 if no water provision\n\n# for No water provision 1 point is allotted, for water provisionj outside the house 0.5 point system is awarded","131695d5":"d1['Electricity_Score'] = ( (0 * (d1['public'] + d1['planpri'] + d1['coopele']) ) + (1 * d1['noelec']) )\n# public, =1 electricity from CNFL,  ICE,  ESPH\/JASEC\n# planpri, =1 electricity from private plant\n# noelec, =1 no electricity in the dwelling\n# coopele, =1 electricity from cooperative\n\n#Only no electricity houses are awarded a single point","03343aa1":"d1['Wall_Score'] = ((1*(d1['pareddes'] + d1['paredfibras'] + d1['paredzocalo'] )) + (0 * d1['paredblolad']) + (-1 * d1['paredpreb']))\n# paredblolad, =1 if predominant material on the outside wall is block or brick\n# paredzocalo, =1 if predominant material on the outside wall is socket (wood,  zinc or absbestos) --\n# paredpreb, =1 if predominant material on the outside wall is prefabricated or cement\n# pareddes, =1 if predominant material on the outside wall is waste material --\n# paredfibras, =1 if predominant material on the outside wall is natural fibers --\n\n","fea40182":"d1['Floor_Score'] = ((1*(d1['pisonotiene'] + d1['pisonatur'])) + (0 * (d1['pisomadera'] + d1['pisoother'])) + (-1 * (d1['pisomoscer']+ d1['pisocemento'] )))\n\n# pisomoscer, \"=1 if predominant material on the floor is mosaic,  ceramic,  terrazo\"\n# pisocemento, =1 if predominant material on the floor is cement\n# pisoother, =1 if predominant material on the floor is other\n# pisonatur, =1 if predominant material on the floor is  natural material --\n# pisonotiene, =1 if no floor at the household --\n# pisomadera, =1 if predominant material on the floor is wood --\n\n# If floor material is a natural material and\/or no floor then 1 point is awarded\n# If its of other or wood then 0 points are awarded\n# If its cement or mosaic likes then a negative 1 point is awarded","dd8e38c0":"d1['Roof_Score'] = ((1*(d1['techozinc'] + d1['techocane'])) + (0 * ( d1['techootro'])) + (-1 * (d1['techoentrepiso']+ d1['pisocemento'] )))\n\n# techozinc, =1 if predominant material on the roof is metal foil or zink\n# techoentrepiso, \"=1 if predominant material on the roof is fiber cement,  mezzanine \"\n# techocane, =1 if predominant material on the roof is natural fibers\n# techootro, =1 if predominant material on the roof is other\n# cielorazo, =1 if the house has ceiling\n\n# If roof material is a natural material and\/or zinc then 1 point is awarded\n# If its of other or wood then 0 points are awarded\n# If its cement or mezzonine likes then a negative 1 point is awarded","89cecee0":"# adding up all the amenities, Electtronics, House Condition Score\nd1['Amenities_Score'] = d1['Electricity_Score'] + d1['Water_Score'] + d1['Energy_Score'] + d1['Toilet_Score']\nd1['House_Condition_Score'] = d1['Roof_Score'] + d1['Floor_Score'] + d1['Wall_Score']\nd1['Electronics_Score'] = (-1 * (d1['refrig'] + d1['computer'] + d1['television'] ) + (- 0.25 * d1['qmobilephone']))\n","4687ff2d":"# Geographic Diversification\nctrl = d1['lugar1'].sum()\nchor = d1['lugar2'].sum()\npctl = d1['lugar3'].sum()\nbrun = d1['lugar4'].sum()\natlc = d1['lugar5'].sum()\nnort = d1['lugar6'].sum()\n\n# Data to plot\nlabels = 'Central', 'Chorotega', 'Pacafic Central', 'Brunca' , 'Atlantic'  , 'North'\nsizes = [ctrl, chor, pctl, brun, atlc, nort]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'orange', 'darkturquoise']\nexplode = (0.05, 0, 0, 0,0.05,0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode,  labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()","8056ba20":"#Regional Diversification\n\nurb = d1['area1'].sum()\nrur = d1['area2'].sum()\nprint (urb,rur)\n\nimport pandas as pd\nfrom matplotlib.pyplot import *\n\nfig, ax = subplots()\ndf = pd.DataFrame({'urb': urb, 'rur' : rur}, index=['Counts'])\ndf.plot(kind='bar', ax=ax , color = ['darkmagenta', 'orchid'], edgecolor = 'black')\nax.legend([\"Urban\", \"Rural\"]);\n","3a08995c":"# Converting rent per room and rent per capita to normalize\nd1['Rent per room'] = d1['v2a1']\/ d1['rooms']\nd1['Per Capita Rent'] = d1['v2a1']\/ (d1['overcrowding'] * d1['rooms'])\n","486a8770":"own_paid = d1['tipovivi1'].sum()\nown_inst = d1['tipovivi2'].sum()\nrent = d1['tipovivi3'].sum()\nprec = d1['tipovivi4'].sum()\nothr = d1['tipovivi5'].sum()\n\n\nprint (own_paid, own_inst, rent, prec, othr)\n\nfig, ax = subplots()\ndf = pd.DataFrame({'own_paid': own_paid, 'own_inst' :own_inst,'rent': rent, 'prec' : prec,'othr': othr }, index=['Counts'])\ndf.plot(kind='bar', ax=ax , color = ['darkmagenta', 'orchid','deeppink','hotpink','crimson'], edgecolor = 'black')\nax.legend([\"Own_Paid\", \"Own_installment\", \"Rented\", \"Precarious\", \"Other\"]);\n\n# It can be seen that most of the houses are own paid. and few of them are in installments and rented.","f68be85b":"# dropping other factors where the house is not rented\nd1_a = d1.dropna(subset=['Rent per room'])\nd1_a.count()                       ","80c6609e":"x = d1_a['Rent per room']\nplt.hist(x, bins=25, color = 'yellow', edgecolor = 'black')\nplt.ylabel('Counts')\nplt.xlabel('Price in Costa Rican Colon')\nplt.show()","da578008":"d1_a['Rent per room'] = d1_a['Rent per room'].round(0).astype(int)","dc9fc0ed":"d1_a_0 = d1_a[  (d1_a['Rent per room']<10001) ]\nd1_a_1 = d1_a[ (d1_a['Rent per room']>10000) & (d1_a['Rent per room']<20001) ]\nd1_a_2 = d1_a[ (d1_a['Rent per room']>20000) & (d1_a['Rent per room']<30001) ]\nd1_a_3 = d1_a[ (d1_a['Rent per room']>30000) & (d1_a['Rent per room']<40001) ]\nd1_a_4 = d1_a[ (d1_a['Rent per room']>40000) & (d1_a['Rent per room']<50001) ]\nd1_a_5 = d1_a[ (d1_a['Rent per room']>50000) & (d1_a['Rent per room']<60001) ]\nd1_a_6 = d1_a[ (d1_a['Rent per room']>60000) & (d1_a['Rent per room']<100001) ]\nd1_a_7 = d1_a[  d1_a['Rent per room']>100001]\n\nurb_0 = d1_a_0['area1'].sum()\nrur_0 = d1_a_0['area2'].sum()\nurb_1 = d1_a_1['area1'].sum()\nrur_1 = d1_a_1['area2'].sum()\nurb_2 = d1_a_2['area1'].sum()\nrur_2 = d1_a_2['area2'].sum()\nurb_3 = d1_a_3['area1'].sum()\nrur_3 = d1_a_3['area2'].sum()\nurb_4 = d1_a_4['area1'].sum()\nrur_4 = d1_a_4['area2'].sum()\nurb_5 = d1_a_5['area1'].sum()\nrur_5 = d1_a_5['area2'].sum()\nurb_6 = d1_a_6['area1'].sum()\nrur_6 = d1_a_6['area2'].sum()\nurb_7 = d1_a_7['area1'].sum()\nrur_7 = d1_a_7['area2'].sum()\n\nUrban = np.array([urb_0, urb_1, urb_2, urb_3,urb_4, urb_5,urb_6, urb_7 ])\nRural = np.array([rur_0, rur_1, rur_2, rur_3,rur_4, rur_5,rur_6, rur_7 ])\nind = np.arange(8)\nwidth = 0.50 \n\np1 = plt.bar(ind, Urban, width, color='pink')\np2 = plt.bar(ind, Rural, width, color='#d62728', bottom=Urban)\nplt.xlabel('Price Per room (in thousands)')\nplt.ylabel('Counts')\nplt.title('Counts v\/s Price per room')\nplt.xticks(ind, ('<10', '  10-20  ', '  20-30  ', '  30-40  ', '  40-50  ' , '  50-60  ', '  60-100  ', '  >100  '))\nplt.legend((p1[0], p2[0]), ('Urban', 'Rural'))\n\nplt.show()\n","57078a6c":"d1_a.head()","08affb3f":"df2 = d1[[ 'SQBmeaned','SQBdependency','SQBage', 'Amenities_Score', 'Electronics_Score', 'House_Condition_Score', 'area1', 'Target']]\ndf2 = df2.dropna()\n","92c79d58":"df2.count()","6e562fc6":"sns.set(style=\"white\")\n\n# Generate a large random dataset\nd = df2\n\n# Compute the correlation matrix\ncorr = d.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","51fb1161":"train.loc[: , \"agesq\"]","274c44ab":"d1_deadly = d1[d1['tipovivi4']== 1]\nd1_deadly.describe # we can see there are 434 houses which are listed precarious. Lets dive deeper into this\n","469a6241":"d1_deadly.head()","1bd90b7b":"plt.figure(figsize=(10,7))\nd1_deadly['epared1'].value_counts().plot.bar(alpha=0.10, color = 'Black', legend=\"a\")\nd1_deadly['eviv1'].value_counts().plot.bar(edgecolor = 'black',alpha=0.50, color = 'yellow', legend=True)\nd1_deadly['etecho1'].value_counts().plot.bar(edgecolor = 'black',alpha=0.90, color = 'red', legend=True)\nL=plt.legend()\nL.get_texts()[0].set_text('Bad Walls')\nL.get_texts()[1].set_text('Bad Floors')\nL.get_texts()[2].set_text('Bad Roofs')","1bbaa2c1":"from sklearn.linear_model import Ridge\n\n\ntrain_without_categoricals = train.select_dtypes(exclude=['object'])\n\nfrom sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\n# train_without_categoricals = my_imputer.fit_transform(train_without_categoricals)\n\n\nX = my_imputer.fit_transform( train_without_categoricals.iloc[:, :-1])\nx_train, x_cv, y_train, y_cv = train_test_split(X,train_without_categoricals.iloc[:, -1])\n\n## training the model\n\nridgeReg = Ridge(alpha=0.05, normalize=True)\nridgeReg.fit(x_train,y_train)\npred = ridgeReg.predict(x_cv)\n\n#calculating mse\nmse = np.mean((pred - y_cv)**2)  \n\n## calculating score \n\nprint (\"Ridge_Score:\", ridgeReg.score(x_cv,y_cv))\nprint(\"Ridge_MSE:\", mse)","76deec0d":"from sklearn.linear_model import Lasso\n\nlassoReg = Lasso(alpha=0.3, normalize=True)\n\nlassoReg.fit(x_train,y_train)\n\npred = lassoReg.predict(x_cv)\n\n# calculating mse\n\nmse = np.mean((pred - y_cv)**2)\n\nprint(\"Lasso_Score:\", lassoReg.score(x_cv,y_cv))\nprint (\"Lasso_mse:\", mse)\n","194b9c4c":"from sklearn.linear_model import ElasticNet\n\nENreg = ElasticNet(alpha=1, l1_ratio=0.5, normalize=False)\n\nENreg.fit(x_train,y_train)\n\npred = ENreg.predict(x_cv)\n\n#calculating mse\n\nmse = np.mean((pred - y_cv)**2)\n\nprint(\"Eleastic_Net_mse:\", mse)\nprint(\"Eleastic_Net_Score:\", ENreg.score(x_cv,y_cv))\n","435f7757":"**Checking on Lasso regression**","d8ebf119":"**Checking on Ridge regression**","70d98747":"From the chart above, it looks that the Rural region has more units under 20,000 compared to higher ends. Where as in Urban spaces, the average price per room is high.","6f3c9493":"**Plotting the geographic and Regional diversitfication in the dataset**","8a3da46c":"**Household Materials**","cbb57e90":"Before we move forward lets just have a look at the type of houses in this data-set","a90059ae":"**Electronics in Households**","9e1e22a7":"We can see that most of the households in this data set has the Regional diversification from Urban background\nand Central costa rica covers most of the section.\n\nLets look into the economic diversity grouped by geographic locations.","a34feb11":"**Elastic Net regression**","ebefbb08":"It can be seen that the histogram has been plotted against 10000 Costa rican Colon ( equivalent to USD 17.50) range for each bin. The rent per room for most of the houses ranges between 0 -50,000 CRC. Let us look into the geographic demography from this chart.","36d93d86":"Considering the value of life to be the primary concern, at first let's check the data for Precarious buildings","764cc291":"**Plotting Urban Versus Rural counts based on Economic Profile of the Rooms **","543d61a6":"A scoring card is generated to identify the target houses here.  More the points accumulated , higher is the necessity to achieve the target. Negative scores are awarded for each luxurious items possessed by the house. For having basic amenities no negative scores are awarded.  Lets create a scoring systems for Luxurios items and Basic Amenities.\n\nFor Luxurious Items a score of negative is achieved for each item\/ product possessed in the house.\nFor Basic Amenity items, a score of zero is achieved for having basic amaenities in place else points are accumulated.\n\n\nLuxurious items:\n1. Television\n2. Desktop\n3. Refridgerator\n4. Tablet - NOT Considered for Scoring - Missing Values\n5. Mobiles - Less weightage , since this is a necessity gadget today\n\nBasic Amenities:\n1. Toilet\n2. Energy\n3. Water\n4. Electricity\n\nHouse Condition Factors:\n1. Outside Wall Material\n2. Floor Material\n3. Roof Material","8e71432b":"**Plotting Histogram for Monthly rent per room**","c65ab34a":"Here we can see that there is no significant co-relation factors between the attribute. "}}