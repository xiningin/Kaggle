{"cell_type":{"dff74395":"code","8b956d38":"code","e95591c3":"code","4b7a09a3":"code","970db561":"code","f2f249fa":"code","b90a9f03":"code","f710aaaa":"code","52528a5e":"code","9acdfa54":"code","98becffe":"code","773f8496":"code","5d6e7392":"code","1a0cd846":"code","209f85ed":"code","46552584":"code","165616d2":"code","08826203":"code","45bcce8c":"code","5ddf09d3":"code","9c40bf3e":"code","cb0ce2b8":"code","271e9f20":"code","01bfe6c8":"code","94b7234a":"code","0ca04fd8":"code","ecf136e5":"code","4d9f0522":"code","ca024363":"code","0c3aad60":"code","455a386f":"code","b5033651":"code","4e1a1672":"code","8758f695":"code","a60623ba":"code","7e890b47":"code","df55d9ed":"code","61572e73":"code","3c440e57":"code","dec041d8":"code","b72e4557":"code","1c360bc5":"code","31b39d44":"code","89c33462":"code","5bd89042":"code","a6e5e8df":"code","d9198fda":"markdown","25773cdf":"markdown","4116401b":"markdown","188f9f18":"markdown","a2a133e7":"markdown","8434b8b9":"markdown","032006a7":"markdown","82e8d9c1":"markdown","5d35c147":"markdown","ca0a0df8":"markdown","f48eebc5":"markdown","72224c7f":"markdown","24af9168":"markdown"},"source":{"dff74395":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8b956d38":"wn_df=pd.read_csv('\/kaggle\/input\/wine-quality\/winequalityN.csv')","e95591c3":"import seaborn as sns\nimport matplotlib.pyplot as plt","4b7a09a3":"wn_df.type=wn_df.type.apply(lambda x: 0 if x==\"red\" else 1)","970db561":"plt.figure(figsize=(10,8))\nsns.heatmap(wn_df.corr(),annot=True)\nplt.show()","f2f249fa":"def univariate(var):\n    sns.boxplot(data=wn_df,y=var)\n    plt.show()","b90a9f03":"wn_df.columns","f710aaaa":"univariate('fixed acidity')","52528a5e":"univariate('alcohol')","9acdfa54":"univariate('volatile acidity')","98becffe":"univariate('citric acid')","773f8496":"univariate('residual sugar')","5d6e7392":"univariate('chlorides')","1a0cd846":"univariate('free sulfur dioxide')","209f85ed":"univariate('total sulfur dioxide')","46552584":"univariate('density')","165616d2":"univariate('sulphates')","08826203":"univariate('pH')","45bcce8c":"univariate('alcohol')","5ddf09d3":"for col in ['fixed acidity', 'volatile acidity', 'citric acid',\n       'residual sugar', 'chlorides', 'free sulfur dioxide',\n       'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']:\n    wn_df=wn_df[wn_df[col]< wn_df[col].quantile(0.99)]","9c40bf3e":"wn_df.groupby(\"type\")['type'].count().plot.pie(autopct=\"%.1f%%\",labels=['red','white'])","cb0ce2b8":"wn_df.groupby(\"quality\")['quality'].count().plot.pie(autopct=\"%.1f%%\", pctdistance=0.5)","271e9f20":"wn_df['quality'].describe()","01bfe6c8":"for col in ['fixed acidity', 'volatile acidity', 'citric acid',\n       'residual sugar', 'chlorides', 'free sulfur dioxide',\n       'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']:\n    \n    fig,ax =plt.subplots(1,3, figsize=(18,5))\n    plt.subplots_adjust(hspace = 1)\n    sns.barplot(data=wn_df,y=col,x=\"quality\",ax=ax[0])\n   \n    sns.lineplot(data=wn_df,y=col,x=\"quality\",ax=ax[1])\n    sns.violinplot(data=wn_df, y=col, x='quality',ax=ax[2])\n    #plt.show()\n    ","94b7234a":"wn_df_v1=wn_df","0ca04fd8":"wn_df_v1.info()","ecf136e5":"wn_df_v1.chlorides=wn_df_v1.chlorides.fillna(wn_df_v1.chlorides.mean())","4d9f0522":"wn_df_v1['volatile acidity']=wn_df_v1['volatile acidity'].fillna(wn_df_v1['volatile acidity'].mean())","ca024363":"wn_df_v1['fixed acidity']=wn_df_v1['fixed acidity'].fillna(wn_df_v1['fixed acidity'].mean())","0c3aad60":"wn_df_v1['citric acid']=wn_df_v1['citric acid'].fillna(wn_df_v1['citric acid'].mean())","455a386f":"wn_df_v1['residual sugar']=wn_df_v1['residual sugar'].fillna(wn_df_v1['residual sugar'].mean())","b5033651":"wn_df_v1['sulphates']=wn_df_v1['sulphates'].fillna(wn_df_v1['sulphates'].mean())","4e1a1672":"wn_df_v1['pH']=wn_df_v1['pH'].fillna(wn_df_v1['pH'].mean())","8758f695":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","a60623ba":"Y=wn_df_v1.pop('quality')\nX=wn_df_v1","7e890b47":"from imblearn.over_sampling import SMOTE\nsm=SMOTE(k_neighbors=4)\n\nX,Y=sm.fit_resample(X,Y)","df55d9ed":"X","61572e73":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n","3c440e57":"model = XGBClassifier(radom_state=42)\nmodel.fit(X_train, y_train)","dec041d8":"y_pred = model.predict(X_test)","b72e4557":"print(\"Accuracy: %.2f%%\" % (accuracy_score(y_pred,y_test) * 100.0))","1c360bc5":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()","31b39d44":"rfc.fit(X_train, y_train)","89c33462":"y_pred_rc = rfc.predict(X_test)","5bd89042":"print(\"Accuracy: %.2f%%\" % (accuracy_score(y_pred_rc,y_test) * 100.0))","a6e5e8df":"y_pred_rc_train = model.predict(X_train)","d9198fda":"### Bivariate analysis","25773cdf":"### Numerical varaibles vs target variable","4116401b":"##### Observation: From the above bivariate analysis we can see there is some strong relation exists in below numerical varaibles vs target varaible\n     - Volatile acidity\n     - Citric acid\n     - Chlorides\n     - Density\n     - Alcohol","188f9f18":"### Model building with Random Forest classifier","a2a133e7":"### The  accuracy with Rqndom forest is 88% which is better than xgbhoost model","8434b8b9":"#### Fill missing values using mean method","032006a7":"#### Create train and test data","82e8d9c1":"### Encode type variable","5d35c147":"#### Handle imbalance data to avoid overfitting","ca0a0df8":"#### There are some outliers in numerical variables .Lets remove them.","f48eebc5":"### EDA","72224c7f":"#### Model building using xgbhoost","24af9168":"### The accuracy with xgbhoost is around 87%"}}