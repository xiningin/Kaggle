{"cell_type":{"b40dc26a":"code","97797a1b":"code","4d12d77a":"code","1969ae3e":"code","3775ae21":"code","27ccb01b":"code","d40e718a":"code","66a5b53c":"code","74de6868":"code","24b3b25d":"code","4fac1e59":"code","b1a63987":"code","fcd32008":"code","f493424e":"code","95c220a9":"code","866d127f":"code","d43439f2":"code","f36ecc25":"code","03083efb":"code","74b9f576":"code","35150ff2":"code","4d4da2a8":"code","0337aafd":"markdown","0aa40ae1":"markdown","86d5ecee":"markdown","37e0e853":"markdown","ab4d6518":"markdown","9a8f1807":"markdown","2c6acaf2":"markdown"},"source":{"b40dc26a":"!pip uninstall --y kaggle\n!pip install --upgrade pip\n!pip  install kaggle==1.5.6\n\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n!chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle -v","97797a1b":"!kaggle competitions download -c solarenergy-meteorologicalphenomenon2\n!unzip solarenergy-meteorologicalphenomenon2.zip","4d12d77a":"import pandas as pd\nimport numpy as np\nimport torch\nimport torchvision.datasets as dsets\nimport torchvision.transforms as transforms\nimport torch.nn.functional as F\nimport torch.nn as nn\nimport random\n\nfrom sklearn import preprocessing","1969ae3e":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\ntorch.manual_seed(777)\nif device == 'cuda':\n    torch.cuda.manual_seed_all(777)","3775ae21":"learning_rate = 1e-3\ntraining_epochs = 900\nbatch_size = 50\nScaler = preprocessing.StandardScaler()","27ccb01b":"train = pd.read_csv('Solar_TrainData_3.csv',header=None,skiprows=1,usecols=range(0,9))\ntrain = train.dropna()\nprint(train.head(10))\nprint(train.info())","d40e718a":"test = pd.read_csv('Solar_TestData_2.csv',header=None,skiprows=1,usecols=range(0,8))\n\nprint(test.head(10))\nprint(test.info())","66a5b53c":"x_train = train.iloc[:,1:7]\ny_train = train.iloc[:,[-1]]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)\nprint(x_train.shape)\nprint(y_train.shape)","74de6868":"train_dataset = torch.utils.data.TensorDataset(x_train,y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle = True,\n                                          drop_last = True)\n","24b3b25d":"class MishFunction(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        ctx.save_for_backward(x)\n        return x * torch.tanh(F.softplus(x))   # x * tanh(ln(1 + exp(x)))\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        x = ctx.saved_variables[0]\n        sigmoid = torch.sigmoid(x)\n        tanh_sp = torch.tanh(F.softplus(x)) \n        return grad_output * (tanh_sp + x * sigmoid * (1 - tanh_sp * tanh_sp))\n\nclass Mish(nn.Module):\n    def forward(self, x):\n        return MishFunction.apply(x)\n\ndef to_Mish(model):\n    for child_name, child in model.named_children():\n        if isinstance(child, nn.ReLU):\n            setattr(model, child_name, Mish())\n        else:\n            to_Mish(child)","4fac1e59":"linear1 = torch.nn.Linear(6,32, bias = True) # feature\nlinear2 = torch.nn.Linear(32,32, bias = True)\nlinear3 = torch.nn.Linear(32,32, bias = True)\nlinear4 = torch.nn.Linear(32,16, bias = True)\nlinear5 = torch.nn.Linear(16,16, bias = True)\nlinear6 = torch.nn.Linear(16,16, bias = True)\nlinear7 = torch.nn.Linear(16,8, bias = True)\nlinear8 = torch.nn.Linear(8,8, bias = True)\nlinear9 = torch.nn.Linear(8,8, bias = True)\nlinear10 = torch.nn.Linear(8,1, bias = True)\n\nmish = Mish()","b1a63987":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)\ntorch.nn.init.xavier_uniform_(linear6.weight)\ntorch.nn.init.xavier_uniform_(linear7.weight)\ntorch.nn.init.xavier_uniform_(linear8.weight)\ntorch.nn.init.xavier_uniform_(linear9.weight)\ntorch.nn.init.xavier_uniform_(linear10.weight)","fcd32008":"model = torch.nn.Sequential(linear1,mish,\n                            linear2,mish,\n                            linear3,mish,\n                            linear4,mish,\n                            linear5,mish,\n                            linear6,mish,\n                            linear7,mish,\n                            linear8,mish,\n                            linear9,mish,\n                            linear10).to(device)","f493424e":"criterion = nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(),lr=learning_rate)","95c220a9":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs):\n    avg_cost = 0\n    for X,Y in data_loader:\n        X = X.to(device)\n        Y = Y.to(device)\n\n        optimizer.zero_grad()\n        hypothesis = model(X)\n        cost = criterion(hypothesis, Y)\n        cost.backward()\n        optimizer.step()\n\n        avg_cost += cost\/total_batch\n    print('epoch ','%04d' % (epoch+1), 'cost = ','{:.9f}'.format(avg_cost))\nprint('Learning finished..!')","866d127f":"with torch.no_grad():\n  x_test = test.iloc[:,1:7]\n  x_test = np.array(x_test)\n\n  x_test = torch.from_numpy(x_test).float().to(device)\n\n  prediction = model(x_test)","d43439f2":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","f36ecc25":"MAKE = pd.read_csv('Solar_TestData_2.csv', header = None, skiprows= 1) ","03083efb":"submit = pd.read_csv('Solar_SubmitForm_2.csv')\nsubmit","74b9f576":"for i in range(len(correct_prediction)):\n  submit['Predict'][i] = correct_prediction[i].item()\n\nsubmit['YYYY\/MM\/DD'] = MAKE[0]\nsubmit","35150ff2":"submit.to_csv('result.csv', mode='w', index = False)","4d4da2a8":"! kaggle competitions submit -c solarenergy-meteorologicalphenomenon2 -f result.csv -m \"\"","0337aafd":"> \ubaa8\ub378 \uac80\uc99d","0aa40ae1":"> \ud30c\ub77c\ubbf8\ud130 \uc9c0\uc815","86d5ecee":"> Train , Test \ub370\uc774\ud130 \ub85c\ub4dc ","37e0e853":"> \ubaa8\ub378 \uc124\uacc4","ab4d6518":"> Mish Activation Function Class\n[Mish Activation \ub17c\ubb38 \ub9c1\ud06c](https:\/\/arxiv.org\/pdf\/1908.08681.pdf)","9a8f1807":"> Import \ub77c\uc774\ube0c\ub7ec\ub9ac","2c6acaf2":"> \ubaa8\ub378 \ud559\uc2b5"}}