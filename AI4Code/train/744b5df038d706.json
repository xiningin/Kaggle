{"cell_type":{"8125945c":"code","f73cdfed":"code","e5b8fc80":"code","b9332641":"code","94d6b7cd":"code","227509f2":"code","91897d56":"code","5631b5f3":"code","b3773569":"code","e5af57c7":"code","18d0f6f7":"code","cc471e40":"code","9c9c1c81":"code","d175baaf":"code","a7114f3a":"markdown","0dd8e7f6":"markdown","837b7124":"markdown","3cf38b7e":"markdown","ecace2ed":"markdown","363ba575":"markdown","46725099":"markdown","259bbfb0":"markdown","b3706ae8":"markdown"},"source":{"8125945c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f73cdfed":"df = pd.read_csv(\"..\/input\/crop-recommendation-dataset\/Crop_recommendation.csv\")\ndf.tail()","e5b8fc80":"ax = df['label'].value_counts().plot(kind='bar')\nax.set_ylabel(\"Counts\")","b9332641":"df.corr(method=\"pearson\")","94d6b7cd":"ax1 = df.plot.scatter(x='P', y='K')","227509f2":"X, y = df[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']].values, df['label'].values","91897d56":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nlda = LinearDiscriminantAnalysis()\nX_lda = lda.fit_transform(X, y)\n\nlda.explained_variance_ratio_","5631b5f3":"import matplotlib.pyplot as plt \n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.bar(['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall'], lda.coef_[0])\nax.set_ylabel(\"LDA1 coefficient\")","b3773569":"from sklearn.model_selection import train_test_split\n\n# Split data 70%-30% into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n\nprint ('Training Set: %d, rows\\nTest Set: %d rows' % (X_train.size, X_test.size))","e5af57c7":"# Train the model\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Define preprocessing for numeric columns (scale them)\nnumeric_features = [0,1,2,3,4,5,6]\nnumeric_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\n\n# Define preprocessing for categorical features (encode them)\ncategorical_features = []\ncategorical_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\n# Combine preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])","18d0f6f7":"from sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create preprocessing and training pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                           ('regressor', RandomForestClassifier())])\n\n\n# fit the pipeline to train a regression model on the training set\nmodel = pipeline.fit(X_train, (y_train))\nprint (model, \"\\n\")\n\n# Get predictions\npredictions = model.predict(X_test)\n\n# Display metrics\n# mse = mean_squared_error(y_test, predictions)\n# print(\"MSE:\", mse)\n# rmse = np.sqrt(mse)\n# print(\"RMSE:\", rmse)\n# r2 = r2_score(y_test, predictions)\n# print(\"R2:\", r2)\n\n# Plot predicted vs actual\n# plt.scatter(y_test, predictions)\n# plt.xlabel('Actual Labels')\n# plt.ylabel('Predicted Labels')\n# plt.title('Futura Pricing Predictions - Preprocessed')\n# z = np.polyfit(y_test, predictions, 1)\n# p = np.poly1d(z)\n# plt.plot(y_test,p(y_test), color='magenta')\n# plt.show()","cc471e40":"import matplotlib.pyplot as plt \nfrom sklearn.metrics import plot_confusion_matrix\n\nplot_confusion_matrix(model, X_test, y_test)  \nplt.show() ","9c9c1c81":"# Classification Report\nfrom sklearn import metrics\n\nprint(metrics.classification_report(predictions,y_test))","d175baaf":"# Save Model\nimport pickle\n\nmodelFinal = pipeline.fit(X, (y))\n# print(metrics.classification_report(modelFinal.predict(X_test),y_test))\n# save the model to disk\nfilename = 'finalized_model.sav'\npickle.dump(modelFinal, open(filename, 'wb'))","a7114f3a":"Significant correlation between P and K, possible issues with multicollinearity.","0dd8e7f6":"## Model Export","837b7124":"## Data Exploration","3cf38b7e":"Crop recommendation appears to be the most sensitive to the K input, but that could be attributed to the high variance of K in the dataset. ","ecace2ed":"## Model Training","363ba575":"Labels are evenly distributed, no observable class imbalance.","46725099":"# Crop Recommendation Decision Engine\n\nAuthor: Darrell Leong\n\nContact: darrell.leong@yara.com\n\nThis engine aims to automate crop selection recommendation. The dataset presents ideal crops to be planted based on macro-environmental considerations of:\n\n- Soil N-P-K ratios\n- Soil pH\n- Expected temperature\n- Expected humidity\n- Expected annual rainfall\n\nHere a model is trained from these historical recommendations, in order to provide an autonomous crop selection based on the above variables.","259bbfb0":"## Model Performance","b3706ae8":"## Data Preparation"}}