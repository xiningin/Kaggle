{"cell_type":{"323f9ad7":"code","b530c8e1":"code","3bb43c74":"code","b7fcbd5a":"code","18c3786d":"code","669cc271":"code","6f9e7ac3":"markdown","f5e92df1":"markdown","bc11f47d":"markdown","2f162315":"markdown","0bdbe97a":"markdown","f03deb46":"markdown"},"source":{"323f9ad7":"import urllib.request, json\nimport pandas as pd\nimport requests as re","b530c8e1":"def scrape_to_df(item, category, csvname):\n    with urllib.request.urlopen(\"https:\/\/api.mercadolibre.com\/sites\/MLA\/search?category={0}&q={1}#json\".format(category, item)) as url:\n        data = json.loads(url.read().decode())\n        df = pd.json_normalize(data[\"results\"])\n        df = pd.DataFrame(df)\n        df.to_csv(\"{0}.csv\".format(csvname))\n        return df","3bb43c74":"chromecast_df = scrape_to_df(\"chromecast\", \"MLA352001\", \"chromecast\")\nxiaomi_df = scrape_to_df(\"xiaomi\", \"MLA352001\", \"xiaomi_tv\")\nappletv_df = scrape_to_df(\"apple&tv\", \"MLA352001\", \"appletv\")\nchromecast_df.head(1)","b7fcbd5a":"def scrape_items (ids, df_out):\n    for i in ids:\n        iter_get = re.get(\"https:\/\/api.mercadolibre.com\/items\/{0}\".format(i))\n        response = iter_get.json() \n        df = pd.json_normalize(response)\n        df_out = df_out.append(df)\n    return df_out","18c3786d":"#Chromecast#\nchrome_items = pd.DataFrame()\nchrome_items = scrape_items(chromecast_df[\"id\"], chrome_items)\n#Xiami#\nxiaomi_items = pd.DataFrame()\nxiaomi_items = scrape_items(xiaomi_df[\"id\"], xiaomi_items)\n#Apple TV#\nappletv_items = pd.DataFrame()\nappletv_items = scrape_items(appletv_df[\"id\"], appletv_items)","669cc271":"chrome_items.to_csv(\"chromecast_items.csv\")\nxiaomi_items.to_csv(\"xiaomi_items.csv\")\nappletv_items.to_csv(\"appletv_items.csv\")","6f9e7ac3":"Segunda funci\u00f3n para realizar la consulta de los items conseguidos en los DataFrames. La segunda funci\u00f3n tiene dos variables:\n* ids = se llama a la columna \"id\" con df[\"id\"], esto permite iterar en un for loop a cada valor item_id.\n* df_out = nombre del DataFrame donde almacenamos los datos. Primero hay que crear el Dataframe vacio con df = pd.DataFrame()","f5e92df1":"Para utilizar la funci\u00f3n correctamente debemos seguir los siguientes pasos:\n1. crear el primer DataFrame vacio\n2. llamar a la funcion","bc11f47d":"Funci\u00f3n para realizar el primer scrape de la API para transformar el json en un DataFrame y por \u00falitmo, exportarlo en un .csv. \nLa funci\u00f3n requiere de tres variables:\n* item = string con el t\u00e9rmino de busqueda que queremos realizar. ex: \"smartphone\", \"Apple\", \"Chromecast\".\n* category = string con el category id que querramos buscar. ex: \"MLA352001\" para la categor\u00eda \"Media  Streaming\"\n* csvname = el nombre que le queramos dar al archivo *.csv, solo el nombre no hay que agregar la extensi\u00f3n de archivo.","2f162315":"Realizamos el primer scrape con los DataFrames de los items a analizar. Al llamar la funci\u00f3n con una variable, la misma se convierte en un DataFrame.","0bdbe97a":"Por \u00faltimo, exportamos los DataFrames en formato csv.","f03deb46":"Importaci\u00f3n de librerias"}}