{"cell_type":{"d71538ce":"code","0a9f2dd9":"code","4b1f5983":"code","578332ce":"code","dd0bcec0":"code","fa983b95":"code","656e9699":"code","3ac2b638":"code","2a2b02bd":"code","7aae037f":"code","42974b0a":"code","82f0052c":"code","35eeb3ea":"code","a61f5970":"code","af5384f5":"code","cbf80e83":"code","a55db48b":"code","53489345":"code","e9c0430a":"code","2654a9d6":"code","5ec1b10c":"code","95e14ede":"code","d499f0e5":"code","a9bea613":"code","6df35312":"code","e627412c":"code","7e8e920e":"code","a91676e5":"code","eecc510d":"code","3d4c5ef3":"code","f2e79c43":"code","b2fb7a95":"code","55039e76":"code","6b19cf06":"code","c7c9ce83":"code","38997080":"code","041717ab":"code","8082bf59":"code","70168fbc":"code","3b4958ba":"code","55ae24a4":"code","d53013c6":"code","7301ddd5":"code","3b83cfcc":"code","cb444f98":"code","1c71d553":"code","247cf19c":"code","7f633933":"code","584ac776":"code","205a422e":"code","8fd2abad":"code","28b6acb6":"code","a832e1a8":"code","27a0bb43":"code","a3fefa20":"code","d1a881f2":"code","ff843d97":"code","88ddc521":"code","37ef1ffc":"code","a1d13bdc":"code","d97b17fc":"code","929a6e35":"code","4093ba44":"code","40d9e71e":"code","2571458e":"code","a01eb6d4":"code","afd5b130":"code","367c8853":"code","6162aa60":"code","bf2a022a":"code","0cde115f":"code","5a004764":"code","3545a943":"code","b67510e8":"code","2e67fa39":"code","533e53d1":"code","06d41e96":"code","85593d2e":"code","b6df221c":"code","0b74a06f":"code","2f963107":"code","2468301d":"code","84ed648f":"code","6c2b9e53":"code","f3f1986b":"code","317531a2":"code","51047e62":"code","1bde9307":"code","4da288f6":"code","03579846":"code","fcea8df7":"code","f0725c57":"code","92d288cd":"code","8978626b":"code","b73942e8":"code","1c85a22e":"code","eafa47c6":"code","10e8b13b":"code","90b2fa9d":"code","7f861a7f":"code","7eacb156":"code","3aabf112":"code","934cb7f4":"code","39559f92":"code","371d6b93":"code","bc16c761":"code","f8574f6c":"code","d96110bf":"code","1c8c9a28":"code","0ee37d0d":"code","bed7a645":"code","3def0147":"code","9a608dab":"code","b2bd26eb":"code","55dc0ba7":"code","f6b07c87":"code","05a96c12":"code","106e5418":"code","8959d6f8":"code","67439930":"code","4c69d163":"code","b47daacd":"code","e3b53869":"code","e80cd703":"code","de2f17da":"code","0817c1de":"code","878976b1":"code","d664d6d4":"code","8de0576b":"code","a1097e0f":"code","e4cefec9":"code","f6f4f548":"code","c64b4ad4":"code","36938a46":"code","0e23f563":"code","8abf0cae":"code","6cf74610":"code","96d14b63":"code","e9bbecc7":"code","328adea6":"code","620a4613":"code","6e648eb7":"code","1bc8c81e":"code","89aab5a9":"code","1f2230fa":"code","3667d6d1":"code","c6d1e5e6":"code","2688b03a":"code","06a8c04f":"code","3461b16d":"code","0b9e5f59":"code","dd5547ed":"code","e40df2c3":"code","2cdedb7a":"code","9545a792":"code","e9500c15":"code","30c1c387":"code","31b590a0":"code","2124c885":"code","0eb7670f":"code","92267a3f":"code","b77d9363":"code","14947f67":"code","5bc458bf":"code","cf17794c":"code","515291f4":"code","34c72e35":"code","6775c8df":"code","58be106a":"code","857eeb12":"code","7076347f":"code","3fce88ac":"code","ec714591":"code","d3e05db7":"code","adb5d245":"code","5201cac4":"code","07ba2a48":"code","2063c30c":"code","2509b5b9":"markdown","4170953c":"markdown","fd424a6a":"markdown","9cc44cff":"markdown","fd466b78":"markdown","2a8cf268":"markdown","bd93a654":"markdown","8d7c0865":"markdown","ea73cd34":"markdown","ea6ab2dd":"markdown","619bfc23":"markdown","caf31b5d":"markdown"},"source":{"d71538ce":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","0a9f2dd9":"### pandas k\u00fct\u00fcphanesindeki read_csv() fonksiyonu ile bir csv(virg\u00fclle ayr\u0131lm\u0131\u015f de\u011ferler) dosyas\u0131n\u0131 pandas dataframe'e \u00e7evirmek m\u00fcmk\u00fcnd\u00fcr\n### read_csv() fonksiyonun en \u00f6nemli 2 parametresi path  yani dosyan\u0131n bulundu\u011fu adresi yazd\u0131\u011f\u0131m\u0131z parametredir\n### di\u011feri ise dosyan\u0131n i\u00e7indeki verilerin ne ile ayr\u0131ld\u0131\u011f\u0131n\u0131 anlayan sep parametresidir. \u00d6ntan\u0131ml\u0131 de\u011feri \",\" d\u00fcr.\n### e\u011ferki dosyan\u0131n i\u00e7indeki de\u011ferler vird\u00fclden ba\u015fka bir nesne noktalama i\u015fareti ile ayr\u0131l\u0131yorsa bunu sep=\";\" (\u00f6rnektir) diye belirmemiz gerekmektedir","4b1f5983":"data=pd.read_csv(\"..\/input\/titanic\/train.csv\")","578332ce":"### copy() fonksiyonu mevcut csv dosyam\u0131z\u0131n ilerde yapaca\u011f\u0131m de\u011fi\u015fikliklerden etkilenmemsi i\u00e7in kullan\u0131lan bir fonksiyondur. mevcut olu\u015fan dataframe in \u00f6zelliklerini  ba\u015fka bir de\u011fi\u015fkene atamaya yarar.\ndf=data.copy()","dd0bcec0":"### head() fonksiyonun \u00f6ntan\u0131ml\u0131 parametresi n=5 tir hi\u00e7 bir \u015fey yaz\u0131lmadan df.head() olarak yazd\u0131\u011f\u0131n\u0131zda dataframedeki ilk 5 de\u011feri getirmektedir.\n### tail() fonksiyonu head() fonksiyonu gibi bir paramtreye sahiptir ve \u00f6n tan\u0131ml\u0131 de\u011feri 5 tir bu fonksiyon ise bize dataframedeki son 5 de\u011feri getirir.\ndf.head()","fa983b95":"df.head(n=3)","656e9699":"df.tail()","3ac2b638":"df.tail(3)","2a2b02bd":"### pd.DataFrame.shape bize bir dataframe in boyutlar\u0131n\u0131 say\u0131sal de\u011ferler olarak bir tuple ile d\u00f6nd\u00fcr\u00fcr. Bu tuple in ilk de\u011feri Bize dataframede bulunan sat\u0131r say\u0131s\u0131n\u0131 di\u011fer de\u011fer ise bulunan sutun say\u0131s\u0131n\u0131 vermektedir\ndf.shape","7aae037f":"print(\"Titanic Data setimizin mevcut sat\u0131r say\u0131s\u0131 {0} ve  sutun say\u0131s\u0131 {1} d\u0131r \".format(df.shape[0],df.shape[1]))","42974b0a":"### df.info() fonksiyonu bize dataframe in k\u0131sa bir \u00f6zetini vermekte bunlar ba\u015fl\u0131ca ka\u00e7 sat\u0131r\u0131m\u0131z\u0131n oldu\u011fu,bu sat\u0131rlara denk gelen indekslerin ba\u015flang\u0131\u00e7-biti\u015f noktalar\u0131,sutunlar\u0131n isimleri\n### sutunlardaki toplam dolu de\u011fer adetini sutunlar\u0131n veritiplerinin ne oldu\u011funu ve toplamda haf\u0131zada ne kadar de\u011fer tuttu\u011fu verir.","82f0052c":"df.info()","35eeb3ea":"### df.columns bize dataframe de bulan sutunlar\u0131n isimlerini vermektedir.","a61f5970":"df.columns","af5384f5":"### df.index bize dataframe deki indexlerin ba\u015flang\u0131\u00e7 ve biti\u015f noktalar\u0131n\u0131 ve indexler aras\u0131ndaki art\u0131\u015f\u0131n hakk\u0131nda bilgi vermektedir","cbf80e83":"df.index","a55db48b":"### df.describe() fonksiyonu bize dataframe deki veri tipi say\u0131sal olan sutunlar\u0131n betimleyici istatistik de\u011ferlerini vermektedir. Sutundaki nan de\u011ferler hari\u00e7 tutarak bu i\u015flemleri yapar","53489345":"df.describe()","e9c0430a":"### df.describe() fonksiyonun \u00e7\u0131kt\u0131s\u0131n\u0131n daha okunakl\u0131 ve anlamas\u0131 kolay olmas\u0131 i\u00e7insonuna .T koyar\u0131z","2654a9d6":"df.describe().T","5ec1b10c":"### df.isnull() fonksiyonu bize bir boolean (True,False)dataframe d\u00f6nd\u00fcr\u00fcr ve bu dataframe de df deki sat\u0131rlar ve sutunlar vard\u0131r farki ise bo\u015f de\u011ferlerin yerini True dolu de\u011ferlerin yerini False al\u0131r\n### bu fonksiyonun yan\u0131na eklenen values de\u011feri ise dataframe i bir arraya d\u00f6n\u00fc\u015ft\u00fcr\u00fcr ve her bir eleman\u0131 bir sat\u0131rdaki de\u011ferleri i\u00e7erir\n### bu birle\u015fik kod blo\u011funun sonuna eklenecek any() fonksiyonu bu de\u011ferlerin i\u00e7inde hi\u00e7 True var m\u0131 diye sorar ve varsa True yoksa False d\u00f6nd\u00fcr\u00fcr.","95e14ede":"df.isnull()","d499f0e5":"df.isnull().values","a9bea613":"df.isnull().values.any()","6df35312":"df.isnull().sum()","e627412c":"df.info()","7e8e920e":"### df.info ile dataframe bir g\u00f6z att\u0131\u011f\u0131m\u0131zda dtype object olanlar bizim kategorik de\u011fi\u015fkenlerimizdir.\n### bunun iki \u015fekilde bulabiliriz asl\u0131nda 2 sizde ayn\u0131 d\u00f6ng\u00fc ama kod temizli\u011fi ve tekrar\u0131 olmamas\u0131 ad\u0131na Python un bize sundu\u011fu \"list comprehension\" tekni\u011fini \u00f6\u011frenece\u011fiz","a91676e5":"# birinci yol klasik for ve if d\u00f6ng\u00fcs\u00fc\ncat_colsF = []\nfor col in df.columns:\n    if df[col].dtype == \"O\":\n        cat_colsF.append(col)\ncat_colsF","eecc510d":"### List comprehension y\u00f6ntemi \n\ncat_cols = [col for col in df.columns if df[col].dtype==\"O\"]\ncat_cols","3d4c5ef3":"### ka\u00e7 adet kategorik de\u011fi\u015fkenimiz var ona bakal\u0131m \nlen(cat_cols)","f2e79c43":"### Kategorik de\u011f\u015fkenler sadece objectlerden olmaya bilir int de\u011fere sahip bir sutunda i\u00e7erdi\u011fi verilere g\u00f6re asl\u0131nda kategorik de\u011fi\u015fken olarak davranabilir veya kabul edilebilir \n### \u00d6rnek olarak df bulunan Survived Sutunnu dtype olarak integer olsada i\u00e7erdi\u011fi verilerde g\u00f6rece\u011fimiz \u00fczere sadece 2 farkl\u0131 de\u011fer vard\u0131r. Nas\u0131l Bu bilgiye ula\u015fabiliriz?","b2fb7a95":"## unique() fonksiyonu bize bir sutundaki e\u015fsiz verileri vermekte\n## nunique() fonksiyonu ise bize bir sutunda ka\u00e7 farkl\u0131 e\u015fsiz veri oldu\u011funu vermekte","55039e76":"df[\"Survived\"].unique()","6b19cf06":"len(df[\"Survived\"].unique())","c7c9ce83":"df[\"Survived\"].nunique()","38997080":"### Tekrardan kategorik de\u011fi\u015fkenleri i\u00e7inde tutan listemizi olustural\u0131m ve bir list comprehension yazarak bir sutunda 10 dan az e\u015fsiz veri varsa bunlar\u0131da kategorik de\u011fi\u015fken olarak kabul etsin ","041717ab":"cat_cols = [col for col in df.columns if len(df[col].unique()) <10]\ncat_cols","8082bf59":"len(cat_cols)","70168fbc":"### olusturdugumuz cat_cols ile hangi kategorik de\u011fi\u015fken sutununda kac adet e\u015fsiz veri var bakal\u0131m..","3b4958ba":"df[cat_cols].nunique()","55ae24a4":"### ilk kategorik de\u011fi\u015fkenleri ald\u0131\u011f\u0131m\u0131zda listemizde 5 eleman varken su an dtype i integer olan Survived sutunuda art\u0131k bizim kategorik de\u011fi\u015fkenler listemizde\n### Survived sutunumuzun ba\u015fl\u0131ca \u00f6zelliklerine bak\u0131p i\u00e7erdi\u011fi e\u015fsiz verilere g\u00f6re bir g\u00f6rselle\u015ftirme yapal\u0131m ","d53013c6":"df[\"Survived\"].unique()","7301ddd5":"len(df[\"Survived\"].unique())","3b83cfcc":"### Survived Sutundaki her bir e\u015fsiz de\u011ferden ka\u00e7 adet var onu ar\u0131yoruz\ndf[\"Survived\"].value_counts()","cb444f98":"### Bunu birde grafik ile g\u00f6rselle\u015ftirelim\nsns.countplot(x=\"Sex\", data=df);","1c71d553":"## Survived Sutundaki e\u015fsiz de\u011ferlerin y\u00fczdelik dilimlerini nas\u0131l buluruz\n(df[\"Survived\"].value_counts()\/len(df))*100","247cf19c":"def cat_summary(data): ### fonksiyonumuzun ad\u0131 cat_summary\n    ### cat_names de\u011fi\u015fkenin i\u00e7ine bir list comprehension ile df i\u00e7inde bulunan sutunlardaki e\u015fsiz veri say\u0131s\u0131 10 dan k\u00fc\u00e7\u00fckleri kategorik de\u011fi\u015fken kabul ederek ismini bu de\u011fi\u015fkene at\u0131yoruz\n    cat_names = [col for col in data.columns if len(data[col].unique()) < 10] \n    for col in cat_names:\n        print(pd.DataFrame({col: data[col].value_counts(), ## dataframe deki sutunun essiz de\u011ferlerinin adetlerini raporluyoruz\n                           \"Ratio\": 100 * data[col].value_counts()\/ len (data)}), end = \"\\n\\n\\n\")## dataframe deki sutunun essiz de\u011ferlerinin y\u00fczdelik ifadelerini raporluyoruz\n        sns.countplot(x = col, data = data) ## ilgi sutunun seaborn k\u00fct\u00fcphanesindeki countplot grafi\u011fini \u00e7izdiriyoruz\n        plt.show() ## jupyter notebook ve jupyter labda yazmam\u0131za gerek yok ama IDElerde (pycharm) grafi\u011fi g\u00f6stermek i\u00e7in gerek olan kod.","7f633933":"cat_summary(df)","584ac776":"cat_cols = [col for col in df.columns if df[col].dtype == \"O\"]","205a422e":"cat_cols","8fd2abad":"def cat_summary(data, categorical_cols, number_of_classes=10):\n    \n    var_count = 0  # Ka\u00e7 kategorik de\u011fi\u015fken oldu\u011fu raporlanacak\n    vars_more_classes = []  # Belirli bir say\u0131dan daha fazla say\u0131da s\u0131n\u0131f\u0131 olan de\u011fi\u015fkenler saklanacak.\n    \n    for var in data:\n        if var in categorical_cols:\n            if len(list(data[var].unique())) <= number_of_classes:  # s\u0131n\u0131f say\u0131s\u0131na g\u00f6re se\u00e7\n                print(pd.DataFrame({var: data[var].value_counts(),\n                                    \"Ratio\": 100 * data[var].value_counts() \/ len(data)}),end=\"\\n\\n\\n\")\n                var_count += 1\n            else:\n                vars_more_classes.append(data[var].name)\n    print('%d categorical variables have been described' % var_count, end=\"\\n\\n\")\n    print('There are', len(vars_more_classes), \"variables have more than\", number_of_classes, \"classes\", end=\"\\n\\n\")\n    print('Variable names have more than %d classes:' % number_of_classes, end=\"\\n\\n\")\n    print(vars_more_classes)","28b6acb6":"cat_summary(df, cat_cols)","a832e1a8":"### Say\u0131sal de\u011fi\u015fkenleri i\u00e7eren sutunlar\u0131m\u0131z\u0131n betimleyici istatistiksel de\u011ferlerine bakaca\u011f\u0131z ===> describe().T \n### describe() fonksiyonda quartile lardan hari\u00e7 y\u00fczdelik dilimlerdeki istatistiksel de\u011ferlere bakma\n### Ka\u00e7 Adet Say\u0131sal De\u011fi\u015fken i\u00e7eren sutunumuz var bulma\n### Bir Say\u0131sal de\u011fi\u015fken sutunun hsitogram Da\u011f\u0131l\u0131m grafi\u011fini \u00e7izme\n### Bir Df deki t\u00fcm say\u0131sal de\u011fi\u015fkenlerin histogram grafi\u011fini \u00e7izen bir fonksiyon olusturma ","27a0bb43":"### Say\u0131sal de\u011fi\u015fkenleri i\u00e7eren sutunlar\u0131m\u0131z\u0131n betimleyici istatistiksel de\u011ferlerine bakaca\u011f\u0131z ===> describe().T \ndf.describe().T","a3fefa20":"### describe() fonksiyonda quartile lardan hari\u00e7 y\u00fczdelik dilimlerdeki istatistiksel de\u011ferlere bakma\n### describe() fonksiyonun i\u00e7indeki percentiles parametresi \u00f6n tan\u0131ml\u0131 olarak[.25,.5,.75] tam\u0131mml\u0131d\u0131r i\u00e7ine bir liste ile \u00e7e\u015fitli de\u011ferler verirsek onlar\u0131da bize \u00f6zette verir","d1a881f2":"df.describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T","ff843d97":"### df te ka\u00e7 adet say\u0131sal de\u011fer var ona bak\u0131yoruz","88ddc521":"num_cols = [col for col in df.columns if df[col].dtypes != \"O\"]\nnum_cols","37ef1ffc":"print(\"Train data setimizde toplam {0} adet say\u0131sal de\u011fi\u015fkenimiz vard\u0131r\".format(len(num_cols)))","a1d13bdc":"### BU de\u011fi\u015fkenlerden PassengerId ve Survived bu de\u011ferlerin aras\u0131nda olmamal\u0131 Survived bizim hedef de\u011fi\u015fkenimiz(target) PassengerId ise yolcular\u0131 temsil eden bir de\u011fer survived \u0131 etkilememekte \n###  Bir List comprehension i\u015fle bu iki sutun hari\u00e7 yeni bir num_cols olu\u015ftural\u0131m ","d97b17fc":"num_cols = [col for col in df.columns if df[col].dtypes != \"O\" \n           and col not in \"PassengerId\"\n           and col not in \"Survived\"]\nnum_cols","929a6e35":"### yukardaki sutunlardan bir tanesi i\u00e7in bir histogram grafi\u011fi \u00e7izelim\ndf[\"Age\"].hist()","4093ba44":"### Age sutunun birde boxplot grafi\u011fine bakal\u0131m\nsns.boxplot(x=\"Age\",data=df)","40d9e71e":"### bir df te verilen lsitede\u011fi say\u0131sal sutunlar\u0131n hepsinin hist grafi\u011fini \u00e7izdiren fonksiyon","2571458e":"def hist_for_nums(data, numeric_cols):\n    \n    col_counter = 0 \n    \n    for col in numeric_cols: ## verilen listedeki say\u0131sal sutunlar\u0131 tek tek d\u00f6nd\u00fcren for d\u00f6ng\u00fcs\u00fc\n        \n        data[col].hist() ## histogram \u00e7izen sat\u0131r\n        plt.xlabel(col) ## x d\u00fczleminin ismi\n        plt.title(col) ## grafi\u011fin ba\u015fl\u0131\u011f\u0131\n        plt.show() ## olu\u015fan grafi\u011fin g\u00f6sterilmesini sa\u011flayan show() fonksiyonu\n        \n        col_counter += 1 ## her d\u00f6ng\u00fcde de\u011feri 1 artt\u0131r\u0131yoruz\n        \n    print(col_counter, \"variables have been plotted\") ## ka\u00e7 de\u011fi\u015fkenin grafi\u011fini raporlad\u0131\u011f\u0131m\u0131z sat\u0131r.","a01eb6d4":"hist_for_nums(df, num_cols)","afd5b130":"df.head()","367c8853":"df[\"Survived\"].value_counts()","6162aa60":"#df teki bir adet kategorik de\u011fi\u015fkene g\u00f6re target analizi\ndf.groupby(\"Pclass\")[\"Survived\"].mean()","bf2a022a":"def target_summary_with_cat(data, target):\n    \"\"\"\n    data = Fonksiyon verilecek dataframe i temsil etmekte (pandas.dataframe olmak zorunda)\n    target = fonksiyona verilen dataframe i\u00e7indeki sutunlardan target olarak se\u00e7ecek oldu\u011fumuz sutunun ad\u0131(string olarak yaz\u0131lmal\u0131)\n    \"\"\"    \n    cats_names = [col for col in data.columns if len(data[col].unique()) < 10 and col not in target] ## verilen dataframede bulunan kategorik de\u011fi\u015fken sutunlar\u0131n\u0131 bulmak \n    \n    for var in cats_names:\n        print(pd.DataFrame({\"TARGET_MEAN\": data.groupby(var)[target].mean()}), end=\"\\n\\n\\n\") ## bulunan kategorik de\u011fi\u015fkenlere g\u00f6re target analizinin raporland\u0131\u011f\u0131 kod blo\u011fu","0cde115f":"target_summary_with_cat(df, \"Survived\")","5a004764":"num_cols","3545a943":"## Bir say\u0131sal De\u011fi\u015fkene G\u00f6re Targ\u0131t analizi ==> agg() fonksiyonun kullan\u0131m\u0131\n## agg() fonksiyonun i\u00e7ine bir s\u00f6zl\u00fckle atama yapmaktay\u0131z s\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn key de\u011feri i\u015flem yap\u0131lacak sutunun ismini value de\u011feri ise bu sutuna uygulanacak i\u015flemei referans olarak almaktad\u0131r.\ndf.groupby(\"Survived\").agg({\"Fare\": \"mean\" , \"Age\":\"min\", \"Parch\":\"median\"})","b67510e8":"## Say\u0131sal De\u011fi\u015fkenlerin target a g\u00f6re raporlamas\u0131\u0131n\u0131 yapan fonksiyon yaz\u0131l\u0131m\u0131\n## corr() fonskiyonu i\u00e7ine yaz\u0131lan dataframe deki type i say\u0131sal olan surunlar\u0131n bir biri ile olan korelasyonunu bize g\u00f6stermektedir.","2e67fa39":"df.corr()","533e53d1":"df.head(n=3)","06d41e96":"df.describe().T","85593d2e":"sns.boxplot(x=df[\"Age\"])","b6df221c":"### Grafikte \u00e7izgiler bizim verimizin quantile lar\u0131n\u0131 temsil etmekte \u015fimdi bunlara g\u00f6re ayk\u0131r\u0131 g\u00f6zlemlerimizi bulaca\u011f\u0131z","0b74a06f":"df[\"Age\"].quantile(0.25)","2f963107":"df[\"Age\"].quantile(.5)","2468301d":"df[\"Age\"].quantile(0.75)","84ed648f":"q1=df[\"Age\"].quantile(0.25)\nq3=df[\"Age\"].quantile(0.75)\niqr = q3-q1\nup = q3 + 1.5 * iqr\nlow = q1 - 1.5 *iqr","6c2b9e53":"up","f3f1986b":"low","317531a2":"### A\u015fa\u011f\u0131daki kod blo\u011fu ile df deki Age sutunun ayk\u0131r\u0131 g\u00f6zlem olan de\u011ferlerine eri\u015ftik \ndf[(df[\"Age\"]<low) | (df[\"Age\"]> up)][[\"Age\"]]","51047e62":"### A\u015fa\u011f\u0131daki kod blo\u011fu ile df deki Age sutunun ayk\u0131r\u0131 g\u00f6zlem olan de\u011ferlerinin ha\u00e7 adet oldu\u011funu \u00f6\u011frenmek i\u00e7in shape parametresinin return etti\u011fi 2 elemanl\u0131 tuple dan 0. indexe eri\u015firsek buluruz\ndf[(df[\"Age\"]<low) | (df[\"Age\"]> up)][[\"Age\"]].shape[0]","1bde9307":"### Bir sutunda ayk\u0131r g\u00f6zlem var m\u0131 yok mu diye sorgulamak i\u00e7in \ndf[(df[\"Age\"]<low) | (df[\"Age\"]> up)].any(axis=None)","4da288f6":"#Bir sutunun ayk\u0131r\u0131 g\u00f6zlemlerinin hangi de\u011ferlerden k\u00fc\u00e7\u00fck veya b\u00fcy\u00fck oldu\u011funda ayk\u0131r\u0131 g\u00f6zlem kabul edildi\u011fini anlatan fonksiyon\ndef outlier_thresholds(dataframe, variable):\n    ## 2 de\u011fi\u015fken almakta \n    ## dataframe = \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z dataframi temsil eden de\u011fi\u015fken => pandas.DataFrame olmal\u0131 \n    ## variable = dataframe de \u00e7al\u0131\u015fmak istedi\u011fimiz sutun ismi ==> string olmal\u0131 \n    quartile1 = dataframe[variable].quantile(0.25) ## ilgili sutunun 0.25 quantile de\u011feri\n    quartile3 = dataframe[variable].quantile(0.75)## ilgili sutunun 0.75 quantile de\u011feri\n    interquantile_range = quartile3 - quartile1 ## sutundaki 0.75 ile 0.25 de\u011ferlerin fark\u0131\n    up_limit = quartile3 + 1.5 * interquantile_range ## ayk\u0131r\u0131 g\u00f6zlemleri belirlem i\u00e7in kullanca\u011f\u0131m\u0131z \u00fcst limit de\u011feri hesaplamas\u0131 \n    low_limit = quartile1 - 1.5 * interquantile_range ## ayk\u0131r\u0131 g\u00f6zlemleri belirlem i\u00e7in kullanca\u011f\u0131m\u0131z alt limit de\u011feri hesaplamas\u0131 \n    return low_limit, up_limit ## alt ve \u00fcst limitimiz return eden k\u0131s\u0131m ","03579846":"outlier_thresholds(df, \"Fare\")","fcea8df7":"## fonksiyonumuz bize 2 adet de\u011fer atad\u0131\u011f\u0131ndan bunlar\u0131 tek sat\u0131rda 2 de\u011fi\u015fkene atamam\u0131z m\u00fcmk\u00fcnd\u00fcr\nlow,up = outlier_thresholds(df, \"Age\")","f0725c57":"low","92d288cd":"up","8978626b":"## Bir sutunda ayk\u0131r\u0131 g\u00f6zlem var m\u0131 yok mu onu return eden fonksiyon  \ndef has_outliers(dataframe, variable):\n    ## 2 de\u011fi\u015fken almakta \n    ## dataframe = \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z dataframi temsil eden de\u011fi\u015fken => pandas.DataFrame olmal\u0131 \n    ## variable = dataframe de \u00e7al\u0131\u015fmak istedi\u011fimiz sutun ismi ==> string olmal\u0131 \n    low_limit, up_limit = outlier_thresholds(dataframe, variable) ## daha \u00f6nceden olusturdu\u011fumuz outlier_thresholds fonskiyonumuzu bu fonksiyonun i\u00e7inde olu\u015fturduk ve low ve up de\u011ferlerini 2 de\u011fi\u015fkene atad\u0131k\n    if dataframe[(dataframe[variable]<low_limit) | (dataframe[variable]> up_limit)].any(axis=None): ## bulunan low ve up de\u011ferlere g\u00f6re bir ko\u015ful olusturduk \n        print(variable, \"yes\")## sonu\u00e7 true d\u00f6nerse yes diye bir \u00e7\u0131kt\u0131 alaca\u011f\u0131z","b73942e8":"has_outliers(df,\"Age\")","1c85a22e":"### List Comprehantion ile bir de\u011fi\u015fken olusturaca\u011f\u0131z ve df te bulunan sutunlardan say\u0131sal olup ue\u015fsiz de\u011feri 10 dan fazla olan sutunlar\u0131 bulaca\u011f\u0131z \n### Fakat Passenger Id bize target\u0131m\u0131z\u0131n olusmas\u0131nda bir katk\u0131 sa\u011flamad\u0131\u011f\u0131ndan  onun bu lsite i\u00e7inde olmas\u0131n\u0131 istemiyoruz\nnum_names = [col for col in df.columns if len(df[col].unique()) > 10\n             and df[col].dtypes != 'O'\n             and col not in \"PassengerId\"]","eafa47c6":"num_names","10e8b13b":"## Bir for d\u00f6ng\u00fcs\u00fc ile nu sutunlarda ayk\u0131r\u0131 g\u00f6zlem var m\u0131 yok mu olu\u015fturdu\u011fumuz has_outliers fonksiyonu ile bak\u0131yoruz\nfor col in num_names:\n    has_outliers(df, col)","90b2fa9d":"### has_outliers fonksiyonumuzu biraz daha g\u00fczelle\u015ftirelim :)\ndef has_outliers(dataframe, num_col_names, plot=False):\n    ### fonksiyonumuzun 3 adet arguman\u0131 var 1 tanesi \u00f6n tan\u0131ml\u0131 olarak verilmi\u015f yan\u0131 e\u011fer biz plot \u00f6zelli\u011fini vermezsek fonksiyon \u00f6n tan\u0131ml\u0131 olan de\u011fer olarak False kabul edecek bu parametreyi\n    ## dataframe = \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z dataframi temsil eden de\u011fi\u015fken => pandas.DataFrame olmal\u0131 \n    ## num_col_names = say\u0131sal de\u011fi\u015fkenlerimizin isimlerini bar\u0131nd\u0131ran bir liste\n    \n    variable_names = []\n    \n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)## daha \u00f6nceden olusturdu\u011fumuz outlier_thresholds fonskiyonumuzu bu fonksiyonun i\u00e7inde olu\u015fturduk ve low ve up de\u011ferlerini 2 de\u011fi\u015fkene atad\u0131k\n        \n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None): ## fonksiyona verdi\u011fimiz listedeki sutunlardan ayk\u0131r\u0131 g\u00f6zlem i\u00e7eren varsa\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0] ## bu sutunda ka\u00e7 ayk\u0131r\u0131 de\u011fer var onu buluyoruz \n         \n            print(col, \":\", number_of_outliers) ## sutundaki ayk\u0131r\u0131 g\u00f6zlem de\u011ferini raporluyoruz\n            variable_names.append(col) ##sutunun ismini fonksiyonun bas\u0131nda olusturdu\u011fumuz variable_names listesine ekliyoruz\n            \n            if plot: ## e\u011fer fonksiyonun parametrelerinden 3 parametre True olarak girilirse\n                sns.boxplot(x=dataframe[col]) ## bize bir boxplot \u00e7izdiriyor\n                plt.show()## ve bunu IDE de g\u00f6r\u00fcnt\u00fclememizi sa\u011fl\u0131yor jupyter i\u00e7in gerek li de\u011fildir.\n                \n    return variable_names ## fonksiyonumuz bize verdi\u011fimiz listede ayk\u0131r\u0131 g\u00f6zlem olan sutunlar\u0131n ismini bir liste ile d\u00f6nd\u00fcr\u00fcyor.","7f861a7f":"has_outliers(df, num_names)","7eacb156":"has_outliers(df, num_names, True)","3aabf112":"## Ayk\u0131r\u0131 G\u00f6zlemlerin olmad\u0131\u011f\u0131 bir dataframe nas\u0131l olusturulur. Ve bunu yapan fonksiyonun yaz\u0131m\u0131","934cb7f4":"## yazd\u0131\u011f\u0131m\u0131z outkier_treshold fonksiyonu bize sutunumuzdaki ayk\u0131r\u0131 g\u00f6zlemleri belirleyece\u011fimiz low ve up de\u011ferleri vermekteydi","39559f92":"low, up = outlier_thresholds(df, \"Age\")","371d6b93":"up","bc16c761":"## ayk\u0131r\u0131 de\u011ferlerimizin oldu\u011fu sat\u0131rlar\u0131 a\u015fa\u011f\u0131daki kod ile bulmu\u015ftuk\ndf[((df[\"Age\"] < low) | (df[\"Age\"] > up))]","f8574f6c":"## ilk df ten sonra a\u00e7\u0131lan k\u00f6seli parantezden hemen sonra konulacak ~ (windows i\u00e7in Alt Gr +\u00fc ye ayn\u0131 anda bast\u0131ktan sonra yaz\u0131lacak ilk tu\u015f sonras\u0131 kendili\u011finden \u00e7\u0131kmaktad\u0131r) \n## bu sat\u0131rlar hari\u00e7 di\u011fer sat\u0131rlar anlam\u0131na gelmektedir\n","d96110bf":"df[~((df[\"Age\"] < low) | (df[\"Age\"] > up))]","1c8c9a28":"df.shape ## t\u00fcm de\u011ferler varken dataframe mizde 891 sat\u0131r 12 sutun bulunmaktad\u0131r","0ee37d0d":"### peki bu de\u011ferleri silecek fonksiyon nas\u0131l yaz\u0131l\u0131r ? \ndef remove_outliers(dataframe, variable):\n    ## dataframe = \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z dataframi temsil eden de\u011fi\u015fken => pandas.DataFrame olmal\u0131 \n    ## variable = dataframe de \u00e7al\u0131\u015fmak istedi\u011fimiz sutun ismi ==> string olmal\u0131 \n    low_limit, up_limit = outlier_thresholds(dataframe, variable) ## daha \u00f6nceden olusturdu\u011fumuz outlier_thresholds fonskiyonumuzu bu fonksiyonun i\u00e7inde olu\u015fturduk ve low ve up de\u011ferlerini 2 de\u011fi\u015fkene atad\u0131k\n    df_without_outliers = dataframe[~((dataframe[variable] < low_limit) | (dataframe[variable] > up_limit))] ## yeni bir dataframe olusturduk ve bunu i\u00e7ine \u00e7al\u0131\u015fmak istedi\u011fimiz sutunun ayk\u0131r\u0131 g\u00f6zlemleri hari\u00e7 olan\n                                                                                                             ## dataframe e e\u015fitledik\n    return df_without_outliers ## olu\u015fan dataframe i return parametresi ile d\u00f6nd\u00fcrki bir de\u011fi\u015fkene fonksiyon kullan\u0131ld\u0131\u011f\u0131nda atayabilelim.","bed7a645":"df1 = remove_outliers(df,\"Age\")\ndf1.shape","3def0147":"## bu fonksiyonu olu\u015fturdu\u011fumuz num_cols i\u00e7in kullanmak istersek bir for d\u00f6ng\u00fcs\u00fc ile bunu yapabiliriz\nfor col in num_cols:\n    new_df = remove_outliers(df,col)","9a608dab":"new_df.shape","b2bd26eb":"df.info()","55dc0ba7":"# Dataframe de eksik de\u011fer var m\u0131 yok mu ?\ndf.isnull().values.any()","f6b07c87":"# Dataframe deki sutunlarda eksik de\u011ferlerin olup olmad\u0131\u011f\u0131n\u0131n sorgulanmas\u0131\ndf.isnull().sum()","05a96c12":"# Hangi sutunlarda eksik de\u011fer var bulunmas\u0131\ndf.columns[df.isnull().any()]","106e5418":"# de\u011fi\u015fkenlerdeki de\u011ferlerin toplam\u0131n\u0131n bulunmas\u0131\ndf.isnull().sum().sum()","8959d6f8":"#en az bir tane eksik degere sahip olan g\u00f6zlem birimleri\ndf[df.isnull().any(axis=1)]","67439930":"# tam olan g\u00f6zlem birimleri\ndf[df.notnull().all(axis=1)]","4c69d163":"### Sutunlardaki eksik verinin oransal olarak g\u00f6r\u00fclmesi ve fazladan aza do\u011fru s\u0131ralama\n(df.isnull().sum() \/ df.shape[0] * 100).sort_values(ascending=False)","b47daacd":"# Dataframe deki sutunlarda eksik de\u011fer olan sutunlar\u0131n raporlamas\u0131n\u0131 yapan fonksiyonun yaz\u0131m\u0131\ndef missing_values_table(dataframe):\n    ## fonksiyonun parametresi bir dataframe olmal\u0131\n    variables_with_na = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0] ## dataframe de eksik veri olan sutunlar\u0131n adlar\u0131n\u0131n bir lsiteye al\u0131nmas\u0131 i\u015flemi\n    \n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False) ## eksik g\u00f6zlem olan sutunlar\u0131n ka\u00e7 eksik de\u011fere sahip oldu\u011funun bulunmas\u0131 ve \u00e7ok olandan az olana doru s\u0131ralanmas\u0131 \n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False) ## Sutundaki eksik verinin y\u00fczde olarak ifade edilmesi i\u00e7in gerekli hesaplama\n    \n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])## missing df seklinde bir datafram olusturmak raporlama i\u00e7in\n    print(missing_df) ## raporlaman\u0131n yazd\u0131r\u0131ld\u0131\u011f\u0131 k\u0131s\u0131m\n    return variables_with_na ## eskik g\u00f6zleme sahip sutunlar\u0131n fonksiyon la geri d\u00f6nd\u00fcr\u00fclmesi","e3b53869":"cols_with_na = missing_values_table(df) ### a\u015fa\u011f\u0131da c\u0131kt\u0131 fonksiyonun print k\u0131sm\u0131ndan \u00e7\u0131kan k\u0131s\u0131m ","e80cd703":"cols_with_na ## fonksiyonun return etti\u011fi liste bir de\u011fi\u015fkene atanm\u0131s durumda","de2f17da":"## Ne yapaca\u011f\u0131z peki bu eksik de\u011ferlere ? \n## 1) Kullanaca\u011f\u0131m\u0131z model bir a\u011fa\u00e7 y\u00f6ntemi ise dokunmayaca\u011f\u0131z\n## 2) Silebiliriz.\n## 3) Basit Doldurma Y\u00f6ntemleri Kullanabiliriz","0817c1de":"## silme y\u00f6ntemi\ndf.shape","878976b1":"df.dropna()","d664d6d4":"df.shape","8de0576b":"## basit doldurma y\u00f6ntemleri ==> fillna() bo\u015f de\u011ferleri doldurmak istedi\u011finiz de\u011feri at\u0131yoruz ilk parametre olarak sonras\u0131nda kal\u0131c\u0131 olmas\u0131 i\u00e7in inplace parametresini True Yap\u0131yoruz.\ndf[\"Age\"].fillna(df[\"Age\"].mean(), inplace = True)\n\n","a1097e0f":"## kay\u0131p de\u011ferleri doldurma i\u015flemi basar\u0131l\u0131 oldumu diye daha \u00f6nceden yazd\u0131\u011f\u0131m\u0131z missing_values_table fonksiyonu ile kontrol sa\u011fl\u0131yoruz.\nmissing_values_table(df)","e4cefec9":"df[\"Sex\"].head()","f6f4f548":"### Label Encoding yapabilmek i\u00e7in y\u00fcklenmesi gereken K\u00fct\u00fcphane\nfrom sklearn import preprocessing","c64b4ad4":"from sklearn.preprocessing import LabelEncoder","36938a46":"len(df[\"Sex\"].value_counts()) ## label encoder kullanabilmek i\u00e7in sutunda max 2 e\u015fsiz de\u011ferden olmal\u0131","0e23f563":"label_encoder = preprocessing.LabelEncoder()","8abf0cae":"label_encoder.fit_transform(df[\"Sex\"])","6cf74610":"df[\"Sex\"].head()","96d14b63":"## e\u011fer bu de\u011ferleri eski haline geri \u00e7evirmek istersek \nlabel_encoder.inverse_transform([0,1])","e9bbecc7":"#dataframe de en fazla 2 e\u015fsiz de\u011feri olan sutunlara label encoding uygulayan fonksiyon\n\ndef label_encoder(dataframe):\n    labelencoder = preprocessing.LabelEncoder() ## burada label encoding yapacak de\u011fi\u015fkenimizi sklearn k\u00fct\u00fcphanesinde nulunan preprocessing.LabelEncoder() t\u00fcrettik\n\n    label_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\" ## dataframe de Hem kategorik de\u011fi\u015fken hemde sutundaki es\u015fiz de\u011feri 2 ye e\u015fit olan sutun isimlerin\n                  and len(dataframe[col].value_counts()) == 2]                     ## ald\u0131k\n\n    for col in label_cols:\n        dataframe[col] = labelencoder.fit_transform(dataframe[col]) ## for d\u00f6ng\u00fcs\u00fc ile bu sutunlara label encoding uygulad\u0131k\n    return dataframe ## fonksiyon bize label encoding yap\u0131lm\u0131\u015f yeni dataframe i atamam\u0131z i\u00e7in d\u00f6nd\u00fcrd\u00fc","328adea6":"df.head()","620a4613":"df=label_encoder(df)","6e648eb7":"df.head(n=3)","1bc8c81e":"## 2 den fazla de\u011fere sahip sutun alal\u0131m ","89aab5a9":"df[\"Embarked\"].value_counts()","1f2230fa":"df.shape","3667d6d1":"df = data.copy()\ndf.head()","c6d1e5e6":"pd.get_dummies(df,columns=[\"Sex\"],drop_first=True).head()","2688b03a":"pd.get_dummies(df,columns=[\"Embarked\"]).head()","06a8c04f":"pd.get_dummies(df,columns=[\"Embarked\"],drop_first=True).head()","3461b16d":"pd.get_dummies(df,columns=[\"Embarked\"],dummy_na = True).head()","0b9e5f59":"## 2 den fazla e\u015fsiz de\u011fere sahip kategorik de\u011fi\u015fkenlere one hot encoding yapacak fonksiyon \ndef one_hot_encoder(dataframe, category_freq=10, nan_as_category=False):\n    \"\"\"\n    dataframe = bir pandas dataframe i fonksiyona tan\u0131mlanmal\u0131\n    category_freq= bir sutununu en fazla ka\u00e7 e\u015fsiz de\u011fere sahip olursa kategorik de\u011fi\u015fken say\u0131laca\u011f\u0131n\u0131 belirledi\u011fimiz arguman int de\u011fer atanmal\u0131\n    nan_as_category = Sutundaki nan de\u011ferlere one hot encoding uygulan\u0131p uygulanmayaca\u011f\u0131n\u0131 kara vermekte olan arguman \n    \"\"\"    \n    categorical_cols = [col for col in dataframe.columns if len(dataframe[col].value_counts()) < category_freq\n                        and dataframe[col].dtypes == 'O'] ## kategorik de\u011fi\u015fkenlerimiz belirledi\u011fimiz list comprehension kodu\n    \n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=nan_as_category, drop_first=True) ##belirlenen kategorik de\u011fi\u015fkenlere one hot encoding uygulanan kod blogu\n    \n    return dataframe ##fonksiyonumuz bize one hot encoding uygulanm\u0131s bir dataframe d\u00f6nd\u00fcr\u00fcyor.","dd5547ed":"df = one_hot_encoder(df)","e40df2c3":"df.head()","2cdedb7a":"df=data.copy()","9545a792":"100*(df[\"Parch\"].value_counts()\/len(df))","e9500c15":"### Parch sutununu kategorik bir de\u011fi\u015fken olarak d\u00fc\u015f\u00fcnelim ve buradaki %9 a\u015fa\u011f\u0131s\u0131ndaki de\u011ferleri birle\u015ftirip bunlar\u0131n tamam\u0131na rare s\u0131n\u0131f\u0131n\u0131 atayal\u0131m ","30c1c387":"df[\"Parch\"].unique()","31b590a0":"len(df[\"Parch\"].unique())","2124c885":"rr = df[\"Parch\"].value_counts()\/len(df)","0eb7670f":"rr","92267a3f":"rare_labels = rr[rr<0.08].index\nrare_labels","b77d9363":"### dataframe de Parch sutununda ki 3,4,5,6 de\u011ferlerin yerine hepsine rare atayal\u0131m\n\ndf[\"Parch\"] = np.where(df[\"Parch\"].isin(rare_labels),\"RARE\",df[\"Parch\"])","14947f67":"df[\"Parch\"].value_counts()\/len(df)","5bc458bf":"def rare_encoder(dataframe, rare_perc):\n    \n    tempr_df = dataframe.copy() ## uygulayaca\u011f\u0131m\u0131z df te de\u011fi\u015fiklik olmas\u0131n diye bir de\u011fi\u015fkene kopyal\u0131yoruz\n\n    rare_columns = [col for col in tempr_df.columns if tempr_df[col].dtypes == 'O'\n                    and (tempr_df[col].value_counts() \/ len(tempr_df) < rare_perc).any(axis=None)] ## rare encodin yapaca\u011f\u0131m\u0131z kategorik de\u011fi\u015fkenlerimizin isimlerini bir listeye al\u0131yoruz\n\n    for var in rare_columns: \n        tmp = tempr_df[var].value_counts() \/ len(tempr_df) ## sutundaki s\u0131n\u0131flar\u0131n frekanslar\u0131n\u0131 buluyoruz\n        rare_labels = tmp[tmp < rare_perc].index ## for d\u00f6ng\u00fcs\u00fc ile sutundaki rare encoding yapaca\u011f\u0131m\u0131z s\u0131n\u0131flar\u0131 belirliyoruz\n        tempr_df[var] = np.where(tempr_df[var].isin(rare_labels), 'Rare', tempr_df[var]) ## frekans\u0131 d\u00fc\u015f\u00fck olan s\u0131n\u0131flar\u0131n yerine \"Rare\" olarak at\u0131yoruz\n\n    return tempr_df","cf17794c":"df=data.copy()","515291f4":"df[\"Parch\"] = df[\"Parch\"].apply(lambda x: str(x)) ### object olup de\u011fi\u015fikli\u011fi g\u00f6rmek i\u00e7in yap\u0131lan bir i\u015flem","34c72e35":"df.nunique()","6775c8df":"df1=rare_encoder(df,0.08)","58be106a":"df1.nunique()","857eeb12":"from sklearn.preprocessing import StandardScaler","7076347f":"scaler = StandardScaler().fit(df[[\"Age\"]])","3fce88ac":"df.describe().T","ec714591":"df[\"Age\"] = scaler.transform(df[[\"Age\"]])\ndf.describe().T","d3e05db7":"df=data.copy()\nfrom sklearn.preprocessing import RobustScaler\n\ntransformer = RobustScaler()\ntransformer.fit(df[[\"Age\"]])\ndf[\"Age\"] = transformer.transform(df[[\"Age\"]])","adb5d245":"df.describe().T","5201cac4":"df=data.copy()\nfrom sklearn.preprocessing import MinMaxScaler\n\ntransformer = MinMaxScaler((-10, 10)).fit(df[[\"Age\"]])\ndf[\"Age\"] = transformer.transform(df[[\"Age\"]])  # on tan\u0131ml\u0131 de\u011feri 0 ile 1 aras\u0131.\ndf.describe().T","07ba2a48":"df.head()","2063c30c":"df = data.copy()\ndf.head()\ndf.loc[((df['SibSp'] + df['Parch']) > 0), \"NEW_IS_ALONE\"] = \"NO\"\ndf.loc[((df['SibSp'] + df['Parch']) == 0), \"NEW_IS_ALONE\"] = \"YES\"\ndf.head()\n","2509b5b9":"## 10-Rare Encoding\n- Rare Encoding nedir : One hot encoding yap\u0131lacak sutunlarda frekans\u0131 \u00e7ok d\u00fc\u015f\u00fck olan s\u0131n\u0131flar\u0131n bir araya getirilip yeni bir s\u0131n\u0131f olusturulmas\u0131 d\u0131r.\n- Rare encoding i\u015flemini uygun olan t\u00fcm sutunlara uygulamak i\u00e7in fonksiyon yazal\u0131m ","4170953c":"### 8-Label Encoding\n- Label Encoding \u0130ki s\u0131n\u0131fl\u0131 kategorik de\u011fi\u015fkenlerde uykulanan bir y\u00f6ntemdir.\n- Label Encoding yapabilmek i\u00e7in y\u00fcklenmesi gereken K\u00fct\u00fcphane\n- Bir sutun i\u00e7in label encoding uygulamak\n- Bir dataframe de en fazla 2 e\u015fsiz de\u011feri olan sutunlara label encoding uygulamak i\u00e7in bir fonksiyon yazal\u0131m.","fd424a6a":"### 1- Genel Resim \n- Gerekli K\u00fct\u00fcphanelerin Y\u00fcklenmesi\n- train.csv dosyas\u0131n\u0131 bir dataframe haline getirme ===> pd.read_csv() ,pd.Dataframe.copy()\n- Olu\u015fturulan Dataframe in verilerini ekrana yazd\u0131rma ===> df.head() , df.tail()\n- Olusturulan DataFramenin boyutlar\u0131n\u0131n incelenmesi ===> df.shape\n- Olu\u015fturulan DataFramenin Ba\u015fl\u0131ca \u00d6zelliklerine bakmak ===> df.info() , df.columns , df.index ,df.isnull(),df.describe()\n","9cc44cff":"### 5- Say\u0131sal De\u011fi\u015fken analizi\n- Bir say\u0131sal De\u011fi\u015fkene G\u00f6re Targ\u0131t analizi ==> agg() fonksiyonun kullan\u0131m\u0131\n- Say\u0131sal De\u011fi\u015fkenlerin target a g\u00f6re raporlamas\u0131\u0131n\u0131 yapan fonksiyon yaz\u0131l\u0131m\u0131 \n- Say\u0131sal de\u011ferlerin bir biri ile olan ili\u015fkisi ==> corr() fonksiyonu ","fd466b78":"### 11-STANDARTLASTIRMA\n- Standartla\u015ft\u0131rma yapman\u0131n 3 yolu vard\u0131r.\n- StandardScaler y\u00f6ntemi ==> sklearn.preprocessing k\u00fct\u00fcphanesinden StandardScaler s\u0131n\u0131f\u0131ndan t\u00fcretilir ortalamay\u0131 buluruz ve standart sapmaya b\u00f6leriz\n- RobustScaler y\u00f6ntemi ==> Bu y\u00f6ntem medyan\u0131 ortadan kald\u0131r\u0131r ve 0.25 quantile de\u011feri ile 0.75\n- MinMaxScaler: Verilen 2 de\u011fer aras\u0131nda de\u011fi\u015fken d\u00f6n\u00fc\u015f\u00fcm\u00fc","2a8cf268":"### 3- Say\u0131sal De\u011fer Analizi","bd93a654":"### 6- Ayk\u0131r\u0131 G\u00f6zlemleri Yakalama\n- Ayk\u0131r\u0131 de\u011ferleri boxplot ile inceleme\n- Bir sutunun ayk\u0131r\u0131 g\u00f6zlemlerinin hangi de\u011ferlerden k\u00fc\u00e7\u00fck veya b\u00fcy\u00fck oldu\u011funda ayk\u0131r\u0131 g\u00f6zlem kabul edildi\u011fini anlatan fonksiyonun yaz\u0131m\u0131 \n- Bir sutunda ayk\u0131r\u0131 g\u00f6zlem var m\u0131 yok mu onu return eden fonksiyon yaz\u0131m\u0131 \n- Ayk\u0131r\u0131 G\u00f6zlemlerin olmad\u0131\u011f\u0131 bir dataframe nas\u0131l olusturulur. Ve bunu yapan fonksiyonun yaz\u0131m\u0131","8d7c0865":"### 7- EKS\u0130K DE\u011eER ANAL\u0130Z\u0130\n- Dataframe de eksik de\u011fer var m\u0131 yok mu ? \n- Dataframe deki sutunlarda eksik de\u011ferlerin olup olmad\u0131\u011f\u0131n\u0131n sorgulanmas\u0131\n- Hangi sutunlarda eksik de\u011fer var bulunmas\u0131\n- de\u011fi\u015fkenlerdeki de\u011ferlerin toplam\u0131n\u0131n bulunmas\u0131 \n- en az bir tane eksik degere sahip olan g\u00f6zlem birimleri\n- tam olan g\u00f6zlem birimleri\n- Sutunlardaki eksik verinin oransal olarak g\u00f6r\u00fclmesi ve fazladan aza do\u011fru s\u0131ralama\n- Dataframe deki sutunlarda eksik de\u011fer olan sutunlar\u0131n raporlamas\u0131n\u0131 yapan fonksiyonun yaz\u0131m\u0131\n- Ne yapaca\u011f\u0131z Bu eksik de\u011ferlere.","ea73cd34":"### 9- One Hot Encoding\n- Ama\u00e7 =  Bir kategorik de\u011fi\u015fken 2 den fazla de\u011fere sahip oldu\u011funda binary olarak bu s\u0131n\u0131flara g\u00f6re encoding yap\u0131lmas\u0131d\u0131r.\n- pd.get_dummies() fonksiyonu ile uygulan\u0131r ba\u015fl\u0131ca parametreleri drop_first ve dummy_na d\u0131r\n- drop_first=True yapt\u0131\u011f\u0131m\u0131zda dummy tuza\u011f\u0131na d\u00fc\u015fmemek i\u00e7in yarat\u0131lan ilk dummies sutunu d\u00fc\u015f\u00fcr\u00fcl\u00fcr.\n- dummy_na= True ise one hot encoding uygulanacak sutunda bo\u015f de\u011fer var ise fonksiyonun onu bir de\u011fer olarak g\u00f6r\u00fcp bir sutun olusturmas\u0131n\u0131 sa\u011flamaktad\u0131r.\n- dataframe de 2 den fazla e\u015fsiz de\u011fere sahip kategorik de\u011fi\u015fkenlerein hepsine one hot encoding uygulanacak bir fonksiyon yazal\u0131m  ","ea6ab2dd":"####  12-FEATURE ENGINEER","619bfc23":"### 2- Kategorik De\u011fi\u015fken Analizi\n- Ka\u00e7 Kategorik de\u011fi\u015fken var onu bulaca\u011f\u0131z\n- Kategorik de\u011fi\u015fkenlerde ka\u00e7 adet s\u0131n\u0131f var onu bulaca\u011f\u0131z ===> unique() , nunique()\n- Kategorik de\u011fi\u015f\u015fkenin s\u0131n\u0131flar\u0131 nelerdir.\n- Kategorik De\u011fi\u015fken S\u0131n\u0131flar\u0131n\u0131n g\u00f6rselle\u015ftirlmesi","caf31b5d":"### 4-Target Analizi\n- Target sutundaki de\u011ferlerin ska\u00e7ar adet oldu\u011funun bulunmas\u0131  ==> value_counts\n- df teki bir adet kategorik de\u011fi\u015fkene g\u00f6re target analizi\n- df teki t\u00fcm kategorik de\u011fi\u015fkenlere g\u00f6re target analizi yapan fonksiyon yaz\u0131m\u0131 "}}