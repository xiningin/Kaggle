{"cell_type":{"a56adfda":"code","7d6e137d":"code","91c3978f":"code","54e09695":"code","d3ce26fb":"code","4c06178c":"code","ec0c8aa1":"code","4bff745a":"code","869a23d7":"code","16082522":"code","5b8d36a0":"code","bbfb60d6":"code","e33c4571":"code","651ae046":"code","9bc196df":"code","a7255559":"code","2c5b846f":"code","bfd29ba8":"code","e33a6050":"code","968c0cab":"code","f96595c8":"code","aaea3446":"code","a316542c":"code","75c4a50b":"code","1710213d":"code","81ef3f30":"code","50ccaf6a":"code","01af21d7":"code","e3f442ae":"code","06ac3966":"code","6b7c87b8":"code","81803932":"code","a9ac5806":"code","6b001a75":"code","91714ebd":"code","a02f6b0e":"code","92fee5f2":"code","8decc34c":"code","174a1496":"markdown","ae01f7a9":"markdown","43722343":"markdown","cecd208b":"markdown","b3b7c049":"markdown","18915805":"markdown","63b54a90":"markdown","10938c57":"markdown","30095bf6":"markdown","2ef7d3b3":"markdown","c2f7dc74":"markdown","abe8a319":"markdown","6d0d8037":"markdown","b271a087":"markdown","2a412c4e":"markdown","a7d3aad9":"markdown","62bb2304":"markdown","4b8167f0":"markdown","3aae7267":"markdown"},"source":{"a56adfda":"# \u6536\u96c6\u6570\u636e\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","7d6e137d":"# \u5bfc\u5165\u6a21\u5757\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom patsy import dmatrices\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, r2_score","91c3978f":"# \u6570\u636e\u8bfb\u5165\ntrain_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain_data.head()\n# test_data.head()","54e09695":"# \u76f8\u5173\u4fe1\u606f\u6982\u89c8\n# train_data.info()\n# test_data.info()","d3ce26fb":"# \u6709\u6548\u63cf\u8ff0\u6027\u7edf\u8ba1\n# train_data.describe()","4c06178c":"# \u67e5\u91cd\n# train_data.duplicated().sum()\n\n# \u5404\u53d8\u91cf\u975e\u7a7a\u552f\u4e00\u503c\u53ca\u8ba1\u6570\n# train_data[\"GarageYrBlt\"].value_counts()","ec0c8aa1":"# \u9009\u62e9 train \u6570\u503c\u6570\u636e\ntrain_data.drop(columns=['Id'], inplace=True)\ntrain_data = train_data.select_dtypes(exclude='object')\n\n# \u9009\u62e9 test \u6570\u636e\u6570\u636e\ntest_data_Id = test_data['Id']\ntest_data.drop(columns=['Id'], inplace=True)\ntest_data = test_data.select_dtypes(include='number')","4bff745a":"# train \u91cd\u547d\u540d\u5217\ntrain_data = train_data.rename(columns = {\"1stFlrSF\" : \"OstFlrSF\"})\ntrain_data = train_data.rename(columns = {\"2ndFlrSF\" : \"TndFlrSF\"})\ntrain_data = train_data.rename(columns = {\"3SsnPorch\" : \"TSsnPorch\"})\n\n# test \u91cd\u547d\u540d\u5217\ntest_data = test_data.rename(columns = {\"1stFlrSF\" : \"OstFlrSF\"})\ntest_data = test_data.rename(columns = {\"2ndFlrSF\" : \"TndFlrSF\"})\ntest_data = test_data.rename(columns = {\"3SsnPorch\" : \"TSsnPorch\"})","869a23d7":"# train \u586b\u5145\u7f3a\u5931\u503c\ntrain_data['LotFrontage'].fillna(train_data['LotFrontage'].mean(), inplace=True)\ntrain_data['MasVnrArea'].fillna(train_data['MasVnrArea'].mean(), inplace=True)\ntrain_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].mean(), inplace=True)\n\n# test \u586b\u5145\u7f3a\u5931\u503c\ntest_data['LotFrontage'].fillna(test_data['LotFrontage'].mean(), inplace=True)\ntest_data['MasVnrArea'].fillna(test_data['MasVnrArea'].mean(), inplace=True)\ntest_data['BsmtFinSF1'].fillna(test_data['BsmtFinSF1'].mean(), inplace=True)\ntest_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].mean(), inplace=True)\ntest_data['BsmtFullBath'].fillna(test_data['BsmtFullBath'].mean(), inplace=True)\ntest_data['BsmtHalfBath'].fillna(test_data['BsmtHalfBath'].mean(), inplace=True)\ntest_data['GarageArea'].fillna(test_data['GarageArea'].mean(), inplace=True)","16082522":"plt.scatter(data = train_data, x = 'YearBuilt', y = 'GarageYrBlt', alpha = 0.5);","5b8d36a0":"plt.scatter(data = train_data, x = 'TotalBsmtSF', y = 'GarageArea', alpha = 0.5);","bbfb60d6":"sb.regplot(data = train_data, x = 'GarageCars', y = 'GarageArea', fit_reg = False,\n           x_jitter = 0.2, y_jitter = 0.2, scatter_kws = {'alpha' : 1\/3});","e33c4571":"# \u6839\u636e\u7ebf\u6027\u6a21\u578b\u5f97\u51fa\u7684P\u503c\uff0c\u8c03\u6574 train \u53d8\u91cf\ntrain_data.drop(columns=['MiscVal'], inplace=True)\ntrain_data.drop(columns=['MoSold'], inplace=True)\n\n# \u6839\u636e\u65b9\u5dee\u81a8\u80c0\u56e0\u5b50\uff0c\u8c03\u6574 train \u53d8\u91cf\ntrain_data.drop(columns=['GarageYrBlt'], inplace=True)\ntrain_data.drop(columns=['BsmtFinSF2'], inplace=True)\ntrain_data.drop(columns=['BsmtUnfSF'], inplace=True)\ntrain_data.drop(columns=['OstFlrSF'], inplace=True)\ntrain_data.drop(columns=['TndFlrSF'], inplace=True)\ntrain_data.drop(columns=['LowQualFinSF'], inplace=True)\ntrain_data.drop(columns=['GarageCars'], inplace=True)\n\n# \u6839\u636e\u7ebf\u6027\u6a21\u578b\u5f97\u51fa\u7684P\u503c\uff0c\u8c03\u6574 test \u53d8\u91cf\ntest_data.drop(columns=['MiscVal'], inplace=True)\ntest_data.drop(columns=['MoSold'], inplace=True)\n\n# \u6839\u636e\u65b9\u5dee\u81a8\u80c0\u56e0\u5b50\uff0c\u8c03\u6574 test \u53d8\u91cf\ntest_data.drop(columns=['GarageYrBlt'], inplace=True)\ntest_data.drop(columns=['BsmtFinSF2'], inplace=True)\ntest_data.drop(columns=['BsmtUnfSF'], inplace=True)\ntest_data.drop(columns=['OstFlrSF'], inplace=True)\ntest_data.drop(columns=['TndFlrSF'], inplace=True)\ntest_data.drop(columns=['LowQualFinSF'], inplace=True)\ntest_data.drop(columns=['GarageCars'], inplace=True)","651ae046":"# # \u7f29\u653e\u6570\u636e\u96c6\n# X_scaled_train = StandardScaler().fit_transform(train_data.iloc[:,0:-1])\n# train_data.iloc[:,0:-1] = X_scaled_train\n\n# # \u62df\u5408\u7ebf\u6027\u6a21\u578b\n# train_data[\"intercept\"]=1\n# train_data_intercept = train_data.intercept\n# train_data = train_data.drop('intercept', axis=1)\n# train_data.insert(0,'intercept',train_data_intercept)\n\n# lm = sm.OLS(train_data[\"SalePrice\"], train_data.iloc[:,0:-1])\n# results = lm.fit()\n# results.summary()","9bc196df":"# \u8ba1\u7b97\u6570\u636e\u96c6\u4e2d\u6bcf\u4e2a x_variable \u7684 vif\ndef vif_calculator(df, response):\n    '''\n    INPUT:\n    df - a dataframe holding the x and y-variables\n    response - the column name of the response as a string\n    OUTPUT:\n    vif - a dataframe of the vifs\n    '''\n    df2 = df.drop(columns=[response], inplace=False)\n    features = \"+\".join(df2.columns)\n    y, X = dmatrices(response + '~' + features, df, return_type='dataframe')\n    vif = pd.DataFrame()\n    vif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif[\"features\"] = X.columns\n    vif = vif.round(1)\n    return vif\n\n# \u67e5\u770b vif \u503c\n# vif_calculator(train_data, \"SalePrice\")","a7255559":"# \u5bfc\u5165\u6a21\u5757\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures, OneHotEncoder\nfrom sklearn.metrics import mean_squared_error, r2_score","2c5b846f":"# \u7279\u5f81\u6807\u7b7e\u5206\u79bb\nX = train_data.drop(columns=['SalePrice'])\ny = train_data[['SalePrice']]\n\n# train \u4e0e test \u6570\u636e\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","bfd29ba8":"# \u6570\u636e\u6570\u636e\u3001\u5206\u7c7b\u6570\u636e\nnum_feat = X.select_dtypes(include='number').columns.to_list()\ncat_feat = X.select_dtypes(exclude='number').columns.to_list()","e33a6050":"# \u521b\u5efa\u7ba1\u9053\nnum_pipe = Pipeline([\n    ('imputer',SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler())\n])\n\ncat_pipe = Pipeline([\n    ('imputer',SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])\n\nct = ColumnTransformer(transformers=[('numeric', num_pipe, num_feat), ('categorical', cat_pipe, cat_feat)], remainder='drop')","968c0cab":"# \u5bfc\u5165\u6a21\u5757\nfrom sklearn.linear_model import LinearRegression","f96595c8":"# \u8bad\u7ec3\u8bc4\u4f30\nmodel_lr = Pipeline([\n    ('transformer', ct),\n    ('predictor', LinearRegression())\n])\n\nmodel_lr.fit(X_train, y_train)\nmodel_lr.score(X_test, y_test)","aaea3446":"# \u5bfc\u5165\u6a21\u5757\nfrom sklearn.linear_model import RidgeCV","a316542c":"# \u8bad\u7ec3\u8bc4\u4f30\nmodel_rc = Pipeline([\n    ('transformer', ct),\n    ('predictor', RidgeCV(alphas=np.logspace(-6, 6, 13)))\n])\n\nmodel_rc.fit(X_train, y_train)\nmodel_rc.score(X_test, y_test)","75c4a50b":"# \u5bfc\u5165\u6a21\u5757\nfrom sklearn.linear_model import LassoCV","1710213d":"# \u8bad\u7ec3\u8bc4\u4f30\nmodel_lc = Pipeline([\n    ('transformer', ct),\n    ('predictor', LassoCV(alphas=np.logspace(-6, 6, 13)))\n])\n\nmodel_lc.fit(X_train, y_train)\nmodel_lc.score(X_test, y_test)","81ef3f30":"# \u5bfc\u5165\u6a21\u5757\nimport tensorflow as tf\nimport os","50ccaf6a":"# \u5b9a\u4e49\u6a21\u578b\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', kernel_regularizer = tf.keras.regularizers.l2()),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)  \n])\n\n# \u914d\u7f6e\u6a21\u578b\nmodel.compile(optimizer='Adam', loss='mean_squared_error', metrics=['mean_absolute_error', 'mean_squared_error'])","01af21d7":"# \u65ad\u70b9\u5b58\u7eed\ncheckpoint_save_path = '.\/checkpoint\/HousePricesModle.ckpt'\nif os.path.exists(checkpoint_save_path + '.index'):\n    print('-----------------load the model-----------------')\n    model.load_weights(checkpoint_save_path)\ncp_callback = tf.keras.callbacks.ModelCheckpoint(\n    filepath='.\/checkpoint\/HousePricesModle.ckpt',\n    save_weights_only=True,\n    save_best_only=True\n)\n\n# \u6a21\u578b\u8bad\u7ec3\nhistory = model.fit(X, y, batch_size=32, epochs=5, validation_split=0.2, validation_freq=1)","e3f442ae":"# # \u6253\u5370\u6a21\u578b\nmodel.summary()","06ac3966":"# \u5bfc\u5165\u6a21\u5757\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV","6b7c87b8":"# \u5bfc\u5165\u6570\u636e\u96c6\ntrain_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","81803932":"# \u7279\u5f81\u6807\u7b7e\u5206\u79bb\nX = train_data.drop(columns=['SalePrice'])\ny = train_data[['SalePrice']]\n\n# train \u4e0e test \u6570\u636e\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","a9ac5806":"# \u6570\u636e\u6570\u636e\u3001\u5206\u7c7b\u6570\u636e\nnum_feat = X.select_dtypes(include='number').columns.to_list()\ncat_feat = X.select_dtypes(exclude='number').columns.to_list()","6b001a75":"# \u521b\u5efa\u7ba1\u9053\nnum_pipe = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler())\n])\n\ncat_pipe = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])\n\nct = ColumnTransformer(transformers=[('numeric', num_pipe, num_feat), ('categorical', cat_pipe, cat_feat)], remainder='drop')","91714ebd":"# \u8bad\u7ec3\u8bc4\u4f30\nmodel_rf = Pipeline([\n    ('transformer', ct),\n    ('predictor', RandomForestRegressor())\n])\n\nmodel_rf.fit(X_train, y_train)\nmodel_rf.score(X_test, y_test)","a02f6b0e":"# \u5b9e\u73b0\u5e94\u7528\npredictions = model_rf.predict(test_data)\n\noutput = pd.DataFrame({'Id': test_data.Id, 'SalePrice': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","92fee5f2":"# \u5bfc\u5165\u6a21\u5757\nfrom sklearn.linear_model import Lasso","8decc34c":"# \u8bad\u7ec3\u8bc4\u4f30\nmodel_las = Pipeline([\n    ('transformer',ct),\n    ('poly',PolynomialFeatures(2)),\n    ('predictor', Lasso())\n])\n\nmodel_las.fit(X_train, y_train)\nmodel_las.score(X_test, y_test)","174a1496":"### 4.4 Lasso Regression","ae01f7a9":"> \u89c2\u5bdfP\u503c\uff0c\u663e\u8457\u6027\u53d8\u91cf\uff1a  \n> MSSubClass, LotArea, OverallQual, OverallCond, YearBuilt, YearRemodAdd, MasVnrArea, BsmtFinSF1, TotalBsmtSF, OstFlrSF, TndFlrSF, GrLivArea, BsmtFullBath, BedroomAbvGr, KitchenAbvGr, TotRmsAbvGrd, Fireplaces, GarageYrBlt, GarageCars, WoodDeckSF, ScreenPorch\n","43722343":"### 4.5 Neural Network","cecd208b":"### 2.3 \u6e05\u7406\u6570\u636e","b3b7c049":"### 4.6 RandomForestRegressor","18915805":"### 2.2 \u8bc4\u4f30\u6570\u636e","63b54a90":"## \u7b2c\u4e09\u90e8\u5206\uff1a\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790","10938c57":"### \uff01\u63d0\u4ea4\u6700\u4f18\u6a21\u578b \uff01","30095bf6":"### 3.2 \u6a21\u578b\u5047\u8bbe","2ef7d3b3":"### 4.3 Ridge regression","c2f7dc74":"## \u7b2c\u4e00\u6b65\uff1a\u63d0\u95ee\n1. \u90a3\u4e2a\u53d8\u91cf\u4e0e\u623f\u4ef7\u7684\u7ebf\u6027\u76f8\u5173\u6027\u6700\u5f3a\uff1f  \n2. \u6709\u54ea\u4e9b\u53d8\u91cf\u95f4\u5b58\u5728\u5f3a\u76f8\u5173\u6027\uff1f\n3. \u5982\u679c\u60f3\u7528\u6240\u6709\u53d8\u91cf\u6765\u9884\u6d4b\u623f\u4ef7\uff0c\u4f1a\u5b58\u5728\u591a\u91cd\u5171\u7ebf\u6027\u95ee\u9898\u5417\uff1f  \n4. \u53d8\u91cf\u662f\u5426\u5177\u6709\u7edf\u8ba1\u663e\u8457\u6027\u6216\u65e0\u663e\u8457\u6027\uff1f","abe8a319":"1. \u7b80\u5355\u7ebf\u6027\u56de\u5f52\uff0c\u4f7f\u7528\u5b9a\u91cf\u53d8\u91cf\uff0c\u91c7\u7528 StandardScaler \u9884\u5904\u7406\uff0c\u62df\u5408\u7684\u6a21\u578b\u51c6\u786e\u5ea6\u4e00\u822c\u3002\n2. \u7b80\u5355\u7ebf\u6027\u56de\u5f52\uff0c\u4f7f\u7528\u5b9a\u91cf\u53d8\u91cf\uff0c\u91c7\u7528 PolynomialFeatures \u9884\u5904\u7406\uff0c\u4f1a\u9020\u6210\u8fc7\u62df\u5408\u7684\u60c5\u51b5\u3002\n3. \u666e\u901a\u6700\u5c0f\u4e8c\u4e58\u7684\u7cfb\u6570\u4f30\u8ba1\u53d6\u51b3\u4e8e\u7279\u5f81\u7684\u72ec\u7acb\u6027\u3002\u5f53\u8981\u7d20\u76f8\u5173\u5e76\u4e14\u8bbe\u8ba1\u77e9\u9635\u7684\u5217\u7531\u4e8e\u5177\u6709\u8fd1\u4f3c\u7684\u7ebf\u6027\u76f8\u5173\u6027\uff0c\u8bbe\u8ba1\u77e9\u9635\u53d8\u5f97\u63a5\u8fd1\u5947\u5f02\uff0c\u7ed3\u679c\uff0c\u6700\u5c0f\u4e8c\u4e58\u4f30\u8ba1\u5bf9\u89c2\u5bdf\u5230\u7684\u76ee\u6807\u4e2d\u7684\u968f\u673a\u8bef\u5dee\u53d8\u5f97\u9ad8\u5ea6\u654f\u611f\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u8f83\u5927\u7684\u65b9\u5dee\u3002","6d0d8037":"## \u7b2c\u4e8c\u6b65\uff1a\u6574\u7406\u6570\u636e  \n### 2.1 \u5bfc\u5165\u6570\u636e\u96c6","b271a087":"### 4.7 Linear Regression with Polynomial Feature","2a412c4e":"### 4.1 \u7b80\u5355\u7ba1\u9053","a7d3aad9":"### 3.1 \u53ef\u89c6\u5316\u5206\u6790","62bb2304":"## \u7b2c\u4e94\u90e8\u5206\uff1a\u8bad\u7ec3\u8bc4\u4f30","4b8167f0":"### 4.2 Linear Regression Example","3aae7267":"### \u7ed3\u8bba  \n1. \u603b\u4f53\u6750\u6599\u548c\u52a0\u5de5\u8d28\u91cf\uff08OverallQual\uff09\u4e0e\u623f\u4ef7\uff08SalePrice\uff09\u7684\u76f8\u5173\u6027\u6700\u5f3a  \n2. \u539f\u59cb\u65bd\u5de5\u65e5\u671f\uff08YearBuilt\uff09\u4e0e\u8f66\u5e93\u5efa\u6210\u65e5\u671f\uff08GarageYrBlt\uff09\u76f8\u5173\u6027\u6700\u5f3a\n3. BsmtFinSF1 \u4e0e BsmtUnfSF\u3001TotalBsmtSF\u3001OstFlrSF\u3001BsmtFullBath \u5177\u6709\u8f83\u5f3a\u76f8\u5173\n4. BsmtUnfSF \u4e0e TotalBsmtSF\u3001BsmtFinSF1\u3001BsmtFullBath \u5177\u6709\u8f83\u5f3a\u76f8\u5173\n5. TotalBsmtSF \u4e0e OverallQual\u3001BsmtFinSF1\u3001BsmtUnfSF\u3001OstFlrSF\u3001GrLivArea\u3001GarageCars\u3001GarageArea\u3001SalePrice \u5177\u6709\u8f83\u5f3a\u76f8\u5173\n3. \u82e5\u7528\u6240\u6709\u7684\u53d8\u91cf\u6765\u9884\u6d4b\u623f\u4ef7\uff0c\u5b58\u5728\u591a\u91cd\u5171\u7ebf\u95ee\u9898"}}