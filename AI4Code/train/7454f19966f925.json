{"cell_type":{"1a12e141":"code","061d4299":"code","a894d7ea":"code","3b5ec8b9":"code","79aac963":"code","3cba497e":"code","7a4bbba5":"code","1fcf4ca4":"code","f4500a33":"code","57bb5ca4":"code","fca379af":"code","5136728a":"code","422c78bb":"code","233ce4a4":"code","8d58fda1":"code","42cb5ccd":"code","a0933b30":"code","758c7f7e":"code","79ef4f25":"code","8010161b":"code","11bf94df":"code","f0aca552":"markdown","6d00c5e1":"markdown","1fbdff69":"markdown","080d6365":"markdown"},"source":{"1a12e141":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report","061d4299":"comedy = pd.read_csv('..\/input\/comedy-shows\/shows.csv')","a894d7ea":"comedy.shape","3b5ec8b9":"comedy.head()","79aac963":"comedy.describe()","3cba497e":"comedy.info()","7a4bbba5":"#handling missing value\ncomedy.isnull().sum()","1fcf4ca4":"#heatmap correlation\nplt.figure(figsize = (10,6))\nsns.heatmap(comedy.corr(), annot = True, cmap = 'OrRd')","f4500a33":"df = comedy[['Experience', 'Rank', 'Go']]\ndf.head()","57bb5ca4":"#split data\nX = df.drop('Go', axis = 1)\ny = df['Go']\nfeature = ['Experience', 'Rank', 'Go']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","fca379af":"dtc = DecisionTreeClassifier(max_depth = 3)\ndtc.fit(X_train, y_train)\nprint(dtc)","5136728a":"#prediction\ny_pred = dtc.predict(X_test)\nprint(y_pred)","422c78bb":"#accuracy score\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy Score : ', accuracy)\nprint('Percentage : ', int(accuracy * 100), '%')","233ce4a4":"#confusion matrix\nmatrix = pd.crosstab(y_test, y_pred, rownames = ['Actual'], colnames = ['Predicted'])\nprint(matrix)","8d58fda1":"#classification report\nreport = classification_report(y_test, y_pred)\nprint(report)","42cb5ccd":"#plotting model\nfig = plt.figure(figsize = (20,20))\n_= tree.plot_tree(dtc, feature_names = feature, class_names = y, filled = True, rounded = True)","a0933b30":"national_go = comedy.groupby(['Nationality', 'Go']).size().reset_index(name = 'Count')\nprint(national_go)","758c7f7e":"plt.figure(figsize = (10,6))\nsns.barplot(x = 'Nationality', y = 'Count', hue = 'Go', data = national_go)\nplt.title('Nationality ~ Go')\nplt.show()","79ef4f25":"sns.displot(data = df, x = 'Experience', hue = 'Go', kind = 'kde')\nplt.title('Experience ~ Go')","8010161b":"sns.displot(data = df, x = 'Rank', hue = 'Go', kind = 'kde')\nplt.title('Rank ~ Go')","11bf94df":"sns.displot(data = comedy, x = 'Age', hue = 'Go', kind = 'kde')\nplt.title('Age ~ Go')","f0aca552":"# Prediction of Person Went or Not to See it","6d00c5e1":"## Decision Tree Model","1fbdff69":"## Data Extraction","080d6365":"## Selection Data"}}