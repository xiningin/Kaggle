{"cell_type":{"5162f74c":"code","70253b24":"code","ad54355f":"code","bdbaee17":"code","f73b8dc6":"code","6cea223a":"code","4164ca84":"code","c13454e3":"code","528e560a":"code","257c424e":"code","da47840a":"code","f7538389":"code","4ca411b9":"code","608d040a":"code","f72e9c26":"code","806eb0de":"code","e2ecea6f":"code","482b3d0d":"code","51bd1714":"code","c0213123":"code","9e575b8b":"code","b6e59deb":"code","b3dda1b7":"code","2c7c6bef":"code","70abf6ce":"code","7925e48f":"code","e48171b2":"code","8a19f6e1":"code","580d7d02":"code","26ec1cc5":"code","e9772546":"code","8aba6fe7":"code","fda9327c":"code","157390f8":"code","816d5834":"code","1a3cd1b1":"code","ad87b399":"code","4bb4aff6":"code","36b1d7f7":"code","4676c8ec":"code","3da206c7":"code","eb29d596":"code","f0b565d7":"markdown","edf22051":"markdown","dc390aee":"markdown"},"source":{"5162f74c":"# importing packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime as dt\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree","70253b24":"#reading data\n\nretail_df = pd.read_csv(\"..\/input\/online-retail-dataset\/OnlineRetail.csv\", sep=\",\", encoding=\"ISO-8859-1\", header=0)\nretail_df.head()","ad54355f":"retail_df.shape","bdbaee17":"retail_df.describe()","f73b8dc6":"retail_df.info()","6cea223a":"# missing values\n#round(100*(retail_df.isnull().sum())\/len(retail_df), 2)\nretail_df.isnull().sum()","4164ca84":"# drop the rows having missing values\nretail_df = retail_df.dropna()\nretail_df.shape","c13454e3":"# new column: amount \nretail_df['amount'] = retail_df['Quantity']*retail_df['UnitPrice']\nretail_df.head()","528e560a":"# monetary\ngrouped_df = retail_df.groupby('CustomerID')['amount'].sum()\n","257c424e":"grouped_df.head()","da47840a":"grouped_df = grouped_df.reset_index()\ngrouped_df.head()","f7538389":"# frequency\nfrequency = retail_df.groupby('CustomerID')['InvoiceNo'].count()\nfrequency = frequency.reset_index()\nfrequency.columns = ['CustomerID', 'frequency']\nfrequency.head()","4ca411b9":"# merge the two dfs\ngrouped_df = pd.merge(grouped_df, frequency, on='CustomerID', how='inner')\ngrouped_df.head()","608d040a":"# recency\n# convert to datetime\nretail_df['InvoiceDate'] = pd.to_datetime(retail_df['InvoiceDate'], \n                                          format='%d-%m-%Y %H:%M')","f72e9c26":"retail_df.info()","806eb0de":"retail_df.head()","e2ecea6f":"# max date\nmax_date = max(retail_df['InvoiceDate'])\nmax_date","482b3d0d":"# calculate the diff\nretail_df['diff'] = max_date - retail_df['InvoiceDate']\nretail_df.head()","51bd1714":"# recency\nlast_purchase = retail_df.groupby('CustomerID')['diff'].min()\nlast_purchase = last_purchase.reset_index()\nlast_purchase.head()","c0213123":"# merge\ngrouped_df = pd.merge(grouped_df, last_purchase, on='CustomerID', how='inner')\ngrouped_df.columns = ['CustomerID', 'amount', 'frequency', 'recency']\ngrouped_df.head()","9e575b8b":"# number of days only\ngrouped_df['recency'] = grouped_df['recency'].dt.days\ngrouped_df.head()","b6e59deb":"# removing outliers\n# outlier treatment for amount\nQ1 = grouped_df.amount.quantile(0.05)\nQ3 = grouped_df.amount.quantile(0.95)\nIQR = Q3 - Q1\ngrouped_df = grouped_df[(grouped_df.amount >= Q1 - 1.5*IQR) & (grouped_df.amount <= Q3 + 1.5*IQR)]\n\n# outlier treatment for recency\nQ1 = grouped_df.recency.quantile(0.05)\nQ3 = grouped_df.recency.quantile(0.95)\nIQR = Q3 - Q1\ngrouped_df = grouped_df[(grouped_df.recency >= Q1 - 1.5*IQR) & (grouped_df.recency <= Q3 + 1.5*IQR)]\n\n# outlier treatment for frequency\nQ1 = grouped_df.frequency.quantile(0.05)\nQ3 = grouped_df.frequency.quantile(0.95)\nIQR = Q3 - Q1\ngrouped_df = grouped_df[(grouped_df.frequency >= Q1 - 1.5*IQR) & (grouped_df.frequency <= Q3 + 1.5*IQR)]\n","b3dda1b7":"# scaling\nrfm_df = grouped_df[['amount', 'frequency', 'recency']]\n\n# instantiate\nscaler = StandardScaler()\n\n# fit_transform\nrfm_df_scaled = scaler.fit_transform(rfm_df)\nrfm_df_scaled.shape","2c7c6bef":"rfm_df_scaled","70abf6ce":"rfm_df_scaled = pd.DataFrame(rfm_df_scaled)\n#rfm_df_scaled.columns = ['amount', 'frequency', 'recency']\nrfm_df_scaled.head()","7925e48f":"# k-means with some k\nkmeans = KMeans(n_clusters=4, max_iter=50)\nkmeans.fit(rfm_df_scaled)","e48171b2":"kmeans.labels_","8a19f6e1":"# elbow-curve\/ssd\nssd = []\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\nfor num_clusters in range_n_clusters:\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n    kmeans.fit(rfm_df_scaled)\n    \n    ssd.append(kmeans.inertia_)\n    \n# plot the SSDs for each n_clusters\n# ssd\nplt.plot(ssd)","580d7d02":"# silhouette analysis\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n\nfor num_clusters in range_n_clusters:\n    \n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n    kmeans.fit(rfm_df_scaled)\n    \n    cluster_labels = kmeans.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(rfm_df_scaled, cluster_labels)\n    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))\n    \n    ","26ec1cc5":"# final model with k=3\nkmeans = KMeans(n_clusters=3, max_iter=50)\nkmeans.fit(rfm_df_scaled)","e9772546":" kmeans.labels_","8aba6fe7":"grouped_df['cluster_id'] = kmeans.labels_\ngrouped_df.head()","fda9327c":"# plot\nsns.boxplot(x='cluster_id', y='amount', data=grouped_df)","157390f8":"sns.boxplot(x='cluster_id', y='frequency', data=grouped_df)","816d5834":"sns.boxplot(x='cluster_id', y='recency', data=grouped_df)","1a3cd1b1":"rfm_df_scaled.head()","ad87b399":"grouped_df.head()","4bb4aff6":"# single linkage\nmergings = linkage(rfm_df_scaled, method=\"single\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","36b1d7f7":"# complete linkage\nmergings = linkage(rfm_df_scaled, method=\"complete\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","4676c8ec":"# 3 clusters\ncluster_labels = cut_tree(mergings, n_clusters=3).reshape(-1, )\ncluster_labels","3da206c7":"grouped_df['cluster_labels'] = cluster_labels\ngrouped_df.head()","eb29d596":"# plots\nsns.boxplot(x='cluster_labels', y='amount', data=grouped_df)","f0b565d7":"**Finding Optimal Number of Clusters\n**\n* Elbow Curve\n* Silhoutte Score","edf22051":"# **Hierarchical Clustering**","dc390aee":"\n    R (Recency): Number of days since last purchase\n    F (Frequency): Number of tracsactions\n    M (Monetary): Total amount of transactions (revenue contributed)\n\n"}}