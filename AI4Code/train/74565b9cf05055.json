{"cell_type":{"9bdf5010":"code","a1e7878a":"code","9014062d":"code","85c38ba9":"code","c9237f4e":"code","e9bfcf51":"code","dfcf8193":"code","1de5af95":"code","b598aec9":"code","e42337ce":"code","58d4efe3":"code","2afb08e0":"code","2ce68434":"code","7d71b361":"markdown","1f1d0269":"markdown","ab654c87":"markdown","4ef8a373":"markdown","6c8675cf":"markdown","80e1c524":"markdown","4a23645a":"markdown","5a047223":"markdown","3d87bbad":"markdown","1b75e879":"markdown","ceff983e":"markdown","57c35e06":"markdown","bcf7ab5f":"markdown"},"source":{"9bdf5010":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a1e7878a":"df=pd.read_csv('\/kaggle\/input\/diabetes\/diabetic_data.csv')","9014062d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils import resample\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score,precision_recall_curve,roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA, TruncatedSVD\nimport time\nimport matplotlib.patches as mpatches\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score","85c38ba9":"df.info()","c9237f4e":"df.head()","e9bfcf51":"#we need to check whether a patient admitted within 30 days or not\ndf['target']=(df['readmitted']=='<30').astype('int')\n\n#dropping readmitted column\ndf.drop(['readmitted'],axis=1,inplace=True)","dfcf8193":"x=df['target'].value_counts().values\nsns.barplot([0,1],x)\nplt.title('Target variable count')","1de5af95":"Count_Target_0 = len(df[df[\"target\"]==0])\nCount_Target_1 = len(df[df[\"target\"]==1])\n\nPercentage_of_Target_0 = Count_Target_0\/(Count_Target_0+Count_Target_1)\nprint(\"percentage of Target 0 is\",Percentage_of_Target_0*100)\n\nPercentage_of_Target_1= Count_Target_1\/(Count_Target_0+Count_Target_1)\nprint(\"percentage of Target 1 is\",Percentage_of_Target_1*100)","b598aec9":"not_readmitted=df[df.target==0]\nreadmitted=df[df.target==1]","e42337ce":"#upsample minority\nreadmitted_upsampled = resample(readmitted,\n                          replace=True, # sample with replacement\n                          n_samples=len(not_readmitted), # match number in majority class\n                          random_state=27) # reproducible results\n# combine majority and upsampled minority\nupsampled = pd.concat([not_readmitted, readmitted_upsampled])\n\n# check new class counts\nupsampled.target.value_counts()","58d4efe3":"y=upsampled.target.value_counts()\nsns.barplot(y=y,x=[0,1])\nplt.title('upsampled data class count')\nplt.ylabel('count')","2afb08e0":"not_readmitted_downsampled = resample(not_readmitted,\n                                replace = False, # sample without replacement\n                                n_samples = len(readmitted), # match minority n\n                                random_state = 27) # reproducible results\n\n# combine minority and downsampled majority\ndownsampled = pd.concat([not_readmitted_downsampled, readmitted])\n\n# checking counts\ndownsampled.target.value_counts()","2ce68434":"y=downsampled.target.value_counts()\nsns.barplot(y=y,x=[0,1])\nplt.title('downsampled data class count')\nplt.ylabel('count')","7d71b361":"**Hence in data there is only 11 % are the readmitted patients,now we have to do resampling of this data **","1f1d0269":"**Generating output variable**","ab654c87":"**Note :** If your dataset has large number of records and you dont worry about data loss do undersampling.In other hand, if you concerned about data loss then do oversampling.","4ef8a373":"* **There is clearly a class imbalace problem.**","6c8675cf":"**Target variable**","80e1c524":"**Resampling**","4a23645a":"**After upsampling the dataset,Plot shows an equal number of classes.**","5a047223":"**Before re sampling lets have look at the different accuracy matrices:**\n\n* TP = True possitive means no of possitve cases which are predicted possitive\n\n* TN = True negative means no of negative cases which are predicted negative\n\n* FP = False possitve means no of negative cases which are predicted possitive\n\n* FN= False Negative means no of possitive cases which are predicted negative\n\n**Confusion Matrix: a table showing correct predictions and types of incorrect predictions.**\n\n**Precision(TP\/(TP+FP))** : The number of true positives divided by all positive predictions. Precision is also called Positive Predictive Value. It is a measure of a classifier\u2019s exactness. Low precision indicates a high number of false positives.\n\n**Recall(TP\/(TP+FN))**: The number of true positives divided by the number of positive values in the test data. Recall is also called Sensitivity or the True Positive Rate. It is a measure of a classifier\u2019s completeness. Low recall indicates a high number of false negatives.\n\n**Resampling:**\n\nA widely adopted technique for dealing with highly unbalanced datasets is called resampling","3d87bbad":"**Data Exploration**","1b75e879":"**Oversampling**","ceff983e":"**Importing necessary packages**","57c35e06":"**Undersampling**","bcf7ab5f":"**Undersampling**: It is the process where you randomly delete some of the observations from the majority class in order to match the numbers with the minority class.\n\n **Oversampling**: It is the process of generating synthetic data that tries to randomly generate a sample of the attributes from observations in the minority class.\n \n ![image.png](attachment:image.png)"}}