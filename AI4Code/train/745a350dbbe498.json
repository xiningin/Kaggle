{"cell_type":{"be700020":"code","1bb61d24":"code","5da01ac5":"code","7ae6b1a8":"code","ab995ecc":"code","f91f906e":"code","987128b8":"code","1b983ec0":"code","ab56c5ec":"code","0670de87":"code","06a5cab7":"code","dfe0e07c":"code","c992d91e":"code","2fed8f06":"code","78be131e":"code","c75c298a":"code","8ec35481":"code","a7220dfe":"code","6ba2285a":"code","d53c2614":"code","9b68e1ca":"code","8077649d":"code","69339300":"code","cfa7b508":"code","5719a137":"code","d0ba8536":"code","d9b51706":"code","631c3e57":"code","71a509a0":"code","b0fac8ef":"code","8d430e77":"code","459ea737":"code","d4c902c0":"code","f18233cc":"code","8a24ef2f":"code","573cda88":"code","08e3c417":"code","274e472b":"code","8847a4d5":"code","3918976d":"code","0ab2a03d":"code","8d1c2851":"code","aa56c376":"code","449f094b":"code","52f54af8":"code","e40fbb07":"code","59dcfdc4":"code","3f88a421":"code","560daddf":"code","c3ec26bb":"code","2e91a107":"code","9dde060d":"code","2016e995":"code","3d347230":"code","d4c7744e":"code","775ea0c5":"code","af69dfe2":"code","8b0783c8":"code","c563454f":"code","35bc3d40":"code","f734c45d":"code","9308b92f":"code","9e1c3466":"code","9e468468":"code","5c823a76":"code","d2d092d3":"code","8acfcd0b":"code","9b8ed011":"code","49407c78":"code","bfb57f55":"code","87395f46":"code","27448fc8":"code","63d36421":"code","0c0370f2":"code","46e16b29":"code","596b3695":"markdown","b9a71eea":"markdown","21a3c804":"markdown","7f8fb814":"markdown","2f802a5e":"markdown","2ef9a610":"markdown","4189fca6":"markdown","f67ead21":"markdown","a05be73f":"markdown"},"source":{"be700020":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import regression\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV","1bb61d24":"df1=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf2=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf3=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","5da01ac5":"df1.head()","7ae6b1a8":"df1.shape","ab995ecc":"df2.head()","f91f906e":"df2.shape","987128b8":"df3.shape","1b983ec0":"df2=pd.concat((df2,df3.iloc[:,-1]),axis=1)","ab56c5ec":"df1.shape","0670de87":"df2.shape","06a5cab7":"temp=pd.concat((df1,df2),axis=0)","dfe0e07c":"temp.shape","c992d91e":"for i in temp.columns:\n    print(i,temp[i].isnull().sum())","2fed8f06":"temp.drop(['Id','Alley','FireplaceQu','Fence','MiscFeature','PoolQC'] ,axis=1,inplace=True)","78be131e":"for i in temp.select_dtypes('object').columns :\n    m=temp[i].mode()[0]\n    temp[i].replace({np.nan : m},inplace=True)","c75c298a":"temp.info()","8ec35481":"for i in temp.select_dtypes('float64').columns :\n    m=temp[i].median()\n    temp[i].replace({np.nan : m},inplace=True)","a7220dfe":"temp.info()","6ba2285a":"df=temp.copy()","d53c2614":"df.shape","9b68e1ca":"for i in df.columns:\n    if 'Yr' in i or 'Year' in i and i!='YearBuilt':\n        df[i]=df[i]-df['YearBuilt']","8077649d":"df.drop(['YearBuilt'],axis=1,inplace=True)","69339300":"for i in df.columns:\n    if 'Yr' in i or 'Year' in i:\n        print(df[i])","cfa7b508":"plt.scatter(df['YrSold'],df['SalePrice'])","5719a137":"a=df.select_dtypes('object').columns","d0ba8536":"a","d9b51706":"alldum=pd.DataFrame()","631c3e57":"for i in a:\n    dum=pd.get_dummies(df[i],drop_first=True)\n    alldum=pd.concat([alldum,dum],axis=1)\n    df=df.drop(i,axis=1)","71a509a0":"df=pd.concat([alldum,df],axis=1)","b0fac8ef":"df.head()","8d430e77":"df =df.loc[:,~df.columns.duplicated()]","459ea737":"df.head()","d4c902c0":"df.describe()","f18233cc":"import seaborn as sns","8a24ef2f":"count=0\nfor i in df.select_dtypes('int64').columns:\n    count+=1\nprint(\"Integer64 Type count :\",count)","573cda88":"count=0\nfor i in df.select_dtypes('object').columns:\n    count+=1\nprint(\"Object Type count :\",count)","08e3c417":"count=0\nfor i in df.select_dtypes('float64').columns:\n    count+=1\nprint(\"Float Type count :\",count)","274e472b":"for i in df.select_dtypes('int64').columns:\n    low=df[i].quantile(.5)\n    high=df[i].quantile(.95)\n    for j in df[i]:\n        if j<low :\n            df[i].replace({j:low},inplace=True)\n        elif j>high :\n            df[i].replace({j:high},inplace=True)","8847a4d5":"for i in df.select_dtypes('float64').columns:\n    low=df[i].quantile(.5)\n    high=df[i].quantile(.95)\n    for j in df[i]:\n        if j<low :\n            df[i].replace({j:low},inplace=True)\n        elif j>high :\n            df[i].replace({j:high},inplace=True)","3918976d":"X_train=df.iloc[:1459,:-1]\ny_train=df.iloc[:1459,-1]\nX_test=df.iloc[1460:,:-1]\ny_test=df.iloc[1460:,-1]","0ab2a03d":"y_test.shape","8d1c2851":"regressor=xgb.XGBRegressor()","aa56c376":"## Hyper Parameter Optimization\n\n\nn_estimators = [100, 500, 900, 1100, 1500, 1900]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.03,0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4,5,6,7]\nbase_score=[0.15,0.25,0.5,0.75,1]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","449f094b":"random_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = -1,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","52f54af8":"random_cv.fit(X_train,y_train)","e40fbb07":"random_cv.best_estimator_","59dcfdc4":"regressor=xgb.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.05, max_delta_step=0, max_depth=10,\n             min_child_weight=4, missing=np.nan, monotone_constraints='()',\n             n_estimators=500, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","3f88a421":"regressor.fit(X_train,y_train)","560daddf":"y_pred=regressor.predict(X_test)","c3ec26bb":"from sklearn.metrics import mean_squared_error as mse","2e91a107":"np.sqrt(mse(np.log(y_test),np.log(y_pred)))","9dde060d":"y_pred.shape","2016e995":"np.sqrt(mse(y_test,y_pred))","3d347230":"np.mean(np.array(y_pred))","d4c7744e":"sub=pd.DataFrame({'Id': df3.iloc[:,0] , 'SalePrice' : y_pred})","775ea0c5":"sub.head()","af69dfe2":"df3.head()","8b0783c8":"sub.to_csv('Submission.csv',index=False)","c563454f":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 1500, random_state = 0, n_jobs=-1)\nrf.fit(X_train, y_train)","35bc3d40":"y_pred=rf.predict(X_test)","f734c45d":"y_pred.mean()","9308b92f":"mse(y_pred,y_test)","9e1c3466":"np.sqrt(mse(y_test,y_pred))","9e468468":"from sklearn.linear_model import Lasso","5c823a76":"ls=Lasso()","d2d092d3":"parameters={'alpha' :[1e-15,1e-10,1e-5,1e-4,1e-3,1e-2,.1,1,2,3,5,10,20,50,100,150,200,300,450]}","8acfcd0b":"lreg=GridSearchCV(ls,parameters,scoring='neg_mean_squared_error',cv=5)","9b8ed011":"lreg.fit(X,y)","49407c78":"print(lreg.best_params_)\nprint(lreg.best_score_)","bfb57f55":"ls=Lasso(alpha=450)","87395f46":"ls.fit(X,y)","27448fc8":"y_pred=ls.predict(X_test)","63d36421":"mse(y_test,y_pred)","0c0370f2":"np.sqrt(mse(y_test,y_pred))","46e16b29":"np.mean(y_test)","596b3695":"## creating submission.csv to upload","b9a71eea":"## Missing Values","21a3c804":"# **XGBRegressor**","7f8fb814":"## using lasso model as we have large no of features","2f802a5e":"## Outliers Handling","2ef9a610":"## Dependent, independent variables","4189fca6":"# **RFRegressor**","f67ead21":"### I don't know why heatmap is not working since the docker environment updated?","a05be73f":"### since we have encoded and removed object data"}}