{"cell_type":{"33e3550c":"code","191c4c2a":"code","3c5050a1":"code","37cff18c":"code","0ca71ed8":"code","de397621":"code","2acc984f":"code","e59b1402":"code","cc0f1e65":"code","a3f46384":"code","fc42a5d0":"code","f64c4c78":"code","3abb0fd1":"code","4eca6696":"code","7c337535":"code","8429d324":"code","01305ea0":"markdown","b58e5dbf":"markdown","0eb2c432":"markdown","23ea92ad":"markdown","d4af397b":"markdown","9821d575":"markdown","9fd7d459":"markdown","749d2746":"markdown","e9792bec":"markdown","5dc40adb":"markdown","98469265":"markdown","80d5228c":"markdown","01b8ffa9":"markdown","6e312296":"markdown","bdd59a06":"markdown"},"source":{"33e3550c":"!pip install py7zr","191c4c2a":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nimport glob\nimport imageio\nfrom tensorflow import keras","3c5050a1":"import shutil\n#import py7zr\nfrom py7zr import unpack_7zarchive\n\nhas_7zip = False\nfor i in range(0, len(shutil.get_unpack_formats())):\n    if(shutil.get_unpack_formats()[i][0] == '7zip'):\n        has_7zip = True\n\nshutil.register_unpack_format('7zip', ['.7z'], unpack_7zarchive) if (has_7zip == False) else print('7zip already Added')","37cff18c":"def data_download():\n    shutil.unpack_archive(\"..\/input\/cifar-10\/train.7z\")\n\n\n    train_images = []\n    #i = 1\n    for i in range(1, 50001):\n        raw = imageio.imread('.\/train\/' + str(i) + '.png')\n        train_images.append(raw)\n\n    train_images = np.array(train_images)\n    return train_images\n    print('Done!')","0ca71ed8":"def data_prep():\n    from sklearn.model_selection import train_test_split\n\n    X_train, X_test, y_train, y_test = train_test_split(train_images, np.array(train_labels['label']), test_size=0.25, random_state=101)\n    \n    X_train, X_test = X_train \/ 255.0, X_test \/ 255.0\n    \n    num_classes = 10\n    batch_size = 32\n\n    X_train = X_train.astype('float32')\n    X_test = X_test.astype('float32')\n\n    y_train = y_train.astype('int8')\n    y_test = y_test.astype('int8')\n    \n    ","de397621":"def create_train_model():\n    from keras.regularizers import l2\n\n    data_augment = keras.Sequential([\n      #keras.layers.RandomFlip(\"horizontal\"),\n      #keras.layers.RandomRotation(0.2),\n      keras.layers.RandomZoom(0.2)\n    ])\n    \n    model = Sequential([\n        data_augment,\n        keras.layers.Conv2D(16, (3, 3), padding='same', activation='relu', \n                               input_shape = X_train.shape[1:],\n                               kernel_regularizer = l2(0.0005)\n                              ),\n        keras.layers.BatchNormalization(),\n        keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_regularizer = l2(0.0005)),\n        keras.layers.BatchNormalization(),\n        keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_regularizer = l2(0.0005)),\n        keras.layers.BatchNormalization(),\n        keras.layers.MaxPooling2D(),\n        keras.layers.Dropout(0.2),\n\n        keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_regularizer = l2(0.0005)),\n        keras.layers.BatchNormalization(),\n        keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_regularizer = l2(0.0005)),\n        keras.layers.BatchNormalization(),\n        keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer = l2(0.0005)),\n        keras.layers.BatchNormalization(),\n        keras.layers.MaxPooling2D(),\n        keras.layers.Dropout(0.3),\n\n\n        keras.layers.Flatten(),\n        keras.layers.Dense(128, activation='relu', kernel_regularizer = l2(0.0005)),\n        #keras.layers.Dropout(0.4),\n        keras.layers.Dense(num_classes, activation='softmax')\n        ])\n\n\n    model.compile(optimizer = keras.optimizers.Adam(),\n                  loss = keras.losses.CategoricalCrossentropy(),\n                  metrics = ['accuracy']\n                  )\n\n    model.fit(X_train, y_train,\n                        batch_size = 32,\n                        epochs = 25, \n                        validation_data = (X_test, y_test),\n                        shuffle = True\n                       )\n    \n    '''\n    predictions = model.predict(X_train)\n    predictions\n    predictions = le.inverse_transform(np.argmax(predictions, axis=1))\n\n    testing = pd.DataFrame({\n            'label': predictions\n        })\n    '''","2acc984f":"def display_learning_process():\n    acc = model.history['accuracy']\n    val_acc = model.history['val_accuracy']\n\n    loss = model.history['loss']\n    val_loss = model.history['val_loss']\n\n    epochs_range = range(25)\n\n    plt.figure(figsize=(8, 8))\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs_range, acc, label='Training Accuracy')\n    plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n    plt.legend(loc='lower right')\n    plt.title('Training and Validation Accuracy')\n\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs_range, loss, label='Training Loss')\n    plt.plot(epochs_range, val_loss, label='Validation Loss')\n    plt.legend(loc='upper right')\n    plt.title('Training and Validation Loss')\n    plt.show()","e59b1402":"labels = pd.read_csv('..\/input\/cifar-10\/trainLabels.csv')","cc0f1e65":"labels","a3f46384":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\nle.fit(labels['label'])\nlabels['label'] = le.transform(labels['label'])\nprint('Done')","fc42a5d0":"if(os.path.isfile('..\/input\/modelh5\/model.h5')):\n    model = keras.models.load_model('..\/input\/modelh5\/model.h5')\nelse:\n    data_download()\n    data_prep()\n    create_train_model()\n    model.save('.\/model.h5')\n    display_learning_process()\n    ","f64c4c78":"shutil.unpack_archive(\"..\/input\/cifar-10\/test.7z\")\nprint('Done!')","3abb0fd1":"test_images = []\n#i = 1\nfor i in range(1, 300001):\n    raw = imageio.imread('.\/test\/' + str(i) + '.png')\n    test_images.append(raw)\n\ntest_images = np.array(test_images)\ntest_images = test_images.astype('float32')\ntest_images = test_images \/ 255.0\nprint('done')","4eca6696":"predictions = model.predict(test_images)\npredictions = le.inverse_transform(np.argmax(predictions, axis=1))\n\nsubmission = pd.DataFrame({\n        'id': range(1, len(predictions) + 1),\n        'label': predictions\n    })\n","7c337535":"'''\nplt.figure()\nplt.imshow(test_images[3])\nplt.grid(False)\nplt.show()\n'''\n","8429d324":"submission.to_csv('submission.csv', index=False)\nprint('Done!')","01305ea0":"# Preparing the testing data","b58e5dbf":"**Using LabelEncoder to assign number values for each label**","0eb2c432":"# Preparing labels","23ea92ad":"# Loading in a few libraries","d4af397b":"**Functions that are neccessary to generate the training model**\n\nI've already trained a model and saved it(takes too long to train it every time).\n\nIf you don't have the model prepared you can still run the notebook, but you will need to wait until the model is done training.","9821d575":"Splits the training images and labels into X and y values.\n\nPrepares the data for the training.","9fd7d459":"**Making sure 7zip has been added**","749d2746":"# Check if have model\n\n**If you have the model already ready(verify the file path) you can just move on to testing**\n\n**If you don't have any model ready then you will need to wait until the model finishes training**","e9792bec":"**data_prep()**","5dc40adb":"**display_learning_process()**","98469265":"**data_download()**","80d5228c":"Setting the structure of the model.\n\nTraining the model.","01b8ffa9":"# Functions","6e312296":"**create_train_model()**","bdd59a06":"Function to unzip and add all training images to train_images array"}}