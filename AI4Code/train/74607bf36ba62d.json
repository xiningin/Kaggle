{"cell_type":{"34d85e4a":"code","c65164fc":"code","1e92b964":"code","b27c078e":"code","47eeb722":"code","a2632e02":"code","95382dd3":"code","136d973c":"code","d8c5e23f":"code","ed11f777":"code","003c5894":"code","87175172":"code","f55b9d85":"code","ca8a434c":"code","0e9a1ac6":"code","6b45f4cb":"code","6dd31791":"code","a26a6fb2":"code","43b8ab45":"code","36c465ec":"code","f95d7b21":"code","973a59aa":"code","f5865e58":"code","3f6df84d":"markdown"},"source":{"34d85e4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow import keras\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c65164fc":"from sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator","1e92b964":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain.head()\nprint()\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","b27c078e":"from keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPool2D\nfrom keras.layers import Flatten\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import Dense,Dropout","47eeb722":"print(train.shape)\nprint(test.shape)\ny_train=train['label']\n#y_train.unique()\ny_train=to_categorical(y_train,10)\nx_train=train.drop('label',axis=1)\nx_test=train.drop('label',axis=1)","a2632e02":"x_train=x_train\/255\nx_test=x_test\/255","95382dd3":"#Reshape\nx_train = x_train.values.reshape(-1,28,28,1)\nx_test = x_test.values.reshape(-1,28,28,1)\n#(-1,28,28,1)   nrows,height,width,channel(for  us its  gray scale)","136d973c":"#splitting data into train and validation\nX_train,X_val,y_train,y_val=train_test_split(x_train,y_train,test_size=0.25,random_state=22)\nprint(f'x_train {X_train.shape}')\nprint(f'x_val {X_val.shape}')\nprint(f'y_train {y_train.shape}')\nprint(f'y_val {y_val.shape}')","d8c5e23f":"model=Sequential()\n#adding first conv layer\nmodel.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))\nmodel.add(MaxPool2D(pool_size = (2, 2)))\n\n#adding 2nd conv layer\nmodel.add(Conv2D(64, kernel_size=(5, 5), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(120,activation='relu'))\nmodel.add(Dense(84,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))","ed11f777":"model.compile(optimizer = 'adam', loss = \"categorical_crossentropy\", metrics = ['accuracy'])","003c5894":"history = model.fit(X_train, y_train, batch_size = 32, epochs = 1, validation_data = (X_val, y_val), verbose = 2)\nhistory","87175172":"pred=model.predict_classes(x_test)\npred","f55b9d85":"X_train.shape[0]\/\/32","ca8a434c":"#Trying with data augumentation\n\ntrain_datagen = ImageDataGenerator(shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   vertical_flip = True)\ntrain_datagen.fit(X_train)","0e9a1ac6":"history = model.fit_generator(train_datagen.flow(X_train,y_train, batch_size=32),\n                              epochs = 50, validation_data = (X_val,y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ 32)","6b45f4cb":"a=pd.DataFrame(model.history.history)\nimport  matplotlib.pyplot as plt\nplt.plot(a['loss'],label='loss')\nplt.plot(a['val_loss'],color='orange',label='val_loss')\nplt.legend()","6dd31791":"plt.plot(a['accuracy'],label='accuracy')\nplt.plot(a['val_accuracy'],label='val_acc')","a26a6fb2":"#we can see that the cal_loss and acc are fluctuating , it may be case of overfitting, we try adding drpout\/batchnormalizatiom\nfrom tensorflow.keras.layers import BatchNormalization\n\n\nmodel=Sequential()\n#adding first conv layer\nmodel.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPool2D(pool_size = (2, 2)))\n\n#adding 2nd conv layer\nmodel.add(Conv2D(16, kernel_size=(5, 5), activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n\n\n\nmodel.add(Flatten())\nmodel.add(Dense(120,activation='relu'))\nmodel.add(Dense(84,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))\n","43b8ab45":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","36c465ec":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)\nmodel.fit(X_train, y_train, batch_size = 64, epochs = 4, validation_data = (X_val, y_val), verbose = 1,callbacks=[early_stop])\n","f95d7b21":"model_loss = pd.DataFrame(model.history.history)\nplt.plot(model_loss['loss'])\nplt.plot(model_loss['val_loss'])","973a59aa":"predictions = model.predict_classes(x_test, verbose=0)\n","f5865e58":"submission=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\n\nsubmission.to_csv(\"FirstCNN\", index=False, header=True)","3f6df84d":"#Noralization"}}