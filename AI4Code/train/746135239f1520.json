{"cell_type":{"ac5c86ca":"code","34099488":"code","1c53e3a8":"markdown","92cb1ea5":"markdown"},"source":{"ac5c86ca":"from ortools.linear_solver import pywraplp\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nNUMBER_DAYS = 100\nNUMBER_FAMILIES = 5000\nMAX_BEST_CHOICE = 5\ndata = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/c-stochastic-product-search-65ns\/submission.csv')\nassigned_days = submission['assigned_day'].values\ncolumns = data.columns[1:11]\nDESIRED = data[columns].values\nCOST_PER_FAMILY        = [0,50,50,100,200,200,300,300,400,500]\nCOST_PER_FAMILY_MEMBER = [0, 0, 9,  9,  9, 18, 18, 36, 36,235]\nN_PEOPLE = data['n_people'].values\n\ndef get_daily_occupancy(assigned_days):\n    daily_occupancy = np.zeros(100, int)\n    for fid, assigned_day in enumerate(assigned_days):\n        daily_occupancy[assigned_day-1] += N_PEOPLE[fid]\n    return daily_occupancy\n\ndef days_plot(assigned_days):\n    daily_occupancy = get_daily_occupancy(assigned_days)\n    best_choices = get_daily_occupancy(DESIRED[:,0])\n    plt.rcParams['figure.figsize'] = [20, 5]\n    plt.xticks(np.arange(1, 101, step=1), rotation=90)\n    plt.axhline(y=125, color='gray', linestyle=':')\n    plt.axhline(y=300, color='gray', linestyle=':')\n    mondays125     = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 == 1 and daily_occupancy[day] == 125])\n    other_mondays  = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 == 1 and daily_occupancy[day] != 125])\n    weekends       = np.array([(day+1, daily_occupancy[day]) for day in range(100) if day % 7 in [2,3,4] or day == 0])\n    not_weekends   = np.array([(day+1, daily_occupancy[day]) for day in range(1, 100) if day % 7 in [0,5,6]])\n    plt.bar(*weekends.transpose()      , color = 'y', label = 'Weekends')\n    plt.bar(*not_weekends.transpose()  , color = 'b', label = 'Thu-Wed-Tue')\n    plt.bar(*other_mondays.transpose() , color = 'm', label = 'Mondays > 125')\n    plt.bar(*mondays125.transpose()    , color = 'g', label = 'Mondays = 125')\n    plt.plot(range(1,101), best_choices, color = 'k', label = 'Best choices')\n    plt.ylim(0, 500)\n    plt.xlim(0, 101)\n    plt.xlabel('Days before Christmas', fontsize=14)\n    plt.ylabel('Occupancy', fontsize=14)\n    plt.legend()\n    plt.show()\n    \ndef cost_function(prediction):\n    N_DAYS = 100\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    days = list(range(N_DAYS,0,-1))\n    tmp = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\n    family_size_dict = tmp[['n_people']].to_dict()['n_people']\n\n    cols = [f'choice_{i}' for i in range(10)]\n    choice_dict = tmp[cols].to_dict()\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = {k:0 for k in days}\n    \n    # Looping over each family; d is the day for each family f\n    for f, d in enumerate(prediction):\n        # Using our lookup dictionaries to make simpler variable names\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # add the family member count to the daily occupancy\n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    for _, v in daily_occupancy.items():\n        if  (v < MIN_OCCUPANCY): #(v > MAX_OCCUPANCY) or\n            penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_costs = [max(0, accounting_cost)]\n    diffs = [0]\n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_costs.append(max(0, (today_count-125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0)))\n        yesterday_count = today_count\n\n    return penalty, sum(accounting_costs), penalty + sum(accounting_costs)\ndays_plot(assigned_days)\nprint(\"Score: \", cost_function(assigned_days))","34099488":"days_for_fix = np.array([44, 51, 58])\ndaily_occupancy = get_daily_occupancy(assigned_days)\nfids = np.where(np.isin(assigned_days, days_for_fix))[0] # Ids of family for move\n\nsolver = pywraplp.Solver('Setup occupation of days', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\nPCOSTM, B = {}, {}\nfor fid in fids:\n    for i in range(MAX_BEST_CHOICE):\n        B[fid, DESIRED[fid][i]-1] = solver.BoolVar(f'b{fid, i}')\n        PCOSTM[fid, DESIRED[fid][i]-1] = COST_PER_FAMILY[i] + N_PEOPLE[fid] * COST_PER_FAMILY_MEMBER[i]\n\nlower_bounds = np.zeros(100)\nupper_bounds = 300. - daily_occupancy\nupper_bounds[np.arange(100)%7 == 1] = 0 # don't move to Mondays\n\n# Daily occupation for special Mondays only 125\nlower_bounds[days_for_fix-1] = 125\nupper_bounds[days_for_fix-1] = 125\n\n\nfor j in range(NUMBER_DAYS):\n    I = solver.IntVar(lower_bounds[j], upper_bounds[j], f'I{j}')\n    solver.Add(solver.Sum([N_PEOPLE[i] * B[i, j] for i in range(NUMBER_FAMILIES) if (i,j) in B]) == I)\n    \nfor i in fids:\n    solver.Add(solver.Sum(B[i, j] for j in range(NUMBER_DAYS) if (i,j) in B) == 1)\n\nsolver.Minimize(solver.Sum(PCOSTM[i, j] * B[i, j] for i, j in B))\nsol = solver.Solve()\n\nstatus = ['OPTIMAL', 'FEASIBLE', 'INFEASIBLE', 'UNBOUNDED', 'ABNORMAL', 'MODEL_INVALID', 'NOT_SOLVED']\nif status[sol] == 'OPTIMAL':\n    for i, j in B:\n        if B[i, j].solution_value() > 0.5:\n            assigned_days[i] = j+1\n            \nprint('Solution: ', status[sol])\nprint(\"Score: \", cost_function(assigned_days))\ndays_plot(assigned_days)\nsubmission['assigned_day'] = assigned_days\nsubmission.to_csv('submission.csv', index=False)","1c53e3a8":"Please check the trend \"Best choices\" and as we know most the families prefer to attending at weekends or the last day before Christmas.\n\nIn the current submission file(for example) as we can see occupation in 65,72,79,86,93 days equal exactly 125 its because for daily occupancy 125 we don't have accounting penalty for prev day.\n\nAnd it's a great trick for minimizing occupation on Monday(\"bad\" day) and maximize on Sunday(good day). \n\nBut we have 2 reasons why we don't use that trick every Monday:\n* Days what closer to Christmas actually better and better and 2nd day before Christmas we totally cant use that trick\n* If we use a simple algorithm with swap families\/days usually we can't get exactly 125 from 200+(for example) and if we slowly changing to 125 we increase accounting penalty almost to infinity.\n\nLets try use that trick for days: 44, 51, 58","92cb1ea5":"> Daily occupation changed and we even improved preference cost, but... our accounting penalty increased?!\n\nYes, and it's a good time to run your algorithm, because after that you must improve score. (I improved 71261 -> 70591)\n\n> Is it the best days for 125?\n\nI'll leave it to you to find it out by yourself.\n\n**Merry Christmas!**"}}