{"cell_type":{"8374c2f5":"code","6cd72b26":"code","c73ad088":"code","7d286956":"code","757a74bc":"code","6c4aaad3":"code","a47cba9f":"code","6bf0b5a2":"code","19637d2e":"code","18d48995":"code","6e9fcad5":"code","930fb76a":"code","cc79e713":"code","e41fcfa1":"code","3b794a36":"code","2f32e3db":"code","38005f35":"code","f1b6b6c4":"code","c2d0c236":"code","07d162d5":"markdown","2aaacc56":"markdown","5604e440":"markdown","a5b12326":"markdown","bf049d3d":"markdown"},"source":{"8374c2f5":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.model_selection import train_test_split","6cd72b26":"train = pd.read_csv('\/kaggle\/input\/iyzico-projesi\/train.csv')\ndropset = ['BASKETREGISTERCARD']\ntrain.drop(dropset,axis=1,inplace=True)\ntrain.head()","c73ad088":"test = pd.read_csv('\/kaggle\/input\/iyzico-projesi\/test.csv')\ndropset = ['BASKETREGISTERCARD','ID']\ntest.drop(dropset,axis=1,inplace=True)\ntest.head()","7d286956":"bank_islem_sayisi = train['CARDBANKID'].value_counts()\nbank_fraud_islem_sayisi = train[train['ISFRAUD']==1]['CARDBANKID'].value_counts()\n\nislemler2 = pd.concat([bank_fraud_islem_sayisi,bank_islem_sayisi],axis=1)\nislemler2.columns = [\"bank_fraud_islem\",\"bank_islem\"]\nislemler2.bank_fraud_islem = islemler2.bank_fraud_islem.fillna(0)\nislemler2['bank_fraud_proba'] = islemler2['bank_fraud_islem'] \/ islemler2['bank_islem']\nislemler2['bank_mean_basket_price'] = train.groupby(['CARDBANKID']).mean()['BASKETPAIDPRICE'].values\nislemler2['bank_new_fraud_proba'] = islemler2['bank_fraud_proba'] * islemler2['bank_mean_basket_price']\nislemler2['CARDBANKID'] = islemler2.index\nislemler2.head()","757a74bc":"channel_islem_sayisi = train['BASKETPAYMENTCHANNEL'].value_counts()\nchannel_fraud_islem_sayisi = train[train['ISFRAUD']==1]['BASKETPAYMENTCHANNEL'].value_counts()\n\nislemler3 = pd.concat([channel_fraud_islem_sayisi,channel_islem_sayisi],axis=1)\nislemler3.columns = [\"channel_fraud_islem\",\"channel_islem\"]\nislemler3.channel_fraud_islem = islemler3.channel_fraud_islem.fillna(0)\nislemler3['channel_fraud_proba'] = islemler3['channel_fraud_islem'] \/ islemler3['channel_islem']\nislemler3['channel_mean_basket_price'] = train.groupby(['BASKETPAYMENTCHANNEL']).mean()['BASKETPAIDPRICE'].values\nislemler3['channel_new_fraud_proba'] = islemler3['channel_fraud_proba'] * islemler3['channel_mean_basket_price']\nislemler3['BASKETPAYMENTCHANNEL'] = islemler3.index\nislemler3.head()","6c4aaad3":"sourcetype_islem_sayisi = train['BASKETPAYMENTSOURCETYPE'].value_counts()\nsourcetype_fraud_islem_sayisi = train[train['ISFRAUD']==1]['BASKETPAYMENTSOURCETYPE'].value_counts()\n\nislemler4 = pd.concat([sourcetype_fraud_islem_sayisi,sourcetype_islem_sayisi],axis=1)\nislemler4.columns = [\"sourcetype_fraud_islem\",\"sourcetype_islem\"]\nislemler4.sourcetype_fraud_islem = islemler4.sourcetype_fraud_islem.fillna(0)\nislemler4['sourcetype_fraud_proba'] = islemler4['sourcetype_fraud_islem'] \/ islemler4['sourcetype_islem']\nislemler4['sourcetype_mean_basket_price'] = train.groupby(['BASKETPAYMENTSOURCETYPE']).mean()['BASKETPAIDPRICE'].values\nislemler4['sourcetype_new_fraud_proba'] = islemler4['sourcetype_fraud_proba'] * islemler4['sourcetype_mean_basket_price']\nislemler4['BASKETPAYMENTSOURCETYPE'] = islemler4.index\nislemler4.head()","a47cba9f":"\ntrain = pd.merge(train,islemler2,on=\"CARDBANKID\",how=\"left\")\ntest = pd.merge(test,islemler2,on=\"CARDBANKID\",how=\"left\")\n\ntrain = pd.merge(train,islemler3,on=\"BASKETPAYMENTCHANNEL\",how=\"left\")\ntest = pd.merge(test,islemler3,on=\"BASKETPAYMENTCHANNEL\",how=\"left\")\n\ntrain = pd.merge(train,islemler4,on=\"BASKETPAYMENTSOURCETYPE\",how=\"left\")\ntest = pd.merge(test,islemler4,on=\"BASKETPAYMENTSOURCETYPE\",how=\"left\")\n\ntrain.head()","6bf0b5a2":"# Kaynak: https:\/\/www.veribilimiokulu.com\/uctan-uca-makine-ogrenmesi-ornegi-titanik-gemi-kazasi-uygulamasi\/\n\ncolumns=['BASKETPAIDPRICE','BASKETINSTALLMENT','BASKETPAYMENTSOURCETYPE']\n\nobj_cols=['BASKETHASVIRTUALITEM','CARDTYPE','CARDASSOCIATION','CARDBANKID','BASKETPAYMENTCHANNEL','BASKETINSTALLMENT', 'BASKETPAYMENTSOURCETYPE' ,'BASKETISTHREEDS','MERCHANT_ID']\n\nfor col in columns:\n    for feat in obj_cols:\n        train[f'{col}_mean_group_{feat}']=train[col]\/train.groupby(feat)[col].transform('mean')\n        train[f'{col}_max_group_{feat}']=train[col]\/train.groupby(feat)[col].transform('max')\n        train[f'{col}_min_group_{feat}']=train[col]\/train.groupby(feat)[col].transform('min')\n        train[f'{col}_count_group_{feat}']=train[col]\/train.groupby(feat)[col].transform('count')\n\nfor col in columns:\n    for feat in obj_cols:\n        test[f'{col}_mean_group_{feat}']=test[col]\/test.groupby(feat)[col].transform('mean')\n        test[f'{col}_max_group_{feat}']=test[col]\/test.groupby(feat)[col].transform('max')\n        test[f'{col}_min_group_{feat}']=test[col]\/test.groupby(feat)[col].transform('min')\n        test[f'{col}_count_group_{feat}']=test[col]\/test.groupby(feat)[col].transform('count')\n     ","19637d2e":"train.drop('sourcetype_islem',axis=1,inplace=True)\ntest.drop('sourcetype_islem',axis=1,inplace=True)","18d48995":"train = train.drop_duplicates()","6e9fcad5":"yck = train.groupby(['EMAIL','BASKETPAIDPRICE','CARDBANKID'])['CARDASSOCIATION'].count()\nyck = pd.DataFrame(yck)\nyck.reset_index(inplace=True)\nyck.columns  = ['EMAIL','BASKETPAIDPRICE','CARDBANKID','NEW_UNIQ']\nyck['NEW_UNIQ'] = (yck['NEW_UNIQ'] > 1).map({True:1, False:0})\ntrain = pd.merge(train, yck, on=['EMAIL','BASKETPAIDPRICE','CARDBANKID'],how='left')\n\nypk = train.groupby(['EMAIL','MERCHANT_ID','BASKETPAIDPRICE'])['CARDASSOCIATION'].count()\nypk = pd.DataFrame(ypk)\nypk.reset_index(inplace=True)\nypk.columns  = ['EMAIL','MERCHANT_ID','BASKETPAIDPRICE','NEW_UNIQ2']\nypk['NEW_UNIQ2'] = (ypk['NEW_UNIQ2'] > 1).map({True:1, False:0})\ntrain = pd.merge(train, ypk, on=['EMAIL','MERCHANT_ID','BASKETPAIDPRICE'],how='left')","930fb76a":"yck = test.groupby(['EMAIL','BASKETPAIDPRICE','CARDBANKID'])['CARDASSOCIATION'].count()\nyck = pd.DataFrame(yck)\nyck.reset_index(inplace=True)\nyck.columns  = ['EMAIL','BASKETPAIDPRICE','CARDBANKID','NEW_UNIQ']\nyck['NEW_UNIQ'] = (yck['NEW_UNIQ'] > 1).map({True:1, False:0})\ntest = pd.merge(test, yck, on=['EMAIL','BASKETPAIDPRICE','CARDBANKID'],how='left')\n\nypk = test.groupby(['EMAIL','MERCHANT_ID','BASKETPAIDPRICE'])['CARDASSOCIATION'].count()\nypk = pd.DataFrame(ypk)\nypk.reset_index(inplace=True)\nypk.columns  = ['EMAIL','MERCHANT_ID','BASKETPAIDPRICE','NEW_UNIQ2']\nypk['NEW_UNIQ2'] = (ypk['NEW_UNIQ2'] > 1).map({True:1, False:0})\ntest = pd.merge(test, ypk, on=['EMAIL','MERCHANT_ID','BASKETPAIDPRICE'],how='left')","cc79e713":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler((0,1))\ntrain['BASKETPAIDPRICE'] = scaler.fit_transform(train['BASKETPAIDPRICE'].values.reshape(-1,1))","e41fcfa1":"#X = train.iloc[:, train.columns != 'ISFRAUD']\n#y = train.ISFRAUD\n\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 25)","3b794a36":"#from sklearn.ensemble import IsolationForest\n#from sklearn.metrics import make_scorer, f1_score, fbeta_score\n#from sklearn import model_selection\n#from sklearn.datasets import make_classification\n\n#clf = IsolationForest(random_state=47, behaviour='new')\n\n#param_grid = {'n_estimators': list(range(400, 500, 50)), \n#              'max_samples': list(range(400, 500, 50)), \n#              'contamination': [0.3, 0.4, 0.5], \n#              'max_features': [5,15], \n#              'n_jobs': [5, 10, 20, 30]}\n\n\n\n#f1sc = make_scorer(fbeta_score, beta=1, average='micro')\n\n#grid_dt_estimator = model_selection.GridSearchCV(clf, \n#                                                 param_grid,\n#                                                 scoring=f1sc, \n#                                                 refit=True,\n#                                                 cv=2, \n#                                                 return_train_score=True,\n#                                                verbose=3)\n#grid_dt_estimator.fit(X_train, y_train)","2f32e3db":"data_normal = train[train.ISFRAUD == 0].drop('ISFRAUD',axis=1)\ndata_fraud = train[train.ISFRAUD == 1].drop('ISFRAUD',axis=1)\n\nnormal_train, normal_test = train_test_split(data_normal, test_size=0.30, random_state=42)","38005f35":"model = IsolationForest(contamination=0.275, max_features=5, max_samples=350, n_estimators=375, n_jobs=15)\nmodel.fit(normal_train)\ninlier_pred_test = model.predict(normal_test)\noutlier_pred = model.predict(data_fraud)\n\nprint(\"Accuracy in Detecting Legit Cases:\", list(inlier_pred_test).count(1)\/inlier_pred_test.shape[0])\nprint(\"Accuracy in Detecting Fraud Cases:\", list(outlier_pred).count(-1)\/outlier_pred.shape[0])","f1b6b6c4":"y_pred = model.predict(test)\nsubmission = test.copy()\n\nsubmission['ID'] = submission.index\nsubmission['ISFRAUD'] = y_pred\nsubmission = submission[['ID','ISFRAUD']]\nsubmission.ISFRAUD = submission.ISFRAUD.map({-1:0, 1:1})\nsubmission.ISFRAUD.value_counts()","c2d0c236":"submission.to_csv('isolation_final.csv',index=False)","07d162d5":"### Not: Bu k\u0131s\u0131mda, isolation forest i\u00e7in hyperparametreleri buluyoruz ****ancak a\u015f\u0131r\u0131 uzun s\u00fcrd\u00fc\u011f\u00fc i\u00e7in \u00e7al\u0131\u015ft\u0131rm\u0131yorum. ","2aaacc56":"# Preprocessing","5604e440":"Selamlar, \n\n\u00d6ncelikle b\u00fct\u00fcn submission atan arkada\u015flar\u0131n ellerine sa\u011fl\u0131k. Biz bu y\u00f6ntemden \u00f6nce lgbm, xgboost, catboost, ngboost gibi bir\u00e7ok y\u00f6ntem denedik ama bir t\u00fcrl\u00fc skorlar\u0131 artt\u0131ramad\u0131k. En son Uzay \u00c7etin hocam\u0131z\u0131n \u00f6nerisiyle, olaya unsupervised y\u00f6ntemlerden bakmay\u0131 denemeye karar verdik. IsolationForest'in yan\u0131nda DBScan gibi birka\u00e7 tane daha unsupervised y\u00f6ntem denedik ama en iyi sonucu veren bu y\u00f6ntem oldu. \n\nUmar\u0131m di\u011fer arkada\u015flarda \u00e7\u00f6z\u00fcm y\u00f6ntemlerini payla\u015f\u0131r. \u00d6zellikle ilk 3'\u00fc a\u015f\u0131r\u0131 merak ediyoruz do\u011frusu :D\n\nTekrardan herkese te\u015fekk\u00fcrler. Di\u011fer yar\u0131\u015fmada \u015fimdiden ba\u015far\u0131lar.\n","a5b12326":"# IsolationForest Model","bf049d3d":"# Feature Engineering"}}