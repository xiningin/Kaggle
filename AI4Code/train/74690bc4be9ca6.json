{"cell_type":{"11ef5e7a":"code","bc674a4c":"code","7dd1e532":"code","67208138":"code","f8e44955":"code","cf4eebfc":"code","7fa3ec29":"code","2d13619f":"code","3754b3ee":"markdown","189c090d":"markdown","61b38313":"markdown","34af3aa7":"markdown","686f4d19":"markdown","3fcf5b39":"markdown"},"source":{"11ef5e7a":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import RobustScaler\nimport joblib\nimport csv\nimport datetime\nfrom sklearn.svm import SVR\nimport sklearn.svm as svm\nfrom sklearn.linear_model import LinearRegression","bc674a4c":"fields = ['MM\/DD\/YYYY','YEAR','MONTH','DAY','TMAX','TMIN']\ndf = pd.read_csv(\"..\/input\/new-york-city-daily-temperature-18692021\/nyc_temp_1869_2021.csv\", usecols=fields)\ndf.dropna()\n\ndf['TMAX'] \/= 10\ndf['TMAX'] = (df['TMAX'] * 1.8) + 32\ndf['TMIN'] \/= 10\ndf['TMIN'] = (df['TMIN'] * 1.8) + 32\n\ndf['MEAN'] = df[['TMAX', 'TMIN']].astype(float).mean(axis=1)\ndf['MM\/DD\/YYYY'] = pd.to_datetime(df['MM\/DD\/YYYY'])\n\ndf.tail()","7dd1e532":"df.describe()","67208138":"df.info()","f8e44955":"data1 = df[(df['MM\/DD\/YYYY'] > '1869-01-01') & (df['MM\/DD\/YYYY'] < '2019-01-01')]\ndata2 = df[(df['MM\/DD\/YYYY'] > '2019-01-01') & (df['MM\/DD\/YYYY'] < '2021-05-04')]\n\ndata1 = data1.rename(columns={\"MM\/DD\/YYYY\":\"DATE\"})\ndata2 = data2.rename(columns={\"MM\/DD\/YYYY\":\"DATE\"})\n\ndata1['DATE2']=pd.DatetimeIndex(data1.DATE) + pd.DateOffset(1)\ndata2['DATE2']=pd.DatetimeIndex(data2.DATE) + pd.DateOffset(1)","cf4eebfc":"x = data1.drop('YEAR', axis = 1)\nx = x.drop('MONTH', axis = 1)\nx = x.drop('DAY', axis = 1)\nx = x.drop('TMAX', axis = 1)\nx = x.drop('TMIN', axis = 1)\ny = x.MEAN\nX = x.drop('MEAN', axis= 1)\n\nx2 = data2.drop('YEAR', axis = 1)\nx2 = x2.drop('MONTH', axis = 1)\nx2 = x2.drop('DAY', axis = 1)\nx2 = x2.drop('TMAX', axis = 1)\nx2 = x2.drop('TMIN', axis = 1)\ny2 = x2.MEAN\nX2 = x2.drop('MEAN', axis= 1)\n\nnew_dates = []\ncounter = 0\nX = X.append(X2)\ndates = X.DATE\n\nfor day in dates:\n    day = datetime.datetime.strptime(str(day), \"%Y-%m-%d %H:%M:%S\")\n    day2 = (day - datetime.datetime(1970,1,1)).total_seconds()\n    new_dates.append(day2)\n    \nX.DATE = new_dates\nnew_dates= []\nfor day in X.DATE2:\n    day = datetime.datetime.strptime(str(day), \"%Y-%m-%d %H:%M:%S\")\n    day2 = (day - datetime.datetime(1970,1,1)).total_seconds()\n    new_dates.append(day2)\nX.DATE2 = new_dates\ny = y.append(y2)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size=0.5, \n                                                    random_state=123, \n                                                    )","7fa3ec29":"scaler = preprocessing.StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\n\npipeline = make_pipeline(preprocessing.StandardScaler(), \n                     RandomForestRegressor(n_estimators=100))\n\nhyperparameters = { 'randomforestregressor__max_features' : ['auto', 'sqrt', 'log2'],\n              'randomforestregressor__max_depth': [None, 5, 3, 1], }\n\nclf = LinearRegression()\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\n\njoblib.dump(clf, 'weather_predictor.pkl')","2d13619f":"clf = joblib.load('weather_predictor.pkl')\ntoday = datetime.datetime(2021, 5, 6)\ntomorrow = datetime.datetime(2021, 5, 7)\n\nday = datetime.datetime.strptime(str(today), \"%Y-%m-%d %H:%M:%S\") ## date_list[0]\ndate = (day - datetime.datetime(1970,1,1)).total_seconds()\nday_x = datetime.datetime.strptime(str(tomorrow), \"%Y-%m-%d %H:%M:%S\") ## date_list_2[0]\ndate_x = (day_x - datetime.datetime(1970,1,1)).total_seconds()\n\nX = [[date, date_x]]\npred = clf.predict(X)[0]\nprint('predicted temperature for {}: '.format(str(tomorrow.strftime(\"%Y\/%m\/%d\"))), pred)","3754b3ee":"### Predict Tomorrow's Weather\nAdd in dates to predict tomorrow's weather!","189c090d":"### Split data into test\/training sets\nSplitting time series data sets along the sequences. (Could use TimeSeriesSplit as well)","61b38313":"### Importing Libraries and Data\nImporting libraries and cleaning the data.","34af3aa7":"### Introduction\nA beginner notebook that explores methods to predict temperatures using machine learning. (work in progress :))","686f4d19":"### Train Data\nPreparing matrices for the model.","3fcf5b39":"Preprosses training set using random forest regressor, declaring hyperparameters for tuning, then run linear regression model for prediction."}}