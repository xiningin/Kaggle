{"cell_type":{"407711f8":"code","68295606":"code","9108533c":"code","be234f90":"code","9b5bea1b":"code","7af64ab6":"code","4a63afe0":"code","c2b41779":"code","77792551":"code","9b839ec2":"code","ebebb77d":"code","361db8f4":"code","0f084aa8":"code","15163bbf":"code","d85f396a":"code","18b84e56":"code","72e95b4f":"code","e11a0afb":"markdown","98258345":"markdown","632bdba8":"markdown","e45c6c7c":"markdown","3d290a21":"markdown","34ae5903":"markdown","c89cebd3":"markdown"},"source":{"407711f8":"!pip install -U --no-build-isolation --no-deps ..\/input\/transformers-master\/ -qq","68295606":"import os\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\nimport gc\ngc.enable()\nimport math\nimport json\nimport time\nimport random\nimport multiprocessing\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm, trange\nfrom sklearn import model_selection\nfrom string import punctuation\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.nn import Parameter\nimport torch.optim as optim\nfrom torch.utils.data import (\n    Dataset, DataLoader,\n    SequentialSampler, RandomSampler\n)\nfrom torch.utils.data.distributed import DistributedSampler\n\ntry:\n    from apex import amp\n    APEX_INSTALLED = True\nexcept ImportError:\n    APEX_INSTALLED = False\n\nimport transformers\nfrom transformers import (\n    WEIGHTS_NAME,\n    AdamW,\n    AutoConfig,\n    AutoModel,\n    AutoTokenizer,\n    get_cosine_schedule_with_warmup,\n    get_linear_schedule_with_warmup,\n    logging,\n    MODEL_FOR_QUESTION_ANSWERING_MAPPING,\n)\nlogging.set_verbosity_warning()\nlogging.set_verbosity_error()\n\n# Now Create Function\n\ndef fix_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\ndef optimal_num_of_loader_workers():\n    num_cpus = multiprocessing.cpu_count()\n    num_gpus = torch.cuda.device_count()\n    optimal_value = min(num_cpus, num_gpus*4) if num_gpus else num_cpus - 1\n    return optimal_value\n\nprint(f\"Apex AMP Installed :: {APEX_INSTALLED}\")\nMODEL_CONFIG_CLASSES = list(MODEL_FOR_QUESTION_ANSWERING_MAPPING.keys())\nMODEL_TYPES = tuple(conf.model_type for conf in MODEL_CONFIG_CLASSES)","9108533c":"class Configration:\n    # model\n    model_type = 'xlm_roberta'\n    MPNET_name_or_path=\"..\/input\/chaii-mpnet\/paraphrase-multilingual-mpnet-base-v2\/paraphrase-multilingual-mpnet-base-v2\"\n    MPNET_config_name=\"..\/input\/chaii-mpnet\/paraphrase-multilingual-mpnet-base-v2\/paraphrase-multilingual-mpnet-base-v2\/config.json\"\n    BERTT_name_or_path=\"..\/input\/chaii-berts\/bert-multi-cased-finedtuned-xquad-tydiqa-goldp\/bert-multi-cased-finedtuned-xquad-tydiqa-goldp\"\n    BERTT_config_name=\"..\/input\/chaii-berts\/bert-multi-cased-finedtuned-xquad-tydiqa-goldp\/bert-multi-cased-finedtuned-xquad-tydiqa-goldp\/config.json\"\n    BERTCS_name_or_path=\"..\/input\/chaii-berts\/bert-base-multilingual-cased-finetuned-squad\/bert-base-multilingual-cased-finetuned-squad\"\n    BERTCS_config_name=\"..\/input\/chaii-berts\/bert-base-multilingual-cased-finetuned-squad\/bert-base-multilingual-cased-finetuned-squad\/config.json\"\n    BERTUX_name_or_path=\"..\/input\/chaii-berts\/bert-multi-uncased-finetuned-xquadv1\/bert-multi-uncased-finetuned-xquadv1\"\n    BERTUX_config_name=\"..\/input\/chaii-berts\/bert-multi-uncased-finetuned-xquadv1\/bert-multi-uncased-finetuned-xquadv1\/config.json\"\n    BERTCX_name_or_path=\"..\/input\/chaii-berts\/bert-multi-cased-finetuned-xquadv1\/bert-multi-cased-finetuned-xquadv1\"\n    BERTCX_config_name=\"..\/input\/chaii-berts\/bert-multi-cased-finetuned-xquadv1\/bert-multi-cased-finetuned-xquadv1\/config.json\"\n    INFOXLM_name_or_path=\"..\/input\/chaii-infoxlm\/infoxlm-large\/infoxlm-large\"\n    INFOXLM_config_name=\"..\/input\/chaii-infoxlm\/infoxlm-large\/infoxlm-large\/config.json\"\n    MINILM_name_or_path=\"..\/input\/chaii-minilm-cos\/multi-qa-MiniLM-L6-cos-v1\/multi-qa-MiniLM-L6-cos-v1\"\n    MINILM_config_name=\"..\/input\/chaii-minilm-cos\/multi-qa-MiniLM-L6-cos-v1\/multi-qa-MiniLM-L6-cos-v1\/config.json\"\n    REMBERT_name_or_path=\"..\/input\/chaii-rembert\/rembert_model\/rembert\"\n    REMBERT_config_name=\"..\/input\/chaii-rembert\/rembert_model\/rembert\/config.json\"\n    fp16 = True if APEX_INSTALLED else False\n    fp16_opt_level = \"O1\"\n    gradient_accumulation_steps = 2\n\n    # tokenizer\n    MPNET_tokenizer_name=\"..\/input\/chaii-mpnet\/paraphrase-multilingual-mpnet-base-v2\/paraphrase-multilingual-mpnet-base-v2\"\n    MINILM_tokenizer_name=\"..\/input\/chaii-minilm-cos\/multi-qa-MiniLM-L6-cos-v1\/multi-qa-MiniLM-L6-cos-v1\"\n    INFOXLM_tokenizer_name=\"..\/input\/chaii-infoxlm\/infoxlm-large\/infoxlm-large\"\n    BERTT_tokenizer_name=\"..\/input\/chaii-berts\/bert-multi-cased-finedtuned-xquad-tydiqa-goldp\/bert-multi-cased-finedtuned-xquad-tydiqa-goldp\"\n    BERTCS_tokenizer_name=\"..\/input\/chaii-berts\/bert-base-multilingual-cased-finetuned-squad\/bert-base-multilingual-cased-finetuned-squad\"\n    BERTUX_tokenizer_name=\"..\/input\/chaii-berts\/bert-multi-uncased-finetuned-xquadv1\/bert-multi-uncased-finetuned-xquadv1\"\n    REMBERT_tokenizer_name=\"..\/input\/chaii-rembert\/rembert_model\/rembert\"\n    BERTCX_tokenizer_name=\"..\/input\/chaii-berts\/bert-multi-cased-finetuned-xquadv1\/bert-multi-cased-finetuned-xquadv1\"\n    max_seq_length = 400\n    doc_stride = 135\n\n    # train\n    epochs = 1\n    train_batch_size = 4\n    eval_batch_size = 128\n\n    # optimzer\n    optimizer_type = 'AdamW'\n    learning_rate = 1e-5\n    weight_decay = 1e-2\n    epsilon = 1e-8\n    max_grad_norm = 1.0\n\n    # scheduler\n    decay_name = 'linear-warmup'\n    warmup_ratio = 0.1\n\n    # logging\n    logging_steps = 10\n\n    # evaluate\n    output_dir = 'output'\n    seed = 2021","be234f90":"# Dataset_Retriever class\nclass Dataset_Retriever(Dataset):\n    def __init__(self, features, mode='train'):\n        super(Dataset_Retriever, self).__init__()\n        self.features = features\n        self.mode = mode\n        \n    def __len__(self):\n        return len(self.features)\n    \n    def __getitem__(self, item):   \n        feature = self.features[item]\n        if self.mode == 'train':\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':torch.tensor(feature['offset_mapping'], dtype=torch.long),\n                'start_position':torch.tensor(feature['start_position'], dtype=torch.long),\n                'end_position':torch.tensor(feature['end_position'], dtype=torch.long)\n            }\n        else:\n            return {\n                'input_ids':torch.tensor(feature['input_ids'], dtype=torch.long),\n                'attention_mask':torch.tensor(feature['attention_mask'], dtype=torch.long),\n                'offset_mapping':feature['offset_mapping'],\n                'sequence_ids':feature['sequence_ids'],\n                'id':feature['example_id'],\n                'context': feature['context'],\n                'question': feature['question']\n            }","9b5bea1b":"class Model(nn.Module):\n    def __init__(self, modelname_or_path, config):\n        super(Model, self).__init__()\n        self.config = config\n        self.xlm_roberta = AutoModel.from_config(config=config)\n        self.qa_outputs = nn.Linear(config.hidden_size, 2)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        self._init_weights(self.qa_outputs)\n        \n    def _init_weights(self, module):\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n\n    def forward(\n        self, \n        input_ids, \n        attention_mask=None, \n    ):\n        outputs = self.xlm_roberta(\n            input_ids,\n            attention_mask=attention_mask,\n        )\n\n        sequence_output = outputs[0]\n        pooled_output = outputs[1]\n        \n        # sequence_output = self.dropout(sequence_output)\n        qa_logits = self.qa_outputs(sequence_output)\n        \n        start_logits, end_logits = qa_logits.split(1, dim=-1)\n        start_logits = start_logits.squeeze(-1)\n        end_logits = end_logits.squeeze(-1)\n    \n        return start_logits, end_logits","7af64ab6":"def Make_Model(args):\n    config = AutoConfig.from_pretrained(args.REMBERT_config_name)\n    tokenizer = AutoTokenizer.from_pretrained(args.REMBERT_tokenizer_name)\n    model = Model(args.REMBERT_name_or_path, config=config)\n    return config, tokenizer, model","4a63afe0":"def Prepare_Test_Features(args, example, tokenizer):\n    example[\"question\"] = example[\"question\"].lstrip()\n    \n    tokenized_example = tokenizer(\n        example[\"question\"],\n        example[\"context\"],\n        truncation=\"only_second\",\n        max_length=args.max_seq_length,\n        stride=args.doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    features = []\n    for i in range(len(tokenized_example[\"input_ids\"])):\n        feature = {}\n        feature[\"example_id\"] = example['id']\n        feature['context'] = example['context']\n        feature['question'] = example['question']\n        feature['input_ids'] = tokenized_example['input_ids'][i]\n        feature['attention_mask'] = tokenized_example['attention_mask'][i]\n        feature['offset_mapping'] = tokenized_example['offset_mapping'][i]\n        feature['sequence_ids'] = [0 if i is None else i for i in tokenized_example.sequence_ids(i)]\n        features.append(feature)\n    return features","c2b41779":"import collections","77792551":"def Postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n    all_start_logits, all_end_logits = raw_predictions\n    \n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    predictions = collections.OrderedDict()\n\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    for example_index, example in examples.iterrows():\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None\n        valid_answers = []\n        \n        context = example[\"context\"]\n        for feature_index in feature_indices:\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n\n            sequence_ids = features[feature_index][\"sequence_ids\"]\n            context_index = 1\n\n            features[feature_index][\"offset_mapping\"] = [\n                (o if sequence_ids[k] == context_index else None)\n                for k, o in enumerate(features[feature_index][\"offset_mapping\"])\n            ]\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        \n        predictions[example[\"id\"]] = best_answer[\"text\"]\n        \n        \n    return predictions","9b839ec2":"test_df = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv')","ebebb77d":"test_df['context'] = test_df['context'].apply(lambda x: ' '.join(x.split()))\ntest_df['question'] = test_df['question'].apply(lambda x: ' '.join(x.split()))","361db8f4":"\ntokenizer = AutoTokenizer.from_pretrained(Configration().REMBERT_tokenizer_name)\n\ntest_features = []\nfor i, row in test_df.iterrows():\n    \n    # Now Calling Function and Calling Class\n    \n    test_features += Prepare_Test_Features(Configration(), row, tokenizer)\n\n# Now Calling Classes\n\nargs = Configration()\ntest_dataset = Dataset_Retriever(test_features, mode='test')\ntest_dataloader = DataLoader(\n    test_dataset,\n    batch_size=args.eval_batch_size, \n    sampler=SequentialSampler(test_dataset),\n    num_workers=optimal_num_of_loader_workers(),\n    pin_memory=True, \n    drop_last=False\n)","0f084aa8":"base_model = '..\/input\/chaii-rembert\/REMBERT\/output\/'","15163bbf":"def Get_Predictions(checkpoint_path):\n    \n    # Calling Function Make_Model and Class Configration\n    \n    config, tokenizer, model = Make_Model(Configration())\n    model.cuda();\n    model.load_state_dict(\n        torch.load(base_model +  checkpoint_path)\n    );\n    \n    start_logits = []\n    end_logits = []\n    for batch in test_dataloader:\n        with torch.no_grad():\n            outputs_start, outputs_end = model(batch['input_ids'].cuda(), batch['attention_mask'].cuda())\n            start_logits.append(outputs_start.cpu().numpy().tolist())\n            end_logits.append(outputs_end.cpu().numpy().tolist())\n            del outputs_start, outputs_end\n    del model, tokenizer, config\n    gc.collect()\n    return np.vstack(start_logits), np.vstack(end_logits)","d85f396a":"start_logits1, end_logits1 = Get_Predictions('checkpoint-fold-0\/pytorch_model.bin')\nstart_logits2, end_logits2 = Get_Predictions('checkpoint-fold-1\/pytorch_model.bin')\nstart_logits3, end_logits3 = Get_Predictions('checkpoint-fold-2\/pytorch_model.bin')\nstart_logits4, end_logits4 = Get_Predictions('checkpoint-fold-3\/pytorch_model.bin')\nstart_logits5, end_logits5 = Get_Predictions('checkpoint-fold-4\/pytorch_model.bin')\n\n\n\nstart_logits = (start_logits1 + start_logits2 + start_logits3 + start_logits4+ start_logits5)\/5\nend_logits = (end_logits1 + end_logits2 + end_logits3 + end_logits4 + end_logits5 )\/5\n\n\n# Now Calling Function \n\nfin_preds = Postprocess_qa_predictions(test_df, test_features, (start_logits, end_logits))\n\nsubmission = []\nfor p1, p2 in fin_preds.items():\n    p2 = \" \".join(p2.split())\n    p2 = p2.strip(punctuation)\n    submission.append((p1, p2))\n    \nsample = pd.DataFrame(submission, columns=[\"id\", \"PredictionString\"])\n\ntest_data =pd.merge(left=test_df,right=sample,on='id')","18b84e56":"bad_starts = [\".\", \",\", \"(\", \")\", \"-\", \"\u2013\",  \",\", \";\"]\nbad_endings = [\"...\", \"-\", \"(\", \")\", \"\u2013\", \",\", \";\"]\n\ntamil_ad = \"\u0b95\u0bbf.\u0baa\u0bbf\"\ntamil_bc = \"\u0b95\u0bbf.\u0bae\u0bc1\"\ntamil_km = \"\u0b95\u0bbf.\u0bae\u0bc0\"\nhindi_ad = \"\u0908\"\nhindi_bc = \"\u0908.\u092a\u0942\"\n\n\ncleaned_preds = []\nfor pred, context in test_data[[\"PredictionString\", \"context\"]].to_numpy():\n    if pred == \"\":\n        cleaned_preds.append(pred)\n        continue\n    while any([pred.startswith(y) for y in bad_starts]):\n        pred = pred[1:]\n    while any([pred.endswith(y) for y in bad_endings]):\n        if pred.endswith(\"...\"):\n            pred = pred[:-3]\n        else:\n            pred = pred[:-1]\n    if pred.endswith(\"...\"):\n            pred = pred[:-3]\n    \n    if any([pred.endswith(tamil_ad), pred.endswith(tamil_bc), pred.endswith(tamil_km), pred.endswith(hindi_ad), pred.endswith(hindi_bc)]) and pred+\".\" in context:\n        pred = pred+\".\"\n        \n    cleaned_preds.append(pred)\n\ntest_data[\"PredictionString\"] = cleaned_preds\ntest_data[['id', 'PredictionString']].to_csv('submission.csv', index=False)","72e95b4f":"test_data.head()","e11a0afb":"# Now read test dataset","98258345":"# Now Creating Model building class","632bdba8":"# Now Create Get Prediction Function for helping the model ","e45c6c7c":"# Now import collections lib and create function","3d290a21":"# Now Create Custom CLass","34ae5903":"# Now Calling Get Predictions Function","c89cebd3":"# This making model function helping AutoConfig and AutoTokenizer the data"}}