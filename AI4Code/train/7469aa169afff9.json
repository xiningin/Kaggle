{"cell_type":{"d16cd27c":"code","6cec5359":"code","5a0cb94a":"code","7fc10e9c":"code","7c0b9379":"code","45318a0c":"code","ee347c36":"code","9ec7d88f":"code","2c72e239":"code","b893bbb9":"code","5003cdcf":"code","8decf304":"code","b8356dec":"code","a283d174":"code","18429960":"code","313e7b5b":"code","a80eedbf":"markdown","edb68046":"markdown","ab8025f4":"markdown","1fb25450":"markdown","462363aa":"markdown","cfd89e4f":"markdown","dbb32758":"markdown","bf06e186":"markdown","a2779ff5":"markdown","bf67e84e":"markdown","152d6157":"markdown","b663db5c":"markdown","337c1cd0":"markdown","2bdd170e":"markdown","996486c6":"markdown","aca58c0a":"markdown","8af55944":"markdown"},"source":{"d16cd27c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6cec5359":"data=pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\nprint(data.info())","5a0cb94a":"data.head()","7fc10e9c":"import seaborn as sns\ndata_corr=data.corr()\nplt.figure(figsize=(6,6))\nsns.heatmap(data_corr,annot=True)\nplt.show()","7c0b9379":"len(data[data.Outcome==1])\nsns.barplot(x=['Negative','Positive'],y=data.Outcome.value_counts(),palette=\"rocket\")","45318a0c":"plt.figure(figsize=(7,4))\nax=sns.boxplot(x=data.Outcome, y=data.Pregnancies, data=data,palette=\"rocket\")\nplt.show()","ee347c36":"plt.figure(figsize=(7,4))\nax=sns.boxplot(x=data.Outcome, y=data.Age, data=data,palette=\"rocket\")\nplt.show()","9ec7d88f":"plt.figure(figsize=(7,4))\nax=sns.boxplot(x=data.Outcome, y=data.BMI, data=data,palette=\"rocket\")\nplt.show()","2c72e239":"plt.figure(figsize=(7,4))\nax=sns.boxplot(x=data.Outcome, y=data.Glucose, data=data,palette=\"rocket\")\nplt.show()","b893bbb9":"x=data.iloc[:,0:8].values\ny=data.iloc[:,8].values","5003cdcf":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)","8decf304":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()\nx_train_scl=ss.fit_transform(x_train)\nx_test_scl=ss.fit_transform(x_test)","b8356dec":"from sklearn.linear_model import LogisticRegression\nlog_reg=LogisticRegression()\nlog_reg.fit(x_train_scl,y_train)\ny_pred=log_reg.predict(x_test_scl)","a283d174":"from sklearn.metrics import accuracy_score, f1_score,confusion_matrix\naccuracy_lr= accuracy_score(y_test,y_pred)\nf1_score_lr=f1_score(y_test,y_pred)\ncf=confusion_matrix(y_test,y_pred)\nplt.figure(figsize=(3,3))\nsns.heatmap(cf,annot=True)\nplt.plot()\nprint(\"\\nAccuracy Score: %{:.2f} \\nF1 Score: %{:.2f}\\n\".format(accuracy_lr*100,f1_score_lr*100))","18429960":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow import keras\n\nclassifier=Sequential()\nclassifier.add(Dense(units=32,activation='tanh',input_dim=8))\n\nclassifier.add(Dense(units=8,activation=\"tanh\"))\n\nclassifier.add(Dense(units=2,activation=\"tanh\"))\n\n\n\n\nclassifier.add(Dense(units=1,activation='sigmoid'))\nclassifier.compile(optimizer ='adam',loss= 'binary_crossentropy', metrics = ['accuracy'])\nclassifier.fit(x_train_scl,y_train,epochs=42)","313e7b5b":"y_pred_ann=classifier.predict(x_test_scl)\ny_pred_ann=(y_pred_ann>0.5)\nacc_ann=accuracy_score(y_test,y_pred_ann)\n\nf1_score_ann=f1_score(y_test,y_pred_ann)\nplt.figure(figsize=(3,3))\ncrr_NN=confusion_matrix(y_test,y_pred_ann)\nsns.heatmap(crr_NN,annot=True)\nplt.plot()\nprint(\"\\nAccuracy Score: %{:.2f} \\nF1 Score: %{:.2f}\\n\".format(acc_ann*100,f1_score_ann*100))","a80eedbf":"**Outcome - Age Distribution**","edb68046":"Yes not perfect but better than logistic regression result in terms of f1 score.","ab8025f4":"**Distribution of Outcome**","1fb25450":"**Test Accuracy:**","462363aa":"**Scaling**","cfd89e4f":"# Data Preprocessing","dbb32758":"**Metrics**","bf06e186":"The accuracy score and f1 score results of the Logistic Regression model are quite low. I want to  create an ANN model with keras.","a2779ff5":"# Logistic Regression","bf67e84e":"**Dependent and Independent Variables**","152d6157":"**Outcome - Glucose Distribution**","b663db5c":"**Outcome - Pregnancies Distrubition**","337c1cd0":"**Train Test Split**","2bdd170e":"# Data Visualization","996486c6":"**Correlation**","aca58c0a":"# Artifical Neural Network","8af55944":"**Outcome - BMI Distribution**"}}