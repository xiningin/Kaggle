{"cell_type":{"c1b44894":"code","cee4c652":"code","ec76415b":"code","d0adce89":"code","43784c20":"code","2a8586d4":"code","3b9fd302":"code","451fcea8":"code","13c8a046":"code","3d869e29":"code","801bf2bf":"code","82e52b34":"code","e11fb4b3":"code","5ee23782":"code","74f6f52f":"code","2edfae85":"code","76666024":"code","57baa746":"code","800e8b48":"code","c5121bff":"code","64fae28f":"code","cf6da50e":"code","3b42c5f7":"code","3007a703":"code","56550621":"code","b998381c":"markdown"},"source":{"c1b44894":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport seaborn as sns\n%load_ext tensorboard","cee4c652":"# Keras has already contains mnist dataset \n# Loading mnist data using Keras\nmnist=tf.keras.datasets.mnist\n(X_train_full,y_train_full),(X_test,y_test)=mnist.load_data()","ec76415b":"# create a validation data set from the full training data \n# Scale the data between 0 to 1 by dividing it by 255. as its an unsigned data between 0-255 range\n\nX_valid,X_train=X_train_full[:5000] \/ 255.,X_train_full[5000:] \/ 255.\ny_valid,y_train=y_train_full[:5000],y_train_full[5000:]\n\n# scale the test set as well\nX_test=X_test \/ 255.\n\n","d0adce89":"tf.random.set_seed(42)\nnp.random.seed(42)\n\nLAYERS = [tf.keras.layers.Flatten(input_shape=[28, 28], name=\"inputLayer\"),\n          tf.keras.layers.Dense(300,kernel_initializer=\"he_normal\", name=\"hiddenLayer1\"),\n          tf.keras.layers.LeakyReLU(),\n          tf.keras.layers.Dense(100,kernel_initializer=\"he_normal\", name=\"hiddenLayer2\"),\n          tf.keras.layers.LeakyReLU(),\n          tf.keras.layers.Dense(10, activation=\"softmax\", name=\"outputLayer\")]\n","43784c20":"\nmodel = tf.keras.models.Sequential(LAYERS)","2a8586d4":"model.compile(loss=\"sparse_categorical_crossentropy\",\n              optimizer=tf.keras.optimizers.SGD(learning_rate=1e-3),\n              metrics=['accuracy'])","3b9fd302":"model.summary()","451fcea8":"history=model.fit(X_train,y_train,epochs=10,validation_data=(X_valid,y_valid),verbose=2)","13c8a046":"model.save(\"pretrained _model.h5\")","3d869e29":"pretrained_load_model=tf.keras.models.load_model('\/content\/drive\/MyDrive\/Colab Notebooks\/full_mnist_model.h5')","801bf2bf":"pretrained_load_model.summary()","82e52b34":"pretrained_load_model.layers","e11fb4b3":"for layer in pretrained_load_model.layers:\n  print(f\"{layer.name}:{layer.trainable}\")","5ee23782":"for layer in pretrained_load_model.layers[:-1]:\n  layer.trainable=False\n  print(f\"{layer.name}:{layer.trainable}\")","74f6f52f":"for layer in pretrained_load_model.layers:\n  print(f\"{layer.name}:{layer.trainable}\")","2edfae85":"lower_pretrained_layers=pretrained_load_model.layers[:-1]\nnew_model=tf.keras.models.Sequential(lower_pretrained_layers)\nnew_model.add(tf.keras.layers.Dense(2,activation=\"softmax\"))\n\n","76666024":"new_model.summary()","57baa746":"np.unique(y_train)","800e8b48":"def update_even_odd_labels(labels):\n  for idx,label in enumerate(labels):\n    labels[idx]=np.where(label % 2==0,1,0)\n  return labels","c5121bff":"y_train_binary,y_test_binary,y_valid_binary=update_even_odd_labels([y_train,y_test,y_valid])","64fae28f":"np.unique(y_valid_binary)","cf6da50e":"np.unique(y_test_binary)","3b42c5f7":"LOSS_FUNCTION='sparse_categorical_crossentropy'\nOPTIMIZER='SGD'\nMETRICS=['accuracy']\n\nnew_model.compile(loss=LOSS_FUNCTION,\n                  optimizer=OPTIMIZER,\n                  metrics=METRICS)","3007a703":"EPOCHS=10\nVALIDATION_SET=(X_valid,y_valid_binary)\n\nhistory=new_model.fit(X_train,y_train_binary,epochs=EPOCHS,validation_data=VALIDATION_SET)","56550621":"  new_model.evaluate(X_test,y_test_binary)","b998381c":"# Transfer Learning Approach"}}