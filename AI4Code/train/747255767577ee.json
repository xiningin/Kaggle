{"cell_type":{"b8149a26":"code","ec4ea768":"code","027cae0e":"code","f33399ee":"code","d019536c":"code","2be29077":"code","2a409971":"code","a06793a2":"code","f707e8f2":"code","cb207f5d":"code","b1a2d026":"code","71065c9a":"code","0f3bc33f":"code","794e7b39":"code","27dc9b61":"code","50767486":"code","01f1a761":"code","c957dc14":"code","69668ee0":"code","8c2a23d7":"code","cf53d39e":"code","5226be4e":"code","2127f019":"code","b6b4ec7d":"code","3f0b84f4":"code","619ed393":"code","ae0c23cc":"code","38e9b873":"code","f3c7edac":"code","99a23dc6":"code","09cf3285":"code","edd9cbdb":"code","a33cfce6":"code","be46477c":"code","3edc4645":"code","709c4395":"code","0b915150":"code","e8d52b5f":"code","613ae01f":"code","6248e94e":"code","af2c3111":"code","2232f0ba":"code","eba8f487":"code","7c9b4b41":"code","f124f501":"code","c7256472":"code","34c26b3a":"code","79bc8d64":"markdown"},"source":{"b8149a26":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import svm,datasets,metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import accuracy_score,mean_squared_error, r2_score\nfrom sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import learning_curve,KFold\nfrom sklearn.svm import SVR\nfrom sklearn.feature_selection import SelectPercentile, chi2\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nimport seaborn as sns","ec4ea768":"data_bitcoin = pd.read_csv('..\/input\/bitcoin\/Bitcoin.csv')","027cae0e":"data_bitcoin.head(10)","f33399ee":"data_bitcoin.tail()","d019536c":"data_bitcoin.count()","2be29077":"Features = ['Open','High','Low','Close','Volume','Market Cap']","2a409971":"data_bitcoin.describe().T","a06793a2":"data_bitcoin.isnull().sum()","f707e8f2":"for feature in Features:\n    data_bitcoin[feature] = data_bitcoin[feature].replace(to_replace = 0, value = data_bitcoin[feature].mean())","cb207f5d":"data_bitcoin.count()","b1a2d026":"mean_list = list()","71065c9a":"for f in Features:\n    mean_list.clear()\n    for i in range(0,2965):\n        mean_list.append(data_bitcoin.loc[i-21:i,f].mean())\n    data_bitcoin[f+\"_mean_last21days\"] = mean_list    ","0f3bc33f":"data_bitcoin.head(5)","794e7b39":"Next21Day_HighPrice = list()\n\nfor i in range(0,2944):\n    Next21Day_HighPrice.append(data_bitcoin.loc[i+21,'High'])\n\n\nfor i in range(0,21):\n     Next21Day_HighPrice.append((data_bitcoin['High']).mean())","27dc9b61":"data_bitcoin['Next21Day_HighPrice'] = Next21Day_HighPrice","50767486":"data_bitcoin.head(-5)","01f1a761":"fig = plt.figure(figsize=(14,10))\ni=1\nfor f in Features:\n    plt.subplot(2, 3, i)\n    plt.xlabel(f)\n    plt.hist(data_bitcoin[f])\n    i = i + 1\n\nplt.show()","c957dc14":"x = data_bitcoin.iloc[:, 1:13].values\ny = data_bitcoin.iloc[:, 13].values","69668ee0":"x_train, x_test, y_train , y_test = train_test_split(x, y , test_size=0.3,random_state=0)","8c2a23d7":"plt.plot(x,y,\".b\")","cf53d39e":"data_bitcoin.iloc[:, 1:13] = preprocessing.normalize(data_bitcoin.iloc[:, 1:13].values)","5226be4e":"data_bitcoin.head(-5)","2127f019":"len(data_bitcoin['Volume'] == 0)","b6b4ec7d":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(x)\nx = scaler.transform(x)","3f0b84f4":"fig = plt.figure(figsize=(14,10))\ni=1\nfor f in Features:\n    plt.subplot(2, 3, i)\n    plt.xlabel(f)\n    plt.hist(data_bitcoin[f])\n    i = i + 1\n\nplt.show()","619ed393":"from sklearn.decomposition import PCA","ae0c23cc":"pca = PCA(n_components=2)\ndf_pca = pd.DataFrame(pca.fit_transform(x))\ndf_pca","38e9b873":"x_train, x_test, y_train , y_test = train_test_split(df_pca, y , test_size=0.3,random_state=0)","f3c7edac":"from mlxtend.plotting import plot_learning_curves","99a23dc6":"model = LinearRegression()","09cf3285":"model.fit(x_train , y_train)","edd9cbdb":"y_pred = model.predict(x_test) ","a33cfce6":"score_logistic = model.score(x_test,y_test)*100 ","be46477c":"score_logistic","3edc4645":"print(model.intercept_)","709c4395":"print(model.coef_)","0b915150":"print('Variance score: %.2f' % r2_score(y_test, y_pred))\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","e8d52b5f":"regressor = SVR(kernel= 'rbf')","613ae01f":"regressor.fit(x_train,y_train)","6248e94e":"y_pred = model.predict(x_test)","af2c3111":"score_svr = model.score(x_test,y_test)*100\nscore_svr","2232f0ba":"forest = RandomForestRegressor(n_estimators = 100,\n                              criterion = 'mse',\n                              random_state = 1,\n                              n_jobs = -1)\nforest.fit(x_train,y_train)\nforest_train_pred = forest.predict(x_train)\nforest_test_pred = forest.predict(x_test)\n\nprint('MSE train data: %.3f, MSE test data: %.3f' % (\nmean_squared_error(y_train,forest_train_pred),\nmean_squared_error(y_test,forest_test_pred)))\nprint('R2 train data: %.3f, R2 test data: %.3f' % (\nr2_score(y_train,forest_train_pred),\nr2_score(y_test,forest_test_pred)))","eba8f487":"def print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')","7c9b4b41":"lin_reg = LinearRegression(normalize=True)\nlin_reg.fit(x_train,y_train)","f124f501":"test_pred = lin_reg.predict(x_test)\ntrain_pred = lin_reg.predict(x_train)\n\nprint('Test set evaluation:\\n_____________________________________')\nprint_evaluate(y_test, test_pred)\nprint('Train set evaluation:\\n_____________________________________')\nprint_evaluate(y_train, train_pred)","c7256472":"import xgboost ","34c26b3a":"xgb_reg = xgboost.XGBRegressor(max_depth=3, n_estimators=100, n_jobs=2,\n                           objectvie='reg:squarederror', booster='gbtree',\n                           random_state=42, learning_rate=0.05)\n\n# Train the model with train data sets\nxgb_reg.fit(x_train, y_train)\n\ny_pred = xgb_reg.predict(x_test) # Predictions\ny_true = y_test # True values\n\nMSE = mean_squared_error(y_true, y_pred)\nRMSE = np.sqrt(MSE)\n\nR_squared = r2_score(y_true, y_pred)\n\nprint(\"\\nRMSE: \", np.round(RMSE, 3))\nprint()\nprint(\"R-Squared: \", np.round(R_squared, 8))\nprint(xgb_reg.score(x_test,y_test))","79bc8d64":"forest = RandomForestRegressor(n_estimators = 100,\n                              criterion = 'mse',\n                              random_state = 1,\n                              n_jobs = -1)\nforest.fit(x_train,y_train)\nforest_train_pred = forest.predict(x_train)\nforest_test_pred = forest.predict(x_test)\n\nprint('MSE train data: %.3f, MSE test data: %.3f' % (\nmean_squared_error(y_train,forest_train_pred),\nmean_squared_error(y_test,forest_test_pred)))\nprint('R2 train data: %.3f, R2 test data: %.3f' % (\nr2_score(y_train,forest_train_pred),\nr2_score(y_test,forest_test_pred)))"}}