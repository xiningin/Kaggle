{"cell_type":{"6ce357ed":"code","be4b4921":"code","9aafe245":"code","26b2f1a2":"code","47fd5162":"code","98c7bc72":"code","f841723e":"code","7e8071ff":"code","22bb7e8c":"code","ee3623dd":"code","12b65dcc":"code","d1ae73c4":"code","09e1f8a9":"markdown","ef726c5e":"markdown","11e030dc":"markdown","a7d1836f":"markdown","7aad1a06":"markdown"},"source":{"6ce357ed":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","be4b4921":"# The Iris Setosa\nfrom IPython.display import Image\nurl = 'http:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/56\/Kosaciec_szczecinkowaty_Iris_setosa.jpg'\nImage(url,width=300, height=300)","9aafe245":"# The Iris Versicolor\nfrom IPython.display import Image\nurl = 'http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/41\/Iris_versicolor_3.jpg'\nImage(url,width=300, height=300)","26b2f1a2":"# The Iris Virginica\nfrom IPython.display import Image\nurl = 'http:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/9f\/Iris_virginica.jpg'\nImage(url,width=300, height=300)","47fd5162":"iris = sns.load_dataset('iris')\niris.head()","98c7bc72":"# Normal pairplot with numerical data\nsns.pairplot(iris)","f841723e":"# sepating the data as per the species\nsns.pairplot(iris, hue= 'species')","7e8071ff":"sns.set_style('darkgrid')\nsetosa = iris[iris['species']=='setosa']\nsns.kdeplot(setosa['sepal_width'], setosa['sepal_length'], cmap='plasma', shade=True, shade_lowest=False)","22bb7e8c":"versicolor = iris[iris['species']=='versicolor']\nsns.kdeplot(versicolor['sepal_width'], versicolor['sepal_length'], cmap='plasma', shade=True, shade_lowest=False)","ee3623dd":"virginica = iris[iris['species']=='virginica']\nsns.kdeplot(virginica['sepal_width'], virginica['sepal_length'], cmap='plasma', shade=True, shade_lowest=False)","12b65dcc":"from sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\n\nX = iris.drop('species', axis=1)\ny = iris['species']\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.3, random_state=100)\n\nmodel = SVC()\nmodel.fit(train_X, train_y)\n\nprediction = model.predict(test_X)","d1ae73c4":"print(confusion_matrix(test_y, prediction))\nprint('\\n')\nprint(classification_report(test_y, prediction))","09e1f8a9":"# Analysing and Visualizing the Data","ef726c5e":"# Accuracy","11e030dc":"As we can see above we got 98% accuracy with classificaion_report and showing one wrong predicted value in confusion_matrix","a7d1836f":"# Different types of Iris flowers","7aad1a06":"# Prediction"}}