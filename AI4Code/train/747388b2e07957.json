{"cell_type":{"88e8c732":"code","04410627":"code","f090b206":"code","3a692146":"code","c18696a4":"code","ce5da9ff":"code","2656c4b2":"code","21ea5647":"code","d17140e8":"code","8062a14a":"code","200ba318":"code","10d747f2":"code","15d524c8":"code","8aacfe0c":"code","5b2fb81c":"code","94e07ec5":"code","814a9eac":"code","230408b4":"code","9050aa21":"code","b8747540":"code","913f6694":"code","88523a07":"code","4ef9198a":"code","0555f3f7":"code","eacfa614":"code","c9baca67":"code","7677216b":"code","2a442cc1":"code","1f271a75":"code","d2b21352":"code","0cac0861":"code","40161c32":"markdown","68f640e6":"markdown","ee2d03e2":"markdown","dada29e4":"markdown","51d46ac8":"markdown","03c268d8":"markdown","9d95efe2":"markdown","822bfdb5":"markdown","f5bda345":"markdown","e93e1184":"markdown","0ac441b8":"markdown","64510d3c":"markdown","f137a44d":"markdown","37b88916":"markdown","3be9b4ec":"markdown","cda9bbb6":"markdown","52aab800":"markdown"},"source":{"88e8c732":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04410627":"import requests\nimport scipy\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport nltk\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom scipy.spatial.distance import cosine\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.stem import WordNetLemmatizer\n","f090b206":"# Load Dataset\ndata=pd.read_csv('\/kaggle\/input\/public-books-dataset\/Books_Dataset.csv',na_values='NULL')\ndata.shape","3a692146":"data.tail(5)","c18696a4":"# Missing Data\ndata.isnull().sum()","ce5da9ff":"# Unique Entries\nfor col in data.columns:\n    print('The Number of Unique {:^2s} are {:^2d}: '.format(col,data[col].value_counts().shape[0]))\n    print()","2656c4b2":"def duplicated_features(data,feature):\n    num=0;\n    for i in data[feature].value_counts():\n        if i>1:\n            num+=1\n        else:break\n    duplicate=data[data[feature].isin(data[feature].value_counts().index[:num])]\n    return duplicate.sort_values(by=feature)","21ea5647":"#  Duplicated Data Title\nduplicated_title=duplicated_features(data,'Title')\nduplicated_title","d17140e8":"#Cleaning The Title Data\ndata.drop_duplicates('Title',keep='first',inplace=True) # Drops Duplicates and Keeps only First Entry \ndata.shape","8062a14a":"# A Look at Synopsis\nprint('Number of Duplicated Synopsis is {:^2d}'.format((data.Synopsis.duplicated()).sum()))\nduplicated_synopsis=duplicated_features(data,'Synopsis') # Duplicated Function Defined Earlier\nduplicated_synopsis","200ba318":"# Drop Duplicated Synopsis\ndata.drop_duplicates('Synopsis',keep='first',inplace=True)\ndata.shape","10d747f2":"# Author\nduplicated_features(data,'Author')[:10]","15d524c8":"# Copy Of Data\ndata_duplicate=data.copy()","8aacfe0c":"# Dropping SElected Columns\ndata.drop(['Author','Edition','Reviews','Ratings'],inplace=True,axis=1)\ndata.head(5)","5b2fb81c":"# Data Genre\nprint('Number of Unique Genre in data is {:^2d}'.format(data.Genre.value_counts().shape[0]))","94e07ec5":"# Book Category\nprint('Number of Unique Book Category in data is {:^2d}'.format(data.BookCategory.value_counts().shape[0]))\nplt.figure(figsize=(10,10))\nsns.set_style('darkgrid')\nsns.histplot(data.BookCategory,bins=data.BookCategory.value_counts().shape[0])\nplt.title('Histplot of Book Category',size=20)\nplt.xlabel('BookCategory',size=15)\nplt.ylabel('Count',size=15)\nplt.xticks(rotation=90)","814a9eac":"# Dummies for Genre and Bookmcategory\ndata_dummy=pd.get_dummies(data[data.columns[-2:]],drop_first=True)\ndata_dummy.head(5)\nprint('Dummy Shape: ',data_dummy.shape)","230408b4":"title=data.Title.values\ntitle[:2]","9050aa21":"title=[x.lower() for x in title]\ntitle\n# Cleaning Synopsis Text\ntitle=[re.sub(r'\\n','',y) for y in title] # Replacing removing new line characters\ntitle=[re.sub(r'\\\\','',y) for y in title]\ntitle=[re.sub(r'[^\\-\\w+]',' ',y) for y in title] # Removes Characters except '\ntitle=[re.split(r'[^a-zA-Z]+',y) for y in title]\ntitle[:2]","b8747540":"# Loading Stowords From github Link Using Requests library\nstopword_github_link='https:\/\/raw.githubusercontent.com\/Josh2297\/stopwords\/master\/Stop_words.txt'\ngithub_link=requests.get(stopword_github_link)\ngithub_link.status_code","913f6694":"# Loading Stopwords 2\nstop_words=github_link.text\nstop_words=re.sub(r'\\r|\\n|\\r\\n',' ',stop_words) # Strip Newlines and Tabs\nstop_words=re.findall(r'\\S+',stop_words) # Find only words\nstop_words[:5]","88523a07":"# Removing Stopwords From Title Texts\ntitle=[list(set(x)-set(stop_words)) for x in title] # Removes Stowords from text But Distorts the order of words which shld not pose a problem to us\ntitl=[[x for x in y if len(x)>2] for y in title]\ntitle=[[x for x in y if x!='']for y in title]\ntitle[:2]","4ef9198a":"words=[x for y in title for x in y]\nlen(words)\nplt.figure(figsize=(20,20))\nfd=nltk.FreqDist(words)\nnltk.FreqDist.plot(fd,20,cumulative=True) # A Cumulative Plot of the Top Most Common 20 words","0555f3f7":"# Lemmatizer from nltk\nwl=WordNetLemmatizer()\ntitle=[[wl.lemmatize(x) for x in y] for y in title]\ntitle[10:12]","eacfa614":"# Comibing Text Into String\ntitle=[' '.join(x) for x in title]\ntitle[:2]","c9baca67":"# Bag Of Words\ncv=CountVectorizer()\ntitle=cv.fit_transform(title)\ntitle.shape","7677216b":"# Merging Data\ndata_mat=np.append(title.toarray(),data_dummy.values,axis=1) # Merging Data\ndata_mat[:5]","2a442cc1":"# FunctionTo Display Selected Books\ndef Selected_Book(index):\n    print(data_duplicate.iloc[index])\n    print()","1f271a75":"# Book Recommender Function\ndef Book_Recommender(index,num_of_books):\n    Selected_Book(index=index) # Print Selected Book # Print Selected Book\n    item_similarity=(1-cosine_similarity(data_mat[index:index+1],data_mat)) # Uses Cosine Similarity as Distance Measure\n    item_arg=item_similarity.argsort() # Sorts the Similarity Using Index\n    for x in range(1,num_of_books+1):\n        print('Cosine Similarity: {:.3f}'.format(item_similarity[:,x][0])) # Prints the Cosine Similarity\n        Selected_Book(item_arg.reshape(-1,1).flatten()[x])\n","d2b21352":"Book_Recommender(10,5)","0cac0861":"Book_Recommender(11,5)","40161c32":"There is No Missing Entry in The Data Set","68f640e6":"3. The Features Book category and Genre are the two most important features to be used for recommendation (Debatable)","ee2d03e2":"At this point we have a data that has been cleaned by several means and concatenated. our Data is ready to be used for recommendation","dada29e4":"##### OUR RECOMMENDER PERFORMS WELL BUT CAN DO BETTER. HOW?\n","51d46ac8":"4. More Books(more entries) Will Defintely mean better recommendations. ","03c268d8":"A Closer Look at the Duplicated Title shows that it consist of books with complete duplicate accross all features and\nplaced in the same categoryan Example is the book 1984 by George Orwell. While there are books duplicated, while there are \nduplicated books placed in multiple categories, example of such book is 100 Deadly Skills, entered in book category as Politics and \nsports. as seen above","9d95efe2":"### Notes and Tips","822bfdb5":"1. Features Used for Recommendations are The Title of the Books, Genre and Book Category, The title was properly Cleaned up using some\nnatural language processing methods and Regular Expresions and turned into Bag of words. This Generated a Sparse matrix of 7000\nfeatures. Genre and Book Category Features were converted into Into hot Encoding and generated 326 Features. These were concatenated into one singular array.","f5bda345":" The Two Cells Above shows the outputs of Our Recommender Function:","e93e1184":"The Above Function takes Just a single Book at a time a outputs similar books based on recommendation it uses the cosine distance metrics. This is to avoid computing total cosine distance over the feature space and returns a matrix of size 6719x6719. \n\n\nCosine Similarity measures the similarity between two vectors by computing the cosine distance and subtracting it from 1 i.e (1-cosine_distance).","0ac441b8":"1. The Data Feature 'Author' can be converted into one-hot encodings and used as input to our model. There are 4347 different Unique Authors\nin the Dataset This will increase our feature space by 4000+ and requires more resources and training time, But it is bound to improve our recommendation.\nThis is a matter of accuracy(Better Recommendations) vs Resources Trade off. With more avaliable resources Why Not?\n2. The Feature Synopsis is a Better One for Recommendation. It is a short summary of a book it is catchy and handy. when processed and cleaned as we did with Title.This\nyields 47000+ words and unique words of 29000(Approx). Our Feature space becomes very high(30000+).If this is used as input to the recommender.\nThis is bound to improve the results and give better recommendations but at the expense of time and resources. It is worth fantasizing about\nbut definitely not worth trying.Text Feature Extraction methods such as Feature Hashing may limit the feature space and may make it feasible to include features such as Synopsis and Authors in the model,  ut this may affect the other features such as Book Category and Genre by generating Decimals and Numbers that may not fall in the range same range as the values.\n\nUsing the two Methods described above will give state of the art results with more computation time and space","64510d3c":"There are Books with same Title in the dataset. we take a closer look at these books","f137a44d":"The Index 11 is Passed and 5 recommended Books we seek 5 recommendations\n1. The Title of The Selected Book at index 11 is 'Blockchain Revolution: How the Technology Behind Bitcoin and Other Cryptocurrencies is Changing the World' Written \nBy Don Tapscott, Alex Tapscott.\n2. This Book Falls under the Computing,Internet and Digital Media Category. It is basically about Technology.\n3. Our Recommended Books all fall under same category and are about Technology or Bitcoin.\nSo if you are lover of Bitcoin Technologies and Technology in General This Recommender also performs a well to do recommendation.","37b88916":"The Index 10 is passed and we seek 5 recommended Books.\n1. The Title of The Selected Book at index 10 is ' The Battle For Sanskrit: Is Sanskrit Political or Sacred? Oppresive or Liberating? Dead or Alive' Written \nBy Rajiv Malhotra An Indian Writer. and a Book Category of Language, Linguistics & Writing.\n2. Our Recommender Outputs Only Books that Fall under the same category as the Selected Book i.e Language,Linguistics & Writing\n3. The Cosine Similarity For Most of the Top Recommended Books Are Approximately Equal to 1 Therefore there is probabily no Particular orderings in the recommendation.\n4. 4 of the Top 5 Books Recommended Surprisinly are Authored By Indians and Talk about History, Political Science or Language of the indian society\n5. The World 'Sanskrit' as seen in the selected book title appear in most of the recommended boooks.\nSo If you Have Probably Read The Text 'Battle For Sanskrit' By Rajiv Malhotra and wants other books on India Language Culture and \nPolitics By inidan authors or other books on Sanskrit The Recommender performs a fairly well to do recommendations.","3be9b4ec":"Duplicated Entries of title and Synopsis were dropped from the dataset because our aim is to predict new books for the reader \nand not same books with different volumes or same books with different categorization. if these entries are not dropped our recommender will\nmost likely recommend these duplicates before generalizing and this is not what we desire.","cda9bbb6":"There are Duplicated Synopsis as seen above. These are same books but different Editions and Volumes such as Brigther Grammer 2,3,4.","52aab800":"## EXPLORATORY DATA ANALYSIS\n### OVERVIEW OF THE DATA"}}