{"cell_type":{"2edcd1c3":"code","c7a58ed5":"code","5d6c7399":"code","fd05fcec":"code","4a992b61":"code","262df8a1":"code","50c1af28":"code","b309ebbf":"code","5fdb1e1b":"code","389accbc":"code","6a02d1fe":"code","d7f754c7":"code","5f45966f":"code","ed15e5c8":"code","69a3b1f1":"code","5bc0ae1e":"code","6a970123":"code","da1e35c7":"code","bd625b2d":"code","6099d49e":"code","7234ce48":"code","21d49502":"markdown","589e4da4":"markdown","3f4cecc9":"markdown","3a6bfed0":"markdown","d01caa7f":"markdown"},"source":{"2edcd1c3":"import numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom scipy import stats\nimport glob\nwarnings.filterwarnings('ignore')","c7a58ed5":"train = pd.read_csv(\"..\/input\/landmark-recognition-2020\/train.csv\")\ntrain.head()","5d6c7399":"# Check for Duplicates\ntrain.duplicated().sum()","fd05fcec":"print(\"Training data size\",train.shape)\nsubmission = pd.read_csv(\"..\/input\/landmark-recognition-2020\/sample_submission.csv\")\nsubmission.head()","4a992b61":"train['landmark_id'].value_counts().hist()","262df8a1":"# missing data in training data \ntotal = train.isnull().sum().sort_values(ascending = False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending = False)\nmissing_train_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_train_data.head()","50c1af28":"# Occurance of landmark_id in decreasing order(Top categories)\ntemp = pd.DataFrame(train.landmark_id.value_counts().head(8))\ntemp.reset_index(inplace=True)\ntemp.columns = ['landmark_id','count']\ntemp","b309ebbf":"# Plot the most frequent landmark_ids\nplt.figure(figsize = (9, 8))\nplt.title('Most frequent landmarks')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"landmark_id\", y=\"count\", data=temp,\n            label=\"Count\")\nplt.show()","5fdb1e1b":"# Occurance of landmark_id in increasing order\ntemp = pd.DataFrame(train.landmark_id.value_counts().tail(8))\ntemp.reset_index(inplace=True)\ntemp.columns = ['landmark_id','count']\ntemp","389accbc":"# Plot the least frequent landmark_ids\nplt.figure(figsize = (9, 8))\nplt.title('Least frequent landmarks')\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"landmark_id\", y=\"count\", data=temp,\n            label=\"Count\")\nplt.show()","6a02d1fe":"train.nunique()","d7f754c7":"#Landmark ID distribution\nplt.figure(figsize = (10, 8))\nplt.title('Landmark ID Distribuition')\nsns.distplot(train['landmark_id'])\n\nplt.show()","5f45966f":"print(\"Number of classes under 20 occurences\",(train['landmark_id'].value_counts() <= 20).sum(),'out of total number of categories',len(train['landmark_id'].unique()))","ed15e5c8":"# Landmark Id Density Plot\nplt.figure(figsize = (8, 8))\nplt.title('Landmark id density plot')\nsns.kdeplot(train['landmark_id'], color=\"tomato\", shade=True)\nplt.show()","69a3b1f1":"#Landmark id distribuition and density plot\nplt.figure(figsize = (8, 8))\nplt.title('Landmark id distribuition and density plot')\nsns.distplot(train['landmark_id'],color='green', kde=True,bins=100)\nplt.show()","5bc0ae1e":"sns.set()\nplt.title('Training set: number of images per class(line plot)')\nsns.set_color_codes(\"pastel\")\nlandmarks_fold = pd.DataFrame(train['landmark_id'].value_counts())\nlandmarks_fold.reset_index(inplace=True)\nlandmarks_fold.columns = ['landmark_id','count']\nax = landmarks_fold['count'].plot(logy=True, grid=True)\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=30)\nax.set(xlabel=\"Landmarks\", ylabel=\"Number of images\")","6a970123":"#Training set: number of images per class(statter plot)\nsns.set()\nlandmarks_fold_sorted = pd.DataFrame(train['landmark_id'].value_counts())\nlandmarks_fold_sorted.reset_index(inplace=True)\nlandmarks_fold_sorted.columns = ['landmark_id','count']\nlandmarks_fold_sorted = landmarks_fold_sorted.sort_values('landmark_id')\nax = landmarks_fold_sorted.plot.scatter(\\\n     x='landmark_id',y='count',\n     title='Training set: number of images per class(statter plot)')\nlocs, labels = plt.xticks()\nplt.setp(labels, rotation=30)\nax.set(xlabel=\"Landmarks\", ylabel=\"Number of images\")","da1e35c7":"# Visualize outliers, min\/max or quantiles of the landmarks count\nsns.set()\nax = landmarks_fold_sorted.boxplot(column='count')\nax.set_yscale('log')","bd625b2d":"# Probability Plot\nsns.set()\nres = stats.probplot(train['landmark_id'], plot=plt)","6099d49e":"train_list = glob.glob('..\/input\/landmark-recognition-2020\/train\/*\/*\/*\/*')","7234ce48":"plt.rcParams[\"axes.grid\"] = False\nf, axarr = plt.subplots(4, 3, figsize=(24, 22))\n\ncurr_row = 0\nfor i in range(12):\n    example = cv2.imread(train_list[i])\n    example = example[:,:,::-1]\n    \n    col = i%4\n    axarr[col, curr_row].imshow(example)\n    if col == 3:\n        curr_row += 1","21d49502":"## References\n - [Google Landmarks v2 Exploratory Data Analysis(EDA)](https:\/\/www.kaggle.com\/huangxiaoquan\/google-landmarks-v2-exploratory-data-analysis-eda\/data)\n - [Google Landmark Recogn. Challenge Data Exploration](https:\/\/www.kaggle.com\/gpreda\/google-landmark-recogn-challenge-data-exploration)\n - [A Very Extensive Landmark Exploratory Analysis](https:\/\/www.kaggle.com\/codename007\/a-very-extensive-landmark-exploratory-analysis) \n - [Diving into Google\u2019s Landmark Recognition Kaggle Competition](https:\/\/towardsdatascience.com\/diving-into-googles-landmark-recognition-kaggle-competition-6975dbe11072)","589e4da4":"### Please Upvote if you found this helpful:)","3f4cecc9":"![Google LAndmark Recognition](https:\/\/miro.medium.com\/max\/2680\/1*d70CQj7zmTsy01WQvi5cpg.jpeg)","3a6bfed0":"## Plot Random Images","d01caa7f":"# Breakdown of this notebook:\n1. **Importing Libraries**\n2. **Loading the dataset**\n3. **Data Visualization:** \n    - Histogram of Count of Landmark ID\n    - Plot the most frequent landmark_ids\n    - Plot the least frequent landmark_ids\n    - Landmark ID distribution\n    - Landmark Id Density Plot\n    - Landmark id distribuition and density plot\n    - Training set: number of images per class(line plot)\n    - Training set: number of images per class(statter plot)\n    - Visualize outliers, min\/max or quantiles of the landmarks count\n    - Probability Plot\n4. **Plot Random Images**    "}}