{"cell_type":{"74f4a729":"code","e31c718c":"code","b5eb1011":"code","bd988c1e":"code","54f6e561":"code","69d080be":"code","cef2c6de":"code","b74c49d1":"code","2e196981":"code","adecf8a7":"code","e97207e1":"code","5db05642":"code","2c2605d0":"code","ad5b51ec":"code","376dcd71":"code","34d31de9":"code","4ea31fad":"code","9f8423c5":"code","2719f4da":"code","34b1deab":"code","9b630d7d":"code","cbfc7aaa":"code","d0be5da3":"code","b547f622":"code","6e11193a":"code","2062e83e":"code","0195e92c":"code","e6f509ce":"code","b13046c1":"code","1de11a43":"code","ffdf89b8":"code","46896364":"code","d14ff82d":"code","57ae65f0":"code","09459363":"code","10d68ed8":"markdown","ea7e8c7e":"markdown","1bead16f":"markdown","b7d6dff7":"markdown","39431392":"markdown","fa31cc15":"markdown","45974d61":"markdown","a5c2dc9a":"markdown","3d52ef45":"markdown","d133a5b6":"markdown","3790620e":"markdown","4f243996":"markdown","58381a53":"markdown","740f9c6f":"markdown","75757212":"markdown","3b491388":"markdown","31d435d4":"markdown","46c021c4":"markdown","6d935d58":"markdown","1b326be4":"markdown","339f178f":"markdown","f7d88ce1":"markdown","35d07c8f":"markdown"},"source":{"74f4a729":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e31c718c":"X_train = pd.read_csv(\"..\/input\/richters-predictor-modeling-earthquake-damage\/train_values.csv\")\ny_train = pd.read_csv(\"..\/input\/richters-predictor-modeling-earthquake-damage\/train_labels.csv\")\nX_test = pd.read_csv(\"..\/input\/richters-predictor-modeling-earthquake-damage\/test_values.csv\")\nprint(X_train.shape)\nprint(X_test.shape)","b5eb1011":"X_train.columns","bd988c1e":"X_train.head()","54f6e561":"X_train.info()","69d080be":"fig, axes = plt.subplots(ncols = 3, figsize = (20, 5))\nsns.distplot(X_train['geo_level_1_id'], rug=True, ax = axes[0])\nsns.distplot(X_train['geo_level_2_id'], rug=True, ax = axes[1])\nsns.distplot(X_train['geo_level_3_id'], rug=True, ax = axes[2])","cef2c6de":"X_train['geo_level_1_id'] = X_train['geo_level_1_id'] \/ X_train['geo_level_1_id'].max()\nX_train['geo_level_2_id'] = X_train['geo_level_2_id'] \/ X_train['geo_level_2_id'].max()\nX_train['geo_level_3_id'] = X_train['geo_level_3_id'] \/ X_train['geo_level_3_id'].max()","b74c49d1":"y_train.info()\ny_train['damage_grade'] = y_train['damage_grade'].astype('object')","2e196981":"y_train.info()","adecf8a7":"fig, axes = plt.subplots(ncols = 3, figsize = (20, 5))\n\nsns.boxplot(y= X_train['geo_level_1_id'], x= y_train['damage_grade'], ax = axes[0])\nsns.boxplot(y= X_train['geo_level_2_id'], x= y_train['damage_grade'], ax = axes[1])\nsns.boxplot(y= X_train['geo_level_3_id'], x= y_train['damage_grade'], ax = axes[2])","e97207e1":"X_train['count_floors_pre_eq'] = X_train['count_floors_pre_eq'].astype(\"int64\")","5db05642":"fig, axes = plt.subplots(ncols = 2, nrows = 2, figsize = (20, 20))\nsns.countplot(X_train['count_floors_pre_eq'], ax = axes[0][0])\nsns.countplot(X_train['age'], ax = axes[0][1])\nsns.countplot(X_train['area_percentage'], ax = axes[1][0])\nsns.countplot(X_train['height_percentage'], ax = axes[1][1])","2c2605d0":"print(f\"Floor Count Unique Values : {X_train['count_floors_pre_eq'].unique()}\")\nprint(f\"Age Unique Values : {X_train['age'].unique()}\")\nprint(f\"Area Percentage Unique Values : {X_train['area_percentage'].unique()}\")\nprint(f\"Height Percentage Unique Values : {X_train['height_percentage'].unique()}\")","ad5b51ec":"fig, axes = plt.subplots(ncols = 2, nrows = 2, figsize = (20, 20))\n\nsns.boxplot(y= X_train['age'], x= y_train['damage_grade'], ax = axes[0][0])\nsns.boxplot(y= X_train['count_floors_pre_eq'], x= y_train['damage_grade'], ax = axes[0][1])\nsns.boxplot(y= X_train['area_percentage'], x= y_train['damage_grade'], ax = axes[1][0])\nsns.boxplot(y= X_train['height_percentage'], x= y_train['damage_grade'], ax = axes[1][1])","376dcd71":"X_train['damage_grade'] = y_train['damage_grade']","34d31de9":"plt.figure(figsize=(15,8))\nsns.countplot(x=X_train[\"count_floors_pre_eq\"],hue=X_train[\"damage_grade\"],palette=\"viridis\")","4ea31fad":"plt.figure(figsize=(15,8))\nsns.countplot(x=X_train[\"age\"],hue=X_train[\"damage_grade\"],palette=\"viridis\")","9f8423c5":"X_train['damage_grade'] = X_train['damage_grade'].astype(int)","2719f4da":"X_train[['count_floors_pre_eq','age', 'area_percentage', 'height_percentage', 'damage_grade']].corr()","34b1deab":"## log(age + 1) because age can be zero and log of zero does not exist\nX_train['log_age'] = (X_train['age'] + 1).apply(np.log)","9b630d7d":"sns.boxplot(y= X_train['log_age'], x= y_train['damage_grade'])","cbfc7aaa":"X_train[['log_age', 'damage_grade']].corr()","d0be5da3":"X_train['log_area_per'] = (X_train['area_percentage']).apply(np.log)\nX_train[['log_area_per', 'damage_grade']].corr()\n## We can not get any useful information from log of areas","b547f622":"X_train['log_height_per'] = (X_train['height_percentage']).apply(np.log)\nX_train[['log_height_per', 'damage_grade']].corr()\n## We can not get any useful information from log of height","6e11193a":"del X_train['log_area_per']\ndel X_train['log_height_per']","2062e83e":"print(f\"Land Surface Condition Catagories : {X_train['land_surface_condition'].unique()}\")\nprint(f\"Foundation Type Catagories : {X_train['foundation_type'].unique()}\")\nprint(f\"Roof Type Catagories : {X_train['roof_type'].unique()}\")\nprint(f\"Ground Floor Types Catagories : {X_train['ground_floor_type'].unique()}\")\nprint(f\"Other Floor Type Catagories : {X_train['other_floor_type'].unique()}\")\nprint(f\"Positions Catagories : {X_train['position'].unique()}\")\nprint(f\"Plan Coniguration Catagories : {X_train['plan_configuration'].unique()}\")\nprint(f\"Legal Ownership Catagories : {X_train['legal_ownership_status'].unique()}\")","0195e92c":"fig, axes = plt.subplots(ncols = 2, nrows = 4, figsize = (20, 20))\nsns.countplot(X_train['land_surface_condition'], ax = axes[0][0])\nsns.countplot(X_train['foundation_type'], ax = axes[0][1])\nsns.countplot(X_train['roof_type'], ax = axes[1][0])\nsns.countplot(X_train['ground_floor_type'], ax = axes[1][1])\nsns.countplot(X_train['other_floor_type'], ax = axes[2][0])\nsns.countplot(X_train['position'], ax = axes[2][1])\nsns.countplot(X_train['plan_configuration'], ax = axes[3][0])\nsns.countplot(X_train['legal_ownership_status'], ax = axes[3][1])","e6f509ce":"fig, axes = plt.subplots(ncols = 2, nrows = 4, figsize = (20, 20))\nsns.countplot(X_train['land_surface_condition'], hue = X_train['damage_grade'], ax = axes[0][0])\nsns.countplot(X_train['foundation_type'], hue = X_train['damage_grade'], ax = axes[0][1])\nsns.countplot(X_train['roof_type'], hue = X_train['damage_grade'], ax = axes[1][0])\nsns.countplot(X_train['ground_floor_type'], hue = X_train['damage_grade'], ax = axes[1][1])\nsns.countplot(X_train['other_floor_type'], hue = X_train['damage_grade'], ax = axes[2][0])\nsns.countplot(X_train['position'], hue = X_train['damage_grade'], ax = axes[2][1])\nsns.countplot(X_train['plan_configuration'], hue = X_train['damage_grade'], ax = axes[3][0])\nsns.countplot(X_train['legal_ownership_status'], hue = X_train['damage_grade'], ax = axes[3][1])","b13046c1":"cols = [['has_superstructure_adobe_mud', 'has_superstructure_mud_mortar_stone'], ['has_superstructure_stone_flag', \n        'has_superstructure_cement_mortar_stone'], ['has_superstructure_mud_mortar_brick', \n        'has_superstructure_cement_mortar_brick'], ['has_superstructure_timber', 'has_superstructure_bamboo'], \n        ['has_superstructure_rc_non_engineered', 'has_superstructure_rc_engineered']]\n\nfig, axes = plt.subplots(ncols = 2, nrows = 5, figsize = (20,20))\nfor i, c in enumerate(cols):\n    X_train[c[0]].value_counts().plot.pie(autopct=\"%.1f%%\", ax = axes[i][0])\n    X_train[c[1]].value_counts().plot.pie(autopct=\"%.1f%%\", ax = axes[i][1])\nplt.show()\nX_train['has_superstructure_other'].value_counts().plot.pie(autopct = \"%.1f%%\")\nplt.show()","1de11a43":"cols = ['has_superstructure_adobe_mud', 'has_superstructure_mud_mortar_stone', 'has_superstructure_stone_flag', \n        'has_superstructure_cement_mortar_stone', 'has_superstructure_mud_mortar_brick', \n        'has_superstructure_cement_mortar_brick', 'has_superstructure_timber', 'has_superstructure_bamboo', \n        'has_superstructure_rc_non_engineered', 'has_superstructure_rc_engineered', 'has_superstructure_other'\n       ]\n\nfor c in cols:\n    plt.figure(figsize=(15,4))\n    total = float(len(X_train[c])) \n    ax = sns.countplot(x = X_train[c], hue=X_train.damage_grade, palette='Paired')\n    plt.title(f\"{c} VS Damage Grade\")\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}'.format(height\/total),\n                ha=\"center\") \n    plt.show()","ffdf89b8":"cols=[[\"has_secondary_use\",\"has_secondary_use_agriculture\"],\n             [\"has_secondary_use_hotel\",\"has_secondary_use_rental\"],\n             [\"has_secondary_use_institution\",\"has_secondary_use_school\"],\n             [\"has_secondary_use_industry\", \"has_secondary_use_health_post\"],\n             [\"has_secondary_use_gov_office\",\"has_secondary_use_use_police\"]]\n\nfig, axes = plt.subplots(ncols = 2, nrows = 5, figsize = (20,20))\nfor i, c in enumerate(cols):\n    X_train[c[0]].value_counts().plot.pie(autopct=\"%.2f%%\", ax = axes[i][0])\n    X_train[c[1]].value_counts().plot.pie(autopct=\"%.2f%%\", ax = axes[i][1])\nplt.show()\nX_train['has_secondary_use_other'].value_counts().plot.pie(autopct = \"%.2f%%\")\nplt.show()","46896364":"cols=[\"has_secondary_use\",\"has_secondary_use_agriculture\",\"has_secondary_use_hotel\",\n      \"has_secondary_use_rental\",\"has_secondary_use_institution\",\"has_secondary_use_school\",\n      \"has_secondary_use_industry\",\"has_secondary_use_health_post\",\"has_secondary_use_gov_office\",\n      \"has_secondary_use_use_police\",\"has_secondary_use_other\"]\n\nfor c in cols:\n    plt.figure(figsize=(15,4))\n    total = float(len(X_train[c])) \n    ax = sns.countplot(x = X_train[c], hue=X_train.damage_grade, palette='Paired')\n    plt.title(f\"{c} VS Damage Grade\")\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}'.format(height\/total),\n                ha=\"center\") \n    plt.show()","d14ff82d":"X_train['count_families'].unique()","57ae65f0":"fig = plt.figure(figsize=(15,4))\nax = sns.countplot(X_train['count_families'])\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_height())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+.12, i.get_height()+5, \\\n            str(round((i.get_height()\/total)*100, 2))+'%', fontsize=15, color='black')","09459363":"plt.figure(figsize=(10,8))\nax=X_train.groupby(\"damage_grade\")[\"count_families\"].sum().sort_values().plot.bar(color=[\"mediumturquoise\",\"turquoise\",\"aquamarine\"],\n                                                                               )\n# create a list to collect the plt.patches data\ntotals = []\n\n# find the values and append to list\nfor i in ax.patches:\n    totals.append(i.get_height())\n\n# set individual bar lables using above list\ntotal = sum(totals)\n\n# set individual bar lables using above list\nfor i in ax.patches:\n    # get_x pulls left or right; get_height pushes up or down\n    ax.text(i.get_x()+.12, i.get_height()+5, \\\n            str(round((i.get_height()\/total)*100, 2))+'%', fontsize=15,\n                color='black')\nplt.title(\"Families Affected due to earthquake\")\nplt.ylabel(\"No. of families\")\nplt.xlabel(\"Damage Grade\")\nplt.show()","10d68ed8":"* land_surface_condition - ```object```\n* foundation_type - `object`\n* roof_type - `object`\n* ground_floor_type - `object`\n* other_floor_type - `object`\n* position - `object`\n* plan_configuration - `object`\n* legal_ownership_status - `object`","ea7e8c7e":"### ***We have left with one variable ```count_families```***\n#### **Meaning : No. of families living in that building**","1bead16f":"## ***Now Lets take a look at other binary variable***","b7d6dff7":"## Now lets see columns 4,5,6,7","39431392":"There is no evidence of relation between geo_level_ids and damage_grade","fa31cc15":"## ***Now Lets take look at Binary features***","45974d61":"Log Of Age","a5c2dc9a":"### **Conclusion**\n*We can see that ```Floor Count```, ```log(age+1)``` and ```Area Percentage``` can help us litil bit determining the Damage Garade*","3d52ef45":"1. count_floors_pre_eq\n2. age\n3. area_percentage\n4. height_percentage","d133a5b6":"# Lets do some visulation .. ","3790620e":"Now lets see their effect on Targer variable","4f243996":"log of Area Percentage and Height Percentage","58381a53":"We have to normalize all three columns.","740f9c6f":"# List Of Features: \n* `geo_level_1_id`, `geo_level_2_id`, `geo_level_3_id` : `INT` geographic region in which building exists, from largest (level 1) to most specific sub-region (level 3). Possible values: level 1: 0-30, level 2: 0-1427, level 3: 0-12567\n* `count_floors_pre_eq` : `INT` number of floors in the building before the earthquake\n* `age` : `INT` age of the building in years\n* `area_percentage` : `INT`  normalized area of the building footprint\n* `height_percentage` : `INT` normalized height of the building footprint\n* `land_surface_condition` : `Categorical` :-  `n`, `o`, `t`\n* `foundation_type` : `Categorical` :- `h`, `i`, `r`, `u`, `w`\n\nand Many More...","75757212":">  1. has_superstructure_adobe_mud            \n>  2. has_superstructure_mud_mortar_stone     \n>  3. has_superstructure_stone_flag            \n>  4. has_superstructure_cement_mortar_stone   \n>  5. has_superstructure_mud_mortar_brick      \n>  6. has_superstructure_cement_mortar_brick   \n>  7. has_superstructure_timber               \n>  8. has_superstructure_bamboo                \n>  9. has_superstructure_rc_non_engineered     \n>  10. has_superstructure_rc_engineered        \n>  11. has_superstructure_other                 ","3b491388":"Lets take a look at value that they","31d435d4":"> 1. has_secondary_use                       \n2. has_secondary_use_agriculture           \n3. has_secondary_use_hotel                 \n4. has_secondary_use_rental                 \n5. has_secondary_use_institution           \n6. has_secondary_use_school                 \n7. has_secondary_use_industry               \n8. has_secondary_use_health_post            \n9. has_secondary_use_gov_office             \n10. has_secondary_use_use_police            \n11. has_secondary_use_other                 ","46c021c4":"## ***Lets Look at Catagorical Columns (variables) Mentioned Below***","6d935d58":"## Column No. 1, 2, 3\n\nLets first see their distribution","1b326be4":"Count Of buildings with specific number of families living","339f178f":"we can see that `geo_level_2_id` and `geo_level_3_id` has aprox uniform dstribution","f7d88ce1":"*All the variable seems having Possion Distribution*","35d07c8f":"87% building have 1 families living in them"}}