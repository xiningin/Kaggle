{"cell_type":{"e3b3274c":"code","cd57a126":"code","3543efaf":"code","7082c620":"code","0b9ada24":"code","82fcd386":"code","2df80dea":"code","caf6d833":"code","61c8d06c":"code","aef1636f":"code","9964e191":"code","b359882a":"code","e4428802":"code","49d36b46":"code","46066ba0":"code","0ba22f4f":"code","0f2a471b":"code","27d2cf40":"code","51f93431":"code","ecb1ca9e":"code","872a5bb6":"code","2a463019":"code","5a149e1b":"code","a208d43c":"code","b623f946":"code","f5788e9e":"code","ec14d190":"code","332c5b5f":"code","336e0c14":"code","cb36d11b":"code","dc986013":"code","a87fd281":"code","9a7c13d8":"code","63f94b8e":"code","fa6f5855":"code","67fc5196":"code","205b71c7":"code","ceb66f82":"code","82d59493":"code","d924577d":"markdown","5afd605e":"markdown","4c2d1be3":"markdown","ee5da6a9":"markdown"},"source":{"e3b3274c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd57a126":"import warnings\nwarnings.filterwarnings(\"ignore\")","3543efaf":"df = pd.read_csv('\/kaggle\/input\/insights\/Insights.csv')\ndf.columns","7082c620":"df.dropna(inplace = True)","0b9ada24":"df.isna().sum()","82fcd386":"df_Aggregate = df.groupby('Port of Destination').sum()","2df80dea":"df_Aggregate = df_Aggregate[df_Aggregate['Qty']>=100]","caf6d833":"df_Aggregate['Good Dest'] = 0","61c8d06c":"for i in range(len(df_Aggregate)):\n    if df_Aggregate['Qty'].iloc[i]>100:\n        df_Aggregate['Good Dest'].iloc[i] = 1.0 if (df_Aggregate['Value In FC'].iloc[i]\/df_Aggregate['Qty'].iloc[i])>=(3.0) else 0.0","aef1636f":"df_Aggregate['Good Dest'].value_counts()","9964e191":"df_Aggregate","b359882a":"X=df_Aggregate.index.tolist()\nX=pd.DataFrame(X,columns=['Ports'])\nX","e4428802":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","49d36b46":"y=df_Aggregate['Good Dest']","46066ba0":"from sklearn.preprocessing import LabelEncoder","0ba22f4f":"labelencoder = LabelEncoder()","0f2a471b":"X['Ports_encoded'] = labelencoder.fit_transform(X['Ports'])\n#X.drop('Bridge_Types_Cat',axis=1)\nlabelencoder.transform(['Hamburg'])\n#39\n\n","27d2cf40":"x=X.Ports_encoded\n#x=pd.DataFrame(x)","51f93431":"x=np.array(x)\ny=np.array(y)\nprint(x)\nprint(y)","ecb1ca9e":"x=x.reshape(-1,1)\nprint(x)","872a5bb6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","2a463019":"y_pred = logreg.predict([labelencoder.transform(['Hamburg'])])\nprint(y_pred)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))\n","5a149e1b":"df_most_performing = df.groupby('Product').sum()","a208d43c":"df_most_performing['Profit'] = df_most_performing['Value(INR)']\/df_most_performing['Qty']","b623f946":"threshold_profit = df_most_performing['Profit'].mean()\nthreshold_profit","f5788e9e":"df_most_performing['Profitable_Product'] = 0\nfor i in range(len(df_most_performing)):\n    df_most_performing['Profitable_Product'].iloc[i] = 1 if (df_most_performing['Profit'].iloc[i]>=threshold_profit) else 0","ec14d190":"df_most_performing","332c5b5f":"df_most_performing['Profitable_Product'].value_counts()","336e0c14":"X=df_most_performing.index.tolist()\nX=pd.DataFrame(X,columns=['Products'])\nX","cb36d11b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","dc986013":"y=df_most_performing['Profitable_Product']\n","a87fd281":"from sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()","9a7c13d8":"X['Products'] = labelencoder.fit_transform(X['Products'])\n#labelencoder.transform(['Hamburg'])","63f94b8e":"x=X.Products","fa6f5855":"x=np.array(x)\ny=np.array(y)\nprint(x)\nprint(y)","67fc5196":"x=x.reshape(-1,1)\nprint(x)","205b71c7":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)\nlogreg = DecisionTreeClassifier(max_depth=2)\nlogreg.fit(X_train, y_train)","ceb66f82":"y_pred = logreg.predict(X_test)\nprint(y_pred)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))\n","82d59493":"top_profitable_products = df_most_performing.sort_values('Profit',ascending=False).index[:10].tolist()\ntop_profitable_products","d924577d":"## Threshold for Profit","5afd605e":"## Second Question","4c2d1be3":"## First Question","ee5da6a9":"## DF Cleaning"}}