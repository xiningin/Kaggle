{"cell_type":{"8aa3a05c":"code","9517e969":"code","f880aaef":"code","b51447b0":"code","2a2c13aa":"code","fbef3301":"code","9f6b91b3":"code","2e248c26":"code","a38453ea":"code","73963f64":"code","bd9a45c5":"code","1b0eed32":"code","66fdd11a":"code","6632203e":"code","a1ab7c05":"code","d300f9d8":"code","4c31d2c6":"code","0226f80b":"code","d131b31f":"code","fc5d6576":"code","e7f38251":"code","a06d4ff1":"markdown"},"source":{"8aa3a05c":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nimport tensorflow as tf\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPooling2D\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \n","9517e969":"IMG_ROWS = 28\nIMG_COLS = 28\nNUM_CLASSES = 10\nTEST_SIZE = 0.2\nRANDOM_STATE = 42\n#Model\nNO_EPOCHS = 50\nBATCH_SIZE = 32\n","f880aaef":"\n\ntrain=pd.read_csv(\"..\/input\/fashion-mnist_train.csv\")\ntest=pd.read_csv(\"..\/input\/fashion-mnist_test.csv\")\nprint(train.shape,test.shape)","b51447b0":"def data_preprocessing(raw):\n    out_y = keras.utils.to_categorical(raw.label, NUM_CLASSES)\n    num_images = raw.shape[0]\n    x_as_array = raw.values[:,1:]\n    x_shaped_array = x_as_array.reshape(num_images, IMG_ROWS, IMG_COLS, 1)\n    out_x = x_shaped_array \/ 255\n    return out_x, out_y","2a2c13aa":"X, y = data_preprocessing(train)\nX_test, y_test = data_preprocessing(test)\nprint(X_test.shape,y_test.shape)","fbef3301":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=TEST_SIZE, random_state=RANDOM_STATE)","9f6b91b3":"datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    zca_whitening=True)","2e248c26":"datagen.fit(X_train)","a38453ea":"# Model\nmodel = Sequential()\n# Add convolution 2D\nmodel.add(Conv2D(64, kernel_size=(3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 padding='same',\n                 input_shape=(IMG_ROWS, IMG_COLS, 1)))\nmodel.add(Conv2D(64, \n                 kernel_size=(3, 3), \n                 activation='relu',padding='same'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(128, kernel_size=(3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 padding='same',\n                 input_shape=(IMG_ROWS, IMG_COLS, 1)))\nmodel.add(Conv2D(128, \n                 kernel_size=(3, 3), \n                 padding='same',\n                 activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(256, kernel_size=(3, 3),\n                 activation='relu',\n                 kernel_initializer='he_normal',\n                 padding='same',\n                 input_shape=(IMG_ROWS, IMG_COLS, 1)))\nmodel.add(Conv2D(256, \n                 kernel_size=(3, 3), \n                 padding='same',\n                 activation='relu'))\nmodel.add(Conv2D(256, \n                 kernel_size=(3, 3), \n                 padding='same',\n                 activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.3))\n\n#model.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(2048, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(NUM_CLASSES, activation='softmax'))\n\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=\"Adam\",\n              metrics=['accuracy'])","73963f64":"model.fit_generator(datagen.flow(X_train, y_train, batch_size=32),\n                    steps_per_epoch=len(X_train) \/ 32, epochs=10)","bd9a45c5":"print(\"Fashion MNIST train -  rows:\",X_train.shape[0],\" columns:\", X_train.shape[1:4])\nprint(\"Fashion MNIST valid -  rows:\",X_val.shape[0],\" columns:\", X_val.shape[1:4])\nprint(\"Fashion MNIST test -  rows:\",X_test.shape[0],\" columns:\", X_test.shape[1:4])","1b0eed32":"from tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau","66fdd11a":"model.summary()\n","6632203e":"reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=3, min_lr=0.0001)\nearlystop=EarlyStopping(monitor='val_loss', patience=3)\n\ntrain_model = model.fit(X_train, y_train,\n                  batch_size=BATCH_SIZE,\n                  epochs=NO_EPOCHS,\n                  verbose=1,\n                  validation_data=(X_val, y_val),callbacks=[reduce_lr])","a1ab7c05":"plt.plot(train_model.history['acc'])","d300f9d8":"plt.plot(train_model.history['val_acc'])","4c31d2c6":"plt.plot(train_model.history['loss'])","0226f80b":"plt.plot(train_model.history['val_loss'])","d131b31f":"predictions=model.predict_classes(X_test)\nprint(predictions.shape)","fc5d6576":"actual=np.argmax(y_test,axis=1)\nprint(actual.shape)","e7f38251":"s=0\nfor i in range(10000):\n  if(predictions[i]==actual[i]):\n    s+=1\n\nprint(s)\nprint(\"Test Accuracy:\",float(s\/10000))","a06d4ff1":"## Name: Aditya Vartak\n#### Problem Statement : Implement CNN on fashion MNIST Data and Find out Max Validation accuracy . Find out test accuracy .Do some image augmentation  "}}