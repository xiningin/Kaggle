{"cell_type":{"7bdf2319":"code","2243579d":"code","57f48440":"code","41fcf577":"code","25a708be":"code","a3d3d18f":"code","6f706f22":"code","c4263db2":"code","f5e88613":"code","b2081cd8":"code","218fadf7":"code","339ce252":"code","1b481f58":"code","9c993e90":"code","15517c2b":"code","3a93e789":"code","06c18696":"code","b469f707":"code","5a637a14":"code","d2a7ba0d":"code","81a2af90":"code","093a64bd":"code","b878c47a":"code","d135a4f2":"code","67f826b8":"code","b373261b":"markdown","b1a06c4b":"markdown","33ee54d1":"markdown","600574f7":"markdown","e76d2a5a":"markdown","7f5db20f":"markdown","f55866fd":"markdown","723b84b5":"markdown","a6ca2732":"markdown","a6d42f15":"markdown","8056fb2b":"markdown","5fbc0910":"markdown","7ca00bb3":"markdown","61e9ffd8":"markdown","37fac0b2":"markdown"},"source":{"7bdf2319":"# importing required libraries. \nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.utils.np_utils import to_categorical\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","2243579d":"# Load Train and Test data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","57f48440":"#checking the shape of train and test dataset\ntrain.shape","41fcf577":"test.shape","25a708be":"train_label = train.label.values\n\n# Dropping 'abel' column from train dataset\ntrain = train.drop(\"label\", axis = 1).values\n\ntrain.shape","a3d3d18f":"# train dataset null value check\nnp.isnan(train).sum()","6f706f22":"# test dataset null value check\ntest.isnull().any().describe()","c4263db2":"train = train\/255.0\ntest= test\/255.0","f5e88613":"fig1, ax1 = plt.subplots(1,15, figsize=(15,10))\nfor i in range(15):\n    # reshaping the images into 28*28 shape\n    ax1[i].imshow(train[i].reshape((28,28)))\n    ax1[i].axis('off')\n    ax1[i].set_title(train_label[i]) ","b2081cd8":"train_image =np.array(train).reshape(-1,28,28,1)\ntest_image =np.array(test).reshape(-1,28,28,1)","218fadf7":"train_image.shape","339ce252":"test_image.shape","1b481f58":"# first checkin the shape of train_label\ntrain_label.shape","9c993e90":"# Encoding labels to one hot encoder\ntrain_label = to_categorical(train_label)","15517c2b":"# again checking the shape of train_label\ntrain_label.shape","3a93e789":"# Initialising the CNN\nclassifier = Sequential()\n\n# Step 1 - Convolution\nclassifier.add(Conv2D(32, (3, 3), padding = 'Same', activation=\"relu\", input_shape=(28, 28, 1)))","06c18696":"# Step 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))","b469f707":"#adding another convulationary layer. Since we are adding another convolution layer, we are not required \n#- to pass input shape parameter\nclassifier.add(Conv2D(32, (3, 3), activation=\"relu\"))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))","5a637a14":"# Step 3 - Flattening\nclassifier.add(Flatten())","d2a7ba0d":"#Step 4 - Full connection. \n#Here output_dim is the number of neurons per layer\nclassifier.add(Dense(output_dim = 256, activation = 'relu'))","81a2af90":"#output layer\n# here we are using 10 output_dim (neurons) because there are 10 classes\nclassifier.add(Dense(output_dim = 10, activation = 'softmax'))","093a64bd":"# Compilint the CNN\nclassifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","b878c47a":"epochs=30\nbatch_size=90\n\n# fitting the CNN model \nclassifier.fit(train_image, train_label, batch_size=batch_size, epochs=epochs)","d135a4f2":"#Prediction\nresults = classifier.predict(test_image)","67f826b8":"# Submission\npred = []\nnumTest = results.shape[0]\nfor i in range(numTest):\n    pred.append(np.argmax(results[i])) \npredictions = np.array(pred) \n\nsample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\n\nresult=pd.DataFrame({'ImageId':sample_submission.ImageId, 'Label':predictions})\nresult.to_csv(\"submission.csv\",index=False)\nprint(result)","b373261b":"As there are 10 categories from 0 to 9, after one hot encoding, train_label is categorized into 10 columns representing 10 categories. ","b1a06c4b":"**This is my first kernel and I want all of your support.  Please upvote or comment your views if you find it useful. Your views will surely motivate me to write and work on more kernels. Thanks so much.**\n\n**What is Deep Learning?** \n\nDeep Learing referes to neural networks with multiple hidden layers that can learn increasingly abstract representation of input data. Neural network with many hidden layers is known as deep neural network. Deep neural networks with many hidden layers can sequentially learn more complex features from the raw image.\n* first hidden layers might learn local features from the input image.\n*  then each subsequent hidden layers learns more complex features.\n* and the last layer can classify image into categories. \n\nThese types of deep neural networks are called as **Convolutional Neural Networks (CNN)**\n\n**Where Deep Learning is used? **\n\nDeep learning is mostly used in image recognition. Apart from that there are many applications of deep learning such as:\n* Speech recognition.\n* Natural language processing. \n* Self-driving vehicle. \n* Computer vision and so on.\n\nThis kernel will help you dive deep into convolutional neural network (CNN) with the python coding using the Digit Recognizer MNIST datasets.\nCNN can be build using the following steps:\n* Data Preparation\n* Data Modeling using CNN\n* Prediction and Submission\n\nLets begin the journey!\n","33ee54d1":"**1. Data Preparation**\n* **Load Data**","600574f7":"* **Pooling**\n\nPooling enables the CNN to detect features in various images irrespective of the difference in lighting in the pictures and different angles of the images. \n\nThere are different types of pooling, for example, **max pooling** and **min pooling**. \n\nMax pooling works by placing a matrix of 2x2 on the feature map and picking the largest value in that box. The 2x2 matrix is moved from left to right through the entire feature map picking the largest value in each pass. These values then form a new matrix called a **Pooled Feature Map**. Max pooling works to preserve the main features while also reducing the size of the image. This helps reduce overfitting, which would occur if the CNN is given too much information, especially if that information is not relevant in classifying the image.","e76d2a5a":"<img src=\"https:\/\/imgur.com\/nME3ghU.jpg\">","7f5db20f":"* **Flattening**\n\nFlattening involves transforming the entire pooled feature map matrix into a single column which is then fed to the neural network for processing.","f55866fd":"* **Normalization**\n\nNormalization accelerates training speed. As the range of the values of the features gets narrowed down to a particular range because of normalization, its easy to perform computations over a smaller range of values. ","723b84b5":"* **Label Encoding**","a6ca2732":"* **Check for missing and null values **","a6d42f15":"* **Visualization of train dataset images**","8056fb2b":"**3. Prediction and Submission**","5fbc0910":"* **Reshaping**\n\nReshaping images into 3 dimensions with 28*28*1. Here **'1'** is the number of channel used. As MNIST images are gray scaled, so it only use one channel. ","7ca00bb3":"* **Full Connection**\n\nThis step is made up of the **input layer**, **the fully connected layer,** and **the output layer**. The fully connected layer is similar to the hidden layer in ANNs but in this case it\u2019s fully connected. The output layer is where we get the predicted classes or category","61e9ffd8":"* **Convolution**\n\nThere are **3** steps in this process of Convolution:\n\n1. **Input Image**: The input image is the image being detected. \n\n2. **Feature detector** : It is also called as Kernel or Filter. It is a matrix generally of 3*3 Size.\n\n3. **Feature map** : The matrix representation of the input image is **multiplied** element-wise with the feature detector to produce a feature map. Feature map aims to reduce the size of the image and make processing faster and easier. \n\nSome of the features of the image are lost in this step. However, the main features of the image that are important in image detection are retained. These features are the ones that are unique to identifying that specific object. The way we prevent loss of image information is by having **many feature maps**. Each feature map detects the location of certain features in the image.\n\n* **Apply ReLU (Rectifier Linear Unit)** : \nIn this step we apply the rectifier function to **increase non-linearity** in the CNN. Images are made of different objects that are not linear to each other. Without applying this function the image classification will be treated as a linear problem while it is actually a non-linear one.","37fac0b2":"**2. Data Modeling using CNN**\n\nThe following are the steps in building Convolutional Neural Network (CNN):\n\n**1. Convolution**\n\n**2. Pooling**\n\n**3. Flattening**\n\n**4. Full Connection**"}}