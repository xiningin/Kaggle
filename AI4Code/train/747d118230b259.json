{"cell_type":{"56e73f1d":"code","8ba2f3f6":"code","25a2ebec":"code","0e9e8d96":"code","2cff1679":"code","c1df7043":"code","4a49f77d":"code","5c4c8ae5":"code","1c14c847":"code","fa392d24":"code","d3cb8cc4":"code","6c271ef8":"code","4b42100b":"code","1711febb":"code","266e069a":"code","df0e9f47":"code","df0b379c":"code","ef4b2b76":"markdown","6dcede25":"markdown","36f02e94":"markdown","abbbf342":"markdown","95bef479":"markdown","9aa93677":"markdown","34b4f14f":"markdown","b5de8ebc":"markdown","e7bafb7b":"markdown","ea60c61b":"markdown"},"source":{"56e73f1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom datetime import datetime\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ba2f3f6":"df = pd.read_csv('..\/input\/hackathon\/task_2-COVID-19-death_cases_per_country_after_fifth_death-till_26_June.csv')\ndf.head()","25a2ebec":"df[\"deaths_per_million_10_days_after_fifth_death\"].plot.hist()\nplt.show()","0e9e8d96":"df[\"deaths_per_million_50_days_after_fifth_death\"].plot.hist()\nplt.show()","2cff1679":"df[\"deaths_per_million_85_days_after_fifth_death\"].plot.hist()\nplt.show()","c1df7043":"# Prepare a full dataframe\n#num_records = 7303\ndata = {}\ndata[\"date_fifth_death\"] = pd.date_range(\"23\/03\/2020\", \"16\/06\/2020\", freq=\"D\")\n\ncomplete = pd.DataFrame(data=data)\ncomplete = complete.set_index(\"date_fifth_death\")\ncomplete = complete.merge(df, left_index=True, right_index=True, how=\"left\")\ncomplete = complete.bfill().ffill()","4a49f77d":"complete.head()","5c4c8ae5":"toInspect = [\"deaths_per_million_10_days_after_fifth_death\", \"deaths_per_million_50_days_after_fifth_death\", \"deaths_per_million_85_days_after_fifth_death\"]\nrows, cols = 3, 2\nfig, ax = plt.subplots(rows, cols, figsize=(20,rows*5))\n\nfor row in range(rows):\n    sns.lineplot(data=df[[toInspect[row]]], ax=ax[row][0])\n    sns.lineplot(data=complete[[toInspect[row]]], ax=ax[row][1])","1c14c847":"fig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","fa392d24":"# Data Conversion Utility\n\ndef getTimeSeriesData(A, window=7):\n    X, y = list(), list()\n    for i in range(len(A)):\n        end_ix = i + window\n        if end_ix > len(A) - 1:\n            break\n        seq_x, seq_y = A[i:end_ix], A[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)","d3cb8cc4":"from sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense","6c271ef8":"window = 2\nnum_features = 1\n\nX, y = getTimeSeriesData(list(df[\"deaths_per_million_40_days_after_fifth_death\"]), window=window)\nprint(\"X:\", X.shape)\nprint(\"Y:\", y.shape)\n\n# We need to add one more dimension to X, i.e Num of features in 1 sample of time step. as we are doing a univariate prediction which means number of features are 1 only\nX = X.reshape((X.shape[0], X.shape[1], num_features))  # For LSTM\nprint(\"-----------\")\nprint(\"X:\", X.shape)\nprint(\"Y:\", y.shape)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nprint(\"-----------\")\nprint(\"X train:\", X_train.shape)\nprint(\"y train:\", y_train.shape)\nprint(\"X test:\", X_test.shape)\nprint(\"y test:\", y_test.shape)","4b42100b":"# Define Model\nmodel = Sequential()\nmodel.add(LSTM(7, activation='relu', input_shape=(window, num_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nhistory = model.fit(X_train, y_train, epochs=5, verbose=1)","1711febb":"plt.plot(history.history[\"loss\"])\n# plt.plot(history.history[\"val_loss\"])\nplt.title(\"Model Loss\")\nplt.ylabel('Loss')\nplt.xlabel('epoch')\nplt.legend(['train'], loc='upper left')\nplt.show()","266e069a":"yPred = model.predict(X_test, verbose=0)\nyPred.shape = yPred.shape[0]","df0e9f47":"plt.figure(figsize=(30,5))\nsns.set(rc={\"lines.linewidth\": 8})\nsns.lineplot(x=np.arange(y_test.shape[0]), y=y_test, color=\"green\")\nsns.set(rc={\"lines.linewidth\": 3})\nsns.lineplot(x=np.arange(y_test.shape[0]), y=yPred, color=\"coral\")\nplt.margins(x=0, y=0.5)\nplt.legend([\"Original\", \"Predicted\"])","df0b379c":"points = 50\nplt.figure(figsize=(30,5))\nsns.set(rc={\"lines.linewidth\": 8})\nsns.lineplot(x=np.arange(points), y=y_test[:points], color=\"green\")\nsns.set(rc={\"lines.linewidth\": 3})\nsns.lineplot(x=np.arange(points), y=yPred[:points], color=\"coral\")\nplt.margins(x=0, y=0.5)\nplt.legend([\"Original\", \"Predicted\"])","ef4b2b76":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTPOV8iteRhIudDSEK63AwzsdRbp5oTLqPqpw&usqp=CAU)\n\nfullfact.org","6dcede25":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke ","36f02e94":"#It was suppose to Zoom. Vipin's code are (points=200). I adapted to 50, so that I could plot something. ","abbbf342":"There are several Missing values. Though I decide not to touch them to avoid ruining Vipin's codes.","95bef479":"A model Loss and I'm lost.","9aa93677":"That's not the real purpose of these subplots above. If someone know how to make it better\/fix it. I'd appreciate it.","34b4f14f":"#Total confirmed COVID-19 deaths: how rapidly are they increasing?\n\nLimited testing and challenges in the attribution of the cause of death means that the number of confirmed deaths\nmay not be an accurate count of the true number of deaths from COVID-19.\n\n#COVID-19 tests that were positive\n\nTotal confirmed cases as a share of the total number of people tested, or the number of tests performed \u2013 according\nto how testing data is reported by the country.\nThe figures are shown over time according to the number of days since the 5th confirmed death.\nhttps:\/\/ourworldindata.org\/grapher\/covid19-positive-rate-since-5th-death","b5de8ebc":"#Below: How well Vipin's code did.","e7bafb7b":"#Codes from Vipin Chaudhary https:\/\/www.kaggle.com\/voltvipin\/indian-foreign-exchange-prediction-using-lstm","ea60c61b":"#Lymphopenia predicts disease severity of COVID-19: a descriptive and predictive study\n\nAuthors: Tan, L., Wang, Q., Zhang, D. et al. Lymphopenia predicts disease severity of COVID-19: a descriptive and predictive study. Sig Transduct Target Ther 5, 33 (2020). https:\/\/doi.org\/10.1038\/s41392-020-0148-4\n\n\n![](https:\/\/media.springernature.com\/lw685\/springer-static\/image\/art%3A10.1038%2Fs41392-020-0148-4\/MediaObjects\/41392_2020_148_Fig1_HTML.png?as=webp)\n\nEstablishment and validation of Time-LYM% model (TLM) in patients with COVID-19. a Dynamic changes of LYM% in the death cases (n\u2009=\u200915), severe-cured cases (n\u2009=\u200915), and moderate-cured cases (n\u2009=\u200940). Data are showen as means\u2009\u00b1\u2009s.e.ms. Two cutoff time points of these three curves were set as 1st time point (day 10\u201312) and 2nd time point (day 17\u201319). b Description of TLM: 1st time point (TLM-1) and 2nd time point (TLM-2) are defined as day 10\u201312 and day 17\u201319 from symptom onset, respectively. The confirmed COVID-19 patients with LYM% >\u200920% at TLM-1 are classified as moderate type and the ones with LYM% <\u200920% at TLM-1 are suggested as pre-severe type, which need to be further distinguished at TLM-2. If LYM% >\u200920% at TLM-2, those pre-severe patients are reclassified as moderate. If 5% <\u2009LYM% <\u200920% at TLM-2, the pre-severe patients are indeed typed as severe. If LYM% <\u20095% at TLM-2, those patients are suggested as critically ill. The moderate and severe types are curable, while the critically ill types need intensive care has a poor prognosis. c Ninety COVID-19 patients were currently hospitalized in light of the classification criteria of the New Coronavirus Pneumonia Diagnosis Program (5th edition): 55 patients with moderate type, 24 patients with severe type and 11 patients with critically ill type. At TLM-1, LYM% in 24 out of 55 moderate cases was lower than 20%; At TLM-2, LYM% in all 24 patients was above 5%, indicating that these patients would be curable. Regarding other 24 patients with severe symptoms, LYM% at TLM-1 was lower than 20% in 20 out of 24 cases. LYM% at TLM-2 in 6 cases was <5%, indicating a poor prognosis. In 11 out of 11 critically ill patients, LYM% at TLM-1 was lower than 20%. LYM% at TLM-2 in six cases was lower than 5%, suggesting a poor prognosis. d The consistency between Guideline and TLM-based disease classification in c was tested using kappa statistic. Kappa\u2009=\u20090.48; P\u2009<\u20090.005\n\nnature.com - https:\/\/www.nature.com\/articles\/s41392-020-0148-4"}}