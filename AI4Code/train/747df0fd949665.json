{"cell_type":{"a83a615d":"code","b1b5aa31":"code","056b9e8b":"code","c3ae7243":"code","0afe3f21":"code","bf62c5c9":"code","c98f7933":"code","32c8cfe8":"code","58569328":"code","dd98f7a2":"code","8e317ad6":"code","af055e07":"code","b2dc9841":"code","0639419f":"code","bfbd0f01":"code","da2fcb8d":"code","c3bd1d83":"code","e26722ed":"code","8b056fff":"code","cffd55da":"code","a4c5c8ab":"code","1c8093f5":"code","266d22ab":"code","0cc9cbd4":"code","b3d50c28":"code","a2860bac":"code","5cb215dd":"code","6bdfd6fa":"code","539b4ee8":"code","2fcfff88":"code","c209b35b":"code","c05e41fa":"code","8f280da4":"code","180a288a":"code","2f88ce0c":"code","9cee06fb":"markdown","c14d9802":"markdown","f883bc58":"markdown","a46fdbd6":"markdown","f438e350":"markdown","0d6e3002":"markdown","7cad11ad":"markdown","df517c21":"markdown","df50c19a":"markdown","9b858cc5":"markdown","6b20e826":"markdown","3450dabb":"markdown","95a095f2":"markdown"},"source":{"a83a615d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #for visualization\nimport seaborn as sns  #for visualization\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b1b5aa31":"#read from the csv files \ndata_2015 = pd.read_csv('..\/input\/2015.csv')\ndata_2016 = pd.read_csv('..\/input\/2016.csv')","056b9e8b":"#first 10 rows from data\ndata_2015.head(10)","c3ae7243":"data_2015.info()","0afe3f21":"# correlation\ndata_2015.corr()","bf62c5c9":"#correlation map\n#As seen from below heat map, economy, health and family are directly correlated with happiness score.\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data_2015.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","c98f7933":"data_2015.columns","32c8cfe8":"#data_2015[\"Happiness Rank\"].value_counts()","58569328":"data_2015['Region'].unique()","dd98f7a2":"# This graph shows us distribution of Happiness Score.\nsns.distplot(data_2015['Happiness Score'], bins=20, kde=False, color='r')\nsns.set(style='darkgrid',palette='muted',font_scale=1)","8e317ad6":"sns.distplot(data_2015['Generosity'], bins=20, kde=True, color='b')\nsns.set(style='whitegrid',palette='muted',font_scale=1)","af055e07":"# Happiness Score of each region\ndata_2015[\"Happiness Score\"].replace(['-'],0.0,inplace = True)\ndata_2015[\"Happiness_Score\"]=data_2015[\"Happiness Score\"]\n\narea_list = list(data_2015['Region'].unique())\narea_happiness_ratio = []\nfor i in area_list:\n    x = data_2015[data_2015[\"Region\"]==i]\n    area_happiness_rate = sum(x.Happiness_Score)\/len(x)\n    area_happiness_ratio.append(area_happiness_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_happiness_ratio':area_happiness_ratio})\nnew_index = (data['area_happiness_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_happiness_ratio'])\nplt.xticks(rotation= 45) \nplt.xlabel('Regions')\nplt.ylabel('Happiness Score')\nplt.title('Happiness Score Given Regions')\nplt.show()","b2dc9841":"# Economy Rate Given Regions\ndata_2015[\"Economy (GDP per Capita)\"].replace(['-'],0.0,inplace = True)\ndata_2015[\"Economy\"]=data_2015[\"Economy (GDP per Capita)\"]\n\narea_list = list(data_2015['Region'].unique())\narea_economy = []\nfor i in area_list:\n    x = data_2015[data_2015[\"Region\"]==i]\n    area_economy_rate = sum(x.Economy)\/len(x)\n    area_economy.append(area_economy_rate)\n# sorting\ndata2 = pd.DataFrame({'area_list': area_list,'area_economy_ratio':area_economy})\nnew_index = (data2['area_economy_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data2.reindex(new_index)\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_economy_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('Regions')\nplt.ylabel('Economy Rate')\nplt.title(\"Economy Rate Given Regions\")\nplt.show()","0639419f":"# Percentage of Regions' Rate According to Components that affected of happiness score\ndata_2015.replace(['-'],0.0,inplace = True)\ndata_2015.replace(['(X)'],0.0,inplace = True)\ndata_2015[\"family\"]=data_2015[\"Family\"]\ndata_2015[\"health\"]=data_2015[\"Health (Life Expectancy)\"]\ndata_2015[\"freedom\"]=data_2015[\"Freedom\"]\ndata_2015[\"trust\"]=data_2015[\"Trust (Government Corruption)\"]\ndata_2015[\"generosity\"]=data_2015[\"Generosity\"]\n\narea_list = list(data_2015['Region'].unique())\nfamily = []\nhealth = []\nfreedom = []\ntrust = []\ngenerosity = []\nfor i in area_list:\n    x = data_2015[data_2015[\"Region\"]==i]\n    family.append(sum(x.family)\/len(x))\n    health.append(sum(x.health) \/ len(x))\n    freedom.append(sum(x.freedom) \/ len(x))\n    trust.append(sum(x.trust) \/ len(x))\n    generosity.append(sum(x.generosity) \/ len(x))\n\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=family,y=area_list,color='green',alpha = 0.5,label='Family' )\nsns.barplot(x=health,y=area_list,color='blue',alpha = 0.7,label='Health')\nsns.barplot(x=freedom,y=area_list,color='cyan',alpha = 0.6,label='Freedom')\nsns.barplot(x=trust,y=area_list,color='yellow',alpha = 0.6,label='Trust')\nsns.barplot(x=generosity,y=area_list,color='red',alpha = 0.6,label='Generosity')\n\nax.legend(loc='lower right',frameon = True)     # legend \nax.set(xlabel='Percentage of Components that affected of happiness score', ylabel='Regions',title = \"Percentage of Regions' Rate According to Components that affected of happiness score \")\nplt.show()","bfbd0f01":"# Health vs Happiness Score of each country\ndata_2015[\"health\"]=data_2015[\"Health (Life Expectancy)\"]\ndata_2015[\"Happiness_Score\"]=data_2015[\"Happiness Score\"]\n\narea_list = list(data_2015['Country'].unique())\narea_happiness_ratio = []\nfor i in area_list:\n    x = data_2015[data_2015[\"Country\"]==i]\n    area_happiness_rate = sum(x.Happiness_Score)\/len(x)\n    area_happiness_ratio.append(area_happiness_rate)\n\ndata = pd.DataFrame({'area_list': area_list,'area_happiness_ratio':area_happiness_ratio})\nnew_index = (data['area_happiness_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\narea_list = list(data_2015['Country'].unique())\narea_health = []\nfor i in area_list:\n    x = data_2015[data_2015[\"Country\"]==i]\n    area_health_rate = sum(x.health)\/len(x)\n    area_health.append(area_health_rate)\n\n# sorting\ndata3 = pd.DataFrame({'area_list': area_list,'area_health_ratio':area_health})\nnew_index = (data3['area_health_ratio'].sort_values(ascending=True)).index.values\nsorted_data3 = data3.reindex(new_index)\n\nsorted_data['area_happiness_ratio'] = sorted_data['area_happiness_ratio']\/max( sorted_data['area_happiness_ratio'])\nsorted_data3['area_health_ratio'] = sorted_data3['area_health_ratio']\/max( sorted_data3['area_health_ratio'])\ndata = pd.concat([sorted_data3,sorted_data['area_happiness_ratio']],axis=1)\ndata.sort_values('area_health_ratio',inplace=True)\n\n# visualization\nf,ax1 = plt.subplots(figsize =(25,10))\nsns.pointplot(x='area_list',y='area_health_ratio',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='area_list',y='area_happiness_ratio',data=data,color='red',alpha=0.8)\nplt.text(90,0.2,'happiness score ratio',color='red',fontsize = 17,style = 'italic')\nplt.text(90,0.15,'health ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xticks(rotation= 90)\nplt.xlabel('Countries',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Health vs Happiness Score',fontsize = 20,color='blue')\nplt.grid()\nplt.tight_layout\nplt.show()","da2fcb8d":"sns.jointplot(data_2015['Economy (GDP per Capita)'],data_2015['Happiness Score'],data=data_2015,kind='hex', color='y')","c3bd1d83":"# Visualization of Health vs Happiness Score of each country with different style of seaborn code\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data.area_health_ratio, data.area_happiness_ratio, kind=\"kde\", size=7)\nplt.savefig('graph.png') #we save the figure\nplt.show()","e26722ed":"data_2015[\"family\"]=data_2015[\"Family\"]\ndata_2015[\"Happiness_Score\"]=data_2015[\"Happiness Score\"]\n\narea_list = list(data_2015['Country'].unique())\narea_family = []\nfor i in area_list:\n    x = data_2015[data_2015[\"Country\"]==i]\n    area_family_rate = sum(x.family)\/len(x)\n    area_family.append(area_family_rate)\n\n# sorting\ndata4 = pd.DataFrame({'area_list': area_list,'area_family_ratio':area_health})\nnew_index = (data4['area_family_ratio'].sort_values(ascending=True)).index.values\nsorted_data4 = data4.reindex(new_index)\n\nsorted_data['area_happiness_ratio'] = sorted_data['area_happiness_ratio']\/max( sorted_data['area_happiness_ratio'])\nsorted_data4['area_family_ratio'] = sorted_data4['area_family_ratio']\/max( sorted_data4['area_family_ratio'])\ndata = pd.concat([sorted_data4,sorted_data['area_happiness_ratio']],axis=1)\ndata.sort_values('area_family_ratio',inplace=True)\n\n# visualization\ng = sns.jointplot(data.area_family_ratio, data.area_happiness_ratio, kind=\"kde\", size=10, color='magenta' )\nplt.savefig('graph.png')\nplt.tight_layout\nplt.show()","8b056fff":"# you can change parameters of joint plot\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_family_ratio\", \"area_happiness_ratio\", data=data,size=7, ratio=3, color=\"g\")","cffd55da":"data_2015.Region.value_counts()","a4c5c8ab":"#Counts According to Regions\n\nlabels = data_2015.Region.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown','purple','pink','orange','lime']\nexplode = [0,0,0,0,0,0,0,0,0,0]\nsizes = data_2015.Region.value_counts().values\n\n# visualization\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Counts According to Regions',color = 'blue',fontsize = 15)\nplt.show()","1c8093f5":"data.head()","266d22ab":"# Visualization of family ratio vs happiness ratio of each region with different style of seaborn library plots\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"area_happiness_ratio\", y=\"area_family_ratio\", data=data)\nplt.show()","0cc9cbd4":"# Visualization of family ratio vs happiness ratio of each region with different style of seaborn code\n# cubehelix plot\n# same data different plot type\nsns.kdeplot(data.area_happiness_ratio, data.area_family_ratio, shade=True, cut=3)\nplt.show()","b3d50c28":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(3, rot=-0.7, dark=0.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","a2860bac":"data.corr()","5cb215dd":"#correlation map\n# Visualization of area_family_ratio vs area_happiness_ratio of each region with different style of seaborn code\nf,ax = plt.subplots(figsize=(6, 6))\nsns.heatmap(data.corr(), annot=True, linewidths=1,linecolor=\"lime\", fmt= '.1f',ax=ax)\nplt.show()","6bdfd6fa":"data_2015.Region.unique()","539b4ee8":"f,ax = plt.subplots(figsize=(18, 18))\nsns.boxplot(x='Region', y='Happiness Score', data=data_2015, palette='BuGn_d')\nplt.xticks(rotation= 90)\nplt.tight_layout()\nplt.show()","2fcfff88":"# swarm plot\n\nf,ax = plt.subplots(figsize=(10, 10))\nsns.swarmplot(x=\"Region\", y=\"Happiness Score\", data=data_2015)\nplt.xticks(rotation= 90)\nplt.tight_layout()\nplt.show()","c209b35b":"data.head()","c05e41fa":"# pair plot\nsns.pairplot(data)\nplt.show()","8f280da4":"data_2015.Region.value_counts()","180a288a":"data_2015.head()","2f88ce0c":"sns.countplot(data_2015.Region)\nplt.title(\"Regions\",color = 'blue',fontsize=15)\nplt.xticks(rotation= 60)\nplt.tight_layout\nplt.show()","9cee06fb":"**Lm Plot**","c14d9802":"**Point Plot**","f883bc58":"**Box Plot**","a46fdbd6":"**Swarm Plot**","f438e350":"**Joint Plot**","0d6e3002":"**Dist Plot**","7cad11ad":"**Pair Plot**","df517c21":"**Violin Plot**","df50c19a":"**Heatmap**","9b858cc5":"**Pie Chart**","6b20e826":"**Count Plot**","3450dabb":"**Kde Plot**","95a095f2":"**Bar Plot**"}}