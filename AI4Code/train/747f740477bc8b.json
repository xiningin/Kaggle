{"cell_type":{"052796ce":"code","1b9ee37a":"code","d7a2782b":"code","edae2b21":"code","b7b0e938":"code","929a7e84":"code","50529e46":"code","565eedb8":"code","d4aec806":"code","b4d3fbf3":"code","b5f19915":"code","ee5253d3":"code","d4bad668":"code","0cc07920":"code","b9d60314":"code","171c1e7c":"code","ca55a863":"code","e7390e03":"code","4cf2bf7d":"code","ad373932":"code","11674889":"code","c9c88a1e":"code","04260edd":"code","02860bd0":"code","7223700c":"markdown","92b4114e":"markdown","dfb6cbcd":"markdown","10b302fb":"markdown","95f35476":"markdown","5af9f18d":"markdown","51b9c35d":"markdown","9d30d3e7":"markdown","85fc426b":"markdown","0b656d31":"markdown","b8fb1f87":"markdown","a1a7218a":"markdown"},"source":{"052796ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1b9ee37a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers import Dense, Conv2D , MaxPooling2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator","d7a2782b":"train_df = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ntest_df = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")","edae2b21":"train_df.head()","b7b0e938":"plt.figure(figsize = (10,10)) # Label Count\nsns.set(style=\"darkgrid\")\nsns.countplot(train_df['label'])","929a7e84":"y_train = train_df['label']\ny_test = test_df['label']\ndel train_df['label']\ndel test_df['label']","50529e46":"x_train = train_df.values\nx_test = test_df.values","565eedb8":"# Normalize the data\nx_train = x_train \/ 255\nx_test = x_test \/ 255","d4aec806":"x_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)","b4d3fbf3":"f, ax = plt.subplots(2,5) \nf.set_size_inches(10, 10)\nk = 0\nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(x_train[k].reshape(28, 28) , cmap = \"gray\")\n        k += 1\n    plt.tight_layout()","b5f19915":"# Using Data augmentation to prevent overfitting\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(x_train)","ee5253d3":"model = Sequential()\nmodel.add(Conv2D(32 , (5,5) , strides = 1 , padding = 'same' , activation = 'relu' , input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128 , (2,2) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128 , (2,2) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.1))\nmodel.add(MaxPooling2D((2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64 , (3,3) , strides = 1 , padding = 'same' , activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(units = 64 , activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units = 10 , activation = 'softmax'))\nmodel.compile(keras.optimizers.Adam(lr = 0.01), loss = 'sparse_categorical_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","d4bad668":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 2, verbose=1,factor=0.5, min_lr=0.00001)","0cc07920":"history = model.fit(datagen.flow(x_train,y_train , batch_size = 256) , epochs = 20 , validation_data = (x_test,y_test) , callbacks = [learning_rate_reduction])","b9d60314":"print(\"Accuracy of the model on Training Data is - \" , model.evaluate(x_train,y_train)[1]*100 , \"%\")\nprint(\"Accuracy of the model on Testing Data is - \" , model.evaluate(x_test,y_test)[1]*100 , \"%\")","171c1e7c":"epochs = [i for i in range(20)]\nfig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nfig.set_size_inches(20,10)\n\nax[0].plot(epochs , train_acc , 'go-' , label = 'Training Accuracy')\nax[0].plot(epochs , val_acc , 'ro-' , label = 'Testing Accuracy')\nax[0].set_title('Training & Validation Accuracy')\nax[0].legend()\nax[0].set_xlabel(\"Epochs\")\nax[0].set_ylabel(\"Accuracy\")\n\nax[1].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs , val_loss , 'r-o' , label = 'Testing Loss')\nax[1].set_title('Testing Accuracy & Loss')\nax[1].legend()\nax[1].set_xlabel(\"Epochs\")\nax[1].set_ylabel(\"Loss\")\nplt.show()","ca55a863":"predictions = model.predict_classes(x_test)\npredictions[:5]","e7390e03":"classes = [\"Class \" + str(i) for i in range(10)]\nprint(classification_report(y_test, predictions, target_names = classes))","4cf2bf7d":"cm = confusion_matrix(y_test,predictions)\ncm","ad373932":"cm = pd.DataFrame(cm , index = [i for i in range(10)] , columns = [i for i in range(10)])","11674889":"plt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\",annot = True, fmt='')\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")","c9c88a1e":"correct = np.nonzero(predictions == y_test)[0]\nincorrect = np.nonzero(predictions != y_test)[0]","04260edd":"i = 0\nfor c in correct[:6]:\n    plt.subplot(3,2,i+1)\n    plt.imshow(x_test[c].reshape(28,28), cmap=\"Blues\", interpolation='bilinear')\n    plt.title(\"Predicted Class {}, Actual Class {}\".format(predictions[c], y_test[c]))\n    plt.tight_layout()\n    i += 1","02860bd0":"i = 0\nfor c in incorrect[:6]:\n    plt.subplot(3,2,i+1)\n    plt.imshow(x_test[c].reshape(28,28), cmap=\"Blues\", interpolation='bilinear')\n    plt.title(\"Predicted Class {}, Actual Class {}\".format(predictions[c], y_test[c]))\n    plt.tight_layout()\n    i += 1","7223700c":"# Training The Model","92b4114e":"# Overview of the Dataset\n**Fashion-MNIST is a dataset of Zalando's article images\u2014consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes. Zalando intends Fashion-MNIST to serve as a direct drop-in replacement for the original MNIST dataset for benchmarking machine learning algorithms. It shares the same image size and structure of training and testing splits.**\n\n**The original MNIST dataset contains a lot of handwritten digits. Members of the AI\/ML\/Data Science community love this dataset and use it as a benchmark to validate their algorithms. In fact, MNIST is often the first dataset researchers try. \"If it doesn't work on MNIST, it won't work at all\", they said. \"Well, if it does work on MNIST, it may still fail on others.\"**\n\n**Each image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255. The training and test data sets have 785 columns. The first column consists of the class labels (see above), and represents the article of clothing. The rest of the columns contain the pixel-values of the associated image.**\n**Each training and test example is assigned to one of the following labels:**\n\n**0) T-shirt\/to**\n**1) Trouser**\n**2) Pullover**\n**3) Dress**\n**4) Coat**\n**5) Sandal**\n**6) Shirt**\n**7) Sneaker**\n**8) Bag**\n**9) Ankle boot**\n![image.png](attachment:image.png)","dfb6cbcd":"**Preview of first 10 images**","10b302fb":"# Data Augmentation\n**In order to avoid overfitting problem, we need to expand artificially our dataset. We can make your existing dataset even larger. The idea is to alter the training data with small transformations to reproduce the variations.**\n\n**Approaches that alter the training data in ways that change the array representation while keeping the label the same are known as data augmentation techniques. Some popular augmentations people use are grayscales, horizontal flips, vertical flips, random crops, color jitters, translations, rotations, and much more.**\n\n**By applying just a couple of these transformations to our training data, we can easily double or triple the number of training examples and create a very robust model.**","95f35476":"**The dataset seems balanced as for each training label , enough training examples exist**","5af9f18d":"**Some of the Incorrectly Predicted Classes**","51b9c35d":"# Analysis after Model Training","9d30d3e7":"# Loading the Fashion MNIST dataset in Keras","85fc426b":"**We perform a grayscale normalization to reduce the effect of illumination's differences.Moreover the CNN converges faster on [0..1] data than on [0..255].**","0b656d31":"**For the data augmentation, i choosed to :**\n\n**Randomly rotate some training images by 10 degrees,zoom by 10% some training images,shift images horizontally by 10% of the width,shift images vertically by 10% of the height and flipped the images horizontally.**\n\n**Once our model is ready, we fit the training dataset .**","b8fb1f87":"# Data Visualization and Preprocessing","a1a7218a":"**Some of the Correctly Predicted Classes**"}}