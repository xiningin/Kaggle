{"cell_type":{"290dc465":"code","04904275":"code","9f8b8424":"code","2a1e4a50":"code","8edc9758":"code","d690178a":"code","ff687ec5":"code","105f1772":"code","4bdac0c9":"code","67a11adf":"code","3b3538ff":"code","6e7d8d72":"code","a2c3defc":"code","7652480c":"code","6589acbc":"code","5a2e4102":"code","5a50ed77":"code","401b19a4":"code","d20e81bf":"code","a0df3c9c":"code","75d309a4":"code","96ba5d70":"code","e459f974":"code","a07af749":"code","ba647eea":"code","6c3cee0d":"code","f994a7cb":"code","bb454312":"code","a093ed13":"code","68f88348":"code","757826d6":"code","9e59661e":"code","365f2243":"code","dea7e455":"code","79c0f7df":"code","49681cd8":"code","b5052a31":"code","241c60cd":"code","51a21992":"code","7a3ec441":"code","be6540eb":"code","349967b6":"code","32e41863":"code","eb40beee":"code","ee8ca8fb":"code","27175bfe":"code","07fdbf4b":"code","568cfb75":"code","a381796b":"code","e7d703d3":"code","baa473d3":"code","f7c33faa":"code","1422759a":"code","c937359f":"code","3387077b":"code","b2b74cad":"code","4118ddc4":"code","23f8017b":"markdown","73a4cd0f":"markdown","b1f1e178":"markdown","84b1d40f":"markdown","10d39a28":"markdown","631cd47e":"markdown","ba87d035":"markdown","ee83ce89":"markdown","49bd5eab":"markdown","35284875":"markdown","0663adce":"markdown","8da170a7":"markdown","be8d159c":"markdown","b310a222":"markdown","4509c3e5":"markdown","6715226f":"markdown","1c5abb36":"markdown","f4953ab3":"markdown","80773256":"markdown","06452472":"markdown","be103266":"markdown","dd5a9f00":"markdown","a1074b2e":"markdown","5172ddcc":"markdown","1b024a02":"markdown","702223cf":"markdown","e94538bc":"markdown","a46bfd7b":"markdown"},"source":{"290dc465":"def my_first_function():\n    print('Hello world!')\n\nprint('type: {}'.format(my_first_function))\n\nmy_first_function()  # Calling a function","04904275":"def greet_us(name1, name2):\n    print('Hello {} and {}!'.format(name1, name2))\n\ngreet_us('John Doe', 'Superman')","9f8b8424":"# Function with return value\ndef strip_and_lowercase(original):\n    modified = original.strip().lower()\n    return modified\n\nuggly_string = '  MixED CaSe '\npretty = strip_and_lowercase(uggly_string)\nprint('pretty: {}'.format(pretty))","2a1e4a50":"def print_sum(val1, val2):\n    \"\"\"Function which prints the sum of given arguments.\"\"\"\n    print('sum: {}'.format(val1 + val2))\n\nprint(help(print_sum))","8edc9758":"print('type of True and False: {}'.format(type(True)))","d690178a":"print('0: {}, 1: {}'.format(bool(0), bool(1)))\nprint('empty list: {}, list with values: {}'.format(bool([]), bool(['woop'])))\nprint('empty dict: {}, dict with values: {}'.format(bool({}), bool({'Python': 'cool'})))","ff687ec5":"print('1 == 0: {}'.format(1 == 0))\nprint('1 != 0: {}'.format(1 != 0))\nprint('1 > 0: {}'.format(1 > 0))\nprint('1 > 1: {}'.format(1 > 1))\nprint('1 < 0: {}'.format(1 < 0))\nprint('1 < 1: {}'.format(1 < 1))\nprint('1 >= 0: {}'.format(1 >= 0))\nprint('1 >= 1: {}'.format(1 >= 1))\nprint('1 <= 0: {}'.format(1 <= 0))\nprint('1 <= 1: {}'.format(1 <= 1))","105f1772":"print('1 <= 2 <= 3: {}'.format(1 <= 2 <= 3))","4bdac0c9":"python_is_cool = True\njava_is_cool = False\nempty_list = []\nsecret_value = 3.14","67a11adf":"print('Python and java are both cool: {}'.format(python_is_cool and java_is_cool))\nprint('secret_value and python_is_cool: {}'.format(secret_value and python_is_cool))","3b3538ff":"print('Python or java is cool: {}'.format(python_is_cool or java_is_cool))\nprint('1 >= 1.1 or 2 < float(\"1.4\"): {}'.format(1 >= 1.1 or 2 < float('1.4')))","6e7d8d72":"print('Java is not cool: {}'.format(not java_is_cool))","a2c3defc":"print(bool(not java_is_cool or secret_value and  python_is_cool or empty_list))\nprint(bool(not (java_is_cool or secret_value and  python_is_cool or empty_list)))","7652480c":"statement = True\nif statement:\n    print('statement is True')\n    \nif not statement:\n    print('statement is not True')","6589acbc":"empty_list = []\n# With if and elif, conversion to `bool` is implicit\nif empty_list:\n    print('empty list will not evaluate to True')  # this won't be executed","5a2e4102":"val = 3\nif 0 <= val < 1 or val == 3:\n    print('Value is positive and less than one or value is three')","5a50ed77":"my_dict = {}\nif my_dict:\n    print('there is something in my dict')\nelse:\n    print('my dict is empty :(')","401b19a4":"val = 88\nif val >= 100:\n    print('value is equal or greater than 100')\nelif val > 10:\n    print('value is greater than 10 but less than 100')\nelse:\n    print('value is equal or less than 10')","d20e81bf":"greeting = 'Hello fellow Pythonista!'\nlanguage = 'Italian'\n\nif language == 'Swedish':\n    greeting = 'Hejsan!'\nelif language == 'Finnish':\n    greeting = 'Latua perkele!'\nelif language == 'Spanish':\n    greeting = 'Hola!'\nelif language == 'German':\n    greeting = 'Guten Tag!'\n    \nprint(greeting)","a0df3c9c":"my_list = [1, 2, 3, 4, 'Python', 'is', 'neat']\nfor item in my_list:\n    print(item)","75d309a4":"my_dict = {'hacker': True, 'age': 72, 'name': 'John Doe'}\nfor val in my_dict:\n    print(val)","96ba5d70":"for key, val in my_dict.items():\n    print('{}={}'.format(key, val))","e459f974":"for number in range(5):\n    print(number)","a07af749":"for number in range(2, 5):\n    print(number)","ba647eea":"for number in range(0, 10, 2):  # last one is step\n    print(number)","6c3cee0d":"my_empty_dict = {}  # alternative: my_empty_dict = dict()\nprint('dict: {}, type: {}'.format(my_empty_dict, type(my_empty_dict)))","f994a7cb":"dict1 = {'value1': 1.6, 'value2': 10, 'name': 'John Doe'}\ndict2 = dict(value1=1.6, value2=10, name='John Doe')\n\nprint(dict1)\nprint(dict2)\n\nprint('equal: {}'.format(dict1 == dict2))\nprint('length: {}'.format(len(dict1)))","bb454312":"print('keys: {}'.format(dict1.keys()))\nprint('values: {}'.format(dict1.values()))\nprint('items: {}'.format(dict1.items()))","a093ed13":"x = 5\ny = \"John\"\nprint(x)\nprint(y)","68f88348":"x = 5\ny = \"John\"\nprint(x)\nprint(y)","757826d6":"x = \"John\"\n# is the same as\nx = 'John'","9e59661e":"x, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)","365f2243":"x = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)","dea7e455":"x = \"awesome\"\nprint(\"Python is \" + x)","79c0f7df":"x = \"Python is \"\ny = \"awesome\"\nz =  x + y\nprint(z)","49681cd8":"x = 5\ny = 10\nprint(x + y)","b5052a31":"x = 5\ny = \"John\"\nprint(x + y)","241c60cd":"x = \"awesome\"\n\ndef myfunc():\n  print(\"Python is \" + x)\n\nmyfunc()","51a21992":"my_list = ['Python', 'is', 'still', 'cool']\nprint(my_list[0])\nprint(my_list[3])","7a3ec441":"languages = ['Java', 'C++', 'Go', 'Python', 'JavaScript']\nif 'Python' in languages:\n    print('Python is there!')","be6540eb":"if 6 not in [1, 2, 3, 7]:\n    print('number 6 is not present')","349967b6":"my_list = [1]\nmy_list.append('BAU')\nprint(my_list)","32e41863":"fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n    print(x)","eb40beee":"for x in \"banana\":\n    print(x)","ee8ca8fb":"a = 2\nb = 3\nc = 2","27175bfe":"# Your formula here:\nresult = ","07fdbf4b":"assert result == 50","568cfb75":"# Let's create an empty list\nmy_list = ____\n\n# Let's add some values\nmy_list.____('Python')\nmy_list.____('is ok')\nmy_list.____('sometimes')\n\n# Let's remove 'sometimes'\nmy_list.____('sometimes')\n\n# Let's change the second item\nmy_list[____] = 'is neat'","a381796b":"# Let's verify that it's correct\nassert my_list == ['Python', 'is neat']","e7d703d3":"original = ['I', 'am', 'learning', 'hacking', 'in']","baa473d3":"# Your implementation here\nmodified = ","f7c33faa":"assert original == ['I', 'am', 'learning', 'hacking', 'in']\nassert modified == ['I', 'am', 'learning', 'lists', 'in', 'Python']","1422759a":"name = 'John Doe'","c937359f":"if ____:\n    print('Name \"{}\" is more than 20 chars long'.format(name))\n    length_description = 'long'\nelif ____:\n    print('Name \"{}\" is more than 15 chars long'.format(name))\n    length_description = 'semi long'\nelif ____:\n    print('Name \"{}\" is more than 10 chars long'.format(name))\n    length_description = 'semi long'\nelif ____:\n    print('Name \"{}\" is 8, 9 or 10 chars long'.format(name))\n    length_description = 'semi short'\nelse:\n    print('Name \"{}\" is a short name'.format(name))\n    length_description = 'short'","3387077b":"assert length_description == 'semi short'","b2b74cad":"words = ['PYTHON', 'JOHN', 'chEEse', 'hAm', 'DOE', '123']\nupper_case_words = []\n\nfor ____ in words:\n    if ____.isupper():\n        ____.append(____)","4118ddc4":"assert upper_case_words == ['PYTHON', 'JOHN', 'DOE']","23f8017b":"---","73a4cd0f":"## **More Exercises**","b1f1e178":"## Content","84b1d40f":"---","10d39a28":"***","631cd47e":"## **Functions**","ba87d035":"5. Fill the `____` parts in the code below.","ee83ce89":"---","49bd5eab":"2. Fill the `____` parts of the code below.","35284875":"## **Fill in the Blanks Exercises**","0663adce":"---","8da170a7":"This notebook can be thought as complementary to the [Python course on Kaggle](http:\/\/www.kaggle.com\/learn\/python)! This Notebook will be extended regularly for the sake of practicality.","be8d159c":"---","b310a222":"---","4509c3e5":"# Python Exercises Notebook","6715226f":"3. Create a new list without modifiying the original one\n","1c5abb36":"## **Loops and List Comprehensions**","f4953ab3":"- [**Functions**](#Functions)\n- [**Booleans and Conditionals**](#Booleans-and-Conditionals)\n- [**Loops and List Comprehensions**](#Loops-and-List-Comprehensions)\n- [**Strings and Dictionaries**](#Strings-and-Dictionaries)\n- [**More Exercises**](#More-Exercises)\n- [**Fill in the Blanks Exercises**](#Fill-in-the-Blanks-Exercises)","80773256":"---","06452472":"---","be103266":"## **Strings and Dictionaries**","dd5a9f00":"4. Fill missing pieces (`____`) of the following code such that prints make sense.","a1074b2e":"1. Write the following mathematical formula in Python:\n\n\\begin{align}\n result = 6a^3 - \\frac{8b^2 }{4c} + 11\n\\end{align}\n","5172ddcc":"---","1b024a02":"## **Booleans and Conditionals**","702223cf":"---","e94538bc":"---","a46bfd7b":"---"}}