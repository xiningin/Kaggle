{"cell_type":{"0094e725":"code","a9d7bde1":"code","c184276b":"code","3d601eec":"code","667e657e":"code","09d90fde":"code","4bce10df":"code","f5e36761":"code","fe08fd29":"code","2209ff06":"code","2d503dbb":"code","f8da8b42":"code","feafc15e":"code","007596bf":"code","ae31f937":"code","c1517181":"code","29c76bb3":"code","4d4bce5c":"code","5cfa0910":"code","d48678fb":"code","15717e28":"code","4e47bb7c":"code","98602a18":"markdown","d0dec093":"markdown","d02aa4ca":"markdown","49b588a2":"markdown","e3832ac7":"markdown","691c36e5":"markdown","956b6f9b":"markdown","19c157a2":"markdown","6884e90c":"markdown","badccabd":"markdown"},"source":{"0094e725":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom lightgbm import LGBMClassifier\nimport tensorflow as tf\nfrom tensorflow import keras\nimport warnings\nwarnings.filterwarnings('ignore')","a9d7bde1":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","c184276b":"df","3d601eec":"test","667e657e":"arr = []\nfor i in range (1,df.shape[1]):\n    arr.append(df.iloc[3,i])#Collecting data of a certain image.\narr = np.asarray(arr)\narr = arr.reshape(28,28)#Reshape in 28x28 matrix.\nplt.imshow(arr)","09d90fde":"df.label[3]","4bce10df":"x = df.drop([\"label\"],axis =1)","f5e36761":"y = df.label","fe08fd29":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","2209ff06":"lgb = LGBMClassifier()\nlgb.fit(x_train,y_train)\naccuracy_score(y_test,lgb.predict(x_test))","2d503dbb":"model = keras.models.Sequential()\nmodel.add(keras.layers.Dense(500,input_dim = 784,kernel_initializer= \"uniform\", \n  bias_initializer= \"zeros\",activation='relu'))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.Dense(300,kernel_initializer= \"uniform\", \n  bias_initializer= \"zeros\",activation='relu'))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.Dense(100,kernel_initializer= \"uniform\", \n  bias_initializer= \"zeros\",activation='relu'))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.Dense(50,kernel_initializer= \"uniform\", \n  bias_initializer= \"zeros\",activation='relu'))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.Dense(10,kernel_initializer= \"uniform\", \n  bias_initializer= \"zeros\",activation='softmax'))","f8da8b42":"model.summary()","feafc15e":"weights, biases = model.layers[0].get_weights()\nweights.shape,biases.shape","007596bf":"model.compile(loss = 'sparse_categorical_crossentropy',optimizer = \"sgd\",metrics=[\"accuracy\"])","ae31f937":"x_train = x_train\/255.# values are between range of 0 to 255. To normalize divide it bby 255.\nx_test = x_test\/255.","c1517181":"model_history = model.fit(x_train,y_train,epochs=80,validation_data=(x_test,y_test))","29c76bb3":"pd.DataFrame(model_history.history).plot(figsize=(20,6))\nplt.grid(True)\nplt.gca().set_ylim(0,1)\nplt.show()","4d4bce5c":"test = test\/255.","5cfa0910":"pred = model.predict_classes(test)\npred = pred.round(2)","d48678fb":"pred[0]","15717e28":"arr = []\nfor i in range (0,test.shape[1]):\n    arr.append(test.iloc[0,i])\narr = np.asarray(arr)\narr = arr.reshape(28,28)\nplt.imshow(arr)","4e47bb7c":"pred = pd.DataFrame(pred)\nidx = np.arange(1,28001)\nidx = pd.DataFrame(idx)\nsub = pd.concat([idx,pred],axis = 1)\nsub.columns = ['ImageId','Label']\nsub.to_csv('submission.csv',index = False)","98602a18":"<h1 id=\"heading5\">\n<span style=\"font-size:30px;color:#800080\"><center>Keras<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading5\" target ='_self'><\/a>\n<\/h1>","d0dec093":"<h1 id=\"heading4\">\n<span style=\"font-size:30px;color:#800080\"><center>LightGBM<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading4\" target ='_self'><\/a>\n<\/h1>","d02aa4ca":"<center><span style=\"font-size:25px;color:#9ACD32;font-weight:bold\">If you find this notebook helpful, don't forget to <\/span><span style= 'font-size:25px;color:#b7410e;font-weight:bold'>upvote.","49b588a2":"<h1 id=\"heading6\">\n<span style=\"font-size:30px;color:#800080\"><center>Model's Progress<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading6\" target ='_self'><\/a>\n<\/h1>","e3832ac7":"<h1 id=\"heading2\">\n<span style=\"font-size:30px;color:#800080\"><center>Visual Representation of data.<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading2\" target ='_self'><\/a>\n<\/h1>\n<span style=\"font-size:15px;\"><center>*As we have data of a 28x28 matrix in a flatten form.*<\/center><\/span>","691c36e5":"<h1 id=\"heading7\">\n<span style=\"font-size:30px;color:#800080\"><center>Comparing predicted and actual digit using visualization.<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading7\" target ='_self'><\/a>\n<\/h1>","956b6f9b":"<h1 id=\"heading1\">\n<span style=\"font-size:30px;color:#800080\"><center>Loading Data<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading1\" target ='_self'><\/a>\n<\/h1>","19c157a2":"**Predicting class of the test data.**","6884e90c":"**Splitting the data in train and test set**","badccabd":"<center><img src='data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBISEhgREhISERIREhEREREREREPERERGBgZGRoUGBgcIS4lHB4sHxgYJjgmLC8xNTU1GiQ7QDs0QC40NTEBDAwMBgYGEAYGEDEdFh0xMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMf\/AABEIAKgBKwMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAAAAwECBAUGBwj\/xABLEAACAgIBAgMEBAYLEQEBAAABAgADBBESBSETMUEGIlFhFDJxgTNCUpGhsgcjJDRTYnJ0krHBFURUZHOCg4STlKK0wsPR0uFDJf\/EABQBAQAAAAAAAAAAAAAAAAAAAAD\/xAAUEQEAAAAAAAAAAAAAAAAAAAAA\/9oADAMBAAIRAxEAPwDqKsciyEWaFWBKLHIkhBuaEWBKJ8o5VllrPwjVrPwP26gVVYxUlkWMVYEKssqSQsYsCOMsqyyyQIFSsOMZqECgWGowCECmoal+UOUCmoal+UOUCmoal+UIC9SCsbqRAXxlCscTIKwEFZXjHlJBEDOyxTJNLLFlNwMxWLZZbIzKU7PbUh+D21oR9xMiu1LPwdldg\/iOj\/1EwEOkzuk3OsS6QMLrEOk1usS6QMTLF8ZqdYnUDXWk0Km5RBJyshaa3ufutVdljD1IRS2vv1r74GfO6kKWWqutr8hwWShCAeI\/Hdz2RP4x8\/QGQnScq7vk5T1j\/B8H9zoB+S1p27faOMZ7OdPKV+LZ3ycrjbkP68mG1rHwRAQoHy36znXe3FK3PRXj5WR4D8LXprDBWBKnS75EbBG9DygdJPZPAP18ZbT+VdZde2\/tZzHL7J4Y\/B12Y59GxsjIxyPs4vr9Ex9e9rq8Pgz4uVZW9ddnjJXwrTmSAjltcX7eR15iPxPaoWYdmaMPKWuni3B0RHsrIBNqbOmUA72IDzi52OC1V30+sdzj5XBMnQ9EyFADH4B1+8Tp9L6jXkoXTkrIxS2p14202DzR09D+gjuNicfoXtlj51wpxq7nAqW6y0hRXTsb4Ps7LbIXtsb3ryM0dfT6PbX1BOxV6sfLUDtbjWOEDMPykdlYH4FhA74EsBJC99fDtLBYEAS+oagTAJBgJbjArJ0ZcCTqAsLJKS8IFOEOEvuEBfGGoyGoCoRjCVKwI1IIkw3ArKsIyc32gz2xsW3IVeb1oTWp7hrGIVFPyLssDFndWc2nFxEW\/JUKbWclcfFRhsNaw7liO4RfePY9h3mcezYtHLNyLstj3NfNsbFX5LShAI\/lFjNFVVfTMJ3cNYaUfIyXGjZfd9axyT5knet+Q0Jz8D24xr3xkrSwtneLx3w\/aXr3yVxvz7bGvQiBvT2bwU7JhYg\/1eon85G4jI9mMB+5xMcH8pK1pcfMMmiJyF\/ZFxDijLNOQK2yTikaQsrBA5bQb6uj5ec0ZPtxjIMphXZYuCMdndDWVtW5lVGQ7\/jA94DH6Vk0d8TId0H965jtchHwS4++n3lhNHTuopkBgFeq2ohL8ewasqc\/H0ZT6MOxiehe0X0xioxcvHUViwPfWERwSAApB7+e\/ui\/aRBS1eeg09DpXf6eJiWOEdW+PEsrj4aPxgdF0mdkm5076mexYGF1iuM2MsTxgaa0iur4LX4t1C\/WtpsRf5ZU8f06mqtJpRYGXo2auRj13r28RFLL+Mjjs6H4EMGGvlPE9f8AYXMyb3dVwALH5rkgX496je9sq+6zehOjvz2CZ6vIwrsaxsjEQW12tzysPkELv630Meyue20Og3n2M39N63jXnglnC0fWx7gaMhD8DW+m+8bHzgec9pfZ3qORjV4NNuPZQlNC3WXmxb7L6ydsCA2lOl+fnN2F07q1fTmxScQZCpXj47o7qiUBApZiVO20NDtrvuerCEekaF7bPpA8R7F+yeX028hLKrsS6qsX7ZksS9FPvIvHTKGLDufJtnuO\/b9r25ULir3szL6KUX14q6vY32KiMT906eN1LHssNVd9NlifWrrtrd1+0Akj+ycn2VqbI\/8A6N7Bsh\/EpWsdkw0Ryr0ID+NyT3mPdtDyGhA9IB6\/E7kmVMmBEsFlgstAgCTIhAIQhAIQhAIQhAIQhAmEiTADFlYyEBU5PtVhvdh3JWOVgRbK1\/Kep1sVfvKAffOyyyogcPqeuo9Of6Oyn6bit4RYlVBcdg2gdaPY\/YZ43oP7Hd2JmYuUr1kVITlJzcnxeLqWQ8e6nanR1rvPUpUcXqCU45BpzVvyL8Yj3aGQDlkVn8UO7KpU9iSSPWdWjrOK7mmvJoe1frVrdWzD\/N3swPm+N+x3ljBTEdqCV6j9Kfja4BoNaoyhuH1uxlk\/Y7yaqM6it6mTKOOMVmd1YIl\/P3\/d7Hj29dmfVOJ+EXYNDZ7D1J7D88DwfsN7MZODY5trxER6lQvj2ZL2O6spBYOeIGuXkB31On7W+\/SmIv4TMtrpQfBAwex\/sVEJ+8TVle0VJY1YobOvGx4eMQ1akfwtv1Kx9p38pPS+mOrnKyXWzLdOG02Ksave\/BqB7633LHuxHwgbLB3J+ZmexZrZYp1gYXSK4zVYJn1A2Is0KIpBNCLAsqxWd06jIXhfTXco8hZWr8fmCe4+6aVEuogcZfZTFH1Gyqh+TTnZdaj7F56H3S6+yOGe9iW5A\/JycrJyF\/ou5U\/mncQRgEDlZPs7iWVrW2NUqp+D8NBS9fzR00yn5gznYHRcjBteym58rHubnbjXsPGWzWvEqs7BmIABDa3rZbc9PIMCqMGG9EbA7MCCPkQYzYA2SAPiSAJj6rl+Bj23634NNlvH48ELa\/RPz5iV5\/WclUZrMhyRyZz+1UIT3bX1VHY9gO+vUwP0kO\/l3+zvInhcPDx8IJgpSyXNd4eOKuoPVdkqKy\/0m8IVKqeBBHFte72nsen12JWq3OLLBy5MPLuxIUHQ3oEDehvW9DcDTCEkCBEnUAJMCAIakwgRqGpMIEEQkw1ArCSRAiACAEx9TS5q9UsFfkpbZCFk37yqxVgpPx4n7vMeat6dXnqa1F4PHJR7n6jc74eSjcE\/auejy95gdDsB27wPYmZsy1lX3K2tsPZEDBFJ+LOeyr8T3PwB8p8F6b7YdS6bkNRbe9iU3Gu6q4m9dI\/FuDNth2B0QZ+gK3VlDqdqyhlPxUjYP5oHlKPZDxbXyc698h7giNRWz0YqVqSVp0DydRs9m7Ekkjc7N3RMR6xS+LjtUg0iGlOK\/wAka7fdOmRFmBwT7JYY+oL6h+TTmZdSf0VfQkD2Rwd7elrz\/jV2RlD+i7kfonoJQwEU0pWorrREQfVREVEH2KO0qRHsIpxAS4iWE0sIhhAyusRqa3EVxgPQTQkSgmlBAsBGqItRGqIF0lhKiWMCCJZRuQIxYGPq2CMjHtxySouqsq2DojmpXe\/vnJ9lOjYuJiizFq4NbUruW21jOASEc+vEkjXynU6ve6otdZ423utVba3wJBZn0e3uorsN+ZUD1mrEx1qrWusEKg0Nksx33JJPckkkknzJJgfLv2N8fIost6hn42RzzHpqrvda9g2PxO1Zg4BYoOy60PgJ9WM4\/UqxYEzKmNxxyzoiuXrtTRVwq74+IAW4t5gjXkTOrTYrotiMGR1V0Ze4ZWGwR8tEQL6kiEIBCEIBCEIBCEIBCEIBCEIEET5T7Q5Fq9Zxc7CS\/wAO\/wCj499ngXV1Wbs4FSWUBgUI7\/xR8J9Ry8laq2sffFFLHQLMdegA8yfID1JmLo+C1aszswa1nsekFTTS7tyKp2369zvTHbaG4Hj\/ANkD2DpyScqt\/BueympgqckteyxKwzDzBHL0+BJ9Z7zGoFdaVj6taKi+nZQAP6ovPxPFTjyat1ZbEddE12L9V9HsR8QfME\/bK9LymtrDOoWwNZXYo2VFiOyPxJ7ldqSD8CIGyLYS8CICxIYSZMBZEWwjjFvAQRFuI9xFsIGVhF6jrBE6gaFjlikEcsBoEuokKZdYABLDykiVgXSXBlVEmBz8nvmUD8UU5bf54NKj\/hZ5osza1sWpiVZx+17BCue+1VvIsAN8fPXf0OsvUW43YrAH3sh62IH4rY9zaPy5Iv5pry8Wu1CliB0Ojo7GmB2rAjurAgEEdwRsd4GW7Eetzdj62x3dQzcEu+LqfJLPn5N5N6Muf2ey0L3UI3amxXCNtXqS3k3B1PdSHW0AeXELrtoxteU+OwqvYvW7BKcptDbt2Fdx8g\/oH7BvLs2gyPaGxMYHLVlS4AJxIY\/S1XbChgoLEj3iGAPD3j9XkCHdhMfTOo1ZNYsqsVwyqWUOrNWWG+DgH3WHw+U2QCEIQCEIQCEIQCEIQCZczOSkA2NoueKIAXd2\/JRB3Y\/ZM3Xup\/R6mK7a1kc1oqGxiR5uVH4o2PvIA2SAeFidQrrKZ75FhXKsGM\/0tK6dAK3HwvcXiAU7qNg7bfvCBvbx78qpbNV1oGynx14u3ukCrxX8uRf3wq9gaT7zenX6nleDRZcF5eDW9nHfHkEUtrfp5TF0LIFzXZADBXsFVfNHrc10jieSMAV\/bGt7EDtqM9pTrCyj\/iuR8\/xGgM65a9eLc6NxdKLnRholWVGIPft5gSvS\/rX\/ACyrf0qhP6SZX2iP7jyPnjXfpRpbpfnd\/O7\/APp\/+QN8mRCBRoSWlYENKMsu0gwFMIlhNDCIaAiyJ4zQ4idQHoI1ZRYxBAYsYplQJcCBYSAISRAvqEkyIHO6ow8TGH5WWNfdReZ0ZzOtVPxS6sIzYlj38LGZA6+DahUMAdH39+RHaSufdoH6HY2wD7l2MQNj+M4P6IHQtpSxSjqrq6lWVgGVlPYgg+YnnL8V8O8Zb5HiYqImMEtQmzGR3GnFu9kciikkbKgEk8e+7+6OS9jV14tYNYrLG7K4DT8ta4I\/f3e4+Y7ymKl2XVXZY6VVWCm801KzueLK6qbW122F8kB7eYgc0dVezJXJxqbrK1VaLGVPcetnU+ZPdl3yDDYGnVtclaetENSRAIQhAIQhAIQhAIQhA53UeiY+QeVtfM8PDB5uuhvasApA5KSSreak7BEX0f2fx8Ulq15OzMebhCw5HZUBQAB2A7DZ4jZOhOrCBzfZ8ftAP5dmTYfXu99jf2yfaEfuPJ9f3Lk9vP8A\/NpjtOThoq1+FkVm1K0Ry+M6B3CjbgMr6LfBew9TDK6tY\/iYwxr0v8DmtiNjWInic0rcEuCfeRj5A+7Ab7RXIcG5g6ENjWcW5Lxcsh0AfXZIA+2P6X53\/wA7u\/qSeQuLV46FOkrS9H0ayy0JTSKVqNLuqOSC52LEBBO+AJ7Nuey6bRYgc2BFey+y0qjF1UNoBeRA2dL8IGyTIkwIMXGmKJgEqZYSCIFDEuI4xTwEuInce0zwNCxqRSxqQHCXi1EZAmQDCAgNgYGEDPm\/grP8nZ+oZOC\/KpCfM11k\/aVBk5S7rcfGtx+dSIvpn4Gv\/JVfqLApin90XfyMX8\/F\/wD5K9AGsSgfDHo\/UWTjfvi8evHGP\/C\/\/iR0Hf0Sjfn9Gx9n58FgdCEJBgTCcvHy7rx4lPhLSSfDewPY1qgkBwqkBVOtjuSQQe3lJZczf4bDX4bxr2IH+2G\/0QOlJnMFebrf0jD\/ANzu1\/zElEzPW3DYfxca5f0+KYHShMXh5f5eMf8ARW\/+8q1eZ6WYo+2i5j+fxBA3wnPVMz1sxT8hRcv\/AHDFPnXUsPpFdYrZ0rF1TswR3PFeaMoKKWKrsFu5G9DvA6sISIHO64dVp\/O8D\/ma5WkH6db8Dh4mv9rkxnWVBrTfplYR+\/6VVIX9+P8APEo\/Rbd\/5gU9pv3lkfze39Uzpv5mcz2m\/eWR\/N7f1TOm\/mYEQhCAGLIjItoEiRASuoFWi3jDKPAzvM80PEQNCxqRKGMQwHgxgig0urQLyAZIkCA0\/wBsJEmBnzm1U5JAArfuTxA909yfQTmdP6zWK60NWWG8KscfoWWe\/AduQTj+mdTMxUtreqwcq7UetxsglHBUjY7jsTOfk9Kusr8Jsy3h2PNa0S8lSGXbroEbA3pRsdj5wMGTZkm97RXkUUWVVISlFeReGQvt+IdivZxocHPbvryhRbj01oKOo8AiitKb3rye6ADiyNq0MNfVDDXwnU8HN9cjF+0Ydu9f7fW47CwBXY9pd3ttCK9jBU2qcuKqqgAAc2+J79ydDQW6de9lSO9Zrdxso2wR3IB0QCAQAdEAjffvM3W2LquMhIbKY1llOilIHK1wQdg8QVB9GdZ1BOXjKGzLXJ\/BU00ouu68yz2MPk2qx\/o\/tgLzVF1qYg92utBdkKp1tN8KqSB+KxVyR6ivXk00r0TDH96Y3w\/e9Xl\/RmdcbKrtuetcexbnRgbbranRVrVOGlRgRtWYdx9cxwfN\/gsT\/ebz\/wBkQJ\/uLif4Jjf7vT\/6zn9V6PjU0+JTj002UvW9b1VpU6EWISAygHRGwR5EHU6QOX614w\/01x\/6IjKxMi4BLHprrL1s4rR3dlRg\/EMxAXZUd+J7b+4K9Vx0sycdLV5VkZQCNsqXCowYj5BX\/PLj2dwt7+h4pJ7knHqJ\/qk5jA5eMoPvAZVhHwQIqE\/0nQffOmIHMPQMPWvomKB28sepSCPUEDYmbDx1Y5HT7GZ61RGTkzM4xb1dQpYnZIdLQD56C\/bOh1bLNFFlwUN4SM+mJVdL3JJAJAA2ToE9vKJwsa43NkW+EpalaglLPYGCuWDM7KvlyYAAfjHvAb0bIayhGchrFUpaR621kpZ\/xo0r1bO8CvxNA7ZUBdilact+\/Y+jwQa7n7B6xfSO1mUgI4plcgB+KXpqdh9vNnb\/ADp0yIHn82pGRXvzz7zo9YoNKV+KjB04JpmchlB4lm3ryicPKtTJa64WPU9FdVdq4dtWmDuxDpyZx2Ye8VUec6DdINdz5OOaq7LFRbA9KsHC71p1Ksp7nfdh8oy5cp0KA018hx8RHsd03+OqsoBYeY2db15+UDne0PVa3xLa6\/EdrK3rDLTb4aM\/uBncqFRQWBJJ7DZnonHecTK6dlW0vjPdSUsrelrjU7WMjLwLFefHmVPn5b78fSdoQCEJMCIsxhiyIAJBltSjGBVot5cxTwFtM00PM8BqRqxKGOUwHLGLFoYxTAuJAlgZWA0GEosuIBDcIQJEmQDJgExZPTa7HFnvpYFCeJU71OybJCMVPvAEkgHetnXmZthA556SvrblH\/W71\/VYQPSx\/DZev51b\/Xvc6EIHO\/uSv8Nln7cu\/wDsaS3SgfO7K+7JsX+ozoQgZMPp1dTF1DtY4Aayyyy9yo3pebkkL3PYdprhCBV0DAqQGDAggjYIPmCJgTo2Oo0KzodgPFuKqB5BQW0B8hOjCAnFxa6l4V1qi7J4ooUbJ2SdeZJ9fOOhCAQhCBBkSTIgTCRJgVaUliZWBJMW8uZRjAoTEuY1ol4C3MVLWRe4FlmlZEIDUMYphCBcS4hCAblxCEAhCEAkgwhAmEIQCEIQCEIQCEIQCEIQCEIQCQYQgRCEIEyCYQgUgIQgVaLaEIC2MW5kQgIYxXKEIH\/\/2Q==' width = '600px'><\/center>"}}