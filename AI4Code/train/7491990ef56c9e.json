{"cell_type":{"9c191e5a":"code","9d51dab4":"code","9ef5c935":"code","7bb3ba66":"code","5b497b84":"code","f72d8d12":"code","c2c6e5c3":"code","bdd19d34":"code","e3f84cfe":"code","b8b15154":"code","2f5df175":"code","352d1a38":"code","268c8677":"code","e4caafe1":"code","f8377d66":"code","2a77f430":"code","9fcd587c":"code","b66c7e65":"code","58a4b835":"code","a2d53220":"code","8d88fcb2":"code","0ec677c8":"code","b3447891":"code","7666bdbb":"code","19caea9f":"markdown","1cf0ca6c":"markdown","84e2a7af":"markdown"},"source":{"9c191e5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d51dab4":"import zipfile\n\nwith zipfile.ZipFile(\"..\/input\/aerial-cactus-identification\/train.zip\",\"r\") as z:\n    z.extractall(\"\/kaggle\/working\/train\")\n\nwith zipfile.ZipFile(\"..\/input\/aerial-cactus-identification\/test.zip\",\"r\") as z:\n    z.extractall(\"\/kaggle\/working\/test\")","9ef5c935":"import numpy as np\nimport pandas as pd\nimport os\n\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline","7bb3ba66":"# Data path\nlabels = pd.read_csv('..\/input\/aerial-cactus-identification\/train.csv')\nsub = pd.read_csv('..\/input\/aerial-cactus-identification\/sample_submission.csv')\ntrain_path = '\/kaggle\/working\/train\/train'\ntest_path = '\/kaggle\/working\/test\/test'\n\n","5b497b84":"print('N\u00famero de imagens de treinamento:{0}'.format(len(os.listdir(train_path))))\nprint('N\u00famero de imagens de teste:{0}'.format(len(os.listdir(test_path))))\n\n","f72d8d12":"labels.head()","c2c6e5c3":"labels['has_cactus'].value_counts()","bdd19d34":"lab = 'Has cactus','Hasn\\'t cactus'\ncolors=['green','brown']\n\nplt.figure(figsize=(7,7))\nplt.pie(labels.groupby('has_cactus').size(), labels=lab,\n        labeldistance=1.1, autopct='%1.1f%%',\n        colors=colors,shadow=True, startangle=140)\nplt.show()","e3f84cfe":"fig,ax = plt.subplots(1,5,figsize=(15,3))\n\nfor i, idx in enumerate(labels[labels['has_cactus']==1]['id'][-5:]):\n  path = os.path.join(train_path,idx)\n  ax[i].imshow(cv2.imread(path)) # [...,[2,1,0]]","b8b15154":"fig,ax = plt.subplots(1,5,figsize=(15,3))\n\nfor i, idx in enumerate(labels[labels['has_cactus']==0]['id'][-5:]):\n  path = os.path.join(train_path,idx)\n  ax[i].imshow(cv2.imread(path)) # [...,[2,1,0]]\n\n","2f5df175":"# Libreries\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import TensorDataset, DataLoader, Dataset\nimport torchvision\nimport torchvision.transforms as transforms\n\nfrom sklearn.model_selection import train_test_split","352d1a38":"## Parameters for model\n\n# Hyper parameters\nnum_epochs = 25\nnum_classes = 2\nbatch_size = 128\nlearning_rate = 0.002\n\n# Device configuration\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","268c8677":"# data splitting\ntrain, val = train_test_split(labels, stratify=labels.has_cactus, test_size=0.1)\ntrain.shape, val.shape","e4caafe1":"train['has_cactus'].value_counts()","f8377d66":"val['has_cactus'].value_counts()","2a77f430":"# NOTE: class is inherited from Dataset\nclass MyDataset(Dataset):\n    def __init__(self, df_data, data_dir = '.\/', transform=None):\n        super().__init__()\n        self.df = df_data.values\n        self.data_dir = data_dir\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        img_name,label = self.df[index]\n        img_path = os.path.join(self.data_dir, img_name)\n        image = cv2.imread(img_path)\n        if self.transform is not None:\n            image = self.transform(image)\n        return image, label\n","9fcd587c":"# Image preprocessing\n# Ajustando \ntrans_train = transforms.Compose([transforms.ToPILImage(),\n                                  transforms.Pad(32, padding_mode='reflect'),\n                                  transforms.ToTensor(),\n                                  transforms.Normalize(mean=[0.5, 0.5, 0.5],std=[0.5, 0.5, 0.5])])\n\ntrans_valid = transforms.Compose([transforms.ToPILImage(),\n                                  transforms.Pad(32, padding_mode='reflect'),\n                                  transforms.ToTensor(),\n                                  transforms.Normalize(mean=[0.5, 0.5, 0.5],std=[0.5, 0.5, 0.5])])\n\n# Data generators\ndataset_train = MyDataset(df_data=train, data_dir=train_path, transform=trans_train)\ndataset_valid = MyDataset(df_data=val, data_dir=train_path, transform=trans_valid)\n\nloader_train = DataLoader(dataset = dataset_train, batch_size=batch_size, shuffle=True, num_workers=0)\nloader_valid = DataLoader(dataset = dataset_valid, batch_size=batch_size\/\/2, shuffle=False, num_workers=0)","b66c7e65":"# 5 camadas de convolu\u00e7\u00e3o\n# \nclass SimpleCNN(nn.Module):\n    def __init__(self):\n        # ancestor constructor call\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=2)\n        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=2)\n        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=2)\n        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=2)\n        self.conv5 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=2)\n        self.bn1 = nn.BatchNorm2d(32)\n        self.bn2 = nn.BatchNorm2d(64)\n        self.bn3 = nn.BatchNorm2d(128)\n        self.bn4 = nn.BatchNorm2d(256)\n        self.bn5 = nn.BatchNorm2d(512)\n        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n        self.avg = nn.AvgPool2d(4)\n        self.fc = nn.Linear(512 * 1 * 1, 2) # !!!\n   \n    def forward(self, x):\n        x = self.pool(F.leaky_relu(self.bn1(self.conv1(x)))) # first convolutional layer then batchnorm, then activation then pooling layer.\n        x = self.pool(F.leaky_relu(self.bn2(self.conv2(x))))\n        x = self.pool(F.leaky_relu(self.bn3(self.conv3(x))))\n        x = self.pool(F.leaky_relu(self.bn4(self.conv4(x))))\n        x = self.pool(F.leaky_relu(self.bn5(self.conv5(x))))\n        x = self.avg(x)\n        #print(x.shape) # lifehack to find out the correct dimension for the Linear Layer\n        x = x.view(-1, 512 * 1 * 1) # !!!\n        x = self.fc(x)\n        return x","58a4b835":"model = SimpleCNN().to(device)","a2d53220":"# Loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adamax(model.parameters(), lr=learning_rate)","8d88fcb2":"# Train the model\ntotal_step = len(loader_train)\nfor epoch in range(num_epochs):\n    for i, (images, labels) in enumerate(loader_train):\n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward pass\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if (i+1) % 100 == 0:\n            print ('Epoch [{}\/{}], Step [{}\/{}], Loss: {:.4f}' \n                   .format(epoch+1, num_epochs, i+1, total_step, loss.item()))\n\n","0ec677c8":"# Test the model\nmodel.eval()  # eval mode (batchnorm uses moving mean\/variance instead of mini-batch mean\/variance)\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in loader_valid:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n          \n    print('Test Accuracy of the model on the 1750 validation images: {} %'.format(100 * correct \/ total))\n\n# Save the model checkpoint\ntorch.save(model.state_dict(), 'model.ckpt')","b3447891":"# generator for test data \ndataset_valid = MyDataset(df_data=sub, data_dir=test_path, transform=trans_valid)\nloader_test = DataLoader(dataset = dataset_valid, batch_size=32, shuffle=False, num_workers=0)","7666bdbb":"model.eval()\n\npreds = []\nfor batch_i, (data, target) in enumerate(loader_test):\n    data, target = data.cuda(), target.cuda()\n    output = model(data)\n\n    pr = output[:,1].detach().cpu().numpy()\n    for i in pr:\n        preds.append(i)\n\nsub['has_cactus'] = preds\nsub.to_csv('sub.csv', index=False)\n\n","19caea9f":"### N\u00e3o tem cacto","1cf0ca6c":"Rede Neural Convolucional com pytorch\n","84e2a7af":"### Tem cacto\n"}}