{"cell_type":{"ad0d8f8c":"code","324924b3":"code","918dfbb9":"code","e1f88865":"code","e3e675ce":"code","40b72662":"code","9ab7959b":"code","a791f540":"code","53ac940a":"code","c3785dab":"code","3caae538":"code","5543f0ee":"markdown","72de3bef":"markdown","92ce8f38":"markdown","4bf8d792":"markdown","95e9bfdb":"markdown","95861ccc":"markdown","a77b2bae":"markdown","cfdef30f":"markdown"},"source":{"ad0d8f8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","324924b3":"import csv\ntsv_filename = \"\/kaggle\/input\/clash-royale-season-18-dec-0320-dataset\/BattlesStaging_12272020_WL_tagged\/battlesStaging_12272020_WL_tagged.csv\"\nchunk_size = 500000\n\ntext_file_reader = pd.read_csv(tsv_filename, engine='python',encoding='utf-8-sig', quoting=csv.QUOTE_MINIMAL, chunksize = chunk_size)","918dfbb9":"dfList = []\ncounter = 0\n\nfor df in text_file_reader:\n    dfList.append(df)\n    counter= counter +1\n    print(\"Max rows read: \" + str(chunk_size * counter) )\n\ndf = pd.concat(dfList,sort=False)","e1f88865":"df.shape","e3e675ce":"df.columns","40b72662":"df.sample(n=5)","9ab7959b":"import numpy as np\n\nlen(np.unique(df[[\"winner.tag\", \"loser.tag\"]].values))","a791f540":"df[[\"winner.clan.tag\", \"loser.clan.tag\"]] = df[[\"winner.clan.tag\", \"loser.clan.tag\"]].astype(str) \n\nlen(np.unique(df[[\"winner.clan.tag\", \"loser.clan.tag\"]].values))","53ac940a":"import matplotlib.pyplot as plt\nfrom matplotlib.ticker import StrMethodFormatter\n\nax = df.hist(column='average.startingTrophies', bins=25, grid=False, figsize=(12,8), color='#86bf91', zorder=2, rwidth=0.9)\n\nax = ax[0]\nfor x in ax:\n\n    # Despine\n    x.spines['right'].set_visible(False)\n    x.spines['top'].set_visible(False)\n    x.spines['left'].set_visible(False)\n\n    # Switch off ticks\n    x.tick_params(axis=\"both\", which=\"both\", bottom=\"off\", top=\"off\", labelbottom=\"on\", left=\"off\", right=\"off\", labelleft=\"on\")\n\n    # Draw horizontal axis lines\n    vals = x.get_yticks()\n    for tick in vals:\n        x.axhline(y=tick, linestyle='dashed', alpha=0.4, color='#eeeeee', zorder=1)\n\n    # Remove title\n    x.set_title(\"\")\n\n    # Set x-axis label\n    x.set_xlabel(\"Average Trophies Distribution\", labelpad=20, weight='bold', size=12)\n\n    # Set y-axis label\n    x.set_ylabel(\"Matches\", labelpad=20, weight='bold', size=12)\n\n    # Format y-axis label\n    x.yaxis.set_major_formatter(StrMethodFormatter('{x:,g}'))","c3785dab":"final_column_list = [ \n 'average.startingTrophies',\n 'winner.startingTrophies',\n 'winner.trophyChange',\n 'winner.crowns',\n 'winner.kingTowerHitPoints',\n 'winner.princessTowersHitPoints',\n 'loser.startingTrophies',\n 'loser.trophyChange',\n 'loser.crowns',\n 'loser.kingTowerHitPoints',\n 'loser.princessTowersHitPoints',\n 'winner.card1.id',\n 'winner.card1.level',\n 'winner.card2.id',\n 'winner.card2.level',\n 'winner.card3.id',\n 'winner.card3.level',\n 'winner.card4.id',\n 'winner.card4.level',\n 'winner.card5.id',\n 'winner.card5.level',\n 'winner.card6.id',\n 'winner.card6.level',\n 'winner.card7.id',\n 'winner.card7.level',\n 'winner.card8.id',\n 'winner.card8.level',\n 'winner.cards.list',\n 'winner.totalcard.level',\n 'winner.troop.count',\n 'winner.structure.count',\n 'winner.spell.count',\n 'winner.common.count',\n 'winner.rare.count',\n 'winner.epic.count',\n 'winner.legendary.count',\n 'winner.elixir.average',\n 'loser.card1.id',\n 'loser.card1.level',\n 'loser.card2.id',\n 'loser.card2.level',\n 'loser.card3.id',\n 'loser.card3.level',\n 'loser.card4.id',\n 'loser.card4.level',\n 'loser.card5.id',\n 'loser.card5.level',\n 'loser.card6.id',\n 'loser.card6.level',\n 'loser.card7.id',\n 'loser.card7.level',\n 'loser.card8.id',\n 'loser.card8.level',\n 'loser.cards.list',\n 'loser.totalcard.level',\n 'loser.troop.count',\n 'loser.structure.count',\n 'loser.spell.count',\n 'loser.common.count',\n 'loser.rare.count',\n 'loser.epic.count',\n 'loser.legendary.count',\n 'loser.elixir.average']","3caae538":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(16, 12))\ncorr = df[final_column_list].corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax)","5543f0ee":"### How Many Unique Players Are There In Our Dataset","72de3bef":"### How Many Unique CLans Are There In Our Dataset","92ce8f38":"### Let's Look At The Columns To Help Visualize","4bf8d792":"### Let's see the distribution of the average starting trophies of the players in a match","95e9bfdb":"### Let's at the correlation matrix of the fields","95861ccc":"### Let's only use a subset of the columns","a77b2bae":"### Let's pick 5 random rows","cfdef30f":"### Let's look at the shape of the dataframe"}}