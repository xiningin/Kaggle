{"cell_type":{"e93d16cc":"code","116d1bb8":"code","29c07450":"code","ee7e78d2":"markdown","60d2ca29":"markdown"},"source":{"e93d16cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import tree\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Any results you write to the current directory are saved as output.\ntrain_csv = pd.read_csv('..\/input\/train.csv')\ntest_csv = pd.read_csv('..\/input\/test.csv')\n\ntrain_csv.head(10)\n","116d1bb8":"\n#dropping not required cols from both training and test data\ncols = ['Name','Ticket','Cabin']\ntrain_csv = train_csv.drop(cols,axis=1)\ntest_csv = test_csv.drop(cols,axis=1)\n\n\ndummies = []\ncols = ['Pclass','Sex','Embarked']\n#\nfor col in cols:\n    dummies.append(pd.get_dummies(train_csv[col]))\n    \ntest_dummies=[]    \ntest_dummies.append(pd.get_dummies(test_csv['Pclass']))\ntest_dummies.append(pd.get_dummies(test_csv['Sex']))\ntest_dummies.append(pd.get_dummies(test_csv['Embarked']))\n\n\n\ntitanic_dummies = pd.concat(dummies,axis=1)\ntrain_csv=pd.concat((train_csv,titanic_dummies),axis=1)\n\ntest_titanic_dummies = pd.concat(test_dummies,axis=1)\ntest_csv = pd.concat((test_csv,test_titanic_dummies),axis=1)\n                        \n\n\n#drop cols\ntrain_csv = train_csv.drop(['Pclass','Sex','Embarked'],axis=1)\ntest_csv = test_csv.drop(['Pclass','Sex','Embarked'],axis=1)","29c07450":"\n                        \ntrain_csv['Age'] = train_csv['Age'].interpolate()\ntest_csv['Age'] = test_csv['Age'].interpolate()\ntest_csv['Fare'] = test_csv['Fare'].interpolate()   \n\n\n\ntrain_csv['Age'] = (train_csv['Age'] - train_csv['Age'].min())\/(train_csv['Age'].max()-train_csv['Age'].min())\ntrain_csv['Fare'] = (train_csv['Fare'] - train_csv['Fare'].min())\/(train_csv['Fare'].max()-train_csv['Fare'].min())\n\ntest_csv['Age'] = (test_csv['Age'] - test_csv['Age'].min())\/(test_csv['Age'].max()-test_csv['Age'].min())\ntest_csv['Fare'] = (test_csv['Fare'] - test_csv['Fare'].min())\/(test_csv['Fare'].max()-test_csv['Fare'].min())\n\ntrain_csv.info()\ntest_csv.info()\n\ntrain_csv.describe()\ntest_csv.describe()\n\ntrain_csv.corr('pearson')\n\nX = train_csv.values\ny = train_csv['Survived'].values\n\nX_result = test_csv.values\n\n                        \nX = np.delete(X,1,axis=1)\n#X_result = np.delete(X_result,1,axis=1)\n\ntrain_csv.corr()\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=0)\n\n#Decision tree classifier\nfrom sklearn import tree\nclf = tree.DecisionTreeClassifier(max_depth=5)\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)\n\n#Random forest classifier\nfrom sklearn import ensemble\n# clf = ensemble.RandomForestClassifier(n_estimators=100)\n# clf.fit (X_train, y_train)\n# clf.score (X_test, y_test)\n\n# #GradientBoosting classifier\n# clf = ensemble.GradientBoostingClassifier()\n# clf.fit (X_train, y_train)\n# clf.score (X_test, y_test)\n\n#Gradient Boosting classifier \nclf = ensemble.GradientBoostingClassifier(n_estimators=100)\nclf.fit(X_train,y_train)\nclf.score(X_test,y_test)\n\n# from sklearn.linear_model import LogisticRegression\n# clf = LogisticRegression()\n# clf.fit(X_train,y_train)\n\n#clf.score(X_result,y_result)\ny_results = clf.predict(X_result)\noutput = np.column_stack((X_result[:,0],y_results))\ndf_results = pd.DataFrame(output.astype('int'),columns=['PassengerID','Survived'])\ndf_results.head()\ndf_results.to_csv('submission.csv',index=False)\n\n\n#df_results.to_csv('titanic_results.csv',index=False)\n\n#X.describe()\n#train_csv.describe()\n#titanic_dummies.describe()\n\n#train_csv['Age'] = train_csv['Age'].interpolate()\n\n#info of the training and testing data\n#train_csv.head(10)\n#test_csv.describe()\n\n","ee7e78d2":"Import all the libraries and read the csv train and test file.","60d2ca29":"We are trying to predicte the survival of the Passenger for the titantic.\n"}}