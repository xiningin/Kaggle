{"cell_type":{"df9e5cec":"code","0fa7ffe3":"code","3cbdf155":"code","53853bd3":"code","a4f6c2b6":"code","2378c30f":"code","0ca01db2":"code","c86784cf":"code","bfcbf13c":"code","3068a6d3":"code","b411c7c1":"code","796edd31":"code","30759398":"code","cc32ce7d":"code","a52b37ff":"code","1e4571c2":"code","ed570e62":"code","f86dca0b":"code","0d5fd302":"code","cf125b11":"code","0076dc6a":"code","54d11227":"code","43ce8290":"code","061feea9":"code","ea1a630f":"code","c766eefa":"code","b556386d":"code","2bab6426":"code","f58a70ab":"code","d42184ec":"code","72414bdf":"code","d940da04":"code","d3a3d7ae":"code","713399ec":"code","bed21f8b":"code","cb9ef715":"code","5133e0a5":"code","171b7cb3":"code","69c0280a":"code","b8f7bbb3":"code","ef656a02":"code","dff57fc4":"code","c3bba6ac":"code","ff1e82ab":"code","d286c2a6":"code","ae32a2b9":"code","af511b20":"code","ec2dc2e4":"code","68d42c4f":"code","05ebe2c9":"code","aabc3cc1":"code","52069225":"code","0906db12":"code","fc43330c":"markdown","4a5085a7":"markdown","8d3e9c4d":"markdown","60a680b3":"markdown","1fedc655":"markdown","a37256ff":"markdown","bc642976":"markdown","edbb8966":"markdown","251738c7":"markdown","324fbd2e":"markdown","8ca04d10":"markdown","c272f188":"markdown","10fd725d":"markdown","c9c72562":"markdown","7e8dd4f4":"markdown"},"source":{"df9e5cec":"!pip install xlrd","0fa7ffe3":"import pandas as pd  \nimport glob \nimport warnings\nimport numpy as np    \nfrom pandas import DataFrame, read_csv\nimport matplotlib.pyplot as plt   \nfrom IPython.display import Image                 \nfrom IPython.display import display               \nfrom sklearn.datasets import dump_svmlight_file   \nfrom time import gmtime, strftime \nimport seaborn as sns\nimport sys                                        \nimport math                                       \nimport json\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn import tree","3cbdf155":"path_to_excel_files = glob.glob('..\/input\/default-of-credit-card-clients\/default of credit card clients.xls')\nfor excel in path_to_excel_files:\n out = excel.split('.')[0]+'.csv'\n df = pd.read_excel(excel,skiprows=1)\n df.to_csv(out) ","53853bd3":"data = df","a4f6c2b6":"#see all column names & rows \npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","2378c30f":"data.head(10)","0ca01db2":"data.describe()","c86784cf":"data['LIMIT_BAL'] = data['LIMIT_BAL']\/1200000","bfcbf13c":"data['AGE'] = data['AGE']\/100","3068a6d3":"data['PAY_0'] = data['PAY_0']+10\ndata['PAY_0'] = data['PAY_0']\/20\ndata['PAY_2'] = data['PAY_2']+10\ndata['PAY_2'] = data['PAY_2']\/20\ndata['PAY_3'] = data['PAY_3']+10\ndata['PAY_3'] = data['PAY_3']\/20\ndata['PAY_4'] = data['PAY_4']+10\ndata['PAY_4'] = data['PAY_4']\/20\ndata['PAY_5'] = data['PAY_5']+10\ndata['PAY_5'] = data['PAY_5']\/20\ndata['PAY_6'] = data['PAY_6']+10\ndata['PAY_6'] = data['PAY_6']\/20","b411c7c1":"pd.set_option('display.max_columns', 10)\ndata.PAY_5.unique()","796edd31":"#change missing data\ndata['PAY_0'] = data['PAY_0'].mask(data['PAY_0'] <.45 , 0)\ndata['PAY_0'] = data['PAY_0'].mask(data['PAY_0'] >.9 , 0)\ndata['PAY_2'] = data['PAY_2'].mask(data['PAY_2'] <.45 , 0)\ndata['PAY_2'] = data['PAY_2'].mask(data['PAY_2'] >.9 , 0)\ndata['PAY_3'] = data['PAY_3'].mask(data['PAY_3'] <.45 , 0)\ndata['PAY_3'] = data['PAY_3'].mask(data['PAY_3'] >.9 , 0)\ndata['PAY_4'] = data['PAY_4'].mask(data['PAY_4'] <.45 , 0)\ndata['PAY_4'] = data['PAY_4'].mask(data['PAY_4'] >.9 , 0)\ndata['PAY_5'] = data['PAY_5'].mask(data['PAY_5'] <.45 , 0)\ndata['PAY_5'] = data['PAY_5'].mask(data['PAY_5'] >.9 , 0)\ndata['PAY_6'] = data['PAY_6'].mask(data['PAY_6'] <.45 , 0)\ndata['PAY_6'] = data['PAY_6'].mask(data['PAY_6'] >.9 , 0)","30759398":"pd.set_option('display.max_columns', 10)\ndata.PAY_2.unique()","cc32ce7d":"data['BILL_AMT1'] = data['BILL_AMT1']\/2000000\ndata['BILL_AMT2'] = data['BILL_AMT2']\/2000000\ndata['BILL_AMT3'] = data['BILL_AMT3']\/2000000\ndata['BILL_AMT4'] = data['BILL_AMT4']\/2000000\ndata['BILL_AMT5'] = data['BILL_AMT5']\/2000000\ndata['BILL_AMT6'] = data['BILL_AMT6']\/2000000","a52b37ff":"data['PAY_AMT1'] = data['PAY_AMT1']\/2000000\ndata['PAY_AMT2'] = data['PAY_AMT2']\/2000000\ndata['PAY_AMT3'] = data['PAY_AMT3']\/2000000\ndata['PAY_AMT4'] = data['PAY_AMT4']\/2000000\ndata['PAY_AMT5'] = data['PAY_AMT5']\/2000000\ndata['PAY_AMT6'] = data['PAY_AMT6']\/2000000","1e4571c2":"data.insert(1, \"male\", \"0\" or \"1\")     ","ed570e62":"data.insert(1, \"female\", \"0\" or \"1\" )","f86dca0b":"list(data.columns.values)","0d5fd302":"data[\"female\"] = data[\"SEX\"].copy()\n","cf125b11":"data[\"female\"] = data[\"female\"].replace(['female','male'],['1','0'])","0076dc6a":"data[\"male\"] = data[\"SEX\"].copy()","54d11227":"data[\"male\"] = data[\"male\"].replace(['male','female'],['1','0'])","43ce8290":"pd.set_option('display.max_columns', 10)\ndata.EDUCATION.unique()","061feea9":"data[\"EDUCATION\"] = data[\"EDUCATION\"].replace(['others', None, 0],'0')","ea1a630f":"data[\"EDUCATION\"] = data[\"EDUCATION\"].replace(['high school', 'graduate school', 'university'],['1','2','3'])\n","c766eefa":"pd.set_option('display.max_columns', 10)\ndata.EDUCATION.unique()","b556386d":"pd.set_option('display.max_columns', 10)\ndata.MARRIAGE.unique()","2bab6426":"data[\"MARRIAGE\"] = data[\"MARRIAGE\"].replace([None, 0],'0')\n","f58a70ab":"data[\"MARRIAGE\"] = data[\"MARRIAGE\"].replace(['single', 'married'],['1','2'])\n","d42184ec":"data.nunique()","72414bdf":"data.columns","d940da04":"numeric_features = ['LIMIT_BAL', 'male', 'female', 'EDUCATION', 'MARRIAGE',\n       'AGE','PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6',\n       'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5',\n       'BILL_AMT6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5',\n       'PAY_AMT6']\nlabel = ['default payment next month']\nall_features = numeric_features + label ","d3a3d7ae":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\ndata['default payment next month'].value_counts().plot.hist(bins=70)\nplt.show()\n\ndata['default payment next month'].plot.hist(bins=10)\nplt.show()","713399ec":"data['default payment next month'].value_counts(ascending=True)\n","bed21f8b":"# Display correlation \nf, ax = plt.subplots(figsize=(32, 26))\ncorr = data.corr()\nmp = sns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax, annot = True)\nmp.set_title(label='dataset correlation', fontsize=20)","cb9ef715":"print('all_features:', data[all_features].select_dtypes(include=np.number).columns)\n","5133e0a5":"data[numeric_features].select_dtypes(include=np.number).columns","171b7cb3":"data[numeric_features] = data[numeric_features].astype(float)","69c0280a":"data[label] = data[label].astype(float)","b8f7bbb3":"data[\"ID\"] = data['ID'].astype(str)","ef656a02":"data[\"SEX\"] = data[\"SEX\"].astype(str)","dff57fc4":"data.info()","c3bba6ac":"X = data[['LIMIT_BAL', 'male', 'female', 'EDUCATION', 'MARRIAGE',\n       'AGE','PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6',\n       'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5',\n       'BILL_AMT6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5',\n       'PAY_AMT6']].values\nX[0:24]","ff1e82ab":"y = data[\"default payment next month\"]\ny[0:24]","d286c2a6":"X_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.2, random_state=23)","ae32a2b9":"drugTree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)\ndrugTree # it shows the default parameters","af511b20":"drugTree.fit(X_trainset,y_trainset)","ec2dc2e4":"predTree = drugTree.predict(X_testset)","68d42c4f":"print (predTree [0:24])\nprint (y_testset [0:24])","05ebe2c9":"print(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_testset, predTree))","aabc3cc1":"# Fit the regressor, set max_depth = 3\nregr = DecisionTreeRegressor(max_depth=3, random_state=1234)\nmodel = regr.fit(X, y)","52069225":"text_representation = tree.export_text(regr)\nprint(text_representation)","0906db12":"fig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(regr, feature_names=data['default payment next month'] , filled=True)","fc43330c":"## 1. <a name=\"1\">Import libraries<\/a>\n(<a href=\"#0\">Go to top<\/a>)","4a5085a7":"# <a name=\"0\"> Decision Tree Model\n\nIn this notebook, we build, train, and tune Decision Tree Classifier to predict the \"default payment next month\" field  if client will default the payment (1) or not (0) .\nInput: historical customers data.\n\n1. <a href=\"#1\">Import libraries<\/a>\n2. <a href=\"#2\">Read the dataset<\/a>\n3. <a href=\"#3\">Exploratory Data Analysis<\/a>\n4. <a href=\"#4\">Pre-processing<\/a>\n5. <a href=\"#5\">Setting up the Decision Tree<\/a>\n6. <a href=\"#6\">Modeling<\/a>\n7. <a href=\"#7\">Prediction<\/a>\n8. <a href=\"#8\">Evaluation<\/a>\n9. <a href=\"#9\">Visualization<\/a>","8d3e9c4d":"### by\/Alaa Hassan","60a680b3":"#### Target distribution\n\nCheck target distribution.","1fedc655":"## 8. <a name=\"8\">Evaluation<\/a>\n(<a href=\"#0\">Go to top<\/a>)","a37256ff":"# Default of credit card clients model","bc642976":"## 7. <a name=\"7\">Prediction<\/a>\n(<a href=\"#0\">Go to top<\/a>)\n\nLet's make some predictions on the testing dataset and store it into a variable called predTree.","edbb8966":"## 3. <a name=\"3\">Exploratory Data Analysis<\/a>\n(<a href=\"#0\">Go to top<\/a>)","251738c7":"## 5. <a name=\"5\">Setting up the Decision Tree<\/a>\n(<a href=\"#0\">Go to top<\/a>)","324fbd2e":"## 6. <a name=\"6\">Modeling<\/a>\n(<a href=\"#0\">Go to top<\/a>)","8ca04d10":"##### Replace 'SEX' column with 'male' and 'female' columns","c272f188":"## 9. <a name=\"9\">Visualization<\/a>\n(<a href=\"#0\">Go to top<\/a>)","10fd725d":"We will first create an instance of the DecisionTreeClassifier called drugTree.\n\nInside of the classifier, specify criterion=\"entropy\" so we can see the information gain of each node","c9c72562":"## 2. <a name=\"2\">Read the dataset<\/a>\n(<a href=\"#0\">Go to top<\/a>)","7e8dd4f4":"## 4. <a name=\"4\">Pre-processing<\/a>\n(<a href=\"#0\">Go to top<\/a>)"}}