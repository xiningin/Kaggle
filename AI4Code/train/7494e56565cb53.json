{"cell_type":{"8edb4bef":"code","a22f6aec":"code","4ba05229":"code","4ca16fc8":"code","4d5a3e08":"code","bc271e83":"code","467da1b3":"code","7e6b1197":"code","b3954a90":"code","746da0b4":"code","b94c1ccb":"code","15e6c14a":"code","d385202d":"code","abe3d676":"code","191d8d4d":"code","cfa82695":"code","ef3655bc":"code","7408d9dc":"code","dda79b90":"code","343c71bb":"code","47321c49":"markdown","589cad71":"markdown"},"source":{"8edb4bef":"import numpy as np\nimport pandas as pd\nimport os\nimport glob\nimport matplotlib.pyplot as plt\nimport cv2\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score","a22f6aec":"train_gen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_gen = ImageDataGenerator(rescale = 1.\/255)\n","4ba05229":"Train = train_gen.flow_from_directory(\n    \"..\/input\/chest-xray-pneumonia\/chest_xray\/train\",\n    target_size=(64, 64),\n    batch_size=32\n)\n\nVal= test_gen.flow_from_directory(\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\",\n    target_size=(64,64),\n    batch_size=32\n    )\n\ntest = test_gen.flow_from_directory(\n    \"..\/input\/chest-xray-pneumonia\/chest_xray\/test\",\n    target_size=(64,64),\n    batch_size=32\n)","4ca16fc8":"DIR = \"..\/input\/chest-xray-pneumonia\/chest_xray\/\"\nsets = [\"train\", \"test\", \"val\"]\nall_pneumonia = []\nall_normal = []\n\nfor cat in sets:\n    path = os.path.join(DIR, cat)\n    norm = glob.glob(os.path.join(path, \"NORMAL\/*.jpeg\"))\n    pneu = glob.glob(os.path.join(path, \"PNEUMONIA\/*.jpeg\"))\n    all_normal.extend(norm)\n    all_pneumonia.extend(pneu)","4d5a3e08":"labels = ['Nomal', 'Pneumonia']\ntargets = [len(all_normal), len(all_pneumonia)]\n\nplt.figure(figsize=(20, 10))\nplt.pie(x=targets, labels=labels, autopct=\"%1.1f%%\", explode=(0.05, 0.05))\nplt.title(\"Image Category Distribution\")\nplt.show()","bc271e83":"plt.figure(figsize = (12,12))\nfor i in range(4):\n    plt.subplot(1, 4, i+1)\n    img = cv2.imread(all_pneumonia[i])\n    plt.imshow(img)\n    plt.title('Pneumonia : 1')\n    plt.tight_layout()\nplt.show()\n\nplt.figure(figsize = (12,12))\nfor i in range(4):\n    plt.subplot(2, 4, i+1)\n    img = cv2.imread(all_normal[i])\n    plt.imshow(img)\n    plt.title('UNINFECTED : 0')\n    plt.tight_layout()\nplt.show()\n","467da1b3":"# let's build the CNN model\n\ncnn = models.Sequential()\n\n#Convolution\ncnn.add(layers.Conv2D(32, (3, 3), activation=\"relu\", input_shape=(64, 64, 3)))\n\n#Pooling\ncnn.add(layers.MaxPooling2D(pool_size = (2, 2)))\n\ncnn.add(layers.Dropout(0.2))\n\n# 2nd Convolution\ncnn.add(layers.Conv2D(32, (3, 3), activation=\"relu\"))\ncnn.add(layers.Dropout(0.2))\n\n# 2nd Pooling layer\ncnn.add(layers.MaxPooling2D(pool_size = (2, 2)))\ncnn.add(layers.Dropout(0.2))\n\n# Flatten the layer\ncnn.add(layers.Flatten())\n\n# Fully Connected Layers\ncnn.add(layers.Dense(activation = 'relu', units = 256))\ncnn.add(layers.Dropout(0.2))\ncnn.add(layers.Dense(activation = 'relu', units = 128))\ncnn.add(layers.Dropout(0.2))\ncnn.add(layers.Dense(activation = 'sigmoid', units = 2))\n","7e6b1197":"cnn.summary()","b3954a90":"cnn.compile(optimizer='adam',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nhistory= cnn.fit_generator(Train,\n                 epochs=10,\n                 steps_per_epoch = 100,\n                 validation_data=Val)","746da0b4":"history= cnn.fit_generator(test,\n                 epochs=10,\n                 steps_per_epoch = 100,\n                 validation_data=Val)\n","b94c1ccb":"print('Test Set Accuracy is',cnn.evaluate_generator(test)[1]*100,'%')","15e6c14a":"print('Train Set Accuracy is',cnn.evaluate_generator(Train)[1]*100,'%')","d385202d":"y_pred = cnn.predict_generator(test)","abe3d676":"Risks = y_pred[:,1]\nPrediction = np.argmax(y_pred, axis=1)","191d8d4d":"Risks","cfa82695":"Prediction","ef3655bc":"High_Risk = [pred for pred in Risks if pred > 0.8]\nLow_Risk = [pred for pred in Risks if pred <= 0.4]","7408d9dc":"print (len(High_Risk))\n\n","dda79b90":"print (len(Low_Risk))\nprint(len(test))\nprint(len(Train))","343c71bb":"from sklearn.metrics import f1_score\n#f1_score(y_pred, test)","47321c49":"Generating Train Test and Validation Datasets","589cad71":"**Exploratory Data Analysis**"}}