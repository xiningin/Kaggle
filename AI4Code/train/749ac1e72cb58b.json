{"cell_type":{"f070de7b":"code","0e7bdca9":"code","4b8ad402":"code","0e7bd83e":"code","b1f42a10":"code","bb6d756b":"code","b2fae83c":"code","ad60d6f2":"code","4fec22cd":"code","7907b4b1":"code","1cb95aa6":"code","807350e3":"code","b64b2c40":"code","e54ba6bb":"code","f4ab2216":"code","90c153b5":"code","5f722a28":"code","40835129":"code","cf137d1a":"code","9e70a4da":"code","089a9f8f":"code","f6fa6d14":"code","7bda2842":"code","025257a5":"code","61cc7856":"code","04258d70":"code","dce3f5ca":"code","b32a2886":"code","d98ae410":"code","ce2e013a":"code","0b001ce0":"code","6254276b":"markdown","fffc3453":"markdown","286a735c":"markdown","c3fd1d58":"markdown","c55004f0":"markdown","64f97c36":"markdown","25fe0244":"markdown","63ba38c6":"markdown","cc50823f":"markdown","0ee0b402":"markdown","2380e553":"markdown","46491507":"markdown","44fbef35":"markdown","553707f2":"markdown"},"source":{"f070de7b":"!pip install ipinfo","0e7bdca9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ipinfo\nimport json\nfrom tqdm import tqdm\n\nfrom category_encoders.hashing import HashingEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom kaggle_secrets import UserSecretsClient","4b8ad402":"user_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"ipinfo\")\nipinfo_handler = ipinfo.getHandler(secret_value_0)\ndataset_folder = \"..\/input\/cicdarknet2020-internet-traffic\/\" ","0e7bd83e":"data = pd.read_csv(dataset_folder + \"Darknet.CSV\", low_memory=False, error_bad_lines=False)\ndata.head()","b1f42a10":"samples = data.copy()","bb6d756b":"traffic_labels = samples[\"Label\"].unique()\nprint(traffic_labels)\ntraffic_type_labels = samples[\"Label.1\"].unique()\nprint(traffic_type_labels)","b2fae83c":"samples['Label.1'].loc[samples['Label.1'] == 'AUDIO-STREAMING'] = 'Audio-Streaming'\nsamples['Label.1'].loc[samples['Label.1'] == 'File-transfer'] = 'File-Transfer'\nsamples['Label.1'].loc[samples['Label.1'] == 'Video-streaming'] = 'Video-Streaming'\n\ntraffic_type_labels = samples[\"Label.1\"].unique()\nprint(traffic_type_labels)","ad60d6f2":"samples['Label'].loc[(samples['Label'] == 'Non-Tor') | (samples['Label'] == 'NonVPN')] = 'Benign'\nsamples['Label'].loc[(samples['Label'] == 'Tor') | (samples['Label'] == 'VPN')] = 'Darknet'\n\ntraffic_labels = samples[\"Label\"].unique()\nprint(traffic_labels)","4fec22cd":"hours = []\nfor timestamp in samples['Timestamp']:\n    hora = int(timestamp.split()[1].split(':')[0])\n    hours.append(hora)\nsamples['hour'] = hours\nprint(samples[['Timestamp', 'hour']][:5])","7907b4b1":"def create_grams(ip):\n    parts = ip.split('.')\n    one_gram = parts[0]\n    two_gram = parts[0] + \" \" + parts[1]\n    three_gram = parts[0] + \" \" + parts[1] + \" \" + parts[2]\n    return one_gram, two_gram, three_gram","1cb95aa6":"src_one_gram = []\nsrc_two_gram = []\nsrc_three_gram = []\ndst_one_gram = []\ndst_two_gram = []\ndst_three_gram = []\n\nfor src_ip, dst_ip in zip(samples[\"Src IP\"], samples[\"Dst IP\"]): \n    src_one, src_two, src_three = create_grams(src_ip)\n    src_one_gram.append(src_one)\n    src_two_gram.append(src_two)\n    src_three_gram.append(src_three)\n    dst_one, dst_two, dst_three = create_grams(dst_ip)\n    dst_one_gram.append(dst_one)\n    dst_two_gram.append(dst_two)\n    dst_three_gram.append(dst_three)\n\nsamples[\"src_ip_1gram\"] = src_one_gram\nsamples[\"src_ip_2gram\"] = src_two_gram\nsamples[\"src_ip_3gram\"] = src_three_gram\n\nsamples[\"dst_ip_1gram\"] = dst_one_gram\nsamples[\"dst_ip_2gram\"] = dst_two_gram\nsamples[\"dst_ip_3gram\"] = dst_three_gram","807350e3":"print(samples[[\"Src IP\",\"src_ip_1gram\",\"src_ip_2gram\",\"src_ip_3gram\"]][200:205])\nprint(samples[[\"Dst IP\",\"dst_ip_1gram\",\"dst_ip_2gram\",\"dst_ip_3gram\"]][:5])","b64b2c40":"def get_ip_detail(ip, ip_dict, repeated):\n    if ip not in ip_dict.keys():\n        details = ipinfo_handler.getDetails(ip)\n        ip_dict[ip] = details.all\n    else:\n        repeated += 1\n    return repeated\n\ndef dump_ips(ip_dict, folder):\n    j = json.dumps(ip_dict)\n    f = open(folder+\"ips_dict.json\",\"w\")\n    f.write(j)\n    f.close()\n\ndef load_ips(file):\n    data = {}\n    with open(file) as json_file:\n        data = json.load(json_file)\n    return data","e54ba6bb":"ip_dict = load_ips(\"..\/input\/ips-information\/ips_dict.json\")","f4ab2216":"ips = np.concatenate((samples[\"Src IP\"].unique(), samples[\"Dst IP\"].unique())) \nfor i in tqdm(range(len(ips))):\n    get_ip_detail(ips[i], ip_dict, 0)\ndump_ips(ip_dict, \"\")","90c153b5":"ips_tuple = zip(samples[\"Src IP\"], samples[\"Dst IP\"])\ndst_ip_country = []\nsrc_ip_country = []\nsrc_bogon = []\ndst_bogon = []\n\nfor src_ip, dst_ip in tqdm(ips_tuple, total=len(samples[\"Src IP\"])):\n    if 'country' in ip_dict[dst_ip].keys():\n        dst_ip_country.append(ip_dict[dst_ip]['country'])\n    else:\n        dst_ip_country.append(\"\")\n    if 'country' in ip_dict[src_ip].keys():\n        src_ip_country.append(ip_dict[src_ip]['country'])\n    else:\n        src_ip_country.append(\"\")\n    if 'bogon' in ip_dict[dst_ip].keys():\n        dst_bogon.append(ip_dict[dst_ip]['bogon'])\n    else:\n        dst_bogon.append(False)\n    if 'bogon' in ip_dict[src_ip].keys():\n        src_bogon.append(ip_dict[src_ip]['bogon'])\n    else:\n        src_bogon.append(False)\nsamples['src_ip_country'] = src_ip_country\nsamples['dst_ip_country'] = dst_ip_country\nsamples['src_bogon'] = src_bogon\nsamples['dst_bogon'] = dst_bogon","5f722a28":"real_columns = ['Flow Duration', 'Total Fwd Packet', 'Total Bwd packets', 'Total Length of Fwd Packet', 'Total Length of Bwd Packet', 'Fwd Packet Length Max', 'Fwd Packet Length Min', 'Fwd Packet Length Mean', 'Fwd Packet Length Std', 'Bwd Packet Length Max', 'Bwd Packet Length Min', 'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes\/s', 'Flow Packets\/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max', 'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std', 'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean', 'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags', 'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length', 'Bwd Header Length', 'Fwd Packets\/s', 'Bwd Packets\/s', 'Packet Length Min', 'Packet Length Max', 'Packet Length Mean', 'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count', 'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count', 'URG Flag Count', 'CWE Flag Count', 'ECE Flag Count', 'Down\/Up Ratio', 'Average Packet Size', 'Fwd Segment Size Avg', 'Bwd Segment Size Avg', 'Fwd Bytes\/Bulk Avg', 'Fwd Packet\/Bulk Avg', 'Fwd Bulk Rate Avg', 'Bwd Bytes\/Bulk Avg', 'Bwd Packet\/Bulk Avg', 'Bwd Bulk Rate Avg', 'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets', 'Subflow Bwd Bytes', 'FWD Init Win Bytes', 'Bwd Init Win Bytes', 'Fwd Act Data Pkts', 'Fwd Seg Size Min']\nprint(real_columns)","40835129":"is_na_cols = samples.columns[samples.isna().sum() > 0]\nsamples.isna().sum()[is_na_cols] ","cf137d1a":"samples = samples.dropna()\nsamples.isna().sum()[is_na_cols] ","9e70a4da":"samples[real_columns] = samples[real_columns].astype(np.float64)\nsamples[real_columns] = samples[real_columns].replace([np.inf, -np.inf], np.nan)\nsamples[real_columns] = samples[real_columns].dropna()","089a9f8f":"model_samples = samples.copy()\n\ndel model_samples['Flow ID']\ndel model_samples['Timestamp']\ndel model_samples['Src IP']\ndel model_samples['Dst IP']","f6fa6d14":"cols = np.concatenate((model_samples.columns[81:], model_samples.columns[:81]))\nmodel_samples = model_samples[cols]","7bda2842":"model_samples.columns","025257a5":"hash_enc_cols = ['src_ip_1gram', 'src_ip_2gram', 'src_ip_3gram', 'dst_ip_1gram',\n 'dst_ip_2gram', 'dst_ip_3gram']\nprint(hash_enc_cols)\nord_enc_cols = ['src_ip_country','dst_ip_country']\nprint(ord_enc_cols)","61cc7856":"hash_enc = HashingEncoder(cols=hash_enc_cols, n_components=100).fit(model_samples)\nmodel_samples = hash_enc.transform(model_samples)\nmodel_samples.head()","04258d70":"ord_enc = OrdinalEncoder()\nord_enc.fit(model_samples[ord_enc_cols])\nmodel_samples[ord_enc_cols] = ord_enc.transform(model_samples[ord_enc_cols])\nmodel_samples[ord_enc_cols] = model_samples[ord_enc_cols].astype(int)\nmodel_samples[ord_enc_cols].head() ","dce3f5ca":"print(model_samples.columns)","b32a2886":"scaler = StandardScaler().fit(model_samples[real_columns])\nmodel_samples[real_columns] = scaler.transform(model_samples[real_columns])\nmodel_samples[real_columns].head()","d98ae410":"samples = samples.dropna()\nmodel_samples = model_samples.dropna()\nprint(samples[samples.columns[samples.isna().sum()>0]].isna().sum())","ce2e013a":"samples.to_csv('darknet_dataset_processed.csv', index=False)","0b001ce0":"model_samples.to_csv('darknet_dataset_processed_encoded.csv', index=False)","6254276b":"# Handling missing and infinity data","fffc3453":"# Irrelevant attributes removal","286a735c":"# Source and destination ips feature extraction","c3fd1d58":"# Features encoding","c55004f0":"## Categorical","64f97c36":"<center><h2><b>CIC-Darknet2020<\/b><\/h2><\/center>\n<center><h2><b>Preprocessing<\/b><\/h2><\/center>","25fe0244":"## unigram, bigram and trigram extraction","63ba38c6":"## Ips details extraction","cc50823f":"# Libraries importing and configuration","0ee0b402":"# Timestamp feature extraction","2380e553":"## Numerical features scaling","46491507":"# Labels correction","44fbef35":"## Duplicates fix","553707f2":"## Grouping in Benign and Darknet"}}