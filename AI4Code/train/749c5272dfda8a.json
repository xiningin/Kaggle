{"cell_type":{"4fe5608b":"code","0f4aadeb":"code","d5be42a7":"code","e3ab9f4d":"code","d51bbc19":"code","401112d5":"code","dbda5e23":"code","7d1ccc85":"code","1e60a196":"code","fd1f33c0":"code","c4e573cf":"code","8c9c9663":"code","435193b3":"code","2417eb4e":"code","53776f66":"code","5cc75604":"code","f79a4d1c":"code","b3b91b8d":"code","74beefca":"code","02d10a00":"code","23e5ef10":"code","ed14de8b":"code","ccad1a0d":"code","cc6fcb59":"code","7427b896":"code","9f6a32bb":"code","66db76f8":"code","9fd1a7e0":"code","6d973166":"code","009fd9ae":"code","a9025c77":"code","9c7618e2":"code","bc3e11ac":"code","b15373f1":"code","5ab7a086":"code","d31f1f7e":"code","b1a418db":"code","377f63a0":"code","e8bd4db1":"code","c381f832":"code","4bc06bbb":"code","dda4879d":"code","6b22f506":"markdown","d3e3b1aa":"markdown","fc60dd1a":"markdown","757c334a":"markdown","dabd430b":"markdown","5c2564af":"markdown","0c2cd5f7":"markdown","2c3f0c66":"markdown","14be4fc1":"markdown","a11eef40":"markdown","cb897922":"markdown","dbba51ec":"markdown","f05704f0":"markdown","9523855f":"markdown","9fd281d4":"markdown","c3db300d":"markdown","e088ebb5":"markdown","a4f600a2":"markdown","fcb07167":"markdown","2713ccdd":"markdown","02014ca1":"markdown","74a3be6f":"markdown","d4b1594b":"markdown","a3c4df93":"markdown","252c1081":"markdown","14fccf71":"markdown","ed7c5095":"markdown","a2491823":"markdown","37aff4a0":"markdown","d2c56750":"markdown","dd103f4c":"markdown","9c44fb2c":"markdown","13fb8943":"markdown","537fd74b":"markdown","3d3f0e5b":"markdown","fec27713":"markdown","12d10f7e":"markdown","e36216a4":"markdown","50cd1d06":"markdown","29bb6a30":"markdown","d67a1775":"markdown","439fa46f":"markdown"},"source":{"4fe5608b":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0f4aadeb":"df=pd.read_csv('..\/input\/Iris.csv')","d5be42a7":"df","e3ab9f4d":"df.head()","d51bbc19":"df.sample(5)","401112d5":"df.columns","dbda5e23":"df.shape","7d1ccc85":"df.info()","1e60a196":"df.describe()","fd1f33c0":"df.isnull().sum()","c4e573cf":"df.groupby('Species').count()","8c9c9663":"# Modify the graph above by assigning each species an individual color.\nsns.FacetGrid(df, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\") \\\n   .add_legend()\nplt.show()","435193b3":"sns.pairplot(df)","2417eb4e":"df.plot(kind='box', subplots=True, layout=(2,3), sharex=False, sharey=False)\nplt.figure()\n#This gives us a much clearer idea of the distribution of the input attributes:","53776f66":"# To plot the species data using a box plot:\n\nsns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=df )\nplt.show()","5cc75604":"ax= sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=df)\nax= sns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=df, jitter=True, edgecolor=\"gray\")\nplt.show()","f79a4d1c":"# Tweek the plot above to change fill and border color color using ax.artists.\n# Assing ax.artists a variable name, and insert the box number into the corresponding brackets\n\nax= sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=df)\nax= sns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=df, jitter=True, edgecolor=\"gray\")\n\nboxtwo = ax.artists[2]\nboxtwo.set_facecolor('red')\nboxtwo.set_edgecolor('black')\nboxthree=ax.artists[1]\nboxthree.set_facecolor('yellow')\nboxthree.set_edgecolor('black')\n\nplt.show()","b3b91b8d":"# histograms\ndf.hist(figsize=(15,20))\nplt.figure()","74beefca":"df[\"PetalLengthCm\"].hist();","02d10a00":"# violinplots on petal-length for each species\nsns.violinplot(data=df,x=\"Species\", y=\"PetalLengthCm\")","23e5ef10":"# Use seaborn's jointplot to make a hexagonal bin plot\n#Set desired size and ratio and choose a color.\nsns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=df, size=10,ratio=10, kind='hex',color='green')\nplt.show()","ed14de8b":"sns.heatmap(df.corr())","ccad1a0d":"sns.distplot(df['SepalLengthCm'])","cc6fcb59":"sns.distplot(df['PetalLengthCm'])","7427b896":"sns.set_style('whitegrid')\nsns.countplot(x='Species',data=df,palette='RdBu_r')","9f6a32bb":"sns.distplot(df['SepalLengthCm'].dropna(),kde=False,color='darkred',bins=30)","66db76f8":"sns.distplot(df['SepalWidthCm'].dropna(),kde=False,color='green',bins=30)","9fd1a7e0":"cols = df.columns\nfeatures = cols[0:4]\nlabels = cols[4]\nprint(features)\nprint(labels)","6d973166":"#Well conditioned data will have zero mean and equal variance\n#We get this automattically when we calculate the Z Scores for the data\n\ndata_norm = pd.DataFrame(df)\n\nfor feature in features:\n    df[feature] = (df[feature] - df[feature].mean())\/df[feature].std()\n\n#Show that should now have zero mean\nprint(\"Averages\")\nprint(df.mean())\n\nprint(\"\\n Deviations\")\n#Show that we have equal variance\nprint(pow(df.std(),2))","009fd9ae":"X = df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\ny = df['Species']","a9025c77":"from sklearn.model_selection import train_test_split","9c7618e2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)","bc3e11ac":"from sklearn.linear_model import LogisticRegression","b15373f1":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","5ab7a086":"predictions = logmodel.predict(X_test)","d31f1f7e":"from sklearn.metrics import classification_report,confusion_matrix","b1a418db":"print(classification_report(y_test,predictions))","377f63a0":"#Using SVM\nfrom sklearn.svm import SVC\nclassifier = SVC()\nclassifier.fit(X_train, y_train)","e8bd4db1":"y_pred = classifier.predict(X_test)","c381f832":"from sklearn.metrics import confusion_matrix,classification_report\ncm = confusion_matrix(y_test, y_pred)","4bc06bbb":"cm","dda4879d":"print(classification_report(y_test,predictions))","6b22f506":"**The Data**","d3e3b1aa":"**Histogram**","fc60dd1a":"**Using SVM**","757c334a":"**PairPlot**","dabd430b":"**Heatmap**","5c2564af":"**In this kernel, I have tried to cover all the parts related to the process of Machine Learning algorithm logistic regression and Support vector machine with a variety of Python packages . I hope to get your feedback to improve it. **","0c2cd5f7":"**Logistic regression**\nLogistic regression is the appropriate regression analysis to conduct when the dependent variable is dichotomous (binary). Like all regression analyses, the logistic regression is a predictive analysis statisticssolutions.\n\nIn statistics, the logistic model (or logit model) is a widely used statistical model that, in its basic form, uses a logistic function to model a binary dependent variable; many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model; it is a form of binomial regression. Mathematically, a binary logistic model has a dependent variable with two possible values, such as pass\/fail, win\/lose, alive\/dead or healthy\/sick; these are represented by an indicator variable, where the two values are labeled \"0\" and \"1\"","2c3f0c66":"**Distplot**","14be4fc1":"To pop up 5 random rows from the data set, we can use sample(5) function","a11eef40":"**Conclusion**","cb897922":"**Train Test Split**","dbba51ec":"**Find Columns**","f05704f0":"**Training and Predicting**","9523855f":"**Evaluation**","9fd281d4":"**Top five values**","c3db300d":"**Jointplot**","e088ebb5":"In descriptive statistics, a box plot or boxplot is a method for graphically depicting groups of numerical data through their quartiles. Box plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram.[wikipedia]","a4f600a2":"**Data Cleaning**","fcb07167":"We can also create a histogram of each input variable to get an idea of the distribution.","2713ccdd":"**Building a Logistic Regression model**","02014ca1":"Show the counts of observations in each categorical bin using bars.","74a3be6f":"**Volinplots**","d4b1594b":"To print dataset columns, we can use columns atribute","a3c4df93":"![](http:\/\/)Flexibly plot a univariate distribution of observations.","252c1081":"When dealing with real-world data, dirty data is the norm rather than the exception. We continuously need to predict correct values, impute missing ones, and find links between various data artefacts such as schemas and records. We need to stop treating data cleaning as a piecemeal exercise (resolving different types of errors in isolation), and instead leverage all signals and resources (such as constraints, available statistics, and dictionaries) to accurately predict corrective actions.[12]","14fccf71":"To give a statistical summary about the dataset, we can use **describe()","ed7c5095":"**Shape of dataset**","a2491823":"Let's start by reading in the Iris.csv file into a pandas dataframe.","37aff4a0":"Columns Id:-SPL-SPW-PTL-PTW(CM) SepalLengthCm:-Length of the sepal (in cm) SepalWidthCm:-Width of the sepal (in cm) PetalLengthCm:-Length of the petal (in cm) PetalWidthCm:-Width of the petal (in cm) Species:-Species name","d2c56750":"Scatter plot Purpose To identify the type of relationship (if any) between two quantitative variables","dd103f4c":"Plot pairwise relationships in a dataset","9c44fb2c":"Plot rectangular data as a color-encoded matrix.","13fb8943":"**Describe of the dataset**","537fd74b":"**Scatter plot**","3d3f0e5b":"It looks like perhaps two of the input variables have a Gaussian distribution. This is useful to note as we can use algorithms that can exploit this assumption.","fec27713":"Let's start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training).","12d10f7e":"**Information about dataset **","e36216a4":"**Countplot**","50cd1d06":"**BarPlot**","29bb6a30":"***To check out how many null info are on the dataset, we can use **isnull().sum().***","d67a1775":"We can check precision,recall,f1-score using classification report!","439fa46f":"Let's move on to evaluate our model!"}}