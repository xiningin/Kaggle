{"cell_type":{"fc670fc0":"code","77b6c3e9":"code","8bcc4a68":"markdown","26450f21":"markdown","b8516f54":"markdown","2f8e4573":"markdown"},"source":{"fc670fc0":"!python3.7 -m pip install terminaltables","77b6c3e9":"from terminaltables import AsciiTable\n# ^^^ NOTE: use pip to install\n# terminaltables to run locally\n\ndef main():\n    _list = [12,13,18,19,20,31,35,39]\n    key = 30\n\n    print('List; Key ')\n    print(_list, end='')\n    print('; '+str(key))\n    _lower = getInsetValue(_list, key)\n    print('New List: ',end='')\n    setInsertValue(_lower, _list, key)\n\ndef getInsetValue(_list:list, key:int):\n    _table = []\n    _lower = 0  # first value of a list\n    _upper = len(_list)  # len of the list\n    _table.append(  # Headders for Ascii table\n        ['Lower i', 'Upper i', 'Test 1', 'Middle i', 'Test 2'] \n    )\n    while _lower<_upper:\n        _middle = (_lower+_upper)\/2\n        if _middle%2==1:\n            _middle-=0.5  # Will round to the lower value\n        _middle = int(_middle)  # converts to integer\n        _table.append([\n                _lower, _upper, _lower<_upper, _middle, key>_list[_middle]\n            ])\n        if key>_list[_middle]:\n            _lower = _middle+1\n        else:\n            _upper = _middle\n    _table.append([  # Last one; as its False it wont add it.\n                _lower, _upper, _lower<_upper, _middle, key>_list[_middle]\n    ])\n    table = AsciiTable(_table)\n    print(table.table)\n    print(\"Test 1 = (Lower i)<(Upper i)\")\n    print(\"Test 2 = (Key)>(List[Middle i])\")\n    print(\"Insert Value: \", _lower)\n    return _lower  # Returns index\n\ndef setInsertValue(_lower:int, _list:list, key:int):\n    _list.append(_list[len(_list)-1])  # ? Does it matter what value it is?\n\n    # -- An Example:\n    # [1,3,4,5,6,7] + [7] <-- does it matter what the value if, woundent it just be copyed in the while loop\n    # [1,3,4,5,6,7,7]\n    # [1,3,4,5,6,6,7]\n    # [1,3,4,5,5,6,7]\n    # ...\n    # [1,3,3,4,5,6,7]\n    # [1,2,3,4,5,6,7]\n    \n    index = len(_list)-1\n    while index > _lower:\n        _list[index] = _list[index - 1]\n        index = index - 1\n    _list[_lower] = key\n    print(_list)\n\nif __name__ == \"__main__\":\n    main()","8bcc4a68":"## Reference \n\n### Links:\n\n* [Binary Search's Code on Pastebin(text)](https:\/\/pastebin.com\/HeFrdTir)\n* [`repl.it` result on Pastebin(text)](https:\/\/pastebin.com\/4adWQjUP)\n* [`repl.it` result on imgur(image)](https:\/\/imgur.com\/a\/G96iBFR)\n* [First ASCII digram on Pastebin(text)](https:\/\/pastebin.com\/nZ2qgTd3)\n* [Second ASCII digram on Pastebin(text)](https:\/\/pastebin.com\/CGvKaDx4)\n* [First ASCII digram on imgur(image)](https:\/\/imgur.com\/gallery\/miDrXeO)\n* [Second ASCII digram on imgur(image)](https:\/\/imgur.com\/gallery\/zNdByGp)","26450f21":"## Usage\n\nSimply run the the code block bellow","b8516f54":"# Binary Search\n\nBinary Search in Python 3.7","2f8e4573":"## Installation\n\nUse python pip package manager:"}}