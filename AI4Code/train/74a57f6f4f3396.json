{"cell_type":{"5615593f":"code","fd4611ff":"code","bf9e3b69":"code","25c4c0b1":"code","86344c03":"code","31ab432c":"code","5a67f141":"code","f03ce64c":"code","a8eec192":"code","e1a29df2":"code","f9688733":"code","49c71e3c":"code","66566aa3":"markdown","c91853d0":"markdown","ff6720b0":"markdown","4e2aefc9":"markdown","3a3e9436":"markdown","2f5bb193":"markdown","57e10c4d":"markdown","b5bd0b42":"markdown","a91f4838":"markdown","f5dbe654":"markdown","7f197f81":"markdown","41a400e8":"markdown","4ff069b6":"markdown","726cb546":"markdown","30cbc77b":"markdown","3ef7318e":"markdown"},"source":{"5615593f":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime\nfrom scipy import integrate, optimize\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ML libraries\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nfrom numpy import array\nfrom pandas import read_csv\nfrom matplotlib import pyplot\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","fd4611ff":"dataset = pd.read_csv('..\/input\/covid-india1\/covid_india.csv',encoding='cp1252')\n\n#train.Province_State.fillna(\"None\", inplace=True)\nprint(dataset.shape)\nprint(dataset.head(5))\nprint(dataset.describe())\n\nprint(\"Number of states: \", dataset['Detected State'].nunique())\nprint(\"Max date\", dataset['Date Announced'])\nprint(\"Dates go from day\", max(dataset['Date Announced']), \"to day\", min(dataset['Date Announced']), \", a total of\", dataset['Date Announced'].nunique(), \"days\")\nprint(\"State with Districs informed: \", dataset.loc[dataset['Detected District']!='None']['Detected State'].unique())","bf9e3b69":"confirmed_total_date_india = dataset[['Patient Number','Date Announced']].groupby(['Date Announced']).count()\nprint(confirmed_total_date_india.sum)\nconfirmed_total_date_state= dataset[['Patient Number','Date Announced','Detected State','State Patient Number']].groupby(['Date Announced','Detected State']).count()\nprint(confirmed_total_date_state.head(5))\n\nda1=dataset.loc[dataset['Detected State'] == 'Tamil Nadu']\nconfirmed_total_date_tamil_nadu = da1[['Patient Number','Date Announced','Detected State','State Patient Number']].groupby(['Date Announced']).count()\nprint(confirmed_total_date_tamil_nadu)\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\nconfirmed_total_date_india.plot(ax=ax1)\nax1.set_title(\"Indian confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nconfirmed_total_date_tamil_nadu.plot(ax=ax2,color='orange')\nax2.set_title(\"Tamil Nadu confirmed cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","25c4c0b1":"da1=dataset.loc[dataset['Detected State'] == 'Kerala']\nconfirmed_total_date_kerala = da1[['Patient Number','Date Announced','Detected State','State Patient Number']].groupby(['Date Announced']).count()\n#print(confirmed_total_date_kerala)\n\nda1=dataset.loc[dataset['Detected State'] == 'Maharashtra']\nconfirmed_total_date_Maharashtra = da1[['Patient Number','Date Announced','Detected State','State Patient Number']].groupby(['Date Announced']).count()\n#print(confirmed_total_date_Maharashtra)\n\nda1=dataset.loc[dataset['Detected State'] == 'Karnataka']\nconfirmed_total_date_Karnataka = da1[['Patient Number','Date Announced','Detected State','State Patient Number']].groupby(['Date Announced']).count()\n#print(confirmed_total_date_Karnataka)\n\nda1=dataset.loc[dataset['Detected State'] == 'West Bengal']\nconfirmed_total_date_westbengal = da1[['Patient Number','Date Announced','Detected State','State Patient Number']].groupby(['Date Announced']).count()\n#print(confirmed_total_date_westbengal)\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\nconfirmed_total_date_kerala.plot(ax=ax1)\nax1.set_title(\"Kerala confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nconfirmed_total_date_Maharashtra.plot(ax=ax2,color='orange')\nax2.set_title(\"Maharastra confirmed cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\nconfirmed_total_date_Karnataka.plot(ax=ax1)\nax1.set_title(\"karnataka confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nconfirmed_total_date_westbengal.plot(ax=ax2,color='orange')\nax2.set_title(\"West Bengal confirmed cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)\n\n","86344c03":"pop_tn = 72147030.\npop_kerala = 33406061.\npop_wb = 91276115.\npop_ma = 112374333.\n\ntotal_date_tn_ConfirmedCases = confirmed_total_date_tamil_nadu\/pop_tn*100.\n\ntotal_date_kerala_ConfirmedCases = confirmed_total_date_kerala\/pop_kerala*100.\n\ntotal_date_wb_ConfirmedCases = confirmed_total_date_westbengal\/pop_wb*100.\n\ntotal_date_ma_ConfirmedCases = confirmed_total_date_Maharashtra\/pop_ma*100.\n\n\nplt.figure(figsize=(15,10))\nplt.subplot(2, 2, 1)\ntotal_date_tn_ConfirmedCases.plot(ax=plt.gca(), title='Tamil Nadu')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.0005)\n\nplt.subplot(2, 2, 2)\ntotal_date_kerala_ConfirmedCases.plot(ax=plt.gca(), title='Kerala')\nplt.ylim(0, 0.0005)\n\nplt.subplot(2, 2, 3)\ntotal_date_wb_ConfirmedCases.plot(ax=plt.gca(), title='WB')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.0005)\n\nplt.subplot(2, 2, 4)\ntotal_date_ma_ConfirmedCases.plot(ax=plt.gca(), title='MA')\nplt.ylim(0, 0.0005)","31ab432c":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","5a67f141":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible a, infected b and recovered r)\ndef rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","f03ce64c":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","a8eec192":"# Parameters of the model\nN = 13000000\nb0 = 0\nbeta = .7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","e1a29df2":"from sklearn.linear_model import LinearRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n\ndatasetcons = pd.read_csv('..\/input\/covidindia2\/covid_india_consolidated.csv',encoding='cp1252')\n\n#train.Province_State.fillna(\"None\", inplace=True)\nprint(datasetcons.shape) #47\nprint(datasetcons.head(5))\nprint(datasetcons.describe())\n\narray = datasetcons.values\n#print(array)\nX = array[:,2].reshape(-1,1)\ny = array[:,1].reshape(-1,1)\n#print('value of X',X)\n#print('value of Y',y)\n\n\n","f9688733":"# Split-out validation dataset\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)\n\n\n#print(X_train)\n#print(Y_train)\n#print(X_validation)\n\n#print(Y_validation)\nprint('Total X training data', len(X_train))\nprint('Total Y training data',len(Y_train))\n\nprint('Total X Test data',len(X_validation))\nprint('Total Y Test data',len(Y_validation))\n\n#print(type(X_train))\n#print(type(Y_train))","49c71e3c":"#try predicting\nregressor = LinearRegression()  \nregressor.fit(X_train, Y_train) \npredictions = regressor.predict(X_validation)\nprint(predictions)\nprint(Y_validation)\nplt.scatter(X_validation, Y_validation)\nplt.plot(X_validation, predictions, color='red')\n\npredict= regressor.predict(np.array([48,49,50,51,52,53,54,55,56,57,58,59,60]).reshape(-1,1))\nprint(predict)\nplt.scatter(np.array([48,49,50,51,52,53,54,55,56,57,58,59,60]), predict)\nplt.plot(np.array([48,49,50,51,52,53,54,55,56,57,58,59,60]), predict, color='black')\n\n#To retrieve the intercept:\nprint('Value of intercept a=',regressor.intercept_)\n#For retrieving the slope:\nprint('Value of slope m=',regressor.coef_)","66566aa3":" # 3. Predictions for the early stages of the transmission <a id=\"section3\"><\/a>\n\n","c91853d0":"1. ## 3.1. Linear Regression  <a id=\"section31\"><\/a>\nLinear regression attempts to model the relationship between two variables by fitting a linear equation to observed data. One variable is considered to be an explanatory variable, and the other is considered to be a dependent variable. For example, a modeler might want to relate the weights of individuals to their heights using a linear regression model.\nA linear regression line has an equation of the form Y = a + bX, where X is the explanatory variable and Y is the dependent variable. The slope of the line is b, and a is the intercept (the value of y when x = 0).\n\n","ff6720b0":"# 1. Exploratory data analysis (EDA) <a id=\"section1\"><\/a>\n\nFirst of all, let's take a look on the data structure:","4e2aefc9":"Results obtained for N=Indian population, only one initial infected case, $\\beta=0.7$, $\\gamma=0.2$ and a leap pass $h_s = 0.1$ are shown below:","3a3e9436":"And finally, to obtain the evolution of the disease we simply define the initial conditions and call the rk4 method:","2f5bb193":"**Observations**:\n\n* other than Kerala, all state's cases are upward trending","57e10c4d":"In order to solve the differential equations system, we develop a  4rth order [Runge-Kutta](https:\/\/en.wikipedia.org\/wiki\/Runge%E2%80%93Kutta_methods) method:","b5bd0b42":"## 2.1. Implementing the SIR model <a id=\"section21\"><\/a>\n\nSIR model can be implemented in many ways: from the differential equations governing the system, within a mean field approximation or running the dynamics in a social network (graph). For the sake of simplicity, I'vem chosen the first option, and we will simply run a numerical method (Runge-Kutta) to solve the differential equations system. \n\nThe functions governing the dif.eqs. are:","a91f4838":"In order to compare with world countries, the fraction got infected is very very less","f5dbe654":"## 1.2. Kerala, Karnataka, Maharashtra and WestBengal <a id=\"section12\"><\/a>\n","7f197f81":"**Observations**: The Indian curve shows that new cases are still increasing. 'Tamil Nadu' curve shows that daily cases are in down trend. ","41a400e8":"As a fraction of the total population of each state:","4ff069b6":"## 1.1. COVID-19 India & Tamil Nadu tendency  <a id=\"section11\"><\/a>\n\n ","726cb546":"**Observations**: \n* The number of infected cases increases for a certain time period, and then eventually decreases given that individuals recover\/decease from the disease\n* The susceptible fraction of population decreases as the virus is transmited, to eventually drop to the absorbent state 0\n* The oposite happens for the recovered\/deceased case\n\n","30cbc77b":"# 2. SIR model <a id=\"section2\"><\/a>\n\n I'll move on to one of the most famous epidemiologic models: SIR. \n\nSIR is a simple model that considers a population that belongs to one of the following states:\n1. **Susceptible (S)**. The individual hasn't contracted the disease, but she can be infected due to transmisison from infected people\n2. **Infected (I)**. This person has contracted the disease\n3. **Recovered\/Deceased (R)**. The disease may lead to one of two destinies: either the person survives, hence developing inmunity to the disease, or the person is deceased. \n\n<img src=\"https:\/\/www.lewuathe.com\/assets\/img\/posts\/2020-03-11-covid-19-dynamics-with-sir-model\/sir.png\" width=\"500px\">\nImage by Kai Sasaki from [lewuathe.com](https:\/\/www.lewuathe.com\/covid-19-dynamics-with-sir-model.html)\n**Assumptions**\n1. We will consider that people develops immunity (in the long term, immunity may be lost and the COVID-19 may come back within a certain seasonality like the common flu) and there is no transition from recovered to the remaining two states. \n\n 2.No one is added to the susceptible group, since we are ignoring births and immigration. The only way an individual leaves the susceptible group is by becoming infected. We assume that the time-rate of change of  S(t),  the number of susceptibles\n\n3. Where $\\beta$ is the contagion rate of the pathogen and $\\gamma$ is the recovery rate. $\\beta$ is the average number of contacts per person per time, multiplied by the probability of disease transmission in a contact between a susceptible and an infectious subject,\n\n4. N is the total population or sum of S, I, R\n\n4. S(t), I(t) and R(t) are precise number at a particular time\n\nWith this, the differential equations that govern the system are:\n\n$$ {dS \\over dt} = - {\\beta S I \\over N} $$\n\n$$ {dI \\over dt} = {\\beta S I \\over N} - \\gamma I$$\n\n$$ {dR \\over dt} = \\gamma I$$\n\nFirstly note that from:\n\n$$ {dS \\over dt}+{dI \\over dt}+{dR \\over dt}=0$$\n\nit follows that:\n\nS(t)+I(t)+R(t)=N","3ef7318e":"# COVID India Forecast\n\n\n**TABLE OF CONTENTS**\n\n1. [Exploratory data analysis (EDA)](#section1)\n\n    1.1. [COVID-19 India & Tamil Nadu tendency](#section11)\n    \n    1.2. [Kerala, Karnataka, Maharashtra and WestBengal](#section12)\n    \n    \n\n    \n2. [SIR model](#section2)\n\n    2.1. [Implementing the SIR model](#section21)\n    \n    2.2. [Fit SIR parameters to real data](#section22)\n    \n    \n3. [Predictions for the early stages of the transmission](#section3)\n\n    3.1. [Linear Regression](#section31)\n    \n\n"}}