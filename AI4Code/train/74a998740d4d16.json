{"cell_type":{"13c98eb6":"code","d2c727cc":"code","a8b5ecde":"code","463649d9":"code","97615496":"code","f223a806":"code","8632b984":"code","a2cd648b":"code","7508e487":"code","628353df":"code","5c50d56d":"code","649a3625":"code","993e79d0":"code","cfe2c7b0":"markdown"},"source":{"13c98eb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2c727cc":"from fuzzywuzzy import fuzz, process \nfrom tqdm import tqdm","a8b5ecde":"#importing the csv files\nbs = pd.read_csv(\"\/kaggle\/input\/payment-id-ndsc-2020\/bank_statement.csv\")\nco = pd.read_csv(\"\/kaggle\/input\/payment-id-ndsc-2020\/checkout.csv\")","463649d9":"bs.head()","97615496":"co.head()","f223a806":"len(bs)","8632b984":"len(co)","a2cd648b":"bs.isnull().sum()","7508e487":"co.isnull().sum()","628353df":"def simmilar_finder(stmt_id, stmt_amount, desc):\n    co_price_match = co[co.ckt_amount == stmt_amount]\n    list_score = []\n    \n    for(ckt_id, buyer_name) in zip(co_price_match['ckt_id'], co_price_match['buyer_name']):\n        score = fuzz.partial_ratio(buyer_name, desc)\n        if score > 0:\n            list_score.append((ckt_id, score))\n            \n    max_score=0\n    best_ckt_id=0\n    \n    for ckt_id, score in list_score:\n        if score > max_score:\n            max_score = score\n            best_ckt_id = ckt_id\n    \n    return(stmt_id, best_ckt_id)","5c50d56d":"submission = []\n\nfor i in tqdm(range(len(bs))):\n    submission.append(simmilar_finder(bs.stmt_id[i], bs.stmt_amount[i], bs.desc[i]))","649a3625":"df = pd.DataFrame(submission, columns=['stmt_id', 'ckt_id'])","993e79d0":"df.to_csv('submission.csv', index=False)","cfe2c7b0":"### Missing Value Check"}}