{"cell_type":{"7f86bcc6":"code","a5afe848":"code","493f26e1":"code","3642a482":"code","9b964b44":"code","eec3c4ce":"code","a4a846d1":"code","8bd4d612":"code","4ca89ad8":"code","42a0cfbc":"code","dc05b487":"code","d69aa9cb":"code","92d912b3":"code","f30cbb88":"code","dde23f22":"code","39d1cc24":"code","c142d6ab":"code","93fa7c22":"code","88452e7c":"code","4f80b3b1":"code","3fd04413":"code","4482e523":"code","64a03a3f":"code","e82ff699":"code","8fdffed3":"code","95d48a43":"code","d9413d39":"code","854227f1":"code","d960623c":"code","abcbfe9d":"code","2f433e87":"code","13a3b8c4":"markdown","bb01b986":"markdown","7dbe3d30":"markdown","d50bf441":"markdown","1890291a":"markdown","13dc4ca2":"markdown"},"source":{"7f86bcc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5afe848":"import zipfile\nwith zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/train.zip\",\"r\") as z:\n    z.extractall(\".\")","493f26e1":"with zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/test1.zip\",'r') as z:\n    z.extractall(\".\")    ","3642a482":"import os\ntrain_path='\/kaggle\/working\/train'\nfilenames=os.listdir(train_path)","9b964b44":"categories=[]\nfor f in filenames:\n    category=f.split(\".\")[0]\n    if category=='dog':\n        categories.append(1)\n    else:\n        categories.append(0)","eec3c4ce":"len(categories)","a4a846d1":"import pandas as pd\ntrain=pd.DataFrame({'file':filenames,'category':categories})","8bd4d612":"train.head()","4ca89ad8":"train['category'].value_counts()","42a0cfbc":"from keras.preprocessing import image\nimport matplotlib.pyplot as plt\nfor i in range(4):\n    plt.figure(figsize=(10,10))\n    plt.subplot(2,3,i+1)\n    img_path=os.path.join(train_path,filenames[i])\n    img=image.load_img(img_path)\n    plt.imshow(img)\nplt.tight_layout()    \nplt.show()","dc05b487":"from keras.applications import VGG16\nconv=VGG16(weights='imagenet',include_top=False,input_shape=(150,150,3))\nconv.trainable=False\nconv.summary()","d69aa9cb":"from keras import models\nfrom keras import layers\nfrom keras import regularizers\nmodel=models.Sequential()\nmodel.add(conv)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512,activation='relu',kernel_regularizer=regularizers.l2(0.001)))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1,activation='sigmoid'))\nmodel.summary()","92d912b3":"model.compile(loss='binary_crossentropy',optimizer='rmsprop',metrics=['accuracy'])","f30cbb88":"train['category']=train['category'].map({1:'dog',0:'cat'})\nfrom sklearn.model_selection import train_test_split\ntrain,validate=train_test_split(train,train_size=0.8)","dde23f22":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen=ImageDataGenerator(rescale=1.\/255,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.5,rotation_range=40,zoom_range=0.2,horizontal_flip=True,fill_mode='nearest')\ntest_datagen=ImageDataGenerator(rescale=1.\/255)","39d1cc24":"train_generator=train_datagen.flow_from_dataframe(train,directory=train_path,x_col='file',y_col='category',target_size=(150,150),batch_size=20,class_mode='binary')\ntest_generator=test_datagen.flow_from_dataframe(validate,directory=train_path,x_col='file',y_col='category',target_size=(150,150),batch_size=20,class_mode='binary')","c142d6ab":"sample=train.sample(n=1)\nsample_generator=train_datagen.flow_from_dataframe(sample,directory=train_path,x_col='file',y_col='category',target_size=(150,150),class_mode='categorical')\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    for i,l in sample_generator:\n        plt.imshow(i[0])\n        break\nplt.show()        ","93fa7c22":"history=model.fit(train_generator,steps_per_epoch=1000,epochs=10,validation_data=test_generator,validation_steps=250)","88452e7c":"import matplotlib.pyplot as plt\nacc=history.history['accuracy']\nval_accuracy=history.history['val_accuracy']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\nepochs=range(1,len(acc)+1)\nplt.figure()\nplt.plot(epochs,acc,'r-',label='Training Accuracy')\nplt.plot(epochs,val_accuracy,'b-',label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Train-Validation-Accuracy-Curve')\nplt.ylim([0,1])\nplt.legend()\nplt.figure()\nplt.plot(epochs,loss,'r-',label='Training Loss')\nplt.plot(epochs,val_loss,'b-',label='Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Train-Validation-loss-Curve')\nplt.legend()\nplt.ylim([0,1])\nplt.show()","4f80b3b1":"train_layer=False\nfor i in conv.layers:\n    if i.name == 'block5_conv1':\n        train_layer=True\n    if train_layer==True:\n        i.trainable=True\n        print(i,' :yes')\n    else:\n        print(i,' :no')","3fd04413":"from keras import optimizers\nmodel.compile(loss='binary_crossentropy',optimizer=optimizers.RMSprop(lr=1e-4),metrics=['accuracy'])","4482e523":"history_fine=model.fit(train_generator,steps_per_epoch=1000,epochs=10,validation_data=test_generator,validation_steps=250)","64a03a3f":"acc=history_fine.history['accuracy']\nval_accuracy=history_fine.history['val_accuracy']\nloss=history_fine.history['loss']\nval_loss=history_fine.history['val_loss']\nepochs=range(1,len(acc)+1)\nplt.figure()\nplt.plot(epochs,acc,'r-',label='Training Accuracy')\nplt.plot(epochs,val_accuracy,'b-',label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Train-Validation-Accuracy-Curve')\nplt.ylim([0,1])\nplt.legend()\nplt.figure()\nplt.plot(epochs,loss,'r-',label='Training Loss')\nplt.plot(epochs,val_loss,'b-',label='Validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Train-Validation-loss-Curve')\nplt.ylim([0,1])\nplt.legend()\nplt.show()","e82ff699":"test_path='\/kaggle\/working\/test1'\ntest_file=os.listdir('\/kaggle\/working\/test1')","8fdffed3":"test_df=pd.DataFrame({'file':test_file})\ntest_df.head()","95d48a43":"test_generator=test_datagen.flow_from_dataframe(test_df,directory=test_path,x_col='file',y_col=None,class_mode=None,target_size=(150,150),batch_size=20,shuffle=False)","d9413d39":"predict=model.predict(test_generator,steps=625)","854227f1":"img=image.load_img(os.path.join(test_path,test_file[0]))\nplt.subplot(1,2,1)\nplt.imshow(img)\nplt.title(str(predict[0]))\nplt.subplot(1,2,2)\nimg=image.load_img(os.path.join(test_path,test_file[1]))\nplt.imshow(img)\nplt.title(str(predict[1]))\nplt.show()","d960623c":"pred=[]\nfor i in predict:\n    if i>0.5:\n       pred.append(1)\n    else:\n        pred.append(0)","abcbfe9d":"len(pred)","2f433e87":"submission=test_df.copy()\nsubmission['id']=submission['file'].str.split(\".\").str[0]\nsubmission['label']=pred\nsubmission.drop(['file'],axis=1,inplace=True)\nsubmission['id']=submission['id'].astype('int')\nsubmission=submission.sort_values(by=['id'])\nsubmission.to_csv('submission.csv',index=False)","13a3b8c4":"# Pre-Trained Model","bb01b986":"# Visualisation","7dbe3d30":"# Data Augmentation","d50bf441":"# Preprocessing Data","1890291a":"# Fine Tuning","13dc4ca2":"# Prediction Probability"}}