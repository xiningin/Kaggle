{"cell_type":{"c885a605":"code","4dc51c3e":"code","a67e5735":"code","74477fc7":"code","64af0bf6":"code","0c8a0302":"code","f8825486":"code","e96b4051":"code","62ca554e":"code","3b0aed82":"code","5e37feeb":"code","fa362acf":"code","a477e0e7":"code","492b987e":"code","665943ac":"code","9bbff86c":"code","e31729f5":"code","779900a0":"code","0fcaae15":"code","5899d853":"code","443159e5":"code","e9eff25d":"code","3dbf5086":"code","b060c943":"code","e3bee273":"code","375ff224":"code","6ee3bc86":"code","bf895b30":"code","9bef1ed6":"code","d4996bd4":"code","ddfb7861":"code","8a276702":"code","4e5c04f2":"code","6417d22b":"code","2405f9c1":"code","51a6a13f":"code","88b43824":"code","60600a78":"code","aac57dfb":"code","f9015a05":"code","f53d48ee":"code","b1d1d029":"code","256b3553":"code","790fe10c":"code","714f806c":"code","9eb50451":"code","314ae892":"code","b2186af9":"code","62c1705d":"code","2d26f6db":"code","a7babb0a":"code","7761d7c6":"markdown","2163822e":"markdown","0cd6c6c7":"markdown","25e86e00":"markdown","d388622e":"markdown","6ab8ab45":"markdown","771b4a13":"markdown","1b86c573":"markdown","0ce75439":"markdown","4e1f4608":"markdown","4325b764":"markdown","30e3814c":"markdown","903ef547":"markdown","70b6ae72":"markdown","3c317a48":"markdown","d8b18000":"markdown","d68e534c":"markdown","a31f9781":"markdown","9455b64c":"markdown","2b473ff8":"markdown","f6ab672f":"markdown","2114585a":"markdown","f2474df5":"markdown","9e3a7b32":"markdown","2a04a24c":"markdown","71447fdb":"markdown","0f12c747":"markdown","08f1a6f2":"markdown","07110174":"markdown","27362ea4":"markdown","2adc5f85":"markdown","085b1828":"markdown","398fb241":"markdown","49abd7c5":"markdown","e6cc73ff":"markdown","80ffac9d":"markdown","2226fb4a":"markdown"},"source":{"c885a605":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport cv2\nimport random\nfrom random import randint\nimport time\n\n\nimport torch\nfrom torch.utils.data import Dataset, random_split, DataLoader\nimport torch.nn.functional as F\nimport torch.nn as nn\n\nfrom PIL import Image\nfrom scipy import ndimage\n\nimport torchvision\nimport torchvision.models as models\nimport torchvision.transforms as T\nfrom torchvision.utils import make_grid\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.datasets import ImageFolder\n\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.metrics import f1_score\n","4dc51c3e":"DATA_DIR = '..\/input\/dog-breed-identification'\n\n\nTRAIN_DIR = DATA_DIR + '\/train'                           \nTEST_DIR = DATA_DIR + '\/test'                             \n\nTRAIN_CSV = DATA_DIR + '\/labels.csv'                     \nTEST_CSV = DATA_DIR + '\/submission.csv' ","a67e5735":"data_df = pd.read_csv(TRAIN_CSV)\ndata_df.head(10)","74477fc7":"labels_names=data_df[\"breed\"].unique()\nlabels_sorted=labels_names.sort()\n\nlabels = dict(zip(range(len(labels_names)),labels_names))\nlabels ","64af0bf6":"\nlbl=[]\npath_img=[]\n\nfor i in range(len(data_df[\"breed\"])):\n    temp1=list(labels.values()).index(data_df.breed[i])\n    lbl.append(temp1)\n    temp2=TRAIN_DIR + \"\/\" + str(data_df.id[i]) + \".jpg\"\n    path_img.append(temp2)\n\ndata_df['path_img'] =path_img  \ndata_df['lbl'] = lbl\n\ndata_df.head()","0c8a0302":"num_images = len(data_df[\"id\"])\nprint('Number of images in Training file:', num_images)\nno_labels=len(labels_names)\nprint('Number of dog breeds in Training file:', no_labels)","f8825486":"bar = data_df[\"breed\"].value_counts(ascending=True).plot.barh(figsize = (30,120))\nplt.title(\"Distribution of the Dog Breeds\", fontsize = 20)\nbar.tick_params(labelsize=16)\nplt.show()","e96b4051":"data_df[\"breed\"].value_counts(ascending=False)","62ca554e":"fig, axes = plt.subplots(nrows=4, ncols=5, figsize=(15, 15),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(data_df.path_img[i]))\n    ax.set_title(data_df.breed[i])\nplt.tight_layout()\nplt.show()","3b0aed82":"class DogDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['id'], row['lbl']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".jpg\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, img_label","5e37feeb":"imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n    T.Resize((300,300)),\n#    T.CenterCrop(256),\n    T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n#    T.RandomCrop(32, padding=4, padding_mode='reflect'),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(),\n    T.Normalize(*imagenet_stats,inplace=True), \n#    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n    T.Resize((300,300)),\n    #T.CenterCrop(256),\n    T.ToTensor(),\n    T.Normalize(*imagenet_stats)\n])\n","fa362acf":"np.random.seed(42)\nmsk = np.random.rand(len(data_df)) < 0.8\n\ntrain_df = data_df[msk].reset_index()\nval_df = data_df[~msk].reset_index()","a477e0e7":"train_ds = DogDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = DogDataset(val_df, TRAIN_DIR, transform=valid_tfms)\nlen(train_ds), len(val_ds)","492b987e":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', labels[target])","665943ac":"show_sample(*train_ds[241])","9bbff86c":"show_sample(*train_ds[419], invert=False)","e31729f5":"batch_size = 128","779900a0":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, \n                      num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, \n                    num_workers=3, pin_memory=True)\n","0fcaae15":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","5899d853":"show_batch(train_dl, invert=True)","443159e5":"show_batch(train_dl, invert=False)","e9eff25d":"def accuracy(output, label):\n    _, pred = torch.max(output, dim=1)\n    return torch.tensor(torch.sum(pred == label).item() \/ len(pred))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, targets) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, targets)   # Calculate loss\n        acc = accuracy(out, targets)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.8f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))","3dbf5086":"resnet34 = models.resnet34()\nresnet34","b060c943":"class DogResnet34(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs,120)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","e3bee273":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","375ff224":"device = get_default_device()\ndevice","6ee3bc86":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","bf895b30":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","9bef1ed6":"model = to_device(DogResnet34(), device)","d4996bd4":"history = [evaluate(model, val_dl)]\nhistory","ddfb7861":"model.freeze()","8a276702":"epochs = 5\nmax_lr = 0.0001\ngrad_clip = 0.5\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","4e5c04f2":"%%time\nstarttime= time.time()\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","6417d22b":"model.unfreeze()","2405f9c1":"%%time\nmax_lr = max_lr\/10\n\n#epochs = epochs-1  \n#grad_clip = grad_clip\/5\n#weight_decay = weight_decay\/10\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)\n","51a6a13f":"#model.unfreeze()","88b43824":"#%%time\n#max_lr = max_lr\/10\n\n#history += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n#                         grad_clip=grad_clip, \n#                         weight_decay=weight_decay, \n#                         opt_func=opt_func)\n","60600a78":"endtime=time.time()\n\nduration=endtime-starttime\ntrain_time=time.strftime('%M:%S', time.gmtime(duration))\ntrain_time","aac57dfb":"def plot_scores(history):\n    scores = [x['val_acc'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('accuracy vs. No. of epochs');","f9015a05":"plot_scores(history)","f53d48ee":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","b1d1d029":"plot_losses(history)","256b3553":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","790fe10c":"plot_lrs(history)","714f806c":"weights_fname = 'dog-resnet.pth'\ntorch.save(model.state_dict(), weights_fname)","9eb50451":"!pip install jovian --upgrade --quiet","314ae892":"import jovian","b2186af9":"jovian.reset()\njovian.log_hyperparams(arch='resnet34', \n                       epochs=3*epochs, \n                       lr=max_lr*10, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)","62c1705d":"jovian.log_metrics(val_loss=history[-1]['val_loss'], \n                   val_score=history[-1]['val_acc'],\n                   train_loss=history[-1]['train_loss'],\n                   time=train_time)","2d26f6db":"project_name='dog-breed-classification'","a7babb0a":"jovian.commit(project=project_name, environment=None, outputs=[weights_fname])","7761d7c6":"We store the values\nand unfreeze the model","2163822e":"We recommend using a CUDA or GPU is available;\n\nif not this may be run using a CPU but will take a longer time","0cd6c6c7":"Define the data directories","25e86e00":"Add the numberical labels and path to the dataframe","d388622e":"We will use a Resnet34 model. We use a pretrained model","6ab8ab45":"We load the mdodel in to the device","771b4a13":"In this project, we will try to classify 120 different dog species from over 10,000 images\n\nWe run a resnet34 model using Pytorch and achieve 75+% accuracy in around 30 minutes of training\n\nI detail out the steps and try to define the steps. \n\nHope this helps!","1b86c573":"Lets perform image transforms the same using PyTorch\n\nfor a \n[Beginner's Guide: Image Augmentation & Transforms click here](https:\/\/www.kaggle.com\/kmldas\/beginner-s-guide-image-augmentation-transforms)","0ce75439":"# Training","4e1f4608":"# View Sample Images after Transform","4325b764":"We use the following parameters for the model\n\nThis is what you should focus on. Please change the parameters and see how that improves or decreases the accuracy.\n\nUnderstanding the impact of the number of epochs, maximum learning rate, grad clip and weight decay will help you understand how to tune this and other models\n\n","30e3814c":"# Dog Breed Classification","903ef547":"We run the model again\n\n\n\nI am only changing the max lr to a tenth.  You may change the different parameters and even the model here","70b6ae72":"# Data holders","3c317a48":"Lets check the number of files and classes (dog breeds) in the dataset","d8b18000":"# Image Analysis","d68e534c":"Create a label dictionary","a31f9781":"# Save and Commit","9455b64c":"Let us display 20 picture of the dataset with their labels","2b473ff8":"Lets plot charts on the progress of some parameters ","f6ab672f":"Are images equally distributed between all dog breeds?\n\nLet's plot a graph and see!","2114585a":"We observe that the distribution is not equal. Scottish deerhound has 126 images while eskimo dog and briard breeds have 66 images","f2474df5":"We define accuracy as number of pictures correctly classified or predicted to belong to the accurate class\n","9e3a7b32":"You may tun the model a third time as well","2a04a24c":"Read the files","71447fdb":"We view images with inverted colours and normal colours","0f12c747":"What do you observe?\n\nAll images are of differnt sizes\n\nThe backgrounsd vary- some have humans, and other items in the backgrounds\n\nAlso some images are not vertical - e.g., the lakeland terrier in the lower night","08f1a6f2":"# Import Libraries","07110174":"Note the time to model. This model by default should give you 75% accuracy in around 30 minutes of training with GPU","27362ea4":"# Image Transforms using Pytorch","2adc5f85":"## Preparing the Data","085b1828":"We see what the default accuracy is","398fb241":"The default accuracy is around 1% (0.01) as there are 120 breeds","49abd7c5":"We view images with inverted colours and normal colours","e6cc73ff":"Now lets get into training the model\n\nWe will use one cycle fit which is now the state of the art for fitting the model.","80ffac9d":"# View Batch images","2226fb4a":"# Model - Transfer Learning"}}