{"cell_type":{"6c258a2b":"code","6cabb833":"code","4efa064c":"code","951005e7":"code","e91f75fb":"code","f71a0c32":"code","b339e9a3":"code","e666763f":"code","92669ff9":"code","a302eea9":"code","7897fba6":"code","047ad5f4":"code","d54608e1":"code","e3e8bdb6":"code","b5db0c5c":"code","968df373":"code","c946a2c9":"code","4e9f4c2c":"code","ed0f89de":"code","2254939c":"code","d2dc9c2a":"code","ab1112d3":"code","02f53341":"code","c6b327a9":"code","b28cb1b2":"code","50b54a64":"code","d5911b23":"code","4adf8ad5":"code","ba27316e":"code","6ec80726":"code","fe4aedce":"code","b44f5dd5":"code","f9b34f93":"code","c876af49":"code","08796df6":"code","5911e8d5":"code","d68ce724":"code","e28146d3":"code","8aea1c8e":"code","0d8a0ae3":"code","c641d4e9":"code","9c6cea16":"code","d09bc7bc":"code","81da087c":"code","105aeb8f":"markdown","434dc9b5":"markdown","3f7c5753":"markdown","ed7365c9":"markdown","fd0e9fc2":"markdown","3c5fbfe8":"markdown"},"source":{"6c258a2b":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport seaborn as sns\n\nimport datetime as datetime\nimport matplotlib.dates as dates\nimport matplotlib.pyplot as plt\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\n\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import KFold, train_test_split, GridSearchCV\nfrom sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nimport datetime\nfrom datetime import date","6cabb833":"df = pd.read_csv(\"..\/input\/covid19-indonesia\/covid_19_indonesia_time_series_all.csv\")\ndf.head(20)","4efa064c":"# Merubah format tanggal\ndate2=[]\nfor item in df['Date']:\n    item2=item.split('\/')\n    month=int(item2[0])\n    day=int(item2[1])\n    year=int(item2[2])\n    date2+=[datetime.date(year,month,day)]\ndf['Date']=date2\ndf['Date'] = pd.to_datetime(df['Date'])","951005e7":"# menghapus kolom dengan semua data bernilai null dan kolom yang tidak diperlukan\ndata = df.drop(['City or Regency','Name','Item','Kind','Hidden','Location ISO Code',\n                'Province','Country','Continent','Island','Time Zone','Special Status',\n                'Total Regencies','Total Cities','Total Districts','Total Urban Villages',\n                'Total Rural Villages','New Cases per Million','Total Cases per Million',\n                'New Deaths per Million','Total Deaths per Million','Case Fatality Rate',\n                'Case Recovered Rate','Growth Factor of New Cases','Growth Factor of New Deaths'],axis = 1)\ndata = data.fillna(0)\ndata.head()","e91f75fb":"data.info()","f71a0c32":"#Memanggil data untuk level provinsi\ndata1 = data[data['Location Level'] != 'Country']\ndata1.head()","b339e9a3":"newest = data1.drop_duplicates(subset='Location', keep=\"last\")\nnewest.head()","e666763f":"# Memanggil Data COVID 19 as per updated 9 Juli 2021\nnewest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)","92669ff9":"# Provinsi dengan Total Kasus Terbanyak\nplt.figure(figsize=(12,9))\nplt.bar(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Location'].values[:5], newest[newest.Location != 'Indonesia'].sort_values(by=['Total Cases'], ascending=False)['Total Cases'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kasus Paling Banyak', fontsize=14)\nplt.xlabel('Provinsi')\nplt.ylabel('Jumlah Kasus')\nplt.show()","a302eea9":"# Provinsi dengan Angka Kematian Terbanyak\nplt.figure(figsize=(12,9))\nsns.barplot(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Deaths'], ascending=False)['Location'].values[:5],  newest[newest.Location != 'Indonesia'].sort_values(by=['Total Deaths'], ascending=False)['Total Deaths'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kematian Paling Banyak', fontsize=25)\nplt.xlabel('Provinsi', fontsize=15)\nplt.ylabel('Jumlah Kasus Kematian', fontsize=15)\nplt.show()","7897fba6":"# Provinsi dengan Angka Kesembuhan Terbanyak\nplt.figure(figsize=(12,9))\nsns.barplot(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Recovered'], ascending=False)['Location'].values[:5],  newest[newest.Location != 'Indonesia'].sort_values(by=['Total Recovered'], ascending=False)['Total Recovered'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kesembuhan Paling Banyak', fontsize=25)\nplt.xlabel('Provinsi', fontsize=15)\nplt.ylabel('Kasus Kematian', fontsize=15)\nplt.show()","047ad5f4":"# Provinsi dengan Angka Kasus Aktif Terbanyak\nplt.figure(figsize=(12,9))\nsns.barplot(newest[newest.Location != 'Indonesia'].sort_values(by=['Total Active Cases'], ascending=False)['Location'].values[:5],  newest[newest.Location != 'Indonesia'].sort_values(by=['Total Active Cases'], ascending=False)['Total Active Cases'].values[:5])\nplt.title('5 Provinsi Teratas Dengan Total Kasus Aktif Paling Banyak', fontsize=25)\nplt.xlabel('Provinsi', fontsize=15)\nplt.ylabel('Kasus Aktif', fontsize=15)\nplt.show()","d54608e1":"# Highlight khusus COVID 19 DKI Jakarta\njakarta = data[data.Location == 'DKI Jakarta'].tail(7).copy()\njakarta","e3e8bdb6":"#Zooming trend kasus kematian Covid di DKI Jakarta di 7 hari terakhir (sampai 9 Juli 2021)\nplt.figure(figsize=(10,7))\nplt.plot(jakarta['Date'].values ,jakarta['New Cases'].values)\nplt.title('Jumlah Kasus Baru DKI Jakarta dalam periode sepekan terakhir', fontsize=15)\nplt.xlabel('Tanggal')\nplt.ylabel('Jumlah Kasus Baru')\nplt.show()","b5db0c5c":"# Perbandingan Peningkatan Kasus Baru, Kematian, dan Kesembuhan\nplt.figure(figsize=(10,9))\nplt.plot(jakarta['Date'].values ,jakarta['New Cases'].values, label='Cases')\nplt.plot(jakarta['Date'].values, jakarta['New Recovered'].values, label = 'Recover')\nplt.plot(jakarta['Date'].values, jakarta['New Deaths'].values, label = 'Death')\nplt.title('Perbandingan Peningkatan Kasus Baru, Kematian, dan Kesembuhan. ')\nplt.xlabel('Tanggal')\nplt.ylabel('Jumlah Kasus')\nplt.legend()\nplt.show()","968df373":"# Angka Kematian Covid 19 DKI Jakarta 3 Juli - 9 Juli 2021\nplt.figure(figsize=(10,9))\nplt.plot(jakarta['Date'].values, jakarta['New Deaths'].values, label = 'Death')\nplt.title('Angka Kematian Covid 19 DKI Jakarta 3 Juli - 9 Juli 2021')\nplt.xlabel('Waktu')\nplt.ylabel('Jumlah Kasus Kematian')\nplt.legend()\nplt.show()","c946a2c9":"#Melihat korelasi antar variabel dalam suatu heatmap\nplt.figure(figsize=(8,10))\nsns.heatmap(data1.corr(), annot=True)\nplt.show()","4e9f4c2c":"data1.head()","ed0f89de":"#Memfokuskan pada beberapa variable saja yang terkait dengan kasus Covid 19\ndata2 = data1[['New Deaths', 'New Cases','Total Cases', 'New Recovered', 'Total Recovered', 'Total Deaths','Population', 'Population Density']]\ndata2.head()","2254939c":"#Melihat korelasi antar variabel dari sebaran data pada scatter plot \nsns.pairplot(data2)\nplt.show()","d2dc9c2a":"# SPLIT DATA\nX = data2.drop('New Deaths', axis = 1)\ny = data2['New Deaths']","ab1112d3":"#Train_test_split the Data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","02f53341":"#Scalling the Data, supaya nominal angka data bisa seragam (tidak terlalu besar Range-nya)\npipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","c6b327a9":"# PREDICT DATA, MODELLING & PERFORMANCE EVALUATION \ndef predict_model(model, trainX, testX, trainY, testY):\n    m = model\n    m.fit(trainX, trainY)\n    predict_m = m.predict(testX)\n    print('-----------{}-----------'.format(model))\n    print_evaluate(testY, predict_m)\n    \ndef print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')","b28cb1b2":"#HASIL PERFORMANCE EVALUATION \nmodel = [LinearRegression(), SVR(), DecisionTreeRegressor()]\nfor i in model:\n    predict_model(i, X_train,X_test, y_train, y_test)","50b54a64":"dct = LinearRegression()\ndct.fit(X_train, y_train)\n\npred_dct = dct.predict(X_test)\nprint_evaluate(y_test, pred_dct)\n\ndf_dct = pd.DataFrame({'Real Values':y_test, 'Predicted Values':pred_dct})\ndf_dct.head()\n\nplt.figure(figsize=(10,8))\nplt.plot(df_dct['Real Values'].values[:50], label = 'Real Values')\nplt.plot(df_dct['Predicted Values'].values[:50], label = 'Predicted Values')\nplt.legend()\nplt.show()","d5911b23":"## Terlihat masih ada beberapa prediksi yang offset karena nilai R2 score yang \"hanya\" sekitar 60%","4adf8ad5":"# Ekskalasi lokasi dengan menggunakan location Negara 'Indonesia' sebagai acuan data\nid_data = data[data['Location'] == 'Indonesia']\nid_data.drop(['Date', 'Location', 'Longitude', 'Latitude','Location Level'], axis=1, inplace=True)\nid_data","ba27316e":"#Melihat heatmap correlation untuk skala lokasi negara Indonesia\nplt.figure(figsize=(12,10))\nsns.heatmap(id_data.corr(), annot= True)","6ec80726":"#Ada beberapa variabel yang tidak terlihat display korelasinya,maka kita drop saja \nid_data.drop(['Area (km2)', 'Population', 'Population Density'], axis=1, inplace=True)\nid_data.head()","fe4aedce":"# SPLIT DATA\nX = id_data.drop('New Deaths', axis=1)\ny = id_data['New Deaths']","b44f5dd5":"#Train_test_split the Data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","f9b34f93":"#Scalling the Data, supaya nominal angka data bisa seragam (tidak terlalu besar Range-nya)\npipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","c876af49":"# PREDICT DATA, MODELLING & PERFORMANCE EVALUATION \n    \ndef predict_model(model, trainX, testX, trainY, testY):\n    m = model\n    m.fit(trainX, trainY)\n    predict_m = m.predict(testX)\n    print('-----------{}-----------'.format(model))\n    print_evaluate(testY, predict_m)\n    \ndef print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')","08796df6":"#HASIL PERFORMANCE EVALUATION \nmodel = [LinearRegression(), SVR(), DecisionTreeRegressor()]\nfor i in model:\n    predict_model(i, X_train,X_test, y_train, y_test)","5911e8d5":"dct = LinearRegression()\ndct.fit(X_train, y_train)\n\npred_dct = dct.predict(X_test)\nprint_evaluate(y_test, pred_dct)\n\ndf_dct = pd.DataFrame({'Real Values':y_test, 'Predicted Values':pred_dct})\ndf_dct.head()\n\nplt.figure(figsize=(10,8))\nplt.plot(df_dct['Real Values'].values[:50], label = 'Real Values')\nplt.plot(df_dct['Predicted Values'].values[:50], label = 'Predicted Values')\nplt.legend()\nplt.show()","d68ce724":"import geopandas as gpd","e28146d3":"data1.head()","8aea1c8e":"newest","0d8a0ae3":"#Memanggil Data Geo \ndata_geo = gpd.read_file(\"..\/input\/peta-gadm-indonesia\/gadm36_IDN_3.shp\")\ndata_geo.head()","c641d4e9":"#Mensinkronkan beberapa penamaan data Provinsi dari data peta\nprov = gpd.read_file(\"..\/input\/peta-gadm-indonesia\/gadm36_IDN_3.shp\")\nprov.drop([\"NAME_0\"],axis=1,inplace=True)\nprov.rename(columns = {\"NAME_1\":\"Provinsi\"}, inplace = True)\nprov['Provinsi'].replace({\"Jakarta Raya\":\"DKI Jakarta\"},inplace=True)","9c6cea16":"#Me-rename nama kolom lokasi menjadi provinsi \nnewest.rename(columns={\n    'Location':'Provinsi'\n},inplace=True)\nnewest","d09bc7bc":"#Merge Peta\ncovid_peta = prov.merge(newest.sort_values(by='Provinsi'),on='Provinsi')","81da087c":"fig,ax = plt.subplots(4,figsize=(36,36))\nplt.style.use('seaborn')\ncovid_peta.plot(column='Total Cases',cmap='Reds',figsize=(9,36),legend=True,ax=ax[0])\nax[0].set_title('Total kasus',fontsize=25)\ncovid_peta.plot(column='Total Deaths',cmap='Purples',figsize=(9,36),legend=True,ax=ax[1])\nax[1].set_title('Total Kematian',fontsize=25)\ncovid_peta.plot(column='Total Recovered',cmap='Greens',figsize=(9,36),legend=True,ax=ax[2])\nax[2].set_title('Total Sembuh',fontsize=25)\ncovid_peta.plot(column='Total Active Cases',cmap='Blues',figsize=(9,36),legend=True,ax=ax[3])\nax[3].set_title('Total Kasus Aktif',fontsize=25)\n\n#add background color\nax[0].set_facecolor('#e0e0e0')\nax[1].set_facecolor('#e0e0e0')\nax[2].set_facecolor('#e0e0e0')\nax[3].set_facecolor('#e0e0e0')\n\nfor i in np.arange(4):\n    ax[i].spines['top'].set_visible(False)\n    ax[i].spines['right'].set_visible(False)\n    ax[i].spines['left'].set_visible(False)\n    ax[i].spines['bottom'].set_visible(False)\n    for item in ax[i].get_xticklabels():\n        item.set_visible(False)\n    for item in ax[i].get_yticklabels():\n        item.set_visible(False)\n    ax[i].set_xticks([])\n    ax[i].set_yticks([])\nfig.suptitle('Peta Covid-19 Indonesia', fontsize=18)","105aeb8f":"# Visualisasi Mapping Covid 19 di wilayah NKRI","434dc9b5":"## Persiapan untuk permodelan data dan evaluasi performa model\n### Skala lokasi: Provinsi di Indonesia","3f7c5753":"# Visualisasi Peta Covid 19 di NKRI ","ed7365c9":"## Karena hasil Linear Regression memiliki nilai R2 score yang paling tinggi, maka berikutnya akan kita lakukan prediksi kasus kematian vs kasus riil","fd0e9fc2":"## Persiapan untuk permodelan data dan evaluasi performa model\n### Skala lokasi: Negara Indonesia","3c5fbfe8":"# Menampilkan Visualisasi dan analisa data Covid-19"}}