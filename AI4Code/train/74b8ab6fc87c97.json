{"cell_type":{"299ee8bf":"code","124cfd5c":"code","51523bd6":"code","1ed6743f":"code","5eddc773":"code","2139a901":"code","1985e8ab":"code","a097e79e":"code","a5f1fada":"code","f49c72f3":"code","31dd3335":"code","52f9ce42":"code","919e80ba":"code","1ba31c51":"code","33560e21":"code","d6cd4e90":"code","4307936e":"code","df248333":"code","754ad2cd":"code","47bb322d":"code","3df278d0":"code","58c5b801":"code","5a5c1a82":"code","607014a4":"code","339bd135":"code","e30e23df":"code","be5ca557":"code","40b7193b":"code","25580c19":"code","3c5deb7f":"code","0de305c1":"code","13e24265":"code","206dea67":"code","b28c47f3":"code","6597f768":"code","71df7aca":"code","77a8321a":"code","2b77c7eb":"code","b2ea9da1":"code","08af168d":"code","1ee0252b":"code","d26638c7":"code","730530b8":"code","d9a5cd34":"code","0b82fc15":"code","d4650364":"code","d8dfd26a":"code","142583c6":"code","8686d36f":"code","ab21e049":"code","b56f296a":"code","6206921e":"code","cc561362":"code","ee530ed1":"code","fef57512":"code","f46d7f26":"code","07a4a984":"code","1b3a3904":"code","08e774b6":"code","7fee2b88":"code","f108c584":"code","3b33f475":"code","f06ddd85":"code","9279d57f":"code","eb0f87e5":"code","3d91f113":"code","5606356e":"code","d44c9062":"code","5c983e54":"markdown","5e8cf86f":"markdown","85d421a5":"markdown","1e0f95b8":"markdown","668da0bb":"markdown","9d3bc41c":"markdown","452621b9":"markdown","2f3028d4":"markdown","955f92e7":"markdown","0ba68b21":"markdown","fcbacc34":"markdown","ee1eeb66":"markdown","b4cd3a29":"markdown","016639d5":"markdown","eff19495":"markdown","161682f5":"markdown","7e2e5fcc":"markdown","7a3ddbf3":"markdown","6b20edd6":"markdown","23731f68":"markdown","ebea6b64":"markdown","08eb2e7b":"markdown","b287419e":"markdown","bf8fd689":"markdown","fccdf251":"markdown","0e8d3f01":"markdown","f7edcb58":"markdown","df670dcb":"markdown","c881b7d1":"markdown","63c4d70f":"markdown","e35cc97c":"markdown","4608fe42":"markdown","d846be9c":"markdown","c8900584":"markdown","28b30359":"markdown","74decba3":"markdown","6389cbcc":"markdown","704935fd":"markdown","e449e7e4":"markdown","91eb9c87":"markdown","947bb2af":"markdown","7fae5e7a":"markdown","2eab1c18":"markdown","2e29ae43":"markdown","5d2cccd8":"markdown","90da6ef6":"markdown","9a3d067a":"markdown","0975e1da":"markdown"},"source":{"299ee8bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","124cfd5c":"import numpy as np \nimport pandas as pd\nimport pandas\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\nimport seaborn as sns; sns.set()\n\nfrom sklearn import tree\nimport graphviz \nimport os\nimport preprocessing \n\nimport numpy as np \nimport pandas as pd \nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2, f_classif\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import CategoricalNB\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nimport lightgbm\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier, XGBRFClassifier\nfrom xgboost import plot_tree, plot_importance\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score, roc_curve\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","51523bd6":"dataset = pandas.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndataset.head(490)","1ed6743f":"dataset.drop(\"customerID\", axis=1, inplace=True)","5eddc773":"dataset['TotalCharges'] = dataset['TotalCharges'].apply(lambda x: 0 if x == ' ' else x)","2139a901":"dataset[\"TotalCharges\"] = pd.to_numeric(dataset[\"TotalCharges\"])","1985e8ab":"dataset.info()","a097e79e":"dataset.describe().T","a5f1fada":"dataset.isnull().sum().sum()","f49c72f3":"def bar_plot(variable):\n    # get feature\n    var = dataset[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}\".format(variable,varValue))","31dd3335":"categorical = (dataset.dtypes == \"object\")\ncategorical_list = list(categorical[categorical].index)\n\nprint(\"Categorical variables:\")\nprint(categorical_list)","52f9ce42":"for c in categorical_list:\n    bar_plot(c)","919e80ba":"numerical_int64 = (dataset.dtypes == \"int64\")\nnumerical_int64_list = list(numerical_int64[numerical_int64].index)\n\nprint(\"Categorical variables:\")\nprint(numerical_int64_list)","1ba31c51":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(dataset[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","33560e21":"for n in numerical_int64_list:\n    plot_hist(n)","d6cd4e90":"numerical_float64 = (dataset.dtypes == \"float64\")\nnumerical_float64_list = list(numerical_float64[numerical_float64].index)\n\nprint(\"Numerical variables:\")\nprint(numerical_float64_list)","4307936e":"for n in numerical_float64_list:\n    plot_hist(n)","df248333":"plt.figure(figsize=(50,50))\nj = 0\n\nfor i in categorical_list:\n    colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#fbdf70','#ac9fd0','#8b7470']\n    \n    labels = dataset[i].value_counts().index\n    sizes = dataset[i].value_counts().values\n    \n    unique = len(dataset[i].unique())\n    if(unique == 2):\n        myexplode = [0.1, 0]\n    if(unique == 3):\n        myexplode = [0.1, 0,0]\n    if(unique == 4):\n        myexplode = [0.1,0,0,0]\n    \n    plt.subplot(5,4,j+1)\n    plt.pie(sizes, labels=labels, explode = myexplode, shadow = True, startangle=90, colors=colors, autopct='%1.1f%%',textprops={'fontsize': 25})\n    plt.title(f'Distribution of {i}',color = 'black',fontsize = 30)\n    j += 1","754ad2cd":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('gender = Female')\ndataset.groupby('gender').Churn.value_counts().loc['Female'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('gender = Male')\ndataset.groupby('gender').Churn.value_counts().loc['Male'].plot(kind='bar')","47bb322d":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('Partner = Yes')\ndataset.groupby('Partner').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('Partner = No')\ndataset.groupby('Partner').Churn.value_counts().loc['No'].plot(kind='bar')","3df278d0":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('Dependents = Yes')\ndataset.groupby('Dependents').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('Dependents = No')\ndataset.groupby('Dependents').Churn.value_counts().loc['No'].plot(kind='bar')","58c5b801":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('PhoneService = Yes')\ndataset.groupby('PhoneService').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('PhoneService = No')\ndataset.groupby('PhoneService').Churn.value_counts().loc['No'].plot(kind='bar')","5a5c1a82":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('MultipleLines = Yes')\ndataset.groupby('MultipleLines').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('MultipleLines = No')\ndataset.groupby('MultipleLines').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('MultipleLines = No phone service')\ndataset.groupby('MultipleLines').Churn.value_counts().loc['No phone service'].plot(kind='bar')","607014a4":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('InternetService = DSL')\ndataset.groupby('InternetService').Churn.value_counts().loc['DSL'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('InternetService = No')\ndataset.groupby('InternetService').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('InternetService = Fiber optic')\ndataset.groupby('InternetService').Churn.value_counts().loc['Fiber optic'].plot(kind='bar')","339bd135":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('OnlineSecurity = Yes')\ndataset.groupby('OnlineSecurity').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('OnlineSecurity = No')\ndataset.groupby('OnlineSecurity').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('OnlineSecurity = No internet service')\ndataset.groupby('OnlineSecurity').Churn.value_counts().loc['No internet service'].plot(kind='bar')","e30e23df":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('OnlineBackup = Yes')\ndataset.groupby('OnlineBackup').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('OnlineBackup = No')\ndataset.groupby('OnlineBackup').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('OnlineBackup = No internet service')\ndataset.groupby('OnlineBackup').Churn.value_counts().loc['No internet service'].plot(kind='bar')","be5ca557":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('DeviceProtection = Yes')\ndataset.groupby('DeviceProtection').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('DeviceProtection = No')\ndataset.groupby('DeviceProtection').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('DeviceProtection = No internet service')\ndataset.groupby('DeviceProtection').Churn.value_counts().loc['No internet service'].plot(kind='bar')","40b7193b":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('TechSupport = Yes')\ndataset.groupby('TechSupport').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('TechSupport = No')\ndataset.groupby('TechSupport').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('TechSupport = No internet service')\ndataset.groupby('TechSupport').Churn.value_counts().loc['No internet service'].plot(kind='bar')","25580c19":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('StreamingTV = Yes')\ndataset.groupby('StreamingTV').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('StreamingTV = No')\ndataset.groupby('StreamingTV').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('StreamingTV = No internet service')\ndataset.groupby('StreamingTV').Churn.value_counts().loc['No internet service'].plot(kind='bar')","3c5deb7f":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('StreamingMovies = Yes')\ndataset.groupby('StreamingMovies').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('StreamingMovies = No')\ndataset.groupby('StreamingMovies').Churn.value_counts().loc['No'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('StreamingMovies = No internet service')\ndataset.groupby('StreamingMovies').Churn.value_counts().loc['No internet service'].plot(kind='bar')","0de305c1":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('Contract = Month-to-month')\ndataset.groupby('Contract').Churn.value_counts().loc['Month-to-month'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('Contract = One year')\ndataset.groupby('Contract').Churn.value_counts().loc['One year'].plot(kind='bar')\n\nplt.subplot(2,3,3)\nplt.title('Contract = Two year')\ndataset.groupby('Contract').Churn.value_counts().loc['Two year'].plot(kind='bar')","13e24265":"plt.figure(figsize=(25,15))\nplt.subplot(2,3,1)\nplt.title('PaperlessBilling = Yes')\ndataset.groupby('PaperlessBilling').Churn.value_counts().loc['Yes'].plot(kind='bar')\n\nplt.subplot(2,3,2)\nplt.title('PaperlessBilling = No')\ndataset.groupby('PaperlessBilling').Churn.value_counts().loc['No'].plot(kind='bar')","206dea67":"plt.figure(figsize=(25,15))\nsns.set_theme(style=\"darkgrid\")\n\nplt.subplot(2,2,1)\nplt.title('PaymentMethod = Electronic check')\ndataset.groupby('PaymentMethod').Churn.value_counts().loc['Electronic check'].plot(kind='bar')\n\nplt.subplot(2,2,2)\nplt.title('PaymentMethod = Mailed check')\ndataset.groupby('PaymentMethod').Churn.value_counts().loc['Mailed check'].plot(kind='bar')\n\nplt.subplot(2,2,3)\nplt.title('PaymentMethod = Bank transfer (automatic)')\ndataset.groupby('PaymentMethod').Churn.value_counts().loc['Bank transfer (automatic)'].plot(kind='bar')\n\nplt.subplot(2,2,4)\nplt.title('PaymentMethod = Credit card (automatic)')\ndataset.groupby('PaymentMethod').Churn.value_counts().loc['Credit card (automatic)'].plot(kind='bar')","b28c47f3":"plt.figure(figsize=(25,15))\n\nplt.subplot(2,3,1)\nsns.histplot(dataset['MonthlyCharges'], color = 'red', kde = True).set_title('MonthlyCharges Interval and Counts')\n\nplt.subplot(2,3,2)\nsns.histplot(dataset['TotalCharges'], color = 'green', kde = True).set_title('TotalCharges Interval and Counts')\n\nplt.subplot(2,3,3)\nsns.histplot(dataset['tenure'], color = 'blue', kde = True).set_title('tenure Interval and Counts')","6597f768":"sns.set_style('darkgrid')\nf, ax = plt.subplots(figsize=(20,10))\nsns.despine(f, left=True, bottom=True)\nsns.set_theme(style=\"darkgrid\")\nsns.scatterplot(x=dataset['MonthlyCharges'], y=dataset['TotalCharges'],\n                hue=dataset['gender'], \n                size=\"tenure\",\n                palette='tab20',\n                hue_order=dataset['gender'],\n                sizes=(20, 50), \n                linewidth=0,\n                data=dataset)","71df7aca":"plt.figure(figsize=(50,50))\nj = 0\nsns.set_theme(style=\"whitegrid\")\nfor i in categorical_list:\n    \n    plt.subplot(5,4,j+1)\n    sns.histplot(dataset, x=\"Churn\",  hue=dataset[i], multiple=\"stack\", palette=\"light:m_r\", edgecolor=\".3\", linewidth=.5)\n    plt.title(f'Distribution of {i}',color = 'black',fontsize = 25)\n    j += 1","77a8321a":"import pandas_profiling as pp\npp.ProfileReport(dataset)","2b77c7eb":"plt.figure(figsize=(12,8)) \nsns.heatmap(dataset.corr(), annot=True, cmap='Dark2_r', linewidths = 2)\nplt.show()","b2ea9da1":"sns.pairplot(dataset, hue = 'Churn')","08af168d":"dataset.agg(['skew'])","1ee0252b":"skews = ['MonthlyCharges']\nfrom scipy.stats import norm, skew, boxcox\nfor i in skews:\n    sns.set_style('darkgrid')\n    sns.distplot(dataset[i], fit = norm)\n    plt.title('Skeweed')\n    plt.show()\n    (mu, sigma) = norm.fit(dataset[i])\n    print(\"mu {} : {}, sigma {} : {}\".format(i, mu, i, sigma))\n    print()\n    \n    dataset[i], lam = boxcox(dataset[i])\n\n    sns.set_style('darkgrid')\n    sns.distplot(dataset[i], fit = norm)\n    plt.title('Transformed')\n    plt.show()\n    (mu, sigma) = norm.fit(dataset[i])\n    print(\"mu {} : {}, sigma {} : {}\".format(i, mu, i, sigma))\n    print()","d26638c7":"label_encoding = []\none_hot = []\n\nfor x in categorical_list:\n    a = dataset[x].unique()\n    print(f'Unique Values for {x}: ', dataset[x].unique())\n    if(len(a) == 2):\n        label_encoding.append(x)\n    else:\n        one_hot.append(x)","730530b8":"for y in label_encoding:\n    var = dataset[y].unique()\n    y_mapping = {var[0]: 0, var[1]: 1}\n    dataset[y] = dataset[y].map(y_mapping)","d9a5cd34":"for i in range(0, len(one_hot)):\n    dataset[f'{one_hot[i]}'] = pd.Categorical(dataset[f'{one_hot[i]}'])\n    dummies = pd.get_dummies(dataset[f'{one_hot[i]}'], prefix = f'{one_hot[i]}_encoded')\n    dataset.drop([f'{one_hot[i]}'], axis=1, inplace=True)\n    dataset = pd.concat([dataset, dummies], axis=1)","0b82fc15":"dataset","d4650364":"columns = dataset.columns.drop('Churn')","d8dfd26a":"features = columns\nlabel = ['Churn']\n\nX = dataset[features]\ny = dataset[label]","142583c6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=0)\n\nprint(f'Total # of sample in whole dataset: {len(X)}')\nprint(f'Total # of sample in train dataset: {len(X_train)}')\nprint(f'Total # of sample in validation dataset: {len(X_valid)}')\nprint(f'Total # of sample in test dataset: {len(X_test)}')","8686d36f":"pipeline_GaussianNB = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_GaussianNB\",GaussianNB())])\n\npipeline_BernoulliNB = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_BernoulliNB\",BernoulliNB())])\n\npipeline_LogisticRegression = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_LogisticRegression\",LogisticRegression())])\n\npipeline_RandomForest = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_RandomForest\",RandomForestClassifier())])\n\npipeline_SVM = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_SVM\",SVC())])\n\npipeline_DecisionTree = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_DecisionTree\",DecisionTreeClassifier())])\n\npipeline_KNN = Pipeline([(\"scaler\",StandardScaler()),\n                     (\"pipeline_KNN\",KNeighborsClassifier())])\n\npipeline_GBC = Pipeline([(\"scaler\",StandardScaler()), (\n                        \"pipeline_GBC\",GradientBoostingClassifier())])\n\npipeline_SGD = Pipeline([(\"scaler\",StandardScaler()), \n                        (\"pipeline_SGD\",SGDClassifier(max_iter=5000, random_state=0))])\n\npipeline_LGBM = Pipeline([(\"scaler\",StandardScaler()), \n                        (\"pipeline_NN\",lightgbm.LGBMClassifier())])\n\npipelines = [pipeline_GaussianNB, pipeline_BernoulliNB, pipeline_LogisticRegression, pipeline_RandomForest, pipeline_SVM, pipeline_DecisionTree, pipeline_KNN, pipeline_GBC, pipeline_SGD, pipeline_LGBM]\n\npipe_dict = {0: \"GaussianNB\", 1: \"BernoulliNB\", 2: \"LogisticRegression\",3: \"RandomForestClassifier\", 4: \"SupportVectorMachine\", 5: \"DecisionTreeClassifier\",\n            6: \"KNeighborsClassifier\", 7: \"GradientBoostingClassifier\", 8:\"Stochastic Gradient Descent\", 9: \"LGBM\"}\n\nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent', 'LGBM']\n\ni= 0\ntrainScores = []\nvalidationScores = []\ntestScores = []\n\nfor pipe in pipelines:\n    pipe.fit(X_train, y_train)\n    print(f'{pipe_dict[i]}')\n    print(\"Train Score of %s: %f     \" % (pipe_dict[i], pipe.score(X_train, y_train)*100))\n    trainScores.append(pipe.score(X_train, y_train)*100)\n    \n    print(\"Validation Score of %s: %f\" % (pipe_dict[i], pipe.score(X_valid, y_valid)*100))\n    validationScores.append(pipe.score(X_valid, y_valid)*100)\n    \n    print(\"Test Score of %s: %f      \" % (pipe_dict[i], pipe.score(X_test, y_test)*100))\n    testScores.append(pipe.score(X_test, y_test)*100)\n    print(\" \")\n    \n    y_predictions = pipe.predict(X_test)\n    conf_matrix = confusion_matrix(y_predictions, y_test)\n    print(f'Confussion Matrix: \\n{conf_matrix}\\n')\n    \n    tn = conf_matrix[0,0]\n    fp = conf_matrix[0,1]\n    tp = conf_matrix[1,1]\n    fn = conf_matrix[1,0]\n\n    total = tn + fp + tp + fn\n    real_positive = tp + fn\n    real_negative = tn + fp\n\n    accuracy  = (tp + tn) \/ total # Accuracy Rate\n    precision = tp \/ (tp + fp) # Positive Predictive Value\n    recall    = tp \/ (tp + fn) # True Positive Rate\n    f1score  = 2 * precision * recall \/ (precision + recall)\n    specificity = tn \/ (tn + fp) # True Negative Rate\n    error_rate = (fp + fn) \/ total # Missclassification Rate\n    prevalence = real_positive \/ total\n    miss_rate = fn \/ real_positive # False Negative Rate\n    fall_out = fp \/ real_negative # False Positive Rate\n    \n    print('Evaluation Metrics:')\n    print(f'Accuracy    : {accuracy}')\n    print(f'Precision   : {precision}')\n    print(f'Recall      : {recall}')\n    print(f'F1 score    : {f1score}')\n    print(f'Specificity : {specificity}')\n    print(f'Error Rate  : {error_rate}')\n    print(f'Prevalence  : {prevalence}')\n    print(f'Miss Rate   : {miss_rate}')\n    print(f'Fall Out    : {fall_out}')\n\n    print(\"\") \n    print(f'Classification Report: \\n{classification_report(y_predictions, y_test)}\\n')\n    print(\"\")\n\n    print(\"*****\"*20)\n    i +=1","ab21e049":"plt.figure(figsize=(20,10))\nsns.set_style('darkgrid')\nplt.title('Train - Validation - Test Scores of Models', fontweight='bold', size = 24)\n\nbarWidth = 0.25\n \nbars1 = trainScores\nbars2 = validationScores\nbars3 = testScores\n \nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n \nplt.bar(r1, bars1, color='blue', width=barWidth, edgecolor='white', label='train', yerr=0.5,ecolor=\"black\",capsize=10)\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='validation', yerr=0.5,ecolor=\"black\",capsize=10, alpha = .50)\nplt.bar(r3, bars3, color='red', width=barWidth, edgecolor='white', label='test', yerr=0.5,ecolor=\"black\",capsize=10, hatch = '-')\n \nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent', 'LGBM']\n    \nplt.xlabel('Algorithms', fontweight='bold', size = 24)\nplt.ylabel('Scores', fontweight='bold', size = 24)\nplt.xticks([r + barWidth for r in range(len(bars1))], modelNames, rotation = 75)\n \nplt.legend()\nplt.show()","b56f296a":"table = pd.DataFrame({'Model': modelNames, 'Train': trainScores, 'Validation': validationScores, 'Test': testScores})\ntable","6206921e":"cv_results_acc = []\n\nfor i, model in enumerate(pipelines):\n    cv_score = cross_val_score(model, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    cv_results_acc.append(cv_score.mean()*100)\n    print(\"%s: %f\" % (pipe_dict[i], cv_score.mean()*100))","cc561362":"table_cv = pd.DataFrame({'Model': modelNames, 'CV Score': cv_results_acc})\ntable_cv","ee530ed1":"plt.figure(figsize=(20,10))\nsns.set_style('darkgrid')\nplt.title('CV Scores Means', fontweight='bold', size = 24)\n\nbarWidth = 0.5\n \nbars2 = cv_results_acc\n \nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\n \nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='black',  yerr=0.5,ecolor=\"black\",capsize=10)\n\n\nmodelNames = [\"GaussianNB\", 'BernoulliNB','LogisticRegression','RandomForestClassifier','SupportVectorMachine',\n             'DecisionTreeClassifier', 'KNeighborsClassifier','GradientBoostingClassifier',\n             'Stochastic Gradient Descent', 'Light GBM']\n    \nplt.xlabel('Algorithms', fontweight='bold', size = 24)\nplt.ylabel('Scores', fontweight='bold', size = 24)\nplt.xticks([r + barWidth for r in range(len(bars1))], modelNames, rotation = 75)\n \nplt.legend()\nplt.show()","fef57512":"sc=StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_valid = sc.fit_transform(X_valid)\nX_test = sc.transform(X_test)","f46d7f26":"models = {\n    'RandomForestClassifier': RandomForestClassifier(),\n    'DecisionTreeClassifier': DecisionTreeClassifier(),\n    'GradientBoostingClassifier': GradientBoostingClassifier(),\n    'Light GBM': lightgbm.LGBMClassifier(),\n}\n\nfor m in models:\n  model = models[m]\n  model.fit(X_train, y_train)\n  \n  print(f'{m}') \n  best_features = SelectFromModel(model)\n  best_features.fit(X, y)\n\n  transformedX = best_features.transform(X)\n  print(f\"Old Shape: {X.shape} New shape: {transformedX.shape}\")\n  print(\"\\n\")\n\n  imp_feature = pd.DataFrame({'Feature': features, 'Importance': model.feature_importances_})\n  plt.figure(figsize=(15,10))\n  plt.title(\"Feature Importance Graphic\")\n  plt.xlabel(\"importance \")\n  plt.ylabel(\"features\")\n  plt.barh(imp_feature['Feature'],imp_feature['Importance'])\n  plt.show()","07a4a984":"models = {\n    'BernoulliNB': BernoulliNB(),\n    'LogisticRegression': LogisticRegression(),\n    'Stochastic Gradient Descent':  SGDClassifier(max_iter=5000, random_state=0),\n}\n\nfor m in models:\n  model = models[m]\n  model.fit(X_train, y_train)\n  \n  print(f'{m}') \n  best_features = SelectFromModel(model)\n  best_features.fit(X, y)\n\n  transformedX = best_features.transform(X)\n  print(f\"Old Shape: {X.shape} New shape: {transformedX.shape}\")\n  print(\"\\n\")","1b3a3904":"gbc_model = GradientBoostingClassifier()\ngbc_model.fit(X_train, y_train)\n\ntrain_score = gbc_model.score(X_train, y_train)\nprint(f'Train score of trained model: {train_score*100}')\n\nvalidation_score = gbc_model.score(X_valid, y_valid)\nprint(f'Validation score of trained model: {validation_score*100}')\n\ntest_score = gbc_model.score(X_test, y_test)\nprint(f'Test score of trained model: {test_score*100}')","08e774b6":"y_predictions = gbc_model.predict(X_test)\n\nconf_matrix = confusion_matrix(y_predictions, y_test)\n\nprint(f'Accuracy: {accuracy_score(y_predictions, y_test)*100}')\nprint()\nprint(f'Confussion matrix: \\n{conf_matrix}\\n')\n\nsns.heatmap(conf_matrix, annot=True)","7fee2b88":"tn = conf_matrix[0,0]\nfp = conf_matrix[0,1]\ntp = conf_matrix[1,1]\nfn = conf_matrix[1,0]\n\ntotal = tn + fp + tp + fn\nreal_positive = tp + fn\nreal_negative = tn + fp","f108c584":"accuracy  = (tp + tn) \/ total # Accuracy Rate\nprecision = tp \/ (tp + fp) # Positive Predictive Value\nrecall    = tp \/ (tp + fn) # True Positive Rate\nf1score  = 2 * precision * recall \/ (precision + recall)\nspecificity = tn \/ (tn + fp) # True Negative Rate\nerror_rate = (fp + fn) \/ total # Missclassification Rate\nprevalence = real_positive \/ total\nmiss_rate = fn \/ real_positive # False Negative Rate\nfall_out = fp \/ real_negative # False Positive Rate\n\nprint(f'Accuracy    : {accuracy}')\nprint(f'Precision   : {precision}')\nprint(f'Recall      : {recall}')\nprint(f'F1 score    : {f1score}')\nprint(f'Specificity : {specificity}')\nprint(f'Error Rate  : {error_rate}')\nprint(f'Prevalence  : {prevalence}')\nprint(f'Miss Rate   : {miss_rate}')\nprint(f'Fall Out    : {fall_out}')","3b33f475":"predictions = gbc_model.predict(X_test)\n\nprint(classification_report(predictions, y_test))","f06ddd85":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\ndef plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='orange', label='ROC' )\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","9279d57f":"probs = gbc_model.predict_proba(X_test)\nprobs = probs[:, 1]","eb0f87e5":"auc = roc_auc_score(y_test, probs)\nprint('AUC: ', auc*100)","3d91f113":"fpr, tpr, thresholds = roc_curve(y_test, probs)\nplt.legend(loc = 'lower right')\nplot_roc_curve(fpr, tpr)","5606356e":"!pip install pydotplus","d44c9062":"#####\n# This code snippet was taken from this url: https:\/\/stackoverflow.com\/questions\/44974360\/how-to-visualize-an-sklearn-gradientboostingclassifier\n#####\n\nimport pydotplus\nfrom sklearn.tree import export_graphviz\nfrom pydotplus import graph_from_dot_data\nfrom IPython.display import Image\n\nsub_tree = gbc_model.estimators_[10, 0]\ndot_data = export_graphviz(sub_tree, out_file=None, filled=True, \n                           rounded=True, special_characters=True, proportion=True, impurity=True)\n\ngraph = graph_from_dot_data(dot_data)\nImage(graph.create_png())","5c983e54":"### OnlineBackup","5e8cf86f":"<a id=\"18\"><\/a>\n# Pipelines","85d421a5":"<a id=\"5\"><\/a>\n\n### Categorical Variables","1e0f95b8":"### Contract","668da0bb":"### Partner ","9d3bc41c":"### Gender","452621b9":"### Dependents","2f3028d4":"<a id=\"23\"><\/a>\n# Gradient Boosting Classifier","955f92e7":"<a id=\"6\"><\/a>\n\n### Numerical Variables","0ba68b21":"<a id=\"15\"><\/a>\n\n## Label Encoding\n\nLabel Encoding is an encoding technique for handling categorical variables. In this technique, each data is assigned a unique integer.","fcbacc34":"### InternetService","ee1eeb66":"<a id=\"26\"><\/a>\n## ROC Curve","b4cd3a29":"<a id=\"9\"><\/a>\n\n## Distributions of Each Feature According to 'Churn'\n\nThese graphs show the distribution of the variable in each feature according to 'Churn'.","016639d5":"<a id=\"1\"><\/a>\n# Importing the Necessary Libraries","eff19495":"<a id=\"16\"><\/a>\n\n## One-Hot Encoding\n\nOne Hot Encoding is the binary representation of categorical variables. This process requires categorical values to be mapped to integer values first. Next, each integer value is represented as a binary vector with all values zero except the integer index marked with 1.\n\nOne Hot Encoding makes the representation of categorical data more expressive and easy. Many machine learning algorithms cannot work directly with categorical data, so categories must be converted to numbers. This operation is required for input and output variables that are categorical.\n\nIn this part, I converted categorical datas to the binary values. This operation increases the accuracy.\n","161682f5":"<a id=\"22\"><\/a>\n## Uniqueness of each Feature","7e2e5fcc":"### TechSupport","7a3ddbf3":"### Numerical values, value ranges and distributions.","6b20edd6":"<a id=\"14\"><\/a>\n\n# Encoding","23731f68":"### StreamingMovies","ebea6b64":"## Content:\n\n1. [Importing the Necessary Libraries](#1)\n1. [Read Datas & Explanation of Features & Information About Datasets](#2)\n   1. [Variable Descriptions](#3)\n   1. [Univariate Variable Analysis](#4)\n      1. [Categorical Variables](#5)\n      1. [Numerical Variables](#6)\n1. [Basic Data Analysis](#7)\n   1. [Distribution of Each Feature](#8)\n   1. [Distributions of Each Feature According to 'Churn'](#9)\n1. [Data Visualization](#10)   \n1. [Pandas Profiling](#11)\n1. [Correlation](#12)\n1. [Skewness](#13)\n1. [Encoding](#14)\n   1. [Uniqueness of each Feature](#22)\n   1. [Label Encoding](#15)\n   1. [One-Hot Encoding](#16)\n1. [Train-Test Split](#17)\n1. [Pipelines](#18)\n   1. [k-Fold Cross Validation](#19)\n   1. [Best Features Selection](#20)\n1. [Gradient Boosting Classifier](#23)\n   1. [Confusion Matrix](#24)\n   1. [Classification Report](#25)\n   1. [ROC Curve](#26)\n   1. [Visualization](#27)\n1. [Conclusion](#21)      ","08eb2e7b":"<a id=\"8\"><\/a>\n\n## Distribution of Each Feature\n\nThese graphs show the distribution of each feature within itself.","b287419e":"<a id=\"27\"><\/a>\n## Visualization","bf8fd689":"<a id=\"3\"><\/a>\n\n## Variable Descriptions\n\n* gender    -->    Whether the customer is a male or a female     \n* SeniorCitizen   -->    Whether the customer is a senior citizen or not (1, 0)\n* Partner       -->       Whether the customer has a partner or not (Yes, No)\n* Dependents       -->   Whether the customer has dependents or not (Yes, No)\n* tenure            -->  Number of months the customer has stayed with the company\n* PhoneService      -->  Whether the customer has a phone service or not (Yes, No)\n* MultipleLines     -->  Whether the customer has multiple lines or not (Yes, No, No phone service)\n* InternetService   -->  Customer\u2019s internet service provider (DSL, Fiber optic, No)\n* OnlineSecurity    -->  Whether the customer has online security or not (Yes, No, No internet service)\n* OnlineBackup      -->  Whether the customer has online backup or not (Yes, No, No internet service)\n* DeviceProtection  -->  Whether the customer has device protection or not (Yes, No, No internet service)\n* TechSupport       -->  Whether the customer has tech support or not (Yes, No, No internet service)\n* StreamingTV       -->  Whether the customer has streaming TV or not (Yes, No, No internet service)\n* StreamingMovies   -->  Whether the customer has streaming movies or not (Yes, No, No internet service)\n* Contract           -->  The contract term of the customer (Month-to-month, One year, Two year)\n* PaperlessBilling  -->  Whether the customer has paperless billing or not (Yes, No)\n* PaymentMethod     -->  The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n* MonthlyCharges    -->  The amount charged to the customer monthly\n* TotalCharges      -->  The total amount charged to the customer\n* Churn              -->  Whether the customer churned or not (Yes or No)","fccdf251":"### Distribution of Samples According to 'Churn' = Yes or 'Churn' = No with Histograms","0e8d3f01":"#### Implications:\n\n* As seen from Heat Map, there is a high correlation between 'tenure' and 'TotalCharges'.\n\n* Another notable correlation is between 'MonthlyCharges' and 'TotalCharges'.","f7edcb58":"<a id=\"25\"><\/a>\n## Classification Report","df670dcb":"### PaymentMethod","c881b7d1":"<a id=\"17\"><\/a>\n# Train - Test Split","63c4d70f":"<a id=\"10\"><\/a>\n# Data Visualization","e35cc97c":"<a id=\"12\"><\/a>\n\n# Correlation","4608fe42":"### MultipleLines","d846be9c":"### DeviceProtection","c8900584":"### PaperlessBilling","28b30359":"<a id=\"21\"><\/a>\n# Conclusion\n\nI made Visualization and Machine Learning on this notebook. If you like my visualization and you want to know how I made them, you can check my other notebooks which are about Seaborn and Plotly libraries. You can see them via this links:\n\n**EDA: Visualization with Plotly for Beginners**\n\n* https:\/\/www.kaggle.com\/barisscal\/eda-visualization-with-plotly-for-beginners\n\n\n**EDA: Visualization with Seaborn**\n\n* https:\/\/www.kaggle.com\/barisscal\/eda-visualization-with-seaborn\n\n\n* If you have questions, please comment them. I will try to explain if you don't understand.\n* If you liked this notebook, please let me know :)\n\nThank you for your time.","74decba3":"### PhoneService","6389cbcc":"### The relationship between 'MonthlyCharges' and 'TotalCharges' and the correlation with 'gender' and 'tenure'.","704935fd":"\n<a id=\"19\"><\/a>\n## Cross Validation","e449e7e4":"<a id=\"11\"><\/a>\n\n# Pandas Profiling\n\nPandas profiling is a useful library that generates interactive reports about the data. With using this library, we can see types of data, distribution of data and various statistical information. This tool has many features for data preparing. Pandas Profiling includes graphics about specific feature and correlation maps too. You can see more details about this tool in the following url: https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/master\/rtd\/","91eb9c87":"### StreamingTV","947bb2af":"<a id=\"7\"><\/a>\n# Basic Data Analysis","7fae5e7a":"<a id=\"24\"><\/a>\n## Confusion Matrix","2eab1c18":"# Exploratory Data Analysis and Machine Learning Classification on Customer Churn\n\nIn this notebook, I performed EDA on the 'Customer Churn Dataset'. I visualized the data using the Seaborn library. I created pipelines with Machine Learning algorithms. I applied k-Fold Cross Validation each of them and evaluated their results. Lastly, I determined best features for some algorithms. I hope this notebook will be useful to you.\n\n### If you have questions please ask them on the comment section.\n\n### I will be glad if you can give feedback.","2e29ae43":"<a id=\"13\"><\/a>\n\n# Skewness","5d2cccd8":"### OnlineSecurity","90da6ef6":"<a id=\"4\"><\/a>\n\n## Univariate Variable Analysis\n\n* Categorical Variables: ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'Churn']\n\n* Numerical Variables: ['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges']","9a3d067a":"<a id=\"20\"><\/a>\n## Best Features Selection","0975e1da":"<a id=\"2\"><\/a>\n\n# Read Datas & Explanation of Features & Information About Datasets"}}