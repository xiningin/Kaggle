{"cell_type":{"70d3f200":"code","e5a77b06":"code","641b0e7c":"code","3bbea377":"code","31f42d5f":"code","555cb50a":"code","f5561578":"code","a742aa20":"code","4c3f4227":"code","4413738a":"code","426fb427":"code","ea963118":"code","523f2c19":"code","3caecd00":"code","5e7c7820":"code","18123af9":"code","efc33f64":"code","33a314f3":"code","84ccd8e7":"code","a25d3aca":"code","380e923c":"code","7e66175e":"code","2d1e7383":"code","2d5dc347":"code","96aa99cc":"code","966ee460":"code","678ea3ad":"code","e0b6a9ed":"code","b1fe8dfa":"markdown","a91971ac":"markdown","1e1122d7":"markdown","7d353abc":"markdown","9958a427":"markdown","a6a5f96e":"markdown","3ec8cead":"markdown","2db0a920":"markdown"},"source":{"70d3f200":"import numpy as np # linear algebra\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)","e5a77b06":"import cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.patches as patches","641b0e7c":"img1=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real1.jpg')\nimg1 = cv2.resize(img1, (64,64), interpolation = cv2.INTER_AREA) \nimg1rgb=cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)\nimg2=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real2.jpg')\nimg2 = cv2.resize(img2, (64,64), interpolation = cv2.INTER_AREA) \nimg2rgb=cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)\nimg3=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real3.jpg')\nimg3 = cv2.resize(img3, (64,64), interpolation = cv2.INTER_AREA) \nimg3rgb=cv2.cvtColor(img3, cv2.COLOR_BGR2RGB)\nimg4=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real4.jpg')\nimg4 = cv2.resize(img4, (64,64), interpolation = cv2.INTER_AREA) \nimg4rgb=cv2.cvtColor(img4, cv2.COLOR_BGR2RGB)\nimg5=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real5.jpg')\nimg5 = cv2.resize(img5, (64,64), interpolation = cv2.INTER_AREA) \nimg5rgb=cv2.cvtColor(img5, cv2.COLOR_BGR2RGB)\nimg6=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real6.jpg')\nimg6 = cv2.resize(img6, (64,64), interpolation = cv2.INTER_AREA) \nimg6rgb=cv2.cvtColor(img6, cv2.COLOR_BGR2RGB)\nimg7=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real7.jpg')\nimg7 = cv2.resize(img7, (64,64), interpolation = cv2.INTER_AREA) \nimg7rgb=cv2.cvtColor(img7, cv2.COLOR_BGR2RGB)\nimg8=cv2.imread('\/kaggle\/input\/gerek-resimler\/img_real8.jpg')\nimg8 = cv2.resize(img8, (64,64), interpolation = cv2.INTER_AREA) \nimg8rgb=cv2.cvtColor(img8, cv2.COLOR_BGR2RGB)\nfig = plt.figure()\nfig.set_figwidth(18)\na=fig.add_subplot(1, 8, 1)\na.set_title('1.img '+str(img1rgb.shape))\nplt.imshow(img1rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 2)\na.set_title('2.img '+str(img2rgb.shape))\nplt.imshow(img2rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 3)\na.set_title('3.img '+str(img3rgb.shape))\nplt.imshow(img3rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 4)\na.set_title('4.img '+str(img4rgb.shape))\nplt.imshow(img4rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 5)\na.set_title('5.img '+str(img5rgb.shape))\nplt.imshow(img5rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 6)\na.set_title('6.img '+str(img6rgb.shape))\nplt.imshow(img6rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 7)\na.set_title('7.img '+str(img7rgb.shape))\nplt.imshow(img7rgb)\nplt.axis('off')\na=fig.add_subplot(1, 8, 8)\na.set_title('8.img '+str(img8rgb.shape))\nplt.imshow(img8rgb)\nplt.axis('off')\n","3bbea377":"kart1=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart1.jpg')\nkart1 = cv2.resize(kart1, (256,256), interpolation = cv2.INTER_AREA) \nkart1rgb=cv2.cvtColor(kart1, cv2.COLOR_BGR2RGB)\nkart2=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart2.jpg')\nkart2 = cv2.resize(kart2, (256,256), interpolation = cv2.INTER_AREA)\nkart2rgb=cv2.cvtColor(kart2, cv2.COLOR_BGR2RGB)\nkart3=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart3.jpg')\nkart3 = cv2.resize(kart3, (256,256), interpolation = cv2.INTER_AREA)\nkart3rgb=cv2.cvtColor(kart3, cv2.COLOR_BGR2RGB)\nkart4=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart4.jpg')\nkart4 = cv2.resize(kart4, (256,256), interpolation = cv2.INTER_AREA)\nkart4rgb=cv2.cvtColor(kart4, cv2.COLOR_BGR2RGB)\nkart5=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart5.jpg')\nkart5 = cv2.resize(kart5, (256,256), interpolation = cv2.INTER_AREA)\nkart5rgb=cv2.cvtColor(kart5, cv2.COLOR_BGR2RGB)\nkart6=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart6.jpg')\nkart6 = cv2.resize(kart6, (256,256), interpolation = cv2.INTER_AREA)\nkart6rgb=cv2.cvtColor(kart6, cv2.COLOR_BGR2RGB)\nkart7=cv2.imread('\/kaggle\/input\/gerek-kartlar\/kart7.jpg')\nkart7 = cv2.resize(kart7, (256,256), interpolation = cv2.INTER_AREA)\nkart7rgb=cv2.cvtColor(kart7, cv2.COLOR_BGR2RGB)\nfig = plt.figure()\nfig.set_figwidth(18)\na=fig.add_subplot(1, 7, 1)\na.set_title('1.kart '+str(kart1rgb.shape))\nplt.imshow(kart1rgb)\nplt.axis('off')\na=fig.add_subplot(1, 7, 2)\na.set_title('2.kart '+str(kart2rgb.shape))\nplt.imshow(kart2rgb)\nplt.axis('off')\na=fig.add_subplot(1, 7, 3)\na.set_title('3.kart '+str(kart3rgb.shape))\nplt.imshow(kart3rgb)\nplt.axis('off')\na=fig.add_subplot(1, 7, 4)\na.set_title('4.kart '+str(kart4rgb.shape))\nplt.imshow(kart4rgb)\nplt.axis('off')\na=fig.add_subplot(1, 7, 5)\na.set_title('5.kart '+str(kart5rgb.shape))\nplt.imshow(kart5rgb)\nplt.axis('off')\na=fig.add_subplot(1, 7, 6)\na.set_title('6.kart '+str(kart6rgb.shape))\nplt.imshow(kart6rgb)\nplt.axis('off')\na=fig.add_subplot(1, 7, 7)\na.set_title('7.kart '+str(kart7rgb.shape))\nplt.imshow(kart7rgb)\nplt.axis('off')","31f42d5f":"def concat_tile(im_list_2d):\n    return cv2.vconcat([cv2.hconcat(im_list_h) for im_list_h in im_list_2d])\nim_tile = concat_tile([[img5rgb, img4rgb, img5rgb, img4rgb],\n                       [img4rgb, img5rgb, img4rgb, img5rgb],\n                       [img5rgb, img4rgb, img5rgb, img4rgb],\n                       [img4rgb, img5rgb, img4rgb, img5rgb]])\nplt.imshow(im_tile)\nplt.axis('off')","555cb50a":"def kernel_size(image):\n    size=[int((image.shape[0])\/4),int((image.shape[1])\/4)]\n    return size","f5561578":"def solust_ortalama(img_binary):\n    count=0\n    sum=0\n    for i in range (0,kernel_size(img_binary)[0]):\n        for j in range(0,kernel_size(img_binary)[1]):\n            sum=sum+img_binary[i,j]\n            count=count+1\n    result=sum\/count\n    return (result)","a742aa20":"def sagalt_ortalama(img_binary):\n    count=0\n    sum=0\n    for i in range (img_binary.shape[0]-(kernel_size(img_binary)[0]),img_binary.shape[0]):\n        for j in range(img_binary.shape[1]-(kernel_size(img_binary)[1]),img_binary.shape[1]):\n            sum=sum+img_binary[i,j]\n            count=count+1\n    result=sum\/count\n    return (result)","4c3f4227":"def sagust_ortalama(img_binary):\n    count=0\n    sum=0\n    for i in range (0,kernel_size(img_binary)[0]):\n        for j in range(img_binary.shape[1]-(kernel_size(img_binary)[1]),img_binary.shape[1]):\n            sum=sum+img_binary[i,j]\n            count=count+1\n    result=sum\/count\n    return (result)","4413738a":"def solalt_ortalama(img_binary):  \n    count=0\n    sum=0\n    for i in range (img_binary.shape[0]-(kernel_size(img_binary)[0]),img_binary.shape[0]):\n        for j in range(0,kernel_size(img_binary)[1]):\n            sum=sum+img_binary[i,j]\n            count=count+1\n    result=sum\/count\n    return (result)","426fb427":"def orta_ortalama(img_binary):\n    count=0\n    sum=0\n    for i in range (int(img_binary.shape[0]\/2)-int(kernel_size(img_binary)[0]\/2),int(img_binary.shape[0]\/2)+int(kernel_size(img_binary)[0]\/2)):\n        for j in range(int(img_binary.shape[1]\/2)-int(kernel_size(img_binary)[1]\/2),int(img_binary.shape[1]\/2)+int(kernel_size(img_binary)[1]\/2)):\n            sum=sum+img_binary[i,j]\n            count=count+1\n    result=sum\/count\n    return (result)","ea963118":"def tahmin(image):\n    #resized = cv2.resize(image, (64,64), interpolation = cv2.INTER_AREA) \n    img_gray=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    _,img_binary=cv2.threshold(img_gray,127,255,cv2.THRESH_BINARY)\n    imgrgb=cv2.cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    #rect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\n    #fig,ax = plt.subplots(1)\n    #ax.add_patch(rect)\n    #ax.imshow(imgrgb,cmap=cm.gray, vmin=0, vmax=255)\n    #plt.axis('off')\n    tahmin=\"Bilemedim\"\n    if solalt_ortalama(img_binary)-sagust_ortalama(img_binary)>127:\n        tahmin=\"Sa\u011f \u00fcst renkli\"\n    elif solust_ortalama(img_binary)-sagalt_ortalama(img_binary)>127:\n        tahmin=\"Sa\u011f alt renkli\"\n    elif sagust_ortalama(img_binary)-solalt_ortalama(img_binary)>127:\n        tahmin=\"Sol alt renkli\"\n    elif sagalt_ortalama(img_binary)-solust_ortalama(img_binary)>127:\n        tahmin=\"Sol \u00fcst renkli\"\n    elif (solust_ortalama(img_binary)+sagalt_ortalama(img_binary)+orta_ortalama(img_binary))\/3>200.0:\n        tahmin=\"Tamamen beyaz\"\n    elif (solust_ortalama(img_binary)+sagalt_ortalama(img_binary)+orta_ortalama(img_binary))\/3<50.0:\n        tahmin=\"Tamamen renkli\"\n    elif orta_ortalama(img_binary)<127:\n        tahmin=\"Orta renkli\"\n    elif orta_ortalama(img_binary)>127:\n        tahmin=\"Orta beyaz\"\n    return tahmin,imgrgb","523f2c19":"sonuc,image=tahmin(img1)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","3caecd00":"sonuc,image=tahmin(img2)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","5e7c7820":"sonuc,image=tahmin(img3)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","18123af9":"sonuc,image=tahmin(img4)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","efc33f64":"sonuc,image=tahmin(img5)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","33a314f3":"sonuc,image=tahmin(img6)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","84ccd8e7":"sonuc,image=tahmin(img7)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","a25d3aca":"sonuc,image=tahmin(img8)\nprint(sonuc)\nrect = patches.Rectangle((0,0),63,63,linewidth=2,edgecolor='black',facecolor='none')\nfig,ax = plt.subplots(1)\nax.add_patch(rect)\nax.imshow(image,cmap=cm.gray, vmin=0, vmax=255)\nplt.axis('off')","380e923c":"def kart_oku(kart_resmi):\n    kup_liste=[img1,img2,img3,img4,img5,img6,img7,img8]\n    thm1of16=img = np.zeros((64,64,3), np.int8)\n    thm2of16=img = np.zeros((64,64,3), np.int8)\n    thm3of16=img = np.zeros((64,64,3), np.int8)\n    thm4of16=img = np.zeros((64,64,3), np.int8)\n    thm5of16=img = np.zeros((64,64,3), np.int8)\n    thm6of16=img = np.zeros((64,64,3), np.int8)\n    thm7of16=img = np.zeros((64,64,3), np.int8)\n    thm8of16=img = np.zeros((64,64,3), np.int8)\n    thm9of16=img = np.zeros((64,64,3), np.int8)\n    thm10of16=img = np.zeros((64,64,3), np.int8)\n    thm11of16=img = np.zeros((64,64,3), np.int8)\n    thm12of16=img = np.zeros((64,64,3), np.int8)\n    thm13of16=img = np.zeros((64,64,3), np.int8)\n    thm14of16=img = np.zeros((64,64,3), np.int8)\n    thm15of16=img = np.zeros((64,64,3), np.int8)\n    thm15of16=img = np.zeros((64,64,3), np.int8)\n    thm16of16=img = np.zeros((64,64,3), np.int8)\n    img1of16=kart_resmi[0:64, 0:64]\n    sonuc,temp_cube=tahmin(img1of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm1of16=temp_img\n    img2of16=kart_resmi[0:64, 65:128]\n    sonuc,temp_cube=tahmin(img2of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm2of16=temp_img\n    img3of16=kart_resmi[0:64, 129:192]\n    sonuc,temp_cube=tahmin(img3of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm3of16=temp_img\n    img4of16=kart_resmi[0:64, 193:256]\n    sonuc,temp_cube=tahmin(img4of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm4of16=temp_img\n    img5of16=kart_resmi[65:128, 0:64]\n    sonuc,temp_cube=tahmin(img5of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm5of16=temp_img\n    img6of16=kart_resmi[65:128, 65:128]\n    sonuc,temp_cube=tahmin(img6of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm6of16=temp_img\n    img7of16=kart_resmi[65:128, 129:192]\n    sonuc,temp_cube=tahmin(img7of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm7of16=temp_img\n    img8of16=kart_resmi[65:128, 193:256]\n    sonuc,temp_cube=tahmin(img8of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm8of16=temp_img\n    img9of16=kart_resmi[129:192, 0:64]\n    sonuc,temp_cube=tahmin(img9of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm9of16=temp_img\n    img10of16=kart_resmi[129:192, 65:128]\n    sonuc,temp_cube=tahmin(img10of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm10of16=temp_img\n    img11of16=kart_resmi[129:192, 129:192]\n    sonuc,temp_cube=tahmin(img11of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm11of16=temp_img\n    img12of16=kart_resmi[129:192, 193:256]\n    sonuc,temp_cube=tahmin(img12of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm12of16=temp_img\n    img13of16=kart_resmi[193:256, 0:64]\n    sonuc,temp_cube=tahmin(img13of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm13of16=temp_img\n    img14of16=kart_resmi[193:256, 65:128]\n    sonuc,temp_cube=tahmin(img14of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm14of16=temp_img\n    img15of16=kart_resmi[193:256, 129:192]\n    sonuc,temp_cube=tahmin(img15of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm15of16=temp_img\n    img16of16=kart_resmi[193:256, 193:256]\n    sonuc,temp_cube=tahmin(img16of16)\n    for i in (kup_liste):\n        temp_sonuc,temp_img=tahmin(i)\n        if temp_sonuc==sonuc:\n            thm16of16=temp_img\n    im_tile = concat_tile([[thm1of16, thm2of16, thm3of16, thm4of16],\n                           [thm5of16, thm6of16, thm7of16, thm8of16],\n                           [thm9of16, thm10of16, thm11of16, thm12of16],\n                           [thm13of16, thm14of16, thm15of16, thm16of16]])\n    fig = plt.figure()\n    fig.set_figwidth(10)\n    a=fig.add_subplot(1, 2, 1)\n    a.set_title('Kart ')\n    plt.imshow(kart_resmi)\n    plt.axis('off')\n    a=fig.add_subplot(1, 2, 2)\n    a.set_title('Dizgi ')\n    plt.imshow(im_tile)\n    plt.axis('off')\n","7e66175e":"kart_oku(kart1)","2d1e7383":"kart_oku(kart2)","2d5dc347":"kart_oku(kart3)","96aa99cc":"kart_oku(kart4)","966ee460":"kart_oku(kart5)","678ea3ad":"kart_oku(kart6)","e0b6a9ed":"kart_oku(kart7)","b1fe8dfa":"We guess any cube image.","a91971ac":"\nAs is seen each card consist of 16 small cubes. Our goal is to set in type small cubes according to the card like below programmatically.","1e1122d7":"In order to take samples from the corners and the middle of the pictures, we define a kernel of 1\/4 of the original picture.","7d353abc":"We define the prediction function.","9958a427":"This code is written to order small cubes according to the card images.\n","a6a5f96e":"First, 8 cube images are read,resized to 64x64 pixels and showed.","3ec8cead":"Second, 7 card images are read,resized to 256x256 pixels and showed.","2db0a920":"We define functions that calculate the average pixel values of the corners and the middle."}}