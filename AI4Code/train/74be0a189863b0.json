{"cell_type":{"4fdd9107":"code","41b251be":"code","872d1239":"code","f1c855de":"code","b7ac9e28":"code","9612b379":"code","352246c1":"code","1276a59f":"code","c3674a8f":"code","30e24a76":"code","983bd50b":"code","4f1a0894":"code","56b95e0d":"code","74a9893d":"code","497569f9":"code","c76b2574":"code","fe8c9cbb":"code","7d85011b":"code","395ba74f":"code","1dd354e8":"code","c50ebac2":"code","a866fadd":"code","5ca7b2a5":"code","b3031716":"code","72dc942e":"code","4ee7b818":"code","7276e50f":"code","d7adc680":"code","e62927c8":"code","9c2d9112":"code","8a3cd96a":"code","bde53700":"code","57b653dc":"code","21981841":"code","785dee14":"code","241611f0":"code","e9021aaa":"code","a3c6aa43":"code","d0b60303":"code","a4399de9":"code","cdad8a93":"code","2b8a2a9c":"code","86c73cde":"code","cf2e20e9":"code","b8ecf476":"markdown","7138b409":"markdown","7e669911":"markdown","e15bcce4":"markdown","0ea45d38":"markdown","c7557bbc":"markdown","b23094e9":"markdown","6a46f128":"markdown","f6402de0":"markdown","c194460c":"markdown"},"source":{"4fdd9107":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import loguniform\nfrom sklearn.model_selection import train_test_split,KFold, GridSearchCV, cross_val_score, RandomizedSearchCV\nfrom sklearn.utils import shuffle\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import balanced_accuracy_score, confusion_matrix, classification_report, make_scorer, accuracy_score\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nwarnings.filterwarnings('ignore')","41b251be":"#loading dataframe\nurl = \"https:\/\/raw.githubusercontent.com\/jbrownlee\/Datasets\/master\/iris.csv\"\nnames = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'species']\ndf = pd.read_csv(url, names=names)","872d1239":"df.head()","f1c855de":"df.shape","b7ac9e28":"df.info()","9612b379":"df.describe()","352246c1":"df[\"species\"].value_counts()","1276a59f":"df.groupby(\"species\").agg([\"mean\",\"median\",\"std\"])","c3674a8f":"#Plotting box-plots\nsns.set(style=\"dark\") \nplt.figure(figsize=(14,10))\nplt.subplot(2,2,1)\nsns.boxplot(x='species',y='sepal-length',data=df)\nplt.subplot(2,2,2)\nsns.boxplot(x='species',y='sepal-width',data=df)\nplt.subplot(2,2,3)\nsns.boxplot(x='species',y='petal-length',data=df)\nplt.subplot(2,2,4)\nsns.boxplot(x='species',y='petal-width',data=df);","30e24a76":"#Plotting Violin plots\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(14,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='sepal-length',y='species',data=df)\nplt.subplot(2,2,2)\nsns.violinplot(x='sepal-width',y='species',data=df)\nplt.subplot(2,2,3)\nsns.violinplot(x='petal-length',y='species',data=df)\nplt.subplot(2,2,4)\nsns.violinplot(x='petal-width',y='species',data=df);","983bd50b":"#Plotting the Histograms\nplt.figure(figsize=(14,10))\nplt.subplot(2,2,1)\nplt.title('sepal-length')\nplt.hist(df[\"sepal-length\"],density=True, bins=30, color=\"red\", label=\"sepal-length\")\nplt.subplot(2,2,2)\nplt.title('sepal-width')\nplt.hist(df[\"sepal-width\"],density=True, bins=30)\nplt.subplot(2,2,3)\nplt.title('petal-length')\nplt.hist(df[\"petal-length\"],density=True, bins=30, color=\"green\")\nplt.subplot(2,2,4)\nplt.title('petal-width')\nplt.hist(df[\"petal-width\"],density=True, bins=30, color=\"yellow\");","4f1a0894":"#Plotting pairplot\nsns.pairplot(df, hue='species', markers=(\"D\", \"o\", \"X\"), height=3);","56b95e0d":"#Plotting scatterplot\nsns.lmplot( x=\"sepal-length\", y=\"sepal-width\", data=df, fit_reg=False, hue='species', legend=True, height=6);\nplt.title(\"Relationship between sepal width and length\");","74a9893d":"#Plotting scatterplot\nsns.lmplot( x=\"petal-length\", y=\"petal-width\", data=df, fit_reg=False, hue='species', legend=True, height=6);\nplt.title(\"Relationship between petal width and petal\");","497569f9":"Ss = StandardScaler()\ndf[['sepal-length', 'sepal-width', 'petal-length', 'petal-width']] = Ss.fit_transform(df[['sepal-length', 'sepal-width', 'petal-length', 'petal-width']])","c76b2574":"#Plotting Heatmap\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr(), annot=True, cmap=\"Reds\");","fe8c9cbb":"#Plotting Andrews Curves\npd.plotting.andrews_curves(df, 'species');","7d85011b":"df=shuffle(df)","395ba74f":"df.head(20)","1dd354e8":"#Train-Test Split","c50ebac2":"X= df.loc[:, df.columns != 'species'].values\ny= df.loc[:, df.columns == 'species'].values.squeeze()","a866fadd":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=11, test_size=0.2, stratify=y)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","5ca7b2a5":"#Label balance control\nlabel_train, count_train=(np.unique(y_train,return_counts=True))\nlabel_test, count_test=(np.unique(y_test,return_counts=True))\nprint(count_train,count_test)","b3031716":"models={}\nrn=8\nkfold=KFold(n_splits=5 , shuffle=True, random_state=rn)","72dc942e":"#Cross Validation DecisionTree\nscore_fnc= accuracy_score\nparam_grid= {\"max_depth\":np.logspace(0.5, 2, 20).astype(int),\"min_samples_leaf\":np.logspace(0.5, 1.5, 20).astype(int),\n            \"criterion\":[\"gini\",\"entropy\"]}\nmodel = DecisionTreeClassifier()\nmodel_selection= RandomizedSearchCV(estimator=model, param_distributions=param_grid, scoring=make_scorer(score_fnc), \n                                    cv=kfold,n_iter=200)\nmodel_selection.fit(X_train,y_train)\n","4ee7b818":"model_selection.best_score_, model_selection.best_params_","7276e50f":"DT= DecisionTreeClassifier(min_samples_leaf=5, max_depth=40, criterion=\"entropy\")\nDT.fit(X_train,y_train)\nprediction=DT.predict(X_test)\nresult=accuracy_score(prediction,y_test)\nDecisionTree={'DecisionTree':result}\nmodels.update(DecisionTree)","d7adc680":"#Cross Validation KNN\nparam_grid= {\"n_neighbors\":np.arange(1,22,2)}\nmodel = KNeighborsClassifier()\nmodel_selection= GridSearchCV(estimator=model, param_grid=param_grid , scoring=make_scorer(score_fnc), cv=kfold)\nmodel_selection.fit(X_train,y_train)","e62927c8":"model_selection.best_score_, model_selection.best_params_","9c2d9112":"KNN= KNeighborsClassifier(n_neighbors=11)\nKNN.fit(X_train,y_train)\nprediction=KNN.predict(X_test)\nresult=accuracy_score(prediction,y_test)\nKNeighbors={'KNeighbors':result}\nmodels.update(KNeighbors)","8a3cd96a":"#Cross Validation Logistic Regression\nparam_grid= {\"penalty\": [\"l1\",\"l2\"], 'C': loguniform(1e-3,1e3)}\nmodel = LogisticRegression()\nmodel_selection= RandomizedSearchCV(estimator=model, param_distributions=param_grid, scoring=make_scorer(score_fnc), \n                                    cv=kfold,n_iter=200)\nmodel_selection.fit(X_train,y_train)","bde53700":"model_selection.best_score_, model_selection.best_params_","57b653dc":"LG= LogisticRegression(C=5.2188, penalty=\"l2\")\nLG.fit(X_train,y_train)\nprediction=LG.predict(X_test)\nresult=accuracy_score(prediction,y_test)\nLogisticRegression={'LogisticRegression':result}\nmodels.update(LogisticRegression)","21981841":"#Cross Validation SVM Kernel linear\nparam_grid= {'kernel':['linear'], 'C': loguniform(1e-3,1e3)}\nmodel = svm.SVC()\nmodel_selection= RandomizedSearchCV(estimator=model, param_distributions=param_grid, scoring=make_scorer(score_fnc), \n                                    cv=kfold,n_iter=200)\nmodel_selection.fit(X_train,y_train)","785dee14":"model_selection.best_score_, model_selection.best_params_","241611f0":"#Cross Validation SVM Kernel Poly\nparam_grid= {'kernel':['poly'],'C': loguniform(1e-2,1e3), 'degree': [2,3,4]}\nmodel = svm.SVC()\nmodel_selection= RandomizedSearchCV(estimator=model, param_distributions=param_grid, scoring=make_scorer(score_fnc), \n                                    cv=kfold,n_iter=200)\nmodel_selection.fit(X_train,y_train)","e9021aaa":"model_selection.best_score_, model_selection.best_params_","a3c6aa43":"#Cross Validation SVM Kernel RBF\nparam_grid= {'kernel':['rbf'], 'gamma': np.logspace(0.001,1,100), 'C': loguniform(1e-2,1e3)}\nmodel = svm.SVC()\nmodel_selection= RandomizedSearchCV(estimator=model, param_distributions=param_grid, scoring=make_scorer(score_fnc), \n                                    cv=kfold,n_iter=200)\nmodel_selection.fit(X_train,y_train)","d0b60303":"model_selection.best_score_, model_selection.best_params_","a4399de9":"SVM= svm.SVC(C=0.60724, kernel=\"linear\") \nSVM.fit(X_train,y_train)\nprediction=SVM.predict(X_test)\nresult=accuracy_score(prediction,y_test)\nSupportVectorMachine={'SupportVectorMachine':result}\nmodels.update(SupportVectorMachine)","cdad8a93":"#Cross Validation Random Forest\nparam_grid= {\"max_features\":np.arange(1,5), \"n_estimators\": np.arange(100,200,10)}\nmodel = RandomForestClassifier()\nmodel_selection= RandomizedSearchCV(estimator=model, param_distributions=param_grid, scoring=make_scorer(score_fnc), \n                                    cv=kfold, n_iter=200)\nmodel_selection.fit(X_train,y_train)","2b8a2a9c":"model_selection.best_score_, model_selection.best_params_","86c73cde":"RF= RandomForestClassifier(n_estimators= 100, max_features=1) \nRF.fit(X_train,y_train)\nprediction=RF.predict(X_test)\nresult=accuracy_score(prediction,y_test)\nRandomForest={'RandomForest':result}\nmodels.update(RandomForest)","cf2e20e9":"for key, value in models.items():\n    print(key,' : ', round(value,4))","b8ecf476":"## <font color=blue> The purpose of this project is to apply different algorithms of Machine Learning Classification <\/font>","7138b409":"## 1. Exploratory Data Analysis","7e669911":"### 2.1 Multivariate analysis","e15bcce4":"### 2.1 Univariate analysis","0ea45d38":"## 3. Evaluation of different algorithms","c7557bbc":"### 3.1 Creating validation dataset","b23094e9":"### :)","6a46f128":"### 3.2 Building Models","f6402de0":"# <font color=red> *MACHINE LEARNING - IRIS DATASET* <\/font>","c194460c":"## 2. Data Visualization"}}