{"cell_type":{"792c2898":"code","3953db5e":"code","de588db4":"code","ed7e5ff5":"code","0066b780":"code","34862846":"code","6bc5e038":"code","76f73237":"markdown","ffadb7ab":"markdown","23bb3591":"markdown","e84bf79c":"markdown","74883f43":"markdown","a987eaf3":"markdown","fe908d97":"markdown"},"source":{"792c2898":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3953db5e":"data1 = pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\", index_col = \"Serial No.\")\nX = data1.drop([\"Chance of Admit \"], axis = 1)\ny = data1[\"Chance of Admit \"]\ndata1","de588db4":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.heatmap(data1.corr(), annot = True, )","ed7e5ff5":"data = pd.melt(data1,id_vars=\"Chance of Admit \",\n               var_name=\"features\",\n                    value_name='value')\n_ = plt.subplots(figsize= (10, 5))\nsns.boxplot(x = \"features\", y = \"value\",  data = data)","0066b780":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.metrics import mean_squared_error as rmse\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state = 0)\nmy_mod = XGBRegressor(max_depth = 1, n_estimators = 100, min_child_weight = 0).fit(X_train, y_train)\nprint(rmse(y[400:], my_mod.predict(X[400:])))\nprint(mae(y_valid, my_mod.predict(X_valid)))\n","34862846":"from sklearn.model_selection import GridSearchCV\nparams = {\"min_child_weight\" : list(range(10))}\nsearch = GridSearchCV(my_mod, param_grid = params, cv = 3, n_jobs = -1).fit(X_train, y_train)","6bc5e038":"search.best_params_","76f73237":"## Drawing the heatmap and the correaltion of each feature\n","ffadb7ab":"## Detecting outliers","23bb3591":"It is visible that no two feature are highly correlated with each other so we should include all the data into our model","e84bf79c":"Since there are no outliers we can begin training our model directly (since all the basic pre proceesing like the encoding and imputing has already been done for us)","74883f43":"## Loading the dataset","a987eaf3":"## Training the XGBoost Model","fe908d97":"We have already achieved a very decent score let us try tuning the hyperparameters (we also would be running the risk of overftting the model this way). So, we would use Cross Validation to avoid overfitting"}}