{"cell_type":{"dc01524f":"code","51042cc8":"code","a322c83f":"code","2e0a0031":"code","92bba40c":"code","7828782a":"code","b8034bdb":"code","32e579f1":"code","8cacf188":"code","aa6ae802":"code","aac32423":"code","03c656ef":"code","3fb11384":"code","abffc2ee":"code","69f1cfcf":"code","7b5345d8":"code","a2922a98":"code","e71ca0d8":"code","11489d44":"code","d7336ba7":"code","e254cd29":"code","e6ebb6bf":"code","82022744":"code","a749cfa6":"code","53e16121":"code","b427374f":"code","bd3ddf70":"code","c00e34d9":"code","528ff47c":"code","5f20b703":"code","f83d8f91":"code","b2e661fc":"code","d7ca6983":"code","5f828337":"code","7f79d7e4":"code","1fbc15f5":"code","e6e09e96":"code","1cca3bfb":"code","4a723988":"code","a6d0a47b":"code","dcdace7f":"code","2eb4706e":"code","1b8d7fc4":"code","5b361b0d":"code","c6dec49f":"code","8db9497e":"code","9dbc7c4f":"code","5e483f7a":"code","ae0949eb":"code","e2e000fe":"code","9f08cdb6":"code","b32bf5a1":"code","39b7cdeb":"code","cd572435":"code","59494e8a":"markdown","52aea60b":"markdown","c3685810":"markdown","b79569e2":"markdown","6e7d6250":"markdown","e6835f84":"markdown"},"source":{"dc01524f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n## further libs for dit session\nimport matplotlib as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","51042cc8":"data = pd.read_csv(\"..\/input\/dit-loan-train.txt\")\ndata.head(10)","a322c83f":"data.describe()","2e0a0031":"data['Property_Area'].value_counts()","92bba40c":"data['ApplicantIncome'].hist(bins=10)","7828782a":"data['ApplicantIncome'].hist(bins=50)","b8034bdb":"data.boxplot(column=\"ApplicantIncome\", figsize=(15,8))","32e579f1":"data.boxplot(column=\"ApplicantIncome\", by=\"Education\", figsize=(15,8))","8cacf188":"data[\"LoanAmount\"].hist(bins=50, figsize=(12,8))","aa6ae802":"data.boxplot(column=\"LoanAmount\", figsize=(12,8))","aac32423":"temp1 = data[\"Credit_History\"].value_counts(ascending=True)\nprint(temp1)","03c656ef":"temp1 = data[\"Credit_History\"].value_counts(ascending=True, normalize=True)\nprint(temp1)","3fb11384":"temp2 = data.pivot_table(values=\"Loan_Status\", index=[\"Credit_History\"], aggfunc=lambda x: x.map({\"Y\": 1, \"N\": 0}).mean())\nprint(temp2)","abffc2ee":"temp1 = data[\"Credit_History\"].value_counts(ascending=True)\n\nimport matplotlib.pyplot as plt                                          \n\nfig = plt.figure(figsize=(8,4))\nax1 = fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of Applicants')\nax1.set_title(\"Applicants by Credit_History\")\ntemp1.plot(kind='bar')\n\nax2 = fig.add_subplot(122)\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")\ntemp2.plot(kind='bar')\n","69f1cfcf":"temp3 = pd.crosstab(data['Credit_History'], data['Loan_Status'])\ntemp3.plot(kind=\"bar\", stacked=True, color=[\"red\", \"blue\"])","7b5345d8":"temp4 = pd.crosstab([data['Credit_History'], data['Gender']], data['Loan_Status'])\nprint(temp4)\ntemp4.plot(kind='bar', stacked=True, color=['orange','grey'], grid=False, figsize=(12,6))","a2922a98":"temp5 = pd.crosstab([data['Gender'], data['Credit_History']], data['Loan_Status'])\ntemp5.plot(kind='bar', stacked=True, color=['orange','grey'], grid=False, figsize=(12,6))","e71ca0d8":"data.apply(lambda x: sum(x.isnull()),axis=0) ","11489d44":"data[\"LoanAmount\"].fillna(data[\"LoanAmount\"].mean(), inplace=True)\ndata.apply(lambda x: sum(x.isnull()),axis=0) ","d7336ba7":"print(data['Self_Employed'].value_counts())\nprint(data['Self_Employed'].value_counts(normalize=True))\ndata['Self_Employed'].fillna('No',inplace=True)","e254cd29":"data.apply(lambda x: sum(x.isnull()),axis=0) ","e6ebb6bf":"data['LoanAmount'].hist(bins=20)","82022744":"data[\"LoanAmount_log\"] = np.log(data[\"LoanAmount\"])\ndata[\"LoanAmount_log\"].hist(bins=20)","a749cfa6":"data.head(10)","53e16121":"data[\"TotalIncome\"] = data[\"ApplicantIncome\"] + data[\"CoapplicantIncome\"]\ndata[\"TotalIncome\"].hist(bins=20)","b427374f":"data[\"TotalIncome_log\"] = np.log(data[\"TotalIncome\"])\ndata[\"TotalIncome_log\"].hist(bins=20)","bd3ddf70":"data.apply(lambda x: sum(x.isnull()),axis=0) ","c00e34d9":"data['Married'].mode()","528ff47c":"data['Gender'].fillna(data['Gender'].mode()[0], inplace=True)\ndata.apply(lambda x: sum(x.isnull()),axis=0) ","5f20b703":"data['Married'].fillna(data['Married'].mode()[0], inplace=True)\ndata['Dependents'].fillna(data['Dependents'].mode()[0], inplace=True)\ndata['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mode()[0], inplace=True)\ndata['Credit_History'].fillna(data['Credit_History'].mode()[0], inplace=True)","f83d8f91":"data.apply(lambda x: sum(x.isnull()),axis=0) ","b2e661fc":"data.dtypes","d7ca6983":"data.head(6)","5f828337":"from sklearn.preprocessing import LabelEncoder\n\nvar_2_encode = [\"Gender\", \"Married\", \"Dependents\", \"Education\", \"Self_Employed\", \"Property_Area\", \"Loan_Status\"]\n\nlabelEncoder = LabelEncoder()\n","7f79d7e4":"for i in var_2_encode:\n    data[i] = labelEncoder.fit_transform(data[i])","1fbc15f5":"data.dtypes","e6e09e96":"data.head(10)","1cca3bfb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold","4a723988":"def classification_model(model, data, predictors, outcome):\n    ## fit the data\n    model.fit(data[predictors], data[outcome])\n    ## predicit train-data\n    predictvalues = model.predict(data[predictors])\n    ## accurancy\n    accuracy = metrics.accuracy_score(predictvalues, data[outcome])\n    print(\"Accuracy: %s\" % \"{0:.3%}\".format(accuracy))\n    ##\n    ## k-fold cross-validation\n    kfold = KFold(n_splits=5)\n    error = []\n    ##\n    for train, test in kfold.split(data):\n        #print(\"------- run ------\")\n        #print(\"traindata\")\n        #print(train)\n        #print(\"testdata\")\n        #print(test)\n        ##\n        ## filter training data\n        train_data = (data[predictors].iloc[train,:])\n        train_target = data[outcome].iloc[train]\n        ##\n        ## fit data\n        model.fit(train_data, train_target)\n        ##\n        error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))\n    \n    print(\"Cross Validation Score: %s\" % \"{0:.3%}\".format(np.mean(error)))\n    ##\n    model.fit(data[predictors], data[outcome])\n    \n    ","a6d0a47b":"outcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\"]\nmodel = LogisticRegression(solver=\"lbfgs\")\n##\nclassification_model(model, data, predictor_var, outcome_var)","dcdace7f":"outcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\"]\nmodel = LogisticRegression(solver=\"liblinear\")\n##\nclassification_model(model, data, predictor_var, outcome_var)","2eb4706e":"outcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\"]\nmodel = LogisticRegression(solver=\"newton-cg\")\n##\nclassification_model(model, data, predictor_var, outcome_var)","1b8d7fc4":"outcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"Education\", \"Married\"]\nmodel = LogisticRegression(solver=\"lbfgs\")\n##\nclassification_model(model, data, predictor_var, outcome_var)","5b361b0d":"outcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"Education\", \"Married\", \"Self_Employed\", \"Property_Area\"]\nmodel = LogisticRegression(solver=\"lbfgs\")\n##\nclassification_model(model, data, predictor_var, outcome_var)","c6dec49f":"model = DecisionTreeClassifier()\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"Gender\", \"Married\", \"Education\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)","8db9497e":"model = DecisionTreeClassifier()\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"Loan_Amount_Term\", \"LoanAmount_log\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)","9dbc7c4f":"model = RandomForestClassifier(n_estimators=100)\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Gender\", \"Married\", \"Dependents\", \"Education\", \"Self_Employed\", \"Loan_Amount_Term\", \"Credit_History\", \"Property_Area\", \"LoanAmount_log\", \"TotalIncome_log\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)","5e483f7a":"feature_importance = pd.Series(model.feature_importances_, index=predictor_var).sort_values(ascending=False)\nprint(feature_importance)","ae0949eb":"model = RandomForestClassifier(n_estimators=25, min_samples_split=25, max_depth=7, max_features=1)\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"TotalIncome_log\", \"LoanAmount_log\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)","e2e000fe":"model = RandomForestClassifier(n_estimators=25, min_samples_split=25, max_depth=7, max_features=1)\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"TotalIncome_log\", \"LoanAmount_log\", \"Dependents\", \"Property_Area\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)","9f08cdb6":"model = DecisionTreeClassifier()\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"Gender\", \"Married\", \"Education\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)","b32bf5a1":"import graphviz\nfrom sklearn.tree import export_graphviz","39b7cdeb":"dot_data = export_graphviz(model, out_file=None, feature_names=predictor_var, filled=True, rounded=True, special_characters=True)\ngraph=graphviz.Source(dot_data)\ngraph","cd572435":"model = DecisionTreeClassifier()\noutcome_var = \"Loan_Status\"\npredictor_var = [\"Credit_History\", \"Loan_Amount_Term\", \"LoanAmount_log\"]\n##\nclassification_model(model, data, predictor_var, outcome_var)\n##\ndot_data = export_graphviz(model, out_file=None, feature_names=predictor_var, filled=True, rounded=True, special_characters=True)\ngraph=graphviz.Source(dot_data)\ngraph","59494e8a":"**Random Forest**","52aea60b":"> **Please create a bar-plot with credit_history stacked loan_status grouped by gender**","c3685810":"**Decision Tree**","b79569e2":"**Session #4 starts here**","6e7d6250":"**Decision Tree Plot**","e6835f84":"**Logistic Regression - LBFGS**"}}