{"cell_type":{"6706270d":"code","8cc6a3e0":"code","4ac8f3cb":"code","d35a74d5":"code","0311d5b4":"code","355aa18c":"code","06ad08c9":"code","fc3cb087":"code","67e3f2c8":"code","a78cec17":"code","83f042d8":"code","ca7585cc":"markdown"},"source":{"6706270d":"debug = True\n_verbose=1 if debug else 0\ndef printd(input):\n    if debug:\n        print(input)","8cc6a3e0":"import tensorflow as tf\nfrom tensorflow import keras\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)","4ac8f3cb":"import pandas as pd \ndata = pd.read_csv('..\/input\/creditcard.csv', sep=',')","d35a74d5":"printd(data.shape)\nprintd(data.head())","0311d5b4":"split = 0.8\nmsk = np.random.rand(len(data)) < split\n\n# Shuffle the entire data set (applies to both train & test)\ndata = data.sample(frac=1).reset_index(drop=True)\n\ntrain_labels = data.loc[msk, data.columns =='Class']\ntrain_data  = data.loc[msk, data.columns !='Class']\n\ntest_labels = data.loc[~msk, data.columns =='Class']\ntest_data  = data.loc[~msk, data.columns !='Class']\n\nprintd(test_data.head(1))\nprintd(test_labels.head(1))\nprintd(train_data.head(1))\nprintd(train_labels.head(1))\n\nprintd(msk[0:5])\nprintd(train_data.shape)\nprintd(test_data.shape)\nprintd(test_data.shape[0]+train_data.shape[0])","355aa18c":"mean = train_data.mean(axis=0)\nstd = train_data.std(axis=0)\n\ntrain_data = (train_data - mean) \/ std\ntest_data = (test_data - mean) \/ std\n\nprintd(train_data.head(1))\nprintd(test_data.head(1))","06ad08c9":"def build_model():\n  model = keras.Sequential([\n    keras.layers.Dense(30, activation=tf.nn.relu,\n                       input_shape=(train_data.shape[1],)),\n    #keras.layers.Dense(30, activation=tf.nn.relu),\n    keras.layers.Dense(2, activation=tf.nn.softmax)\n])\n    \n  model.compile(optimizer=tf.train.AdamOptimizer(), \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n  return model","fc3cb087":"model = build_model()\nmodel.summary()","67e3f2c8":"early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n\nhistory = model.fit(train_data, train_labels, epochs=500,\n                    validation_split=0.2, verbose=_verbose,\n                    callbacks=[early_stop])","a78cec17":"[loss, mae] = model.evaluate(test_data, test_labels, verbose=_verbose)\n\ntest_predictions = model.predict(test_data)\n\nfrauds = np.where(test_labels[:]==1)[0]\nprint(frauds[0:5])\nprint(test_labels.values[frauds[0:5]])\nprint(np.around(test_predictions[frauds[0:5]]))","83f042d8":"#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# https:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#@title MIT License\n#\n# Copyright (c) 2017 Fran\u00e7ois Chollet\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n# and\/or sell copies of the Software, and to permit persons to whom the\n# Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.","ca7585cc":"## Credit Card Fraud Detection using TensorFlow\nAnonymized credit card transactions labeled as fraudulent or genuine<br>\nLink: https:\/\/www.kaggle.com\/mlg-ulb\/creditcardfraud"}}