{"cell_type":{"adaf302f":"code","a5e53d40":"code","ab1c729d":"code","4eda97c2":"code","a39df984":"code","80f08e6b":"code","83f14afb":"code","a0e183ad":"code","7a5151a8":"code","2207343b":"code","9461f167":"code","ba03909a":"code","acfbec11":"code","8f97115d":"code","e72b1d91":"code","fc083816":"code","144c94c5":"code","f2132e89":"code","4f9af9cb":"code","91a41903":"code","694b7ae0":"code","c8b76e30":"code","fcbe6a42":"code","9587bef1":"code","aad5ece8":"code","80d10d16":"code","ec226f48":"code","7f490d9f":"code","d2c0c095":"code","eb06fbeb":"code","8b6f1318":"code","0be04979":"code","a4779825":"code","1fc388fe":"code","74189a3e":"code","011c0ab3":"code","d8abf203":"code","0b828d29":"code","97a2fdb6":"code","1ee0b404":"code","e8db0340":"code","0d8a75af":"code","e16615c4":"code","c982e9d5":"code","3a056d2a":"code","550493ae":"code","af5951fb":"code","270c3888":"code","30987d25":"code","2d131691":"code","41e43505":"code","f64ee418":"code","42f2e12b":"code","fb1e1a9b":"code","6e3f9e6c":"code","6722d35c":"code","35fb29f6":"code","276bf8f6":"code","170f3ae5":"code","dc51aa13":"code","4f576f05":"code","385444e6":"code","359870f7":"code","76d86c91":"code","e8ffbca9":"code","d3f76082":"code","903c08f9":"code","f2de970d":"code","6f95e275":"code","0db5242c":"code","ae7bf4b2":"code","e84e77f0":"code","5d64f612":"code","775dc76d":"code","b9f55a4a":"code","975080d9":"code","188b62af":"code","4cf37a23":"code","b7c991ba":"code","d1ee13e3":"code","030a3b18":"code","196f254b":"code","15f24a85":"code","959c4514":"code","14c17ae4":"code","e9d4f176":"code","4c2ea99f":"code","146f9aad":"code","f4f726a6":"code","d6566912":"code","2ef8f349":"code","2c27070f":"code","a6e90f7d":"code","e60d41cd":"code","31d39eb2":"code","94c9616b":"code","e62cd537":"code","a38766c2":"code","279cc71f":"code","f02a7410":"code","634c52b4":"code","639829bf":"code","8db8c264":"code","28671331":"code","55834dcc":"code","668298b7":"code","11d26051":"code","14b4a2ed":"code","30cde9d0":"code","7ea23995":"code","44f25a83":"code","48ae9968":"code","df25b431":"code","a66d1f7f":"code","841723a0":"code","b4af9638":"code","3faa659a":"code","4e2eee8f":"markdown","59cec8a4":"markdown","147420fa":"markdown","4d616244":"markdown","d9d4c095":"markdown","579c2456":"markdown","d5d5ef50":"markdown","ab843b5f":"markdown"},"source":{"adaf302f":"import pandas as pd","a5e53d40":"data=pd.read_csv(\"..\/input\/titanic\/train.csv\")","ab1c729d":"data.head()","4eda97c2":"data.shape","a39df984":"data.info()","80f08e6b":"# we can see we have null values in age and cabin column","83f14afb":"data.columns","a0e183ad":"import seaborn as sns\nsns.set()","7a5151a8":"gender = data[\"Sex\"]","2207343b":"# bar plot\n# we create graph only of catagorical data\nsns.countplot(gender)","9461f167":"sns.countplot(data[\"Survived\"],hue=\"Sex\",data=data)","ba03909a":"sns.countplot(data[\"Survived\"],hue=\"Pclass\",data=data)","acfbec11":"age=data[\"Age\"]","8f97115d":"# univariate : histogram :freq disttribution\nfare=data[\"Fare\"]","e72b1d91":"type(fare)","fc083816":"fare.hist(bins=50, color=\"red\", figsize=(10,5))   #histogram","144c94c5":"#fare.plot()","f2132e89":"# check missing values\ndata.isnull()","4f9af9cb":"sns.heatmap(data.isnull(), cbar=False, yticklabels=False, cmap=\"viridis\")\n# cbar for scale at right side\n# yticklabel for left side\n# cmap for color theme\n# light color means null values","91a41903":"# so we can drop cabin from our data also","694b7ae0":"sns.distplot(age.dropna(),bins=50) #histogram  and density curver\n# bins for group ex:group of 50","c8b76e30":"sns.countplot(data[\"SibSp\"],data=data,hue=\"Survived\")     # siblings","fcbe6a42":"data.columns","9587bef1":"age.mean()","aad5ece8":"sns.boxplot(data=data,y=\"Age\",x=\"Pclass\")","80d10d16":"overall_mean=age.mean()","ec226f48":"mean_class_1 = data[\"Age\"][data[\"Pclass\"]==1].mean() #mean of age of people of Pclass==1","7f490d9f":"mean_class_2 = data[\"Age\"][data[\"Pclass\"]==2].mean() #mean of age of people of Pclass==1","d2c0c095":"mean_class_3 = data[\"Age\"][data[\"Pclass\"]==3].mean()  #mean of age of people of Pclass==1","eb06fbeb":"def impute_age(cols):            #replace Missing Age\n    age=cols[0]\n    Pclass=cols[1]\n    if pd.isnull(age):\n        if Pclass==1:\n            return int(mean_class_1)\n        elif Pclass==2:\n            return int(mean_class_2)\n        elif Pclass==3:\n            return int(mean_class_3)\n        else:\n            return int(overall_mean)\n        \n    else:\n        return age\n        \n        ","8b6f1318":"data[\"Age\"] = data[[\"Age\",\"Pclass\"]].apply(impute_age,axis=1)   # without loop these values will go inside this function and will return back\n\n# axis = 0 for row wise operation\n# axis = 1 for column wise operation\n# this takes tuple\n","0be04979":"sns.heatmap(data.isnull(), cbar=False, yticklabels=False, cmap=\"viridis\")","a4779825":"# hence we removed null values from age","1fc388fe":"data.drop(\"Cabin\",axis=1,inplace=True)   # drop cabin","74189a3e":"sns.heatmap(data.isnull(), cbar=False, yticklabels=False, cmap=\"viridis\")","011c0ab3":" #########################","d8abf203":"y=data[\"Survived\"]","0b828d29":"data.columns","97a2fdb6":"X= data[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Embarked\"]]","1ee0b404":"X","e8db0340":"# since sex is catagorical and also a string so we have to do label encoding i.e dummy variable using One Hot Encoding andthen remove one dummy variable for avoiding dummy trap","0d8a75af":"sex=data[\"Sex\"]","e16615c4":"sex=pd.get_dummies(sex, drop_first=True)","c982e9d5":"X","3a056d2a":"# also Pclass is catagorical sowe have to do the same","550493ae":"pclass=data[\"Pclass\"]","af5951fb":"pclass=pd.get_dummies(pclass,drop_first=\"True\")","270c3888":"X","30987d25":"#similary SibSp and Parch  and Embarked are also catagorical","2d131691":"sibsp=data[\"SibSp\"]\nparch=data[\"Parch\"]\nembarked=data[\"Embarked\"]","41e43505":"sibsp=pd.get_dummies(sibsp,drop_first=True)\nparch=pd.get_dummies(parch,drop_first=True)\nembarked=pd.get_dummies(embarked,drop_first=True)","f64ee418":"age= data[\"Age\"]","42f2e12b":"X = pd.concat([age,embarked,parch,sibsp,sex,pclass],axis=1) #concanate multiple dataframes   ","fb1e1a9b":"X","6e3f9e6c":"####### remove it later","6722d35c":"#from sklearn.model_selection import train_test_split","35fb29f6":"#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","276bf8f6":"from sklearn.linear_model import LogisticRegression","170f3ae5":"model=LogisticRegression()","dc51aa13":"model.fit(X,y)","4f576f05":"model.coef_","385444e6":"test=pd.read_csv(\"..\/input\/titanic\/test.csv\")","359870f7":"#we have to process this data as well similary we had done for train data","76d86c91":"test","e8ffbca9":"# check missing values\ntest.isnull()","d3f76082":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False, cmap=\"viridis\")\n# cbar for scale at right side\n# yticklabel for left side\n# cmap for color theme\n# light color means null values","903c08f9":"# so we can drop cabin from our data also","f2de970d":"test.columns","6f95e275":"age.mean()","0db5242c":"overall_mean=age.mean()","ae7bf4b2":"mean_class_1 = test[\"Age\"][test[\"Pclass\"]==1].mean() #mean of age of people of Pclass==1","e84e77f0":"mean_class_2 = test[\"Age\"][test[\"Pclass\"]==2].mean() #mean of age of people of Pclass==1","5d64f612":"mean_class_3 = test[\"Age\"][test[\"Pclass\"]==3].mean()  #mean of age of people of Pclass==1","775dc76d":"def impute_age(cols):            #replace Missing Age\n    age=cols[0]\n    Pclass=cols[1]\n    if pd.isnull(age):\n        if Pclass==1:\n            return int(mean_class_1)\n        elif Pclass==2:\n            return int(mean_class_2)\n        elif Pclass==3:\n            return int(mean_class_3)\n        else:\n            return int(overall_mean)\n        \n    else:\n        return age\n        \n        ","b9f55a4a":"test[\"Age\"] = test[[\"Age\",\"Pclass\"]].apply(impute_age,axis=1)   # without loop these values will go inside this function and will return back\n\n# axis = 0 for row wise operation\n# axis = 1 for column wise operation\n# this takes tuple\n","975080d9":"sns.heatmap(test.isnull(), cbar=False, yticklabels=False, cmap=\"viridis\")","188b62af":"# hence we removed null values from age","4cf37a23":"test.drop(\"Cabin\",axis=1,inplace=True)   # drop cabin","b7c991ba":"sns.heatmap(data.isnull(), cbar=False, yticklabels=False, cmap=\"viridis\")","d1ee13e3":"# since sex is catagorical and also a string so we have to do label encoding i.e dummy variable using One Hot Encoding andthen remove one dummy variable for avoiding dummy trap","030a3b18":"sex=test[\"Sex\"]","196f254b":"sex=pd.get_dummies(sex, drop_first=True)","15f24a85":"# also Pclass is catagorical sowe have to do the same","959c4514":"pclass=test[\"Pclass\"]","14c17ae4":"pclass=pd.get_dummies(pclass,drop_first=\"True\")","e9d4f176":"#similary SibSp and Parch  and Embarked are also catagorical","4c2ea99f":"sibsp=test[\"SibSp\"]\nparch=test[\"Parch\"]\nembarked=test[\"Embarked\"]","146f9aad":"sibsp=pd.get_dummies(sibsp,drop_first=True)\nparch=pd.get_dummies(parch,drop_first=True)\nembarked=pd.get_dummies(embarked,drop_first=True)","f4f726a6":"age= test[\"Age\"]","d6566912":"X_test = pd.concat([age,embarked,parch,sibsp,sex,pclass],axis=1) #concanate multiple dataframes   ","2ef8f349":"X_test.drop(9,axis=1,inplace=True)   # drop cabin","2c27070f":"X_test","a6e90f7d":"X","e60d41cd":"y_pred=model.predict(X_test)","31d39eb2":"y_pred","94c9616b":"ans=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","e62cd537":"ans","a38766c2":"y_test=ans[\"Survived\"]","279cc71f":"from sklearn.metrics import confusion_matrix","f02a7410":"confusion_matrix(y_test,y_pred)","634c52b4":"# this shows that:\n# array([[152,  23],\n#       [  85, 35]], dtype=int64)\n# 152 and 85 predicted values were right and 23 and 35 values were wrong\n# 1st column is for dead  and 2nd column is for survived\n# i.e in 152+35=187 people our model predicted correctly for 152 ( i.e True Negative )\n# similary in 23+85=108 people our model predicted correctly for 85 ( i.e True Positive )\n#\n#\n# confusion matrix= [[TrueNegative,FalsePositive],\n#                     [FalseNegative,TruePositive]]","639829bf":"y_test.shape","8db8c264":"total_records=152+23+35+85","28671331":"total_records","55834dcc":"correct_answer=152+85","668298b7":"correct_answer","11d26051":"wrong_answer=35+23","14b4a2ed":"wrong_answer","30cde9d0":"accuracy=correct_answer\/total_records*100","7ea23995":"accuracy","44f25a83":"error=35+23","48ae9968":"error_per=error\/total_records*100","df25b431":"error_per   #error percentage","a66d1f7f":"from sklearn.metrics import classification_report","841723a0":"print(classification_report(y_test,y_pred))","b4af9638":"type(y_pred)","3faa659a":"p=pd.DataFrame(y_pred, columns=['Survived']).to_csv('mysolution.csv')   #save predictions to csv file\n","4e2eee8f":"### Data Preprocessing","59cec8a4":"### Model creation ","147420fa":"### Data Collection","4d616244":"### Data Visualisation","d9d4c095":"### Testing","579c2456":"#### Binary Classification using Logistic Regression","d5d5ef50":"### Accuracy Calculation using Confusion Matrix","ab843b5f":"### Predictions"}}