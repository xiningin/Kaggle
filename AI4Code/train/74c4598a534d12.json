{"cell_type":{"ad106944":"code","1e97078f":"code","21689187":"code","791d8a77":"code","0d7b9c26":"code","e9530a58":"code","5cc243fc":"code","4f95f498":"code","ff7324ae":"code","205a1b2c":"code","2400d886":"code","9bf0e065":"code","b322aabd":"code","2f341093":"code","86f712a9":"code","5fc185f2":"code","75937271":"code","fb45094d":"code","12d7a56a":"code","14f29bab":"code","1514da20":"code","c2df7ee3":"code","8d4079e4":"code","ce9f2611":"markdown","4e0204d1":"markdown","6af5c6ea":"markdown","68f0f7cf":"markdown"},"source":{"ad106944":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        df = pd.read_csv(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e97078f":"df.head()","21689187":"df.columns","791d8a77":"df.shape","0d7b9c26":"df.info()","e9530a58":"df.describe()","5cc243fc":"df.isnull().sum()","4f95f498":"for col in df.columns:\n    print(col)\n    print(df[col].unique())","ff7324ae":"df=df.drop(['veil-type'], axis=1)\nprint(df.columns)\nprint(len(df.columns))","205a1b2c":"X=df.iloc[:, 1:22]\nX.head()\ny=df.iloc[:,0]","2400d886":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ny = encoder.fit_transform(y)\nprint(y)","9bf0e065":"X = pd.get_dummies(X)\nX","b322aabd":"#from sklearn.preprocessing import StandardScaler\n#scaler = StandardScaler()\n#scaler.fit(X)\n#X = scaler.transform(X)\n#X\n#scaler yapmamiz gerekiyor mu?","2f341093":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred=classifier.predict(X_test)","86f712a9":"print('Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred))","5fc185f2":"classifier1 =RandomForestClassifier()\nclassifier1.fit(X_train, y_train)\ny_pred_1=classifier.predict(X_test)","75937271":"print('Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred_1))","fb45094d":"classifier1.feature_importances_","12d7a56a":"Importance = pd.DataFrame({\"Importance\": classifier1.feature_importances_*100},\n                         index = X_train.columns)\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = False)[0:5]","14f29bab":"X_new=X[['odor_n','gill-size_n','stalk-surface-below-ring_k','odor_f','gill-size_b']]\nX_new","1514da20":"y","c2df7ee3":"X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2, random_state=1)\nclassifier2 =RandomForestClassifier()\nclassifier2.fit(X_train, y_train)\ny_pred_2=classifier2.predict(X_test)","8d4079e4":"print('Accuracy Score:')\nprint(metrics.accuracy_score(y_test,y_pred_2))","ce9f2611":"Random Forest","4e0204d1":"Decision Tree","6af5c6ea":"Random Forest again with the most important 5 features","68f0f7cf":"look at first head, columns, shape, info and describe"}}