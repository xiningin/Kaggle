{"cell_type":{"76502f78":"code","200a0d06":"code","176d74d7":"code","4111a74c":"code","d56b6e74":"code","1c004e71":"code","7a1bdf75":"code","06a2b918":"code","6b6c4bf0":"code","34c431eb":"code","8de53fd1":"code","9a6279f2":"code","0a01de53":"code","bc0f4d1f":"code","826cb60f":"code","7f8527f2":"code","cbe67e8e":"code","fad30ac6":"code","94188e24":"code","8959c289":"code","9fa60370":"code","9e69475c":"code","f557e1e0":"code","db13e5fe":"code","48885c3a":"code","7c8a4311":"code","ddd1aacb":"code","a702c673":"code","e6cd448e":"code","72014d98":"code","962022b1":"code","08d6f413":"code","292a50b3":"code","ff4322f2":"code","8a757a94":"code","f908cbe2":"code","a79a6412":"code","ad9c8005":"code","4c79ad42":"code","4e086c70":"code","a8b98fe4":"code","a71eb72a":"code","d8f7775c":"markdown","8a195bb3":"markdown","0afe6a9e":"markdown","216f7f5d":"markdown","1a473888":"markdown","b1f5a61c":"markdown","ab30e7a9":"markdown","bb7f6ad8":"markdown","f9786416":"markdown","b96c8926":"markdown","ccc9e70e":"markdown","c9dbc9ed":"markdown","dbfe7ad4":"markdown","ffb06f5d":"markdown","ceaf2a88":"markdown","a0458e48":"markdown","7ed7c06a":"markdown","f7fd776d":"markdown","a99ab166":"markdown","cde7c8c2":"markdown","2b880c04":"markdown","3b3e8d1b":"markdown","0ea5d8ff":"markdown","7a39dbd4":"markdown","e8b774f9":"markdown","bfdf28e6":"markdown"},"source":{"76502f78":"#from google.colab import drive\n#drive.mount('\/content\/drive')\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","200a0d06":"ls","176d74d7":"test_data = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')\ntrain_data = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')","4111a74c":"test_data.shape","d56b6e74":"test_data.head()","1c004e71":"train_data.shape","7a1bdf75":"fig, axs = plt.subplots( nrows=2, ncols=2, figsize=(10, 10) )\n\n#######################\naxs[0,0] = sns.kdeplot(train_data.SepalLengthCm, ax=axs[0,0], color='blue', label='train')\naxs[0,0].scatter(train_data.SepalLengthCm, [0]*train_data.SepalLengthCm.size,)\naxs[0,0] = sns.kdeplot(test_data.SepalLengthCm, ax=axs[0,0], color='orange', label='test')\naxs[0,0].scatter(test_data.SepalLengthCm, [0]*test_data.SepalLengthCm.size, color = 'orange', marker = '+')\naxs[0,0].legend()\n\n#######################\naxs[0,1] = sns.kdeplot(train_data.SepalWidthCm, ax=axs[0,1], color = 'blue')\naxs[0,1].scatter(train_data.SepalWidthCm, [0]*train_data.SepalWidthCm.size,)\naxs[0,1] = sns.kdeplot(test_data.SepalWidthCm, ax=axs[0,1], color = 'orange')\naxs[0,1].scatter(test_data.SepalWidthCm, [0]*test_data.SepalWidthCm.size, color = 'orange', marker = '+')\n\n#######################\naxs[1,0] = sns.kdeplot(train_data.PetalLengthCm, ax=axs[1,0], color = 'blue')\naxs[1,0].scatter(train_data.PetalLengthCm, [0]*train_data.PetalLengthCm.size,)\naxs[1,0] = sns.kdeplot(test_data.PetalLengthCm, ax=axs[1,0], color = 'orange')\naxs[1,0].scatter(test_data.PetalLengthCm, [0]*test_data.PetalLengthCm.size, color = 'orange', marker = '+')\n\n#######################\naxs[1,1] = sns.kdeplot(train_data.PetalWidthCm, ax=axs[1,1], color = 'blue')\naxs[1,1].scatter(train_data.PetalWidthCm, [0]*train_data.PetalWidthCm.size,)\naxs[1,1] = sns.kdeplot(test_data.PetalWidthCm, ax=axs[1,1], color = 'orange')\naxs[1,1].scatter(test_data.PetalWidthCm, [0]*test_data.PetalWidthCm.size, color = 'orange', marker = '+')","06a2b918":"fig, axs = plt.subplots( nrows=2, ncols=2, figsize=(15, 15) )\n\n#######################\naxs[0,0] = sns.kdeplot(train_data.SepalLengthCm, train_data.SepalWidthCm, ax=axs[0,0], color='blue', label='train')\naxs[0,0].scatter(train_data.SepalLengthCm, train_data.SepalWidthCm)\naxs[0,0] = sns.kdeplot(test_data.SepalLengthCm, test_data.SepalWidthCm, ax=axs[0,0], color='orange', label='test')\naxs[0,0].scatter(test_data.SepalLengthCm, test_data.SepalWidthCm, color = 'orange', marker = '+')\naxs[0,0].legend()\n\n#######################\naxs[0,1] = sns.kdeplot(train_data.PetalLengthCm, train_data.PetalWidthCm, ax=axs[0,1], color='blue')\naxs[0,1].scatter(train_data.PetalLengthCm, train_data.PetalWidthCm)\naxs[0,1] = sns.kdeplot(test_data.PetalLengthCm, test_data.PetalWidthCm, ax=axs[0,1], color='orange')\naxs[0,1].scatter(test_data.PetalLengthCm, test_data.PetalWidthCm, color = 'orange', marker = '+')\n\n\n#######################\naxs[1,0] = sns.kdeplot(train_data.SepalWidthCm, train_data.PetalWidthCm, ax=axs[1,0], color='blue')\naxs[1,0].scatter(train_data.SepalWidthCm, train_data.PetalWidthCm)\naxs[1,0] = sns.kdeplot(test_data.SepalWidthCm, test_data.PetalWidthCm, ax=axs[1,0], color='orange')\naxs[1,0].scatter(test_data.SepalWidthCm, test_data.PetalWidthCm, color = 'orange', marker = '+')\n\n#######################\naxs[1,1] = sns.kdeplot(train_data.SepalLengthCm, train_data.PetalLengthCm, ax=axs[1,1], color='blue')\naxs[1,1].scatter(train_data.SepalLengthCm, train_data.PetalLengthCm)\naxs[1,1] = sns.kdeplot(test_data.SepalLengthCm, test_data.PetalLengthCm, ax=axs[1,1], color='orange')\naxs[1,1].scatter(test_data.SepalLengthCm, test_data.PetalLengthCm, color = 'orange', marker = '+')","6b6c4bf0":"train_data.Species","34c431eb":"train_data_setosa  = train_data.loc[train_data.Species == 'Iris-setosa']\ntrain_data_virginica = train_data.loc[train_data.Species == 'Iris-virginica']\ntrain_data_versicolor  = train_data.loc[train_data.Species == 'Iris-versicolor']\ntrain_data_setosa.columns","8de53fd1":"fig, axs = plt.subplots( nrows=2, ncols=2, figsize=(10, 10) )\n\n#######################\naxs[0,0] = sns.kdeplot(train_data.SepalLengthCm, train_data.SepalWidthCm, ax=axs[0,0], color='gray', label='train')\naxs[0,0].scatter(train_data_virginica.SepalLengthCm, train_data_virginica.SepalWidthCm, color = 'blue', label = 'virginica')\naxs[0,0].scatter(train_data_setosa.SepalLengthCm, train_data_setosa.SepalWidthCm, color = 'red', label = 'setosa')\naxs[0,0].scatter(train_data_versicolor.SepalLengthCm, train_data_versicolor.SepalWidthCm, color = 'green', label = 'versicolor')\nplt.legend()\n\n#######################\naxs[0,1] = sns.kdeplot(train_data.PetalLengthCm, train_data.PetalWidthCm, ax=axs[0,1], color='gray')\naxs[0,1].scatter(train_data_virginica.PetalLengthCm, train_data_virginica.PetalWidthCm, color = 'blue', label = 'virginica')\naxs[0,1].scatter(train_data_setosa.PetalLengthCm, train_data_setosa.PetalWidthCm, color = 'red', label = 'setosa')\naxs[0,1].scatter(train_data_versicolor.PetalLengthCm, train_data_versicolor.PetalWidthCm, color = 'green', label = 'versicolor')\n\n#######################\naxs[1,0] = sns.kdeplot(train_data.SepalWidthCm, train_data.PetalWidthCm, ax=axs[1,0], color='gray')\naxs[1,0].scatter(train_data_virginica.SepalWidthCm, train_data_virginica.PetalWidthCm, color = 'blue', label = 'virginica')\naxs[1,0].scatter(train_data_setosa.SepalWidthCm, train_data_setosa.PetalWidthCm, color = 'red', label = 'setosa')\naxs[1,0].scatter(train_data_versicolor.SepalWidthCm, train_data_versicolor.PetalWidthCm, color = 'green', label = 'versicolor')\n\n#######################\naxs[1,1] = sns.kdeplot(train_data.SepalLengthCm, train_data.PetalLengthCm, ax=axs[1,1], color='gray')\naxs[1,1].scatter(train_data_virginica.SepalLengthCm, train_data_virginica.PetalLengthCm, color = 'blue', label = 'virginica')\naxs[1,1].scatter(train_data_setosa.SepalLengthCm, train_data_setosa.PetalLengthCm, color = 'red', label = 'setosa')\naxs[1,1].scatter(train_data_versicolor.SepalLengthCm, train_data_versicolor.PetalLengthCm, color = 'green', label = 'versicolor')","9a6279f2":"from scipy import stats\n\ndef numberfy(x):\n  if x == 'Iris-setosa': \n    x = 0\n    return x\n\n  if x == 'Iris-virginica': \n    x = 1\n    return x\n\n  if x == 'Iris-versicolor': \n    x = 2\n    return x\n\nvalues = train_data.loc[:,['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm', 'Species']]\nvalues.Species = values.Species.apply(numberfy)\nnp_values = values.to_numpy().T\nkernel = stats.gaussian_kde(np_values)\ntrain_data['kde'] = pd.Series(kernel(np_values))\ntrain_data['i_Species'] = values.Species\ntrain_data","0a01de53":"X = train_data.loc[:,['SepalLengthCm',\t'SepalWidthCm',\t'PetalLengthCm', 'PetalWidthCm', 'i_Species']]\nY = train_data.kde\n# N\u00e3o funciona pq as features deveriam ser ou 0 ou 1 :(\n# O Kernel calcula o KDE nos pontos das features num espa\u00e7o de 5 dimenss\u00f5es hehehe \n# Talvez s\u00f3 de para gerar mais dados com simula\u00e7\u00e3o estocastica","bc0f4d1f":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","826cb60f":"df = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')\ndf.head()\nespecie = df[\"Species\"]\nmodelo = GaussianNB()\ndf.head()\n\nX = df.iloc[:, :-1]\n","7f8527f2":"X_train, X_test, y_train, y_test = train_test_split(X,especie, test_size=0.3,random_state=109)","cbe67e8e":"modelo.fit(X_train,y_train)","fad30ac6":"y_pred = modelo.predict(X_test)","94188e24":"print(\"Acur\u00e1cia\", metrics.accuracy_score(y_test,y_pred))","8959c289":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","9fa60370":"df = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","9e69475c":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","f557e1e0":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","db13e5fe":"from sklearn.svm import SVC\n\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","48885c3a":"y_pred = classifier.predict(X_test)\ny_pred","7c8a4311":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","ddd1aacb":"test = pd.read_csv('..\/input\/usp-pj01\/test_Iris.csv')\ntest_scaled = sc.transform(test)\n\nsvm_rbf_test_pred = classifier.predict(test_scaled)\naccuracy_score(y_test, svm_rbf_test_pred)","a702c673":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","e6cd448e":"df = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')\nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.3,\n                                                    random_state = 15,\n                                                    stratify=y)","72014d98":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n","962022b1":"classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 15)\nclassifier.fit(X_train, y_train)\n               \ny_pred = classifier.predict(X_test)\n\ntree_score = accuracy_score(y_test, y_pred)","08d6f413":"test = pd.read_csv('..\/input\/usp-pj01\/test_Iris.csv')\ntest_scaled = scaler.transform(test) #deu merda quando eu n\u00e3o usei o scale\n\ntree_test_pred = classifier.predict(test_scaled)\ntree_test_pred","292a50b3":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler","ff4322f2":"df = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')\nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.3,\n                                                    random_state = 15,\n                                                    stratify=y)","8a757a94":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","f908cbe2":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\nknn_score = knn.score(X_test, y_test)\nknn_score","a79a6412":"test = pd.read_csv('..\/input\/usp-pj01\/test_Iris.csv')\n\ntest_scaled = scaler.transform(test)\n\nknn_test_pred= knn.predict(test_scaled)\n\nknn_test_pred","ad9c8005":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score","4c79ad42":"df = pd.read_csv('..\/input\/usp-pj01\/train_Iris.csv')\nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.3,\n                                                    random_state = 15,\n                                                    stratify=y)","4e086c70":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","a8b98fe4":"classifier = SVC(kernel = 'linear', random_state = 15)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\nsvm_linear_score = accuracy_score(y_test, y_pred)","a71eb72a":"test = pd.read_csv('..\/input\/usp-pj01\/test_Iris.csv')\ntest_scaled = scaler.transform(test)\n\nsvm_linear_test_pred = classifier.predict(test_scaled)\nsvm_linear_test_pred","d8f7775c":"\n\n\n**Dividindo o dataset train_csv em treino e test**\n\n\n","8a195bb3":"#Decision Tree","0afe6a9e":"#SVM RBF","216f7f5d":"\n\n# Treinando os classificadores ","1a473888":"**Treinando o Modelo e analisando o score**","b1f5a61c":"#SVM Linear","ab30e7a9":"#KNN\n\n","bb7f6ad8":"**Dividindo o dataset train_csv em treino e test**","f9786416":"**Fazendo o Scale do Dataset**","b96c8926":"**Aplicando o modelo na base de teste**","ccc9e70e":"**Fazendo o Scale do Dataset**","c9dbc9ed":"**Fazendo o Scale do Dataset**","dbfe7ad4":"\n\n\n**Dividindo o dataset train_csv em treino e test**\n\n\n","ffb06f5d":"**Aplicando o modelo na base de teste**","ceaf2a88":"## Analisando dados de test e dados de treino","a0458e48":"## Importando dados\n","7ed7c06a":"**Treinando o modelo e analisando o score**","f7fd776d":"**Treinando o Modelo e analisando o score**","a99ab166":"**Dividindo o dataset train_csv em treino e test**\n","cde7c8c2":"**Aplicando o modelo na base de teste**","2b880c04":"#Bayes","3b3e8d1b":"**Fazendo o Scale do Dataset**","0ea5d8ff":"**Treinando o Modelo e analisando o score**\n","7a39dbd4":"# Classifica\u00e7\u00e3o de esp\u00e9cies de irid\u00e1ceas \n## Bibliotecas","e8b774f9":"### Treinando uma RBM","bfdf28e6":"## Tentando criar um conjunto de dados maior para treino usando Restricted Boltzman Machine (Uma brisa forte que queria fazer a um tempo)\n### Calculando KDE dos pontos dos dados de treino"}}