{"cell_type":{"998ed448":"code","03ca745d":"code","b04bee15":"code","46fc1390":"code","bb11b8f3":"code","8fb723a1":"code","9446ba9b":"code","7d6a2131":"code","78fcc268":"code","64a402d2":"code","96abee09":"code","21143646":"code","de7a3356":"code","79b4bee4":"code","83e3199b":"code","5f1301a7":"code","fa1c8009":"code","042f2697":"code","d529c4d4":"code","14defafd":"markdown","0ea53653":"markdown","f6820d55":"markdown","27bb7d31":"markdown","6659f498":"markdown","bb8720e6":"markdown"},"source":{"998ed448":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport sklearn.metrics\nimport pandas as pd","03ca745d":"base_dir = \"..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\"\nimage_size = 224","b04bee15":"train_datagen = keras.preprocessing.image.ImageDataGenerator(rescale = 1\/255.0,\n                                                            shear_range = 0.2,\n                                                            zoom_range = 0.2,\n                                                            width_shift_range = 0.2,\n                                                            height_shift_range = 0.2,\n                                                            fill_mode=\"nearest\")\nbatch_size = 32\ntrain_data = train_datagen.flow_from_directory(os.path.join(base_dir,\"train\"),\n                                               target_size=(image_size,image_size),\n                                               batch_size=batch_size,\n                                               class_mode=\"categorical\"                                               \n                                              )","46fc1390":"test_datagen = keras.preprocessing.image.ImageDataGenerator(rescale = 1\/255.0)\ntest_data = test_datagen.flow_from_directory(os.path.join(base_dir,\"valid\"),\n                                               target_size=(image_size,image_size),\n                                               batch_size=batch_size,\n                                               class_mode=\"categorical\"                                               \n                                              )","bb11b8f3":"categories = list(train_data.class_indices.keys())\nprint(categories)","8fb723a1":"train_data.image_shape","9446ba9b":"base_model = keras.applications.MobileNet(weights=\"imagenet\",include_top=False,input_shape=(image_size,image_size,3))","7d6a2131":"\nbase_model.trainable = False\ninputs = keras.Input(shape=(image_size,image_size,3))\nx = base_model(inputs,training=False)\nx = keras.layers.GlobalAveragePooling2D()(x)\nx = keras.layers.Dropout(0.2)(x)\nx = keras.layers.Dense(len(categories),activation=\"softmax\")(x)\nmodel = keras.Model(inputs=inputs, outputs=x, name=\"LeafDisease_MobileNet\")","78fcc268":"model.summary()","64a402d2":"optimizer = keras.optimizers.Adam()\nmodel.compile(optimizer=optimizer,loss=keras.losses.CategoricalCrossentropy(from_logits=True),metrics=[keras.metrics.CategoricalAccuracy()])","96abee09":"history = model.fit_generator(train_data,\n          validation_data=test_data,\n          epochs=25,\n          steps_per_epoch=150,\n          validation_steps=100\n         )","21143646":"model.evaluate(test_data)","de7a3356":"model.save('leaf-cnn.h5')","79b4bee4":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(loss))\n\nfig = plt.figure(figsize=(10,6))\nplt.plot(epochs,loss,c=\"red\",label=\"Training\")\nplt.plot(epochs,val_loss,c=\"blue\",label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()","83e3199b":"acc = history.history['categorical_accuracy']\nval_acc = history.history['val_categorical_accuracy']\n\nepochs = range(len(acc))\n\nfig = plt.figure(figsize=(10,6))\nplt.plot(epochs,acc,c=\"red\",label=\"Training\")\nplt.plot(epochs,val_acc,c=\"blue\",label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()","5f1301a7":"# reset the test_data to start iterating over dataset from scratch\ntest_data.reset()\n# start to predict\npred = model.predict(test_data)","fa1c8009":"# use the confusion_matrix function provided by tensorflow to generate confusion matrix\ncon_mat = tf.math.confusion_matrix(labels=test_data.classes, predictions=np.argmax(pred, axis=1)).numpy()\n\n# normalize the confusion matrix\ncon_mat_norm = np.around(con_mat.astype('float') \/ con_mat.sum(axis=1)[:, np.newaxis], decimals=2)\n\n# convert the nomalized confusion matrix for better view\ncon_mat_df = pd.DataFrame(con_mat_norm,\n                     index = test_data.class_indices.keys(), \n                     columns = test_data.class_indices.keys())\n\n# show the nomalized confusion matrix\ncon_mat_df","042f2697":"# convert the original confusion matrix for better view (using the case numbers)\ncon_mat_df_explain = pd.DataFrame(con_mat,\n                     index = test_data.class_indices.keys(), \n                     columns = test_data.class_indices.keys())\n\n# show the unnomalized confusion matrix\ncon_mat_df_explain","d529c4d4":"# generate the clasification report by using the classification_report of sklearn package\nreport = sklearn.metrics.classification_report(test_data.classes, np.argmax(pred, axis=1), target_names=test_data.class_indices.keys())\n\n# print the report\nprint(report)","14defafd":"## Explain","0ea53653":"## Creating DataGenerator","f6820d55":"## Using MobileNet","27bb7d31":"## Predict from test data","6659f498":"## Confusion Matrix","bb8720e6":"## Classification Repot"}}