{"cell_type":{"195862e4":"code","f48da17a":"code","84fa8784":"code","4779684b":"code","999dfd2a":"code","71dc4c1c":"code","72b4d021":"code","85005fef":"code","dd5f15a0":"code","d9f47414":"code","d9359b6f":"code","cf27e5cb":"code","70b673bc":"code","0db5bc75":"code","c64918bc":"code","e31d2f6a":"code","2765fc2b":"code","e57bc989":"code","3dd1c67f":"code","3be51845":"code","ac284b6a":"code","c4c1b0f5":"code","e4701964":"code","0ca94740":"code","897dffb6":"code","9a70f32c":"code","26bdfafc":"code","fa74a812":"markdown"},"source":{"195862e4":"import numpy as np \nimport pandas as pd \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.tree import DecisionTreeClassifier\n\n\nfrom sklearn.metrics import accuracy_score\n\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\n\nfrom keras.utils import to_categorical\n\n\n","f48da17a":"trainingData=pd.read_csv('..\/input\/titanic\/train.csv')\ntestData=pd.read_csv('..\/input\/titanic\/test.csv')\nsampleSubmission=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","84fa8784":"trainingData.info()","4779684b":"#drop unnecesary columns\ntrain=trainingData.drop('Cabin',axis=1)\ntrain=train.drop(\"Ticket\",axis=1)\ntrain=train.drop(\"Name\",axis=1)\ntrain=train.drop(\"PassengerId\",axis=1)","999dfd2a":"#heatmap to see the correlation between target and numerical variables\ncorr=train.corr()\nsns.heatmap(corr,annot=True)","71dc4c1c":"#correlation between categorical variables and target variable->ANOVA test\nfrom scipy import stats\nF, p = stats.f_oneway(train[train.Sex=='male'].Survived,train[train.Sex=='female'].Survived)\nprint(F)\n#for this variable, you could have used get_dummies too and then calculate the correlation with corr()","72b4d021":"from scipy import stats\nF, p = stats.f_oneway(train[train.Embarked=='C'].Survived,train[train.Embarked=='S'].Survived,train[train.Embarked=='Q'].Survived)\nprint(F)","85005fef":"#Some attributes should be categorical, like Pclass \ntrain['Pclass']=train['Pclass'].apply(str)\nfrom scipy import stats\nF, p = stats.f_oneway(train[train.Pclass=='3'].Survived,train[train.Pclass=='1'].Survived,train[train.Pclass=='2'].Survived)\nprint(F)","dd5f15a0":"#add a new attribute to the dataset-> FareInterval\nfare=[]\nfor i in train['Fare']:\n    if i<50:\n        fare.append('Under 50')\n    else:\n        fare.append('Over or equal to 50')\n        \n    ","d9f47414":"train['FareInterval']=fare","d9359b6f":"from scipy import stats\nF, p = stats.f_oneway(train[train.FareInterval=='Under 50'].Survived,train[train.FareInterval=='Over or equal to 50'].Survived)\nprint(F)\n","cf27e5cb":"#AgeInterval\n\n#first let's fix the NaN values that this column has\ntrain['Age']=train['Age'].fillna(train['Age'].median())\n\nage=[]\nfor i in train['Age']:\n    if i<50:\n        age.append('Under 50')\n    else:\n        age.append('Over or equal to 50')\n        ","70b673bc":"train['AgeInterval']=age\nfrom scipy import stats\nF, p = stats.f_oneway(train[train.FareInterval=='Under 50'].Survived,train[train.FareInterval=='Over or equal to 50'].Survived)\nprint(F)\n","0db5bc75":"#select the columns with a significant correlation to the target variable and the target variable\ntrain=train[['FareInterval','Survived','Sex','AgeInterval']]\nfeatures=train.drop(columns=\"Survived\")\ny=train[['Survived']]\ncategorical_columns=[column_name for column_name in features.columns if features[column_name].dtype==\"object\"]\nnumerical_columns=[column_name for column_name in features.columns if features[column_name].dtype in [\"int64\", \"float64\"]]\n\n","c64918bc":"# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='median')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_columns),\n        ('cat', categorical_transformer, categorical_columns)\n    ])","e31d2f6a":"#using RandomForest\nmodelRF = RandomForestClassifier()\n\n#build the pipeline\npipelineRF = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', modelRF)\n                             ])","2765fc2b":"testData=testData[['Sex','Age','Fare']]","e57bc989":"testData.info()","3dd1c67f":"fareTest=[]\nfor i in testData['Fare']:\n    if i<50:\n        fareTest.append('Under 50')\n    else:\n        fareTest.append('Over or equal to 50')\n        \ntestData['FareInterval']=fareTest","3be51845":"testData['Age']=testData['Age'].fillna(testData['Age'].median())\nageTest=[]\nfor i in testData['Age']:\n    if i<50:\n        ageTest.append('Under 50')\n    else:\n        ageTest.append('Over or equal to 50')\n        \ntestData['AgeInterval']=ageTest","ac284b6a":"testData=testData.drop(['Age','Fare'],axis=1)","c4c1b0f5":"testData.info()","e4701964":"features.info()","0ca94740":"pipelineRF.fit(features,y)\npredictionsRF=pipelineRF.predict(testData)\n","897dffb6":"submission = pd.DataFrame({'PassengerId':sampleSubmission['PassengerId'],'Survived':predictionsRF})\n","9a70f32c":"submission","26bdfafc":"filename = 'Submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","fa74a812":"Age has a big correlation with Survived. Meanwhile, Embarked hasn't."}}