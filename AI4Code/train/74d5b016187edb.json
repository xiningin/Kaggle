{"cell_type":{"f43b77bb":"code","3137f707":"code","2b75914e":"code","7262ebe1":"code","92a1522f":"code","6bc270e4":"code","5098b160":"code","b94ee492":"code","ceec13aa":"code","13d96be1":"code","ded5240c":"code","0e2db46e":"markdown","bb6e8be1":"markdown","3ce69829":"markdown","f7fda672":"markdown","52974fb9":"markdown","a887a99b":"markdown"},"source":{"f43b77bb":"import numpy as np\nimport pandas as pd\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline","3137f707":"train = pd.read_csv('..\/input\/infopulsehackathon\/train.csv', index_col='Id')\ntest = pd.read_csv('..\/input\/infopulsehackathon\/test.csv', index_col='Id')\n\ntrain.head()","2b75914e":"from sklearn.preprocessing import OneHotEncoder","7262ebe1":"ohe = OneHotEncoder()\nohe_cols = train.loc[:,train.dtypes == 'object'].columns\n\nohe_data = pd.DataFrame(ohe.fit_transform(train[ohe_cols]).toarray(), dtype=int)\ntrain = pd.concat([train.drop(columns = ohe_cols), ohe_data], axis=1)\n\nohe_data = pd.DataFrame(ohe.transform(test[ohe_cols]).toarray(), dtype=int)\nX_test = pd.concat([test.drop(columns = ohe_cols), ohe_data], axis=1)\n\ntrain.head()","92a1522f":"X = train.drop(columns = 'Energy_consumption')\ny = train['Energy_consumption']","6bc270e4":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX = scaler.fit_transform(X)\nX_test = scaler.transform(X_test)\n\nkf = KFold(n_splits=5, shuffle=True, random_state=42)","5098b160":"from keras.layers import Input, Dense, Dropout\nfrom keras.models import Model\nfrom keras.optimizers import Adam\n\ndef create_model():\n    inps = Input(shape=(X.shape[1],))\n    x = Dense(256, activation='relu')(inps)\n    x = Dropout(0.2)(x)\n    x = Dense(128, activation='relu')(x)\n    x = Dropout(0.1)(x)\n    x = Dense(1)(x)\n    model = Model(inputs=inps, outputs=x)\n    model.compile(\n        optimizer=Adam(lr=1e-3),\n        loss=['mse']\n    )\n    #model.summary()\n    return model","b94ee492":"from keras import callbacks\nfrom sklearn.metrics import mean_squared_error\n\ntest_predictions = []\nmetric_results = []\n\nfor ind, (tr, val) in enumerate(kf.split(X)):\n    X_tr = X[tr]\n    y_tr = y[tr]\n    X_vl = X[val]\n    y_vl = y[val]\n    \n    model = create_model()\n    es = callbacks.EarlyStopping(monitor='val_loss', min_delta=0.0001, patience=50, verbose=1, mode='auto', restore_best_weights=True)\n    rlr = callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=10, min_lr=1e-6, mode='auto', verbose=1)\n    model.fit(\n        X_tr, y_tr, epochs=500, batch_size=256, validation_data=(X_vl, y_vl), verbose=False, callbacks=[es, rlr]\n    )\n    test_predictions.append(model.predict(X_test).flatten())\n    metric_results.append(mean_squared_error(y_vl, model.predict(X_vl).flatten()))\n    print(metric_results[-1])\n    \nprint(f'Average MSE: {np.mean(metric_results)}')","ceec13aa":"prediction = np.array(test_predictions).mean(axis=0)","13d96be1":"print('Train target distribution')\ny.hist(bins=30);\n\nplt.show()\n\nprint('Test Prediction distribution')\npd.Series(prediction).hist(bins=30);","ded5240c":"sub = pd.read_csv('..\/input\/infopulsehackathon\/sample_submission.csv', index_col='Id')\nsub['Energy_consumption'] = prediction\nsub.to_csv('submission.csv')\nsub","0e2db46e":"# Prediction","bb6e8be1":"# Train \/ Validation","3ce69829":"# Read Data","f7fda672":"# Data Preprocesing","52974fb9":"# Vizualize","a887a99b":"# Submission"}}