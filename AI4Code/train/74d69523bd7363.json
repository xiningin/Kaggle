{"cell_type":{"a212163b":"code","a6a888d1":"code","14c268fa":"code","8f562ed7":"code","40d70605":"code","409491d3":"code","754896a3":"code","6bc842bb":"code","809bd6ac":"code","a29a9932":"markdown","70f7d472":"markdown","cb399bf8":"markdown","276eb6d1":"markdown"},"source":{"a212163b":"import cv2\nimport numpy as np\n\nvidObj = cv2.VideoCapture('\/kaggle\/input\/parler\/capitol_vids\/4wIDySD7tKxo.mp4')\n\ncount = 0\n\nwhile True: \n      \n    success, image = vidObj.read() \n    \n    if success:\n        cv2.imwrite(f\"frame{count}.jpg\", image) \n    else: \n        break\n        \n    count += 1","a6a888d1":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nfor i in range(0, 1300, 100):\n    img = mpimg.imread(f'.\/frame{i}.jpg')\n    imgplot = plt.imshow(img)\n    plt.show()","14c268fa":"class FaceDetector():\n\n    def __init__(self,faceCascadePath):\n        self.faceCascade=cv2.CascadeClassifier(faceCascadePath)\n\n\n    def detect(self, image, scaleFactor=1.1,\n               minNeighbors=5,\n               minSize=(5,5)):\n        \n        #function return rectangle coordinates of faces for given image\n        rects=self.faceCascade.detectMultiScale(image,\n                                                scaleFactor=scaleFactor,\n                                                minNeighbors=minNeighbors,\n                                                minSize=minSize)\n        return rects","8f562ed7":"#Frontal face of haar cascade loaded\nfrontal_cascade_path=\"\/kaggle\/input\/casscadeclassifier\/haarcascade_frontalface_default.xml\"\n\n#Detector object created\nfd=FaceDetector(frontal_cascade_path)","40d70605":"my_image=cv2.imread(\"frame1100.jpg\")","409491d3":"def get_my_image():\n    return np.copy(my_image)\n\ndef show_image(image):\n    plt.figure(figsize=(18,15))\n    #Before showing image, bgr color order transformed to rgb order\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","754896a3":"show_image(get_my_image())","6bc842bb":"def detect_face(image, scaleFactor, minNeighbors, minSize):\n    # face will detected in gray image\n    image_gray=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    faces=fd.detect(image_gray,\n                   scaleFactor=scaleFactor,\n                   minNeighbors=minNeighbors,\n                   minSize=minSize)\n\n    for x, y, w, h in faces:\n        #detected faces shown in color image\n        cv2.rectangle(image,(x,y),(x+w, y+h),(127, 255,0),3)\n\n    show_image(image)\n    ","809bd6ac":"detect_face(image=get_my_image(), \n            scaleFactor=1.9, \n            minNeighbors=3, \n            minSize=(30,30))","a29a9932":"## Convert Video into Frames","70f7d472":"Download pretrained model from [here](https:\/\/raw.githubusercontent.com\/opencv\/opencv\/master\/data\/haarcascades\/haarcascade_frontalface_default.xml)","cb399bf8":"## Detect Faces\n\nI will use this [great notebook](https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv) to detect faces ","276eb6d1":"# Convert Data into Frames and Face Detection\n\nThis notebook is split into 2 parts.  First, I am going to convert a video to still frames using OpenCV.  Next I am going to use OpenCV to put a bounding box around faces "}}