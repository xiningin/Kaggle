{"cell_type":{"2f3239ba":"code","0d24f812":"code","b22dab94":"code","e5ed5841":"code","5273a758":"code","eb4ea526":"code","bd269b23":"code","fd74edb2":"code","d0073245":"code","a1edbb96":"code","d2320595":"code","917e3776":"code","f02d5499":"code","933122b9":"code","cea5856b":"code","9e7710b8":"code","d73f60c2":"code","ed06cd18":"code","f4dd3928":"code","bf019c79":"code","8a771aec":"code","6843afd3":"code","c26b9f0d":"code","b6f382b4":"code","84057cdf":"code","a7a1c18f":"code","d145769b":"code","1c3d8561":"code","d1cf0fb1":"code","9423987b":"code","5aa74b46":"code","702484d3":"markdown","b4c6486d":"markdown","295c4af4":"markdown","c56f65c6":"markdown","98a717f6":"markdown","66924253":"markdown","05f6fd0a":"markdown","7f40b516":"markdown","759b7738":"markdown","80586dc8":"markdown","70c59437":"markdown","3a26ee0b":"markdown","0393071e":"markdown"},"source":{"2f3239ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")","0d24f812":"df = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndf.head()","b22dab94":"df = df.drop(['Unnamed: 32','id'], axis = 1)\ndf.head()","e5ed5841":"df.describe()","5273a758":"# Looking for missing values if any\ndf.isna().sum()","eb4ea526":"# Having a look at the correlation matrix\n\nfig, ax = plt.subplots(figsize=(15,15)) \nsns.heatmap(df.corr(), annot=True, fmt='.1g', cmap=\"viridis\", cbar=False);","bd269b23":"fig, ax = plt.subplots(figsize=(7,6))\nsns.countplot(df[\"diagnosis\"], palette=[\"firebrick\",\"seagreen\"]);","fd74edb2":"# Making the dataset all numerical\n# Malignant: 1, Benign: 0\n\ndf['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})\ndf.head()","d0073245":"# X data\nX = df.drop(\"diagnosis\", axis=1)","a1edbb96":"X.head()","d2320595":"# y data\ny = df[\"diagnosis\"]\ny.head()","917e3776":"# Splitting the data into X train, X test and y train, y test\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","f02d5499":"len(X_train), len(X_test)","933122b9":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()","cea5856b":"model.fit(X_train, y_train)","9e7710b8":"model.predict(X_test)","d73f60c2":"RandomForestClassifierScore = model.score(X_test,y_test)","ed06cd18":"print(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","f4dd3928":"from sklearn.neighbors import KNeighborsClassifier\nclf1 = KNeighborsClassifier(42)","bf019c79":"clf1.fit(X_train,y_train)","8a771aec":"clf1.predict(X_test)","6843afd3":"KNeighborsClassifierScore = clf1.score(X_test,y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","c26b9f0d":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()","b6f382b4":"tree.fit(X_train,y_train)","84057cdf":"tree.predict(X_test)","a7a1c18f":"DecisionTreeClassifierScore = tree.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","d145769b":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations=10)\ncat.fit(X_train, y_train);","1c3d8561":"CatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","d1cf0fb1":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(X_train,y_train)","9423987b":"AdaBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by AdaBoost Classifier model:\",AdaBoostClassifierScore*100)","5aa74b46":"x = [\"Decision Tree Classifier\", \"K Neighbors Classifier\", \"Random Forest Classifier\", \"AdaBoost Classifier\", \"CatBoost Classifier\"]\ny = [DecisionTreeClassifierScore, KNeighborsClassifierScore, RandomForestClassifierScore, AdaBoostClassifierScore, CatBoostClassifierScore]\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=x,y=y, palette=\"crest\");\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40);","702484d3":"## CatBoostClassifier","b4c6486d":"## **Training the model**","295c4af4":"## AdaBoostClassifier","c56f65c6":"## DecisionTreeClassifier","98a717f6":"## KNeighborsClassifier","66924253":"## Splitting the data into training and test datasets\nHere, we are trying to predict if the diagnosis is Malignant(M) or Benign(B) using the given data. Hence, the `diagnosis` will be the the y label and rest of the data will be the X or the input data.","05f6fd0a":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!","7f40b516":"## RandomForestClassifier","759b7738":"## Importing Libraries","80586dc8":"## Comparing performance of the models","70c59437":"## Loading up the data","3a26ee0b":"# Breast Cancer Predictions","0393071e":"#### `Malignant (M)`: has the potential to be dangerous \n#### `Benign (B)`: not dangerous to health  "}}