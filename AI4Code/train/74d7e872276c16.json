{"cell_type":{"9dd42e0e":"code","bad0bed0":"code","beaff2da":"code","02ccbe45":"code","f343266e":"code","9db27769":"code","c2169c3e":"code","6579da46":"code","bac1bd04":"code","68ebc5b7":"code","fe2d6d35":"code","fb168845":"code","b9faf807":"code","e25bd7c1":"code","0ceeff1d":"code","f20838f0":"code","04bfa117":"code","05d6851f":"code","dd403676":"code","daa6e197":"code","f4226084":"code","85e0a4ac":"code","0ce34f82":"code","afc2bc9d":"code","a2cf6378":"code","27ac01b9":"code","20fc6b71":"code","add37d9b":"code","89c28a1e":"code","f2baaf0e":"code","d1b55a87":"code","6476f2b4":"markdown","6dca5e97":"markdown","514d2ccf":"markdown","511334cd":"markdown","12b62619":"markdown","0a037891":"markdown","20e3161a":"markdown","358c0ce9":"markdown","3894fe39":"markdown"},"source":{"9dd42e0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bad0bed0":"train = pd.read_csv(\"\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","beaff2da":"train.head()","02ccbe45":"train.describe().T","f343266e":"train.isnull().sum()","9db27769":"train.tail()","c2169c3e":"train.select_dtypes(object).all()","6579da46":"train.drop(train.select_dtypes(object), axis=1, inplace=True)","bac1bd04":"train.columns.values","68ebc5b7":"train.drop('car_ID', axis=1, inplace=True)","fe2d6d35":"train.head()","fb168845":"train.shape","b9faf807":"import matplotlib.pyplot as plt\n%matplotlib inline","e25bd7c1":"import seaborn as sns","0ceeff1d":"sns.pairplot(train, x_vars=[\"wheelbase\", \"carlength\", \"horsepower\"], y_vars=\"price\", size=7, aspect=0.7, kind=\"reg\")","f20838f0":"corr_mat = train.corr()\ncorr_mat[\"price\"].sort_values(ascending=False)","04bfa117":"fig = plt.subplots(nrows=1, figsize=(12,8))\nsns.heatmap(train.corr(), cmap=\"YlGnBu\", annot=True, linewidths=2, linecolor='black')","05d6851f":"from sklearn.model_selection import train_test_split","dd403676":"X = train.drop('price', axis=1)\ny = train[\"price\"].copy()","daa6e197":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()","f4226084":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)","85e0a4ac":"model.fit(X_train, y_train)","0ce34f82":"predict = model.predict(X_test)","afc2bc9d":"predict","a2cf6378":"list(y_test)","27ac01b9":"from sklearn.metrics import mean_squared_error, r2_score","20fc6b71":"mse = mean_squared_error(y_test, predict)","add37d9b":"mse","89c28a1e":"rmse = np.sqrt(mse)","f2baaf0e":"rmse","d1b55a87":"r2_score(y_test, predict)","6476f2b4":"Check the accuracy","6dca5e97":"## Train test split","514d2ccf":"Correlation between price and others","511334cd":"Visualization by seaborn","12b62619":"Calculte the sum of null value","0a037891":"Drop the price from x axis","20e3161a":"Take the RandomForestRegressor algorithm","358c0ce9":"All object type","3894fe39":"Drop those column"}}