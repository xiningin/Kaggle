{"cell_type":{"7a65b0f1":"code","a7389dbf":"code","5a062392":"code","8805000a":"code","4a227281":"code","f5bb4371":"code","e36d6ae6":"code","67008695":"code","7aefcf87":"code","7f9600ea":"code","2c64e072":"code","39499c93":"code","06eb402b":"code","ad3173cb":"code","fbc557f2":"code","7f861a49":"code","0c450a4b":"code","a1da7909":"code","9a57c353":"code","3b32909e":"code","2ecd5653":"code","41000996":"code","43950d7d":"code","3786eec4":"code","88f4e4ab":"code","a03eff77":"code","4397f239":"code","2b151cf7":"code","674c76db":"code","b7584d00":"code","c0d2115c":"code","e66410ff":"markdown"},"source":{"7a65b0f1":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC,LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBRFClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n","a7389dbf":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest1 = test","5a062392":"train.isnull().sum()","8805000a":"print(train.info()) \nprint('*'*50) \nprint(train.isnull().sum())\nprint('*'*50) \nprint(test.isnull().sum())\nprint(\"$\"*50)\ntest.info()\ntest.corr()","4a227281":"train.describe()\ntrain=train.drop(['Cabin','PassengerId','Ticket'], axis=1)\ntest=test.drop(['Cabin','PassengerId','Ticket'], axis=1)\ntest","f5bb4371":"print(train.isnull().sum())\nprint(\"*\"*60)\nprint(test.isnull().sum())\nprint(train.columns)\nprint(test.columns)","e36d6ae6":"train['Title']=train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest['Title']=test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\nprint(train.columns)\nprint(test.columns)\ntrain['Embarked']= train['Embarked'].fillna(train['Embarked'].dropna().mode()[0])","67008695":"train[\"Title\"] = train[\"Title\"].replace(['Don', 'Rev', 'Dr',\n       'Major', 'Sir', 'Col', 'Capt', 'Countess','Lady',\n       'Jonkheer'],'Rare')\ntrain[\"Title\"] = train[\"Title\"].replace([\"Mme\",'Mlle','Ms'],'Miss')","7aefcf87":"test[\"Title\"] = test[\"Title\"].replace(['Col' ,'Rev', 'Dr', 'Dona'],'Rare')","7f9600ea":"train['Age'] = train.groupby(['Pclass','Sex'])['Age'].apply(lambda x: x.fillna(x.median()))\ntest['Age'] = test.groupby(['Pclass','Sex'])['Age'].apply(lambda x: x.fillna(x.median()))\ntest['Fare'] = test.groupby('Pclass')['Age'].apply(lambda x:x.fillna(x.median))","2c64e072":"crr= train.corr()\nprint(crr)\nsns.heatmap(crr,annot=True)\nprint(train.info())\nprint(test.info())","39499c93":"crrt = test.corr()\nsns.heatmap(crrt,annot=True , annot_kws={'fontsize':9})","06eb402b":"print(train.info()) \nprint('*'*50) \nprint(test.isnull().sum())\nprint(\"$\"*50)\ntest.info()\ntest.corr()","ad3173cb":"def see_corr(x):\n    if type(x) is not list:\n        x=[x]\n#     x=x.tolist()\n    for col in x:\n        print(\"*\"*60)\n        print(train[[col,\"Survived\"]].groupby([col],as_index=False).agg(['count','mean'])\n              .sort_values(by=('Survived','mean'),ascending=False))\n        print(train[[col,'Survived']].corr())","fbc557f2":"le = LabelEncoder()\nfull_data=[train,test]\nfor ds in full_data:\n    ds['Sex'] = le.fit_transform(ds['Sex'])\n    ds['camp'] = ds[\"SibSp\"]+ds[\"Parch\"]+1\n    ds['camp'] = pd.cut(ds['camp'],5)\n    ds['camp'] = le.fit_transform(ds['camp'])\n#     ds['isAlone'] = (ds[\"SibSp\"]+ds[\"Parch\"]+1).apply(lambda x: 1 if x ==1 else 0)\n    ds['FareBin']=pd.qcut(ds['Fare'],5)\n    ds['AgeBin'] = pd.cut(ds['Age'],5)\n    ds['FareCode']= le.fit_transform(ds[\"FareBin\"])\n    ds['AgeCode']=le.fit_transform(ds[\"AgeBin\"])\n    ds['TitleCode']=le.fit_transform(ds[\"Title\"])\n    ds['EmbarkedCode']=le.fit_transform(ds[\"Embarked\"])\n    print(ds)","7f861a49":"print(train.columns)\nprint(test.columns)\ntrain[\"AgeBin\"].value_counts()","0c450a4b":"# lot of missing values in cabin so we are going to drop cabin and also passenger id\ntrain_df=train.drop(['Name', 'Age', 'SibSp', 'Parch', 'Fare',\n       'Embarked', 'Title', 'FareBin', 'AgeBin'],axis=1)\ntest_df = test.drop(['Name', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked',\n       'Title', 'FareBin', 'AgeBin'],axis=1)","a1da7909":"sns.heatmap(train_df.corr() , annot= True)","9a57c353":"test_df","3b32909e":"trainX = train_df.drop(['Survived'], axis=1)\ntrainY = train_df['Survived']\ntrainY","2ecd5653":"X_train, X_test, y_train, y_test = train_test_split(trainX, trainY, test_size=0.2, random_state=0)\nX_train, X_test, y_train, y_test","41000996":"logreg = LogisticRegression()\nlr_model = logreg.fit(X_train,y_train)\ny_pred = lr_model.predict(X_test)\nacc_lr = round(accuracy_score(y_pred,y_test)*100,2)\nprint(acc_lr)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","43950d7d":"gNB = GaussianNB()\ng_model = gNB.fit(X_train,y_train)\ny_pred = g_model.predict(X_test)\nacc_gnb = round(accuracy_score(y_pred,y_test)*100,2)\nprint(acc_gnb)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","3786eec4":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nacc_svm = round(accuracy_score(y_pred,y_test)*100,2)\nprint(acc_svm)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","88f4e4ab":"lsvc = LinearSVC()\ny_pred = lsvc.fit(X_train,y_train).predict(X_test)\nacc_lsvm = round(accuracy_score(y_pred,y_test)*100,2)\nprint(acc_lsvm)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","a03eff77":"decisonT = DecisionTreeClassifier()\ny_pred = decisonT.fit(X_train,y_train).predict(X_test)\nacc_dt = round(accuracy_score(y_pred,y_test)*100,2)\nprint(acc_dt)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","4397f239":"rfc = RandomForestClassifier(n_estimators=1000)\ny_pred = rfc.fit(X_train,y_train).predict(X_test)\nacc_rfc= round(accuracy_score(y_pred,y_test)*100,3)\nprint(acc_rfc)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","2b151cf7":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred= knn.predict(X_test)\nacc_knn= round(accuracy_score(y_pred,y_test)*100,3)\nprint(acc_knn)\nprint(classification_report(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))","674c76db":"xgb = XGBRFClassifier(n_estimators=1000, max_depth=5, random_state=1, learning_rate=0.5)\nxgb.fit(X_train,y_train)\ny_pred = xgb.predict(X_test)\nacc_xgb = round(accuracy_score(y_pred,y_test)*100,2)\nprint(acc_xgb)","b7584d00":"Y_pred = xgb.predict(test_df)","c0d2115c":"submission = pd.DataFrame({\n        \"PassengerId\": test1[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submissions.csv', header=True, index=False)","e66410ff":"print(train.info())\nprint('*'*50)\ntest.info()"}}