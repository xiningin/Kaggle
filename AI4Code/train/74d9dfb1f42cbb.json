{"cell_type":{"f22bf091":"code","fff74469":"code","cfdf6d18":"code","6d73545a":"code","5a1165df":"code","5d0788c4":"code","2f73f111":"code","b7f3be07":"code","d31b239f":"code","1ff967b9":"code","da339fec":"code","084882e8":"code","5a5fccf9":"code","f0de87c1":"code","30aca9cb":"code","f9c282cc":"code","e9b42bf6":"code","509235a8":"code","fbfa9a48":"code","130a57c0":"code","8e2a6daa":"code","9f90a1ce":"code","6b643fb0":"code","c0cc2ed7":"code","e58116bf":"code","a632ed26":"code","6b4c9d01":"code","93f4f554":"code","047a9e2f":"code","d5c5fa74":"code","ae90de73":"code","8f2ebfb1":"code","6f2c7714":"code","9842ff35":"code","8e0c73cc":"code","2d4d4f9f":"code","7b1327ac":"code","58a095a7":"code","c8c3c70e":"code","d1210b40":"code","39b0b4b2":"code","c6e684a9":"code","87af29ce":"code","2095c73c":"code","98420849":"code","9666bf59":"markdown","6948f0e9":"markdown","5fb969f6":"markdown","10a478d7":"markdown","edb93a67":"markdown","e9637ca4":"markdown","70d3aee6":"markdown","a80e8060":"markdown","9ec907b3":"markdown","1d1174cd":"markdown","0be2bff5":"markdown","ddcb7bba":"markdown","f778e89b":"markdown","373a87d9":"markdown"},"source":{"f22bf091":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fff74469":"import seaborn as sns\nimport matplotlib.pyplot as plt\n#import libraries","cfdf6d18":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\n#import dataset","6d73545a":"#data-points and features?\ndf.shape","5a1165df":"df.head()\n#topmost values  of the dataset","5d0788c4":"df.columns\n#column names in our dataset?","2f73f111":"df = df.drop('Id', axis=1)\n#drop id column","b7f3be07":"df['Species'].value_counts()\n#balanced dataset as the number of data points for every class is 50.","d31b239f":"df.describe()\n#gives info about the min, max standard deviation, etc","1ff967b9":"df.info()\n#info about dataset no missing values","da339fec":"sns.set_style(\"darkgrid\");\nsns.FacetGrid(df, hue='Species' ,size=6).map(plt.scatter, 'SepalLengthCm', 'SepalWidthCm').add_legend();\nplt.show();\n#iris-setosa can be easily seperated\n#but iris-versicolor, iris-virginica both overlapping each other","084882e8":"import plotly.express as px\nfig = px.scatter_3d(df, 'SepalLengthCm', y='SepalWidthCm', z='PetalWidthCm',\n                    color='PetalLengthCm', symbol='Species')\nfig.show()","5a5fccf9":"# pairwise scatter plot\nplt.close();\nsns.set_style(\"darkgrid\");\nsns.pairplot(df, hue='Species',height=4);\nplt.show()\n#shows distribution of features\n#petallengthcm and petalwidthcm ","f0de87c1":"df.Species.value_counts()\n#3 type of flower species total=150\n#and each have 50 observations","30aca9cb":"import numpy as np\niris_setosa = df.loc[df['Species'] == 'Iris-setosa'];\niris_virginica = df.loc[df['Species'] == 'Iris-virginica'];\niris_versicolor = df.loc[df['Species'] == 'Iris-versicolor'];\n\nplt.plot(iris_setosa['PetalLengthCm'])\nplt.plot(iris_versicolor['PetalLengthCm'])\nplt.plot(iris_virginica['PetalLengthCm'])\nplt.show()","f9c282cc":"sns.FacetGrid(df, hue='Species', height=5).map(sns.distplot, 'PetalLengthCm').add_legend();\nplt.show();\n#flowers of petallengthcm having 1-2cm are iris setosa \n#flowers petallengthcm having more(2.3 to 5.6 for versicolor, 4 to 7.9 virginica) then that are or iris-virginica and iris-versicolor","e9b42bf6":"sns.FacetGrid(df, hue='Species', height=5).map(sns.distplot, 'PetalWidthCm').add_legend();\nplt.show();\n#not much of spread, setosa is peaked","509235a8":"sns.FacetGrid(df, hue='Species', size=5).map(sns.distplot, 'SepalLengthCm').add_legend();\nplt.show();\n#all overlapped ","fbfa9a48":"sns.FacetGrid(df, hue='Species', size=5).map(sns.distplot, 'SepalWidthCm').add_legend();\nplt.show();","130a57c0":"counts, bin_edges = np.histogram(iris_setosa['PetalLengthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf)\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:], pdf);\nplt.plot(bin_edges[1:], cdf);\n\ncounts, bin_edges = np.histogram(iris_setosa['PetalLengthCm'], bins=20, density=True)\npdf = counts\/(sum(counts))\nplt.plot(bin_edges[1:], pdf);\nplt.show();","8e2a6daa":"#Cumulative Distribution Function (CDF)\ncounts, bin_edges = np.histogram(iris_setosa['PetalLengthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:] , pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.show();","9f90a1ce":"counts, bin_edges = np.histogram(iris_versicolor['PetalLengthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:] , pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.show();","6b643fb0":"counts, bin_edges = np.histogram(iris_versicolor['PetalWidthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:] , pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.show();","c0cc2ed7":"counts, bin_edges = np.histogram(iris_virginica['PetalWidthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\n\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:] , pdf)\nplt.plot(bin_edges[1:], cdf)\n\nplt.show();","e58116bf":"counts, bin_edges = np.histogram(iris_setosa['PetalLengthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf)\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:], pdf)\nplt.plot(bin_edges[1:], cdf)\n\n#virginica \ncounts, bin_edges = np.histogram(iris_virginica['PetalLengthCm'], bins=10, density=True)\npdf = counts\/(sum(counts))\nprint(pdf)\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:], pdf)\nplt.plot(bin_edges[1:], cdf)\n\n#versicolor\ncounts, bin_edges = np.histogram(iris_versicolor['PetalLengthCm'], bins=10, \n                                 density = True)\n\npdf = counts\/(sum(counts))\nprint(pdf);\nprint(bin_edges)\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\n\nplt.show();\n#pdf and cdf of all three flower species","a632ed26":"print('means')\nprint(np.mean(iris_setosa['PetalLengthCm']))\nprint(np.mean(iris_virginica['PetalLengthCm']))\nprint(np.mean(iris_versicolor['PetalLengthCm']))\n\nprint('\\nstd-dev')\nprint(np.std(iris_setosa['PetalLengthCm']))\nprint(np.std(iris_virginica['PetalLengthCm']))\nprint(np.std(iris_versicolor['PetalLengthCm']))","6b4c9d01":"\nprint(\"\\nMedians:\")\nprint(np.median(iris_setosa[\"PetalLengthCm\"]))\nprint(np.median(iris_virginica[\"PetalLengthCm\"]))\nprint(np.median(iris_versicolor[\"PetalLengthCm\"]))\n\nprint(\"\\nQuantiles:\")\nprint(np.percentile(iris_setosa[\"PetalLengthCm\"],np.arange(0, 100, 25)))\nprint(np.percentile(iris_virginica[\"PetalLengthCm\"],np.arange(0, 100, 25)))\nprint(np.percentile(iris_versicolor[\"PetalLengthCm\"], np.arange(0, 100, 25)))\n\nprint(\"\\n90th Percentiles:\")\nprint(np.percentile(iris_setosa[\"PetalLengthCm\"],90))\nprint(np.percentile(iris_virginica[\"PetalLengthCm\"],90))\nprint(np.percentile(iris_versicolor[\"PetalLengthCm\"], 90))\n\nfrom statsmodels import robust\nprint (\"\\nMedian Absolute Deviation\")\nprint(robust.mad(iris_setosa[\"PetalLengthCm\"]))\nprint(robust.mad(iris_virginica[\"PetalLengthCm\"]))\nprint(robust.mad(iris_versicolor[\"PetalLengthCm\"]))","93f4f554":"# boxplot is a standardized way of displaying the distribution of data based\nsns.boxplot(x='Species',y='PetalLengthCm', data=df)\nplt.show()\n#tells min, max ,25 50 75 ","047a9e2f":"sns.boxplot(x='Species',y='PetalWidthCm', data=df)\nplt.show()\n","d5c5fa74":"sns.boxplot(x='Species',y='SepalWidthCm', data=df)\nplt.show()","ae90de73":"sns.boxplot(x='Species',y='SepalLengthCm', data=df)\nplt.show()","8f2ebfb1":"sns.violinplot(x=\"Species\", y=\"PetalLengthCm\", data=df, size=10)\nplt.show()","6f2c7714":"sns.violinplot(x=\"Species\", y=\"PetalWidthCm\", data=df, size=10)\nplt.show()","9842ff35":"#2D Density plot, contors-plot\nsns.jointplot(x=\"PetalLengthCm\", y=\"PetalWidthCm\", data=iris_setosa, kind=\"kde\");\nplt.show();","8e0c73cc":"sns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris_setosa, kind=\"kde\");\nplt.show();","2d4d4f9f":"df.hist(edgecolor='black', linewidth=1.2)\nfig = plt.gcf()\nfig.set_size_inches(12, 6)\nplt.show()","7b1327ac":"plt.figure(figsize=(15,10))\nplt.subplot(2, 2,1)\nsns.violinplot(x='Species', y='PetalLengthCm' , data=df)\nplt.subplot(2, 2, 2)\nsns.violinplot(x='Species', y='PetalWidthCm', data=df)\nplt.subplot(2, 2, 3)\nsns.violinplot(x='Species', y='SepalLengthCm', data=df)\nplt.subplot(2, 2, 4)\nsns.violinplot(x='Species', y='SepalWidthCm', data=df)","58a095a7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier","c8c3c70e":"df.shape","d1210b40":"plt.figure(figsize=(7,4))\nsns.heatmap(df.corr(), annot=True, cmap='cubehelix_r')\nplt.show()","39b0b4b2":"train, test = train_test_split(df, test_size=0.3)\nprint(train.shape)\nprint(test.shape)","c6e684a9":"train_x = train[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\ntrain_y = train.Species\ntest_x = test[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\ntest_y = test.Species","87af29ce":"train_x.head()","2095c73c":"train_y.head()","98420849":"model = svm.SVC() #select the algorithm\nmodel.fit(train_x,train_y) # we train the algorithm with the training data and the training output\nprediction=model.predict(test_x) #now we pass the testing data to the trained algorithm\nprint('The accuracy of the SVM is:',metrics.accuracy_score(prediction,test_y))#now we check the accuracy of the algorithm. \n#we pass the predicted output by the model and the actual output","9666bf59":"**Observation(s):**\n\n* Using sepal_length and sepal_width features, we can distinguish Setosa flowers from others.\n* Seperating Versicolor from Viginica is much harder as they have considerable overlap.","6948f0e9":"*  Plots of CDF of petal_length for various types of flowers.\n*  Misclassification error if you use petal_length only.","5fb969f6":" **Median, Percentile, Quantile, IQR, MAD**\n median:The median is the value separating the higher half from the lower half of a data\n Quantile : parts divided in equal four parts\n IQR : inter quartile (Q75-Q25)  difference between quartiles\n mad : median absolute deviation","10a478d7":"**description about the dataset **\n\nThe Iris dataset was used in R.A. Fisher's classic 1936 paper, The Use of Multiple Measurements in Taxonomic Problems, and can also be found on the UCI Machine Learning Repository.\n\nIt includes three iris species with 50 samples each as well as some properties about each flower. One flower species is linearly separable from the other two, but the other two are not linearly separable from each other.\n\nThe columns in this dataset are:\n* Id\n* SepalLengthCm\n* SepalWidthCm\n* PetalLengthCm\n* PetalWidthCm\n* Species","edb93a67":"**Observations**\n\n* petal_length and petal_width are the most useful features to identify various flower types.\n* Setosa can be easily identified (linearly seperable), Virginica and Versicolor have some overlap (almost linearly seperable).\n","e9637ca4":"**Now let us see how the length and width vary according to the species**","70d3aee6":"**Mean, Variance and Std-dev**\nmeans : average , central tendency\nvariance , spread of the points \nstd dev : avg distance of points from mean ","a80e8060":"2-D Scatter Plot","9ec907b3":"**3D Scatter plot**","1d1174cd":"**Histogram, PDF, CDF**\n","0be2bff5":"**Box plot and Whiskers**","ddcb7bba":"**Violin plots**","f778e89b":"**Pair-plot**","373a87d9":"#Plot CDF of petal_length\ncumulative density probability is area under the curve (pdf)"}}