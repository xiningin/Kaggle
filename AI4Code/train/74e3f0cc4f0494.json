{"cell_type":{"aa202ef0":"code","49901036":"code","a85f2858":"code","0d697cc2":"code","b785d3b7":"code","741b0a1f":"code","747c15eb":"code","a8af46de":"code","266e66fb":"code","ab896447":"code","006c66b9":"code","dead4e81":"code","5aa79557":"code","a78b7636":"code","b4cc22bf":"code","4f9e5fd9":"code","1897fdde":"code","51910b04":"code","64da7e0f":"code","e834ef03":"code","5b8403e6":"code","fde7e5f2":"code","3e69dd81":"code","ae7e0873":"code","c3bc1996":"code","fe190d0b":"code","e1688c9c":"code","7b3fa9a1":"code","6f9d432a":"code","82396ccf":"code","0140b569":"code","a861da35":"code","1f1dc642":"code","14a665c1":"code","9239c61b":"code","dc4913d6":"markdown","f0b2e815":"markdown","70f7c3bf":"markdown","5026ef42":"markdown","c1fb29aa":"markdown","455f0ea9":"markdown","0e00ff9d":"markdown","92e0b848":"markdown","99039e50":"markdown","cee48e52":"markdown","14c761a6":"markdown","4d4a2ead":"markdown","3584a176":"markdown","985f3c8b":"markdown","a5a61cf0":"markdown","bc4bda07":"markdown"},"source":{"aa202ef0":"#Importing required packages.\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n%matplotlib inline","49901036":"#Loading dataset\nwine = pd.read_csv('..\/input\/winequality-red.csv')","a85f2858":"#Let's check how the data is distributed\nwine.head()","0d697cc2":"#Information about the data columns\nwine.info()","b785d3b7":"#Here we see that fixed acidity does not give any specification to classify the quality.\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'fixed acidity', data = wine)","741b0a1f":"#Here we see that its quite a downing trend in the volatile acidity as we go higher the quality \nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'volatile acidity', data = wine)","747c15eb":"#Composition of citric acid go higher as we go higher in the quality of the wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'citric acid', data = wine)","a8af46de":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'residual sugar', data = wine)","266e66fb":"#Composition of chloride also go down as we go higher in the quality of the wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'chlorides', data = wine)","ab896447":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'free sulfur dioxide', data = wine)","006c66b9":"fig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'total sulfur dioxide', data = wine)","dead4e81":"#Sulphates level goes higher with the quality of wine\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'sulphates', data = wine)","5aa79557":"#Alcohol level also goes higher as te quality of wine increases\nfig = plt.figure(figsize = (10,6))\nsns.barplot(x = 'quality', y = 'alcohol', data = wine)","a78b7636":"#Making binary classificaion for the response variable.\n#Dividing wine as good and bad by giving the limit for the quality\nbins = (2, 6.5, 8)\ngroup_names = ['bad', 'good']\nwine['quality'] = pd.cut(wine['quality'], bins = bins, labels = group_names)","b4cc22bf":"#Now lets assign a labels to our quality variable\nlabel_quality = LabelEncoder()","4f9e5fd9":"#Bad becomes 0 and good becomes 1 \nwine['quality'] = label_quality.fit_transform(wine['quality'])","1897fdde":"wine['quality'].value_counts()","51910b04":"sns.countplot(wine['quality'])","64da7e0f":"#Now seperate the dataset as response variable and feature variabes\nX = wine.drop('quality', axis = 1)\ny = wine['quality']","e834ef03":"#Train and Test splitting of data \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","5b8403e6":"#Applying Standard scaling to get optimized result\nsc = StandardScaler()","fde7e5f2":"X_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","3e69dd81":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train, y_train)\npred_rfc = rfc.predict(X_test)","ae7e0873":"#Let's see how our model performed\nprint(classification_report(y_test, pred_rfc))","c3bc1996":"#Confusion matrix for the random forest classification\nprint(confusion_matrix(y_test, pred_rfc))","fe190d0b":"sgd = SGDClassifier(penalty=None)\nsgd.fit(X_train, y_train)\npred_sgd = sgd.predict(X_test)","e1688c9c":"print(classification_report(y_test, pred_sgd))","7b3fa9a1":"print(confusion_matrix(y_test, pred_sgd))","6f9d432a":"svc = SVC()\nsvc.fit(X_train, y_train)\npred_svc = svc.predict(X_test)","82396ccf":"print(classification_report(y_test, pred_svc))","0140b569":"#Finding best parameters for our SVC model\nparam = {\n    'C': [0.1,0.8,0.9,1,1.1,1.2,1.3,1.4],\n    'kernel':['linear', 'rbf'],\n    'gamma' :[0.1,0.8,0.9,1,1.1,1.2,1.3,1.4]\n}\ngrid_svc = GridSearchCV(svc, param_grid=param, scoring='accuracy', cv=10)","a861da35":"grid_svc.fit(X_train, y_train)","1f1dc642":"#Best parameters for our svc model\ngrid_svc.best_params_","14a665c1":"#Let's run our SVC again with the best parameters.\nsvc2 = SVC(C = 1.2, gamma =  0.9, kernel= 'rbf')\nsvc2.fit(X_train, y_train)\npred_svc2 = svc2.predict(X_test)\nprint(classification_report(y_test, pred_svc2))","9239c61b":"#Now lets try to do some evaluation for random forest model using cross validation.\nrfc_eval = cross_val_score(estimator = rfc, X = X_train, y = y_train, cv = 10)\nrfc_eval.mean()","dc4913d6":"## Support Vector Classifier","f0b2e815":"## Let's try to increase our accuracy of models\n## Grid Search CV","70f7c3bf":"## If you find this notebook useful then please upvote. So the beginners can find easily","5026ef42":"## **Let's do some plotting to know how the data columns are distributed in the dataset**","c1fb29aa":"### Thank for going through this notebook","455f0ea9":"#### Random forest gives the accuracy of 87%","0e00ff9d":"# **Thank You for opening this notebook!!!**\n\n## **This notebook tutorial is for those who are beginners to machine learning.**\n\n*In this notebook, First I have done some exploration on the data using matplotlib and seaborn.\nThen, I use different classifier models to predict the quality of the wine.*\n\n**1. Random Forest Classifier**\n\n**2. Stochastic Gradient Descent Classifier**\n\n**3. Support Vector Classifier(SVC) **\n\n*Then I use cross validation evaluation technique to optimize the model performance.*\n\n**1. Grid Search CV**\n\n**2. Cross Validation Score**\n\n## **If you find this notebook useful then please upvote.**","92e0b848":"#### 84% accuracy using stochastic gradient descent classifier","99039e50":"### Random forest accuracy increases from 87% to 91 % using cross validation score","cee48e52":"## Cross Validation Score for random forest and SGD","14c761a6":"### SVC improves from 86% to 90% using Grid Search CV","4d4a2ead":"#### Support vector classifier gets 86%","3584a176":"\n\n## Stochastic Gradient Decent Classifier","985f3c8b":"## Our training and testing data is ready now to perform machine learning algorithm","a5a61cf0":"### Random Forest Classifier","bc4bda07":"## Preprocessing Data for performing Machine learning algorithms"}}