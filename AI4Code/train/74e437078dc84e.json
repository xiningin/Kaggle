{"cell_type":{"ee211341":"code","648f3b87":"code","36f88d59":"code","62a52a83":"code","ccedda6e":"code","9755a3c0":"code","04a54b45":"code","bef1cc09":"code","649f1c2d":"code","ca0edc0a":"code","97cdabcb":"code","28f96be1":"code","35ceb939":"code","3d0f59b9":"code","54ecfd66":"code","7f67b2e7":"code","29f8c9aa":"markdown","28d7a338":"markdown","b7ce38ec":"markdown","13973e19":"markdown","2cf154fa":"markdown","2e72adcd":"markdown","b6e0f033":"markdown","87d8d6c6":"markdown","e0bb38ba":"markdown","46b686be":"markdown","9a493092":"markdown","f67aead6":"markdown"},"source":{"ee211341":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom ipywidgets import interact,widgets\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import pairwise\nimport seaborn as sns\n%matplotlib inline","648f3b87":"data = pd.read_csv(\"\/kaggle\/input\/fifa19\/data.csv\")\ndata.drop(columns=['Unnamed: 0'],inplace=True)\ndata.head(3)","36f88d59":"data.shape,data.drop_duplicates().shape,data.Name.drop_duplicates().shape,data.ID.drop_duplicates().shape","62a52a83":"data.groupby(['Name','Nationality'],as_index=False).ID.count().query(\"ID >1\")","ccedda6e":"@interact\ndef univariate(col = [ 'Age', 'Nationality','Club','Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position','Wage']):\n    plt.figure(figsize=(25,5))\n    if len(data[col].unique())>=15:\n        data[col].value_counts(normalize=True).head(15).plot(kind='bar')\n    else :\n        data[col].value_counts(normalize=True).plot(kind='bar')\n    plt.title(col)","9755a3c0":"data.columns","04a54b45":"print(data.groupby(['Name'],as_index=False).Overall.mean().sort_values(['Overall'],ascending=False).head(10))\nprint(\"***************************************************************\")\nprint(data.groupby(['Name'],as_index=False).Potential.mean().sort_values(['Potential'],ascending=False).head(10))","bef1cc09":"print(data.groupby(['Club'],as_index=False).Overall.mean().sort_values(['Overall'],ascending=False).head(10))\nprint(\"***************************************************************\")\nprint(data.groupby(['Club'],as_index=False).Potential.mean().sort_values(['Potential'],ascending=False).head(10))","649f1c2d":"data['wage_numeric'] = data['Wage'].apply(lambda x: int(x.replace(\"K\",\"\").replace(\"\u20ac\",\"\")))\nprint(data.groupby(['Name'],as_index=False).wage_numeric.mean().sort_values(['wage_numeric'],ascending=False).head(10))\nprint(data.groupby(['Club'],as_index=False).wage_numeric.mean().sort_values(['wage_numeric'],ascending=False).head(10))","ca0edc0a":"data['value_numeric'] = data['Value'].apply(lambda x: float(x.replace(\"K\",\"\").replace(\"M\",\"\").replace(\"\u20ac\",\"\")))\nprint(data.groupby(['Name'],as_index=False).value_numeric.mean().sort_values(['value_numeric'],ascending=False).head(10))\nprint(data.groupby(['Club'],as_index=False).value_numeric.mean().sort_values(['value_numeric'],ascending=False).head(10))","97cdabcb":"skill_cols = [ 'Crossing',\n                   'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                   'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                   'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                   'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                   'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                   'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                   'GKKicking', 'GKPositioning', 'GKReflexes','Overall','value_numeric','wage_numeric']\ndata_corr = data[skill_cols]\ndata_corr = data_corr.corr()","28f96be1":"plt.figure(figsize=(8,7))\nsns.heatmap(data_corr,xticklabels=data_corr.columns,yticklabels=data_corr.columns)","35ceb939":"@interact\ndef skill_dependecy(col = ['Crossing',\n                   'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                   'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                   'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                   'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                   'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                   'Marking', 'StandingTackle', 'SlidingTackle']):\n    data_corr[data_corr[col]!=1].sort_values([col],ascending=False).head(10)[[col]].plot(kind='bar')\n    plt.title(col)","3d0f59b9":"def get_most_similar_player(player,cnt):\n    return  cosine_simi_df[cosine_simi_df.index!=player][player].sort_values(ascending=False).head(cnt)","54ecfd66":"data_sub = data[skill_cols+['Name']]\ndata_sub = data_sub[[col for col in data_sub.columns if col not in ['Overall','value_numeric','wage_numeric']]]\n\ncosine_simi_df = pd.DataFrame(pairwise.cosine_similarity(np.array(data_sub.drop(columns=['Name']).fillna(0))),columns = data_sub.Name)\ncosine_simi_df.index = data_sub.Name","7f67b2e7":"\n@interact\ndef player_compare(player1=data.Name.unique() , player2 = data.Name.unique()):\n    if player1!=player2:\n        player_df = data[data.Name.isin([player1,player2])][skill_cols].T\n        player_df.columns = [player1,player2]\n        player_df.plot(kind='bar',figsize=(15,5))\n        \n        plt.figure(figsize=(10,5))\n        plt.subplot(1,2,1)\n        get_most_similar_player(player1,10).plot()\n        plt.subplot(1,2,2)\n        get_most_similar_player(player2,10).plot()\n","29f8c9aa":"####  Relation of players skills with value and rating","28d7a338":"## Overall and Potential Ratings","b7ce38ec":"#### Players with highest ratings","13973e19":" #### Relation of skills among them , it might indicate to gain one skill what others are necessary","2cf154fa":"1. Most of the players are in age bracket of 20-26\n2. Natinality is England,Germany,Spain,Aregentina,France,Brazil,Itlay\n3. Right foot is preferred 80% of the time by players\n4. less then 1% players have more then 3 rating at international level\n5. for 60% players weak foot is 3\n6. most player have 2-3 skilled moves only\n7. 50% of the players has Medium\/Medium work rate\n8. Most hold position is ST and GK\n9. 25% players earn 1k\n","2e72adcd":"## Comparing Players on Skills","b6e0f033":"## Wages and Values","87d8d6c6":"## Correlation Analysis ","e0bb38ba":"#### players and clubs with highest wages","46b686be":"1. 'GKDiving', 'GKHandling','GKKicking', 'GKPositioning', 'GKReflexes' are highly correlated with all the variable in -ve direction\n2. Overall rating has high correlation with wages,composure,reactions but has strong negative correlation with Value of the player\n3. Shot power and strengths are correlated (quiet initutive)\n4. Interception is highly correlated with Marking,StandingTackle,SidingTackle\n\n\n","9a493092":"#### Clubs and Players with highest values","f67aead6":"#### clubs with players having highest ratings"}}