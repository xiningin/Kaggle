{"cell_type":{"257c64b2":"code","0bffcc6c":"code","87923e17":"code","938febf2":"code","799382c2":"code","b348fdb2":"code","ed4acd4e":"code","d3f82595":"code","8496a1d1":"code","84cba040":"code","1193d7bd":"code","30075188":"code","ec1500b1":"code","d18e1c07":"code","4587dcee":"code","54e71b37":"code","4c2fd9c0":"code","f9ebf8ee":"markdown","cd0beff1":"markdown","985f5934":"markdown","aeb61d00":"markdown","d956518c":"markdown","afb86c96":"markdown","9d7d198d":"markdown"},"source":{"257c64b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bffcc6c":"data = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","87923e17":"data.head()","938febf2":"data.info()","799382c2":"data.describe()","b348fdb2":"corr_matrix = data.corr()\ncorr_matrix","ed4acd4e":"import seaborn as sns\nsns.pairplot(data)","d3f82595":"%matplotlib inline\nimport matplotlib.pyplot as plt","8496a1d1":"corrmat=data.corr()\ntop_corr_features=corrmat.index\nplt.figure(figsize=(20,20))\n# plot heat map\ng=sns.heatmap(data[top_corr_features].corr(), annot=True, cmap=\"RdYlGn\")","84cba040":"from sklearn.model_selection import train_test_split\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","1193d7bd":"# from sklearn.ensemble import RandomForestClassifier\n# from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n# model = RandomForestClassifier()\n# model = DecisionTreeClassifier()\nmodel = GaussianNB()","30075188":"model.fit(X_train,y_train) #fitting the model \ny_pred = model.predict(X_test) #prediction\ny_train_pred = model.predict(X_train)","ec1500b1":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","d18e1c07":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_test, y_pred)","4587dcee":"recall_score(y_test, y_pred)","54e71b37":"from sklearn.metrics import f1_score\nf1_score(y_test, y_pred)","4c2fd9c0":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","f9ebf8ee":"## Confusion Matrix","cd0beff1":"## Precision and Recall","985f5934":"## Correlations","aeb61d00":"## Train-Test Splitting","d956518c":"## Accuracy","afb86c96":"## Plot Visualizations","9d7d198d":"## F-Score"}}