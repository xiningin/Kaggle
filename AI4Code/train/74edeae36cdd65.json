{"cell_type":{"52016d67":"code","0404ef62":"code","8ee54d9f":"code","37b47230":"code","733f34fb":"code","cb01338b":"code","8474caac":"code","51e9ae57":"code","cdfe604a":"code","236d2d4e":"code","2f0e6d77":"code","97f9b694":"code","1ec130c3":"code","7f67f5c4":"code","83fe7fa0":"code","e1bec4ef":"code","a13a030f":"code","118e78ec":"code","31acb73a":"code","a486fb40":"code","17cdc9eb":"code","e15b8b4a":"code","0f6f5633":"code","07998e42":"code","43496aa1":"code","172219c9":"code","1510ffb7":"code","9e2e45ac":"code","86179e96":"code","ad6450e6":"code","f1375b59":"code","a19c2083":"code","f09deedc":"code","5bdae26f":"code","48ad84f3":"code","8a49ac39":"code","1bcb326e":"code","5a87b155":"code","b23faab8":"code","613f435d":"code","1c3a01ca":"code","5c7e13ec":"code","787bc835":"code","8d239af1":"markdown","e7c5be54":"markdown","b7c33333":"markdown","f6c6f383":"markdown","6b5174c1":"markdown","790c4090":"markdown","a9d730ae":"markdown","aaef4699":"markdown","f7e18ea6":"markdown","af94a30d":"markdown"},"source":{"52016d67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import boxcox, skew\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import mean_squared_error\nimport plotly.graph_objects as go\nimport math\nsns.set_style('darkgrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0404ef62":"house = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","8ee54d9f":"house.head(10)","37b47230":"house.info()","733f34fb":"house.describe()","cb01338b":"house.columns","8474caac":"house.shape","51e9ae57":"for col in house.columns:\n    percent = (house[col].isnull().sum() \/ house.shape[0]) * 100\n    print(col + ': ' + str(percent))\n    if percent > 40.0:\n        house.drop([col], axis=1, inplace=True)","cdfe604a":"house.shape","236d2d4e":"# numeric = house[set(house._get_numeric_data().columns) - set('Id')]\ncategorical = house[set(house.columns)-set(house._get_numeric_data().columns)]\n# numeric.head()\n# categorical.head()","2f0e6d77":"fig, axes = plt.subplots(8, 5, figsize=(40, 40))\ncols = [c for c in categorical.columns]\n\nfor i in range(8):\n    for j in range(5):\n        m = i*5+j\n        if m < len(cols):\n            sns.countplot(x=cols[m], data=categorical, ax=axes[i, j])\n            axes[i][j].set_ylabel('Count', fontsize=15)\n            axes[i][j].set_xlabel(cols[m], fontsize=15)\nfig.show();","97f9b694":"categorical=categorical.drop(['Condition2', 'Utilities', 'Heating', 'Condition1', 'Functional', 'PavedDrive', 'SaleType', 'BsmtFinType2',\n                  'LandSlope', 'Street', 'RoofMatl', 'LandContour', 'GarageQual', 'GarageCond', 'CentralAir', 'SaleCondition',\n                  'ExterCond', 'Electrical'], axis=1)","1ec130c3":"categorical.shape","7f67f5c4":"for col in categorical.columns:\n    print(col + ': ' + str(categorical[col].isnull().sum()))","83fe7fa0":"for col in categorical.columns:\n    categorical[col].fillna(value=categorical[col].mode().values[0], inplace=True)","e1bec4ef":"for col in categorical.columns:\n    print(col + ': ' + str(categorical[col].isnull().sum()))","a13a030f":"fig, axes = plt.subplots(5, 4, figsize=(30, 40))\ncols = [c for c in categorical.columns]\n\nfor i in range(5):\n    for j in range(4):\n        m = i*4+j\n        if m < len(cols):\n            sns.boxplot(x=categorical[cols[m]], y=house.SalePrice, ax=axes[i, j])\n            axes[i][j].set_ylabel('Count', fontsize=15)\n            axes[i][j].set_xlabel(cols[m], fontsize=15)\nfig.show();","118e78ec":"numeric = house[set(house._get_numeric_data().columns)]","31acb73a":"numeric.shape","a486fb40":"for col in numeric.columns:\n    print(col + ': ' + str(numeric[col].isnull().sum()))","17cdc9eb":"numeric = numeric.fillna(numeric.median())","e15b8b4a":"for col in numeric.columns:\n    print(col + ': ' + str(numeric[col].isnull().sum()))","0f6f5633":"fig = go.Figure(data=[go.Table(header=dict(values=['COLUMNS', 'CORRELATION WITH SALE PRICE'], fill_color='lightcoral', font=dict(color='white', size=15),\n                  height=30),\n                  cells=dict(values=[numeric.columns, numeric.corr()['SalePrice']], fill_color='lightblue', font=dict(color='black', size=12), height=30))],\n                layout=go.Layout(\n                  margin={'t': 0}))\nfig.update_layout(width=600, height=500)\nfig.show()","07998e42":"for col in numeric.columns:\n    if abs(numeric[col].corr(numeric['SalePrice'])) < 0.2:\n        numeric.drop([col], axis=1, inplace=True)\nnumeric.columns","43496aa1":"numeric.shape\nplt.figure(figsize=(15, 12))\nsns.heatmap(numeric.corr(), annot=True);","172219c9":"house_df = numeric.join(categorical, how='inner')","1510ffb7":"house_df.head()","9e2e45ac":"house_df.shape","86179e96":"X = house_df.drop(['SalePrice'], axis=1)\ny = house_df['SalePrice']","ad6450e6":"num=X._get_numeric_data().columns.tolist()","f1375b59":"X.shape","a19c2083":"X = pd.get_dummies(X, columns=list(set(X.columns)-set(X._get_numeric_data().columns)))","f09deedc":"X.head()","5bdae26f":"limit = math.ceil(0.8 * X.shape[0])\nX_train, y_train = X[:limit], y[:limit]\nX_test, y_test = X[limit:X.shape[0]], y[limit:y.shape[0]]","48ad84f3":"y_train = y_train.values.reshape(-1, 1)\ny_test = y_test.values.reshape(-1, 1)","8a49ac39":"rs_X = RobustScaler()\nrs_Y = RobustScaler()\nX_train.loc[:, num] = rs_X.fit_transform(X_train.loc[:, num])\nX_test.loc[:, num] = rs_X.transform(X_test.loc[:, num])\ny_train = rs_Y.fit_transform(y_train)\ny_test = rs_Y.transform(y_test)","1bcb326e":"regression_results={}","5a87b155":"from sklearn.svm import SVR\n\nsvr = SVR(kernel='rbf')\nsvr.fit(X_train, np.ravel(y_train))\npred_svr = svr.predict(X_test)\nregression_results['SVR'] = mean_squared_error(np.ravel(y_test), pred_svr, squared=False)","b23faab8":"from sklearn.linear_model import Lasso\n\nlasso = Lasso()\nlasso.fit(X_train, y_train)\npred_lasso = lasso.predict(X_test)\nregression_results['Lasso'] = mean_squared_error(y_test, pred_lasso, squared=False)","613f435d":"from sklearn.linear_model import Ridge\n\nridge = Ridge()\nridge.fit(X_train, y_train)\npred_ridge = ridge.predict(X_test)\nregression_results['Ridge'] = mean_squared_error(y_test, pred_ridge, squared=False)","1c3a01ca":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\nrfr.fit(X_train, np.ravel(y_train))\npred_dt = rfr.predict(X_test)\nregression_results['RandomForestRegressor'] = mean_squared_error(np.ravel(y_test), pred_dt, squared=False)","5c7e13ec":"from xgboost import XGBRegressor\n\nxgbr = XGBRegressor(n_estimators=1000)\nxgbr.fit(X_train, y_train)\npred_xgb = xgbr.predict(X_test)\nregression_results['XGBoost'] = math.sqrt(mean_squared_error(y_test, pred_xgb))","787bc835":"fig = go.Figure(data=[go.Table(header=dict(values=['REGRESSION ALGORITHM', 'ROOT MEAN SQUARED ERROR'], fill_color='#CD3162', font=dict(color='white', size=15),\n                  height=30),\n                  cells=dict(values=[list(regression_results.keys()), list(regression_results.values())], fill_color='#FF8633', font=dict(color='black', size=14), height=30))],\n                layout=go.Layout(\n                  margin={'t': 0}))\nfig.update_layout(width=600, height=300)\nfig.show()","8d239af1":"In the above plots we can see that there are many attributes that are predominated by a single value like Heating, Condition2, Utilities, etc. They may not contribute much to our analysis and hence I choose to discard them.","e7c5be54":"Creating a dataframe containing some numeric variables","b7c33333":"Forming a separate dataframe containing only categorical columns from the main dataframe(house) will be quite helpful in deeper analysis. Further I will also create dataframe containing only numeric columns.","f6c6f383":"In the categorical dataframe, I fill the missing values with the most frequently occuring value(mode) of that column.","6b5174c1":"I have two versions of this notebook. **Version 1** contains cleaning the data, visualizing correlation of various numeric variables with SalePrice, few methods of removing skewness, etc. But it wasn't complete. So I created this **Version 2**. In this notebook along with preprocessing the data I use various regression algorithms like XGBoost, RandomForest, Lasso, etc. to predict SalePrice of the house.\n**Please upvote my notebook if you like it**","790c4090":"Let's count the occurance of various values of each attribute in our categorical dataframe.","a9d730ae":"To analyse the relation between a categorical and a numeric variable, boxplots are a popular choice. Boxplot is a graphical representation of the 5-number summary: Minimum value, Quartile1(Q1), Median, Quartile3(Q3) and Maximum value. It also shows outliers.\nI check the distribution of SalePrice with respect to each categorical attribute.","aaef4699":"Now, let's see how much each column is related to the SalePrice.","f7e18ea6":"Below I print the percentage of missing values in each column. There are a few columns in our house dataframe like Alley, PoolQc, Fence, etc. that have a lot of missing values. I discard those columns that have more than 40% of it's values missing. For other columns I handle the missing values later in this notebook.","af94a30d":"We can see that the LotFrontage has 259 missing values and GarageYearBuilt has 81 missing values. I replace them with median of the columns."}}