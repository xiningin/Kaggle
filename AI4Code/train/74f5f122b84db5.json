{"cell_type":{"69c6c264":"code","f7ecd060":"code","602893f4":"code","45a27dfc":"code","d6fd4fc8":"code","d0de02b7":"code","1bf77f66":"code","43eb26bd":"code","97f132a5":"code","951987f0":"code","040854f0":"code","b7575b04":"code","9d60532e":"markdown","432cd87f":"markdown","94a79adc":"markdown","c2e65bc0":"markdown","284a7f61":"markdown","a1e536c2":"markdown","c64e8dfd":"markdown","a5488aa4":"markdown","de3c984f":"markdown"},"source":{"69c6c264":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import StratifiedKFold\nimport xgboost as xgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV","f7ecd060":"def dummy_date(df):\n    df[\"year\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[0])\n    df[\"month\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[1])\n    df[\"day\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n    #df.drop(\"Date\",inplace=True,axis=1)\n    return df\n\ndef LabelEncord_categorical(df):\n    categorical_params = [\"year\",\"month\",\"day\"]\n    for params in categorical_params:\n        le = LabelEncoder()\n        df[params] = le.fit_transform(df[params])\n    return df\n\ndef dummies(df):\n    categorical_params = [\"year\",\"month\",\"day\"]\n    for params in categorical_params:\n        dummies =  pd.get_dummies(df[params])\n        df = pd.concat([df, dummies],axis=1)\n    return df\n\ndef pre_processing(df):\n    df = dummy_date(df)\n    df = LabelEncord_categorical(df)\n    df = dummies(df)\n    return df\n\n# read dataset\ndf_cov = pd.read_csv('..\/input\/ntt-data-global-ai-challenge-06-2020\/COVID-19_and_Price_dataset.csv', header=0)\n\n# pre processing\ndf_cov = pre_processing(df_cov)\n\n# add index\ndf_cov[\"DateDummy\"]=pd.to_datetime(df_cov[\"Date\"])\ndf_cov.set_index('DateDummy', inplace=True)\n\n# make diff series\ndf_cov[\"Price\"] = df_cov[\"Price\"].interpolate('time',axis=0,limit_direction='both')\ndf_cov[\"Price_diff\"] = df_cov[\"Price\"].diff()\ndf_cov[\"Price_diff\"] = df_cov[\"Price_diff\"].fillna(0)\n\n# split dataset to train & test\ntrain = df_cov['2019-12-31':'2020-04-28']\ntest = df_cov['2020-04-29':'2020-06-08']","602893f4":"y_train = train[\"Price_diff\"].values\nX_train = train.drop([\"Price\",\"Price_diff\",\"Date\"],axis=1).values\ny_test = test[\"Price_diff\"].values\nX_test = test.drop([\"Price\",\"Price_diff\",\"Date\"],axis=1).values","45a27dfc":"gbm = xgb.XGBRegressor()\nreg_cv = GridSearchCV(gbm, {\"colsample_bytree\":[1.0],\"min_child_weight\":[1.0,1.2]\n                            ,'max_depth': [3,4,6], 'n_estimators': list(range(20, 101, 10))}, verbose=1)\nreg_cv.fit(X_train,y_train)","d6fd4fc8":"reg_cv.best_params_","d0de02b7":"gbm = xgb.XGBRegressor(**reg_cv.best_params_)\ngbm.fit(X_train,y_train)","1bf77f66":"predictions = gbm.predict(X_test)\npredictions","43eb26bd":"gbm.score(X_train,y_train)","97f132a5":"submission = pd.DataFrame({ 'Date': test['Date'],\n                            'Price': predictions })\nbase = train.tail(1)[\"Price\"]\nfor index, row in submission.iterrows():\n    base = base + row[\"Price\"]\n    submission.at[index, 'Price'] = base\n    \nsubmission.tail()","951987f0":"submission.to_csv(\"\/kaggle\/working\/submission.csv\", index=False)","040854f0":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\ndef show_price_chart(df1,df2):\n    plt.figure(figsize=(10,6))\n    plt.style.use('ggplot')\n \n    plt.plot([x for x in df1.index], df1[\"Price\"],lw=1, color=\"black\",label=\"Actual values\")\n    plt.plot([x for x in df2.index], df2[\"Price\"],lw=1, color=\"red\",label=\"Xgboost prediction\")\n    plt.legend(loc='best')\n    plt.title('Actual and Predicted values')\n    plt.xlabel('Date')\n    plt.ylabel('Price')\n    xmin = df1.index[0]\n    xmax = df1.index[-1]\n    \n    plt.ylim(0, 80)\n    plt.xlim(xmin, xmax)\n    plt.show()","b7575b04":"df_plt = pd.DataFrame({ 'Date': test['Date'],\n                        'Price': submission['Price'] })\n\ndf1 = pd.concat([train, test])\nshow_price_chart(df1,submission)","9d60532e":"Make X and y for train and test data","432cd87f":"Predict","94a79adc":"show chart","c2e65bc0":"Import Libraries and data","284a7f61":"Creating Submission file","a1e536c2":"Train data using XGBRegressor with best parameter","c64e8dfd":"Evaluate score","a5488aa4":"Use GridSearch for searching best hyperparameter\nModel: XGBRegressor","de3c984f":"Define some method for pre processing.\ndummy_date: Spliting \"Date\" features into \"year\",\"month\",\"day\" as categorical features\nLabelEncord_categorical: Label Encording for \"year\",\"month\",\"day\" features\ndummies: Tried to get dummies for \"year\",\"month\",\"day\" features"}}