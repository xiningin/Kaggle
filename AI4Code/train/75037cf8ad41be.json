{"cell_type":{"2b2e9e08":"code","328b8ab4":"code","53d0d182":"code","9f654c6f":"code","62538f8b":"code","060f22a4":"code","039b6912":"code","3ec37a82":"code","42cca88f":"code","62b5f7cd":"code","27fd1907":"code","2eb21ede":"code","b1f9ccbd":"code","fbf10d44":"code","b63139db":"code","23c8d2d9":"code","4f22b45e":"code","5bc89869":"code","37fd28cf":"code","49444154":"code","f82533c6":"code","9630aec9":"code","20aebce9":"code","ca196a1c":"code","d85002e7":"code","70a72892":"code","2274fa19":"code","bf855812":"code","a955d6da":"code","933e672e":"code","edcfee6c":"code","208052e2":"code","5eacaf0b":"code","e619c292":"code","dca66fbb":"code","a7326683":"code","0d03c270":"code","12826cca":"code","7513f34d":"code","15b5be3a":"code","560ecacb":"code","476b564b":"code","15396c86":"code","e174a133":"code","3306e2d2":"code","aa058573":"code","41ff2ce9":"code","f057d97c":"code","bf29a33d":"code","076f65e2":"code","ba8ef081":"code","80cae17e":"code","a23976e5":"code","5a7c6a60":"code","6455edfa":"code","dbad190e":"code","18d3271c":"code","d38eb2d1":"code","b92f4f3a":"code","afd94803":"code","776dee52":"code","fb7bcc75":"code","8c687cee":"code","b2c741b5":"code","47a94a16":"code","dc9006d1":"code","cb0dcf09":"code","f907bbf2":"code","1947016f":"code","83d25abc":"code","53f3bfed":"code","78e706f4":"code","68f62b27":"code","bc9e4868":"code","b120c83a":"code","d99b964d":"code","d6d6c5dd":"code","aed02a01":"code","3b044289":"code","69adb130":"code","fb448894":"code","1b7009b8":"code","e99bc522":"code","b1631a45":"code","9eff1bd6":"code","b181b014":"code","ee0821b9":"markdown","8bd77b4c":"markdown","ce5e0638":"markdown","6daa9100":"markdown","f179a65f":"markdown","76e6cc9f":"markdown","0976b282":"markdown","c37c46ea":"markdown","bba12272":"markdown","7c7c12cf":"markdown","13a8e5a6":"markdown","1098ee82":"markdown","7b7ffa3a":"markdown","8051eec3":"markdown","740ca3d8":"markdown","4796760d":"markdown","a15098c8":"markdown","5f4cb668":"markdown","bc23594e":"markdown","e2f67342":"markdown","9d08d021":"markdown","23e1b076":"markdown","62a707db":"markdown","ddb0538c":"markdown","e6b6d207":"markdown","681e9f3d":"markdown","9776913d":"markdown","5801516a":"markdown","3d850fd9":"markdown","3a81da2d":"markdown","36619973":"markdown","f73b5cd7":"markdown","93cb2463":"markdown","98ad2d98":"markdown","09c275b6":"markdown","e0edf4b2":"markdown","8cad0b98":"markdown","2fc7f111":"markdown","ba72b354":"markdown","c43d9408":"markdown","ff2c5120":"markdown","8402a60b":"markdown","e2c8b632":"markdown","ca7f4dde":"markdown","9937f86f":"markdown","05211b6c":"markdown","ca7eeeba":"markdown","454d16a0":"markdown","a77c8ef6":"markdown","1f0d03dd":"markdown","d1bdee51":"markdown","2274c02b":"markdown","dea0cde5":"markdown","e680a252":"markdown","bba3a9e4":"markdown","d975cd4d":"markdown","813cfa9d":"markdown","703b8519":"markdown","c35a4ad9":"markdown","b5803bf1":"markdown","4bad41e3":"markdown","b6b9665d":"markdown","dc994803":"markdown","df27a72f":"markdown","987398e4":"markdown","3123451e":"markdown","f7d5a10a":"markdown","2333d294":"markdown"},"source":{"2b2e9e08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","328b8ab4":"books= pd.read_csv('\/kaggle\/input\/goodbooks-10k\/books.csv',error_bad_lines = False)","53d0d182":"books.head()","9f654c6f":"books.shape","62538f8b":"ratings = pd.read_csv('\/kaggle\/input\/goodbooks-10k\/ratings.csv')\n\nratings.head()","060f22a4":"tags = pd.read_csv('\/kaggle\/input\/goodbooks-10k\/book_tags.csv')\ntags.tail()","039b6912":"btags = pd.read_csv('\/kaggle\/input\/goodbooks-10k\/tags.csv')\nbtags.tail()","3ec37a82":"ratings=ratings.sort_values(\"user_id\")\nratings.shape","42cca88f":"ratings.drop_duplicates(subset =[\"user_id\",\"book_id\"], \n                     keep = False, inplace = True) \nratings.shape","62b5f7cd":"print(books.shape)\nbooks.drop_duplicates(subset='original_title',keep=False,inplace=True)\nprint(books.shape)","27fd1907":"print(btags.shape)\nbtags.drop_duplicates(subset='tag_id',keep=False,inplace=True)\nprint(btags.shape)","2eb21ede":"print(tags.shape)\ntags.drop_duplicates(subset=['tag_id','goodreads_book_id'],keep=False,inplace=True)\nprint(tags.shape)","b1f9ccbd":"joint_tags=pd.merge(tags,btags,left_on='tag_id',right_on='tag_id',how='inner')","fbf10d44":"top_rated=books.sort_values('average_rating', ascending=False)\ntop10=top_rated.head(10)\nf=['title','small_image_url']\ndispl=(top10[f])\ndispl.set_index('title', inplace=True)\n","b63139db":"from IPython.display import Image, HTML\n\ndef path_to_image_html(path):\n    '''\n     This function essentially convert the image url to \n     '<img src=\"'+ path + '\"\/>' format. And one can put any\n     formatting adjustments to control the height, aspect ratio, size etc.\n     within as in the below example. \n    '''\n\n    return '<img src=\"'+ path + '\"\"\/>'\n\nHTML(displ.to_html(escape=False ,formatters=dict(small_image_url=path_to_image_html),justify='center'))","23c8d2d9":"pop10=books.sort_values(by='ratings_count', ascending=False)\nf=['title','small_image_url']\npop10=pop10.head(10)\n\npop10=(pop10[f])\npop10=pop10.set_index('title')","4f22b45e":"HTML(pop10.to_html(escape=False ,formatters=dict(small_image_url=path_to_image_html),justify='center'))","5bc89869":"import seaborn as sns\nplt.figure(figsize=(16,8))\nsns.distplot(a=books['average_rating'], kde=True, color='r')","37fd28cf":"no_of_ratings_per_book=ratings.groupby('book_id').count()","49444154":"no_of_ratings_per_book","f82533c6":"plt.figure(figsize=(16,8))\nsns.distplot(a=no_of_ratings_per_book['rating'], color='g')","9630aec9":"books.head(2)","20aebce9":"f=['authors', 'average_rating']\ntop_authors=top_rated[f]\ntop_authors=top_authors.head(20)","ca196a1c":"fig = px.bar(top_authors, x='authors', y='average_rating', color ='average_rating')\nfig.show()","d85002e7":"p=joint_tags.groupby('tag_name').count()","70a72892":"p=p.sort_values(by='count', ascending=False)\np","2274fa19":"genres=[\"Art\", \"Biography\", \"Business\", \"Chick Lit\", \"Children's\", \"Christian\", \"Classics\", \"Comics\", \"Contemporary\", \"Cookbooks\", \"Crime\", \"Ebooks\", \"Fantasy\", \"Fiction\", \"Gay and Lesbian\", \"Graphic Novels\", \"Historical Fiction\", \"History\", \"Horror\", \"Humor and Comedy\", \"Manga\", \"Memoir\", \"Music\", \"Mystery\", \"Nonfiction\", \"Paranormal\", \"Philosophy\", \"Poetry\", \"Psychology\", \"Religion\", \"Romance\", \"Science\", \"Science Fiction\", \"Self Help\", \"Suspense\", \"Spirituality\", \"Sports\", \"Thriller\", \"Travel\", \"Young Adult\"]\nfor i in range(len(genres)):\n    genres[i]=genres[i].lower()","bf855812":"new_tags=p[p.index.isin(genres)]","a955d6da":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(\n            x=new_tags['count'],\n            y=new_tags.index,\n            orientation='h'))\n\nfig.show()","933e672e":"fig = px.line(books, y=\"books_count\", x=\"average_rating\", title='Book Count VS Average Rating')\nfig.show()","edcfee6c":"dropna= books.dropna()\nfig = px.treemap(dropna, path=['original_publication_year','language_code', \"average_rating\"],\n                  color='average_rating')\nfig.show()","208052e2":"books['length-title']=books['original_title'].str.len()","5eacaf0b":"plt.figure(figsize=(16,8))\nsns.regplot(x=books['length-title'], y=books['average_rating'])","e619c292":"from wordcloud import WordCloud, STOPWORDS \ntext = new_tags.index.values \n\nwordcloud = WordCloud().generate(str(text))\nplt.figure(figsize = (8, 8), facecolor = None)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","dca66fbb":"books.columns","a7326683":"to_read=pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/to_read.csv\")\nto_r= books.merge(to_read, left_on='book_id', right_on='book_id', how='inner')","0d03c270":"to_r=to_r.groupby('original_title').count()","12826cca":"to_r=to_r.sort_values(by='id', ascending=False)\nto_r20=to_r.head(20)","7513f34d":"fig = px.bar(to_r20, x=to_r20.index, y='id', color ='id')\nfig.show()","15b5be3a":"to_read1=to_read.groupby('user_id').count()","560ecacb":"from collections import Counter\nc=Counter(list(to_read1['book_id']))","476b564b":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=list(c.keys()), y=list(c.values()),\n    mode='markers')\n])\n\nfig.show()","15396c86":"fillnabooks= books.fillna('')","e174a133":"def clean_data(x):\n        return str.lower(x.replace(\" \", \"\"))","3306e2d2":"features=['original_title','authors','average_rating']\nfillednabooks=fillnabooks[features]","aa058573":"fillednabooks = fillednabooks.astype(str)\nfillednabooks.dtypes","41ff2ce9":"for feature in features:\n    fillednabooks[feature] = fillednabooks[feature].apply(clean_data)\n    \nfillednabooks.head(2)","f057d97c":"def create_soup(x):\n    return x['original_title']+ ' ' + x['authors'] + ' ' + x['average_rating']","bf29a33d":"fillednabooks['soup'] = fillednabooks.apply(create_soup, axis=1)","076f65e2":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(fillednabooks['soup'])\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","ba8ef081":"fillednabooks=fillednabooks.reset_index()\nindices = pd.Series(fillednabooks.index, index=fillednabooks['original_title'])","80cae17e":"def get_recommendations_new(title, cosine_sim=cosine_sim2):\n    title=title.replace(' ','').lower()\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return list(books['original_title'].iloc[movie_indices])","a23976e5":"l=get_recommendations_new('The Hobbit', cosine_sim2)\nfig = go.Figure(data=[go.Table(header=dict(values=l,fill_color='orange'))\n                     ])\nfig.show()","5a7c6a60":"l=get_recommendations_new('Harry Potter and The Chamber of Secrets', cosine_sim2)\nfig = go.Figure(data=[go.Table(header=dict(values=l,fill_color='orange'))\n                     ])\nfig.show()","6455edfa":"usecols=['book_id', 'original_title']\nbooks_col=books[usecols]","dbad190e":"books_col.dropna()","18d3271c":"from scipy.sparse import csr_matrix\n# pivot ratings into movie features\ndf_book_features = ratings.pivot(index='book_id',columns='user_id',values='rating').fillna(0)\nmat_book_features = csr_matrix(df_book_features.values)","d38eb2d1":"df_book_features.head()","b92f4f3a":"from sklearn.neighbors import NearestNeighbors\nmodel_knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)\n\n\nnum_users = len(ratings.user_id.unique())\nnum_items = len(ratings.book_id.unique())\nprint('There are {} unique users and {} unique movies in this data set'.format(num_users, num_items))","afd94803":"ratings=ratings.dropna()","776dee52":"df_ratings_cnt_tmp = pd.DataFrame(ratings.groupby('rating').size(), columns=['count'])\ndf_ratings_cnt_tmp.head(10)","fb7bcc75":"total_cnt = num_users * num_items\nrating_zero_cnt = total_cnt - ratings.shape[0]\n\ndf_ratings_cnt = df_ratings_cnt_tmp.append(\n    pd.DataFrame({'count': rating_zero_cnt}, index=[0.0]),\n    verify_integrity=True,\n).sort_index()\ndf_ratings_cnt","8c687cee":"import numpy as np\ndf_ratings_cnt['log_count'] = np.log(df_ratings_cnt['count'])\ndf_ratings_cnt\n\nimport matplotlib.pyplot as plt\n\n\nget_ipython().run_line_magic('matplotlib', 'inline')\nax = df_ratings_cnt[['count']].reset_index().rename(columns={'index': 'rating score'}).plot(\n    x='rating score',\n    y='count',\n    kind='bar',\n    figsize=(12, 8),\n    title='Count for Each Rating Score (in Log Scale)',\n    logy=True,\n    fontsize=12,color='black'\n)\nax.set_xlabel(\"book rating score\")\nax.set_ylabel(\"number of ratings\")\n\n","b2c741b5":"df_books_cnt = pd.DataFrame(ratings.groupby('book_id').size(), columns=['count'])\ndf_books_cnt.head()","47a94a16":"#now we need to take only books that have been rated atleast 60 times to get some idea of the reactions of users towards it\n\npopularity_thres = 60\npopular_movies = list(set(df_books_cnt.query('count >= @popularity_thres').index))\ndf_ratings_drop = ratings[ratings.book_id.isin(popular_movies)]\nprint('shape of original ratings data: ', ratings.shape)\nprint('shape of ratings data after dropping unpopular movies: ', df_ratings_drop.shape)","dc9006d1":"# get number of ratings given by every user\ndf_users_cnt = pd.DataFrame(df_ratings_drop.groupby('user_id').size(), columns=['count'])\ndf_users_cnt.head()","cb0dcf09":"ratings_thres = 50\nactive_users = list(set(df_users_cnt.query('count >= @ratings_thres').index))\ndf_ratings_drop_users = df_ratings_drop[df_ratings_drop.user_id.isin(active_users)]\nprint('shape of original ratings data: ', ratings.shape)\nprint('shape of ratings data after dropping both unpopular movies and inactive users: ', df_ratings_drop_users.shape)\n","f907bbf2":"book_user_mat = df_ratings_drop_users.pivot(index='book_id', columns='user_id', values='rating').fillna(0)\nbook_user_mat","1947016f":"\nbook_user_mat_sparse = csr_matrix(book_user_mat.values)\n","83d25abc":"book_user_mat_sparse","53f3bfed":"model_knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)\n# fit\nmodel_knn.fit(book_user_mat_sparse)","78e706f4":"from fuzzywuzzy import fuzz\n\n\n# In[24]:\n\n\ndef fuzzy_matching(mapper, fav_book, verbose=True):\n    \"\"\"\n    return the closest match via fuzzy ratio. \n    \n    Parameters\n    ----------    \n    mapper: dict, map movie title name to index of the movie in data\n    fav_movie: str, name of user input movie\n    \n    verbose: bool, print log if True\n    Return\n    ------\n    index of the closest match\n    \"\"\"\n    match_tuple = []\n    # get match\n    for title, idx in mapper.items():\n        ratio = fuzz.ratio(title.lower(), fav_book.lower())\n        if ratio >= 60:\n            match_tuple.append((title, idx, ratio))\n    # sort\n    match_tuple = sorted(match_tuple, key=lambda x: x[2])[::-1]\n    if not match_tuple:\n        print('Oops! No match is found')\n        return\n    if verbose:\n        print('Found possible matches in our database: {0}\\n'.format([x[0] for x in match_tuple]))\n    return match_tuple[0][1]","68f62b27":"def make_recommendation(model_knn, data, mapper, fav_book, n_recommendations):\n    \"\"\"\n    return top n similar book recommendations based on user's input book\n    Parameters\n    ----------\n    model_knn: sklearn model, knn model\n    data: book-user matrix\n    mapper: dict, map book title name to index of the book in data\n    fav_book: str, name of user input book\n    n_recommendations: int, top n recommendations\n    Return\n    ------\n    list of top n similar book recommendations\n    \"\"\"\n    # fit\n    model_knn.fit(data)\n    # get input movie index\n    print('You have input book:', fav_book)\n    idx = fuzzy_matching(mapper, fav_book, verbose=True)\n    \n    print('Recommendation system starting to make inference')\n    print('......\\n')\n    distances, indices = model_knn.kneighbors(data[idx], n_neighbors=n_recommendations+1)\n    \n    raw_recommends =         sorted(list(zip(indices.squeeze().tolist(), distances.squeeze().tolist())), key=lambda x: x[1])[:0:-1]\n    # get reverse mapper\n    reverse_mapper = {v: k for k, v in mapper.items()}\n    # print recommendations\n    print('Recommendations for {}:'.format(fav_book))\n    rec=[]\n    for i, (idx, dist) in enumerate(raw_recommends):\n        if idx not in reverse_mapper.keys():\n            continue\n        print('{0}: {1}, with distance of {2}'.format(i+1, reverse_mapper[idx], dist))\n        rec.append(reverse_mapper[idx])\n    return rec","bc9e4868":"my_favorite = 'To Kill a Mockingbird'\nindices = pd.Series(books_col.index, index=books_col['original_title'])","b120c83a":"make_recommendation(\n    model_knn=model_knn,\n    data=book_user_mat_sparse,\n    fav_book=my_favorite,\n    mapper=indices,\n    n_recommendations=10)","d99b964d":"make_recommendation(\n    model_knn=model_knn,\n    data=book_user_mat_sparse,\n    fav_book='Harry Potter and the Chamber of Secrets',\n    mapper=indices,\n    n_recommendations=10)","d6d6c5dd":"rec=make_recommendation(\n    model_knn=model_knn,\n    data=book_user_mat_sparse,\n    fav_book='Gone Girl',\n    mapper=indices,\n    n_recommendations=10)","aed02a01":"rec=make_recommendation(\n    model_knn=model_knn,\n    data=book_user_mat_sparse,\n    fav_book='Divergent',\n    mapper=indices,\n    n_recommendations=10)","3b044289":"rec=make_recommendation(\n    model_knn=model_knn,\n    data=book_user_mat_sparse,\n    fav_book='Kafka on the Shore',\n    mapper=indices,\n    n_recommendations=10)","69adb130":"rec=make_recommendation(\n    model_knn=model_knn,\n    data=book_user_mat_sparse,\n    fav_book='Kafka on the Shore',\n    mapper=indices,\n    n_recommendations=10)","fb448894":"netflix=pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\nnetflix.head()","1b7009b8":"netflix.shape","e99bc522":"books['original_title']=books['original_title'].str.lower()\nnetflix['title']=netflix['title'].str.lower()","b1631a45":"t=netflix.merge(books, left_on='title', right_on='original_title', how=\"inner\")","9eff1bd6":"t.shape","b181b014":"import plotly.graph_objects as go\n\nlabels = ['Shows from books','Shows not from books']\nvalues = [193,6234]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","ee0821b9":"Fitting the model","8bd77b4c":"849 rows removed.","ce5e0638":"**Most Common Rating Values**","6daa9100":"Lets check for the books dataset as well.","f179a65f":"**Highly rated authors**","76e6cc9f":"Cool, so there are no duplicates in the book_tags dataset.","0976b282":"![Books](https:\/\/images.unsplash.com\/photo-1524578271613-d550eacf6090?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80)","c37c46ea":"Importing count vectorizer for term frequencies.","bba12272":"Analysis of number of books in \"to read\" category of a user.","7c7c12cf":"# Importing Data","13a8e5a6":"# An analysis of the Books dataset with recommendations and visualizations.","1098ee82":"Hardcoding some basic genres","7b7ffa3a":"Upvote if you like the kernel! \ud83d\ude03","8051eec3":"In this digital world, one form of entertainment remains constant and will always be,Books. Movies and TV shows produce a sense of instant gratification releasing dopamine which regulates bodily movements like pleasure. It not only makes us lazy but also reliant on these digital forms of entertainment. Whereas when you read a book, you have to fully indulge into it and instant entertainment will not be available. It keeps your mind running and faciliates your thinking. Read books!","740ca3d8":"Using fuzzy logic to get nearest distance.","4796760d":"# **How many Netflix Shows\/ Movies are made from books as their storylines?**","a15098c8":"There's a lot of fiction present, but not a lot of cookbooks! Makes sense.","5f4cb668":"# INDEX\n\n1. [Cleaning the data](#Cleaning-the-data,-removing-duplicates)\n2. [Visualizing books data](#Visualizing-data)\n3. [Recommendation system](#Recommendation-System)\n4. [Content- Based Recommendation system](#1.-Content-Based)\n5. [Collaborative Filtering Recommendation System(User Based)](#2.-Collaborative-Filtering)\n6. [How many Netflix Shows\/ Movies are made from books as their storylines?](#How-many-Netflix-Shows\/-Movies-are-made-from-books-as-their-storylines?)","bc23594e":"![Recco](https:\/\/www.mathworks.com\/matlabcentral\/mlc-downloads\/downloads\/submissions\/67630\/versions\/6\/screenshot.png)","e2f67342":"Weirdly, it is seen that the average_rating increases with increases in number of editions of the book, but decreases after the count reaches about 2500. So, more is the number of editions, less is the average_rating.","9d08d021":"# 2. Collaborative Filtering","23e1b076":"**Analysing the relation between no of editions and ratings**","62a707db":"So, the highly rated books have rather short titles. The graph shows that a straight line can be plotted but very approximately to say that as the length of title increases, the rating remains constant (at around 4).","ddb0538c":"![](https:\/\/www.researchgate.net\/profile\/Bouikhalene_Belaid\/publication\/286477914\/figure\/fig3\/AS:357048207331339@1462138334848\/The-Majority-Voting-KNN-K6.png)","e6b6d207":"Therefore, the most common rating is somewhere between 3.5 to 4.","681e9f3d":"193 out of 6234 netflix shows are made from books.","9776913d":"Creating a \"soup\" or a \"bag of words\" for all rows.","5801516a":"**Do readers prefer short titles or long titles?**","3d850fd9":"Thus, a lot of books were publish in the year 2011, and most of them were in English.","3a81da2d":"The book_count column is also available in the dataset and even though the dataset description said it was the number of editions,I was unsure what that really meant. After some research, it was clear that this was the count of all editions, translations and formats available for the books (Kindle, Paperbacks, Hard Copies etc).\n","36619973":"**Finding popular genres and books available for those.**","f73b5cd7":"# Recommendation System","93cb2463":"While i was learning about collaborative recommendation systems, I noticed that a lot of kernels here on kaggle are really just content based recommendation systems but are titled as collaborative. ","98ad2d98":"**Top 10 most popular books**","09c275b6":"A recommendation engine filters the data using different algorithms and recommends the most relevant items to users. There are two types of recommendation systems:\n* Content Based : This approach analyzes the available content and find similarities between them and then recommendations the items obtained that have a high similarity.\n* Collaborative : This approach mines or analyzes the information about users who prefer the same content and recommend the items that similar users prefer.","e0edf4b2":"Only extracting features from given data,","8cad0b98":"Time to check!","2fc7f111":"Therefore, 4487 duplicates were present in the data, that have been removed.","ba72b354":"Cleaning the data - making all the words lower case","c43d9408":"Both content based and collaborative filtering recommendation systems are implemented. I am also implementing a plotly-dash based interface for the same :)","ff2c5120":"Here is the User Interface for a book recommendation engine. Content based filtering is used because collaborative filtering requires massive storage space.\n\nClick on the below image for the link to the repo.\n\n[![image.png](attachment:image.png)](https:\/\/github.com\/niharika412\/recommendation-dash-app)","8402a60b":"**Top Books users want to read**","e2c8b632":"**The data provided by the dataset is unclean, and they mention it clearly in the dataset description, if you wish to skip the cleaning process, head on over to the clean data available in the description of the goodbooks dataset. If you like a good challenge, use this one!**","ca7f4dde":"The entire Netflix notebook can be found here : [Netflix Visualizations, Recommendations, EDA](https:\/\/www.kaggle.com\/niharika41298\/netflix-visualizations-recommendation-eda)","9937f86f":"![Content based diagram](https:\/\/miro.medium.com\/max\/828\/1*1b-yMSGZ1HfxvHiJCiPV7Q.png)","05211b6c":"The term fuzzy refers to things which are not clear or are vague.In boolean system truth value, 1.0 represents absolute truth value and 0.0 represents absolute false value. But in the fuzzy system, there is no logic for absolute truth and absolute false value. But in fuzzy logic, there is intermediate value too present which is partially true and partially false.\n\n\n![image.png](attachment:image.png)","ca7eeeba":"It is seen that most books have count of ratings greater than 80. That is alot of audience.","454d16a0":"Graph clearly shows that a lot of data is irrevelant and can be removed.","a77c8ef6":"Dropping users who have rated less than 50 times","1f0d03dd":"Creating Compressed sparse row matrix","d1bdee51":"So, tags are added by users and we dont have any keywords to classify the books as genres, I have hard coded the genres and checked if the tags contain those values. Credits to this approach go to : @philispp on kaggle.","2274c02b":"# 1. Content Based","dea0cde5":"**Word Cloud for tags used by readers.**","e680a252":"Content based filtering on the following factors:\n\n1. Title\n2. Authors\n3. Average rating\n","bba3a9e4":"The notebook contains visualizations, analysis and content based and collaborative filtering recommendation systems on the goodreads books dataset.","d975cd4d":"It can hereby be deduced that most readers keep 1 book in their to-read category and the curve decreases gradually with increase in number of users.","813cfa9d":"To explain collaborative filtering in simple words, consider the above users- User A and User B. \nUser A and User B are considered similar users because they often bought similar or the same books in the past. Now, User A bought the Deep Learning and Neural Networks books. Therefore, when User B browses for books, he will be recommended Deep Learning and Neural Networks because User A( who User B has common interests with) bought those.","703b8519":"# Visualizing data","c35a4ad9":"Top 10 rated books","b5803bf1":"Writing the recommendation function.","4bad41e3":"Thus, the model looks and works perfectly good.","b6b9665d":"![Collaborative Filtering](https:\/\/cdn-images-1.medium.com\/max\/1000\/0*gJ8CeGoD9IAHzSmb.png)","dc994803":"Above barplot shows the top rated authors. Bill Waterson is on the top with a whopping rating of 4.82!","df27a72f":"Here, K nearest neighbors algorithm is used to find the nearest book with least distance available.","987398e4":"The above is a case where the recommender could not find the book title in the data as it may have been dropped while data cleaning because it maybe had a null value, in such cases the recommender skips the book and moves forward, which is why there are only 8 recommendations for the book 'Kafka and the Shore'.","3123451e":"After counting all ratings, it is observed that a large amount of books are rated 0 or are unrated. These need to go!","f7d5a10a":"This data is very messy so dropping null values is crucial.","2333d294":"# Cleaning the data, removing duplicates"}}