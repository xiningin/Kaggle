{"cell_type":{"474eae7e":"code","ca084caa":"code","b68ad37f":"code","ebcb5ba4":"code","b451897e":"code","2ed723c8":"code","488d761c":"code","60dc9dd7":"code","2d707d58":"code","141e1465":"code","55e11c14":"code","b7b37844":"code","e15258f0":"code","000b85c5":"code","2f7585a9":"code","06219fd1":"code","1a8d7011":"code","3a5f6355":"code","1dd329ae":"code","2c3829fd":"code","0ce5a32f":"code","1791ff4a":"code","196b3c48":"code","dafe7899":"code","8f617101":"markdown","b1e0225f":"markdown","a2600074":"markdown","b20e1df6":"markdown","676908fc":"markdown","21291c77":"markdown","9cc883b0":"markdown","bbe4719e":"markdown","0d3255b5":"markdown","b08884f3":"markdown","fac66959":"markdown","7f8301d5":"markdown","40df42bd":"markdown","9a4d1a07":"markdown","0fe2633d":"markdown","275defea":"markdown","c98980ff":"markdown","c4c7cbdd":"markdown"},"source":{"474eae7e":"from IPython.core.display import HTML\nstyles = '''@import url('https:\/\/fonts.googleapis.com\/css?family=Quicksand&display=swap');\n * {\n\t margin: 0;\n\t padding: 0;\n\t box-sizing: border-box;\n}\n h3 {\n\t font-family: Comic Sans MS;\n}\n .alert {\n\t width: 80%;\n\t margin: 20px auto;\n\t padding: 30px;\n\t position: relative;\n\t border-radius: 5px;\n\t box-shadow: 0 0 15px 5px #ccc;\n}\n .close {\n\t position: absolute;\n\t width: 30px;\n\t height: 30px;\n\t opacity: 0.5;\n\t border-width: 1px;\n\t border-style: solid;\n\t border-radius: 50%;\n\t right: 15px;\n\t top: 25px;\n\t text-align: center;\n\t font-size: 1.6em;\n\t cursor: pointer;\n}\n .simple-alert {\n\t background-color: #aed6e5;\n\t border-left: 5px solid #245b70;\n}\n .simple-alert .close {\n\t border-color: #245b70;\n\t color: #245b70;\n}\n .success-alert {\n\t background-color: #aee5c0;\n\t border-left: 5px solid #24703d;\n}\n .success-alert .close {\n\t border-color: #24703d;\n\t color: #24703d;\n}\n .danger-alert {\n\t background-color: #e5aeae;\n\t border-left: 5px solid #702424;\n}\n .danger-alert .close {\n\t border-color: #702424;\n\t color: #702424;\n}\n .warning-alert {\n\t background-color: #ffe6a9;\n\t border-left: 5px solid #a97800;\n}\n .warning-alert .close {\n\t border-color: #a97800;\n\t color: #a97800;\n}\n'''\nHTML(\"<style>\"+styles+\"<\/style>\")\n\n!pip install rich\nimport numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom rich.console import Console\nfrom rich.theme import Theme\nimport matplotlib.gridspec as gridspec\nimport matplotlib_venn as vplt\n\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\ndef custom_palette(custom_colors):\n    customPalette = sns.set_palette(sns.color_palette(custom_colors))\n    sns.palplot(sns.color_palette(custom_colors),size=0.8)\n    plt.tick_params(axis='both', labelsize=0, length = 0)\n\npalette = [\"#7209B7\",\"#3F88C5\",\"#136F63\",\"#F72585\",\"#FFBA08\"]\npalette2 = sns.diverging_palette(120, 220, n=20)\ncustom_palette(palette)\n\ncustom_theme = Theme({\n    \"info\" : \"italic bold cyan\",\n    \"warning\": \"italic bold magenta\",\n    \"danger\": \"bold blue\"\n})\n\nconsole = Console(theme=custom_theme)\nimport warnings\nwarnings.filterwarnings('ignore')","ca084caa":"df = pd.read_csv('..\/input\/those-features-won-t-engineer-themselves\/df_clean.csv')\ndf.head(2)","b68ad37f":"no_of_unique_users = set(df['white_username'].unique()).union(set(df['black_username']))\nprint(f'No of unique users in the dataset: {len(no_of_unique_users)}')","ebcb5ba4":"sns.kdeplot(df['rating_difference'],color=palette[0], shade=True)\nax = plt.gca()\nax.set_title('Rating_Difference',font=\"Serif\")\nax.xaxis.set_visible(False)","b451897e":"import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n \nfig = plt.figure(figsize =([15, 10]))\n \ngs = gridspec.GridSpec(3, 8)\ngs.update(wspace = 1.5, hspace = 0.3)\n\ndf_tournament = df[df['Is_tournament']==True] \ndf_tournanot = df[df['Is_tournament']==False]\n#Yeah, I ran out of feature names\n\nax0 = plt.subplot(gs[0:2, 0:3])\nax1 = plt.subplot(gs[0:2, 3:6],sharey=ax0)\nplt.setp(ax1.get_yticklabels(), visible=False)\nax3 = plt.subplot(gs[2,6:])\n\nplt.suptitle('Rating_Difference')\nsns.kdeplot(df_tournanot['rating_difference'],color=palette[4], shade=True, ax=ax0)\nsns.kdeplot(df_tournament['rating_difference'],color=palette[3], shade=True,ax=ax1)\nsns.countplot(df['Is_tournament'],ax=ax3)\nax0.set_title(\"Not Tournament\",font=\"Serif\")\nax1.set_title(\"Tournament\",font=\"Serif\")\nax0.axvline(df_tournanot['rating_difference'].quantile(0.95), color=palette[0],linestyle=':', linewidth=2)\nax1.axvline(df_tournament['rating_difference'].quantile(0.95), color=palette[1],linestyle=':', linewidth=2)\nax0.axvline(df_tournanot['rating_difference'].quantile(0.05), color=palette[0],linestyle=':', linewidth=2)\nax1.axvline(df_tournament['rating_difference'].quantile(0.05), color=palette[1],linestyle=':', linewidth=2)\nplt.show()","2ed723c8":"sns.countplot(df['time_class'])","488d761c":"df['lower_rated'] = df['rating_difference'].apply(lambda x: 'White' if x>0 else 'Black' )\nupsets_time_class = dict(df[(np.abs(df['rating_difference']) > 400) & (df['Result']==df['lower_rated'])]['time_class'].value_counts())\nwhole_time_class = dict(df['time_class'].value_counts()) ","60dc9dd7":"print(f\"Percentage of upsets in bullet: {(upsets_time_class['bullet']\/whole_time_class['bullet'])*100:.3f}\")\nprint(f\"Percentage of upsets in blitz: {(upsets_time_class['blitz']\/whole_time_class['blitz'])*100:.3f}\")\nprint(f\"Percentage of upsets in rapid: {(upsets_time_class['rapid']\/whole_time_class['rapid'])*100:.3f}\")\nprint(f\"Percentage of upsets in daily: {(upsets_time_class['daily']\/whole_time_class['daily'])*100:.3f}\")","2d707d58":"upsets_400_diff = len(df[(np.abs(df['rating_difference']) > 400) & (df['Result']==df['lower_rated'])])\nupsets_300_diff = len(df[(np.abs(df['rating_difference']) > 300) & (df['Result']==df['lower_rated'])])\nupsets_200_diff = len(df[(np.abs(df['rating_difference']) > 200) & (df['Result']==df['lower_rated'])])\nupsets_100_diff = len(df[(np.abs(df['rating_difference']) > 100) & (df['Result']==df['lower_rated'])])\nupsets_50_diff = len(df[(np.abs(df['rating_difference']) > 50) & (df['Result']==df['lower_rated'])])\nupsets_25_diff = len(df[(np.abs(df['rating_difference']) > 25) & (df['Result']==df['lower_rated'])])\nprint(f\"Percentage of 400 rating difference upsets: {(upsets_400_diff\/len(df))*100:.3f}\")\nprint(f\"Percentage of 300 rating difference upsets: {(upsets_300_diff\/len(df))*100:.3f}\")\nprint(f\"Percentage of 200 rating difference upsets: {(upsets_200_diff\/len(df))*100:.3f}\")\nprint(f\"Percentage of 100 rating difference upsets: {(upsets_100_diff\/len(df))*100:.3f}\")\nprint(f\"Percentage of 50 rating difference upsets: {(upsets_50_diff\/len(df))*100:.3f}\")\nprint(f\"Percentage of 25 rating difference upsets: {(upsets_25_diff\/len(df))*100:.3f}\")","141e1465":"fig, ax = plt.subplots(1,2,figsize=(20,10),sharex='all',sharey='all')\nsns.kdeplot(df['white_rating'],color=palette[4], shade=True, ax=ax[0])\nsns.kdeplot(df['black_rating'],color=palette[3], shade=True,ax=ax[1])","55e11c14":"sns.countplot(df['rated'])","b7b37844":"sns.countplot(y = df['result_type'],palette='tab10')","e15258f0":"temp = df[['result_type','rated']].copy()\ntemp = pd.DataFrame(temp.groupby('rated')['result_type'].value_counts(normalize=True))\nfig, ax = plt.subplots(1,2,figsize=(20,10),sharex='all',sharey='all')\nsns.heatmap(temp.T[1].T,ax=ax[0],cmap='BuPu',fmt='.2g',annot=True)\nsns.heatmap(temp.T[0].T,ax=ax[1],cmap='BuPu',fmt='.2g',annot=True)\nax[0].set_title('Rated',font=\"Serif\")\nax[0].xaxis.grid(False)\nax[0].xaxis.set_visible(False)\nax[1].set_title('Unrated',font=\"Serif\")\nax[1].xaxis.set_visible(False)\nax[1].yaxis.set_visible(False)","000b85c5":"import ast\nimport math\ndf.Moves = df.Moves.apply(lambda x: ast.literal_eval(x))\ndf['no_of_moves'] = df.Moves.apply(lambda x: math.floor(len(x)\/2))\nsns.histplot(x = df.no_of_moves,bins=50)\nprint('median is',df.no_of_moves.median())","2f7585a9":"df['White_first_move'] = df['Moves'].apply(lambda x: x[0] if len(x)!=0 else None)\ndf['Black_first_move'] = df['Moves'].apply(lambda x: x[1] if len(x)!=0 and len(x)!=1 else None)\ndf['White_second_move'] = df['Moves'].apply(lambda x: x[2] if len(x)!=0 and len(x)!=1 and len(x)!=2 else None)\n\nfig, ax = plt.subplots(1,2,figsize=(20,10))\n \n# ax1.set_ylabel('ylabel', labelpad = 0, fontsize = 12)\ntemp_df = pd.DataFrame(df.White_first_move.value_counts().nlargest(5))\nsns.barplot(y = temp_df.index, x = temp_df.White_first_move, ax = ax[0])\n \n# ax2.set_ylabel('ylabel', labelpad = 0, fontsize = 12)\ntemp_df = pd.DataFrame(df.Black_first_move.value_counts().nlargest(5))\nsns.barplot(y = temp_df.index, x = temp_df.Black_first_move, ax = ax[1])\n\nax[0].set_title('White_first_move',font=\"Serif\")\nax[0].xaxis.grid(False)\nax[0].xaxis.set_visible(False)\nax[1].set_title('Black_first_move',font=\"Serif\")\nax[1].xaxis.set_visible(False)","06219fd1":"fig, ax = plt.subplots(1,2,figsize=(20,10))\n \n# ax1.set_ylabel('ylabel', labelpad = 0, fontsize = 12)\ntemp_df = pd.DataFrame(df[df.White_first_move=='e4'].Black_first_move.value_counts().nlargest(5))\nsns.barplot(y = temp_df.index, x = temp_df.Black_first_move, ax = ax[0])\n \n# ax2.set_ylabel('ylabel', labelpad = 0, fontsize = 12)\ntemp_df = pd.DataFrame(df[df.White_first_move=='d4'].Black_first_move.value_counts().nlargest(5))\nsns.barplot(y = temp_df.index, x = temp_df.Black_first_move, ax = ax[1])\n\nax[0].set_title('Black_moves_against_e4',font=\"Serif\")\nax[0].xaxis.grid(False)\nax[0].xaxis.set_visible(False)\nax[1].set_title('Black_moves_against_d4',font=\"Serif\")\nax[1].xaxis.set_visible(False)","1a8d7011":"temp_df = pd.DataFrame(df.Moves.value_counts())\ntemp_df = temp_df.reset_index().rename(columns = {'Moves':'no_of_occurences', 'index':'Moves'})\nprint('No. of games played',len(df))\nprint('No. of unique positions reached',len(temp_df))","3a5f6355":"def is_checkmate(Moves_list):\n    if(len(Moves_list) == 0):\n        return False\n    last_move = Moves_list[-1]\n    return last_move[-1]=='#'\ntemp_df['Was_checkmate'] = temp_df['Moves'].apply(is_checkmate)","1dd329ae":"for mistake in temp_df[temp_df['Was_checkmate']].head(10).Moves:\n    print('  '.join(mistake))","2c3829fd":"sns.barplot(x = df.EcoName.value_counts().nlargest(10), y = df.EcoName.value_counts().nlargest(10).index)","0ce5a32f":"Opening_codes_to_names = {'A00' : 'Irregular Openings',\n                         'B01' : 'Scandinavian Defence',\n                         'A40' : \"Queen's Pawn Game(Atypical Defenses)\",\n                         'D00' : \"Queen's Pawn Game(1.d4 1.d5)\",\n                         'C00' : \"French Defence\",\n                         'B00' : \"King's Pawn Opening(Atypical Defenses)\",\n                         'C20' : \"King's Pawn Game(1.e4 1.e5)\", \n                         'B20' : \"Sicilian Defence\",\n                         'C41' : \"Philidor Defence\",\n                         'B07' : \"Pirc Defence\"}","1791ff4a":"df.Eco_Temp = df.Eco.map(Opening_codes_to_names).copy()\nsns.barplot(x = df.Eco_Temp.value_counts().nlargest(10), y = df.Eco_Temp.value_counts().nlargest(10).index)","196b3c48":"sns.countplot(df.Result)","dafe7899":"df.to_csv('output_EDA.csv',index=False)","8f617101":"The lines you see in the plot, are the .95 and .05 quantiles.<br>\nWe have proved our above hypothesis, that in case of Tournament games, there are more games with unbalance in rating between players.","b1e0225f":"The rating_difference is almost normal distribution. This makes sense, as usually Computer sets up match for you, and you are usually given people who are in your rating level to play with. In tournaments however, this is not the case, where the pairing happens not on the basis of rating, but on the basis of you position in the leaderboard","a2600074":"![](https:\/\/kgcorner.com\/wp-content\/uploads\/2021\/05\/fq4cqqdmz4jv9agitg72.jpeg)\n# Exploratory Data Analysis","b20e1df6":"This represents the same as I stated above<br>\n* e5(Open Games) and c5(Sicilian Defence) against e4\n* d5(Closed Games) and Nf6(Modern Openings like, Kings Indian Defence)\n<br>\nThese are the most common choice of black against the move White plays","676908fc":"White and Black ratings have identical distribution. The graph is skewed to the left.","21291c77":"![](https:\/\/www.researchgate.net\/publication\/344404859\/figure\/fig1\/AS:963465715937314@1606719535864\/Heavy-fat-and-long-versus-thin-and-short-tails-The-value-of-the-random-variable.png)","9cc883b0":"As we thought, When we move from Rated games to Unrated, we see an increase in the percentage of resignations.","bbe4719e":"The most common first moves by white is either e4 or d4.<br>\ne5(Open Game) and c5(Sicilian Defence) is usually played as a response to e4.<br> d5 is usually played against d4.","0d3255b5":"These are the most common mistakes that a person can do, that results in a quick checkmate. <br>\nAs you can see most of these end with Q takes on f7.<br>\n![f7 chess](https:\/\/www.thechesswebsite.com\/wp-content\/uploads\/2012\/07\/attackf7-big.jpg)<br>\nEvery other pawn is defended twice at the starting of the game except the f7 pawn, and so White players usually try to take advantage of this fact and checkmate you on f7.\n<div class=\"alert simple-alert\">\nSo next time you play chess take special care to protect your f7 pawn.\n<\/div>\n\n","b08884f3":"Most of the chess.com users like to play rated.<br>\nDue to this finding unrated games is takes longer time, due to which most players tend to only play rated.<br>\nWhen the games are unrated, people tend to resign in losing positions more often, as they won't lose any ELO points.<br>","fac66959":"**bullet:-** here players have 1 or 3 minutes in their clock, and so they have to play really fast, it is the shortest time format.<br>\n**blitz:-** here players have 3 to 10 minutes in their clock, and so they have to play fast, they still get time to think, but not enough to think long sequences.<br>\n**rapid:-** here players have from 10 to infinite time in their clock, so they can play really carefully, and think out many steps ahead (Sherlock style!!!).\n**daily:-** In these type of games, the game stretches over days, where a player gets 1 day or more to make a move. The person can analyze a lot moves ahead, and play really carefully.","7f8301d5":"Here you can see, \n* Irregular Openings takes first place, which makes sense. As a lot of new players don't know the concept of openings and play unusual moves.\n* A lot of people play Scandinavian Defence in our Dataset. I have faced a few but not a lot of them. Instead Sicilian Defence and French Defence are more common in my experience.","40df42bd":"Does the increase in the number of upsets in daily mean something?<br>\nDoes it indicate that people tend to cheat in daily, or does it mean that lower rated players when give a lot of time to play a move, tend to perform better.<br>\nUpsets, and particularly games where a player cheated can be bad for our model.","9a4d1a07":"Finally the results (our target variable).<br>\n**Chess is a balanced game**<br>\nThere is a lot of symmetry, and so the person who moves first (White) usually has an advantage. That's why if a black player has to win he usually tries to play a unsymmetrical opening (like Sicilian Defence) and tries to create an unbalance in the game to create some winning chances.","0fe2633d":"On an average No of Moves played is 29 Moves with a left skewness.","275defea":"In case of time controls with more time, like daily and rapid, people have more time to use chess engines i.e. to cheat. So number of upsets must be more in rapid and daily time controls.<br>\nAlthough with more time, player with the higher rating should be able to make less mistake, and with his superior play win more.<br>\nThe higher rated player would in shorter time formats like bullet and blitz make more mistakes, and lose more to lower rated player due to silly mistakes.<br>","c98980ff":"To check this, we first need to create define upset.<br>\nAccording to chess statistics, If the rating difference is 400 points, then the higher rated player has 90% of winning the game.<br>\nSo lets say if with a 400 point difference, the lower rated player wins, it is a upset.","c4c7cbdd":"# Do upvote if you found this to be a good read!! This is still a work in progress\n**Regarding the design a lot of inspiration (specially color palette) has been taken from Ruchi Bhatia, and Andrada Olteanu. So special thanks to them!!**<br>\nYou can check these notebooks of theirs\n* [Commonlit readability prize eda baseline](https:\/\/www.kaggle.com\/ruchi798\/commonlit-readability-prize-eda-baseline)\n* [G2net searching the sky pytorch effnet w meta](https:\/\/www.kaggle.com\/adityajha1504\/g2net-searching-the-sky-pytorch-effnet-w-meta\/edit)"}}