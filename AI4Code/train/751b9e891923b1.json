{"cell_type":{"ef497d6e":"code","69346903":"code","342a5f05":"code","ae30f5c4":"code","9d5d2f04":"code","b4a733e8":"code","ce209855":"code","85784d0a":"code","48643ec1":"code","9d2c909b":"code","16e1b4a8":"code","c155df91":"code","106100e8":"code","0a381a89":"code","a50ffe57":"code","568e67ce":"code","1a87276b":"code","40406fc2":"code","8bb6a52d":"code","ae548150":"code","e3a9a315":"code","02384f9c":"code","27ca6b16":"code","e8eafb0e":"code","f3680c30":"code","8db61e24":"code","c701702c":"code","8ae8496e":"code","5efb2532":"code","c6bf438d":"code","92b01597":"code","38a510c1":"markdown","2b1e30b3":"markdown"},"source":{"ef497d6e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import iplot\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.svm import SVC\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import RocCurveDisplay\nimport tensorflow as tf\nfrom tensorflow import keras\n%matplotlib inline","69346903":"pip install autoviz","342a5f05":"df=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.head()","ae30f5c4":"df.shape","9d5d2f04":"df.info()","b4a733e8":"df['diagnosis'].value_counts()","ce209855":"df.drop('id',axis=1,inplace=True)","85784d0a":"df.head(1)","48643ec1":"df.columns","9d2c909b":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\ndftc = AV.AutoViz(\n    filename='', \n    sep='' , \n    depVar='diagnosis', \n    dfte=df, \n    header=0, \n    verbose=1, \n    lowess=False, \n    chart_format='png', \n    max_rows_analyzed=300000, \n    max_cols_analyzed=30\n)","16e1b4a8":"fig = px.histogram(data_frame = df,\n             x = \"radius_mean\",\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","c155df91":"fig = px.histogram(data_frame = df,\n             x = 'symmetry_mean',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","106100e8":"fig = px.histogram(data_frame = df,\n             x = 'symmetry_se',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","0a381a89":"fig = px.histogram(data_frame = df,\n             x = 'concavity_worst',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","a50ffe57":"['symmetry_mean', 'texture_se', 'smoothness_se', 'symmetry_se', 'symmetry_worst', 'perimeter_worst', 'concavity_worst', 'concave points_se', 'texture_worst', 'smoothness_worst', 'fractal_dimension_worst', 'fractal_dimension_se']","568e67ce":"fig = px.histogram(data_frame = df,\n             x ='concave points_se',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","1a87276b":"fig = px.histogram(data_frame = df,\n             x ='texture_worst',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","40406fc2":"fig = px.histogram(data_frame = df,\n             x ='smoothness_worst',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","8bb6a52d":"fig = px.histogram(data_frame = df,\n             x ='perimeter_worst',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","ae548150":"fig = px.histogram(data_frame = df,\n             x ='fractal_dimension_worst',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","e3a9a315":"fig = px.histogram(data_frame = df,\n             x ='fractal_dimension_se',\n             color=\"diagnosis\", title=\"<b>diagnosis vs radius mean<\/b>\",   \n)\nfig.show()","02384f9c":"y=df['diagnosis']\ndf.drop('diagnosis',axis=1,inplace=True)","27ca6b16":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nscaled=scaler.fit_transform(df)\ndf_final=pd.DataFrame(scaled,columns=df.columns)\ndf_final.head()","e8eafb0e":"X=df_final\ny","f3680c30":"df_final.isnull().sum()","8db61e24":"df_final.drop('Unnamed: 32',axis=1,inplace=True)","c701702c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)","8ae8496e":"model = [DecisionTreeClassifier(),RandomForestClassifier(), ExtraTreesClassifier() , XGBClassifier()]","5efb2532":"trainAccuracy = list()\ntestAccuracy = list()\nkfold = KFold(n_splits=10, random_state=7, shuffle=True)\n\nfor mdl in model:\n    trainResult = cross_val_score(mdl, X_train, y_train, scoring='accuracy', cv=kfold)\n    trainAccuracy.append(trainResult.mean())\n    mdl.fit(X_train, y_train)\n    y_pred = mdl.predict(X_test)\n    testResult = metrics.accuracy_score(y_test, y_pred)\n    testAccuracy.append(testResult)","c6bf438d":"print('The comparision\\n')\nmodelScore = pd.DataFrame({'Model' : model, 'Train_Accuracy' : trainAccuracy, 'Test_Accuracy' : testAccuracy})\nmodelScore","92b01597":"print('ExtraTreeClassifier\\n')\nmodel = ExtraTreesClassifier(n_estimators=150)\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\nprint(metrics.classification_report(y_test,pred))\nsns.heatmap(confusion_matrix(y_test,pred), annot=True, fmt='d')\nplt.show()","38a510c1":"Feature scaling\n","2b1e30b3":"Predictions"}}