{"cell_type":{"d03c9236":"code","8efa7e84":"code","2124472a":"code","35445524":"code","0919ec44":"code","6b57823b":"code","1913974d":"code","01e06938":"code","45bae1a8":"code","217fc3b4":"code","130a7470":"code","513e0276":"code","6f10bdcf":"code","edba15e0":"code","fee960c7":"code","23a0cb8b":"code","f1274831":"code","44d3d963":"code","6b117cb2":"code","11d8dcfd":"code","0d7c1e60":"code","9617fa07":"code","08a7c461":"code","7d770c05":"code","7361ccb2":"code","c5c9863a":"code","8a1b875b":"code","db12864c":"markdown","ab968c0f":"markdown","19db7b05":"markdown","38be3f7f":"markdown","3163a56a":"markdown","87d80ea4":"markdown","d7a5a6af":"markdown","03b34774":"markdown","a3d0984b":"markdown","6a93d78f":"markdown","1f2f6dfd":"markdown","06cde0cf":"markdown","add75adc":"markdown","2e82065f":"markdown","24a6dee2":"markdown","d65702f9":"markdown","5fc0cd78":"markdown"},"source":{"d03c9236":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","8efa7e84":"df = pd.read_csv('..\/input\/ecommerce-data\/data.csv', encoding= 'unicode_escape')","2124472a":"df.head()","35445524":"df['Total'] = df['Quantity'] * df['UnitPrice']","0919ec44":"monetary = df.groupby('CustomerID')['Total'].sum()\nmonetary = pd.DataFrame(monetary).reset_index()\nmonetary.head()","6b57823b":"freq = df.drop_duplicates(subset=['InvoiceNo']).groupby('CustomerID')['InvoiceNo'].count()\nfreq = pd.DataFrame(freq).reset_index()\nfreq.head()","1913974d":"def recency_cerrection(recency):\n    ans = str(recency).split(' ')[0]\n    return(int(ans))","01e06938":"df['Date'] = pd.to_datetime(df['InvoiceDate'])","45bae1a8":"today = df['Date'].max()\ntoday","217fc3b4":"df['rank'] = df.sort_values(['CustomerID','Date']).groupby(['CustomerID'])['Date'].rank(method='min').astype(int)\n\nrecency = df[df['rank'] == 1]\nrecency['recency'] = pd.to_datetime('2011-12-10') - recency['Date']\n\nrecency['recency'] = recency['recency'].apply(recency_cerrection)\n\nrecency = recency[['CustomerID','recency']]\nrecency = recency.drop_duplicates()\nrecency.head()","130a7470":"final_df = freq.merge(monetary, on='CustomerID').merge(recency, on='CustomerID')\nfinal_df.columns = ['CustomerId', 'freq', 'monetary', 'recency']\nfinal_df.head()","513e0276":"def get_group(Q1, Q2, Q3, value):\n    if value <= Q1:\n        return '1'\n    elif Q1 < value <= Q2:\n        return '2'\n    elif Q2 < value <= Q3:\n        return '3'\n    elif Q3 < value:\n        return '4'","6f10bdcf":"freq_Q1, freq_Q2, freq_Q3 = final_df['freq'].quantile([0.25,0.5,0.75])","edba15e0":"rece_Q1, rece_Q2, rece_Q3 = final_df['recency'].quantile([0.25,0.5,0.75])","fee960c7":"mone_Q1, mone_Q2, mone_Q3 = final_df['monetary'].quantile([0.25,0.5,0.75])","23a0cb8b":"freq_group = []\n\nfor i in range(len(final_df)):\n    freq = final_df.iloc[i]['freq']\n    freq_group.append(get_group(freq_Q1, freq_Q2, freq_Q3, freq)) \n\nfinal_df['freq_group'] = freq_group","f1274831":"monetary_group = []\n\nfor i in range(len(final_df)):\n    monetary = final_df.iloc[i]['monetary']\n    monetary_group.append(get_group(mone_Q1, mone_Q2, mone_Q3, monetary)) \n\nfinal_df['monetary_group'] = monetary_group","44d3d963":"recency_group = []\n\nfor i in range(len(final_df)):\n    recency = final_df.iloc[i]['recency']\n    recency_group.append(get_group(rece_Q1, rece_Q2, rece_Q3, recency)) \n\nfinal_df['recency_group'] = recency_group","6b117cb2":"final_df['rfm'] = final_df['recency_group'] + final_df['freq_group'] + final_df['monetary_group']","11d8dcfd":"final_df.head()","0d7c1e60":"def get_group(rfm):\n    if rfm == '144':\n        return 'Best'\n    elif rfm == '344':\n        return 'Almost Lost'\n    elif rfm == '444':\n        return 'Lost Big Spenders'\n    elif rfm == '441':\n        return 'Lost Cheap'\n    elif rfm[1] == '4':\n        return 'Loyal'\n    elif rfm[2] == '4':\n        return 'Big Spenders'\n    else:\n        return 'Normal'","9617fa07":"final_df['Segment'] = final_df['rfm'].apply(get_group)","08a7c461":"final_df","7d770c05":"df_customer_segments = final_df[['CustomerId', 'Segment']]","7361ccb2":"df_customer_segments.head()","c5c9863a":"segment_group = df_customer_segments.groupby('Segment').count()\nsegment_group = segment_group.reset_index()\nsegment_group.columns = ['Segment', 'Count']\nsegment_group.head()","8a1b875b":"fig, ax = plt.subplots(figsize=(12, 6), dpi=100)\nplt.bar(segment_group['Segment'], segment_group['Count'], color='orangered', alpha=0.8);","db12864c":"We want to make groups for Recency, Monetary and Frequency. Each of them move in a group from number 1 to 4 based on the below rules:\n\n**Group 1:** $X \\le Q_1$\n\n**Group 2:** $Q_1 < X \\le Q_2$\n\n**Group 3:** $Q_2 < X \\le Q_3$\n\n**Group 4:** $Q_3 < X$\n\n*Note:* $Q_i$ means $i^\\text{th}$ quartile\n","ab968c0f":"Compute $ \\: Q_1 \\:, \\: Q_2 \\:, \\: Q_3 \\:$ for frequency ","19db7b05":"Convert type of InvoiceDate column to date type and store it in a new column","38be3f7f":"### Main Theory of RFM\nRFM is a method used for analyzing customer value. It is commonly used in database marketing and direct marketing and has received particular attention in retail and professional services industries.\n\nRFM stands for the three dimensions:\n\n- **Recency:** How recently did the customer purchase?\n- **Frequency:** How often do they purchase?\n- **Monetary Value:** How much do they spend?\n\nCustomer purchases may be represented by a table with columns for the customer name, date of purchase and purchase value. One approach to RFM is to assign a score for each dimension on a scale from 1 to 10. The maximum score represents the preferred behavior and a formula could be used to calculate the three scores for each customer. For example, a service-based business could use these calculations:\n\n- **Recency:** the maximum of \"10 \u2013 the number of months that have passed since the customer last purchased\" and 1\n- **Frequency:** the maximum of \"the number of purchases by the customer in the last 12 months (with a limit of 10)\" and 1\n- **Monetary:** the highest value of all purchases by the customer expressed as a multiple of some benchmark value\n\n**Note:** The formulas that we used in this notebook are different from the main. I will explain Recency, Frequency and Monetary formulas that we used in this notebook.\n","3163a56a":"We should compute RFM for each customer. For this we should concat Recencies, Frequncies and Monetaries in order as a new column.","87d80ea4":"Compute Total price for Each Stock","d7a5a6af":"Monetary is equal to total cost of a customer","03b34774":"Get group of each monetary with the help of `get_group()`","a3d0984b":"We suppose today is the day after maximum date (2011-12-10)","6a93d78f":"Merge all three top tables to get RFM table","1f2f6dfd":"Compute $ \\: Q_1 \\:, \\: Q_2 \\:, \\: Q_3 \\:$ for monetary ","06cde0cf":"Compute $ \\: Q_1 \\:, \\: Q_2 \\:, \\: Q_3 \\:$ for recency ","add75adc":"Based on `rfm` column we can segment customers based on a simple rule:\n\n1. **Best** $ \\rightarrow$ RFM = 144\n\n2. **Almost Lost** $\\rightarrow$ RFM = 344\n\n3. **Lost Big Spenders** $ \\rightarrow$  RFM = 444\n\n4. **Lost Cheap** $ \\rightarrow$  RFM = 441\n\n5. **Loyal** $\\rightarrow$ RFM = ?4?\n\n6. **Big Spenders** $\\rightarrow$ RFM = ??4\n\n7. **Normal** $\\rightarrow$ RFM dosen't belong to any top groups\n\n*Note 1:* **?** could be 1 or 2 or 3.\n\n*Note 2:* If a rfm belongs to more than one group, it belongs the group with lowest order.","2e82065f":"Get group of each freuency with the help of `get_group()`","24a6dee2":"Get group of each recency with the help of `get_group()`","d65702f9":"Recency means the number of days after last payment. I use rank method to mark the most recent payment of each customer as **1**","5fc0cd78":"Frequency means the number of inovices for each customer. We should get the number of unique inovice for each customer because each inovice has repeated many times for each stocks of itself."}}