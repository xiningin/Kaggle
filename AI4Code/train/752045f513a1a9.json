{"cell_type":{"f792792b":"code","b723088f":"code","544366e7":"code","c2871dab":"code","e0a3b468":"code","7fbc66a1":"code","4f1f2270":"code","ea9d89ad":"code","5a26e599":"code","fd4b7d5b":"code","d6c27d87":"code","d224dedc":"code","24eb1b51":"code","39e2be4a":"code","40303fdf":"code","8cdc2ab5":"code","42ca1918":"code","f3049396":"code","cacdc6db":"code","518febc5":"code","bbab060a":"code","6689f5d9":"code","0f00a35a":"code","24056925":"code","f4b082b9":"code","01be5bc0":"code","c765acba":"code","43965481":"code","ba169c8e":"code","5929e741":"code","c88d18ce":"code","58b226f9":"code","38780439":"code","c2ed52d3":"code","bb6805f0":"code","8d2a0918":"code","cf3f688f":"code","c1913fa2":"code","f2da1238":"markdown","6b0cb618":"markdown","1f7875dd":"markdown","b9d995f6":"markdown","1cf8d0db":"markdown","5f3e1333":"markdown","0dedc126":"markdown","22023116":"markdown"},"source":{"f792792b":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt                # Get the necessary imports\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","b723088f":"df= pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndfT=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n","544366e7":"print(df.shape)\nprint('\\n')\nprint(dfT.shape)","c2871dab":"df.head(3)","e0a3b468":"missing =(df.isnull().sum().sort_values(ascending =False).head(20)\/len(df))*100\nmissing","7fbc66a1":"df =df.drop(['PoolQC','MiscFeature','Alley','Fence'],axis=1)  \ndfT =dfT.drop(['PoolQC','MiscFeature','Alley','Fence'],axis=1)  #77cols","4f1f2270":"df['FireplaceQu']=df['FireplaceQu'].replace(np.nan,df['FireplaceQu'].mode()[0][:])\ndf['MasVnrType']=df['MasVnrType'].replace(np.nan,df['MasVnrType'].mode()[0][:])\ndf['Electrical']=df['Electrical'].replace(np.nan,df['Electrical'].mode()[0][:])\ndf['BsmtFinType2']=df['BsmtFinType2'].replace(np.nan,df['BsmtFinType2'].mode()[0][:])\ndf['BsmtFinType1']=df['BsmtFinType1'].replace(np.nan,df['BsmtFinType1'].mode()[0][:])\ndf['BsmtCond']=df['BsmtCond'].replace(np.nan,df['BsmtCond'].mode()[0][:])\ndf['BsmtQual']=df['BsmtQual'].replace(np.nan,df['BsmtQual'].mode()[0][:])\ndf['GarageYrBlt']=df['GarageYrBlt'].replace(np.nan,df['GarageYrBlt'].mode()[0]).astype('int32')\ndf['GarageType'] = df['GarageType'].replace(np.nan,df['GarageType'].mode()[0][:])\ndf['GarageFinish'] = df['GarageFinish'].replace(np.nan,df['GarageFinish'].mode()[0][:])\ndf['GarageQual'] = df['GarageQual'].replace(np.nan,df['GarageQual'].mode()[0][:])\ndf['BsmtExposure'] = df['BsmtExposure'].replace(np.nan,df['BsmtExposure'].mode()[0][:])\ndf['GarageCond']=df['GarageCond'].replace(np.nan,df['GarageCond'].mode()[0][:])\n\n\n\ndfT['FireplaceQu']=dfT['FireplaceQu'].replace(np.nan,dfT['FireplaceQu'].mode()[0][:])\ndfT['MasVnrType']=dfT['MasVnrType'].replace(np.nan,dfT['MasVnrType'].mode()[0][:])\ndfT['Electrical']=dfT['Electrical'].replace(np.nan,dfT['Electrical'].mode()[0][:])\ndfT['BsmtFinType2']=dfT['BsmtFinType2'].replace(np.nan,dfT['BsmtFinType2'].mode()[0][:])\ndfT['BsmtFinType1']=dfT['BsmtFinType1'].replace(np.nan,dfT['BsmtFinType1'].mode()[0][:])\ndfT['BsmtCond']=dfT['BsmtCond'].replace(np.nan,dfT['BsmtCond'].mode()[0][:])\ndfT['BsmtQual']=dfT['BsmtQual'].replace(np.nan,df['BsmtQual'].mode()[0][:])\ndfT['GarageYrBlt']=dfT['GarageYrBlt'].replace(np.nan,dfT['GarageYrBlt'].mode()[0]).astype('int32')\ndfT['GarageType'] = dfT['GarageType'].replace(np.nan,dfT['GarageType'].mode()[0][:])\ndfT['GarageFinish'] = dfT['GarageFinish'].replace(np.nan,dfT['GarageFinish'].mode()[0][:])\ndfT['GarageQual'] = dfT['GarageQual'].replace(np.nan,dfT['GarageQual'].mode()[0][:])\ndfT['BsmtExposure'] = dfT['BsmtExposure'].replace(np.nan,dfT['BsmtExposure'].mode()[0][:])\ndfT['GarageCond']=dfT['GarageCond'].replace(np.nan,dfT['GarageCond'].mode()[0][:])","ea9d89ad":"df['LotFrontage'] = df['LotFrontage'].replace(np.nan,df['LotFrontage'].mean()).astype('int32')\ndf['MasVnrArea'] = df['MasVnrArea'].replace(np.nan,df['MasVnrArea'].mean()).astype('int32')\n\n\ndfT['LotFrontage'] = dfT['LotFrontage'].replace(np.nan,dfT['LotFrontage'].mean()).astype('int32')\ndfT['MasVnrArea'] = dfT['MasVnrArea'].replace(np.nan,dfT['MasVnrArea'].mean()).astype('int32')","5a26e599":"df.info()","fd4b7d5b":"obj_data= list(df.select_dtypes(include='object').columns)\nnum_data= list(df.select_dtypes(exclude='object').columns)\nprint(obj_data)\n\n\nobj_dataT= list(dfT.select_dtypes(include='object').columns)\nnum_dataT= list(dfT.select_dtypes(exclude='object').columns)\n","d6c27d87":"ord1 = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'GarageQual', 'GarageCond']","d224dedc":"map1 = {'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1}\nmap2 = {'Gd':5,'Av':4,'Mn':3,'No':2,'NB':1}\n\ndef encoder(df):\n    for col in ord1:\n        df[col+'_ord'] = df[col].map(map1)\n        df.drop(columns=[col],inplace=True)\n        \nencoder(df)\n\n\ndef encoder1(dfT):\n    for col in ord1:\n        dfT[col+'_ord'] = dfT[col].map(map1)\n        dfT.drop(columns=[col],inplace=True)\n        \nencoder1(dfT)\n\ndf['BsmtExposure'+'_ord'] = df['BsmtExposure'].map(map2)\ndf.drop(columns=['BsmtExposure'], inplace=True)\n\ndfT['BsmtExposure'+'_ord'] = dfT['BsmtExposure'].map(map2)\ndfT.drop(columns=['BsmtExposure'], inplace=True)","24eb1b51":"np.setdiff1d(obj_data,ord1)","39e2be4a":"top_neigh =list(df['Neighborhood'].value_counts().head(12).index)\ntop_neigh","40303fdf":"def one_hot_enc(df,col,top_labels):\n    for x in top_labels:\n        df[col+'_'+x] = np.where(df[col]==x, 1, 0)\none_hot_enc(df,'Neighborhood', top_neigh)\ndf.drop('Neighborhood',axis=1,inplace=True)\n\none_hot_enc(dfT,'Neighborhood', top_neigh)\ndfT.drop('Neighborhood',axis=1,inplace=True)","8cdc2ab5":"feat_w_labels = ['Exterior1st', 'Exterior2nd', 'SaleType', 'Condition1', 'Condition2', 'HouseStyle', 'RoofMatl']\n\nfor col in feat_w_labels:\n    top_5labels = [x for x in df[col].value_counts().head(5).index]\n    one_hot_enc(df,col,top_5labels)\n    \n    \nfor col in feat_w_labels:\n    top_5labels = [x for x in dfT[col].value_counts().head(5).index]\n    one_hot_enc(dfT,col,top_5labels)\n    \ndf.drop(columns=feat_w_labels,axis=1,inplace=True)\ndfT.drop(columns=feat_w_labels,axis=1,inplace=True)","42ca1918":"df.shape","f3049396":"one = np.setdiff1d(obj_data,ord1)\ntwo = np.setdiff1d(one,feat_w_labels)\ntwo","cacdc6db":"dummy_feat = ['BldgType', 'BsmtFinType1', 'BsmtFinType2',\n       'CentralAir', 'Electrical', 'FireplaceQu', 'Foundation',\n       'Functional', 'GarageFinish', 'GarageType', 'Heating',\n       'LandContour', 'LandSlope', 'LotConfig', 'LotShape', 'MSZoning',\n       'MasVnrType', 'PavedDrive', 'RoofStyle',\n       'SaleCondition', 'Street', 'Utilities']","518febc5":"def dummies(x,df):\n    temp = pd.get_dummies(df[x], prefix = x , drop_first = True).astype('int32')\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n\nfor ft in dummy_feat:\n    df = dummies(ft,df)\n    dfT = dummies(ft,dfT)","bbab060a":"for x in df.columns:\n        if x not in dfT.columns:\n            print(x)","6689f5d9":"df.drop([\n'SaleType_ConLI',\n'Condition2_RRNn',\n'Electrical_Mix',\n'Heating_GasA',\n'Heating_OthW',\n'Utilities_NoSeWa'],axis=1,inplace =True)","0f00a35a":"for x in dfT.columns:\n        if x not in df.columns:\n            print(x)","24056925":"dfT.drop(['SaleType_CWD','Condition2_PosA'],axis=1,inplace=True)","f4b082b9":"dfT = dfT.replace([np.inf, -np.inf], np.nan)\ndfT.fillna(0, inplace =True)","01be5bc0":"dfT[['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageCars','GarageArea','KitchenQual_ord']]=dfT[['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageCars','GarageArea','KitchenQual_ord']].astype('int32')","c765acba":"from scipy import stats","43965481":"def drop_numerical_outliers(df, z_thresh=3):\n    outliers = df.select_dtypes(include=[np.number]).apply(lambda x: np.abs(stats.zscore(x)) < z_thresh).all(axis=1)\n    # Drop (inplace) values set to be rejected\n    df.drop(df.index[~outliers], inplace=True)","ba169c8e":"drop_numerical_outliers(df)","5929e741":"for col in df.columns:\n    if col not in dfT.columns:\n        print(col)","c88d18ce":"df = df.drop('RoofMatl_Membran',axis=1)","58b226f9":"print('test :',dfT.shape)\nprint('\\n')\nprint('train:',df.shape)","38780439":"X = df.drop('SalePrice',axis=1)\ny = df['SalePrice']\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score , mean_absolute_error\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.05, random_state=101)","c2ed52d3":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_val)","bb6805f0":"print(mean_absolute_error(y_val,pred))","8d2a0918":"pred","cf3f688f":"X_test = dfT\npredictions = lr.predict(X_test)","c1913fa2":"submission = pd.DataFrame({'Id':dfT['Id'],'Saleprice':predictions})\nsubmission.to_csv('Housing_submissions.csv', header=True, index=False)","f2da1238":"**Dropping the columns which have more than 60% of the data missing**","6b0cb618":"**keep track of the no.of columns as you clean the data**","1f7875dd":"# Check for Outlier data that can affect the performance of our model","b9d995f6":"**Ordinal data has weights, so it's a good practice to encode them to their maps rather than creating dummy data**","1cf8d0db":"**Rather than creating too many columns from .get_dummies, we consider the top 50% of their labels and get dummy data for them**","5f3e1333":"**Replacing Nan values by their mean or mode **","0dedc126":"# **Seperating data into Numerical and categorical **","22023116":"**create a missing instance that gives the missing data percentage wrt to columns**"}}