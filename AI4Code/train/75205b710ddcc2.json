{"cell_type":{"cf835a6e":"code","7383d98a":"code","371f3f6a":"code","6b88954b":"code","f29eca61":"code","163671fb":"code","06ae5119":"code","57ef1216":"code","910bf478":"code","7460ff0e":"code","3cb19eb9":"code","febc1b98":"code","9a27183e":"code","111706d8":"code","089f71ea":"code","d45e2872":"code","e9962265":"code","854c3072":"code","3397d37d":"code","5d80d86b":"code","d45c5ac1":"code","2b12a558":"code","f18a09d3":"code","670e065d":"code","2d8e2c3b":"code","ceb78eb1":"code","121a7936":"code","59c7f336":"code","95786e38":"code","f506640d":"code","66ccef4f":"code","9d86b812":"code","2149dc88":"code","2def3d16":"code","0a733058":"code","da87f7ab":"code","9bbefc00":"code","f8d86825":"code","1128d0e6":"code","477d4323":"code","a7b7dac4":"code","b7c4a53a":"code","45b3ba2d":"code","52c9eb3d":"code","dc412a51":"code","28419c52":"code","4819918d":"code","69689364":"code","7ee0bf48":"code","4a183e7e":"code","91e3960d":"code","9ef93bab":"code","95148ff7":"code","ac1e658a":"markdown","84d2f04a":"markdown","557dd13d":"markdown","63aa44a7":"markdown","2c01cd03":"markdown","4308ef2a":"markdown","f8de479b":"markdown","3ba17965":"markdown","f4216382":"markdown","2ba0c689":"markdown","05fac71e":"markdown","6be9f018":"markdown","04bd720f":"markdown","3cdca482":"markdown","7237aefa":"markdown","22277214":"markdown","9e7fc32f":"markdown","9d63b361":"markdown","d23539ef":"markdown","d080746f":"markdown","01384bc1":"markdown","9742e4e3":"markdown","83d37b35":"markdown","b7c760c5":"markdown","1abe1d81":"markdown","1eb8d874":"markdown","96f403b1":"markdown","798bdc9b":"markdown","737edb90":"markdown","e0b3d492":"markdown","5e7d46ff":"markdown","b9fd48a3":"markdown","ffc3b236":"markdown","e896d676":"markdown","99d19451":"markdown","d70d0ffb":"markdown","2aa9e4e9":"markdown","80a779bd":"markdown","cedd3303":"markdown","490ccb19":"markdown","f8fdf9f6":"markdown","19106da7":"markdown","ab542c7a":"markdown","7769b3d9":"markdown","621a9a50":"markdown","b8f5f5dc":"markdown","bcf393d1":"markdown","6543db2e":"markdown","e0e6c09b":"markdown","c013ba8e":"markdown","7707598e":"markdown","58b18571":"markdown"},"source":{"cf835a6e":"#Libraries\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport mpld3\nfrom mpld3 import plugins","7383d98a":"np.random.seed(9615)\n\n# generate df\nN = 100\ndf = pd.DataFrame((.1 * (np.random.random((N, 2)) - .5)).cumsum(0),\n                  columns=['a', 'b'],)\n\n# plot line + confidence interval\nfig, ax = plt.subplots()\nax.grid(True, alpha=0.3)\n\nfor key, val in df.iteritems():\n    l, = ax.plot(val.index, val.values, label=key)\n    ax.fill_between(val.index,\n                    val.values * .5, val.values * 1.5,\n                    color=l.get_color(), alpha=.4)\n\n# define interactive legend\n\nhandles, labels = ax.get_legend_handles_labels() # return lines and labels\ninteractive_legend = plugins.InteractiveLegendPlugin(zip(handles,\n                                                         ax.collections),\n                                                     labels,\n                                                     alpha_unsel=0.5,\n                                                     alpha_over=1.5, \n                                                     start_visible=True)\nplugins.connect(fig, interactive_legend)\n\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Interactive legend', size=15)\n\nmpld3.display()","371f3f6a":"fig, ax = plt.subplots()\nN = 50\n\nscatter = ax.scatter(np.random.normal(size=N),\n                     np.random.normal(size=N),\n                     c=np.random.random(size=N),\n                     s=1000 * np.random.random(size=N),\n                     alpha=0.3,\n                     cmap=plt.cm.jet)\n\nax.grid(color='white', linestyle='dotted')\n\nax.set_title(\"Scatter Plot\", size=15)\n\nlabels = ['point {0}'.format(i + 1) for i in range(N)]\ntooltip = mpld3.plugins.PointLabelTooltip(scatter, labels=labels)\nmpld3.plugins.connect(fig, tooltip)\n\nmpld3.display()\n","6b88954b":"fig, ax = plt.subplots()\n\nx = np.linspace(-2, 2, 20)\ny = x[:, None]\nX = np.zeros((20, 20, 4))\n\nX[:, :, 0] = np.exp(- (x - 1) ** 2 - (y) ** 2)\nX[:, :, 1] = np.exp(- (x + 0.71) ** 2 - (y - 0.71) ** 2)\nX[:, :, 2] = np.exp(- (x + 0.71) ** 2 - (y + 0.71) ** 2)\nX[:, :, 3] = np.exp(-0.25 * (x ** 2 + y ** 2))\n\nim = ax.imshow(X, extent=(10, 20, 10, 20),\n               origin='lower', zorder=1, interpolation='nearest')\nfig.colorbar(im, ax=ax)\n\nax.set_title('Image', size=20)\n\nplugins.connect(fig, plugins.MousePosition(fontsize=14))\n\nmpld3.display()","f29eca61":"fig = plt.figure()\n\nax = fig.add_subplot(111)\nax.grid(color='gray', linestyle='dotted')\n\nx = np.random.normal(size=1000)\nax.hist(x, 30, histtype='stepfilled', fc='lightblue', alpha=0.5);","163671fb":"fig, ax = plt.subplots()\nx = np.linspace(-5, 15, 1000)\nfor offset in np.linspace(0, 3, 3):\n    ax.plot(x, 0.9 * np.sin(x - offset), lw=2, alpha=0.4,\n            label=\"Offset: {0}\".format(offset))\nax.set_xlim(0, 10)\nax.set_ylim(-1.2, 1.0)\nax.text(5, -1.5, \"Line Plot\", size=18, ha='center')\nax.grid(color='lightgray', alpha=0.7, linestyle='dotted')\nax.legend(loc=4, fontsize='x-small')","06ae5119":"fig, ax = plt.subplots(2, 2, figsize=(8, 6),sharex='col', sharey='row')\nfig.subplots_adjust(hspace=0.3)\n\nnp.random.seed(0)\n\nfor axi in ax.flat:\n    color = np.random.random(4)\n    axi.plot(np.random.random(50), lw=1.5, c=color)\n    axi.set_title(\"RGB = ({0:.2f}, {1:.2f}, {2:.2f})\".format(*color),\n                  size=14)\n    axi.grid(color='lightgray', alpha=0.7, linestyle='dotted')","57ef1216":"#Install PyGal Library\n!pip install pygal -q","910bf478":"# Libraries\nimport pygal\nfrom IPython.display import SVG, HTML","7460ff0e":"html_pygal = \"\"\"\n<!DOCTYPE html>\n<html>\n  <head>\n  <script type=\"text\/javascript\" src=\"http:\/\/kozea.github.com\/pygal.js\/javascripts\/svg.jquery.js\"><\/script>\n  <script type=\"text\/javascript\" src=\"http:\/\/kozea.github.com\/pygal.js\/javascripts\/pygal-tooltips.js\"><\/script>\n    <!-- ... -->\n  <\/head>\n  <body>\n    <figure>\n      {pygal_render}\n    <\/figure>\n  <\/body>\n<\/html>\n\"\"\"","3cb19eb9":"line_chart = pygal.Line()\nline_chart.title = 'Line Plot'\nline_chart.x_labels = map(str, range(100, 115))\nline_chart.add('X', [0, 15.5, 18, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8])\nline_chart.add('Y',  [0, 2, 5, 10.6, 15.8, 20.2,30, 39, 10.8, 23.8])\nHTML(html_pygal.format(pygal_render=line_chart.render()))\n","febc1b98":"line_chart = pygal.StackedLine(fill=True)\nline_chart.title = 'Stacked Line'\nline_chart.x_labels = map(str, range(100, 115))\nline_chart.add('X', [None, None, 0, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])\nline_chart.add('Y',  [None, None, None, None, None, None,    0,  3.9, 10.8, 23.8, 35.3])\nHTML(html_pygal.format(pygal_render=line_chart.render()))","9a27183e":"line_chart = pygal.Bar()\nline_chart.title = 'Bar Plot'\nline_chart.x_labels = map(str, range(100, 115))\nline_chart.add('X', [None, None, 0, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])\nline_chart.add('Y',  [None, None, None, None, None, None,    0,  3.9, 10.8, 23.8, 35.3])\nHTML(html_pygal.format(pygal_render=line_chart.render()))","111706d8":"line_chart = pygal.StackedBar()\nline_chart.title = 'Stacked Bar Plot'\nline_chart.x_labels = map(str, range(100, 116))\nline_chart.add('X', [None, None, 0, 16.6,   25,   31, 36.4, 45.5, 46.3, 42.8, 37.1])\nline_chart.add('Y',  [14.2, 15.4, 15.3,  8.9,    9, 10.4,  8.9,  5.8,  6.7,  6.8,  7.5])\nHTML(html_pygal.format(pygal_render=line_chart.render()))","089f71ea":"line_chart = pygal.HorizontalBar()\nline_chart.title = 'Horizontal Bar Plot'\nline_chart.add('X', 4.5)\nline_chart.add('Y', 2.3)\nHTML(html_pygal.format(pygal_render=line_chart.render()))","d45e2872":"hist = pygal.Histogram()\nhist.add('Histogram Bar',  [(5, 1, 5), (6, 4, 10), (4, 8, 13)])\nhist.render()\nHTML(html_pygal.format(pygal_render=hist.render()))","e9962265":"xy_chart = pygal.XY(stroke=False)\nxy_chart.title = 'Scatter Plot'\nxy_chart.add('X', [(0, 0), (.1, .2), (.3, .1), (.5, 1), (.8, .6), (1, 1.08), (1.3, 1.1), (2, 3.23), (2.43, 2)])\nxy_chart.add('Y', [(.1, .15), (.12, .23), (.4, .3), (.6, .4), (.21, .21), (.5, .3), (.6, .8), (.7, .8)])\nHTML(html_pygal.format(pygal_render=xy_chart.render()))","854c3072":"pie_chart = pygal.Pie()\npie_chart.title = 'Pie Plot'\npie_chart.add('A', 5)\npie_chart.add('B', 30)\npie_chart.add('C', 20)\npie_chart.add('D', 30)\npie_chart.add('E', 15)\nHTML(html_pygal.format(pygal_render=pie_chart.render()))","3397d37d":"box_plot = pygal.Box()\nbox_plot.title = 'Box Plot'\nbox_plot.add('A', [6395, 8212, 7520, 7218, 12464, 1660, 2123, 8607])\nbox_plot.add('B', [7473, 8099, 11700, 2651, 6361, 1044, 3797, 9450])\nbox_plot.add('C', [3472, 2933, 4203, 5229, 5810, 1828, 9013, 4669])\nHTML(html_pygal.format(pygal_render=box_plot.render()))\n","5d80d86b":"#Libraries\nimport bokeh\nfrom bokeh.io import output_notebook, show\noutput_notebook()\nimport scipy.special\nfrom bokeh.palettes import brewer\n\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\nfrom bokeh.plotting import figure\nfrom bokeh.transform import factor_cmap\nfrom bokeh.models import FactorRange\nfrom bokeh.layouts import row","d45c5ac1":"groups = ['A', 'B', 'C', 'D']\ncounts = [5, 3, 4, 2]\n\nsource = ColumnDataSource(data=dict(groups=groups, counts=counts))\n\np = figure(x_range=groups, plot_height=350, toolbar_location=None, title=\"Bar PLot\")\np.vbar(x='groups', top='counts', width=0.9, source=source, legend_field=\"groups\",\n       line_color='white', fill_color=factor_cmap('groups', palette=Spectral6, factors=groups))\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.y_range.end = 9\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","2b12a558":"factors = [\n    (\"Q1\", \"jan\"), (\"Q1\", \"feb\"), (\"Q1\", \"mar\"),\n    (\"Q2\", \"apr\"), (\"Q2\", \"may\"), (\"Q2\", \"jun\"),\n    (\"Q3\", \"jul\"), (\"Q3\", \"aug\"), (\"Q3\", \"sep\"),\n    (\"Q4\", \"oct\"), (\"Q4\", \"nov\"), (\"Q4\", \"dec\"),\n\n]\n\np = figure(x_range=FactorRange(*factors), plot_height=350,\n           toolbar_location=None, tools=\"\")\n\nx = [ 10, 12, 16, 9, 10, 8, 12, 13, 14, 14, 12, 16 ]\np.vbar(x=factors, top=x, width=0.9, alpha=0.5)\n\np.line(x=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"], y=[12, 9, 13, 14], color=\"red\", line_width=2)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","f18a09d3":"factors = [\"A\", \"B\", \"C\"]\nx = [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\",  \"C\",  \"C\"]\ny = [\"A\", \"B\", \"C\",  \"A\", \"B\", \"C\",  \"A\", \"B\", \"C\"]\n\ncolors = [\n    \"#0B486B\", \"#79BD9A\", \"#CFF09E\",\n    \"#79BD9A\", \"#0B486B\", \"#79BD9A\",\n    \"#CFF09E\", \"#79BD9A\", \"#0B486B\"\n]\n\nhm = figure(title=\"Heatmap\", tools=\"hover\", toolbar_location=None,\n            x_range=factors, y_range=factors)\n\nhm.rect(x, y, color=colors, width=1, height=1)\n\nshow(hm)","670e065d":"groups = ['A', 'B', 'C', 'D', 'E', 'F']\nyears = [\"1\", \"2\", \"3\"]\ncolors = [\"#EC4067\", \"#A01A7D\", \"#311847\"]\n\ndata = {'groups' : groups,\n        '1'   : [2, 1, 4, 3, 2, 4],\n        '2'   : [5, 3, 4, 2, 4, 6],\n        '3'   : [3, 2, 4, 4, 5, 3]}\n\np = figure(x_range=groups, plot_height=250, title=\"Bar(stacked)\",\n           toolbar_location=None, tools=\"hover\", tooltips=\"$name @groups: @$name\")\n\np.vbar_stack(years, x='groups', width=0.9, color=colors, source=data,\n             legend_label=years)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.axis.minor_tick_line_color = None\np.outline_line_color = None\np.legend.location = \"top_left\"\np.legend.orientation = \"horizontal\"\n\nshow(p)","2d8e2c3b":"def make_plot(title, hist, edges, x, pdf):\n    p = figure(title=title, tools='', background_fill_color=\"#fafafa\")\n    p.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:],\n           fill_color=\"navy\", line_color=\"white\", alpha=0.5)\n    p.line(x, pdf, line_color=\"#ff8888\", line_width=4, alpha=0.7, legend_label=\"PDF\")\n    #p.line(x, cdf, line_color=\"orange\", line_width=2, alpha=0.7, legend_label=\"CDF\")\n\n    p.y_range.start = 0\n    p.legend.location = \"center_right\"\n    p.legend.background_fill_color = \"#fefefe\"\n    p.xaxis.axis_label = 'x'\n    p.yaxis.axis_label = 'Pr(x)'\n    p.grid.grid_line_color=\"white\"\n    return p\n\n# Normal Distribution\nmu, sigma = 0, 0.5\nmeasured = np.random.normal(mu, sigma, 1000)\nhist, edges = np.histogram(measured, density=True, bins=50)\nx = np.linspace(-2, 2, 1000)\npdf = 1\/(sigma * np.sqrt(2*np.pi)) * np.exp(-(x-mu)**2 \/ (2*sigma**2))\n#cdf = (1+scipy.special.erf((x-mu)\/np.sqrt(2*sigma**2)))\/2\n\np1 = make_plot(\"Normal Distribution\", hist, edges, x, pdf)\n\n\nshow(p1)","ceb78eb1":"N = 5\ndf = pd.DataFrame(np.random.randint(10, 70, size=(15, N))).add_prefix('y')\n\np = figure(x_range=(0, len(df)-3), y_range=(0, 800))\np.grid.minor_grid_line_color = '#eeeeee'\n\nnames = [\"y%d\" % i for i in range(N)]\np.varea_stack(stackers=names, x='index', color=brewer['Spectral'][N], legend_label=names, source=df)\n\n# reverse the legend entries to match the stacked order\np.legend.items.reverse()\n\nshow(p)","121a7936":"# generate some synthetic time series for four different categories\ncats = list(\"abcd\")\nyy = np.random.randn(2000)\ng = np.random.choice(cats, 2000)\nfor i, l in enumerate(cats):\n    yy[g == l] += i \/\/ 2\ndf = pd.DataFrame(dict(score=yy, group=g))\n\n# find the quartiles and IQR for each category\ngroups = df.groupby('group')\nq1 = groups.quantile(q=0.25)\nq2 = groups.quantile(q=0.5)\nq3 = groups.quantile(q=0.75)\niqr = q3 - q1\nupper = q3 + 1.5*iqr\nlower = q1 - 1.5*iqr\n\n# find the outliers for each category\ndef outliers(group):\n    cat = group.name\n    return group[(group.score > upper.loc[cat]['score']) | (group.score < lower.loc[cat]['score'])]['score']\nout = groups.apply(outliers).dropna()\n\n# prepare outlier data for plotting, we need coordinates for every outlier.\nif not out.empty:\n    outx = []\n    outy = []\n    for keys in out.index:\n        outx.append(keys[0])\n        outy.append(out.loc[keys[0]].loc[keys[1]])\n\np = figure(tools=\"\", background_fill_color=\"#efefef\", x_range=cats, toolbar_location=None)\n\n# if no outliers, shrink lengths of stems to be no longer than the minimums or maximums\nqmin = groups.quantile(q=0.00)\nqmax = groups.quantile(q=1.00)\nupper.score = [min([x,y]) for (x,y) in zip(list(qmax.loc[:,'score']),upper.score)]\nlower.score = [max([x,y]) for (x,y) in zip(list(qmin.loc[:,'score']),lower.score)]\n\n# stems\np.segment(cats, upper.score, cats, q3.score, line_color=\"black\")\np.segment(cats, lower.score, cats, q1.score, line_color=\"black\")\n\n# boxes\np.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#E08E79\", line_color=\"black\")\np.vbar(cats, 0.7, q1.score, q2.score, fill_color=\"#3B8686\", line_color=\"black\")\n\n# whiskers (almost-0 height rects simpler than segments)\np.rect(cats, lower.score, 0.2, 0.01, line_color=\"black\")\np.rect(cats, upper.score, 0.2, 0.01, line_color=\"black\")\n\n# outliers\nif not out.empty:\n    p.circle(outx, outy, size=6, color=\"#F38630\", fill_alpha=0.6)\n\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = \"white\"\np.grid.grid_line_width = 2\np.xaxis.major_label_text_font_size=\"16px\"\n\nshow(p)","59c7f336":"x = np.linspace(0.1, 5, 80)\n\np = figure(title=\"log axis example\", y_axis_type=\"log\",\n           x_range=(0, 5), y_range=(0.001, 10**22),\n           background_fill_color=\"#fafafa\")\n\np.line(x, np.sqrt(x), legend_label=\"y=sqrt(x)\",\n       line_color=\"tomato\", line_dash=\"dashed\")\n\np.line(x, x**x, legend_label=\"y=x^x\",\n       line_dash=\"dotted\", line_color=\"indigo\", line_width=2)\n\np.line(x, 10**(x**2), legend_label=\"y=10^(x^2)\",\n       line_color=\"coral\", line_dash=\"dotdash\", line_width=2)\n\np.legend.location = \"top_left\"\n\nshow(p)","95786e38":"#Libraries\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff","f506640d":"df = px.data.iris()  #Iris Dataset\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 size='petal_length', hover_data=['petal_width'])\nfig.show()","66ccef4f":"df = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x='year', y='lifeExp', color='country')\nfig.show()","9d86b812":"colors = ['lightsteelblue',]*5\nfig = go.Figure(data=[go.Bar(\n    x=['A', 'B', 'C',\n       'D', 'E'],\n    y=[20, 14, 23, 25, 22],\n    marker_color=colors\n)])\nfig.update_layout(title_text='Bar Plot')","2149dc88":"groups=['A', 'B', 'C']\ncol1 = ['lightsteelblue',]*5\ncol2 = ['floralwhite',] * 5\n\nfig = go.Figure(data=[\n    go.Bar(name='XX', x=groups, y=[20, 14, 23], marker_color=col1),\n    go.Bar(name='YY', x=groups, y=[12, 18, 29], marker_color=col2),\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","2def3d16":"groups=['A', 'B', 'C']\ncol1 = ['lightsteelblue',]*5\ncol2 = ['floralwhite',] * 5\n\nfig = go.Figure(data=[\n    go.Bar(name='XX', x=groups, y=[20, 14, 23], marker_color=col1),\n    go.Bar(name='YY', x=groups, y=[12, 18, 29], marker_color=col2)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()","0a733058":"df = px.data.tips()\nfig = px.pie(df, values='tip', names='day', color_discrete_sequence=px.colors.sequential.BuGn)\nfig.show()","da87f7ab":"df = px.data.gapminder()\n\nfig = px.scatter(df.query(\"year==2007\"), x=\"gdpPercap\", y=\"lifeExp\",\n                 size=\"pop\", color=\"continent\",\n                 hover_name=\"country\", log_x=True, size_max=60)\nfig.show()","9bbefc00":"df = px.data.iris()\nfig = px.box(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.show()","f8d86825":"df = px.data.iris()\nfig = px.histogram(df, x=\"sepal_length\", \n                   title = 'Histogram',opacity=0.8,\n                   color = 'species', nbins = 30\n                   )\nfig.show()","1128d0e6":"df.columns","477d4323":"df = px.data.iris()\n\n# Add histogram data\nx1 = df.sepal_length\nx2 = df.sepal_width\nx3 = df.petal_length\nx4 = df.petal_width\n\n# Group data together\nhist_data = [x1, x2, x3, x4]\n\ngroup_labels = ['Sepal-Length', 'Sepal-Width', 'Petal-Length', 'Petal-Width']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2)\nfig.show()","a7b7dac4":"#Libraries\nimport seaborn as sns","b7c4a53a":"sns.set(style=\"white\", context=\"talk\")\nrs = np.random.RandomState(8)\n\nf, (ax1) = plt.subplots(1, 1, figsize=(7, 5), sharex=True)\n\nx1 = np.array(list(\"ABCDEFGHIJ\"))\ny1 = np.arange(1, 11)\n\ny = rs.choice(y1, len(y1), replace=False)\nsns.barplot(x=x1, y=y, palette=\"deep\", ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=False)\nax1.set_ylabel(\"Qualitative\")\n\nsns.despine(bottom=True)\nplt.setp(f.axes, yticks=[])\nplt.tight_layout(h_pad=2)\n","45b3ba2d":"sns.set(style=\"whitegrid\")\n\n# Load the example Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Draw a nested barplot to show survival for class and sex\ng = sns.catplot(x=\"class\", y=\"survived\", hue=\"sex\", data=titanic,\n                height=6, kind=\"bar\", palette=\"pastel\")\ng.despine(left=True)\ng.set_ylabels(\"survival probability\")","52c9eb3d":"sns.set(style=\"whitegrid\", palette=\"pastel\")\n\n# Load the example iris dataset\niris = sns.load_dataset(\"iris\")\n\n# \"Melt\" the dataset to \"long-form\" or \"tidy\" representation\niris = pd.melt(iris, \"species\", var_name=\"measurement\")\n\n# Draw a categorical scatterplot to show each observation\nsns.swarmplot(x=\"measurement\", y=\"value\", hue=\"species\",\n              palette=[\"r\", \"g\", \"b\"], data=iris)","dc412a51":"sns.set(style=\"white\", palette=\"muted\", color_codes=True)\nrs = np.random.RandomState(10)\n\n# Set up the matplotlib figure\nf, (ax1,ax2) = plt.subplots(1, 2, figsize=(8, 8), sharex=False)\nsns.despine(left=True)\n\n# Generate a random univariate dataset\nd = rs.normal(size=100)\n\n# Plot a simple histogram with binsize determined automatically\nsns.distplot(d, kde=False, color=\"b\", ax = ax1)\n\n# Plot a histogram and kernel density estimate\nsns.distplot(d, color=\"m\", ax = ax2)\n\nplt.setp(axes, yticks=[])\nplt.tight_layout()","28419c52":"sns.set(style=\"darkgrid\")\n\n# Load an example dataset with long-form data\nfmri = sns.load_dataset(\"fmri\")\n\n# Plot the responses for different events and regions\nsns.lineplot(x=\"timepoint\", y=\"signal\",\n             hue=\"region\", style=\"event\",\n             data=fmri)","4819918d":"sns.set(style=\"ticks\", palette=\"pastel\")\n\n# Load the example tips dataset\ntips = sns.load_dataset(\"tips\")\n\n# Draw a nested boxplot to show bills by day and time\nsns.boxplot(x=\"day\", y=\"total_bill\",\n            hue=\"smoker\", palette=[\"m\", \"g\"],\n            data=tips)\nsns.despine(offset=10, trim=True)","69689364":"sns.set(style=\"ticks\", palette=\"pastel\")\n\n# Load the example flights dataset and convert to long-form\nflights_long = sns.load_dataset(\"flights\")\nflights = flights_long.pivot(\"month\", \"year\", \"passengers\")\n\n# Draw a heatmap with the numeric values in each cell\nf, ax = plt.subplots(figsize=(9, 6))\nsns.heatmap(flights, annot=True, fmt=\"d\", linewidths=.5, ax=ax, cmap='pink_r')","7ee0bf48":"labels = ['G1', 'G2', 'G3', 'G4', 'G5']\nmen_means = [20, 35, 30, 35, 27]\nwomen_means = [25, 32, 34, 20, 25]\nmen_std = [2, 3, 4, 1, 2]\nwomen_std = [3, 5, 2, 3, 3]\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nfig, ax = plt.subplots(figsize=(8,8))\n\nax.bar(labels, men_means, width, yerr=men_std, label='Men')\nax.bar(labels, women_means, width, yerr=women_std, bottom=men_means,\n       label='Women')\n\nax.set_ylabel('Scores')\nax.set_title('Scores by group and gender')\nax.legend()\n\nplt.show()","4a183e7e":"np.random.seed(19680801)\n\n\nN = 100\nr0 = 0.6\nx = 0.9 * np.random.rand(N)\ny = 0.9 * np.random.rand(N)\narea = (20 * np.random.rand(N))**2  # 0 to 10 point radii\nc = np.sqrt(area)\nr = np.sqrt(x ** 2 + y ** 2)\narea1 = np.ma.masked_where(r < r0, area)\narea2 = np.ma.masked_where(r >= r0, area)\nplt.scatter(x, y, s=area1, marker='.', c=c)\nplt.scatter(x, y, s=area2, marker='x', c=c)\n# Show the boundary between the regions:\ntheta = np.arange(0, np.pi \/ 2, 0.01)\nplt.plot(r0 * np.cos(theta), r0 * np.sin(theta))\n\nplt.show()","91e3960d":"#Libraries\nimport altair as alt","9ef93bab":"source = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)","95148ff7":"x = np.arange(100)\nsource = pd.DataFrame({\n  'x': x,\n  'f(x)': np.sin(x \/ 5)\n})\n\nalt.Chart(source).mark_line().encode(\n    x='x',\n    y='f(x)'\n)","ac1e658a":"## Histogram","84d2f04a":"# --- Bokeh ---","557dd13d":"## Box Plot","63aa44a7":"## Bar (grouped)","2c01cd03":"## Bar ","4308ef2a":"## Histogram","f8de479b":"## Image (with mouse position)","3ba17965":"# --- PyGal ---","f4216382":"# Collection of all the Data Visualization libraries & Plots\n\nThis notebook is dedicated to all the useful\/important plots from all the Data Visualization Libraries out there. In the notebook, I'm not going to re-invent the wheel in a sense that no specific dataset will be used, instead the data will be created on-the-fly for drawing the plot. \n\nHere are some of the featured libraries:\n\n* MPLD3\n* PyGal\n* Bokeh\n* Plotly\n* Seaborn\n* Matplotlib\n* Altair\n\nI sincerely hope that this notebook will be of immense help to all the new & upcoming Data Science enthusiasts out there. Please do consider to **UPVOTE** :-) ","2ba0c689":"## Line Plot","05fac71e":"## Line Plot","6be9f018":"## Bar (stacked)","04bd720f":"## Horizontal Bar Plot","3cdca482":"## SubPlots (with shared axes)","7237aefa":"## Scatter Plot","22277214":"## Bar (grouped)","9e7fc32f":"# --- MatplotLib ---","9d63b361":"## Stacked Area","d23539ef":"# --- Plotly ---","d080746f":"## Bubble Plot","01384bc1":"## Bar","9742e4e3":"## Box Plot","83d37b35":"# --- Altair ---","b7c760c5":"## Bar (grouped)","1abe1d81":"## Distribution Plot","1eb8d874":"# --- Seaborn ---","96f403b1":"## Bar","798bdc9b":"## Pie Plot","737edb90":"#  --- MPLD3 ---","e0b3d492":"## Bar(stacked)","5e7d46ff":"## Histogram","b9fd48a3":"## Box Plot","ffc3b236":"## Pie Plot","e896d676":"## Line Plot","99d19451":"## Heatmap","d70d0ffb":"## Box Plot","2aa9e4e9":"## Line","80a779bd":"## Scatter Plot","cedd3303":"## Stacked Line","490ccb19":"## Distribution Plot","f8fdf9f6":"## Line Plot","19106da7":"## Scatter Plot","ab542c7a":"## Bar ","7769b3d9":"## Bar (stacked)","621a9a50":"## Heatmap","b8f5f5dc":"## Bar","bcf393d1":"## Interactive Legend","6543db2e":"## Stacked Bar","e0e6c09b":"## Histogram","c013ba8e":"## Scatter Plot","7707598e":"## Line Plot","58b18571":"## Scatter Plot"}}