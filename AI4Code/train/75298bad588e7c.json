{"cell_type":{"b26ff198":"code","d6f85a19":"code","d3938411":"code","b74577d4":"code","32704db4":"code","5d077682":"code","227c9c35":"code","add70135":"code","29830703":"code","c87e2d56":"markdown","fb023623":"markdown","18f0dd55":"markdown","00dc9c84":"markdown","d9dbccac":"markdown"},"source":{"b26ff198":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import to_categorical\n# from keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline","d6f85a19":"seed = 42\nnp.random.seed(seed)","d3938411":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","b74577d4":"X = df.drop(['Id','Species'], axis = 1).to_numpy()\nY = df.Species.to_numpy()\nprint ('Unique values in the output : ', set(Y))\nprint ('Shape X :', X.shape)\nprint ('Shape Y :', Y.shape)","32704db4":"encoder = LabelEncoder()\nY_encoded = encoder.fit_transform(Y)\nY_dummy = to_categorical(Y_encoded)\nprint ('Shape of Y after One hot encoding :', Y_dummy.shape)","5d077682":"def baseline_model():\n    model = Sequential([\n        Dense(4, input_dim = (4), activation = 'relu'),\n        Dense(12, activation = 'relu'),\n        Dense(3, activation = 'sigmoid')\n    ])\n    model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n    return model","227c9c35":"single_model = baseline_model()\nhistory = single_model.fit(X, Y_dummy, validation_split = 0.1, epochs = 200, verbose = 0)","add70135":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Training & Validation loss')\nplt.xlabel('epochs')\nplt.show()\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Training & Validation Accuracy')\nplt.xlabel('epochs')\nplt.show()","29830703":"%%time \nestimator = KerasClassifier(build_fn = baseline_model, epochs = 200, batch_size = 5, verbose = 0)\nkFold = KFold(n_splits = 3, shuffle = True, random_state = seed)\nresults = cross_val_score(estimator, X, Y_dummy, cv = kFold)\nprint (f'Mean Accuracy : {round(results.mean()*100, 2)} % ; Std Dev : {round(results.std()*100, 2)}')","c87e2d56":"### K-Fold Cross Validation","fb023623":"### Importing Libraries","18f0dd55":"### Loading dataset","00dc9c84":"### Single Model","d9dbccac":"### Define Model\n\nThere is a `KerasClassifier` class in Keras that can be used as an Estimator in scikit-learn, the base type of model in the library. The `KerasClassifier` takes the name of a function as an argument. This function must return the constructed neural network model, ready for training. We can also pass arguments in the construction of the KerasClassifier class that will be passed on to the `fit()` function internally used to train the neural network"}}