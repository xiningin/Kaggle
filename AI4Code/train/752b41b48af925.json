{"cell_type":{"56cf810c":"code","ec355725":"code","07227f4f":"code","a4ac9c2e":"code","bc5d27d3":"code","76779245":"code","cb0a8b04":"code","a52a57e7":"code","5d0f0cda":"code","e9fddbeb":"code","0fca0a2e":"code","8af5a20a":"code","f2844b1a":"markdown","ec07cb68":"markdown","c6265dd7":"markdown","6380eb3b":"markdown","8aaa45be":"markdown","295e07e3":"markdown","224a6f67":"markdown","b7b5815b":"markdown","3c0561fa":"markdown"},"source":{"56cf810c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras import backend as K\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping\nimport tensorflow as tf\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ec355725":"dataframe = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-3\/train.csv', low_memory=False) # Training Data\ntrain_dataframe = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-3\/eval.csv', low_memory=False) # Testing Data","07227f4f":"dataframe.head()","a4ac9c2e":"dataframe.tail()","bc5d27d3":"dataframe.describe()","76779245":"df = dataframe.drop(['id', 'pubchem_id'], axis=1)\ndf.shape","cb0a8b04":"X = df.drop(['Eat'], axis=1)\nY = df['Eat']\nx = X.values\ny = Y.values","a52a57e7":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=42)\nx_train.shape","5d0f0cda":"model = Sequential()\nmodel.add(Dense(1000, input_dim=x.shape[1], kernel_initializer='normal', activation='sigmoid'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(500, kernel_initializer='normal', activation='sigmoid'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(50, kernel_initializer='normal'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError()])\nmonitor = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=5, verbose=1, mode='auto')\nmodel.fit(x_train, y_train, validation_data=(x_test, y_test), callbacks=[monitor], verbose=2, epochs=1000)\nmodel.summary()","e9fddbeb":"model1 = Sequential()\nmodel1.add(Dense(1000, input_dim=x.shape[1], kernel_initializer='normal', activation='relu'))\nmodel1.add(Dropout(0.25))\nmodel1.add(Dense(500, kernel_initializer='normal', activation='relu'))\nmodel1.add(Dropout(0.25))\nmodel1.add(Dense(50, kernel_initializer='normal'))\nmodel1.add(Dropout(0.25))\nmodel1.add(Dense(1))\nmodel1.compile(optimizer='adam', loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError()])\nmonitor = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=5, verbose=1, mode='auto')\nmodel1.fit(x_train, y_train, validation_data=(x_test, y_test), callbacks=[monitor], verbose=2, epochs=1000)\nmodel1.summary()","0fca0a2e":"model2 = Sequential()\nmodel2.add(Dense(1000, input_dim=x.shape[1], kernel_initializer='normal', activation='selu'))\nmodel2.add(Dropout(0.25))\nmodel2.add(Dense(500, kernel_initializer='normal', activation='selu'))\nmodel2.add(Dropout(0.25))\nmodel2.add(Dense(50, kernel_initializer='normal'))\nmodel2.add(Dropout(0.25))\nmodel2.add(Dense(1))\nmodel2.compile(optimizer='adam', loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError()])\nmonitor = EarlyStopping(monitor='val_loss', min_delta=0.001, patience=5, verbose=1, mode='auto')\nmodel2.fit(x_train, y_train, validation_data=(x_test, y_test), callbacks=[monitor], verbose=2, epochs=1000)\nmodel2.summary()","8af5a20a":"solution = np.array(model2(train_dataframe.drop(['id', 'pubchem_id'], axis=1).to_numpy())).flatten()\noutput = pd.DataFrame({'id': train_dataframe['id'], 'Eat': solution})\ndisplay(output)\noutput.to_csv('submission.csv', index=False)\n\nprint('Your submission was successfully saved') # Asserting submission was successfully saved","f2844b1a":"# Building Sequential Model","ec07cb68":"# Best Model Selection","c6265dd7":"After submitting each of our three submission files, we found that our third model, using 'selu' activation, or Scaled Exponential Linear Unit activation produced the lowest and best score for this competition. ","6380eb3b":"# Splitting data into training and testing sets","8aaa45be":"# Feature Engineering","295e07e3":"# Reading Data","224a6f67":"# Importing all necessary packages","b7b5815b":"# Saving solutions to CSVs","3c0561fa":"# Exploratory Data Analysis"}}