{"cell_type":{"1eecc680":"code","e889ae28":"code","227d0d6c":"code","83eac69a":"code","b3ae7849":"code","6a3ff331":"code","d5bd9135":"code","563dc34d":"code","268c8c2d":"code","94b7e083":"code","b8bf6020":"code","c4ff9741":"code","7ccf3df3":"code","37072fb6":"code","d3ed4ef9":"code","f1d11317":"code","85eb322a":"code","edef5350":"code","1743fad6":"code","5fab4422":"code","71613031":"code","c09442b6":"code","c306e21d":"code","764d45d5":"code","7611c5f3":"code","ba9eb7b7":"code","9369997b":"code","6b7243c5":"code","07f11e36":"code","9536a09d":"code","f6f7b584":"code","635b78cf":"code","0535a6c5":"code","7d3eb0d9":"code","974cfbb8":"code","a1b2502c":"code","4ce65f2f":"code","7bb5cb63":"code","d1ab79cd":"code","f23dfda6":"code","0cb0175f":"code","519f3787":"code","e004528b":"code","d9f8ef51":"code","2b29e567":"code","942173ea":"code","334d3de1":"code","d3b194ac":"code","d4e0d110":"code","5d84ad7e":"code","fac0c04c":"code","fbe00207":"code","aad8ffb1":"markdown","ec996f97":"markdown","b339ed37":"markdown","f27a3a8e":"markdown"},"source":{"1eecc680":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e889ae28":"# Data loading\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","227d0d6c":"df_train = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\")","83eac69a":"df_train.shape","b3ae7849":"fetaure_null_values_percentage = (df_train.isnull().sum()\/df_train.isnull().count())*float(100)","6a3ff331":"fetaure_null_values_percentage.sort_values(ascending = False).head(10)","d5bd9135":"fetaure_null_values_percentage[fetaure_null_values_percentage > 20]","563dc34d":"df_train = df_train.drop([\"Alley\" ,\"FireplaceQu\" , \"PoolQC\" ,\"Fence\" , \"MiscFeature\"] , axis = 1)\ndf_train.head()","268c8c2d":"df_train.isnull().sum()[df_train.isnull().sum() > 0]","94b7e083":"# now i am putting mean and mode values for numerical and categorical features respectively.","b8bf6020":"# numerical\n\ndf_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train[\"MasVnrArea\"] = df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mean())\n\n# categorical\n\ndf_train[\"MasVnrType\"] = df_train[\"MasVnrType\"].fillna(df_train[\"MasVnrType\"].mode()[0])\ndf_train[\"BsmtQual\"] = df_train[\"BsmtQual\"].fillna(df_train[\"BsmtQual\"].mode()[0])\ndf_train[\"BsmtCond\"] = df_train[\"BsmtCond\"].fillna(df_train[\"BsmtCond\"].mode()[0])\ndf_train[\"BsmtExposure\"] = df_train[\"BsmtExposure\"].fillna(df_train[\"BsmtExposure\"].mode()[0])\ndf_train[\"BsmtFinType1\"] = df_train[\"BsmtFinType1\"].fillna(df_train[\"BsmtFinType1\"].mode()[0])\ndf_train[\"BsmtFinType2\"] = df_train[\"BsmtFinType2\"].fillna(df_train[\"BsmtFinType2\"].mode()[0])\ndf_train[\"Electrical\"] = df_train[\"Electrical\"].fillna(df_train[\"Electrical\"].mode()[0])\ndf_train[\"GarageType\"] = df_train[\"GarageType\"].fillna(df_train[\"GarageType\"].mode()[0])\ndf_train[\"GarageYrBlt\"] = df_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].mode()[0])\ndf_train[\"GarageFinish\"] = df_train[\"GarageFinish\"].fillna(df_train[\"GarageFinish\"].mode()[0])\ndf_train[\"GarageQual\"] = df_train[\"GarageQual\"].fillna(df_train[\"GarageQual\"].mode()[0])\ndf_train[\"GarageCond\"] = df_train[\"GarageCond\"].fillna(df_train[\"GarageCond\"].mode()[0])\n","c4ff9741":"df_train.isnull().sum()[df_train.isnull().sum() > 0]","7ccf3df3":"df_train.shape","37072fb6":"# As we have enough categorical data so now we have to convert it to numerical using dummies and one hot encoding.","d3ed4ef9":"df_train.columns.to_series().groupby(df_train.dtypes).groups  # to determine data types","f1d11317":"categorical_columns = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n        'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n        'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n        'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n        'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n        'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n        'PavedDrive', 'SaleType', 'SaleCondition']","85eb322a":"len(categorical_columns)","edef5350":"later_add = df_train.loc[:,categorical_columns]\n","1743fad6":"later_add.shape","5fab4422":"dum_df_train = pd.get_dummies(df_train, columns = categorical_columns)","71613031":"dum_df_train.shape","c09442b6":"#dum_df_train = dum_df_train.join(later_add)","c306e21d":"x_train = dum_df_train","764d45d5":"x_train","7611c5f3":"x_train = x_train.drop(\"SalePrice\" , axis = 1)\n","ba9eb7b7":"x_train.columns","9369997b":"x_train.shape","6b7243c5":"y_train = dum_df_train.loc[:,\"SalePrice\"]","07f11e36":"df_test = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\")\ndf_test.shape","9536a09d":"df_test = df_test.drop([\"Alley\" ,\"FireplaceQu\" , \"PoolQC\" ,\"Fence\" , \"MiscFeature\"] , axis = 1)\ndf_test.head()","f6f7b584":"df_test.isnull().sum()[df_test.isnull().sum() > 0]","635b78cf":"# numerical\n\ndf_test[\"LotFrontage\"] = df_test[\"LotFrontage\"].fillna(df_test[\"LotFrontage\"].mean())\ndf_test[\"MasVnrArea\"] = df_test[\"MasVnrArea\"].fillna(df_test[\"MasVnrArea\"].mean())\ndf_test[\"BsmtFinSF1\"] = df_test[\"BsmtFinSF1\"].fillna(df_test[\"BsmtFinSF1\"].mean())\ndf_test[\"BsmtFinSF2\"] = df_test[\"BsmtFinSF2\"].fillna(df_test[\"BsmtFinSF2\"].mean())\ndf_test[\"BsmtUnfSF\"] = df_test[\"BsmtUnfSF\"].fillna(df_test[\"BsmtUnfSF\"].mean())\ndf_test[\"TotalBsmtSF\"] = df_test[\"TotalBsmtSF\"].fillna(df_test[\"TotalBsmtSF\"].mean())\ndf_test[\"GarageArea\"] = df_test[\"GarageArea\"].fillna(df_test[\"GarageArea\"].mean())\ndf_test[\"GarageCars\"] = df_test[\"GarageCars\"].fillna(df_test[\"GarageCars\"].mean())\n\n# categorical\n\ndf_test[\"MasVnrType\"] = df_test[\"MasVnrType\"].fillna(df_test[\"MasVnrType\"].mode()[0])\ndf_test[\"BsmtQual\"] = df_test[\"BsmtQual\"].fillna(df_test[\"BsmtQual\"].mode()[0])\ndf_test[\"BsmtCond\"] = df_test[\"BsmtCond\"].fillna(df_test[\"BsmtCond\"].mode()[0])\ndf_test[\"BsmtExposure\"] = df_test[\"BsmtExposure\"].fillna(df_test[\"BsmtExposure\"].mode()[0])\ndf_test[\"BsmtFinType1\"] = df_test[\"BsmtFinType1\"].fillna(df_test[\"BsmtFinType1\"].mode()[0])\ndf_test[\"BsmtFinType2\"] = df_test[\"BsmtFinType2\"].fillna(df_test[\"BsmtFinType2\"].mode()[0])\ndf_test[\"GarageType\"] = df_test[\"GarageType\"].fillna(df_test[\"GarageType\"].mode()[0])\ndf_test[\"GarageYrBlt\"] = df_test[\"GarageYrBlt\"].fillna(df_test[\"GarageYrBlt\"].mode()[0])\ndf_test[\"GarageFinish\"] = df_test[\"GarageFinish\"].fillna(df_test[\"GarageFinish\"].mode()[0])\ndf_test[\"GarageQual\"] = df_test[\"GarageQual\"].fillna(df_test[\"GarageQual\"].mode()[0])\ndf_test[\"GarageCond\"] = df_test[\"GarageCond\"].fillna(df_test[\"GarageCond\"].mode()[0])\ndf_test[\"MSZoning\"] = df_test[\"MSZoning\"].fillna(df_test[\"MSZoning\"].mode()[0])\ndf_test[\"Utilities\"] = df_test[\"Utilities\"].fillna(df_test[\"Utilities\"].mode()[0])\ndf_test[\"Exterior1st\"] = df_test[\"Exterior1st\"].fillna(df_test[\"Exterior1st\"].mode()[0])\ndf_test[\"Exterior2nd\"] = df_test[\"Exterior2nd\"].fillna(df_test[\"Exterior2nd\"].mode()[0])\ndf_test[\"SaleType\"] = df_test[\"SaleType\"].fillna(df_test[\"SaleType\"].mode()[0])\ndf_test[\"Functional\"] = df_test[\"Functional\"].fillna(df_test[\"Functional\"].mode()[0])\ndf_test[\"KitchenQual\"] = df_test[\"KitchenQual\"].fillna(df_test[\"KitchenQual\"].mode()[0])\ndf_test[\"BsmtFullBath\"] = df_test[\"BsmtFullBath\"].fillna(df_test[\"BsmtFullBath\"].mode()[0])\ndf_test[\"BsmtHalfBath\"] = df_test[\"BsmtHalfBath\"].fillna(df_test[\"BsmtHalfBath\"].mode()[0])","0535a6c5":"df_test.isnull().sum()[df_test.isnull().sum() > 0]","7d3eb0d9":"df_test.columns.to_series().groupby(df_test.dtypes).groups  # to determine data types","974cfbb8":"categorical_columns_test = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n        'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n        'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n        'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n        'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n        'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n        'PavedDrive', 'SaleType', 'SaleCondition']","a1b2502c":"len(categorical_columns_test)","4ce65f2f":"later_add_test = df_test.loc[:,categorical_columns_test]","7bb5cb63":"later_add_test.shape","d1ab79cd":"dum_df_test = pd.get_dummies(df_test, columns = categorical_columns_test)\ndum_df_test","f23dfda6":"#dum_df_test = dum_df_test.join(later_add_test)","0cb0175f":"dum_df_test","519f3787":"final_df=pd.concat([x_train,dum_df_test],axis=0)\nfinal_df","e004528b":"x_test = final_df.iloc[1460:,:]","d9f8ef51":"x_test.shape","2b29e567":"x_train.shape","942173ea":"import xgboost\nregressor=xgboost.XGBRegressor()","334d3de1":"## Hyper Parameter Optimization\n\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\nbase_score=[0.25,0.5,0.75,1]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","d3b194ac":"# Set up the random search with 4-fold cross validation\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","d4e0d110":"random_cv.fit(x_train,y_train)","5d84ad7e":"random_cv.best_params_","fac0c04c":"y_pred = random_cv.predict(x_test)\ny_pred","fbe00207":"##Create Sample Submission file and Submit using ANN\n\npred=pd.DataFrame(y_pred)\nsub_df=pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv\")\ndatasets=pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\n#datasets.to_csv('sample_submission.csv',index=False)","aad8ffb1":"### XG BOOST","ec996f97":"# For test data","b339ed37":"# For train data","f27a3a8e":"# Applying Algorithm"}}