{"cell_type":{"8fe6070a":"code","29ad3d75":"code","31739f4e":"code","6c355f21":"code","380d0ff8":"code","f4d07b08":"code","d787b79f":"code","aa69ced7":"code","b3d96244":"code","7439a01e":"code","c78b8f7c":"code","2f0f26a6":"code","8fe85625":"code","7cc542b2":"code","02bc7571":"code","b772345d":"code","8a1af7d9":"code","363875d3":"code","117f2b38":"code","c3083498":"code","04fe0ec9":"code","b5d1fff0":"code","a73a8c77":"code","c61520ef":"code","5c0ff590":"code","4a816bd8":"code","e40d9b2b":"code","153593f9":"code","017f3f44":"code","0ab05f4a":"code","d0108abe":"code","a2bbdadc":"code","3802a868":"code","744e9c40":"code","f98e35fd":"markdown","6bed0e00":"markdown","aa651016":"markdown","e7f03521":"markdown","88b68adc":"markdown","c2e3bb58":"markdown","be831424":"markdown","6e105442":"markdown"},"source":{"8fe6070a":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport pandas_datareader.data as web\nfrom pandas_datareader import data\nfrom datetime import datetime\nfrom pprint import pprint\nimport datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","29ad3d75":"spy = pd.read_csv('\/kaggle\/input\/spy-trading\/data\/SPY.csv')\nspy","31739f4e":"spx = pd.read_csv('\/kaggle\/input\/spy-trading\/data\/^GSPC.csv')\ndji = pd.read_csv('\/kaggle\/input\/spy-trading\/data\/^DJI.csv')\nixic = pd.read_csv('\/kaggle\/input\/spy-trading\/data\/^IXIC.csv')","6c355f21":"indice = pd.DataFrame(index = spy.index)","380d0ff8":"indice['spy'] = spy['Open'].shift(-1) - spy['Open']\nindice['spy_lag1'] = indice['spy'].shift(1)\nindice['ixic'] = ixic['Open'] - ixic['Open'].shift(1)\nindice['spx'] = spx[\"Open\"] - spx['Open'].shift(1)\nindice['dji'] = dji['Open'] - dji['Open'].shift(1)\nindice['Price'] = spy['Open']","f4d07b08":"indice.head()","d787b79f":"indice.isnull().sum()","aa69ced7":"indice = indice.fillna(method = 'ffill')\nindice = indice.dropna()","b3d96244":"indice.isnull().sum()","7439a01e":"indice.to_csv('indice.csv',index=False)","c78b8f7c":"print(indice.shape)","2f0f26a6":"Train = indice.iloc[-6820:-3410, :]\nTest = indice.iloc[-3410:, :]\nprint(Train.shape, Test.shape)","8fe85625":"from pandas.plotting import scatter_matrix\nsm = scatter_matrix(Train, figsize=(12, 12))","7cc542b2":"sb.pairplot(Train, diag_kind=\"kde\", height=3, aspect=0.6)","02bc7571":"corr_data = Train.iloc[:, :-1].corr()\ncorr_data.style.background_gradient(cmap='coolwarm', axis=None)","b772345d":"Train","8a1af7d9":"corr_array = Train.iloc[:, :-1].corr()['spy']\nprint(corr_array)","363875d3":"import statsmodels.formula.api as smf\nformula = 'spy ~ spy_lag1 + ixic + spx + dji'\nlm = smf.ols(formula=formula, data=Train).fit()\nlm.summary()","117f2b38":"Train['PredictedY'] = lm.predict(Train)\nTest['PredictedY'] = lm.predict(Test)","c3083498":"Train","04fe0ec9":"plt.xlabel('spy')\nplt.ylabel('PredictedY')\nplt.scatter(Train['spy'], Train['PredictedY'])","b5d1fff0":"def adjustedMetric(data, model, model_k, yname):\n    data['yhat'] = model.predict(data)\n    SST = ((data[yname] - data[yname].mean())**2).sum()\n    SSR = ((data['yhat'] - data[yname].mean())**2).sum()\n    SSE = ((data[yname] - data['yhat'])**2).sum()\n    r2 = SSR\/SST\n    adjustR2 = 1 - (1-r2)*(data.shape[0] - 1)\/(data.shape[0] -model_k -1)\n    RMSE = (SSE\/(data.shape[0] -model_k -1))**0.5\n    return adjustR2, RMSE\ndef assessTable(test, train, model, model_k, yname):\n    r2test, RMSEtest = adjustedMetric(test, model, model_k, yname)\n    r2train, RMSEtrain = adjustedMetric(train, model, model_k, yname)\n    assessment = pd.DataFrame(index=['R2', 'RMSE'], columns=['Train', 'Test'])\n    assessment['Train'] = [r2train, RMSEtrain]\n    assessment['Test'] = [r2test, RMSEtest]\n    return assessment","a73a8c77":"assessTable(Test, Train, lm, 4, 'spy')","c61520ef":"print('Adjusted R2 and RMSE on Train:', adjustedMetric(Train, lm, 4, 'spy'))\nprint('Adjusted R2 and RMSE on Test:', adjustedMetric(Test, lm, 4, 'spy'))","5c0ff590":"indice.head()","4a816bd8":"Train['Order'] = [1 if sig>0 else -1 for sig in Train['PredictedY']]\nTrain['Profit'] = Train['spy'] * Train['Order']\n\nTrain['Wealth'] = Train['Profit'].cumsum()\nprint('Total profit made in Train: ', Train['Profit'].sum())","e40d9b2b":"plt.figure(figsize=(12, 12))\nplt.title('Performance of Strategy in Train')\nplt.plot(Train['Wealth'].values, color='green', label='Signal based strategy')\nplt.plot(Train['spy'].cumsum().values, color='red', label='Buy and Hold strategy')\nplt.legend()\nplt.show()","153593f9":"Test['Order'] = [1 if sig>0 else -1 for sig in Test['PredictedY']]\nTest['Profit'] = Test['spy'] * Test['Order']\n\nTest['Wealth'] = Test['Profit'].cumsum()\nprint('Total profit made in Test: ', Test['Profit'].sum())","017f3f44":"plt.figure(figsize=(12, 12))\nplt.title('Performance of Strategy in Train')\nplt.plot(Test['Wealth'].values, color='green', label='Signal based strategy')\nplt.plot(Test['spy'].cumsum().values, color='red', label='Buy and Hold strategy')\nplt.legend()\nplt.show()","0ab05f4a":"Train['Wealth'] = Train['Wealth'] + Train.loc[Train.index[0], 'Price']\nTest['Wealth'] = Test['Wealth'] + Test.loc[Test.index[0], 'Price']","d0108abe":"Train['Return'] = np.log(Train['Wealth']) - np.log(Train['Wealth'].shift(1))\ndailyr = Train['Return'].dropna()\n\nprint('Daily Sharpe Ratio for training data is ', dailyr.mean()\/dailyr.std(ddof=1))\nprint('Yearly Sharpe Ratio for training data is ', (252**0.5)*dailyr.mean()\/dailyr.std(ddof=1))","a2bbdadc":"Test['Return'] = np.log(Test['Wealth']) - np.log(Test['Wealth'].shift(1))\ndailyr = Test['Return'].dropna()\n\nprint('Daily Sharpe Ratio for testing data is ', dailyr.mean()\/dailyr.std(ddof=1))\nprint('Yearly Sharpe Ratio for testing data is ', (252**0.5)*dailyr.mean()\/dailyr.std(ddof=1))","3802a868":"Train['Peak'] = Train['Wealth'].cummax()\nTrain['Drawdown'] = (Train['Peak'] - Train['Wealth'])\/Train['Peak']\nprint('Maximum Drawdown in Train is ', Train['Drawdown'].max())","744e9c40":"Test['Peak'] = Test['Wealth'].cummax()\nTest['Drawdown'] = (Test['Peak'] - Test['Wealth'])\/Test['Peak']\nprint('Maximum Drawdown in Test is ', Test['Drawdown'].max())","f98e35fd":"#STEP 2: Split Dataset","6bed0e00":"#STEP 7: Profit of Signal Based Strategy","aa651016":"#STEP 6: Statictical Evalution","e7f03521":"#STEP 3: Explore Dataset","88b68adc":"#STEP 5: Make Prediction","c2e3bb58":"#STEP 4: Check the Correlation","be831424":"#STEP 1: Data Preprocessing","6e105442":"#STEP 8: Practical Evaluation"}}