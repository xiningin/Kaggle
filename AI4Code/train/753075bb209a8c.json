{"cell_type":{"771bbc03":"code","477ff977":"code","e2639059":"code","0658a9ff":"code","10342b87":"code","7e77705c":"code","e2589df1":"code","46831369":"code","1fbff763":"code","83495613":"code","0c231cfa":"code","6ed9d273":"code","58218a82":"code","86a17d26":"code","c4c9590e":"code","eb67a278":"code","c5b04545":"code","f172e403":"code","930a9599":"code","e54f2b12":"code","cd6acaa9":"markdown","678d0745":"markdown","1bf3b4fb":"markdown","3d352ce5":"markdown","b300569e":"markdown","2706197b":"markdown","d136214c":"markdown","6165bf2d":"markdown","fd13e7cc":"markdown","c5cc6860":"markdown","0975f690":"markdown"},"source":{"771bbc03":"import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np","477ff977":"titles = []\nyears = []\nurls = []\nranks = [i for i in range(1, 1001)]","e2639059":"def JazzStandardsTable(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'html.parser')\n\n    for i in range(25, 125):\n        titles.append(soup.find_all('a')[i].get_text())\n    \n    for i in range(25, 125):\n        urls.append(soup.find_all('a')[i].get('href'))\n    \n    for i in range(0, 100):\n        years.append(soup.find_all('tr', class_='JSContentsLine')[i].get_text().split('\\xa0')[0][-4:])","0658a9ff":"url = 'https:\/\/www.jazzstandards.com\/compositions\/index.htm'\nJazzStandardsTable(url)\n\nfor i in range(2, 11):\n    index = url.find('index')\n    url = url[:index+5] + str(i) + '.htm'\n    JazzStandardsTable(url)","10342b87":"title = pd.Series(titles, name='Title')\nyear = pd.Series(years, name='Year')\nrank = pd.Series(ranks, name='Rank')\nurl = pd.Series(urls, name='URL')","7e77705c":"JazzStandards = pd.concat([rank, title, year, url], axis=1)","e2589df1":"JazzStandards","46831369":"music = []\nlyrics = []","1fbff763":"for url in urls:\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'html.parser')\n    music.append(soup.find('table', id='table33').find_all('tr', class_='JSQuote')[-2].get_text().strip().split('\\n')[2:])\n    lyrics.append(soup.find('table', id='table33').find_all('tr', class_='JSQuote')[-1].get_text().strip().split('\\n')[2:])","83495613":"Music = pd.Series(music, name='Composer(s)')\nLyrics = pd.Series(lyrics, name='Lyricist(s)')","0c231cfa":"for a in range(len(Lyrics)):\n    for b in range(len(Lyrics[a])):\n        Lyrics[a][b] = Lyrics[a][b].strip()","6ed9d273":"for a in range(len(Music)):\n    for b in range(len(Music[a])):\n        Music[a][b] = Music[a][b].strip()","58218a82":"Music = Music.apply(lambda x: np.nan if len(x)==0 else x)","86a17d26":"Music.fillna(Lyrics, inplace=True)","c4c9590e":"for i in range(len(Lyrics)):\n    Lyrics[i] = ', '.join(Lyrics[i])","eb67a278":"for i in range(len(Lyrics)):\n    Music[i] = ', '.join(Music[i])","c5b04545":"JazzStandards = pd.concat([JazzStandards, Music, Lyrics], axis=1)","f172e403":"JazzStandards = JazzStandards[['Rank', 'Title', 'Year', 'Composer(s)', 'Lyricist(s)', 'URL']]","930a9599":"JazzStandards.head(60)","e54f2b12":"JazzStandards.to_csv(\"JazzStandards.csv\", header=True, index=False)","cd6acaa9":"### Creating and concatenating the \"Rank\", \"Title\", \"Year\", and \"URL\" columns","678d0745":"In some of the jazz standards, the music and lyrics were written by the same person. In the code I have written so far, for those standards, the \"Music\" Series is an empty list, while the person is available in the \"Lyrics\" series. Therefore, in the following few cells, I am filling those cells by copying the ones from the \"Lyrics\" series.","1bf3b4fb":"# Web Scraping Jazz Standards","3d352ce5":"### Adding Composer(s) and Lyricist(s) columns","b300569e":"Converting python lists into pandas Series, so that I can concatenate them and create the first version of **JazzStandards** DataFrame.","2706197b":"### Importing the libraries","d136214c":"![JazzStandards%20-%20Copy.png](attachment:JazzStandards%20-%20Copy.png)","6165bf2d":"In each of the urls of the jazz standards, there is a table indicating the composer and lyricist. The rest of the code scrapes that data, cleans it, converts it to pandas Series and concatenates them to create the last version of **JazzStandards** DataFrame.","fd13e7cc":"The URLs that I will scrape data from has this structure: \"...\/index.htm\", \"...\/index2.htm\", \"...\/index3.htm\" ... \"...\/index10.htm\".\n\nTherefore, I have written a for loop to place the right number at the end of the word \"index\" each time JazzStandardsTable function is called.","c5cc6860":"### Cleaning Data","0975f690":"I have defined a *JazzStandardsTable* function that will scrape data from the url given to it as an argument.\n\nBy looking at the html documents of the urls, I have realized that at each page, the standards are listed between 25th and 125th 'a' tags. I have written the for loops accordingly."}}