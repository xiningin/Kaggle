{"cell_type":{"6de408da":"code","ee1c3899":"code","7c67b7b6":"code","e64172d3":"code","45934393":"code","cd0fe985":"code","8dbb1005":"code","02f9a202":"code","068dd711":"code","3f74b4af":"code","fbee622b":"code","ad0f5b4f":"code","5ebac173":"code","3e3b15ef":"code","c00c93f4":"code","bda22d11":"code","bf0cdc40":"code","a923c31e":"code","041e1c8d":"code","1d928725":"code","f71a8f9f":"code","b621daac":"code","c89219fb":"code","3f9723f2":"code","f0949d8b":"code","db580a2a":"code","fcee439d":"code","33408b13":"code","80303918":"code","bbe62b2d":"code","3cfcb5b7":"code","c1806de4":"code","27916240":"code","7a792e46":"code","bec79a93":"code","6da40df6":"code","32604bec":"code","5ab9678a":"markdown","5ed594f3":"markdown","0121ce77":"markdown","caea8db2":"markdown","2d6d27d2":"markdown","48b26b62":"markdown","24779008":"markdown","54b3d3e3":"markdown","2bc4a0e2":"markdown","09607cd8":"markdown","707462a3":"markdown","5033dc64":"markdown","7a69afa8":"markdown","6aa82c38":"markdown"},"source":{"6de408da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee1c3899":"import tensorflow as tf\nimport re\nimport pandas as pd\nimport nltk\nimport string\nfrom nltk.corpus import stopwords          \nfrom nltk.stem import WordNetLemmatizer   \nfrom nltk.corpus import stopwords       \nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation\nfrom tensorflow.keras.layers import Bidirectional, GlobalMaxPool1D\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import initializers, regularizers, constraints, optimizers, layers\nfrom sklearn.model_selection import train_test_split\n\n","7c67b7b6":"training = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip\")\ntesting = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip\")","e64172d3":"training.info()","45934393":"testing.info()","cd0fe985":"training.isnull().sum()\n","8dbb1005":"testing.isnull().sum()","02f9a202":"X_train = training[\"comment_text\"]\n\ny_train = training[[\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]]\n\nX_test = testing[\"comment_text\"]\n","068dd711":"X_train","3f74b4af":"X_test","fbee622b":"y_train","ad0f5b4f":"feature = training.drop(['id', 'comment_text'], axis=1)     ### Removed unnecessary columns - id and comment_text\ncounts = []                                               ### A list that contains tuple which consists of class label and number of comments for that particular class \ncategories = list(feature.columns.values)\nfor i in categories:\n    counts.append((i, feature[i].sum()))\n    \ndf_1 = pd.DataFrame(counts, columns=['Feature Labels', 'Total Comments'])   ### Dataframe made up of category and total number of comments\ndf_1.plot(x='Feature Labels', y='Total Comments', kind='bar',figsize=(8,8))\nplt.title(\"Comments per category\")\nplt.ylabel('Total comments', fontsize=12)\nplt.xlabel('Feature Labels', fontsize=12)\n","5ebac173":"import seaborn as sns\nplt.figure(figsize=(10,8)) \nsns.heatmap(feature.corr(), annot =True, fmt='.0%')","3e3b15ef":"length = training['comment_text'].str.len()\n\nprint(\"Max length of a string is {}\".format(length.max()))\nprint(\"Mean length of a string is {}\".format(length.mean()))\nprint(\"Minimum length of a string is {}\".format(length.min()))","c00c93f4":"alphanumeric = lambda x: re.sub('\\w*\\d\\w*', ' ', x)\npunc_lower = lambda x: re.sub('[%s]' % re.escape(string.punctuation), ' ', x.lower())\nremove_n = lambda x: re.sub(\"\\n\", \" \", x)\nremove_non_ascii = lambda x: re.sub(r'[^\\x00-\\x7f]',r' ', x)\ntraining['comment_text'] = training['comment_text'].map(alphanumeric).map(punc_lower).map(remove_n).map(remove_non_ascii)\ntraining['comment_text'][0]","bda22d11":"testing['comment_text'] = testing['comment_text'].map(alphanumeric).map(punc_lower).map(remove_n).map(remove_non_ascii)\ntesting['comment_text'][0]","bf0cdc40":"X_train = training[\"comment_text\"]\n\ny_train = training[[\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]]\n\nX_test = testing[\"comment_text\"]\n","a923c31e":"def Token(X,y):\n    tok = Tokenizer(num_words = 20000)\n    tok.fit_on_texts(list(X))\n    tok_train = tok.texts_to_sequences(X)\n    tok_test = tok.texts_to_sequences(y)\n    return tok_train, tok_test\n","041e1c8d":"tokenized_train,tokenized_test= Token(X_train,X_test)\n\nmaxlen = 150\nx_train = pad_sequences(tokenized_train, maxlen = maxlen)\nx_test = pad_sequences(tokenized_test, maxlen = maxlen)","1d928725":"def LSTM_Model_0(maxlen, max_feature):\n    pretrained_weights = Input(shape = (maxlen,))\n    embed_size = 128\n    x = LSTM(120, return_sequences = True, name = \"lstm_layer\")\n    x = Embedding(max_feature, embed_size)(pretrained_weights)\n    x = GlobalMaxPool1D()(x)\n    x = Dense(64, activation = \"relu\")(x)\n    x = Dense(32, activation = \"relu\")(x)\n    x = Dense(6, activation = \"sigmoid\")(x)\n    model = Model(inputs = pretrained_weights, outputs = x)\n    model.compile(loss = \"binary_crossentropy\",\n             optimizer = \"adam\",\n             metrics = [\"accuracy\"])\n    return model\n","f71a8f9f":"lstm_0=LSTM_Model_0(150, 20000)\n\nbatch_size = 128\nepochs = 10\nhistory_0 = lstm_0.fit(x_train, y_train, batch_size = batch_size, epochs = epochs, validation_split = 0.3, shuffle=True)\n","b621daac":"tf.keras.utils.plot_model(lstm_0)","c89219fb":"loss = history_0.history['loss']\nval_loss = history_0.history['val_loss']\n\nepochs = range(1, len(loss)+1)\n\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show();","3f9723f2":"loss = history_0.history['accuracy']\nval_loss = history_0.history['val_accuracy']\n\nepochs = range(1, len(loss)+1)\n\nplt.plot(epochs, loss, label='Accuracy')\nplt.plot(epochs, val_loss, label='Validation Accuracy')\nplt.title('Accuracy and validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show();","f0949d8b":"tokenized_train,tokenized_test= Token(X_train,X_test)\n\nmaxlen = 150\nx_train = pad_sequences(tokenized_train, maxlen = maxlen)\nx_test = pad_sequences(tokenized_test, maxlen = maxlen)","db580a2a":"def LSTM_Model_1(maxlen, max_feature):\n    pretrained_weights = Input(shape = (maxlen,))\n    embed_size = 128\n    x = LSTM(80, return_sequences = True, name = \"lstm_layer\")\n    x = Embedding(max_feature, embed_size)(pretrained_weights)\n    x = GlobalMaxPool1D()(x)\n    x = Dropout(0.1)(x)\n    x = Dense(50, activation = \"sigmoid\")(x)\n    x = Dropout(0.1)(x)\n    x = Dense(6, activation = \"sigmoid\")(x)\n    model = Model(inputs = pretrained_weights, outputs = x)\n    model.compile(loss = \"binary_crossentropy\",\n             optimizer = \"adam\",\n             metrics = [\"accuracy\"])\n    return model\n","fcee439d":"lstm_1=LSTM_Model_1(150, 20000)\n\nbatch_size = 512\nhistory_1 = lstm_1.fit(x_train, y_train, batch_size = batch_size, epochs = 10, validation_split = 0.3, shuffle=True)\n","33408b13":"tf.keras.utils.plot_model(lstm_1)","80303918":"loss = history_1.history['loss']\nval_loss = history_1.history['val_loss']\n\nepochs = range(1, len(loss)+1)\n\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show();","bbe62b2d":"loss = history_1.history['accuracy']\nval_loss = history_1.history['val_accuracy']\n\nepochs = range(1, len(loss)+1)\n\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show();","3cfcb5b7":"def LSTM_Model_3(maxlen, max_feature):\n    pretrained_weights = Input(shape = (maxlen,))\n    embed_size = 128\n    x = LSTM(30, return_sequences = True, name = \"lstm_layer\")\n    x = Embedding(max_feature, embed_size)(pretrained_weights)\n    x = GlobalMaxPool1D()(x)\n    x = Dense(64, activation = \"relu\")(x)\n    x = Dense(32, activation = \"sigmoid\")(x)\n    x = Dense(6, activation = \"sigmoid\")(x)\n    model = Model(inputs = pretrained_weights, outputs = x)\n    model.compile(loss = \"binary_crossentropy\",\n             optimizer = \"adam\",\n             metrics = [\"accuracy\"])\n    return model\n","c1806de4":"lstm_3=LSTM_Model_3(150, 20000)\n\nbatch_size = 90\nhistory = lstm_3.fit(x_train, y_train, batch_size = batch_size, epochs = 6, validation_split = 0.3, shuffle=True)\n","27916240":"loss = history.history['accuracy']\nval_loss = history.history['val_accuracy']\n\nepochs = range(1, len(loss)+1)\n\nplt.plot(epochs, loss, label='Training loss')\nplt.plot(epochs, val_loss, label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show();","7a792e46":"y_pred = lstm_3.predict(x_test)","bec79a93":"\nsubmiss_df= pd.DataFrame(y_pred, columns= [\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"])\nsubmiss_df.sample(n=6)","6da40df6":"\ntarget_cols = np.array(['toxic','severe_toxic','obscene', 'threat','insult', 'identity_hate'])\nfinal_predict_test = pd.concat([pd.DataFrame(y_pred, columns=target_cols)], 1)\nt1 = testing['id']\nfinal_predict_test = pd.concat([t1,final_predict_test],1)\nfinal_predict_test.sample(n=4)\n","32604bec":"submission = pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip')\nsubmission[[\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]] = y_pred\nsubmission.to_csv('submission.csv', index=False)","5ab9678a":"# **Model_0**","5ed594f3":"Using Drop Out Functions to avoid Overfitting of the model","0121ce77":"# **Shubham Fulzele(1001947006)**","caea8db2":"**Data Cleaning**","2d6d27d2":"**Data Visualization**","48b26b62":"# Predicting output of test set","24779008":"# **MODEL_3**","54b3d3e3":"# Check for any NULL values present in both the training and testing dataset.","2bc4a0e2":"# **Splitting the dataset**","09607cd8":"# **TOXIC COMMENT CLASSIFIER USING LSTM**","707462a3":"# Importing Dataset","5033dc64":"No null values were found, so we are good to go ahead","7a69afa8":"**MODEL**","6aa82c38":"# **Model_1**"}}