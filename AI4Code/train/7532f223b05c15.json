{"cell_type":{"3353da2b":"code","24f4931d":"code","fba24441":"code","ff9fa31e":"code","48c9ed00":"code","dfa69566":"code","3b54757b":"code","e14b72f0":"code","70778e74":"code","e4a04630":"code","c7d191e9":"code","642decd7":"code","e0d78dfb":"code","cdb0f971":"code","304d33d0":"code","c1234bcf":"code","dd830c8a":"code","15e53799":"code","d688f664":"code","8c57bdb9":"code","c5d26316":"code","3bc8309a":"code","1ed34f0d":"code","05e78815":"markdown","57c70dfc":"markdown"},"source":{"3353da2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24f4931d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import roc_curve, auc  #Metrics\nfrom sklearn.model_selection import train_test_split","fba24441":"# fillColor = \"#FFA07A\"\n# fillColor2 = \"#F1C40F\"\nloans = pd.read_csv('\/kaggle\/input\/ny-home-mortgage\/ny_hmda_2015.csv')\nloans.head()","ff9fa31e":"# Covert categorical variables into numbers\ncols = [f_ for f_ in loans.columns if loans[f_].dtype != 'object']\nfeatures = cols\n\nlist_to_remove = ['action_taken','purchaser_type',\n                  'denial_reason_1','denial_reason_2','denial_reason_3','sequence_number']\n\nfeatures= list(set(cols).difference(set(list_to_remove)))\n\nX = loans[features]\ny = loans['action_taken']","48c9ed00":"# We define a function in which we mark the Loans which are \n# originated as 1 and the Loans which are NOT originated as 0\ndef change_action_taken(y):\n    if ( y == 1):\n        return 1\n    else:\n        return 0","dfa69566":"# Apply the above function to get the labels for each record\ny = loans['action_taken'].apply(change_action_taken)\n\nX = X.fillna(0)","3b54757b":"from lightgbm import LGBMClassifier","e14b72f0":"# Construct a Gradient Boosting Classifier\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\nfirst_model = LGBMClassifier(random_state=1).fit(train_X, train_y)","70778e74":"# Get predictions on the validation set\npredictions =  first_model.predict_proba(val_X)","e4a04630":"# Plot the ROC curve.\n# It is close to the upper bound and the left bound, so its performance is reasonable.\nfpr, tpr, thresholds = roc_curve(val_y, predictions[:,1])\n\nfig, ax = plt.subplots()\nax.plot(fpr, tpr)\nax.plot([0, 1], [0, 1], transform=ax.transAxes, ls=\"--\", c=\".3\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.rcParams['font.size'] = 12\nplt.title('ROC curve for classifier')\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.grid(True)","c7d191e9":"# Idea1: What are the approval rates in the model predictions for each race?","642decd7":"loans.columns","e0d78dfb":"loans['applicant_ethnicity_name'].value_counts()","cdb0f971":"loans['applicant_ethnicity'].value_counts()","304d33d0":"# Get loan applications from white applicants\nloans_not_latino = X[X['applicant_ethnicity'] == 2]\n\nloans_latino = X[X['applicant_ethnicity'] == 1]","c1234bcf":"predictions_not_latino = first_model.predict(loans_not_latino)\nprint(predictions_not_latino)\n\npredictions_latino = first_model.predict(loans_latino)\nprint(predictions_latino)","dd830c8a":"approval_rate_not_latino = np.sum(predictions_not_latino) \/ predictions_not_latino.shape\nprint(\"Approval rate for Non Latino's:\", approval_rate_not_latino * 100)\n\napproval_rate_latino = np.sum(predictions_latino) \/ predictions_latino.shape\nprint(\"Approval rate for Latino's:\", approval_rate_latino * 100)","15e53799":"loans['applicant_race_name_1'].value_counts()","d688f664":"loans['applicant_race_1'].value_counts()","8c57bdb9":"# Get loan applications from white applicants\nloans_white = X[X['applicant_race_1'] == 5]\n# loans_white.head()\n\n# Get loan applications from black applicants\nloans_black = X[X['applicant_race_1'] == 3]\n# loans_black.head()\n\n# Get loan applications from asian applicants\nloans_asian = X[X['applicant_race_1'] == 2]\n# loans_asian.head()\n\n# Get loan applications from indian applicants\nloans_indian = X[X['applicant_race_1'] == 1]\n# loans_indian.head()\n\n# Get loan applications from Hawaiian applicants\nloans_hawaiian = X[X['applicant_race_1'] == 4]\n# loans_hawaiian.head()","c5d26316":"# Get model predictions on these applicants\npredictions_white = first_model.predict(loans_white)\nprint(predictions_white)\n\n# Get model predictions on these applicants\npredictions_black = first_model.predict(loans_black)\nprint(predictions_black)\n\n# Get model predictions on these applicants\npredictions_asian = first_model.predict(loans_asian)\nprint(predictions_asian)\n\n# Get model predictions on these applicants\npredictions_indian = first_model.predict(loans_indian)\nprint(predictions_indian)\n\n# Get model predictions on these applicants\npredictions_hawaiian = first_model.predict(loans_hawaiian)\nprint(predictions_hawaiian)","3bc8309a":"# Calculate the approval rates among predictions\napproval_rate_white = np.sum(predictions_white) \/ predictions_white.shape\nprint(\"Approval rate for Whites:\", approval_rate_white * 100)\n\napproval_rate_black = np.sum(predictions_black) \/ predictions_black.shape\nprint(\"Approval rate for Black:\", approval_rate_black* 100)\n\napproval_rate_asian = np.sum(predictions_asian) \/ predictions_asian.shape\nprint(\"Approval rate for Asian:\", approval_rate_asian* 100)\n\napproval_rate_indian = np.sum(predictions_indian) \/ predictions_indian.shape\nprint(\"Approval rate for Indian:\", approval_rate_indian* 100)\n\napproval_rate_hawaiian = np.sum(predictions_hawaiian) \/ predictions_hawaiian.shape\nprint(\"Approval rate for Hawaiian:\", approval_rate_hawaiian* 100)\n\n","1ed34f0d":"#Divide each racial group into different income groups and compare ","05e78815":"# Examine racial biase of this classifier","57c70dfc":"## Modeling"}}