{"cell_type":{"0b0a79ae":"code","b42b28f9":"code","e7ca9c12":"code","83bd8654":"code","f4adf6dd":"code","70492060":"code","eb23d9b7":"code","7079cdaa":"code","9ed1a338":"code","722d3c8a":"code","2db53164":"code","9a7b0ace":"code","beab309c":"code","a07377f1":"code","1b2a7c6f":"code","af649275":"code","d1d2a321":"code","d289eb85":"code","b676f944":"code","b02a71c1":"code","30f06d27":"code","2132d83f":"code","4dda0e2c":"code","ad858b89":"code","fb54a985":"code","e33d8a5b":"code","67bde58a":"code","db99d66e":"code","8a2c7c87":"code","ff21b681":"code","0043a8ce":"code","5df2e393":"code","bbdd317f":"code","8c703a3c":"code","92bc2f3f":"code","4d796d8b":"code","08b71f47":"code","5c344a1f":"code","6d61151e":"code","603fbb91":"code","e94053ca":"code","e5668852":"code","9c18760c":"code","9dcd3184":"code","f75fa177":"code","8ed30016":"code","9a0bd7e4":"code","61a99eb4":"code","cc7a0995":"code","dc438b2c":"markdown","67bdd3e8":"markdown","9f14f32f":"markdown","1815fb3f":"markdown","6e21cc9b":"markdown","a1c274fb":"markdown","39bb2603":"markdown","dfd5b9fe":"markdown","82461375":"markdown","b9121d14":"markdown","4d5a4ad5":"markdown","8290c2b9":"markdown","c5b4ad79":"markdown","a3f05ef5":"markdown","468b54a2":"markdown","d26996d7":"markdown","3bcb702d":"markdown","2d350bbb":"markdown","9fa19369":"markdown","7a4032ec":"markdown","9d9d9039":"markdown","8062bad6":"markdown","3ae4d8fc":"markdown","7f690fcb":"markdown","8d844a6c":"markdown","bcd00be0":"markdown","d9b3d416":"markdown","8ca7fa18":"markdown","b36d9d08":"markdown"},"source":{"0b0a79ae":"from pandas import Series\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\n\nimport operator\nimport time\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler,MinMaxScaler, RobustScaler, OrdinalEncoder, PowerTransformer, QuantileTransformer\nfrom sklearn.linear_model import LogisticRegression,Ridge\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score , train_test_split, GridSearchCV,RandomizedSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\n\nfrom catboost import CatBoost,CatBoostClassifier, Pool\nfrom catboost.utils import get_roc_curve\nimport lightgbm\nfrom xgboost import XGBClassifier\nimport pickle\n\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix, auc, mean_squared_error, roc_auc_score, roc_curve, accuracy_score, precision_score, recall_score, f1_score,precision_recall_curve,average_precision_score\n\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\nimport statsmodels.api as sm\nimport scipy.stats as sst\nimport warnings\nimport plotly.express as px\nimport datatable as dt\nfrom sklearn import metrics\nimport itertools\n\nfrom datetime import date\nfrom datetime import datetime, timedelta\n\nimport warnings; warnings.simplefilter('ignore') # \u0423\u0431\u0438\u0440\u0430\u0435\u0442 \u043d\u0435\u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\nRANDOM_SEED = 40                                 # \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\n!pip freeze > requirements.txt                   # \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b","b42b28f9":"# \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 pandas\n# pd.set_option('display.max_rows', 50)\n# pd.set_option('display.max_columns', 50)\n# pd.options.mode.chained_assignment = None \n\nsns.color_palette('muted')  # \u043f\u0430\u043b\u0438\u0442\u0440\u0430\nsns.palplot(sns.color_palette('muted'))","e7ca9c12":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring\/'\ntrain = pd.read_csv(DATA_DIR + 'train.csv')\ntest = pd.read_csv(DATA_DIR + 'test.csv')\nsample_submission = pd.read_csv(DATA_DIR + 'sample_submission.csv')","83bd8654":"print('--- \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f ---\\nshape=', train.shape)\ndisplay(train.sample(5))\nprint('--- \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f ---\\nshape=', test.shape)\ndisplay(test.sample(5))","f4adf6dd":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c train \u0438 test \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c train\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c test\ntest['default'] = 0 # \u0442.\u043a. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0442\u043e \u043f\u043e\u043a\u0430\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = test.append(train, sort=False).reset_index(drop=True)","70492060":"data.info()","eb23d9b7":"pandas_profiling.ProfileReport(data)","7079cdaa":"# Education, \u043e\u0440\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n#\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 - \u044d\u0442\u043e \u043e\u0440\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0442.\u043a. \u0435\u0441\u0442\u044c \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0443\u0440\u043e\u0432\u043d\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\ndata[\"education\"].unique()","9ed1a338":"data['education'].value_counts(dropna=False)","722d3c8a":"print(f'\u041f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: {data[\"education\"].isna().sum()}, ' +\n      f'\u044d\u0442\u043e {100*data[\"education\"].isna().sum() \/ len(data):0.2f}% \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a.')","2db53164":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u043e\u0439\ndata[\"education\"].mode()[0]","9a7b0ace":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e\ndata[\"education\"].fillna('SCH', inplace=True)","beab309c":"data['education'].value_counts(dropna=False)","a07377f1":"# C\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\n# R\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435.\n\nbin_cols = ['sex', 'car', 'car_type', 'foreign_passport', 'good_work']\ncat_cols = ['education', 'region_rating', 'home_address', 'work_address', 'app_date', 'sna', 'first_time']\nnum_cols = ['age', 'decline_app_cnt', 'income', 'bki_request_cnt', 'score_bki']","1b2a7c6f":"data.app_date","af649275":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u0434\u0435\u043d\u044c\ndata['app_date'] = pd.to_datetime(data['app_date'])\ndata['app_date'] = data['app_date'].apply(lambda x: x.month)\n\n# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u0443 \u0432 \u043a\u0430\u0442\u0435\u043e\u0433\u0440\u0438\u044e \"\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435\", \u0442.\u043a. \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u044d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\ncat_cols.remove('app_date')\nnum_cols.append('app_date')","d1d2a321":"data['income'].value_counts(bins=10)","d289eb85":"for col in num_cols:\n    median = data[col].median()\n    IQR = data[col].quantile(0.75) - data[col].quantile(0.25)\n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    \n    print(\"Column: \", col)\n    print(\"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\", data[col].max())\n    print(\"\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\", data[col].min())\n    print('25%: {},'.format(perc25), '75%: {},'.format(perc75),\n          \"IQR: {}, \".format(IQR), \"Borderline: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    print()","b676f944":"data['default'].value_counts().plot.barh()\nprint(len(data[data['default']==0])\/len(data[data['default']==1]))","b02a71c1":"fig, axes = plt.subplots(2, 2, figsize=(10,10))\n\naxes[0,0].hist(data['age'], bins = 50)\naxes[0,0].set_title(\"age\")\n\naxes[0,1].hist(data['decline_app_cnt'], bins = 50, range=(0,10))\naxes[0,1].set_title(\"decline_app_cnt\")\n\naxes[1,0].hist(data['bki_request_cnt'], bins = 50,  range=(0,20))\naxes[1,0].set_title(\"bki_request_cnt\")\n\naxes[1,1].hist(data['income'], bins = 50)\naxes[1,1].set_title(\"income\")","30f06d27":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c\nsns.set(font_scale = 1)\nfig, axis = plt.subplots(figsize=(7,7))\nsns.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1, square=True,\n           annot=True, fmt=\".2f\", linewidths=0.1, cmap=\"YlGnBu\")","2132d83f":"imp_num = pd.Series(f_classif(data[num_cols], data['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh', color='turquoise')","4dda0e2c":"# \u0414\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LabelEncoder\n\nlabel_encoder = LabelEncoder()\n\nfor column in bin_cols:\n    data[column] = label_encoder.fit_transform(data[column])\n    \ndata['education'] = label_encoder.fit_transform(data['education'])\n# \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0438    \ndata.head()\n","ad858b89":"imp_cat = Series(mutual_info_classif(data[bin_cols + cat_cols], data['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh', color='turquoise')","fb54a985":"# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 region_rating, first_time \u0438 home_address \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435,\n# \u0442.\u043a. \u043f\u0440\u0438 \u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 roc-auc \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u0437\n# \u043d\u0438\u0445 dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ncat_cols.remove('region_rating')\nnum_cols.append('region_rating')\n\ncat_cols.remove('first_time')\nnum_cols.append('first_time')\n\ncat_cols.remove('home_address')\nnum_cols.append('home_address')","e33d8a5b":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e get_dummies\ndata = pd.get_dummies(data, columns=cat_cols)","67bde58a":"# \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndata[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns=num_cols)","db99d66e":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043d\u0430 train \u0438 test\ntrain = data.query('sample == 1').drop(['sample'], axis=1)\ntest = data.query('sample == 0').drop(['sample'], axis=1)","8a2c7c87":"# \u0443\u0434\u0430\u043b\u0438\u043c \u0434\u043b\u044f X \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 client_id\nX = train.drop(columns = ['default', 'client_id'])\nY = train['default']","ff21b681":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 train \u0438 test\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED, test_size=0.2)","0043a8ce":"model_0 = LogisticRegression(max_iter = 1000)\nmodel_0.fit(X_train, Y_train)\nY_pred = model_0.predict(X_test)","5df2e393":"probs = model_0.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","bbdd317f":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\nprint('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, Y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, Y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, Y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, Y_pred), 4)))","8c703a3c":"confusion_matrix(Y_test, Y_pred)","92bc2f3f":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, Y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(Y_test, Y_pred), annot=labels, fmt='', cmap='Blues')","4d796d8b":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nlr_best = LogisticRegression(class_weight='balanced',\n                            random_state=RANDOM_SEED)\n\nparams = {'C': np.linspace(0, 100, 5),\n         'max_iter': np.linspace(start=1,stop=1000,num=10, dtype=int)}\n\nmodel_best = GridSearchCV(lr_best, param_grid=params, verbose=1, cv=2)\n\nmodel_best.fit(X_train, Y_train)\nprobs = model_best.predict_proba(X_test)\ny_pred = model_best.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","08b71f47":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, y_pred), 4)))","5c344a1f":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Blues')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","6d61151e":"plt.pie(x=train['default'].value_counts(),\n       labels=list(train['default'].value_counts().index),\n       autopct='%6.1f%%',\n       explode=[0, 0.2],\n       shadow=True,\n       textprops={'fontsize': 15})\nplt.title('default')\nplt.show()\n\nprint('\u041a\u043b\u0430\u0441\u0441 0 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043d\u0430\u0434 \u043a\u043b\u0430\u0441\u0441\u043e\u043c 1 \u0432 {} \u0440\u0430\u0437'.format(\n    round(train['default'].value_counts()[0]\/train['default'].value_counts()[1],1)))","603fbb91":"# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u0437 train['default']==0 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u043e\u0435\n# \u0440\u0430\u0432\u043d\u044f\u043b\u043e\u0441\u044c \u0431\u044b train['default']==1, \u0438 \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441 train['default']==1.\nunder_train = pd.concat([train[train['default']==0].sample(\n    len(train[train['default']==1]), random_state=RANDOM_SEED), train[train['default']==1]])\n\nX = under_train.drop(columns = ['default', 'client_id'])\nY = under_train['default']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED, test_size=0.2)","e94053ca":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c class_weight \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nlr_best = LogisticRegression(class_weight='balanced',\n                            random_state=RANDOM_SEED)\n\nparams = {'C': np.linspace(0, 100, 5),\n         'max_iter': np.linspace(start=1,stop=500,num=10, dtype=int)}\n\nmodel_best = GridSearchCV(lr_best, param_grid=params, verbose=1, cv=2)\n\nmodel_best.fit(X_train, Y_train)\nprobs = model_best.predict_proba(X_test)\ny_pred = model_best.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')\n\nprint(\"\u041b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0434\u0435\u043b\u0438: \", model_best.best_params_)","e5668852":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Blues')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","9c18760c":"cat = CatBoostClassifier(n_estimators=1000,\n                         depth=2,\n                         logging_level='Silent')\n\ncat.fit(X_train, Y_train)\nprobs = cat.predict_proba(X_test)\ny_pred = cat.predict(X_test)\nprobs = probs[:,1]\n\nfpr, tpr, threshold = roc_curve(Y_test, probs)\nroc_auc = roc_auc_score(Y_test, probs)\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nax.set_title('Logistic Regression ROC AUC = %0.5f'%roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc='lower right')","9dcd3184":"print('accuracy_score: {}'.format(np.round(accuracy_score(Y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(Y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(Y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(Y_test, y_pred), 4)))\n","f75fa177":"sns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Pos', 'False Pos', 'False Neg', 'True Neg']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(Y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nax = sns.heatmap(confusion_matrix(Y_test, y_pred), annot=labels, fmt='', cmap='Blues')\nax.set(xlabel='predicted', ylabel='real',title = 'Confusion matrix')\nplt.show()","8ed30016":"X_test2 = test.drop(columns = ['default', 'client_id'])\ny_probs = cat.predict_proba(X_test2)[:,1]","9a0bd7e4":"test['default'] = y_probs","61a99eb4":"submission = test[['client_id','default']]\ndisplay(submission.sample(10))\ndisplay(submission.shape)","cc7a0995":"submission.to_csv('submission.csv', index=False)","dc438b2c":"### 4. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","67bdd3e8":"### 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","9f14f32f":"\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 decline_app_cnt(\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a), income(\u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430), bki_request_cnt(\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439 \u0432 \u0411\u041a\u0418) \u0438 score_bki.\n\n\u041d\u043e:\n\n1. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u0432\u043e\u0435\u043c (\u0431\u043e\u043b\u0435\u0435 85% \u0440\u0430\u0432\u043d\u044f\u043b\u043e\u0441\u044c 0) \u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u0441\u0435\u0445 \u043b\u044e\u0434\u0435\u0439 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n\n2. \u0414\u043e\u0445\u043e\u0434 \u0443 96,2% \u043b\u044e\u0434\u0435\u0439 \u0431\u044b\u043b \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 100 \u0442\u044b\u0441., \u043d\u043e \u0432\u0435\u0434\u044c \u0435\u0441\u0442\u044c \u043b\u044e\u0434\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u0441\u0438\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0438 \u044d\u0442\u0438\u0445 \u043b\u044e\u0434\u0435\u0439 \u043d\u0430\u0434\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c...\n\n3. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0439","1815fb3f":"#### 3.3 \u0412\u044b\u0431\u0440\u043e\u0441\u044b","6e21cc9b":"#### \u041c\u043e\u0434\u0435\u043b\u044c LogisticRegression (\u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b)","a1c274fb":"\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b  \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u0441\u043c\u0435\u0449\u0435\u043d\u044b \u0432\u043f\u0440\u0430\u0432\u043e. \u041f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","39bb2603":"#### 3.2 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","dfd5b9fe":"### 10.\u041c\u043e\u0434\u0435\u043b\u0438\n#### \u041c\u043e\u0434\u0435\u043b\u044c LogisticRegression","82461375":"### 5. \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438","b9121d14":"### 2. \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","4d5a4ad5":"\u041c\u043e\u0434\u0435\u043b\u044c \u043c\u043d\u043e\u0433\u043e \u043e\u0448\u0438\u0431\u0430\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0432\u044b\u0434\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0433\u043e \u0432\u044b\u043f\u043b\u0430\u0442\u044f\u0442 (\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u0438\u0437\u0438\u043b\u0430\u0441\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e model), \u0447\u0442\u043e \u0432\u0435\u0434\u0435\u0442 \u043a \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044e \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0431\u0430\u043d\u043a\u0430. \u041e\u0434\u0430\u043d\u0430\u043a\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u0432\u044b\u0434\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u0432\u0441\u0435\u043c \u0432 \u043f\u043e\u0434\u0440\u044f\u0434...","8290c2b9":"\u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 (\u043e\u0434\u0438\u043d \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u0432 7 \u0440\u0430\u0437 \u043d\u0430 train'\u0435).\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c undersampling, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 7 \u0440\u0430\u0437.","c5b4ad79":"**\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442**","a3f05ef5":"### 8.Feature Engineering","468b54a2":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0442\u0430\u043b\u0438 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0431\u044b\u043b\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f submission \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c CatBoostingClassifier","d26996d7":"**\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f:**\n\n* 110148 \u0441\u0442\u0440\u043e\u043a, \u0432 \u0442.\u0447. 73799 \u0441\u0442\u0440\u043e\u043a \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 36349 \u0441\u0442\u0440\u043e\u043a \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n* \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b\n* Education \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n* 7 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, 10 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 3 \u043f\u043e\u043b\u044f Boolean (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u043b\u044f \u043e\u0431\u0435\u0447\u0435\u043d\u0438\u044f\/\u0442\u0435\u0441\u0442\u0430)\n* \u043d\u0438 \u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u043b\u0435\u0439 \u043d\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n* \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0414\u043e\u0445\u043e\u0434\u043e\u043c \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0433\u0438\u043e\u043d\u0430","3bcb702d":"### **\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438**","2d350bbb":"\u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0431\u0435\u0437 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u043d\u0430\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u043c \u043f\u043e\u0447\u0442\u0438 \u0432 11 \u0440\u0430\u0437.","9fa19369":"\u0421\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418 (score_bki) \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","7a4032ec":"### 3. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n#### 3.1 \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NaN","9d9d9039":"\u041c\u043e\u0434\u0435\u043b\u044c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \"\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\" \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, \u043e\u0434\u043d\u0430\u043a\u043e, \u043e\u0446\u0435\u043d\u0438\u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a, \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043f\u043e\u0447\u0442\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u0435\u043d \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 - \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0435\u0433\u043e \u0432\u044b\u0434\u0430\u0441\u0442. \u0414\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u043f\u0430\u0434\u0435\u043d\u0438\u044e \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0431\u0430\u043d\u043a\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.","8062bad6":"### 6. \u0417\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3ae4d8fc":"\u041c\u043e\u0434\u0435\u043b\u044c \u044f\u0432\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0441\u0442\u0430\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 TrueNegative. \u0412 \u0446\u0435\u043b\u043e\u043c \u043d\u0435\u043f\u043b\u043e\u0445\u043e, \u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.","7f690fcb":"# **\u041f\u0440\u043e\u0435\u043a\u0442 5. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0435\u0442!**\n\u0426\u0435\u043b\u044c\u044e - \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u041c\u041e \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u0438\u0447\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430, \u0434\u043b\u044f \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u0440\u0435\u0434\u0438\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0411\u041a\u0418 \u0438 \u0430\u043d\u043a\u0435\u0442 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432.\n\n\n**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439**\n\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","8d844a6c":"#### \u041c\u043e\u0434\u0435\u043b\u044c LogisticRegression (undersampling)","bcd00be0":"### 7. \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d9b3d416":"#### \u041c\u043e\u0434\u0435\u043b\u044c CatBoost","8ca7fa18":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 mutual_info_classif \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \"sna\"","b36d9d08":"### 9. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e"}}