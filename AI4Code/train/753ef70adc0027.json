{"cell_type":{"fde3ada0":"code","65319014":"code","addbaa2d":"code","acf6fa4c":"code","4cd0cf81":"code","a4fa2194":"code","33092333":"code","9549ff0e":"code","3de02e58":"code","dfd2cbf1":"code","a9a51f54":"code","f3bc779e":"code","248a276d":"code","a99ac8cd":"code","06e9fb3b":"code","235fc078":"code","86940b56":"code","17f8e8cc":"code","f7363446":"code","7aff964e":"code","c4e742c8":"code","13490fd9":"code","7f583021":"code","986b9be3":"markdown","e520c317":"markdown","f33bf80a":"markdown","0d0fc052":"markdown","5431dfe8":"markdown"},"source":{"fde3ada0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n\nimport cv2\nfrom sklearn import preprocessing\nfrom pathlib import Path\nimport cv2 as cv\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65319014":"from fastai.imports import *\nfrom fastai.vision.data import *","addbaa2d":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","acf6fa4c":"import torch\nimport fastai\nfrom fastai.tabular.all import *\nfrom fastai.text.all import *\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom fastai import *\n\nimport time\nfrom datetime import datetime\n\nprint(f'Notebook last run on {datetime.fromtimestamp(time.time()).strftime(\"%Y-%m-%d, %H:%M:%S UTC\")}')\nprint('Using fastai version ',fastai.__version__)\nprint('And torch version ',torch.__version__)","4cd0cf81":"path = Path(\"\/kaggle\/input\/aayyzjxbananaspiyatas\/bananas-pitayas\/train\/1pitaya\")\npath.ls()","a4fa2194":"np.random.seed(42)\ndata = ImageDataLoaders.from_folder(path, train=\".\", valid_pct=0.2, item_tfms=RandomResizedCrop(512, min_scale=0.75),\n                                    bs=32,batch_tfms=[*aug_transforms(size=256, max_warp=0), Normalize.from_stats(*imagenet_stats)],num_workers=0)","33092333":"data.show_batch(nrows=3, figsize=(7,8))","9549ff0e":"data.show_batch(nrows=2, figsize=(7,8))","3de02e58":"from PIL import Image\n\nimg = Image.open(\"..\/input\/aayyzjxbananaspiyatas\/bananas-pitayas\/train\/1pitaya\/0001.png\")\nimg","dfd2cbf1":"TensorTypes = (TensorImage,TensorMask,TensorPoint,TensorBBox)","a9a51f54":"def _add1(x): return x+1\ndumb_tfm = RandTransform(enc=_add1, p=0.5)\nstart,d1,d2 = 2,False,False\nfor _ in range(40):\n    t = dumb_tfm(start, split_idx=0)\n    if dumb_tfm.do: test_eq(t, start+1); d1=True\n    else:           test_eq(t, start)  ; d2=True\nassert d1 and d2\ndumb_tfm","f3bc779e":"_,axs = subplots(1,2)\nshow_image(img, ctx=axs[0], title='original')\nshow_image(img.flip_lr(), ctx=axs[1], title='flipped');","248a276d":"img.resize((64,64))","a99ac8cd":"IMG_PATH = \"..\/input\/aayyzjxbananaspiyatas\/bananas-pitayas\/train\/1pitaya\/0003.png\"\n\nimgArray = cv.imread(IMG_PATH)","06e9fb3b":"plt.imshow(imgArray)\n\nplt.show()","235fc078":"convertedArray = cv.cvtColor(imgArray, cv.COLOR_BGR2RGB)\n\nplt.subplots(figsize=(15,10))\nplt.imshow(convertedArray);plt.show()","86940b56":"fig, ((ax1,ax2), (ax3,ax4)) =plt.subplots(2,2,figsize=(14,10))\n\nax1.imshow(convertedArray[:,:,0], cmap=\"Reds_r\"); ax1.set_title(\"R\", size=20) \nax2.imshow(convertedArray[:,:,1], cmap=\"Greens_r\"); ax2.set_title(\"G\", size=20)\nax3.imshow(convertedArray[:,:,2], cmap=\"Blues_r\"); ax3.set_title(\"B\", size=20)\n\nax4.axis(\"off\"); plt.tight_layout(); plt.show()","17f8e8cc":"fig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(15,4))\n\nax1.hist(convertedArray[:,:,0].flatten(), color=\"R\", bins=200); ax1.set_title(\"R\", size=20)\nax2.hist(convertedArray[:,:,1].flatten(), color=\"G\", bins=200); ax1.set_title(\"G\", size=20)\nax3.hist(convertedArray[:,:,2].flatten(), color=\"B\", bins=200); ax1.set_title(\"B\", size=20)\n\nplt.tight_layout();plt.show()","f7363446":"convertedArray.shape #(845, 1200,3)\nconvertedArray.shape[0]*convertedArray.shape[1] #16384","7aff964e":"plt.subplots(figsize=(15,10))\nplt.imshow(convertedArray)\nplt.axvline(200, color=\"yellow\")\nplt.axhline(200, color=\"orange\")\n\nplt.show()","c4e742c8":"#If you want to extract these two profiles. Proceed this way for the horizontal section at row 100\n\nhorSection = convertedArray[100,:,:]\nplt.figure(figsize=(16,5))\nplt.plot(horSection[:,0], label=\"R\", color=\"#e74c3c\")\nplt.plot(horSection[:,1], label=\"G\", color=\"#16a085\")\nplt.plot(horSection[:,2], label=\"B\", color=\"#3498db\")\n\nplt.xlabel(\"X\"); plt.legend(); plt.show()","13490fd9":"#Extract from the vertical one at column 1000\n\nverSection = convertedArray[:,100,:]\nplt.figure(figsize=(16,5))\n\nplt.plot(verSection[:,0], label=\"R\", color=\"#e74c3c\")\nplt.plot(verSection[:,1], label=\"G\", color=\"#16a085\")\nplt.plot(verSection[:,2], label=\"B\", color=\"#3498db\")\n\nplt.xlabel(\"X\"); plt.legend();plt.show()","7f583021":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke war Hier' )","986b9be3":"https:\/\/en.wikipedia.org\/wiki\/Pitaya#:~:text=A%20pitaya%20(%2Fp%C9%AA%CB%88,both%20in%20the%20family%20Cactaceae.","e520c317":"I changed convertedArray (from 600) to 100 since returned: index 600 is out of bounds for axis 0 with size 128 ","f33bf80a":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSpPdlI1wJHeHbH1xekab3gLNi2GJC6jxyZJA&usqp=CAU)br.freepik.com","0d0fc052":"<i><p style=\"font-size:18px; background-color: #f542a7; border: 2px solid black; margin: 20px; padding: 20px;\">A pitaya is the fruit of several different cactus species indigenous to the Americas. Pitaya usually refers to fruit of the genus Stenocereus, while pitahaya or dragon fruit refers to fruit of the genus Hylocereus, both in the family Cactaceae. Dragon fruit is cultivated in Southeast Asia, in the United States, the Caribbean, Australia, Mesoamerica and throughout tropical and subtropical regions of the world.","5431dfe8":"I changed convertedArray (from 1000) to 100 since returned: index 1000 is out of bounds for axis 0 with size 128"}}