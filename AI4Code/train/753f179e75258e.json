{"cell_type":{"cf7a8968":"code","329fa593":"code","c63bfb34":"code","d63d4d24":"code","71e15398":"code","a7641d1f":"code","8b83948d":"code","4fe15daa":"code","2712e699":"code","dd7416f7":"code","d16052e2":"code","fe48200b":"code","37b6a2b7":"code","317afadd":"code","45707801":"code","5aed9874":"code","376d34a2":"code","a2cfdef2":"code","d571aca4":"code","19c208c0":"code","73b17645":"code","09603c12":"code","826b3c3a":"code","54c09d40":"code","ab500a78":"code","a80c409a":"code","5049065a":"code","39beb342":"code","f1e9c2dd":"code","296213a2":"code","9b9cbc9a":"code","3b3592c7":"code","eb972865":"markdown","353b76e4":"markdown"},"source":{"cf7a8968":"!pip install pytorch-pretrained-bert","329fa593":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom shutil import copyfile\n\nfrom fastai.text import * \nfrom pytorch_pretrained_bert.modeling import BertConfig, BertForSequenceClassification\nfrom pytorch_pretrained_bert import BertTokenizer\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score","c63bfb34":"#Setting path for learner\npath = Path(os.path.abspath(os.curdir))","d63d4d24":"# Create directory\ndirName = 'models'\n \ntry:\n    # Create target Directory\n    os.mkdir(dirName)\n    print(\"Directory:\" , dirName , \"created!\") \nexcept FileExistsError:\n    print(\"Directory:\" , dirName , \"already exists!\")","71e15398":"#copying files into working path\nmodelpath = Path('..\/input\/bert-fastai-error-analysis')\n\ncopyfile(modelpath\/\"models\/bert-1.pth\", path\/\"models\/bert-1.pth\")","a7641d1f":"#reading into pandas and renaming columns for easier api access\nfilepath = Path('..\/input\/quora-insincere-questions-classification')\ntrn = pd.read_csv(filepath\/'train.csv')","8b83948d":"trn.rename(columns={'target':'label', 'question_text':'text'},inplace=True)\ndf = trn[['label','text']]\n\ndf['1'] = df['label'].apply(lambda x: 1 if x==1 else 0)\ndf['0'] = df['label'].apply(lambda x: 1 if x==0 else 0)\n\nvalid = df[int(len(df)*.80):]","4fe15daa":"class Config(dict):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n    \n    def set(self, key, val):\n        self[key] = val\n        setattr(self, key, val)\n\nconfig = Config(\n    testing=False,\n    bert_model_name=\"bert-base-uncased\",\n    max_lr=3e-5,\n    epochs=4,\n    use_fp16=True,\n    bs=32,\n    discriminative=False,\n    max_seq_len=256,\n)","2712e699":"bert_tok = BertTokenizer.from_pretrained(config.bert_model_name)","dd7416f7":"class FastAiBertTokenizer(BaseTokenizer): \n    \"\"\"Wrapper around BertTokenizer to be compatible with fast.ai\"\"\"\n    def __init__(self, tokenizer: BertTokenizer, max_seq_len: int=128, **kwargs): \n         self._pretrained_tokenizer = tokenizer \n         self.max_seq_len = max_seq_len \n    def __call__(self, *args, **kwargs): \n         return self \n    def tokenizer(self, t:str) -> List[str]: #Limits the maximum sequence length\n        return [\"[CLS]\"] + self._pretrained_tokenizer.tokenize(t)[:self.max_seq_len - 2] + [\"[SEP]\"]   ","d16052e2":"fastai_tokenizer = Tokenizer(tok_func=FastAiBertTokenizer(bert_tok, max_seq_len=config.max_seq_len), \n                             pre_rules=[], post_rules=[])","fe48200b":"def _join_texts(texts:Collection[str], mark_fields:bool=False, sos_token:Optional[str]=BOS):\n    \"\"\"Borrowed from fast.ai source\"\"\"\n    if not isinstance(texts, np.ndarray): texts = np.array(texts)\n    if is1d(texts): texts = texts[:,None]\n    df = pd.DataFrame({i:texts[:,i] for i in range(texts.shape[1])})\n    text_col = f'{FLD} {1} ' + df[0].astype(str) if mark_fields else df[0].astype(str)\n    if sos_token is not None: text_col = f\"{sos_token} \" + text_col\n    for i in range(1,len(df.columns)):\n        #text_col += (f' {FLD} {i+1} ' if mark_fields else ' ') + df[i]\n        text_col += (f' {FLD} {i+1} ' if mark_fields else ' ') + df[i].astype(str)\n    return text_col.values","37b6a2b7":"fastai_bert_vocab = Vocab(list(bert_tok.vocab.keys()))","317afadd":"fastai_tokenizer = Tokenizer(tok_func=FastAiBertTokenizer(bert_tok, max_seq_len=config.max_seq_len), \n                             pre_rules=[], post_rules=[])","45707801":"label_cols = [\"1\", \"0\"]","5aed9874":"databunch = TextDataBunch.from_df(\".\", valid, valid, valid,\n                   tokenizer=fastai_tokenizer,\n                   vocab=fastai_bert_vocab,\n                   include_bos=False,\n                   include_eos=False,\n                   text_cols=\"text\",\n                   label_cols=label_cols,\n                   bs=config.bs,\n                   collate_fn=partial(pad_collate, pad_first=False, pad_idx=0),\n              )","376d34a2":"class BertTokenizeProcessor(TokenizeProcessor):\n    def __init__(self, tokenizer):\n        super().__init__(tokenizer=tokenizer, include_bos=False, include_eos=False)\n\nclass BertNumericalizeProcessor(NumericalizeProcessor):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, vocab=Vocab(list(bert_tok.vocab.keys())), **kwargs)\n\ndef get_bert_processor(tokenizer:Tokenizer=None, vocab:Vocab=None):\n    \"\"\"\n    Constructing preprocessors for BERT\n    We remove sos\/eos tokens since we add that ourselves in the tokenizer.\n    We also use a custom vocabulary to match the numericalization with the original BERT model.\n    \"\"\"\n    return [BertTokenizeProcessor(tokenizer=tokenizer),\n            NumericalizeProcessor(vocab=vocab)]\n\nclass BertDataBunch(TextDataBunch):\n    @classmethod\n    def from_df(cls, path:PathOrStr, train_df:DataFrame, valid_df:DataFrame, test_df:Optional[DataFrame]=None,\n                tokenizer:Tokenizer=None, vocab:Vocab=None, classes:Collection[str]=None, text_cols:IntsOrStrs=1,\n                label_cols:IntsOrStrs=0, label_delim:str=None, **kwargs) -> DataBunch:\n        \"Create a `TextDataBunch` from DataFrames.\"\n        p_kwargs, kwargs = split_kwargs_by_func(kwargs, get_bert_processor)\n        # use our custom processors while taking tokenizer and vocab as kwargs\n        processor = get_bert_processor(tokenizer=tokenizer, vocab=vocab, **p_kwargs)\n        if classes is None and is_listy(label_cols) and len(label_cols) > 1: classes = label_cols\n        src = ItemLists(path, TextList.from_df(train_df, path, cols=text_cols, processor=processor),\n                        TextList.from_df(valid_df, path, cols=text_cols, processor=processor))\n        src = src.label_for_lm() if cls==TextLMDataBunch else src.label_from_df(cols=label_cols, classes=classes)\n        if test_df is not None: src.add_test(TextList.from_df(test_df, path, cols=text_cols))\n        return src.databunch(**kwargs)","a2cfdef2":"bert_model = BertForSequenceClassification.from_pretrained(config.bert_model_name, num_labels=2)","d571aca4":"learner = Learner(databunch, bert_model, loss_func=nn.BCEWithLogitsLoss())\nif config.use_fp16: learner = learner.to_fp16()","19c208c0":"learner.load('bert-1')","73b17645":"def get_preds_as_nparray(ds_type) -> np.ndarray:\n    \"\"\"\n    the get_preds method does not yield the elements in order by default\n    we borrow the code from the RNNLearner to resort the elements into their correct order\n    \"\"\"\n    preds = learner.get_preds(ds_type)[0].detach().cpu().numpy()\n    y = learner.get_preds(ds_type)[1].detach().cpu().numpy()\n    \n    sampler = [i for i in databunch.dl(ds_type).sampler]\n    reverse_sampler = np.argsort(sampler)\n    \n    return preds[reverse_sampler, :], y[reverse_sampler, :] ","09603c12":"#testing on bottom 20% of data\npreds, y = get_preds_as_nparray(DatasetType.Valid)","826b3c3a":"valid.reset_index(inplace=True)\nvalid.rename(columns={'1':'insincere_gt', '0': 'sincere_gt'}, inplace=True); print(valid.shape); valid.head(2)","54c09d40":"preds_df = pd.DataFrame(preds,columns=['insincere_pred', 'sincere_pred']) ; print(preds_df.shape) ; preds_df.head(2)","ab500a78":"#convert predicted prob to predicted labels\nidx = np.argmax(preds, axis=-1)\ny_preds = np.zeros(preds.shape)\ny_preds[np.arange(preds.shape[0]), idx] = 1\n\naccuracy_score(y_preds, y)","a80c409a":"y_proba = preds[:, 0]\ny_finalpred = np.asarray([1 if x>0.3 else 0 for x in y_proba ])","5049065a":"label_df = pd.DataFrame(y_finalpred,columns=['label_pred']) ; print(label_df.shape) ; label_df.head(2)","39beb342":"final = valid.merge(preds_df, left_index=True, right_index=True)\nfinal = final.merge(label_df, left_index=True, right_index=True)\nfinal.head(2)","f1e9c2dd":"final.to_csv('final.csv')","296213a2":"#change y from multi-label to single label\nidx = np.argmax(y, axis=-1)\ny_new = np.zeros((y.shape[0],1))\nfor i in range(len(idx)):\n    if idx[i]==0:y_new[i]=1","9b9cbc9a":"accuracy_score(y_finalpred, y_new)","3b3592c7":"f1_score(y_new, y_finalpred)","eb972865":"Testing out fine tuning pre-trained BERT using fastai.\n\nAlmost all the code is from https:\/\/mlexplained.com\/2019\/05\/13\/a-tutorial-to-fine-tuning-bert-with-fast-ai\/","353b76e4":"Checking if model is still correct after threshold adjustment"}}