{"cell_type":{"5f1e1691":"code","d7a1f7c6":"code","5c25faf9":"code","1c1ff3da":"code","a799a247":"code","bc90bb87":"code","bf30ac34":"code","c7b18a84":"code","9315d108":"code","de76621c":"code","de6befa9":"code","4f33209e":"code","7e74bfd1":"code","5d385636":"code","d625edbd":"markdown","90a843c2":"markdown","f3b43c58":"markdown","01f9883e":"markdown","65282b5f":"markdown","39f6e327":"markdown","a27672d5":"markdown"},"source":{"5f1e1691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7a1f7c6":"data=pd.read_csv('\/kaggle\/input\/spam-email\/spam.csv')\ndata","5c25faf9":"data.columns","1c1ff3da":"data.info()","a799a247":"data.isna().sum()","bc90bb87":"data['Spam']=data['Category'].apply(lambda x:1 if x=='spam' else 0)\ndata.head(5)","bf30ac34":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(data.Message,data.Spam,test_size=0.25)","c7b18a84":"#CounterVectorizer Convert the text into matrics\nfrom sklearn.feature_extraction.text import CountVectorizer","9315d108":"from sklearn.naive_bayes import MultinomialNB","de76621c":"from sklearn.pipeline import Pipeline\nclf=Pipeline([\n    ('vectorizer',CountVectorizer()),\n    ('nb',MultinomialNB())\n])","de6befa9":"clf.fit(X_train,y_train)","4f33209e":"emails=[\n    'Sounds great! Are you home now?',\n    'Will u meet ur dream partner soon? Is ur career off 2 a flyng start? 2 find out free, txt HORO followed by ur star sign, e. g. HORO ARIES'\n]","7e74bfd1":"clf.predict(emails)","5d385636":"clf.score(X_test,y_test)","d625edbd":"# Tarining The Model","90a843c2":"<img src=\"https:\/\/helpemailmarketing.com\/wp-content\/uploads\/2019\/12\/spam-filter-34101a1e6c494d44aa1b6d10302537da.jpg\"  style='width:1000px'>","f3b43c58":"**Dropped The Column Unnamed: 0**","01f9883e":"**Predict Email**","65282b5f":"# Prediction Of Model","39f6e327":"**Here I given Two email Two detect 1st One is looking good and the other one looking spam**","a27672d5":"**Naive Bayes Have three Classifier(Bernouli,Multinominal,Gaussian)\nHere I use Multinominal Bayes Because here data in a discrete form \ndiscrete data(e.g movie ratings ranging  1 to 5 as each rating will have certain frequency to represent)**"}}