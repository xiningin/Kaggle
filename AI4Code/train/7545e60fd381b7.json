{"cell_type":{"65a65c55":"code","49485a4d":"code","c1f7ca27":"code","ae7595d1":"code","54d9c82e":"code","6d64d371":"code","afd60082":"code","9674a262":"code","dbde8625":"code","ab865acc":"code","2501a183":"code","56c8a7da":"code","4fb60b59":"code","6d1053b3":"code","3510adb3":"code","74a3edc7":"code","58feae0b":"code","2173bdc9":"code","7c6da973":"code","12cb4415":"code","1e96d005":"code","ec2b7ef6":"code","1613c4bb":"code","05f18906":"code","6e6486b8":"code","07ea6a43":"code","f97e773f":"code","4b7ebbf2":"code","84218265":"code","7a6be4e2":"code","8357d65d":"code","2c2ca4db":"code","6375c749":"code","0cd66d02":"code","d48f5f75":"markdown","ba718938":"markdown","168af3d8":"markdown","856aabb3":"markdown","3f07bf6b":"markdown","cb9d47d2":"markdown","faff1b40":"markdown","e4a7f6ec":"markdown","2a497e9c":"markdown","893693c1":"markdown","5fa91bc4":"markdown","0307c3f1":"markdown","9516ddd4":"markdown"},"source":{"65a65c55":"!pip install -U -t \/kaggle\/working\/ git+https:\/\/github.com\/Kaggle\/learntools.git\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning.ex_tpu import *\nstep_1.check()","49485a4d":"import tensorflow.compat.v2 as tf\nimport tensorflow_datasets as tfds\n\ntfds.disable_progress_bar()\ntf.enable_v2_behavior()","c1f7ca27":"from petal_helper import *","ae7595d1":"# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","54d9c82e":"# %% [code]\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started')\n\n# %% [markdown]\n# # Configuration\n\n# %% [code]\nIMAGE_SIZE = [224, 224]                   \nEPOCHS = 12\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nGCS_PATH = GCS_DS_PATH + '\/tfrecords-jpeg-224x224'\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec') \n\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']                                                                                                                                               # 100 - 102\n\n# %% [markdown]\n# # Helper functions\n# %% [code]\n# numpy and matplotlib defaults\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])\n\n# %% [markdown]\n# These helper functions construct a data pipeline from the TFRecords\n\n# %% [code] {\"_kg_hide-input\":true}\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    #image = tf.image.random_hue(image, max_delta, seed=None)\n    image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\n# %% [markdown]\n\n# %% [code]\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))\n","6d64d371":"\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training:\", ds_train)\nprint (\"Validation:\", ds_valid)\nprint(\"Test:\", ds_test)","afd60082":"print(\"Number of classes: {}\".format(len(CLASSES)))\n\nprint(\"First five classes, sorted alphabetically:\")\nfor name in sorted(CLASSES)[:5]:\n    print(name)\n\nprint (\"Number of training images: {}\".format(NUM_TRAINING_IMAGES))","9674a262":"print(\"Training data shapes:\")\nfor image, label in ds_train.take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())","dbde8625":"print(\"Test data shapes:\")\nfor image, idnum in ds_test.take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","ab865acc":"one_batch = next(iter(ds_train.unbatch().batch(20)))\ndisplay_batch_of_images(one_batch)","2501a183":"with strategy.scope():\n    pretrained_model1 = tf.keras.applications.Xception(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=[*IMAGE_SIZE, 3])\n                                        \n    pretrained_model1.trainable = False\n    \n    model1 = tf.keras.Sequential([\n        # To a base pretrained on ImageNet to extract features from images...\n        pretrained_model1,\n        # ... attach a new head to act as a classifier.\n#         tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    model1.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy'],\n    )\n\nmodel1.summary()","56c8a7da":"with strategy.scope():\n    pretrained_model2 = tf.keras.applications.VGG16(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=[*IMAGE_SIZE, 3])\n                                        \n    pretrained_model2.trainable = False\n    \n    model2 = tf.keras.Sequential([\n        # To a base pretrained on ImageNet to extract features from images...\n        pretrained_model2,\n        # ... attach a new head to act as a classifier.\n#         tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    model2.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy'],\n    )\n\nmodel2.summary()","4fb60b59":"with strategy.scope():\n    pretrained_model3 = tf.keras.applications.ResNet50(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=[*IMAGE_SIZE, 3])\n                                        \n    pretrained_model3.trainable = False\n    \n    model3 = tf.keras.Sequential([\n        # To a base pretrained on ImageNet to extract features from images...\n        pretrained_model3,\n        # ... attach a new head to act as a classifier.\n#         tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    model3.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy'],\n    )\n\nmodel3.summary()","6d1053b3":"with strategy.scope():\n    pretrained_model4 = tf.keras.applications.VGG19(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=[*IMAGE_SIZE, 3])\n                                        \n    pretrained_model4.trainable = False\n    \n    model4 = tf.keras.Sequential([\n        # To a base pretrained on ImageNet to extract features from images...\n        pretrained_model4,\n        # ... attach a new head to act as a classifier.\n#         tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    model4.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy'],\n    )\n\nmodel4.summary()","3510adb3":"with strategy.scope():\n    pretrained_model5 = tf.keras.applications.InceptionV3(\n        weights='imagenet',\n        include_top=False ,\n        input_shape=[*IMAGE_SIZE, 3])\n                                        \n    pretrained_model5.trainable = False\n    \n    model5 = tf.keras.Sequential([\n        # To a base pretrained on ImageNet to extract features from images...\n        pretrained_model5,\n        # ... attach a new head to act as a classifier.\n#         tf.keras.layers.Dense(64,activation='relu'),\n        tf.keras.layers.GlobalAveragePooling2D(),\n        #tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n    model5.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy'],\n    )\n\nmodel5.summary()","74a3edc7":"callbacks = [\n    tf.keras.callbacks.EarlyStopping(\n        # Stop training when `val_loss` is no longer improving\n        monitor=\"val_sparse_categorical_crossentropy\",\n        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n        \n        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n        patience=5,\n        verbose=1,\n    )\n]","58feae0b":"# Define the batch size. This will be 16 with TPU off and 128 with TPU on\nBATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\n# Define training epochs for committing\/submitting. (TPU on)\nEPOCHS = 100\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nhistory1 = model1.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=EPOCHS,\n    steps_per_epoch=STEPS_PER_EPOCH, callbacks=[callbacks],\n)","2173bdc9":"\n# BATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\n# # Define training epochs for committing\/submitting. (TPU on)\n# EPOCHS = 50\n# STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\n# history2 = model2.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH, callbacks=[callbacks],\n# )","7c6da973":"# BATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\n# # Define training epochs for committing\/submitting. (TPU on)\n# EPOCHS = 50\n# STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\n# history3 = model3.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH, callbacks=[callbacks],\n# )","12cb4415":"# BATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\n# # Define training epochs for committing\/submitting. (TPU on)\n# EPOCHS = 50\n# STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\n# history4 = model4.fit(\n#     ds_train,\n#     validation_data=ds_valid,\n#     epochs=EPOCHS,\n#     steps_per_epoch=STEPS_PER_EPOCH, callbacks=[callbacks],\n# )","1e96d005":"BATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\n# Define training epochs for committing\/submitting. (TPU on)\nEPOCHS = 100\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nhistory5 = model5.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=EPOCHS,\n    steps_per_epoch=STEPS_PER_EPOCH, callbacks=[callbacks],\n)","ec2b7ef6":"display_training_curves(\n    history1.history['loss'],\n    history1.history['val_loss'],\n    'loss',\n    211,\n)\ndisplay_training_curves(\n    history1.history['sparse_categorical_accuracy'],\n    history1.history['val_sparse_categorical_accuracy'],\n    'accuracy',\n    212,\n)","1613c4bb":"# display_training_curves(\n#     history2.history['loss'],\n#     history2.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history2.history['sparse_categorical_accuracy'],\n#     history2.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","05f18906":"# display_training_curves(\n#     history3.history['loss'],\n#     history3.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history3.history['sparse_categorical_accuracy'],\n#     history3.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","6e6486b8":"# display_training_curves(\n#     history4.history['loss'],\n#     history4.history['val_loss'],\n#     'loss',\n#     211,\n# )\n# display_training_curves(\n#     history4.history['sparse_categorical_accuracy'],\n#     history4.history['val_sparse_categorical_accuracy'],\n#     'accuracy',\n#     212,\n# )","07ea6a43":"display_training_curves(\n    history5.history['loss'],\n    history5.history['val_loss'],\n    'loss',\n    211,\n)\ndisplay_training_curves(\n    history5.history['sparse_categorical_accuracy'],\n    history5.history['val_sparse_categorical_accuracy'],\n    'accuracy',\n    212,\n)","f97e773f":"members =[model1,model5];","4b7ebbf2":"def ensemble_predictions(members, ds):\n    probabilities =0;\n    predictions=0;\n    for model in members:\n        probabilities =probabilities+ (model.predict(ds))\n        #print(probabilities)\n    predictions = np.argmax(probabilities, axis=-1)\n       \n#     yhats = [model.predict(test_ds) for model in members]\n#     yhats = np.array(yhats)\n#     # sum across ensemble members\n#     summed = np.sum(yhats, axis=0)\n#     # argmax across classes\n#     result = np.argmax(summed, axis=1)\n    return predictions","84218265":"dataset = get_validation_dataset()\ndataset = dataset.unbatch().batch(20)\nbatch = iter(dataset)","7a6be4e2":"images, labels = next(batch)\npredictions = ensemble_predictions(members,images)\n# predictions = np.argmax(probabilities, axis=-1)\ndisplay_batch_of_images((images, labels), predictions)\npredictions = np.array(predictions)","8357d65d":"test_ds = get_test_dataset(ordered=True)\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\n# probabilities = model.predict(test_images_ds)\n# predictions = np.argmax(probabilities, axis=-1)\npredictions = ensemble_predictions(members,test_images_ds)\nprint(predictions)","2c2ca4db":"cmdataset = get_validation_dataset(ordered=True)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\n\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\ncm_predictions = ensemble_predictions(members,images_ds)\n\nlabels = range(len(CLASSES))\ncmat = confusion_matrix(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n)\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalize","6375c749":"score = f1_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nprecision = precision_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nrecall = recall_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\ndisplay_confusion_matrix(cmat, score, precision, recall)","0cd66d02":"print('Generating submission.csv file...')\n\n# Get image ids from test set and convert to integers\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\nprint(predictions[1])\n# Write the submission file\nnp.savetxt(\n    'submission.csv',\n    np.rec.fromarrays([test_ids, predictions]),\n    fmt=['%s', '%d'],\n    delimiter=',',\n    header='id,label',\n    comments='',\n)\n\n# Look at the first few predictions\n!head submission.csv","d48f5f75":"# Going Further #\n\nNow that you've joined the **Petals to the Metal** competition, why not try your hand at improving the model and see if you can climb the ranks! If you're looking for ideas, the *original* flower competition, [Flower Classification with TPUs](https:\/\/www.kaggle.com\/c\/flower-classification-with-tpus), has a wealth of information in its notebooks and discussion forum. Check it out!","ba718938":"---\n**[Deep Learning Home Page](https:\/\/www.kaggle.com\/learn\/deep-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161321) to chat with other Learners.*","168af3d8":"Examine the shape of the data.","856aabb3":"## Validation ##\n\nCreate a confusion matrix.","3f07bf6b":"## Create Distribution Strategy ##","cb9d47d2":"## Loading the Competition Data ##","faff1b40":"## Train Model 1 ##","e4a7f6ec":"## Test Predictions ##\n\nCreate predictions to submit to the competition.","2a497e9c":"Look at examples from the dataset, with true and predicted classes.","893693c1":"## Define Model #","5fa91bc4":"## Explore the Data ##\n\nTry using some of the helper functions described in the **Getting Started** tutorial to explore the dataset.","0307c3f1":"Examine training curves.","9516ddd4":"Peek at training data."}}