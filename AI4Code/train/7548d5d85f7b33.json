{"cell_type":{"b20af652":"code","ea8a8128":"code","24a114e0":"code","c73f4f4a":"code","9a3cb100":"code","f49a93e8":"code","b5c704a9":"code","85ba49f3":"code","fa268eb2":"code","6e4aab13":"code","7b378f53":"code","871f297b":"code","4eb74e33":"code","9d78b3f0":"code","6c43461d":"code","cbe86f33":"code","34245384":"code","7ab64a22":"code","358fed09":"code","b5190a61":"code","82d04ad5":"markdown","0a24c405":"markdown","47aaf556":"markdown","3386a96b":"markdown","cb0fb411":"markdown","1e3d3086":"markdown","79922ad1":"markdown","4b5c29ad":"markdown","c3e64511":"markdown","d304ad70":"markdown","ebaae331":"markdown","5482e381":"markdown","9b2c871f":"markdown"},"source":{"b20af652":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndata = pd.read_csv(\"..\/input\/pokemon.csv\")\ndata.head()","ea8a8128":"data.tail()","24a114e0":"data.columns","c73f4f4a":"data.shape","9a3cb100":"data.info()","f49a93e8":"data[\"Type 1\"].value_counts()","b5c704a9":"serie = pd.DataFrame([9, 5, 6, 1, 3, 8, 12, 100, 11])\n# sorted it is: 1 3 5 6 8 9 11 12 100\nserie.describe()","85ba49f3":"import matplotlib.pyplot as plt\n\ndata.boxplot(column=\"HP\")\nplt.show()","fa268eb2":"summary = data.head()\nsummary","6e4aab13":"melted = pd.melt(frame=summary, id_vars=\"Name\", value_vars = [\"Attack\", \"Defense\"])\nmelted","7b378f53":"melted.pivot(index='Name', columns='variable', values='value')","871f297b":"concated = pd.concat([data.head(), data.tail()], axis=0, ignore_index=True)\nconcated","4eb74e33":"concated_h = pd.concat([data[\"Attack\"].head(), data[\"Defense\"].head()], axis=1)\nconcated_h","9d78b3f0":"# here we fill all the empty columns in data with string 'empty'\ndata.fillna('empty')","6c43461d":"# here we drop every row that contains any empty cell\ndata.dropna()","cbe86f33":"# in python, assertion returns nothing if it passes.\ntry:\n    assert 1 == 1\n    print(\"Assertion passed\")\nexcept AssertionError as e:\n    print(\"ASSERTION FAILED\")","34245384":"# it throws AssertionError if it does not pass\n\n#i use try-catch so jupyter wont stop on assertion error\ntry:\n    assert 1 == 2\nexcept AssertionError as e:\n    print(\"ASSERTION FAILED\")\n","7ab64a22":"dt = pd.DataFrame({\"Nums\":[1,2,3,None,5,6,7]})\n\n# returns if serie does not contain any null values. will return false\ndt[\"Nums\"].notnull().all()","358fed09":"# lets drop null values\ndt.Nums.dropna(inplace=True)\ndt","b5190a61":"# and assert if there is no null value remaining after dropping\ntry:\n    assert dt.Nums.notnull().all()\n    print(\"Assertion passed\")\nexcept AssertionError as e:\n    print(\"ASSERTION FAILED\")\n# Passed!","82d04ad5":"## MISSING DATA\nyou can \n* leave as-is\n* drop them\n* fill them","0a24c405":"In graphic above, the box is median, the lines are min and max, the circles are outliers.","47aaf556":"## PIVOTING THE MELTED DATA\nPivot creates some sort of table which is 2 dimensional. Both columns and the rows are metadata, and values are the data.","3386a96b":"Lets make an assertion in a serie","cb0fb411":"## CONCATENATING THE DATA\nWe concat dataframes with concat function.","1e3d3086":"## ASSERTION\n**Assertion** is a general programming concept. With it, we validate an expression. I will be using try-except for better output.","79922ad1":"## TIDY DATA WITH MELT\n\nwe'll simplify the data first, to see more clearly","4b5c29ad":"Data Cleaning(Class 02 Section 05) is to be reviewed here\n\n## DATA CLEANING\nWe may need to clear and transform data from\n* Lacking data in rows\n* Col name inconsistency\n* Bad format(string values where they should be numbers)\n\n### Importing and taking a glance\nWe need to inspect our data if it needs a cleaning.","c3e64511":"## EXPLORATORY DATA ANALYSIS\n### VALUE_COUNTS()\nFrequency of values in a series","d304ad70":"## VISUAL EXPLORATORY DATA ANALYSIS(EDA)","ebaae331":"* Interquartile Range(**IQR**) is:\n    * IQR = Q3-Q1\n* An outlier is \n  * smaller than Q1 - (1.5 * IQR)\n**OR** \n  * bigger than Q3 + (1.5 * IQR)\n","5482e381":"Now we melt the data. **Melting** means, taking only the columns we state.","9b2c871f":"## QUARTILES - OUTLIERS\nQuartiles are certain middle grounds in our data.\n\nAssume we have a serie. Sorted by it values,\n* %50 or **The Median** or **The Second Quartile** is the number in middle of a serie\n* %25 or **The First Quartile** is the one between the minimum and %50\n* %75 or **The Third Quartile** is the one between the %50 and maximum"}}