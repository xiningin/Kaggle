{"cell_type":{"193a27f5":"code","ff66e19b":"code","d7ea7a08":"code","480c4416":"code","76d191fa":"code","4a582102":"code","33de060c":"code","bb699192":"code","66aeba0f":"code","2d64b3fb":"markdown"},"source":{"193a27f5":"# customerID - customer id\n# gender - client gender (male \/ female)\n# SeniorCitizen - is the client retired (1, 0)\n# Partner - is the client married (Yes, No)\n# tenure - how many months a person has been a client of the company\n# PhoneService - is the telephone service connected (Yes, No)\n# MultipleLines - are multiple phone lines connected (Yes, No, No phone service)\n# InternetService - client's Internet service provider (DSL, Fiber optic, No)\n# OnlineSecurity - is the online security service connected (Yes, No, No internet service)\n# OnlineBackup - is the online backup service activated (Yes, No, No internet service)\n# DeviceProtection - does the client have equipment insurance (Yes, No, No internet service)\n# TechSupport - is the technical support service connected (Yes, No, No internet service)\n# StreamingTV - is the streaming TV service connected (Yes, No, No internet service)\n# StreamingMovies - is the streaming cinema service activated (Yes, No, No internet service)\n# Contract - type of customer contract (Month-to-month, One year, Two year)\n# PaperlessBilling - whether the client uses paperless billing (Yes, No)\n# PaymentMethod - payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n# MonthlyCharges - current monthly payment\n# TotalCharges - the total amount that the client paid for the services for the entire time\n# Churn - whether there was a churn (Yes or No)","ff66e19b":"import os\nimport pandas as pd\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv(\"..\/input\/telecom-users-dataset\/telecom_users.csv\")\n\n# Except for tenure, monthly charges and total charges, all variables are binary\/categorical features, which\\\n# will be encoded directly when modeling. \ndf.drop([\"Unnamed: 0\"], axis=1, inplace=True)\ndf[\"TotalCharges\"] = df[\"TotalCharges\"].replace({\" \":0}) \ndf[\"TotalCharges\"] = pd.to_numeric(df[\"TotalCharges\"])\ndf.dtypes","d7ea7a08":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title='Telecom User Report', explorative = True)\nprofile.set_variable(\"samples\", None)\nprofile\n\n# As we can see this is a great quality dataset. \n# Most vars are not extreme except for seniorCitizen.\n# No missing value detected.\n# Only PhoneService and MultipleLines have high correlation. \n# Probably needs a upsampling for Churn prediction. ","480c4416":"for column in df.columns:\n    if (df[column].dtypes==\"object\"):\n        print(column, df[column].unique())\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor column in df.columns:\n    if (df[column].dtypes==\"object\"):\n        df[column] = le.fit_transform(df[column])","76d191fa":"import h2o\nh2o.init()","4a582102":"df.drop([\"customerID\"], axis=1, inplace=True)\nfrom h2o.automl import H2OAutoML\nh2o_df = h2o.H2OFrame(df)\nh2o_df[\"Churn\"] = h2o_df[\"Churn\"].asfactor()\n# h2o_df.describe()\ntrain, test = h2o_df.split_frame(ratios=[.8])\n\n# Identify predictors and response\nx = train.columns\ny = \"Churn\"\nx.remove(y)\n\n# train[y] = train[y].asfactor()\n# test[y] = test[y].asfactor()\n\naml = H2OAutoML(max_runtime_secs=600,\n                exclude_algos=['DeepLearning'],\n                seed=1,\n                stopping_metric='AUC',\n                sort_metric='AUC',\n                balance_classes=True,\n                project_name='Churn_Prediction'\n)\n\n%time aml.train(x=x, y=y, training_frame=train)","33de060c":"# View the AutoML Leaderboard\nlb = aml.leaderboard\nlb.head(rows=lb.nrows)  # Print all rows instead of default","bb699192":"model = aml.leader\nmodel_id = aml.leader.model_id\n\nmodel = h2o.get_model(model_id)\nmodel.model_performance(test)","66aeba0f":"aml.leader.explain(test)\n# So we can detect 982 customers out of 1281 who will fall into the churn category. ","2d64b3fb":"In a more professional way we should replace records with dictionaries, in which way we have a more consistant labeling. \n\nFor example 1 for Yes, 0 for No and maybe a -1 for No Service. In this way we can plot the correlation plot.\n\nBut only for modeling purpose, I just label everything in an easy way. \n\nNow the labels are arranged in alphabetical order. \n\nSo I will also print out the original unique values for reference. "}}