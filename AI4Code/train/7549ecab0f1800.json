{"cell_type":{"4ed84d15":"code","87e7991f":"code","2ad40826":"code","a349f0a0":"code","d9c6b027":"code","6111508c":"code","ba325c8b":"code","5d454b94":"code","d6d4c508":"code","7aa1db8d":"code","a8802730":"code","367ded31":"code","9e38dd8b":"code","9c579835":"code","a6611f5c":"code","a2df78e3":"code","7167f517":"code","686536ae":"code","8c4d896c":"code","b4d7da13":"code","22914a5d":"code","f769ecc4":"code","bc261f58":"code","158fa416":"code","6358f418":"code","c1245868":"code","aa1c1ba6":"code","1ad703b2":"code","08114d6e":"code","b97909ad":"code","d339eccc":"code","2b3cd2d4":"code","30968949":"code","3845f403":"code","6e06a16e":"code","ae56b03e":"code","0ad2387e":"code","8769d8c7":"code","765594f2":"code","e848f273":"code","eaadc5a8":"code","2093a6be":"code","a476f635":"code","21f93d9e":"code","956e6c81":"code","7a98339d":"code","dface83b":"code","45898bd8":"code","846fcc86":"code","2fc88d29":"code","af468d76":"code","647ae7f4":"code","71546000":"code","2382ca7c":"code","633ba5fb":"code","18b7489a":"code","d09516cd":"code","32cbe2e1":"code","4b5db6e3":"code","1e461875":"code","fcc6d921":"code","84b99971":"code","23d402f2":"code","3a7acb1a":"code","182909f7":"code","49ed5249":"code","8c8e4139":"code","2e4b6f81":"code","569f48b2":"code","7f5f0f1f":"code","0a4d3096":"code","8a8d84ee":"code","e3792a61":"code","5d1aefdf":"code","a2e29868":"code","fedca904":"code","d3c24cbf":"code","f7e6e642":"code","73138a70":"markdown","0a1a4252":"markdown","4cb81748":"markdown","85627174":"markdown","05888cfb":"markdown","80aab140":"markdown"},"source":{"4ed84d15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87e7991f":"import pandas as pd \nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import pyplot\n\nfrom scipy import stats \nimport datetime\n\nimport warnings\nwarnings.filterwarnings('ignore')","2ad40826":"train = pd.read_csv(\"..\/input\/turkiye-is-bankas-machine-learning-challenge-3\/train.csv\")\ntest=pd.read_csv(\"..\/input\/turkiye-is-bankas-machine-learning-challenge-3\/test.csv\")\nexpendi=pd.read_csv(\"..\/input\/turkiye-is-bankas-machine-learning-challenge-3\/monthly_expenditures.csv\")","a349f0a0":"test.shape,train.shape","d9c6b027":"train=train.drop([\"tarih\"], axis=1)\ntest=test.drop([\"tarih\"], axis=1)","6111508c":"train = train.merge(expendi, on=[\"musteri\"], how='left')\ntrain","ba325c8b":"fig = plt.subplots(figsize=(8, 5))\nplt.hist(train[train['target']==0]['yas'],bins=[0,20,30,40,50],alpha=0.5, label='bekar')\nplt.hist(train[train['target']==1]['yas'],bins=[0,20,30,40,50],alpha=0.5,label='evlenmi\u015f')\nplt.ylabel(\"m\u00fc\u015fteri say\u0131s\u0131\")\nplt.xlabel(\"m\u00fc\u015fterinin ya\u015f\u0131\")\nplt.legend()\nplt.tight_layout()\nplt.title('ya\u015fa g\u00f6re evlilik da\u011f\u0131l\u0131m\u0131')\nplt.show()","5d454b94":"fig = plt.subplots(figsize=(8, 5))\nplt.hist(train[train['target']==0]['kidem_suresi'],bins=[0,50,80,110,150,250,350,600],alpha=0.5, label='bekar')\nplt.hist(train[train['target']==1]['kidem_suresi'],bins=[0,50,80,110,150,250,350,600],alpha=0.5,label='evlenmi\u015f')\nplt.ylabel(\"m\u00fc\u015fteri say\u0131s\u0131\")\nplt.xlabel(\"k\u0131dem s\u00fcresi\")\nplt.legend()\nplt.tight_layout()\nplt.title('k\u0131dem g\u00f6re evlilik da\u011f\u0131l\u0131m\u0131')\nplt.show()","d6d4c508":"fig = plt.subplots(figsize=(8, 5))\nplt.hist(train[train['target']==0]['islem_adedi'],bins=[-2,0,10,20,30],alpha=0.5, label='bekar')\nplt.hist(train[train['target']==1]['islem_adedi'],bins=[-2,0,10,20,30],alpha=0.5,label='evlenmi\u015f')\nplt.ylabel(\"m\u00fc\u015fteri say\u0131s\u0131\")\nplt.xlabel(\"i\u015flem adedi\")\nplt.legend()\nplt.tight_layout()\nplt.title('i\u015flem adedine g\u00f6re evlilik da\u011f\u0131l\u0131m\u0131')\nplt.show()","7aa1db8d":"test= test.merge(expendi, on=[\"musteri\"], how='left')","a8802730":"test.shape,train.shape","367ded31":"test.musteri.nunique()","9e38dd8b":"train.head()","9c579835":"plt.figure(figsize=(10,5))\nsns.distplot(train.yas, bins=10, kde=False, color=\"blue\");","a6611f5c":"bins1 = [0, 20, 30, 40, 50]\nnames1 = ['<20', '20-30', '30-40', '40-50']\n\ntrain['yas_aralik'] = pd.cut(train['yas'], bins1, labels=names1)","a2df78e3":"plt.figure(figsize=(10,5))\nsns.distplot(train.kidem_suresi, bins=10, kde=False, color=\"blue\",hist_kws=dict(edgecolor=\"k\", linewidth=2));","7167f517":"bins2 = [-10,0, 50, 100, 150, 200,np.inf]\nnames2 = ['-10-0','0-50', '50-100', '100-150', '150-200','200+']\n\ntrain['sure_aralik'] = pd.cut(train['kidem_suresi'], bins2, labels=names2)","686536ae":"train['tarih'] = pd.to_datetime(train['tarih'].astype(str), format='%Y%m%d')\n\ntrain[\"quarter\"] = train.tarih.dt.quarter\ntrain[\"year\"] = train.tarih.dt.year\ntrain[\"month\"] = train.tarih.dt.month\ntrain[\"week\"] = train.tarih.dt.week\ntrain[\"day\"] = train.tarih.dt.day","8c4d896c":"train.head()","b4d7da13":"test.head()","22914a5d":"bins3 = [0, 20, 30, 40, 50]\nnames3 = ['<20', '20-30', '30-40', '40-50']\n\ntest['yas_aralik'] = pd.cut(test['yas'], bins3, labels=names3)","f769ecc4":"bins4 = [-10,0, 50, 100, 150, 200,np.inf]\nnames4 = ['-10-0','0-50', '50-100', '100-150', '150-200','200+']\n\ntest['sure_aralik'] = pd.cut(test['kidem_suresi'], bins4, labels=names4)","bc261f58":"test['tarih'] = pd.to_datetime(test['tarih'].astype(str), format='%Y%m%d')\n\n\ntest[\"quarter\"] = test.tarih.dt.quarter\ntest[\"year\"] = test.tarih.dt.year\ntest[\"month\"] = test.tarih.dt.month\ntest[\"week\"] = test.tarih.dt.week\ntest[\"day\"] = test.tarih.dt.day","158fa416":"train.describe(include='all').T","6358f418":"test.describe(include='all').T","c1245868":"print(len(train[train.islem_adedi > 0]),len(train[train.islem_adedi < 0]))\nprint(len(train[train.kidem_suresi > 0]),len(train[train.kidem_suresi < 0]))","aa1c1ba6":"train.columns[train.isnull().any()]","1ad703b2":"missings=train.filter(['egitim', 'is_durumu', 'meslek_grubu'], axis=1)\ndef values_table(missings):\n    mis_val = missings.isnull().sum()\n    mis_val_percent = 100 * missings.isnull().sum() \/ len(missings)\n    table = pd.concat([ mis_val,mis_val_percent], axis=1)\n    table = table.rename(columns = {  0 :'Missing Values', 1 : '% Missing Value'})\n    table['Data Type'] = missings.dtypes\n    table = table[table.iloc[:,1] != 0].sort_values('% Missing Value', ascending=False).round(1)\n    print (\"There are \" + str(train.shape[1]) + \" columns and \" + str(train.shape[0]) + \" rows in the dataset.\\n\"      \n             + str(table.shape[0]) + \" of these columns have missing variables.\")\n    return table\n\nvalues_table(missings) #train i\u00e7in","08114d6e":"print(\"meslek:\",train.meslek_grubu.mode()[0])","b97909ad":"train['meslek_grubu'].fillna(train['meslek_grubu'].mode()[0],inplace=True)\ntrain['egitim'].fillna(train['egitim'].mode()[0],inplace=True)\ntrain['is_durumu'].fillna(train['is_durumu'].mode()[0],inplace=True)","d339eccc":"train.isnull().sum()","2b3cd2d4":"sns.boxplot(train['kidem_suresi']); #min -1 ve max 467 gibi de\u011ferler g\u00f6r\u00fcld\u00fc.","30968949":"df= train.loc[train.kidem_suresi > 0].copy()\n\nplt.figure(figsize=(10,5))\nsns.distplot(np.log(df.kidem_suresi), bins=10, kde=False, color=\"blue\");","3845f403":"np.exp(0),np.exp(6.1)","6e06a16e":"sns.boxplot(df['islem_adedi']);","ae56b03e":"df= df.loc[df.islem_adedi > 0].copy()\n\nplt.figure(figsize=(10,5))\nsns.distplot(np.log(df.islem_adedi ), bins=3, kde=False, color=\"blue\"); #\u015fimdilik sadece 0dan k\u00fc\u00e7\u00fck de\u011ferleri sildik onun d\u0131\u015f\u0131nda ayk\u0131r\u0131lar\u0131 b\u0131rakt\u0131m.","0ad2387e":"np.exp(0),np.exp(5)","8769d8c7":"sns.boxplot(train['aylik_toplam_tutar']);","765594f2":"train_df=df.drop(df['aylik_toplam_tutar'].idxmax())","e848f273":"test.columns[test.isnull().any()]","eaadc5a8":"test['meslek_grubu'].fillna(train['meslek_grubu'].mode()[0],inplace=True)\ntest['egitim'].fillna(train['egitim'].mode()[0],inplace=True)\ntest['is_durumu'].fillna(train['is_durumu'].mode()[0],inplace=True) ","2093a6be":"test.isnull().sum()","a476f635":"test.shape","21f93d9e":"from sklearn.preprocessing import LabelEncoder\n\nenc = LabelEncoder()\ndef FunLabelEncoder(train_df):\n    for c in train_df.columns:\n        if train_df.dtypes[c] ==object:\n            enc.fit(train_df[c].astype(str))\n            train_df[c] = enc.transform(train_df[c].astype(str))\n    return train_df","956e6c81":"train_df[\"sure_aralik\"] = train_df[\"sure_aralik\"].cat.codes\ntrain_df[\"yas_aralik\"] = train_df[\"yas_aralik\"].cat.codes\ntrain_df.head()","7a98339d":"train_df = FunLabelEncoder(train_df)\ntrain_df.info()","dface83b":"sns.set(style=\"darkgrid\")\nsns.catplot(x=\"meslek_grubu\", hue=\"target\", kind=\"count\", edgecolor=\".6\",\n            data=train_df,height=5, aspect=2);","45898bd8":"train_df.loc[(train_df['meslek_grubu']==11\n             )]['target'].value_counts()","846fcc86":"sns.set(style=\"darkgrid\")\ng=sns.catplot(x=\"sektor\", hue=\"target\", kind=\"count\", edgecolor=\".6\",\n            data=train_df,height=5, aspect=2);","2fc88d29":"sns.set(style=\"darkgrid\")\nsns.catplot(x=\"egitim\", hue=\"target\", kind=\"count\", edgecolor=\".6\",\n            data=train_df,height=5, aspect=2);","af468d76":"sns.set(style=\"darkgrid\")\nsns.catplot(x=\"is_durumu\", hue=\"target\", kind=\"count\", edgecolor=\".6\",\n            data=train_df,height=5, aspect=2);","647ae7f4":"train_df.loc[(train_df['is_durumu']==10)]['target'].value_counts()","71546000":"enc = LabelEncoder()\ndef FunLabelEncoder(df_test):\n    for c in df_test.columns:\n        if df_test.dtypes[c] == object:\n            enc.fit(df_test[c].astype(str))\n            df_test[c] = enc.transform(df_test[c].astype(str))\n    return df_test","2382ca7c":"test[\"sure_aralik\"] =test[\"sure_aralik\"].cat.codes\ntest[\"yas_aralik\"] = test[\"yas_aralik\"].cat.codes\ntest.head()","633ba5fb":"test = FunLabelEncoder(test)\ntest.info()","18b7489a":"grouped_features = [\"quarter\",\"month\", \"week\", \"day\",\n                    \"musteri\",\"egitim\",\"is_durumu\",\"meslek_grubu\",\"yas_aralik\",\"sure_aralik\",\n                    \"sektor\",\"target\"]\n\nmountly_data = pd.DataFrame(train_df.groupby(grouped_features).islem_adedi.sum(), columns=[\"islem_adedi\"]) \nmountly_data[\"aylik_toplam_tutar\"] = train_df.groupby(grouped_features).aylik_toplam_tutar.sum()\n\nmountly_data = mountly_data.reset_index() \nmountly_data","d09516cd":"grouped_features_t = [\"quarter\",\"month\", \"week\", \"day\",\n                    \"musteri\",\"egitim\",\"is_durumu\",\"meslek_grubu\",\"yas_aralik\",\"sure_aralik\",\n                    \"sektor\"]\n\nmountly_test = pd.DataFrame(test.groupby(grouped_features_t ).islem_adedi.sum(), columns=[\"islem_adedi\"]) \nmountly_test[\"aylik_toplam_tutar\"] = test.groupby(grouped_features_t ).aylik_toplam_tutar.sum()\n\nmountly_test = mountly_test.reset_index() \nmountly_test","32cbe2e1":"mountly_data=mountly_data.drop(\"musteri\", axis=1)\nmountly_test= mountly_test.drop(\"musteri\", axis=1)","4b5db6e3":"mountly_data.head()","1e461875":"mountly_test.head()","fcc6d921":"y = mountly_data['target']\nX= mountly_data.drop(columns=['target'],axis=1)\nX.shape,y.shape","84b99971":"from sklearn.model_selection import cross_val_score\nfrom xgboost import XGBClassifier\nimport lightgbm as lgb\nfrom sklearn.metrics import classification_report\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\n\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import roc_auc_score, roc_curve","23d402f2":"X = X.reset_index(drop=True)\ny=y.reset_index(drop=True)","3a7acb1a":"skf = StratifiedKFold(n_splits=5,random_state=659, shuffle=True)\nfor train_index, test_index in skf.split(X, y):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train, X_test = X.loc[train_index], X.loc[test_index]\n    y_train, y_test = y.loc[train_index], y.loc[test_index]","182909f7":"#from sklearn.model_selection import train_test_split\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=9,stratify=y)","49ed5249":"XGBClassifier()","8c8e4139":"mountly_data.target.value_counts()","2e4b6f81":"import math  \nmarried=mountly_data[mountly_data['target']==1].shape[0]\nsingle= mountly_data[mountly_data['target']==0].shape[0]\n\nscale_pos_weight =math.sqrt((single)\/(married))\nscale_pos_weight ","569f48b2":"xgb=XGBClassifier(objective='binary:logistic',eval_metric='auc',    max_depth=7,min_child_weight=3,subsample=0.55, \n                                                  colsample_bytree=0.85,gamma=0.4,\n                  reg_alpha=0.005,nthread=4\n                  n_estimators= 100)\n\nclf_xgb=xgb.fit(X_train, y_train)\n\ny_pred1=clf_xgb.predict(X_test)\n\nprobs =clf_xgb.predict_proba(X_test)\nprobs = probs[:, 1]\n\nlr_precision, lr_recall, _ = precision_recall_curve(y_test, probs)\nlr_f1, lr_auc = f1_score(y_test, y_pred1), auc(lr_recall, lr_precision)\nprint(lr_auc) ","7f5f0f1f":"from sklearn.metrics import confusion_matrix\n\nprint(classification_report(y_test, y_pred1))","0a4d3096":"from sklearn.metrics import plot_roc_curve\n\nplt.figure(figsize = (12,6), linewidth= 1)\nplt.plot([0,1], [0,1], 'k--', label = 'Random guessing: 0.5')\nplt.title(\"ROC CURVE\")\nplt.legend(loc=\"lower right\")\nax = plt.gca()\nplot_roc_curve(xgb, X_test, y_test,ax=ax);","8a8d84ee":"y_test=pd.DataFrame(y_test) \ny_test.value_counts()","e3792a61":"xgb_son=xgb.fit(X_train, y_train)\ny_pred_yeni= xgb_son.predict(mountly_test)","5d1aefdf":"sub1=pd.DataFrame({\"musteri\":test.musteri,\"target\":y_pred_yeni})\nsub1","a2e29868":"sub2=sub1.groupby('musteri')['target'].apply(lambda x: x.mode().iat[0]).reset_index()\nsub2","fedca904":"y_pred1=pd.DataFrame(y_pred1) \ny_pred1.value_counts()","d3c24cbf":"sub2.target.value_counts() #419 #1111 #","f7e6e642":"sub2.to_csv(\"sub_11.csv\",index=False)","73138a70":"# Group by","0a1a4252":"# TEST verisi","4cb81748":"xgb_param = {\n    'max_depth':range(5,9,2),\n    'min_child_weight':range(1,6,2),\n    'n_estimators':[150,200,250,300],\n    'learning_rate':[0.1,0.5]\n} \ngsearch_xgb = GridSearchCV(estimator = XGBClassifier(objective='binary:logistic',eval_metric='auc',\n                                                     scale_pos_weight =scale_pos_weight), \n                           param_grid = xgb_param, \n                           scoring='roc_auc',\n                           verbose=3,\n                           cv=skf)\n\ngrid_xgb=gsearch_xgb.fit(X_train,y_train)","85627174":"# **Test Verisi De\u011ferlendirme**","05888cfb":"# Kay\u0131p De\u011fer Analizi","80aab140":"# Say\u0131sal de\u011ferlerin g\u00f6rselle\u015ftirilmesi"}}