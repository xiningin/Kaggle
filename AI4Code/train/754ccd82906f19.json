{"cell_type":{"782ed7e6":"code","81734e19":"code","fb3ab16c":"code","d31d588c":"code","10414149":"code","0530cf22":"code","d69f82b0":"code","7914ec26":"code","3deafbea":"code","3dd33b15":"code","e63f6705":"code","4176fdf0":"code","6fbe2726":"code","685dcd65":"markdown"},"source":{"782ed7e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","81734e19":"print(\"Hello... Raja is working on Fashion mnist dataset\")","fb3ab16c":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","d31d588c":"train_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')\n\ntrain_df.head()","10414149":"test_df.head()","0530cf22":"train_data = np.array(train_df, dtype='float32')\ntest_data = np.array(test_df, dtype='float32')\n\nx_train = train_data[:,1:]\/255\ny_train = train_data[:,0]\n\nx_test = test_data[:,1:]\/255\ny_test = test_data[:,0]\n","d69f82b0":"x_train, x_validate, y_train, y_validate = train_test_split(x_train, y_train, test_size=0.2, random_state=12345)","7914ec26":"image = x_train[150, :].reshape((28,28))\nplt.imshow(image)\nplt.show()","3deafbea":"im_rows = 28\nim_cols = 28\nbatch_size = 512\nim_shape = (im_rows, im_cols, 1)\n\nx_train = x_train.reshape(x_train.shape[0], *im_shape)\nx_test = x_test.reshape(x_test.shape[0], *im_shape)\nx_validate = x_validate.reshape(x_validate.shape[0], *im_shape)\n\nprint('x_train shape {}'.format(x_train.shape))\nprint('x_test shape {}'.format(x_test.shape))\nprint('x_validate shape {}'.format(x_validate.shape))\n","3dd33b15":"cnn_model = Sequential([\n    Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=im_shape),\n    MaxPooling2D(pool_size=2),\n    Dropout(0.2),\n    Flatten(),\n    Dense(32, activation='relu'),\n    Dense(10, activation='softmax')\n    \n])","e63f6705":"cnn_model.compile(\n    loss='sparse_categorical_crossentropy',\n    optimizer=Adam(0.001),\n    metrics=['accuracy']\n)","4176fdf0":"cnn_model.fit(\n    x_train, y_train, batch_size=batch_size,\n    epochs=10, verbose=1,\n    validation_data=(x_validate, y_validate)\n)","6fbe2726":"score = cnn_model.evaluate(x_test,y_test,verbose=0)\nprint('test loss {:4f}'.format(score[0]))\nprint('test acc {:4f}'.format(score[1]))","685dcd65":"#cnn buildmodel, compile, fit "}}