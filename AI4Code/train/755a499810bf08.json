{"cell_type":{"44ed06f2":"code","074416a2":"code","a9f852e8":"code","514ad9da":"code","183e3014":"code","18313d67":"code","ce98c6d9":"code","37b63790":"code","adf70e6a":"code","a3f7b8ee":"code","6fb2415e":"code","22e31f83":"code","aa31920b":"code","990d0168":"code","f4e82fa2":"code","b5e707c5":"code","f7e11135":"code","9a49d8a7":"code","d4133d66":"markdown","b7a0e998":"markdown","9068fd7f":"markdown","59c40cf6":"markdown"},"source":{"44ed06f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","074416a2":"import numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport random\nimport pickle\nimport time\n","a9f852e8":"DATADIR = '..\/input\/kagglecatsanddogs_3367a\/PetImages'\nCATEGORIES = ['Dog','Cat']","514ad9da":"#Iterate and convert datasets to an array.\n\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR, category) # path to dataset directory\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap='gray')\n        plt.show()\n        break\n    break","183e3014":"# Checking Data\nprint('Data Array:\\n',img_array,'\\n')\nprint('Data Shape:',img_array.shape)","18313d67":"# Resize the image\nIMG_SIZE = 80\nnew_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\nplt.imshow(new_array, cmap='gray')\nplt.show()","ce98c6d9":"# Create dataset for training\n\ntraining_data = []\n\ndef create_training_data():\n    for category in CATEGORIES:\n        path = os.path.join(DATADIR, category)\n        class_num = CATEGORIES.index(category) # categories for dog(0) and cat(1)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\n                training_data.append([new_array,class_num])\n            except Exception as e:\n                pass\n        \ncreate_training_data()","37b63790":"print(len(training_data))","adf70e6a":"# Reshuffle Data\nrandom.shuffle(training_data)\n\n# Check the shuffled data\nfor sample in training_data [:10]:\n    print(sample[1])","a3f7b8ee":"# Create list for training data\nX = [] # feature dataset\ny = [] # label dataset\n\nfor features, label in training_data:\n    X.append(features)\n    y.append(label)\n\n# Convert X to an array since you can't pass it to a neural network\nX = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)\nprint(X[:1])","6fb2415e":"# Save traing set using pickle\n\npickle_out = open('X.pickle', 'wb')\npickle.dump(X, pickle_out)\npickle_out.close()\n\npickle_out = open('y.pickle', 'wb')\npickle.dump(y, pickle_out)\npickle_out.close()","22e31f83":"# Open pickle file\n\npickle_in = open('X.pickle','rb')\nX = pickle.load(pickle_in)\nX[1]","aa31920b":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import TensorBoard","990d0168":"# Callback Name for Tensorboard\nNAME = 'Cats-vs-Dogs-64x2-CNN-{}'.format(int(time.time()))","f4e82fa2":"# Optimizing GPU\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)\nsess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))","b5e707c5":"# Load saved datasets\n\npickle_in = open('X.pickle','rb')\nX = pickle.load(pickle_in)\n\npickle_in = open('y.pickle','rb')\ny = pickle.load(pickle_in)","f7e11135":"# Normalized Datasets\nX = X\/255.0","9a49d8a7":"# Build Model\n\nmodel = Sequential()\n\nmodel.add(Conv2D(64, (3,3), input_shape=X.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten()) #to convert 3D feature map to 1D\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\ntensorboard = TensorBoard(log_dir='.\/output\/{}'.format(NAME))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(X, y, batch_size=32, epochs=10, validation_split=0.3, callbacks=[tensorboard])","d4133d66":"## The Model","b7a0e998":"## Data","9068fd7f":"# Cats and Dogs with CNN TensorFlow\n\nThis notebook is to recreate the code from [pythonprogramming.net](https:\/\/pythonprogramming.net\/loading-custom-data-deep-learning-python-tensorflow-keras\/) tutorials. The goal is to understand the code and how CNN models works in classifying and image of a cats or dogs using the Cats and Dogs [dataset](https:\/\/www.microsoft.com\/en-us\/download\/confirmation.aspx?id=54765).","59c40cf6":"## Preprocess Dataset"}}