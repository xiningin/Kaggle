{"cell_type":{"77af394a":"code","b5e30d0f":"code","14f3ec44":"code","537007ac":"code","60a89064":"code","945f90dc":"code","c6fd7084":"code","efe8306e":"code","8ebcd6c6":"code","9ed32138":"code","9b474694":"code","7f9423ab":"code","8e56a766":"code","45002ee8":"code","a437186b":"code","dbcfaa14":"code","c760f904":"code","4fd9038a":"code","6aa0fa5b":"code","ba8727b5":"code","26097f86":"code","168e083b":"code","74f87ba4":"code","9d2e0273":"code","a9d70d04":"code","97a643df":"code","e4807396":"code","3e0c7d6d":"code","a0526904":"code","a632b593":"code","5f66a288":"code","092b82a9":"code","7487b46d":"code","b9d8b569":"code","f1d033fa":"markdown","de15961c":"markdown","ae441dfd":"markdown","f2512bda":"markdown","efce5249":"markdown"},"source":{"77af394a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5e30d0f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns\n","14f3ec44":"df=pd.read_csv('..\/input\/diabetes\/diabetes.csv')\ndf.head()","537007ac":"df.info()","60a89064":"df.shape","945f90dc":"df.describe()","c6fd7084":"import missingno as msno\nmsno.bar(df)","efe8306e":"df['Outcome'].value_counts()","8ebcd6c6":"corr=df.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(corr,square=True,annot=True)","9ed32138":"sns.countplot(df['Outcome'])\nplt.figure(figsize=(20,10))\nsns.set()","9b474694":"df.hist(figsize=(20,10))\nplt.show()\n","7f9423ab":"sns.pairplot(df)","8e56a766":"sns.stripplot(df['Outcome'],df['Glucose'])\n\nplt.show()","45002ee8":"sns.stripplot(df['Outcome'],df['BMI'])\nsns.set_theme(style='whitegrid')\nplt.show()","a437186b":"sns.stripplot(df['Outcome'],df['Insulin'])\nsns.set_theme(style='whitegrid')\nplt.show()","dbcfaa14":"sns.stripplot(df['Outcome'],df['SkinThickness'])\nsns.set_theme(style='whitegrid')\nplt.show()","c760f904":"df['Pregnancies'].unique()","4fd9038a":"plt.figure(figsize=(16,8))\nsns.stripplot(df['Pregnancies'], df['Outcome'],  palette='pastel', size = 17, linewidth=1,jitter=0.2)","6aa0fa5b":"input1=df.drop('Outcome',axis='columns')\ntarget=df.Outcome\n","ba8727b5":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(input1,target)","26097f86":"# scaling the data \n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","168e083b":"print(len(x_train))\nprint(len(x_test))","74f87ba4":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()","9d2e0273":"model.fit(x_train,y_train)","a9d70d04":"model.score(x_test,y_test)","97a643df":"from sklearn.tree import DecisionTreeClassifier\nreg=DecisionTreeClassifier()","e4807396":"reg.fit(x_train,y_train)","3e0c7d6d":"reg.score(x_test,y_test)","a0526904":"from sklearn.svm import SVC\nref=SVC()","a632b593":"ref.fit(x_train,y_train)","5f66a288":"ref.score(x_train,y_train)","092b82a9":"Y_PREDICTED=ref.predict(x_test)\nY_PREDICTED","7487b46d":"data={\n    'Algorithm':['logisticregression','DecisionTree','SVM'],\n    'Score':[model.score(x_test,y_test),reg.score(x_test,y_test),0.8472222222222222]\n}\ncnn=pd.DataFrame(data)\ncnn","b9d8b569":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,Y_PREDICTED)","f1d033fa":"# 1.  IMPORT DIABETS DATASET","de15961c":"# Data visualization","ae441dfd":"# Model Working","f2512bda":"1.  Most of the person have Glucose range between(100-125)\n \n2.  Most of the person have BloodPressure range between(60-80)\n \n3.  Most of the person have  BMI between(30-40)\n \n4.  Most of the person have insulin between(0-100)\n\n5.  Most of the person have Age range between(20-25)","efce5249":"# * now lets cover the relationship between different functions"}}