{"cell_type":{"738f18de":"code","61da8e66":"code","5d537f32":"code","bac60976":"code","0a62c104":"code","a8c82bfc":"code","961946b0":"code","1ca41b02":"code","17e40805":"code","c77f2cdd":"code","dcb27f3c":"code","3a04c7bd":"code","57344769":"code","d1c85464":"code","19dff343":"code","9df1bc13":"code","83bbea6d":"code","104e128c":"code","1ef724b0":"code","b98e25d6":"code","d306cda5":"code","a60852c4":"code","ab803d9d":"code","5429430b":"code","2b694937":"markdown"},"source":{"738f18de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61da8e66":"# Import appropriate libraries\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn import metrics\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import GridSearchCV\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","5d537f32":"df_train = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ndf_test = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/test.csv\")\ndf_train.head()","bac60976":"display(df_test.head())\ndisplay(df_train.describe())\ndisplay(df_train.info())","0a62c104":"# If any null values \ndf_train.isnull().sum()","a8c82bfc":"# Check the countries impacted so far\ncountries = df_train['Country_Region'].unique()\nprint(f'{len(countries)} countries are in dataset:\\n{countries}')","961946b0":"# number based on Province and Targets\nx=df_train.groupby(['Province_State']).count()\nx=x.sort_values(by='Target',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.Id, x.Id, alpha=0.8)\nplt.title(\"Province State wise\")\nplt.ylabel('Target', fontsize=12)\nplt.xlabel('Province_State', fontsize=12)\nplt.show()","1ca41b02":"# number based on County wise and Targets\nx=df_train.groupby(['County']).count()\nx=x.sort_values(by='Target',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.Id, x.Id, alpha=0.8)\nplt.title(\"County wise\")\nplt.ylabel('Target', fontsize=12)\nplt.xlabel('County', fontsize=12)\nplt.show()","17e40805":"# Plot to check Confirmed cases by County\ndf_train.County.value_counts().nlargest(40).plot(kind='bar', figsize=(10,5))\nplt.title(\"Covid19 ConfirmedCases - County wise\")\nplt.ylabel(\"ConfirmedCases\")\nplt.xlabel(\"Ratio\");","c77f2cdd":"# Plot to check Confirmed cases by Province_State\ndf_train.Province_State.value_counts().nlargest(40).plot(kind='bar', figsize=(10,5))\nplt.title(\"Covid19 ConfirmedCases - Province_State wise\")\nplt.ylabel(\"ConfirmedCases\")\nplt.xlabel(\"Ratio\");","dcb27f3c":"# Let's create a new dataframe with selected columns\ndf_new = df_train[['Date','Id','Country_Region','Population','Weight','Target','TargetValue']]\ndf_new.head()","3a04c7bd":"# Plot to show TargetValue\ndf_new['TargetValue'].plot(legend=True,figsize=(10,4))\nplt.show()","57344769":"# Plot to show Country_wise Population\ndf_new['Population'].plot(legend=True,figsize=(10,4))\nplt.show()","d1c85464":"# Plot to show Weight\ndf_new['Weight'].plot(legend=True,figsize=(10,4))\nplt.show()","19dff343":"# Plot to check Status of the different columns\ndf_new.plot(legend=True,figsize=(15,5))\nplt.show()","9df1bc13":"# number of Confirmed cases per Country\nx=df_new.groupby(['Country_Region', 'Target']).count()\nx=x.sort_values(by='TargetValue',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(12,6))\nax= sns.barplot(x.Country_Region, x.TargetValue, alpha=0.8)\nplt.title(\"ConfirmedCases Country Wise\")\nplt.xlabel('# of Confirmed Cases', fontsize=12)\nplt.ylabel('Country', fontsize=12)\nplt.show()","83bbea6d":"#Let's check all the columns status\nsns.pairplot(df_new)","104e128c":"# number of Targets based on Country\nx=df_train.groupby(['Country_Region']).count()\nx=x.sort_values(by='Target',ascending=False)\nx=x.iloc[0:10].reset_index()\nx\n# #plot\nplt.figure(figsize=(8,4))\nax= sns.barplot(x.Id, x.Id, alpha=0.8)\nplt.title(\"Country_Region - Target\")\nplt.ylabel('Target', fontsize=12)\nplt.xlabel('Countries', fontsize=12)\nplt.show()","1ef724b0":"# Check by Confirmed and Fatalities\ntrain = df_train.reset_index().groupby(['Country_Region', 'Target'])['TargetValue'].aggregate('first').unstack()","b98e25d6":"# Check the status of Confimedcases and Fatalities\nsns.lmplot(x='ConfirmedCases', y = 'Fatalities', data = train)\nplt.title('Country\/Region wise')","d306cda5":"# Plot to check ConfirmedCases and Fatalities\ntrain.plot(legend=True,figsize=(15,5))\nplt.show()","a60852c4":"# Plot to show Confirmed cases\ntrain['ConfirmedCases'].plot(legend=True,figsize=(15,5))\nplt.show()","ab803d9d":"# Plot to check Confirmed cases by County for test dataset\ndf_test.County.value_counts().nlargest(20).plot(kind='bar', figsize=(10,5))\nplt.title(\"Covid19 ConfirmedCases - County wise\")\nplt.ylabel(\"ConfirmedCases\")\nplt.xlabel(\"Ratio\");","5429430b":"# Check the test dataset status\nax = df_test.loc[0:999].plot.area(stacked=False,alpha=0.3)\nax.legend(loc='center left',bbox_to_anchor=(1.0, 0.5));","2b694937":"# Exploratory Data Analysis\n\nLet's perform some EDA on the data in order to get a better understanding of the data and how COVID19 is affecting the world as per dataset available in this competition. \n\nWe will analyze and  see how COVID19 has been growing throughout the world since 22nd january 2020. We will explore data through various visualization with each columns and see the impact of coronovirus."}}