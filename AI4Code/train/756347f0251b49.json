{"cell_type":{"77cced85":"code","197d9157":"code","8750ddba":"code","acfebc68":"code","76f3f3d1":"code","85b72e92":"code","794d181c":"code","bff57e2d":"code","92158368":"code","658989f8":"code","140c1ddc":"code","b886f0f2":"code","4d730caf":"code","e9d0ad49":"code","785bdeaf":"code","862b4bb2":"code","f9302a46":"code","caf84812":"code","2b5e4c87":"code","2260174e":"code","f2311053":"code","5cfe1945":"code","2ee9b465":"markdown","f3eca443":"markdown","20e1bafe":"markdown","aa34e72c":"markdown","a676ff7d":"markdown","9d4e30a0":"markdown","5f96e6a0":"markdown","4000b541":"markdown","d69c32b1":"markdown","c1ad7747":"markdown","78cff8ac":"markdown","51310d2b":"markdown","eb3da7c9":"markdown","8cac162b":"markdown"},"source":{"77cced85":"import pandas as pd\nimport datetime\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom matplotlib.pylab import style\nimport statsmodels.api as sm\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport math","197d9157":"import warnings\nwarnings.filterwarnings(\"ignore\")","8750ddba":"path='\/kaggle\/input\/metaverse-cryptos-historical-data\/ENJ_USD  Historical Data.csv'\ndata = pd.read_csv(path)\ndata.head()","acfebc68":"data['Date']=pd.to_datetime(data[\"Date\"])\ndata.set_index('Date',inplace=True)\ndata.index = pd.DatetimeIndex(data.index)","76f3f3d1":"data['2021':]['Price'].plot(figsize=(12,8))\nplt.legend(bbox_to_anchor=(1.25, 0.5))\nplt.title(\"ENJ-Prices of Data\")\nsns.despine()","85b72e92":"data_train = data['2021':'2021-10']\ndata_test = data['2021-11':]","794d181c":"data_train['Price'].plot(figsize=(12,8))\nplt.legend(bbox_to_anchor=(1.25, 0.5))\nplt.title(\"2021\/01 to 2021\/10\")\nsns.despine()","bff57e2d":"from statsmodels.tsa.stattools import adfuller\nplot_acf(data_train['Price'],use_vlines=True , lags= 30)\nplt.show()   \nprint(u'ADF_Result\uff1a', adfuller(data_train['Price'])) ","92158368":"data_train['diff_1'] = data_train['Price'].diff(1) \ndata_train['diff_2'] = data_train['diff_1'].diff(1)\ndata_train[['diff_1','diff_2']].plot(subplots=True, figsize=(18, 12))","658989f8":"plot_acf(data_train['diff_1'][1:],use_vlines=True , lags= 30)\nplt.show()    \nprint(u'Row_Data ADF_Result\uff1a', adfuller(data_train['diff_1'][1:])) ","140c1ddc":"fig = plt.figure(figsize=(12,8))\n#acf\nax1 = fig.add_subplot(211)\nfig = plot_acf(data_train['diff_1'].dropna(), lags=30,ax=ax1)\nax1.xaxis.set_ticks_position('bottom')\nfig.tight_layout();\n#pacf\nax2 = fig.add_subplot(212)\nfig = plot_pacf(data_train['diff_1'].dropna(), lags=30, ax=ax2)\nax2.xaxis.set_ticks_position('bottom')\nfig.tight_layout();","b886f0f2":"arma_22 = sm.tsa.SARIMAX(data_train['Price'].dropna(),order=(2,1,2),freq='D').fit()\narma_22.aic","4d730caf":"import itertools\np_min = 0\nd_min = 1\nq_min = 0\np_max = 2\nd_max = 1\nq_max = 2\n \n# Initialize a DataFrame to store the results\nresults_aic = pd.DataFrame(index=['AR{}'.format(i) for i in range(p_min,p_max+1)],\n                           columns=['MA{}'.format(i) for i in range(q_min,q_max+1)])\n \nfor p,d,q in itertools.product(range(p_min,p_max+1),\n                               range(d_min,d_max+1),\n                               range(q_min,q_max+1)):\n    try:\n        model = sm.tsa.SARIMAX(data_train['Price'].dropna(), order=(p, d, q),freq='D'\n                               #enforce_stationarity=False,\n                               #enforce_invertibility=False,\n                              )\n        results = model.fit()\n        results_aic.loc['AR{}'.format(p), 'MA{}'.format(q)] = abs(results.aic)\n    except:\n        continue\nresults_aic = results_aic[results_aic.columns].astype(float)","e9d0ad49":"fig, ax = plt.subplots(figsize=(10, 8))\nax = sns.heatmap(results_aic,\n                 mask=abs(results_aic.isnull()),\n                 ax=ax,\n                 annot=True,\n                 fmt='.2f',\n                 );\nax.set_title('AIC');","785bdeaf":"model=ARIMA(data_train['Price'],order=(2,1,2),freq='D').fit(disp=-1)","862b4bb2":"from statsmodels.stats.diagnostic import acorr_ljungbox as lb_test\nresid = model.resid \nlb_test(resid)[1][0]","f9302a46":"model.plot_predict(dynamic=False)\nplt.show()","caf84812":"fc , se , conf = model.forecast(len(data_test),alpha=0.05)\nfc_series = pd.Series(fc, index=data_test.index)\nlower_series = pd.Series(conf[:, 0], index=data_test.index)\nupper_series = pd.Series(conf[:, 1], index=data_test.index)","2b5e4c87":"plt.figure(figsize=(12,5), dpi=100)\nplt.plot(data_train['Price'], label='training')\nplt.plot(data_test['Price'], label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","2260174e":"res_eval = pd.concat([fc_series, lower_series,upper_series,data_test['Price']], axis=1)","f2311053":"res_all = len(res_eval)\nflag=0\nfor index,row in res_eval.iterrows():\n    if ((row['Price']>row[2]) | (row['Price']<row[1])):\n        flag=flag+1\nprint(1-(flag\/res_all))","5cfe1945":"fc , se , conf = model.forecast(20,alpha=0.05)\nfc_series = pd.Series(fc, index=(data_test.index)[0:20])\nlower_series = pd.Series(conf[:, 0], index=data_test[0:20].index)\nupper_series = pd.Series(conf[:, 1], index=data_test[0:20].index)\nplt.figure(figsize=(12,5), dpi=100)\nplt.plot(data_train['Price'][-20:], label='training')\nplt.plot(data_test['Price'][0:20], label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","2ee9b465":"It can be seen from the above figure that the model fitting effect is relatively good.","f3eca443":"Through the ADF test of the first-order difference, it can be seen that the value of test statistic is -19.53991506164106, which is less than the critical value at the significance level of 1%, 5% and 10%, and p-value = 0.0 < 0.05. Therefore, the original hypothesis is accepted, indicating that the first-order difference sequence of the original stock price is a stationary sequence at this time. Therefore, it is determined that d = 1 in ARIMA model","20e1bafe":"## To be continued...","aa34e72c":"Firstly, the ADF test is conducted on the original transaction data. It can be seen that the value of test statistic is -1.71, which is greater than the critical value at the significance level of 1%, 5% and 10%, and p-value = 0.42 > 0.05. Therefore, the original hypothesis is rejected, indicating that the original stock price is not a stationary series at this time. Therefore, differential processing is required","a676ff7d":"At this time, the AIC value is 296 (absolute value). In order to confirm whether the parameters are properly selected, a convenient method is used for comparison here.","9d4e30a0":"Then ARIMA\uff082\uff0c1\uff0c2\uff09 model is used to predict enj price","5f96e6a0":"Ljung box test is performed on the residual of the model, P = 0.93 > 0.5. Therefore, the original assumption is accepted. The residual sequence is a pure random white noise sequence, so the modeling is effective and the model establishment is reasonable [3]. Therefore, ARIMA (2,1,2) model is used for prediction","4000b541":"ARIMA model also needs to determine P and Q values, which need to be judged by partial autocorrelation coefficient and autocorrelation coefficient. Here, AIC is selected to judge whether the parameters fit well.","d69c32b1":"From this result, it is also appropriate to establish P and Q as 2 and 2 respectively","c1ad7747":"The ARIMA model is used to predict and test the results. 92% of the results are in its 95% confidence interval, and enj prices show an upward trend. However, it can be found that the confidence interval exposure of the model is large, so the actual guidance of the prediction results is small; At the same time, the volatility predicted by ARIMA is also very different from the real price, and will converge to a straight line after a period of fluctuation. This is because Arima is essentially a prediction of stationary series, and enj, as a virtual currency, has large price fluctuation and no obvious periodicity. Therefore, ARIMA model does not capture its volatility well. Moreover, due to the long time period of prediction, it does not perform well here.","78cff8ac":"Through the result test, 92% of the results are in their 95% confidence interval. From the model results, enj's price will rise. However, because the time dimension involved in the image is too long, the image details are difficult to observe, and the confidence interval exposure is large. From the image, the result is not very good. The details of the image are enlarged below","51310d2b":"It can be seen from the autocorrelation and partial correlation diagrams that the autocorrelation coefficients and partial correlation coefficients basically fall within the confidence interval. From the visual results, both P and Q can be taken as 2","eb3da7c9":"Below you will try to add a time sliding window. In this way, the data is more stable.","8cac162b":"It can be seen that there is little difference between the predicted value and the real value on November 1, 2021. However, the volatility of the model is not as large as its real volatility, and converges to a straight line after a certain fluctuation. After that, the prediction effect of enj price is general"}}