{"cell_type":{"3a973390":"code","7375991c":"code","032e9149":"code","0d8e5d5c":"code","251f91cf":"code","5abdf78b":"code","7266b90e":"code","3d875191":"code","ef25fa85":"code","cf441869":"code","52f8e611":"code","24a9e145":"code","a4a87361":"code","aef32ad0":"code","6237147e":"markdown","670ea90f":"markdown","270cfdf8":"markdown"},"source":{"3a973390":"from keras.applications.vgg19 import VGG19\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Flatten\nfrom keras.datasets import cifar10\nimport matplotlib.pyplot as plt\nimport cv2\nimport numpy as np","7375991c":"(x_train, y_train),(x_test, y_test) = cifar10.load_data()\nprint(\"x_train shape\", x_train.shape)","032e9149":"numberOfClass = 10\n\ny_train = to_categorical(y_train, numberOfClass)\ny_test = to_categorical(y_test, numberOfClass)","0d8e5d5c":"input_shape = x_train.shape[1:]\nprint(input_shape)","251f91cf":"plt.imshow(x_test[224].astype(np.uint8))\n#plt.axis(\"off\")\nplt.show()","5abdf78b":"def resize_img(img):\n    numberOfImage = img.shape[0]\n    new_array = np.zeros((numberOfImage, 48,48,3))\n    for i in range(numberOfImage):\n        new_array[i] = cv2.resize(img[i,:,:,:],(48,48))\n    return new_array\n\nx_train = resize_img(x_train)\nx_test = resize_img(x_test)\n\nprint(\"yeni boyut:\", x_train.shape)","7266b90e":"plt.figure()\nplt.imshow(x_train[5511].astype(np.uint8))\nplt.show()","3d875191":"vgg = VGG19(include_top = False, weights = \"imagenet\",input_shape = (48,48,3))\nprint(vgg.summary())","ef25fa85":"vgg_layer_list = vgg.layers\nprint(vgg_layer_list)","cf441869":"model = Sequential()\n\nfor layer in vgg_layer_list:\n    model.add(layer)\n    \nprint(model.summary())","52f8e611":"for layer in model.layers:\n    layer.trainable = False\n\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Dense(numberOfClass, activation = \"softmax\"))\n\nprint(model.summary())","24a9e145":"model.compile(loss = \"categorical_crossentropy\",\n             optimizer = \"rmsprop\",\n             metrics = [\"accuracy\"])\n\nhist = model.fit(x_train, y_train, validation_split = 0.2, epochs = 5, batch_size = 1000)","a4a87361":"model.save_weights(\"ornek.h5\")","aef32ad0":"plt.plot(hist.history[\"loss\"], label = \"training loss\")\nplt.plot(hist.history[\"val_loss\"], label = \"val loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\nplt.plot(hist.history[\"accuracy\"], label = \"training loss\")\nplt.plot(hist.history[\"val_accuracy\"], label = \"val loss\")\nplt.legend()\nplt.show()","6237147e":"# VGG19 Section","670ea90f":"fully con layers","270cfdf8":"# Size Increase"}}