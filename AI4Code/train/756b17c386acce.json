{"cell_type":{"f0b3c11b":"code","442d235e":"code","fc55730b":"code","f5ed50ec":"code","b1e82722":"code","895a7abd":"code","8af709c7":"code","e8196707":"code","7326a879":"code","e0023def":"code","3786c0e3":"code","83459bfd":"markdown","8f68230d":"markdown","21279b4e":"markdown","b0d35dc6":"markdown","bae45acd":"markdown","0c0da23b":"markdown","44ac3508":"markdown","c52c7e8b":"markdown","bfa8d1cc":"markdown"},"source":{"f0b3c11b":"!pip install --user torch==1.9.0 torchvision==0.10.0 torchaudio==0.9.0 torchtext==0.10.0\n","442d235e":"import torch\ntorch.__version__\n","fc55730b":"import sys\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport fastai\nfrom fastai.vision.all import *","f5ed50ec":"data_blocks = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                       get_items=get_image_files,\n                       get_y=parent_label,\n                       splitter=RandomSplitter(valid_pct=0.1, seed=42),\n                       item_tfms=RandomResizedCrop(224, min_scale=0.5),\n                       batch_tfms=aug_transforms())","b1e82722":"n_train_instances = len(os.listdir(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/dogs\")) + \\\nlen(os.listdir(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\/cats\"))\n\nn_test_instances = len(os.listdir(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/dogs\")) + \\\nlen(os.listdir(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\/cats\"))\n\nprint(\"Num training instances\", n_train_instances)\nprint(\"Num test instances\", n_test_instances)","895a7abd":"dls_train = data_blocks.dataloaders(\"\/kaggle\/input\/cat-and-dog\/training_set\/training_set\")\ndls_test = data_blocks.dataloaders(\"\/kaggle\/input\/cat-and-dog\/test_set\/test_set\")","8af709c7":"print(dls_train.vocab)\ndls_train.train.show_batch(max_n=8, nrows=1)","e8196707":"learn = cnn_learner(dls_train, resnet34, metrics=error_rate)\nlr_min = learn.lr_find()\nlr_min","7326a879":"learn.fit_one_cycle(5, 0.0006)","e0023def":"learn.unfreeze()\nlearn.fit_one_cycle(6, lr_max=slice(1e-5, 5e-4))","3786c0e3":"N = 10\nids = np.random.permutation(np.arange(len(dls_test.train_ds)))[:N]\nfor i in ids:\n    x_test, y_test = dls_test.train_ds[i]\n    y_test_class = dls_train.vocab[y_test]\n    y_hat_class, _, _ = learn.predict(x_test)\n    print(\"Actual Class:\", y_test_class,\"\\n\", \"Predicted Class:\", y_hat_class)\n    plt.imshow(x_test)\n    plt.show()","83459bfd":"Create `DataBlock`. These will be used to create train and test data loaders.","8f68230d":"Fit only head layers (layers of base model are frozen and are not trained)","21279b4e":"Use above learning rate to train model.","b0d35dc6":"Un-freeze layers of base model and train complete model.","bae45acd":"Perform prediction on some random examples of test set.","0c0da23b":"Create data loaders for train and test set.","44ac3508":"In this notebook we present a basic walkthrough of Image Classification using FastAI library.\n\n**Note:**\nIf related to `MAGMA` are encountered then execute below cell.","c52c7e8b":"Visualize some examples from training set.","bfa8d1cc":"Create model and identify best possible learning rate."}}