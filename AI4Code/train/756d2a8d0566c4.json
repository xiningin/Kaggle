{"cell_type":{"df8749ff":"code","efdb18de":"code","6eef207b":"code","26150a6f":"code","ca10651d":"code","55d39a21":"code","e9f5d1a4":"code","87a5555a":"code","b67e9442":"code","d3141b83":"code","f0f1f2ec":"code","c28082a4":"code","8821f685":"code","e6f3b7fe":"code","30d26fde":"code","daaa2f5b":"code","52b75da2":"code","3035d94b":"code","f2a489ee":"code","7985c6d7":"code","6bb9a5b5":"code","8c9eb1f2":"code","da0f1cae":"code","2b2acc3a":"code","4e3175b5":"code","5a5482ab":"code","338282fc":"code","f061e245":"code","2533da3f":"code","11f8cc75":"code","60172df0":"code","f3a21323":"code","a181c769":"markdown","f30569ac":"markdown","0c8a01d8":"markdown","b15b8eec":"markdown"},"source":{"df8749ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","efdb18de":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport  numpy as np\nfrom keras.utils.np_utils import to_categorical","6eef207b":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","26150a6f":"train.head(3)","ca10651d":"train.shape","55d39a21":"test.shape","e9f5d1a4":"sns.countplot(train['label'])","87a5555a":"x_train=train.drop(['label'],1)\ny_train=train['label']","b67e9442":"x_train=np.array(x_train)\ntest=np.array(test)","d3141b83":"x_train.shape","f0f1f2ec":"test.shape","c28082a4":"x_train=x_train.reshape(42000,28,28)\ntest=test.reshape(28000,28,28)","8821f685":"x_train=x_train\/255\ntest=test\/255","e6f3b7fe":"def show_img(i):\n    plt.imshow(x_train[i],cmap='gray')\n    plt.xlabel(y_train[i])\nshow_img(0)","30d26fde":"target=x_train.reshape(-1,28,28,1)\ntest=test.reshape(-1,28,28,1)\ny_train=np.array(y_train)\nlabel=to_categorical(y_train)\nlabel.shape","daaa2f5b":"from keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout","52b75da2":"model=Sequential([\n    Conv2D(32,(5,5) , activation='relu' , input_shape=(28,28,1)),\n    MaxPooling2D(pool_size=(2,2)),\n    \n    Conv2D(64,(5,5), activation ='relu'),\n    MaxPooling2D(pool_size=(2,2)),\n    Dropout(0.25),\n    \n    Conv2D(64,(3,3), activation ='relu'),\n    MaxPooling2D(pool_size=(2,2)),\n    Dropout(0.25),\n    \n    Flatten(),\n    Dense(64, activation='relu'),\n    Dense(10, activation='softmax')\n])","3035d94b":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","f2a489ee":"model.fit(target,label,epochs=40,batch_size=64)","7985c6d7":"Y_pred = model.predict(test)\nY_pred_classes = np.argmax(Y_pred,axis = 1) ","6bb9a5b5":"submission_data = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","8c9eb1f2":"submission_data['Label']=Y_pred_classes","da0f1cae":"submission_data.to_csv('submit.csv' ,index=False)","2b2acc3a":"def test_output(i):\n  plt.imshow(x_train[i],cmap='gray')\n  predicted=np.argmax(model.predict(target[i].reshape(-1,28,28,1)))\n  actual=np.argmax(label[i])\n  plt.xlabel(f'predicted= {predicted}  Actual= {actual}')","4e3175b5":"test_output(2)","5a5482ab":"test_output(4)","338282fc":"from PIL import Image, ImageGrab","f061e245":"def predict_digit1(img):\n    img = Image.open(img)\n    plt.imshow(img)\n    img = img.convert('L', dither=Image.NONE)\n    img = img.resize((28,28))\n    img = np.array(img)\n    img=np.invert(img)\n    predicted=np.argmax(model.predict(img.reshape(-1,28,28,1)))\n    # plt.imshow(img,interpolation='nearest')\n    plt.xlabel(f'Predicted= {predicted}')","2533da3f":"predict_digit1('..\/input\/temporary\/Images\/images.jfif')","11f8cc75":"predict_digit1('..\/input\/temporary\/Images\/download.png')","60172df0":"predict_digit1('..\/input\/temporary\/Images\/531-5314816_handwritten-1-number-9-hand-written-png-transparent.png')","f3a21323":"predict_digit1('..\/input\/temporary\/Images\/1.jpg')","a181c769":"# Load data","f30569ac":"# Model Testing","0c8a01d8":"# Model creation","b15b8eec":"# Model testing using real world images"}}