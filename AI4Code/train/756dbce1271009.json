{"cell_type":{"5e2b23ca":"code","060007ef":"code","0fd743a5":"code","46bc58e3":"code","98134efc":"code","5ecc7a40":"code","4b374098":"code","3e65b542":"code","fe4fee09":"code","e4bd43de":"code","ca5a6859":"code","80d753bb":"code","28916c21":"code","f268b787":"code","6790eee8":"code","70ad7e24":"code","d110a5af":"code","6021950c":"code","fa05fe2f":"code","69f45ed2":"code","3ff25035":"code","bd0aaca1":"code","3c1ce424":"code","60befce1":"code","96b2538a":"code","a53e195b":"code","f50f5715":"code","49191877":"code","13abe0b8":"code","136686f8":"code","b4461947":"code","b69f0432":"code","356fd92a":"code","5c048e32":"code","9fc89edc":"code","1da08142":"code","48eab197":"code","cdd4021a":"code","ce2dd531":"code","7e047c88":"markdown","856e7b78":"markdown","e4adeafc":"markdown","720a8f9c":"markdown","1378617e":"markdown","261a93c0":"markdown","c35f4b4a":"markdown","5c91bc29":"markdown","47d2b048":"markdown"},"source":{"5e2b23ca":"import pandas as pd\nimport numpy as np","060007ef":"import warnings\nwarnings.simplefilter(action='ignore', category=Warning)\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, cross_validate","0fd743a5":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","46bc58e3":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 20)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 170)","98134efc":"df=pd.read_csv(\"..\/input\/hitters-baseball-data\/Hitters.csv\")","5ecc7a40":"df.head()","4b374098":"df.isnull().sum()","3e65b542":"df.dropna(inplace=True)","fe4fee09":"df[\"col_fea\"]=df[\"Walks\"]-df[\"Errors\"]\ndf[\"col_fea\"].describe()\ndf.head()\ndf[\"col_fea_2\"]=[1 if i>0 else 0 for i in df[\"col_fea\"]]","e4bd43de":"df[\"hit_rate\"]=df[\"Hits\"]\/df[\"AtBat\"]\ndf[\"hit_rate\"].max()","ca5a6859":"df[\"feature\"]=df[\"RBI\"]*df[\"Walks\"]","80d753bb":"df[\"CAtBat_n\"]=df[\"CAtBat\"]\/df[\"Years\"]\ndf[\"CHits_n\"]=df[\"CHits\"]\/df[\"Years\"]\ndf[\"CHmRun_n\"]=df[\"CHmRun\"]\/df[\"Years\"]\ndf[\"CRuns_n\"]=df['CRuns']\/df[\"Years\"]\ndf[\"CRBI_n\"]=df[\"CRBI\"]\/df[\"Years\"]\ndf[\"CWalks_n\"]=df[\"CWalks\"]\/df[\"Years\"]","28916c21":"df[\"n_Walks\"]=df[\"Walks\"]\/df[\"CWalks\"]\ndf[\"n_Atbat\"]=df[\"AtBat\"]\/df[\"CAtBat\"]\ndf[\"n_Hits\"]=df[\"Hits\"]\/df[\"CHits\"]\ndf[\"n_Runs\"]=df[\"Runs\"]\/df['CRuns']\ndf[\"n_RBI\"]=df[\"RBI\"]\/df[\"CRBI\"]","f268b787":"df[\"new_feat\"]=df[\"Runs\"]-df[\"Errors\"]\ndf[\"new_feat2\"]=df[\"Assists\"]-df[\"Errors\"]\ndf['New_Feature_4'] = df['Runs'] \/ (df['CRuns'] * df['Years'])","6790eee8":"df.loc[(df[\"Runs\"] > df[\"CRuns_n\"]),\"new_runs\"]=1\ndf.loc[(df[\"Runs\"] <= df[\"CRuns_n\"]),\"new_runs\"]=0","70ad7e24":"def twice_col(df,col1,col2):\n    n=df[col1].unique().tolist()\n    l=len(n)\n    n1=df[col2].unique().tolist()\n    l1=len(n1)\n    for i in n:\n        for j in range(l):\n            for z in n1:\n                for t in range(l1):\n                    df.loc[(df[col1] == n[j]) & (df[col2] == n1[t]), str(col1) + \"_\" + str(col2)]=str(n[j]) +\"_\"+ str(n1[t])\n","d110a5af":"twice_col(df,\"League\",\"NewLeague\")","6021950c":"df.reset_index(inplace=True)","fa05fe2f":"df[\"League_NewLeague\"].unique()\n# array(['A_A', 'N_N', 'N_A', 'A_N']\ndf.head()\nfor i in range(df.shape[0]):\n    if df.loc[i, \"League_NewLeague\"] in ['N_N','A_N']:\n        df.loc[i, \"status\"] = 0\n    else:\n        df.loc[i, \"status\"] = 1","69f45ed2":"def generate(df,c,a,b,t,y,y1,y2):\n    df.loc[(df[c] < a), t] = y\n    df.loc[(df[c] >= a) & (df[c] < b), t] = y1\n    df.loc[(df[c] >= b), t] = y2\n    return df[t]","3ff25035":"df[\"Years\"].describe()\ngenerate(df,\"Years\",4,11,\"experience\",\"beginner\",\"intermediate\",\"senior\")","bd0aaca1":"generate(df,\"Errors\",3,11,\"condition\",\"verygood\",\"good\",\"bad\")\ndf.head()","3c1ce424":"twice_col(df,\"experience\",\"condition\")","60befce1":"df[\"new_col\"]=df[\"RBI\"]*df[\"HmRun\"]\n\n\ndf[\"New_col2\"]=df[\"HmRun\"]\/df['Hits']\n\n\ndf[\"feature_t\"]=df[\"CAtBat\"]*df[\"CHits\"]*df[\"CHmRun\"]*df[\"CRuns\"]*df[\"CRBI\"]*df[\"CWalks\"]","96b2538a":"def grab_col_names(dataframe, cat_th=10, car_th=20):    \n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","a53e195b":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\nnum_cols","f50f5715":"from sklearn.preprocessing import LabelEncoder","49191877":"binary_cols = [col for col in df.columns if df[col].dtype not in [int, float]\n               and df[col].nunique() == 2]","13abe0b8":"labelencoder = LabelEncoder()","136686f8":"for i in binary_cols:\n    df[i] = labelencoder.fit_transform(df[i])","b4461947":"ohe_cols = [col for col in df.columns if 10 >= df[col].nunique() > 2]","b69f0432":"df=pd.get_dummies(df, columns=ohe_cols, drop_first=True)","356fd92a":"from sklearn.preprocessing import MinMaxScaler","5c048e32":"for col in num_cols:\n        transformer = MinMaxScaler().fit(df[[col]])\n        df[col] = transformer.transform(df[[col]])","9fc89edc":"from sklearn.linear_model import LinearRegression\ny = df[\"Salary\"]\nX = df.drop([\"Salary\"], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.20, random_state=1)\n\nreg_model = LinearRegression().fit(X, y)\nreg_model.intercept_\nreg_model.coef_","1da08142":"#Train RMSE\ny_pred = reg_model.predict(X_train)\nnp.sqrt(mean_squared_error(y_train, y_pred))","48eab197":"# Test RMSE\ny_pred = reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","cdd4021a":"# Test RKARE\nreg_model.score(X_test, y_test)","ce2dd531":"np.mean(np.sqrt(-cross_val_score(reg_model,\n                                 X,\n                                 y,\n                                 cv=10,\n                                 scoring=\"neg_mean_squared_error\")))","7e047c88":"This function, needed to join two columns","856e7b78":"**Purpose**: Salary information and career statistics for 1986 for shared baseball players' salary estimates carry out a machine learning project","e4adeafc":"* STANDARDIZATION","720a8f9c":"* DELETING NULL VALUES","1378617e":"AtBat: Number of hits with a baseball bat during the 1986-1987 season\nHits: Number of hits in the 1986-1987 season\nHmRun: Most valuable hits in the 1986-1987 season\nRuns: The points he earned for his team in the 1986-1987 season\nRBI: Number of players a batsman had jogged when he hit\nWalks: Number of mistakes made by the opposing player\nYears: Player's playing time in major league (years)\nCAtBat: Number of hits during a player's career\nCHits: The number of hits the player has made throughout his career\nCHmRun: The player's most valuable hit during his career\nCRuns: Points earned by the player during his career\nCRBI: The number of players the player has made during his career\nCWalks: Number of mistakes the player has made to the opposing player during their career\nLeague: A factor with A and N levels showing the league in which the player played until the end of the season\nDivision: A factor with levels E and W indicating the position played by the player at the end of 1986\nPutOuts: Helping your teammate in-game\nAssists: Number of assists made by the player in the 1986-1987 season\nErrors: Player's number of errors in the 1986-1987 season\nSalary: The salary of the player in the 1986-1987 season (over thousand)\nNewLeague: a factor with A and N levels indicating the player's league at the start of the 1987 season\n\n**dependent variable** : Salary","261a93c0":"* ENCODING","c35f4b4a":"* FEAUTURE ENGINEERING","5c91bc29":"# REGRESSION WITH HITTERS DATASET","47d2b048":"* SET UP MODEL"}}