{"cell_type":{"44fdd7c3":"code","cc80dc7a":"code","ee7dad52":"code","57d02ca0":"code","bc9dbb21":"code","8349bfaa":"code","41161ebd":"code","5dd9f088":"code","6d4a7c92":"code","d061298f":"code","16a2d1c7":"code","973e5398":"code","d21008cd":"code","fc6ebbf6":"code","73663446":"code","66e40db4":"code","442b34b5":"code","335bb7a9":"code","ed1c6b06":"code","81263a18":"code","a8fa08cb":"markdown","72b9ff7b":"markdown"},"source":{"44fdd7c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc80dc7a":"from gensim.models.doc2vec import Doc2Vec, TaggedDocument\nfrom nltk.tokenize import word_tokenize","ee7dad52":"data = [\"I love machine learning. Its awesome.\",\n        \"I love coding in python\",\n        \"I love building chatbots\",\n        \"they chat amagingly well\"]\n#tag each document\ntagged_data = [TaggedDocument(words=word_tokenize(_d.lower()), tags=[str(i)]) for i, _d in enumerate(data)]","57d02ca0":"tagged_data","bc9dbb21":"max_epochs = 100\nvec_size = 20\nalpha = 0.025\n\nmodel = Doc2Vec(size=vec_size,\n                alpha=alpha, \n                min_alpha=0.00025,\n                min_count=1,\n                dm =1)\n  \nmodel.build_vocab(tagged_data)\n\nfor epoch in range(max_epochs):\n    print('iteration {0}'.format(epoch))\n    model.train(tagged_data,\n                total_examples=model.corpus_count,\n                epochs=model.iter)\n    # decrease the learning rate\n    model.alpha -= 0.0002\n    # fix the learning rate, no decay\n    model.min_alpha = model.alpha\n\nmodel.save(\"d2v.model\")\nprint(\"Model Saved\")","8349bfaa":"from gensim.models.doc2vec import Doc2Vec\n\nmodel= Doc2Vec.load(\"d2v.model\")\n#to find the vector of a document which is not in training data\ntest_data = word_tokenize(\"I love chatbots\".lower())\nv1 = model.infer_vector(test_data)\nprint(\"V1_infer\", v1)\n\n# to find most similar doc using tags\nsimilar_doc = model.docvecs.most_similar('1')\nprint(similar_doc)\n\n\n# to find vector of doc in training data using tags or in other words, printing the vector of document at index 1 in training data\nprint(model.docvecs['1'])","41161ebd":"from gensim.test.utils import common_corpus, common_dictionary, get_tmpfile\nfrom gensim.similarities import Similarity\nindex_tmpfile = get_tmpfile(\"index\")\nbatch_of_documents = common_corpus[:]  # only as example\nindex = Similarity(index_tmpfile, common_corpus, num_features=len(common_dictionary))  # build the index\n# the batch is simply an iterable of documents, aka gensim corpus:\nfor similarities in index[batch_of_documents]:\n     pass","5dd9f088":"batch_of_documents","6d4a7c92":"import os\nimport gensim\n# Set file names for train and test data\ntest_data_dir = os.path.join(gensim.__path__[0], 'test', 'test_data')\nlee_train_file = os.path.join(test_data_dir, 'lee_background.cor')\nlee_test_file = os.path.join(test_data_dir, 'lee.cor')","d061298f":"lee_train_file","16a2d1c7":"import smart_open\n\ndef read_corpus(fname, tokens_only=False):\n    with smart_open.open(fname, encoding=\"iso-8859-1\") as f:\n        for i, line in enumerate(f):\n            tokens = gensim.utils.simple_preprocess(line)\n            if tokens_only:\n                yield tokens\n            else:\n                # For training data, add tags\n                yield gensim.models.doc2vec.TaggedDocument(tokens, [i])\n\ntrain_corpus = list(read_corpus(lee_train_file))\ntest_corpus = list(read_corpus(lee_test_file, tokens_only=True))","973e5398":"print(train_corpus[:2])","d21008cd":"model = gensim.models.doc2vec.Doc2Vec(vector_size=50, min_count=2, epochs=40)\nmodel.build_vocab(train_corpus)","fc6ebbf6":"model.train(train_corpus, total_examples=model.corpus_count, epochs=model.epochs)","73663446":"vector = model.infer_vector(['only', 'you', 'can', 'prevent', 'forest', 'fires'])\nprint(vector)","66e40db4":"#questions on task\nriskFactorsQuery = \"What do we know about potential risks factors?\\\nwhat is the effect of Smoking, pre-existing pulmonary disease?\\\nDo co-existing respiratory\/viral infections make the virus more transmissible or virulent and other comorbidities?\\\nWhat is the effect on Neonates and pregnant women?\\\nWhat are the Socio-economic and behavioral factors on COVID-19?\\\nWhat is the economic impact of the virus?\"\n\nincubationPeriodQuery=\"What is known about incubation?\\\nHow long is the incubation period in patients for covid,sars and mers virus in days?\\\nRange of incubation periods for the disease in humans ?\\\nHow the incubation period varies across age, health status?\\\nHow long individuals are contagious, even after recovery?\"\n\nTransmissionDynamicsQuery = \"What are Transmission dynamics of the virus, including the basic reproductive number, incubation period, serial interval, modes of transmission and environmental factors?\"\nSeverityofDiseaseQuery = \"Severity of disease, including risk of fatality among symptomatic hospitalized patients, and high-risk patient groups\"\n\nquestions = [riskFactorsQuery, incubationPeriodQuery]\n   \n    ","442b34b5":"#tokens = word_tokenize(questions)\n#tokens = [word_tokenize(i) for i in questions]\n#for listt in tokens:\n #   print(listt)\nquestionVector = model.infer_vector(word_tokenize(riskFactorsQuery))","335bb7a9":"print(questionVector)","ed1c6b06":"similar_doc = model.docvecs.most_similar([questionVector],topn=60) #The docvecs property of the Doc2Vec model holds all trained vectors for the 'document tags' seen during training","81263a18":"similar_doc","a8fa08cb":"**Anthoer example with gensim**","72b9ff7b":"**Another one again**"}}