{"cell_type":{"ed051e28":"code","3c5cc76c":"code","ca9319bd":"code","8abaaad7":"code","6089e4a3":"code","b3939471":"code","dab4cd8d":"code","455607c5":"code","26d416a6":"code","5abcf562":"code","1746e9d2":"code","92668348":"code","512ebc16":"code","7b16c013":"code","ec8b0b11":"code","3e41eec8":"code","f6802e13":"code","533c5bea":"code","b6602a8b":"code","68668769":"markdown","e0b564a0":"markdown","21a13695":"markdown","089617e1":"markdown","e13f4b94":"markdown","43a1ef44":"markdown","8b5dc1a5":"markdown","2066e951":"markdown","811930bf":"markdown","c453dfd8":"markdown","36f8f6ae":"markdown","3259e3c7":"markdown","9ba81dc0":"markdown","9ff411f8":"markdown","c80a2580":"markdown","b5346b5d":"markdown","bc339817":"markdown","d1a986e8":"markdown","7beb6a85":"markdown","14f7db97":"markdown","aa588a91":"markdown","2f5b1d2a":"markdown","72df1aba":"markdown"},"source":{"ed051e28":"# Import torch and other required modules\nimport torch\n!pip install jovian\nimport jovian","3c5cc76c":"# Example 1 - working\ntorch.manual_seed(1)","ca9319bd":"# Example 2 - working\ntorch.manual_seed(2.5)","8abaaad7":"# Example 3 - not working\ntorch.manual_seed('abc')","6089e4a3":"# Example 1 - creates a vector\ntorch.randn(5) ","b3939471":"# Example 2 - creates a 3-dimensional array\ntorch.randn(2,3,4)","dab4cd8d":"# Example 3 - breaking (to illustrate when it breaks)\ntorch.randn([[1, 2], [3, 4, 5]])","455607c5":"jovian.commit(project = '01-tensor-operations')","26d416a6":"# Example 1 - working\nt1 = torch.randn(5)\nt2 = torch.randn(5)\nproduct = torch.matmul(t1, t2)\nprint('tensor 1: ', t1, '\\ntensor 2: ', t2,\n      '\\nproduct: ',product)","5abcf562":"# Example 2 - working\nt1 = torch.randn(2,3)\nt2 = torch.randn(3,2)\nproduct = torch.matmul(t1, t2)\nprint('tensor 1: ', t1, '\\ntensor 2: ', t2,\n      '\\nproduct: ',product)","1746e9d2":"# Example 3 - breaking (to illustrate when it breaks)\nt1 = torch.randn(2,3)\nt2 = torch.randn(2,3)\nproduct = torch.matmul(t1, t2)\nprint('tensor 1: ', t1, '\\ntensor 2: ', t2,\n      '\\nproduct: ',product)","92668348":"# Example 1 - working\nt1 = torch.randn(2)\nt2 = torch.randn(2)\ndot_product = torch.dot(t1, t2)\n\nprint('tensor 1: ', t1, '\\ntensor 2: ', t2,\n      '\\ndot_product: ',product)","512ebc16":"# Example 2 - working\nt1 = torch.randn(5)\nt2 = torch.randn(5)\ndot_product = torch.dot(t1, t2)\n\nprint('tensor 1: ', t1, '\\ntensor 2: ', t2,\n      '\\ndot_product: ',product)","7b16c013":"# Example 3 - breaking (to illustrate when it breaks)\nt1 = torch.randn(5)\nt2 = torch.randn(3)\ndot_product = torch.dot(t1, t2)\n\nprint('tensor 1: ', t1, '\\ntensor 2: ', t2,\n      '\\ndot_product: ',product)","ec8b0b11":"jovian.commit(project = '01-tensor-operations')","3e41eec8":"# Example 1 - working\nt1 = torch.rand(2, 2)\nt1_inverse = torch.inverse(t1)\nt1_x_t1_inverse = torch.matmul(t1, t1_inverse)\nprint('t1 mat: ', t1, '\\nt1_inverse:', t1_inverse, '\\nt1_x_t1_inverse: ',t1_x_t1_inverse)","f6802e13":"# Example 2 - working\nt1 = torch.rand(4, 4)\nt1_inverse = torch.inverse(t1)\nt1_x_t1_inverse = torch.matmul(t1, t1_inverse)\nprint('t1 mat: ', t1, '\\nt1_inverse:', t1_inverse, '\\nt1_x_t1_inverse: ',t1_x_t1_inverse)","533c5bea":"# Example 3 - breaking (to illustrate when it breaks)\nt1 = torch.rand(4, 3)\nt1_inverse = torch.inverse(t1)","b6602a8b":"jovian.commit(project = '01-tensor-operations')","68668769":"## Function 2 - torch.randn(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\n\nThis function draws random numbers from a standard normal distribution (mean = 0, sd = 1) and returns a tensor.\n\n**Input argmuents**\n- *size \n- out=None \n- dtype=None \n- layout=torch.strided \n- device=None \n- requires_grad=False\n\n**Output argument(s)**\n- Tensor\nRef: https:\/\/pytorch.org\/docs\/master\/generated\/torch.randn.html","e0b564a0":"## Function 1 - torch.manual_seed(numeric)\n\nIn order to ensure that the computations using random numbers are reproducible, we must set a manual random seed before any random number generation. This function allows you to include integers and floats to do this.\n\nRef: https:\/\/pytorch.org\/docs\/stable\/notes\/randomness.html","21a13695":"\nExplanation about example - Building on the previous function randn, we draw random numbers for a vector multiplication, resulting in a scalar value.","089617e1":"Explanation about example - Dot products require the same tensor size in order to run successfully.","e13f4b94":"Closing comments about when to use this function - Inverse operations are extremely useful for linear algebra manipulations. Useful to keep in mind when coding basic regressions from scratch.","43a1ef44":"Closing comments: This function is very useful to generate quick numbers for demonstrations.","8b5dc1a5":"## Conclusion\n\nThis is a primer for doing very basic linear algebra manipulations in PyTorch. Next, we can compare with how these functions translate to NumPy operations.","2066e951":"Explanation about example - For matrix multiplication, matrix 1 must be m x n dimension, while matrix 2 must be n x k dimension. My example violated this and resulted in a size mismatch error.","811930bf":"Explanation about example - Again, I use the randn function to quickly draw numbers from the standard normal distribution for computing the dot product.","c453dfd8":"Manual seed doesn't accept strings as input.","36f8f6ae":"Explanation about example\n- The size argument, which is mandatory for this functionmust be a tuple of integers and not a list.","3259e3c7":"Explanation about example - Building on the 2 previously used functions, torch.randn and torch.matmul, I demonstrate that we successfully computed the inverse matrix. This can be verified by multiplying the original matrix with its inverse such that it results in the identity matrix ((offdiagonal elements will be 0, and diagonal elements will be 1) ","9ba81dc0":"Explanation about example - Same as above.","9ff411f8":"Explanation about example - We multiply random matrix of 2x3 dimension with 3x2 dimension and get a 2x2 product matrix. ","c80a2580":"Closing comments about when to use this function - The PyTorch dot product documentation states that it does not support broadcasting semantics, i.e., without making copies of the data, tensor arguments cannot be expanded to be of equal sizes. For more details on braodcasting, see: https:\/\/pytorch.org\/docs\/master\/notes\/broadcasting.html#broadcasting-semantics","b5346b5d":"Explanation about example - Dot product works with identically sized tensors","bc339817":"# Assignment 1: Tensor Operations in PyTorch\n\n### Five PyTorch Operations\n\nPyTorch is a productionizable Deep Learning platform backed by FaceBook. It's been a popular tool for creating Generative Adversarial Networks (GANs). At its core, it uses tensors for manipulation.\n\nI have selected the following 5 PyTorch operations because they are fundamental to getting started and allow you to do linear algebra manipulations.\n\n- torch.manual_seed()\n- torch.randn()\n- torch.matmul()\n- torch.dot()\n- torch.inverse()","d1a986e8":"## Function 4 - torch.dot(input, tensor) \u2192 Tensor\n\nComputes the dot product of 2 tensors.\n\n**Input argmuents**\n- input\n- tensor\n\n**Output argument(s)**\n- Tensor\n\nref: https:\/\/pytorch.org\/docs\/master\/generated\/torch.dot.html","7beb6a85":"## Function 5 - torch.inverse(input, out=None) \u2192 Tensor\n\nThis function returns the inverse of 2D square matrix or batches of 2d square matrices.\n** Input arguments **\n- input\n- out = None (default)\n** Output argument(s) **\n- Tensor\n\nRef: https:\/\/pytorch.org\/docs\/master\/generated\/torch.inverse.html","14f7db97":"Closing comments about when to use this function - There is another function for matrix multiplication torch.mm (https:\/\/pytorch.org\/docs\/master\/generated\/torch.mm.html).","aa588a91":"## Reference Links\nProvide links to your references and other interesting articles about tensors\n* Broadcasting: https:\/\/pytorch.org\/docs\/master\/notes\/broadcasting.html#broadcasting-semantics\n* Dot product: https:\/\/pytorch.org\/docs\/master\/generated\/torch.dot.html\n* Matrix Inverse: https:\/\/pytorch.org\/docs\/master\/generated\/torch.inverse.html\n* Matrix multiplication: https:\/\/pytorch.org\/docs\/master\/generated\/torch.matmul.html; https:\/\/pytorch.org\/docs\/master\/generated\/torch.mm.html\n* Official documentation for `torch.Tensor`: https:\/\/pytorch.org\/docs\/stable\/tensors.html\n* Random numbers: https:\/\/pytorch.org\/docs\/master\/generated\/torch.randn.html\n* Reproducibility with manual seed: https:\/\/pytorch.org\/docs\/stable\/notes\/randomness.html","2f5b1d2a":"Explanation about example - Inverses can only be computed for square matrices.","72df1aba":"## Function 3 - torch.matmul(input, other, out=None) \u2192 Tensor\n\nCreates the product of 2 tensors\n\n**Input arguments**\n- input - tensor 1\n- other - tensor 2\n- out = None (default)   \n\n**Output argument(s)**\n- tensor\n\nRef: https:\/\/pytorch.org\/docs\/master\/generated\/torch.matmul.html"}}