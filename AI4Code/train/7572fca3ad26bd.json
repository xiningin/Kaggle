{"cell_type":{"3273f4b1":"code","2e656ea5":"code","8500e1ba":"code","a493b4ee":"code","3442197e":"code","55a60034":"code","ad412249":"code","898bef10":"code","f44be394":"code","302412f8":"code","8509998d":"code","738c69cc":"code","30580d19":"code","32d60df6":"code","0ccc8c22":"code","ae16a586":"code","d31c9beb":"code","398ba8b5":"code","d40b2dfa":"code","620a31e2":"code","40316802":"code","51f146d9":"code","d787c3f9":"code","7057e280":"code","8fe92e24":"code","ada8bac0":"markdown","cb79be62":"markdown","6d49afaf":"markdown","2cb124c5":"markdown","71e497b0":"markdown","7a9a8808":"markdown","b98e5819":"markdown","332c2fb6":"markdown","121f5cf9":"markdown","31697cc8":"markdown","e72bdd28":"markdown","f91d4dd7":"markdown","409610e4":"markdown","996a8971":"markdown","b3cc3806":"markdown","c8e453f9":"markdown","da1fa3c7":"markdown","1c69ce1b":"markdown"},"source":{"3273f4b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e656ea5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","8500e1ba":"df = pd.read_csv('..\/input\/hotel-booking\/hotel_booking.csv')\ndf.head()","a493b4ee":"df.isnull().sum()","3442197e":"df.children.value_counts()","55a60034":"df = df.drop('company',axis=1)\ndf['agent'] = df['agent'].fillna(0)\ndf['children'] = df['children'].fillna(0)\ndf['country'] = df['country'].fillna('Unknown')","ad412249":"df.isnull().sum()","898bef10":"counts = df.arrival_date_month.value_counts()\ncounts.sort_index(inplace=True)\nsns.barplot(x = counts.index, y = counts)\nplt.ylabel('counts')\nplt.xticks(rotation=45);","f44be394":"counts = df.arrival_date_year.value_counts()\ncounts.sort_index(inplace=True)\nsns.barplot(x = counts.index, y = counts)\nplt.xlabel('arrival_date_year')\nplt.ylabel('counts')","302412f8":"counts = df.is_canceled.value_counts()\ncounts.sort_index(inplace=True)\nsns.barplot(x = counts.index, y = counts)\nplt.xlabel('is_canceled')\nplt.ylabel('counts')","8509998d":"sns.barplot(y=\"is_canceled\", x=\"deposit_type\", data=df)","738c69cc":"sns.countplot(data=df, x = 'reserved_room_type')\nplt.show()","30580d19":"char = df.select_dtypes(include='object')\nfor i in char:\n    print(i , df[i].nunique())","32d60df6":"df.drop(['days_in_waiting_list', 'arrival_date_year', 'arrival_date_year', 'assigned_room_type', 'booking_changes',\n               'reservation_status', 'country', 'days_in_waiting_list'], axis = 1, inplace=True)\n\nle=LabelEncoder()\ndf['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])\ndf['year'] = df['reservation_status_date'].dt.year\ndf['month'] = df['reservation_status_date'].dt.month\ndf['day'] = df['reservation_status_date'].dt.day\ndf.drop(['reservation_status_date','arrival_date_month'] , axis = 1, inplace = True)\n\na = df.select_dtypes(object).columns\ncat_list = []\nfor i in a:\n    print (i, df[i].nunique())\n    cat_list.append(i)","0ccc8c22":"for i in cat_list:\n    df[i] = le.fit_transform(df[i])\ndf['year'] = le.fit_transform(df['year'])\ndf['month'] = le.fit_transform(df['month'])\ndf['day'] = le.fit_transform(df['day'])","ae16a586":"y = df['is_canceled']\nX = df.drop('is_canceled', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=46,test_size=0.3)","d31c9beb":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","398ba8b5":"log_reg = LogisticRegression()\nlog_reg.fit(X_train,y_train)\npred_log = log_reg.predict(X_test)\nacc_log= accuracy_score(pred_log,y_test)\nprint ('Test Accuracy : {:.2f}%'.format(acc_log*100))\nprint(classification_report(y_test,pred_log))","d40b2dfa":"model_dtc = DecisionTreeClassifier()\nmodel_dtc.fit(X_train, y_train)\ny_pred_dtc = model_dtc.predict(X_test)\nacc_dtc = accuracy_score(y_test, y_pred_dtc)\nprint ('Test Accuracy : {:.2f}%'.format(acc_dtc*100))\nprint(classification_report(y_test, y_pred_dtc))\n","620a31e2":"model_rfc = RandomForestClassifier()\nmodel_rfc.fit(X_train, y_train)\npred_rfc = model_rfc.predict(X_test)\nacc_rfc = accuracy_score(pred_rfc, y_test)\nprint ('Test Accuracy : {:.2f}%'.format(acc_rfc*100))\nprint(classification_report(pred_rfc, y_test))","40316802":"model_adaB = AdaBoostClassifier(learning_rate=0.5)\nmodel_adaB.fit(X_train, y_train)\npred_adaB = model_adaB.predict(X_test)\nacc_adaB = accuracy_score(y_test, pred_adaB)\nprint ('Test Accuracy : {:.2f}%'.format(acc_adaB*100))\nprint(classification_report(pred_adaB, y_test))","51f146d9":"cf_matrix_adaB = confusion_matrix(y_test, pred_adaB)\nsns.heatmap(cf_matrix_adaB\/np.sum(cf_matrix_adaB), annot=True,fmt= '0.2%')\n","d787c3f9":"model_neigh = KNeighborsClassifier()\nmodel_neigh.fit(X_train, y_train)\npred_neigh = model_neigh.predict(X_test)\nacc_neigh = accuracy_score(y_test, pred_neigh)\nprint ('Test Accuracy : {:.2f}%'.format(acc_neigh*100))\nprint(classification_report(pred_neigh, y_test))","7057e280":"output = pd.DataFrame({\"Model\":['Logistic Regression','KNeighborsClassifier',\n                                'Decision Tree Classifier','RandomForestClassifier',\n                               'AdaBoostClassifier'],\n                      \"Accuracy\":[acc_log, acc_neigh, acc_dtc, acc_rfc, acc_adaB]})\n\noutput","8fe92e24":"sns.barplot(x='Accuracy', y='Model', data=output)","ada8bac0":"# Findingout the best model","cb79be62":"# Random Forest Classifier","6d49afaf":"As most of the children values are 0, lets fill the missing values with 0.","2cb124c5":"# Reading the data from the csv file","71e497b0":"# Split the dataset","7a9a8808":"# Using Decision Tree Classifier","b98e5819":"# KNeighbours Classifier","332c2fb6":"On comparing the accuracies of the above models, I found that Random forest classifier has the most accuracy","121f5cf9":"# Feature Scaling","31697cc8":"From the data it is evident that most of the company values are null so lets get rid of that column. ","e72bdd28":"# Exploratory data anlysis","f91d4dd7":"isnull() method is used to find the null values in the dataset","409610e4":"# Using logistic Regression","996a8971":"# Data Preprocessing","b3cc3806":"# Import the libraries","c8e453f9":"# Contents:\n* Introduction \n* Importing the libraries\n* Reading Data\n* Data preprocessing\n* Exploratory data analysis\n* Building ML models\n* Comparing the models to find the best model","da1fa3c7":"# Introduction\n","1c69ce1b":"# AdaBoost Classifier"}}