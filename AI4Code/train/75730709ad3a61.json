{"cell_type":{"94de1416":"code","7031c20c":"code","2d8fc266":"code","9ef33a17":"code","12fc1924":"code","9da84c7c":"code","fbddbfc8":"code","11a7b726":"code","94279a93":"code","aa3fa3cc":"code","7b632621":"code","580d88cc":"code","c28b5448":"code","01b2f042":"code","febb441a":"code","c43f8692":"code","629318a4":"code","2bfd8b72":"code","d7be914d":"code","4421e503":"code","f3169abe":"code","2f63a306":"code","a0be20e2":"code","2a0a367f":"code","b5380e71":"code","5fb025f7":"markdown","15865acc":"markdown","31d67cb5":"markdown","760ef1b2":"markdown","e8d722bc":"markdown","6ccc0c78":"markdown","089f3079":"markdown","7284f71f":"markdown","1a66d19e":"markdown","f9f70bd3":"markdown","249fcc5a":"markdown","5ed07225":"markdown"},"source":{"94de1416":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7031c20c":"train_data=pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data=pd.read_csv('..\/input\/titanic\/test.csv')","2d8fc266":"print(\"Train Data Shape: \",train_data.shape)\nprint(\"Test Data Shape: \",test_data.shape)","9ef33a17":"train_data.head()","12fc1924":"train_data.info()","9da84c7c":"train_data.isnull().sum()","fbddbfc8":"### filling the age with the mean\ntrain_data['Age'].fillna(train_data['Age'].mean(),inplace=True)\ntrain_data.info()","11a7b726":"## the cabin has a lot of missing values and i think it won't effect the results so I will drop this column\ntrain_data.drop('Cabin',axis=1,inplace=True)\ntrain_data.info()","94279a93":"## Dealing with Embarked column by filling with the mode\ntrain_data['Embarked'].fillna(train_data['Embarked'].mode()[0],inplace=True)\ntrain_data.info()","aa3fa3cc":"train_data.duplicated().sum()","7b632621":"X=train_data.drop(['Survived','Name','Ticket'],axis=1)\nX = pd.get_dummies(X)\nX\n","580d88cc":"\nY=train_data['Survived']\nY","c28b5448":"from sklearn.model_selection import train_test_split","01b2f042":"X_train, X_valid, y_train, y_valid = train_test_split(X, Y , test_size = 0.20, random_state = 0)\nX_train","febb441a":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier(n_estimators=45,max_depth=10)\nrandom_forest.fit(X_train, y_train)\nprint(random_forest.score(X_train, y_train))\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","c43f8692":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nknn=KNeighborsClassifier(n_neighbors=20)\nknn.fit(X_train,y_train)\npred=knn.predict(X_valid)\nacc=metrics.accuracy_score(y_valid,pred)\nacc","629318a4":"## Droping the cabin column from the test as well\n\n#test_data.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)\n#test_data.info()\ntest_data","2bfd8b72":"test_data.drop(['Cabin'],axis=1,inplace=True)\n","d7be914d":"test_data.drop(['Name'],axis=1,inplace=True)\ntest_data","4421e503":"test_data.drop(['Ticket'],axis=1,inplace=True)\ntest_data","f3169abe":"test_data=pd.get_dummies(test_data)\ntest_data","2f63a306":"test_data = test_data.fillna(X_train.mean())","a0be20e2":"prediction =random_forest.predict(test_data)\n#preds_test = random_forest.predict(test_data)\nprint(len(prediction))","2a0a367f":"prediction","b5380e71":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': prediction})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","5fb025f7":"**No duplicates**","15865acc":"### Spliting the data into train and validate","31d67cb5":"## Loading The Data","760ef1b2":"## Using RandomForest","e8d722bc":"### Spliting the data into target and data","6ccc0c78":"## Building the model","089f3079":"## Using KNN","7284f71f":"## Checking missing values","1a66d19e":"## Output","f9f70bd3":"## Dealing With Missing Data","249fcc5a":"## Checking Duplicates","5ed07225":"## Testing the Model"}}