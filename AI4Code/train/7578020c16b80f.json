{"cell_type":{"8880aae1":"code","0f01620e":"code","f14004a2":"code","a304eb9b":"code","b395f43f":"code","cfb98be0":"code","b1673186":"code","5da95737":"code","1ee606e9":"code","d7038c2b":"markdown","e67c8de3":"markdown","7249468c":"markdown","ca878d04":"markdown","49e15269":"markdown"},"source":{"8880aae1":"# install dependencies: (use cu100 because colab is on CUDA 10.0)\n!pip install -U torch==1.4+cu100 torchvision==0.5+cu100 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html \n!pip install cython pyyaml==5.1\n!pip install -U 'git+https:\/\/github.com\/cocodataset\/cocoapi.git#subdirectory=PythonAPI'\nimport torch, torchvision\ntorch.__version__\n!gcc --version\n# opencv is pre-installed on colab","0f01620e":"# install detectron2:\n!pip install detectron2 -f https:\/\/dl.fbaipublicfiles.com\/detectron2\/wheels\/cu100\/index.html","f14004a2":"import detectron2\nfrom detectron2.utils.logger import setup_logger\nsetup_logger()\n\n# import some common libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# import some common detectron2 utilities\n\n\nimport detectron2\nfrom detectron2.utils.logger import setup_logger\nsetup_logger()\n\n# import some common libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# import some common detectron2 utilities\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom detectron2.utils.visualizer import Visualizer\nfrom detectron2.data import MetadataCatalog","a304eb9b":"import os\nimport numpy as np\nimport json\nfrom detectron2.structures import BoxMode\nimport itertools\nimport cv2\nimport xml.etree.ElementTree as ET\n\ndef get_mask_dicts(data_dir):\n    classes = ['with_mask', 'without_mask', 'mask_weared_incorrect']\n    annotation_files = os.listdir(os.path.join(data_dir,'annotations'))\n    \n    dataset_dicts = []\n    for filename in annotation_files:\n        record = {}\n        root = ET.parse(os.path.join(data_dir, 'annotations', filename)).getroot()\n                \n        record[\"file_name\"] = os.path.join(data_dir, 'images', root.find('filename').text)\n        record[\"height\"] = int(root.find('size\/height').text)\n        record[\"width\"] = int(root.find('size\/width').text)\n        \n        objs = []\n        \n        for member in root.findall('object'):\n            obj = {\n                'bbox': [int(member[5][0].text), int(member[5][1].text), int(member[5][2].text), int(member[5][3].text)],\n                'bbox_mode': BoxMode.XYXY_ABS,\n                'category_id': classes.index(member[0].text),\n                'iscrowd': 0\n            }\n            objs.append(obj)\n        record[\"annotations\"] = objs\n        dataset_dicts.append(record)\n    return dataset_dicts","b395f43f":"from detectron2.data import DatasetCatalog, MetadataCatalog\n\nclasses = ['with_mask', 'without_mask', 'mask_weared_incorrect']\n\nDatasetCatalog.register('mask_dataset', lambda: get_mask_dicts('..\/input\/face-mask-detection'))\nMetadataCatalog.get('mask_dataset').set(thing_classes=classes)\nchess_metadata = MetadataCatalog.get('mask_dataset')","cfb98be0":"import random\nfrom detectron2.utils.visualizer import Visualizer\n\ndataset_dicts = DatasetCatalog.get('mask_dataset')\nfor d in random.sample(dataset_dicts, 10):\n    img = cv2.imread(d[\"file_name\"])\n    visualizer = Visualizer(img[:, :, ::-1], metadata=chess_metadata)\n    vis = visualizer.draw_dataset_dict(d)\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(vis.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","b1673186":"from detectron2.engine import DefaultTrainer\nfrom detectron2.config import get_cfg\n\ncfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-Detection\/faster_rcnn_R_101_FPN_3x.yaml\"))\ncfg.DATASETS.TRAIN = ('mask_dataset',)\ncfg.DATASETS.TEST = ()   # no metrics implemented for this dataset\ncfg.DATALOADER.NUM_WORKERS = 2\ncfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-Detection\/faster_rcnn_R_101_FPN_3x.yaml\")\ncfg.SOLVER.IMS_PER_BATCH = 4\ncfg.SOLVER.MAX_ITER = 1000\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 3\n\nos.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\ntrainer = DefaultTrainer(cfg) \ntrainer.resume_or_load(resume=False)\ntrainer.train()","5da95737":"cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.8   # set the testing threshold for this model\ncfg.DATASETS.TEST = (\"mask_dataset\", )\npredictor = DefaultPredictor(cfg)","1ee606e9":"from detectron2.utils.visualizer import ColorMode\nimport random\n\ndataset_dicts = DatasetCatalog.get('mask_dataset')\nfor d in random.sample(dataset_dicts, 5):    \n    im = cv2.imread(d[\"file_name\"])\n    outputs = predictor(im)\n    v = Visualizer(im[:, :, ::-1], metadata=chess_metadata, scale=0.8)\n    v = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","d7038c2b":"## Register data-set\n\nIn order to use a dataset with Detectron2 we need to register it. For more information check out the [official documentation](https:\/\/detectron2.readthedocs.io\/tutorials\/datasets.html#register-a-dataset).\n","e67c8de3":"## Imports","7249468c":"## Use model for inference\n\nNow, we can perform inference on our validation set by creating a predictor object.\n","ca878d04":"# Detectron2 Mask Detection\n\n\n## Install detectron2\n\n>Important: If you're running on a local machine, be sure to follow the installation instructions. This notebook includes only what's necessary to run in Colab.\n\n","49e15269":"## Train model"}}