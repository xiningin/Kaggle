{"cell_type":{"e1eced18":"code","a673e39f":"code","f560667f":"code","7d1e9487":"code","55931040":"code","61251cb3":"code","bfa122d5":"code","7ae3a427":"code","44c2d753":"code","18b550a5":"code","60bea8d4":"code","9216afb9":"code","308ad849":"code","6bfc8343":"code","d996453e":"code","01fe8ec6":"code","35509a86":"code","9642de09":"code","22e70973":"code","af2badcb":"code","c00bd72e":"code","ecf22d73":"code","a166d753":"code","36607c9d":"code","604747a7":"code","46d51d21":"code","00ec9dd1":"code","334e360a":"code","0488a047":"markdown","6b342bf9":"markdown","895a36ef":"markdown"},"source":{"e1eced18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a673e39f":"df_rate = pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/rating.csv')\ndf_anime = pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/anime.csv')","f560667f":"Name = list(df_anime[\"type\"].unique())\nQnt = [len(df_anime[df_anime[\"type\"] == e]) for e in Name]\nName = Name[:-1]\nQnt = Qnt[:-1]","7d1e9487":"print(Name)","55931040":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.set_title('Type of anime')\nax.set_ylabel('Number of anime')\nax.bar(Name,Qnt)\n\nfor index,data in enumerate(Qnt):\n    plt.text(x=index-0.25 , y =data+30, s=f\"{data}\" , fontdict=dict(fontsize=12))\nplt.show()","61251cb3":"Genre = dict()\n\nfor i in range(len(df_anime)):\n    str_genre = df_anime.loc[i, \"genre\"]\n    if pd.isnull(str_genre):\n        print(i,end=\" \")\n        continue\n    Arr = str_genre.strip().split(\", \")\n    for j in Arr:\n        if j not in Genre:\n            Genre[ j ] = 1\n        else :\n            Genre[ j ] += 1\n            \n_name = sorted(list(Genre.keys()) ,key = lambda x:-Genre[x])\n_value = [ Genre[e] for e in _name]\n","bfa122d5":"_name[:10],_value[:10]","7ae3a427":"import matplotlib.pyplot as plt\nfig = plt.figure(figsize=(10,5))\nax = fig.add_axes([0,0,1,1])\nax.set_title('Top 10 Genre of anime')\nax.barh(_name[:10][::-1],_value[:10][::-1])\nax.set_xlabel('Number of anime')\nplt.show()","44c2d753":" df_anime[df_anime[\"type\"] == \"Music\"]","18b550a5":"df_anime[df_anime[\"type\"] == 'OVA'][\"anime_id\"].values","60bea8d4":"set_tv = set(df_anime[df_anime[\"type\"] == 'TV'][\"anime_id\"].values)\nset_movie = set(df_anime[df_anime[\"type\"] == 'Movie'][\"anime_id\"].values)\nset_ova = set(df_anime[df_anime[\"type\"] == 'OVA'][\"anime_id\"].values)","9216afb9":"dType = {'Movie':[], 'TV':[], 'OVA':[], 'Special':[], 'Music':[], 'ONA':[]}\ngrouped = df_rate.groupby(\"user_id\")\nk = 0\nwho_skipped = [46809]\n#limit_rate = 100000\n\nfor i in range(73515):\n    if i+1 in who_skipped:\n        continue\n    A = grouped.get_group(i+1)\n    \n    #for j in range(len(A)):\n    B = A[A['rating']>=1]\n    set_trans = set(B['anime_id'].values)\n    \n    adding_tv = list(set_tv.intersection(set_trans)) \n    if len(adding_tv)>1:\n        dType['TV'].append(adding_tv)\n\n    adding_movie = list(set_movie.intersection(set_trans)) \n    if len(adding_movie)>1:\n        dType['Movie'].append(adding_movie)\n\n    adding_ova = list(set_ova.intersection(set_trans)) \n    if len(adding_ova)>1:\n        dType['OVA'].append(adding_ova)\n\n        #print(k)\n    #records.append(grouped.get_group(i+1)['anime_id'].values)","308ad849":"print(len(dType['TV']),len(dType['Movie']),len(dType['OVA']))","6bfc8343":"!pip install efficient-apriori","d996453e":"def get_rule_with_name(_rule,df):\n    _str  = \"\"\n    Left  = []\n    Right = []\n    for i in _rule.lhs:\n        Left  += [\" \"+df[df['anime_id']==i].reset_index().loc[0,'name']]\n    for j in _rule.rhs:\n        Right += [\" \"+df[df['anime_id']==j].reset_index().loc[0,'name']]\n        \n    _str += '{'+\", \".join(Left)+' }'\n    _str += \" => \"+'{'+\", \".join(Right)+' }'\n    \n    conf = \"conf: {0:.3f}\".format(_rule.confidence)\n    supp = \"supp: {0:.3f}\".format(_rule.support)\n    #lift = \"lift: {0:.3f}\".format(_rule.lift)\n    #conv = \"conv: {0:.3f}\".format(_rule.conviction)\n    #_str += \"\\n({}, {}, {}, {})\".format(conf, supp, lift, conv)\n    _str += \"\\n({}, {})\".format(conf, supp)\n    return _str","01fe8ec6":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dType['TV'],min_support=0.25, min_confidence=0.7)","35509a86":"print(rules,len(rules))","9642de09":"#print(rules[0].lhs, rules[0].rhs)\n#print(rules)\n#print(itemsets)\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","22e70973":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dType['Movie'],min_support=0.2, min_confidence=0.5)\n\nprint(rules,len(rules))\nprint()\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","af2badcb":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dType['OVA'],min_support=0.05, min_confidence=0.9)\n\nprint(rules,len(rules))\nprint()\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","c00bd72e":"df_anime[df_anime[\"anime_id\"] == 138]","ecf22d73":"#Comedy, Action, Adventure and Fantasy\nset_genre = {'Comedy':set(),'Action':set() ,'Adventure':set(),'Fantasy':set()}\n\nfor i in range(len(df_anime)):\n    str_genre = df_anime.loc[i, \"genre\"]\n    if pd.isnull(str_genre):\n        print(i,end=\" \")\n        continue\n    Arr = str_genre.strip().split(\", \")\n    for j in Arr:\n        if j in set_genre.keys():\n            set_genre[ j ].add(df_anime.loc[i,\"anime_id\"])\n","a166d753":"dGenre = {'Comedy':[], 'Action':[], 'Adventure':[], 'Fantasy':[]}\ngrouped = df_rate.groupby(\"user_id\")\nk = 0\nwho_skipped = [46809]\n#limit_rate = 100000\n\nfor i in range(73515):\n    if i+1 in who_skipped:\n        continue\n    A = grouped.get_group(i+1)\n    \n    #for j in range(len(A)):\n    B = A[A['rating']>=1]\n    set_trans = set(B['anime_id'].values)\n    \n    for j in dGenre.keys():\n        adding = list(set_genre[j].intersection(set_trans)) \n        if len(adding)>1:\n            dGenre[j].append(adding)","36607c9d":"print(\"Type\")\nfor i in dType.keys():\n    print(i,len(dType[i]))\nprint()\nprint(\"Genre\")\nfor i in dGenre.keys():\n    print(i,len(dGenre[i]))","604747a7":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dGenre['Comedy'],min_support=0.2, min_confidence=0.5)\n\nprint(rules,len(rules))\nprint()\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","46d51d21":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dGenre['Action'],min_support=0.25, min_confidence=0.6)\n\nprint(rules,len(rules))\nprint()\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","00ec9dd1":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dGenre['Adventure'],min_support=0.2, min_confidence=0.5)\n\nprint(rules,len(rules))\nprint()\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","334e360a":"from efficient_apriori import apriori #https:\/\/efficient-apriori.readthedocs.io\/en\/latest\/\nitemsets, rules = apriori( dGenre['Fantasy'],min_support=0.2, min_confidence=0.6)\n\nprint(rules,len(rules))\nprint()\n\nfor i in rules:\n    print(get_rule_with_name(i,df_anime))\n    print()","0488a047":"## Data Processing","6b342bf9":"## Run Association Rule (By genre) Comedy, Action, Adventure and Fantasy","895a36ef":"## Run Association Rule (By Type)"}}