{"cell_type":{"be3aec21":"code","10336116":"code","23d9f6b1":"code","2d3ec072":"code","7b63057d":"code","af26961d":"code","ed594888":"code","30a07376":"code","3f0a8f76":"code","57e21e5a":"code","87ff7fd5":"code","1236f2fa":"code","458577b3":"code","90891eb4":"code","68ea110b":"code","450776f9":"code","116c33bd":"code","126b4e21":"code","757fee37":"code","3a0bd416":"code","57538b26":"code","1313bcb5":"code","c2f36012":"code","fdfc2751":"code","1fc4d948":"code","bf5a4dab":"code","8d16ad08":"code","bd8e0ff0":"code","511e88d3":"code","eb0ebee9":"code","b1877dbd":"code","38934e86":"code","348c62b9":"code","c54e8945":"code","2b55a444":"code","8ce1c3d6":"code","b12daf77":"code","90c4c2de":"code","1f53a22f":"code","2ca5a12e":"code","b6733039":"code","3cb08d5a":"code","5898a1a6":"code","e4993571":"code","7895978b":"code","c8140d6a":"code","db83a56c":"code","7b2c89dc":"code","4d067c97":"code","62de7ecc":"code","f623630e":"code","1ed48563":"code","7571a449":"code","2482a29a":"code","6184da20":"code","379bb69f":"code","66c1fd59":"code","2ae9f105":"code","52be67b9":"code","37639b24":"code","962fbedb":"code","cc841335":"code","3bdbe2e3":"code","ff4c48e9":"code","1e528a5d":"code","a2ae9e31":"code","6397cdb1":"code","b0d40046":"markdown","01032f1e":"markdown","ce319f8f":"markdown","5eb77e0e":"markdown","43f61bf0":"markdown","376c701d":"markdown","36db5285":"markdown","0e503d8d":"markdown","ec697c22":"markdown","cdd7cb8f":"markdown","da25241c":"markdown","ce0d98e1":"markdown","719269ff":"markdown","7fb9f0da":"markdown","974a8f95":"markdown"},"source":{"be3aec21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option(\"display.max_columns\", 100)\nimport cufflinks as cf\ncf.set_config_file(offline=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10336116":"import bs4\nimport urllib.request\ndef read_table(page_url):\n    page=urllib.request.urlopen(page_url)\n    soup = bs4.BeautifulSoup(page, 'lxml')\n    table = soup.find(name='table')\n    result = dict()\n    for tr in table.findAll('tr'):\n        tds = tr.findAll('td')\n        if len(tds) >=2:\n            result[tds[0].text] = tds[1].text\n    return result","23d9f6b1":"def human_format(num):\n    magnitude = 0\n    while abs(num) >= 1000:\n        magnitude += 1\n        num \/= 1000.0\n    # add more suffixes if you need them\n    return '%.2f%s' % (num, ['', 'K', 'M', 'G', 'T', 'P'][magnitude])","2d3ec072":"all_candidates = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/All candidates.csv\")\nall_candidates.head()","7b63057d":"def correct_receipts_disbursements(df):\n    cond = (df['TRANS_FROM_AUTH'] != 0.0) & (df['TRANS_TO_AUTH'] != 0.0)\n    df.loc[cond, 'TTL_RECEIPTS_CORRECTED'] = df['TTL_RECEIPTS'] - df['TRANS_FROM_AUTH']\n    df['TTL_RECEIPTS_CORRECTED'] = df['TTL_RECEIPTS_CORRECTED'].fillna(df['TTL_RECEIPTS'])\n    df.loc[cond, 'TTL_DISB_CORRECTED'] = df['TTL_DISB'] - df['TRANS_TO_AUTH']\n    df['TTL_DISB_CORRECTED'] = df['TTL_DISB_CORRECTED'].fillna(df['TTL_DISB'])\n    return df\nall_candidates = correct_receipts_disbursements(all_candidates)\nall_candidates.head()","af26961d":"def map_cand_ici(df):\n    ici_map = {'C': 'Challenger', 'I': 'Incumbent', 'O': 'Open Seat'}\n    df['CAND_ICI_FULL'] = df['CAND_ICI'].map(ici_map)\n    return df\nall_candidates = map_cand_ici(all_candidates)\nall_candidates.head()","ed594888":"party_codes = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/party-code-descriptions\/\")\ndef map_cand_party(df):\n    df['CAND_PTY_AFFILIATION_FULL'] = df['CAND_PTY_AFFILIATION'].map(party_codes)\n    return df\nall_candidates = map_cand_party(all_candidates)\nall_candidates.head()","30a07376":"def fix_cand_office_district(df):\n    if df['CAND_OFFICE_DISTRICT'].dtype == 'int64':\n        df['CAND_OFFICE_DISTRICT'] = df['CAND_OFFICE_DISTRICT'].map(lambda x: str(x).zfill(2) if not pd.isna(x) else np.nan)\n    elif df['CAND_OFFICE_DISTRICT'].dtype == 'float':\n        df['CAND_OFFICE_DISTRICT'] = df['CAND_OFFICE_DISTRICT'].map(lambda x: str(int(x)).zfill(2) if not pd.isna(x) else np.nan)\n    return df\nall_candidates = fix_cand_office_district(all_candidates)\nall_candidates.head()","3f0a8f76":"candidates = all_candidates[(all_candidates['CAND_NAME'].str.contains(r\"biden\", case=False)) | \n               (all_candidates['CAND_NAME'].str.contains(r\"trump\", case=False))]\ncandidates","57e21e5a":"from IPython.display import HTML\ncandidates_summary = candidates[['CAND_NAME', 'TTL_RECEIPTS_CORRECTED', 'TTL_DISB_CORRECTED', 'COH_COP', 'CVG_END_DT']]\ncandidates_summary['Raised'] = '$' + candidates_summary['TTL_RECEIPTS_CORRECTED'].map(human_format).astype('str')\ncandidates_summary['Spent'] = '$' + candidates_summary['TTL_DISB_CORRECTED'].map(human_format).astype('str')\ncandidates_summary['Cash on Hand'] = '$' + candidates_summary['COH_COP'].map(human_format).astype('str')\ncandidates_summary['Last Report date'] = pd.to_datetime(candidates_summary['CVG_END_DT']).dt.strftime('%b %d %Y')\nHTML(candidates_summary.rename(columns={'CAND_NAME': 'Candidate'})[['Candidate', 'Raised', 'Spent', 'Cash on Hand', 'Last Report date']].to_html(index=False))","87ff7fd5":"republican = candidates[candidates['CAND_PTY_AFFILIATION'] == 'REP']['CAND_NAME'].values[0]\ndemocrat = candidates[candidates['CAND_PTY_AFFILIATION'] == 'DEM']['CAND_NAME'].values[0]\nprint(republican)\ndemocrat","1236f2fa":"candidates['color'] = candidates['CAND_PTY_AFFILIATION'].map({'DEM': 'blue', 'REP': 'red'})\ncandidates['second_color'] = candidates['CAND_PTY_AFFILIATION'].map({'DEM': 'lightblue', 'REP': 'pink'})\ncolor_map = dict()\nsecondary_color_map = dict()\nfor row in candidates[['CAND_NAME', 'color', 'second_color']].values:\n    color_map[row[0]] = row[1]\n    secondary_color_map[f\"For {row[0]}\"] = row[1]\n    secondary_color_map[f\"Against {row[0]}\"] = row[2]\nprint(color_map)\n#candidates.head()\nsecondary_color_map","458577b3":"candidates_desc = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/all-candidates-file-description\/\")\ncandidates_desc = {key.strip():val.strip() for key, val in candidates_desc.items()}\ncandidates_desc","90891eb4":"candidates_desc.update({'TTL_RECEIPTS_CORRECTED': 'Total Receipts', 'TTL_DISB_CORRECTED': 'Total Disbursements'})\ntotal_finance = candidates.set_index('CAND_NAME')[['TTL_RECEIPTS_CORRECTED', 'TTL_DISB_CORRECTED', 'TRANS_FROM_AUTH', 'COH_BOP', 'COH_COP', 'CAND_CONTRIB', 'CAND_LOANS', 'OTHER_LOANS', 'DEBTS_OWED_BY', 'TTL_INDIV_CONTRIB', 'POL_PTY_CONTRIB', 'OTHER_POL_CMTE_CONTRIB']].transpose()\ntotal_finance = total_finance.rename(candidates_desc)\ntotal_finance.iplot(kind='bar', colors=color_map, title='Total campaign finance figures', yTitle='Amount (in dollars)', )","68ea110b":"contributions_from_committees = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions from committees to candidates  independent expenditures.csv\")\ncontributions_from_committees.head()","450776f9":"def fix_zip_codes(col, df):\n    if df[col].dtype == 'float':\n        df[col] = df[col].map(lambda x: str(int(x)).zfill(5) if not pd.isna(x) else np.nan)\n    elif df[col].dtype == 'int64':\n        df[col] = df[col].map(lambda x: str(x).zfill(5) if not pd.isna(x) else np.nan)\n    return df\ncontributions_from_committees = fix_zip_codes('ZIP_CODE', contributions_from_committees)\ncontributions_from_committees.head()","116c33bd":"def map_amndt_ind(df):\n    df['AMNDT_IND_FULL'] = df['AMNDT_IND'].map({'N': 'New', 'A': 'Amendment', 'T': 'Termination'})\n    return df\ncontributions_from_committees = map_amndt_ind(contributions_from_committees)\ncontributions_from_committees.head()","126b4e21":"report_type_map = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/report-type-code-descriptions\/\")\ndef map_report_type(df):\n    df['RPT_TP_FULL'] = df['RPT_TP'].map(report_type_map)\n    return df\ncontributions_from_committees = map_report_type(contributions_from_committees)\ncontributions_from_committees.head()","757fee37":"election_type_map = {\n    'P': 'Primary',\n    'G': 'General',\n    'O': 'Other',\n    'C': 'Convention',\n    'R': 'Runoff',\n    'S': 'Special',\n    'E': 'Recount'\n}\ndef parse_transaction_pgi(df):\n    df['ELECTION_TYPE'] = df['TRANSACTION_PGI'].astype('object').str[0].map(election_type_map)\n    df['ELECTION_YEAR'] = df['TRANSACTION_PGI'].astype('object').str[1:].map(\n        lambda x: int(x) if x and not pd.isnull(x) else np.nan).fillna(0).astype('int')\n    return df\ncontributions_from_committees = parse_transaction_pgi(contributions_from_committees)\ncontributions_from_committees.head()","3a0bd416":"def parse_image_num(df):\n    df['IMAGE_DATE'] = pd.to_datetime(df['IMAGE_NUM'].astype('str').str[:8])\n    df['IMAGE_SOURCE'] = df['IMAGE_NUM'].astype('str').str[8:10].map(\n        lambda x: 'Senate' if x == '02' else 'FEC Paper' if x == '03' else 'FEC Electronic')\n    return df\ncontributions_from_committees = parse_image_num(contributions_from_committees)\ncontributions_from_committees.head()","57538b26":"transaction_type_map = read_table(\"https:\/\/www.fec.gov\/campaign-finance-data\/transaction-type-code-descriptions\/\")\ndef map_transaction_type(df):\n    df['TRANSACTION_TP_FULL'] = df['TRANSACTION_TP'].map(transaction_type_map)\n    return df\ncontributions_from_committees = map_transaction_type(contributions_from_committees)\ncontributions_from_committees.head()","1313bcb5":"entity_type_map = {\n    'CAN': 'Candidate',\n    'CCM': 'Candidate Committee',\n    'COM': 'Committee',\n    'IND': 'Individual (a person)',\n    'ORG': 'Organization (not a committee and not a person)',\n    'PAC': 'Political Action Committee',\n    'PTY': 'Party Organization'\n}\ndef map_entity_type(df):\n    df['ENTITY_TP_FULL'] = df['ENTITY_TP'].map(entity_type_map)\n    return df\ncontributions_from_committees = map_entity_type(contributions_from_committees)\ncontributions_from_committees.head()","c2f36012":"# We remove the original rows that have been amended later on\ncontributions_from_committees[['TRAN_ID_parent', 'TRAN_ID_child']] = contributions_from_committees['TRAN_ID'].str.split('.', n=1, expand=True)\nmerged = contributions_from_committees.merge(contributions_from_committees, on=['CMTE_ID', 'CAND_ID', 'TRAN_ID_parent'])\namended_contribs = merged[(merged['AMNDT_IND_x'] == 'N') & (merged['AMNDT_IND_y'] == 'A') & (merged['TRANSACTION_DT_y'] > merged['TRANSACTION_DT_x'])]['SUB_ID_x']\ncontributions_from_committees = contributions_from_committees[~contributions_from_committees['SUB_ID'].isin(amended_contribs)]\ncontributions_from_committees.head()","fdfc2751":"contributions_from_committees['TRANSACTION_DT'] = pd.to_datetime(\n    contributions_from_committees['TRANSACTION_DT'].fillna(0).astype('int').astype('str')\n    .replace('0', np.NaN).str.zfill(8), format='%m%d%Y')\ncontributions_from_committees.head()","1fc4d948":"committee_contribs = contributions_from_committees.merge(candidates, on='CAND_ID')\ncommittee_contribs.head()","bf5a4dab":"by_entity = committee_contribs.groupby(['CAND_NAME', 'ENTITY_TP_FULL']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_entity_pivot = by_entity.pivot_table(values='TRANSACTION_AMT', index='ENTITY_TP_FULL', columns='CAND_NAME')\nby_entity_pivot.iplot(kind='bar', colors=color_map, title='Total Committee contributions & expenditures by entities')","8d16ad08":"by_transaction = committee_contribs.groupby(['CAND_NAME', 'TRANSACTION_TP_FULL']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_transaction_pivot = by_transaction.pivot_table(values='TRANSACTION_AMT', index='TRANSACTION_TP_FULL', columns='CAND_NAME')\nby_transaction_pivot.iplot(kind='bar', colors=color_map, title='Total committee contributions & expenditures by transaction type')","bd8e0ff0":"committee_master = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Committee master.csv\")\ncommittee_master.head()","511e88d3":"committee_contribs = committee_contribs.merge(committee_master, on='CMTE_ID', how='left', suffixes=('', '_y'))\ncommittee_contribs.head()","eb0ebee9":"contribs = committee_contribs[committee_contribs['TRANSACTION_TP'].isin(['24K', '24Z'])]\ncontribs.head()","b1877dbd":"largest_contribs = contribs.groupby('CMTE_NM').agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10).reset_index()\nlargest_contribs['TRANSACTION_AMT'] = largest_contribs['TRANSACTION_AMT'].map(lambda x: human_format(x))\nlargest_contribs.rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)","38934e86":"from IPython.display import display\nfor cand_name in candidates['CAND_NAME'].values:\n    print(\"-\"*60)\n    print(f\"Committees with most contributions for {cand_name}\")\n    print(\"-\"*60)\n    df = contribs[(contribs['CAND_NAME'] == cand_name)]\n    result = pd.DataFrame(df[['CMTE_NM', 'TRANSACTION_AMT']].groupby(['CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10)).reset_index().rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)\n    result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n    display(result)","348c62b9":"ctrbs_by_dt = contribs.groupby(['TRANSACTION_DT', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nctrbs_by_dt = ctrbs_by_dt.pivot_table(index='TRANSACTION_DT', columns=['CAND_NAME'], fill_value=0.0).droplevel(level=0, axis=1)\nctrbs_by_dt.cumsum().iplot(title='Total committee Contributions for candidates over time', colors=color_map)","c54e8945":"committee_contribs['for_against'] = committee_contribs['TRANSACTION_TP'].map({'24A': 'Against', '24E': 'For'})\nexpenditures = committee_contribs[~committee_contribs['for_against'].isnull()]\nexpenditures.head()","2b55a444":"largest_expenditures = expenditures.groupby('CMTE_NM').agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10).reset_index()\nlargest_expenditures['TRANSACTION_AMT'] = largest_expenditures['TRANSACTION_AMT'].map(lambda x: human_format(x))\nlargest_expenditures.rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)","8ce1c3d6":"from IPython.display import display\nfor cand_name in candidates['CAND_NAME'].values:\n    for for_against in ['For', 'Against']:\n        print(\"-\"*60)\n        print(f\"Committees with most expenditures {for_against} {cand_name}\")\n        print(\"-\"*60)\n        df = expenditures[(expenditures['for_against'] == for_against) & (expenditures['CAND_NAME'] == cand_name)]\n        result = pd.DataFrame(df[['CMTE_NM', 'TRANSACTION_AMT']].groupby(['CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10)).reset_index().rename({'CMTE_NM': 'COMMITTEE_NAME'}, axis=1)\n        result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n        display(result)","b12daf77":"exp_by_dt = expenditures.groupby(['TRANSACTION_DT', 'CAND_NAME', 'for_against']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nexp_by_dt = exp_by_dt.pivot_table(index='TRANSACTION_DT', columns=['CAND_NAME', 'for_against'], fill_value=0.0).droplevel(level=0, axis=1)\nexp_by_dt.columns = exp_by_dt.columns.map(lambda x: x[1] + \" \" + x[0])\nexp_by_dt.cumsum().iplot(title='Total committee Expenditures for or against candidates over time', colors=secondary_color_map)","90c4c2de":"# First, we determine which committees are for or against a candidate so that we can bucket the contribution appropriately\ncommittee_contribs['for_against'] = committee_contribs['for_against'].fillna('For')\ncommittee_contribs['CAND_NAME'] = np.where(((committee_contribs['for_against'] == 'Against') & \n                                            (committee_contribs['CAND_NAME'] == democrat)) |\n                                            ((committee_contribs['for_against'] == 'For') & \n                                            (committee_contribs['CAND_NAME'] == republican)),\n                                           republican, democrat)\ncommittee_contribs.head()","1f53a22f":"cmte_cand_mapping = committee_contribs.groupby(['CMTE_ID', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'})\ncmte_cand_mapping = cmte_cand_mapping.pivot_table(index='CMTE_ID', columns='CAND_NAME').fillna(0.0).droplevel(0, axis=1).reset_index()\ncmte_cand_mapping = cmte_cand_mapping.loc[~(cmte_cand_mapping[democrat] == cmte_cand_mapping[republican])]\ncmte_cand_mapping['CAND_NAME'] = np.where(cmte_cand_mapping[democrat] > cmte_cand_mapping[republican], democrat, republican)\ncmte_cand_mapping.head()","2ca5a12e":"# cmte_cand_mapping = committee_contribs[['CMTE_ID', 'CAND_NAME']].drop_duplicates(ignore_index=True)\n# cmte_cand_counts = cmte_cand_mapping.groupby('CMTE_ID').agg({'CAND_NAME': 'count'})\n# single_cmte = cmte_cand_counts[cmte_cand_counts['CAND_NAME'] == 1].reset_index()['CMTE_ID']\n# single_cmte","b6733039":"s = f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions by individuals.csv\"\ncmd_result = ! wc -l \"{s}\"\ncontribs_cnt = int(cmd_result[0].split()[0])\ncontribs_cnt","3cb08d5a":"# Iteration 42 has some bad data that needs to be fixed manually as below\ndef handle_iteration_42(df):\n    bad_row = df[df['TRANSACTION_DT'] == 'SAN DIEGO']\n    bad_rows = bad_row['OCCUPATION'].str.split('\\n').values[0]\n    other_rows = []\n    for i, row in enumerate(bad_rows):\n        if i==0:\n            first_row_last_part = row.split('|')\n        elif i == len(bad_rows)-1:\n            last_row_first_part = row.split('|')\n        else:\n            other_rows.append(row.split('|'))\n    all_dfs = [df]\n    first_row = list(df.loc[bad_row.index].iloc[:, 0:12].copy().values[0]) + first_row_last_part\n    all_dfs.append(pd.DataFrame([first_row], columns=df.columns))\n    all_dfs.append(pd.DataFrame(other_rows, columns=df.columns))\n    all_dfs.append(pd.DataFrame([last_row_first_part + list(df.loc[bad_row.index].iloc[:, 13:].copy().values[0])\n                                   + [np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]], columns=df.columns))\n    df = pd.concat(all_dfs, axis=0)\n    df = df.drop(index=bad_row.index).reset_index()\n    return df","5898a1a6":"import gc\nchunksize = 100000\ncontribs_by_indivs = []\ncols = None\nfor i in range(contribs_cnt\/\/chunksize):\n    print(f\"Processing chunk {i}\")\n    df = pd.read_csv(f\"\/kaggle\/input\/us-campaign-finance-20192020-fec\/Contributions by individuals.csv\", skiprows=i*chunksize, nrows=chunksize)\n    if i == 0:\n        cols = df.columns\n    else:\n        df.columns = cols\n    if i == 42:\n        df = handle_iteration_42(df)\n    interesting_ones = df[df['CMTE_ID'].isin(cmte_cand_mapping['CMTE_ID'])]\n    if len(interesting_ones) > 0:\n        contribs_by_indivs.append(interesting_ones)\n#len(contribs_by_indivs)","e4993571":"contribs_by_indivs = pd.concat(contribs_by_indivs)\ncontribs_by_indivs.head()","7895978b":"contribs_by_indivs = contribs_by_indivs.merge(cmte_cand_mapping[['CMTE_ID', 'CAND_NAME']], on='CMTE_ID')\n#contribs_by_indivs = contribs_by_indivs.merge(candidates[['CAND_ID', 'CAND_NAME']], on='CAND_ID')\ncontribs_by_indivs.head()","c8140d6a":"from IPython.display import display\nfor cand_name in candidates['CAND_NAME'].unique():\n    print(\"-\"*60)\n    print(f\"Most individual contributions for {cand_name}\")\n    print(\"-\"*60)\n    df = contribs_by_indivs[(contribs_by_indivs['CAND_NAME'] == cand_name)]\n    result = pd.DataFrame(df[['NAME', 'TRANSACTION_AMT']].groupby(['NAME']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(20)).reset_index()\n    result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n    display(result)","db83a56c":"from IPython.display import display\nindiv_contribs_cmte = contribs_by_indivs.merge(committee_master[['CMTE_ID', 'CMTE_NM']], on='CMTE_ID')\nfor cand_name in candidates['CAND_NAME'].unique():\n    print(\"-\"*80)\n    print(f\"Committees that received the most individual contributions for {cand_name}\")\n    print(\"-\"*80)\n    df = indiv_contribs_cmte[(indiv_contribs_cmte['CAND_NAME'] == cand_name)]\n    result = pd.DataFrame(df[['CMTE_NM', 'TRANSACTION_AMT']].groupby(['CMTE_NM']).agg({'TRANSACTION_AMT': 'sum'})['TRANSACTION_AMT'].nlargest(10)).reset_index()\n    result['TRANSACTION_AMT'] = result['TRANSACTION_AMT'].map(lambda x: human_format(x))\n    display(result)","7b2c89dc":"contribs_by_indivs.loc[contribs_by_indivs['EMPLOYER'] == 'SELF', 'EMPLOYER'] = 'SELF-EMPLOYED'\ncontribs_by_indivs.loc[contribs_by_indivs['EMPLOYER'] == 'SELF EMPLOYED', 'EMPLOYER'] = 'SELF-EMPLOYED'\ncontribs_by_indivs.loc[contribs_by_indivs['EMPLOYER'] == 'NOT EMPLOYED', 'EMPLOYER'] = 'UNEMPLOYED'\ncontribs_by_indivs","4d067c97":"top_employers = contribs_by_indivs['EMPLOYER'].value_counts()[:10].index\nby_employer = contribs_by_indivs[contribs_by_indivs['EMPLOYER'].isin(top_employers)].groupby(['CAND_NAME', 'EMPLOYER']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_employer_pivot = by_employer.pivot_table(values='TRANSACTION_AMT', index='EMPLOYER', columns='CAND_NAME')\nby_employer_pivot.iplot(kind='bar', colors=color_map, title='Total Individual contributions by Employer')","62de7ecc":"top_occupations = set(contribs_by_indivs['OCCUPATION'].value_counts()[:13].index) - set(['RETIRED', 'SELF-EMPLOYED', 'NOT EMPLOYED'])\nby_occupation = contribs_by_indivs[contribs_by_indivs['OCCUPATION'].isin(top_occupations)].groupby(['CAND_NAME', 'OCCUPATION']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_occupation_pivot = by_occupation.pivot_table(values='TRANSACTION_AMT', index='OCCUPATION', columns='CAND_NAME')\nby_occupation_pivot.iplot(kind='bar', colors=color_map, title='Total Individual contributions by Occupation')","f623630e":"contribs_by_indivs = contribs_by_indivs[(~contribs_by_indivs['TRANSACTION_DT'].isnull())]\ncontribs_by_indivs['TRANSACTION_DT'] = pd.to_datetime(\n    contribs_by_indivs['TRANSACTION_DT'].fillna(0).astype('int').astype('str')\n    .replace('0', np.NaN).str.zfill(8), format='%m%d%Y')\ncontribs_by_indivs.head()","1ed48563":"by_date = contribs_by_indivs.groupby(['CAND_NAME', 'TRANSACTION_DT']).agg({'TRANSACTION_AMT': 'sum'})\nby_date_cumsum = by_date.groupby(level=0).cumsum().reset_index().pivot_table(values='TRANSACTION_AMT', index='TRANSACTION_DT', columns='CAND_NAME')\nby_date_cumsum.iplot(kind='line', colors=color_map, title='Total individual contributions over time')","7571a449":"by_state_and_cand = contribs_by_indivs.groupby(['STATE', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_state_and_cand.head()","2482a29a":"by_state = by_state_and_cand.pivot_table(values='TRANSACTION_AMT', index='STATE', columns='CAND_NAME').reset_index()    \ncand_cols = set(by_state.columns) - {'STATE'}\nby_state.loc[:, cand_cols] = by_state[cand_cols].fillna(0.0)\nby_state.head()","6184da20":"if democrat not in by_state.columns:\n    by_state[democrat] = 0.0\nif republican not in by_state.columns:\n    by_state[republican] = 0.0","379bb69f":"by_state['Total'] = by_state[democrat] + by_state[republican]\nby_state['RepublicanVsTotalRatio'] = by_state[republican]\/by_state['Total']\nby_state.head()","66c1fd59":"import plotly.express as px\nfig = px.choropleth(by_state, locations=\"STATE\", color=\"RepublicanVsTotalRatio\", hover_name=\"STATE\", \n                    hover_data=[democrat, republican], color_continuous_scale='bluered',\n                    locationmode='USA-states', scope='usa', \n                    title='Total individual contributions for Republican vs Democrat by state', range_color=[0, 1])\nfig.show()","2ae9f105":"contribs_by_indivs['YEAR_MONTH'] = contribs_by_indivs['TRANSACTION_DT'].dt.to_period('M')\ncontribs_by_indivs.head()","52be67b9":"by_date_state_and_cand = contribs_by_indivs.groupby(['YEAR_MONTH', 'STATE', 'CAND_NAME']).agg({'TRANSACTION_AMT': 'sum'}).reset_index()\nby_date_state_and_cand.head()","37639b24":"dates = by_date_state_and_cand['YEAR_MONTH'].unique()\nstates = by_date_state_and_cand['STATE'].unique()\ncands = by_date_state_and_cand['CAND_NAME'].unique()\ncands","962fbedb":"by_date_state_and_cand_skel = pd.DataFrame([{'YEAR_MONTH': date, 'STATE': state, 'CAND_NAME': cand} for date in dates for state in states for cand in cands])\nby_date_state_and_cand_skel['TRANSACTION_AMT'] = 0.0\nby_date_state_and_cand_skel.head()","cc841335":"by_date_state_and_cand = by_date_state_and_cand_skel.merge(by_date_state_and_cand, how='left', on=['YEAR_MONTH', 'STATE', 'CAND_NAME'])\nby_date_state_and_cand['TRANSACTION_AMT'] = np.where(by_date_state_and_cand['TRANSACTION_AMT_y'].isnull(), by_date_state_and_cand['TRANSACTION_AMT_x'], by_date_state_and_cand['TRANSACTION_AMT_y'])\nby_date_state_and_cand = by_date_state_and_cand.drop('TRANSACTION_AMT_x', axis=1).drop('TRANSACTION_AMT_y', axis=1)\nby_date_state_and_cand.head()","3bdbe2e3":"by_date_state_and_cand = by_date_state_and_cand.sort_values('YEAR_MONTH').set_index(['YEAR_MONTH', 'STATE', 'CAND_NAME']).groupby(level=[1,2]).cumsum().reset_index()\nby_date_state_and_cand.head()","ff4c48e9":"by_date_state = by_date_state_and_cand.pivot_table(values='TRANSACTION_AMT', index=['YEAR_MONTH', 'STATE'], columns='CAND_NAME').reset_index()    \ncand_cols = set(by_date_state.columns) - {'YEAR_MONTH', 'STATE'}\nby_date_state.loc[:, cand_cols] = by_date_state[cand_cols].fillna(0.0)\nby_date_state.head()","1e528a5d":"if democrat not in by_date_state.columns:\n    by_date_state[democrat] = 0.0\nif republican not in by_date_state.columns:\n    by_date_state[republican] = 0.0","a2ae9e31":"by_date_state['Total'] = by_date_state[democrat] + by_date_state[republican]\nby_date_state['RepublicanVsTotalRatio'] = by_date_state[republican]\/by_date_state['Total']\nby_date_state = by_date_state.sort_values('YEAR_MONTH')\nby_date_state['YEAR_MONTH'] = by_date_state['YEAR_MONTH'].astype('str')\nby_date_state.head()","6397cdb1":"import plotly.express as px\nfig = px.choropleth(by_date_state, locations=\"STATE\", color=\"RepublicanVsTotalRatio\", hover_name=\"STATE\", \n                    hover_data=[democrat, republican], color_continuous_scale='bluered',\n                    locationmode='USA-states', scope='usa', animation_frame='YEAR_MONTH',\n                    title='Total individual contributions for Republican vs Democrat by state over time',\n                    range_color=[0, 1])\nfig.show()","b0d40046":"## Contributions from individuals","01032f1e":"## Contributions & expenditures from committees","ce319f8f":"Again, Trump gained a lot of individual contributions in 2019 since he was the presumptive nominee, but Biden is gaining ground in 2020.","5eb77e0e":"**Here are the committees with the largest expenditures**","43f61bf0":"#### Here are the committees with the largest contributions","376c701d":"Again, Trump races ahead with the contributions in 2019, but is being pulled back by Biden in 2020.","36db5285":"So, Trump (& Biden) got a lot of contributions from Self-employed & Retired folks","0e503d8d":"### Let's look at contributions from committees","ec697c22":"### Let's look at committee expenditures for the candidates","cdd7cb8f":"# Trump vs Biden in terms of Campaign Finance for Presidential Election 2020","da25241c":"So, Trump received a lot of contributions from CEOs, Home-makers & the \"President\" (not sure if this is just bad user data), whereas Biden received contributions from \"President\", fire-fighters\/EMSes, attorneys, etc.","ce0d98e1":"So, it seems that Biden has received more receipts than Trump, & both have almost equal disbursements","719269ff":"## Campaign Finance Summary","7fb9f0da":"Not a lot to differentiate between the 2 candidates in terms of contributions","974a8f95":"A couple of observations :\n\n1. Trump has an early start in 2019, but Biden has caught up in expenditures even after starting near the start of 2020.\n1. Expenditures against Trump have ramped up much faster than against Biden (both have started in 2020)"}}