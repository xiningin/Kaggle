{"cell_type":{"5bf7642a":"code","152fc538":"code","2e2fd341":"code","aa987b29":"code","3ffdec7c":"code","aa7e8e89":"code","e1c3302e":"code","45ccfae0":"code","398c1f34":"code","bd0b1bb4":"code","7b0a9862":"code","dd7a714a":"code","1320d460":"code","3d8327ae":"code","f70bff29":"code","d07a0a99":"code","cb3b23a0":"code","f51b322f":"code","d7f7185c":"code","81434093":"code","1ace88fe":"code","0e0ffbe6":"code","5c4b61e4":"code","eaa96d58":"code","58f25e77":"code","23ae3aa0":"code","9dfcd925":"code","f0bf9227":"code","81a47ca7":"code","0b64ecb4":"code","00f0c31c":"code","43b4231a":"code","db3503e9":"code","42add784":"code","1ca4583f":"code","271f6b11":"markdown","47ae0e7b":"markdown","397317bc":"markdown","473b592d":"markdown","5950d4a1":"markdown"},"source":{"5bf7642a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","152fc538":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","2e2fd341":"from sklearn.datasets import load_boston\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error , mean_squared_error","aa987b29":"boston = load_boston()","3ffdec7c":"boston.keys()","aa7e8e89":"boston.DESCR","e1c3302e":"boston.feature_names","45ccfae0":"boston.target","398c1f34":"data=boston.data","bd0b1bb4":"data.shape","7b0a9862":"data=pd.DataFrame(data=data, columns = boston.feature_names)\ndata.head()","dd7a714a":"data['Price']= boston.target\ndata.head()","1320d460":"data.describe()","3d8327ae":"data.info()","f70bff29":"data.isnull().sum()","d07a0a99":"sns.pairplot(data)","cb3b23a0":"rows = 2 \ncols = 7\n\nfig, ax = plt.subplots(nrows = rows, ncols= cols, figsize = (16,4))\n\ncol = data.columns\nindex=0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.distplot(data[col[index]], ax = ax[i][j])\n        index = index + 1\n\nplt.tight_layout()","f51b322f":"corrmat = data.corr()\n\ncorrmat","d7f7185c":"fig , ax = plt.subplots(figsize=(18,10))\nsns.heatmap(corrmat, annot=True , annot_kws={'size':12})","81434093":"for a,b in enumerate(corrmat['Price'].index):\n    print(a)\n    print(b)\nprint(corrmat['CRIM'])    ","1ace88fe":"def getCorrelatedFeature(corrdata, threshold):\n    feature = []\n    value = []\n    for i, index in enumerate(corrdata.index):\n        if abs(corrdata[index])> threshold:\n            feature.append(index)\n            value.append(corrdata[index])\n    df = pd.DataFrame(data = value, index = feature, columns=['Corr Value'])\n    return df","0e0ffbe6":"threshold = 0.50\ncorr_value = getCorrelatedFeature(corrmat['Price'], threshold)\ncorr_value","5c4b61e4":"corr_value.index.values","eaa96d58":"correlated_data = data[corr_value.index]\ncorrelated_data.head()","58f25e77":"sns.pairplot(correlated_data)\nplt.tight_layout()","23ae3aa0":"sns.heatmap(correlated_data.corr(), annot=True , annot_kws={'size':12})","9dfcd925":"x= correlated_data.drop(labels=['Price'], axis = 1)\ny = correlated_data['Price']\nx.head()","f0bf9227":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)","81a47ca7":"x_train.shape , x_test.shape","0b64ecb4":"model = LinearRegression()\nmodel.fit(x_train, y_train)","00f0c31c":"y_predict = model.predict(x_test)","43b4231a":"df=pd.DataFrame(data=[y_predict, y_test])\ndf.T","db3503e9":"from sklearn.metrics import r2_score","42add784":"score= r2_score(y_test, y_predict)\nmae = mean_absolute_error(y_test,y_predict)\nmse = mean_squared_error(y_test,y_predict)\n\nprint('r2_score = ', score)\nprint('mae = ',mae , 'mse = ' ,mse)","1ca4583f":"rows = 2\ncols = 2\nfig, ax = plt.subplots(nrows=rows,ncols=cols, figsize=(16,4))\n\ncol=correlated_data.columns\nindex=0\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=correlated_data[col[index]], y=correlated_data['Price'],ax=ax[i][j] )\n        index=index+1\nfig.tight_layout()","271f6b11":"## Pairplot and Correlated Matrix of correlated data","47ae0e7b":"## Lets train the model","397317bc":"## Data Visualization ","473b592d":"## Understand your data","5950d4a1":"## Shuffle and Split Data"}}