{"cell_type":{"137fdd39":"code","7ff880eb":"code","4f433da6":"code","3d217c9c":"code","d4533f18":"code","32e77ccd":"code","f3798aac":"code","d7e5f381":"code","f9a372ba":"code","a084a90d":"code","12c314cd":"code","61e3b56c":"code","0428257a":"code","4d0b623b":"code","a8669c1c":"code","bff676d7":"code","9a0ad7d9":"code","64e52945":"code","8570b218":"code","fafd37ab":"code","5b6a8409":"code","08488c12":"code","376a3685":"code","7b8ad55c":"code","5b7a611c":"code","b212f049":"code","4334aad8":"code","a4b03978":"code","af48f83f":"code","99cff0a6":"code","5d5ba661":"code","a8ce02d6":"code","d1b58604":"markdown","c2c072b4":"markdown","40ee9f3c":"markdown","45278ab7":"markdown","ac7c3cf6":"markdown","7cddf990":"markdown","4282bd1f":"markdown","964b4075":"markdown","2e2ba6e8":"markdown","7b331911":"markdown","5c30789e":"markdown","f02b1506":"markdown","adbbe96f":"markdown","f3e329e0":"markdown","f047f85e":"markdown","85cab798":"markdown","89079cfb":"markdown","bcbecfea":"markdown","50284118":"markdown","88ed9156":"markdown","20d40a37":"markdown","54370f4a":"markdown","8420986c":"markdown","4d0a092c":"markdown","d9319e7d":"markdown","467c6f7f":"markdown","b8131b9c":"markdown","96fc313b":"markdown","d8e34d9a":"markdown","1aaeced2":"markdown","9d40ec9e":"markdown","2b497836":"markdown","ed1146ee":"markdown","fec3be34":"markdown","bed32d6d":"markdown","ff67dc54":"markdown","cb22ef43":"markdown","5b824738":"markdown","c6496c44":"markdown","e6a0d84b":"markdown"},"source":{"137fdd39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport scipy as sp\nimport numpy as np # linear algebra\nfrom pandas import DataFrame, Series\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7ff880eb":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv(\"..\/input\/train.csv\", index_col = 0)\ndf_test = pd.read_csv(\"..\/input\/test.csv\", index_col = 0)","4f433da6":"df_train","3d217c9c":"df_test","d4533f18":"df_train.ConvertedSalary.mean()","32e77ccd":"#\u30c7\u30fc\u30bf\u5185\u5bb9\u306e\u78ba\u8a8d\ndf_test.head()","f3798aac":"#\u30c7\u30fc\u30bf\u578b\u306e\u78ba\u8a8d\ncols_full = []\nfor col in df_train.columns:\n    cols_full.append(col)\n        \n    print(col, df_train[col].dtype)","d7e5f381":"#\u6b20\u640d\u6709\u7121\u30c1\u30a7\u30c3\u30af\nprint(df_train.isnull().any())","f9a372ba":"#\u52b9\u304b\u306a\u305d\u3046\u306a\u7279\u5fb4\u91cf\u3092\u524a\u9664\ndf_train = df_train.drop('SurveyTooLong', axis = 1)\ndf_train = df_train.drop('SurveyEasy', axis = 1)\ndf_test = df_test.drop('SurveyTooLong', axis = 1)\ndf_test = df_test.drop('SurveyEasy', axis = 1)","a084a90d":"#\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u30c7\u30fc\u30bf\u5206\u5272\nX_train = df_train.drop('ConvertedSalary', axis = 1)\nX_test = df_test\ny_train = df_train.ConvertedSalary","12c314cd":"#\u884c\u3054\u3068\u306e\u6b20\u640d\u5024\u6570\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\nX_train['nan_sum'] = X_train.isnull().sum(axis = 1)\nX_test['nan_sum'] = X_test.isnull().sum(axis = 1)","61e3b56c":"#\u30ab\u30c6\u30b4\u30ea\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aOne-hot Encoding\nX_train = pd.get_dummies(columns = ['Hobby'], data = X_train)\nX_train = pd.get_dummies(columns = ['OpenSource'], data = X_train)\n#X_train = pd.get_dummies(columns = ['Country'], data = X_train)\nX_train = pd.get_dummies(columns = ['Student'], data = X_train)\nX_train = pd.get_dummies(columns = ['Employment'], data = X_train)\nX_train = pd.get_dummies(columns = ['FormalEducation'], data = X_train)\nX_train = pd.get_dummies(columns = ['UndergradMajor'], data = X_train)\nX_train = pd.get_dummies(columns = ['CompanySize'], data = X_train)\n#X_train = pd.get_dummies(columns = ['DevType'], data = X_train)\nX_train = pd.get_dummies(columns = ['YearsCoding'], data = X_train)\nX_train = pd.get_dummies(columns = ['YearsCodingProf'], data = X_train)\n#X_train = pd.get_dummies(columns = ['JobSatisfaction'], data = X_train)\n#X_train = pd.get_dummies(columns = ['CareerSatisfaction'], data = X_train)\nX_train = pd.get_dummies(columns = ['HopeFiveYears'], data = X_train)\nX_train = pd.get_dummies(columns = ['JobSearchStatus'], data = X_train)\nX_train = pd.get_dummies(columns = ['LastNewJob'], data = X_train)\nX_train = pd.get_dummies(columns = ['UpdateCV'], data = X_train)\nX_train = pd.get_dummies(columns = ['Currency'], data = X_train)\nX_train = pd.get_dummies(columns = ['SalaryType'], data = X_train)\n#X_train = pd.get_dummies(columns = ['CurrencySymbol'], data = X_train)\n#X_train = pd.get_dummies(columns = ['CommunicationTools'], data = X_train)\nX_train = pd.get_dummies(columns = ['TimeFullyProductive'], data = X_train)\nX_train = pd.get_dummies(columns = ['TimeAfterBootcamp'], data = X_train)\nX_train = pd.get_dummies(columns = ['AgreeDisagree1'], data = X_train)\nX_train = pd.get_dummies(columns = ['AgreeDisagree2'], data = X_train)\nX_train = pd.get_dummies(columns = ['AgreeDisagree3'], data = X_train)\nX_train = pd.get_dummies(columns = ['FrameworkWorkedWith'], data = X_train)\nX_train = pd.get_dummies(columns = ['OperatingSystem'], data = X_train)\nX_train = pd.get_dummies(columns = ['NumberMonitors'], data = X_train)\nX_train = pd.get_dummies(columns = ['CheckInCode'], data = X_train)\nX_train = pd.get_dummies(columns = ['AdBlocker'], data = X_train)\nX_train = pd.get_dummies(columns = ['AdBlockerDisable'], data = X_train)\nX_train = pd.get_dummies(columns = ['AdsAgreeDisagree1'], data = X_train)\nX_train = pd.get_dummies(columns = ['AdsAgreeDisagree2'], data = X_train)\nX_train = pd.get_dummies(columns = ['AdsAgreeDisagree3'], data = X_train)\nX_train = pd.get_dummies(columns = ['AdsActions'], data = X_train)\nX_train = pd.get_dummies(columns = ['AIDangerous'], data = X_train)\nX_train = pd.get_dummies(columns = ['AIInteresting'], data = X_train)\nX_train = pd.get_dummies(columns = ['AIResponsible'], data = X_train)\nX_train = pd.get_dummies(columns = ['AIFuture'], data = X_train)\nX_train = pd.get_dummies(columns = ['EthicsChoice'], data = X_train)\nX_train = pd.get_dummies(columns = ['EthicsReport'], data = X_train)\nX_train = pd.get_dummies(columns = ['EthicsResponsible'], data = X_train)\nX_train = pd.get_dummies(columns = ['EthicalImplications'], data = X_train)\n#X_train = pd.get_dummies(columns = ['StackOverflowRecommend'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowVisit'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowHasAccount'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowParticipate'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowJobs'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowDevStory'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowJobsRecommend'], data = X_train)\nX_train = pd.get_dummies(columns = ['StackOverflowConsiderMember'], data = X_train)\nX_train = pd.get_dummies(columns = ['HypotheticalTools1'], data = X_train)\nX_train = pd.get_dummies(columns = ['HypotheticalTools2'], data = X_train)\nX_train = pd.get_dummies(columns = ['HypotheticalTools3'], data = X_train)\nX_train = pd.get_dummies(columns = ['HypotheticalTools4'], data = X_train)\nX_train = pd.get_dummies(columns = ['HypotheticalTools5'], data = X_train)\nX_train = pd.get_dummies(columns = ['WakeTime'], data = X_train)\nX_train = pd.get_dummies(columns = ['HoursComputer'], data = X_train)\nX_train = pd.get_dummies(columns = ['HoursOutside'], data = X_train)\nX_train = pd.get_dummies(columns = ['SkipMeals'], data = X_train)\nX_train = pd.get_dummies(columns = ['ErgonomicDevices'], data = X_train)\nX_train = pd.get_dummies(columns = ['Exercise'], data = X_train)\nX_train = pd.get_dummies(columns = ['Gender'], data = X_train)\nX_train = pd.get_dummies(columns = ['SexualOrientation'], data = X_train)\nX_train = pd.get_dummies(columns = ['EducationParents'], data = X_train)\nX_train = pd.get_dummies(columns = ['RaceEthnicity'], data = X_train)\nX_train = pd.get_dummies(columns = ['Age'], data = X_train)\nX_train = pd.get_dummies(columns = ['Dependents'], data = X_train)\nX_train = pd.get_dummies(columns = ['MilitaryUS'], data = X_train)\n#X_train = pd.get_dummies(columns = ['SurveyTooLong'], data = X_train)\n#X_train = pd.get_dummies(columns = ['SurveyEasy'], data = X_train)\n\nX_test = pd.get_dummies(columns = ['Hobby'], data = X_test)\nX_test = pd.get_dummies(columns = ['OpenSource'], data = X_test)\n#X_test = pd.get_dummies(columns = ['Country'], data = X_test)\nX_test = pd.get_dummies(columns = ['Student'], data = X_test)\nX_test = pd.get_dummies(columns = ['Employment'], data = X_test)\nX_test = pd.get_dummies(columns = ['FormalEducation'], data = X_test)\nX_test = pd.get_dummies(columns = ['UndergradMajor'], data = X_test)\nX_test = pd.get_dummies(columns = ['CompanySize'], data = X_test)\n#X_test = pd.get_dummies(columns = ['DevType'], data = X_test)\nX_test = pd.get_dummies(columns = ['YearsCoding'], data = X_test)\nX_test = pd.get_dummies(columns = ['YearsCodingProf'], data = X_test)\n#X_test = pd.get_dummies(columns = ['JobSatisfaction'], data = X_test)\n#X_test = pd.get_dummies(columns = ['CareerSatisfaction'], data = X_test)\nX_test = pd.get_dummies(columns = ['HopeFiveYears'], data = X_test)\nX_test = pd.get_dummies(columns = ['JobSearchStatus'], data = X_test)\nX_test = pd.get_dummies(columns = ['LastNewJob'], data = X_test)\nX_test = pd.get_dummies(columns = ['UpdateCV'], data = X_test)\nX_test = pd.get_dummies(columns = ['Currency'], data = X_test)\nX_test = pd.get_dummies(columns = ['SalaryType'], data = X_test)\n#X_test = pd.get_dummies(columns = ['CurrencySymbol'], data = X_test)\n#X_test = pd.get_dummies(columns = ['CommunicationTools'], data = X_test)\nX_test = pd.get_dummies(columns = ['TimeFullyProductive'], data = X_test)\nX_test = pd.get_dummies(columns = ['TimeAfterBootcamp'], data = X_test)\nX_test = pd.get_dummies(columns = ['AgreeDisagree1'], data = X_test)\nX_test = pd.get_dummies(columns = ['AgreeDisagree2'], data = X_test)\nX_test = pd.get_dummies(columns = ['AgreeDisagree3'], data = X_test)\nX_test = pd.get_dummies(columns = ['FrameworkWorkedWith'], data = X_test)\nX_test = pd.get_dummies(columns = ['OperatingSystem'], data = X_test)\nX_test = pd.get_dummies(columns = ['NumberMonitors'], data = X_test)\nX_test = pd.get_dummies(columns = ['CheckInCode'], data = X_test)\nX_test = pd.get_dummies(columns = ['AdBlocker'], data = X_test)\nX_test = pd.get_dummies(columns = ['AdBlockerDisable'], data = X_test)\nX_test = pd.get_dummies(columns = ['AdsAgreeDisagree1'], data = X_test)\nX_test = pd.get_dummies(columns = ['AdsAgreeDisagree2'], data = X_test)\nX_test = pd.get_dummies(columns = ['AdsAgreeDisagree3'], data = X_test)\nX_test = pd.get_dummies(columns = ['AdsActions'], data = X_test)\nX_test = pd.get_dummies(columns = ['AIDangerous'], data = X_test)\nX_test = pd.get_dummies(columns = ['AIInteresting'], data = X_test)\nX_test = pd.get_dummies(columns = ['AIResponsible'], data = X_test)\nX_test = pd.get_dummies(columns = ['AIFuture'], data = X_test)\nX_test = pd.get_dummies(columns = ['EthicsChoice'], data = X_test)\nX_test = pd.get_dummies(columns = ['EthicsReport'], data = X_test)\nX_test = pd.get_dummies(columns = ['EthicsResponsible'], data = X_test)\nX_test = pd.get_dummies(columns = ['EthicalImplications'], data = X_test)\n#X_test = pd.get_dummies(columns = ['StackOverflowRecommend'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowVisit'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowHasAccount'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowParticipate'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowJobs'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowDevStory'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowJobsRecommend'], data = X_test)\nX_test = pd.get_dummies(columns = ['StackOverflowConsiderMember'], data = X_test)\nX_test = pd.get_dummies(columns = ['HypotheticalTools1'], data = X_test)\nX_test = pd.get_dummies(columns = ['HypotheticalTools2'], data = X_test)\nX_test = pd.get_dummies(columns = ['HypotheticalTools3'], data = X_test)\nX_test = pd.get_dummies(columns = ['HypotheticalTools4'], data = X_test)\nX_test = pd.get_dummies(columns = ['HypotheticalTools5'], data = X_test)\nX_test = pd.get_dummies(columns = ['WakeTime'], data = X_test)\nX_test = pd.get_dummies(columns = ['HoursComputer'], data = X_test)\nX_test = pd.get_dummies(columns = ['HoursOutside'], data = X_test)\nX_test = pd.get_dummies(columns = ['SkipMeals'], data = X_test)\nX_test = pd.get_dummies(columns = ['ErgonomicDevices'], data = X_test)\nX_test = pd.get_dummies(columns = ['Exercise'], data = X_test)\nX_test = pd.get_dummies(columns = ['Gender'], data = X_test)\nX_test = pd.get_dummies(columns = ['SexualOrientation'], data = X_test)\nX_test = pd.get_dummies(columns = ['EducationParents'], data = X_test)\nX_test = pd.get_dummies(columns = ['RaceEthnicity'], data = X_test)\nX_test = pd.get_dummies(columns = ['Age'], data = X_test)\nX_test = pd.get_dummies(columns = ['Dependents'], data = X_test)\nX_test = pd.get_dummies(columns = ['MilitaryUS'], data = X_test)\n#X_test = pd.get_dummies(columns = ['SurveyTooLong'], data = X_test)\n#X_test = pd.get_dummies(columns = ['SurveyEasy'], data = X_test)","0428257a":"#\u5217\u6570\u30fb\u5217\u9806\u3092\u63c3\u3048\u308b\nX_test_tmp = X_test #\u30c7\u30fc\u30bf\u9000\u907f\nX_test = pd.DataFrame(index=[])\n#X_train\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u304c\u3001X_test\u306b\u5b58\u5728\u3057\u306a\u3044\u30ab\u30e9\u30e0\u306f\u5168\u50240\u3067\u5217\u8ffd\u52a0\nfor col in X_train.columns:\n    if col in X_test_tmp.columns:\n        X_test[col] = X_test_tmp[col]\n    else:\n        X_test[col] = int(0)\n\n#X_test\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u304c\u3001X_train\u306b\u5b58\u5728\u3057\u306a\u3044\u30ab\u30e9\u30e0\u306f\u5217\u524a\u9664        \n#for col in X_test.columns:\n#    if not col in X_train.columns:\n#        X_test.drop([col], axis = 1, inplace = True)","4d0b623b":"#\u30ab\u30c6\u30b4\u30ea\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aCount (Frequency) Encoding\nsummary = X_train.Country.value_counts()\nX_train['Country'] = X_train.Country.map(summary)\nsummary = X_test.Country.value_counts()\nX_test['Country'] = X_test.Country.map(summary)\n\nsummary = X_train.CurrencySymbol.value_counts()\nX_train['CurrencySymbol'] = X_train.CurrencySymbol.map(summary)\nsummary = X_test.CurrencySymbol.value_counts()\nX_test['CurrencySymbol'] = X_test.CurrencySymbol.map(summary)","a8669c1c":"X_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Extremely satisfied', '1')\nX_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Moderately satisfied', '2')\nX_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Slightly satisfied', '3')\nX_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Neither satisfied nor dissatisfied', '4')\nX_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Slightly dissatisfied', '5')\nX_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Moderately dissatisfied', '6')\nX_train['JobSatisfaction'] = X_train['JobSatisfaction'].str.replace('Extremely dissatisfied', '7')\nX_train.JobSatisfaction = X_train.JobSatisfaction.fillna(99)\n\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Extremely satisfied', '1')\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Moderately satisfied', '2')\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Slightly satisfied', '3')\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Neither satisfied nor dissatisfied', '4')\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Slightly dissatisfied', '5')\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Moderately dissatisfied', '6')\nX_train['CareerSatisfaction'] = X_train['CareerSatisfaction'].str.replace('Extremely dissatisfied', '7')\nX_train.CareerSatisfaction = X_train.CareerSatisfaction.fillna(99)\n\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Extremely satisfied', '1')\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Moderately satisfied', '2')\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Slightly satisfied', '3')\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Neither satisfied nor dissatisfied', '4')\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Slightly dissatisfied', '5')\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Moderately dissatisfied', '6')\nX_test['JobSatisfaction'] = X_test['JobSatisfaction'].str.replace('Extremely dissatisfied', '7')\nX_test.JobSatisfaction = X_test.JobSatisfaction.fillna(99)\n\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Extremely satisfied', '1')\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Moderately satisfied', '2')\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Slightly satisfied', '3')\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Neither satisfied nor dissatisfied', '4')\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Slightly dissatisfied', '5')\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Moderately dissatisfied', '6')\nX_test['CareerSatisfaction'] = X_test['CareerSatisfaction'].str.replace('Extremely dissatisfied', '7')\nX_test.CareerSatisfaction = X_test.CareerSatisfaction.fillna(99)","bff676d7":"#\u30c6\u30ad\u30b9\u30c8\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aTFIDF\n#\u30c6\u30ad\u30b9\u30c8\u5217\u306e\u307f\u629c\u304d\u51fa\u3059\nTXT1_train = X_train['DevType']\nTXT2_train = X_train['CommunicationTools']\nTXT1_test = X_test['DevType']\nTXT2_test = X_test['CommunicationTools']","9a0ad7d9":"#\u6b20\u640d\u5024\u88dc\u9593\nTXT1_train.fillna('#', inplace = True)\nTXT2_train.fillna('#', inplace = True)\nTXT1_test.fillna('#', inplace = True)\nTXT2_test.fillna('#', inplace = True)","64e52945":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(max_features = 100)\nTXT1_train = tfidf.fit_transform(TXT1_train)\nTXT1_test = tfidf.transform(TXT1_test)\nTXT2_train = tfidf.fit_transform(TXT2_train)\nTXT2_test = tfidf.transform(TXT2_test)","8570b218":"X_train_idx = X_train.reset_index()\nTXT1_train2 = pd.DataFrame(TXT1_train.todense())\nX_train = pd.concat([X_train_idx, TXT1_train2], axis = 1)\nX_test_idx = X_test.reset_index()\nTXT1_test2 = pd.DataFrame(TXT1_test.todense())\nX_test = pd.concat([X_test_idx, TXT1_test2], axis = 1)\n\nX_train_idx = X_train.reset_index()\nTXT2_train2 = pd.DataFrame(TXT2_train.todense())\nX_train = pd.concat([X_train_idx, TXT2_train2], axis = 1)\nX_test_idx = X_test.reset_index()\nTXT2_test2 = pd.DataFrame(TXT2_test.todense())\nX_test = pd.concat([X_test_idx, TXT2_test2], axis = 1)","fafd37ab":"#\u30c6\u30ad\u30b9\u30c8\u5217\u3092\u524a\u9664\u3059\u308b\nX_train.drop(['DevType' ,'CommunicationTools'], axis = 1, inplace = True)\nX_test.drop(['DevType' ,'CommunicationTools'], axis = 1, inplace = True)","5b6a8409":"#\u6570\u5024\u3068\u6587\u5b57\u5217\u304c\u6df7\u5728\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304b\u3089\u3001\u6570\u5024\u306e\u307f\u629c\u7c8b\nX_train['StackOverflowRecommend'] = X_train['StackOverflowRecommend'].str.extract('([0-9]+)').astype(float)\nX_test['StackOverflowRecommend'] = X_test['StackOverflowRecommend'].str.extract('([0-9]+)').astype(float)","08488c12":"X_train.head(10)","376a3685":"#\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u88dc\u9593\nX_train.AssessJob1 = X_train.AssessJob1.fillna(X_train.AssessJob1.mean())\nX_train.AssessJob2 = X_train.AssessJob2.fillna(X_train.AssessJob2.mean())\nX_train.AssessJob3 = X_train.AssessJob3.fillna(X_train.AssessJob3.mean())\nX_train.AssessJob4 = X_train.AssessJob4.fillna(X_train.AssessJob4.mean())\nX_train.AssessJob5 = X_train.AssessJob5.fillna(X_train.AssessJob5.mean())\nX_train.AssessJob6 = X_train.AssessJob6.fillna(X_train.AssessJob6.mean())\nX_train.AssessJob7 = X_train.AssessJob7.fillna(X_train.AssessJob7.mean())\nX_train.AssessJob8 = X_train.AssessJob8.fillna(X_train.AssessJob8.mean())\nX_train.AssessJob9 = X_train.AssessJob9.fillna(X_train.AssessJob9.mean())\nX_train.AssessJob10 = X_train.AssessJob10.fillna(X_train.AssessJob10.mean())\nX_train.AssessBenefits1 = X_train.AssessBenefits1.fillna(X_train.AssessBenefits1.mean())\nX_train.AssessBenefits2 = X_train.AssessBenefits2.fillna(X_train.AssessBenefits2.mean())\nX_train.AssessBenefits3 = X_train.AssessBenefits3.fillna(X_train.AssessBenefits3.mean())\nX_train.AssessBenefits4 = X_train.AssessBenefits4.fillna(X_train.AssessBenefits4.mean())\nX_train.AssessBenefits5 = X_train.AssessBenefits5.fillna(X_train.AssessBenefits5.mean())\nX_train.AssessBenefits6 = X_train.AssessBenefits6.fillna(X_train.AssessBenefits6.mean())\nX_train.AssessBenefits7 = X_train.AssessBenefits7.fillna(X_train.AssessBenefits7.mean())\nX_train.AssessBenefits8 = X_train.AssessBenefits8.fillna(X_train.AssessBenefits8.mean())\nX_train.AssessBenefits9 = X_train.AssessBenefits9.fillna(X_train.AssessBenefits9.mean())\nX_train.AssessBenefits10 = X_train.AssessBenefits10.fillna(X_train.AssessBenefits10.mean())\nX_train.AssessBenefits11 = X_train.AssessBenefits11.fillna(X_train.AssessBenefits11.mean())\nX_train.JobContactPriorities1 = X_train.JobContactPriorities1.fillna(X_train.JobContactPriorities1.mean())\nX_train.JobContactPriorities2 = X_train.JobContactPriorities2.fillna(X_train.JobContactPriorities2.mean())\nX_train.JobContactPriorities3 = X_train.JobContactPriorities3.fillna(X_train.JobContactPriorities3.mean())\nX_train.JobContactPriorities4 = X_train.JobContactPriorities4.fillna(X_train.JobContactPriorities4.mean())\nX_train.JobContactPriorities5 = X_train.JobContactPriorities5.fillna(X_train.JobContactPriorities5.mean())\nX_train.JobEmailPriorities1 = X_train.JobEmailPriorities1.fillna(X_train.JobEmailPriorities1.mean())\nX_train.JobEmailPriorities2 = X_train.JobEmailPriorities2.fillna(X_train.JobEmailPriorities2.mean())\nX_train.JobEmailPriorities3 = X_train.JobEmailPriorities3.fillna(X_train.JobEmailPriorities3.mean())\nX_train.JobEmailPriorities4 = X_train.JobEmailPriorities4.fillna(X_train.JobEmailPriorities4.mean())\nX_train.JobEmailPriorities5 = X_train.JobEmailPriorities5.fillna(X_train.JobEmailPriorities5.mean())\nX_train.JobEmailPriorities6 = X_train.JobEmailPriorities6.fillna(X_train.JobEmailPriorities6.mean())\nX_train.JobEmailPriorities7 = X_train.JobEmailPriorities7.fillna(X_train.JobEmailPriorities7.mean())\nX_train.AdsPriorities1 = X_train.AdsPriorities1.fillna(X_train.AdsPriorities1.mean())\nX_train.AdsPriorities2 = X_train.AdsPriorities2.fillna(X_train.AdsPriorities2.mean())\nX_train.AdsPriorities3 = X_train.AdsPriorities3.fillna(X_train.AdsPriorities3.mean())\nX_train.AdsPriorities4 = X_train.AdsPriorities4.fillna(X_train.AdsPriorities4.mean())\nX_train.AdsPriorities5 = X_train.AdsPriorities5.fillna(X_train.AdsPriorities5.mean())\nX_train.AdsPriorities6 = X_train.AdsPriorities6.fillna(X_train.AdsPriorities6.mean())\nX_train.AdsPriorities7 = X_train.AdsPriorities7.fillna(X_train.AdsPriorities7.mean())\nX_train.StackOverflowRecommend = X_train.StackOverflowRecommend.fillna(99)\n\nX_test.AssessJob1 = X_test.AssessJob1.fillna(X_test.AssessJob1.mean())\nX_test.AssessJob2 = X_test.AssessJob2.fillna(X_test.AssessJob2.mean())\nX_test.AssessJob3 = X_test.AssessJob3.fillna(X_test.AssessJob3.mean())\nX_test.AssessJob4 = X_test.AssessJob4.fillna(X_test.AssessJob4.mean())\nX_test.AssessJob5 = X_test.AssessJob5.fillna(X_test.AssessJob5.mean())\nX_test.AssessJob6 = X_test.AssessJob6.fillna(X_test.AssessJob6.mean())\nX_test.AssessJob7 = X_test.AssessJob7.fillna(X_test.AssessJob7.mean())\nX_test.AssessJob8 = X_test.AssessJob8.fillna(X_test.AssessJob8.mean())\nX_test.AssessJob9 = X_test.AssessJob9.fillna(X_test.AssessJob9.mean())\nX_test.AssessJob10 = X_test.AssessJob10.fillna(X_test.AssessJob10.mean())\nX_test.AssessBenefits1 = X_test.AssessBenefits1.fillna(X_test.AssessBenefits1.mean())\nX_test.AssessBenefits2 = X_test.AssessBenefits2.fillna(X_test.AssessBenefits2.mean())\nX_test.AssessBenefits3 = X_test.AssessBenefits3.fillna(X_test.AssessBenefits3.mean())\nX_test.AssessBenefits4 = X_test.AssessBenefits4.fillna(X_test.AssessBenefits4.mean())\nX_test.AssessBenefits5 = X_test.AssessBenefits5.fillna(X_test.AssessBenefits5.mean())\nX_test.AssessBenefits6 = X_test.AssessBenefits6.fillna(X_test.AssessBenefits6.mean())\nX_test.AssessBenefits7 = X_test.AssessBenefits7.fillna(X_test.AssessBenefits7.mean())\nX_test.AssessBenefits8 = X_test.AssessBenefits8.fillna(X_test.AssessBenefits8.mean())\nX_test.AssessBenefits9 = X_test.AssessBenefits9.fillna(X_test.AssessBenefits9.mean())\nX_test.AssessBenefits10 = X_test.AssessBenefits10.fillna(X_test.AssessBenefits10.mean())\nX_test.AssessBenefits11 = X_test.AssessBenefits11.fillna(X_test.AssessBenefits11.mean())\nX_test.JobContactPriorities1 = X_test.JobContactPriorities1.fillna(X_test.JobContactPriorities1.mean())\nX_test.JobContactPriorities2 = X_test.JobContactPriorities2.fillna(X_test.JobContactPriorities2.mean())\nX_test.JobContactPriorities3 = X_test.JobContactPriorities3.fillna(X_test.JobContactPriorities3.mean())\nX_test.JobContactPriorities4 = X_test.JobContactPriorities4.fillna(X_test.JobContactPriorities4.mean())\nX_test.JobContactPriorities5 = X_test.JobContactPriorities5.fillna(X_test.JobContactPriorities5.mean())\nX_test.JobEmailPriorities1 = X_test.JobEmailPriorities1.fillna(X_test.JobEmailPriorities1.mean())\nX_test.JobEmailPriorities2 = X_test.JobEmailPriorities2.fillna(X_test.JobEmailPriorities2.mean())\nX_test.JobEmailPriorities3 = X_test.JobEmailPriorities3.fillna(X_test.JobEmailPriorities3.mean())\nX_test.JobEmailPriorities4 = X_test.JobEmailPriorities4.fillna(X_test.JobEmailPriorities4.mean())\nX_test.JobEmailPriorities5 = X_test.JobEmailPriorities5.fillna(X_test.JobEmailPriorities5.mean())\nX_test.JobEmailPriorities6 = X_test.JobEmailPriorities6.fillna(X_test.JobEmailPriorities6.mean())\nX_test.JobEmailPriorities7 = X_test.JobEmailPriorities7.fillna(X_test.JobEmailPriorities7.mean())\nX_test.AdsPriorities1 = X_test.AdsPriorities1.fillna(X_test.AdsPriorities1.mean())\nX_test.AdsPriorities2 = X_test.AdsPriorities2.fillna(X_test.AdsPriorities2.mean())\nX_test.AdsPriorities3 = X_test.AdsPriorities3.fillna(X_test.AdsPriorities3.mean())\nX_test.AdsPriorities4 = X_test.AdsPriorities4.fillna(X_test.AdsPriorities4.mean())\nX_test.AdsPriorities5 = X_test.AdsPriorities5.fillna(X_test.AdsPriorities5.mean())\nX_test.AdsPriorities6 = X_test.AdsPriorities6.fillna(X_test.AdsPriorities6.mean())\nX_test.AdsPriorities7 = X_test.AdsPriorities7.fillna(X_test.AdsPriorities7.mean())\nX_test.StackOverflowRecommend = X_test.StackOverflowRecommend.fillna(99)","7b8ad55c":"#X_train = X_train.drop('index', axis = 1)\nX_train = X_train.drop('Respondent', axis = 1)\n#X_test = X_test.drop('index', axis = 1)\nX_test = X_test.drop('Respondent', axis = 1)","5b7a611c":"#\u30ab\u30e9\u30e0\u540d\u53d6\u5f97\nnum_cols = []\nfor col in X_train.columns:\n    num_cols.append(col)\n    \nprint(num_cols)","b212f049":"#\u6570\u5024\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aStandardScaler\nfrom sklearn.preprocessing import StandardScaler\n#num_cols = ['loan_amnt', 'installment', 'emp_length', 'annual_inc', 'zip_code', 'dti', 'delinq_2yrs', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'acc_now_delinq', 'tot_coll_amt', 'tot_cur_bal', 'date_diff']\n#num_cols = ['loan_amnt', 'installment', 'emp_length', 'annual_inc', 'zip_code', 'dti', 'delinq_2yrs', 'inq_last_6mths', 'mths_since_last_delinq', 'mths_since_last_record', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc', 'collections_12_mths_ex_med', 'mths_since_last_major_derog', 'tot_coll_amt', 'tot_cur_bal', 'date_diff', 'addr_state']\nscaler = StandardScaler()\nscaler.fit(X_train[num_cols])","4334aad8":"#\u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u3067\u5404\u5217\u3092\u7f6e\u63db\nX_train[num_cols] = scaler.transform(X_train[num_cols])\nX_test[num_cols] = scaler.transform(X_test[num_cols])","a4b03978":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom tqdm import tqdm_notebook as tqdm\n#from lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LinearRegression","af48f83f":"\"\"\"\n%%time\n# CV\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u308b\nscores = []\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    #clf = GradientBoostingClassifier() # \u3053\u3053\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u5404\u81ea\u306e\u691c\u8a0e\u9805\u76ee\u3067\u3059\n    #clf = LGBMClassifier()\n    lr = LinearRegression()\n    \n    lr.fit(X_train_, y_train_)\n    #y_pred = lr.predict_proba(X_val)[:,1]\n    y_pred = lr.predict(X_val)\n    #score = roc_auc_score(y_val, y_pred)\n    #score = np.sqrt(np.mean(((np.log(y+1)-np.log(y_pred+1))**2)))\n    #scores.append(score)\n    \n    #print('CV Score of Fold_%d is %f' % (i, score))\n\"\"\"","99cff0a6":"#\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\n#clf = GradientBoostingClassifier() # \u3053\u3053\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u5404\u81ea\u306e\u691c\u8a0e\u9805\u76ee\u3067\u3059\n#clf = LGBMClassifier()\nlr = LinearRegression()\n#clf.fit(X_train, y_train)\nlr.fit(X_train, y_train)\n\n#y_pred = lr.predict_proba(X_test)[:,1] # predict_proba\u3067\u78ba\u7387\u3092\u51fa\u529b\u3059\u308b\ny_pred = lr.predict(X_test)","5d5ba661":"y_pred","a8ce02d6":"#sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\nsubmission = pd.read_csv('..\/input\/sample_submission.csv', index_col=0)\n\nsubmission.ConvertedSalary = y_pred\nsubmission.to_csv('submission.csv')","d1b58604":"#\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u88dc\u9593\nX_test['loan_amnt'].fillna(X_test['loan_amnt'].mean(), inplace = True)\nX_test['installment'].fillna(X_test['installment'].mean(), inplace = True)\nX_test['emp_length'].fillna(X_test['emp_length'].mean(), inplace = True)\nX_test['annual_inc'].fillna(X_test['annual_inc'].mean(), inplace = True)\nX_test['dti'].fillna(X_test['dti'].mean(), inplace = True)\nX_test['delinq_2yrs'].fillna(X_test['delinq_2yrs'].mean(), inplace = True)\nX_test['inq_last_6mths'].fillna(X_test['inq_last_6mths'].mean(), inplace = True)\nX_test['mths_since_last_delinq'].fillna(X_test['mths_since_last_delinq'].mean(), inplace = True)\nX_test['mths_since_last_record'].fillna(X_test['mths_since_last_record'].mean(), inplace = True)\nX_test['open_acc'].fillna(X_test['open_acc'].mean(), inplace = True)\nX_test['pub_rec'].fillna(X_test['pub_rec'].mean(), inplace = True)\nX_test['revol_bal'].fillna(X_test['revol_bal'].mean(), inplace = True)\nX_test['revol_util'].fillna(X_test['revol_util'].mean(), inplace = True)\nX_test['total_acc'].fillna(X_test['total_acc'].mean(), inplace = True)\nX_test['collections_12_mths_ex_med'].fillna(X_test['collections_12_mths_ex_med'].mean(), inplace = True)\nX_test['mths_since_last_major_derog'].fillna(X_test['mths_since_last_major_derog'].mean(), inplace = True)\n#X_test['acc_now_delinq'].fillna(X_test['acc_now_delinq'].mean(), inplace = True)\nX_test['tot_coll_amt'].fillna(X_test['tot_coll_amt'].mean(), inplace = True)\nX_test['tot_cur_bal'].fillna(X_test['tot_cur_bal'].mean(), inplace = True)\nX_test['date_diff'].fillna(X_test['date_diff'].mean(), inplace = True)","c2c072b4":"#\u30c6\u30ad\u30b9\u30c8\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aTFIDF\n#\u30c6\u30ad\u30b9\u30c8\u5217\u306e\u307f\u629c\u304d\u51fa\u3059\nTXT_train = X_train[['emp_title', 'title']]\n#\u30c6\u30ad\u30b9\u30c8\u5217\u3092\u524a\u9664\u3059\u308b\nX_train.drop(['emp_title', 'title'], axis = 1, inplace = True)","40ee9f3c":"#\u6b20\u640d\u3092\u5e73\u5747\u5024\u3067\u88dc\u9593\nX_train['loan_amnt'].fillna(X_train['loan_amnt'].mean(), inplace = True)\nX_train['installment'].fillna(X_train['installment'].mean(), inplace = True)\nX_train['emp_length'].fillna(X_train['emp_length'].mean(), inplace = True)\nX_train['annual_inc'].fillna(X_train['annual_inc'].mean(), inplace = True)\nX_train['dti'].fillna(X_train['dti'].mean(), inplace = True)\nX_train['delinq_2yrs'].fillna(X_train['delinq_2yrs'].mean(), inplace = True)\nX_train['inq_last_6mths'].fillna(X_train['inq_last_6mths'].mean(), inplace = True)\nX_train['mths_since_last_delinq'].fillna(X_train['mths_since_last_delinq'].mean(), inplace = True)\nX_train['mths_since_last_record'].fillna(X_train['mths_since_last_record'].mean(), inplace = True)\nX_train['open_acc'].fillna(X_train['open_acc'].mean(), inplace = True)\nX_train['pub_rec'].fillna(X_train['pub_rec'].mean(), inplace = True)\nX_train['revol_bal'].fillna(X_train['revol_bal'].mean(), inplace = True)\nX_train['revol_util'].fillna(X_train['revol_util'].mean(), inplace = True)\nX_train['total_acc'].fillna(X_train['total_acc'].mean(), inplace = True)\nX_train['collections_12_mths_ex_med'].fillna(X_train['collections_12_mths_ex_med'].mean(), inplace = True)\nX_train['mths_since_last_major_derog'].fillna(X_train['mths_since_last_major_derog'].mean(), inplace = True)\n#X_train['acc_now_delinq'].fillna(X_train['acc_now_delinq'].mean(), inplace = True)\nX_train['tot_coll_amt'].fillna(X_train['tot_coll_amt'].mean(), inplace = True)\nX_train['tot_cur_bal'].fillna(X_train['tot_cur_bal'].mean(), inplace = True)\nX_train['date_diff'].fillna(X_train['date_diff'].mean(), inplace = True)\nX_train['addr_state'].fillna(0, inplace = True)\n\nX_test['loan_amnt'].fillna(X_test['loan_amnt'].mean(), inplace = True)\nX_test['installment'].fillna(X_test['installment'].mean(), inplace = True)\nX_test['emp_length'].fillna(X_test['emp_length'].mean(), inplace = True)\nX_test['annual_inc'].fillna(X_test['annual_inc'].mean(), inplace = True)\nX_test['dti'].fillna(X_test['dti'].mean(), inplace = True)\nX_test['delinq_2yrs'].fillna(X_test['delinq_2yrs'].mean(), inplace = True)\nX_test['inq_last_6mths'].fillna(X_test['inq_last_6mths'].mean(), inplace = True)\nX_test['mths_since_last_delinq'].fillna(X_test['mths_since_last_delinq'].mean(), inplace = True)\nX_test['mths_since_last_record'].fillna(X_test['mths_since_last_record'].mean(), inplace = True)\nX_test['open_acc'].fillna(X_test['open_acc'].mean(), inplace = True)\nX_test['pub_rec'].fillna(X_test['pub_rec'].mean(), inplace = True)\nX_test['revol_bal'].fillna(X_test['revol_bal'].mean(), inplace = True)\nX_test['revol_util'].fillna(X_test['revol_util'].mean(), inplace = True)\nX_test['total_acc'].fillna(X_test['total_acc'].mean(), inplace = True)\nX_test['collections_12_mths_ex_med'].fillna(X_test['collections_12_mths_ex_med'].mean(), inplace = True)\nX_test['mths_since_last_major_derog'].fillna(X_test['mths_since_last_major_derog'].mean(), inplace = True)\n#X_test['acc_now_delinq'].fillna(X_test['acc_now_delinq'].mean(), inplace = True)\nX_test['tot_coll_amt'].fillna(X_test['tot_coll_amt'].mean(), inplace = True)\nX_test['tot_cur_bal'].fillna(X_test['tot_cur_bal'].mean(), inplace = True)\nX_test['date_diff'].fillna(X_test['date_diff'].mean(), inplace = True)\nX_test['addr_state'].fillna(0, inplace = True)","45278ab7":"df_train[\"grade\"].value_counts()","ac7c3cf6":"#\u65e5\u4ed8\u30c7\u30fc\u30bf\u304b\u3089\u5dee\u5206\u3092\u7b97\u51fa\nfrom datetime import datetime as dt\na = pd.to_datetime(X_train['issue_d'])\nb = pd.to_datetime(X_train['earliest_cr_line'])\nX_train['date_diff'] = abs(b-a).dt.days\n\na = pd.to_datetime(X_test['issue_d'])\nb = pd.to_datetime(X_test['earliest_cr_line'])\nX_test['date_diff'] = abs(b-a).dt.days","7cddf990":"#\u300cemp_title\u300d\u304cNaN\u306e\u30c7\u30fc\u30bf\u306b\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\nX_train.loc[X_train.emp_title.notnull(), 'emp_title_nanflg'] = 0\nX_train['emp_title_nanflg'] = X_train['emp_title_nanflg'].fillna(1)\nX_test.loc[X_test.emp_title.notnull(), 'emp_title_nanflg'] = 0\nX_test['emp_title_nanflg'] = X_test['emp_title_nanflg'].fillna(1)","4282bd1f":"#\u5217\u6570\u3092\u63c3\u3048\u308b\nfor col in X_train.columns:\n    if col in X_test.columns:\n        X_test[col] = X_test[col]\n    else:\n        X_test[col] = int(0)\n        \nfor col in X_test.columns:\n    if not col in X_train.columns:\n        X_test.drop([col], axis = 1, inplace = True)","964b4075":"#\u30d3\u30f3\u5206\u5272\nX_test['loan_amnt'] = pd.cut(X_test['loan_amnt'], [0, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000, 102000], labels = [0, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000], right = False).astype(float)","2e2ba6e8":"#\u65e5\u4ed8\u306e\u5143\u30c7\u30fc\u30bf\u5217\u3092\u524a\u9664\u3059\u308b\nX_train.drop(['issue_d' ,'earliest_cr_line'], axis = 1, inplace = True)\nX_test.drop(['issue_d' ,'earliest_cr_line'], axis = 1, inplace = True)","7b331911":"X_train.head(10)","5c30789e":"#\u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u3067\u5404\u5217\u3092\u7f6e\u63db\nX_test[num_cols] = scaler.transform(X_test[num_cols])","f02b1506":"#\u65e5\u4ed8\u306e\u5143\u30c7\u30fc\u30bf\u5217\u3092\u524a\u9664\u3059\u308b\nX_test.drop(['issue_d' ,'earliest_cr_line'], axis = 1, inplace = True)","adbbe96f":"X_test.head()","f3e329e0":"plt.hist(df_test.loan_amnt,normed=True)","f047f85e":"from sklearn.preprocessing import OneHotEncoder\ncat_cols = ['grade', 'sub_grade', 'home_ownership']\nencoder = OneHotEncoder(handle_unknown='ignore')\nencoder.fit(X_train[cat_cols])","85cab798":"df_train.ConvertedSalary.mean()","89079cfb":"> print(X_train.isnull().any())","bcbecfea":"print(X_train.isnull().values.sum() != 0)","50284118":"#\u4e88\u6e2c\npredict = clf.predict_proba(X_test)[:,1]","88ed9156":"#\u4e88\u6e2c\nclf.fit(X_train, y_train)\npredict = clf.predict_proba(X_test)[:,1]","20d40a37":"#\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30cb\u30f3\u30b0\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_train_ex,df_train_re,train_size = 0.80)","54370f4a":"#\u4e88\u6e2c\u7528\u30c7\u30fc\u30bf\u3092\u6295\u5165\nX_test = df_test","8420986c":"#\u30ab\u30c6\u30b4\u30ea\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aOne-hot Encoding\nX_test = pd.get_dummies(columns = ['grade'], data = X_test)\nX_test = pd.get_dummies(columns = ['sub_grade'], data = X_test)\nX_test = pd.get_dummies(columns = ['home_ownership'], data = X_test)\nX_test = pd.get_dummies(columns = ['purpose'], data = X_test)\nX_test = pd.get_dummies(columns = ['addr_state'], data = X_test)\nX_test = pd.get_dummies(columns = ['initial_list_status'], data = X_test)\n#X_test = pd.get_dummies(columns = ['application_type'], data = X_test)","4d0a092c":"X_test.head(10)","d9319e7d":"#\u30ab\u30e9\u30e0\u540d\u53d6\u5f97\nnum_cols = []\nfor col in X_test.columns:\n    num_cols.append(col)\n    \nprint(num_cols)","467c6f7f":"df_train[df_train.loan_condition==0].loan_condition","b8131b9c":"#\u30ab\u30e9\u30e0\u540d\u53d6\u5f97\nenc_cols = []\nfor col in X_test.columns:\n    enc_cols.append(col)\n    \nprint(enc_cols)","96fc313b":"#\u884c\u3054\u3068\u306e\u6b20\u640d\u5024\u6570\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\nX_test['nan_sum'] = X_test.isnull().sum(axis = 1)","d8e34d9a":"X_train[cat_cols] = encoder.transform(X_train[cat_cols])","1aaeced2":"plt.hist(df_train.loan_amnt,normed=True)","9d40ec9e":"import matplotlib.pyplot as plt","2b497836":"#\u6570\u5024\u3068\u6587\u5b57\u5217\u304c\u6df7\u5728\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304b\u3089\u3001\u6570\u5024\u306e\u307f\u629c\u7c8b\nX_test['emp_length'] = X_test['emp_length'].str.extract('([0-9]+)').astype(float)\nX_test['zip_code'] = X_test['zip_code'].str.extract('([0-9]+)')","ed1146ee":"#\u30d3\u30f3\u5206\u5272\nX_train['loan_amnt'] = pd.cut(X_train['loan_amnt'], [0, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000, 102000], labels = [0, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000], right = False).astype(float)\nX_test['loan_amnt'] = pd.cut(X_test['loan_amnt'], [0, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000, 102000], labels = [0, 3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000], right = False).astype(float)","fec3be34":"#\u30c6\u30ad\u30b9\u30c8\u578b\u7279\u5fb4\u91cf\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff1aTFIDF\n#\u30c6\u30ad\u30b9\u30c8\u5217\u306e\u307f\u629c\u304d\u51fa\u3059\nTXT1_test = X_test['emp_title']\nTXT2_test = X_test['title']\n\n#\u30c6\u30ad\u30b9\u30c8\u5217\u3092\u524a\u9664\u3059\u308b\nX_test.drop(['emp_title' ,'title'], axis = 1, inplace = True)","bed32d6d":"****X_train","ff67dc54":"#\u65e5\u4ed8\u30c7\u30fc\u30bf\u304b\u3089\u5dee\u5206\u3092\u7b97\u51fa\na = pd.to_datetime(X_test['issue_d'])\nb = pd.to_datetime(X_test['earliest_cr_line'])\nX_test['date_diff'] = abs(b-a).dt.days","cb22ef43":"X_train.head()","5b824738":"#\u30e2\u30c7\u30eb\u69cb\u7bc9\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom tqdm import tqdm_notebook as tqdm\n\nclf = GradientBoostingClassifier()\nclf.fit(X_train, y_train)","c6496c44":"**===\u4e88\u6e2c\u7528\u30c7\u30fc\u30bf\u4f5c\u6210========================================================**","e6a0d84b":"df_test[\"grade\"].value_counts()"}}