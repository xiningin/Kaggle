{"cell_type":{"31c4db4b":"code","7337ee26":"code","a588bf28":"code","04ef1072":"code","194bbf70":"code","59d2b9ec":"code","73897a47":"code","c0426715":"code","124a9cbb":"code","d6fbdf10":"code","0bd55989":"code","8ffb69d9":"code","94f019db":"code","bd5ce145":"code","62bde20c":"markdown","38f0c9f1":"markdown","61f338f0":"markdown"},"source":{"31c4db4b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nimport h5py\nimport os\nprint(os.listdir(\"..\/input\"))","7337ee26":"filename = '..\/input\/FlowerColorImages.h5'\nf = h5py.File(filename, 'r')\n\n# List all groups\nprint(\"Keys: %s\" % f.keys())\na_group_key = list(f.keys())[0]\n\n\n# Get the training data\nh5_images = list(f['images'])\nh5_labels = list(f['labels'])\n\nplt.imshow(h5_images[0])  # graph it\nplt.show()","a588bf28":"h5_training_data = []\ntrain_y = pd.Series(h5_labels)\nIMG_SIZE = 50\n\n\ndef h5_create_training_data():\n    for img in h5_images:\n        try:\n            new_img_array = cv2.resize(img, (IMG_SIZE, IMG_SIZE))  # resize to normalize data size\n            h5_training_data.append(new_img_array)\n        except Exception as e:  # in the interest in keeping the output clean...\n            print(e)\n\n        \nh5_create_training_data()\nprint(len(h5_training_data))","04ef1072":"h5_train_X = np.array(h5_training_data).reshape(-1, IMG_SIZE, IMG_SIZE, 3)\nh5_train_X.shape","194bbf70":"flowers = pd.read_csv(\"..\/input\/flower_images\/flower_images\/flower_labels.csv\")\n\nflowers.head()","59d2b9ec":"imgs = flowers['file']\ntraining_data = []\ny = flowers['label'].values\n\ndef create_training_data():\n    img_path = \"..\/input\/flower_images\/flower_images\/\" \n    \n    for im in imgs:\n        try:\n            img_array = cv2.imread(os.path.join(img_path,im))  # convert to array\n            new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # resize to normalize data size\n            training_data.append(new_array)\n        except Exception as e:  # in the interest in keeping the output clean...\n            print(e)\n\ncreate_training_data()\nprint(len(training_data))","73897a47":"flower_image = cv2.imread(\"..\/input\/flower_images\/flower_images\/\" + imgs[0])\nrgb_flower_image = cv2.cvtColor(flower_image, cv2.COLOR_BGR2RGB)\nplt.figure(figsize=(3,3))\nplt.imshow(rgb_flower_image);","c0426715":"Data = np.array(training_data).reshape(-1, IMG_SIZE, IMG_SIZE, 3)\nData.shape","124a9cbb":"x_train, x_test, y_train, y_test = train_test_split(Data, y, \n                                                    test_size = 0.2, random_state = 1)\n[x_train.shape, y_train.shape, x_test.shape, y_test.shape]","d6fbdf10":"n = int(len(x_test)\/2)\nx_valid, y_valid = x_test[:n], y_test[:n]\nx_test, y_test = x_test[n:], y_test[n:]\nx_train.shape, x_test.shape, x_valid.shape, y_train.shape, y_test.shape, y_valid.shape","0bd55989":"x_train = x_train.astype('float32')\/255\nx_test = x_test.astype('float32')\/255\nx_valid = x_valid.astype('float32')\/255\n\nc_y_train = to_categorical(y_train, 10)\nc_y_test = to_categorical(y_test, 10)\nc_y_valid = to_categorical(y_valid, 10)\n\n[x_train.shape, c_y_train.shape, x_test.shape, c_y_test.shape, x_valid.shape, c_y_valid.shape]","8ffb69d9":"# CNN\ndef cnn_mc_model():\n    model = Sequential()\n\n    model.add(Conv2D(32, (5, 5), padding='same', input_shape=x_train.shape[1:]))\n    model.add(Activation('relu'))\n    \n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(96, (5, 5)))\n    model.add(Activation('relu'))\n    \n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n#     model.add(Flatten())\n    model.add(GlobalAveragePooling2D())\n    \n    model.add(Dense(512, activation='tanh'))\n    model.add(Dropout(0.25)) \n    \n#    model.add(Dense(256, activation='tanh'))\n#    model.add(Dropout(0.25)) \n    \n    model.add(Dense(128, activation='tanh'))\n    model.add(Dropout(0.25)) \n\n    model.add(Dense(10))\n    model.add(Activation('softmax'))\n\n    model.compile(loss='categorical_crossentropy', optimizer='nadam', metrics=['accuracy'])\n    \n    return model\n\ncnn_mc_model = cnn_mc_model()","94f019db":"cnn_mc_history = cnn_mc_model.fit(x_train, c_y_train, \n                                  epochs=50, batch_size=64, verbose=2,\n                                  validation_data=(x_valid, c_y_valid))","bd5ce145":"cnn_mc_test_score = cnn_mc_model.evaluate(x_test, c_y_test)\ncnn_mc_test_score","62bde20c":"> **Training and Prediction**","38f0c9f1":"> **Prepare Training Data**","61f338f0":"> **Prepare Training Data using h5 File**"}}