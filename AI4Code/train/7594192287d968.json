{"cell_type":{"2ef6578e":"code","2efb792a":"code","3dfc8984":"code","ab5e8b4b":"code","83bcb0f8":"code","fc430675":"code","68aab707":"code","bf5933de":"code","b0218f97":"code","68321df3":"code","9c6aa636":"code","074518b5":"code","ef3282a3":"code","7629b123":"code","0b2a5c44":"code","7f99b1d9":"code","9058c0fc":"code","0ea6a6f7":"code","5c2e5219":"code","7c9b8803":"code","22886db4":"code","d29d9e3b":"code","ea656488":"code","39029e54":"code","6a4f3916":"code","b73e12e7":"code","ac932e1d":"code","d41e6981":"code","9d314312":"code","024df568":"code","80f555cc":"code","91259059":"code","a28ac811":"code","c45c843a":"code","80c72465":"code","94322790":"code","e80017b4":"code","47bea0f1":"code","3fb5dc01":"code","b6c1a1ff":"code","682492f5":"code","1f0f52b1":"code","1f0be90d":"code","c869208f":"code","f4319e06":"code","f608a172":"code","6d49ee66":"code","e0367e42":"markdown","b5bf7f66":"markdown","d43ec29f":"markdown","6f18e87f":"markdown","737799b9":"markdown","5b1a1aaa":"markdown","f3a2147e":"markdown","dac1988e":"markdown","c3bea430":"markdown","4e391787":"markdown","7b956468":"markdown","76786203":"markdown","e881d547":"markdown","fe254c8b":"markdown","934f0fcb":"markdown","63e246c4":"markdown"},"source":{"2ef6578e":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2efb792a":"# Load training data\ndf_pump = pd.read_csv('..\/input\/pump-it-up-data-mining-the-water-table\/Pump_it_Up_Data_Mining_the_Water_Table_-_Training_set_values.csv')\ndf_pump","3dfc8984":"# Load training labels\ndf_label = pd.read_csv('..\/input\/pump-it-up-data-mining-the-water-table\/Pump_it_Up_Data_Mining_the_Water_Table_-_Training_set_labels.csv')\ndf_label","ab5e8b4b":"#plot the target variable to view\nplt.subplots(figsize=(10,6))\nax = sns.countplot(x=df_label['status_group'])\nfor p in ax.patches:\n        ax.annotate('{:.2f}%'.format(p.get_height()*100\/len(df_label)), (p.get_x()+0.3, p.get_height()*0.5))","83bcb0f8":"# Merge labels with main data for ease in subsequent data clearning & transformation processes\ndf_pump = df_pump.merge(df_label, how='inner', on='id')","fc430675":"#Get info on columns, and data types\ndf_pump.info()","68aab707":"# Check unique count of respective columns. \n# This will help in identifying categorical & non-categorical data\ndf_pump.nunique()","bf5933de":"df_pump.isnull().sum()\/len(df_pump)*100\n","b0218f97":"# Get visual sense of null data\nplt.subplots(figsize=(15,8))\nsns.heatmap(df_pump.isnull())","68321df3":"# Describe all columns to get top frequencies, min\/max, means, deviations\ndf_pump.describe(include='all').T","9c6aa636":"#df_pump[df_pump.amount_tsh==0]['amount_tsh'].count()\n#len(df_pump[df_pump.public_meeting.isnull()==True]) -> 3334\n#df_pump.recorded_by.nunique()\n\n#df_pump.scheme_name\n#df_pump.scheme_name.nunique()\n#len(df_pump[df_pump.scheme_name.isnull()==True]) -> 28166\n\n#df_pump.permit -> True\/False\n#len(df_pump[df_pump.permit.isnull()==True]) -> 3056\n\n#df_pump.construction_year.nunique() -> 55 years\n#max(df_pump.construction_year) -> 2013\n#len(df_pump[df_pump.construction_year==0]) -> 20709\n\n#df_pump.construction_year.nunique() -> 55 years\n#max(df_pump.construction_year) -> 2013\n#len(df_pump[df_pump.construction_year==0]) -> 20709\n","074518b5":"# Removing columns as:\n    # amount_tsh -> 75% are zeros and has outliers\n    # wpt_name -> free text, mostly nuls\n    # latitude, longitude -> as other geographic locations available\n    # num_private -> no clue, almost no data\n    # subvillage -> will use district code\n    # region -> will use region code\n    # lga, ward -> yet another geographic locations\n    # recorded_by -> just one value\n    # scheme_name -> more than 50% null, free text, will use scheme management\n    # extraction_type & extraction_type_class -> will use extraction_type_group\n    # management_group -> will use management\n    # payment -> will use payment_type\n    # water_quality -> will use quality_group\n    # quantity -> will use quantity_group\n    # source_type, source_class -> will use source\n    # waterpoint_type -> will use waterpoint_type_group\n    \ndf_pump = df_pump.drop(['amount_tsh','wpt_name','latitude','longitude','num_private','subvillage',\n                        'region','lga','ward','recorded_by','scheme_name','extraction_type',\n                        'extraction_type_class','management_group','payment','water_quality',\n                        'quantity','source_type','source_class','waterpoint_type'], axis=1)    ","ef3282a3":"df_pump = df_pump.dropna()\ndf_pump","7629b123":"# Current counts of funder & installer\n[df_pump['funder'].nunique(), df_pump['installer'].nunique()]","0b2a5c44":"df_fgb = df_pump.groupby(['funder'], as_index=False).count()[['funder', 'id']]\ndf_fgb","7f99b1d9":"# Funders with less than 5 pumps, will be renamed to Other\nother_funders = df_fgb[df_fgb.id<5].funder.unique()\ndf_pump['funder'] = df_pump['funder'].apply(lambda x : x if (x not in other_funders)  else 'Other')","9058c0fc":"# Installers with less than 5 pumps, will be renamed to Other\ndf_igb = df_pump.groupby(['installer'], as_index=False).count()[['installer', 'id']]\nother_installers = df_igb[df_igb.id<5].installer.unique()\ndf_pump['installer'] = df_pump['installer'].apply(lambda x : x if (x not in other_installers)  else 'Other')","0ea6a6f7":"# Cleanup\ndel df_fgb\ndel df_igb\n\n# View reduced counts\n[df_pump['funder'].nunique(), df_pump['installer'].nunique()]","5c2e5219":"df_pump['date_recorded'].max()","7c9b8803":"df_pump['construction_year'].max()","22886db4":"# We have date fields as date_recorded and construction_year, will consider the later one\ndf_pump['construction_year'].unique()","d29d9e3b":"# create a new feature 'age' relative to the max construction year\ndf_pump['age'] = df_pump['construction_year'].apply(lambda x: (2013 - x) if x != 0 else 0 )\n\n# review relation with recorded date\ndf_pump[['age', 'construction_year', 'date_recorded']].drop_duplicates()","ea656488":"df_pump.age.describe()","39029e54":"# There are many age values, will group them for better analysis\ndef get_age_group(x):\n    if x <= 17:\n        return 'new'\n    elif x > 17 and x <=34:\n        return 'middle'\n    else:\n        return 'old'\n\n# Create new feature age_group\ndf_pump['age_group'] = df_pump['age'].apply(get_age_group)\n\n# Visualize Relation\nplt.subplots(figsize=(12,8))\nsns.countplot(x=df_pump['age_group'], hue=df_pump['status_group'])\nplt.title('Age Group Vs Water-pump Status')\nplt.show()","6a4f3916":"df_pump.population.describe()","b73e12e7":"# Max value and value of 75% population indicates outliers as well as very low population mostly\n# Visualize through boxplot\nsns.boxplot(x=df_pump.population)","ac932e1d":"print('Outlier for population =', df_pump[df_pump.population > 10000].population.tolist() )","d41e6981":"# Create Population Group to better assess the sparse data\ndef get_population_group(x):\n    if x <= 500:\n        return 'low'\n    else:\n        return 'dense'\n    \ndf_pump['population_group'] = df_pump['population'].apply(get_population_group)\n\n# Visualize Relation\nplt.subplots(figsize=(12,8))\nsns.countplot(x=df_pump['population_group'], hue=df_pump['status_group'])\nplt.title('Population Group Vs Water-pump Status')\nplt.show()","9d314312":"def plot_counts(featureX):\n    plt.subplots(figsize=(18,8))\n    sns.set(font_scale=1)\n    sns.countplot(x=df_pump[featureX], hue=df_pump['status_group'])\n    plt.title(f'{featureX} Vs Water-pump Status')\n    plt.show()\n    return\n\n# Management of Waterpoint\nplot_counts('management')\n\n# Payment Type of Waterpoint\nplot_counts('payment_type')\n\n# Water source of Waterpoint\nplot_counts('source')\n\n# Water source of Waterpoint\nplot_counts('waterpoint_type_group')","024df568":"from sklearn.feature_selection import SelectKBest","80f555cc":"from sklearn import preprocessing\n\nencoder = preprocessing.LabelEncoder()\ncategorical_features = ['funder','installer','basin', 'public_meeting', 'scheme_management', 'permit', \n                        'extraction_type_group', 'management', 'payment_type', 'quality_group', 'quantity_group', \n                        'source', 'waterpoint_type_group', 'age_group', 'population_group', 'status_group']\n\n# Copy status group labels\ndf_pump['status_group_labels'] = df_pump['status_group']\n\n# Encode values\ndf_pump[categorical_features] = df_pump[categorical_features].apply(encoder.fit_transform)","91259059":"df_pump.describe(include='all').T","a28ac811":"# Visualize Correlation with features Matrix \ncorrMatrix = df_pump[['funder', 'gps_height', 'installer', 'basin', 'region_code', 'district_code', \n            'scheme_management', 'permit', 'extraction_type_group', 'management', 'payment_type', 'quality_group', 'quantity_group', 'source',\n            'waterpoint_type_group', 'construction_year', 'age_group', 'population_group', 'status_group']].corr()\nplt.subplots(figsize=(18,12))\nsns.heatmap(corrMatrix, annot=True, fmt='.1g')\nplt.title('Correlation of Features Matrix')\nplt.show()","c45c843a":"#Prepare list of features for training and target for prediction\nfeatures = ['funder', 'gps_height', 'installer', 'basin', 'region_code', 'district_code', \n            'scheme_management', 'permit', 'extraction_type_group', 'management', 'payment_type', 'quality_group', 'quantity_group', 'source',\n            'waterpoint_type_group', 'age_group', 'population_group'] \n\ntarget = ['status_group']\ndf_pump_X = df_pump[features]\ndf_pump_Y = df_pump[target]","80c72465":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n","94322790":"# random_state = 1, to get same split in case of re-run\n# startify = target, to get split containing each type of class proportional to origingal dataset\nX_train, X_test, y_train, y_test = train_test_split(df_pump_X, df_pump_Y, \n                                                    random_state=1, stratify= df_pump_Y, \n                                                    test_size = 0.33)\nprint (X_train.shape, y_train.shape)\nprint (X_test.shape, y_test.shape)","e80017b4":"rf_classifier = RandomForestClassifier()\nrf_classifier.fit(X_train, y_train.values.ravel())","47bea0f1":"y_predicted = rf_classifier.predict(X_test)","3fb5dc01":"confusion_matrix(y_test, y_predicted)","b6c1a1ff":"print(classification_report(y_test, y_predicted))","682492f5":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'n_estimators' : [301,401,501],\n    'max_depth' : [11,21,31],    \n    'max_features' : ['sqrt','log2']\n}\n\ncv = GridSearchCV(estimator=rf_classifier, param_grid=param_grid, cv=5, n_jobs=-1)\ncv.fit(X_train, y_train.values.ravel())","1f0f52b1":"cv.best_params_","1f0be90d":"# Predict again with the values of best parameters\nrf_classifier_bst = RandomForestClassifier(n_estimators=501, n_jobs=-1,max_depth=21, max_features='log2', bootstrap=True, criterion='gini')\nrf_classifier_bst.fit(X_train, y_train.values.ravel())\ny_predict_bst = rf_classifier_bst.predict(X_test)","c869208f":"# Confusion Matrix -> Review where model made mistakes \n# Like False positives, False Negatives etc.\n\ncnf_matrix = confusion_matrix(y_test, y_predict_bst)\ncnf_matrix","f4319e06":"cnf_matrix = cnf_matrix.astype('float')  \/ cnf_matrix.sum(axis=1)[:, np.newaxis]\n\n# Build the plot\nplt.figure(figsize=(12,7))\nsns.set(font_scale=1.2)\nsns.heatmap(cnf_matrix, annot=True, cmap=plt.cm.Greens, linewidths=0.2)\n\n# Add labels to the plot\nclass_names = ['Functional', 'Needs Repair', 'Non-Functional']\ntick_marks = np.arange(len(class_names))\ntick_marks2 = tick_marks + 0.5\nplt.xticks(tick_marks, class_names, rotation=25)\nplt.yticks(tick_marks2, class_names, rotation=0)\nplt.xlabel('Predicted Status')\nplt.ylabel('True Status')\nplt.title('Confusion Matrix Normalized for predicted Waterpump statuses')\nplt.show()","f608a172":"# Get Summary Report of Prediction Metrices\nprint(classification_report(y_test, y_predict_bst, target_names=class_names))","6d49ee66":"# Formatting Classification Report\nclf_rpt = classification_report(y_test, y_predict_bst, target_names=class_names, output_dict=True)\n\n# .iloc[:-1, :] to exclude support\nplt.figure(figsize=(12,7))\nsns.heatmap(pd.DataFrame(clf_rpt).iloc[:-1, :].T, annot=True)\nplt.title ('Classification Report')\nplt.show()","e0367e42":"**Analyzing Relation with Population of the Waterpoint**","b5bf7f66":"# Encoding Categorical Variables ","d43ec29f":"> > It seems there isn't any obvious relation of the status of the waterpoint and population around it","6f18e87f":"**Limiting funder & installer categorical values**","737799b9":"**Analyzing Relation with Age of the Waterpoint**","5b1a1aaa":"**Exploring relation with other variables: Managment, Payment Type, Source & Waterpoint_Type**","f3a2147e":"# Water Pump Classfication\n\n**Research Question**\n* Identify which factors affect waterpumps and in what way,and predict waterpump's status so that it can help authorities improve maintenance operations and ensure availability of water to all communities in Tanzania\n\n**DataSet**\n\n* The dataset is from the Taarifa, which aggregates data from the Tanzania Ministry of Water.\n[Pump it Up: Data Mining the Water Table](https:\/\/www.drivendata.org\/competitions\/7\/pump-it-up-data-mining-the-water-table\/page\/24\/)","dac1988e":"# Load Data & Inspect\nThe dataset has following:\n* Training set values\n* Trainng set labels\n* Test set values\n\nI will be working on Training data","c3bea430":"**Observations:**\n* Certain columns are either grouped or encoded values of another column e.g: quantity vs quantity_group, region vs region_code\n* Some look like free texts or too many nulls, or just having zeros. e.g: wpt_name, scheme_name, amount_tsh, num_private\n* Some categorical variables have too many unique values\n\n**Strategy**\n1. Keep one of the columns which are either grouped or encoded\n1. Drop columns with mostly nulls or zeros\n1. Keep top 10-15 of the non-categorical data like funder, installer etc.\n","4e391787":"# Reviewing Model Performance","7b956468":"# Tuning Hyperparameter of Classifier\n\n**Applying Grid Search**","76786203":"# Analyze Relations & Create New Features\n# \nMaking some assumptions about the features that could play key role:\n* Age of the waterpoint -> older ones might need more repairs\n* Population around pump -> probably dense population around waterpoint will cause heavy usage and require more maintenance\n* How the waterpoint is managed\n* The source of the water\n* Payment type -> what or how the water costs are paid\n* Type of Waterpoint -> Probably certain types need more maintenance","e881d547":"# Cleaning & Transforming Data","fe254c8b":"> There are 3 types of statuses with different percentages. \nFunctional needs repair is lowest. \nThe visualization indicates that classess are imbalanced","934f0fcb":"# Train Model & Predict","63e246c4":"**Drop NaN values**"}}