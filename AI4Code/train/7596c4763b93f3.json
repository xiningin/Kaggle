{"cell_type":{"cefe1e4d":"code","d9285348":"code","b0832de1":"code","207ba36f":"code","92205d81":"code","5dbe422f":"code","68aaa70d":"code","7f312b24":"code","96b38a98":"code","02c39c24":"code","7ef9ea3e":"code","61b14f33":"code","bf4f71b5":"code","e46c2dec":"code","fb1e7bf0":"code","08c429bc":"markdown"},"source":{"cefe1e4d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import  datasets","d9285348":"#col_name= ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']","b0832de1":"dib = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")# , names=col_name","207ba36f":"dib.columns","92205d81":"X = dib.iloc[:,:-1].values\ny = dib.iloc[:,-1].values","5dbe422f":"print(X.shape, y.shape)","68aaa70d":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.31, random_state=1) \n\n","7f312b24":"#Import knearest neighbors Classifier model\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Create KNN Classifier\nknn = KNeighborsClassifier()\n\n#Train the model using the training sets\nknn.fit(X_train, y_train)\n\n#Predict the response for test dataset\ny_pred = knn.predict(X_test)\ny_pred_train=knn.predict(X_train)","96b38a98":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy Test :\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Accuracy Train:\",metrics.accuracy_score(y_train, y_pred_train))","02c39c24":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","7ef9ea3e":"k_range = range(1, 25)\n\n# We can create Python dictionary using [] or dict()\nscores = []\n\n# We use a loop through the range 1 to 26\n# We append the scores in the dictionary\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    scores.append(metrics.accuracy_score(y_test, y_pred))\n\nprint(scores)","61b14f33":"# import Matplotlib (scientific plotting library)\nimport matplotlib.pyplot as plt\n\n# allow plots to appear within the notebook\n%matplotlib inline\n\n# plot the relationship between K and testing accuracy\n\nplt.plot(k_range, scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Testing Accuracy')","bf4f71b5":"from sklearn.model_selection import GridSearchCV\n#create new a knn model\nknn2 = KNeighborsClassifier()\n#create a dictionary of all values we want to test for n_neighbors\nparam_grid = {'n_neighbors': np.arange(1, 25)}\n#use gridsearch to test all values for n_neighbors\nknn_gscv = GridSearchCV(knn2, param_grid, cv=5)\n#fit model to data\nknn_gscv.fit(X, y)","e46c2dec":"#check top performing n_neighbors value\nprint(knn_gscv.best_params_)\n\n#check mean score for the top performing value of n_neighbors\nprint(knn_gscv.best_score_)","fb1e7bf0":"import seaborn as sns\ncorr = dib.corr()\nprint(corr)\nsns.heatmap(corr, \n         xticklabels=corr.columns, \n         yticklabels=corr.columns)","08c429bc":"6. Use diabetes dataset. The datasets consist of several medical predictor (independent) variables and one target (dependent) variable, Outcome. \n- Independent variables include the number of pregnancies the patient has had, their BMI, insulin level, age, and so on. Use k-nn to build the classification model. Evaluate your model performance. Use \u201cgridsearchcv( )\u201d to find the best value of \u2018k\u2019."}}