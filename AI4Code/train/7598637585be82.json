{"cell_type":{"59e86734":"code","a40440d1":"code","72e2b610":"code","f0de79f0":"code","c3c290fc":"code","1df24c49":"code","da3b6791":"code","15c282dc":"code","b8b4300c":"code","083de8d7":"code","bb488fcb":"code","e2f7111e":"code","8b8378fc":"code","d754a3a4":"code","00fbcf91":"code","cd255245":"code","eab33706":"code","969ca1f3":"code","291e8815":"code","6a10544c":"markdown","e56d09ef":"markdown","bfdf9549":"markdown","252547b0":"markdown","697eaa8f":"markdown","e7ab227f":"markdown","ece6a31b":"markdown","7f4ba283":"markdown","645533ef":"markdown","8afff7b9":"markdown","60f9ea44":"markdown","76108488":"markdown","551138d0":"markdown","3dfa83c5":"markdown","253621e3":"markdown","b3e24972":"markdown"},"source":{"59e86734":"#import the basic liberaries for EDA\nimport numpy as np\nimport pandas as pd\nimport ast\nfrom collections import Counter\n\n#Plotting liberaries\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\nimport missingno as msno #https:\/\/github.com\/ResidentMario\/missingno\n\n# upsupervised liberaries\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\n\n# Stop warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#read the df\ndf = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\n#print sample of the Data frame\ndf.head(2)","a40440d1":"msno.matrix(df); #quickly visually pick out patterns in data completion.","72e2b610":"print ('Sample of Geners Column\\n'  , df.genres[0])\nprint (\"_\"*40)","f0de79f0":"# Cridet for this function goes to this notebook\n# https:\/\/www.kaggle.com\/yashsaxena17\/movie-recommendation\ndef convert(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        L.append(i['name'])\n    return L","c3c290fc":"df['genres'] = df['genres'].apply(convert)\nprint ('Sample of Geners Column\\n'  , df.genres[0])\nprint (\"_\"*40)","1df24c49":"geners = Counter()\nfor i in range(df.shape[0]):\n    for j in df.genres[i]:\n        geners[j]+=1\nGeners_df = pd.DataFrame.from_dict(geners, orient='index').reset_index()\nGeners_df = Geners_df.rename(columns = {'index': 'Geners' ,0: 'Frequency'})\nGeners_df.head(10)","da3b6791":"generes_list = Geners_df.Geners.tolist()\n\nGeners_Vote_Average = {}\nGeners_Vote_Count = {}\nGeners_Popularity = {}\nGeners_budget = {}\nGeners_revenue = {}\n\n\n\nfor j in generes_list:\n    gener = []\n    for i in range (df.shape[0]):\n        if j in  df.genres[i]:\n            gener.append(df.vote_average[i])\n            Geners_Vote_Average[j] = sum(gener)\/len(gener)\n            \nfor j in generes_list:\n    gener = []\n    for i in range (df.shape[0]):\n        if j in  df.genres[i]:\n            gener.append(df.vote_count[i])\n            Geners_Vote_Count[j] = sum(gener)\/len(gener)\n            \nfor j in generes_list:\n    gener = []\n    for i in range (df.shape[0]):\n        if j in  df.genres[i]:\n            gener.append(df.popularity[i])\n            Geners_Popularity[j] = sum(gener)\/len(gener)\n\nfor j in generes_list:\n    gener = []\n    for i in range (df.shape[0]):\n        if j in  df.genres[i]:\n            gener.append(df.budget[i])\n            Geners_budget[j] = sum(gener)\/len(gener)\n\n            \nfor j in generes_list:\n    gener = []\n    for i in range (df.shape[0]):\n        if j in  df.genres[i]:\n            gener.append(df.revenue[i])\n            Geners_revenue[j] = sum(gener)\/len(gener)\n\n                                              \n\n\n                                              \nGeners_df['Average_Vote_Average'] = Geners_df.Geners.map(Geners_Vote_Average)\nGeners_df['Average_Vote_Count'] = Geners_df.Geners.map(Geners_Vote_Count)\nGeners_df['Average_Popularity'] = Geners_df.Geners.map(Geners_Popularity)\nGeners_df['Average_budget'] = Geners_df.Geners.map(Geners_budget)\nGeners_df['Average_revenue'] = Geners_df.Geners.map(Geners_revenue)\n# Round the Budget and revenue to the million\nGeners_df['Average_budget'] = Geners_df['Average_budget']\/1000000\nGeners_df['Average_revenue']  = Geners_df['Average_revenue'] \/1000000","15c282dc":"Geners_df.style.background_gradient(cmap='YlGnBu')","b8b4300c":"# Create dependant variables list to use it in for loop\ndependant_variables = ['Frequency', 'Average_Vote_Average', 'Average_Vote_Count',\n                       'Average_Popularity', 'Average_budget', 'Average_revenue']\n#Set the size of the horizontal bars\nh = np.array([0.4,0.4 ,0.4 ,0.4 ,0.4 ,0.4,0.4 ,0.4,\n             0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.7,0.8,1])\n#Set the Colors of the bars\nc = np.array(['lightgray','lightgray' ,'lightgray' ,'lightgray' ,'lightgray' ,'lightgray',\n              'lightgray' ,'lightgray',\n             'lightgray','lightgray','lightgray'\n              ,'lightgray','lightgray','lightgray','lightgray',\n              'lightgray','lightgray','gray','tomato','gold'])\n#Create the figure and the axis \nfig , ax = plt.subplots(nrows = 4, ncols = 2 , figsize = [12,30])\n#set the figure background color\nfig.patch.set_facecolor('#edf2fa')\n#Figure Title\nfig.suptitle('\\n\\nGenres Ranking Across Dependant Variables', fontfamily='serif',\n                   fontsize = 24 , fontweight='bold' )\n#for loop (axis and variable ) to generate the barh plot \nfor axes , variable in zip (ax.flatten() , dependant_variables):\n    #Sorting the Genres dataframe by virables\n    Geners_df = Geners_df.sort_values(by = variable )\n    #Barh plot using Matplotlib\n    axes.barh(Geners_df.Geners ,Geners_df[variable] , height = h  , color = c)\n    #set the axes background color\n    axes.set_facecolor('#edf2fa')\n    #set the x limit\n    mx = Geners_df[variable].max()*1.3\n    axes.set_xlim(0 , mx)\n    #Create a background diffrent color for the top three Genres\n    axes.axhspan(ymin = 16.3 , ymax = 19.7 , fc='#ff73d5', alpha=0.2 , zorder=0)\n    #remove the Axes Boundary except the Left side\n    for s in ['top', 'right', 'bottom']:\n         axes.spines[s].set_visible(False)\n    #add the notation on the bars\n    for patch in axes.patches:\n        try:\n            #try exepct technique was used becouse the axhspan has no attrebuite get_width nor get_height\n            bl = patch.get_xy()\n            x = 1.05 * patch.get_width() + bl[0]\n            y = 0.5 * patch.get_height() + bl[1] \n            axes.text(x,y,\"%d\" %(patch.get_width()),va='center',ha='center' , \n                      color = 'black',fontsize = 12, fontfamily='serif')\n        except:\n            #skip and go to next patch\n            continue\n    #Get it more clean and remove the useless ticks and labels\n    axes.set_xticks([])\n    axes.set_xlabel(\"\")\n    axes.set_ylabel(\"\")\n    axes.set_title(f\"Sorting of Genres according to {variable}\" , fontfamily='serif',\n                   fontsize = 12 , fontweight='bold')\n    #End of for loop\n    \n\n#Add some text on the visualization \nax[0,0].text(1270, 8, 'Drama ', fontsize=18, fontfamily='serif', color = 'Gold')\nax[0,0].text(750, 7, 'is the most genres produced ', fontsize=12, fontfamily='serif', color = '#ff73d5')\nax[0,0].text(750, 6, 'Next was Comedy and Thriller', fontsize=12,  fontfamily='serif', color = '#ff73d5');\n\n\nax[1,1].text(26, 6, 'Adventure',  fontsize=18,   fontfamily='serif', color = 'Gold')\nax[1,1].text(22, 5,  'stays on the top for both ', fontsize=12,  fontfamily='serif', color = '#ff73d5')\nax[1,1].text(22, 4, 'Popularity and vote counts', fontsize=12,  fontfamily='serif', color = '#ff73d5');\n\n\nax[2,0].text(30, 2,  'Animation , Adventure\\n     and Fantasy', fontsize=18,  fontfamily='serif', color = 'Gold')\nax[2,0].text(40, 0,  'Highest Budget \\nHighest revenue ', fontsize=14,  fontfamily='serif', color = '#ff73d5');\n\n#lets add some arrows\n#https:\/\/stackoverflow.com\/questions\/44526103\/matplotlib-draw-curved-arrow-that-looks-just-like-pyplot-arrow\nstyle = \"Simple, tail_width=0.5, head_width=6, head_length=9\"\nkw = dict(arrowstyle=style, color=\"Gold\")\na = patches.FancyArrowPatch((1870, 8.17), (2310, 18.9),connectionstyle=\"arc3,rad=.7\", **kw)\nax[0,0].add_patch(a)\na2 = patches.FancyArrowPatch((42, 5.30), (40, 18.9),connectionstyle=\"arc3,rad=.2\", **kw)\nax[1,1].add_patch(a2)\na3 = patches.FancyArrowPatch((60 , 4), (66, 18.9),connectionstyle=\"arc3,rad=.2\", **kw)\nax[2,0].add_patch(a3)\n\n# Create the arrow across two supblots\n#https:\/\/www.cilyan.org\/blog\/2016\/01\/23\/matplotlib-draw-between-subplots\/\n# 1. Get transformation operators for axis and figure\nax0tr = ax[1,0].transData # Axis 0 -> Display\nax1tr = ax[1,1].transData # Axis 1 -> Display\nfigtr = fig.transFigure.inverted() # Display -> Figure\n# 2. Transform arrow start point from axis 0 to figure coordinates\nptE = figtr.transform(ax0tr.transform((1430, 0.047)))\n# 3. Transform arrow end point from axis 1 to figure coordinates\nptB = figtr.transform(ax1tr.transform((42, -0.018)))\n# Place arrow in figure coord system\narrow = patches.FancyArrowPatch(ptB, ptE, transform=fig.transFigure, connectionstyle=\"arc3,rad=0.2\" , **kw)\n# 5. Add patch to list of objects to draw onto the figure\nfig.patches.append(arrow)\n\n\n# 1. Get transformation operators for axis and figure\nax0tr = ax[2,0].transData # Axis 0 -> Display\nax1tr = ax[2,1].transData # Axis 1 -> Display\nfigtr = fig.transFigure.inverted() # Display -> Figure\n# 2. Transform arrow start point from axis 0 to figure coordinates\nptB = figtr.transform(ax0tr.transform((63, -.03)))\n# 3. Transform arrow end point from axis 1 to figure coordinates\nptE = figtr.transform(ax1tr.transform((227, 0.048)))\n# Place arrow in figure coord system\narrow2 = patches.FancyArrowPatch(ptB, ptE, transform=fig.transFigure, connectionstyle=\"arc3,rad=0.2\" , **kw)\n# 5. Add patch to list of objects to draw onto the figure\nfig.patches.append(arrow2)\n\n# adding the scatter Plots\n\nsns.scatterplot(x = Geners_df.Average_Vote_Count , y = Geners_df.Average_Popularity  , \n           s = Geners_df.Average_budget*5 , hue =Geners_df.Geners , ax = ax[3,0] ,\n                style=Geners_df.Geners , legend = False , palette=\"Dark2\")\nax[3,0].set_facecolor('#edf2fa')\nfor s in ['top', 'right']:\n    ax[3,0].spines[s].set_visible(False)\nax[3,0].set_xticks([])\nax[3,0].set_yticks([])\nax[3,0].set_xlabel(\"Average Vote Counts\" ,fontsize=14,   fontfamily='serif')\nax[3,0].set_ylabel(\"Average Popularity\" , fontsize=14,   fontfamily='serif')\nax[3,0].text( -200,45 ,\"Plotting Scatter to find the Corelations Between Dependant Varaible\" , fontfamily='serif',\n                   fontsize = 18 , fontweight='bold')\n    \n    \n    \nsns.scatterplot(x = Geners_df.Average_budget , y = Geners_df.Average_revenue  , \n           s = Geners_df.Average_Popularity*5 , hue =Geners_df.Geners , ax = ax[3,1] ,\n                style=Geners_df.Geners , legend = \"full\" , palette=\"Dark2\")\nplt.legend(bbox_to_anchor=(-1.40, -.20), loc=\"lower left\", borderaxespad=0. , ncol=8 , \n          facecolor='#edf2fa' , framealpha=.01)\nax[3,1].set_facecolor('#edf2fa')\n\nfor s in ['top', 'right']:\n    ax[3,1].spines[s].set_visible(False)\nax[3,1].set_xticks([])\nax[3,1].set_yticks([])\nax[3,1].set_xlabel(\"Average_budget\" ,fontsize=14,   fontfamily='serif')\nax[3,1].set_ylabel(\"Average_revenue\" , fontsize=14,   fontfamily='serif');\n\n\nax[3,0].add_patch(plt.Rectangle((1200, 35), 600 , 50, color='#ff73d5', alpha=0.2 , zorder = 0))\n\n\nstyle = \"Simple, tail_width=0.5, head_width=6, head_length=9\"\nkw = dict(arrowstyle=style, color=\"Gold\")\nax[3,0].add_patch(patches.FancyArrowPatch((800, 38), (1200, 38) , **kw))\nax[3,0].text(50, 36,  'Adventure , Animation\\nFantasy , ScienceFiction', fontsize=18,  fontfamily='serif', color = 'Gold')\n                  \n\n    \n    \n    \n    \nax[3,1].add_patch(plt.Rectangle((60, 190),10 , 50, color='#ff73d5', alpha=0.2 , zorder = 0))\n\n\nstyle = \"Simple, tail_width=0.5, head_width=6, head_length=9\"\nkw = dict(arrowstyle=style, color=\"Gold\")\nax[3,1].add_patch(patches.FancyArrowPatch((30, 200), (60, 200) , **kw))\nax[3,1].text(5, 200,  'Animation , Adventure\\n       Fantasy', fontsize=18,  fontfamily='serif', color = 'Gold')\n  \n    \n    \n    \n##https:\/\/matplotlib.org\/stable\/gallery\/subplots_axes_and_figures\/demo_constrained_layout.html\n## To Be Continue\n","083de8d7":"#Building new data frame\ngeners_list = Geners_df.Geners.tolist()\ndf_new = df[['original_title' , 'genres' , 'popularity']]\ndf_new[geners_list] =0 ","bb488fcb":"#Get dummies for the genres\nfor i in range (df_new.shape[0]):\n    for j in  geners_list:\n        if j in df.genres[i]:\n            df_new[j] [i] = 1","e2f7111e":"#decomposing the features in 2d\nX = df_new.iloc[: , 3:].values\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(X)","8b8378fc":"#clustring using Kmean  - sklearn\nmodel = KMeans(n_clusters=150)\nmodel.fit(principalComponents)\n\nlabels = model.labels_\n\ndf_new['label'] = pd.DataFrame({'label':labels})","d754a3a4":"#Build the Recommendation Function\ndef recommend_10 (film ):\n    global df_new\n    df_new = df_new.sort_values(by = 'popularity' , ascending = False)\n    mark = df_new.loc[df_new['original_title'] == film, 'label'].iloc[0]\n    print (\"Label number : \"  , mark)\n    print (\"_\"*40)\n    print (\"\\nRecommended movies for {} : \".format(film))\n    print (\"_\"*40)\n    lst = df_new[df_new.label == mark]['original_title'][0:10].tolist()\n    for n , l in zip (range (1,11) , lst):\n        print ( n , \" : \" , l)","00fbcf91":"recommend_10 ('Mission: Impossible III' )","cd255245":"recommend_10 ('Minions' )","eab33706":"recommend_10 ('The Lord of the Rings: The Fellowship of the Ring' )","969ca1f3":"recommend_10 ('Titanic' )","291e8815":"recommend_10 ('Despicable Me' )","6a10544c":"<h2 style = \"background-color:powderblue; border: 1px solid black; text-align: center; \"> \n    <br>Unsupervised Task - Clustring movies based on the Genres only <br><br>\n    Building a recommended system based on Genres<br><br>","e56d09ef":"### The missing values in the home page and tagline will not effect my analysis ","bfdf9549":"<h2 style = \"background-color:SandyBrown; border: 1px solid black; text-align: center; \"> \n    <br>In this notebook I will focus on movies Genres as an independant variables  <br>\n    ","252547b0":"<h2 style = \"background-color:gray; border: 1px solid black; text-align: center; \"> \n    <br>Let's check the missing value using missingno liberary<br>\n    ","697eaa8f":"<strong><ul style = \"background-color:tomato; border: 1px solid black; \"> \n    <li> Most produced genres in the list : [Drama \/ Comedy]\n        <li> Most Vote counts goes to : [Adventure \/Science Fiction]\n            <li> Highest popularity : [Adventure \/ Animation]\n                <li> Highest Budget : [Animation \/ Advenure]\n                    <li> Highest Revenue : [Animation \/ Advenure]","e7ab227f":"<ul style = \"background-color:pink; border: 1px solid black; font-size:150%;\"> \n    <li> EDA for the Genres (Independant Varaible)\n     <li> Clustring and building a recommended movies based on Genres","ece6a31b":"<h2 style = \"background-color:powderblue; border: 1px solid black; text-align: center; \"> \n    <br>Conclusion of Genres Analysis<br>","7f4ba283":"## Get the frequency in Counter() and convert it to dataframe","645533ef":"<h2 style = \"background-color:powderblue; border: 1px solid black; text-align: center; \"> \n    <br>Generate a new Data frame <br> <br>Independant Variable : Genres.<br>","8afff7b9":"## Print the Final output","60f9ea44":"<h2 style = \"background-color:powderblue; border: 1px solid black; text-align: center; \"> \n    <br>Let's visualize the final Genres dataframe<br>","76108488":"<h2 style = \"background-color:powderblue; border: 1px solid black; text-align: center; \"> \n    <br>First: let's handel the pandas columns contain list[  ] of dicts{ } <br>\n    \n","551138d0":"## Create the Conversion function","3dfa83c5":"<h2 style = \"background-color:Tan; border: 1px solid black; text-align: center; \"> \n    <br>Thank you for visiting my notebook<br>","253621e3":"## Print sample of Genres columns ","b3e24972":"## Map the the dependant variables average of: <br><br>(vote_count , vote_average , Popularity , budget , revenue ) <br><br>from the Original df to the genres df"}}