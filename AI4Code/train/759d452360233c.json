{"cell_type":{"22f25a33":"code","b018a536":"code","1f3b51fe":"code","5abe6fc4":"code","55d9115b":"code","5e8324a4":"code","8303f2bc":"code","e4ee82b9":"code","37b23ad3":"code","9adad422":"code","1d0a2e53":"code","5e45f0cd":"code","755f9158":"code","ed419dad":"code","23ca6786":"code","fd8dbbb4":"code","9c357949":"markdown","9c14f403":"markdown","426a1cb0":"markdown","d1256021":"markdown","a1476645":"markdown","a75a51c8":"markdown","be87a94e":"markdown","879eee4b":"markdown","62aef252":"markdown","46521fda":"markdown","beac822d":"markdown","c2c91cd8":"markdown","2ab5b885":"markdown","21d8a92c":"markdown"},"source":{"22f25a33":"# Gerekli k\u00fct\u00fcphaneleri import ettim.\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import RobustScaler\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\n\n\nfrom collections import Counter\nfrom sklearn.datasets import make_classification\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","b018a536":"# veriyi import ettim\nchurn = pd.read_csv(\"..\/input\/churn-predictions-personal\/Churn_Predictions.csv\")\ndf=churn.copy()\ndf.head()","1f3b51fe":"df.info()","5abe6fc4":"df.describe().T","55d9115b":"# Row number de\u011fi\u015fkenini att\u0131m, indexi yeniden d\u00fczenledim.\ndf=df.drop(\"RowNumber\", axis=1)\ndf=df.reset_index(drop=True)\n\n# Gender ve Geography kategorik de\u011fi\u015fkenlerine one hot encoding uygulad\u0131m.\ndf=pd.get_dummies(df,columns=[\"Geography\",\"Gender\"], drop_first=True)\ndf.head()\n","5e8324a4":"df1=df.copy()\n\n# Age de\u011fi\u015fkeninde 18-30=1 , 30-40=2 ,40-50=3, 50-60=4, 60-92=5 olarak atad\u0131m\ndf1.loc[(df1[\"Age\"]>=18) & (df1[\"Age\"]<=30), \"Age\"]=1\ndf1.loc[(df1[\"Age\"]>30) & (df1[\"Age\"]<=40), \"Age\"]=2\ndf1.loc[(df1[\"Age\"]>40) & (df1[\"Age\"]<=50), \"Age\"]=3\ndf1.loc[(df1[\"Age\"]>50) & (df1[\"Age\"]<=60), \"Age\"]=4\ndf1.loc[(df1[\"Age\"]>60) & (df1[\"Age\"]<=92), \"Age\"]=5\n\n\n\n#kredi_skor_tablosu\ndef kredi_skor_tablosu(row):\n    \n    kredi_skoru = row.CreditScore\n    if kredi_skoru >= 300 and kredi_skoru < 500:\n        return (2)\n    elif kredi_skoru >= 500 and kredi_skoru < 601:\n        return (3)\n    elif kredi_skoru >= 601 and kredi_skoru < 661:\n        return (4)\n    elif kredi_skoru >= 661 and kredi_skoru < 781:\n        return (5)\n    elif kredi_skoru >= 851:\n        return (7)\n    elif kredi_skoru >= 781 and kredi_skoru < 851:\n        return (6)\n    elif kredi_skoru < 300:\n        return (1)\n    \ndf1 = df1.assign(credit_score_table=df1.apply(lambda x: kredi_skor_tablosu(x), axis=1))\n\n\n\n# emeklilik ile ilgili yeni bir de\u011fi\u015fken olu\u015fturdum.( Alm, \u0130sp =65 , \u0130talya=66)\n# retired\ndf1[\"retired\"]=df[\"Age\"]\n\ndf1.loc[(df1[\"retired\"]>=65) & (df1[\"Geography_Germany\"]==1), \"retired\"]=1\ndf1.loc[(df1[\"retired\"]>=65) & (df1[\"Geography_Spain\"]==1), \"retired\"]=1\ndf1.loc[(df1[\"retired\"]>=66) & (df[\"Geography_Spain\"]==0) & (df[\"Geography_Germany\"]==0), \"retired\"]=1\n\n\ndf1.loc[(df1[\"retired\"]<65) & (df1[\"Geography_Germany\"]==1), \"retired\"]=0\ndf1.loc[(df1[\"retired\"]<65) & (df1[\"Geography_Spain\"]==1), \"retired\"]=0\ndf1.loc[(df1[\"retired\"]<66) & (df[\"Geography_Spain\"]==0) & (df[\"Geography_Germany\"]==0), \"retired\"]=0\n\n\n# Tenure\/NumOfProducts\ndf1[\"Tenure\/NumOfProducts\"]=df1[\"Tenure\"]\/df1[\"NumOfProducts\"]\n\n\n# 405 de\u011ferinin alt\u0131ndakilerin hepsi churn olmu\u015f(20 de\u011fer), outlier gibi kenarda kalm\u0131\u015flar atmad\u0131m yeni de\u011fi\u015fken olu\u015fturdum\n#smallerthan405\ndf1[\"smallerthan405\"]=df[\"CreditScore\"]\n\ndf1.loc[(df1[\"smallerthan405\"]<405), \"smallerthan405\"]=1\ndf1.loc[(df1[\"smallerthan405\"]>405), \"smallerthan405\"]=0\n\n\n# NOP* isminde de\u011fi\u015fken olu\u015fturdum. Bu de\u011fi\u015fkeni, number of products'\u0131n her bir \u00fcr\u00fcn baz\u0131ndaki exit durumuna g\u00f6re s\u0131ralad\u0131m.\n# Mevcut number of products'\u0131 inceledi\u011fimde: NOP=1,mean=0.27    NOP=2,mean=0.07    NOP=3,mean=0.82    NOP=4,mean=1\ndf1[\"NOP*\"]=df[\"NumOfProducts\"]\ndf1.loc[(df1[\"NOP*\"]==2), \"NOP*\"]=1\ndf1.loc[(df1[\"NOP*\"]==1), \"NOP*\"]=2\ndf1.loc[(df1[\"NOP*\"]>2), \"NOP*\"]=3\n\n#Balance'\u0131 0 olanlar\u0131n hi\u00e7 exit olmad\u0131\u011f\u0131n\u0131 g\u00f6zlemledim. Bu nedenle yeni de\u011fi\u015fken ile Balance'\u0131 0 ve 0 olmayanlar \u015feklinde ay\u0131rd\u0131m.\n#Balance0\ndf1[\"Balance0\"]=df1[\"Balance\"]\ndf1.loc[(df1[\"Balance0\"]==0), \"Balance0\"]=0\ndf1.loc[(df1[\"Balance0\"]!=0), \"Balance0\"]=1\n\n\n# Tahmin edilen maa\u015f\u0131n ya\u015fla oran\u0131 olabilir diye d\u00fc\u015f\u00fcnd\u00fcm.18 ya\u015f\u0131na kadar para kazanmam\u0131\u015flard\u0131r dedim.\n# Fakat veri setinde en k\u00fc\u00e7\u00fck ya\u015f 18 oldu\u011fu i\u00e7in Age-17'ye b\u00f6ld\u00fcm.\n# Estimated Salary\/Age\ndf1[\"ES\/Age\"]=df1[\"EstimatedSalary\"]\/(df[\"Age\"]-17)\n\n\n# Tenure\/Age\ndf1[\"Tenure\/Age\"]=df1[\"Tenure\"] \/ (df[\"Age\"]-17)\n\n# Balance\/ ES\ndf1[\"Balance\/ES\"]=df1[\"Balance\"] \/ df1[\"EstimatedSalary\"]\n\n#Tahmin edilen maa\u015f\u0131 ayl\u0131\u011fa d\u00f6n\u00fc\u015ft\u00fcrd\u00fcm. Amac\u0131m vergileri de \u00e7\u0131kar\u0131p ayl\u0131k yal\u0131n maa\u015f bulmakt\u0131 ancak maa\u015f vergileri i\u00e7in \n#net rakamlar yerine aral\u0131klar buldu\u011fum i\u00e7in uygulamaya ge\u00e7iremedim.\n#Estimated Salary (monthly)\ndf1[\"EstimatedSalary\"]=df1[\"EstimatedSalary\"]\/12\n\n# Tenure'de 0 olan de\u011ferler vard\u0131, bu nedenle inf gelmemesi i\u00e7in 1 eklenmi\u015f haline b\u00f6ld\u00fcm.\n# ES\/Tenure \ndf1[\"ES\/Tenure\"]=df1[\"EstimatedSalary\"]\/(df1[\"Tenure\"]+1)\n\n# ES\/Score\ndf1[\"ES\/Score\"]=df1[\"EstimatedSalary\"]\/df1[\"credit_score_table\"]     \n\n# DROP FEATURE \n#Kredi skor s\u0131ralamas\u0131n\u0131 anlatan bir de\u011fi\u015fken olu\u015fturdu\u011fum i\u00e7in as\u0131l de\u011fi\u015fkeni veri setinden \u00e7\u0131kard\u0131m.\ndf1=df1.drop([\"CreditScore\"], axis=1)\ndf1=df1.drop([\"Tenure\"], axis=1)\ndf1=df1.drop([\"Balance\"], axis=1)\ndf1.head(3)","8303f2bc":"#Robust Scaler uygulayaca\u011f\u0131m de\u011fi\u015fkenleri se\u00e7tim.\ndf1_num=df1[[\"Age\",\"NumOfProducts\",\"EstimatedSalary\", \n             \"credit_score_table\",\"Tenure\/NumOfProducts\",\"NOP*\",\"ES\/Age\",\n             \"Tenure\/Age\",\"Balance\/ES\",\"ES\/Tenure\",\"ES\/Score\"]]\n\n# Scaling i\u015flemini uygulad\u0131\u011f\u0131m veri setine x_transformed ad\u0131n\u0131 verdim.\ncol=df1_num.columns\nx_transformed=pd.DataFrame(RobustScaler().fit(df1_num).transform(df1_num), columns=col)\nx_transformed.head()","e4ee82b9":"# Scale i\u015flemini yapt\u0131\u011f\u0131m ve yapmad\u0131\u011f\u0131m de\u011fi\u015fkenlerle -churn veri setindeki de\u011fi\u015fken s\u0131ras\u0131n\u0131 da dikkate alarak-\n# yeni bir dataframe olu\u015fturdum. Exited isimli y de\u011fi\u015fkenini ise koymad\u0131m. B\u00f6ylelikle ba\u011f\u0131ms\u0131z de\u011fi\u015fkenleri bir\n# dataframede toplam\u0131\u015f oldum. X ismini koydum.\nX=pd.concat([x_transformed.loc[:,\"Age\":\"NumOfProducts\"],df1.loc[:,\"HasCrCard\":\"IsActiveMember\"],\n             x_transformed.loc[:,\"EstimatedSalary\"], df1.loc[:,\"Geography_Germany\":\"Gender_Male\"],\n             x_transformed.loc[:, \"credit_score_table\"], df1.loc[:,\"retired\"],\n             x_transformed.loc[:,\"Tenure\/NumOfProducts\"],df1.loc[:,\"smallerthan405\"],\n             x_transformed.loc[:,\"NOP*\"],df1.loc[:,\"Balance0\"],\n             x_transformed.loc[:, \"ES\/Age\":\"ES\/Score\"]], axis=1)\nX.head(2)","37b23ad3":"# X' daha \u00f6nceden tan\u0131mlam\u0131\u015ft\u0131m, \u015fimdi ise y'yi tan\u0131mlad\u0131m. \ny=df1[\"Exited\"]\n\n#split i\u015flemi\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=12345)","9adad422":"# rf model kurulumu\nrf_model = RandomForestClassifier().fit(X_train,y_train)\ny_pred = rf_model.predict(X_test)\n\n# validasyon hatas\u0131, accuracy skoru, confusion matrix\ncv_results = cross_val_score(rf_model, X_train, y_train, cv = 10, scoring= \"accuracy\")\n\nprint(cv_results.mean())\nprint(accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","1d0a2e53":"# Feature importance'a bakt\u0131m. Retired \u00f6nemsiz g\u00f6r\u00fcn\u00fcyor, \u00e7\u0131kararak tekrar hatalar\u0131 \u00f6l\u00e7t\u00fcm, \n#de\u011fi\u015fen bir \u015fey olmad\u0131. Di\u011fer modellerde \u00f6nemli olabilir diye b\u0131rakt\u0131m.\n\nimportance=rf_model.feature_importances_\nplt.figure(figsize=(8,8))\nplt.barh(X.columns,importance)\nplt.show()","5e45f0cd":"# gbm model kurulumu\ngbm_model=GradientBoostingClassifier().fit(X_train,y_train)\ny_pred = gbm_model.predict(X_test)\n\n# validasyon hatas\u0131, accuracy skoru, confusion matrix\ncv_results = cross_val_score(gbm_model, X_train, y_train, cv = 10, scoring= \"accuracy\")\n\nprint(cv_results.mean())\nprint(accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","755f9158":"# lgbm model kurulumu\nlgbm_model=LGBMClassifier().fit(X_train,y_train)\ny_pred = lgbm_model.predict(X_test)\n\n# validasyon hatas\u0131, accuracy skoru, confusion matrix\ncv_results = cross_val_score(lgbm_model, X_train, y_train, cv = 10, scoring= \"accuracy\")\n\nprint(cv_results.mean())\nprint(accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","ed419dad":"smt = SMOTE(random_state=12345)\nX_res, y_res = smt.fit_sample(X, y)\n\nprint('Resampled dataset shape {}'.format(Counter(y_res)))","23ca6786":"#split i\u015flemi\nX_train, X_test, y_train, y_test = train_test_split(X_res, y_res, \n                                                    test_size=0.20, \n                                                    random_state=12345)\n\n# lgbm model kurulumu\nlgbm_model=LGBMClassifier(random_state=12345).fit(X_train,y_train)\ny_pred = lgbm_model.predict(X_test)\n\n# validasyon hatas\u0131, accuracy skoru, confusion matrix\ncv_results = cross_val_score(lgbm_model, X_train,y_train, cv = 10, scoring= \"accuracy\")\n\nprint(\"cross_val_score(train):\", cv_results.mean())\n\ncv_results = cross_val_score(lgbm_model, X_test,y_test, cv = 10, scoring= \"accuracy\")\nprint(\"cross_val_score(test):\", cv_results.mean())\n\n\ny_train_pred = lgbm_model.predict(X_train)\nprint(\"accuracy_score(train):\",accuracy_score(y_train, y_train_pred))\nprint(\"accuracy_score(test):\",accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","fd8dbbb4":"cf_matrix = confusion_matrix(y_test, y_pred)\nprint(cf_matrix)\nsns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True, \n            fmt='.2%', cmap='Blues');","9c357949":"# DATA UNDERSTANDING\n\n#### Churn veri seti i\u00e7in ayr\u0131nt\u0131l\u0131 \"data understanding\" b\u00f6l\u00fcm\u00fc i\u00e7in \u015fu notebook'a bakabilirsiniz:\n#### https:\/\/www.kaggle.com\/nguncedasci\/churn-data-understanding\n#### Data Preprocessing b\u00f6l\u00fcm\u00fcnde olu\u015fturulan de\u011fi\u015fkenlerin \u00e7o\u011fu, yukar\u0131da belirtilen notebooktaki incelemelere g\u00f6re yap\u0131lm\u0131\u015ft\u0131r.","9c14f403":"# MODEL TUNING\n#### Denemeler yapt\u0131m. Yukar\u0131da en iyi sonu\u00e7 ald\u0131\u011f\u0131m LGBM modeli i\u00e7in hiperparametrelerle oynad\u0131m ancak default de\u011ferlerinden daha iyi bir model olu\u015fturamad\u0131m.\n","426a1cb0":"#### Churn olmayanlar:\n* 1547--> 0 (Ger\u00e7ekte test veri setinde),\n* 1628-->0 (Test veri seti i\u00e7in tahmin edilen)\n\n\n#### Churn olanlar:\n* 1639--> 1 (Ger\u00e7ekte test veri setinde),\n* 1558-->1 (Test veri seti i\u00e7in tahmin edilen)","d1256021":"# CHURN VER\u0130 SET\u0130 MAK\u0130NE \u00d6\u011eRENMES\u0130 ALGOR\u0130TMALARI UYGULAMALARI","a1476645":"# LGBM","a75a51c8":"# DENGES\u0130Z VER\u0130 SET\u0130: SMOTE\n#### %20-80'lik veri seti i\u00e7in varolan dengesizli\u011fi oversamling y\u00f6ntemi ile giderdim.","be87a94e":"# MODELING","879eee4b":"## GBM","62aef252":"# Robust Scaler","46521fda":"## Random Forest","beac822d":"### Do\u011fru tahmin edilenler --> %89.42 (3186 tahminden 2849 tanesi do\u011fru)\n* #### True Negative --> %44.54 --> Churn olmayaca\u011f\u0131 tahmin edilmi\u015f ve churn olmam\u0131\u015f.\n* #### True Positive --> %44.88 --> Churn olaca\u011f\u0131 tahmin edilmi\u015f ve churn olmu\u015f.\n\n### Yanl\u0131\u015f tahmin edilenler -->  %10.58 (3186 tahminden 337 tanesi yanl\u0131\u015f)\n* #### False Positive --> %4.02 --> Churn olaca\u011f\u0131 tahmin edilmemi\u015f ama churn olmam\u0131\u015f.\n* #### False Negative --> %6.56 --> Churn olmayaca\u011f\u0131 tahmin edilmi\u015f ama churn olmu\u015f.","c2c91cd8":"## LGBM","2ab5b885":"# REPORT","21d8a92c":"# DATA PREPROCESSING"}}