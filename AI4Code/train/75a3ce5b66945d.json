{"cell_type":{"dcce68e8":"code","8667b931":"code","4b17b82a":"code","551318e4":"code","a1332c87":"code","852d1d6f":"code","b5289102":"code","5f2fefc5":"code","f0389ee3":"markdown","f3421589":"markdown","07981c58":"markdown","c39dcc9a":"markdown","ebf63d3e":"markdown","6f4b0870":"markdown"},"source":{"dcce68e8":"%matplotlib inline\nimport matplotlib.pylab\nfrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\nfrom matplotlib.figure import Figure\n%pylab inline\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom tqdm import tqdm_notebook\nimport ast\n\nsns.set_style(\"white\")\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})","8667b931":"train_path = '..\/input\/train_simplified\/'\nfiles = os.listdir(train_path)\ncategories = [category.split('.')[0] for category in files]\nprint('Total number of categories: ',len(categories))\nprint('Few Example Categories',categories[0:5])","4b17b82a":"train_data = pd.DataFrame()\nfor file in tqdm_notebook(files):\n    train_data = train_data.append(pd.read_csv(train_path + file, index_col='word', nrows=10))    ","551318e4":"train_data.sample(10)","a1332c87":"train_data = train_data.reset_index()\ntrain_data['word_count'] = train_data.groupby('word')['word'].transform('count')\nsns.distplot(train_data['word_count'],kde=False)\nplt.title('Word Count Distribution in Train Set')","852d1d6f":"if train_data.index.name is not 'word':\n    train_data = train_data.set_index('word')\n    \nimg_ar = None\nfor cat in tqdm_notebook(categories):\n    df = train_data[train_data.index==cat]\n    drawings = [ast.literal_eval(pts) for pts in df[:9]['drawing'].values]\n\n    fig = Figure()\n    ax = fig.subplots(1,9)\n    canvas = FigureCanvas(fig)\n    for i, drawing in enumerate(drawings):\n        for x,y in drawing:\n            ax[i].plot(x, y, marker='.')\n            ax[i].axis('off')\n    fig.suptitle(cat,fontsize=30)\n#     plt.show()\n    canvas.draw()       # draw the canvas, cache the renderer\n    image = np.fromstring(canvas.tostring_rgb(), dtype='uint8')\n    width, height = fig.get_size_inches() * fig.get_dpi() \n    img = image.reshape(int(height), int(width), 3)\n    img = np.expand_dims(img,axis=0)\n    if img_ar is None:\n        img_ar = img\n    else:\n        img_ar = np.concatenate([img_ar,img],axis=0)","b5289102":"DataRange = (np.absolute(img_ar)).max() \nEXTENT = [0, width, 0 ,height]\nNORM = matplotlib.colors.Normalize(vmin =-DataRange, vmax= DataRange, clip =True)\n\ngrid_width = 20\ngrid_height = len(categories)\/\/grid_width\nfig,axs = plt.subplots(grid_height,grid_width,figsize=(img_ar.shape[1], img_ar.shape[2]))\nfor i in range(len(categories)):\n    ax = axs[int(i \/ grid_width), i % grid_width]\n    ax.imshow(img_ar[i], norm = NORM, extent = EXTENT, aspect = 1, interpolation='none')\n    ax.axis('off')\n\nplt.show()","5f2fefc5":"plt.imshow(img_ar[0])","f0389ee3":"# Visualizing all the images","f3421589":"# You can open the above image in new tab to get better resolution. The image may take some time to load.\nOR you can manually visualize each image like shown below","07981c58":"# Generating the Images","c39dcc9a":"# Reading data from all the categories","ebf63d3e":"Quick, Draw! is an online game developed by Google that challenges players to draw a picture of an object. You can play the game here https:\/\/quickdraw.withgoogle.com\/ The game prompts users to draw an image depicting a certain category, such as \u201dmarker,\u201d \u201ctable,\u201d etc.  The aim of this competition is to build a better classifier for the existing Quick, Draw! dataset.  The challenging thing is that the data is very noisy.\n\nIn this kernel, I try to visualize all the images in the train data set to get some sense of the type of data we are dealing with\n","6f4b0870":"# Load Libraries"}}