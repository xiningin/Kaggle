{"cell_type":{"c80715c8":"code","b88ed8fe":"code","d38d4034":"code","4ba0e717":"code","57db0474":"code","b6d5f1ed":"code","3b9b24fa":"code","1c92a171":"code","5ac0da3e":"markdown","492855a0":"markdown"},"source":{"c80715c8":"#2. Starting Your ML Project\nimport pandas as pd\n\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' # this is the path to the Iowa data that you will use\ndata = pd.read_csv(main_file_path)\n\n# Run this code block with the control-enter keys on your keyboard. Or click the blue botton on the left\nprint(data)\nprint (\"\\n\")\n\nprint(data.describe())","b88ed8fe":"#3. Selecting and Filtering Data in Pandas:\n\nimport pandas as pd\n\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' # this is the path to the Iowa data that you will use\ndata = pd.read_csv(main_file_path)\n\nprint(data.columns)\n\ndata_SalePrice = data.SalePrice\nprint(data_SalePrice.head())\n\n\ntwo_columns = ['LotArea','YrSold']\ndata_two_columns = data[two_columns]\nprint (data_two_columns.describe())\n\nimport pandas as pd\n\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' # this is the path to the Iowa data that you will use\ndata = pd.read_csv(main_file_path)\n\nprint(data.columns)\n\ndata_SalePrice = data.SalePrice\nprint(data_SalePrice.head())\n\n\ntwo_columns = ['LotArea','YrSold']\ndata_two_columns = data[two_columns]\nprint (data_two_columns.describe())\n","d38d4034":"#4. Your First Scikit-Learn Model:\nimport pandas as pd\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' \niowa_data = pd.read_csv(main_file_path)\n\ny = iowa_data.SalePrice\nprint (y)\n\n\niowa_predictors = ['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\nX = iowa_data [iowa_predictors]\nprint(X)\nX.info()\n\n\nfrom sklearn.tree import DecisionTreeRegressor\n\niowa_model = DecisionTreeRegressor()\n\niowa_model.fit(X,y)\n\nprint(\"Making predictions for the following 5 houses:\")\nprint(X.head())\n\nprint(\"The predictions are\")\nprint(iowa_model.predict(X.head()))\n\n##Actual data and predicted data is same. That's normal here. What's happened is you've trained your data on an entire set and then you're having your model predict values on that same set. So effectively it's 'learned' perfectly what the sales prices should be because it's already seen them. Typically what happens is you would keep some data back and use it to test your model. The next lessons has you do that. So nothing weird here!##","4ba0e717":"#5. Model Validation:\nimport pandas as pd\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' \niowa_data = pd.read_csv(main_file_path)\n\ny = iowa_data.SalePrice\n#print (y)\n\n\niowa_predictors = ['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\nX = iowa_data [iowa_predictors]\n#print(X)\n#X.info()\n\n\nfrom sklearn.tree import DecisionTreeRegressor\niowa_model = DecisionTreeRegressor()\n\niowa_model.fit(X,y)  #here we have trained the model with all the data.\n\n\npredicted_home_prices = iowa_model.predict(X)\n\nfrom sklearn.metrics import mean_absolute_error\nmean_absolute_error(y, predicted_home_prices) #this is the in-sample score because we used a single set of houses (called a data sample) for both building the model and for calculating it's MAE score. This is bad.\n\n\nfrom sklearn.model_selection import train_test_split\n# split data into training and validation data for both predictors and target.\n# The split is based on a random number generator. Supplying a numeric value to the random_state argument guarantees we get the same split every time we run this script.\n\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,random_state=0)\niowa_model.fit(train_X,train_y)\nval_predictions = iowa_model.predict(val_X)\nprint(val_predictions)\nprint(mean_absolute_error(val_y,val_predictions))\n","57db0474":"#6. Underfitting, Overfitting and Model Optimization:\n\nimport pandas as pd\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' \niowa_data = pd.read_csv(main_file_path)\n\ny = iowa_data.SalePrice\n#print(y)\n\niowa_predictors = ['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\nX = iowa_data [iowa_predictors]\n#print(X)\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,random_state=0)\n\ndef get_mae(max_leaf_nodes, predictors_train, predictors_val, targ_train, targ_val):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(predictors_train, targ_train)\n    preds_val = model.predict(predictors_val)\n    mae = mean_absolute_error(targ_val, preds_val)\n    return(mae)\n\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))\n\n","b6d5f1ed":"#7. Random Forest:\n\nimport pandas as pd\nmain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv' \niowa_data = pd.read_csv(main_file_path)\n\ny = iowa_data.SalePrice\n\niowa_predictors = ['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\nX = iowa_data [iowa_predictors]\n\nfrom sklearn.model_selection import train_test_split\ntrain_X,val_X,train_y,val_y = train_test_split(X,y,random_state = 0)\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\ntree_model = DecisionTreeRegressor()\nforest_model = RandomForestRegressor()\n\ntree_model.fit(train_X,train_y)\nforest_model.fit(train_X,train_y)\n\ntree_model_preds = tree_model.predict(val_X)\nforest_model_preds = forest_model.predict(val_X)\n\nmae_tree_model = mean_absolute_error(val_y,tree_model_preds)\nmae_forest_model = mean_absolute_error(val_y,forest_model_preds)\n\nprint (\"Mean absolute error for Tree Model is : %d\" %mae_tree_model)\nprint (\"Mean absolute error for Forest Model is : %d\" %mae_forest_model)\n","3b9b24fa":"#8. Submitting From A Kernel : I am trying this example as well, though there is no need to do it as it's simple illustration to do submission of what we have done:\n\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\ntrain_file_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntrain = pd.read_csv(train_file_path)\n\npredictor_cols = ['LotArea','YearBuilt','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr','TotRmsAbvGrd']\n\ntrain_X = train[predictor_cols]\ntrain_y = train.SalePrice\n\n\nforest_model = RandomForestRegressor()\nforest_model.fit(train_X,train_y)\n\n\ntest_file_path = '..\/input\/house-prices-advanced-regression-techniques\/test.csv'\ntest = pd.read_csv(test_file_path)\ntest_X = test[predictor_cols]\n#test_y = test.SalePrice  #this will fail because test data does not have this field and that is what we have to predict.\n\npredict_y = forest_model.predict(test_X)\n\nmy_submission = pd.DataFrame({'Id' : test.Id, 'PredSalePrice' : predict_y})\nmy_submission.to_csv('submission_test.csv',index=False)\n\n","1c92a171":"import pandas as pd\n\ndata_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv'\ndata = pd.read_csv(data_path)\n\nX = data.drop (['SalePrice'] , axis = 1)\nX_one_hot_encoded = pd.get_dummies (X)\ny = data.SalePrice\n\nfrom sklearn.model_selection import train_test_split\ntrain_X,test_X,train_y,test_y = train_test_split (X_one_hot_encoded,y)\n\nfrom sklearn.preprocessing import Imputer\nmy_imputer = Imputer()\ntrain_X_imputed = my_imputer.fit_transform(train_X)\n\nfrom sklearn.ensemble import RandomForestRegressor\nmy_model = RandomForestRegressor()\nmy_model.fit(train_X_imputed,train_y)\n\n\npreds_y = my_model.predict(test_X)","5ac0da3e":"\n**If you have any questions or hit any problems, come to the [Learn Discussion](https:\/\/www.kaggle.com\/learn-forum) for help. **\n\n**Return to [ML Course Index](https:\/\/www.kaggle.com\/learn\/machine-learning)**","492855a0":"# Introduction\n**This will be your workspace for the [Machine Learning course](https:\/\/www.kaggle.com\/learn\/machine-learning).**\n\nYou will need to translate the concepts to work with the data in this notebook, the Iowa data. Each page in the Machine Learning course includes instructions for what code to write at that step in the course.\n\n# Write Your Code Below"}}