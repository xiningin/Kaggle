{"cell_type":{"c9dada00":"code","574acb05":"code","4bf41156":"code","e6ec0630":"code","d27eb1a3":"code","74e8d81f":"code","74c0d911":"code","380f577c":"code","aa7ade47":"code","6b4223cb":"code","7b1fd811":"code","4999df66":"markdown","18fb4800":"markdown","4e576179":"markdown"},"source":{"c9dada00":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))","574acb05":"data = pd.read_csv(\"..\/input\/Iris.csv\")","4bf41156":"data.head()","e6ec0630":"X = data[[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]","d27eb1a3":"from sklearn.cluster import KMeans\n\nl = []\nfor i in range(1,10):\n    kmeans = KMeans(n_clusters=i,init=\"k-means++\")\n    cluster = kmeans.fit_predict(X)\n    l.append(kmeans.inertia_)\n\nplt.figure(figsize=(7,4))\nsns.lineplot(x = range(1,10), y = l)\nplt.show()","74e8d81f":"kmeans = KMeans(n_clusters=3,init=\"k-means++\",random_state=47)\ncluster = kmeans.fit_predict(X)","74c0d911":"testClass = [1 if i ==\"Iris-setosa\" else  0 if i ==\"Iris-versicolor\" else 2  for i in data.Species]\n\ncount = 0\nfor i in range(len(cluster)):\n    if cluster[i] == testClass[i]:\n        count+=1\n    \nscore = count\/len(cluster)\nprint(\"K-Means Algorithm score: {}\".format(score))","380f577c":"from scipy.cluster.hierarchy import dendrogram,linkage\n\nplt.figure(figsize=(12,5))\ndendrogram = dendrogram(linkage(X,method=\"ward\"))","aa7ade47":"from sklearn.cluster import AgglomerativeClustering\n\nac = AgglomerativeClustering(n_clusters=3,linkage=\"average\",affinity=\"euclidean\")\nclusterH = ac.fit_predict(X)","6b4223cb":"testClassH = [1 if i ==\"Iris-setosa\" else  0 if i ==\"Iris-versicolor\" else 2  for i in data.Species]\n\ncount = 0\nfor i in range(len(clusterH)):\n    if clusterH[i] == testClassH[i]:\n        count+=1\n    \nscore = count\/len(clusterH)\nprint(\"Hierarchical Algorithm score: {}\".format(score))","7b1fd811":"plt.figure(figsize=(15,15))\n\nplt.subplot(221)\nplt.scatter(data.SepalLengthCm[data.Species == 'Iris-versicolor'], data.PetalLengthCm[data.Species == 'Iris-versicolor'], s = 100, c = 'red', label = 'Iris-versicolor')\nplt.scatter(data.SepalLengthCm[data.Species == 'Iris-setosa'], data.PetalLengthCm[data.Species == 'Iris-setosa'], s = 100, c = 'blue', label = 'Iris-setosa')\nplt.scatter(data.SepalLengthCm[data.Species == 'Iris-virginica'], data.PetalLengthCm[data.Species == 'Iris-virginica'], s = 100, c = 'green', label = 'Iris-virginica')\nplt.legend()\nplt.title(\"Original Data\")\nplt.xlabel(\"SepalLengthCm\")\nplt.ylabel(\"PetalLengthCm\")\n\nplt.subplot(222)\nX_kmeans = X.copy()\nX_kmeans[\"Class\"] = cluster\n\nplt.scatter(X_kmeans.SepalLengthCm[X_kmeans.Class == 0], X_kmeans.PetalLengthCm[X_kmeans.Class == 0], s = 100, c = 'red', label = 'Iris-versicolor')\nplt.scatter(X_kmeans.SepalLengthCm[X_kmeans.Class == 1], X_kmeans.PetalLengthCm[X_kmeans.Class == 1], s = 100, c = 'blue', label = 'Iris-setosa')\nplt.scatter(X_kmeans.SepalLengthCm[X_kmeans.Class == 2], X_kmeans.PetalLengthCm[X_kmeans.Class == 2], s = 100, c = 'green', label = 'Iris-virginica')\nplt.legend()\nplt.title(\"K-Means\")\nplt.xlabel(\"SepalLengthCm\")\nplt.ylabel(\"PetalLengthCm\")\n\nplt.subplot(223)\nX_hier = X.copy()\nX_hier[\"Class\"] = clusterH\n\nplt.scatter(X_hier.SepalLengthCm[X_hier.Class == 0], X_hier.PetalLengthCm[X_hier.Class == 0], s = 100, c = 'red', label = 'Iris-versicolor')\nplt.scatter(X_hier.SepalLengthCm[X_hier.Class == 1], X_hier.PetalLengthCm[X_hier.Class == 1], s = 100, c = 'blue', label = 'Iris-setosa')\nplt.scatter(X_hier.SepalLengthCm[X_hier.Class == 2], X_hier.PetalLengthCm[X_hier.Class == 2], s = 100, c = 'green', label = 'Iris-virginica')\nplt.legend()\nplt.title(\"Hierarchical\")\nplt.xlabel(\"SepalLengthCm\")\nplt.ylabel(\"PetalLengthCm\")\n\nplt.show()","4999df66":"**K-Means Algorithm **","18fb4800":"**Hierarchical Algorithm **","4e576179":"**Visualization**"}}