{"cell_type":{"04460ab7":"code","85791fab":"code","3e2d50b5":"code","56a8487f":"code","e2a571f3":"code","cd15ea11":"code","aaef09fc":"code","97952bb7":"code","c00258f3":"code","93743514":"code","93788bf5":"code","aa441dc4":"code","f39982a2":"code","c031cb2b":"code","2bac1470":"code","ea558a0e":"code","a44f7cea":"code","54613e24":"code","ab3f8d0e":"code","00ebcb8a":"code","6000045b":"code","f5118bad":"code","b3953151":"code","31d725a5":"code","6e4c1a0d":"code","1ed6d2d7":"code","daa189f5":"code","12b63753":"markdown","4722e3d6":"markdown","ee8852ed":"markdown","28aa37bb":"markdown","fb763dd5":"markdown","f8474c57":"markdown","fe93140f":"markdown","686bb289":"markdown","2cd44d0b":"markdown","0a7cf280":"markdown","cf12483c":"markdown"},"source":{"04460ab7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85791fab":"df = pd.read_csv('..\/input\/voicegender\/voice.csv')","3e2d50b5":"df.head(10)","56a8487f":"df.columns","e2a571f3":"df.shape","cd15ea11":"df.describe()","aaef09fc":"df.meanfreq.value_counts()","97952bb7":"#Printing the total distribution\n\nprint(\"Total Number of samples : {}\".format(df.shape[0]))\n\nprint(\"Total No.of Males : {}\".format(df[df.label == 'male'].shape[0]))\n\nprint(\"Total No.of Females : {}\".format(df[df.label == 'female'].shape[0]))","c00258f3":"#Checking for Null Values\n\ndf.isnull().sum()","93743514":"df.head()\ndf.plot(kind='scatter', x='meanfreq', y='dfrange')\ndf.plot(kind='kde', y='meanfreq')","93788bf5":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","aa441dc4":"sns.pairplot(df[['meanfreq', 'Q25', 'Q75', 'skew', 'centroid', 'label']], \n                 hue='label', size=2)","f39982a2":"sns.jointplot(\"meanfreq\", \"Q25\", df, kind='kde');","c031cb2b":"plt.figure(figsize=(12,12))\nsns.kdeplot(df.meanfreq, df.Q25,  shade=True)","2bac1470":"sns.boxplot(x=\"meanfreq\", y=\"Q25\", data=df)","ea558a0e":"plt.figure(figsize=(9,9))\n\nlogistique = lambda x: np.exp(x)\/(1+np.exp(x))   \n\nx_range = np.linspace(-10,10,50)       \ny_values = logistique(x_range)\n\nplt.plot(x_range, y_values, color=\"black\")","a44f7cea":"df.label = [1 if each == \"male\" else 0 for each in df.label]\n\ndf.head()","54613e24":"X = df.drop([\"label\"], axis = 1)\ny = df.label.values\n\n#Normalizing X\n\nX = (X - X.min()) \/ (X.max() - X.min())\n\nprint(X.shape)\nprint(y.shape)","ab3f8d0e":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","00ebcb8a":"import tensorflow as tf\nimport tensorflow.keras as keras","6000045b":"model = keras.Sequential([keras.layers.InputLayer(input_shape=X_train.shape[1:]),\n                          keras.layers.Dense(32, activation='relu'),\n                          keras.layers.Dense(64, activation='relu'),\n                          keras.layers.Dropout(0.2),\n                          keras.layers.Dense(32, activation='relu'),\n                          keras.layers.Dropout(0.2),\n                          keras.layers.Dense(16, activation='relu'),\n                          keras.layers.Dense(1, activation='sigmoid')\n                         ])","f5118bad":"model.summary()","b3953151":"model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])","31d725a5":"reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=5, min_lr=0.001)\n\nv_split= 0.2\nepoch = 100","6e4c1a0d":"\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","1ed6d2d7":"history_df = pd.DataFrame(history.history)\n\nhistory_df.plot(figsize=(10,10))\n\nplt.grid(True)\nplt.gca().set_ylim(0,1.15)\nplt.show()","daa189f5":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","12b63753":"separation des donn\u00e9es","4722e3d6":"Affichage des 10 premiers elements des donn\u00e9es","ee8852ed":"Resum\u00e9 modele\n","28aa37bb":"Importation de l'input a partir de la dataset","fb763dd5":"* Affichage des quelque elements de meanfreq \u00e0 modindx","f8474c57":"Resum\u00e9 du modele","fe93140f":"D\u00e9finition des parameters","686bb289":"Modele\n","2cd44d0b":"Performance du modele","0a7cf280":"Resultat","cf12483c":"Visualisation"}}