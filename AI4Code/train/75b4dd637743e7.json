{"cell_type":{"62f93e62":"code","508853be":"code","8b3dc003":"code","83d5eb2b":"code","0597d720":"code","b08dc089":"code","c56663af":"code","b74f58b1":"code","8d115116":"code","3414be76":"code","91f05d4e":"code","963c7819":"code","45b3e691":"code","68bee3d6":"code","df66f523":"code","b322ef04":"code","24314616":"code","c8c59699":"code","2a3efb4c":"code","ffb6041a":"code","87c88a57":"code","d9fdbd14":"markdown","871d6e1b":"markdown","31362e42":"markdown","5a336c55":"markdown","3436675b":"markdown","f835321e":"markdown","8b5a4bb2":"markdown","7c587e43":"markdown","8ce7a981":"markdown","65740cd7":"markdown","f9b34f6d":"markdown"},"source":{"62f93e62":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.patches as patches\nfrom PIL import Image\nimport numpy as np\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","508853be":"train = pd.read_csv(\"\/kaggle\/input\/face-mask-detection-dataset\/train.csv\")\nprint(train.shape[0])\ntrain.head()\ntrain.sort_values(\"name\")","8b3dc003":"ax = sns.catplot(x='classname',kind='count',data=train,orient=\"h\",height=10,aspect=1)\nax.fig.suptitle('Count of Classnames',fontsize=16,color=\"r\")\nax.fig.autofmt_xdate()","83d5eb2b":"def img_reg(id):\n    train_name=train[\"name\"][id]\n    classname=train[train[\"name\"]==train_name][\"classname\"]\n    reg=train[train[\"name\"]==train_name][[\"x1\",\"x2\",\"y1\",\"y2\"]]\n    x1=reg[\"x1\"][id]\n    x2=reg[\"x2\"][id]\n    y1=reg[\"y1\"][id]\n    y2=reg[\"y2\"][id]\n    classname=classname[id]\n    images = \"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\"\n    img=plt.imread(os.path.join(images,train_name))\n    return x1,x2,y1,y2,classname,img\n\n\n# Create suubplot\nfig,[ax1,ax2] = plt.subplots(nrows=1, ncols=2, figsize=(15,15))\n\n#first image\n\nx1,x2,y1,y2,classname,img=img_reg(14835)\nax1.imshow(img)\nrect = patches.Rectangle((x1,x2),y1-x1,y2-x2,linewidth=2,edgecolor='r',facecolor='none')\nax1.set_title(classname)\n#second image\n\nx1,x2,y1,y2,classname,img=img_reg(14836)\nax2.imshow(img)\nrect2 = patches.Rectangle((x1,x2),y1-x1,y2-x2,linewidth=2,edgecolor='r',facecolor='none')\nax2.set_title(classname)\n\n# Add the patch\nax1.add_patch(rect)\nax2.add_patch(rect2)\n\nplt.show()","0597d720":"submission = pd.read_csv(\"\/kaggle\/input\/face-mask-detection-dataset\/submission.csv\")\nprint(submission.shape[0])\nsubmission.head()\nsubmission.sort_values(\"name\")","b08dc089":"len(os.listdir(\"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\"))","c56663af":"face_with_mask=train[train[\"classname\"]==\"face_with_mask\"]\nface_no_mask=train[train[\"classname\"]==\"face_no_mask\"]\nprint(\"count of face with mask: \"+str(len(face_with_mask))+\"\\ncount of face no mask: \"+str(len(face_no_mask)))","b74f58b1":"import cv2\n\nname=face_with_mask.iloc[0][\"name\"]\nimages = \"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\"\nimg=plt.imread(os.path.join(images,name))\nresized = cv2.resize(img, (64,64), interpolation = cv2.INTER_AREA)\nface_with_flatten=resized.flatten().reshape(-1,1)\n\nname=face_with_mask[\"name\"]\nfor i in name:\n    images = \"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\"\n    img=plt.imread(os.path.join(images,i))\n    resized = cv2.resize(img, (64,64), interpolation = cv2.INTER_AREA)\n    z=resized.flatten().reshape(-1,1)\n    face_with_flatten=np.append(face_with_flatten,z,axis=1)\n\nprint(face_with_flatten.shape)","8d115116":"\nname=face_no_mask.iloc[0][\"name\"]\nimages = \"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\"\nimg=plt.imread(os.path.join(images,name))\nresized = cv2.resize(img, (64,64), interpolation = cv2.INTER_AREA)\nface_no_flatten=resized.flatten().reshape(-1,1)\n\nname=face_no_mask[\"name\"]\nfor i in name:\n    images = \"\/kaggle\/input\/face-mask-detection-dataset\/Medical mask\/Medical mask\/Medical Mask\/images\"\n    img=plt.imread(os.path.join(images,i))\n    resized = cv2.resize(img, (64,64), interpolation = cv2.INTER_AREA)\n    z=resized.flatten().reshape(-1,1)\n    face_no_flatten=np.append(face_no_flatten,z,axis=1)\n\nprint(face_no_flatten.shape)","3414be76":"face_with_flatten=face_with_flatten\/255.\nface_no_flatten=face_no_flatten\/255.\n\nTrain_x=np.append(face_with_flatten[:,1:1401],face_no_flatten[:,1:1401],axis=1)\nTrain_y=np.append(np.ones(1400),np.zeros(1400),axis=0).reshape(-1,1).T\nTest_x=np.append(face_with_flatten[:,1401:1570],face_no_flatten[:,1401:1570],axis=1)\nTest_y=np.append(np.ones(169),np.zeros(169),axis=0).reshape(-1,1).T\n\nprint(Train_x.shape)\nprint(Train_y.shape)\nprint(Test_x.shape)\nprint(Test_y.shape)","91f05d4e":"#sigmoid function\ndef sigmoid(z):\n    \n    s = 1\/(1+np.exp(-z))  \n    return s","963c7819":"def initialize_with_zeros(dim):\n    \n    w = np.zeros((dim,1))\n    b = 0\n\n    assert(w.shape == (dim, 1))\n    assert(isinstance(b, float) or isinstance(b, int))\n    \n    return w, b","45b3e691":"def propagate(w, b, X, Y):\n    \"\"\"\n    Arguments:\n    w -- weights, a numpy array of size (num_px * num_px * 3, 1)\n    b -- bias, a scalar\n    X -- data of size (num_px * num_px * 3, number of examples)\n    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat) of size (1, number of examples)\n\n    Return:\n    cost -- negative log-likelihood cost for logistic regression\n    dw -- gradient of the loss with respect to w, thus same shape as w\n    db -- gradient of the loss with respect to b, thus same shape as b\n    \"\"\"   \n    \n    m = X.shape[1]\n    \n    # FORWARD PROPAGATION\n\n    A = sigmoid(np.dot(w.T, X)+ b)                                \n    cost = -1\/m*np.sum(Y*np.log(A)+ (1-Y)*np.log(1-A))                             \n\n    \n    # BACKWARD PROPAGATION\n\n    dw = 1\/m*(np.dot(X, (A-Y).T))\n    db = 1\/m*np.sum(A-Y)\n\n\n    assert(dw.shape == w.shape)\n    assert(db.dtype == float)\n    cost = np.squeeze(cost)\n    assert(cost.shape == ())\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return grads, cost","68bee3d6":"def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False):\n    \n    costs = []\n    \n    for i in range(num_iterations):\n        \n        \n        # Cost and gradient calculation\n\n        grads, cost = propagate(w, b, X, Y)\n\n        # Retrieve derivatives from grads\n        dw = grads[\"dw\"]\n        db = grads[\"db\"]\n        \n        # update rule\n\n        w = w - learning_rate*dw\n        b = b - learning_rate*db\n\n        \n        # Record the costs\n        if i % 100 == 0:\n            costs.append(cost)\n        \n        # Print the cost every 100 training iterations\n        if print_cost and i % 100 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    params = {\"w\": w,\n              \"b\": b}\n    \n    grads = {\"dw\": dw,\n             \"db\": db}\n    \n    return params, grads, costs","df66f523":"def predict(w, b, X):\n\n    m = X.shape[1]\n    Y_prediction = np.zeros((1,m))\n    w = w.reshape(X.shape[0], 1)\n    \n    # Compute vector \"A\" predicting the probabilities of a cat being present in the picture\n\n    A = sigmoid(np.dot(w.T, X)+ b) \n\n    \n    for i in range(A.shape[1]):\n        \n        if A[0,i]< 0.5:\n            Y_prediction[0,i] = 0\n        else: \n            Y_prediction[0,i] = 1\n    \n    assert(Y_prediction.shape == (1, m))\n    \n    return Y_prediction","b322ef04":"def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.5, print_cost = False):\n\n\n    w, b = initialize_with_zeros(X_train.shape[0])\n\n    # Gradient descent \n    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost = True)\n    \n    # Retrieve parameters w and b from dictionary \"parameters\"\n    w = parameters[\"w\"]\n    b = parameters[\"b\"]\n    \n    # Predict test\/train set examples \n    Y_prediction_test = predict(w, b, X_test)\n    Y_prediction_train = predict(w, b, X_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n\n    \n    d = {\"costs\": costs,\n         \"Y_prediction_test\": Y_prediction_test, \n         \"Y_prediction_train\" : Y_prediction_train, \n         \"w\" : w, \n         \"b\" : b,\n         \"learning_rate\" : learning_rate,\n         \"num_iterations\": num_iterations}\n    \n    return d","24314616":"d = model(Train_x, Train_y, Test_x, Test_y, num_iterations = 2000, learning_rate = 0.01, print_cost = True)","c8c59699":"a=Test_x[:,13]*255\nplt.imshow(a.reshape((64, 64, 3)))\nprint(d[\"Y_prediction_test\"][0,13])","2a3efb4c":"a=Test_x[:,95]*255\nplt.imshow(a.reshape((64, 64, 3)))\nprint(d[\"Y_prediction_test\"][0,95])","ffb6041a":"a=Test_x[:,300]\nplt.imshow(a.reshape((64, 64, 3)))\nprint(d[\"Y_prediction_test\"][0,300])","87c88a57":"# Plot learning curve (with costs)\ncosts = np.squeeze(d['costs'])\nplt.figure(figsize=(15,10))\nplt.plot(costs)\nplt.grid(color='r', linestyle='dotted', linewidth=0.5)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundreds)')\nplt.title(\"Learning rate =\" + str(d[\"learning_rate\"]))\nplt.show()","d9fdbd14":"![](http:\/\/osmanballi.com\/formula3.PNG)","871d6e1b":"# [osmanballi.com](https:\/\/osmanballi.com\/)","31362e42":"# Read Data","5a336c55":"# Neural Network","3436675b":"![](https:\/\/www.extremetech.com\/wp-content\/uploads\/2015\/07\/neural-net-head.jpg)","f835321e":"[Coursera](https:\/\/www.coursera.org\/learn\/neural-networks-deep-learning\/)","8b5a4bb2":"![](https:\/\/osmanballi.com\/facewithmask.PNG)","7c587e43":"![](http:\/\/osmanballi.com\/formula4.PNG)","8ce7a981":"![](http:\/\/osmanballi.com\/formula2.PNG)","65740cd7":"![](http:\/\/osmanballi.com\/formula5.PNG) ","f9b34f6d":"![](http:\/\/osmanballi.com\/formula.PNG)"}}