{"cell_type":{"05d2439d":"code","1da76f67":"code","7e7d8837":"code","4d06b2af":"code","89b98fec":"code","42959c8c":"code","4cdecb07":"code","f705b716":"code","670d6a2b":"code","64522a4b":"code","1ff72121":"code","40245295":"code","af509bae":"code","3147c13c":"code","3959db76":"code","1286b746":"code","54cfd0a6":"code","38dec88a":"code","5ca61835":"code","aa207ced":"code","fd086475":"code","69200952":"code","53e3f02a":"code","02af7bd6":"code","c67cdcbe":"code","6ebd3259":"code","33e5eda6":"code","bd572c11":"code","e646de06":"code","548d5dc3":"code","5fcb6743":"code","b29d5853":"code","36beaf1e":"code","47bd8c6c":"code","28d746e7":"code","9bcf5b22":"code","5581f2ca":"code","036f2cbf":"code","b8c859f2":"code","551abb93":"code","5dade2da":"code","0583a0ac":"code","fbcf7fa2":"code","a7100c20":"code","e22294af":"code","f56bb36b":"code","5bb66285":"code","f7951c3f":"code","ff01ebc8":"code","47085926":"code","9660a750":"code","9536bb90":"code","d76c2dba":"code","c21c87a6":"code","b2e0ca6b":"markdown","b3859096":"markdown","78f7a9d2":"markdown","aeddedbd":"markdown","d18c8118":"markdown","1e402533":"markdown","b5f8822c":"markdown","79f4958e":"markdown","fedcc797":"markdown","bf2e65c1":"markdown","e1568343":"markdown","e4b9bd71":"markdown","a48f0aad":"markdown","0d8fbbf7":"markdown","f0da83fe":"markdown","071befb9":"markdown","ee3f7321":"markdown","3afbccc2":"markdown","8b4e4a26":"markdown","ecc7ce63":"markdown","9f906a31":"markdown","c71f2e72":"markdown","f9fb22b3":"markdown","e46324b9":"markdown"},"source":{"05d2439d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1da76f67":"import pandas as pd\nimport re\nimport numpy as np\nfrom ast import literal_eval\nimport fuzzywuzzy\nfrom fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process","7e7d8837":"tutors_data = pd.read_csv('..\/input\/moscow-tutors\/tutors_eng_2021_10_06\/tutors_eng_2021_10_06.csv')","4d06b2af":"tutors_data.shape","89b98fec":"tutors_data.head()","42959c8c":"tutors_data.isnull().sum()","4cdecb07":"cols_with_missings = ['Reviews_number', 'Experience', 'Status', 'Location', 'Tags', 'Audience', 'Video_presentation', 'Photo']\nnull_data = tutors_data[tutors_data.isnull().any(axis=1)]\nnull_data","f705b716":"null_data['Format'] = null_data['Format'].apply(lambda s: str(s).replace(\"at the tutor's\",\"tutors place\"))\nnull_data['Format'] = null_data['Format'].apply(lambda s: str(s).replace(\"at the student's\",\"students place\"))","670d6a2b":"for i in ['Categories', 'Format']:\n    null_data[i] = null_data[i].apply(lambda s: list(literal_eval(str(s))) if s != np.nan else s)","64522a4b":"null_expl = null_data.explode('Format')\nnull_expl","1ff72121":"null_expl.Format.value_counts()","40245295":"49019 \/ 65420 * 100","af509bae":"tutors_data_preprocessed = tutors_data.copy()","3147c13c":"tutors_data_preprocessed[['Reviews_number', 'Experience']] = tutors_data_preprocessed[['Reviews_number', 'Experience']].fillna(0)\ntutors_data_preprocessed['Status'] = tutors_data_preprocessed['Status'].fillna('-')\ntutors_data_preprocessed[['Location', 'Tags']] = tutors_data_preprocessed[['Location', 'Tags']].fillna('[]')\ntutors_data_preprocessed['Audience'] = tutors_data_preprocessed['Audience'].fillna('[\\'All\\']')\ntutors_data_preprocessed[['Video_presentation', 'Photo']] = tutors_data_preprocessed[['Video_presentation', 'Photo']].fillna('No')","3959db76":"tutors_data_preprocessed.isnull().sum().sum()","1286b746":"cols_with_lists = ['Categories', 'Format', 'Location', 'Tags', 'Audience']","54cfd0a6":"tutors_data_preprocessed['Format'] = tutors_data_preprocessed['Format'].apply(lambda s: str(s).replace(\"at the tutor\\'s\", \"tutors place\"))\ntutors_data_preprocessed['Format'] = tutors_data_preprocessed['Format'].apply(lambda s: str(s).replace(\"at the student\\'s\", \"students place\"))\ntutors_data_preprocessed['Location'] = tutors_data_preprocessed['Location'].apply(lambda s: str(s).replace(\"[\\'\", '[\\\"'))\ntutors_data_preprocessed['Location'] = tutors_data_preprocessed['Location'].apply(lambda s: str(s).replace(\"\\']\", '\\\"]'))\ntutors_data_preprocessed['Location'] = tutors_data_preprocessed['Location'].apply(lambda s: str(s).replace(\"\\', \\'\", '\\\", \\\"'))","38dec88a":"for i in cols_with_lists:\n    tutors_data_preprocessed[i] = tutors_data_preprocessed[i].apply(lambda s: list(literal_eval(str(s))) if s != np.nan else s)","5ca61835":"type(tutors_data_preprocessed.loc[0, 'Format'])","aa207ced":"tutors_data_preprocessed.head()","fd086475":"categories_series = tutors_data_preprocessed['Categories'].explode()\ncategories_series.unique()","69200952":"tutors_data_preprocessed = tutors_data_preprocessed.join(pd.crosstab(categories_series.index, categories_series))","53e3f02a":"categories_list = tutors_data_preprocessed.columns[12:39]\ntutors_data_preprocessed[categories_list].sum()","02af7bd6":"format_series = tutors_data_preprocessed['Format'].explode()\nformat_series.unique()","c67cdcbe":"tutors_data_preprocessed = tutors_data_preprocessed.join(pd.crosstab(format_series.index, format_series))","6ebd3259":"audience_series = tutors_data_preprocessed['Audience'].explode()\naudience_list = audience_series.unique()\naudience_list","33e5eda6":"def replace_matches_in_column(df, col, string_to_match, replacing, min_ratio = 50):\n    exploded_df = df.explode(column=col)\n    strings = exploded_df[col].unique()\n    \n    matches = fuzzywuzzy.process.extract(string_to_match, strings, \n                                         limit=30, scorer=fuzzywuzzy.fuzz.token_sort_ratio)\n    close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]\n    rows_with_matches = exploded_df[col].isin(close_matches)\n\n\n    exploded_df.loc[rows_with_matches] = replacing\n    imploded_column = exploded_df.groupby(exploded_df.index).agg({col: lambda x: x.tolist()})\n    df[col] = imploded_column","bd572c11":"for i in ['11', '10']:\n    replace_matches_in_column(df=tutors_data_preprocessed, col='Audience', string_to_match=i, replacing='Pupils of 10-11 grades', min_ratio=17)\nfor i in ['9', '8', '7', '6', '5']:\n    replace_matches_in_column(df=tutors_data_preprocessed, col='Audience', string_to_match=i, replacing='Pupils of 5-9 grades', min_ratio=10)\nreplace_matches_in_column(df=tutors_data_preprocessed, col='Audience', string_to_match='4', replacing='Pupils of 1-4 grades', min_ratio=10)\nfor i in ['3', '2']:\n    replace_matches_in_column(df=tutors_data_preprocessed, col='Audience', string_to_match='Pupils of ' + i, replacing='Pupils of 1-4 grades', min_ratio=71)\nreplace_matches_in_column(df=tutors_data_preprocessed, col='Audience', string_to_match='Children 1-3 \u0433\u043e\u0434\u0430', replacing='Children 1-3 years old', min_ratio=100)","e646de06":"audience_series = tutors_data_preprocessed['Audience'].explode()\naudience_list = audience_series.unique()\naudience_list","548d5dc3":"tutors_data_preprocessed = tutors_data_preprocessed.join(pd.crosstab(audience_series.index, audience_series))","5fcb6743":"tutors_data_preprocessed = tutors_data_preprocessed.drop(cols_with_lists, axis=1)","b29d5853":"tutors_data_preprocessed.head()","36beaf1e":"status_coding = {'Private tutor': '4', 'School teacher': '2', 'Postgraduate student': '3',\n       'Native speaker': '6', 'University professor': '5', 'Student': '1', '-': '0'}","47bd8c6c":"for elem in status_coding:\n    tutors_data_preprocessed['Status'] = tutors_data_preprocessed['Status'].apply(lambda x: (str(x).replace(elem, status_coding[elem])))\nfor i in ['Video_presentation', 'Photo']:\n    tutors_data_preprocessed[i] = tutors_data_preprocessed[i].apply(lambda x: 1 if str(x) == 'Yes' else 0)","28d746e7":"for i in ['Status', 'Reviews_number', 'Experience']:\n    tutors_data_preprocessed = tutors_data_preprocessed.astype({i: 'int64'})","9bcf5b22":"tutors_data_preprocessed.head()","5581f2ca":"tutors_data_preprocessed.Score.value_counts()","036f2cbf":"X = tutors_data_preprocessed[tutors_data_preprocessed['Score'] >= 4.0].drop(['Price', 'Score'], axis=1)\nX.head()","b8c859f2":"X.shape","551abb93":"y = tutors_data_preprocessed[tutors_data_preprocessed['Score'] >= 4.0].Price\ny.head()","5dade2da":"y.shape","0583a0ac":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor","fbcf7fa2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","a7100c20":"X_train.shape","e22294af":"y_train.shape","f56bb36b":"my_model_1 = XGBRegressor(n_estimators=500, learning_rate=0.05, n_jobs=4, max_depth=5)\nmy_model_1.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_test, y_test)], verbose=False)","5bb66285":"preds_1 = my_model_1.predict(X_test)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(preds_1, y_test)))","f7951c3f":"my_model_2 = RandomForestRegressor(max_depth=10, max_leaf_nodes=100, n_jobs=4)\nmy_model_2.fit(X_train, y_train)","ff01ebc8":"preds_2 = my_model_2.predict(X_test)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(preds_2, y_test)))","47085926":"scores = -1 * cross_val_score(my_model_1, X, y, cv=5, scoring='neg_mean_absolute_error')","9660a750":"print(scores)\nprint(\"Average MAE score (across experiments):\" + str(scores.mean()))","9536bb90":"data_for_predictions = pd.DataFrame(np.array([[0,7,5,0,1,\n                                              0,0,0,0,0,\n                                              0,0,0,0,0,0,\n                                              1,0,0,0,1,0,\n                                              0,1,0,0,0,0,\n                                              0,0,0,0,1,0,\n                                              0,0,0,0,0,0,\n                                              1,1,1,1]]), \n                                    columns=X.columns)","d76c2dba":"data_for_predictions","c21c87a6":"pred_price = my_model_1.predict(data_for_predictions)\npred_price","b2e0ca6b":"Check '**`Audience`**'","b3859096":"Columns:\n\n    \n*   **`Reviews_number`**: There was no data on the page during parsing, so we can claim that these tutors don't have reviews from the students at all, although they have the score. We can fill in 0 for the missings.\n*   **`Experience`**: Tutors didn't indicate their experience, so we can assume that they don't have any or have little. Let's fill in 0 for the missings values.\n*   **`Status`**: Tutors didn't stated their status. We'll fill the missings with '`-`' that means '`No status`'.\n*   **`Location`**: 75 % of the missings have `remote` format of working. Let's assume the rest of the tutors are very mobile and can reach any place of Moscow easily (Heh, I'd look at it). So we'll fill in the missing cells with value '`[]`' denoting all the location of Moscow.\n*   **`Tags`**: The tags are written by the tutors and have lots of different values. We won't use this feature for prediction. Just fill in with '`[]`'.\n*   **`Audience`**: Assume that the tutors work with all the kind of audience, so fill in with '`[All]`'.\n*   **`Video_presentation`** and **`Photo`**: There was no data about these parameters on parsed pages, so we'll fill in the missings with '`No`'.","78f7a9d2":"XGBRegressor","aeddedbd":"Now let's look closely at the '**`Audience`**'. We have lots of similar entries here so we need to shorten the list of unique variables. We'll divide this huge amount of similar variables into the following general groups:\n\n*   All\n*   Adults\n*   Students\n*   Pupils of 10-11 grades (Russian schools have 11 grades)\n*   Pupils of 5-9 grades\n*   Pupils of 1-4 grades\n*   Children 6-7 years old\n*   Children 4-5 years old\n*   Children 1-3 years old","d18c8118":"Let's apply one-hot encoding for '**`Categories`**', '**`Format`**' and '**`Audience`**'.","1e402533":"After reading from the csv file the data contains lists as strings. For the further analysis we need to convert the values to lists.","b5f8822c":"## Building a model\n---","79f4958e":"## Dataset Analysis\n---","fedcc797":"Let's drop encoded features with lists. We are also dropping unencoded '**`Location`**' due to covid situation because most people will prefer to work remotely in order not to get infected.","bf2e65c1":"## Data preprocessing\n---\nLet's start filling in the missings","e1568343":"It only remains to encode '**`Status`**', '**`Video_presentation`**' and '**`Photo`**' columns.","e4b9bd71":"## Price estimations\n---","a48f0aad":"We can guess that a student or student's parents won't choose a tutor with score less than 4.0. After filtering by score we'll drop this feature to avoid target leakege. '**`Price`**' is the target so we'll drop it too for X.","0d8fbbf7":"Let's create some conditions for predection","f0da83fe":"Function to replace rows in the data with similar values","071befb9":"Almost 74 % of the data is missing or empty for 8 last columns. Let's look at the missing rows closely.","ee3f7321":"Here we have a tutor with 7 years of expirience, working as a university professor, who wants to teach independently pupils and students math, informatics\/programming and physics. The tutor has just come to the site '[repetit.ru](https:\/\/repetit.ru)' and don't have any reviews. He just has photo in his profile, maybe some descriptions and doesn't want to create a video. The tutor prefers to work remotely","3afbccc2":"# Moscow tutor's price prediction","8b4e4a26":"The most popular category for tutoring is 'English' - 31 390 tutors on '*repetit.ru*'. The second is 'Mathematics' - 18 629 tutors. And the third is 'Russian' - 11 751 tutors. Does the current generation of russian kids have problems with the native language? Not necessarily, they just prepare for the compulsory exam '\u0415\u0413\u042d' (The Unified State Exam, Russian: \u0415\u0434\u0438\u043d\u044b\u0439 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u044d\u043a\u0437\u0430\u043c\u0435\u043d, \u0415\u0413\u042d, Yediniy gosudarstvenniy ekzamen, EGE). Not surprising. let's move on.","ecc7ce63":"CrossValidation","9f906a31":"Thus the start price for the tutor is  approximately 1000 rub per hour. Taking into consideration that the MAE is approximately 300 rub we can apply 1300 rub per hour in the end","c71f2e72":"RandomForestRegressor","f9fb22b3":"Features description:\n\n*   **Categories** - Lists of taught subjects out of 27 subjects\n*   **Price** - Price in rub per hour\n*   **Score** - Average score based on the reviews, 0.0-5.0\n*   **Format** - Lists of working formats. Options: remotely, at the tutor's place, at the student's place\n*   **Reviews_number** - Amount of student's reviews in the tutor's profile\n*   **Experience** - Experience in years\n*   **Status** - Current tutor's status. Options: Private tutor, School teacher, Postgraduate student, Native speaker, University professor, Student, not stated (missing)\n*   **Location** - Metro stations or cities on Moscow region\n*   **Tags** - Tutor's services. They are stated by tutors and can differs. They are remained in Russian in the dataset\n*   **Audience** - Tutor's target audience. For example: students, pupils of 10 grades etc. They are stated by tutors and can differs\n*   **Video_presentation** - Video presentation availability\n*   **Photo** - Profile photo availability","e46324b9":"Replacing"}}