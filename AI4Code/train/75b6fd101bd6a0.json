{"cell_type":{"6716e66a":"code","d9824df5":"code","4d7c40d3":"code","0f281ab1":"code","7b512306":"code","34bea629":"code","bb385f50":"code","0a9c59e3":"code","32d3f90f":"code","1c685216":"code","29fb6b80":"code","175be0da":"code","6f6e407a":"code","43c6b2f6":"code","0ce67189":"code","2c2996ff":"code","b528419e":"code","a14811af":"code","8ee3855b":"code","f0b3881b":"code","a2f81d2e":"code","073c3f60":"code","0f4fc5db":"code","a91cf5f3":"code","9369432b":"code","ceda433b":"code","6314ea8b":"code","6c4df1c5":"code","bfd8bc6a":"code","d894c2d5":"code","cd3f647b":"code","6b336857":"code","7d015c97":"code","ca9982fd":"code","03c7f1e9":"code","b5495d20":"code","ffb15f88":"code","94d7fe1e":"code","24cd1de3":"code","fb21a99c":"code","6793ca16":"code","6c964163":"markdown","1703e5e5":"markdown","e6fbf7cb":"markdown","a023ad64":"markdown","d39594c1":"markdown","28bb086b":"markdown","f27852e3":"markdown","d903c16a":"markdown","7654cd69":"markdown","521cb8d6":"markdown","52cfcf67":"markdown","c9c8e161":"markdown","681a349e":"markdown","c71584c5":"markdown","7c7e4f0f":"markdown","74950c40":"markdown","746d69c5":"markdown","2da84163":"markdown","8b0de435":"markdown","29c636dc":"markdown","7e7fc09b":"markdown","185fa31e":"markdown","2f71c0bd":"markdown","0c2747dd":"markdown","cee48a99":"markdown","01303314":"markdown","050777bf":"markdown","bb0c529a":"markdown","b7b919fd":"markdown","24e6d0e7":"markdown"},"source":{"6716e66a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d9824df5":"df = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")","4d7c40d3":"df.shape","0f281ab1":"df.columns","7b512306":"df.head()","34bea629":"df.drop_duplicates(inplace=True)","bb385f50":"df.shape","0a9c59e3":"Catagorical_Features = ['Geography', 'Gender', 'HasCrCard', 'IsActiveMember']","32d3f90f":"sns.violinplot(x=df['Exited'], y=df['CreditScore'])","1c685216":"sns.boxplot(x=df['Exited'], y=df['CreditScore'])","29fb6b80":"sns.barplot(x=df['Geography'], y=df['Exited'])","175be0da":"sns.barplot(x=df['Gender'], y=df['Exited'])","6f6e407a":"sns.violinplot(x=df['Exited'], y=df['Age'])","43c6b2f6":"sns.boxplot(x=df['Exited'], y=df['Age'])","0ce67189":"sns.barplot(x=df['Tenure'], y=df['Exited'])","2c2996ff":"sns.kdeplot(data=df['Balance'],shade=True)","b528419e":"sns.violinplot(x='Exited', y='Balance', data=df)","a14811af":"sns.barplot(x=df['NumOfProducts'], y=df['Exited'])","8ee3855b":"sns.barplot(x='HasCrCard', y='Exited', data=df)","f0b3881b":"sns.barplot(x = df['IsActiveMember'], y= df['Exited'])","a2f81d2e":"sns.boxplot(x=df['Exited'], y=df['EstimatedSalary'])","073c3f60":"sns.violinplot(x=df['Exited'], y=df['EstimatedSalary'])","0f4fc5db":"df.head(5)","a91cf5f3":"df = pd.get_dummies(df,columns=['Geography','Gender'],drop_first=True)","9369432b":"df.head(5)","ceda433b":"df.drop(columns=['RowNumber', 'CustomerId', 'Surname'],inplace=True)","6314ea8b":"df.head()","6c4df1c5":"df.shape","bfd8bc6a":"def person_corr(df):\n    df_dup = df.copy()\n    df_corr = df.corr() # Find Correlation of dataframe\n    col_name = df_corr.columns\n    col = list()\n    for i in df_corr:\n        for j in col_name:\n            if (df_corr[i][j]>0.0) & (i!=j) & (i not in col): # set threshold 0.85\n                col.append(j)\n    df_dup.drop(columns=col,inplace=True)\n    return df_dup","d894c2d5":"df_diff_col = person_corr(df)","cd3f647b":"df.corr()","6b336857":"X_train = df.drop(columns=['Exited'])\ny_train = df['Exited']\n","7d015c97":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.3, random_state=42)","ca9982fd":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold\n","03c7f1e9":"# Cross validate model with Kfold stratified cross val\nkfold = StratifiedKFold(n_splits=10)","b5495d20":"# Modeling step Test differents algorithms \nrandom_state = 2\nclassifiers = []\nclassifiers.append(SVC(random_state=random_state))\nclassifiers.append(DecisionTreeClassifier(random_state=random_state))\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state=random_state),random_state=random_state,learning_rate=0.1))\nclassifiers.append(RandomForestClassifier(random_state=random_state))\nclassifiers.append(ExtraTreesClassifier(random_state=random_state))\nclassifiers.append(GradientBoostingClassifier(random_state=random_state))\nclassifiers.append(MLPClassifier(random_state=random_state))\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression(random_state = random_state))\nclassifiers.append(LinearDiscriminantAnalysis())\n\ncv_results = []\nfor classifier in classifiers :\n    cv_results.append(cross_val_score(classifier, X_train, y = y_train, scoring = \"accuracy\", cv = kfold, n_jobs=4))\n\ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n\ncv_res = pd.DataFrame({\"CrossValMeans\":cv_means,\"CrossValerrors\": cv_std,\"Algorithm\":[\"SVC\",\"DecisionTree\",\"AdaBoost\",\n\"RandomForest\",\"ExtraTrees\",\"GradientBoosting\",\"MultipleLayerPerceptron\",\"KNeighboors\",\"LogisticRegression\",\"LinearDiscriminantAnalysis\"]})\n\ng = sns.barplot(\"CrossValMeans\",\"Algorithm\",data = cv_res)\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")\n","ffb15f88":"#ExtraTrees \nExtC = ExtraTreesClassifier()\n\n\n## Search grid for optimal parameters\nex_param_grid = {\n#               \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[50,100,200,300],\n              \"criterion\": [\"gini\"]}\netc_folds = []\netcc = []\nfor i in range(5,18,2):\n\n    kfold =i\n    gsExtC = GridSearchCV(ExtC,param_grid = ex_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= -1, verbose = 1)\n\n    gsExtC.fit(X_train,y_train)\n\n    ExtC_best = gsExtC.best_estimator_\n    etc_folds.append(gsExtC.best_score_)\n    etcc.append(ExtC_best)\n# Best score\ngsExtC.best_score_\n","94d7fe1e":"# RFC Parameters tunning \nRFC = RandomForestClassifier()\n\n\n## Search grid for optimal parameters\nrf_param_grid = {\n#               \"max_features\": [1, 3, 10],\n              \"min_samples_split\": [2, 3, 10],\n              \"min_samples_leaf\": [1, 3, 10],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[50,100,200,300],\n              \"criterion\": [\"gini\"]}\n\nrfc_folds =[]\nrfcc = []\nfor i in range(5,18,2):\n    kfold = i\n\n    gsRFC = GridSearchCV(RFC,param_grid = rf_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= -1, verbose = 1)\n\n    gsRFC.fit(X_train,y_train)\n\n    RFC_best = gsRFC.best_estimator_\n    \n    rfc_folds.append(gsRFC.best_score_)\n    rfcc.append(RFC_best)\n# Best score\ngsRFC.best_score_","24cd1de3":"# Gradient boosting tunning\n\nGBC = GradientBoostingClassifier()\ngb_param_grid = {'loss' : [\"deviance\"],\n              'n_estimators' : [50,100,200,300,400],\n              'learning_rate': [0.1, 0.05, 0.01,10],\n              'max_depth': [4, 8],\n              'min_samples_leaf': [100,150],\n              'max_features': [0.3, 0.1] \n              }\ngbdt_folds = []\ngbdtt = []\nfor i in range(3,10,2):\n    kfold = i\n    gsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\n    gsGBC.fit(X_train,y_train)\n\n    GBC_best = gsGBC.best_estimator_\n    \n    gbdt_folds.append(gsGBC.best_score_)\n    gbdtt.append(GBC_best)\n# Best score\ngsGBC.best_score_","fb21a99c":"votingC = VotingClassifier(estimators=[('rfc', RFC_best), ('extc', ExtC_best),('gbc',GBC_best)], voting='soft', n_jobs=4)","6793ca16":"votingC = VotingClassifier(estimators=[('etc', etcc[etc_folds.index(max(etc_folds))]),('rfc', rfcc[rfc_folds.index(max(rfc_folds))]), ('gbdt',gbdtt[gbdt_folds.index(max(gbdt_folds))])], voting='soft', n_jobs=4)\n\nvotingC = votingC.fit(X_train, y_train)\n\nexited_pred = pd.Series(votingC.predict(X_test), name=\"Exited_pred\")\n\ny_test.reset_index(drop=True, inplace=True)\n\nresults = pd.concat([y_test, exited_pred],axis=1)\n\nresults.to_csv(\"churn_modling.csv\",index=False)","6c964163":"here higher chance of close account who is not active member.","1703e5e5":"**6. Balance**","e6fbf7cb":"# 3. Data Preprocesing","a023ad64":"**8. HasCrCard**","d39594c1":"German person have almost double probablity of close account compare to other.","28bb086b":"**9. IsActiveMember**","f27852e3":"**convert catagorical value in numeric value**","d903c16a":"# 4. Train Model","7654cd69":"we don't get any usefull information from EstimatedSalary column.","521cb8d6":"**1. CreditScore**","52cfcf67":"**4. Age**","c9c8e161":"**10. EstimatedSalary**","681a349e":"# 1. Import Liberary","c71584c5":"customer utilize more then 2 bank products then there are higher chance that customer close account.","7c7e4f0f":"age is between 30 to 40 then less chance of close account but age between 41 to 50 then more chance of close account.","74950c40":"# 2. Exploratory Data Analysis","746d69c5":"**3. Gender**","2da84163":"Here RandomForest, ExtraTrees, GradientBoosting have high score so we use that classifier","8b0de435":"# Churn Modeling\n\nThis data set contains details of a bank's customers and the target variable is a binary variable reflecting the fact whether the customer left the bank (closed his account) or he continues to be a customer.\n\nHere we have 13 feature columns and **Exited** is a target column.\n\n**Row Numbers:-**\nRow Numbers from 1 to 10000.\n\n\n**CustomerId:-**\nUnique Ids for bank customer identification.\n\n**Surname:-**\nCustomer's last name.\n\n**CreditScore:-**\nCredit score of the customer.\n\n**Geography:-**\nThe country from which the customer belongs(Germany\/France\/Spain).\n\n**Gender:-**\nMale or Female(Female\/Male).\n\n**Age:-**\nAge of the customer.\n\n**Tenure:-**\nNumber of years for which the customer has been with the bank.\n\n**Balance:-**\nBank balance of the customer.\n\n**NumOfProducts:-**\nNumber of bank products the customer is utilising.\n\n**HasCrCard:-**\nBinary Flag for whether the customer holds a credit card with the bank or not(0=No,1=Yes).\n\n**IsActiveMember:-**\nBinary Flag for whether the customer is an active member with the bank or not(0=No,1=Yes).\n\n**EstimatedSalary:-**\nEstimated salary of the customer in Dollars.\n\n**Exited:-**\nBinary flag 1 if the customer closed account with bank and 0 if the customer is retained(0=No,1=Yes).","29c636dc":"CreditScore is lessthen 400 then high chance that account will closed.","7e7fc09b":"female close more account compare to male.","185fa31e":"we don't show any mejor diffrence who have cradit card or not.","2f71c0bd":"Here RowNumber, CustomerId and Surname is not use in churn modeling","0c2747dd":"We don't have duplicate values.","cee48a99":"here we don't have correlated columns.","01303314":"if balance is between 90000 to 150000 then it is more chance the account is close but balance is 0 then less chance for close account.","050777bf":"**2. Geography**","bb0c529a":"here we have 12 columns and we find correlation between them. Threshold = 0.85 ","b7b919fd":"**7. NumOfProducts**","24e6d0e7":"**5. Tenure**"}}