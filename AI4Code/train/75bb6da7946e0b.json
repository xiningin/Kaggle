{"cell_type":{"c96db33d":"code","7e2bcbf7":"code","438e7cad":"code","ffeb644e":"code","b57c68c0":"code","28f3eb14":"code","00b1f4e3":"code","0d011aba":"code","dca9fd8b":"code","6c6703ab":"code","f7826845":"code","bebb818a":"code","8b3d4e89":"code","5d577108":"code","af162439":"code","e59024f0":"markdown","167133ab":"markdown"},"source":{"c96db33d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport seaborn as sns\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e2bcbf7":"insurance = pd.read_csv('..\/input\/insurance\/insurance.csv')\n\nprint('Head\\n' + '=' * 60)\nprint(insurance.head())\nprint('\\n')\nprint('Descriptive Statistics\\n' + '=' * 60)\nprint(insurance.describe()) \nprint('\\n')\nprint('Dataset info\\n' +'=' * 60)\nprint(insurance.info())","438e7cad":"# look for missing values\nprint(insurance.isnull().sum())","ffeb644e":"sns.set_theme(style=\"whitegrid\")\nax = sns.boxenplot(data=insurance, \n                 x='region', \n                 y= 'age',\n                 hue='smoker')","b57c68c0":"sns.set_theme(style=\"whitegrid\")\nax = sns.boxenplot(data=insurance, \n                 x='region', \n                 hue='smoker', \n                 y= 'charges')","28f3eb14":"sns.set_theme(style=\"whitegrid\")\nax = sns.boxenplot(data=insurance, \n                 x='children', \n                 hue='smoker', \n                 y= 'charges')","00b1f4e3":"sns.scatterplot(data=insurance, \n                x=\"age\",\n                y=\"charges\", \n                hue=\"smoker\")","0d011aba":"sns.scatterplot(data=insurance, \n                x=\"age\",\n                y=\"charges\", \n                hue=\"sex\")","dca9fd8b":"sns.scatterplot(data=insurance, \n                x=\"bmi\",\n                y=\"charges\", \n                hue=\"smoker\")","6c6703ab":"sns.scatterplot(data=insurance, x=\"bmi\", y=\"charges\", hue=\"smoker\", size=\"children\")","f7826845":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.inspection import permutation_importance\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline","bebb818a":"y = insurance['charges']\nX = insurance.drop('charges', axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y, \n                                                    random_state=0)\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\n\nX_train.head()","8b3d4e89":"pipe_LR = Pipeline([\n                    ('scaler', StandardScaler()),\n                   ('model', LinearRegression())])\npipe_R = Pipeline([\n                   ('scaler', StandardScaler()),\n                   ('model', Ridge())])\npipe_DTR = Pipeline([\n                     ('scaler', StandardScaler()),\n                   ('model', DecisionTreeRegressor())])\npipe_XGB = Pipeline([\n                   ('model', GradientBoostingRegressor())])\n\npipelines = [pipe_LR, pipe_R, pipe_DTR, pipe_XGB]\n\ndef train_pipelines (pipelines):\n    \n    scores = []\n    for pipe in pipelines:\n        model = pipe.fit(X_train, y_train)\n        \n        pred = model.predict(X_test)\n        score = mean_squared_error(pred, y_test)\n        scores.append(score)\n    return scores\n\nprint(train_pipelines(pipelines))\n","5d577108":"from sklearn.model_selection import GridSearchCV\n\nparameters = {\n              'learning_rate':[0.001, 1],\n              'n_estimators': [1, 1000],\n              'max_depth' : [1, 5]}\nclf = GridSearchCV(GradientBoostingRegressor(), parameters)\nclf.fit(X_train, y_train)\n\nprint(clf.get_params())\n\npred = clf.predict(X_test)\nprint(mean_squared_error(pred, y_test))","af162439":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nperm = PermutationImportance(clf).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","e59024f0":"# Exploratory Data Analysis","167133ab":"# Creating a Model"}}