{"cell_type":{"170abdb9":"code","af8f1fcb":"code","9a3a20b3":"code","f69db6a1":"code","c7bcdd43":"code","e2885369":"code","57ffcede":"code","8fc94eea":"code","c890ecfe":"code","33a9bcdd":"code","42b1d6b6":"code","a7d6c579":"code","aa56649c":"code","dd7f0920":"code","b39ec331":"code","f16ba958":"code","8180e9a9":"code","1fbfd2b6":"code","23aec8f9":"code","b7bbd074":"code","2470b040":"code","fc310c8f":"code","0c63070b":"code","2c556d7f":"code","4e0a0576":"code","e74ac122":"code","6932880a":"code","5ee53a43":"code","2967788a":"code","0baa1a97":"code","9623428d":"code","c5f9788f":"code","d015a870":"code","a51a2028":"code","5174df00":"code","68c9030f":"code","00af9e31":"code","dcebc4a9":"code","0fa2411f":"code","469c0a07":"code","d283d2bf":"code","a79b2384":"code","c6b6d85b":"code","b6d6787b":"code","8444df68":"code","8033c910":"code","333d4c5a":"markdown","5b967726":"markdown","468d1968":"markdown","990d739a":"markdown","8c7dd2a3":"markdown","4170b1f9":"markdown","eb938197":"markdown","c5de3e3b":"markdown","5456d092":"markdown","3504cd17":"markdown","a1fd8790":"markdown","140def7d":"markdown","525a8ce8":"markdown","5ecb6e72":"markdown","4d59a19f":"markdown","54277a0f":"markdown","58b3079f":"markdown","fde1cfda":"markdown","12389958":"markdown","e09f7166":"markdown","faa108eb":"markdown","0fe7bac7":"markdown","f52d3cfc":"markdown","c2e260da":"markdown","33463f22":"markdown","b3329a23":"markdown","d03fd139":"markdown","fa2339da":"markdown","a8a7d244":"markdown","d8552ed1":"markdown","7f47f3eb":"markdown","a689cc1d":"markdown","3f70e580":"markdown","c5cff84a":"markdown","90ac6d57":"markdown","62d4bc99":"markdown","ed69082e":"markdown","b2d6ad00":"markdown","f2322855":"markdown","891e7b24":"markdown"},"source":{"170abdb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","af8f1fcb":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\nfrom wordcloud import WordCloud\n\n# display settings\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)","9a3a20b3":"# initializing dataframe\ndf = pd.read_csv(\"\/kaggle\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv\")","f69db6a1":"# dataframe shape\ndf.shape","c7bcdd43":"# column info\nlist(df.columns)","e2885369":"# columns info\ndf.info()","57ffcede":"# printing the first 5 rows\ndf.head()","8fc94eea":"# dropping the columns URL, ID, Icon URL\ndf.drop(columns=[\"URL\",\"ID\",\"Icon URL\"], inplace=True)","c890ecfe":"# finding the no. of missing values in each column\ndf.isna().sum()","33a9bcdd":"# taking an initial look at the values and scanning for junk values\ndf[\"Subtitle\"].dropna().head()","42b1d6b6":"# no. of rows in each rating bracket\ndf[\"Average User Rating\"].value_counts()","a7d6c579":"# summary statistics\ndf[\"Average User Rating\"].describe()","aa56649c":"# plotting the boxplot to understand the outliers\nsns.boxplot(df[\"Average User Rating\"])\nplt.show()","dd7f0920":"# taking an initial look at the values and scanning for junk values\ndf[\"User Rating Count\"].dropna().sort_values().head()","b39ec331":"# summary statistics\ndf[\"User Rating Count\"].describe()","f16ba958":"# boxplot and distribution plot\nfig, ax = plt.subplots(1,2, figsize=(15,6))\nsns.distplot(df[\"User Rating Count\"].dropna(), ax=ax[0])\nsns.boxplot(df[\"User Rating Count\"].dropna(), ax=ax[1])\nplt.show()","8180e9a9":"# checking the different price brackets\ndf[\"Price\"].value_counts().sort_index()","1fbfd2b6":"# summary statistics\ndf[\"Price\"].describe()","23aec8f9":"# splitting the string into float values and storing them as a list\ndf[\"In-app Purchases\"] = df[\"In-app Purchases\"].dropna().map(lambda x: list(float(i) for i in x.split(\", \")))","b7bbd074":"# splitting the string and storing the values as a list\ndf[\"Languages\"] = df[\"Languages\"].dropna().map(lambda x: x.split(\", \"))","2470b040":"# filling the missing value\ndf[\"Size\"].fillna(method=\"ffill\", inplace=True)","fc310c8f":"# converting size in bytes to mega-bytes\ndf[\"Size\"] = df[\"Size\"].map(lambda x: round(x\/(1024 * 1024), 2))\ndf[\"Size\"].head()","0c63070b":"# splitting the string and storing the values as a list\ndf[\"Genres\"] = df[\"Genres\"].map(lambda x: x.split(\", \"))\ndf[\"Genres\"].head()","2c556d7f":"# converting string to date\ndf[\"Original Release Date\"] = df[\"Original Release Date\"].map(lambda x: datetime.strptime(x, \"%d\/%m\/%Y\"))","4e0a0576":"# converting string to date\ndf[\"Current Version Release Date\"] = df[\"Current Version Release Date\"].map(lambda x: datetime.strptime(x, \"%d\/%m\/%Y\"))","e74ac122":"# categorizing price\ndf[\"Price Range\"] = df[\"Price\"].dropna().map(lambda x: \"Free\" if x == 0.00 else(\"Low Price\" if 0.99 <= x <= 4.99 else(\"Medium Price\" if 5.99 <= x <= 19.99 else \"High Price\")))\ndf[\"Price Range\"].value_counts()","6932880a":"df[\"Total In-app Purchases\"] = df[\"In-app Purchases\"].dropna().map(lambda x: sum(x))\ndf[\"Total In-app Purchases\"].dropna().value_counts().head()","5ee53a43":"df[\"Game Genre\"] = df[df[\"Primary Genre\"] == \"Games\"][\"Genres\"].map(lambda x: x[1])\ndf[\"Game Genre\"].head()","2967788a":"df[\"Release Year\"] = df[\"Original Release Date\"].map(lambda x: x.strftime(\"%Y\"))\ndf[\"Release Month\"] = df[\"Original Release Date\"].map(lambda x: x.strftime(\"%m\"))","0baa1a97":"df.info()","9623428d":"top_genres = list(df[\"Primary Genre\"].value_counts().head(10).index)","c5f9788f":"df[df[\"Primary Genre\"].isin(top_genres)][\"Primary Genre\"].value_counts().plot.bar(figsize=(8,5))\nplt.title(\"Bar plot of primary genre wise apps\")\nplt.show()","d015a870":"def word_cloud(list_variable):\n    fig, ax = plt.subplots(1,3, figsize=(15,4))\n    for i, variable in enumerate(list_variable):\n        corpus = df[variable].dropna()\n        if variable not in (\"Genres\"):\n            corpus = corpus.map(lambda x: x.replace(\",\", \"\").split(\" \"))\n            corpus = corpus.map(lambda x: [word for word in x if len(word) > 3])\n        corpus = \",\".join(word for word_list in corpus for word in word_list)\n        wordcloud = WordCloud(max_font_size=None, background_color=\"white\", collocations=False, width=1500, height=1500).generate(corpus)\n        ax[i].imshow(wordcloud)\n        ax[i].set_title(variable)\n        ax[i].axis(\"off\")\n    plt.show()\n\nword_cloud([\"Genres\", \"Subtitle\", \"Description\"])","a51a2028":"df[df[\"Primary Genre\"].isin(top_genres)].groupby(\"Primary Genre\")[\"Average User Rating\"].agg(\"mean\").sort_values().plot.bar(figsize=(8,6))\nplt.title(\"Primary Genre wise Average User Rating\")\nplt.show()","5174df00":"ct_genre_agerating = pd.crosstab(df[df[\"Primary Genre\"].isin(top_genres)][\"Primary Genre\"], df[\"Age Rating\"], normalize=0)\nct_genre_agerating.plot.bar(stacked=True, figsize=(8,5))\nplt.title(\"Primary Genre repartition by Age Rating\")\nplt.show()","68c9030f":"df[\"Age Rating\"].value_counts().plot.pie(autopct=\"%1.1f\", explode=[0,0,0.1,0], figsize=(6,6))\nplt.title(\"Age Rating wise app proportions\")\nplt.show()","00af9e31":"plt.figure(figsize=(12,6))\nsns.barplot(data=df[df[\"Primary Genre\"].isin(top_genres)], x=\"Primary Genre\", y=\"Size\")\nplt.xticks(rotation=90)\nplt.title(\"Primary Genre wise average size of apps\")\nplt.show()","dcebc4a9":"df[\"Price Range\"].dropna().value_counts().plot.pie(autopct=\"%1.1f\", explode=[0,0.1,0,0], figsize=(6,6))\nplt.title(\"Price Range wise proportion of apps\")\nplt.show()","0fa2411f":"ct_agerating_pricerange = pd.crosstab(df[\"Age Rating\"], df[\"Price Range\"], normalize=0)\nct_agerating_pricerange.plot.bar(stacked=True, figsize=(8,5))\nplt.xticks(rotation=0)\nplt.title(\"Age Rating repartioned by Price Range\")\nplt.show()","469c0a07":"plt.figure(figsize=(8,5))\nsns.barplot(data=df, x=\"Price Range\", y=\"Average User Rating\")\nplt.title(\"Average user rating in each price range\")\nplt.show()","d283d2bf":"fig, ax = plt.subplots(2,2, figsize=(15,10))\nsns.barplot(data=df[df[\"Primary Genre\"].isin(top_genres)], x=\"Primary Genre\", y=df[\"In-app Purchases\"].dropna().map(lambda x: len(x)), ax=ax[0,0]).set_xticklabels(ax[0,0].get_xticklabels(), rotation=45)\nsns.barplot(data=df, x=\"Age Rating\", y=df[\"In-app Purchases\"].dropna().map(lambda x: len(x)), ax=ax[0,1])\nsns.barplot(data=df[df[\"Primary Genre\"].isin(top_genres)], x=\"Primary Genre\", y=\"Total In-app Purchases\", ax=ax[1,0]).set_xticklabels(ax[1,0].get_xticklabels(), rotation=90)\nsns.barplot(data=df, x=\"Age Rating\", y=\"Total In-app Purchases\", ax=ax[1,1])\nax[0,0].set_title(\"Average no. of in-app purchase in each genre\")\nax[0,1].set_title(\"Average no. of in-app purchase in each age rating\")\nax[1,0].set_title(\"Average value of in-app purchase in each genre\")\nax[1,1].set_title(\"Average value of in-app purchase in each age rating\")\nplt.show()","a79b2384":"# creating list of top game genres\ntop_game_genre = list(df[\"Game Genre\"].value_counts().head(11).index)","c6b6d85b":"fig, ax = plt.subplots(1,2, figsize=(15,5))\nsns.countplot(data=df[df[\"Game Genre\"].isin(top_game_genre)], x=\"Game Genre\", ax=ax[0]).set_xticklabels(ax[0].get_xticklabels(), rotation=90)\nsns.barplot(data=df[df[\"Game Genre\"].isin(top_game_genre)], x=\"Game Genre\", y=\"Average User Rating\", ax=ax[1]).set_xticklabels(ax[1].get_xticklabels(), rotation=90)\nax[0].set_title(\"Count of games in each genre\")\nax[1].set_title(\"Average rating of games in each genre\")\nplt.show()","b6d6787b":"fig, ax = plt.subplots(1,2, figsize=(18,5))\nsns.barplot(data=df[df[\"Game Genre\"].isin(top_game_genre)], x=\"Game Genre\", y=df[\"In-app Purchases\"].dropna().map(lambda x: len(x)), ax=ax[0]).set_xticklabels(ax[0].get_xticklabels(), rotation=90)\nsns.barplot(data=df[df[\"Game Genre\"].isin(top_game_genre)], x=\"Game Genre\", y=\"Total In-app Purchases\", ax=ax[1]).set_xticklabels(ax[0].get_xticklabels(), rotation=90)\nax[0].set_title(\"Average no. of in-app purchases game genre wise\")\nax[1].set_title(\"Average total value of in-app purchases game genre wise\")\nplt.show()","8444df68":"plt.figure(figsize=(10,8))\nsns.heatmap(df[[\"Price\",\"Average User Rating\",\"Total In-app Purchases\",\"Age Rating\",\"Size\"]].corr(), annot=True, cmap=\"coolwarm\")\nplt.show()","8033c910":"fig, ax = plt.subplots(1,2, figsize=(20,6))\ndf.groupby(\"Release Year\")[\"Name\"].agg(\"count\").plot(ax=ax[0])\ndf.groupby(\"Release Month\")[\"Name\"].agg(\"count\").plot(ax=ax[1])\nax[0].set_ylabel(\"No. of apps\")\nax[1].set_ylabel(\"No. of apps\")\nax[0].set_title(\"No. of apps released in each year\")\nax[1].set_title('No. of apps released in each month')\nplt.show()","333d4c5a":"Looks like we can categorize the price into price range brackets.","5b967726":"## Genre wise age rating proportions.\n* In all the genres, 4+ age rating is having the higest proportion of apps.\n* Productivity genre is having all of its apps with 4+ age rating.\n* Sports genre is having almost 50% of the apps under 12+ and 17+ rating. ","468d1968":"## Which genre and age rating has the most number of in-app purchases on average?\n* Finance genre is having the highest no. of in-app purhases on average.\n* Finance and Games genres are having more no. of in-app purhases than education on an average.\n* Age rating group 12+ is having the highest no. of in-app purhases on average.\n\n## Which genre and age rating has the highest value of in-app purchases on average?\n* Finance genre is having the highest value of in-app purchases on average.\n* Age rating 12+ is having the highest value of in-app purchases on average.","990d739a":"Looks like there are no junk values.","8c7dd2a3":"## Correlation heat map of continuous variables\n* There seems to be no strong positive or negative correlation between any two continuous variables.","4170b1f9":"## Which genres is games are having most no. of games?\n* Strategy genre is having the most no. of games.\n\n## What is the highest rated genre?\n* There seems to be no difference in the average user rating across genres.","eb938197":"### User Rating Count","c5de3e3b":"## Which age rating has the highest and least proportion of apps?\n* Age rating 4+ has the highest proportion of apps.\n* Age rating 17+ has the least proportion of apps.\n* As age rating increases, proportion of apps decreases.","5456d092":"# Reading and understanding data","3504cd17":"### Columns info:\n**URL** The URL\n<br>**ID** The assigned ID\n<br>**Name** The name\n<br>**Subtitle** The secondary text under the name\n<br>**Icon URL** 512px x 512px jpg\n<br>**Average User Rating** Rounded to nearest .5, requires at least 5 ratings\n<br>**User Rating Count** Number of ratings internationally, null means it is below 5\n<br>**Price** Price in USD\n<br>**In-app Purchases** Prices of available in-app purchases\n<br>**Description** App description\n<br>**Developer** App developer\n<br>**Age Rating** Either 4+, 9+, 12+ or 17+\n<br>**Languages** ISO2A language codes\n<br>**Size** Size of the app in bytes\n<br>**Primary Genre** Main genre\n<br>**Genres** Genres of the app\n<br>**Original Release Date** When it was released\n<br>**Current Version Release Date** When it was last updated","a1fd8790":"### Release Year and Month","140def7d":"## Average size of apps in each Primary Genre\n* Games genre is having average highest average size of apps, around 110 MB.","525a8ce8":"### Size","5ecb6e72":"# Data pre-processing and cleaning","4d59a19f":"### Original Release Date","54277a0f":"## Age Rating repartitioned by Price Range\n* There seems to be no significant change in the proportion of price range in all the four age rating categories.","58b3079f":"Looks like there are few outlier values at the higher end. Let's plot boxplot to find it out.","fde1cfda":"## Average user rating for each price range\n* There seems to be no difference in average user rating across price range.","12389958":"### Genres","e09f7166":"Since these are user rating count values, we do not clean the outliers as they have no or little impact. ","faa108eb":"### Average User Rating","0fe7bac7":"## Which Primary Genre has most no. of apps?\n* Clearly, Games genre is having unparalleled edge over the other genres.","f52d3cfc":"### Dropping the unnecessary columns","c2e260da":"### Column-wise missing values ","33463f22":"## Timeseries analysis of apps\n* No. of apps released showed increasing trend till 2016, peaked in 2016, and then decreased in following years.\n* No. of apps released in highest during the month of September.","b3329a23":"### Languages","d03fd139":"## Which price range bracket has the highest and least proportion of apps?\n* Most of the apps available are for free (83.7%).\n* There are few apps which are medium (1.6%) and high (0.2%) priced.\n* As the price of the apps increases, we see number of apps descreases drastically.","fa2339da":"# Exploratory data analysis","a8a7d244":"### Price","d8552ed1":"## What is the highest and lowest rated genre?\n* Sports genre is having the highest average user rating.\n* Business genre is having the lowest average user rating.","7f47f3eb":"## What are the most popular genres?\n* Games, Strategy and Entertainment are the three most popular genres.\n* Strategy, Battle and Puzzle are the most frequently used words in subtitles.","a689cc1d":"## Total In-app Purchases\n\nCreating a new variable to show the sum of the In-app Purchases values.","3f70e580":"### In-app Purchaces","c5cff84a":"## Game Genre\nCreating a new variable to capture the genre of each game.","90ac6d57":"## In-app purchases trend in different genres of games\n* Role playing games are having highest no. of in-app purchases and total value of in-app purchases on an average.","62d4bc99":"# Feature engineering","ed69082e":"## Pricing bracket\nCreating four pricing brackets based on the Price variable.\n\n**Free** 0.00\n<br>**Low Price** 0.99 - 4.99\n<br>**Medium Price** 5.99 - 19.99\n<br>**High Price** > 19.99","b2d6ad00":"### Current Version Release Date","f2322855":"### Subtitle","891e7b24":"Looks like there are no (negligeble) outliers or junk values."}}