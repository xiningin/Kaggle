{"cell_type":{"c3a10c51":"code","74cd4e44":"code","26dcfc92":"code","e1529420":"code","a10e345b":"code","119d3644":"code","4f246d85":"code","aeed400b":"code","bac9fa2b":"code","fa9c405e":"code","b6467fbc":"code","eea3eddf":"code","cec3bb98":"code","725db480":"code","8be35766":"code","e2f3aef1":"code","612808f2":"code","33fb2bef":"code","fa4182c9":"code","bbfc4ce2":"code","9fada1c8":"code","fc2944cd":"code","bde1ac9b":"code","7a07b248":"code","8f15d5aa":"code","8f5ea82a":"code","bd5fd51e":"code","81895d64":"code","f7d1fc26":"code","6ea0dc58":"code","2c8965cc":"code","ca78f330":"code","696769c8":"code","7e600919":"code","805b1ae9":"code","c0e31071":"code","b6682e68":"code","48ac1b1e":"code","b2e7f8fb":"code","cbbb1b42":"code","ddb4b63f":"code","468e4b3b":"code","29e719f3":"markdown","5571fb49":"markdown","14916a92":"markdown","e3de8a35":"markdown","6ad7fa8e":"markdown","8ff80250":"markdown","c2fa6859":"markdown","bcecba73":"markdown","81b7c59f":"markdown","32a48bea":"markdown","4b0b6764":"markdown","749215a1":"markdown","5e30ac93":"markdown","beaa3825":"markdown"},"source":{"c3a10c51":"!pip install lightautoml","74cd4e44":"!pip install torch","26dcfc92":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime as dt\nimport warnings\n\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import OneHotEncoder as OHE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier as RFC\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression as LR\nfrom sklearn.model_selection import GridSearchCV\n\nfrom scipy.sparse import csr_matrix as csr\nfrom scipy.sparse import hstack","e1529420":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a10e345b":"df = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","119d3644":"df.head()","4f246d85":"df.describe()","aeed400b":"def season_finder(x):\n    y = dt.strptime(x, \"%Y-%m-%d\").month\n    if y in [12, 1, 2]:\n        return 'summer', y\n    elif y in [3, 4, 5]:\n        return 'autumn', y\n    elif y in [6, 7, 8]:\n        return 'winter', y\n    else:\n        return 'spring', y\n\n\ndf['Season'], df['month'] = zip(*df.Date.apply(season_finder))","bac9fa2b":"new_df = pd.DataFrame(columns=df.columns.tolist())\n\nfor month in df.month.unique().tolist():\n    new_df = pd.concat([new_df, df[df.month == month].fillna(df[df.month == month].mean())])","fa9c405e":"new_df.isna().sum()","b6467fbc":"new_df.dropna(subset=['RainTomorrow', 'RainToday'], inplace=True)\n\nnew_df.sort_values(by='Date', ignore_index=True, inplace=True)\n\nfor na_col in ['WindGustDir', 'WindDir9am', 'WindDir3pm']:\n    new_df[na_col].fillna(method='ffill', inplace=True)\n    \nnew_df.set_index('Date', inplace=True)","eea3eddf":"new_df.isna().sum()","cec3bb98":"new_df.replace(['Yes', 'No'], [1, 0], inplace=True)","725db480":"new_df.head()","8be35766":"ohe_cols = ['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'Season', 'month']\n\nprep_df = new_df[[x for x in new_df.columns if x not in ohe_cols]].copy()\n\nohe_df = new_df[ohe_cols].copy()","e2f3aef1":"ohe = OHE()\n\nohe_prep = ohe.fit_transform(ohe_df)","612808f2":"target = new_df[\"RainTomorrow\"]\nfeatures = hstack([csr(prep_df.drop(\"RainTomorrow\", axis = 1).values), ohe_prep])","33fb2bef":"X_train, X_test, y_train, y_test = train_test_split(features, target, random_state=42)","fa4182c9":"rfc = RFC(n_estimators=100, n_jobs=-1)\n\nrfc.fit(X_train, y_train)","bbfc4ce2":"y_pred = rfc.predict(X_test)","9fada1c8":"rf_metrics = pd.DataFrame(data={'metric': ['accuracy', 'f1', 'precision', 'recall', 'roc_auc'],\n                             'score':[metrics.accuracy_score(y_test, y_pred),\n                                      metrics.f1_score(y_test, y_pred),\n                                      metrics.precision_score(y_test, y_pred),\n                                      metrics.recall_score(y_test, y_pred),\n                                      metrics.roc_auc_score(y_test, y_pred)]})","fc2944cd":"rf_metrics","bde1ac9b":"parameters = {'penalty':('l1', 'l2', 'elasticnet'), 'C':[0.1, 1.0, 10.0, 100.0]}\n\nclf = GridSearchCV(LR(), parameters, n_jobs=-1, scoring='accuracy')\nclf.fit(X_train, y_train)\n\nclf.best_params_","7a07b248":"lr = LR(C=0.1, n_jobs=-1)\nlr.fit(X_train, y_train)","8f15d5aa":"vfunc = np.vectorize(lambda x: 1 if x > 0.35 else 0)\n\nlr_y_pred = vfunc(lr.predict_proba(X_test)[:, 1])","8f5ea82a":"lr_metrics = pd.DataFrame(data={'metric': ['accuracy', 'f1', 'precision', 'recall', 'roc_auc'],\n                             'score':[metrics.accuracy_score(y_test, lr_y_pred),\n                                      metrics.f1_score(y_test, lr_y_pred),\n                                      metrics.precision_score(y_test, lr_y_pred),\n                                      metrics.recall_score(y_test, lr_y_pred),\n                                      metrics.roc_auc_score(y_test, lr_y_pred)]})","bd5fd51e":"lr_metrics","81895d64":"import torch\n\nfrom lightautoml.automl.base import AutoML\nfrom lightautoml.ml_algo.boost_lgbm import BoostLGBM\nfrom lightautoml.ml_algo.tuning.optuna import OptunaTuner\nfrom lightautoml.pipelines.features.lgb_pipeline import LGBSimpleFeatures\nfrom lightautoml.pipelines.ml.base import MLPipeline\nfrom lightautoml.pipelines.selection.importance_based import ImportanceCutoffSelector, ModelBasedImportanceEstimator\nfrom lightautoml.reader.base import PandasToPandasReader\nfrom lightautoml.tasks import Task\nfrom lightautoml.utils.profiler import Profiler\nfrom lightautoml.automl.blend import WeightedBlender","f7d1fc26":"N_THREADS = 4\nN_FOLDS = 5\nRANDOM_STATE = 42","6ea0dc58":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","2c8965cc":"task = Task('binary')\nreader = PandasToPandasReader(task, cv=N_FOLDS, random_state=RANDOM_STATE)","ca78f330":"model0 = BoostLGBM(\n    default_params={'learning_rate': 0.05, 'num_leaves': 64, 'seed': 42, 'num_threads': N_THREADS}\n)\npipe0 = LGBSimpleFeatures()\nmbie = ModelBasedImportanceEstimator()\nselector = ImportanceCutoffSelector(pipe0, model0, mbie, cutoff=0)","696769c8":"pipe = LGBSimpleFeatures()\n\nparams_tuner1 = OptunaTuner(n_trials=20, timeout=60)\n\nmodel1 = BoostLGBM(default_params={'learning_rate': 0.05, 'num_leaves': 128, 'seed': 1, 'num_threads': N_THREADS})\n\nmodel2 = BoostLGBM(default_params={'learning_rate': 0.025, 'num_leaves': 64, 'seed': 2, 'num_threads': N_THREADS})\n\npipeline_lvl1 = MLPipeline([(model1, params_tuner1),model2],\n                           pre_selection=selector,\n                           features_pipeline=pipe,\n                           post_selection=None)","7e600919":"pipe1 = LGBSimpleFeatures()\n\nmodel = BoostLGBM(default_params={'learning_rate': 0.05,\n                                  'num_leaves': 64,\n                                  'max_bin': 1024,\n                                  'seed': 3,\n                                  'num_threads': N_THREADS},\n                  freeze_defaults=True)\n\npipeline_lvl2 = MLPipeline([model], pre_selection=None, features_pipeline=pipe1, post_selection=None)","805b1ae9":"automl = AutoML(reader, [[pipeline_lvl1], [pipeline_lvl2]], skip_conn=False)","c0e31071":"n, m = csr(y_train).get_shape()\n\ntrain_data = hstack([X_train, csr(y_train).reshape(m, n)])\n\ntrain_df = pd.DataFrame(data=train_data.toarray())\n\ntrain_df.rename(columns={x:str(x) for x in train_df.columns if x != 130}, inplace=True)\ntrain_df.rename(columns={130: 'target'}, inplace=True)","b6682e68":"autopred = automl.fit_predict(train_df, roles={'target': 'target'})","48ac1b1e":"test_df = pd.DataFrame(data=X_test.toarray())\n\ntest_df.rename(columns={x:str(x) for x in test_df.columns}, inplace=True)","b2e7f8fb":"pred = automl.predict(test_df)","cbbb1b42":"automl_pred = vfunc(pred.data[:, 0])","ddb4b63f":"automl_metrics = pd.DataFrame(data={'metric': ['accuracy', 'f1', 'precision', 'recall', 'roc_auc'],\n                             'score':[metrics.accuracy_score(y_test, automl_pred),\n                                      metrics.f1_score(y_test, automl_pred),\n                                      metrics.precision_score(y_test, automl_pred),\n                                      metrics.recall_score(y_test, automl_pred),\n                                      metrics.roc_auc_score(y_test, automl_pred)]})","468e4b3b":"automl_metrics","29e719f3":"# AutoML","5571fb49":"result","14916a92":"# Logistic Regression + GridSearch","e3de8a35":"turning our sparce matrix back to data frame (now for test-data)","6ad7fa8e":"# Random Forest","8ff80250":"turning our sparce matrix back to data frame","c2fa6859":"check that no nan-values are left","bcecba73":"# Dataset Preparation","81b7c59f":"roc_auc is decent, but recall is quite low, so we need to continue our search","32a48bea":"result","4b0b6764":"check for nan-values","749215a1":"* best accuracy from all models\n* best f1 from all models\n* best roc auc from all models\n* best tradeoff between precision and recall","5e30ac93":"result","beaa3825":"now recall is much better, but precision dropped from ca. 0.8 to 0.614"}}