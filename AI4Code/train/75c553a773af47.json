{"cell_type":{"4cf88506":"code","7f520097":"code","2b4f28d5":"code","57520fc8":"code","b408816d":"code","fadb16c0":"code","7d97c8a3":"code","0535fc7d":"code","1cf7bda8":"code","f1942d51":"code","87faa46e":"code","6c650066":"code","00d52dc4":"code","b73cc72d":"code","4cca78b8":"code","f0aeec17":"code","bf2f259a":"code","4f184a1a":"code","4248b1d9":"code","688b8c83":"code","72b5b97e":"code","2d6dd50d":"code","14812651":"code","8c040b9e":"code","de8b897e":"code","92652870":"code","465d0d5c":"markdown","7f7e8254":"markdown","bdaa78fc":"markdown","dbcd7eec":"markdown","b46ed955":"markdown","6761c98f":"markdown"},"source":{"4cf88506":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7f520097":"datag = pd.read_csv(\"..\/input\/student-grades-record\/grade-records.csv\")","2b4f28d5":"datag.head()","57520fc8":"datag['First Name']","b408816d":"datag.tail()","fadb16c0":"datag.columns","7d97c8a3":"datag.shape","0535fc7d":"datag.info()","1cf7bda8":"datag.dtypes\ndatag.head()\n\n\n#removes spaces form the columns:\ndatag = datag.rename(columns={c: c.replace(' ', '') for c in datag.columns})\ndatag.head()\n\n# convert percentage to float\ndatag['CW1'] = datag['CW1'].apply(lambda x: x.replace('%', '')).astype('float') \/ 100\n#\ndatag['Finalexam'] = datag['Finalexam'].apply(lambda x: x.replace('%', '')).astype('float') \/ 100\ndatag['CW2'] = datag['CW2'].apply(lambda x: x.replace('%', '')).astype('float') \/ 100\ndatag['Mid-termexams'] = datag['Mid-termexams'].apply(lambda x: x.replace('%', '')).astype('float') \/ 100\n\ndatag.head()\n\n# convert to integer\ndatag['CW1'] = (datag['CW1']*100).astype('int')\ndatag['CW2'] = (datag['CW2']*100).astype('int')\ndatag['Finalexam'] = (datag['Finalexam']*100).astype('int')\ndatag['Mid-termexams'] = (datag['Mid-termexams']*100).astype('int')\n\ndatag.head()","f1942d51":"datag.head()","87faa46e":"print(datag['Grade'].value_counts(dropna=False))","6c650066":"datag.describe()","00d52dc4":"import matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool","b73cc72d":"datag.head()\n\ndatag.boxplot(column='Mid-termexams', by = 'Finalexam')","4cca78b8":"datagnew = datag.head(10)\n\ndatagnew","f0aeec17":"# melting:\n\nmelted1 = pd.melt(frame=datagnew, id_vars='Grade', value_vars= ['Finalexam', 'Mid-termexams'])\nmelted1","bf2f259a":"# toplam ald\u0131r\u0131p yapt\u0131k, farkl\u0131 komut ile, \u00e7\u00fcnk\u00fc duplicate verdi, sum yapmak gerekti.:\ntable2 = pd.pivot_table(melted1, values='value', index=['Grade'], columns=['variable'], aggfunc=np.sum)\ntable2\n\n","4f184a1a":"# concenate-rows:\ndatag.head(10)\n\ndatag1 = datag.head()\ndatag2 = datag.tail()\n\nconc_datag_rows = pd.concat([datag1, datag2], axis=0, ignore_index=True)\nconc_datag_rows\n","4248b1d9":"# concenate-columns:\ndatag3 = datag['FirstName'].head()\ndatag4 = datag['CW1'].head()\n\nconc_datag_cols = pd.concat([datag3,datag4], axis=1)\n\nconc_datag_cols\n","688b8c83":"datag.dtypes","72b5b97e":"datag.head(10)","2d6dd50d":"datag['CW2'] = datag['CW2'].astype('float')\ndatag.dtypes\ndatag.head(10)","14812651":"datag.info()","8c040b9e":"datag['CW1'].value_counts(dropna=False)","de8b897e":"datag5 = datag\ndatag5.head(10)\n\ndatag5['CW1'].dropna(inplace=True)  #nas de\u011ferleri at\n\nassert datag5['CW1'].notnull().all()\n\ndatag5['CW1'].fillna('empty', inplace=True) # na lar\u0131, empty ile doldur\n\nassert datag5['CW1'].notnull().all()","92652870":"assert datag5.columns[1] == 'FirstName'","465d0d5c":"PIVOTING","7f7e8254":"DATA TYPES","bdaa78fc":"TIDY DATA","dbcd7eec":"**EXPLORATORY DATA ANALYSIS (DEA)**","b46ed955":"**VISUAL EXPLORATORY DATA ANALYSIS**","6761c98f":"**MISSING DATA and TESTING with ASSERT**\n"}}