{"cell_type":{"8a2ed856":"code","073a1ff5":"code","a50df7c1":"code","b78df626":"code","cfe63595":"code","5db6d8f7":"code","7d539f41":"code","b77df997":"code","ce4fd8b4":"code","216872cd":"code","bc0346fc":"markdown","60df1638":"markdown","a8127e48":"markdown","614fb811":"markdown","c5cbde64":"markdown","25c5a8e0":"markdown","801c74c3":"markdown","facf6540":"markdown"},"source":{"8a2ed856":"\nimport numpy as np \nimport pandas as pd \n\n","073a1ff5":"data =pd.read_csv(\"..\/input\/brent\/Brent.csv\")\ny=np.asfarray(data.iloc[7262:])\ny=y.reshape(953)\nx=np.array(range(953))#DAYS","a50df7c1":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(40,10))\nplt.scatter(x,y,s=8)\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nplt.xticks([0,255,501,753,955],\n           [2015,2016,2017,2018,2019])\nplt.show()","b78df626":"x_train=x[:800]\nx_test=x[800:]\ny_train=y[:800]\ny_test=y[800:]\n","cfe63595":"import scipy as sp\ndef model(x,y,x_t,y_t):\n    l=0\n    for i in range(10):\n        fp1,residuals,rank,sv,rcond=sp.polyfit(x,y,i,full=True)\n        f=sp.poly1d(fp1)\n        error=int(sp.sum((f(x)-y)**2))\n        error1=int(sp.sum((f(x_t)-y_t)**2))\n        print('polynom :',l,'error1:',error)\n        print('polynom :',l,'error2:',error1)\n        l+=1\n#  DEGREE THREE, LEAST ERROR\n      \nmodel(x_train,y_train,x_test,y_test)","5db6d8f7":"\nfp1,residuals,rank,sv,rcond=sp.polyfit(x,y,3,full=True)\nf=sp.poly1d(fp1)\nplt.figure(figsize=(40,10))\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nplt.plot(x,f(x),'r--',linewidth=2)\nplt.scatter(x,y,s=10)\nplt.xticks([0,255,501,753,955],\n           [2015,2016,2017,2018,2019])\nplt.show()","7d539f41":"x_future=np.array(range(953,1010))\n\nplt.figure(figsize=(40,10))\nplt.rc('xtick', labelsize=20)\nplt.rc('ytick', labelsize=20)\nplt.plot(x_future,f(x_future),'r--',linewidth=6)\nplt.scatter(x,y,s=10)\nplt.xticks([0,255,501,753,955],\n           [2015,2016,2017,2018,2019])\nplt.show()","b77df997":"\nmean_x=np.mean(x)\nmean_y=np.mean(y)\ncov_x=np.cov(x)\ncov_y=np.cov(y)\ndef covXY(x,y):\n    sum_xy=[]\n    for i in range(len(x)):\n        a=(x[i]-mean_x)*(y[i]-mean_y)\n        sum_xy.append(a)\n    return sum(sum_xy)\ncov_xy=covXY(x,y)\/len(x)-1\ncor_xy=cov_xy\/(np.sqrt(cov_x)*np.sqrt(cov_y))\nprint('CORRELATION:',cor_xy)\n","ce4fd8b4":"RSS=[]#residual amount squares\nTSS=[]#total amount squares\nESS=[]#sum of squares models\ndef fun(y,y_future,y_mean):\n    for i in range(len(y)):\n        r=(y[i]-y_future[i])**2\n        RSS.append(r)\n        t=(y[i]-y_mean)**2\n        TSS.append(t)\n        e=(y_future[i]-y_mean)**2\n        ESS.append(e)\nfun(y,f(x),mean_y)   \n\n#FORCE, LINEAR COMMUNICATION\nR2=sum(ESS)\/sum(TSS)\nprint('R2:',R2)","216872cd":"average_price=sum(f(x_future))\/len(x_future)\nprint('$',average_price)","bc0346fc":"\nPREDICTED DATA","60df1638":"DATA FROM 2016","a8127e48":"\nEVALUATION OF THE MODEL","614fb811":"\nPredictions for 57 days","c5cbde64":"TRAINING MODELS","25c5a8e0":"\nTRAINING AND TEST DATA","801c74c3":"\nDATA SCHEDULE","facf6540":"Average price for 57 days"}}