{"cell_type":{"6ba580ca":"code","2c659531":"code","b2f0e77c":"code","33997450":"code","a5cf7e20":"code","215ce374":"code","195f9201":"code","85a13f3f":"code","7273c4ed":"code","49b3430c":"code","3d294a67":"code","11a1b0c6":"code","6e386557":"code","edbf2f8b":"code","5c598008":"code","9d30a0f4":"code","575d7d4f":"code","29029263":"code","36f6e44c":"code","50acf696":"code","7f919426":"code","91794442":"code","ac87b376":"code","f8684288":"code","c7742393":"code","dc6053f7":"code","86a6efde":"code","ae687ba1":"code","324e1042":"code","26dab230":"code","35d90a34":"code","a22b2f85":"code","b6d9fe7a":"code","7403c5c1":"code","ff2ae7f7":"code","6c631901":"code","ed4fdd61":"code","2df9d90f":"code","eb779e29":"code","4c767e61":"code","2350f348":"code","ab0ae4d6":"code","5cb2fe3d":"code","8c9dbe47":"code","2e7bbd0a":"code","704a2dce":"code","c915085f":"code","2c5ddf68":"code","e71b85f2":"code","c200b3d2":"code","00db4451":"code","1367ab8d":"code","12568680":"code","3901cfb9":"code","ee5e3e29":"code","5307e690":"code","6029d870":"code","c13cbaed":"code","2d932215":"code","a4217ddd":"code","faf5f378":"code","f96459d8":"code","42b79b08":"code","61580390":"code","95dfbe43":"code","974460ca":"code","37797019":"code","03210517":"code","f779d1e2":"code","b11e8e85":"code","bdf45a56":"code","8e53ac81":"code","31b6d6cf":"code","75347e4f":"code","a5564814":"code","3656d564":"code","7ade44f1":"code","c0807575":"code","4b8343ce":"code","a97789d0":"code","54f7c162":"code","3fb05869":"markdown","bcb20817":"markdown","8b927144":"markdown","7a417f95":"markdown","b2eb5720":"markdown","c02adea2":"markdown","1670179a":"markdown","5d471e23":"markdown","f874217f":"markdown","412505dc":"markdown","e47cf4dd":"markdown","8a817c30":"markdown","3b3cc5fe":"markdown","375ce143":"markdown","99962fb0":"markdown","ca78d113":"markdown","e2f303ef":"markdown","f8aec128":"markdown","aa718dc7":"markdown","3f85e8f7":"markdown","170383d5":"markdown","36543821":"markdown","d11b5ddc":"markdown","260cffce":"markdown","1c33b995":"markdown","4520873b":"markdown","70e48b06":"markdown","f784b882":"markdown","985d26fc":"markdown","207e607e":"markdown","f1ba97dc":"markdown","0f53b936":"markdown","48ef0b37":"markdown","014bd8c2":"markdown","f1688011":"markdown","f9de9175":"markdown","80395f47":"markdown","3a724598":"markdown","fc2d42f8":"markdown"},"source":{"6ba580ca":"#%%capture internet-on\u3078\n'''\n!pip install pandarallel #\u8a08\u7b97\u51e6\u7406\u3092\u4e26\u5217\u5316\u3059\u308bPandaralell\u3067\u3059\u3002\n#\u3000\u5c11\u3057\u65e9\u304f\u306a\u308b\u7a0b\u5ea6\u3000https:\/\/www.salesanalytics.co.jp\/datascience\/datascience020\/\n\nimport gc\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nfrom pandarallel import pandarallel\npandarallel.initialize()\n\nBASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\ntrain = pd.read_csv(BASE_DIR \/ 'train.csv')\n\nnull = np.nan\ntrue = True\nfalse = False\n\nfor col in train.columns:\n\n    if col == 'date': continue\n\n    _index = train[col].notnull()\n    train.loc[_index, col] = train.loc[_index, col].parallel_apply(lambda x: eval(x))\n\n    outputs = []\n    for index, date, record in train.loc[_index, ['date', col]].itertuples():\n        _df = pd.DataFrame(record)\n        _df['index'] = index\n        _df['date'] = date\n        outputs.append(_df)\n\n    outputs = pd.concat(outputs).reset_index(drop=True)\n\n    outputs.to_csv(f'{col}_train.csv', index=False) #=>>>>\u3000\u3053\u308c\uff1f\u30ab\u30e9\u30e0\u5206\u3067\u304d\u308b\u3058\u3083\u3093\n    outputs.to_pickle(f'{col}_train.pkl') \n\n    del outputs\n    del train[col]\n    gc.collect()\n    \n    ##\u3000\u505c\u6b62\n    break\n'''","2c659531":"'''\nimport gc\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nnull = np.nan\ntrue = True\nfalse = False\n\nBASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\ntrain = pd.read_csv(BASE_DIR \/ 'train.csv')\ntrain.head(5)\n'''","b2f0e77c":"#train.columns","33997450":"  #  col = 'nextDayPlayerEngagement'\n  #  _index = train[col].notnull()\n  #  _index.head(5)","a5cf7e20":"#len(train.loc[_index, col][:1][0])","215ce374":"#train.loc[_index, col][:1][0][:500]","195f9201":"#train.loc[_index, col].apply(lambda x: eval(x)) #\u307e\u3063\u305f\u304f\u306a\u306b\u3092\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u305a","85a13f3f":"#len(train.loc[_index, col][:1][0])","7273c4ed":"#train.loc[_index, col][:1][0][:500]","49b3430c":"   # outputs = []\n   # for index, date, record in train.loc[_index, ['date', col]].itertuples():\n   #     print(index,date,record[:100])\n   #     break","3d294a67":"%%capture\n'''\nfor col in train.columns:\n\n    if col == 'date': continue\n\n    _index = train[col].notnull()\n    train.loc[_index, col] = train.loc[_index, col].apply(lambda x: eval(x))\n\n    outputs = []\n    for index, date, record in train.loc[_index, ['date', col]].itertuples():\n        _df = pd.DataFrame(record)\n        _df['index'] = index\n        _df['date'] = date\n        outputs.append(_df)\n        break\n    break\n    '''","11a1b0c6":"#_df.head(5)","6e386557":"#col","edbf2f8b":"#record[0]","5c598008":"#del train\n#del outputs\n#del record\n#del _df\n#gc.collect()","9d30a0f4":"import numpy as np\nimport pandas as pd\nimport gc\nfrom pathlib import Path\nfrom sklearn.metrics import mean_absolute_error\nfrom datetime import timedelta\nfrom functools import reduce\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport mlb","575d7d4f":"BASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\nTRAIN_DIR = Path('..\/input\/mlb-pdef-train-dataset')","29029263":"players = pd.read_csv(BASE_DIR \/ 'players.csv')\nplayers","36f6e44c":"!rm rosters_train.pkl","50acf696":"targets = pd.read_pickle(TRAIN_DIR \/ 'nextDayPlayerEngagement_train.pkl')\ntargets.to_pickle('nextDayPlayerEngagement_train.pkl')\ntargets","7f919426":"scoresx = pd.read_pickle(TRAIN_DIR \/ 'playerBoxScores_train.pkl')\nscoresx","91794442":"rosters = pd.read_pickle(TRAIN_DIR \/ 'rosters_train.pkl')\nrosters.to_pickle('rosters_train.pkl')","ac87b376":"scores = scoresx.groupby(['playerId', 'date']).sum().reset_index()\n\ndel scoresx\nscores","f8684288":"targets_cols = ['playerId', 'target1', 'target2', 'target3', 'target4', 'date']\nplayers_cols = ['playerId', 'primaryPositionName']\nrosters_cols = ['playerId', 'teamId', 'status', 'date']\nscores_cols = ['playerId', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'caughtStealing', 'stolenBases', 'atBats', 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts',# 'sacFlies', 'catchersInterference',\n       'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       'airOutsPitching',#lossesPitching', #'flyOutsPitching', ', ###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching', 'saves',#'holds', 'blownSaves',\n       'assists', 'putOuts', 'errors', 'chances', 'date']\n\nfeature_cols = ['label_playerId', #'label_primaryPositionName',# 'label_teamId', \n       'battingOrder', 'gamesPlayedBatting', 'flyOuts','label_status', #\u3000'\u3007label_status',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'caughtStealing', 'stolenBases','atBats',  'groundIntoDoublePlay', #\u25cb'atBats', ' 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', #'sacBunts', #'sacFlies', 'catchersInterference', #'leftOnBase', '\n       'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       #'lossesPitching', 'flyOutsPitching', 'airOutsPitching',###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching',  'hitsPitching','intentionalWalksPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen',  'wildPitches', 'pickoffsPitching','balks',#\u25cb'pickoffsPitching', \n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching','saves','sacFliesPitching', #'holds', 'blownSaves',\u25cb'sacBuntsPitching', \u25cb'sacFliesPitching' \u25cb 'sacFliesPitching'\n       'assists', 'putOuts', 'errors', 'chances','target1_mean',\n 'target1_median',\n 'target1_std',\n 'target1_min',\n 'target1_max',\n 'target1_prob',\n 'target2_mean',\n 'target2_median',\n 'target2_std',\n 'target2_min',\n 'target2_max',\n 'target2_prob',\n 'target3_mean',\n 'target3_median',\n 'target3_std',\n 'target3_min',\n 'target3_max',\n 'target3_prob',\n 'target4_mean',\n 'target4_median',\n 'target4_std',\n 'target4_min',\n 'target4_max',\n 'target4_prob']\n\nfeature_cols2 = ['label_playerId', 'label_primaryPositionName', 'label_teamId', #needed\n                 'label_status', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'hits', 'hitByPitch', 'intentionalWalks', #\u25cb'intentionalWalks'\n       'caughtStealing', 'stolenBases',  'groundIntoDoublePlay','atBats',#'\u3007atBats\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',#\u25cb rbi \n       'leftOnBase','sacBunts',# 'sacFlies', 'catchersInterference',#', \u3007leftOnBase'  \n       'gamesPlayedPitching', 'gamesStartedPitching','pickoffs',   #\u3007'pickoffs' \n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       #'airOutsPitching',# lossesPitching', #'flyOutsPitching', '',##\u3007\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'hitsPitching', 'intentionalWalksPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen', 'wildPitches', 'pickoffsPitching',#'balks', \n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners', \n       'inheritedRunnersScored', #'catchersInterferencePitching', \n       'sacFliesPitching', 'saves','sacBuntsPitching', #'holds', 'blownSaves'   #\u3007sacBuntsPitching'\n       'assists', 'putOuts', 'errors', 'chances','target1_mean',\n 'target1_median',\n 'target1_std',\n 'target1_min',\n 'target1_max',\n 'target1_prob',\n 'target2_mean',\n 'target2_median',\n 'target2_std',\n 'target2_min',\n 'target2_max',\n 'target2_prob',\n 'target3_mean',\n 'target3_median',\n 'target3_std',\n 'target3_min',\n 'target3_max',\n 'target3_prob',\n 'target4_mean',\n 'target4_median',\n 'target4_std',\n 'target4_min',\n 'target4_max',\n 'target4_prob',\n    'target1']","c7742393":"player_target_stats = pd.read_csv(\"..\/input\/player-target-stats\/player_target_stats.csv\")\nplayer_target_stats","dc6053f7":"data_names=player_target_stats.columns.values.tolist()\ndata_names","86a6efde":"train = targets[targets_cols].merge(players[players_cols], on=['playerId'], how='left')\ntrain","ae687ba1":"train = train.merge(rosters[rosters_cols], on=['playerId', 'date'], how='left')\ntrain","324e1042":"train = train.merge(scores[scores_cols], on=['playerId', 'date'], how='left')\ntrain","26dab230":"train = train.merge(player_target_stats, how='inner', left_on=[\"playerId\"],right_on=[\"playerId\"])\ntrain","35d90a34":"del rosters\ndel scores\nplayer_target_stats\ngc.collect()","a22b2f85":"player2num = {c: i for i, c in enumerate(train['playerId'].unique())}\nplayer2num[628317] #playerid to \u4e00\u610f\u306a\u756a\u53f7\u3092\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u308b\u3002","b6d9fe7a":"position2num = {c: i for i, c in enumerate(train['primaryPositionName'].unique())}\nposition2num","7403c5c1":"teamid2num = {c: i for i, c in enumerate(train['teamId'].unique())}\nteamid2num","ff2ae7f7":"status2num = {c: i for i, c in enumerate(train['status'].unique())}\nstatus2num","6c631901":"train['label_playerId'] = train['playerId'].map(player2num)","ed4fdd61":"train['label_primaryPositionName'] = train['primaryPositionName'].map(position2num) #position2\u306f\u8f9e\u66f8\u5f62\u5f0f\u3067\u6587\u5b57\u3092\u6570\u5b57\u306b\u5909\u63db\u3057\u3066\u3044\u308b\ntrain['label_primaryPositionName']","2df9d90f":"train['label_teamId'] = train['teamId'].map(teamid2num)\ntrain['label_teamId']","eb779e29":"train['label_status'] = train['status'].map(status2num)\ntrain['label_status']","4c767e61":"train_X = train[feature_cols]\ntrain_y = train[['target1', 'target2', 'target3', 'target4']]\n\n_index = (train['date'] < 20210401)\nx_train1 = train_X.loc[_index].reset_index(drop=True)\ny_train1 = train_y.loc[_index].reset_index(drop=True)\nx_valid1 = train_X.loc[~_index].reset_index(drop=True)\ny_valid1 = train_y.loc[~_index].reset_index(drop=True)","2350f348":"def fit_lgbm(x_train, y_train, x_valid, y_valid, params: dict=None, verbose=100):\n    oof_pred = np.zeros(len(y_valid), dtype=np.float32)\n    model = lgbm.LGBMRegressor(**params) #\u56de\u5e30\u578blgb\n    model.fit(x_train, y_train, \n        eval_set=[(x_valid, y_valid)],  \n        early_stopping_rounds=verbose, \n        verbose=verbose)\n    oof_pred = model.predict(x_valid)\n    score = mean_absolute_error(oof_pred, y_valid)\n    print('mae:', score)\n    return oof_pred, model, score","ab0ae4d6":"prm1={'objective': 'mae',\n 'metric': 'l2',\n 'feature_pre_filter': False,\n 'lambda_l1': 1.146853310507615e-06,\n 'lambda_l2': 0.5249994991618241,\n 'num_leaves': 255,\n 'feature_fraction': 0.48000000000000004,\n 'bagging_fraction': 0.4073948386925109,\n 'bagging_freq': 6,\n 'min_child_samples': 5,\n 'num_iterations': 1000,\n 'early_stopping_round': 50,#None,\n 'n_estimators': 5000,#3633,\n 'learning_rate': 0.08} #0.08046301304430488}","5cb2fe3d":"oof1, model1, score1 = fit_lgbm(\n    x_train1, y_train1['target1'],\n    x_valid1, y_valid1['target1'],\n    prm1\n )","8c9dbe47":"#del train\ndel x_train1\n#del x_train2\ndel y_train1\n#del y_train2\ndel x_valid1\n#del x_valid2\ndel y_valid1\n#del y_valid2\ndel train_X\ndel train_y\ngc.collect()","2e7bbd0a":"import optuna \nimport optuna.integration.lightgbm as lgbo\nimport lightgbm as lgb\n\nparams = { 'objective': 'mae', 'metric': 'mae' } \n#lgb_train1 = lgb.Dataset(x_train1, y_train1['target1'])\n#lgb_valid1 = lgb.Dataset(x_valid1, y_valid1['target1'])\n#model1 = lgbo.train(params, lgb_train1, valid_sets=[lgb_valid1], verbose_eval=100)\n#model1.params = {'n_estimators': 3633, 'learning_rate': 0.08046301304430488}\n#model1.params","704a2dce":"train_X = train[feature_cols2]\ntrain_y = train[['target1', 'target2', 'target3', 'target4']]\n\n_index = (train['date'] < 20210401)\nx_train2 = train_X.loc[_index].reset_index(drop=True)\ny_train2 = train_y.loc[_index].reset_index(drop=True)\nx_valid2 = train_X.loc[~_index].reset_index(drop=True)\ny_valid2 = train_y.loc[~_index].reset_index(drop=True)","c915085f":"del train\ndel train_X\ndel train_y\ngc.collect()","2c5ddf68":"\n#lgb_train2 = lgb.Dataset(x_train2, y_train2['target2'])\n#lgb_valid2 = lgb.Dataset(x_valid2, y_valid2['target2'])\n#model2 = lgbo.train(params, lgb_train2, valid_sets=[lgb_valid2], verbose_eval=100)\n#model2.params ={'n_estimators': 80, 'learning_rate': 0.1}\n#model2.params","e71b85f2":"\n#lgb_train2 = lgb.Dataset(x_train2, y_train2['target3'])\n#lgb_valid2 = lgb.Dataset(x_valid2, y_valid2['target3'])\n#model3 = lgbo.train(params, lgb_train2, valid_sets=[lgb_valid2], verbose_eval=100)\n#model3.params ={'n_estimators': 9868, 'learning_rate': 0.10528150510326864}\n#model3.params","c200b3d2":"\n#lgb_train2 = lgb.Dataset(x_train2, y_train2['target4'])\n#lgb_valid2 = lgb.Dataset(x_valid2, y_valid2['target4'])\n#model4 = lgbo.train(params, lgb_train2, valid_sets=[lgb_valid2], verbose_eval=100)\n#model4.params = {'n_estimators': 9868, 'learning_rate': 0.10528150510326864}\n#model4.params","00db4451":"\nprm2={'objective': 'mae',\n 'metric': 'l2',\n 'feature_pre_filter': False,\n 'lambda_l1': 0.023375452815085587,\n 'lambda_l2': 0.02276139446807019,\n 'num_leaves': 8,\n 'feature_fraction': 0.92,\n 'bagging_fraction': 0.6495829305086558,\n 'bagging_freq': 3,\n 'min_child_samples': 20,\n 'num_iterations': 1000,\n 'early_stopping_round': 50,#None,\n 'n_estimators': 1000,#80, \n 'learning_rate': 0.1}#0.1}\n\nprm3={'objective': 'mae',\n 'metric': 'l2',\n 'feature_pre_filter': False,\n 'lambda_l1': 0.0,\n 'lambda_l2': 0.0,\n 'num_leaves': 49,\n 'feature_fraction': 0.6,\n 'bagging_fraction': 1.0,\n 'bagging_freq': 0,\n 'min_child_samples': 20,\n 'num_iterations': 1000,\n 'early_stopping_round': 50,#None,\n 'n_estimators': 10000,#9868,\n 'learning_rate': 0.05} #0.0528150510326864}\n\nprm4 ={'objective': 'mae',\n 'metric': 'l2',\n 'feature_pre_filter': False,\n 'lambda_l1': 0.0,\n 'lambda_l2': 0.0,\n 'num_leaves': 254,\n 'feature_fraction': 0.4,\n 'bagging_fraction': 1.0,\n 'bagging_freq': 0,\n 'min_child_samples': 50,\n 'num_iterations': 1000,\n 'early_stopping_round': 50,#None,\n 'n_estimators': 1000, #9868, \n 'learning_rate': 0.05}#0528150510326864,}","1367ab8d":"\n\n# training lightgbm\n\nparams1 = {'objective':'mae','reg_alpha': 0.14947461820098767, 'reg_lambda': 0.10185644384043743, 'n_estimators': 3633, 'learning_rate': 0.08046301304430488, 'num_leaves': 674, 'feature_fraction': 0.9101240539122566, 'bagging_fraction': 0.9884451442950513, 'bagging_freq': 8, 'min_child_samples': 51}\n\nparams2 = {\n 'objective':'mae',\n 'reg_alpha': 0.1,\n 'reg_lambda': 0.1, \n 'n_estimators': 80,\n 'learning_rate': 0.1,\n 'random_state': 42,\n \"num_leaves\": 22\n}\n\nparams4 = {'objective':'mae','reg_alpha': 0.016468100279441976, 'reg_lambda': 0.09128335764019105, 'n_estimators': 9868, 'learning_rate': 0.10528150510326864, 'num_leaves': 157, 'feature_fraction': 0.5419185713426886, 'bagging_fraction': 0.2637405128936662, 'bagging_freq': 19, 'min_child_samples': 71}\n\n\nparams = {\n 'objective':'mae',\n 'reg_alpha': 0.1,\n 'reg_lambda': 0.1, \n 'n_estimators': 10000,\n 'learning_rate': 0.1,\n 'random_state': 42,\n \"num_leaves\": 100\n}\n\n\noof2, model2, score2 = fit_lgbm(\n    x_train2, y_train2['target2'],\n    x_valid2, y_valid2['target2'],\n    prm2\n)\n\noof3, model3, score3 = fit_lgbm(\n    x_train2, y_train2['target3'],\n    x_valid2, y_valid2['target3'],\n    prm3\n)\n\noof4, model4, score4 = fit_lgbm(\n    x_train2, y_train2['target4'],\n    x_valid2, y_valid2['target4'],\n    prm4\n)\nscore = (score1+score2+score3+score4) \/ 4\nprint(f'score: {score}')","12568680":"\n#del x_train1\ndel x_train2\n#del y_train1\ndel y_train2\n#del x_valid1\ndel x_valid2\n#del y_valid1\ndel y_valid2","3901cfb9":"players_cols = ['playerId', 'primaryPositionName']\nrosters_cols = ['playerId', 'teamId', 'status']\nscores_cols = ['playerId', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'caughtStealing', 'stolenBases', 'atBats','groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts',# 'sacFlies', 'catchersInterference',\n       'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       'airOutsPitching',#'lossesPitching', #'flyOutsPitching', '###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching', 'saves', #'holds', 'blownSaves',\n       'assists', 'putOuts', 'errors', 'chances']\n\nnull = np.nan\ntrue = True\nfalse = False","ee5e3e29":"import pandas as pd\nimport numpy as np\nfrom datetime import timedelta\nfrom tqdm import tqdm\nimport gc\nfrom functools import reduce\nfrom sklearn.model_selection import StratifiedKFold\n\nROOT_DIR = \"..\/input\/mlb-player-digital-engagement-forecasting\"\n\n#=======================#\ndef flatten(df, col):\n    du = (df.pivot(index=\"playerId\", columns=\"EvalDate\", \n               values=col).add_prefix(f\"{col}_\").\n      rename_axis(None, axis=1).reset_index())\n    return du\n\n#============================#\ndef reducer(left, right):\n    return left.merge(right, on=\"playerId\")\n\n#========================\n\nTGTCOLS = [\"target1\",\"target2\",\"target3\",\"target4\"]\ndef train_lag(df, lag=1):\n    dp = df[[\"playerId\",\"EvalDate\"]+TGTCOLS].copy()\n    dp[\"EvalDate\"]  =dp[\"EvalDate\"] + timedelta(days=lag) \n    df = df.merge(dp, on=[\"playerId\", \"EvalDate\"], suffixes=[\"\",f\"_{lag}\"], how=\"left\")\n    return df\n\n#=================================\ndef test_lag(sub):\n    sub[\"playerId\"] = sub[\"date_playerId\"].apply(lambda s: int(  s.split(\"_\")[1]  ) )\n    assert sub.date.nunique() == 1\n    dte = sub[\"date\"].unique()[0]\n    \n    eval_dt = pd.to_datetime(dte, format=\"%Y%m%d\")\n    dtes = [eval_dt + timedelta(days=-k) for k in LAGS]\n    mp_dtes = {eval_dt + timedelta(days=-k):k for k in LAGS}\n    \n    sl = LAST.loc[LAST.EvalDate.between(dtes[-1], dtes[0]), [\"EvalDate\",\"playerId\"]+TGTCOLS].copy()\n    sl[\"EvalDate\"] = sl[\"EvalDate\"].map(mp_dtes)\n    du = [flatten(sl, col) for col in TGTCOLS]\n    du = reduce(reducer, du)\n    return du, eval_dt\n    #\n#===============","5307e690":"tr = pd.read_csv(\"..\/input\/mlb-data\/target.csv\") #\u5916\u90e8\u30c7\u30fc\u30bf\nprint(tr.shape)\ngc.collect()\n\ntr[\"EvalDate\"] = pd.to_datetime(tr[\"EvalDate\"])\ntr[\"EvalDate\"] = tr[\"EvalDate\"] + timedelta(days=-1)\ntr[\"EvalYear\"] = tr[\"EvalDate\"].dt.year\ntr","6029d870":"MED_DF = tr.groupby([\"playerId\",\"EvalYear\"])[TGTCOLS].median().reset_index()\nMED_DF","c13cbaed":"MEDCOLS = [\"tgt1_med\",\"tgt2_med\", \"tgt3_med\", \"tgt4_med\"]\nMED_DF.columns = [\"playerId\",\"EvalYear\"] + MEDCOLS\nMED_DF.columns","2d932215":"LAGS = list(range(1,21))\nFECOLS = [f\"{col}_{lag}\" for lag in reversed(LAGS) for col in TGTCOLS]\nFECOLS","a4217ddd":"for lag in tqdm(LAGS):\n    tr = train_lag(tr, lag=lag)\n    gc.collect()\n    \ntr","faf5f378":"tr = tr.sort_values(by=[\"playerId\", \"EvalDate\"])\nprint(tr.shape)\ntr = tr.dropna()\nprint(tr.shape)\ntr = tr.merge(MED_DF, on=[\"playerId\",\"EvalYear\"])\ngc.collect()\ntr","f96459d8":"from memory_profiler import profile\ndef large_integer_list():\n    return [i for i in range(0,10000000)]\n\nsum(large_integer_list())","42b79b08":"import sys\nprint(\"{}{:>25}{}{:>10}{}\".format('|','Variable Name','|','memory','|'))\nfor var_name in dir():\n    if not var_name.startswith(\"_\") and sys.getsizeof(eval(var_name)) > 10000:\n        print(\"{}{:>25}{}{:>10}{}\".format('|',var_name,'|',sys.getsizeof(eval(var_name)),'|'))","61580390":"X = tr[FECOLS+MEDCOLS].values\ny = tr[TGTCOLS].values\ncl = tr[\"playerId\"].values\ntr","95dfbe43":"NFOLDS = 6\nskf = StratifiedKFold(n_splits=NFOLDS)\nfolds = skf.split(X, cl)\nfolds = list(folds)\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\n\ntf.random.set_seed(777)","974460ca":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    x = L.Dense(50, activation=\"relu\", name=\"d1\")(inp)\n    x = L.Dense(50, activation=\"relu\", name=\"d2\")(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=\"adam\")\n    return model","37797019":"net = make_model(X.shape[1])\nprint(net.summary())","03210517":"oof = np.zeros(y.shape)\nnets = []\nfor idx in range(NFOLDS):\n    print(\"FOLD:\", idx)\n    tr_idx, val_idx = folds[idx]\n    ckpt = ModelCheckpoint(f\"w{idx}.h5\", monitor='val_loss', verbose=1, save_best_only=True,mode='min')\n    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,patience=3, min_lr=0.0005)\n    es = EarlyStopping(monitor='val_loss', patience=6)\n    reg = make_model(X.shape[1])\n    reg.fit(X[tr_idx], y[tr_idx], epochs=15, batch_size=35_000, validation_data=(X[val_idx], y[val_idx]),#epoch 10=>15\n            verbose=1, callbacks=[ckpt, reduce_lr, es])\n    reg.load_weights(f\"w{idx}.h5\")\n    oof[val_idx] = reg.predict(X[val_idx], batch_size=50_000, verbose=1)\n    nets.append(reg)\n    gc.collect()\n ","f779d1e2":"mae = mean_absolute_error(y, oof)\nmse = mean_squared_error(y, oof, squared=False)\nprint(\"mae:\", mae)\nprint(\"mse:\", mse)\n\n# Historical information to use in prediction time\nbound_dt = pd.to_datetime(\"2021-01-01\")\nLAST = tr.loc[tr.EvalDate>bound_dt].copy()\n\nLAST_MED_DF = MED_DF.loc[MED_DF.EvalYear==2021].copy()\nLAST_MED_DF.drop(\"EvalYear\", axis=1, inplace=True)\ndel tr\n\n#\"\"\"\nimport mlb\nFE = []; SUB = [];","b11e8e85":"import copy\n\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set","bdf45a56":"for (test_df, sample_prediction_df) in iter_test: # make predictions here\n    \n    sub = copy.deepcopy(sample_prediction_df.reset_index())\n    sample_prediction_df = copy.deepcopy(sample_prediction_df.reset_index(drop=True))\n    \n    # LGBM summit\n    # creat dataset\n    sample_prediction_df['playerId'] = sample_prediction_df['date_playerId']\\\n                                        .map(lambda x: int(x.split('_')[1]))\n    # Dealing with missing values\n    if test_df['rosters'].iloc[0] == test_df['rosters'].iloc[0]:\n        test_rosters = pd.DataFrame(eval(test_df['rosters'].iloc[0]))\n    else:\n        test_rosters = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in rosters.columns:\n            if col == 'playerId': continue\n            test_rosters[col] = np.nan\n            \n    if test_df['playerBoxScores'].iloc[0] == test_df['playerBoxScores'].iloc[0]:\n        test_scores = pd.DataFrame(eval(test_df['playerBoxScores'].iloc[0]))\n    else:\n        test_scores = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in scores.columns:\n            if col == 'playerId': continue\n            test_scores[col] = np.nan\n    test_scores = test_scores.groupby('playerId').sum().reset_index()\n    test = sample_prediction_df[['playerId']].copy()\n    test = test.merge(players[players_cols], on='playerId', how='left')\n    test = test.merge(test_rosters[rosters_cols], on='playerId', how='left')\n    test = test.merge(test_scores[scores_cols], on='playerId', how='left')\n    test = test.merge(player_target_stats, how='inner', left_on=[\"playerId\"],right_on=[\"playerId\"])\n    \n\n    test['label_playerId'] = test['playerId'].map(player2num)\n    test['label_primaryPositionName'] = test['primaryPositionName'].map(position2num)\n    test['label_teamId'] = test['teamId'].map(teamid2num)\n    test['label_status'] = test['status'].map(status2num)\n    \n    test_X = test[feature_cols]\n    # predict\n    pred1 = model1.predict(test_X)\n    test['target1'] = np.clip(pred1,0,100)\n    test_X = test[feature_cols2]\n\n    pred2 = model2.predict(test_X)\n    pred3 = model3.predict(test_X)\n    pred4 = model4.predict(test_X)\n    \n    # merge submission\n    sample_prediction_df['target1'] = np.clip(pred1, 0, 100)\n    sample_prediction_df['target2'] = np.clip(pred2, 0, 100)\n    sample_prediction_df['target3'] = np.clip(pred3, 0, 100)\n    sample_prediction_df['target4'] = np.clip(pred4, 0, 100)\n    sample_prediction_df = sample_prediction_df.fillna(0.)\n    del sample_prediction_df['playerId']\n    # TF summit\n    # Features computation at Evaluation Date\n    sub_fe, eval_dt = test_lag(sub)\n    sub_fe = sub_fe.merge(LAST_MED_DF, on=\"playerId\", how=\"left\")\n    sub_fe = sub_fe.fillna(0.)\n    \n    _preds = 0.\n    for reg in nets:\n        _preds += reg.predict(sub_fe[FECOLS + MEDCOLS]) \/ NFOLDS\n    sub_fe[TGTCOLS] = np.clip(_preds, 0, 100)\n    sub.drop([\"date\"]+TGTCOLS, axis=1, inplace=True)\n    sub = sub.merge(sub_fe[[\"playerId\"]+TGTCOLS], on=\"playerId\", how=\"left\")\n    sub.drop(\"playerId\", axis=1, inplace=True)\n    sub = sub.fillna(0.)\n    # Blending\n    blend = pd.concat(\n        [sub[['date_playerId']],\n        (0.1*sub.drop('date_playerId', axis=1) + 0.9*sample_prediction_df.drop('date_playerId', axis=1))], #0.1,0.9\n        axis=1\n    )\n    env.predict(blend)\n    # Update Available information\n    sub_fe[\"EvalDate\"] = eval_dt\n    #sub_fe.drop(MEDCOLS, axis=1, inplace=True)\n    LAST = LAST.append(sub_fe)\n    LAST = LAST.drop_duplicates(subset=[\"EvalDate\",\"playerId\"], keep=\"last\")","8e53ac81":"pd.concat(\n    [sub[['date_playerId']],\n    (sub.drop('date_playerId', axis=1) + sample_prediction_df.drop('date_playerId', axis=1)) \/ 2],\n    axis=1\n)","31b6d6cf":"sample_prediction_df","75347e4f":" pd.DataFrame(eval(test_df['playerBoxScores'].iloc[0]))","a5564814":"test_df['playerBoxScores'].iloc[0][:500]","3656d564":"pd.DataFrame(pred1)","7ade44f1":"pd.DataFrame(np.clip(pred1, 0, 100))","c0807575":"sub_fe","4b8343ce":"[sub[['date_playerId']],\n        (0.1*sub.drop('date_playerId', axis=1))]","a97789d0":"[(0.9*sample_prediction_df.drop('date_playerId', axis=1))]","54f7c162":"pd.concat(\n        [sub[['date_playerId']],\n        (0.2*sub.drop('date_playerId', axis=1) + 0.8*sample_prediction_df.drop('date_playerId', axis=1))],\n        axis=1)","3fb05869":"![image.png](attachment:94c7a4a8-9a74-41c8-a721-f2992af9869d.png)","bcb20817":"eval\u95a2\u6570\u3092\u4f7f\u3063\u3066\u7d50\u679c\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001\n\n\u5909\u6570 = eval(\"\u5f0f\")","8b927144":"### \u3053\u306econcat\u3067\u306e\u5272\u5408\u304c\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u3063\u3066\u304f\u308b\u3002\n### \u3060\u3044\u305f\u3044\u8907\u6570\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u3092\u6700\u5f8c\u306b\u7d71\u5408\u3059\u308b\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3068\u3044\u3046\u306e\u3092\u3084\u3063\u3066\u3044\u307e\u3059\u3002\n### \u3053\u308c\u3060\u3068\uff12\u3064\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u3092\u3001\u3088\u3055\u3052\u306a\u30e2\u30c7\u30eb\u306e\u65b9\u306e\u6bd4\u7387\uff08\u4e0b\u306e\u4f8b\u3060\u30680.8\u500d\uff09\u3057\u3066\u3044\u307e\u3059\u3002","7a417f95":"### <font color=\"orange\">pd.merge(), pd.DataFrame.merge()\u306e\u4f7f\u3044\u65b9<\/font><br>\npd.merge()\u95a2\u6570\u3067\u306f\u7b2c\u4e00\u5f15\u6570left\u3068\u7b2c\u4e8c\u5f15\u6570right\u306b\u7d50\u5408\u3059\u308b2\u3064\u306epandas.DataFrame\u3092\u6307\u5b9a\u3059\u308b\u3002<br>\n\u25a0\u7d50\u5408\u65b9\u6cd5 how<br>\n-\u5185\u90e8\u7d50\u5408\uff08inner_join\uff09: how='inner'<br>\n-\u5de6\u7d50\u5408\uff08left_join\uff09: how='left'<br>\n-\u53f3\u7d50\u5408\uff08right_join\uff09: how='right'<br>\n-\u5916\u90e8\u7d50\u5408\uff08outer_join\uff09: how='outer'<br>\n\n\u25a0\u5f15\u6570<br>\n-\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f\u5f15\u6570on\u3092\u4f7f\u3046\u3002\u7701\u7565\u3057\u3066\u554f\u984c\u306a\u3044\u5834\u5408\u3082\u660e\u793a\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3002<br>\n-\u5f15\u6570left_on, right_on\u3067\u305d\u308c\u305e\u308c\u306epandas.DataFrame\u306e\u5217\u540d\u3092\u5225\u3005\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd","b2eb5720":"### \ud83c\udfbaTraining\n### \u5b66\u7fd2\u90e8\u5206\u3092\u5206\u89e3\u958b\u59cb","c02adea2":"# env\u30bb\u30af\u30b7\u30e7\u30f3","1670179a":" \u3053\u308c\u306f\u3069\u3053\u304b\u3067\u4e8b\u524d\u306b\u3064\u304f\u3063\u3066\u3044\u308b\u3002\uff12\uff10\uff16\uff11\u4eba\u5206\u5168\u90e8\u3002\u3000ken.Miller\u3055\u3093\u3002\u3059\u3054\u3044\u306a\u3042\u3002\n Miller\u3055\u3093\u306e\u3069\u3053\u304b\u3089\u30b3\u30d4\u30fc\u3057\u305f\u304b\u308f\u3059\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001webscraping\u3068\u3044\u3046\u3084\u308a\u65b9\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u3000https:\/\/www.kaggle.com\/tensorchoko\/web-scraping\/","5d471e23":"credit to Mrigendra Agrawal I am using his notebook and first predicting a single target and using it as a feature for predicting other targets\nhttps:\/\/www.kaggle.com\/mrigendraagrawal\/fork-of-1-35-lightgbm-ann-2505f2","f874217f":"ANN\u306f\u3001\u5358\u7d14\u306a\u8a08\u7b97\u5358\u4f4d\uff08\u30ce\u30fc\u30c9\u3068\u3082\u547c\u3070\u308c\u307e\u3059\uff09\u306e\u30bb\u30c3\u30c8\u3067\u3059\u3002\n\u9ad8\u5ea6\u306b\u76f8\u4e92\u63a5\u7d9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 ANN\u306f\u3055\u307e\u3056\u307e\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u4f7f\u7528\u3055\u308c\u3066\u304d\u307e\u3057\u305f\u3002\n\u7d71\u8a08\u7684\u624b\u6cd5\u304c\u4f1d\u7d71\u7684\u306b\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u6240\u3002\u305d\u308c\u3089\u306f\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002","412505dc":"This version of the API is not optimized and should not be used to estimate the runtime of your code on the hidden test set.<br>\n\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3069\u3046\u3084\u3089\u610f\u5473\u306f\u3042\u307e\u308a\u306a\u3044\u3088\u3046\u3067\u3059\u3002","e47cf4dd":"### <font color=\"orange\"> Pandas.pivot<\/font><br>\n\u5217\u65b9\u5411\u306b\u4e26\u3093\u3060\u30c7\u30fc\u30bf\u3092\u884c\u65b9\u5411\u306b\u4e26\u3079\u66ff\u3048\u305f\u308a\u3001\u884c\u65b9\u5411\u306b\u4e26\u3093\u3060\u30c7\u30fc\u30bf\u3092\u5217\u65b9\u5411\u306b\u4e26\u3079\u66ff\u3048\u305f\u308a\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u3092\u518d\u5f62\u6210\u3067\u304d\u308b\u3002<br>\n\u25a0\u5217\u304b\u3089\u884c\u3078\u30d4\u30dc\u30c3\u30c8: stack()<br>\n-stack()\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3068\u5217\u65b9\u5411\u306b\u4e26\u3093\u3067\u3044\u305f\u30c7\u30fc\u30bf\u304c\u884c\u65b9\u5411\u306b\u4e26\u3079\u66ff\u3048\u3089\u308c\u308b\u3002\u7e26\u306b\u7a4d\u307f\u91cd\u306a\u308b\uff08= stack\uff09\u30a4\u30e1\u30fc\u30b8\u3002<br>\n\u25a0\u884c\u304b\u3089\u5217\u3078\u30d4\u30dc\u30c3\u30c8: unstack()<br>\n-stack()\u3067\u53d6\u5f97\u3057\u305fpandas.Series\u304b\u3089unstack()\u3092\u547c\u3076\u3068\u5143\u306b\u623b\u308b\u3002\u884c\u65b9\u5411\u306b\u4e26\u3093\u3067\u3044\u305f\u30c7\u30fc\u30bf\u304c\u5217\u65b9\u5411\u306b\u4e26\u3079\u66ff\u3048\u3089\u308c\u308b\u3002<br>\n\n\uff1c\u4f8b\uff1e\n\u30af\u30ed\u30b9\u96c6\u8a08\u3057\u305f\u3044\u6642\u3084\u3001\u3061\u3087\u3063\u3068\u3084\u3084\u3053\u3057\u3044\u30b0\u30e9\u30d5\u3092\u3064\u304f\u308b\u969b\u306a\u3069\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002<br>\nname blood_type   class state<br>\n0   Alice          A    high    NY<br>\n1     Bob          B  middle    OH<br>\n2   Chris         AB     low    ND<br>\n3   David          B     low    OH<br>\n4    Evan          O     low    NY<br>\n5  Fabian          O  middle    OK<br>\n6    Gari          A    high    DC<br>\n\n<n>In [4]: df.pivot(index=\"class\",columns=\"state\",values=\"name\")<\/n><br>\nOut[4]:<br>\nstate     DC     ND     NY     OH      OK<br>\nclass                                    <br>\nhigh    Gari    NaN  Alice    NaN     NaN<br>\nlow      NaN  Chris   Evan  David     NaN<br>\nmiddle   NaN    NaN    NaN    Bob  Fabian<br>","8a817c30":"train\u30c7\u30fc\u30bf\u3068valid\u30c7\u30fc\u30bf\u306b\u308f\u3051\u3066\u3044\u308b\u3002<br>","3b3cc5fe":"\u30c7\u30fc\u30bf\u306ftrain.csv\u306e\u5404\u30ab\u30e9\u30e0\u3067\u5de8\u5927\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b<br>\n'nextDayPlayerEngagement'\u306e\u30ab\u30e9\u30e0\u306b\u306f\u76ee\u7684\u95a2\u6570\u304c\u5165\u3063\u3066\u3044\u308b\u3002","375ce143":"%%capture\u3068\u3044\u308c\u3066\u304a\u304f\u3068\u3001\u30b3\u30e1\u30f3\u30c8\u884c\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u4f59\u8a08\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3067\u306a\u3044\u306e\u3067\u3088\u304f\u4f7f\u3044\u307e\u3059\u3002","99962fb0":"![image.png](attachment:a88cba57-ef85-41aa-a32a-eabffce26338.png)","ca78d113":"\u5b66\u7fd2\u3092\u3084\u3063\u3066\u307f\u308b\u524d\u306b\u6700\u9069\u306a\u5b66\u7fd2\u7387\u306e\u5909\u5316\u306e\u8a08\u753b\u3092\u7acb\u3066\u3066\u304a\u304f\u3053\u3068\u306f\u975e\u5e38\u306b\u56f0\u96e3\u3067\u3059\u3002\n\u6700\u521d\u306f\u5927\u304d\u3081\u306e\u5024\u3067\u3069\u3093\u3069\u3093\u5b66\u7fd2\u3057\u3066\u3001\u305d\u308c\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u304f\u306a\u3063\u305f\u6bb5\u968e\u3067\u5f90\u3005\u306b\u4e0b\u3052\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u308a\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001 keras\u306b\u306f\u305d\u306e\u305f\u3081\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u3001ReduceLROnPlateau \u3068\u3044\u3046\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u76e3\u8996\u3059\u308b\u8a55\u4fa1\u5024\u3001\u4f55\u30a8\u30dd\u30c3\u30af\u6539\u5584\u3057\u306a\u304b\u3063\u305f\u3089\u5b66\u7fd2\u7387\u3092\u843d\u3068\u3059\u304b\u3001\u305d\u306e\u5909\u5316\u306e\u5272\u5408\u3001\u6700\u5c0f\u5024\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\n\u5b66\u7fd2\u306e\u9032\u307f\u306b\u5fdc\u3058\u3066\u8abf\u6574\u3057\u3066\u304f\u308c\u307e\u3059\u3002","e2f303ef":"\u3053\u306e\u8aac\u660e\u5909\u6570\u306e\u8ffd\u52a0\u3001\u524a\u9664\u306f\u3084\u308a\u3064\u304f\u3057\u3066\u98fd\u304d\u307e\u3057\u305f\u3002\u4ed6\u306e\u3068\u3053\u308d\u3092\u307f\u3066\u307f\u3088\u3046\u3002","f8aec128":"### \ud83e\uddcd\u200d\u2642\ufe0f\u4e8b\u524d\u51e6\u7406\u5206\u89e3\u958b\u59cb\u3002","aa718dc7":"eval\u3092\u4f7f\u308f\u306a\u3044\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002pandas\u306b\u7121\u7406\u3084\u308a\u3044\u308c\u3088\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002","3f85e8f7":"\u3053\u3053\u3067\u306f\u6587\u5b57\u5217\u3092\u4e00\u610f\u306e\u6570\u5b57\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u308b\u3002","170383d5":"\u30e1\u30e2\u30ea\u7bc0\u7d04\u306e\u305f\u3081\u4e0d\u8981\u30c7\u30fc\u30bf\u306f\u6d88\u3059\u3002","36543821":"### \ud83e\uddce\u4e8b\u524d\u51e6\u7406\u5206\u89e3\u7d42\u4e86\u3002\u4e8b\u524d\u306b\u30ab\u30e9\u30e0\u5206\u8aad\u307f\u8fbc\u3093\u3067\u51e6\u7406\u3057\u3066\u3044\u305f\u3002\n### \u6642\u9593\u304c\u3042\u308c\u3070\u3001\u30b3\u30e1\u30f3\u30c8\u884c\u3092\u5916\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u52c9\u5f37\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002","d11b5ddc":"### \u5206\u89e3","260cffce":"### <font color=\"orange\">Python \u3067\u30c7\u30fc\u30bf\u51e6\u7406\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9a\u756a Pandas \u306e groupby<br>\ngroupby \u306f\u3001\u540c\u3058\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u584a\u306b\u5bfe\u3057\u3066\u5171\u901a\u306e\u64cd\u4f5c\u3092\u884c\u3044\u305f\u3044\u6642\u306b\u4f7f\u3046\u3002<br>\n\u25a0Aggregation<br>\nGroupBy.mean() \u306e\u3088\u3046\u306b\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u5024\u3092\u6c42\u3081\u3066\u8868\u3092\u4f5c\u308b\u3088\u3046\u306a\u64cd\u4f5c\u3092 Aggregation \u3068\u547c\u3076\u3002\u3053\u306e\u3088\u3046\u306b GroupBy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f Aggregation \u306b\u4f7f\u3046\u95a2\u6570\u304c\u5e7e\u3064\u304b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u3089\u306f agg() \u3092\u4f7f\u3063\u3066\u3082\u5b9f\u88c5\u51fa\u6765\u308b\u3002<br>\n-df.groupby('city').agg(np.mean)<br>\n\u25a0apply \n    \n    \n\u25a0Transformation","1c33b995":"\u4e0d\u8981\u30c7\u30fc\u30bf\u306e\u524a\u9664","4520873b":"### \u4ed6\u306e\u4eba\u306e\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u8fbc\u3093\u3067pickle\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n### \u3082\u3057\u3001\u30c7\u30fc\u30bf\u306e\u6301\u3061\u4e3b\u304c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u524a\u9664\u3059\u308b\u3068\u3001\u3082\u3046\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304b\u3089\u3002(\u305d\u3093\u306a\u60aa\u3044\u4eba\u306f\u3044\u306a\u3044\u3068\u4fe1\u3058\u305f\u3044\u3067\u3059\u304c\uff09\n\n### \u30c7\u30fc\u30bf\u3092\u516c\u958b\u3057\u3066\u304a\u3044\u3066\u30b9\u30b3\u30a2\u304c\u3042\u304c\u308a\u3001\u3044\u3056\u7de0\u3081\u5207\u308a\u306e\u6642\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6d88\u3055\u308c\u308b\u3068\u3001\n### \u3059\u3079\u3066\u304c\u53f0\u7121\u3057\u306b\u306a\u308a\u307e\u3059\u3002\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u306b\u5099\u3048\u3066\u30b3\u30d4\u30fc\u3057\u3066\u81ea\u5206\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3057\u3066\u304a\u304f\u3093\u3067\u3059\u3002\n\n\u4e0a\u306e\u884c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u53f3\u306eoutput \/kaggle\/working\u306e\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u307e\u3059\u3002<br>\n\u3067\u304d\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u53f3\u3042\u305f\u308a\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068download\u306e\u6587\u5b57\u304c\u3067\u3066\u304d\u307e\u3059\u3002<br>\n\u305d\u308c\u3092\u62bc\u305b\u3070\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002<br>\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308b\u306e\u306f\u7c21\u5358\u3067\u3001ADD data\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002","70e48b06":"### \ud83d\udcf2\u4e88\u6e2c","f784b882":"### \ud83d\udc77\u52c9\u5f37\u306e\u305f\u3081\u30b3\u30fc\u30c9\u3092\u5206\u89e3\u3057\u3066\u7406\u89e3\u3057\u3066\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u77e5\u898b\u3092\u53d6\u308a\u5165\u308c\u305f\u3044\u3002\u3053\u306e\u30b3\u30fc\u30c9\u306f\u5143\u306e\u3084\u3064\u304b\u3089\u81ea\u5206\u306a\u308a\u306b\u5c11\u3057\u4fee\u6b63\u3057\u3066\u3044\u307e\u3059<br>\n### \u3082\u3046\u4e00\u3064\u306enotebook\u306f\u3001\uff10\u304b\u3089\u81ea\u529b\u3067\u4f5c\u308b\u65b9\u6cd5\u3067\u3001\u4e8c\u6bb5\u69cb\u3048\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u3002\n\n### \u3053\u306e\u30b3\u30f3\u30da\u306f\u672a\u6765\u4e88\u6e2c\u306a\u306e\u3067\u3044\u3044\u30b9\u30b3\u30a2\u3068\u3063\u3066\u3044\u308b\u304b\u3089\u52dd\u3066\u308b\u3068\u304b\u305d\u3046\u3044\u3046\u3082\u306e\u3067\u306f\u306a\u3044\u3084\u3064\u3067\u3059\u3002\n### \u3082\u3046\uff11\u3064\u306enotebook\u306f\u73fe\u572847\u4f4d\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3042\u3066\u306b\u306a\u308a\u307e\u305b\u3093\u3002","985d26fc":"## <font color=\"orange\">pandas\u30d5\u30a1\u30a4\u30eb\u3092\uff11\u884c\u3065\u3064\u8aad\u307f\u305f\u3044\u5834\u5408\u306e\u3084\u308a\u65b9\u3067\u3059<\/font>\n0\u304b\u3089\u4f5c\u308b\u3068\u3053\u306e\u554f\u984c\u306b\u3076\u3064\u304b\u308a\u307e\u3059\u3002\u5358\u7d14\u306b\u8aad\u3082\u3046\u3068\u3059\u308b\u3068\u3001\uff11\u5217\u3057\u304b\u8aad\u3081\u306a\u304b\u3063\u305f\u308a\u3002\u305d\u3053\u3067\u3053\u306e\u3084\u308a\u65b9\u3092\u4f7f\u3046\u306e\u3067\u3059\u3002<br>\n\n<font color=\"#FE2EF7\"><u>DataFrame.itertuples()\u30e1\u30bd\u30c3\u30c9<\/u><\/font><br>\n-pandas.DataFrame\u3092for\u6587\u3067\u30eb\u30fc\u30d7\u51e6\u7406\uff08\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\uff09\u3059\u308b\u5834\u5408\u3001\u5358\u7d14\u306b\u305d\u306e\u307e\u307efor\u6587\u3067\u56de\u3059\u3068\u5217\u540d\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5217\u3054\u3068\u30fb\u884c\u3054\u3068\uff08\u4e00\u5217\u305a\u3064\u30fb\u4e00\u884c\u305a\u3064\uff09\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002<br>\n-for row in df.itertuples():<br>\n\n<u><font color=\"#FE2EF7\"> DataFrame.iterrows()\u30e1\u30bd\u30c3\u30c9<\/font><\/u><br>\n-iterrows()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u30011\u884c\u305a\u3064\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u540d\uff08\u884c\u540d\uff09\u3068\u305d\u306e\u884c\u306e\u30c7\u30fc\u30bf\uff08pandas.Series\u578b\uff09\u306e\u30bf\u30d7\u30eb(index, Series)\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002<br>\n-for index, row in df.iterrows():","207e607e":"### \u30e1\u30e2\u30ea\u4f7f\u7528\u72b6\u6cc1\u78ba\u8a8d","f1ba97dc":"\u30e1\u30e2\u30ea\u4e0d\u8db3\u306b\u306a\u308b\u305f\u3081\u78ba\u8a8d\u5f8c\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u307e\u3059\u3002","0f53b936":"### 2021\/7\/12 metric\u3092l1=>l2\u306b\u5909\u66f4\u3057\u3066\u307f\u308b\u3002","48ef0b37":"NumPy\u914d\u5217ndarray\u3092\u4efb\u610f\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\u306b\u53ce\u3081\u308bclip<br>\n1183\u884c\u76ee\u306e\u8ca0\u5024\u304c0\u306b\u306a\u3063\u3066\u3044\u308b\u3002","014bd8c2":"### \u7d50\u69cb\u91cd\u8981\u306a\u30d1\u30fc\u30c8<br>\n\n\u8aac\u660e\u95a2\u6570\u304c\u6ca2\u5c71\u3042\u308a\u307e\u3059\u304c\u3001\u4f59\u8a08\u306a\u3082\u306e\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u4f59\u8a08\u306a\u3082\u306e\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u30b9\u30b3\u30a2\u304c\u60aa\u304f\u306a\u308a\u307e\u3059\u3002<br>\n\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4f59\u8a08\u306a\u95a2\u6570\u3060\u304b\u3089\u3002<br>\n\u4f59\u8a08\u306a\u95a2\u6570\u304b\u3069\u3046\u304b\u306f\u3001LGBM\u306eimportant\u3067\u306f\u3046\u307e\u304f\u3044\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3002<br>\n\u5730\u9053\u306b\u4e00\u500b\u3065\u3064\u3001\u540d\u524d\u304b\u3089\u3057\u3066\u4f59\u8a08\u3060\u306a\u3068\u601d\u3046\u306e\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3001\u5b9f\u884c\u3057\u30b9\u30b3\u30a2\u3092\u307f\u3066\u3044\u307e\u3059\u3002\u3059\u3054\u3044\u5927\u5909\u3067\u3059\u304c\u91cd\u8981\u306a\u90e8\u5206\u3067\u3059\u3002\n","f1688011":"record\u306b\u306f\u3001\u8f9e\u66f8\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\u306a\u306e\u3067Pandas\u3067\u53d6\u308a\u8fbc\u3081\u308b\u3002","f9de9175":"![image.png](attachment:10165638-f1e6-48dd-98e2-845b865110ff.png)","80395f47":"### \u30e2\u30c7\u30ebANN","3a724598":"### optuna\u306flightGBM\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3044\u3044\u3082\u306e\u3092\u3055\u304c\u3057\u3066\u304f\u308c\u308b\u5473\u65b9\u3067\u3059\u3002\n\n### optuna\u4e00\u5ea6\u306b\u3084\u308b\u3068\u51e6\u7406\u6642\u9593\u3000\u8efd\u304f\uff19\u6642\u9593\u30aa\u30fc\u30d0\u30fc\u3067\u3059\u3002\u4eca\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u3084\u3063\u305f\u3053\u3068\u306a\u3044\u4eba\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306f\u305a\u3057\u3066\u3046\u3054\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","fc2d42f8":"### \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a(Optuna\u3067\u51fa\u529b\u3055\u308c\u305f\u3082\u306e\u3002\u4e00\u90e8\u306f\u624b\u5165\u529b\uff09\n### n_estimators,learning_rate\u306fOptuna\u3067\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\u3053\u308c\u3092\u3069\u3046\u3084\u3063\u3066\u6c7a\u3081\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002Gridserch\u3068\u304b\u3067\u3084\u308b\u306e\u304b\u306a\u3042\u3002"}}