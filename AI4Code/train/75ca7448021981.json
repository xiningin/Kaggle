{"cell_type":{"2f1a8c10":"code","f4dff551":"code","9658e805":"code","9bc53d1c":"code","ee134770":"code","27912466":"code","f7be2c50":"code","4d0ed81b":"code","952c4790":"code","7967e6e3":"code","255a6cc2":"code","28a46e3b":"code","b4e3af1e":"code","ad14eac0":"code","f90d467a":"code","9a16d085":"code","32ffc98e":"code","2f8d90a8":"code","458da159":"code","087ba7d7":"markdown","09ba9625":"markdown","c17fedc7":"markdown","53ee6bb6":"markdown","c6269fd7":"markdown","f8d7de61":"markdown","691940a8":"markdown"},"source":{"2f1a8c10":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        ","f4dff551":"data=pd.read_csv('..\/input\/fish-market\/Fish.csv')","9658e805":"print(data.shape)\ndata.head()","9bc53d1c":"data.info()","ee134770":"data.describe()","27912466":"data.Species.value_counts()","f7be2c50":"sns.countplot(data['Species'])","4d0ed81b":"sns.heatmap(data.corr(), annot=True, cmap='viridis')","952c4790":"plt.figure(figsize=(20,4))\nplt.subplot(1,6,1)\nsns.boxplot(data['Weight'])\nplt.subplot(1,6,2)\nsns.boxplot(data['Height'])\nplt.subplot(1,6,3)\nsns.boxplot(data['Width'])\nplt.subplot(1,6,4)\nsns.boxplot(data['Length1'])\nplt.subplot(1,6,5)\nsns.boxplot(data['Length2'])\nplt.subplot(1,6,6)\nsns.boxplot(data['Length3'])","7967e6e3":"def outlier_threshold(data1, variable):\n    q1=data1[variable].quantile(0.25)\n    q3=data1[variable].quantile(0.75)\n    IQR=q3-q1\n    lower_limit, upper_limit=q1 - 1.5 * IQR, q3 + 1.5 * IQR\n    return lower_limit, upper_limit\n\ndef has_outlier(data1, variable):\n    lower_limit, upper_limit=outlier_threshold(data1, variable)\n    if data1[(data1[variable]<lower_limit) | (data1[variable]>upper_limit)].any(axis=None):\n        print(variable, 'Yes')\n    else:\n        print(variable, 'No')\n        \ncolumns=data.columns\ncolumns=columns.drop('Species')\n\nfor column in columns:\n    has_outlier(data, column)","255a6cc2":"def replace_with_threshold(data1, num_feature):\n    for variable in num_feature:\n        lower_limit, upper_limit=outlier_threshold(data1, variable)\n        data.loc[(data[variable]<lower_limit), variable]=lower_limit\n        data.loc[(data[variable]>upper_limit), variable]=upper_limit\n        \nreplace_with_threshold(data, columns)     ","28a46e3b":"for column in columns:\n    has_outlier(data, column)","b4e3af1e":"plt.figure(figsize=(20,4))\nplt.subplot(1,6,1)\nsns.boxplot(data['Weight'])\nplt.subplot(1,6,2)\nsns.boxplot(data['Height'])\nplt.subplot(1,6,3)\nsns.boxplot(data['Width'])\nplt.subplot(1,6,4)\nsns.boxplot(data['Length1'])\nplt.subplot(1,6,5)\nsns.boxplot(data['Length2'])\nplt.subplot(1,6,6)\nsns.boxplot(data['Length3'])","ad14eac0":"sns.pairplot(data, hue='Species')","f90d467a":"X=data.drop('Species', axis=1)\ny=data['Species']","9a16d085":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nX_scale=scaler.fit_transform(X)\nX_scale.shape","32ffc98e":"x_train ,x_test, y_train ,y_test=train_test_split(X_scale, y, test_size=0.3, random_state=42)\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","2f8d90a8":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train ,y_train)\nprint('training set score :{}'.format(knn.score(x_train ,y_train)))\nprint('testing set score :{}'.format(knn.score(x_test, y_test)))","458da159":"from sklearn.metrics import classification_report , accuracy_score, confusion_matrix\nprint('classification report :{}'.format(classification_report(y_test, y_pred)))\nprint('\\n')\n\nprint('accuracy_score :{}'.format(accuracy_score(y_test, y_pred)))\nprint('\\n')\n\nprint('confusion_matrix :{}'.format(confusion_matrix(y_test, y_pred)))\n","087ba7d7":"## build the model","09ba9625":"## Exploratory data analysis","c17fedc7":"## Import The library","53ee6bb6":"## check the outlier","c6269fd7":"## feature scaling","f8d7de61":"## Handle the outlier","691940a8":"## Load the data"}}