{"cell_type":{"34b4c23f":"code","77b98a8c":"code","3a234324":"code","551b5251":"code","d7dee3b6":"code","e15e7c7c":"code","0aa5e20c":"code","4da2b8fb":"code","948d1ba4":"markdown","491be7f1":"markdown","715ad36f":"markdown","8c9a0890":"markdown","76b0d215":"markdown","2dad5183":"markdown","428e7a25":"markdown","445a5c12":"markdown","b0b0fa08":"markdown"},"source":{"34b4c23f":"# connecting packeges\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Sigmoid\nfrom scipy.special import expit","77b98a8c":"class NeuralNetwork:\n    # initialization function\n    def __init__(self, inputnodes, hiddenodes, outputnodes, learningrate):\n        # Neuron count\n        ## in the incoming layer\n        self.inodes = inputnodes\n        ## in the hidden layer\n        self.hnodes = hiddenodes\n        ## in the outgoing layer\n        self.onodes = outputnodes\n        \n        # the weight of the output from the input layer to the hidden layer\n        self.wih = np.random.normal(.0, pow(self.inodes, -.5), (self.hnodes, self.inodes))\n        # the weight of the output from the hidden layer to the output layer\n        self.who = np.random.normal(.0, pow(self.hnodes, -.5), (self.onodes, self.hnodes)) \n        \n        # Coefficient learning(the accuracy of the model)\n        self.lr = learningrate\n        \n        # # actibation function\n        self.activation_function = lambda x: expit(x)\n        \n    # Error receiving function \n    def query(self, inputs_list):\n        # Convert to two-dimensional array\n        inputs = np.array(inputs_list, ndmin=2).T\n        \n        # The incoming signal for the hidden layer\n        hidden_inputs = np.dot(self.wih, inputs)\n        # Outgoing signal for hidden layer\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # The incoming signal for the output layer\n        final_inputs = np.dot(self.who, hidden_outputs)\n        # Outgoing signal to the output of the hidden layer\n        final_outputs = self.activation_function(final_inputs)\n        \n        return final_outputs\n    \n    # Training neural network Function\n    def train(self, inputs_list, targets_list):\n        # Getting output values\n        # Convert to two-dimensional array\n        inputs = np.array(inputs_list, ndmin=2).T\n        \n        # The incoming signal for the hidden layer\n        hidden_inputs = np.dot(self.wih, inputs)\n        # Outgoing signal for hidden layer\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # The incoming signal for the output layer\n        final_inputs = np.dot(self.who, hidden_outputs)\n        # Outgoing signal to the output of the hidden layer\n        final_outputs = self.activation_function(final_inputs)\n        \n        # Get the desired values \n        # Convert to two-dimensional array\n        target = np.array(targets_list, ndmin=2).T\n        \n        # Calculation of the model error\n        ## Error in the output layer\n        outputs_errors = target - final_outputs\n        ## Hidden layer error\n        hidden_errors = np.dot(self.who.T, outputs_errors)\n        \n        \n        # Update weights\n        ## Between output layer hidden and \n        self.who += self.lr * np.dot((outputs_errors * final_outputs * (1 - final_outputs)), np.transpose(hidden_outputs))\n        ## Between hidden and input layer\n        self.wih += self.lr * np.dot((hidden_errors * hidden_outputs * (1 - hidden_outputs)), np.transpose(inputs)) ","3a234324":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsample = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","551b5251":"temp = train.drop(labels = [\"label\"],axis = 1).values.reshape(-1,28,28,1)\nplt.figure(figsize=(15,4.5))\nfor i in range(30):  \n    plt.subplot(3, 10, i+1)\n    plt.imshow(temp[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","d7dee3b6":"scaled_input = (np.array(train.iloc[1, 1:]) \/ 255 * .99) + .01","e15e7c7c":"inputnodes = 784\nhiddenodes = 100\noutputnodes = 10\nlearningrate = .3\n\n# Create neural network\nnn = NeuralNetwork(inputnodes, hiddenodes, outputnodes, learningrate)","0aa5e20c":"for pix in train.index:\n    values = np.array(train.iloc[pix, 1:])\n    inputs = (np.asfarray(values) \/ 255 * .99) + .01\n    targets = np.zeros(outputnodes) + .01\n    targets[int(train.iloc[pix, 1])] = .99\n    nn.train(inputs, targets)","4da2b8fb":"scorecard = []\n\nfor pix in test.index:\n    values = np.array(test.iloc[pix, :])\n    correct_label = int(sample.loc[pix, 'Label'])\n    inputs = (np.asfarray(values) \/ 255 * .99) + .01\n    outputs = nn.query(inputs)\n    label = np.argmax(outputs)\n    if label == correct_label:\n        scorecard.append(1)\n    else:\n        scorecard.append(0)\n#     print(correct_label, label, end='||')\nscorecard_array = np.asarray(scorecard)\n# scorecard_array.sum() \/ scorecard_array.size\nans = scorecard_array.sum() \/ scorecard_array.size\nprint('The accuracy of the predicted values of the neural network: %.2f%%' % (ans * 100))","948d1ba4":"<p style=\"text-indent: 25px;\">Let's create a class for a neural network.<\/p>","491be7f1":"<p style=\"text-indent: 25px;\">Since the data represents the power of color, the data is distributed from 0 to 255. for better performance, normalize the data from 0 to 1.<\/p>","715ad36f":"# <center>MNIST handwritten images analysis by numpy.<\/center> #\n#### <center>13.12.2019<\/center> ####\n\n### <center>Introduction<\/center> ###\n\n<p style=\"text-indent: 25px;\">Handwriting analysis with numpy module.<\/p>\n<p style=\"text-indent: 25px;\">The data obtained from <a href=\"https:\/\/www.kaggle.com\/c\/digit-recognizer\/data\"> $Kaggle$ <\/a> will be used for the analysis.<\/p>\n<p style=\"text-indent: 25px;\">This jupyret presents handwriting analysis using a multi-layer perceptron neural network built using the numpy module.<\/p>\n","8c9a0890":"<p style=\"text-indent: 25px;\">Let's look at what the data is.<\/p>","76b0d215":"<p style=\"text-indent: 25px;\">Download the necessary data.<\/p>","2dad5183":"### <center>Summary:<\/center> ###\n\n<p style=\"text-indent: 25px;\">When using a neural network built on the module numpy bul received a positive result of the analysis of handwriting.<\/p>","428e7a25":"<p style=\"text-indent: 25px;\"><p style=\"text-indent: 25px;\">Let's introduce the necessary neurons. The image is presented in the format of 28X28 pixels. which corresponds to 784 neurons. We will also introduce 100 hidden neurons. Since the output we get numbers from 0 to 9 the number of output neurons is 10.<\/p>","445a5c12":"<p style=\"text-indent: 25px;\"><p style=\"text-indent: 25px;\">Let's check the neural network on the test data and find the accuracy of the predicted network.<\/p>","b0b0fa08":"<p style=\"text-indent: 25px;\">Let's introduce the necessary neurons. The image is presented in the format of 28X28 pixels. which corresponds to 784 neurons. We will also introduce 100 hidden neurons. Since the output we get numbers from 0 to 9 the number of output neurons is 10.<\/p>"}}