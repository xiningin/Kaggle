{"cell_type":{"52c50f81":"code","de6db23b":"code","984f2e66":"code","d77480e2":"code","314e0cce":"code","5c6fbb6e":"code","ed3f02f1":"code","025bd9a6":"code","ca1b5a38":"code","af595d2d":"code","654416ef":"code","dc7b6139":"code","17d182f1":"code","7cc0d4c5":"code","3d5c14c1":"code","e764b36b":"code","279f4674":"code","a6dec4c2":"code","dbc6ec44":"code","dc774432":"code","10ad94f8":"code","e1203cf8":"code","3c445ad6":"code","264cd753":"code","4bb3fe7e":"code","35ff7a7b":"code","e65247e0":"code","245f3209":"code","6eb63165":"code","fc521b89":"code","eb7cf34e":"code","9eb180dc":"code","c5a3d08d":"code","5333a528":"code","be888d4b":"code","a337e234":"code","1f7ef7e5":"code","262219f8":"code","b962617d":"code","0d64955b":"code","158f881c":"code","162a9e05":"code","8342b087":"code","884962f4":"code","486a4a01":"code","97d7474d":"code","065283e8":"code","678d5871":"code","fc241cfc":"code","5fac3c7d":"code","414c9125":"code","a257105b":"code","f55cfc77":"code","9baeeca4":"code","3a2c395b":"code","34181169":"code","93768051":"code","0a614ae4":"code","95fcb721":"code","69b25077":"markdown","7dce2fc0":"markdown","270b33f3":"markdown","75f7368d":"markdown","bcd5fc41":"markdown","f62a0f27":"markdown","234a20e4":"markdown","21f38f78":"markdown","6f2bdaa4":"markdown","4c464c8c":"markdown","5635fdaf":"markdown","2081d497":"markdown"},"source":{"52c50f81":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","de6db23b":"data = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","984f2e66":"data.head()","d77480e2":"data.describe()","314e0cce":"duplicate_datarow = data[data.duplicated()]\nprint(\"Duplicate rows: \", duplicate_datarow.shape)","5c6fbb6e":"data = data.drop_duplicates()","ed3f02f1":"duplicate_datarow = data[data.duplicated()]\nprint(\"Duplicate rows: \", duplicate_datarow.shape)","025bd9a6":"data.info()","ca1b5a38":"data.isnull().any()","af595d2d":"data.isnull().sum()","654416ef":"data.describe().transpose()","dc7b6139":"plt.figure(figsize=(12,7))\nsns.countplot(x=data[\"output\"], color=\"red\", alpha=0.4)","17d182f1":"print(data['age'].mean())\nprint(data['age'].min())\nprint(data['age'].max())","7cc0d4c5":"plt.figure(figsize=(12,7))\nsns.distplot(x=data[\"age\"], bins=15, color=\"red\")","3d5c14c1":"sns.jointplot(x=\"age\", y=\"chol\", data=data, hue=\"output\")","e764b36b":"data = data[data[\"chol\"] < 380]","279f4674":"data[\"chol\"].max()","a6dec4c2":"gender_gb = data.groupby(\"output\")[\"sex\"]\ngender_gb.value_counts()","dbc6ec44":"data = data[data[\"trtbps\"] < 180]","dc774432":"data[\"trtbps\"].max()","10ad94f8":"data = data[data[\"thalachh\"] > 100]","e1203cf8":"data[\"thalachh\"].min()","3c445ad6":"ekg_normal = len(data[data[\"restecg\"] == 0])\/len(data[\"restecg\"])*100\nekg_normal","264cd753":"ekg1 = len(data[data[\"restecg\"] == 1])\/len(data[\"restecg\"])*100\nekg2 = len(data[data[\"restecg\"] == 2])\/len(data[\"restecg\"])*100\nekg_normal = len(data[data[\"restecg\"] == 0])\/len(data[\"restecg\"])*100\n\nprint(\"Abnormal EKG: {:.2f}\".format(ekg1))\nprint(\"\\n\")\nprint(\"Hypertrophy by Estes: {:.2f}\".format(ekg2))\nprint(\"\\n\")\nprint(\"Normal EKG: {:.2f}\".format(ekg_normal))","4bb3fe7e":"plt.figure(figsize=(18,7))\nsns.heatmap(data.corr(method=\"pearson\"), cmap=\"PuRd\", annot=True, lw=0.1)","35ff7a7b":"data[\"caa\"] = data[\"caa\"].replace([2,3,4],1)\ndata[\"caa\"].value_counts()","e65247e0":"data[\"oldpeak\"].min()","245f3209":"data[\"oldpeak\"] = data[\"oldpeak\"].replace(0.0, 0.01)\ndata[\"oldpeak\"].value_counts()","6eb63165":"data[\"log_oldpeak\"] = np.log10(data[\"oldpeak\"])","fc521b89":"data = data.drop(\"oldpeak\", axis=1)","eb7cf34e":"data.corr()[\"output\"]","9eb180dc":"data = data.drop([\"trtbps\", \"chol\", \"restecg\", \"fbs\", \"age\", \"sex\"], axis=1)","c5a3d08d":"data.corr()[\"output\"]","5333a528":"data.head()","be888d4b":"X = data.drop(\"output\", axis=1)\ny = data[\"output\"]","a337e234":"from sklearn.model_selection import train_test_split","1f7ef7e5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","262219f8":"from sklearn.tree import DecisionTreeClassifier","b962617d":"tree_model = DecisionTreeClassifier(max_depth=15, random_state=42)","0d64955b":"tree_model.fit(X_train, y_train)","158f881c":"tree_predict = tree_model.predict(X_test)","162a9e05":"tree_predict","8342b087":"from sklearn.metrics import classification_report, confusion_matrix","884962f4":"print(classification_report(y_test, tree_predict))\nprint(\"Confusion Report:\")\nprint(confusion_matrix(y_test, tree_predict))","486a4a01":"from sklearn.ensemble import RandomForestClassifier","97d7474d":"random_model = RandomForestClassifier(n_estimators=80, bootstrap=True, random_state=42, criterion=\"entropy\")","065283e8":"random_model.fit(X_train, y_train)","678d5871":"random_predict = random_model.predict(X_test)","fc241cfc":"from sklearn.linear_model import LogisticRegression","5fac3c7d":"log_model = LogisticRegression(solver=\"liblinear\", random_state=42)","414c9125":"log_model.fit(X_train, y_train)","a257105b":"log_predict = log_model.predict(X_test)","f55cfc77":"print(classification_report(y_test, log_predict))\nprint(\"Confusion Report:\")\nprint(confusion_matrix(y_test, log_predict))","9baeeca4":"from sklearn.naive_bayes import GaussianNB","3a2c395b":"gaussian_model = GaussianNB()","34181169":"gaussian_model.fit(X_train, y_train)","93768051":"gaussian_predict = gaussian_model.predict(X_test)","0a614ae4":"print(classification_report(y_test, gaussian_predict))\nprint(\"Confusion Report:\")\nprint(confusion_matrix(y_test, gaussian_predict))","95fcb721":"report = [[\"GaussianNB\", 0.84, 0.84, 0.84, 0.84], [\"Random Forest\", 0.82, 0.83, 0.82, 0.82], \n          [\"DecisionTreeClassifier\", 0.81, 0.81, 0.81, 0.81],\n          [\"LogisticRegression\", 0.88, 0.87, 0.86, 0.86]]\noverall_result = pd.DataFrame(report, columns=[\"Model\", \"Accuracy Score\", \"Precision\", \"Recall\", \"F1-score\"])\noverall_result.sort_values(\"Accuracy Score\", ascending=False)","69b25077":"Checking duplicate data","7dce2fc0":"All algorithm report","270b33f3":"Predictive mode: Linear model","75f7368d":"**Basic descriptive analysis**","bcd5fc41":"****Removing out layer****","f62a0f27":"Predictive model Naive Bayes","234a20e4":"Random forest classifier","21f38f78":"Creating X,Y variable for training","6f2bdaa4":"Import library","4c464c8c":"Read data from kaggle\n","5635fdaf":"**Exploratory data analysis**","2081d497":"Decision Tree Prediction"}}