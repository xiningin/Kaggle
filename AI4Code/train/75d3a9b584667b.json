{"cell_type":{"e8827b47":"code","b2a71a6d":"code","9aa784a9":"code","139161c3":"code","b364f65c":"code","ecfd581c":"code","6bc4753f":"code","93813c46":"code","b34259da":"code","fb3392cf":"code","e1c6a9c3":"code","f7223202":"code","98ee68b9":"code","9ab70f5a":"code","7a47e252":"code","9cd2c760":"code","a1c722cb":"code","967f0165":"code","a2d069e3":"code","cbfc3936":"code","84295424":"code","656e8491":"code","9c27db3c":"code","2f5f5c81":"code","0e981ae1":"code","ffb51e0e":"code","7e69e81e":"code","1e2cb6cf":"code","20f87307":"code","d3262cf3":"code","702e3741":"code","3a40cf24":"code","da246e83":"code","2b79305d":"code","a08751db":"code","71c250a9":"code","71ccbf7b":"code","31283bb4":"code","b31c67e9":"code","2c7ff4e9":"code","1e141513":"code","af9913c6":"code","e6b5cb3f":"code","de040a96":"code","5f0e543f":"code","f3118869":"code","893fd161":"code","5df8557d":"code","e0e6e3c0":"code","6ac56760":"code","147be521":"code","9438c7fa":"code","c0abf393":"code","d425d270":"code","4455170f":"code","5c5cc315":"code","e738e33d":"code","c7e3d673":"code","a85feaf5":"code","f7ed6387":"code","3a843561":"code","f8852162":"code","d800f20d":"code","f67122fb":"code","4561fce6":"code","2c960cd3":"code","04e40f08":"code","b0aa302a":"code","34c5c06c":"code","b6a98537":"code","f8fc7692":"code","97f1d3e4":"code","6e7f36c1":"code","b3b2b248":"code","ffb4d9af":"code","5017eae0":"code","9aa2d657":"code","a5a74a6b":"code","81b2cdf3":"code","635eb8c2":"code","4dc1d0c3":"code","134c5098":"code","e249f32f":"code","3f168aec":"code","a31fc3e9":"code","6087de4a":"code","9b2ee2ac":"code","110ab424":"code","4e2f0db4":"code","2ae38ce8":"code","16dda8b9":"code","634e2258":"code","fe6d5db3":"code","75e5c8b2":"markdown","8ef142af":"markdown","f0fd3f3b":"markdown","451b459c":"markdown","739b6fde":"markdown","7000c574":"markdown","7e9bf802":"markdown","ae920b03":"markdown","9483561f":"markdown","00d49cf3":"markdown","dea8335a":"markdown","5bb5f93c":"markdown","afa85ceb":"markdown","03e7cf3b":"markdown","2f43c193":"markdown","681e398a":"markdown","57adf1cb":"markdown","e1b46423":"markdown","687f0551":"markdown","d10990cc":"markdown"},"source":{"e8827b47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2a71a6d":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","9aa784a9":"import warnings\nwarnings.filterwarnings('ignore') #\u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f","139161c3":"#\u0435\u0434\u0438\u043d\u044b\u0439 \u0448\u0440\u0438\u0444\u0442 \u0434\u043b\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432\nmatplotlib.rcParams.update({'font.size': 12})","b364f65c":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","ecfd581c":"#\u041f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c\n\nTRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","6bc4753f":"#\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 train.csv\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.head(10)","93813c46":"#\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c train \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)\nprint(train_df.shape)\nprint(\"\u0412\u0441\u0435\u0433\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440:\", train_df.shape[0])\nprint(\"\u0412\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\", train_df.shape[1])","b34259da":"#\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 test.csv\ntest_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.head(10)","fb3392cf":"#\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c test \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)\nprint(test_df.shape)\nprint(\"\u0412\u0441\u0435\u0433\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440:\", test_df.shape[0])\nprint(\"\u0412\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\", test_df.shape[1])","e1c6a9c3":"train_df.dtypes","f7223202":"test_df.dtypes","98ee68b9":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)\ntrain_df['Rooms'] = train_df['Rooms'].astype(int)\ntrain_df['HouseFloor'] = train_df['HouseFloor'].astype(int)\ntrain_df['Ecology_1'] = train_df['Ecology_1'].astype(int)\n\ntest_df['Id'] = test_df['Id'].astype(str)\ntest_df['DistrictId'] = test_df['DistrictId'].astype(str)\ntest_df['Rooms'] = test_df['Rooms'].astype(int)\ntest_df['HouseFloor'] = test_df['HouseFloor'].astype(int)\ntest_df['Ecology_1'] = test_df['Ecology_1'].astype(int)","9ab70f5a":"plt.figure(figsize = (12, 6))\n\ntrain_df['Price'].hist(bins=40)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f')\nplt.show()","7a47e252":"#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ntrain_df.describe()","9cd2c760":"#\u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ntrain_df.select_dtypes(include='object').columns.tolist()","a1c722cb":"train_df['Rooms'].value_counts()","967f0165":"#\u0432\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u0440\u0435\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440: \"1\" \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441, \"0\" \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043f\u043e\u0434 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 7), 'Rooms_outlier'] = 1\ntrain_df.head()","a2d069e3":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 7 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n#\u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 100 \u043a\u0432.\u043c. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 7 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n#\u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e 100 \u043a\u0432.\u043c., \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \"Room\" \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 1.\ntrain_df.loc[(train_df['Rooms'] == 0) & (train_df['Square'] <= 100), 'Rooms'] = 1\ntrain_df.loc[(train_df['Rooms'] == 0) & (train_df['Square'] > 100), 'Rooms'] = train_df['Rooms'].median()\ntrain_df.loc[(train_df['Rooms'] >= 7) & (train_df['Square'] <= 100), 'Rooms'] = 1\ntrain_df.loc[(train_df['Rooms'] >= 7) & (train_df['Square'] > 100), 'Rooms'] = train_df['Rooms'].median()","cbfc3936":"train_df['Rooms'].value_counts()","84295424":"train_df.loc[(train_df['Square'] <= 31) | (train_df['Square'] > 300)]","656e8491":"#\u0432\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u0440\u0435\u0434\u0438 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440: \"1\" \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441, \"0\" \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043f\u043e\u0434 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df['Square_outlier'] = 0\ntrain_df.loc[(train_df['Square'] <= 31) | (train_df['Square'] > 300), 'Square_outlier'] = 1\ntrain_df.head()","9c27db3c":"train_df['Square'].quantile(.975), train_df['Square'].quantile(.025)","2f5f5c81":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435 300 \u043a\u0432.\u043c. \n#\u0438 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 31 \u043a\u0432.\u043c.\ntrain_df.loc[train_df['Square'] <= 31, 'Square'] = train_df['Square'].mean()\ntrain_df.loc[train_df['Square'] > 300, 'Square'] = train_df['Square'].quantile(.975)","0e981ae1":"train_df['Square'].value_counts()","ffb51e0e":"train_df['KitchenSquare'].quantile(.800), train_df['KitchenSquare'].quantile(.200)","7e69e81e":"train_df['KitchenSquare'].quantile(.995), train_df['KitchenSquare'].quantile(.005)","1e2cb6cf":"#\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 'KitchenSquare' \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b: \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b,\n#\u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\ncondition_1 = (train_df['KitchenSquare'].isna()) \\\n             | (train_df['KitchenSquare'] > train_df['KitchenSquare'].quantile(.995))\n\ncondition_2 = (train_df['Square'] <= 31) \\\n             | (train_df['Square'] <= 40)\n                \ncondition_3 = (train_df['Square'] > 40) \\\n             | (train_df['Square'] <= train_df['Square'].mean())\n\ncondition_4 = (train_df['Square'] > train_df['Square'].mean()) \\\n             | (train_df['Square'] <= 90)\n     \ntrain_df.loc[condition_1, 'KitchenSquare'] = 20 ##quantile(.995)\n\ntrain_df.loc[condition_2, 'KitchenSquare'] = train_df['KitchenSquare'].median()\n\ntrain_df.loc[condition_3, 'KitchenSquare'] = 9  ##quantile(.800)\n\ntrain_df.loc[condition_4, 'KitchenSquare'] = 13 ##quantile(.975)\n\ntrain_df.loc[train_df['Square'] > 90, 'KitchenSquare'] = 20 ##quantile(.995)\n\ntrain_df.loc[train_df['KitchenSquare'] < 5, 'KitchenSquare'] = 5","20f87307":"train_df['KitchenSquare'].value_counts()","d3262cf3":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432 \u0434\u043e\u043c\u0430\u0445 \u043a\u0430\u043a\u043e\u0439 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ntrain_df['HouseFloor'].sort_values().unique()","702e3741":"#\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0430 26.07.2021 \u0432 \u0441\u0430\u043c\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u043e\u043c \u0437\u0434\u0430\u043d\u0438\u0438 \u041c\u043e\u0441\u043a\u0432\u044b \u043d\u0430\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f 75 \u044d\u0442\u0430\u0436\u0435\u0439, \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 0 \u0438 \u0432\u0441\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 75\n#\u0442\u0430\u043a\u0438\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432\u0441\u0435\u0433\u043e 3, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u044b \u0438\u0445 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\ntrain_df.loc[(train_df['HouseFloor'] == 0) | (train_df['HouseFloor'] > 75), 'HouseFloor'] = train_df['HouseFloor'].mean()","3a40cf24":"train_df['HouseFloor'].sort_values().unique()","da246e83":"train_df['HouseFloor'].value_counts()","2b79305d":"#\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u0435\u0435\n#\u0432\u044b\u0441\u043e\u043a\u043e\u043c \u044d\u0442\u0430\u0436\u0435, \u0447\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043e\u043c\u0430\n(train_df['Floor'] > train_df['HouseFloor']).sum()","a08751db":"#\u0432\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u0440\u0435\u0434\u0438 'HouseFloor': \"1\" \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441, \"0\" \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043f\u043e\u0434 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","71c250a9":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'HouseFloor' \u0432 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e \"0\" \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u044d\u0442\u0430\u0436\u0430 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'Floor'.\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['Floor']\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor'] = train_df['Floor']","71ccbf7b":"train_df['HouseFloor'].value_counts()","31283bb4":"train_df['HouseYear'].sort_values(ascending=False)","b31c67e9":"train_df.loc[train_df['HouseYear'] > 2021, 'HouseYear'] = 2021\ntrain_df.loc[train_df['HouseYear'] <= 1900, 'HouseYear'] = 1900","2c7ff4e9":"train_df['HouseYear'].value_counts()","1e141513":"train_df[['Square', 'LifeSquare', 'KitchenSquare']].head(10)","af9913c6":"train_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n\ncondition = (train_df['LifeSquare'].isna()) \\\n             & (~train_df['Square'].isna()) \\\n             & (~train_df['KitchenSquare'].isna())\n        \ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] \\\n                                            - train_df.loc[condition, 'KitchenSquare'] - 10","e6b5cb3f":"train_df[['Square', 'LifeSquare', 'KitchenSquare']].tail(20)","de040a96":"#\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043d\u0430\u0434 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b; \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n(train_df['LifeSquare'] >= train_df['Square']).sum()","5f0e543f":"#\u0432\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u0440\u0435\u0434\u0438 'LifeSquare': \"1\" \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441, \"0\" \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043f\u043e\u0434 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df['LifeSquare_outlier'] = 0\ntrain_df.loc[train_df['LifeSquare'] == 0, 'LifeSquare_outlier'] = 1\ntrain_df.loc[train_df['LifeSquare'] >= train_df['Square'], 'LifeSquare_outlier'] = 1","f3118869":"train_df['LifeSquare'].quantile(.975), train_df['LifeSquare'].quantile(.025)","893fd161":"train_df['LifeSquare'].quantile(.650), train_df['LifeSquare'].quantile(.350)","5df8557d":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 'LifeSquare' \u0432 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 025 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\ntrain_df.loc[train_df['LifeSquare'] <= train_df['LifeSquare'].quantile(.025), 'LifeSquare'] = train_df['LifeSquare'].quantile(.025)\ntrain_df.loc[train_df['LifeSquare'] >= train_df['Square'], 'LifeSquare'] = train_df['LifeSquare'].quantile(.350)","e0e6e3c0":"(train_df['LifeSquare'] >= train_df['Square']).sum()","6ac56760":"train_df['LifeSquare'].value_counts()","147be521":"train_df['Healthcare_1'].sort_values().unique()","9438c7fa":"#\u0432\u0432\u043e\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0441\u0440\u0435\u0434\u0438 'Healthcare_1': \"1\" \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441, \"0\" \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043f\u043e\u0434 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\ntrain_df['Healthcare_1_outlier'] = 0\ntrain_df.loc[train_df['Healthcare_1'] == 0, 'Healthcare_1_outlier'] = 1\ntrain_df.loc[train_df['Healthcare_1'] >= 1000, 'Healthcare_1_outlier'] = 1","c0abf393":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b 'Healthcare_1' \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b\ntrain_df.loc[(train_df['Healthcare_1'] == 0) | (train_df['Healthcare_1'] >= 1000), 'Healthcare_1'] = train_df['Healthcare_1'].median()","d425d270":"train_df['Healthcare_1'].value_counts()","4455170f":"train_df['Healthcare_1'].quantile(.700), train_df['Healthcare_1'].quantile(.300)","5c5cc315":"#\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 300\nfill_Hc1 = train_df['Healthcare_1'].quantile(.300)","e738e33d":"train_df['Healthcare_1'] = train_df['Healthcare_1'].fillna(fill_Hc1)","c7e3d673":"train_df['Healthcare_1'].value_counts()","a85feaf5":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.means = None\n        self.medians = None\n        self.kitchensquare1_quantile = None\n        self.kitchensquare2_quantile = None\n        self.kitchensquare3_quantile = None\n        self.square_quantile = None\n        self.lifesquare1_quantile = None\n        self.lifesquare2_quantile = None\n        self.healthcare1_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchensquare1_quantile = X['KitchenSquare'].quantile(.995)\n        self.kitchensquare2_quantile = X['KitchenSquare'].quantile(.975)\n        self.kitchensquare3_quantile = X['KitchenSquare'].quantile(.800)\n        self.square_quantile = X['Square'].quantile(.975)\n        self.lifesquare1_quantile = X['LifeSquare'].quantile(.350)\n        self.lifesquare2_quantile = X['LifeSquare'].quantile(.025)\n        self.healthcare1_quantile = X['Healthcare_1'].quantile(.300)\n        \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n        self.means = X.mean()\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 7), 'Rooms_outlier'] = 1\n        \n        X.loc[(X['Rooms'] == 0) & (X['Square'] <= 100), 'Rooms'] = 1\n        X.loc[(X['Rooms'] == 0) & (X['Square'] > 100), 'Rooms'] = self.medians['Rooms']\n        X.loc[X['Rooms'] >= 7 & (X['Square'] <= 100), 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 7 & (X['Square'] > 100), 'Rooms'] = self.medians['Rooms'] \n        \n        # Square\n        X['Square_outlier'] = 0\n        X.loc[(X['Square'] <= 31) | (X['Square'] > 300), 'Square_outlier'] = 1\n        \n        X.loc[X['Square'] <= 31, 'Square'] = self.means['Square']\n        X.loc[X['Square'] > 300, 'Square'] = self.square_quantile\n                \n        # KitchenSquare\n        condition_1 = (X['KitchenSquare'].isna()) \\\n                    | (X['KitchenSquare'] > self.kitchensquare1_quantile)\n        condition_2 = (X['Square'] <= 31) \\\n                     | (X['Square'] <= 40)            \n        condition_3 = (X['Square'] > 40) \\\n                     | (X['Square'] <= self.means['Square'])\n        condition_4 = (X['Square'] > self.means['Square']) \\\n                     | (X['Square'] <= 90)\n        \n        X.loc[condition_1, 'KitchenSquare'] = self.kitchensquare1_quantile\n        X.loc[condition_2, 'KitchenSquare'] = self.medians['KitchenSquare']\n        X.loc[condition_3, 'KitchenSquare'] = self.kitchensquare3_quantile\n        X.loc[condition_4, 'KitchenSquare'] = self.kitchensquare2_quantile\n        X.loc[X['Square'] > 90, 'KitchenSquare'] = self.kitchensquare1_quantile\n        X.loc[X['KitchenSquare'] < 5, 'KitchenSquare'] = 5\n       \n           \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0 | (X['HouseFloor'] > 75), 'HouseFloor'] = self.means['HouseFloor']        \n             \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = X['Floor']\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor'] = X['Floor']\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        X.loc[X['HouseYear'] <= 1900, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        X.loc[X['HouseYear'] <= 1900, 'HouseYear_outlier'] = 1900\n        \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 10\n        \n        X['LifeSquare_outlier'] = 0\n        X.loc[X['LifeSquare'] == 0, 'LifeSquare_outlier'] = 1\n        X.loc[X['LifeSquare'] >= X['Square'], 'LifeSquare_outlier'] = 1\n        \n        X.loc[X['LifeSquare'] <= self.lifesquare2_quantile, 'LifeSquare'] = self.lifesquare2_quantile\n        X.loc[X['LifeSquare'] >= X['Square'], 'LifeSquare'] = self.lifesquare1_quantile \n        \n        # Healthcare_1         \n        X['Healthcare_1_outlier'] = 0\n        X.loc[X['Healthcare_1'] == 0, 'Healthcare_1_outlier'] = 1\n        X.loc[X['Healthcare_1'] >= 1000, 'Healthcare_1_outlier'] = 1\n        \n        X.loc[(X['Healthcare_1'] == 0) | (X['Healthcare_1'] >= 1000), 'Healthcare_1'] = self.medians['Healthcare_1']\n        \n        fill_Hc1 = self.healthcare1_quantile\n        X['Healthcare_1'] = X['Healthcare_1'].fillna(fill_Hc1)\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","f7ed6387":"#\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\nbinary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","3a843561":"#\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a DistrictId\ndistrict_size = train_df['DistrictId'].value_counts().reset_index()\\\n                    .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head(7)","f8852162":"#\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a train_df\ntrain_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head(7)","d800f20d":"#\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u0441\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0440\u0430\u0439\u043e\u043d\u0430\n(train_df['DistrictSize'] > 100).value_counts()","f67122fb":"train_df['IsDistrictLarge'] = (train_df['DistrictSize'] > 100).astype(int)","4561fce6":"m_price_room_dstr = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'mean'})\\\n                            .rename(columns={'Price':'M_Price_Room_dstr'})\n\nm_price_room_dstr.head(7)","2c960cd3":"m_price_room_dstr.shape","04e40f08":"#\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a train_df\ntrain_df = train_df.merge(m_price_room_dstr, on=['DistrictId', 'Rooms'], how='left')\ntrain_df.head(7)","b0aa302a":"def floor_to_cat(X):\n\n    X['floor_cat'] = 0\n\n    X.loc[X['Floor'] <= 2, 'floor_cat'] = 1  \n    X.loc[(X['Floor'] > 2) & (X['Floor'] <= 5), 'floor_cat'] = 2\n    X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n    X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n    X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n    return X\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 1920, 'year_cat'] = 1\n    X.loc[(X['HouseYear'] > 1920) & (X['HouseYear'] <= 1946), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 1946) & (X['HouseYear'] <= 1959), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 1960) & (X['HouseYear'] <= 1989), 'year_cat'] = 4\n    X.loc[(X['HouseYear'] > 1989) & (X['HouseYear'] <= 2009), 'year_cat'] = 5\n    X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n    return X","34c5c06c":"bins = [0, 3, 5, 9, 15, train_df['Floor'].max()]\npd.cut(train_df['Floor'], bins=bins, labels=False)","b6a98537":"train_df = year_to_cat(train_df)\ntrain_df = floor_to_cat(train_df)\ntrain_df.head()","f8fc7692":"m_price_by_floor_year = train_df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'mean'}).\\\n                                            rename(columns={'Price':'M_PriceByFloorYear'})\nm_price_by_floor_year.head(7)","97f1d3e4":"#\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a train_df\ntrain_df = train_df.merge(m_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\ntrain_df.head(7)","6e7f36c1":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.m_price_room_dstr = None\n        self.m_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.m_price_room_dstr = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'mean'})\\\n                                            .rename(columns={'Price':'M_Price_Room_dstr'})\n            \n            self.m_price_room_dstr_mean = self.m_price_room_dstr['M_Price_Room_dstr'].mean()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.house_year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.m_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'mean'}).\\\n                                            rename(columns={'Price':'M_PriceByFloorYear'})\n            self.m_price_by_floor_year_mean = self.m_price_by_floor_year['M_PriceByFloorYear'].mean()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.m_price_room_dstr is not None:\n            X = X.merge(self.m_price_room_dstr, on=['DistrictId', 'Rooms'], how='left')\n            X['M_Price_Room_dstr'].fillna(self.m_price_room_dstr_mean, inplace=True)\n            \n        if self.m_price_by_floor_year is not None:\n            X = X.merge(self.m_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['M_PriceByFloorYear'].fillna(self.m_price_by_floor_year_mean, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n\n        X['floor_cat'] = 0\n\n        X.loc[X['Floor'] <= 2, 'floor_cat'] = 1  \n        X.loc[(X['Floor'] > 2) & (X['Floor'] <= 5), 'floor_cat'] = 2\n        X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n        X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n        X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n\n        return X\n\n    def year_to_cat(self, X):\n\n        X['year_cat'] = 0\n\n        X.loc[X['HouseYear'] <= 1920, 'year_cat'] = 1\n        X.loc[(X['HouseYear'] > 1920) & (X['HouseYear'] <= 1946), 'year_cat'] = 2\n        X.loc[(X['HouseYear'] > 1946) & (X['HouseYear'] <= 1959), 'year_cat'] = 3\n        X.loc[(X['HouseYear'] > 1960) & (X['HouseYear'] <= 1989), 'year_cat'] = 4\n        X.loc[(X['HouseYear'] > 1989) & (X['HouseYear'] <= 2009), 'year_cat'] = 5\n        X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n\n        return X    \n   ","b3b2b248":"train_df.columns.tolist()","ffb4d9af":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'Square_outlier','HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_nan', 'LifeSquare_outlier', 'Healthcare_1_outlier',\n                     'DistrictSize', 'new_district', 'IsDistrictLarge',  'M_Price_Room_dstr', 'M_PriceByFloorYear']\n\ntarget_name = 'Price'","5017eae0":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","9aa2d657":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=39)","a5a74a6b":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","81b2cdf3":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","635eb8c2":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","4dc1d0c3":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","134c5098":"#\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\nrf_model = RandomForestRegressor(random_state=39, criterion='mse')\nrf_model.fit(X_train, y_train)","e249f32f":"y_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","3f168aec":"#\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\ncv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","a31fc3e9":"cv_score.mean()","6087de4a":"#\u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \"\u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0438\" \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","9b2ee2ac":"from sklearn.ensemble import StackingRegressor, VotingRegressor, BaggingRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\ngb = GradientBoostingRegressor()\n\nstack = StackingRegressor([('lr', lr), ('rf', rf_model)], final_estimator=gb)\nstack.fit(X_train, y_train)","110ab424":"y_train_preds = stack.predict(X_train)\ny_test_preds = stack.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","4e2f0db4":"test_df","2ae38ce8":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","16dda8b9":"predictions = rf_model.predict(test_df)\npredictions","634e2258":"submit['Price'] = predictions\nsubmit.head()","fe6d5db3":"submit.to_csv('rf_submit.csv', index=False)","75e5c8b2":" **\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Healthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0437\u0434\u0440\u0430\u0432\u043e\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","8ef142af":"**7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**","f0fd3f3b":"**5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","451b459c":"**6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test**","739b6fde":"**\u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438**","7000c574":"**4. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","7e9bf802":"\u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 \u0438 \u0440\u0430\u0439\u043e\u043d\u0430 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b - **M_Price_Room_dstr**","ae920b03":"# **\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445** \n**1. EDA** \u0440\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","9483561f":"**8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**","00d49cf3":"\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0430 (\u0442\u0440\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430)","dea8335a":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**","5bb5f93c":"# **\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","afa85ceb":"**Dummies**","03e7cf3b":"**DistrictSize, IsDistrictLarge**","2f43c193":"**M_PriceByFloorYear** - \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0443\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438","681e398a":"## Moscow Real Estate Price Prediction\nGeekbrains Python for Data Science course competition\n\nThe task is to predict the price of flats in test.csv. Two datasets are given: train.csv (contains all features and prices of flats) and test.csv (only features).\n\n**\u0417\u0430\u0434\u0430\u0447\u0430:** \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 test.csv.\n\n\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train.csv (\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b), \u0437\u0430\u0442\u0435\u043c \u0441 \u043f\u043e\u043e\u0449\u044c\u044e \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0446\u0435\u043d\u044b \u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 test.csv (\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438).\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f: Price\n\n\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430: R2 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438 (sklearn.metrics r2)\n\n#\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430: MSE - \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 (sklearn.metrics.mean_squared_error)","57adf1cb":"**2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432**","e1b46423":"**\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432**","687f0551":"**\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445**","d10990cc":"**3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**"}}