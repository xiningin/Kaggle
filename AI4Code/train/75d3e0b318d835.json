{"cell_type":{"cfd2831b":"code","23c4c5e1":"code","6c449f06":"code","aaf23cf8":"code","80ee3963":"code","fb4c1755":"code","6ea13947":"code","fc23b939":"code","0fb00090":"code","2a1334d6":"code","816e6f1e":"code","a5ab3325":"code","87536bfb":"code","fe575d30":"code","46caf2c6":"code","99e40763":"markdown"},"source":{"cfd2831b":"#import libraries\nimport numpy as np\nimport pandas as pd \nimport cv2\nimport matplotlib.pyplot as plt\nimport os","23c4c5e1":"#sample images\nfilenames = (os.listdir(\"..\/input\/face-mask-detection-data\/with_mask\"))\nfor i in filenames:\n    img = plt.imread(\"..\/input\/face-mask-detection-data\/with_mask\/\"+i)\n    plt.imshow(img)\n    plt.title(\"With mask\")\n    break","6c449f06":"#sample images\nfilenames = (os.listdir(\"..\/input\/face-mask-detection-data\/without_mask\"))\nfor i in filenames:\n    img = plt.imread(\"..\/input\/face-mask-detection-data\/without_mask\/\"+i)\n    plt.imshow(img)\n    plt.title(\"Without mask\")\n    break","aaf23cf8":"#read images from the dataset\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom numpy import asarray\nfrom PIL import Image\nx = []\ny = []\nfilenames = (os.listdir(\"..\/input\/face-mask-detection-data\/with_mask\"))\nfor i in filenames:\n    photo = load_img(\"..\/input\/face-mask-detection-data\/with_mask\/\"+i, target_size=(128,128))\n    photo = img_to_array(photo)\n    x.append(photo)\n    y.append(1) # 1 with mask\nfilenames = (os.listdir(\"..\/input\/face-mask-detection-data\/without_mask\"))\nfor i in filenames:\n    photo = load_img(\"..\/input\/face-mask-detection-data\/without_mask\/\"+i, target_size=(128,128))\n    photo = img_to_array(photo)\n    x.append(photo)\n    y.append(0) # 0 without mask\nx = asarray(x)","80ee3963":"#split the data into train and test\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","fb4c1755":"#import CNN libraries\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.layers import Conv2D","6ea13947":"print(x_train.shape, x_test.shape) ","fc23b939":"#convert dependent variable to categorical\nfrom keras.utils import to_categorical\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","0fb00090":"#normalize data\nx_train = x_train\/255.0\nx_test =  x_test\/255.0","2a1334d6":"#build CNN model\nnum_classes = 2\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(128,128,3),padding='same'))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(MaxPooling2D((2, 2),padding='same'))\nmodel.add(Conv2D(64, (3, 3), activation='linear',padding='same'))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Conv2D(128, (3, 3), activation='linear',padding='same'))\nmodel.add(LeakyReLU(alpha=0.1))                  \nmodel.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='linear'))\nmodel.add(LeakyReLU(alpha=0.1))                  \nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","816e6f1e":"model.summary()","a5ab3325":"#train model with training set\nmodel_train = model.fit(x_train, y_train, batch_size=64,epochs=20,verbose=1,validation_split=0.20)","87536bfb":"#model performance evaluation\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\npreds = model.predict(x_test, verbose=1)\nprint(\"Accuracy score: \",accuracy_score(y_test, np.round_(preds)))\nprint(\"Classification report:\")\nprint(classification_report(y_test, np.round_(preds)))","fe575d30":"#results\n%matplotlib inline\nimport random\nres = [\"Without Mask\",\"With Mask\"]\nfor i in range(5):\n    plt.figure()\n    im = random.randint(1,958)\n    plt.imshow(x_test[im])\n    plt.title(\"Predicted: {},   Actual: {}\".format(res[np.argmax(preds[im])], res[np.argmax(y_test[im])]))","46caf2c6":"#for future use save the model\nimport pickle\nfilename = 'finalized_model.sav'\npickle.dump(model, open(filename, 'wb'))","99e40763":"Accuracy of the model found to be **0.9635036496350365**"}}