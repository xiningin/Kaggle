{"cell_type":{"4cc72de5":"code","3828e52c":"code","b9797a74":"code","1e20d471":"code","6dfa1131":"code","bd8e611b":"code","f2918961":"code","5f201e4c":"code","103b91ed":"code","aacec15d":"code","9d7b7b01":"code","7928ff42":"code","93647471":"code","74eae418":"markdown","cb6515e9":"markdown","7450eda3":"markdown","2e2ae7b3":"markdown","319239fd":"markdown","fadfa21b":"markdown","4b511ff4":"markdown","79ef0c10":"markdown","4665f468":"markdown","2be7dcf3":"markdown","04ca6cc8":"markdown","29fec8d0":"markdown","34212a1e":"markdown"},"source":{"4cc72de5":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nltk\nfrom nltk.corpus import stopwords\nimport string\nfrom sklearn.model_selection import train_test_split                # to split the data\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score   \nfrom sklearn.metrics import classification_report, confusion_matrix\n\neng_stopwords = set(stopwords.words(\"english\"))\npd.options.mode.chained_assignment = None\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","3828e52c":"!ls ..\/input\/","b9797a74":"# List the embeddings provided by kaggle team\n!ls ..\/input\/embeddings\/","1e20d471":"## Read the train and test dataset and check the top few lines ##\ntrain_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Number of rows in train dataset : \",train_df.shape[0])\nprint(\"Number of rows in test dataset : \",test_df.shape[0]) ","6dfa1131":"train_df.head()","bd8e611b":"#Check for the class-categorization count and also the class imbalance\ncnt_srs = train_df['target'].value_counts()\n\nplt.figure(figsize=(8,4))\nsns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8)\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('target', fontsize=12)\nplt.show()","f2918961":"# Let us print some lines of each of the questions cagtegory in quora to try and understand their writing style if possible.\ngrouped_df = train_df.groupby('target')\nfor name, group in grouped_df:\n    print(\"Target Name :\", name)\n    cnt =0\n    for ind, row in group.iterrows():\n        print(row['question_text'])\n        cnt += 1\n        if cnt == 2:\n            break\n    print(\"\\n\")","5f201e4c":"# Number of words in the text \ntrain_df[\"num_words\"] = train_df[\"question_text\"].apply(lambda x: len(str(x).split()))\ntest_df[\"num_words\"] = test_df[\"question_text\"].apply(lambda x: len(str(x).split()))\n\n## Number of unique words in the text ##\ntrain_df[\"num_unique_words\"] = train_df[\"question_text\"].apply(lambda x: len(set(str(x).split())))\ntest_df[\"num_unique_words\"] = test_df[\"question_text\"].apply(lambda x: len(set(str(x).split())))\n\n## Number of characters in the text ##\ntrain_df[\"num_chars\"] = train_df[\"question_text\"].apply(lambda x: len(str(x)))\ntest_df[\"num_chars\"] = test_df[\"question_text\"].apply(lambda x: len(str(x)))\n\n## Number of stopwords in the text ##\ntrain_df[\"num_stopwords\"] = train_df[\"question_text\"].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\ntest_df[\"num_stopwords\"] = test_df[\"question_text\"].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\n\n## Number of punctuations in the text ##\ntrain_df[\"num_punctuations\"] =train_df['question_text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]) )\ntest_df[\"num_punctuations\"] =test_df['question_text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]) )\n\n## Number of title case words in the text ##\ntrain_df[\"num_words_upper\"] = train_df[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\ntest_df[\"num_words_upper\"] = test_df[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n\n## Number of title case words in the text ##\ntrain_df[\"num_words_title\"] = train_df[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\ntest_df[\"num_words_title\"] = test_df[\"question_text\"].apply(lambda x: len([w for w in str(x).split() if w.istitle()]))\n\n## Average length of the words in the text ##\ntrain_df[\"mean_word_len\"] = train_df[\"question_text\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\ntest_df[\"mean_word_len\"] = test_df[\"question_text\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n","103b91ed":"train_df.head(3)","aacec15d":"train_df.shape","9d7b7b01":"train_df['num_words'].loc[train_df['num_words']>50] = 50 #truncation for better visuals\nplt.figure(figsize=(10,6))\nsns.boxplot(x='target', y='num_words', data=train_df)\nplt.xlabel('target category', fontsize=12)\nplt.ylabel('Number of words in text', fontsize=12)\nplt.title(\"Number of words by target category\", fontsize=15)\nplt.show()","7928ff42":"train_df['num_punctuations'].loc[train_df['num_punctuations']>10] = 10 #truncation for better visuals\nplt.figure(figsize=(10,6))\nsns.boxplot(x='target', y='num_punctuations', data=train_df)\nplt.xlabel('target Name', fontsize=12)\nplt.ylabel('Number of puntuations in text', fontsize=12)\nplt.title(\"Number of punctuations by target category\", fontsize=15)\nplt.show()","93647471":"train_df['num_chars'].loc[train_df['num_chars']>300] = 300 #truncation for better visuals\nplt.figure(figsize=(10,6))\nsns.boxplot(x='target', y='num_chars', data=train_df)\nplt.xlabel('target Name', fontsize=12)\nplt.ylabel('Number of characters in text', fontsize=12)\nplt.title(\"Number of characters by target category\", fontsize=15)\nplt.show()","74eae418":"**Feature Engineering:**\n    \n* Now let us come try to do some feature engineering. This consists of two main parts.\n\n**Meta features -** features that are extracted from the text like number of words, number of stop words, number of punctuations etc\n\n**Text based features -** features directly based on the text \/ words like frequency, svd, word2vec etc.","cb6515e9":"**References**\n","7450eda3":"https:\/\/www.kaggle.com\/sudalairajkumar\/simple-feature-engg-notebook-spooky-author#","2e2ae7b3":"> ### Objective","319239fd":"**Modelling will be done in Next stage...stay tuned!!**","fadfa21b":"* As the distribution of target variable is varying a lot, hence accuracy is not the metric we need to look, May be F1-score.","4b511ff4":"In this competition you will be predicting whether a question asked on Quora is sincere or not.\n\nAn insincere question is defined as a question intended to make a statement rather than look for helpful answers. Some characteristics that can signify that a question is insincere:\n\n**Has a non-neutral tone**\n* Has an exaggerated tone to underscore a point about a group of people\n* Is rhetorical and meant to imply a statement about a group of people\n\n**Is disparaging or inflammatory**\n* Suggests a discriminatory idea against a protected class of people, or seeks confirmation of a stereotype\n* Makes disparaging attacks\/insults against a specific person or group of people \n* Based on an outlandish premise about a group of people \n* Disparages against a characteristic that is not fixable and not measurable \n\n**Isn't grounded in reality**\n* Based on false information, or contains absurd assumptions\n* Uses sexual content (incest, bestiality, pedophilia) for shock value, and not to seek genuine answers","79ef0c10":"**Meta Features:**\n    \n We will start with creating meta featues and see how good are they at predicting the  authors. \n\n The feature list is as follows:\n        \n* Number of words in the text\n* Number of unique words in the text\n* Number of characters in the text\n* Number of stopwords \n* Number of punctuations\n* Number of upper case words\n* Number of title case words\n* Average length of the words","4665f468":"**the below embedding are also downloadable from here**:\n\n* GoogleNews-vectors-negative300 - https:\/\/code.google.com\/archive\/p\/word2vec\/\n* glove.840B.300d - https:\/\/nlp.stanford.edu\/projects\/glove\/\n* paragram_300_sl999 - https:\/\/cogcomp.org\/page\/resource_view\/106\n* wiki-news-300d-1M - https:\/\/fasttext.cc\/docs\/en\/english-vectors.html","2be7dcf3":"#### The files that are provided by the kaggle team:","04ca6cc8":"![](http:\/\/)* In all the cases shown above , we observe that Number of words, Number of punctuations, Number of characters are more for insincere Text. ","29fec8d0":"* Let us now plot some of our new variables to see of they will be helpful in predictions.","34212a1e":"**File descriptions**\n\n* train.csv - the training set\n* test.csv - the test set\n* sample_submission.csv - A sample submission in the correct format\n* enbeddings\/ - (see below)"}}