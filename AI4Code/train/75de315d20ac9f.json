{"cell_type":{"1ad20174":"code","5ee39092":"code","5d978c34":"code","0f547bd3":"code","01fe08a9":"code","2368f2e6":"code","d692cb86":"code","b736cad5":"code","44e496e1":"code","c573a2c9":"code","3fe71fd8":"code","0e998e63":"code","441298d9":"code","96190b57":"code","0c469679":"code","a3e91599":"code","a393128c":"code","6500b046":"code","3adabf39":"code","f506e868":"code","4ad50c6d":"code","f3b31826":"code","b1b6aa4b":"code","021cfb71":"code","7f70c8f5":"code","4f378619":"code","050759f6":"code","d2b2fcce":"code","af68a43f":"code","b0806903":"markdown","9aec91f2":"markdown","7a44c7cf":"markdown","0b3aadb4":"markdown","25bfaf9b":"markdown","df9e1a79":"markdown","e4bed9ba":"markdown","ac6dfdbd":"markdown","16a25c0a":"markdown","3ad92593":"markdown","ac621276":"markdown","ac89d79d":"markdown","6452d06d":"markdown","4da669e0":"markdown","1210190f":"markdown","0ff89bd9":"markdown"},"source":{"1ad20174":"import numpy as np\nimport pandas as pd\nimport io\nimport requests\nimport re\nimport warnings\nimport os\nprint(os.listdir(\"..\/input\"))\nimport sklearn\nimport xgboost as xgb\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.templates\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nplt.style.use('seaborn-notebook')\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport seaborn as sns\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n                              GradientBoostingClassifier, ExtraTreesClassifier)\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelBinarizer\nfrom sklearn.svm import SVC\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.ticker import StrMethodFormatter\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5ee39092":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","5d978c34":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","0f547bd3":"# Print train and test columns\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nprint('Train columns:', train.columns.tolist())\nprint('Test columns:', test.columns.tolist())","01fe08a9":"#This is test file from titanic and gender_submission combined\ntested = pd.read_csv(\"..\/input\/test-file\/tested.csv\")\ntested.head()","2368f2e6":"PassengerId = test['PassengerId']\ntrain['Ticket_type'] = train['Ticket'].apply(lambda x: x[0:3])\ntrain['Ticket_type'] = train['Ticket_type'].astype('category')\ntrain['Ticket_type'] = train['Ticket_type'].cat.codes\n\ntest['Ticket_type'] = test['Ticket'].apply(lambda x: x[0:3])\ntest['Ticket_type'] = test['Ticket_type'].astype('category')\ntest['Ticket_type'] = test['Ticket_type'].cat.codes","d692cb86":"y_train = train['Survived'].ravel()\ntrain = train.drop(['Survived'], axis=1)\nx_train = train.values\nx_test = test.values ","b736cad5":"for dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n# Group all non-common titles into one single grouping \"Rare\"\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')","44e496e1":"gender_data = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ngender_data.head()","c573a2c9":"gender = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nprint('Gender columns:', gender.columns.tolist())","3fe71fd8":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","0e998e63":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","441298d9":"data = [train_data, test_data]\nfor dataset in data:\n    mean = train_data[\"Age\"].mean()\n    std = test_data[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_data[\"Age\"].astype(int)","96190b57":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 8))\nwomen = train_data[train_data['Sex']=='female']\nmen = train_data[train_data['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False, color=\"green\")\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False, color=\"red\")\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False, color=\"green\")\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False, color=\"red\")\nax.legend()\n_ = ax.set_title('Male');","0c469679":"df = pd.read_csv('..\/input\/titanic\/train.csv')\nfig = px.scatter_3d(df, x='PassengerId', y='Sex', z='Age',\n                    color='Age')\nfig.show()","a3e91599":"df = pd.read_csv('..\/input\/test-file\/tested.csv')\n\nfor template in [\"plotly\"]:\n    fig = px.scatter(df,\n                     x=\"PassengerId\", y=\"Age\", color=\"Survived\",\n                     log_x=True, size_max=20,\n                     template=template, title=\"Which Age Survived?\")\n    fig.show()","a393128c":"sns.barplot(x='Pclass', y='Survived', data=train_data);","6500b046":"plt.rc('xtick', labelsize=14) \nplt.rc('ytick', labelsize=14)\n\nplt.figure()\nfig = df_train.groupby('Survived')['Pclass'].plot.hist(histtype= 'bar', alpha = 0.8)\nplt.legend(('Died','Survived'), fontsize = 12)\nplt.xlabel('Pclass', fontsize = 18)\nplt.show()","3adabf39":"embarked_mode = train_data['Embarked'].mode()\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(embarked_mode)","f506e868":"FacetGrid = sns.FacetGrid(train_data, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', order=None, hue_order=None )\nFacetGrid.add_legend();","4ad50c6d":"sns.set(style=\"darkgrid\")\nsns.countplot( x='Survived', data=train_data, hue=\"Embarked\", palette=\"Set1\");","f3b31826":"data = [train_data, test_data]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'travelled_alone'] = 'No'\n    dataset.loc[dataset['relatives'] == 0, 'travelled_alone'] = 'Yes'\naxes = sns.factorplot('relatives','Survived', \n                      data=train_data, aspect = 2.5, );","b1b6aa4b":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nfig = px.histogram(df, x=\"SibSp\", y=\"Parch\", color=\"Sex\", marginal=\"rug\",\n                   hover_data=df.columns)\nfig.show()","021cfb71":"'''train_numerical_features = list(train_data.select_dtypes(include=['int64', 'float64', 'int32']).columns)\nss_scaler = StandardScaler()\ntrain_data_ss = pd.DataFrame(data = train_data)\ntrain_data_ss[train_numerical_features] = ss_scaler.fit_transform(train_data_ss[train_numerical_features])'''","7f70c8f5":"#train_data_ss.head()","4f378619":"param_test1 = {\n    'n_estimators': [100,200,500,750,1000],\n    'max_depth': [3,5,7,9],\n    'min_child_weight': [1,3,5],\n    'gamma':[i\/10.0 for i in range(0,5)],\n    'subsample':[i\/10.0 for i in range(6,10)],\n    'colsample_bytree':[i\/10.0 for i in range(6,10)],\n    'reg_alpha':[0, 0.001, 0.005, 0.01, 0.05, 0.1, 1],\n    'learning_rate': [0.01, 0.02, 0.05, 0.1]\n}","050759f6":"train_data.head(10)","d2b2fcce":"for template in [\"plotly_dark\"]:\n    fig = px.scatter(df,\n                     x=\"PassengerId\", y=\"Survived\", color=\"Survived\",\n                     log_x=True, size_max=20,\n                     template=template, title=\"Survived or Died?\")\n    fig.show()","af68a43f":"from sklearn.ensemble import RandomForestClassifier\n\n#data[\"Age\"] = data[\"Age\"].astype(int)\n#if [\"Age\"]\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)","b0806903":"The younger you are the more likely to survive","9aec91f2":"# If you like this notebook, please give an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Countries Life Expectancy Animation](https:\/\/www.kaggle.com\/brendan45774\/countries-life-expectancy-animation)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting Started with Manifold Learning - Isomap](https:\/\/www.kaggle.com\/brendan45774\/getting-started-with-manifold-learning-isomap)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [Guide to Matplotlib Image](https:\/\/www.kaggle.com\/brendan45774\/guide-to-matplotlib-image)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Topic Modeling (LDA)](https:\/\/www.kaggle.com\/brendan45774\/topic-modeling-lda)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)","7a44c7cf":"# Age","0b3aadb4":"Shows the number of females and males who has number of siblings or spouse that is Parch.","25bfaf9b":"You have a higher chance of surviving if you have a first class ticket than having a second or third","df9e1a79":"![image.png](attachment:image.png)","e4bed9ba":"# In conclusion\n **There are many things for a greater chance to survive. Being a female or a child will increase you chances. If you have a higher class ticket you have the more chance of surviving than a third class ticket. As for a man, you are more likely to survive if embark in Cherbourg compare to Southampton or Queenstown. If you also travel with 1 or 3 people than 0 or more than 3 your survival chances are greater. The younger you are will also make your survival chance. So it comes down to many things to surivive on the titanic.**","ac6dfdbd":"Women will survive more if they embarked from port \u2018Southampton\u2019 or \u2018 Queenstown\u2019. While men will survive more from the port 'Cherbourg'. Passengers from port **\u2018**Southampton**\u2019** have a low survival rate of **34%**,\nwhile those from the port **\u2018**Cherbourg**\u2019** have a survival rate of **55%**.\nOver **72%** of the passengers embarked from the port 'Southampton\u2019, 18% from the port \u2018Cherbourg\u2019 and the rest from the port \u2018Queenstown\u2019.","16a25c0a":"**Women and children** were the first to board the titanic which means they are more likely to survive than men","3ad92593":"# Gender","ac621276":"This shows an estimate of the output, so not exact. 1 Shows if the person had survived, while 0 shows that person died.","ac89d79d":"If you want to learn more, interact with others, or share around ML. You can feel free to join this community: https:\/\/discord.gg\/PPwxp2Uv6B","6452d06d":"# Relatives","4da669e0":"# Class","1210190f":"# Embark","0ff89bd9":"You are more likly to survive if you are travels with 1 to 3 people and if you have 0 or more than three you have a less chance."}}