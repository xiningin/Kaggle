{"cell_type":{"a320873b":"code","cedf2af2":"code","104e8148":"code","844f6a82":"code","9d5680cd":"code","6914150e":"code","c51dc7b7":"code","92a24788":"code","7013d64a":"code","f3749a9b":"code","17801588":"code","2f55edc6":"code","58149f35":"code","c04999f8":"code","375f3df5":"code","3743f451":"code","b6885afd":"code","badeab77":"code","cf042dd3":"code","d811c4ff":"code","0363f530":"code","60b57516":"code","2ed8cd3e":"code","05b0350e":"code","84c12152":"code","c3a49045":"code","50fef5f6":"code","c4344238":"code","ec33d2e7":"code","50455fbb":"code","cce423a5":"code","e1fa2183":"code","ce9a0866":"code","63aae423":"code","4699e498":"code","3a2897f8":"code","17cdba29":"code","e25dae7d":"code","fa241eec":"code","406e4554":"code","2980b999":"code","958fe09c":"code","fe72dbbf":"code","c0d5105e":"code","cc094081":"code","8e5a6032":"code","40b86691":"code","05ca380c":"code","71c0d43c":"code","23232e0b":"code","5db6ba16":"code","c04563e7":"code","db3009ef":"code","4da16283":"code","391cd2f0":"code","011f14aa":"code","552f9eb9":"code","72a2bd33":"code","6a0b9ea5":"code","4510dbf4":"code","861bd919":"code","1daef780":"code","cf3c2991":"code","6401e26f":"code","bb633121":"code","e7500ba7":"code","1e336d20":"code","95cadf4e":"code","a6747f32":"code","5bdb3eee":"code","41fbab0f":"code","60e23875":"code","bfbad831":"code","901b2861":"code","d8dc27b7":"markdown","c87d2712":"markdown","53fdc9bd":"markdown","1b4897af":"markdown","c14838dc":"markdown","7c936555":"markdown","f0c57717":"markdown","0f1170a5":"markdown","c0ad46b2":"markdown","1596ac2d":"markdown","b15517b6":"markdown","6e27d201":"markdown","5d7894f3":"markdown","b159c472":"markdown","f9118a30":"markdown","6eaa7c6f":"markdown","e7cefa12":"markdown","f0e5a230":"markdown","4f5f2ea1":"markdown","6b43fddb":"markdown","1cadb7b6":"markdown","9f384ca6":"markdown","c0d215ac":"markdown","82797bb1":"markdown","4661c26a":"markdown","4a400cc4":"markdown","a72f459f":"markdown","3a5e1f9b":"markdown","576895cc":"markdown","0ba17471":"markdown","3282fb19":"markdown"},"source":{"a320873b":"!pip install reverse_geocoder","cedf2af2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport glob\nfrom math import radians, cos, sin, asin, sqrt\nimport geopandas as gpd\nimport geopy\nfrom geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\nlocator = Nominatim(user_agent=\"myGeocoder\",timeout=20)","104e8148":"import seaborn as sns\nimport reverse_geocoder as rg\nimport matplotlib.animation as animation\nimport datetime\nimport pycountry\nimport calendar","844f6a82":"xtrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\nxtest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")","9d5680cd":"xtrain.head(10)","6914150e":"xtrain['Date'].value_counts()","c51dc7b7":"xtrain['ConfirmedCases'] = xtrain['ConfirmedCases'].astype(int)\nxtrain['Fatalities'] = xtrain['Fatalities'].astype(int)","92a24788":"xtrain['Modified_Date'] = pd.to_datetime(xtrain['Date'])","7013d64a":"xtrain[\"month\"] = xtrain['Modified_Date'].map(lambda x: x.month)","f3749a9b":"xtrain.head(10)","17801588":"xtrain.isnull().sum()","2f55edc6":"import ssl \n\ntry:\n    _create_unverified_https_context = ssl._create_unverified_context\nexcept AttributeError:\n    pass\nelse:\n    ssl._create_default_https_context = _create_unverified_https_context","58149f35":"xtrain[\"geom\"] = xtrain[\"Lat\"].map(str) + ',' + xtrain[\"Long\"].map(str)","c04999f8":"xtrain['new_state'] = xtrain['Province\/State']","375f3df5":"null_state_df = xtrain[xtrain['Province\/State'].isnull()==True]","3743f451":"unique_geom = null_state_df['geom'].unique()","b6885afd":"not_null_state_df = xtrain[xtrain['Province\/State'].isnull()==False]\nprint(\"Shape of the not null states dataframe\",not_null_state_df.shape)\nprint(\"Shape of the original dataframe\",xtrain.shape)\nprint(\"Null values of the not null states dataframe\",not_null_state_df.isnull().sum())","badeab77":"xtrain.head(10)","cf042dd3":"not_null_state_df[\"new_state\"]","d811c4ff":"xtrain['geom'].nunique()","0363f530":"len(unique_geom)","60b57516":"def fillNullProvince(x):\n  coordinates = (x['Lat'],x['Long'])\n  result =  rg.search(coordinates)\n  return result[0].get('name')","2ed8cd3e":"xtrain['Province\/State'] = xtrain.apply(lambda x:fillNullProvince(x) if pd.isnull(x['Province\/State']) else x['Province\/State'] ,axis=1)\nxtrain['Province\/State'].value_counts()","05b0350e":"import geopandas as gp","84c12152":"xtrain.to_csv('covid19work.csv', index=False)","c3a49045":"worktrain = xtrain = pd.read_csv('covid19work.csv')","50fef5f6":"worktrain.head(10)","c4344238":"worktrain['month'] = pd.DatetimeIndex(worktrain['Date']).month \nworktrain['month'] = worktrain['month'].apply(lambda x: calendar.month_abbr[x])","ec33d2e7":"confirmed_cases_by_country = worktrain.groupby('Country\/Region').sum()[['ConfirmedCases','Fatalities']]\nconfirmed_cases_by_country.sort_values(by=['ConfirmedCases','Fatalities'],ascending=False,inplace=True)","50455fbb":"confirmed_cases_by_country.head(10)","cce423a5":"confirmed_cases_by_country['Country'] = confirmed_cases_by_country.index","e1fa2183":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nconfirmed_cases_by_country['ConfirmedCases'].head(10).plot(kind='barh',color=(0.9,0.2,0.2,1.0))\nplt.xticks(rotation=90)\nxlocs, xlabs = plt.xticks()\nxlocs=[i+1 for i in range(0,10)]\nxlabs=[i\/2 for i in range(0,10)]\nfor i, v in enumerate(confirmed_cases_by_country['ConfirmedCases'].head(10)):\n  plt.text(v, xlocs[i]-0.9 , str(v))\nplt.xlabel('total number of cases (Normalized)')\nplt.title('Top 10 most infected countries')","ce9a0866":"plt.subplot(1,2,2)\nconfirmed_cases_by_country['Fatalities'].head(10).plot(kind='barh',color = (0,0.9,.25,1.0))\nfor i, v in enumerate(confirmed_cases_by_country['Fatalities'].head(10)):\n  plt.text(v, xlocs[i]-0.9 , str(v))\nplt.xlabel('total number of cases')\nplt.title('Top 10 most fatalities countries')\nplt.xticks(rotation=90)\nplt.show","63aae423":"from bokeh.io import output_notebook, show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import GeoJSONDataSource, ColumnDataSource\nfrom bokeh.models import HoverTool\nimport json","4699e498":"merged_json = json.loads(worktrain.to_json())\njson_data = json.dumps(merged_json)\n\ngeosource = GeoJSONDataSource(geojson = json_data)","3a2897f8":"#Create figure object.\np = figure(title = 'Worldwide spread of Coronavirus', plot_height = 600 , plot_width = 1050)\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\n#Add patch renderer to figure. \npatch=p.patches(xs='xs',ys='ys', source = geosource,fill_color = '#fff7bc',\n          line_color = 'black', line_width = 0.35, fill_alpha = 1, \n                hover_fill_color=\"#fec44f\")\np.add_tools(HoverTool(tooltips=[('Country','@country'),('ConfirmedCases','@confirmedcases'), ('Fatalities','@fatalities')], renderers=[patch]))\n\n#Display figure inline in Jupyter Notebook.\noutput_notebook()\n#Display figure.\nshow(p)","17cdba29":"def getAlph(input):\n  countries={}\n  for country in pycountry.countries:\n    countries[country.name] = country.alpha_3\n    codes = countries.get(input, 'Unknown code')\n  return codes","e25dae7d":"confirmed_cases_by_country['iso_alpha'] = confirmed_cases_by_country['Country'].apply(lambda x:getAlph(x))","fa241eec":"confirmed_cases_by_country['TotalConfirmedCases'] = confirmed_cases_by_country['ConfirmedCases'].pow(0.3) * 3.5","406e4554":"confirmed_cases_by_country.head(10)","2980b999":"import plotly.express as px\n\nfig = px.scatter_geo(confirmed_cases_by_country, locations=\"iso_alpha\",color=\"Country\",\n                     text='Fatalities', size=\"TotalConfirmedCases\",\n                     projection=\"natural earth\")\nfig.update_layout(\n    title={\n        'text': \"Hover on map to get deatails about Confirmed and Fatalities cases\",\n        'y':1,\n        'x':0.4,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","958fe09c":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=worktrain.Date, y=worktrain['ConfirmedCases'], name=\"ConfirmedCases\",\n                         line_color='red'))\n\nfig.add_trace(go.Scatter(x=worktrain.Date, y=worktrain['Fatalities'], name=\"Fatalities\",\n                        line_color='green'))\n\nfig.update_layout(title_text='Covid-19 Cases Confimrd and Fatalities over time',xaxis_rangeslider_visible=True)\nfig.show()","fe72dbbf":"model_work = worktrain[['Country\/Region','ConfirmedCases','Fatalities','Date']]","c0d5105e":"model_work['month'] = pd.DatetimeIndex(worktrain['Date']).month \nmodel_work['year'] = pd.DatetimeIndex(worktrain['Date']).year","cc094081":"model_work.head(10)","8e5a6032":"xtrain.isnull().sum()","40b86691":"model_work['PositiveCases'] = model_work['ConfirmedCases'].pow(0.3) * 3.5","05ca380c":"model_work[['PositiveCases','Fatalities']].plot(figsize=(15,6))","71c0d43c":"temp_work = model_work[['PositiveCases','Fatalities']]","23232e0b":"temp_work.index = model_work['Date']","5db6ba16":"temp_work[['PositiveCases']].plot(figsize=(15,4),color='red')","c04563e7":"temp_work[['Fatalities']].plot(figsize=(15,4),color='green')","db3009ef":"y1 = xtrain.iloc[:,-2].values\ny2 = xtrain.iloc[:,-1].values","4da16283":"from sklearn.preprocessing import LabelEncoder","391cd2f0":"le = LabelEncoder()\nxtrain = xtrain.apply(lambda col: le.fit_transform(col.astype(str)), axis=0, result_type='expand')\nX = xtrain.iloc[:,1:5].values","011f14aa":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y1, test_size = 0.20, random_state = 0)","552f9eb9":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","72a2bd33":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 4, metric = 'braycurtis', p = 1)\nclassifier.fit(X_train, y_train)","6a0b9ea5":"y_pred1 = classifier.predict(X_test)\n\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred1)\nfrom sklearn.metrics import accuracy_score \nprint( 'Accuracy Score confirmed cases :',accuracy_score(y_test,y_pred1)*100)","4510dbf4":"y1 = xtrain.iloc[:,-2].values\ny2 = xtrain.iloc[:,-1].values","861bd919":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nxtrain = xtrain.apply(lambda col: le.fit_transform(col.astype(str)), axis=0, result_type='expand')\nX = xtrain.iloc[:,1:5].values","1daef780":"from sklearn.model_selection import train_test_split\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X, y2, test_size = 0.25, random_state = 0)","cf3c2991":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train2 = sc.fit_transform(X_train2)\nX_test2 = sc.transform(X_test2)","6401e26f":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 4, metric = 'braycurtis', p = 1)\nclassifier.fit(X_train2, y_train2)","bb633121":"# Predicting the Test set results\ny_pred2 = classifier.predict(X_test2)","e7500ba7":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test2, y_pred2)\nfrom sklearn.metrics import accuracy_score \nprint( 'Accuracy Score fatality:',accuracy_score(y_test2,y_pred2)*100) ","1e336d20":"xtrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\nxtest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")","95cadf4e":"valid = xtrain[xtrain['Date'] >= xtest['Date'].min()]\nxtrain = xtrain[xtrain['Date'] < xtest['Date'].min()]","a6747f32":"from sklearn.linear_model import LinearRegression\nfrom tqdm import tqdm_notebook as tqdm","5bdb3eee":"log_target = True\nplot = False\n\nxtest['ConfirmedCases'] = np.nan\nxtest['Fatalities'] = np.nan\n\ncountries = xtrain['Country\/Region'].unique()\ntest_countries = xtest['Country\/Region'].unique()\n\npredictions = []\nfor c in tqdm(countries):\n    xtrain_df = xtrain[xtrain['Country\/Region'] == c]\n    provinces = xtrain_df['Province\/State'].unique()\n    \n    if c in test_countries:\n        xtest_df = xtest[xtest['Country\/Region'] == c]\n        xtest_provinces = xtest_df['Province\/State'].unique()\n    \n        for p in provinces:\n            xtrain_df_p = xtrain_df[xtrain_df['Province\/State'] == p]\n            xtest_df_p = xtest_df[xtest_df['Province\/State'] == p]\n            \n            confirmed = xtrain_df_p['ConfirmedCases'].values[-10:]\n            fatalities = xtrain_df_p['Fatalities'].values[-10:]\n\n            if log_target:\n                confirmed = np.log1p(confirmed)\n                fatalities = np.log1p(fatalities)\n\n            if np.sum(confirmed) > 0:            \n                x = np.arange(len(confirmed)).reshape(-1, 1)\n                x_test = len(confirmed) + np.arange(len(xtest_df_p)).reshape(-1, 1)\n                \n                model = LinearRegression()\n                model.fit(x, confirmed)\n                p_conf = model.predict(x_test)\n                p_conf = np.clip(p_conf, 0, None)\n                p_conf = p_conf - np.min(p_conf) + confirmed[-1]\n                if log_target:\n                    p_conf = np.expm1(p_conf)\n                xtest.loc[(xtest['Country\/Region'] == c) & (xtest['Province\/State'] == p), 'ConfirmedCases'] = p_conf\n                \n                model = LinearRegression()\n                model.fit(x, fatalities)\n                p_fatal = model.predict(x_test)\n                p_fatal = np.clip(p_fatal, 0, None)\n                p_fatal = p_fatal - np.min(p_fatal) + fatalities[-1]\n                if log_target:\n                    p_fatal = np.expm1(p_fatal)\n                xtest.loc[(xtest['Country\/Region'] == c) & (xtest['Province\/State'] == p), 'Fatalities'] = p_fatal\n                \n                if plot:\n                    plt.figure();\n                    plt.plot(x, confirmed);\n                    plt.plot(x, fatalities);\n                    plt.plot(x_test, p_conf);\n                    plt.plot(x_test, p_fatal);\n                    plt.title(c + ', ' + p);\n            \nxtest[['ConfirmedCases', 'Fatalities']] = xtest[['ConfirmedCases', 'Fatalities']].fillna(0)","41fbab0f":"from sklearn.metrics import mean_squared_log_error","60e23875":"valid.sort_values(['Country\/Region', 'Province\/State', 'Date'], inplace=True)\npreds = xtest.sort_values(['Country\/Region', 'Province\/State', 'Date'])\npreds = valid[['Country\/Region', 'Province\/State', 'Date']].merge(preds, on=['Country\/Region', 'Province\/State', 'Date'], how='left')\n\nscore_c = np.sqrt(mean_squared_log_error(valid['ConfirmedCases'].values, preds['ConfirmedCases']))\nscore_f = np.sqrt(mean_squared_log_error(valid['Fatalities'].values, preds['Fatalities']))\n\nprint(f'score_c: {score_c}, score_f: {score_f}, mean: {np.mean([score_c, score_f])}')","bfbad831":"pd.concat([valid.reset_index().drop('index', axis=1), \n           preds.reset_index()[['ConfirmedCases', 'Fatalities']].rename({'ConfirmedCases': 'ConfirmedCases_p', 'Fatalities': 'Fatalities_p'}, axis=1)], axis=1)","901b2861":"submission = xtest[['ForecastId', 'ConfirmedCases', 'Fatalities']]\nsubmission.to_csv('submission.csv', index=False)\nprint(submission.shape)","d8dc27b7":"# Prediction using Linear regression","c87d2712":"### **At First Download Geocoder for import Feocoder**","53fdc9bd":"# K-Nearest Neighbour Algorithm gives 100% accuricy for this Data Set.","1b4897af":"Concatenate latitude and longitude feature together","c14838dc":"**Top 10 most fatalities countries. China is most infected country and second position is Italy.**","7c936555":"### Predicting the Test set results","f0c57717":"View Train data after adding Month column","0f1170a5":"**Input GeoJSON source that contains features for plotting.**","c0ad46b2":"Data wise Data Count. ","1596ac2d":"**To 10 Most infected country. China is most infected country and second position is Italy**","b15517b6":"Get the not null values for province\/state","6e27d201":"**Feature Scaling**","5d7894f3":"Convert string date time to datetime object","b159c472":"## Disable SSL certificate verification\n1. Legacy Python that doesn't verify HTTPS certificates by default\n2. Handle target environment that doesn't support HTTPS verification","f9118a30":"Look at the data condition","6eaa7c6f":"**View Train Data  first 10 rows**","e7cefa12":"# Submission file Create","f0e5a230":"Save data to anothe CSV file called covid19work.cov","4f5f2ea1":"Convert confirmed cases and fatalities columns to int as they are counts","6b43fddb":"### Feature Scaling\nSplitting the dataset into the Training set and Test set","1cadb7b6":"Get new state for dataframe","9f384ca6":"Extract month from datetime object","c0d215ac":"Get dataframe with null states","82797bb1":"View Null value in the dataset","4661c26a":"================================**End the Competition**===============================","4a400cc4":"### Import necessary Library","a72f459f":"### Accuracy Score fatality","3a5e1f9b":"**Import Train and Test Data**","576895cc":"### Accuracy Score confirmed cases","0ba17471":"Get all the unique geom from null province dataframe\n","3282fb19":"# COVID19 Global Forecasting Data Analysis and prediction"}}