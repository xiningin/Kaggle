{"cell_type":{"9af5d801":"code","cb8771bb":"code","ffe388f9":"code","00cb10bb":"code","1aa4ad71":"code","5eef6ce9":"code","8d9e6e27":"code","b9a47946":"code","2a1e8387":"code","4a605f64":"code","b6cc80a8":"code","8bb7a009":"code","7dc32732":"code","50ead83e":"code","1858494a":"code","7fe7ff55":"code","95c50a0e":"code","7dd607f2":"code","b36bea66":"markdown","25874377":"markdown","1e8a80a6":"markdown","964badf0":"markdown","cffe915a":"markdown"},"source":{"9af5d801":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport random\n%matplotlib inline\nplt.style.use(\"seaborn\")\n\nfrom sklearn.cross_validation import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import regularizers\nfrom keras import applications\nfrom keras import backend as K\nK.set_image_dim_ordering('tf')","cb8771bb":"TRAIN_DIR = '..\/input\/train\/'\nTEST_DIR = '..\/input\/test\/'\n\ndef prepare_dataset(train_dir, test_dir, m_train=1000, m_test=20, m_validation=200):\n    # load the train data\n    cat_train_data = [TRAIN_DIR+cat for cat in os.listdir(TRAIN_DIR) if 'cat' in cat]\n    dog_train_data = [TRAIN_DIR+dog for dog in os.listdir(TRAIN_DIR) if 'dog' in dog]\n    train = cat_train_data[:m_train+m_validation] + dog_train_data[:m_train+m_validation]\n    random.shuffle(train)\n    \n    train_data = []\n    for image in train:\n        temp = load_img(image, target_size=(150,150), interpolation=\"nearest\")\n        x = np.asarray(temp)\n        train_data.append(x)\n    \n    # load the test data\n    test = [TEST_DIR+i for i in os.listdir(TEST_DIR)]\n    test = test[:m_test]\n    \n    test_data = []\n    for image in test:\n        temp = load_img(image, target_size=(150,150), interpolation=\"nearest\")\n        x = np.asarray(temp)\n        test_data.append(x)\n    \n    # generating labels for training data\n    label = []\n    for img in train:\n        if 'dog' in img:\n            label.append(1)\n        elif 'cat' in img:\n            label.append(0)\n    label = np.array(label)\n    label = label.reshape((label.shape[0], 1))\n    return np.array(train_data), label, np.array(test_data)\n\ntrain, label, test = prepare_dataset(TRAIN_DIR, TEST_DIR)\nprint(\"Train shape: \", train.shape)\nprint(\"Labels shape: \", label.shape)\nprint(\"Test shape: \", test.shape)","ffe388f9":"print(label[0])\nplt.imshow(train[0])","00cb10bb":"X_train, X_val, y_train, y_val = train_test_split(train, label, test_size=1\/6, random_state=23)\n\nX_train = X_train \/ 255\nX_val = X_val \/ 255\n\nprint(X_train.shape, X_val.shape, y_train.shape, y_val.shape)","1aa4ad71":"vgg = applications.VGG16(include_top=False, weights='imagenet', input_shape=X_train.shape[1:])","5eef6ce9":"vgg_model = Sequential()\nvgg_model.add(vgg)\nvgg_model.add(Flatten())\nvgg_model.add(Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nvgg_model.add(Dropout(0.5))\nvgg_model.add(Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nvgg_model.add(Dropout(0.5))\nvgg_model.add(Dense(1, activation='sigmoid'))\n\nvgg_model.layers[0].trainable = False","8d9e6e27":"vgg_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\nhistory_vgg = vgg_model.fit(X_train, y_train, epochs=15, batch_size=100, validation_data=(X_val, y_val))","b9a47946":"plt.plot(history_vgg.history['loss'])\nplt.plot(history_vgg.history['val_loss'])\nplt.title(\"Train vs Validation Loss\")\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')","2a1e8387":"vgg19 = applications.VGG19(include_top=False, weights='imagenet', input_shape=X_train.shape[1:])","4a605f64":"vgg19_model = Sequential()\nvgg19_model.add(vgg19)\nvgg19_model.add(Flatten())\nvgg19_model.add(Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nvgg19_model.add(Dropout(0.5))\nvgg19_model.add(Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\nvgg19_model.add(Dropout(0.5))\nvgg19_model.add(Dense(1, activation='sigmoid'))\n\nvgg19_model.layers[0].trainable = False","b6cc80a8":"vgg19_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\nhistory_vgg19 = vgg19_model.fit(X_train, y_train, epochs=15, batch_size=100, validation_data=(X_val, y_val))","8bb7a009":"plt.plot(history_vgg19.history['loss'])\nplt.plot(history_vgg19.history['val_loss'])\nplt.title(\"Train vs Validation Loss\")\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')","7dc32732":"inception = applications.InceptionV3(include_top=False, weights='imagenet', input_shape=X_train.shape[1:])","50ead83e":"inception_model = Sequential()\ninception_model.add(vgg19)\ninception_model.add(Flatten())\ninception_model.add(Dense(256, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\ninception_model.add(Dropout(0.5))\ninception_model.add(Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.01)))\ninception_model.add(Dropout(0.5))\ninception_model.add(Dense(1, activation='sigmoid'))\n\ninception_model.layers[0].trainable = False","1858494a":"inception_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\nhistory_inception = inception_model.fit(X_train, y_train, epochs=15, batch_size=100, validation_data=(X_val, y_val))","7fe7ff55":"plt.plot(history_inception.history['loss'])\nplt.plot(history_inception.history['val_loss'])\nplt.ylabel(\"loss\")\nplt.xlabel(\"epoch\")\nplt.title(\"Training vs Validation Loss\")\nplt.legend(['train', 'test'], loc='upper right')","95c50a0e":"f, ax = plt.subplots(2,1,figsize=(15,15))\nax[0].plot(history_vgg.history['val_loss'])\nax[0].plot(history_vgg19.history['val_loss'])\nax[0].plot(history_inception.history['val_loss'])\nax[0].set_ylabel(\"loss\")\nax[0].set_xlabel(\"epoch\")\nax[0].set_title(\"Validation Loss\")\nax[0].legend(['VGG16', 'VGG19', 'InceptionV3'], loc='upper right')\n\nax[1].plot(history_vgg.history['val_acc'])\nax[1].plot(history_vgg19.history['val_acc'])\nax[1].plot(history_inception.history['val_acc'])\nax[1].set_ylabel(\"accuracy\")\nax[1].set_xlabel(\"epoch\")\nax[1].set_title(\"Validation Accuracy\")\nax[1].legend(['VGG16', 'VGG19', 'InceptionV3'], loc='upper right')","7dd607f2":"num_test = 5\npredictions = vgg_model.predict(test[:num_test,:,:,:])\nfor i in range(num_test):\n    if predictions[i] == 0:\n        print(\"Predicted: cat \", predictions[i])\n    else:\n        print(\"predicted: dog\", predictions[i])\n    plt.imshow(test[i])\n    plt.show()","b36bea66":"# VGG19","25874377":"# Predicting using VGG16","1e8a80a6":"> # VGG16 vs VGG19 vs InceptionV3","964badf0":"# Inception v3","cffe915a":"# VGG16"}}