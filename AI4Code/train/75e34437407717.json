{"cell_type":{"bf2fbd12":"code","2520370d":"code","b61d3931":"code","d78bed12":"code","aac94e76":"code","ace8fe4a":"code","4f681cf1":"code","331813a2":"code","ecaeeb23":"code","30ad164e":"code","61474e58":"code","2e039098":"code","a38ee788":"code","0b42f365":"code","81b5ed71":"code","c1bfdb25":"code","ada4254b":"code","623a01d0":"code","b72f47cf":"code","c9599f1e":"code","6ec8d153":"code","0e46864f":"code","29d87ae2":"code","22fc9697":"code","319938d8":"code","01241078":"code","bc1bc77a":"code","5c659478":"markdown","e8e7073c":"markdown","605ea77d":"markdown","1393e11a":"markdown","f484258d":"markdown","35395caa":"markdown","19862ddc":"markdown","c9d04722":"markdown","be9a2b3d":"markdown","89cae6c6":"markdown"},"source":{"bf2fbd12":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\nimport gc\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint","2520370d":"train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\ntrain","b61d3931":"train.describe().T","d78bed12":"test.describe().T","aac94e76":"display(train['Cover_Type'].value_counts().sort_index())","ace8fe4a":"# Drop never-see Soil types\nfor df in [train, test]:\n    df = df.drop(columns = ['Id', 'Soil_Type7', 'Soil_Type15'])","4f681cf1":"# cos\/sin split allows the NN to understand that 360=0\nfor df in [train, test]:\n    df[\"Aspect_cos\"] = np.cos(np.radians(df[\"Aspect\"]))\n    df[\"Aspect_sin\"] = np.sin(np.radians(df[\"Aspect\"]))\n    df = df.drop(columns=[\"Aspect\"])","331813a2":"# This is a correction that is discussed for this competition, but I'm not sure we should take action on it, since the data were generated in this way\n# UPDATE: actually removing it results in a very similar score, so I keep it removed for the following reasons\n#         1) we are anyhow speaking about some unphysical generated values and therefore there is no point in contraint them to physical values\n#         2) Robust Scaler will take care of avoidind extreme values\nfor df in train, test:\n    for col in [\"Hillshade_9am\", \"Hillshade_Noon\", \"Hillshade_3pm\"]:\n        df[col] = df[col].clip(lower=0, upper=255)","ecaeeb23":"for df in [train, test]:\n    df['Sum_Hydrology'] = np.abs(df['Horizontal_Distance_To_Hydrology']) + np.abs(df['Vertical_Distance_To_Hydrology'])\n    df['Sub_Hydrology'] = np.abs(df['Horizontal_Distance_To_Hydrology']) - np.abs(df['Vertical_Distance_To_Hydrology'])","30ad164e":"# More feature engineering suggested in https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021\/discussion\/293612\nfor df in [train, test]:\n    df['EHiElv'] = df['Horizontal_Distance_To_Roadways'] * df['Elevation']\n    df['EViElv'] = df['Vertical_Distance_To_Hydrology'] * df['Elevation']\n    # df['Aspect2'] = df.Aspect.map(r) --> I'm already using sin\/cos\n    df['Highwater'] = (df.Vertical_Distance_To_Hydrology < 0).astype(int)\n    df['EVDtH'] = df.Elevation - df.Vertical_Distance_To_Hydrology\n    df['EHDtH'] = df.Elevation - df.Horizontal_Distance_To_Hydrology * 0.2\n    df['Euclidean_Distance_to_Hydrolody'] = (df['Horizontal_Distance_To_Hydrology']**2 + df['Vertical_Distance_To_Hydrology']**2)**0.5 # A bit redundant with Sum\/Sub_Hydrology, but I keep it\n    df['Manhattan_Distance_to_Hydrolody'] = df['Horizontal_Distance_To_Hydrology'] + df['Vertical_Distance_To_Hydrology']              # A bit redundant with Sum\/Sub_Hydrology, but I keep it\n    df['Hydro_Fire_1'] = df['Horizontal_Distance_To_Hydrology'] + df['Horizontal_Distance_To_Fire_Points']\n    df['Hydro_Fire_2'] = abs(df['Horizontal_Distance_To_Hydrology'] - df['Horizontal_Distance_To_Fire_Points'])\n    df['Hydro_Road_1'] = abs(df['Horizontal_Distance_To_Hydrology'] + df['Horizontal_Distance_To_Roadways'])\n    df['Hydro_Road_2'] = abs(df['Horizontal_Distance_To_Hydrology'] - df['Horizontal_Distance_To_Roadways'])\n    df['Fire_Road_1'] = abs(df['Horizontal_Distance_To_Fire_Points'] + df['Horizontal_Distance_To_Roadways'])\n    df['Fire_Road_2'] = abs(df['Horizontal_Distance_To_Fire_Points'] - df['Horizontal_Distance_To_Roadways'])\n    df['Hillshade_3pm_is_zero'] = (df.Hillshade_3pm == 0).astype(int)","61474e58":"# Manage targets: note that there is one class that has only one sample, and therefore remove it!\ntrain = train.drop(index = train[train['Cover_Type'] == 5].index).reset_index(drop = True)\ndisplay(train['Cover_Type'].value_counts())","2e039098":"# Convert categoricals to integers (encoder) ans then apply one-hot encoding (to_categorical)\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.utils import to_categorical\n\nle = LabelEncoder()\ntarget = le.fit_transform(train['Cover_Type']) # REMEMBER: need to run `le.inverse_transform(test_pred)` at the end\ntarget = to_categorical(target)                # REMEMBER: need to run `np.argmax(test_pred, axis = 1)` at the end\n\n# Remove from the training set\ntrain = train.drop(columns = ['Cover_Type'])\n\ngc.collect()","a38ee788":"# Scaling (note: I'm doing this after managing targets because I need first to remove some rows and cols)\nfrom sklearn.preprocessing import RobustScaler\nrb = RobustScaler()\n\ncols = train.columns\n\ntrain[cols] = rb.fit_transform(train[cols].values) # note: df[cols] is a trick to keep the df as a DataFrame for later (instead of an array)\ntest[cols] = rb.transform(test[cols].values)       # note: df[cols] is a trick to keep the df as a DataFrame for later (instead of an array)","0b42f365":"# Reduce memory and transform to array\ndef reduce_mem_usage(df, verbose=True):\n    \"\"\"Make the dataframe lighter for the RAM: in this case by ca. 50%.\n    \"\"\"\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n\n    for col in df.columns:\n        col_type = df[col].dtypes\n\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n \n    return df\n\ntrain = reduce_mem_usage(train).values\ntest = reduce_mem_usage(test).values\n\ngc.collect()","81b5ed71":"shapes = {\n    'nsamples': train.shape[0],\n    'nfeatures': train.shape[1],\n    'ncategories': target.shape[1]\n}\nprint(shapes)","c1bfdb25":"# Configuring TPU (https:\/\/www.kaggle.com\/docs\/tpu)\n# NOTE: will fail if the notebook doe not have Accelerator=TPU!\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\nprint('Device:', tpu.master())\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\nprint('Number of replicas:', strategy.num_replicas_in_sync)","ada4254b":"CURRENT_MODEL = 3","623a01d0":"if CURRENT_MODEL==1:\n    with strategy.scope(): # necessary for using the TPU\n        model1 = keras.models.Sequential([\n            keras.layers.Input((shapes['nfeatures'],)),\n            keras.layers.Dense(200, activation='relu'),\n            keras.layers.Dense(200, activation='relu'),\n            keras.layers.Dense(200, activation='relu'),\n            keras.layers.Dense(shapes['ncategories'], activation='softmax')\n        ])\n        display(keras.utils.plot_model(model1, show_shapes=True, show_dtype=True))\n        model1.compile(\n            loss='categorical_crossentropy',\n            optimizer='Adam', \n            metrics=['accuracy'] # same as the competition: \"Submissions are evaluated on multi-class classification accuracy.\"\n        )\n    ","b72f47cf":"if CURRENT_MODEL==1:\n    earlystop = EarlyStopping(patience=3, restore_best_weights=True)\n    model1.fit(\n        x=train,\n        y=target,\n        epochs=20,\n        batch_size=128 * strategy.num_replicas_in_sync,# https:\/\/www.kaggle.com\/docs\/tpu\n        validation_split=0.2,\n        callbacks=[earlystop]\n    )","c9599f1e":"if CURRENT_MODEL==1:\n    pd.DataFrame(model1.history.history).plot(subplots=True, sharex=True, figsize=[15,8], grid=True)\n    plt.show()","6ec8d153":"if CURRENT_MODEL==2:\n    dropout_rate = 0.1\n    with strategy.scope(): # necessary for using the TPU\n        model2 = keras.models.Sequential([\n            keras.layers.Input((shapes['nfeatures'],)),\n            keras.layers.Dense(200, kernel_initializer=\"he_normal\", use_bias=False),\n            keras.layers.BatchNormalization(),\n            keras.layers.Activation(\"relu\"),\n            keras.layers.Dropout(rate=dropout_rate),\n            keras.layers.Dense(200, kernel_initializer=\"he_normal\", use_bias=False),\n            keras.layers.BatchNormalization(),\n            keras.layers.Activation(\"relu\"),\n            keras.layers.Dropout(rate=dropout_rate),\n            keras.layers.Dense(200, kernel_initializer=\"he_normal\", use_bias=False),\n            keras.layers.BatchNormalization(),\n            keras.layers.Activation(\"relu\"),\n            keras.layers.Dense(shapes['ncategories'], activation='softmax')\n        ])\n        display(keras.utils.plot_model(model2, show_shapes=True, show_dtype=True))\n        model2.compile(\n            loss='categorical_crossentropy',\n            optimizer='Adam', \n            metrics=['accuracy'] # same as the competition: \"Submissions are evaluated on multi-class classification accuracy.\"\n        )","0e46864f":"if CURRENT_MODEL==2:\n    earlystop = EarlyStopping(patience=3, restore_best_weights=True) \n    model2.fit(\n        x=train,\n        y=target,\n        epochs=10,\n        batch_size=128 * strategy.num_replicas_in_sync,# https:\/\/www.kaggle.com\/docs\/tpu\n        validation_split=0.00, # I want to use the more possible samples for training, just a little to monitor validation (I don't need it anymore for EarlyStopping)\n        #callbacks=[earlystop] # excluded: dropout makes the learning much more fuzzy! Morever, dropout is already avoiding overfit\n    )","29d87ae2":"if CURRENT_MODEL==2:\n    pd.DataFrame(model2.history.history).plot(subplots=True, sharex=True, figsize=[15,8], grid=True)\n    plt.show()","22fc9697":"if CURRENT_MODEL==3:\n    dropout_rate = 0.1\n    with strategy.scope(): # necessary for using the TPU\n        model3 = keras.models.Sequential([\n            keras.layers.Input((shapes['nfeatures'],)),\n            keras.layers.Dense(200, kernel_initializer=\"lecun_normal\", use_bias=False),\n            keras.layers.BatchNormalization(),\n            keras.layers.Activation(\"selu\"),\n            keras.layers.Dropout(rate=dropout_rate),\n            keras.layers.Dense(200, kernel_initializer=\"lecun_normal\", use_bias=False),\n            keras.layers.BatchNormalization(),\n            keras.layers.Activation(\"selu\"),\n            keras.layers.Dropout(rate=dropout_rate),\n            keras.layers.Dense(200, kernel_initializer=\"lecun_normal\", use_bias=False),\n            keras.layers.BatchNormalization(),\n            keras.layers.Activation(\"selu\"),\n            keras.layers.Dense(shapes['ncategories'], activation='softmax')\n        ])\n        display(keras.utils.plot_model(model2, show_shapes=True, show_dtype=True))\n        model3.compile(\n            loss='categorical_crossentropy',\n            optimizer='Adam', \n            metrics=['accuracy'] # same as the competition: \"Submissions are evaluated on multi-class classification accuracy.\"\n        )","319938d8":"if CURRENT_MODEL==3:\n    model3.fit(\n        x=train,\n        y=target,\n        epochs=20,\n        batch_size=128 * strategy.num_replicas_in_sync,# https:\/\/www.kaggle.com\/docs\/tpu\n    )","01241078":"if CURRENT_MODEL==1:\n    test_pred = model1.predict(test, batch_size=128 * strategy.num_replicas_in_sync, verbose=1)\nelif CURRENT_MODEL==2:\n    test_pred = model2.predict(test, batch_size=128 * strategy.num_replicas_in_sync, verbose=1)\nelif CURRENT_MODEL==3:\n    test_pred = model3.predict(test, batch_size=128 * strategy.num_replicas_in_sync, verbose=1)","bc1bc77a":"sub = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\nsub['Cover_Type'] = le.inverse_transform(np.argmax(test_pred, axis = 1))\nsub.to_csv('submission.csv', index=False)\ndisplay(sub)","5c659478":"# Model2: using He-normal initializer, Batch normalization, and 10% dropout\nREMEMBER: since dropout is action only on training, you can not compare training loss\/accuracy, because it will be worse than in `model1` and than validation scores.","e8e7073c":"# Modeling","605ea77d":"# Submission","1393e11a":"Note that:\n1. there are no missing values (`count` is the same for all)\n2. there are columns where all values are zero -> to remove\n3. `Cover_Type`=5 occurs only one time: we have better to remove this sample","f484258d":"# My take on [Tabular Playground Series - Dec 2021](https:\/\/www.kaggle.com\/c\/tabular-playground-series-dec-2021)\n- Memory reduction and preprocessing inspired from: https:\/\/www.kaggle.com\/junhyeok99\/multi-head-attention\n- I improved the models step by step (current best score: 0.95705, Dec 9th)\n    1. Public score: 0.95332 <-- `model1`, early stopping (Version: 3)\n    1. Public score: 0.95400 <-- `model2`, 20 epochs (Version: 4)\n    1. Public score: 0.95394 <-- `model2`, no Hillshade correction, 10 epochs (Version: 6)\n    1. Public score: 0.95438 <-- `model2`, adding more engineered features (Version: 8)\n    1. Public score: 0.95269 <-- `model3`, SELU, 10 epoch (Version: 10)\n    1. Public score: 0.95343 <-- `model3`, SELU, 20 epoch (Version: 11)","35395caa":"## Model1: simple sequential of 3 dense layer of 200 units","19862ddc":"# Model3: using SELU activation w\/ LeCun initializer, Batch normalization, and 10% dropout\n- See pag\/ 334 of Hands-on Machine Learning book, which suggests LeCun initialization with SELU.\n- Remember that SELU (Scaled Exponential Linear Unit) has a non-zero (the case in RELU) negative tail which is tuned during the training","c9d04722":"> Note: I was using `validation_split=0.05`, but after I noted that there is no problem of overfitting (the accuracy on the validation stays ca. constant after saturating),\n> I prefer to use no validation since it is anyhow misleading. I have an high chance of having an improperly balanced sampling of `Cover_Type` 3,4,6,7 which are underrepresented.","be9a2b3d":"[](https:\/\/data-science-blog.com\/wp-content\/uploads\/2022\/01\/mha_visualization-930x1030.png)","89cae6c6":"# Preprocessing"}}