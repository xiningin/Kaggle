{"cell_type":{"70f1a958":"code","88317cee":"code","82b8aaaf":"code","8818b6f6":"code","62dddabe":"code","f97fda74":"code","9cb9997c":"code","afa687a0":"code","995a7fb2":"code","0a10121d":"code","8ce75aa0":"code","277f7fcd":"code","ca3f6020":"code","e301ade8":"code","77ea747e":"code","6ee71163":"code","8fd824bb":"code","b2906cf7":"code","20a3af1c":"code","61d3e8ce":"code","436ec394":"markdown","6a563051":"markdown","7dbc8097":"markdown","4b41c38c":"markdown","c1793e3e":"markdown","695187a7":"markdown"},"source":{"70f1a958":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","88317cee":"%%time\ndf = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')\n\n# Calculating CPM (the value which was the winning bid value)\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(x['total_revenue'] * 100, x['measurable_impressions']) * 1000,\n                     axis=1)\n\ndf = df[df['CPM'] >=0]\ndf.drop('total_revenue',1,inplace=True)","82b8aaaf":"# train \/ test split\ntrain = df[df['date'] < '2019-06-22']\ntest = df[~df.index.isin(train.index)]\n\ntest = test[test['CPM'] < test['CPM'].quantile(.95)]\ntrain = train[train['CPM'] < train['CPM'].quantile(.95)]\n\ntrain.drop('date', 1, inplace=True)\ntest.drop('date', 1, inplace=True)","8818b6f6":"id_cols = [col for col in train.columns if '_id' in col]\nnum_cols = [col for col in train.columns if '_id' not in col]","62dddabe":"train[num_cols].describe()","f97fda74":"train[num_cols].hist(figsize=(8,8));","9cb9997c":"def multi_collinearity_heatmap(df, figsize=(11,9)):\n    \"\"\"\n    Creates a heatmap of correlations between features in the df. A figure size can optionally be set.\n    \"\"\"\n    # Set the style of the visualization\n    sns.set(style=\"white\")\n\n    # Create a covariance matrix\n    corr = df.corr()\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=figsize)\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr,  cmap=cmap, center=0, square=True, linewidths=.5,\n                cbar_kws={\"shrink\": .5}, vmax=corr[corr != 1.0].max().max()); ","afa687a0":"multi_collinearity_heatmap(train[num_cols], figsize=(10,10))","995a7fb2":"train[id_cols].describe()","0a10121d":"train[id_cols].nunique()","8ce75aa0":"sns.distplot(train['measurable_impressions']);","277f7fcd":"sns.distplot(np.log(train['measurable_impressions'] + 1));","ca3f6020":"# drop highly correlated and useless columns\ntrain.drop(['revenue_share_percent', 'total_impressions', 'viewable_impressions'],1, inplace=True)\ntrain.drop('integration_type_id',1, inplace=True)\nid_cols = [col for col in train.columns if '_id' in col]\n\ntrain['measurable_impressions'] = np.log(train['measurable_impressions'] + 1)\ntest['measurable_impressions'] = np.log(test['measurable_impressions'] + 1)\n\ntest = test[train.columns]","e301ade8":"# ## for logarithmic target (didn't work out)\n# from sklearn.metrics import make_scorer\n# def exp_mse(y_true, y_pred, **kwargs): \n#     y_true = np.exp(y_true) + 1\n#     y_pred = np.exp(y_pred) + 1\n#     return mean_squared_error(y_true, y_pred)\n# mse_scorer = make_scorer(exp_mse)","77ea747e":"cb_model = CatBoostRegressor(n_estimators=100, loss_function='RMSE', eval_metric='RMSE', \n                            cat_features=id_cols)","6ee71163":"%%time\nscores = cross_val_score(cb_model, train.drop('CPM',1), train['CPM'], scoring='neg_mean_squared_error',\n                         cv=3, n_jobs=-1)\nscores","8fd824bb":"cb_model = CatBoostRegressor(n_estimators=300, loss_function='RMSE', eval_metric='RMSE', \n                            cat_features=id_cols)","b2906cf7":"%%time\ncb_model.fit(train.drop('CPM',1), train['CPM'], verbose=False, plot=True);","20a3af1c":"test_preds = cb_model.predict(test.drop('CPM',1))\nmean_squared_error(test['CPM'], test_preds)","61d3e8ce":"weights = pd.DataFrame(cb_model.feature_importances_, columns=['weight'], index=train.drop('CPM',1).columns)\nweights.sort_values('weight', ascending=False, inplace=True)\nweights","436ec394":"We could possibly benefit from logarithming this feature:","6a563051":"### EDA","7dbc8097":"#### Resulting feature importances:","4b41c38c":"### Modeling, Cross-Validate on train","c1793e3e":"### A little preprocessing","695187a7":"### Evaluate on test"}}