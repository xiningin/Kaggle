{"cell_type":{"f265826b":"code","2d6c38c4":"code","55bd1455":"code","acfa9248":"code","4def84c2":"code","68be39b4":"code","4889651b":"code","3521af40":"code","780e4d3d":"code","c354eda5":"code","b21c14aa":"code","ceccac89":"code","b06c1b2c":"markdown","d5398def":"markdown","9a799c46":"markdown","c39ea4bf":"markdown","2a4b89bc":"markdown","824e0f8a":"markdown"},"source":{"f265826b":"import sys\n!cp ..\/input\/rapids\/rapids.0.16.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","2d6c38c4":"import gc\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom math import sqrt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold, GroupKFold\nfrom sklearn.metrics import f1_score, accuracy_score, confusion_matrix, precision_score, recall_score\nfrom cudf.core.dataframe import DataFrame as cu_df\nfrom cudf.core.series import Series as cu_series","55bd1455":"train = pd.read_csv('..\/input\/ion-switch-model-ready-data-frame-to-work-locally\/train_ion_switch.csv')\ntest  = pd.read_csv('..\/input\/ion-switch-model-ready-data-frame-to-work-locally\/test_ion_switch.csv')","acfa9248":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","4def84c2":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","68be39b4":"y     = train['open_channels']\ntrain = train.drop(['open_channels'],axis=1)","4889651b":"classes = np.unique(y)\nprint(len(classes))","3521af40":"id_train = train['time']\nid_test  = test['time']\n\ntrain = train.drop('time', axis = 1)\ntest  = test.drop( 'time', axis = 1)\n\nnfolds = 5\ngroups = np.array(train.signal.values)\nfolds = GroupKFold(n_splits=5)","780e4d3d":"param = {'min_child_weight': 7, 'colsample_bytree': 0.7, 'max_depth': 10, 'eta': 0.2,\n         'subsample': 0.6, 'lambda': 2, 'nthread': -1, 'booster' : 'gbtree', 'silent': 1, 'gamma' : 0, \n         'alpha': 1, 'eval_metric': 'mlogloss', 'objective': 'multi:softprob', 'tree_method': 'gpu_hist',\n         'num_class': 11}","c354eda5":"%%time\n#feature_importance_df = np.zeros((train.shape[1], nfolds))#\nmvalid = np.zeros([len(train), len(classes)])\nmfull  = np.zeros([len(test), len(classes)])\n\nprint(np.shape(mvalid), np.shape(mfull))\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, train.values, groups)):\n    print('----')\n    print(\"fold n\u00b0{}\".format(fold_))\n    \n    x0,y0 = train.iloc[trn_idx], y[trn_idx]\n    x1,y1 = train.iloc[val_idx], y[val_idx]\n    \n    x0_cudf = cu_df(x0)\n    y0_cudf = cu_series(y0)\n    x1_cudf = cu_df(x1)\n    y1_cudf = cu_series(y1)\n    \n    trn_data = xgb.DMatrix(x0_cudf, label= y0_cudf); val_data = xgb.DMatrix(x1_cudf, label= y1_cudf)\n    \n    num_round = 1000\n    clf = xgb.train(param, trn_data, num_round, evals=[(val_data, \"val_data\")], verbose_eval=200, early_stopping_rounds = 100)\n    \n    mvalid[val_idx] = clf.predict(xgb.DMatrix(x1_cudf), ntree_limit=clf.best_iteration)\n    mvalid_rounded = np.asarray([np.argmax(line) for line in mvalid])\n    \n    pd.DataFrame(mvalid_rounded).to_csv('xgb_val_preds_fold' + str(fold_) + '.csv', index=False)\n    \n    #feature_importance_df[:, fold_] = clf.feature_importances_()\n    \n    test_cudf = cu_df(test)\n    mfull += clf.predict(xgb.DMatrix(test_cudf), ntree_limit=clf.best_iteration) \/ folds.n_splits\n    mfull_rounded = np.asarray([np.argmax(line) for line in mfull])\n    \n    pd.DataFrame(mfull).to_csv('xgb_preds_fold' + str(fold_) + '.csv', index=False)\n\nprint(\"Recall Score: \" + str(recall_score(mvalid_rounded, y, average='macro')))\nprint(\"Accuracy Score: \" + str(accuracy_score(mvalid_rounded, y)))\nprint(\"Precision Score: \" + str(precision_score(mvalid_rounded, y, average='macro')))","b21c14aa":"sub = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\n\nsubmission = pd.DataFrame()\nsubmission['time']  = sub['time']\nsubmission['open_channels'] = mfull_rounded\nsubmission['open_channels'] = submission['open_channels'].round(decimals=0)   # We used the regressor, so to convert to the class values we round it to the nearest decimal.\nsubmission['open_channels'] = submission['open_channels'].astype(int)         # And finally convert those values to integer to make the final submission file.\nsubmission.to_csv('submission.csv', float_format='%0.4f', index = False)","ceccac89":"submission.tail()","b06c1b2c":"# Necessary imports","d5398def":"# GroupK-Fold Technique for Cross-Validation","9a799c46":"# Train the model","c39ea4bf":"# Load train and test data","2a4b89bc":"# File submission","824e0f8a":"# Memory Reduction\nElse file will crash due to excessive memory usage"}}