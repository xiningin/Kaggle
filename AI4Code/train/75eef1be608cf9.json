{"cell_type":{"4a5f58b3":"code","d457fb50":"code","7bf0c608":"code","ab41f1c1":"code","0827e5b7":"code","596fa9da":"code","894d7f3b":"code","fa91dfb6":"code","2cbd5b8d":"code","3aa7ef9e":"code","0f2ef284":"code","91225580":"code","5fab6859":"code","5dcfdc6d":"code","b07074db":"code","68c4a08d":"markdown","6dc1e43c":"markdown","d93a0429":"markdown","e3686126":"markdown","7636b29b":"markdown","a2df9f8a":"markdown","ed3d8b52":"markdown","78bd47a9":"markdown","5826a801":"markdown","069754f1":"markdown"},"source":{"4a5f58b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# Some of these I did not use because I didn't need to but I put them in there just incase i would need them later\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier # Our model\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.tree import DecisionTreeClassifier ,plot_tree\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d457fb50":"train_file_path = '..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv'\n\n# Create a new Pandas DataFrame with our training data\nheart_train_data = pd.read_csv(train_file_path)\n\n#printing the data\nheart_train_data.describe(include='all')","7bf0c608":"# Let's reduce our data to only the features we need and the target.\n# We need to keep the prediction as part of our DataFrame for now.\n#I have experimented with different variables inorder to decrease the mean absolute error from 46% to 18.54%\nselected_columns = ['age', 'diabetes','high_blood_pressure', 'DEATH_EVENT', 'sex', 'smoking', 'anaemia', 'serum_creatinine', 'time', 'serum_sodium', 'platelets', 'ejection_fraction']\n\n# Create our new training set containing only the features we want\nprepared_data = heart_train_data[selected_columns]\n\n# Drop rows from the selected_colums data that contain missing values\nprepared_data = prepared_data.dropna(axis=0)\n\n# Check that you still have a good 'count' value.\nprepared_data.describe()","ab41f1c1":"y = prepared_data.DEATH_EVENT\n\n# Drop the DEATh_event column (axis=1 indicates column, axis=0 indicates row)\nX = prepared_data.drop('DEATH_EVENT', axis=1)\n\n#Delete hashtag below to see specific data\nX.head()\n#y.head()","0827e5b7":"#one_hot_X = pd.get_dummies(X)\n\n#one_hot_X.head()","596fa9da":"#specify the model. \n#For model reproducibility, set a numeric value for random_state when specifying the model\n#HF for Heart Failure\nHF_model = DecisionTreeRegressor(random_state=1)\n\n# Fit the model\nHF_model.fit(X, y)","894d7f3b":"#Making predictions using the data chosen in the X variable\npredictions = HF_model.predict(X)\n#predictions = HF_model.predict(X.head())\nprint(predictions)","fa91dfb6":"train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)","2cbd5b8d":"# Specify the model\nHF__model = DecisionTreeRegressor(random_state=1)\n\n# Fit HF__model with the training data.\nHF__model.fit(train_X, train_y)","3aa7ef9e":"# Making predictions of the split data\nval_predictions = HF__model.predict(val_X)\nprint(val_predictions)","0f2ef284":"# Calculating the mean absolute error\n#The failure rate is 18.6% reocurring \nval_mae = (mean_absolute_error(val_y, val_predictions))\n\nprint(val_mae)","91225580":"def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)","5fab6859":"max_leaf_nodes = 100\ncandidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500]\n# I tried to loop it with the candidate_max_leaf_nodes list but it didn't work\nmy_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\nprint(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","5dcfdc6d":"# Defining the model\nrf_model = RandomForestRegressor(random_state=1)\n\n# fitting the model\nrf_model.fit(train_X, train_y)\n\n# Calculating the mean absolute error of my Random Forest model on the validation data\nrf_val_predictions = rf_model.predict(val_X)\nrf_val_mae = mean_absolute_error(rf_val_predictions, val_y)\n\nprint(\"Validation MAE for Random Forest Model: {}\".format(rf_val_mae))","b07074db":"# change the value of max_depth to change the size of the decision tree\ndeath_predictor = DecisionTreeClassifier(max_depth=10)\n\n# fitting the model on my training data\ndeath_predictor.fit(train_X, train_y)\n\n# Plotting the tree\nplt.figure(figsize = (20,10))\nplot_tree(death_predictor,\n          feature_names=X.columns,\n          class_names=['Died', 'survived'],\n          filled=True)\nplt.show()\n#  Printing the mae\nval_mae = (mean_absolute_error(val_y, val_predictions))\nprint(val_mae)","68c4a08d":"# Splitting the data\nWe need to split the data into training and testing so the data can be fit to further models","6dc1e43c":"# Train a Model and Make Predictions\nNow that we have data our model can digest, let's train a model on our data and make some predictions.","d93a0429":"# Prepare the Data\nWe now need to start preparing the data by describing our x and y. Our X will be a list of variables from the data. These variables are used to predict our y variable which in this case will be if they die or not.\n\nBefore we can get a reference to our prediction target 'y' we first need to prepare our data so that there aren't any rows with missing values as our machine learning model doesn't know how to handle them.\n\n## Select Features and Drop Missing Values\nWe will need to filter our data to data that is relevent and doesn't have any missing values. Using the dropna(axis=0) line of code allows us to drop rows of data that have missing values so all our data has the same amount of rows.\n","e3686126":"# Conclusion\nMy data was pretty accurate with a prediction success rate of 81.46%. I used different variables and models in order to get the lowest mean absolute error (mae). I originally had less variables in order to get a 18.66% success rate in the decision tree regressor but after a little more experimenting i reached 18.54% in the random forest model. Using different models I was allowed to have a larger chance of finding a lower mae. During this investigation I have found out different models that can be used to make predictions on patients chance of death if they have had heart failure.\n\nChanging variables in the X varaibles allowed me to get a smaller MAE in order to have more accurate predictions. By using different amount of variables I have decreased my MAE by small amounts. By using different variables i have decreased my MAE by larger amounts from 40%-20%. This happened because those variables are used to evaluate my mae.\n\nI used a decision tree regressor, classifier and random forest models because the regressor and random forest models were used to compare eachother to find the lowest MAE and the classifier was used to help visualise the data set. The random forest model had a lower MAE then the regressor in the end but before I made slight changes to the selected_coloumns the regressor had a MAE of 18.66%. I used more variables inorder to decrease my MAE in my random forest model\n\nHypotheses accuracy: My hypotheses was right. The random tree forest was the most accurate model at making predictions and the variables I stated made the largest difference on my mae.","7636b29b":"## One Hot Encode Categorical Data \nOne Hot Encoding is necessary for categorical non-numerical data. In this case, our categorical data is for 'Sex' and can be 'male' or 'female'. We must do this because Decision Tree models in Scikit cannot work with non-numerical data. \n\nOne Hot Encoding separates each of the options for 'Sex' into a separate column, where a 1 means that the row contains this category value and a zero indicates it must be another categorical value. Watch this video (https:\/\/www.youtube.com\/watch?v=v_4KWmkwmsU) for more information about how and why this works.\n\n\nThe Pandas get_dummies function is the easiest way to One Hot Encode categorical data. Here's how it's done","a2df9f8a":"# Calculating the best amount of leaf nodes\nI came across a problem here with the Mean Absolute Error (mae) being 0 which is most likely something to do with the training data and the testing data being the same so the predictions will be similar.","ed3d8b52":"# Random Forest model\nThis is a random forest model. It takes random data from my selected data in order to make a prediction. ","78bd47a9":"# Introduction\nPurpose\/Hope to predict: I hope to predict if a patient will die if they have certain symptoms of a patient with heart failure\nGoal for quality of predictions: below 20% mae\nHypotheses: \n        - The most accurate model will be the random forest model because it uses multiple decision trees to predict and I will most likely be using alot of variables from the big dataset\n        - features like high blood pressure, diabetes, sex, smoking will have the highest affect on my mae\n        \n\n# Accesing the data\n\nNow that the notebook is setup by importing different libraries and code to access the data we can now start by accessing the data and turning it into a variable.\nThe code cell above contributed to setting up the notebook by importing different libraries and code. In the code cell under code is used to access the data file by setting up a path to it. the .describe is also used to print out the data in a table. This table just uses statistical variables like count, mean, min, max etc.\n# Why I used heart failure data\n\nThis dataset had many variables I could use to predict a y value which was given in the data set (DEATH_EVENT). This dataset also had a gold medal and at the time 1138 upvotes.\n","5826a801":"# Decision tree classifier model\nI used this model to help me visualise my data","069754f1":"## Separate Features From Target\nNow that we have a set of data (aka DataFrame) without any missing values. We now need to take out 'DEATH_EVENT' from our X value and set y as 'DEATH_EVENT'so we can use our X to predict our y.\n\n\n"}}