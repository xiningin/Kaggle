{"cell_type":{"f7b2679a":"code","0165f6c5":"code","1600f5d9":"code","42ef7ec7":"code","62859278":"code","0a426ede":"code","9664f6cb":"code","f0834a46":"code","c7b4c56c":"code","d684e3aa":"code","19539bb0":"code","9ade48a3":"code","fa1e050f":"code","dc9ac611":"code","25c99771":"code","b52e1ad9":"code","5c5924d8":"code","298b695b":"code","a48b1e71":"code","136f6595":"code","9a99309a":"code","71c4fe65":"markdown","3c25866f":"markdown","66940066":"markdown","f65ff12a":"markdown","c98cf5d9":"markdown","da8be635":"markdown","cfb0f324":"markdown","dcd6ec07":"markdown","cb0f6ee1":"markdown","4c5da794":"markdown","0557fd48":"markdown","3ef01507":"markdown"},"source":{"f7b2679a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0165f6c5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","1600f5d9":"df = pd.read_csv('..\/input\/okcupid-profiles\/okcupid_profiles.csv')","42ef7ec7":"df = df.iloc[:,0:21]","62859278":"df.head()","0a426ede":"df.describe()\n","9664f6cb":"total_nrows = df.shape[0]\ntotal_ncols = df.shape[1]\nprint('Total rows: ', total_nrows, ' Total columns: ', total_ncols)\nprint(df.info())\n","f0834a46":"plt.figure(figsize=(12, 5))\ndf.isna().sum().plot(kind=\"bar\")\nplt.xticks(rotation=50)\n","c7b4c56c":"df1 = df.dropna(subset=['diet', 'drugs','education','age','status','sex','orientation','body_type',\n'ethnicity','job','pets'])\n","d684e3aa":" def rmissingvaluecol(df1,threshold):\n    l = []\n    l = list(df1.drop(df1.loc[:,list((100*(df1.isnull().sum()\/len(df1.index))>=threshold))].columns, 1).columns.values)\n    print(\"# Columns having more than %s percent missing values:\"%threshold,(df1.shape[1] - len(l)))\n    print(\"Columns:\\n\",list(set(list((df1.columns.values))) - set(l)))\n    return l","19539bb0":"l = rmissingvaluecol(df1,1)\ndf2 = df1[l]\n","9ade48a3":"df2.head()\n","fa1e050f":"print('body_type:')\nprint(list(set(df1['body_type'])))\nprint('diet:')\nprint(list(set(df1['diet'])))\nprint('Religion:')\nprint(list(set(df1['religion'])))","dc9ac611":"print('body_type:')\nlist(set(df1['body_type']))\n","25c99771":"def show_percetage(plot, feature):\n    total = len(feature)\n    for p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_height()\/total)\n        x = p.get_x()+p.get_width()\/2-0.1\n        y = p.get_y()+p.get_height()\n        ax.annotate(percentage, (x, y), size=10)","b52e1ad9":"profile_age = df1[df1['age']<65]\nax = sns.violinplot(x='sex', y='age',data=profile_age,\npalette=\"mako\", split=True,\nscale=\"count\", inner=\"quartile\")\n","5c5924d8":"plt.figure(figsize=(9, 5))\nax = sns.countplot(x='orientation', data=df1,\nhue='sex',\npalette='PRGn',\norder=df1['orientation'].value_counts().iloc[:10].index)\ntotal = float(len(df1))\nshow_percetage(ax, df1)\nplt.show()\n","298b695b":"plt.figure(figsize=(9, 5))\nax = sns.countplot(x='body_type', data=df1,\nhue='sex',\npalette='rocket',\norder=df1['body_type'].value_counts().iloc[:10].index)\nax.set_title(\"Body type by gender\")\nax.set(xlabel='Count', ylabel='Body Type')\nshow_percetage(ax, df1)\nplt.show()","a48b1e71":"plt.figure(figsize=(9, 5))\nax = sns.countplot(x='diet', data=df1,\nhue='sex', palette='Paired',\norder = df1['diet'].value_counts().iloc[:10].index)\nplt.xticks(rotation = 30)\nax.set_title(\"Diet by gender\")\nshow_percetage(ax, df1)","136f6595":"plt.figure(figsize=(9, 5))\nsns.countplot(y='job', data=df1,\nhue='sex', palette='Reds',\norder = df1['job'].value_counts().iloc[:10].index)\nplt.show()","9a99309a":"plt.figure(figsize=(9, 5))\nsns.countplot(y = 'pets', data=df1,\nhue='sex', palette='PuRd',\norder=df1['pets'].value_counts().iloc[:].index)\nplt.show()\n","71c4fe65":"**Q 5 Number of unique values in different columns.Display using\nsuitable plot**","3c25866f":"**Q 3 Find the rows with missing data. Report them**","66940066":"**Q 7 Orientation (in percentage) of male and females. Represent\nusing a suitable graph**","f65ff12a":"**Q6 Visualization to show the age distribution of male and\nfemales.\n**","c98cf5d9":"**Q 8 Percentage of body types by gender. Represent using a\nsuitable graph.**","da8be635":"**Q 10 Compare jobs of males and females. Represent using\nsuitable graphs**","cfb0f324":"**Q4 Make a barplot which shows missing values in different\ncolumns**","dcd6ec07":"**Q 11 Compare pets of different gender. Represent using suitable\ngraphs.\n**","cb0f6ee1":"**Q 2 Describe Basic info about dataset**","4c5da794":"**Q 9 Different diets by gender. Represent using suitable graph**","0557fd48":"**Q 1 Read profile**","3ef01507":"**Vikas kumar Mahaur (18SCSE1050038)**"}}