{"cell_type":{"f4e35f3c":"code","d6afde33":"code","49443052":"code","6f6d70bd":"code","355c6412":"code","16cea52a":"code","2cce9ff5":"code","d63142e4":"code","407931b5":"code","898ab0bb":"code","3f67ce33":"code","6adbe2cb":"code","5ddc90be":"code","5e47d61d":"code","0c26a5a6":"code","b06cea04":"code","1b731fee":"markdown","03d6dc3c":"markdown"},"source":{"f4e35f3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6afde33":"#Code By Paul Mooney\n\nprosody_file = '..\/input\/multilingual-names\/German.txt'\nwith open(prosody_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(3000))","49443052":"df= pd.read_csv('..\/input\/multilingual-names\/German.txt', sep='\\t', error_bad_lines=False)\ndf.head()","6f6d70bd":"df['Abbing'].tail()","355c6412":"df.shape","16cea52a":"df.loc[[4]]","2cce9ff5":"df.loc[[5]]","d63142e4":"df.iloc[0]  #  The 1st Line ","407931b5":"df.iloc[-1] # The Last line","898ab0bb":"#All data from the 1st column (in this case 1st and unique column)\n\ndf.iloc[:,0]","3f67ce33":"#1st to 5th from the last columns (we have only one column)\n\ndf.iloc[0:5,-1]","6adbe2cb":"#just like above using the slice\n\ndf.iloc[[0,1,2,3,4,5],-1]","5ddc90be":"df[\"Abbing\"].value_counts()","5e47d61d":"plt.figure(figsize=(10, 7))\npd.value_counts(df['Abbing'].head(10)).plot.bar()\nplt.show()","0c26a5a6":"labels1=df.Abbing.value_counts().index\nsizes1=df.Abbing.value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes1,labels=labels1,autopct=\"%1.1f%%\")\nplt.title(\"Abbing\",size=15)\nplt.show()","b06cea04":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Abbing)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.show()","1b731fee":"#https:\/\/medium.com\/horadecodar\/data-science-tips-02-como-usar-loc-e-iloc-no-pandas-fab58e214d87","03d6dc3c":"![](https:\/\/m.media-amazon.com\/images\/I\/51dBWgaLccL.jpg)amazon.com.br"}}