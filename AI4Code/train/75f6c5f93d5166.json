{"cell_type":{"65bfcb16":"code","3668307b":"code","a0f1669e":"code","70b79251":"code","361b0c2f":"markdown"},"source":{"65bfcb16":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nfrom skimage.measure import label, regionprops\nfrom itertools import combinations, product\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntest_path = data_path \/ 'test'\n\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","3668307b":"def get_objects(task):\n    xs, ys = [], []\n    for obj in task['train']:\n        xs.append(np.array(obj['input']))\n        ys.append(np.array(obj['output']))\n    return xs, ys\n\ndef find_sub(matrix, sub, ignore = None):\n    positions = []\n    mask = sub != ignore\n    sub_ = sub[mask]\n    for x in range(matrix.shape[0]-sub.shape[0]+1):\n        for y in range(matrix.shape[1]-sub.shape[1]+1):\n            if np.array_equal(matrix[x:x+sub.shape[0], y:y+sub.shape[1]][mask], sub_):\n                positions.append((x,y,x+sub.shape[0],y+sub.shape[1]))\n    return positions\n\ndef check_subitem(task):\n    for x, y in zip(*get_objects(task)):\n        positions = find_sub(x, y)\n        if len(positions) == 0:\n            return False\n    return True\n            \ndef check_samesize(task):\n    for x,y in zip(*get_objects(task)):\n        if x.shape != y.shape:\n            return False\n    return True\n\ndef check_sub_mask(task):\n    if check_samesize(task):\n        return False\n    for x,y in zip(*get_objects(task)):\n        colors, counts = np.unique(x, return_counts=True)\n        found = 0\n        for c, area in zip(colors, counts):\n            cxs, cys = np.where(x == c)\n            xmin,ymin,xmax,ymax = min(cxs),min(cys),max(cxs)+1,max(cys)+1\n            shape = (xmax-xmin, ymax-ymin)\n            if shape == y.shape and area == np.prod(y.shape):\n                found += 1\n        if found != 1:\n            return False\n    return True\n\ndef get_cells(x, cols, rows):\n    if cols[0] != 0:\n        cols = [-1]+cols\n    if rows[0] != 0:\n        rows = [-1]+rows\n    if cols[-1] != x.shape[0]-1:\n        cols.append(x.shape[0])\n    if rows[-1] != x.shape[1]-1:\n        rows.append(x.shape[1])\n    cells = np.full((len(cols)-1, len(rows)-1), np.object)\n    for i in range(len(cols)-1):\n        for j in range(len(rows)-1):\n            cells[i][j] = x[cols[i]+1:cols[i+1], rows[j]+1:rows[j+1]]\n    return cells\n\ndef get_grid(x):\n    cols = defaultdict(list)\n    rows = defaultdict(list)\n    if x.shape[0] < 3 or x.shape[1] < 3:\n        return -1, [], []\n    for i in range(x.shape[0]):\n        if len(np.unique(x[i])) == 1:\n            cols[x[i,0]].append(i)\n    for i in range(x.shape[1]):\n        if len(np.unique(x[:,i])) == 1:\n            rows[x[0,i]].append(i)\n    for c in cols:\n        if c in rows and all(np.diff(cols[c])>1) and all(np.diff(rows[c])>1):\n            return c, cols[c], rows[c]\n    return -1, [], []\n\ndef check_grid(task):\n    for x,y in zip(*get_objects(task)):\n        color_of_grid, cols, rows = get_grid(x)\n        if color_of_grid == -1:\n            return False\n    return True","a0f1669e":"def mul_ratio(x, x_ratio):\n    x_shape = (x.shape[0]*x_ratio[0], x.shape[1]*x_ratio[1])\n    x_ = np.array([x[i\/\/x_ratio[0]][j\/\/x_ratio[1]] for i, j in np.ndindex(x_shape)]).reshape(x_shape)\n    return x_\n\ndef predict_transforms(xs, ys, test):\n    fn = get_transform(xs, ys)\n    if fn:\n        return [fn(test)]\n    ratio = get_ratio(xs, ys)\n    if ratio:\n        x_ratio, y_ratio = ratio\n        xs_ = []\n        ys_ = []\n        for x, y in zip(xs, ys):\n            x, y = mul_ratios(x, y, x_ratio, y_ratio)\n            xs_.append(x)\n            ys_.append(y)\n        fn = get_transform(xs_, ys_)\n        if fn:\n            test = mul_ratio(test, x_ratio)\n            return [fn(test)]\n        fns = np.full(x_ratio, np.object)\n        for i, j in np.ndindex(x_ratio):\n            ys_ = []\n            for y in ys:\n                m1 = y.shape[0]\/\/x_ratio[0]\n                m2 = y.shape[1]\/\/x_ratio[1]\n                ys_.append(y[i*m1:(i+1)*m1,j*m2:(j+1)*m2])\n            fn = get_transform(xs, ys_)\n            if fn:\n                fns[i,j] = fn\n            else:\n                return []\n        return [np.concatenate([np.concatenate([fns[i,j](test) for i in range(x_ratio[0])], axis=0) for j in range(x_ratio[1])], axis=1)]\n    return []\n\ndef predict_grid_transforms(task, test):\n    xs, ys = get_objects(task)\n    xs = [grid_filter(x) for x in xs]\n    return predict_transforms(xs, ys, grid_filter(test))\n\ndef get_transform(xs, ys):\n    for tranform in get_all_transforms():\n        tranformed = True\n        for x, y in zip(xs, ys):\n            if tranform(x).shape != y.shape:\n                tranformed = False\n                break\n            if not np.equal(tranform(x), y).all():\n                tranformed = False\n        if tranformed:\n            return tranform\n    return None\n\ndef get_transforms(xs, ys):\n    fn = get_transform(xs, ys)\n    if fn:\n        return fn\n    ratio = get_ratio(xs, ys)\n    if ratio:\n        x_ratio, y_ratio = ratio\n        xs_ = []\n        ys_ = []\n        for x, y in zip(xs, ys):\n            x, y = mul_ratios(x, y, x_ratio, y_ratio)\n            xs_.append(x)\n            ys_.append(y)\n        fn = get_transform(xs_, ys_)\n        if fn:\n            return fn\n        fns = np.full(x_ratio, np.object)\n        for i, j in np.ndindex(x_ratio):\n            ys_ = []\n            for y in ys:\n                m1 = y.shape[0]\/\/x_ratio[0]\n                m2 = y.shape[1]\/\/x_ratio[1]\n                ys_.append(y[i*m1:(i+1)*m1,j*m2:(j+1)*m2])\n            fn = get_transform(xs, ys_)\n            if fn:\n                fns[i,j] = fn\n            else:\n                return None\n        return fns\n    return None\n\ndef check_grid_transforms(task):\n    xs, ys = get_objects(task)\n    xs = [grid_filter(x) for x in xs]\n    return get_transforms(xs, ys) is not None\n\ndef get_mode_color(ar):\n    colors, counts = np.unique(ar, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef grid_filter(x):\n    color_of_grid, cols, rows = get_grid(x)\n    if color_of_grid == -1:\n        return x\n    cells = get_cells(x, cols, rows)\n    return np.array([get_mode_color(cell) for cell in cells.reshape(-1)]).reshape(cells.shape)\n\ndef mul_ratios(x, y, x_ratio, y_ratio):\n    x_shape = (x.shape[0]*x_ratio[0], x.shape[1]*x_ratio[1])\n    x_ = np.array([x[i\/\/x_ratio[0]][j\/\/x_ratio[1]] for i, j in np.ndindex(x_shape)]).reshape(x_shape)\n    y_shape = (y.shape[0]*y_ratio[0], y.shape[1]*y_ratio[1])\n    y_ = np.array([y[i\/\/y_ratio[0]][j\/\/y_ratio[1]] for i, j in np.ndindex(y_shape)]).reshape(y_shape)\n    return x_, y_\n\ndef get_ratio(xs, ys):\n    x_ratio = []\n    y_ratio = []\n    for i in range(2):\n        if   all(x.shape[i]%y.shape[i] == 0  for x, y in zip(xs, ys)):\n            if len(set(x.shape[i]\/\/y.shape[i] for x, y in zip(xs, ys))) == 1:\n                x_ratio.append(1)\n                y_ratio.append(xs[0].shape[i]\/\/ys[0].shape[i])\n        elif all(y.shape[i]%x.shape[i] == 0  for x, y in zip(xs, ys)):\n            if len(set(y.shape[i]\/\/x.shape[i] for x, y in zip(xs, ys))) == 1:\n                x_ratio.append(ys[0].shape[i]\/\/xs[0].shape[i])\n                y_ratio.append(1)\n    if len(x_ratio) != 2:\n        return None\n    return tuple(x_ratio), tuple(y_ratio)\n\ndef check_sub_grid_2x(task):\n    if check_samesize(task) or check_subitem(task):\n        return False\n    for x,y in zip(*get_objects(task)):\n        color_of_grid, cols, rows = get_grid(x)\n        if color_of_grid == -1:\n            return False\n        cells = grid_filter(x)\n        if (cells.shape[0]*2 != y.shape[0] or cells.shape[1]*2 != y.shape[1]):\n            return False\n    return True\n\ndef check_chess(task, input=False, output=True):\n    xs, ys = get_objects(task)\n    if input:\n        for x in xs:\n            if not has_chess(x) and not has_antichess(x):\n                return False\n    if output:\n        for y in ys:\n            if not has_chess(y) and not has_antichess(y):\n                return False\n    return True\n\ndef has_chess(g):\n    colors = np.unique(g)\n    counts = len(colors)\n    if counts < 2:\n        return False\n    indexes = np.zeros(counts, bool)\n    for c in colors:\n        pts = np.where(g == c)\n        s = set([(x+y)%counts for x, y in zip(*pts)])\n        if len(s) > 1:\n            return False\n        index = s.pop()\n        if indexes[index]:\n            return False\n        indexes[index] = True\n    return True\n\ndef has_antichess(g):\n    colors = np.unique(g)\n    counts = len(colors)\n    if counts < 2:\n        return False\n    indexes = np.zeros(counts, bool)\n    for c in colors:\n        pts = np.where(g == c)\n        s = set([(g.shape[0]-x+y-1)%counts for x, y in zip(*pts)])\n        if len(s) > 1:\n            return False\n        index = s.pop()\n        if indexes[index]:\n            return False\n        indexes[index] = True\n    return True\n\ndef find_colors(g):\n    colors = np.unique(g)\n    counts = len(colors)\n    for cnt in range(counts, 1, -1):\n        q_colors = np.full(cnt, -1, int)\n        for c in colors:\n            pts = np.where(g == c)\n            s = set([(x+y)%cnt for x, y in zip(*pts)])\n            if len(s) > 1:\n                continue\n            index = s.pop()\n            q_colors[index] = c\n        \n        if -1 not in q_colors:\n            return q_colors\n    return None\n\ndef predict_chess(g):\n    q_colors = find_colors(g)\n    if q_colors is None:\n        colors, counts = np.unique(g, return_counts=True)\n        q_colors = colors[np.argsort(counts)][:2]\n        \n    results = []\n    counts = len(q_colors)\n    for i in range(counts):\n        result = g.copy()\n        for x, y in np.ndindex(g.shape):\n            result[x,y] = q_colors[(x+y)%counts]\n        results.append(result)\n        q_colors = np.roll(q_colors, 1)\n    return results\n\ndef predict_transforms_grid_2x(task, test):\n    xs, ys = get_objects(task)\n    xs = [grid_filter(x) for x in xs]\n    return predict_transforms_2x(xs, ys, grid_filter(test))\n\ndef predict_transforms_2x(xs, ys, test):\n    predictions = []\n    transforms = [\n        lambda x: np.rot90(x.T, k=1),\n        lambda x: np.rot90(x.T, k=3),\n        lambda x: np.rot90(x, k=2),\n        lambda x: x,\n    ]\n    quads = [(1,3,2,0),(3,1,0,2),(2,0,1,3)] # 3 full symmetrical shapes\n    for f1,f2,f3,f4 in quads:\n        fns = np.array([[transforms[f1],transforms[f2]],[transforms[f3],transforms[f4]]])\n        x_ = np.concatenate([np.concatenate([fns[i,j](test) for i in range(2)], axis=0) for j in range(2)], axis=1)\n        predictions.append(x_)\n    return predictions\n\ndef has_repeating(g, ignore=0):\n    size0b = int(.6 * g.shape[0])\n    size1b = int(.6 * g.shape[1])\n    t = np.full((g.shape[0]+2*size0b,g.shape[1]+2*size1b), -1)\n    t[size0b:-size0b,size1b:-size1b] = g\n    t[t==ignore] = -1\n    for size0 in range(2, size0b+1):\n        for size1 in range(2, size1b+1):\n            for shift0 in range(size0):\n                for shift1 in range(size1):\n                    pattern = t[size0b+shift0:size0b+shift0+size0,size1b+shift1:size1b+shift1+size1].copy()\n                    found = True\n                    for d0 in range(size0b+shift0-size0, t.shape[0]-size0, size0):\n                        for d1 in range(size1b+shift1-size1, t.shape[1]-size1, size1):\n                            test = t[d0:d0+size0,d1:d1+size1]\n                            mask = (test != -1) & (pattern != -1)\n                            if np.array_equal(test[mask], pattern[mask]):\n                                ind = test != -1\n                                pattern[ind] = test[ind]\n                            else:\n                                found = False\n                                break\n                    if found:\n                        return shift0, shift1, pattern\n    return None\n\ndef check_repeating(task, has_complete=False):\n    patterns = []\n    for x, y in zip(*get_objects(task)):\n        if len(np.unique(x)) < 3 or not has_repeating(y,-1):\n            return False\n        result = None\n        for c in np.unique(x):\n#             if c not in np.unique(y):\n            result = has_repeating(x,c)\n            if result:\n                sh0,sh1,pattern = result\n                pattern[pattern == -1] = c\n                if has_complete:\n                    pred = np.tile(pattern, (x.shape[0]\/\/pattern.shape[0]+2, x.shape[1]\/\/pattern.shape[1]+2))\n                    pred1 = pred[sh0:sh0+x.shape[0],sh1:sh1+x.shape[1]]\n                    pred2 = pred[sh0+1:sh0+1+x.shape[0],sh1:sh1+x.shape[1]]\n                    pred3 = pred[sh0:sh0+x.shape[0],sh1+1:sh1+1+x.shape[1]]\n                    if np.array_equal(pred1, y) or np.array_equal(pred2, y) or np.array_equal(pred3, y):\n                        break\n                    result = None\n                else:\n                    break\n        if not result:\n            return False\n    return True\n\ndef predict_repeating(x):\n    for c in np.unique(x):\n        result = has_repeating(x, c)\n        if result:\n            sh0,sh1,pattern = result\n            pattern[pattern == -1] = c\n            pred = np.tile(pattern, (x.shape[0]\/\/pattern.shape[0]+2, x.shape[1]\/\/pattern.shape[1]+2))\n            pred1 = pred[sh0:sh0+x.shape[0],sh1:sh1+x.shape[1]]\n            pred2 = pred[sh0+1:sh0+1+x.shape[0],sh1:sh1+x.shape[1]]\n            pred3 = pred[sh0:sh0+x.shape[0],sh1+1:sh1+1+x.shape[1]]\n            return [pred1,pred2,pred3]\n    return []\n\ndef predict_repeating_mask(x):\n    predictions = predict_repeating(x)\n    if len(predictions) > 0:\n        rows, cols = np.where(predictions[0] != x)\n        return [predictions[0][min(rows):max(rows)+1,min(cols):max(cols)+1]]\n    return []\n\ndef trim_matrix(x):\n    if len(np.unique(x)) == 1:\n        return x\n    for c in np.unique(x):\n        xs,ys = np.where(x!=c)\n        xmin,ymin,xmax,ymax = min(xs),min(ys),max(xs)+1,max(ys)+1\n        if xmin > 0 or ymin > 0 or xmax < x.shape[0] or ymax < x.shape[1]:\n            return x[xmin:xmax,ymin:ymax]\n    return x\n\ndef trim_matrix_box(g, mask=None):\n    if mask is None:\n        mask = np.unique(g)\n    if len(np.unique(g)) == 1:\n        return None\n    for c in mask:\n        xs,ys = np.where(g!=c)\n        xmin,ymin,xmax,ymax = min(xs),min(ys),max(xs)+1,max(ys)+1\n        if xmin > 0 or ymin > 0 or xmax < g.shape[0] or ymax < g.shape[1]:\n            return (xmin,ymin,xmax,ymax)\n    return None\n\ndef has_tiles(g, ignore=0):\n    for size0b, size1b in [(g.shape[0], int(0.6*g.shape[1])), (int(0.6*g.shape[0]), g.shape[1])]:\n        t = np.full((g.shape[0]+size0b, g.shape[1]+size1b), -1)\n        t[:-size0b,:-size1b] = g\n        t[t==ignore] = -1\n        box_trim = trim_matrix_box(g,[ignore])\n        min_size0 = 1\n        min_size1 = 1\n        if box_trim is not None and ignore != -1:\n            xmin,ymin,xmax,ymax = box_trim\n            t[xmin:xmax,ymin:ymax] = g[xmin:xmax,ymin:ymax]\n            min_size0 = xmax-xmin\n            min_size1 = ymax-ymin\n        for size0 in range(min_size0, size0b+1):\n            for size1 in range(min_size1, size1b+1):\n                pattern = t[:size0,:size1].copy()\n                found = True\n                for d0 in range(0, t.shape[0]-size0, size0):\n                    for d1 in range(0, t.shape[1]-size1, size1):\n                        test = t[d0:d0+size0,d1:d1+size1]\n                        mask = (test != -1) & (pattern != -1)\n                        if np.array_equal(test[mask], pattern[mask]):\n                            ind = test != -1\n                            pattern[ind] = test[ind]\n                        else:\n                            found = False\n                            break\n                if found:\n                    return pattern\n    return None\n\ndef roll_color(g):\n    from_values = np.unique(g)\n    to_values = np.roll(from_values, 1)\n\n    sort_idx = np.argsort(from_values)\n    idx = np.searchsorted(from_values, g, sorter = sort_idx)\n    return to_values[sort_idx][idx]\n\ndef get_all_transforms():\n    return [\n        lambda x: roll_color(x),\n        lambda x: np.roll(x, -1, axis=0),\n        lambda x: np.roll(x,  1, axis=0),\n        lambda x: np.roll(x, -1, axis=1),\n        lambda x: np.roll(x,  1, axis=1),\n        lambda x: np.rot90(x.T, k=1),\n        lambda x: np.rot90(x.T, k=2),\n        lambda x: np.rot90(x.T, k=3),\n        lambda x: np.rot90(x.T, k=4),\n        lambda x: np.rot90(x, k=1),\n        lambda x: np.rot90(x, k=2),\n        lambda x: np.rot90(x, k=3),\n        lambda x: x,\n    ]\n\ndef has_tiles_shape(g, shape, ignore=0):\n    for size0b, size1b in [(g.shape[0], int(0.6*g.shape[1])), (int(0.6*g.shape[0]), g.shape[1])]:\n        t = np.full((g.shape[0]+size0b, g.shape[1]+size1b), -1)\n        t[:-size0b,:-size1b] = g\n        t[t==ignore] = -1\n        box_trim = trim_matrix_box(g,[ignore])\n        min_size0 = 1\n        min_size1 = 1\n        if box_trim is not None and ignore != -1:\n            xmin,ymin,xmax,ymax = box_trim\n            t[xmin:xmax,ymin:ymax] = g[xmin:xmax,ymin:ymax]\n            min_size0 = xmax-xmin\n            min_size1 = ymax-ymin\n        size0 = shape[0]\n        size1 = shape[1]\n        pattern = t[:size0,:size1].copy()\n        found = True\n        for d0 in range(0, t.shape[0]-size0, size0):\n            for d1 in range(0, t.shape[1]-size1, size1):\n                test = t[d0:d0+size0,d1:d1+size1]\n                mask = (test != -1) & (pattern != -1)\n                if np.array_equal(test[mask], pattern[mask]):\n                    ind = test != -1\n                    pattern[ind] = test[ind]\n                else:\n                    found = False\n                    break\n        if found:\n            return pattern\n    return None\n\ndef check_tiles_shape(task, has_complete=0): \n    patterns = []\n    for x, y in zip(*get_objects(task)):\n        o_pattern = has_tiles(y,-1)\n        if len(np.unique(x)) < 2 or o_pattern is None:\n            return False\n        found = False\n        for c in [-1, *np.unique(x)]:\n            pattern = has_tiles_shape(x, o_pattern.shape, c)\n            if pattern is not None:\n                pattern[pattern == -1] = c\n                if has_complete:\n                    for transform in get_all_transforms():\n                        transformed_pattern = transform(pattern)\n                        pred = np.tile(transformed_pattern, (x.shape[0]\/\/transformed_pattern.shape[0]+2, x.shape[1]\/\/transformed_pattern.shape[1]+2))\n                        pred = pred[:x.shape[0],:x.shape[1]]\n                        if np.array_equal(pred, y):\n                            found = True\n                            patterns.append(pattern)\n                            break\n                else:\n                    found = True\n                    patterns.append(pattern)\n        if not found:\n            return False\n    return True\n\ndef predict_tiles_shape(task, test_input):\n    has_transforms = set()\n    has_shapes = set()\n    for x, y in zip(*get_objects(task)):\n        o_pattern = has_tiles(y,-1)\n        if len(np.unique(x)) < 2 or o_pattern is None:\n            return []\n        found = False\n        for c in [-1, *np.unique(x)]:\n            pattern = has_tiles_shape(x, o_pattern.shape, c)\n            if pattern is not None:\n                pattern[pattern == -1] = c\n                for transform in get_all_transforms():\n                    transformed_pattern = transform(pattern)\n                    pred = np.tile(transformed_pattern, (x.shape[0]\/\/transformed_pattern.shape[0]+2, x.shape[1]\/\/transformed_pattern.shape[1]+2))\n                    pred = pred[:x.shape[0],:x.shape[1]]\n                    if np.array_equal(pred, y):\n                        found = True\n                        has_transforms.add(transform)\n                        has_shapes.add(o_pattern.shape)\n                        break\n        if not found:\n            return []\n     \n    preds = []\n    for c in np.unique(test_input):\n        for shape in has_shapes:\n            pattern = has_tiles_shape(test_input, shape, c)\n            if pattern is None:\n                continue\n            pattern[pattern == -1] = c\n\n            pred = np.tile(pattern, (test_input.shape[0]\/\/pattern.shape[0]+2, test_input.shape[1]\/\/pattern.shape[1]+2))\n            for transform in has_transforms:\n                transformed_pattern = transform(pattern)\n                pred = np.tile(transformed_pattern, (test_input.shape[0]\/\/transformed_pattern.shape[0]+2, test_input.shape[1]\/\/transformed_pattern.shape[1]+2))\n                pred = pred[:test_input.shape[0],:test_input.shape[1]]\n                preds.append(pred)\n    return preds","70b79251":"outputs = []\nsubmission = pd.read_csv(data_path\/'sample_submission.csv')\nproblems = submission['output_id'].values\nfor i in  range(len(problems)):\n    output_id = problems[i]\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n        for key_task in task:\n            for obj in task[key_task]:\n                for key in obj:\n                    obj[key] = np.array(obj[key])\n    test_input = task['test'][pair_id]['input']\n    predictions = []\n    if check_sub_mask(task):\n        predictions.extend(predict_repeating_mask(test_input))\n    elif check_grid(task) and check_grid_transforms(task):\n        predictions.extend(predict_grid_transforms(task, test_input))\n    elif check_grid(task) and check_chess(task, False, True):\n        predictions.extend(predict_chess(grid_filter(test_input)))\n    elif check_grid(task) and check_sub_grid_2x(task):\n        predictions.extend(predict_transforms_grid_2x(task, test_input))\n    elif check_repeating(task, True):\n        predictions.extend(predict_repeating(test_input))\n    elif check_tiles_shape(task, True):\n        predictions.extend(predict_tiles_shape(task, test_input))\n    outputs.append(' '.join(list(set(flattener(pred.tolist()) for pred in predictions))[:3]))\nsubmission['output'] = outputs\nsubmission.to_csv('submission.csv', index=False)","361b0c2f":"### I have removed all code what not improve LB"}}