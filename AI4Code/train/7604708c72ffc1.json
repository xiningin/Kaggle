{"cell_type":{"b3a7f37f":"code","d6e16a5c":"code","853b2156":"code","a1203b1f":"code","33c32337":"code","5dd8d91e":"code","62e43f14":"code","12f8104a":"code","25845617":"code","c963b14c":"code","6d3cb849":"markdown","7c3f1081":"markdown","65c59296":"markdown","a702b4ab":"markdown","5cb388e5":"markdown","2cdab2ac":"markdown","23ecb8e2":"markdown","81b88fd4":"markdown","555734fa":"markdown","b4ae2957":"markdown","3ba2c034":"markdown","07e9cf4b":"markdown"},"source":{"b3a7f37f":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras import Model\nfrom keras.layers import Input, GlobalAveragePooling2D, BatchNormalization, Dropout, Dense\nfrom tensorflow.keras.applications import EfficientNetB3\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping","d6e16a5c":"base_dir = '..\/input\/state-farm-distracted-driver-detection'\ntrain_dir = os.path.join(base_dir, 'imgs\/train\/')\ntest_dir = os.path.join(base_dir, 'imgs\/test\/')\ndata = pd.read_csv(os.path.join(base_dir, 'driver_imgs_list.csv'))","853b2156":"data.head()\nclass_count = data.classname.value_counts()\nfig = class_count.plot(kind='bar')","a1203b1f":"IMAGE_SIZE = (224,224)\nBATCH_SIZE = 32\n\ntrain_gen = ImageDataGenerator(\n    width_shift_range=0.3,\n    height_shift_range=0.3,\n    shear_range=0.3,\n    zoom_range=0.4,\n    validation_split=0.2)\n\ntest_gen = ImageDataGenerator()\n\ntrain_data= train_gen.flow_from_directory(\n    train_dir,\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    seed=42,\n    subset='training'\n)\n\nval_data = train_gen.flow_from_directory(\n    train_dir,\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    seed=42,\n    subset='validation'\n)","33c32337":"def define_model(num_classes):\n    inputs = Input(shape=(224,224,3))\n    base_model = EfficientNetB3(include_top=False, weights='imagenet')(inputs)\n    x = GlobalAveragePooling2D()(base_model)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    output = Dense(units=num_classes, activation='softmax')(x)\n    \n    model = Model(inputs=inputs, outputs=output)\n    model.compile(optimizer=tf.optimizers.Adam(learning_rate=1e-4), \n                  loss='categorical_crossentropy',\n                 metrics=['accuracy'])\n    return model\n\nmodel = define_model(10)\nmodel.summary()","5dd8d91e":"checkpoint_callback = ModelCheckpoint('best_model.hdf5', save_best_only=True, monitor='val_loss', mode='min')\nes = EarlyStopping(monitor='val_loss', patience=5)\nhistory = model.fit(train_data, epochs=20, validation_data=val_data, callbacks=[es, checkpoint_callback])","62e43f14":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Loss')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['train', 'val'])\n\nplt.subplot(1,2,2)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Accuracy')\nplt.xlabel('epoch')\nplt.ylabel('acc')\nplt.legend(['train', 'val'])","12f8104a":"test_dir = os.path.join(base_dir, 'imgs')\n\ntest_data = test_gen.flow_from_directory(\n    test_dir,\n    shuffle=False,\n    target_size=IMAGE_SIZE,\n    classes=['test'],\n    batch_size=BATCH_SIZE\n)","25845617":"preds = model.predict(test_data)","c963b14c":"test_imgs = os.path.join(base_dir, \"imgs\/test\")\n\ntest_ids = sorted(os.listdir(test_imgs))\npred_df = pd.DataFrame(columns = ['img','c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'])\nfor i in range(len(preds)):\n    pred_df.loc[i, 'img'] = test_ids[i]\n    pred_df.loc[i, 'c0':'c9'] = preds[i]\n    \npred_df.to_csv('submission.csv', index=False)","6d3cb849":"**Importing Required Libraries**","7c3f1081":"**Training Our Model**","65c59296":"Using EfficientNets to make our model","a702b4ab":"**Working With ImageDataGenerator Class**","5cb388e5":"**Making Directories**","2cdab2ac":"**Evaluating Our Model**","23ecb8e2":"# **Distracted Driver Detection**\n\n*Problem statement*: Given the dataset consisting of driver images in car and corresponding labels for 10 nos. categories (e.g. safe driving, texting, talking etc.), your task is to build a classification model to predict the category for that image.\n\nI have used a pretrained model and tried to implement my code with the help of EfficientNets.","81b88fd4":"**Completed**","555734fa":"**Reviewing Dataset**","b4ae2957":"* ImageDataGenerator class is used to ease out our working with the images.\n* EfficientNet has been imported to increase our accuracy.\n* EarlyStopping makes sure that we don't unnecessarily train our model further.\n* Few filters are added from Keras too.","3ba2c034":"**Making The Model**","07e9cf4b":"**Predictions**"}}