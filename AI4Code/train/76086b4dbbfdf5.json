{"cell_type":{"e8d6c750":"code","86b28999":"code","33db168b":"code","4f3c1b06":"code","b1bd4204":"code","ae4a1e67":"code","3cc295f6":"code","9f7800ad":"code","97cf2aec":"code","925e2fba":"code","f5f7848f":"code","1be05314":"code","4f660b96":"code","8763a239":"code","17c27450":"code","85339f09":"code","966479cd":"code","a8b3c2a7":"code","d72ee1ec":"code","9e25ffdc":"code","cbd20d52":"code","c753e72d":"code","92242ca1":"code","6252989e":"code","b921817c":"code","901b89f0":"code","e95fab00":"code","34c40905":"code","5e33c3c0":"code","232f97ee":"code","65d368c1":"code","274944cf":"code","1cf3ab2c":"code","ed2eca63":"code","78a0552a":"code","04f49fa7":"code","6d268098":"code","ecf161ad":"code","51190117":"code","4a8ccd0d":"code","5d7952dc":"markdown"},"source":{"e8d6c750":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","86b28999":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","33db168b":"ratings_col = ['UserID','MovieID','Rating','Timestamp']\nratings_data=pd.read_table(\"..\/input\/Data science with Python 1\/ratings.dat\" , sep = \"::\", header = None,names = ratings_col,engine='python')\nratings_data.head()","4f3c1b06":"users_col = ['UserID','Genere','Age','Occupation','Zip-code']\nusers_data=pd.read_table(\"..\/input\/Data science with Python 1\/users.dat\" , sep = \"::\", header = None,names = users_col,engine='python')\nusers_data","b1bd4204":"movies_col = ['MovieID','Title','Genres']\nmovies_data=pd.read_table(\"..\/input\/Data science with Python 1\/movies.dat\" , sep = \"::\", header = None,names = movies_col,engine='python')\nmovies_data.head()","ae4a1e67":"Master_Data1 = pd.merge(movies_data, ratings_data[['UserID','MovieID','Rating']], how='right')\nMaster_Data1","3cc295f6":"Master_Dataf= Master_Data2.drop(['Genres'],axis=1)\nMaster_Data2.head()","9f7800ad":"Master_Data2 = pd.merge(Master_Data1, users_data[['UserID','Genere','Age','Occupation']], how='inner')\nMaster_Data2","97cf2aec":"Master_Dataf.Age.plot(kind=\"kde\")","925e2fba":"Master_Dataf.Age.plot.hist(bins=25)\nplt.title(\"Distribution of user's ages\")\nplt.ylabel('count of users')\nplt.xlabel('Age')","f5f7848f":"labels = ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79']\nMaster_Dataf['Age_Group'] = pd.cut(Master_Dataf.Age, range(0, 81, 10), right=False, labels=labels)\nMaster_Dataf[['Age', 'Age_Group']].drop_duplicates()[:10]","1be05314":"groupby_title = Master_Dataf.groupby('Title')\ngroupby_rating = Master_Dataf.groupby('Rating')\ngroupby_uid = Master_Dataf.groupby('UserID')","4f660b96":"top_25_Movies = groupby_title.size().sort_values(ascending=False).to_frame().reset_index().head(25)\ntop_25_Movies.style.background_gradient(cmap=\"Greens\")","8763a239":"toy_Stotry_data = groupby_title.get_group(\"Toy Story (1995)\")\ntoy_Stotry_data","17c27450":"user_rating = toy_Stotry_data.groupby('UserID')['Rating']\nuser_rating.head()","85339f09":"plt.figure(figsize=(10,10))\nplt.scatter(toy_Stotry_data['MovieID'],toy_Stotry_data['Rating'])\nplt.title('Plot showing  the user rating of the movie \u201cToy Story\u201d')\nplt.show()","966479cd":"toy_Stotry_data[['Title','Age_Group']]","a8b3c2a7":"userid_2696 = groupby_uid.get_group(2696)\nuserid_2696[['UserID','Rating']].style.background_gradient(cmap=\"Reds\")","d72ee1ec":"list_geners=Master_Data2['Genere']","9e25ffdc":"new_geners=[]\nfor i in list_geners:\n    if i == \"F\":\n        new_geners.append(1)\n    else:\n        new_geners.append(0)","cbd20d52":"f = Master_Data2.copy()\ndf = f.join(f.pop('Genres').str.get_dummies('|'))\ndf.head()","c753e72d":"Master_Data2['new_geners']=new_geners\nMaster_Data2","92242ca1":"predict_rating = Master_Data2[Master_Data2['MovieID']==1]\npredict_rating","6252989e":"predict_rating.corr()","b921817c":"Master_Data_500=Master_Data2[0:1500:]\nMaster_Data_500","901b89f0":"x_features = Master_Data_500[['MovieID','Age','Occupation','new_geners']].to_numpy()","e95fab00":"y_features = Master_Data_500[['Rating']].to_numpy().reshape(-1,1)","34c40905":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler","5e33c3c0":"x_features_train,x_features_test,y_features_train,y_features_test = train_test_split(x_features,y_features,test_size=0.33,random_state = 42)","232f97ee":"#Linear Regression\nsc = StandardScaler()\nlogreg = LogisticRegression()\nx_features_train=sc.fit_transform(x_features_train)\nx_features_test=sc.transform(x_features_test)\nlogreg.fit(x_features_train,y_features_train)\nY_pred = logreg.predict(x_features_test)\nacc_log = round(logreg.score(x_features_train, y_features_train) * 100, 2)\nacc_log","65d368c1":"from sklearn import preprocessing\n\n#SVM\nsvc = SVC()\nx_features_train= preprocessing.scale(x_features_train)\nsvc.fit(x_features_train, y_features_train)\nY_pred = svc.predict(x_features_test)\nacc_svc = round(svc.score(x_features_train, y_features_train) * 100, 2)\nacc_svc","274944cf":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_features_train, y_features_train)\nY_pred = random_forest.predict(x_features_test)\nrandom_forest.score(x_features_train, y_features_train)\nacc_random_forest = round(random_forest.score(x_features_train, y_features_train) * 100, 2)\nacc_random_forest","1cf3ab2c":"# K Nearest Neighbors Classifier\n\nknn = KNeighborsClassifier(n_neighbors = 4)\nknn.fit(x_features_train, y_features_train)\nY_pred = knn.predict(x_features_test)\nacc_knn = round(knn.score(x_features_train, y_features_train) * 100, 2)\nacc_knn","ed2eca63":"# Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(x_features_train, y_features_train)\nY_pred = perceptron.predict(x_features_test)\nacc_perceptron = round(perceptron.score(x_features_train, y_features_train) * 100, 2)\nacc_perceptron","78a0552a":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(x_features_train, y_features_train)\nY_pred = gaussian.predict(x_features_test)\nacc_gaussian = round(gaussian.score(x_features_train, y_features_train) * 100, 2)\nacc_gaussian","04f49fa7":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(x_features_train, y_features_train)\nY_pred = linear_svc.predict(x_features_test)\nacc_linear_svc = round(linear_svc.score(x_features_train, y_features_train) * 100, 2)\nacc_linear_svc","6d268098":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(x_features_train, y_features_train)\nY_pred = decision_tree.predict(x_features_test)\nacc_decision_tree = round(decision_tree.score(x_features_train, y_features_train) * 100, 2)\nacc_decision_tree","ecf161ad":"# Stochastic Gradient Descent\n\nsgd = SGDClassifier()\nsgd.fit(x_features_train, y_features_train)\nY_pred = sgd.predict(x_features_test)\nacc_sgd = round(sgd.score(x_features_train, y_features_train) * 100, 2)\nacc_sgd","51190117":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron',\n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron,\n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","4a8ccd0d":"c=sns.catplot(x='Model',y='Score', kind='bar',data=models)\nc.set_xticklabels(rotation=90)","5d7952dc":"Top 25 movies based on rating"}}