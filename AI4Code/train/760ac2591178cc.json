{"cell_type":{"65ed0e85":"code","fd2bee0b":"code","58cae36d":"code","40c9f1b1":"code","2a11ffc6":"code","39a9ca37":"code","3461a4f1":"code","8c535974":"code","f3e7d162":"code","94d4b712":"markdown","c6408b5f":"markdown","e00752bf":"markdown","f2aa2b6d":"markdown","a480d7e3":"markdown","40fd8f28":"markdown","368931ff":"markdown","0ab01f43":"markdown","b2744f82":"markdown","de049b20":"markdown","035f96c0":"markdown","40bb2c2c":"markdown"},"source":{"65ed0e85":"def multiply(A,B): #Can be scalar-scalar,scalar-vector,scalar-matrix,vector-matrix,matrix-matrix multiply \n    #Position also important in case vector-matrix, matrix-matrix\n    #This function assume that vector is column vector\n    \n    if type(A)==int or type(A)==float or type(B)==int or type(B)==float: #Check if at least one argument is scalar\n        if (type(A)==int or type(A)==float) and (type(B)==int or type(B)==float): #Check if it scalar-scalar multiply\n            result=A*B\n        #If not scalar-scalar multiply, check another argument. It must be vector or matrix\n        elif type(A)==list: #Check whether if A is matrix or vector\n            if type(A[0])==list: #Check whether if A is matrix\n                result=[]\n                for row in range(len(A)):\n                    row_result=[]\n                    for column in range(len(A)):\n                        row_result.append(B*A[row][column])\n                    result.append(row_result)\n            else: #So A must be vector\n                result=[]\n                for element in A:\n                    result.append(B*element)\n        else: #So B must be vector\/matrix\n            if type(B[0])==list: #Check whether if B is matrix\n                result=[]\n                for row in range(len(B)):\n                    row_result=[]\n                    for column in range(len(B)):\n                        row_result.append(A*B[row][column])\n                    result.append(row_result)\n            else: #So B must be vector\n                result=[]\n                for element in B:\n                    result.append(A*element)\n    else: #No scalar argument\n        if type(A[0])==list and type(B[0])==list: #Check whether if A is matrix and B is matrix\n            if len(A[0])==len(B):\n                result=[]\n                for row_A in range(len(A)):\n                    row_result=[]\n                    for column_B in range(len(B[0])):\n                        for_sum_list=[]\n                        for column_A in range(len(A[0])):\n                            for_sum_list.append(A[row_A][column_A]*B[column_A][column_B])\n                        row_result.append(sum(for_sum_list))\n                    result.append(row_result)\n            else:\n                print('Cannot multiply')\n        elif type(A[0])==list and type(B)==list: #Check whether if A is matrix and B is vector\n            if len(A[0])==len(B):\n                result=[]\n                for row in range(len(A)):\n                    for_sum_list=[]\n                    for column in range(len(A[0])):\n                        for_sum_list.append(A[row][column]*B[column])\n                    result.append(sum(for_sum_list))\n            else:\n                print('Cannot multiply')\n        # Case A vector and B matrix is possible if A is row vector but I assume that all vector is column vector, so I skip this case\n        # Case A vector and B vector also same reason\n        else:\n            print('Maybe something went wrong')\n    return result\n\ndef transpose(A):\n    result=[]\n    for column in range(len(A[0])):\n        row_transpose=[]\n        for row in range(len(A)):\n            row_transpose.append(A[row][column])\n        result.append(row_transpose)\n    return result\n\ndef det(A):\n    if len(A[0])==len(A): #Check whether if column and row are equal\n        if len(A)==2:\n            result=(A[0][0]*A[1][1])-(A[0][1]*A[1][0])\n        else:\n            for_sum_list=[]\n            for row1 in range(len(A)):\n                minor=[]\n                for row2 in range(len(A)):\n                    if row1==row2:\n                        pass\n                    else:\n                        minor.append(A[row2][1:])\n                for_sum_list.append(A[row1][0]*(-1)**(row1+0)*det(minor))\n            result=sum(for_sum_list)\n    else:\n        print('Cannot find determinant')\n    return result\n\ndef cofactor(A): #create cofactor matrix\n    if len(A[0])==len(A):\n        result=[]\n        for row1 in range(len(A)): \n            cofactor_row=[]\n            for column1 in range(len(A[0])): #row1 and column1 indicate cofactor position\n                minor=[]\n                for row2 in range(len(A)): #row2 and column2 use to find minor\n                    if row1==row2:\n                        pass\n                    else:\n                        if column1==0:\n                            minor.append(A[row2][1:])\n                        elif column1==len(A[0])-1:\n                            minor.append(A[row2][:len(A[0])-1])\n                        else:\n                            storage=[]\n                            for column2 in range(len(A)):\n                                if column1==column2:\n                                    pass\n                                else:\n                                    storage.append(A[row2][column2])\n                            minor.append(storage)\n                cofactor_row.append((-1)**(row1+column1)*det(minor))\n            result.append(cofactor_row)\n    else:\n        print('Cannot find cofactor matrix')\n    return result\n\ndef inverse(A):\n    if det(A)!=0:\n        if len(A)==2:\n            adjugate=[]\n            adjugate_row=[]\n            adjugate_row.append(A[1][1])\n            adjugate_row.append(-A[0][1])\n            adjugate.append(adjugate_row)\n            adjugate_row=[]\n            adjugate_row.append(-A[1][0])\n            adjugate_row.append(A[0][0])\n            adjugate.append(adjugate_row)\n            result=multiply(1\/det(A),adjugate)\n        else:\n            result=multiply((1\/det(A)),transpose(cofactor(A)))\n    else:\n        print('cannot find inverse')\n    return result","fd2bee0b":"import pandas as pd","58cae36d":"df=pd.read_csv('..\/input\/life-expectancy-who\/Life Expectancy Data.csv')\ndf=df.dropna()\ndf.head()","40c9f1b1":"X=df['Schooling'].values.tolist()\ny=df['Life expectancy '].values.tolist()","2a11ffc6":"X_concat=[]\nfor i in range(len(X)):\n    X_concat_row=[]\n    X_concat_row.append(1)\n    X_concat_row.append(X[i])\n    X_concat.append(X_concat_row)\n\nprint(X_concat[:10])","39a9ca37":"B=multiply(inverse(multiply(transpose(X_concat),X_concat)),multiply(transpose(X_concat),y))\nprint(B)","3461a4f1":"from sklearn.linear_model import LinearRegression","8c535974":"X=df['Schooling'].values.reshape(-1,1)\ny=df['Life expectancy '].values","f3e7d162":"reg=LinearRegression().fit(X,y)\nprint(reg.coef_)\nprint(reg.intercept_)","94d4b712":"# 0. Introduction","c6408b5f":"We also obtain same result from sklearn. Both intercepts are 41.55 and both schooling coefficients are 2.29","e00752bf":"# 1. Create linear algebra tools","f2aa2b6d":"# 3. Compare result to sklearn linear regression","a480d7e3":"I use life expectance data set from WHO","40fd8f28":"Use pandas load data","368931ff":"So best linear equation is\n\n$y=41.55+2.29x$\n\nwhere \n\ny is life expectancy\n\nx is schooling","0ab01f43":"This notebook I will show you how to write code to create simple linear regression from scratch. \n\nI assume that you have basic knowledge of mathematics in machine learning and how to calculate best linear equation, so I skip mathematics part and do code parts only.\n\nIf you consider this notebook useful, please upvote to encourage me.","b2744f82":"# 2. Create Model","de049b20":"Concatenate X with vector contain only 1","035f96c0":"I will use Schooling as predictor and Life expectancy as label","40bb2c2c":"Calculate best parameter for simple linear regression by formula\n$B=(X^{T}X)^{-1}X^{T}y$"}}