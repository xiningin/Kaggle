{"cell_type":{"7650482d":"code","4c7e1bf3":"code","59653770":"code","3826f3bf":"code","ff5fce49":"code","428d0c96":"code","b33c559f":"code","3425c802":"code","1ca1e10c":"code","f3842148":"code","bbc0f632":"code","bfe5eb56":"code","beadd0b8":"code","56f46714":"code","64dbeb11":"code","558e7410":"code","987e874a":"code","0d371f9f":"code","16decf96":"code","ddf242bf":"code","19e5fcbd":"code","911f4659":"code","e9bab38f":"code","999bf714":"code","8e6fb0f6":"code","f1e5130a":"code","8f3d34f0":"code","e505529a":"code","5fd027df":"markdown","1c3a4842":"markdown","f51ed2c3":"markdown","23c6dbfc":"markdown","1bc83a1d":"markdown","c8f12e5c":"markdown","6dfe5859":"markdown","7e2fcd71":"markdown","2f52468a":"markdown","2747541f":"markdown"},"source":{"7650482d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c7e1bf3":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns","59653770":"match20 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nmatch18_19 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\ntrain_data= pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')","3826f3bf":"train_data.head()","ff5fce49":"match20.head()","428d0c96":"match18_19.head()","b33c559f":"train_data['batting_points'] = train_data['Runs'] + train_data['Boundaries'] + 2 * train_data['Six'] + 8 * train_data['Fifty'] + 16 * train_data['Hundred'] - 2 * train_data['Duck']\ntrain_data['bowling_points'] = 25 * train_data['Wickets'] + 8 * train_data['4W_Haul'] + 16 * train_data['5W_Haul'] + 8 * train_data['Maidens']\ntrain_data['total'] = train_data['batting_points'] + train_data['bowling_points']","3425c802":"train_data","1ca1e10c":"train_data.drop(train_data[train_data['Id'].isnull() == True].index, inplace = True) ","f3842148":"train_data.shape","bbc0f632":"plt.figure(figsize=(15,10))\nsns.scatterplot(x='Batting_Points',y='Bowling_Points',data=train_data)","bfe5eb56":"x=np.array(train_data.iloc[:,1:-1])\ny=np.array(train_data.iloc[:,-1])","beadd0b8":"x","56f46714":"y","64dbeb11":"train_x,test_x,train_y,test_y = train_test_split(x,y,test_size=0.2,random_state=0)","558e7410":"sc = StandardScaler()\nsc.fit(train_x)\ntrain_x = sc.transform(train_x)\ntest_x = sc.transform(test_x)","987e874a":"lr = LinearRegression()\nlr.fit(train_x,train_y)","0d371f9f":"test_x[0,:]","16decf96":"lr.predict(test_x)","ddf242bf":"test_y","19e5fcbd":"lr.score(test_x,test_y)","911f4659":"y_pred = lr.predict(test_x)","e9bab38f":"y_pred","999bf714":"test_y","8e6fb0f6":"mse= mean_squared_error(y_pred,test_y)","f1e5130a":"mse","8f3d34f0":"rmse = np.sqrt(mse)","e505529a":"rmse","5fd027df":"**Split the data**","1c3a4842":"**Data Cleaning**","f51ed2c3":"## Prediction","23c6dbfc":"**Import the libraries**","1bc83a1d":"**Data Visualization**","c8f12e5c":"**Feature Scaling**","6dfe5859":"## Data Understanding","7e2fcd71":"## Model Evaluation","2f52468a":"## Linear Regression Model","2747541f":"**Root Mean Square**"}}