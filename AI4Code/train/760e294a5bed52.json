{"cell_type":{"8dc38279":"code","fdd5273d":"code","535b7866":"code","c45a7f9d":"code","a776005c":"code","ed7b5136":"code","62ade008":"code","98fd4319":"code","417d7603":"code","d8a7fd68":"code","e7ea9c15":"code","c4c6a4d9":"code","8891bf06":"code","2df8d260":"code","59afce7e":"code","7e1d1a39":"code","225c364d":"code","2ab73f8e":"code","05f4f7e7":"code","d61a5786":"markdown","d4ab606d":"markdown","94ac78aa":"markdown","5c5dfb36":"markdown","16604f34":"markdown","3edd1ecb":"markdown","e702b3ed":"markdown","df1cf71c":"markdown","ab26c34d":"markdown","c4e8f384":"markdown","1d68e776":"markdown","5e70ccc6":"markdown","4f8ef102":"markdown","eeab2d99":"markdown","e63b1b38":"markdown","0653164d":"markdown"},"source":{"8dc38279":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.metrics import accuracy_score\nnp.random.seed(42)\n\nfrom matplotlib import style\nstyle.use('fivethirtyeight')","fdd5273d":"data_dir = '..\/input\/gtsrb-german-traffic-sign'\ntrain_path = '..\/input\/gtsrb-german-traffic-sign\/Train'\ntest_path = '..\/input\/gtsrb-german-traffic-sign\/'\n\n# Resizing the images to 30x30x3\nIMG_HEIGHT = 30\nIMG_WIDTH = 30\nchannels = 3","535b7866":"NUM_CATEGORIES = len(os.listdir(train_path))\nNUM_CATEGORIES","c45a7f9d":"# Label Overview\nclasses = { 0:'Speed limit (20km\/h)',\n            1:'Speed limit (30km\/h)', \n            2:'Speed limit (50km\/h)', \n            3:'Speed limit (60km\/h)', \n            4:'Speed limit (70km\/h)', \n            5:'Speed limit (80km\/h)', \n            6:'End of speed limit (80km\/h)', \n            7:'Speed limit (100km\/h)', \n            8:'Speed limit (120km\/h)', \n            9:'No passing', \n            10:'No passing veh over 3.5 tons', \n            11:'Right-of-way at intersection', \n            12:'Priority road', \n            13:'Yield', \n            14:'Stop', \n            15:'No vehicles', \n            16:'Veh > 3.5 tons prohibited', \n            17:'No entry', \n            18:'General caution', \n            19:'Dangerous curve left', \n            20:'Dangerous curve right', \n            21:'Double curve', \n            22:'Bumpy road', \n            23:'Slippery road', \n            24:'Road narrows on the right', \n            25:'Road work', \n            26:'Traffic signals', \n            27:'Pedestrians', \n            28:'Children crossing', \n            29:'Bicycles crossing', \n            30:'Beware of ice\/snow',\n            31:'Wild animals crossing', \n            32:'End speed + passing limits', \n            33:'Turn right ahead', \n            34:'Turn left ahead', \n            35:'Ahead only', \n            36:'Go straight or right', \n            37:'Go straight or left', \n            38:'Keep right', \n            39:'Keep left', \n            40:'Roundabout mandatory', \n            41:'End of no passing', \n            42:'End no passing veh > 3.5 tons' }","a776005c":"folders = os.listdir(train_path)\n\ntrain_number = []\nclass_num = []\n\nfor folder in folders:\n    train_files = os.listdir(train_path + '\/' + folder)\n    train_number.append(len(train_files))\n    class_num.append(classes[int(folder)])\n    \n# Sorting the dataset on the basis of number of images in each class\nzipped_lists = zip(train_number, class_num)\nsorted_pairs = sorted(zipped_lists)\ntuples = zip(*sorted_pairs)\ntrain_number, class_num = [ list(tuple) for tuple in  tuples]\n\n# Plotting the number of images in each class\nplt.figure(figsize=(21,10))  \nplt.bar(class_num, train_number)\nplt.xticks(class_num, rotation='vertical')\nplt.show()","ed7b5136":"# Visualizing 25 random images from test data\nimport random\nfrom matplotlib.image import imread\n\ntest = pd.read_csv(data_dir + '\/Test.csv')\nimgs = test[\"Path\"].values\n\nplt.figure(figsize=(25,25))\n\nfor i in range(1,26):\n    plt.subplot(5,5,i)\n    random_img_path = data_dir + '\/' + random.choice(imgs)\n    rand_img = imread(random_img_path)\n    plt.imshow(rand_img)\n    plt.grid(b=None)\n    plt.xlabel(rand_img.shape[1], fontsize = 20)#width of image\n    plt.ylabel(rand_img.shape[0], fontsize = 20)#height of image","62ade008":"image_data = []\nimage_labels = []\n\nfor i in range(NUM_CATEGORIES):\n    path = data_dir + '\/Train\/' + str(i)\n    images = os.listdir(path)\n\n    for img in images:\n        try:\n            image = cv2.imread(path + '\/' + img)\n            image_fromarray = Image.fromarray(image, 'RGB')\n            resize_image = image_fromarray.resize((IMG_HEIGHT, IMG_WIDTH))\n            image_data.append(np.array(resize_image))\n            image_labels.append(i)\n        except:\n            print(\"Error in \" + img)\n\n# Changing the list to numpy array\nimage_data = np.array(image_data)\nimage_labels = np.array(image_labels)\n\nprint(image_data.shape, image_labels.shape)","98fd4319":"shuffle_indexes = np.arange(image_data.shape[0])\nnp.random.shuffle(shuffle_indexes)\nimage_data = image_data[shuffle_indexes]\nimage_labels = image_labels[shuffle_indexes]","417d7603":"X_train, X_val, y_train, y_val = train_test_split(image_data, image_labels, test_size=0.3, random_state=42, shuffle=True)\n\nX_train = X_train\/255 \nX_val = X_val\/255\n\nprint(\"X_train.shape\", X_train.shape)\nprint(\"X_valid.shape\", X_val.shape)\nprint(\"y_train.shape\", y_train.shape)\nprint(\"y_valid.shape\", y_val.shape)","d8a7fd68":"y_train = keras.utils.to_categorical(y_train, NUM_CATEGORIES)\ny_val = keras.utils.to_categorical(y_val, NUM_CATEGORIES)\n\nprint(y_train.shape)\nprint(y_val.shape)","e7ea9c15":"model = keras.models.Sequential([    \n    keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(IMG_HEIGHT,IMG_WIDTH,channels)),\n    keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu'),\n    keras.layers.MaxPool2D(pool_size=(2, 2)),\n    keras.layers.BatchNormalization(axis=-1),\n    \n    keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'),\n    keras.layers.Conv2D(filters=128, kernel_size=(3,3), activation='relu'),\n    keras.layers.MaxPool2D(pool_size=(2, 2)),\n    keras.layers.BatchNormalization(axis=-1),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(512, activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(rate=0.5),\n    \n    keras.layers.Dense(43, activation='softmax')\n])","c4c6a4d9":"lr = 0.001\nepochs = 30\n\nopt = Adam(lr=lr, decay=lr \/ (epochs * 0.5))\nmodel.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])","8891bf06":"aug = ImageDataGenerator(\n    rotation_range=10,\n    zoom_range=0.15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.15,\n    horizontal_flip=False,\n    vertical_flip=False,\n    fill_mode=\"nearest\")\n\nhistory = model.fit(aug.flow(X_train, y_train, batch_size=32), epochs=epochs, validation_data=(X_val, y_val))","2df8d260":"pd.DataFrame(history.history).plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1)\nplt.show()","59afce7e":"test = pd.read_csv(data_dir + '\/Test.csv')\n\nlabels = test[\"ClassId\"].values\nimgs = test[\"Path\"].values\n\ndata =[]\n\nfor img in imgs:\n    try:\n        image = cv2.imread(data_dir + '\/' +img)\n        image_fromarray = Image.fromarray(image, 'RGB')\n        resize_image = image_fromarray.resize((IMG_HEIGHT, IMG_WIDTH))\n        data.append(np.array(resize_image))\n    except:\n        print(\"Error in \" + img)\nX_test = np.array(data)\nX_test = X_test\/255\n\npred = model.predict_classes(X_test)\n\n#Accuracy with the test data\nprint('Test Data accuracy: ',accuracy_score(labels, pred)*100)","7e1d1a39":"from sklearn.metrics import confusion_matrix\ncf = confusion_matrix(labels, pred)","225c364d":"import seaborn as sns\ndf_cm = pd.DataFrame(cf, index = classes,  columns = classes)\nplt.figure(figsize = (20,20))\nsns.heatmap(df_cm, annot=True)","2ab73f8e":"from sklearn.metrics import classification_report\n\nprint(classification_report(labels, pred))","05f4f7e7":"plt.figure(figsize = (25, 25))\n\nstart_index = 0\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n    prediction = pred[start_index + i]\n    actual = labels[start_index + i]\n    col = 'g'\n    if prediction != actual:\n        col = 'r'\n    plt.xlabel('Actual={} || Pred={}'.format(actual, prediction), color = col)\n    plt.imshow(X_test[start_index + i])\nplt.show()","d61a5786":"## One hot encoding the labels","d4ab606d":"## Splitting the data into train and validation set","94ac78aa":"## Evaluating the model","5c5dfb36":"## Collecting the Training Data","16604f34":"## Classification report","3edd1ecb":"## Finding Total Classes","e702b3ed":"## Shuffling the training data","df1cf71c":"## Importing Required Libraries","ab26c34d":"## Loading the test data and running the predictions","c4e8f384":"## Visualizing The Dataset","1d68e776":"## Making the model","5e70ccc6":"## Predictions on Test Data","4f8ef102":"## Assigning Path for Dataset","eeab2d99":"## Visualizing the confusion matrix","e63b1b38":"# *Traffic Sign Recognizer - 99% accuracy*","0653164d":"## Augmenting the data and training the model"}}