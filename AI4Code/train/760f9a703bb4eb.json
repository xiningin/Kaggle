{"cell_type":{"26cd184c":"code","4996a3f4":"code","e27c16a6":"code","dbe4e0ed":"code","28f5698c":"code","528388d2":"code","5f422751":"code","274634cf":"code","ee7fcfef":"code","cee9b574":"code","89de8d2b":"code","10bec3bd":"code","85e09fb0":"code","1966f1b1":"code","d1f43fa3":"code","024e07f4":"code","c2f20ce1":"code","c540987a":"code","1b3cb763":"code","da6a98b3":"code","5581d753":"code","861b5b43":"code","282060be":"code","5abb3b02":"code","ecc7acbc":"code","7fb9b044":"code","4edf4bd3":"code","866f50f2":"code","ae73575f":"code","808bf21f":"code","358880a6":"code","dbf75da7":"code","f5a71981":"code","6ade20d0":"code","d2a3e4db":"code","6c6913ed":"code","259865c9":"code","dad9cab7":"code","5c0c9b2b":"code","c4121598":"code","ef1cab11":"code","0b511d6a":"code","2044de45":"code","a3954eb3":"code","e4e3ce7c":"markdown","d10ce57a":"markdown","6e78f2e7":"markdown","0bc2d3db":"markdown","eb35edf0":"markdown","4c8c7a6f":"markdown","4d65dee5":"markdown","bc1320fd":"markdown","71e47f69":"markdown","d9a5c935":"markdown"},"source":{"26cd184c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4996a3f4":"train_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","e27c16a6":"train_df.shape","dbe4e0ed":"test_df.shape","28f5698c":"import seaborn as sns\nimport matplotlib.pyplot as plt","528388d2":"train_df.head()","5f422751":"sns.countplot(x='label', data=train_df)","274634cf":"train_df.isnull().any().describe()","ee7fcfef":"X = train_df.drop('label', axis=1)\ny = train_df['label']","cee9b574":"X = X.values.reshape(-1,28, 28, 1)","89de8d2b":"X.shape","10bec3bd":"plt.imshow(X[0][:,:,0])","85e09fb0":"y[0]","1966f1b1":"X.max()","d1f43fa3":"X = X \/ 255\ntest_df = test_df \/ 255","024e07f4":"test_df = test_df.values.reshape(-1, 28, 28, 1)","c2f20ce1":"plt.imshow(test_df[0][:,:,0])","c540987a":"from sklearn.model_selection import train_test_split","1b3cb763":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","da6a98b3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dropout, Dense, MaxPool2D, Flatten","5581d753":"from tensorflow.keras.utils import to_categorical","861b5b43":"y_cat_train = to_categorical(y_train, 10)\ny_cat_test = to_categorical(y_test, 10)","282060be":"from tensorflow.keras.layers import BatchNormalization","5abb3b02":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), input_shape=(28,28,1), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(units=10, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","ecc7acbc":"model.summary()","7fb9b044":" from tensorflow.keras.callbacks import EarlyStopping","4edf4bd3":"early_stop = EarlyStopping(monitor='val_loss', patience=1)","866f50f2":"y_cat_train.shape","ae73575f":"model.fit(X_train, y_cat_train, epochs=15, batch_size=32, callbacks=[early_stop])","808bf21f":"y_test.shape","358880a6":"X_test.shape","dbf75da7":"predict_classes = model.predict_classes(X_test)","f5a71981":"predict_classes.shape","6ade20d0":"from sklearn.metrics import accuracy_score, classification_report","d2a3e4db":"accuracy_score(y_test, predict_classes)","6c6913ed":"print(classification_report(y_test, predict_classes))","259865c9":"test_df.shape","dad9cab7":"predict_classes.shape","5c0c9b2b":"sample_submission.tail()","c4121598":"test_df_predict = model.predict_classes(test_df)","ef1cab11":"test_df_predict.shape","0b511d6a":"test_predict = pd.Series(test_df_predict, name='Label')","2044de45":"submission = pd.concat([pd.Series(range(1, 28001), name='ImageId'), test_predict], axis=1)","a3954eb3":"submission.to_csv('testlabels.csv', index=False)","e4e3ce7c":"#### **We are using TensorFlow DL library for this problem.**","d10ce57a":"#### **First Image from the training dataset. It should be label 1. Let's check it.**","6e78f2e7":"### **Check the training dataset has null values or not**","0bc2d3db":"### **Split the dataset into train and test**","eb35edf0":"#### **The data are distributed equally in all the classes. There is no class imbalance problem in this dataset.**","4c8c7a6f":"### **Reshape the dataset into proper format**","4d65dee5":"### **Check the shape of training and test datasets**","bc1320fd":"### **Import Visualization tools**","71e47f69":"> ### **Read the dataset**","d9a5c935":"### **Perform the normalization in the dataset to keep the values between 0 and 1**"}}