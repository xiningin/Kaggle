{"cell_type":{"98303237":"code","b50ac9e5":"code","846a6df6":"code","bd2ab22e":"code","85262448":"code","87566afe":"code","2ab47683":"code","ee25a533":"code","55603353":"code","08a470a7":"code","1d290dab":"code","76c3be75":"code","9ac5fc84":"code","cc638c2f":"code","309bcbf0":"code","7e67121c":"code","b7c57fd5":"code","30260789":"code","9b1bcd71":"code","881c3df1":"code","8b77521e":"code","291cf60c":"code","fd5fb647":"code","7a38b5ec":"code","cf836a6e":"code","a297efb3":"code","dd9faca7":"markdown","78c55b14":"markdown","6aae9fd4":"markdown"},"source":{"98303237":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b50ac9e5":"import numpy as np\nimport pandas as pd\nimport keras\nnp.random.seed(2)","846a6df6":"data=pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","bd2ab22e":"data.head()","85262448":"from sklearn.preprocessing import StandardScaler\ndata['normal']=StandardScaler().fit_transform(data['Amount'].values.reshape(-1,1))\ndata.drop(\"Amount\",axis=1,inplace=True)","87566afe":"data.head()","2ab47683":"data.info()","ee25a533":"x=data.iloc[:,data.columns!='Class']\ny=data.iloc[:,data.columns=='Class']\nx.shape,y.shape","55603353":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)","08a470a7":"from keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.layers import Dropout","1d290dab":"model=Sequential([Dense(units=16,input_dim=30,activation=\"relu\"),\n                 Dense(units=24,activation=\"relu\"),\n                 Dropout(0.5),\n                 Dense(units=20,activation=\"relu\"),\n                 Dense(units=24,activation=\"relu\"),\n                 Dense(1,activation=\"sigmoid\")])","76c3be75":"model.summary()","9ac5fc84":"model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\nmodel.fit(x_train,y_train,epochs=5)","cc638c2f":"scores=model.evaluate(x_test,y_test)","309bcbf0":"print(scores)","7e67121c":"from sklearn.metrics import confusion_matrix\ny_pred=model.predict(x_test)\ny_test=pd.DataFrame(y_test)\ncnf=confusion_matrix(y_test,y_pred.round())\nprint(cnf)","b7c57fd5":"fraudindices=np.array(data[data.Class==1].index)","30260789":"print(len(fraudindices))\nnonfraudindices=data[data.Class==0].index","9b1bcd71":"fraudnumbers=np.random.choice(nonfraudindices,492,replace=False)\nprint(len(fraudnumbers))\nundersampleindices=np.concatenate([fraudindices,fraudnumbers]) #both are arrays\n#finding sample numbers in nonfraudindices and addding same size of both nonfraud and fraud indices \nprint(len(undersampleindices))","881c3df1":"undersampledata=data.iloc[undersampleindices,:]\n#dividing data into required and non reuquired columns of dataframe\nx_under=undersampledata.iloc[:,undersampledata.columns!=\"Class\"]\ny_under=undersampledata.iloc[:,undersampledata.columns==\"Class\"]","8b77521e":"xtrain,xtest,ytrain,ytest=train_test_split(x_under,y_under,random_state=0,test_size=0.3)\nmodel.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\nmodel.fit(xtrain,ytrain,epochs=5)","291cf60c":"y_pred=model.predict(xtest)\ny_expected=pd.DataFrame(ytest)\ncnf=confusion_matrix(y_pred.round(),y_expected)\nprint(cnf)","fd5fb647":"from imblearn.over_sampling import SMOTE","7a38b5ec":"xresample,yresample=SMOTE().fit_sample(x,y.values.ravel())\n#fitting through smte for over sampling","cf836a6e":"xtrain,xtest,ytrain,ytest=train_test_split(xresample,yresample,random_state=0,test_size=0.3)\nmodel.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\nmodel.fit(xtrain,ytrain,epochs=5)","a297efb3":"y_pred=model.predict(xtest)\ny_expected=pd.DataFrame(ytest)\ncnf=confusion_matrix(y_pred.round(),y_expected)\nprint(cnf)","dd9faca7":"SMOTE","78c55b14":"undersampling","6aae9fd4":"**without sampling **"}}