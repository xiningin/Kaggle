{"cell_type":{"e02bc024":"code","1faed229":"code","148e7347":"code","61c8b11c":"code","9c7c72c8":"code","fa90dbb6":"code","43b8aa47":"code","19bcb70d":"code","50f36d07":"code","5eec4033":"code","3c4c95ef":"code","7079bf14":"code","8f9da373":"code","eeb4fd02":"code","1124fbf8":"code","6f8a386b":"markdown","2bc8a86a":"markdown","97bed95c":"markdown","eaf316ee":"markdown","95c1761f":"markdown","f9e3c32d":"markdown","8193b413":"markdown","b7a98340":"markdown","2b6658f3":"markdown","42067759":"markdown"},"source":{"e02bc024":"import numpy as np\nimport cv2\nimport os \nimport pandas as pd\nfrom random import sample\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scikitplot.metrics import plot_confusion_matrix as plt_con_mat\n\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, Dropout, MaxPooling2D, Flatten\nfrom keras.utils import plot_model","1faed229":"path = \"..\/input\/ocular-disease-recognition-odir5k\"\ndf = pd.read_csv(os.path.join(path, \"full_df.csv\"))\ndf.head()","148e7347":"file_names = []\nlabels = []\n\nfor text, label, file_name in zip(df[\"Left-Diagnostic Keywords\"], df[\"C\"], df[\"Left-Fundus\"]):\n    \n    if((\"cataract\" in text) and (label == 1)):\n        file_names.append(file_name)\n        labels.append(1)\n    \n    elif((\"normal fundus\" in text) and (label == 0)):\n        file_names.append(file_name)\n        labels.append(0)\n        \nfor text, label, file_name in zip(df[\"Right-Diagnostic Keywords\"], df[\"C\"], df[\"Right-Fundus\"]):\n    \n    if((\"cataract\" in text) and (label == 1)):\n        file_names.append(file_name)\n        labels.append(1)\n    \n    elif((\"normal fundus\" in text) and (label == 0)):\n        file_names.append(file_name)\n        labels.append(0)\n\nprint(len(file_names), len(labels))","61c8b11c":"plt.bar([0,1], [len([i for i in labels if i == 1]), len([i for i in labels if i == 0])], color = ['r', 'g'])\nplt.xticks([0, 1], ['Cataract', 'Normal'])\nplt.show()","9c7c72c8":"ROW = 224\nCOL = 224","fa90dbb6":"image_data = []\nfor idx, image_name in enumerate(file_names):\n    \n    img = cv2.imread(os.path.join(path,\"preprocessed_images\",image_name))\n    try:\n        img = cv2.resize(img, (ROW, COL))\n        image_data.append(img)\n    except:\n        del labels[idx]\n    \nimage_data = np.array(image_data)\n\nprint(image_data.shape)","43b8aa47":"temp = []\nfor idx, label in enumerate(labels):\n    if label == 0:\n        temp.append(idx)\n\ntemp = sample(temp, len([label for label in labels if label == 1]))\n\nX_data = []\ny_data = []\n\nfor idx in temp:\n    X_data.append(image_data[idx])\n    y_data.append(labels[idx])\n\ntemp = []\nfor idx, label in enumerate(labels):\n    if label == 1:\n        temp.append(idx)\n        \nfor idx in temp:\n    X_data.append(image_data[idx])\n    y_data.append(labels[idx])\n\nX_data = np.array(X_data)\n    \ny_data = np.array(y_data)\ny_data = np.expand_dims(y_data, axis = -1)\ny_data = to_categorical(y_data)\n\nprint(X_data.shape, y_data.shape)","19bcb70d":"X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, shuffle = True, random_state = 1)\n\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","50f36d07":"c = 0\nn = 0\n\ncataract_images = []\nnormal_images = []\n\nfor idx, label in enumerate(y_data):\n\n    if(n <= 5 and np.argmax(label) == 0):\n        normal_images.append(idx)\n        n += 1\n    elif(c <= 5):\n        cataract_images.append(idx)\n        c += 1\n        \n    if(n == 5 and c == 5):\n        break\n        \nfig, ax = plt.subplots(5, 2, figsize = (20, 20))\n\nax[0, 0].title.set_text(\"Cataract\")\nax[0, 1].title.set_text(\"Normal\")\n\nfor i in range(5):\n    \n    ax[i, 0].imshow(X_data[cataract_images[i]])\n    ax[i, 0].axis('off')\n    ax[i, 1].imshow(X_data[normal_images[i]])\n    ax[i, 1].axis('off')\n\nplt.show()","5eec4033":"vgg = VGG19(weights = \"imagenet\", include_top = False, input_shape=(ROW, COL, 3))\nfor layer in vgg.layers:\n    layer.trainable = False","3c4c95ef":"model = Sequential()\nmodel.add(vgg)\nmodel.add(Flatten())\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dense(2,activation = \"softmax\"))\n\nmodel.summary()","7079bf14":"plot_model(model, show_shapes=True, show_layer_names=True)","8f9da373":"model.compile(optimizer = 'adam', \n              loss = 'categorical_crossentropy', \n              metrics=['accuracy', 'Precision', 'Recall'])\n\nhistory = model.fit(X_train, y_train, \n                    validation_data = (X_test, y_test), \n                    epochs = 15,\n                    batch_size = 64)","eeb4fd02":"sns.set()\nfig = plt.figure(0, (12, 4))\n\nax = plt.subplot(1, 2, 1)\nsns.lineplot(history.epoch, history.history['accuracy'], label = 'train')\nsns.lineplot(history.epoch, history.history['val_accuracy'], label = 'validation')\nplt.title('Accuracy')\nplt.tight_layout()\n\nax = plt.subplot(1, 2, 2)\nsns.lineplot(history.epoch, history.history['loss'], label = 'train')\nsns.lineplot(history.epoch, history.history['val_loss'], label = 'validation')\nplt.title('Loss')\nplt.tight_layout()\n\n#plt.savefig('epoch_history.png')\nplt.show()","1124fbf8":"preds = model.predict_classes(X_test)\ny_true = np.argmax(y_test, axis=1)\n\nplt_con_mat(y_true, preds, figsize=(14,14))\nplt.show()","6f8a386b":"### Transfer learning","2bc8a86a":"## CNN model using VGG19","97bed95c":"## Examples of the images","eaf316ee":"In this notebook I have attempted to detect cataracts in an human eye.","95c1761f":"## Model training performance","f9e3c32d":"## Extracting the data into train and test sets.","8193b413":"## Necessary libraries","b7a98340":"## Training the CNN model","2b6658f3":"# Cataract detection ","42067759":"## Loading the data"}}