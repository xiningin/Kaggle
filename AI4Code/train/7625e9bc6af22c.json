{"cell_type":{"6bda5698":"code","0c4369f6":"code","b4f752b1":"code","c46c1b77":"code","6ce7ef9f":"code","d6e00f37":"code","cd0bebca":"code","101a4791":"code","18fb2104":"code","1c409c58":"code","7025e896":"code","4d50a900":"code","ca701f17":"code","a1e53988":"code","c0d81f26":"code","8f469ef2":"code","e798e104":"code","7337ceb0":"code","d91aa2ed":"code","c6b208b0":"code","c8edd13a":"code","9e02e77d":"code","35b22e82":"code","a6dfb381":"code","dfdc3251":"code","be53bb7b":"code","b37ee82f":"code","b12c24e4":"code","f42d57e3":"code","ba2e6c8e":"code","23561033":"code","dac9d570":"code","f9a94d14":"markdown","a411e099":"markdown","9dee4223":"markdown","fea5e710":"markdown","f9947aaa":"markdown","fdc6f80c":"markdown","20e9c1e2":"markdown","027f44f3":"markdown","61356e22":"markdown","bd77bb05":"markdown","5bb897e7":"markdown","46f27277":"markdown","9a95c448":"markdown","77797e76":"markdown","6c1d4019":"markdown","885357b5":"markdown","01df1e61":"markdown","88cc5b58":"markdown","66fc52cc":"markdown","efbab413":"markdown","603be380":"markdown","e24f403f":"markdown","87ee540f":"markdown","fbbac0a8":"markdown","81e2c336":"markdown","3a827b56":"markdown","e6386c79":"markdown","9c203adc":"markdown","fdb8670d":"markdown","bcd34839":"markdown","35ce511b":"markdown"},"source":{"6bda5698":"from mpl_toolkits.mplot3d import Axes3D #For Basic ploting\nfrom sklearn.preprocessing import StandardScaler #Preprocessing\nfrom sklearn import preprocessing    # Preprocessing\nfrom sklearn.naive_bayes import GaussianNB #import gaussian naive bayes model\nfrom sklearn.tree import DecisionTreeClassifier #import Decision tree classifier\nfrom sklearn import metrics  #Import scikit-learn metrics module for accuracy calculation\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","0c4369f6":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b4f752b1":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","c46c1b77":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","6ce7ef9f":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","d6e00f37":"nRowsRead = 1000 # specify No. of row. 'None' for whole data\n# test_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/test_mosaic.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test_mosaic.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","cd0bebca":"df1.head(5)","101a4791":"plotPerColumnDistribution(df1, 10, 5)","18fb2104":"plotCorrelationMatrix(df1, 19)","1c409c58":"\n\nplotScatterMatrix(df1, 20, 10)\n\n","7025e896":"nRowsRead = 1000 # specify No. of rows. 'None' for whole file\n# train_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/train_mosaic.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train_mosaic.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","4d50a900":"df2.head(5)","ca701f17":"plotPerColumnDistribution(df2, 10, 5)","a1e53988":"plotCorrelationMatrix(df2, 19)","c0d81f26":"plotScatterMatrix(df2, 20, 10)","8f469ef2":"nRowsRead = None # specify No. of row. 'None' for whole data\n# test_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ntrain_data = pd.read_csv('\/kaggle\/input\/train_mosaic.csv', delimiter=',', nrows = nRowsRead)\ntrain_data.dataframeName = 'train_mosaic.csv'\nnRow, nCol = train_data.shape\nprint(f'There are {nRow} rows and {nCol} columns')","e798e104":"train_data.head()","7337ceb0":"nRowsRead = None # specify No. of row. 'None' for whole data\n# test_mosaic.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ntest_data = pd.read_csv('\/kaggle\/input\/test_mosaic.csv', delimiter=',', nrows = nRowsRead)\ntest_data.dataframeName = 'test_mosaic.csv'\nnRow, nCol = test_data.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d91aa2ed":"test_data.head()","c6b208b0":"train_data['Label'].unique()\ntest_data['Label'].unique()","c8edd13a":"# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\ntrain_data['Label'] = label_encoder.fit_transform(train_data['Label'])\ntest_data['Label'] = label_encoder.fit_transform(test_data['Label'])","9e02e77d":"train_data.head()","35b22e82":"test_data.head()","a6dfb381":"X_train = train_data.drop('Label',axis=1)\nX_test = test_data.drop('Label',axis=1)\ny_train = train_data['Label']\ny_test = test_data['Label']\n","dfdc3251":"X_train.head()","be53bb7b":"y_train.head()","b37ee82f":"X_test.head()","b12c24e4":"y_test.head()","f42d57e3":"# create gaussian naive bayes classifier\ngnb = GaussianNB()\n#Train the model using the training sets\ngnb.fit(X_train,y_train)\n#Predict the response for test dataset\ngnb_pred = gnb.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy : \",metrics.accuracy_score(y_test,gnb_pred))","ba2e6c8e":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier()\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ndt_pred = clf.predict(X_test)\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","23561033":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ndt_pred1 = clf.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, dt_pred1))","dac9d570":"print(\"Naive Bayes Accuracy:\",metrics.accuracy_score(y_test, gnb_pred))\nprint(\"Decision Tree Accuracy:\",metrics.accuracy_score(y_test, dt_pred))","f9a94d14":"Let's take a quick look at what the data looks like:","a411e099":"Now, we ll implement four algorithms Naive Bayes and Decision Tree. Then at the end we ll comapre the result's from all of these algorithms.","9dee4223":"Now you're ready to read in the data and use the plotting functions to visualize the data.","fea5e710":"Correlation matrix:","f9947aaa":"\n\nScatter and density plots:\n","fdc6f80c":"> Training Data:","20e9c1e2":"> Lets check the updated data.","027f44f3":"Let's take a quick look at what the data looks like:","61356e22":"> **Decision Tree**","bd77bb05":"Encode these string classes to numeric to perform further processes. ","5bb897e7":"> **Decion Tree with Max Depth 3**","46f27277":"Correlation matrix:","9a95c448":"### Let's check 2nd file: \/kaggle\/input\/train_mosaic.csv","77797e76":"Let's check the train and test data now. ","6c1d4019":"\n\nScatter and density plots:\n","885357b5":"Let's take a look what data looks like:","01df1e61":"> Testing Data:","88cc5b58":"Now, Identify the classes.","66fc52cc":"Distribution graphs (histogram\/bar graph) of sampled columns:","efbab413":"**Comparison**","603be380":"### Let's check 1st file: \/kaggle\/input\/test_mosaic.csv","e24f403f":"**Above results shows that the Decision Tree gave high accuracy as compared to the Naive bayes.**","87ee540f":"There are 2 csv files in the current version of the dataset:\n","fbbac0a8":"## Introduction\nThis is the data taken from the application layer of the system. Through the network analysis the lables are assigned having three classes. 1) Benign: Legit ,2) DoS slowloris:DoS attack and 3). DoS Hulk: DDoS attack. ","81e2c336":"The next hidden code cells define functions for plotting data.","3a827b56":"Let's take a look what data looks like:","e6386c79":"Distribution graphs (histogram\/bar graph) of sampled columns:","9c203adc":"Next, Split the dataset into train and test. As convention in machine learning, X_train,X_test are used for features and y_train,y_test are used for classes. As our data is already in the form of two files. train_data and test data. We will split it in this way:","fdb8670d":"**> Naive Bayes**","bcd34839":"## Exploratory Analysis : Data Visualization\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made.","35ce511b":"Get the whole data to perform ML techniques. "}}