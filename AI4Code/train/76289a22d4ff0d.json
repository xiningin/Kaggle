{"cell_type":{"354dc3bd":"code","a44fbbf7":"code","1f39d6a6":"code","59dc9c52":"code","1698c54c":"code","43a73742":"code","16536769":"code","258fae67":"code","b38da152":"code","d11a8218":"code","0c84b77d":"code","ad089cd2":"code","ad0d72d6":"code","2400ce8d":"code","4c67ffed":"code","dd869bef":"code","7648bcbb":"code","daaf054b":"code","90e9350e":"code","2170b034":"code","3d43c29a":"code","8ccbc9d0":"code","2558db8a":"code","be38e355":"code","7dd9f69f":"code","82468249":"code","5c901fce":"code","b61783e2":"code","b788aee1":"code","4ebe3785":"code","7e956ecd":"code","fb811ad5":"code","5cec5010":"code","56f9116d":"code","acdd4c59":"code","3f174ce1":"code","9dd59a27":"code","2fb4d437":"code","8fd275d0":"code","196de6e3":"code","51cb6375":"code","18a543f6":"code","61fdb67c":"code","dca0a2d8":"code","e9420a6f":"code","3098ec81":"code","8a1daf2c":"markdown","a3589408":"markdown","8dc8a93a":"markdown","3991f5dc":"markdown","a3af4e45":"markdown","7fa311be":"markdown","4203dd5f":"markdown","6a54a9f5":"markdown","49bb17a6":"markdown","3a3699c5":"markdown","4a3985aa":"markdown","068b7821":"markdown","2f7bfd2e":"markdown","47d481e5":"markdown","a5f53149":"markdown","0fb12659":"markdown","724313d1":"markdown","9aa40c2d":"markdown","fd2a190c":"markdown","70ec5e56":"markdown","b30f12a2":"markdown","d7c1fd27":"markdown","c1c7fbc6":"markdown","e72b2890":"markdown","c4f1644f":"markdown","f7c9b9cd":"markdown","25f6b7b6":"markdown","fd6fa048":"markdown","29d01c78":"markdown","8e544d8e":"markdown","7b7e3d07":"markdown","d9940908":"markdown","08fdb9a5":"markdown"},"source":{"354dc3bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a44fbbf7":"import pandas as pd  #pandas to load datasets\nimport numpy as np  #numpy for linear algebra\nimport matplotlib.pyplot as plt  #matplotlib for making plots\nimport seaborn as sns  #seaborn for making plots","1f39d6a6":"netflix_dataset = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\nnetflix_dataset.head()","59dc9c52":"netflix_dataset.count()","1698c54c":"fill_netflix_dataset = netflix_dataset.fillna(' ')\nfill_netflix_dataset.head()","43a73742":"from sklearn.feature_extraction.text import TfidfVectorizer","16536769":"#Removing stop words \ntf_idf = TfidfVectorizer(stop_words='english')\n\n#Constructing TF-IDF matrix by transforming and fitting the data\ntf_idf_matrix = tf_idf.fit_transform(fill_netflix_dataset['description'])\n\n# shape of tf_idf_matrix\ntf_idf_matrix.shape","258fae67":"from sklearn.metrics.pairwise import linear_kernel","b38da152":"# calculating the Cosine Similarity Score\n\ncosine_sim_score = linear_kernel(tf_idf_matrix, tf_idf_matrix)","d11a8218":"cosine_sim_score[0]","0c84b77d":"netflix_index = netflix_dataset.index\ntitles = netflix_dataset['title']\nindices = pd.Series(netflix_index, index = titles).drop_duplicates()","ad089cd2":"def get_recommendations(title, cosine_sim = cosine_sim_score):\n    \n    idx = indices[title]\n    \n    # Get the pairwise similarity scores of all movies with that movies\n    sim_scores = list(enumerate(cosine_sim_score[idx]))\n    \n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse = True)\n    \n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    \n    # Get the Movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the top 10 Similar movies\n    return netflix_dataset['title'].iloc[movie_indices]","ad0d72d6":"get_recommendations('Mortel')","2400ce8d":"get_recommendations('PK')","4c67ffed":"get_recommendations('Friends')","dd869bef":"fill_netflix_dataset.head(2)","7648bcbb":"def clean_data(x):\n    return str.lower(x.replace(' ', ''))","daaf054b":"features = ['title', 'director', 'cast', 'listed_in', 'description']\nfill_netflix_dataset = fill_netflix_dataset[features]","90e9350e":"for feature in features:\n    fill_netflix_dataset[feature] = fill_netflix_dataset[feature].apply(clean_data)\n    \nfill_netflix_dataset.head(2)","2170b034":"def create_soup(x):\n    return x['title'] + ' ' + x['director'] + ' ' + x['cast'] + ' ' + x['listed_in'] +' ' + x['description']","3d43c29a":"fill_netflix_dataset['soup'] = fill_netflix_dataset.apply(create_soup, axis = 1)","8ccbc9d0":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(fill_netflix_dataset['soup'])\n\ncosine_sim_score2 = cosine_similarity(count_matrix, count_matrix)","2558db8a":"fill_netflix_dataset = fill_netflix_dataset.reset_index()\nindices = pd.Series(fill_netflix_dataset.index, index = fill_netflix_dataset['title'])","be38e355":"def updated_recommendations(title, cosine_sim = cosine_sim_score2):\n    \n    title = title.replace(' ', '').lower()\n    idx = indices[title]\n    \n    # Get the pairwise similarity scores of all movies with that movies\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse = True)\n    \n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    \n    # Get the Movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the top 10 Similar movies\n    return netflix_dataset['title'].iloc[movie_indices]","7dd9f69f":"updated_recommendations('PK')","82468249":"updated_recommendations('The Hook Up Plan')","5c901fce":"updated_recommendations('Kiss me first')","b61783e2":"updated_recommendations('Friends')","b788aee1":"# creating Countplot from Seaborn to show max available content in NETFLIX\n\nsns.set_style('dark')\nax = plt.subplots(figsize = (6, 6))\nplt.title('Countplot for Netflix Movies and TV-Shows', fontweight='bold')\nax = sns.countplot(x = 'type', data=netflix_dataset, palette='Set1')","4ebe3785":"#creating heatmap to analyse least releasing month content\n\n#fetching value of month and year from dataset to plot heatmap\n\n#month is available in 'dateadded' coulumn in dataset (format 'month date, year')\n#For fetching month we doing splitting in 'dateadded' column through whole dataset so we take dateadded coloum out from dataset\n\nnet_date = netflix_dataset[['date_added']].dropna()\n\nnet_date['Year'] = net_date.date_added.apply(lambda y : y.split(' ')[-1])\nnet_date['Month'] = net_date.date_added.apply(lambda y : y.split(' ')[0])\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ndf = net_date.groupby('Year')['Month'].value_counts().unstack().fillna(0)[month_order].T\n\n\nax = plt.subplots(figsize = (15, 6), dpi=100)\nax = sns.heatmap(df, cmap=\"YlGnBu\", linewidths=.1)","7e956ecd":"ax = plt.subplots(figsize = (10, 8))\nsns.set_style('dark')\nplt.title('Netflix Movie and TV-Shows Releasing', fontweight='bold', fontsize=20)\nax = sns.countplot(y = 'release_year', data = netflix_dataset, order = netflix_dataset['release_year'].value_counts().index[0:15], palette='Set2')","fb811ad5":"netflix_movies = netflix_dataset[netflix_dataset['type'] == 'Movie']\nnetflix_movies.head()","5cec5010":"netflix_tvshows = netflix_dataset[netflix_dataset['type'] == 'TV Show']\nnetflix_tvshows.head()","56f9116d":"ax = plt.subplots(figsize = (10, 8))\nsns.set_style('dark')\nplt.title('Netflix Movie Rating', fontweight='bold', fontsize=20)\nax = sns.countplot(x = 'rating', data = netflix_movies, palette = 'Set2', order = netflix_movies['rating'].value_counts().index[0:15])","acdd4c59":"ax = plt.subplots(figsize = (10, 8))\nsns.set_style('dark')\nplt.title('Netflix TV-Shows Rating', fontweight = 'bold', fontsize=20)\nax = sns.countplot(x = 'rating', data = netflix_tvshows, palette='Set2', order = netflix_tvshows['rating'].value_counts().index[0:15])","3f174ce1":"# More movies content creating countries\n\ncountries = {}\nnetflix_movies['country'] = netflix_movies['country'].fillna('Unknown')\n\nlist_countries = list(netflix_movies['country'])\n\nfor i in list_countries:\n    i = list(i.split(','))\n    \n    if len(i) is 1:\n        if i in list(countries.keys()):\n            countries[i] += 1\n        else:\n            countries[i[0]] = 1\n    else:\n        for j in i:\n            if j in list(countries.keys()):\n                countries[j] += 1\n            else:\n                countries[j] = 1","9dd59a27":"final_countries = {}\n\nfor country, no in countries.items():\n    country = country.replace(' ','')\n    \n    if country in list(final_countries.keys()):\n        final_countries[country] += no\n    else:\n        final_countries[country] = no\n        \nfinal_countries = {k : v for k, v in sorted(final_countries.items(), key = lambda item : item[1], reverse = True)}","2fb4d437":"plt.figure(figsize = (15, 15))\nplt.title('Movie Content Creating Countries', fontweight = 'bold', fontsize=15)\n\ny_ver = list(final_countries.keys())\nx_hor = list(final_countries.values())\nsns.barplot( y = y_ver[0:40], x = x_hor[0:40])\nplt.ylabel('Arrival delays (in minutes)')\n","8fd275d0":"# More TV-Shows content creating countries\n\ncountries = {}\nnetflix_tvshows['country'] = netflix_tvshows['country'].fillna('Unknown')\n\nlist_countries = list(netflix_tvshows['country'])\n\nfor i in list_countries:\n    i = list(i.split(','))\n    \n    if len(i) is 1:\n        if i in list(countries.keys()):\n            countries[i] += 1\n        else:\n            countries[i[0]] = 1\n    else:\n        for j in i:\n            if j in list(countries.keys()):\n                countries[j] += 1\n            else:\n                countries[j] = 1","196de6e3":"final_countries = {}\n\nfor country, no in countries.items():\n    country = country.replace(' ','')\n    \n    if country in list(final_countries.keys()):\n        final_countries[country] += no\n    else:\n        final_countries[country] = no\n        \nfinal_countries = {k : v for k, v in sorted(final_countries.items(), key = lambda item : item[1], reverse = True)}","51cb6375":"plt.figure(figsize = (15, 15))\nplt.title('TV-Shows Content Creating Countries', fontweight = 'bold', fontsize=15)\n\ny_ver = list(final_countries.keys())\nx_hor = list(final_countries.values())\nsns.barplot( y = y_ver[0:40], x = x_hor[0:40])\nplt.ylabel('Arrival delays (in minutes)')","18a543f6":"from collections import Counter\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","61fdb67c":"genres = list(netflix_movies['listed_in'])\ngen = []\n\nfor i in genres:\n    i = list(i.split(','))\n    \n    for j in i:\n        gen.append(j.replace(' ',''))\n\ng = Counter(gen)","dca0a2d8":"text = list(set(gen))\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color =  'white').generate(str(text))\n\nplt.title('Movies Genres WordCloud', fontweight = 'bold', fontsize=15)\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.show()","e9420a6f":"genres = list(netflix_tvshows['listed_in'])\ngen = []\n\nfor i in genres:\n    i = list(i.split(','))\n    \n    for j in i:\n        gen.append(j.replace(' ',''))\n\ng=Counter(gen)","3098ec81":"text = list(set(gen))\n\nwordcloud = WordCloud(max_font_size=50, max_words=100, background_color=\"white\").generate(str(text))\nplt.rcParams['figure.figsize'] = (13, 13)\n\nplt.title('TV-Shows Genres WordCloud', fontweight = 'bold', fontsize=15)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","8a1daf2c":"Largest Rating in Movies and TV-Shows is of 'TV-MA', according to the TV Parental Guidelines website, means \u201cThis program is specifically designed to be viewed by adults and therefore may be unsuitable for children under 17.","a3589408":"### **Movies and TV-Shows rating Analysis** ","8dc8a93a":"16151 words describing 6234 movies in the Netflix dataset","3991f5dc":"August and September may be the best time to launch any new content in 2020 with respect to 2019.","a3af4e45":"<p><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAKcAAAEuCAMAAADcAPJ6AAABIFBMVEWxBg\/lCRT\/\/\/+xAACtqaroCRTnAACvBg+zBg+kAADkAACtAADJ0NCztra7w8PNnp5wAADt8vKpAACiAADBBxDTCBLhCRTMCBJ6AADaCBO5BhC2vLyEAADUCBKOAADlAAni5+fNAADU29qbAACIAACwsbGVAADWAADBAAB3AADVAAD99PT0+fj1vb763d7mIinxm53oPUH2xMXufX\/vjY\/40tPHYWPc1NTKl5e5np5mAACrKCu0j4+xfn+ubG2rWFmoQEK6qaq\/MDPraWvqU1fzqKr0tLXnNTrscnXrX2LpSEvMWFrFfH3FbW\/U5eSol5ehJil6IiSLlpbNR0rZr6\/XxMXQjY7FISbLHiPMPUDYqqp+MDKDRUaJVleTdXWbh4imvCZgAAAH80lEQVR4nM3diVoTZxiG4SxMCAlbAqIsmhCUReOuYPcWl9oKpVbBqrWe\/1k0ARSrhPzzvUs7J8B9\/S+SJ5IZCltT4etBo5TrGo9fjcJIJX59lc\/5dXMseK1MFkbWitGr9U0+58ZCNXg1e871LAy92snlnK4WglffWQ8zi5Vvjc7yubAzG3U6Z+PD18aNztEws1j5zuk8Hz7QrG50FhaA4SeNztG5sLPyvcVZP3ICw5e7PmehGh++MmF0js7HnT84ncDw6+nRBDuh4X8yOoHhWz86nfHXzmy57XMWRoHhk2uZ4bwYdqbXMsFZAKIpuZYZTiSaUmuZ4gRqeczohKIpsZYpTkMtc5z6WqY4DbXMceprmeSU1zLHqa9lklNeyyynupZJTnkts5zqWqY5gWhKqWWWs1DQ1jLNKa5l3nkCw691jE5tLROd8VpubRudSDRVhjo3eE5g+NodpzP+2ll7aHRCtex0ArVce+J0AsM\/MjqRaKpdMzqBaKo9djrjw7duG53Q8DeMTmT4W05nPJpaN890XqA6kVo+e3iyE6jl2j3neQK\/VDjztZPtRKLpvtMZr+Xa3cHMLtspiia+U1PLAqeklvlOzfACp6SWFU4gmgbWssAJDT+olhVOZPhBtSxxAsP\/bHQqahlxLg5yCmpZ4wRqec7oFNQy4CwPdvJrWePk17LISa9llROo5adGJz2auksaJzL8dafzXLyWfzE62cPLnORa1jmBaPrV6CTXckPm5Nay0EmtZZ2TW8tCJ7WWlU5mLQud1FpWOpm1LD1PYi1LncRa1jp5tSx1Ih\/BqfGcE0OdvFoWO2m1rHXyoknspNWy2smqZbGTNnzjstbJqmW5k1TLaierluVOpJbvOZ1ANM0ZnVAt3zc6kVq+6zxPSi0bnJRfyDucwPBPjU5KLTucjFpuO5yEWnY4GdFkcRJq2ePEa7l9yeAkfG7Z40SGv+V0wrXsceK1bHIit3c+czqRm73aPid0l9+U0Ync5bftPE8kmjpGJ3KX34HTGR8+mzU6oeG3jE5k+B2nE3gYyrrRCd3euW90Is\/E2G0YncCjEZZ\/8zmhRyPsrfqcwPDZ78bzBIYvzhudyPDZbJQZcAK1XLw4anQCr51FoxOp5fjwAed\/MnzkPIHhsyAz5AQeHZjNBg805IzXcnHe6ISGD\/6kDzmBWs7Oxw60fCXijNdycc7oRGo5WzA6kWiKDR90AtEUGz7m9A8fdNqHjzqB4UPRFHRCtRwZPupEoulc4EDDTnMtR53uWg47zbUcP08kmpxOby2Huu7Iaa3luNNby4DTWsuIE6jl3MMDTiia8g6POJ3RBDmNtYw4nbUMOY3DY05fLfecV8JOYy1jTqRC89Uy5lx47hoec5b\/qIWZ+WoZdE6+aIWhuWoZdC6+rMQP1Oic6Mb\/OGKuWkadpWfx79A80QQ7keFzfSXQ2b0a\/0V3jtdO2FnajB9ojuFx5z4wfHot487SsmP4nnMCdO7EDzS9lgnOLWD45GgiOEvAR1uSh2c4DwzDM5wdIJpSh2c4S6\/i0ZRayxTn9fiBptYyxVnS13J5keG8G4cm1jLHeR84UIez\/uGvSLXiP0LThgedi8fOe+paJjlvAMMnfSWSs3Qz\/CM07W0Sy3lLPDzLeQ0YPqWWWc7S7fjwKdFEcz6OH2hKNNGc4uFB5yd\/JvJRGJoyPM\/5RDp8neZEoml4LROdD+PDD6\/l+iTNeUdZy0SntJaZTqCWhw7PdAK1PHR4zNn895\/ZFdYy1QnU8rC3SVSnsJapTmEt95yLPKeulrlOXTRxnbpaJjuBWj57eLJTNjzZKatltlNVy2ynqpbpTqCWzxqe7hTVMuSsnuIUDc93amqZ79TUct9ZDzvHTnFqalnglNRyzzlJdiK17HRKahl0jp\/mVNSywqmIJoVTUcsSp6CWJU7B8BKnoJY1Tn4ta5z8aGpqnPRaxpwzg5z0WhY56cOrnOxaVjnZtaxyljJuLcuc5FqWOcm1LHOSa7k5rnJya1nnRKLpyy+lc1JruSp0MmtZ6WTWstLJrGWpE\/j46ue13CtInZMYTVonr5a1TqCW56jOlbOdvOHFTloti520WhY7af+3rHayavnQ2dQ5WbWMOjtDnFAtO52kWpY7SbUsdyK1\/MnbJL0TuMtv3ulE7vI7qWW9k3OXn8FJucuv7xzXOtuMt0kGJ3CX38nwDucUYfgjZ\/Sp22nOBqGWQedqirMUfybGxw+sW5zAoxGKTif0TIxPnGNiJ\/JohOPhPU7g0QhFjrOd5ESeiXE0fHUGcl5Kc5Z24wd69DbJ5ESiyXmeyDMxDmvZ5QSiad7p3AKjyeUs\/YlFk835ABsedF5upDrBWrY5S6+h4UHnUrrzDVTLqLOb7GwA0bSAOi+kO4EHifWGB50b6UyslqszHcQ5ncPZXUOiyefEankl4KweXgvlcvl5Hud+pVJptbLQB1zSnB9dh1dzZvXy0sb09Nu\/3u3lcZYOdjdfbC+sry+v1WqV46sPH87MZgc7T2z1PuzQ9ff7vZGJyfFOO8e\/8y+vbqPd2drffzl1sLP7bHu25z5BD4Be\/Nz5UVefubQ0\/bwvu7KIwoa5++yXD3Z2X7xaXz4+6c\/E2bGzzzs8u7HVI93I4rjUdoa5T958\/UF8BM7KfWe5uXLpwvTbd+\/3JiY76S+F2qvb3tqf2tncXl\/rg5c7hXbv7P43ulOuRu+74s1U4x\/rcl+NvrrrGQAAAABJRU5ErkJggg==\" width=\"40\" align = \"middle\"><\/p>\n\n### **<h1 align =\"middle\"><b> NETFLIX RECOMMENDER SYSTEM <\/b><\/h1>**","7fa311be":"### **Term Frequency(TF) and Inverse Document Frequency(IDF)**","4203dd5f":"### **Which content is more Available on NETFLIX ?** MOVIES or TV-SHOWS","6a54a9f5":"### **Cosine Similarity**\n\nCosine Similarity is used to calculate the numeric value that denotes the similarity between the two movies.\n\n![download.png](attachment:download.png)\n\n\nNow, we have used the TF-IDF Vectorizer, calculating the Dot product will directly give us the Cosine Similarity Score. Therefore, we will use **sklearn's linear_kernel** instead of cosine similarity since it calculate it much faster.","49bb17a6":"### **Movies and TV-Shows content creating Countries** ","3a3699c5":"[![forthebadge](https:\/\/forthebadge.com\/images\/badges\/built-with-swag.svg)](https:\/\/forthebadge.com)","4a3985aa":"### **Recommender systems try to automate aspects of a completely different information discovery model where people try to find other people with similar tastes and then ask them to suggest new things.**","068b7821":"**Term Frequency**, which measures how frequently a term occurs in a document. Since every document is different in length, it is possible that a term would appear much more times in long documents than shorter ones. Thus, the term frequency is often divided by the document length (aka. the total number of terms in the document) as a way of normalization:\n\n**TF(t) = (Number of times term t appears in a document) \/ (Total number of terms in the document)**\n\n\n**Inverse Document Frequency**, which measures how important a term is. While computing TF, all terms are considered equally important. However, it is known that certain terms, such as \"is\", \"of\", and \"that\", may appear a lot of times but have little importance. Thus we need to weigh down the frequent terms while scaling up the rare ones, by computing the following:\n\n**IDF(t) = log_e(Total number of documents \/ Number of documents with term t in it)**\n\n**TF-IDF** is used mainly because, Suppose we search for \"the fundamental of DataScience\" on Google. It is certain that \"the\" will occur more frequently than \"DataScience\" but the relative importance of \"DataScience\" is higher than \"the\" search query point of view.\n","2f7bfd2e":"United State is the most Movie conent creating country.","47d481e5":"# **<h1 align =\"middle\"><b> Netflix Recommender, Netflix Exploratory Data Analysis <\/b><\/h1>**","a5f53149":"## <center><u>Content-Based Filtering<\/u><\/center>\n\n\n![NetflixRecommender.jpg](attachment:NetflixRecommender.jpg)","0fb12659":"# ![download.png](attachment:download.png)","724313d1":"### **Dividing Netflix Dataset into two parts Movies and TV-Shows** ","9aa40c2d":"Hence, This plot shows NETFLIX has more **MOVIES** content instead of TV-SHOWS. ","fd2a190c":"Now, we are going to create our updated version of the Recommender function as same as the last one","70ec5e56":"### Netflix, Inc. is an American over-the-top content platform and production company headquartered in Los Gatos, California. Netflix was founded in 1997 by Reed Hastings and Marc Randolph in Scotts Valley, California.\n\n### **The company's primary business is a subscription-based streaming service offering online streaming from a library of films and television series, including those produced in-house.**\n","b30f12a2":"### **<h1 align =\"middle\"><b> Analyzing Datasets through Various PLOTS for Various Information <\/b><\/h1>**","d7c1fd27":"This visualization shows that 2018 is the maximum releasing year for Netflix.","c1c7fbc6":"Now, we have a cosine similarity score matrix for all the movies in our Dataset.","e72b2890":"### **Genres WordClouds for Movies and TV-Shows** ","c4f1644f":"It is seen that the model performs well, but it is not accurate recommendations. This is not of much use to most people as we don't take into considerations very important features such as cast, title, director, and l, which determine the rating and the popularity of a movie.\n\nTherefore, we going to use much more suggestive features than Tagline or titles.\n\nIn the next subblocks, we will build a more sophisticated Recommender System that takes title, description, listed_in, cast, and director into consideration.","f7c9b9cd":"### **Which month is a better option to release new Content in 2020?** \n\nThis question is mainly based on distributors focused and their promotion strategy but at some point, this might be also depending on the no of new content added\/ release in a month. If there is less content added in a month then more audiences going to watch that content and this increases the chances to succeed that content.\n\n**Hence, adding new content in a month or less no new content added\/ release will help the content to be more successful.**","25f6b7b6":"United State is the most TV-Shows conent creating country.","fd6fa048":"### **In which Year Maximum Movies and TV-Shows are released ?** ","29d01c78":"#### **Filling NaN values with empty String ' '**","8e544d8e":"# **<center>Welcome to our first Kernel<\/center>**\n### <center>Please Vote If you like our Kernel and share your Feedback<\/center> <img  src=\"https:\/\/raw.githubusercontent.com\/ABSphreak\/ABSphreak\/master\/gifs\/Hi.gif\" width=\"50px\">","7b7e3d07":"# **<center>Content-Based Recommendation System<\/center>**","d9940908":"Identifying features on which the model is to be filtered","08fdb9a5":"### **A content-based recommender works with data that the user provides, either explicitly (rating) or implicitly (clicking on a link). Based on that data, a user profile is generated, which is then used to make suggestions to the user.**"}}