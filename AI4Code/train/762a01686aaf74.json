{"cell_type":{"002b18a7":"code","2c87ce3f":"code","add21c82":"code","dd74fcd0":"code","43821ad5":"code","872e061e":"code","f6c5b328":"code","eead6a39":"code","0719692f":"code","e245feea":"code","39811a6f":"code","1d3cf632":"code","8628e0fd":"code","bc098e69":"code","c026b6bc":"code","f8565464":"code","b95d5873":"code","2f370f74":"code","68634fd4":"code","052bd3b1":"code","78f093ca":"code","1bddd6fc":"code","03e1d8de":"code","dd08f3a7":"code","1c9d8064":"code","2163b7fb":"code","27ccb3df":"code","126edd49":"code","e2c50680":"code","c7aebc4a":"code","e5391946":"code","16ba5331":"code","81a9a4f0":"code","0a20de54":"code","d7e0f696":"code","a1f43dc5":"code","9cc5bdd9":"code","92a36178":"code","2f469c52":"code","0aaf8a70":"code","ba6a4ab9":"code","0123ebc9":"markdown","e0c45147":"markdown","3ba97cb8":"markdown"},"source":{"002b18a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c87ce3f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\n%matplotlib inline","add21c82":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\nprint(\"Shape of train data is {}\".format(train_data.shape))\nprint(\"Shape of test data is {}\".format(test_data.shape))","dd74fcd0":"data = train_data.copy(deep=True)\ntotal_data = pd.concat([train_data, test_data])\nprint(\"Shape of total data is {}\".format(total_data.shape))\nprint(\"-\"*34)\ntotal_data.head()","43821ad5":"total_data.info()","872e061e":"print(\"Shape of total dataset is {}\".format(total_data.shape))\nprint('-'*40)\ntotal_data.isnull().sum()","f6c5b328":"print(\"Shape of train dataset is {}\".format(total_data.shape))\nprint('-'*40)\ntrain_data.isnull().sum().sort_values(ascending=False)","eead6a39":"# total_data.drop('PassengerId', axis=1)\nfor i in total_data.select_dtypes(include=['object']).columns:\n    print(total_data[i].value_counts())\n    print('-'*40)","0719692f":"total_data['Survived'].value_counts(dropna=False)","e245feea":"train_data.head()","39811a6f":"train_data.drop('PassengerId', axis=1, inplace=True)\n","1d3cf632":"train_data.info()","8628e0fd":"hist_attr = ['Sex', 'Age', 'Parch', 'SibSp', 'Fare', 'Embarked']\ntrain_data[hist_attr].hist(figsize=(15, 6),color='steelblue', edgecolor = 'firebrick', linewidth=1.5, layout=(2,3))","bc098e69":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (11, 4))\n\nsns.countplot(x='Sex', hue='Survived', data=train_data, ax=ax1)\nax1.set_title(\"Count of Survivers by gender\")\nax1.set_xlabel(\"Gender\")\nax1.set_ylabel(\"No.of Passenger\")\nax1.legend(labels=['dead', 'survived'])\n\n\nsns.barplot(x='Sex', y='Survived', data=train_data, ci=None, ax=ax2)\nax2.set_title(\"Number of survivers by gender\")\nax2.set_xlabel(\"No of survivers by gender\")\nax2.set_ylabel(\"Gender\")\nax2.legend(labels=['male', 'female'])","c026b6bc":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(11, 4))\n\nsns.countplot(x='Embarked', hue='Sex', data=train_data, ax=ax1)\nax1.set_title(\"Count of Embarked class by gender\")\nax1.set_xlabel(\"Gnder\")\nax1.set_ylabel(\"count of classes\")\nax1.legend(labels=['male', 'female'])\n\nsns.countplot(x='Embarked', hue='Survived', data=train_data, ax=ax2)\nax2.set_title(\"Count of Embarked class by gender\")\nax2.set_xlabel(\"Gnder\")\nax2.set_ylabel(\"count of classes\")\nax2.legend(labels=['dead', 'Survived'])","f8565464":"train_data['Pclass'].value_counts()","b95d5873":"sns.barplot(x='Pclass', y='Survived', data=train_data)","2f370f74":"train_data.columns","68634fd4":"sns.boxplot(x=\"Pclass\", y=\"Fare\", data=train_data)","052bd3b1":"sns.distplot(train_data['Fare'])","78f093ca":"sns.distplot(train_data[train_data['Survived'] == 1]['Fare'], label = 'Survived')\nsns.distplot(train_data[train_data['Survived'] == 0]['Fare'], label = 'Not Survived')","1bddd6fc":"print(train_data['SibSp'].value_counts())\nprint('-'*20)\nprint(train_data['Parch'].value_counts())","03e1d8de":"train_data.columns","dd08f3a7":"####### ########## ########### ########### ##########","1c9d8064":"train_data.head()","2163b7fb":"total_data['Age'] = total_data['Age'].fillna(total_data['Age'].median())\ntotal_data['Fare'] = total_data['Fare'].fillna(total_data['Fare'].median())","27ccb3df":"# Again, the code for 'Family_Survival' comes from this kernel:\n# https:\/\/www.kaggle.com\/konstantinmasich\/titanic-0-82-0-83\/notebook\n\ntotal_data['Last_Name'] = total_data['Name'].apply(lambda x: str.split(x, ',')[0])\ntotal_data['Fare'].fillna(total_data['Fare'].mean(), inplace = True)\n\ndefault_sr_value = 0.5\ntotal_data['Family_Survival'] = default_sr_value\n\nfor grp, grp_df in total_data[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId', 'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):\n    \n    if (len(grp_df) != 1):  # A Family group is found.\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            \n            if (smax == 1.0):\n                total_data.loc[total_data['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                total_data.loc[total_data['PassengerId'] == passID, 'Family_Survival'] = 0\n\nfor _, grp_df in total_data.groupby('Ticket'):\n    \n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                \n                if (smax == 1.0):\n                    total_data.loc[total_data['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    total_data.loc[total_data['PassengerId'] == passID, 'Family_Survival'] = 0\n                    \n#####################################################################################\ntotal_data['Age_Bin'] = (total_data['Age']\/\/15)*15\ntotal_data['Fare_Bin'] = pd.qcut(total_data['Fare'], 5)\ntotal_data['Relatives'] = total_data['SibSp'] + total_data['Parch']\n#####################################################################################\ntotal_data['Title'] = total_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntotal_data['Title'].replace({'Mlle':'Miss', 'Mme':'Mrs', 'Ms':'Miss'}, inplace = True)\ntotal_data['Title'].replace(['Don', 'Rev', 'Dr', 'Major', 'Lady', 'Sir', 'Col', 'Capt', 'the Countess', 'Jonkheer', 'Dona'],\n                           'Rare Title', inplace = True)    \n\nprint ('Done!')","126edd49":"total_data['Fare_Bin'] = LabelEncoder().fit_transform(total_data['Fare_Bin'])\ntotal_data['Age_Bin'] = LabelEncoder().fit_transform(total_data['Age_Bin'])\ntotal_data['Title_Bin'] = LabelEncoder().fit_transform(total_data['Title'])\ntotal_data['Sex'] = LabelEncoder().fit_transform(total_data['Sex'])\ntotal_data['Embarked'] = LabelEncoder().fit_transform(total_data['Embarked'].astype(str))","e2c50680":"total_data","c7aebc4a":"LabelEncoder().fit_transform(total_data['Embarked'].astype(str))","e5391946":"total_data.drop(['PassengerId', 'Age', 'Fare', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Title', 'Last_Name'], axis = 1, inplace = True)","16ba5331":"total_data.head()","81a9a4f0":"train_df = total_data[:891]\nX_train = train_df.drop('Survived', 1)\ny_train = train_df['Survived']\nprint(\"Shape of X_train is {} and Shape of y_train is {}\".format(X_train.shape, y_train.shape))\nprint(\"-\"*40)\ntest_df = total_data[891:]\nX_test = test_df.copy()\nX_test.drop('Survived', axis = 1, inplace = True)\nprint(\"Shape of test dataset is {}\".format(X_test.shape))","0a20de54":"minmax = MinMaxScaler()\nX_train = minmax.fit_transform(X_train)\nX_test = minmax.transform(X_test)","d7e0f696":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score, cross_val_predict, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score","a1f43dc5":"random_state = 1\n\nclf_list = [GaussianNB(),\n            LogisticRegression(random_state = random_state),\n            SVC(random_state=random_state, probability=True),\n            KNeighborsClassifier(),\n            DecisionTreeClassifier(random_state = random_state),\n            RandomForestClassifier(random_state=random_state),\n            XGBClassifier(random_state=random_state),\n            AdaBoostClassifier(base_estimator=DecisionTreeClassifier(random_state=random_state), random_state=random_state)\n]\n\n\ncv_base_mean, cv_std = [], []\nfor clf in clf_list:\n    cv = cross_val_score(clf, X_train, y_train, scoring='accuracy', cv=5, n_jobs=-1)\n    cv_base_mean.append(cv.mean())\n    cv_std.append(cv.std())\n    \ncv_total = pd.DataFrame({'Algorithm':['Gaussian Naive Bayes', 'Logistic Regression', 'SVC', 'KNN', \n                                     'Decision Tree', 'Random Forest', 'XGB classifier', 'AdaBoost Classifier'],\n                        'CV-Means':cv_base_mean,\n                        'CV_errors':cv_std})","9cc5bdd9":"cv_total","92a36178":"estimators = [('gnb', clf_list[0]), ('lr', clf_list[1]),\n              ('knn', clf_list[2]), ('svc', clf_list[3]),\n              ('dt', clf_list[4]), ('rf', clf_list[5]),\n              ('xgb', clf_list[6]), ('ada', clf_list[7])]\n\nbase_voting_hard = VotingClassifier(estimators = estimators , voting = 'hard')\nbase_voting_soft = VotingClassifier(estimators = estimators , voting = 'soft') \n\ncv_hard = cross_val_score(base_voting_hard, X_train, y_train, cv = 5)\ncv_soft = cross_val_score(base_voting_soft, X_train, y_train, cv = 5)","2f469c52":"print ('Hard Voting: {}%'.format(np.round(cv_hard.mean()*100, 1)))\nprint ('Soft Voting: {}%'.format(np.round(cv_soft.mean()*100, 1)))","0aaf8a70":"base_voting_hard.fit(X_train, y_train)\nbase_voting_soft.fit(X_train, y_train)\n\ny_pred_base_hard = base_voting_hard.predict(X_test)\ny_pred_base_soft = base_voting_hard.predict(X_test)\n","ba6a4ab9":"test_df = pd.DataFrame(pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId'])\n\npd.DataFrame(data = {'PassengerId': test_df.PassengerId, \n                     'Survived': y_pred_base_hard.astype(int)}).to_csv('submission_voting.csv', index = False)\n\npd.DataFrame(data = {'PassengerId': test_df.PassengerId, \n                     'Survived': y_pred_base_soft.astype(int)}).to_csv('submission_Soft_voting.csv', index = False)\n","0123ebc9":"#### Number of passenger of each class","e0c45147":"###### Completely forget test dataset and focus on training dataset","3ba97cb8":"### Skewed"}}