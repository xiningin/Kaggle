{"cell_type":{"feeedbac":"code","925a3998":"code","1d9f93f4":"code","f96e2fde":"code","50d04e11":"code","17d717fd":"code","a5c75ace":"code","d6923c9c":"code","e6c6f379":"code","7d0d5deb":"code","e421d817":"code","e405688d":"code","d098f61b":"code","ebe3ab35":"code","f7b9a7bc":"code","f3af9515":"code","2dc9dc19":"code","e43fc8e3":"code","701591df":"code","dd9c164f":"code","a3a293fb":"code","be259c8b":"code","b8c80b5a":"code","8fad0168":"code","c023dd1d":"code","103c5ba9":"code","89e01a22":"code","cf3d372c":"code","9e551135":"code","1d771be1":"markdown"},"source":{"feeedbac":"import cv2\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nfrom PIL import Image\nimport pandas as pd\nimport seaborn as sns","925a3998":"ls ..\/input\/severstal-steel-defect-detection\/","1d9f93f4":"train_df = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/train.csv\")\nsample_df = pd.read_csv(\"..\/input\/severstal-steel-defect-detection\/sample_submission.csv\")","f96e2fde":"train_df.head()","50d04e11":"sample_df.head()","17d717fd":"kind_class_dict = defaultdict(int)\nclass_dict = defaultdict(int)","a5c75ace":"no_defects_num = 0\ndefects_num = 0\n\nfor col in range(0, len(train_df), 4):\n    img_names = [i.split('_')[0] for i in train_df.iloc[col:col+4, 0].values]\n    if not (img_names[0] == img_names[1] == img_names[2] == img_names[3]):\n        raise ValueError\n    labels = train_df.iloc[col:col+4,1]\n    if labels.isna().all():\n        no_defects_num += 1\n    else:\n        defects_num += 1\n    kind_class_dict[sum(labels.isna() == False)] += 1\n    for idx, label in enumerate(labels.isna().values.tolist()):\n        if label == False:\n            class_dict[idx+1] += 1","d6923c9c":"kind_class_dict ,class_dict","e6c6f379":"fig, ax = plt.subplots()\nsns.barplot(x=list(class_dict.keys()), y=list(class_dict.values()))\nax.set_title('the number of images for each class')\nax.set_xlabel('class')","7d0d5deb":"fig, ax = plt.subplots()\nsns.barplot(x = list(kind_class_dict.keys()), y = list(kind_class_dict.values()))\nax.set_title('Number defects based on image')\nax.set_xlabel(\"number of class \")","e421d817":"train_size_dict = defaultdict(int)\ntrain_path = Path(\"..\/input\/severstal-steel-defect-detection\/train_images\/\")","e405688d":"for img_name in train_path.iterdir():\n    img = Image.open(img_name)\n    train_size_dict[img.size] += 1","d098f61b":"train_size_dict","ebe3ab35":"test_size_dict = defaultdict(int)\ntest_path = Path('..\/input\/severstal-steel-defect-detection\/test_images\/')","f7b9a7bc":"for img in test_path.iterdir():\n    img = Image.open(img_name)\n    test_size_dict[img.size] += 1\n    ","f3af9515":"test_size_dict","2dc9dc19":"train_size_dict","e43fc8e3":"palet = [(249, 192, 12), (0, 185, 241), (114, 0, 218), (249,50,12)]","701591df":"def name_and_mask(start_idx):\n    col = start_idx\n    img_names = [i.split('_')[0] for i in train_df.iloc[col:col+4, 0].values]\n    if not (img_names[0] == img_names[1] == img_names[2] == img_names[3]):\n        raise ValueError\n    \n    labels  = train_df.iloc[col:col+4, 1]\n    mask  = np.zeros((256,1600,4),dtype=np.uint8)\n    for idx, label in enumerate(labels.values):\n        if label is not np.nan:\n            mask_label = np.zeros(1600*256,dtype=np.uint8)\n            label = label.split(\" \")\n            positions = map(int, label[0::2])\n            length = map(int, label[1::2])\n            for pos, le in zip(positions, length):\n                mask_label[pos-1:pos+le-1] = 1\n            mask[:, :, idx] = mask_label.reshape(256,1600,order='F')\n    return img_names[0], mask","dd9c164f":"def show_mask_image(col):\n    name, mask = name_and_mask(col)\n    img = cv2.imread(str(train_path\/name))\n    fig, ax = plt.subplots(figsize=(15,15))\n    for ch in range(4):\n        contours, _ = cv2.findContours(mask[:, :, ch], cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\n        for i in range(0, len(contours)):\n            cv2.polylines(img, contours[i], True, palet[ch], 2)\n    ax.set_title(name)\n    ax.imshow(img)\n    plt.show()","a3a293fb":"fig, ax = plt.subplots(1,4, figsize=(15,5))\nfor i in range(4):\n    ax[i].axis('off')\n    ax[i].imshow(np.ones((50, 50, 3), dtype=np.uint8) * palet[i])\n    ax[i].set_title(\"class color: {}\".format(i+1))\nfig.suptitle(\"each class colors\")\nplt.show()","be259c8b":"idx_no_defect = []\nidx_class_1 = []\nidx_class_2 = []\nidx_class_3 = []\nidx_class_4 = []\nidx_class_trip = []\nidx_class_multi = []\nfor col in range(0, len(train_df), 4):\n    img_names = [str(i).split('_')[0] for i in train_df.iloc[col:col+4, 0]]\n    if not (img_names[0] == img_names[1] == img_names[2] == img_names[3]):\n        raise ValueError\n    labels  = train_df.iloc[col:col+4, 1]\n    if labels.isna().all():\n        idx_no_defect.append(col)\n    elif (labels.isna() == [False, True, True, True]).all():\n        idx_class_1.append(col)\n    elif (labels.isna() == [True, False, True, True]).all():\n        idx_class_2.append(col)\n    elif (labels.isna() == [True, True, False, True]).all():\n        idx_class_3.append(col)\n    elif (labels.isna() == [True, True, True, False]).all():\n        idx_class_4.append(col)\n    elif labels.isna().sum() == 1:\n        idx_class_trip.append(col)\n    else:\n        idx_class_multi.append(col)","b8c80b5a":"for idx in idx_no_defect[:5]:\n    show_mask_image(idx)","8fad0168":"for idx in idx_class_1[:5]:\n    show_mask_image(idx)","c023dd1d":"for idx in idx_class_2[:5]:\n    show_mask_image(idx)","103c5ba9":"for idx in idx_class_3[:5]:\n    show_mask_image(idx)","89e01a22":"for idx in idx_class_4[:5]:\n    show_mask_image(idx)","cf3d372c":"for idx in idx_class_trip[:5]:\n    show_mask_image(idx)","9e551135":"for idx in idx_class_multi[:5]:\n    show_mask_image(idx)","1d771be1":"Notes: \n    code is written based on kernel https:\/\/www.kaggle.com\/go1dfish\/clear-mask-visualization-and-simple-eda for learning purpose."}}