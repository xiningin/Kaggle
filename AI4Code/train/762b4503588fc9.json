{"cell_type":{"0aca6848":"code","c6ffc638":"code","79afa26a":"code","4ce5ed9e":"code","f1ee20fd":"code","22e8716d":"code","afaa3992":"code","c102a7dc":"code","5aa66f6d":"code","4385e157":"code","4e15f815":"code","d0102dd3":"code","8b9ff6d1":"code","dd83df67":"code","c5daff4a":"code","a82677fc":"code","2c704557":"code","881df2ff":"code","62c1249c":"code","6dde2cc9":"code","f16f1ba7":"code","6d21210d":"code","39585807":"code","850bfbcb":"code","ca3ed257":"code","97245ae1":"markdown","cb504b4a":"markdown","05c51041":"markdown","7289038e":"markdown","3c5bd8c0":"markdown","a8529fd3":"markdown","b916293b":"markdown","b1a1fbd7":"markdown","2bcc89dc":"markdown","9514fb05":"markdown","7be0b9ba":"markdown","1d50caf6":"markdown"},"source":{"0aca6848":"! pip install mahotas","c6ffc638":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport mahotas\nfiles=[]\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if '.db' not in filename:\n            files.append(os.path.join(dirname,filename))\n            #print(os.path.join(dirname, filename))","79afa26a":"## total files\nlen(files)","4ce5ed9e":"Parasitized_Dir='..\/input\/cell-images-for-detecting-malaria\/null'\nUninfected_Dir='..\/input\/cell-images-for-detecting-malaria\/null'","f1ee20fd":"pd.DataFrame(files).sample(frac=1).reset_index(drop=True)","22e8716d":"from sklearn.model_selection import train_test_split\nclass DetectMalaria:\n    def __init__(self,para_dir,uninfect_dir):\n        self.parasitized_dir=para_dir\n        self.uninfected_dir=uninfect_dir\n    def dataset(self,ratio,files):\n        Dataset=pd.DataFrame(files,columns=['Path'])\n        Dataset=Dataset.sample(frac=1).reset_index(drop=True)  \n        trainfiles,testfiles=train_test_split(Dataset,test_size=ratio,random_state=None)\n        return(trainfiles,testfiles)\n    ","afaa3992":"x=DetectMalaria(Parasitized_Dir,Uninfected_Dir)","c102a7dc":"train_data,test_data=x.dataset(ratio=0.3,files=files)","5aa66f6d":"def label(df):\n    if 'Uninfected' in df:\n        return 0\n    else:\n        return 1\n\n\ntrain_data['label']=train_data['Path'].apply(label)\ntest_data['label']=test_data['Path'].apply(label)","4385e157":"train_data.iloc[0,0]","4e15f815":"image=cv2.imread('\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/C65P26N_ThinF_IMG_20150818_154050_cell_160.png')\nimage_rgb=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\nplt.imshow(image_rgb)","d0102dd3":"import random","8b9ff6d1":"## plt random 4 pics\nfig,ax=plt.subplots(2,2)\n\nfor i,axes in enumerate(ax.flatten()):\n    image_path=random.choice(train_data['Path'].reset_index(drop=True))\n    image=cv2.imread(image_path)\n    image_rgb=cv2.cvtColor(image,cv2.COLOR_BGR2RGB)\n    axes.imshow(image_rgb)\n    if 'Uninfected' in image_path:\n        axes.set_title('Uninfected')\n    else:\n        axes.set_title('parasite')\nplt.show()","dd83df67":"## read_image\nimage_gray= cv2.cvtColor(image,\n                         cv2.COLOR_BGR2GRAY)\nfeature=cv2.HuMoments(cv2.moments(image_gray)).flatten()\nprint(feature)\nprint(mahotas.features.haralick(image_gray).mean(axis=0))","c5daff4a":"## extract the features\n \ndef fd_hu_moments(image):\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    feature = cv2.HuMoments(cv2.moments(image)).flatten()\n    return feature\ndef fd_haralick(image): \n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    haralick = mahotas.features.haralick(gray).mean(axis=0)\n    return haralick\n \ndef fd_histogram(image, mask=None):\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    hist  = cv2.calcHist([image], [0, 1, 2], None, [256, 256, 256], [0, 256, 0, 256, 0, 256])\n    cv2.normalize(hist, hist)\n    return(hist.flatten())","a82677fc":"feature=[]\ndef dataframe(df):\n        \n    image=cv2.imread(df['Path'])\n    print(df['Path'])\n    global_feature = np.hstack([ fd_haralick(image), fd_hu_moments(image),df['label']]) \n    feature.append(global_feature)\n    #scaler = MinMaxScaler(feature_range=(0, 1))\n    #Normalize The feature vectors...\n    #rescaled_features = scaler.fit_transform(global_features)\n\ntrain_data.apply(dataframe,axis=1)\n","2c704557":"X_train=pd.DataFrame(feature).drop(columns=[20])\ny_train=train_data['label']","881df2ff":"feature=[]\ntest_data.apply(dataframe,axis=1)","62c1249c":"X_test=pd.DataFrame(feature).drop(columns=[20])\ny_test=test_data['label']","6dde2cc9":"from sklearn.preprocessing import StandardScaler","f16f1ba7":"scaler=StandardScaler()\nscaler.fit(X_train)\nX_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)","6d21210d":"from sklearn.svm import SVC\nsvc=SVC()\nsvc.fit(X_train,y_train)\npred=svc.predict(X_test)","39585807":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix","850bfbcb":"## accuracy score\naccuracy_score(y_test,pred)","ca3ed257":"## confusion matrix\nplot_confusion_matrix(svc,X_test,y_test)\nplt.show()\n## here 0 means uninfected and 1 means parasite","97245ae1":"Scaled the data on a common scale","cb504b4a":"we installed the package mehotas inorder to find the harlick features","05c51041":"In parasite images we can see that there are spots while there are ","7289038e":"# What is Image Classification?\n![](https:\/\/lionbridge.ai\/wp-content\/uploads\/2019\/12\/2019-11-11_stock_market_datasets-2.png)\n* Image classification refers to the task of extracting information classes from an image.the images are basically high dimensional in shape and they are unstructured data. In machine-learning, it wants to have datas in structured manner.\n* For that we have to extract features from the image,which would help us in classifying an image into 2 classes i.e here parasite and uninfected.","3c5bd8c0":"**Import Libraries**","a8529fd3":"Create the Dataframe","b916293b":"## what are Hu'Moments?\n> Hu Moments ( or rather Hu moment invariants ) are a set of 7 numbers calculated using central moments that are invariant to image transformations. The first 6 moments have been proved to be invariant to translation, scale, and rotation, and reflection. While the 7th moment\u2019s sign changes for image reflection.\n\nrefer to this link-https:\/\/www.learnopencv.com\/shape-matching-using-hu-moments-c-python\/\n\nthough there is no much use of hu'moments here as most of the shapes are same.still i have used it\n\n## what are harlick features?\n>Haralick Texture is used to quantify an image based on texture.The fundamental concept involved in computing Haralick Texture features is the Gray Level Co-occurrence Matrix or Glcm.\n\nrefer to this link-https:\/\/gogul.dev\/software\/texture-recognition","b1a1fbd7":"Used SVM classifier to train and predict","2bcc89dc":"Set the directory location","9514fb05":"## Feature Extraction\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSIOibjVRc0PvNq4bZKdWAWOhFzzwVDaUyHoQ&usqp=CAU)\n* The feature extraction is an important engineering process, for it is the main information about the raw data, that the algorithm identifies. Selecting the most meaningful features is a crucial step in the process of classification problems because:\n\n    1. It is necessary to find all possible feature subsets that can be formed from the initial set of data\n    2. Every feature is meaningful for at least some of discriminations\n    3. Variations within intraclass and between inter-class is not too much high.\n  \n* The selected set of features should be a small set whose values efficiently discriminate among patterns of different classes, but are similar for patterns within the same class. Features can be classified into two categories:\n\n    1. Local features, which are usually geometric\n    2. Global features, which are usually topological or statistical.\n    \n* Feature Extraction algorithms can be classified into three categories.\n\n    1. **Statistical Features**: The features are derived from statistical distribution of points, resulting in high speed and lower complexity features. There are various statistical features like zoning, characteristic loci and crossing and distance.\n    2. **Global Transformation and Series Expansion Features**: These features are invariant to global deformations like translation and rotation. A continuous signal contains sufficient information to be classified linearly.\n    3. **Geometrical and Topological Features**: These features may represent global and local properties of characters and have high tolerances to distortions and style variations. These topological features may encode some knowledge about the contour of the object or may require some knowledge as to what sort of components make up that object.","7be0b9ba":"Visulaize the image","1d50caf6":"extract the features from the images"}}