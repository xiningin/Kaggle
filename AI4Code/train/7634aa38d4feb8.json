{"cell_type":{"1ab91557":"code","21f9ad85":"code","f867c281":"code","ae90967d":"code","99805fc3":"code","9c44ecd7":"code","7169a70e":"code","b31cbb04":"code","a521c536":"code","beb06061":"code","31254cfe":"code","2407d110":"code","588ebcb0":"code","3d3bb17c":"code","9574be44":"code","72387f09":"code","eb4e260e":"code","da1d6dd4":"code","2fcc3966":"code","c03a36fb":"code","3d373ac5":"code","d99bf598":"code","7fbd3ae1":"code","61a7cf05":"code","fd37af80":"code","b1cf5f51":"markdown","baa63045":"markdown","958b47d2":"markdown","6d5dc16b":"markdown"},"source":{"1ab91557":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21f9ad85":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","f867c281":"train_data.info()","ae90967d":"train_data.groupby([\"Sex\"]).count()","99805fc3":"train_data.columns","9c44ecd7":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Embarked\" ]\npd.get_dummies(train_data[features]).corr()","7169a70e":"#New measure and biased data\n#the idea is identify if there is a correlation between estimated age and death\n# We have a high correlation of \"estimated age\" and death, but it is not good to use because the quantity of \"estimated age\" is not enough\n\ntrain_data['estimated_age'] = 0\ntrain_data.loc[(train_data['Age']*2%2==1)&train_data['Age'].notnull(), ['estimated_age']] = 1\n\nsurvive_ageestim = train_data.loc[train_data['Survived']==1]['estimated_age'].sum()\/train_data['estimated_age'].sum()\nageestim_total = train_data['estimated_age'].sum()\/ len(train_data)\n\nprint(\"% of survivors between estimed ages: \"+\"{:.2%}\".format(survive_ageestim))\nprint(\"% of estimed ages between total: \"+\"{:.2%}\".format(ageestim_total))","b31cbb04":"train_data_age = train_data.loc[train_data['Age'].notnull()]\ntrain_data_age.reset_index(inplace=True)\ntrain_data_age.drop(['index'], axis = 1, inplace = True)\n#test_data_age = test_data.loc[test_data['Age'].notnull()]","a521c536":"from sklearn.linear_model import LinearRegression\n\nX = train_data_age.loc[:,[\"SibSp\", \"Pclass\"]]\ny = train_data_age.loc[:,[\"Age\"]]\n\nmodel = LinearRegression().fit(X,y)\nmodel.score(X,y)","beb06061":"X_test = train_data.loc[train_data['Age'].isnull()][[\"SibSp\", \"Pclass\"]]","31254cfe":"#train_data.loc[train_data['Age'].isnull(),['Age']] = model.predict(X_test)","2407d110":"#Substitute all negatives ages to minimum positive \n#train_data.loc[train_data['Age']<0,['Age']] = min([i  for i in model.predict(X_test) if i>0 ])[0]","588ebcb0":"model.score(train_data_age.loc[:,[\"SibSp\", \"Pclass\"]],y)","3d3bb17c":"from sklearn.cluster import KMeans\nX = train_data_age.loc[:,[\"SibSp\", \"Pclass\", \"Age\"]]\ny = train_data_age.loc[:,[\"Age\"]]\n\nkmeans = KMeans(n_clusters = 6).fit(X,y)\ntrain_data_age['kmeans_label'] = kmeans.labels_\n\n\ndf_kmeans = pd.DataFrame(kmeans.cluster_centers_, columns = [\"SibSp\", \"Pclass\", \"Age_estimated\"])\ndf_kmeans['SibSp'] = df_kmeans['SibSp'].round(2)\ndf_kmeans['Pclass'] = df_kmeans['Pclass'].round(2)\ndf_kmeans['Age_estimated'] = df_kmeans['Age_estimated'].round(2)\ndf_kmeans.sort_values (['Pclass'])","9574be44":"age_label = dict(zip(df_kmeans.index, df_kmeans[\"Age_estimated\"]))","72387f09":"age_label = dict(zip(df_kmeans.index, df_kmeans[\"Age_estimated\"]))\nX_test = train_data.loc[train_data['Age'].isnull()][[\"SibSp\", \"Pclass\"]]\ntrain_data.loc[train_data['Age'].isnull(), ['Age']] = [age_label[i] for i in kmeans.fit_predict(X_test)]\n","eb4e260e":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","da1d6dd4":"features = [\"Pclass\", \"Sex\",  \"Age\",  \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data_age[features])\ny = train_data_age[\"Survived\"]\nkf =  KFold(n_splits =5, shuffle = True, random_state = 168992)\nacc = 0\nerr= 0 \nfor train_index, test_index in kf.split(X,y):\n    print(\"TRAIN:\", train_index.shape, \"TEST:\", test_index.shape)\n    Xtrain = pd.get_dummies(train_data_age.loc[train_index,features])\n    Xtest = pd.get_dummies(train_data_age.loc[test_index,features])\n    Ytrain = y[train_index]\n    Ytest = y[test_index]\n    \n    model = RandomForestClassifier(n_estimators=80, max_depth=5, random_state=1)\n    model.fit(Xtrain, Ytrain)\n    predictions = model.predict(Xtest)\n    \n    err += sum(Ytest != predictions)\n    acc += accuracy_score(Ytest,predictions)\n    \nacc \/= 5\nerr\/=5    ","2fcc3966":"err\/len(Ytest)","c03a36fb":"acc","3d373ac5":"sum(predictions != Ytest)\/len(Ytest)\n","d99bf598":"test_data.info()","7fbd3ae1":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","61a7cf05":"X_test = test_data.loc[test_data['Age'].isnull()][[\"SibSp\", \"Pclass\"]]\ntest_data.loc[test_data['Age'].isnull(), ['Age']] = [age_label[i] for i in kmeans.fit_predict(X_test)]\n\nX_test = pd.get_dummies(test_data[features])\npredictions = model.predict(X_test)","fd37af80":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b1cf5f51":"Applying to test data","baa63045":"Filling age with linear regression of two most correlated variables: Pclass and SibSg","958b47d2":"Using Kmeans to estimate age\n","6d5dc16b":"Data treatment\n- Create a confusion matrix to see the correlation between the variables\n- Fill the age with a Fare correlation\n- Identify biased data\n\nModel Validation\n- Use KFold to compare models"}}