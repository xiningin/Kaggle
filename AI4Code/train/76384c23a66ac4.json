{"cell_type":{"b61e7871":"code","658c1e01":"code","c620a1aa":"code","df7b41c4":"code","981ace65":"code","585a02f1":"code","64c9cf10":"code","87c931b3":"code","c4bf176a":"code","deedf677":"code","ff48dbea":"code","cf76e8c2":"code","5b4c0e86":"code","92e63d8b":"code","15550371":"code","105912f9":"code","218529f2":"code","2d08b88e":"code","680d8bc4":"code","173dde23":"code","7ea2c487":"code","ea72cafd":"code","2a3f3d7c":"code","a4dd93ce":"code","a10cc926":"markdown","4e48bc90":"markdown","470851e8":"markdown","7f2a0b73":"markdown","f8591651":"markdown","d3b5dac2":"markdown","dbcb6057":"markdown","3f230ea4":"markdown"},"source":{"b61e7871":"import numpy as np\nimport pandas as pd\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm","658c1e01":"fashion_mnist_train = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")","c620a1aa":"fashion_mnist_test = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")","df7b41c4":"data_train=fashion_mnist_train.iloc[:,1:785]\/ 255.0\nlabel_train=pd.DataFrame([fashion_mnist_train.iloc[:,0]]).T\ndata_test=fashion_mnist_test.iloc[:,0:784]\/ 255.0","981ace65":"label_train.value_counts()","585a02f1":"categoryMap={0 :'T-shirt\/Top',\n1 :'Trouser',\n2 :'Pullover',\n3 :'Dress',\n4 :'Coat',\n5 :'Sandal',\n6 :'Shirt',\n7 :'Sneaker',\n8 :'Bag',\n9 :'Ankle boot'}\nlabel_train['category']=label_train['label'].map(categoryMap)","64c9cf10":"L = 5\nW = 6\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in range(30):\n    axes[i].imshow(data_train.values.reshape((data_train.shape[0], 28, 28))[i], cmap=plt.get_cmap('gray'))\n    axes[i].set_title(\"class \" + str(label_train['label'][i]) + \": \"+ label_train['category'][i])\n    axes[i].axis('off')\nplt.show()","87c931b3":"print(\"Check for data_train:\\n\",data_train.isnull().any().describe(),\"\\n\\nCheck for label_train:\\n\",\n      label_train.isnull().any().describe(),\"\\n\\nCheck for data_test:\\n\",data_test.isnull().any().describe())","c4bf176a":"l_train=pd.DataFrame([fashion_mnist_train.iloc[:,0]]).T\nX_train, X_val, Y_train, Y_val = train_test_split(data_train, l_train, test_size = 0.25, random_state=255)","deedf677":"np.mean(X_train.values),np.std(X_train.values),np.mean(X_val.values),np.std(X_val.values)","ff48dbea":"X_train=StandardScaler().fit_transform(X_train)\nX_val=StandardScaler().fit_transform(X_val)","cf76e8c2":"np.mean(X_train),np.std(X_train),np.mean(X_val),np.std(X_val)","5b4c0e86":"column_name=['pixel'+str(i) for i in range(1,785)]\nX_train = pd.DataFrame(X_train,columns =column_name)\nX_val = pd.DataFrame(X_val,columns =column_name)","92e63d8b":"pca = PCA(n_components=0.9,copy=True, whiten=False)\nX_train = pca.fit_transform(X_train)\nX_val = pca.transform(X_val)\nprint(pca.explained_variance_ratio_)","15550371":"var=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=3)*100)\nfig = go.Figure(data=go.Scatter(x=list(range(1,len(var)+1)), y=var))\nfig.update_layout(title='PCA Variance Explained',\n                  xaxis_title='# Of Features',\n                  yaxis_title='% Variance Explained')\nfig.show()","105912f9":"pcn=X_train.shape[1]","218529f2":"start_time = time.time()\nknn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train, Y_train.values.ravel())\ny_train_prd = knn.predict(X_train)\ny_val_prd = knn.predict(X_val)\nacc_train_knn=accuracy_score(Y_train,y_train_prd )\nacc_val_knn=accuracy_score(Y_val,y_val_prd)\nprint(\"Accuracy on train set:{:.4f}\\nAccuracy on validation set:{:.4f}\".format(acc_train_knn,acc_val_knn))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","2d08b88e":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on KNN\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","680d8bc4":"start_time = time.time()\nsvc = svm.SVC(decision_function_shape='ovo')\nsvc.fit(X_train, Y_train.values.ravel())\ny_train_prd = svc.predict(X_train)\ny_val_prd = svc.predict(X_val)\nacc_train_svc=accuracy_score(Y_train,y_train_prd )\nacc_val_svc=accuracy_score(Y_val,y_val_prd)\nprint(\"Accuracy on train set: {:.4f}\\nAccuracy on validation set: {:.4f}\".format(acc_train_svc,acc_val_svc))\nprint(\"-----%s seconds-----\" % (time.time() - start_time))","173dde23":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on SVM Classifier\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","7ea2c487":"start_time = time.time()\nrfc = RandomForestClassifier( random_state=0)\nrfc.fit(X_train, Y_train.values.ravel())\ny_train_prd = rfc.predict(X_train)\ny_val_prd = rfc.predict(X_val)\nacc_train_rfc=accuracy_score(Y_train,y_train_prd )\nacc_val_rfc=accuracy_score(Y_val,y_val_prd)\nprint(\"Accuracy on train-set: {:.4f}\\nAccuracy on validation-set: {:.4f}\".format(acc_train_rfc,acc_val_rfc))\nprint(\"-----%s seconds-----\" % (time.time() - start_time))","ea72cafd":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on Random Forest Classifier\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","2a3f3d7c":"acc_combine = {'Model':  ['KNN','SVM Classifier','Random Forest Classifier'],\n               'Accuracy_Tra': [acc_train_knn,acc_train_svc,acc_train_rfc],\n               'Accuracy_Val': [acc_val_knn,acc_val_svc,acc_val_rfc]}","a4dd93ce":"fig = go.Figure(data=[go.Bar(name='train set', x=acc_combine['Model'], y=acc_combine['Accuracy_Tra']\n                     ,text=np.round(acc_combine['Accuracy_Tra'],2),textposition='outside'),\n                     go.Bar(name='validation set', x=acc_combine['Model'], y=acc_combine['Accuracy_Val']\n                     ,text=np.round(acc_combine['Accuracy_Val'],2),textposition='outside')])\nfig.update_layout(barmode='group',title_text='Accuracy Comparison On Different Models',yaxis=dict(title='Accuracy'))\nfig.show()","a10cc926":"<h2>KNN<\/h2>","4e48bc90":"<h2>SVM Classifier<\/h2>","470851e8":"<h2>Random Forest Classifier<\/h2>","7f2a0b73":"<h2>Model Comparision<\/h2>","f8591651":"<h2>Import Libraries and Load the Data<\/h2>","d3b5dac2":"<h2>Feature Engineer<\/h2>","dbcb6057":"<h2>Dimensionality Reduction<\/h2>","3f230ea4":"<h2>Explore the data inside Dataset<\/h2>"}}