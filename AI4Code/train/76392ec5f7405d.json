{"cell_type":{"c932b62d":"code","26303d2f":"code","f5a1445a":"code","f7f39ef8":"code","8ab7bc55":"code","2c45f116":"code","8ed14324":"code","a04c40e0":"code","5e6e8e44":"code","c8e224ba":"code","759b3ece":"code","eb5c8324":"code","fcae9bcb":"code","cbc4f3ac":"code","30395229":"code","efce25c5":"code","b2be4c96":"code","579c2d30":"code","04f12e4d":"code","dc58201d":"markdown","9a32cc08":"markdown","bf8a4ed4":"markdown","ef6a39f7":"markdown","29484e51":"markdown"},"source":{"c932b62d":"import numpy as np \nimport pandas as pd \nfrom numpy import unique\nfrom numpy import where\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import Birch\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nimport matplotlib.pyplot as plt\n","26303d2f":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\n","f5a1445a":"train['Embarked'] = train['Embarked'].fillna('Z')\ntrain['Cabin'] = train['Cabin'].fillna('_')\ntrain.Ticket = train.Ticket.map(lambda x:str(x).split()[0] if len(str(x).split()) > 1 else 'X')\ntrain['CabinType'] = train['Cabin'].apply(lambda x:x[0])\ntrain['Age'].fillna(round(train['Age'].mean()), inplace=True,)\ntrain['Age'] = train['Age'].apply(round)\ntrain['Age'] = train['Age'].astype(np.int8)\ntrain['Fare'].fillna(round(train['Fare'].mean()), inplace=True,)","f7f39ef8":"def label_encoder(c):\n    lc = LabelEncoder()\n    return lc.fit_transform(c)","8ab7bc55":"label_cols = ['Ticket','CabinType','Embarked']\nnumerical_cols_train = ['Pclass','Fare', 'Age','Sex','Survived']","2c45f116":"numerical_train = train[numerical_cols_train]\nlabel_encoded_train = train[label_cols].apply(label_encoder)","8ed14324":"train = pd.concat([numerical_train, label_encoded_train], axis=1)","a04c40e0":"dico={'male':0,'female':1}","5e6e8e44":"train['Sex']=train['Sex'].map(dico)","c8e224ba":"lc = LabelEncoder()\nMinMax=MinMaxScaler()\nfor col in train.columns:\n    train[col] = pd.DataFrame(MinMax.fit_transform(lc.fit_transform(train[col]).reshape(-1,1)),columns=[col])\n","759b3ece":"X=train[['Pclass','Fare', 'Age','Sex','CabinType','Embarked','Survived']]","eb5c8324":"X.head(2)","fcae9bcb":"# Create a k-means clustering model\nkmeans = KMeans(init='random', n_clusters=3, n_init=10)\n\n# Fit the data to the model\nkmeans.fit(X)\n\n# Determine which clusters each data point belongs to:\nclusters =  kmeans.predict(X)","cbc4f3ac":"# Add cluster number to the original data\nX_clustered = pd.DataFrame(X, columns=X.columns, index=X.index)\nX_clustered['cluster'] = clusters\n\nX_clustered.head()","30395229":"# Display parallel coordinates plots, one for each cluster\nplt.figure(figsize=(14,8),dpi=80)\npd.plotting.parallel_coordinates(X_clustered,'cluster', color=('red', 'blue', 'green'))","efce25c5":"# Run a number of tests, for 1, 2, ... num_clusters\nnum_clusters = 20\nkmeans_tests = [KMeans(n_clusters=i, init='random', n_init=10) for i in range(1, num_clusters)]\nscore = [kmeans_tests[i].fit(X).score(X) for i in range(len(kmeans_tests))]\n\n# Plot the curve\nplt.figure(figsize=(12,6),dpi=80)\nplt.plot(range(1, num_clusters),score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.show()","b2be4c96":"# the elbow shows that we may choose around 3 or 4 clusters","579c2d30":"# Create a data frame containing our centroids\ncentroids = pd.DataFrame(kmeans.cluster_centers_, columns=X_clustered.columns)\ncentroids['cluster'] = centroids.index\n","04f12e4d":"plt.figure(figsize=(14,8),dpi=80)\npd.plotting.parallel_coordinates(centroids,'cluster',color=('red', 'blue', 'green'))","dc58201d":"We can see:\n- the cluster 1 (red) is mainly female, old, in class 1\n- the cluster 2 (blue) is mainly male, young, in Class 3, who didn't survive\n- the cluster 3 (green) is mainly female who survived\n\nAt the end of the script, the last picture is clearer","9a32cc08":"<h1> Simple Features engineering <h1>","bf8a4ed4":"<h1> Clustering <h1>","ef6a39f7":"<h1> Determine the optimal number of clusters with the elbow curve : <h1>","29484e51":"https:\/\/openclassrooms.com\/en\/courses\/5869986-perform-an-exploratory-data-analysis\/6177851-carry-out-a-k-means-clustering"}}