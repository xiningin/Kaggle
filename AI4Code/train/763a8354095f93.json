{"cell_type":{"fca8a5e7":"code","6b61351d":"code","7c65ea34":"code","b8a9b564":"code","43e0ab94":"code","9c2976e5":"code","eba5303c":"code","e86d05ef":"code","6062c96f":"code","cd760815":"code","ce68ca6f":"code","44807f4c":"code","6bd0a2a1":"code","331bc728":"code","a0370a89":"code","2de57c33":"code","4f98aba0":"code","d720963f":"code","7a0febd8":"code","de6245f4":"code","5db01f44":"code","29d180dc":"code","43348180":"code","dcc51965":"code","938352bb":"markdown","a326e2c7":"markdown","b204c77d":"markdown","2d7920f7":"markdown","4ecb4b39":"markdown","c87cff27":"markdown","b2b3db7f":"markdown","0a0f63e2":"markdown","7f3e5cf8":"markdown","fdc89bec":"markdown","4a67c80e":"markdown"},"source":{"fca8a5e7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6b61351d":"import time\n\nimport dask.dataframe as dd\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.simplefilter('ignore')","7c65ea34":"%%time\ntrain = pd.read_pickle('..\/input\/ump-train-picklefile\/train.pkl')","b8a9b564":"train.head()","43e0ab94":"train.tail()","9c2976e5":"train.columns.values","eba5303c":"train.shape","e86d05ef":"train.info()","6062c96f":"train_null = train.isnull().sum()\ntrain_null.values","cd760815":"train.describe()","ce68ca6f":"train[\"time_id\"].value_counts().sort_index()","44807f4c":"train[\"investment_id\"].value_counts().sort_index()","6bd0a2a1":"train[\"target\"].nunique()","331bc728":"train[\"target\"]","a0370a89":"fig = plt.figure(figsize=(16, 10))\nsns.displot(train['target'])\nplt.show()","2de57c33":"train[\"target\"].describe().apply(lambda x: format(x, 'f'))","4f98aba0":"simmple_train = train[['row_id','time_id', 'investment_id', 'target']]\nsimmple_train","d720963f":"simmple_train['row_id'].str.contains('1219_')","7a0febd8":"simmple_train[simmple_train['row_id'].str.contains('1219_')]","de6245f4":"simmple_train[simmple_train['row_id'].str.contains('1209_')]","5db01f44":"simmple_train[simmple_train['row_id'].str.contains('1109_')]","29d180dc":"feature_col = [col for col in train.columns if 'f_' in col]\ntrain[feature_col]","43348180":"test = pd.read_csv('..\/input\/ubiquant-market-prediction\/example_test.csv')\ntest","dcc51965":"submission = pd.read_csv('..\/input\/ubiquant-market-prediction\/example_sample_submission.csv')\nsubmission","938352bb":"The target appears to be normally distributed.","a326e2c7":"What I think so far is that\n- Need to find row_id time_id investment_id\n- Need to examine special features of f_.\n- Since this is a [code compensation](https:\/\/www.kaggle.com\/c\/ubiquant-market-prediction\/overview\/code-requirements), need an algorithm to make the process as fast as possible.","b204c77d":"## Let's get started simmple EDA","2d7920f7":"##### I will now perform data preprocessing and exploration.  \n##### I look forward to working with you all for a long time.  \n##### Have a good day. Thank you dear all.","4ecb4b39":"### My notice\n### investment_id is **not continuous too**.","c87cff27":"data columns [f_0:f_299](https:\/\/www.kaggle.com\/c\/ubiquant-market-prediction\/data) are anonymized features generated from market data.  \nso first, I think except for these data. ","b2b3db7f":"As per the theory, check test.csv and submission.csv at the end.","0a0f63e2":"### My notice\n### No missing values","7f3e5cf8":"2022\/01\/22.  \nHello everyone. Nice to meet you. I am going to challenge this competition.  \nI am still a beginner, but  will try my best to achieve good results.  \nI will be challenging myself over the next three months, and upload the my code.  ","fdc89bec":"### My notice\n### time_id is **not continuous**.","4a67c80e":"I use this datasets https:\/\/www.kaggle.com\/columbia2131\/ump-train-picklefile  \nI appreciate this owner."}}