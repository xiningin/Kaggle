{"cell_type":{"b9705ff4":"code","e5b1c3f0":"code","afbbc342":"code","533ce12b":"code","273dfa03":"code","6b336152":"code","75ecc89e":"code","1d948836":"code","a148ff86":"code","34f5c2dc":"code","16af4522":"code","b34f969b":"code","99fc5f64":"code","03e0b76f":"code","30d560bc":"code","d4f18466":"code","d64e8920":"markdown"},"source":{"b9705ff4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5b1c3f0":"df = pd.read_csv(\"..\/input\/plenoi-mail\/MAIL.csv\", header = None)\ndf_test = pd.read_csv(\"..\/input\/plenoi-mail\/MAIL_test.csv\", header = None)\ndf_test.head()","afbbc342":"df.describe()","533ce12b":"df.isnull().any()","273dfa03":"df_clean = df.dropna(axis=0)\n","6b336152":"X = df.drop([0],axis=1).values\ny = df[0].values","75ecc89e":"y","1d948836":"np.unique(y)","a148ff86":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","34f5c2dc":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=0)","16af4522":"X_train.shape","b34f969b":"X_test.shape","99fc5f64":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(X_train)\nX_train_norm = scaler.transform(X_train)\nX_val_norm = scaler.transform(X_val)\nX_test_norm = scaler.transform(X_test)","03e0b76f":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import SelectFdr\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.pipeline import Pipeline\n\n\nparams = {'n_estimators': [50, 100, 150, 200,] } \n\nfrom sklearn.pipeline import Pipeline\nclf = Pipeline([\n\n  ('scaler', MinMaxScaler(feature_range=(0, 1))),\n  ('feature_selection',SelectFdr(f_classif, alpha=0.2)),\n  ('classification', GridSearchCV(RandomForestClassifier(random_state=0),params, cv = 10))\n])\nclf.fit(X_train, y_train)","30d560bc":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=0, solver='liblinear')\nclf.fit(X_train_norm, y_train)\nyp = clf.predict(X_train_norm)\nacc = sum(yp == y_train)\/len(y_train)\n\nprint(\"Train accuracy : \"+str(acc))","d4f18466":"yp = clf.predict(X_test_norm)\nacc = sum(yp == y_test)\/len(y_test)\n\nprint(\"test accuracy : \"+str(acc))","d64e8920":"#### Q2. Create Model to predict the spam mail utilizing feature selection method. (Column 0 = Label)\n<b><font color=red>The difference of Train and Test accuracy must be lower than 10% to get full score.<\/font><\/b>"}}