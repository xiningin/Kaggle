{"cell_type":{"286d1632":"code","6461cc3b":"code","b372b887":"code","f72b8d49":"code","110917e1":"code","236753e5":"code","637b7b4b":"code","cb4a1723":"code","90aec3ef":"code","0fd513ad":"code","bf667a15":"code","742d2f03":"code","7dd75c42":"code","f1d99030":"code","9138513e":"code","84018cc2":"code","64280abd":"code","da2b91fd":"code","70065581":"code","6b689446":"code","c31314a3":"code","025e7649":"code","f0981138":"code","07cee982":"code","e1036f61":"code","1202500c":"code","809c724e":"code","415e8d6f":"code","be078631":"code","54002d69":"code","54c37be3":"code","3b16c582":"code","7c14e6b2":"code","5ef40e92":"code","74181723":"code","7f5be04d":"code","c78b4d56":"code","193bde71":"code","fe6afbad":"code","bda328f2":"code","a7145ddd":"code","960590d6":"code","a153fcae":"code","37ff0cb3":"code","193bee67":"markdown","559335d4":"markdown","21383b61":"markdown","7fe0c72b":"markdown","4d87f8af":"markdown","905faae6":"markdown","fbde9cd5":"markdown","7b93f8e1":"markdown","ff518af5":"markdown","5a72ac6a":"markdown","0bfa011f":"markdown","610b80d6":"markdown","df7d7dfd":"markdown","96fe6961":"markdown","3f19c3c0":"markdown","6fb4a969":"markdown","6b91dac0":"markdown","dc5d53df":"markdown","4f3d3293":"markdown","013f90c1":"markdown","f2373857":"markdown","1433da1d":"markdown","5eb2d032":"markdown","49f9cdc7":"markdown","8361d314":"markdown","99e0566b":"markdown","ad3464b0":"markdown","783d889f":"markdown","567d37c7":"markdown","e6e5875c":"markdown","7ffda8b8":"markdown","8d72dbc5":"markdown","ce200946":"markdown","41348f7f":"markdown","c23a7125":"markdown","1ed8dd9a":"markdown","8a378208":"markdown","f8fc54de":"markdown","c2a8c4d2":"markdown","58cd5ee6":"markdown","321f0d66":"markdown","39c84c9e":"markdown","d7f13116":"markdown"},"source":{"286d1632":"#normal import\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n# visualization import\nimport seaborn as sb\n\n# Disregard warning\nimport warnings \nwarnings.filterwarnings('ignore')","6461cc3b":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","b372b887":"print(train.shape)","f72b8d49":"print(train.info())","110917e1":"train.head()","236753e5":"train.describe()","637b7b4b":"train.isnull().sum()","cb4a1723":"print(test.shape)","90aec3ef":"print(test.info())","0fd513ad":"test.head()","bf667a15":"test.describe()","742d2f03":"test.isnull().sum()","7dd75c42":"# For convinence, copy the data from original\ntrain_survived = train[train['Survived'] == 1]\ntrain_not_survived = train[train['Survived'] == 0]","f1d99030":"train['Survived'].value_counts()","9138513e":"train['Sex'].value_counts()","84018cc2":"train['Pclass'].value_counts()","64280abd":"train_survived.describe()","da2b91fd":"train_not_survived.describe()","70065581":"age_survived = sb.FacetGrid(train, col = 'Survived')\nage_survived.map(plt.hist, 'Age', bins = 50)","6b689446":"fare_survived = sb.FacetGrid(train, col = 'Survived')\nfare_survived.map(plt.hist, 'Fare', bins = 50)","c31314a3":"train_survived['Sex'].value_counts()","025e7649":"train_not_survived['Sex'].value_counts()","f0981138":"sb.barplot(x = 'SibSp', y = 'Survived', ci = None, data = train)","07cee982":"sb.relplot(x = 'SibSp', y = 'PassengerId', hue = 'Survived', data = train)","e1036f61":"sb.barplot(x = 'Parch', y = 'Survived', ci = None, data = train)","1202500c":"sb.relplot(x = 'Parch', y = 'PassengerId', hue = 'Survived', data = train)","809c724e":"sb.barplot(x = 'Pclass', y = 'Survived', ci = None, data = train)","415e8d6f":"sb.barplot(x = 'Embarked', y = 'Survived', ci = None, data = train)","be078631":"# Classification module\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","54002d69":"drop_features = ['Name', 'Ticket', 'Cabin', 'PassengerId']\ntrain_fixed = train.drop(drop_features, axis = 1)\ntest_fixed = test.drop(drop_features, axis = 1)","54c37be3":"train_fixed['Age'].fillna(train['Age'].mean(), inplace = True)\ntest_fixed['Age'].fillna(train['Age'].mean(), inplace = True)","3b16c582":"train_fixed['Sex'] = train_fixed['Sex'].map({'male' : 0, 'female' : 1}).astype(int)\ntest_fixed['Sex'] = test_fixed['Sex'].map({'male' : 0, 'female' : 1}).astype(int)","7c14e6b2":"test_fixed['Fare'].fillna(train['Fare'].mean(), inplace = True)","5ef40e92":"train_fixed['Embarked'].fillna('S', inplace = True)","74181723":"train_fixed['Embarked'] = train_fixed['Embarked'].map({'S' : 0, 'C' : 1, 'Q': 2}).astype(int)\ntest_fixed['Embarked'] = test_fixed['Embarked'].map({'S' : 0, 'C' : 1, 'Q': 2}).astype(int)","7f5be04d":"train_fixed['SibSp'] = train_fixed['SibSp'].map({0 : 0, 1 : 0, 2 : 0, 3 : 0, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1}).astype(int)","c78b4d56":"train_fixed['Parch'] = train_fixed['Parch'].map({1 : 1, 2: 1, 3 : 1, 0 : 0, 4 : 0, 5 : 0, 6 : 0}).astype(int)","193bde71":"X_train = train_fixed.drop('Survived', axis = 1)\nY_train = train_fixed['Survived']\nX_test = test_fixed\nX_test = X_test.dropna()","fe6afbad":"logis_classify = LogisticRegression()\nlogis_classify.fit(X_train, Y_train)\nY_prediction = logis_classify.predict(X_test)\nlogis_score = logis_classify.score(X_train, Y_train)\nprint(\"The score of Logistic Regression is : \" + str(logis_score))","bda328f2":"svm_classify = SVC()\nsvm_classify.fit(X_train, Y_train)\nY_prediction_svm = svm_classify.predict(X_test)\nsvm_score = svm_classify.score(X_train, Y_train)\nprint(\"The score of SVM is : \" + str(svm_score))","a7145ddd":"knn_classify = KNeighborsClassifier(n_neighbors = 2)\nknn_classify.fit(X_train, Y_train)\nY_prediction_knn = knn_classify.predict(X_test)\nknn_score = knn_classify.score(X_train, Y_train)\nprint(\"The score of KNN is : \" + str(knn_score))","960590d6":"tree_classify = DecisionTreeClassifier()\ntree_classify.fit(X_train, Y_train)\nY_prediction_tree = tree_classify.predict(X_test)\ntree_score = tree_classify.score(X_train, Y_train)\nprint(\"The score of Decision tree is : \" + str(tree_score))","a153fcae":"forest_classify = RandomForestClassifier()\nforest_classify.fit(X_train, Y_train)\nY_prediction_forest = forest_classify.predict(X_test)\nforest_score = forest_classify.score(X_train, Y_train)\nprint(\"The score of Random Forest is : \" + str(forest_score))","37ff0cb3":"submission = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \"Survived\": Y_prediction_tree})\nsubmission.to_csv('submission.csv', index=False)","193bee67":"Edit SibSp entry as 0 ~ 3 : 0 and 4 ~ 8 : 1","559335d4":"### 2. Support Vector Machine (SVM)","21383b61":"### 4. Decision tree","7fe0c72b":"## Survived or not by sex","4d87f8af":"Edit Age entry with numerical value (male = 0 \/ female = 1)","905faae6":"## 1. Data Dictionary\n1. Survival : survival or not (0 : No, 1 : Yes)  \n2. pclass : Ticket class  \n3. sex : sex  \n4. Age : age in years  \n5. sibsp : # of sibilings \/ spouses aborad the titanic  \n6. parch : # of parents \/ children aborad the titanic  \n7. ticket : Ticket number  \n8. fare : Passenger fare  \n9. cabin : Cabin number  \n10. embarked : Port of Embarkation (C : Cherborug, Q : Queenstown, S : Southampton)  ","fbde9cd5":"0 : Did not survived \/ 1 : survived  \nAmong 891 data entered in train set, 342 people had been survived and 549 people were not.","7b93f8e1":"Edit Parch entry as 1,2,3 as 1 and others to 0","ff518af5":"# 4. Classify with classifiers","5a72ac6a":"# 3. Data Analyzation","0bfa011f":"## Setup for classification","610b80d6":"## Survived or not by SibSp","df7d7dfd":"# 5. Classification","96fe6961":"# 5. Submission","3f19c3c0":"## 1. Try different classification methods","6fb4a969":"## Survived or not by Parch","6b91dac0":"## Detail data analyze according to 'Survived'","dc5d53df":"# 1. Preparation for data","4f3d3293":"## Survived or not by Pclass","013f90c1":"Among the group who survived, 233 people were female and 109 people are male.  \nAmong the group who were not survived 81 people were female and 468 people are male.  \nTherefore, 74% women among women population survived, 26% in total population.   \n18 % men among men population survived, 12% in total population","f2373857":"### 1. Logistic Regression","1433da1d":"delete unnecessary entries","5eb2d032":"For test dataset, there are 418 data with 11 entries entered (Differ from train set, 'Survived' entry has been omitted). With 418 data entered, there are 86 data are null in Age entry and 1 data is null in Fare and 327 data are null in Cabin entry.","49f9cdc7":"import module for classification","8361d314":"Since most of the Embarked entry is focused on 'S', therefore for null value for Embarked in trainset, replace with 'S'","99e0566b":"### 5. Random Forest","ad3464b0":"## Survived or not by age","783d889f":"### 3. k-Nearest Neighbor(KNN)","567d37c7":"## 2. Train data","e6e5875c":"## 4. More detail info for classification","7ffda8b8":"Since mean of age does not have big difference between 'Survived' and 'not Survived', replace Null age entry with the mean of the age.","8d72dbc5":"Among 891 data entered, for 'Age' entry, 177 data are missing (NaN) and 687 data are missing for 'Cabin' entry and 2 data are missing in 'Embarked'","ce200946":"## 3. Test data","41348f7f":"# 2. Data detail","c23a7125":"- Adopted from : https:\/\/www.kaggle.com\/c\/titanic","1ed8dd9a":"In the train dataset, there are 891 data with 12 entries entered. With 891 data, there are 177 null data in Age entry, 687 null data in Cabin entry and 2 null data in Embarked entry.","8a378208":"import data from csv (both test and train dataset)","f8fc54de":"## Survived or not by Fare","c2a8c4d2":"Since Survived = 1 is people who survived and Survived = 0 is people who did not survive, higher mean of survived means people survived more. Therefore according to bar graph above, people who are in pclass = 1 do survive more and then pclass = 2 the next. Pclass = 3 do have least number of people who survived.","58cd5ee6":"Among 891 data entered, 577 people were male and 314 people were female","321f0d66":"With entry of Embarked, similar with Pclass, higher survived rate means higher number of people who survived. According to the bar graph, C class does have highest and Q and S do have similar rate of people who survived.","39c84c9e":"### import module and data","d7f13116":"Edit Embarked entry with numerical value (S = 0 \/ C = 1 \/ Q = 2)"}}