{"cell_type":{"105e4fae":"code","0d5bcc86":"code","00f2e554":"code","5d85cb1b":"code","2b53719d":"code","db2c130d":"code","1ef61c91":"code","4c07ec57":"code","c32961c0":"code","5020ce78":"code","a59b4504":"code","35992f38":"code","6688ee8d":"markdown"},"source":{"105e4fae":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.image as mpimg\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, Dataset\nimport torchvision.transforms as transforms\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0d5bcc86":"data_dir = '..\/input'\ntrain_dir = data_dir + '\/train\/train\/'\ntest_dir = data_dir + '\/test\/test\/'","00f2e554":"labels = pd.read_csv(\"..\/input\/train.csv\")\nlabels.head()","5d85cb1b":"class ImageData(Dataset):\n    def __init__(self, df, data_dir, transform):\n        super().__init__()\n        self.df = df\n        self.data_dir = data_dir\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):       \n        img_name = self.df.id[index]\n        label = self.df.has_cactus[index]\n        \n        img_path = os.path.join(self.data_dir, img_name)\n        image = mpimg.imread(img_path)\n        image = self.transform(image)\n        return image, label","2b53719d":"epochs = 25\nbatch_size = 20\ndevice = torch.device('cuda:0')","db2c130d":"data_transf = transforms.Compose([transforms.ToPILImage(), transforms.ToTensor()])\ntrain_data = ImageData(df = labels, data_dir = train_dir, transform = data_transf)\ntrain_loader = DataLoader(dataset = train_data, batch_size = batch_size)","1ef61c91":"class Network(nn.Module): \n    def __init__(self):\n        super(Network, self).__init__()\n        self.conv1 = nn.Conv2d(in_channels=3, out_channels=10, kernel_size=3)\n        self.conv2 = nn.Conv2d(10, 20, kernel_size=3)\n        self.conv2_drop = nn.Dropout2d()\n        self.fc1 = nn.Linear(720, 1024)\n        self.fc2 = nn.Linear(1024, 2)\n\n    def forward(self, x):\n        x = F.relu(F.max_pool2d(self.conv1(x), 2))\n        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))\n        x = x.view(x.shape[0],-1)\n        x = F.relu(self.fc1(x))\n        x = F.dropout(x, training=self.training)\n        x = self.fc2(x)\n        return x","4c07ec57":"net = Network().to(device)\noptimizer = optim.Adam(net.parameters(), lr=0.001)\nloss_func = nn.CrossEntropyLoss()","c32961c0":"%%time\n# Train model\nfor epoch in range(epochs):\n    for i, (images, labels) in enumerate(train_loader):\n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward\n        outputs = net(images)\n        loss = loss_func(outputs, labels)\n        \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if (i+1) % 500 == 0:\n            print ('Epoch [{}\/{}], Loss: {:.4f}'.format(epoch+1, epochs, loss.item()))","5020ce78":"submit = pd.read_csv('..\/input\/sample_submission.csv')\ntest_data = ImageData(df = submit, data_dir = test_dir, transform = data_transf)\ntest_loader = DataLoader(dataset = test_data, shuffle=False)","a59b4504":"predict = []\nfor batch_i, (data, target) in enumerate(test_loader):\n    data, target = data.to(device), target.to(device)\n    output = net(data)\n    \n    _, pred = torch.max(output.data, 1)\n    predict.append(int(pred))\n    \nsubmit['has_cactus'] = predict\nsubmit.to_csv('submission.csv', index=False)","35992f38":"submit.head()","6688ee8d":"Easy example of using CNN in PyTorch"}}