{"cell_type":{"572926b2":"code","949e42a7":"code","4f0ce205":"code","872aebfe":"code","5f002268":"code","1271ec1b":"code","9d4981bb":"code","c41bba17":"code","afba87e9":"code","f7623bed":"code","d4959458":"code","b1ea5a15":"code","b1164580":"code","2b9ac074":"code","d9533b8e":"markdown","e4eec9de":"markdown","f75dfda4":"markdown","f6726109":"markdown","96827040":"markdown","ddc5b86f":"markdown","03a34f6f":"markdown","a68f2a9c":"markdown","3d84b1cb":"markdown","1ec26162":"markdown","a23dc735":"markdown","65d9f0ca":"markdown","97167ce0":"markdown"},"source":{"572926b2":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n","949e42a7":"training_dataset = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_dataset = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint(training_dataset.shape)\nprint(test_dataset.shape)","4f0ce205":"train_labels = training_dataset[\"label\"] \ntraining_dataset.drop([\"label\"], axis = 1, inplace = True)","872aebfe":"train = training_dataset.values.reshape(-1,28,28,1)\ntest = test_dataset.values.reshape(-1,28,28,1)","5f002268":"train, test = train\/255.0, test\/255.0","1271ec1b":"X_train, X_test, Y_train, Y_test = train_test_split(train, train_labels, test_size = 0.2, shuffle = True)","9d4981bb":"CNNmodel = Sequential()\nCNNmodel.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (28,28,1)))\nCNNmodel.add(MaxPooling2D((2,2)))\nCNNmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nCNNmodel.add(MaxPooling2D((2,2)))\nCNNmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nCNNmodel.add(Flatten())\nCNNmodel.add(Dense(64, activation = 'relu'))\nCNNmodel.add(Dense(10, activation = 'softmax'))\n\nCNNmodel.summary()","c41bba17":"CNNmodel.compile(optimizer='adam', loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])","afba87e9":"history = CNNmodel.fit(X_train, Y_train, validation_data = (X_test, Y_test), epochs = 10)","f7623bed":"plt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')","d4959458":"test_loss, test_acc = CNNmodel.evaluate(X_test,  Y_test, verbose=2)\nprint(\"Test Accuracy:\", test_acc)","b1ea5a15":"predictions = np.argmax(CNNmodel.predict(test), axis = 1)","b1164580":"submission_dataframe = pd.DataFrame({\"ImageId\" : range(1, 28001), \"Label\" : predictions})","2b9ac074":"submission_dataframe.to_csv(\"submission.csv\", index = False)","d9533b8e":"> Evaluating our Model","e4eec9de":"> Splitting training and test set from our training dataset to train our model.","f75dfda4":"> Fitting our Model","f6726109":"*We have shape of the training and test dataset as (42000, 785) and (28000, 784) respectively. \nWe need to change it to the shape (28,28) which could be fed into our CNN model.*","96827040":"# **Submitting the predicted labels as a csv file.**","ddc5b86f":"# ***Please Upvote if you like this. ***","03a34f6f":"# **Load the Dataset**","a68f2a9c":"> Normalize pixel values to be between 0 and 1","3d84b1cb":"# Plotting the accuracy graph","1ec26162":"#  **Importing necessary Libraries**","a23dc735":"#  Designing our model","65d9f0ca":"> Compiling our model","97167ce0":"# **Predicting the given test dataset**"}}