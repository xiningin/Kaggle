{"cell_type":{"b8d55d26":"code","7a9e654e":"code","4f70f43c":"code","4cefbe1e":"code","015f5951":"code","e6c88d78":"code","b78eaea6":"code","d48f33f8":"code","598714f3":"code","a3509bbb":"code","a96e8234":"code","4545c9f6":"code","e80b9d13":"code","2383342e":"code","c186683b":"code","d976b591":"code","77e39294":"code","d4177d36":"code","c38ddee3":"code","1adb60a2":"code","aa924af6":"code","e1adbb61":"code","551e8a8e":"code","3b4426b6":"code","a1bcac78":"code","05c0becd":"code","1c2df100":"code","594a9aab":"code","bd3b93a6":"code","757631c8":"code","2932d3c7":"code","2880e49c":"code","3e1922e2":"code","07097e65":"code","d717edac":"code","c8c76067":"code","0d5a6126":"code","7f770f3e":"code","5f8fd9db":"code","b70bef6e":"code","c0ab9dbc":"code","756813b3":"code","5ceb21cb":"code","16421a6d":"code","a612c1b0":"code","895bbea4":"code","1e0636f4":"code","7cb4805c":"code","bdbe56b1":"code","afdfa974":"code","22cb9851":"code","173ea9a8":"code","d5ff2213":"code","501e8ebc":"code","77c29376":"code","a0eb3928":"code","54fb7c67":"code","1c953b6b":"code","a7bd6828":"code","bf467ec6":"code","3acc2450":"code","a8342b9a":"code","c68dd497":"code","f12b7148":"code","d9567d57":"code","05816220":"code","62c71897":"code","9b7b4312":"code","d15fc913":"code","2446e20a":"code","53631afc":"code","00ff54ec":"code","12a8805a":"code","c794c298":"code","6b0a6e2b":"code","0f2de0be":"code","70e37734":"code","073aab6b":"code","a8f236fc":"code","bd32e55f":"code","f66d1fd2":"markdown","832dfaa9":"markdown","dd8cd700":"markdown","6bdefb37":"markdown","2f988616":"markdown","4767d7a8":"markdown","f800a2f0":"markdown","7c3e8481":"markdown","2ff00c77":"markdown"},"source":{"b8d55d26":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\npd.options.display.max_columns = 400","7a9e654e":"!pip install --upgrade lightgbm","4f70f43c":"import lightgbm as lgb","4cefbe1e":"path = sorted(Path('.').rglob('*.csv'))","015f5951":"path","e6c88d78":"cc_info = pd.read_csv('\/kaggle\/input\/superaicreditcardpref\/cc_info.csv')","b78eaea6":"cc_info['old_cc_label'].unique()","d48f33f8":"cc_info[cc_info['id']==5]","598714f3":"cc_info = cc_info.sort_values(['id', 'n1'], ignore_index=True)","a3509bbb":"cc_info","a96e8234":"cc_owner = cc_info.groupby(['id', 'old_cc_label'\n                            ]).agg(card=('old_cc_label',\n                                         'count')).unstack().fillna(0)","4545c9f6":"cc_owner.columns = [x[0] + '_' + str(x[1]) for x in cc_owner.columns]\ncc_owner = cc_owner.reset_index()","e80b9d13":"cc_owner","2383342e":"cc_old_info = cc_info.groupby('id').agg(old_cc=('old_cc_label', list),\n                                           old_cc_time=('n1','max')).reset_index()","c186683b":"cc_old_info['old_card_count'] = cc_old_info['old_cc'].map(len)\ncc_old_info['latest_card'] = cc_old_info['old_cc'].map(lambda x: x[0])","d976b591":"cc_old_info","77e39294":"demo = pd.read_csv('\/kaggle\/input\/superaicreditcardpref\/demo.csv')","d4177d36":"demo = demo.drop('n2', axis=1)","c38ddee3":"demo","1adb60a2":"txn = pd.read_csv('\/kaggle\/input\/superaicreditcardpref\/cc_txn.csv')","aa924af6":"txn[txn['t1'].str.contains(r'ESSO')]","e1adbb61":"txn['month'] = (txn['n1'] \/\/ 30) + 1","551e8a8e":"txn.loc[txn['month'] == 13, 'month'] = 12","3b4426b6":"txn['quarter'] = (txn['n1'] \/\/ 120) + 1\ntxn.loc[txn['month'] == 5, 'month'] = 4","a1bcac78":"card_map = cc_info[['old_cc_no', 'old_cc_label'\n                    ]].set_index('old_cc_no').to_dict()['old_cc_label']\ntxn['card_type'] = txn['old_cc_no'].map(card_map)","05c0becd":"txn['amt'] = txn['n2'] + txn['n3'] \/ 10","1c2df100":"def p90(x):\n    return np.nanpercentile(x, 90)\n\n\ndef p10(x):\n    return np.nanpercentile(x, 10)\n\n\ndef p50(x):\n    return np.nanpercentile(x, 50)","594a9aab":"txn['c1'].mode()","bd3b93a6":"txn_year_feature = txn.groupby(['id']).agg(txn_count=('amt', 'count'),\n                                        txn_mean=('amt', 'mean'),\n                                        txn_sum=('amt', 'sum'),\n                                        txn_p90=('amt', p90),\n                                        txn_p10=('amt', p10),\n                                        top_cat=('c1', lambda x:x.value_counts().index[0])).reset_index()\n\ntxn_quarter_feature = txn.groupby(['id', 'quarter']).agg(txn_count=('amt', 'count'),\n                                        txn_mean=('amt', 'mean'),\n                                        txn_sum=('amt', 'sum'),\n                                        txn_p90=('amt', p90),\n                                        txn_p10=('amt', p10),\n                                        top_cat=('c1', lambda x:x.value_counts().index[0])).reset_index()","757631c8":"card_txn_year_feature = txn.groupby(['id', 'card_type']).agg(txn_count=('amt', 'count'),\n                                        txn_mean=('amt', 'mean'),\n                                        txn_sum=('amt', 'sum'),\n                                        txn_p90=('amt', p90),\n                                        txn_p10=('amt', p10),\n                                        top_cat=('c1', lambda x:x.value_counts().index[0])).reset_index()\n\ncard_txn_quarter_feature = txn.groupby(['id', 'card_type' ,'quarter']).agg(txn_count=('amt', 'count'),\n                                        txn_mean=('amt', 'mean'),\n                                        txn_sum=('amt', 'sum'),\n                                        txn_p90=('amt', p90),\n                                        txn_p10=('amt', p10),\n                                        top_cat=('c1', lambda x:x.value_counts().index[0])).reset_index()","2932d3c7":"txn_quarter_feature['quarter'] = txn_quarter_feature['quarter'].astype(str)\ncard_txn_quarter_feature['quarter'] = card_txn_quarter_feature['quarter'].astype(str)","2880e49c":"card_txn_year_feature['card_type'] = \"C_\" + card_txn_year_feature['card_type'].astype(str)\ncard_txn_quarter_feature['card_type'] = \"C_\" + card_txn_quarter_feature['card_type'].astype(str)","3e1922e2":"def unstack_rename(data, key):\n    data[key] = data[key].astype(str)\n    data_ = data.set_index(key).unstack()\n    data_.columns = [\"_\".join(x) for x in data_.columns]\n    data_ = data_.reset_index()\n    return data_\n\n\ndef unstack_rename_2(data, key):\n    data[key] = data[key].astype(str)\n    data_ = data.set_index(key).unstack().unstack()\n    data_.columns = [\"_\".join(x) for x in data_.columns]\n    data_ = data_.reset_index()\n    return data_","07097e65":"txn_quarter_feature_ = unstack_rename(txn_quarter_feature,\n                                      ['id', 'quarter'])","d717edac":"card_txn_year_feature_ = unstack_rename(card_txn_year_feature,\n                                        ['id', 'card_type'])\ncard_txn_quarter_feature_ = unstack_rename_2(card_txn_quarter_feature,\n                                             ['id', 'card_type', 'quarter'])","c8c76067":"card_txn_quarter_feature_","0d5a6126":"card_txn_quarter_feature_.head()","7f770f3e":"txn_year_feature.head()","5f8fd9db":"txn_quarter_feature_.head()","b70bef6e":"card_txn_f = card_txn_year_feature_[\n    ['id'] + [x for x in card_txn_year_feature_ if 'txn' in x]]\ncard_txn_q_f = card_txn_quarter_feature_[\n    ['id'] + [x for x in card_txn_quarter_feature_ if 'txn' in x]]","c0ab9dbc":"card_txn_f = card_txn_year_feature_[\n    ['id'] + [x for x in card_txn_year_feature_ if 'txn' in x]]","756813b3":"txn_quarter_feature_['id'] = txn_quarter_feature_['id'].astype(int)\ntxn_year_feature['id'] = txn_year_feature['id'].astype(int)\ncard_txn_f['id'] = card_txn_f['id'].astype(int)\ncard_txn_q_f['id'] = card_txn_q_f['id'].astype(int)","5ceb21cb":"txn_year_feature.columns","16421a6d":"txn_quarter_feature_.columns","a612c1b0":"card_txn_f.columns","895bbea4":"card_txn_q_f.columns","1e0636f4":"data = demo.merge(\n    cc_owner, on='id',how='left'\n).merge(\n    cc_old_info, on='id', how='left'\n).merge(\n    txn_year_feature, on='id', how='left'\n).merge(\n    txn_quarter_feature_,on='id',how='left'\n).merge(\n    card_txn_f, on='id',how='left')","7cb4805c":"data","bdbe56b1":"data = data.drop('old_cc', axis=1)","afdfa974":"cat_col = ['c1', 'c2', 'c3', 'c4', 'latest_card', 'top_cat', 'top_cat_1', 'top_cat_2', 'top_cat_3', 'top_cat_4']","22cb9851":"data.loc[data['c2']=='n','c2'] = 999999","173ea9a8":"data[cat_col] = data[cat_col].fillna(999999)","d5ff2213":"data[cat_col] = data[cat_col].astype(int)","501e8ebc":"data['c2'].unique()","77c29376":"txn_col = [x for x in  data.columns if 'txn' in x]","a0eb3928":"data[txn_col] = data[txn_col].fillna(0.0)","54fb7c67":"data.to_pickle('\/kaggle\/working\/preprocess_data.pkl')","1c953b6b":"train = pd.read_csv('\/kaggle\/input\/superaicreditcardpref\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/superaicreditcardpref\/test.csv')","a7bd6828":"test","bf467ec6":"submission = set(test['id'])","3acc2450":"cat_col = ['c1', 'c2', 'c3', 'c4', 'latest_card', 'top_cat', 'top_cat_1', 'top_cat_2', 'top_cat_3', 'top_cat_4']","a8342b9a":"X = pd.read_pickle('\/kaggle\/working\/preprocess_data.pkl')","c68dd497":"test = X[X.id.isin(submission)]","f12b7148":"TRAIN =  X.merge(train, on='id')","d9567d57":"features = [x for x in X.columns if x not in ('id', 'label')]","05816220":"y_TRAIN = TRAIN[['label']]","62c71897":"X_TRAIN = TRAIN[features]","9b7b4312":"y_TRAIN.nunique()","d15fc913":"lgb.__version__","2446e20a":"from typing import Tuple, List, Optional\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_auc_score, roc_curve, f1_score, matthews_corrcoef\n# https:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.model_selection\n# https:\/\/scikit-learn.org\/stable\/modules\/classes.html#splitter-classes \nfrom sklearn.model_selection import StratifiedKFold, KFold, GroupKFold, StratifiedShuffleSplit, TimeSeriesSplit\nfrom IPython.display import display\nimport re","53631afc":"from sklearn import preprocessing\nlb = preprocessing.LabelBinarizer()\nlb.fit([x for x in range(13)])","00ff54ec":"weight_mapper = train['label'].value_counts(normalize=True).to_dict()","12a8805a":"weight_mapper","c794c298":"X_TRAIN","6b0a6e2b":"y_TRAIN","0f2de0be":"\ndef weight_avg_logloss(y_pred, evals):\n    y_true = evals.get_label()\n    n_sample = len(y_true)\n\n    y_pred = y_pred.reshape(13, -1).T\n    label = y_true.reshape(-1)\n\n    label_one_hot = lb.transform(label)\n    label_df = pd.DataFrame(list(label), columns=['label'])\n\n    label_df['Weight'] = label_df['label'].map(weight_mapper)\n\n    tmp_score = pd.DataFrame(-np.log(y_pred+0.000001) * label_one_hot)\n    tmp_score_sum = tmp_score.sum(axis=1)\n\n    avg_loss = (\n        (tmp_score_sum * label_df['Weight']).sum()) \/ label_df['Weight'].sum()\n\n    return 'my_loss', avg_loss, False","70e37734":"train_data = lgb.Dataset(X_TRAIN, label=y_TRAIN, categorical_feature=cat_col)\nparams = {\n    \"boosting_type\": 'gbdt',  # \n    \"objective\": 'multiclass',\n    \"feature_fraction\": 0.7,\n    \"bagging_fraction\": 0.7,\n    \"learning_rate\": 0.03,\n    \"num_class\": 13\n}\n\nfolds = StratifiedKFold(n_splits=4)\nmodel = lgb.cv(params,\n               train_data,\n               num_boost_round=1000,\n               folds=folds,\n               metrics='None',\n               feval=weight_avg_logloss,\n               early_stopping_rounds=30,\n               verbose_eval=10,\n               return_cvbooster=True,\n               seed=42)","073aab6b":"test = test.reset_index(drop=True)\n\nsub_ = model['cvbooster'].predict(test[features])\n\nresult = pd.DataFrame(sum(sub_)\/4)\nresult = pd.concat([test[['id']],result], axis=1)","a8f236fc":"result.columns= ['id', 'class0', 'class1', 'class2', 'class3', 'class4', 'class5', 'class6', 'class7', 'class8', 'class9', 'class10', 'class11', 'class12' ]","bd32e55f":"result.to_csv('submission.csv', index=False)","f66d1fd2":"## select feature txn","832dfaa9":"# Combind Data","dd8cd700":"# Impute","6bdefb37":"# Model","2f988616":"# demo","4767d7a8":"# cc_info","f800a2f0":"# Predict result","7c3e8481":"# txn","2ff00c77":"# label"}}