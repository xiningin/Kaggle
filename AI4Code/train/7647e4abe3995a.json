{"cell_type":{"d3819c3f":"code","c879ad78":"code","bc1c5b34":"code","5fffed32":"code","5441aef2":"code","778d59be":"code","59e81166":"code","5039f9aa":"code","94af1a83":"code","6fa118e7":"code","5d4263b5":"markdown","82545201":"markdown","b714c666":"markdown","8f1d458f":"markdown","6f608582":"markdown"},"source":{"d3819c3f":"import numpy as np\nimport tensorflow as tf\n\n\n# from sklearn.preprocessing import LabelEncoder\n# import networkx as nx\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import layers\nfrom keras.layers import Activation, Dense, Reshape\n\n# import sklearn.datasets\n# import sklearn.model_selection\n\nx = np.loadtxt('..\/input\/classes-datasets\/x.csv', delimiter=\",\")\ny = np.loadtxt('..\/input\/classes-datasets\/y.csv', delimiter=\",\")\n\nx_eval = np.loadtxt('..\/input\/classes-datasets\/x_eval.csv', delimiter=\",\")\ny_eval = np.loadtxt('..\/input\/classes-datasets\/y_eval.csv', delimiter=\",\")","c879ad78":"x= np.asarray(x).astype(\"float32\")\ny= np.asarray(y).astype(\"float32\")\nx_eval= np.asarray(x_eval).astype(\"float32\")\ny_eval= np.asarray(y_eval).astype(\"float32\")","bc1c5b34":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Reshape((8, 5), input_shape=(40,)))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\nmodel.add(tf.keras.layers.Flatten())\n#model.add(tf.keras.layers.Dropout(0.90))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))","5fffed32":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])","5441aef2":"train_ds = tf.data.Dataset.from_tensor_slices((x, y))\nval_ds = tf.data.Dataset.from_tensor_slices((x_eval, y_eval))\n\n\nhistory = model.fit(train_ds.batch(batch_size=20), validation_data=val_ds.batch(batch_size=25), epochs=200, shuffle=True)","778d59be":"plt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(history.history['loss'], color='b', label=\"training_loss\")\nplt.plot(history.history['val_loss'], color='g', label=\"Val_loss\")\nplt.legend()\nplt.show()\n\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accurcy\")\nplt.plot(history.history['accuracy'], color='b', label=\"training_accuracy\")\nplt.plot(history.history['val_accuracy'], color='g', label=\"Val_accuracy\")\nplt.legend()\nplt.show()","59e81166":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Reshape((40, 1), input_shape=(40,)))\n# model.add(tf.keras.reshape(x_eval.shape[0], 40, 1).astype('float32'))\nmodel.add(tf.keras.layers.Conv1D(filters=32, kernel_size=5, input_shape=(40, 1)))\nmodel.add(tf.keras.layers.MaxPooling1D(pool_size=6 ))\nmodel.add(tf.keras.layers.Conv1D(filters=16, kernel_size=3))\n#model.add(tf.keras.layers.MaxPooling1D(pool_size=5 ))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(20, activation='relu'))\n#model.add(tf.keras.layers.Dense(1024, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))  \n\nmodel.summary()","5039f9aa":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.00075),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])","94af1a83":"train_ds = tf.data.Dataset.from_tensor_slices((x, y))\nval_ds = tf.data.Dataset.from_tensor_slices((x_eval, y_eval))\n\n\nhistory = model.fit(train_ds.batch(batch_size=20), validation_data=val_ds.batch(batch_size=25), epochs=80, shuffle=True)","6fa118e7":"plt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(history.history['loss'], color='b', label=\"training_loss\")\nplt.plot(history.history['val_loss'], color='g', label=\"Val_loss\")\nplt.legend()\nplt.show()\n\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accurcy\")\nplt.plot(history.history['accuracy'], color='b', label=\"training_accuracy\")\nplt.plot(history.history['val_accuracy'], color='g', label=\"Val_accuracy\")\nplt.legend()\nplt.show()","5d4263b5":"# End of the second solution","82545201":"# end of solution 1","b714c666":"# This is the first solution","8f1d458f":"## the trick here is to use \"reshape\" and to manipulate the dimensions, e.g: 8 multiply 5 = 40, 10 multiply 4 = 40","6f608582":"# Here is the second solution"}}