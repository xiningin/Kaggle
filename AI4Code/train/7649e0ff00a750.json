{"cell_type":{"01323821":"code","f9bb39da":"code","fddb1ebc":"code","ac232a74":"code","54b3e7c0":"code","f91dc380":"code","fd953395":"code","1d700498":"code","f8b4fb66":"code","2674403f":"code","e51dfbea":"code","4fe8fa38":"code","c77152f8":"code","3662385e":"code","38d45e60":"code","abaeeaa0":"code","33b8df26":"code","c2a90e53":"code","fa608150":"code","4b51e2a9":"code","e780a9c3":"code","869c68f7":"code","985d372e":"code","c369f863":"code","ae2b5e91":"code","7bdf6d62":"code","d3bd63d1":"code","585028fd":"code","14630c48":"code","fd762468":"code","459123cd":"code","3c1a4bb2":"code","30fe6172":"code","2bdc7abb":"code","3a3f6620":"code","3cb8d255":"code","2683eedf":"code","1def61be":"code","b85b8b08":"code","43ffb1be":"code","74d2e573":"code","15fb7c03":"code","99753674":"code","49ddf329":"code","dbc104f9":"code","efd4d061":"code","be11b5c2":"code","85ef4913":"code","35054093":"code","4262205c":"code","835e7a5c":"code","425e8984":"code","e36a5b1d":"code","2e24e5d9":"code","de858171":"code","5c3ce35d":"code","cf46fd1e":"code","c9c72b00":"code","c12159c9":"code","851c866b":"code","b7e467f9":"code","749af15d":"code","a5d729ed":"code","688db437":"code","a79aff69":"code","22e26508":"code","7163a824":"code","93a3dc31":"code","6c3c1352":"code","5b78049f":"code","ddd5cf28":"code","33bf6e7c":"code","1fb677dc":"code","2a33393c":"code","c80ce574":"code","abb1236a":"markdown","cf87d3b8":"markdown"},"source":{"01323821":"from IPython.display import Image\nImage(url= \"https:\/\/static1.squarespace.com\/static\/5006453fe4b09ef2252ba068\/5095eabce4b06cb305058603\/5095eabce4b02d37bef4c24c\/1352002236895\/100_anniversary_titanic_sinking_by_esai8mellows-d4xbme8.jpg\")","f9bb39da":"import numpy as np #linear algebra\nimport pandas as pd #data preprocessing","fddb1ebc":"import warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\nimport io\nimport requests","ac232a74":"train=pd.read_csv('..\/input\/titanic\/train.csv',na_values=['?'])","54b3e7c0":"test=pd.read_csv('..\/input\/titanic\/test.csv',na_values=['?'])","f91dc380":"train.shape","fd953395":"test.shape","1d700498":"train.head()","f8b4fb66":"test.head()","2674403f":"train.nunique()","e51dfbea":"test.nunique()","4fe8fa38":"train.describe()","c77152f8":"test.describe()","3662385e":"train.columns","38d45e60":"test.columns","abaeeaa0":"train.info()","33b8df26":"test.info()","c2a90e53":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","fa608150":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","4b51e2a9":"#@title The Chart confirms Women more likely survived than Men\nbar_chart('Sex')\n","e780a9c3":"\nbar_chart('Pclass')","869c68f7":"bar_chart('SibSp')","985d372e":"train.head()","c369f863":"train.head(10)","ae2b5e91":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","7bdf6d62":"train['Title'].value_counts()","d3bd63d1":"test['Title'].value_counts()","585028fd":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","14630c48":"# drop unnecessary columns from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","fd762468":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","459123cd":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","3c1a4bb2":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","30fe6172":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()","2bdc7abb":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","3a3f6620":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","3cb8d255":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","2683eedf":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","1def61be":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","b85b8b08":"train.info()","43ffb1be":"test.info()","74d2e573":"mean = (train[\"Age\"].mean()*train.shape[0])\/train.shape[0]\ntrain[\"Age\"] = train[\"Age\"].fillna(int(float(mean)))\ntrain.isnull().sum()","15fb7c03":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","99753674":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","49ddf329":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","dbc104f9":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","efd4d061":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","be11b5c2":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","85ef4913":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","35054093":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","4262205c":"mean = (train[\"Fare\"].mean()*train.shape[0])\/train.shape[0]\ntrain[\"Fare\"] = train[\"Fare\"].fillna(int(float(mean)))\ntrain.isnull().sum()","835e7a5c":"train.Cabin.value_counts()","425e8984":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","e36a5b1d":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","2e24e5d9":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","de858171":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","5c3ce35d":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","cf46fd1e":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","c9c72b00":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","c12159c9":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","851c866b":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","b7e467f9":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","749af15d":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","a5d729ed":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","688db437":"# kNN Score\nround(np.mean(score)*100, 2)","a79aff69":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","22e26508":"# decision tree Score\nround(np.mean(score)*100, 2)","7163a824":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","93a3dc31":"# Random Forest Score\nround(np.mean(score)*100, 2)\n","6c3c1352":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5b78049f":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","ddd5cf28":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","33bf6e7c":"round(np.mean(score)*100,2)","1fb677dc":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","2a33393c":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","c80ce574":"submission = pd.read_csv('submission.csv')\nsubmission.head()","abb1236a":"### **Model Building**","cf87d3b8":"## **Problem Statement**\nTo predict which passengers survived the Titanic shipwreck.\n"}}