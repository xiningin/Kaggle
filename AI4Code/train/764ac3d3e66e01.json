{"cell_type":{"f47f87d3":"code","b635dcd1":"code","e0e14949":"code","aa80cf9a":"code","0e787ae9":"code","7497bd7b":"code","4579e8c3":"code","b9089bd7":"code","508dba54":"code","29192ec2":"code","f1c94163":"code","71dcf49f":"code","eaa666d5":"code","8ef52e78":"code","540581b1":"code","ec170b0b":"code","dbca5937":"code","487cfbe6":"code","61eb8462":"code","fad1fcec":"code","9185a57c":"code","c78fd1af":"code","1d612b32":"code","3c2b6e41":"code","26c9f5bb":"code","7c96c354":"code","42bf2b5b":"code","6fc44fb8":"code","20998621":"code","cdd0cf84":"code","5cbf083c":"code","80850e6a":"markdown","d48b4315":"markdown","048bb747":"markdown","a5ea2cfa":"markdown","341e15ce":"markdown","d71d4786":"markdown","de3e2720":"markdown","de62c21d":"markdown","5468aaca":"markdown","6d54fab9":"markdown","2e9c8768":"markdown","d3fe0732":"markdown"},"source":{"f47f87d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nimport operator\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b635dcd1":"weatherHistory = pd.read_csv(\"..\/input\/szeged-weather\/weatherHistory.csv\")","e0e14949":"weatherHistory.head(2)","aa80cf9a":"weatherHistory.info()","0e787ae9":"weatherHistory.describe().T","7497bd7b":"# Extract 3 columns 'Temperature (C)','Apparent Temperature (C)', 'Humidity' for pure and better showing\nweatherHistory_df = weatherHistory[['Temperature (C)','Apparent Temperature (C)', 'Humidity']]\n\n# And called again\nweatherHistory_df.columns = ['Temperature', 'Apparent_Temperature', 'Humidity']","4579e8c3":"weatherHistory_df = weatherHistory_df[:][:500]      # lets take limit for speed regression calculating\nweatherHistory_df.head(2)","b9089bd7":"# See picture with scatter or plot method\n\nsns.pairplot(weatherHistory_df, kind=\"reg\")","508dba54":"# see how many null values we have\n\nweatherHistory_df.isnull().sum()","29192ec2":"# Features chose\n\ny = np.array(weatherHistory_df['Humidity']).reshape(-1, 1)\nX = np.array(weatherHistory_df['Apparent_Temperature']).reshape(-1, 1)\n\n# Chosen just 'Apparent_Temperature' feature if you want can also for 'Temperature' feature","f1c94163":"# Split data as %20 is test and %80 is train set\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42)","71dcf49f":"from sklearn.linear_model import LinearRegression\n\nlin_df = LinearRegression()  \nlin_df.fit(X_train, y_train)","eaa666d5":"y_pred = lin_df.predict(X_test)                                     # Predict Linear Model\naccuracy_score = lin_df.score(X_test, y_test)                       # Accuracy score\nprint(\"Linear Regression Model Accuracy Score: \" + \"{:.1%}\".format(accuracy_score))","8ef52e78":"from sklearn.metrics import mean_squared_error,r2_score\n\nprint(\"R2 Score: \" +\"{:.3}\".format(r2_score(y_test, y_pred)));","540581b1":"# Finally draw figure of Linear Regression Model\n\nplt.scatter(X_test, y_test, color='r')\nplt.plot(X_test, y_pred, color='g')\nplt.show()","ec170b0b":"mlin_df = LinearRegression()\nmlin_df = mlin_df.fit(X_train, y_train)\nmlin_df.intercept_       # constant b0\nmlin_df.coef_            # variable coefficient","dbca5937":"y_pred = mlin_df.predict(X_train)                                      # predict Multi linear Reg model\nrmse = np.sqrt(mean_squared_error(y_train, mlin_df.predict(X_train)))\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.3}\".format(r2_score(y_train, y_pred)));      # this is test error score","487cfbe6":"# cross validation method is giving better and clear result\n\ncross_val_score(mlin_df, X, y, cv=10, scoring = 'r2').mean()","61eb8462":"mlin_df.score(X_train, y_train)      # r2 value","fad1fcec":"np.sqrt(-cross_val_score(mlin_df, \n                X_train, \n                y_train, \n                cv=10, \n                scoring = 'neg_mean_squared_error')).mean()","9185a57c":"# Finally draw figure of Multiple Linear Regression Model\n\nplt.scatter(X_train, y_train, s=100)\n\n# sort the values of x before line plot\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(X_train,y_pred), key=sort_axis)\nX_test, y_pred = zip(*sorted_zip)\nplt.plot(X_train, y_train, color='r')\nplt.show()","c78fd1af":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_df = PolynomialFeatures(degree = 5)\ntransform_poly = poly_df.fit_transform(X_train)\n\nlinreg2 = LinearRegression()\nlinreg2.fit(transform_poly,y_train)\n\npolynomial_predict = linreg2.predict(transform_poly)\n","1d612b32":"rmse = np.sqrt(mean_squared_error(y_train,polynomial_predict))\nr2 = r2_score(y_train,polynomial_predict)\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.2}\".format(r2))","3c2b6e41":"plt.scatter(X_train, y_train, s=50)\n# sort the values of x before line plot\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(X_train,polynomial_predict), key=sort_axis)\nX_train, polynomial_predict = zip(*sorted_zip)\nplt.plot(X_train, polynomial_predict, color='m')\nplt.show()","26c9f5bb":"from sklearn.tree import DecisionTreeRegressor\n\ndt_reg = DecisionTreeRegressor()          # create  DecisionTreeReg with sklearn\ndt_reg.fit(X_train,y_train)","7c96c354":"dt_predict = dt_reg.predict(X_train)\n#dt_predict.mean()","42bf2b5b":"plt.scatter(X_train,y_train, color=\"red\")                           # scatter draw\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01)  \nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.plot(X_grid,dt_reg.predict(X_grid),color=\"g\")                 # line draw\nplt.xlabel(\"Temperature\")\nplt.ylabel(\"Salinity\")\nplt.title(\"Decision Tree Model\")\nplt.show()","6fc44fb8":"rmse = np.sqrt(mean_squared_error(y_train,dt_predict))\nr2 = r2_score(y_train,dt_predict)\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.2}\".format(r2))","20998621":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg = RandomForestRegressor(n_estimators=5, random_state=0)\nrf_reg.fit(X_train,y_train)\nrf_predict = rf_reg.predict(X_train)\n#rf_predict.mean()","cdd0cf84":"plt.scatter(X_train,y_train, color=\"red\")                           # scatter draw\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01)  \nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.plot(X_grid,rf_reg.predict(X_grid),color=\"b\")                 # line draw\nplt.xlabel(\"Temperature\")\nplt.ylabel(\"Salinity\")\nplt.title(\"Random Forest Model\")\nplt.show()","5cbf083c":"rmse = np.sqrt(mean_squared_error(y_train,rf_predict))\nr2 = r2_score(y_train,rf_predict)\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.2}\".format(r2))","80850e6a":"* This was just for train set and you can also do for test set.","d48b4315":"# 5.Random Forest Model","048bb747":"# 1.Linear Regression","a5ea2cfa":"# 4.Decision Tree Regression","341e15ce":"# Linear regression (predicting a continuous value):\n\n*** Question:**\n>     Weather in Szeged 2006-2016: Is there a relationship between humidity and temperature? What about between humidity and apparent temperature? Can you predict the apparent temperature given the humidity?","d71d4786":"* This was just for train set and you can also do for test set.","de3e2720":"# 2.Multiple Linear Regression","de62c21d":"* This was just for train set and you can also do for test set.","5468aaca":"# 3.Polynomial Regression","6d54fab9":"* This was just for train set and you can also do for test set.","2e9c8768":"**Result:** When we revise 5 models, best one is Decision Tree Regression Model with %86 accuracy score.","d3fe0732":"## 2.1.Multiple Linear Regression Model Tunning"}}