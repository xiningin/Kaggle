{"cell_type":{"87d1612c":"code","a3ac83db":"code","f7f337f9":"code","84906750":"code","30f5ea5a":"code","86be27c8":"code","1515375a":"code","a928d2fe":"code","ec16d9b7":"code","db3f0162":"code","7bcbff75":"code","96e57c2c":"code","7cd85601":"markdown","d1d1a9b3":"markdown"},"source":{"87d1612c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3ac83db":"import cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nimport sklearn.metrics as metrics\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout , BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint,ReduceLROnPlateau\nimport warnings\nwarnings.filterwarnings('ignore')","f7f337f9":"train_data_path = \"..\/input\/covid19-image-dataset\/Covid19-dataset\/train\"\ntest_data_path = \"..\/input\/covid19-image-dataset\/Covid19-dataset\/test\"","84906750":"img = plt.imread(os.path.join(train_data_path, \"Covid\/07.jpg\"))\nplt.imshow(img)\nheight, width, dim = img.shape\nplt.title('Covid')\nprint(\"size of image (h x w)\",height,width)","30f5ea5a":"img = plt.imread(os.path.join(train_data_path, \"Viral Pneumonia\/05.jpeg\"))\nplt.imshow(img)\nheight, width, dim = img.shape\nplt.title('Viral Pneumonia')\nprint(\"size of image (h x w)\",height,width)","86be27c8":"img = plt.imread(os.path.join(train_data_path, \"Normal\/01.jpeg\"))\nplt.imshow(img)\nheight, width, dim = img.shape\nplt.title('Normal')\nprint(\"size of image (h x w)\",height,width)","1515375a":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  shear_range=0.2,\n                                  zoom_range=0.1,\n                                  fill_mode='nearest',\n                                  rotation_range=10,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntraining_set = train_datagen.flow_from_directory(\n    train_data_path,\n    target_size=(224,224),\n    batch_size=32,\n    class_mode='categorical',\n    shuffle=True\n)\ntesting_set = test_datagen.flow_from_directory(\n    test_data_path,\n    target_size=(224,224),\n    batch_size=32,\n    class_mode='categorical',\n    shuffle=True\n)","a928d2fe":"training_set.class_indices","ec16d9b7":"testing_set.class_indices","db3f0162":"model_1 = Sequential([\n    Conv2D(128, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    MaxPool2D(2, 2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPool2D(2,2),\n    Conv2D(32, (3,3), activation='relu'),\n    MaxPool2D(2,2),\n    Flatten(),\n    Dense(256, activation='relu'),\n    Dense(128, activation='relu'),\n    Dense(3, activation='softmax')\n])\n\nmodel_1.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel_1.summary()","7bcbff75":"from keras.utils.vis_utils import plot_model\nplot_model(model_1)","96e57c2c":"history = model_1.fit(training_set,\n                    epochs=30,\n                    validation_data=testing_set,\n                    batch_size=32)","7cd85601":"## Model Building","d1d1a9b3":"## Image Augmentation"}}