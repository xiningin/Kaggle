{"cell_type":{"7178974f":"code","2710ef75":"code","99155856":"code","97dcf37e":"code","c56c353f":"code","de23daf3":"code","1cc51631":"code","227e8cb4":"code","084b0e28":"code","7fd6044d":"code","f80677f4":"code","27a88675":"code","febdb240":"code","b230a1e9":"code","c96381dd":"code","94bce8fe":"code","bd50f511":"code","30c7efc5":"code","c72b06fa":"code","d91f6c7d":"markdown","d06a9a31":"markdown","8f0699e7":"markdown","36dc0533":"markdown"},"source":{"7178974f":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","2710ef75":"from fastai import *\nfrom fastai.vision import *","99155856":"path_img = Path(\"\/kaggle\/input\/apparel-images-dataset\")\npath_img.ls()","97dcf37e":"tfms = get_transforms()\nsize = 224\nbs = 64\n\ndef func(o):\n    res = (o.parts if isinstance(o, Path) else o.split(os.path.sep))[-2]\n    res = res.split(\"_\")\n    return res\n\ndata = (ImageList.from_folder(path_img)   # Where to find the data? -> in path and its subfolders\n        .split_by_rand_pct(valid_pct=0.2) # use 20% as validation set\n        .label_from_func(func)            # How to label? -> depending on the folder of the filenames\n        .transform(tfms, size=size)        \n        .databunch(bs=bs)\n        .normalize(imagenet_stats))       # normalize using the famous imagenet                  ","c56c353f":"data.show_batch()","de23daf3":"data.classes","1cc51631":"acc_02 = partial(accuracy_thresh, thresh=0.2)\nf_score = partial(fbeta, thresh=0.2)  \n\nlearn = cnn_learner(data, models.resnet34, metrics=[acc_02, f_score])\n\n# to prevent the following error: Can't write to '\/kaggle\/input\/apparel-images-dataset\/models\nlearn.model_dir = \"\/kaggle\/working\"  ","227e8cb4":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","084b0e28":"# use Min numerical gradient as lr\nlr = 2.75E-02\nlearn.fit_one_cycle(5, slice( lr ))","7fd6044d":"learn.unfreeze()","f80677f4":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","27a88675":"learn.fit_one_cycle(5, slice(1e-07, 1e-06))","febdb240":"learn.save('stage2-rn34')","b230a1e9":"# Download file from web to test prediction\nimport requests\n\nurl = 'https:\/\/www.rigeshop.com\/content\/images\/23041\/370x370\/australian-pant-triacetat-bies-royal-blue.jpg'\ntestfile_path = '\/kaggle\/working\/test.jpg'\n\nfilerequest = requests.get(url)\nopen(testfile_path, 'wb').write(filerequest.content)\n\nimg = open_image(testfile_path)  # web address\nimg","c96381dd":"pred_class,pred_idx,outputs = learn.predict(img)\npred_class","94bce8fe":"# use image from validation set to test the model\n\nprint(data.valid_ds[1][1])\ndata.valid_ds[1][0]","bd50f511":"pred_class,pred_idx,outputs = learn.predict(data.valid_ds[1][0])\npred_class","30c7efc5":"# todo: remove float points, just integer\n# this function uses the validation set to output a confusion matrix\nfrom ipywidgets import IntProgress\nfrom IPython.display import display\n\n\ndef plot_multilabel_confusion_matrix(learn, data, list_of_classes):\n\n    for curClass in list_of_classes:\n\n        # create predictions\n        \n        gt_class = []\n        pred_class = []\n\n        for x in data.valid_ds:\n            gt_classes = str(x[1]).split(\";\")\n    \n            pred,pred_idx,outputs = learn.predict(x[0])\n            pred_classes = str(pred).split(\";\") # convert class \"MultiCategory\" into a list\n\n            gt_class.append(curClass in gt_classes)\n            pred_class.append(curClass in pred_classes) # [i]\n            \n        # --- calculate confusion matrix\n        \n        from sklearn.metrics import confusion_matrix\n\n        cm = confusion_matrix(gt_class, pred_class)\n\n        # --- plot confusion matrix using MathPlotLib\n        \n        # sources: \n        # https:\/\/stackoverflow.com\/questions\/19233771\/sklearn-plot-confusion-matrix-with-labels\/48018785\n        # https:\/\/stackoverflow.com\/questions\/20998083\/show-the-values-in-the-grid-using-matplotlib\n\n        label = curClass\n        labels = [f'not_{label}', label]\n\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        cax = ax.matshow(cm, cmap='Blues')\n\n        fig.colorbar(cax)\n        ax.set_xticklabels([''] + labels)\n        ax.xaxis.set_ticks_position(\"bottom\")\n        ax.set_yticklabels([''] + labels)\n\n        for (i, j), z in np.ndenumerate(cm):\n            ax.text(j, i, '{:0.1f}'.format(z), ha='center', va='center',\n                    bbox=dict(boxstyle='round', facecolor='white', edgecolor='0.3'))\n    \n        plt.title(label)\n        plt.xlabel('Predicted')\n        plt.ylabel('Ground Truth')\n        plt.show()","c72b06fa":"plot_multilabel_confusion_matrix(learn, data, data.classes)","d91f6c7d":"# Results","d06a9a31":"# Load Images","8f0699e7":"# Training","36dc0533":"# Init"}}