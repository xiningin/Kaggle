{"cell_type":{"5e06f9e0":"code","6a06a800":"code","e9811107":"code","996af870":"code","eb8873fc":"code","5aefe9bc":"code","de0cd880":"code","870fb891":"code","d9bd8e7a":"code","b2edc3ad":"code","8fa91c6e":"code","8c23127d":"code","15dbc2fa":"code","59d1456b":"code","7690ae65":"code","f9e340ea":"code","2ef0ca72":"code","ce9c7c71":"code","51e6da6d":"code","ad3921e0":"code","d10f8e75":"code","65106ed1":"markdown","49dd5c2c":"markdown","4a1a9d5b":"markdown","2c564591":"markdown","ee297d19":"markdown","48819386":"markdown","ee07b5f3":"markdown","8f51b903":"markdown","3d7ea4bb":"markdown","7a516adc":"markdown","961ae3c1":"markdown","b0de0d3d":"markdown"},"source":{"5e06f9e0":"import numpy as np\nimport pandas as pd\nimport os\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\n# setting default template to plotly_white for all visualizations\npio.templates.default = \"plotly_white\"\n%matplotlib inline\nimport gc\n\nfrom colorama import Fore, Back, Style\n\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nc_ = Fore.CYAN\nres = Style.RESET_ALL\n\nimport warnings\nwarnings.filterwarnings('ignore')","6a06a800":"train_df = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv', index_col=None)\ntest_df = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv', index_col=None)\nsample_submission = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv', index_col=None)\n\nprint(f\"{y_}Train data shape - {train_df.shape}{res}\\n{m_}Test data shape - {test_df.shape}{res}\\n{c_}Sample submission shape - {sample_submission.shape}{res}\")","e9811107":"train_df.info()","996af870":"test_df.info()","eb8873fc":"sample_submission.info()","5aefe9bc":"_ = sns.heatmap(train_df.isna())","de0cd880":"_ = sns.heatmap(test_df.isna())","870fb891":"train_df.head(20)","d9bd8e7a":"test_df.head(20)","b2edc3ad":"#Plot the data\nbreath1 = train_df.loc[train_df['breath_id'] == 1]\nbreath1\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,13), facecolor=background_color)\nfont_size = 20\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.4)\n\n\nlocals()[\"ax\"+str(0)] = fig.add_subplot(gs[0, 0])\nlocals()[\"ax\"+str(0)].set_facecolor(background_color)\nfor s in [ 'right', 'top']:\n    locals()[\"ax\"+str(0)].spines[s].set_visible(False)\n\n    #41533b\nsns.lineplot(ax=locals()[\"ax\"+str(0)],data=breath1, x=\"time_step\", y=\"pressure\", linewidth = 3, color='#FC6238')\nlocals()[\"ax0\"].set_xticks(np.arange(0,3,0.25))\nlocals()[\"ax0\"].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\ny_min = round(breath1.pressure.min(),2)\ny_max = round(breath1.pressure.max(),2)\nlocals()[\"ax0\"].set_yticks(np.arange(y_min,y_max))\nlocals()[\"ax0\"].set_yticklabels(np.arange(y_min,y_max), fontsize=font_size, fontweight='bold')\nlocals()[\"ax0\"].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\nlocals()[\"ax0\"].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\nvalue = \"Airway pressure in the respiratory circuit (cmH2O) at time step (second)\"\nlocals()[\"ax\"+str(0)].text(1.15, 9.5, value, ha='left', va='center', fontsize=font_size, color='White',fontweight='bold',\n            bbox=dict(facecolor='#41533b', edgecolor=None, boxstyle='round', linewidth=0.1)\n                              )\n\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                \n","8fa91c6e":"sample_ts = np.random.choice(list(train_df.breath_id.unique()), 10)\n\n#Plot the data\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,22), facecolor='#E3D6C9')\n\ncols = 2\nrows = 5\n\ngs = fig.add_gridspec(rows,cols)\ngs.update(wspace=0.3, hspace=0.4)\n\ncell_count = 0\nfor row in range(0, rows):\n    for col in range(0, cols):\n        locals()[\"ax\"+str(cell_count)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(cell_count)].set_facecolor(background_color)\n        for loc in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(cell_count)].spines[loc].set_visible(False)\n        cell_count += 1\n\ncell_count = 0\nfor breath_id in sample_ts: \n    breath_ts = train_df.loc[train_df['breath_id'] == breath_id]\n    sns.lineplot(ax=locals()[\"ax\"+str(cell_count)],data=breath_ts, x=\"time_step\", y=\"pressure\", linewidth = 3, color='#FC6238')\n    locals()[\"ax\"+str(cell_count)].set_xticks(np.arange(0,3,0.25))\n    locals()[\"ax\"+str(cell_count)].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\n    y_min = round(float(breath_ts.pressure.min()),2)\n    y_max = round(float(breath_ts.pressure.max()),2)\n    y_ticks = np.round(np.arange(y_min,y_max, 4), decimals=2)\n    locals()[\"ax\"+str(cell_count)].set_yticks(y_ticks)\n    locals()[\"ax\"+str(cell_count)].set_yticklabels(y_ticks, fontsize=font_size, fontweight='bold')\n    locals()[\"ax\"+str(cell_count)].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\n    locals()[\"ax\"+str(cell_count)].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\n    cell_count +=1\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                ","8c23127d":"def plot_samples(num_ts, rows, cols, figsize=(22,22), axes=True):\n    sample_ts = np.random.choice(list(train_df.breath_id.unique()), num_ts)\n    #Plot the data**More Samples**\n    plt.rcParams['figure.dpi'] = 600\n    background_color = '#E3D6C9'\n    fig = plt.figure(figsize=figsize, facecolor='#E3D6C9')\n\n    gs = fig.add_gridspec(rows,cols)\n    gs.update(wspace=0.3, hspace=0.4)\n\n    cell_count = 0\n    for row in range(0, rows):\n        for col in range(0, cols):\n            locals()[\"ax\"+str(cell_count)] = fig.add_subplot(gs[row, col])\n            locals()[\"ax\"+str(cell_count)].set_facecolor(background_color)\n            for loc in [\"top\",\"right\"]:\n                locals()[\"ax\"+str(cell_count)].spines[loc].set_visible(False)              \n            cell_count += 1\n\n    cell_count = 0\n    for breath_id in sample_ts: \n        breath_ts = train_df.loc[train_df['breath_id'] == breath_id]\n        sns.lineplot(ax=locals()[\"ax\"+str(cell_count)],data=breath_ts, x=\"time_step\", y=\"pressure\", linewidth = 3,color='#FC6238')\n        if axes==True:\n            locals()[\"ax\"+str(cell_count)].set_xticks(np.arange(0,3,0.25))\n            locals()[\"ax\"+str(cell_count)].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\n            y_min = round(float(breath_ts.pressure.min()),2)\n            y_max = round(float(breath_ts.pressure.max()),2)\n            y_ticks = np.round(np.arange(y_min,y_max, 4), decimals=2)\n            locals()[\"ax\"+str(cell_count)].set_yticks(y_ticks)\n            locals()[\"ax\"+str(cell_count)].set_yticklabels(y_ticks, fontsize=font_size, fontweight='bold')\n            locals()[\"ax\"+str(cell_count)].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\n            locals()[\"ax\"+str(cell_count)].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\n        else:\n            y_min = round(float(breath_ts.pressure.min()),2)\n            y_max = round(float(breath_ts.pressure.max()),2)\n            y_ticks = np.round(np.arange(y_min,y_max, 10), decimals=2) \n            locals()[\"ax\"+str(cell_count)].set_xticks(np.arange(0,3,1))\n            locals()[\"ax\"+str(cell_count)].set_yticks(y_ticks) \n            locals()[\"ax\"+str(cell_count)].set_xlabel(None)\n            locals()[\"ax\"+str(cell_count)].set_ylabel(None)\n            #locals()[\"ax\"+str(cell_count)].set_ylabel('Pressure',fontsize=12,fontweight='bold')\n            #locals()[\"ax\"+str(cell_count)].set_xlabel('Time step',fontsize=12,fontweight='bold')            \n        cell_count +=1\n    gs.tight_layout(fig, rect=[0, 0, 1, 1])\n    plt.show()                                                                \n\nplot_samples(40,4,10,axes=False)    ","15dbc2fa":"colors1 = ['#FC6238', '#FFD872','#F2D4CC','#E77577','#0065A2','#74737A']\ncolors2 = ['#3E7DCC', '#8F9CB3','#00C8C8','#F9D84A','#8CC0FF','#4D525A']\ncolors3 = ['#B29476', '#E3D6C9','#1F5C70','#FBA01D','#FCBC49','#393B45']\ncolors = ['#FC6238','#3E7DCC','#393B45']\ncolors_c = ['#E77577','#00C8C8','#1F5C70']\n#sns.palplot(sns.color_palette(colors1),size=0.9)\n#sns.palplot(sns.color_palette(colors2),size=0.9)\n#sns.palplot(sns.color_palette(colors3),size=0.9)","59d1456b":"plt.rc('legend',fontsize=24) \ndef get_breath_ids_for_R(val, num_vals):\n    val_list = list(train_df.loc[train_df['R'] == val]['breath_id'].unique())\n    return np.random.choice(val_list, num_vals)\n\n#array([20, 50,  5])\nr_arr = np.array([])\nfor r in list(train_df['R'].unique()):\n    r_arr = np.append(r_arr,get_breath_ids_for_R(r, 1))    \nr_arr = r_arr.astype(np.int)\n\nsamples_ts = train_df.loc[train_df['breath_id'].isin(r_arr)]\n\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,13), facecolor=background_color)\nfont_size = 20\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.4)\n\n\nlocals()[\"ax\"+str(0)] = fig.add_subplot(gs[0, 0])\nlocals()[\"ax\"+str(0)].set_facecolor(background_color)\nfor s in [ 'right', 'top']:\n    locals()[\"ax\"+str(0)].spines[s].set_visible(False)\n\n    #41533b\nsns.lineplot(ax=locals()[\"ax\"+str(0)],data=samples_ts, x=\"time_step\", y=\"pressure\", hue='R', linewidth = 3,palette=colors)\nlocals()[\"ax0\"].set_xticks(np.arange(0,3,0.25))\nlocals()[\"ax0\"].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\ny_min = round(samples_ts.pressure.min(),2)\ny_max = round(samples_ts.pressure.max(),2)\ny_ticks = np.round(np.arange(y_min,y_max, 4), decimals=2)\n\nlocals()[\"ax0\"].set_yticks(y_ticks)\nlocals()[\"ax0\"].set_yticklabels(y_ticks, fontsize=font_size, fontweight='bold')\nlocals()[\"ax0\"].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\nlocals()[\"ax0\"].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\n#value = \"Airway pressure in the respiratory circuit (cmH2O) at time step (second)\"\n#locals()[\"ax\"+str(0)].text(1.15, 9.5, value, ha='left', va='center', fontsize=font_size, color='White',fontweight='bold',\n#            bbox=dict(facecolor='#41533b', edgecolor=None, boxstyle='round', linewidth=0.1)\n#                              )\n\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                \n","7690ae65":"plt.rc('legend',fontsize=24) \n#Plot the data\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,22), facecolor='#E3D6C9')\n\ncols = 2\nrows = 5\n\ngs = fig.add_gridspec(rows,cols)\ngs.update(wspace=0.3, hspace=0.4)\n\ncell_count = 0\nfor row in range(0, rows):\n    for col in range(0, cols):\n        locals()[\"ax\"+str(cell_count)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(cell_count)].set_facecolor(background_color)\n        for loc in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(cell_count)].spines[loc].set_visible(False)\n        cell_count += 1\n\ncell_count = 0\nfor i in range(0,10): \n    #array([20, 50,  5])\n    r_arr = np.array([])\n    for r in list(train_df['R'].unique()):\n        r_arr = np.append(r_arr,get_breath_ids_for_R(r, 1))    \n    r_arr = r_arr.astype(np.int)\n\n    samples_ts = train_df.loc[train_df['breath_id'].isin(r_arr)]\n    sns.lineplot(ax=locals()[\"ax\"+str(cell_count)],data=samples_ts, x=\"time_step\", y=\"pressure\", linewidth = 3, hue='R', palette=colors)\n    locals()[\"ax\"+str(cell_count)].set_xticks(np.arange(0,3,0.25))\n    locals()[\"ax\"+str(cell_count)].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\n    y_min = round(float(samples_ts.pressure.min()),2)\n    y_max = round(float(samples_ts.pressure.max()),2)\n    y_ticks = np.round(np.arange(y_min,y_max, 4), decimals=2)\n    locals()[\"ax\"+str(cell_count)].set_yticks(y_ticks)\n    locals()[\"ax\"+str(cell_count)].set_yticklabels(y_ticks, fontsize=font_size, fontweight='bold')\n    locals()[\"ax\"+str(cell_count)].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\n    locals()[\"ax\"+str(cell_count)].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\n    cell_count +=1\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                ","f9e340ea":"plt.rc('legend',fontsize=24) \ndef get_breath_ids_for_C(val, num_vals):\n    val_list = list(train_df.loc[train_df['C'] == val]['breath_id'].unique())\n    return np.random.choice(val_list, num_vals)\n\n#array([20, 50,  5])\nc_arr = np.array([])\nfor c in list(train_df['C'].unique()):\n    c_arr = np.append(c_arr,get_breath_ids_for_C(c, 1))    \nc_arr = c_arr.astype(np.int)\nsamples_ts = train_df.loc[train_df['breath_id'].isin(c_arr)]\n\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,13), facecolor=background_color)\nfont_size = 20\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.4)\n\n\nlocals()[\"ax\"+str(0)] = fig.add_subplot(gs[0, 0])\nlocals()[\"ax\"+str(0)].set_facecolor(background_color)\nfor s in [ 'right', 'top']:\n    locals()[\"ax\"+str(0)].spines[s].set_visible(False)\n\n    #41533b\nsns.lineplot(ax=locals()[\"ax\"+str(0)],data=samples_ts, x=\"time_step\", y=\"pressure\", hue='C', linewidth = 3,palette=colors_c)\nlocals()[\"ax0\"].set_xticks(np.arange(0,3,0.25))\nlocals()[\"ax0\"].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\ny_min = round(samples_ts.pressure.min(),2)\ny_max = round(samples_ts.pressure.max(),2)\ny_ticks = np.round(np.arange(y_min,y_max, 4), decimals=2)\n\nlocals()[\"ax0\"].set_yticks(y_ticks)\nlocals()[\"ax0\"].set_yticklabels(y_ticks, fontsize=font_size, fontweight='bold')\nlocals()[\"ax0\"].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\nlocals()[\"ax0\"].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\n#value = \"Airway pressure in the respiratory circuit (cmH2O) at time step (second)\"\n#locals()[\"ax\"+str(0)].text(1.15, 9.5, value, ha='left', va='center', fontsize=font_size, color='White',fontweight='bold',\n#            bbox=dict(facecolor='#41533b', edgecolor=None, boxstyle='round', linewidth=0.1)\n#                              )\n\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                \n","2ef0ca72":"plt.rc('legend',fontsize=24) \n#Plot the data\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,22), facecolor='#E3D6C9')\n\ncols = 2\nrows = 5\n\ngs = fig.add_gridspec(rows,cols)\ngs.update(wspace=0.3, hspace=0.4)\n\ncell_count = 0\nfor row in range(0, rows):\n    for col in range(0, cols):\n        locals()[\"ax\"+str(cell_count)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(cell_count)].set_facecolor(background_color)\n        for loc in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(cell_count)].spines[loc].set_visible(False)\n        cell_count += 1\n\ncell_count = 0\nfor i in range(0,10): \n    c_arr = np.array([])\n    for c in list(train_df['C'].unique()):\n        c_arr = np.append(c_arr,get_breath_ids_for_C(c, 1))    \n    c_arr = c_arr.astype(np.int)\n    samples_ts = train_df.loc[train_df['breath_id'].isin(c_arr)]\n    sns.lineplot(ax=locals()[\"ax\"+str(cell_count)],data=samples_ts, x=\"time_step\", y=\"pressure\", linewidth = 3, hue='C', palette=colors_c)\n    locals()[\"ax\"+str(cell_count)].set_xticks(np.arange(0,3,0.25))\n    locals()[\"ax\"+str(cell_count)].set_xticklabels(np.arange(0,3,0.25), fontsize=font_size, fontweight='bold')\n    y_min = round(float(samples_ts.pressure.min()),2)\n    y_max = round(float(samples_ts.pressure.max()),2)\n    y_ticks = np.round(np.arange(y_min,y_max, 4), decimals=2)\n    locals()[\"ax\"+str(cell_count)].set_yticks(y_ticks)\n    locals()[\"ax\"+str(cell_count)].set_yticklabels(y_ticks, fontsize=font_size, fontweight='bold')\n    locals()[\"ax\"+str(cell_count)].set_xlabel('Time Step (seconds)',fontsize=font_size,fontweight='bold')\n    locals()[\"ax\"+str(cell_count)].set_ylabel('Pressure',fontsize=font_size,fontweight='bold')\n    cell_count +=1\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                ","ce9c7c71":"YELLOW = '#fdb913'\nplt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,13), facecolor=background_color)\nfont_size = 20\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.4)\n\n\nlocals()[\"ax\"+str(0)] = fig.add_subplot(gs[0, 0])\nlocals()[\"ax\"+str(0)].set_facecolor(background_color)\nfor s in [ 'right', 'top']:\n    locals()[\"ax\"+str(0)].spines[s].set_visible(False)\n\n    #41533b\nsns.kdeplot(ax=locals()[\"ax0\"],data = train_df, x = 'pressure',color=YELLOW, fill=True,  #cut=0, bw_method=0.20, \n                lw=1.4, edgecolor='#9e9a75',alpha=1) \nlocals()[\"ax0\"].set_xlabel('Pressure',fontsize=font_size, fontweight='bold')\nlocals()[\"ax0\"].set_ylabel('Density',fontsize=font_size, fontweight='bold')\n\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                \n","51e6da6d":"train_df['R'].value_counts()","ad3921e0":"train_df['C'].value_counts()","d10f8e75":"plt.rcParams['figure.dpi'] = 600\nbackground_color = '#E3D6C9'\nfig = plt.figure(figsize=(22,13), facecolor=background_color)\nfont_size = 20\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.4)\n\n\nlocals()[\"ax\"+str(0)] = fig.add_subplot(gs[0, 0])\nlocals()[\"ax\"+str(0)].set_facecolor(background_color)\nfor s in [ 'right', 'top']:\n    locals()[\"ax\"+str(0)].spines[s].set_visible(False)\n\n    #41533b\nsns.kdeplot(ax=locals()[\"ax0\"],data = train_df, x = 'u_in',color='#41533b', fill=True,  #cut=0, bw_method=0.20, \n                lw=1.4, edgecolor='#9e9a75',alpha=1) \nlocals()[\"ax0\"].set_xlabel('u_in',fontsize=font_size, fontweight='bold')\nlocals()[\"ax0\"].set_ylabel('Density',fontsize=font_size, fontweight='bold')\n\ngs.tight_layout(fig, rect=[0, 0, 1, 1])\nplt.show()                                                                \n","65106ed1":"**No Missing values**","49dd5c2c":"**And few more samples...**","4a1a9d5b":"<a id='0'><\/a>\n## <p style=\"background-color:#fdb913; font-family:Computer Modern;src: url('http:\/\/mirrors.ctan.org\/fonts\/cm-unicode\/fonts\/otf\/cmunss.otf'); font-size:100%; text-align:center\">Introduction<\/p>\nIn this competition we need to predict the airway pressure in the respiratory circuit at each time step. The input features are the lung parameters and attributes of the ventilator    \n<div>\n\n<div align=\"center\">\n    <img src=\"https:\/\/raw.githubusercontent.com\/google\/deluca-lung\/main\/assets\/2020-10-02%20Ventilator%20diagram.svg\"  width=\"700\" height=\"200\">\n<\/div>    \n\nAs shown in the above diagram (provided in the data section) following are the two attributes that describe the condition of the patient\n    \n* R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n* C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n\nFollowing are the ventilator parameters\n* u_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n* u_out - the control input for the exploratory solenoid valve. Either 0 or 1.\n\nAnd following is the target variable that we need to predict\n    \n* pressure - the airway pressure measured in the respiratory circuit, measured in cmH2O. for each given time_step of the series\n\n[back to top](#0)","2c564591":"### Lets look at the time series based on \"C\" values","ee297d19":"### Lets look at the time series based on \"R\" values","48819386":"<a id='0'><\/a>\n\n<h3>Table of contents<\/h3>\n\n* [Introduction](#1)\n* [Load Data](#2)        \n* [Sample time series](#3)        \n* [Distribution of variables](#4)     \n","ee07b5f3":"**Work in progress. Please consider upvoting if it helps**","8f51b903":"**To be continued..**","3d7ea4bb":"**More Samples**","7a516adc":"<a id='4'><\/a>\n## <p style=\"background-color:#fdb913; font-family:Computer Modern;src: url('http:\/\/mirrors.ctan.org\/fonts\/cm-unicode\/fonts\/otf\/cmunss.otf'); font-size:100%; text-align:center\">Distribution variables<\/p>\n<div>\n    \n[back to top](#0)","961ae3c1":"<a id='1'><\/a>\n## <p style=\"background-color:#fdb913; font-family:Computer Modern;src: url('http:\/\/mirrors.ctan.org\/fonts\/cm-unicode\/fonts\/otf\/cmunss.otf'); font-size:100%; text-align:center\"> Load Data<\/p>\n<div>\n\n[back to top](#0)    ","b0de0d3d":"<a id='3'><\/a>\n## <p style=\"background-color:#fdb913; font-family:Computer Modern;src: url('http:\/\/mirrors.ctan.org\/fonts\/cm-unicode\/fonts\/otf\/cmunss.otf'); font-size:100%; text-align:center\"> Sample time series from training data<\/p>\n<div>\n    \nThe training data consists of time series data. Each time series represents approximately 3-second breath. \n    \n[back to top](#0)"}}