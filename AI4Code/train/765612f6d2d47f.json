{"cell_type":{"dafd9934":"code","8338b599":"code","171fa3cf":"code","4028eb50":"code","c1cda8b0":"code","4171e9d3":"code","b6dc4a73":"code","d7215f5f":"code","74710bb3":"code","b9695961":"code","5bb86a79":"code","a482ca0c":"code","c43965f8":"code","12aaecab":"markdown","d73f98ad":"markdown","b6e44bb4":"markdown","6a3a765a":"markdown","a7f95f36":"markdown","88eb5730":"markdown","f47cd758":"markdown","de6430d2":"markdown","2d52439e":"markdown","feeeaa9b":"markdown","fea7298a":"markdown","d0e0a21f":"markdown","1784723f":"markdown"},"source":{"dafd9934":"from sklearn.preprocessing import MinMaxScaler\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","8338b599":"df = pd.read_csv('\/kaggle\/input\/jbnu-bigdata-seq\/train.csv',engine='python')\ndf.head()","171fa3cf":"df_date = df['Date(MM\/DD\/YYYY)'].tolist()\nmonth = list()\nday = list()\nyear = list()\n\nfor date in df_date:\n    a = date.split('\/')\n    month.append(a[0])\n    day.append(a[1])\n    year.append(a[2])\n\ndf.drop('Date(MM\/DD\/YYYY)', axis=1, inplace=True)\ndf.loc[:,'Month']=pd.Series(month, index=df.index)\ndf.loc[:,'Day']=pd.Series(day, index=df.index)\ndf.loc[:,'Year']=pd.Series(year, index=df.index)\ndf","4028eb50":"column_names = ['Month','Day','Hour','Solar Radiance(w\/m^2)','Temperature(C)','Solar Power(kW)']\n\nsplit_idx = 87359\ntrain = df.loc[:split_idx, column_names]\ntrain","c1cda8b0":"valid = df.loc[split_idx+1:split_idx+8904, column_names]\nvalid","4171e9d3":"shift_hours = 24*7\n\nx_train = train[:-shift_hours]\ny_train = train[shift_hours:]\ny_train = y_train[['Solar Radiance(w\/m^2)','Temperature(C)','Solar Power(kW)']]\n\nx_valid = valid[:-shift_hours]\ny_valid = valid[shift_hours:]\ny_valid = y_valid[['Solar Radiance(w\/m^2)','Temperature(C)','Solar Power(kW)']]\n\nx_train = x_train.astype(float)\ny_train = y_train.astype(float)\nx_valid = x_valid.astype(float)\ny_valid = y_valid.astype(float)\n\nx_train = x_train.values\ny_train = y_train.values\nx_valid = x_valid.values\ny_valid = y_valid.values","b6dc4a73":"x_train = x_train.reshape(int(x_train.shape[0]\/shift_hours), shift_hours, len(column_names))\ny_train = y_train.reshape(int(y_train.shape[0]\/shift_hours), shift_hours, 3)\n\nx_valid = x_valid.reshape(int(x_valid.shape[0]\/shift_hours), shift_hours, len(column_names))\ny_valid = y_valid.reshape(int(y_valid.shape[0]\/shift_hours), shift_hours, 3)","d7215f5f":"plt.figure(1)\nplt.plot(x_train[1])\n\nplt.figure(2)\nplt.plot(y_train[0])\n\nplt.figure(3)\nplt.plot(x_train[2])\n\nplt.figure(4)\nplt.plot(y_train[1])","74710bb3":"from tensorflow import keras\nfrom keras.layers import LSTM, Dense\nfrom keras.models import Sequential\nfrom keras import optimizers\nfrom keras.callbacks import EarlyStopping\nimport keras.backend as K\n\nK.clear_session()\nmodel = Sequential()\nmodel.add(LSTM(20, activation='relu', input_shape=(shift_hours, len(column_names)), return_sequences=True))\nmodel.add(Dense(3))\nadam = keras.optimizers.Adam(learning_rate = 0.001)\nmodel.compile(loss='mean_squared_error', optimizer=adam, metrics=['accuracy'])\n\nmodel.summary()\nearly_stop = EarlyStopping(monitor='loss', patience=100, verbose=1)\n\nhist = model.fit(x_train, y_train, validation_data=(x_valid, y_valid), epochs=10, batch_size=10, verbose=1, callbacks=[early_stop])\ny_pred = model.predict(x_valid)","b9695961":"plt.figure(1)\nplt.plot(hist.history['loss'], 'y', label='train loss')\nplt.plot(hist.history['val_loss'], 'r', label='val loss')\n\nplt.figure(2)\nplt.plot(hist.history['accuracy'], 'b', label='train acc')\nplt.plot(hist.history['val_accuracy'], 'g', label='val acc')","5bb86a79":"plt.figure(1)\nplt.plot(y_pred[0])\nplt.plot(y_valid[0])\n\nplt.figure(2)\nplt.plot(y_pred[1])\nplt.plot(y_valid[1])","a482ca0c":"submission_df = pd.read_csv('\/kaggle\/input\/jbnu-bigdata-seq\/sample_submission.csv',engine='python')\nsubmission_df.head()","c43965f8":"submission_df.to_csv('\/kaggle\/working\/submission.csv', index=False)","12aaecab":"### LSTM \uae30\ubc18 \ud559\uc2b5 \uc2e4\ud589\n* LSTM \uc678\uc5d0\ub3c4 \ub2e4\uc591\ud55c Neural Network Model \uc801\uc6a9 \uac00\ub2a5\n* \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \ud544\uc694","d73f98ad":"### (\ucd5c\uc885) 'sample_submission.csv' \ud30c\uc77c\uc758 \uad6c\uc870\ub97c \ucc38\uace0\ud560\uac83\n### 'test (2020).csv' \uc758 \uad6c\uac04(2\uc6d4~12\uc6d4 \uccab\uc9f8\uc8fc, \ucd1d77\uc77c(1,848\uc2dc\uac04))\uc5d0 \ub300\ud574 Solar Radiance, Temperature, Solar Power \uac12\uc744 \uc608\uce21 \ud6c4 ID, Month, Day, Hour \uc640 \ud568\uaed8 \uae30\uc785\ud558\uc5ec, 'submission.csv' \ub85c \uc81c\ucd9c","b6e44bb4":"### submission \ud30c\uc77c \uc81c\ucd9c\ud558\uae30","6a3a765a":"### Pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c \ud559\uc2b5 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","a7f95f36":"### \uce21\uc815\uac12\uacfc \uc608\uce21\uac12\uc744 \uadf8\ub798\ud504\ub85c \ud45c\uc2dc","88eb5730":"### (\ucd94\uac00) training data set \uacfc validation data set \uc5d0 \ub300\ud55c normalization \uc791\uc5c5 \uc218\ud589 \ud544\uc694\n* training data set \uacfc validation data set \uc758 \ube44\uc728\uc740 \uc790\uc720\ub86d\uac8c \uc870\uc815 \uac00\ub2a5","f47cd758":"### \ud559\uc2b5\uc744 \uc704\ud55c dimension \uc870\uc815","de6430d2":"### Date \uc5f4\uc758 \uc6d4\/\uc77c\/\uc5f0\ub3c4 Parsing","2d52439e":"### \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ub808\uc774\ube14\uc758 \ube44\uad50 \uadf8\ub798\ud504","feeeaa9b":"### labeling \uc791\uc5c5 \uc218\ud589\n* \uc785\ub825 \ub370\uc774\ud130\uc640 \ub808\uc774\ube14\uc5d0 \ub300\ud55c shift_hours \ub294 \uc790\uc720\ub86d\uac8c \uc218\uc815\ud560 \uc218 \uc788\ub2e4.","fea7298a":"### training data set \uad6c\uc131","d0e0a21f":"### validation data set \uad6c\uc131","1784723f":"### (\ucd94\uac00) \uc13c\uc11c\uc758 noise \ub85c \uc778\ud574 Solar Radiance \uc5f4\uc5d0 \uc624\ub958\ub85c\uc11c \uc74c\uc218\uac12\uc774 \uc874\uc7ac\ud568, \ub530\ub77c\uc11c \uc74c\uc218\ub97c 0 \uc73c\ub85c \ubc14\uafd4\uc8fc\ub294 \uc804\ucc98\ub9ac \uc791\uc5c5\uc774 \ud544\uc694\ud568"}}