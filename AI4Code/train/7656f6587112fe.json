{"cell_type":{"39c0d937":"code","fb721680":"code","3a570bdc":"code","f9fa20b5":"code","2ea1b2ba":"code","27547d3f":"code","92ce3155":"code","adcdfab2":"code","c9905c7f":"code","085a2972":"code","53f6a396":"markdown","faf9fb40":"markdown","8580012b":"markdown","a1dcc3ae":"markdown","5ff682cb":"markdown","1996f957":"markdown","4f398d04":"markdown","b202dbb8":"markdown","a7a8a555":"markdown","447d7417":"markdown","30d351ee":"markdown","9527ff66":"markdown","464ccdb3":"markdown","79145263":"markdown","7444c134":"markdown","adf8e77e":"markdown"},"source":{"39c0d937":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n\n!pip install map-boxes\n\nfrom map_boxes import mean_average_precision_for_boxes\n\n","fb721680":"import pandas as pd\n\nann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10]\n        }\n\ndet_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1'],\n            'Conf':[1,1,1,1,1,1,1,1,1],\n            'XMin':[1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)\n","3a570bdc":"\nann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10]\n        }\n\ndet_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'Conf':[1,1,1,1,1,1,1,1,1,0.9],\n            'XMin':[1,1,1,1,1,1,1,1,1,11],\n            'XMax':[10,10,10,10,10,10,10,10,10,20],\n            'YMin':[1,1,1,1,1,1,1,1,1,11],\n            'YMax':[10,10,10,10,10,10,10,10,10,20]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)","f9fa20b5":"\nann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10]\n        }\n\ndet_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'Conf':[0.8,0.8,0.8,0.8,1,1,1,1,1,0.9],\n            'XMin':[1,1,1,1,1,1,1,1,1,11],\n            'XMax':[10,10,10,10,10,10,10,10,10,20],\n            'YMin':[1,1,1,1,1,1,1,1,1,11],\n            'YMax':[10,10,10,10,10,10,10,10,10,20]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)","2ea1b2ba":"ann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10]\n        }\n\ndet_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'Conf':[0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.9],\n            'XMin':[1,1,1,1,1,1,1,1,1,11],\n            'XMax':[10,10,10,10,10,10,10,10,10,20],\n            'YMin':[1,1,1,1,1,1,1,1,1,11],\n            'YMax':[10,10,10,10,10,10,10,10,10,20]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)","27547d3f":"from random import *\n\nann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nimage_id_list = []\nlabel_name_list = []\nconf_list = []\nxmin_list = []\nxmax_list = []\nymin_list = []\nymax_list = []\n\nimage_id=0\n\nfor i, ann in ann_df.iterrows():\n    image_id_list.append(str(i))\n    ground_truth_label=ann['LabelName']\n    rnd=random()\n    if (ground_truth_label == '1'):\n        if rnd  < 0.9:\n            label_name_list.append('1')\n        else:\n            label_name_list.append('18')\n    else:\n        if rnd  < 0.9:\n            label_name_list.append('18')\n        else:\n            label_name_list.append('1')\n    conf_list.append(random())\n    xmin_list.append(1)\n    xmax_list.append(10)\n    ymin_list.append(1)\n    ymax_list.append(10) \n\n\ndet_data = {'ImageID':   image_id_list,\n            'LabelName': label_name_list,\n            'Conf':conf_list,\n            'XMin':xmin_list,\n            'XMax':xmax_list,\n            'YMin':ymin_list,\n            'YMax':ymax_list\n        }\n\n\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)","92ce3155":"ann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1','18','18','18','18','18','18','18','18','18','18'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nimage_id_list = []\nlabel_name_list = []\nconf_list = []\nxmin_list = []\nxmax_list = []\nymin_list = []\nymax_list = []\n\nimage_id=0\n\nfor i, ann in ann_df.iterrows():\n    image_id_list.append(str(i))\n    ground_truth_label=ann['LabelName']\n    rnd=random()\n    if (ground_truth_label == '1'):\n        if rnd  < 0.9:\n            label_name_list.append('1')\n        else:\n            label_name_list.append('18')\n    else:\n        if rnd  < 0.9:\n            label_name_list.append('18')\n        else:\n            label_name_list.append('1')\n    conf_list.append(random())\n    xmin_list.append(1)\n    xmax_list.append(10)\n    ymin_list.append(1)\n    ymax_list.append(10) \n\n\ndet_data = {'ImageID':   image_id_list,\n            'LabelName': label_name_list,\n            'Conf':conf_list,\n            'XMin':xmin_list,\n            'XMax':xmax_list,\n            'YMin':ymin_list,\n            'YMax':ymax_list\n        }\n\n\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)","adcdfab2":"ann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'],\n            'LabelName': ['1','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nimage_id_list = []\nlabel_name_list = []\nconf_list = []\nxmin_list = []\nxmax_list = []\nymin_list = []\nymax_list = []\n\nimage_id=0\n\nfor i, ann in ann_df.iterrows():\n    image_id_list.append(str(i))\n    ground_truth_label=ann['LabelName']\n    rnd=random()\n    if (ground_truth_label == '1'):\n        if rnd  < 0.9:\n            label_name_list.append('1')\n        else:\n            label_name_list.append('18')\n    else:\n        if rnd  < 0.9:\n            label_name_list.append('18')\n        else:\n            label_name_list.append('1')\n    conf_list.append(random())\n    xmin_list.append(1)\n    xmax_list.append(10)\n    ymin_list.append(1)\n    ymax_list.append(10) \n\n\ndet_data = {'ImageID':   image_id_list,\n            'LabelName': label_name_list,\n            'Conf':conf_list,\n            'XMin':xmin_list,\n            'XMax':xmax_list,\n            'YMin':ymin_list,\n            'YMax':ymax_list\n        }\n\n\ndet_df = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nprint (ann_df)\nprint (det_df)\n\n\nmean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df)","c9905c7f":"ann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'],\n            'LabelName': ['1','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18','18'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\n\ndef make_det(adf):\n# produce a set of predictions for the elements of adf with 90% probability of correctness\n    image_id_list = []\n    label_name_list = []\n    conf_list = []\n    xmin_list = []\n    xmax_list = []\n    ymin_list = []\n    ymax_list = []\n\n    image_id=0\n\n    for i, ann in adf.iterrows():\n        image_id_list.append(str(i))\n        ground_truth_label=ann['LabelName']\n        rnd=random()\n        if (ground_truth_label == '1'):\n            if rnd  < 0.9:\n                label_name_list.append('1')\n            else:\n                label_name_list.append('18')\n        else:\n            if rnd  < 0.9:\n                label_name_list.append('18')\n            else:\n                label_name_list.append('1')\n        conf_list.append(random())\n        xmin_list.append(1)\n        xmax_list.append(10)\n        ymin_list.append(1)\n        ymax_list.append(10) \n\n\n    det_data = {'ImageID':   image_id_list,\n                'LabelName': label_name_list,\n                'Conf':conf_list,\n                'XMin':xmin_list,\n                'XMax':xmax_list,\n                'YMin':ymin_list,\n                'YMax':ymax_list\n            }\n\n\n    ddf = pd.DataFrame (det_data, columns = ['ImageID', 'LabelName','Conf', 'XMin', 'XMax', 'YMin', 'YMax'])\n    return ddf\n\nsum_ap = 0\nfor i in range(1000):\n    det_df = make_det(ann_df)\n    mean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df,verbose = False)\n    sum_ap = sum_ap + average_precisions['1'][0]\n    \n\nprint(sum_ap)    \n    \n    \n    ","085a2972":"ann_data = {'ImageID':    ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'],\n            'LabelName': ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','18','18','18','18','18'],\n            'XMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'XMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\n            'YMin':[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n            'YMax':[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n        }\n\nann_df = pd.DataFrame (ann_data, columns = ['ImageID', 'LabelName', 'XMin', 'XMax', 'YMin', 'YMax'])\n\nsum_ap = 0\nfor i in range(1000):\n    det_df = make_det(ann_df)\n    mean_ap, average_precisions = mean_average_precision_for_boxes(ann_df, det_df,verbose = False)\n    sum_ap = sum_ap + average_precisions['1'][0]\n    \n\nprint(sum_ap)    ","53f6a396":"Start with something simple:\n\nThere are 10 images and one label\n\nEach of the ground truth (ann) image has exactly one instance of the label\n\n9 of the images are detected (det)\n\nBounding boxes are always the same values (like having one cell per image in the HPA competition)","faf9fb40":"Running this a few times you will see scores of 1, 0.9, 0.8, 0.7 ... depending on how the random numbers turns out\n\n(note that there are no ground truth negatives here and no differing bounding boxes, so it is like the HPA case of one cell per image, and all cells classified with the label '1' - In this case the AP directly corresponds to the intuition of percentage correct identifications)\n","8580012b":"Now let's make some of the true positives less confident than the false positive by changeing 'Conf'","a1dcc3ae":"now only 0.81, although we still got 90% right !","5ff682cb":"So we found nine out of 10 and got 90% score - pretty intuitive so far","1996f957":"This notebook explores the AP scores for a 90% accurate prediction.\n\nIt shows that the AP score is significantly dependent on the confidence scores attributed to false positives and true positives.\n\nFurther, it shows that this effect is greater for rarely ocurring classes than for commonly occurring classes.\n\nIf the confidence is successfully allocated such that false positives are less confident than true positives, then AP will correspond to the intuitive notion of the accuracy of the test (here 90%).\n\nHowever, if the confidence is not successfully allocated, then particularly for rare labels, the AP score may be heavily penalised.\n","4f398d04":"Acknowledgments\n\nThanks to @Tito and @ZFTurbo for ZFTurbo's mAP code and Tito's explanation of it in:\n\nhttps:\/\/www.kaggle.com\/c\/hpa-single-cell-image-classification\/discussion\/217158","b202dbb8":"ok, so lets model a working detection solution, with the following characteristics:\n\nGiven a ground truth positive, detects positive with 90% probability\n\nGiven a ground truth negative (using label 18 as in HPA competition for 'Negative' label), detects positive with 10% probability","a7a8a555":"and if we make all our true positives less confident than our false negative:","447d7417":"Now, lets get 9 right and also detect a false positive (by using a different bounding box)\n\nWe give it a lower confidence, (plausible since it is a wrong detection)","30d351ee":"That still got 90% still intuitive","9527ff66":"Lets add some further ground truth negatives:","464ccdb3":"If you exercise this a few times, you will see that, depending on the random numbers, the score is often high, but can also get quite low\n\nFor instance, my first execution of this version gave:\n\n1                              | 0.466667 |      10\n\n18                             | 0.626190 |      10\n\nmAP: 0.546429\n\nSo although our detection is designed to behave with 90% accuracy, the AP for label 1 was less that 0.5 and the overall mAP was 0.54 !\n\nOk, that was just bad luck, so we need to bring probabilities into it.\n\nThis is reminiscent of the much cited case of a test for a rare disease where the probability of actually having the disease given that a fairly reliable test was positive is intuitively expected to be higher than it is.  The reason is Bayes theorem and the low probability of actually having the disease and therefore relatively high probability of a false positive test rather than a true positive test.\n\nSo now, lets do just that: make label 1 rare, only one in 20:\n","79145263":"well, I had to run it quite a few times to get one with a false negative\n\nand then the score was:\n\nAnnotations length: 20\n\n1                              | 0.000000 |       1\n\n18                             | 0.814241 |      19\n\nmAP: 0.407121\n\nand when I had a true positive, the high \"label 1 score\" for detecting label 1 correctly was often dragged down by several false positives that had greater Conf than the true positive\n","7444c134":"Now let:\n\np = number of cells having ground truth label 1\n\nn  = number of cells in the test set\n\nthen:\n\nexpected number of label 1 true positives: 0.9 * p\n\nexpected number of label 1 false positives: 0.1 * (n-p)\n\nlooking at a specific case where these expected results occur, If all the false positives have a lower \nconfidence than all the true positives then the false positives are ignored (end of the curve)\nbecause the precision stays at 1 over the whole range of recall from 0 to 0.9, giving area under the curve of 1 * 0.9 = 0.9\n\nHowever, if the false positives all have higher confidence than the true positives, then when the first\ntrue positive is found, the accuracy is:\n\nnumber of correct answers \/ number of predictions\n\n= 1 \/ (number of false positives + 1)\n\nand as each further true positive is found (increasing recall), this grows to:\n\n= (number of true positives) \/ (number of false positives + number of true positives)\n\n= 0.9 * p \/ (( 0.1 * (n-p)) * (0.9 * p))\n\n= 0.9 * p \/ ( (0.1 * n) + (0.8 * p) )\n\n= 0.9 \/ ( 0.1 * (n\/p) ) + 0.8 )                  [assuming p != 0 , in which case the accuracy would be zero]\n\nso as p approaches n the score approaches 0.9 \/ (0.1+0.8) = 1\n\nbut as p approaches one, n\/p will approch n and the score will become small if n is large\n\nSo to conclude: \nThe relative confidence allocated to true positives and false positives is important.\nIf the confidence is successfully allocated such that false positives are less confident than true positives, then AP will correspond to the intuitive notion of the accuracy of the test (here 90%).\n\nHowever, if the confidence is not successfully allocated, then particularly for rare labels, the AP score may be heavily penalised.\n\n\nThe next two code cells run an experiment to check this in practice, since the above argument doesn't treat the different distributions of conf scores.\n\nIn both cells, the function make_det makes 90% correct predictions as above and is called 1000 times to get a representative result over the randomly created predictions and Conf scores.\n\nIn both cells n=20, in the first experiment, p=1 (label 1 is rare), and in the seconde p=15 (label 1 is common)\n\nResult:\n\nWith p=1 AP is around 0.60 and with p=15 AP is around 0.88 so we see that with the same 90% accuracy of test the AP score of the rare label is lower.\n","adf8e77e":"Aha: lost some score on that, now only 0.86"}}