{"cell_type":{"6590e500":"code","9cfd0c81":"code","467d03c3":"code","eacf54a4":"code","672be2d1":"code","ab411f91":"code","74ecdd01":"code","246e6e21":"code","92314593":"code","a3eca5aa":"code","42629e3c":"code","32c7ab3e":"code","949ab9e9":"code","70965ec3":"code","f8466333":"code","19407574":"code","50f78d98":"code","9b2835bb":"code","d42de565":"code","f7920043":"code","f74773d9":"code","cbeb92ff":"code","9f966506":"code","2114d742":"code","6a69c37b":"code","4d047663":"code","fbad4741":"code","0a3a4c87":"code","77e15cd1":"code","18285c0e":"code","c50f8cd9":"code","90c49436":"code","658da180":"code","b9ab2a46":"code","293bdb7b":"code","9b919206":"code","c9e9299d":"code","ddd2fd9b":"code","a7b12cfa":"code","c8af4393":"code","fdc37e5f":"code","28fe8a7e":"code","a1fc3ea4":"code","51b4731b":"code","4beebfb9":"code","f172f22c":"code","d31990a0":"code","d90e23bc":"code","0cad998e":"code","1658abc4":"code","a89a2216":"code","e5bcf2de":"code","cb48d203":"code","c6cbb16d":"code","812aeb16":"code","3c731b0b":"code","f9074f5f":"code","a5c867e8":"code","75d2d85e":"markdown","3026634e":"markdown","4220c7b2":"markdown","3654bd15":"markdown","3eb51c1b":"markdown","75eae3a8":"markdown","90eab64b":"markdown","0e31f0f2":"markdown","3399f766":"markdown","68bb0b0b":"markdown","5a82c317":"markdown","da390550":"markdown","2d9d4ac0":"markdown","d31db0e2":"markdown","7c6fb9be":"markdown","35c0c3ce":"markdown","6d654085":"markdown","7d98acda":"markdown","e14b05ab":"markdown","92fa4dd6":"markdown","11682040":"markdown","31de0fe3":"markdown","d9d8f054":"markdown","6e1034cd":"markdown","cf9eae13":"markdown","d0ff8576":"markdown","892eccfb":"markdown","547c3ec8":"markdown"},"source":{"6590e500":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9cfd0c81":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\nSubmission=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","467d03c3":"train","eacf54a4":"import seaborn as sns\nfrom matplotlib import pyplot as plt","672be2d1":"train.isnull().sum()\nsns.heatmap(train.isnull(), cbar = True).set_title(\"Missing values heatmap\")\nplt.gcf().set_size_inches(16,6)","ab411f91":"train.nunique()","74ecdd01":"train.describe()","246e6e21":"X=train[\"Survived\"].value_counts().index\nY=train[\"Survived\"].value_counts()\nplt.style.use(\"fivethirtyeight\")\nmyexplode=(0.0,0.1)\nmylabel=[\"Not survived (0)\",\"Survived(1)\"]\ncolors=['#f4acb7','#9d8189']\nplt.pie(Y,labels=mylabel,autopct=\"%1.1f%%\",startangle=15,shadow=True,explode=myexplode,colors=colors)\nplt.axis(\"equal\")\nplt.gcf().set_size_inches(12,6)\nplt.show()","92314593":"hue_color={0:'#012a4a',1:'#2c7da0'}\nPclass=['class1','class2','class3']\nplt.style.use(\"fivethirtyeight\")\nax=sns.countplot(data=train,x='Pclass',hue='Survived',palette=hue_color)\nplt.xticks(ticks = [0,1,2], labels = Pclass)\nplt.legend(['Percentage not survived or unknown', 'Percentage of survived'])\nplt.gcf().set_size_inches(12,6)\nplt.show()","a3eca5aa":"\nY=train[\"Sex\"].value_counts()\nmyexplode=(0.0,0.1)\nplt.style.use(\"fivethirtyeight\")\nmylabel=[\"Male\",\"Female\"]\ncolors = ['#E63946', '#F1FAEE']\nplt.pie(Y,labels=mylabel,autopct=\"%1.1f%%\",startangle=15,shadow=True,explode=myexplode,colors=colors)\nplt.axis(\"equal\")\nplt.gcf().set_size_inches(12,6)\nplt.show()","42629e3c":"hue_color={0:'#8D99AE',1:'#ef233c'}\nSex=['Male','Female']\nplt.style.use(\"fivethirtyeight\")\nax=sns.countplot(data=train,x='Sex',hue='Survived',palette=hue_color)\nplt.xticks(ticks = [0,1], labels = Sex)\nplt.legend(['Percentage not survived or unknown', 'Percentage of survived'])\nplt.gcf().set_size_inches(12,6)\nplt.show()","32c7ab3e":"sns.countplot(x=train['Survived'],hue=pd.cut(train['Age'],5))\nplt.style.use(\"fivethirtyeight\")\nplt.gcf().set_size_inches(12,6)","949ab9e9":"Y=train[\"SibSp\"].value_counts()\nmyexplode=(0.0,0.1,0.2,0.4,0.1,0.3,0.4)\nplt.style.use(\"fivethirtyeight\")\nmylabel=[0,1,2,3,4,5,8]\ncolors = ['#ede0d4','#e6ccb2','#ddb892','#b08968','#7f5539','#9c6644','#dda15e']\nplt.pie(Y,labels=mylabel,autopct=\"%1.1f%%\",startangle=15,shadow=True,explode=myexplode,colors=colors)\nplt.axis(\"equal\")\nplt.gcf().set_size_inches(12,6)\nplt.show()","70965ec3":"hue_color={0:'#555b6e',1:'#89b0ae'}\nplt.style.use(\"fivethirtyeight\")\nax=sns.countplot(data=train,x='SibSp',hue='Survived',palette=hue_color)\n# plt.xticks(ticks = [0,1], labels = Sex)\nplt.legend(['Percentage not survived or unknown', 'Percentage of survived'])\nplt.gcf().set_size_inches(12,6)\nplt.show()","f8466333":"hue_color={0:'#585123',1:'#eec170'}\nplt.style.use(\"fivethirtyeight\")\nax=sns.countplot(data=train,x='Parch',hue='Survived',palette=hue_color)\n# plt.xticks(ticks = [0,1], labels = Sex)\nplt.legend(['Percentage not survived or unknown', 'Percentage of survived'])\nplt.gcf().set_size_inches(12,6)\nplt.show()","19407574":"# we take the values of bins from the statistical analysis of colum 'Fare'\ntrain['Fare_Category'] = pd.cut(train['Fare'], bins=[0,7.90,14.45,31.28,120], labels=['Low','Mid','High_Mid','High'])\ntrain","50f78d98":"hue_color={0:'#14213d',1:'#fca311'}\nFare_category=['Low','Mid','High_Mid','High']\nplt.style.use(\"fivethirtyeight\")\nax=sns.countplot(data=train,x='Fare_Category',hue='Survived',palette=hue_color)\nplt.legend(['Percentage not survived or unknown', 'Percentage of survived'])\nplt.gcf().set_size_inches(12,6)\nplt.show()","9b2835bb":"Y=train[\"Embarked\"].value_counts()\nmyexplode=(0.0,0.1,0.0)\nplt.style.use(\"fivethirtyeight\")\nmylabel=['Southampton','Cherbourg','Queenstown']\ncolors = ['#a5a58d', '#6b705c','#3f4238']\nplt.pie(Y,labels=mylabel,autopct=\"%1.1f%%\",startangle=15,shadow=True,explode=myexplode,colors=colors)\nplt.gcf().set_size_inches(12,6)\nplt.show()","d42de565":"\nsns.countplot(x=train['Embarked'],hue=train['Survived'])\nplt.style.use(\"fivethirtyeight\")\nplt.gcf().set_size_inches(12,6)","f7920043":"train=train.iloc[:,:12]\ntrain","f74773d9":"train.drop(\"Cabin\",axis=1,inplace=True)","cbeb92ff":"# Create new feature Salutation to fill the null values of age column \nimport re\ndef split_it(data):\n    result = re.search('^.*,(.*)\\.\\s.*$', data)\n    if result.group(1) not in [' Mr', ' Miss', ' Mrs', ' Master']:\n        return ' Misc'\n    else:\n        return result.group(1)\n\ntrain['Salutation'] = train['Name'].apply(split_it)","9f966506":"test['Salutation'] = test['Name'].apply(split_it)\n# test.loc[test['PassengerId'] == 514, 'Title'] = ' Mrs'","2114d742":"train","6a69c37b":"#Using Salutation feature, I fill the null values of age according to the title (MR,Mrs,Master,Miss )\ntrain[\"Age\"].fillna(train.groupby(\"Salutation\")[\"Age\"].transform(\"median\"), inplace=True)","4d047663":"#Create new feature Surname to fill the null values of Embarked column\ntrain['Surname'] = train.Name.map(lambda x: x.split(',')[0])","fbad4741":"train","0a3a4c87":"train[train.Embarked.isna()]","77e15cd1":"#From google I came to this point that mostly the people with surname Icard and Stone belongs from Ireland and France\nto_map = {'Icard': 'C',\n          'Stone': 'S'}\n\ntrain.Embarked.fillna(train.Surname.map(to_map),\n                      inplace = True)\n","18285c0e":"train['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)","c50f8cd9":"train.isnull().sum()","90c49436":"train","658da180":"# Change the values of sex column to categorical values\ntrain['Sex'].replace({'male':0,'female':1},inplace=True)","b9ab2a46":" train.drop(['Ticket','PassengerId','Name','Salutation',\"Fare\",'Surname'],axis=1,inplace=True)","293bdb7b":"train","9b919206":"test","c9e9299d":"test[\"Age\"].fillna(test.groupby(\"Salutation\")[\"Age\"].transform(\"median\"), inplace=True)","ddd2fd9b":"test['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)","a7b12cfa":" test.isnull().sum()","c8af4393":"test['Sex'].replace({'male':0,'female':1},inplace=True)","fdc37e5f":" test.drop(['Ticket','PassengerId','Name','Cabin','Salutation',\"Fare\"],axis=1,inplace=True)","28fe8a7e":" test","a1fc3ea4":"train","51b4731b":" X=train.drop(['Survived'],axis='columns')","4beebfb9":"y=train['Survived']","f172f22c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","d31990a0":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n","d90e23bc":"model1=LogisticRegression()\nmodel1.fit(X_train,y_train)\npred=model1.predict(X_test)\nlog_acc=accuracy_score(pred,y_test);\nprint(log_acc)\n","0cad998e":"from sklearn.ensemble import RandomForestClassifier\nmodel2=RandomForestClassifier(n_estimators = 50)\nmodel2.fit(X_train,y_train)\npred_2=model2.predict(X_test)\nrcf=accuracy_score(pred_2,y_test);\nprint(rcf)\n","1658abc4":"from sklearn import tree\nmodel3=tree.DecisionTreeClassifier()\nmodel3.fit(X_train,y_train)\npred_3=model3.predict(X_test)\ndtc=accuracy_score(pred_3,y_test);\nprint(dtc)\n","a89a2216":"from sklearn.neighbors import KNeighborsClassifier\nmodel4=KNeighborsClassifier(n_neighbors=9)\nmodel4.fit(X_train,y_train)\npred_4=model4.predict(X_test)\nknn=accuracy_score(pred_4,y_test);\nprint(knn)\n","e5bcf2de":"print(\"Accuracy of Logistic Regression : \",log_acc)\nprint(\"Accuracy of Decision Tree Classifier : \",dtc)\nprint(\"Accuracy of KNN Classifier : \",knn)\nprint(\"Accuracy of Random Forest Classifier : \",rcf)\nmodels_acc=[log_acc,dtc,knn,rcf]\nnames_of_models=['LogisticRegression','DecisionTreeClassifier','KNearestNeighbour','RandomForestClassifier']\nsns.barplot(y=names_of_models,x=models_acc)\nplt.gcf().set_size_inches(8,4)\nplt.xlim([0.6,1.0])","cb48d203":"model1.fit(X,y)","c6cbb16d":"test","812aeb16":"Submission","3c731b0b":" submission=pd.DataFrame({\"PassengerId\": Submission[\"PassengerId\"],\"Survived\":pred})","f9074f5f":" submission","a5c867e8":" submission.to_csv('submission.csv',index=False)","75d2d85e":"# 4. Age","3026634e":"Observation: People who boarded from Cherbourg had a higher chance of survival than people who boarded from Southampton or Queenstown.\n","4220c7b2":"# Features","3654bd15":"# 5. SibSp","3eb51c1b":"Observation: Column 'Age' has 177 null values ,column 'Cabin' has 687 null values and column 'Embarked' has 2 null values","75eae3a8":"# Logistic Regression","90eab64b":"# Decision Tree Classifier","0e31f0f2":"# 7. Fare","3399f766":"# I prefer Logistic Regression","68bb0b0b":"Observation: Approximately 65% of the tourists were male while the remaining 35% were female","5a82c317":"# 1. Survived","da390550":"Observation: The higher a tourist paid, the higher would be his chances to survive","2d9d4ac0":"# 8. Embarked","d31db0e2":"Observation: Similarily like 'sibsp', chances of survival dropped drastically if someone traveled with more than 2 parents\/children  along with one of the traveler","7c6fb9be":"# 6. Parch","35c0c3ce":"Oservation: More males were died as compared to females.  ","6d654085":"# Model Selection","7d98acda":"# 3. Sex","e14b05ab":"Oservation: 91% of people traveled alone or with one of their sibling or spouse","92fa4dd6":"Observation: 72% of the people boarded from Southampton. 20% boarded from Cherbourg and the rest boarded from Queenstown. ","11682040":"Observation: Chances of survival dropped drastically if someone traveled with more than 2 siblings or spouse.","31de0fe3":"Observation: More than 60% of passengers had died.","d9d8f054":"# KNN Classifier","6e1034cd":"# 2. Pclass","cf9eae13":"Oservation: 1.  A larger fraction of children under 16 survived than died.\n\n2.Every other age group, the number of died was higher than the number of survivors.\n\n3.The passengers of age between 16 and 31 were dead as compared to  same age range sustained.","d0ff8576":"# RandomForestClassifier","892eccfb":"# Data Imputation","547c3ec8":"Observation: 1.The survived chances of 'Class1' travelers are  high than the class2 and class3\n\n2.The unsurvived chances of 'Class3' travelers are high than other classes."}}