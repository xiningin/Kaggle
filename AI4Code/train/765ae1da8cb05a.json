{"cell_type":{"958848b5":"code","d2ec30f6":"code","71cb3df0":"code","77d08fff":"code","bc68a838":"code","3f464c9c":"code","6c78105b":"code","6bc0c5c5":"code","9aac1b6b":"code","a413f7a6":"code","dd49bc6c":"code","c6190f0b":"code","2dcb8fe8":"code","481835ef":"code","199e9976":"code","070e3615":"code","df287a9c":"code","f3330e41":"code","094de29b":"code","ecb0991b":"code","08b05a40":"code","ea0f9a26":"code","98da8501":"code","cdf46cea":"code","2805c053":"code","3b3e0a4b":"code","2e612575":"code","2a98760a":"code","f7e6566e":"code","aa8423b6":"code","181cc2ec":"code","0a1c7788":"code","2f547821":"code","23856b02":"code","77c8792b":"code","f0f1f767":"code","e4618533":"code","5a204edc":"code","e6ea3e97":"code","4a4c3569":"code","cf0d6174":"code","ef0195e7":"code","923e4b24":"markdown","2cc832d1":"markdown","c69c3dfe":"markdown","b5843968":"markdown","d3f6a3ab":"markdown","bc432f63":"markdown","7f73bb71":"markdown","828050fd":"markdown"},"source":{"958848b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2ec30f6":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","71cb3df0":"df_train.head()","77d08fff":"df_test.head()","bc68a838":"df_train.shape","3f464c9c":"df_test.shape","6c78105b":"df_train.info()","6bc0c5c5":"df_test.info()","9aac1b6b":"## Removing the unused data for the analysis\ndf_train1  = df_train.drop(['Name','Ticket'], axis = 'columns')\ndf_test1  = df_test.drop(['Name','Ticket'], axis = 'columns')","a413f7a6":"df_train1","dd49bc6c":"df_test1 ","c6190f0b":"df_train1['Age'].fillna(df_train1['Age'].mean(), inplace=True)\ndf_train1['Cabin'].fillna('N', inplace=True)\ndf_train1['Embarked'].fillna('N', inplace=True)\ndf_train1.isnull().sum()","2dcb8fe8":"\ndf_test1['Age'].fillna(df_train1['Age'].mean(), inplace=True)\ndf_test1['Cabin'].fillna('N', inplace = True)\ndf_test1['Fare'].fillna('N', inplace = True)\ndf_test1['Embarked'].fillna('N', inplace = True)\ndf_test1.isnull().sum()","481835ef":"df_test1.info()","199e9976":"df_train1.info()","070e3615":"df_test1.info()","df287a9c":"df_train1.head()","f3330e41":"df_test1.head()","094de29b":"df_train1['Sex'].value_counts()","ecb0991b":"df_train1['Cabin'].value_counts()","08b05a40":"df_train1['Embarked'].value_counts()","ea0f9a26":"df_train1['Pclass'].value_counts()","98da8501":"df_train1.groupby(['Sex', 'Survived'])['Survived'].count()","cdf46cea":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.barplot(x ='Sex', y = 'Survived',hue='Sex',data = df_train1)","2805c053":"sns.barplot(x='Pclass' , y='Survived', hue='Sex', data=df_train1)","3b3e0a4b":"def get_category(age):\n    cat = ''\n    if age <= -1:\n        cat = 'Unknown'\n    elif age <= 5:\n        cat = 'Baby'\n    elif age <= 12:\n        cat = 'Child'\n    elif age <= 18:\n        cat = 'Teenager'\n    elif age <= 25:\n        cat = 'Student'\n    elif age <= 35:\n        cat = 'Young Adult'\n    elif age <= 60:\n        cat = 'Adult'\n    else:\n        cat = 'Elderly'\n    \n    return cat\n\n\n\n\ndf_train1['Age_cat'] = df_train1['Age'].apply(lambda x: get_category(x))\nsns.barplot(x='Age_cat', y='Survived', hue='Sex', data=df_train1, \n            order=['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Elderly'])\n\n \n    \n    ","2e612575":"from sklearn.preprocessing import LabelEncoder\n\nfor feature in ['Cabin', 'Sex', 'Embarked']:\n    le = LabelEncoder()\n    le = le.fit(df_train1[feature])\n    df_train1[feature] = le.transform(df_train1[feature])\n\nfor feature in ['Cabin', 'Sex', 'Embarked']:\n    le = LabelEncoder()\n    le = le.fit(df_test1[feature])\n    df_test1[feature] = le.transform(df_test1[feature])","2a98760a":"        \ndf_train1 = df_train1.drop('Age_cat', axis=1)\ndf_train1","f7e6566e":"X_train = df_train1.drop('Survived', axis = 1)\nX_train","aa8423b6":"X_train.shape","181cc2ec":"y_train = df_train1['Survived']\ny_train\n","0a1c7788":"X_test = df_test1\nX_test","2f547821":"\nX_test.shape","23856b02":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train)","77c8792b":"from sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter = 1000)\nmodel.fit(X_train,y_train)","f0f1f767":"predictions = model.predict(X_test)\nprint(predictions)","e4618533":"X_test.shape","5a204edc":"from sklearn.metrics import classification_report\nreport = classification_report(y_test, predictions)\nprint(report)","e6ea3e97":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, predictions)","4a4c3569":"submission = pd.DataFrame()\nsubmission['PassengerId'] = X_test['PassengerId']\nsubmission['Survived'] = predictions \nsubmission.head()","cf0d6174":"if len(submission) == len(X_test):\n    print(\"Submission dataframe is the same length as test ({} rows).\".format(len(submission)))\nelse:\n    print(\"Dataframes mismatched, won't be able to submit to Kaggle.\")","ef0195e7":"submission.to_csv('..\/catboost_submission.csv', index=False)\nprint('Submission CSV is ready!')","923e4b24":"## Titanic_datasetfor the prediction of Survilence during the Titanic ship sinking ","2cc832d1":"## Handling Missing Data","c69c3dfe":"## Importing the libraries","b5843968":"## Data Cleaning","d3f6a3ab":"## Explore the Data","bc432f63":"### In the above df_train data we can see the from 'Age','Cabin', 'Embarked' less count than actual data.","7f73bb71":"### In the above df_test data we can see 'Age', 'Fare,'Cabin' and count less than actual data.","828050fd":"## Reading the train and test data"}}