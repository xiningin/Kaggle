{"cell_type":{"76ed2795":"code","a380d0c0":"code","835266cc":"code","e33f6a25":"code","ec03b14d":"code","173036ed":"code","5dd6e77d":"code","71d8db30":"code","aa204068":"code","8ce7bcf1":"code","2f23f202":"code","babcc4f0":"code","0f61e9d6":"code","cc9d735f":"code","d3e6265a":"code","69694ba8":"code","e6b58985":"code","fc55b3e8":"code","4d946949":"code","d8b0eb1a":"code","fe64d825":"markdown","7f2268d9":"markdown","50b62c6a":"markdown","e9b22c6d":"markdown"},"source":{"76ed2795":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a380d0c0":"netflix = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","835266cc":"netflix.head()","e33f6a25":"netflix.isnull().sum()","ec03b14d":"netflix.dtypes","173036ed":"netflix.shape","5dd6e77d":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = [10, 10]","71d8db30":"import math\ndef roundup(x):\n    return 100 + int(math.ceil(x \/ 100.0)) * 100 \nsns.countplot(x='type',data=netflix)\n# Get current axis on current figure\nax = plt.gca()\n\n# ylim max value to be set\ny_max = netflix['type'].value_counts().max() \nax.set_ylim([0, 6000])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')\nplt.title('Comparison of Total TV Shows & Movies',size='15')\nplt.show()","aa204068":"movies = netflix[netflix.type == 'Movie']\nshows = netflix[netflix.type == 'TV Show']","8ce7bcf1":"movies['release_year'].unique()","2f23f202":"recent_5yrs = movies[movies.release_year >= 2011]\nsns.countplot(x='release_year',data=recent_5yrs)\n\n# Get current axis on current figure\nax = plt.gca()\n\n# ylim max value to be set\ny_max = recent_5yrs['type'].value_counts().max() \nax.set_ylim([0,1000])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')\nplt.title('Total Releases of Movies for Last 10 Years ',size='15')    \nplt.show()","babcc4f0":"top_director = movies.groupby(['director'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.pointplot(x='director',y='count',data=top_director.head(10))\nplt.title('Top 10 directors by Movies',size='20')\nplt.show()","0f61e9d6":"top_ratings = movies.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=top_ratings,color='purple')\nplt.title('Top Ratings',size='20')\nplt.show()","cc9d735f":"from wordcloud import WordCloud, STOPWORDS\ntext3 = ' '.join(movies['listed_in'])\nwordcloud2 = WordCloud().generate(text3)\n# Generate plot\nplt.imshow(wordcloud2)\nplt.axis(\"off\")\nplt.title('Word Cloud for Type of Movie',size='15')\nplt.show()","d3e6265a":"top_contributors = movies.groupby(['country'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nsns.barplot(x='country',y='count',data=top_contributors.head(5))\n# Get current axis on current figure\nax = plt.gca()\n\n# ylim max value to be set\ny_max = top_contributors['country'].value_counts().max() \nax.set_ylim([0,2000])\n\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')\nplt.title('Contribution by country in Movies',size='15')    \nplt.show()","69694ba8":"usa = netflix[netflix.country == 'United States']\nusa.head()","e6b58985":"sns.countplot(x='type',data=usa)\n# Get current axis on current figure\nax = plt.gca()\n\n# ylim max value to be set\ny_max = usa['type'].value_counts().max() \nax.set_ylim([0, 2000])\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')\nplt.title('Comparison of Total TV Shows & Movies',size='15')\nplt.show()","fc55b3e8":"top_cat = usa.groupby(['listed_in'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='listed_in',y='count',data=top_cat.head(5),color='green',ax=ax)\nplt.title('Top categories',size='15')\nplt.show()","4d946949":"top_director = usa.groupby(['director'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,7)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.pointplot(x='director',y='count',data=top_director.head(10))\nplt.title('Top 10 directors',size='20')\nplt.show()","d8b0eb1a":"usa_recent5 =  usa[usa.release_year >= 2016]\ng = sns.catplot(\n    data=usa_recent5, kind=\"count\",\n    x=\"release_year\", hue=\"type\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6)\nax = plt.gca()\n\n# ylim max value to be set\ny_max = usa_recent5['type'].value_counts().max() \nax.set_ylim([0, 350])\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')\nplt.title('Last 5 years trends in Netflix by USA',size='15')\nplt.show()","fe64d825":"# Different category ratings denotes the following\n**Kids**\nTV-Y\nDesigned to be appropriate for all children\n\nTV-Y7\nSuitable for ages 7 and up\n\nG\nSuitable for General Audiences\n\nTV-G\nSuitable for General Audiences\n\nPG\nParental Guidance suggested\n\nTV-PG\nParental Guidance suggested\n\n**Teens**\nPG-13\nParents strongly cautioned. May be Inappropriate for ages 12 and under.\n\nTV-14\nParents strongly cautioned. May not be suitable for ages 14 and under.\n\n**Adults**\nR\nRestricted. May be inappropriate for ages 17 and under.\n\nTV-MA\nFor Mature Audiences. May not be suitable for ages 17 and under.\n\nNC-17\nInappropriate for ages 17 and under","7f2268d9":"# Let's see the Trends of the country which invented Netflix (USA)","50b62c6a":"## Thank You! Drop an upvote if you liked the kernel! :)","e9b22c6d":"# Movies Analysis"}}