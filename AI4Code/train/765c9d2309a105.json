{"cell_type":{"2444b02b":"code","05ee467b":"code","bf1904f4":"code","a404bacc":"markdown"},"source":{"2444b02b":"import torch","05ee467b":"# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","bf1904f4":"def kappa_loss(p, y, n_classes=5, eps=1e-10):\n    \"\"\"\n    QWK loss function as described in https:\/\/arxiv.org\/pdf\/1612.00775.pdf\n    \n    Arguments:\n        p: a tensor with probability predictions, [batch_size, n_classes],\n        y, a tensor with one-hot encoded class labels, [batch_size, n_classes]\n    Returns:\n        QWK loss\n    \"\"\"\n    \n    W = np.zeros((n_classes, n_classes))\n    for i in range(n_classes):\n        for j in range(n_classes):\n            W[i,j] = (i-j)**2\n    \n    W = torch.from_numpy(W.astype(np.float32)).to(device)\n    \n    O = torch.matmul(y.t(), p)\n    E = torch.matmul(y.sum(dim=0).view(-1,1), p.sum(dim=0).view(1,-1)) \/ O.sum()\n    \n    return (W*O).sum() \/ ((W*E).sum() + eps)","a404bacc":"QWK loss for PyTorch as was mentioned in https:\/\/www.kaggle.com\/c\/petfinder-adoption-prediction\/discussion\/77805  and described in https:\/\/arxiv.org\/pdf\/1612.00775.pdf"}}