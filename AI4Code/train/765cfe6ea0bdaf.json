{"cell_type":{"cb932d9a":"code","c5016cd2":"code","bd303504":"code","eb55991b":"code","ea93c10a":"code","9aabea16":"code","7e9c8e12":"code","e113e49f":"code","b4b90e09":"code","d7f8cb4f":"code","2b44afb8":"code","d6211153":"code","69ce7252":"code","08a43c2e":"code","b7d66a94":"code","1558d783":"code","c630a054":"code","e373578a":"code","615d3118":"code","a5cfc256":"code","f32fe6ee":"code","f4901a62":"code","893254da":"code","65aa433a":"code","2e1b066e":"code","8232837a":"code","5a4f9b38":"code","494bd36a":"code","a682561e":"code","3d88e8cd":"markdown","0bd879f0":"markdown","ed615a04":"markdown","01e5ac85":"markdown","0bf3c25d":"markdown","3d6f61b5":"markdown","9aabd580":"markdown","d120ffd2":"markdown","96a9ff81":"markdown","7ecef5e8":"markdown","825e2496":"markdown","d105e8ef":"markdown","d9007d97":"markdown","4cacd4b7":"markdown","d038867b":"markdown","b81b8e68":"markdown","37e47724":"markdown"},"source":{"cb932d9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5016cd2":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","bd303504":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n","eb55991b":"y = df_train['Survived']\nfeatures = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']\n\nX = pd.get_dummies(df_train[features])\nX_test = pd.get_dummies(df_test[features])\n\nX.fillna(X.mean())\nX_test.fillna(X_test.mean())","ea93c10a":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(learning_rate = 0.05,\n                     n_estimators=300,\n                     max_depth = 4)\nmodel.fit(X, y)","9aabea16":"predictions = model.predict(X_test)\nprint(predictions)","7e9c8e12":"from sklearn.impute import SimpleImputer\n\nmy_imputer = SimpleImputer()\nimputed_X_train = my_imputer.fit_transform(X)\nimputed_X_test = my_imputer.transform(X_test)","e113e49f":"predictions = model.predict(X_test)\nprint(predictions)\n","b4b90e09":"import matplotlib.pyplot as plt\nfrom xgboost import plot_importance\n\nplot_importance(model)\nplt.show()","d7f8cb4f":"output = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2b44afb8":"import pandas as pd\nimport numpy as np\nimport hyperopt\n!pip install catboost==0.23.2\nfrom catboost import Pool, CatBoostClassifier, cv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n","d6211153":"train.fillna(-999, inplace=True)\ntest.fillna(-999, inplace=True)","69ce7252":"y = train.Survived\nX = train.drop(['Survived'], axis =1)\n\nX_test = test\n\n\n","08a43c2e":"cate_features_index = np.where(X.dtypes != float)[0]\ncate_features_index","b7d66a94":"Xtrain,Xtest,ytrain,ytest=train_test_split(X,y, train_size=0.20, random_state=15)","1558d783":"model = CatBoostClassifier(iterations=2000, learning_rate=0.01, l2_leaf_reg=4, depth=6, rsm=1, loss_function= 'Logloss', eval_metric='AUC',use_best_model=True,random_seed=42)","c630a054":"model.fit(Xtrain,ytrain, cat_features=cate_features_index, eval_set=(Xtest,ytest))\nprint(model.get_best_score())","e373578a":"pred = model.predict(X_test)\nprint(pred)","615d3118":"output = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': pred})\noutput.to_csv('cat_boost_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","a5cfc256":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","f32fe6ee":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train.head()","f4901a62":"df_train.drop(['Ticket','PassengerId'], axis=1, inplace=True)\n\ngender_mapper = {'male': 0, 'female': 1}\ndf_train['Sex'].replace(gender_mapper, inplace=True)\n\ndf_train['Title'] = df_train['Name'].apply(lambda x: x.split(',')[1].strip().split(' ')[0])\ndf_train['Title'] = [0 if x in ['Mr.', 'Miss.', 'Mrs.'] else 1 for x in df_train['Title']]\ndf_train = df_train.rename(columns={'Title': 'Title_Unusual'})\ndf_train.drop('Name', axis = 1, inplace=True)\n\ndf_train['Cabin_Known'] = [0 if str(x) == 'nan' else 1 for x in df_train['Cabin']]\ndf_train.drop('Cabin', axis=1, inplace=True)\n\nemb_dummies = pd.get_dummies(df_train['Embarked'], drop_first=True, prefix='Embarked')\ndf_train = pd.concat([df_train, emb_dummies], axis = 1)\ndf_train.drop('Embarked', axis=1, inplace=True)\n\ndf_train['Age'] = df_train['Age'].fillna(int(df_train['Age'].mean()))\n                     ","893254da":"df_train.head()","65aa433a":"X = df_train.drop('Survived', axis=1)  #features or predictors excluding the target value\ny = df_train['Survived']   #target value aka the one we are trying to predict\n\nX_train, X_test, y_train, y_test=train_test_split(X, y, train_size=0.8)","2e1b066e":"ss = StandardScaler()\nX_train_scaled = ss.fit_transform(X_train)\nX_test_scaled = ss.transform(X_test)","8232837a":"from tpot import TPOTClassifier","5a4f9b38":"tpot = TPOTClassifier(verbosity=2, max_time_mins=10)\ntpot.fit(X_train_scaled, y_train)","494bd36a":"tpot.fitted_pipeline_","a682561e":"tpot.score(X_test_scaled, y_test)","3d88e8cd":"- Model evaluation of accuracy:","0bd879f0":"ewww. Didnt find a better pipeline that catboost. Probably needed more time to run.","ed615a04":"- training process:","01e5ac85":"- perform train test split:","0bf3c25d":"- define xgboost hyperparameters\n- training the model","3d6f61b5":"# A different approach","9aabd580":"### As i suspected, the most important feature in survival rate was the Fare. Obviously the VIP's had the priority boarding upon embarking and also upon emergency. From those VIP's first came the youngest ones, women and children in the family, hence the 'Age' being selected as the second most import feature in survival rate. Conclusion of the story - Money buys priority in life. ","d120ffd2":"### Make the model to fit the data ::","96a9ff81":"### make CatBoost model, implement -> use_best_model parameters, will make the model prevent Overfitting ::","7ecef5e8":"- Drop irrelevant columns (Ticket and PassengerId)\n- Remap Sex column to zeros and ones\n- Check if a passenger had a unique title (like doctor) or had something more generic (like Mr., Miss.) \u2014 can be extracted from the Name column\n- Check if cabin information was known \u2014 if the value of Cabin column is not NaN\n- Create dummy variables from the Embarked column \u2014 3 options\n- Fill Age values with the simple mean","825e2496":"- making the pred to be integers for submission:","d105e8ef":"## Lets try CatbBoost","d9007d97":"1. #### make the X for train and test, also called VALIDATION data ::","4cacd4b7":"- making a kaggle export:","d038867b":"# Less is more. Keep it simple\n\n- All of this analysis was done straight to the point to achieve the goal quickly and efficiently without the unneccasy 'candy wrapping' of hundred uncessary histograms, charts and comparisons to look 'smart'. Time is money. So here it is, clean and simple.","b81b8e68":"- using standard scale to the train data and transform both train and test data","37e47724":"make submission CSV:"}}