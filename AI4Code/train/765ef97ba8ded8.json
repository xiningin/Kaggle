{"cell_type":{"5b0ce1e3":"code","c1da074e":"code","c8003ca5":"code","5c4be04d":"code","d5be657c":"code","86c972fb":"code","eefdc1de":"code","17ab271c":"code","1a680b17":"code","30ae082f":"code","c6bf7e87":"code","381a0607":"code","3f6f5051":"markdown","be5f7425":"markdown"},"source":{"5b0ce1e3":"import time\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\n\n#from scipy.spatial import distance_matrix\n#from concorde.tsp import TSPSolver","c1da074e":"path = \"\/kaggle\/input\/traveling-santa-problem\/\"\ndf   = pd.read_csv(path+\"santa_cities.csv\") # index_col=\"id\"\nsub  = pd.read_csv(path+\"random_paths_benchmark.csv\")\ndf","c8003ca5":"plt.figure(figsize=(16,10))\nplt.subplot(111, adjustable='box', aspect=1.0)\nplt.plot(df.x, df.y, 'k,', alpha=0.3)\nplt.plot(df.x[0], df.y[0], 'bx')\nplt.xlabel('X', fontsize=16)\nplt.ylabel('Y', fontsize=16)\nplt.title('All cities (first in blue)', fontsize=18)\nplt.show()","5c4be04d":"def total_distance(df_path):\n    dist = (np.sqrt((df_path.x - df_path.x.shift())**2 +\n                    (df_path.y - df_path.y.shift())**2)).sum()\n    return round(dist,2)","d5be657c":"def plot_path(path, df, size=8, verbose=True):\n    df_path = pd.merge(pd.DataFrame({'id':path}), df, on='id', how=\"left\")\n    \n    plt.figure(figsize=(size,size))\n    plt.subplot(111, adjustable='box', aspect=1.0)\n    plt.plot(df_path.x, df_path.y, linewidth=1)\n    plt.plot(df_path.x[0], df_path.y[0], 'ro') # r: red, o: circle\n    \n    if verbose:\n        print(*path)\n        for i in range(len(df)):\n            plt.annotate(df.id[i], (df.x[i], df.y[i]))\n            \n    plt.title(str(len(set(path)))+' cities: '+str(total_distance(df_path)), fontsize=18)\n    plt.show()","86c972fb":"plot_path([0,2,5,1,8,3,4,9,6,7,0], df[:10], size=4)","eefdc1de":"def nearest_neighbour(df):\n    ids = df.index.values[1:]\n    xy = np.array([df.x.values, df.y.values]).T[1:]\n    path = [0,]\n    for _ in tqdm(range(len(df)-1)):\n        last_x, last_y = df.x[path[-1]], df.y[path[-1]]\n        dist = ((xy - np.array([last_x, last_y]))**2).sum(-1)\n        nearest_index = dist.argmin()\n        path.append(ids[nearest_index])\n        ids = np.delete(ids, nearest_index, axis=0)\n        xy  = np.delete(xy,  nearest_index, axis=0)\n    path.append(0)\n    return path","17ab271c":"path = nearest_neighbour(df[:100])\nplot_path(path, df[:100], size=8, verbose=True)","1a680b17":"path = nearest_neighbour(df[:1000])\nplot_path(path, df[:1000], size=8, verbose=False)","30ae082f":"path = nearest_neighbour(df[:10000])\nplot_path(path, df[:10000], size=8, verbose=False)","c6bf7e87":"path = nearest_neighbour(df)\nplot_path(path, df, size=8, verbose=False)","381a0607":"mySub = pd.DataFrame({'path1':path})\nmySub.to_csv(\"sub.csv\",index=False)","3f6f5051":"# Greedy: Nearest Neighbour","be5f7425":"# Aux functions"}}