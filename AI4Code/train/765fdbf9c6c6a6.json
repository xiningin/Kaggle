{"cell_type":{"2eb70926":"code","5840249e":"code","433d79c7":"code","79b890e5":"code","6361264a":"code","81751d77":"code","4db40b69":"code","b2f07744":"code","a68050b2":"code","ee508b8f":"code","ad372b4f":"code","4df3f15f":"code","1e39eb26":"code","56edbd2e":"code","1adf5cde":"code","d0d6407c":"code","322c53ec":"code","0b557065":"code","2df69b1f":"code","47e46a3a":"code","679df507":"code","d76da16e":"code","07622551":"code","e7e5f259":"code","742264ae":"code","234d323c":"code","cf1c5644":"code","12e0d22d":"code","d4f395af":"code","525e84ea":"code","1361a036":"code","945cad9b":"code","235d3328":"code","2b2d3d10":"code","c159935e":"code","4c14d2cb":"code","998d9b53":"code","5240f9bd":"code","4b4bdcea":"code","91733c21":"code","2a818814":"code","4c8cb4a8":"code","55f154ef":"code","fcc1748f":"code","acf82405":"code","a9e81752":"code","5a19ecd8":"code","53ff26ab":"code","470c8058":"code","6d94f4ea":"code","82b42035":"code","43e3c98e":"code","b52e8b75":"code","771680b5":"code","703216da":"code","60f9718a":"code","2be20ac6":"code","ae7428b8":"code","d7955faa":"code","d5ad3f56":"markdown","11f6587e":"markdown","08381622":"markdown","fe4fff17":"markdown","405033eb":"markdown","afbb4c57":"markdown","345182a4":"markdown","da0e95ea":"markdown","36051299":"markdown","100d412b":"markdown","0f091652":"markdown","0e8e882e":"markdown","27a34dc1":"markdown","ad8dd3da":"markdown","566fd1bd":"markdown","6b7ec4e5":"markdown","414c11ca":"markdown","387186bd":"markdown","9b191dd1":"markdown","0a834476":"markdown","bd13f7e0":"markdown","9c042dc9":"markdown","222d2af2":"markdown","9889ec0c":"markdown","725eb95c":"markdown","0486f41d":"markdown","468437a3":"markdown","59eb2ec7":"markdown"},"source":{"2eb70926":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5840249e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","433d79c7":"data = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")","79b890e5":"data.head()","6361264a":"data.shape","81751d77":"data.info()","4db40b69":"data.isnull().sum()","b2f07744":"x = data.drop(\"Exited\", axis=1)","a68050b2":"y = data['Exited']","ee508b8f":"x.shape","ad372b4f":"y.shape","4df3f15f":"data['Surname'].value_counts()","1e39eb26":"data['Geography'].value_counts()","56edbd2e":"sns.catplot('Geography', data=data, kind='count')\nplt.xlabel(\"Country\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Number of People for Each country\")","1adf5cde":"data['Gender'].value_counts()","d0d6407c":"sns.catplot('Gender', data=data, kind='count')\nplt.xlabel(\"Gender Category\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Gender Classification\")","322c53ec":"data['HasCrCard'].value_counts()","0b557065":"sns.catplot('HasCrCard', data=data, kind='count')\nplt.xlabel(\"Category\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Identify People with Credit Card\")","2df69b1f":"data['IsActiveMember'].value_counts()","47e46a3a":"sns.catplot('IsActiveMember', data=data, kind='count')\nplt.xlabel(\"Category\")\nplt.ylabel(\"Number of People\")\nplt.title(\"Identify Active Members\")","679df507":"geography = pd.get_dummies(x['Geography'], drop_first=True)\ngender = pd.get_dummies(x['Gender'], drop_first=True)","d76da16e":"geography.shape","07622551":"gender.shape","e7e5f259":"x.shape","742264ae":"x = pd.concat([x, geography, gender], axis=1)","234d323c":"x.shape","cf1c5644":"x.info()","12e0d22d":"x=x.drop([\"Geography\", \"Gender\", \"Surname\",\"RowNumber\",\"CustomerId\"], axis=1)","d4f395af":"x.shape","525e84ea":"from sklearn.model_selection import train_test_split","1361a036":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=50)","945cad9b":"x_train.shape","235d3328":"x_test.shape","2b2d3d10":"y_train.shape","c159935e":"y_test.shape","4c14d2cb":"x_train.head()","998d9b53":"from sklearn.preprocessing import StandardScaler","5240f9bd":"scale = StandardScaler()","4b4bdcea":"x_train = scale.fit_transform(x_train)","91733c21":"x_test = scale.fit_transform(x_test)","2a818814":"x_train.shape","4c8cb4a8":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU, PReLU, ELU\nfrom keras.layers import Dropout","55f154ef":"model = Sequential()","fcc1748f":"model.add(Dense(units = 10, kernel_initializer = \"he_normal\", activation = \"relu\", input_dim = 11))\nmodel.add(Dropout(0.3))","acf82405":"model.add(Dense(units=20, kernel_initializer=\"he_normal\", activation = \"relu\"))\nmodel.add(Dropout(0.4))","a9e81752":"model.add(Dense(units=15, kernel_initializer=\"he_normal\", activation = \"relu\"))\nmodel.add(Dropout(0.2))","5a19ecd8":"model.add(Dense(units=1, kernel_initializer = \"glorot_uniform\", activation = \"sigmoid\"))","53ff26ab":"model.summary()","470c8058":"model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics =['accuracy'])","6d94f4ea":"model_fit = model.fit(x_train, y_train, validation_split = 0.25, batch_size=10, epochs=100)","82b42035":"print(model_fit.history.keys())","43e3c98e":"plt.plot(model_fit.history['accuracy'])\nplt.plot(model_fit.history['val_accuracy'])\nplt.title(\"Model Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend(['train','test'], loc = 'upper left')\nplt.show()","b52e8b75":"plt.plot(model_fit.history['loss'])\nplt.plot(model_fit.history['val_loss'])\nplt.title(\"Model Accuracy\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend(['train','test'], loc = 'upper left')\nplt.show()","771680b5":"y_pred = model.predict(x_test)","703216da":"y_pred","60f9718a":"y_pred = (y_pred>0.5)","2be20ac6":"from sklearn.metrics import confusion_matrix, accuracy_score","ae7428b8":"cm = confusion_matrix(y_test, y_pred)\ncm","d7955faa":"acc_sc = accuracy_score(y_test, y_pred)\nacc_sc","d5ad3f56":"Adding the second hidden Layer","11f6587e":"Graph tells us that the Bank has 5457 Male customers and 4543 female customers","08381622":"Adding the input layer and the hidden layers","fe4fff17":"### Import the Required Dataset","405033eb":"Importing all the Deep Learning required Libraries","afbb4c57":"Graph tells us that there are more people with credit card and also few people without credit cards. Number of people with credit cards are 7055 and people without credit cards are 2945","345182a4":"List all the Data in history","da0e95ea":"### Data Exploration","36051299":"As you have added the encoded values for both geography and gender parameters to your predictor variables dataset, we need to remove the object columns.","100d412b":"### Model implementation","0f091652":"Since there are 3 object type data variables(i.e, Surname, Geography and Gender). Out of which, surname is not required for our data processing, so, we neglect it and we create some dummy variables for Geography and Gender columns for performing the computations on string type data.","0e8e882e":"It's time to predict the test results now","27a34dc1":"### Split the Data into Predictor and Response Variables","ad8dd3da":"### Identify the Missing Values","566fd1bd":"Graph shows us that active customers are 5151 and non-active customers are almost as equal as active customers with the value 4849.","6b7ec4e5":"This data shows that there are 10,000 recors with 14 Parameters. Out of 14, 13 parameters are predictor variables and 1 parameter is a response variable (\"Exited\").","414c11ca":"### Perform Feature Scaling","387186bd":"### Importing the Required Packages to Solve the Problem","9b191dd1":"### Split the Dataset into train and test sets\n\nTest size is taken as 25%.","0a834476":"There are 2 float type parameters, 9 Integer variables and 3 String type variables.","bd13f7e0":"Fitting the Neural Network Model to our Training Data","9c042dc9":"Compiling the Artificial Neural Network Model","222d2af2":"After predicting the output, our next task is to identify the performance of the model using different performance metrics","9889ec0c":"Based on Geography, we identified that there are people from France,Germany and Spain countries in that Bank.","725eb95c":"Adding the third hidden layer","0486f41d":"Fortunately, there are no missing values in our data","468437a3":"### Initializing the ANN Model","59eb2ec7":"Adding the Output Layer"}}