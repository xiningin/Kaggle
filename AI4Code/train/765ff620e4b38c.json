{"cell_type":{"418dd8e4":"code","fc362186":"code","ed4f8ec3":"code","c89304b4":"code","839daae5":"code","3ffdb9de":"code","675ff756":"code","62ca5f93":"code","200b753a":"code","366ff03f":"code","bf0d6870":"code","d84c188f":"code","23854ebf":"code","7a051e14":"code","b741409b":"code","d0996d24":"code","faeadead":"code","d9738851":"code","202a59cc":"code","fece45e7":"code","d0f68ab6":"code","d36f0453":"code","8839c694":"code","a10025f3":"code","1e740f34":"code","6facda19":"code","2a794b21":"code","20cd44db":"code","7e87259a":"code","31ab17df":"code","b1057d4e":"code","9d53129a":"code","5b6db1fb":"code","10fed064":"markdown","9950e368":"markdown","1db54b12":"markdown","27fb3c1f":"markdown","b16427a6":"markdown","6b712912":"markdown"},"source":{"418dd8e4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","fc362186":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain['dataset'] = 'train'\ntest['dataset'] = 'test'\n\ndata = pd.concat([train,test])","ed4f8ec3":"data","c89304b4":"ds = data.groupby(['Sex', 'dataset'])['PassengerId'].count().reset_index()\n\nds.columns = ['Sex', 'dataset', 'count']","839daae5":"fig = px.bar(\n    ds,\n    x='Sex',\n    y='count',\n    color='dataset',\n    barmode='group',\n    orientation='v',\n    title='Sex train\/test count',\n    width=600,\n    height=500\n)\n\nfig.show()","3ffdb9de":"ds = data.groupby(['Pclass', 'dataset'])['PassengerId'].count().reset_index()\n\nds.columns = ['Pclass', 'dataset', 'count']\n\nfig = px.bar(\n    ds,\n    x='Pclass',\n    y='count',\n    color='dataset',\n    barmode='group',\n    orientation='v',\n    title='Pclass train\/test count',\n    width=600,\n    height=500\n)\n\nfig.show()","675ff756":"ds = data[data.dataset == 'train'].groupby(['Pclass','Survived'])['PassengerId'].count().reset_index()\n\nds.columns = ['Pclass', 'Survived', 'count']\n\nfig = px.bar(\n   ds,\n    x='Pclass',\n    y='count',\n    color='Survived',\n    orientation='v',\n    title='Pclass Survived count',\n    width=600,\n    height=500\n)\n\nfig.show()","62ca5f93":"fig = px.histogram(data, x='Age', color='dataset')\n\nfig.show()","200b753a":"fig = px.histogram(data[data.dataset == 'train'], x='Age', color='Survived', facet_col='Pclass', facet_row='Sex',\n                  category_orders={'Pclass': [1,2,3]})\n\nfig.show()","366ff03f":"fig = px.histogram(data[data.dataset == 'train'], x='Fare', color='Survived', facet_col='Sex',\n                  category_orders={'Pclass': [1,2,3]})\n\nfig.show()","bf0d6870":"\n\nfig = px.box(data[data.dataset == 'train'], x='Sex', y='Age', points='all', color='Survived')\n\nfig.show()","d84c188f":"data","23854ebf":"data.isna().sum()","7a051e14":"data['Age'].fillna(value=round(data.Age.mean()), inplace=True)","b741409b":"data.Cabin.fillna(value='U', inplace=True)","d0996d24":"data['Cabin'] = data['Cabin'].apply(lambda x: x[0])","faeadead":"normal_titles = ['Mr','Miss','Mrs','Master']\n\ndata['Title'] = data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\ndata['Title'] = [row.replace(row,'Rare') if row not in normal_titles else row for row in data['Title']]","d9738851":"data.head()","202a59cc":"data.Fare.fillna(value=round(data.Fare.mean()), inplace=True)","fece45e7":"data.dropna(subset=['Embarked'], how='any', inplace=True)","d0f68ab6":"y = data[data.dataset== 'train']['Survived']","d36f0453":"cat_features = ['Sex', 'SibSp', 'Parch', 'Cabin', 'Title', 'Embarked', 'Pclass']\nnum_features = ['Age', 'Fare']\n\n#y = train['Survived']\nfinal_ft = pd.get_dummies(data[num_features + cat_features])\n\n","8839c694":"X = final_ft[:len(y)]\ntest = final_ft[len(y):]","a10025f3":"from xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import StackingClassifier\n\n\n\nclfs = [CatBoostClassifier(verbose=False), XGBClassifier(), LGBMClassifier(), RandomForestClassifier()]\n\nfor c in clfs:\n    c.fit(X,y)","1e740f34":"from sklearn.metrics import accuracy_score, auc,roc_auc_score, recall_score, log_loss, roc_curve, f1_score,precision_score\n\n\ndef get_scores(clfs):\n    \n    metrics = pd.DataFrame([], columns=['Name','Accuracy','AUC Score','Precision','Recall','F1-Score','Logloss'])\n    \n\n    for cls in clfs:\n        stats = {}\n        prediction = cls.predict(X)\n        fpr, tpr, thresholds = roc_curve(y, prediction, pos_label=1)\n        stats.update({'Accuracy': accuracy_score(y, prediction),\n                  'Name': type(cls).__name__ ,\n                 'Recall' : recall_score(y, prediction),\n                 'F1-Score': f1_score(y, prediction),\n                 'AUC Score': roc_auc_score(y, prediction),\n                 'Logloss': log_loss(y,prediction),\n                 'Precision': precision_score(y,prediction)})\n        metrics = metrics.append(stats, ignore_index=True)\n    return metrics\n\nget_scores(clfs)","6facda19":"from sklearn.model_selection import KFold\nfrom mlxtend.classifier import StackingCVClassifier\n\nkfolds = KFold(n_splits=10, shuffle=True, random_state=42)\n\n\nstack = StackingCVClassifier(classifiers=clfs,\n                            shuffle=False,\n                            use_probas=False,\n                            cv=kfolds,\n                            meta_classifier=clfs[3])\n","2a794b21":"stack.fit(X,y)","20cd44db":"clfs.append(stack)\n\nget_scores(clfs)","7e87259a":"from sklearn.metrics import plot_confusion_matrix\n\ndef confusion_matrix(clfs):\n    plt.style.use('default')\n    fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(15,10))\n\n    for cls, ax in zip(clfs, axes.flatten()):\n        plot_confusion_matrix(cls, \n                          X, \n                          y, \n                          ax=ax, \n                          cmap='Reds',\n                         display_labels=y)\n    ax.title.set_text(type(cls).__name__)\n    plt.tight_layout()  \n    plt.show()\n\n    \nconfusion_matrix(clfs)","31ab17df":"sub = stack.predict(test)","b1057d4e":"output_stacl = pd.DataFrame({'PassengerId': data[data.dataset == 'test']['PassengerId'],\n                            'Survived': sub})","9d53129a":"output_stacl['Survived'] = output_stacl['Survived'].astype('int32')","5b6db1fb":"output_stacl.to_csv('output_2.csv', index=False)","10fed064":"## Machine Learning","9950e368":"## Stacking Clf","1db54b12":"## EDA with Plotly","27fb3c1f":"## Preparing the data for training","b16427a6":"## Import data","6b712912":"## Filling the NAN + Feature Engineering"}}