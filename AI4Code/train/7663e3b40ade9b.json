{"cell_type":{"e3d63cbc":"code","cec6b1ef":"code","699e637f":"code","8da63e71":"code","69ee6760":"code","aa851a38":"code","1bcc834b":"code","7b6e4b8f":"code","06c0689e":"code","a6457271":"code","7c67bfe3":"code","4af62dec":"code","70fec834":"code","22a0b11d":"code","b5f3e8c2":"code","ff3b8e1b":"code","bee2180b":"code","9213f7f3":"code","4eb7e937":"code","578ca5e8":"code","91de084d":"code","91b54b81":"code","94a641ac":"code","a70e473a":"code","da89feff":"code","14c8b968":"code","66a96a1d":"code","6592306c":"code","614de3cf":"code","8ea3e42e":"code","28073929":"code","32ced903":"code","4e28bf29":"code","a2769ccd":"code","fa15df13":"code","82127e81":"code","11425701":"code","63051ec8":"code","72ebf6a9":"code","6a39634c":"code","b3280892":"markdown","ebe4a9fc":"markdown","71c420c1":"markdown","31c9ab25":"markdown"},"source":{"e3d63cbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cec6b1ef":"#Load the dataset\ndf = pd.read_csv(\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","699e637f":"df.shape","8da63e71":"df.head(10)","69ee6760":"df = df.drop(['customerID'],axis=1)","aa851a38":"df = df.dropna(how=\"all\") # remove samples with all missing values\ndf = df[~df.duplicated()] # remove duplicates\ntotal_charges_filter = df.TotalCharges == \" \"\ndf = df[~total_charges_filter]\ndf.TotalCharges = pd.to_numeric(df.TotalCharges)","1bcc834b":"df.dtypes","7b6e4b8f":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'])","06c0689e":"df.dtypes","a6457271":"df['SeniorCitizen'] = df['SeniorCitizen'].replace(0,'Yes')\ndf['SeniorCitizen'] = df['SeniorCitizen'].replace(1,'No')\ndf['SeniorCitizen'] = df['SeniorCitizen'].astype('object')","7c67bfe3":"df['SeniorCitizen'].head()","4af62dec":"df.dtypes","70fec834":"df.head(10)","22a0b11d":"#categorical_var = list(df.columns)\ncategorical_vars = ['gender','SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup',\n                    'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod','Churn']\nnumerical_var = ['tenure','MonthlyCharges','TotalCharges']","b5f3e8c2":"df.dtypes","ff3b8e1b":"df[numerical_var].describe()","bee2180b":"df[numerical_var].hist(bins=30, figsize=(10, 7))","9213f7f3":"df['Churn'].head(10)","4eb7e937":"fig, ax = plt.subplots(1, 3, figsize=(14, 4))\ndf[df.Churn == \"No\"][numerical_var].hist(bins=30, color='blue', alpha=0.5, ax=ax)\ndf[df.Churn == \"Yes\"][numerical_var].hist(bins=30, color='red', alpha=0.5, ax=ax)","578ca5e8":"ROWS, COLS = 4, 4\nfig, ax = plt.subplots(ROWS, COLS, figsize=(18, 18))\nrow, col = 0, 0\nfor i, categorical_vars in enumerate(categorical_vars):\n    if col == COLS - 1:\n        row += 1\n    col = i % COLS\n    df[categorical_vars].value_counts().plot('bar', ax=ax[row, col]).set_title(categorical_vars)","91de084d":"df['Churn'].value_counts().plot('bar').set_title('churned')","91b54b81":"lis = []\nfor i in range(0, df.shape[1]):\n    #print(i)\n    if(df.iloc[:,i].dtypes == 'object'):\n        df.iloc[:,i] = pd.Categorical(df.iloc[:,i])\n        #print(marketing_train[[i]])\n        df.iloc[:,i] = df.iloc[:,i].cat.codes \n        df.iloc[:,i] = df.iloc[:,i].astype('object')\n        \n        lis.append(df.columns[i])","94a641ac":"df.dtypes","a70e473a":"df['gender'] = df['gender'].astype('category')\ndf['SeniorCitizen'] = df['SeniorCitizen'].astype('category')\ndf['Partner'] = df['Partner'].astype('category')\ndf['Dependents'] = df['Dependents'].astype('category')\ndf['PhoneService'] = df['PhoneService'].astype('category')\ndf['MultipleLines'] = df['MultipleLines'].astype('category')\ndf['InternetService'] = df['InternetService'].astype('category')\ndf['OnlineSecurity'] = df['OnlineSecurity'].astype('category')\ndf['OnlineBackup'] = df['OnlineBackup'].astype('category')\ndf['DeviceProtection'] = df['DeviceProtection'].astype('category')\ndf['TechSupport'] = df['TechSupport'].astype('category')\ndf['StreamingTV'] = df['StreamingTV'].astype('category')\ndf['StreamingMovies'] = df['StreamingMovies'].astype('category')\ndf['Contract'] = df['Contract'].astype('category')\ndf['PaperlessBilling'] = df['PaperlessBilling'].astype('category')\ndf['PaymentMethod'] = df['PaymentMethod'].astype('category')\ndf['Churn'] = df['Churn'].astype('category')","da89feff":"df.dtypes","14c8b968":"#for i in categorical_vars:\n#    df[i] = df[i].astype('category')","66a96a1d":"df.shape","6592306c":"#Splitting the dataset into train and test for model building\nfrom sklearn.model_selection import train_test_split\n\nx = df.iloc[:,:-1]\ny = df.iloc[:,19]\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.20)","614de3cf":"x.dtypes","8ea3e42e":"#Training and fitting the model\nfrom sklearn.svm import SVC","28073929":"#Building model on train data\nmodel = SVC(kernel='rbf', gamma=0.7, C=1.0)\n#model =  SVC(C=0.1, cache_size=200, class_weight=None, coef0=0.0,\n#    decision_function_shape='ovr', degree=3, gamma=1, kernel='rbf', max_iter=-1,\n#    probability=False, random_state=None, shrinking=True, tol=0.001,\n#    verbose=False)\nmodel.fit(x_train, y_train)","32ced903":"#Predicting for the test data\npredictions = model.predict(x_test)","4e28bf29":"#importing libraries for model evaluation\nfrom sklearn.metrics import classification_report, accuracy_score","a2769ccd":"#Confusion matrix\nprint(pd.crosstab(y_test, predictions))\n\n","fa15df13":"print(classification_report(y_test, predictions))","82127e81":"model2 = SVC(kernel='linear', C=1.0).fit(x_train, y_train)\npredictions2 = model2.predict(x_test)\nprint(pd.crosstab(y_test, predictions2))\nprint(classification_report(y_test, predictions2))\n","11425701":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(x_train,y_train)\npred = clf.predict(x_test)\nprint(pd.crosstab(y_test, pred))\nprint(classification_report(y_test, pred))","63051ec8":"df.dtypes","72ebf6a9":"from xgboost import XGBClassifier\nclf = XGBClassifier()\nclf.fit(x_train, y_train)\npred = clf.predict(x_test)\nprint(pd.crosstab(y_test, pred))\nprint(classification_report(y_test, pred))","6a39634c":"from sklearn.neighbors import KNeighborsClassifier\n# Instantiate learning model (k = 3)\nclassifier = KNeighborsClassifier(n_neighbors=3)\n\n# Fitting the model\nclassifier.fit(x_train, y_train)\n\npred = classifier.predict(x_test)\nprint(pd.crosstab(y_test, pred))\nprint(classification_report(y_test, pred))","b3280892":"**Modelling**","ebe4a9fc":"\n\nModelling Using Linear kernel","71c420c1":"Modelling Using NaiveBayes","31c9ab25":"Modelling Using XGboost Classifier"}}