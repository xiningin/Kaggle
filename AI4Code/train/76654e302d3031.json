{"cell_type":{"025aa77c":"code","8030d808":"code","66e02080":"code","5a14b96e":"code","e86705a3":"code","b00c29d0":"code","969eeff6":"code","e702e49b":"code","9b1254c9":"code","33e7cf44":"code","59820a73":"code","60627041":"code","18842b5b":"code","19e5d45b":"code","26976902":"code","8c74d4ad":"code","5e76531e":"code","3b34f07d":"code","3a77adae":"code","413691c0":"code","6e3b0102":"code","e14f4f5d":"code","be7aa2d8":"code","980e56bc":"code","6fe8696b":"code","e2f8d670":"code","3e4899a6":"code","76732341":"code","5c41da11":"code","76e40d13":"code","7ec2300d":"code","d5957f56":"code","a78397aa":"code","9b6d6af5":"code","0e9e19bb":"code","5da6c423":"code","997e23da":"code","6e671b53":"code","f5a08805":"code","5cd00ea4":"code","cdf62ed5":"code","714afd56":"code","65d80c64":"code","54e69def":"code","aedf2cb6":"code","41b96475":"code","2d13804e":"code","ddeddd11":"code","7051b35a":"code","89f4f561":"code","8d4d1277":"code","d55492f6":"code","dc324bd5":"code","206e9dc7":"code","b271f31d":"code","fc5bfbce":"code","a140d81c":"code","7278ecf6":"code","84809b56":"code","52cf5238":"code","3260a92c":"code","9e3ff354":"code","ece7cab9":"markdown","99a57cab":"markdown","e104c5a6":"markdown","91902278":"markdown","e47ef736":"markdown","7d58d56c":"markdown","4de629f2":"markdown","d770b602":"markdown","8fe7294d":"markdown","9974ba21":"markdown","2a6bd043":"markdown","b18105b2":"markdown","e74ff635":"markdown","fc94277a":"markdown","b4da5b41":"markdown","b9517262":"markdown","1be535f3":"markdown","4a381929":"markdown","e8ce5573":"markdown"},"source":{"025aa77c":"from typing import Any, List, Callable, Union\n\n# Data Management\nimport numpy as np \nimport pandas as pd \nimport scipy\n\npd.set_option('max_columns', 100)\npd.set_option('max_rows', 50)\n\n# Visualization Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\nfrom IPython.display import HTML, Image\n\n\n# Managing Warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Plot Figures Inline\n%matplotlib inline\n\n# Extras\nimport math, string, os, datetime, dateutil\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8030d808":"df_players = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')\nprint(df_players.shape)\ndf_players.tail()","66e02080":"def height_to_numerical(height):\n    \"\"\"\n    Convert string representing height into total inches\n    \n    Ex. '5-11' --> 71\n    Ex. '6-3'  --> 75\n    \"\"\"  \n    feet   = height.split('-')[0]\n    inches = height.split('-')[1]\n    return int(feet)*12 + int(inches)\n\n\ndef clean_height(val):\n    try:\n        # height is already in inches\n        height = int(val)\n    except:\n        # convert it from string\n        height = height_to_numerical(val)\n\n    return height","5a14b96e":"def calculate_age(birthDate):\n    today = datetime.date.today()\n    age = dateutil.relativedelta.relativedelta(today, birthDate)\n    return age.years + (age.months \/ 12)","e86705a3":"def clean_players_data(df):\n    df_players[\"height\"] = df_players[\"height\"].apply(clean_height)\n    df_players[\"birthDate\"] = pd.to_datetime(df_players[\"birthDate\"])\n    df_players[\"age\"] = df_players[\"birthDate\"].apply(calculate_age)\n    return df_players.set_index(\"nflId\")\n    \ndf_players_cleaned = clean_players_data(df_players)","b00c29d0":"df_players_cleaned.info()","969eeff6":"df_players_cleaned.describe(include=[\"O\"])","e702e49b":"df_players_cleaned.describe()","9b1254c9":"def get_bar_trace(\n    *,\n    df: pd.DataFrame, \n    column: str, \n    num_entries: int = 20,\n    colorscale: str = \"Portland\",\n    orientation: str = \"h\",\n) -> go.Bar:\n    data = df[column].value_counts()[:num_entries][::-1]    \n    x = data.values if orientation == \"h\" else data.index\n    y = data.index if orientation == \"h\" else data.values\n\n    return go.Bar(\n        x=x,\n        y=y,\n        name=column,\n        marker=dict(\n            color=data.values,\n            line=dict(color=\"black\", width=1.5),\n            colorscale=px.colors.diverging.Portland,      \n        ),\n        text=data.values,\n        textposition=\"auto\",\n        orientation=\"h\",\n        showlegend=False,\n    )\n\n\ndef get_hist_trace(\n    *, \n    df: pd.DataFrame, \n    column: str,\n    color: str = \"dodgerblue\",\n) -> go.Histogram:\n    return go.Histogram(\n        x=df[column],\n        opacity=0.75,\n        name=column,\n        marker=dict(\n            color=color,\n            line=dict(color=\"black\", width=1.5),   \n        ),\n        text=df[column].values, \n#         histnorm=\"probability\"\n    )\n\n\ndef get_scatter_trace(\n    *, \n    df: pd.DataFrame, \n    column: str,\n    color: str = \"dodgerblue\",\n) -> go.Scatter:\n    data = df[column]\n    kde = scipy.stats.kde.gaussian_kde(data.values)    \n    x = np.linspace(min(data.values), max(data.values), len(data.values))\n    y = [val * len(data.values) for val in kde(x)]  # denormalize\n    return go.Scatter(\n        x=x, \n        y=y,\n        marker=dict(\n            size=6,\n            color=color,\n        ),\n        showlegend=False\n    )\n","33e7cf44":"def plotly_distributions(\n    df: pd.DataFrame, \n    height: int = 1000, \n    width: int = 1500,    \n    cols: int = 3,\n    horizontal_spacing: float = 0.2,\n    vertical_spacing: float = 0.3,\n    colorscale: List[str] = px.colors.diverging.Portland,\n) -> None: \n    rows = math.ceil(float(df.shape[1]) \/ cols)\n    fig = plotly.subplots.make_subplots(\n        rows=rows, \n        cols=cols,\n        horizontal_spacing=horizontal_spacing,\n        vertical_spacing=vertical_spacing,\n        subplot_titles=df.columns,\n    )\n    \n    for i, column in enumerate(df.columns):\n        row = math.ceil((i + 1) \/ cols)\n        col = (i % cols) + 1\n        if df.dtypes[column] == np.object:\n            fig.add_trace(\n                get_bar_trace(\n                    df=df, \n                    column=column, \n                    colorscale=colorscale\n                ), \n                row=row, \n                col=col\n            )\n            fig.update_xaxes(title_text=\"Count\", row=row, col=col)\n        else:\n#             distplfig = ff.create_distplot(\n#                 [df[column]], \n#                 group_labels=[column], \n#                 colors=colorscale,\n#                 bin_size=.2, \n#                 show_rug=False,\n#             )\n\n#             for k in range(len(distplfig.data)):\n#                 fig.add_trace(\n#                     distplfig.data[k],\n#                     row=row, \n#                     col=col,\n#                 )            \n            fig.add_trace(\n                get_hist_trace(\n                    df=df, \n                    column=column, \n                    color=colorscale[i % len(colorscale)]\n                ), \n                row=row, \n                col=col\n            )\n            fig.add_trace(\n                get_scatter_trace(\n                    df=df, \n                    column=column, \n                    color=colorscale[(i + 1) % len(colorscale)]                    \n                ), \n                row=row, \n                col=col,\n            )\n            fig.update_xaxes(title_text=column, row=row, col=col)\n            fig.update_yaxes(title_text=\"Count\", row=row, col=col)\n            \n    fig.update_layout(\n        height=height, \n        width=width\n    )\n\n    iplot(fig)","59820a73":"columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\"]]\n\nplotly_distributions(df_players[columns_to_plot], horizontal_spacing=0.10, vertical_spacing=0.15)","60627041":"df_wr = df_players[df_players[\"position\"] == \"WR\"]\ncolumns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\nplotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","18842b5b":"# df_wr = df_players[(df_players[\"position\"] == \"RB\") | (df_players[\"position\"] == \"FB\")]\n# columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\n# plotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","19e5d45b":"# df_wr = df_players[df_players[\"position\"] == \"QB\"]\n# columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\n# plotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","26976902":"# df_wr = df_players[df_players[\"position\"] == \"TE\"]\n# columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\n# plotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","8c74d4ad":"# df_wr = df_players[df_players[\"position\"].isin([\"DT\", \"DE\", \"NT\"])]\n# columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\n# plotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","5e76531e":"# df_wr = df_players[df_players[\"position\"].isin([\"LB\", \"ILB\", \"OLB\", \"MLB\"])]\n# columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\n# plotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","3b34f07d":"# df_wr = df_players[df_players[\"position\"].isin([\"SS\", \"FS\", \"CB\", \"DB\"])]\n# columns_to_plot = [col for col in df_players.columns if col not in [\"nflId\", \"birthDate\", \"displayName\", \"position\"]]\n# plotly_distributions(df_wr[columns_to_plot], cols=2, horizontal_spacing=0.10, vertical_spacing=0.15)","3a77adae":"df_games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\nprint(df_games.shape)\ndf_games.head()","413691c0":"def clean_games_df(df):\n    df[\"gameDate\"] = pd.to_datetime(df[\"gameDate\"])\n    return df.set_index(\"gameId\")\n","6e3b0102":"df_games_cleaned = clean_games_df(df_games)","e14f4f5d":"df_games_cleaned.info()","be7aa2d8":"def plot_bar_chart(\n    *,\n    x: List[Any],\n    y: List[Any],\n    name: str,\n    title: str,\n    xaxis_title: str,\n    yaxis_title: str,    \n    colorscale: List[str] = px.colors.diverging.Portland,\n) -> None:\n    trace = go.Bar(\n        x=x,\n        y=y,\n        name=name,\n        marker=dict(\n            color=y,\n            line=dict(color=\"black\", width=1.5),\n            colorscale=px.colors.diverging.Portland,\n        ),\n        text=y,\n        textposition=\"auto\",\n        orientation=\"v\",\n    )\n    layout = go.Layout(\n        title=title, \n        xaxis=dict(title=xaxis_title), \n        yaxis=dict(title=yaxis_title)\n    )\n    fig = go.Figure(data=[trace], layout=layout)\n    fig.update_xaxes(type='category')    \n    iplot(fig)    ","980e56bc":"df_grouped_by_week = df_games_cleaned.groupby(by=[\"week\"]).count()\ndata = df_grouped_by_week[\"gameDate\"]\n\nplot_bar_chart(\n    x=data.index, \n    y=data.values, \n    name=\"Weekly Game Count\", \n    title=\"Weekly Game Count\", \n    xaxis_title=\"Week\",\n    yaxis_title=\"Number of Games\",\n)","6fe8696b":"data = df_games_cleaned[\"gameTimeEastern\"].value_counts()\n\nplot_bar_chart(\n    x=data.index, \n    y=data.values, \n    name=\"Number of Games Per Start Time\", \n    title=\"Number of Games Per Start Time\",\n    xaxis_title=\"Game Time\",\n    yaxis_title=\"Number of Games\",\n)","e2f8d670":"# teamAbbrevs = list(set(df_games[\"homeTeamAbbr\"].tolist() + df_games[\"visitorTeamAbbr\"].values.tolist()))\n\n# df_grouped_by_week = df_games.groupby(by=[\"week\"])[[\"homeTeamAbbr\", \"visitorTeamAbbr\"]].agg({\n#     \"homeTeamAbbr\": list,\n#     \"visitorTeamAbbr\": list,\n# })","3e4899a6":"df_plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\nprint(df_plays.shape)\ndf_plays.head()","76732341":"df_plays.info()","5c41da11":"def convert_game_clock_to_seconds(gameClock: str) -> int:\n    # handle NaN values\n    try:\n        [minutes, seconds, ms] = str(gameClock).split(':')\n        total_seconds = int(minutes) * 60 + int(seconds)\n        return total_seconds\n    except:\n        return np.nan","76e40d13":"def clean_and_merge_plays_df(df):\n    df[\"gameClock\"] = df[\"gameClock\"].apply(convert_game_clock_to_seconds)\n    merged_with_games = df.merge(df_games_cleaned, left_on=\"gameId\", right_on=df_games_cleaned.index)\n    return merged_with_games","7ec2300d":"df_merged = clean_and_merge_plays_df(df_plays)\ndf_merged.head(10)","d5957f56":"data = df_merged[\"down\"].value_counts()\n\ntrace = go.Bar(\n    x=data.index,\n    y=data.values,\n    marker=dict(\n        color=data.values,\n        line=dict(color=\"black\", width=1.5),\n        colorscale=px.colors.diverging.Portland,\n    ),\n    text=data.values,\n    textposition=\"auto\",\n    orientation=\"v\",\n)\nlayout = go.Layout(\n    title=\"Number Of Plays Run By Down\",\n    yaxis=dict(title=\"Number of Plays\"),\n    xaxis=dict(title=\"Down\")\n)\nfig = go.Figure(data=[trace], layout=layout)\nfig.update_xaxes(type='category')\niplot(fig) ","a78397aa":"\ndef grouped_bar_chart(\n    *, \n    title: str,\n    x_values: List[Any], \n    y_values: List[Any],\n    labels: List[str],\n    xaxis_title: str = \"\",\n    yaxis_title: str = \"\",\n) -> None:\n    traces = []\n    \n    for i, label in enumerate(labels):\n        x = x_values\n        y = y_values[i]\n        \n        trace = go.Bar(\n            x=x,\n            y=y,\n            name=label,\n            marker=dict(\n                color=y,\n                line=dict(color=\"black\", width=1.5),\n                colorscale=px.colors.diverging.Portland,\n            ),\n            text=label,\n            textposition=\"auto\",\n            orientation=\"v\",\n            offsetgroup=i,\n        )\n        traces.append(trace)        \n\n    layout = go.Layout(\n        title=title, \n        xaxis=dict(title=xaxis_title), \n        yaxis=dict(title=yaxis_title)\n    )\n    fig = go.Figure(data=traces, layout=layout)\n    fig.update_xaxes(type='category')\n    iplot(fig)\n    ","9b6d6af5":"weekly_down_df = pd.DataFrame(df_merged.groupby(by=[\"week\"])[\"down\"].value_counts()).unstack()\ngrouped_bar_chart(\n    labels=[\"1st Down\", \"2nd Down\", \"3rd Down\", \"4th Down\"],\n    x_values=weekly_down_df.index.tolist(), \n    y_values=weekly_down_df.values.transpose().tolist(), \n    title=\"Plays By Down Week over Week\",\n    xaxis_title=\"Week\",\n    yaxis_title=\"Number of Plays Run\",\n    \n)","0e9e19bb":"def convert_to_percent(df):\n    ret = df.copy()\n    for col in ret.columns:\n        total = ret[col].sum()\n        ret[col] = ret[col] \/ total\n    return ret\n\nweekly_down_percentage = convert_to_percent(\n    pd.DataFrame(\n        df_merged.groupby(by=[\"week\"])[\"down\"].value_counts()\n    ).unstack(level=0)\n)","5da6c423":"grouped_bar_chart(\n    labels=[\"1st Down\", \"2nd Down\", \"3rd Down\", \"4th Down\"],\n    x_values=[idx[1] for idx in weekly_down_percentage.transpose().index], \n    y_values=weekly_down_percentage.values.tolist(), \n    title=\"Percentage of Plays Run By Down Week over Week\",\n    xaxis_title=\"Week\",\n    yaxis_title=\"Percentage of Total Plays Run\",\n    \n)","997e23da":"def plot_weekly_categorical_values(\n    *,\n    df: pd.DataFrame,\n    column: str,\n    title: str = \"Formation Count By Week\",\n    horizontal_spacing=0.10,\n    vertical_spacing=0.10,   \n) -> None:\n    traces = []\n    fig = plotly.subplots.make_subplots(\n        rows=2, \n        cols=1,\n        horizontal_spacing=horizontal_spacing,\n        vertical_spacing=vertical_spacing,\n        shared_xaxes=True,\n        row_heights=[0.4, 0.6],        \n    )\n    \n    uniqs = df[~(pd.isna(df[column]))][column].unique().tolist()\n    \n    for i, category in enumerate(uniqs):\n        df_categorical = df[df[column] == category]\n        weekly_counts = df_categorical.groupby(by=[\"week\"]).count()\n        x = weekly_counts[column].index\n        y = weekly_counts[column].values\n        \n        fig.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                name=category,\n            ),\n            row=1,\n            col=1,\n        )        \n        \n        fig.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                mode=\"none\",\n                fill=\"tozeroy\" if i == 1 else \"tonexty\",\n                name=category,\n                stackgroup=\"one\",\n            ),\n            row=2,\n            col=1,\n        )\n\n    fig.update_layout(title=title, xaxis=dict(title=\"Week\"), height=800)\n    fig.update_xaxes(type='category')\n    fig.show()    \n    ","6e671b53":"plot_weekly_categorical_values(df=df_merged, column=\"offenseFormation\")","f5a08805":"plot_weekly_categorical_values(df=df_merged, column=\"passResult\", title=\"Pass Result By Week\")","5cd00ea4":"def plot_weekly_numerical_values(\n    *,\n    df: pd.DataFrame,\n#     columns: List[str],\n    title: str,\n    horizontal_spacing=0.10,\n    vertical_spacing=0.10, \n    aggregator: Union[Callable, str] = np.sum,\n    agg_mapping: dict = {},\n) -> None:\n    traces = []\n    fig = plotly.subplots.make_subplots(\n        rows=2, \n        cols=1,\n        horizontal_spacing=horizontal_spacing,\n        vertical_spacing=vertical_spacing,\n        shared_xaxes=True,\n        row_heights=[0.4, 0.6],        \n    )\n    \n    weekly_data = df.groupby(by=[\"week\"])[list(agg_mapping.keys())].agg(agg_mapping)\n    \n    for i, col in enumerate(weekly_data.columns):\n        data = weekly_data[col]\n        x = data.index\n        y = data.values        \n#         data = df[col]\n#         weekly_data = df.groupby(by=[\"week\"])[col].agg({ col: aggregator })\n#         x = data.index\n#         y = data.values\n    \n#     for i, category in enumerate(uniqs):\n#         df_categorical = df[df[column] == category]\n#         weekly_counts = df_categorical.groupby(by=[\"week\"]).agg({ column: aggregator })\n#         x = weekly_counts[column].index\n#         y = weekly_counts[column].values\n        \n        fig.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                name=col,\n            ),\n            row=1,\n            col=1,\n        )        \n        \n        fig.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                mode=\"none\",\n#                 fill=\"tozeroy\" if i == 1 else \"tonexty\",\n                fill=\"tonexty\",\n                name=col,\n                stackgroup='one'\n            ),\n            row=2,\n            col=1,\n        )\n\n    fig.update_layout(title=title, xaxis=dict(title=\"Week\"), height=800)\n    fig.update_xaxes(type='category')\n    fig.show()  ","cdf62ed5":"plot_weekly_numerical_values(\n    df=df_merged,\n    agg_mapping={\n#         \"offensePlayResult\": np.sum,\n#         \"epa\": np.sum,\n        \"preSnapHomeScore\": np.sum,\n        \"preSnapVisitorScore\": np.sum,\n    },\n    title=\"Results\"\n)","714afd56":"\n# def plot_scatter_matrix(df):\n#     data = df.loc[:, [\"offensePlayResult\", \"preSnapHomeScore\", \"preSnapVisitorScore\", \"epa\"]]\n#     data.index = np.arange(1, len(data)+1)\n\n#     fig = ff.create_scatterplotmatrix(\n#         data,\n#         diag='box', \n#         colormap='Portland',\n#         colormap_type='cat',\n#         height=700, \n#         width=700,\n#     )\n\n#     iplot(fig)\n    \n# plot_scatter_matrix(df_merged)","65d80c64":"data = df_plays.groupby(by=[\"offenseFormation\"])[\"playId\"].count()\n\ntrace = go.Bar(\n    x=data.index,\n    y=data.values,\n    marker=dict(\n        color=data.values,\n        line=dict(color=\"black\", width=1.5),\n        colorscale=px.colors.diverging.Portland,      \n    ),\n    text=data.values,\n    textposition=\"auto\",\n    orientation=\"v\",        \n)\nlayout = go.Layout(title=\"Offensive Formation Count\")\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","54e69def":"# df_plays.groupby(by=[\"personnelO\"])[\"playId\"].count().sort_values()[::-1]","aedf2cb6":"# df_plays.groupby(by=[\"personnelD\"])[\"playId\"].count().sort_values()[::-1]","41b96475":"df_week_1 = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/week1.csv\")\nprint(df_week_1.shape)\ndf_week_1.head()","2d13804e":"df_week_1.info()","ddeddd11":"def clean_weekly_df(df):\n    df[\"time\"] = pd.to_datetime(df[\"time\"])\n    \n    return df.merge(df_merged)","7051b35a":"weekly_data_filenames = [\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week1.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week2.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week3.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week4.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week5.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week6.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week7.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week8.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week9.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week10.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week11.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week12.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week13.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week14.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week15.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week16.csv',\n    '\/kaggle\/input\/nfl-big-data-bowl-2021\/week17.csv'\n]","89f4f561":"weekly_data = [pd.read_csv(filename) for filename in weekly_data_filenames]\n\nweekly_qb_data = clean_weekly_df(\n    pd.concat(\n        [df[df[\"position\"] == \"QB\"] for df in weekly_data],\n        axis=\"index\",\n    )\n)\nprint(weekly_qb_data.shape)","8d4d1277":"weekly_qb_data.head()","d55492f6":"weekly_qb_data[\"epa\"].describe()","dc324bd5":"def plot_categorical_bar_chart(\n    *,\n    x_values: List[Any],\n    y_values: List[Any],\n    name: str,\n    title: str,\n    xaxis_title: str,\n    yaxis_title: str,    \n    colorscale: List[str] = px.colors.diverging.Portland,\n) -> None:\n    layout = go.Layout(\n        title=title, \n        xaxis=dict(title=xaxis_title), \n        yaxis=dict(title=yaxis_title)\n    )        \n    fig = go.Figure(\n        data=[\n            go.Bar(\n                x=x_values,\n                y=y_values,\n                text=y_values,\n                textposition=\"auto\",\n                orientation=\"v\",  \n                marker=dict(\n                    color=y_values,\n                    line=dict(color=\"black\", width=1.5),\n                    colorscale=px.colors.diverging.Portland,\n                )                \n            )\n        ], \n        layout=layout,\n    )    \n\n    fig.update_xaxes(type='category')    \n    iplot(fig)","206e9dc7":"touchdown_data = weekly_qb_data[(weekly_qb_data[\"event\"] == \"touchdown\") | (weekly_qb_data[\"event\"] == \"pass_outcome_touchdown\")]\n\nplot_categorical_bar_chart(\n    x_values=touchdown_data.groupby(by=[\"offenseFormation\"])[\"event\"].count().index, \n    y_values=touchdown_data.groupby(by=[\"offenseFormation\"])[\"event\"].count().values, \n    name=\"Number of Touchdowns Per Formation\", \n    title=\"Number of Touchdowns Per Formation\", \n    xaxis_title=\"Formation\",\n    yaxis_title=\"Touchdowns\",\n)","b271f31d":"sack_data = weekly_qb_data[(weekly_qb_data[\"event\"] == \"qb_strip_sack\") | (weekly_qb_data[\"event\"] == \"qb_sack\")]\n\nplot_categorical_bar_chart(\n    x_values=sack_data.groupby(by=[\"offenseFormation\"])[\"event\"].count().index, \n    y_values=[\n        round(val, 3) for val in \n        (\n            sack_data.groupby(by=[\"offenseFormation\"])[\"event\"].count().values \/\n            weekly_qb_data.groupby(by=[\"offenseFormation\"])[\"event\"].count().values * 100\n        )\n    ],\n    name=\"Percentage of Play Resulting in a Sack By Formation\", \n    title=\"Percentage of Play Resulting in a Sack By Formation\", \n    xaxis_title=\"Formation\",\n    yaxis_title=\"Percentage of Plays Resulting in a Sack\",\n\n)","fc5bfbce":"interception_data = weekly_qb_data[(weekly_qb_data[\"passResult\"] == \"IN\")]\n\nplot_bar_chart(\n    x=interception_data.groupby(by=[\"offenseFormation\"])[\"passResult\"].count().index, \n    y=[\n        round(val, 3) for val in \n        (\n            interception_data.groupby(by=[\"offenseFormation\"])[\"passResult\"].count().values \/\n            weekly_qb_data.groupby(by=[\"offenseFormation\"])[\"passResult\"].count().values * 100\n        )\n    ],\n    name=\"Percentage of Plays Resulting in an Interception by Formation\",\n    title=\"Percentage of Plays Resulting in an Interception by Formation\",\n    xaxis_title=\"Formation\",\n    yaxis_title=\"Percentage of Plays Resulting in an Interception\",\n)","a140d81c":"def plot_scatterplot(\n    *,\n    df: pd.DataFrame, \n    x_column: str, \n    y_column: str,\n    title: str,\n) -> None:\n    trace = go.Scattergl(\n        x=df[x_column],\n        y=df[y_column],\n        mode=\"markers\",\n    )\n    \n    layout = go.Layout(\n        title=title,\n        xaxis=dict(title=x_column),\n        yaxis=dict(title=y_column),\n    )\n    fig = go.Figure(data=[trace], layout=layout)\n    iplot(fig)\n        ","7278ecf6":"def plot_boxplot(\n    *,\n    df: pd.DataFrame, \n    x_column: str, \n    y_column: str,\n    title: str,\n) -> None:    \n    data = []\n    categorical_labels = df[x_column].unique()\n    \n    # sort x values\n    try:\n        are_integers = all([float(l) for l in categorical_labels])\n        if are_integers:\n            sorted_labels = sorted(categorical_labels, key=lambda x: float(x))\n        else:\n            sorted_labels = sorted(categorical_labels, key=lambda x: str(x))\n    except:\n        sorted_labels = sorted(categorical_labels, key=lambda x: str(x))\n    \n    for i in range(len(categorical_labels)):\n        label = sorted_labels[i]\n        data.append(\n            dict(\n                x=label,\n                y=df[df[x_column] == label][y_column],\n            )\n        )\n        \n    fig = go.Figure()\n    for item in data:\n        fig.add_trace(\n            go.Box(\n                y=item[\"y\"],\n                name=item[\"x\"],\n                line_width=1,\n                whiskerwidth=0.2,\n            )\n        )\n        \n    fig.update_layout(\n        title=title,\n        xaxis=dict(title=x_column),\n        yaxis=dict(\n            title=y_column,\n            autorange=True,\n            showgrid=True,\n            zeroline=True,\n            dtick=5,\n            gridcolor='rgb(255, 255, 255)',\n            gridwidth=1,\n            zerolinecolor='rgb(255, 255, 255)',\n            zerolinewidth=2,            \n        ),\n        showlegend=False,\n        margin=dict(\n            l=40,\n            r=30,\n            b=80,\n            t=100,\n        ),        \n    )\n    fig.update_xaxes(type='category')    \n    iplot(fig)\n        ","84809b56":"plot_boxplot(\n    df=weekly_qb_data,\n    x_column=\"numberOfPassRushers\",\n    y_column=\"offensePlayResult\",\n    title=\"QB Play Results Based on Number of Pass Rushers\",\n)","52cf5238":"plot_boxplot(\n    df=weekly_qb_data,\n    x_column=\"offenseFormation\",\n    y_column=\"offensePlayResult\",\n    title=\"QB Play Results Based on Offensive Formation\",\n)","3260a92c":"plot_boxplot(\n    df=weekly_qb_data,\n    x_column=\"defendersInTheBox\",\n    y_column=\"offensePlayResult\",\n    title=\"QB Play Results Based on Defenders in the Box\",\n)","9e3ff354":"plot_boxplot(\n    df=weekly_qb_data,\n    x_column=\"offenseFormation\",\n    y_column=\"epa\",\n    title=\"EPA Based on Offensive Formation\",\n)","ece7cab9":"### Running Backs and Fullbacks","99a57cab":"## Goals\n\n+ Analyze player data\n+ Analyze game data\n+ Analyze aggregate team data","e104c5a6":"## Plays Analysis\n\n### Columns Overview\n\n+ **gameId**: Game identifier, unique (numeric)\n+ **playId**: Play identifier, not unique across games (numeric)\n+ **playDescription**: Description of play (text)\n+ **quarter**: Game quarter (numeric)\n+ **down**: Down (numeric)\n+ **yardsToGo**: Distance needed for a first down (numeric)\n+ **possessionTeam**: Team on offense (text)\n+ **playType**: Outcome of dropback: sack or pass (text)\n+ **yardlineSide**: 3-letter team code corresponding to line-of-scrimmage (text)\n+ **yardlineNumber**: Yard line at line-of-scrimmage (numeric)\n+ **offenseFormation**: Formation used by possession team (text)\n+ **personnelO**: Personnel used by offensive team (text)\n+ **defendersInTheBox**: Number of defenders in close proximity to line-of-scrimmage (numeric)\n+ **numberOfPassRushers**: Number of pass rushers (numeric)\n+ **personnelD**: Personnel used by defensive team (text)\n+ **typeDropback**: Dropback categorization of quarterback (text)\n+ **preSnapHomeScore**: Home score prior to the play (numeric)\n+ **preSnapVisitorScore**: Visiting team score prior to the play (numeric)\n+ **gameClock**: Time on clock of play (MM:SS)\n+ **absoluteYardlineNumber**: Distance from end zone for possession team (numeric)\n+ **penaltyCodes**: NFL categorization of the penalties that ocurred on the play. For purposes of this contest, the most important penalties are Defensive Pass Interference (DPI), Offensive Pass Interference (OPI), Illegal Contact (ICT), and Defensive Holding (DH). Multiple penalties on a play are separated by a ; (text)\n+ **penaltyJerseyNumber**: Jersey number and team code of the player commiting each penalty. Multiple penalties on a play are separated by a ; (text)\n+ **passResult**: Outcome of the passing play (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass, text)\n+ **offensePlayResult**: Yards gained by the offense, excluding penalty yardage (numeric)\n+ **playResult**: Net yards gained by the offense, including penalty yardage (numeric)\n+ **epa**: Expected points added on the play, relative to the offensive team. Expected points is a metric that estimates the average of every next scoring outcome given the play's down, distance, yardline, and time remaining (numeric)\n+ **isDefensivePI**: An indicator variable for whether or not a DPI penalty ocurred on a given play (TRUE\/FALSE)\n\n### Initial Questions:\n\nGeneral:\n\n+ Which team ran the most plays?\n+ How many games went into overtime?\n+ How many times did teams go for it on 4th down?\n+ What formations worked best on 4th down?\n+ What was the pass result frequency over the course of a season?\n\nFor formations:\n\n+ What formations produces the most yards on average?\n+ What relationship holds between yards to go and offensive\/defensive formation? What about time left in the game?\n+ What formations produce the most penalties? Defensive pass inference? Sacks? Interceptions?\n+ What's the correlation between formation and play type?\n+ What teams favor what formations? \n+ Are there formations that work best for certain teams?\n+ What relationship holds between formations, defenders in the box, number of pass rushers, and play result?\n+ Do formation frequencies change over the course of a season?\n\nPotential for textual analysis on `playDescription` column.","91902278":"### Observations\n\n+ More players went to Alabama than anywhere else\n+ Suprisingly, there is a still a player at <160 lbs.\n+ Average players is 6'1.\n+ Oldest player is ~43 and youngest is ~22. Most are between ~26 and ~30.","e47ef736":"## To Be Continued...","7d58d56c":"#### Wide Receivers","4de629f2":"# NFL EDA 2021 Edition - Lean, Clean, and Astroturf Green\n\nAn analysis of NFL statistics for the NFL Big Data Bowl 2021\n\n## Description\n\nWhen a quarterback takes a snap and drops back to pass, what happens next may seem like chaos. As offensive players move in various patterns, the defense works together to prevent successful pass completions and then to quickly tackle receivers that do catch the ball. In this year\u2019s Kaggle competition, your goal is to use data science to better understand the schemes and players that make for a successful defense against passing plays.\n\nIn American football, there are a plethora of defensive strategies and outcomes. The National Football League (NFL) has used previous Kaggle competitions to focus on offensive plays, but as the old proverb goes, \u201cdefense wins championships.\u201d Though metrics for analyzing quarterbacks, running backs, and wide receivers are consistently a part of public discourse, techniques for analyzing the defensive part of the game trail and lag behind. Identifying player, team, or strategic advantages on the defensive side of the ball would be a significant breakthrough for the game.\n\nThis competition uses NFL\u2019s Next Gen Stats data, which includes the position and speed of every player on the field during each play. You\u2019ll employ player tracking data for all drop-back pass plays from the 2018 regular season. The goal of submissions is to identify unique and impactful approaches to measure defensive performance on these plays. There are several different directions for participants to \u2018tackle\u2019 (ha)\u2014which may require levels of football savvy, data aptitude, and creativity. As examples:\n\n+ What are coverage schemes (man, zone, etc) that the defense employs? What coverage options tend to be better performing?\n+ Which players are the best at closely tracking receivers as they try to get open?\n+ Which players are the best at closing on receivers when the ball is in the air?\n+ Which players are the best at defending pass plays when the ball arrives?\n+ Is there any way to use player tracking data to predict whether or not certain penalties \u2013 for example, defensive pass interference \u2013 will be called?\n+ Who are the NFL\u2019s best players against the pass?\n+ How does a defense react to certain types of offensive plays?\n+ Is there anything about a player \u2013 for example, their height, weight, experience, speed, or position \u2013 that can be used to predict their performance on defense?\n![](http:\/\/)+ What does data tell us about defending the pass play? You are about to find out.\n\nNote: Are you a university participant? Students have the option to participate in a college-only Competition, where you\u2019ll work on the identical themes above. Students can opt-in for either the Open or College Competitions, but not both.","d770b602":"### Defensive Backs","8fe7294d":"### Clean Players Data\n\n+ Clean player height\n+ Create age column","9974ba21":"### Defensive Lineman","2a6bd043":"## Imports","b18105b2":"## Games Analysis\n\n### Columns Overview\n\n+ gameId: Game identifier, unique (numeric)\n+ gameDate: Game Date (time, mm\/dd\/yyyy)\n+ gameTimeEastern: Start time of game (time, HH:MM:SS, EST)\n+ homeTeamAbbr: Home team three-letter code (text)\n+ visitorTeamAbbr: Visiting team three-letter code (text)\n+ week: Week of game (numeric)\n\n### Initial Questions:\n+ What are the distributions for bye weeks in the NFL?\n+ What time do most games start?","e74ff635":"## Weekly Tracking Analysis\n\nEach of the 17 week[week].csv files contain player tracking data from all passing plays during Week [week] of the 2018 regular season. Nearly all plays from each [gameId] are included; certain plays or games with insufficient data are dropped. Each team and player plays no more than 1 game in a given week.\n\n+ **time**: Time stamp of play (time, yyyy-mm-dd, hh:mm:ss)\n+ **x**: Player position along the long axis of the field, 0 - 120 yards. See Figure 1 below. (numeric)\n+ **y**: Player position along the short axis of the field, 0 - 53.3 yards. See Figure 1 below. (numeric)\n+ **s**: Speed in yards\/second (numeric)\n+ **a**: Acceleration in yards\/second^2 (numeric)\n+ **dis**: Distance traveled from prior time point, in yards (numeric)\n+ **o**: Player orientation (deg), 0 - 360 degrees (numeric)\n+ **dir**: Angle of player motion (deg), 0 - 360 degrees (numeric)\n+ **event**: Tagged play details, including moment of ball snap, pass release, pass catch, tackle, etc (text)\n+ **nflId**: Player identification number, unique across players (numeric)\n+ **displayName**: Player name (text)\n+ **jerseyNumber**: Jersey number of player (numeric)\n+ **position**: Player position group (text)\n+ **team**: Team (away or home) of corresponding player (text)\n+ **frameId**: Frame identifier for each play, starting at 1 (numeric)\n+ **gameId**: Game identifier, unique (numeric)\n+ **playId**: Play identifier, not unique across games (numeric)\n+ **playDirection**: Direction that the offense is moving (text, left or right)\n+ **route**: Route ran by offensive player (text)","fc94277a":"### Linebackers","b4da5b41":"### Clean Games","b9517262":"### Tight Ends","1be535f3":"## Players Analysis\n\n### Columns Overview\n\n+ nflId: Player identification number, unique across players (numeric)\n+ height: Player height (text)\n+ weight: Player weight (numeric)\n+ birthDate: Date of birth (YYYY-MM-DD)\n+ collegeName: Player college (text)\n+ position: Player position (text)\n+ displayName: Player name (text)\n\n### Initial Questions:\n+ What are the distributions for player height, weight, age, and position?\n+ What colleges has the most active NFL players?\n+ What are the average heights, weights, and ages by position?","4a381929":"### By Position Analysis\n\nWe'll start with offense and then move to defense.","e8ce5573":"### Quarterbacks"}}