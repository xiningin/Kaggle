{"cell_type":{"fb8ef822":"code","0f258633":"code","a147d195":"code","2b92ee12":"code","6fd8f507":"code","150e368e":"code","a3c9d3c7":"code","c71e9028":"code","898a05b8":"code","83a95df8":"code","7f7e602e":"code","d39f4122":"code","b9c115c9":"code","5ccf65c1":"code","d65abba0":"code","b93b151b":"code","f2618c42":"code","27af6e8d":"code","6fbd2d6c":"code","d5edce12":"code","3c08777d":"code","325405e2":"code","c15095af":"code","fcc46920":"code","43e97c57":"code","b5096730":"code","8d266b51":"code","0fae6133":"markdown","233ede65":"markdown"},"source":{"fb8ef822":"import pandas as pd\nfrom shutil import copy\nimport os\nimport pathlib\nimport PIL\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# os.environ['TF_KERAS'] = '1'\nimport keras","0f258633":"!ls ..\/input\/\n","a147d195":"from keras.models import Model ,Sequential\nfrom keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D,Input,AveragePooling2D ,GlobalAveragePooling2D ,Dropout\n\n","2b92ee12":"data_dir = '..\/input\/hackathon\/train_data'","6fd8f507":"# df = pd.read_csv('dataset\/train.csv')\n# df.head()","150e368e":"def data_loader(dataset,df):\n\n    all_images = os.listdir(\"dataset\/train\")\n\n    co = 0\n\n    for idx, row in df.iterrows():\n        image_name = row[\"Image\"]\n        labels = row[\"target\"]\n        src_path = \".\/dataset\/train\/\" + image_name\n        des_path = os.path.join(\"train_data\/\" + str(labels))\n\n        try:\n            copy(src_path, des_path)\n            print(\"Copied\",co)\n            co += 1\n            \n\n        except IOError as e:\n            print(\"Unable to copy file {} to {}\".format(src_path, des_path))\n\n        except:\n            print(\n                \"When try copy file {} to {}, unexpected error: {}\".format(\n                    src_path, des_path, sys.exc_info()\n                )\n            )\n            \n         \n\n    \n\n\n# if __name__ == \"__main__\":\n#     train = pd.read_csv(\"dataset\/train.csv\")\n#     test = pd.read_csv(\".\/test.csv\")\n#     data_loader('train',train)\n#     data_loader('test',test)","a3c9d3c7":"# data_dir = pathlib.Path(data_dir)\n# total_train = len(list(data_dir.glob('.\/*\/*jpg')))","c71e9028":"mohiniyattam = list(data_dir.glob('.\/mohiniyattam\/*'))\n\nPIL.Image.open(str(mohiniyattam[1]))\n\n# print(img.show())\n","898a05b8":"batch_size = 32\nimg_height = 150\nimg_width = 150\nepochs=40","83a95df8":"data_gen = keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255,\n                                                        width_shift_range=.15,\n                                                        height_shift_range=.15,\n                                                        horizontal_flip=True,\n                                                        zoom_range=0.5,\n                                                        validation_split=0.15)\n","7f7e602e":"train_data_gen = data_gen.flow_from_directory(batch_size=batch_size,\n                                                           directory=data_dir,\n                                                           target_size=(img_height, img_width),\n                                                           subset='training',\n                                                   )\n\nvalid_data_gen = data_gen.flow_from_directory(batch_size=batch_size,\n                                                           directory=data_dir,\n                                                           subset='validation',\n                                                           target_size=(img_height, img_width)\n                                                   )","d39f4122":"def plotImages(images_arr):\n    fig, axes = plt.subplots(1, 5, figsize=(20,20))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()\n    \nfor image,label in train_data_gen:\n    plotImages(image)\n    print(image.shape)\n    print(label.shape)\n    break","b9c115c9":"for image , label in train_data_gen:\n    feature = base(image)\n    print(feature.shape)\n# #     globalAverage =  GlobalAveragePooling2D()(feature)\n# #     print(globalAverage.shape)\n    \n    break","5ccf65c1":"base = keras.applications.VGG16(input_shape=(img_height,img_width,3),\n                                               include_top=False,\n                                               weights='imagenet',\n                               pooling='max')","d65abba0":"base.summary()","b93b151b":"#Freeze  VGG layers upto 17\nbase.trainable = True\nfor layer in base.layers[:17]:\n    layer.trainable = False\n","f2618c42":"model_t = Sequential([\n    base,\n#     globalAverage,\n    Dense(units=1024,activation='relu',kernel_initializer='uniform'),\n    Dropout(0.5),\n#     Dense(units=512,activation='relu'),\n#     Dropout(0.5),\n    Dense(units=8,activation='softmax')\n])\nmodel_t.summary()","27af6e8d":"model_t.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.CategoricalCrossentropy(),\n              metrics=['accuracy'])","6fbd2d6c":"learning_rate_reduction = keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=2,  \n                                            factor=0.5, \n                                            min_lr=0.00001)\n","d5edce12":"history = model_t.fit(\n    train_data_gen,\n    steps_per_epoch=(train_data_gen.samples) \/\/ batch_size,\n    epochs=epochs,\n    validation_data=valid_data_gen,\n    validation_steps=valid_data_gen.samples\/\/batch_size\n)","3c08777d":"plt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['accuracy'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_accuracy'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","325405e2":"val = []\nfor file in valid_data_gen.filenames:\n    print(file)","c15095af":"val = []\nfor file in valid_data_gen.filenames:\n    val.append(file)\n    \n\npred = model_t.predict(valid_data_gen)\npred_clases = np.argmax(pred,axis=-1)\n    \n   \n\n\n    ","fcc46920":"prediction = pd.DataFrame({'imagList':val , 'pred_class':pred_clases})","43e97c57":"\nclass_indices = {value : key for (key, value) in valid_data_gen.class_indices.items()}\nclass_indices","b5096730":"prediction['target'] = prediction['pred_class'].map(class_indices)","8d266b51":"prediction","0fae6133":"![](http:\/\/)","233ede65":"**data_loader** To Structure the directories by their respective classes."}}