{"cell_type":{"c504f946":"code","ce4100c7":"code","bfac2d7e":"code","f8284c28":"code","ba3bcafe":"code","8d415459":"code","c011d865":"code","3e73394f":"code","28f06c1e":"code","7d8e48fc":"code","cd936917":"code","b23170f6":"code","0072b3b8":"code","60d45da0":"markdown","8590d422":"markdown","2f02efa3":"markdown","a9a51478":"markdown","a2b8cf22":"markdown"},"source":{"c504f946":"!git clone https:\/\/github.com\/ayulockin\/Explore-NFNet","ce4100c7":"import tensorflow as tf\nprint(tf.__version__)\n\nimport tensorflow_datasets as tfds\n\nimport sys\nsys.path.append(\"Explore-NFNet\")\nimport os\nimport gc\nimport cv2\nimport numpy as np\nfrom functools import partial\nimport matplotlib.pyplot as plt\n\n# Imports from the cloned repository\nimport agc\nfrom models.resnet import resnet_v1 \nfrom models.mini_vgg import get_mini_vgg\n\n# Augmentation related imports\nimport albumentations as A\n\n# Seed everything for reproducibility\ndef seed_everything():\n    # Set the random seeds\n    os.environ['TF_CUDNN_DETERMINISTIC'] = '1' \n    np.random.seed(hash(\"improves reproducibility\") % 2**32 - 1)\n    tf.random.set_seed(hash(\"by removing stochasticity\") % 2**32 - 1)\n\nseed_everything()\n\n# Avoid TensorFlow to allocate all the GPU at once. \n# Ref: https:\/\/www.tensorflow.org\/guide\/gpu\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n  try:\n    # Currently, memory growth needs to be the same across GPUs\n    for gpu in gpus:\n      tf.config.experimental.set_memory_growth(gpu, True)\n    logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n    print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n  except RuntimeError as e:\n    # Memory growth must be set before GPUs have been initialized\n    print(e)","bfac2d7e":"import wandb\nfrom wandb.keras import WandbCallback\n\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwandb_api = user_secrets.get_secret(\"wandb_api\")\n\nwandb.login(key=wandb_api)","f8284c28":"DATASET_NAME = 'cifar10'\nIMG_HEIGHT = 32\nIMG_WIDTH = 32\nNUM_CLASSES = 10\nSHUFFLE_BUFFER = 1024\nEPOCHS = 100\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE","ba3bcafe":"(train_ds, val_ds, test_ds), info = tfds.load(name=DATASET_NAME, \n                          split=[\"train[:85%]\", \"train[85%:]\", \"test\"], \n                          with_info=True,\n                          as_supervised=True)","8d415459":"@tf.function\ndef preprocess(image, label):\n    # preprocess image\n    image = tf.cast(image, tf.float32)\n    image = image\/255.0\n\n    return image, label\n\n# Define the augmentation policies. Note that they are applied sequentially with some probability p.\ntransforms = A.Compose([\n                A.HorizontalFlip(p=0.7),\n                A.Rotate(limit=30, p=0.7)\n        ])\n\n# Apply augmentation policies.\ndef aug_fn(image):\n    data = {\"image\":image}\n    aug_data = transforms(**data)\n    aug_img = aug_data[\"image\"]\n\n    return aug_img\n\n@tf.function\ndef apply_augmentation(image, label):\n    aug_img = tf.numpy_function(func=aug_fn, inp=[image], Tout=tf.float32)\n    aug_img.set_shape((IMG_HEIGHT, IMG_WIDTH, 3))\n    \n    return aug_img, label\n\ntrain_ds = (\n    train_ds\n    .shuffle(SHUFFLE_BUFFER)\n    .map(preprocess, num_parallel_calls=AUTOTUNE)\n    .map(apply_augmentation, num_parallel_calls=AUTOTUNE)\n    .batch(32)\n    .prefetch(AUTOTUNE)\n)","c011d865":"def show_batch(image_batch, label_batch):\n  plt.figure(figsize=(10,10))\n  for n in range(25):\n      ax = plt.subplot(5,5,n+1)\n      plt.imshow(image_batch[n])\n      # plt.title(f'{np.argmax(label_batch[n].numpy())}')\n      plt.title(f'{label_batch[n].numpy()}')\n      plt.axis('off')\n  \nimage_batch, label_batch = next(iter(train_ds))\nshow_batch(image_batch, label_batch)\n\nprint(image_batch.shape, label_batch.shape)\n\ndel train_ds\ngc.collect()","3e73394f":"class ResNetModel(tf.keras.Model):\n    def __init__(self, resnet, clip_factor=0.01, eps=1e-3):\n        super(ResNetModel, self).__init__()\n        self.resnet = resnet\n        self.clip_factor = clip_factor\n        self.eps = eps\n    \n    def train_step(self, data):\n        images, labels = data\n\n        with tf.GradientTape() as tape:\n            predictions = self.resnet(images)\n            loss = self.compiled_loss(labels, predictions)\n\n        trainable_params = self.resnet.trainable_variables\n        gradients = tape.gradient(loss, trainable_params)\n        agc_gradients = agc.adaptive_clip_grad(trainable_params, gradients, \n                                               clip_factor=self.clip_factor, eps=self.eps)\n\n        self.optimizer.apply_gradients(zip(agc_gradients, trainable_params))\n\n        self.compiled_metrics.update_state(labels, predictions)\n        return {m.name: m.result() for m in self.metrics}\n\n    def test_step(self, data):\n        images, labels = data\n        predictions = self.resnet(images, training=False)\n        loss = self.compiled_loss(labels, predictions)\n        self.compiled_metrics.update_state(labels, predictions)\n        return {m.name: m.result() for m in self.metrics}\n\n    def save_weights(self, filepath):\n        self.resnet.save_weights(filepath=filepath, save_format=\"tf\")\n\n    def call(self, inputs, *args, **kwargs):\n        return self.resnet(inputs)\n\ntf.keras.backend.clear_session()\ntest_model = ResNetModel(resnet_v1((IMG_HEIGHT, IMG_WIDTH, 3), 20, num_classes=NUM_CLASSES, use_bn=False), clip_factor=0.001)\ntest_model.build((1, IMG_HEIGHT, IMG_WIDTH, 3))\ntest_model.summary()\nprint(f\"Total learnable parameters: {test_model.count_params()\/1e6} M\")\n\ndel test_model\ngc.collect()","28f06c1e":"earlystopper = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', patience=10, verbose=0, mode='auto',\n    restore_best_weights=True\n)\n\nreducelronplateau = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor=\"val_loss\", factor=0.2,\n    patience=3, verbose=1\n)","7d8e48fc":"def train():\n    # Initialize W&B run\n    run = wandb.init(job_type='ablation-agc')\n    print(\"config:\", dict(run.config))\n    \n    # Prepare data loader\n    (train_ds, val_ds, test_ds), info = tfds.load(name=DATASET_NAME, \n                              split=[\"train[:85%]\", \"train[85%:]\", \"test\"], \n                              with_info=True,\n                              as_supervised=True)\n    trainloader = (\n        train_ds\n        .shuffle(SHUFFLE_BUFFER)\n        .map(preprocess, num_parallel_calls=AUTOTUNE)\n        .map(apply_augmentation, num_parallel_calls=AUTOTUNE)\n        .batch(run.config.batch_size)\n        .prefetch(AUTOTUNE)\n    )\n    \n    valloader = (\n        val_ds\n        .map(preprocess, num_parallel_calls=AUTOTUNE)\n        .batch(256)\n        .prefetch(AUTOTUNE)\n    )\n\n    testloader = (\n        test_ds\n        .map(preprocess, num_parallel_calls=AUTOTUNE)\n        .batch(256)\n        .prefetch(AUTOTUNE)\n    )\n  \n    # Iniialize model\n    tf.keras.backend.clear_session()\n    resnet_model = resnet_v1((IMG_HEIGHT, IMG_WIDTH, 3), 20, num_classes=NUM_CLASSES, use_bn=False)\n    model = ResNetModel(resnet_model, clip_factor=run.config.clip_factor)\n    \n    # Compile the model\n    model.compile('adam', 'sparse_categorical_crossentropy', metrics=['acc'])\n        \n    # Train model\n    _ = model.fit(trainloader,\n                  epochs=EPOCHS,\n                  validation_data=valloader,\n                  callbacks=[WandbCallback(),\n                             reducelronplateau,\n                             earlystopper])  \n\n    # Evaluate model on test set\n    loss, acc = model.evaluate(testloader)\n    wandb.log({'Test Accuracy': round(acc, 3)})\n    \n    del model\n    del train_ds\n    del val_ds\n    del test_ds\n    gc.collect()","cd936917":"sweep_config = {\n  'method': 'grid',\n  'parameters': {\n      'batch_size': {\n          'values': [128, 256, 512, 1024, 2048]\n      },\n      'clip_factor': {\n          'values': [0.001, 0.01, 0.02, 0.04, 0.16]\n      }\n  }\n}","b23170f6":"sweep_id = wandb.sweep(sweep_config, entity='ayush-thakur', project='nfnet')","0072b3b8":"wandb.agent(sweep_id, function=train)","60d45da0":"# \u26c4 Download and Prepare Dataset","8590d422":"# \ud83e\uddf0 Setups, Installations and Imports","2f02efa3":"# \ud83d\udcf2 Callbacks","a9a51478":"# \ud83d\udc24 Model","a2b8cf22":"# \ud83d\ude8b Albation Study Using W&B Sweep\n"}}