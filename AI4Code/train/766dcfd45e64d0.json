{"cell_type":{"dd26bfb9":"code","077502c3":"code","57dccf34":"code","db8c2e40":"code","fd8dd92a":"code","a6e0d456":"code","3c11d1e1":"code","a92e9240":"code","91f1b417":"code","2982e16d":"code","845459df":"code","ef2a29e9":"code","aaea2abd":"markdown","7e94dbed":"markdown","776b5e46":"markdown","c4e76c81":"markdown","75910ce1":"markdown","d9e1b8b6":"markdown","c0a101c5":"markdown"},"source":{"dd26bfb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","077502c3":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","57dccf34":"data.info() #variables and datatypes\ndata.head(10) # peak to 10 rows\n#data.describe() # knowing basic information is always useful\n","db8c2e40":"pd.options.mode.chained_assignment = None  # preventing some warning outputs\n\ndata['sex'][data['sex'] == 0] = 'female'\ndata['sex'][data['sex'] == 1] = 'male'\n\ndata['cp'][data['cp'] == 1] = 'typical angina'\ndata['cp'][data['cp'] == 2] = 'atypical angina'\ndata['cp'][data['cp'] == 3] = 'non-anginal pain'\ndata['cp'][data['cp'] == 4] = 'asymptomatic'\n\ndata['fbs'][data['fbs'] == 0] = 'lower than 120mg\/ml'\ndata['fbs'][data['fbs'] == 1] = 'greater than 120mg\/ml'\n\ndata['restecg'][data['restecg'] == 0] = 'normal'\ndata['restecg'][data['restecg'] == 1] = 'ST-T wave abnormality'\ndata['restecg'][data['restecg'] == 2] = 'left ventricular hypertrophy'\n\ndata['exang'][data['exang'] == 0] = 'no'\ndata['exang'][data['exang'] == 1] = 'yes'\n\ndata['slope'][data['slope'] == 1] = 'upsloping'\ndata['slope'][data['slope'] == 2] = 'flat'\ndata['slope'][data['slope'] == 3] = 'downsloping'\n\ndata['thal'][data['thal'] == 1] = 'normal'\ndata['thal'][data['thal'] == 2] = 'fixed defect'\ndata['thal'][data['thal'] == 3] = 'reversable defect'\n\ndata['sex'] = data['sex'].astype('object') #we'll need as object data type\ndata.head(10)","fd8dd92a":"fig, axes = plt.subplots(1, 2)\ndata.age.plot(kind='hist', color='b', bins=100, ax=axes[0], title = 'Age')\ndata.chol.plot(kind='hist', color='b', bins=100, ax=axes[1], title = 'Cholestrol')\n","a6e0d456":"# Scatter Plot\n\na= data['sex']== 'male'\nb= data['sex']== 'female'\n\nplt.scatter(data[a]['age'], data[a]['chol'], c='b', label='Male')\nplt.scatter(data[b]['age'], data[b]['age'], c='r', marker= '^', label='female')\nplt.xlabel('Age')\nplt.ylabel('Cholestrol')\nplt.title('Age vs Cholestrol')\nplt.legend(loc='upper left')\nplt.show()","3c11d1e1":"# Line plot\ndata.age.plot(kind='line', color='b', label='Age', linewidth=1, alpha=.9, grid=True, linestyle=':')\ndata.chol.plot(color='r', label='Cholestrol', linewidth=1, alpha=.9, grid=True, linestyle='-')\nplt.legend(loc='upper right')\nplt.xlabel('Age')\nplt.ylabel('Cholestrol')\nplt.title('Age and Cholestrol')\nplt.show()","a92e9240":"f,ax=plt.subplots(figsize =(10,10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f')\n","91f1b417":"# Let's check the high cholestrol\n\nhighchl = data['chol']>200\ndata[highchl]","2982e16d":"data[np.logical_and(data['chol']>250, data['sex']=='male')].head()\ndata[np.logical_and(data['chol']>250, data['sex']=='female')].head()\n","845459df":"# While loop to search for low cholestrol\n\ni=0\nwhile i<150:\n    print('chol is:',data.chol[i])\n    i=i+1\nprint(i,'is low cholestrol good!')","ef2a29e9":"# For loop to see index and corresponding values\n\nfor index, value in data[['chol']][0:3].iterrows():\n    print(index, ':', value)","aaea2abd":"# 4 - Filtering","7e94dbed":"For the further interpretation, it is better we change the categorical variables.","776b5e46":"# 3 - Correlation is a good indicator of relatlions between variables\n\nEspecially, heart diseases are related with age and sex.","c4e76c81":"What about the males and females?\n","75910ce1":"# 1. First,investigate your data!","d9e1b8b6":"## Data Science Road Ahead Map - 1\n\nThis notebook will be a comprehensive guide who wants to learn data science basics.\n\nWe will insvestigate Heart Disease UCI dataset which is well known for machine learning practices.\nDataset consists of 13 attributes:\n\n1. age\n2. sex (1 = male; 0 = female)\n3. chest pain type (4 values)\n4. resting blood pressure\n5. serum cholestoral in mg\/dl\n6. fasting blood sugar > 120 mg\/dl (1 = true; 0 = false)\n7. resting electrocardiographic results (values 0,1,2)\n8. maximum heart rate achieved\n9. exercise induced angina (1 = yes; 0 = no)\n10. oldpeak = ST depression induced by exercise relative to rest\n11. the slope of the peak exercise ST segment\n12. number of major vessels (0-3) colored by flourosopy\n13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\nGiven the information we can start with reading data.","c0a101c5":"It already looks better!\n\nLet's move to investigate with some visualization."}}