{"cell_type":{"152b1e0c":"code","3078497a":"code","63e1c423":"code","453a5028":"code","3ce9f352":"code","d3ca8ce3":"code","45f6045a":"code","cf0f52c9":"code","3822ca0f":"code","d2ca7434":"markdown","31d09974":"markdown","2b9f1a86":"markdown","e97798f3":"markdown","c9c94841":"markdown","394d0874":"markdown","186e10d6":"markdown","93b0c5f9":"markdown","bd64ed45":"markdown","1783fbcb":"markdown"},"source":{"152b1e0c":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.6 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.6\n!pip install 'kaggle-environments>=0.1.6'","3078497a":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","63e1c423":"def cell_swarm(obs, conf):\n    def evaluate_cell(cell):\n        \"\"\" evaluate qualities of the cell \"\"\"\n        cell = get_patterns(cell)\n        cell = calculate_points(cell)\n        for i in range(1, conf.rows):\n            cell = explore_cell_above(cell, i)\n        return cell\n    \n    def get_patterns(cell):\n        \"\"\" get swarm and opponent's patterns of each axis of the cell \"\"\"\n        ne = get_pattern(cell[\"x\"], lambda z : z + 1, cell[\"y\"], lambda z : z - 1, conf.inarow)\n        sw = get_pattern(cell[\"x\"], lambda z : z - 1, cell[\"y\"], lambda z : z + 1, conf.inarow)[::-1]\n        cell[\"swarm_patterns\"][\"NE_SW\"] = sw + [{\"mark\": swarm_mark}] + ne\n        cell[\"opp_patterns\"][\"NE_SW\"] = sw + [{\"mark\": opp_mark}] + ne\n        e = get_pattern(cell[\"x\"], lambda z : z + 1, cell[\"y\"], lambda z : z, conf.inarow)\n        w = get_pattern(cell[\"x\"], lambda z : z - 1, cell[\"y\"], lambda z : z, conf.inarow)[::-1]\n        cell[\"swarm_patterns\"][\"E_W\"] = w + [{\"mark\": swarm_mark}] + e\n        cell[\"opp_patterns\"][\"E_W\"] = w + [{\"mark\": opp_mark}] + e\n        se = get_pattern(cell[\"x\"], lambda z : z + 1, cell[\"y\"], lambda z : z + 1, conf.inarow)\n        nw = get_pattern(cell[\"x\"], lambda z : z - 1, cell[\"y\"], lambda z : z - 1, conf.inarow)[::-1]\n        cell[\"swarm_patterns\"][\"SE_NW\"] = nw + [{\"mark\": swarm_mark}] + se\n        cell[\"opp_patterns\"][\"SE_NW\"] = nw + [{\"mark\": opp_mark}] + se\n        s = get_pattern(cell[\"x\"], lambda z : z, cell[\"y\"], lambda z : z + 1, conf.inarow)\n        n = get_pattern(cell[\"x\"], lambda z : z, cell[\"y\"], lambda z : z - 1, conf.inarow)[::-1]\n        cell[\"swarm_patterns\"][\"S_N\"] = n + [{\"mark\": swarm_mark}] + s\n        cell[\"opp_patterns\"][\"S_N\"] = n + [{\"mark\": opp_mark}] + s\n        return cell\n        \n    def get_pattern(x, x_fun, y, y_fun, cells_remained):\n        \"\"\" get pattern of marks in direction \"\"\"\n        pattern = []\n        x = x_fun(x)\n        y = y_fun(y)\n        # if cell is inside swarm's borders\n        if y >= 0 and y < conf.rows and x >= 0 and x < conf.columns:\n            pattern.append({\n                \"mark\": swarm[x][y][\"mark\"]\n            })\n            # amount of cells to explore in this direction\n            cells_remained -= 1\n            if cells_remained > 1:\n                pattern.extend(get_pattern(x, x_fun, y, y_fun, cells_remained))\n        return pattern\n    \n    def calculate_points(cell):\n        \"\"\" calculate amounts of swarm's and opponent's correct patterns and add them to cell's points \"\"\"\n        for i in range(conf.inarow - 1):\n            # inarow = amount of marks in pattern to consider that pattern as correct\n            inarow = conf.inarow - i\n            swarm_points = 0\n            opp_points = 0\n            # calculate swarm's points and depth\n            swarm_points = evaluate_pattern(swarm_points, cell[\"swarm_patterns\"][\"E_W\"], swarm_mark, inarow)\n            swarm_points = evaluate_pattern(swarm_points, cell[\"swarm_patterns\"][\"NE_SW\"], swarm_mark, inarow)\n            swarm_points = evaluate_pattern(swarm_points, cell[\"swarm_patterns\"][\"SE_NW\"], swarm_mark, inarow)\n            swarm_points = evaluate_pattern(swarm_points, cell[\"swarm_patterns\"][\"S_N\"], swarm_mark, inarow)\n            # calculate opponent's points and depth\n            opp_points = evaluate_pattern(opp_points, cell[\"opp_patterns\"][\"E_W\"], opp_mark, inarow)\n            opp_points = evaluate_pattern(opp_points, cell[\"opp_patterns\"][\"NE_SW\"], opp_mark, inarow)\n            opp_points = evaluate_pattern(opp_points, cell[\"opp_patterns\"][\"SE_NW\"], opp_mark, inarow)\n            opp_points = evaluate_pattern(opp_points, cell[\"opp_patterns\"][\"S_N\"], opp_mark, inarow)\n            # if more than one mark required for victory\n            if i > 0:\n                # swarm_mark or opp_mark priority\n                if swarm_points > opp_points:\n                    cell[\"points\"].append(swarm_points)\n                    cell[\"points\"].append(opp_points)\n                else:\n                    cell[\"points\"].append(opp_points)\n                    cell[\"points\"].append(swarm_points)\n            else:\n                cell[\"points\"].append(swarm_points)\n                cell[\"points\"].append(opp_points)\n        return cell\n                    \n    def evaluate_pattern(points, pattern, mark, inarow):\n        \"\"\" get amount of points, if pattern has required amounts of marks and zeros \"\"\"\n        # saving enough cells for required amounts of marks and zeros\n        for i in range(len(pattern) - (conf.inarow - 1)):\n            marks = 0\n            zeros = 0\n            # check part of pattern for required amounts of marks and zeros\n            for j in range(conf.inarow):\n                if pattern[i + j][\"mark\"] == mark:\n                    marks += 1\n                elif pattern[i + j][\"mark\"] == 0:\n                    zeros += 1\n            if marks >= inarow and (marks + zeros) == conf.inarow:\n                return points + 1\n        return points\n    \n    def explore_cell_above(cell, i):\n        \"\"\" add positive or negative points from cell above (if it exists) to points of current cell \"\"\"\n        if (cell[\"y\"] - i) >= 0:\n            cell_above = swarm[cell[\"x\"]][cell[\"y\"] - i]\n            cell_above = get_patterns(cell_above)\n            cell_above = calculate_points(cell_above)\n            # points will be positive or negative\n            n = -1 if i & 1 else 1\n            # if it is first cell above\n            if i == 1:\n                # add first 4 points of cell_above[\"points\"] to cell[\"points\"]\n                cell[\"points\"][2:2] = [n * cell_above[\"points\"][1], n * cell_above[\"points\"][0]]\n                # if it is not potential \"seven\" pattern in cell and cell_above has more points\n                if abs(cell[\"points\"][4]) < 2 and abs(cell[\"points\"][4]) < cell_above[\"points\"][2]:\n                    cell[\"points\"][4:4] = [n * cell_above[\"points\"][2]]\n                    # if it is not potential \"seven\" pattern in cell and cell_above has more points\n                    if abs(cell[\"points\"][5]) < 2 and abs(cell[\"points\"][5]) < cell_above[\"points\"][3]:\n                        cell[\"points\"][5:5] = [n * cell_above[\"points\"][3]]\n                    else:\n                        cell[\"points\"][7:7] = [n * cell_above[\"points\"][3]]\n                else:\n                    cell[\"points\"][6:6] = [n * cell_above[\"points\"][2], n * cell_above[\"points\"][3]]\n                cell[\"points\"].append(n * cell_above[\"points\"][4])\n                cell[\"points\"].append(n * cell_above[\"points\"][5])\n            else:\n                cell[\"points\"].extend(map(lambda z : z * n, cell_above[\"points\"]))\n        else:\n            cell[\"points\"].extend([0, 0, 0, 0, 0, 0])\n        return cell\n    \n    def choose_best_cell(best_cell, current_cell):\n        \"\"\" compare two cells and return the best one \"\"\"\n        if best_cell is not None:\n            for i in range(len(best_cell[\"points\"])):\n                # compare amounts of points of two cells\n                if best_cell[\"points\"][i] < current_cell[\"points\"][i]:\n                    best_cell = current_cell\n                    break\n                if best_cell[\"points\"][i] > current_cell[\"points\"][i]:\n                    break\n                # if [\"points\"][i] of cells are equal, compare distance to swarm's center of each cell\n                if best_cell[\"points\"][i] > 0:\n                    if best_cell[\"distance_to_center\"] > current_cell[\"distance_to_center\"]:\n                        best_cell = current_cell\n                        break\n                    if best_cell[\"distance_to_center\"] < current_cell[\"distance_to_center\"]:\n                        break\n        else:\n            best_cell = current_cell\n        return best_cell\n        \n    \n###############################################################################\n    # define swarm's and opponent's marks\n    swarm_mark = obs.mark\n    opp_mark = 2 if swarm_mark == 1 else 1\n    # define swarm's center\n    swarm_center_horizontal = conf.columns \/\/ 2\n    swarm_center_vertical = conf.rows \/\/ 2\n    \n    # define swarm as two dimensional array of cells\n    swarm = []\n    for column in range(conf.columns):\n        swarm.append([])\n        for row in range(conf.rows):\n            cell = {\n                        \"x\": column,\n                        \"y\": row,\n                        \"mark\": obs.board[conf.columns * row + column],\n                        \"swarm_patterns\": {},\n                        \"opp_patterns\": {},\n                        \"distance_to_center\": abs(row - swarm_center_vertical) + abs(column - swarm_center_horizontal),\n                        \"points\": []\n                    }\n            swarm[column].append(cell)\n    \n    best_cell = None\n    # start searching for best_cell from swarm center\n    x = swarm_center_horizontal\n    # shift to right or left from swarm center\n    shift = 0\n    \n    # searching for best_cell\n    while x >= 0 and x < conf.columns:\n        # find first empty cell starting from bottom of the column\n        y = conf.rows - 1\n        while y >= 0 and swarm[x][y][\"mark\"] != 0:\n            y -= 1\n        # if column is not full\n        if y >= 0:\n            # current cell evaluates its own qualities\n            current_cell = evaluate_cell(swarm[x][y])\n            # current cell compares itself against best cell\n            best_cell = choose_best_cell(best_cell, current_cell)\n                        \n        # shift x to right or left from swarm center\n        if shift >= 0:\n            shift += 1\n        shift *= -1\n        x = swarm_center_horizontal + shift\n\n    # return index of the best cell column\n    return best_cell[\"x\"]","453a5028":"env.reset()\n# Play as the first agent against \"negamax\" agent.\nenv.run([cell_swarm, cell_swarm])\n#env.run([cell_swarm, \"negamax\"])\nenv.render(mode=\"ipython\", width=500, height=450)","3ce9f352":"# Play as first position against negamax agent.\ntrainer = env.train([None, \"negamax\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = cell_swarm(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    # env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","d3ca8ce3":"def mean_reward(rewards):\n    return \"{0} episodes: won {1}, lost {2}, draw {3}\".format(\n                                                           len(rewards),\n                                                           sum(1 if r[0] > 0 else 0 for r in rewards),\n                                                           sum(1 if r[1] > 0 else 0 for r in rewards),\n                                                           sum(r[0] == r[1] for r in rewards)\n                                                       )\n\n# Run multiple episodes to estimate its performance.\nprint(\"Swarm vs Random Agent\", mean_reward(evaluate(\"connectx\", [cell_swarm, \"random\"], num_episodes=10)))\nprint(\"Swarm vs Negamax Agent\", mean_reward(evaluate(\"connectx\", [cell_swarm, \"negamax\"], num_episodes=10)))","45f6045a":"# \"None\" represents which agent you'll manually play as (first or second player).\nenv.play([cell_swarm, None], width=500, height=450)\n#env.play([None, cell_swarm], width=500, height=450)","cf0f52c9":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(cell_swarm, \"submission.py\")","3822ca0f":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","d2ca7434":"# Install kaggle-environments","31d09974":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","2b9f1a86":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/connectx\/submissions) to view your score and episodes being played.","e97798f3":"# Debug\/Train your Agent","c9c94841":"# Play your Agent\nClick on any column to place a checker there (\"manually select action\").","394d0874":"# Test your Agent","186e10d6":"# Evaluate your Agent","93b0c5f9":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n","bd64ed45":"# Write Submission File\n\n","1783fbcb":"# Create ConnectX Environment"}}