{"cell_type":{"65074546":"code","a49f5d8b":"code","eee1aa18":"code","944f081a":"code","ebc6ca7f":"code","759273ef":"code","19c94a3c":"code","0d392f76":"code","b3b8ddc6":"code","5ee134bb":"code","eba4ff77":"code","d72cc2ac":"code","0fb3bd68":"code","0a659ecb":"code","e3da77bf":"code","447851a7":"code","8d2e574b":"code","31964649":"code","8d97b315":"code","9f6ea885":"code","43359011":"code","0d92bb86":"code","a7301b27":"code","64022d22":"code","ca8bb724":"code","797cd758":"markdown","f965106f":"markdown","07e29a19":"markdown","75d6846b":"markdown","ee16e130":"markdown","26139cf8":"markdown","10cc17db":"markdown","346a73ee":"markdown","9df6670e":"markdown","8aaccd30":"markdown","3d4d0fda":"markdown","578f20b7":"markdown","7e2ce678":"markdown","057293ff":"markdown","e97e6569":"markdown","71a86617":"markdown","883285c8":"markdown","670c1fcb":"markdown","0adc5431":"markdown","eae6af6e":"markdown","b43548bd":"markdown","535bc49f":"markdown","319eac8b":"markdown","9d9841f6":"markdown","2aaf601c":"markdown","c6b34a0c":"markdown","efaaf225":"markdown","c387cb50":"markdown","ba41ace5":"markdown","f1995e99":"markdown","272bee74":"markdown","c68537bd":"markdown","56b885e8":"markdown"},"source":{"65074546":"import os\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nplt.style.use(\"ggplot\")","a49f5d8b":"# Load Data\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eee1aa18":"PATH = \"\/kaggle\/input\/microsoft-stock-data\/MSFT.csv\"\ndata = pd.read_csv(PATH)","944f081a":"data","ebc6ca7f":"data.info()","759273ef":"print(f\"There are {data.shape[0]} rows in dataframe.\")\nprint(f\"And {data.shape[1]} columns. \\n\")\n\nprint(f\"Columns: {data.columns} \\n\")\n\nprint(f\"Percentage of Null values: \\n {data.isnull().sum() \/ data.shape[0]} \\n\")\nprint(f\"Percentage of NA values: \\n {data.isna().sum() \/ data.shape[0]}\")","19c94a3c":"print(f'Type of Date column values is {type(data[\"Date\"][0])}.')","0d392f76":"def date_column_preprocessing():\n    \n    # changing Date column dtype \n    data[\"Date\"] = pd.to_datetime(data[\"Date\"])\n    \n    # years column creating\n    data[\"Year\"] = pd.DatetimeIndex(data[\"Date\"]).year\n    \n    # month column creating\n    data[\"Month\"] = data[\"Date\"].dt.month_name()\n\ndate_column_preprocessing()\n\n# new prepared dataset creating\nmain_data = data[[\"Open\", \"Close\", \"Adj Close\", \"High\", \"Low\", \"Volume\", \"Date\", \"Year\", \"Month\"]]\n\nmain_data","b3b8ddc6":"main_data.info()","5ee134bb":"# arrays for analysis\n\n# time series\ndates = main_data[\"Date\"]\nyears = main_data[\"Year\"]\nmonths = main_data[\"Month\"]\n\n# numeric info\nlow = main_data[\"Low\"]\nhigh = main_data[\"High\"]\nvolume = main_data[\"Volume\"]\nadj_close = main_data[\"Adj Close\"]\nclose = main_data[\"Close\"]\nopen = main_data[\"Open\"]","eba4ff77":"sns.pairplot(data = main_data, corner = True, kind = \"scatter\", diag_kind = \"hist\")","d72cc2ac":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = dates, y = open,\n                         name = \"Open Price\",\n                         line = dict(color = \"royalblue\", width = 2)))\nfig.add_trace(go.Scatter(x = dates, y = close,\n                         name = \"Close Price\",\n                         line = dict(color = \"green\", width = 2)))\nfig.add_trace(go.Scatter(x = dates, y = adj_close,\n                         name = \"Adj Close Price\",\n                         line = dict(color = \"purple\", width = 2)))\n\nfig.update_layout(title = \"Open, Close and Adj Close Prices\", legend_title = \"Legend\",\n                  xaxis_title = \"Date\", yaxis_title = \"Price $\")\n\nfig.show()","0fb3bd68":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = dates, y = high,\n                         name = \"Highest Price\",\n                         line = dict(color = \"firebrick\", width = 2)))\nfig.add_trace(go.Scatter(x = dates, y = low,\n                         name = \"Lowest Price\",\n                         line = dict(color = \"orange\", width = 2)))\n\nfig.update_layout(title = \"Maximum and Minimum Prices\", legend_title = \"Legend\",\n                  xaxis_title = \"Date\", yaxis_title = \"Price $\")\n\nfig.show()","0a659ecb":"fig = go.Figure()\n\nfig = px.histogram(main_data, x = dates, y = volume,\n                   barmode = 'group',\n                   nbins = 50,\n                   hover_data = main_data.columns)\n\nfig.update_layout(title = \"Number of units traded in a day\", legend_title = \"Legend\",\n                  xaxis_title = \"Date\", yaxis_title = \"Count\")\n\nfig.update_xaxes(rangeslider_visible=True)\n\nfig.show()","e3da77bf":"df_98_01 = main_data[main_data[\"Year\"] >= 1998][main_data[\"Year\"] <= 2001]\n\ndates_98_01 = df_98_01[\"Date\"]\n\nopen_98_01 = df_98_01[\"Open\"]\nclose_98_01 = df_98_01[\"Close\"]\nadj_close_98_01 = df_98_01[\"Adj Close\"]\nmin_98_01 = df_98_01[\"Low\"]\nmax_98_01 = df_98_01[\"High\"]\n\ndf_98_01","447851a7":"fig = go.Figure()\n\nfig.add_trace(go.Candlestick(x = dates_98_01, high = max_98_01, low = min_98_01, open = open_98_01, close = close_98_01, name = \"Candlesticks plot\"))\nfig.add_trace(go.Scatter(customdata = df_98_01, x = df_98_01[\"Date\"], y = df_98_01[\"Adj Close\"],\n                         name = \"Adj Close Price\",\n                         line = dict(color = \"#05A300\", width = 2)))\n\nfig.update_layout(title = \"Open, Close and Adj Close Prices + Maximum and Minimum values lineplot and candlestick plot\", legend_title = \"Legend\",\n                  xaxis_title = \"Dates\", yaxis_title = \"Price $\")\n\nfig.show()","8d2e574b":"fig = go.Figure()\n\nfig.add_trace(go.Box(customdata = dates_98_01, y = open_98_01, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Open Prices\", marker_color = \"blue\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\nfig.add_trace(go.Box(customdata = dates_98_01, y = close_98_01, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Close Prices\", marker_color = \"green\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\nfig.add_trace(go.Box(customdata = dates_98_01, y = adj_close_98_01, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Adj Close Prices\", marker_color = \"#6FFF00\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\n\nfig.add_trace(go.Box(customdata = dates_98_01, y = max_98_01, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"High\", marker_color = \"firebrick\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\nfig.add_trace(go.Box(customdata = dates_98_01, y = min_98_01, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Low\", marker_color = \"orange\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\n\nfig.update_layout(title = \"Open, Close and Adj Close Prices + Maximum and Minimum values boxplots\", legend_title = \"Legend\",\n                  xaxis_title = \"Boxplots\", yaxis_title = \"Price $\")\n\nfig.show()","31964649":"bear_98_01 = df_98_01[df_98_01[\"Open\"] < df_98_01[\"Close\"]].shape[0]\nbull_98_01 = df_98_01[df_98_01[\"Open\"] > df_98_01[\"Close\"]].shape[0]\nequal_98_01 = df_98_01[df_98_01[\"Open\"] == df_98_01[\"Close\"]].shape[0]\n\nfig = go.Figure()\n\nfig = px.pie(labels = [\"Open price is less than Close price\", \"Open Price higher than Close price\", \"Open Price is equal to Close price\"], values = [bear_98_01, bull_98_01, equal_98_01],\n             names = [\"Open price is less than Close price\", \"Open Price higher than Close price\", \"Open Price is equal to Close price\"], title = \"Difference between Open and Close prices pie plot\",\n             hole = 0.1,\n             color = [\"Yellow\", \"Red\", \"Orange\"],\n             color_discrete_map = {\"Yellow\" : \"#FFF700\",\n                                   \"Red\" : \"firebrick\",\n                                   \"Orange\" : \"#FF6200\"})\n\nfig.update_traces(textposition = \"inside\", textinfo = \"label+percent+value\", hoverinfo = \"label+percent\", textfont_size = 13)\nfig.update_layout(legend_title = \"Legend\")\n\nfig.show()","8d97b315":"df_15_21 = main_data[main_data[\"Year\"] >= 2015][main_data[\"Year\"] <= 2021]\n\ndates_15_21 = df_15_21[\"Date\"]\n\nopen_15_21 = df_15_21[\"Open\"]\nclose_15_21 = df_15_21[\"Close\"]\nadj_close_15_21 = df_15_21[\"Adj Close\"]\nmin_15_21 = df_15_21[\"Low\"]\nmax_15_21 = df_15_21[\"High\"]\n\ndf_15_21","9f6ea885":"fig = go.Figure()\n\nfig.add_trace(go.Candlestick(x = dates_15_21, high = max_15_21, low = min_15_21, open = open_15_21, close = close_15_21, name = \"Candlesticks plot\"))\nfig.add_trace(go.Scatter(customdata = df_15_21, x = df_15_21[\"Date\"], y = df_15_21[\"Adj Close\"],\n                         name = \"Adj Close Price\",\n                         line = dict(color = \"#05A300\", width = 2)))\n\nfig.update_layout(title = \"Open, Close and Adj Close Prices + Maximum and Minimum values lineplot and candlestick plot\", legend_title = \"Legend\",\n                  xaxis_title = \"Dates\", yaxis_title = \"Price $\")\n\nfig.show()","43359011":"fig = go.Figure()\n\nfig.add_trace(go.Box(customdata = dates_15_21, y = open_15_21, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Open Prices\", marker_color = \"blue\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\nfig.add_trace(go.Box(customdata = dates_15_21, y = close_15_21, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Close Prices\", marker_color = \"green\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\nfig.add_trace(go.Box(customdata = dates_15_21, y = adj_close_15_21, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Adj Close Prices\", marker_color = \"#6FFF00\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\n\nfig.add_trace(go.Box(customdata = dates_15_21, y = max_15_21, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"High\", marker_color = \"firebrick\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\nfig.add_trace(go.Box(customdata = dates_15_21, y = min_15_21, \n                     boxmean = True, boxpoints = \"all\",\n                     name = \"Low\", marker_color = \"orange\",\n                     hoverinfo = \"all\", hovertemplate = \"Date: %{customdata}; Price: %{y}\"))\n\nfig.update_layout(title = \"Open, Close and Adj Close Prices + Maximum and Minimum values boxplots\", legend_title = \"Legend\",\n                  xaxis_title = \"Boxplots\", yaxis_title = \"Price $\")\n\nfig.show()","0d92bb86":"bear_15_21 = df_15_21[df_15_21[\"Open\"] < df_15_21[\"Close\"]].shape[0]\nbull_15_21 = df_15_21[df_15_21[\"Open\"] > df_15_21[\"Close\"]].shape[0]\nequal_15_21 = df_15_21[df_15_21[\"Open\"] == df_15_21[\"Close\"]].shape[0]\n\nfig = go.Figure()\n\nfig = px.pie(labels = [\"Open price is less than Close price\", \"Open Price higher than Close price\", \"Open Price is equal to Close price\"], values = [bear_15_21, bull_15_21, equal_15_21],\n             names = [\"Open price is less than Close price\", \"Open Price higher than Close price\", \"Open Price is equal to Close price\"], title = \"Difference between Open and Close prices pie plot\",\n             hole = 0.1,\n             color = [\"Yellow\", \"Red\", \"Orange\"],\n             color_discrete_map = {\"Yellow\" : \"#FFF700\",\n                                   \"Red\" : \"firebrick\",\n                                   \"Orange\" : \"#FF6200\"})\n\nfig.update_traces(textposition = \"inside\", textinfo = \"label+percent+value\", hoverinfo = \"label+percent\", textfont_size = 13)\nfig.update_layout(legend_title = \"Legend\")\n\nfig.show()","a7301b27":"from math import ceil\n\nfrom math import floor, sqrt\n\n!pip install pmdarima\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom pmdarima.arima import auto_arima\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM","64022d22":"def AutoArima_Prediction(main_data):\n    shape_rows = main_data.shape[0]\n    modelling_data = main_data\n    modelling_data = modelling_data.sort_index(ascending = True, axis=0)\n\n    train_set = modelling_data[:ceil(shape_rows * 0.75)]\n    validation_set = modelling_data[ceil(shape_rows * 0.75):]\n    training = train_set[\"Close\"]\n    validation = validation_set[\"Close\"]\n    \n    model = auto_arima(training, start_p = 1, start_q = 1,max_p = 3, max_q = 3, m = 12, start_P = 0, seasonal = True, d = 1, D = 1,\n                       trace = True, error_action = 'ignore', suppress_warnings = True)\n    \n    model.fit(training)\n    forecast = model.predict(n_periods = ceil(floor(main_data.shape[0] * 0.25)))\n    forecast = pd.DataFrame(forecast, index = validation_set.index, columns = ['Prediction'])\n    \n    rms = np.sqrt(np.mean(np.power((np.array(validation_set['Close']) - np.array(forecast['Prediction'])), 2)))\n    print('RMSE value on validation set:',rms)\n    \n    plt.figure(figsize = [12, 9])\n    plt.plot(train_set['Close'])\n    plt.plot(validation_set['Close'])\n    plt.plot(forecast['Prediction'])\n    plt.xlabel('Date', size=20)\n    plt.ylabel('Stock Price', size=20)\n    plt.title('Stock Price Prediction by Auto ARIMA', size=20)\n    plt.legend(['Model Training Data','Actual Data','Predicted Data'])\n    \nAutoArima_Prediction(main_data)","ca8bb724":"def LSTM_Prediction(main_data):\n    shape = main_data.shape[0]\n    modelling_data = main_data[['Close']]\n    dataset = modelling_data.values\n    train = modelling_data[:ceil(shape * 0.75)]\n    validation = modelling_data[ceil(shape * 0.75):]\n    \n    scaler = MinMaxScaler(feature_range = (0, 1))\n    scaled_data = scaler.fit_transform(dataset)\n    x_train, y_train = [], []\n    for i in range(40, len(train)):\n        x_train.append(scaled_data[i - 40:i, 0])\n        y_train.append(scaled_data[i, 0])\n    x_train, y_train = np.array(x_train), np.array(y_train)\n    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1],1))\n    \n    model = Sequential()\n    model.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1],1)))\n    model.add(LSTM(units = 50))\n    model.add(Dense(1))\n    \n    model.compile(loss = 'mean_squared_error', optimizer = 'adam')\n    model.fit(x_train, y_train, epochs = 1, batch_size = 1, verbose = 2)\n    \n    inputs = modelling_data[len(modelling_data) - len(validation) - 40:].values\n    inputs = inputs.reshape(-1,1)\n    inputs  = scaler.transform(inputs)\n    \n    X_test = []\n    for i in range(40, inputs.shape[0]):\n        X_test.append(inputs[i - 40:i ,0])\n    X_test = np.array(X_test)\n    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))\n    \n    closing_price = model.predict(X_test)\n    closing_price = scaler.inverse_transform(closing_price)\n    rms = np.sqrt(np.mean(np.power((validation - closing_price),2)))\n    print('RMSE value on validation set:',rms)\n    \n    validation['Predictions'] = closing_price\n    \n    plt.figure(figsize = [12, 9])\n    plt.plot(train['Close'])\n    plt.plot(validation[['Close','Predictions']])\n    plt.xlabel('Date',size=20)\n    plt.ylabel('Stock Price',size=20)\n    plt.title('Stock Price Prediction by Long Short Term Memory (LSTM)',size=20)\n    plt.legend(['Model Training Data','Actual Data','Predicted Data'])\n    \n    # Summary of our LSTM model\n    print(\"-\" * 80)\n    model.summary()\n    \nLSTM_Prediction(main_data)","797cd758":"**Import libraries**","f965106f":"**Awesome result!** Here we can see that LSTM model worked as well and much better than Auto - Arima model. ","07e29a19":"**Difference between Open and Close prices pie plot**","75d6846b":"# 3) Data preprocessing\n\nIn this step our goals are:\n\n1. Fix Date column problem. Actually change dtype of this column;\n\n2. Create extra column with months and years info for future EDA.","ee16e130":"Here we can see that:\n\n* There are 8929 rows in dataframe and 7 columns. Columns are Date - Date, Open - Price from the first transaction of a trading day, High - Maximum price in a trading day, Low - Minimum price in a trading day, Close - Price from the last transaction of a trading day, Adj Close - Closing price adjusted to reflect the value after accounting for any corporate actions, Volume - Number of units traded in a day;\n* Date column dtype is Object, so we must fix that;\n* Also, Date first value is 1986-03-13 and last value is 2021-08-13. Well, there are observations for 35 years (every day, except weekends);\n* Fortunately there are not NA and NaN values. Thank you author of this dataset :)  .","26139cf8":"# 4.3) 1998 - 2001 & 2015 - 2021 years period analysis.","10cc17db":"In these plots we can see that:\n\n1. In range of 1998 - 2001 years we can find some serious price changes;\n2. In range of 2015 - 2021 years we can see really massive rise in close, open and max, min prices;\n3. Value of units traded in a day decreased to 2021.\n\nSo we must explore these two periods.","346a73ee":"**2015 - 2021 years range**","9df6670e":"Finally, we completed our goal - predict microsoft stock prices and check it with real prices.\n\n**Thank you everyone who check this notebook. If you like my notebook upvote it and if you dislike, please, write your comments it will help me to improve my skills.**","8aaccd30":"**Volume**","3d4d0fda":"# 6) Conclusion","578f20b7":"**1998 - 2001 years range.**","7e2ce678":"# EDA and Prediction of Microsoft Stocks.\n\nHello everyone! In this notebook we will analyze Microsoft Stocks Dataset and do really interesting thing - Time Series Forecasting, specifically predict Microsoft Stocks prices. Let`s start!","057293ff":"# 1) Import Libraries and Load Data\n\nFirstly, lets import all useful libraries. Secondly, load data.","e97e6569":"**Other libraries for working with machine learning we will import in Model Building steps.**","71a86617":"# 4.2) Time Series data analysis.","883285c8":"**Open, Close and Adj Close Prices.**","670c1fcb":"# 4) Analyzing.\n\nIn this step we will try to make interesting EDA and find some curious facts.","0adc5431":"In this step we will try to make forecasting prediction of Close prices in 2021 year and compare our prediction with real situation.\nWe will use two types of models: \n\n1. Auto - Arima (I have read many articles about this model and in my opinion its good choice);\n2. Long Short Term Memory (LSTM) (LSTM is able to store past information that is important, and forget the information that is not, thats why it is).","eae6af6e":"In these plots about 1998 - 2001 years period we can see that:\n\n1. Prices increased during this period;\n2. Prices increased especially in the 1999-2000 range;\n3. In this period, the mean of the open and close prices were equal to 34 - 35 $;\n\n4. Highest price was equal to almost 60 dollars, lowest to 15$;\n5. Results of pie plot about difference between Open and Close prices you can see upper.\n","b43548bd":"**More detail Open, Adj Close, Maximum and Minimum prices lineplot**","535bc49f":"**Data preprocessing and Predicting**","319eac8b":"**Open, Adj Close, Maximum and Minimum prices boxplots**","9d9841f6":"**Maximum and Minimum prices**","2aaf601c":"In these plots about 2015 - 2021 years period we can see that:\n\n1. Prices steadily increased in price during this period;\n\n2. In this period, the mean of the open and close prices were equal to 113 - 114 $;\n\n\n3. Highest price was equal to almost 292 dollars, lowest to 291$;\n\n4. Results of pie plot about difference between Open and Close prices of 2015 - 2021 period are different with pie plot you can see upper. In this plot we can see that count of situations when Open prices is less than Close prices have grewed up. It approved our conclusion about steadily increased in prices.","c6b34a0c":"**More detail Open, Adj Close, Maximum and Minimum prices lineplot**","efaaf225":"**Really bad result. It is not even near with actuall stock prices. Let`s go to LSTM.**","c387cb50":"# 4.1) Review visualization.","ba41ace5":"**Here we go!** We are ready to go to the next step. Exploratory data analysis.","f1995e99":"How we thought Type of Date column values is <class 'str'>, so it is good for us.","272bee74":"# 5) Modelling","c68537bd":"# 2) Fast looking on dataset\n\nLet`s see head of our data frame, list of columns, size and nan\/null values in this dataset.","56b885e8":"**Open, Adj Close, Maximum and Minimum prices boxplots**"}}