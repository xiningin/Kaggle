{"cell_type":{"56629d99":"code","b9bf6078":"code","98e72f54":"code","4e067d15":"code","690b5382":"code","2f889eb8":"code","16ceb50c":"code","eff2d19f":"code","bba2c1ea":"code","9499379c":"code","491e66df":"code","5f52962b":"code","b72a96ee":"code","8428bb25":"code","49fb9bbc":"code","dad7734f":"code","b73dad30":"code","6e288585":"code","4f7dc4c3":"code","f29f334c":"code","b1a0935a":"code","d4839d85":"code","8fe25d02":"code","c649f390":"code","e6406153":"code","0e9b8c8c":"code","348a1efc":"markdown","5f624097":"markdown","b326779c":"markdown","77125f76":"markdown","d64176d6":"markdown","2bcea84c":"markdown","a9611e07":"markdown","c491ca55":"markdown","b7f9de83":"markdown","9136a93b":"markdown","ff8383ef":"markdown","5af6500e":"markdown","24daf7e8":"markdown","75c4f98d":"markdown","f658eb0c":"markdown"},"source":{"56629d99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9bf6078":"df = pd.read_csv(\"\/kaggle\/input\/amazon-stocks-lifetime-dataset\/AMZN.csv\")\ndf.head(10)","98e72f54":"df.info()","4e067d15":"df['Date'] = pd.to_datetime(df['Date'],format='%Y-%m-%d')\ndf.info()\n","690b5382":"data = pd.DataFrame({'Date':df['Date'],'Closing Price':df['Close']})\ndata.head(10)","2f889eb8":"data.index = data.Date\ndata = data.drop('Date',axis=1)\ndata.head()","16ceb50c":"data = data[\"2016\":]\ndata.head(10)","eff2d19f":"len(data)","bba2c1ea":"plt.figure(figsize=(10,10))\nplt.plot(data.index,data['Closing Price'])\nplt.xlabel(\"date\")\nplt.ylabel(\"closing price\")\n","9499379c":"def myplot(series):\n    plt.figure(figsize=(10,10))\n    plt.plot(data.index,series)\n    plt.xlabel(\"date\")\n    plt.ylabel(\"closing price\")\n    \n    ","491e66df":"\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nresult = seasonal_decompose(data ,model = 'additive',period = 20)\nSeasonal = result.seasonal.to_numpy()\nTrend = result.trend.to_numpy()\ndata_original = data.to_numpy()\nmyplot(result.trend)\nmyplot(result.seasonal)\nmyplot(result.resid)\n","5f52962b":"data_series = result.resid\ndata_series.replace([np.inf, -np.inf], np.nan, inplace=True) \ndata_series = data_series.fillna(0)\nmyplot(data_series)","b72a96ee":"\ndata_series = np.log(300 + data_series)\nmyplot(data_series)","8428bb25":"from statsmodels.tsa.stattools import adfuller\ndata_series = data_series.fillna(0)\nresult = adfuller(data_series)\nprint(\"The p-value is \" + str(result[1]))\nif result[1] < 0.05:\n    print(\"data-series is stationary\")\nelse:\n    print(\"data-series is not stationary\")\n","49fb9bbc":"data_array = data_series.to_numpy()\ndata_array = data_array\ntrain = data_array[0: 900]\ntest = data_array[900:976]\nx = []\nval = 0\nfor c in test:\n    x.append(val+900)\n    val = val + 1\n    \nplt.plot(train,label = \"train\")\nplt.plot(x,test,label = \"test\")\nplt.legend()","dad7734f":"#Simple moving Average\ndf_sma = data_series.rolling(window = 5).mean()\nplt.plot(df_sma)","b73dad30":"data_sma = df_sma.to_numpy()\ndata_sma = data_sma[900:]\nerror = mean_squared_error(test,data_sma)\nprint(\"The error for exponential moving average is \" + str(error))","6e288585":"plt.figure(figsize=(10,10))\nplt.plot(data_series.index[900:],test,label=\"test\")\nplt.plot(data_series.index[900:],data_sma,label= \"predictions\")\nplt.legend()","4f7dc4c3":"#Exponential moving average\ndf_ema = data_series.ewm(span = 5,adjust = False).mean()\nplt.plot(df_ema)","f29f334c":"data_ema = df_ema.to_numpy()\ndata_ema = data_ema[900:]\nerror = mean_squared_error(test,data_ema)\nprint(\"The error for exponential moving average is \"+ str(error))","b1a0935a":"plt.figure(figsize=(10,10))\nplt.plot(data_series.index[900:],test,label=\"test\")\nplt.plot(data_series.index[900:],data_ema,label= \"predictions\")\nplt.legend()","d4839d85":"from statsmodels.tsa.stattools import acf, pacf\nplt.plot(acf(train[:50]))","8fe25d02":"plt.plot(pacf(train))","c649f390":"from statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\n\npredictions = []\ninput = []\nfor x in train:\n    input.append(x)\nfor x in test:\n    model = ARIMA(input,order=(2,0,1))\n    output = model.fit(disp=0).forecast()\n    predictions.append(output[0])\n    input.append(output[0])\nerror = mean_squared_error(test,predictions)\nprint(\"The mean squared error is given as \" + str(error))\n    ","e6406153":"plt.figure(figsize=(10,10))    \nplt.plot(data_series.index[900:],test,label=\"test\")\nplt.plot(data_series.index[900:],predictions,label= \"predictions\")\nplt.legend()","0e9b8c8c":"plt.figure(figsize=(10,10))\nX = []\nA = []\nE = []\nS = []\nfrom math import exp\nfor i in range(len(test)):\n    A.append(exp(predictions[i]) + Seasonal[i+900] + Trend[i+900])\n    X.append(exp(test[i]) + Seasonal[i+900] + Trend[i+900])\n    E.append(exp(data_ema[i]) + Seasonal[i+900] + Trend[i+900])\n    S.append(exp(data_sma[i]) + Seasonal[i+900] + Trend[i+900])\n    \nplt.plot(data_series.index[900:],X,label=\"test\")\nplt.plot(data_series.index[900:],A,label= \"Arima_predictions\")\nplt.plot(data_series.index[900:],E,label= \"exponentialMA_predictions\")\nplt.plot(data_series.index[900:],S,label= \"SimpleMA_predictions\")\nplt.title(\"Stock price forecasting using different approaches.\")\nplt.legend()","348a1efc":"Now we have our stationary dataset.","5f624097":"We can clearly see this is an additive model as the seasonality is alomost periodic in nature,Also the trend here is increasing one.We will move forward with the residual (removing the trend and seasonality).","b326779c":"Now we have the residual here and the values seem to hetereoscedastic(have varying variance).\nTo remove this problem we will use log transform.","77125f76":"Let us convert the string dates to datetime objects.","d64176d6":"Let us visualise our output.","2bcea84c":"We will use the p value for the auto regressive model to be around 2 or 3.","a9611e07":"We will keep the q value to be 1 here.\n","c491ca55":"Let us see the adfuller test for auto correlation dependance.","b7f9de83":"Now we are going to forecast using our time series data.First we will create our test and train datasets.","9136a93b":"\n**Data Visualisation**","ff8383ef":"We will start by using our simple and exponential moving average.","5af6500e":"We can clearly see that this data is not stationary as it has increasing mean.Let us visualize the trends and seasonality.","24daf7e8":"We will now be using an arima model here.\nWe have to determine the p and q parameters,we will leave the d = 0.","75c4f98d":"Here we are trying to focus on the closing price of the stocks everyday after lets say 2016.","f658eb0c":"Here We can see that Exponential moving average and simple moving average work better than the Arima model,We can improve upon the arima model by using grid search for the parameters.Finally we have plotted the forecasts with all our techniques."}}