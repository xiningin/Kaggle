{"cell_type":{"58e47bb3":"code","82344789":"code","356e10e6":"code","f46fa1af":"code","ad7ca512":"code","fb8527a7":"code","28a0af8c":"code","17f0157c":"code","c5011fef":"code","ebdd1c05":"code","0437dd2a":"code","3c0f6566":"code","64cdebe1":"code","42589b6d":"code","624d44ec":"code","2c9eca44":"code","e8ab8f1c":"code","aa0ec68a":"code","30261fa5":"code","c03b613a":"code","f28dc9c6":"code","78b366df":"code","fb216a21":"code","bf5332f4":"code","1e70da48":"markdown","eff0ef34":"markdown","b7728c62":"markdown","60f0276b":"markdown","f0e75746":"markdown"},"source":{"58e47bb3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns","82344789":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsv = train_data[train_data['Survived'] == 1]","356e10e6":"train_data[:10]","f46fa1af":"train_data.describe(include='all')","ad7ca512":"# alternative way of computing the above\ntrain_data[['Sex', 'Survived']].groupby(['Sex']).mean()","fb8527a7":"testing = 'Age'","28a0af8c":"\n#train_data[testing] = pd.qcut(train_data[testing], 6)","17f0157c":"test_data.corr()","c5011fef":"train_data.drop('Cabin',axis = 1,inplace = True)","ebdd1c05":"train_data.drop('Ticket',axis = 1,inplace = True)","0437dd2a":"train_data.drop('Name',axis = 1,inplace = True)","3c0f6566":"train_data.drop('PassengerId',axis = 1,inplace = True)\ntrain_data.head()","64cdebe1":"train_data = train_data.fillna({\"Embarked\": \"S\"})\ntrain_data = train_data.fillna({\"Age\": 30})","42589b6d":"#train_data['Age'] = pd.cut(train_data['Age'], 6)","624d44ec":"wom = train_data[train_data['Sex'] == 'female']","2c9eca44":"#wom['Age'] = pd.cut(wom['Age'], 6)","e8ab8f1c":"\nwomend = wom[wom['Survived'] == 0]\n\nw3 = wom.query('not (Pclass == 3 and Age > 35)')\nprint(len(w3) \/ len(test_data))\nw3.describe(include='all')\n#w3.corr()\n#w2 = wom.query('Pclass < 3 and Age < 38')\n#w2[['SibSp', 'Survived']].groupby(['SibSp']).mean()\n#sns.countplot('SibSp', data = w2)","aa0ec68a":"s = sv.query()","30261fa5":"\n\n\nmen = train_data[train_data['Sex'] == 'male']\nmens = men[men['Survived'] == 1]\n#mens.head(len(mens))\n#men.corr()\nmens[['Age', 'Survived']].groupby(['Age']).mean()\n\n","c03b613a":"kids = train_data[train_data['Age'] < 25]\nkids.corr()\nks = kids[kids['SibSp'] > 3]\n#ks.head()\n#ks[['Parch', 'Survived']].groupby(['Parch']).mean()","f28dc9c6":"predictions = []\nfor idx, row in test_data.iterrows():\n    # make your changes in this cell!\n    if row['Sex'] == 'female' and row['Pclass'] != 3:\n        predictions.append(1)\n    elif row['Age'] < 16 and row['Pclass'] != 3:\n        predictions.append(1)\n    else:\n        predictions.append(0)","78b366df":"assert len(predictions) == len(test_data), 'Number of predictions must match number of test data rows!'","fb216a21":"test_data['Survived'] = predictions","bf5332f4":"test_data[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)","1e70da48":"# Making predictions","eff0ef34":"# Basic analysis","b7728c62":"# Loading and examining data","60f0276b":"# Working with rows manually","f0e75746":"**ASDF****"}}