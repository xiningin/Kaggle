{"cell_type":{"78bf7ca9":"code","b6599099":"code","cb93ebaf":"code","1bd13a9c":"code","3a3e7204":"code","5168bc05":"code","1ffd3271":"code","a5322b85":"code","e6343aeb":"code","2a00963d":"code","921681d4":"code","7d240979":"code","14bac2c1":"code","27430f8c":"code","d61c5cf1":"code","84f2ebfd":"code","2116bd50":"code","c821dad9":"markdown","8359387b":"markdown","b5a5d767":"markdown","2160c0a7":"markdown","9e2b71bb":"markdown","19d9b74e":"markdown","3234e19f":"markdown","edd4fb05":"markdown","de1cb435":"markdown","d39506aa":"markdown","f5ab225a":"markdown","c2022bda":"markdown","3715856f":"markdown","8e56e01d":"markdown","814735d6":"markdown"},"source":{"78bf7ca9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b6599099":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings('ignore')","cb93ebaf":"original = pd.read_csv('..\/input\/ks-projects-201801.csv')\noriginal['deadline']=pd.to_datetime(original['deadline'], format=\"%Y\/%m\/%d\").dt.date\noriginal['launched']=pd.to_datetime(original['launched'], format=\"%Y\/%m\/%d\").dt.date\noriginal.head(4)","1bd13a9c":"df = original.drop(['ID','goal','pledged','usd_pledged_real'],1)\ndf['duration(days)'] = (df['deadline'] - df['launched']).dt.days\ndf['launch_year']=pd.to_datetime(original['launched'], format=\"%Y\/%m\/%d\").dt.year\ndf.head()","3a3e7204":"state_count = df.state.value_counts()\ngo1 = go.Bar(\n            x=state_count.index,\n            y=state_count.values,\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\n\ndata = [go1]\nlayout=go.Layout(title=\"Distribution of States\", xaxis={'title':'State'}, yaxis={'title':'No of Campaigns'}, width=600, height=400)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","5168bc05":"go1 = go.Bar(\n            x=df.main_category.value_counts().index,\n            y=df.main_category.value_counts().values,\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\n\ndata = [go1]\nlayout=go.Layout(title=\"Distribution of Main Categories\", xaxis={'title':'Main Category'}, yaxis={'title':'No of Campaigns'}, width=600, height=400)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","1ffd3271":"go1 = go.Bar(\n            x=df.category.value_counts()[:20].index,\n            y=df.category.value_counts()[:20].values,\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\ndata = [go1]\nlayout=go.Layout(title=\"Distribution of Top 20 Categories\", xaxis={'title':'Category'}, yaxis={'title':'No of Campaigns'}, width=600, height=400)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","a5322b85":"go1 = go.Bar(\n            x=df.country.value_counts().index,\n            y=df.country.value_counts().values,\n            marker=dict(\n                color='rgb(158,202,225)',\n                line=dict(\n                    color='rgb(8,48,107)',\n                    width=1.5),\n            ),\n            opacity=0.6\n        )\ndata = [go1]\nlayout=go.Layout(title=\"Distribution of Countries\", xaxis={'title':'Countries'}, yaxis={'title':'No of Campaigns'}, width=600, height=400)\nfigure=go.Figure(data=data,layout=layout)\niplot(figure)","e6343aeb":"fig = sns.countplot(df.launch_year)\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Campaigns\")\nplt.title(\"No of Campaigns vs Year\")\nplt.show(fig)","2a00963d":"failed = df.loc[df.state=='failed']\nsuccessful = df.loc[df.state=='successful']\ncanceled = df.loc[df.state=='canceled']\nprint('Mean duration of failed campaigns',failed['duration(days)'].mean())\nprint('Mean duration of successful campaigns',successful['duration(days)'].mean())\nprint('Mean duration of canceled campaigns',canceled['duration(days)'].mean())","921681d4":"trace1 = go.Bar(\n            x=successful.main_category.value_counts().index,\n            y=successful.main_category.value_counts().values,\n            opacity=0.65\n        )\n\ntrace2 = go.Bar(\n            x=failed.main_category.value_counts().index,\n            y=failed.main_category.value_counts().values,\n            opacity=0.65\n        )\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Successful', 'Failed'))\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout'].update(height=300, width=900, title='Distribution of main categories in Sucessful & Failed Campaigns')\n\niplot(fig)","7d240979":"trace1 = go.Bar(\n            x=successful.category.value_counts()[:20].index,\n            y=successful.category.value_counts()[:20].values,\n            opacity=0.65\n        )\n\ntrace2 = go.Bar(\n            x=failed.category.value_counts()[:20].index,\n            y=failed.category.value_counts()[:20].values,\n            opacity=0.65\n        )\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Successful', 'Failed'))\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout'].update(height=300, width=900, title='Distribution of top 20 categories in Sucessful & Failed Campaigns')\n\niplot(fig)","14bac2c1":"groupby_main_category = successful.groupby(['main_category']).mean()\ngroupby_main_category","27430f8c":"trace1 = go.Bar(\n            x=groupby_main_category.backers.index,\n            y=groupby_main_category.backers.values,\n            opacity=0.65\n        )\n\ntrace2 = go.Bar(\n            x=groupby_main_category['usd pledged'].index,\n            y=groupby_main_category['usd pledged'].values,\n            opacity=0.65\n        )\n\ntrace3 = go.Bar(\n            x=groupby_main_category.usd_goal_real.index,\n            y=groupby_main_category.usd_goal_real.values,\n            opacity=0.65\n        )\n\ntrace4 = go.Bar(\n            x=groupby_main_category['duration(days)'].index,\n            y=groupby_main_category['duration(days)'].values,\n            opacity=0.65\n        )\n\nfig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Backers', 'USD Pledged','USD Goal Real','Duration(days)'))\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\n\nfig['layout'].update(height=600, width=900, title='Distribution according to Main Category of Successful Campaigns')\n\niplot(fig)","d61c5cf1":"sns.regplot(x='backers',y='usd pledged', data=successful)","84f2ebfd":"sns.regplot(x='usd pledged',y='duration(days)', data=successful)","2116bd50":"successful['success_measure'] = successful['usd pledged']\/successful['usd_goal_real']\nsuccessful_cleaned = successful[successful['usd_goal_real']>successful['usd_goal_real'].median()]\nsuccessful_cleaned.nlargest(10,'success_measure')","c821dad9":"**Distribution of Main Categories**","8359387b":"**Please upvote if you like it and find it useful**","b5a5d767":"**Campaign Distribution over Years**","2160c0a7":"**Relation between Backers and Pledged Amount(USD)**","9e2b71bb":"Lets import the dataset, parse the date and time properly and display the first 4 rows to get an idea of the kind of data there is","19d9b74e":"**EDA of Kickstarter Projects**\n\nKickstarter is an American public-benefit corporation based in Brooklyn, New York, that maintains a global crowdfunding platform focused on creativity and merchandising. The company's stated mission is to \"help bring creative projects to life\"\n\nIn this exploratory data analysis I will try to find out a few interesting insights.","3234e19f":"**Mean duration of Failed, Successful and Cancelled Campaigns**","edd4fb05":"**Relation between Duration(Days) and Pledged Amount(USD)**","de1cb435":"**Distribution of Backers, Amount Pledged(USD), Goal of Campaign(USD), Duration(Days) according to Main Category of Successful Campaigns**","d39506aa":"**Distribution of Countries**","f5ab225a":"**Distribution of main categories in Sucessful & Failed Campaigns**","c2022bda":"**Distribution of top 20 categories in Sucessful & Failed Campaigns**","3715856f":"**Success Measure**\n\nI have made another column called \"success_measure\" by dividing the Pledged Amount by the Goal of the Campaign which\ngives an idea of how many times the goal, the pledged amount was. But the issue was a lot of campaigns had weird goals like 10 or amounts such as 200. To consider only serious campaigns I eliminated any campaign whose goal was below the median goal of all the campaigns and after that I got a list of the 10 most successful campaigns in Kickstarter","8e56e01d":"**Distribution of Top 20 Categories**\n\n(I only did for top 20 because there are way too many categories to fit properly in this visualization)","814735d6":"**Distribution of States**"}}