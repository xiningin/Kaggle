{"cell_type":{"e26a4a95":"code","fb812d4f":"code","6de0fa3d":"code","8a027425":"code","dd68cade":"code","ec106858":"code","0e7f0b54":"code","9692e0c9":"code","d682f220":"code","c4d9ee52":"code","dce92960":"code","95d8eab2":"code","edcfeef3":"code","af58936c":"code","324def75":"code","298f14f3":"code","2177aa91":"code","3c58dd17":"code","01e8d63b":"code","c9d36059":"code","dc39459c":"code","4b6838cf":"code","a05bc165":"code","a9f792ab":"code","cff7b371":"code","55290452":"code","aefaca18":"code","88d06df2":"code","e033dbba":"code","9f182399":"code","e48c1904":"code","93d1b31a":"code","557dbc1d":"code","8375c8a7":"code","03a8147d":"code","6094cec3":"code","99dbb704":"code","2d7fcfec":"code","c4cff708":"code","bf1adb9f":"code","1f04a3e3":"code","efb88c5e":"code","41831da8":"code","5dde8426":"code","2e8164dd":"code","07564a59":"code","578274c2":"code","0bd6ed8c":"code","7f851186":"code","1d8bb4ba":"code","fe788527":"code","5c72d731":"code","08a597d9":"code","7022ef63":"code","64171f36":"code","c929ae27":"code","d42492a1":"code","1ebaeaad":"markdown","21eb83c9":"markdown","52ed633b":"markdown","468c8205":"markdown","23bde221":"markdown","7f3bf899":"markdown","2faed87d":"markdown","a3994dba":"markdown","1cefa3d1":"markdown","1ac8adbb":"markdown","02b1687d":"markdown","2cb20750":"markdown","6d081d09":"markdown","b82464db":"markdown","11a1a6eb":"markdown","0b73c28d":"markdown","b6b876b1":"markdown","d4bb5669":"markdown","824b932b":"markdown","d7890f55":"markdown","ea2a7998":"markdown","a09590d8":"markdown","641e04ee":"markdown","eddb0d6f":"markdown","9a7ae8a6":"markdown","40ef8b10":"markdown","b506c187":"markdown","ac6363c9":"markdown","d0bb2e57":"markdown","c3433f22":"markdown","b88cbccd":"markdown","902864aa":"markdown","c516a97b":"markdown","96b158d3":"markdown","e9faf105":"markdown","0a1f492f":"markdown","91b2b973":"markdown","2c8e0dc2":"markdown","11ba986e":"markdown","183d5d66":"markdown","91f688dd":"markdown","22c5fbae":"markdown","dcc144a2":"markdown","3996f78c":"markdown","840b4d1b":"markdown","ba889392":"markdown","7e2037c5":"markdown","fe9f339c":"markdown","b98aa51a":"markdown","700ec876":"markdown","c3d29a8b":"markdown","e9145b54":"markdown","46e112ea":"markdown","0b342341":"markdown","46a345bf":"markdown"},"source":{"e26a4a95":"import numpy as np\nimport pandas as pd\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\nsns.set(style=\"whitegrid\", context=\"notebook\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fb812d4f":"customer_base = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/FINAL_CUSTOMER_DATATHON.csv\",\n    index_col=0)\nactive_passive = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/FINAL_CUSTOMER_RELATED_TABLE_FOR_DATATHON.csv\",\n    index_col=0)\nsales_files = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/FINAL_SALES_FILE_DATATHON.csv\",\n    index_col=0)\nbuyers = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/FINAL_SIFIR_ARAC_ALANLAR_DATATHON.csv\",\n    index_col=0)\nautos = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/FINAL_VEHICLE_TABLE_DATATHON.csv\",\n    index_col=0)\nmaintenance_service = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/MASK_SERVIS_BAKIM_DATATHON_FINAL.csv\",\n    index_col=0)\nsubmission = pd.read_csv(\n    \"..\/input\/dogus-datathon-otomotiv\/sample_submission.csv\")\n\nactive_passive[\"START_DATE\"] = active_passive[\"START_DATE\"].astype(\"datetime64\")\nactive_passive[\"END_DATE\"] = active_passive[\"END_DATE\"].astype(\"datetime64\")\nsales_files[\"SF_CREATE_DATE\"] = sales_files[\"SF_CREATE_DATE\"].astype(\"datetime64\")\nbuyers[\"CREATE_DATE\"] = buyers[\"CREATE_DATE\"].astype(\"datetime64\")\nautos[\"TRAFFIC_DATE\"] = autos[\"TRAFFIC_DATE\"].astype(\"datetime64\")\nmaintenance_service[\"CREATE_DATE\"] = maintenance_service[\"CREATE_DATE\"].astype(\"datetime64\")\nmaintenance_service.rename(columns={\"CREATE_DATE\":\"C_DATE\"}, inplace=True)","6de0fa3d":"print(\"Bo\u015f de\u011ferler adedi:\")\nactive_passive.isna().sum()","8a027425":"x = active_passive[\"FK_RELATION_STATUS_EXPLANATION\"].value_counts()\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng1 = sns.barplot(x=x.values, y=x.keys(), ax=ax)\ng1.set_title(\"Aktif-Pasif Ruhsat Adedi\")\nplt.show()","dd68cade":"print(\"Bo\u015f de\u011ferler adedi:\")\nbuyers.isna().sum()","ec106858":"print(\"Bo\u015f de\u011ferler adedi:\")\nautos.isna().sum()","0e7f0b54":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\nplt.title(\"Otomobil \u00d6zellikleri Kay\u0131p De\u011ferler\", size=12)\nmsno.bar(autos, sort=\"descending\", ax=ax, fontsize=12)\nax.axes.get_xaxis().set_visible(True)\nax.axes.get_yaxis().set_visible(True)\nax.spines['bottom'].set_visible(True)\nax.spines['left'].set_visible(True)\nax.spines['right'].set_visible(True)\nax.spines['top'].set_visible(False)\nplt.show()","9692e0c9":"print(\"Bo\u015f de\u011ferler adedi:\")\nmaintenance_service.isna().sum()","d682f220":"pd.DataFrame(round(maintenance_service[\"TOTAL_AMOUNT_TL\"].describe()))","c4d9ee52":"print(\"Bo\u015f de\u011ferler adedi:\")\ncustomer_base.isna().sum()","dce92960":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\nplt.title(\"M\u00fc\u015fteri \u00d6zellikleri Kay\u0131p De\u011ferler\", size=12)\nmsno.bar(customer_base, sort=\"descending\", ax=ax, fontsize=12)\nax.axes.get_xaxis().set_visible(True)\nax.axes.get_yaxis().set_visible(True)\nax.spines[\"bottom\"].set_visible(True)\nax.spines[\"left\"].set_visible(True)\nax.spines[\"right\"].set_visible(True)\nax.spines[\"top\"].set_visible(False)\nplt.show()","95d8eab2":"print(\"Bo\u015f de\u011ferler adedi:\")\nsales_files.isna().sum()","edcfeef3":"model_date = dt.datetime(2020,6,1)\n#sample\nactive_passive_sample = active_passive[active_passive[\"START_DATE\"]<model_date]\nsales_files_sample = sales_files[sales_files[\"SF_CREATE_DATE\"]<model_date]\nbuyers_sample = buyers[buyers[\"CREATE_DATE\"]<model_date]\nautos_sample = autos[autos[\"TRAFFIC_DATE\"]<model_date]\nmaintenance_service_sample = maintenance_service[maintenance_service[\"C_DATE\"]<model_date]\n\n #1\nactive_passive_sample[\"START_YEAR\"] = active_passive_sample[\"START_DATE\"].dt.year\nactive_passive_sample[\"START_MONTH\"] = active_passive_sample[\"START_DATE\"].dt.month\nactive_passive_sample[\"ACTIVE_DAYS\"] = (\n    active_passive_sample[\"END_DATE\"] - active_passive_sample[\"START_DATE\"])\nactive_passive_sample[\"ACTIVE_DAYS\"] = active_passive_sample[\"ACTIVE_DAYS\"].fillna(\n    model_date - active_passive_sample[\"START_DATE\"])\nactive_passive_sample[\"ACTIVE_DAYS\"] = (\n    active_passive_sample[\"ACTIVE_DAYS\"].dt.days.astype(\"int64\"))\nactive_passive_sample.sort_values(\"START_DATE\", inplace=True)\nactive_features = active_passive_sample.groupby(\"BASE_CUSTOMER_ID\",\n                                                as_index=False).agg({\"START_DATE\":\"nunique\",\n                                                                     \"END_DATE\":\"count\",\n                                                                     \"VEHICLE_ID\":\"last\",\n                                                                     \"START_MONTH\":\"last\",\n                                                                     \"START_YEAR\":\"last\",\n                                                                     \"ACTIVE_DAYS\":\"last\"})\nactive_features.rename(columns={\"START_DATE\":\"BUY_NUMBER\",\n                                \"END_DATE\":\"SELL_NUMBER\"}, inplace=True)\nactive_features.head()","af58936c":"#2\nmaintenance_service_sample[\"RECENCY\"] = model_date - maintenance_service[\"C_DATE\"]\nmaintenance_service_sample[\"RECENCY\"] = (\n    maintenance_service_sample[\"RECENCY\"].dt.days.astype(\"int64\"))\nmssg = maintenance_service_sample.groupby(\n    [\"VEHICLE_ID\", \"IS_MAINTENANCE\"]).agg({\"C_DATE\":\"count\",\n                                           \"TOTAL_AMOUNT_TL\":\"sum\",\n                                           \"RECENCY\":\"min\"})\nmssg = mssg.unstack(-1)\nms_features = pd.DataFrame(mssg[(\"C_DATE\",  0)].values)\nms_features.insert(0, \"VEHICLE_ID\", mssg.index)\nms_features.rename(columns={0:\"SERVICE_FREQUENCY\"}, inplace=True)\nms_features[\"MAINTENANCE_FREQUENCY\"] = mssg[(\"C_DATE\",  1)].values\nms_features[\"SERVICE_PAYMENT\"] = mssg[(\"TOTAL_AMOUNT_TL\",  0)].values\nms_features[\"MAINTENANCE_PAYMENT\"] = mssg[(\"TOTAL_AMOUNT_TL\",  1)].values\nms_features[\"SERVICE_RECENCY\"] = mssg[(\"RECENCY\",  0)].values\nms_features[\"MAINTENANCE_RECENCY\"] = mssg[(\"RECENCY\",  1)].values\nactive_ms = active_passive_sample[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\"]].merge(\n    ms_features, how=\"left\", on=\"VEHICLE_ID\")\nactive_ms_features = active_ms.groupby(\"BASE_CUSTOMER_ID\",\n                                       as_index=False).agg({\"SERVICE_FREQUENCY\":\"sum\",\n                                                            \"MAINTENANCE_FREQUENCY\":\"sum\",\n                                                            \"SERVICE_PAYMENT\":\"sum\",\n                                                            \"MAINTENANCE_PAYMENT\":\"sum\",\n                                                            \"SERVICE_RECENCY\":\"min\",\n                                                            \"MAINTENANCE_RECENCY\":\"min\"})\nactive_ms_features.head()","324def75":"#3\nnew_buying = active_passive_sample[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\"]].merge(\n    buyers_sample, how=\"left\", on=\"VEHICLE_ID\")\nnew_buying[\"BUY_NUMBER_HERE\"] = 0\nnew_buying.loc[new_buying[\"CUSTOMER_ID\"].notna(), \"BUY_NUMBER_HERE\"] = 1 \nnew_buying_feature = new_buying.groupby(\"BASE_CUSTOMER_ID\",\n                                        as_index=False).agg({\"BUY_NUMBER_HERE\":\"sum\"})\nnew_buying_feature.head()","298f14f3":"#4\nautos_features = active_features[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\", \"START_YEAR\"]].merge(\n    autos, how=\"left\", on=\"VEHICLE_ID\")\nautos_features[\"VEHICLE_AGE\"] = (\n    autos_features[\"START_YEAR\"] - autos_features[\"TRAFFIC_DATE\"].dt.year)\nautos_features.drop(columns=[\"VEHICLE_ID\", \"START_YEAR\", \"TRAFFIC_DATE\"], inplace=True)\nactive_features.drop(columns=[\"VEHICLE_ID\", \"START_YEAR\"], inplace=True)\nautos_features.head()","2177aa91":"#5\ncustomer_base[\"AGE\"] = model_date.year - customer_base[\"BIRTH_DATE\"]\ncustomer_features = customer_base.groupby(\"BASE_CUSTOMER_ID\",\n                                          as_index=False).agg(\n    {\"GENDER_ID\":\"max\",\n     \"MARITAL_STATUS_ID\":\"max\",\n     \"AGE\":\"max\",\n     \"FK_ADDRESS_COMMUNICATION_CITY\":\"first\",\n     \"OCCUPATION\":\"first\"})\ncustomer_features.head()","3c58dd17":"#6\nsales_base = customer_base[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]].merge(\n    sales_files_sample, how=\"left\", on=\"CUSTOMER_ID\")\nsales_base[\"FILE_RECENCY\"] = (model_date - sales_base[\"SF_CREATE_DATE\"]).dt.days\nsales_base[\"FILE_MONTH\"] = sales_base[\"SF_CREATE_DATE\"].dt.month\nsales_base = sales_base.sort_values(\"SF_CREATE_DATE\")\nsales_features = sales_base.groupby(\"BASE_CUSTOMER_ID\",\n                                    as_index=False).agg({\"SALESFILE_ID\":\"nunique\",\n                                                         \"STATUS\":\"last\",\n                                                         \"REQ_BRAND_CODE\":\"last\",\n                                                         \"REQ_TOPMODEL_CODE\":\"last\",\n                                                         \"FILE_RECENCY\":\"min\",\n                                                         \"FILE_MONTH\":\"last\"})\nsales_features.head()","01e8d63b":"#merge\nall_features = active_features.merge(active_ms_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\nall_features = all_features.merge(new_buying_feature, how=\"left\", on=\"BASE_CUSTOMER_ID\")\nall_features = all_features.merge(autos_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\nall_features = all_features.merge(customer_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\nall_features = all_features.merge(sales_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\nall_features.head()","c9d36059":"#resample\na_c = active_passive_sample.groupby(\"BASE_CUSTOMER_ID\",\n                                    as_index=False).agg({\"FK_RELATION_STATUS_ID\":\"min\"})\nactive_customers = a_c[a_c[\"FK_RELATION_STATUS_ID\"]==1][\"BASE_CUSTOMER_ID\"].values\ndataset = all_features[all_features[\"BASE_CUSTOMER_ID\"].isin(active_customers)]\n\ndataset.rename(columns={\"BASE_CUSTOMER_ID\":\"Id\",\n                        \"AGE\":\"age\",\n                        \"GENDER_ID\":\"gender\",\n                        \"MARITAL_STATUS_ID\":\"marital_status\",\n                        \"FK_ADDRESS_COMMUNICATION_CITY\":\"city\",\n                        \"OCCUPATION\":\"occupation\",\n                        \"BUY_NUMBER\":\"buy_number_total\",\n                        \"SELL_NUMBER\":\"sell_number_total\",\n                        \"BUY_NUMBER_HERE\":\"buy_number_here\",\n                        \"ACTIVE_DAYS\":\"active_days_last\",\n                        \"START_MONTH\":\"start_month_last\",\n                        \"BRAND_CODE\":\"brand_code_last\",\n                        \"BASEMODEL_CODE\":\"base_model_last\",\n                        \"TOPMODEL_CODE\":\"top_model_last\",\n                        \"MOTOR_GAS_TYPE\":\"gas_type_last\",\n                        \"GEAR_BOX_TYPE\":\"gear_box_last\",\n                        \"VEHICLE_AGE\":\"vehicle_age_last\",\n                        \"SERVICE_FREQUENCY\":\"service_frequency_total\",\n                        \"MAINTENANCE_FREQUENCY\":\"maintenance_frequency_total\",\n                        \"SERVICE_PAYMENT\":\"service_payment_total\",\n                        \"MAINTENANCE_PAYMENT\":\"maintenance_payment_total\",\n                        \"SERVICE_RECENCY\":\"service_recency_min\",\n                        \"MAINTENANCE_RECENCY\":\"maintenance_recency_min\",\n                        \"SALESFILE_ID\":\"sales_file_total\",\n                        \"STATUS\":\"file_status_last\",\n                        \"REQ_BRAND_CODE\":\"req_brand_last\",\n                        \"REQ_TOPMODEL_CODE\":\"req_top_last\",\n                        \"FILE_RECENCY\":\"file_recency_min\",\n                        \"FILE_MONTH\":\"file_month_last\"}, inplace=True)\n\ndataset = dataset[[\"Id\", \"age\", \"gender\", \"marital_status\", \"city\", \"occupation\",\n                   \"buy_number_total\", \"sell_number_total\", \"buy_number_here\",\n                   \"active_days_last\", \"start_month_last\", \"brand_code_last\",\n                   \"base_model_last\", \"top_model_last\", \"gas_type_last\", \"gear_box_last\",\n                   \"vehicle_age_last\", \"service_frequency_total\", \"maintenance_frequency_total\",\n                   \"service_payment_total\", \"maintenance_payment_total\", \"service_recency_min\",\n                   \"maintenance_recency_min\", \"sales_file_total\", \"file_status_last\",\n                   \"req_brand_last\", \"req_top_last\", \"file_recency_min\", \"file_month_last\"]]\n\ndataset.head()","dc39459c":"val_per_start = dt.datetime(2019,5,31)\nval_per_end = dt.datetime(2019,9,1)\nlabels = sales_files[\n    (sales_files[\"SF_CREATE_DATE\"]>val_per_start)&(sales_files[\"SF_CREATE_DATE\"]<val_per_end)]\nlabels = labels.merge(customer_base[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]],\n                      how=\"left\", on=\"CUSTOMER_ID\")[\"BASE_CUSTOMER_ID\"].unique()\ndataset[\"label\"] = 0\ndataset.loc[dataset[\"Id\"].isin(labels), \"label\"] = 1\ndataset.info()","4b6838cf":"dataset.loc[dataset[\"age\"]<18,\"age\"] = np.nan\ndataset.loc[dataset[\"age\"]>90,\"age\"] = 90\ndataset[\"age\"] = dataset[\"age\"].fillna(dataset[\"age\"].interpolate())\ndataset[\"age\"] = dataset[\"age\"].astype(\"int64\")","a05bc165":"fig, ax = plt.subplots(1, 1, figsize=(10, 8))\nsns.distplot(dataset[\"age\"].values, ax=ax)\nax.set_title(\"Ya\u015f Da\u011f\u0131l\u0131m\u0131\", fontsize=12)\nplt.show()","a9f792ab":"dataset.loc[dataset[\"gender\"]==0, \"gender\"] = 101\ndataset.loc[dataset[\"marital_status\"]==0, \"marital_status\"] = 101\ndataset[\"city\"] = dataset[\"city\"].fillna(\"other\")\ncity_count = pd.DataFrame(dataset[\"city\"].value_counts())\ncc = city_count[city_count[\"city\"]<120].index\ndataset.loc[dataset[\"city\"].isin(cc), \"city\"] = \"other\"","cff7b371":"x = dataset[\"city\"].value_counts().head(10)\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng1 = sns.barplot(x=x.values, y=x.keys(), ax=ax)\ng1.set_title(\"En Y\u00fcksek Frekansl\u0131 10 \u015eehir Da\u011f\u0131l\u0131m\u0131\")\nplt.show()","55290452":"dataset[\"occupation\"] = dataset[\"occupation\"].fillna(\"unknown\")\ndataset.loc[dataset[\"occupation\"].isin([\"M\u00fcteahit\",\n                                        \"T\u00fcccar\",\n                                        \"Nakliyeci \/ Lojistik \/ Ta\u015f\u0131mac\u0131l\u0131k\",\n                                        \"Kuyumcu \/ Sarraf\",\n                                        \"\u0130\u015fletmeci \/ \u0130malat\u00e7\u0131 (b\u00fcy\u00fck \u0130\u015fletme)\",\n                                        \"Distrib\u00fct\u00f6r \/ \u0130thalat\u00e7\u0131 \/ \u0130hracat\u00e7\u0131\",\n                                        \"Armat\u00f6r\",\n                                        \"Tekstilci\",\n                                        \"Turizmci\"]), \"occupation\"] = \"Ticari\"\n\ndataset.loc[dataset[\"occupation\"].isin([\"Esnaf\",\n                                        \"\u0130\u015fletmeci \/ \u0130malat\u00e7\u0131 (kobi - 250 \u00c7al\u0131\u015fandan Az)\",\n                                        \"\u00c7ift\u00e7i \/ Bal\u0131k\u00e7\u0131 \/ Ormanc\u0131 \/ Hayvanc\u0131l\u0131kla U\u011fra\u015fan\",\n                                        \"Oto. Tamir \/ Servis \/ Yedek Par\u00e7a \/ Teknik Destek\",\n                                        \"\u0130\u015fletmeci \/ \u0130malat\u00e7\u0131 (b\u00fcy\u00fck \u0130\u015fletme)\",\n                                        \"Mobilyac\u0131\",\n                                        \"Oto. Bayisi \/ Oto. Galerisi\",\n                                        \"Emlak\u00e7\u0131\",\n                                        \"Toptanc\u0131\",\n                                        \"Kuaf\u00f6r\",\n                                        \"G\u00fcmr\u00fck Komisyoncusu\",\n                                        \"\u015e\u00f6f\u00f6r \/ Taksici \/ Transfer\",\n                                        \"Bili\u015fimci \/ Bilgisayar\",\n                                        \"\u00c7i\u00e7ek\u00e7i\"]), \"occupation\"] = \"Kobi\"\n\ndataset.loc[dataset[\"occupation\"].isin([\"Doktor \/ Di\u015f Hekimi \/ Veteriner\",\n                                        \"Ev Han\u0131m\u0131\",\n                                        \"M\u00fchendis\",\n                                        \"Dan\u0131\u015fman\",\n                                        \"Eczac\u0131\",\n                                        \"Sporcu \/ Antran\u00f6r \/ Hakem\",\n                                        \"Yazar \/ Ressam \/ Tiyatrocu \/ Besteci \/ \u015eark\u0131c\u0131 Vs.\",\n                                        \"Noter\",\n                                        \"Menejer \/ Yap\u0131mc\u0131 \/ Y\u00f6netmen \/ Organizat\u00f6r\",\n                                        \"Muhasebeci \/ Mali M\u00fc\u015favir \/ Denet\u00e7i \/ M\u00fcfetti\u015f\",\n                                        \"\u00d6\u011frenci\",\n                                        \"Tasar\u0131mc\u0131 (grafik, Moda)\",\n                                        \"Foto\u011fraf\u00e7\u0131l\u0131k\",\n                                        \"Psikolog \/ Sosyolog \/ Sosyal Bilimler\",\n                                        \"Sendikac\u0131\",\n                                        \"Rehber \/ Tur Operat\u00f6r\u00fc\",\n                                        \"Hurdac\u0131\",\n                                        \"Mimar \/ \u0130\u00e7 Mimar\",\n                                        \"Halkla \u0130li\u015fkiler \/ Reklamc\u0131 \/ Pazarlama \/ \u0130leti\u015fim\",\n                                        \"Matbaac\u0131\",\n                                        \"Elektirik\u00e7i\",\n                                        \"Pilot \/ Kaptan\"]), \"occupation\"] = \"Serbest\"\n\ndataset.loc[dataset[\"occupation\"].isin([\"\u00d6\u011fretmen \/ E\u011fitmen\",\n                                        \"Bankac\u0131 \/ Sigortac\u0131 \/ Finans\u00e7\u0131 \/ Ekonomist \/ Borsa\",\n                                        \"Orta \/ Alt Seviye Kamu G\u00f6revli \/ Memur \/ B\u00fcrokrat\"\n                                        \"Avukat \/ Hukuk\u00e7u \/ Hakim \/ Savc\u0131\",\n                                        \"\u0130\u015f\u00e7i\",\n                                        \"Akademisyen \/ \u00d6\u011fr.g\u00f6revlisi \/ Ara\u015ft\u0131rma G\u00f6revlisi\",\n                                        \"Teknisyen \/ Mekaniker \/ Tekniker\",\n                                        \"Asker (subay \/ Astsubay)\",\n                                        \"Orta \/ Alt Seviye Kamu G\u00f6revli \/ Memur \/ B\u00fcrokrat\",\n                                        \"Avukat \/ Hukuk\u00e7u \/ Hakim \/ Savc\u0131\",\n                                        \"Gazeteci \/ Bas\u0131n \/ Yay\u0131n \/ Muhabir \/ Radyo Dj\",\n                                        \"\u00dcst D\u00fczey B\u00fcrokrat \/ Kamu \/ Belediye \/ Emniyet\",\n                                        \"Sekreter \/ Asistan\",\n                                        \"Hizmetli \/ Garson \/ Komi \/ A\u015f\u00e7\u0131 Vs.\",\n                                        \"Hostes \/ Host \/ Havaalan\u0131 Personeli\",\n                                        \"Polis\",\n                                        \"Hem\u015fire\",\n                                        \"M\u00fc\u015fteri \u0130li\u015fkileri\"]), \"occupation\"] = \"\u00dccretli\"","aefaca18":"x = dataset[\"occupation\"].value_counts()\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\nplt.pie(x.values, labels=x.keys(), autopct='%.0f%%')\nplt.title(\"Meslek Da\u011f\u0131l\u0131m\u0131\")\nplt.show()","88d06df2":"dataset[\"buy_number_total\"] = dataset[\"buy_number_total\"].fillna(0)\ndataset.loc[dataset[\"buy_number_total\"]>10, \"buy_number_total\"] = 10\ndataset[\"buy_number_total\"] = dataset[\"buy_number_total\"].astype(\"int64\")\n\ndataset[\"sell_number_total\"] = dataset[\"sell_number_total\"].fillna(0)\ndataset.loc[dataset[\"sell_number_total\"]>5, \"sell_number_total\"] = 5\ndataset[\"sell_number_total\"] = dataset[\"sell_number_total\"].astype(\"int64\")\n\ndataset[\"buy_number_here\"] = dataset[\"buy_number_here\"].fillna(0)\ndataset.loc[dataset[\"buy_number_here\"]>5, \"buy_number_here\"] = 5\ndataset[\"buy_number_here\"] = dataset[\"buy_number_here\"].astype(\"int64\")","e033dbba":"fig, ax = plt.subplots(1, 3, figsize=(20, 8))\ng1 = sns.distplot(dataset[\"buy_number_total\"],ax=ax[0])\ng1.set_title(\"Edinilen Ara\u00e7 Say\u0131s\u0131 Yo\u011funlu\u011fu\")\ng2 = sns.distplot(dataset[\"sell_number_total\"],ax=ax[1])\ng2.set_title(\"Elden \u00c7\u0131kar\u0131lan Ara\u00e7 Say\u0131s\u0131 Yo\u011funlu\u011fu\")\ng3 = sns.distplot(dataset[\"buy_number_here\"],ax=ax[2])\ng3.set_title(\"\u0130\u015fletmeden Edinilen Ara\u00e7 Say\u0131s\u0131 Yo\u011funlu\u011fu\")\nplt.show()","9f182399":"base_count = pd.DataFrame(dataset[\"base_model_last\"].value_counts())\nbmc = base_count[base_count[\"base_model_last\"]<200].index\ndataset.loc[dataset[\"base_model_last\"].isin(bmc), \"base_model_last\"] = 1000\n\ntop_count = pd.DataFrame(dataset[\"top_model_last\"].value_counts())\ntmc = top_count[top_count[\"top_model_last\"]<200].index\ndataset.loc[dataset[\"top_model_last\"].isin(tmc), \"top_model_last\"] = 1000\n\ndataset[\"gas_type_last\"] = dataset[\"gas_type_last\"].fillna(\"unknown\")\ndataset.loc[dataset[\"gas_type_last\"]==\"Se\u00e7iniz\", \"gas_type_last\"] = \"unknown\"\ndataset.loc[dataset[\"gas_type_last\"]==\"?Benzin\", \"gas_type_last\"] = \"Benzin\"\ndataset.loc[dataset[\"gas_type_last\"]==\"Kur\u015funsuz benzin\", \"gas_type_last\"] = \"Kur\u015funsuz Benzin\"\ndataset.loc[dataset[\"gas_type_last\"]==\"Diesel\", \"gas_type_last\"] = \"Dizel\"\ndataset.loc[dataset[\"gas_type_last\"].str.contains(\"\\\/\"), \"gas_type_last\"] = \"Hibrit\"\n\ndataset[\"gear_box_last\"] = dataset[\"gear_box_last\"].fillna(\"unknown\")\ndataset.loc[dataset[\"gear_box_last\"]==\"Otomatik (DSG)\", \"gear_box_last\"] = \"Otomatik\"\ndataset.loc[dataset[\"gear_box_last\"]==\"?automatisch\", \"gear_box_last\"] = \"Otomatik\"\ndataset.loc[dataset[\"gear_box_last\"]==\"Otomaik\", \"gear_box_last\"] = \"Otomatik\"\ndataset.loc[dataset[\"gear_box_last\"]==\"Otomatik(DSG)\", \"gear_box_last\"] = \"Otomatik\"\ndataset.loc[dataset[\"gear_box_last\"]==\"Otomatik (DSG \u015eanzuman)\", \"gear_box_last\"] = \"Otomatik\"\ndataset.loc[dataset[\"gear_box_last\"]==\"Mekanik\", \"gear_box_last\"] = \"Manuel\"\ndataset.loc[dataset[\"gear_box_last\"]==\"D\u00fcz\", \"gear_box_last\"] = \"Manuel\"\ndataset.loc[dataset[\"gear_box_last\"]==\"?Handschaltung\", \"gear_box_last\"] = \"Manuel\"\ndataset.loc[dataset[\"gear_box_last\"]==\"manuel\", \"gear_box_last\"] = \"Manuel\"\ndataset.loc[dataset[\"gear_box_last\"]==\"S\u00fcrekli De\u011fi\u015fken\", \"gear_box_last\"] = \"De\u011fi\u015fken\"\ndataset.loc[dataset[\"gear_box_last\"]==\"S\u00fcrekli de\u011fi\u015fken\", \"gear_box_last\"] = \"De\u011fi\u015fken\"\ndataset.loc[dataset[\"gear_box_last\"]==\"Otomatik De\u011fi\u015fken\", \"gear_box_last\"] = \"De\u011fi\u015fken\"","e48c1904":"x1 = dataset[\"base_model_last\"].value_counts().head(10)\nx2 = dataset[\"top_model_last\"].value_counts().head(10)\nfig, ax = plt.subplots(1, 2, figsize=(15, 8))\ng1 = sns.barplot(x=x1.values, y=x1.keys(), ax=ax[0])\ng1.set_title(\"En Y\u00fcksek Frekansl\u0131 10 Base Model\")\ng2 = sns.barplot(x=x2.values, y=x2.keys(), ax=ax[1])\ng2.set_title(\"En Y\u00fcksek Frekansl\u0131 10 Top Model\")\nplt.show()","93d1b31a":"x1 = dataset[\"gas_type_last\"].value_counts()\nx2 = dataset[\"gear_box_last\"].value_counts()\nfig, ax = plt.subplots(1, 2, figsize=(15, 8))\ng1 = sns.barplot(x=x1.values, y=x1.keys(), ax=ax[0])\ng1.set_title(\"Gas Type Da\u011f\u0131l\u0131m\u0131\")\ng2 = sns.barplot(x=x2.values, y=x2.keys(), ax=ax[1])\ng2.set_title(\"Gear Box Type Da\u011f\u0131l\u0131m\u0131\")\nplt.show()","557dbc1d":"dataset.loc[dataset[\"vehicle_age_last\"]<0, \"vehicle_age_last\"] = np.nan\ndataset[\"vehicle_age_last\"] = dataset[\"vehicle_age_last\"].fillna(\n    dataset[\"vehicle_age_last\"].interpolate())\ndataset.loc[dataset[\"vehicle_age_last\"]>10, \"vehicle_age_last\"] = 10\ndataset[\"vehicle_age_last\"] = dataset[\"vehicle_age_last\"].astype(\"int64\")","8375c8a7":"fig, ax = plt.subplots(1, 1, figsize=(10, 8))\nsns.distplot(dataset[\"vehicle_age_last\"].values, ax=ax)\nax.set_title(\"Ara\u00e7 Ya\u015f\u0131 Da\u011f\u0131l\u0131m\u0131\", fontsize=12)\nplt.show()","03a8147d":"dataset.loc[dataset[\"service_frequency_total\"]>25, \"service_frequency_total\"] = 25\ndataset[\"service_frequency_total\"] = dataset[\"service_frequency_total\"].astype(\"int64\")\n\ndataset.loc[dataset[\"maintenance_frequency_total\"]>25, \"maintenance_frequency_total\"] = 25\ndataset[\"maintenance_frequency_total\"] = dataset[\"maintenance_frequency_total\"].astype(\"int64\")\n\ndataset.loc[dataset[\"service_payment_total\"]>25000, \"service_payment_total\"] = 25000\ndataset[\"service_payment_total\"] = dataset[\"service_payment_total\"].astype(\"int64\")\n\ndataset.loc[dataset[\"maintenance_payment_total\"]>25000, \"maintenance_payment_total\"] = 25000\ndataset[\"maintenance_payment_total\"] = dataset[\"maintenance_payment_total\"].astype(\"int64\")\n\ndataset[\"service_recency_min\"] = dataset[\"service_recency_min\"].fillna(\n    dataset[\"service_recency_min\"].max()*1.2)\ndataset[\"service_recency_min\"] = dataset[\"service_recency_min\"].astype(\"int64\")\n\ndataset[\"maintenance_recency_min\"] = dataset[\"maintenance_recency_min\"].fillna(\n    dataset[\"maintenance_recency_min\"].max()*1.2)\ndataset[\"maintenance_recency_min\"] = dataset[\"maintenance_recency_min\"].astype(\"int64\")","6094cec3":"fig, ax = plt.subplots(3, 2, figsize=(15, 20))\ng1 = sns.distplot(dataset[\"service_frequency_total\"],ax=ax[0][0])\ng1.set_title(\"Servise Gelme Say\u0131s\u0131\")\ng2 = sns.distplot(dataset[\"maintenance_frequency_total\"],ax=ax[0][1])\ng2.set_title(\"Tamire Gelme Say\u0131s\u0131\")\ng3 = sns.distplot(dataset[\"service_payment_total\"],ax=ax[1][0])\ng3.set_title(\"Servise \u00d6deme Toplam\u0131\")\ng4 = sns.distplot(dataset[\"maintenance_payment_total\"],ax=ax[1][1])\ng4.set_title(\"Tamire \u00d6deme Toplam\u0131\")\ng5 = sns.distplot(dataset[\"service_recency_min\"],ax=ax[2][0])\ng5.set_title(\"Servise Gelme Yak\u0131nl\u0131\u011f\u0131\")\ng6 = sns.distplot(dataset[\"maintenance_recency_min\"],ax=ax[2][1])\ng6.set_title(\"Tamire Gelme Yak\u0131nl\u0131\u011f\u0131\")\nplt.show()","99dbb704":"dataset[\"file_recency_min\"] = dataset[\"file_recency_min\"].fillna(\n    dataset[\"file_recency_min\"].max()*1.2)\ndataset[\"file_recency_min\"] = dataset[\"file_recency_min\"].astype(\"int64\")\n\ndataset.loc[dataset[\"sales_file_total\"]>20, \"sales_file_total\"] = 20\ndataset[\"sales_file_total\"] = dataset[\"sales_file_total\"].astype(\"int64\")\n\ndataset[\"file_status_last\"] = dataset[\"file_status_last\"].fillna(0)\ndataset[\"file_status_last\"] = dataset[\"file_status_last\"].astype(\"int64\")\n\ndataset[\"req_brand_last\"] = dataset[\"req_brand_last\"].fillna(\"unknown\")\n\ndataset[\"req_top_last\"] = dataset[\"req_top_last\"].fillna(0)\ndataset[\"req_top_last\"] = dataset[\"req_top_last\"].astype(\"int64\")\n\ndataset[\"file_month_last\"] = dataset[\"file_month_last\"].fillna(0)\ndataset[\"file_month_last\"] = dataset[\"file_month_last\"].astype(\"int64\")","2d7fcfec":"x = dataset[\"file_month_last\"].value_counts()\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng1 = sns.barplot(x=x.keys(), y=x.values, ax=ax)\ng1.set_title(\"Aylara G\u00f6re Dosya Da\u011f\u0131l\u0131m\u0131\")\nplt.show()","c4cff708":"pd.DataFrame(dataset[\"label\"].value_counts()\/len(dataset))","bf1adb9f":"x = dataset[\"label\"].value_counts()\nfig, ax = plt.subplots(1, 1, figsize=(6, 6))\ng1 = sns.barplot(x=x.keys(), y=x.values, ax=ax)\ng1.set_title(\"Etiket Oran\u0131\")\nplt.show()","1f04a3e3":"def data_line(active_passive,\n              maintenance_service,\n              buyers, autos,\n              customer_base,\n              sales_files,\n              base_date,\n              train=False,\n              val_per_start=None,\n              val_per_end=None):\n        \n    #sample\n    active_passive_sample = active_passive[active_passive[\"START_DATE\"]<base_date]\n    sales_files_sample = sales_files[sales_files[\"SF_CREATE_DATE\"]<base_date]\n    buyers_sample = buyers[buyers[\"CREATE_DATE\"]<base_date]\n    autos_sample = autos[autos[\"TRAFFIC_DATE\"]<base_date]\n    maintenance_service_sample = maintenance_service[maintenance_service[\"C_DATE\"]<base_date]\n    \n    #1\n    active_passive_sample[\"START_YEAR\"] = active_passive_sample[\"START_DATE\"].dt.year\n    active_passive_sample[\"START_MONTH\"] = active_passive_sample[\"START_DATE\"].dt.month\n    active_passive_sample[\"ACTIVE_DAYS\"] = (\n        active_passive_sample[\"END_DATE\"] - active_passive_sample[\"START_DATE\"])\n    active_passive_sample[\"ACTIVE_DAYS\"] = active_passive_sample[\"ACTIVE_DAYS\"].fillna(\n        base_date - active_passive_sample[\"START_DATE\"])\n    active_passive_sample[\"ACTIVE_DAYS\"] = (\n        active_passive_sample[\"ACTIVE_DAYS\"].dt.days.astype(\"int64\"))\n    active_passive_sample.sort_values(\"START_DATE\", inplace=True)\n    active_features = active_passive_sample.groupby(\"BASE_CUSTOMER_ID\",\n                                                    as_index=False).agg(\n        {\"START_DATE\":\"nunique\",\n         \"END_DATE\":\"count\",\n         \"VEHICLE_ID\":\"last\",\n         \"START_MONTH\":\"last\",\n         \"START_YEAR\":\"last\",\n         \"ACTIVE_DAYS\":\"last\"})\n    \n    active_features.rename(columns={\"START_DATE\":\"BUY_NUMBER\",\n                                    \"END_DATE\":\"SELL_NUMBER\"}, inplace=True)\n\n    #2\n    maintenance_service_sample[\"RECENCY\"] = base_date - maintenance_service[\"C_DATE\"]\n    maintenance_service_sample[\"RECENCY\"] = (\n        maintenance_service_sample[\"RECENCY\"].dt.days.astype(\"int64\"))\n    mssg = maintenance_service_sample.groupby(\n        [\"VEHICLE_ID\", \"IS_MAINTENANCE\"]).agg({\"C_DATE\":\"count\",\n                                               \"TOTAL_AMOUNT_TL\":\"sum\",\n                                               \"RECENCY\":\"min\"})\n    mssg = mssg.unstack(-1)\n    ms_features = pd.DataFrame(mssg[(\"C_DATE\",  0)].values)\n    ms_features.insert(0, \"VEHICLE_ID\", mssg.index)\n    ms_features.rename(columns={0:\"SERVICE_FREQUENCY\"}, inplace=True)\n    ms_features[\"MAINTENANCE_FREQUENCY\"] = mssg[(\"C_DATE\",  1)].values\n    ms_features[\"SERVICE_PAYMENT\"] = mssg[(\"TOTAL_AMOUNT_TL\",  0)].values\n    ms_features[\"MAINTENANCE_PAYMENT\"] = mssg[(\"TOTAL_AMOUNT_TL\",  1)].values\n    ms_features[\"SERVICE_RECENCY\"] = mssg[(\"RECENCY\",  0)].values\n    ms_features[\"MAINTENANCE_RECENCY\"] = mssg[(\"RECENCY\",  1)].values\n    active_ms = active_passive_sample[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\"]].merge(\n        ms_features, how=\"left\", on=\"VEHICLE_ID\")\n    active_ms_features = active_ms.groupby(\"BASE_CUSTOMER_ID\",\n                                           as_index=False).agg(\n        {\"SERVICE_FREQUENCY\":\"sum\",\n         \"MAINTENANCE_FREQUENCY\":\"sum\",\n         \"SERVICE_PAYMENT\":\"sum\",\n         \"MAINTENANCE_PAYMENT\":\"sum\",\n         \"SERVICE_RECENCY\":\"min\",\n         \"MAINTENANCE_RECENCY\":\"min\"})\n\n    #3\n    new_buying = active_passive_sample[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\"]].merge(\n        buyers_sample, how=\"left\", on=\"VEHICLE_ID\")\n    new_buying[\"BUY_NUMBER_HERE\"] = 0\n    new_buying.loc[new_buying[\"CUSTOMER_ID\"].notna(), \"BUY_NUMBER_HERE\"] = 1 \n    new_buying_feature = new_buying.groupby(\"BASE_CUSTOMER_ID\",\n                                            as_index=False).agg(\n        {\"BUY_NUMBER_HERE\":\"sum\"})\n\n    #4\n    autos_features = active_features[[\"BASE_CUSTOMER_ID\", \"VEHICLE_ID\", \"START_YEAR\"]].merge(\n        autos, how=\"left\", on=\"VEHICLE_ID\")\n    autos_features[\"VEHICLE_AGE\"] = (\n        autos_features[\"START_YEAR\"] - autos_features[\"TRAFFIC_DATE\"].dt.year)\n    autos_features.drop(\n        columns=[\"VEHICLE_ID\", \"START_YEAR\", \"TRAFFIC_DATE\"], inplace=True)\n    active_features.drop(columns=[\"VEHICLE_ID\", \"START_YEAR\"], inplace=True)\n\n    #5\n    customer_base[\"AGE\"] = base_date.year - customer_base[\"BIRTH_DATE\"]\n    customer_features = customer_base.groupby(\"BASE_CUSTOMER_ID\",\n                                              as_index=False).agg(\n        {\"GENDER_ID\":\"max\",\n         \"MARITAL_STATUS_ID\":\"max\",\n         \"AGE\":\"max\",\n         \"FK_ADDRESS_COMMUNICATION_CITY\":\"first\",\n         \"OCCUPATION\":\"first\"})\n    #6\n    sales_base = customer_base[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]].merge(\n        sales_files_sample, how=\"left\", on=\"CUSTOMER_ID\")\n    sales_base[\"FILE_RECENCY\"] = (base_date - sales_base[\"SF_CREATE_DATE\"]).dt.days\n    sales_base[\"FILE_MONTH\"] = sales_base[\"SF_CREATE_DATE\"].dt.month\n    sales_base = sales_base.sort_values(\"SF_CREATE_DATE\")\n    sales_features = sales_base.groupby(\"BASE_CUSTOMER_ID\",\n                                        as_index=False).agg({\"SALESFILE_ID\":\"nunique\",\n                                                             \"STATUS\":\"last\",\n                                                             \"REQ_BRAND_CODE\":\"last\",\n                                                             \"REQ_TOPMODEL_CODE\":\"last\",\n                                                             \"FILE_RECENCY\":\"min\",\n                                                             \"FILE_MONTH\":\"last\"})\n\n    #merge\n    all_features = active_features.merge(active_ms_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\n    all_features = all_features.merge(new_buying_feature, how=\"left\", on=\"BASE_CUSTOMER_ID\")\n    all_features = all_features.merge(autos_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\n    all_features = all_features.merge(customer_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\n    all_features = all_features.merge(sales_features, how=\"left\", on=\"BASE_CUSTOMER_ID\")\n\n    #resample\n    a_c = active_passive_sample.groupby(\"BASE_CUSTOMER_ID\",\n                                        as_index=False).agg({\"FK_RELATION_STATUS_ID\":\"min\"})\n    active_customers = a_c[a_c[\"FK_RELATION_STATUS_ID\"]==1][\"BASE_CUSTOMER_ID\"].values\n    dataset = all_features[all_features[\"BASE_CUSTOMER_ID\"].isin(active_customers)]\n\n    dataset.rename(columns={\"BASE_CUSTOMER_ID\":\"Id\",\n                            \"AGE\":\"age\",\n                            \"GENDER_ID\":\"gender\",\n                            \"MARITAL_STATUS_ID\":\"marital_status\",\n                            \"FK_ADDRESS_COMMUNICATION_CITY\":\"city\",\n                            \"OCCUPATION\":\"occupation\",\n                            \"BUY_NUMBER\":\"buy_number_total\",\n                            \"SELL_NUMBER\":\"sell_number_total\",\n                            \"BUY_NUMBER_HERE\":\"buy_number_here\",\n                            \"ACTIVE_DAYS\":\"active_days_last\",\n                            \"START_MONTH\":\"start_month_last\",\n                            \"BRAND_CODE\":\"brand_code_last\",\n                            \"BASEMODEL_CODE\":\"base_model_last\",\n                            \"TOPMODEL_CODE\":\"top_model_last\",\n                            \"MOTOR_GAS_TYPE\":\"gas_type_last\",\n                            \"GEAR_BOX_TYPE\":\"gear_box_last\",\n                            \"VEHICLE_AGE\":\"vehicle_age_last\",\n                            \"SERVICE_FREQUENCY\":\"service_frequency_total\",\n                            \"MAINTENANCE_FREQUENCY\":\"maintenance_frequency_total\",\n                            \"SERVICE_PAYMENT\":\"service_payment_total\",\n                            \"MAINTENANCE_PAYMENT\":\"maintenance_payment_total\",\n                            \"SERVICE_RECENCY\":\"service_recency_min\",\n                            \"MAINTENANCE_RECENCY\":\"maintenance_recency_min\",\n                            \"SALESFILE_ID\":\"sales_file_total\",\n                            \"STATUS\":\"file_status_last\",\n                            \"REQ_BRAND_CODE\":\"req_brand_last\",\n                            \"REQ_TOPMODEL_CODE\":\"req_top_last\",\n                            \"FILE_RECENCY\":\"file_recency_min\",\n                            \"FILE_MONTH\":\"file_month_last\"}, inplace=True)\n\n    dataset = dataset[[\"Id\", \"age\", \"gender\", \"marital_status\", \"city\", \"occupation\",\n                       \"buy_number_total\", \"sell_number_total\", \"buy_number_here\",\n                       \"active_days_last\", \"start_month_last\", \"brand_code_last\",\n                       \"base_model_last\", \"top_model_last\", \"gas_type_last\",\n                       \"gear_box_last\", \"vehicle_age_last\",\n                       \"service_frequency_total\", \"maintenance_frequency_total\",\n                       \"service_payment_total\", \"maintenance_payment_total\",\n                       \"service_recency_min\", \"maintenance_recency_min\",\n                       \"sales_file_total\", \"file_status_last\", \"req_brand_last\",\n                       \"req_top_last\", \"file_recency_min\", \"file_month_last\"]]\n    \n    #label\n    if train:\n        labels = sales_files[\n            (sales_files[\"SF_CREATE_DATE\"]>val_per_start)&(\n                sales_files[\"SF_CREATE_DATE\"]<val_per_end)]\n        labels = labels.merge(customer_base[[\"BASE_CUSTOMER_ID\", \"CUSTOMER_ID\"]],\n                              how=\"left\",\n                              on=\"CUSTOMER_ID\")[\"BASE_CUSTOMER_ID\"].unique()\n        dataset[\"label\"] = 0\n        dataset.loc[dataset[\"Id\"].isin(labels), \"label\"] = 1\n        \n    return dataset\n\ndef feature_line(dataset):\n    \n    dataset = dataset.copy()\n    \n    dataset.loc[dataset[\"age\"]<18,\"age\"] = np.nan\n    dataset.loc[dataset[\"age\"]>90,\"age\"] = 90\n    dataset[\"age\"] = dataset[\"age\"].fillna(dataset[\"age\"].interpolate())\n    dataset[\"age\"] = dataset[\"age\"].astype(\"int64\")\n\n    dataset.loc[dataset[\"gender\"]==0, \"gender\"] = 101\n    dataset.loc[dataset[\"marital_status\"]==0, \"marital_status\"] = 101\n\n    dataset[\"city\"] = dataset[\"city\"].fillna(\"other\")\n    city_count = pd.DataFrame(dataset[\"city\"].value_counts())\n    cc = city_count[city_count[\"city\"]<120].index\n    dataset.loc[dataset[\"city\"].isin(cc), \"city\"] = \"other\"\n\n    dataset[\"occupation\"] = dataset[\"occupation\"].fillna(\"unknown\")\n    dataset.loc[dataset[\"occupation\"].isin(\n        [\"M\u00fcteahit\",\n        \"T\u00fcccar\",\n        \"Nakliyeci \/ Lojistik \/ Ta\u015f\u0131mac\u0131l\u0131k\",\n        \"Kuyumcu \/ Sarraf\",\n        \"\u0130\u015fletmeci \/ \u0130malat\u00e7\u0131 (b\u00fcy\u00fck \u0130\u015fletme)\",\n        \"Distrib\u00fct\u00f6r \/ \u0130thalat\u00e7\u0131 \/ \u0130hracat\u00e7\u0131\",\n        \"Armat\u00f6r\",\n        \"Tekstilci\",\n        \"Turizmci\"]), \"occupation\"] = \"Ticari\"\n\n    dataset.loc[dataset[\"occupation\"].isin(\n        [\"Esnaf\",\n        \"\u0130\u015fletmeci \/ \u0130malat\u00e7\u0131 (kobi - 250 \u00c7al\u0131\u015fandan Az)\",\n        \"\u00c7ift\u00e7i \/ Bal\u0131k\u00e7\u0131 \/ Ormanc\u0131 \/ Hayvanc\u0131l\u0131kla U\u011fra\u015fan\",\n        \"Oto. Tamir \/ Servis \/ Yedek Par\u00e7a \/ Teknik Destek\",\n        \"\u0130\u015fletmeci \/ \u0130malat\u00e7\u0131 (b\u00fcy\u00fck \u0130\u015fletme)\",\n        \"Mobilyac\u0131\",\n        \"Oto. Bayisi \/ Oto. Galerisi\",\n        \"Emlak\u00e7\u0131\",\n        \"Toptanc\u0131\",\n        \"Kuaf\u00f6r\",\n        \"G\u00fcmr\u00fck Komisyoncusu\",\n        \"\u015e\u00f6f\u00f6r \/ Taksici \/ Transfer\",\n        \"Bili\u015fimci \/ Bilgisayar\",\n        \"\u00c7i\u00e7ek\u00e7i\"]), \"occupation\"] = \"Kobi\"\n\n    dataset.loc[dataset[\"occupation\"].isin(\n        [\"Doktor \/ Di\u015f Hekimi \/ Veteriner\",\n        \"Ev Han\u0131m\u0131\",\n        \"M\u00fchendis\",\n        \"Dan\u0131\u015fman\",\n        \"Eczac\u0131\",\n        \"Sporcu \/ Antran\u00f6r \/ Hakem\",\n        \"Yazar \/ Ressam \/ Tiyatrocu \/ Besteci \/ \u015eark\u0131c\u0131 Vs.\",\n        \"Noter\",\n        \"Menejer \/ Yap\u0131mc\u0131 \/ Y\u00f6netmen \/ Organizat\u00f6r\",\n        \"Muhasebeci \/ Mali M\u00fc\u015favir \/ Denet\u00e7i \/ M\u00fcfetti\u015f\",\n        \"\u00d6\u011frenci\",\n        \"Tasar\u0131mc\u0131 (grafik, Moda)\",\n        \"Foto\u011fraf\u00e7\u0131l\u0131k\",\n        \"Psikolog \/ Sosyolog \/ Sosyal Bilimler\",\n        \"Sendikac\u0131\",\n        \"Rehber \/ Tur Operat\u00f6r\u00fc\",\n        \"Hurdac\u0131\",\n        \"Mimar \/ \u0130\u00e7 Mimar\",\n        \"Halkla \u0130li\u015fkiler \/ Reklamc\u0131 \/ Pazarlama \/ \u0130leti\u015fim\",\n        \"Matbaac\u0131\",\n        \"Elektirik\u00e7i\",\n        \"Pilot \/ Kaptan\"]), \"occupation\"] = \"Serbest\"\n\n    dataset.loc[dataset[\"occupation\"].isin(\n        [\"\u00d6\u011fretmen \/ E\u011fitmen\",\n        \"Bankac\u0131 \/ Sigortac\u0131 \/ Finans\u00e7\u0131 \/ Ekonomist \/ Borsa\",\n        \"Orta \/ Alt Seviye Kamu G\u00f6revli \/ Memur \/ B\u00fcrokrat\"\n        \"Avukat \/ Hukuk\u00e7u \/ Hakim \/ Savc\u0131\",\n        \"\u0130\u015f\u00e7i\",\n        \"Akademisyen \/ \u00d6\u011fr.g\u00f6revlisi \/ Ara\u015ft\u0131rma G\u00f6revlisi\",\n        \"Teknisyen \/ Mekaniker \/ Tekniker\",\n        \"Asker (subay \/ Astsubay)\",\n        \"Orta \/ Alt Seviye Kamu G\u00f6revli \/ Memur \/ B\u00fcrokrat\",\n        \"Avukat \/ Hukuk\u00e7u \/ Hakim \/ Savc\u0131\",\n        \"Gazeteci \/ Bas\u0131n \/ Yay\u0131n \/ Muhabir \/ Radyo Dj\",\n        \"\u00dcst D\u00fczey B\u00fcrokrat \/ Kamu \/ Belediye \/ Emniyet\",\n        \"Sekreter \/ Asistan\",\n        \"Hizmetli \/ Garson \/ Komi \/ A\u015f\u00e7\u0131 Vs.\",\n        \"Hostes \/ Host \/ Havaalan\u0131 Personeli\",\n        \"Polis\",\n        \"Hem\u015fire\",\n        \"M\u00fc\u015fteri \u0130li\u015fkileri\"]), \"occupation\"] = \"\u00dccretli\"\n\n    dataset[\"buy_number_total\"] = dataset[\"buy_number_total\"].fillna(0)\n    dataset.loc[dataset[\"buy_number_total\"]>10, \"buy_number_total\"] = 10\n    dataset[\"buy_number_total\"] = dataset[\"buy_number_total\"].astype(\"int64\")\n    \n    dataset[\"sell_number_total\"] = dataset[\"sell_number_total\"].fillna(0)\n    dataset.loc[dataset[\"sell_number_total\"]>5, \"sell_number_total\"] = 5\n    dataset[\"sell_number_total\"] = dataset[\"sell_number_total\"].astype(\"int64\")\n    \n    dataset[\"buy_number_here\"] = dataset[\"buy_number_here\"].fillna(0)\n    dataset.loc[dataset[\"buy_number_here\"]>5, \"buy_number_here\"] = 5\n    dataset[\"buy_number_here\"] = dataset[\"buy_number_here\"].astype(\"int64\")\n    \n    base_count = pd.DataFrame(dataset[\"base_model_last\"].value_counts())\n    bmc = base_count[base_count[\"base_model_last\"]<200].index\n    dataset.loc[dataset[\"base_model_last\"].isin(bmc), \"base_model_last\"] = 1000\n\n    top_count = pd.DataFrame(dataset[\"top_model_last\"].value_counts())\n    tmc = top_count[top_count[\"top_model_last\"]<200].index\n    dataset.loc[dataset[\"top_model_last\"].isin(tmc), \"top_model_last\"] = 1000\n\n    dataset[\"gas_type_last\"] = dataset[\"gas_type_last\"].fillna(\"unknown\")\n    dataset.loc[dataset[\"gas_type_last\"]==\"Se\u00e7iniz\",\n                \"gas_type_last\"] = \"unknown\"\n    dataset.loc[dataset[\"gas_type_last\"]==\"?Benzin\",\n                \"gas_type_last\"] = \"Benzin\"\n    dataset.loc[dataset[\"gas_type_last\"]==\"Kur\u015funsuz benzin\",\n                \"gas_type_last\"] = \"Kur\u015funsuz Benzin\"\n    dataset.loc[dataset[\"gas_type_last\"]==\"Diesel\",\n                \"gas_type_last\"] = \"Dizel\"\n    dataset.loc[dataset[\"gas_type_last\"].str.contains(\"\\\/\"),\n                \"gas_type_last\"] = \"Hibrit\"\n\n    dataset[\"gear_box_last\"] = dataset[\"gear_box_last\"].fillna(\"unknown\")\n    dataset.loc[dataset[\"gear_box_last\"]==\"Otomatik (DSG)\",\n                \"gear_box_last\"] = \"Otomatik\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"?automatisch\",\n                \"gear_box_last\"] = \"Otomatik\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"Otomaik\",\n                \"gear_box_last\"] = \"Otomatik\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"Otomatik(DSG)\",\n                \"gear_box_last\"] = \"Otomatik\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"Otomatik (DSG \u015eanzuman)\",\n                \"gear_box_last\"] = \"Otomatik\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"Mekanik\",\n                \"gear_box_last\"] = \"Manuel\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"D\u00fcz\",\n                \"gear_box_last\"] = \"Manuel\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"?Handschaltung\",\n                \"gear_box_last\"] = \"Manuel\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"manuel\",\n                \"gear_box_last\"] = \"Manuel\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"S\u00fcrekli De\u011fi\u015fken\",\n                \"gear_box_last\"] = \"De\u011fi\u015fken\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"S\u00fcrekli de\u011fi\u015fken\",\n                \"gear_box_last\"] = \"De\u011fi\u015fken\"\n    dataset.loc[dataset[\"gear_box_last\"]==\"Otomatik De\u011fi\u015fken\",\n                \"gear_box_last\"] = \"De\u011fi\u015fken\"\n    \n    dataset.loc[dataset[\"vehicle_age_last\"]<0, \"vehicle_age_last\"] = np.nan\n    dataset[\"vehicle_age_last\"] = dataset[\"vehicle_age_last\"].fillna(\n        dataset[\"vehicle_age_last\"].interpolate())\n    dataset.loc[dataset[\"vehicle_age_last\"]>10, \"vehicle_age_last\"] = 10\n    dataset[\"vehicle_age_last\"] = dataset[\"vehicle_age_last\"].astype(\"int64\")\n\n    dataset.loc[dataset[\"service_frequency_total\"]>25, \"service_frequency_total\"] = 25\n    dataset[\"service_frequency_total\"] = (\n        dataset[\"service_frequency_total\"].astype(\"int64\"))\n    \n    dataset.loc[dataset[\"maintenance_frequency_total\"]>25, \"maintenance_frequency_total\"] = 25\n    dataset[\"maintenance_frequency_total\"] = (\n        dataset[\"maintenance_frequency_total\"].astype(\"int64\"))\n    \n    dataset.loc[dataset[\"service_payment_total\"]>25000, \"service_payment_total\"]=25000\n    dataset[\"service_payment_total\"] = (\n        dataset[\"service_payment_total\"].astype(\"int64\"))\n    \n    dataset.loc[dataset[\"maintenance_payment_total\"]>25000, \"maintenance_payment_total\"]=25000\n    dataset[\"maintenance_payment_total\"] = (\n        dataset[\"maintenance_payment_total\"].astype(\"int64\"))\n    \n    dataset[\"service_recency_min\"] = dataset[\"service_recency_min\"].fillna(\n        dataset[\"service_recency_min\"].max()*1.2)\n    dataset[\"service_recency_min\"] = dataset[\"service_recency_min\"].astype(\"int64\")\n    \n    dataset[\"maintenance_recency_min\"] = dataset[\"maintenance_recency_min\"].fillna(\n        dataset[\"maintenance_recency_min\"].max()*1.2)\n    dataset[\"maintenance_recency_min\"] = (\n        dataset[\"maintenance_recency_min\"].astype(\"int64\"))\n    \n    dataset[\"file_recency_min\"] = dataset[\"file_recency_min\"].fillna(\n        dataset[\"file_recency_min\"].max()*1.2)\n    dataset[\"file_recency_min\"] = (\n        dataset[\"file_recency_min\"].astype(\"int64\"))\n\n    dataset.loc[dataset[\"sales_file_total\"]>20, \"sales_file_total\"] = 20\n    dataset[\"sales_file_total\"] = dataset[\"sales_file_total\"].astype(\"int64\")\n    \n    dataset[\"file_status_last\"] = dataset[\"file_status_last\"].fillna(0)\n    dataset[\"file_status_last\"] = dataset[\"file_status_last\"].astype(\"int64\")\n    \n    dataset[\"req_brand_last\"] = dataset[\"req_brand_last\"].fillna(\"unknown\")\n    \n    dataset[\"req_top_last\"] = dataset[\"req_top_last\"].fillna(0)\n    dataset[\"req_top_last\"] = dataset[\"req_top_last\"].astype(\"int64\")\n    \n    dataset[\"file_month_last\"] = dataset[\"file_month_last\"].fillna(0)\n    dataset[\"file_month_last\"] = dataset[\"file_month_last\"].astype(\"int64\")\n    \n    return dataset","efb88c5e":"main_date = dt.datetime(2021,6,1)\nmodel_date = dt.datetime(2020,6,1)\nval_per_start = dt.datetime(2020,5,31)\nval_per_end = dt.datetime(2020,9,1)\n\ntrainset = data_line(active_passive,\n                     maintenance_service,\n                     buyers, autos,\n                     customer_base,\n                     sales_files,\n                     model_date,\n                     train=True,\n                     val_per_start=val_per_start,\n                     val_per_end=val_per_end)\n\nsubset = data_line(active_passive,\n                   maintenance_service,\n                   buyers, autos,\n                   customer_base,\n                   sales_files,\n                   main_date)\n\nsubset = feature_line(subset)\ntrainset = feature_line(trainset)","41831da8":"subset.to_csv(\"subset\"+str(main_date.year)+\".csv\", index=False)\ntrainset.to_csv(\"trainset\"+str(model_date.year)+\".csv\", index=False)","5dde8426":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import IntegerLookup\nfrom tensorflow.keras.layers import Normalization\nfrom tensorflow.keras.layers import StringLookup\n\nfrom sklearn.metrics import roc_auc_score\n\nprint(tf.version.VERSION)\nprint(keras.__version__)\n\ngpus = tf.config.list_physical_devices(\"GPU\")        \nlogical_gpus = tf.config.list_logical_devices('GPU')\nprint(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPU\")","2e8164dd":"def dataframe_to_dataset(dataframe):\n    dataframe = dataframe.drop(columns=\"Id\")\n    labels = dataframe.pop(\"label\")\n    ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n    ds = ds.shuffle(buffer_size=len(dataframe))\n    return ds\n\ndef encode_numerical_feature(feature, name, dataset):\n    normalizer = Normalization()\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n    normalizer.adapt(feature_ds)\n    encoded_feature = normalizer(feature)\n    return encoded_feature\n\ndef encode_categorical_feature(feature, name, dataset, is_string):\n    lookup_class = StringLookup if is_string else IntegerLookup\n    lookup = lookup_class(output_mode=\"binary\")\n    feature_ds = dataset.map(lambda x, y: x[name])\n    feature_ds = feature_ds.map(lambda x: tf.expand_dims(x, -1))\n    lookup.adapt(feature_ds)\n    encoded_feature = lookup(feature)\n    return encoded_feature","07564a59":"trainset = pd.read_csv(\".\/trainset2020.csv\")","578274c2":"df = trainset.copy()\nbatch_size = 128\n\nval_df = df.sample(frac=0.05, random_state=111)\ntrain_df = df.drop(val_df.index)\n\nx = train_df.label.value_counts()\nprint(\n    f\"E\u011fitim:{len(train_df)} Validasyon:{len(val_df)}\")\nprint(\n    f\"Negatif:{x.values[0]} Pozitif:{x.values[1]}\")\n\ntrain_ds = dataframe_to_dataset(train_df)\nval_ds = dataframe_to_dataset(val_df)\n\ntrain_ds = train_ds.batch(batch_size)\nval_ds = val_ds.batch(batch_size)","0bd6ed8c":"gender = keras.Input(shape=(1,), name=\"gender\", dtype=\"int64\")\nmarital_status = keras.Input(shape=(1,), name=\"marital_status\", dtype=\"int64\")\nstart_month_last = keras.Input(shape=(1,), name=\"start_month_last\", dtype=\"int64\")\nbase_model_last = keras.Input(shape=(1,), name=\"base_model_last\", dtype=\"int64\")\ntop_model_last = keras.Input(shape=(1,), name=\"top_model_last\", dtype=\"int64\")\nfile_status_last = keras.Input(shape=(1,), name=\"file_status_last\", dtype=\"int64\")\nreq_top_last = keras.Input(shape=(1,), name=\"req_top_last\", dtype=\"int64\")\nfile_month_last = keras.Input(shape=(1,), name=\"file_month_last\", dtype=\"int64\")\n\ncity = keras.Input(shape=(1,), name=\"city\", dtype=\"string\")\noccupation = keras.Input(shape=(1,), name=\"occupation\", dtype=\"string\")\nbrand_code_last = keras.Input(shape=(1,), name=\"brand_code_last\", dtype=\"string\")\ngas_type_last = keras.Input(shape=(1,), name=\"gas_type_last\", dtype=\"string\")\ngear_box_last = keras.Input(shape=(1,), name=\"gear_box_last\", dtype=\"string\")\nreq_brand_last = keras.Input(shape=(1,), name=\"req_brand_last\", dtype=\"string\")\n\nage = keras.Input(shape=(1,), name=\"age\")\nbuy_number_total = keras.Input(shape=(1,), name=\"buy_number_total\")\nsell_number_total = keras.Input(shape=(1,), name=\"sell_number_total\")\nbuy_number_here = keras.Input(shape=(1,), name=\"buy_number_here\")\nactive_days_last = keras.Input(shape=(1,), name=\"active_days_last\")\nvehicle_age_last = keras.Input(shape=(1,), name=\"vehicle_age_last\")\nservice_frequency_total = keras.Input(shape=(1,), name=\"service_frequency_total\")\nmaintenance_frequency_total = keras.Input(shape=(1,), name=\"maintenance_frequency_total\")\nservice_payment_total = keras.Input(shape=(1,), name=\"service_payment_total\")\nmaintenance_payment_total = keras.Input(shape=(1,), name=\"maintenance_payment_total\")\nservice_recency_min = keras.Input(shape=(1,), name=\"service_recency_min\")\nmaintenance_recency_min = keras.Input(shape=(1,), name=\"maintenance_recency_min\")\nsales_file_total = keras.Input(shape=(1,), name=\"sales_file_total\")\nfile_recency_min = keras.Input(shape=(1,), name=\"file_recency_min\")\n\nall_inputs = [\n                gender,\n                marital_status,\n                start_month_last,\n                base_model_last,\n                top_model_last,\n                file_status_last,\n                req_top_last, \n                file_month_last,\n                city, \n                occupation, \n                brand_code_last, \n                gas_type_last, \n                gear_box_last, \n                req_brand_last,\n                age,\n                buy_number_total,\n                sell_number_total,\n                buy_number_here,\n                active_days_last,\n                vehicle_age_last,\n                service_frequency_total, \n                maintenance_frequency_total, \n                service_payment_total, \n                maintenance_payment_total,\n                service_recency_min, \n                maintenance_recency_min, \n                sales_file_total, \n                file_recency_min,\n             ]\n\ngender_encoded = encode_categorical_feature(gender, \"gender\", train_ds, False)\nmarital_status_encoded = encode_categorical_feature(marital_status,\n                                                    \"marital_status\", train_ds, False)\nstart_month_last_encoded = encode_categorical_feature(start_month_last,\n                                                      \"start_month_last\", train_ds, False)\nbase_model_last_encoded = encode_categorical_feature(base_model_last,\n                                                     \"base_model_last\", train_ds, False)\ntop_model_last_encoded = encode_categorical_feature(top_model_last,\n                                                    \"top_model_last\", train_ds, False)\nfile_status_last_encoded = encode_categorical_feature(file_status_last,\n                                                      \"file_status_last\", train_ds, False)\nreq_top_last_encoded = encode_categorical_feature(req_top_last,\n                                                  \"req_top_last\", train_ds, False)\nfile_month_last_encoded = encode_categorical_feature(file_month_last,\n                                                     \"file_month_last\", train_ds, False)\n\ncity_encoded = encode_categorical_feature(city, \"city\", train_ds, True)\noccupation_encoded = encode_categorical_feature(occupation,\n                                                \"occupation\", train_ds, True)\nbrand_code_last_encoded = encode_categorical_feature(brand_code_last,\n                                                     \"brand_code_last\", train_ds, True)\ngas_type_last_encoded = encode_categorical_feature(gas_type_last,\n                                                   \"gas_type_last\", train_ds, True)\ngear_box_last_encoded = encode_categorical_feature(gear_box_last,\n                                                   \"gear_box_last\", train_ds, True)\nreq_brand_last_encoded = encode_categorical_feature(req_brand_last,\n                                                    \"req_brand_last\", train_ds, True)\n\nage_encoded = encode_numerical_feature(age, \"age\", train_ds)\nbuy_number_total_encoded = encode_numerical_feature(buy_number_total,\n                                                    \"buy_number_total\", train_ds)\nsell_number_total_encoded = encode_numerical_feature(sell_number_total,\n                                                     \"sell_number_total\", train_ds)\nbuy_number_here_encoded = encode_numerical_feature(buy_number_here,\n                                                   \"buy_number_here\", train_ds)\nactive_days_last_encoded = encode_numerical_feature(active_days_last,\n                                                    \"active_days_last\", train_ds)\nvehicle_age_last_encoded = encode_numerical_feature(vehicle_age_last,\n                                                    \"vehicle_age_last\", train_ds)\nservice_frequency_total_encoded = encode_numerical_feature(service_frequency_total,\n                                                           \"service_frequency_total\",\n                                                           train_ds)\nmaintenance_frequency_total_encoded = encode_numerical_feature(maintenance_frequency_total,\n                                                               \"maintenance_frequency_total\",\n                                                               train_ds)\nservice_payment_total_encoded = encode_numerical_feature(service_payment_total,\n                                                         \"service_payment_total\",\n                                                         train_ds)\nmaintenance_payment_total_encoded = encode_numerical_feature(maintenance_payment_total,\n                                                             \"maintenance_payment_total\",\n                                                             train_ds)\nservice_recency_min_encoded = encode_numerical_feature(service_recency_min,\n                                                       \"service_recency_min\",\n                                                       train_ds)\nmaintenance_recency_min_encoded = encode_numerical_feature(maintenance_recency_min,\n                                                           \"maintenance_recency_min\",\n                                                           train_ds)\nsales_file_total_encoded = encode_numerical_feature(sales_file_total,\n                                                    \"sales_file_total\",\n                                                    train_ds)\nfile_recency_min_encoded = encode_numerical_feature(file_recency_min,\n                                                    \"file_recency_min\",\n                                                    train_ds)\n\nall_features = layers.concatenate(\n    [\n        gender_encoded,\n        marital_status_encoded, \n        start_month_last_encoded,\n        base_model_last_encoded,\n        top_model_last_encoded,\n        file_status_last_encoded, \n        req_top_last_encoded, \n        file_month_last_encoded, \n        city_encoded, \n        occupation_encoded, \n        brand_code_last_encoded, \n        gas_type_last_encoded, \n        gear_box_last_encoded, \n        req_brand_last_encoded,\n        age_encoded, \n        buy_number_total_encoded, \n        sell_number_total_encoded, \n        buy_number_here_encoded, \n        active_days_last_encoded, \n        vehicle_age_last_encoded, \n        service_frequency_total_encoded, \n        maintenance_frequency_total_encoded,\n        service_payment_total_encoded, \n        maintenance_payment_total_encoded,\n        service_recency_min_encoded, \n        maintenance_recency_min_encoded, \n        sales_file_total_encoded,\n        file_recency_min_encoded,\n    ]\n)","7f851186":"x = layers.Dense(300, activation=\"relu\")(all_features)\nx = layers.Dropout(0.8)(x)\nx = layers.BatchNormalization()(x)\noutput = layers.Dense(1, activation=\"sigmoid\")(x)\nmodel = keras.Model(all_inputs, output)\n\nmodel.compile(keras.optimizers.Adam(learning_rate=0.001),\n              keras.losses.BinaryCrossentropy(),\n              keras.metrics.AUC())\nmodel.summary()\nclass_weight = {0: 1\/train_df[\"label\"].value_counts().values[0],\n                1: 1\/train_df[\"label\"].value_counts().values[1]}\nhist = model.fit(train_ds,\n                 epochs=12,\n                 validation_data=val_ds,\n                 verbose=2,\n                 class_weight=class_weight)","1d8bb4ba":"plt.plot(hist.history[\"loss\"])\nplt.plot(hist.history[\"val_loss\"])\nplt.title(\"Model Loss\")\nplt.ylabel(\"loss\")\nplt.xlabel(\"epoch\")\nplt.legend([\"train\", \"val\"], loc=\"best\")\nplt.show()\n\nplt.plot(hist.history[\"auc\"])\nplt.plot(hist.history[\"val_auc\"])\nplt.title(\"ROC-AUC Score\")\nplt.ylabel(\"accuracy\")\nplt.xlabel(\"epoch\")\nplt.legend([\"train\", \"val\"], loc=\"best\")\nplt.show()","fe788527":"X_val = val_df.drop(columns=[\"Id\", \"label\"])\nX_val = tf.data.Dataset.from_tensor_slices((dict(X_val)))\nX_val = X_val.batch(batch_size)\ny_probs = model.predict(X_val)\nprint(roc_auc_score(val_df[\"label\"].values, y_probs))","5c72d731":"sub = pd.read_csv(\"subset2021.csv\")","08a597d9":"X_sub = sub.drop(columns=[\"Id\"])\nX_sub = tf.data.Dataset.from_tensor_slices((dict(X_sub)))\nX_sub = X_sub.batch(batch_size)\ny_probs = model.predict(X_sub)\n\nsub[\"prob\"] = y_probs\nsubmission = submission.merge(sub[[\"Id\", \"prob\"]], how=\"left\", on=\"Id\")\nsubmission[\"Expected\"] = submission.pop(\"prob\")","7022ef63":"submission","64171f36":"pd.DataFrame(submission[\"Expected\"].describe())","c929ae27":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng1 = sns.distplot(submission[\"Expected\"],ax=ax)\ng1.set_title(\"Tahminlerin Da\u011f\u0131l\u0131m\u0131\")\nplt.show()","d42492a1":"submission.to_csv(\"submission.csv\", index=False)","1ebaeaad":"<a id=\"sample\"><\/a>\n### 2.2.3. Yeniden \u00d6rnekleme (Resampling)","21eb83c9":"RFM de\u011fi\u015fkenlerinin ayk\u0131r\u0131 de\u011ferlerinin ele al\u0131nmas\u0131nda da yukar\u0131dakilere benzer bir basitli\u011fe gidilmi\u015ftir. Frequency ve payment de\u011ferleri g\u00f6zlem olmad\u0131\u011f\u0131 zaman 0 de\u011ferini alabilmektedir, ancak recency de\u011ferleri eksik g\u00f6zlemlerin doldurulmas\u0131 i\u00e7in `.max()*1.2` gibi bir yakla\u015f\u0131mla servis bak\u0131m kullanmam\u0131\u015f m\u00fc\u015fteriler i\u00e7in en y\u00fcksek de\u011ferden daha y\u00fcksek bir de\u011ferin takdir edilmesi sa\u011flanm\u0131\u015ft\u0131r.","52ed633b":"<a id=\"clean\"><\/a>\n### 2.1.4. Veri Temizli\u011fi","468c8205":"`active_passive` : `FINAL_CUSTOMER_RELATED_TABLE_FOR_DATATHON` Kay\u0131p data olmad\u0131\u011f\u0131 g\u00f6r\u00fclmektedir.(`END_DATE` bo\u015f de\u011ferler alabilir.)","23bde221":"<a id=\"func2\"><\/a>\n### 2.2.2. Gerekli Fonksiyonlar","7f3bf899":"Bu b\u00f6l\u00fcmde bir Multi Layer Perceptron modeli e\u011fitilerek valide edilmi\u015f ve tahminde kullan\u0131lm\u0131\u015ft\u0131r. Burdaki kodlar\u0131n b\u00fcy\u00fck bir k\u0131sm\u0131 [Keras](https:\/\/keras.io\/) \u00f6rnek modellerinden adapte edilmi\u015ftir. Elimizdeki \u00f6zellik setinde say\u0131larla ayr\u0131lm\u0131\u015f kategoriler, metinle ayr\u0131lm\u0131\u015f kategoriler ve say\u0131sal de\u011ferlerden olu\u015fan \u00f6zellikler bulunmaktad\u0131r. A\u015fa\u011f\u0131da yer alan 3 adet fonksiyon bu \u00e7e\u015fit bir data i\u00e7in olduk\u00e7a uygundur.\n\nHaz\u0131rlanan datan\u0131n `tensor` yap\u0131s\u0131na \u00e7evrilerek kullan\u0131lmas\u0131 yapay sinir a\u011flar\u0131 e\u011fitiminde zaman a\u00e7\u0131s\u0131ndan \u00f6nemli bir avantaj sa\u011flamaktad\u0131r.","2faed87d":"Zamana ba\u011fl\u0131 data, sat\u0131\u015f yap\u0131ld\u0131\u011f\u0131 bilinen bir tarihte yeniden kesilmi\u015ftir. Bu modelde sat\u0131\u015f etiketlerini ayn\u0131 d\u00f6neme getirebilmek i\u00e7in data 1.06.2020 de kesilmi\u015ftir. 2020 y\u0131l\u0131 i\u00e7in 1.06.2020 - 1.09.2020 tarihleri aras\u0131 sat\u0131\u015f bilgileri etiket olarak kullan\u0131lacakt\u0131r.\n\n\u0130lk olarak yeniden \u00f6rnekleme yap\u0131lm\u0131\u015f, daha aktif ruhsat sahipli\u011fi data seti ile elde edilebilecek \u00f6zellikler \u00fczerinde \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r. M\u00fcmk\u00fcn oldu\u011funca tekil m\u00fc\u015fteri numaras\u0131 baz\u0131nda \u00e7\u0131kar\u0131m yap\u0131lmaya \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r.\n\n\u0130leride detaylar\u0131 a\u00e7\u0131klanacak olup bu dataseti kullan\u0131larak m\u00fc\u015fterinin edindi\u011fi toplam ara\u00e7 say\u0131s\u0131, elden \u00e7\u0131kard\u0131\u011f\u0131 ara\u00e7, daha \u00f6nce i\u015fletmeden sat\u0131n ald\u0131\u011f\u0131 ara\u00e7 say\u0131s\u0131 gibi bilgilerin bulundu\u011fu bir dataset olu\u015fturulmu\u015ftur.","a3994dba":"Elde edilen t\u00fcm \u00f6zelliklerin detayl\u0131 a\u00e7\u0131klamas\u0131 a\u015fa\u011f\u0131da yer almaktad\u0131r.\n\n* `Id` : Tekil m\u00fc\u015fteri numaras\u0131  \n* `age`: Ya\u015f\n* `gender`: Cinsiyet  \n* `marital_status`: Medeni durum  \n* `city`: M\u00fc\u015fterinin ya\u015fad\u0131\u011f\u0131 \u015fehir\n* `occupation`: Meslek\n* `buy_number_total`: Toplam edinilen ara\u00e7 say\u0131s\u0131  \n* `sell_number_total`: Toplam elden \u00e7\u0131kar\u0131lan ara\u00e7 say\u0131s\u0131\n* `buy_number_here`: \u0130\u015fletmeden daha \u00f6nce sat\u0131n al\u0131nan ara\u00e7 say\u0131s\u0131\n* `active_days_last`: M\u00fc\u015fterinin edindi\u011fi son ara\u00e7 i\u00e7in ruhsat aktiflik g\u00fcn say\u0131s\u0131\n* `start_month_last`: M\u00fc\u015fterinin edindi\u011fi son arac\u0131n edinilme ay\u0131 \n* `brand_code_last`: M\u00fc\u015fterinin edindi\u011fi son ara\u00e7 i\u00e7in `brand_code`\n* `base_model_last`: M\u00fc\u015fterinin edindi\u011fi son ara\u00e7 i\u00e7in `base_model_code`\n* `top_model_last`: M\u00fc\u015fterinin edindi\u011fi son ara\u00e7 i\u00e7in `top_model_code`\n* `gas_type_last`: M\u00fc\u015fterinin edindi\u011fi son ara\u00e7 i\u00e7in `gas_type`\n* `gear_box_last`: M\u00fc\u015fterinin edindi\u011fi son ara\u00e7 i\u00e7in `gear_box_type`\n* `vehicle_age_last`: M\u00fc\u015fterinin edindi\u011fi son arac\u0131n edinme tarihindeki ya\u015f\u0131\n* `service_frequency_total`: M\u00fc\u015fterinin bak\u0131ma gelme say\u0131s\u0131\n* `maintenance_frequency_total`: M\u00fc\u015fterinin tamire gelme say\u0131s\u0131\n* `service_payment_total`: M\u00fc\u015fterinin servis i\u00e7in yapt\u0131\u011f\u0131 toplam \u00f6deme\n* `maintenance_payment_total`: M\u00fc\u015fterinin tamire yapt\u0131\u011f\u0131 toplam \u00f6deme\n* `service_recency_min`: M\u00fc\u015fterinin bak\u0131ma son geldi\u011fi taih ile model tarihi aras\u0131 g\u00fcn say\u0131s\u0131\n* `maintenance_recency_min`: M\u00fc\u015fterinin tarihe son geldi\u011fi taih ile model tarihi aras\u0131 g\u00fcn say\u0131s\u0131\n* `sales_file_total`: M\u00fc\u015fterinin a\u00e7t\u0131rd\u0131\u011f\u0131 toplam dosya say\u0131s\u0131  \n* `file_status_last`: A\u00e7t\u0131r\u0131lan son dosyan\u0131n stat\u00fcs\u00fc\n* `req_brand_last`: M\u00fc\u015fterinin a\u00e7t\u0131rd\u0131\u011f\u0131 son dosya i\u00e7in `req_brand_code` \n* `req_top_last`: M\u00fc\u015fterinin a\u00e7t\u0131rd\u0131\u011f\u0131 son dosya i\u00e7in `req_top_model`\n* `file_recency_min`: M\u00fc\u015fterinin a\u00e7t\u0131rd\u0131\u011f\u0131 son dosya tarihi ile model aras\u0131 g\u00fcn say\u0131s\u0131\n* `file_month_last`: M\u00fc\u015fterinin a\u00e7t\u0131rd\u0131\u011f\u0131 son dosyan\u0131n ay\u0131\n* `label`: 01.06.2020 - 01.09.2020 tarihleri aras\u0131 dosya a\u00e7t\u0131rma durumuna dair etiket","1cefa3d1":"<a id=\"method\"><\/a>\n## 1.2. Y\u00f6ntem \n\nMevcut veri ile sat\u0131\u015flar aras\u0131nda ortaya \u00e7\u0131kar\u0131lmas\u0131 gereken bir ili\u015fki oldu\u011fu hipotezi do\u011frultusunda, problem, sat\u0131\u015f olas\u0131l\u0131klar\u0131n\u0131 \u00fcretebilecek modelin geli\u015ftirilmesi \u015fekline d\u00f6n\u00fc\u015ft\u00fcr\u00fclebilir. Bu problem \u00f6zelinde model geli\u015ftirme tekni\u011fi olarak makine \u00f6\u011frenmesi algoritmalar\u0131 denenebilir. \u00d6zellik \u00e7\u0131kar\u0131m\u0131 (feature extraction) s\u00fcrecinin etkili y\u00f6netimi a\u00e7\u0131s\u0131ndan yapay sinir a\u011flar\u0131n\u0131n etkili olabilece\u011fi d\u00fc\u015f\u00fcn\u00fclm\u00fc\u015ft\u00fcr. Bu ba\u011flamda bir `Multi Layer Perceptron` \u00e7\u00f6z\u00fcm\u00fc \u00fczerinde yo\u011funla\u015f\u0131lm\u0131\u015ft\u0131r.\n\nSat\u0131\u015f tahmininde mevcut datan\u0131n \u00f6rneklenmesinde [[9]](https:\/\/doi.org\/10.1002\/dir.10038)'da anlat\u0131ld\u0131\u011f\u0131 \u00fczere belirli bir `t` zaman\u0131na kadar olan datan\u0131n `t+1` sat\u0131\u015flar\u0131n\u0131n tahmini i\u00e7in tahmin edici olarak kullan\u0131lmas\u0131yla model geli\u015ftirilmeye \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r. Problem \u00f6zelinde sat\u0131\u015flar\u0131 bilinen bir y\u0131la ait data etiket olarak ayr\u0131lm\u0131\u015f daha \u00f6ncesine ait data model geli\u015ftirilmesi i\u00e7in kullan\u0131lm\u0131\u015ft\u0131r. \n\n<p align=\"center\">\n  <img width=\"100%\" src=\"https:\/\/1fykyq3mdn5r21tpna3wkdyi-wpengine.netdna-ssl.com\/wp-content\/uploads\/2020\/02\/image3.png\">\n<\/p>\n\n  \nKaynak:[Uber Engineering - Backtesting](https:\/\/eng.uber.com\/backtesting-at-scale\/)\n \nBu ba\u011flamda zamansal data \u00f6rnekleme y\u00f6ntemlerinden `expanding window backtesting` y\u00f6nteminin dataya uygun olaca\u011f\u0131 d\u00fc\u015f\u00fcn\u00fclm\u00fc\u015ft\u00fcr. Problem \u00f6zelinde mevsimsel etkiyi alabilmek i\u00e7in 01.06.2020 - 01.09.2020 d\u00f6nemi aras\u0131 sat\u0131\u015flar pozitif etiket olarak saklanm\u0131\u015f, 01.06.2020 \u00f6ncesine \u00f6rneklenebilecek t\u00fcm data model e\u011fitimi i\u00e7in kullan\u0131lm\u0131\u015ft\u0131r. ","1ac8adbb":"1 adet kay\u0131p cinsiyet verisi 101 koduna, 18325 adet kay\u0131p medeni durum bilgisi 101 koduna dahil edilmi\u015ftir. \u015eehir bilgisi bulunmayan ve s\u0131kl\u0131\u011f\u0131 120 alt\u0131nda bulunan \u015fehir verisi \"other\" olarak kategorize edilmi\u015ftir. Meydana gelecek bilgi kayb\u0131n\u0131n \u00f6nemli olmayaca\u011f\u0131 varsay\u0131lm\u0131\u015ft\u0131r.","02b1687d":"* **Geli\u015fim M\u00fcmk\u00fcn:** Model olduk\u00e7a basit olmas\u0131na ra\u011fmen hiperparametre ayarlar\u0131 ile elde edilebilecek geli\u015fimin s\u0131n\u0131rl\u0131 oldu\u011fu farkedilmi\u015ftir. \u00d6te yandan eldeki datan\u0131n daha potansiyel bar\u0131nd\u0131rd\u0131\u011f\u0131 daha etkili \u00f6zelliklerle (\u00f6rnek: son al\u0131nan ara\u00e7lar yerine \u00f6nceki ara\u00e7lar\u0131n \u00f6zelliklerine de \u00f6nem verilmesi) daha y\u00fcksek skorlar elde etmenin m\u00fcmk\u00fcn oldu\u011fu anla\u015f\u0131lm\u0131\u015ft\u0131r.  \n\n* **\u00d6zellik \u00d6nemlili\u011fi:** Denemelerde model input olu\u015fturma a\u015famas\u0131n\u0131n \u00e7ok fazla zaman ve haf\u0131za t\u00fcketti\u011fi g\u00f6r\u00fclm\u00fc\u015ft\u00fcr. Bu nedenle hangi \u00f6zelli\u011fin daha \u00f6nemli oldu\u011funun ara\u015ft\u0131r\u0131lmas\u0131, daha \u00f6nemli bulunanlar\u0131n bertaraf edilmesi daha etkili \u00f6zelliklerin modele eklenmesi etkili kaynak y\u00f6netimi ve geli\u015fim i\u00e7in \u00f6nemli g\u00f6r\u00fcnmektedir.\n\n* **Dengesiz S\u0131n\u0131flarla M\u00fccadele:** Problemde %99-1 gibi olduk\u00e7a dengesiz bir da\u011f\u0131l\u0131mla model geli\u015ftirilmeye \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r. Dengesiz da\u011f\u0131l\u0131mlar yaln\u0131zca `class_weight` parametresiyle ele al\u0131nm\u0131\u015ft\u0131r. Daha de\u011fi\u015fik \u00f6rnekleme y\u00f6ntemleriyle (\u00f6rnek:SMOTE) denemeler yap\u0131labilir.\n\n* **Overfittingle M\u00fccadele:** Zamanlararas\u0131 modelleme kullan\u0131ld\u0131\u011f\u0131ndan dataya a\u015f\u0131r\u0131 uyum problemi \u00f6nemli bir sorun olmu\u015ftur. A\u015fa\u011f\u0131daki tablo de\u011fi\u015fik y\u0131llar baz al\u0131narak haz\u0131rlanan modellerin performanslar\u0131n\u0131 g\u00f6stermektedir.\n\n| Data Kesim Y\u0131l\u0131\\Tahmin Y\u0131l\u0131 | 2017 | 2018 | 2019 | 2020 | Submission |\n| :---: | :---: | :---: | :---: | :---: | :---: |\n| 2017 | 0.8455 | 0.8405 | 0.8270 | 0.8237 | 0.8080 |\n| 2018 | - | 0.8524 | 0.8268 | 0.8226 | - |\n| 2019 | - | - | 0.8325 | 0.8233 | - |\n| 2020 | - | - | - | 0.8408 | 0.81800 |\n\nBu nedenle y\u00fcksek say\u0131labilecek `drop_rate`'ler kullan\u0131lmas\u0131 i\u015fe yaram\u0131\u015ft\u0131r. Ancak a\u015f\u0131r\u0131 uyumun \u00f6nlenmesei a\u00e7\u0131s\u0131nda \u00f6rnek say\u0131s\u0131n\u0131n artt\u0131r\u0131lmaya \u00e7al\u0131\u015f\u0131lmas\u0131 gereklidir.\n\n* **Sequence Data:** Az da olsa sequence (zaman s\u0131ral\u0131 \u00f6rnekler) datan\u0131n varl\u0131\u011f\u0131 g\u00f6r\u00fclm\u00fc\u015ft\u00fcr. Bu t\u00fcr bir i\u015f probleminde m\u00fc\u015fterilerin davran\u0131\u015flar\u0131n\u0131n daha derin tarih\u00e7elerinden sequence t\u00fcr\u00fcnde data \u00e7\u0131kar\u0131labilece\u011fi d\u00fc\u015f\u00fcn\u00fclmektedir. Demografik veri otomobil verisi gibi statik data ile, sequence datan\u0131n bir arada kullan\u0131labilece\u011fi \"LSTM\", \"transformers\" gibi teknolojilerle sonu\u00e7 al\u0131nabilece\u011fi tahmin edilmektedir.","2cb20750":"En geni\u015f tabiriyle veri madencili\u011fi tekniklerinin sat\u0131\u015f tahmininde kullan\u0131m\u0131 a\u00e7\u0131s\u0131ndan olduk\u00e7a geni\u015f bir literat\u00fcr bulunmaktad\u0131r. \u00d6neri sistemleri (recommender systems) \u00e7al\u0131\u015fmalar\u0131 [[1]](http:\/\/dx.doi.org\/doi:10.1016\/j.physrep.2012.02.006), [[2]](http:\/\/dx.doi.org\/10.1016\/j.dss.2015.03.008), [[3]](https:\/\/doi.org\/10.1109\/SSCI.2016.7849921), [[4]](http:\/\/dx.doi.org\/10.1287\/mnsc.1070.0760) ba\u015fta gelmek \u00fczere, \u00e7ok etiketli veya ikili s\u0131n\u0131fland\u0131rma s\u0131n\u0131fland\u0131rma (classification) [[5]](https:\/\/doi.org\/10.1016\/j.ejor.2019.05.037), [[6]](https:\/\/doi.org\/10.1016\/j.ejor.2021.04.021), k\u00fcmeleme (clustering) [[7]](https:\/\/doi.org\/10.1089\/big.2020.0044), [[8]](https:\/\/doi.org\/10.1109\/ICIME.2010.5477693) gibi temel \u00e7er\u00e7eve uygulamalar\u0131n\u0131n \u00e7a\u011fda\u015f sat\u0131\u015f teknikleri \u00fczerinde etkisi b\u00fcy\u00fckt\u00fcr. Bu vaka \u00e7al\u0131\u015fmas\u0131 da bu anlamda ele al\u0131nabilir.  ","6d081d09":"`sales_files`:`FINAL_SALES_FILE_DATATHON` Az say\u0131da kay\u0131p de\u011fer g\u00f6r\u00fclmektedir.","b82464db":"Yapay sinir a\u011flar\u0131n\u0131n etkili \u00e7al\u0131\u015fabilmesi i\u00e7in yeteri kadar pozitif \u00f6rnek g\u00f6rmesi gerekti\u011finden, datan\u0131n yaln\u0131zca %5'i validasyon i\u00e7in ayr\u0131lm\u0131\u015ft\u0131r. %10 ve %20 ile yap\u0131lan deneylere g\u00f6re \u00e7ok az geli\u015fim sa\u011flamaktad\u0131r.","11a1a6eb":"# \u0130\u00e7erik\n1. [Giri\u015f](#intro)\n\n    - 1.1. [Problem Tan\u0131m\u0131](#problem)\n    \n    - 1.2. [Y\u00f6ntem](#method)\n    \n        - 1.2.1 [Sonu\u00e7 Al\u0131namayan Y\u00f6ntemler](#notwork)\n    \n2. [Uygulama](#app)\n\n    - 2.1. [Data Haz\u0131rlama](#prep)\n    \n        - 2.1.1. [K\u00fct\u00fcphaneler](#lib1)\n        \n        - 2.1.2. [Data G\u00f6r\u00fcn\u00fcm\u00fc](#appear)\n        \n        - 2.1.3. [\u00d6zellik \u00c7\u0131kar\u0131m\u0131](#feature)\n        \n        - 2.1.4. [Veri Temizli\u011fi](#clean)\n        \n        - 2.1.5. [Gerekli Fonksiyonlar](#func1)\n        \n    - 2.2. [Model Olu\u015fturma](#model)\n        \n        - 2.2.1. [K\u00fct\u00fcphaneler](#lib2)\n        \n        - 2.2.2. [Gerekli Fonksiyonlar](#func2)\n        \n        - 2.2.3. [Yeniden \u00d6rnekleme (Resampling)](#sample)\n        \n        - 2.2.4. [E\u011fitim ve Validasyon](#train)\n        \n        - 2.2.5. [Tahmin](#predict)\n  \n3. [Sonu\u00e7 ve \u00d6neriler](#result)\n\n4. [Referanslar](#refer)","0b73c28d":"\u0130nceleme konusu m\u00fc\u015fteriler aktif ruhsat sahipli\u011fi bulunanlar oldu\u011fu i\u00e7in son dataset bu a\u00e7\u0131dan filtrelenmi\u015ftir. T\u00fcm kolonlar yeniden isimlendirilmi\u015ftir.","b6b876b1":"Datan\u0131n her bir kategorisi \"input\" olarak ayarlanmak \u00fczere ve say\u0131sal de\u011fi\u015fkenlerin normalize edilmek \u00fczere`all_inputs` adl\u0131 diziye konmu\u015f ve t\u00fcm i\u015flemlerden sonra `all_features` dizisi olu\u015fturulmu\u015ftur. ","d4bb5669":"Sat\u0131\u015f dosyalar\u0131 dataseti hem \u00f6zellik \u00e7\u0131kar\u0131m\u0131 i\u00e7in hem etiketlerin tespiti i\u00e7in kullan\u0131lm\u0131\u015ft\u0131r. Bu a\u015famada ilgili tekil m\u00fc\u015fteri numaralar\u0131 baz\u0131nda ge\u00e7mi\u015fte a\u00e7\u0131lan dosya adedi bilgileri \u00e7\u0131kar\u0131lm\u0131\u015ft\u0131r. ","824b932b":"<a id=\"prep\"><\/a>\n## 2.1. Data Haz\u0131rlama\n<a id=\"lib1\"><\/a>\n### 2.1.1. K\u00fct\u00fcphaneler","d7890f55":"Toplam edinilen elden \u00e7\u0131kar\u0131lan ara\u00e7larda kay\u0131p de\u011ferleri 0 olarak kabul edilmi\u015ftir. Ayk\u0131r\u0131 de\u011ferlerin ele al\u0131nmas\u0131nda iqr (inter-quartile-range) yakla\u015f\u0131m\u0131ndan daha geni\u015f bir de\u011ferlendirmede bulunulmu\u015ftur. Yap\u0131lan denemelerde az miktarda geli\u015fim elde edilmi\u015ftir.","ea2a7998":"Modeldeki \"dense layer\" hiperparametresi i\u00e7in 100, 200, 300 ve 400 de\u011ferleri ve \"Dropout\" i\u00e7in 0.4, 0.6 ve 0.8 de\u011ferleri denenmi\u015ftir. Farkl\u0131 \"optimizer\" ve \"learning_rate\" se\u00e7enekleri herhangi bir geli\u015fme sa\u011flamam\u0131\u015ft\u0131r. Hidden layer say\u0131s\u0131 artt\u0131r\u0131larak denemeler yap\u0131lm\u0131\u015f geli\u015fim elde edilememi\u015ftir. S\u0131n\u0131flar (1\/g\u00f6zlem say\u0131s\u0131) kullan\u0131larak a\u011f\u0131rl\u0131kland\u0131r\u0131lm\u0131\u015ft\u0131r.","a09590d8":"`maintenance_service` : `MASK_SERVIS_BAKIM_DATATHON_FINAL` Baz\u0131 sat\u0131rlarda toplam \u00f6deme verisinin bulunmad\u0131\u011f\u0131 g\u00f6r\u00fclmektedir. \u0130leride ele al\u0131nmas\u0131 gereklidir.","641e04ee":"`customer_base`:`FINAL_CUSTOMER_DATATHON` Kay\u0131p de\u011ferler say\u0131s\u0131 olduk\u00e7a fazla oldu\u011fu g\u00f6r\u00fclmektedir.","eddb0d6f":"Yukar\u0131da s\u0131ralanan i\u015flemlerin tamam\u0131 `data_line` ve `feature_line` \u015feklinde iki fonksiyon i\u00e7erisinde toplanarak yeniden uygulanabilir hale getirilmi\u015ftir. ","9a7ae8a6":"3 ayl\u0131k sat\u0131n alma s\u0131n\u0131fland\u0131rmas\u0131n\u0131 g\u00f6steren \"label\" incelendi\u011finde sat\u0131n almama davran\u0131\u015f\u0131n\u0131 g\u00f6steren s\u0131n\u0131f\u0131n olduk\u00e7a bask\u0131n oldu\u011fu g\u00f6r\u00fclmektedir. Keras k\u00fct\u00fcphanesinde bu zorluk model e\u011fitimde s\u0131n\u0131f a\u011f\u0131rl\u0131kland\u0131rmas\u0131 ile giderilmeye \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r.","40ef8b10":"Son a\u015famada daha \u00f6nce bahsedildi\u011fi gibi 01.06.2020 - 01.09.2020 aras\u0131 sat\u0131\u015f dosyas\u0131 bilgileri kullan\u0131larak 2020 y\u0131l\u0131 datas\u0131 etiketleri elde edilip datasete eklenmi\u015ftir. ","b506c187":"M\u00fc\u015fteri demografik \u00f6zellikleri tekil m\u00fc\u015fteri numaras\u0131 baz\u0131nda teke indirilmi\u015f kay\u0131p data ele al\u0131nmak \u00fczere sonraya b\u0131rak\u0131lm\u0131\u015ft\u0131r. ","ac6363c9":"<a id=\"result\"><\/a>\n# 3. Sonu\u00e7 ve \u00d6neriler","d0bb2e57":"Bu \u00e7al\u0131\u015fmada m\u00fc\u015fteri-\u00f6zel data, tarihsel otomobil sat\u0131\u015f\u0131 datas\u0131 ile harmanlanm\u0131\u015f gelecek sat\u0131\u015flar\u0131n tahmini i\u00e7in model geli\u015ftirilmesi amac\u0131yla kullan\u0131lm\u0131\u015ft\u0131r. Tarihsel data bir \"Multi Layer Perceptron\" modelini e\u011fitmek \u00fczere \"expanding window backtesting\" y\u00f6ntemiyle \u00f6rneklenmi\u015ftir. Modelin e\u011fitim zaman\u0131 ilerisindeki kullan\u0131m\u0131 beklentiye paralel \"overfitting\" ile sonu\u00e7lanm\u0131\u015f ancak %81 gibi hat\u0131r\u0131 say\u0131l\u0131r bir \"roc-auc\" skoru elde edilmi\u015ftir.\n\n\u0130brahim Erdem KALKAN\n\n[kaggle](https:\/\/www.kaggle.com\/hakanerdem), [LinkedIn](https:\/\/www.linkedin.com\/in\/ibrahimerdemk\/), [StackOverflow](https:\/\/stackoverflow.com\/users\/10289507\/hakanerdem)\n\n\n<p align=\"center\">\n  <img width=\"100%\" height=\"300\" src=\"https:\/\/gatopardo.com\/wp-content\/uploads\/2017\/10\/porcheportada-1280x421.jpg\">\n<\/p>\n\nKaynak: [Porsche](https:\/\/gatopardo.com\/estilo-de-vida\/autos\/porche-911-gt2-rs\/)","c3433f22":"S\u0131f\u0131r ara\u00e7 al\u0131m kay\u0131tlar\u0131 daha \u00f6nce i\u015fletmeden sat\u0131n al\u0131nan ara\u00e7 adedinin tespitinde kullan\u0131lm\u0131\u015ft\u0131r.","b88cbccd":"<a id=\"model\"><\/a>\n## 2.2. Model Olu\u015fturma\n<a id=\"lib2\"><\/a>\n### 2.2.1. K\u00fct\u00fcphaneler","902864aa":"`buyers` : `FINAL_SIFIR_ARAC_ALANLAR_DATATHON` Kay\u0131p data olmad\u0131\u011f\u0131 g\u00f6r\u00fclmektedir.","c516a97b":"Meslek datas\u0131ndaki t\u00fcm bo\u015f kay\u0131tlar\u0131 \"unknown\" olarak kategorize edilmi\u015ftir. Geri kalan t\u00fcm meslekler \"Ticari\", \"Kobi\", \"\u00dccretli\", \"Serbest\" \"Emekli\", \"Di\u011fer\", \u015feklinde gruplar alt\u0131nda toplanm\u0131\u015ft\u0131r. Yap\u0131lan denemeler sonucunda az da olsa olumlu etkisi bulundu\u011fu g\u00f6zlenmi\u015ftir. \u00d6te yandan modeldeki kategori say\u0131s\u0131n\u0131 azaltarak parametre say\u0131s\u0131n\u0131 \u00f6nemli \u00f6l\u00e7\u00fcde azaltm\u0131\u015ft\u0131r.","96b158d3":"Tamir bak\u0131m dataseti ara\u00e7 numaras\u0131 baz\u0131nda teke indirildilten sonra di\u011fer datasetler yard\u0131m\u0131yla ili\u015fkili m\u00fc\u015fterileri bulunmu\u015ftur. Tamir - bak\u0131m ayr\u0131 ayr\u0131 kodland\u0131\u011f\u0131 i\u00e7in iki farkl\u0131 t\u00fcrde RFM (recency, frequency, monetary) olu\u015fturulmu\u015ftur. ","e9faf105":"10, 20, 30 epoch say\u0131s\u0131 `batch_size=128` ile yap\u0131lan denemelerde en iyi skorun 10-12 aras\u0131nda elde edildi\u011fi g\u00f6r\u00fclm\u00fc\u015ft\u00fcr. Y\u00fcksek epoch say\u0131lar\u0131nda \"train_loss\" giderek d\u00fc\u015ferken \"val_loss\" art\u0131\u015f\u0131 ile tipik \"overfitting\" g\u00f6zlenmi\u015ftir.  ","0a1f492f":"Geri kalan \u00f6zelliklerden `file_recency_min` ve `sales_file_total` i\u00e7in de yukar\u0131dakilere benzer d\u00fczenlemeler yap\u0131lm\u0131\u015ft\u0131r. Herhangi bir dosya a\u00e7t\u0131rmam\u0131\u015f m\u00fc\u015fterilerin `file_month_last` verisi 0 olarak doldurulmu\u015ftur.","91b2b973":"<a id=\"appear\"><\/a>\n### 2.1.2. Data G\u00f6r\u00fcn\u00fcm\u00fc","2c8e0dc2":"<a id=\"predict\"><\/a>\n### 2.2.5. Tahmin","11ba986e":"<a id=\"app\"><\/a>\n# 2. Uygulama ","183d5d66":"\"base_model\" ve \"top_model\" verisinde 200'den az g\u00f6r\u00fclen t\u00fcm de\u011ferler tek bir kategoriye yerle\u015ftirilmi\u015ftir. \"gas_type\" ve \"gear_box_type\" kategorilerinde kay\u0131p t\u00fcm de\u011ferler i\u00e7in \"unknown\" atamas\u0131 yap\u0131lm\u0131\u015f ve isimlendirmeler yeniden d\u00fczenlenmi\u015ftir. ","91f688dd":"Her a\u015famada elde edilmi\u015f \u00f6zellik setleri son olarak tekil m\u00fc\u015fteri numaras\u0131 ile birle\u015ftirilmi\u015ftir.","22c5fbae":"Otomobil \u00f6zellikleri m\u00fc\u015fterilerle ili\u015fkilendirilmi\u015f olup, edinme y\u0131l\u0131 ile trafi\u011fe \u00e7\u0131k\u0131\u015f y\u0131l\u0131 aras\u0131ndaki fark kullan\u0131larak edinme zaman\u0131nda ara\u00e7 ya\u015f\u0131 tespiti yap\u0131lm\u0131\u015ft\u0131r.","dcc144a2":"Bu a\u015famada yap\u0131lan d\u00fczenlemelerin bir k\u0131sm\u0131 deneysel olarak elde edildi\u011fi gibi bir k\u0131sm\u0131 da belirli bir i\u015f bilgisini gerektirmektedir. \u0130\u015f bilgisinin gerekti\u011fi durumlarda yaln\u0131zca sezgisel y\u00f6ntemler kullan\u0131lm\u0131\u015ft\u0131r.\n\nYa\u015f bilgisi i\u00e7in 90 ya\u015ftan b\u00fcy\u00fck oldu\u011fu tespit edilen m\u00fc\u015fterilerin ya\u015f\u0131 90 olarak belirlenmi\u015f. 18 ya\u015f\u0131 alt\u0131 bilgiler yeniden elde edilmek \u00fczere kay\u0131p veri s\u0131n\u0131f\u0131na eklenmi\u015ftir. T\u00fcm kay\u0131p veri `pandas` k\u00fct\u00fcphanesi metotlar\u0131nda`Series.interpolate()`  ile yeniden tahmin edilerek doldurulmu\u015ftur.","3996f78c":"<a id=\"refer\"><\/a>\n# 4. Referanslar\n\n[1]. L\u00fc, L., Medo, M., Yeung, C. H., Zhang,Y. C., Zhang, Z. K., Zhou, T. (2012), Recommender systems, Physics Reports, 513(1), 1-49, DOI: https:\/\/doi.org\/10.1016\/j.physrep.2012.02.006\n\n[2]. Lu, J., Wu, D., Mao, M., Wang, W., Zhang, G., (2015), Recommender system application developments: A survey, Decision Support Systems, 74, 12-32, DOI: https:\/\/doi.org\/10.1016\/j.dss.2015.03.008.\n\n[3]. Salehinejad, H., Rahnamayan, S., (2016), Customer shopping pattern prediction: A recurrent neural network approach, IEEE Symposium Series on Computational Intelligence (SSCI) 1-6, DOI: https:\/\/doi.org\/10.1109\/SSCI.2016.7849921.\n\n[4]. Moon, S., Russell, G. J., (2008), Predicting Product Purchase from Inferred Customer Similarity: An Autologistic Model Approach. Management Science 54(1), 71-82,\nDOI: https:\/\/doi.org\/10.1287\/mnsc.1070.0760\n\n[5]. Bogaert, M., Lootens, J. Van den Poel, D., Ballings, M., (2019), Evaluating multi-label classifiers and recommender systems in the financial service sector, European Journal of Operational Research, 279(2), 620-634 DOI: https:\/\/doi.org\/10.1016\/j.ejor.2019.05.037.\n\n[6]. Chou, P., Chuang, H. H. C., Chou, Y. C., Liang, T. P., (2021), Predictive analytics for customer repurchase: Interdisciplinary integration of buy till you die modeling and machine learning, European Journal of Operational Research, 296(2), 635-651, DOI: https:\/\/doi.org\/10.1016\/j.ejor.2021.04.021.\n\n[7]. Zhang, L., Priestley, J., DeMaio, J., Ni, S., Tian, X., (2021), Measuring Customer Similarity and Identifying Cross-Selling Products by Community Detection, Big Data. 9(2), 132-143 DOI: http:\/\/doi.org\/10.1089\/big.2020.0044\n\n[8]. Ren, S., Sun, Q., Shi, Y., (2010), Customer segmentation of bank based on data warehouse and data mining, 2nd IEEE International Conference on Information Management and Engineering, 349-353, DOI: https:\/\/doi.org\/10.1109\/ICIME.2010.5477693.\n\n[9]. Knott, A., Hayes, A., & Neslin, S. A. (2002), Next-product-to-buy models for cross-selling applications. Journal of Interactive Marketing, 16(3), 59\u201375, DOI: https:\/\/doi.org\/10.1002\/dir.10038\n\nPorsche, https:\/\/gatopardo.com\/estilo-de-vida\/autos\/porche-911-gt2-rs\/ (06.11.2021)\n\nUber Engineering, https:\/\/eng.uber.com\/backtesting-at-scale\/ (06.11.2021)\n\nKeras, https:\/\/keras.io\/ (01.11.2021)\n","840b4d1b":"# \u00d6zet","ba889392":"Toplam \u00f6demelerde negatif kay\u0131tlar bulunmamaktad\u0131r. Mevcut kay\u0131tlarda ayk\u0131r\u0131 de\u011ferler bulundu\u011fu g\u00f6r\u00fclmektedir.","7e2037c5":"<a id=\"notwork\"><\/a>\n## 1.2.1. Sonu\u00e7 Al\u0131namayan Y\u00f6ntemler \n\nEtkili makine \u00f6\u011frenmesi algoritmalar\u0131ndan `random forest` veya `xgboost` gibi algoritmalar\u0131n etkili \u00e7al\u0131\u015fabilmesi i\u00e7in datan\u0131n \u00f6zellik \u00e7\u0131kar\u0131m\u0131 k\u0131sm\u0131nda detayl\u0131 i\u015flenmesi gereklidir. Olduk\u00e7a d\u00fczensiz ve kirli oldu\u011fu anla\u015f\u0131lan datan\u0131n haz\u0131rl\u0131k k\u0131sm\u0131 i\u00e7in s\u00fcrenin yeterli olamayaca\u011f\u0131 d\u00fc\u015f\u00fcn\u00fclm\u00fc\u015ft\u00fcr. Ger\u00e7ekten de `%80` validasyon skoruna ra\u011fmen ilk submission sonu\u00e7lar\u0131 `%50` auc (area under curve) skoru olarak geri d\u00f6nm\u00fc\u015ft\u00fcr.\n\nDatan\u0131n \u00f6rneklenmesi sonucunda pozitif s\u0131n\u0131f \u00f6rneklerinin yetersiz kald\u0131\u011f\u0131 g\u00f6r\u00fclm\u00fc\u015f, bu ba\u011flamda `overfitting` olgusunu bertaraf edebilmek i\u00e7in sat\u0131\u015f etiketlerinin al\u0131nd\u0131\u011f\u0131 3 ayl\u0131k d\u00f6nemlerin geni\u015f tutulmas\u0131 olumlu sonu\u00e7 vermemi\u015ftir.\n\nPandemi gibi \u00f6zel d\u00f6nemsellikleri bertaraf edebilmek i\u00e7in data olduk\u00e7a eski y\u0131llarda kesilerek model geli\u015ftirilmesi denenmi\u015f yak\u0131n y\u0131llar\u0131n tahmininde y\u00fcksek skorlar al\u0131nabilirken g\u00fcn\u00fcm\u00fcze yak\u0131n \u00f6rnekler b\u00fcy\u00fck miktarda overfitting ile sonu\u00e7lanm\u0131\u015ft\u0131r.\n\nDaha fazla olumlu \u00f6rnek elde edebilmek amac\u0131yla farkl\u0131 y\u0131llara ait 1 y\u0131l bazl\u0131 kay\u0131tlar\u0131n \u00fcst\u00fcste eklenmesi d\u00fc\u015f\u00fcn\u00fclm\u00fc\u015f ancak platform haf\u0131zas\u0131 yeterli gelmemi\u015ftir. ","fe9f339c":"`autos` : `FINAL_VEHICLE_TABLE_DATATHON` Kay\u0131p data bulunmaktad\u0131r.","b98aa51a":"<a id=\"intro\"><\/a>\n# 1. Giri\u015f ","700ec876":"<a id=\"func1\"><\/a>\n### 2.1.5. Gerekli Fonksiyonlar","c3d29a8b":"<a id=\"train\"><\/a>\n### 2.2.4. E\u011fitim ve Validasyon","e9145b54":"Tahminlerin da\u011f\u0131l\u0131m\u0131n\u0131n sola \u00e7arp\u0131k olmas\u0131ndan dolay\u0131 e\u011fitimdekine benzer bir sat\u0131n alma da\u011f\u0131l\u0131m\u0131n\u0131n beklendi\u011fi g\u00f6r\u00fclmektedir.","46e112ea":"Edinilen son arac\u0131n ya\u015f\u0131 verisinde \"age\" verisine benzer bir d\u00fczenleme yap\u0131larak kay\u0131p de\u011ferler tahmin edilerek doldurulmu\u015ftur. 10 ya\u015f\u0131ndan b\u00fcy\u00fck t\u00fcm ara\u00e7lar\u0131n ya\u015f\u0131 10 olarak kabul edilmi\u015ftir.","0b342341":"<a id=\"problem\"><\/a>\n## 1.1. Problem Tan\u0131m\u0131 \nGelecek 3 ay i\u00e7in sat\u0131\u015f tahmini... Do\u011fu\u015f Otomotiv markalar\u0131ndan 5'i i\u00e7in, aktif ruhsat sahipli\u011fi olan mu\u0308\u015fterilerin takip eden 3 ay i\u00e7erisinde sat\u0131\u015f dosyas\u0131 a\u00e7t\u0131rma olas\u0131l\u0131klar\u0131n\u0131n belirlenmesi...","46a345bf":"<a id=\"feature\"><\/a>\n### 2.1.3. \u00d6zellik \u00c7\u0131kar\u0131m\u0131 (Feature Extraction)"}}