{"cell_type":{"e77e5e8b":"code","98f3019d":"code","60bdfa6f":"code","75fb686f":"code","4e95fed3":"code","94792517":"code","f9360eef":"code","ea0bbb05":"code","9f68c0c9":"code","ce94a73c":"code","6a0bbaf8":"code","cf1ae8b9":"code","a0e5082b":"code","aa224f34":"code","9aaadbfc":"code","f64ecb8c":"code","699e4924":"code","539f797f":"code","4c505be7":"markdown","ca46d249":"markdown","e222dd4e":"markdown","e85d6b40":"markdown","9c291640":"markdown","9dff3122":"markdown","41bdf064":"markdown","ce1e0206":"markdown","509e59a7":"markdown"},"source":{"e77e5e8b":"import glob\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom skimage.transform import pyramid_gaussian\nfrom sklearn.model_selection import train_test_split\n\nprint(glob.glob(\"..\/input\/*\"))\n\n%matplotlib inline\n%precision 2","98f3019d":"def draw_confusionmatrix(ytest, yhat):\n    plt.figure(figsize=(10,7))\n    cm = confusion_matrix(ytest, yhat)\n    ax = sns.heatmap(cm, annot=True, fmt=\"d\")\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n    acc = accuracy_score(ytest, yhat)\n    print(f\"Sum Axis-1 as Classification accuracy: {acc}\")","60bdfa6f":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n\nX = train_df.iloc[:,1:]\ny = train_df.label\nlabel = sorted(y.unique())","75fb686f":"plt.figure(figsize=(9,9))\nfor i in label:\n    plt.subplot(1,10, i+1)\n    img = np.array( X[y==i][1:2] ).reshape(28,28)\n    plt.imshow(img)","4e95fed3":"m = y.unique().shape[0]\nn = X.shape[1]\n\nmu = np.zeros((m,n))\nsi = np.zeros((m,n))\nfor i in label:\n    mu[i] = X[y==i].mean()\n    si[i] = X[y==i].std()","94792517":"plt.figure(figsize=(9,9))\nfor i in label:\n    plt.subplot(3,4, i+1)\n    img = np.array( mu[i] ).reshape(28,28)\n    plt.imshow(img)","f9360eef":"model = GaussianNB()","ea0bbb05":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=0)\nmodel.fit(X_train, y_train)\nyhat = model.predict(X_valid)\n\ndraw_confusionmatrix(y_valid, yhat)","9f68c0c9":"Xtmp = np.array(X).reshape(X.shape[0], 28, 28)\nXaxis1 = Xtmp.sum(axis=1)\nXaxis2 = Xtmp.sum(axis=2)","ce94a73c":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(Xaxis1, y, random_state=0)\nmodel.fit(Xtrain, ytrain)\nyhat = model.predict(Xvalid)\n\ndraw_confusionmatrix(yvalid, yhat)","6a0bbaf8":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(Xaxis2, y)\nmodel.fit(Xtrain, ytrain)\nyhat = model.predict(Xvalid)\n\ndraw_confusionmatrix(yvalid, yhat)","cf1ae8b9":"Xaxises = np.hstack((Xaxis1, Xaxis2))","a0e5082b":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(Xaxises, y)\nmodel.fit(Xtrain, ytrain)\nyhat = model.predict(Xvalid)\n\ndraw_confusionmatrix(yvalid, yhat)","aa224f34":"from scipy import ndimage\nXtmp = np.array(X).reshape(X.shape[0], 28, 28)\nresult = np.zeros_like(Xtmp)\nfor i in range(Xtmp.shape[0]):\n    result[i] = ndimage.sobel(Xtmp[i])\n    \nresult = result.reshape(result.shape[0], 28*28)","9aaadbfc":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(result, y)","f64ecb8c":"model = GaussianNB()\nmodel.fit(Xtrain, ytrain)\nyhat = model.predict(Xvalid)\ndraw_confusionmatrix(yvalid, yhat)","699e4924":"k = np.array([[1,1,1], [1,5,1], [1,1,1]])\nimages = np.zeros_like(Xtmp)\nfor i in range(Xtmp.shape[0]):\n    images[i] = ndimage.convolve(Xtmp[i], k, mode='constant')\n\nimages = images.reshape(images.shape[0], 28*28)","539f797f":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(result, y)\n\nmodel = GaussianNB()\nmodel.fit(Xtrain, ytrain)\nyhat = model.predict(Xvalid)\ndraw_confusionmatrix(yvalid, yhat)","4c505be7":"### 2. Convolution","ca46d249":"### 2. Axis 2 As Feature","e222dd4e":"## Naive Bayse Classifier","e85d6b40":"## Naive Bayes Classification on Histogram as Feature","9c291640":"# MNITS Naive Bayes Classifier","9dff3122":"## Draw Average Point of every class","41bdf064":"### 1. Axis 1 As Feature","ce1e0206":"### 3. Axis 1 and 2 As Feature","509e59a7":"## Image Filters\n\n### 1. Sobel Filter"}}