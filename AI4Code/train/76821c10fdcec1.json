{"cell_type":{"7b3a6266":"code","b57b0a14":"code","62a456a8":"code","de963019":"code","c0bd18c3":"code","3c5032e8":"code","f1191f0d":"code","cb072471":"code","1a6548fe":"code","323aa69d":"code","a15ff15d":"code","5da54eef":"markdown","064931a2":"markdown","bebefd54":"markdown"},"source":{"7b3a6266":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import roc_auc_score\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b57b0a14":"%%time\ntrain = np.load('..\/input\/distilbert-use-features-just-the-features\/X_train.npy')\ntest = np.load('..\/input\/distilbert-use-features-just-the-features\/X_test.npy')\n","62a456a8":"train.shape","de963019":"test.shape","c0bd18c3":"np.zeros((6079,))","3c5032e8":"train_test = np.vstack([train, test])\ntarget = np.hstack([np.zeros((6079,)), np.ones((476,))])\ndel train, test\ngc.collect()","f1191f0d":"train, test, train_y, test_y = model_selection.train_test_split(train_test, target, test_size=0.33, random_state=42, shuffle=True)\ndel train_test, target\ngc.collect()","cb072471":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\ngc.collect()","1a6548fe":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 20, \n         'objective':'binary',\n         'max_depth': 2,\n         'learning_rate': 0.01,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.5,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","323aa69d":"num_round = 500\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=1000, early_stopping_rounds = 1000)","a15ff15d":"features = ['feature_'+str(x) for x in range(3142)]\n\nfeature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 20))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(100))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","5da54eef":"That's not too shabby - AUC of 0.61 between train and test sets indicates high variability between distinct features. Unfortunately most of our featues come from the transformers embedding space(s), so it will not be easy to interpret whcih ones are responsible for what. Nonetheless, let's try to take a quick look.","064931a2":"So it seams that \"feature_717\" is the most distinct feature between the train and test sets, with a long tail of features that have a relatively low value in this regard. ","bebefd54":"In this notebook we'll try to use adversarial validation in order to see how similar\/different the train and test sets are. Since we don't have access to the final train dataset, this exercise is meant more to inform the modeling process than to use the information from the train set for the final submission. All the features for this kernel, as well as the references to previous kernels that created them, can be found here: https:\/\/www.kaggle.com\/tunguz\/distilbert-use-features-just-the-features"}}