{"cell_type":{"1790091d":"code","baa5c49d":"code","01b082f8":"code","b78db6a4":"code","92ee869c":"code","0cf4752a":"code","ae22e062":"code","ba4d7b24":"code","44680757":"code","d159f6ce":"code","ee1430e6":"code","67d6c9a5":"code","dfbc3d24":"code","6996c7f5":"code","c5df1b98":"code","64abb367":"code","38c0756d":"code","36c94223":"code","56e639b8":"markdown","ae407c00":"markdown","392538cc":"markdown","4099e2c0":"markdown","5c82e100":"markdown","746adcdd":"markdown","277d2706":"markdown","26a491a1":"markdown","d7729463":"markdown","37670008":"markdown","abc67474":"markdown","e9f83e76":"markdown","fac989ec":"markdown","5d344948":"markdown","00124e74":"markdown","84207b89":"markdown"},"source":{"1790091d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.datasets import mnist\n\nsns.set(style='white', context='notebook', palette='deep')","baa5c49d":"def unpickle(file):\n    import pickle\n    with open(file, 'rb') as fo:\n        dict = pickle.load(fo, encoding='bytes')\n    return dict","01b082f8":"## We will use the QMNIST dataset to boost the performance\nqmnist = unpickle(\"\/kaggle\/input\/qmnist-the-extended-mnist-dataset-120k-images\/MNIST-120k\")\n\nX_train = qmnist['data']\nY_train = qmnist['labels']\n\n# Download Data\n#train = pd.read_csv(\"..\/input\/train.csv\") # We will use qmnist to train the CNN\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\") # Test on the competition data","b78db6a4":"# Normalize data to make CNN faster\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\n\n#X_train1 = X_train1 \/ 255.0","92ee869c":"X_train = X_train.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","0cf4752a":"# Convert label to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","ae22e062":"# Split dataset into training set and validation set\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.05, random_state=34)","ba4d7b24":"# Draw an example of a data set to see\ng = plt.imshow(X_train[189][:,:,0])","44680757":"model = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',  activation ='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()","d159f6ce":"# Define Optimizer (RMSProp)\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n\n# Compile model\nmodel.compile(optimizer=optimizer, \n              loss=\"categorical_crossentropy\", \n              metrics=[\"accuracy\"])\n\n# Audjusting learning rate\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","ee1430e6":"#Adjusting epochs and batch_size\nepochs = 50\nbatch_size = 128","67d6c9a5":"#Data Augmentation \ndatagen = ImageDataGenerator(featurewise_center=False, # set input mean to 0 over the dataset\n                            samplewise_center=False,  # set each sample mean to 0\n                            featurewise_std_normalization=False,  # divide inputs by std of the dataset\n                            samplewise_std_normalization=False,  # divide each input by its std\n                            zca_whitening=False,  # apply ZCA whitening\n                            rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n                            zoom_range = 0.1, # Randomly zoom image \n                            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n                            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n                            horizontal_flip=False,  # randomly flip images\n                            vertical_flip=False)  # randomly flip images\ndatagen.fit(X_train)","dfbc3d24":"#Prediction model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, \n                              validation_data = (X_val,Y_val),\n                              verbose = 2, \n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                              callbacks=[learning_rate_reduction])","6996c7f5":"fig, ax = plt.subplots(1,2, figsize=(15, 5))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","c5df1b98":"# Draw a confusion matrix that can be used to observe high false positives\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.rcParams[\"figure.figsize\"] = (7,7)\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","64abb367":"# Show some wrong results, and the difference between the predicted label and the real labe\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)))\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n            \n    fig.tight_layout() \n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","38c0756d":"# Make predictions about test sets\nresults = model.predict(test)\n\n# Convert one-hot vector to number\nresults = np.argmax(results, axis = 1)\n\nresults = pd.Series(results, name=\"Label\")","36c94223":"# Save the final result in cnn_mnist_submission.csv\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"), results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","56e639b8":"Our CNN will have 19 layers (including the dropouts), the architecture of the CNN will be as follows:\n\n[\n\n1. Convolutional layer\n2. Batch Norm layer\n3. Convolutional layer\n4. Batch Norm layer\n5. Pooling layer\n6. Dropout\n\n] x 2 blocks\n\n13. Convolutional layer\n14. Batch Norm layer\n15. Dropout\n\n16. Fully connected layer\n17. Batch Norm layer\n18. Dropout\n19. Fully connected layer\n","ae407c00":"<a id=\"section-six\"><\/a>\n## 6. Model fitting","392538cc":"<a id=\"section-three\"><\/a>\n## 3. Data pre-processing","4099e2c0":"Let's explore how it looks the QMNIST dataset...","5c82e100":"This is the index of the notebook:\n* [1. Import libraries](#section-one)\n* [2. Load the data](#section-two)\n* [3. Data pre-processing](#section-three)\n* [4. Train-Test split](#section-four)\n* [5. CNN architecture and optimizer](#section-five)\n* [6. Model fitting](#section-six)\n* [7. Model evaluation and submission](#section-seven)","746adcdd":"Let's also use Data Augmentation","277d2706":"The data pre-processing step includes data normalization, reshaping the data, and converting the labels into a one-hot vector.","26a491a1":"This unpickle function is defined to unpack the data from the pickle file. See the description of the dataset","d7729463":"<a id=\"section-two\"><\/a>\n## 2. Load the data","37670008":"<a id=\"section-one\"><\/a>\n## 1. Import libraries","abc67474":"Instead of training with the data from the Digit Recognizer competition, we will boost the performace by training on the QMNIST data.","e9f83e76":"# Digit Recognizer - 0.999 using CNN and the QMNIST dataset!!","fac989ec":"It's amazing that convolutional neural networks can classify handwritten digits so accurately. In this kernel, by using a simple CNN architecture and [The Extended MNIST dataset](https:\/\/www.kaggle.com\/fedesoriano\/qmnist-the-extended-mnist-dataset-120k-images) (QMNIST, uploaded by me \ud83d\ude0a) to improve the generalization ability, we will be able of achieving 99.9% classification accuracy.","5d344948":"<a id=\"section-seven\"><\/a>\n## 7. Model evaluation and submission","00124e74":"<a id=\"section-four\"><\/a>\n## 4. Train-Test split","84207b89":"<a id=\"section-five\"><\/a>\n## 5. CNN architecture and optimizer"}}