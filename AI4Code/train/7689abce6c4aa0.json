{"cell_type":{"01eb18ac":"code","3540560c":"code","eae1eba8":"code","f9f0ac46":"code","9988a2e9":"code","30c04ad5":"code","f8bffa88":"code","f112806b":"code","eaea48e8":"code","e2d7c14a":"code","e6082ee8":"code","798863e4":"code","be061a6d":"code","db491768":"code","39a2dc36":"code","1ed1d1a2":"code","0f46a0b3":"code","1b57d659":"code","42d67c67":"code","758a6e67":"code","eb1a87e2":"code","5a945bd8":"code","b2933d1a":"code","d85b7e2c":"code","06f9a4bb":"code","951374f0":"code","5469bcc5":"code","0be485d8":"code","f5ead3bd":"code","73d40be5":"code","ab290736":"code","8b9225c0":"code","86bde512":"code","50f81b54":"code","58bee3c8":"code","bbdb1d04":"code","5b3bed44":"code","0079b45d":"code","79613839":"code","6ffcb2db":"code","49dbe857":"code","4f42716a":"code","35f6afa4":"code","0d8d3a45":"code","8c22c5b8":"code","f0ab30dc":"code","3fb850ed":"code","386bcb7b":"code","cf0c8cf9":"code","aa72e54c":"code","288c899f":"code","9f091c60":"code","29f9dc29":"code","88c6909f":"code","1abde2e7":"code","41329e4c":"code","f283d365":"markdown","904e7b71":"markdown","e1a44f73":"markdown","7219b293":"markdown","93fbe334":"markdown","b32493d0":"markdown","dc4335f9":"markdown","d6533e2d":"markdown","8061ff5d":"markdown"},"source":{"01eb18ac":"import pandas as pd\nimport missingno as msno\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nfrom tqdm import tqdm\nimport seaborn as sns\n%matplotlib inline","3540560c":"import folium\nfrom folium import *\nfrom folium.plugins import *","eae1eba8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f9f0ac46":"df = pd.read_csv('\/kaggle\/input\/airbnb-istanbul-dataset\/AirbnbIstanbul.csv')","9988a2e9":"df.head(15)","30c04ad5":"df.info()","f8bffa88":"msno.matrix(df,sparkline=False)","f112806b":"msno.bar(df)","eaea48e8":"fig,ax = plt.subplots(figsize=(10,6))\nmsno.heatmap(df,ax=ax)\nplt.show()\n#x.set_ylim([0,5])","e2d7c14a":"df = df.drop(['neighbourhood_group'],axis=1)","e6082ee8":"df.head()","798863e4":"df.last_review = pd.to_datetime(df.last_review)","be061a6d":"df.reviews_per_month.fillna(0.0,inplace=True)","db491768":"df.host_name.fillna('Not Stated',inplace = True)","39a2dc36":"df.name.fillna('No Description',inplace = True)","1ed1d1a2":"df.last_review.fillna(df.last_review.min(),inplace=True)","0f46a0b3":"df.info()","1b57d659":"df[df.duplicated(['host_id','neighbourhood'],keep=False)].sort_values(['host_id'])","42d67c67":"dup_df = df[df.duplicated(['host_id','neighbourhood'],keep=False)].sort_values(['host_id'])","758a6e67":"dup_dict = dup_df.host_id.value_counts()","eb1a87e2":"import operator\nsorted_x = sorted(dup_dict.items(), key=operator.itemgetter(1))","5a945bd8":"top10 = [i[0] for i in sorted_x[::-1][:10]]","b2933d1a":"top10_hosts = df[df.host_id.isin(top10)]","d85b7e2c":"top10_hosts.host_name.value_counts()","06f9a4bb":"top10_hosts.groupby('host_name')['number_of_reviews'].mean().reset_index()","951374f0":"top10_host_numrv = top10_hosts.groupby('host_name')['number_of_reviews'].mean().reset_index()","5469bcc5":"top10_hosts.groupby('host_name')['price'].mean().reset_index()","0be485d8":"top10_host_price = top10_hosts.groupby('host_name')['price'].mean().reset_index()","f5ead3bd":"names,n = top10_host_numrv['host_name'],top10_host_numrv['number_of_reviews']","73d40be5":"names,price = top10_host_price['host_name'],top10_host_price['price']","ab290736":"f,ax = plt.subplots(figsize=(12,8))\nax.barh(names,n)\nax.axvline(df.number_of_reviews.mean(),color='r')\nax.set_title('Mean # of Reviews of Top10 Multiple Property Owners',fontsize=20,pad=20)\nplt.show()","8b9225c0":"f,ax = plt.subplots(figsize=(12,8))\nax.barh(names,price)\nax.axvline(df.price.mean(),color='r')\nax.set_title('Mean # Prices set by Top10 Multiple Property Owners',fontsize=20,pad=20)\nplt.show()","86bde512":"city_pos = [df.latitude.mean(),df.longitude.mean()]","50f81b54":"def embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","58bee3c8":"tip = '<i>%d TL<\/i>'\npop = '<i>%s<\/i>'","bbdb1d04":"#map_df = df.sample(1000)\nmap_df = df[df.price>10000] ","5b3bed44":"# Create the map\nistanbul = folium.Map(location=city_pos, tiles='cartodbpositron', zoom_start=10)\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in map_df.iterrows():\n    name = row['name']\n    price = row['price']\n    mc.add_child(Marker([row['latitude'], row['longitude']], tooltip=pop%name, popup=tip%price))\nistanbul.add_child(mc)\n\n# Display the map\nembed_map(istanbul, 'istanbul.html')\n","0079b45d":"df['days_since_last_rv'] = (df.last_review.max() - df.last_review).dt.days","79613839":"corr = df.corr()","6ffcb2db":"# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\nplt.show()","49dbe857":"f,ax = plt.subplots(figsize=(12,8))\ndf.boxplot(column='price',by='neighbourhood',rot=90,ax=ax)\n#ax.set_ylim([0,10000])\nplt.suptitle('')\nax.set_title('Price Grouped by Neighbourhood',fontsize = 15)\nax.title.set(y=1.05)\nax.set_ylabel('Price (TL)',fontsize=15)\nax.set_xlabel('',fontsize=15)\nplt.show()","4f42716a":"nb_price = df.groupby('neighbourhood')['price'].agg([np.mean,np.std]).reset_index()\nn = nb_price['neighbourhood'].values\nm = nb_price['mean'].values\nstd = nb_price['std'].values","35f6afa4":"nb_price","0d8d3a45":"f,ax = plt.subplots(figsize=(12,8))\nax.barh(n,m,xerr=std)\nax.set_xlabel('Price (TL)',fontsize=15,x=0.42)\n\nplt.show()","8c22c5b8":"nb_reviews = df.groupby('neighbourhood')['reviews_per_month'].agg([np.mean,np.std]).reset_index()\nn = nb_reviews['neighbourhood'].values\nr = nb_reviews['mean'].values\nstd = nb_reviews['std'].values\nmean = r.mean()","f0ab30dc":"f,ax = plt.subplots(figsize=(12,8))\nax.barh(n,r,xerr=std)\nax.set_xlabel('Reviews per Month',fontsize=15,x=0.42)\nax.axvline(x=mean,ls='-.',color='r')\n\nplt.show()","3fb850ed":"f,ax = plt.subplots(figsize=(12,8))\ndf[df.price<1000].plot.scatter('days_since_last_rv','number_of_reviews',ax=ax)\nax.set_ylabel('Number of Reviewers',fontsize = 15,labelpad=10)\nax.set_xlabel('Days Since Last Review',fontsize = 15,labelpad=10)\nax.set_title('Number of Reviews on a Listing vs. Days Past Since Last Review',fontsize=20,pad=20)\nplt.show()","386bcb7b":"#POSSIBLE OTHER THINGS TO LOOK AT\n#Limit to Top Neighbourhoods\n#Limit to Top Hosts\n#Availability Distribution in Top NB\n#Availablity overall on heatmap\n#Availability vs Reviews per month and num of reviews","cf0c8cf9":"nb_group = df.groupby(['neighbourhood'])","aa72e54c":"nb_df = nb_group.agg({'number_of_reviews':['sum','max','mean'],\n              'reviews_per_month':['sum','max','mean'],\n              'price':['mean','median']}).reset_index()","288c899f":"fig,ax = plt.subplots(figsize=(12,10))\ntop20nb_price = nb_df.sort_values(('price','median'),ascending=True)[['neighbourhood','price']]\nax.barh(top20nb_price.neighbourhood.values,top20nb_price.price['median'].values)\n","9f091c60":"fig,ax = plt.subplots(figsize=(12,10))\ntop20nb_review_sum = nb_df.sort_values(('number_of_reviews','sum'),ascending=True)[['neighbourhood','number_of_reviews']]\nax.barh(top20nb_review_sum.neighbourhood.values,top20nb_review_sum.number_of_reviews['sum'].values)","29f9dc29":"fig,ax = plt.subplots(figsize=(12,10))\ntop20nb_review_monthly_mean = nb_df.sort_values(('reviews_per_month','mean'),ascending=True)[['neighbourhood','reviews_per_month']]\nax = plt.barh(top20nb_review_monthly_mean.neighbourhood.values,top20nb_review_monthly_mean.reviews_per_month['mean'].values)","88c6909f":"top5 = top20nb_review_sum.neighbourhood.values[::-1][:5]\nlast5 = top20nb_review_sum.neighbourhood.values[:5]","1abde2e7":"fig,(ax1,ax2) = plt.subplots(nrows=2,ncols=1,figsize=(12,12))\n\nfor n in top5:\n    values = df.availability_365[df.neighbourhood==n].values\n    sns.distplot(values,ax=ax1,label=n)\n    \nax1.legend()\n    \nfor n in last5:\n    values = df.availability_365[df.neighbourhood==n].values\n    sns.distplot(values,ax=ax2,label=n)\n    \nax2.legend()\n","41329e4c":"bey_df = df[df.neighbourhood=='Beyoglu']","f283d365":"### Let's See the Crazy Prices","904e7b71":"#### 1. By Median Price","e1a44f73":"#### 3. By Mean Monthly Review","7219b293":"### TODO: Introduce Property Count for Scoring Importance of the neighborhood","93fbe334":"### Availability of Least and Most Reviewed Neighbourhoods","b32493d0":"#### 2. By Sum of Reviews","dc4335f9":"### Top Neighbourhoods","d6533e2d":"## Istanbul Airbnb Listings","8061ff5d":"### Star Neighbourhood: Beyo\u011flu!"}}