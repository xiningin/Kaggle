{"cell_type":{"9eddc2f1":"code","2b46f97e":"code","3f241c10":"code","d6d84b71":"code","a15a24ca":"code","c46e6176":"code","9943fb8c":"code","4a23381d":"code","eefb78b2":"code","69664dfb":"code","1564c35e":"code","9ca345e2":"code","58f8fa18":"code","36d7f04e":"code","00b7abc0":"code","26a40592":"code","c16ea54c":"code","cab761eb":"code","8973aac7":"code","35fe1e50":"code","c03e65b9":"code","2fd50f2d":"code","44e8add1":"code","319acae7":"code","9137ccc8":"code","1750b9af":"code","94cb3ecd":"code","1c58779b":"code","4abd6bce":"code","f2c1cacd":"code","61308a16":"code","7bb1ace3":"code","73cfddcf":"code","70b7206f":"code","e9f4c257":"code","5ef9c5ef":"markdown","c30e5d69":"markdown","ab867ad0":"markdown","6977e068":"markdown","02ed2660":"markdown","ae091406":"markdown"},"source":{"9eddc2f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b46f97e":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\n# SeaBorn : librairie de graphiques avanc\u00e9s\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","3f241c10":"df = pd.read_csv('..\/input\/iris\/Iris.csv')","d6d84b71":"# df.Species = df.Species.map({\"Iris-setosa\":0,\"Iris-versicolor\":1,\"Iris-virginica\":2})","a15a24ca":"df.head(10)","c46e6176":"df.columns","9943fb8c":"df = df.drop([\"Id\"],axis=1)","4a23381d":"df.shape","eefb78b2":"df.describe()","69664dfb":"df.Species.value_counts()","1564c35e":"setosa = df.Species=='Iris-setosa'\nversicolor = df.Species=='Iris-versicolor'\nvirginica = df.Species=='Iris-virginica'","9ca345e2":"plt.figure(figsize=(12,12))\nsns.kdeplot(x=df[setosa].SepalLengthCm, y=df[setosa].SepalWidthCm, cmap=\"Reds\",  shade=True, alpha=0.3, thresh=0.05)\nsns.kdeplot(x=df[versicolor].SepalLengthCm, y=df[versicolor].SepalWidthCm, cmap=\"Greens\", shade=True, alpha=0.3, thresh=0.05)\nsns.kdeplot(x=df[virginica].SepalLengthCm, y=df[virginica].SepalWidthCm, cmap=\"Blues\", shade=True, alpha=0.3, thresh=0.05)","58f8fa18":"sns.boxplot(x=\"Species\", y=\"SepalWidthCm\", data=df)","36d7f04e":"sns.violinplot(x=\"Species\", y=\"SepalWidthCm\", data=df)","00b7abc0":"sns.pairplot(df, hue=\"Species\")","26a40592":"data_train = df.sample(frac=0.8, random_state=1)          # 80% des donn\u00e9es avec frac=0.8\ndata_test = df.drop(data_train.index)     # le reste des donn\u00e9es pour le test","c16ea54c":"X_train = data_train.drop(['Species'], axis=1)\ny_train = data_train['Species']\nX_test = data_test.drop(['Species'], axis=1)\ny_test = data_test['Species']","cab761eb":"plt.figure(figsize=(9,9))\n\nlogistique = lambda x: np.exp(x)\/(1+np.exp(x))   \n\nx_range = np.linspace(-10,10,50)       \ny_values = logistique(x_range)\n\nplt.plot(x_range, y_values, color=\"red\")","8973aac7":"from sklearn.linear_model import LogisticRegression","35fe1e50":"X_train.head(10)","c03e65b9":"lr = LogisticRegression(solver='liblinear')\nlr.fit(X_train,y_train)","2fd50f2d":"y_lr = lr.predict(X_test)","44e8add1":"from sklearn.metrics import accuracy_score, confusion_matrix","319acae7":"lr_score = accuracy_score(y_test, y_lr)\nprint(lr_score)","9137ccc8":"cm = confusion_matrix(y_test, y_lr)\nprint(cm)","1750b9af":"pd.crosstab(y_test, y_lr, rownames=['Reel'], colnames=['Prediction'], margins=True)","94cb3ecd":"fig = sns.FacetGrid(df, hue=\"Species\", aspect=3) # aspect=3 permet d'allonger le graphique\nfig.map(sns.kdeplot, \"SepalLengthCm\", shade=True)\nfig.add_legend()","1c58779b":"from sklearn import tree\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train,y_train)\ny_dtc = dtc.predict(X_test)\nprint(accuracy_score(y_test, y_dtc))","4abd6bce":"plt.figure(figsize=(30,30))\ntree.plot_tree(dtc, feature_names=X_train.columns, class_names=['Iris-setosa','Iris-versicolor','Iris-virginica'], fontsize=14, filled=True) \n","f2c1cacd":"dtc1 = tree.DecisionTreeClassifier(max_depth = 3, min_samples_leaf = 20)\ndtc1.fit(X_train,y_train)","61308a16":"plt.figure(figsize=(30,30))\ntree.plot_tree(dtc1, feature_names=X_train.columns, class_names=['Iris-setosa','Iris-versicolor','Iris-virginica'], fontsize=14, filled=True) ","7bb1ace3":"y_dtc1 = dtc1.predict(X_test)\nprint(accuracy_score(y_test, y_dtc1))","73cfddcf":"from sklearn import ensemble\nrf = ensemble.RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)","70b7206f":"rf_score = accuracy_score(y_test, y_rf)\nprint(rf_score)","e9f4c257":"pd.crosstab(y_test, y_rf, rownames=['Reel'], colnames=['Prediction'], margins=True)","5ef9c5ef":"# **VISUALIZATION**","c30e5d69":"### Arbres de d\u00e9cision","ab867ad0":"### Random forests","6977e068":"# **Machine learning**","02ed2660":"### R\u00e9gression logistique","ae091406":"# **Donn\u00e9es**"}}