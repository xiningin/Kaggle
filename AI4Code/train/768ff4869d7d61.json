{"cell_type":{"b2c11668":"code","25a1f94a":"code","36c5df79":"code","3c7736ba":"code","9de316fa":"code","19568177":"code","782f2ccc":"code","a0e68977":"code","ec43aa23":"code","a866e138":"code","cc411267":"code","6f2a53fa":"code","ee0a2613":"code","1fbec55c":"code","10121274":"code","f7435119":"code","a14fe828":"code","af6a6c72":"code","a808d4ec":"code","a83046ed":"code","8aca8f1b":"code","b5b7de2e":"code","f5a98f48":"code","f2b9ca4c":"code","e587b267":"code","32fa5153":"code","6f1609bc":"code","fea078cb":"code","081529ad":"code","19b3bf40":"code","93c5ecdc":"code","bd1b9c2f":"code","ace10d18":"code","60ff7a9b":"code","3384444b":"code","dcd0b020":"code","ed5387b1":"code","ee06aeff":"code","834fd158":"code","4b4b08eb":"code","e8f87881":"code","64fe32e6":"code","bb8ec730":"code","72cecf3c":"code","5b5556b8":"code","1f865393":"code","ebeefa37":"markdown"},"source":{"b2c11668":"#https:\/\/www.kaggle.com\/anirbanshaw24\/convnet-digit-recognizer\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nfrom numpy import newaxis\nfrom keras.optimizers import RMSprop\nfrom keras.optimizers import SGD\nimport skimage\nfrom skimage import transform\nfrom skimage import util\nfrom keras.models import Sequential\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n","25a1f94a":"train=pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')\ntest.head()\n#train.head()","36c5df79":"x_train = train.iloc[:,1:]\ny_train = train.iloc[:,0]\nx_test = test.iloc[:,:] \n","3c7736ba":"x_train.shape[0]","9de316fa":"def rotate_image(X, degrees):\n    X_flip = []\n    for i in range(x_train.shape[0]):\n        img = np.array(X.iloc[i,:]).reshape((28, 28))\n        img = skimage.transform.rotate(img, degrees)\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","19568177":"def noise_image(X):\n    X_flip = []\n    for i in range(10000):\n        img = np.array(X.iloc[i,:]).reshape((28, 28))\n        img = skimage.util.random_noise(img, mode='pepper')\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","782f2ccc":"def scale_up_image(X, scale):\n    X_flip=[]\n    for i in range(10000, 15000):\n        img = np.array(X.iloc[i,:]).reshape((28,28))\n        img = skimage.transform.rescale(img, scale, clip = True)\n        img = skimage.util.crop(img, ((0,28),(0,28)))\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","a0e68977":"def translate_image(X, h, w):\n    X_flip = []\n    M = np.float32([[1, 0, h], [0, 1, w]])\n    for i in range(10000,20000):\n        img = np.array(X.iloc[i,:]).reshape((28, 28))\n        img = img.astype(np.float32)\n        img = cv2.warpAffine(img, M, (28, 28))\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    X = np.concatenate((X, X_flip))\n    return X","ec43aa23":"def plot_digits(X, Y, shape):\n    for i in range(9):\n        plt.subplot(3, 3, i+1)\n        plt.tight_layout()\n        plt.imshow(np.array(X.iloc[i,:]).reshape((28,28)), interpolation='none', cmap='gray')\n        plt.title('Digit:{}'.format(Y[i]))\n        plt.xticks([])\n        plt.yticks([])\n    plt.show()","a866e138":"X = rotate_image(x_train, 30)","cc411267":"X.shape","6f2a53fa":"y= np.concatenate((y_train, y_train))\ntype(y_train)","ee0a2613":"X = noise_image(pd.DataFrame(X))","1fbec55c":"X.shape\n","10121274":"y= np.concatenate((y, y_train[:10000]))\ny.shape","f7435119":"#X = translate_image(pd.DataFrame(X), 1.5, 1.5)","a14fe828":"#y= np.concatenate((y, y_train[10000:20000]))\n#y.shape","af6a6c72":"#X.shape","a808d4ec":"#noise added\nplot_digits(pd.DataFrame(X[84000:]), y[84000:], 28)","a83046ed":"#rotated 30 degrees\nplot_digits(pd.DataFrame(X[42000:]), y[42000:], 28)","8aca8f1b":"#translated image\n#plot_digits(pd.DataFrame(X[94000:]), y[94000:], 28)","b5b7de2e":"#label encoding my training ys\n#from keras.utils.np_utils import to_categorical\n#y1 = to_categorical(y, num_classes = 10)\n#DIDNT WORK","f5a98f48":"#reshaping training set\nbleh=[]\nfor i in range(X.shape[0]):\n    pic1 = [X[i]]  #pic1 --> this is one row of x_train\n    v = np.array(np.reshape(pic1,(28,28))) #v is the 2D matrix --> 28X28\n    bleh.append(v)","f2b9ca4c":"arr = np.array(bleh)   #arr has my xtrains!!!\narr.shape","e587b267":"#reshaping my test set\nbleh_test=[]\nfor j in range(x_test.shape[0]):\n    pic1_test = [x_test.iloc[j,:]]  #pic1 --> this is one row of x_train\n    v_test = np.array(np.reshape(pic1_test,(28,28))) #v is the 2D matrix --> 28X28\n    bleh_test.append(v_test)","32fa5153":"arr_test = np.array(bleh_test)   #arr_test has my x_tests!!!\narr_test.shape\n","6f1609bc":"arr = tf.keras.utils.normalize(arr, axis=1)\narr_test = tf.keras.utils.normalize(arr_test, axis=1)","fea078cb":"arr_test.shape","081529ad":"X = np.array(arr).reshape(-1, 28, 28, 1)\n","19b3bf40":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 \n#-> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\nmodel = Sequential()\n","93c5ecdc":"model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))","bd1b9c2f":"model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))","ace10d18":"model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))","60ff7a9b":"model.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation = \"softmax\"))","3384444b":"#model.add(Flatten())","dcd0b020":"sgd = SGD(lr=0.1, decay=0.0, nesterov=True)","ed5387b1":"model.compile(optimizer=sgd,\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","ee06aeff":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc',factor=0.3, patience=3, min_lr=0.001)","834fd158":"#earlystopping=EarlyStopping(patience=3)","4b4b08eb":"model.fit(X, y, epochs=40, callbacks=[learning_rate_reduction], validation_split=0.3)","e8f87881":"y_test = np.array(arr_test).reshape(-1, 28, 28, 1)","64fe32e6":"predictions = model.predict(y_test)","bb8ec730":"print(predictions.shape)","72cecf3c":"pred=[]\nfor u in range(28000):\n    pred.append(np.argmax(predictions[u]))","5b5556b8":"imageId = [l for l in range(1,28001)]","1f865393":"d = {'ImageId': imageId, 'Label': pred}\ndf1 = pd.DataFrame(d)\ndf1.to_csv('mycsvfile7.csv',index=False)\n\ndf1\n","ebeefa37":"# flipping the digits made it worse-- 6..9\ndef flip_digits(X):\n    X_flip = []\n    for i in range(42000):\n        img = np.array(X.iloc[i,:]).reshape((28, 28))\n        img = np.fliplr(img)\n        X_flip.append(img.reshape((784)))\n    X_trfr = np.array(X_flip)\n    #X = np.concatenate((X, X_flip))\n    return X_trfr\n\nX_flip = flip_digits(x_train)\nX = np.concatenate((X, X_flip))\n\ny = np.concatenate((y_train, y_train))\ny= np.concatenate((y, y_train))\ntype(y)"}}