{"cell_type":{"6f10dee0":"code","dc351069":"code","2b1d4974":"code","61559f72":"code","6f482a4c":"code","6ccff289":"code","db198c4b":"code","2a9808e3":"code","ae957fe9":"code","12def6f3":"code","719e2cef":"code","7ef41821":"code","b878e4ea":"code","1b291d86":"code","05ecaed8":"code","264988b7":"markdown","f37b858e":"markdown","a9bfd352":"markdown","80d90f5e":"markdown","b7e6238d":"markdown","317c1c61":"markdown","a05d81f3":"markdown","263f4320":"markdown","ca11844a":"markdown","aa155f48":"markdown","722340d9":"markdown"},"source":{"6f10dee0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","dc351069":"iris = pd.read_csv(\"..\/input\/Iris.csv\")\nprint(\"Type: \"+str(type(iris)))\nprint(\"Names of column fields: \\n\"+str(iris.columns))\nprint(\"\\n Shape of dataset: \"+str(iris.shape))\nprint(\"Head of dataset: \")\nprint(iris.head())","2b1d4974":"print(\"\\n Brief description of data: \")\nprint(iris.describe())","61559f72":"# Shuffling data\nfrom sklearn.utils import shuffle\niris = shuffle(iris)","6f482a4c":"# Seperating target and features\nX = iris.iloc[:,1:5].values\ny = iris.iloc[:,5].values","6ccff289":"# Scaling and normalization\nX_scale = (X-X.mean(0))\/X.std(0)","db198c4b":"# Encoding categorical data\nlabelencoder_y = LabelEncoder()\ny_encode = labelencoder_y.fit_transform(y)\n\nprint(\"Name of classes: \"+str(labelencoder_y.classes_))\nprint(\"Classes: \"+str(np.unique(y_encode)))","2a9808e3":"print(y.reshape(150,1).shape)\nprint(X.shape)","ae957fe9":"# Using pairplot available in the seaborn package to visualize data\ndata = np.hstack((X,y.reshape(150,1)))\ncolumns = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm','Species']\nsns.pairplot(pd.DataFrame(data= data, columns= columns),hue=\"Species\")","12def6f3":"X_train, X_test, y_train, y_test = train_test_split(X_scale, y_encode,test_size=0.3)","719e2cef":"###### use gridsearch #######\nfrom sklearn.svm import SVC\nclf = SVC(C=1.0, kernel='linear', degree=3, gamma='auto',\n          coef0=0.0, shrinking=True, probability=False,\n          tol=0.001, cache_size=200, class_weight=None,\n          verbose=False, max_iter=-1, decision_function_shape='ovr', random_state=15)\nclf.fit(X_train, y_train)","7ef41821":"y_pred = clf.predict(X_test)","b878e4ea":"score = accuracy_score(y_test, y_pred)\nprint(score)","1b291d86":"from sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(y_test, y_pred)\n\nfrom mlxtend.plotting import plot_confusion_matrix\nfig, ax = plot_confusion_matrix(conf_mat=confusion_matrix(y_test, y_pred),\n                                colorbar=True,\n                                show_absolute=False,\n                                show_normed=True)\nplt.xticks(np.arange(0,3,1),labelencoder_y.classes_,rotation=90,size=15)\nplt.yticks(np.arange(0,3,1),labelencoder_y.classes_,size=15)\nplt.xlabel('Predicted label',color='red',fontsize=20)\nplt.ylabel('True label',color='red',fontsize=20)\nplt.show()","05ecaed8":"plt.barh(iris.columns[1:5].values, abs(clf.coef_.sum(axis=0)))\nprint( list( zip( iris.columns[1:5].values, abs(clf.coef_.sum(axis=0)) ) ) )","264988b7":"## 9. Confusion Matrix","f37b858e":"## 5. Splitting the data into test\/train","a9bfd352":"## 1. Importing necessary packages","80d90f5e":"## 10. Importance of each feature","b7e6238d":"## 3. Preprocessing the data","317c1c61":"## 7. Prediction","a05d81f3":"## 2. Importing the dataset","263f4320":"## 6. Classification algorithm - Support vector classifier","ca11844a":"## 4. Visualizing the data","aa155f48":"## 8. Accuracy","722340d9":"# Classification using SVM on iris dataset"}}