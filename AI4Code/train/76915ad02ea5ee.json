{"cell_type":{"234040e1":"code","76459156":"code","f9920cab":"code","ec29466c":"code","9bf75bf6":"code","3d00d321":"code","d3b67eb4":"code","74b2d429":"code","93d5621e":"code","77e87fbb":"code","4bfdb2e6":"code","5d67099a":"code","48210df9":"code","69a1dcdf":"code","f990252c":"code","3fee8279":"code","3ba1c0e2":"code","aa79533b":"code","a706bad8":"code","e7b7f963":"code","e92de2ff":"code","5c548e36":"code","55b3e3da":"code","9e13f4f9":"code","d04d7be8":"code","33c1a03f":"code","4e016940":"code","25059804":"code","52af96cb":"code","276102d4":"code","058ab8af":"code","1c390ac7":"code","e8cd7a89":"code","b6fa74a3":"code","f5efbb83":"code","fec67d3b":"code","4ec86b95":"code","8ae5ae22":"code","bb3d3c26":"code","b4266031":"code","421a2ace":"code","6e850e25":"code","1bc288a8":"code","efcd017f":"code","148165e3":"code","d7a69b77":"code","79683a7b":"code","7c52e5f3":"code","1cb0d2a5":"code","c0a8cf89":"code","58d568eb":"code","5c79316a":"code","948f90da":"code","20ed370f":"code","59e714ba":"code","6d689885":"code","98cbe567":"code","15fe74e9":"code","b333f497":"code","0b00796d":"code","6f56ca84":"code","0b49deef":"code","6094b520":"code","4ab7f9f1":"code","7510c12e":"code","737c2081":"code","e6600c9c":"code","2f3d0302":"code","1535d222":"code","8b597c72":"code","5ae16611":"code","e5568509":"code","7779b226":"code","891e87b3":"code","c02736fa":"markdown","666cd819":"markdown","420b3b85":"markdown","758b0698":"markdown","ed693990":"markdown","7ba1f7a2":"markdown","28558e70":"markdown","ea4d1229":"markdown","2bda81a5":"markdown","a25404d8":"markdown","d45bbc57":"markdown","320bbbb2":"markdown","8d15d2fd":"markdown","06e8277b":"markdown","1bd4af5f":"markdown","ab29597c":"markdown","db7c54e6":"markdown","cd452371":"markdown","bf1b9787":"markdown","6017c7a2":"markdown","85633d96":"markdown","ad433f26":"markdown","8783d906":"markdown","87604471":"markdown","3a8db0a0":"markdown","bbe0e14e":"markdown","ef58eda5":"markdown","78d96b96":"markdown","9975fdc6":"markdown","2c00435d":"markdown","eb430d4f":"markdown","e3de26f3":"markdown","82dd3a9e":"markdown","ac7e4bbe":"markdown","7de0ede1":"markdown","9faa4bde":"markdown","d4a3e0fd":"markdown","41707478":"markdown","ef16c9e6":"markdown","041a6d2d":"markdown","b46200a7":"markdown","a94d209f":"markdown","4d80f7d7":"markdown","06d49989":"markdown","b0e8d405":"markdown","19069217":"markdown","0374d0ee":"markdown","fcf33e95":"markdown","a75f9f0c":"markdown","dc7acdd6":"markdown"},"source":{"234040e1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom tqdm.auto import tqdm \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","76459156":"oj = os.path.join\npath = '..\/input\/ventilator-pressure-prediction'\ntrain = pd.read_csv(oj(path, 'train.csv'))\ntest  = pd.read_csv(oj(path, 'test.csv'))\nsub   = pd.read_csv(oj(path, 'sample_submission.csv'))","f9920cab":"bid_list = list(train['breath_id'].unique())","ec29466c":"%%time\ntrain['R_C'] = [f'{r:02}_{c:02}' for r, c in zip(train['R'], train['C'])]\nRCorder = list(np.sort(train['R_C'].unique()))\n#RCorder","9bf75bf6":"%%time\n# fast area calculation\ntrain['time_delta'] = train['time_step'].diff()\ntrain['time_delta'].fillna(0, inplace=True)\ntrain['time_delta'].mask(train['time_delta'] < 0, 0, inplace=True)\ntrain['tmp'] = train['time_delta'] * train['u_in']\ntrain['area'] = train.groupby('breath_id')['tmp'].cumsum()","3d00d321":"%%time\n# u_in: max, min, mean, std \nu_in_max_dict = train.groupby('breath_id')['u_in'].max().to_dict()\ntrain['u_in_max'] = train['breath_id'].map(u_in_max_dict)\nu_in_min_dict = train.groupby('breath_id')['u_in'].min().to_dict()\ntrain['u_in_min'] = train['breath_id'].map(u_in_min_dict)\nu_in_mean_dict = train.groupby('breath_id')['u_in'].mean().to_dict()\ntrain['u_in_mean'] = train['breath_id'].map(u_in_mean_dict)\nu_in_std_dict = train.groupby('breath_id')['u_in'].std().to_dict()\ntrain['u_in_std'] = train['breath_id'].map(u_in_std_dict)","d3b67eb4":"# u_in_half is time:0 - time point of u_out:1 rise (almost 1.0s)\ntrain['tmp'] = train['u_out']*(-1)+1 # inversion of u_out\ntrain['u_in_half'] = train['tmp'] * train['u_in']","74b2d429":"%%time\n# u_in_half: max, min, mean, std\nu_in_half_max_dict = train.groupby('breath_id')['u_in_half'].max().to_dict()\ntrain['u_in_half_max'] = train['breath_id'].map(u_in_half_max_dict)\nu_in_half_min_dict = train.groupby('breath_id')['u_in_half'].min().to_dict()\ntrain['u_in_half_min'] = train['breath_id'].map(u_in_half_min_dict)\nu_in_half_mean_dict = train.groupby('breath_id')['u_in_half'].mean().to_dict()\ntrain['u_in_half_mean'] = train['breath_id'].map(u_in_half_mean_dict)\nu_in_half_std_dict = train.groupby('breath_id')['u_in_half'].std().to_dict()\ntrain['u_in_half_std'] = train['breath_id'].map(u_in_half_std_dict)","93d5621e":"# Groupby is slow, do not use it.\n# All entries are first point of each breath_id\nfirst_df = train.loc[0::80,:]\n# All entries are first point of each breath_id\nlast_df = train.loc[79::80,:]","77e87fbb":"%%time\n# The Main mode DataFrame and flag\nmain_df= last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]\nmain_mode_dict = dict(zip(main_df['breath_id'], [1]*len(main_df)))\ntrain['main_mode'] = train['breath_id'].map(main_mode_dict)\ntrain['main_mode'].fillna(0, inplace=True)","4bfdb2e6":"%%time\n# u_out1_timing flag and DataFrame: speed up\n# \u9ad8\u901f\u7248 uout1_df \u4f5c\u6210\ntrain['u_out_diff'] = train['u_out'].diff()\ntrain['u_out_diff'].fillna(0, inplace=True)\ntrain['u_out_diff'].replace(-1, 0, inplace=True)\nuout1_df = train[train['u_out_diff']==1]","5d67099a":"main_uout1 = uout1_df[uout1_df['main_mode']==1]\nnomain_uout1 = uout1_df[uout1_df['main_mode']==1]","48210df9":"# Register Area when u_out becomes 1\nuout1_area_dict = dict(zip(first_df['breath_id'], first_df['u_in']))\ntrain['area_uout1'] = train['breath_id'].map(uout1_area_dict) ","69a1dcdf":"%%time\n# u_in: first point, last point\nu_in_first_dict = dict(zip(first_df['breath_id'], first_df['u_in']))\ntrain['u_in_first'] = train['breath_id'].map(u_in_first_dict)\nu_in_last_dict = dict(zip(first_df['breath_id'], last_df['u_in']))\ntrain['u_in_last'] = train['breath_id'].map(u_in_last_dict)\n# time(sec) of end point\ntime_end_dict = dict(zip(last_df['breath_id'], last_df['time_step']))     \ntrain['time_end'] = train['breath_id'].map(time_end_dict)","f990252c":"%%time\n# time(sec) when u_out becomes 1\nuout1_dict = dict(zip(uout1_df['breath_id'], uout1_df['time_step']))\ntrain['time_uout1'] = train['breath_id'].map(uout1_dict)","3fee8279":"%%time\n# u_in when u_out becomes1\nu_in_uout1_dict = dict(zip(uout1_df['breath_id'], uout1_df['u_in']))\ntrain['u_in_uout1'] = train['breath_id'].map(u_in_uout1_dict)","3ba1c0e2":"%%time\n# Dict that puts 0 at the beginning of the 80row cycle\nfirst_0_dict = dict(zip(first_df['id'], [0]*len(uout1_df)))\n\n# Faster version u_in_diff creation, faster than groupby\ntrain['u_in_diff'] = train['u_in'].diff()\ntrain['tmp'] = train['id'].map(first_0_dict) # put 0, the 80row cycle\ntrain.iloc[0::80, train.columns.get_loc('u_in_diff')] = train.iloc[0::80, train.columns.get_loc('tmp')]","aa79533b":"%%time\n# Create u_in vibration\ntrain['diff_sign'] = np.sign(train['u_in_diff'])\ntrain['sign_diff'] = train['diff_sign'].diff()\ntrain['tmp'] = train['id'].map(first_0_dict) # put 0, the 80row cycle\ntrain.iloc[0::80, train.columns.get_loc('sign_diff')] = train.iloc[0::80, train.columns.get_loc('tmp')]\n\n# Count the number of inversions, so take the absolute value and sum\ntrain['sign_diff'] = abs(train['sign_diff']) \nsign_diff_dict = train.groupby('breath_id')['sign_diff'].sum().to_dict()\ntrain['diff_vib'] = train['breath_id'].map(sign_diff_dict)","a706bad8":"%%time\nif 'diff_sign' in train.columns:\n    train.drop(['diff_sign', 'sign_diff'], axis=1, inplace=True)","e7b7f963":"train.head()","e92de2ff":"train.columns","5c548e36":"%%time\n################################################################\nfirst_df = train.loc[0::80,:]\nlast_df = train.loc[79::80,:]\nmain_df= last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]\nnomain_df = last_df[(last_df['u_in']<=4.8)|(last_df['u_in']>=5.1)]\nuout1_df = train[train['u_out_diff']==1]\nmain_uout1 = uout1_df[uout1_df['main_mode']==1]\nnomain_uout1 = uout1_df[uout1_df['main_mode']==1]\n################################################################","55b3e3da":"def plot_bid(bid, col1='', col2=''):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax2.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    if col1 != '':\n        c1 = tmp[col1][0]\n        title_str += f'{col1}: {c1}'\n    if col2 != '':\n        c2 = tmp[col2][0]\n        title_str += f'{col2}: {c2}'\n    ax1.set_title(title_str)\n\n    ax1.set_ylim(0, 100)\n    \n    ax1.legend(loc=(1.1, 0.8))\n    ax2.legend(loc=(1.1, 0.7))\n    plt.show()\n\ndef plot_uin(bid):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    #ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    ax1.set_title(title_str)\n\n    ax1.set_ylim(0, 100)\n    \n    plt.show()\n\ndef plot_time_step(bid):\n    plt.figure()\n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    plt.title(f'breath_id:{bid}, R:{R}, C:{C}')\n    plt.ylabel('Timestep')\n    plt.xlabel('Row No.')\n\n    plt.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n    plt.show()\n\ndef plot_uin_list(bid_list, ylim=100, u_low=0, u_high=100, pos=79, alpha=False):\n    \n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    \n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        u = tmp['u_in'][pos]\n        if (u >= u_low) and (u <= u_high):  \n            ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', alpha=a)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylabel('u_in')\n    ax1.set_ylim(0,ylim)\n    #ax1.legend(loc=(1.1, 0.8))\n    plt.show()\n\ndef df_from_to(df, f=0.0, t=6.0):\n    # \u300c0.0\u306e\u307f\u300d\u3068\u300c0.0\u3088\u308a\u5927\u304d\u304f1\u4ee5\u4e0b\u300d\u3092\u5b9f\u73fe\u3057\u305f\u3044\u306e\u3067\u3001\u3053\u306e\u4e0d\u7b49\u53f7\u306e\u5f62\n    bid_list = df.loc[(df['u_in'] > f)&(df['u_in'] <= t)]['breath_id'].tolist()\n    return bid_list   ","9e13f4f9":"def plot_double_time_bid(bid, time_delta=False, col1='', col2=''):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n    ts = []\n    td = []\n    if time_delta:\n        outlier = tmp.loc[tmp['time_delta'] > 0.15]\n        \n        rw = outlier['id'].tolist()\n        ts = outlier['time_step'].tolist()\n        td = outlier['time_delta'].tolist()\n        \n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}'\n    if col1 != '':\n        c1 = tmp[col1][0]\n        title_str += f'{col1}: {c1}'\n    if col2 != '':\n        c2 = tmp[col2][0]\n        title_str += f'{col2}: {c2}'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('Timestep')\n    ax1.set_xlabel('Row No.')\n\n    ymax = 3.0\n    ax1.set_ylim(0, ymax)\n\n    if time_delta:\n        rows = []\n        for a in rw:\n            aa = a % 80 - 2\n            if aa < 0:\n                aa += 80\n            rows.append(aa)\n            aa = a % 80 - 1\n            if aa < 0:\n                aa += 80\n            rows.append(aa)\n        ax1.vlines(rows, 0, ymax, \"red\", linestyles='dashed', alpha=0.2)\n\n    \n    ax1.plot(train.loc[train['breath_id'] == bid]['time_step'].tolist())\n\n    ##############################\n    ax3 = ax2.twinx()\n\n    ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax2.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax3.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax2.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    ax2.set_title(title_str)\n\n    ymax = 100\n    ax2.set_ylim(0, ymax)\n    \n    if time_delta:\n        lines = []\n        for a, b in zip(ts, td):\n            lines.append(a-b)\n            lines.append(a)\n        ax2.vlines(lines, 0, ymax, \"red\", linestyles='dashed', alpha=0.2)\n    \n    ax2.legend(loc=(1.1, 0.8))\n    ax3.legend(loc=(1.1, 0.7))\n    \n    fig.tight_layout()\n    plt.show()","d04d7be8":"def plot_pre_list(bid_list, ylim=100, low=0, high=100, pos=79, alpha=False):\n    \n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    \n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        u = tmp['pressure'][pos]\n        if (u >= low) and (u <= high):  \n            ax1.plot(tmp['time_step'], tmp['pressure'], 'm-', alpha=a)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylabel('Pressure')\n    ax1.set_ylim(0,ylim)\n    #ax1.legend(loc=(1.1, 0.8))\n    plt.show()\n","33c1a03f":"def plot_double_pre_list(bid_list, max_plots=False, ylim=100, alpha=False):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n       \n    title_str = f'time - u_in'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('u_in')\n    ax1.set_xlabel('Timestep')\n\n    ax1.set_ylim(0, ylim)\n   \n    ##############################\n    ax2.set_ylabel('Pressure')\n    ax2.set_xlabel('Timestep')\n    \n    title_str = f'time - pressure'\n    ax2.set_title(title_str)\n\n    ax2.set_ylim(0, ylim)\n\n    ##############################\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    if not max_plots:\n        max_plots = len(bid_list)\n        \n    for bid in tqdm(bid_list[:max_plots]):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in', alpha=a)\n        ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure', alpha=a)\n    \n    fig.tight_layout()\n    plt.show()","4e016940":"def plot_double_pre_list(bid_list, max_plots=False, ylim=100, alpha=False):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n       \n    title_str = f'time - u_in'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('u_in')\n    ax1.set_xlabel('Timestep')\n\n    ax1.set_ylim(0, ylim)\n   \n    ##############################\n    ax2.set_ylabel('Pressure')\n    ax2.set_xlabel('Timestep')\n    \n    title_str = f'time - pressure'\n    ax2.set_title(title_str)\n\n    ax2.set_ylim(0, ylim)\n\n    ##############################\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    if not max_plots:\n        max_plots = len(bid_list)\n        \n    for bid in tqdm(bid_list[:max_plots]):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in', alpha=a)\n        ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure', alpha=a)\n    \n    fig.tight_layout()\n    plt.show()","25059804":"def plot_double_area_bid(bid):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    title_str = f'Area'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('Area')\n    ax1.set_xlabel('Timestep')\n\n    ymax = 100\n    ax1.set_ylim(0, ymax)\n\n    ax1.plot(tmp['time_step'], tmp['area'],  'r-', label='area')\n    #ax1.plot(tmp['time_step'], tmp['area2'], 'g-', label='area2')\n\n    ##############################\n    ax3 = ax2.twinx()\n\n    ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax2.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax3.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax2.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['diff_mean'][0]\n    std = tmp['diff_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    ax2.set_title(title_str)\n\n    ymax = 100\n    ax2.set_ylim(0, ymax)\n    \n    ax2.legend(loc=(1.1, 0.8))\n    ax3.legend(loc=(1.1, 0.7))\n    \n    fig.tight_layout()\n    plt.show()","52af96cb":"def plot_bid_stats(list, indiv=3, df=last_df, max_plots=False, no_uin=False,\n                   alpha=False, time_delta=False, col1='', col2=''):\n    tmpdf= df[df['breath_id'].isin(list)]\n    bid_list = tmpdf['breath_id']\n    print('Number of plots:', len(bid_list))\n    \n    if indiv:\n        for bid in bid_list[:indiv]: # \u6700\u59273\u500b\u3001\u500b\u5225\u8868\u793a\n            if time_delta:\n                plot_double_bid(bid, time_delta=True, col1=col1, col2=col2)\n            else:\n                plot_bid(bid, col1=col1, col2=col2)\n\n    #plt.hist(tmpdf['R_C'], bins=17) # \u68d2\u30b0\u30e9\u30d5\u306e\u9806\u756a\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3067\u898b\u306b\u304f\u3044\n    sns.countplot(x=\"R_C\", data=tmpdf, order=RCorder)\n    plt.show()\n    \n    if not no_uin:\n        if not max_plots:\n            max_plots = len(bid_list)\n            print(f'Number of plots: {max_plots}')\n        else:\n            print(f'Number of plots: {max_plots}\/{len(bid_list)}')\n        plot_uin_list(bid_list[:max_plots], alpha=alpha)","276102d4":"print('The main mode:')\nplot_bid_stats(main_df['breath_id'], indiv=0, no_uin=True)\nplot_double_pre_list(main_df['breath_id'][:1000])\nprint('Other than the main mode:')\nplot_bid_stats(nomain_df['breath_id'], indiv=0, no_uin=True)\nplot_double_pre_list(nomain_df['breath_id'][:1000])","058ab8af":"plt.hist(last_df['diff_vib'], bins=100)\nplt.title(\"diff_vib global distribution\")\nplt.show()","1c390ac7":"# The main mode and ohters\nfig = plt.figure(figsize = (12, 4))\nax1 = fig.add_subplot(1, 2, 1)\nax2 = fig.add_subplot(1, 2, 2)\n\nax1.hist(main_df['diff_vib'], bins=100)\nax1.set_title('The main mode')\n\nax2.hist(nomain_df['diff_vib'], bins=100)\nax2.set_title('Other than the main mode')\n\nplt.show()","e8cd7a89":"plot_bid_stats(nomain_df['breath_id'], indiv=False, max_plots=1000)","b6fa74a3":"plot_double_pre_list(nomain_df['breath_id'][:1000], ylim=40)","f5efbb83":"def close_up_bid_list(bid_list, xmin=0, xmax=2.8, ymin=0, ymax=100):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', alpha=0.01)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylabel('u_in')\n    ax1.set_xlim(xmin, xmax)\n    ax1.set_ylim(ymin, ymax)\n    plt.show()","fec67d3b":"close_up_bid_list(nomain_df['breath_id'][:1000], ymin=0, ymax=7, xmin=2.55, xmax=2.7)","4ec86b95":"ymax=10\nplt.hist(nomain_df['time_end'], bins=100)\nplt.ylim(0,ymax)\nplt.vlines([2.65], 0, ymax, \"red\", linestyles='dashed')\nplt.show()","8ae5ae22":"df=nomain_df\nnomain_u265=df[df['time_end']>2.65]  # upper 2.65\nnomain_l265=df[df['time_end']<=2.65] # lower 2.65","bb3d3c26":"df=nomain_u265\nprint('No main mode, time_end > 2.65:', len(df))\nplot_double_pre_list(df['breath_id'][:1000], ylim=40)\n\ndf=nomain_l265\nprint('No main mode, time_end <= 2.65:', len(df))\nplot_double_pre_list(df['breath_id'][:1000])","b4266031":"plt.hist(nomain_u265['diff_vib'], bins=10, label='time end > 2.65', alpha=0.5)\nplt.hist(nomain_l265['diff_vib'], bins=100, label='time end =< 2.65', alpha=0.5)\nplt.title('Other than the Main mode: uin diff vibration')\nplt.legend()\nplt.show()","421a2ace":"df=nomain_u265\nprint('No main mode, time_end > 2.65:', len(df))\nplot_double_pre_list(df['breath_id'][:1000], ylim=40)","6e850e25":"df=nomain_u265\nplt.hist(df['time_uout1'])\nplt.show()","1bc288a8":"df=nomain_u265\ndf2=df[df['time_uout1']<=1]\nprint('No main mode, time_end > 2.65 & time_uout1 <= 1:', len(df2))\nplot_double_pre_list(df2['breath_id'][:1000], ylim=40)","efcd017f":"df=nomain_u265\ndf2=df[df['time_uout1'] > 1]\nprint('No main mode, time_end > 2.65 & time_uout1 > 1:', len(df2))\nplot_double_pre_list(df2['breath_id'][:1000], ylim=40)","148165e3":"ymax=18\nplt.figure(figsize=(12,4))\nplt.hist(nomain_u265['u_in_mean'], bins=500)\nlines = [1, 1.9, 2.7, 3.6, 4.6, 5.7]\nplt.ylim(0,ymax)\nplt.vlines(lines, 0, ymax, \"red\", linestyles='dashed')\nplt.title('Other than main mode, time_end > 2.65, histgram of u_in_mean')\nplt.show()","d7a69b77":"df=nomain_u265\ndf2=df[(df['u_in_mean']>=1)&(df['u_in_mean']<1.9)]\nplot_double_pre_list(df2['breath_id'], ylim=40)","79683a7b":"df=nomain_u265\ndf2=df[(df['u_in_mean']>=1.9)&(df['u_in_mean']<2.7)]\nplot_double_pre_list(df2['breath_id'], ylim=40)","7c52e5f3":"df=nomain_u265\ndf2=df[(df['u_in_mean']>=2.7)&(df['u_in_mean']<3.6)]\nplot_double_pre_list(df2['breath_id'], ylim=40)","1cb0d2a5":"df=nomain_u265\ndf2=df[(df['u_in_mean']>=3.6)&(df['u_in_mean']<4.6)]\nplot_double_pre_list(df2['breath_id'], ylim=40)","c0a8cf89":"df=nomain_u265\ndf2=df[(df['u_in_mean']>=4.6)&(df['u_in_mean']<5.7)]\nplot_double_pre_list(df2['breath_id'], ylim=40)","58d568eb":"df=nomain_u265\ndf2=df[(df['u_in_mean']>=5.7)&(df['u_in_mean']<8.0)]\nplot_double_pre_list(df2['breath_id'], ylim=40)","5c79316a":"df=nomain_l265\nprint(len(nomain_l265))\nplot_double_pre_list(df['breath_id'][:1000])","948f90da":"plt.hist(nomain_l265['u_in_uout1'], bins=100)\nplt.title('Other than main mode, time_end <= 2.65, histgram of u_in at u_out = 1')\nplt.show()","20ed370f":"# out1 \u3067\u306e uin \u304c1\u304b0\u304b\u3067\u5206\u96e2\nnomain_l265_u1u0 = nomain_l265[nomain_l265['u_in_uout1']==0]\nnomain_l265_u1un = nomain_l265[nomain_l265['u_in_uout1']!=0]","59e714ba":"df=nomain_l265_u1u0 \nprint(len(df))\nplot_double_pre_list(df['breath_id'][:1000])","6d689885":"plt.hist(nomain_l265_u1u0['diff_vib'], bins=100)\nplt.vlines([80], 0, 110, \"red\", linestyles='dashed')\nplt.title('histgram of diff_vib')\nplt.show()","98cbe567":"df=nomain_l265_u1u0\nnomain_l265_u1u0vl80 = df[df['diff_vib']<=80]\nplot_double_pre_list(nomain_l265_u1u0vl80['breath_id'])","15fe74e9":"df=nomain_l265_u1u0vl80\nplt.figure(figsize=(12,4))\nplt.title(f'u_in_half_mean: Non main mode, time_end <= 2.65, u_in==0@uout1, vib<=80')\nplt.hist(df['u_in_mean'], bins=100)\nplt.show()","b333f497":"df=nomain_l265_u1u0\nnomain_l265_u1u0vu80 = df[df['diff_vib']>80]\nplot_double_pre_list(nomain_l265_u1u0vu80['breath_id'])","0b00796d":"df=nomain_l265_u1u0vu80\nplt.figure(figsize=(12,4))\nplt.title(f'u_in_half_mean: Non main mode, time_end <= 2.65, u_in==0@uout1, vib>80')\nplt.hist(df['u_in_half_mean'], bins=100)\nplt.show()","6f56ca84":"df=nomain_l265_u1u0\nnomain_l265_u1u0vu80 = df[df['diff_vib']>80]\nplot_double_pre_list(nomain_l265_u1u0vu80['breath_id'])","0b49deef":"df=nomain_l265_u1u0vu80\nplt.figure(figsize=(12,4))\nplt.title(f'u_in_half_mean: Non main mode, time_end <= 2.65, u_in==0@uout1, vib>80')\nplt.hist(df['u_in_half_mean'], bins=100)\nplt.show()","6094b520":"df=nomain_l265_u1un \nprint(len(df))\nplot_double_pre_list(df['breath_id'][:1000])","4ab7f9f1":"df=nomain_l265_u1un\nplt.hist(df['u_in_max'], bins=100)\nplt.vlines([30], 0, 110, \"red\", linestyles='dashed')\nplt.show()","7510c12e":"df=nomain_l265_u1un\ndf = df[df['u_in_max']>30]\nplot_double_pre_list(df['breath_id'])","737c2081":"plt.figure(figsize=(12,4))\nplt.title(f'u_in_half_mean: Non main mode, time_end <= 2.65, u_in!=0@uout1, u_in_max > 30: histgram of u_in_half_mean')\nplt.hist(df['u_in_half_mean'], bins=100)\nplt.show()","e6600c9c":"df=nomain_l265_u1un\ndf = df[df['u_in_max']<=30]\nplot_double_pre_list(df['breath_id'])","2f3d0302":"plt.figure(figsize=(12,4))\nplt.title(f'u_in_half_mean: Non main mode, time_end <= 2.65, u_in!=0@uout1, uin_max > 30: histgram of u_in_half_mean')\nplt.hist(df['u_in_half_mean'], bins=100)\nplt.show()","1535d222":"df=nomain_l265_u1un\ndf = df[df['u_in_max']<=30]\nclose_up_bid_list(df['breath_id'], xmax=0.5, ymax=30)","8b597c72":"df=nomain_l265_u1un\ndf = df[df['u_in_max']<=30]\nplt.hist(df['diff_vib'], bins=50)\nplt.vlines([50], 0, 175, \"red\", linestyles='dashed')\nplt.show()","5ae16611":"df=nomain_l265_u1un\ndf = df[df['u_in_max']<=30]\ndf = df[df['diff_vib']<=50]\nplot_double_pre_list(df['breath_id'], ylim=45)","e5568509":"close_up_bid_list(df['breath_id'], xmax=0.5, ymax=30)","7779b226":"df=nomain_l265_u1un\ndf = df[df['u_in_max']<=30]\ndf = df[df['diff_vib']>=50]\nplot_double_pre_list(df['breath_id'], ylim=45)","891e87b3":"close_up_bid_list(df['breath_id'], xmax=0.5, ymax=30)","c02736fa":"# Other than the main mode, time_end <= 2.65","666cd819":"## Other than main mode, time_end < 2.65s, u_in!=0 in out1","420b3b85":"**There are many vibrating charts, so take a look at the histogram of diff_vib.**","758b0698":"In \"other than main mode\", there are only R = 50 and C = 10.","ed693990":"**If you look closely, there are two vertical lines around 1 second of pressure. Looking at the histogram of the time when u_out becomes 1, it is clearly divided into two.**","7ba1f7a2":"**\"diff_vib\" also helps classify modes.**","28558e70":"# \"u_in\" diff vibration (Number of sign inversions)","ea4d1229":"**Let's classify by whether'time_end'is greater than 2.65 seconds.**","2bda81a5":"**Let's divide it into two by 80.**","a25404d8":"**It is divided into 2000 or more 0s and others.**","d45bbc57":"# Distribution of diff_vib: \"u_in\" diff vibration (Number of sign inversions)","320bbbb2":"# The Main mode and others","8d15d2fd":"No more modes can be divided.","06e8277b":"**This is overview.**","1bd4af5f":"**You can clearly see the difference between time_end 2.65 and above and the following modes even with \"diff_vib\"..**","ab29597c":"# Functions for plot","db7c54e6":"u_in_half_mean looks better than u_in_mean.","cd452371":"No mode.","bf1b9787":"Vibration also seems to have a mode","6017c7a2":"# Recreate each DataFrame when all the features are available","85633d96":"**\"time_end> 2.65\" is the mode that can be most clearly classified by \"u_in_mean\".**","ad433f26":"**This is overview.**","8783d906":"# Other than the main mode, time_end > 2.65","87604471":"## Other than main mode, time_end < 2.65s, u_in==0 at u_out 1","3a8db0a0":"**There seems to be a vibrating chart and others. Let's look at the histogram.**","bbe0e14e":"The vibration of \"u_in diff\" in \"other than main mode\" seems to have two modes. It is divided into time_end> 2.65 and time_end <= 2.65.","ef58eda5":"**Looking at the distribution of the \"u_in\" chart, it seems that it can be classified into two types: a chart that vibrates greatly and a chart that exists only below 15. Let's zoom in.**","78d96b96":"**Let's divide u_in_max by 30.**","9975fdc6":"### u_in_max > 30","2c00435d":"### diff_vib <= 80 or diff_vib > 80","eb430d4f":"According to [notebook of mine](https:\/\/www.kaggle.com\/marutama\/eda-about-u-in), u_in has a main mode that accounts for 70018\/75450=92%. It is 0 for 1 to 1.5 seconds and ends near 5 (4.965-4.995).\n\n**Shows an overview of the two modes. Both u_in and pressue have distinctly different charts.**","e3de26f3":"**If you are interested in this notebook, please check [EDA about Pressure with Colored Charts](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-with-colored-charts) out as well.It will be the latest and most beautiful update.**\n\n**It seems that Part 2 is not often seen, so I will add a description. Although it is \"other than the main mode\" that does not show 8% of the total, it is an interesting mode that can be classified very clearly.**\n\nThis is Part 2 of the series notebook, Pressure non-main mode EDA. Part 1 is [here](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-1), dealing with the main mo.\n\nIt's long, so I'll write an overview.\n- I made the conditions based on the chart shape of u_in and puressure with the feeling that I became AI. I hope it will be a hint for Feature engineering.\n- Feature addition has been sped up by avoiding groupby as much as possible.\n- I also made the vibration coefficient of u_in. Take the diff of u_in and count how many times the sign of the diff is inverted. It's quite convenient.\n- Part 2 is specialized for other than main mode. It accounts for 8% of the total.\n- The u_in, pressure graph has a layered pattern more clearly than in the main mode.\n- Since R_C in non-main mode is only 50_10, classification by R_C cannot be used.\n- As a layered feature point of Pressure, the Pressure value when u_out becomes 1 is referred to. If you make a histogram, multiple peaks will appear neatly.\n- Strangely, you can clearly distinguish between those with a time_step end time of less than 2.65 seconds and those with a longer time_step. The graph shape is significantly different.\n- In the pattern of time_end> 2.65, it seems that it is possible to predict the number of layers by clearly using the mean value of u_in.\n\nSee also [Part 1](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-1)!\n\nI think there are many places where the explanation is insufficient. Please comment if you request.\n\nThis notebook is a continuation of:\n- [EDA about time_step and u_out](https:\/\/www.kaggle.com\/marutama\/eda-about-time-step-and-u-out).\n- [EDA about u_in](https:\/\/www.kaggle.com\/marutama\/eda-about-u-in)\n\nIf you find it useful, please upvote it as well.\u3002\n\nChart Plot referred to [Ventilator Pressure Prediction: EDA, FE and models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models). \n\nFor the R_C distribution part, I referred to [Ventilator Pressure simple EDA](https:\/\/www.kaggle.com\/currypurin\/ventilator-pressure-simple-eda).\n\nThank you very much.\n\nThe importance of the features introduced in the \"EDA about\" series below:\n- [EDA about: LSTM Feature Importance](https:\/\/www.kaggle.com\/marutama\/eda-about-lstm-feature-importance)\n\nAnd [finetune of Tensorflow Bi-LSTM EDA about](https:\/\/www.kaggle.com\/marutama\/finetune-of-tensorflow-bi-lstm-eda-about) is for Modeling.\n","82dd3a9e":"Is it somehow successful?","ac7e4bbe":"Layered patterns can be seen in both the u_in graph and the pressure graph.\n**Let's zoom in on the lower right corner of \"u_in\".**","7de0ede1":"**However, it seems that the shape of the chart does not change much even with this. I'll leave it here.**","9faa4bde":"# Add features","d4a3e0fd":"**This is an overview of \"time_end <= 2.65\". Pressure has a clearer layered pattern than u_in.**","41707478":"**This is the overview of \"time_end> 2.65\". This is the overview of \"time_end> 2.65\". The 6 layered pattern on the chart is impressive.**","ef16c9e6":"Well, it's still difficult. Let's separate it further.\n\nZoom in.","041a6d2d":"**Let's take a closer look at \"time_end> 2.65\". If you look at the histogram distribution of \"u_in_mean\", you can see 6 mountains.**","b46200a7":"**Interestingly, it seems that we were able to separate clearly different charts. I don't know why ...**","a94d209f":"**It seems to be divided into a triangular wave chart that ends around 2.64 seconds and a straight chart that ends around 2.67 seconds. Shows the histogram.**","4d80f7d7":"When u_out1 becomes 1,'u_in' is divided into 0 and other 2 modes.","06d49989":"This also seems to be better for u_in_half_mean than u_in_mean","b0e8d405":"**From here, we will focus on \"other than main mode\". I don't know why, but R_C is only 50_10.**","19069217":"# Load CSV","0374d0ee":"Groupby is slow, so I don't use it as much as possible.","fcf33e95":"# EDA of other than the main mode","a75f9f0c":"**It seems to be divided into a gentle chart with u_in_max of 30 or less and a chart with more vibration. Let's take a look at the histogram of u_in_max.**","dc7acdd6":"### u_in_max <= 30"}}