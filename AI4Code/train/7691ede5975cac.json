{"cell_type":{"f916a384":"code","7341b08a":"code","dfb074f0":"code","18a02913":"code","8b0cdddc":"code","48467809":"code","514cb287":"code","7d142872":"code","aecaf1f5":"code","3a2f4d8b":"code","f7e7b4b3":"code","106f1bdc":"code","3112d998":"code","f3d71942":"code","b7c44eea":"code","4231cb17":"code","6910f3b6":"code","1a26743c":"code","9e884bde":"code","6c20c531":"code","e394b43b":"code","e8e20526":"code","d1a93cc3":"code","bdb7ad2b":"code","55664646":"code","7c6e9a5c":"code","ecc7ce18":"code","ffa339db":"code","ec299655":"code","bed5615c":"code","602b3360":"code","e0871f1e":"code","63efe3b2":"code","76d5b09e":"code","02757818":"code","a582c308":"code","7c09cec7":"code","320b8449":"code","e1def142":"code","7bbd6a51":"code","1fd3e90a":"code","c978a72c":"code","2999b621":"code","18400d8b":"code","7e957fc4":"code","c8d15ab5":"code","a5f50d0e":"code","508e0a30":"code","33bef60b":"code","0a07abb3":"markdown","4f844cb3":"markdown","869e8a3e":"markdown","9cc37388":"markdown","a2f38c91":"markdown","e3307018":"markdown","27d86ae8":"markdown","fd040dd4":"markdown","0aa062ae":"markdown","65428885":"markdown","bb7ff258":"markdown","703f604d":"markdown","4e0800ba":"markdown","c202ffcc":"markdown","f96daaf3":"markdown","bf453ff1":"markdown","c95d888a":"markdown","4db79894":"markdown","c21376ab":"markdown","de77a917":"markdown","9d629a54":"markdown","dcab384f":"markdown","0e6e83b4":"markdown","eb167abc":"markdown"},"source":{"f916a384":"# Importing the necessary Pandas library\n\nimport pandas as pd\n\n\n# Setting the option to read all the columns\n\npd.set_option('display.max_columns', 150)","7341b08a":"# Reading the csv file\n\napp_data = pd.read_csv(\"..\/input\/credit-eda-case-study-data\/application_data.csv\")","dfb074f0":"# Reading the first five rows\n\napp_data.head()","18a02913":"# Reading the number of rows and columns\n\napp_data.shape","8b0cdddc":"# Reading the names of the column\n\napp_data.columns","48467809":"# Getting the information about the dataframe\n\napp_data.info()","514cb287":"# Finding the percentage of missing values for all the columns\n\n(100 * app_data.isnull().sum() \/ len(app_data)).round(2)","7d142872":"# Removing the columns with high missing percentage; 50% in this case\n\nnew_app_data = app_data.loc[:, app_data.isna().mean() < .5]\nnew_app_data.shape","aecaf1f5":"# Getting the dataframe for columns having less than 13% and some missing values\n\nlesser_missing_app_data = new_app_data.loc[:, (new_app_data.isna().mean() > 0) & (new_app_data.isna().mean() <= 0.13)]\nlesser_missing_app_data.shape","3a2f4d8b":"# Getting the list of columns of the dataframe\n\nlesser_missing_app_data.columns","f7e7b4b3":"# Checking the missing values from for 'DAYS_LAST_PHONE_CHANGE'\n\ndays_last_phone_change_data = pd.isnull(lesser_missing_app_data.DAYS_LAST_PHONE_CHANGE) \n    \n# filtering and displaying data only with 'DAYS_LAST_PHONE_CHANGE' = NaN \n\nlesser_missing_app_data[days_last_phone_change_data].reset_index()","106f1bdc":"# Checking the missing values from for 'AMT_ANNUITY'\n\namt_annunity_data = pd.isnull(lesser_missing_app_data.AMT_ANNUITY) \n    \n# filtering and displaying data only with 'AMT_ANNUITY' = NaN \n\nlesser_missing_app_data[amt_annunity_data].reset_index()","3112d998":"# Checking the missing values from for 'AMT_ANNUITY'\n\namt_goods_price_data = pd.isnull(lesser_missing_app_data.AMT_GOODS_PRICE) \n    \n# filtering and displaying data only with 'AMT_GOODS_PRICE' = NaN \n\nlesser_missing_app_data[amt_goods_price_data].reset_index()","f3d71942":"# Checking the missing values from for 'NAME_TYPE_SUITE'\n\nname_type_suite_data = pd.isnull(lesser_missing_app_data.NAME_TYPE_SUITE) \n    \n# filtering and displaying data only with 'NAME_TYPE_SUITE' = NaN \n\nlesser_missing_app_data[name_type_suite_data].reset_index()","b7c44eea":"# Checking the missing values from for 'CNT_FAM_MEMBERS'\n\ncnt_fam_members_data = pd.isnull(lesser_missing_app_data.CNT_FAM_MEMBERS) \n    \n# filtering and displaying data only with 'CNT_FAM_MEMBERS' = NaN \n\nlesser_missing_app_data[cnt_fam_members_data].reset_index()","4231cb17":"new_app_data.info()","6910f3b6":"# Warnings are made silent\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","1a26743c":"# Taking the absolute values of 'DAYS_BIRTH' and creating a new column\n\nnew_app_data[\"DAYS_BIRTH_ABS\"] = abs(new_app_data.DAYS_BIRTH)\nnew_app_data.head()","9e884bde":"# Taking the absolute values of 'DAYS_EMPLOYED' and creating a new column\n\nnew_app_data[\"DAYS_EMPLOYED_ABS\"] = abs(new_app_data.DAYS_EMPLOYED)\nnew_app_data.head()","6c20c531":"# Taking the absolute values of 'DAYS_ID_PUBLISH' and creating a new column\n\nnew_app_data[\"DAYS_ID_PUBLISH_ABS\"] = abs(new_app_data.DAYS_ID_PUBLISH)\nnew_app_data.head()","e394b43b":"# Converting the 'DAYS_REGISTRATION' to int, taking absolute values and creating a new column\n\nnew_app_data[\"DAYS_REGISTRATION_ABS\"] = abs(new_app_data.DAYS_REGISTRATION.astype(int))\nnew_app_data.head()","e8e20526":"# Converting the values of 'CNT_FAM_MEMBERS' to int and creating a new column\n\nnew_app_data[\"CNT_FAM_MEMBERS_ABS\"] = new_app_data.CNT_FAM_MEMBERS\nnew_app_data.CNT_FAM_MEMBERS_ABS.fillna(0, inplace=True)\nnew_app_data.CNT_FAM_MEMBERS_ABS = new_app_data.CNT_FAM_MEMBERS_ABS.astype(int)\nnew_app_data.head()","d1a93cc3":"# Seaborn library will be used for graphical study\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","bdb7ad2b":"# Plotting graphs\n\nplt.figure(figsize=(15,12))\n\nplt.subplot(3, 2, 1)\nplt.title(\"Date of Birth - Days\")\nsns.boxplot(new_app_data.DAYS_BIRTH_ABS).set(xlabel=None)\n\nplt.subplot(3, 2 , 2)\nplt.title(\"Employment - Days\")\nsns.boxplot(new_app_data.DAYS_EMPLOYED_ABS).set(xlabel=None)\n\nplt.subplot(3, 2, 3)\nplt.title(\"Document Change - Days\")\nsns.boxplot(new_app_data.DAYS_ID_PUBLISH_ABS).set(xlabel=None)\n\nplt.subplot(3, 2, 4)\nplt.title(\"Registration Change - Days\")\nsns.boxplot(new_app_data.DAYS_REGISTRATION_ABS).set(xlabel=None)\n\nplt.subplot(3, 2 , 5)\nplt.title(\"Family Members - Count\")\nsns.boxplot(new_app_data.CNT_FAM_MEMBERS_ABS).set(xlabel=None)\n\nplt.show()","55664646":"# Analysing the data range for birth days\n\nnew_app_data.DAYS_BIRTH_ABS.describe()","7c6e9a5c":"# Analysing the data range for family members count\n\nnew_app_data.CNT_FAM_MEMBERS_ABS.describe()","ecc7ce18":"# Categorizing(binning) the request on the basis of days of birth and family members count\n\nnew_app_data['DAYS_BIRTH_BINS'] = pd.cut(new_app_data.DAYS_BIRTH_ABS, \n                                         bins = [5000, 9125, 14600, 21900, 35000], \n                                         labels = ['YOUNG', 'MILLENIALS', 'MIDDLE-AGED', 'OLD'])\nnew_app_data['CNT_FAM_MEMBERS_BINS'] = pd.cut(new_app_data.CNT_FAM_MEMBERS_ABS, \n                                              bins = [0, 1, 3, 25] , \n                                              labels= ['NO_DEPENDENTS', 'NORMAL_DEPENDENTS', 'MANY_DEPENDENTS'])\nnew_app_data[[\"SK_ID_CURR\", \"DAYS_BIRTH_BINS\", \"CNT_FAM_MEMBERS_BINS\"]].head()","ffa339db":"# Calculating the percentage of imbalance in the data\n\nround(100 * new_app_data.TARGET.value_counts(normalize=True), 2)","ec299655":"# Getting the dataset of people who paid their loan\n\nable_to_payback_loan_data = new_app_data[new_app_data.TARGET == 0]\nable_to_payback_loan_data.reset_index().head()","bed5615c":"# Getting the dataset of people who could not paid their loan\n\nnot_able_to_payback_loan_data = new_app_data[new_app_data.TARGET == 1]\nnot_able_to_payback_loan_data.reset_index().head()","602b3360":"# Analyzing continuos variables i.e. \"CNT_FAM_MEMBERS\" & \"CNT_CHILDREN\"\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1, 2, 1)\nplt.title(\"Family Members Count\")\nsns.distplot(able_to_payback_loan_data.CNT_FAM_MEMBERS_ABS, hist = False, label = \"Could Pay\")\nsns.distplot(not_able_to_payback_loan_data.CNT_FAM_MEMBERS_ABS, hist = False, label = \"Had Difficulties\")\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.title(\"Children Count\")\nsns.distplot(able_to_payback_loan_data.CNT_CHILDREN, hist = False, label = \"Could Pay\")\nsns.distplot(not_able_to_payback_loan_data.CNT_CHILDREN, hist = False, label = \"Had Difficulties\")\nplt.legend()\n\nplt.show()","e0871f1e":"# Analyzing categorical variables i.e. \"NAME_INCOME_TYPE\" & \"CODE_GENDER\"\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nplt.title(\"Gender - Could Pay\")\nsns.countplot(able_to_payback_loan_data.CODE_GENDER).set(xlabel=None)\n\nplt.subplot(2, 2, 2)\nplt.title(\"Gender - Had Difficulties\")\nsns.countplot(not_able_to_payback_loan_data.CODE_GENDER).set(xlabel=None)\n\nplt.subplot(2, 2, 3)\nplt.xticks(rotation=90)\nplt.title(\"Income Type - Could Pay\")\nsns.countplot(able_to_payback_loan_data.NAME_INCOME_TYPE).set(xlabel=None)\n\nplt.subplot(2, 2, 4)\nplt.xticks(rotation=90)\nplt.title(\"Income Type - Had Difficulties\")\nsns.countplot(not_able_to_payback_loan_data.NAME_INCOME_TYPE).set(xlabel=None)\n\nplt.show()","63efe3b2":"# Analyzing a categorical variable against a continous variable \n\nplt.figure(figsize = (20,4))\nplt.subplot(1,2,1)\nplt.ticklabel_format(style='plain')\nplt.title(\"Able to Pay Loan\")\nsns.scatterplot(x = 'CNT_FAM_MEMBERS_ABS', y = 'AMT_INCOME_TOTAL', data = able_to_payback_loan_data)\n\n\nplt.subplot(1,2,2)\nplt.ticklabel_format(style='plain')\nplt.title(\"Having Paying Difficulties\")\nsns.scatterplot(x = 'CNT_FAM_MEMBERS_ABS', y = 'AMT_INCOME_TOTAL', data = not_able_to_payback_loan_data)\n\nplt.show()","76d5b09e":"# Numpy library will be used for correlation analysis\n\nimport numpy as np","02757818":"# Finding correlation of numerical columns for TARGET = 0\n\nable_to_payback_loan_corr = able_to_payback_loan_data[[\"DAYS_BIRTH_ABS\", \"DAYS_EMPLOYED_ABS\" ,\"CNT_FAM_MEMBERS_ABS\", \"CNT_CHILDREN\", \"AMT_INCOME_TOTAL\"]].corr()\nable_to_payback_loan_corr.where(np.triu(np.ones(able_to_payback_loan_corr.shape), k=1).astype(np.bool))","a582c308":"sns.heatmap(able_to_payback_loan_corr, cmap=\"Blues\")\n\nplt.show()","7c09cec7":"# Finding correlation of numerical columns for TARGET = 1\n\nnot_able_to_payback_loan_corr = not_able_to_payback_loan_data[[\"DAYS_BIRTH_ABS\", \"DAYS_EMPLOYED_ABS\" ,\"CNT_FAM_MEMBERS_ABS\", \"CNT_CHILDREN\", \"AMT_INCOME_TOTAL\"]].corr()\nnot_able_to_payback_loan_corr.where(np.triu(np.ones(not_able_to_payback_loan_corr.shape), k=1).astype(np.bool))","320b8449":"sns.heatmap(not_able_to_payback_loan_corr, cmap=\"Oranges\")\n\nplt.show()","e1def142":"# Reading the csv file\n\nprev_app_data = pd.read_csv(\"..\/input\/credit-eda-case-study-data\/previous_application.csv\")","7bbd6a51":"# Reading the first five rows\n\nprev_app_data.head()","1fd3e90a":"# Reading the number of rows and columns\n\nprev_app_data.shape","c978a72c":"# Reading the names of the column\n\nprev_app_data.columns","2999b621":"# Getting the information about the dataframe\n\nprev_app_data.info()","18400d8b":"# Merged the previous_application_data with the application_data\n\ntotal_loan_count = prev_app_data.groupby([\"SK_ID_CURR\"]).agg(\"size\").reset_index(name='Total Loan')\ncontract_type_loan_count = prev_app_data.groupby('SK_ID_CURR')['NAME_CONTRACT_TYPE'].value_counts().unstack().fillna(0).astype(int)\ncontract_status_loan_count = prev_app_data.groupby('SK_ID_CURR')['NAME_CONTRACT_STATUS'].value_counts().unstack().fillna(0).astype(int)\n\ntotal_loan_count = total_loan_count.merge(contract_type_loan_count, left_on=\"SK_ID_CURR\", right_on=\"SK_ID_CURR\", how=\"left\")\ntotal_loan_count = total_loan_count.merge(contract_status_loan_count, left_on=\"SK_ID_CURR\", right_on=\"SK_ID_CURR\", how=\"left\")\n\nnew_app_data = new_app_data.merge(total_loan_count, left_on=\"SK_ID_CURR\", right_on=\"SK_ID_CURR\", how=\"left\")\n\nnew_app_data.head()","7e957fc4":"# Describing Univariate Analysis for continuous variables \n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1, 2, 1)\nplt.ticklabel_format(style='plain')\nplt.title(\"Count of Applications on Amount\")\nsns.distplot(prev_app_data.AMT_APPLICATION, hist = False).set(xlabel=None)\n\nplt.subplot(1, 2, 2)\nplt.title(\"Probability of Start of the Day\")\nsns.distplot(prev_app_data.HOUR_APPR_PROCESS_START, hist = False).set(xlabel=None)\n\nplt.show()","c8d15ab5":"# Describing Univariate Analysis for categorical variables \n\nplt.figure(figsize = (20,4))\n\nplt.subplot(1,2,1)\nplt.ticklabel_format(style='plain')\nplt.title(\"Count of Application on Weekdays\")\nsns.countplot(prev_app_data.WEEKDAY_APPR_PROCESS_START).set(xlabel=None)\n\nplt.subplot(1,2,2)\nplt.title(\"Count of Application for Contract Types\")\nsns.countplot(prev_app_data.NAME_CONTRACT_TYPE).set(xlabel=None)\n\nplt.show()","a5f50d0e":"# Describing Bivariate Analysis for a categorical & a continous variables\n\nplt.figure(figsize = (20,5))\nplt.subplot(1,2,1)\nplt.ticklabel_format(style='plain')\nplt.title(\"Previous Credit vs Weekdays\")\nsns.boxplot(x = 'WEEKDAY_APPR_PROCESS_START', y = 'CNT_PAYMENT', data = prev_app_data).set(xlabel=None)\n\nplt.subplot(1,2,2)\nplt.title(\"Start Hour of the Day vs Contract Staus\")\nsns.boxplot(x  = 'NAME_CONTRACT_STATUS', y = 'HOUR_APPR_PROCESS_START', data = prev_app_data).set(xlabel=None)\n\nplt.show()","508e0a30":"# Describing Bivariate Analysis for two categorical variables \n\nplt.figure(figsize = (15,6))\nplt.subplot(1,2,1)\nplt.title(\"Weekdays & Contract Status vs Count\")\nsns.countplot('WEEKDAY_APPR_PROCESS_START', hue = 'NAME_CONTRACT_STATUS', data = prev_app_data).set(xlabel=None)\n\n\nplt.subplot(1,2,2)\nplt.title(\"Weekdays & Contract Type vs Count\")\nsns.countplot('WEEKDAY_APPR_PROCESS_START', hue = 'NAME_CONTRACT_TYPE', data = prev_app_data).set(xlabel=None)\n\nplt.show()","33bef60b":"# Describing Bivariate Analysis for two continuous variables \n\nplt.figure(figsize = (15,4))\n\nplt.subplot(1,2,1)\nplt.ticklabel_format(style='plain')\nplt.title(\"Amount vs Start Hour of the day\")\nsns.scatterplot(x = 'HOUR_APPR_PROCESS_START', y = 'AMT_APPLICATION', data = prev_app_data).set(xlabel=None)\n\n\nplt.subplot(1,2,2)\nplt.ticklabel_format(style='plain')\nplt.title(\"Amount vs Decisioning Days\")\nsns.scatterplot(x =abs(prev_app_data['DAYS_DECISION']), y = 'AMT_APPLICATION', data = prev_app_data).set(xlabel=None)\n\nplt.show()","0a07abb3":"##### Creating a new column for each columns holding negative values","4f844cb3":"##### Binning of continuous variables","869e8a3e":"##### Trying to read the 'previous_application.csv' file and getting various information from the data.","9cc37388":"# Data Analysis - I\n\n##### Bifurcating the data on the basis of TARGET variable","a2f38c91":"##### Trying to run various functions on the dataframe to know the basic info ","e3307018":"##### Univariate Analysis","27d86ae8":"##### Merging the two dataframes","fd040dd4":"##### Checking the missing values of the dataframe","0aa062ae":"# Importing Libraries\n\n##### Importing the 'Pandas' library. The libraries will be imported as and when required.  ","65428885":"### Bivariate Analysis","bb7ff258":"##### Dividing the dataset","703f604d":"# Data Sourcing - II","4e0800ba":"# Data Sourcing - I\n\n##### Trying to read the 'application_data.csv' file and getting various information from the data.","c202ffcc":"##### Trying to run various functions on the dataframe to know the basic info","f96daaf3":"##### Importing seaborn library","bf453ff1":"##### Checking the outliers","c95d888a":"##### Checking the data type of all columns","4db79894":"##### Importing the 'Warnings' library.","c21376ab":"##### Finding correlation","de77a917":"##### Importing the numpy library","9d629a54":"# Data Cleaning - I\n\n##### Checking the quality of Data and missing values ","dcab384f":"##### Univariate Analysis","0e6e83b4":"# Conclusion\n\n\u2022\tFemales face more difficulties in paying the loans as compared to male\n<br>\n\u2022\tBusinessmen never face any difficulties in paying loans. So, they can be provided a greater number of loans in comparison to Working class which faces highest difficulties to pay the loan.\n<br>\n\u2022\tLoans of type \u2018Revolving Loans\u2019 can be put on focus as it is comparatively less popular.\n<br>\n\u2022\tLoans getting approved on \u2018Saturday\u2019 is significantly high compared to other weekdays.","eb167abc":"##### Bivariate Analysis"}}