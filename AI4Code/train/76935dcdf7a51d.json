{"cell_type":{"01299ea2":"code","0042386f":"code","e9bdfb19":"code","afff1881":"code","f3307144":"code","cc7c89d5":"code","5f63d1a8":"code","b454e3e1":"code","f1c62552":"code","2b4cb56c":"code","2a423eb9":"code","81722118":"code","6cd1bdb8":"code","d83ddc2f":"code","274b8a5f":"code","aeff4ff8":"code","37761da8":"code","c71383ad":"code","46d4912f":"code","4616d42e":"code","6b07a68d":"code","b397069e":"code","5bf6d7c9":"code","c796f8f1":"code","429288e2":"code","b3898c71":"code","587fe8c1":"code","91feb27f":"code","904168a1":"code","ecaa4af6":"code","af553495":"code","da23c906":"code","2dba0e2b":"code","969d6a62":"code","8eee2fbc":"code","3be39880":"code","6651d9f3":"code","f591050f":"code","7dfa561d":"markdown","92d4f7f7":"markdown","72c9d63e":"markdown","99743968":"markdown","1203ce84":"markdown","64e6e28c":"markdown","a3eda884":"markdown","cde54088":"markdown","3e052ea1":"markdown","054d91f3":"markdown"},"source":{"01299ea2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\n#libraries\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.metrics import r2_score\n","0042386f":"df_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsubmission=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","e9bdfb19":"df_train.head()","afff1881":"df_test.head()","f3307144":"submission.head()","cc7c89d5":"df_train=df_train.drop('Id',axis=1)","5f63d1a8":"{'train shape':df_train.shape,'test shape':df_test.shape}","b454e3e1":"np.unique(df_train.dtypes)","f1c62552":"df_train.loc[:,df_train.dtypes=='int64'].head()","2b4cb56c":"df_train.loc[:,(df_train.dtypes=='float64')].head()","2a423eb9":"df_train.loc[:,(df_train.dtypes=='O')].head()","81722118":"columna=[]\nn_missing=[]\nfor column in df_train.columns:\n    columna.append(column)\n    n_missing.append(df_train[column].isna().sum()\/len(df_train[column]))\nmissing=pd.DataFrame({'column':columna,'n_missing':n_missing}).sort_values('n_missing',ascending=False).head(20)\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"n_missing\", y=\"column\", data=missing,\n            label=\"missing\", color=\"b\")","6cd1bdb8":"columna=[]\nn_missing=[]\nfor column in df_test.columns:\n    columna.append(column)\n    n_missing.append(df_test[column].isna().sum()\/len(df_test[column]))\nmissing=pd.DataFrame({'column':columna,'n_missing':n_missing}).sort_values('n_missing',ascending=False).head(20)\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"n_missing\", y=\"column\", data=missing,\n            label=\"missing\", color=\"b\")","d83ddc2f":"for column in [\"PoolQC\",\"Alley\",\"Fence\",\"FireplaceQu\",\n               \"GarageType\",\"GarageCond\",\"GarageQual\",\n               \"GarageFinish\",\"BsmtQual\",\"BsmtCond\",\n               \"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\n               \"MiscFeature\",\"MasVnrType\"]:\n    df_train[column] = df_train[column].fillna(\"None\")\n    df_test[column] = df_test[column].fillna(\"None\")\n","274b8a5f":"{'shape train':df_train.shape,'shape test':df_test.shape}","aeff4ff8":"columna=[]\nn_missing=[]\nfor column in df_train.columns:\n    columna.append(column)\n    n_missing.append(df_train[column].isna().sum()\/len(df_train[column]))\nmissing1=pd.DataFrame({'column':columna,'n_missing':n_missing}).sort_values('n_missing',ascending=False).head(5)\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"n_missing\", y=\"column\", data=missing1,\n            label=\"missing\", color=\"b\")","37761da8":"from sklearn import preprocessing\nlabels=['ExterQual',\n'ExterCond',\n'BsmtQual',\n'BsmtCond',\n'BsmtExposure',\n'BsmtFinType1',\n'BsmtFinType2',\n'HeatingQC',\n'CentralAir',\n'KitchenQual',\n'Functional',\n'FireplaceQu',\n'GarageFinish',\n'GarageQual',\n'GarageCond',\n'PavedDrive',\n'PoolQC',\n'Fence']\n\nfor i in labels:\n    le = preprocessing.LabelEncoder()\n    df_train[i] = df_train[i].fillna(\"None\")\n    df_test[i] = df_test[i].fillna(\"None\")\n    le.fit(np.unique(np.concatenate([df_test[i].unique(),df_train[i].unique()])))\n    df_train[i]=le.transform(df_train[i])\n    df_test[i]=le.transform(df_test[i])","c71383ad":"df_test=pd.get_dummies(df_test, columns=df_train.loc[:,(df_train.dtypes=='O')].columns)\ndf_train=pd.get_dummies(df_train, columns=df_train.loc[:,(df_train.dtypes=='O')].columns)\nfor column in df_train.columns[~df_train.columns.isin(df_test.columns)]:\n    df_test[column]=0","46d4912f":"columna=[]\nn_missing=[]\nfor column in df_test.columns:\n    columna.append(column)\n    n_missing.append(df_test[column].isna().sum()\/len(df_test[column]))\nmissing2=pd.DataFrame({'column':columna,'n_missing':n_missing}).sort_values('n_missing',ascending=False).head(15)\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"n_missing\", y=\"column\", data=missing2,\n            label=\"missing\", color=\"b\")","4616d42e":"from sklearn.linear_model import LinearRegression","6b07a68d":"## train\ntarget_col1=missing1.column.values[[0,1,2]]\n\n## test\ntarget_col2=missing2.column.values[[0,1,2,3,4,5,6,7,8,9,10,11]]","b397069e":"for i in [0,1,2]:\n    X_train1=df_train.drop(target_col1,axis=1)\n    X_test1=X_train1[df_train[target_col1[i]].isna()]\n    X_train1=X_train1[~df_train[target_col1[i]].isna()]\n    y_train1=df_train[target_col1[i]][~df_train[target_col1[i]].isna()]\n    regr = LinearRegression()\n    regr.fit(X_train1, y_train1)\n    df_train.loc[df_train[target_col1[i]].isna(),target_col1[i]]=regr.predict(X_test1)","5bf6d7c9":"for i in range(11):\n    X_train2=df_test.drop(target_col2,axis=1)\n    X_test2=X_train2[df_test[target_col2[i]].isna()]\n    X_train2=X_train2[~df_test[target_col2[i]].isna()]\n    y_train2=df_test[target_col2[i]][~df_test[target_col2[i]].isna()]\n    X_test2.head()\n    regr =LinearRegression()\n    regr.fit(X_train2.drop('Id',axis=1), y_train2)\n    df_test.loc[df_test[target_col2[i]].isna(),target_col2[i]]=regr.predict(X_test2.drop('Id',axis=1))","c796f8f1":"df_test","429288e2":"X_train, X_test, y_train,test_id=df_train.drop(['SalePrice'], axis=1),df_test.drop(['Id','SalePrice'], axis=1),df_train[['SalePrice']],df_test[['Id']]","b3898c71":"X_train, X_val, y_train, y_val=train_test_split(\n    X_train,\n    y_train,\n    shuffle=True,\n    test_size=0.2,\n    random_state=41)","587fe8c1":"{'shape train':X_train.shape,'shape test':X_test.shape,'shape val':X_val.shape}","91feb27f":"mm_scaler = preprocessing.MinMaxScaler()\nX_train = pd.DataFrame(mm_scaler.fit_transform(X_train))\nX_val = pd.DataFrame(mm_scaler.transform(X_val))\nX_test = pd.DataFrame(mm_scaler.transform(X_test))","904168a1":"def root_mean_squared_log_error(y_valid, y_preds):\n    \"\"\"Calculate root mean squared error of log(y_true) and log(y_pred)\"\"\"\n    if len(y_preds)!=len(y_valid): return 'error_mismatch'\n    y_preds_new = [math.log(x) for x in y_preds]\n    y_valid_new = [math.log(x) for x in y_valid]\n    return mean_squared_error(y_valid_new, y_preds_new, squared=False)","ecaa4af6":"# Light Gradient Boosting Regressor\nlightgbm = LGBMRegressor(objective='regression', \n                       num_leaves=6,\n                       learning_rate=0.01, \n                       n_estimators=7000,\n                       max_bin=200, \n                       bagging_fraction=0.8,\n                       bagging_freq=4, \n                       bagging_seed=8,\n                       feature_fraction=0.2,\n                       feature_fraction_seed=8,\n                       min_sum_hessian_in_leaf = 11,\n                       verbose=-1,\n                       random_state=42)\n\n# Gradient Boosting Regressor\ngbr = GradientBoostingRegressor(n_estimators=6000,\n                                learning_rate=0.01,\n                                max_depth=4,\n                                max_features='sqrt',\n                                min_samples_leaf=15,\n                                min_samples_split=10,\n                                loss='huber',\n                                random_state=42)  \n\n# Random Forest Regressor\nrf = RandomForestRegressor(n_estimators=1200,\n                          max_depth=15,\n                          min_samples_split=5,\n                          min_samples_leaf=5,\n                          max_features=None,\n                          oob_score=True,\n                          random_state=42)","af553495":"lightgbm.fit(X_train,y_train)\npred_val=lightgbm.predict(X_val)\npred_test=lightgbm.predict(X_test)\nprint(root_mean_squared_log_error(y_val.values, pred_val))\nprint(r2_score(y_val.values, pred_val))","da23c906":"rf.fit(X_train,y_train)\npred_val=rf.predict(X_val)\npred_test=rf.predict(X_test)\nprint(root_mean_squared_log_error(y_val.values, pred_val))\nprint(r2_score(y_val.values, pred_val))","2dba0e2b":"gbr.fit(X_train,y_train)\npred_val=gbr.predict(X_val)\npred_test=gbr.predict(X_test)\nprint(root_mean_squared_log_error(y_val.values, pred_val))\nprint(r2_score(y_val.values, pred_val))","969d6a62":"X_train, X_test, y_train,test_id=df_train.drop(['SalePrice'], axis=1),df_test.drop(['Id','SalePrice'], axis=1),df_train[['SalePrice']],df_test[['Id']]","8eee2fbc":"gbr.fit(X_train,y_train)\nrf.fit(X_train,y_train)\nlightgbm.fit(X_train,y_train)\npred_test=(gbr.predict(X_test)+rf.predict(X_test)+lightgbm.predict(X_test))\/3","3be39880":"sub=pd.DataFrame({'Id':test_id.Id,'SalePrice':np.array(pred_test)})\nsub","6651d9f3":"submission=sub.merge(submission.drop('SalePrice',axis=1),on='Id')","f591050f":"submission.to_csv('submission.csv', index=False)","7dfa561d":"So, on reality only this 4 features have missing values. We can input the values using machine learning and use the features with missing values as target","92d4f7f7":"# Read Data ","72c9d63e":"# Missing values","99743968":"# Data types","1203ce84":"# Models for missing values","64e6e28c":"Some of the missing values means on reality a new category which we will call \"None\", meaning \"it does not have\"","a3eda884":"# Scale data","cde54088":"# Libraries","3e052ea1":"# Split values","054d91f3":"# Models"}}