{"cell_type":{"7e393428":"code","b681e70e":"code","eb8f44c9":"code","3ef382b4":"code","ba6df979":"code","16818779":"code","0be3ae35":"code","4fdeace4":"code","13253678":"code","0473c30a":"code","1d57c1c5":"code","fb4d6867":"code","9047700f":"code","e5167be3":"code","bf321ebe":"code","60e0fea8":"code","e4585091":"code","fd0d8d7b":"code","d027f62e":"code","a0d301a5":"code","ceecb62c":"code","3d1f5905":"code","d7444d4a":"code","8f56d691":"code","1ad98540":"code","c4d28db6":"code","3a6d3cc1":"code","8f484abd":"code","46db4008":"code","027fc785":"code","d084ba51":"code","25dccb48":"code","5d89c164":"code","0c216802":"code","0a2f6d54":"code","e445c71d":"code","19a80813":"code","3e54bc04":"code","a7a0d142":"code","65918c2d":"code","b0c15866":"code","dddf589e":"code","4056fd02":"code","26d8a623":"code","0de0f3e8":"code","0f867653":"markdown","305e68af":"markdown","5c85a05a":"markdown"},"source":{"7e393428":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b681e70e":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n","eb8f44c9":"os.getcwd()","3ef382b4":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ncombine = [train_df, test_df]\n","ba6df979":"test_df.head()","16818779":"train_df.head()","0be3ae35":"train_df.columns.values","4fdeace4":"train_df.tail()\n","13253678":"train_df.describe()\n","0473c30a":"train_df.describe(include=['O'])\n","1d57c1c5":"sns.heatmap(train_df.corr())","fb4d6867":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)\n","9047700f":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();\n","e5167be3":"grid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()\n","bf321ebe":"print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n\ntrain_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\ncombine = [train_df, test_df]\n\n\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape\n","60e0fea8":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train_df['Title'], train_df['Sex'])\n","e4585091":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\n","fd0d8d7b":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()\n","d027f62e":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.shape, test_df.shape\n","a0d301a5":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()\n","ceecb62c":"train_df['Age'] =train_df['Age'].fillna(np.random.uniform(train_df['Age'].mean()-train_df['Age'].std(),train_df['Age'].mean()+train_df['Age'].std()))\n","3d1f5905":"test_df['Age'] =test_df['Age'].fillna(np.random.uniform(test_df['Age'].mean()-test_df['Age'].std(),test_df['Age'].mean()+test_df['Age'].std()))\n","d7444d4a":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)\n","8f56d691":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()\n","1ad98540":"train_df = train_df.drop(['AgeBand'], axis=1)\ncombine = [train_df, test_df]\ntrain_df.head(6)\n","c4d28db6":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\ntrain_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","3a6d3cc1":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()\n","8f484abd":"train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\ncombine = [train_df, test_df]\n\ntrain_df.head()\n","46db4008":"for dataset in combine:\n    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n\ntrain_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)\n","027fc785":"#filling missing values\nfreq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port\n","d084ba51":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    \ntrain_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","25dccb48":"#Converting categorical feature to numeric\n#We can now convert the EmbarkedFill feature by creating a new numeric Port feature.\n\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()\n","5d89c164":"#We can now complete the Fare feature for single missing value in test dataset using mode to get the value that occurs most frequently for this feature.\n#We do this in a single line of code.\n\n\ntest_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\ntest_df['Age'].fillna(test_df['Age'].dropna().median(), inplace=True)\ntest_df.head(7)\n","0c216802":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)\n","0a2f6d54":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    \ntrain_df.head(10)\n","e445c71d":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape\n","19a80813":"X_test.isna().sum()","3e54bc04":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log\n","a7a0d142":"rfc = RandomForestClassifier()\nrfc.fit(X_train, Y_train)\nY_pred = rfc.predict(X_test)\n\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","65918c2d":"df_test = [X_test , Y_pred]","b0c15866":"X_submit = pd.DataFrame()\nX_submit['PassengerId'] = test_df['PassengerId']\n","dddf589e":"X_submit['Survived'] = Y_pred","4056fd02":"X_submit.to_csv(\"submission.csv\",index=False)","26d8a623":"random_forest = RandomForestClassifier(n_estimators=200)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest\n","0de0f3e8":"from sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier(random_state=25)\nclf.fit(X_train, Y_train)\nY_pred = clf.predict(X_test)\nclf.score(X_train, Y_train)\n","0f867653":"* ## Creating new features from existing features","305e68af":" ## Distrib of categorical features","5c85a05a":" ## Distrib of numerical features"}}