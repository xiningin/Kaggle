{"cell_type":{"7d406edd":"code","5d4bc503":"code","a6f324aa":"code","32b2237a":"code","63a6a3eb":"code","bc988e4e":"code","7ee4f5c7":"code","5e0c079c":"code","8427e61e":"code","655f6caf":"code","74f413f4":"code","c9a64b2d":"code","aa5fdc52":"code","dd9dfdeb":"code","20cd3de9":"code","a655fab7":"code","db397d6c":"code","40e030b1":"code","a158caed":"code","6ca3e6c8":"code","01d85684":"code","ab49aec1":"code","354e59aa":"markdown","4d8a583c":"markdown","96f21317":"markdown","4382d9c2":"markdown","eb375ec9":"markdown"},"source":{"7d406edd":"# LOADING NECESSARY LIBRARIES\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","5d4bc503":"# READING THE DATA SET\n\ndata = pd.read_csv('..\/input\/course-study\/appendix.csv')\ndf = data.copy()\npd.options.display.max_columns = 23","a6f324aa":"# ELIMINATING UNNECESSARY COLUMNS\n\ndf = df.drop(columns=['Launch Date', 'Year', 'Honor Code Certificates', '% Certified of > 50% Course Content Accessed',\n                      '% Played Video', '% Grade Higher Than Zero', 'Total Course Hours (Thousands)',\n                      'Median Hours for Certification'])\ndf.head()","32b2237a":"# IS THERE ANY NAN VALUE IN THE DATA SET?\n\ndf.isnull().sum()","63a6a3eb":"# DEALING THE NAN DATA\n\ndf['Instructors'] = df['Instructors'].fillna('-')","bc988e4e":"# ANALYSING THE DATA TYPES\n\ndf.info()","7ee4f5c7":"# COURSE SUPPLIERS\n\nsns.countplot(x='Institution', data=df);\ndf['Institution'].value_counts()","5e0c079c":"# AGE DISTRIBUTION FOR ALL OF THE COURSES\n\ndf['Median Age'].hist()\nplt.title('Age Distribution For All the Courses')\nplt.xlabel('Student Ages');","8427e61e":"# ANALYSING THE COURSE CATEGORIES\n\nprint(df['Course Subject'].value_counts())\ndf['Course Subject'].value_counts().plot(kind='barh')\nplt.title('Nu of Courses in the Subject Category');","655f6caf":"# INITIAL STATISTICS OF THE COLUMNS\n\ndf.describe().T","74f413f4":"# CREATING COURSE WEIGHT COLUMN\n\ndf['Weight Avg'] = ((df['Participants (Course Content Accessed)'] \/ df['Participants (Course Content Accessed)'].sum())*0.60) + (df['% Posted in Forum']*0.30)+(df['% Certified']*0.10)","c9a64b2d":"# ERASING THE DUPLICATED COURSES\n\ndf_new = df.drop_duplicates(subset=['Course Number', 'Course Title'], keep=False)","aa5fdc52":"# TOP 10 COURSES BY RATING\n\ndf_present1 = df_new[['Course Title', 'Course Subject', 'Participants (Course Content Accessed)', '% Audited', '% Certified', \n                      '% Posted in Forum', 'Weight Avg']].sort_values(by=['Weight Avg'], ascending=False).head(10)","dd9dfdeb":"# TOP 1O COURSES BY PARTICIPANTS\n\ndf_present2 = df_new[['Course Title', 'Course Subject', 'Participants (Course Content Accessed)', '% Audited', '% Certified', \n                      '% Posted in Forum', 'Weight Avg']].sort_values(by=['Participants (Course Content Accessed)'], ascending=False).head(10)","20cd3de9":"# COMPARISON OF TOP 10 COURSES BY RATING AND POPULARITY\n\nplt.figure(figsize=(8,12))\nplt.subplot(2,1,1)\nplt.barh(df_present1['Course Title'].head(10), df_present1['Weight Avg'].head(10), color='orange')\nplt.gca().invert_yaxis()\nplt.title('Top 10 Courses by Rating')\nplt.xlabel('Course Rating')\n\nplt.subplot(2,1,2)\nplt.barh(df_present2['Course Title'].head(10), df_present2['Participants (Course Content Accessed)'].head(10), color='purple')\nplt.gca().invert_yaxis()\nplt.title('Top 10 Courses by Number of Students')\nplt.xlabel('Number of Students');","a655fab7":"# COURSE CATEGORIES\n\nsubject_list = list(df_new['Course Subject'].unique())\nsubject_dict = {'a': subject_list[0], 'b': subject_list[1], 'c': subject_list[2], 'd': subject_list[3]}","db397d6c":"# CREATING FUNCTION TO RECOMMEND TOP 5 COURSES BY CATEGORY SELECTION \n\nprint('Course categories: \\n')\nprint('a) ', subject_dict['a'])\nprint('b) ', subject_dict['b'])\nprint('c) ', subject_dict['c'])\nprint('d) ', subject_dict['d'])\n\ndef recommend(course_subject):\n    \n    filter_subject = df_new['Course Subject'] == course_subject\n    \n    print('\\n Top 5 Rated Courses in %a \\n' % course_subject)\n    df_rated = df_new[filter_subject].sort_values(by=['Weight Avg'], ascending=False).head()\n    print(df_rated[['Course Number', 'Course Title']])\n    \n    print('\\nTop 5 Popular Courses in %a \\n' % course_subject)\n    df_popular = df_new[filter_subject].sort_values(by=['Participants (Course Content Accessed)'], ascending=False).head()\n    print(df_popular[['Course Number', 'Course Title']])","40e030b1":"# GOVERNMENT, HEALTH, AND SOCIAL SCIENCE CATEGORY COURSE RECOMMENDATIONS:\n\nrecommend(subject_dict['a'])","a158caed":"# SCIENCE, TECHNOLOGY, ENGINEERING, AND MATHEMATICS CATEGORY COURSE RECOMMENDATIONS:\n\nrecommend(subject_dict['b'])","6ca3e6c8":"# HUMANITIES, HISTORY, DESIGN, RELIGION, AND EDUCATION CATEGORY COURSE RECOMMENDATIONS:\n\nrecommend(subject_dict['c'])","01d85684":"# COMPUTER SCIENCE CATEGORY COURSE RECOMMENDATIONS:\n\nrecommend(subject_dict['d'])","ab49aec1":"'''\nFOR AN INTERACTIVE VERSION WITH USER INPUT USE THE CODE BELOW:\n\ndef recommend():\n    print('a) ', subject_dict['a'])\n    print('b) ', subject_dict['b'])\n    print('c) ', subject_dict['c'])\n    print('d) ', subject_dict['d'])\n    \n    print('\\nChoose the subject you want to learn: \\n')\n    user_input = input()\n    \n    course_subject = subject_dict[user_input]\n    \n    filter_subject = df_new['Course Subject'] == course_subject\n    \n    print('\\n Top 5 Rated Courses in %a \\n' % subject_dict[user_input])\n    df_rated = df_new[filter_subject].sort_values(by=['Weight Avg'], ascending=False).head()\n    print(df_rated[['Course Number', 'Course Title']])\n    \n    print('\\nTop 5 Popular Courses in %a \\n' % subject_dict[user_input])\n    df_popular = df_new[filter_subject].sort_values(by=['Participants (Course Content Accessed)'], ascending=False).head()\n    print(df_popular[['Course Number', 'Course Title']])\n    \n    print('\\nWould you like to look for a different subject? (y\/n)\\n')\n    restart = input()\n    \n    if restart == 'y' or restart == 'yes':\n        recommend()\n    elif restart == 'n' or restart == 'no':\n        print('\\nGood bye!')\n    else:\n        print('\\nWrong input.')\n    return\n\n\nrecommend()\n\n'''","354e59aa":"## Demographic Recommendation\n\n### 1. By Course Weight (Rating)\n\nCourse Weight = ((Nu of Students of the Course \/ Nu of All Students) x 0.60) + (Forum Posts x 0.30) + (Aquiered Certifications x 0.10)","4d8a583c":"**Thank you so much and please don't forget to upvote if you like my study.**\n\n**Melih** ","96f21317":"## Category Base Recommendation","4382d9c2":"### 2. By Number of Students","eb375ec9":"# Basic Recommender System for Online Courses by Category Selection\n\nIn this study I will analyse MIT and Harvard Online Courses data set and create a basic recommendation system based on course category.\n\nBy choosing from the four main course category, system will recommend top 5 rated and popular courses in that category."}}