{"cell_type":{"d8bada25":"code","05adbeae":"code","4fa2283b":"code","4926d2bf":"code","795cd78f":"code","cacf53fc":"markdown","ff96d689":"markdown","e233bd43":"markdown","68cd8590":"markdown"},"source":{"d8bada25":"import cv2 # opencv 3.4.2+ required\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt","05adbeae":"print(cv2.__version__)","4fa2283b":"proto = '..\/input\/colorise-image\/colorization_deploy_v2.prototxt.txt'\nweights = '..\/input\/colorise-image\/colorization_release_v2_norebal.caffemodel'\n# colorization_release_v2_norebal.caffemodel is trained with a classification loss with no class re-balancing term.\n# The results are duller but \"safer\" colorizations\n# weights = '.\/models\/colorization_release_v2_norebal.caffemodel' \n\n# load cluster centers\npts_in_hull = np.load('..\/input\/colorise-image\/pts_in_hull.npy')\npts_in_hull = pts_in_hull.transpose().reshape(2, 313, 1, 1).astype(np.float32)\n\n# load model\nnet = cv2.dnn.readNetFromCaffe(proto, weights)\n# net.getLayerNames()\n\n# populate cluster centers as 1x1 convolution kernel\nnet.getLayer(net.getLayerId('class8_ab')).blobs = [pts_in_hull]\n# scale layer doesn't look work in OpenCV dnn module, we need to fill 2.606 to conv8_313_rh layer manually\nnet.getLayer(net.getLayerId('conv8_313_rh')).blobs = [np.full((1, 313), 2.606, np.float32)]","4926d2bf":"img_path = '..\/input\/colorise-image\/sample_10.jpg'\nimg = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\nimg_input = img.copy()\n\n# convert BGR to RGB\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n\nimg_rgb = img.copy()\n\n# normalize input\nimg_rgb = (img_rgb \/ 255.).astype(np.float32)\n\n# convert RGB to LAB\nimg_lab = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2Lab)\n# only L channel to be used\nimg_l = img_lab[:, :, 0]\n\ninput_img = cv2.resize(img_l, (224, 224))\ninput_img -= 50 # subtract 50 for mean-centering\n\n# plot images\n# fig = plt.figure(figsize=(10, 5))\n# fig.add_subplot(1, 2, 1)\n# plt.imshow(img_rgb)\n# fig.add_subplot(1, 2, 2)\n# plt.axis('off')\nplt.figure(figsize=(10,10))\nplt.imshow(input_img, cmap='gray')","795cd78f":"net.setInput(cv2.dnn.blobFromImage(input_img))\npred = net.forward()[0,:,:,:].transpose((1, 2, 0))\n\n# resize to original image shape\npred_resize = cv2.resize(pred, (img.shape[1], img.shape[0]))\n\n# concatenate with original image L\npred_lab = np.concatenate([img_l[:, :, np.newaxis], pred_resize], axis=2)\n\n# convert LAB to RGB\npred_rgb = cv2.cvtColor(pred_lab, cv2.COLOR_Lab2RGB)\npred_rgb = np.clip(pred_rgb, 0, 1) * 255\npred_rgb = pred_rgb.astype(np.uint8)\n\n# plot prediction result\nfig = plt.figure(figsize=(20, 10))\nfig.add_subplot(1, 2, 1).axis('off')\nplt.imshow(img_l, cmap='gray')\nfig.add_subplot(1, 2, 2).axis('off')\nplt.imshow(pred_rgb)\n# plt.savefig(output_filename)\n\n# save result image file\nfilename, ext = os.path.splitext(img_path)\n# input_filename = '%s_input%s' % (filename, ext)\n# output_filename = '%s_output%s' % (filename, ext)\n\n# pred_rgb_output = cv2.cvtColor(pred_rgb, cv2.COLOR_RGB2BGR)\n\n# cv2.imwrite(input_filename, img_input)\n# cv2.imwrite(output_filename, np.concatenate([img, pred_rgb_output], axis=1))","cacf53fc":"# Original Code and Paper","ff96d689":"- Original code(caffe): https:\/\/github.com\/richzhang\/colorization\/blob\/master\/colorization\/demo\/colorization_demo_v2.ipynb\n- Paper: https:\/\/arxiv.org\/pdf\/1603.08511.pdf","e233bd43":"# Prepare Model\n- You need to download models from Zhang's server\n- Run \"get_models.sh\" to get it","68cd8590":"# Prediction"}}