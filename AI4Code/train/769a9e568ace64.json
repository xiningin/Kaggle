{"cell_type":{"5dab0817":"code","e88cfd05":"code","3ae28971":"code","61545cae":"code","654cf553":"code","93f3f212":"code","022ade40":"code","09d3f9bf":"code","67cab027":"code","35f58bff":"code","e729c0ef":"code","decb7996":"code","1d84b9b3":"code","3edd9708":"code","e592205a":"code","bbd64d29":"code","a50de50c":"code","52ceca2e":"code","cab1d505":"code","327a4f21":"code","4385ba68":"code","4f4fe381":"code","bac1a21b":"markdown","17691dc6":"markdown","d542c19d":"markdown","44bd0f6b":"markdown","1558ece6":"markdown","a9b51ff9":"markdown","f2c78388":"markdown","ea73da0f":"markdown","222b464e":"markdown","624b533a":"markdown","632790c5":"markdown","deaee7cd":"markdown","eb1fe27c":"markdown","796a1547":"markdown","0cd42467":"markdown","7e9f2480":"markdown","72b468ab":"markdown","e4c344b9":"markdown"},"source":{"5dab0817":"import ee\nimport folium \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pickle\nimport numpy as np\nfrom scipy import optimize\nfrom folium.plugins import MarkerCluster,HeatMap\nimport branca\n\n%matplotlib inline\n","e88cfd05":"plt.style.use('seaborn-whitegrid')\nplt.rcParams['figure.dpi']=200","3ae28971":"#helper functions\n\ndef get_df(img_collection_info,\n           bands):\n    '''get a dataframe of values for the given Bands'''\n    \n    \n    df = pd.DataFrame(img_collection_info)\n\n    # Rearrange the header.\n    headers = df.iloc[0]\n    df = pd.DataFrame(df.values[1:], columns=headers)\n\n    # Remove rows without data inside.\n    df = df[['longitude', 'latitude', 'time', *bands]].dropna()\n\n    # Convert the data to numeric values.\n    for band in bands:\n        df[band] = pd.to_numeric(df[band], errors='coerce')\n\n    # Convert the time field into a datetime.\n    df['datetime'] = pd.to_datetime(df['time'], unit='ms')\n\n    #lat-long of point as location\n    df['location']=df.apply(lambda x : (x['latitude'],x['longitude']),axis=1)\n    \n    \n    # Keep the columns of interest.\n    df = df[['time','datetime','location',  *bands]]\n\n    return df\n    \ndef mean_value(df,band):\n    '''Taking the mean value for a band for each groupby (by date) object for that region,so that we have a mean value of given band for that region'''\n    \n    \n    #mean value for particular instance of time\n    mean_val_df=df.groupby('datetime').agg({f'{band}':['mean','max']})\n    mean_val_df.reset_index(inplace=True)\n    \n    #sortby date\n    mean_val_df.sort_values(by='datetime',inplace=True)\n    \n    return mean_val_df\n\n\ndef get_range_df(df,\n                date_col,\n                start_date,\n                end_date):\n    '''get a dataframe bounded by start and end date'''\n    \n    return df[(df[date_col]>start_date)&(df[date_col]<end_date)]\n\n\n#plotting\n\ndef plot_all_values(df,\n                    df2,\n                    band):\n    '''Plot all the given values,\n    df: Urban Dataset\n    df2:rural Dataset'''\n    \n    fig,ax=plt.subplots(figsize=(16,8))\n    \n    ax.plot(df.datetime,\n            df[band]['mean'],\n            color='r',\n            lw=0.5,\n            label='Urban')\n\n    ax.plot(df2.datetime,\n            df2[band]['mean'],\n            color='b',\n            lw=0.5,\n            label='Rural')\n\n    plt.title(f'{band} in Pune Region')\n    plt.legend()\n    plt.xlabel('Date')\n    plt.ylabel(f'{band} (mol\/m^2)')\n    plt.show()\n    \n    \n    \ndef plot_monthwise(df,\n                  df2,\n                  band):\n    '''plot seasonal trend in concentration of specified band\n    df: urban data points\n    df2: rural data points\n    band : band in question'''\n        \n    #mean band level for each month \n    urban=df.groupby(df.datetime.dt.month).agg({(f'{band}','mean'):'mean'})\n    urban.index.name='Months'\n    urban.reset_index(inplace=True)\n    \n    \n    rural=df2.groupby(df.datetime.dt.month).agg({(f'{band}','mean'):'mean'})\n    rural.index.name='Months'\n    rural.reset_index(inplace=True)\n    \n    \n    \n    comb=urban.merge(rural,on='Months',how='inner')\n    comb.rename(columns={f'{band}_x':'Urban',f'{band}_y':f'Rural'},inplace=True)\n    comb.set_index('Months',inplace=True)\n    comb.plot(figsize=(16,8))\n    \n    \n    plt.title(f'Monthwise mean {band}')\n    plt.xlabel('Month of the year')\n    plt.ylabel(f'Monthwise Mean {band} (mol\/m^2)')\n    plt.show()\n\n    \ndef plot_comparison_plots(df,\n                          df2,\n                          band,\n                          Title):\n    '''PLOT COMPARISON PLOTS for Before and during Pandemic\n    df: NO2 levels during pre Pandemic study period\n    df2:NO2 During Pandemic study period\n    '''\n    fig,ax=plt.subplots(2,1,figsize=(16,8))\n    print(f'{Title}')\n    \n    \n    ax[0].plot(df.datetime,\n            df[band]['mean'],\n            color='r',\n            lw=2)\n    ax[0].set_title('Before Covid-19')\n    ax[0].set_xlabel('Date')\n    ax[0].set_ylabel(f'{band} (mol\/m^2)')\n    \n    \n\n    ax[1].plot(df2.datetime,\n            df2[band]['mean'],\n            color='g',\n            lw=2)\n    ax[1].set_title('During Covid-19')\n    ax[1].set_xlabel('Date')\n    ax[1].set_ylabel(f'{band} (mol\/m^2)')\n    \n    plt.tight_layout()\n    \n    #saving image\n    fig.savefig(f'{Title}.jpg')\n    plt.show()\n    \ndef percent_change(df,df2,band):\n    '''calculate % change in band value for old window and new window '''\n    mean_pre   = df[f'{band}']['mean'].mean()\n    mean_during= df2[f'{band}']['mean'].mean()\n        \n    diff=mean_pre-mean_during\n    percent_change=(diff\/mean_pre)*100\n    \n    return percent_change","61545cae":"# The dates to be used for study\n\n\npre_pandemic={\n    'start_date':'2019-03-01',\n    'end_date'  :'2019-07-01'\n}\n\npandemic={\n    'start_date':'2020-03-01',\n    'end_date'  :'2020-07-01'\n}","654cf553":"ee.Authenticate()\nee.Initialize()","93f3f212":"# loading area of interest coordinates\n\nwith open('..\/input\/pune-coordinates\/bounding_polygons.pkl','rb') as f:\n    coord_dict=pickle.load(f)\n\naoi=ee.geometry.Geometry.Polygon(list(coord_dict['pune'].values()))\naoi_rural=ee.geometry.Geometry.Polygon(list(coord_dict['pune_rural'].values()))\naoi_urban=ee.geometry.Geometry.Polygon(list(coord_dict['pune_urban'].values()))","022ade40":"'''Description : SO2 vertical column density at ground level'''\nSO2=ee.ImageCollection('COPERNICUS\/S5P\/OFFL\/L3_SO2').filterBounds(aoi).select('SO2_column_number_density')\n\nprint('Number of Images in collection  are {}'.format(SO2.size().getInfo()))","09d3f9bf":"# get Image INFO\n\n# sample a few locations for which data is to be queried\n\n#Central Areas of Pune and PCMC\npune_central=SO2.getRegion(geometry=aoi_urban,\n                          scale=3000,\n                          ).getInfo()\n\n\n# Some rural areas of Pune\npune_rural=SO2.getRegion(geometry=aoi_rural,\n                          scale=5000,\n                          ).getInfo()","67cab027":"df_urban=get_df(pune_central,\n                ['SO2_column_number_density'])\n\ndf_rural=get_df(pune_rural,\n                ['SO2_column_number_density'])\n\n\nm1=folium.Map(location=[18.5477,73.8384],\n              tiles='Open Street Map',\n              zoom_start=12,min_zoom=9)\n\n\n# adding markers:\n#making a Marker Cluster for visualization.\nmc=MarkerCluster().add_to(m1)\n\n#urban locations\nfor location,count in df_urban.groupby('location').size().iteritems():\n    mc.add_child(folium.Marker(location=location,\n                               icon=folium.Icon(color='blue',icon='info-sign'),\n                              tooltip=f'<b> URBAN <br> Datapoints:{count} <\/b>'))\n\n#rural locations\nfor location,count in df_rural.groupby('location').size().iteritems():\n    mc.add_child(folium.Marker(location=location,\n                               icon=folium.Icon(color='green',icon='info-sign'),\n                              tooltip=f'<b> RURAL <br> Datapoints:{count} <\/b>'))\n\nm1.add_child(mc)\n    \n\nm1.save('Area_of_study.html')\n\nprint('DataPoints in Study (URBAN and RURAL)')\nm1","35f58bff":"print('Number of Data Points in Urban Study {} \\n Number of Data Points in Rural Study {}'.format(len(df_urban),len(df_rural)))","e729c0ef":"# Dataset for Urban Pune SO2 density\n\nurban_so2=mean_value(df_urban,\n                     band='SO2_column_number_density')\n#saving urban \nurban_so2.to_csv('urban_so2.csv',index=False)\n\n# Rural  Dataset\nrural_so2=mean_value(df_rural,\n                    band='SO2_column_number_density')\n#saving \nrural_so2.to_csv('rural_so2.csv',index=False)","decb7996":"plot_all_values(df=urban_so2,\n               df2=rural_so2,\n               band='SO2_column_number_density')","1d84b9b3":"plot_monthwise(df=urban_so2,\n               df2=rural_so2,\n               band='SO2_column_number_density')","3edd9708":"#PREPANDEMIC URBAN AND RURAL SO2 DENSITY DATA\n\n#urban\nprepandemic_ur=get_range_df(df=urban_so2,\n                            date_col='datetime',\n                           start_date=pre_pandemic['start_date'],\n                           end_date=pre_pandemic['end_date'])\n\n#rural\nprepandemic_rur=get_range_df(df=rural_so2,\n                            date_col='datetime',\n                           start_date=pre_pandemic['start_date'],\n                           end_date=pre_pandemic['end_date'])\n\n\n#PANDEMIC URBAN AND RURAL SO2 DENSITY DATA\n\n#urban\npandemic_ur=get_range_df(df=urban_so2,\n                        date_col='datetime',\n                        start_date=pandemic['start_date'],\n                        end_date = pandemic['end_date'])\n\n#rural\n\npandemic_rur=get_range_df(df=rural_so2,\n                         date_col='datetime',\n                         start_date=pandemic['start_date'],\n                         end_date=pandemic['end_date'])","e592205a":"# CHange in SO2 over Urban areas\nplot_comparison_plots(df=prepandemic_ur,\n                     df2=pandemic_ur,\n                     band='SO2_column_number_density',\n                     Title='SO2 Concentration over Urban Pune')","bbd64d29":"# CHange in SO2 over Rural areas\nplot_comparison_plots(df=prepandemic_rur,\n                     df2=pandemic_rur,\n                     band='SO2_column_number_density',\n                     Title='SO2 Concentration over Rural Pune')","a50de50c":"print('Mean % drop in Urban SO2 level during pandemic restrictions {}'.format(percent_change(df=prepandemic_ur,\n                                                                                             df2=pandemic_ur,\n                                                                                            band='SO2_column_number_density')))\nprint('Mean % drop in Rural SO2 level during pandemic restrictions {}'.format(percent_change(df=prepandemic_rur,\n                                                                                             df2=pandemic_rur,\n                                                                                            band='SO2_column_number_density')))","52ceca2e":"\n#visualization parameters\nviz_param={\n    'min': - 0.0005, 'max': 0.0008,\n    'palette':['#053061','#2166ac','#4393c3','#92c5de','#d1e5f0','#fddbc7','#f4a582','#d6604d','#b2182b','#67001f']\n}","cab1d505":"def add_ee_layer(self, ee_image_object, vis_params, name):\n    \"\"\"Adds a method for displaying Earth Engine image tiles to folium map.\"\"\"\n    map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n    folium.raster_layers.TileLayer(\n        tiles=map_id_dict['tile_fetcher'].url_format,\n        attr='Map Data &copy; <a href=\"https:\/\/earthengine.google.com\/\">Google Earth Engine<\/a>',\n        name=name,\n        overlay=True,\n        control=True\n    ).add_to(self)\n\n# Add Earth Engine drawing method to folium.\nfolium.Map.add_ee_layer = add_ee_layer","327a4f21":"\ncolormap = branca.colormap.linear.RdBu_11.scale(- 0.0005,0.0009)\ncolormap = colormap.to_step(index=np.arange(-0.0005,0.0008,0.0002))","4385ba68":"M2=folium.Map(location=[18.5477,73.8384],\n              tiles='Open Street Map',\n              zoom_start=10,min_zoom=9)\n\n\n#adding NO2 density layer\nM2.add_ee_layer(ee_image_object=ee.Image(SO2.filterDate(pre_pandemic['start_date'],pre_pandemic['end_date']).mean()).clip(aoi),\n               vis_params=viz_param,\n               name='SO2 Density (April-June 2019)')\nprint('April 2019 to June 2019')\n\n#add tile control\nM2.add_child(folium.LayerControl())\n\ncolormap.add_to(M2)\nM2.save('Prepandemic_SO2.html')\n\nM2","4f4fe381":"M3=folium.Map(location=[18.5477,73.8384],\n              tiles='Open Street Map',\n              zoom_start=10,min_zoom=9)\n\n\n#adding NO2 density layer\nM3.add_ee_layer(ee_image_object=ee.Image(SO2.filterDate(pandemic['start_date'],pandemic['end_date']).mean()).clip(aoi),\n               vis_params=viz_param,\n               name='SO2 Density (April-June 2020)')\nprint('April 2020 to June 2020')\n\n\n#add tile control\nM3.add_child(folium.LayerControl())\ncolormap.add_to(M3)\n\nM3.save('pandemic_SO2.html')\n\nM3","bac1a21b":"# Query Image Collection","17691dc6":"**During Pandemic (April 2020 to June 2020)**","d542c19d":"# Description:\n* **In this notebook, we will see the change in concentration of ground level SO2 for a Region around Pune,India from the time before the covid-19 restrictions, and during the restrictions**","44bd0f6b":"# Helper Functions","1558ece6":"# Percent change in value.","a9b51ff9":"***ABOUT SO2***\n* **The largest source of SO2 in the atmosphere is the burning of fossil fuels by power plants and other industrial facilities. Smaller sources of SO2 emissions include: industrial processes such as extracting metal from ore; natural sources such as volcanoes; and locomotives, ships and other vehicles and heavy equipment that burn fuel with a high sulfur content.** \n* **When sulfur dioxide combines with water and air, it forms sulfuric acid, which is the main component of acid rain. Acid rain can: 1. cause deforestation 2. acidify waterways to the detriment of aquatic life 3. corrode building materials and paints.**\n* **Short-term exposures to SO2 can harm the human respiratory system and make breathing difficult. People with asthma, particularly children, are sensitive to these effects of SO2.**\n","f2c78388":"# Points of study","ea73da0f":"**Setting Matplotlib style and pixel density**","222b464e":"# Imports","624b533a":"**Get a array of selected bands, datetime and location**","632790c5":"**Loading saved  bounding polygon of Area of Interest,Rural and Urban areas**","deaee7cd":"**Adding a colormap**","eb1fe27c":"**Bounding dates used for study**","796a1547":"# Effects of Pandemic on SO2 emissions","0cd42467":"# Authenticate and Inititalize Earth Engine","7e9f2480":"#  Visualize Mean change over study period","72b468ab":"# **Getting Timeseries data for SO2 concentrations**","e4c344b9":"**PrePandemic (April 2019 to June 2019)**"}}