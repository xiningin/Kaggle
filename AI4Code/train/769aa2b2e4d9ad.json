{"cell_type":{"1989f404":"code","05c6a354":"code","08a81b46":"code","08d4e927":"code","60f74643":"code","5180e3ee":"code","ba504b93":"code","e20c5261":"code","8e733554":"code","042aac06":"code","b7d2e77d":"markdown","d29cfa4a":"markdown"},"source":{"1989f404":"import numpy as np \nimport pandas as pd","05c6a354":"#This function calculates amount of dices for the attacker and defender\ndef dice_amount(attack_troops,defend_troops):\n    \n    if attack_troops >= 3:\n        attack_dices = 3\n    elif attack_troops == 2:\n        attack_dices = 2\n    else:\n        attack_dices =1\n        \n    if defend_troops >= 2:\n        defend_dices = 2\n    else:\n        defend_dices = 1\n    return attack_dices, defend_dices","08a81b46":"#This function simulates RISK dices.\n#Takes amount of dices as input and creates randomly integers between 1-6.\nimport random\ndef roll(att_dices, def_dices):\n    dice = range(1,7)\n    att_num = []\n    def_num = []\n    while att_dices > 0:\n        att_num.append(random.choice(dice))\n        att_dices -= 1\n    while def_dices > 0:\n        def_num.append(random.choice(dice))\n        def_dices -= 1\n    return att_num, def_num\nprint('Roll function OK')","08d4e927":"def fight(attack_dices,defend_dices):\n    attack, defend = roll(attack_dices,defend_dices)\n\n    attack.sort()\n    defend.sort()\n    #print(attack,defend)\n\n    att_points = 0\n    def_points = 0\n    # 1 dice\n    if len(attack)==1 or len(defend) == 1:\n\n        if attack[-1] > defend[-1]:\n            def_points-=1\n        else:\n            att_points-=1\n    else:\n    # 3-2 Dices\n        #Attack eliminates two troops.\n        if attack[-1] > defend[-1] and attack[-2] > defend[-2]:\n            def_points-=2\n        #Defend eliminates two troops.\n        elif defend[-1] >= attack[-1] and defend[-2] >= attack[-2]:\n            att_points-=2\n        #Both eliminates one troop.\n        elif attack[-1] > defend[-1] and attack[-2] <= defend[-2] or defend[-1] >= attack[-1] and attack[-2] > defend[-2]:\n            att_points-=1\n            def_points-=1\n    \n    #print(f\"attackers points: {att_points}\")\n    #print(f\"defenders points: {def_points}\")\n    return att_points, def_points\n","60f74643":"fight(3,2)","5180e3ee":"def battle(attack_troops,defend_troops):\n    while attack_troops > 0 and defend_troops > 0:\n        #print(attack_troops,defend_troops)\n        attack_dices,defend_dices = dice_amount(attack_troops,defend_troops)\n        att_minus, def_minus = fight(attack_dices,defend_dices)\n        attack_troops += att_minus\n        defend_troops += def_minus\n    \n    #print(attack_troops,defend_troops)\n    attack_wins = 0\n    defend_wins = 0\n    if attack_troops == 0:\n        defend_wins += 1\n        #print(f'Defend wins {defend_wins}')\n    elif defend_troops ==0:\n        attack_wins += 1\n        #print(f'Attack wins {attack_wins}')\n    return attack_wins, defend_wins, attack_troops, defend_troops","ba504b93":"battle(18,10)","e20c5261":"def simulation(attack_troops,defend_troops,num):\n    #Variables \n    rounds = num\n    attack_wins = 0\n    defend_wins = 0\n    attack_after = 0\n    defend_after = 0\n    \n    #Loop to repeat number of simulations\n    while num > 0:\n        attack, defend, attack_troops_after, defend_troops_after = battle(attack_troops,defend_troops)\n        attack_wins += attack\n        defend_wins += defend\n        attack_after += attack_troops_after\n        defend_after += defend_troops_after\n        num -= 1\n    \n    #Caluclation of win% and average of surivivors\n    attack_p = round(attack_wins \/ rounds * 100,2)\n    defend_p = round(defend_wins \/ rounds * 100,2)\n    attack_avg = round(attack_after \/ attack_wins,2)\n    defend_avg = round(defend_after \/ defend_wins,2)\n    \n    #output\n    stats = f\"\"\"\n    Statistics\n    \n    Attack troops: {attack_troops}\n    Defend troops: {defend_troops}\n    Rounds: {rounds}\n    \n    Attack\n    Wins: {attack_wins}\/{rounds}, {attack_p}%\n    Average of survivors: {attack_avg}\n    \n    Defend\n    Wins: {defend_wins}\/{rounds}, {defend_p} %\n    Average of survivors: {defend_avg}\n    \n    \"\"\"\n    print(stats)","8e733554":"simulation(6,2,100000)","042aac06":"l1=range(1,11)\nl2=range(1,11)\nlist1 = np.array(np.meshgrid(l1,l2)).T.reshape(-1,2)\n\nfor i in list1:\n    a,b = i\n    simulation(a,b,100000)","b7d2e77d":"## Risk board game\nRisk is a strategy board game for two to six players. Players attempt to capture territories from other players, with results determined by dice rolls. \n\nThe purpose of this notebook is to create a functions that calculates probabilities for different dice amounts and then add amount of troops to simulate an entire battle.\n\n\nThis project got it's spark from a discussion on the terrace. \n\n\n![image.png](attachment:0fa422cc-acd8-4081-a2c3-07aa0ba92b2c.png)\n","d29cfa4a":"## Simulation, create and collect data.\n\n* In this section we create functions needed to simulate a risk battle.\n* The objective is to calculate and collect key figures and metrics and create a dataframe for further analysis.\n\n"}}