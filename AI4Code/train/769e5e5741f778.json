{"cell_type":{"a78676e6":"code","2d39fce5":"code","baa1016f":"code","5e9c8e13":"code","1554934d":"code","6da058c9":"code","b67d240d":"code","57db0999":"code","eb30a1cf":"code","5c2073ea":"code","383fd08b":"code","5e3de869":"code","f9d64f54":"markdown","31a41a39":"markdown","de734a83":"markdown","4feb2e5b":"markdown","0ad9caa7":"markdown","4a133b33":"markdown","4bda5024":"markdown","ed250975":"markdown","1ee2aee0":"markdown"},"source":{"a78676e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d39fce5":"import pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px","baa1016f":"data=pd.read_csv('\/kaggle\/input\/stock-market-india\/FullDataCsv\/AXISBANK__EQ__NSE__NSE__MINUTE.csv')","5e9c8e13":"data","1554934d":"data.info()","6da058c9":"data.describe()","b67d240d":"fig = px.line(data, x='timestamp', y='high', range_x=['2017-01-02 09:15:00+05:30','2020-06-26 15:29:00+05:30'], title=\"EVERY MINUTE'S HIGH TIME SERIES GRAPH  \")\nfig.show()","57db0999":"data['timestamp'] = pd.to_datetime(data['timestamp']).dt.date\ndata","eb30a1cf":"dz=data.pivot_table(index='timestamp',values=['high'],aggfunc=max)\ndz.reset_index(inplace = True) \ndz","5c2073ea":"fig = px.line(dz, x='timestamp', y='high', range_x=['2017-01-02','2020-06-26'],title=\"EVERY DAY'S HIGH TIME SERIES GRAPH \")\nfig.show()","383fd08b":"dt=data.pivot_table(index='timestamp',values=['low'],aggfunc=min)\ndt.reset_index(inplace = True) \ndt","5e3de869":"fig = px.line(dt, x='timestamp', y='low', range_x=['2017-01-02','2020-06-26'],title=\"EVERDAY'S LOW TIME SERIES GRAPH\")\nfig.show()","f9d64f54":"Data Information- ","31a41a39":"Removing time in timestamp and keeping only date -","de734a83":"# **AXIS BANK SHARES TIME SERIES GRAPH**","4feb2e5b":"Creating a new Dataframe containing everyday's high-","0ad9caa7":"**BASIC INFORMATION OF THE DATASET -**","4a133b33":"# **IF YOU LIKE THIS NOTEBOOK, UPVOTE WOULD BE APPRECIATED**","4bda5024":"Data Description-","ed250975":"Creating a new Dataframe containing everyday's low-","1ee2aee0":"**TIME SERIES GRAPHS -**"}}