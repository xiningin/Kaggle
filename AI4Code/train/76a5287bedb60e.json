{"cell_type":{"c3a98fe8":"code","8f42c96c":"code","7dc6ba55":"code","e33e0dd3":"code","450cd95c":"code","5b83d980":"code","72ef38f5":"code","66b51d1f":"code","863b36c4":"code","925ba571":"code","b45bbe8a":"code","b1dc6b21":"code","39f12d12":"code","9427dbf8":"code","3809691c":"code","a6d89f56":"code","090a7f6c":"code","080c5f99":"code","34af4f78":"code","6510e34e":"code","c4fa58dd":"markdown","8dbc40d2":"markdown","36ea91d3":"markdown","c0d462db":"markdown","b7d81a59":"markdown","cbcfad0a":"markdown","3642fbe8":"markdown","dd580bf2":"markdown","9adf77e7":"markdown","87213d54":"markdown","76b6930d":"markdown","852322f1":"markdown","9da34d27":"markdown","4b30e384":"markdown"},"source":{"c3a98fe8":"MAX_SAMPLE = None # set a small number (e.g. 50) for experimentation, set None for production.","8f42c96c":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl","7dc6ba55":"import os\nimport re\nimport json\nimport time\nimport datetime\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport torch\nfrom datasets import load_dataset\nfrom transformers import AutoTokenizer, DataCollatorForLanguageModeling, \\\nAutoModelForMaskedLM, Trainer, TrainingArguments, pipeline, AutoConfig\n\nsns.set()\nrandom.seed(123)\nnp.random.seed(456)","e33e0dd3":"model_checkpoint = \"bert-base-cased\"\n\nMAX_LENGTH = 64\nOVERLAP = 20\n\nDATASET_SYMBOL = '$' # this symbol represents a dataset name\nNONDATA_SYMBOL = '#' # this symbol represents a non-dataset name\n\nVAL = 1","450cd95c":"# train\ntrain_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\npaper_train_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\n\ntrain = pd.read_csv(train_path)\ntrain = train[:MAX_SAMPLE]\n# Group by publication, training labels should have the same form as expected output.\ntrain = train.groupby('Id').agg({\n    'pub_title': 'first',\n    'dataset_title': '|'.join,\n    'dataset_label': '|'.join,\n    'cleaned_label': '|'.join\n}).reset_index()    \n\nprint('train size: ', len(train))\n\nexisting_labels = set(np.load('..\/input\/showdata-labels1\/existing_labels.npy', allow_pickle = True).tolist())","5b83d980":"def clean_paper_sentence(s):\n    \"\"\"\n    This function is essentially clean_text without lowercasing.\n    \"\"\"\n    s = re.sub('[^A-Za-z0-9]+', ' ', str(s)).strip()\n    s = re.sub(' +', ' ', s)\n    return s\n\ndef shorten_sentences(sentences):\n    \"\"\"\n    Sentences that have more than MAX_LENGTH words will be split\n    into multiple sentences with overlappings.\n    \"\"\"\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences\n\ndef find_sublist(big_list, small_list):\n    \"\"\"\n    find all positions of $small_list in $big_list.\n    \"\"\"\n    all_positions = []\n    for i in range(len(big_list) - len(small_list) + 1):\n        if small_list == big_list[i:i+len(small_list)]:\n            all_positions.append(i)\n    \n    return all_positions\n\ndef jaccard_similarity_list(l1, l2):\n    \"\"\"\n    Return the Jaccard Similarity score of 2 lists.\n    \"\"\"\n    intersection = len(list(set(l1).intersection(l2)))\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union\n\nconnection_tokens = {'s', 'of', 'and', 'in', 'on', 'for', 'data', 'dataset', 'survey', 'study','sequence'}\nprep_tokens = {'s', 'of', 'and', 'in', 'on', 'for', 'this', 'we', 'their', 'it', 'to'}\ndef find_negative_candidates(sentence, labels):\n    \"\"\"\n    Extract negative samples for Masked Dataset Modeling from a given $sentence.\n    A negative candidate should be a continuous sequence of at least 2 words, \n    each of these words either has the first letter in uppercase or is one of\n    the connection words ($connection_tokens). Furthermore, the connection \n    tokens are not allowed to appear at the beginning and the end of the\n    sequence. Lastly, the sequence must be quite different to any of the \n    ground truth labels (measured by Jaccard similarity).\n    \"\"\"\n    def candidate_qualified(words, labels):\n        # remove beginning words that are connection_tokens except data\/dataset\n        startIdx = 0\n        endIdx = 0\n        while len(words) and words[0].lower() in prep_tokens:\n            words = words[1:]\n            startIdx +=1\n        # remove ending words that are connection_tokens\n        while len(words) and words[-1].lower() in prep_tokens:\n            words = words[:-1]\n            endIdx+=1\n        # comparison without connection_tokens\n        if (len(words) <= 3 or \\\n            any(jaccard_similarity_list(words, label) >= 0.75 for label in labels) or \\\n            sum([1 for word in words if not word.isnumeric()])<=2):\n            return False, []\n        elif any([word.lower() in ['dataset', 'data', 'survey'] for word in words]):\n            return False, []\n        elif any(jaccard_similarity_list([word.lower() for word in words], label) >= 0.5 for label in existing_labels):\n            return False, []\n        elif any(jaccard_similarity_list([word.lower() for word in words[0:4]], label) >= 0.5 for label in existing_labels):\n            return False, []\n        else:\n            return True, [startIdx, endIdx]\n    \n    candidates = []\n    \n    phrase_start, phrase_end = -1, -1\n    for id in range(1, len(sentence)):\n        word = sentence[id]\n        # if word is captial or connection token\n        # if word[0].isupper() or word in connection_tokens:\n        if word[0].isupper() or (word[0].isnumeric() and len(word)>2):\n            # set as phrase start if phrase start doesn't exist, if not set as end\n            if phrase_start == -1:\n                phrase_start = phrase_end = id\n            else:\n                phrase_end = id\n        elif word not in connection_tokens:\n            # if current phrase fulfils dissimilarity requirement, reset phrase_start\n            if phrase_start != -1:\n                qualified, tmpidxs = candidate_qualified(sentence[phrase_start:phrase_end+1], labels)\n                if qualified:\n                    candidates.append((phrase_start+tmpidxs[0], phrase_end-tmpidxs[1]))\n                phrase_start = phrase_end = -1\n    \n    # to deal with case where phrase end is last word\n    if phrase_start != -1:\n        qualified, tmpidxs = candidate_qualified(sentence[phrase_start:phrase_end+1], labels)\n        if qualified:\n            candidates.append((phrase_start+tmpidxs[0], phrase_end-tmpidxs[1]))\n    \n    return candidates","72ef38f5":"corpus = []\ncnt_pos = 0\ncnt_neg = 0\nneg_phrase = []\n\npbar = tqdm(total = len(train))\nfor paper_id, dataset_labels in train[['Id', 'dataset_label']].itertuples(index=False):\n    labels = [clean_paper_sentence(label).split() for label in dataset_labels.split('|')]\n    with open(f'{paper_train_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n    content = '. '.join(section['text'] for section in paper)\n    sentences = set([clean_paper_sentence(sentence) for sentence in content.split('.')])\n    sentences = shorten_sentences(sentences) # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    sentences = [sentence.split() for sentence in sentences]\n    \n    # positive samples\n    for sentence in sentences:\n        for label in labels:\n            for pos in find_sublist(sentence, label):\n                dt_point = sentence[:pos] + [DATASET_SYMBOL] + sentence[pos+len(label):]\n                corpus.append(' '.join(dt_point))\n                cnt_pos += 1\n    \n    # negative samples\n    for sentence in sentences:\n        sentence_str = ' '.join(sentence)\n        if all(w not in sentence_str for w in {'data', 'study'}):\n            continue\n        for phrase_start, phrase_end in find_negative_candidates(sentence, labels):\n            neg_phrase.append(sentence[phrase_start:phrase_end+1])\n            dt_point = sentence[:phrase_start] + [NONDATA_SYMBOL] + sentence[phrase_end+1:]\n            corpus.append(' '.join(dt_point))\n            cnt_neg += 1\n    \n    # process bar\n    pbar.update(1)\n    pbar.set_description(f'Training data size: {cnt_pos} postives + {cnt_neg} negatives')","66b51d1f":"neg_phrase[0:50]","863b36c4":"corpus[800:810]","925ba571":"with open('train_mlm.json', 'w') as f:\n    for sentence in corpus:\n        row_json = {'text':sentence}\n        json.dump(row_json, f)\n        f.write('\\n')","b45bbe8a":"if VAL:\n    datasets = load_dataset('json',\n                data_files={'train' : 'train_mlm.json'},\n                split = 'train[:80%]')\n    val_datasets = load_dataset('json',\n                    data_files={'train' : 'train_mlm.json'},\n                    split = 'train[80%:]')\nelse:\n    datasets = load_dataset('json',\n                data_files={'train' : 'train_mlm.json'},)\n\n\ndatasets","b1dc6b21":"tokenizer = AutoTokenizer.from_pretrained(model_checkpoint, use_fast=True)","39f12d12":"tokens_to_mask = [tokenizer.encode(sym)[1] for sym in [DATASET_SYMBOL,NONDATA_SYMBOL]]","9427dbf8":"def tokenize_function(examples):\n    return tokenizer(examples[\"text\"])\n\ntokenized_datasets = datasets.map(tokenize_function, batched=True, num_proc=1, remove_columns=[\"text\"])\nval_tokenized_datasets = val_datasets.map(tokenize_function, batched=True, num_proc=1, remove_columns=[\"text\"])","3809691c":"import torch\nfrom torch.nn.utils.rnn import pad_sequence\nfrom typing import Any, Callable, Dict, List, NewType, Optional, Tuple, Union\n\nclass  DataCollator(DataCollatorForLanguageModeling):\n    def __init__(self,tokenizer, tokens_to_mask, mlm_probability=0.00):\n        super(DataCollator, self).__init__(tokenizer=tokenizer, mlm_probability=0.00)\n        self.tokens_to_mask = tokens_to_mask\n    \n    def mask_tokens(\n        self, inputs: torch.Tensor, special_tokens_mask: Optional[torch.Tensor] = None\n    ) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Prepare masked tokens inputs\/labels for masked language modeling: 80% MASK, 10% random, 10% original.\n        \"\"\"\n        labels = inputs.clone()\n        # We sample a few tokens in each sequence for MLM training (with probability `self.mlm_probability`)\n        probability_matrix = torch.full(labels.shape, self.mlm_probability)\n        if special_tokens_mask is None:\n            special_tokens_mask = [\n                self.tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()\n            ]\n            special_tokens_mask = torch.tensor(special_tokens_mask, dtype=torch.bool)\n        else:\n            special_tokens_mask = special_tokens_mask.bool()\n\n        probability_matrix.masked_fill_(special_tokens_mask, value=0.0)\n        for tok in self.tokens_to_mask:\n            probability_matrix.masked_fill_(torch.eq(inputs, tok), value=0.99)\n        masked_indices = torch.bernoulli(probability_matrix).bool()\n        labels[~masked_indices] = -100  # We only compute loss on masked tokens\n\n        # 80% of the time, we replace masked input tokens with tokenizer.mask_token ([MASK])\n        indices_replaced = torch.bernoulli(torch.full(labels.shape, 0.8)).bool() & masked_indices\n        inputs[indices_replaced] = self.tokenizer.convert_tokens_to_ids(self.tokenizer.mask_token)\n\n        # 10% of the time, we replace masked input tokens with random word\n        indices_random = torch.bernoulli(torch.full(labels.shape, 0.5)).bool() & masked_indices & ~indices_replaced\n        random_words = torch.randint(len(self.tokenizer), labels.shape, dtype=torch.long)\n        inputs[indices_random] = random_words[indices_random]\n\n        # The rest of the time (10% of the time) we keep the masked input tokens unchanged\n        return inputs, labels\n\n\ndata_collator = DataCollator(tokenizer, tokens_to_mask, mlm_probability=0.0)","a6d89f56":"model = AutoModelForMaskedLM.from_pretrained(model_checkpoint)","090a7f6c":"from transformers import Trainer, TrainingArguments\n\ntraining_args = TrainingArguments(\n    output_dir=\"output-mlm\",\n    evaluation_strategy = \"steps\",\n    learning_rate=2e-5,\n    weight_decay=0.01,\n    save_steps=2000,\n    num_train_epochs=3,\n    report_to=\"none\",\n    logging_steps = 500,\n    save_total_limit = 1,\n    per_device_train_batch_size = 32,\n    per_device_eval_batch_size = 64,\n    eval_steps = 2000\n    \n)\n\nif VAL:\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=tokenized_datasets,\n        eval_dataset=val_tokenized_datasets,\n        data_collator=data_collator,\n    )\nelse:\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=tokenized_datasets[\"train\"],\n        data_collator=data_collator,\n    )","080c5f99":"trainer.train()","34af4f78":"trainer.model.save_pretrained('mlm-model')","6510e34e":"config = AutoConfig.from_pretrained(model_checkpoint)\n\ntokenizer.save_pretrained('model_tokenizer')\nconfig.save_pretrained('model_tokenizer')","c4fa58dd":"# Install packages","8dbc40d2":"The code below shows how to train a model for that purpose with the help of the `huggingface`.","36ea91d3":"# Prepare data for train MLM","c0d462db":"# Load data","b7d81a59":"# Fine-tune the Transformer","cbcfad0a":"### Save data to a file","3642fbe8":"### Save model","dd580bf2":"### Extract positive and negative samples","9adf77e7":"# Import","87213d54":"This notebook illustrates how to use Masked Language Modeling for this competition.\n\nObservation: most of the dataset names consist of only words with uppercased-first-letter and some stopwords like `on`, `in`, `and` (e.g. `Early Childhood Longitudinal Study`, `Trends in International Mathematics and Science Study`). \n\nThus, one approach to find the datasets is: \n- Locate all the sequences of capitalized words (these sequences may contain some stopwords), \n- Replace each sequence with one of 2 special symbols (e.g. `$` and `#`), implying if that sequence represents a dataset name or not.\n- Have the model learn the MLM task.","76b6930d":"### Auxiliary functions","852322f1":"### Tokenize and collate data","9da34d27":"### Save tokenizer","4b30e384":"### Load pre-trained model and fine-tune"}}