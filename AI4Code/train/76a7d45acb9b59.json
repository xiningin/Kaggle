{"cell_type":{"784e6fea":"code","65bfd750":"code","5a4930e0":"code","d87bf0f9":"code","549aae8d":"code","d7a3b539":"code","f6335454":"code","570f403e":"code","6cdb6042":"code","69e8ddf4":"code","70e1b14b":"code","14928c79":"code","f4ae49a7":"code","ce2ce4a9":"code","3e968af0":"code","6fa50295":"code","22ae5f57":"code","d4cced00":"code","c9b997e6":"code","6aaa8b33":"code","94c800f2":"code","f378d1e0":"code","921cfcee":"code","4346712f":"code","b9cfba8d":"code","4778ca01":"code","b3b49228":"code","57cb37a5":"code","698414cb":"code","2b443f88":"code","495f5715":"code","81c4d789":"code","ef4706a5":"code","a9ca9d4a":"code","ad2b65b2":"code","bef9d1f0":"code","01187e03":"code","097438e6":"code","3e52d9eb":"code","7b1f52ec":"code","767226a1":"code","f2edf59b":"code","b1593083":"code","16b9b39d":"code","509b5a09":"code","3149c95f":"code","59abff69":"code","d022c088":"code","0a480278":"code","a7e61b5b":"code","de6b18b0":"code","20c157f7":"code","fbd20bda":"code","46f8eb7e":"code","46f71545":"code","3becb023":"code","c922fdce":"code","574bbc64":"code","ccd8e161":"code","c6995c14":"code","53b21cb9":"code","b786fafd":"code","9c73da47":"code","2b67a534":"code","e747b414":"code","46f52973":"code","f1ac5b6d":"code","19549ab1":"code","e2bbfb2d":"code","bd83322e":"code","7dcc36fe":"code","a0d80bf5":"code","123d1779":"code","9a8823b5":"code","036a166c":"code","867ac8ee":"code","6d9ff1c6":"code","7d56529a":"code","7e8dc046":"code","00388012":"code","ef545c09":"code","714c4e53":"code","24964506":"code","83c39f4f":"code","10fd2266":"code","7d8dfc7b":"code","8e01fa2b":"code","326b4b73":"code","f777e53b":"markdown","3626c0b6":"markdown","8fe0e112":"markdown","eb2c1be7":"markdown","c7ce3d94":"markdown","8abe1cdd":"markdown","96ddcfb3":"markdown","59aba558":"markdown","4474e405":"markdown","94a607cf":"markdown","c02401d6":"markdown","f2e73d36":"markdown","98e96747":"markdown","a99e56af":"markdown","a251ce06":"markdown","70242367":"markdown","c10774b5":"markdown","806d24d1":"markdown","ebef7c5e":"markdown","62a67977":"markdown","ed7d0ad1":"markdown","893d0416":"markdown"},"source":{"784e6fea":"!pip install langdetect","65bfd750":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer, ENGLISH_STOP_WORDS\nimport math\nimport seaborn as sns\nimport nltk\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom langdetect import detect_langs","5a4930e0":"nltk.download('punkt')","d87bf0f9":"df = pd.read_csv(\"..\/input\/app-store-meditation-app-reviews\/appstore_meditopia.csv\")\ndf.head()","549aae8d":"# unnamed is just a duplicate of the index\ndf.drop('Unnamed: 0', axis=1, inplace=True)","d7a3b539":"df.info()","f6335454":"df.describe()","570f403e":"# look at the dates separately\ndf['year'] = pd.DatetimeIndex(df['date']).year\ndf['month'] = pd.DatetimeIndex(df['date']).month\ndf['day'] = pd.DatetimeIndex(df['date']).day\ndf = df.drop(columns=[\"date\"])\ndf.head()","6cdb6042":"df = df.rename(columns={'developerResponse.body': \"meditopia response\"})\ndf.head()","69e8ddf4":"from nltk import word_tokenize\nword_token = [word_tokenize(review) for review in df.review]\nlen_tokens= [] \n\nfor i in range(len(word_token)):\n    len_tokens.append(len(word_token[i]))\n\ndf[\"n_tokens\"] = len_tokens\ndf.head()","70e1b14b":"df.tail()","14928c79":"lang = [detect_langs(i) for i in df.review]","f4ae49a7":"language = [str(i).split(\":\")[0][1:] for i in lang]","ce2ce4a9":"df[\"lang\"] = language","3e968af0":"df","6fa50295":"(len(df) - len(df[df[\"lang\"] == \"en\"])) \/ len(df)","22ae5f57":"fix = df[df[\"lang\"] != \"en\"]","d4cced00":"fix.rating.mean()","c9b997e6":"# correcting some wrong lang classification\ndf.loc[89, \"lang\"] = \"en\"\ndf.loc[90, \"lang\"] = \"en\"\ndf.loc[131, \"lang\"] = \"en\"\ndf.loc[132, \"lang\"] = \"en\"\ndf.loc[141, \"lang\"] = \"en\"","6aaa8b33":"df.groupby(by=\"lang\").mean()","94c800f2":"# see if there is a correlation on the numeric data\ncorrelation = df.corr()\ncorrelation","f378d1e0":"df[\"year\"].min()","921cfcee":"df[\"year\"].max()","4346712f":"# visualize (there is no correlation)\nsns.heatmap(correlation)\nplt.show()","b9cfba8d":"df.info()","4778ca01":"sns.catplot(x=\"year\",data=df,kind=\"count\")\nplt.show()","b3b49228":"sns.countplot(x=\"year\", data=df, hue=\"rating\");","57cb37a5":"df.columns","698414cb":"sns.catplot(x=\"rating\",data=df,kind=\"count\")\nplt.show()","2b443f88":"sns.catplot(x=\"month\",data=df,kind=\"count\")\nplt.show()","495f5715":"df['review'] = df['review'].str.replace('[^\\w\\s]','')\ndf['review'] = df['review'].str.lower()\ndf.head()","81c4d789":"df.isna().sum()","ef4706a5":"df_1 = df[(df[\"rating\"] == 1) & (df[\"lang\"] == \"en\")]\ndf_2 = df[(df[\"rating\"] == 2) & (df[\"lang\"] == \"en\")]\ndf_3 = df[(df[\"rating\"] == 3) & (df[\"lang\"] == \"en\")]\ndf_4 = df[(df[\"rating\"] == 4) & (df[\"lang\"] == \"en\")]\ndf_5 = df[(df[\"rating\"] == 5) & (df[\"lang\"] == \"en\")]","a9ca9d4a":"text_1 = \" \".join(review for review in df_1.review)\ntext_2 = \" \".join(review for review in df_2.review)\ntext_3 = \" \".join(review for review in df_3.review)\ntext_4 = \" \".join(review for review in df_4.review)\ntext_5 = \" \".join(review for review in df_5.review)","ad2b65b2":"stopwords = set(STOPWORDS)\nstopwords.update([\"meditation\", \"app\", \"meditate\", \"im\", \"meditations\" ,\"thing\"])\n\ncloud_1 = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text_1)\ncloud_2 = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text_2)\ncloud_3 = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text_3)\ncloud_4 = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text_4)\ncloud_5 = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text_5)","bef9d1f0":"width=5\nheight=5\nrows = 1\ncols = 5\naxes=[]\nfig=plt.figure(figsize=(40, 40))\n\nfor a in range(rows*cols):\n    cloud = [cloud_1, cloud_2, cloud_3, cloud_4, cloud_5]\n    axes.append(fig.add_subplot(rows, cols, a+1) )\n    subplot_title=(\"Word Cloud\"+str(a + 1))\n    axes[-1].set_title(subplot_title)  \n    plt.imshow(cloud[a])\nfig.tight_layout()    \nplt.show()","01187e03":"vect = TfidfVectorizer(max_features = 10, stop_words=stopwords)\ntfIdf = vect.fit(df_1.review)\nX = vect.transform(df_1.review)\nX_df = pd.DataFrame(X.toarray(), columns = vect.get_feature_names())\nX_df.head()","097438e6":"len(df_1.index)","3e52d9eb":"stopwords.update([\"really\"])\nvect = TfidfVectorizer(max_features = 15, stop_words=stopwords)\ntfIdf = vect.fit(df_2.review)\nX = vect.transform(df_2.review)\nX_df = pd.DataFrame(X.toarray(), columns = vect.get_feature_names())\nX_df.head()","7b1f52ec":"len(df_2.index)","767226a1":"pd.set_option('display.max_colwidth', -1)","f2edf59b":"print(df_2[df_2['review'].str.contains(\"press\")][\"review\"])","b1593083":"len(df_3.index)","16b9b39d":"vect = TfidfVectorizer(max_features = 15, stop_words=stopwords)\ntfIdf = vect.fit(df_3.review)\nX = vect.transform(df_3.review)\nX_df = pd.DataFrame(X.toarray(), columns = vect.get_feature_names())\nX_df.head()","509b5a09":"len(df_4.index)","3149c95f":"vect = TfidfVectorizer(max_features = 15, stop_words=stopwords)\ntfIdf = vect.fit(df_4.review)\nX = vect.transform(df_4.review)\nX_df = pd.DataFrame(X.toarray(), columns = vect.get_feature_names())\nX_df.head()","59abff69":"len(df_5.index)","d022c088":"vect = TfidfVectorizer(max_features = 15, stop_words=stopwords)\ntfIdf = vect.fit(df_5.review)\nX = vect.transform(df_5.review)\nX_df = pd.DataFrame(X.toarray(), columns = vect.get_feature_names())\nX_df.head()","0a480278":"from textblob import TextBlob ","a7e61b5b":"sentiment = []\n\nfor i in df.review:\n    text = TextBlob(i)\n    sentiment.append(text.sentiment)\n","de6b18b0":"sentiment[2]","20c157f7":"sent = [float(str(i).split(\",\")[0].split(\"=\")[1]) * 100 for i in sentiment]","fbd20bda":"df[\"sentiment\"] = sent","46f8eb7e":"df.head(2)","46f71545":"sns.relplot(x=\"year\", y=\"sentiment\", kind=\"line\", data=df, ci=None);","3becb023":"sns.relplot(x=\"rating\", y=\"sentiment\", kind=\"scatter\", hue=\"year\", data=df);","c922fdce":"my_stopwords = ENGLISH_STOP_WORDS.union([\"meditation\", \"app\", \"meditate\", \"im\", \"meditations\" ,\"thing\"])","574bbc64":"len(df_1[\"review\"])","ccd8e161":"vectorizer = CountVectorizer(ngram_range=(1,3), max_features = 100, max_df=500, stop_words=my_stopwords)\nvectorizer.fit(df_1.review)\nX = vectorizer.transform(df_1.review)","c6995c14":"\"\"\"\nSparse matrix is a matrix which \ncontains very few non-zero elements. When a sparse matrix is represented with a 2-dimensional array, \nwe waste a lot of space to represent that matrix.\n\"\"\"\nX","53b21cb9":"X_df = pd.DataFrame(X.toarray(), columns= vectorizer.get_feature_names() )","b786fafd":"X_df.head()","9c73da47":"X_df.columns","2b67a534":"print(df_1[df_1['review'].str.contains(\"miss\")][\"review\"])","e747b414":"len(df_2.index)","46f52973":"vectorizer = CountVectorizer(ngram_range=(1,2), max_features = 100, max_df=500, stop_words=my_stopwords)\nvectorizer.fit(df_2.review)\nX = vectorizer.transform(df_2.review)\nX_df = pd.DataFrame(X.toarray(), columns= vectorizer.get_feature_names())\nX_df.head()","f1ac5b6d":"X_df.columns","19549ab1":"print(df_2[\"review\"])","e2bbfb2d":"vectorizer = CountVectorizer(ngram_range=(1,2), max_features = 100, max_df=500, stop_words=my_stopwords)\nvectorizer.fit(df_3.review)\nX = vectorizer.transform(df_3.review)\nX_df = pd.DataFrame(X.toarray(), columns= vectorizer.get_feature_names())\nX_df.head()","bd83322e":"X_df.columns","7dcc36fe":"print(df_3[\"review\"])","a0d80bf5":"vectorizer = CountVectorizer(max_features = 100, max_df=500, stop_words=my_stopwords)\nvectorizer.fit(df_4.review)\nX = vectorizer.transform(df_4.review)\nX_df = pd.DataFrame(X.toarray(), columns= vectorizer.get_feature_names())\nX_df.head()","123d1779":"X_df.columns","9a8823b5":"df_4","036a166c":"vectorizer = CountVectorizer(ngram_range=(1,2), max_features = 100, max_df=500, stop_words=my_stopwords)\nvectorizer.fit(df_5.review)\nX = vectorizer.transform(df_5.review)\nX_df = pd.DataFrame(X.toarray(), columns= vectorizer.get_feature_names())\nX_df.head()","867ac8ee":"X_df.columns","6d9ff1c6":"print(df_5[df_5['review'].str.contains(\"meditopia\")][\"review\"])","7d56529a":"from nltk.stem import PorterStemmer, WordNetLemmatizer","7e8dc046":"porter = PorterStemmer()\nWNLemmatizer = WordNetLemmatizer()\ntokens = [word_tokenize(text) for text in df.review]","00388012":"stem = [porter.stem(str(text)) for text in tokens]","ef545c09":"nltk.download('wordnet')","714c4e53":"lem = [WNLemmatizer.lemmatize(str(text)) for text in tokens]","24964506":"stem[0]","83c39f4f":"lem[0]","10fd2266":"list(set(lem) - set(stem))","7d8dfc7b":"df[df[\"lang\"] == \"tr\"]","8e01fa2b":"df.to_csv('meditopia_final_app.csv', index=False) ","326b4b73":"print(df[df['review'].str.contains(\"student\")][\"review\"])","f777e53b":"# Sentiment Analysis","3626c0b6":"### Rating 1","8fe0e112":"## Implementing TF-IDF","eb2c1be7":"There are some errors but removing all non-english tweets will reduce 86 rows.","c7ce3d94":"## Stemming and Lemmatization","8abe1cdd":"### Rating 2","96ddcfb3":"## Bag of Words","59aba558":"## Analyzing MultiLingual Data","4474e405":"## Looking at Turkish Data","94a607cf":"As it can be seen in line 235, there are also some non-English tweets. Let's identify them.","c02401d6":"### Rating 3","f2e73d36":"# Meditopia (TR - US) App Store","98e96747":"## Word Cloud","a99e56af":"### Rating 4","a251ce06":"### Correlation","70242367":"# Understanding the Data","c10774b5":"# Analysing Reviews","806d24d1":"# Import the Libraries","ebef7c5e":"### Rating 5","62a67977":"Calm hasn't responded some of the reviews. Check if there is a relation between comments Calm answered and ratings.","ed7d0ad1":"## Data Visualization","893d0416":"I will only check English tweets."}}