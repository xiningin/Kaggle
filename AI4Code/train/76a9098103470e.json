{"cell_type":{"55de4ef7":"code","41c3d2ae":"code","c7125f2d":"code","326042f0":"code","3da7c9ae":"code","f2c77711":"code","0b5ab340":"code","89711e21":"code","41a0fc48":"code","dd6a4e64":"code","037a64ef":"markdown"},"source":{"55de4ef7":"\n\nimport numpy as np\nimport pandas as pd\n#from sklearn.svm import SVR\n\n#from sklearn.svm import LinearSVR\nfrom sklearn import *\n\nteams = pd.read_csv('..\/input\/datafiles\/Teams.csv')\nteams2 = pd.read_csv('..\/input\/datafiles\/TeamSpellings.csv', encoding='latin-1')\nseason_cresults = pd.read_csv('..\/input\/datafiles\/RegularSeasonCompactResults.csv')\nseason_dresults = pd.read_csv('..\/input\/datafiles\/RegularSeasonDetailedResults.csv')\ntourney_cresults = pd.read_csv('..\/input\/datafiles\/NCAATourneyCompactResults.csv')\ntourney_dresults = pd.read_csv('..\/input\/datafiles\/NCAATourneyDetailedResults.csv')\nslots = pd.read_csv('..\/input\/datafiles\/NCAATourneySlots.csv')\nseeds = pd.read_csv('..\/input\/datafiles\/NCAATourneySeeds.csv')\nseeds = {'_'.join(map(str,[int(k1),k2])):int(v[1:3]) for k1, v, k2 in seeds[['Season', 'Seed', 'TeamID']].values}\nseeds = {**seeds, **{k.replace('2018_','2019_'):seeds[k] for k in seeds if '2018_' in k}}\nmo = pd.read_csv('..\/input\/masseyordinals\/MasseyOrdinals.csv')\nmo = {'_'.join(map(str,[int(k1),k2])):int(v) for k1, v, k2 in mo[['Season','OrdinalRank','TeamID']].values}\nmo = {**mo, **{k.replace('2018_','2019_'):mo[k] for k in mo if '2018_' in k}}\ncities = pd.read_csv('..\/input\/datafiles\/Cities.csv')\ngcities = pd.read_csv('..\/input\/datafiles\/GameCities.csv')\nseasons = pd.read_csv('..\/input\/datafiles\/Seasons.csv')\nsub = pd.read_csv('..\/input\/SampleSubmissionStage1.csv')\n\n","41c3d2ae":"teams2 = teams2.groupby(by='TeamID', as_index=False)['TeamNameSpelling'].count()\nteams2.columns = ['TeamID', 'TeamNameCount']\nteams = pd.merge(teams, teams2, how='left', on=['TeamID'])\ndel teams2","c7125f2d":"season_cresults['ST'] = 'S'\nseason_dresults['ST'] = 'S'\ntourney_cresults['ST'] = 'T'\ntourney_dresults['ST'] = 'T'\n#games = pd.concat((season_cresults, tourney_cresults), axis=0, ignore_index=True)\ngames = pd.concat((season_dresults, tourney_dresults), axis=0, ignore_index=True)\ngames.reset_index(drop=True, inplace=True)\ngames['WLoc'] = games['WLoc'].map({'A': 1, 'H': 2, 'N': 3})","326042f0":"games['ID'] = games.apply(lambda r: '_'.join(map(str, [r['Season']]+sorted([r['WTeamID'],r['LTeamID']]))), axis=1)\ngames['IDTeams'] = games.apply(lambda r: '_'.join(map(str, sorted([r['WTeamID'],r['LTeamID']]))), axis=1)\ngames['Team1'] = games.apply(lambda r: sorted([r['WTeamID'],r['LTeamID']])[0], axis=1)\ngames['Team2'] = games.apply(lambda r: sorted([r['WTeamID'],r['LTeamID']])[1], axis=1)\ngames['IDTeam1'] = games.apply(lambda r: '_'.join(map(str, [r['Season'], r['Team1']])), axis=1)\ngames['IDTeam2'] = games.apply(lambda r: '_'.join(map(str, [r['Season'], r['Team2']])), axis=1)","3da7c9ae":"games['Team1Seed'] = games['IDTeam1'].map(seeds).fillna(0)\ngames['Team2Seed'] = games['IDTeam2'].map(seeds).fillna(0)\ngames['Team1MO'] = games['IDTeam1'].map(mo).fillna(0)\ngames['Team2MO'] = games['IDTeam2'].map(mo).fillna(0)","f2c77711":"games['ScoreDiff'] = games['WScore'] - games['LScore']\ngames['Pred'] = games.apply(lambda r: 1. if sorted([r['WTeamID'],r['LTeamID']])[0]==r['WTeamID'] else 0., axis=1)\ngames['ScoreDiffNorm'] = games.apply(lambda r: r['ScoreDiff'] * -1 if r['Pred'] == 0. else r['ScoreDiff'], axis=1)\ngames['SeedDiff'] = games['Team1Seed'] - games['Team2Seed']\ngames['MODiff'] = games['Team1MO'] - games['Team2MO']\ngames = games.fillna(-1)","0b5ab340":"#competitiveness include more options - overfitting for now\nc_score_col = ['NumOT', 'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl',\n 'WBlk', 'WPF', 'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl',\n 'LBlk', 'LPF']\nc_score_agg = ['sum', 'mean', 'median', 'max', 'min', 'std', 'skew', 'nunique']\ngb = games.groupby(by=['IDTeams']).agg({k: c_score_agg for k in c_score_col}).reset_index()\ngb.columns = [''.join(c) + '_c_score' for c in gb.columns]\n\n#for now\ngames = games[games['ST']=='T']","89711e21":"sub['WLoc'] = 3\nsub['Season'] = sub['ID'].map(lambda x: x.split('_')[0])\nsub['Season'] = sub['ID'].map(lambda x: x.split('_')[0])\nsub['Season'] = sub['Season'].astype(int)\nsub['Team1'] = sub['ID'].map(lambda x: x.split('_')[1])\nsub['Team2'] = sub['ID'].map(lambda x: x.split('_')[2])\nsub['IDTeams'] = sub.apply(lambda r: '_'.join(map(str, [r['Team1'], r['Team2']])), axis=1)\nsub['IDTeam1'] = sub.apply(lambda r: '_'.join(map(str, [r['Season'], r['Team1']])), axis=1)\nsub['IDTeam2'] = sub.apply(lambda r: '_'.join(map(str, [r['Season'], r['Team2']])), axis=1)\nsub['Team1Seed'] = sub['IDTeam1'].map(seeds).fillna(0)\nsub['Team2Seed'] = sub['IDTeam2'].map(seeds).fillna(0)\nsub['Team1MO'] = sub['IDTeam1'].map(mo).fillna(0)\nsub['Team2MO'] = sub['IDTeam2'].map(mo).fillna(0)\nsub['SeedDiff'] = sub['Team1Seed'] - sub['Team2Seed'] \nsub['MODiff'] = sub['Team1MO'] - sub['Team2MO']\nsub = sub.fillna(-1)","41a0fc48":"games = pd.merge(games, gb, how='left', left_on='IDTeams', right_on='IDTeams_c_score')\nsub = pd.merge(sub, gb, how='left', left_on='IDTeams', right_on='IDTeams_c_score')","dd6a4e64":"col = [c for c in games.columns if c not in ['ID', 'DayNum', 'ST', 'Team1', 'Team2', 'IDTeams', 'IDTeam1', 'IDTeam2', 'WTeamID', 'WScore', 'LTeamID', 'LScore', 'NumOT', 'Pred', 'ScoreDiff', 'ScoreDiffNorm', 'WLoc'] + c_score_col]\n\n#reg = LinearSVR(epsilon=2.5)\n#reg = SVR(kernel=\"poly\", degree=2, C=100, epsilon=0.1)\nreg = linear_model.LogisticRegression()\nreg.fit(games[col].fillna(-1), games['Pred'])\npred = reg.predict(games[col].fillna(-1)).clip(0,1)\nprint('Log Loss:', metrics.log_loss(games['Pred'], pred))\nsub['Pred'] = reg.predict(sub[col].fillna(-1)).clip(0,1)\nsub[['ID', 'Pred']].to_csv('submission.csv', index=False)","037a64ef":"better with non-linearSVR but it will take a really long time "}}