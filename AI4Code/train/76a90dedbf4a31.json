{"cell_type":{"5bdd55d3":"code","fb89e49f":"code","2db1f46c":"code","737cd882":"code","72b7f45a":"code","2c92f51c":"code","af2e4e14":"code","e3fb0af1":"code","09b8d5b8":"code","cfe4a440":"code","adf80f3a":"code","0b46f86a":"code","1f5057a9":"code","f4ca1a1c":"code","5f5edee9":"code","f8fa1adb":"code","f66cabb6":"code","f63e884d":"code","cb6203f5":"code","bbd216dd":"code","c41bd791":"code","41f25328":"code","0aebb244":"code","c49c156d":"code","11a8a30c":"code","f3ca67b0":"code","8f23be48":"code","72a671fd":"markdown","c4322468":"markdown","7d591223":"markdown","ce7bddab":"markdown","5ca516c7":"markdown","46acca72":"markdown","6daf7b1b":"markdown","6c8a2d48":"markdown","f0cc4f60":"markdown","693c74e6":"markdown","681d6244":"markdown","52a12aa4":"markdown","ea950519":"markdown","9110f19b":"markdown","a23cd484":"markdown","a1d1c0e7":"markdown","2939aaa4":"markdown","280d1c2d":"markdown"},"source":{"5bdd55d3":"import pandas as pd \n\nfrom sklearn import linear_model\nfrom sklearn import model_selection\n\nfrom datetime import datetime","fb89e49f":"path = '\/kaggle\/input\/certificatbigdata'","2db1f46c":"train = pd.read_csv(f'{path}\/train.csv', low_memory = False)\ntrain = train.assign(test=False)","737cd882":"train['date'] = pd.to_datetime(train['date'])","72b7f45a":"train.head()","2c92f51c":"train['day'] = train['date'].dt.weekday","af2e4e14":"_ = train[\n    (train['id'] == 618) & (train['open'] == 1) & (train['day'] == 3)\n].plot(x = 'date', y = 'y', figsize = (20, 5))","e3fb0af1":"test = pd.read_csv(f'{path}\/test.csv', low_memory = False)\ntest = test.assign(test=True)","09b8d5b8":"test.head()","cfe4a440":"submission =  pd.read_csv(f'{path}\/sample_submission.csv', low_memory = False)","adf80f3a":"submission.head()","0b46f86a":"df = pd.concat([train, test], axis = 'rows')","1f5057a9":"df.head()","f4ca1a1c":"stats_sells = df[df['test'] == False].groupby(['id'])['y'].agg(['mean', 'max', 'min', 'std']).copy()\nstats_sells.head()","5f5edee9":"df = pd.merge(\n    left = df, right = stats_sells.reset_index(), on = 'id', how = 'left'\n)","f8fa1adb":"df.head()","f66cabb6":"X_train = df[df['test'] == False].copy()","f63e884d":"y_train = X_train['y']","cb6203f5":"X_test =  df[df['test']].copy()","bbd216dd":"features = ['customers', 'open', 'promo', 'test', 'mean', 'max', 'min', 'std']","c41bd791":"X_train = X_train[features]","41f25328":"X_test = X_test[features]","0aebb244":"def MAE(y_pred, y_true):\n    return (y_pred - y_true).abs().mean()","c49c156d":"cv = model_selection.KFold(5, random_state=42, shuffle = True)\n\nfor i, (fit, val) in enumerate(cv.split(X_train)):\n    \n    # Train set:\n    X_fit = X_train.loc[fit]\n    y_fit = y_train.loc[fit]\n    \n    # Validation set:\n    X_val = X_train.loc[val]\n    y_val = y_train.loc[val]\n    \n    model = linear_model.LinearRegression()\n    \n    # Train the model:\n    model.fit(X_fit, y_fit)\n    \n    # Evaluate the model:\n    error = MAE(model.predict(X_val), y_val)\n    \n    print(f'Fold {i + 1}, MAE: {error:6f}')","11a8a30c":"model = linear_model.LinearRegression()\n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)","f3ca67b0":"submission['y'] = y_pred\n\nsubmission.head()","8f23be48":"submission.to_csv('.\/submission.csv', index=False)","72a671fd":"#### Mean Absolute Error metric:","c4322468":"#### Export the submission file to csv:","7d591223":"#### Merge the computed features to the original dataframe:","ce7bddab":"Extract test set:","5ca516c7":"#### The sample submission file is a baseline (a very simple model). I use this file to format my prediction. This file has a valid format for prediction.","46acca72":"#### This notebook is dedicated to the students who follow the TPs and the courses of the Big Data certificate. The purpose of this notebook is to provide a basis on which you can build your first model.","6daf7b1b":"#### Train the model on the complete train set and predict sells of the test set:","6c8a2d48":"Extract training set:","f0cc4f60":"#### The column `y` of the test set is set to 0. Your goal is to retrieve the values of the target variable.","693c74e6":"#### Convert date column to datetime using pandas:","681d6244":"#### Computing some features:\n\nFeature computation is the key to a good machine learning model. Features should help your model to modelize the problem. Each time you add a feature, it is essential to validate your model to determine if the feature is useful or not. If the feature is useless, don't keep it.\n\nHere, I compute some statistics directly on the target variable:\n\nmean, max, min, std of y group by id store:","52a12aa4":"#### Features to keep:\n\nHere I list all the features I will use to train my model:","ea950519":"#### Sells of the shop 618 when it's open and day is equal to 3:","9110f19b":"#### Loading the train set:","a23cd484":"#### Loading the test set:","a1d1c0e7":"#### Cross-validation:\n\nHere I choose to use cross-validation to measure the quality of my model. In practice, cross-validation is not always appropriate (especially for time series). Here we can use cross-validation because the test and train data are not separated across the time.","2939aaa4":"#### Validation of my model:","280d1c2d":"#### Extract the week day from the date:"}}