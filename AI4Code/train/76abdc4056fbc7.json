{"cell_type":{"68fb1eda":"code","694257af":"code","53b7900b":"code","8f119a04":"code","503ce945":"code","cd920f6c":"code","661bae33":"code","f31c55fa":"code","050b6c96":"code","f9d3c975":"markdown","74b5e1bc":"markdown","8f80d1af":"markdown","8903fd71":"markdown","34bb67b5":"markdown","f70281ad":"markdown","d9826f43":"markdown"},"source":{"68fb1eda":"import gc\nfrom tqdm import tqdm\nfrom tqdm._tqdm import trange\nimport numpy as np\nimport pandas as pd\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.stats import probplot\nfrom fbprophet import Prophet\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","694257af":"folder = '\/kaggle\/input\/m5-forecasting-accuracy\/'\ncalendar = pd.read_csv(folder+'calendar.csv')\nvalidation = pd.read_csv(folder+'sales_train_validation.csv')\nsubmission = pd.read_csv(folder+'sample_submission.csv')\n\nsubmission = submission[submission.id.str.find('validation')!=-1]\nvalidation = validation.merge(submission, on='id', how='left')\nvalidation = validation.drop(['item_id','dept_id','cat_id','store_id','state_id'], axis=1)\n\nvalid_cols = ['d_'+str(1913+i) for i in range(1,29)]\nvalidation.columns = validation.columns.tolist()[:-28]+valid_cols\nvalidation.columns","53b7900b":"submission","8f119a04":"validation","503ce945":"item1 = validation.iloc[0]\nitem1 = item1.drop('id').T.reset_index().merge(calendar[['d','date']], left_on='index', right_on='d', how='left').drop(['index','d'], axis=1)\nitem1.columns = ['y', 'ds']\nitem1.y = item1.y.astype('float')\nitem1.ds = item1.ds.astype('datetime64')\n\nrcParams['figure.figsize'] = 20, 5\nplt.plot(item1.ds, item1.y)","cd920f6c":"item = validation.iloc[0]\nitem = item.drop('id').T.reset_index().merge(calendar[['d','date']], left_on='index', right_on='d', how='left').drop(['index','d'], axis=1)\nitem.columns = ['y', 'ds']\nitem.y = item.y.astype('float')\nitem.ds = item.ds.astype('datetime64')\ntrain_item = item.iloc[:-28]\nvalid_item = item.iloc[-28:]\n\n#ph = Prophet()\n\n# PARAMETROS DEL MODELO\ngr ='linear' #'linear' or 'logistic' trend\nsm ='multiplicative' #'additive' (default) or 'multiplicative'\niw = 0.8\nds = False #'auto' True or False \nys = True #'auto' True or False\nws = True #'auto' True or False\nfom = 20 #fourier order mensual\np = 10 #horizonte de prediccion (periods)\nph = Prophet(growth= gr,\n            seasonality_mode= sm,\n            interval_width = iw,\n            #changepoint_range = cr,\n            #changepoint_prior_scale=0.07, \n            daily_seasonality= ds, \n            yearly_seasonality= ys,\n            weekly_seasonality= ws).add_seasonality(\n                            name='mensual', period=30.5,fourier_order=fom)\n\nph.fit(train_item)\nforecast = ph.predict(item[['ds']])\nfigure = ph.plot(forecast)\nfigure.show()","661bae33":"for i in trange(len(validation)):\n    item = validation.iloc[i]\n    item_id = item.id\n    item = item.drop('id').T.reset_index().merge(calendar[['d','date']], left_on='index', right_on='d', how='left').drop(['index','d'], axis=1)\n    item.columns = ['y', 'ds']\n    item.y = item.y.astype('float')\n    item.ds = item.ds.astype('datetime64')\n    train_item = item.iloc[:-28]\n    valid_item = item.iloc[-28:]\n\n    # ph = Prophet()\n    # PARAMETROS DEL MODELO\n    gr ='linear' #'linear' or 'logistic' trend\n    sm ='multiplicative' #'additive' (default) or 'multiplicative'\n    iw = 0.8\n    ds = False #'auto' True or False \n    ys = True #'auto' True or False\n    ws = True #'auto' True or False\n    fom = 20 #fourier order mensual\n    p = 10 #horizonte de prediccion (periods)\n    ph = Prophet(growth= gr,\n                seasonality_mode= sm,\n                interval_width = iw,\n                #changepoint_range = cr,\n                #changepoint_prior_scale=0.07, \n                daily_seasonality= ds, \n                yearly_seasonality= ys,\n                weekly_seasonality= ws).add_seasonality(\n                                name='mensual', period=30.5,fourier_order=fom)\n    ph.fit(train_item)\n    forecast = ph.predict(valid_item[['ds']])\n    validation.iloc[i, -28:] = forecast.yhat.tolist()\n    break # FIXME","f31c55fa":"submission_prophet = validation[['id']+valid_cols]\nsubmission_prophet.columns = ['id']+['F'+str(i) for i in range(1,29)]\nsubmission_prophet_eval = submission_prophet.copy()\nsubmission_prophet_eval.id = submission_prophet_eval.id.apply(lambda _id:_id.replace('_validation','_evaluation'))\nsubmission_prophet = pd.concat([submission_prophet, submission_prophet_eval])\nsubmission_prophet","050b6c96":"submission_prophet.to_csv('submission_prophet.csv', index=False)","f9d3c975":"## Take a look\n\n`Prophet` model is a traditional time series analysis model. It doesn't need or can't make use of price data. For date information, it can be passed in by a way similar to super parameter. But we will do this later. For now, we only consider the simplest prediction of Prophet model.","74b5e1bc":"## Predict each store&item in valid date\n\nIt takes about 20 hours to run. It needs to run offline. Just remove `break`.","8f80d1af":"# Simple Baseline with Prophet\n\nCompetition data files introduction\uff1a\n- calendar.csv - Contains information about the dates on which the products are sold.\n- sales_train_validation.csv - Contains the historical daily unit sales data per product and store \\[d_1 - d_1913\\]\n- sample_submission.csv - The correct format for submissions. Reference the Evaluation tab for more info.\n- sell_prices.csv - Contains information about the price of the products sold per store and date.\n- sales_train_evaluation.csv - Available once month before competition deadline. Will include sales \\[d_1 - d_1941\\]\nTarget\uff1a predicting item sales at stores in various locations for two 28-day time periods.\n\nEvaluation\uff1aRMSSE.\n\nIf you like it, please upvote me, and I really need a bronze, and please comment if you have some advise or find my error in this kernel. Let's have fun.","8903fd71":"The end.","34bb67b5":"## Build submission file","f70281ad":"## Test prophet in one row","d9826f43":"\n\n### Other EDA kernel abount this competition\n\n- [M5 Forecasting - Accuracy EDA](https:\/\/www.kaggle.com\/holoong9291\/eda-for-m5-en)\n- [M5 Forecasting - Uncertainty EDA](https:\/\/www.kaggle.com\/holoong9291\/eda-for-m5-2-en)\n"}}