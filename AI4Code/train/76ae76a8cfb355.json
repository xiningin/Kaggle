{"cell_type":{"1c5c0d7c":"code","94f9222c":"code","e405c441":"code","c3707460":"code","63922c59":"code","7c17394e":"code","3ae0d687":"markdown","b9b6d1ae":"markdown","e22f712e":"markdown","caf12ff0":"markdown","e5497823":"markdown"},"source":{"1c5c0d7c":"import os\nimport cv2\nimport csv\nimport numpy as np\nfrom time import time\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, BatchNormalization\nimport matplotlib.pyplot as plt\n%matplotlib inline","94f9222c":"dir = '..\/input\/gtsrb-german-traffic-sign'\n    \nplt.figure(figsize=(10, 10))\nfor i in range (0,43):\n    plt.subplot(7,7,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    path = dir + \"\/meta\/{0}.png\".format(i)\n    img = plt.imread(path)\n    plt.imshow(img)\n    plt.xlabel(i)","e405c441":"def preprocess(image, out_side):\n    height, width = image.shape[:2]\n    scale = out_side \/ max(height, width)\n    dx = (out_side - scale * width) \/ 2\n    dy = (out_side - scale * height) \/ 2\n    trans = np.array([[scale, 0, dx], [0, scale, dy]], dtype=np.float32)\n    image = cv2.warpAffine(image, trans, (out_side, out_side), flags=cv2.INTER_AREA)\n    image = cv2.resize(image, (out_side, out_side))\n    return image\n\ndef mixing(images, labels):\n    images = np.array(images)\n    labels = np.array(labels)\n    s = np.arange(images.shape[0])\n    np.random.seed(43)\n    np.random.shuffle(s)\n    images=images[s]\n    labels=labels[s]\n    return images, labels\n\ndef load_train(path, out_side):\n    images = []\n    labels = []\n    for folder in os.listdir(os.path.join(path, 'Train')):\n        cur_path = os.path.join(path, 'Train', folder)\n        for file_name in os.listdir(cur_path):\n            image = cv2.imread(os.path.join(cur_path, file_name))\n            images.append(preprocess(image, out_side))\n            labels.append(int(folder))\n\n    return mixing(images, labels)\n\ndef load_test(path, out_side):\n    images = []\n    labels = []\n    with open(os.path.join(path, 'Test.csv'), 'r') as f:\n        reader = csv.reader(f)\n        for rows in reader:\n            name = rows[7]\n            if (name == 'Path'):\n                continue\n            image = cv2.imread(os.path.join(path, rows[7]))\n            images.append(preprocess(image, out_side))\n            labels.append(int(rows[6]))\n\n    return mixing(images, labels)","c3707460":"start = time()\n\ntrain_images, train_labels = load_train(dir + \"\/\", 50)\ntest_images, test_labels = load_test(dir + \"\/\", 50)\nshape = train_images[0].shape\nprint(shape)\n\ntrain_images = train_images.astype('float32') \/ 255.\ntest_images = test_images.astype('float32') \/ 255.\n\ntrain_labels = utils.to_categorical(train_labels, 43)\ntest_labels = utils.to_categorical(test_labels, 43)\n\nprint('Loading: ', time() - start)","63922c59":"classes = 43\nbatch = 256\nepochs = 10\nlearning_rate = 0.001\n\ndef results(model):\n  adam = Adam(lr=learning_rate)\n\n  model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])\n\n  start = time()\n  history = model.fit(train_images, train_labels, batch_size=batch, epochs=epochs, validation_split=0.2, shuffle = True, verbose=1)\n  train_time = time() - start\n\n  model.summary()\n\n  plt.figure(figsize=(12, 12))\n  plt.subplot(3, 2, 1)\n  plt.plot(history.history['accuracy'], label = 'train_accuracy')\n  plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n  plt.xlabel('epoch')\n  plt.ylabel('accuracy')\n  plt.legend()\n  plt.subplot(3, 2, 2)\n  plt.plot(history.history['loss'], label = 'train_loss')\n  plt.plot(history.history['val_loss'], label = 'val_loss')\n  plt.xlabel('epoch')\n  plt.ylabel('accuracy')\n  plt.legend()\n  plt.show()\n\n  start = time()\n  test_loss, test_acc = model.evaluate(test_images, test_labels)\n  test_time = time() - start\n  print('\\nTrain time: ', train_time)\n  print('Test accuracy:', test_acc)\n  print('Test loss:', test_loss)\n  print('Test time: ', test_time)","7c17394e":"model = Sequential()\nmodel.add(Conv2D(256, (3, 3), padding='same', input_shape=(50, 50, 3), activation='tanh'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128, (3, 3), padding='same', activation='tanh'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3), padding='same', activation='tanh'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='sigmoid'))\nmodel.add(Dense(43, activation='softmax'))\n\nresults(model)","3ae0d687":"## Loading","b9b6d1ae":"# GTSRB Classification with CNN","e22f712e":"## Network","caf12ff0":"## The data","e5497823":"## Configuration"}}