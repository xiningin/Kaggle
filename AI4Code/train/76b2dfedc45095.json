{"cell_type":{"81c66e66":"code","bba5c62b":"code","8e4fda20":"code","71a3ec44":"code","ffb6380a":"code","4899c0b8":"code","2108d7f6":"code","8d5988f9":"code","e5277476":"code","ae0790c4":"code","943885ad":"code","d955d49a":"code","30e0de77":"code","59eb85a3":"code","ecf8abeb":"code","0597a6bf":"markdown"},"source":{"81c66e66":"!pip install mlxtend","bba5c62b":"!pip install openpyxl","8e4fda20":"import pandas as pd\npd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\nfrom mlxtend.frequent_patterns import apriori, association_rules\ndf = pd.read_excel(\"..\/input\/online-retail-ii-uci\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")","71a3ec44":"def check_df(dataframe, head=5):\n    print(\"########## SHAPE ##########\")\n    print(dataframe.shape)\n    print(\"########## TYPES ##########\")\n    print(dataframe.dtypes)\n    print(\"########## HEAD ##########\")\n    print(dataframe.head(head))\n    print(\"########## TAIL ##########\")\n    print(dataframe.tail(head))\n    print(\"########## NA ##########\")\n    print(dataframe.isnull().sum())\n    print(\"########## QUANTILES ##########\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\ndef retail_data_prep(dataframe):\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe\n\ndef create_invoice_product_df(dataframe, id=True):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n\ndef check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)\n\ndef create_rules(dataframe, id=True, country=\"France\"):\n    dataframe = dataframe[dataframe['Country'] == country]\n    dataframe = create_invoice_product_df(dataframe, id)\n    frequent_itemsets = apriori(dataframe, min_support=0.01, use_colnames=True)\n    rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\n    return rules\n\ndef arl_recommender(rules_df, product_id, rec_count=1):\n    sorted_rules = rules_df.sort_values(\"lift\", ascending=False)\n    recommendation_list = []\n    for i, product in enumerate(sorted_rules[\"antecedents\"]):\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\n\n    return recommendation_list[0:rec_count]","ffb6380a":"df = retail_data_prep(df)","4899c0b8":"rules_grm = create_rules(df, country=\"Germany\")","2108d7f6":"check_id(df, 21987)","8d5988f9":"check_id(df, 23235)","e5277476":"check_id(df, 22747)","ae0790c4":"arl_recommender(rules_grm, 21987, 1)","943885ad":"arl_recommender(rules_grm, 23235, 1)","d955d49a":"arl_recommender(rules_grm, 22747, 1)","30e0de77":"check_id(df, 21988)","59eb85a3":"check_id(df, 23244)","ecf8abeb":"check_id(df, 22746)","0597a6bf":"<h2 style='background:#11489c; border:0; color:white'><center>Association Rule Learning Recommender<\/center><\/h2>\n\nOur aim is to suggest products to users in the product purchasing process by applying association analysis to the data set\n\n<a href=\"https:\/\/ibb.co\/C89TYqr\"><img src=\"https:\/\/i.ibb.co\/fFNPybc\/0-X115pgr-T2-PEc-T-1-P.png\" alt=\"0-X115pgr-T2-PEc-T-1-P\" border=\"0\"><\/a>\n\n<h2 style='background:#11489c; border:0; color:white'><center>Sections<\/center><\/h2>\n\n* Data Preprocessing\n* Preparing the ARL Data Structure (Invoice-Product Matrix)\n* Determination of Association Rules\n* Functionalization of the study\n* Suggesting products to users at the basket stage\n* Simple Recommender Systems\n* Association Rule Learning\n* Content Based Filtering\n* Collaborative Filtering\n\n<h2 style='background:#11489c; border:0; color:white'><center>Apriori Algorithm<\/center><\/h2>\n\nBasket analysis method, used to reveal product associations\n\n<a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/i.ibb.co\/wBRPc57\/img054.jpg\" alt=\"img054\" border=\"0\"><\/a>\n\n<span style=\"color:blue\">Support(X, Y) = Freq(X,Y)\/N<\/span>\n* Probability of X and Y occurring together\n\n<span style=\"color:blue\">Confidence(X, Y) = Freq(X,Y)\/Freq(X)<\/span>\n* Probability of selling Y when X is bought\n\n<span style=\"color:blue\">Lift = Support(X,Y) \/ (Support(X) * Support(Y))<\/span>\n* When X is purchased, the probability of buying Y increases by a factor of lift"}}