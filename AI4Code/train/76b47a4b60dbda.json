{"cell_type":{"f074409c":"code","8463e8ff":"code","84ce68a0":"code","f1b058e7":"code","3e085a41":"code","b9ac1731":"code","3945f916":"code","17bd3d34":"code","ff974d53":"code","226c1187":"code","164c9fb2":"code","d8d13d8e":"code","d67a4ba3":"code","5eba468b":"code","5cb06dbb":"code","f06c3612":"code","1f7b4d1d":"code","58a8514b":"code","17f89917":"code","433f0b82":"code","0546c800":"code","bb80848b":"code","1185fa38":"code","1a9c8b34":"code","1a452c91":"code","952ed152":"code","1beafd5a":"markdown","61bd1116":"markdown","ab82a1f2":"markdown","479a7ae7":"markdown","92cf8438":"markdown","965d5639":"markdown","905cd6be":"markdown","b9d990f5":"markdown","c00e4263":"markdown","f77cda93":"markdown","5f622ec8":"markdown","39a5e407":"markdown","15464422":"markdown","1671b849":"markdown","cb4e4797":"markdown","481bd116":"markdown","49e16231":"markdown","14f69b28":"markdown","b90b79fa":"markdown","de3f82bc":"markdown"},"source":{"f074409c":"# Setup\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport math \n\npd.plotting.register_matplotlib_converters()\nsns.set_style(\"whitegrid\")\n\n# load data\npatient_path = \"..\/input\/coronavirusdataset\/patient.csv\"\ntime_path = \"..\/input\/coronavirusdataset\/time.csv\"\nroute_path = \"..\/input\/coronavirusdataset\/route.csv\"\npatient = pd.read_csv(patient_path, index_col=\"id\")\ntime = pd.read_csv(time_path, index_col=\"176\") # temporary fix orig. col name \"date\"\ntime.index.name=\"date\"\nroute = pd.read_csv(route_path, index_col=\"id\")","8463e8ff":"print(f\"Last Update: {pd.datetime.today().strftime('%m\/%d\/%Y')}\")","84ce68a0":"patient.head()","f1b058e7":"patient.info()","3e085a41":"time.head()","b9ac1731":"# format date columns:\ndate_cols = [\"confirmed_date\", \"released_date\", \"deceased_date\"]\nfor col in date_cols:\n    patient[col] = pd.to_datetime(patient[col])\n\ntime.index = pd.to_datetime(time.index)\n\n# Derive features:\n\n#status by gender:\npatient[\"state_by_gender\"] = patient[\"state\"] + \"_\" + patient[\"sex\"]\n\n# age:\n# approximation, using 2019 - assuming 3\/4 are born after march\/current month of 2020\npatient[\"age\"] = 2019 - patient[\"birth_year\"]\n\n\ndef group_age(age):\n    \"\"\"This function is used to group patients by age\n    in steps of 10 years. It returns the age range\n    of the patient as a string.\n    \"\"\"\n    if age >= 0: # not NaN\n        if age % 10 != 0:\n            lower = int(math.floor(age \/ 10.0)) * 10\n            upper = int(math.ceil(age \/ 10.0)) * 10 - 1\n            return f\"{lower}-{upper}\"\n        else:\n            lower = int(age)\n            upper = int(age + 9) \n            return f\"{lower}-{upper}\"\n    return \"Unknown\"\n\n\npatient[\"age_range\"] = patient[\"age\"].apply(group_age)\n\n# duration of infection:\npatient[\"time_to_release_since_confirmed\"] = patient[\"released_date\"] - patient[\"confirmed_date\"]\npatient[\"time_to_death_since_confirmed\"] = patient[\"deceased_date\"] - patient[\"confirmed_date\"]\npatient[\"duration_since_confirmed\"] = patient[[\"time_to_release_since_confirmed\", \"time_to_death_since_confirmed\"]].min(axis=1)\npatient[\"duration_days\"] = patient[\"duration_since_confirmed\"].dt.days\n\n# for mortality rate:\npatient[\"state_deceased\"] = (patient[\"state\"] == \"deceased\").astype(\"int8\")","3945f916":"fig=go.Figure()\nfig.add_trace((go.Scatter(x=time.index, y=time[\"acc_test\"],\n                    mode='lines',\n                    name=\"Accumulated tests\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"acc_negative\"],\n                    mode='lines',\n                    name=\"Accumulated negative tests\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"acc_confirmed\"],\n                    mode='lines',\n                    name=\"Accumulated positive tests\")))\nfig.update_layout(title=\"Accumulated test results\",\n                   xaxis_title=\"Date\",\n                   yaxis_title=\"Count\")\nfig.show()\n\nfig=go.Figure()\nfig.add_trace((go.Scatter(x=time.index, y=time[\"new_test\"],\n                    mode='lines',\n                    name=\"Daily tests\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"new_negative\"],\n                    mode='lines',\n                    name=\"Daily negative tests\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"new_confirmed\"],\n                    mode='lines',\n                    name=\"Daily positive tests\")))\nfig.update_layout(title=\"Daily test results\",\n                   xaxis_title=\"Date\",\n                   yaxis_title=\"Count\")\nfig.show()","17bd3d34":"fig=go.Figure()\nfig.add_trace((go.Scatter(x=time.index, y=time[\"acc_confirmed\"],\n                    mode='lines',\n                    name=\"Accumulated confirmed\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"acc_released\"],\n                    mode='lines',\n                    name=\"Accumulated released\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"acc_deceased\"],\n                    mode='lines',\n                    name=\"Accumulated deceased\")))\nfig.update_layout(title=\"Accumulated cases\",\n                   xaxis_title=\"Date\",\n                   yaxis_title=\"Count\")\nfig.show()\n\nfig=go.Figure()\nfig.add_trace((go.Scatter(x=time.index, y=time[\"new_confirmed\"],\n                    mode='lines',\n                    name=\"New confirmed\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"new_released\"],\n                    mode='lines',\n                    name=\"New released\")))\nfig.add_trace((go.Scatter(x=time.index, y=time[\"new_deceased\"],\n                    mode='lines',\n                    name=\"New deceased\")))\nfig.update_layout(title=\"New daily cases\",\n                   xaxis_title=\"Date\",\n                   yaxis_title=\"Count\")\nfig.show()","ff974d53":"route_map = folium.Map(location=[36.5,128],\n                       min_zoom=3,\n                       max_zoom=10,\n                       zoom_start=7,\n                       tiles=\"cartodbpositron\")\nfor lat, lon in zip(route[\"latitude\"], route[\"longitude\"]):\n    folium.Circle([lat, lon],\n                  color=\"crimson\",\n                  radius=3).add_to(route_map)\nroute_map","226c1187":"# Reason of infection\nreason_order = list(patient[\"infection_reason\"].value_counts().index)\n\nplt.figure(figsize=(12, 8))\nsns.countplot(y = \"infection_reason\",\n              data=patient,\n              order=reason_order)\nplt.title(\"Known reasons of infection\", fontsize=16)\nplt.xlabel(\"Count\", fontsize=16)\nplt.ylabel(\"Reason of infection\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","164c9fb2":"states = pd.DataFrame(patient[\"state\"].value_counts())\nstates[\"status\"] = states.index\nstates.rename(columns={\"state\": \"count\"}, inplace=True)\n\nfig = px.pie(states,\n             values=\"count\",\n             names=\"status\",\n             title=\"Current state of patients\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"value+percent+label\")\nfig.show()","d8d13d8e":"plt.figure(figsize=(10, 8))\nsns.countplot(x = \"sex\",\n            hue=\"state\",\n            hue_order=[\"isolated\", \"released\", \"deceased\"],\n            data=patient)\nplt.title(\"Patient state by gender\", fontsize=16)\nplt.xlabel(\"Gender\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","d67a4ba3":"age_ranges = sorted(set([ar for ar in patient[\"age_range\"] if ar != \"Unknown\"]))\n\nplt.figure(figsize=(12, 8))\nsns.countplot(x = \"age_range\",\n            hue=\"state\",\n            order=age_ranges,\n            hue_order=[\"isolated\", \"released\", \"deceased\"],\n            data=patient)\nplt.title(\"State by age\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper right\")\nplt.show()","5eba468b":"deceased_age_dist = patient.loc[patient[\"state_deceased\"] == 1][\"age\"].describe()\nmean_age_of_deceased = int(deceased_age_dist[\"mean\"])\nmean_age_of_deceased_std = int(deceased_age_dist[\"std\"])\nmin_age_of_deceased = int(deceased_age_dist[\"min\"])\n\nprint(f\"The mean age of those who died is {mean_age_of_deceased} +\/- {mean_age_of_deceased_std} years.\")\nprint(f\"The youngest patient who died was {min_age_of_deceased} years old.\")","5cb06dbb":"# define order\nage_gender_hue_order =[\"isolated_female\", \"released_female\", \"deceased_female\",\n                       \"isolated_male\", \"released_male\", \"deceased_male\"]\n# color list:\ncustom_palette = [\"royalblue\", \"lightgreen\", \"orangered\", \"blue\", \"green\", \"red\"]\n\nplt.figure(figsize=(12, 8))\nsns.countplot(x =\"age_range\",\n              hue=\"state_by_gender\",\n              order=age_ranges,\n              hue_order=age_gender_hue_order,\n              palette=custom_palette,\n              data=patient)\nplt.title(\"State by gender and age\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper right\")\nplt.show()","f06c3612":"# exclude post mortem confirmations:\nexcl_post_mortem = patient.loc[(patient[\"time_to_death_since_confirmed\"].astype(\"int64\") > 0) |\n                               (patient[\"time_to_release_since_confirmed\"].astype(\"int64\") > 0)]\n\ndurations = excl_post_mortem[[\"time_to_release_since_confirmed\", \"time_to_death_since_confirmed\"]].describe()\n# durations","1f7b4d1d":"plt.figure(figsize=(12, 8))\nsns.boxplot(x=\"state\",\n            y=\"duration_days\",\n            order=[\"released\", \"deceased\"],\n            data=excl_post_mortem)\nsns.swarmplot(x=\"state\",\n            y=\"duration_days\",\n            order=[\"released\", \"deceased\"],\n            size= 8.0,  \n            color=\".25\",  \n            data=excl_post_mortem)\nplt.title(\"Time from confirmation to release or death \\n expluding post mortem confirmations\",\n          fontsize=16)\nplt.xlabel(\"State\", fontsize=16)\nplt.ylabel(\"Days\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\n","58a8514b":"isolated = patient.loc[patient[\"state\"] == \"isolated\"].shape[0]\nupper_quartile_duration_death = durations[\"time_to_death_since_confirmed\"][\"75%\"].days\nmax_duration_death = durations[\"time_to_death_since_confirmed\"][\"max\"].days\nmedian_duration_death = durations\n\npatient[\"time_since_confirmation\"] = pd.to_datetime(\"today\") - patient[\"confirmed_date\"]\npatients_over_upper_quartile = patient.loc[(patient[\"time_since_confirmation\"].dt.days > upper_quartile_duration_death) & \n                                           (patient[\"state\"] == \"isolated\")].shape[0]\npatients_over_max = patient.loc[(patient[\"time_since_confirmation\"].dt.days > max_duration_death) & \n                                           (patient[\"state\"] == \"isolated\")].shape[0]\nupper_perc = round((patients_over_upper_quartile \/ isolated * 100), 2)\nmax_perc = round((patients_over_max \/ isolated * 100), 2)\n\nprint(f\"Currently, {isolated} patients are isolated in South Korea.\")\nprint(f\"{patients_over_upper_quartile} ({upper_perc}%) of those have been isolated for more than {upper_quartile_duration_death} days (75% quartile of deceased).\")\nprint(f\"{patients_over_max} ({max_perc}%) of those have been isolated for more than {max_duration_death} days (max of deceased).\")","17f89917":"#rate by gender:\nmortality_rates_gender = pd.DataFrame(patient.groupby(\"sex\")[\"state_deceased\"].describe()[[\"count\", \"mean\"]])\nmortality_rates_gender.rename(columns={\"count\":\"Number of patients\",\"mean\":\"Mortality rate\"}, inplace=True)\nmortality_rates_gender\n\n# add total rate for sex known:\ntotal_patients_w_sex = patient.loc[patient[\"sex\"].notna()].shape[0]\ntotal_deceased_w_sex = patient.loc[(patient[\"sex\"].notna()) & (patient[\"state\"] == \"deceased\")].shape[0]\ntotal_rate_w_sex = total_deceased_w_sex \/ total_patients_w_sex\ntotal_w_sex_mortality_rate = pd.DataFrame({\"Number of patients\": total_patients_w_sex,\n                                     \"Mortality rate\": total_rate_w_sex},\n                                    index=[\"Total (gender known)\"])\n\n\n# add total incl. no age known:\ntotal_patients = patient.shape[0]\ntotal_deceased = patient.loc[patient[\"state\"] == \"deceased\"].shape[0]\ntotal_rate = total_deceased \/ total_patients\ntotal_mortality_rate = pd.DataFrame({\"Number of patients\": total_patients,\n                                     \"Mortality rate\": total_rate},\n                                    index=[\"Total (all patients)\"])\n\n# df:\nmortality_rates_gender = mortality_rates_gender.append(total_w_sex_mortality_rate)\nmortality_rates_gender = mortality_rates_gender.append(total_mortality_rate)\nmortality_rates_gender[\"Number of patients\"] = mortality_rates_gender[\"Number of patients\"].astype(\"int64\")\nmortality_rates_gender[\"Mortality rate\"] = round(mortality_rates_gender[\"Mortality rate\"],3) * 100\nmortality_rates_gender.rename(columns={\"Mortality rate\": \"Mortality rate [%]\"}, inplace=True)\nmortality_rates_gender.index.name = \"Gender\"\nmortality_rates_gender","433f0b82":"gender_order = [\"female\", \"male\"]\nplt.figure(figsize=(10, 8))\nsns.barplot(x=mortality_rates_gender.index,\n            y=mortality_rates_gender[\"Mortality rate [%]\"],\n            order = gender_order,\n            palette=[\"grey\"])\nplt.title(\"Mortality rate by gender\", fontsize=16)\nplt.xlabel(\"Gender\", fontsize=16)\nplt.ylabel(\"Mortality rate [%]\", fontsize=16)\nplt.axhline(y=total_rate_w_sex * 100,\n            color=\"darkgrey\",\n            linestyle=\"--\",\n            label=\"mean of patients in South Korea with known gender\")\nplt.axhline(y= total_rate * 100,\n            color=\"black\",\n            linestyle=\"--\",\n            label=\"mean of all patients in South Korea\")\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper left\")\nplt.show()","0546c800":"#rate by age:\nmortality_rates_age = pd.DataFrame(patient.groupby(\"age_range\")[\"state_deceased\"].describe()[[\"count\", \"mean\"]])\nmortality_rates_age.rename(columns={\"count\":\"Number of patients\",\"mean\":\"Mortality rate\"}, inplace=True)\nmortality_rates_age.drop(\"Unknown\", axis=0, inplace=True)\n\n# add total rate for age known:\ntotal_patients_w_age = patient.loc[patient[\"age\"].notna()].shape[0]\ntotal_deceased_w_age = patient.loc[(patient[\"age\"].notna()) & (patient[\"state\"] == \"deceased\")].shape[0]\ntotal_rate_w_age = total_deceased_w_age \/ total_patients_w_age\ntotal_w_age_mortality_rate = pd.DataFrame({\"Number of patients\": total_patients_w_age,\n                                     \"Mortality rate\": total_rate_w_age},\n                                    index=[\"Total (age known)\"])\n\n# df:\nmortality_rates_age = mortality_rates_age.append(total_w_age_mortality_rate)\nmortality_rates_age = mortality_rates_age.append(total_mortality_rate)\nmortality_rates_age[\"Number of patients\"] = mortality_rates_age[\"Number of patients\"].astype(\"int64\")\nmortality_rates_age[\"Mortality rate\"] = round(mortality_rates_age[\"Mortality rate\"],3) * 100\nmortality_rates_age.rename(columns={\"Mortality rate\":\"Mortality rate [%]\"}, inplace=True)\nmortality_rates_age.index.name = \"Age range\"\nmortality_rates_age","bb80848b":"plt.figure(figsize=(12, 8))\nsns.barplot(x=mortality_rates_age.index,\n            y=mortality_rates_age[\"Mortality rate [%]\"],\n            order = age_ranges,\n            palette=[\"grey\"])\nplt.title(\"Mortality rate by age\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Mortality rate [%]\", fontsize=16)\nplt.axhline(y=total_rate_w_age * 100,\n            color=\"darkgrey\",\n            linestyle=\"--\",\n            label=\"mean of patients in South Korea with known age\")\nplt.axhline(y= total_rate * 100,\n            color=\"black\",\n            linestyle=\"--\",\n            label=\"mean of all patients in South Korea\")\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper left\")\nplt.show()","1185fa38":"#rate by gender and age:\nmortality_rates_gender_age = pd.DataFrame(patient.groupby([\"age_range\", \"sex\"])[\"state_deceased\"].describe()[[\"count\", \"mean\"]])\nmortality_rates_gender_age.rename(columns={\"count\":\"Number of patients\",\"mean\":\"Mortality rate\"}, inplace=True)\nmortality_rates_gender_age.drop(\"Unknown\", axis=0, inplace=True)\n\n#formatting:\nmortality_rates_gender_age[\"Number of patients\"] = mortality_rates_gender_age[\"Number of patients\"].astype(\"int64\")\nmortality_rates_gender_age[\"Mortality rate\"] = round(mortality_rates_gender_age[\"Mortality rate\"],3) * 100\nmortality_rates_gender_age.rename(columns={\"Mortality rate\":\"Mortality rate [%]\"}, inplace=True)\n\n# only for plotting:\nmortality_rates_gender_age[\"age_range\"] = list(x[0] for x in mortality_rates_gender_age.index)\nmortality_rates_gender_age[\"gender\"] = list(x[1] for x in mortality_rates_gender_age.index)\n\n# show table\nmortality_rates_gender_age[[\"Number of patients\", \"Mortality rate [%]\"]]","1a9c8b34":"mean_mortality_rate_female = mortality_rates_gender[\"Mortality rate [%]\"][\"female\"]\nmean_mortality_rate_male = mortality_rates_gender[\"Mortality rate [%]\"][\"male\"]\n\nplt.figure(figsize=(12, 8))\nsns.barplot(x=\"age_range\",\n            y=mortality_rates_gender_age[\"Mortality rate [%]\"],\n            order = age_ranges,\n            hue=\"gender\",\n            hue_order=[\"female\", \"male\"],\n            palette=[\"darkgrey\", \"black\"],\n            data=mortality_rates_gender_age)\nplt.title(\"Mortality rate by age and gender\", fontsize=16)\nplt.xlabel(\"Age range\", fontsize=16)\nplt.ylabel(\"Mortality rate [%]\", fontsize=16)\nplt.axhline(y=total_rate_w_age * 100,\n            color=\"darkgrey\",\n            linestyle=\"--\",\n            label=\"mean of patients in South Korea with known age\")\nplt.axhline(y=mean_mortality_rate_female,\n            color=\"grey\",\n            linestyle=\":\",\n            label=\"mean of female patients in South Korea with known gender\")\nplt.axhline(y=mean_mortality_rate_male,\n            color=\"grey\",\n            linestyle=\"-.\",\n            label=\"mean of male patients in South Korea  with known gender\")\nplt.axhline(y= total_rate * 100,\n            color=\"black\",\n            linestyle=\"--\",\n            label=\"mean of all patients in South Korea\")\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper left\")\nplt.show()","1a452c91":"# using data from patient.csv:\ninfected_patient = patient.shape[0]\nrecovered_patient = patient.loc[patient[\"state\"] == \"released\"].shape[0]\ndeceased_patient = patient.loc[patient[\"state\"] == \"deceased\"].shape[0]\ndead_per_recovered_p = deceased_patient \/ recovered_patient\ndead_per_recovered_p\n\n# using data from time.csv:\ninfected_time = time.sort_values(by=\"date\", ascending=False).iloc[0][\"acc_confirmed\"]\nrecovered_time = time.sort_values(by=\"date\", ascending=False).iloc[0][\"acc_released\"]\ndeceased_time = time.sort_values(by=\"date\", ascending=False).iloc[0][\"acc_deceased\"]\ndead_per_recovered_t = deceased_time \/ recovered_time\n\noutcome = pd.DataFrame({\"Confirmed\": [infected_patient, infected_time],\n                                \"Recovered\":[recovered_patient, recovered_time],\n                                \"Deceased\": [deceased_patient, deceased_time]}, index=[\"patient.csv\", \"time.csv\"])\noutcome.index.name=\"Data source\"\noutcome[\"Recovered [%]\"] = round(outcome[\"Recovered\"] \/ outcome[\"Confirmed\"], 3)\noutcome[\"Deceased [%]\"] = round(outcome[\"Deceased\"] \/ outcome[\"Confirmed\"], 3)\noutcome[\"Deceased \/ Recovered\"] = round(outcome[\"Deceased\"] \/ outcome[\"Recovered\"], 3)\noutcome[\"Data source\"] = outcome.index # only for plotting\noutcome.drop(\"Data source\", axis=1)","952ed152":"outcome_fig = outcome.melt(\"Data source\", var_name=\"columns\",  value_name=\"values\")\n\nsns.catplot(x=\"columns\",\n            y=\"values\",\n            hue=\"Data source\", \t\n            kind=\"bar\",   \n            data=outcome_fig.iloc[2:6])\nplt.title(\"Outcomes of disease so far\", fontsize=16)\nplt.xlabel(\"Outcome\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(rotation=45, fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","1beafd5a":"Most rows only contain information about the coutry, the date of confirmation of the infection and the current state.  \nWe also have information on the gender and year of birth of several houndred patients.  \nThe reason of infection and who infected whom is only shown\/known for a few patients.  ","61bd1116":"## Patient state by age","ab82a1f2":"## Setup","479a7ae7":"## Reason of infection","92cf8438":"The date the infection was confirmed is not the start of the infection or the symptoms, but it is the closest data we have here.  \nIt is unknown how far the disease has progressed in each of the patients at the time of confirmation.  \nHowerver, this figure does uderline the importance of seeking medical help early, when the first symptoms appear.","965d5639":"## Data inspection","905cd6be":"## Outcomes of the disease so far","b9d990f5":"## Patient state by gender and age","c00e4263":"## Mortality rates\n### Important:\nCurrently, with 20 deceased and 35 released patients in total, there is ***very little data(!)*** on the outcome of the disease in South Korea.   \n**Gender and age are known for less than 10 % of all patients. And only those are used in the calculations.**  \n**Also, only confirmed cases can be considered.**   \nAccording to the WHO, \"Some people become infected but don\u2019t develop any symptoms and don't feel unwell\" [(1)](https:\/\/www.who.int\/news-room\/q-a-detail\/q-a-coronaviruses).  \nSo there certainly are more total (recovered) cases than confirmed ones.\nPlease keep this in mind when interpreting the following numbers. ","f77cda93":"### I will update this notebook as new data becomes available and as my time allows\n### Comments, questions and suggestions are welcome.\n### If you find the notebook useful, consider upvoteing.","5f622ec8":"## Affected regions:","39a5e407":"## Mortality rate by age","15464422":"## Duration of infection","1671b849":"## Overview of patient state  \nThe following data comes from the patient.csv file and may differ from the data above from the time.csv file, due to different update times of the files","cb4e4797":"## Spread of the infection and test results","481bd116":"## Mortality rate by gender and age  ","49e16231":"## Mortality rate by gender","14f69b28":"## Patient state by gender","b90b79fa":"## Data processing","de3f82bc":"# EDA of COVID-19 data from South Korea\n### The focus of this notebook is on the state of the patients by age and gender  "}}