{"cell_type":{"a33eef7d":"code","fee9682f":"code","d0996d4b":"code","dc999ecf":"code","eff7b1c1":"code","9c456a46":"code","f3da5d19":"code","82a63d01":"code","e3b56efa":"code","f8b80fa0":"code","8af92193":"code","c7f947c6":"code","59cef431":"code","82f590b5":"code","0bdc6e59":"markdown"},"source":{"a33eef7d":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nprint(tf.__version__)","fee9682f":"def plot_series(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.grid(True)\n\ndef trend(time, slope=0):\n    return slope * time\n\ndef seasonal_pattern(season_time):\n    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n    return np.where(season_time < 0.4,\n                    np.cos(season_time * 2 * np.pi),\n                    1 \/ np.exp(3 * season_time))\n\ndef seasonality(time, period, amplitude=1, phase=0):\n    \"\"\"Repeats the same pattern at each period\"\"\"\n    season_time = ((time + phase) % period) \/ period\n    return amplitude * seasonal_pattern(season_time)\n\ndef noise(time, noise_level=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    return rnd.randn(len(time)) * noise_level\n\ntime = np.arange(4 * 365 + 1, dtype=\"float32\")\nbaseline = 10\nseries = trend(time, 0.1)  \nbaseline = 10\namplitude = 20\nslope = 0.09\nnoise_level = 5\n\n# Create the series\nseries = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)\n# Update with noise\nseries += noise(time, noise_level, seed=42)\n\nsplit_time = 1000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n\nwindow_size = 20\nbatch_size = 32\nshuffle_buffer_size = 1000","d0996d4b":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\n","dc999ecf":"def windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    dataset = tf.data.Dataset.from_tensor_slices(series)\n    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n    dataset = dataset.shuffle(shuffle_buffer).map(lambda window: (window[:-1], window[-1]))\n    dataset = dataset.batch(batch_size).prefetch(1)\n    return dataset","eff7b1c1":"dataset = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(10, input_shape=[window_size], activation=\"relu\"), \n    tf.keras.layers.Dense(10, activation=\"relu\"), \n    tf.keras.layers.Dense(1)\n])\n\nmodel.compile(loss=\"mse\", optimizer=tf.keras.optimizers.SGD(lr=1e-6, momentum=0.9))\nmodel.fit(dataset,epochs=100,verbose=0)\n","9c456a46":"forecast = []\nfor time in range(len(series) - window_size):\n    forecast.append(model.predict(series[time:time + window_size][np.newaxis]))\n\nforecast = forecast[split_time-window_size:]\nresults = np.array(forecast)[:, 0, 0]\n\n\nplt.figure(figsize=(10, 6))\n\nplot_series(time_valid, x_valid)\nplot_series(time_valid, results)","f3da5d19":"tf.keras.metrics.mean_absolute_error(x_valid, results).numpy()","82a63d01":"dataset = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(10, input_shape=[window_size], activation=\"relu\"), \n    tf.keras.layers.Dense(10, activation=\"relu\"), \n    tf.keras.layers.Dense(1)\n])\n\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch \/ 20))\noptimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)\nmodel.compile(loss=\"mse\", optimizer=optimizer)\nhistory = model.fit(dataset, epochs=100, callbacks=[lr_schedule], verbose=0)","e3b56efa":"lrs = 1e-8 * (10 ** (np.arange(100) \/ 20))\nplt.semilogx(lrs, history.history[\"loss\"])\nplt.axis([1e-8, 1e-3, 0, 300])","f8b80fa0":"window_size = 30\ndataset = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(10, activation=\"relu\", input_shape=[window_size]),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1)\n])\n\noptimizer = tf.keras.optimizers.SGD(lr=8e-6, momentum=0.9)\nmodel.compile(loss=\"mse\", optimizer=optimizer)\nhistory = model.fit(dataset, epochs=500, verbose=0)","8af92193":"loss = history.history['loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, 'b', label='Training Loss')\nplt.show()","c7f947c6":"# Plot all but the first 10\nloss = history.history['loss']\nepochs = range(10, len(loss))\nplot_loss = loss[10:]\nprint(plot_loss)\nplt.plot(epochs, plot_loss, 'b', label='Training Loss')\nplt.show()","59cef431":"forecast = []\nfor time in range(len(series) - window_size):\n    forecast.append(model.predict(series[time:time + window_size][np.newaxis]))\n\nforecast = forecast[split_time-window_size:]\nresults = np.array(forecast)[:, 0, 0]\n\n\nplt.figure(figsize=(10, 6))\n\nplot_series(time_valid, x_valid)\nplot_series(time_valid, results)","82f590b5":"tf.keras.metrics.mean_absolute_error(x_valid, results).numpy()","0bdc6e59":"PART 01: different time series attributes https:\/\/www.kaggle.com\/salazarslytherin\/time-series-01-different-ts-attributes\n\nPART 02: naive forecasting https:\/\/www.kaggle.com\/salazarslytherin\/time-series-02-naive-forecasting\n\nPART 03: preparing features labels https:\/\/www.kaggle.com\/salazarslytherin\/time-series-03-preparing-features-labels\n\nPART 04: linear regression https:\/\/www.kaggle.com\/salazarslytherin\/time-series-04-linear-regression\n\nPART 05: DNN with callbacks https:\/\/www.kaggle.com\/salazarslytherin\/time-series-05-dnn-with-callbacks\n\nPART 06: RNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-06-rnn\n\nPART 07: LSTM https:\/\/www.kaggle.com\/salazarslytherin\/time-series-07-lstm\n\nPART 08: CNN + LSTM https:\/\/www.kaggle.com\/salazarslytherin\/time-series-08-cnn-lstm\n\nPART 09: Sunspots dataset CNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-09-sunspots-dataset-cnn\n\nPART 10: Sunspots dataset DNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-10-sunspots-dataset-dnn\/edit"}}