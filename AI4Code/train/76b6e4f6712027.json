{"cell_type":{"cb90e959":"code","6622b42a":"code","ee0b1fea":"code","5de56852":"code","1a69dd38":"code","1002036c":"code","2ab665b2":"code","855965a7":"code","1ad7418d":"code","37a1e082":"code","32dbf1c3":"code","6ab8a3b7":"code","6a476ad3":"code","5e8c17cb":"code","30f8c0cf":"code","e87a5d41":"code","6a778ca6":"code","727cfe8d":"code","3959d0a2":"code","03f8b67a":"code","2a3f68e5":"code","1a480a79":"code","9a4f7e90":"code","f3ddd2ef":"code","f2adaff1":"code","abb58cae":"code","3b7a3f69":"markdown","0333ddbe":"markdown","de62319e":"markdown","15209910":"markdown","724fbbcd":"markdown","a8efee33":"markdown","47d7245c":"markdown","c901dcce":"markdown","bffa5d63":"markdown","097c194c":"markdown","0baed695":"markdown","6dbe716c":"markdown","05eaad98":"markdown","72c0b50b":"markdown"},"source":{"cb90e959":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport numpy as np\n\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import KernelDensity\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import RocCurveDisplay, auc, roc_curve, precision_recall_fscore_support\n\n\nfigsize = (9, 3)","6622b42a":"df = pd.read_csv(\"..\/input\/thyroid-disease-unsupervised-anomaly-detection\/annthyroid_unsupervised_anomaly_detection.csv\", delimiter=';')","ee0b1fea":"df = df.drop([\"Unnamed: 22\", \"Unnamed: 23\"], axis=1)","5de56852":"df.head()","1a69dd38":"df[\"Outlier_label \"] = df[\"Outlier_label \"].astype(\"category\").cat.codes","1002036c":"df.describe()","2ab665b2":"df.info()","855965a7":"#cols_to_norm = ['TSH','T3_measured', 'TT4_measured', 'T4U_measured', 'FTI_measured']\n#df[cols_to_norm] = df[cols_to_norm].apply(lambda x: (x - x.mean()) \/ x.std())\ntmp_labels = df['Outlier_label ']\ndf = df.drop(['Outlier_label '], axis=1)\ndf = (df-df.mean())\/df.std()\ndf['Outlier_label '] = tmp_labels","1ad7418d":"corr = df.corr()\nsns.heatmap(corr)","37a1e082":"print(corr['Outlier_label '])","32dbf1c3":"# df = df.drop(['Age', 'on_antithyroid_medication', 'T3_measured', 'query_hyperthyroid', 'hypopituitary'], axis=1)","6ab8a3b7":"value_counts = df['Outlier_label '].value_counts()\nnormal = value_counts.index[0]\noutlier = value_counts.index[1]","6a476ad3":"g = sns.pairplot(df, kind='scatter', diag_kind='hist', hue='Outlier_label ', x_vars=df.columns[16:-1], y_vars='Outlier_label ')\ng.fig.set_size_inches(15, 3)\nplt.show()","5e8c17cb":"f, ax = plt.subplots(figsize=figsize)\nax = sns.boxplot(data=df[['Age', 'hypopituitary']])  \nplt.show()","30f8c0cf":"f, ax = plt.subplots(figsize=figsize)\nax = sns.boxplot(data=df.drop(['Outlier_label '], axis=1)[df.columns[1:5]])  \nplt.show()","e87a5d41":"f, ax = plt.subplots(figsize=figsize)\nax = sns.boxplot(data=df.drop(['Outlier_label '], axis=1)[df.columns[5:10]])  \nplt.show()","6a778ca6":"f, ax = plt.subplots(figsize=figsize)\nax = sns.boxplot(data=df.drop(['Outlier_label '], axis=1)[df.columns[10:14]])  \nplt.show()","727cfe8d":"f, ax = plt.subplots(figsize=figsize)\nax = sns.boxplot(data=df[['TSH']])  \nplt.show()","3959d0a2":"f, ax = plt.subplots(figsize=figsize)\nax = sns.boxplot(data=df[df.columns[[15, 17, 18, 19, 20]]])  \nplt.show()","03f8b67a":"x = df.drop(['Outlier_label '], axis=1)\ny = df['Outlier_label ']","2a3f68e5":"params = {'n_estimators': list(range(5, 15)), 'max_features': list(range(2, 10))}\noif = GridSearchCV(IsolationForest(n_jobs=2, random_state=5), params, scoring='homogeneity_score', cv=5)\noif.fit(x, y)\npreds_oif = oif.predict(x)\npreds_oif[preds_oif==1] = normal\npreds_oif[preds_oif==-1] = outlier\nprint(oif.best_params_)","1a480a79":"fpr, tpr, _ = roc_curve(y, preds_oif)\nroc_auc = auc(fpr, tpr)\nrcd = RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc)\nrcd.plot()","9a4f7e90":"prec, rec, f1, _ = precision_recall_fscore_support(y, preds_oif, average='macro')\nprint(f'\\tF1-score: {f1}')\nprint(f'\\tPrecision: {prec}')\nprint(f'\\tRecall: {rec}')","f3ddd2ef":"params = {'kernel': ['gaussian', 'exponential'], 'bandwidth': np.linspace(0.008, 0.09, 10)}\nopt = GridSearchCV(KernelDensity(), params, cv=5)\nopt.fit(x)\nopt.best_params_","f2adaff1":"h = opt.best_params_['bandwidth']\nk = opt.best_params_['kernel']\nkde = KernelDensity(kernel=k, bandwidth=h)\nkde.fit(x)\nldens = kde.score_samples(x)\nsignal_kde = pd.Series(index=x.index, data=-ldens)\nplot_signal(signal_kde, y, figsize=figsize)","abb58cae":"plot_signal(signal_kde[y==outlier], y[y==outlier], figsize=figsize)","3b7a3f69":"# Imports","0333ddbe":"Not removing features with low correlation, because we assume to not have the label.","de62319e":"## Separating data and labels","15209910":"Estimating optimal bandwidth","724fbbcd":"# Preprocessing","a8efee33":"## EDA","47d7245c":"# KDE","c901dcce":"KDE doesn't work well.","bffa5d63":"## Standardization of continuous features","097c194c":"## Correlation","0baed695":"### Pair plot","6dbe716c":"### Box plots","05eaad98":"# Isolation Forest","72c0b50b":"Target class to int8"}}