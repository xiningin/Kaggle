{"cell_type":{"08d0647d":"code","c04d544b":"code","eac4c389":"code","68b6bcbc":"code","fbacbab7":"code","73745b0d":"code","dee99ca9":"code","dac2d07d":"code","93108e24":"code","be2f204e":"code","7de1578b":"code","660f06cd":"code","7c2e2fd4":"code","6fe1a4b1":"code","6384dc70":"code","ed165af5":"code","77784c92":"code","9a63ff7f":"code","07175840":"code","a93db473":"code","02aab1b8":"code","c8f9cb72":"code","0484a6b0":"code","4b5fa73c":"markdown"},"source":{"08d0647d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c04d544b":"text = open(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt\", 'r')\nprint(text.read())","eac4c389":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","68b6bcbc":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","fbacbab7":"print(df_train.columns)\nprint(len(df_train.columns))","73745b0d":"df_train['SalePrice'].describe()","dee99ca9":"#histogram\nsns.distplot(df_train['SalePrice'])","dac2d07d":"#skewness and kutosis measure\nprint(df_train['SalePrice'].skew())\nprint(df_train['SalePrice'].kurt())","93108e24":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0, 800000))","be2f204e":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\ndata.plot.scatter(x = var, y = 'SalePrice', ylim = (0, 800000))","7de1578b":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\nf, ax = plt.subplots(figsize = (8, 6))\nfig = sns.boxplot(x = var, y = 'SalePrice', data = data)\nfig.axis(ylim = (0, 800000))","660f06cd":"var = 'YearBuilt'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis = 1)\nf, ax = plt.subplots(figsize = (25, 8))\nfig = sns.boxplot(x = var, y = 'SalePrice', data = data)\nfig.axis(ylim = (0, 800000))","7c2e2fd4":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize = (10, 10))\nsns.heatmap(corrmat, vmax = 0.8, square = True)","6fe1a4b1":"#saleprice correlation matrix\nk = 10 #no of variables in the heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale = 1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","6384dc70":"#scatter plots\nsns.set()\ncols = ['SalePrice', 'OverallQual','GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show()","ed165af5":"#total missing values column-wise\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis = 1, keys = ['Total', 'Percent'])\nmissing_data.head(20)","77784c92":"df_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index, 1)","9a63ff7f":"df_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)","07175840":"df_train.shape","a93db473":"df_train.isnull().sum().max()","02aab1b8":"saleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:, np.newaxis])","c8f9cb72":"StandardScaler().fit_transform(df_train['SalePrice'][:, np.newaxis])","0484a6b0":"low_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","4b5fa73c":"*Outliers*"}}