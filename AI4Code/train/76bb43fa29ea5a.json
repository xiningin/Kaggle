{"cell_type":{"40e23a8a":"code","7811c600":"code","8696da53":"code","94d39f4e":"code","511fc7de":"code","fa334547":"code","8394756d":"code","70aaffcc":"code","98e36a8b":"code","567dba57":"code","2d3a35bc":"code","a5b73339":"code","bbf75a03":"code","ca3d4240":"code","6eac68c2":"code","341615dd":"code","870e7ef2":"code","7b02673b":"code","457d5028":"code","0feb692f":"code","2d52217d":"code","6b9cdb90":"code","98b488c0":"code","d706c28a":"code","2db0764c":"code","28660a66":"code","6d931b2e":"code","c1dfd69b":"code","fbb8ca8a":"code","5493fa16":"code","3f412d13":"code","ae3ca772":"code","7a337d17":"code","1a4bd486":"code","8f7cab93":"code","abf82990":"code","cab7c792":"code","a453e9d8":"code","fb7ab0b8":"code","fa4b159c":"code","8b5e1248":"code","79f8b97a":"code","c0c6b538":"code","1924314c":"code","2013bce8":"code","9e52e8e0":"code","7f17d697":"code","3c44e5e9":"markdown"},"source":{"40e23a8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","7811c600":"!pip install git+https:\/\/github.com\/aerdem4\/lofo-importance","8696da53":"\ndtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\n","94d39f4e":"%time\ntrain_df = pd.read_csv('..\/input\/train.csv',nrows=1000000,dtype=dtypes,low_memory=False)\nprint('Loaded traininig data..')","511fc7de":"train_df.head()","fa334547":"from sklearn.model_selection import KFold\n\nsample_df = train_df.sample(frac=0.01, random_state=0)\nsample_df.sort_values(\"AvSigVersion\", inplace=True)\n\ncv = KFold(n_splits=4, shuffle=False, random_state=0)\n\nsample_df.shape","8394756d":"from lofo.lofo_importance import LOFOImportance, plot_importance\n\ntarget = \"HasDetections\"\nfeatures = [col for col in train_df.columns if col != target]\n\nlofo = LOFOImportance(sample_df, features, target, cv=cv, scoring=\"roc_auc\")\n\nimportance_df = lofo.get_importance()\nimportance_df.head()","70aaffcc":"importance_df.tail()","98e36a8b":"%matplotlib inline\n\nplot_importance(importance_df, figsize=(12, 20))","567dba57":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","2d3a35bc":"%time\ntotal = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum()\/train_df.isnull().count()*100).sort_values(ascending = False)\nmissing_train_data  = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","a5b73339":"missing_train_data.head()","bbf75a03":"missing_top_10= missing_train_data.nlargest(10,'Percent') ","ca3d4240":"plt.figure(figsize = (15,10))\nsns.barplot(x=missing_top_10.index,y='Percent',data= missing_top_10)\nplt.xticks(rotation=90)\nplt.title(\"Top 10 Missing Features\")\nplt.show()","6eac68c2":"y=train_df['HasDetections']\nX_train= train_df.drop(['HasDetections'],axis=1)","341615dd":"X_train= train_df.drop(['MachineIdentifier'],axis=1)\nX_train.head()","870e7ef2":"X_train[X_train.select_dtypes(['object']).columns] = X_train.select_dtypes(['object']).apply(lambda x: x.astype('category'))","7b02673b":"X_train.dtypes","457d5028":"X_train[X_train.select_dtypes(['category']).columns] = X_train.select_dtypes(['category']).apply(lambda x: x.cat.codes)","0feb692f":"importance_df","2d52217d":"to_keep_cols = X_train[[\"SmartScreen\",\"OsBuildLab\",\"Census_ChassisTypeName\",\"AVProductsInstalled\",\"AppVersion\",\"Wdft_IsGamer\",\"AvSigVersion\",\n\"Processor\",\"Census_OSInstallLanguageIdentifier\",\"Census_OSEdition\",\n                       'Census_InternalBatteryNumberOfCharges',\"Census_OSBuildNumber\",\"Census_FirmwareVersionIdentifier\",\"Census_HasOpticalDiskDrive\"\n                       ]]","6b9cdb90":"to_keep_cols['HasDetections'] = y","98b488c0":"to_keep_cols.head()","d706c28a":"corr = to_keep_cols.corr()\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(20, 12))\n\n# Create heatmap\nheatmap = sns.heatmap(corr,annot=True)\nplt.show()","2db0764c":"to_keep_cols.nunique()","28660a66":"to_keep_cols.isnull().sum()","6d931b2e":"cols = [\"AVProductsInstalled\", \"Wdft_IsGamer\",\"Census_OSInstallLanguageIdentifier\",\"Census_InternalBatteryNumberOfCharges\",\"Census_FirmwareVersionIdentifier\"]\nto_keep_cols[cols]=to_keep_cols[cols].fillna(to_keep_cols.mean().iloc[0])","c1dfd69b":"import seaborn as sns\nsns.countplot(x='HasDetections',data=to_keep_cols)\nplt.show()","fbb8ca8a":"import itertools\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec","5493fa16":"y = to_keep_cols['HasDetections']\nX = to_keep_cols.drop(['HasDetections'], axis=1)","3f412d13":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","ae3ca772":"from sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(random_state=42, max_depth=80,max_features=3,min_samples_leaf=5,min_samples_split= 8,n_estimators= 300)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\n# prediction on test set\ny_pred=clf.predict_proba(X_test)[:,1]\n","7a337d17":"y_pred","1a4bd486":"clf.feature_importances_","8f7cab93":"import pandas as pd\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (20,10)\n\n#do code to support model\n#\"data\" is the X dataframe and model is the SKlearn object\n\nfeats = {} # a dict to hold feature_name: feature_importance\nfor feature, importance in zip(to_keep_cols.columns, clf.feature_importances_):\n    feats[feature] = importance #add the name\/value pair \n\nimportances = pd.DataFrame.from_dict(feats, orient='index').rename(columns={0: 'Gini-importance'})\nimportances.sort_values(by='Gini-importance').plot(kind='bar', rot=90)","abf82990":"import lightgbm as lgb","cab7c792":"lgb_model = lgb.LGBMClassifier(max_depth=5,\n                                   num_leaves=20,\n                                   n_estimators=30000,\n                                   learning_rate=0.05,\n                                   colsample_bytree=0.28,\n                                   objective='binary',\n                                   boosting_type='gbdt',\n                                   metric='auc',\n                                   nthread=-1,\n                                   bagging_freq = 1,\n                                   lambda_l1 = 0.1, \n                                   lambda_l2 = 0.1,\n                                   n_jobs=-1)","a453e9d8":"lgb_model.fit(X_train, y_train, eval_metric='auc', \n                  eval_set=[(X_test, y_test)], \n                  verbose=100, early_stopping_rounds=500)","fb7ab0b8":"test_df=pd.read_csv('..\/input\/test.csv',dtype=dtypes)","fa4b159c":"X_test= test_df.drop(['MachineIdentifier','PuaMode','Census_ProcessorClass','Census_InternalBatteryType',],axis=1)","8b5e1248":"X_test.head()","79f8b97a":"X_test[X_test.select_dtypes(['object']).columns] = X_test.select_dtypes(['object']).apply(lambda x: x.astype('category'))\nX_test[X_test.select_dtypes(['category']).columns] = X_test.select_dtypes(['category']).apply(lambda x: x.cat.codes)","c0c6b538":"test_X = X_test[[\"SmartScreen\",\"OsBuildLab\",\"Census_ChassisTypeName\",\"AVProductsInstalled\",\"AppVersion\",\"Wdft_IsGamer\",\"AvSigVersion\",\n\"Processor\",\"Census_OSInstallLanguageIdentifier\",\"Census_OSEdition\",\n                       'Census_InternalBatteryNumberOfCharges',\"Census_OSBuildNumber\",\"Census_FirmwareVersionIdentifier\",\"Census_HasOpticalDiskDrive\"\n                       ]]","1924314c":"cols = [\"AVProductsInstalled\", \"Wdft_IsGamer\",\"Census_OSInstallLanguageIdentifier\",\"Census_InternalBatteryNumberOfCharges\",\"Census_FirmwareVersionIdentifier\"]\ntest_X[cols]=test_X[cols].fillna(test_X.mean().iloc[0])","2013bce8":"y_pred_submission = lgb_model.predict_proba(test_X)[:,1]","9e52e8e0":"sub_df = pd.DataFrame({\"MachineIdentifier\": test_df[\"MachineIdentifier\"].values})\nsub_df[\"HasDetections\"] = y_pred_submission\nsub_df[:10]","7f17d697":"sub_df.to_csv(\"submit.csv\", index=False)","3c44e5e9":"**From the countplot we can see that both are present  in the equal proportion there is no imbalance present in the dataset**\n>    **Lets visualize the different othere features and will explore insights from the data**"}}