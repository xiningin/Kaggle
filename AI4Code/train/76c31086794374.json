{"cell_type":{"841d1f29":"code","4ccc26f5":"code","35c8c7f4":"code","6d155f6a":"code","8dc2a878":"code","b2a8cd89":"code","39514e3a":"code","d16011f9":"code","6b797d08":"code","149d484d":"code","2fe6d9d1":"code","2bff0d03":"code","037a7d23":"code","6a71639e":"code","15dd04c8":"code","b045726d":"code","0dd3c223":"code","6a728763":"code","86eb1526":"code","be348e1f":"code","143b0d5e":"code","8d436277":"code","0de257b9":"code","4d665ade":"markdown","d3d80db9":"markdown","be8097ac":"markdown","eaa6406a":"markdown","0d6f2aa2":"markdown","c9ab287e":"markdown","e05972c4":"markdown","96565501":"markdown","1e98649a":"markdown"},"source":{"841d1f29":"!pip install scanpy","4ccc26f5":"!conda install -y -c conda-forge python-igraph leidenalg","35c8c7f4":"import numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom anndata import AnnData\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nfrom sklearn import preprocessing\n\nsc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.logging.print_header()\nsc.settings.set_figure_params(dpi=80, facecolor='white')","6d155f6a":"def label_encoding(train: pd.DataFrame, test: pd.DataFrame, encode_cols):\n    n_train = len(train)\n    idx_train = train.index\n    idx_test = test.index\n    train = pd.concat([train, test], sort=False).reset_index(drop=True)\n    for f in encode_cols:\n        try:\n            lbl = preprocessing.LabelEncoder()\n            train[f] = lbl.fit_transform(list(train[f].values))\n        except:\n            print(f)\n    test = train[n_train:].reset_index(drop=True)\n    train = train[:n_train]\n    train.index = idx_train\n    test.index = idx_test\n    return train, test","8dc2a878":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv', \n                    index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv',\n                  index_col=0)\n\ntrain_target = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\", \n                           index_col=0)\n\ntrain, test = label_encoding(train, test, ['cp_type', 'cp_dose'])\ntrain['dataset'] = 'train'\ntest['dataset'] = 'test'\n\ndf = pd.concat([train, test])\n\nlist_obs_col = ['cp_type', 'cp_time', 'cp_dose', 'dataset']\nlist_genes = [x for x in df.columns if x not in list_obs_col]\n\nadata = AnnData(df[list_genes], obs=df[list_obs_col])\nadata.obs = pd.concat([adata.obs, train_target.reindex(df.index)], \n                      axis=1)\nadata","b2a8cd89":"sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\nsc.pl.highly_variable_genes(adata)","39514e3a":"adata.raw = adata\nadata = adata[:, adata.var.highly_variable]","d16011f9":"sc.tl.pca(adata, svd_solver='arpack')","6b797d08":"sc.pl.pca(adata, color='g-0', size=10)","149d484d":"sc.pl.pca_variance_ratio(adata, log=True)","2fe6d9d1":"sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)\nsc.tl.umap(adata)","2bff0d03":"adata.obs","037a7d23":"sc.pl.umap(adata, color=['g-0', 'dataset', '5-alpha_reductase_inhibitor',\n                        '11-beta-hsd1_inhibitor', '11-beta-hsd1_inhibitor', 'acat_inhibitor',\n                        'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', \n                         'acetylcholinesterase_inhibitor'],\n          size=10)","6a71639e":"sc.tl.leiden(adata)\nsc.pl.umap(adata, color='leiden')","15dd04c8":"sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)","b045726d":"sc.pl.umap(adata, color=['g-37', 'c-26', 'g-369', 'leiden'],\n          size=10)","0dd3c223":"sc.pl.rank_genes_groups_matrixplot(adata, groupby='leiden', n_genes=3)","6a728763":"X_train = pd.concat([adata.obs.loc[train.index, ['cp_type', 'cp_time', 'cp_dose']].reset_index(drop=True), \n              pd.DataFrame(adata.obsm['X_pca'][adata.obs.loc[train.index].reset_index().index]),\n              pd.DataFrame(adata.obsm['X_umap'][adata.obs.loc[train.index].reset_index().index]),\n              pd.get_dummies(pd.DataFrame(adata.obs['leiden'][adata.obs.loc[train.index].reset_index().index])\n                            ).drop('leiden_0', axis=1).reset_index(drop=True)],\n         axis=1)\n\nX_test = pd.concat([adata.obs.loc[test.index, ['cp_type', 'cp_time', 'cp_dose']].reset_index(drop=True), \n              pd.DataFrame(adata.obsm['X_pca'][adata.obs.loc[test.index].reset_index().index]),\n              pd.DataFrame(adata.obsm['X_umap'][adata.obs.loc[test.index].reset_index().index]),\n              pd.get_dummies(pd.DataFrame(adata.obs['leiden'][adata.obs.loc[test.index].reset_index().index])\n                            ).drop('leiden_0', axis=1).reset_index(drop=True)],\n             axis=1)","86eb1526":"from sklearn.linear_model import LogisticRegression\n\n\ndef lr(X_train, y_train, X_test):\n    reg = LogisticRegression().fit(X_train, y_train)\n    return reg.predict_proba(X_test)[:,1]\n\nlist_pred = []\nfor c in train_target.columns:\n    list_pred.append(lr(X_train, train_target[c], X_test))\ndf_pred = pd.DataFrame(list_pred).T\ndf_pred.index = test.index\ndf_pred.columns = train_target.columns\ndf_pred.to_csv('submission.csv')","be348e1f":"adata.obs.loc[df_pred.index, df_pred.columns] = df_pred","143b0d5e":"adata[adata.obs['dataset'] == 'train']","8d436277":"sc.pl.umap(adata[adata.obs['dataset'] == 'train'], color=['5-alpha_reductase_inhibitor',\n                        '11-beta-hsd1_inhibitor', '11-beta-hsd1_inhibitor', 'acat_inhibitor',\n                        'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', \n                         'acetylcholinesterase_inhibitor'],\n          size=10)","0de257b9":"sc.pl.umap(adata[adata.obs['dataset'] == 'test'], color=['5-alpha_reductase_inhibitor',\n                        '11-beta-hsd1_inhibitor', '11-beta-hsd1_inhibitor', 'acat_inhibitor',\n                        'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', \n                         'acetylcholinesterase_inhibitor'],\n          size=40)","4d665ade":"Check the predicted score in a sample population.","d3d80db9":"# EDA by scanpy which is one of the most usful library for single-cell RNAseq analysis\n\n![https:\/\/scanpy.readthedocs.io\/en\/latest\/_static\/Scanpy_Logo_BrightFG.svg](https:\/\/scanpy.readthedocs.io\/en\/latest\/_static\/Scanpy_Logo_BrightFG.svg)\n\nScanpy is a very useful library designed for single-cell RNAseq analysis which deals with the massive gene expression profile of cell x gene. Now, Let's take a look into the dataset by common workflow for bioinformaticians. Though this dataset is not a single-cell RNAseq experiment, the pattern of data resembles it. Therefore, I introduce the standard analysis workflow of single-cell RNAseq.\n\nTutolials : https:\/\/scanpy.readthedocs.io\/en\/stable\/index.html\n\nOriginal Article : Wolf, F., Angerer, P. & Theis, F. SCANPY: large-scale single-cell gene expression data analysis. Genome Biol 19, 15 (2018). https:\/\/doi.org\/10.1186\/s13059-017-1382-0","be8097ac":"Let's see cluster 0 specific genes.","eaa6406a":"scanpy can take anndata object. In this notebook, I handle cell viabilities as gene expression to make it easier.","0d6f2aa2":"PCA variance ratio is used to determin the threshold of PCx.","c9ab287e":"Biological dataset is very noisy, so we sometimes uses only highly variable genes for UMAP and Defferntially expressed genes.","e05972c4":"You can easily plot gene expression and other features.","96565501":"PCA can explain dataset well.","1e98649a":"scanpy can easily take feature genes for each leiden clusters."}}