{"cell_type":{"ad3d57fa":"code","cff3aae4":"code","ce64f8df":"code","49ea9f39":"code","3e288336":"code","dcb6b1dd":"code","f5975316":"code","d1904a03":"code","2f3602a1":"code","2a27e44f":"code","15c4c409":"code","f3e8b46b":"code","ec39de8c":"code","1840e3ab":"code","d5b1d955":"code","d4249bd7":"code","dc3dfc05":"code","8828a19e":"code","f38bc76d":"code","0a782b54":"code","13454b3a":"code","881c60b0":"code","bd9bea2a":"code","a5720962":"code","1f358ec4":"code","df145225":"code","c1193e1e":"code","2bc323f9":"code","a96b93f5":"code","caafe456":"code","3d0139c7":"code","76ff9db8":"code","a50d7f59":"code","ad3d4a4d":"code","1591d6fd":"code","ae2e7343":"code","3da0d188":"code","4a187137":"code","f9cc70f4":"code","af0ba96b":"code","13e023a8":"code","9a890a1f":"code","d3cd7c59":"code","1e8f659d":"code","c38bf13b":"code","32579e65":"code","58d6b66d":"code","7b508ca2":"code","06f406ef":"code","cef534d5":"code","757fb40e":"code","608889e3":"code","f8f0a129":"code","bdcfda6a":"code","3e5518ca":"code","ab080388":"markdown","79bd1168":"markdown","ee132da6":"markdown","0ea48855":"markdown","b96c6919":"markdown","8f9342a2":"markdown","b89475d7":"markdown","5237de41":"markdown","42fb8f5e":"markdown","53ebce41":"markdown","4427527e":"markdown","f46803c1":"markdown","8443fb63":"markdown"},"source":{"ad3d57fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cff3aae4":"#system and version specific\nimport sys\nimport os\nassert sys.version_info >= (3,5)\n#data manipulation\nimport pandas as pd\nimport numpy as np\n#visualization imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\n%matplotlib inline\n#consistent sized plots\nfrom pylab import rcParams\nrcParams['axes.labelsize'] = 12\nrcParams['figure.figsize'] = 12,5\nrcParams['xtick.labelsize'] = 12\nrcParams['ytick.labelsize'] = 12\nrcParams['axes.titlesize'] = 14\nrcParams['axes.grid'] = True\n#handle unwanted warnings\nimport warnings\nwarnings.filterwarnings(action='ignore',category=DeprecationWarning)\nwarnings.filterwarnings(action='ignore',category=FutureWarning)\n#pandas columns view\npd.options.display.max_columns = 50\n#import ast package\nfrom ast import literal_eval","ce64f8df":"#read the csv files\ntrain = pd.read_csv('..\/input\/predict-bank-products\/bank_product\/train_go05W65.csv',converters={'Product_Holding_B1': literal_eval,'Product_Holding_B2':literal_eval})\ntest = pd.read_csv('..\/input\/predict-bank-products\/bank_product\/test_VkM91FT.csv',converters={'Product_Holding_B1':literal_eval})","49ea9f39":"#check the top rows of the train data\ntrain.head()","3e288336":"#check the top rows of the test data\ntest.head()","dcb6b1dd":"#check the info\ntrain.info()","f5975316":"#number of unique customers\ntrain['Customer_ID'].nunique()","d1904a03":"#distribution of customer gender\nsns.countplot(train['Gender'])\nplt.title('Customer Gender Distribution')\nplt.show()","2f3602a1":"#distribution of the customer age\nplt.hist(train['Age'],bins=30,alpha=0.5)\nplt.title('Distribution of the Age of the Customers')\nplt.show()","2a27e44f":"#boxplot of the customer age\nsns.boxplot(train['Gender'],y=train['Age'])\nplt.title('Box plot of the customer age')\nplt.show()","15c4c409":"sns.countplot(train['Is_Active'],hue=train['Gender'])\nplt.title('Plot of Customer Activity categorized by Gender')\nplt.show()","f3e8b46b":"#is Active - Activity index of the customer, 0 is less frequent customer and 1 is more frequent customer\nsns.countplot(train['Is_Active'],hue=train['Gender'])\nplt.title('Activity Index of the Customer segmented by Gender')\nplt.show()","ec39de8c":"#is Active - Activity index of the customer, 0 is less frequent customer and 1 is more frequent customer\nsns.countplot(train['Is_Active'])\nplt.title('Activity Index of the Customer')\nplt.show()","1840e3ab":"#plot of the city category\nsns.countplot(train['City_Category'])\nplt.title('Count of the City Categories')\nplt.show()","d5b1d955":"''' Function to get the list of all the bank products '''\ndef get_all_bank_products(df,column):\n    ''' Arguments: Dataframe and the Column from which the Bank Product is to be extracted\n        Returns: Unique list of all the products '''\n    products = [] #list to contain all the bank products\n    for item in df[column]:\n        unique_prods = np.unique(item)\n        for prod in unique_prods:\n            if prod not in products:\n                products.append(prod)\n    return products     ","d4249bd7":"'''Get the list of all the products subscribed by the customers'''\n\nB1_prod_list = get_all_bank_products(train, 'Product_Holding_B1')\nB2_prod_list = get_all_bank_products(train,'Product_Holding_B2')","dc3dfc05":"''' Print the list of all the products '''\nprint('Products in the feature Product Holding B1 are {}'.format(B1_prod_list))\nprint('Products in the Target Column are {}'.format(B2_prod_list))","8828a19e":"'''Create a feature list per product as in B1 '''\n\nb1_prod_list = ['B1_' + item for item in B1_prod_list]\n\nfor item in b1_prod_list:    \n    train[item]= 0","f38bc76d":"train.head(3)","0a782b54":"#check the number of columns\nlen(train.columns)","13454b3a":"def replace_with_subscribed(df,col,prod_list,prefix):\n    '''df: dataframe train or test \n       col: name of the column Product_Holding_B1 or Product_Holding_B2\n       prefix: string B1_ or B2_ '''\n    for item in prod_list:\n        if item in df[col]:\n            df[prefix+item] = 1\n    return df\n        \n        ","881c60b0":"train = train.apply(replace_with_subscribed,axis=1,prefix='B1_',prod_list=B1_prod_list,col='Product_Holding_B1')","bd9bea2a":"train.head()","a5720962":"'''Apply the similar transformation on the test data '''\nB1_prod_list_test = get_all_bank_products(test, 'Product_Holding_B1')\nb1_prod_list_test = ['B1_' + item for item in B1_prod_list_test]\n\nfor item in b1_prod_list_test:    \n    test[item]= 0\ntest = test.apply(replace_with_subscribed,axis=1,prefix='B1_',prod_list=b1_prod_list_test,col='Product_Holding_B1')   \n","1f358ec4":"#check if the transformations are applied correctly \ntest.head()","df145225":"'''Tranformation of the target column in the train dataset'''\nB2_prod_list = get_all_bank_products(train, 'Product_Holding_B2')\nb2_prod_list = ['B2_' + item for item in B2_prod_list]\n\nfor item in b2_prod_list:    \n    train[item]= 0\ntrain = train.apply(replace_with_subscribed,axis=1,prefix='B2_',prod_list=B2_prod_list,col='Product_Holding_B2') ","c1193e1e":"#view the transformed train data\ntrain.head()","2bc323f9":"'''Create a copy of the train and the test data '''\ntrn_data = train.copy()\ntst_data = test.copy()","a96b93f5":"'''Drop the redundant columns from the dataset'''\ntrn_data.drop(['Product_Holding_B1','Product_Holding_B2'],inplace=True,axis=1)\ntst_data.drop(['Product_Holding_B1'],inplace=True,axis=1)","caafe456":"'''Drop the customer ID column'''\ntrn_data.drop('Customer_ID',inplace=True,axis=1)\ntst_data.drop('Customer_ID',inplace=True,axis=1)","3d0139c7":"#check the info --> datatypes of the various features\ntrn_data.info()","76ff9db8":"plt.hist(tst_data['Age'],bins=30,alpha=0.5)\nplt.show()","a50d7f59":"'''Transform the Age feature into bins'''\ntrn_data['Age_cat'] = pd.cut(trn_data['Age'],bins=[20,30,35,40,45,50,55,60])\ntst_data['Age_cat'] = pd.cut(tst_data['Age'],bins=[20,30,35,40,45,50,55,60])","ad3d4a4d":"'''Drop the age feature'''\ntrn_data.drop('Age',inplace=True,axis=1)\ntst_data.drop('Age',inplace=True,axis=1)","1591d6fd":"'''List of B1 and B2 columns in the train data'''\nB2_columns =  [col for col in list(trn_data.columns) if col.startswith('B2')]\nB1_columns =  [col for col in list(trn_data.columns) if col.startswith('B1')]","ae2e7343":"'''Assign to X and y as input and target columns'''\nX = trn_data.drop(B2_columns,axis=1)\ny = trn_data[B2_columns]","3da0d188":"# Split the data\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42,stratify=trn_data['Is_Active'])","4a187137":"#check the shape of the splitted data .. \nX_train.shape, X_test.shape, y_train.shape,y_test.shape","f9cc70f4":"y_train.head(2)","af0ba96b":"X_train.head(2)","13e023a8":"'''Encode the categorical columns'''\nfrom sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\n\nfor cols in ['Gender','City_Category','Customer_Category','Age_cat']:\n    X_train[cols] = encoder.fit_transform(X_train[cols])\n    X_test[cols] = encoder.transform(X_test[cols]) \n    tst_data[cols] = encoder.transform(tst_data[cols])","9a890a1f":"X_train.head(3)","d3cd7c59":"#import the libraries\nfrom sklearn.decomposition import PCA\nimport catboost\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","1e8f659d":"#instantiate the model with Multioutput classifier as the meta classifier\n#clf_model = MultiOutputClassifier(catboost.CatBoostClassifier(verbose=0))\nclf_model = MultiOutputClassifier(KNeighborsClassifier())","c38bf13b":"#fit the model on the train data\nclf_model.fit(X_train, y_train)","32579e65":"#get the predictions on the X_test\nX_test_predictions = clf_model.predict_proba(X_test)","58d6b66d":"#view one of the predicted probabilities\nX_test_predictions[:10]","7b508ca2":"#get the predictions on the test\ntest_predictions = clf_model.predict_proba(tst_data)","06f406ef":"#extract the probability of target 1, ie the label is selected\npreds_cal = []\nfor item in test_predictions:\n    preds_cal.append( [local_item[1] for local_item in item] )","cef534d5":"df_test_predictions = pd.DataFrame(np.array(preds_cal).T, columns=B2_columns)","757fb40e":"df_test_predictions.head(3)","608889e3":"'''Retrieve the columns from the predicted dataframes'''\ncolumns = df_test_predictions.columns","f8f0a129":"x = np.array(df_test_predictions)","bdcfda6a":"'''Populate a dictionary with the top 3 predicted label or product for each of the customer id in the test data'''\n\ncust_id = test['Customer_ID']\ndict_pred = dict()\n\nfor i in range(len(df_test_predictions)):\n    #get the arguments of the top 3 probabilities   \n    arr = np.argpartition(x[i], -3)[-3:]\n    #retrieve the corresponding columns and the labels \n    label = [columns[j].split('_')[1] for j in arr] \n    #store the customer id and the predicted labels\n    dict_pred[cust_id[i]]  = label \n    ","3e5518ca":"'''Create the submission file'''\nsubmission = pd.DataFrame()\nsubmission['Customer_ID'] = test['Customer_ID']\nsubmission['Product_Holding_B2'] = dict_pred.values()\nsubmission.to_csv('submission.csv',index=False)","ab080388":"_As the gender is skewed, this is not a good reflection of the customer's activity based on the gender unless the data is normalized or plotted based on proportion_","79bd1168":"# _Modeling_","ee132da6":"## _Which gender is a more active customer ?_","0ea48855":"# _Exploratory Data Analysis_","b96c6919":"_There are more inactive customers than the active ones. This feature could be a deciding factor in predicting whether the customer would subscribe to a new product service_","8f9342a2":"# _Problem Statement_\nXYZ Bank is a mid-sized private bank that includes a variety of banking products, such as savings accounts, current accounts, investment products, credit products, and home loans.\n\nThe Bank wants to predict the next set of products for a set of customers to optimize their marketing and communication campaigns.\n\nThe data available in this problem contains the following information:\n\nUser Demographic Details : Gender, Age, Vintage, Customer Category etc.\nCurrent Product Holdings\nProduct Holding in Next 6 Months (only for Train dataset)\nHere, our task is to predict the next set of products (upto 3 products) for a set of customers (Test data) based on their demographics and current product holdings.\n\nFor information on the dataset, view the following page :- \n\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/amexpert-2021-machine-learning-hackathon\/#ProblemStatement \n","b89475d7":"_The median age of both the male and female customer is very similar and so is the overall distribution_","5237de41":"<b> _Observations from the training dataset info_ <\/b>\n- _There are no null values in the given dataset._ \n- _There are over 37,748 entries in the dataset_ \n- _Age, Vintage and Is_Active are the only numerical features and the rest are of type object_\n- _The memory size of the dataset is of no concern here_","42fb8f5e":"# _Load the Data_","53ebce41":"# _Import Libraries_","4427527e":"<b> _The city category is balanced_ <\/b>","f46803c1":"# _Feature Engineering_","8443fb63":"<b> _The next job is to make sure that the 0's are replaced with 1's in the corresponding rows where the customer has already subscribed to that product_ <\/b>"}}