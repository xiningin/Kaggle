{"cell_type":{"f931a2e1":"code","b839895f":"code","cd740d6a":"code","acbc7f8c":"code","673b98fe":"code","038a3916":"code","fbc9923d":"code","6bf5181f":"code","879cea43":"code","985cbed4":"code","a2ca6a1e":"code","bfcf16f8":"code","c4de0cea":"code","f41bd0e2":"code","4bc68546":"code","4214670f":"code","151ceb84":"code","44e781ad":"code","d72d4bbf":"code","e1bf77db":"code","baf65864":"code","c66a8389":"code","e2905cee":"code","ea138538":"code","bfb07077":"code","64e6ef9b":"code","8013d135":"code","c5e1b6ad":"code","45f21c25":"code","5d7480fa":"markdown","9d56c59c":"markdown","3b185afd":"markdown","47796f07":"markdown","c3fb521a":"markdown","6af42c5f":"markdown","0b1de40f":"markdown","8b65a470":"markdown"},"source":{"f931a2e1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","b839895f":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","cd740d6a":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","acbc7f8c":"data.describe()      #description of dataset ","673b98fe":"data.info()","038a3916":"data.shape       #569 rows and 33 columns","fbc9923d":"data.columns     #displaying the columns of dataset","6bf5181f":"data.value_counts","879cea43":"data.dtypes","985cbed4":"data.isnull().sum()","a2ca6a1e":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","bfcf16f8":"data","c4de0cea":"data.corr()","f41bd0e2":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","4bc68546":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","4214670f":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","151ceb84":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","44e781ad":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","d72d4bbf":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","e1bf77db":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","baf65864":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","c66a8389":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","e2905cee":"print(len(x_train))\n","ea138538":"print(len(x_test))","bfb07077":"print(len(y_train))","64e6ef9b":"print(len(y_test))","8013d135":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123)\n\ndtree.fit(x_train,y_train)\n\n#y_pred = dtree.predict(x_test)\n","c5e1b6ad":"y_pred=dtree.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",dtree.score(x_train,y_train)*100)\n\n","45f21c25":"print(accuracy_score(y_test,y_pred)*100)","5d7480fa":"# MODELS","9d56c59c":"# IMPORTING THE LIBRARIES","3b185afd":"# LOADING THE DATASET","47796f07":"**So we get a accuracy score of 94.73 % using Decision Tree Classifier**","c3fb521a":"#  DECISION TREE CLASSIFIER","6af42c5f":"# VISUALIZING THE DATA","0b1de40f":"# TRAINING AND TESTING DATA","8b65a470":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**"}}