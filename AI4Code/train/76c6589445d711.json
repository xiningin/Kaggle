{"cell_type":{"5d72a27d":"code","227313d8":"code","b20dcc60":"code","78fb4b3a":"code","1762be3c":"code","ae762284":"code","a5615bfb":"code","ab98fab4":"code","8f8a51ac":"code","bd7795c2":"code","61925853":"code","02062d53":"code","c51a1b0f":"code","64063303":"code","e42cc5eb":"code","2101f51c":"code","bf7a2ebc":"code","875a5dad":"code","04033cee":"code","afa3f79a":"code","96672313":"code","cfcd75fb":"code","309fe127":"code","9f4baed8":"code","36523046":"code","56315a27":"code","ee55bad1":"code","41d8f468":"code","c7806656":"code","f631493a":"code","557f7f3f":"code","b9099a4c":"code","171333f3":"code","c0d53556":"code","0c5b98d3":"code","c77658dc":"code","3cd61f7a":"code","a4302011":"code","a3031db4":"code","33dbeb65":"code","52e3efd7":"markdown","6a86e5e2":"markdown","9f80db6d":"markdown","82ac21da":"markdown"},"source":{"5d72a27d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","227313d8":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import LabelEncoder\nimport pandas as pd\nfrom sklearn.metrics import  accuracy_score \nimport sklearn.metrics as metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom pprint import pprint\nfrom sklearn.model_selection import KFold","b20dcc60":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest1 = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest","78fb4b3a":"test.isnull().sum()","1762be3c":"test = test.fillna(test.mean().iloc[0])\ntest.isnull().sum()","ae762284":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain","a5615bfb":"train = train.fillna(train.mean().iloc[0])\ntrain.isnull().sum()","ab98fab4":"test","8f8a51ac":"train.isnull().sum()","bd7795c2":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncategorical_cols = [\"Ticket\",\"Name\",\"Sex\",\"Embarked\"]\ntest[categorical_cols] = test[categorical_cols].apply(lambda col: le.fit_transform(col.astype(str)))\ntest.head()","61925853":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncategorical_cols = [\"Ticket\",\"Name\",\"Sex\",\"Embarked\"]\ntrain[categorical_cols] = train[categorical_cols].apply(lambda col: le.fit_transform(col.astype(str)))\ntrain.head()","02062d53":"import seaborn as sns\n\nf, ax = plt.subplots(figsize=(15, 10))\ncorr = train.corr()\nsns.heatmap(corr,annot = True, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax)","c51a1b0f":"import seaborn as sns\n\nf, ax = plt.subplots(figsize=(15, 10))\ncorr = test.corr()\nsns.heatmap(corr,annot = True, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax)","64063303":"test = test.drop(['PassengerId'],axis=1)\ntest = test.drop(['Name'],axis=1)\ntest = test.drop(['Cabin'],axis=1)","e42cc5eb":"train = train.drop(['Name'],axis=1)\ntrain = train.drop(['PassengerId'],axis=1)\ntrain = train.drop(['Cabin'],axis=1)","2101f51c":"clf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(train )","bf7a2ebc":"train_scores = clf.negative_outlier_factor_\ntrain_scores[0:10]\npd.DataFrame(np.sort(train_scores)).plot(stacked=True, xlim=[0,20], style='.-')\n","875a5dad":"threshold_value  = np.sort(train_scores)[7]\noutlier_tf = train_scores > threshold_value \nfinal_train = train[train_scores > threshold_value ]","04033cee":"train","afa3f79a":"final_train.sum()","96672313":"final_train.isnull().sum()","cfcd75fb":"final_train","309fe127":"final_train = final_train[['Age','Ticket', 'Fare','Embarked', 'Sex', 'SibSp','Pclass','Parch','Survived']]\nfinal_train","9f4baed8":"test = test[['Age','Ticket', 'Fare','Embarked', 'Sex', 'SibSp','Pclass','Parch']]\ntest","36523046":"test","56315a27":"train.shape","ee55bad1":"test.shape","41d8f468":"X = final_train.iloc[:, :-1].values\ny = final_train.iloc[:,8].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state = 42)\n","c7806656":"rf_model = RandomForestClassifier().fit(X_train,y_train)\ny_pred = rf_model.predict(X_test)\naccuracy_score(y_test,y_pred)","f631493a":"from sklearn.model_selection import RandomizedSearchCV\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)\n{'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n","557f7f3f":"rf = RandomForestRegressor()\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 10, verbose=2, random_state=42, n_jobs = -1)\nrf_random.fit(X_train, y_train)","b9099a4c":"rf_random.best_params_","171333f3":"rf_random_tuned =RandomForestClassifier(n_estimators = 400,\n                                 min_samples_split =10,\n                                 max_features = 'sqrt',\n                                 max_depth = 90,\n                                 min_samples_leaf = 2,\n                                 bootstrap = False)\n\n\n\n\n\n\nrf_random_tuned.fit(X_train,y_train)","c0d53556":"y_pred_random = rf_random_tuned.predict(X_test)\naccuracy_score(y_test,y_pred_random)","0c5b98d3":"y_pred_last = rf_random_tuned.predict(test)","c77658dc":"Survived = pd.DataFrame(y_pred_last, columns = ['Survived'])\nPassengerId = pd.DataFrame(test1, columns = ['PassengerId'])\nSubmission=PassengerId.join(Survived)\nSubmission = pd.DataFrame(Submission)","3cd61f7a":"Submission = Submission.groupby('PassengerId').mean()","a4302011":"Submission","a3031db4":"Submission.to_csv('Submission.csv',index=True)","33dbeb65":"Submission.sum()","52e3efd7":"# Final","6a86e5e2":" ## Model\n ","9f80db6d":" # Random Forest","82ac21da":"## Model Tuning"}}