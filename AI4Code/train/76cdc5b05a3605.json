{"cell_type":{"fd777eb3":"code","3e2d4502":"code","4f09a4a4":"code","39a50cf3":"code","6dd8bfc6":"code","92f325ca":"code","3fe6c1e4":"code","f31f6d52":"code","9ebedd02":"code","12fa9049":"code","e0990fb2":"code","72dd0a79":"code","5cfdf3d8":"code","cfa4cc1e":"code","78d87404":"code","15662da5":"code","7cd1136a":"code","ba07d229":"code","f6bb38bf":"code","d5d3d7cf":"code","6eb70e72":"code","8249630a":"markdown","7ab19647":"markdown","317828ed":"markdown","40ae14cf":"markdown","77a006fa":"markdown","0889a1b0":"markdown","1caf235f":"markdown","385c59b8":"markdown","b5702d36":"markdown"},"source":{"fd777eb3":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport tensorflow as tf","3e2d4502":"tf.__version__","4f09a4a4":"# Read the data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain.info()","39a50cf3":"test.info()","6dd8bfc6":"train","92f325ca":"# Modify the 'Sex' data to numeric values:\nfor df in [train,test]:\n    df['Sex_binary'] = df['Sex'].map({'male':0,'female':1})\nmedian = train['Age'].median()\n#median2 = test['Age'].median()\ntrain['Age'].fillna(median)\ntest['Age'].fillna(median)\n\ntrain.info()","3fe6c1e4":"# Checking for correlation's using Pearson's r coefficient:\ncorr_matrix = train.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","f31f6d52":"not_needed = ['Name','SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked','Age','Sex']\natributes = ['Sex_binary', 'Pclass', 'Fare']\ntarget = ['Survived']\ntrain = train.drop(not_needed,axis=1)\ntest = test.drop(not_needed,axis=1)\ntest.loc[test['Fare'].isna()] = 0\n","9ebedd02":"X_train = train.iloc[:, 2:].values\ny_train = train.iloc[:, 1].values\nX_test = test.iloc[:, 1:].values","12fa9049":"for i in range(len(X_test)):\n    if X_test[i, 0] == 0:\n        X_test[i, 0] = 1\n        print('Hola')","e0990fb2":"# OneHotEncoder for Pclass\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\nX_train = np.array(ct.fit_transform(X_train))\nX_test = np.array(ct.transform(X_test))","72dd0a79":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","5cfdf3d8":"print(X_train)","cfa4cc1e":"# Basic ANN:\n#ann = tf.keras.models.Sequential()\n#ann.add(tf.keras.layers.Dense(units=10, activation='relu'))\n#ann.add(tf.keras.layers.Dense(units=10, activation='relu'))\n#ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# More complex:\nann = tf.keras.models.Sequential()\nann.add(tf.keras.layers.Dense(units = 32, input_shape = (5,), activation = 'relu'))\nann.add(tf.keras.layers.Dense(units = 128, activation = 'relu'))\nann.add(tf.keras.layers.Dense(units = 256, activation = 'relu'))\nann.add(tf.keras.layers.Dropout(0.1))\nann.add(tf.keras.layers.Dense(units = 1024, activation = 'relu'))\nann.add(tf.keras.layers.Dropout(0.1))\nann.add(tf.keras.layers.Dense(units = 256, activation = 'relu'))\nann.add(tf.keras.layers.Dropout(0.1))\nann.add(tf.keras.layers.Dense(units = 32, activation = 'relu'))\nann.add(tf.keras.layers.Dense(units =1 , activation = 'sigmoid'))","78d87404":"ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])#categorical_crossentropy for more than 2 categories","15662da5":"ann.fit(X_train, y_train, batch_size = 32, epochs = 100)\n","7cd1136a":"y_pred = ann.predict(X_test)\npredictions = []\nfor i in range(len(y_pred)):\n    if y_pred[i] > 0.5:\n        y_pred[i] = 1\n    else:\n        y_pred[i] = 0\n    predictions.append(int(y_pred[i,0]))","ba07d229":"p = np.array(predictions)\np.shape","f6bb38bf":"for i in range(417):\n    if test['PassengerId'].iloc[i] == 0:\n        test['PassengerId'].iloc[i] = 1044\n    print(test['PassengerId'].iloc[i])","d5d3d7cf":"submission = pd.DataFrame({'PassengerId':test['PassengerId'], 'Survived': p})\nsubmission.head()","6eb70e72":"filename = 'Titanic Predictions Basic ANN.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","8249630a":"### Import Libraries","7ab19647":"Low accuracy of around 0.8.","317828ed":"We can see that the main factors to determine survival are three: sex, class, and fare. Meaning that women and richer people were the luckiest. Now we take the atributes needed for the training and determine our target variable 'Survived'.","40ae14cf":"# Titanic prediction with basic ANN\nThis notebook contains a workflow template for creating an ANN with a basic structure.","77a006fa":"### Encoding categorical data filling missing values","0889a1b0":"## Part 3 - Making predictions and submitting","1caf235f":"## Part 2 - Building the ANN","385c59b8":"### Feature scaling","b5702d36":"## Part 1 - Data preprocessing"}}