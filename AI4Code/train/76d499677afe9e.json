{"cell_type":{"2cd5789c":"code","bccd71aa":"code","060deeed":"code","34dff443":"code","9c10e481":"code","0f31f995":"code","32121334":"code","2005cfd8":"code","4ae5f2cd":"code","ca2dc417":"code","590af5f0":"code","dd606c17":"code","b2791d99":"code","6f84821d":"code","b532e159":"code","2f8fbe2e":"code","6efd0588":"code","94d05987":"code","c5b6062e":"code","203760f7":"code","b2d921a1":"code","5eab5d20":"code","9cbf84cc":"code","95a7fbf6":"code","dc584dd4":"code","a1d823f3":"code","aa5fc8c3":"code","63422ec5":"code","ef2b5328":"code","666d7539":"code","18416c98":"code","494e15e4":"code","160d6758":"code","5638da63":"code","737a2d9d":"code","b9fd5f58":"code","f251cc91":"code","6aa20317":"code","37359f0d":"code","402a1506":"code","cf45dfcc":"code","434ffbdc":"code","119b76d6":"code","073e1bf7":"code","5ad5ee64":"code","221f7fab":"code","5a09ac27":"code","fbdee431":"code","c4bc3cb8":"code","5fe0e55b":"code","82dc6cb9":"code","03c28ad7":"code","6dac9074":"code","ff3ed0ce":"code","785e70ad":"code","0a0acd2c":"code","e2fdd34c":"code","84377ad6":"code","4bd509f2":"code","e7942381":"code","c6203e44":"code","631830e0":"code","7983277e":"markdown","0bbe59a1":"markdown","9f8fc265":"markdown","e84c6821":"markdown","adb935dc":"markdown","c0135776":"markdown","32ecea43":"markdown","16193f45":"markdown","c6b1e53e":"markdown","351a33dc":"markdown","33da02da":"markdown","77070cc1":"markdown","e56797c0":"markdown","dcad2996":"markdown","fe33f8f8":"markdown","b224b0f7":"markdown","602ad465":"markdown","40173982":"markdown","84814d58":"markdown","89e42348":"markdown","cb4f94f7":"markdown","6b8446e6":"markdown","b0c2b6a5":"markdown","0741cf71":"markdown","4ebb449f":"markdown","9c73dc42":"markdown","474a16e3":"markdown","6a18f91e":"markdown","60b2bc72":"markdown","ac5b367b":"markdown","b926f1da":"markdown","de9bad2f":"markdown","67bbec20":"markdown","bac4eb5f":"markdown","7b9ee24d":"markdown","898fac5b":"markdown","6dc387d0":"markdown","17f240d4":"markdown","aebb47a2":"markdown","b7305d43":"markdown","a96f8a5d":"markdown","fa0e19e7":"markdown","e97bfacf":"markdown","571aa9dc":"markdown","1c0f40d4":"markdown","c2621577":"markdown","6eb04109":"markdown","be18b381":"markdown","2526c123":"markdown","f354ff3d":"markdown","e12491ef":"markdown","c9c7334f":"markdown","14561c52":"markdown","17d69233":"markdown","6e336ed4":"markdown","1a00dadb":"markdown","fa6d0741":"markdown","8478053e":"markdown","56458634":"markdown","41e61e23":"markdown","c1771b11":"markdown","d18909aa":"markdown","28a85401":"markdown","5a2a14c9":"markdown","36f83cf2":"markdown","4c76ea55":"markdown","0a6f3bb1":"markdown","0aa2d7b2":"markdown","f828f668":"markdown","4e39fa4a":"markdown","d5aeb687":"markdown","76c5ac24":"markdown","dc24972f":"markdown","6c2f2cce":"markdown","19696b24":"markdown","ca411561":"markdown","56ac97c0":"markdown","3b9ab7b3":"markdown","c3cade76":"markdown","81e92e32":"markdown"},"source":{"2cd5789c":"%%HTML\n\n<div class='tableauPlaceholder' id='viz1512062244547' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;IP&#47;IPLDashboard_0&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='IPLDashboard_0&#47;Dashboard1' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;IP&#47;IPLDashboard_0&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1512062244547');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='1520px';vizElement.style.height='1787px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","bccd71aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as mlt\nimport seaborn as sns\nmlt.style.use('fivethirtyeight')\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","060deeed":"matches=pd.read_csv('..\/input\/matches.csv')   \ndelivery=pd.read_csv('..\/input\/deliveries.csv')\nmatches.head(2)","34dff443":"delivery.head(2)","9c10e481":"matches.drop(['umpire3'],axis=1,inplace=True)  #since all the values are NaN\ndelivery.fillna(0,inplace=True)     #filling all the NaN values with 0","0f31f995":"matches['team1'].unique()","32121334":"#Replacing the Team Names with their abbreviations\n\nmatches.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)\n\ndelivery.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)","2005cfd8":"print('Total Matches Played:',matches.shape[0])\nprint(' \\n Venues Played At:',matches['city'].unique())     \nprint(' \\n Teams :',matches['team1'].unique())","4ae5f2cd":"print('Total venues played at:',matches['city'].nunique())\nprint('\\nTotal umpires ',matches['umpire1'].nunique())","ca2dc417":"print((matches['player_of_match'].value_counts()).idxmax(),' : has most man of the match awards')\nprint(((matches['winner']).value_counts()).idxmax(),': has the highest number of match wins')","590af5f0":"df=matches.iloc[[matches['win_by_runs'].idxmax()]]\ndf[['season','team1','team2','winner','win_by_runs']]","dd606c17":"df=matches.iloc[[matches['win_by_wickets'].idxmax()]]\ndf[['season','team1','team2','winner','win_by_wickets']]","b2791d99":"print('Toss Decisions in %\\n',((matches['toss_decision']).value_counts())\/636*100)","6f84821d":"mlt.subplots(figsize=(10,6))\nsns.countplot(x='season',hue='toss_decision',data=matches)\nmlt.show()","b532e159":"mlt.subplots(figsize=(10,6))\nax=matches['toss_winner'].value_counts().plot.bar(width=0.9,color=sns.color_palette('RdYlGn',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nmlt.show()","2f8fbe2e":"matches_played_byteams=pd.concat([matches['team1'],matches['team2']])\nmatches_played_byteams=matches_played_byteams.value_counts().reset_index()\nmatches_played_byteams.columns=['Team','Total Matches']\nmatches_played_byteams['wins']=matches['winner'].value_counts().reset_index()['winner']\nmatches_played_byteams.set_index('Team',inplace=True)\n\ntrace1 = go.Bar(\n    x=matches_played_byteams.index,\n    y=matches_played_byteams['Total Matches'],\n    name='Total Matches'\n)\ntrace2 = go.Bar(\n    x=matches_played_byteams.index,\n    y=matches_played_byteams['wins'],\n    name='Matches Won'\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')","6efd0588":"df=matches[matches['toss_winner']==matches['winner']]\nslices=[len(df),(636-len(df))]\nlabels=['yes','no']\nmlt.pie(slices,labels=labels,startangle=90,shadow=True,explode=(0,0.05),autopct='%1.1f%%',colors=['r','g'])\nfig = mlt.gcf()\nfig.set_size_inches(6,6)\nmlt.show()","94d05987":"mlt.subplots(figsize=(10,6))\nsns.countplot(x='season',data=matches,palette=sns.color_palette('winter'))  #countplot automatically counts the frequency of an item\nmlt.show()","c5b6062e":"batsmen = matches[['id','season']].merge(delivery, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\n#merging the matches and delivery dataframe by referencing the id and match_id columns respectively\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\nseason.set_index('season').plot(marker='o')\nmlt.gcf().set_size_inches(10,6)\nmlt.title('Total Runs Across the Seasons')\nmlt.show()","203760f7":"avgruns_each_season=matches.groupby(['season']).count().id.reset_index()\navgruns_each_season.rename(columns={'id':'matches'},inplace=1)\navgruns_each_season['total_runs']=season['total_runs']\navgruns_each_season['average_runs_per_match']=avgruns_each_season['total_runs']\/avgruns_each_season['matches']\navgruns_each_season.set_index('season')['average_runs_per_match'].plot(marker='o')\nmlt.gcf().set_size_inches(10,6)\nmlt.title('Average Runs per match across Seasons')\nmlt.show()","b2d921a1":"Season_boundaries=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\na=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(a,left_on='season',right_on='season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})\nSeason_boundaries.set_index('season')[['6\"s','4\"s']].plot(marker='o')\nfig=mlt.gcf()\nfig.set_size_inches(10,6)\nmlt.show()","5eab5d20":"runs_per_over = delivery.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over[(matches_played_byteams[matches_played_byteams['Total Matches']>50].index)].plot(color=[\"b\", \"r\", \"#Ffb6b2\", \"g\",'brown','y','#6666ff','black','#FFA500']) #plotting graphs for teams that have played more than 100 matches\nx=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nmlt.xticks(x)\nmlt.ylabel('total runs scored')\nfig=mlt.gcf()\nfig.set_size_inches(16,10)\nmlt.show()","9cbf84cc":"mlt.subplots(figsize=(10,15))\nax = matches['venue'].value_counts().sort_values(ascending=True).plot.barh(width=.9,color=sns.color_palette('inferno',40))\nax.set_xlabel('Grounds')\nax.set_ylabel('count')\nmlt.show()","95a7fbf6":"mlt.subplots(figsize=(10,6))\n#the code used is very basic but gets the job done easily\nax = matches['player_of_match'].value_counts().head(10).plot.bar(width=.8, color=sns.color_palette('inferno',10))  #counts the values corresponding \n# to each batsman and then filters out the top 10 batsman and then plots a bargraph \nax.set_xlabel('player_of_match') \nax.set_ylabel('count')\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+0.25))\nmlt.show()","dc584dd4":"print('Winners By Years')\nfor i in range(2008,2017):\n    df=((matches[matches['season']==i]).iloc[-1]) \n    print(df[[1,10]].values)\n#getting the last match in every season since the last match will be the final match for the season","a1d823f3":"print('\\n Total Matches with Super Overs:',delivery[delivery['is_super_over']==1].match_id.nunique())","aa5fc8c3":"teams=['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW']\nplay=delivery[delivery['is_super_over']==1].batting_team.unique()\nplay=list(play)\nprint('Teams who haven\"t ever played a super over are:' ,list(set(teams)-set(play)))","63422ec5":"mlt.subplots(figsize=(10,6))\nump=pd.concat([matches['umpire1'],matches['umpire2']]) \nax=ump.value_counts().head(10).plot.bar(width=0.8,color=sns.color_palette('summer',10))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+0.25))\nmlt.show()","ef2b5328":"def team1_vs_team2(team1,team2):\n    mt1=matches[((matches['team1']==team1)|(matches['team2']==team1))&((matches['team1']==team2)|(matches['team2']==team2))]\n    sns.countplot(x='season', hue='winner',data=mt1,palette='Set3')\n    mlt.xticks(rotation='vertical')\n    leg = mlt.legend( loc = 'upper center')\n    fig=mlt.gcf()\n    fig.set_size_inches(10,6)\n    mlt.show()\nteam1_vs_team2('KKR','MI')\n","666d7539":"team1_vs_team2('CSK','MI')","18416c98":"def comparator(team1):\n    teams=['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW']\n    teams.remove(team1)\n    opponents=teams.copy()\n    mt1=matches[((matches['team1']==team1)|(matches['team2']==team1))]\n    for i in opponents:\n        mask = (((mt1['team1']==i)|(mt1['team2']==i)))&((mt1['team1']==team1)|(mt1['team2']==team1))\n        mt2 = mt1.loc[mask, 'winner'].value_counts().to_frame().T\n        print(mt2)\n    \ncomparator('MI')","494e15e4":"mlt.subplots(figsize=(12,6))\nxyz=delivery.groupby(['match_id','inning','batting_team'])['total_runs'].sum().reset_index()\nxyz.drop('match_id',axis=1,inplace=True)\nxyz=xyz.sort_values(by=['batting_team','total_runs'],ascending=True)\nscore_1_inning=xyz[xyz['inning']==1]\nscore_2_inning=xyz[xyz['inning']==2]\nsns.boxplot(x='batting_team',y='total_runs',data=score_1_inning).set_title('1st Innings')\nmlt.show()\nsns.boxplot(x='batting_team',y='total_runs',data=score_2_inning).set_title('2nd Innings')\nfig=mlt.gcf()\nfig.set_size_inches(12,6)","160d6758":"high_scores=delivery.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \n#reset_index() converts the obtained series into a dataframe\nhigh_scores=high_scores[high_scores['total_runs']>=200]\n#nlargest is used to sort the given column\nhigh_scores.nlargest(10,'total_runs')","5638da63":"fig, ax =mlt.subplots(1,2)\nsns.countplot(high_scores['batting_team'],ax=ax[0])\nsns.countplot(high_scores['bowling_team'],ax=ax[1])\nmlt.xticks(rotation=90)\nfig=mlt.gcf()\nfig.set_size_inches(18,6)\nmlt.show()","737a2d9d":"print('Teams who have\"nt ever scored 200 runs',list(set(teams)-set(high_scores['batting_team'])))\nprint('Teams who haven\"t conceeded over 200 while bowling',list(set(teams)-set(high_scores['bowling_team'])))","b9fd5f58":"high=delivery.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()\nhigh.set_index(['match_id'],inplace=True)\nhigh['total_runs'].max()\nhigh.columns\nhigh=high.rename(columns={'total_runs':'count'})\nhigh=high[high['count']>=200].groupby(['inning','batting_team','bowling_team']).count()\nhigh","f251cc91":"high_scores=delivery.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()\nhigh_scores1=high_scores[high_scores['inning']==1]\nhigh_scores2=high_scores[high_scores['inning']==2]\nhigh_scores1=high_scores1.merge(high_scores2[['match_id','inning', 'total_runs']], on='match_id')\nhigh_scores1.rename(columns={'inning_x':'inning_1','inning_y':'inning_2','total_runs_x':'inning1_runs','total_runs_y':'inning2_runs'},inplace=True)\nhigh_scores1=high_scores1[high_scores1['inning1_runs']>=200]\nhigh_scores1['is_score_chased']=1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs']<=high_scores1['inning2_runs'], \n                                           'yes', 'no')\nhigh_scores1.head()","6aa20317":"slices=high_scores1['is_score_chased'].value_counts().reset_index().is_score_chased\nlist(slices)\nlabels=['target not chased','target chased']\nmlt.pie(slices,labels=labels,colors=['#1f2ff3', '#0fff00'],startangle=90,shadow=True,explode=(0,0.1),autopct='%1.1f%%')\nfig = mlt.gcf()\nfig.set_size_inches(6,6)\nmlt.show()","37359f0d":"balls=delivery.groupby(['batsman'])['ball'].count().reset_index()\nruns=delivery.groupby(['batsman'])['batsman_runs'].sum().reset_index()\nballs=balls.merge(runs,left_on='batsman',right_on='batsman',how='outer')\nballs.rename({'ball':'ball_x','batsman_runs':'ball_y'},axis=1,inplace=True)\nsixes=delivery.groupby('batsman')['batsman_runs'].agg(lambda x: (x==4).sum()).reset_index()\nfours=delivery.groupby(['batsman'])['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index()\nballs['strike_rate']=balls['ball_y']\/balls['ball_x']*100\nballs=balls.merge(sixes,left_on='batsman',right_on='batsman',how='outer')\nballs=balls.merge(fours,left_on='batsman',right_on='batsman',how='outer')\ncompare=delivery.groupby([\"match_id\", \"batsman\",\"batting_team\"])[\"batsman_runs\"].sum().reset_index()\ncompare=compare.groupby(['batsman','batting_team'])['batsman_runs'].max().reset_index()\nballs=balls.merge(compare,left_on='batsman',right_on='batsman',how='outer')\nballs.rename({'ball_x':'balls','ball_y':'runs','batsman_runs_x':\"6's\",'batsman_runs_y':\"4's\",'batting_team':'Team','batsman_runs':'Highest_score'},axis=1,inplace=True)\nballs.head()\n","402a1506":"def batsman_comparator(stat1,stat2,batsman1,batsman2):\n    sns.FacetGrid(balls,hue='Team',size=8).map(mlt.scatter, stat1,stat2, alpha=0.5).add_legend()\n    bats1=balls[balls['batsman'].str.contains(batsman1)].sort_values(by=stat1,ascending=False)\n    bats2=balls[balls['batsman'].str.contains(batsman2)].sort_values(by=stat1,ascending=False)\n    mlt.scatter(bats1[stat1],bats1[stat2]-1,s=75,c='#55ff33')\n    mlt.text(x=bats1[stat1].values[0],y=bats1[stat2].values[0],s=batsman1,\n            fontsize=10, weight='bold', color='#f46d43')\n    mlt.scatter(bats2[stat1],bats2[stat2],s=75,c='#f73545')\n    mlt.text(x=bats2[stat1].values[0],y=bats2[stat2].values[0]+1,s=batsman2, \n            fontsize=10, weight='bold', color='#ff58fd')\n    mlt.gcf().set_size_inches(15,10)\n    mlt.title('Batsman Comparator',size=25)\n    mlt.show()\n\nbatsman_comparator(\"6's\",\"4's\",'Gayle','Villiers') #comparing gayle and de-villiers based on their respective boundaries","cf45dfcc":"batsman_comparator(\"runs\",\"strike_rate\",'Dhoni','V Kohli')","434ffbdc":"mlt.subplots(figsize=(10,6))\nmax_runs=delivery.groupby(['batsman'])['batsman_runs'].sum()\nax=max_runs.sort_values(ascending=False)[:10].plot.bar(width=0.8,color=sns.color_palette('winter_r',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.1, p.get_height()+50),fontsize=15)\nmlt.show()","119b76d6":"toppers=delivery.groupby(['batsman','batsman_runs'])['total_runs'].count().reset_index()\ntoppers=toppers.pivot('batsman','batsman_runs','total_runs')\nfig,ax=mlt.subplots(2,2,figsize=(18,12))\ntoppers[1].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[0,0],color='#45ff45',width=0.8)\nax[0,0].set_title(\"Most 1's\")\nax[0,0].set_ylabel('')\ntoppers[2].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[0,1],color='#df6dfd',width=0.8)\nax[0,1].set_title(\"Most 2's\")\nax[0,1].set_ylabel('')\ntoppers[4].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[1,0],color='#fbca5f',width=0.8)\nax[1,0].set_title(\"Most 4's\")\nax[1,0].set_ylabel('')\ntoppers[6].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[1,1],color='#ffff00',width=0.8)\nax[1,1].set_title(\"Most 6's\")\nax[1,1].set_ylabel('')\nmlt.show()","073e1bf7":"top_scores = delivery.groupby([\"match_id\", \"batsman\",\"batting_team\"])[\"batsman_runs\"].sum().reset_index()\n#top_scores=top_scores[top_scores['batsman_runs']>100]\ntop_scores.sort_values('batsman_runs', ascending=0).head(10)\ntop_scores.nlargest(10,'batsman_runs')","5ad5ee64":"swarm=['CH Gayle','V Kohli','G Gambhir','SK Raina','YK Pathan','MS Dhoni','AB de Villiers','DA Warner']\nscores = delivery.groupby([\"match_id\", \"batsman\",\"batting_team\"])[\"batsman_runs\"].sum().reset_index()\nscores=scores[top_scores['batsman'].isin(swarm)]\nsns.swarmplot(x='batsman',y='batsman_runs',data=scores,hue='batting_team',palette='Set1')\nfig=mlt.gcf()\nfig.set_size_inches(14,8)\nmlt.ylim(-10,200)\nmlt.show()","221f7fab":"a=batsmen.groupby(['season','batsman'])['batsman_runs'].sum().reset_index()\na=a.groupby(['season','batsman'])['batsman_runs'].sum().unstack().T\na['Total']=a.sum(axis=1)\na=a.sort_values(by='Total',ascending=0)[:5]\na.drop('Total',axis=1,inplace=True)\na.T.plot(color=['red','blue','#772272','green','#f0ff00'],marker='o')\nfig=mlt.gcf()\nfig.set_size_inches(16,6)\nmlt.show()","5a09ac27":"a=batsmen.groupby(['batsman','batsman_runs'])['total_runs'].count().reset_index()\nb=max_runs.sort_values(ascending=False)[:10].reset_index()\nc=b.merge(a,left_on='batsman',right_on='batsman',how='left')\nc.drop('batsman_runs_x',axis=1,inplace=True)\nc.set_index('batsman',inplace=True)\nc.columns=['type','count']\nc=c[(c['type']==1)|(c['type']==2)|(c['type']==4)|(c['type']==6)]\ncols=['type','count']\nc.reset_index(inplace=True)\nc=c.pivot('batsman','type','count')\n\ntrace1 = go.Bar(\n    y=c.index, x=c[6],\n    name=\"6's\",\n    orientation = 'h',\n    marker = dict(color = 'rgba(178, 78, 139, 0.6)',\n        line = dict(color = 'rgba(178, 78, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    y=c.index, x=c[4],\n    name=\"4's\",\n    orientation = 'h',\n    marker = dict(color = 'rgba(58, 71, 80, 0.6)',\n        line = dict(color = 'rgba(58, 71, 80, 1.0)',\n            width = 3)\n    )\n)\n\ntrace3 = go.Bar(\n    y=c.index, x=c[2],\n    name=\"2's\",\n    orientation = 'h',\n    marker = dict(color = 'rgba(101, 178, 139, 0.6)',\n        line = dict(color = 'rgba(101, 178, 139, 1.0)',\n            width = 3)\n    )\n)\ntrace4 = go.Bar(\n    y=c.index, x=c[1],\n    name=\"1's\",\n    orientation = 'h',\n    marker = dict(color = 'rgba(208, 105, 80, 0.6)',\n        line = dict(color = 'rgba(208, 105, 80, 1.0)',\n            width = 3)\n    )\n)\n\ndata = [trace1, trace2,trace3,trace4]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='marker-h-bar')","fbdee431":"mlt.subplots(figsize=(10,6))\nbins=range(0,180,10)\nmlt.hist(top_scores[\"batsman_runs\"],bins,histtype=\"bar\",rwidth=1.2,color='#0ff0ff')\nmlt.xlabel('Runs')\nmlt.ylabel('Count')\nmlt.axvline(top_scores[\"batsman_runs\"].mean(), color='b', linestyle='dashed', linewidth=2)\nmlt.plot()\nmlt.show()","c4bc3cb8":"orange=matches[['id','season']]\norange=orange.merge(delivery,left_on='id',right_on='match_id',how='left')\norange=orange.groupby(['season','batsman'])['batsman_runs'].sum().reset_index()\norange=orange.sort_values('batsman_runs',ascending=0)\norange=orange.drop_duplicates(subset=[\"season\"],keep=\"first\")\norange.sort_values(by='season')\n\ntrace1 = go.Bar(\n    x=orange['season'].values,\n    y=orange['batsman_runs'].values,\n    name='Total Matches',\n    text=orange['batsman'].values,\n    marker=dict(\n        color='rgb(255,140,0)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=1\n)\n\n\nlayout = go.Layout(\n    title='Orange-Cap Holders',\n)\ndata=[trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')","5fe0e55b":"mlt.subplots(figsize=(10,6))\ndismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  #since run-out is not creditted to the bowler\nct=delivery[delivery[\"dismissal_kind\"].isin(dismissal_kinds)]\nax=ct['bowler'].value_counts()[:10].plot.bar(width=0.8,color=sns.color_palette('summer_r',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.10, p.get_height()),fontsize=15)\nmlt.show()","82dc6cb9":"eco=delivery.groupby(['bowler']).sum()\neco['total balls']=delivery['bowler'].value_counts()\neco['overs']=(eco['total balls']\/\/6)\neco[eco['overs']>200].sort_values(by='overs',ascending=0)['overs'].head(5).reset_index()\n","03c28ad7":"eco['economy']=(eco['total_runs']\/(eco['overs']))\neco[(eco['overs']>300)].sort_values('economy')[:10].economy.reset_index().T","6dac9074":"bowlers=delivery.groupby('bowler').sum().reset_index()\nbowl=delivery['bowler'].value_counts().reset_index()\nbowlers=bowlers.merge(bowl,left_on='bowler',right_on='index',how='left')\nbowlers=bowlers[['bowler_x','total_runs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','total_runs':'runs_given','bowler_y':'balls'},axis=1,inplace=True)\nbowlers['overs']=(bowlers['balls']\/\/6)\ndismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct=delivery[delivery[\"dismissal_kind\"].isin(dismissal_kinds)]\nct=ct['bowler'].value_counts()[:20].reset_index()\nbowlers=bowlers.merge(ct,left_on='bowler',right_on='index',how='left').dropna()\nbowlers=bowlers[['bowler_x','runs_given','overs','bowler_y']]\nbowlers.rename({'bowler_x':'bowler','bowler_y':'wickets'},axis=1,inplace=True)\nbowlers['economy']=(bowlers['runs_given']\/bowlers['overs'])\nbowlers.head()","ff3ed0ce":"trace = go.Scatter(\n    y = bowlers['wickets'],\n    x = bowlers['bowler'],\n    mode='markers',\n    marker=dict(\n        size= bowlers['wickets'].values,\n        color = bowlers['economy'].values,\n        colorscale='Viridis',\n        showscale=True,\n        colorbar = dict(title = 'Economy'),\n    ),\n    text = bowlers['overs'].values\n)\ndata = [(trace)]\n\nlayout= go.Layout(\n    autosize= True,\n    title= 'Top 20 Wicket Taking Bowlers',\n    hovermode= 'closest',\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        title='Bowlers'\n    ),\n    yaxis=dict(\n        title= 'Wickets Taken',\n        ticklen= 5,\n        gridwidth= 2,\n        showgrid=False,\n        zeroline=False,\n        showline=False\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatterChol')","785e70ad":"gayle=delivery[delivery['batsman']=='CH Gayle']\ngayle=gayle[gayle['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\ngayle=gayle.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\ngayle['batsman']='CH Gayle'\n\nkohli=delivery[delivery['batsman']=='V Kohli']\nkohli=kohli[kohli['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nkohli=kohli.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nkohli['batsman']='V Kohli'\n\n\nraina=delivery[delivery['batsman']=='SK Raina']\nraina=raina[raina['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nraina=raina.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nraina['batsman']='SK Raina'\n\nabd=delivery[delivery['batsman']=='AB de Villiers']\nabd=abd[abd['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nabd=abd.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nabd['batsman']='AB de Villiers'\n\nmsd=delivery[delivery['batsman']=='MS Dhoni']\nmsd=msd[msd['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nmsd=msd.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nmsd['batsman']='MS Dhoni'\n\n\ngg=delivery[delivery['batsman']=='G Gambhir']\ngg=gg[gg['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\ngg=gg.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\ngg['batsman']='G Gambhir'\n\nrohit=delivery[delivery['batsman']=='RG Sharma']\nrohit=rohit[rohit['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nrohit=rohit.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nrohit['batsman']='RG Sharma'\n\nuthapa=delivery[delivery['batsman']=='RV Uthappa']\nuthapa=uthapa[uthapa['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nuthapa=uthapa.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nuthapa['batsman']='RV Uthappa'\n\ndhawan=delivery[delivery['batsman']=='S Dhawan']\ndhawan=dhawan[dhawan['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\ndhawan=dhawan.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\ndhawan['batsman']='S Dhawan'\n\nwarn=delivery[delivery['batsman']=='DA Warner']\nwarn=warn[warn['dismissal_kind'].isin(['caught','lbw','bowled','stumped','caught and bowled',\"hit wicket\"])]\nwarn=warn.groupby('bowler').count().sort_values(by='dismissal_kind',ascending=0).dismissal_kind[:1].reset_index()\nwarn['batsman']='DA Warner'\n\nnew = gayle.append([kohli,raina,abd,msd,gg,rohit,uthapa,dhawan,warn])\nnew = new[['batsman','bowler','dismissal_kind']]\nnew.columns=['batsman','bowler','No_of_Dismissals']\nnew","0a0acd2c":"mlt.subplots(figsize=(10,6))\neco.replace([np.inf, -np.inf], np.nan,inplace=True)\neco.fillna(0,inplace=True)\nbins=range(0,26)\nmlt.hist(eco['economy'],bins,histtype=\"bar\",rwidth=1.2,color='#0ff0ff')\nmlt.xlabel('Economy')\nmlt.ylabel('Count')\nmlt.axvline(eco[\"economy\"].mean(), color='b', linestyle='dashed', linewidth=2)\nmlt.plot()\nmlt.show()","e2fdd34c":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  #since run-out is not creditted to the bowler\npurple=delivery[delivery[\"dismissal_kind\"].isin(dismissal_kinds)]\npurple=purple.merge(matches,left_on='match_id',right_on='id',how='outer')\npurple=purple.groupby(['season','bowler'])['dismissal_kind'].count().reset_index()\npurple=purple.sort_values('dismissal_kind',ascending=False)\npurple=purple.drop_duplicates('season',keep='first').sort_values(by='season')\npurple.rename({'dismissal_kind':'count_wickets'},axis=1,inplace=True)\n\ntrace1 = go.Bar(\n    x=purple['season'].values,\n    y=purple['count_wickets'].values,\n    name='Total Matches',\n    text=purple['bowler'].values,\n    marker=dict(\n        color='rgb(75,0,130)',\n        line=dict(\n            color='rgb(108,148,107)',\n            width=1.5,\n        )\n    ),\n    opacity=1\n)\n\n\nlayout = go.Layout(\n    title='Purple-Cap Holders',\n)\ndata=[trace1]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='stacked-bar')","84377ad6":"extras=['wide_runs','bye_runs','legbye_runs','noball_runs']\nsizes=[5161,680,3056,612]\n\ndismiss=[\"run out\",\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]\nct=delivery[delivery[\"dismissal_kind\"].isin(dismiss)]\nbx=ct.dismissal_kind.value_counts()[:10]\nbx\n\n\nfig = {\n  \"data\": [\n    {\n      \"values\": sizes,\n      \"labels\": extras,\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"Extra's\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },     \n    {\n      \"values\": bx.values ,\n      \"labels\": bx.index,\n      \"text\":\"CO2\",\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.54, 1]},\n      \"name\": \"Wickets\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Extras Distribution and Types Of Wickets\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 15\n                },\n                \"showarrow\": False,\n                \"text\": \"EXTRA'S\",\n                \"x\": 0.18,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 15\n                },\n                \"showarrow\": False,\n                \"text\": \"WICKETS\",\n                \"x\": 0.85,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\npy.iplot(fig, filename='donut')","4bd509f2":"ax=delivery[delivery['batsman_runs']==6].batting_team.value_counts().reset_index()\nax2=delivery[delivery['batsman_runs']==4].batting_team.value_counts().reset_index()\nax=ax.merge(ax2,left_on='index',right_on='index',how='left')\nax.rename({'index':'team','batting_team_x':\"6's\",'batting_team_y':\"4's\"},axis=1,inplace=True)\n\ntrace1 = go.Bar(\n    x=ax.team.values, y=ax[\"6's\"],\n    name=\"6's\",\n    orientation = 'v',\n    marker = dict(color = 'rgba(204,12,28, 0.6)',\n        line = dict(color = 'rgba(204,12,28, 0.6)',\n            width = 3)\n    )\n)\ntrace2 = go.Bar(\n    x=ax.team.values, y=ax[\"4's\"],\n    name=\"4's\",\n    orientation = 'v',\n    marker = dict(color = 'rgba(9,234,227, 0.6)',\n        line = dict(color = 'rgba(9, 227, 227, 1.0)',\n            width = 3)\n    )\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='stack'\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='marker-h-bar')","e7942381":"finals=matches.drop_duplicates(subset=['season'],keep='last')\nfinals=finals[['id','season','city','team1','team2','toss_winner','toss_decision','winner']]\nmost_finals=pd.concat([finals['team1'],finals['team2']]).value_counts().reset_index()\nmost_finals.rename({'index':'team',0:'count'},axis=1,inplace=True)\nxyz=finals['winner'].value_counts().reset_index()\nmost_finals=most_finals.merge(xyz,left_on='team',right_on='index',how='outer')\nmost_finals=most_finals.replace(np.NaN,0)\nmost_finals.drop('index',axis=1,inplace=True)\nmost_finals.set_index('team',inplace=True)\nmost_finals.rename({'count':'finals_played','winner':'won_count'},inplace=True,axis=1)\nmost_finals.plot.bar(width=0.8)\nmlt.gcf().set_size_inches(10,6)\nmlt.show()","c6203e44":"df=finals[finals['toss_winner']==finals['winner']]\nslices=[len(finals),(9-len(df))]\nlabels=['yes','no']\nmlt.pie(slices,labels=labels,startangle=90,shadow=True,colors=['G','R'],explode=(0,0.1),autopct='%1.1f%%')\nfig = mlt.gcf()\nfig.set_size_inches(5,5)\nmlt.show()","631830e0":"finals['is_tosswin_matchwin']=finals['toss_winner']==finals['winner']\nsns.countplot(x='toss_decision',hue='is_tosswin_matchwin',data=finals)\nmlt.show()","7983277e":"### Total Matches vs Wins for Teams (INTERACTIVE)","0bbe59a1":"### Orange Caps Each Season(Highest Run Getter per Season) (INTERACTIVE)","9f8fc265":"RCB-RCB everywhere. Here too RCB leads with a big margin","e84c6821":"### Individual Scores By Top Batsman each Inning","adb935dc":"The graph on the left shows the number of times a team has scored above 200 runs. The graph on the right shows the number of times a bowling team has conceeded above 200 runs. ","c0135776":"The decision for batting or fielding varies largely across the seasons. In some seasons, the probablity that toss winners opt for batting is high, while it is not the case in other seasons. In 2016 though, the majority of toss winners opted for fielding. ","32ecea43":"**Observations:**\n\n 1. **Chris Gayle** has the highest Individual Score of **175** and Highest Number of Centuries i.e **5**\n 2. **MS Dhoni** and **Gautam Gambhir** have never scored a Century.\n 3. **V Kohli** has played only for 1 IPL Team in all seasons i.e RCB","16193f45":"The average economy rate is between 8.5-9","c6b1e53e":"## Maximum Man Of Matches","351a33dc":"## Tableau Dashboard","33da02da":"### Dhoni Vs Kohli","77070cc1":"### Sixes and Fours Across the Season","e56797c0":"## Matches Won By A Team Against Other Teams","dcad2996":"## Top Bowlers","fe33f8f8":"Mumbai Indians(MI) defeated Delhi Daredevils(DD) with the highest run difference","b224b0f7":"### Score Distribution For Teams by Innings","602ad465":"83.3%!!! chances is that the toss winning team wins the title. Thats a huge number and thus indication that winning the toss plays a great  role in match winning!! ","40173982":"### Is Toss Winner Also the Match Winner?","84814d58":"### Super Over!","89e42348":"Here too the Jamaican leads the table. Not only Gayle but there are many RCB players on the top scores list. Looks like RCB is a very formidable batting side.","cb4f94f7":"## Winners by Year","6b8446e6":"### Runs Scored By Batsman Across Seasons","b0c2b6a5":"Anybody who is a cricket Fan should surely try to analyse this dataset as it would help you in learning with a fun factor. I have tried my best to keep this notebook as simple as possible so that even a beginner can understand it easily. At the same time I have made efforts to analyse the dataset in different aspects effectively. I will keep updating the notebook as and when I come up with new things. Hope you like it!!!\n\nThe notebook contains:\n - Basic Analysis like Teams with maximum matches, wins,etc\n - Batsman Analysis\n - Bowler Analysis\n - 200+ scores analysis\n\nIf you like the notebook, **Please Upvote** as it will keep me motivated in doing great things ahead. Thanks!!\n\nI have used the following packages for visualisations:\n\n 1. Matplotlib\n 2. Seaborn\n 3. Plotly\n\nNot all the visuals are interactive as Plotly is not useful everywhere. I have mentioned **INTERACTIVE** at places where the visuals are inteactive.\n\nFollowing is a **Tableau Dashboard**. DO have a look at it.","0741cf71":"## Toss Decisions","4ebb449f":"### MI vs KKR","9c73dc42":"## 200+ Scores","474a16e3":"**Observations:**\n\n 1. Kohli has scored the maximum 1's\n 2. Dhoni has the maximum 2's . Those Strong Legs :p\n 3. Gambhir has the maximum 4's.\n 4. C Gayle has the maximum 6's  and he leads by a big margin.","6a18f91e":"### Maximum Toss Winners","60b2bc72":"### Frequency Of Economy","ac5b367b":"### Batting Or Fielding For Toss Winners","b926f1da":"Here se can see that MI and CSK have played against each other in more than 2 matches in some seasons i.e they have played qualifiers too.","de9bad2f":"### Top Individual Scores","67bbec20":"According to Graph 1 the batting by CSK in innings 1 looks to be the best.  Graph 2 also conveys the same story.\n\nIn Graph 2 we see a point near 0 which may seem to be outlier. But it is so because the match was disrupted. ","bac4eb5f":"The above dataframe shows the number of times a team has scored above 200 runs against another team. Clearly MI has scored 200+ againt DD 3 times and similarly RCB has scored 200+ againt KXIP 3 times. Also the number of 200+ runs are higher in the 1st innings.","7b9ee24d":"### Maximum Overs","898fac5b":"### Purple Caps Each Season (Maximum Wickets By Bowler per Season) (INTERACTIVE)","6dc387d0":"### MI vs CSK","17f240d4":"### Extras And Wickets (INTERACTIVE)","aebb47a2":"## Some Basic Analysis","b7305d43":"### Chances of chasing 200+ target","a96f8a5d":"Most Economical Bowlers with 300+ overs","fa0e19e7":"## Team1 vs Team2\n\nHere we will check the matches played between 2 teams and which had won more matches each year","e97bfacf":"MI have defeated KKR in 13 out of 18 matches played between them.Only in the year 2014, KKR won both the matches.Thus in a MI vs KKR match, we know on whom should we bet upon. Similar comparisions can be done between any two teams, we just need to change the team names. \n\nOne thing to notice is that MI and KKR have never played against each other in any qualifiers or finals as both of them have played only 2 matches every year, those being the group stage matches.","571aa9dc":"### Favorite Grounds","1c0f40d4":"## Teams with maximum Boundaries (INTERACTIVE)","c2621577":"There was a decline in total runs from 2008 to 2009.But there after there was a substantial increase in runs in every season until 2013, but from next season there was a slump in the total runs. But the number of matches are not equal in all seasons. We should check the average runs per match in each season","6eb04109":"Now we will be checking the number of times a Team has won against other teams. This will give us an idea as which team has an upper hand over the others when they play head-to-head.","be18b381":"## How to win Finals??\n\nFirst let us see which teams have played and won the maximum finals","2526c123":"It seems to be clear that team batting first and scoring 200+ runs, has a very high probablity of winning the match.","f354ff3d":"I have created a function that compares 2 batsman based on their respective stats like runs or strike rate etc. First lets create a dataframe from where we will be taking all that values for comparison.","e12491ef":"Lasith Malinga leads the chart, thanks to his unpredictable bowling action. Other bowlers have a very small wicket margin between them. ","c9c7334f":"### Highest Wicket Taker","14561c52":"## Batsman Comparator","17d69233":"### Runs Across the Seasons","6e336ed4":"Virat Kohli has highest total runs across all seasons. Raina is just few runs behind with the second spot","1a00dadb":"### Toss Decisions across Seasons","fa6d0741":"### Top 20 Bowlers (INTERACTIVE)","8478053e":"### Top 10 Batsman ","56458634":"### Average runs per match in each Season","41e61e23":"Now using this dataframe, we can compare stats like the strike rate, or the number of 6's for 4's etc. We will be passing the names of 2 batsmen and two comparing measures for the comparision.","c1771b11":"Mumbai Indians seem to be very lucky having the higest win in tosses follwed by Kolkata Knight Riders. Pune Supergiants have the lowest wins as they have played the lowest matches also. This does not show the higher chances of winning the toss as the number of matches played by each team is uneven.","d18909aa":"### Top Batsman's with 1's, 2's, 3's, 4's ","28a85401":"### Do Toss Winners Win Finals??","5a2a14c9":"Maximum runs are being scored in the last 5 overs of the match. MI and RCB have shown a incresing trend in the runs scored throughout the match. ","36f83cf2":"The average score for a batsman is around 19-20. Also the number of single digit score is quite high and the number of centuries is low.","4c76ea55":"I will keep updating the notebook as and when I get a new question to be analysed.\n\n**Thank You For Having A Look At This Notebook**\n\n**Please Upvote if this was Helpful**","0a6f3bb1":"### Frequency of Scores ","0aa2d7b2":"# Lets Play Cricket  - IPL Exploration Analysis","f828f668":"### How do the top batsmen score? (INTERACTIVE)","4e39fa4a":"## Top Batsmen","d5aeb687":"### Runs Per Over By Teams Across Seasons","76c5ac24":"### Favorite Umpires","dc24972f":"## Some Cleaning And Transformation","6c2f2cce":"Thus the toss winner is not necessarily the match winner. The match winning probablity for toss winnong team is about 50%-50%","19696b24":"##  Matches played across each season","ca411561":"David Warner's form looks to be improving season by season. There has been a sharp decline in Kohli's Runs in the last season.","56ac97c0":"### Highest Dismissals for a Batsman by a Bowler","3b9ab7b3":"Kolkata Knight Riders(KKR) defeated Gujrat Lions(GL) with the highest wins by wickets","c3cade76":"Wooh!! CSK has played 6 IPL finals(but could win only 2 :( ) followed by RCB with 3. CSK,MI,KKR have all won 2 titles each. Sadly RCB have never won a final even with 3 apperances.\n\nLooking at the graph we can say that next year too CSK has a high chance of featuring in the finals as it has featured in 6 out of their 8 seasons played. ","81e92e32":"Looks like after **Winning The Toss** team should opt for **Batting** as we can see that batting has proved to be match winning decision for 4\/5 times out of 9 finals."}}