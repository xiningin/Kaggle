{"cell_type":{"5bc06f35":"code","e49f54dd":"code","2376c7c1":"code","ecb97119":"code","79dd82b4":"code","5b2ae46a":"code","010540b2":"code","5e9d1645":"code","fa637e7c":"code","16f43c5a":"code","5fa912dd":"code","addb2df9":"code","9dee2f63":"code","d108d5e6":"code","ac42f44b":"code","c1ca3e7e":"markdown","f0381061":"markdown","26505dea":"markdown","acc17744":"markdown","9372df4b":"markdown","930b5fe3":"markdown","f2eebd41":"markdown","6e40e7a2":"markdown","dc4d4e44":"markdown","4bbe7357":"markdown","8c889274":"markdown","a3d2b4a5":"markdown","c07ce3a6":"markdown","e2e2a624":"markdown","fd8cff3b":"markdown","a128d7a3":"markdown","e261426d":"markdown","5eca6d87":"markdown"},"source":{"5bc06f35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image \nimport soundfile as sf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport IPython.display as ipd\nimport librosa, librosa.display\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split #para separa\u00e7\u00e3o de dados de treinamento e teste \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e49f54dd":"discos=[]\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if 'disco' in dirname and 'wav' in os.path.join(dirname, filename):\n            discos.append(os.path.join(dirname, filename))\nelektronomia='\/kaggle\/input\/vision-elektronomia\/Elektronomia - vision (Free Download) - from YouTube (2) (online-audio-converter.com).wav'","2376c7c1":"#lendo a m\u00fasica\n#discos[9]: analisar essa musica depois\nsound, sr = librosa.load(elektronomia)\nplt.plot(sound)\nplt.show()\nipd.Audio(sound,rate=sr)","ecb97119":"x=sound[0:10*sr]\nipd.Audio(x, rate=sr)","79dd82b4":"#essa parte eu copiei de um site: https:\/\/musicinformationretrieval.com\/chroma.html\n\nfmin = librosa.midi_to_hz(36)#pega a frequencia em hz de notas MIDI\nhop_length = 512\nC = librosa.cqt(x, sr=sr, fmin=fmin, n_bins=72, hop_length=hop_length)\n\nlogC = librosa.amplitude_to_db(np.abs(C))\nplt.figure(figsize=(15, 5))\nlibrosa.display.specshow(logC, sr=sr, x_axis='time', y_axis='cqt_note', fmin=fmin, cmap='coolwarm')","5b2ae46a":"print('tamanho da matriz =',C.shape)","010540b2":"chromagram = librosa.feature.chroma_stft(x, sr=sr, hop_length=hop_length)\nprint('tamanho da matriz =',chromagram.shape)","5e9d1645":"plt.figure(figsize=(15, 5))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')","fa637e7c":"chromagram = librosa.feature.chroma_cqt(x, sr=sr, hop_length=hop_length)\nplt.figure(figsize=(15, 5))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')","16f43c5a":"chromagram = librosa.feature.chroma_cens(x, sr=sr, hop_length=hop_length)\nplt.figure(figsize=(15, 5))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')","5fa912dd":"#vou tentar s\u00f3 com rms\n\n#vamo dividir a musica em segundos e salvar numa lista cada segundo\n\nsegundos_musica=[]\n\nfor segundo in range(0,int(len(sound)\/sr)): #o tamanho de sound dividido pelo samplerate da a quantidade de segundos da musica\n    segundo_musica=sound[(segundo-1)*sr:segundo*sr]\n    segundos_musica.append(segundo_musica)\nsegundos_musica.pop(0)#tirar o segundo 0 que \u00e9 vazio\n\n#ouvir o segundo 0\nipd.Audio(segundos_musica[0], rate=sr)\n\n","addb2df9":"#agora vamos calcular o rms medio de cada segundo e salvar numa lista e depois plotar esses rms's\n\nrms_de_cada_segundo=[]\nfor segundo_musica in segundos_musica:\n    rms_medio_do_segundo=librosa.feature.rms(segundo_musica).mean()\n    rms_de_cada_segundo.append(rms_medio_do_segundo)\nplt.plot(rms_de_cada_segundo)\nplt.xlabel('segundo')\nplt.ylabel('RMS')\nplt.show()\n","9dee2f63":"rms_medio=np.array(rms_de_cada_segundo).mean()\nprint(rms_medio)","d108d5e6":"#aqui faremos o drop e p\ndrop=np.zeros(0)\nfor posicao in range(len(rms_de_cada_segundo)):\n    if rms_de_cada_segundo[posicao]>=rms_medio:\n        drop=np.hstack([drop,segundos_musica[posicao]])  \nplt.plot(drop)\nplt.show()","ac42f44b":"ipd.Audio(drop,rate=sr)","c1ca3e7e":"vamos ouvir ele pra ver oq conseguimos pegar","f0381061":"# Chroma_cens\n\nComputes the chroma variant \u201cChroma Energy Normalized\u201d (CENS)","26505dea":"\u00e9 um matriz de 12 linhas (em que cada linha \u00e9 um vetor) que indica a quantidade energia de cada nota musical (C, C#, D, D#, E, ..., B)  presente no sinal. A fun\u00e7\u00e3o chroma_stft pega o chromagrama propriamente dito ","acc17744":"# Chroma_cqt\n\nConstant-Q chromagram","9372df4b":"agora algumas informa\u00e7\u00f5es de chroma e cqt que retirei de um site:\n https:\/\/musicinformationretrieval.com\/chroma.html","930b5fe3":"vamos ver o que o chromagrama pega numa m\u00fasica","f2eebd41":"A tranformada de constante Q (n\u00e3o sei se \u00e9 essa a tradu\u00e7\u00e3o) utiliza eixos de frequ\u00eancia em escala logar\u00edtmica.\n\nJudith C. Brown, \"Calculation of a constant Q spectral transform,\" J. Acoust. Soc. Am., 89(1):425\u2013434, 1991.\n\nhttp:\/\/academics.wellesley.edu\/Physics\/brown\/pubs\/cq1stPaper.pdf","6e40e7a2":"# **VAMOS IDENTIFICAR O DROP EM UMA M\u00daSICA ELETRONICA**","dc4d4e44":"A ideia \u00e9 usar o rms para verificar a parte alta da musica. Para isso vamos dividir a musica em segundos e salvar o rms de cada segundo em uma lista e depois printar.","4bbe7357":"da pra ver claramente que tem dois drops na musica ou 3, talvez.","8c889274":"# CHROMA","a3d2b4a5":"\u00e9 tipo um chromagrama s\u00f3 que aplicando escala log","c07ce3a6":"![image.png](attachment:image.png)","e2e2a624":"ele usa estat\u00edstica para suavizar desvios locais no audio em acordes arpejados por exemplo. (n\u00e3o entendi nada, pq sei 0 coisas de musica). Como ele suaviza a m\u00fasica, ele \u00e9 utilizado para determinar correspond\u00eancias e similaridades de audios. Veja ele aplicado na m\u00fasica que estamos analisando","fd8cff3b":"# **NOTAS MIDI**\n\nprimeiro uma curiosidade. Notas musicais podem ser representadas como n\u00fameros segundo a escala MIDI\n\n> ![image.png](attachment:image.png)","a128d7a3":"**O ESTUDO DO CHROMA VAI SER FEITO NOS PRIMEIROS 10 SEGUNDOS DE MUSICA**","e261426d":"# CONSTANT-Q TRANSFORM","5eca6d87":"printando o rms m\u00e9dio total a gente ve q os drops est\u00e3o bem acima do rms. Ent\u00e3o a ideia \u00e9 concatenar os segundos que tem rms maior que media em um numpy array chamado drop. Vamos ver o que acontece."}}