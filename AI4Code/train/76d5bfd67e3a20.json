{"cell_type":{"81f59cab":"code","6418932f":"code","ea0ee698":"code","c89153cf":"code","b98da381":"code","351d6c4a":"code","ac1c72c1":"code","08626891":"code","c87de675":"code","107c8eb7":"code","02c7d84d":"code","b1bdb16d":"code","b1c54402":"code","cb3bcd3c":"markdown"},"source":{"81f59cab":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport tensorflow as tf\nfrom tensorflow import keras","6418932f":"train_data = pd.read_csv('..\/input\/bitamin-deep-learning-contest\/train_df.csv')\ntest_data = pd.read_csv('..\/input\/bitamin-deep-learning-contest\/test_df.csv')\nsample_submission = pd.read_csv(\"..\/input\/bitamin-deep-learning-contest\/sample_submission.csv\")","ea0ee698":"# \uc5b4\ub5a4 \uc790\ub8cc\uc778\uc9c0 \ubcf4\uc790\ntrain_data.head()","c89153cf":"X_train = train_data.drop('label',axis = 1).values\ny_train = train_data['label'].values\n\nX_test = test_data.iloc[:,1:].values","b98da381":"X_train.shape, y_train.shape, X_test.shape","351d6c4a":"index = 0\nimage = X_train[index].reshape(28,28)\nplt.imshow(image, 'gray')\nplt.title('label : {}'.format(y_train[index]))\nplt.show()","ac1c72c1":"image_size = X_train.shape[1]\nprint ('image_size => {0}'.format(image_size))\n\n# in this case all images are square\nimage_width = image_height = np.ceil(np.sqrt(image_size)).astype(np.uint8)\n\nprint ('image_width => {0}\\nimage_height => {1}'.format(image_width,image_height))","08626891":"# scaling\n\nX_train = X_train.astype(np.float)\nX_test = X_test.astype(np.float)\nX_train \/= 255\nX_test \/= 255\n\nprint('maximum value after scaling:', X_train.max(),\n      '\\nminimum value after scaling:' ,X_train.min())","c87de675":"# train test split\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)\n\nprint(X_train.shape, y_train.shape)\nprint(X_val.shape, y_val.shape)","107c8eb7":"model = keras.Sequential([\n    keras.layers.Dense(512, activation='relu'),\n    keras.layers.Dropout(0.3),\n    keras.layers.Dense(512, activation='relu'),\n    keras.layers.Dropout(0.2), \n    # dropout \ub300\uc2e0 keras.layers.BatchNormalization() \uc774\uc6a9 \uac00\ub2a5\n    keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=5, batch_size=100)\nmodel.evaluate(X_val, y_val)","02c7d84d":"predictions = model.predict_classes(X_test)","b1bdb16d":"sample_submission['Category'] = pd.Series(predictions)\nsample_submission.head()","b1c54402":"sample_submission.to_csv(\"submission.csv\",index=False)","cb3bcd3c":"# Tensorflow Tutorial"}}