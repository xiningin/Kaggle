{"cell_type":{"a01aba13":"code","1642fef7":"code","36d4f731":"code","77153ac9":"code","8d5cacb7":"code","b13d261b":"code","c6f2a114":"code","e4aac47b":"code","031f8f77":"code","3b95625b":"code","df3d017a":"code","1e78b044":"code","7387eb7a":"code","d9837c4e":"code","bce78bf6":"code","003cccae":"code","c479c241":"code","7d0f9431":"code","3128fc3c":"code","183b9d3a":"code","8e6c9b0e":"code","0e699f58":"code","129ead92":"code","950c626a":"code","c585ac35":"code","8e9d6ef4":"code","28bbc2eb":"code","f2ea42d3":"code","ebe01ba0":"code","7bb01852":"code","ab30a772":"code","d09ea5bd":"code","19dac38c":"code","86875f37":"markdown","ca29d5c4":"markdown","7acf3f6c":"markdown","9e10a519":"markdown","ae283ac9":"markdown","cbac93d6":"markdown","170a81b6":"markdown","2527a4f0":"markdown","c0691737":"markdown"},"source":{"a01aba13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1642fef7":"data = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\ndata.head()","36d4f731":"data.describe()","77153ac9":"data.info()","8d5cacb7":"import seaborn as sns\n\n#Age\nsns.distplot(data['Age'])","b13d261b":"#RestingBP\nsns.distplot(data['RestingBP'])","c6f2a114":"q = np.quantile(data['RestingBP'],0.01)\ndata_1 = data[data.RestingBP > q]\nsns.distplot(data_1.RestingBP)","e4aac47b":"#Cholesterol\nsns.distplot(data_1['Cholesterol'])","031f8f77":"q = np.quantile(data['Cholesterol'],0.99)\ndata_2 = data_1[data_1.Cholesterol < q]\nsns.distplot(data_2['Cholesterol'])","3b95625b":"data_2['Cholesterol'].value_counts().sort_index()","df3d017a":"#MaxHR\nsns.distplot(data_2['MaxHR'])","1e78b044":"#Old Peak [Depression]\nsns.distplot(data_2.Oldpeak)","7387eb7a":"data_2.Oldpeak.describe()","d9837c4e":"data_2.dtypes[data_2.dtypes == object]","bce78bf6":"#Sex\ndata_2['Sex'].value_counts()","003cccae":"import matplotlib.pyplot as plt\n#Sex\nplt.pie(\n    data_2['Sex'].value_counts(),\n    labels = data_2['Sex'].value_counts().index,\n    autopct = '%1.1f%%',\n    shadow=True\n)","c479c241":"data_2['Sex'] = data_2['Sex'].map({'M':1, 'F':0})\ndata_2['Sex']","7d0f9431":"#Chest Pain Type\nsns.histplot(data_2['ChestPainType'])\nplt.title('Chest Pain Type', fontsize=15)","3128fc3c":"plt.pie(\n    data_2.RestingECG.value_counts(),\n    labels = data_2.RestingECG.value_counts().index,\n    autopct = '%1.1f%%'\n)","183b9d3a":"sns.histplot(data_2.ExerciseAngina)","8e6c9b0e":"data_2['ExerciseAngina'] = data_2.ExerciseAngina.map({'N':0, 'Y':1})","0e699f58":"sns.histplot(data_2.ST_Slope)","129ead92":"data_2.ST_Slope = data_2.ST_Slope.map({'Down':0, 'Flat':1, 'Up':2})","950c626a":"heart_fail = data_2.drop_duplicates().reset_index().drop('index', axis=1)\nheart_fail.head()","c585ac35":"heart_fail = pd.get_dummies(heart_fail)","8e9d6ef4":"heart_fail.columns","28bbc2eb":"columns_ordered = ['Age', 'Sex', 'ChestPainType_ASY', 'ChestPainType_ATA', 'ChestPainType_NAP',\n       'ChestPainType_TA', 'RestingBP', 'Cholesterol', 'FastingBS', 'RestingECG_LVH', \n       'RestingECG_Normal', 'RestingECG_ST', 'MaxHR','ExerciseAngina', 'Oldpeak', 'ST_Slope', \n       'HeartDisease'\n        ]\n\nheart_fail = heart_fail[columns_ordered]","f2ea42d3":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\n\n#Define Features and Output\nX = heart_fail.drop('HeartDisease', axis=1)\ny = heart_fail[['HeartDisease']]\n\n#Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n#Create object and fit the model (use best learning rate)\nmodel = XGBClassifier(n_estimator = 1000, learning_rate=0.05)\nmodel.fit(X_train, y_train)","ebe01ba0":"#Simulation\nrate = [0.001, 0.005, 0.01, 0.05, 0.1, 0.25, 0.3, 0.5, 0.75, 1]\n\n#Find Best Learning Rate\ndef best_learning_rate(rate):\n    accuracy = []\n    for num in rate:\n        model_temp = XGBClassifier(n_estimator = 1000, learning_rate=num)\n        model_temp.fit(X_train, y_train)\n        \n        y_pred = model_temp.predict(X_test)\n        accuracy.append(accuracy_score(y_test, y_pred))\n    \n    return accuracy\n    max_acc = max(accuracy)\n    max_index = accuracy.index(max_acc)\n    return rate[max_index]\n\n#Result\nbest_learning_rate(rate)","7bb01852":"y_pred = model.predict(X_test)\ny_pred","ab30a772":"print('Accuracy: {:.0%}.'.format(accuracy_score(y_test, y_pred)))","d09ea5bd":"print(classification_report(y_test, y_pred))","19dac38c":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot=True)","86875f37":"### Build a Model","ca29d5c4":"### Attribute Information\n1. Age: age of the patient [years]\n2. Sex: sex of the patient \n[M: Male, F: Female]\n3. ChestPainType: chest pain type \n[TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n4. RestingBP: resting blood pressure [mm Hg]\n5. Cholesterol: serum cholesterol [mm\/dl]\n6. FastingBS: fasting blood sugar \n[1: if FastingBS > 120 mg\/dl, 0: otherwise]\n7. RestingECG: resting electrocardiogram results \n[Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n8. MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n9. ExerciseAngina: exercise-induced angina \n[Y: Yes, N: No]\n10. Oldpeak: oldpeak = ST [Numeric value measured in depression]\n11. ST_Slope: the slope of the peak exercise ST segment \n[Up: upsloping, Flat: flat, Down: downsloping]\n12. HeartDisease: output class [1: heart disease, 0: Normal]","7acf3f6c":"There is no missing values in this dataset","9e10a519":"### Distribution of each Column + Clean Data","ae283ac9":"### Numeric Value","cbac93d6":"### Categorical Value","170a81b6":"### Rearrange columns a little bit","2527a4f0":"### Drop Duplicates","c0691737":"Cholesterol value of 0 has highest density and also be a lowest value of this column"}}