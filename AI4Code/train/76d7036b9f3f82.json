{"cell_type":{"48fd4a8b":"code","80628928":"code","19481bf3":"code","4c25fd2e":"code","f8008b68":"code","a850b790":"code","818d30aa":"code","ef4a661c":"code","5c0f8cc1":"code","cea3d2c5":"code","3cfd259a":"code","b4fcef78":"code","8fcb018e":"code","bfcdd51f":"code","351507d5":"code","3c146771":"code","65aee28e":"code","20706a1a":"code","d08dab28":"code","1f6897d2":"code","4f2b001d":"code","a940cada":"code","b6ffc7aa":"code","524fca4d":"code","098ac03d":"code","c27e9941":"code","867feaee":"code","148e5224":"code","8e191a58":"code","da1c986a":"code","7024944c":"code","8a662df9":"code","83cc06a9":"code","3c590720":"code","0ecc7714":"code","53d4e991":"code","02eba888":"code","0ede57b4":"code","3b5ea1b2":"code","c684b60a":"code","015b530b":"code","dcdc0e84":"code","b95f9873":"code","4867abfd":"code","4114d7d1":"code","35246ef3":"code","71c8215a":"code","8fe9e7fe":"code","f39643b9":"code","2a99ab2c":"code","f3f708da":"code","ba1771aa":"code","5cfe8dac":"code","caf17432":"code","b7acb433":"code","dd36f185":"code","524f0e59":"code","ba727d33":"code","d33e72e6":"code","31726e40":"code","59e7a99e":"code","fba1f0b5":"code","aa5bcc09":"code","c43309ac":"code","8694a6e4":"code","716b8ff7":"code","43ea4227":"code","d3026562":"code","4a97238f":"code","86f990ee":"code","7be4aa5e":"code","8f4ebce0":"code","601a46ec":"code","8e7cce51":"code","1a5f3d9b":"code","581c1d79":"code","fdaf803b":"code","73b0cd14":"code","441391a9":"code","11535752":"code","55e886d0":"code","9b8e12ba":"code","072496ba":"code","43fc3c32":"code","6846cd07":"code","83c7a472":"code","b005404c":"code","267624e7":"code","f1a3102b":"code","068d7f33":"code","cac249f1":"code","d0a4c036":"code","85973aa4":"code","d861dc97":"code","9349fd76":"code","8fb56dc8":"code","1070fa28":"code","5a6478ad":"code","69814594":"code","e512a947":"code","b5a29375":"code","b5c1c115":"code","95190c73":"code","f35d8f85":"code","4eda9812":"code","906272f4":"code","cc4c57c7":"code","c05d3173":"code","4d70b0f5":"code","9bcff2f8":"code","1cbb0e3e":"code","618ae3b2":"code","52f67da8":"code","00cc6e36":"code","d66f7f0c":"code","c87aa05a":"code","394f7f47":"code","174bdd4f":"code","4a6a56f3":"markdown","9ec79655":"markdown","eee1ff9b":"markdown","9d3484f3":"markdown","9ff52d10":"markdown","577c0c28":"markdown","72a1e851":"markdown","05728be0":"markdown","581fadf2":"markdown","50ecd4c9":"markdown","1bc07e87":"markdown","631b403c":"markdown","932a71e2":"markdown","f5b40433":"markdown","c06b39c1":"markdown","edd9a7dc":"markdown","70372438":"markdown","732a7eb5":"markdown","a8967117":"markdown","542f3276":"markdown","a404b890":"markdown","65710ef1":"markdown","3dacd9d8":"markdown","2df8e0a0":"markdown","a56790ec":"markdown","a26546fa":"markdown","ec06d509":"markdown","d422016b":"markdown","91675f15":"markdown","0482d4c2":"markdown","d6ba8c53":"markdown","dcaa0c90":"markdown","f870e5d6":"markdown","d42a339d":"markdown","096b117e":"markdown","3089c06b":"markdown","5af21ff3":"markdown"},"source":{"48fd4a8b":"import numpy as np # linear algebra\nimport math\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import Series\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","80628928":"# parsing libraries\n\nfrom bs4 import BeautifulSoup as BS\nimport requests as rs\nfrom joblib import Parallel, delayed\nfrom tqdm import tqdm\nfrom itertools import chain\nimport json\nimport time\n\n# Statistical significance\nfrom scipy.stats import ttest_ind\nimport statsmodels.api as sm\n\n# Visualization\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Feature Engineering\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures\nfrom sklearn.feature_selection import f_regression, mutual_info_regression\n\n#ml\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.model_selection import KFold\nfrom tqdm import tqdm\nimport warnings\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\n\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.preprocessing import QuantileTransformer\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import average_precision_score\n\nfrom sklearn.linear_model import LinearRegression\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.base import clone","19481bf3":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","4c25fd2e":"RANDOM_SEED = 42","f8008b68":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","a850b790":"# \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\nclass AnalyzNumCol():\n    def __init__(self, df, col):\n        self.df = df[col]\n        self.col = col\n        self.col_log = LogDf(df, col).col_log\n        self.df_log = LogDf(df, col).df_col_log()\n    \n    def show_plots(self, size = 5, log = False):\n        \n        if log:\n            data = self.df_log\n            column = self.col_log\n        else:\n            data = self.df\n            column = self.col\n        \n        f = plt.figure()\n        f.clear()\n        plt.close(f)\n\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (3*size,size))\n        \n        fig.suptitle('Histogram, QQ-plot and boxplot for {0} '.format(column))\n        ax1.hist(data.dropna(), bins = 20, histtype = 'bar', align = 'mid', rwidth = 0.8, color = 'red')\n        fig = sm.qqplot(data.dropna(), fit = True, line ='45', ax=ax2) \n        \n        \n        \n        ax3.boxplot(data.dropna(), vert = False)  # \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n     \n        plt.show\n        \n    def emission_limits(self, log = False): # \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n        if log:\n            data = self.df_log\n            column = self.col_log\n        else:\n            data = self.df\n            column = self.col\n        \n        q1 = data.quantile(q = 0.25) \n        q3 = data.quantile(q = 0.75) \n        IQR = q3 - q1\n        return q1 - 1.5*IQR, q3 + 1.5*IQR\n\n    def amount_emissions(self, log = False): \n        if log:\n            data = self.df_log\n            column = self.col_log\n        else:\n            data = self.df\n            column = self.col\n\n        minb, maxb = self.emission_limits(log)\n        return len(data[data < minb])+ len(data[data > maxb])\n\n    \n# \u043a\u043b\u0430\u0441\u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n    \nclass LogDf(): \n    def __init__(self, df, col):\n        self.df = df\n        self.col = col\n        self.col_log = col + '_log'\n        \n    def df_col_log(self):      \n        return  self.df[self.col].apply(lambda x: np.log(x + 1)) ","818d30aa":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","ef4a661c":"test = pd.read_csv('..\/input\/sf-dst-car-price-prediction\/test.csv')\ntest['price'] = np.nan\ntest.head()","5c0f8cc1":"test.info()","cea3d2c5":"categories = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', \n              'priceCurrency', 'vehicleTransmission', 'vendor', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', \n               '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f']\ncount = 1\nfor category in categories:\n    data_category = test[category].value_counts()\n    print(f'{count}. \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f {category}: \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u0430\u044f {data_category.index[0]}, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 {len(data_category)}')\n    count += 1","3cfd259a":"test.brand.value_counts().index","b4fcef78":"# \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u043f\u043e \u0441\u043b\u0443\u044e\u0449\u0438\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c 'bodyType', 'brand', 'color', \n#'fuelType', 'modelDate', 'model_name', 'numberOfDoors', 'productionDate', 'vehicleConfiguration', 'vehicleTransmission', 'price', 'name', 'engineDisplacemen', 'enginePower', 'mileage'\n\n\"\"\"\n\nmodel_all = ['BMW', 'VOLKSWAGEN', 'NISSAN', 'MERCEDES', 'TOYOTA', 'AUDI', 'MITSUBISHI', 'SKODA', \n             'VOLVO', 'HONDA', 'INFINITI', 'LEXUS']\n\nauto_list_long =[]\n\nfor brand in model_all:  # \u043c\u0430\u0440\u043a\u0430 \u0430\u0432\u0442\u043e\n    print(brand)\n    for i in range(1, 1200):     # \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441 \u0430\u0432\u0442\u043e.\u0440\u0443   \n        print(i)\n        response = rs.get(f'https:\/\/auto.ru\/moskva\/cars\/{brand}\/used\/?output_type=list&page={i}')\n        if response.status_code != 200:\n            raise BaseException(\"response code\" + str(response.status_code))\n        response.encoding = 'utf-8'\n        soup = BS(response.text, 'html.parser')\n        page = soup.find_all('div', class_='ListingItem-module__container')  \n        for k in range(len(page)):     # \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0430 \u043f\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\u043c \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n            auto_html = page[k].find_all('meta')\n            auto_list = []\n            for i in range(len(auto_html)):   # \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n                auto_list.append((str(auto_html[i])[15:]).split('\"', 1)[0])\n                \n            # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430    \n            pos_out = {4,11,12,14,15,19}\n            auto_list_short = []\n            for n in range(len(auto_list)):   # \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0437 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\n                if n not in pos_out:\n                    auto_list_short.append(auto_list[n].replace('\\xa0', ' ')) \n        \n            # \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u0433(\u043e\u043d \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)    \n            all_km = page[k].find('div', class_='ListingItem-module__kmAge')\n            xx = str(all_km)[39:].split('<', 1)[0].replace('\\xa0', ' ')\n            auto_list_short.append(str(xx))    # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u0433\n            auto_list_long.append(auto_list_short)    # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440-\u0440\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u043e\u0432\n\n\"\"\"\n","8fcb018e":"DIR_TRAIN   = '..\/\/input\/new-data-avto-12-brends\/'\ntrain = pd.read_csv(DIR_TRAIN+'new_data_avto_12_brends.csv')","bfcdd51f":"train.head()","351507d5":"train.info()","3c146771":"#\u0443\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438\u0437 \u043d\u043e\u0432\u043e\u0433\u043e train\n\ntrain = train.dropna()\ntrain = train.drop('Unnamed: 0', axis = 1)","65aee28e":"train.info()","20706a1a":"train['mileage'] = train['mileage'].apply(lambda x: x.replace(' ', '').replace('\u043a\u043c', ''))","d08dab28":"for column in ['mileage', 'modelDate', 'numberOfDoors', 'price']:\n    train[column] = train[column].astype('int64')","1f6897d2":"train.info()","4f2b001d":"train[train['bodyType'] == '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432.']['brand'].value_counts()","a940cada":"len(train['brand'].value_counts())","b6ffc7aa":"brand = list(test['brand'].value_counts().index)\nbrand_1 = brand.copy()","524fca4d":"for i in brand:\n    brand_1.remove(i)\n    for j in brand_1:\n        if ttest_ind(train[(train['brand'] == i) & (train['bodyType'] == '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432.')].price, train[(train['brand'] == j) & (train['bodyType'] == '\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432.')].price).pvalue <= 0.01:\n            print(f'\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a 5 \u0434\u0432. \u0434\u043b\u044f \u0431\u0440\u0435\u043d\u0434\u043e\u0432 {i} \u0438 {j}')","098ac03d":"display(test.sample(1), train.sample(1))","c27e9941":"display(test.name.sample(3), train.name.sample(3)) ","867feaee":"#  \u041f\u0440\u0438\u0437\u043d\u0430\u043a 'model_name'\ndisplay(test.model_name.value_counts()[:3], train.model_name.value_counts()[:3]) ","148e5224":"# \u0412\u044b\u0440\u0435\u0437\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 train \u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \ntrain['model_name'] = train['model_name'].apply(lambda x: (x.split(' ')[1]).upper())\n\n# \u0423\u043a\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\ntrain['model_name'] = train['model_name'].apply(lambda x: x.split('-')[0])\ntest['model_name'] = test['model_name'].apply(lambda x: x.split('_')[0])\n\n# \u0423\u043a\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0441\u044f \u0441 \u0446\u0438\u0444\u0440\u044b( \u044d\u0442\u043e \u043d\u0430\u0434\u043e \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0434\u043b\u044f 'BMW') \nnum_list = ['0','1','2','3','4','5','6','7','8','9']\ntrain['model_name'] = train['model_name'].apply(lambda x: x[0] if x[0] in num_list else x)\ntest['model_name'] = test['model_name'].apply(lambda x: x[0] if x[0] in num_list else x)","8e191a58":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nfor i in brand:\n    print(i)\n    print(np.sort(test[test.brand == i].model_name.unique()))\n    print(np.sort(train[train.brand == i].model_name.unique()))\n    print(100*'-')","da1c986a":"test.columns","7024944c":"# \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b\n\ncolumns = ['bodyType', 'brand', 'color', 'engineDisplacemen', 'enginePower', 'fuelType', \n           'mileage', 'modelDate', 'model_name', 'numberOfDoors', 'productionDate', \n           'vehicleConfiguration', 'vehicleTransmission', 'price']\n\ncars_train = train[columns]\n#cars_test = test[columns]","8a662df9":"cars_train.columns = ['bodyType', 'brand', 'color', 'engineDisplacement', 'enginePower', 'fuelType', \n           'mileage', 'modelDate', 'model_name', 'numberOfDoors', 'productionDate', \n           'vehicleConfiguration', 'vehicleTransmission', 'price']","83cc06a9":"columns = ['bodyType', 'brand', 'color', 'engineDisplacement', 'enginePower', 'fuelType', \n           'mileage', 'modelDate', 'model_name', 'numberOfDoors', 'productionDate', \n           'vehicleConfiguration', 'vehicleTransmission', 'price']\ncars_test = test[columns]","3c590720":"cars_train['sample'] = 1\ncars_test['sample'] = 0\nall_cars = cars_train.append(cars_test, ignore_index=True, sort=False)","0ecc7714":"all_cars.info()","53d4e991":"all_cars['engineDisplacement'].value_counts()","02eba888":"all_cars['engineDisplacement'] = all_cars['engineDisplacement'].apply(lambda x: '2.0 LTR' if x == ' LTR' else x)","0ede57b4":"all_cars['enginePower'] = all_cars['enginePower'].apply(lambda x: float(x.split(' ')[0]))\nall_cars['engineDisplacement'] = all_cars['engineDisplacement'].apply(lambda x: float(x.split(' ')[0]))","3b5ea1b2":"engineDisplacement = AnalyzNumCol(all_cars, 'engineDisplacement')\nengineDisplacement.show_plots()","c684b60a":"engineDisplacement.show_plots(log = True)","015b530b":"all_cars['engineDisplacement'] = np.log(all_cars['engineDisplacement'] + 1)","dcdc0e84":"enginePower = AnalyzNumCol(all_cars, 'enginePower')\nenginePower.show_plots()","b95f9873":"enginePower.show_plots(log = True)","4867abfd":"all_cars['enginePower'] = np.log(all_cars['enginePower'] + 1)#","4114d7d1":"mileage = AnalyzNumCol(all_cars, 'mileage')\nmileage.show_plots()","35246ef3":"mileage.show_plots(log = True)","71c8215a":"#all_cars['mileage'] = np.log(all_cars['mileage'] + 1)","8fe9e7fe":"modelDate = AnalyzNumCol(all_cars, 'modelDate')\nmodelDate.show_plots()","f39643b9":"modelDate.show_plots(log = True)","2a99ab2c":"numberOfDoors = AnalyzNumCol(all_cars, 'numberOfDoors')\nnumberOfDoors.show_plots()","f3f708da":"numberOfDoors.show_plots(log = True)","ba1771aa":"productionDate = AnalyzNumCol(all_cars, 'productionDate')\nproductionDate.show_plots()","5cfe8dac":"productionDate.show_plots(log = True)","caf17432":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncorrelation = all_cars.corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","b7acb433":"all_cars.columns","dd36f185":"columns = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', 'vehicleConfiguration', 'vehicleTransmission']\n\nfor column in columns:\n    print(column, all_cars[column].nunique(), '\\n', all_cars[column].value_counts()[:3], '\\n')","524f0e59":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 enginePower \u0438 engineDisplacement\n\npf = PolynomialFeatures(3)\n#poly_features = pf.fit_transform(all_cars[[ 'engineDisplacement', 'enginePower']])\n#poly = pd.DataFrame(poly_features).drop([0], axis = 1)\n#poly.columns = ['displacement_power_1', 'displacement_power_2', 'displacement_power_3', 'displacement_power_4',\n#               'displacement_power_5', 'displacement_power_6', 'displacement_power_7', 'displacement_power_8', 'displacement_power_9']\n\n#poly.sample(5)\n","ba727d33":"#for column in list(poly.columns):\n#    max_column = poly[column].max()    \n#    poly[column] = poly[column].apply(lambda x: round(x\/max_column, 2))\n    \n#all_cars = pd.concat([all_cars, poly], axis=1)","d33e72e6":"num_f = ['engineDisplacement', 'enginePower', 'mileage', 'modelDate', 'numberOfDoors', 'productionDate']","31726e40":"#\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438 \n\npoly_features = pf.fit_transform(all_cars[['productionDate', 'enginePower']])\npoly = pd.DataFrame(poly_features).drop([0,1,2,3,4,5,7,8,9], axis = 1)\npoly.columns = ['date_power_6']\n\nfor column in list(poly.columns):\n    max_column = poly[column].max()     \n    poly[column] = poly[column].apply(lambda x: round(x\/max_column, 2))\n    \nall_cars = pd.concat([all_cars, poly], axis=1)\nnum_f = num_f + list(poly.columns)","59e7a99e":"all_cars['model_age'] = all_cars['productionDate'] - all_cars['modelDate']\nall_cars['model_age'] = all_cars['model_age'].apply(lambda x: 0 if x < 0 else x)\nall_cars['km_for_year'] = (all_cars['mileage']\/(2021 - all_cars['productionDate'])).astype('int64')\nnum_f.append('model_age')\nnum_f.append('km_for_year')","fba1f0b5":"all_cars['allroad'] = all_cars['vehicleConfiguration'].apply(lambda x: 1 if x.split('_')[0] == 'ALLROAD' else 0)\nnum_f.append('allroad')","aa5bcc09":"#\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0440\u043e\u043c\u0435 \u0431\u0440\u0435\u043d\u0434\u0430\n\nlabel_encoder = LabelEncoder()\n\nfor column in ['bodyType', 'color', 'fuelType', 'model_name', 'vehicleConfiguration', 'vehicleTransmission']:\n    all_cars[column] = label_encoder.fit_transform(all_cars[column])","c43309ac":"num_f = ['bodyType', 'color', 'enginePower', 'fuelType', 'mileage', 'model_name', \n         'numberOfDoors', 'vehicleTransmission', 'date_power_6', 'model_age', \n         'km_for_year']","8694a6e4":"imp_num = Series(f_regression(all_cars[all_cars['sample'] == 1][num_f], all_cars[all_cars['sample'] == 1].price)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","716b8ff7":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncorrelation = all_cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","43ea4227":"all_cars.columns","d3026562":"all_cars.brand.value_counts().index","4a97238f":"data_for_model = all_cars[['brand', 'bodyType', 'color', 'enginePower', 'fuelType', 'mileage', 'model_name', \n                           'numberOfDoors', 'vehicleTransmission', 'date_power_6', 'model_age', 'km_for_year', 'price', 'sample']]","86f990ee":"#stopper = 1\/0","7be4aa5e":"\"\"\"\ntrain_BMW = data_for_model[(data_for_model['brand'] == 'BMW') & (data_for_model['sample'] == 1)].copy()\ntrain_VOLKSWAGEN = data_for_model[(data_for_model['brand'] == 'VOLKSWAGEN') & (data_for_model['sample'] == 1)].copy()\ntrain_NISSAN = data_for_model[(data_for_model['brand'] == 'NISSAN') & (data_for_model['sample'] == 1)].copy()\ntrain_MERCEDES = data_for_model[(data_for_model['brand'] == 'MERCEDES') & (data_for_model['sample'] == 1)].copy()\ntrain_AUDI = data_for_model[(data_for_model['brand'] == 'AUDI') & (data_for_model['sample'] == 1)].copy()\ntrain_MITSUBISHI = data_for_model[(data_for_model['brand'] == 'MITSUBISHI') & (data_for_model['sample'] == 1)].copy()\ntrain_SKODA = data_for_model[(data_for_model['brand'] == 'SKODA') & (data_for_model['sample'] == 1)].copy()\ntrain_VOLVO = data_for_model[(data_for_model['brand'] == 'VOLVO') & (data_for_model['sample'] == 1)].copy()\ntrain_HONDA = data_for_model[(data_for_model['brand'] == 'HONDA') & (data_for_model['sample'] == 1)].copy()\ntrain_INFINITI = data_for_model[(data_for_model['brand'] == 'INFINITI') & (data_for_model['sample'] == 1)].copy()\ntrain_LEXUS = data_for_model[(data_for_model['brand'] == 'LEXUS') & (data_for_model['sample'] == 1)].copy()\ntrain_TOYOTA = data_for_model[(data_for_model['brand'] == 'TOYOTA') & (data_for_model['sample'] == 1)].copy()\"\"\"\n","8f4ebce0":"\"\"\"def model(data):\n    X = data.drop(['brand', 'sample', 'price'], axis = 1)\n    y = data['price']\n    \n    X = pd.DataFrame(StandardScaler().fit_transform(X), columns = X.columns)\n    \n    # \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 20% \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n    \n    #\u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n    warnings.simplefilter('ignore')\n    \n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    resalt = mape(y_test, y_pred)\n    \n    return model, resalt\n\ndef pretreatment(data):\n    X = data.drop(['brand', 'sample', 'price'], axis = 1)\n    X = pd.DataFrame(StandardScaler().fit_transform(X), columns = X.columns)\n    data = data.drop(['sample', 'price', 'brand'], axis = 1)\n    X.index = data.index\n    \n    for column in data.columns:\n        if column in X.columns:\n            data[column] = X[column]\n        else:\n            data[column] = data[column]\n            \n    return data\n    \"\"\"","601a46ec":"\"\"\"model_BNW,mape_BMW  = model(train_BMW)\nmodel_VOLKSWAGEN,mape_VOLKSWAGEN  = model(train_VOLKSWAGEN)\nmodel_NISSAN,mape_NISSAN  = model(train_NISSAN)\nmodel_MERCEDES,mape_MERCEDES  = model(train_MERCEDES)\nmodel_AUDI,mape_AUDI  = model(train_AUDI)\nmodel_MITSUBISHI,mape_MITSUBISHI  = model(train_MITSUBISHI)\nmodel_SKODA,mape_SKODA  = model(train_SKODA)\nmodel_VOLVO,mape_VOLVO  = model(train_VOLVO)\nmodel_HONDA,mape_HONDA  = model(train_HONDA)\nmodel_INFINITI,mape_INFINITI  = model(train_INFINITI)\nmodel_LEXUS,mape_LEXUS  = model(train_LEXUS)\nmodel_TOYOTA,mape_TOYOTA  = model(train_TOYOTA)\n\ndict_model = {'BMW': model_BNW, 'VOLKSWAGEN': model_VOLKSWAGEN, 'NISSAN': model_NISSAN,\n             'MERCEDES': model_MERCEDES, 'AUDI': model_AUDI, 'MITSUBISHI': model_MITSUBISHI,\n             'SKODA': model_SKODA, 'VOLVO': model_VOLVO, 'HONDA': model_HONDA,\n             'INFINITI': model_INFINITI, 'LEXUS': model_LEXUS, 'TOYOTA': model_TOYOTA}\n\n\nprint(f'BMW: {mape_BMW}, VW: {mape_VOLKSWAGEN}, NISSAN {mape_NISSAN}, MERCEDES: {mape_MERCEDES}, AUDI:  {mape_AUDI}, MITSUBISHI {mape_MITSUBISHI}')\nprint(f'SKODA {mape_SKODA}, VOLVO {mape_VOLVO}, HONDA: {mape_HONDA}, INFINITI: {mape_INFINITI}, LEXUS: {mape_LEXUS}, TOYOTA: {mape_TOYOTA}')\"\"\"","8e7cce51":"\"\"\"test_1 = data_for_model[data_for_model['sample'] == 0]\nlen(test_1)\"\"\"","1a5f3d9b":"\"\"\"test_BMW = test_1[test_1['brand'] == 'BMW']\ntest_VOLKSWAGEN = test_1[test_1['brand'] == 'VOLKSWAGEN']\ntest_NISSAN = test_1[test_1['brand'] == 'NISSAN']\ntest_MERCEDES = test_1[test_1['brand'] == 'MERCEDES']\ntest_AUDI = test_1[test_1['brand'] == 'AUDI']\ntest_MITSUBISHI = test_1[test_1['brand'] == 'MITSUBISHI']\ntest_SKODA = test_1[test_1['brand'] == 'SKODA']\ntest_VOLVO = test_1[test_1['brand'] == 'VOLVO']\ntest_HONDA = test_1[test_1['brand'] == 'HONDA']\ntest_INFINITI = test_1[test_1['brand'] == 'INFINITI']\ntest_LEXUS = test_1[test_1['brand'] == 'LEXUS']\ntest_TOYOTA = test_1[test_1['brand'] == 'TOYOTA']\"\"\"","581c1d79":"\"\"\"test_BMW = pretreatment(test_BMW)\ntest_VOLKSWAGEN = pretreatment(test_VOLKSWAGEN)\ntest_NISSAN = pretreatment(test_NISSAN)\ntest_MERCEDES = pretreatment(test_MERCEDES)\ntest_AUDI = pretreatment(test_AUDI)\ntest_MITSUBISHI = pretreatment(test_MITSUBISHI)\ntest_SKODA = pretreatment(test_SKODA)\ntest_VOLVO = pretreatment(test_VOLVO)\ntest_HONDA = pretreatment(test_HONDA)\ntest_INFINITI = pretreatment(test_INFINITI)\ntest_LEXUS = pretreatment(test_LEXUS)\ntest_TOYOTA = pretreatment(test_TOYOTA)\"\"\"\n","fdaf803b":"\"\"\"y_pred_BMW = model_BNW.predict(test_BMW)\ntest_BMW['y_pred'] = abs(y_pred_BMW)\ntest_VOLKSWAGEN['y_pred'] = abs(dict_model['VOLKSWAGEN'].predict(test_VOLKSWAGEN))\ntest_NISSAN['y_pred'] = abs(dict_model['NISSAN'].predict(test_NISSAN))\ntest_MERCEDES['y_pred'] = abs(dict_model['MERCEDES'].predict(test_MERCEDES))\ntest_AUDI['y_pred'] = abs(dict_model['AUDI'].predict(test_AUDI))\ntest_MITSUBISHI['y_pred'] = abs(dict_model['MITSUBISHI'].predict(test_MITSUBISHI))\ntest_SKODA['y_pred'] = abs(dict_model['SKODA'].predict(test_SKODA))\ntest_VOLVO['y_pred'] = abs(dict_model['VOLVO'].predict(test_VOLVO))\ntest_HONDA['y_pred'] = abs(dict_model['HONDA'].predict(test_HONDA))\ntest_INFINITI['y_pred'] = abs(dict_model['INFINITI'].predict(test_INFINITI))\ntest_LEXUS['y_pred'] = abs(dict_model['LEXUS'].predict(test_LEXUS))\ntest_TOYOTA['y_pred'] = abs(dict_model['TOYOTA'].predict(test_TOYOTA))\"\"\"","73b0cd14":"\"\"\"test_for_predict = pd.concat([test_BMW, test_VOLKSWAGEN, test_NISSAN, test_MERCEDES, test_AUDI, test_MITSUBISHI,\n                             test_SKODA, test_VOLVO, test_HONDA, test_INFINITI, test_LEXUS, test_TOYOTA], axis = 0)\"\"\"","441391a9":"\"\"\"test_for_predict = test_for_predict.sort_index()\"\"\"\n","11535752":"\"\"\"test_for_predict['y_pred'] = round(test_for_predict['y_pred'], 0)\"\"\"","55e886d0":"#sample_submission = pd.DataFrame()\n#sample_submission['sell_id'] = test['sell_id']\n#test_for_predict.index = sample_submission.index\n#sample_submission['price'] = test_for_predict['y_pred']\n#sample_submission.to_csv('submission.csv', index=False)\n#sample_submission.head()","9b8e12ba":"all_cars['brand'] = label_encoder.fit_transform(all_cars['brand'])\n\ndata_for_model = all_cars.copy()\n\ny = data_for_model[data_for_model['sample'] == 1]['price']\nX = data_for_model[data_for_model['sample'] == 1].drop(['price', 'sample'], axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","072496ba":"test_for_pred = data_for_model[data_for_model['sample'] == 0]\n\ntest_for_pred = test_for_pred.drop(['price', 'sample'], axis = 1)","43fc3c32":"\"\"\"model = RandomForestRegressor(random_state=RANDOM_SEED)\n\nmodel.fit(X_train, y_train)\ntest_predict = model.predict(X_test)\n\nmape(y_test, test_predict)\"\"\"","6846cd07":"\"\"\"y_pred = model.predict(test_for_pred)\"\"\"","83c7a472":"\"\"\"sample_submission = pd.DataFrame()\nsample_submission['sell_id'] = test['sell_id']\n#test_for_predict.index = sample_submission.index\nsample_submission['price'] = y_pred\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head()\"\"\"","b005404c":"\"\"\"n_estimators = [int(x) for x in np.linspace(200, 2000, 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\"\"\"","267624e7":"\"\"\"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\"\"\"","f1a3102b":"\"\"\"model = RandomForestRegressor(random_state=RANDOM_SEED, \n                              n_estimators=300, \n                              min_samples_split=2, \n                              min_samples_leaf=1, \n                              max_features='sqrt', \n                              max_depth=None, \n                              bootstrap=False)\n\nmodel.fit(X_train, y_train)\ntest_predict = model.predict(X_test)\n\nmape(y_test, test_predict)\"\"\"","068d7f33":"\"\"\"y_pred = model.predict(test_for_pred)\"\"\"","cac249f1":"\"\"\"sample_submission = pd.DataFrame()\nsample_submission['sell_id'] = test['sell_id']\n#test_for_predict.index = sample_submission.index\nsample_submission['price'] = y_pred\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head()\"\"\"","d0a4c036":"\"\"\"model_forest = RandomizedSearchCV(estimator = model, param_distributions = random_grid, \n                               n_iter = 3, cv = 3, verbose=2, random_state=RANDOM_SEED, n_jobs = -1)\nmodel_forest.fit(X_train, y_train)\n\n\nmodel_forest.best_params_\"\"\"","85973aa4":"data_for_model = all_cars.copy()\n\ny = data_for_model[data_for_model['sample'] == 1]['price']\nX = data_for_model[data_for_model['sample'] == 1].drop(['price', 'sample'], axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","d861dc97":"\"\"\"# !\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0440\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 20%!\ny_train = y_train.apply(lambda x: math.log(x))\ny_test = y_test.apply(lambda x: math.log(x))\nX = train.values\ny = y.apply(lambda x: math.log(x)).values\"\"\"\n","9349fd76":"\"\"\"\nITERATIONS = 100\nmodel = CatBoostRegressor(loss_function = 'RMSE',\n                          iterations = ITERATIONS,\n                          depth = 8,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE'\n                         )\nmodel.fit(X_train, y_train,\n          eval_set=(X_test, y_test),\n          verbose_eval=500,\n          use_best_model=True,\n          plot=True)\"\"\"","8fb56dc8":"\"\"\"y_pred = model.predict(X_test)\nmape(y_test, y_pred)\"\"\"","1070fa28":"\"\"\"data_for_model = all_cars.copy()\n\ny = data_for_model[data_for_model['sample'] == 1]['price']\nX = data_for_model[data_for_model['sample'] == 1].drop(['price', 'sample'], axis = 1)\n\ny = y.apply(lambda x: math.log(x))\"\"\"","5a6478ad":"\"\"\"def CV_cat_model(y_train, X_train, X_test, y_test):\n    model = CatBoostRegressor(loss_function = 'RMSE',\n                              iterations = 5000,\n                              depth = 8,\n                              random_seed = RANDOM_SEED,\n                              eval_metric='MAPE'\n                             )\n    model.fit(X_train, y_train,\n              eval_set=(X_test, y_test),\n              verbose_eval=500,\n              use_best_model=True,\n              plot=False)\n    \n    return(model)\"\"\"","69814594":"\"\"\"N_FOLDS = 5\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    Xf_train, yf_train, Xf_test, yf_test = X.loc[train_idx], y.loc[train_idx], X.loc[test_idx], y.loc[test_idx]\n    \n    model = CV_cat_model(yf_train, Xf_train, Xf_test, yf_test)\n    \n    # score model on test\n    test_predict = model.predict(Xf_test)\n    test_score = mape(yf_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.4f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(test_for_pred)\n    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls)*100:0.4f}%')\nprint(f'Std Score: {np.std(score_ls)*100:0.4f}%')\nprint(f'Max Score: {np.max(score_ls)*100:0.4f}%')\nprint(f'Min Score: {np.min(score_ls)*100:0.4f}%')\"\"\"\n\n","e512a947":"\"\"\"submissions['mix'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = np.round(submissions['mix'].apply(lambda x: math.exp(x)).values, 0)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)\"\"\"","b5a29375":"\"\"\"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430\ntree = DecisionTreeRegressor(max_features=int(X_train.shape[1]\/3), max_depth=77)\ntree.fit(X_train, y_train)\ntest_predict = tree.predict(X_test)\nmape(y_test, test_predict)\"\"\"","b5c1c115":"\"\"\"bagging_trees = BaggingRegressor(tree)\nbagging_trees.fit(X_train, y_train)\ntest_predict = bagging_trees.predict(X_test)\nmape(y_test, test_predict)\"\"\"","95190c73":"\"\"\"gb = GradientBoostingRegressor(max_depth=7,n_estimators=1500,learning_rate=0.1,random_state=42)#\ngb.fit(X_train, y_train)\ntest_predict = gb.predict(X_test)\nmape(y_test, test_predict)\"\"\"","f35d8f85":"\"\"\"y_pred = gb.predict(test_for_pred)\"\"\"","4eda9812":"\"\"\"sample_submission = pd.DataFrame()\nsample_submission['sell_id'] = test['sell_id']\n#test_for_predict.index = sample_submission.index\nsample_submission['price'] = y_pred\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head()\"\"\"","906272f4":"data_for_model = all_cars.copy()\n\ny = data_for_model[data_for_model['sample'] == 1]['price']\nX = data_for_model[data_for_model['sample'] == 1].drop(['price', 'sample'], axis = 1)\n\nX = pd.DataFrame(StandardScaler().fit_transform(X), columns = X.columns)\n\ny = y.apply(lambda x: math.log(x))\n\nX = X.values\ny = y.values\n\n","cc4c57c7":"X_pred = test_for_pred\n\nX_pred.index = test.index\n\nX_pred = pd.DataFrame(StandardScaler().fit_transform(X_pred), columns = X_pred.columns)\n\nX_pred = X_pred.values","c05d3173":"cv = KFold(n_splits=5, shuffle=True)","4d70b0f5":"def compute_meta_feature(clf, X_train, X_test, y_train, cv):\n    \"\"\"\n    Computes meta-features using the regression.\n    \n   \n    \"\"\"\n    X_meta_train = np.zeros_like(y_train, dtype=np.float32)\n    for train_fold_index, predict_fold_index in cv.split(X_train):\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_clf = clone(clf)\n        folded_clf.fit(X_fold_train, y_fold_train)\n        X_meta_train[predict_fold_index] = folded_clf.predict(X_fold_predict)\n    \n    meta_clf = clone(clf)\n    meta_clf.fit(X_train, y_train)\n    \n    X_meta_test = meta_clf.predict(X_test)\n    \n    return X_meta_train, X_meta_test","9bcff2f8":"def generate_metafeatures(classifiers, X_train, X_test, y_train, cv):\n    \"\"\"\n    Generates metafeatures using a list of regression.\n    \n   \n    \"\"\"\n    features = [\n        compute_meta_feature(clf, X_train, X_test, y_train, cv)\n        for clf in tqdm(classifiers)\n    ]\n    \n    stacked_features_train = np.vstack([\n        features_train for features_train, features_test in features\n    ]).T\n\n    stacked_features_test = np.vstack([\n        features_test for features_train, features_test in features\n    ]).T\n    \n    return stacked_features_train, stacked_features_test","1cbb0e3e":"stacked_features_train, stacked_features_test = generate_metafeatures([\n    RandomForestRegressor(n_estimators=300, min_samples_split=2, min_samples_leaf=1,\n                          max_features=7,max_depth=77, bootstrap=True, random_state=42),\n    AdaBoostRegressor(random_state=42),\n    ExtraTreesRegressor(random_state=42),\n    RandomForestRegressor(random_state=42)], X, X_pred, y, cv)","618ae3b2":"total_features_train = np.hstack([X, stacked_features_train])\ntotal_features_test = np.hstack([X_pred, stacked_features_test])","52f67da8":"X_train, X_test, y_train, y_test = train_test_split(total_features_train, y, test_size=0.2, random_state=RANDOM_SEED)","00cc6e36":"ITERATIONS = 15500\nmodel = CatBoostRegressor(loss_function = 'RMSE',\n                          iterations = ITERATIONS,\n                          depth = 8,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE'\n                         )\nmodel.fit(X_train, y_train,\n          eval_set=(X_test, y_test),\n          verbose_eval=500,\n          use_best_model=True,\n          plot=True)","d66f7f0c":"y_pred_test = model.predict(y_test)","c87aa05a":"mape(y_pred_test, y_test)","394f7f47":"y_pred = model.predict(total_features_test)","174bdd4f":"sample_submission = pd.DataFrame()\nsample_submission['sell_id'] = test['sell_id']\n#test_for_predict.index = sample_submission.index\nsample_submission['price'] = y_pred\nsample_submission['price'] = sample_submission['price'].apply(lambda x: math.exp(x))\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head()","4a6a56f3":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435. \u041b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u043c\u0443","9ec79655":"**6. Stacking**","eee1ff9b":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041e\u0446\u0435\u043d\u043a\u0430 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 18.06552","9d3484f3":"**\u0412\u044b\u0432\u043e\u0434**\n\n1. \u041e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 - 15500\n2. \u0428\u0430\u0433 - 0.027\n3. \u041e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430 \u0441\u0430\u0431\u043c\u0438\u0448\u0438\u043e\u043d\u0435 - 14.74931","9ff52d10":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0434\u0430\u0435\u0442 \u043e\u0449\u0443\u0442\u0438\u043c\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0435\u0435.","577c0c28":"**5. GradientBoosting**","72a1e851":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043e\u0446\u0435\u043d\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c 146.67","05728be0":"**5.1 \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439**","581fadf2":"# 3. EDA","50ecd4c9":"**5.4. Bagging.\u00b6**","1bc07e87":"**\u0412\u044b\u0432\u043e\u0434**\n\n1. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 enginePower \u0438 engineDisplacement \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0437\u0440\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437 \u043d\u0438\u0445 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 (\u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438).\n2. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 productionDate \u0438 modelDate \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438. \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","631b403c":"**\u0412\u044b\u0432\u043e\u0434**\n\n1. \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e, \u0442\u0430\u043a\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0430\u043a \u0422\u0430\u043c\u043e\u0436\u043d\u044f, \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, priceCurrency \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n2. \u041c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0433\u0438\u043f\u043e\u0442\u0438\u0437\u0443 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0432 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0431\u0440\u0435\u043d\u0434 \u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0431\u0440\u0435\u043d\u0434\u0430","932a71e2":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0411\u044d\u0433\u0438\u043d\u0433 \u0443\u043b\u0443\u0447\u0448\u0438\u043b \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430","f5b40433":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442.\u043a. \u044d\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","c06b39c1":"**5.1.1 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f** ","edd9a7dc":"# 0. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","70372438":"**\u0412\u044b\u0432\u043e\u0434**\n\n1. model_name \u0438 vehicleConfiguration \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432.\n2. \u041e\u0441\u0442\u0430\u0432\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c","732a7eb5":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438","a8967117":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0441 5 \u0444\u043e\u043b\u0434\u0430\u043c\u0438","542f3276":"# 4. Feature Engineering","a404b890":"**\u0412\u044b\u0432\u043e\u0434**\n\n1. \u0412 DataFram (DF) 32 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, 33 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u0430\u043a \u0446\u0435\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n2. \u0412 DF 4 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\u0432: mileage, numberOfDoors, sell_id, price\n3. \u0412 DF 3 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430: modelDate, productionDate,parsing_unixtime\n4. \u0412 DF 15 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: 'bodyType', 'brand', 'color', 'fuelType', 'model_name',         'priceCurrency', 'vehicleTransmission', 'vendor', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f'\n5. \u0412 DF 11 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a \u043e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c","65710ef1":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a model_name \u0432 train \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0438 \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b, \u043d\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","3dacd9d8":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0446\u0435\u043d\u0430\u0445 \u043c\u0435\u0436\u0434\u0443 \u0431\u0440\u0435\u043d\u0434\u0430\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 12 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u0446\u0435\u043d\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0440\u0435\u043d\u0434\u0430.","2df8e0a0":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442.\u043a. \u044d\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","a56790ec":"# 1. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 ","a26546fa":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u041e\u0446\u0435\u043d\u043a\u0430 \u043d\u0430 kaggle 19.06908\n\n","ec06d509":"\u0412\u0438\u0434\u043d\u043e 12 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 4 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 8 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 ","d422016b":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e","91675f15":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0441 \u0434\u043b\u0438\u043d\u043d\u044b\u043c \u0445\u0432\u043e\u0441\u0442\u043e\u043c. \u041b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e","0482d4c2":"**5.3 CatBoost**","d6ba8c53":"# 3.1 \u0410\u043d\u0430\u043b\u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","dcaa0c90":"# 5. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u0440\u0430\u043d\u0435\u0435 \u0431\u044b\u043b\u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043e, \u0447\u0442\u043e \u0446\u0435\u043d\u0430 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043e\u0442 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u0442\u043e \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434 12 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u0447 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u0440\u0435\u043d\u0434\u0430","f870e5d6":"5.2 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 ","d42a339d":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0415\u0441\u0442\u044c \u043d\u0435\u044f\u0432\u043d\u044b\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 1703 LTR, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0438\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f 2.0 LTR","096b117e":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044f test \u0438 train, \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'name' \u0438 'model_name' \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \n\u041f\u0440\u0438\u0437\u043d\u0430\u043a name - \u044d\u0442\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0442\u0430\u043a\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a\u0430\u043a engineDisplacement, vehicleTransmission, vehicleConfiguration (\u043f\u0440\u0438\u0437\u043d\u0430\u043a bool(Allroad)).\n","3089c06b":"# 2. \u041f\u0430\u0440\u0441\u0438\u043d\u0433\n\n\u0422.\u043a. \u0440\u0430\u043d\u0435\u0435 \u0431\u044b\u043b\u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043e 12 \u0431\u0440\u0435\u043d\u0434\u043e\u0432, \u0442\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0441 avto.ru \u044d\u0442\u0438\u0445 12 \u0431\u0440\u0435\u043d\u0434\u043e\u0432. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u0435\u043d\u0434\u043e\u0432:","5af21ff3":"**\u0412\u044b\u0432\u043e\u0434**\n\n\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0441 \u0434\u043b\u0438\u043d\u043d\u044b\u043c \u0445\u0432\u043e\u0441\u0442\u043e\u043c. \u041b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e"}}