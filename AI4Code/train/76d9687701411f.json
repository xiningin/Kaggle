{"cell_type":{"8740f5dc":"code","bb246997":"markdown"},"source":{"8740f5dc":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf = pd.read_json(\"amsterdam.json\")\ndf.info()\nimport pandas_profiling as pp\n\nfrom pandas_profiling import ProfileReport\n\nprof = ProfileReport(df)\n\nprof.to_file(output_file=\"profrep.html\")\n\ndf = df.dropna()\n\ndf.head()\n\ndf['price']=df['price'].apply(lambda x : x.replace('$',''))\ndf['price']=df['price'].apply(lambda x : x.replace(',',''))\ndf['price'] = pd.to_numeric(df['price'])\n\n#Create heatmap to visualize\n\namsterdam = {'lat' : 52.3667, 'long' : 4.8945}\n\nimport folium\n\nm=folium.Map(location =[52.3667,4.8945],zoom_start=13)\n\nfrom folium import plugins\n\n\n\nheatmap = df[['latitude', 'longitude', 'price']].round(4).groupby(['latitude', 'longitude']).sum().reset_index().values.tolist()\n\n# plot heatmap\nm.add_child(plugins.HeatMap(heatmap, radius=9, max_zoom=10))\nm\nm.save('index.html')\n\n\ndf=pd.get_dummies(df)\n\n\nX = df.drop(['price'], axis=1)\n\ny = df['price']\n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X ,y, test_size=0.3, random_state=123)\n\n#1. LINEAR REGRESSION\n\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\ny_pred = lin_reg.predict(X_test)\n\nfrom sklearn import metrics\nr2 = metrics.r2_score(y_test, y_pred)\nmae = metrics.mean_absolute_error(y_test, y_pred)\nscores = pd.DataFrame({'Baseline (regression)' : [r2, mae]}, index=['R2', 'MAE'])\nscores\n\n#2. SVM\n\nimport os\n#if 'svr_gridsearch_cv.pkl' in os.listdir():\n    \n #   svr_grid_search = joblib.load('svr_gridsearch_cv.pkl')\n    \n#else:\n\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\nsvr = SVR()\nparam_grid = [\n      {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n      {'C': [1, 10, 100, 1000], 'gamma': [0.01, 0.001, 0.0001], 'kernel': ['rbf']}]\nsvr_grid_search = GridSearchCV(svr, param_grid=param_grid, \n                                   n_jobs=-1, \n                                   scoring=['r2','neg_mean_squared_error'],\n                                  refit='neg_mean_squared_error', verbose=100)\nsvr_grid_search.fit(X_train, y_train)\n#joblib.dump(svr_grid_search.best_estimator_, 'svr_gridsearch_cv.pkl')\n\n\n\n\n#3. LighGBM Regressor\n\nfrom lightgbm import LGBMRegressor\n  \nreg = LGBMRegressor()\n\nreg.fit(X_train,y_train)\n\nfrom sklearn import metrics\nmetrics.mean_squared_error(y_test,reg.predict(X_test))\n\nimp_feat=pd.Series(reg.feature_importances_,index=X.columns.tolist())\nimp_feat.sort_values(ascending=False).plot(kind='bar', )\n\n\n\n","bb246997":"This is an attempt to apply various Gradient Boosting techniques to identify RentalPrice for airbnb stays in Amsterdam.\nLighGBM Regressor is the new introduction here"}}