{"cell_type":{"f0e37c08":"code","184e4843":"code","0ea54140":"code","39e2d184":"code","52718a8c":"code","dba76d21":"code","6067b5c2":"code","fb90816c":"markdown","3e7151a2":"markdown","543bf71d":"markdown"},"source":{"f0e37c08":"!pip install pytorch_tabnet ","184e4843":"from pytorch_tabnet.tab_model import TabNetClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import roc_auc_score\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import QuantileTransformer,  KBinsDiscretizer\nfrom sklearn.impute import SimpleImputer\n\nimport torch\n# from sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import KFold\n\n%matplotlib inline","0ea54140":"%%time\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')","39e2d184":"%%time\ntrain['claim'] = train['claim'].astype(str)\n## cleaner:\ndef get_stats_per_row(data):\n    data['n_missing'] = data.isna().sum(axis=1)\n    data['max_row'] = data.select_dtypes(include='number').max(axis=1)\n    data['min_row'] = data.select_dtypes(include='number').min(axis=1)\n    data['std_row'] = data.select_dtypes(include='number').std(axis=1)\n    data['mean_row'] = data.select_dtypes(include='number').mean(axis=1)\n    data['row_nunique'] = data.select_dtypes(include='number').nunique(axis=1)\n    data['abs_max'] = data.select_dtypes(include='number').abs().max(axis=1)\n    data['skew'] = data.select_dtypes(include='number').skew(axis=1)\n    data['median'] = data.select_dtypes(include='number').median(axis=1)\n    data['positive_counts'] = data.select_dtypes(include='number').gt(0).sum(axis=1)\n    ## https:\/\/www.kaggle.com\/bernhardklinger\/tps-lightgbm-feature-eng \n#     data['mean2'] = (data.select_dtypes(include='number')**2).mean(axis=1) ## maybe also needs select numbers? \n    return data\ntrain = get_stats_per_row(train.set_index(['claim', 'id'])).reset_index()\ntest = get_stats_per_row(test.set_index(['claim', 'id'])).reset_index()\n\nfeatures = [col for col in train.columns if col not in ['claim', 'id']]\n\n##ORIG:\n# pipe = Pipeline([\n#         ('imputer', SimpleImputer(strategy='median',missing_values=np.nan)),\n#         (\"scaler\", QuantileTransformer(n_quantiles=200, output_distribution='normal'))\n#         ])\n\n# mine:\npipe = Pipeline([\n        ('imputer', SimpleImputer(strategy='median',missing_values=np.nan,add_indicator=True)),\n        (\"scaler\", QuantileTransformer(n_quantiles=250, output_distribution='normal'))\n        ])\n\nX = pipe.fit_transform(train[features])\nX_test=pipe.transform(test[features])","52718a8c":"tabnet_params = dict(n_steps = 1,\n                   optimizer_fn=torch.optim.Adam,\n                   optimizer_params=dict(lr=1e-2, weight_decay = 5e-4),\n                   scheduler_params={\"step_size\":1, # how to use learning rate scheduler\n                                     \"gamma\":0.7},\n                   scheduler_fn=torch.optim.lr_scheduler.StepLR,\n                   mask_type='entmax',\n                   verbose = 5)","dba76d21":"kf = KFold(n_splits=5, random_state = 42, shuffle = True)\npreds = np.zeros((493474,))\nfor  fold , (train_index, test_index) in enumerate(kf.split(X)):\n    print(20*\"*\")\n    print(\"Fold {}:\".format(fold))\n    X_train, X_valid = X[train_index], X[test_index]\n    y_train, y_valid = train.claim[train_index].values, train.claim[test_index].values\n\n    clf = TabNetClassifier(**tabnet_params)\n    clf.fit(\n        X_train=X_train, y_train=y_train,\n        eval_set=[(X_train, y_train), (X_valid, y_valid)],\n        eval_name=['train', 'valid'],\n        eval_metric=['auc'],\n#         max_epochs= 10,  ##ORIG\n        max_epochs= 14,\n        patience=4,\n        batch_size=1024*10, virtual_batch_size=128*10,\n        num_workers=0,\n        weights=1,\n        drop_last=False\n    ) \n    preds += clf.predict_proba(X_test)[:,1]\/5\n    print(preds.shape)\n","6067b5c2":"sub = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsub.iloc[:,1]= preds\nsub=sub.set_index('id')\nsub.to_csv('submission.csv')\n","fb90816c":"# Training","3e7151a2":"# Import","543bf71d":"# Load data "}}