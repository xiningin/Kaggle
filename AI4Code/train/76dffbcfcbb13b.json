{"cell_type":{"eb6ede21":"code","4c1cd714":"code","a7ee53e7":"code","16237649":"code","968b7ef1":"code","57b078ac":"code","39636932":"code","11a45de7":"code","0dfe58cd":"code","c0152dbe":"code","a3b2df7e":"code","11514aa2":"code","2a40fed9":"code","44ccdcc5":"code","42049e1f":"code","661c6105":"code","4a050d43":"code","62865fa0":"code","598dc2f0":"code","d8693b21":"code","53cfba65":"code","684b1b51":"code","7043d8d0":"code","58d0da57":"code","c6a7a3e3":"code","75076d8b":"code","14458727":"code","78bb28d9":"code","72044a72":"code","f9dc49b3":"code","738a4d63":"code","7db2037f":"code","2e3ad3df":"code","92de5b21":"code","76ca2a36":"code","5489e678":"code","5f1eef2e":"code","460362d5":"code","ba1e9f16":"code","570457be":"code","e90d38e8":"code","e8ba59b5":"code","8538f3cf":"code","63804f58":"code","89a2a099":"code","04bc2ef9":"code","8d85bdaf":"markdown","940fd909":"markdown","d78fa581":"markdown","c39dd702":"markdown"},"source":{"eb6ede21":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","4c1cd714":"data0 = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ndata0[0:2].T","a7ee53e7":"data0.columns","16237649":"data0.info()","968b7ef1":"fig, ax = plt.subplots(figsize=(16,4)) \nsns.histplot(data0['Pawpularity'], label='Pawpularity', ax=ax, color='C1',bins=100) \nax.legend() \nax.grid()","57b078ac":"#set new parameter\nfor i in range(len(data0)):\n    data0.loc[i,'sum']=data0.iloc[i,1:-2].sum()\ndata0['sum']","39636932":"data1=data0.drop('Id',axis=1)\ndata1[0:2].T","11a45de7":"data1.columns","0dfe58cd":"target=['Pawpularity']\ndatay=data1[target]\ndatax=data1.drop([target[0]],axis=1)","c0152dbe":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","a3b2df7e":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","11514aa2":"df_columns = list(datax.columns)\nprint(df_columns)","2a40fed9":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)","44ccdcc5":"train_df.columns=df_columns\n#test_df.columns=df_columns","42049e1f":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","661c6105":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","4a050d43":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","62865fa0":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","598dc2f0":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","d8693b21":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","53cfba65":"y = trainy\nprint(y.shape)\nprint(y[0:3])","684b1b51":"ydf=pd.DataFrame(y)\nydf","7043d8d0":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted train '+target[i],fontsize=12)\n    ax.set_xlabel('Actual train '+target[i],fontsize=12)\n    ax.scatter(y,oof)\n","58d0da57":"print(target)","c6a7a3e3":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","75076d8b":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","14458727":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Sum vs '+target[0],fontsize=20)\nax.set_ylabel('Sum',fontsize=12)\nax.set_xlabel(target[0],fontsize=12)\nax.scatter(data0[target[0]],data0['sum'])","78bb28d9":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Near vs '+target[0],fontsize=20)\nax.set_ylabel('Near',fontsize=12)\nax.set_xlabel(target[0],fontsize=12)\nax.scatter(data0[target[0]],data0['Near'])\n","72044a72":"print(data0['Pawpularity'][data0['Near']==1].mean())\nprint(data0['Pawpularity'][data0['Near']==0].mean())\n# Importance of 'Near' is high, not big differnce in 'Pawpularity'","f9dc49b3":"n=len(data0)\nprint(n)\nN=list(range(n\/\/50))\nrandom.seed(2021)\nrandom.shuffle(N)","738a4d63":"train_dir='..\/input\/petfinder-pawpularity-score\/train'","7db2037f":"IMG=list()\nPAW=list()\nfor i in tqdm(range(n\/\/50)):\n    file=data0.loc[i,'Id']\n    path=os.path.join(train_dir,file+'.jpg')\n    img1=cv2.imread(path)\n    img2=cv2.resize(img1,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    IMG+=[img2]\n    PAW+=[data0.loc[i,'Pawpularity']]","2e3ad3df":"fig, axs = plt.subplots(4,4,figsize=(14,14))\nfor i in range(16):\n    r=i\/\/4\n    c=i%4\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title('Paw: '+str(PAW[N[i]]))\n    ax=axs[r][c].imshow(cv2.cvtColor(IMG[N[i]], cv2.COLOR_BGR2RGB))\nplt.show()","92de5b21":"data0d=data0[data0['sum']>5].reset_index(drop=True)\nprint(len(data0d))","76ca2a36":"IMG1=list()\nPAW1=list()\nfor i in tqdm(range(n\/\/50)):\n    file=data0d.loc[i,'Id']\n    path=os.path.join(train_dir,file+'.jpg')\n    img1=cv2.imread(path)\n    img2=cv2.resize(img1,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    IMG1+=[img2]\n    PAW1+=[data0d.loc[i,'Pawpularity']]","5489e678":"fig, axs = plt.subplots(4,4,figsize=(14,14))\nfor i in range(16):\n    r=i\/\/4\n    c=i%4\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title('sum:>5, Paw:'+str(PAW1[N[i]]))\n    ax=axs[r][c].imshow(cv2.cvtColor(IMG1[N[i]], cv2.COLOR_BGR2RGB))\nplt.show()","5f1eef2e":"data0['Near'].value_counts()","460362d5":"data0a=data0[data0['Near']==1].reset_index(drop=True)\nprint(len(data0a))","ba1e9f16":"IMG2=list()\nPAW2=list()\nfor i in tqdm(range(n\/\/50)):\n    file=data0a.loc[i,'Id']\n    path=os.path.join(train_dir,file+'.jpg')\n    img1=cv2.imread(path)\n    img2=cv2.resize(img1,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    IMG2+=[img2]\n    PAW2+=[data0a.loc[i,'Pawpularity']]","570457be":"fig, axs = plt.subplots(4,4,figsize=(14,14))\nfor i in range(16):\n    r=i\/\/4\n    c=i%4\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title('Near:1, Paw:'+str(PAW2[N[i]]))\n    ax=axs[r][c].imshow(cv2.cvtColor(IMG2[N[i]], cv2.COLOR_BGR2RGB))\nplt.show()","e90d38e8":"data0b=data0[data0['Pawpularity']==100].reset_index(drop=True)\nprint(len(data0b))","e8ba59b5":"IMG3=list()\nPAW3=list()\nfor i in tqdm(range(n\/\/50)):\n    file=data0b.loc[i,'Id']\n    path=os.path.join(train_dir,file+'.jpg')\n    img1=cv2.imread(path)\n    img2=cv2.resize(img1,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    IMG3+=[img2]\n    PAW3+=[data0b.loc[i,'Pawpularity']]","8538f3cf":"fig, axs = plt.subplots(4,4,figsize=(14,14))\nfor i in range(16):\n    r=i\/\/4\n    c=i%4\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title('Paw:'+str(PAW3[N[i]]))\n    ax=axs[r][c].imshow(cv2.cvtColor(IMG3[N[i]], cv2.COLOR_BGR2RGB))\nplt.show()","63804f58":"data0c=data0[data0['Pawpularity']<10].reset_index(drop=True)\nprint(len(data0c))","89a2a099":"IMG4=list()\nPAW4=list()\nfor i in tqdm(range(n\/\/50)):\n    file=data0c.loc[i,'Id']\n    path=os.path.join(train_dir,file+'.jpg')\n    img1=cv2.imread(path)\n    img2=cv2.resize(img1,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    IMG4+=[img2]\n    PAW4+=[data0c.loc[i,'Pawpularity']]","04bc2ef9":"fig, axs = plt.subplots(4,4,figsize=(14,14))\nfor i in range(16):\n    r=i\/\/4\n    c=i%4\n    ax=axs[r][c].axis(\"off\")\n    ax=axs[r][c].set_title('Paw:'+str(PAW4[N[i]]))\n    ax=axs[r][c].imshow(cv2.cvtColor(IMG4[N[i]], cv2.COLOR_BGR2RGB))\nplt.show()","8d85bdaf":"# Model","940fd909":"# Data preparation","d78fa581":"# Visualize Importance","c39dd702":"# Target setting"}}