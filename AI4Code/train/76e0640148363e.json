{"cell_type":{"15778cd1":"code","2e0d8c37":"code","e7d7c806":"code","b5f38a7b":"code","ce206c35":"code","856e15bb":"code","c8bf2a89":"code","6ee40a90":"code","8c69bc15":"code","42d64c60":"code","a732d66d":"code","f61b1870":"code","63b15b5b":"code","65aff105":"code","ece34540":"code","286f6e78":"code","c73b6143":"code","3242f745":"code","2fed0a31":"code","139401bd":"code","eff150a1":"code","6b9ffec7":"code","4c0c6b62":"code","c4bab0b4":"code","39e2365d":"code","05c7f77e":"code","b649e781":"code","e528d350":"code","44bf21c1":"code","5343d491":"code","52cffc56":"code","d4af1a0f":"code","9aae56d7":"code","146df9c5":"code","0024407d":"code","c0637951":"code","234a779a":"code","a19cf2ef":"markdown","a84c7ef9":"markdown","3c4c5d2e":"markdown","c3fea72d":"markdown","f168c542":"markdown","eff67ea7":"markdown","0c7c653e":"markdown"},"source":{"15778cd1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix,roc_auc_score,roc_curve\nimport scipy.stats as stats\nfrom matplotlib import pylab","2e0d8c37":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf","e7d7c806":"df['Outcome'].value_counts()","b5f38a7b":"df.isnull().sum()","ce206c35":"def diagnostic_plots(df, variable):\n    \n    plt.figure(figsize=(15,6))\n    plt.subplot(1, 2, 1)\n    df[variable].hist()\n\n    plt.subplot(1, 2, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=pylab)\n\n    plt.show()","856e15bb":"diagnostic_plots(df, 'Pregnancies')","c8bf2a89":"df['Pregnancies'] = df.Pregnancies**(1\/1.4)\n\ndiagnostic_plots(df, 'Pregnancies')","6ee40a90":"diagnostic_plots(df, 'Glucose')","8c69bc15":"df['Glucose'] = df.Glucose**(0.95)\n\ndiagnostic_plots(df, 'Glucose')","42d64c60":"diagnostic_plots(df, 'BloodPressure')","a732d66d":"df['BloodPressure'] = df.BloodPressure**1.4\n\ndiagnostic_plots(df, 'BloodPressure')","f61b1870":"diagnostic_plots(df, 'SkinThickness')","63b15b5b":"diagnostic_plots(df, 'Insulin')","65aff105":"df['Insulin'] = df.Insulin**0.4\n\ndiagnostic_plots(df, 'Insulin')","ece34540":"diagnostic_plots(df, 'BMI')","286f6e78":"diagnostic_plots(df, 'DiabetesPedigreeFunction')","c73b6143":"df['DiabetesPedigreeFunction'] = df.DiabetesPedigreeFunction**0.1\n\ndiagnostic_plots(df, 'DiabetesPedigreeFunction')","3242f745":"diagnostic_plots(df, 'Age')","2fed0a31":"df['Age']= np.log(df.Age)\n\ndiagnostic_plots(df, 'Age')","139401bd":"for feature in df.columns[:-1]:\n    IQR = df[feature].quantile(0.75) - df[feature].quantile(0.25)\n    upper_bond = df[feature].quantile(0.75) + (IQR * 1.5)\n    lower_bond = df[feature].quantile(0.25) - (IQR * 1.5)\n    \n    df[feature] = np.where(df[feature]>upper_bond,upper_bond,df[feature])\n    df[feature] = np.where(df[feature]<lower_bond,lower_bond,df[feature])\n    ","eff150a1":"for feature in df.columns[:-1]:\n    df[f'{feature}_zero'] = np.where(df[feature]==0,1,0)\n    df[feature] = np.where((df[feature]==0) & (df['Outcome']==0),df.groupby('Outcome')[feature].median()[0],df[feature])\n    df[feature] = np.where((df[feature]==0) & (df['Outcome']==1),df.groupby('Outcome')[feature].median()[1],df[feature])","6b9ffec7":"X = df.drop('Outcome', axis=1)\nX = StandardScaler().fit_transform(X)\ny = df['Outcome']","4c0c6b62":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.25, random_state=0)","c4bab0b4":"y_train.value_counts()","39e2365d":"y_test.value_counts()","05c7f77e":"model = SVC()\n\nparameters = [{'kernel': ['rbf'],\n               \n               'gamma': [1e-3, 1e-4],\n               \n               'C': [1, 10, 100, 1000]}]","b649e781":"grid = GridSearchCV(estimator=model, param_grid=parameters, cv=5,scoring='roc_auc')\ngrid.fit(X, y)","e528d350":"grid.best_estimator_","44bf21c1":"roc_auc = np.mean(cross_val_score(grid, X, y, cv=5, scoring='roc_auc'))\nprint('Score: {}'.format(roc_auc))","5343d491":"model = SVC(C=1000, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma=0.001, kernel='rbf',\n    max_iter=-1, probability=True, random_state=None, shrinking=True,\n    tol=0.001, verbose=False)","52cffc56":"model.fit(X_train,y_train)","d4af1a0f":"y_predicted = model.predict(X_test)","9aae56d7":"y_pred_proba = model.predict_proba(X_test)","146df9c5":"print(classification_report(y_test, y_predicted))","0024407d":"print(confusion_matrix(y_test, y_predicted))","c0637951":"roc_auc_score(y_test,y_predicted)","234a779a":"plt.figure(figsize=(7,5))\nfpr, tpr, thresh = roc_curve(y_test, y_pred_proba[:,1])\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr,color='blue')\nplt.plot([0, 1], [0, 1],'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n","a19cf2ef":"## Please Upvote if you understood how I improved roc_auc_score","a84c7ef9":"#### Removing Outliers","3c4c5d2e":"#### roc_auc_score of X_test is 0.8924","c3fea72d":"#### Fixing the data into Normal Distribution","f168c542":"#### Testing on Test data","eff67ea7":"#### Capturing NaN Value with Extra Variable and Imputating the NaN value with median with respect to target feature. \n","0c7c653e":"#### 0.9368 roc_auc score by cross_val_score"}}