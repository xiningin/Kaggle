{"cell_type":{"ffd902d3":"code","97503748":"code","2870902c":"code","d02d4d18":"code","d90a9f9a":"code","d2b3a67e":"code","0b7af489":"code","d0465feb":"code","e1dcbf8e":"code","31f8494d":"code","b6527a57":"code","7e5ebea2":"code","77a9825e":"code","62f55988":"code","1531eb74":"code","04957502":"code","6e67806f":"code","619a2a70":"code","c5dc2c48":"code","f712ee34":"code","881ce51b":"code","c3559cd6":"code","04f869a3":"code","2b0da1ae":"code","679749e9":"code","bd19e537":"code","6bc30ab3":"code","b1b8a60f":"code","bca1c3bd":"code","d0814608":"code","0df02e3a":"code","1429501f":"code","6121c522":"code","930c042a":"code","c71af774":"code","d0017ac3":"code","55826ebe":"code","093f49cd":"code","2e868b5b":"code","d7ff4761":"code","85f389ea":"code","ec801bee":"code","92f440e4":"code","28323e61":"code","d191fa85":"code","37ccb8ea":"code","73b3bb7d":"markdown","e2adf665":"markdown","c5f94eee":"markdown","b35db4e0":"markdown","bc672e76":"markdown","59ef1c2e":"markdown","0c7471c9":"markdown"},"source":{"ffd902d3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","97503748":"# READ A COMMA-SEPARETED VALUES (CSV)FILE INTO PANDAS DATA FRAME.\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head(10)","2870902c":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head(10)","d02d4d18":"# COUNT THE NUMBER OF ROWS AND COLUMNS IN THE TRAIN DATASET AND TEST DATASET.\nprint(train.shape)\nprint(test.shape)\n","d90a9f9a":"#LOOK AT THE COLUMNS OF TRAIN DATASET AND TEST DATASET.\nprint(train.columns)\nprint(test.columns)","d2b3a67e":"train.isnull().sum()","0b7af489":"# GET THE COUNT OF THE NUMBER OF SURVIOURS,SEX,EMBARKED,SIBSP,TICKET.\nprint(train[\"Survived\"].value_counts())\nprint(train[\"Sex\"].value_counts())\nprint(train[\"Embarked\"].value_counts())\nprint(train[\"SibSp\"].value_counts())\nprint(train[\"Ticket\"].value_counts())","d0465feb":"test.isnull().sum()","e1dcbf8e":"sns.countplot(x=\"Survived\",data=train)","31f8494d":"sns.countplot(x=\"Sex\",data=train)","b6527a57":"#LOOK AT THE SURVIVAL RATE BY SEX.\ntrain.groupby('Sex')[['Survived']].mean()","7e5ebea2":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS\ntrain.pivot_table('Survived',index='Sex',columns='Pclass')","77a9825e":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS VISUALLY.\ntrain.pivot_table('Survived',index='Sex',columns='Pclass').plot()","62f55988":"#PLOT THE SURVIVAL RATE OF EACH CLASS\nsns.barplot(x='Pclass',y='Survived',data=train)","1531eb74":"#LOOK AT SURVIVAL RATE BY SEX ,AGE AND PCLASS.\nage=pd.cut(train['Age'],[0,18,80])\ntrain.pivot_table('Survived',['Sex','Age'],'Pclass')","04957502":"#COUNT THE EMPTY VALUES IN EACH COLUMN\ntrain.isna().sum()","6e67806f":"#LOOK AT ALL OF THE VALUES IN EACH COLUMN AND GET A COUNT.\nfor val in train:\n    print(train[val].value_counts())\n    print()","619a2a70":"train.dtypes","c5dc2c48":"#PRINT THE UNIQUE VALUES IN THE COLUMNS\nprint(train['Sex'].unique())\nprint(train['Embarked'].unique())","f712ee34":"title=set()\nfor name in train[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","881ce51b":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","c3559cd6":"train[\"Name\"]=train[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntrain[\"Name\"]=train.Name.map(titles)\ntrain.head(10)","04f869a3":"#DROP THE UNWANTED FIELDS.\ndf=train.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf.head()","2b0da1ae":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf.Sex=df.Sex.map({\"female\":0,\"male\":\"1\"})\ndf.Embarked=df.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf.Name=df.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf.head()","679749e9":"df.isnull().sum()","bd19e537":"#REPLACING ALL THE NULL VALUES.\ndf.fillna(df.Age.mean(),inplace=True)\nround(df[\"Age\"],1)\ndf.head(10)","6bc30ab3":"df.isnull().sum()","b1b8a60f":"#GET SOME STATISTICS.\ndf.describe()","bca1c3bd":"#THE STANDARDSCALER ASSUMES DATA IS NORMALLYDISTRIBUTED WITHIN EACH FEATURE AND SCALES THEM SUCH \n#THAT THE DISTRIBUTION CENTERED AROUND 0, WITH A STANDARD DEVIATION BY 1.\n\nfrom sklearn.preprocessing import StandardScaler\ndf[\"Age\"]=round((df.Age-df.Age.mean()\/df.Age.std()))\ndf[\"Fare\"]=round((df.Fare-df.Fare.mean()\/df.Fare.std()))\n","d0814608":"df.head()","0df02e3a":"df.head()","1429501f":"from sklearn.model_selection import train_test_split","6121c522":"x_train,x_test,y_train,y_test=train_test_split(\n     df.drop([\"Survived\"],axis=1),\n     df.Survived,test_size=0.2,\n     random_state=0,\n     stratify=df.Survived)","930c042a":"def models(x_train,y_train):\n    # USE LOGISTIC REGRESSION\n    from sklearn.linear_model import LogisticRegression\n    log=LogisticRegression(random_state=0)\n    log.fit(x_train,y_train)\n    \n    \n\n    \n    \n    #PRINT THE TRAINING ACCURACY FOR LOGISTIC REGRESSION MODEL.\n    print('Logistic Regression training accuracy:',log.score(x_train,y_train))\n    \n    return log","c71af774":"#GET AND TRAIN ALL THE MODELS\nmodel=models(x_train,y_train)","d0017ac3":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","55826ebe":"\n\ntitles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}","093f49cd":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head(10)","2e868b5b":"#DROPPING UNWANTED FIELDS.\ndf1=test.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf1.head()","d7ff4761":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf1.Sex=df1.Sex.map({\"female\":0,\"male\":\"1\"})\ndf1.Embarked=df1.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf1.Name=df1.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf1.head()","85f389ea":"df1.isnull().sum()","ec801bee":"#REPLACING ALL THE NULL VALUES\ndf1.fillna(df1.Age.mean(),inplace=True)","92f440e4":"df1.isnull().sum()","28323e61":"df1[\"Age\"]=round((df1.Age-df1.Age.mean()\/df1.Age.std()))\ndf1[\"Fare\"]=round((df1.Fare-df1.Fare.mean())\/df1.Fare.std())\n","d191fa85":"df1.head()","37ccb8ea":"#PRINT THE PREDICTION.\npred=model.predict(df1)\npred","73b3bb7d":"# CLEANING THE DATASET","e2adf665":"# CREATE A FUNCTION WITH LOGISTIC REGRESSION","c5f94eee":"# PRINT THE PREDICTION ON LOGISTIC REGRESSION MODEL","b35db4e0":"# FEATURE SCALLING.","bc672e76":"# IMPORTING PACKAGES.","59ef1c2e":"# DATA MODELLING","0c7471c9":"# DATA ANALYSIS."}}