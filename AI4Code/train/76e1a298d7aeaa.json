{"cell_type":{"8340b621":"code","de4ce0e5":"code","1f3c2bf1":"code","9ff2a61f":"code","e96eb9a5":"code","c1f38c66":"code","2b9794c5":"code","5e740a9c":"code","6eadf1ba":"code","a5599946":"code","6c8f2777":"code","bfe87a55":"code","5827ac95":"code","b12f12b5":"code","b293a09e":"code","38e8e60f":"code","31161dfb":"code","991dfb2f":"code","027c9640":"code","197d4077":"code","f93f76ee":"code","8f6dc09f":"code","4a526fc7":"code","3418e35b":"code","0a628786":"code","5e48b03b":"code","bf10ccec":"code","ce246381":"code","3582a00a":"code","28c463c5":"code","cc42dd33":"code","9b0ec045":"code","ff9ee0e5":"code","da985d35":"code","b5d49d35":"code","32e62874":"code","6c279d46":"code","aeb7d97a":"code","089161db":"code","77b0f69d":"code","0804be3a":"code","2efc69e4":"code","ed4b0b9b":"code","ce1859e3":"code","bc3d3584":"markdown","afa80c48":"markdown","ab9094e2":"markdown","0c170934":"markdown","7a09a4d1":"markdown","bc9cfe63":"markdown","9ca648a5":"markdown","408e4b8c":"markdown","0615bd63":"markdown","9bda4c52":"markdown","edd19122":"markdown","24e12e6d":"markdown"},"source":{"8340b621":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ni = 0\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        i += 1\n        if i < 5:\n            print(os.path.join(dirname, filename))\nprint('Printed 5 filenames out of ', i)\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de4ce0e5":"# fn = '\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/bulbar_vs_limb.csv'\n# fn = '\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/median_low_vs_high.csv'\nfn = '\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/ctrl_vs_case.csv'\ndf = pd.read_csv(fn)\ndf","1f3c2bf1":"y = df.iloc[:,1]\ndf_save = df.copy()\ndf = df.iloc[:,2:] # Keep only genes, no target and ids\nprint('Keep only genes, no target and ids')\n","9ff2a61f":"print('Check no duplicated gene names:')\nlen(set(df.columns) ) , len(df.columns)","e96eb9a5":"print('Check no negative values:')\n(df < 0 ).sum().sum()","c1f38c66":"print('Look on number of zero expressed genes:')\nv1 = df.sum(axis = 0)\nprint((v1==0).sum())\nv2 = df.std(axis = 0)\nprint((v2==0).sum())\n","2b9794c5":"print('Look on top expressed and lowest expressed genes')\ngenes = pd.DataFrame()\ngenes['Expression Sum'] = v1\ngenes['Expression Mean'] = v1\/len(v1)\ngenes['Expression Std'] = v2\ngenes['Index'] = range(len(genes)) # \ngenes = genes.sort_values('Expression Sum',ascending = False)\ndisplay(genes.head(20))\nprint()\ndisplay(genes.tail(20))\n\n","5e740a9c":"import matplotlib.pyplot as plt","6eadf1ba":"fig = plt.figure(figsize = (20,6))\nfig.add_subplot(1,2,1)\nc = 'Expression Mean'\nplt.plot(np.log10(1+ genes[c].values) , '*-')\nplt.title(c + ' Log10 scale')\nplt.xlabel('genes ordered')\nfig.add_subplot(1,2,2)\nc = 'Expression Std'\nplt.plot(np.log10(1+ genes['Expression Std'].values) , '*-')\nplt.title(c + ' Log10 scale')\nplt.xlabel('genes ordered')\nplt.show()\nprint('More or less ordering by expression mean is the same as by std - that is natural')\nprint('Typically one may keep top variable genes to analyse')","a5599946":"list_genes = ['NEFL', 'C9orf72', 'SOD1',  'TARDBP','FUS', 'NEFH',\n              'MATR3', 'TUBA4A' ,\n'ANXA11', 'NEK1',  'TBK1', 'CCNF', 'TIA1',\n             'ALS2']\n\n# 'C21orf2', - not found \n\nfor g in list_genes:\n    if g not in df.columns:\n        print(g , 'not found in given genes')\n    else:\n        print(g, 'found')","6c8f2777":"from sklearn.metrics import roc_auc_score\n\nu = df['NEFL'].values\nr = roc_auc_score(y.values,u)\nprint(r)","bfe87a55":"list_fn = ['\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/bulbar_vs_limb.csv', \n'\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/median_low_vs_high.csv',\n'\/kaggle\/input\/end-als\/end-als\/transcriptomics-data\/DESeq2\/ctrl_vs_case.csv']\nimport time\nt0 = time.time()\nlist_df = []\nfor fn in list_fn:\n    d = pd.read_csv(fn)\n    list_df.append(d)\nlist_names = [ 'bulbar_vs_limb', 'median_low_vs_high',  'ctrl_vs_case' ]\n\nprint(time.time()-t0, 'seconds passed')","5827ac95":"st = pd.DataFrame()\n\nfor i,d in enumerate(list_df):\n    for c in list_genes: \n        IX = list_names[i]\n        u = d[c].values\n        y = d.iloc[:,1].values\n        r = roc_auc_score(y,u)\n        \n        st.loc[ c, IX +' RocAuc' ] = np.round(r,3) \nst.index.name = 'gene'\n\n\n\nprint('RocAuc for selected genes (known from previous literature)')\nst    ","b12f12b5":"import seaborn as sns\ncm = df[list_genes].corr()\n#correlation heatmap\nplt.figure(figsize=(10,6));\nsns.heatmap(cm);","b293a09e":"#clustermap\nsns.clustermap(np.abs(cm),cmap='vlag');","38e8e60f":"df[['FUS','C9orf72','MATR3','TUBA4A','NEFL']].corr()","31161dfb":"a,b = np.where( np.triu(np.abs(cm),1) > 0.3 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)","991dfb2f":"cm['FUS']","027c9640":"v = np.triu((cm),1).ravel()\nv = v[v != 0]\nplt.hist(v,bins = 5)\nplt.show()","197d4077":"!pip install mygene\nimport mygene\nmg = mygene.MyGeneInfo()","f93f76ee":"mg = mygene.MyGeneInfo()\nimport time\n#genes = df.copy()\ngenes = pd.DataFrame()\nt0 = time.time()\n\nfor g in list_genes:\n    g_inf = mg.query('symbol:'+g, species='human')\n    #print(g, g_inf)\n    if 'hits' in g_inf.keys():\n        if 'entrezgene' in g_inf['hits'][0].keys(): \n            IX = g\n            entrez_gene_ID = g_inf['hits'][0]['entrezgene' ]\n\n            g_inf = mg.getgene(entrez_gene_ID)\n            list1 = ['symbol',   'type_of_gene', 'map_location' ,   'name', 'entrezgene', 'alias', 'other_names' , 'summary' ] \n            for k in list1:\n                if k in g_inf.keys():\n                    genes.loc[IX,k] = str(g_inf[k]) \n\n            if 'generif' in g_inf.keys():\n                genes.loc[IX,'count pubmed'] = len(g_inf['generif'])            \n            \ngenes ","8f6dc09f":"pd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\npd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)","4a526fc7":"genes[['summary', 'count pubmed']].sort_values('count pubmed',ascending = False)","3418e35b":"import time\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport umap\nfrom sklearn.decomposition import PCA\n\nt0 = time.time()\n\nfig = plt.figure(figsize = (20,8) ); c = 0\nfor i,d in enumerate(list_df):\n    data_name = list_names[i]\n    X = d.iloc[:,2:].values\n    y = d.iloc[:,1].values\n\n    c += 1; fig.add_subplot(1,3,c)\n    pca = PCA()# n_components=2)\n    r = pca.fit_transform(X)\n    \n    sns.scatterplot( r[:,0],r[:,1] , hue = y)\n    plt.title(data_name)\n    plt.grid()\n    plt.xlabel('PCA1')\n    plt.ylabel('PCA2')\n    plt.legend()\n    \n    print(time.time() - t0,'seconds passed')\n    print(pca.explained_variance_ratio_[:10])\n    print(pca.singular_values_[:10])\n\nplt.show()\nprint(time.time() - t0,'seconds passed. Finished.')\n","0a628786":"import time\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport umap\nfrom sklearn.decomposition import PCA\n\nt0 = time.time()\n\nfig = plt.figure(figsize = (20,8) ); c = 0\nfor i,d in enumerate(list_df):\n    data_name = list_names[i]\n    X = d.iloc[:,2:].values\n    y = d.iloc[:,1].values\n\n    c += 1; fig.add_subplot(1,3,c)\n    pca = PCA()# n_components=2)\n    r = pca.fit_transform(X)\n    r = umap.UMAP().fit_transform( r[:,:100] )\n\n    sns.scatterplot( r[:,0],r[:,1] , hue = y)\n    plt.title(data_name)\n    plt.grid()\n    plt.xlabel('UMAP1')\n    plt.ylabel('UMAP2')\n    plt.legend()\n    \n    print(time.time() - t0,'seconds passed')\n    print(pca.explained_variance_ratio_[:10])\n    print(pca.singular_values_[:10])\n\nplt.show()\nprint(time.time() - t0,'seconds passed. Finished.')\n","5e48b03b":"url = 'https:\/\/raw.githubusercontent.com\/chervov\/genes\/main\/genes_ALS_from_alsod_ac_uk.csv'\ndf_genes_alsod = pd.read_csv(url)\n\nif 0: # If inet is not available: \n    list_definitive_ALS_gene = ['ANXA11' ,'C9orf72' ,'CHCHD10' ,'EPHA4' ,'FUS' ,'HNRNPA1' ,'KIF5A' ,'NEK1' ,'OPTN' ,'PFN1' ,'SOD1' ,'TARDBP' ,'TBK1' ,'UBQLN2' ,'UNC13A' ,'VAPB' ,'VCP' ] \n    print(len( list_definitive_ALS_gene  ))\n    list_strong_evidence_ALS_gene = ['ATXN1','CCNF','CFAP410','HFE','NIPA1','SCFD1','TUBA4A']\n    print(len( list_strong_evidence_ALS_gene  ))\n    list_clinical_modifier_ALS_gene =  ['ATXN2','CAMTA1','ENAH']\n    print(len( list_clinical_modifier_ALS_gene  ))\n    list_moderate_evidence_ALS_gene =  ['ANG','ARHGEF28','CDH22','CHMP2B','CNTN6','CRYM','CSNK1G3','CX3CR1','DAO','DNAJC7','DNMT3A','ERBB4','FIG4','GLE1','GPX3','LMNB1','SARM1','SMN1','SQSTM1','SS18L1','TNIP1']\n    print(len( list_moderate_evidence_ALS_gene  ))\n    list_tenuous_ALS_gene = ['ALS2', 'ALS3', 'ALS7', 'APEX1', 'APOE', 'AR', 'ARPP21', 'B4GALT6', 'BCL11B', 'BCL6', 'CCS', 'CDH13', 'CHGB', 'CNTF', 'CNTN4', 'CRIM1', 'CST3', 'CYP2D6', 'DCTN1', 'DIAPH3', 'DISC1', 'DNMT3B', 'DOC2B', 'DPP6', 'DYNC1H1', 'EFEMP1', 'ELP3', 'EphA3', 'ERLIN1', 'EWSR1', 'FEZF2', 'FGGY', 'GARS', 'GLT8D1', 'GRB14', 'GRN', 'HEXA', 'HNRNPA2B1', 'ITPR2', 'KDR', 'KIFAP3', 'LIF', 'LIPC', 'LOX', 'LUM', 'MAOB', 'MAPT', 'MATR3', 'MOBP', 'MTND2P1', 'NAIP', 'NEFH', 'NEFL', 'NETO1', 'NT5C1A', 'ODR4', 'OGG1', 'OMA1', 'PARK7', 'PCP4', 'PLEKHG5', 'PNPLA6', 'PON1', 'PON2', 'PON3', 'PRPH', 'PSEN1', 'PVR', 'RAMP3', 'RBMS1', 'RFTN1', 'RNASE2', 'RNF19A', 'SCN7A', 'SELL', 'SEMA6A', 'SETX', 'SIGMAR1', 'SLC1A2', 'SLC39A11', 'SLC52A3', 'SMN2', 'SNCG', 'SOD2', 'SOX5', 'SPAST', 'SPG11', 'SPG7', 'SUSD1', 'SYNE1', 'SYT9', 'TAF15', 'TIA1', 'TRPM7', 'UBQLN1', 'VDR', 'VEGFA', 'VPS54', 'VRK1', 'ZFP64', 'ZNF512B']\n    print(len(list_tenuous_ALS_gene))\n    # len(set(list_definitive_ALS_gene+list_strong_evidence_ALS_gene+list_clinical_modifier_gene+list_moderate_evidence_gene) & set(list_genes)), len(list_genes)\n\nprint(df_genes_alsod['Category'] .value_counts()    )\ndf_genes_alsod    ","bf10ccec":"print( set(list_genes) - set(df_genes_alsod['Gene symbol']), len( set(list_genes) ), len( df_genes_alsod ) )\nprint('Check - new genes list contains previus wikipedia list')","ce246381":"for c in range(len(df_genes_alsod)): \n    g = df_genes_alsod['Gene symbol'].iat[c]\n    IX_genes =  df_genes_alsod.index[c]\n    list_roc_aucs = []\n    for i,d in enumerate(list_df):\n        data_name = list_names[i] # dataset name \n        if g in d.columns:\n            df_genes_alsod.loc[ IX_genes, 'In Data' ] = True \n            u = d[g].values\n            y = d.iloc[:,1].values\n            r = roc_auc_score(y,u)\n            df_genes_alsod.loc[ IX_genes, data_name +' RocAuc' ] = np.round(r,3) \n            \n            list_roc_aucs.append(r)\n        else:\n            df_genes_alsod.loc[ IX_genes, 'In Data' ] = False \n\n    if len( list_roc_aucs ) > 0:\n        best_abs_roc_auc = np.max( np.abs( np.array(list_roc_aucs) - 0.5) + 0.5 )\n        df_genes_alsod.loc[ IX_genes, 'Best Abs RocAuc' ] =  np.round(best_abs_roc_auc,3)\n\ndf_genes_alsod['On Wiki'] = df_genes_alsod['Gene symbol'].isin(list_genes)        \ndf_genes_alsod.sort_values('Best Abs RocAuc', ascending = False ).head(50)","3582a00a":"mask = df_genes_alsod['Category'] == 'Definitive ALS gene'\ndf_genes_alsod[mask].sort_values('Best Abs RocAuc', ascending = False ).head(50)","28c463c5":"print('Show top predictors for each dataset')\nfor f  in [ 'bulbar_vs_limb', 'median_low_vs_high', 'ctrl_vs_case' ] :\n    f2 = f + ' RocAuc'\n    df_genes_alsod2 = df_genes_alsod.copy() \n    df_genes_alsod2[f2 + ' Abs'] =  ((df_genes_alsod[f2] - 0.5).abs() + 0.5)\n    print('Top predictors for ',f)\n    display( df_genes_alsod2.sort_values( f2 + ' Abs', ascending = False ).head(10) )\n","cc42dd33":"l = list(df_genes_alsod.sort_values('Best Abs RocAuc', ascending = False ).head(5)['Gene symbol'] )\nprint('Correlations for top 5 predictors. We see that top2 - OPTN and HNRNPA2B1 are quite correlated')\ndf[l].corr()","9b0ec045":"mask = df_genes_alsod['In Data'] == True\nprint(mask.sum())\nl = list( df_genes_alsod['Gene symbol'][mask])\nprint( df[l].corr()['OPTN'].sort_values() )\nprint()\nprint('Conclusion:')\nprint('Top 1 - OPTN - strongly (anti)-correlated with FUS NEFL - which are known to be related to ALS ')\nprint('It support that its predictions are reasonable')","ff9ee0e5":"mask = df_genes_alsod['In Data'] == True\nl = list( df_genes_alsod['Gene symbol'][mask])\nprint( df[l].corr()['HNRNPA2B1'].sort_values() )\nprint()\nprint('Conclusion:')\nprint('Top 2 - HNRNPA2B1 - strongly (anti)-correlated with OPTN NEFL - which are known to be related to ALS ')\nprint('It support that its predictions are reasonable')","da985d35":"mask = df_genes_alsod['In Data'] == True\nl = list( df_genes_alsod['Gene symbol'][mask])\nprint( df[l].corr()['NIPA1'].sort_values().head(10) )\nprint('TAIL -------------------------------------------------')\nprint( df[l].corr()['NIPA1'].sort_values().tail(15) )\nprint()\nprint('Conclusion:')\nprint('Top 3 - NIPA1 - strongly (anti)-correlated with NEFL - which are known to be related to ALS, also 0.37 correlated with SOD1 - definitive ALS, and 0.68 with SOD2 - tenous ')\nprint('It support that its predictions are reasonable')\ndf[['NIPA1','SOD1','SOD2']].corr()","b5d49d35":"\nmask = df_genes_alsod['In Data'] == True\nl = list( df_genes_alsod['Gene symbol'][mask])\nprint( df[l].corr()['ANXA11'].sort_values().head(10) )\nprint('TAIL -------------------------------------------------')\nprint( df[l].corr()['ANXA11'].sort_values().tail(15) )\nprint()\nprint('Conclusion:')\nprint(' ANXA11 - strongly (anti)-correlated with NEFL - which are known to be related to ALS, also 0.37 correlated with SOD1 - definitive ALS, and 0.68 with SOD2 - tenous ')\nprint('It support that its predictions are reasonable')\ndf[['ANXA11','SOD1','SOD2']].corr()","32e62874":"mask = (df_genes_alsod['Best Abs RocAuc'] > 0.59 )\nmask.sum()\nl = list( df_genes_alsod[mask]['Gene symbol'])\ncm = df[l].corr()\nimport seaborn as sns\nsns.heatmap(cm)\nplt.show()","6c279d46":"mask = (df_genes_alsod['Best Abs RocAuc'] > 0.59 )\nmask.sum()\nl = list( df_genes_alsod[mask]['Gene symbol'])\ncm = df[l].corr()\nimport seaborn as sns\n\n#clustermap\nsns.clustermap(np.abs(cm),cmap='vlag');\nprint('Correlations of genes with high rocauc')","aeb7d97a":"a,b = np.where( np.triu(np.abs(cm),1) > 0.7 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    I = np.where(df_genes_alsod['Gene symbol'] == cm.index[a[i]] )[0][0]\n    d.loc[i,'Best Abs RocAuc 1'] =  df_genes_alsod['Best Abs RocAuc'].iat[I]\n    I = np.where(df_genes_alsod['Gene symbol'] == cm.index[b[i]] )[0][0]\n    d.loc[i,'Best Abs RocAuc 2'] =  df_genes_alsod['Best Abs RocAuc'].iat[I]\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)","089161db":"mask = (df_genes_alsod['Best Abs RocAuc'] > 0.0 )\nmask.sum()\n\nl = list( df_genes_alsod[mask]['Gene symbol'])\n#clustermap\ncm149 = df[l].corr()\nsns.clustermap(np.abs(cm149),cmap='vlag');\nprint('Correlations of all genes from the list')","77b0f69d":"\nrandom_data_same_size = np.random.randn( df.shape[0], mask.sum() )\nrandom_data_same_size.shape\n#clustermap\nsns.clustermap(np.abs(np.corrcoef(random_data_same_size.T)),cmap='vlag');\nplt.show()","0804be3a":"\nl = []\nfor i in range(149):\n    j = np.random.randint( df.shape[1] )\n    l.append(j)\ncm = df.iloc[:,l].corr()    \n#clustermap\nsns.clustermap(np.abs(cm),cmap='vlag');\nplt.show()","2efc69e4":"mask = (df_genes_alsod['Best Abs RocAuc'] > 0.0 )\nmask.sum()\n\nl = list( df_genes_alsod[mask]['Gene symbol'])\n#clustermap\ncm149 = df[l].corr()\n\ncm = cm149\nv = np.triu((cm),1).ravel()\nv = v[v != 0]\nplt.hist(v,bins = 100)\nplt.title('selected 149 genes data')\nplt.show()\nprint( 'Genes data correlation stastics: ')\nprint( pd.Series(v).describe() )\nprint()\n\nrandom_data_same_size = np.random.randn( df.shape[0], mask.sum() )\nrandom_data_same_size.shape\nv = np.triu((np.corrcoef(random_data_same_size.T)),1).ravel()\nv = v[v != 0]\nplt.hist(v,bins = 100)\nplt.title('random  data')\nplt.show()\nprint( 'Random data correlation stastics: ')\nprint( pd.Series(v).describe() )\nprint()\n\nprint('Random data is much less correlated that these genes data')\n\n\nl = []\nfor i in range(149):\n    j = np.random.randint( df.shape[1] )\n    l.append(j)\ncm = df.iloc[:,l].corr()    \nv = np.triu((cm),1).ravel()\nv = v[v != 0]\nplt.hist(v,bins = 100)\nplt.title('correlations for random subset of our dataset of the same size 149')\nplt.show()\nprint( 'Correlation stastics for random subset of our dataset of the same size 149 ')\nprint( pd.Series(v).describe() )\nprint()\nprint('Random data is much less correlated that these genes data')\n","ed4b0b9b":"print('Show top correlated pairs of genes')\nmask = (df_genes_alsod['Best Abs RocAuc'] > 0.0 )\nmask.sum()\n\nl = list( df_genes_alsod[mask]['Gene symbol'])\n#clustermap\ncm149 = df[l].corr()\n\n\ncm = cm149\na,b = np.where( np.triu(np.abs(cm),1) > 0.7 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    I = np.where(df_genes_alsod['Gene symbol'] == cm.index[a[i]] )[0][0]\n    d.loc[i,'Best Abs RocAuc 1'] =  df_genes_alsod['Best Abs RocAuc'].iat[I]\n    I = np.where(df_genes_alsod['Gene symbol'] == cm.index[b[i]] )[0][0]\n    d.loc[i,'Best Abs RocAuc 2'] =  df_genes_alsod['Best Abs RocAuc'].iat[I]\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)","ce1859e3":"#f = 'FUS'\n#plt.plot(df[f])\nprint('Look at expression of the genes from the list, we see that some almost not expressed and thus should be thrown out')\nfor i in range(len(df_genes_alsod)):\n    IX = df_genes_alsod.index[i]\n    g = df_genes_alsod.loc[IX,'Gene symbol']\n    if g in df.columns:\n        df_genes_alsod.loc[IX,'Max Expression'] = df[g].max()\n        df_genes_alsod.loc[IX,'Mean Expression'] = df[g].mean()\n        df_genes_alsod.loc[IX,'Median Expression'] = df[g].median()\n        df_genes_alsod.loc[IX,'Min Expression'] = df[g].min()\n    \ndisplay( df_genes_alsod.describe() )\ndisplay(df_genes_alsod.sort_values('Median Expression'))\nc = 'Median Expression'\nplt.plot( df_genes_alsod[c].sort_values().values , '*-')\nplt.show()\nprint('Count genes with median expression zero:',(df_genes_alsod[c]==0).sum(), 'out of ', len(df_genes_alsod))\nc = 'Min Expression'\nprint('Count genes with min expression zero:',(df_genes_alsod[c]==0).sum(), 'out of ', len(df_genes_alsod))","bc3d3584":"# UMAP visualization","afa80c48":"# Load largest transcriptomics data","ab9094e2":"Should be more analyzed later: \n\n\n\n# Gene NEFL -  \"is a useful marker for disease monitoring in amyotrophic lateral sclerosis,[9]\" (among top expressed - does it mean something ?)\n\nhttps:\/\/en.wikipedia.org\/wiki\/Neurofilament_light_polypeptide\n\nIt is one the top expressed genes - and related to neuro diseases.\n\n\nWhat is surprising - its relation to ALS mentioned here: https:\/\/en.wikipedia.org\/wiki\/Neurofilament_light_polypeptide\nbut not mentioned here - https:\/\/en.wikipedia.org\/wiki\/Genetics_of_amyotrophic_lateral_sclerosis\nwhere it must be mentioned - special page containing genes associated to ALS\n\n\n","0c170934":"# Genes info with mygene package\n\nmygeny - is a nice package to get info on genes\nSee example notebook: \nhttps:\/\/www.kaggle.com\/alexandervc\/genes-info-with-mygene-python-package\n","7a09a4d1":"# Dimensional reduction and visualization","bc9cfe63":"## For comparaison correlations of random data of the same size - it is much LESS correlated ","9ca648a5":"# For comparaison correlation of random subset of the same size 149 of our dataset - again less correlated (not so much less than completely random, but still evidently)","408e4b8c":"# EDA","0615bd63":"# Extended  list  of known genes related to ALS from https:\/\/alsod.ac.uk\/ \n\n154 genes, with some comment on strongness of evidence. (Strictly contains previous one). \n\n149 of them are in our genes names for our data.","9bda4c52":"# Selected genes correlation analysis","edd19122":"# What is about ? PRELIMINARY DRAFT TO BE MODIFIED \n\n\n\nNotebook for https:\/\/www.kaggle.com\/alsgroup\/end-als\n\nWe consider transcriptomics data and make some EDA (Explanatory Data Analysis).\nTranscriptomics - measures genes expressions for cells. There are 53859 genes.\n\n\nSome findings: \n\n1) We see data are non-negative - that means probably they obtained - log(1+counts)+normalization(?) - typical processing.\n\n2) 173 genes have zero expression - we can throw them out\n\n3) Top expressed genes contain MALAT1 , MT.*** (Mitochondrial genes ( https:\/\/en.wikipedia.org\/wiki\/Mitochondrial_DNA )) \nthat seems to happen for many transcriptomics datasets, so it  seems  not worth for analysis.\n\n(See for example https:\/\/www.kaggle.com\/alexandervc\/sciplex2-part-1-eda?scriptVersionId=57667001 cell 22 - MALAT1 abd MT.RNR2 - on top , or https:\/\/scanpy-tutorials.readthedocs.io\/en\/latest\/pbmc3k.html cell 8 - MALAT1 - on top )\n\n4) Gene NEFL - \"is a useful marker for disease monitoring in amyotrophic lateral sclerosis,[9]\" (among top expressed - does it mean something ?)\nhttps:\/\/en.wikipedia.org\/wiki\/Neurofilament_light_polypeptide\n\nIt is one the top expressed genes - and related to neuro diseases.\n\n Roc auc on three datasets: \n bulbar_vs_limb \tmedian_low_vs_high  ctrl_vs_case \nNEFL\t0.392\t0.397\t0.489\n\n\n5) List of selected genes and their roc auc\n\nThese genes taken from wikipedia and etc.:\n\nlist_genes = ['NEFL', 'C9orf72', 'SOD1',  'TARDBP','FUS', 'NEFH',\n              'MATR3', 'TUBA4A' ,\n'ANXA11', 'NEK1',  'TBK1', 'CCNF', 'TIA1',\n             'ALS2']\n             \nWe check their roc_auc. Beware that std for completely random predictor is about 0.05, so no gene goes beyond 3 std, and thus by its own can be considered reliably good predictor, however - may be good prediction on all three targets simultaneously would mean something - I will check later.\n\n\n6) Correlation analysis. We see that FUS is strongly anticorrelated with many genes.\nGenes: ['C9orf72','MATR3','TUBA4A','NEFL'] correlated with each other about 0.3-0.5 and anticorrelated with FUS about 0.5-0.6.\nSuch correletions seems to cannot be random. \n\n\n7) Added info on genes from mygene package. Surprised that cell cycle genes CCNF, NEK1 are also related to ALS.\nNEK1 - Associated with 3-5% of ALS cases; **considered an ALS risk gene rather than a causative gene** as of 2018.[1]\n( https:\/\/en.wikipedia.org\/wiki\/Genetics_of_amyotrophic_lateral_sclerosis  )\n\nANXA11 is quite correlated with CCNF. While ANXA11 - 'Definite ALS' (and also schizophrenia ) \n\n\n8) Dimensional reduction by PCA, UMAP does not reveal clear clusters in data, neither separation by targers is not seen. \n\n9) Added: analysis of strictly bigger genes list ( 154  ALS related genes) from https:\/\/alsod.ac.uk\/ \n\n9.1) We see correlation are much higher than for random data or even for random subset of genes from our dataset.\nThat suggests that this subset is not kind of random.\n\n9.2) Top genes by predictive power - OPTN HNRNPA2B1 have RocAuc on second task about 65 which is of order 3* std of random,\nwhich is not bad evidence that it makes sense. (OPTN is marked as \"Definitive ALS gene\" on site above, while HNRNPA2B1 as \"Tenuous\".\n\n9.3) Moreover these genes are highly (anti)-correlated with other known ALS genes: FUS, NEFL and with each other - yet another evidence.\n\n9.4) Top 3 - NIPA1  - marked \"Strong evidence\" - strongly (anti)-correlated with NEFL,OPTN - which are known to be related to ALS, also 0.37 correlated with SOD1 - definitive ALS, and 0.68 with SOD2 - tenous , while SOD1,SOD2 are correlated and by definition related.\nNIPA1 - is the best predict for bulbar_vs_limb.\n\n9.5) ANXA11 - 'Definite ALS' (and also schizophrenia ) - is highly correlated with many other relevant genes  like NEFL,KIF5A.\nIt seems kind of heart of the high correlation cluster. \n\n\n\nPSPS\n\n\nhttps:\/\/en.wikipedia.org\/wiki\/Amyotrophic_lateral_sclerosis\n\nhttps:\/\/en.wikipedia.org\/wiki\/Amyotrophic_lateral_sclerosis_research\n\nhttps:\/\/en.wikipedia.org\/wiki\/Genetics_of_amyotrophic_lateral_sclerosis\n\n\n\n-------------------\n\nVersion 10: mild updates - from 154 genes some are not or very poorly expressed in current data - probably should be excluded.\n\nVersion 9: Added: analysis of strictly bigger genes list ( 154  ALS related genes) from https:\/\/alsod.ac.uk\/ \n\nVersion 8: Added: Dimensional reductions PCA, UMAP and visualization\n\nVersion 7: Added: information on genes with mygene package \n\nVersion 6:  Added: Selected genes correlation analysis\n\nVersion 5: Added: selected genes list and checked their roc_auc\n\n\nNot mentioned version - only cosmetic changes. \n","24e12e6d":"# NEFL gene and other genes known from literature  (see bigger list below)\n\nRemark. Here we look on list of genes from wikipedia+- , in the subsequent section on greate list from https:\/\/alsod.ac.uk\/\n\n\nFrom challenge introduction: \n\"The C9orf72, SOD1, TARDBP, and FUS genes are key to the normal functioning of motor neurons and other cells.\"\n\nSee table https:\/\/en.wikipedia.org\/wiki\/Genetics_of_amyotrophic_lateral_sclerosis\nbut it seems to be not quite complete, even information on  the same page in history section about NEFH is not table (!).\n\n\nhttps:\/\/en.wikipedia.org\/wiki\/Genetics_of_amyotrophic_lateral_sclerosis#History\n\nThe first gene to be associated with ALS was SOD1, which was identified in 1993. It was the first time that linkage analysis was successful in identifying the genetic cause of a rare neurodegenerative disorder.[6] SOD1 is one of the most common genes associated with ALS, accounting for about 12% of fALS and 1-2% of sALS. The second gene, NEFH, was identified in 1994, followed by SETX in 1998, ALS2 in 2001, DCTN1 in 2003, and CHMP2B in 2006. All of these genes are fairly rare; the next major ALS gene, TARDBP, was identified in 2008 and accounts for 4% of fALS and 1% of sALS. FUS was identified in 2009 and is seen in 4% of fALS and 1% of sALS. VCP was identified in 2010 and accounts for 1% of fALS and 1% of sALS; ATXN2, OPTN, and UBQLN2 were associated with ALS that same year.[2]\n\nAnother major milestone was the discovery of C9orf72 in 2011, which is the most common gene associated with ALS, accounting for about 40% of fALS cases and 7% of sALS cases. C9orf72 was also found to contribute significantly to frontotemporal dementia (FTD). SQSTM1 was also identified in 2011, but accounts for 1% of fALS and less than 1% of sALS. PFN1 was identified in 2012, HNRNPA1 and HNRNPA2B1 in 2013, CHCHD10, MATR3, and TUBA4A in 2014, and TBK1 in 2015. C21orf2, CCNF, and NEK1 were associated with ALS in 2016.[2]\n\nThe first genome-wide association study (GWAS) of ALS was published in 2007, and 14 GWASs total had been published through 2013. They have contributed significantly to our understanding of ALS genetics; for example, a 2010 GWAS studying ALS in Finland led to discovery of the role of mutations at the C9orf72 locus in ALS. However, a gene identified by a single GWAS may not actually be associated with ALS, especially if the cohort size is small. In outbred populations, thousands of cases (people with ALS) and controls (people without ALS) are required for a GWAS to have sufficient statistical power to confidently identify a gene's association with ALS.[6]"}}