{"cell_type":{"e71b564c":"code","0d315b3c":"code","967dc949":"code","fc17f6b8":"code","c480a342":"code","cd0066dc":"code","0298bb1c":"code","d5a1465f":"code","eea8f32e":"code","c95ba3c9":"code","083e6cb4":"code","75057b62":"code","92f5e570":"code","15bae66d":"code","f730ddf9":"code","0e365352":"code","8ab4a18f":"code","29ced853":"code","e015a28b":"code","09e7ade7":"code","188055f0":"code","d5e78ccf":"code","7d5e3d7e":"code","d60e79b7":"code","8b92d348":"code","8979df66":"code","434ed9a9":"code","5f8c9c90":"code","db56f519":"code","71fa62a0":"code","7e9c1cae":"code","57818caf":"code","ddf3b4c8":"code","4cc67775":"code","88a52da5":"code","b4cd2c86":"code","c9c08822":"code","9d722919":"code","0f8b8bce":"code","e28f95b2":"code","961ce7e4":"code","399bd77f":"code","98cb669b":"code","98300cb2":"code","f0f1eb4a":"code","c2b7c683":"code","b47b9900":"code","ace98800":"markdown","c02caa25":"markdown","4be4edce":"markdown","e1ec75b0":"markdown","104126fc":"markdown","fa5a9084":"markdown","b06a2c3c":"markdown","363c8797":"markdown","ff1ba720":"markdown","b0454b6d":"markdown","8f05af9c":"markdown"},"source":{"e71b564c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d315b3c":"df=pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf.sample(5)","967dc949":"df.drop('customerID',axis=1,inplace=True)\ndf.dtypes","fc17f6b8":"df.TotalCharges.values","c480a342":"df.MonthlyCharges.values","cd0066dc":"pd.to_numeric(df.TotalCharges,errors='coerce').isnull()","0298bb1c":"df[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]","d5a1465f":"df[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()].shape","eea8f32e":"df.shape","c95ba3c9":"df1=df[df.TotalCharges!=' ']\ndf1.shape","083e6cb4":"df1.dtypes","75057b62":"df1.TotalCharges=pd.to_numeric(df1.TotalCharges)","92f5e570":"df1.TotalCharges.dtypes","15bae66d":"tenure_churn_no=df1[df1.Churn=='No'].tenure\ntenure_churn_yes=df1[df1.Churn=='Yes'].tenure\nplt.xlabel('tenure')\nplt.ylabel('Number of Customers')\nplt.title('Customer Churn Prediction')\nplt.hist([tenure_churn_yes,tenure_churn_no],color=['green','red'],label=['Churn=Yes','churn=no'])\nplt.legend()","f730ddf9":"mc_churn_no = df1[df1.Churn=='No'].MonthlyCharges      \nmc_churn_yes = df1[df1.Churn=='Yes'].MonthlyCharges      \n\nplt.xlabel(\"Monthly Charges\")\nplt.ylabel(\"Number Of Customers\")\nplt.title(\"Customer Churn Prediction Visualiztion\")\n\nblood_sugar_men = [113, 85, 90, 150, 149, 88, 93, 115, 135, 80, 77, 82, 129]\nblood_sugar_women = [67, 98, 89, 120, 133, 150, 84, 69, 89, 79, 120, 112, 100]\n\nplt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green','red'],label=['Churn=Yes','Churn=No'])\nplt.legend()","0e365352":"def print_unique_col_values(df):\n       for column in df:\n            if df[column].dtypes=='object':\n                print(f'{column}: {df[column].unique()}')","8ab4a18f":"print_unique_col_values(df1)","29ced853":"df1.replace('No internet service','No',inplace=True)\ndf1.replace('No phone service','No',inplace=True)","e015a28b":"print_unique_col_values(df1)","09e7ade7":"yes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',\n                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']\nfor col in yes_no_columns:\n    df1[col].replace({'Yes': 1,'No': 0},inplace=True)","188055f0":"for col in df1:\n    print(f'{col}: {df1[col].unique()}')","d5e78ccf":"df1['gender'].replace({'Female':1,'Male':0},inplace=True)","7d5e3d7e":"df1.gender.unique()","d60e79b7":"cols=['InternetService','Contract','PaymentMethod']\ndf2 = pd.get_dummies(data=df1, columns=cols)\ndf2.columns","8b92d348":"df2.sample(5)","8979df66":"df2.dtypes","434ed9a9":"cols_to_scale = ['tenure','MonthlyCharges','TotalCharges']\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ndf2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])","5f8c9c90":"for col in df2:\n    print(f'{col}: {df2[col].unique()}')","db56f519":"X = df2.drop('Churn',axis='columns')\ny = df2['Churn']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=5)","71fa62a0":"X_train.shape","7e9c1cae":"X_test.shape","57818caf":"X_train[:10]","ddf3b4c8":"len(X_train.columns)","4cc67775":"import tensorflow as tf\nfrom tensorflow import keras\n\n\nmodel=keras.Sequential([\n    keras.layers.Dense(26,input_shape=(26,),activation='relu'),\n    keras.layers.Dense(15, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid')\n    \n])\n\nmodel.compile(optimizer='adam',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])\nmodel.fit(X_train,y_train,epochs=100)","88a52da5":"model.evaluate(X_test,y_test)","b4cd2c86":"yp=model.predict(X_test)\nyp[:5]","c9c08822":"y_test[:5]","9d722919":"y_pred=[]\nfor el in yp:\n    if el>0.5:\n        y_pred.append(1)\n    else:\n        y_pred.append(0)","0f8b8bce":"y_pred[:10]","e28f95b2":"from sklearn.metrics import confusion_matrix , classification_report\n\nprint(classification_report(y_test,y_pred))","961ce7e4":"import seaborn as sn\ncm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)\n\nplt.figure(figsize = (10,7))\nsn.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","399bd77f":"y_test.shape","98cb669b":"round((876+204)\/(876+204+204+123),2)\n","98300cb2":"round(876\/(876+204),2)","f0f1eb4a":"round(204\/(204+123),2)","c2b7c683":"round(876\/(876+123),2)","b47b9900":"round(204\/(204+204),2)","ace98800":"**Train test split**","c02caa25":"**Recall for 1 class**","4be4edce":"\n**Many of the columns are yes, no etc. Let's print unique values in object columns to see data values**","e1ec75b0":"**Build a model (ANN) in tensorflow\/keras**","104126fc":"**Recall for 0 class**","fa5a9084":"**Precision for 0 class. i.e. Precision for customers who did not churn**","b06a2c3c":"**One hot encoding for categorical columns**","363c8797":"**Convert Yes and No to 1 or 0**","ff1ba720":"**Precision for 1 class. i.e. Precision for customers who actually churned**","b0454b6d":"**Some of the columns have no internet service or no phone service, that can be replaced with a simple No**","8f05af9c":"**Accuracy**"}}