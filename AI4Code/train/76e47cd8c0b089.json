{"cell_type":{"c295b49d":"code","c106f747":"code","08126fb5":"code","a283c0c8":"code","666e9041":"code","3f81badd":"code","c197c85a":"code","691348c1":"code","1e48129e":"code","975ddd3e":"code","993f04f5":"code","486964fc":"code","875baae6":"code","4634b025":"code","bcac6b68":"code","7eeefd0e":"code","6efb22a5":"code","9698b280":"code","971d55f2":"code","f4a476a7":"code","304c3774":"code","b8edc323":"code","555b8235":"code","7f72bad0":"code","71569858":"code","a101daf4":"code","94ca988b":"code","aa53f636":"code","c33da8a0":"code","9f7bccc5":"code","6dcb35f9":"code","91770965":"code","9ec16115":"code","45102ab4":"code","aa3e6397":"code","f306bef7":"code","2bf181b2":"code","749e2283":"code","12022e10":"code","55a99ef8":"code","e1647081":"code","70af1329":"code","9287c2fb":"code","e2be0feb":"code","4effd6b3":"code","07b57c46":"code","b614353b":"code","26c49a45":"code","2ef87669":"code","435290d3":"code","317d20d2":"code","ab189c11":"code","a9a43f50":"code","9a137fae":"code","73067705":"code","423bb106":"code","0ece15db":"code","4fbb7c97":"code","34e4a523":"code","9b544105":"code","170cfe1a":"code","d4b536b2":"code","67b0e2c6":"code","99edbb02":"code","009127cf":"code","1c2bf9c5":"code","c4c6ae1e":"code","aecf05b3":"markdown","bc28fc99":"markdown","6910bdfb":"markdown","6f180a07":"markdown","e9c59ab2":"markdown","f11f75fd":"markdown","0ab4d5a4":"markdown","6ff7b204":"markdown","ee49b92b":"markdown","8b2e07c4":"markdown","f89dcf0f":"markdown","e2dcdf20":"markdown","c346576c":"markdown","419f1e43":"markdown","e4745aad":"markdown","56f4c04a":"markdown","558bd300":"markdown","e1dde94a":"markdown","dd6663ed":"markdown","5f8ded50":"markdown","035b91b2":"markdown","17476d21":"markdown","da6e411f":"markdown","aea1a66e":"markdown","3d64ab47":"markdown","6512884e":"markdown","a74b0f47":"markdown","adcb157c":"markdown","67d34d0b":"markdown","3fdc7572":"markdown","64bd86bb":"markdown","617ebe95":"markdown","0d06bd30":"markdown","40b45494":"markdown","b94f1ae2":"markdown","12d6f6c2":"markdown","9f375373":"markdown","14172144":"markdown","1a35b76d":"markdown","7f44bfcc":"markdown","bcbd023d":"markdown","2a9b6a41":"markdown","87e89fe8":"markdown","2f3ea292":"markdown","c90ac2bc":"markdown","1cb9cdec":"markdown","39c36ef0":"markdown","b86d93aa":"markdown","f0488555":"markdown","25f8543e":"markdown","593adf22":"markdown","410c7f86":"markdown","02bc92c4":"markdown","d10716a7":"markdown","47539b97":"markdown","872a7101":"markdown","e01009aa":"markdown","0dfd92b2":"markdown","f68b37ea":"markdown","1ca635b8":"markdown","c76ea86e":"markdown","f3fba131":"markdown","61af73c1":"markdown","566a70a2":"markdown","e99ad772":"markdown","fef6dc32":"markdown","6db6f648":"markdown","c7a0e594":"markdown","b20588da":"markdown","062b5a66":"markdown","eff33d5b":"markdown","39a254ce":"markdown"},"source":{"c295b49d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\nfrom wordcloud import WordCloud\nfrom uszipcode import SearchEngine\n\n\n%matplotlib inline","c106f747":"dateparse = lambda x: datetime.utcfromtimestamp(int(x)).strftime('%Y-%m-%d %H:%M:%S')\n\nrating_df = pd.read_csv('..\/input\/u.data', sep='\\t', \n                        names=['user_id', 'movie_id', 'rating', 'timestamp'], \n                        parse_dates=['timestamp'], \n                        date_parser=dateparse)\n\nmovie_df = pd.read_csv('..\/input\/u.item', sep='|', encoding='latin-1',\n                    names=['movie_id', 'movie_title', 'release_date', 'video_release_date', 'imdb_url', 'unknown', 'action', \n                           'adventure', 'animation', 'childrens', 'comedy', 'crime', 'documentary', 'drama', 'fantasy', \n                           'film_noir', 'horror', 'musical', 'mystery', 'romance', 'sci_fi', 'thriller', 'war', 'western'])\n\nuser_df = pd.read_csv('..\/input\/u.user', sep='|', encoding='latin-1',\n                     names=['user_id', 'age', 'gender', 'occupation', 'zip_code'])","08126fb5":"movie_df.sample(10)","a283c0c8":"movie_df.info()","666e9041":"movie_df.sample(6)","3f81badd":"movie_df.describe()","c197c85a":"movie_df.release_date = pd.to_datetime(movie_df.release_date)","691348c1":"def check_nan_percent(df):\n    columns_null_count = df.isnull().sum()\n    null_percent_df = pd.DataFrame({'null_percent': (columns_null_count\/df.shape[0])*100, 'total_null': columns_null_count})\n    return null_percent_df[null_percent_df.null_percent>0]","1e48129e":"check_nan_percent(movie_df)","975ddd3e":"movie_df.drop(columns=['video_release_date', 'imdb_url'], inplace=True)\nmovie_df.release_date.fillna(value=movie_df.release_date.mode()[0], inplace=True)\n\ncheck_nan_percent(movie_df)","993f04f5":"rating_df.info()","486964fc":"rating_df.sample(6)","875baae6":"rating_df.describe()","4634b025":"check_nan_percent(rating_df)","bcac6b68":"user_df.info()","7eeefd0e":"user_df.sample(6)","6efb22a5":"search = SearchEngine(simple_zipcode=True)\nuser_df['city'] = user_df.zip_code.apply(lambda zip: search.by_zipcode(zip).major_city)","9698b280":"user_df.describe()","971d55f2":"check_nan_percent(user_df)","f4a476a7":"user_df[user_df.city.isnull()]","304c3774":"user_df.city.fillna(value=user_df.city.mode()[0], inplace=True)","b8edc323":"user_df['age_group'] = user_df.age.apply(lambda age: 'Gradeschooler' if 5<=age<=12 else ('Teenager' if 13<=age<=19 else ('Young' if 20<=age<=35 else ('Midlife' if 35<=age<=55 else 'Old'))))\nuser_df.sample(5)","555b8235":"rating_user_df = rating_df.join(other=user_df, how='inner', on='user_id', lsuffix='_R')\nrating_user_movie_df = rating_user_df.join(other=movie_df, how='inner', on='movie_id', rsuffix='_M')\nrating_movie_df = rating_df.join(other=movie_df, how='inner', on='movie_id', rsuffix='_M')","7f72bad0":"generes = ['unknown', 'action',\n       'adventure', 'animation', 'childrens', 'comedy', 'crime', 'documentary',\n       'drama', 'fantasy', 'film_noir', 'horror', 'musical', 'mystery',\n       'romance', 'sci_fi', 'thriller', 'war', 'western']\n\nplt.figure(figsize=(12,7))\ngenere_counts = movie_df.loc[:,generes].sum().sort_values(ascending=False)\nsns.barplot(x=genere_counts.index, y=genere_counts.values)\nplt.xticks(rotation=60);","71569858":"plt.figure(figsize=(12,7))\nyearly_release_counts = movie_df.groupby(movie_df.release_date.dt.year).size().sort_values(ascending=False)\nsns.lineplot(yearly_release_counts.index, yearly_release_counts.values);\nplt.xlabel('Release Year');","a101daf4":"plt.figure(figsize=(12,7))\nmonthly_release_counts = movie_df[movie_df.release_date.dt.year > 1990].groupby(movie_df.release_date.dt.month).size()\nsns.barplot(['jan', 'feb', 'mar', 'apr', 'may', 'june', 'july', 'aug', 'sept', 'oct', 'nov', 'dec'], monthly_release_counts.values);\nplt.xlabel('Release Month');","94ca988b":"plt.figure(figsize=(12,7))\nweekday_release_counts = movie_df[movie_df.release_date.dt.year > 1990].groupby(movie_df.release_date.dt.dayofweek).size()\nsns.barplot(['mon', 'tue', 'wed', 'thus', 'fri', 'sat', 'sun'], weekday_release_counts.values);\nplt.xlabel('Release Day of Week');","aa53f636":"plt.figure(figsize=(9,6))\nsns.barplot(user_df.groupby('gender').size().index, user_df.groupby('gender').size().values)\nplt.title('Male\/Female movie rating ratio');","c33da8a0":"plt.figure(figsize=(9,6))\nsns.barplot(user_df.groupby('age_group').size().index, user_df.groupby('age_group').size().values)\nplt.title('movie watchers age_group wise');","9f7bccc5":"plt.figure(figsize=(12,7))\nmovie_watcher_occupants = user_df.groupby('occupation').size().sort_values(ascending=False)\nsns.barplot(movie_watcher_occupants.index, movie_watcher_occupants.values)\nplt.title('movie watchers age_group wise')\nplt.xticks(rotation=50);","6dcb35f9":"pd.DataFrame(user_df.groupby(['occupation', 'age_group']).size().sort_values(ascending=False))","91770965":"temp_df = rating_user_movie_df.groupby('gender').sum().loc[:,generes]\ntemp_df = temp_df.transpose()\ntemp_df","9ec16115":"plt.figure(figsize=(12, 6))\n\ntemp_df.M.sort_values(ascending=False).plot(kind='bar', color='teal', label=\"Male\")\ntemp_df.F.sort_values(ascending=False).plot(kind='bar', color='black', label=\"Fe-Male\")\nplt.legend()\nplt.xticks(rotation=60)\nplt.show()","45102ab4":"plt.figure(figsize=(12, 6))\nm_temp_df = temp_df.M.sort_values(ascending=False)\nf_temp_df = temp_df.F.sort_values(ascending=False)\n\nplt.bar(x=m_temp_df.index, height=m_temp_df.values, label=\"Male\", align=\"edge\", width=0.3, color='teal')\nplt.bar(x=f_temp_df.index, height=f_temp_df.values, label=\"Female\", width=0.3, color='black')\nplt.legend()\nplt.xticks(rotation=60)\nplt.show()","aa3e6397":"rating_df.groupby(rating_df.timestamp.dt.year).size()","f306bef7":"rating_user_df.groupby([rating_user_df.timestamp.dt.year, 'gender']).size()","2bf181b2":"rating_user_df.groupby([rating_user_df.timestamp.dt.year, 'age_group']).size()","749e2283":"temp_df = rating_user_df.groupby(['gender', 'rating']).size()\nplt.figure(figsize=(10, 5))\nm_temp_df = temp_df.M.sort_values(ascending=False)\nf_temp_df = temp_df.F.sort_values(ascending=False)\n\nplt.bar(x=m_temp_df.index, height=m_temp_df.values, label=\"Male\", align=\"edge\", width=0.3, color='teal')\nplt.bar(x=f_temp_df.index, height=f_temp_df.values, label=\"Female\", width=0.3, color='black')\nplt.title('Ratings given by Male\/Female Viewers')\nplt.legend()\nplt.xlabel('Ratings')\nplt.ylabel('Count')\nplt.show()","12022e10":"def draw_horizontal_movie_bar(movie_titles, ratings_count, title=''):\n    plt.figure(figsize=(12, 7))\n    sns.barplot(y=movie_titles, x=ratings_count, orient='h')\n    plt.title(title)\n    plt.ylabel('Movies')\n    plt.xlabel('Count')\n    plt.show()","55a99ef8":"top_ten_rated_movies = rating_movie_df.groupby('movie_id').size().sort_values(ascending=False)[:10]\ntop_ten_movie_titles = movie_df.iloc[top_ten_rated_movies.index].movie_title\n\ndraw_horizontal_movie_bar(top_ten_movie_titles.values, top_ten_rated_movies.values, 'Top 10 watched movies')","e1647081":"top_rated_movies_gender_wise = rating_user_movie_df.groupby(['gender','movie_id']).size()\n\nfor index_label in top_rated_movies_gender_wise.index.get_level_values(0).unique():\n\n    top_10_userkind_rated_movies = top_rated_movies_gender_wise[index_label].sort_values(ascending=False)[:10]\n    top_10_userkind_rated_movie_titles = movie_df.iloc[top_10_userkind_rated_movies.index].movie_title\n    draw_horizontal_movie_bar(top_10_userkind_rated_movie_titles.values, top_10_userkind_rated_movies.values, f'Top 10 {index_label} watched movies')","70af1329":"top_rated_movies_age_group_wise = rating_user_movie_df.groupby(['age_group','movie_id']).size()\n\nfor index_label in top_rated_movies_age_group_wise.index.get_level_values(0).unique():\n    top_10_userkind_rated_movies = top_rated_movies_age_group_wise[index_label].sort_values(ascending=False)[:10]\n    top_10_userkind_rated_movie_titles = movie_df.iloc[top_10_userkind_rated_movies.index].movie_title\n    draw_horizontal_movie_bar(top_10_userkind_rated_movie_titles.values, top_10_userkind_rated_movies.values, f'Top 10 {index_label} watched movies')","9287c2fb":"top_ten_most_loved_movies = rating_movie_df.groupby('movie_id').sum().rating.sort_values(ascending=False)[:10]\ntop_ten_most_loved_movie_titles = movie_df.iloc[top_ten_most_loved_movies.index].movie_title\n\ndraw_horizontal_movie_bar(top_ten_most_loved_movie_titles.values, top_ten_most_loved_movies.values, 'Top 10 most loved movies')","e2be0feb":"most_loved_movies_gender_wise = rating_user_movie_df.groupby(['gender','movie_id']).sum().rating\n\nfor index_label in most_loved_movies_gender_wise.index.get_level_values(0).unique():\n\n    top_10_userkind_loved_movies = most_loved_movies_gender_wise[index_label].sort_values(ascending=False)[:10]\n    top_10_userkind_loved_movie_titles = movie_df.iloc[top_10_userkind_loved_movies.index].movie_title\n    draw_horizontal_movie_bar(top_10_userkind_loved_movie_titles.values, top_10_userkind_loved_movies.values, f'Top 10 {index_label} loved movies')","4effd6b3":"most_loved_movies_age_group_wise = rating_user_movie_df.groupby(['age_group','movie_id']).sum().rating\n\nfor index_label in most_loved_movies_age_group_wise.index.get_level_values(0).unique():\n    top_10_userkind_loved_movies = top_rated_movies_age_group_wise[index_label].sort_values(ascending=False)[:10]\n    top_10_userkind_loved_movie_titles = movie_df.iloc[top_10_userkind_loved_movies.index].movie_title\n    draw_horizontal_movie_bar(top_10_userkind_loved_movie_titles.values, top_10_userkind_loved_movies.values, f'Top 10 {index_label} loved movies')","07b57c46":"movies_ratings_sum = rating_user_movie_df.groupby('movie_id').sum().rating.sort_values()\nmovies_ratings_sum.index = movie_df.iloc[movies_ratings_sum.index].movie_title\n# Will show movies with 0 < total_rating<= 10\nlowest_rated_movies = movies_ratings_sum[movies_ratings_sum <= 10]\n\n\nwordcloud = WordCloud(min_font_size=7, width=800, height=500, random_state=21, max_font_size=50, relative_scaling=0.5, colormap='Dark2')\n# Substracted lowest_rated_movies from 11 so that we can have greater font size of least rated movies.\nwordcloud.generate_from_frequencies(frequencies=(11-lowest_rated_movies).to_dict())\nplt.figure(figsize=(16,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","b614353b":"# rating_df\n# movie_df\n# user_df","26c49a45":"rating_df.columns, ","2ef87669":"top_users_g = rating_df.groupby('user_id')['rating'].count()\ntop_users = top_users_g.sort_values(ascending=False)[:15]\ntop_movies_g = rating_df.groupby('movie_id')['rating'].count()\ntop_movies = top_movies_g.sort_values(ascending=False)[:15]\ntop_users_movies = rating_df.join(top_users, rsuffix='_r', how='inner', on='user_id')\ntop_users_movies = top_users_movies.join(top_movies, rsuffix='_r', how='inner', on='movie_id')","435290d3":"rating_df.shape, top_users_movies.shape","317d20d2":"top_users_movies.user_id.unique(), top_users_movies.movie_id.unique()","ab189c11":"top_users_df = user_df[user_df.user_id.isin(top_users_movies.user_id.unique())]\ntop_movies_df = movie_df[movie_df.movie_id.isin(top_users_movies.movie_id.unique())]\ntop_movies_df","a9a43f50":"pd.crosstab(top_users_movies.user_id, top_users_movies.movie_id, top_users_movies.rating, aggfunc=np.sum)","9a137fae":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder","73067705":"user_enc = LabelEncoder()\nrating_df['user'] = user_enc.fit_transform(rating_df['user_id'].values)\nn_users = rating_df['user'].nunique()\n\nitem_enc = LabelEncoder()\nrating_df['movie'] = item_enc.fit_transform(rating_df['movie_id'].values)\nn_movies = rating_df['movie'].nunique()\n\nrating_df['rating'] = rating_df['rating'].values.astype(np.float32)\n\nmin_rating = min(rating_df['rating'])\nmax_rating = max(rating_df['rating'])\n\nn_users, n_movies, min_rating, max_rating","423bb106":"# train\/test split\nX = rating_df[['user', 'movie']].values\ny = rating_df['rating'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\nX_train.shape, y_train.shape, X_test.shape, y_test.shape","0ece15db":"# deciding on number of factors\nn_factors = 50","4fbb7c97":"# separating user and movie lists\nX_train_array = [X_train[:, 0], X_train[:, 1]]\nX_test_array = [X_test[:, 0], X_test[:, 1]]","34e4a523":"from keras.models import Model\nfrom keras.layers import Input, Reshape, Dot\nfrom keras.layers.embeddings import Embedding\nfrom keras.optimizers import Adam\nfrom keras.regularizers import l2","9b544105":"def RecommenderV1(n_users, n_movies, n_factors):\n    # building user input\n    user = Input(shape=(1,))\n    user_embed = Embedding(n_users, n_factors, embeddings_initializer='he_normal',\n                  embeddings_regularizer=l2(1e-6))(user)\n    user_embed = Reshape((n_factors,))(user_embed)\n    \n    # building movie input\n    movie = Input(shape=(1,))\n    movie_embed = Embedding(n_movies, n_factors, embeddings_initializer='he_normal',\n                  embeddings_regularizer=l2(1e-6))(movie)\n    movie_embed = Reshape((n_factors,))(movie_embed)\n    \n    # putting together user and movie input\n    x = Dot(axes=1)([user_embed, movie_embed])\n    model = Model(inputs=[user, movie], outputs=x)\n    opt = Adam(lr=0.001)\n    model.compile(loss='mean_squared_error', optimizer=opt)\n\n    return model\n\n\nmodel = RecommenderV1(n_users, n_movies, n_factors)\nmodel.summary()","170cfe1a":"history = model.fit(x=X_train_array, y=y_train, \n                    batch_size=64, epochs=5, \n                    verbose=1, validation_data=(X_test_array, y_test))","d4b536b2":"from keras.layers import Add, Activation, Lambda","67b0e2c6":"class EmbeddingLayer:\n    def __init__(self, n_items, n_factors):\n        self.n_items = n_items\n        self.n_factors = n_factors\n    \n    def __call__(self, x):\n        x = Embedding(self.n_items, self.n_factors, embeddings_initializer='he_normal',\n                      embeddings_regularizer=l2(1e-6))(x)\n        x = Reshape((self.n_factors,))(x)\n        return x","99edbb02":"def RecommenderV2(n_users, n_movies, n_factors, min_rating, max_rating):\n    user = Input(shape=(1,))\n    u = EmbeddingLayer(n_users, n_factors)(user)\n    ub = EmbeddingLayer(n_users, 1)(user)\n\n    movie = Input(shape=(1,))\n    m = EmbeddingLayer(n_movies, n_factors)(movie)\n    mb = EmbeddingLayer(n_movies, 1)(movie)\n\n    x = Dot(axes=1)([u, m])\n    x = Add()([x, ub, mb])\n    x = Activation('sigmoid')(x)\n    x = Lambda(lambda x: x * (max_rating - min_rating) + min_rating)(x)\n    model = Model(inputs=[user, movie], outputs=x)\n    opt = Adam(lr=0.001)\n    model.compile(loss='mean_squared_error', optimizer=opt)\n    return model","009127cf":"model = RecommenderV2(n_users, n_movies, n_factors, min_rating, max_rating)\nmodel.summary()","1c2bf9c5":"# Let's retrain \nhistory = model.fit(x=X_train_array, y=y_train, \n                    batch_size=64, epochs=5,\n                    verbose=1, validation_data=(X_test_array, y_test))","c4c6ae1e":"There is a slight improvement, we can still apply more enhancements in our network to get a much better model.","aecf05b3":"####      <a id='QD3c'>gender wise<\/a>","bc28fc99":"### <a id='QB3'>Which kind of occupant watches more movies?<\/a>","6910bdfb":"From above dataframe it is clear that Young students are more interested in movies. After that Midelife people in any profession seems interested too.","6f180a07":"Cool","e9c59ab2":"### <a id='QC3'>Are movie lover's increasing over time<\/a>","f11f75fd":"####      <a id='QD2d'>age group wise<\/a>","0ab4d5a4":"perfect, we don't have any missing value.","6ff7b204":"### <a id='QB2'>What age group watches more movies?<\/a>","ee49b92b":"Male, of course ;)\nor may be mostly Male takes interest in rating movies.","8b2e07c4":"Ratings record drastically came down after applying top-n user and movie filters. Let's check what these movies and users are:","f89dcf0f":"Observations:\n    1. Everything seems all ok.","e2dcdf20":"### <a id='QD3'>Most Loved Movies<\/a>","c346576c":"The user\/movie fields are currently non-sequential integers representing some unique ID for that entity. We need them to be sequential starting at zero","419f1e43":"####      <a id='QD2c'>gender wise<\/a>","e4745aad":"### Exploring rating_df","56f4c04a":"37 zip codes can not be converted to city names. Lets check these records","558bd300":"### <a id='QA1'>What are common genere of movies?<\/a>","e1dde94a":"Obviously Gradeschoolers and Teenagers don't have that much of time and old people don't have much interestest. Youngesters are the ones who watches movies mostly and prefers rating them. So overall people from age 20 - 55 watches more movies.","dd6663ed":"this is weird, rated movie rlease count in Jan month is too high as cmpare to other months. Dataset creators must have considered Jan 1st as the default release month and date.","5f8ded50":"### <a id='QD1'>How much rating people give mostly.<\/a>","035b91b2":"Building and training a simple Neural Network:","17476d21":"__QA. From movie_df -__\n   1. [What are common genere of movies?](#QA1)\n   2. [How many movies got released each year and month?](#QA2)\n   3. [What is the prefferable week of month to release movies?](#QA3)\n\n__QB. From movie_df -__\n   1. [Who watches more movies Men\/Women?](#QB1)\n   2. [What age group watches more movies?](#QB2)\n   3. [Which kind of occupant watches more movies?](#QB3)\n    \n__QC. From movie_df + user_df -__\n   1. [What gender likes which kind of genere](#QC1)\n   2. [What age group watches which kind of movies?](#QC2)\n   3. [Are movie lover's increasing over time](#QC3)\n      1. [Overall](#QC3a)\n      2. [Gender wise](#QC3b)\n      3. [Age group wise](#QC3c)\n\n__QD. From movie_df + user_df + rating_df__\n   1. [How much rating people give mostly.](#QD1)\n   2. [Most Rated Movies](#QD2)\n      1. [during all years](#QD2a)\n      3. [gender wise](#QD2c)\n      4. [age group wise](#QD2d)\n   3. [Most Loved Movies](#QD3)\n      1. [during all years](#QD3a)\n      3. [gender wise](#QD3c)\n      4. [age group wise](#QD3d)\n   4. [Worst movie as per user rating.](QD4)","da6e411f":"Zip codes can be converted to city names, let's do that, and later we can use it for some additional analysis.","aea1a66e":"### <a id='QB1'>Who watches more movies Men\/Women?<\/a>","3d64ab47":"### <a id=\"QA2\">How many movies got released each year and month?<\/a>","6512884e":"**Adding a sigmoid layer** and scaling the output between the valid rating range i.e. 1-5","a74b0f47":"Multi Car Chart - ","adcb157c":"To be honest, I haven't watched most of these movies so not quite sure what movie contains what kind of storyline :>","67d34d0b":"####      <a id='QD2a'>during all years<\/a>","3fdc7572":"#### Check missing values","64bd86bb":"Looks cool.. isn't it.","617ebe95":"### <a id='QD2'>Most Rated Movies<\/a>","0d06bd30":"####      <a id='QC3b'>Gender wise<\/a>","40b45494":"Viewers gave mostly 4 start rating then 3 and then 5","b94f1ae2":"Well.. all I can say is I am not amazed.","12d6f6c2":"### <a id='QD4'>Worst movies as per user rating.<\/a>","9f375373":"### Checkout NaN values percent in each column","14172144":"####      <a id='QC3c'>Age group wise<\/a>","1a35b76d":"### <a id=\"QA3\">What is the prefferable week of month to release movies?<\/a>","7f44bfcc":"### Exploring 'item_df' - ","bcbd023d":"It appears that Students watches more movies, may be the ones who are above 20 means Young students. Irony is that people who are in entertainment don't watch or may rate movies. Lets explore it bit more.","2a9b6a41":"In all these cases zip codes seems invalid. Again removing these records completely will bring inconsistency, so better we fill these value with mode of the column.","87e89fe8":"Since there is not much record available for movies before 90s, so I will consider release count for months in 90s only.`","2f3ea292":"## Finding Insight - ","c90ac2bc":"If you notice at various places, we have used word age group, which is not already there, so lets go ahead and create one additional categorical feature in user_df called __age_group__. Minimum age is 7 and maximum age is 73 so we should have following divisions:\n\n* 5-12   -  Gradeschooler\n* 13-19  -  Teenager\n* 20-35  -  Young\n* 35-55  -  Midlife\n* above 55    -  Old","1cb9cdec":"Lets also create joined DataFrames, they will be helpful later.","39c36ef0":"#release significantly increased after 80s, however it doesn't exactly depicts the actual number of release, but the number of rated release, actual number of release must be far greater than what we have. Anyway, one thing is clear that people mostly watched movies released in 90s. There is a sudden fall in 1998's record, that might be because of incomplete record.","b86d93aa":"####      <a id='QD3d'>age group wise<\/a>","f0488555":"This trend seems fine. Mostly rated movies got released on Friday, and then on weekends.","25f8543e":"Clearly video_release_date contains nothing and imdb_url is of no use, lets remove them. In release_date we have only null value, if we remove entire row, then it will cost us one missing movie_id which is not good. So lets fill it with mode value of same column, since this approach is not gonna harm much.","593adf22":"Stacked Bar Chart-","410c7f86":"I believe the best way to do that is by asking usefull questions from dataset, and not moving forward till you get the answers.","02bc92c4":"We don't have enough record in ratings dataset :\/","d10716a7":"####      <a id='QC3a'>Overall<\/a>","47539b97":"### <a id='QC1'>What gender likes which kind of genere<\/a>","872a7101":"There is a slight improvement, we can still apply more enhancements in our network to get a much better model.","e01009aa":"####      <a id='QD3a'>during all years<\/a>","0dfd92b2":"Hi guys, Exploratory Data Analysis(EDA) is all about getting insight from datasets, and if this process is followed properly then we get some really good understanding of the features and distributions we have. In depth EDA certainly results in outstanding Feature Engineering which eventually leaves heavy impact on model performance.\n\n**Update:** I've added a simple recommendation model using Keras, later we'll do more improvisation.\n\nThis is a random exercise that I have performed. Here I've used 100K movie rating's older dataset provided by Movie Lens (https:\/\/grouplens.org\/datasets\/movielens\/) but If you want, you can use 1M dataset as well.","f68b37ea":"It's not a bad result, considering the simplicty of our network. Let's do few improvements:","1ca635b8":"So this is it in this EDA, I have covered most of the questions that could be asked from this dataset except the ones related to user locations(zip codes), we can generate some insight from those as well, like \n- Is there any pattern in location and movie choices?\n- What kind of occupats are residing in which place?\n- Whether place has any impact on users being soft rater and hard rater etc.\n\nWill do that later ;)","c76ea86e":"drama and comedy are the most common genere type. We must also note that it can not be a clear indication of people's preference, because One movie can have more than one genere and drama is the most commor genere type.","f3fba131":"### <a id='QC2'>What age group watches which kind of movies?<\/a>","61af73c1":"### Importing Libraries and reading datasets","566a70a2":"### Exploring user_df","e99ad772":"**Improvising embedding layer:** Add a bias term to each of the embeddings","fef6dc32":"#### Check missing values","6db6f648":"We have rating record for only two years. Which is not enought for this observation.","c7a0e594":"Yearly release","b20588da":"We don't have enough record in ratings dataset :\/","062b5a66":"Observations:\n    1. video_release_date seems containing lots of NaN values.\n    2. release_date needs to be parsed to datetime.\n    3. imdb_url contains external links which is not usefull here anyways.","eff33d5b":"Mostly movies are same for all user kinds, may be because of limited record we have in our ratings dataset","39a254ce":"Top movies picked by top users:"}}