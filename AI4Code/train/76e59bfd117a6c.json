{"cell_type":{"987c7cfa":"code","ddbda31e":"code","2859e0cc":"code","3e04cbf4":"code","9c086582":"code","77b7b61a":"code","81575d5b":"code","cf27e2de":"code","ac060199":"code","bb8205b2":"code","4fb14cf4":"code","59fff3b3":"code","7d019e8c":"code","aa05788b":"code","8df438b7":"code","1a63605b":"code","e9567cb2":"code","34d3c1fe":"code","bdedeee6":"code","2a121770":"code","f0379b99":"code","5ce902c6":"code","eaa65e45":"markdown","5ba6d7dc":"markdown","707f65d8":"markdown","bcd2cda5":"markdown","30035372":"markdown","07f63dfb":"markdown","7dcd33a6":"markdown","2d0005c3":"markdown"},"source":{"987c7cfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ddbda31e":"X_full = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id')\nX_full_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')","2859e0cc":"X_full.head()","3e04cbf4":"X_full.info()","9c086582":"X_full = X_full.select_dtypes(exclude=['object'])\nX_full_test = X_full_test.select_dtypes(exclude=['object'])","77b7b61a":"X_full.info()","81575d5b":"X_full_test.info()","cf27e2de":"X = X_full.drop(['SalePrice'], axis=1)\ny = X_full.SalePrice\nX_test = X_full_test\n# y = f(X)","ac060199":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.impute import SimpleImputer","bb8205b2":"imp_mean = SimpleImputer(strategy='mean')\nX= imp_mean.fit_transform(X)","4fb14cf4":"X_train, X_val, y_train, y_val = train_test_split(X, y, train_size=0.8, random_state=3)","59fff3b3":"X_test = imp_mean.transform(X_test)","7d019e8c":"house_prices_model = DecisionTreeRegressor(random_state=0)","aa05788b":"house_prices_model.fit(X_train,y_train)","8df438b7":"val_predictions = house_prices_model.predict(X_val)","1a63605b":"from sklearn.metrics import mean_squared_error","e9567cb2":"mean_squared_error(y_val, val_predictions, squared=False)","34d3c1fe":"X_full.describe().SalePrice","bdedeee6":"test_predictions = house_prices_model.predict(X_test)","2a121770":"test_predictions","f0379b99":"output = pd.DataFrame({'Id': X_full_test.index,\n                      'SalePrice': test_predictions})\noutput.set_index('Id', inplace=True)\noutput.to_csv('submission.csv')","5ce902c6":"output.describe()","eaa65e45":"## Treinando uma \u00c1rvore de Decis\u00e3o","5ba6d7dc":"# Introdu\u00e7\u00e3o ao Aprendizado de M\u00e1quina","707f65d8":"## Excluindo vari\u00e1veis categ\u00f3ricas","bcd2cda5":"Nessa aula iremos treinar nosso modelo baseline, ignorando vari\u00e1veis categ\u00f3ricas, sem sele\u00e7\u00e3o das malhores features e sem otimiza\u00e7\u00e3o de par\u00e2metros. Essa implemennta\u00e7\u00e3o servir\u00e1 como nosso primeiro exerc\u00edcio pr\u00e1tico de modelagem e tamb\u00e9m nos oferecer\u00e1 uma refer\u00eancia para as pr\u00f3ximas aulas em que faremos melhorias na modelagem.","30035372":"## Criando arquivo de submiss\u00e3o","07f63dfb":"## Avaliando o modelo","7dcd33a6":"## Carregando os dados","2d0005c3":"## Substitui\u00e7\u00e3o de valores ausentes"}}