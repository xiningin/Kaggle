{"cell_type":{"c41d2018":"code","5466a1dc":"code","e30452f1":"code","a9ffb753":"code","68252447":"code","c90951cf":"code","826a67f8":"code","f193ef24":"code","79996868":"code","0e9a5289":"code","65a7760c":"code","fd9040c0":"code","8e2b4749":"code","28cd5f09":"code","63e16910":"code","63e22276":"code","e07dec11":"code","29df9662":"code","f1dd6e0b":"code","83d5c3b3":"code","39f6a77b":"code","770c2132":"code","a5098762":"code","935c2d26":"code","54128712":"code","abf00cdf":"code","c766547a":"code","224d5bf9":"code","02ded70a":"code","1b1d00f7":"code","562cc101":"code","7cec0edf":"code","4b489008":"code","2ad9797a":"markdown","29beef9a":"markdown","c624122b":"markdown","93fddf71":"markdown","7b260acc":"markdown","c815ae3c":"markdown","e400fe37":"markdown","babb5315":"markdown","608357ae":"markdown","cfa8a514":"markdown","14832a24":"markdown","0a13ffa9":"markdown","d2689ff4":"markdown","2d890f89":"markdown","b73a8664":"markdown"},"source":{"c41d2018":"import os\nprint(os.listdir(\"..\/input\/amazon-employee-access-challenge\/\"))","5466a1dc":"#Load the training dataset and importing basic packages\nimport pandas as pd\nimport numpy as np\ntrainDf = pd.read_csv('..\/input\/amazon-employee-access-challenge\/train.csv')\ntestDf = pd.read_csv('..\/input\/amazon-employee-access-challenge\/test.csv')","e30452f1":"#Observing how first five rows look like of train dataset\ntrainDf.head()","a9ffb753":"#Observing test dataset\ntestDf.head()","68252447":"#Check the different columns and types of train Dataset\ntrainDf.dtypes","c90951cf":"#Check the different columns and types of test Dataset\ntestDf.dtypes","826a67f8":"#Checking volume of train dataset\ntrainDf.shape","f193ef24":"#Checking volume of test dataset\ntestDf.shape","79996868":"#Check the null values \ntrainDf.isna().sum()","0e9a5289":"for i in trainDf.columns:\n    print(i, trainDf[i].nunique())","65a7760c":"num_cont, num_desc = [],[]\nfor i in trainDf.columns:\n    if trainDf[i].nunique() > 350:\n        num_cont.append(i)\n    else:\n        num_desc.append(i)\nprint(num_cont)\nprint(num_desc)","fd9040c0":"len(list(trainDf.columns))","8e2b4749":"#Checking what kind of value does the Resource Column have\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfor i in trainDf.var().index:\n    sns.distplot(trainDf[i],kde=False)\n    plt.show()","28cd5f09":"plt.figure(figsize=(20,10))\nsns.heatmap(trainDf.corr())","63e16910":"#importing the Libraries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom xgboost import XGBClassifier","63e22276":"#Setting Y and X \ny=trainDf['ACTION']\nx=trainDf.drop('ACTION',axis=1)","e07dec11":"#Split data set into into train and test\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=43)","29df9662":"#Display the shape of the train and test datasets\nprint(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","f1dd6e0b":"#Which are models used for the classifier\nmodels=[DecisionTreeClassifier(),RandomForestClassifier(),BaggingClassifier(),XGBClassifier(),]","83d5c3b3":"#import libraries for confusion matrix and accuracy score\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfinal_accuracy_scores=[]\n#Iterate each model\nfor i in models:\n    dt=i\n    #Make the model suitable for X_train and Y_train\n    dt.fit(X_train,y_train)\n    #Predict the test dataset\n    dt.predict(X_test)\n    dt.predict(X_train)\n    print('Model used for predicting')\n    print(i)\n    print(\"Confusion matrix of test dataset\")\n    print(confusion_matrix(y_test,dt.predict(X_test)))\n    print('Accuracy Score of test dataset')\n    print(accuracy_score(y_test,dt.predict(X_test)))\n    print(confusion_matrix(y_train,dt.predict(X_train)))\n    print(accuracy_score(y_train,dt.predict(X_train)))\n    final_accuracy_scores.append([i,confusion_matrix(y_test,dt.predict(X_test)),accuracy_score(y_test,dt.predict(X_test)),confusion_matrix(y_train,dt.predict(X_train)),accuracy_score(y_train,dt.predict(X_train))])\n    from sklearn.model_selection import cross_val_score\n    #Crossfold Validation score for each model\n    print(cross_val_score(i,X_train,y_train,cv=10))\n    print('**************************************************************************************************')\n    ","39f6a77b":"for i in range(len(final_accuracy_scores)):\n    a= final_accuracy_scores[i]\n    #Sensitivity of the model\n    cMatrix = a[1]\n    #Sensitivity = True Positive Rate = TP\/(TP+FN)--(Condition positive)\n    Sensitivity = cMatrix[0][0]\/(cMatrix[0][0]+cMatrix[1][0])\n    #Specificity = True Negative Rate = TN\/(FP+TN)-- Condition Negative\n    Specificity = cMatrix[1][1]\/(cMatrix[1][1]+cMatrix[0][1])\n    print(a[0])\n    print(\"Sensitivity of Model \", Sensitivity)\n    print(\"Specificity of Model\", Specificity)","770c2132":"#Check the test dataset 2 rows\ntestDf.head(2)","a5098762":"#Drop the column id\ntestx = testDf.drop(['id'],axis=1)","935c2d26":"#Using the Bagging Classifier model as providing good a accuracy\nmodel = BaggingClassifier()\nmodel.fit(x,y)\n","54128712":"#Predicting the test data\ntesty=model.predict(testx)","abf00cdf":"#Getting the test data in the series\nAction = pd.Series(testy)","c766547a":"#Combine the id and action to show the results\nresults = pd.DataFrame({'id':testDf['id'],'Action':Action})","224d5bf9":"#Storing the results in the file\nresults.to_csv(\"Submission.csv\",index=False)","02ded70a":"results.shape","1b1d00f7":"results.shape[0]-trainDf.shape[0]","562cc101":"from xgboost import XGBClassifier","7cec0edf":"from catboost import CatBoostClassifier","4b489008":"catboost.CatBoostClassifier","2ad9797a":"# Test Data Submission Result","29beef9a":"# Creation of base dataset","c624122b":"# Problem definition:\nThe data consists of real historical data collected from 2010 & 2011.  Employees are manually allowed or denied access to resources over time. You must create an algorithm capable of learning from this historical data to predict approval\/denial for an unseen set of employees.\n<img src=\"Amazon.jpg\"\/>\n","93fddf71":"# Pre Processing","7b260acc":"## Outlier treatment ","c815ae3c":"## BiVariate Analysis","e400fe37":"# Model Building","babb5315":"<p>Above all models I found RandomTreeClassifier as having better prediction accuracy score. So I will be using RandomTreeClassifier<\/p>","608357ae":"train.csv - The training set. Each row has the ACTION (ground truth), RESOURCE, and information about the employee's role at the time of approval\n\ntest.csv - The test set for which predictions should be made.  Each row asks whether an employee having the listed characteristics should have access to the listed resource.\n\n<table><thead><td>Column Name<\/td><td>Column Description<\/td><\/thead>\n    <tr><td>ACTION<\/td>\t<td>ACTION is 1 if the resource was approved, 0 if the resource was not<\/td><\/tr>\n<tr><td>RESOURCE<\/td>\t<td>An ID for each resource<\/td><\/tr>\n<tr><td>MGR_ID<\/td>\t<td>The EMPLOYEE ID of the\u00a0manager of the current EMPLOYEE\u00a0ID record; an employee\u00a0may have only one manager\u00a0at a time<\/td><\/tr>\n<tr><td>ROLE_ROLLUP_1<\/td>\t<td>Company role grouping category\u00a0id 1 (e.g. US Engineering)<\/td><\/tr>\n<tr><td>ROLE_ROLLUP_2<\/td>\t<td>Company role grouping category\u00a0id 2 (e.g. US Retail)<\/td><\/tr>\n<tr><td>ROLE_DEPTNAME<\/td>\t<td>Company role department description (e.g. Retail)<\/td><\/tr>\n<tr><td>ROLE_TITLE<\/td>\t<td>Company role business title description (e.g. Senior Engineering\u00a0Retail Manager)<\/td><\/tr>\n<tr><td>ROLE_FAMILY_DESC<\/td>\t<td>Company role family extended\u00a0description (e.g. Retail Manager,\u00a0Software Engineering)<\/td><\/tr>\n<tr><td>ROLE_FAMILY<\/td>\t<td>Company role family description (e.g. Retail Manager)<\/td><\/tr>\n<tr><td>ROLE_CODE<\/td>\t<td>Company role code; this code\u00a0is unique to each role (e.g. Manager)<\/td><\/tr>\n<\/table>","cfa8a514":"## Null value treatment ","14832a24":"<img src='ConfusionMatrix.png' \/>","0a13ffa9":"## Univariate analysis (EDA) ","d2689ff4":"## Supervised","2d890f89":" ### Classification","b73a8664":"## Memory management "}}