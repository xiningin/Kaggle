{"cell_type":{"860519d0":"code","3e615036":"code","6c224916":"code","dd738198":"code","cba1fc50":"code","6ed8397e":"code","57879ee9":"code","598c45e2":"code","0318a496":"code","905c9420":"code","362a184e":"code","3b11cd7d":"code","baed43eb":"code","d80f588e":"code","99f71fad":"code","0af6b006":"code","16b170c4":"code","8d71df5f":"code","5eb6cc1b":"code","db502baa":"code","2d6862d9":"code","fa73bf21":"code","c6a9292d":"code","d21edefc":"code","5e22b655":"code","eee57e51":"code","135ee15e":"code","8c60c24e":"code","47ceab5c":"code","bf310dac":"code","1a653232":"code","116f73b0":"code","37aec5e6":"code","c3965bd7":"code","b1ba96fc":"markdown","6686d03c":"markdown","5a915ad6":"markdown","e481ed36":"markdown","d06b2072":"markdown","4b48d0fb":"markdown","66283df4":"markdown","431a519f":"markdown","319f7949":"markdown","72b6dfbd":"markdown","cdc346f4":"markdown","24e66a2a":"markdown","a0b4cd86":"markdown"},"source":{"860519d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e615036":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport sklearn.metrics as metrics\nimport os","6c224916":"data = pd.read_csv('\/kaggle\/input\/pizza-price-prediction\/pizza_v2.csv')","dd738198":"data.head()","cba1fc50":"data.isnull().sum()","6ed8397e":"data.describe","57879ee9":"data.info()","598c45e2":"data.head()","0318a496":"data['price_rupiah'] = data['price_rupiah'].apply(lambda x : x.replace(\"Rp\",\"\").replace(\",\",\"\"))\n# remove rp and comma and store it in new price column\ndata['diameter'] = data['diameter'].apply(lambda x : x.replace(\" inch\",\"\"))\n#remove inch and store it in new column","905c9420":"data.head()","362a184e":"data[\"diameter\"] = data[\"diameter\"].astype(float)\ndata[\"price_rupiah\"] = data[\"price_rupiah\"].astype(float)","3b11cd7d":"data.info()","baed43eb":"data.head()","d80f588e":"data['topping'].unique()","99f71fad":"data['variant'].unique()","0af6b006":"data['size'].unique()","16b170c4":"data['extra_sauce'].unique()","8d71df5f":"data['extra_cheese'].unique()","5eb6cc1b":"data['extra_mushrooms'].unique()","db502baa":"en = LabelEncoder()\ncatCols = ['company','topping','variant','size','extra_sauce','extra_cheese','extra_mushrooms']\nfor cols in catCols:\n    data[cols] = en.fit_transform(data[cols])","2d6862d9":"data.head()","fa73bf21":"data.info()","c6a9292d":"Y = data[\"price_rupiah\"]\nX = data.drop(\"price_rupiah\",axis = 1)","d21edefc":"X.head()","5e22b655":"Y.head()","eee57e51":"Y=pd.DataFrame(Y)","135ee15e":"Y.head()","8c60c24e":"# Break off validation set from training data\nX_train_full, X_valid_full, Y_train, Y_valid = train_test_split(X, Y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)","47ceab5c":"X_train_full.head()","bf310dac":"Y_train.head()","1a653232":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n# Define the model\nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.09) \n\n# Fit the model\nmodel.fit(X_train_full, Y_train) \n\n# Get predictions\npredictions = model.predict(X_valid_full) \n\n# Calculate MAE\nmae = mean_absolute_error(predictions, Y_valid)\nprint(\"Mean Absolute Error:\" , mae)\n\n#Calculating R2\nr2 =  metrics.r2_score(Y_valid, predictions)\nprint(\"R2 score :\", r2)","116f73b0":"predictions=pd.DataFrame(predictions)","37aec5e6":"predictions.head()","c3965bd7":"# Define the model\nmodel2 = XGBRegressor(n_estimators=1000, learning_rate=0.01,max_depth=10) \n\n# Fit the model\nmodel2.fit(X_train_full, Y_train) \n\n# Get predictions\npredictions2 = model2.predict(X_valid_full) \n\n# Calculate MAE\nmae2 = mean_absolute_error(predictions2, Y_valid)\nprint(\"Mean Absolute Error:\" , mae2)\n\n#Calculating R2\nr22 =  metrics.r2_score(Y_valid, predictions2)\nprint(\"R2 score :\", r22)","b1ba96fc":"### No Missing Values","6686d03c":"# Test-Train Split","5a915ad6":"### Checking for categories under each categorical feature\n","e481ed36":"# Reading the Dataset","d06b2072":"### Convering Object data like Price and Diameter to numerical ","4b48d0fb":"### Encoding categorical features","66283df4":"# Analyzing Preparing the Dataset","431a519f":"# XGB Regressor","319f7949":"# Importing Necessary Libraries","72b6dfbd":"### Whole dataset is in numerical form now!!\n### \n### \n","cdc346f4":"# Improved XGB egressor","24e66a2a":"# Splitting into X and Y","a0b4cd86":"### All object values"}}