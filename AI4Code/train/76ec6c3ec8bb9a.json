{"cell_type":{"58062d4a":"code","0cb2d045":"code","9bdc7f8b":"code","4f1b85e4":"code","29447936":"code","2f398670":"code","b4e42b3c":"code","3a97f7f9":"code","b5f1c641":"markdown","3d52db6d":"markdown"},"source":{"58062d4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0cb2d045":"import pandas as pd\n\ndata = pd.read_csv('\/kaggle\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')\ndata.head()","9bdc7f8b":"# Let's split our data \n# raw data\ntest = data.iloc[0:100,:]\ntrain = data.iloc[100:3082,:]","4f1b85e4":"from sklearn.feature_extraction.text import TfidfVectorizer\nimport re\nimport nltk\n\ndef preprocessor(content):\n    content = content.lower()\n    content = re.sub(r'[^\\w]', ' ', content)\n    _stemmer = nltk.stem.porter.PorterStemmer()\n    stopword = nltk.corpus.stopwords.words('english')\n    token = nltk.tokenize.word_tokenize(content)\n    new_content = \"\"\n    for x in token:\n        if x not in stopword:\n            new_content += _stemmer.stem(x)+' '\n    return new_content[:-1]\n\ndef transform(data,vectorizer = None):\n    if not vectorizer:\n        vectorizer = TfidfVectorizer(preprocessor=preprocessor, tokenizer=nltk.tokenize.word_tokenize)\n        processedData = vectorizer.fit_transform(data)\n    else:\n        processedData = vectorizer.transform(data)\n    return processedData, vectorizer\n\ntrain_data, vectorizer = transform(train['text'])","29447936":"from sklearn.decomposition import TruncatedSVD\n\n# our LSA model\nlsa_model = TruncatedSVD(n_components=15)\nlsa_model.fit(train_data)","2f398670":"# Show important terms of each latent topic\nprint('important terms of each latent topic')\nterms = vectorizer.get_feature_names()\nfor i, comp in enumerate(lsa_model.components_):\n    terms_comp = zip(terms, comp)\n    sorted_terms = sorted(terms_comp, key= lambda x:x[1], reverse=True)[:15]\n    print(\"Topic \"+str(i)+\": \",end=\"\")\n    for t in sorted_terms:\n        print(t[0],end=\" \")\n    print(\"\")","b4e42b3c":"#Show 5 documents of each latent topic\ndef print_samples(y,data):\n    for level in set(y):\n        print('Topic :',level)\n        try:\n            sample_data = data.iloc[y == level].sample(n=5)['text']\n        except:\n            sample_data = data.iloc[y == level].content.values\n        for sample in sample_data:\n            print('\\t-',sample)\n        print('-----------------------------\\n\\n')","3a97f7f9":"topic_matrix = lsa_model.transform(train_data)\ny = np.argmax(topic_matrix,axis=1)\nprint('5 training sample documents from each latent topic')\nprint_samples(y,train)","b5f1c641":"# LSA Model","3d52db6d":"# Import our data"}}