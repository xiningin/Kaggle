{"cell_type":{"ccb4385b":"code","2e8336a3":"code","9b802241":"code","c09e5ccd":"code","12deed11":"code","82ebb226":"code","e06f22c4":"code","e13ef6e6":"code","b7eead53":"code","f82f4c85":"code","ee0d7657":"code","5ed53d10":"code","b9fe29dd":"code","b90d550b":"code","542d6032":"code","a6dcf774":"code","2f12ebbc":"code","a105b90f":"code","846c2954":"code","9d501f96":"code","87ca94fc":"code","fec657a3":"code","f6a3b869":"code","82048509":"code","747d0cd4":"code","406754e7":"code","c96e8306":"code","49725869":"code","c1e8a8d0":"code","343ef45a":"code","ec01cbde":"code","c3020399":"code","2d9156b5":"code","ed036a47":"code","d12869bb":"code","997d2f1a":"code","3b0d80fd":"code","7d965f0a":"code","d8fa7af6":"code","aca39bda":"code","37380655":"code","3ddb8bcf":"code","191f41a1":"code","11c57c06":"code","6980408c":"code","efa6bf85":"code","50b9e5be":"code","a01864e4":"code","b23d9970":"code","1b6ab9ff":"code","b1677731":"markdown","dd15bcb3":"markdown","251d8b57":"markdown","507ecce1":"markdown","9f6de172":"markdown","3c230a91":"markdown","b0f95ba5":"markdown","01416dfa":"markdown"},"source":{"ccb4385b":"import numpy as np\nimport pandas as pd","2e8336a3":"import time\nimport warnings\nwarnings.simplefilter(action = 'ignore')","9b802241":"from sklearn.metrics import accuracy_score, precision_score, recall_score","c09e5ccd":"from matplotlib import pyplot as plt\nimport seaborn as sns","12deed11":"# transform prediction from string to table\ndef transform_prediction_to_table(df):\n    prediction = pd.DataFrame(index = ['patientId', 'confidence', 'x', 'y', 'width', 'height'])\n\n    for _, row in df.iterrows():\n        # all except 'NAN'\n        if len(str(row['PredictionString'])) > 3:\n            row_array = row['PredictionString'].strip().split(' ')\n            for i in range(int(len(row_array) \/ 5)):\n                prediction[prediction.shape[1]] = [row['patientId'], row_array[i * 5]] + \\\n                                                  [b for b in row_array[i * 5 + 1 : i * 5 + 5]]\n        else:\n            prediction[prediction.shape[1]] = [row['patientId'], -1, -1, -1, -1, -1]\n\n    prediction = prediction.T\n    prediction['confidence'] = prediction['confidence'].astype(float)\n    prediction['x'] = prediction['x'].astype(int)\n    prediction['y'] = prediction['y'].astype(int)\n    prediction['width'] = prediction['width'].astype(int)\n    prediction['height'] = prediction['height'].astype(int)\n    \n    prediction.replace(-1, np.nan, inplace = True)\n    return prediction","82ebb226":"# helper function to calculate IoU\n# based on kernel https:\/\/www.kaggle.com\/chenyc15\/mean-average-precision-metric\ndef iou(box1, box2):\n    x11, y11, w1, h1 = list(map(int, box1))\n    x21, y21, w2, h2 = list(map(int, box2))\n    assert w1 * h1 > 0\n    assert w2 * h2 > 0\n    x12, y12 = x11 + w1, y11 + h1\n    x22, y22 = x21 + w2, y21 + h2\n\n    area1, area2 = w1 * h1, w2 * h2\n    xi1, yi1, xi2, yi2 = max([x11, x21]), max([y11, y21]), min([x12, x22]), min([y12, y22])\n    \n    if xi2 <= xi1 or yi2 <= yi1:\n        return 0\n    else:\n        intersect = (xi2 - xi1) * (yi2 - yi1)\n        union = area1 + area2 - intersect\n        return intersect \/ union","e06f22c4":"# calculate a single IoU metric, based on masks, for two table's rows with boxes, associated with one patientId\ndef mask_iou(boxes_true, boxes_pred):\n    mask_true = np.zeros((1024, 1024))\n    mask_pred = np.zeros((1024, 1024))\n    \n    for _, box in boxes_true.iterrows():\n        x1 = int(box['x'])\n        y1 = int(box['y'])\n        x2 = x1 + int(box['width'])\n        y2 = y1 + int(box['height'])\n        mask_true[y1 : y2, x1 : x2] = 1\n\n    for _, box in boxes_pred.iterrows():\n        x1 = int(box['x'])\n        y1 = int(box['y'])\n        x2 = x1 + int(box['width'])\n        y2 = y1 + int(box['height'])\n        mask_pred[y1 : y2, x1 : x2] = 1\n\n    mask_i = mask_true * mask_pred\n    mask_u = mask_true + mask_pred - mask_i\n    \n    return float(sum(sum(mask_i))) \/ sum(sum(mask_u))","e13ef6e6":"# calculate Mean Average Precision IoU metric for two table's rows with boxes, associated with one patientId\n# based on kernel https:\/\/www.kaggle.com\/chenyc15\/mean-average-precision-metric\ndef map_iou(boxes_true, boxes_pred, thresholds = [.4, .45, .5, .55, .6, .65, .7, .75]):\n    \n    # According to the introduction, images with no ground truth bboxes will not be \n    # included in the map score unless there is a false positive detection (?)\n        \n    # return None if both are empty, don't count the image in final evaluation (?)\n    if (boxes_true.shape[0] == 0) and (boxes_pred.shape[0] == 0):\n        return None\n    \n    # [x, y, w, h] for boxes_true\n    # [confidence, x, y, w, h] for boxes_pred\n    assert (boxes_true.shape[1] == 4 and boxes_pred.shape[1] == 5), 'Boxes shape error'\n    \n    # sort boxes_pred by scores in decreasing order\n    boxes_pred = boxes_pred.sort_values('confidence', ascending = False)\n    \n    map_total = 0\n    \n    # loop over thresholds\n    for t in thresholds:\n        matched_bt = set()\n        tp, fn = 0, 0\n        for i, bt in boxes_true.iterrows():\n            matched = False\n            for j, bp in boxes_pred.iterrows():\n                miou = iou(bt, bp[1:])\n                if miou >= t and not matched and j not in matched_bt:\n                    matched = True\n                    tp += 1 # bt is matched for the first time, count as TP\n                    matched_bt.add(j)\n            if not matched:\n                fn += 1 # bt has no match, count as FN\n                \n        fp = boxes_pred.shape[0] - len(matched_bt) # FP is the bp that not matched to any bt\n        m = tp \/ (tp + fn + fp)\n        map_total += m\n    \n    return map_total \/ len(thresholds)","b7eead53":"# calculate different metrics and aggregated values for one prediction\ndef get_table_for_one_prediction(df_pred, labels = None):\n    # get values for one patient's boxes\n    def get_evals(boxes):\n        if boxes.shape[0] > 0:\n            area_sum = 0\n            area_min = 1e7\n            area_max = 0\n            area_cnt = 0\n            for j, row in boxes.iterrows():\n                area = row['width'] * row['height']\n                area_sum += area\n                area_cnt += 1\n                if area < area_min:\n                    area_min = area\n                if area > area_max:\n                    area_max = area\n            return [int(area_cnt > 0), area_cnt, area_sum, area_min, area_max, float(area_sum) \/ area_cnt]\n        else:\n            return [0] * 6\n    \n    if labels is None:\n        # create table for test prediction\n        res = pd.DataFrame(index = ['pred_target', 'pred_cnt', 'pred_area_sum', 'pred_area_min', \n                                    'pred_area_max', 'pred_area_mean'])\n    \n        for patientId in df_pred['patientId'].unique():\n            pred_boxes = df_pred[df_pred['patientId'] == patientId][['confidence', 'x', 'y', 'width', 'height']].dropna()\n            res[patientId] = get_evals(pred_boxes)\n    else:\n        # create table for train prediction\n        res = pd.DataFrame(index = ['mask_iou', 'map_iou', \n                'true_target', 'true_cnt', 'true_area_sum', 'true_area_min', 'true_area_max', 'true_area_mean',\n                'pred_target', 'pred_cnt', 'pred_area_sum', 'pred_area_min', 'pred_area_max', 'pred_area_mean'])\n    \n        for patientId in labels['patientId'].unique():\n            pred_boxes = df_pred[df_pred['patientId'] == patientId][['confidence', 'x', 'y', 'width', 'height']].dropna()\n            true_boxes = labels[labels['patientId'] == patientId][['x', 'y', 'width', 'height']].dropna()\n            res[patientId] = [mask_iou(true_boxes, pred_boxes), map_iou(true_boxes, pred_boxes)] + \\\n                             get_evals(true_boxes) + get_evals(pred_boxes)\n    \n    return res.T","f82f4c85":"# calculate different metrics and aggregated values for all predictions\ndef get_table_for_all_predictions(prediction_files, labels = None):\n    if labels is None:\n        res = pd.DataFrame(index = ['LB_score_for_test', \n                              'max_cnt', 'mean_area_sum', 'mean_area_min', 'mean_area_max', 'mean_area_mean'])\n    else:\n        res = pd.DataFrame(index = ['LB_score_for_test', 'mean_map_iou', 'mean_mask_iou', \n                              'accuracy', 'precision_0', 'precision_1', 'recall_0', 'recall_1',\n                              'max_cnt', 'mean_area_sum', 'mean_area_min', 'mean_area_max', 'mean_area_mean'])\n\n    for key in prediction_files.keys():\n        print(key, time.ctime())\n        prediction_string = pd.read_csv(PREDICTIONS_FOLDER + key)\n        prediction = transform_prediction_to_table(prediction_string)\n        eval_table = get_table_for_one_prediction(prediction, labels)\n        \n        if labels is None:\n            # create table for test prediction\n            res[key] = [prediction_files[key], \n                 eval_table['pred_cnt'].max(), eval_table['pred_area_sum'].mean(), \n                 eval_table['pred_area_min'].mean(), eval_table['pred_area_max'].mean(), \n                 eval_table['pred_area_mean'].mean()]\n        else:\n            # create table for train prediction\n            res[key] = [prediction_files[key], \n                 eval_table['map_iou'].mean(), eval_table['mask_iou'].mean(), \n                 accuracy_score(eval_table['true_target'], eval_table['pred_target'])] + \\\n                 list(precision_score(eval_table['true_target'], eval_table['pred_target'], average = None)) + \\\n                 list(recall_score(eval_table['true_target'], eval_table['pred_target'], average = None)) + \\\n                [eval_table['pred_cnt'].max(), eval_table['pred_area_sum'].mean(), \n                 eval_table['pred_area_min'].mean(), eval_table['pred_area_max'].mean(), \n                 eval_table['pred_area_mean'].mean()]\n            \n    return res.T","ee0d7657":"PREDICTIONS_FOLDER = '..\/input\/rsna-predictions\/'","5ed53d10":"labels = pd.read_csv('..\/input\/rsna-pneumonia-detection-challenge\/stage_1_train_labels.csv')\nlabels.head()","b9fe29dd":"labels.shape","b90d550b":"# path_to_file: LB_score for test data, associated with this train data\ntrain_prediction_files = {\n    '1_prediction_train.csv': .093,\n    '2_prediction_train.csv': .106,\n    '3_prediction_train.csv': .113,\n    '4_prediction_train.csv': .119,\n    '5_prediction_train.csv': .124,\n    '6_prediction_train.csv': .129\n}","542d6032":"train_current_prediction = '6_prediction_train.csv'","a6dcf774":"prediction_string = pd.read_csv(PREDICTIONS_FOLDER + train_current_prediction)\nprediction_string.head()","2f12ebbc":"prediction_string.shape","a105b90f":"prediction = transform_prediction_to_table(prediction_string)\nprediction.head()","846c2954":"prediction.shape","9d501f96":"prediction['confidence'].min()","87ca94fc":"train_current_table = get_table_for_one_prediction(prediction, labels)\ntrain_current_table.head()","fec657a3":"train_current_table.describe()","f6a3b869":"plt.figure(figsize = (25, 5))\nplt.subplot(121)\nsns.boxplot(x = 'mask_iou', data = train_current_table);\nplt.subplot(122)\nsns.boxplot(x = 'map_iou', data = train_current_table);","82048509":"_, axes = plt.subplots(1, 2, sharey = True, figsize = (25, 5))\nsns.boxplot(x = 'true_target', y = 'pred_cnt', data = train_current_table, ax = axes[0]);\nsns.boxplot(y = 'true_cnt', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[1]);","747d0cd4":"_, axes = plt.subplots(1, 2, sharey = True, figsize = (25, 5))\nsns.boxplot(x = 'true_target', y = 'pred_area_sum', data = train_current_table, ax = axes[0]);\nsns.boxplot(y = 'true_area_sum', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[1]);","406754e7":"_, axes = plt.subplots(1, 2, sharey = True, figsize = (25, 5))\nsns.boxplot(x = 'true_target', y = 'pred_area_min', data = train_current_table, ax = axes[0]);\nsns.boxplot(y = 'true_area_min', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[1]);","c96e8306":"_, axes = plt.subplots(1, 2, sharey = True, figsize = (25, 5))\nsns.boxplot(x = 'true_target', y = 'pred_area_max', data = train_current_table, ax = axes[0]);\nsns.boxplot(y = 'true_area_max', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[1]);","49725869":"_, axes = plt.subplots(1, 2, sharey = True, figsize = (25, 5))\nsns.boxplot(x = 'true_target', y = 'pred_area_mean', data = train_current_table, ax = axes[0]);\nsns.boxplot(y = 'true_area_mean', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[1]);","c1e8a8d0":"all_train_predictions = get_table_for_all_predictions(train_prediction_files, labels)","343ef45a":"all_train_predictions","ec01cbde":"all_train_predictions.to_csv('all_train_predictions.csv')","c3020399":"all_train_predictions[['LB_score_for_test', 'mean_map_iou', 'mean_mask_iou']].plot(figsize = (10, 5));","2d9156b5":"all_train_predictions.corr()","ed036a47":"test_prediction_files = {\n    '1_prediction_test.csv': .093,\n    '2_prediction_test.csv': .106,\n    '3_prediction_test.csv': .113,\n    '4_prediction_test.csv': .119,\n    '5_prediction_test.csv': .124,\n    '6_prediction_test.csv': .129\n}","d12869bb":"test_current_prediction = '6_prediction_test.csv'","997d2f1a":"prediction_string = pd.read_csv(PREDICTIONS_FOLDER + test_current_prediction)\nprediction_string.head()","3b0d80fd":"prediction_string.shape","7d965f0a":"prediction = transform_prediction_to_table(prediction_string)\nprediction.head()","d8fa7af6":"prediction.shape","aca39bda":"prediction['confidence'].min()","37380655":"test_current_table = get_table_for_one_prediction(prediction)\ntest_current_table.head()","3ddb8bcf":"_, axes = plt.subplots(1, 3, sharey = True, figsize = (25, 5))\nsns.boxplot(y = 'pred_cnt', data = test_current_table, ax = axes[0]);\nsns.boxplot(y = 'pred_cnt', data = train_current_table, ax = axes[1]);\nsns.boxplot(y = 'true_cnt', data = train_current_table, ax = axes[2]);","191f41a1":"_, axes = plt.subplots(1, 3, sharey = True, figsize = (25, 5))\nsns.boxplot(y = 'pred_area_sum', data = test_current_table[test_current_table['pred_target'] == 1], ax = axes[0]);\nsns.boxplot(y = 'pred_area_sum', data = train_current_table[train_current_table['pred_target'] == 1], ax = axes[1]);\nsns.boxplot(y = 'true_area_sum', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[2]);","11c57c06":"_, axes = plt.subplots(1, 3, sharey = True, figsize = (25, 5))\nsns.boxplot(y = 'pred_area_min', data = test_current_table[test_current_table['pred_target'] == 1], ax = axes[0]);\nsns.boxplot(y = 'pred_area_min', data = train_current_table[train_current_table['pred_target'] == 1], ax = axes[1]);\nsns.boxplot(y = 'true_area_min', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[2]);","6980408c":"_, axes = plt.subplots(1, 3, sharey = True, figsize = (25, 5))\nsns.boxplot(y = 'pred_area_max', data = test_current_table[test_current_table['pred_target'] == 1], ax = axes[0]);\nsns.boxplot(y = 'pred_area_max', data = train_current_table[train_current_table['pred_target'] == 1], ax = axes[1]);\nsns.boxplot(y = 'true_area_max', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[2]);","efa6bf85":"_, axes = plt.subplots(1, 3, sharey = True, figsize = (25, 5))\nsns.boxplot(y = 'pred_area_mean', data = test_current_table[test_current_table['pred_target'] == 1], ax = axes[0]);\nsns.boxplot(y = 'pred_area_mean', data = train_current_table[train_current_table['pred_target'] == 1], ax = axes[1]);\nsns.boxplot(y = 'true_area_mean', data = train_current_table[train_current_table['true_target'] == 1], ax = axes[2]);","50b9e5be":"all_test_predictions = get_table_for_all_predictions(test_prediction_files)","a01864e4":"all_test_predictions","b23d9970":"all_test_predictions.to_csv('all_test_predictions.csv')","1b6ab9ff":"all_test_predictions.corr()","b1677731":"### Compare different predictions of test data","dd15bcb3":"## Functions for analysis","251d8b57":"## Analysis predictions of test data","507ecce1":"### Compare different predictions of train data","9f6de172":"# Analysis of train and test predictions","3c230a91":"### Calculate different evaluations for one prediction of train data","b0f95ba5":"### Calculate different evaluations for one prediction of test data","01416dfa":"## Analysis predictions of train data"}}