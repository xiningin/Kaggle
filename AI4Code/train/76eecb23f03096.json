{"cell_type":{"2abda974":"code","230fc427":"code","732f94f1":"code","763e4571":"code","974837af":"code","26888da5":"code","f3b6d65f":"code","a59a54ba":"code","64e0f55b":"code","5e089faa":"code","b39216b0":"code","4bf22833":"code","f9f6e367":"code","5f74a7ec":"code","43fd1c9c":"code","b408a1d5":"code","36ee2369":"code","71f15be9":"code","58691f26":"code","467b17e7":"code","c27efd03":"code","10d9437a":"code","208b9872":"code","784715cc":"code","6f334474":"code","09a8f7ed":"code","0425f5b8":"code","2c341e7e":"code","1d0795b0":"code","99265a30":"code","091165dd":"code","6e94b7eb":"code","0d5d522c":"markdown"},"source":{"2abda974":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\n%matplotlib inline","230fc427":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","732f94f1":"train.head()","763e4571":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","974837af":"matplotlib.rcParams['figure.figsize'] = (12.0, 6.0)\nprices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist()","26888da5":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","f3b6d65f":"all_data = pd.get_dummies(all_data)","a59a54ba":"#filling NA's with the mean of the column:\nall_data = all_data.fillna(all_data.mean())\nall_data","64e0f55b":"all_data.describe()","5e089faa":"sns.lineplot(data = all_data['LotArea'],label = \"Lot Area\")","b39216b0":"sns.barplot(x = all_data.index,y=all_data['LotFrontage'])","4bf22833":"#creating matrices for sklearn:\nX_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","f9f6e367":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 5))\n    return(rmse)","5f74a7ec":"model_ridge = Ridge()","43fd1c9c":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","b408a1d5":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Change in Root Mean Squared Error\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","36ee2369":"cv_ridge.min()","71f15be9":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)","58691f26":"rmse_cv(model_lasso).mean()","467b17e7":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)","c27efd03":"print(\"Lasso regularization selected \" + str(sum(coef != 0)) + \"variables and eliminated \" +  str(sum(coef == 0)) + \" variables\")","10d9437a":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","208b9872":"matplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")","784715cc":"#let's look at the residuals as well:\nmatplotlib.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","6f334474":"import xgboost as xgb","09a8f7ed":"\ndtrain = xgb.DMatrix(X_train, label = y)\ndtest = xgb.DMatrix(X_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)","0425f5b8":"model.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()","2c341e7e":"model_xgb = xgb.XGBRegressor(n_estimators=360, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.cv\nmodel_xgb.fit(X_train, y)","1d0795b0":"xgb_preds = np.expm1(model_xgb.predict(X_test))\nlasso_preds = np.expm1(model_lasso.predict(X_test))","99265a30":"predictions = pd.DataFrame({\"xgb\":xgb_preds, \"lasso\":lasso_preds})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","091165dd":"preds = 0.7*lasso_preds + 0.3*xgb_preds","6e94b7eb":"output = pd.DataFrame({\"id\":test.Id, \"SalePrice\":preds})\noutput.to_csv(\"ridge_sol.csv\", index = False)","0d5d522c":"The residual plot looks pretty good.To wrap it up let's predict on the test set and submit on the leaderboard:"}}