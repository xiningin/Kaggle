{"cell_type":{"74ee3a41":"code","87afccef":"code","b6caa953":"code","3d813c03":"code","c81c9993":"code","f93d4b77":"code","827c4497":"code","51eccbb5":"code","6b1371d6":"code","eb73aa49":"code","9dd75f5c":"code","e4958426":"code","6d17226b":"code","fec0bb00":"code","4d0660d8":"code","39bcb723":"code","192321d5":"code","90bbd539":"code","8e6c32d3":"code","5bc0c974":"code","828fe1aa":"code","b05138cf":"code","875b6b97":"code","0397c016":"code","312868c1":"code","3ae21679":"code","6cea8332":"code","1d919452":"code","28d8f305":"code","eec4453f":"code","302c5c27":"code","5fcee1bc":"code","fc0ff727":"code","f9cf7193":"code","b70a9480":"code","92b18970":"code","bccd746f":"code","c1ca2038":"code","8c81de8b":"code","c21a7c00":"code","8733d303":"code","ce223595":"code","8f1366de":"code","aa5e108b":"code","4cdf6ce1":"code","2e84a5a6":"markdown","53ebfd6d":"markdown","49bfeee0":"markdown","4912ec89":"markdown","27e944c9":"markdown","6fdb9977":"markdown","51e86678":"markdown","4882b3e6":"markdown","9341d744":"markdown","2b679531":"markdown","871cb532":"markdown","82eab15b":"markdown","765ff3dc":"markdown","a4556cd7":"markdown","cee6c12a":"markdown","f9bef66f":"markdown","ff20d9d3":"markdown","c1269092":"markdown","900fb063":"markdown","6df34c5b":"markdown","e3c7acb1":"markdown","1e6a8af9":"markdown","06202d82":"markdown","fa521b5d":"markdown","a652e3a5":"markdown","aedd1b29":"markdown","b712408d":"markdown","36bf2ed0":"markdown","bd75f8c1":"markdown","62b98982":"markdown","8cd6f705":"markdown","bbd3d0d8":"markdown","ebff1288":"markdown","6711f852":"markdown","73398af8":"markdown","34c4ed75":"markdown","acf53eae":"markdown","12cbcb4e":"markdown","588e73a5":"markdown","331c4057":"markdown","d96b07c9":"markdown","7397f2dd":"markdown"},"source":{"74ee3a41":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport datetime as dt\nimport seaborn as sns\nimport glob\nimport folium\nimport plotly.express as px\nimport plotly.graph_objs as go","87afccef":"all_file_names = glob.glob(\"..\/input\/air-quality-data-from-extensive-network-of-sensors\/*2017.csv\")\nall_file_names = sorted(all_file_names)\nfor counter, file in enumerate(all_file_names):\n    print(counter, file)","b6caa953":"jan = pd.read_csv(all_file_names[4])\nfeb = pd.read_csv(all_file_names[3])\nmar = pd.read_csv(all_file_names[7])\napr = pd.read_csv(all_file_names[0])\nmay = pd.read_csv(all_file_names[8])\njun = pd.read_csv(all_file_names[6])\njul = pd.read_csv(all_file_names[5])\naug = pd.read_csv(all_file_names[1])\nsep = pd.read_csv(all_file_names[11])\nocto = pd.read_csv(all_file_names[10])\nnov = pd.read_csv(all_file_names[9])\ndec = pd.read_csv(all_file_names[2])","3d813c03":"year = pd.concat([jan, feb, mar, apr, may, jun, jul, aug, sep, octo, nov, dec])","c81c9993":"sensors = pd.read_csv(\"..\/input\/air-quality-data-from-extensive-network-of-sensors\/sensor_locations.csv\")","f93d4b77":"most_urbaned_ids = [204, 189, 147, 181, 201, 211, 622, 176, 179]\nleast_urbaned_ids = [195, 169, 209, 212, 225, 263, 222, 203]\n\nm = folium.Map(location=[50.057748, 19.961375], tiles='Stamen Toner', zoom_start=12)\ntooltip = 'Check sensor id'\nfor id, sensor in sensors.iterrows():\n    color = 'blue'\n    if int(sensor.id) in most_urbaned_ids:\n        color = 'red'\n    elif int(sensor.id) in least_urbaned_ids:\n        color = 'green'\n    folium.Marker([sensor['latitude'], \n                   sensor['longitude']], \n                  popup='sensor_id {:d}'.format(int(sensor['id'])),\n                  icon=folium.Icon(color=color, icon='info-sign'),\n                  tooltip=tooltip).add_to(m)   \n\nm","827c4497":"temp_col = [col for col in year if 'temperature' in col or col.startswith('UTC time')]\nhumi_col = [col for col in year if 'humidity' in col or col.startswith('UTC time')]\npres_col = [col for col in year if 'pressure' in col or col.startswith('UTC time')]\npm25_col = [col for col in year if 'pm25' in col or col.startswith('UTC time')]\npm10_col = [col for col in year if 'pm10' in col or col.startswith('UTC time')]\npm1_col = [col for col in year if col.endswith('pm1') or col.startswith('UTC time')]","51eccbb5":"fig, ax = plt.subplots(figsize=(20, 20))\nax = sns.boxplot(data=year[temp_col], orient=\"h\")\n_ = plt.title(\"Temperature in 2017\", fontsize=16)\n_ = plt.ylabel(\"Sensor\")\n_ = plt.xlabel(\"Temperature\")\n_ = plt.show()","6b1371d6":"fig, ax = plt.subplots(figsize=(20, 20))\nax = sns.boxplot(data=year[humi_col], orient=\"h\")\n_ = plt.title(\"Humidity in 2017 - all sensors\", fontsize =16)\n_ = plt.ylabel(\"Sensor\")\n_ = plt.show()","eb73aa49":"negative_hum_194 = year[year['194_humidity']<0]\nnegative_hum_194['194_humidity'].count()","9dd75f5c":"year_humi_without194 = year[humi_col].drop(columns = ['194_humidity'])\n\nfig, ax = plt.subplots(figsize=(20, 20))\n\nax = sns.boxplot(data=year_humi_without194, orient=\"h\")\n_ = plt.title(\"Humidity without sensor 194\", fontsize=16)\n_ = plt.ylabel(\"Sensor\")\n_ = plt.axvline(100, color=\"red\")\n_ = plt.show()","e4958426":"year_var_humi = humi_col[1:]\nmelted_humi = pd.melt(year, id_vars=[\"UTC time\"], value_vars=year_var_humi, \n                      var_name='Sensor', value_name='Humi')\nhumi_above100 = melted_humi[melted_humi['Humi']>100]\nhumi_above100.count()","6d17226b":"def humi_correction(measurement):\n    if measurement <0:\n        return 50\n    elif measurement > 100:\n        return 50\n    else: return measurement\n    \nyear_var_humi = humi_col[1:]\nhumi_corrected = year[year_var_humi].applymap(humi_correction)","fec0bb00":"time_df = pd.DataFrame(data=year[\"UTC time\"])\nyear_humi_corrected = pd.concat([time_df, humi_corrected], axis=1)\nyear_corrected = pd.concat([year_humi_corrected, year[temp_col[1:]], year[pres_col[1:]], year[pm25_col[1:]], year[pm10_col[1:]], year[pm1_col[1:]]],axis=1)","4d0660d8":"fig, ax = plt.subplots(figsize=(20, 20))\nax = sns.boxplot(data=year[pm10_col], orient=\"h\")\n_ = plt.title(\"Observed concentrations of PM10 in 2017\", fontsize=16)\n_ = plt.axvline(20, color=\"orange\")\n_ = plt.axvline(40, color=\"red\")\n_ = plt.ylabel(\"Sensor\")\n_ = plt.show()","39bcb723":"sen_lab = \"Sensor \"+ sensors[\"id\"].astype(str)\nnames_pm10 = dict(zip(pm10_col[1:], sen_lab))\nfig = go.Figure([\n    {\n    \"x\":year[\"UTC time\"],\n    \"y\":year[col],\n    \"name\": names_pm10[col]\n    }\n    for col in pm10_col[1:]])\n               \nfig.update_xaxes(rangeslider_visible=True,\n                 rangeselector=dict(\n                     buttons=list([\n                         dict(count=6, label=\"6hrs\", step=\"hour\", stepmode=\"backward\"),\n                         dict(count=1, label=\"1d\", step=\"day\", stepmode=\"backward\"),\n                         dict(count=7, label=\"1w\", step=\"day\", stepmode=\"backward\"),\n                         dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n                         dict(step=\"all\")]\n                     )))\n\nfig.update_layout(\n    title='Time series for PM10 concentrations in 2017',\n    yaxis=dict(\n        autorange=True,\n        showgrid=True,\n        zeroline=True,\n        gridcolor='rgb(255, 255, 255)',\n        gridwidth=1,\n        zerolinecolor='rgb(255, 255, 255)',\n        zerolinewidth=2,\n    ),\n    margin=dict(\n        l=40,\n        r=30,\n        b=80,\n        t=100,\n    ),\n    paper_bgcolor='rgb(240, 240, 240)')\n\n                    \nfig.show()","192321d5":"year_pm10 = year[pm10_col].set_index('UTC time')\nmoving_average_year = year_pm10.rolling(window=24).mean()\n\nax = moving_average_year.plot(figsize =(20,15), legend=None)\n_ = ax.set_xlabel(\"UTC time\")\n_ = plt.title(\"PM10 moving daily average throughout the year\", fontsize =16)\n\nax = plt.axhline(50, label = 'WHO daily norm', color=\"red\")\nax = plt.axhline(200, label=\"Information level\", color=\"purple\")\nax = plt.axhline(300, label=\"Alarm level\", color=\"orange\")\n_ = plt.show()","90bbd539":"time_year_pm10 = year_pm10\ntime_year_pm10[\"UTC time\"] = pd.to_datetime(year_pm10.index)\ntime_year_pm10[\"Hour\"] = time_year_pm10[\"UTC time\"].dt.strftime(\"%H\")\ntime_year_pm10.groupby('Hour').median().T.plot(kind=\"box\", figsize =(18,10))\n_ = plt.title(\"Annual medians of PM10 concentrations by hour\", fontsize=16)\nax = plt.axhline(20, label = 'Annual WHO norm', color=\"orange\")\nax = plt.axhline(50, label = 'Daily WHO norm', color=\"red\")\n_ = plt.legend(fontsize=16)\nplt.show()","8e6c32d3":"nov = pd.read_csv(all_file_names[9])\nnov[\"UTC time\"] = pd.to_datetime(nov['UTC time'])\nnov_col_pm10 = [col for col in nov.columns if \"pm10\" in col or \"UTC time\" in col ]\nnov_pm10 = nov[nov_col_pm10]\nnov[\"UTC time\"] = nov[\"UTC time\"].dt.strftime(\"%H\")\nnov_pm10_means = nov[nov_col_pm10].groupby(\"UTC time\").mean()\nfig, ax = plt.subplots(figsize=(20, 10))\nax = sns.boxplot(data=nov_pm10_means.T)\n_ = plt.title(\"PM10 in November by hour\", fontsize=16)\n_ = plt.axhline(50, label = 'Daily WHO norm', color=\"red\")\n_ = plt.legend(fontsize=16)\n_ = plt.show()","5bc0c974":"aug = pd.read_csv(all_file_names[1])\naug[\"UTC time\"] = pd.to_datetime(aug['UTC time'])\naug_col_pm10 = [col for col in aug.columns if \"pm10\" in col or \"UTC time\" in col ]\naug_pm10 = aug[aug_col_pm10]\naug[\"UTC time\"] = aug[\"UTC time\"].dt.strftime(\"%H\")\naug_pm10_means = aug[aug_col_pm10].groupby(\"UTC time\").mean()\naug_trans = aug_pm10_means.T\nfig, ax = plt.subplots(figsize=(18, 10))\nax = sns.boxplot(data=aug_trans)\n_ = plt.title(\"PM10 in August by hour\", fontsize=16)\n_ = plt.axhline(50, label = 'Daily WHO norm', color=\"red\")\n_ = plt.legend(fontsize=16)\n_ = plt.show()","828fe1aa":"year[\"UTC time\"] = pd.to_datetime(year['UTC time'])\nyear[\"day\"] = year[\"UTC time\"].apply(lambda x: x.strftime(\"%A\"))\nfig, ax = plt.subplots(figsize=(20, 15))\n_ = sns.swarmplot(year[\"day\"], year[\"226_pm10\"], c= \"#1f77b4\", order=[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\", \"Friday\",\"Saturday\",\"Sunday\"])\n_ = plt.axhline(50, label = 'WHO Norm', color=\"red\")\n_ = plt.title(\"PM10 concentrations recorded by sensor #226 by a weekday in 2017\", fontsize=16)\n_ = plt.show()","b05138cf":"year.groupby(\"day\")[\"226_pm10\"].describe()","875b6b97":"fig, ax = plt.subplots(figsize=(20,6))\nax  = sns.boxplot(y=\"day\", x=\"226_pm10\", data=year,\n                  order=[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\", \"Friday\",\"Saturday\",\"Sunday\"])\nplt.ylabel(\"\")\nplt.show()","0397c016":"melt_temp = pd.melt(year[temp_col], id_vars=\"UTC time\",var_name=\"Temp_sensor_id\", value_name='Temperature')\nmelt_humi = pd.melt(year_humi_corrected,id_vars=\"UTC time\", var_name=\"Humi_sensor_id\", value_name='Humidity')\nmelt_pres = pd.melt(year[pres_col], id_vars=\"UTC time\",var_name=\"Pres_sensor_id\", value_name='Pressure')\nmelt_pm25 = pd.melt(year[pm25_col], id_vars=\"UTC time\",var_name=\"pm25_sensor_id\", value_name='pm25')\nmelt_pm10 = pd.melt(year[pm10_col], id_vars=\"UTC time\",var_name=\"pm10_sensor_id\", value_name='pm10')\nmelt_pm1 = pd.melt(year[pm1_col], id_vars=\"UTC time\",var_name=\"pm1_sensor_id\", value_name='pm1')","312868c1":"year_melted = pd.concat([melt_temp, melt_humi.iloc[:,1:], melt_pres.iloc[:,1:],  melt_pm25.iloc[:,1:], melt_pm10.iloc[:,1:], melt_pm1.iloc[:,1:] ], axis=1)","3ae21679":"year_melted[\"UTC time\"] = pd.to_datetime(year_melted['UTC time'])\nyear_melted[\"Hour\"] = year_melted[\"UTC time\"].apply(lambda x: x.strftime(\"%H\"))\nyear_melted[\"Day\"] = year_melted[\"UTC time\"].apply(lambda x: x.strftime(\"%A\"))\nyear_melted[\"Month\"] = year_melted[\"UTC time\"].apply(lambda x: x.strftime(\"%B\"))","6cea8332":"winter_months = [\"January\", \"February\", \"March\", \"October\", \"November\", \"December\"]\nsummer_months = [\"April\", \"May\", \"June\", \"July\", \"August\", \"September\"]\nyear_melted.loc[year_melted[\"Month\"].isin(winter_months), \"Season\"] = \"Winter\"\nyear_melted.loc[year_melted[\"Month\"].isin(summer_months), \"Season\"] = \"Summer\"\n\nwinter = year_melted[year_melted[\"Season\"]==\"Winter\"]\nsummer = year_melted[year_melted[\"Season\"]==\"Summer\"]","1d919452":"sns.pairplot(data=year_melted[['Temperature','Humidity','Pressure', 'Season', \"pm10\", 'pm25', 'pm1']],\n             hue='Season', corner=True, markers=[\"o\", \"s\"], palette=\"Set1\")\nplt.show()","28d8f305":"corr_p_winter = winter[[\"pm10\", 'pm25', 'pm1','Temperature', 'Humidity','Pressure']].corr(method='pearson')\ncorr_p_summer = summer[[\"pm10\", 'pm25', 'pm1','Temperature', 'Humidity','Pressure']].corr(method='pearson')","eec4453f":"fig, ax = plt.subplots(1,2,figsize=(20,6))\nmask = np.zeros_like(corr_p_winter, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr_p_winter, annot=True, mask=mask, cmap=\"coolwarm\",  linewidth=0.5,  ax=ax[0])\nax[0].set_xlabel(\"\")\nax[0].set_title(\"Winter - Correlation matrix\")\nsns.heatmap(corr_p_summer, annot=True, mask=mask, cmap=\"coolwarm\", linewidth=0.5,  ax=ax[1])\nax[1].set_xlabel(\"\")\nax[1].set_title(\"Summer - Correlation matrix\")\nplt.show()","302c5c27":"sns.set(style=\"whitegrid\")\nsns.lmplot(x=\"Temperature\", y=\"pm10\", col =\"Season\", hue=\"Season\", data=year_melted, palette=\"Set1\")\nsns.lmplot(x=\"Pressure\", y=\"pm10\", col =\"Season\", hue=\"Season\", data=year_melted, palette=\"Set1\")\nsns.lmplot(x=\"Humidity\", y=\"pm10\", col =\"Season\", hue=\"Season\", data=year_melted, palette=\"Set1\")\nplt.show()","5fcee1bc":"'''import osmnx as ox\nfrom IPython.display import Image\n%matplotlib inline\nox.config(log_console=True, use_cache=True)\n\nsensors[\"point\"] = list(zip(sensors.latitude, sensors.longitude))\ndist=200\n# calculate the area in projected units (meters) of each building footprint\npercentages = []\nfor id, sensor in sensors.iterrows():\n    gdf = ox.footprints.footprints_from_point(point=sensor.point, dist=200)\n    gdf_proj = ox.project_gdf(gdf)\n    bbox = ox.utils_geo.bbox_from_point(point=sensor.point, dist=200, project_utm=True)\n    areas = gdf_proj.area\n    building_surface = sum(areas)\n    percent = building_surface \/((dist*2)*(dist*2))\n    percentages.append(percent)'''","fc0ff727":"footprints = pd.read_csv(\"..\/input\/footprintscsv\/footprints.csv\")","f9cf7193":"footprints_sorted = footprints.sort_values(by=['Building_Surface'], ascending=False)\nfootprints_sorted.head(9)","b70a9480":"footprints_sorted.tail(8)","92b18970":"fig, ax = plt.subplots(figsize=(20, 7))\n\n_ = sns.barplot(sensors.id, footprints[\"Building_Surface\"], color = \"lightblue\", edgecolor='black')\n_ = plt.title('Building footprint for each sensor',fontsize=16)\n_ = plt.show()","bccd746f":"most_urbaned = ['204_pm10','189_pm10','147_pm10','181_pm10','201_pm10','211_pm10','622_pm10','176_pm10','179_pm10']\nmoderate_urbaned = ['170_pm10','210_pm10','216_pm10','180_pm10','196_pm10','219_pm10','185_pm10','214_pm10','213_pm10','174_pm10','177_pm10','223_pm10','140_pm10','3_pm10','202_pm10','228_pm10','857_pm10','227_pm10','194_pm10','215_pm10','218_pm10','171_pm10','192_pm10','172_pm10','173_pm10','221_pm10','226_pm10','220_pm10','895_pm10','205_pm10','142_pm10','178_pm10','713_pm10','208_pm10','184_pm10','182_pm10','187_pm10','808_pm10','183_pm10']\nleast_urbaned = ['195_pm10','169_pm10','209_pm10','212_pm10', '225_pm10', '263_pm10','222_pm10','203_pm10']","c1ca2038":"'''# configure the inline image display\nimg_folder = 'images'\nextension = 'png'\nsize = 240\npoint = (50.066686, 19.997207999999997)\ngdf = ox.footprints.footprints_from_point(point=point, dist=dist)\ngdf_proj = ox.project_gdf(gdf)\nbbox = ox.utils_geo.bbox_from_point(point=point, dist=dist, project_utm=True)\nfp = f'.\/{img_folder}\/krk_bldgs.{extension}'\nfig, ax = ox.plot_footprints(gdf_proj, bbox=bbox, color='y', filepath=fp, dpi=90,\n                             save=True, show=False, close=True)\nImage(fp, height=size, width=size)'''","8c81de8b":"''''place_name = \"Salwator, Krakow, Poland\"\ngraph = ox.graph_from_place(place_name)\nnodes, edges = ox.graph_to_gdfs(graph)\narea = ox.gdf_from_place(place_name)\nbuildings = ox.footprints_from_place(place_name)\nfig, ax = plt.subplots(figsize=(20,15))\n\n# Plot the footprint\narea.plot(ax=ax, facecolor='black')\n\n# Plot street edges\nedges.plot(ax=ax, linewidth=1, edgecolor='#BC8F8F')\n\n# Plot buildings\nbuildings.plot(ax=ax, facecolor='khaki', alpha=0.7)\n\nplt.tight_layout()'''","c21a7c00":"year_melted.loc[year_melted[\"pm10_sensor_id\"].isin(most_urbaned), \"Footprint\"] = \"most_urbaned\"\nyear_melted.loc[year_melted[\"pm10_sensor_id\"].isin(least_urbaned), \"Footprint\"] = \"least_urbaned\"\nyear_melted.loc[year_melted[\"pm10_sensor_id\"].isin(moderate_urbaned), \"Footprint\"] = \"moderate_urbaned\"","8733d303":"fig = px.line(year_melted, x=\"UTC time\", y=\"pm10\", line_group=\"pm10_sensor_id\",\n              color=\"Footprint\", hover_name=\"pm10_sensor_id\")\nfig.update_xaxes(rangeslider_visible=True,\n                 rangeselector=dict(\n                     buttons=list([\n                         dict(count=6, label=\"6hrs\", step=\"hour\", stepmode=\"backward\"),\n                         dict(count=1, label=\"1d\", step=\"day\", stepmode=\"backward\"),\n                         dict(count=7, label=\"1w\", step=\"day\", stepmode=\"backward\"),\n                         dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n                         dict(step=\"all\")]\n                     )))\nfig.show()","ce223595":"fig = px.scatter(year_melted, x='Temperature', y=\"pm10\", marginal_y=\"box\", marginal_x=\"box\", \n                 color=\"Footprint\", trendline=\"ols\")\nfig.update_layout(title='Scatter matrix for PM10 concentrations and temperature in relation to building density')\nfig.show()","8f1366de":"fig, ax = plt.subplots(figsize=(15,10))\nsns.boxplot(x=\"Season\", y=\"pm10\", hue=\"Footprint\",data=year_melted)\nsns.despine(offset=10, trim=True)\nplt.title(\"Box plots for PM10 concentrations in relation to building density\")\nplt.show()","aa5e108b":"year_melted.groupby([\"Footprint\", \"Season\"])[\"pm10\"].describe(percentiles = [0.25, .5, .75, .95])","4cdf6ce1":"comp = year_melted[(year_melted[\"Footprint\"]==\"most_urbaned\")|(year_melted[\"Footprint\"]==\"least_urbaned\")]\nsns.catplot(data = comp, x = 'Day', y = \"pm10\", col = 'Footprint', row = 'Season',palette = 'RdPu') \nplt.show()","2e84a5a6":"...there is some issue with the humidity recorded by the sensor number 194.","53ebfd6d":"All humidity records below 0 and above 100 have been adjusted and overwritten. It will be usefull during correlation analysis.","49bfeee0":"### Observations","4912ec89":"# The key takeways","27e944c9":"The below map illustrates locations of sensors. Sensors located in most densly urbaned part of Krakow are marked in red, while those located in the least urbaned areas are marked in green. Details how building footrpint has been calculated is a part of the next topic.","6fdb9977":"As we already know the air pollution problem in Krakow is serious, let's dig a little bit deeper. The below interactive line graph displays all data recorded by the sensors in 2017.","51e86678":"## Time","4882b3e6":"The aim of the notebook is to figure out what might be the main factors affecting air quality in Krakow, Poland. Analysis has been conducted based on data gathered by a network of 56 sensors located in the city. The datasets provide data on sensors location, temperature, air pressure, humidity and particulate matter concentrations such as PM10, PM2.5 and PM1. These minute particles and liquid droplets in the atmosphere are defined as the fraction of particles with a diameter smaller than respectively 10, 2.5 and 1 \u00b5m. Exposure to its high levels is very  dangerous to human health. \n","9341d744":"The data was originally separated into 12 files, which have been combined into one data frame for all year observations. Additionally, there is one more file with sensors locations.","2b679531":"The air quality is much better during summer time, when vehicles are the main source of air pollution. This source of pollution rises in prominence during the summer and may be particularly intense in the city center. Average August values are much lower and in most cases are within WHO limits.","871cb532":"Let's take a look at our main variables such as temperature, humidity, pressure and pm levels to have a generall overview on collected data. ","82eab15b":"There are 5980 negative records for humidity. Moreover, almost all sensors recorded humidity above 100. Such values are probably inaccurate. Humidity defined as the concentration of water vapor present in the air should be in a range between 0 and 100%.","765ff3dc":"1. Key takeways\n2. Load data\n3. Data reformatting and cleaning\n4. Time analysis\n5. Correlation analysis\n6. Building footprints analysis","a4556cd7":"Based on data downloaded from OpenStreetMap building footprints around each sensor have been calculated. All data has been saved in the footprints file, as it is not possible to query OpenStreetMap directely via Kaggle. 9 sensors located in the most densly urbanised locations (approx 30% and more of area covered by builidings) have been listed below:","cee6c12a":"While the temperature recorded by the Krakow sensors seems to be mostly correct...","f9bef66f":"During heating seson, moderte inverse correlation between the temperature and particulate matter variables indicates that they move in the opposite direction. Generally speaking, the higher temperature, the better air quality is. Pressure exhibit some positve degree of correlation.  There is a weak negative correlation between the pollutants variables and humidity.\nDuring summer time correlation between temperature and PM concentrations is at little bit weaker that during the heating season. What interesting is that correlation between humidity and the air pollutants is now positive.","ff20d9d3":"# Data Reformatting and Cleaning","c1269092":"- The levels of pollution vary seasonally. We can clearly observe that the air quality deteriorates dramatically during the winter and autumn months. During the summer months the air pollution norms are not exceeded.\n- Generally speaking, during the day the air quality is better than at night. The air pollution starts to increase in the afternoon reaching the highest levels in the late evening. \n- There is a negative association between temperature and the air pollution in the city, while pressure exhibits some positve degree of correlation. \n- Sensors located in the least densly urbanised areas recorded lower values of PM10 concentrations than those located in the city center.","900fb063":"![miasto.png](attachment:miasto.png)","6df34c5b":"### **Sensor Locations**","e3c7acb1":"The list of least densly urbanised sensors (less then 8% area covered by buildings):","1e6a8af9":"The sensor_locations file contains a list of sensors IDs and their corresponding latitude and longitude. All 56 sensors are located in Krak\u00f3w, Poland. ","06202d82":"![Kazimierz.png](attachment:Kazimierz.png)","fa521b5d":"# Load data","a652e3a5":"# Building footprint","aedd1b29":"# Krakow Air Pollution Analysis","b712408d":"4 sensors: 204, 189, 147 and 181 located in the most densly urbanised parts of Krakow are presented in the first row.\nIn contrary, sensors: 195, 169, 209 and 212 are located in the least urabnised areas of Krakow. Each square represents area of 160 000 square meters.","36bf2ed0":"The standard set by the European Union for annual concentration of PM10 (40 \u03bcg\/m3) is marked in red. The annual limit value mentioned in the WHO air quality guidelines is set at 20 \u03bcg\/m3 (marked in yellow). Such value is close to lower quartiles for most of sensors data. Practially speaking, approxmiatelly 75% of data points have higher values.","bd75f8c1":"Average ambient concentration levels of fine particulate matter PM10 vary also by time of a day. The lowest levels are observed in the middle of the day.","62b98982":"# Correlation Analysis","8cd6f705":"In fact sensors located in the least densly urbanised areas recorded the lowest values of PM10 concentrations.","bbd3d0d8":"# Table of contents","ebff1288":"As we already know that air quality is much worse during winter heating season. Based on the siginificante difference in the air quality during the seasons, I decided to compare winter months with summer months in order to perform correlation analysis. However, during both periods pm2.5 pm10 and pm1 concentrations exhibit very strong positive correlation - close to 1, which means that the analysed air pollutants increase in relation to each other.","6711f852":"![Salwator.png](attachment:Salwator.png)","73398af8":"Air quality is at its worst during winter heating season and varies by hour. Household heating emissions make the winter season significantly more vulnerable to air pollution. Residential heating triggers high levels of air pollution in the winter evenings. The graph is based on November mean concentration values.","34c4ed75":"# Data melting and new variables","acf53eae":"# Import libraries","12cbcb4e":"The columns have been converted into to rows in order to plot and perform some futher analysis.","588e73a5":"As we can see, all sensors have recorded very high concentrations of PM10. Especially high PM pollution periods occured during the winter and autumn.\n\nIn 2017, PM10 pollution standards were set in Poland at three levels:\n- acceptable level 50 \u03bcg\/m3 (daily) (red horizontal line)\n- information level 200 \u03bcg\/m3 (daily) (purple horizontal line)\n- alarm level 300 \u03bcg\/m3 (daily) (orange horizontal line).\n\nThe European Union has only established an acceptable level which aligns to the norms of acceptable daily concentrations established by the World Health Organization - 50 \u03bcg\/m3 for PM10. The WHO daily norm is exceeded when the average pm10 level throughout the last 24 hours is higher than that level. Moving average has been used to visualize time when such leveles were reached. The situation is especially bad in winter when air pollution is caused mostly by heating houses by coal.","331c4057":"# Time Analysis","d96b07c9":"Results of above OSMnx code is attached below on the screenshots. The first screen presents urbanised part of the city (Kazimierz district) vs the second one - less urbanised (Salwator district).","7397f2dd":"Does dense building concentration affect the air quaility in the city? \nTo answer that question I have used the OSMnx package which allows users to download spatial data (including building footprints and points of interest data) from OpenStreetMap then vizualize and analyse them. For example, we can download and illustrate the building footprints near our sensors. \nHowever, OSMnx is not supported by Kaggle, so I perfomed the analysis locally on my computer (commented part of the code)."}}