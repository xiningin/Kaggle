{"cell_type":{"49320b14":"code","84836254":"code","939cbac3":"code","0346e6d0":"code","e00ff68f":"code","d787f854":"code","b043e67e":"code","56d40930":"code","f8354e6e":"code","d2c0869b":"code","e0f38a3b":"code","9914ac2b":"code","1ed07a33":"code","f0ddc26e":"code","358c8178":"code","dfb2706b":"code","42c4b783":"code","fcacc2af":"code","12c61793":"code","5823d3db":"code","9e1e22d8":"code","4b18cedb":"code","37b83e4c":"code","0f0e0962":"code","bcec03bd":"code","8a46b671":"code","f0ca84e0":"code","f6b7def6":"code","022befb3":"code","7b5884fa":"code","a01a9412":"code","646410ee":"code","8289136b":"code","00bf4c27":"code","634f3659":"code","3b1853cb":"code","77cf8e6e":"code","0d8799e3":"code","27bc116c":"code","4564e383":"code","9a8eea6a":"code","41e3fd07":"code","e860a24e":"code","4ca66c78":"code","cf9d88a0":"markdown","fdd94c58":"markdown","efb013aa":"markdown","189212d7":"markdown","ad8b9f42":"markdown","e04d8933":"markdown","6826fecc":"markdown","70fd3aa4":"markdown","31f2d20c":"markdown","0cd97cab":"markdown","7633de9a":"markdown","ddd859c6":"markdown","c1025028":"markdown","90c6fc27":"markdown","21c0a4d5":"markdown","9927b3e0":"markdown","ef79a167":"markdown","9ee72cc6":"markdown","d2d1bc1d":"markdown","7dfd8fb7":"markdown","20a7e665":"markdown","ddda8e01":"markdown","f8c8cb6c":"markdown","1f2b8b47":"markdown","75ef9e76":"markdown","39c8260a":"markdown","2cfcd2ec":"markdown","fe9efdcf":"markdown","f70389c4":"markdown","f1bbe280":"markdown","0fed7170":"markdown","a727a231":"markdown","940691c5":"markdown","6607b80e":"markdown"},"source":{"49320b14":"import pandas as pd","84836254":"df = pd.DataFrame(\n[[4, 7, 10],\n[5, 8, 11],\n[6, 9, 12]],\nindex=[1, 2, 3],\ncolumns=['a', 'b', 'c'])","939cbac3":"df","0346e6d0":"baseline_data = pd.read_csv(\"..\/input\/simple-shopping-mall-energyplus-simulation-data\/Baseline.csv\")","e00ff68f":"baseline_data","d787f854":"baseline_data = pd.read_csv(\"..\/input\/simple-shopping-mall-energyplus-simulation-data\/Baseline.csv\", index_col='Month')","b043e67e":"baseline_data","56d40930":"baseline_data.index","f8354e6e":"baseline_data.columns","d2c0869b":"baseline_data.info()","e0f38a3b":"baseline_data['Baseline']","9914ac2b":"baseline_data.Baseline","1ed07a33":"baseline_data.head()","f0ddc26e":"baseline_data.tail()","358c8178":"baseline_data[baseline_data['Baseline'] > 10]","dfb2706b":"baseline_data.sample(frac=0.5)","42c4b783":"baseline_data.sample(n=3)","fcacc2af":"baseline_data.sort_values('Baseline')","12c61793":"baseline_data.sort_index()","5823d3db":"baseline_data.rename(columns={'Baseline':'Baseline Cooling Consumption in GWh'})","9e1e22d8":"baseline_data.plot()","4b18cedb":"baseline_data.columns.name = 'Scenario'\nbaseline_data.index.name = 'Months of the Year'\nbaseline_data.plot(lw=2, colormap='jet', marker='.', markersize=10, \n        title='Cooling Energy Consumption of Baseline Building in Total GWh')","37b83e4c":"ls","0f0e0962":"schedule_scenario = pd.read_csv(\"..\/input\/simple-shopping-mall-energyplus-simulation-data\/Scenario - Aircon Schedules.csv\", index_col=\"Month\")","bcec03bd":"schedule_scenario","8a46b671":"baseline_data","f0ca84e0":"combined_data = pd.concat([baseline_data, schedule_scenario], axis=1)","f6b7def6":"combined_data","022befb3":"combined_data.plot(lw=2, colormap='jet', marker='.', markersize=10, \n        title='Cooling Energy Consumption of Baseline Building in Total GWh')","7b5884fa":"combined_data['Difference'] = combined_data['Baseline'] - combined_data['Scenario - Aircon Schedules']","a01a9412":"combined_data","646410ee":"combined_data['Difference'].plot.bar(title='Difference between Baseline and Improved Schedules in Total GWh')","8289136b":"def get_difference_conditional(monthly_data):\n  #print(monthly_data)\n  if monthly_data.name == 'July':\n    return 0\n  else:\n    return monthly_data['Baseline'] - monthly_data['Scenario - Aircon Schedules']","00bf4c27":"combined_data['Difference_NoJuly'] = combined_data.apply(lambda x: get_difference_conditional(x), axis=1)","634f3659":"combined_data['Difference_NoJuly'].plot.bar(title='Difference between Baseline and Improved Schedules in Total GWh')","3b1853cb":"list_of_files = ['Scenario - Aircon Schedules.csv',\n 'Scenario - Cool roof.csv',\n 'Scenario - Rooftop Gardens.csv',\n 'Scenario - Increase Setpoint.csv',\n 'Scenario - Low-E Glass.csv',\n 'Baseline.csv']","77cf8e6e":"list_of_files","0d8799e3":"for filename in list_of_files:\n  print(filename)","27bc116c":"data_container = []\nfor filename in list_of_files:\n  print(filename)\n  df = pd.read_csv(\"..\/input\/simple-shopping-mall-energyplus-simulation-data\/\"+filename, index_col='Month')\n  data_container.append(df)\n\nall_data = pd.concat(data_container, axis=1)","4564e383":"all_data","9a8eea6a":"all_data.info()","41e3fd07":"all_data.plot(lw=2, colormap='jet', marker='.', markersize=10, \n        title='Cooling Energy Consumption of Baseline Building in Total GWh', figsize=(15,8))","e860a24e":"all_data.subtract(all_data['Baseline'], axis=0).sum().plot.bar()","4ca66c78":"all_data.drop()","cf9d88a0":"Let's take a look at the attributes that we can set in a funcation like `.read_csv()`\n\nKaggle give us the ability to use features like *autocomplete*:\n- Right now you will have to click on the \"Try new features\" icon in the far upper right hand corner of \n- Start typing `pd.read_csv()` and you will see the various autocomplete options\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-9.png?raw=true)","fdd94c58":"Turns out that Increasing the setpoing is by far the most effective energy savings option! Schedules are second place and cool roof is third. The Rooftop gardens and Low-E glass seem to have only a bit of impact for this building","efb013aa":"## Troubleshooting bugs using Stackoverflow\n\nSoemtimes we run into bugs -- these are when we get errors from the Python kernel. \n\nFor example, let's say that we want to use the `.drop()` function to remove some of the columns in a DataFrame. Let's give it a try:","189212d7":"### Sorting and Renaming a DataFrame\n\nSometimes we need to sort the observations in a certain column -- there are several functions for this purpose","ad8b9f42":"# Monthly Energy Visualization\n\nNow that we've investigated various ways to slice and dice the DataFrame, let's take a look at the data in a visualization format.\n\n### The **Baseline** simulation model is the design of the building with conventional design options. Let's take a look at the energy consumption per month:","e04d8933":"# Make New Columns to Find the Difference between the options\n\nLet's use a vector operation to create a new column to find the difference between the columns","6826fecc":"We ran into an error! Colab is so helpful that it gives you a button to Google the error message on Stackoverflow -- we find a solution at this site: https:\/\/stackoverflow.com\/questions\/49979122\/getting-valueerror-need-to-specify-at-least-one-of-labels-index-or-column\n\n","70fd3aa4":"The `.info()` object is useful in seeing a DataFrame in way that summarizes the number of columns and the type of data in that column. This view is also useful to understand if there are missing values","31f2d20c":"## Define a *function* object to create a new column\n\nLet's say we only care to compare all the months except *July* -- we can define a function to calculate a new column","0cd97cab":"First let's loop through all the filenames just to show that we can","7633de9a":"# Loading Data from files\n\nInstead of creating DataFrames from scratch, we generally load data from various file types - the most common being files with the extension `.csv` or `.xlsx`. There are several pandas functions to both read and write data from and to various files. \n\nThe following is a list of functions in pandas (https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/io.html):\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-8.png?raw=true)\n\n### First step, let's load the baseline `.csv` file:","ddd859c6":"Let's take a look at the *Baseline* Scenario again","c1025028":"## Using web-based resources to figure out how to do things\n\nNow we have all the data in one DataFrame, but now what? I think we need to subtract the baseline from each column. I'm not sure how to do that.\n\nIn this situation, you can use the best coding assistant in history -- Google. \n\nHere is the top result of the google search \"subtracting all columns in a dataframe by one column\":\n\nhttps:\/\/stackoverflow.com\/questions\/45383144\/subtracting-many-columns-in-a-df-by-one-column-in-another-df\n\nThis stackoverflow site gives us guidance how to chain together a few functions together to get the result we want\n\n","90c6fc27":"# Overview of Design Option Scenarios\n\nIn this analysis, we will consider five additional sets of design options focused on various design options. \n\n\n","21c0a4d5":"# Compare all of the options\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-4.png?raw=true)\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-5.png?raw=true)\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-6.png?raw=true)\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-7.png?raw=true)\n","9927b3e0":"Now we can use the `.append()` function of Python *list* object and the `.concat()` function to loop through and get the data from each building","ef79a167":"## Subset of observations\n\nWe can see only the first or last few lines using `.tail()` and `.head()`","9ee72cc6":"Looks like the *Schedule* scenario uses less energy than the baseline - let's confirm this by combining the two DataFrames using the `.concat()` function","d2d1bc1d":"## Subset of Variables\nEach column is a Pandas *Series* object - which we can select using the name of the column inside of brackets. In this case, there is only a single column. \n\nThere are two ways to select a column within a DataFrame:\n","7dfd8fb7":"# Visualization and analysis of simulated building energy data - Case Study of a Shopping Mall in Dubai\n\n- Developed by Clayton Miller (clayton@nus.edu.sg - miller.clayton@gmail.com)\n- Simulation files and visualizations created by Miguel Martin (miguel.martin@u.nus.edu.sg)","20a7e665":"Let's take the files out of this list that we want to analyze and put them in a *list* called `list_of_files`","ddda8e01":"# Case Study -- Shopping Mall Design in Dubai\n\n### The scenario for this analysis ia shopping mall project in Dubai. Imagine you are on the design team and are asked to design this building complex.  \n- One of the biggest shopping mall of the world\n- Located in United Arab Emirates (i.e. arid climate)\n- Floor area is about 500,000 m2\n- Number of visitors every year is around 90 million\n- Building with tremendously high cooling energy demand\n\n### There will be various decisions to make about which design options to integrate into the design\n\n","f8c8cb6c":"### Attribute tuning for `.read_csv()`\n\nRight now, the file has been loaded, but let's make the `Month` column the index -- to do this we can use the attribute `index_col=`","1f2b8b47":"Miguel Martin (PhD student at NUS) has already created several EnergyPlus simulations of a prototype building form and produced results of monthly cooling energy. This set of tutorial videos will cover the ways to analyze the data from those simulations while learning the fundamentals of the Pandas library\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-2.png?raw=true)\n\nThe first thing we will do is use the pandas library to load the data set and analyze the data from the 'baseline' energy model. The units of this file is Cooling Energy GWh per month\n\nFirst, we need to load the `pandas` library and load the `.csv` file\n","75ef9e76":"### Chaining functions\n\nNow we can chain a few functions together to see the total energy consumption reduction from each of the design options","39c8260a":"# Compare two files -- Baseline vs. Different Scheduling\n\nFirst let's take a look at one of the design options - the use of optimized schedules. Instead of the building operating 24\/7, the building would have the cooling system on only during operating hours. Let's take a look at this comparison\n\n![alt text](https:\/\/github.com\/buds-lab\/the-building-data-genome-project\/blob\/master\/docs\/edx-graphics\/EDX-SimulationImage-3.png?raw=true)\n\nFirst, let's get the data from that file","2cfcd2ec":"## The Pandas online cheat sheet\n\nThroughout this and all future notebooks, we will refer to the Pandas function cheat sheet as a resource to help us understand the most important functions and how to use them\n\nhttps:\/\/pandas.pydata.org\/Pandas_Cheat_Sheet.pdf","fe9efdcf":"# DataFrame Objects Overview\n\nA DataFrame object is a multi-purpose two dimensional object that has dozens of functions that can be applied to it to see what's inside in different ways.\n\nA DataFrame is made up of an `index` and a set of `columnts`. \n\nThe DataFrame object allows us to put data in the **tidy data** format with variables as columns and observations as rows\n","f70389c4":"Here is a tutorial for data analysis of simulated data from a building energy model like EnergyPlus. We will look at a scenario of a Mall based in Dubai, UAE\n\nThe goal of this notebook is to illustrate how to use output files from the EnergyPlus energy simulation engine to get an initial understanding of the Pandas DataFrame and functions\n\n","f1bbe280":"We can modify various parts of the graphic using attributes of the DataFrame and `.plot()` function","0fed7170":"We can get a random sample of the rows in the DataFrame","a727a231":"## Use a `for` loop to load the files from all the scenarios\n\nThere are five more `.csv` files that have data from each simulation. We will use a `for` loop to get the data from each file. Again, we'll use the `os` library to get the names of the files so that we can loop through and grab them.","940691c5":"Rows in a DataFrame can be filtered using a conditional statement\n\n","6607b80e":"# Pandas DataFrame Object\n\nBefore we do this analysis, let's look at a generic DataFrame object created from data specificied in a line of source code\n\nThe following code creates a DataFrame object labelled `df`\n\n"}}