{"cell_type":{"7c660994":"code","f82aabaf":"code","638af9c7":"code","54b98e96":"code","fce0fded":"code","2903c4a2":"code","38fe9795":"code","07564433":"code","b67e473f":"code","4496c0e4":"code","c5b88c39":"code","887b657c":"code","5b04b82d":"code","a0f8d788":"code","fad5a6db":"code","59299047":"code","a1c60815":"code","2947d9b7":"code","7ee021f0":"code","6e91e7b7":"code","47dd5d3e":"code","cc8279fc":"code","c6624179":"code","6fb5f774":"code","855238fd":"code","6c455736":"code","405c3947":"code","898aa804":"code","5539bd8c":"code","63d10d7f":"code","4e7178f9":"code","36d6dcb4":"code","8ed22d8a":"code","33191996":"markdown","a0940d5c":"markdown","a483b7ce":"markdown","c90e9af1":"markdown","6c866bb6":"markdown","eb539ee7":"markdown","be8cc528":"markdown","545a3a5a":"markdown","a6bf6dd9":"markdown","705c79b1":"markdown","1c2499a5":"markdown"},"source":{"7c660994":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #data visualization\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f82aabaf":"pokemon = pd.read_csv(\"..\/input\/pokemon.csv\", index_col=0)\npokemon.head()","638af9c7":"#Univariate Plot\npokemon.type1.value_counts().plot.bar() #for categorical data with small numbers - easy to display","54b98e96":"pokemon.hp.value_counts().sort_index().plot.line() #for continuous values (or points) or large amount of categorical data \n                                                    #easy to show relationship and display large amount of categorical data","fce0fded":"pokemon.hp.value_counts().sort_index().plot.area() #just line chart in area\n#if no sort_index() - then the datas will be very messy","2903c4a2":"pokemon.weight_kg.plot.hist()","38fe9795":"pokemon.plot.scatter(x = 'sp_attack', y ='sp_defense') #plot correlation","07564433":"pokemon.plot.hexbin(x= 'sp_attack', y = 'sp_defense', gridsize = 15) #show the datas concentrated point","b67e473f":"pokemon_stats_legendary = pokemon.groupby(['is_legendary', 'generation']).mean()[['sp_attack', 'sp_defense']]\npokemon_stats_legendary.plot.bar(stacked = True)","4496c0e4":"pokemon_stats_by_generation = pokemon.groupby('generation').mean()[['hp', 'weight_kg', 'height_m', 'sp_attack', 'sp_defense', 'speed']]\npokemon_stats_by_generation.plot.line(stacked =True)  # show the diff in generation for all stats comparison of their means\n#such as hp\/weight_kg\/height_m\/sp_attack\/sp_defense\/speed","c5b88c39":"sns.countplot(pokemon.generation) #bar chart in seaborn (no value_count needed as pandas)","887b657c":"sns.distplot(pokemon.hp) #where kdeplot only display line - but distplot show bar chart and kdeplot","5b04b82d":"sns.jointplot(x='sp_attack', y='sp_defense', data=pokemon) #same as scatter plot in pandas\n#with extra distribution bar chart on top and right","a0f8d788":"sns.jointplot(x='sp_attack', y='sp_defense', data=pokemon, kind = 'hex', gridsize = 20) \n# scatterplot with hex mode on!","fad5a6db":"sns.kdeplot(pokemon.hp,pokemon.sp_attack)\n#similar as graph above just better presentation\n#high computational cost,and no need to specify x and y, just name of data columns then done","59299047":"sns.boxplot(x = pokemon.is_legendary, y = pokemon.sp_attack)\n#or can state with x='islegendary', y = ... , data = pokemon (same result)\n#use to show the relative distribution comparison of 2 datas and find 75% , 50% and 25% percentile of datas","a1c60815":"sns.violinplot(x = pokemon.is_legendary, y = pokemon.sp_attack) #another way of boxplot","2947d9b7":"legendary_facet = sns.FacetGrid(data = pokemon, row = 'is_legendary')\nlegendary_facet.map(sns.kdeplot,'sp_attack') #used to plot several graph","7ee021f0":"legendary_facet = sns.FacetGrid(data = pokemon, row = 'generation',col = 'is_legendary')\nlegendary_facet.map(sns.kdeplot,'sp_attack') #used to plot several graph and arrange in order","6e91e7b7":"stats = ['hp','sp_attack','sp_defense']\nsns.pairplot(pokemon[stats]) #used to show first insight of the correlation of the datas","47dd5d3e":"**Multivariate plot with seaborn**","cc8279fc":"sns.lmplot(x = 'sp_attack', y = 'sp_defense', markers = ['o','x'],\n           hue = 'is_legendary',\n           data = pokemon, fit_reg = False) #o x scatter plot","c6624179":"sns.boxplot(x='generation',y='base_total', hue='is_legendary',\n           data = pokemon)","6fb5f774":"p = (pokemon.loc[:,['hp','sp_attack','sp_defense','attack','defense','speed']]).corr()\nsns.heatmap(p,annot = True)","855238fd":"from pandas.plotting import parallel_coordinates\n\np = (pokemon[(pokemon['type1'].isin([\"psychic\", \"fighting\"]))]\n         .loc[:, ['type1', 'attack', 'sp_attack', 'defense', 'sp_defense']] \n     # .loc need to state all rows, and the columns needed in 2 []\n    )\n\nparallel_coordinates(p, 'type1') #datas and the x-label","6c455736":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\niplot([go.Scatter(x = pokemon.attack, y = pokemon.defense, mode = 'markers')]) #Interactive scatterplot","405c3947":"iplot([go.Histogram2dContour(x=pokemon.attack, \n                             y=pokemon.defense, \n                             contours=go.Contours(coloring='heatmap')), #Interactive heatmap on plotly\n       go.Scatter(x=pokemon.sp_attack, y=pokemon.sp_defense, mode='markers')]) #Interactive scatter on plotly\n#combine two interactive map together","898aa804":"df = pokemon.assign(n=0).groupby(['attack', 'defense'])['n'].count().reset_index()\npokemon_z = df.pivot(index='attack', columns='defense', values='n').fillna(0).values.tolist() #3D chart\niplot([go.Surface(z=pokemon_z)]) #not sure how to explain","5539bd8c":"#df = reviews['country'].replace(\"US\", \"United States\").value_counts()\n\n#iplot([go.Choropleth(\n#    locationmode='country names',\n#    locations=df.index.values,\n#    text=df.index,\n#    z=df.values\n#)])\n#this display world map as values distribution and interactive","63d10d7f":"#A really simple plotting method : 1st : U declare the data by using - (ggplot(data_name)\n# 2nd: U declare the x and y of the datas: + aes(x= ___,y=___)\n# 3rd: U declare the display of your plot: Examples are: point chart = + geom_point()\n#smooth line = + stat_smooth()\n#color point = + aes(color = 'x\/ y')\n#facet = + facet_wrap('~ x\/y')\n#bar chart = + geom_bar()\n#hexbin = + geom_bin2d(bins=20) )\n#and many more can be config yourself","4e7178f9":"from plotnine import * #import plotnine func\n\n(ggplot(pokemon)\n +aes(x='attack',y='defense')\n +geom_point()) #normal scatter graph","36d6dcb4":"(\nggplot(pokemon)\n +aes(x='attack',y='defense',color = 'is_legendary')\n +geom_point()\n +ggtitle(\"Pokemon Attack and Defense by Legendary Status\")\n)","8ed22d8a":"( \n ggplot(pokemon)\n +aes(x='attack')\n +facet_wrap('generation')\n +geom_histogram()\n)","33191996":"Hence, for more info about customization of plotnine can checkout https:\/\/plotnine.readthedocs.io\/en\/stable\/api.html (official API of plotnine)","a0940d5c":"Special note for last chapter of kaggle learn -> https:\/\/www.kaggle.com\/residentmario\/time-series-plotting-optional\nwhere time-series plotting is shown, which can be greatly use to visualize the datas in stock market, but pokemon cant be used here ( no time bruh )\n.\n.\n.\nIf you like the graph plotting please remember to support kaggle learn data visualization for more info, and upvote this kernel **Thanks :D**","a483b7ce":"**PLOTNINE method for graph plotting** ","c90e9af1":"Check more beautiful data presentation with https:\/\/seaborn.pydata.org\/examples\/index.html ","6c866bb6":"**PANDA**","eb539ee7":"For more documentation on interactive plot - **plotly offline** = https:\/\/plot.ly\/python\/","be8cc528":"**FacetGrid + Pairplot with seaborn**","545a3a5a":"ALL these is learnt from **KAGGLE LEARN - VISUALIZATION**: https:\/\/www.kaggle.com\/learn\/data-visualization\nThis is for practice only, please refer to it for more infos","a6bf6dd9":"**SEABORN**","705c79b1":"**Multivariate plot with seaborn**","1c2499a5":"**Additional: Plotly (high level API)**"}}