{"cell_type":{"58061f45":"code","e6acaee9":"code","8375525b":"code","ec305430":"code","dc229a1b":"code","95a730fc":"code","73a252c4":"code","e45b6566":"code","1c9f6b40":"code","20078f3b":"code","e6a82265":"code","e1b7f1b2":"code","214b82dd":"code","ef07a5d7":"code","bde3e3dd":"code","3b228115":"code","341a0802":"code","cc35878e":"code","4ccb7967":"code","3acd81c5":"code","b6bacbbd":"code","7ca223ce":"code","db182215":"code","cc4dbb2a":"code","6d405416":"code","e1bf9887":"code","deaf453f":"markdown","b41ea519":"markdown","8cc62832":"markdown","81d3e88b":"markdown","2276a304":"markdown","0b40ec08":"markdown","4d6f83a2":"markdown","e1dc2731":"markdown","2c06ed12":"markdown","5855fedf":"markdown","013211c3":"markdown","7e4e8979":"markdown","51fc439e":"markdown","b3306d00":"markdown","918a4495":"markdown"},"source":{"58061f45":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport pycountry\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\n\n# Graphics in retina format \n%config InlineBackend.figure_format = 'retina' \n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')","e6acaee9":"data = pd.read_csv('\/kaggle\/input\/2019-coronavirus-dataset-01212020-01262020\/2019_nCoV_20200121_20200201.csv', parse_dates = ['Last Update'])","8375525b":"world_data = pd.read_csv('\/kaggle\/input\/world-cod\/world_coordinates.csv')","ec305430":"data.info()","dc229a1b":"data.shape","95a730fc":"data.head()","73a252c4":"# Countries affected\n\ncountries = data['Country\/Region'].unique().tolist()\nprint(countries)\n\nprint(\"\\nTotal countries affected by virus: \",len(countries))","e45b6566":"#Combining China and Mainland China cases\n\ndata['Country\/Region'].replace({'Mainland China':'China'},inplace=True)\ncountries = data['Country\/Region'].unique().tolist()\nprint(countries)\nprint(\"\\nTotal countries affected by virus: \",len(countries))","1c9f6b40":"confimed_mc = data.groupby('Country\/Region')['Confirmed'].sum().reset_index(drop = False)","20078f3b":"ccc = confimed_mc['Confirmed'][confimed_mc['Country\/Region'] == 'China'].values.astype(int)[0]","e6a82265":"print('The total number of confimed cases in China are', ccc)","e1b7f1b2":"world_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')","214b82dd":"# Creating a dataframe with total no of confirmed cases for every country\nNumber_of_countries = len(data['Country\/Region'].value_counts())\n\n\ncases = pd.DataFrame(data.groupby('Country\/Region')['Confirmed'].sum())\ncases['Country'] = cases.index\ncases.index=np.arange(1,Number_of_countries+1)\n\nglobal_cases = cases[['Country','Confirmed']]\n#global_cases.sort_values(by=['Confirmed'],ascending=False)\nglobal_cases","ef07a5d7":"# Merging the coordinates dataframe with original dataframe\nworld_data = pd.merge(world_data,global_cases,on='Country')\nworld_data.head()","bde3e3dd":"for lat, lon, value, name in zip(world_data['latitude'], world_data['longitude'], world_data['Confirmed'], world_data['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","3b228115":"d = data['Last Update'][-1:].astype('str')\nyear = int(d.values[0].split('-')[0])\nmonth = int(d.values[0].split('-')[1])\nday = int(d.values[0].split('-')[2].split()[0])\n\nfrom datetime import date\ndata_latest = data[data['Last Update'] > pd.Timestamp(date(year,month,day))]\ndata_latest.head()","341a0802":"# A look at the different cases - confirmed, death and recovered\nprint('Globally Confirmed Cases: ',data['Confirmed'].sum())\nprint('Global Deaths: ',data['Death'].sum())\nprint('Globally Recovered Cases: ',data['Recovered'].sum())","cc35878e":"# Let's look the various Provinces\/States affected\n\ndata.groupby(['Country\/Region','Province\/State']).sum()","4ccb7967":"# Provinces where deaths have taken place\ndata.groupby('Country\/Region')['Death'].sum().sort_values(ascending=False)[:5]","3acd81c5":"# Lets also look at the Recovered stats\ndata.groupby('Country\/Region')['Recovered'].sum().sort_values(ascending=False)[:5]","b6bacbbd":"#Mainland China\nChina = data[data['Country\/Region']=='China']\nChina","7ca223ce":"f, ax = plt.subplots(figsize=(12, 8))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Confirmed\", y=\"Province\/State\", data=China[1:],\n            label=\"Confirmed\", color=\"r\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Recovered\", y=\"Province\/State\", data=China[1:],\n            label=\"Recovered\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 400), ylabel=\"\",\n       xlabel=\"Stats\")\nsns.despine(left=True, bottom=True)","db182215":"latitude = 39.91666667\nlongitude = 116.383333\n \n# create map and display it\nchina_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n\nchina_coordinates= pd.read_csv(\"\/kaggle\/input\/china-coordinates\/cn.csv\")\nchina_coordinates.rename(columns={'admin':'Province\/State'},inplace=True)\ndf_china_virus = China.merge(china_coordinates)\n\n\n# Make a data frame with dots to show on the map\ndata1 = pd.DataFrame({\n   'name':list(df_china_virus['Province\/State']),\n   'lat':list(df_china_virus['lat']),\n   'lon':list(df_china_virus['lng']),\n   'Confirmed':list(df_china_virus['Confirmed']),\n   'Recovered':list(df_china_virus['Recovered']),\n   'Deaths':list(df_china_virus['Death'])\n})\n\ndata1.head()","cc4dbb2a":"# create map for total confirmed cases in china till date\nchina_map1 = folium.Map(location=[latitude, longitude], zoom_start=4,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(data1['lat'], data1['lon'], data1['Confirmed'], data1['name']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        popup = ('Province: ' + str(name).capitalize() + '<br>'\n                        'Confirmed: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(china_map1)\n    folium.Map(titles='jj', attr=\"attribution\")    \nchina_map1","6d405416":"china_map = folium.Map(location=[latitude, longitude], zoom_start=4,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(data1['lat'], data1['lon'], data1['Deaths'], data1['name']):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.2,\n                        popup = ('Province: ' + str(name).capitalize() + '<br>'\n                        'Deaths: ' + str(value) + '<br>'),\n                        color='black',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(china_map)\n    folium.Map(titles='jj', attr=\"attribution\")    \nchina_map","e1bf9887":"china_map = folium.Map(location=[latitude, longitude], zoom_start=4,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(data1['lat'], data1['lon'], data1['Deaths'], data1['name']):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.2,\n                        popup = ('Province: ' + str(name).capitalize() + '<br>'\n                        'Deaths: ' + str(value) + '<br>'),\n                        color='black',\n                        \n                        fill_color='green',\n                        fill_opacity=0.7 ).add_to(china_map)\n    folium.Map(titles='jj', attr=\"attribution\")    \nchina_map","deaf453f":"Till now, majority of the deaths have occured in China with the majority occuring in Hubei alone. Wuhan, the epicentre of the virus is the capital of Hubei","b41ea519":"## Total Recovered Cases in China until as of this data","8cc62832":"### Confirmed cases in Mainland China","81d3e88b":"I have created the above map by using Folium Maps. You can click on the red bubbles to get information about the region and the number of confirmed cases there.","2276a304":"## Total Deaths in China until as of this data.","0b40ec08":"## Lets Microscope China","4d6f83a2":"### Total Number of Confirmed cases in China","e1dc2731":"### GeoSpatial Analysis","2c06ed12":"## Countries Affected","5855fedf":"##### Thanks","013211c3":"### Lets visualise the predicament of China","7e4e8979":"Let's create a new dataframe which consists of the latitude and longitudes of the countries under observation","51fc439e":"## Total confirmed cases in China until as of this data.","b3306d00":"#### Let's look at the Confirmed vs Recovered figures of Provinces of China other than Hubei","918a4495":"# Countries Latest Status"}}