{"cell_type":{"f1543fcd":"code","b5a1c0dd":"code","b95fdb35":"code","637f7c50":"code","22a26132":"code","671ad807":"code","d50bb3da":"code","ccd545e1":"code","4d407660":"code","7e59dbf1":"code","563c0e1b":"code","e14c1536":"code","b46be86f":"code","26d97f36":"code","42961db3":"code","b878e196":"code","79fc200c":"code","7ff965f6":"code","c8206ec6":"code","68f5c357":"code","333ec0c2":"code","feb571a0":"code","e4514ea2":"code","98fee152":"code","f98f5be5":"code","0807bf49":"code","ff894046":"code","a98385b9":"markdown","66c56f20":"markdown","2b531449":"markdown","fa508aeb":"markdown","0b89d5d3":"markdown","a2707e66":"markdown","2b24fb00":"markdown","3e473f93":"markdown","e3d6f6c3":"markdown","49161c02":"markdown","2d18c98e":"markdown","ba4807d8":"markdown","877f0d12":"markdown","6ee6d572":"markdown","49b044f0":"markdown","b946aac1":"markdown","9e078ab1":"markdown","b9c6c065":"markdown","d5ef5324":"markdown","bc3a1071":"markdown","56a574fb":"markdown"},"source":{"f1543fcd":"import sys\n!cp ..\/input\/rapids\/rapids.0.13.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","b5a1c0dd":"import numpy as np \nimport pandas as pd \nimport os\nimport random \nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import ylim, xlim\n%matplotlib inline\nimport seaborn as sns\n# Setting color palette.\norange_black = ['#fdc029', '#df861d', '#FF6347', '#aa3d01', '#a30e15', '#800000', '#171820']\n# Setting plot styling.\nplt.style.use('ggplot')\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom collections import Counter\nfrom sklearn.decomposition import PCA, TruncatedSVD\nfrom sklearn.preprocessing import LabelEncoder,normalize,MinMaxScaler\n# from sklearn.metrics import f1_score\n# from sklearn.model_selection import cross_val_score\n# from sklearn.metrics import confusion_matrix,roc_auc_score,roc_curve\n# import tensorflow as tf\n\nimport plotly.offline as ply\nimport plotly.graph_objs as go\nply.init_notebook_mode(connected=True)\nfrom IPython.display import display\n\nimport cudf, cuml\nimport cupy as cp\nfrom cuml.manifold import TSNE, UMAP","b95fdb35":"def load_data(path, drop_cols=True):\n    \n    train = pd.read_csv(path+'training.zip')\n    test = pd.read_csv(path+'test.zip')\n    \n    # prepare data\n    if drop_cols:\n        train = train.drop(['Weight'], axis=1)\n\n    # encode target\n    le = LabelEncoder()\n    train['Label'] = le.fit_transform(train['Label'])\n    \n    # separate X, y \n    X_ = train.drop(['Label'], axis=1)\n    X_ = X_.set_index(['EventId'])           # ,inplace = True\n    \n    X_test_ = test.set_index(['EventId'])    # ,inplace = True\n    y_ = train[\"Label\"]\n    \n    print('Train shape',X_.shape, y_.shape)\n    print('Test shape:',X_test_.shape)\n    return X_, y_, X_test_ \n\n\n\n\ndef plot_scatter(X_r, y, label=['b', 's']):   \n    \n    plt.figure(figsize=(12, 8))\n    plt.scatter(X_r[y==0,0], X_r[y==0,1], color='green', s=0.8, label=label[0])   # c=y_train.values,\n    plt.scatter(X_r[y==1,0], X_r[y==1,1], color='red', s=0.8, label=label[1])     # c=y_train.values,\n    plt.title('t-SNE embeddings (train data)')\n    plt.xlabel('embed #1')\n    plt.ylabel('embed #2')\n    plt.legend(loc='best');\n\n\n\ndef plot_scatter_plotly(X_r, y, mode='TSNE', fname='embed.png'):   \n        \n    traces = []\n    traces.append(go.Scatter(x=X_r[y == 0, 0], y=X_r[y == 0, 1], mode='markers', showlegend=True, name='b'))\n    traces.append(go.Scatter(x=X_r[y == 1, 0], y=X_r[y == 1, 1], mode='markers', showlegend=True, name='s'))\n\n    layout = dict(title=f'{mode} embeddings')\n    \n    fig = go.Figure(data=traces, layout=layout)\n    ply.iplot(fig, filename=fname)\n\n\n\n    \ndef seed_all(SEED):\n    np.random.seed(SEED)\n    random.seed(SEED)\n    \n    \n    ","637f7c50":"# Reading data\n\nSEED = 26\nseed_all(SEED)\npath = '..\/input\/higgs-boson\/'\n\nx_train, y_train, x_test = load_data(path) ","22a26132":"x_train.head()","671ad807":"print(y_train.value_counts(normalize=True))\n# y_train.head()\n# sns.barplot(x = y_train.value_counts().index, y=y_train.value_counts().values)\n# plt.title('Label counts')\n# plt.show()","d50bb3da":"fig, ax = plt.subplots(6,5, figsize=(16, 18))\nax = ax.flatten()\nfor i in range(30):\n    sns.distplot(x_train.iloc[:,i].values, ax=ax[i])\n    ax[i].set_title(x_train.columns[i])\nfig.tight_layout(pad=2.0)    \n\n# sns.pairplot(pd.concat([x_train, y_train]), hue='Label', size=2.5);","ccd545e1":"# separate columns for further analysis\ncols_der = [col for col in x_train.columns if col.startswith('DER')]\ncols_pri = [col for col in x_train.columns if col.startswith('PRI')]\n\nprint(len(cols_der), len(cols_pri))\n\n# plot only DER columns\nx_train[cols_der].plot(kind='box', figsize=(16, 8))\nplt.xticks(rotation=45);\nplt.title('DER_xxx columns')\nplt.show()\n\n# plot only PRI columns\nx_train[cols_pri].plot(kind='box', figsize=(16, 8))\nplt.xticks(rotation=45);\nplt.title('RPI_xxx columns')\nplt.show()","4d407660":"# x_train[cols_pri].columns\ncols_jet = ['PRI_jet_num', 'PRI_jet_leading_pt', 'PRI_jet_leading_eta', 'PRI_jet_leading_phi',\n 'PRI_jet_subleading_pt', 'PRI_jet_subleading_eta', 'PRI_jet_subleading_phi', 'PRI_jet_all_pt']\n\n\nfor col in cols_jet:\n    print(x_train[col].value_counts())","7e59dbf1":"fig, ax = plt.subplots(6,5, figsize=(16, 18))\nax = ax.flatten()\nfor i in range(30):\n    sns.distplot(x_train.loc[x_train['PRI_jet_num']==0].iloc[:,i].values, ax=ax[i], label='jet_num=0')\n    sns.distplot(x_train.loc[x_train['PRI_jet_num']==1].iloc[:,i].values, ax=ax[i], label='jet_num=1')\n    sns.distplot(x_train.loc[x_train['PRI_jet_num']>=2].iloc[:,i].values, ax=ax[i], label='jet_num=2')\n    ax[i].set_title(x_train.columns[i])\n    ax[i].legend()\nfig.tight_layout(pad=2.0)    ","563c0e1b":"x_train.corrwith(y_train).plot(kind='bar', figsize=(12, 6), title='features correlation with target variable')","e14c1536":"from sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler\n\n\n# x_train = normalize(x_train)\n# x_test = normalize(x_test)\n\nsc = StandardScaler()\nx_train = pd.DataFrame(sc.fit_transform(x_train), columns=x_train.columns)\nx_test = pd.DataFrame(sc.transform(x_test), columns=x_train.columns)","b46be86f":"x_train","26d97f36":"%%time\n\n# t-sNE on training data only\ntsne = TSNE(n_components=2)\ntsne_2d_tr = tsne.fit_transform(x_train.values)","42961db3":"# save embeddings for future use\npd.DataFrame(tsne_2d_tr).to_csv('tsne_embeddings.csv')","b878e196":"plot_scatter(tsne_2d_tr, y_train)","79fc200c":"# plotly_scatter(tsne_2d_tr, y_train.values, mode='TSNE', fname='tsne_embed.png')","7ff965f6":"%%time\n\ntsne = TSNE(n_components=2)\ntsne_2d_tr = tsne.fit_transform(x_train.values)\ntsne_2d_te = tsne.fit_transform(x_test.values)","c8206ec6":"# Visualization by plot\n\nx1 = tsne_2d_tr[:,0]\ny1 = tsne_2d_tr[:,1]\n\nx2 = tsne_2d_te[:,0]\ny2 = tsne_2d_te[:,1]\n\nplt.figure(figsize=(12, 10))\nplt.scatter(x1, y1, c=\"blue\", label=\"train data\", s=0.6)\nplt.scatter(x2, y2, c=\"orange\", label=\"test data\", s=0.6)\nplt.xlabel(\"embed #1\")\nplt.ylabel(\"embed #2\")\nplt.legend()","68f5c357":"%%time\n\numap = UMAP(n_components=2)\numap_2d_tr = umap.fit_transform(x_train.values)","333ec0c2":"pd.DataFrame(umap_2d_tr).to_csv('umap_embeddings.csv')","feb571a0":"plot_scatter(umap_2d_tr, y_train.values)","e4514ea2":"# plotly_scatter(umap_2d_tr, y_train.values, mode='UMAP', fname='umap_embed.png')","98fee152":"%%time\n\numap = UMAP(n_components=2)\numap_2d_tr = umap.fit_transform(x_train.values)\numap_2d_te = umap.fit_transform(x_test.values)","f98f5be5":"plt.figure(figsize=(12, 8))\nplt.scatter(umap_2d_tr[:,0], umap_2d_tr[:,1], c=\"blue\", label='train data', s=0.6)\nplt.scatter(umap_2d_te[:,0], umap_2d_te[:,1], c=\"orange\", label='test data', s=0.6)\nplt.title('UMAP embeddings')\nplt.xlabel('embed #1')\nplt.ylabel('embed #2')\nplt.legend()","0807bf49":"# plotly_scatter(umap_2d_tr, y_train.values, mode='UMAP')","ff894046":"# pd.concat([pd.DataFrame(tsne_2d_tr), pd.DataFrame(umap_2d_tr)], axis=1).corr()","a98385b9":"At first glance it doesn't seem that it's easy to clearly separate the target clases, although it seems that the  data has some clustering structure. \n\nLet's now take a look at what UMAP can discern.","66c56f20":"#### Features correlations with target variable","2b531449":"# Next steps: Modelling in the reduced space","fa508aeb":"### EDA Results: \n\n- Seems there are some extreme outlier values -999.000 with same count (99913, 177457) \n\n- Probably are missing values, but further investigation is needed..\n\n- Feature `PRI_jet_num` can be used as categorical feature  \n\n- Features `DER_deltaeta_jet_jet`, `DER_mass_jet_jet`, `DER_prodeta_jet_jet` and `PRI_jet_subleading_pt`, `PRI_jet_subleading_eta`, `PRI_jet_subleading_phi`, are the most correlated with target variable ","0b89d5d3":"Let's check the distributions vs. 'PRI_jet_num'","a2707e66":"#### Let's vhave a look on 'PRI_Jet_xx' type of columns  ","2b24fb00":"# Quick EDA","3e473f93":"### Please, if you find any part of this kernel useful - upvote it to save it in your favorites :)","e3d6f6c3":"## Check distributions","49161c02":"# Higgs Boson Clustering | t-SNE + UMAP [RAPIDS] ","2d18c98e":"### UMAP on Train vs Test data","ba4807d8":"## Normalizing data","877f0d12":"## UMAP","6ee6d572":"## 1. Install RAPIDS","49b044f0":"### Lets'check first if there any differences between the two classes \n\nWe cheat a bit here, since we use information from the target variable ","b946aac1":"### Let's cluster the bosons! \n\nThis kernel is about to try accelerated dimensionality reduction\/clustering methods (t-SNE + UMAP) using the open-source RAPIDS GPU-library. \nI will apply these algorithms to the tabular data of Higgs-Bosson problem mostly for learning and in hope of discerning some patterns :)\n\n\nMore info on RAPIDS [here!](https:\/\/rapids.ai\/start.html)\n\n\n### Inspiring kernels: \n\n- Boyan Tunguz - [MNIST 2D t-SNE with Rapids](https:\/\/www.kaggle.com\/tunguz\/mnist-2d-t-sne-with-rapids)\n\n- Boyan Tunguz - [Melanoma tSNE and UMAP embeddings with Rapids](https:\/\/www.kaggle.com\/tunguz\/melanoma-tsne-and-umap-embeddings-with-rapids)\n\n- Hubert Wagner - [Rapids\/UMAP with Fisher metric on RGB histograms](https:\/\/www.kaggle.com\/hubwag\/rapids-umap-with-fisher-metric-on-rgb-histograms)","9e078ab1":"# Load data","b9c6c065":"Try experiments with:\n\n- raw features (baseline model)\n- reduced features (tSNE, UMAP)\n- raw + reduced \n\n## Stay tuned!","d5ef5324":"# Helpers","bc3a1071":"### Now let's check if there are any differences between train and test data","56a574fb":"# t-SNE"}}