{"cell_type":{"a9d361bb":"code","2bf3eae5":"code","96a5b5d5":"code","05a7afaa":"code","5bf50181":"code","e20d00f9":"code","c826e2d5":"code","dfd140db":"code","16636e4c":"code","2d58b6f3":"code","51c12965":"code","a8997ac7":"code","9a1dc77f":"code","155c9b3a":"code","da4a1e7b":"code","df1f11b3":"code","13775086":"code","959fd693":"code","f72f1413":"code","7af122ba":"code","9272c007":"code","01b3004a":"code","761be431":"code","e21f142d":"code","934298ae":"markdown","bd4b2a5a":"markdown","663c890f":"markdown","c33939e4":"markdown","6f59f949":"markdown","1f24d05a":"markdown","c2aa2939":"markdown","ab13199d":"markdown","f7e7b901":"markdown","e06994e1":"markdown","2ca4e5d8":"markdown","3a40b6c6":"markdown","2666a8ff":"markdown","66211154":"markdown","b2a24710":"markdown","29c72f47":"markdown","cd474599":"markdown","61f1789d":"markdown","8394ef91":"markdown","2a61ce35":"markdown","111c8c4e":"markdown","a6c78e7b":"markdown","7c906052":"markdown","db5b1538":"markdown"},"source":{"a9d361bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bf3eae5":"iris_dataset = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","96a5b5d5":"iris_dataset.head()","05a7afaa":"iris_dataset.info()","5bf50181":"class_vals = iris_dataset['Species'].value_counts()\nclass_vals","e20d00f9":"import seaborn as sns\nimport matplotlib.pyplot as plt","c826e2d5":"sns.countplot(x='Species', data=iris_dataset)\nplt.title('Iris Species Class Count')\nplt.show()","dfd140db":"sns.FacetGrid(iris_dataset, hue='Species', height=6).map(plt.scatter,'SepalLengthCm','SepalWidthCm').add_legend()\nplt.show()","16636e4c":"sns.FacetGrid(iris_dataset, hue='Species', height=6).map(plt.scatter,'PetalLengthCm','PetalWidthCm').add_legend()\nplt.show()","2d58b6f3":"sns.boxplot(y='PetalLengthCm',x='Species',data=iris_dataset)\nplt.title('Petal Lengths of Iris Species')\nplt.show()","51c12965":"sns.boxplot(y='PetalWidthCm',x='Species',data=iris_dataset)\nplt.title('Petal Widths of Iris Species')\nplt.show()","a8997ac7":"sns.boxplot(y='SepalLengthCm',x='Species',data=iris_dataset)\nplt.title('Sepal Lengths of Iris Species')\nplt.show()","9a1dc77f":"sns.boxplot(y='SepalWidthCm',x='Species',data=iris_dataset)\nplt.title('Sepal Widths of Iris Species')\nplt.show()","155c9b3a":"corr=iris_dataset.corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(corr,annot=True)\nplt.show()","da4a1e7b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report","df1f11b3":"X = iris_dataset[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]","13775086":"y = iris_dataset['Species']","959fd693":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","f72f1413":"from sklearn.naive_bayes import GaussianNB\n\ngnb = GaussianNB()\ny_pred = gnb.fit(X_train, y_train).predict(X_test)\nprint('accuracy is ', accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred))","7af122ba":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5)\ny_pred = knn.fit(X_train, y_train).predict(X_test)\nprint('accuracy is ', accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred))","9272c007":"from sklearn.linear_model import LogisticRegression\n\nLR=LogisticRegression()\ny_pred = LR.fit(X_train, y_train).predict(X_test)\nprint('accuracy is ', accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred))","01b3004a":"from sklearn.svm import SVC\n\nsvc=SVC()\ny_pred = svc.fit(X_train, y_train).predict(X_test)\nprint('accuracy is ', accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred))","761be431":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\ny_pred = rf.fit(X_train, y_train).predict(X_test)\nprint('accuracy is ', accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred))","e21f142d":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\ny_pred = dt.fit(X_train, y_train).predict(X_test)\nprint('accuracy is ', accuracy_score(y_pred, y_test))\nprint(classification_report(y_test, y_pred))","934298ae":"### From above we can conclude that Gaussian Naive Bayes is the best Classifier for Iris Dataset","bd4b2a5a":"#### We can observe the same with the box plots separately for each feature of these flowers","663c890f":"## Data Exploration & Visualization","c33939e4":"## Load the Iris Dataset","6f59f949":"## Data Modelling","1f24d05a":"### Heatmap plot","c2aa2939":"### Lets try to find out which Classifier models the dataset best","ab13199d":"Lets Plot out the data and see","f7e7b901":"From above we can observe that:\n1. There are 150 rows of data\n2. 0 Null Values\n3. 4 Different Features\n4. Target Label - Species","e06994e1":"From above we can observe that all the 3 different Species have 50 rows of data. This means our dataset is balanced.","2ca4e5d8":"### Splitting Input and Targets","3a40b6c6":"### Gaussian Naive Bayes Classifier","2666a8ff":"### Logistic Regression Classifier","66211154":"### Splitting Dataset into Train\/Test set","b2a24710":"Obersvations from above plot:\n1. Iris-Setosa - has the maximum Speal Width\n2. Iris-Virginca - has the maximum Speal Length\n3. Iris-Versicolor - falls in the middle of the other 2 species","29c72f47":"### Support Vector Machine Classifier","cd474599":"Obersvations from above plot:\n1. Sepal Length and Sepal Width are negatively i.e. they are not closely related to each other\n2. Petal Length and Petal Width are highly correlated. ","61f1789d":"Lets find out how many different Species exist in the dataset and how many different data values each have","8394ef91":"Obersvations from above plot:\n\n1. Iris-Setosa - has the minimum Petal Width & Petal Length\n2. Iris-Virginca - has the maximum Petal Width & Petal Length\n3. Iris-Versicolor - falls in the middle of the other 2 species","2a61ce35":"### RandomForest Classifier","111c8c4e":"### KNeighborsClassifier Classifier","a6c78e7b":"## Check the Iris Dataset","7c906052":"This dataset is very balanced, without containing any null or missing values and have very few features which are not complex, we don't require to do feature engineering. So we can skip the feature engineering step and proceed to do the data modelling. ","db5b1538":"Lets start with the Data Exploration"}}