{"cell_type":{"80062ff1":"code","8989fb89":"code","17b1b6dc":"code","f47fc5a7":"code","363e4e10":"code","9d65dc0d":"code","bcfe1b1b":"code","666b7961":"code","0cf395e7":"code","9ee3d900":"code","ada850b2":"code","7d7aece5":"code","15cfdad2":"code","4694c1d1":"code","3eb4be1c":"markdown","22e64a3b":"markdown","ceda2352":"markdown","a6a6748a":"markdown","95adc44e":"markdown"},"source":{"80062ff1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\nimport gc\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8989fb89":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                #if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                #    df[col] = df[col].astype(np.float16)\n                #el\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        #else:\n            #df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB --> {:.2f} MB (Decreased by {:.1f}%)'.format(\n        start_mem, end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","17b1b6dc":"!pip install lazypredict","f47fc5a7":"import lazypredict\nfrom lazypredict.Supervised import LazyClassifier\nfrom sklearn.model_selection import train_test_split","363e4e10":"# Load data\nXy = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\nXy= reduce_mem_usage(Xy)","9d65dc0d":"#indexing id\nXy.set_index('id', inplace=True)","bcfe1b1b":"# for brevity, using 10% of data\nXy_frac = Xy.sample(frac=0.10, weights = 1.\/Xy.groupby('target')['target'].transform('count'), random_state=3) ","666b7961":"X,y=Xy_frac.iloc[:, :-1], Xy_frac.iloc[:, -1]","0cf395e7":"del Xy, Xy_frac\ngc.collect()","9ee3d900":"#Splitting data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5, random_state=1)","ada850b2":"#running lazy predict\nclf = LazyClassifier(verbose=1,ignore_warnings=False, custom_metric=None)","7d7aece5":"models,predictions = clf.fit(X_train, X_test, y_train, y_test)","15cfdad2":"#result set\n# print(models)","4694c1d1":"#visuale results\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n \nplt.figure(figsize=(5, 10))\nsns.set_theme(style=\"whitegrid\")\nax = sns.barplot(y=models.index, x=\"ROC AUC\", data=models)\nplt.show","3eb4be1c":"<h3> <font color=blue >To install Lazy Predict","22e64a3b":"<h3><font color=blue>Imports","ceda2352":"<h3> <font color=blue> What is Lazy Predict","a6a6748a":"Lazy Predict helps build a lot of basic models without much code and helps understand which models works better without any parameter tuning.","95adc44e":"Function for reducing memory usage of a pandas dataframe\ncredit to https:\/\/www.kaggle.com\/arjanso\/reducing-dataframe-memory-size-by-65\/notebook"}}