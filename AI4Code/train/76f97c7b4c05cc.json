{"cell_type":{"0c825b78":"code","076bccd6":"code","106b77cc":"code","5e296729":"code","ac8eb641":"code","3e56e054":"code","9a0e45cf":"code","94cf10f6":"code","2a60e8cc":"code","9c597bb4":"code","189c26ac":"code","3cdad6e9":"code","21040d1a":"code","17e6d6ec":"code","6d4320a8":"code","2c8402b3":"code","9a275ca3":"code","fce900c0":"code","64491485":"code","9e98f2bb":"code","5586bf76":"code","0ee3526b":"code","8a2c2647":"code","f6ee2dee":"code","23fa2033":"code","f932a0fb":"code","33a9ca00":"code","5a19211d":"code","51c11e91":"code","11d5a36a":"code","b88a6d71":"code","3e3b6ee9":"code","28d17f78":"code","2b423d0f":"code","c6c9fb06":"code","8f89a9aa":"code","1a0dc6fa":"code","70324f82":"code","fc3f566a":"code","1abecb30":"code","c04b0e4c":"code","8a783ff8":"code","5698cee7":"code","6b3d7473":"code","f103cf13":"code","db8dc4d5":"code","cccacb0f":"code","08406a7d":"code","747f5ecb":"code","f7ed1212":"code","1147ea6b":"code","0877ff4c":"code","5e58fbee":"code","968396fc":"code","a443a458":"code","7ea2e283":"code","a55cdbd4":"code","1ef99935":"code","a2a95fa8":"code","55c2d036":"code","ce271a07":"code","e38d9ac3":"code","e1268ba0":"code","de63e5af":"code","f71db63a":"code","6901c151":"code","2348c83a":"code","6d1a0965":"code","c741834a":"code","ebf532a3":"code","f4048d3f":"code","4601df6f":"code","2147487f":"code","4094fd6b":"code","31994db0":"code","0365d481":"code","b0a81245":"code","867222ef":"code","23188ec6":"code","3f3c6320":"code","8e08c922":"code","0fccfa99":"code","5a70d8be":"code","c32ae84f":"code","f2be89f8":"code","fe998fc8":"code","71aa43c2":"code","d7607241":"code","25b93fd4":"code","5c96455e":"code","8820e907":"code","ba3657b7":"code","d340a9b9":"markdown","80709648":"markdown","25844dab":"markdown","f1022268":"markdown","be47e417":"markdown","6603348c":"markdown","e39a22c9":"markdown","db708b96":"markdown","7a83f32b":"markdown","08645751":"markdown","43b6c1bc":"markdown","ab3199fc":"markdown","86396d2a":"markdown","fa5410c9":"markdown","678f065a":"markdown"},"source":{"0c825b78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","076bccd6":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","106b77cc":"df_train","5e296729":"df_test","ac8eb641":"sample_submission","3e56e054":"train_countries = list(df_train['Country_Region'].unique())\ntest_countries = list(df_test['Country_Region'].unique())","9a0e45cf":"print(len(train_countries))\nprint(len(test_countries))\nprint(len(set(train_countries).intersection(set(test_countries))))","94cf10f6":"df_train_original = df_train\ndf_test_original = df_test","2a60e8cc":"\ndf_train = df_train_original.replace(np.nan, '', regex=True)\ndf_test = df_test_original.replace(np.nan, '', regex=True)","9c597bb4":"df_train[['Country_Region', 'Province_State']]","189c26ac":"df_train['location'] = df_train[['Country_Region', 'Province_State']].apply(lambda x: '-'.join(x), axis=1)\ndf_test['location'] = df_test[['Country_Region', 'Province_State']].apply(lambda x: '-'.join(x), axis=1)","3cdad6e9":"locations_train = df_train['location'].unique()\nlocations_test = df_train['location'].unique()","21040d1a":"print(len(locations_train))\nprint(len(locations_test))","17e6d6ec":"df_train[df_train['ConfirmedCases'] > 0]","6d4320a8":"groups_train = df_train.groupby(['Country_Region', 'Province_State'])\nprint(len(groups_train))","2c8402b3":"# groups_train = df_train[df_train['ConfirmedCases'] > 0].groupby(['Country\/Region', 'Province\/State'])\n# print(len(groups_train))\n# groups_test = df_test[df_test['ConfirmedCases'] > 0].groupby('location')","9a275ca3":"# groups.get_group('China-Hebei')\nmin_date = groups_train['Date'].min()","fce900c0":"min_date","64491485":"min_date_sorted = min_date.sort_values()","9e98f2bb":"for x,y in zip(min_date_sorted.index, min_date_sorted):\n    print(x,y)","5586bf76":"list(df_train[df_train['Country_Region'] == 'China']['Province_State'])","0ee3526b":"df_train[(df_train['Country_Region'] == 'Pakistan')]","8a2c2647":"df_train[(df_train['Country_Region'] == 'US') & (df_train['Province_State'] == 'Washington')]","f6ee2dee":"index = 0\nfor x,y in zip(min_date_sorted.index, min_date_sorted):\n    print(index, x, y)\n    index = index + 1","23fa2033":"min_date_sorted.shape","f932a0fb":"import matplotlib.pyplot as plt ","33a9ca00":"index = 34","5a19211d":"record = df_train[(df_train['Country_Region'] == min_date_sorted.index[index][0]) & (df_train['Province_State'] == min_date_sorted.index[index][1])]","51c11e91":"# x axis values \nx = record['Date']\n# corresponding y axis values \ny1 = record['ConfirmedCases']\ny2 = record['Fatalities']\n  \n# plotting the points  \nplt.plot(x, y1, label = \"Confirmed Cases\") \n# plt.plot(x, y2, label = \"Fatalities\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Confirmed Cases') \n  \n# function to show the plot \nplt.show() ","11d5a36a":"# x axis values \nx = record['Date']\n# corresponding y axis values \ny1 = record['ConfirmedCases']\ny2 = record['Fatalities']\n  \n# plotting the points  \n# plt.plot(x, y1, label = \"Confirmed Cases\") \nplt.plot(x, y2, label = \"Fatalities\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Fatalities') \n  \n# function to show the plot \nplt.show() ","b88a6d71":"import numpy as np \n  \n# curve-fit() function imported from scipy \nfrom scipy.optimize import curve_fit \n  \nfrom matplotlib import pyplot as plt \n  \n# numpy.linspace with the given arguments \n# produce an array of 40 numbers between 0 \n# and 10, both inclusive \nx = np.linspace(0, 10, num = 40) \n  \n  \n# y is another array which stores 3.45 times \n# the sine of (values in x) * 1.334.  \n# The random.normal() draws random sample  \n# from normal (Gaussian) distribution to make \n# them scatter across the base line \ny = 3.45 * np.sin(1.334 * x) + np.random.normal(size = 40) \n  \n# Test function with coefficients as parameters \ndef test(x, a, b): \n    return a * np.sin(b * x) \n  \n# curve_fit() function takes the test-function \n# x-data and y-data as argument and returns  \n# the coefficients a and b in param and \n# the estimated covariance of param in param_cov \nparam, param_cov = curve_fit(test, x, y)","3e3b6ee9":"from numpy import exp, linspace, random, log\nimport math\nt = np.arange(0., 90., 1)\n\n# red dashes, blue squares and green triangles\n# f = [70000*1\/(1+math.pow(math.e,-(x-30)\/2)) for x in t]\n# f = [700*1\/(1+math.pow(math.e,-(x-20)\/2)) * (700*1\/(1+math.pow(math.e,-(x-40)\/2)) + 700) for x in t]\n\nf = 9000*1\/(1+exp(-1*(t-42)\/2.7)) + 50*log(1+exp((t-50))) - 0\nprint(f)\nplt.plot(t, f, 'r--')\nplt.show()","28d17f78":"record = df_train[(df_train['Country_Region'] == min_date_sorted.index[index][0]) & (df_train['Province_State'] == min_date_sorted.index[index][1])]\nrecord = record[record['ConfirmedCases'] > 0]\n\nfrom datetime import datetime\n# datetime.date.today()\nbase_date_object = datetime.strptime('2020-01-22', \"%Y-%m-%d\").date()\nrecord['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n","2b423d0f":"\nrecord2 = record[record['Fatalities'] > 0]\n# x axis values \nx = record['days'].values\nx2 = record2['days'].values\n# corresponding y axis values \ny1 = record['ConfirmedCases'].values\ny2 = record2['Fatalities'].values","c6c9fb06":"# print(record['Date'][3600])\n\nx","8f89a9aa":"# record['days']\ny2","1a0dc6fa":"from scipy.optimize import curve_fit\nfrom numpy import exp, linspace, random, log\n\ndef gaussian(x, amp, cen, wid):\n    return amp * exp(-(x-cen)**2 \/ wid)\n\ndef test(x, a, b, c): \n    return a*1\/(1+exp(-b*(x-c)))\n\ndef test_linear(x, a, b, c, d, e, f): \n    return a*1\/(1+exp(-b*(x-c))) + d*log(1+exp(x-e)) - f\n\ndef custom(x, a, b , c, d, e, f, g):\n    return a*1\/(1+exp(-(x-b)\/c)) * (d*1\/(1+exp(-(x-e)\/f)) + g)","70324f82":"y_max_ = y1[-1]\ny1_prime = np.diff(y1)\ny1_prime2 = np.diff(y1_prime)\nif len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n    max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n    max_slope_range = (max_slope_index+1)\/len(y1_prime)\n    y_max_ = y1[-1]\n    if max_slope_range < 0.75:\n        if y1_prime[max_slope_index] > 0 and max_slope_range < 0.75 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n            y_max_ = y1[-1]\n            pass\n        else:\n            y_max_ = y1[max_slope_index + 1]\n            pass\n    else:\n        y_max_ = y1[-1]","fc3f566a":"y1_prime","1abecb30":"y1","c04b0e4c":"y_max_","8a783ff8":"# param, param_cov = curve_fit(test, np.array(x), np.array(y1), [700, 0.5, 19], bounds=([1,0.1,-30],[800,2,150]))\n# param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y1[-1]\/2, 0.5, (x[-1] - x[0])\/2 + x[0]], bounds=([y1[-1]\/2, 0.1, -30],[y1[-1] + 1000, 2, 150]))\n# param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0],[y_max_*2 + 1500, 1, 150]))\nparam, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*4, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*3, 0.1, 0],[y_max_*8 + 1500, 1, 150]))\n# param, param_cov = curve_fit(test_linear, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0], 50, 45, 0], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0, 1, 30, -100],[y_max_*2 + 1500, 1, 150, 100, 100, 1000]))\n# param, param_cov = curve_fit(custom, np.array(x), np.array(y1), maxfev = 100000, bounds=([1, 0, 1, 1, 30, 1, 1], [2, 60, 8, 200, 90, 8, 1400]))\n# np.array([1,2,3,4])","5698cee7":"# gmodel = Model(custom)\n# print('parameter names: {}'.format(gmodel.param_names))\n# print('independent variables: {}'.format(gmodel.independent_vars))\n# params = gmodel.make_params()\n# result = gmodel.fit(y1, params, x=x)","6b3d7473":"param","f103cf13":"index","db8dc4d5":"y1_pred = test(x,param[0], param[1], param[2])\n# y1_pred = test_linear(x,param[0], param[1], param[2], param[3], param[4], param[5])\n# y1_pred = custom(x,param[0], param[1], param[2], param[3], param[4], param[5], param[6])\nbase_x = range(61,100,1)\n# y1_pred_test = custom(base_x, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\ny1_pred_test = test(base_x, param[0], param[1], param[2])\n# y1_pred_test = test_linear(base_x, param[0], param[1], param[2], param[3], param[4], param[5])","cccacb0f":"# x axis values \n# x = record['Date']\n# corresponding y axis values \n# y1 = record['ConfirmedCases']\n# y2 = record['Fatalities']\n# plotting the points  \nplt.plot(x, y1, label = \"Confirmed Cases\") \nplt.plot(x, y1_pred, label = \"Predicted\") \nplt.plot(base_x, y1_pred_test, label = \"Predicted\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Confirmed Cases') \n  \n# function to show the plot \nplt.show() ","08406a7d":"test([-30],param[0], param[1], param[2])","747f5ecb":"np.diff(y1)","f7ed1212":"y2 = record2['Fatalities'].values\nprint(y2)\nprint(len(y2))","1147ea6b":"x2","0877ff4c":"(x2[-1] - x2[0])\/2 + x2[0]","5e58fbee":"y2[-1]","968396fc":"\n# param2, param_cov2 = curve_fit(test, np.array(x), np.array(y2), [6, 0.5, 10], bounds=([6,0.4,0],[100,0.8,150]))\nparam2, param_cov2 = curve_fit(test, np.array(x2), np.array(y2), [y2[-1]\/2, 0.5, (x2[-1] - x2[0])\/2 + x2[0] -3], bounds=([y2[-1]\/2, 0.2, 0],[y2[-1] + 1, 0.8, 150]))","a443a458":"param2","7ea2e283":"y2_pred = test(x2,param2[0], param2[1], param2[2])","a55cdbd4":"# x axis values \n# x = record['Date']\n# corresponding y axis values \n# y1 = record['ConfirmedCases']\n# y2 = record2['Fatalities']\n  \n# plotting the points  \nplt.plot(x2, y2, label = \"Confirmed Cases\") \nplt.plot(x2, y2_pred, label = \"Fatalities\") \n# naming the x axis \nplt.xlabel('Date') \n# naming the y axis \nplt.ylabel('Label') \n  \n# giving a title to my graph \nplt.title(str(min_date_sorted.index[index][0]) + \" \" + str(min_date_sorted.index[index][1]) + ' - Fatalities') \n  \n# function to show the plot \nplt.show() ","1ef99935":"print(x2)\nprint(y2_pred)\nprint(y2)","a2a95fa8":"record","55c2d036":"base_x = range(61,100,1)\nprint(len(base_x))\nbase_y1 = test(base_x,param[0], param[1], param[2])\nbase_y2 = test(base_x,param2[0], param2[1], param2[2])","ce271a07":"base_y1","e38d9ac3":"base_y2","e1268ba0":"x","de63e5af":"day_index_pred = 0\ndiff1_list = []\ndiff2_list = []\nfor day in base_x:\n    if day in x:\n        day_index = np.where(x == day)\n        diff1 = y1[day_index] - base_y1[day_index_pred]\n        diff1_list.append(diff1)\n    if day in x2:\n        day_index = np.where(x2 == day)\n        diff2 = y2[day_index] - base_y2[day_index_pred]\n        diff2_list.append(diff2)\n    day_index_pred = day_index_pred + 1\n\ndiff1_mean = np.max(diff1_list)\ndiff2_mean = np.max(diff2_list)\n\n#     print('diff1_mean', diff1_mean)\n#     print('diff2_mean', diff2_mean)\nif np.isnan(diff1_mean):\n    pass\nelse:\n    base_y1_mod = list(np.array(base_y1) + diff1_mean)\nif np.isnan(diff2_mean):\n    pass\nelse:\n    base_y2_mod = list(np.array(base_y2) + diff2_mean)\n\nbase_y1_pred = [int(n) for n in base_y1_mod]\nbase_y2_pred = [int(m) for m in base_y2_mod]","f71db63a":"print(list(base_x))\nprint(base_y1)\nprint(base_y1_mod)\nprint(base_y1_pred)\nprint(diff1_list)\nprint(diff1_mean)","6901c151":"print(list(base_x))\nprint(base_y2)\nprint(base_y2_mod)\nprint(base_y2_pred)\nprint(diff2_list)\nprint(diff2_mean)","2348c83a":"# index = 0\n# for key_,_ in zip(min_date_sorted.index, min_date_sorted):\n    \n#     record = df_train[(df_train['Country_Region'] == key_[0]) & (df_train['Province_State'] == key_[1])]\n#     record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n#     # x axis values \n#     x = record['days']\n#     # corresponding y axis values \n#     y1 = record['ConfirmedCases']\n#     y2 = record['Fatalities']\n#     y1_prime = np.diff(y1)\n#     print(index, key_)\n#     print(y1_prime)\n#     print('**************************************************')\n#     plt.plot(x[1:], y1_prime, label = \"Daily Increment\") \n#     # plt.plot(x, y2, label = \"Fatalities\") \n#     # naming the x axis \n#     plt.xlabel('Date') \n#     # naming the y axis \n#     plt.ylabel('Label') \n\n#     # giving a title to my graph \n#     plt.title(str(key_[0]) + \" \" + str(key_[1]) + ' - Daily Increment') \n\n#     # function to show the plot \n#     plt.show()\n#     index = index + 1\n    ","6d1a0965":"df_test","c741834a":"test_groups = df_test.groupby(['Country_Region', 'Province_State'])","ebf532a3":"group = test_groups.get_group((\"Afghanistan\",\"\"))\nprint(group['Date'].values)\nprint(group['ForecastId'].values)","f4048d3f":"index = 0\nfor key_,_ in zip(min_date_sorted.index, min_date_sorted):\n    \n    record = df_train[(df_train['Country_Region'] == key_[0]) & (df_train['Province_State'] == key_[1])]\n    record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n    # x axis values \n    x = record['days']\n    # corresponding y axis values \n    y1 = record['ConfirmedCases']\n    y2 = record['Fatalities']\n    y1_prime = np.diff(y1)\n    \n#     print(y1_prime)\n    stage0 = False\n    stage1 = False\n    stage2 = False\n    stage3 = False\n    count1 = 0\n    count2 = 0\n    for start in range(len(y1_prime)-3):\n        if sum(y1_prime[start:start+3]) <=12:\n            count1 = count1 + 1\n            count2 = 0\n        else:\n            count2 = count2 + 1\n            count1 = 0\n        if not stage0 and count2 == 0 and count1 > 2:\n            stage0 = True\n            count1 = 0\n        if not stage1 and count1 == 0 and count2 > 5:\n            stage0 = True\n            stage1 = True\n            count2 = 0\n        if stage1 and count2 == 0 and count1 > 3:\n            stage2 = True\n            count1 = 0\n        if stage2 and count1 == 0 and count2 > 2:\n            stage3 = True\n            count2 = 0\n    if stage3:\n        print(index, key_)\n        print(y1_prime)\n        # plotting the points  \n        plt.plot(x, y1, label = \"Confirmed Cases\") \n        # plt.plot(x, y2, label = \"Fatalities\") \n        # naming the x axis \n        plt.xlabel('Date') \n        # naming the y axis \n        plt.ylabel('Label') \n\n        # giving a title to my graph \n        plt.title(str(key_[0]) + \" \" + str(key_[1]) + ' - Confirmed Cases') \n\n        # function to show the plot \n        plt.show() \n    index = index + 1","4601df6f":"# Get average fatality rate with respect to confirmed cases\ntotal_confirmed = 0\ntotal_fatalities = 0\nrate = []\nmax_y1 = []\nmax_y2 = []\ndetails = []\nfor index, start_date in zip(min_date_sorted.index, min_date_sorted):\n    print(index, start_date)\n#     print(list(min_date_sorted.index).index(index))\n    record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    if len(record[record['ConfirmedCases'] > 0]) != 0:\n        record = record[record['ConfirmedCases'] > 0]\n    record2 = record\n    if len(record[record['Fatalities'] > 0]) != 0:\n        record2 = record[record['Fatalities'] > 0]\n    # corresponding y axis values \n    \n    y1 = record['ConfirmedCases'].values\n    y2 = record2['Fatalities'].values\n    \n    b = -1\n    bad_index = 0\n    mod_count = 0\n    y1_copy = list(y1)\n    for a in y1:\n        if a < b:\n            y1[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n#     if mod_count > 0:\n#         print(\"*****************\")\n#         print(list(min_date_sorted.index).index(index), index)\n#         print(mod_count)\n#         print(y1)\n#         print(y1_copy)\n#         print(\"*****************\")\n    b = -1\n    bad_index = 0\n    mod_count = 0\n    y2_copy = list(y2)\n    for a in y2:\n        if a < b:\n            y2[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n#     if mod_count > 0:\n#         print(\"*****************\")\n#         print(list(min_date_sorted.index).index(index), index)\n#         print(mod_count)\n#         print(y2)\n#         print(y2_copy)\n#         print(\"*****************\")\n    \n    \n    y1_prime = np.diff(y1)\n    y1_prime2 = np.diff(y1_prime)\n#     print(y1)\n#     print(\"-------------------------------\")\n#     print(y1_prime)\n#     print(\"-------------------------------\")\n#     print(y1_prime2)\n#     print(\"*******************************\")\n    y_max_ = y1[-1]*2 + 1500\n    \n    if len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n        max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n        max_slope_range = (max_slope_index+1)\/len(y1_prime)\n        if max_slope_range < 0.75:\n            if y1_prime[max_slope_index] > 0 and max_slope_range < 0.5 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n                y_max_ = y1[-1]*2 + 1500\n    #             print(\"*******************************\")\n    #             print(list(min_date_sorted.index).index(index), index)\n    #             print(max_slope_index + 1, len(y1_prime))\n    #             print(max_slope_range, \"Max slope range\")\n    #             print(y1)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime2)\n    #             print(\"*******************************\")\n                pass\n            else:\n                y_max_ = y1[max_slope_index + 1]*2 + 1500\n    #             print(\"*******************************\")\n    #             print(index)\n    #             print(max_slope_index + 1, len(y1_prime))\n    #             print(max_slope_range, \"Max slope range\")\n    #             print(y1)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime)\n    #             print(\"-------------------------------\")\n    #             print(y1_prime2)\n    #             print(\"*******************************\")\n                pass\n        else:\n            y_max_ = y1[-1]*2 + 1500\n\n    #     if(index[1] == 'California'):\n    #         print(\"*******************************\")\n    #         print(index)\n    #         print(max_slope_index + 1, len(y1_prime))\n    #         print(max_slope_range, \"Max slope range\")\n    #         print(y1)\n    #         print(\"-------------------------------\")\n    #         print(y1_prime)\n    #         print(\"-------------------------------\")\n    #         print(y1_prime2)\n    #         print(\"*******************************\")\n    ratio = 0\n    if y2[-1] > 0:\n        ratio = y1[-1]\/y2[-1]\n    else:\n        ratio = y1[-1]\n    max_y1.append(y1[-1])\n    max_y2.append(y2[-1])\n    rate.append(ratio)\n    details.append(\" \".join([str(x) for x in [y1[-1], \" ------- \", y2[-1], \" ---- \", ratio, \" --------------- \", record['Date'].values[-1], \" ---- \", index, \"----\", list(min_date_sorted.index).index(index)]]))\n#     print(y1[-1], \" ------- \", y2[-1], \" ---- \", ratio, \" --------------- \", record['Date'].values[-1], \" ---- \", index, \"----\", list(min_date_sorted.index).index(index))\n    total_confirmed = total_confirmed + y1[-1]\n    total_fatalities = total_fatalities + y2[-1]\n\nprint(total_confirmed\/total_fatalities)","2147487f":"for a1, a2, b, c in zip(max_y1, max_y2, rate, details):\n    print(c)","4094fd6b":"print(pd.DataFrame(rate).describe())\nprint('Median ', np.median(rate))\nprint('Mean ', np.mean(rate))\nprint('Average', np.average(rate, weights = max_y2))\navg = np.average(rate, weights = max_y2)","31994db0":"for a1, a2, b, c in zip(max_y1, max_y2, rate, details):\n    if(a1 < 100 and a2 < 4 and b < avg):\n        # correct the y2_pred as per average rate = 22\n        print(c)\n        pass\n    else:\n        ## correct the y2_pred as per the rate\n#         print(c)\n        pass","0365d481":"list(min_date_sorted.index)","b0a81245":"# mapping = \"0 ## (\\'Afghanistan\\', \\'\\') ## 2$$1 ## (\\'Saudi Arabia\\', \\'\\') ## 2$$2 ## (\\'San Marino\\', \\'\\') ## 1.1$$3 ## (\\'Saint Vincent and the Grenadines\\', \\'\\') ## 1$$4 ## (\\'Saint Lucia\\', \\'\\') ## 1$$5 ## (\\'Saint Kitts and Nevis\\', \\'\\') ## 1$$6 ## (\\'Rwanda\\', \\'\\') ## 1.2$$7 ## (\\'Russia\\', \\'\\') ## 4$$8 ## (\\'Romania\\', \\'\\') ## 2$$9 ## (\\'Qatar\\', \\'\\') ## 3$$10 ## (\\'Portugal\\', \\'\\') ## 2$$11 ## (\\'Poland\\', \\'\\') ## 4$$12 ## (\\'Philippines\\', \\'\\') ## 2$$13 ## (\\'Peru\\', \\'\\') ## 4$$14 ## (\\'Paraguay\\', \\'\\') ## 2$$15 ## (\\'Papua New Guinea\\', \\'\\') ## 1$$16 ## (\\'Senegal\\', \\'\\') ## 2$$17 ## (\\'Panama\\', \\'\\') ## 2$$18 ## (\\'Serbia\\', \\'\\') ## 4$$19 ## (\\'Sierra Leone\\', \\'\\') ## 2$$20 ## (\\'Thailand\\', \\'\\') ## 1.2$$21 ## (\\'Tanzania\\', \\'\\') ## 1$$22 ## (\\'Taiwan*\\', \\'\\') ## 1$$23 ## (\\'Syria\\', \\'\\') ## 1$$24 ## (\\'Switzerland\\', \\'\\') ## 1.5$$25 ## (\\'Sweden\\', \\'\\') ## 3$$26 ## (\\'Suriname\\', \\'\\') ## 1$$27 ## (\\'Sudan\\', \\'\\') ## 1$$28 ## (\\'Sri Lanka\\', \\'\\') ## 1$$29 ## (\\'Spain\\', \\'\\') ## 1.2$$30 ## (\\'South Africa\\', \\'\\') ## 1$$31 ## (\\'Somalia\\', \\'\\') ## 1$$32 ## (\\'Slovenia\\', \\'\\') ## 1$$33 ## (\\'Slovakia\\', \\'\\') ## 2$$34 ## (\\'Singapore\\', \\'\\') ## 3$$35 ## (\\'Seychelles\\', \\'\\') ## 1$$36 ## (\\'Timor-Leste\\', \\'\\') ## 1$$37 ## (\\'Pakistan\\', \\'\\') ## 4$$38 ## (\\'Norway\\', \\'\\') ## 2$$39 ## (\\'Mauritania\\', \\'\\') ## 1$$40 ## (\\'Malta\\', \\'\\') ## 4$$41 ## (\\'Mali\\', \\'\\') ## 4$$42 ## (\\'Maldives\\', \\'\\') ## 1$$43 ## (\\'Malaysia\\', \\'\\') ## 2$$44 ## (\\'Madagascar\\', \\'\\') ## 2$$45 ## (\\'MS Zaandam\\', \\'\\') ## 1$$46 ## (\\'Luxembourg\\', \\'\\') ## 1.5$$47 ## (\\'Lithuania\\', \\'\\') ## 1$$48 ## (\\'Liechtenstein\\', \\'\\') ## 1$$49 ## (\\'Libya\\', \\'\\') ## 1$$50 ## (\\'Liberia\\', \\'\\') ## 2$$51 ## (\\'Lebanon\\', \\'\\') ## 1.1$$52 ## (\\'Latvia\\', \\'\\') ## 1.1$$53 ## (\\'Laos\\', \\'\\') ## 1$$54 ## (\\'Mauritius\\', \\'\\') ## 1.5$$55 ## (\\'Oman\\', \\'\\') ## 4$$56 ## (\\'Mexico\\', \\'\\') ## 4$$57 ## (\\'Monaco\\', \\'\\') ## 1.5$$58 ## (\\'North Macedonia\\', \\'\\') ## 2$$59 ## (\\'Nigeria\\', \\'\\') ## 1.5$$60 ## (\\'Niger\\', \\'\\') ## 2$$61 ## (\\'Nicaragua\\', \\'\\') ## 1$$62 ## (\\'New Zealand\\', \\'\\') ## 1.5$$63 ## (\\'Netherlands\\', \\'Sint Maarten\\') ## 3$$64 ## (\\'Netherlands\\', \\'Curacao\\') ## 3$$65 ## (\\'Netherlands\\', \\'Aruba\\') ## 2$$66 ## (\\'Netherlands\\', \\'\\') ## 1.5$$67 ## (\\'Nepal\\', \\'\\') ## 1$$68 ## (\\'Namibia\\', \\'\\') ## 1$$69 ## (\\'Mozambique\\', \\'\\') ## 1$$70 ## (\\'Morocco\\', \\'\\') ## 1.2$$71 ## (\\'Montenegro\\', \\'\\') ## 1.2$$72 ## (\\'Mongolia\\', \\'\\') ## 1$$73 ## (\\'Moldova\\', \\'\\') ## 2$$74 ## (\\'Togo\\', \\'\\') ## 3$$75 ## (\\'Trinidad and Tobago\\', \\'\\') ## 1$$76 ## (\\'Tunisia\\', \\'\\') ## 1.1$$77 ## (\\'US\\', \\'Wisconsin\\') ## 3$$78 ## (\\'US\\', \\'West Virginia\\') ## 3$$79 ## (\\'US\\', \\'Washington\\') ## 2$$80 ## (\\'US\\', \\'Virginia\\') ## 2$$81 ## (\\'US\\', \\'Virgin Islands\\') ## 1$$82 ## (\\'US\\', \\'Vermont\\') ## 2$$83 ## (\\'US\\', \\'Utah\\') ## 2$$84 ## (\\'US\\', \\'Texas\\') ## 2$$85 ## (\\'US\\', \\'Tennessee\\') ## 2$$86 ## (\\'US\\', \\'South Dakota\\') ## 2$$87 ## (\\'US\\', \\'South Carolina\\') ## 2$$88 ## (\\'US\\', \\'Rhode Island\\') ## 2$$89 ## (\\'US\\', \\'Puerto Rico\\') ## 2$$90 ## (\\'US\\', \\'Pennsylvania\\') ## 2$$91 ## (\\'US\\', \\'Oregon\\') ## 2$$92 ## (\\'US\\', \\'Wyoming\\') ## 2$$93 ## (\\'US\\', \\'Oklahoma\\') ## 2$$94 ## (\\'Uganda\\', \\'\\') ## 1$$95 ## (\\'United Arab Emirates\\', \\'\\') ## 2$$96 ## (\\'West Bank and Gaza\\', \\'\\') ## 2$$97 ## (\\'Vietnam\\', \\'\\') ## 1.2$$98 ## (\\'Venezuela\\', \\'\\') ## 1.2$$99 ## (\\'Uzbekistan\\', \\'\\') ## 3$$100 ## (\\'Uruguay\\', \\'\\') ## 1.5$$101 ## (\\'United Kingdom\\', \\'Turks and Caicos Islands\\') ## 1$$102 ## (\\'United Kingdom\\', \\'Montserrat\\') ## 1$$103 ## (\\'United Kingdom\\', \\'Isle of Man\\') ## 1.5$$104 ## (\\'United Kingdom\\', \\'Gibraltar\\') ## 1.2$$105 ## (\\'United Kingdom\\', \\'Channel Islands\\') ## 1.5$$106 ## (\\'United Kingdom\\', \\'Cayman Islands\\') ## 2$$107 ## (\\'United Kingdom\\', \\'British Virgin Islands\\') ## 1$$108 ## (\\'United Kingdom\\', \\'Bermuda\\') ## 1$$109 ## (\\'United Kingdom\\', \\'Anguilla\\') ## 1$$110 ## (\\'United Kingdom\\', \\'\\') ## 2$$111 ## (\\'Ukraine\\', \\'\\') ## 2$$112 ## (\\'US\\', \\'Ohio\\') ## 2$$113 ## (\\'US\\', \\'North Dakota\\') ## 2$$114 ## (\\'US\\', \\'North Carolina\\') ## 2$$115 ## (\\'US\\', \\'Idaho\\') ## 2$$116 ## (\\'US\\', \\'Hawaii\\') ## 2$$117 ## (\\'US\\', \\'Guam\\') ## 2$$118 ## (\\'US\\', \\'Georgia\\') ## 2$$119 ## (\\'US\\', \\'Florida\\') ## 2$$120 ## (\\'US\\', \\'District of Columbia\\') ## 2$$121 ## (\\'US\\', \\'Delaware\\') ## 2$$122 ## (\\'US\\', \\'Connecticut\\') ## 2$$123 ## (\\'US\\', \\'Colorado\\') ## 2$$124 ## (\\'US\\', \\'California\\') ## 2$$125 ## (\\'US\\', \\'Arkansas\\') ## 2$$126 ## (\\'US\\', \\'Arizona\\') ## 2$$127 ## (\\'US\\', \\'Alaska\\') ## 2$$128 ## (\\'US\\', \\'Alabama\\') ## 2$$129 ## (\\'Turkey\\', \\'\\') ## 4$$130 ## (\\'US\\', \\'Illinois\\') ## 2$$131 ## (\\'US\\', \\'Indiana\\') ## 2$$132 ## (\\'US\\', \\'Iowa\\') ## 2$$133 ## (\\'US\\', \\'Kansas\\') ## 2$$134 ## (\\'US\\', \\'New York\\') ## 2$$135 ## (\\'US\\', \\'New Mexico\\') ## 2$$136 ## (\\'US\\', \\'New Jersey\\') ## 2$$137 ## (\\'US\\', \\'New Hampshire\\') ## 2$$138 ## (\\'US\\', \\'Nevada\\') ## 2$$139 ## (\\'US\\', \\'Nebraska\\') ## 2$$140 ## (\\'US\\', \\'Montana\\') ## 2$$141 ## (\\'Kyrgyzstan\\', \\'\\') ## 2$$142 ## (\\'US\\', \\'Missouri\\') ## 2$$143 ## (\\'US\\', \\'Minnesota\\') ## 2$$144 ## (\\'US\\', \\'Michigan\\') ## 2$$145 ## (\\'US\\', \\'Massachusetts\\') ## 2$$146 ## (\\'US\\', \\'Maryland\\') ## 2$$147 ## (\\'US\\', \\'Maine\\') ## 2$$148 ## (\\'US\\', \\'Louisiana\\') ## 2$$149 ## (\\'US\\', \\'Kentucky\\') ## 2$$150 ## (\\'US\\', \\'Mississippi\\') ## 2$$151 ## (\\'Kuwait\\', \\'\\') ## 2$$152 ## (\\'Kosovo\\', \\'\\') ## 2$$153 ## (\\'Korea, South\\', \\'\\') ## 1.1$$154 ## (\\'China\\', \\'Anhui\\') ## 1$$155 ## (\\'Chile\\', \\'\\') ## 2$$156 ## (\\'Chad\\', \\'\\') ## 1$$157 ## (\\'Central African Republic\\', \\'\\') ## 1$$158 ## (\\'Canada\\', \\'Yukon\\') ## 1$$159 ## (\\'Canada\\', \\'Saskatchewan\\') ## 1.5$$160 ## (\\'Canada\\', \\'Quebec\\') ## 2$$161 ## (\\'Canada\\', \\'Prince Edward Island\\') ## 2$$162 ## (\\'Canada\\', \\'Ontario\\') ## 2$$163 ## (\\'Canada\\', \\'Nova Scotia\\') ## 2$$164 ## (\\'Canada\\', \\'Northwest Territories\\') ## 1$$165 ## (\\'Canada\\', \\'Newfoundland and Labrador\\') ## 1$$166 ## (\\'Canada\\', \\'New Brunswick\\') ## 1$$167 ## (\\'Canada\\', \\'Manitoba\\') ## 1.5$$168 ## (\\'Canada\\', \\'British Columbia\\') ## 1.5$$169 ## (\\'China\\', \\'Beijing\\') ## 1.1$$170 ## (\\'Canada\\', \\'Alberta\\') ## 2$$171 ## (\\'China\\', \\'Chongqing\\') ## 1$$172 ## (\\'China\\', \\'Gansu\\') ## 1.1$$173 ## (\\'China\\', \\'Liaoning\\') ## 1.1$$174 ## (\\'China\\', \\'Jilin\\') ## 1$$175 ## (\\'China\\', \\'Jiangxi\\') ## 1$$176 ## (\\'China\\', \\'Jiangsu\\') ## 1$$177 ## (\\'China\\', \\'Inner Mongolia\\') ## 1.1$$178 ## (\\'China\\', \\'Hunan\\') ## 1$$179 ## (\\'China\\', \\'Hubei\\') ## 1$$180 ## (\\'China\\', \\'Hong Kong\\') ## 1.2$$181 ## (\\'China\\', \\'Henan\\') ## 1$$182 ## (\\'China\\', \\'Heilongjiang\\') ## 1.1$$183 ## (\\'China\\', \\'Hebei\\') ## 1$$184 ## (\\'China\\', \\'Hainan\\') ## 1$$185 ## (\\'China\\', \\'Guizhou\\') ## 1$$186 ## (\\'China\\', \\'Guangxi\\') ## 1$$187 ## (\\'China\\', \\'Guangdong\\') ## 1$$188 ## (\\'China\\', \\'Fujian\\') ## 1.1$$189 ## (\\'Cameroon\\', \\'\\') ## 1$$190 ## (\\'Cambodia\\', \\'\\') ## 1$$191 ## (\\'Cabo Verde\\', \\'\\') ## 1$$192 ## (\\'Australia\\', \\'Western Australia\\') ## 1$$193 ## (\\'Australia\\', \\'Victoria\\') ## 1.1$$194 ## (\\'Australia\\', \\'Tasmania\\') ## 1.1$$195 ## (\\'Australia\\', \\'South Australia\\') ## 1.1$$196 ## (\\'Australia\\', \\'Queensland\\') ## 1.1$$197 ## (\\'Australia\\', \\'Northern Territory\\') ## 1.1$$198 ## (\\'Australia\\', \\'New South Wales\\') ## 1.1$$199 ## (\\'Australia\\', \\'Australian Capital Territory\\') ## 1.1$$200 ## (\\'Armenia\\', \\'\\') ## 2$$201 ## (\\'Argentina\\', \\'\\') ## 1.5$$202 ## (\\'Antigua and Barbuda\\', \\'\\') ## 2$$203 ## (\\'Angola\\', \\'\\') ## 2$$204 ## (\\'Andorra\\', \\'\\') ## 1.5$$205 ## (\\'Algeria\\', \\'\\') ## 1.5$$206 ## (\\'Albania\\', \\'\\') ## 1.5$$207 ## (\\'Austria\\', \\'\\') ## 1.5$$208 ## (\\'Azerbaijan\\', \\'\\') ## 3$$209 ## (\\'Bahamas\\', \\'\\') ## 2$$210 ## (\\'Bahrain\\', \\'\\') ## 2$$211 ## (\\'Burundi\\', \\'\\') ## 1$$212 ## (\\'Burma\\', \\'\\') ## 1$$213 ## (\\'Burkina Faso\\', \\'\\') ## 1.5$$214 ## (\\'Bulgaria\\', \\'\\') ## 1.5$$215 ## (\\'Brunei\\', \\'\\') ## 1$$216 ## (\\'Brazil\\', \\'\\') ## 4$$217 ## (\\'Botswana\\', \\'\\') ## 1$$218 ## (\\'China\\', \\'Macau\\') ## 1.1$$219 ## (\\'Bosnia and Herzegovina\\', \\'\\') ## 3$$220 ## (\\'Bhutan\\', \\'\\') ## 1$$221 ## (\\'Benin\\', \\'\\') ## 1$$222 ## (\\'Belize\\', \\'\\') ## 1$$223 ## (\\'Belgium\\', \\'\\') ## 1.5$$224 ## (\\'Belarus\\', \\'\\') ## 2$$225 ## (\\'Barbados\\', \\'\\') ## 1.5$$226 ## (\\'Bangladesh\\', \\'\\') ## 4$$227 ## (\\'Bolivia\\', \\'\\') ## 2$$228 ## (\\'Zambia\\', \\'\\') ## 1$$229 ## (\\'China\\', \\'Ningxia\\') ## 1$$230 ## (\\'China\\', \\'Shaanxi\\') ## 1$$231 ## (\\'Guinea\\', \\'\\') ## 1.5$$232 ## (\\'Guatemala\\', \\'\\') ## 2$$233 ## (\\'Grenada\\', \\'\\') ## 1$$234 ## (\\'Greece\\', \\'\\') ## 1.5$$235 ## (\\'Ghana\\', \\'\\') ## 4$$236 ## (\\'Germany\\', \\'\\') ## 1.5$$237 ## (\\'Georgia\\', \\'\\') ## 1.5$$238 ## (\\'Gambia\\', \\'\\') ## 2$$239 ## (\\'Gabon\\', \\'\\') ## 4$$240 ## (\\'France\\', \\'St Martin\\') ## 1$$241 ## (\\'France\\', \\'Saint Barthelemy\\') ## 1$$242 ## (\\'France\\', \\'Reunion\\') ## 1.1$$243 ## (\\'France\\', \\'New Caledonia\\') ## 1.1$$244 ## (\\'France\\', \\'Mayotte\\') ## 1.5$$245 ## (\\'France\\', \\'Martinique\\') ## 1.1$$246 ## (\\'Guinea-Bissau\\', \\'\\') ## 4$$247 ## (\\'France\\', \\'Guadeloupe\\') ## 1.1$$248 ## (\\'Guyana\\', \\'\\') ## 1$$249 ## (\\'Holy See\\', \\'\\') ## 1$$250 ## (\\'Kenya\\', \\'\\') ## 1.5$$251 ## (\\'Kazakhstan\\', \\'\\') ## 2$$252 ## (\\'Jordan\\', \\'\\') ## 1.2$$253 ## (\\'Japan\\', \\'\\') ## 2$$254 ## (\\'Jamaica\\', \\'\\') ## 2$$255 ## (\\'Italy\\', \\'\\') ## 1.2$$256 ## (\\'Israel\\', \\'\\') ## 2$$257 ## (\\'Ireland\\', \\'\\') ## 2$$258 ## (\\'Iraq\\', \\'\\') ## 3$$259 ## (\\'Iran\\', \\'\\') ## 1.5$$260 ## (\\'Indonesia\\', \\'\\') ## 3$$261 ## (\\'India\\', \\'\\') ## 3$$262 ## (\\'Iceland\\', \\'\\') ## 1.2$$263 ## (\\'Hungary\\', \\'\\') ## 2$$264 ## (\\'Honduras\\', \\'\\') ## 1$$265 ## (\\'Haiti\\', \\'\\') ## 1$$266 ## (\\'France\\', \\'French Polynesia\\') ## 1.2$$267 ## (\\'France\\', \\'French Guiana\\') ## 1.5$$268 ## (\\'France\\', \\'\\') ## 1.5$$269 ## (\\'Croatia\\', \\'\\') ## 1.5$$270 ## (\\\"Cote d\\'Ivoire\\\", \\'\\') ## 1.5$$271 ## (\\'Costa Rica\\', \\'\\') ## 1.5$$272 ## (\\'Congo (Kinshasa)\\', \\'\\') ## 1.5$$273 ## (\\'Congo (Brazzaville)\\', \\'\\') ## 1.5$$274 ## (\\'Colombia\\', \\'\\') ## 4$$275 ## (\\'China\\', \\'Zhejiang\\') ## 1$$276 ## (\\'China\\', \\'Yunnan\\') ## 1$$277 ## (\\'China\\', \\'Xinjiang\\') ## 1$$278 ## (\\'China\\', \\'Tibet\\') ## 1$$279 ## (\\'China\\', \\'Tianjin\\') ## 1.1$$280 ## (\\'China\\', \\'Sichuan\\') ## 1$$281 ## (\\'China\\', \\'Shanxi\\') ## 1$$282 ## (\\'China\\', \\'Shanghai\\') ## 1.1$$283 ## (\\'China\\', \\'Shandong\\') ## 1$$284 ## (\\'Cuba\\', \\'\\') ## 3$$285 ## (\\'Cyprus\\', \\'\\') ## 1.5$$286 ## (\\'Czechia\\', \\'\\') ## 1.5$$287 ## (\\'Denmark\\', \\'\\') ## 2$$288 ## (\\'Finland\\', \\'\\') ## 2$$289 ## (\\'Fiji\\', \\'\\') ## 2$$290 ## (\\'Ethiopia\\', \\'\\') ## 2$$291 ## (\\'Eswatini\\', \\'\\') ## 1$$292 ## (\\'Estonia\\', \\'\\') ## 1.1$$293 ## (\\'Eritrea\\', \\'\\') ## 1$$294 ## (\\'Equatorial Guinea\\', \\'\\') ## 1$$295 ## (\\'China\\', \\'Qinghai\\') ## 1$$296 ## (\\'El Salvador\\', \\'\\') ## 3$$297 ## (\\'Ecuador\\', \\'\\') ## 1.1$$298 ## (\\'Dominican Republic\\', \\'\\') ## 1.5$$299 ## (\\'Dominica\\', \\'\\') ## 1$$300 ## (\\'Djibouti\\', \\'\\') ## 3$$301 ## (\\'Diamond Princess\\', \\'\\') ## 1$$302 ## (\\'Denmark\\', \\'Greenland\\') ## 1$$303 ## (\\'Denmark\\', \\'Faroe Islands\\') ## 1$$304 ## (\\'Egypt\\', \\'\\') ## 2$$305 ## (\\'Zimbabwe\\', \\'\\') ## 1\"\n# mapped_list = mapping.split(\"$$\")\n# mapped_list = [mapped_row.split(\"##\") for mapped_row in mapped_list]\n# mapped_list = [(a[1].strip(), float(a[2].strip())) for a in mapped_list]\n# mapped_dict = {}\n# for pair in mapped_list:\n#     fields = pair[0][1:-1].split(', \\'')\n#     mapped_dict.update({(fields[0].strip()[1:-1], fields[1].strip()[:-1]): pair[1]})\n\n# rate_1 = []\n# rate_1_1 = []\n# rate_1_2 = []\n# rate_1_5 = []\n# rate_2 = []\n# rate_3 = []\n# rate_4 =[]\n# rates = [1,1.1,1.2,1.5,2,3,4]\n# indices = [rate_1, rate_1_1, rate_1_2, rate_1_5, rate_2, rate_3, rate_4]\n\n# hr_id = list(min_date_sorted.index)\n# for index, pair in enumerate(min_date_sorted.index):\n#     if pair in mapped_dict.keys():\n#         indices[rates.index(mapped_dict[pair])].append(index)\n#     else:\n#         print(index, pair)\n#         indices[rates.index(2)].append(index)\n\n# print(rate_1)\n# print(rate_1_1)\n# print(rate_1_2)\n# print(rate_1_5)\n# print(rate_2)\n# print(rate_3)\n# print(rate_4)","867222ef":"# mapping = \"0 ## (\\'Afghanistan\\', \\'\\') ## 2$$1 ## (\\'Saudi Arabia\\', \\'\\') ## 2$$2 ## (\\'San Marino\\', \\'\\') ## 1.1$$3 ## (\\'Saint Vincent and the Grenadines\\', \\'\\') ## 1$$4 ## (\\'Saint Lucia\\', \\'\\') ## 1$$5 ## (\\'Saint Kitts and Nevis\\', \\'\\') ## 1$$6 ## (\\'Rwanda\\', \\'\\') ## 1.2$$7 ## (\\'Russia\\', \\'\\') ## 4$$8 ## (\\'Romania\\', \\'\\') ## 2$$9 ## (\\'Qatar\\', \\'\\') ## 3$$10 ## (\\'Portugal\\', \\'\\') ## 2$$11 ## (\\'Poland\\', \\'\\') ## 4$$12 ## (\\'Philippines\\', \\'\\') ## 2$$13 ## (\\'Peru\\', \\'\\') ## 4$$14 ## (\\'Paraguay\\', \\'\\') ## 2$$15 ## (\\'Papua New Guinea\\', \\'\\') ## 1$$16 ## (\\'Senegal\\', \\'\\') ## 2$$17 ## (\\'Panama\\', \\'\\') ## 2$$18 ## (\\'Serbia\\', \\'\\') ## 4$$19 ## (\\'Sierra Leone\\', \\'\\') ## 2$$20 ## (\\'Thailand\\', \\'\\') ## 1.2$$21 ## (\\'Tanzania\\', \\'\\') ## 1$$22 ## (\\'Taiwan*\\', \\'\\') ## 1$$23 ## (\\'Syria\\', \\'\\') ## 1$$24 ## (\\'Switzerland\\', \\'\\') ## 1.5$$25 ## (\\'Sweden\\', \\'\\') ## 3$$26 ## (\\'Suriname\\', \\'\\') ## 1$$27 ## (\\'Sudan\\', \\'\\') ## 1$$28 ## (\\'Sri Lanka\\', \\'\\') ## 1$$29 ## (\\'Spain\\', \\'\\') ## 1.2$$30 ## (\\'South Africa\\', \\'\\') ## 1$$31 ## (\\'Somalia\\', \\'\\') ## 1$$32 ## (\\'Slovenia\\', \\'\\') ## 1$$33 ## (\\'Slovakia\\', \\'\\') ## 2$$34 ## (\\'Singapore\\', \\'\\') ## 3$$35 ## (\\'Seychelles\\', \\'\\') ## 1$$36 ## (\\'Timor-Leste\\', \\'\\') ## 1$$37 ## (\\'Pakistan\\', \\'\\') ## 4$$38 ## (\\'Norway\\', \\'\\') ## 2$$39 ## (\\'Mauritania\\', \\'\\') ## 1$$40 ## (\\'Malta\\', \\'\\') ## 4$$41 ## (\\'Mali\\', \\'\\') ## 4$$42 ## (\\'Maldives\\', \\'\\') ## 1$$43 ## (\\'Malaysia\\', \\'\\') ## 2$$44 ## (\\'Madagascar\\', \\'\\') ## 2$$45 ## (\\'MS Zaandam\\', \\'\\') ## 1$$46 ## (\\'Luxembourg\\', \\'\\') ## 1.5$$47 ## (\\'Lithuania\\', \\'\\') ## 1$$48 ## (\\'Liechtenstein\\', \\'\\') ## 1$$49 ## (\\'Libya\\', \\'\\') ## 1$$50 ## (\\'Liberia\\', \\'\\') ## 2$$51 ## (\\'Lebanon\\', \\'\\') ## 1.1$$52 ## (\\'Latvia\\', \\'\\') ## 1.1$$53 ## (\\'Laos\\', \\'\\') ## 1$$54 ## (\\'Mauritius\\', \\'\\') ## 1.5$$55 ## (\\'Oman\\', \\'\\') ## 4$$56 ## (\\'Mexico\\', \\'\\') ## 4$$57 ## (\\'Monaco\\', \\'\\') ## 1.5$$58 ## (\\'North Macedonia\\', \\'\\') ## 2$$59 ## (\\'Nigeria\\', \\'\\') ## 1.5$$60 ## (\\'Niger\\', \\'\\') ## 2$$61 ## (\\'Nicaragua\\', \\'\\') ## 1$$62 ## (\\'New Zealand\\', \\'\\') ## 1.5$$63 ## (\\'Netherlands\\', \\'Sint Maarten\\') ## 3$$64 ## (\\'Netherlands\\', \\'Curacao\\') ## 3$$65 ## (\\'Netherlands\\', \\'Aruba\\') ## 2$$66 ## (\\'Netherlands\\', \\'\\') ## 1.5$$67 ## (\\'Nepal\\', \\'\\') ## 1$$68 ## (\\'Namibia\\', \\'\\') ## 1$$69 ## (\\'Mozambique\\', \\'\\') ## 1$$70 ## (\\'Morocco\\', \\'\\') ## 1.2$$71 ## (\\'Montenegro\\', \\'\\') ## 1.2$$72 ## (\\'Mongolia\\', \\'\\') ## 1$$73 ## (\\'Moldova\\', \\'\\') ## 2$$74 ## (\\'Togo\\', \\'\\') ## 3$$75 ## (\\'Trinidad and Tobago\\', \\'\\') ## 1$$76 ## (\\'Tunisia\\', \\'\\') ## 1.1$$77 ## (\\'US\\', \\'Wisconsin\\') ## 3$$78 ## (\\'US\\', \\'West Virginia\\') ## 3$$79 ## (\\'US\\', \\'Washington\\') ## 2$$80 ## (\\'US\\', \\'Virginia\\') ## 2$$81 ## (\\'US\\', \\'Virgin Islands\\') ## 1$$82 ## (\\'US\\', \\'Vermont\\') ## 2$$83 ## (\\'US\\', \\'Utah\\') ## 2$$84 ## (\\'US\\', \\'Texas\\') ## 2$$85 ## (\\'US\\', \\'Tennessee\\') ## 2$$86 ## (\\'US\\', \\'South Dakota\\') ## 2$$87 ## (\\'US\\', \\'South Carolina\\') ## 2$$88 ## (\\'US\\', \\'Rhode Island\\') ## 2$$89 ## (\\'US\\', \\'Puerto Rico\\') ## 2$$90 ## (\\'US\\', \\'Pennsylvania\\') ## 2$$91 ## (\\'US\\', \\'Oregon\\') ## 2$$92 ## (\\'US\\', \\'Wyoming\\') ## 2$$93 ## (\\'US\\', \\'Oklahoma\\') ## 2$$94 ## (\\'Uganda\\', \\'\\') ## 1$$95 ## (\\'United Arab Emirates\\', \\'\\') ## 2$$96 ## (\\'West Bank and Gaza\\', \\'\\') ## 2$$97 ## (\\'Vietnam\\', \\'\\') ## 1.2$$98 ## (\\'Venezuela\\', \\'\\') ## 1.2$$99 ## (\\'Uzbekistan\\', \\'\\') ## 3$$100 ## (\\'Uruguay\\', \\'\\') ## 1.5$$101 ## (\\'United Kingdom\\', \\'Turks and Caicos Islands\\') ## 1$$102 ## (\\'United Kingdom\\', \\'Montserrat\\') ## 1$$103 ## (\\'United Kingdom\\', \\'Isle of Man\\') ## 1.5$$104 ## (\\'United Kingdom\\', \\'Gibraltar\\') ## 1.2$$105 ## (\\'United Kingdom\\', \\'Channel Islands\\') ## 1.5$$106 ## (\\'United Kingdom\\', \\'Cayman Islands\\') ## 2$$107 ## (\\'United Kingdom\\', \\'British Virgin Islands\\') ## 1$$108 ## (\\'United Kingdom\\', \\'Bermuda\\') ## 1$$109 ## (\\'United Kingdom\\', \\'Anguilla\\') ## 1$$110 ## (\\'United Kingdom\\', \\'\\') ## 2$$111 ## (\\'Ukraine\\', \\'\\') ## 2$$112 ## (\\'US\\', \\'Ohio\\') ## 2$$113 ## (\\'US\\', \\'North Dakota\\') ## 2$$114 ## (\\'US\\', \\'North Carolina\\') ## 2$$115 ## (\\'US\\', \\'Idaho\\') ## 2$$116 ## (\\'US\\', \\'Hawaii\\') ## 2$$117 ## (\\'US\\', \\'Guam\\') ## 2$$118 ## (\\'US\\', \\'Georgia\\') ## 2$$119 ## (\\'US\\', \\'Florida\\') ## 2$$120 ## (\\'US\\', \\'District of Columbia\\') ## 2$$121 ## (\\'US\\', \\'Delaware\\') ## 2$$122 ## (\\'US\\', \\'Connecticut\\') ## 2$$123 ## (\\'US\\', \\'Colorado\\') ## 2$$124 ## (\\'US\\', \\'California\\') ## 2$$125 ## (\\'US\\', \\'Arkansas\\') ## 2$$126 ## (\\'US\\', \\'Arizona\\') ## 2$$127 ## (\\'US\\', \\'Alaska\\') ## 2$$128 ## (\\'US\\', \\'Alabama\\') ## 2$$129 ## (\\'Turkey\\', \\'\\') ## 4$$130 ## (\\'US\\', \\'Illinois\\') ## 2$$131 ## (\\'US\\', \\'Indiana\\') ## 2$$132 ## (\\'US\\', \\'Iowa\\') ## 2$$133 ## (\\'US\\', \\'Kansas\\') ## 2$$134 ## (\\'US\\', \\'New York\\') ## 2$$135 ## (\\'US\\', \\'New Mexico\\') ## 2$$136 ## (\\'US\\', \\'New Jersey\\') ## 2$$137 ## (\\'US\\', \\'New Hampshire\\') ## 2$$138 ## (\\'US\\', \\'Nevada\\') ## 2$$139 ## (\\'US\\', \\'Nebraska\\') ## 2$$140 ## (\\'US\\', \\'Montana\\') ## 2$$141 ## (\\'Kyrgyzstan\\', \\'\\') ## 2$$142 ## (\\'US\\', \\'Missouri\\') ## 2$$143 ## (\\'US\\', \\'Minnesota\\') ## 2$$144 ## (\\'US\\', \\'Michigan\\') ## 2$$145 ## (\\'US\\', \\'Massachusetts\\') ## 2$$146 ## (\\'US\\', \\'Maryland\\') ## 2$$147 ## (\\'US\\', \\'Maine\\') ## 2$$148 ## (\\'US\\', \\'Louisiana\\') ## 2$$149 ## (\\'US\\', \\'Kentucky\\') ## 2$$150 ## (\\'US\\', \\'Mississippi\\') ## 2$$151 ## (\\'Kuwait\\', \\'\\') ## 2$$152 ## (\\'Kosovo\\', \\'\\') ## 2$$153 ## (\\'Korea, South\\', \\'\\') ## 1.1$$154 ## (\\'China\\', \\'Anhui\\') ## 1$$155 ## (\\'Chile\\', \\'\\') ## 2$$156 ## (\\'Chad\\', \\'\\') ## 1$$157 ## (\\'Central African Republic\\', \\'\\') ## 1$$158 ## (\\'Canada\\', \\'Yukon\\') ## 1$$159 ## (\\'Canada\\', \\'Saskatchewan\\') ## 1.5$$160 ## (\\'Canada\\', \\'Quebec\\') ## 2$$161 ## (\\'Canada\\', \\'Prince Edward Island\\') ## 2$$162 ## (\\'Canada\\', \\'Ontario\\') ## 2$$163 ## (\\'Canada\\', \\'Nova Scotia\\') ## 2$$164 ## (\\'Canada\\', \\'Northwest Territories\\') ## 1$$165 ## (\\'Canada\\', \\'Newfoundland and Labrador\\') ## 1$$166 ## (\\'Canada\\', \\'New Brunswick\\') ## 1$$167 ## (\\'Canada\\', \\'Manitoba\\') ## 1.5$$168 ## (\\'Canada\\', \\'British Columbia\\') ## 1.5$$169 ## (\\'China\\', \\'Beijing\\') ## 1.1$$170 ## (\\'Canada\\', \\'Alberta\\') ## 2$$171 ## (\\'China\\', \\'Chongqing\\') ## 1$$172 ## (\\'China\\', \\'Gansu\\') ## 1.1$$173 ## (\\'China\\', \\'Liaoning\\') ## 1.1$$174 ## (\\'China\\', \\'Jilin\\') ## 1$$175 ## (\\'China\\', \\'Jiangxi\\') ## 1$$176 ## (\\'China\\', \\'Jiangsu\\') ## 1$$177 ## (\\'China\\', \\'Inner Mongolia\\') ## 1.1$$178 ## (\\'China\\', \\'Hunan\\') ## 1$$179 ## (\\'China\\', \\'Hubei\\') ## 1$$180 ## (\\'China\\', \\'Hong Kong\\') ## 1.2$$181 ## (\\'China\\', \\'Henan\\') ## 1$$182 ## (\\'China\\', \\'Heilongjiang\\') ## 1.1$$183 ## (\\'China\\', \\'Hebei\\') ## 1$$184 ## (\\'China\\', \\'Hainan\\') ## 1$$185 ## (\\'China\\', \\'Guizhou\\') ## 1$$186 ## (\\'China\\', \\'Guangxi\\') ## 1$$187 ## (\\'China\\', \\'Guangdong\\') ## 1$$188 ## (\\'China\\', \\'Fujian\\') ## 1.1$$189 ## (\\'Cameroon\\', \\'\\') ## 1$$190 ## (\\'Cambodia\\', \\'\\') ## 1$$191 ## (\\'Cabo Verde\\', \\'\\') ## 1$$192 ## (\\'Australia\\', \\'Western Australia\\') ## 1$$193 ## (\\'Australia\\', \\'Victoria\\') ## 1.1$$194 ## (\\'Australia\\', \\'Tasmania\\') ## 1.1$$195 ## (\\'Australia\\', \\'South Australia\\') ## 1.1$$196 ## (\\'Australia\\', \\'Queensland\\') ## 1.1$$197 ## (\\'Australia\\', \\'Northern Territory\\') ## 1.1$$198 ## (\\'Australia\\', \\'New South Wales\\') ## 1.1$$199 ## (\\'Australia\\', \\'Australian Capital Territory\\') ## 1.1$$200 ## (\\'Armenia\\', \\'\\') ## 2$$201 ## (\\'Argentina\\', \\'\\') ## 1.5$$202 ## (\\'Antigua and Barbuda\\', \\'\\') ## 2$$203 ## (\\'Angola\\', \\'\\') ## 2$$204 ## (\\'Andorra\\', \\'\\') ## 1.5$$205 ## (\\'Algeria\\', \\'\\') ## 1.5$$206 ## (\\'Albania\\', \\'\\') ## 1.5$$207 ## (\\'Austria\\', \\'\\') ## 1.5$$208 ## (\\'Azerbaijan\\', \\'\\') ## 3$$209 ## (\\'Bahamas\\', \\'\\') ## 2$$210 ## (\\'Bahrain\\', \\'\\') ## 2$$211 ## (\\'Burundi\\', \\'\\') ## 1$$212 ## (\\'Burma\\', \\'\\') ## 1$$213 ## (\\'Burkina Faso\\', \\'\\') ## 1.5$$214 ## (\\'Bulgaria\\', \\'\\') ## 1.5$$215 ## (\\'Brunei\\', \\'\\') ## 1$$216 ## (\\'Brazil\\', \\'\\') ## 4$$217 ## (\\'Botswana\\', \\'\\') ## 1$$218 ## (\\'China\\', \\'Macau\\') ## 1.1$$219 ## (\\'Bosnia and Herzegovina\\', \\'\\') ## 3$$220 ## (\\'Bhutan\\', \\'\\') ## 1$$221 ## (\\'Benin\\', \\'\\') ## 1$$222 ## (\\'Belize\\', \\'\\') ## 1$$223 ## (\\'Belgium\\', \\'\\') ## 1.5$$224 ## (\\'Belarus\\', \\'\\') ## 2$$225 ## (\\'Barbados\\', \\'\\') ## 1.5$$226 ## (\\'Bangladesh\\', \\'\\') ## 4$$227 ## (\\'Bolivia\\', \\'\\') ## 2$$228 ## (\\'Zambia\\', \\'\\') ## 1$$229 ## (\\'China\\', \\'Ningxia\\') ## 1$$230 ## (\\'China\\', \\'Shaanxi\\') ## 1$$231 ## (\\'Guinea\\', \\'\\') ## 1.5$$232 ## (\\'Guatemala\\', \\'\\') ## 2$$233 ## (\\'Grenada\\', \\'\\') ## 1$$234 ## (\\'Greece\\', \\'\\') ## 1.5$$235 ## (\\'Ghana\\', \\'\\') ## 4$$236 ## (\\'Germany\\', \\'\\') ## 1.5$$237 ## (\\'Georgia\\', \\'\\') ## 1.5$$238 ## (\\'Gambia\\', \\'\\') ## 2$$239 ## (\\'Gabon\\', \\'\\') ## 4$$240 ## (\\'France\\', \\'St Martin\\') ## 1$$241 ## (\\'France\\', \\'Saint Barthelemy\\') ## 1$$242 ## (\\'France\\', \\'Reunion\\') ## 1.1$$243 ## (\\'France\\', \\'New Caledonia\\') ## 1.1$$244 ## (\\'France\\', \\'Mayotte\\') ## 1.5$$245 ## (\\'France\\', \\'Martinique\\') ## 1.1$$246 ## (\\'Guinea-Bissau\\', \\'\\') ## 4$$247 ## (\\'France\\', \\'Guadeloupe\\') ## 1.1$$248 ## (\\'Guyana\\', \\'\\') ## 1$$249 ## (\\'Holy See\\', \\'\\') ## 1$$250 ## (\\'Kenya\\', \\'\\') ## 1.5$$251 ## (\\'Kazakhstan\\', \\'\\') ## 2$$252 ## (\\'Jordan\\', \\'\\') ## 1.2$$253 ## (\\'Japan\\', \\'\\') ## 2$$254 ## (\\'Jamaica\\', \\'\\') ## 2$$255 ## (\\'Italy\\', \\'\\') ## 1.2$$256 ## (\\'Israel\\', \\'\\') ## 2$$257 ## (\\'Ireland\\', \\'\\') ## 2$$258 ## (\\'Iraq\\', \\'\\') ## 3$$259 ## (\\'Iran\\', \\'\\') ## 1.5$$260 ## (\\'Indonesia\\', \\'\\') ## 3$$261 ## (\\'India\\', \\'\\') ## 3$$262 ## (\\'Iceland\\', \\'\\') ## 1.2$$263 ## (\\'Hungary\\', \\'\\') ## 2$$264 ## (\\'Honduras\\', \\'\\') ## 1$$265 ## (\\'Haiti\\', \\'\\') ## 1$$266 ## (\\'France\\', \\'French Polynesia\\') ## 1.2$$267 ## (\\'France\\', \\'French Guiana\\') ## 1.5$$268 ## (\\'France\\', \\'\\') ## 1.5$$269 ## (\\'Croatia\\', \\'\\') ## 1.5$$270 ## (\\\"Cote d\\'Ivoire\\\", \\'\\') ## 1.5$$271 ## (\\'Costa Rica\\', \\'\\') ## 1.5$$272 ## (\\'Congo (Kinshasa)\\', \\'\\') ## 1.5$$273 ## (\\'Congo (Brazzaville)\\', \\'\\') ## 1.5$$274 ## (\\'Colombia\\', \\'\\') ## 4$$275 ## (\\'China\\', \\'Zhejiang\\') ## 1$$276 ## (\\'China\\', \\'Yunnan\\') ## 1$$277 ## (\\'China\\', \\'Xinjiang\\') ## 1$$278 ## (\\'China\\', \\'Tibet\\') ## 1$$279 ## (\\'China\\', \\'Tianjin\\') ## 1.1$$280 ## (\\'China\\', \\'Sichuan\\') ## 1$$281 ## (\\'China\\', \\'Shanxi\\') ## 1$$282 ## (\\'China\\', \\'Shanghai\\') ## 1.1$$283 ## (\\'China\\', \\'Shandong\\') ## 1$$284 ## (\\'Cuba\\', \\'\\') ## 3$$285 ## (\\'Cyprus\\', \\'\\') ## 1.5$$286 ## (\\'Czechia\\', \\'\\') ## 1.5$$287 ## (\\'Denmark\\', \\'\\') ## 2$$288 ## (\\'Finland\\', \\'\\') ## 2$$289 ## (\\'Fiji\\', \\'\\') ## 2$$290 ## (\\'Ethiopia\\', \\'\\') ## 2$$291 ## (\\'Eswatini\\', \\'\\') ## 1$$292 ## (\\'Estonia\\', \\'\\') ## 1.1$$293 ## (\\'Eritrea\\', \\'\\') ## 1$$294 ## (\\'Equatorial Guinea\\', \\'\\') ## 1$$295 ## (\\'China\\', \\'Qinghai\\') ## 1$$296 ## (\\'El Salvador\\', \\'\\') ## 3$$297 ## (\\'Ecuador\\', \\'\\') ## 1.1$$298 ## (\\'Dominican Republic\\', \\'\\') ## 1.5$$299 ## (\\'Dominica\\', \\'\\') ## 1$$300 ## (\\'Djibouti\\', \\'\\') ## 3$$301 ## (\\'Diamond Princess\\', \\'\\') ## 1$$302 ## (\\'Denmark\\', \\'Greenland\\') ## 1$$303 ## (\\'Denmark\\', \\'Faroe Islands\\') ## 1$$304 ## (\\'Egypt\\', \\'\\') ## 2$$305 ## (\\'Zimbabwe\\', \\'\\') ## 1\"\n# mapped_list = mapping.split(\"$$\")\n# mapped_list = [mapped_row.split(\"##\") for mapped_row in mapped_list]\n# mapped_list = [(a[1].strip(), float(a[2].strip())) for a in mapped_list]\n# mapped_dict = {}\n# for pair in mapped_list:\n#     fields = pair[0][1:-1].split(', \\'')\n#     mapped_dict.update({(fields[0].strip()[1:-1], fields[1].strip()[:-1]): pair[1]})\n\n# rate_1 = []\n# rate_1_1 = []\n# rate_1_2 = []\n# rate_1_5 = []\n# rate_2 = []\n# rate_3 = []\n# rate_4 =[]\n# rates = [1,1.1,1.2,1.5,2,3,4]\n# indices = [rate_1, rate_1_1, rate_1_2, rate_1_5, rate_2, rate_3, rate_4]\n\n# hr_id = list(min_date_sorted.index)\n# for index, pair in enumerate(min_date_sorted.index):\n#     if pair in mapped_dict.keys():\n#         indices[rates.index(mapped_dict[pair])].append(index)\n#     else:\n#         print(index, pair)\n#         indices[rates.index(2)].append(index)\n\n# print(rate_1)\n# print(rate_1_1)\n# print(rate_1_2)\n# print(rate_1_5)\n# print(rate_2)\n# print(rate_3)\n# print(rate_4)\n\n# rate_1 = [3,4,5,15,21,22,23,26,27,28,30,31,32,35,36,39,42,45,47,48,49,53,61,67,68,69,72,75,81,94,101,102,107,108,109,154,156,157,158,164,165,166, 171,174,175,176,178,179,181,183, 184,185,186,187,189,190,191,192,211,212,215,217,220,221,222,228,229,230,233,240,241,248,249,264,265,275,276,277,278,280,281,283,291,293,294,295,299,301,302,303,305]\n# rate_1_1 = [2,51,52,76,153,193,194,195,196,197,198,199,242,243,245,247,292,297]\n# rate_1_2 = [6,20,29,70,71,97,98,104,180,252,255,262,266]\n# rate_1_5 = [24,46,54,57,59,62,66,100,103,105,159,167,168,201,204,205,206,207,213,214,223,225,231,234,236,237,244,250,259,267,268,269,270,271,272,273,285,286,298]\n# rate_2 = []\n# rate_3 = [9,25,34,63,64,74,77,78,99,208,219,258,260,261,284,296,300]\n# rate_4 = [7,11,13,18,37,40,41,55,56,129,216,226,235,239,246,274]\n# rate_custom = [169,172,173,177,182,188,218,279,282]\n\n# rate_1 = [4, 5, 6, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 36, 37, 41, 44, 48, 50, 51, 52, 58, 63, 70, 71, 72, 77, 84, 94, 104, 106, 111, 112, 113, 155, 156, 158, 160, 161, 162, 168, 169, 170, 174, 179, 180, 181, 183, 185, 186, 188, 189, 190, 191, 194, 195, 196, 197, 216, 217, 220, 222, 223, 225, 226, 227, 233, 234, 235, 239, 246, 248, 251, 252, 253, 254, 284, 285, 286, 288, 291, 294, 300, 302, 303, 308, 310, 311, 312]\n# rate_1_1 = [3, 54, 78, 135, 176, 177, 178, 182, 198, 199, 200, 201, 202, 203, 204, 249, 250, 256, 272, 273, 301, 306]\n# rate_1_2 = [7, 20, 29, 73, 74, 100, 101, 107, 193, 259, 263, 269, 274]\n# rate_1_5 = [24, 40, 49, 57, 61, 64, 69, 103, 109, 114, 163, 171, 172, 206, 209, 210, 211, 212, 218, 219, 228, 230, 237, 240, 242, 243, 257, 262, 266, 275, 277, 278, 279, 280, 281, 282, 295, 296, 307]\n# rate_2 = [0, 1, 2, 9, 11, 13, 15, 16, 19, 30, 34, 38, 45, 46, 47, 53, 56, 59, 60, 62, 68, 75, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 105, 108, 110, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 164, 165, 166, 167, 184, 205, 207, 208, 214, 215, 229, 232, 238, 244, 247, 255, 258, 260, 261, 264, 270, 271, 292, 293, 297, 298, 299, 305]\n# rate_3 = [10, 25, 35, 65, 67, 76, 80, 81, 102, 213, 224, 265, 267, 268, 276, 304, 309]\n# rate_4 = [8, 12, 14, 17, 39, 42, 43, 55, 66, 133, 221, 231, 236, 241, 245, 283]\n\n\n\nrate_1 = [2, 3, 4, 5, 6, 18, 26, 27, 30, 41, 44, 48, 67, 71, 111, 113, 158, 168, 174, 176, 180, 183, 185, 186, 189, 190, 191, 194, 202, 225, 233, 234, 235, 246, 247, 248, 250, 284, 285, 286, 294, 302, 303, 310]\nrate_1_1 = [7, 19, 23, 40, 42, 49, 50, 51, 57, 63, 68, 75, 76, 77, 94, 98, 100, 104, 107, 121, 135, 155, 156, 169, 170, 171, 173, 175, 177, 178, 179, 181, 188, 193, 200, 201, 203, 204, 207, 208, 220, 223, 236, 239, 251, 253, 256, 281, 287, 288, 289, 291, 295, 298]\nrate_1_2 = [20, 21, 22, 24, 29, 31, 33, 54, 59, 64, 65, 70, 72, 74, 78, 84, 99, 101, 109, 112, 114, 119, 120, 125, 131, 142, 146, 151, 153, 163, 165, 172, 182, 192, 195, 197, 198, 212, 230, 240, 242, 249, 254, 259, 263, 265, 266, 269, 270, 272, 273, 274, 279, 280, 282, 290, 296, 308]\nrate_1_5 = [9, 11, 12, 13, 15, 16, 25, 34, 47, 53, 60, 61, 62, 69, 79, 80, 81, 82, 85, 86, 87, 88, 92, 93, 97, 103, 115, 116, 117, 118, 123, 124, 127, 128, 130, 132, 134, 137, 139, 140, 141, 143, 147, 149, 150, 152, 154, 157, 162, 164, 205, 206, 209, 210, 211, 213, 214, 216, 219, 224, 226, 227, 228, 238, 257, 260, 261, 262, 264, 271, 275, 276, 277, 278, 283, 292, 293, 297, 301, 307]\nrate_2 = [0, 10, 28, 32, 36, 37, 38, 45, 46, 52, 55, 73, 83, 89, 90, 91, 95, 105, 106, 108, 110, 122, 126, 129, 133, 138, 144, 145, 148, 159, 160, 161, 166, 167, 184, 187, 196, 215, 217, 218, 221, 222, 229, 232, 237, 241, 244, 245, 252, 267, 299, 300, 304, 306, 309, 312]\nrate_3 = [1, 14, 35, 39, 43, 56, 58, 66, 96, 102, 136, 199, 231, 243, 255, 258, 268, 305, 311]\nrate_4 = [8, 17]\n\nrate_custom = [173, 175, 187, 192, 287, 289, 290]\n\nrates = [1,1.1,1.2,1.5,2,3,4]\nindices = [rate_1, rate_1_1, rate_1_2, rate_1_5, rate_2, rate_3, rate_4]\nmult = [2]*len(min_date_sorted.index)\ni = 0\nfor index_list in indices:\n    for j in index_list:\n        mult[j] = rates[i]\n    i = i + 1\n# for a,b in enumerate(mult):\n#     print(a,b)\n# for index, hr_index in enumerate(min_date_sorted.index):\nrate = rate_1 + rate_1_1 + rate_1_2 + rate_1_5 + rate_2 + rate_3 + rate_4\nprint(len(rate))","23188ec6":"df = pd.DataFrame(columns = ['ForecastId','ConfirmedCases','Fatalities'])\ndf_hr = pd.DataFrame(columns = ['ForecastId', 'Country_Region', 'Province_State', 'Days', 'ConfirmedCases','Fatalities','Date'])\n","3f3c6320":"# record = df_train[(df_train['Country_Region'] == 'Italy') & (df_train['Province_State'] == '')]\n# record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n# record = record[record['days'] > public_start_day]\n# record","8e08c922":"public_start_date = '2020-04-02'\npublic_end_date = '2020-04-15'\n\ncount = 0\nfor index, start_date in zip(min_date_sorted.index, min_date_sorted):\n    print(list(min_date_sorted.index).index(index), index, start_date)\n    record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    if len(record[record['ConfirmedCases'] > 0]) == 0:\n        pass\n    else:\n        record = record[record['ConfirmedCases'] > 0]\n    base_date_object = datetime.strptime(start_date, \"%Y-%m-%d\").date()\n    public_start_date_object = datetime.strptime(public_start_date, \"%Y-%m-%d\").date()\n    public_end_date_object = datetime.strptime(public_end_date, \"%Y-%m-%d\").date()\n    record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n    public_start_day = (public_start_date_object - base_date_object).days + 1\n    public_end_day = (public_end_date_object - base_date_object).days + 1\n    \n    ## limit the training data to date before public start date\n    if len(record[record['days'] < public_start_day]) > 0:\n        record = record[record['days'] < public_start_day]\n    # x axis values \n    \n    record2 = record\n    if len(record[record['Fatalities'] > 0]) != 0:\n        record2 = record[record['Fatalities'] > 0]\n    x = record['days'].values\n    x2 = record2['days'].values\n    # corresponding y axis values \n    y1 = record['ConfirmedCases'].values\n    y2 = record2['Fatalities'].values\n    \n    \n    ####  data correction ####\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y1_copy = list(y1)\n    for a in y1:\n        if a < b:\n            y1[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y1)\n#         print(y1_copy)\n        print(\"*****************\")\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y2_copy = list(y2)\n    for a in y2:\n        if a < b:\n            y2[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y2)\n#         print(y2_copy)\n        print(\"*****************\")    \n    ####  data correction ####\n\n    if len(y1) > 0:\n        y_max_ = y1[-1]\n#         y1_prime = np.diff(y1)\n#         y1_prime2 = np.diff(y1_prime)\n#         if len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n#             max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n#             max_slope_range = (max_slope_index+1)\/len(y1_prime)\n#             y_max_ = y1[-1]\n#             if max_slope_range < 0.75:\n#                 if y1_prime[max_slope_index] > 0 and max_slope_range < 0.75 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n#                     y_max_ = y1[-1]\n#                     pass\n#                 else:\n#                     y_max_ = y1[max_slope_index + 1]\n#                     pass\n#             else:\n#                 y_max_ = y1[-1]\n    else:\n        y_max_ = 0\n    \n    stage0 = False\n    stage1 = False\n    stage2 = False\n    stage3 = False\n    count1 = 0\n    count2 = 0\n    for start in range(len(y1_prime)-3):\n        if sum(y1_prime[start:start+3]) <=12:\n            count1 = count1 + 1\n            count2 = 0\n        else:\n            count2 = count2 + 1\n            count1 = 0\n        if not stage0 and count2 == 0 and count1 > 2:\n            stage0 = True\n            count1 = 0\n        if not stage1 and count1 == 0 and count2 > 5:\n            stage0 = True\n            stage1 = True\n            count2 = 0\n        if stage1 and count2 == 0 and count1 > 3:\n            stage2 = True\n            count1 = 0\n        if stage2 and count1 == 0 and count2 > 2:\n            stage3 = True\n            count2 = 0\n#     if stage3:\n    print('Rate ', mult[list(min_date_sorted.index).index(index)])\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        param, param_cov = curve_fit(custom, np.array(x), np.array(y1), maxfev = 100000, bounds=([1, 0, 1, 1, 30, 1, 1], [1.1, 60, 8, 200, 100, 8, 1400]))\n        y1_pred = custom(x, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         param, param_cov = curve_fit(test_linear, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0], 50, 45, 0], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0, 1, 30, -100],[y_max_*5 + 1500, 1, 150, 100, 100, 1000]))\n#         y1_pred = test_linear(x, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*7, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*5, 0.1, 0],[y_max_*10 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n#     elif index[0] == 'China':\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0],[y_max_*5 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 30, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.2:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    else:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*4 + 1500, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    param2, param_cov2 = curve_fit(test, np.array(x2), np.array(y2), [y2[-1]\/2, 0.5, (x2[-1] - x2[0])\/2 + x2[0] - 3], maxfev = 100000, bounds=([y2[-1]\/2, 0.1, 0],[y2[-1]*5 + 1, 0.8, 150]))\n    y2_pred = test(x2,param2[0], param2[1], param2[2])\n    \n#     print(y1)\n#     print(y1_pred)\n#     print(\"----------------------------------\")\n#     print(y2)\n#     print(y2_pred)\n#     print(\"----------------------------------\")\n    \n    group = test_groups.get_group(index)\n#     print(group['Date'].values)\n    group['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    group = group[group['days'] <= public_end_day]\n    \n    ids = group['ForecastId'].values\n    days = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    prev_days = range(public_start_day - 6, public_start_day - 1, 1)\n    \n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        test_y1_pred_raw = custom(days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n        prev_y1_pred_raw = custom(prev_days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         test_y1_pred_raw = test_linear(days, param[0], param[1], param[2], param[3], param[4], param[5])\n#         prev_y1_pred_raw = test_linear(prev_days, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         test_y1_pred_raw = test(days, param[0], param[1], param[2])\n#         prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    else:\n        test_y1_pred_raw = test(days, param[0], param[1], param[2])\n        prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    test_y2_pred_raw = test(days, param2[0], param2[1], param2[2])\n    prev_y2_pred_raw = test(prev_days, param2[0], param2[1], param2[2])\n    \n    day_index_pred = 0\n    diff1_list = []\n    diff2_list = []\n    for day in prev_days:\n        if day in x:\n            day_index = np.where(x == day)\n            diff1 = y1[day_index] - prev_y1_pred_raw[day_index_pred]\n            diff1_list.append(diff1)\n        if day in x2:\n            day_index = np.where(x2 == day)\n            diff2 = y2[day_index] - prev_y2_pred_raw[day_index_pred]\n            diff2_list.append(diff2)\n        day_index_pred = day_index_pred + 1\n    \n    if len(diff1_list) > 0:\n        diff1_mean = np.max(diff1_list)\n    else:\n        diff1_mean = 0\n    if len(diff2_list) > 0:\n        diff2_mean = np.max(diff2_list)\n    else:\n        diff2_mean = 0\n#     print('diff1_mean', diff1_mean)\n#     print('diff2_mean', diff2_mean)\n    if np.isnan(diff1_mean):\n        pass\n    else:\n        test_y1_pred_raw = list(np.array(test_y1_pred_raw) + diff1_mean)\n    if np.isnan(diff2_mean):\n        pass\n    else:\n        test_y2_pred_raw = list(np.array(test_y2_pred_raw) + diff2_mean)\n    \n#     test_y1_pred = [int(n) for n in test_y1_pred_raw]\n#     test_y2_pred = [int(m) for m in test_y2_pred_raw]\n\n    test_y1_pred = test_y1_pred_raw\n    test_y2_pred = test_y2_pred_raw\n\n    \n    ratio = 0\n    if y2[-1] > 0:\n        ratio = y1[-1]\/y2[-1]\n    else:\n        ratio = y1[-1]\n    \n    train_day_index = days.index(public_start_day) - 1\n    \n    if(y1[-1] < 100 and y2[-1] < 4 and ratio < avg):\n        # correct the y2_pred as per average rate = 22\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/avg:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/avg\n    else:\n        ## correct the y2_pred as per the rate\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/ratio:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/ratio\n    \n#     test_y1_pred = [int(n) for n in test_y1_pred]\n#     test_y2_pred = [int(m) for m in test_y2_pred]\n    \n    local_df_hr = pd.DataFrame(ids, columns=['ForecastId'])\n    print()\n    local_df_hr.insert(1, 'Country_Region', [index[0]]*len(days))\n    local_df_hr.insert(2, 'Province_State', [index[1]]*len(days))\n    local_df_hr.insert(3, 'Days', days)\n    local_df_hr.insert(4, 'ConfirmedCases', test_y1_pred)\n    local_df_hr.insert(5, 'Fatalities', test_y2_pred)\n    local_df_hr.insert(6, 'Date', group['Date'].values)\n    \n    local_df = pd.DataFrame(ids, columns=['ForecastId'])\n    local_df.insert(1, 'ConfirmedCases', test_y1_pred)\n    local_df.insert(2, 'Fatalities', test_y2_pred)\n    df = df.append(local_df)\n    df_hr = df_hr.append(local_df_hr)\n    \n    # x axis values \n#     if stage3:\n#     if not stage3 and index[0] not in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#     if y1[-1] > test_y1_pred[0]:\n#     if index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#     if list(min_date_sorted.index).index(index) in rate_1_1:\n#     if index[0] == 'Russia':\n#         print(mult[list(min_date_sorted.index).index(index)])\n#         print(y_max_)\n    actual_record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    actual_record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in actual_record['Date']]\n    actual_record = actual_record[actual_record['days'] > public_start_day]\n    actual_days = actual_record['days'].values\n    actual_y = actual_record['ConfirmedCases'].values\n    actual_y2 = actual_record['Fatalities'].values\n\n#     x = record['days'].values\n#     plt.plot(x, y1, label = \"ConfirmedCases\") \n#     plt.plot(x, y1_pred, label = \"Predicted\") \n#     plt.plot(days, test_y1_pred, label = \"Forecast\")\n#     plt.plot(actual_days, actual_y, label = \"Actual\")\n#     plt.xlabel('Date') \n#     plt.ylabel('Label') \n#     plt.title(str(index[0]) + \" \" + str(index[1]) + ' - ConfirmedCases') \n#     plt.show() \n\n#     plt.plot(x2, y2, label = \"Fatalities\") \n#     plt.plot(x2, y2_pred, label = \"Predicted\")\n#     plt.plot(days, test_y2_pred, label = \"Forecast\")\n#     plt.plot(actual_days, actual_y2, label = \"Actual\")\n#     plt.xlabel('Date') \n#     plt.ylabel('Label') \n#     plt.title(str(index[0]) + \" \" + str(index[1]) + ' - Fatalities') \n#     plt.show() \n    count = count + 1\n#     break\n","0fccfa99":"print(df.shape)\nprint(df_hr.shape)","5a70d8be":"private_start_date = '2020-04-16'\nprivate_end_date = '2020-05-14'\n\ncount = 0\nfor index, start_date in zip(min_date_sorted.index, min_date_sorted):\n    print(list(min_date_sorted.index).index(index), index, start_date)\n    record = df_train[(df_train['Country_Region'] == index[0]) & (df_train['Province_State'] == index[1])]\n    if len(record[record['ConfirmedCases'] > 0]) == 0:\n        pass\n    else:\n        record = record[record['ConfirmedCases'] > 0]\n    base_date_object = datetime.strptime(start_date, \"%Y-%m-%d\").date()\n    private_start_date_object = datetime.strptime(private_start_date, \"%Y-%m-%d\").date()\n    private_end_date_object = datetime.strptime(private_end_date, \"%Y-%m-%d\").date()\n    record['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in record['Date']]\n    private_start_day = (private_start_date_object - base_date_object).days + 1\n    private_end_day = (private_end_date_object - base_date_object).days + 1\n    \n    ## limit the training data to date before public start date\n    if len(record[record['days'] < private_start_day]) > 0:\n        record = record[record['days'] < private_start_day]\n    # x axis values \n    \n    record2 = record\n    if len(record[record['Fatalities'] > 0]) != 0:\n        record2 = record[record['Fatalities'] > 0]\n    x = record['days'].values\n    x2 = record2['days'].values\n    # corresponding y axis values \n    y1 = record['ConfirmedCases'].values\n    y2 = record2['Fatalities'].values\n    \n    \n    ####  data correction ####\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y1_copy = list(y1)\n    for a in y1:\n        if a < b:\n            y1[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y1)\n#         print(y1_copy)\n        print(\"*****************\")\n    b = -1\n    bad_index = 0\n    mod_count = 0\n#     y2_copy = list(y2)\n    for a in y2:\n        if a < b:\n            y2[bad_index] = b\n            mod_count = mod_count + 1\n        else:\n            b = a\n        bad_index = bad_index + 1\n    if mod_count > 0:\n        print(\"*****************\")\n        print(list(min_date_sorted.index).index(index), index)\n        print(mod_count)\n        print(y2)\n#         print(y2_copy)\n        print(\"*****************\")    \n    ####  data correction ####\n\n    y_max_ = y1[-1]\n#     y1_prime = np.diff(y1)\n#     y1_prime2 = np.diff(y1_prime)\n#     if len(y1)>0 and len(y1_prime) > 0 and len(y1_prime2) > 0:\n#         max_slope_index = len(y1_prime) - 1 - list(y1_prime)[::-1].index(max(y1_prime))\n#         max_slope_range = (max_slope_index+1)\/len(y1_prime)\n#         y_max_ = y1[-1]\n#         if max_slope_range < 0.75:\n#             if y1_prime[max_slope_index] > 0 and max_slope_range < 0.75 and (((y1_prime[max_slope_index] - max(y1_prime[-2:]))\/y1_prime[max_slope_index]) < 0.5):\n#                 y_max_ = y1[-1]\n#                 pass\n#             else:\n#                 y_max_ = y1[max_slope_index + 1]\n#                 pass\n#         else:\n#             y_max_ = y1[-1]\n    \n    \n    stage0 = False\n    stage1 = False\n    stage2 = False\n    stage3 = False\n    count1 = 0\n    count2 = 0\n    for start in range(len(y1_prime)-3):\n        if sum(y1_prime[start:start+3]) <=12:\n            count1 = count1 + 1\n            count2 = 0\n        else:\n            count2 = count2 + 1\n            count1 = 0\n        if not stage0 and count2 == 0 and count1 > 2:\n            stage0 = True\n            count1 = 0\n        if not stage1 and count1 == 0 and count2 > 5:\n            stage0 = True\n            stage1 = True\n            count2 = 0\n        if stage1 and count2 == 0 and count1 > 3:\n            stage2 = True\n            count1 = 0\n        if stage2 and count1 == 0 and count2 > 2:\n            stage3 = True\n            count2 = 0\n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        param, param_cov = curve_fit(custom, np.array(x), np.array(y1), maxfev = 100000, bounds=([1, 0, 1, 1, 30, 1, 1], [1.1, 60, 8, 200, 100, 8, 1400]))\n        y1_pred = custom(x, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         param, param_cov = curve_fit(test_linear, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0], 50, 45, 0], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0, 1, 30, -100],[y_max_*5 + 1500, 1, 150, 100, 100, 1000]))\n#         y1_pred = test_linear(x, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*7, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*5, 0.1, 0],[y_max_*10 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n#     elif index[0] == 'China':\n#         param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_\/2, 0.1, 0],[y_max_*5 + 1500, 1, 150]))\n#         y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 30, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.1:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    elif mult[list(min_date_sorted.index).index(index)] == 1.2:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*mult[list(min_date_sorted.index).index(index)]*1.5 + 200, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    else:\n        param, param_cov = curve_fit(test, np.array(x), np.array(y1), [y_max_*mult[list(min_date_sorted.index).index(index)] + 1, 0.5, (x[-1] - x[0])\/2 + x[0]], maxfev = 100000, bounds=([y_max_*mult[list(min_date_sorted.index).index(index)], 0.1, 0],[y_max_*4 + 1500, 1, 150]))\n        y1_pred = test(x, param[0], param[1], param[2])\n    param2, param_cov2 = curve_fit(test, np.array(x2), np.array(y2), [y2[-1]\/2, 0.5, (x2[-1] - x2[0])\/2 + x2[0] - 3], maxfev = 100000, bounds=([y2[-1]\/2, 0.1, 0],[y2[-1]*5 + 1, 0.8, 150]))\n    y2_pred = test(x2,param2[0], param2[1], param2[2])\n    \n#     print(y1)\n#     print(y1_pred)\n#     print(\"----------------------------------\")\n#     print(y2)\n#     print(y2_pred)\n#     print(\"----------------------------------\")\n    \n    group = test_groups.get_group(index)\n#     print(group['Date'].values)\n    group['days'] = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    group = group[group['days'] >= private_start_day]\n    ids = group['ForecastId'].values\n    days = [(datetime.strptime(date, \"%Y-%m-%d\").date() - base_date_object).days + 1 for date in group['Date'].values]\n    \n    \n    prev_days = range(private_start_day - 6, private_start_day - 1, 1)\n    \n#     if stage3:\n    if list(min_date_sorted.index).index(index) in rate_custom:\n        test_y1_pred_raw = custom(days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n        prev_y1_pred_raw = custom(prev_days, param[0], param[1], param[2], param[3], param[4], param[5], param[6])\n#     elif index[0] == 'Korea, South':\n#         test_y1_pred_raw = test_linear(days, param[0], param[1], param[2], param[3], param[4], param[5])\n#         prev_y1_pred_raw = test_linear(prev_days, param[0], param[1], param[2], param[3], param[4], param[5])\n#     elif index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#         test_y1_pred_raw = test(days, param[0], param[1], param[2])\n#         prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    else:\n        test_y1_pred_raw = test(days, param[0], param[1], param[2])\n        prev_y1_pred_raw = test(prev_days, param[0], param[1], param[2])\n    test_y2_pred_raw = test(days, param2[0], param2[1], param2[2])\n    prev_y2_pred_raw = test(prev_days, param2[0], param2[1], param2[2])\n    \n    \n    day_index_pred = 0\n    diff1_list = []\n    diff2_list = []\n    for day in prev_days:\n        if day in x:\n            day_index = np.where(x == day)\n            diff1 = y1[day_index] - prev_y1_pred_raw[day_index_pred]\n            diff1_list.append(diff1)\n        if day in x2:\n            day_index = np.where(x2 == day)\n            diff2 = y2[day_index] - prev_y2_pred_raw[day_index_pred]\n            diff2_list.append(diff2)\n        day_index_pred = day_index_pred + 1\n    \n    if len(diff1_list) > 0:\n        diff1_mean = np.max(diff1_list)\n    else:\n        diff1_mean = 0\n    if len(diff2_list) > 0:\n        diff2_mean = np.max(diff2_list)\n    else:\n        diff2_mean = 0\n    \n#     print('diff1_mean', diff1_mean)\n#     print('diff2_mean', diff2_mean)\n    if np.isnan(diff1_mean):\n        pass\n    else:\n        test_y1_pred_raw = list(np.array(test_y1_pred_raw) + diff1_mean)\n    if np.isnan(diff2_mean):\n        pass\n    else:\n        test_y2_pred_raw = list(np.array(test_y2_pred_raw) + diff2_mean)\n    \n#     test_y1_pred = [int(n) for n in test_y1_pred_raw]\n#     test_y2_pred = [int(m) for m in test_y2_pred_raw]\n    test_y1_pred = test_y1_pred_raw\n    test_y2_pred = test_y2_pred_raw\n    \n    ratio = 0\n    if y2[-1] > 0:\n        ratio = y1[-1]\/y2[-1]\n    else:\n        ratio = y1[-1]\n    \n    train_day_index = days.index(private_start_day) - 1\n    \n    if(y1[-1] < 100 and y2[-1] < 4 and ratio < avg):\n        # correct the y2_pred as per average rate = 22\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/avg:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/avg\n    else:\n        ## correct the y2_pred as per the rate\n        for pred_index in range(len(test_y2_pred)):\n            if pred_index > train_day_index:\n                if test_y2_pred[pred_index] < test_y1_pred[pred_index]\/ratio:\n                    test_y2_pred[pred_index] = test_y1_pred[pred_index]\/ratio\n    \n#     test_y1_pred = [int(n) for n in test_y1_pred]\n#     test_y2_pred = [int(m) for m in test_y2_pred]\n\n    local_df_hr = pd.DataFrame(ids, columns=['ForecastId'])\n    local_df_hr.insert(1, 'Country_Region', [index[0]]*len(days))\n    local_df_hr.insert(2, 'Province_State', [index[1]]*len(days))\n    local_df_hr.insert(3, 'Days', days)\n    local_df_hr.insert(4, 'ConfirmedCases', test_y1_pred)\n    local_df_hr.insert(5, 'Fatalities', test_y2_pred)\n    local_df_hr.insert(6, 'Date', group['Date'].values)\n    \n    local_df = pd.DataFrame(ids, columns=['ForecastId'])\n    local_df.insert(1, 'ConfirmedCases', test_y1_pred)\n    local_df.insert(2, 'Fatalities', test_y2_pred)\n    df = df.append(local_df)\n    df_hr = df_hr.append(local_df_hr)\n    # x axis values \n#     if stage3:\n#     if index[0] in ['US', 'Spain', 'Germany', 'France', 'Iran', 'United Kingdom']:\n#     print(y1_prime)\n#     if count > 166 and count < 173:\n#     x = record['days'].values\n#     plt.plot(x, y1, label = \"Confirmed Cases\") \n#     plt.plot(x, y1_pred, label = \"Predicted\") \n#     plt.plot(days, test_y1_pred, label = \"Forecast\")\n#     plt.xlabel('Date') \n#     plt.ylabel('Label') \n#     plt.title(str(index[0]) + \" \" + str(index[1]) + ' - Confirmed Cases') \n#     plt.show() \n\n#     plt.plot(x2, y2, label = \"Fatalities\") \n#     plt.plot(x2, y2_pred, label = \"Predicted\")\n#     plt.plot(days, test_y2_pred, label = \"Forecast\")\n#     plt.xlabel('Date') \n#     plt.ylabel('Label') \n#     plt.title(str(index[0]) + \" \" + str(index[1]) + ' - Fatalities') \n#     plt.show() \n    count = count + 1\n#     break\n","c32ae84f":"print(df.shape)\nprint(df_hr.shape)","f2be89f8":"df = df.sort_values(by=['ForecastId'], ascending=True)\ndf_hr = df_hr.sort_values(by=['ForecastId'], ascending=True)","fe998fc8":"df.to_csv('submission.csv', index=False)\ndf_hr.to_csv('hr_submission.csv', index=False)","71aa43c2":"df.shape","d7607241":"for row in df_hr.values:\n    print(row)","25b93fd4":"df_test.shape","5c96455e":"df.columns","8820e907":"df","ba3657b7":"df_hr","d340a9b9":"**Load Dataset**","80709648":"# ***Applying all features, fit curves for all locations and generate predictions with plots along with Human Readable output***","25844dab":"***GroupBy Location***","f1022268":"# ***Using Sigmoid, Multi-Sigmoid curve fitting with correction***","be47e417":"**Identify Each Location by Index**","6603348c":"***Plot Curve - Fatalities***","e39a22c9":"***Correction to be done on predictions of fitted-curve based on actual values ***","db708b96":"***Correcting the bad points in data and generalizing curve-fitting base and bound estimates***","7a83f32b":"***Checking on which curve applies to which location - Sigmoid or multi-Sigmoid***","08645751":"***Plot Curve - Cinfirmed Cases***","43b6c1bc":"***Analyze Curve Fitting of Sigmoid on a data point***","ab3199fc":"***Plot a sample multi-Sigmoid***","86396d2a":"Current\n\nAll contries need to be categorized based on their state of infection.\nWhat multipliers to use for bounds will depend on the state of each country.\n\n\n\nEarlier\n1.3 make it special for US (10x) and South Korea with step linear function.\n\n1.2 [Use Float instead of integers]\n\n1.x [Added 5x multiplier on extimation boundary]\n\n1.x [Changing the predictions for public and private leaderboard]","fa5410c9":"***Analyze Predictions on Future Days***","678f065a":"***Analyze record of a particular Location given by Index***"}}