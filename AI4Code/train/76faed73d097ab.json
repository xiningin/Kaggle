{"cell_type":{"e6f9d5fa":"code","9f8c98c9":"code","c595c19a":"code","08612e07":"code","f719af91":"code","4158a88a":"code","768e613f":"code","94e783d9":"code","906ec6bc":"code","5dfcef32":"code","7b420d88":"code","8e9d6f69":"markdown","cacf700e":"markdown","293116e0":"markdown","f02a04a0":"markdown","fde230f8":"markdown","2e29c772":"markdown","db7566f0":"markdown","df7570c4":"markdown","94720c8c":"markdown","6d763079":"markdown"},"source":{"e6f9d5fa":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport tensorflow_addons as tfa","9f8c98c9":"raw_csv = pd.read_csv('..\/input\/body-fat-prediction-dataset\/bodyfat.csv')","c595c19a":"x_data = np.array(raw_csv.drop(['BodyFat'], axis=1))\ny_data = np.array(raw_csv['BodyFat'])","08612e07":"x_train = x_data[:200]\ny_train = y_data[:200]\nx_test = x_data[200:]\ny_test = y_data[200:]","f719af91":"scalerX = StandardScaler()\nscalerY = StandardScaler()\nx_train_scaled = scalerX.fit_transform(x_train)\nx_test_scaled = scalerX.transform(x_test)","4158a88a":"np.save('x_data.npy', x_data)\nnp.save('y_data.npy', y_data)\n\nnp.save('x_train.npy', x_train)\nnp.save('y_train.npy', y_train)\nnp.save('x_test.npy', x_test)\nnp.save('y_test.npy', y_test)\n\nnp.save('x_train_scaled.npy', x_train_scaled)\nnp.save('x_test_scaled.npy', x_test_scaled)","768e613f":"model = keras.Sequential([\n    layers.InputLayer(input_shape=[14]),\n    layers.Dense(128, activation='relu'),\n    layers.Dropout(0.1),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.1),\n    layers.Dense(32, activation='relu'),\n    layers.Dropout(0.1),\n    layers.Dense(1)\n])\n\nmodel.compile(optimizer=keras.optimizers.SGD(0.001, momentum=0.9), loss=keras.losses.MeanSquaredError())\n\nmodel.summary()","94e783d9":"history = model.fit(x_train_scaled, y_train, epochs=40, validation_data=(x_test_scaled, y_test))","906ec6bc":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","5dfcef32":"test_predictions = model(x_test_scaled).numpy()\ntrain_predictions = model(x_train_scaled).numpy()","7b420d88":"r2 = tfa.metrics.r_square.RSquare()\nr2.update_state(y_test, test_predictions.reshape(-1))\nprint(f'Test Set R2: {r2.result().numpy()}')\nr2.update_state(y_train, train_predictions.reshape(-1))\nprint(f'Test Set R2: {r2.result().numpy()}')","8e9d6f69":"### Scaling data","cacf700e":"### Model","293116e0":"### Save Data","f02a04a0":"#### Plot Loss","fde230f8":"### Training and Test Split","2e29c772":"### Importing required libraries","db7566f0":"#### Training","df7570c4":"### Reading CSV file","94720c8c":"#### R2 Metric","6d763079":"### Spliting X and Y"}}