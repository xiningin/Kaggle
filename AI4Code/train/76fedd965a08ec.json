{"cell_type":{"b0e4410e":"code","91722609":"code","3bf8436a":"code","37feedea":"code","b5bf78ca":"code","6ee5f27f":"code","285a9781":"code","59c39924":"code","56c59234":"markdown","e622d904":"markdown","f42f88de":"markdown"},"source":{"b0e4410e":"# Import libraries\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Read FIFA 20 and FIFA 21 datasets\nfifa20 = pd.read_csv(\"..\/input\/fifa-20-complete-player-dataset\/fifa20_data.csv\")\nfifa21 = pd.read_csv(\"..\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv\")\n\n# Sneak peek at FIFA 20 columns which we will use in our training\nfifa20.columns","91722609":"# Find the columns and drop them in FIFA 20 that does not appear in FIFA 21, so that we won't be training \n# those at all\ndf21_20 = fifa21.columns.difference(fifa20.columns)\ndf20_21 = fifa20.columns.difference(fifa21.columns)\n\n# Drop different columns between two datasets and get the exact same set of columns for both\nfifa20_df = fifa20.drop(fifa20[df20_21],axis=1)\nfifa21_df = fifa21.drop(fifa21[df21_20],axis=1)\n\n# Drop other unnecessary columns\nfifa20_df = fifa20_df.drop(fifa20_df[['ID','foot','Joined','Loan Date End','Wage',\n                                      'Release Clause','Growth','A\/W','D\/W','W\/F','Total Stats','Base Stats','SM',\n                                     'IR','Height','Weight','Value','BOV','BP']],axis=1)\n\nfifa21_df = fifa21_df.drop(fifa21_df[['ID','foot','Joined','Loan Date End','Wage',\n                                      'Release Clause','Growth','A\/W','D\/W','W\/F','Total Stats','Base Stats','SM',\n                                     'IR','Height','Weight','Value','BOV','BP']],axis=1)\n\n# Get Goalkeeper stats only to calculate Goalkeeping stats for each team\ngk_20 = fifa20_df[fifa20_df['Position']=='GK']\ngk_21 = fifa21_df[fifa21_df['Position']=='GK']\n\n# Get only GK related columns and add GK prefix to separate them\ngk_20_df = gk_20[['Name','Age','Club','Goalkeeping','GK Diving','GK Handling',\n                 'GK Kicking','GK Positioning','GK Reflexes']]\ngk_20_df.columns = [str(col) + ' GK' for col in gk_20_df.columns]\ngk_21_df = gk_21[['Name','Age','Club','Goalkeeping','GK Diving','GK Handling',\n                 'GK Kicking','GK Positioning','GK Reflexes']]\ngk_21_df.columns = [str(col) + ' GK' for col in gk_21_df.columns]\n\n# Get the best GK in each team\ngk_20_teams  = gk_20_df.loc[gk_20_df.groupby('Club GK')['Goalkeeping GK'].idxmax()]\ngk_21_teams  = gk_21_df.loc[gk_21_df.groupby('Club GK')['Goalkeeping GK'].idxmax()]\n\n# Repeat the same for non-GK player, except getting best players in each position \nnot_gk_20 = fifa20_df[fifa20_df['Position']!='GK']\nnot_gk_21 = fifa21_df[fifa21_df['Position']!='GK']\n\n# Drop Goalkeeping related columns\nnot_gk_20_df = not_gk_20.drop(['Goalkeeping','GK Diving','GK Handling','GK Kicking','GK Positioning',\n                               'GK Reflexes'],axis=1)\nnot_gk_21_df = not_gk_21.drop(['Goalkeeping','GK Diving','GK Handling','GK Kicking','GK Positioning',\n                               'GK Reflexes'],axis=1)\n\n# Our aim is to reveal an overall score for each Club using individual players' scores\n# Thus, I grouped the players by club and took a mean of each score in each column to calculate club overalls\nnot_gk_20_teams = not_gk_20_df.groupby('Club').mean().reset_index()\nnot_gk_21_teams = not_gk_21_df.groupby('Club').mean().reset_index()\n\n# Finally merge GK and non-GK related scores\nteams_20 = pd.merge(not_gk_20_teams,gk_20_teams,'left',left_on='Club', right_on='Club GK').drop(['Name GK','Club GK'],axis=1)\nteams_21 = pd.merge(not_gk_21_teams,gk_21_teams,'left',left_on='Club', right_on='Club GK').drop(['Name GK','Club GK'],axis=1)\n\n# Check for potential NAs in both datasets\nteams_20.isnull().sum()\nteams_21.isnull().sum()","3bf8436a":"# We have 244 clubs that do not have scores, most probably due to some missing player in the dataset.\n# Let's find those clubs\nteams_21[teams_21['Age GK'].isnull()]['Club'].unique()\n\n# Clubs here are not included in FIFA 20 set anyway to train the model, and for Turkish Super Lig predictions\n# we only miss few clubs, that we will deal on the next steps. I'll just remove clubs with NA values\n\nteams_21 = teams_21.dropna()\n\n# Read in match results from 2019-2020 season from 9 different European league\nuk = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'E0')\nbe = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'B1')\nfr = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'F1')\nde = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'D1')\nit = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'I1')\nes = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'SP1')\nnt = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'N1')\npt = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'P1')\ntr = pd.read_excel(\"..\/input\/all-euro-matches\/all-euro-data-2019-2020.xlsx\", sheet_name = 'T1')\n\n# There are some discrepancies between match results dataset and FIFA 20\/21 dataset\n# We'll adjust the names in match results to those in FIFA datasets\n# This is a manual-intensive job, so feel free to use the code below for your work\n\nuk_df = uk.replace({'Man United':'Manchester United','West Ham':'West Ham United','Tottenham':'Tottenham Hotspur','Leicester':'Leicester City',\n                   'Newcastle':'Newcastle United','Brighton':'Brighton & Hove Albion','Norwich':'Norwich City','Man City':'Manchester City',\n                    'Wolves':'Wolverhampton Wanderers'})\n\nbe_df = be.replace({'Genk':'KRC Genk','Cercle Brugge':'KSV Cercle Brugge','St Truiden':'Sint-Truidense VV','Waregem':'SV Zulte-Waregem',\n                   'Anderlecht':'RSC Anderlecht','Charleroi':'Sporting de Charleroi','Eupen':'KAS Eupen','Club Brugge':'Club Brugge KV',\n                   'Standard':'Standard de Li\u00e8ge','Kortrijk':'KV Kortrijk','Oostende':'KV Oostende','Mechelen':'KV Mechelen',\n                   'Gent':'KAA Gent','Mouscron':'Royal Excel Mouscron','Antwerp':'Royal Antwerp FC'})\n\nfr_df = fr.replace({'Monaco':'AS Monaco','Marseille':'Olympique de Marseille','Angers':'Angers SCO','Brest':'Stade Brestois 29',\n                   'Dijon':'Dijon FCO','Montpellier':'Montpellier HSC','Nice':'OGC Nice','Lille':'LOSC Lille','Strasbourg':'RC Strasbourg Alsace',\n                   'Paris SG':'Paris Saint-Germain','Lyon':'Olympique Lyonnais','Nantes':'FC Nantes','Amiens':'Amiens SC',\n                   'Bordeaux':'FC Girondins de Bordeaux','Metz':'FC Metz','Nimes':'N\u00eemes Olympique','Toulouse':'Toulouse Football Club',\n                    'St Etienne':'AS Saint-\u00c9tienne','Reims':'Stade de Reims','Rennes':'Stade Rennais FC'})\n\nde_df = de.replace({'Bayern Munich':'FC Bayern M\u00fcnchen','Dortmund':'Borussia Dortmund','Freiburg':'SC Freiburg','Leverkusen':'Bayer 04 Leverkusen',\n                   'Werder Bremen':'SV Werder Bremen','Wolfsburg':'VfL Wolfsburg',\"M'gladbach\":'Borussia M\u00f6nchengladbach',\n                   'Ein Frankfurt':'Eintracht Frankfurt','Union Berlin':'1. FC Union Berlin','FC Koln':'1. FC K\u00f6ln','Augsburg':'FC Augsburg',\n                   'Fortuna Dusseldorf':'Fortuna D\u00fcsseldorf','Hoffenheim':'TSG 1899 Hoffenheim','Mainz':'1. FSV Mainz 05','Paderborn':'SC Paderborn 07',\n                   'Schalke 04':'FC Schalke 04','Hertha':'Hertha BSC'})\n\nit_df = it.replace({'Spal':'SPAL','Verona':'Hellas Verona',})\n\nes_df = es.replace({'Ath Bilbao':'Athletic Club de Bilbao','Celta':'RC Celta','Valencia':'Valencia CF','Mallorca':'RCD Mallorca',\n                   'Leganes':'CD Legan\u00e9s','Villarreal':'Villarreal CF','Alaves':'Deportivo Alav\u00e9s','Espanol':'RCD Espanyol',\n                   'Betis':'Real Betis','Ath Madrid':'Atl\u00e9tico Madrid','Granada':'Granada CF','Levante':'Levante UD','Osasuna':'CA Osasuna',\n                   'Getafe':'Getafe CF','Barcelona':'FC Barcelona','Sevilla':'Sevilla FC','Sociedad':'Real Sociedad','Eibar':'SD Eibar',\n                   'Valladolid':'Real Valladolid CF'})\n\nnt_df = nt.replace({'Zwolle':'PEC Zwolle','Twente':'FC Twente','VVV Venlo':'VVV-Venlo','Heracles':'Heracles Almelo','Den Haag':'ADO Den Haag',\n                   'Groningen':'FC Groningen','For Sittard':'Fortuna Sittard','Heerenveen':'SC Heerenveen','Waalwijk':'RKC Waalwijk',\n                   'Utrecht':'FC Utrecht','PSV Eindhoven':'PSV'})\n\npt_df = pt.replace({'Portimonense':'Portimonense SC','Gil Vicente':'Gil Vicente FC','Benfica':'SL Benfica','Boavista':'Boavista FC',\n                   'Maritimo':'Clube Sport Mar\u00edtimo','Sp Braga':'SC Braga','Setubal':'Vit\u00f3ria de Set\u00fabal','Famalicao':'Famalic\u00e3o',\n                   'Moreirense':'Moreirense FC','Belenenses':'Os Belenenses','Porto':'FC Porto','Aves':'CD Aves',\n                   'Pacos Ferreira':'FC Pa\u00e7os de Ferreira','Guimaraes':'Vit\u00f3ria Guimar\u00e3es', 'Sp Lisbon':'Sporting CP',\n                   'Tondela':'CD Tondela','Rio Ave':'Rio Ave FC'})\n\ntr_df = tr.replace({'Genclerbirligi':'Gen\u00e7lerbirli\u011fi SK','Konyaspor':'Atiker Konyaspor','Goztep':'G\u00f6ztepe SK','Kasimpasa':'Kasimpa\u015fa SK',\n                   'Fenerbahce':'Fenerbah\u00e7e SK','Besiktas':'Be\u015fikta\u015f JK','Ankaragucu':'MKE Ankarag\u00fcc\u00fc','Buyuksehyr':'Medipol Ba\u015fak\u015fehir FK',\n                   'Rizespor':'\u00c7aykur Rizespor','Galatasaray':'Galatasaray SK','Gaziantep':'Gazi\u015fehir Gaziantep F.K.'})\n\n# Append all the results in 2019\/2020 season into one dataframe and take a look\nallres_20 = uk_df.append([be_df,fr_df,de_df,it_df,es_df,nt_df,pt_df,tr_df])[['HomeTeam','AwayTeam','FTHG','FTAG','FTR']]\nallres_20","37feedea":"# For convention, replace the values match result column accordingly \nallres_20['FTR'] = allres_20['FTR'].replace(['H','A','D'],[1,2,0])\n\n# Since we have two teams, one Home and one Away, we'll need to copy team overall dataset into two\nhome_teams_20 = teams_20\nhome_teams_20 = home_teams_20.add_prefix('Home ')\naway_teams_20 = teams_20 \naway_teams_20 = away_teams_20.add_prefix('Away ')\n\nhome_teams_21 = teams_21\nhome_teams_21 = home_teams_21.add_prefix('Home ')\naway_teams_21 = teams_21\naway_teams_21 = away_teams_21.add_prefix('Away ')\n\n# Then, to get a table with match results and stats for each Home and Away team, merge results with team stats\nres_df_1 = pd.merge(allres_20,home_teams_20,'left',left_on='HomeTeam',right_on='Home Club')\nalltable = pd.merge(res_df_1,away_teams_20,'left',left_on='AwayTeam',right_on='Away Club')\n\n# Drop clubs to get rid of duplication\nalltable = alltable.drop(['Home Club','Away Club'],axis=1)\n\n# Finally, get a training-ready dataset by only retaining FTR column which is the outcome of the match\nalltable_df = alltable.drop(['HomeTeam','AwayTeam','FTHG','FTAG'],axis=1)\n\n# Feature selection\nX = alltable_df.drop('FTR',axis=1).values\ny = alltable_df['FTR']\n\n# from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)\n\n# Import the scaler and fit train and test data\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Train the model using k=3 initially and randomly\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint(classification_report(y_test,pred))\n","b5bf78ca":"# I sense that accuracy could be improved, so I will try to get Error Rate for k values up to 40\n# Where we see error rate gets flattened, we can then decide on an optimal k value for our model\n\nfrom sklearn.model_selection import cross_val_score\nerror_rate = []\n\n# Check the k values up to 60 and see how error rates are changing\nfor i in range(1,60):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,60),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\n\nk_scores = []\n\n# Check the k values up to 60 and see how accuracy is changing\nfor i in range(1,50):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    k_scores.append(cross_val_score(knn, X, y, scoring='accuracy', cv = 5).mean())\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,50),k_scores,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Accuracy vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Accuracy')","6ee5f27f":"# Appears that we have a local optimum at k=28, I will train the model at k=28\nknn = KNeighborsClassifier(n_neighbors=28)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint(classification_report(y_test,pred))","285a9781":"# We have 51% accuracy in overall which is ~10% more than the initial model, which is better\n\n# Add new teams promoted to Turkish Super Lig last year\nnew_teams = ['Fatih Karag\u00fcmr\u00fck S.K.','Hatayspor','BB Erzurumspor']\nall_teams = pd.DataFrame(tr_df['HomeTeam'].unique())\nall_teams = all_teams.append(new_teams)\n\n# Create fixtures \n\ntr_fixt=[]\n\ntr_fixt = pd.DataFrame(columns=['HomeTeam','AwayTeam'])\n\nfor i in all_teams[0].unique():\n    for k in all_teams[0].unique():\n        if i!=k:\n            tr_fixt = tr_fixt.append({'HomeTeam':i,'AwayTeam':k},ignore_index=True)\n            \ntr_fixt = tr_fixt[tr_fixt['HomeTeam'].notna()]\ntr_fixt\n\ntr_fixt_temp = pd.merge(tr_fixt,home_teams_21,'left',left_on='HomeTeam',right_on='Home Club')\ntr_fixt_final = pd.merge(tr_fixt_temp,away_teams_21,'left',left_on='AwayTeam',right_on='Away Club')\ntr_fixt_final = tr_fixt_final.drop(['HomeTeam','AwayTeam','Home Club','Away Club'],axis=1)","59c39924":"# Make prediction based on KNN model\n\ntr_fix_df = scaler.transform(tr_fixt_final)\npred = knn.predict(tr_fix_df)\n\ntr_fixt['Results']=pred\ntr_fixt['Homepts']=0\ntr_fixt['Awaypts']=0\ntr_fixt['Homepts'][tr_fixt['Results']==1]=3\ntr_fixt['Awaypts'][tr_fixt['Results']==2]=3\ntr_fixt['Homepts'][tr_fixt['Results']==0]=1\ntr_fixt['Awaypts'][tr_fixt['Results']==0]=1\n\nhpts=tr_fixt.groupby(['HomeTeam']).sum()\nhpts=hpts.drop(['Awaypts','Results'],axis=1)\napts=tr_fixt.groupby(['AwayTeam']).sum()\napts=apts.drop(['Homepts','Results'],axis=1)\n\nhpts.reset_index(inplace=True)\napts.reset_index(inplace=True)\ntr_pred = pd.concat([hpts,apts],axis=1)\ntr_pred['Total Points']=tr_pred['Homepts']+tr_pred['Awaypts']\ntr_pred=tr_pred.drop(columns=['Homepts','Awaypts','AwayTeam'],axis=1)\ntr_pred=tr_pred.iloc[:,~tr_pred.columns.duplicated()]\ntr_pred=tr_pred.groupby(['HomeTeam']).sum()\ntr_pred.sort_values(['Total Points'],ascending=False)","56c59234":"Genel olarak yorumlayacak olursak, modelim beraberlikleri yakalama konusunda fazla basarili degil ayni zamanda ev sahibi takimi da genel olarak favori olarak goruyor. Dolayisiyla tablodaki tahminlerin kulup bazinda fazlaca puanlara sahip oldugunu soylemek mumkun, ote yandan gecen yillara kiyasla lige 3 adet ek takimin gelmesi puan durumlariyla ilgili yorumlarimi da simdilik kisitli birakiyor. Baktigimizda siralamanin kuluplerin gucleriyle az cok ayni oranda oldugunu gormekteyiz","e622d904":"**Sonu\u00e7:**\n\n***Bu projenin amac\u0131 nedir?***\n\n* Ge\u00e7en y\u0131l\u0131n ma\u00e7 sonu\u00e7lar\u0131 ve tak\u0131m istatistiklerini kullanarak olu\u015fturdu\u011fumuz modellerle S\u00fcper Lig 2020-2021 sezonu i\u00e7in puan ve s\u0131ralama tahmini yapmak\n\n\n***Modelimiz ba\u015far\u0131l\u0131 oldu mu?***\n\n* Modelimiz %51 oran\u0131nda accuracy de\u011feri sa\u011flad\u0131, bu yap\u0131lan akademik \u00e7al\u0131\u015fmalara olduk\u00e7a yak\u0131n bir oran. Fakat hala modelin geli\u015ftirilebilir oldu\u011funu g\u00f6steriyor.(https:\/\/www.imperial.ac.uk\/media\/imperial-college\/faculty-of-engineering\/computing\/public\/1718-ug-projects\/Corentin-Herbinet-Using-Machine-Learning-techniques-to-predict-the-outcome-of-profressional-football-matches.pdf)\n\n***Modelin geli\u015ftirme alanlar\u0131 nedir?***\n\n* Farkl\u0131 bir model geli\u015ftirme: S\u0131n\u0131fland\u0131rma tahminlemesi yapabilecek Decision Tree, Random Forest veya ANN tarz\u0131nda algoritmalar kullan\u0131larak performanslar\u0131 \u00f6l\u00e7\u00fclebilir\n* Veri manip\u00fclasyonu ve ek data: Tak\u0131mlar\u0131n ma\u00e7 \u00f6ncesi formu, ilk 11'leri, sakatl\u0131klar\u0131, kondisyonlar\u0131 gibi veriler modele girilerek daha isabetli bir model elde edilmesi beklenebilir\n* Modelin birden fazla kez calistirilmasi: Model farkli training set ve seedlerle bir kac kez calistirilip, her ayri senaryo icin ortalama alinarak daha isabetli sonuclar elde edilebilir\n\n\u0130nceledi\u011finiz i\u00e7in te\u015fekk\u00fcr ederim!","f42f88de":"![image.png](attachment:image.png)\n\nGe\u00e7en y\u0131l \u015eampiyonlar Ligi i\u00e7in yapt\u0131\u011f\u0131m benzer \u00e7al\u0131\u015fmay\u0131 bu linke bulabilirsiniz: https:\/\/www.kaggle.com\/cankumru\/champions-league-19-20-group-standings-prediction\n\nIn this study, I will try to predict the match outcomes, thus the standings in Turkish S\u00fcper Lig season 2020-2021 by developing a statistical model that uses player (actually team) ratings to determine the outcome of the match.\n\nBu \u00e7al\u0131\u015fmamda, FIFA 20\/21 oyunundaki oyuncu (dolay\u0131s\u0131yla tak\u0131m) istatistiklerini kullanarak olu\u015fturaca\u011f\u0131m istatiksel modelde, 2020-2021 sezonu s\u0131ralamas\u0131 tahmininde bulunaca\u011f\u0131m. Bu projedeki bir di\u011fer amac\u0131m \u00f6rnek olarak bir ka\u00e7 veri manip\u00fclasyonu operasyonununu ve s\u0131n\u0131fland\u0131rmada kullan\u0131lan K Nearest Neighbor modelini g\u00f6stermek. Bunun i\u00e7in sat\u0131rlara k\u00fc\u00e7\u00fck notlar da ekledim, umar\u0131m benzer \u00e7al\u0131\u015fmalar i\u00e7in faydal\u0131 olur. \n\n**1. Kullan\u0131lacak veri setleri:** \n\n* FIFA 20 oyuncu verileri\n* FIFA 21 oyuncu verileri\n* 2019-2020 sezonu 9 Avrupa Liginden ma\u00e7 sonu\u00e7lar\u0131 (3000'den fazla ma\u00e7)\n\n**2. Geli\u015ftirilecek modeller:** \n* Bireysel oyuncu \u00f6zelliklerinin kullan\u0131lmas\u0131 ile olu\u015fturdu\u011fum tak\u0131m istatistikleri veri seti ile 2019-2020 sezonu ma\u00e7 sonu\u00e7lar\u0131n\u0131 birle\u015ftirerek bir tahminleme modeli olu\u015fturaca\u011f\u0131m\n* Model e\u011fitimi tamamland\u0131ktan sonra, bu modeli, FIFA 21'den elde etti\u011fim tak\u0131m istatistiklerini ve bu y\u0131l\u0131n S\u00fcper Lig fikstr\u00fcn\u00fc kullanarak ma\u00e7 sonu\u00e7lar\u0131n\u0131 tahmin etmekte kullanaca\u011f\u0131m\n* Yakla\u015f\u0131m olarak, bir ma\u00e7\u0131n 3 farkl\u0131 sonucu olabilece\u011fi ger\u00e7e\u011finden yola \u00e7\u0131karak bir s\u0131n\u0131fland\u0131rma modeli kullanmam gerekiyor. Bunun i\u00e7in, K Nearest Neighbor kullanaca\u011f\u0131m (Decision Trees, Random Forest veya ANN algoritmalar\u0131n\u0131 denemeyece\u011fim, fakat bunlar da kullan\u0131larak model olu\u015fturulabilir)\n\n**3. Beklenen sonu\u00e7:** \n* \u00c7al\u0131\u015fman\u0131n sonunda, tak\u0131mlar\u0131n toplam puanlar\u0131 ve dolas\u0131yla s\u0131ralama tahminlerini elde etmi\u015f olaca\u011f\u0131z\n\n\u0130\u015fe koyulal\u0131m ve tuttu\u011fumuz tak\u0131m\u0131n bu y\u0131l ka\u00e7\u0131nc\u0131 olabilece\u011fini tahmin edelim :)"}}