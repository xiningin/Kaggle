{"cell_type":{"aa700283":"code","d3ad73e7":"code","5d7a7df5":"code","83c87c1e":"code","ec673100":"code","1d03b946":"code","84011b30":"code","15ec9037":"code","91ab19a6":"code","19402e6b":"code","da628896":"code","d1db7ae7":"code","d2cd2db4":"code","907c5d85":"code","9a7fae53":"code","3b637234":"code","ae49ae8f":"code","99249be9":"code","d0678caa":"code","4d4a4feb":"code","f736d5d2":"code","891f366c":"code","ba2fc0cd":"code","8937a916":"code","1636a275":"code","12e6a6e5":"code","7feb9ab8":"code","c329bbb5":"markdown","4c292a10":"markdown","cf46ee0d":"markdown","519273d1":"markdown","cb05bff2":"markdown","76a49c7d":"markdown"},"source":{"aa700283":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Any results you write to the current directory are saved as output.\n\nimport matplotlib.pyplot as plt","d3ad73e7":"Brand = [\"BMW\",\"Mercedes\",\"Audi\",\"Toyota\",\"Honda\",\"Dacia\"];   LuxuryLevel = [4,5,4,3,2,1];    HP = [300,270,290,175,180,110];   # making series","5d7a7df5":"list_label = [\"Brand\",\"LuxuryLevel\",\"HP\"];    list_col = [Brand, LuxuryLevel, HP]; ","83c87c1e":"zipped = list(zip(list_label,list_col));   # zipping values with Labels","ec673100":"data_dict = dict(zipped);      # transforming our zipped list to dictionary","1d03b946":"df = pd.DataFrame(data= data_dict);    ","84011b30":"df","15ec9037":"# Let's add some more columns\n\ndf['PriceRange'] = [\"\u00a3\u00a3\u00a3\",\"\u00a3\u00a3\u00a3\u00a3\",\"\u00a3\u00a3\u00a3\",\"\u00a3\u00a3\",\"\u00a3\u00a3\",\"\u00a3\"]\n\ndf['HasRaceCar'] = [True,True,True,False,True,False]","91ab19a6":"df","19402e6b":"# Let's Do a Broadcasting on our data","da628896":"df['HasSUV'] = True;   df['HasHB'] = True;","d1db7ae7":"df","d2cd2db4":"df = df.append({\"Brand\": 'Ferrari',\"LuxuryLevel\": 5,\"HP\": 620,\"PriceRange\": \"\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\", \"HasRaceCar\": True, \"HasSUV\": False, \"HasHB\": False}, ignore_index=True)","907c5d85":"df","9a7fae53":"df.plot(kind='hist', y='HP', bins=10)\ndf.plot(kind='hist', y='HP', bins=10, cumulative=True)","3b637234":"Income = [45,50,35,45,50,80,45,50,55,72];   Tax = [5,8,4,5,9,16,5,8,9,11];  Bonus = [15,18,41,15,19,16,51,18,19,19];\n\nlabels = [\"Income\",\"Tax\",\"Bonus\"];   columns = [Income,Tax,Bonus];","ae49ae8f":"zipped = list(zip(labels,columns));","99249be9":"data_dict = dict(zipped);\n","d0678caa":"data = pd.DataFrame(data_dict);","4d4a4feb":"data    # until now everything is without date.","f736d5d2":"# now we will add date on our DataFrame\n\ndate_list = [\"2012-01-01\",\"2012-01-15\",\"2012-02-01\",\"2012-02-15\",\"2012-03-01\",\"2012-03-15\",\"2012-04-01\",\"2012-04-15\",\"2012-05-01\",\"2012-05-15\"]\n\ndatetime_obj = pd.to_datetime(date_list);\n\ndata[\"Date\"] = datetime_obj;                       \n\ndata = data.set_index(\"Date\")","891f366c":"data       # now we can see our dates on frame and they are our indexes.","ba2fc0cd":"# since we make it possible, Lets try to see our Income at February 2012..\n\nprint(data.Income[\"2012-02\"])   # only year and month written, since we want all month.","8937a916":"# what about each months total ?...\n\ndata.resample(\"M\").sum()   # M indicates the (M)onth   # .sum() shows total of whole values in the month given.","1636a275":"# Let's add \n\ndata = data.append(pd.DataFrame(index=pd.DatetimeIndex([\"2012-07-01\"]),data={\"Income\":65,\"Tax\":9,\"Bonus\":11}),sort=1)\ndata = data.append(pd.DataFrame(index=pd.DatetimeIndex([\"2012-07-15\"]),data={\"Income\":45,\"Tax\":7,\"Bonus\":20}),sort=1)","12e6a6e5":"data  # as we can see below, the 6th month do not exist on our DataFrame. we can use resampling to figure it out.","7feb9ab8":"data.resample(\"M\").first().interpolate(\"linear\") \n# by .interpolate(\"linear\") , we can see that our dataFrame shows us average estimated values for corresponding columns","c329bbb5":"What if something went wrong and we forget to insert our values once in following month?    \n# Interpolation","4c292a10":"## Time Series in PANDAS","cf46ee0d":"# Building Data Frames\n# Indexing & Resampling","519273d1":"this notebook is created for the 4th HW of DATAI data science","cb05bff2":"Cumulative Histogram Example","76a49c7d":"Firstly, I will create a simple example dataFrame to work on it."}}