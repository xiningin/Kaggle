{"cell_type":{"abdcde6b":"code","977fd310":"code","53cbaae6":"code","4f3bed3c":"code","8be3ebd1":"code","0ebc8905":"code","946c8a4e":"code","521745ed":"code","7049c1bf":"code","590c2130":"code","17c40bbc":"code","f05575cd":"code","5a58b633":"code","2edb21c9":"code","b07b0681":"code","e3f0f687":"code","5cb8942c":"code","44ed50eb":"code","c004c2d6":"code","5a2dc79f":"code","1ec00226":"code","5899fcd6":"code","3da87331":"code","2cf23f1a":"code","b967488f":"code","b1231874":"code","daa0c210":"code","904cbe3c":"code","c698c4da":"code","29c9b8ce":"code","adecb491":"code","b41762b7":"code","5fc96292":"code","4a82e3cf":"code","bff617c9":"code","092a29cc":"code","53639703":"code","fa93ad29":"code","6dce5b38":"code","dac7f8dd":"code","c8f8c963":"code","b88001d2":"code","be25fb60":"code","f9bb23d1":"code","518adec3":"code","b1d742a6":"code","97865b28":"code","5e3e23d0":"code","5bac99ac":"code","68f573a9":"code","e8263996":"code","5d00108f":"code","0777cbcf":"code","1ee36ebc":"code","9da8e6d5":"code","263c74fb":"code","96f5bb05":"code","1e2b02ea":"code","ad05847b":"code","b73f189f":"code","a8f6c366":"code","6b31042e":"code","3f0e4b76":"code","a168eba2":"code","37282e63":"code","de9e3e6e":"code","a09c55bc":"markdown","3fffefcc":"markdown","49eab7f8":"markdown","d4367b9f":"markdown","54a03855":"markdown","dde6d80d":"markdown","64ef13e6":"markdown","ff53440f":"markdown","ef3e2d0e":"markdown","2e6550a1":"markdown","bc9433a5":"markdown","542a6adb":"markdown","e257af98":"markdown","dfecb7b3":"markdown","2cfd436e":"markdown","be64389e":"markdown","4831eb77":"markdown","a32e93c2":"markdown","5d3ce570":"markdown"},"source":{"abdcde6b":"\n\u015eirketi terk edecek m\u00fc\u015fterileri tahmin edebilecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirebilir misiniz?\n\nAma\u00e7 bir bankan\u0131n m\u00fc\u015fterilerinin bankay\u0131 terk etme ya da terk etmeme durumunun tahmin edilmesidir.\n\nM\u00fc\u015fteri terkini tan\u0131mlayan olay m\u00fc\u015fterinin banka hesab\u0131n\u0131 kapatmas\u0131d\u0131r.\n\nVeri Seti Hikayesi:\n\n10000 g\u00f6zlemden ve 12 de\u011fi\u015fkenden olu\u015fmaktad\u0131r.\nBa\u011f\u0131ms\u0131z de\u011fi\u015fkenler m\u00fc\u015fterilere ili\u015fkin bilgiler bar\u0131nd\u0131rmaktad\u0131r.\nBa\u011f\u0131ml\u0131 de\u011fi\u015fken m\u00fc\u015fteri terk durumunu ifade etmektedir.\nDe\u011fi\u015fkenler:\n\nSurname : Soy isim\nCreditScore : Kredi skoru\nGeography : \u00dclke (Germany\/France\/Spain)\nGender : Cinsiyet (Female\/Male)\nAge : Ya\u015f\nTenure : Ka\u00e7 y\u0131ll\u0131k m\u00fc\u015fteri\nBalance : Bakiye\nNumOfProducts : Kullan\u0131lan banka \u00fcr\u00fcn\u00fc\nHasCrCard : Kredi kart\u0131 durumu (0=No,1=Yes)\nIsActiveMember : Aktif \u00fcyelik durumu (0=No,1=Yes)\nEstimatedSalary : Tahmini maa\u015f\nExited : Terk mi de\u011fil mi? (0=No,1=Yes)","977fd310":"\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53cbaae6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV,train_test_split,cross_val_score\nimport itertools\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.neighbors import LocalOutlierFactor # \u00e7ok de\u011fi\u015fkenli ayk\u0131r\u0131 g\u00f6zlem incelemesi\nfrom sklearn.preprocessing import scale,StandardScaler, MinMaxScaler,Normalizer,RobustScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import  accuracy_score, f1_score, precision_score,confusion_matrix, recall_score, roc_auc_score\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);\ndf = pd.read_csv(\"..\/input\/churn-for-bank-customers\/churn.csv\" , index_col=0)","4f3bed3c":"df.head()","8be3ebd1":"df.shape","0ebc8905":"df.isna().sum()","946c8a4e":"df[\"Exited\"].value_counts()*100\/len(df)\n","521745ed":"\n\nlabels = 'Exited', 'Retained'\nsizes = [df.Exited[df['Exited']==1].count(), df.Exited[df['Exited']==0].count()]\nexplode = (0, 0.1)\nfig1, ax1 = plt.subplots(figsize=(10, 8))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Proportion of customer churned and retained\", size = 20)\nplt.show()","7049c1bf":"fig, axarr = plt.subplots(2, 2, figsize=(20, 12))\nsns.countplot(x='Geography', hue = 'Exited',data = df, ax=axarr[0][0])\nsns.countplot(x='Gender', hue = 'Exited',data = df, ax=axarr[0][1])\nsns.countplot(x='HasCrCard', hue = 'Exited',data = df, ax=axarr[1][0])\nsns.countplot(x='IsActiveMember', hue = 'Exited',data = df, ax=axarr[1][1])","590c2130":"df = df.drop([ \"CustomerId\", \"Surname\" ], axis = 1)","17c40bbc":"df.head()","f05575cd":"import seaborn as sns\nsns.pairplot(df, hue = \"Exited\");","5a58b633":"# burada ba\u011f\u0131ml\u0131 de\u011fi\u015fkeni, \"Exited\" u yukar\u0131daki gibi sat\u0131ra ve s\u00fct\u00fcna koymadan g\u00f6sterdik. yani \"Exited\" g\u00f6sterip bo\u015f g\u00f6stermedi\n# regresyon e\u011frilerin icin kind argumanini kullaniyorum \n# burada sdf dataframindeki [\"Age\", \"Balance\",\"Tenure\",\"EstimatedSalary\",\"CreditScore\"] de\u011fi\u015fkenleri se\u00e7tik.\nsns.pairplot(df, vars = [\"Age\", \"Balance\",\"Tenure\",\"EstimatedSalary\",\"CreditScore\"], \n             hue = \"Exited\",\n            kind = \"reg\");","2edb21c9":"df = pd.get_dummies(df, columns = {\"Gender\", \"Geography\"})\n","b07b0681":"df.head()","e3f0f687":"for feature in df:\n    \n    Q1 = df[feature].quantile(0.05)\n    Q3 = df[feature].quantile(0.95)\n    IQR = Q3-Q1\n    lower = Q1- 1.5*IQR\n    upper = Q3 + 1.5*IQR\n    \n    if df[(df[feature] > upper)].any(axis=None):\n        print(feature,\"yes\")\n    else:\n        print(feature, \"no\")","5cb8942c":"sns.boxplot(x=df.NumOfProducts);","44ed50eb":"Q1 = df[\"NumOfProducts\"].quantile(0.05)\nQ3 = df[\"NumOfProducts\"].quantile(0.95)\nIQR = Q3-Q1\nupper = Q3 + 1.5*IQR\nupper","c004c2d6":"df[df[\"NumOfProducts\"] > upper]\ndf.loc[df[\"NumOfProducts\"] > upper, \"NumOfProducts\"] = upper","5a2dc79f":"df.groupby(\"Exited\" ).agg({\"CreditScore\":\"mean\" , \"Tenure\":\"mean\" ,\"Balance\":\"mean\",  } ).head()","1ec00226":"df[\"CreditScore\"].max()","5899fcd6":"df[\"CreditScore\"].min()","3da87331":"# sonuc olarak verimizde max ve min kredi skoru 350 ve 850 arsinda degisiyor","2cf23f1a":"def CreditScore(kredi_skoru):\n    \n    if 300<= kredi_skoru < 500:\n        return \"Cok riskli\"\n    elif 500<=kredi_skoru < 700:\n        return \"Riskli\"\n    elif  700<= kredi_skoru < 800:\n        return \"Iyi\"\n    elif  800<=  kredi_skoru < 850:\n        return \"Cok iyi\"\n    elif  850 <= kredi_skoru: \n        return \"Harika\"\n    elif 300 > kredi_skoru :\n        return \"Berbat\"\n    \ndf['New_CreditScore_status'] = df['CreditScore'].apply(CreditScore)\n    \n","b967488f":"# #bakiye maas orani","b1231874":"df['New_BalanceSalaryRate'] = df.Balance\/df.EstimatedSalary\n","daa0c210":"df.head()","904cbe3c":"#OneHotEncoding yeni degisken icin yapmam lazim","c698c4da":"df =pd.get_dummies(df, columns = [\"New_CreditScore_status\"], drop_first = True, dummy_na = True)","29c9b8ce":"df.columns\n","adecb491":"df.head(20)","b41762b7":"df.isnull().sum()","5fc96292":"df.shape","4a82e3cf":"df.New_CreditScore_status_nan.head()","bff617c9":"df = df.drop([ \"New_CreditScore_status_nan\" ], axis = 1)","092a29cc":"y = df[\"Exited\"]\nX = df.drop([\"Exited\"], axis = 1)","53639703":"scaled_cols=StandardScaler().fit_transform(X)\nscaled_cols=pd.DataFrame(scaled_cols, columns=X.columns)\nscaled_cols.head()","fa93ad29":"# Tum modellerin train validasyon skorlar\u0131\n\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('SVM', SVC(gamma='auto')))\nmodels.append(('XGB', GradientBoostingClassifier()))\n\n# evaluate each model in turn\nresults = []\nnames = []\n","6dce5b38":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 12345)\n","dac7f8dd":"\n\nresults = []\nnames = []\n\nfor name, model in models:\n    \n        kfold = KFold(n_splits = 10, random_state = 12345)\n        cv_results = cross_val_score(model, X_train, y_train, cv = kfold, scoring= \"accuracy\")\n        results.append(cv_results)\n        names.append(name)\n        msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n        print(msg)\n","c8f8c963":"for name, model in models:\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        acc = accuracy_score(y_test, y_pred)\n        msg = \"%s: (%f)\" % (name, acc)\n        print(msg)","b88001d2":"from sklearn.model_selection import cross_val_score, GridSearchCV, RandomizedSearchCV","be25fb60":"rf_model = RandomForestClassifier(random_state = 12345).fit(X_train, y_train)","f9bb23d1":"y_pred = rf_model.predict(X_test)","518adec3":"print(\"cross_val_score : \", cross_val_score(rf_model, X_train, y_train, cv = 10).mean())","b1d742a6":"# RandomForest Tuning","97865b28":"rf_params = {\"max_depth\": [5,8,10,None],\n            \"max_features\": [2,5,10,15,17],\n            \"n_estimators\": [100,200, 500, 1000],\n            \"min_samples_split\": [2,5,10,20,30]}","5e3e23d0":"rf_cv_model = RandomizedSearchCV(estimator= rf_model, param_distributions = rf_params, n_iter=50, cv=10, scoring='accuracy', n_jobs=-1, verbose=2).fit(X, y)","5bac99ac":"rf_cv_model.best_params_","68f573a9":"rf_tuned = RandomForestClassifier(**rf_cv_model.best_params_).fit(X_train, y_train)","e8263996":"y_pred = rf_tuned.predict(X_test)\n\nprint(\"cross_val_score : \", cross_val_score(rf_tuned, X_train, y_train, scoring='accuracy', cv = 10, n_jobs=-1, verbose=2).mean())","5d00108f":"from sklearn.metrics import accuracy_score\nprint('RandomForest model accuracy score: {0:0.2f}'. format(accuracy_score(y_test, y_pred)))","0777cbcf":"from sklearn.model_selection import cross_val_score, GridSearchCV, RandomizedSearchCV\n","1ee36ebc":"xgb = XGBClassifier().fit(X_train,y_train)\ny_pred = xgb.predict(X_test)\n\nprint(\"cross_val_score : \", cross_val_score(xgb, X_train, y_train, cv = 10).mean())\n","9da8e6d5":"# XGB Tuning ","263c74fb":"xgb_params = {\"learning_rate\": [0.1,0.01,0.5],\n             \"max_depth\": [2,3,4,5,8],\n             \"n_estimators\": [100,200,500,1000],\n             \"colsample_bytree\": [0.4,0.7,1]}","96f5bb05":"xgb_rsc = RandomizedSearchCV(estimator=xgb, param_distributions=xgb_params, n_iter=50, cv=10, scoring='accuracy', n_jobs=-1, verbose=2).fit(X,y)","1e2b02ea":"xgb_rsc.best_params_","ad05847b":"xgb_tuned = XGBClassifier(**xgb_rsc.best_params_).fit(X_train, y_train)","b73f189f":"y_pred = xgb_tuned.predict(X_test)","a8f6c366":"print(\"cross_val_score : \", cross_val_score(xgb_tuned, X_train, y_train, cv = 10).mean())","6b31042e":"from sklearn.metrics import accuracy_score\nprint('XGBoost model accuracy score: {0:0.2f}'. format(accuracy_score(y_test, y_pred)))","3f0e4b76":"\nImportance = pd.DataFrame({'Importance':xgb_tuned.feature_importances_*100},\n                          index = X_train.columns)\nImportance.sort_values(by = 'Importance',\n                       axis = 0,\n                       ascending = True).plot(kind = 'barh',\n                                              color = 'r', )\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","a168eba2":"Importance = pd.DataFrame({'Importance':rf_tuned.feature_importances_*100},\n                          index = X_train.columns)\nImportance.sort_values(by = 'Importance',\n                       axis = 0,\n                       ascending = True).plot(kind = 'barh',\n                                              color = 'r', )\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","37282e63":"from matplotlib import rc,rcParams\ndef plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n\n    plt.rcParams.update({'font.size': 19})\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title,fontdict={'size':'16'})\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45,fontsize=13,color=\"blue\")\n    plt.yticks(tick_marks, classes,fontsize=12,color=\"blue\")\n    rc('font', weight='bold')\n    fmt = '.1f'\n    thresh = cm.max()\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"red\")\n\n    plt.ylabel('True label',fontdict={'size':'16'})\n    plt.xlabel('Predicted label',fontdict={'size':'16'})\n    plt.tight_layout()\n","de9e3e6e":"cfm = confusion_matrix(y_test, y_pred=y_pred)\nplot_confusion_matrix(cfm, classes=['Non Exited','Exited'],\n                      title='Churn Confusion matrix')\ntn, fp, fn, tp = cfm.ravel()\nprint(\"True Negatives: \",tn)\nprint(\"False Positives: \",fp)\nprint(\"False Negatives: \",fn)\nprint(\"True Positives: \",tp)","a09c55bc":"# 3.Standardization","3fffefcc":"# 1.2 outliers","49eab7f8":"# 1.Data Preprocessing","d4367b9f":"#  RandomForest","54a03855":"# 5.1   XGB","dde6d80d":"# 5. FEATURE IMPORTANCE","64ef13e6":"# 4.1.1 Model Installation","ff53440f":"# 6.Confusion Matrix","ef3e2d0e":"# 7.Reporting","2e6550a1":"# 2. FEATURE ENGINEERING","bc9433a5":"# 4.1 Model Tuning","542a6adb":"# 1.1 one hot encoding","e257af98":"# Data Understanding","dfecb7b3":"\u00d6N BILGI :\n\nKredi ya da kredi kart\u0131 vermek i\u00e7in bankan\u0131n belirledi\u011fi alt s\u0131n\u0131r bankadan bankaya, almak istedi\u011finiz tutara ve gelir durumunuza g\u00f6re de\u011fi\u015fse bile Findeks kredi notu aral\u0131klar\u0131n\u0131n anlam\u0131 \u015f\u00f6yle:\n\nKredi Notu\n\n0 - 699  = Risk Grubu\n\n700 - 1099 = En riskli\n\n1100 - 1499 = Orta riskli\n\n1500 - 1699 = Az riskli\n\n1700 - 1900 = Iyi\n\n1500 - 1900 = \u00c7ok \u0130yi","2cfd436e":"# 5.2 RandomForest","be64389e":"#  Churn veri seti input edildi.\n\n#  1. Veri analizi veri \u00f6n isleme yapildi.\n#    * Aykiri g\u00f6zlem yapildi\n#    * One hot encoding yapildi\n\n#  2.Feature Enginering yapildi\n\n#  3.Standardization\n\n#  4.Alti  tane  Model ayni anda kuruldu ve en iyi modelllrin RandomForest  ve XGB oldugu saptandi. \n\n#  4.1.RandomForest ve XGB modeli  tun edildi ve en iyi sonuc amaclandi.\n\n#  5.Degisken onem siralarina bakildi bu iki modelde.\n\n#  6.Model sonucu: sonuc sayilari yazdirilarak g\u00f6rselestirildi.       ","4831eb77":"# Problem","a32e93c2":"# XGB","5d3ce570":"# 4.Modeling"}}