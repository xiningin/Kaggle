{"cell_type":{"993d7f89":"code","caa4a7b5":"code","ba3f7fcf":"code","296ffdea":"code","d716855e":"code","59e23367":"code","98a8222c":"code","7b1469b4":"code","ce249e83":"code","2ab8b202":"code","2948c3d1":"code","ba74d4c3":"code","59bb4706":"code","7c0fdc61":"code","268a7565":"code","73e6088e":"code","9a055cbb":"code","9b4a36c4":"code","6b721f6c":"code","61d8792e":"code","914bcb39":"code","1e6f3e26":"code","4778f26c":"code","93e1c12a":"code","ba7601e1":"code","4bcce7ef":"code","e5a84de0":"code","29c2d198":"code","14fee237":"code","92bf1c25":"markdown","bae31997":"markdown","6baf0c4f":"markdown","86c58529":"markdown","9df5ecdf":"markdown","932db66c":"markdown","d8faa1ab":"markdown","1b88dc00":"markdown","c8c0d7b7":"markdown","5767f3b1":"markdown","36d51431":"markdown","765f00c3":"markdown","b760c7b8":"markdown","cc25ab4b":"markdown","6545785c":"markdown","4e66c0be":"markdown","0cf2cd82":"markdown","d89230bc":"markdown","d2ae2ad7":"markdown","19aa52e9":"markdown","afc9535e":"markdown","68251ed0":"markdown","83395152":"markdown"},"source":{"993d7f89":"import numpy as np\nimport pandas as pd","caa4a7b5":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', decimal=',')\ndf_train.Age = df_train['Age'].astype(float)\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', decimal=',')\ndf_test.Age = df_test['Age'].astype(float)\n\ndf_all = pd.concat([df_train, df_test], sort=False, copy=False, ignore_index=True)","ba3f7fcf":"print(df_train.info())\ndf_train.head()","296ffdea":"print(df_test.info())\ndf_test.head()","d716855e":"df_all.info()","59e23367":"tmp = df_train.groupby('Survived').Pclass\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","98a8222c":"tmp = df_train.groupby('Survived').Sex\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","7b1469b4":"tmp = df_train.groupby('Survived').Age\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar(figsize=[20,5])\n#tmp.plot.hist(alpha=0.7, legend=True, bins=25)","ce249e83":"tmp = df_train.groupby('Survived').Parch\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","2ab8b202":"tmp = df_train.groupby('Survived').SibSp\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","2948c3d1":"tmp = df_train.groupby('Survived').Fare\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar(figsize=[20,5])","ba74d4c3":"tmp = df_train.groupby('Survived').Embarked\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()\n","59bb4706":"def makeTitle(df):\n    for index, row in df.iterrows():\n        pos_comma = row['Name'].find(',')\n        pos_point = row['Name'].find('.')\n        df.at[index, 'Title'] = (row['Name'][pos_comma+2:pos_point])\n        \n    titles = {\n        \"Capt\":       \"Officer\",\n        \"Col\":        \"Officer\",\n        \"Major\":      \"Officer\",\n        \"Jonkheer\":   \"Royalty\",\n        \"Don\":        \"Royalty\",\n        \"Sir\" :       \"Royalty\",\n        \"Dr\":         \"Officer\",\n        \"Rev\":        \"Officer\",\n        \"the Countess\":\"Royalty\",\n        \"Dona\":       \"Royalty\",\n        \"Mme\":        \"Mrs\",\n        \"Mlle\":       \"Miss\",\n        \"Ms\":         \"Mrs\",\n        \"Mr\" :        \"Mr\",\n        \"Mrs\" :       \"Mrs\",\n        \"Miss\" :      \"Miss\",\n        \"Master\" :    \"Master\",\n        \"Lady\" :      \"Royalty\"\n    }\n    df.Title = df.Title.map(titles)\n    \n    return df\n        \ntmp = makeTitle(df_train)\ntmp = tmp.groupby(['Survived', 'Title'])\n(tmp.size()[1] \/ (tmp.size()[1] + tmp.size()[0])).fillna(0).plot.bar()","7c0fdc61":"import re\n\ndef getTicketNumber(df):\n    df = df.copy()\n    for index,row in df.iterrows():\n        if (row['Ticket'] == 'LINE'):\n            df.at[index, 'Ticket'] = -1\n        else:\n            ticketNum = re.sub('[^0-9]','', row['Ticket'])\n            df.at[index, 'Ticket'] = float(ticketNum)\n    df.astype({'Ticket': 'int32'}).dtypes\n    return df\n\ntmp = getTicketNumber(df_train)\ntmp = tmp.groupby(['Ticket']).agg({'PassengerId':'count', 'Survived':'mean'})\ntmp = tmp.rename(columns={\"PassengerId\": \"Count\", \"Survived\": \"Survived %\"})","268a7565":"print('Traveling in Group')\nprint('Average group size: ' + str(tmp[tmp['Count'] > 1].mean()['Count']))\nprint('Chances to survive in a group: ' + str(tmp[tmp['Count'] > 1].mean()['Survived %']))\nprint()\nprint('Traveling alone')\nprint('Average group size: ' + str(tmp[tmp['Count'] == 1].mean()['Count']))\nprint('Chances to survive in a group: ' + str(tmp[tmp['Count'] == 1].mean()['Survived %']))","73e6088e":"def fillingGaps(df):\n    for index, row in df.iterrows():\n        if (np.isnan(row.Age)):\n            df.loc[index, 'Age'] = df[(df.Sex == row.Sex) & (df.Pclass == row.Pclass)].Age.mean()\n\n    \n    return df\n\ndf_all = fillingGaps(df_all)\ndf_all.info()","9a055cbb":"df_all = makeTitle(df_all)\ndf_all = getTicketNumber(df_all)\ndf_all['travelingInGroup'] = df_all.duplicated(['Ticket'], keep=False)\ndf_all.head(1)","9b4a36c4":"def tranformData(df):  \n    df = df.copy()\n    for index in df.index:   \n        \n        #PClass\n        pClass = df.iloc[index].Pclass\n        if pClass == 1:\n            df.at[index,'Pclass_1'] = 1\n        elif pClass == 2:\n            df.at[index,'Pclass_2'] = 1\n        elif pClass == 3:\n            df.at[index,'Pclass_3'] = 1\n      \n        #Sex\n        sex = df.iloc[index].Sex\n        if(sex == 'male'):\n            df.at[index, 'Sex'] = 0\n        elif(sex == 'female'):\n            df.at[index, 'Sex'] = 1\n        \n        #Embarked\n        embarked = df.iloc[index].Embarked\n        if embarked == 'Q':\n            df.at[index, 'EmbarkedQ'] = 1\n        elif embarked == 'C':\n            df.at[index, 'EmbarkedC'] = 1\n        elif embarked == 'S':\n            df.at[index, 'EmbarkedS'] = 1\n\n    \n        #Title\n        title = df.iloc[index].Title\n        df.at[index, title] = 1\n        \n            \n    df = df.drop(columns=['Pclass', 'Title', 'Embarked'])\n    df = df.fillna(0);\n    \n    return df\n\ntmp = tranformData(df_all)\ndf_all = tmp\ndf_all.info()","6b721f6c":"df_all.head(1)","61d8792e":"df_sub = df_all.drop(['Name', 'Cabin', 'PassengerId', 'Survived', 'Ticket'], 1)\ndf_sub.head(1)","914bcb39":"y = df_train[:891].Survived","1e6f3e26":"X_train = df_sub[:891]\nX_test = df_sub[891:]","4778f26c":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\ndef testRandomForestClassifier(X, y):\n    clf = RandomForestClassifier(n_estimators=20, max_depth=10, random_state=0)\n    result = cross_val_score(clf , X, y , cv=10)\n    print(result)\n    print(result.mean())\n    clf.fit(X,y)\n    return pd.DataFrame(clf.feature_importances_, index = X.columns, columns=['importance']).sort_values('importance',ascending=False)","93e1c12a":"testRandomForestClassifier(X_train, y)","ba7601e1":"X_train = X_train.drop(['Pclass_1','Pclass_2', 'Royalty', 'Officer', 'Master', 'Parch','EmbarkedC', 'EmbarkedQ', 'EmbarkedS'],1)\nX_test = X_test.drop(['Pclass_1','Pclass_2', 'Royalty', 'Officer', 'Master', 'Parch','EmbarkedC', 'EmbarkedQ', 'EmbarkedS'],1)","4bcce7ef":"testRandomForestClassifier(X_train, y)","e5a84de0":"test_params = dict(     \n    min_samples_split = [2,3,4,5], \n    min_samples_leaf = [2,3,4], \n    max_depth = [10,20,30],\n    n_estimators = [10,20,30],\n)\n\nclf = RandomForestClassifier(n_jobs=-1)\nclf_cv = GridSearchCV(estimator=clf,param_grid=test_params, cv=5) \nclf_cv.fit(X_train, y)\n\nprint('Best score: ' + str(clf_cv.best_score_))\nprint('Optimal params: ' + str(clf_cv.best_estimator_))","29c2d198":"def predictAndSave(X, clf, name): \n    result = clf.predict(X)\n    df_result = pd.DataFrame(data=result, columns=['Survived'])\n\n    df_result = pd.concat([df_test, df_result], axis=1)\n    df_result = df_result[['PassengerId', 'Survived']]\n    df_result.head(6)\n    df_result.to_csv('submission-' + name + '.csv', index=False)\n    return df_result","14fee237":"result = predictAndSave(X_test, clf_cv.best_estimator_, 'randomForest')\nresult.head(5)","92bf1c25":"**Probability to survive according to *Fare***","bae31997":"# Submission","6baf0c4f":"# Data Transformation\n* Pclass\n* Sex\n* Embarked\n* Title","86c58529":"**Probability to survive according to *Age***","9df5ecdf":"> # Data pre-processing\n* Filling the age data gaps","932db66c":"**Probability to survive if travelling in group. **\n(Group = all people in a group have the same ticket *number*)","d8faa1ab":"# Train and Test","1b88dc00":"**Probability to survive according to *Sex***","c8c0d7b7":"# Data","5767f3b1":"**Probability to survive according to *Embarked***","36d51431":"**Probability to survive according to *Parch***","765f00c3":"# Analyse Data","b760c7b8":"**Train Data**","cc25ab4b":"**Probability to survive according to *Title***","6545785c":"**Test Data**","4e66c0be":"# Select feature for training\n* Sex\n* Age \n* Pclass \n* Title\n* TravelingInGroup \n* Fare \n* SibSp \n* Parch \n* Embarked\n","0cf2cd82":"**Probability to survive according to *Pclass***","d89230bc":"# Test Hyperparameter","d2ae2ad7":"**Remove unimportant features**","19aa52e9":"**Probability to survive according to *SibSp***","afc9535e":"# Create new features\n* Title\n* Traveling in Group","68251ed0":"# Split training and test Data","83395152":"**All Date**"}}