{"cell_type":{"de301ec0":"code","cc0a929c":"code","788b3e93":"code","bdd47bd9":"code","d631da21":"code","7c974e1e":"code","babc0f36":"code","f8c6948c":"code","12008b14":"code","4784635e":"code","7ff14ecc":"code","fd4606c1":"code","d94f546a":"code","cd2e62a1":"code","984b66f5":"code","27f4d560":"code","c08d37bd":"code","ea773b8a":"code","53190235":"code","d54d24bd":"code","7904f0a4":"code","3ecac61a":"markdown","d31c0191":"markdown","96ec2328":"markdown","b93cffa5":"markdown","f4b760c2":"markdown","e840f0ed":"markdown","c35f9bb1":"markdown","542fce7d":"markdown","599b1723":"markdown","0b7b40c8":"markdown","589c5c49":"markdown","9c0f59e2":"markdown","b555cd36":"markdown","6821b6ad":"markdown","d13a3305":"markdown","33ca180f":"markdown","f66eabfc":"markdown","0d8bb3e0":"markdown","6deb3fa8":"markdown"},"source":{"de301ec0":"#IMPORT REQUIRED LIBRARIES:\n\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt\nimport pandas as pd","cc0a929c":"TRAIN_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train_images\"\ntrain_df = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")","788b3e93":"count_dict = train_df.labels.value_counts()\nclasses = list(count_dict.index)\nclasses_count = list(count_dict.values)\nprint(\"Number of unique labels: \",len(classes))\nprint(\"-------------------------------------------\")\ntrain_df.head()","bdd47bd9":"plt.figure(figsize=(35,15))\nplt.bar(classes,classes_count)\nplt.title(\"Number of instances per class\",fontweight=\"bold\",fontsize=40)\nplt.xlabel(\"Classes\",fontsize = 30)\nplt.xticks(rotation=20,fontsize = 20,fontweight = \"bold\")\nplt.xticks(fontsize = 20,fontweight = \"bold\")\nplt.ylabel(\"Count\",fontsize=30)\nplt.show()","d631da21":"# Use the Image Data Generator to import the images from the dataset\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1\/255.,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    validation_split = 0.2,\n    zoom_range = 0.2,\n    shear_range = 0.2,\n    vertical_flip = False)\n\n","7c974e1e":"HEIGHT = 124\nWIDTH=124\nSEED = 143\nBATCH_SIZE=32\ntrain_ds = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = TRAIN_PATH,\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (HEIGHT,WIDTH),\n    class_mode='categorical',\n    batch_size = BATCH_SIZE,\n    subset = \"training\",\n    shuffle = True,\n    seed = SEED,\n    validate_filenames = False\n)","babc0f36":"val_ds = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = TRAIN_PATH,\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (HEIGHT,WIDTH),\n    class_mode='categorical',\n    batch_size = BATCH_SIZE,\n    subset = \"validation\",\n    shuffle = True,\n    seed = SEED,\n    validate_filenames = False\n)","f8c6948c":"import tensorflow\ndef create_model():\n    \n    pretrained = ResNet50(include_top=False, weights='imagenet',input_shape=[HEIGHT,WIDTH, 3])\n            \n    x = pretrained.output\n    x = tensorflow.keras.layers.GlobalAveragePooling2D() (x)\n    outputs = tensorflow.keras.layers.Dense(len(classes),activation=\"softmax\", dtype='float32')(x)\n        \n    model = tensorflow.keras.Model(pretrained.input, outputs)\n    return model\n\nmodel = create_model()","12008b14":"model.summary()","4784635e":"import tensorflow_addons as tfa\n\ndef compile_model(model, lr=0.0001):\n    \n    optimizer = tensorflow.keras.optimizers.Adam(lr=lr)\n    \n    loss = tensorflow.keras.losses.CategoricalCrossentropy()\n    \n    #tf.keras.metrics.CategoricalAccuracy(name='categorical_accuracy')\n    metrics = [\n    tfa.metrics.F1Score(num_classes = len(classes),average = \"macro\",name = \"f1_score\")\n    ]\n\n    model.compile(optimizer=optimizer, loss=loss, metrics=metrics)\n\n    return model","7ff14ecc":"METRIC = \"val_f1_score\"\n\ndef create_callbacks(metric = METRIC):\n    \n    cpk_path = '.\/best_model.h5'\n    \n    checkpoint = tensorflow.keras.callbacks.ModelCheckpoint(\n        filepath=cpk_path,\n        monitor= metric,\n        mode='max',\n        save_best_only=True,\n        verbose=1,\n    )\n\n    reducelr = tensorflow.keras.callbacks.ReduceLROnPlateau(\n        monitor= metric,\n        mode='max',\n        factor=0.1,\n        patience=3,\n        verbose=0\n    )\n\n    earlystop = tensorflow.keras.callbacks.EarlyStopping(\n        monitor= metric,\n        mode='max',\n        patience=10, \n        verbose=1\n    )\n    \n    callbacks = [checkpoint, reducelr, earlystop]         \n    \n    return callbacks","fd4606c1":"EPOCHS= 3\nVERBOSE =1\n\ntensorflow.keras.backend.clear_session()\n\nwith tensorflow.device('\/device:GPU:0'):\n    \n    model = create_model()\n    model = compile_model(model, lr=0.0001)\n   \n    callbacks = create_callbacks()\n    \n    history = model.fit(\n                        train_ds,\n                        epochs=EPOCHS,\n                        callbacks=callbacks,\n                        validation_data = val_ds,\n                        verbose=VERBOSE\n                       )","d94f546a":"submission = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\nsubmission.head()","cd2e62a1":"test_datagen = ImageDataGenerator(\n    rescale = 1.\/255\n)\nINPUT_SIZE = (124,124,3)\ntest_generator =  test_datagen.flow_from_dataframe(\n    submission,\n    directory=\"..\/input\/plant-pathology-2021-fgvc8\/test_images\",\n    x_col='image',\n    y_col=None,\n    class_mode=None,\n    target_size=INPUT_SIZE[:2]\n)","984b66f5":"train_ds.class_indices.items()","27f4d560":"def get_key(val):\n    for key, value in train_ds.class_indices.items():\n        if val == value:\n            return key","c08d37bd":"preds = model.predict(test_generator)\nprint(preds)","ea773b8a":"def get_preds_to_labels(preds):\n    pred_lists = []\n    for pred in preds:\n        pred_list = []\n        health = (pred>=0.4)\n        \n        # get healthy\n        if health.sum()==0:\n            label = 'healthy'\n            pred_list.append(label)\n            \n        elif pred[2]>=0.5:\n            label = 'healthy'\n            pred_list.append(label)\n            \n        # get eles label\n        else:\n            for j, sub in enumerate(pred):\n                if sub>=0.28:\n                    label = get_key(j)\n                    pred_list.append(label)\n                               \n        pred_lists.append(' '.join(pred_list))\n    return pred_lists","53190235":"preds_list = get_preds_to_labels(preds)","d54d24bd":"submission['labels'] = preds_list\nsubmission.head()","7904f0a4":"submission.to_csv('submission.csv', index=False)","3ecac61a":"-----","d31c0191":"-------","96ec2328":"-----","b93cffa5":"## 1. IMPORT LIBRARIES","f4b760c2":"## 8. FIT THE MODEL","e840f0ed":"------","c35f9bb1":"## 9. SUBMISSION OF FILE","542fce7d":"## 6. COMPILE THE MODEL","599b1723":"## 5. CREATE THE RESNET MODEL","0b7b40c8":"-----","589c5c49":"-------------","9c0f59e2":"-----","b555cd36":"<center><span style=\"font-size:30px;\"><b>PLANT PATHOLOGY USING TRANSFER LEARNING (ResNet50)<\/span>","6821b6ad":"## 2. DATASET LOCATION","d13a3305":"## 3. VISUALIZATION","33ca180f":"## 4. DATA AUGMENTATION","f66eabfc":"<span style=\"font-size:28px;\">TABLE OF CONTENTS:\n    \n------------------------------------------------------------------------------------------------------    \n    \n* <span style=\"font-size:26px;\">Import Required Libraries\n* <span style=\"font-size:26px;\">Load the Images (Train_images), DataFrame (train.csv)\n* <span style=\"font-size:26px;\">Data Augumentation using ImageDataGenerator\n* <span style=\"font-size:26px;\">Create Model (ResNet50)\n* <span style=\"font-size:26px;\">Create Callbacks\n* <span style=\"font-size:26px;\">Fit the model\n* <span style=\"font-size:26px;\">Test the Model\n* <span style=\"font-size:26px;\">Make the Submission\n    ","0d8bb3e0":"## 7. CREATE CALLBACKS","6deb3fa8":"------"}}