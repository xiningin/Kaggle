{"cell_type":{"91c9420f":"code","8453d0a0":"code","0bb92995":"code","dc6baa16":"code","f267308e":"code","dd79d2e7":"code","4c8f2c64":"code","050a2f7f":"code","6130c5ee":"code","8c80fc46":"code","532cba31":"code","b293ea38":"code","7f37fe76":"code","240754e3":"code","2d8fb48c":"code","d6d10aea":"code","593a0045":"code","51e1dd4d":"code","2768cc35":"code","34167acb":"code","3bcc4263":"code","f751977e":"code","97a3047d":"code","7c7480b8":"code","2a8d1cd1":"markdown","5bdf61f0":"markdown","fe376d1e":"markdown","fab68d5b":"markdown","083c5f82":"markdown","79541ade":"markdown","39645f3a":"markdown","ac5f9709":"markdown","e412b7f2":"markdown","8299aa17":"markdown"},"source":{"91c9420f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8453d0a0":"import re # regular expression libary.\nimport nltk # Natural Language toolkit\nnltk.download(\"stopwords\")  #downloading stopwords\nnltk.download('punkt')\nfrom nltk import word_tokenize,sent_tokenize\nnltk.download('wordnet')\nimport nltk as nlp","0bb92995":"from colorama import Fore, Style\n\nnRowsRead = 1000 # specify 'None' if want to read whole file\n# ham_lyrics.csv has 3634 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('..\/input\/hamilton-lyrics\/ham_lyrics.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'ham_lyrics.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()\nprint(Fore.MAGENTA + 'Data shape: ',Style.RESET_ALL,df.shape)\ndf","dc6baa16":"df.isnull().sum()","f267308e":"ham_list=[]\n\nfor ham in df.lines:\n    ham=re.sub(\"[^a-zA-z]\",\" \",ham) # if expression in the sentence is not a word then this code change them to space\n    ham=ham.lower() # turns all word in the sentence into lowercase.\n    ham=nltk.word_tokenize(ham) # splits the words that are in the sentence from each other.\n    lemma=nlp.WordNetLemmatizer()\n    ham=[lemma.lemmatize(word) for word in ham] # this code finds the root of the word for a word in the sentence and change them to their root form.\n    ham=\" \".join(ham)\n    ham_list.append(ham) # store sentences in list","dd79d2e7":"from sklearn.feature_extraction.text import CountVectorizer #Bag of Words\n\nmax_features=500 # \"number\" most common(used) words in ham\n\ncount_vectorizer=CountVectorizer(max_features=max_features,stop_words=\"english\") # stop words will be dropped by stopwords command\n\nsparce_matrix=count_vectorizer.fit_transform(ham_list).toarray()# this code will create matrix that consist of 0 and 1.","4c8f2c64":"sparce_matrix.shape ","050a2f7f":"sparce_matrix","6130c5ee":"print(\"Top {} the most used word in Hamilton Lyrics: {}\".format(max_features,count_vectorizer.get_feature_names()))","8c80fc46":"data=pd.DataFrame(count_vectorizer.get_feature_names(),columns=[\"Words\"])","532cba31":"data.head()","b293ea38":"from wordcloud import WordCloud \nimport matplotlib.pyplot as plt\nplt.subplots(figsize=(12,12))\nwordcloud=WordCloud(background_color=\"white\",width=1024,height=768).generate(\" \".join(data.Words[100:]))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","7f37fe76":"df.speaker.value_counts()","240754e3":"X=sparce_matrix\ny=df.speaker","2d8fb48c":"from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report,log_loss,precision_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import roc_auc_score,roc_curve\n\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nprint(\"x_train\",X_train.shape)\nprint(\"x_test\",X_test.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","d6d10aea":"from sklearn.svm import SVC\n\nlgbm_model=LGBMClassifier()\n\nlgbm_model.fit(X_train,y_train)","593a0045":"y_pred=lgbm_model.predict(X_test)","51e1dd4d":"print(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","2768cc35":"xgb=XGBClassifier()\nxgb_model=xgb.fit(X_train,y_train)","34167acb":"y_pred=xgb_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","3bcc4263":"from sklearn.naive_bayes import BernoulliNB\n\nnb=GaussianNB()\nnb2=BernoulliNB()\n\nnb_model=nb.fit(X_train,y_train)\nnb2_model=nb2.fit(X_train,y_train)\ny_pred=nb_model.predict(X_test)\ny_pred2=nb2_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))\nprint(\"**************************************************************\")\nprint(\"Accuracy_NB2:\",accuracy_score(y_test, y_pred2))\nprint(\"Precision_NB2:\",precision_score(y_test, y_pred2,average=\"micro\"))","f751977e":"from sklearn.ensemble import RandomForestClassifier\n\n\nrf_model=RandomForestClassifier(random_state=42)\nrf_model.fit(X_train,y_train)","97a3047d":"y_pred=rf_model.predict(X_test)\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","7c7480b8":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge, Grace Hopper quote' )","2a8d1cd1":"#Bag of Words","5bdf61f0":"#XGBM classifier","fe376d1e":"#Codes by Erdal Nayir https:\/\/www.kaggle.com\/erdal002\/natural-language-processing\/comments","fab68d5b":"#RandomForest Classifier","083c5f82":"#LightGBM Classifier","79541ade":"#Hamilton: An American Musical \n\nHamilton is a sung-and-rapped-through musical by Lin-Manuel Miranda. It tells the story of American Founding Father Alexander Hamilton.\n\nMiranda said he was inspired to write the musical after reading the 2004 biography Alexander Hamilton by Ron Chernow. The show draws heavily from hip hop, as well as R&B, pop, soul, and traditional-style show tunes; and casts non-white actors as the Founding Fathers and other historical figures. Miranda described Hamilton as about \"America then, as told by America now\". https:\/\/en.wikipedia.org\/wiki\/Hamilton_(musical)","39645f3a":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT2X_MMJ0VnlzU1xQvBMYEzSzxZENQ8-9sD6g&usqp=CAU)genius.com","ac5f9709":"#Data Preproccesing,cleaning.","e412b7f2":"Top 2000 the most used word and 1000 sentences that are in review.\n\nAs you see columns of the matrix consist of the most common words and rows of the matrix consist of sentences","8299aa17":"#Naive Bayes"}}