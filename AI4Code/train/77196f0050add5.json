{"cell_type":{"a92337a6":"code","92b36f4d":"code","f548c308":"code","21b2e119":"code","6783db32":"code","197cad95":"code","98d82397":"code","56ecb248":"code","f2f52833":"code","ff91d7b9":"code","12f40aac":"code","fa7278a2":"code","3152d6fa":"markdown","6491c315":"markdown","e98d9790":"markdown","24950442":"markdown","09da2c8c":"markdown","ade5f827":"markdown"},"source":{"a92337a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92b36f4d":"df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\ndf","f548c308":"print(\"Reverse column order\")\ndf.loc[:, ::-1]","21b2e119":"print(\"Reverse row order\")\ndf.loc[::-1]\n","6783db32":"print(\"Reverse row order and reset index\")\ndf.loc[::-1].reset_index(drop = True)","197cad95":"print(\"Add prefix\")\ndf.add_prefix(\"A_\")\n","98d82397":"print(\"Add suffix\")\ndf.add_suffix(\"_Z\")","56ecb248":"df","f2f52833":"df[\"App\"] == df[\"Category\"]\ndf[\"App\"].equals(df[\"Category\"])\n\n\ndf1 = df.copy(deep = True)\ndf.equals(df1)\n\n\ndf == df1","ff91d7b9":"df2 = pd.read_csv('\/kaggle\/input\/ipl-data-set\/matches.csv')\ndf2","12f40aac":"df2.info(memory_usage = \"deep\")\ndf.memory_usage(deep = True)","fa7278a2":"import pandas_profiling\ndf2.profile_report()","3152d6fa":"# 1.Reversing the Row and column order.","6491c315":"1. Reversing the Row and column order\n2. Adding Prefix and Suffix\n3. Check the equality of the columns\n4. Check the memory usage of each columns\n5. Exporting a dataset with profilling","e98d9790":"#  2.Adding Prefix and suffix","24950442":"# 5. Exporting a dataset with profilling","09da2c8c":"## 4. Checking the memory usage of each columns","ade5f827":"# 3. Check the equality of the columns"}}