{"cell_type":{"e53d4938":"code","feb486f1":"code","9effff93":"code","62d26774":"code","dd49290a":"code","a7b2f795":"code","a6f3edf1":"code","da194f65":"code","248d04d5":"code","70e7fd5f":"code","7e7d7261":"code","ffc46135":"code","b074495b":"code","d90361b9":"code","6b718075":"code","f22a9f3f":"code","e25f0c53":"code","1fe52b5e":"code","3716124d":"code","6b44e520":"code","474f0990":"code","85dbc945":"code","91a489a7":"code","5f9cfa4c":"code","7fccc348":"code","2abd8b55":"code","e5219276":"code","1327a6fc":"code","df5b36e9":"markdown","753789bd":"markdown","62681fbb":"markdown","49b7419e":"markdown","809da0b3":"markdown","fce1f8ca":"markdown","d7cea75e":"markdown","0eb894be":"markdown","96c9fe67":"markdown","3cebbbf7":"markdown","85de512e":"markdown","12c292cc":"markdown","8f2439f1":"markdown","a0d0a386":"markdown","0838f01a":"markdown","2ea404f2":"markdown","660611c9":"markdown","003dae28":"markdown","a752b9cf":"markdown","73ddeb4f":"markdown","ae171b9e":"markdown","17ad5391":"markdown","64e7ae6d":"markdown","ac883ef3":"markdown"},"source":{"e53d4938":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","feb486f1":"from matplotlib import pyplot as plt","9effff93":"from statsmodels.tsa.stattools import adfuller, kpss\n\ndef adf_test(timeseries, significance=0.05):\n    print(\"Results of Dickey-Fuller Test:\")\n    dftest = adfuller(timeseries, autolag=\"AIC\", regression='ctt')\n    dfoutput = pd.Series(\n        dftest[0:4],\n        index=[\n            \"Test Statistic\",\n            \"p-value\",\n            \"#Lags Used\",\n            \"Number of Observations Used\",\n        ],\n    )\n    for key, value in dftest[4].items():\n        dfoutput[\"Critical Value (%s)\" % key] = value\n\n    print(dfoutput)\n    if dfoutput['p-value']<significance:\n        print(f'At {significance} significance level, the time series is trend-stationary')\n    else:\n        print(f'At {significance} significance level, the time series is not trend-stationary')\n    print()\n        \n\ndef kpss_test(timeseries,significance=0.05):\n    print(\"Results of KPSS Test:\")\n    kpsstest = kpss(timeseries, regression=\"ct\", nlags=\"auto\")\n    kpss_output = pd.Series(\n        kpsstest[0:3], index=[\"Test Statistic\", \"p-value\", \"Lags Used\"]\n    )\n    for key, value in kpsstest[3].items():\n        kpss_output[\"Critical Value (%s)\" % key] = value\n\n    print(kpss_output)\n    if kpss_output['p-value']<significance:\n        print(f'At {significance} significance level, the time series is not trend-stationary')\n    else:\n        print(f'At {significance} significance level, the time series is trend-stationary')\n    print() \n    \ndef test_for_stationarity(timeseries,significance=0.05):\n    adf_test(timeseries,significance=significance)\n    kpss_test(timeseries,significance=significance)","62d26774":"def get_df(df,country,store,product):\n    return df[(df['country']==country) & (df['store']==store) & (df['product']==product)].copy()","dd49290a":"train_data=pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv',parse_dates=['date'])\ntest_data=pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv',parse_dates=['date'])","a7b2f795":"country,store,product = 'Finland','KaggleMart','Kaggle Mug'","a6f3edf1":"df = get_df(train_data,country,store,product)\ndf_test = get_df(test_data,country,store,product)","da194f65":"from statsmodels.tsa.seasonal import STL\n\nresult = STL(np.log(df.num_sold), period= 365, seasonal=183).fit()\nfig = plt.figure(figsize=(30, 6))\nfig.add_subplot(311)\nplt.plot(np.exp(result.trend))\nplt.title('trend')\nfig.add_subplot(312)\nplt.plot(np.exp(result.seasonal))\nplt.title('seasonal')\nfig.add_subplot(313)\nplt.plot(np.exp(result.resid))\nplt.title('residual')\nplt.show()","248d04d5":"df['year'] = df.date.apply(lambda x:x.year)\ndf['month'] = df.date.apply(lambda x:x.month)\ndf['quarter'] = df.date.apply(lambda x: (x.month-1)\/\/3+1)","70e7fd5f":"df","7e7d7261":"quarterly_sales = np.zeros((4,4))\nfor year in range(2015,2019):\n    for quarter in range(1,5):\n        quarterly_sales[year-2015,quarter-1] = df[(df.year==year)&(df.quarter==quarter)]['num_sold'].sum()\n\nquarterly_sales = quarterly_sales\/np.sum(quarterly_sales,axis=1,keepdims=True)","ffc46135":"monthly_sales = []\nfor year in range(2015,2019):\n    for month in range(1,13):\n        monthly_sales.append([year,month,df[(df.year==year)&(df.month==month)]['num_sold'].sum()])\n        \nmonthly_sales_df = pd.DataFrame(monthly_sales,columns=['year','month','monthly_sales'])","b074495b":"df = df.join(monthly_sales_df.set_index(['year','month']),on=['year','month'])","d90361b9":"df['num_sold_resid'] = df['num_sold']\/df['monthly_sales']*30\ndf","6b718075":"test_for_stationarity(df['num_sold_resid'])","f22a9f3f":"fig = plt.figure(figsize=(30, 3))\nplt.plot(df.date,df.num_sold_resid)\nplt.title('num_sold_resid')\nplt.show()","e25f0c53":"fig = plt.figure(figsize=(30, 3))\nplt.plot(df.date,df.monthly_sales)\nplt.title('monthly_sales')\nplt.show()","1fe52b5e":"from sklearn.linear_model import LinearRegression\n\ndf_gdp = pd.read_csv('..\/input\/gdp-fin-nor-swe-20152019-multiple-sources\/GDP_FIN_NOR_SWE_2015-2019_Multiple_Sources.csv')\ngdp_annual = df_gdp[(df_gdp['Measure']=='Current prices, current exchange rates')&(df_gdp['Data Source']=='World Bank')&\n                   (df_gdp['Country']==country)].copy()\nannual_sales=df.groupby('year')['num_sold'].sum()\n\ndef project_sales(gdp,annual_sales,plot=True):\n    x=gdp['Value'].to_numpy()[:-1].reshape((-1,1))\n    y=annual_sales.to_numpy()\n    linreg = LinearRegression().fit(x,y)\n    x_test=[[gdp['Value'].iloc[-1]]]\n    y_test = linreg.predict(x_test)[0]\n    y_pred = linreg.predict(x)\n    residues = y_pred-y\n    mu = np.mean(residues)\n    sigma = np.std(residues)\n    if plot:\n        plt.plot(x,y,'x')\n        plt.errorbar(x_test,[y_test],fmt='o',capsize=3,yerr=sigma)\n        plot_xrange = np.linspace(min(x.flatten()),max(x.flatten()),100)\n        plt.plot(plot_xrange,linreg.predict(plot_xrange.reshape((-1,1))))\n        plt.legend(['GDP\/annual sales data', 'Fitted line','Projected 2019 annual sales'], loc='upper left')\n    return y_test, sigma\n\nannual_sales_2019,_ = project_sales(gdp_annual,annual_sales)","3716124d":"gdp_quarterly_df = pd.read_csv('..\/input\/gdp-fin-nor-swe-20152019-quarterly-imf\/GDP_FIN_NOR_SWE_2015-2019_Quarterly_IMF.csv')\ngdp_quarterly = gdp_quarterly_df[gdp_quarterly_df.Country==country][['Q1','Q2','Q3','Q4']].to_numpy().astype(np.float)\ngdp_quarterly = gdp_quarterly\/np.sum(gdp_quarterly,axis=1,keepdims=True)\ngdp_quarterly","6b44e520":"def obj_fn_q(x,gdp_quarterly,quarterly_sales):\n    alpha = np.array([1,x[0],x[1],x[2]]).reshape((1,4))\n    y=alpha*gdp_quarterly\n    y=y\/np.sum(y,axis=1,keepdims=True)\n    return np.abs(y-quarterly_sales).mean()","474f0990":"from scipy.optimize import minimize\nresult = minimize(lambda x: obj_fn_q(x,gdp_quarterly[:-1,:],quarterly_sales), (1,1,1), bounds=[(0,None)]*3)\nx1,x2,x3 = result.x\nquarterly_sales_2019 = np.array([1,x1,x2,x3])*gdp_quarterly[-1,:]\nquarterly_sales_2019 = quarterly_sales_2019\/np.sum(quarterly_sales_2019)\nquarterly_sales_2019 # This is just the breakdown, not the actual sales","85dbc945":"from numba import njit\n\n@njit(fastmath=True)\ndef obj_fn_m(w,data,sales_est):\n    sales_m = (data@w).reshape((-1,))\n    sales_q = np.array([sales_m[:3].sum(),sales_m[3:6].sum(),sales_m[6:9].sum(),sales_m[9:].sum()])\n    return np.power(sales_q-sales_est,2).sum()","91a489a7":"data=monthly_sales_df['monthly_sales'].to_numpy().reshape((-1,12)).T\ndata=data\/data.sum(axis=0,keepdims=True)","5f9cfa4c":"from scipy.optimize import minimize, LinearConstraint\n\nresult = minimize(lambda w: obj_fn_m(w,data,quarterly_sales_2019),(0.25,0.25,0.25,0.25),bounds=[(0,1)]*4,\n                  constraints=LinearConstraint(np.ones((1,4)), 1, 1),method='trust-constr')\n\nassert result.success\nw=result.x\nw","7fccc348":"monthly_sales_2019 = (data@w).reshape((-1,))*annual_sales_2019\nmonthly_sales_2019","2abd8b55":"from matplotlib import pyplot as plt\nfrom matplotlib.ticker import FormatStrFormatter\n\nfig = plt.figure(figsize=(8, 8))\nplt.bar(np.arange(4),quarterly_sales_2019,width=0.25)\nplt.bar(np.arange(4)+0.25,monthly_sales_2019.reshape((-1,3)).sum(axis=1)\/annual_sales_2019,width=0.25)\nplt.xticks(np.arange(4)+0.25,['Q1','Q2','Q3','Q4'])\nplt.legend(['Target (from GDP)','Matching'])\nplt.title('2019 Quarterly Sales Distributions')\nplt.gca().set_yscale('log',base=0.1,subs=range(2,10))\nplt.tick_params(axis='y', which='minor')\nplt.gca().yaxis.set_minor_formatter(FormatStrFormatter(\"%.2f\"))\nplt.show()","e5219276":"df_test['monthly_sales'] = test_data.date.apply(lambda x: monthly_sales_2019[x.month-1])\ndf_test","1327a6fc":"fig = plt.figure(figsize=(30, 3))\nplt.plot(df.date,df.monthly_sales,'b-')\nplt.plot([df.date.iloc[-1]]+list(df_test.date),[df.monthly_sales.iloc[-1]]+list(df_test.monthly_sales),'g-')\nplt.title('monthly_sales (aggregated (2015-2018) and estimated (2019))')\nplt.show()","df5b36e9":"The annual GDP data is highly (linearly) correlated with the annual sales data, so we just use linear regression fit and interpolate (since 2019 GDP actually drops).","753789bd":"We begin by adding some helper columns.","62681fbb":"# Detrending the training data by monthly sales","49b7419e":"### Estimating monthly sales breakdown","809da0b3":"# Feature engineering for the test data","fce1f8ca":"I claim that `num_sold_resid` is already detrend. Let's use statistical tests to ascertain that.","d7cea75e":"Now we have the quarterly sales breakdown, but we need the monthly sales breakdown. On the other hand, we have 4 years of monthly sales examples from 2015 to 2018. We don't want to make up monthly sales patterns, but we are comfortable with convex combinations of them. In other words, a candidate monthly sales breakdown for 2019 is\n$$\ns = w_1\\cdot s_{2015}+w_2\\cdot s_{2016}+w_3\\cdot s_{2017}+w_4\\cdot s_{2018}\n$$\nwhere \\\\(w_1\\\\), \\\\(w_2\\\\), \\\\(w_3\\\\), \\\\(w_4\\\\) are parameters such that \\\\(w_1+w_2+w_3+w_4=1\\\\). Note that this modeling is more general than the commonly used exponential smoothing that has only one parameter (\\\\(\\alpha\\\\)).\n\nWith the monthly breakdown \\\\(s\\\\) we can derive the corresponding quarterly breakdown \\\\(s_q\\\\) by combining every 3 months. We require \\\\(s_q\\\\) to match the quarterly sales breakdown from step 2 as much as possible, in the \\\\(\\ell^1\\\\) sense. Needless to say, the parameters \\\\(w_1\\\\), \\\\(w_2\\\\), \\\\(w_3\\\\), \\\\(w_4\\\\) are determined by constrained optimization.","0eb894be":"### Estimating quarterly sales breakdown","96c9fe67":"The quarterly GDP data does not correlate so well with the quarterly sales so we cannot estimate the quarterly sales using linear regression as was done with the annual data. However, the quarterly sales breakdown (proportions of the annual GDP) can be predicted from the quarterly GDP data. For more details, please see [my other notebook](https:\/\/www.kaggle.com\/siukeitin\/tps012022-getting-quarterly-gdp-in-usd). In short, it involves determining the parameters for a projective transformation that maps quarterly GDP breakdown to quarterly sales breakdown.","3cebbbf7":"The p-value for the Dickey-Fuller test is actually very small (much smaller than the 0.05 threshold). Let's visualize what's left after removing the monthly sales.","85de512e":"The result of the optimization says that we should combine mostly the monthly sales breakdown from 2018 and 2015.","12c292cc":"Now add feature `monthly_sales` to the test data!","8f2439f1":"### Combining step1 and step 3","a0d0a386":"So that was easy, detrending the training data. But we added a feature `monthly_sales` to the training data. We could remove that feature when we train on `num_sold_resid`, but we still need the feature for the test data because we need to combine the predictions from our regressor model with the monthly sales for the  test data to produce our final predictions. To produce `monthly_sales` column for the test data, we'll follow the following steps.\n\n1. Estimate the annual sales for 2019 from the annual GDP data\n2. Estimate the quarterly sales breakdown for 2019 from the quarterly GDP data\n3. Estimate the monthly sales breakdown for 2019 from the quarterly sales breakdown from step 2 and past history (2015 - 2018) of monthly sales breakdown\n4. Combine results from step 1 and step 3 to produce the monthly sales estimate in units sold","0838f01a":"Now compute the quarterly sales (to be used later) and the monthly sales.","2ea404f2":"Now simply remove the monthly sales from `num_sold`.","660611c9":"# Motivation for doing the detrending from scratch\n\nBut perhaps I should explain the reason for this detrending effort, when there are existing tools out there to perform detrending. Typically, it is taught that a time series can be decomposed into a trend component, a seasonal component and a residual component. To demonstrate that such approach may not be desirable for the current dataset, let's try the well-known [STL decomposition](http:\/\/bit.ly\/stl1990). We will use the implementation from [statsmodels](https:\/\/www.statsmodels.org). Since we would like to decompose the time series multiplicatively, we take logarithm before passing in the data.","003dae28":"# Conclusions\n\nThis concludes the effort to detrend the time series. The estimated monthly sales for 2019 need to be tested. A regressor model needs to be trained on `num_sold_resid`, its predictions combined with `monthly_sales` to produce predictions for `num_sold`. That would be the ultimate test. It would be my next task. If you are trying a similar approach, feel free to leave a comment.","a752b9cf":"OK, looks pretty trendless. And what does the trend that we just removed look like?","73ddeb4f":"# Introduction\n\nIn this notebook, I will continue the effort started in [Detrending Case Study I](https:\/\/www.kaggle.com\/siukeitin\/tps012022-detrending-case-study-i), in which I model a long term trend (over the years) using a spline. One of the reasons for using a spline is so that I can extrapolate the trend to 2019. Of course, extrapolation with splines is risky, as a purely mathematical construct need not predict \"reality\", even if that \"reality\" is fabricated. Since then, many contestants use external GDP data to model a more plausible 2019 annual trend. I also think that that's more reliable than purely mathematical spline extrapolation.\n\nIn the following, I'll describe a different approach to detrending that is more data-driven. Finding the trend and removing it from the training data turns out to be relatively trivial. The problem is how to estimate the trend for the test data. We will describe an attempt using external annual and quarterly GDP data.","ae171b9e":"### Estimating the annual sales for 2019","17ad5391":"This trend is piecewise constant which may not look like the kind of smooth trends shown in textbooks, but we can be sure that no high frequency information has been  removed from the time series. For example, a spike due to a holiday is still in the data, to be learned by our regressor model.","64e7ae6d":"Let's visualize how well `monthly_sales_2019` matches `quarterly_sales_2019` when combining the months in each quarter.","ac883ef3":"While the trend component looks reasonably smooth, the seasonal component seems to include a lot of high frequencies and looks much less smooth than the [textbook example](https:\/\/www.statsmodels.org\/dev\/examples\/notebooks\/generated\/stl_decomposition.html) for the \\\\(\\mbox{CO}_2\\\\) data. One big concern is that removing these high frequencies from the residual component might actually cause damage to the data when we eventually apply machine learning to the residual series. Another big question is, if we add the trend and seasonal component as features to the training data, how do we do that for the test data? There is no obvious way to do that. Training on the residual component would be pointless if we don't have the trend and seasonal component for the test data."}}