{"cell_type":{"1e1f8a8f":"code","f77c016d":"code","8d60a901":"code","d7cda1ef":"code","db559617":"code","8e16bafb":"code","474951b5":"code","54e7df65":"code","4d441e1b":"code","d3f61766":"code","1aec8700":"code","e471d07b":"code","c32052d3":"code","2dabc29a":"code","f3249717":"code","d3266f8f":"code","aede80a9":"code","7e41219a":"code","64c85a24":"code","7d6f40a5":"code","255a9039":"code","d4c12dc6":"code","fb16aa01":"code","1976fa49":"code","b98230bb":"code","b5b40595":"code","af52bed7":"code","f3961fa4":"code","4a58387f":"code","f8715c0b":"code","c45d9183":"code","088602e4":"code","e297e579":"code","14dde8ee":"code","9c68022a":"code","32411a2c":"code","83b5a766":"code","216c1143":"code","2530fa24":"code","cbb309c2":"code","96499ed4":"code","e374f84f":"markdown","b3afdcce":"markdown","762c31fe":"markdown","a590812c":"markdown","40801773":"markdown","8e090a21":"markdown","52b01389":"markdown","41db27b3":"markdown","14f74d68":"markdown","8e87a875":"markdown","fcfc8c89":"markdown"},"source":{"1e1f8a8f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nimport random\n\nimport cv2 as cv","f77c016d":"train_csv_path: str = \"..\/input\/digit-recognizer\/train.csv\"\n\ndata: pd.DataFrame = pd.read_csv(train_csv_path)","8d60a901":"data.info()","d7cda1ef":"data.head()","db559617":"X_train: np.ndarray = data.drop('label', axis=1).to_numpy()\ny_train: np.ndarray = data['label'].to_numpy()","8e16bafb":"# create sub plot for each digit\nfig, ax = plt.subplots(2,5, figsize=(7,4))\n# loop over each subplot to add its digit\nfor i, ax in enumerate(ax.flatten()):\n    # find index for image with the corresponding digit\n    img_idx: int = np.argwhere(y_train == i)[0]\n    # get the image and reshape to 28X28\n    img: np.ndarray = np.reshape(X_train[img_idx], (28, 28))\n    # plot digit image\n    ax.imshow(img, cmap=\"gray_r\")\n    # add digit label\n    ax.set_title(f\"Label: {i}\")\n    # remove gridlines\n    ax.grid(False)\n# add title to the plot\nfig.suptitle(\"MNIST Images Sample And Their Labels\")\n# adjust the padding between and around subplots\nfig.tight_layout()\n# show plot\nplt.show()","474951b5":"plt.figure(figsize = (10,8))\nA = np.array(data.iloc[286, 1:]) # 139\n\nB = np.reshape(A, (28, 28))\n\nplt.imshow(B, cmap='gray');","54e7df65":"plt.figure(figsize = (10,8))\n\nkernel = (3, 3)\nB = np.array(B)\nc = B.astype('uint8')\n\ndst = cv.GaussianBlur(c, kernel ,cv.BORDER_DEFAULT)\n\n\nplt.imshow(dst, cmap='gray');","4d441e1b":"from skimage.feature import hog\nfrom skimage import exposure\n\ndef imgHOG(img):\n  image = img\n\n  resized_img = np.resize(image, (28,28)) \n\n  #print(resized_img.shape)\n\n  fd, hog_image = hog(resized_img, orientations=8, pixels_per_cell=(8, 8),\n                      cells_per_block=(2, 2), visualize=True)\n\n  # Rescale histogram for better display\n  fd = exposure.rescale_intensity(fd, in_range=(0, 10))\n\n  return fd","d3f61766":"hogimg = imgHOG(dst)\nplt.hist(hogimg);","1aec8700":"def get_HOG(data):\n  newConvertedData = []\n\n  for row in range(data.shape[0]):\n    \n    A = np.array(data.iloc[row])\n\n    B = np.reshape(A, (28, 28))\n\n    kernel = (3, 3)\n\n    B = np.array(B)\n    c = B.astype('uint8')\n\n    hogimg = imgHOG(c)\n    \n    d = hogimg.flatten();\n\n    result = d.flatten()\n\n    newConvertedData.append(result)\n\n  return newConvertedData","e471d07b":"def apply_IMP_techniques(data):\n  newConvertedData = []\n\n  for row in range(data.shape[0]):\n    \n    A = np.array(data.iloc[row])\n\n    B = np.reshape(A, (28, 28))\n\n    kernel = (3, 3)\n\n    B = np.array(B)\n    c = B.astype('uint8')\n\n    dst = cv.GaussianBlur(c, kernel ,cv.BORDER_DEFAULT)\n\n    hogimg = imgHOG(dst)\n    \n    d = hogimg.flatten();\n\n    result = d.flatten()\n\n    newConvertedData.append(result)\n\n  return newConvertedData","c32052d3":"data = data.sample(frac=1)\n\nX = data.drop('label', axis = 1)\ny = data['label']\n\nX.shape, y.shape","2dabc29a":"newData = pd.DataFrame(get_HOG(X))","f3249717":"newData.head()","d3266f8f":"X_train_valid = newData.iloc[:32000]\ny_train_valid = y.iloc[:32000]\n\nX_test = newData.iloc[32000:]\ny_test = y.iloc[32000:]\n\nX_train_valid.shape, y_train_valid.shape, X_test.shape, y_test.shape","aede80a9":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train_valid, y_train_valid, test_size=0.2, random_state=42)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","7e41219a":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_1 = RandomForestClassifier()\n\nmodel_1.fit(X_train, y_train)","64c85a24":"model_1.score(X_valid, y_valid) * 100","7d6f40a5":"model_1.score(X_test, y_test) * 100","255a9039":"from sklearn.metrics import confusion_matrix\n\ncf_matrix = confusion_matrix(y_test, model_1.predict(X_test))\n\nplt.figure(figsize = (10,8))\nsns.heatmap(cf_matrix, annot=True, annot_kws={\"size\": 14}, fmt='g', cbar= False);","d4c12dc6":"newData2 = pd.DataFrame(apply_IMP_techniques(X))","fb16aa01":"newData2.head()","1976fa49":"X_train_valid = newData2.iloc[:32000]\ny_train_valid = y.iloc[:32000]\n\nX_test = newData2.iloc[32000:]\ny_test = y.iloc[32000:]\n\nX_train_valid.shape, y_train_valid.shape, X_test.shape, y_test.shape","b98230bb":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train_valid, y_train_valid, test_size=0.2, random_state=42)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","b5b40595":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_2 = RandomForestClassifier()\n\nmodel_2.fit(X_train, y_train)","af52bed7":"model_2.score(X_valid, y_valid) * 100","f3961fa4":"model_2.score(X_test, y_test) * 100","4a58387f":"from sklearn.metrics import confusion_matrix\n\ncf_matrix = confusion_matrix(y_test, model_2.predict(X_test))\n\nplt.figure(figsize = (10,8))\nsns.heatmap(cf_matrix, annot=True, annot_kws={\"size\": 14}, fmt='g', cbar= False);","f8715c0b":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\n\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt', 'log2']\n\n# Number of trees\nn_estimator=[50, 200, 300, 800, 1000]\n\n\ncre = ['gini', 'entropy']\n\n# Create the random grid\nrandom_grid = {'max_features': max_features,\n               'n_estimators': n_estimator,\n               'criterion':cre}\n\n\nmodel_3 = GridSearchCV(rf,\n                    param_grid=random_grid,\n                    cv=5,\n                    verbose=1,\n                    n_jobs=8)\n\nmodel_3.fit(X_train, y_train)","c45d9183":"model_3.best_params_","088602e4":"model_3.score(X_valid, y_valid) * 100","e297e579":"model_3.score(X_test, y_test) * 100","14dde8ee":"cf_matrix = confusion_matrix(y_test, model_3.predict(X_test))\n\nplt.figure(figsize = (10,8))\nsns.heatmap(cf_matrix, annot=True, annot_kws={\"size\": 14}, fmt='g', cbar= False);","9c68022a":"test_csv_path: str = \"..\/input\/digit-recognizer\/test.csv\"\n    \ntestData = pd.read_csv(test_csv_path)","32411a2c":"testData.info()","83b5a766":"testData.head()","216c1143":"testDataIMP = pd.DataFrame(apply_IMP_techniques(testData))","2530fa24":"testDataIMP.head()","cbb309c2":"y_pred = model_3.predict(testDataIMP)","96499ed4":"fig, axes = plt.subplots(4, 8, figsize=(15, 8),\n                         subplot_kw={'xticks':[], 'yticks':[]},\n                         gridspec_kw=dict(hspace=0.1, wspace=0.1))\n\nrandnums= np.random.randint(0 ,len(testData),32)\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(np.reshape(np.array(testData.iloc[randnums[i]]), (28, 28)), cmap='binary', interpolation='nearest')\n    ax.text(0.85, 0.85, str(y_pred[randnums[i]]),\n            transform=ax.transAxes,\n            fontsize=16,\n            color='green'\n           )","e374f84f":"# Quick Look at the Data\nLet\u2019s take a look at the top five rows:","b3afdcce":"# Split labels and pixels\nLet's create variables for the pixels and the labels we want to predict:","762c31fe":"# Gaussian + HOG `Model 2`","a590812c":"# Test Data 'Without labels'","40801773":"# HOG values `Model 1`","8e090a21":"## Mustafa Mohammed Kataa","52b01389":"# Plot a Single Sample for each Digit\nLet's plot a single sample of each digit as the original image:","41db27b3":"# Image processing techniques","14f74d68":"# The Dataset\nFor this notebook we will use the Digit Recognizer competition dataset.\n\nLet's define the path to the dataset:","8e87a875":"# Using Hyperparameter `Model 3`","fcfc8c89":"# Import Packages\nLets load all the needed packages for this notebook:"}}