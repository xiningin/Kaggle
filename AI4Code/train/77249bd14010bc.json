{"cell_type":{"17d5d116":"code","669ccf4e":"code","416597f0":"code","505fbe99":"code","ef8cfaad":"code","b9cd4d87":"code","aa7efcc1":"code","c2302374":"code","83670696":"code","52d0ceb1":"code","426312e7":"markdown","05521984":"markdown","1765d22d":"markdown"},"source":{"17d5d116":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom plotly.offline import iplot\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","669ccf4e":"df = pd.read_csv('..\/input\/\/elon-musk-twitter-sentiment-analysis\/musk.csv')\ndf.head().style.set_properties(**{'background-color':'purple',\n                                     'color': 'white'})","416597f0":"!pip install emot","505fbe99":"import emot","ef8cfaad":"text = ': Just surpassed 200k Powerwall installs globally \ud83d\udd0b\ud83c\udfe1\u2600\ufe0f'\n\nans = emot.emoji(text)\n\nans","b9cd4d87":"text1 = '_Archive \ud83e\udd23\ud83e\udd23'\n\nans = emot.emoji(text1)\n\nans","aa7efcc1":"text2 = 'Tesla has \ud83d\udc8e \ud83d\ude4c'\n\nans = emot.emoji(text2)\n\nans","c2302374":"text3 = 'For those bad at math \ud83d\udc46, 100X higher transaction volume with 100X lower fees means total fees ear...'\n\nans = emot.emoji(text3)\n\nans","83670696":"text4 = '_com \ud83c\udde9\ud83c\uddea \ud83d\ude98 \u2665\ufe0f Geil! \u2665\ufe0f \ud83d\ude98 \ud83c\udde9\ud83c\uddea'\n\nans = emot.emoji(text4)\n\nans","52d0ceb1":"text5 = 'Yup \ud83e\udd23\ud83e\udd23'\n\nans = emot.emoji(text5)\n\nans","426312e7":"#The majority of Mr. Musk emojis in this Dataset are the 2 \ud83e\udd23\ud83e\udd23. Means that he's often rolling_on_the_floor_laughing!","05521984":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #8B008B;\"><b style=\"color:white;\">EMOT Library<\/b><\/h1><\/center>\n\nDescription of the emot library\n\n\nEmot is a python library to extract the emojis and emoticons from a text(string). All the emojis and emoticons are taken from a reliable source i.e. Wikipedia.org.\n\nAuthors\n\nNeel Shah \/ @NeelShah18\n\nShubham Rohilla \/ @kakashubham\n\n@NeelShah18: https:\/\/github.com\/NeelShah18 @kakashubham: https:\/\/github.com\/kakashubham\n\nhttps:\/\/emot.readthedocs.io\/en\/latest\/","1765d22d":"#Right Mr. Musk? \ud83e\udd23\ud83e\udd23\n\n![](https:\/\/media.tenor.com\/images\/f6248600346417668f035b9c90915afb\/tenor.gif)tenor.com"}}