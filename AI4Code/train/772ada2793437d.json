{"cell_type":{"ac2c7730":"code","2a1934cc":"code","7314ed7c":"code","b1c995f7":"code","c3c1a83b":"code","012b59fd":"code","974d3d36":"code","4b62b48a":"code","8dba4cc4":"code","85564a5c":"code","2d2c64f5":"code","a71f9d06":"code","2c6d2cb0":"code","4701d6f4":"code","cb11117d":"code","18006818":"code","09b0c6c0":"markdown","38611ec4":"markdown","afc62fc8":"markdown","bad42705":"markdown","768844bf":"markdown","5e7db816":"markdown","438ce80a":"markdown","4daa8b0a":"markdown","ede30528":"markdown","ad844a27":"markdown","58c19b74":"markdown","4f041f39":"markdown","6c3e87a9":"markdown","faa6c4a6":"markdown","b7ee641c":"markdown","7d516987":"markdown","f800bf93":"markdown"},"source":{"ac2c7730":"import os\nimport glob\nimport numpy as np\nimport sklearn\n\nfrom PIL import Image,ImageOps\nimport matplotlib.pyplot as plt\n%matplotlib inline","2a1934cc":"base_dir = '..\/input\/intel-image-classification\/'\ndirectory = os.listdir(base_dir)\ndirectory","7314ed7c":"train_dir = base_dir + 'seg_train\/seg_train\/'\ntest_dir = base_dir + 'seg_test\/seg_test\/'","b1c995f7":"\nCLASSES = os.listdir(train_dir)\nCLASSES","c3c1a83b":"# TRAINING DIR: For each class, lets see how many images are there..\nfor imgType in CLASSES:\n    imgTypePath = train_dir + \"\/\" + imgType + \"\/\"\n    print(\"CLASS: \" + imgType + \", Total images: \" + str(len(os.listdir(imgTypePath)))) ","012b59fd":"# TESTING DIR: For each class, lets see how many images are there..\nfor imgType in CLASSES:\n    imgTypePath = test_dir + \"\/\" + imgType + \"\/\"\n    print(\"CLASS: \" + imgType + \", Total images: \" + str(len(os.listdir(imgTypePath))))","974d3d36":"def convert_to_grayscale(img):\n    #Convert to grayscale\n    return ImageOps.grayscale(img) #Return gray scale image object using ImageOps.\n\ndef reshape_img(img, target_size=(150,150)):\n    #Reshape any image to a fixed shape\n    return img.resize(target_size, Image.ANTIALIAS) \n\ndef display_numpy_img(np_img, img_name=\"Transformed image\"):\n    plt.figure(figsize = (6,6))\n    plt.imshow(np_img, cmap='gray')\n    plt.title(img_name)\n    \ndef transform_image(img_file_path):\n    img_obj = Image.open(img_file_path)\n    #print(img_obj.format)\n    #print(np.array(img_obj).shape)\n    #Perform transformations in series\n    img_obj = convert_to_grayscale(img_obj)\n    img_obj = reshape_img(img_obj, (150,150))\n    np_arr_img = np.array(img_obj)\n    return np_arr_img\n\ndef load_dir_to_numpy(dir_path, maxImgs=1500):\n    file_list = glob.glob(dir_path+'\/*')\n    imgs = []\n    #Load image by image\n    imgCount=0\n    for fname in file_list:\n        if imgCount>=maxImgs:\n            break\n        img_np = transform_image(fname)\n        imgs.append(img_np)\n        imgCount = imgCount + 1\n    np_imgs = np.array(imgs)\n    return np_imgs\n\ndef prepare_image_data(dir_path, MAX_IMGS):\n    imgs_arr_X = []\n    data_arr_y = []\n    classIdx = 0;\n    for imgType in CLASSES:\n        IMG_DIR = dir_path + \"\/\" + imgType + \"\/\"\n        #  print(\"IMG_DIR: \" + IMG_DIR)\n        imgs_arr = load_dir_to_numpy(IMG_DIR, MAX_IMGS)\n        #print(imgType + \": \" + str(imgs_arr.shape))\n        imgs_arr_X.extend(imgs_arr)\n        data_y = np.full((imgs_arr.shape[0],1), classIdx)\n        data_arr_y.extend(data_y)\n        classIdx += 1\n    np_img_arr_X = np.array(imgs_arr_X)\n    np_data_arr_y = np.array(data_arr_y)\n    return np_img_arr_X,np_data_arr_y","4b62b48a":"train_np_x,train_np_y = prepare_image_data(train_dir, 500)\nprint('train_np_x.shape:', train_np_x.shape)\nprint('train_np_y.shape:', train_np_y.shape)","8dba4cc4":"\ntrain_size = train_np_x.shape[0]\ntrain_np_x = train_np_x.reshape((train_size, -1))\nprint('After reshaping, train_np_x.shape:', train_np_x.shape)","85564a5c":"# Import a model\n'''\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression(normalize=True) \n'''\nfrom sklearn.linear_model import SGDClassifier\nmodel = SGDClassifier()","2d2c64f5":"model.fit(train_np_x, train_np_y.reshape(-1))","a71f9d06":"test_np_x,test_np_y = prepare_image_data(test_dir, 200)\n\ntest_size = test_np_x.shape[0]\ntest_np_x = test_np_x.reshape((test_size, -1))\nprint('Test shape:', test_np_x.shape)","2c6d2cb0":"# Get predicted values for 'test_np_x' using trained 'model' \npredicted_y = model.predict(test_np_x)","4701d6f4":"from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nactual_y = test_np_y.reshape(-1)\nprint('Accuracy Score:', accuracy_score(actual_y, predicted_y.round(), normalize=False))","cb11117d":"print(classification_report(actual_y, predicted_y))","18006818":"print(confusion_matrix(actual_y, predicted_y))","09b0c6c0":"# What's the trained model accuracy on test data?","38611ec4":"# Prepare training dataset","afc62fc8":"# Import libraries:","bad42705":"# Predict using testing data","768844bf":"# Confusion matrix","5e7db816":"# Certificate Project - 1 : [Intel image classification](https:\/\/www.kaggle.com\/puneet6060\/intel-image-classification)","438ce80a":"# Total no. of images per class in testing dataset","4daa8b0a":"# Model training performance report","ede30528":"# Prepare CLASSES array","ad844a27":"# Import & Prepare the model object","58c19b74":"# Total no. of images per class in training dataset","4f041f39":"# Prepare testing data","6c3e87a9":"# Pipeline helper functions","faa6c4a6":"# Flatten out the 2D image data into 1D vector","b7ee641c":"# Prepare training & testing directory paths","7d516987":"# List out directories","f800bf93":"# Train the model"}}