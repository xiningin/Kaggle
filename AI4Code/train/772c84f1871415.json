{"cell_type":{"b02dabd5":"code","62c996d6":"code","adf47205":"code","1c2cfe56":"code","f14c548b":"code","1d398704":"code","e2a64a86":"code","ac30ebd0":"code","9ca951b2":"code","325c23af":"code","8738d9c0":"code","c94252a9":"code","2324afe3":"code","5dbedf6e":"code","0810c449":"code","376010c9":"code","999d5600":"code","d73dae18":"code","b992ace6":"code","272c6a26":"code","85fa7292":"code","a199da4c":"code","22d6bdca":"code","e8a8c42f":"code","49d9862e":"code","edebefba":"code","1fe1b9ab":"code","3bc89a32":"code","374ff0cc":"markdown","b70fe9ba":"markdown","7250f4c7":"markdown","111f8fec":"markdown","049fa817":"markdown","3977a26e":"markdown","860136a2":"markdown","be10d950":"markdown","cfa5bca7":"markdown"},"source":{"b02dabd5":"import pandas as pd\nimport numpy as np\nimport seaborn as sb\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","62c996d6":"df = pd.read_csv('..\/input\/concrete\/concrete_data.csv')\ndf","adf47205":"# checking for null values\ndf.isnull().any()","1c2cfe56":"# checking vif\nvariables = df[['Cement','Blast Furnace Slag','Fly Ash','Water','Superplasticizer','Coarse Aggregate','Fine Aggregate','Age']]\nvif = pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif['Features'] = variables.columns\n\nvif","f14c548b":"# now, we'll drop columns which have vif>10\ndf = df.drop(['Cement','Water','Coarse Aggregate','Fine Aggregate'], axis=1)\ndf","1d398704":"# checking for outliners\nsb.boxplot(x=df['Blast Furnace Slag'])","e2a64a86":"# removing outliners\noutliers_removed = [x for x in df['Blast Furnace Slag'] if x >= 300 and x <= 400]\nfor i in df['Blast Furnace Slag']:\n    if i in set(outliers_removed):\n        df['Blast Furnace Slag'] = df['Blast Furnace Slag'].replace(i,df['Blast Furnace Slag'].mean())","ac30ebd0":"sb.boxplot(x=df['Blast Furnace Slag'])","9ca951b2":"sb.boxplot(x=df['Fly Ash'])","325c23af":"sb.boxplot(x=df['Superplasticizer'])","8738d9c0":"# removing outliners\noutliers_removed = [x for x in df['Superplasticizer'] if x >= 25 and x <= 40]\nfor i in df['Superplasticizer']:\n    if i in set(outliers_removed):\n        df['Superplasticizer'] = df['Superplasticizer'].replace(i,df['Superplasticizer'].mean())","c94252a9":"sb.boxplot(x=df['Superplasticizer'])","2324afe3":"sb.boxplot(x=df['Age'])","5dbedf6e":"# removing outliners\noutliers_removed = [x for x in df['Age'] if x >= 150 and x <= 400]\nfor i in df['Age']:\n    if i in set(outliers_removed):\n        df['Age'] = df['Age'].replace(i,df['Age'].mean())","0810c449":"sb.boxplot(x=df['Age'])","376010c9":"# removing new outliners\noutliers_removed = [x for x in df['Age'] if x >= 60 and x <= 150]\nfor i in df['Age']:\n    if i in set(outliers_removed):\n        df['Age'] = df['Age'].replace(i,df['Age'].mean())","999d5600":"sb.boxplot(x=df['Age'])","d73dae18":"# checking if standardization is required or not\ndf.describe()","b992ace6":"df['Blast Furnace Slag'].plot.hist(grid=True, bins=20, rwidth=0.9, color='#607c8e')\nplt.title('Blast Furnace Slag Distribution')\nplt.grid(axis='y', alpha=0.75)","272c6a26":"# the data seems to be left skewed; we'll have to check the value of skewness","85fa7292":"# checking extent of skewness\nprint('Blast Furnace Slag Skewness:', df['Blast Furnace Slag'].skew())\nprint('Fly Ash Skewness:', df['Fly Ash'].skew())\nprint('Superplasticizer Skewness:', df['Superplasticizer'].skew())\nprint('Age Skewness:', df['Age'].skew())","a199da4c":"# as the skewness in within range of acceptance, we do not need to do any transformations","22d6bdca":"# using Pearson's correlation method\ncorr = df.corr(method='pearson')\nsb.heatmap(corr, annot=True)","e8a8c42f":"data = df.values\nX,y = data[:,:-1], data[:,-1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)  # splitting in the ration 80:20","49d9862e":"model = LinearRegression()","edebefba":"model.fit(X_train, y_train)","1fe1b9ab":"y_pred = model.predict(X_test)","3bc89a32":"r2_score(y_test, y_pred)","374ff0cc":"### Splitting Data for Training and Testing","b70fe9ba":"### Importing Libraries","7250f4c7":"### Data Preprocessing","111f8fec":"### With simple Linear Regression, we have achieved 47% accuracy. On applying other algorithms, accuracy of around 80% can be achieved.","049fa817":"# CONCRETE STRENGTH PREDICTION","3977a26e":"### Model","860136a2":"### Getting our Data","be10d950":"### Making Predictions and Checking Accuracy","cfa5bca7":"### Data Visualization"}}