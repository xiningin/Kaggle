{"cell_type":{"8f83126a":"code","6a3ada08":"code","09594982":"code","e2992d15":"code","c0cc726f":"code","e8de83f5":"code","8be07b45":"code","dc886931":"code","78ab5b94":"code","5aeb8b41":"code","699d5007":"code","5f117cfa":"code","93930bb0":"code","3e84fe3f":"code","e950a72d":"code","69d3ea1f":"code","e37e5214":"code","01633ed0":"code","87bd0dfa":"code","9ca03e9d":"code","b0a12bc7":"code","bbb6ac5e":"code","becad73f":"code","7424956d":"code","d001a7d2":"code","4e5a1204":"code","51866f95":"markdown","e50827a7":"markdown","7ccf90b4":"markdown","fe8c60b5":"markdown","d136edbf":"markdown","7e87bcd6":"markdown","7f1df602":"markdown","900d679a":"markdown","3339671c":"markdown","6fe61ef6":"markdown"},"source":{"8f83126a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport xgboost as xgb\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom collections import defaultdict\n# Warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6a3ada08":"import cufflinks\nimport cufflinks as cf\n\nimport janestreet\nenv = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set\n\nsample_prediction_df = pd.read_csv('..\/input\/jane-street-market-prediction\/example_sample_submission.csv')\nfor (test_df, sample_prediction_df) in iter_test:\n    sample_prediction_df.action = 0 #make your 0\/1 prediction here\n    env.predict(sample_prediction_df)","09594982":"train  = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\nmeta_data = pd.read_csv('..\/input\/jane-street-market-prediction\/features.csv')\ntest = pd.read_csv('..\/input\/jane-street-market-prediction\/example_test.csv')\ntrain.head()","e2992d15":"# \u6570\u636e\u884c\u6570\/\u5217\u6570\u786e\u8ba4\nprint('train data shape is {}'.format(train.shape))\nprint('metadata features shape is {}'.format(meta_data.shape))\nprint('test data shape is {}'.format(test.shape))","c0cc726f":"train.ts_id.unique()","e8de83f5":"train.isnull().sum()","8be07b45":"# Features Plotting \nfig, axes = plt.subplots(nrows=44\n                         , ncols=3,figsize=(25,250))\nfor i, column in enumerate(train.iloc[:,7:].columns):\n    sns.distplot(train[column],ax=axes[i\/\/3,i%3])","dc886931":"# resp Plotting \nfig = plt.figure(figsize=(16,6))\nax = plt.subplot(1,1,1)\ntrain.groupby('date')[['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']].sum().cumsum().plot(ax=ax)\nplt.title('Cumulative Sum Return of resp\\'s',fontsize=18)\nplt.xlabel('Date',fontsize=14)\nplt.axvspan(0,150,linestyle=':',linewidth=2,label='first 150 days',color='yellow',alpha=.2)\nplt.legend(fontsize=12,ncol=2,loc=2);","78ab5b94":"# Weight Plotting \nplt.figure(figsize = (12,5))\nax = sns.distplot(train['weight'], \n             bins=1400, \n             kde_kws={\"clip\":(0.001,1.4)}, \n             hist_kws={\"range\":(0.001,1.4)},\n             color='darkcyan', \n             kde=False);\n\nvalues = np.array([rec.get_height() for rec in ax.patches])\nnorm = plt.Normalize(values.min(), values.max())\ncolors = plt.cm.jet(norm(values))\n\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\nplt.xlabel(\"Histogram of non-zero weights\", size=14)\nplt.show();\ndel values","5aeb8b41":"# Another weight trend \ntrain['resp_trend'] = train['resp'].cumsum()\ntrain['weight_trend'] = (train['weight'] * train['resp']).cumsum()\ntrain.plot(x='ts_id', y='weight_trend', figsize=(15,5))\nplt.xlabel('Trade', size=18)\nplt.title('Cumulative return of resp and weight trend', size=18)\nplt.legend(loc=2)\nplt.show()","699d5007":"f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={\n    'height_ratios': (.15, .85)})\nsns.boxplot(train['weight'], ax=ax_box)\nsns.distplot(train['weight'], ax=ax_hist)\n\ny = sns.JointGrid(data=train, x='weight', y='resp')\ny.plot_joint(sns.scatterplot, s=100, alpha=.5)\ny.plot_marginals(sns.distplot, kde=True, color='green')","5f117cfa":"sample_df = train.query('date == 1')\nsample_df.describe()","93930bb0":"nan_val = train.isna().sum()[train.isna().sum() > 0].sort_values(ascending=False)\nfig, axs = plt.subplots(figsize=(10,10))\nsns.barplot(y = nan_val.index[0:62], \n            x = nan_val.values[0:62], \n            alpha = 0.8)\nplt.title('Missing Values of Train Dataset')\nplt.xlabel('# of NA')\nplt.show()","3e84fe3f":"sample_df = sample_df.apply(lambda x: x.fillna(x.mean()), axis=0)\nprint('After replacing, number of features with null values: ', sample_df.isna().sum().sum())","e950a72d":"sample_df.iloc[:, 7:-2].hist(bins=100, figsize=(30,74), layout=(35,4));","69d3ea1f":"sns.scatterplot(data=sample_df, x='resp', y='weight', color='green', alpha=.3)\nplt.title('resp vs weight \\ncorrelation={}'.format(round(sample_df.weight.corr(sample_df.resp), 3))); ","e37e5214":"sns.scatterplot(data=train, x='resp', y='weight', alpha=.3)\nplt.title('resp vs weight \\ncorrelation={}'.format(round(train.weight.corr(train.resp), 3))); ","01633ed0":"sns.pairplot(sample_df[['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']], corner=True)","87bd0dfa":"import gc \nfeatstr = [i for i in train.columns[7:-2]]\nfig = plt.figure(figsize=(20,80))\nfig.suptitle('Features Box plot with 0.1% 99.9% whiskers',fontsize=22, y=.89)\ngrid =  gridspec.GridSpec(29,4,figure=fig,hspace=.5,wspace=.05)\ncounter = 0\nfor i in range(29):\n    for j in range(4):\n        subf = fig.add_subplot(grid[i, j]);\n        sns.boxplot(x= sample_df[featstr[counter]],saturation=.5,color= 'blue', ax= subf,width=.5,whis=(.1,99.9));\n        subf.set_xlabel('')\n        subf.set_title('{}'.format(featstr[counter]),fontsize=16)\n        counter += 1\n        gc.collect();","9ca03e9d":"from scipy import stats \ndef r2(x, y):\n    return stats.pearsonr(x, y)[0] ** 2\n\nratio=4\nf = plt.figure(figsize=(25,60))\nouter_grid = gridspec.GridSpec(7, 3, wspace=0.3, hspace=0.3)\n\nclass myjoint(sns.JointGrid):\n    def __init__(self, x, y, data=None,height=7, ratio=5, space=.2,\n                 dropna=True, xlim=None, ylim=None, size=None):\n        super(myjoint, self).__init__(x, y, data,height, ratio, space,\n                 dropna, xlim, ylim, size)\n        plt.close(2)\n        # Set up the subplot grid\n        self.ax_joint = f.add_subplot(gs[1:, :-1])\n        self.ax_marg_x = f.add_subplot(gs[0, :-1], sharex=self.ax_joint)\n        self.ax_marg_y = f.add_subplot(gs[1:, -1], sharey=self.ax_joint)\n\n        # Turn off tick visibility for the measure axis on the marginal plots\n        plt.setp(self.ax_marg_x.get_xticklabels(), visible=False)\n        plt.setp(self.ax_marg_y.get_yticklabels(), visible=False)\nfor i, column in enumerate(['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp']):\n    gs = gridspec.GridSpecFromSubplotSpec(ratio+1, ratio+1,\n            subplot_spec=outer_grid[i], wspace=0.3, hspace=0.3)\n    g = myjoint(y=\"weight\", x=column, data=train, ratio=ratio)\n    g = g.plot(sns.regplot, sns.distplot)\n    r2_score = r2(x=train[column],y=train[\"weight\"])\n    plt.xlabel(f\"{column} R2 score:{round(r2_score,4)}\")","b0a12bc7":"corr = sample_df.iloc[:,2:7].corr()\nf, ax = plt.subplots(figsize=(15,10))\nsns.heatmap(corr, cmap='BrBG', center=0, vmin=1, vmax=1, annot=True, square=True, linewidths=.5, cbar_kws={\n    'shrink': .5\n})","bbb6ac5e":"conditions = [\n    (sample_df['weight'] <= 40), \n    (sample_df['weight'] > 40) & (sample_df['weight'] <= 80), \n    (sample_df['weight'] > 80)\n]\nvalues = ['tier1', 'tier2', 'tier3']\nsample_df['weight_tier'] = np.select(conditions, values)\ncategories = defaultdict(list)\nfor columns in meta_data.columns[1:]: \n    categories[f'{columns}'].append(meta_data.query(f'{columns} == True')['feature'].to_list())\ntag_0 = sample_df[[*categories['tag_0'][0]]]","becad73f":"fig, axes = plt.subplots(nrows=6, ncols=3,figsize=(25,50))\nfor i, column in enumerate(tag_0.columns):\n    sns.distplot(tag_0[column],ax=axes[i\/\/3,i%3],color='Green')","7424956d":"f, ax = plt.subplots(figsize=(45, 20))\nsns.heatmap(tag_0.corr(), cmap='BrBG', center=0, vmin=-1, vmax=1, annot=True, \n           square=True, linewidths=.5, cbar_kws={'shrink': .5})","d001a7d2":"ratio = 4 \nf = plt.figure(figsize=(25, 60))\nouter_grid = gridspec.GridSpec(6, 3, wspace=.3, hspace=.3)\nfor i, column in enumerate(tag_0.columns): \n    gs = gridspec.GridSpecFromSubplotSpec(ratio+1, ratio+1, \n                                         subplot_spec=outer_grid[i], wspace=.3, hspace=.3)\n    g = myjoint(y='resp', x=column, data=sample_df, ratio=ratio)\n    g = g.plot(sns.regplot, sns.distplot)\n    r2_score = r2(x=sample_df[column].values, y=sample_df['resp'].values)\n    plt.xlabel(f'{column} R2 score: {round(r2_score, 4)}')\nf.tight_layout()","4e5a1204":"ratio = 4 \nf = plt.figure(figsize=(25, 60))\nouter_grid = gridspec.GridSpec(6, 3, wspace=.3, hspace=.3)\nfor i, column in enumerate(tag_0.columns): \n    gs = gridspec.GridSpecFromSubplotSpec(ratio+1, ratio+1, \n                                         subplot_spec=outer_grid[i], wspace=.3, hspace=.3)\n    g = myjoint(y='resp', x=column, data=sample_df, ratio=ratio)\n    g = g.plot(sns.scatterplot, sns.distplot)\n    r2_score = r2(x=sample_df[column].values, y=sample_df['resp'].values)\n    plt.xlabel(f'{column} R2 score: {round(r2_score, 4)}')","51866f95":"#### \u6570\u636e\u7f3a\u5931 Null Values \n\n\u56e0\u4e3a\u9ad8\u9891\u4ea4\u6613\u7684\u89c4\u5f8b\u4e0e\u7279\u6027\uff0c\u6211\u4eec\u4f1a\u53ea\u53d6\u5355\u72ec\u4e00\u5929\u7684\u6570\u636e\u6765\u770bEDA\u3002\u540c\u65f6\u63a5\u4e0b\u6765\u7684\u6570\u636e\u586b\u5145\uff0c\u662f\u7531\u5e73\u5747\u6570mean\u6765\u586b\u5145\u7684\u3002","e50827a7":"#### Group 0 Correlation Analysis ","7ccf90b4":"\u5728\u586b\u5145\u5b8c\u7f3a\u5931\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u4e5f\u6765\u6bd4\u8f83\u4e00\u4e0bresp\u4e4b\u4e8eweight\u7684\u6563\u70b9\u56fe\u7684\u533a\u522b\u3002\u53ef\u4ee5\u53d1\u73b0\uff1a\n* weight\u66f4\u4f4e\u7684\u65f6\u5019\uff0cresp\u7684\u79bb\u6563\u7a0b\u5ea6\u5c31\u66f4\u9ad8\u4e00\u4e9b\u3002\n* **Lower weight trades have a much higher dispersion in resp.** \n* weight\u53ef\u80fd\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u672a\u6765\u6536\u76ca\u6ce2\u52a8\u7684\u9884\u6d4b\u91cf\u3002\n* **Weights implies to be some kind of predictor of future return volatility.** \n","fe8c60b5":"## \u6570\u636e\u5206\u5e03 Distribution <a class=\"anchor\" id=\"second-bullet\"><\/a>\n\n\u53ef\u4ee5\u770b\u51fa\u6570\u636e\u662f\u7528\u5929\u6570`date`\uff0c\u52a0\u6743`weight`\uff0c\u591a\u4e2a`resp`\uff0c\u591a\u4e2a\u6570\u636e\u7279\u5f81`features`\uff0c\u548c`ts_id`\u6784\u6210\u7684\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u4e2d\u95f4\u7684weight\u548cresp\u505a\u51fa\u5206\u6790\u3002\u7ecf\u7531\u56fe\u50cf\u663e\u793a\uff0c\u4ed6\u4eec\u591a\u5448\u73b0\u6b63\u6001\u5206\u5e03\u4e14\u6570\u636e\u6807\u51c6\u5316\uff0c\u5bf9\u6211\u4eec\u63a5\u4e0b\u6765\u7684\u6570\u636e\u5206\u6790\u610f\u4e49\u91cd\u5927\u3002\n\nThe distribution of the train dateset seems normally distributed (standardized) and are mean\/zero reverted. \n\n\u540c\u65f6\u53ef\u4ee5\u770b\u51fa\u6709\u5f88\u591a\u7f3a\u5931\u7684\u6570\u636e\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6570\u636e\u586b\u5145\u3002\u56e0\u4e3a\u6570\u636e\u662f\u5448\u6b63\u6001\u5206\u5e03\u7684\uff0c\u6240\u4ee5\u6211\u4e5f\u9009\u62e9\u4e86\u4f7f\u7528\u5e73\u5747\u6570\u6765\u66ff\u4ee3NA\u3002","d136edbf":"## \u5bfc\u5f15\u76ee\u5f55:\n* [\u603b\u4f53\u6784\u9020 Overall](#first-bullet)\n* [\u6570\u636e\u5206\u5e03 Distribution](#second-bullet)\n* [\u76f8\u5173\u6027\u4e0e\u5206\u7ec4 Correlation](#third-bullet) \n* [\u5206\u7ec4\u5b9e\u4f8b Group 0](#forth-bullet) \n\n\n## \u603b\u4f53\u6784\u9020 Overall <a class=\"anchor\" id=\"first-bullet\"><\/a>","7e87bcd6":"\u5982\u679c\u89c9\u5f97\u6570\u636e\u4e0d\u662f\u6309\u7167\u903b\u8f91\u6392\u5217\uff0c\u60f3\u8ba9\u6570\u636e\u8868\u8fbe\u66f4\u6e05\u6670\uff0c\u53ef\u4ee5\u518d\u6b21sort\u4e00\u4e0b\u3002\n\n`df.sort_values(by=['date', 'ts_id'], inplace=True)` ","7f1df602":"#### Group 0 Linear Regression Analysis ","900d679a":"## \u76f8\u5173\u6027\u4e0e\u5206\u7ec4 Correlation <a class=\"anchor\" id=\"first-bullet\"><\/a>\n**\u5143\u6570\u636e** \u7ade\u8d5b\u4e3b\u6301\u4eba\u5bf9\u6b64\u8fdb\u884c\u4e86\u63cf\u8ff0\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u5047\u8bbe\uff0c\u5373\u5143\u6570\u636e\u4e2d\u7684\u6807\u8bb0\u4ee3\u8868\u67d0\u79cd\u6982\u5ff5\uff08\u4f8b\u5982\u4f53\u79ef\u4e0d\u5e73\u8861\uff09\u53ef\u7528\u6765\u521b\u5efa\u8fd9\u4e9b\u529f\u80fd\u3002\u8fd9\u4f7f\u5f97\u9a8c\u8bc1\u53e6\u4e00\u4e2a**\u5047\u8bbe**\uff1a\u6839\u636e\u76f8\u540c\u7684\u503c\uff0c\u7531\u76f8\u540c\u6982\u5ff5\u5236\u6210\u7684\u8981\u7d20\u5c06\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u5e76\u4e14\u8981\u7d20\u4e4b\u95f4\u4e5f\u5177\u6709\u76f8\u5173\u6027\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u68c0\u9a8c\u8be5\u5047\u8bbe\u7684\u6709\u6548\u6027\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u5c06\u8fd9\u4e9b\u7279\u5f81\u5212\u5206\u4e3a\u4e0d\u540c\u7684*\u7c7b\u522b*\u3002\n\n\u76f8\u5173\u6027\u7684\u56fe\u6807\u8868\u660e\uff0cfeature resp_4\u76f8\u5bf9\u4e8efeature resp\u62e5\u6709\u6700\u9ad8\u7684\u6b63\u76f8\u5173\u6027\uff0c\u800cfeature resp_1\u7528\u4e8e\u6700\u4f4e\u7684\u6b63\u76f8\u5173\u6027\u3002","3339671c":"## \u5206\u7ec4\u5b9e\u4f8b Group 0 <a class=\"anchor\" id=\"forth-bullet\"><\/a>\nDistributions : Group 0 features with 1st concept ","6fe61ef6":"#### Group 0 Scatter Plot"}}