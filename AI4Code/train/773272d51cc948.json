{"cell_type":{"c4fe5647":"code","988925c0":"code","9b60cc7b":"code","a28f920c":"code","334ca8bf":"code","a3ce04e5":"code","f38ef08d":"code","47ba3ec7":"code","66f213e4":"code","9d79f69a":"code","bbc45050":"code","67625d65":"code","0f1f3379":"code","ab654224":"code","33fc3721":"code","c6b82dce":"code","bae17bd0":"code","398602d2":"code","087ae6cb":"code","e2eb2063":"code","3663ae78":"code","32f2c675":"code","215990b6":"code","7c654bd6":"code","b15b8541":"code","f4167415":"code","e0d028a8":"code","1ec8184f":"code","300d852c":"code","bc6fb673":"code","701faa61":"code","73f927db":"code","88be718f":"code","9a5bc4b2":"code","34588e9a":"code","3398a1d0":"code","0e11ce1a":"code","26ccd1ed":"code","86f6dc5a":"code","e232eeff":"code","ba6f07d8":"code","29a35f03":"code","a42fa6ab":"code","b91bd21d":"code","f806966f":"code","c46c4e45":"code","d6e4d785":"code","8573e3e8":"code","7e5ce218":"code","5c5a0d39":"markdown","aa9075d8":"markdown","17101ada":"markdown","0ecb3702":"markdown","fd756137":"markdown","8cf9a8fa":"markdown","eab8970e":"markdown","c2a151d1":"markdown","35c39ad4":"markdown","b3ffef5c":"markdown","5adb5cc5":"markdown","17dd8b64":"markdown","09f47c7d":"markdown","819dbf2a":"markdown","40ca5af0":"markdown","8ed55959":"markdown","20211f98":"markdown","a6a9e360":"markdown","bcfa7f7d":"markdown","a58beb4d":"markdown","2ee2d9d0":"markdown","77f7ae6c":"markdown","a7491231":"markdown","94feb9e6":"markdown","542a6544":"markdown","65702a81":"markdown","4978a99c":"markdown","11ecb118":"markdown","bd5d3b3b":"markdown","465c6f06":"markdown","dbe3b42f":"markdown","e79ddbf5":"markdown","adaea304":"markdown"},"source":{"c4fe5647":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","988925c0":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","9b60cc7b":"train_df.columns","a28f920c":"train_df.head()","334ca8bf":"train_df.describe()","a3ce04e5":"train_df.info()","f38ef08d":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #counts number of categorical variable (value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (10,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","47ba3ec7":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","66f213e4":"def plot_hist(variable):\n    \"\"\"\n    Fare, Age and passengerId\n    \"\"\"\n    \n    \n    var = train_df[variable]\n    \n    #Visualize\n    plt.figure(figsize = (10,3))\n    plt.hist(var,bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distribution with histogram\".format(variable))\n    plt.show()\n    ","9d79f69a":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor c in numericVar:\n    plot_hist(c)","bbc45050":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)\n","67625d65":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)\n","0f1f3379":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)\n","ab654224":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)\n","33fc3721":"# Pclass,Sex vs Survived\ntrain_df[[\"Pclass\",\"Survived\",\"Sex\"]].groupby([\"Pclass\",\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)\n","c6b82dce":"# Embarked vs Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","bae17bd0":"# Embarked,Pclass vs Survived \ntrain_df[[\"Embarked\",\"Survived\",\"Pclass\"]].groupby([\"Embarked\",\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\",ascending = False)","398602d2":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for i in features:\n        #1st quartile\n        \n        Q1 = np.percentile(df[i],25)\n        \n        #3rd quartile\n        \n        Q3 = np.percentile(df[i],75)\n        \n        # IQR\n        \n        IQR = Q3 - Q1\n        \n        # outlier step\n        \n        outlier_step = IQR * 1.5\n        \n        #detect outlier and their indeces\n        \n        \n        outlier_list_col = df[(df[i] < Q1 - outlier_step) | (df[i] > Q3 + outlier_step)].index\n        \n       \n        \n        \n        #store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    \n    multiple_outliers = list(i for i, v in outlier_indices.items() if v>2)\n        \n    return multiple_outliers\n        ","087ae6cb":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","e2eb2063":"# drop outliers\n\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","3663ae78":"a= train_df[(train_df[\"Age\"] > 60) | (train_df[\"Fare\"] >70)].index","32f2c675":"a = Counter(a)\na","215990b6":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","7c654bd6":"train_df.head()","b15b8541":"train_df.columns[train_df.isnull().any()]","f4167415":"train_df.isnull().sum()","e0d028a8":"train_df[train_df[\"Embarked\"].isnull()]","1ec8184f":"trainEM_df = train_df[train_df.Pclass == 1]   #Filter for Pclass =1 due to our missing embarked datas have 1 Pclass\ntrainEM_df.boxplot(column = 'Fare', by=\"Embarked\")\nplt.show()\n","300d852c":"# Filling Embarked\n\ntrain_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","bc6fb673":"train_df[train_df[\"Fare\"].isnull()]","701faa61":"train_df[(train_df.Embarked == \"S\") & (train_df.Pclass == 3)].boxplot(column = \"Fare\")\nplt.show()","73f927db":"print(train_df[(train_df.Embarked == \"S\") & (train_df.Pclass == 3)][\"Fare\"].mean()) #Filled that empty fare with 13.642\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(train_df[(train_df.Embarked == \"S\") & (train_df.Pclass == 3)][\"Fare\"].mean())\ntrain_df[train_df[\"Fare\"].isnull()]","88be718f":"train_df.head()","9a5bc4b2":"listem = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\n\nplt.figure(figsize= (12,9))\nsns.heatmap(train_df[listem].corr(), annot=True, fmt='.2f')\nplt.show()","34588e9a":"f,ax = plt.subplots(figsize = (10,10))\n\nax = sns.barplot(x='SibSp', y=\"Survived\", data=train_df)\n\nplt.xlabel(\"SibSp\",fontsize=20)\nplt.ylabel(\"Survival Probability\",fontsize=20)\nax.tick_params(labelsize=20)\nplt.show()","3398a1d0":"f,ax = plt.subplots(figsize = (10,10))\n\nax = sns.barplot(x='Parch', y=\"Survived\", data=train_df)\n\nplt.xlabel(\"Parch\",fontsize=20)\nplt.ylabel(\"Survival Probability\",fontsize=20)\nax.tick_params(labelsize=20)\nplt.show()","0e11ce1a":"f,ax = plt.subplots(figsize = (10,10))\n\nax = sns.barplot(x='Pclass', y=\"Survived\", data=train_df)\n\nplt.xlabel(\"SibSp\",fontsize=20)\nplt.ylabel(\"Survival Probability\",fontsize=20)\nax.tick_params(labelsize=20)\nplt.show()","26ccd1ed":"\n\nax = sns.FacetGrid(train_df, col='Survived',size=5)\n\nax.map(sns.distplot, 'Age',bins=35)\n\n","86f6dc5a":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=3)\ng.map(plt.hist,\"Age\", bins=35)\ng.add_legend()\nplt.show()","e232eeff":"g = sns.FacetGrid(train_df, row=\"Embarked\",size=3)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","ba6f07d8":"g = sns.FacetGrid(train_df, row=\"Embarked\", col='Survived')\ng.map(sns.barplot, \"Sex\", \"Fare\")\nplt.show()","29a35f03":"train_df[train_df[\"Age\"].isnull()]","a42fa6ab":"plt.subplots(figsize=(9,9))\nsns.boxplot(data=train_df, x=\"Sex\", y=\"Age\")\nplt.show()","b91bd21d":"plt.subplots(figsize=(7,7))\nsns.boxplot(data=train_df, x=\"Sex\", y=\"Age\",hue=\"Pclass\")\nplt.show()","f806966f":"plt.subplots(figsize=(9,9))\nsns.boxplot(data=train_df, x=\"Parch\", y=\"Age\")\nplt.show()","c46c4e45":"plt.subplots(figsize=(9,9))\nsns.boxplot(data=train_df, x=\"SibSp\", y=\"Age\")\nplt.show()","d6e4d785":"sns.heatmap(train_df[[\"Age\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot=True)\nplt.show()","8573e3e8":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\n\nfor i in index_nan_age:\n\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])&  (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    \n    age_med = train_df[\"Age\"].median()\n\n    if not np.isnan(age_pred):\n         \n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n         train_df[\"Age\"].iloc[i] = age_med","7e5ce218":"train_df[train_df[\"Age\"].isnull()]","5c5a0d39":"<a id = '12'><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","aa9075d8":"<a id = '5'><\/a><br>\n## Numerical Variable","17101ada":"Fare and Survived features have positive correlation as 0.26","0ecb3702":"Filling both missing Embarked datas with \"C\" would be good. Since they both paid 80.0 and C port has closer fares to 80.","fd756137":"<a id = '20'><\/a><br>\n## Fill Missing: Age Feature","8cf9a8fa":"<a id = '3'><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable Analysis : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable Analysis : Fare, Age and passengerId","eab8970e":"* Age is correlated with Parch,Pclass,SibSp","c2a151d1":"<a id = '14'><\/a><br>\n## Parch -- Survived","35c39ad4":"<a id = '11'><\/a><br>\n# Visualization","b3ffef5c":"* SibSp and Parch can be used for new feature creation with threshold=3.\n* Small families have more chance to survive.\n* There is std in survival of passenger with Parch=3","5adb5cc5":"<a id = '19'><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","17dd8b64":"<a id = '1'><\/a><br>\n# Load and Check Data","09f47c7d":"<a id = '7'><\/a><br>\n# Outlier Detection","819dbf2a":"* float64(2) : Fare and Age\n* int64(5) : Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","40ca5af0":"<a id = '4'><\/a><br>\n## Categorical Variable","8ed55959":"<a id = '8'><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","20211f98":"<a id = '16'><\/a><br>\n## Age -- Survived","a6a9e360":"# Introduction\n\nTitanic is well-known shipwreck happened ind 1912. The Titanic sank because of hitting to iceberg and leads to death 1502 people out of 2224 passengers and crew.\n\n<font color = 'blue'>\nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)","bcfa7f7d":"<a id = '17'><\/a><br>\n## Pclass -- Survived -- Age","a58beb4d":"* age <=10 has a high survival rate,\n* oldest passenger (80) survived,\n* large number of 20 years old people did not survived,\n* most passengers are in 15-35 age range,\n* we can use age feature as training,\n* we can use age distribution for missing value of age feature","2ee2d9d0":"<a id = '15'><\/a><br>\n## Pclass -- Survived","77f7ae6c":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","a7491231":"* Sex is not helping for us to predict age.","94feb9e6":"<a id = '13'><\/a><br>\n## SibSp -- Survived","542a6544":"<a id = '18'><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","65702a81":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","4978a99c":"* As we can see here, having more than 2 SibSp leads to sharp decrease of Survival Probabiltiy\n* If SibSp is 2 or less than 2, passenger has more chance to survive\n* We can consider a new feature describing these categories.","11ecb118":"<a id = '6'><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Sibsp - Survived\n* Parch - Survived","bd5d3b3b":"* Females have more survival rate than males\n* Males have more survival rate in pclass 3 in C.\n* Embarked and Sex will be used in training.","465c6f06":"<a id = '9'><\/a><br>\n## Find Missing Value","dbe3b42f":"* Pclass is important for model training.","e79ddbf5":"<a id = '2'><\/a><br>\n# Variable Description\n1. PassengerId : Unique id number for each passenger\n1. Survived : passenger survived(1) or died(0)\n1. Pclass : Passenger class\n1. Name : Name\n1. Sex : Gender of passengers Male(1) and Female(0)\n1. Age : Age of passengers\n1. SibSp : nubmer of siblings\/spouses\n1. Parch  : number of parents\/children\n1. Ticket : Ticket number\n1. Fare : Amount of money spent for ticket\n1. Cabin : Cabin category\n1. Embarked : Port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","adaea304":"<a id = '10'><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1"}}