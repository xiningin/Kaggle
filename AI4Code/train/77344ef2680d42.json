{"cell_type":{"99aeaa2b":"code","1fe6c4dd":"code","3cb94690":"code","facb5e44":"code","616edf40":"code","5fcd70ff":"code","d19d188c":"code","a27ec432":"code","a6a73b13":"code","7bcb305c":"code","09534d04":"code","7a8bffd6":"code","49073a18":"code","dbea040d":"code","89f87ecc":"code","4bfa4a37":"code","47d487b7":"code","acbb9415":"code","c4aee11e":"code","4ad278c3":"code","3109b469":"code","58147710":"code","0d755c8c":"markdown","91a6ba0e":"markdown","a4d46456":"markdown","36eefea0":"markdown","62dc2adc":"markdown","6cdcbec4":"markdown","acbd82b6":"markdown","aa328d5b":"markdown","86dc09e5":"markdown","1cefee62":"markdown","c90d160f":"markdown","f57e0ca3":"markdown","63d76438":"markdown"},"source":{"99aeaa2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n%matplotlib inline \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/all-trumps-twitter-insults-20152021'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# read csv file and save it in df\ndf = pd.read_csv('..\/input\/all-trumps-twitter-insults-20152021\/trump_insult_tweets_2014_to_2021.csv')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1fe6c4dd":"# show top five rows of dataset\ndf.head()","3cb94690":"# deleting unnecessary column\ndf.drop('Unnamed: 0', axis = 1, inplace = True)","facb5e44":"# check data type of columns\ndf.dtypes","616edf40":"missing_data = df.isnull()\nmissing_data.head()","5fcd70ff":"for column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\")    ","d19d188c":"# index 2533 and 7439 have target values null\nprint(df[df['target'].isnull()])","a27ec432":"target_value_counts = df['target'].value_counts()\ntarget_value_counts","a6a73b13":"def concat(s):\n    temp = ''\n    i = 0\n    for value in s:\n        temp = temp +' '+ value\n    return temp","7bcb305c":"m = re.compile(r'@\\w+')\n#mention_list = m.finditer(df['tweet'].to_json())\nmention_list = []\ntemp = '' # temporary variable for storing list of finds\nfor value in df['tweet']:\n    temp = m.findall(str(value))\n    if temp:\n        if len(temp) > 1: # if temp is greater than 1\n            mention_list.append(concat(temp)) # call concat function\n        else: # if list contains 1 item\n            mention_list.append(temp[0])\n    else:\n        mention_list.append('None')\n# print first 50 mentions\nfor i in range(50):\n    print(mention_list[i])\n","09534d04":"# letls make column of all mentions\nmention_array = np.array(mention_list)\ndf['mentions']= pd.Series(mention_array)\ndf['mentions'].value_counts().head(50)","7a8bffd6":"some_mentions = ['@nytimes', '@CNN', '@FoxNews', '@foxandfriends', '@JebBush'] # top 5 mentions\ncounts = [236, 179, 172, 75, 43] # seats in assembly\nexplode=(0.2, 0.2, 0.2, 0.2, 0.2) # distance from each other\npie=plt.pie(counts,\n        explode=explode,\n        labels=some_mentions,\n        autopct='%.1f%%',\n        shadow=True,\n        startangle=45\n)\nplt.axis('equal')\nplt.title('Pie Graph of top 5 mentions')\nplt.legend(pie[0], some_mentions, loc=2)\nplt.show()","49073a18":"# import library\nfrom textblob import TextBlob","dbea040d":"polarity = list()\nfor value in df['tweet']:\n    value\n    if TextBlob(value).sentiment.polarity > 0:\n        polarity.append(\"Positive\")\n    elif TextBlob(value).sentiment.polarity < 0:\n        polarity.append(\"Negative\")\n    else:\n        polarity.append(\"Neutral\")    ","89f87ecc":"df['sentiment'] = polarity","4bfa4a37":"df[['tweet', 'sentiment']].head(10)","47d487b7":"df['sentiment'].value_counts()","acbb9415":"df.head()","c4aee11e":"import seaborn as sns\nsns.countplot(x = df['sentiment'])\nplt.show()","4ad278c3":"# required modules\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize","3109b469":"tokens = []\nstop_words = stopwords.words(\"english\")\n# GET TEXT FROM DATAFRAME\nfor tweet in df['tweet']:\n# MAKE TOKENS OF TEXT AFTER CONVERTING IT TO LOWERCASE\n    #text = tweet\n    word_tokens = word_tokenize(tweet.lower())\n    # ITERATE OVER TOKEN\n    for word in word_tokens:\n        # IF WORD IS ALPHABETICAL\n        if word.isalpha(): # IGNORE ALL HASHTAGS \n            # IF WORD IS NOT IN STOPWORDS LIST\n            if word not in stop_words:\n                tokens.append( word)\nfwords = []\ncountwords = Counter(tokens)\n#release_list(tokens), it takes 5 more seconds \nfor word in countwords.most_common(50):\n    fwords.append(word[0] + ':' + \" used \" + str(word[1]) + ' times')","58147710":"# top 50 most used words\nfwords","0d755c8c":"**it seems sarcasim does not have good relation with textblob libray. it can't detect sarcastic text**","91a6ba0e":"I'm Hadi here, new on kaggle and Data Science. I'm using data set having path ..\/input\/all-trumps-twitter-insults-20152021\/trump_insult_tweets_2014_to_2021.csv. for sure it is not collected by me. I'm just using it for learning purpose. i'm thankful to one who has collected this. regards: Hadi Bux","a4d46456":"# ","36eefea0":"we have 5 columns. **unnamed: 0** column which is just like index, **target** which has person name, **insult** which is particular word used for insult and **tweet** which represents actuall tweet","62dc2adc":"#  Commonly used keywords","6cdcbec4":"create mention list","acbd82b6":"# Visualization","aa328d5b":"most tweets don't have mentions 7927. there are 558 unique mentions and @nytimes is at top with value of 236 followed by CNN. note: some tweets contain more than 2 mentions. value_count() function count them as another unique value","86dc09e5":"# Sentiment Analysis of Tweets ","1cefee62":"# get list all mentions in tweets","c90d160f":"there 866 different targets ","f57e0ca3":"make function which concatinates strings if tweet contains more than 1 mentions","63d76438":"we see that column named Unnamed: 0 is unnecessary, we will delete it"}}