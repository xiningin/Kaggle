{"cell_type":{"c489ebb3":"code","371cb234":"code","42293bf9":"code","9c1c7a13":"code","8965bc0c":"code","a3acb599":"code","97b14a28":"code","c1ae95fa":"code","0bea9f02":"code","579a758e":"code","2b34932e":"code","96abe6f7":"code","aee4e027":"code","b201a833":"code","05f1ffbc":"code","a09787ee":"code","7ccd64f3":"code","db3ac0a7":"code","dce95ede":"code","9eef6bc0":"code","09c3720a":"code","4a73a6b3":"code","a73d1235":"code","3dfd89dd":"code","70946e5e":"code","dcc76f2b":"code","2462598d":"code","a04e5718":"code","b38705e3":"code","952c98d5":"code","2bf75a4f":"code","78ea60df":"code","7a707789":"code","f091fe04":"code","07425cc7":"markdown"},"source":{"c489ebb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","371cb234":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","42293bf9":"train.head()","9c1c7a13":"train.info()","8965bc0c":"train['SalePrice'].describe()","a3acb599":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.distplot(train['SalePrice'])\nplt.xticks(rotation = 30)","97b14a28":"print(\"Skewness = \", train['SalePrice'].skew())","c1ae95fa":"# correlation\ncorr = train.corr()\n\nplt.figure(figsize=(15,12))\n\nsns.heatmap(corr,vmax=0.9,square=True)\nplt.show();","0bea9f02":"plt.scatter(x=train['TotRmsAbvGrd'], y=train['GrLivArea'])\nplt.xlabel('TotRmsAbvGrd')\nplt.ylabel('GrLivArea')\nplt.show();","579a758e":"# GarageYrBlt and YearBuilt\nplt.scatter(x=train['GarageYrBlt'], y=train['YearBuilt'])\nplt.xlabel('GarageYrBlt')\nplt.ylabel('YearBuilt')\nplt.show();","2b34932e":"# 1stFlrSF and TotalBsmtSF\nplt.scatter(x=train['1stFlrSF'], y=train['TotalBsmtSF'])\nplt.xlabel('1stFlrSF')\nplt.ylabel('TotalBsmtSF')\nplt.show();","96abe6f7":"# GarageCars and SalePrice\nplt.scatter(x=train['GarageCars'], y=train['GarageArea'])\nplt.xlabel('GarageCars')\nplt.ylabel('GarageArea')\nplt.show();","aee4e027":"# correlation\ncorr = train.corr()\n# sort in descending order\ncorr_top = corr['SalePrice'].sort_values(ascending=False)[:10]\ntop_features = corr_top.index[1:]\n\ncorr_top","b201a833":"\n# Top features and SalePrice\nnumeric_cols = ['GrLivArea','GarageArea','TotalBsmtSF','1stFlrSF','YearBuilt']\nnominal_cols = ['OverallQual','GarageCars','FullBath','TotRmsAbvGrd']\n\nfig,ax=plt.subplots(nrows=9,ncols=1,figsize=(6,30))\nfor i in range(len(top_features)):    \n\n    ax[i].scatter(x=train[top_features[i]], y=train['SalePrice'])\n    ax[i].set_xlabel('%s'%(top_features[i]))\n    ax[i].set_ylabel('SalePrice')\n\nplt.tight_layout()\nplt.savefig('.\/Top_featuresvsSalePrice.jpg',dpi=300,bbox_inches='tight')\nplt.show();","05f1ffbc":"Q1 = []\nQ3 = []\nLower_bound = []\nUpper_bound = []\nOutliers = []\n\n\nfor i in top_features:\n    \n    # 25th and 75th percentiles\n    q1, q3 = np.percentile(train[i],25), np.percentile(train[i],75)\n    # Interquartile range\n    iqr = q3 - q1\n    # Outlier cutoff\n    cut_off = 1.5*iqr\n    # Lower and Upper bounds\n    lower_bound = q1-cut_off\n    upper_bound = q3+cut_off\n        \n    # save outlier indexes\n    outlier = [x for x in train.index if train.loc[x,i]<lower_bound or train.loc[x,i]>upper_bound]\n    \n    # append values for DataFrame\n    Q1.append(q1)\n    Q3.append(q3)\n    Lower_bound.append(lower_bound)\n    Upper_bound.append(upper_bound)\n    Outliers.append(len(outlier))\n    \n    try:\n        train.drop(outlier,inplace=True,axis=0)\n    except:\n        continue\n\ndf_out = pd.DataFrame({'Column':top_features,'Q1':Q1,'Q3':Q3,'Lower bound':Lower_bound,'Upper_bound':Upper_bound,'No. of outliers':Outliers})    \ndf_out.sort_values(by='No. of outliers',ascending=False)","a09787ee":"ntrain = train.shape[0]\n\ntarget = np.log(train[\"SalePrice\"])\n\ntrain.drop([\"Id\",\"SalePrice\"],inplace = True, axis=1)\n\ntest_id = test['Id']\n\ntest.drop('Id',inplace = True,axis =1)\n\ntrain = pd.concat([train,test])","7ccd64f3":"train.isna().sum().sort_values(ascending=False).head(10)","db3ac0a7":"train['PoolQC'].unique()","dce95ede":"#                                                Ordinal features\n#NA means no Pool\ntrain['PoolQC'].replace(['Ex','Gd','TA','Fa',np.nan],[4,3,2,1,0],inplace=True)\n\n# NA means no fence\ntrain['Fence'].replace(['GdPrv','MnPrv','GdWo','MnWw',np.nan],[4,3,2,1,0],inplace=True)\n\n# NA means no fireplace\ntrain['FireplaceQu'].replace(['Ex','Gd','TA','Fa','Po',np.nan],[5,4,3,2,1,0],inplace=True)\n\n#                                                 Nominal features\n# NA means no miscellaneous feature\ntrain['MiscFeature'].fillna('None',inplace=True)\n\n# NA means no alley access\ntrain['Alley'].fillna('None',inplace=True)\n\n#                                               Numerical features\n# Replace null lotfrontage with average of the neighborhood\ntrain['LotFrontage'] = train.groupby('Neighborhood')['LotFrontage'].transform(lambda x:x.fillna(x.median()))\n","9eef6bc0":"# garagefeatures = ['GarageCond','GarageQual','GarageYrBlt','GarageFinish','GarageType'] \n\n# for i in garagefeatures:\n#     print(i,train[i].unique())\n    \ntrain['GarageCars'].unique()\n#train['GarageArea'].unique()","09c3720a":"train['GarageYrBlt'].median()","4a73a6b3":"for i in ['GarageCond','GarageQual']:\n    train[i].replace(['Ex','Gd','TA','Fa','Po',np.nan],[5,4,3,2,1,0],inplace=True)\n    \ntrain['GarageFinish'].replace(['Fin','RFn','Unf',np.nan],[3,2,1,0],inplace=True)\n\ntrain['GarageType'].fillna('None',inplace=True)\n\ntrain['GarageYrBlt'].fillna(train['GarageYrBlt'].median(),inplace = True)\ntrain['GarageArea'].fillna(train['GarageYrBlt'].median(),inplace = True)\ntrain['GarageCars'].fillna(0,inplace=True)\n","a73d1235":"#                                                Ordinal features\nfor i in ['BsmtCond','BsmtQual']:\n    train[i].replace(['Ex','Gd','TA','Fa','Po',np.nan],[5,4,3,2,1,0],inplace=True)\n\ntrain['BsmtExposure'].replace(['Gd','Av','Mn','No',np.nan],[4,3,2,1,0],inplace=True)\n\nfor i in ['BsmtFinType1','BsmtFinType2']:\n    train[i].replace(['GLQ','ALQ','BLQ','Rec','LwQ','Unf',np.nan],[6,5,4,3,2,1,0],inplace=True)     \n\n#                                               Numerical features\nfor i in ['BsmtHalfBath','BsmtFullBath','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']:\n    train[i].fillna(0,inplace=True)","3dfd89dd":"#NA means no masonary work\ntrain['MasVnrType'].fillna('None',inplace=True)\n\n#If no masonary work, then area is 0\ntrain['MasVnrArea'].fillna(0,inplace=True)\n\n#Replace with the most common value\nfor i in ['MSZoning','Utilities']:\n    train[i].fillna(train[i].mode()[0],inplace=True)\n\n#\"Assume typical unless deductions are warranted\"\ntrain['Functional'].fillna('Typ',inplace=True)\n\n#Replace with others\ntrain['SaleType'].fillna('Oth',inplace=True)\n#Replace with most common value\ntrain['Electrical'].fillna(train['Electrical'].mode()[0],inplace=True)\n\n#Replace with 'Other' value\nfor i in ['Exterior1st','Exterior2nd']:\n    train[i].fillna('Other',inplace=True)\n    \n#Replace with most common value\ntrain['KitchenQual'].fillna(train['KitchenQual'].mode()[0],inplace=True)\n#ordinal value\ntrain['KitchenQual'].replace(['Ex','Gd','TA','Fa','Po'],[4,3,2,1,0],inplace=True)","70946e5e":"#                                                Ordinal features\ntrain['CentralAir'].replace(['N','Y'],[0,1],inplace=True)\n#                                                 Nominal features\nfor i in ['HeatingQC','ExterCond','ExterQual']:\n    train[i].replace(['Ex','Gd','TA','Fa','Po'],[4,3,2,1,0],inplace=True)","dcc76f2b":"# Total surface area of house\ntrain['TotalSF'] = train.apply(lambda x: x['1stFlrSF'] + x['2ndFlrSF'] + x['TotalBsmtSF'], axis=1)\n\n# Total number of bathrooms in the house\ntrain['TotalBath'] = train.apply(lambda x: x['FullBath'] + 0.5*x['HalfBath'] + x['BsmtFullBath'] + 0.5*x['BsmtHalfBath'], axis=1)\n\n# Total Porch area in the house\ntrain['TotalPorch'] = train.apply(lambda x: x['OpenPorchSF'] + x['EnclosedPorch'] + x['3SsnPorch'] + x['ScreenPorch'], axis=1)\n\n# New house or an old house\ntrain['NewHouse'] = train.apply(lambda x: 1 if x['SaleCondition']=='Partial' else 0, axis=1)","2462598d":"# One-Hot encoding\ntrain = pd.get_dummies(train,drop_first=True)\ntrain.head()","a04e5718":"# train dataset\ndf = train.iloc[:ntrain,:]\n\n# test dataset\ntest = train.iloc[ntrain:,:]","b38705e3":"from sklearn.model_selection import train_test_split\n\nX = df\ny = target\n\n# training and validation set\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=27)","952c98d5":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nlr = LinearRegression()\n\nlr.fit(X_train,y_train)\n\nrmse = np.sqrt(mean_squared_error(y_test,lr.predict(X_test)))\nprint(rmse)","2bf75a4f":"from sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error\n\n# different alpha values\nalphas = [0.01, 0.1, 0.3, 1, 3, 5, 10, 15, 20,25,28,29,30,31,32,33,34,35]\n\nfor a in alphas:\n\n    lr = Ridge(alpha=a)\n    \n    lr.fit(X_train,y_train)\n    \n    rmse = np.sqrt(mean_squared_error(y_test,lr.predict(X_test)))\n    print('For Alpha = ',a,', RMSE = ',rmse)","78ea60df":"model = Ridge(alpha=31)\nmodel.fit(X_train,y_train)","7a707789":"log_pred = model.predict(test)\nactual_pred = np.exp(log_pred)","f091fe04":"data_dict = {'Id':test_id,'SalePrice':actual_pred}\n\nsubmit = pd.DataFrame(data_dict)\nsubmit.to_csv('submission.csv',index=False)","07425cc7":"Highly correlated\nGrLivArea and TotRmsAbvGrd\nGarageYrBlt and YearBuilt\n1stFlrSF and TotalBsmtSF\nOverallQual and SalePrice\nGarageArea and GarageCars"}}