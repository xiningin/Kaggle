{"cell_type":{"bcef5ee6":"code","463cae11":"code","6ab7e59d":"code","b129b667":"code","651e4e41":"code","87e185bf":"code","45633442":"code","a1571770":"code","2b509989":"code","eb0ea3cd":"code","79a24e7a":"code","e6e249a5":"code","e2d4230d":"code","916a0941":"code","26f9a1d0":"code","cf188797":"code","c18d6ce4":"code","2ef5c4b3":"code","d2ff79d9":"code","00d81715":"code","23e2c8c8":"code","07f72db1":"code","a8316631":"code","d4c3b301":"markdown","940a2d33":"markdown","7e6e42f6":"markdown","601fb394":"markdown","821a8cca":"markdown","489a3ae9":"markdown","9497f8d5":"markdown","7ed88d69":"markdown","9bd88bc0":"markdown","9ffc667a":"markdown","67429756":"markdown","32e70f53":"markdown","ace7bcbe":"markdown","eb45dbd4":"markdown","77a83570":"markdown"},"source":{"bcef5ee6":"import re\nfrom collections import Counter\nimport numpy as np\nimport pandas as pd","463cae11":"def process_data(file_name):\n    \n    \"\"\"This function will reads in a corpus (text file), Changes everything to lowercase\n    and return a set of words\"\"\"\n    \n    with open(file_name) as file:\n    \n        output = file.read()\n    \n    output = output.lower()\n    list_of_words = re.findall('\\w+', output)\n    \n    return list_of_words","6ab7e59d":"file_name = \"..\/input\/shakespeare\/shakespeare.txt\"\n# list of the words in the corpus\nword_list = process_data(file_name)\n# list of unique words \nvocab = set(word_list)","b129b667":"def get_count(word_l):\n    \n    \"\"\"This function will take a list of words\n    and return the frequency for each word in the corpus\"\"\"\n    \n    words_freq = {}\n    \n    for word in word_l:\n        \n        if word in words_freq.keys():\n            words_freq[word] += 1\n        else:\n            words_freq[word] = 1\n            \n    # or we can just use words_freq = Counter(word_list) and return it \n    \n    return words_freq       ","651e4e41":"word_count_dict = get_count(word_list)\nprint(f\"There are {len(word_count_dict)} key values pairs\")\nprint(f\"The count for the word 'the' is {word_count_dict.get('the',0)}\")","87e185bf":"def get_probs(word_count_dict):\n    \n    \"\"\"This function will take the wordcount dictionary where key is the word and value is its frequency\n    and return a dictionary where keys are the words and the values are the probability that a word will occur.\"\"\"\n    \n    probabilities = {}\n    \n    total_number_of_words = sum(word_count_dict.values())\n    \n    for word in word_count_dict.keys():\n        probabilities[word] = (word_count_dict[word] \/ total_number_of_words)\n        \n    return probabilities","45633442":"probs = get_probs(word_count_dict)\nprint(f\"Length of probs is {len(probs)}\")\nprint(f\"P('the') is {probs['the']:.4f}\")","a1571770":"# This function will take a word and return a list of words, each word in the list is the same \n# original word with one letter deleted \n\ndef delete_letter(word, verbose=False):\n    \n    split_l = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    \n    delete_l = [L + R[1:] for L, R in split_l if R]\n    \n    if verbose:\n        print(f\"input word {word}, \\nsplit_l = {split_l}, \\ndelete_l = {delete_l}\")\n        \n    return delete_l   ","2b509989":"delete_letter('naser', verbose=True)","eb0ea3cd":"# This function will take a word and return a list of words, each word in the list is the same \n# original word with one letter switched with its adjacent letter\n\ndef switch_letter(word, verbose=False):\n    \n    split_l = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    \n    switch_l  = [a + b[:2][::-1] + b[2:] for a,b in split_l if len(b) > 1]\n    \n    if verbose:\n        print(f\"input word {word}, \\nsplit_l = {split_l}, \\nswitch_l = {switch_l}\")\n      \n    return  switch_l","79a24e7a":"switch_letter('naser', verbose=True)","e6e249a5":"# This function will take a word and return a list of words, each word in the list is the same \n# original word with one letter replaces with the remaining 25 english letter \n# the original word will not be the the returned list \n\ndef replace_letter(word, verbose=False):\n    \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    \n    split_l = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    \n    replace_l = [a + letter + b[1:] for a, b in split_l for letter in letters if len(b) > 0 and letter != b[0]]\n    \n    if verbose:\n        print(f\"input word {word}, \\nsplit_l = {split_l}, \\nreplace_l = {replace_l}\")\n    \n    return replace_l","e2d4230d":"# replace_l = []\n#\n# for a, b in split_l:\n#   \n#    for letter in letters:\n#        if len(b) > 0:\n#            if letter != b[0]:\n#                replace_l.append(a + letter + b[1:])","916a0941":"replace_letter('naser', verbose=False) [:10]","26f9a1d0":"def insert_letter(word, verbose=False):\n    \n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    \n    split_l = [(word[:i], word[i:]) for i in range(len(word) + 1)]\n    \n    insert_l = [a + letter + b for a, b in split_l for letter in letters]\n    \n    if verbose:\n        print(f\"input word {word}, \\nsplit_l = {split_l}, \\ninsert_l = {insert_l}\")\n        \n    return insert_l","cf188797":"# insert_l = []\n# for a, b in split_l:\n#     for letter in letters: \n#         insert_l.append(a + letter + b)","c18d6ce4":"insert_letter('naser', verbose=False) [:10]","2ef5c4b3":"# edit_one_letter function help us to get all the possible edits that are one edit away from a word. \n\ndef edit_one_letter(word, allow_switches = True):\n    \"\"\"\n    Input:\n        word: the string\/word for which we will generate all possible wordsthat are one edit away.\n    Output:\n        edit_one_set: a set of words with one possible edit. Please return a set. and not a list.\n    \"\"\"\n    \n    edit_one_set = set()\n    \n    ### START CODE HERE ###\n    edit_one_set.update(delete_letter(word))\n    if allow_switches:\n        edit_one_set.update(switch_letter(word))\n    edit_one_set.update(replace_letter(word))\n    edit_one_set.update(insert_letter(word))\n    ### END CODE HERE ###\n\n    return edit_one_set","d2ff79d9":"example_word = \"me\"\nexample_edit_one_set = edit_one_letter(example_word)\n# turn this into a list to sort it, in order to view it\nexample_edit_one_l = sorted(list(example_edit_one_set))\n\nprint(example_edit_one_l)","00d81715":"# edit_two_letters function help us to get all the possible edits that are two edits away from a word\n# by implementing the edit_one_letter function on the edited list of words. \n\n\ndef edit_two_letters(word, allow_switches = True):\n    \n    two_edit_set = set()\n    \n    one_edits = edit_one_letter(word, allow_switches=allow_switches)\n    \n    for w in one_edits:\n        two_edit = edit_one_letter(w, allow_switches=allow_switches)\n        \n        two_edit_set.update(two_edit)\n        \n    return two_edit_set","23e2c8c8":"def get_corrections(word, probs, vocab, n=2, verbose = False):\n    \n    suggestions  =  list((word in vocab and word) or\n                     edit_one_letter(word).intersection(vocab) or\n                     edit_two_letters(word).intersection(vocab))\n    \n    #n_best_suggestions = [[sug, probs[sug]] for sug in list(suggestions)]\n    \n    # dict with suggestions as keys and probabilities as values\n    suggestions_with_probs = {}\n    for sug in suggestions:         \n        suggestions_with_probs[sug] = probs[sug]\n    \n    n_best_suggestions = Counter(suggestions_with_probs).most_common(n)\n    \n    \n    if verbose:\n        print(\"suggestions = \", suggestions)\n        \n        \n    \n\n    return n_best_suggestions ","07f72db1":"word = 'nam'\nget_corrections(word, probs, vocab, n=2, verbose = False)","a8316631":"string = \"sdhe askk mee abot my age adn I told  heer that I amm twenty four\"\n\ncorrect_string = []\n\nfor word in string.split():\n\n    if word in vocab:\n        correct_string.append(word)\n        \n    else:\n        suggestions = get_corrections(word, probs, vocab, n=2, verbose = False)  \n        \n        best_score = 0\n        best_correction = ''\n    \n        for sug in  suggestions:\n    \n            if sug[1] > best_score:\n                best_score = sug[1]\n                best_correction = sug[0]\n                \n        correct_string.append(best_correction)\n        \n' '.join(correct_string)","d4c3b301":"# Lets try our Autocorrect on the string below ","940a2d33":"------------------------------------------------","7e6e42f6":"------------------------------------------------","601fb394":"------------------------------------------------------------------------","821a8cca":"## The list comprehension in replace_letter function above is equal to the foe loop below ","489a3ae9":"- I will not test it here because the output is pretty large, if I try it on my name edit_two_letters(\"naser\"), it will return a set with 36860 strings. ","9497f8d5":"-----------------","7ed88d69":"### Thank you for reading, I hope you enjoyed and benefited from it.\n\n### If you have any questions or notes please leave it in the comment section.\n\n### If you like this notebook please press upvote and thanks again.","9bd88bc0":"Using the functions ubove edit_two_letters and edit_one_letterwe will implement get_corrections function ","9ffc667a":"# 2- Data Preprocessing","67429756":"## The list comprehension in insert_letter function above is equal to the foe loop below ","32e70f53":"# 3- string manipulation functions ","ace7bcbe":"# 1- Importing","eb45dbd4":"------------------------------------------------","77a83570":"------------------------------------------------"}}