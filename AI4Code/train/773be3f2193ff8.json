{"cell_type":{"33ed5e1d":"code","c4293e3f":"code","5daa8e7b":"code","bed33182":"code","b5b46dc8":"code","bef3275a":"code","05e6df79":"code","2742fe77":"code","1d833a6f":"code","0bd448d5":"code","d11cd3cf":"code","95a61c15":"code","178f0e47":"code","9c92ec3c":"code","4ec6a39d":"code","24c2d6c6":"code","7adf02b1":"code","2e48dc5c":"code","fe26ddb4":"code","da338733":"code","fc69babc":"code","5afd251f":"code","4d1e1fa0":"code","3cd44a96":"code","706f3a67":"code","182f7521":"code","7832e916":"code","b30f127b":"code","d941c097":"code","3d7bfa8f":"code","ac1d5d04":"code","53b8a4a1":"code","f8333557":"code","2f76b877":"code","7bffcbc9":"code","6d5de148":"code","c5658d22":"code","e3846f0b":"code","f8961a9c":"code","fb9ad495":"code","5e9a70d3":"code","6dcf9b41":"code","d46edce3":"code","fe8fdfda":"code","9d4fd7f3":"code","0428b4ef":"code","fb48c5f6":"code","2a1dbc88":"code","e5f9e000":"code","713e7d63":"code","1955c8a3":"code","7383e787":"code","9cb23dbf":"code","d1d70f0c":"code","30762e40":"code","e54c4e22":"code","d32df74b":"code","552ccbaf":"code","b48bfb1c":"code","63d30aae":"code","4c8d16cc":"code","debe0d05":"code","f32b08c9":"code","6f25d81c":"code","fa2cd8a0":"code","33b968a9":"code","5e8ce456":"code","87d89dc1":"code","d8e6a2f2":"code","64f68f40":"code","0cd91df1":"code","ca9e0f35":"code","d875c8e6":"code","2e21603a":"code","5f37d143":"markdown","c840eabb":"markdown","d3bdf294":"markdown","ab124a73":"markdown","331fbfd8":"markdown","d9889963":"markdown","66d00c83":"markdown","421cf00a":"markdown","58044a3a":"markdown","5baea3ac":"markdown","b2feb194":"markdown","c2a4f854":"markdown","2334fea3":"markdown","b1c310c4":"markdown","5c60dfcf":"markdown","a91e0721":"markdown","006f7f03":"markdown","6cf932fd":"markdown","89c17e73":"markdown","3402207c":"markdown","ee2c13b6":"markdown","52379981":"markdown","119f3b4d":"markdown","4d15182e":"markdown","4827e90b":"markdown","e43bcb3a":"markdown","944613a5":"markdown","dcfcbc3d":"markdown","97980fd3":"markdown","b3fb8c71":"markdown","d6853278":"markdown"},"source":{"33ed5e1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4293e3f":"titanic_train_path = \"\/kaggle\/input\/titanic\/train.csv\"\ntitanic_test_path = \"\/kaggle\/input\/titanic\/test.csv\"\ngender_submission_path = \"\/kaggle\/input\/titanic\/gender_submission.csv\"\ntitanic_train = pd.read_csv(titanic_train_path)\ntitanic_test  = pd.read_csv(titanic_test_path)\ntitanic_gender = pd.read_csv(gender_submission_path)\nprint(titanic_train.shape)\nprint(titanic_test.shape)","5daa8e7b":"titanic_train.info()","bed33182":"titanic_train.describe()","b5b46dc8":"titanic_train.head()","bef3275a":"titanic_test.head()","05e6df79":"categorical_cols = titanic_train.select_dtypes(['object'])\ncategorical_cols.columns","2742fe77":"categorical_cols = categorical_cols.drop(['Cabin'],axis=1)\ncategorical_cols.head()","1d833a6f":"titanic_train['Sex'].unique()","0bd448d5":"titanic_train['Cabin'].unique()","d11cd3cf":"titanic_train['Embarked'].dropna()\ntitanic_train['Embarked'].unique()","95a61c15":"from sklearn.preprocessing import LabelEncoder\n\nlabelEncoder = LabelEncoder()\n\nlabel_train = titanic_train.copy()\nlabel_test = titanic_test.copy()\n\nfor col in categorical_cols.columns:\n    if(col=='Sex'):\n        print(col)\n        label_train[col] = pd.DataFrame(labelEncoder.fit_transform(titanic_train[col]))\n        label_test[col]  = pd.DataFrame(labelEncoder.transform(titanic_test[col]))\n    \nlabel_train.head()\nlabel_test.head()","178f0e47":"#label_train = label_train.drop(['Cabin','Embarked'],axis=1)\nlabel_train.head()","9c92ec3c":"target_col = label_train.Survived\ntrain_data = label_train.drop(['Cabin','Embarked'],axis=1)\ntrain_data","4ec6a39d":"train_data['Survived'].value_counts()","24c2d6c6":"import seaborn as sns\nsns.lineplot(data=train_data.select_dtypes(['int']))","7adf02b1":"sns.barplot(data=train_data.select_dtypes(['int']))\nsns.barplot(data=train_data.Pclass)\n","2e48dc5c":"import matplotlib.pyplot as plt\nplt.figure(figsize=(5,5))\ndef displayBarplot(feature):\n    survived = titanic_train[titanic_train['Survived']==1][feature].value_counts()\n    dead = titanic_train[titanic_train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Not-Survived']\n    df.plot(kind='bar',stacked=True)\n    #sns.barplot(data=train_data,x=feature,y=\"Survived\",stacked=True,alpha=0.9)\n    plt.title('Number of people Survived in each Class')\n    plt.ylabel('Count of People survived', fontsize=12)\n    plt.xlabel(feature, fontsize=12)\n    plt.show()","fe26ddb4":"displayBarplot(\"Pclass\")","da338733":"displayBarplot(\"Sex\")","fc69babc":"displayBarplot(\"SibSp\")","5afd251f":"displayBarplot(\"Parch\")","4d1e1fa0":"#displayBarplot(\"Embarked\")","3cd44a96":"train_test_data = [titanic_train,titanic_test] #Combining train and test data\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\\.',expand=False)","706f3a67":"titanic_train['Title'].value_counts()","182f7521":"titanic_test['Title'].value_counts()","7832e916":"title_mapping = {\"Mr\":0, \"Miss\":1, \"Mrs\":2,\n                \"Master\":3, \"Dr\":3, \"Rev\":3, \"Col\":3, \"Major\":3, \"Mlle\":3, \"Countess\":3,\n                \"Ms\":3,\"Lady\":3, \"Jonkheer\":3, \"Don\":3, \"Dona\":3, \"Mme\":3, \"Capt\":3, \"Sir\":3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","b30f127b":"titanic_train.head()","d941c097":"titanic_test.head()","3d7bfa8f":"displayBarplot(\"Title\")","ac1d5d04":"titanic_train.drop('Name',axis=1,inplace=True)\ntitanic_test.drop('Name',axis=1,inplace=True)","53b8a4a1":"titanic_train.head(10)","f8333557":"titanic_train[\"Age\"].fillna(titanic_train.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)\ntitanic_test[\"Age\"].fillna(titanic_test.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)\ntitanic_train.head(10)","2f76b877":"for dataset in train_test_data:\n    dataset.loc[ (dataset['Age'] <= 16, 'Age')] = 0\n    dataset.loc[((dataset['Age'] >  16 ) & (dataset['Age'] <= 26), 'Age')] = 1\n    dataset.loc[((dataset['Age'] >  26 ) & (dataset['Age'] <= 36), 'Age')] = 2\n    dataset.loc[((dataset['Age'] >  36 ) & (dataset['Age'] <= 62), 'Age')] = 3\n    dataset.loc[ (dataset['Age'] >  62 ,'Age')] = 4","7bffcbc9":"titanic_train['Age'].head(10)","6d5de148":"displayBarplot(\"Age\")","c5658d22":"titanic_train.head(10)","e3846f0b":"sex = {\"female\":0, \"male\":1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex)","f8961a9c":"titanic_train.head(10)","fb9ad495":"displayBarplot('Sex')","5e9a70d3":"titanic_train.head(10)","6dcf9b41":"titanic_train['Cabin'].value_counts()","d46edce3":"Pclass1 = titanic_train[titanic_train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = titanic_train[titanic_train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = titanic_train[titanic_train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1,Pclass2,Pclass3])\ndf.index=['1st class','2nd class','3rd class']\ndf.plot(kind='bar',stacked=True,figsize=(10,4))","fe8fdfda":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\ntitanic_train['Embarked'].isnull().sum()\ntitanic_train.head(10)","9d4fd7f3":"listResult = titanic_train['Embarked'].unique()\ntitanic_test['Embarked'].unique()\nlistResult","0428b4ef":"embarked_mapping = {\"S\":0,\"C\":1,\"Q\":2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","fb48c5f6":"titanic_train[\"Fare\"].fillna(titanic_train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"),inplace=True)\ntitanic_test[\"Fare\"].fillna(titanic_test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"),inplace=True)","2a1dbc88":"titanic_train['Fare'].isnull().sum()\ntitanic_train.head(10)","e5f9e000":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare']<=17, \"Fare\"] =0\n    dataset.loc[(dataset['Fare']>17) & (dataset['Fare']<=30),'Fare'] =1\n    dataset.loc[(dataset['Fare']>30) & (dataset['Fare']<=100),'Fare'] =2\n    dataset.loc[(dataset['Fare']>100),'Fare'] =3","713e7d63":"titanic_train.head(10)","1955c8a3":"displayBarplot('Fare')","7383e787":"displayBarplot('Pclass')","9cb23dbf":"titanic_train.Cabin.isnull().sum()\n\nfor dataset in train_test_data:\n    dataset[\"Cabin\"] = dataset[\"Cabin\"].str[:1]\n    \ncabin_mapping = {\"A\":0,\"B\":0.4,\"C\":0.8,\"D\":1.2,\"E\":1.6,\"F\":2.0,\"G\":2.4,\"T\":2.8}\nfor dataset in train_test_data:\n    dataset[\"Cabin\"] = dataset[\"Cabin\"].map(cabin_mapping)\ndisplayBarplot(\"Cabin\")\n    \ntitanic_train.head(10)","d1d70f0c":"titanic_train['Cabin'].fillna(titanic_train.groupby('Pclass')['Cabin'].transform(\"median\"),inplace=True)\ntitanic_test['Cabin'].fillna(titanic_test.groupby('Pclass')['Cabin'].transform(\"median\"),inplace=True)\n","30762e40":"titanic_train.head(10)","e54c4e22":"titanic_train['FamilySize'] = titanic_train['SibSp']+titanic_train['Parch']+1\ntitanic_test['FamilySize'] = titanic_test['SibSp']+titanic_test['Parch']+1","d32df74b":"family_mapping = {1:0, 2:0.4, 3:0.8, 4:1.2, 5:1.6, 6:2.0, 7:2.4, 8:2.8}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","552ccbaf":"drop_features = ['SibSp','Parch','Ticket']\ntitanic_train = titanic_train.drop(drop_features,axis=1)\ntitanic_test = titanic_test.drop(drop_features,axis=1)\n\ntitanic_train.head(10)","b48bfb1c":"from sklearn.tree import DecisionTreeRegressor\n\ntrain_data_expt_target = pd.DataFrame(titanic_train.drop(['Survived'],axis=1))\n#target_col = train_data.Survived\ntrain_model = DecisionTreeRegressor(random_state=1)\ntrain_model.fit(train_data_expt_target.select_dtypes(['int64','float32']),target_col)\n#train_data_expt_target.select_dtypes(['int64'])","63d30aae":"#target_col = titanic_test.Survived\n#titanic_test.select_dtypes(['int64'])\n#titanic_test.insert(1, 'Sex', titanic_gender['Sex'],True)\n#titanic_gender\n#titanic_test\nsurvival = {0.0:0,1.0:1}\npredicted_survival = pd.DataFrame(train_model.predict(titanic_test.select_dtypes(['int64','float32'])))\npredicted_survival[0] = predicted_survival[0].map(survival)\npredicted_survival","4c8d16cc":"from sklearn.metrics import mean_absolute_error\n\n#predicted_survival = train_model.predict(titanic_test.select_dtypes(['int64']))\nmean_absolute_error(titanic_gender['Survived'],predicted_survival)","debe0d05":"titanic_gender.Survived","f32b08c9":"from sklearn.ensemble import RandomForestRegressor\n\n#train_data_expt_target = pd.DataFrame(train_data.drop(['Survived'],axis=1))\n#target_col = train_data.Survived\ntrain_rf_model = RandomForestRegressor(random_state=1)\ntrain_rf_model.fit(train_data_expt_target.select_dtypes(['int64','float32']),target_col)\n#train_data_expt_target.select_dtypes(['int64'])","6f25d81c":"predicted_rf_survival = pd.DataFrame(train_rf_model.predict(titanic_test.select_dtypes(['int64','float32'])))\npredicted_rf_survival","fa2cd8a0":"survival = {0.0:0,1.0:1}\n#predicted_survival = pd.DataFrame(train_model.predict(titanic_test.select_dtypes(['int64','float32'])))\npredicted_rf_survival.loc[predicted_rf_survival[0]<1,0] =0\npredicted_rf_survival.loc[predicted_rf_survival[0]>=1,0] =1\npredicted_rf_survival[0] = predicted_rf_survival[0].map(survival)\npredicted_rf_survival","33b968a9":"from sklearn.metrics import mean_absolute_error\n\n#predicted_survival = train_model.predict(titanic_test.select_dtypes(['int64']))\nmean_absolute_error(titanic_gender['Survived'],predicted_rf_survival)","5e8ce456":"from sklearn.neighbors import KNeighborsClassifier\nknn_model = KNeighborsClassifier(n_neighbors=13,metric='euclidean')\nknn_model.fit(train_data_expt_target.select_dtypes(['int64','float32']),target_col)","87d89dc1":"predicted_knn_survival = pd.DataFrame(knn_model.predict(titanic_test.select_dtypes(['int64','float32'])))\npredicted_knn_survival","d8e6a2f2":"mean_absolute_error(titanic_gender['Survived'],predicted_knn_survival)","64f68f40":"from sklearn.svm import SVC\nsvm_model = SVC()\nsvm_model.fit(train_data_expt_target.select_dtypes(['int64','float32']),target_col)\npredicted_svm_survival = pd.DataFrame(svm_model.predict(titanic_test.select_dtypes(['int64','float32'])))\npredicted_svm_survival","0cd91df1":"mean_absolute_error(titanic_gender['Survived'],predicted_svm_survival)","ca9e0f35":"#titanic_gender\noutput = pd.DataFrame({'PassengerId': titanic_test.PassengerId,\n                       'Survived': predicted_survival[0]})\noutput.to_csv('submission.csv', index=False)","d875c8e6":"submission = pd.read_csv('submission.csv')\nsubmission","2e21603a":"submission['Survived'].value_counts()","5f37d143":"# Predict Output","c840eabb":"## fill embarked missing values","d3bdf294":"# KNN","ab124a73":"# Data analysis","331fbfd8":"## Extract Name title","d9889963":"# Validating the model","66d00c83":"Men with title Mr less likely survived\nWomen with title Mrs more likely survived","421cf00a":"# 2. Preprocess Data","58044a3a":"## Fare","5baea3ac":"## map embarked","b2feb194":"Females survived more than males","c2a4f854":"## Develop a Decision Tree model","2334fea3":"## Family size column","b1c310c4":"## Title Mapping\n1. Mr     : 0\n2. Miss   : 1\n3. Mrs    : 2\n4. others : 3","5c60dfcf":"People from Class 1 more likely to survive that people from class 3","a91e0721":"people from 1st class survived more likely than class 3 people\n1st class - economically higher\n3rd class - economically lower class\nmore than 50% people from class 1 are S embarked\nmore than 50% people from class 2 are S embarked\nmore than 50% people from class 3 are S embarked\n\n## Thus filling out the empty values with S embarked","006f7f03":"people with small family were more likely to survive","6cf932fd":"## Cabin","89c17e73":"# 1. Load Data","3402207c":"most of females survived\nwhile males are less likely to survive","ee2c13b6":"## binning fare value\n* fare < 17 : 0\n* fare < 30 : 1\n* fare <100 : 2\n* fare >100 : 3","52379981":"## Map sex","119f3b4d":"## Binning age\n\nchild : 0\nyoung : 1\nadult : 2\nmidAge: 3\nsenior: 4","4d15182e":"## Target Columns","4827e90b":"## Exploratory Data Analysis\n","e43bcb3a":"# Feature Engineering","944613a5":"# SVM","dcfcbc3d":"## Filling age column","97980fd3":"older people less likely survived\nwhile adults and younger people more likely survived","b3fb8c71":"# Output","d6853278":"# RandomForestRegressor"}}