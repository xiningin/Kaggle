{"cell_type":{"c2d19f69":"code","b4d3d42b":"code","6ca58405":"code","2d394dcb":"code","fdb75260":"code","3d5b2526":"code","1894e445":"code","dd60747d":"code","ae157c27":"code","32106c97":"markdown","c33f37f2":"markdown","b9200bdc":"markdown","38b8c7fe":"markdown"},"source":{"c2d19f69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4d3d42b":"from nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\ndef cut(x):\n    stopWords = set(stopwords.words('english'))\n    words = word_tokenize(x)\n    wordsFiltered = []\n \n    for w in words:\n        if w not in stopWords:\n            wordsFiltered.append(w)\n    return wordsFiltered\n\n\n#\u8bfb\u53d6\u8d1f\u8bad\u7ec3\u96c6\nneg=pd.read_csv(\"..\/input\/ir-project\/negative_trainingSet.txt\",sep='\\n',header=None,encoding='gb18030')\nneg['words'] = neg[0].apply(cut)\n#\u8bfb\u53d6\u6b63\u8bad\u7ec3\u96c6\npos=pd.read_csv(\"..\/input\/ir-project\/positive_trainingSet.txt\",sep='\\n',header=None,encoding='gb18030')\npos['words'] = pos[0].apply(cut)\n\n#use 1 for positive sentiment, 0 for negative\ny = np.concatenate((np.ones(len(pos),dtype=int),np.zeros(len(neg),dtype=int)))\nx = np.concatenate((pos['words'],neg['words']))\n\n#\u8bfb\u53d6\u6d4b\u8bd5\u96c6\ntest=pd.read_csv(\"..\/input\/ir-project\/testSet-1000.csv\")\n#\u53bb\u9664\u7a7a\u503c\nfor i in range(len(test)):\n    if pd.isna(test[\"title given by manchine\"][i]):\n        test = test.drop(i)\n#\u5f97\u5230\u53bb\u6389\u7a7a\u503c\u7684\u6d4b\u8bd5\u96c6\ntestdata=test.reset_index(drop=True)\n\ntest_words=['' for i in range(len(testdata))]\nfor i in range(len(testdata)):\n    if(testdata['Y\/N'][i]=='Y'):\n        testdata['Y\/N'][i]='1'\n    else:\n        testdata['Y\/N'][i]='0'\n    test_words[i]=cut(testdata[\"title given by manchine\"][i])\n   \n\n#\u5f97\u5230x_train,x_test,y_train,y_test \nx_train,y_train=x,y.astype(str)\nx_test=np.array(test_words,dtype=object)\ny_test=np.array(testdata['Y\/N'])","6ca58405":"from gensim.models import Word2Vec\n\nn_dim=50\n\n#\u6c42\u8bcd\u5411\u91cf\u7684\u5e73\u5747\u503c\ndef buildWordVector(text, size, imdb_w2v):\n    vec = np.zeros(size).reshape((1, size))\n    count = 0\n    for word in text:\n        try:\n            vec += imdb_w2v.wv[word].reshape((1, size))\n            count += 1\n        except KeyError:\n            continue\n    if count != 0:\n        vec \/= count\n    return vec\n \n\nimdb_w2v = Word2Vec(vector_size=n_dim,min_count=3)\nimdb_w2v.build_vocab(x)\n\nimdb_w2v.train(x,total_examples=imdb_w2v.corpus_count,epochs=10)\ntrain_vecs = np.concatenate([buildWordVector(z, n_dim,imdb_w2v) for z in x_train])\nprint(train_vecs.shape)\n\ntest_vecs = np.concatenate([buildWordVector(z, n_dim,imdb_w2v) for z in x_test])\nprint(test_vecs.shape)\n\n","2d394dcb":"#SVM\nfrom sklearn.svm import SVC\nimport joblib\nclf = SVC(kernel='rbf', verbose=True,shrinking=False)\nclf.fit(train_vecs, y_train)\n#\u4fdd\u5b58\u6a21\u578b\njoblib.dump(clf, 'svm_model.pkl')\n\ny_=clf.predict(test_vecs)  #\u9884\u6d4b\u7684\u7ed3\u679c\nnp.save('.\/y_.npy',y_)\nprint(\"y_:\")\nprint(y_)\nprint(\"y_test:\")\nprint(y_test)\n#print(clf.score(test_vecs, y_test))\n","fdb75260":"from sklearn import  metrics\naccuracy_score=metrics.accuracy_score(y_test,y_)\nprecision_score=metrics.precision_score(y_test,y_,pos_label='1')\nrecall_score=metrics.recall_score(y_test,y_,pos_label='1')\nf1_score=metrics.f1_score(y_test,y_,pos_label='1')\nprint(\"accuracy_score:\",accuracy_score)\nprint(\"precision_score:\",precision_score)\nprint(\"recall_score:\",recall_score)\nprint(\"f1_score:\",f1_score)\n","3d5b2526":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.manifold import TSNE\ny_=np.load(\"..\/input\/ir-project\/y_pre.npy\")\n#\u9009\u62e9\u7ef4\u6570\u4e3a2\ntsne = TSNE(n_components=2, random_state=0)\ntsne_obj= tsne.fit_transform(test_vecs)\ntsne_df = pd.DataFrame({'X':tsne_obj[:,0],\n                        'Y':tsne_obj[:,1],\n                        'digit':y_})\nsns.scatterplot(x=\"X\", y=\"Y\",\n              hue=\"digit\",\n              palette=['green','red'],\n              legend='full',\n              data=tsne_df)\nplt.figure(figsize=(15, 15))\nplt.show()","1894e445":"from mpl_toolkits.mplot3d import Axes3D\n\n#3D\u56fe\u50cf'''\nfig = plt.figure(figsize=(15,15))\ntsne_3D = TSNE(n_components=3, random_state=0)\nX= tsne_3D.fit_transform(test_vecs)\n\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y_,cmap=plt.cm.Spectral)\n\nax.view_init(35,60)\nplt.show()","dd60747d":"#\u56e0\u4e3a\u8bad\u7ec3\u96c6\u6837\u672c\u592a\u591a\uff0c\u6211\u4eec\u9009\u53d6\u90e8\u5206\u8bad\u7ec3\u96c6\u7ed3\u679c\n#some_of_trainvecs=np.concatenate((train_vecs[0:1000],train_vecs[len(pos):(len(pos)+1000)]))\n#some_of_ytrian=np.concatenate((y_train[0:1000],y_train[len(pos):(len(pos)+1000)]))\n\n\n#tsne = TSNE(n_components=3, random_state=0)\n#tsne_obj2= tsne.fit_transform(train_vecs)\n#tsne_df2 = pd.DataFrame({'X':tsne_obj2[:,0],\n                        #'Y':tsne_obj2[:,1],\n                        #'digit':y_trian})\n#print(tsne_df2.head())\n#sns.scatterplot(x=\"X\", y=\"Y\",\n              #hue=\"digit\",\n              #palette=['green','red'],\n              #legend='full',\n              #data=tsne_df2)\n#plt.figure(figsize=(20, 20))\n#plt.show()","ae157c27":"#from mpl_toolkits.mplot3d import Axes3D\n\n#3D\u56fe\u50cf'''\n#fig = plt.figure(figsize=(15,15))\n#tsne2_3D = TSNE(n_components=3, random_state=0)\n#X2= tsne2_3D.fit_transform(train_vecs)\n\n#ax = fig.add_subplot(111, projection='3d')\n\n#ax.scatter(X2[:, 0], X2[:, 1], X2[:, 2], c=y_train,cmap=plt.cm.Spectral)\n\n#ax.view_init(35,60)\n#plt.show()","32106c97":"\u6a21\u578b\u7684\u6307\u6807","c33f37f2":"SVM\u8bad\u7ec3","b9200bdc":"word2vec \u5f97\u5230\u8bcd\u5411\u91cf","38b8c7fe":"\u8bfb\u53d6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6"}}