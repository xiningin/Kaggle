{"cell_type":{"18608ba9":"code","b50d9e37":"code","c4c8ea0d":"code","cdc8445a":"code","38769c86":"code","43ee64eb":"code","dc1dfc4c":"code","f504fb1a":"code","88bc0a23":"code","f4837a29":"code","5d27044e":"code","8c73da6d":"code","6dd6cd40":"code","9931c5ed":"code","ed8b8fd8":"code","8652a3d3":"code","2a537940":"code","8a9b4f66":"code","a21431ab":"markdown","eab11a1f":"markdown","628fcf66":"markdown","f3e46183":"markdown","7a007e6a":"markdown","dd98d9f3":"markdown","3a1dd545":"markdown","b976cfd6":"markdown","a2e46c1c":"markdown","c1f46628":"markdown"},"source":{"18608ba9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b50d9e37":"#Starting with importing our .csv file\ndata = pd.read_csv('..\/input\/AppleStore.csv')","c4c8ea0d":"data.info() #tried to understand what is inside the csv file","cdc8445a":"data.head() #with info and head codes, I can understand what is inside","38769c86":"data.columns # as we see here which columns we have","43ee64eb":"data.corr() #tried to understand any correlations between them ","dc1dfc4c":"import matplotlib.pyplot as plt\nimport seaborn as sns","f504fb1a":"f,ax = plt.subplots(figsize= (15,15))\nsns.heatmap(data.corr(),annot = True,square=True)\nplt.show()","88bc0a23":"data[data.price!=0]# here we are filtering the priced apps\n","f4837a29":"data_priced = data[data.price!=0]\ndata_priced.head()","5d27044e":"data_priced[data_priced.user_rating>4] # we applied second filter by user rating","8c73da6d":"data_priced_liked = data[(data.price != 0) & (data.user_rating>4)] #filtering with and(&) logic \ndata_priced_liked # It works! ","6dd6cd40":"data_priced_liked.prime_genre.unique() ","9931c5ed":"dpl = data_priced_liked\ndpl_utilities = dpl[dpl.prime_genre == 'Utilities']\ndpl_Games = dpl[dpl.prime_genre == 'Games']\ndpl_Reference = dpl[dpl.prime_genre == 'Reference']\ndpl_Business = dpl[dpl.prime_genre == 'Business']\ndpl_Health_Fitness = dpl[dpl.prime_genre == 'Health & Fitness']\ndpl_Weather = dpl[dpl.prime_genre == 'Weather']\ndpl_Photo_Videos = dpl[dpl.prime_genre == 'Photo & Video']\ndpl_Education = dpl[dpl.prime_genre == 'Education']\ndpl_Music = dpl[dpl.prime_genre == 'Music']\ndpl_Medical = dpl[dpl.prime_genre == 'Medical']\ndpl_Navigation = dpl[dpl.prime_genre == 'Navigation']\ndpl_Lifestyle = dpl[dpl.prime_genre == 'Lifestyle']\ndpl_Shopping = dpl[dpl.prime_genre == 'Shopping']\ndpl_Productivity = dpl[dpl.prime_genre == 'Productivity']\ndpl_Finance = dpl[dpl.prime_genre == 'Finance']\ndpl_Entertainment = dpl[dpl.prime_genre == 'Entertainment']\ndpl_Book = dpl[dpl.prime_genre == 'Book']\ndpl_Food_Drink = dpl[dpl.prime_genre == 'Food & Drink']\ndpl_Social_Networking = dpl[dpl.prime_genre == 'Social Networking']\ndpl_Sports = dpl[dpl.prime_genre == 'Sports']\ndpl_News = dpl[dpl.prime_genre == 'News']\ndpl_Travel = dpl[dpl.prime_genre == 'Travel']\ndpl_Catalogs = dpl[dpl.prime_genre == 'Catalogs']\n","ed8b8fd8":"dpl_Games.price.plot(kind='line',color ='g',label = 'Games',linewidth=1,alpha = 0.5,grid = True,linestyle = '-')\ndpl_Education.price.plot(kind='line',color='r',label = 'Education')\ndpl_Sports.price.plot(kind='line',color='b',label = 'Sports')\nplt.legend()    \nplt.xlabel('x axis')              \nplt.ylabel('Price_USD')\nplt.title('Line Plot')           \nplt.show()","8652a3d3":"dpl_Games.plot(kind='scatter',x='user_rating_ver', y= 'rating_count_tot',color ='g')\nplt.title(\"rating count vs rating for games\")\ndpl_Education.plot(kind='scatter',x='user_rating_ver', y= 'rating_count_tot',color ='r')\nplt.title(\"rating count vs rating for Education\")\ndpl_Sports.plot(kind='scatter',x='user_rating_ver', y= 'rating_count_tot',color ='b')\nplt.title(\"rating count vs rating for Sports\")\n","2a537940":"dpl_Games.price.plot(kind = 'hist',bins = 10,figsize = (20,20),color ='r')\ndpl_Education.price.plot(kind = 'hist',bins = 10,figsize = (20,20),color ='g')\ndpl_Sports.price.plot(kind = 'hist',bins = 10,figsize = (20,20),color ='b')\nplt.show()","8a9b4f66":"for i,price in dpl_Games[['price']].iterrows():\n    print(i,\" : \",price,dpl_Games.track_name[i])","a21431ab":"lets try the scatter plot for Games, Education and Sports","eab11a1f":"Hello dear kagglers, I want to learn data anlysis and I am also interested in making mobile applications, \nLet's analysis this AppleStore data and try to get some meaningful things,\nbtw special thanks to Kaan Can for encourage me to write this, you are the best.\n\nLet's go","628fcf66":"To be continued...","f3e46183":"I want to plot correlations by using matplotlib library, so lets import it and visualise by seaborn lib.","7a007e6a":"user_rating and user_rating_ver is correlated a bit, it makes no sense for now but lets play with our data\nlets find priced apps ","dd98d9f3":"filtering to the deep, lets filter by genres and seperate from list I will use \"dpl\" for data_priced_liked but first we should find out what genre's are listed so I will use unique command for prime_genre","3a1dd545":"renaming the dataframes one by one is not efficent I have to find a way to do it with easier way but Food & Drink like names have space between the words later I will find the way for clearing data and do it with it for now lets continue","b976cfd6":"Gaming \/ Education \/ Sports lets make a line plot for understanding the prices of each genre's","a2e46c1c":"and now I want to look for user ratings bigger than 4","c1f46628":"what if I want to add both filter in the same code of line"}}