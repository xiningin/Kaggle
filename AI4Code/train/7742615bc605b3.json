{"cell_type":{"05102570":"code","70f3275d":"code","dff2b663":"code","b4d889f8":"code","5218b476":"code","9b6610b9":"code","5bbdb9ce":"code","e0368300":"code","dbc138f8":"code","6efe82aa":"code","835a4009":"code","ab04bb8f":"code","1fc73a2c":"code","2735e3e3":"code","6e1f0412":"code","0ac012c9":"code","f35741f1":"code","84119eb0":"code","fc19ced8":"code","beb9f108":"code","5eec39ca":"code","a0fb4627":"code","991e4fc1":"code","79b44d23":"code","0643f264":"code","bd96f0c3":"code","cdcabd4f":"code","96d25042":"code","9a9d4ad0":"code","c74b9806":"code","3ef53965":"code","bfb0364f":"code","b950b4b8":"code","a83bc188":"code","7aecadff":"code","8950b83d":"code","f50efa64":"code","752cddba":"code","4fbf68b6":"code","07810baa":"code","b6c00fd0":"code","fd47b5bc":"code","fae04a45":"code","d9fc14b8":"code","6cc5819a":"code","dff6d785":"code","417c0dba":"code","7aa4b498":"code","58b2032d":"code","09ba2b34":"code","f58c2e82":"code","45f67bf4":"code","9fd234f1":"code","bc0eed20":"code","344c2f29":"code","36d108b1":"code","0197d6c0":"code","c788e1a0":"code","3a63d872":"code","2109ddbd":"code","9318be4c":"code","e1741060":"code","7882fc23":"code","797b9aaf":"code","8e75e0ea":"code","3645656b":"markdown","4558413d":"markdown","595c7687":"markdown","e227f151":"markdown"},"source":{"05102570":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","70f3275d":"numpy_list = np.array(os.listdir(\"..\/input\"))\nnumpy_list","dff2b663":"my_list = np.arange(10)\nmy_list","b4d889f8":"my_list2 = np.arange(1,11)\nmy_list2","5218b476":"my_list3 = np.arange(1,11,2)\nmy_list3","9b6610b9":"lin_arr = np.linspace(1, 3, 15)\nlin_arr","5bbdb9ce":"#my_series = pd.Series(numpy_list,lin_arr)\nindex_list = np.arange(1,3)\nmy_series = pd.Series(numpy_list,index_list)     # even if you don't pass index_list, pandas will create index starting from 0\nmy_series\n","e0368300":"my_series[1]","dbc138f8":"my_series[3] = \"change_series_value\"\nmy_series","6efe82aa":"my_dataframe = pd.DataFrame(numpy_list,index_list)     # even if you don't pass index_list, pandas will create index starting from 0\nmy_dataframe  # each column here represents a panda Series, Hence, it is safe to say a DataFrame is a collection of Series sharing the same index.\n","835a4009":"my_dataframe[0][1]      #[column][row]","ab04bb8f":"#csv = pd.read_csv(my_dataframe[0][1])\ntype(my_dataframe[0])","1fc73a2c":"type(my_dataframe[0][1])","2735e3e3":"new_dataframe = pd.DataFrame(['lucknow','bhopal','mumbai','hyd','bangalore'],['UP','MP','Maharashtra','Telangana','Karnataka'],['capital'])  \nnew_dataframe","6e1f0412":"new_series = {'Capital' : pd.Series(['lucknow','bhopal','mumbai','hyd','bangalore']\n                                    ,['UP','MP','Maharashtra','Telangana','Karnataka'])}\ntype(new_series)","0ac012c9":"new_dataframe2 = pd.DataFrame(new_series)  \nnew_dataframe2","f35741f1":"new_dataframe2['country'] = pd.Series(['India','India','India','India'],['UP','MP','Maharashtra','Telangana'])\npd.DataFrame(new_dataframe2)           #adding new column to the dataframe","84119eb0":"new_dataframe2.hist","fc19ced8":"new_dataframe2['population'] = pd.Series([199812341,72626809,112374333,35003674,61095297],['UP','MP','Maharashtra','Telangana','Karnataka'])\npd.DataFrame(new_dataframe2)","beb9f108":"new_dataframe2.reset_index(inplace = True)              #reset_index deosn't permanently reset the index. For permanently, use reset_index(inplace=true)","5eec39ca":"new_dataframe2","a0fb4627":"\nnew_dataframe2.set_index('index')        #this way you can set any column to work as index\nnew_dataframe2.columns","991e4fc1":"new_dataframe2.columns[0]","79b44d23":"new_dataframe2.reset_index(inplace=True)\nnew_dataframe2.columns = ['level_0','State','Capital','Country','Population']\nnew_dataframe2","0643f264":"new_dataframe2[\"State\"].value_counts()      ","bd96f0c3":"new_dataframe2.describe()","cdcabd4f":"#help.describe\nnew_dataframe2.hist()\n#plt.show()","96d25042":"new_dataframe2['NoOfLoksabhaConstituency'] = pd.Series([80,29,48,17,28],[0,1,2,3,4])\npd.DataFrame(new_dataframe2)      ","9a9d4ad0":"new_dataframe2.hist()","c74b9806":"#new_dataframe2.hist(\"Population\")    wrong syntax\nnew_dataframe2[\"Population\"].hist()","3ef53965":"new_dataframe2.corr()","bfb0364f":"new_dataframe2['NoOfVidhansabhaConstituency'] = pd.Series([403,230,288,119,224])\nnew_dataframe2","b950b4b8":"new_dataframe2.hist()","a83bc188":"new_dataframe2.corr()","7aecadff":"new_dataframe2['Country'].dropna(inplace = True)","8950b83d":"new_dataframe2","f50efa64":"new_dataframe2.loc[4]","752cddba":"new_dataframe2.iloc[4]        #can get using index too","4fbf68b6":"#new_dataframe2.loc[5] = pd.Series()      #to add rows\nfor i in range(8):\n    if i<5:\n        continue\n    new_dataframe2.loc[i] = pd.Series()    \nnew_dataframe2","07810baa":"new_dataframe2.loc[1].loc['State']","b6c00fd0":"new_dataframe2.loc[1].loc['State']","fd47b5bc":"new_dataframe2.groupby('Country').mean()     #groupby group rows based on the 'Country' column and call the aggregate function .mean()on it","fae04a45":"new_dataframe2.groupby('Country').count()      #Using the count() method, we can get the number of times an item occurs in a DataFrame.","d9fc14b8":"new_dataframe2.groupby('Country').describe() ","6cc5819a":"new_dataframe2.plot()","dff6d785":"new_dataframe2.plot(kind='scatter', x=6,y='Population')","417c0dba":"new_dataframe2.corr()","7aa4b498":"new_dataframe2.plot.area(alpha=0.1)","58b2032d":"new_dataframe2['Population'].plot(kind='kde')","09ba2b34":"new_dataframe2['NoOfLoksabhaConstituency'].plot(kind='kde')","f58c2e82":"new_dataframe2['NoOfVidhansabhaConstituency'].plot(kind='kde')","45f67bf4":"new_dataframe2","9fd234f1":"new_dataframe2['areaOfStates'] = pd.Series([243290,308350,307713,112077,191791])\nnew_dataframe2","bc0eed20":"new_dataframe2.corr()","344c2f29":"new_dataframe2.loc[0].loc['Population']","36d108b1":"areaPlusPopulationList = np.arange(1,7)\nfor i in range(6):\n    areaPlusPopulationSeries = pd.Series(areaPlusPopulationList)\n    areaPlusPopulationSeries[i] = new_dataframe2.loc[i].loc['Population'] + new_dataframe2.loc[i].loc['areaOfStates']\nnew_dataframe2['areaPlusPopulation'] = pd.Series(areaPlusPopulationSeries)\n\nnew_dataframe2","0197d6c0":"new_dataframe2.corr()","c788e1a0":"new_dataframe2","3a63d872":"seriesOfState = pd.Series(['Andhra Pradesh','Arunachal Pradesh','Assam','Bihar','Chhattisgarh','Goa','Gujarat','Haryana',\n                          'Himachal Pradesh','Jammu and Kashmir','Jharkhand','Karnataka','Kerala','Madhya Pradesh','Maharashtra',\n                          'Manipur','Meghalaya','Mizoram','Nagaland','Odisha','Punjab','Rajasthan','Sikkim','Tamil Nadu',\n                           'Telangana','Tripura','Uttar Pradesh','Uttarakhand','West Bengal','NCT of Delhi','Puducherry'])\nseriesOfNoOfLoksabhaConstituency = pd.Series([25,2,14,40,11,2,26,10,4,6,14,28,20,29,48,2,2,1,1,21,13,25,1,39,17,2,80,5,42,\n                                        7,1])\nseriesOfNoOfVidhansabhaConstituency = pd.Series([175,60,126,243,90,40,182,90,68,87,81,224,140,230,288,60,60,40,60,\n                                                147,117,200,32,234,119,60,403,70,294,70,30])\nseriesOfAreaOfState = pd.Series([160205,83743,78438,94165,135191,3702,196024,44212,55673,101387,79714,191791,38863,308350,\n                                307713,22327,22429,21081,16579,155707,50362,342238,7096,130058,112077,10486,243290,53483,\n                                88752,1483,492])\nseriesOfPopulationOfState = pd.Series([49577103,1383727,31205576,104099452,25545198,1458545,60439692,25351462,6864602,\n                                      12541302,32988134,61095297,33406061,72626809,112374333,2570390,2966889,1097206,1978502,\n                                      41974218,27743338,68548437,610577,72147030,35003674,3673917,199812341,10086292,91276115,\n                                      16787941,1247953])\n","2109ddbd":"for i in range(31):\n    new_dataframe2.loc[i] = pd.Series()    ","9318be4c":"new_dataframe2['State'] = seriesOfState\nnew_dataframe2['Population'] = seriesOfPopulationOfState\nnew_dataframe2['NoOfLoksabhaConstituency'] = seriesOfNoOfLoksabhaConstituency\nnew_dataframe2['NoOfVidhansabhaConstituency'] = seriesOfNoOfVidhansabhaConstituency\nnew_dataframe2['areaOfStates'] = seriesOfAreaOfState","e1741060":"new_dataframe2","7882fc23":"areaPlusPopulationList = np.arange(0,31)\nfor i in range(31):\n    areaPlusPopulationSeries = pd.Series(areaPlusPopulationList)\n    areaPlusPopulationSeries[i] = new_dataframe2.loc[i].loc['Population'] + new_dataframe2.loc[i].loc['areaOfStates']\nnew_dataframe2['areaPlusPopulation'] = pd.Series(areaPlusPopulationSeries)","797b9aaf":"new_dataframe2","8e75e0ea":"new_dataframe2.corr()","3645656b":"The .describe() method is used to get an overview of what a DataFrame looks like. It gives us a summary of each of the DataFrame index.","4558413d":"Now this data concludes what we had said earlier, **NoOfLoksabhaConstituency** is best correlated with **population** while **NoOfVidhansabhaConstituency** is best correlated with **areaPlusPopulation** if we take consider only **population** and **areaPlusPopulation** but here is another thing, **NoOfVidhansabhaConstituency** is ever more correlated with **NoOfLoksabhaConstituency**, it means as no of **loksabha seats** increased in a state, **vidhansabha seats** increases too. ","595c7687":"Very imp stuff comes in front of us here(though this may be the case of Overfitting due to less data), when we see the correlation of  **NoOfLoksabhaConstituency**, we find that it's best correlated with population but when it comes to **NoOfVidhansabhaConstituency**, then it's best correlated with **areaPlusPopulation** which is area and population combined (Although the difference is very minimal). ","e227f151":"Let's add more data to analyse this further."}}