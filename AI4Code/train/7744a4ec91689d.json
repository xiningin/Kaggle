{"cell_type":{"4a0cbf39":"code","b3229e43":"code","eae60179":"code","2954b56d":"code","0e7cf6d8":"code","269cb4ba":"code","4284286a":"code","dda71de8":"code","c732f23f":"code","718c5776":"code","86339ed8":"code","d928e0b7":"code","a5cfadf3":"code","a7450158":"code","da259840":"code","f887ce76":"code","c490cacf":"code","9697306b":"markdown","0c48ec8e":"markdown","8371b1ab":"markdown","2ed1e36e":"markdown","bd69daf3":"markdown","00e0f64b":"markdown","ee33eb26":"markdown","bcf5a50c":"markdown","622f1e3e":"markdown","7384e574":"markdown","28adc61b":"markdown","2e012af1":"markdown","c44575b4":"markdown"},"source":{"4a0cbf39":"import numpy as np\n\nimport pandas as pd \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b3229e43":"## Function to reduce the DF size\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","eae60179":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n         'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","2954b56d":"df = pd.read_csv('..\/input\/microsoft-malware-prediction\/train.csv', dtype=dtypes)\n","0e7cf6d8":"# Check for Missing  data\ntotal_na = df.isnull().sum()\nprint(\"NaN values in Transaction database\",total_na)\n\n# Columns datatypes\nstring_columns = df.select_dtypes('category').columns.tolist()\nprint(\"Object Columns\",string_columns)\n\nnumeric_columns = df.select_dtypes(include=np.number).columns.tolist()\nprint(\"Numerical columns \",numeric_columns)","269cb4ba":"# Memory Reduction\ndf = reduce_mem_usage(df, verbose=True)\nprint(df.head(10))","4284286a":"for col in total_na.index:\n    \n    if total_na[col] > int(0.95*len(df)):\n        \n        df.drop(columns=col,inplace=True)\n        print(col)\n        \n    else:\n        pass","dda71de8":"Bar_Pred = sns.countplot(x='HasDetections',data=df)\nplt.show()\n\n# Distributions quite equiatable\n\ndel Bar_Pred","c732f23f":"def get_top_features_for_category(col,label):\n    \n    temp_df1 = df[df['HasDetections']==label]\n    temp_df1[col] = temp_df1[col].astype('str')\n    \n    temp_df2 = df[[col,'HasDetections']]\n    temp_df2[col] = temp_df2[col].astype('str')\n    \n    index_list = temp_df1[col].value_counts(ascending=False)[:5].index.to_list()\n    \n    temp_df2.loc[temp_df2[(~temp_df2[col].isin(index_list))].index, col] = \"Others\"\n    \n    tmp = pd.crosstab(temp_df2[col], temp_df2['HasDetections'])\n    \n    tmp['Total'] = tmp[0] + tmp[1]\n    tmp.drop(columns=[0,1],inplace=True)\n    \n    sum_column = tmp['Total'].sum()\n    \n    tmp['Total'] = tmp['Total'].apply(lambda x:(x\/sum_column)*100)\n    tmp = tmp.reset_index()\n   \n    \n    del temp_df1\n    \n    return temp_df2,tmp\n    \n    ","718c5776":"columns = ['MachineIdentifier','ProductName', 'EngineVersion', 'AppVersion', 'AvSigVersion','Platform']\n\nfor column in columns:\n    \n    bar_df,line_df = get_top_features_for_category(column,1)\n    \n    plt.figure(figsize=(30,10))\n    \n    Bar_Plot = sns.countplot(x=column,hue='HasDetections',data=bar_df,order=line_df[column].tolist())\n    Line_Plot = Bar_Plot.twinx()\n    Line_Plot = sns.pointplot(x=column, y='Total', data=line_df, color='black', order=line_df[column].tolist(), legend=False)\n    \n    Bar_Plot.set_title(\"Frequeny of malware for: \" + str(column), fontsize=19)\n    \n    Bar_Plot.set_xticklabels(Bar_Plot.get_xticklabels(),rotation=45)\n    Bar_Plot.set_xlabel(column, fontsize=19)\n    Bar_Plot.set_ylabel(\"Count\", fontsize=17)\n    Line_Plot.set_ylabel(\"% of Total Count\", fontsize=17)\n    \n    plt.show()\n    \n    del Bar_Plot,Line_Plot, bar_df,line_df\n    \ndel columns","86339ed8":"columns = ['Processor', 'OsVer', 'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition', 'SmartScreen']\n\nfor column in columns:\n    \n    bar_df,line_df = get_top_features_for_category(column,1)\n    \n    plt.figure(figsize=(30,10))\n    \n    Bar_Plot = sns.countplot(x=column,hue='HasDetections',data=bar_df,order=line_df[column].tolist())\n    Line_Plot = Bar_Plot.twinx()\n    Line_Plot = sns.pointplot(x=column, y='Total', data=line_df, color='black', order=line_df[column].tolist(), legend=False)\n    \n    Bar_Plot.set_title(\"Frequeny of malware for: \" + str(column), fontsize=19)\n    \n    Bar_Plot.set_xticklabels(Bar_Plot.get_xticklabels(),rotation=45)\n    Bar_Plot.set_xlabel(column, fontsize=19)\n    Bar_Plot.set_ylabel(\"Count\", fontsize=17)\n    Line_Plot.set_ylabel(\"% of Total Count\", fontsize=17)\n    \n    plt.show()\n    \n    del Bar_Plot,Line_Plot, bar_df,line_df\n    \ndel columns","d928e0b7":"columns = ['Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_PrimaryDiskTypeName', \n           'Census_ChassisTypeName', 'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_OSVersion', \n           'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSEdition', 'Census_OSSkuName', 'Census_OSInstallTypeName', \n           'Census_OSWUAutoUpdateOptionsName', 'Census_GenuineStateName', 'Census_ActivationChannel', 'Census_FlightRing']\n\nfor column in columns:\n    \n    bar_df,line_df = get_top_features_for_category(column,1)\n    \n    plt.figure(figsize=(30,10))\n    \n    Bar_Plot = sns.countplot(x=column,hue='HasDetections',data=bar_df,order=line_df[column].tolist())\n    Line_Plot = Bar_Plot.twinx()\n    Line_Plot = sns.pointplot(x=column, y='Total', data=line_df, color='black', order=line_df[column].tolist(), legend=False)\n    \n    Bar_Plot.set_title(\"Frequeny of malware for: \" + str(column), fontsize=19)\n    \n    Bar_Plot.set_xticklabels(Bar_Plot.get_xticklabels(),rotation=45)\n    Bar_Plot.set_xlabel(column, fontsize=19)\n    Bar_Plot.set_ylabel(\"Count\", fontsize=17)\n    Line_Plot.set_ylabel(\"% of Total Count\", fontsize=17)\n    \n    plt.show()\n    \n    del Bar_Plot,Line_Plot, bar_df,line_df\n    \n    \n\n    \ndel columns\n\n","a5cfadf3":"Binary_Features = []\nNumerical_Features = []\n\nfor col in numeric_columns:\n    \n    # Remove features due to high number of missing values\n    if not col in ['DefaultBrowsersIdentifier','PuaMode','Census_ProcessorClass']:\n        \n        \n        \n        if df[col].nunique() == 2:\n            Binary_Features.append(col)\n            \n        else:\n            Numerical_Features.append(col)\n            \n","a7450158":"fig, axs = plt.subplots(5, 4, sharex=True, sharey=True, figsize=(30,30))\n\ncount_row = 0\ncount_columns = 0\nfor column in Binary_Features:    \n    \n    \n    Bar_Plot = sns.countplot(x=column,hue='HasDetections',data=df,ax = axs[count_row][count_columns]).set_title(\"Frequeny of malware for: \" + str(column))\n        \n   \n    count_columns +=1\n    \n    if count_columns == 4:\n        count_row+=1\n        count_columns=0\n    \n   \n    \nplt.show()\n\ndel Bar_Plot,count_columns,count_row,Binary_Features,numeric_columns","da259840":"print(Numerical_Features)","f887ce76":"for feature in Numerical_Features:\n    \n    print(feature)\n    print(np.var(df[feature]))","c490cacf":"print(df[feature])","9697306b":"Interesting observations\n\n```\n1. Most systems have an antivirus system installed (isProtected). But they also have a slightly higher malware count compared to systems without antivirus installed.\n2. Low chance of malware when microsoft store apps are only installed. (SMode)\n3. Gaming device seems to a higher count of malware compared to non gaming systems\n\n```\n","0c48ec8e":"- Delete rows with a higher number of missing values","8371b1ab":"## Numerical features","2ed1e36e":"# Visualizations","bd69daf3":"## EDA of categorical columns","00e0f64b":"- This notebook mainly deals with the exploratory data analysis of the Microsoft Malware set. \n- Of particular interest are features which have a low frequency count but are highly suspectible to malware\n","ee33eb26":"- Inference\n\n```\n1. With respect to the product name win8defender has a higher malware but also many users too use this software\n2. Engine version 11.15100.1 has a high malware count despite having a share of only 40 percent in the data\n3. Windows 10 is the most commonly used. With respect to windows8 having a low share among the total data similar to windows 7, it has a high malware count. This is an interesting observation.\n```","bcf5a50c":"- Bar plots for categorical features","622f1e3e":"Features with significant malware count\n\n```\n1. Census_OSBranch: rs4_release\n2. Census_OSInstallTypeName: UUPUPGRADE \n3. Census_OSWUAutoUpdateOptionsName: FullAuto (Fully automatic settings for update could lead to a higher chance of malware)\n4. High incidence of malware among desktop and AllInOne among Cenus_MDC2FormFactor\n```","7384e574":"- Inference\n\n```\n1. OsVer 6.3.0.0 has a higher malware despite sharing only a small percentage of the data set\n2. Processor x64 has a high malware count \n2. OsPlatformSubRelease rs4 has a high malware count\n3. Systems without SmartScreen seemed to very susciptible to malware. Also enabling only a warn feature seemed to make system suspectible\n```","28adc61b":"- To be updated. Next update will mainly deal with the visual analysis of the interaction between two features.\n- Let me know if the visualisation can be further improved or if there are any mistakes\n","2e012af1":"- Check distribution of classes","c44575b4":"# Libraries"}}