{"cell_type":{"282a9bed":"code","21d1ddbd":"code","c20c515f":"code","9c551160":"code","13a6f524":"code","01d98552":"code","f95a9270":"code","1f9fae6e":"code","188e6956":"code","ba0b4b3e":"code","407e40ef":"code","f6d14905":"code","7d391f85":"code","061db111":"code","82462b16":"code","28a3fe13":"code","fc5d9e90":"code","a2510d07":"code","43b7ce78":"code","b67e0c41":"code","dea84c5b":"code","8527fb50":"code","5ae72af9":"code","9b57d59d":"code","ce8eb3c0":"code","48bc4240":"code","7024dfe4":"code","801c4645":"code","6f47c8c6":"code","dc06362e":"code","0fde054c":"code","026943c6":"code","68a81241":"markdown","6aea49f9":"markdown","e5d1ad7c":"markdown","90b8e9e3":"markdown","b1f6b307":"markdown","c34644fb":"markdown","61e349f7":"markdown","9dad00cf":"markdown"},"source":{"282a9bed":"#importing revelant libraries\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport datetime\nfrom time import strftime\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","21d1ddbd":"#importing the csv file\n\nhealth_data = pd.read_csv(\"..\/input\/noshowappointments\/KaggleV2-May-2016.csv\")","c20c515f":"health_data","9c551160":"health_data.shape","13a6f524":"health_data.info()","01d98552":"#modifying the date and time into standard format\nhealth_data['ScheduledDay'] = pd.to_datetime(health_data['ScheduledDay']).dt.date.astype('datetime64[ns]')\nhealth_data['AppointmentDay'] = pd.to_datetime(health_data['AppointmentDay']).dt.date.astype('datetime64[ns]')","f95a9270":"health_data.head(5)","1f9fae6e":"health_data['sch_weekday'] = health_data['ScheduledDay'].dt.dayofweek\nhealth_data['app_weekday'] = health_data['AppointmentDay'].dt.dayofweek","188e6956":"health_data['sch_weekday'].value_counts()","ba0b4b3e":"health_data['app_weekday'].value_counts()","407e40ef":"health_data.columns","f6d14905":"#changing the name of some cloumns to correct way\n\nhealth_data= health_data.rename(columns={'Hipertension': 'Hypertension', 'Handcap': 'Handicap', 'SMS_received': 'SMSReceived', 'No-show': 'NoShow'})","7d391f85":"health_data.drop(['PatientId', 'AppointmentID', 'Neighbourhood'], axis=1, inplace=True)","061db111":"health_data.columns","82462b16":"health_data.describe()","28a3fe13":"health_data['NoShow'].value_counts().plot(kind='barh', figsize=(8, 6))\nplt.xlabel(\"Count\", labelpad=20)\nplt.ylabel(\"Target Variable\", labelpad=10)\nplt.title(\"Count of TARGET Variable per category\");","fc5d9e90":"# calculating the % of appointments or not \n100*health_data['NoShow'].value_counts()\/len(health_data['NoShow'])","a2510d07":"# Group the tenure in bins of 12 months\nlabels = [\"{0} - {1}\".format(i, i + 20) for i in range(1, 118, 20)]\n\nhealth_data['Age_group'] = pd.cut(health_data.Age, range(1, 130, 20), right=False, labels=labels)","43b7ce78":"health_data.drop(['Age'], axis=1, inplace=True)","b67e0c41":"list(health_data.columns)","dea84c5b":"#having a loook into the values of count of each columns and there count in respect to NoShow column\nfor i, predictor in enumerate(health_data.drop(columns=['NoShow'])):\n    print('-'*10,predictor,'-'*10)\n    print(health_data[predictor].value_counts())    \n    plt.figure(i)\n    sns.countplot(data=health_data, x=predictor, hue='NoShow')","8527fb50":"health_data['NoShow'] = np.where(health_data.NoShow == 'Yes',1,0)","5ae72af9":"health_data.NoShow.value_counts()","9b57d59d":"health_data_dummies = pd.get_dummies(health_data)\nhealth_data_dummies.head()","ce8eb3c0":"plt.figure(figsize=(20,8))\nhealth_data_dummies.corr()['NoShow'].sort_values(ascending = False).plot(kind='bar')","48bc4240":"plt.figure(figsize=(12,12))\nsns.heatmap(health_data_dummies.corr(), cmap=\"Paired\")","7024dfe4":"new_df1_target0=health_data.loc[health_data[\"NoShow\"]==0]\nnew_df1_target1=health_data.loc[health_data[\"NoShow\"]==1]","801c4645":"def uniplot(df,col,title,hue =None):\n    \n    sns.set_style('whitegrid')\n    sns.set_context('talk')\n    plt.rcParams[\"axes.labelsize\"] = 20\n    plt.rcParams['axes.titlesize'] = 22\n    plt.rcParams['axes.titlepad'] = 30\n    \n    \n    temp = pd.Series(data = hue)\n    fig, ax = plt.subplots()\n    width = len(df[col].unique()) + 7 + 4*len(temp.unique())\n    fig.set_size_inches(width , 8)\n    plt.xticks(rotation=45)\n    plt.yscale('log')\n    plt.title(title)\n    ax = sns.countplot(data = df, x= col, order=df[col].value_counts().index,hue = hue,palette='bright') \n        \n    plt.show()","6f47c8c6":"uniplot(new_df1_target1,col='Hypertension',title='Distribution of Gender for NoShow Customers',hue='Gender')","dc06362e":"uniplot(new_df1_target0,col='Hypertension',title='Distribution of Gender for NoShow Customers',hue='Gender')","0fde054c":"uniplot(new_df1_target1,col='Age_group',title='Distribution of Age for NoShow Customers',hue='Gender')","026943c6":"uniplot(new_df1_target0,col='Age_group',title='Distribution of Age for NoShow Customers',hue='Gender')","68a81241":"# **Analyse the data**","6aea49f9":"# **Process the data**","e5d1ad7c":"# **Prepare the data**","90b8e9e3":"# Introduction\n\n**A person makes a doctor appointment, receives all the instructions and no-show. Who to blame?**\n\n**This dataset collects information from 100k medical appointments in Brazil and is focused on the** **question of whether or not patients show up for their appointment. A number of characteristics** **about the patient are included in each row.**\n","b1f6b307":"Build a corelation of all predictors with 'NoShow'","c34644fb":"General Guidelines:\n* For features with less missing values- can use regression to predict the missing values or fill with the mean of the values present, depending on the feature.\n* For features with very high number of missing values- it is better to drop those columns as they give very less insight on analysis.\n* As there's no thumb rule on what criteria do we delete the columns with high number of missing values, but generally you can delete the columns, if you have more than 30-40% of missing values.","61e349f7":"# **Share**\n* Female patients have taken more appointments than male patients.\n* Ratio of Nohow and Show is almost equal for age group except Age 0 and Age 1 with 80% show rate for each age group\n* Each Neighbourhood have almost 80% show rate\n* There are 99666 patients without Scholarship and out of them around 80% have come for the visit and out of the 21801 patients   with Scholarship around 75% of them have come for the visit.\n* There are around 88,726 patients without Hypertension and out of them around 78% have come for the visit and Out of the 21801   patients with Hypertension around 85% of them have come for the visit.\n* There are around 102,584 patients without Diabetes and out of them around 80% have come for the visit and Out of the 7,943     patients with Diabetes around 83% of them have come for the visit.\n* There are around 75,045 patients who have not received SMS and out of them around 84% have come for the visit and out of the   35,482 patients who have received SMS around 72% of them have come for the visit.\n* There is no appointments on sunday and on saturday appointments are very less in comparision to other week days","9dad00cf":"Missing Data - Initial Intuition\nHere, we don't have any missing data."}}