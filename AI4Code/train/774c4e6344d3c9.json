{"cell_type":{"d33bb0f9":"code","6f63cfd1":"code","68cabd44":"code","ab7915b3":"code","bb96d0f3":"code","b27d4aee":"code","e196ec90":"code","fae7d1d7":"code","d8ceb436":"markdown"},"source":{"d33bb0f9":"#This is a very simplified notebook to understand how to code Linear Regression model.\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","6f63cfd1":"data=pd.read_csv(\"..\/input\/student-performance-data-set\/student-por.csv\") #Read the file through pandas library & if you are running the code in your local use 'Sep=;' since its comma separated file\n\n\ndata.head()  #To display the top 5 rows & columns from the dataframe","68cabd44":"data.shape #Check the shape of the dataframe","ab7915b3":"data.isnull().sum() #Check if you have any null values in your dataset","bb96d0f3":"#We have 33 cols or Attributes & we are not going to use all of them but a few which are actually useful for our prediction\n\ndata=data[['absences','failures','G1','G2','G3','studytime']] #Attributes of our use , You can use different attributes of interest & play around\n\n#Now we are going to create 2 arrays, One which is going to store our predictors & one to store our output variable\n#in this case G3(GRADE FOR SEM3 ) is our output variable or label\n\npredict='G3'                    # We just stored our output variable in a new variable predict\nx=np.array(data.drop(['G3'],1)) #We want to drop G3 since its our output variable & 'axis=1'simply means drop the entire column\ny=np.array(data[predict])       #storing our output variable in y\n","b27d4aee":"#now we are going to split our data into 4 arrays. We will call the train_test_split from sklearn model & store 33% of our data in test set\n \nx_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.33) ","e196ec90":"linear=LinearRegression().fit(x_train, y_train)  #Fit our model on x_train & y_train\naccuracy=linear.score(x_test,y_test)  \nprint(accuracy)","fae7d1d7":"predictions=linear.predict(x_test)   #Call the predict function on x_test\n\nfor i in range(len(predictions)):\n    print (predictions[i],x_test[i],y_test[i])  #Printing predictions , original x_test values,& original y_test values","d8ceb436":"we can read the above output as:\n\nWhat we predicted [marks in G1 ,marks in G2, absent, failure , studytime] Actual score"}}