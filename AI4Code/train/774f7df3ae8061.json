{"cell_type":{"7deed862":"code","98e519be":"code","2ffab72a":"code","7da6b98c":"code","1784d5f8":"code","24d68a39":"code","55dc1f7d":"code","d1e37a65":"code","61799da5":"code","0f4e1435":"code","933915be":"code","357dd70d":"code","4a600852":"code","51ee5af6":"code","2c605487":"code","2af8d06e":"code","a5654a9b":"code","c8ea511c":"code","6b09c514":"code","5851adff":"code","7c372578":"code","46baea4b":"code","4c0c62fa":"code","9aab3b3b":"code","c268dbd9":"code","aa2f2438":"code","9d62dbdd":"code","53aa34a9":"code","45b7852b":"code","341f0e66":"code","9e6f1a1b":"code","cdf83c0b":"code","f79be77f":"code","c6053716":"code","c69e9fd2":"code","fc290941":"code","23b1af2c":"code","90114c50":"code","b3665fe1":"code","70c05178":"code","9b392298":"code","353a4408":"code","2450dd32":"code","206b15b8":"code","1256aca8":"code","7ad3d9ab":"code","21e52e10":"code","7a4cf448":"code","bfd86f07":"code","9e50e7c1":"code","fd605116":"code","9932beb6":"code","13723d7a":"code","5bcfab9e":"code","3f5f4a3f":"code","1b24d714":"code","1b7e36b5":"code","70dcb39e":"code","486cc85c":"code","7886a7fe":"code","7e4a64fb":"code","ee39f422":"code","2e2b636c":"code","ee30aebf":"code","3f703b77":"code","b2d9b133":"code","86d41ae6":"code","1feb3fb5":"code","704b070e":"code","45e987cb":"code","b5340a26":"code","b75f9657":"code","985e2256":"code","aa8d5a6b":"code","8ad8f16b":"code","9d4fc453":"markdown","80269f59":"markdown","f293fcbd":"markdown","70c259b8":"markdown","9efc8590":"markdown","8afd28a1":"markdown","217b91a2":"markdown","f6d76578":"markdown","33b27551":"markdown","22375b76":"markdown","b624f366":"markdown","9e24cb17":"markdown","7c3ca9dd":"markdown","7c990ed5":"markdown","65716345":"markdown","1a118991":"markdown","410d0963":"markdown","d940027e":"markdown","2cabe236":"markdown","0725dc08":"markdown","dcbad05c":"markdown","07b2ecc3":"markdown","89d32efd":"markdown","e10eb6c2":"markdown","65078cc0":"markdown","b2d8d174":"markdown","8f6fe331":"markdown","d3d6bba2":"markdown","72fd1a34":"markdown","e472711c":"markdown","8ac6e887":"markdown","5589cb54":"markdown"},"source":{"7deed862":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98e519be":"file = open('\/kaggle\/input\/hands-on\/files\/adult.data', 'r')","2ffab72a":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","7da6b98c":"print (data[1:2])","1784d5f8":"%matplotlib inline\nimport pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","24d68a39":"df.tail() ","55dc1f7d":"df.shape","d1e37a65":"counts = df.groupby('country').size()\n\nprint (counts) ","61799da5":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","0f4e1435":"counts.sort_values(ascending=False)","933915be":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","357dd70d":"fm =df[(df.sex == 'Female')]\nfm.shape\nfm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","4a600852":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","51ee5af6":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","2c605487":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","2af8d06e":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","a5654a9b":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","c8ea511c":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","6b09c514":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","5851adff":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","7c372578":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(histtype='stepfilled', bins=20)","46baea4b":"fm_age=fm['age']\nfm_age.hist(histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","4c0c62fa":"import seaborn as sns\nfm_age.hist(histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(histtype='stepfilled', alpha=.5, color=sns.desaturate(\"green\", .90), bins=20)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","9aab3b3b":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","c268dbd9":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","aa2f2438":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()\n","9d62dbdd":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=2.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","53aa34a9":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=1.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","45b7852b":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","341f0e66":"ml_age.hist(histtype='step', cumulative=True,  linewidth=2.5, bins=20)\nfm_age.hist(histtype='step', cumulative=True,  linewidth=2.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","9e6f1a1b":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","cdf83c0b":"df['age'].median()","f79be77f":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","c6053716":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","c69e9fd2":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","fc290941":"ml1_age=ml1['age']\nfm1_age=fm1['age']","23b1af2c":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","90114c50":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","b3665fe1":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","70c05178":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","9b392298":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","353a4408":"import numpy as np\n\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","2450dd32":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","206b15b8":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","1256aca8":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","7ad3d9ab":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","21e52e10":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","7a4cf448":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","bfd86f07":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","9e50e7c1":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","fd605116":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","9932beb6":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","13723d7a":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","5bcfab9e":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","3f5f4a3f":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","1b24d714":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","1b7e36b5":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, normed=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","70dcb39e":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","486cc85c":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","7886a7fe":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, normed=True)\nplt.plot(xgrid, density(xgrid), 'r-')","7e4a64fb":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, normed=True)","ee39f422":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, normed=True)\nplt.plot(xgrid, density(xgrid), 'r-')","2e2b636c":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,normed='True')","ee30aebf":"print ('The empirical mean of the sample is ', x.mean())","3f703b77":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","b2d9b133":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","86d41ae6":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","1feb3fb5":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","704b070e":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","45e987cb":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))","b5340a26":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","b75f9657":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","985e2256":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","aa8d5a6b":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","8ad8f16b":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","9d4fc453":"# 1- What is the obtained result? What did you ask for in the previous command? Explain.\n\nThe previous command allows to retreive the data from the data file by splitting each line and put it in an array which named Data. we added also an implicit line in 16th position and we changed the type of some attributes of type digit to integer type.\n\nThe command print(data[1:2]), shows the second line from the the data set.","80269f59":"# 10. Describe an explain the result.\n\nThe first result displays the median value of the age variable for the men and women data samples.\nThe second result displays the median value for the men and women data samples with an income equal to or greater than 50K. \nThe last one displays the median value for the working hours per week for men and women data sets.\n\nFor men and women with high income, the average age (44.6 ; 42.1) and the median age (40;41) are different. This can give us an idea about the assymmetry of the distributions of data sets.\n","f293fcbd":"# The age of the most represented people is 36 years old.","70c259b8":"# 8. Describe an explain the result.\n\nHere we wanted to know the average age of men and women : it is around 40 for men and 37 for women.\nIn terms of high income, the mean age of men is 44.6 and the mean age of women is 42.12.\n\nIf we consider that the mean is significant for this sample set, women used to be promoted a little bit earlier than men (after 2.5 years).","9efc8590":"# 11. Show the graphics and an explain the result.\n\nThe superposition of the two histograms shows that the both data sets have the same distribution and the amount of each bin of the men sample is greater than the amount of the women sample. This information indicates that there are many more men than women in this case.","8afd28a1":"# 11. Show the graphics and an explain the result.\n\nThe histogram shows that female sample set has not a symmetric distribution.","217b91a2":"# 2. Describe and explain the result\n\nBy this commande we have transfomed the data set to a dataframe structure with the name of columns (variables). The main objective of this transformation is to facilitate the manipulation of data.\nIn addition, the use of head() method without a number inside allows showing the five first rows of the data frame.","f6d76578":"# 19. Show the graphics and an explain the result.\n\nThe superposition of the cumulative distribution of the men and women samples shows that there are many more men than women in this situation. In addition, both samples (men and women) have the same shape.\n","33b27551":"# 3. Describe and explain the result. Compare with the previous one.\n\nThe use of tail() method without a number inside leads to display the last five rows of the data set compared to head() method which displays the first five rows of the data sample.","22375b76":"# 4. Describe and explain the result.\n\nThe commande shape allows to find the number of lines and columns contained in the data set. In our case, the data set contains 32561 lines and 15 columns.","b624f366":"# 10. Show the graphics and an explain the result.\n\nThe histogram shows that the data is asymmetric in terms of age. the most represented individuals have an age between 20 and 50. Individuals whose age is greater than 60 are not very well represented.","9e24cb17":"# 15. Show the graphics and an explain the result.\n\nThe frequencies of the histogram of the women sample are normalized by dividing by n the number of sample. Thus, the sum of the probability of all bins will be equal to 1. Even if we use the Probability Mass Function, the distribution still have an asymetric shape.\n\n\n","7c3ca9dd":"# 4.2 Explanatory Data Analysis","7c990ed5":"We extracted two data sets from the main data set : one for the women and the other for the women with high income.","65716345":"# 7. Describe an explain the result.\n\nThese commands allow us to campare men and women in terms of income. Almost the quarter of peaple in our data set have a high income. The rate of men with high income is 3 times bigger than the rate of women with high income.","1a118991":"We extracted two data sets from the main data set : one for the men and the other for the men with high income.","410d0963":"# 21- Explain the result\n\nThe figure shows that there are parts of the data that we can consider their distributions as normal using the sum of Gaussian kernels around the data\n","d940027e":"# 18. Show the graphics and an explain the result.\n\nHere, the data is normalized. If we ignore the fact that there are more men than women, we find that in terms of distribution the two datasets have almost the same distribution.","2cabe236":"# 5. How many items are there for USA? and for Mexico?\n\nBy this command we have grouped the data by country. In this dataframe we have 29170 items for USA and 643 items for Mexico","0725dc08":"# Kaddouri, Belhedi, Echarrafi - EGIDB-[HO-2]","dcbad05c":"The result gives an overview of the distribution of men and women samples. Indeed, it shows their mean, variance and standard deviation. For example, it displays 39.4 as the mean, 178.7 as the variance, and 13.37 as the standard deviation for men data sample. According to these outputs, we notice that the two data samples are more scattered around the mean because their standard deviation is  high (13.37 for men and 14.01 for women).","07b2ecc3":"# 21- Explain the result\n\nWe have the skewness of the male and female population are positive, it means that the distribution skews further to the right than to the left of the mean, which means that the ages of population is a bit concentrated in values higher than the mean.","89d32efd":"# 9. Describe an explain the result.\n\nThe result shows the mean, the variance and the standard deviation of working hours per week for men and women data sets. Their standard deviation is respectively 12,11 and 11,8.\n\nFor this sample set, men work 6 hours per week more than women on average. But for both men and women sample set, there is a variation in the number of hours per week between the individuals since the standard deviation is 12 hours for each.","e10eb6c2":"# 14. Show the graphics and an explain the result.\n\nThe frequencies of the histogram of the men sample are normalized by dividing by n the number of sample. Thus, the sum of the probability of all bins will be equal to 1. Even if we use the Probability Mass Function, the distribution still have an asymetric shape.","65078cc0":"# 12. Show the graphics and an explain the result.\n\nHere, the data is normalized.\nIf we ignore the fact that there are more men than women, we find that in terms of distribution the two datasets have almost the same distribution.\n","b2d8d174":"# 20. Explain the result. \n\nThe result displays the difference between the mean of men and women samples. This displayed value  shows that there is a difference of 2.5 between the averages of the both samples. In terms of average, men are older than women.","8f6fe331":"# 22) The result shows the mean squared error of a random data set. So, the mean \"mu\" of the sample is used as an estimator in order to minimize the mean squared error. The result shows a good MSE which is near to 0.","d3d6bba2":"# 16. Show the graphics and an explain the result. \n\nThe result shows the cumulative distribution of the men age dataset. This graph allows to view the frequency distribution of each bin. For example, the frequencies of the bins 4 and 5 are higher compared to the frequencies of the other bins. \n\nThis graphic confirms the non symmetric distribution. For example, 80 % of individuals in the male data set have an age less than 50 years old. ","72fd1a34":"# 6. What is the age of the most represented people\n\nBy this command we have grouped the data by age. To know the age of the most represented people, we should first sort the values of the age-regrouped data by the size in a descending order.","e472711c":"# 4.1  Getting acquainted with data","8ac6e887":"# 17. Show the graphics and an explain the result.\n\nThe result shows the cumulative distribution of the women age dataset. This graph allows to view the frequency distribution of each bin. For example, the frequencies of the bins 1, 2 and 4 are higher compared to the frequencies of the other bins.\n\nThis graphic confirms the non symmetric distribution. For example, 80 % of individuals in the female data set have an age less than 45 years old. ","5589cb54":"Exercice****"}}