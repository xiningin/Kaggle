{"cell_type":{"cf605cd4":"code","4f0a20d3":"code","5c4433b7":"code","8673146d":"code","5eb5ada2":"code","c99a2546":"code","3eb32752":"code","e007134f":"code","1d05508d":"code","ecac39bf":"code","f03219ba":"code","e8e761af":"code","5caa1051":"code","2e1e685e":"code","ddde3d1f":"code","2f04e41c":"code","dc39c665":"code","5993fffe":"code","d6cd7345":"code","8e66f89d":"code","0a6bcaa9":"code","10974548":"code","043df28f":"code","4daf4ed0":"markdown","96bf96f5":"markdown","d63f0232":"markdown","a7c53314":"markdown","efc2f317":"markdown","ca310670":"markdown","f8c82187":"markdown","06ca8dd6":"markdown","67d97e80":"markdown","edabde80":"markdown","ac46af22":"markdown","9781b229":"markdown","6484ff05":"markdown","97fa766a":"markdown","171a4dde":"markdown","06a9234e":"markdown","d8d3dd2e":"markdown","b9deadc2":"markdown","8416983a":"markdown","3dec093c":"markdown","320fdfa0":"markdown","676985e9":"markdown","37027b14":"markdown"},"source":{"cf605cd4":"!pip install mplsoccer\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3\nfrom mplsoccer.pitch import Pitch\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport os\nimport matplotlib.pyplot as plt","4f0a20d3":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5c4433b7":"path = \"..\/input\/soccer\/database.sqlite\" \ndataConnect = sqlite3.connect(path)\n\nMatch = pd.read_sql_query(\"SELECT * FROM Match\",dataConnect)\nPlayerA = pd.read_sql_query(\"SELECT * FROM Player_Attributes\",dataConnect)\nPlayer = pd.read_sql_query(\"Select * FROM Player\",dataConnect)\nPositions = pd.read_csv(\"..\/input\/player-positions-for-european-soccer-database\/player_positions.csv\")","8673146d":"Positions.head(10)","5eb5ada2":"Positions['Position'] = (Positions[(Positions == 1).sum(axis =1)==1]==1).idxmax(axis =1)\nPositions['Position'] = Positions['Position'].fillna(\"None\")\nPositions.head(1)\n","c99a2546":"PlayerPos = pd.merge(Player,Positions,how = 'left',left_on = 'player_fifa_api_id',right_on = 'playerID' )\nPlayerPos.drop(['id','player_fifa_api_id','height','weight','playerID','CAM','CB','CDM','CF','CM','GK','LB','LF','LM','LW','LWB','RB','RF','RM','RW','RWB','ST','SW'],axis = 'columns', inplace = True)\nPlayerPos.head()","3eb32752":"conditions = [(PlayerPos['Position'] == \"CAM\") | (PlayerPos['Position'] == \"CDM\") | (PlayerPos['Position'] == \"CM\") | (PlayerPos['Position'] == \"LWB\") |  (PlayerPos['Position'] == \"RWB\"),\n             (PlayerPos['Position'] == \"GK\"),\n             (PlayerPos['Position'] == \"CB\") | (PlayerPos['Position'] == \"LB\") | (PlayerPos['Position'] == \"RB\") | (PlayerPos['Position'] == \"SW\"),\n             (PlayerPos['Position'] == \"CF\") | (PlayerPos['Position'] == \"LF\") | (PlayerPos['Position'] == \"LW\") | (PlayerPos['Position'] == \"RF\") | (PlayerPos['Position'] == \"ST\") | (PlayerPos['Position'] == \"LM\") | (PlayerPos['Position'] == \"RM\") ]\n\nvalues = ['Midfielder','GoalKeeper','Defender','Forward']\n\nPlayerPos['short_position'] = np.select(conditions,values)\nPlayerPos","e007134f":"PlayerDetails = PlayerA.merge(PlayerPos,on = 'player_api_id', how = 'left')\nPlayerDetails.head(1)","1d05508d":"PlayerDetails = PlayerDetails[['player_name','Position','birthday','date','overall_rating','short_position']]\nPlayerDetails.head(1)","ecac39bf":"PlayerDetails = PlayerDetails.dropna(subset = ['overall_rating','date'])\nPlayerDetails.isnull().sum()","f03219ba":"PlayerDetails['date'] = pd.to_datetime(PlayerDetails['date'])\nPlayerDetails['birthday'] = pd.to_datetime(PlayerDetails['birthday'])","e8e761af":"PlayerDetails['year'] = PlayerDetails['date'].dt.year","5caa1051":"def Top_N_Players(df,position,year,n):\n    Top_filter = df[(df['short_position'] == position) & (df['year'] == year)] \n    Top_filter = Top_filter.groupby(['year','player_name']).agg({'overall_rating': ['max']})\n    Top_filter.columns = ['overall_rating']\n    Top_filter = Top_filter.sort_values(['year','overall_rating'],ascending=(False)).groupby('year').head(n)\n    Top_filter = Top_filter.reset_index()\n    return Top_filter","2e1e685e":"def Top_Team(y):\n    GoalKeeper = Top_N_Players(PlayerDetails,\"GoalKeeper\",y,1)\n    Defender = Top_N_Players(PlayerDetails,\"Defender\",y,4)\n    Midfielder = Top_N_Players(PlayerDetails,\"Midfielder\",y,3)\n    Forward = Top_N_Players(PlayerDetails,\"Forward\",y,3)\n    Team  = GoalKeeper.append([Defender,Midfielder,Forward])\n    Team.reset_index()\n    return Team","ddde3d1f":"test = Top_Team(2007)\nlst = test.player_name.tolist()\nlst","2f04e41c":"#ALL = 'ALL'\ndef unique_sorted_values_plus_ALL(array):\n    unique = array.unique().tolist()\n    unique.sort()\n    #unique.insert(0)\n    return unique","dc39c665":"output = widgets.Output()\nplot_output = widgets.Output()","5993fffe":"dropdown_year = widgets.Dropdown(options = unique_sorted_values_plus_ALL(PlayerDetails.year), description = 'Year:')","d6cd7345":"\ndef common_filtering(year):\n    output.clear_output()\n    plot_output.clear_output(wait = True)\n    \n\n    common_filter = Top_Team(year)\n    \n    test = common_filter.player_name.tolist()\n    x = [10,35,30,30,35,65,65,65,100,95,95] \n    y = [40,10,30,50,70,20,40,60,40,60,20]\n    plt.style.use('ggplot')\n    pitch = Pitch(pitch_type='statsbomb', orientation='vertical',pitch_color='#22312b', line_color='#c7d5cc', figsize=(16, 20),\n                      constrained_layout=True, tight_layout=False)\n    fig, ax = pitch.draw()\n    plt.close(fig)\n    sc = pitch.scatter(x, y,\n                            color ='red',edgecolors = 'black',\n                                s=40000, ax=ax)\n\n    for i,j,k in zip(x,y,test):\n        pitch.annotate(k, (i,j),c='white', va='top', ha='center', size=16, weight='bold', ax=ax)\n    title = ax.set_title(\"World XI {}\".format(year), size=28, y=0.97, color='#c7d5cc')    \n\n    fig.set_facecolor(\"#22312b\")\n    \n    \n    with output:\n        output.clear_output()\n        display(common_filter)\n        \n    with plot_output:\n        plot_output.clear_output(wait = True)\n        display(fig)\n        ","8e66f89d":"def dropdown_year_eventhandler(change):\n    common_filtering(change.new)","0a6bcaa9":"dropdown_year.observe(\ndropdown_year_eventhandler, names='value')","10974548":"input_widgets = widgets.HBox(\n[dropdown_year])\ndisplay(input_widgets)","043df28f":"tab = widgets.Tab([output, plot_output])\ntab.set_title(0, 'Dataset Exploration')\ntab.set_title(1, 'Formation Plot')\ndisplay(tab)","4daf4ed0":"* Mplsoccer gives you the ability to draw pitches in python. Complete guide, https:\/\/mplsoccer.readthedocs.io\/en\/latest\/\n* Ipywidgets allow you to interact with graphs within Jupyter notebooks. Complete guide, https:\/\/ipywidgets.readthedocs.io\/en\/latest\/","96bf96f5":"* We now assign each drop down value the ability to toggle so that it changes the corresponding data","d63f0232":"![image.png](attachment:6311df5f-5e44-480d-8a6f-24263afa5713.png)","a7c53314":"* We now assign the year values to the dropdown widget, using the 'unique_sorted_values_plus_ALL' function to sort the years","efc2f317":"* We will drop any player that does not have an overall rating. \n\n* Again you can choose to get an average of the characteristics if the overall_rating is not filled in. However, this was not the case for the top players so I did not have to do that","ca310670":"* Lets now merge the Player dataset with the positions dataset in order to get the player names. We will drop all the rest of the position columns and just keep the custom created column. \n* We now have a dataset with each players name and their position","f8c82187":"* Now here you can either calculate your own overall_rating by weighting different attributes depending on which position the player plays in, e.g you can select all the defensive attributes for a defender, give them high weight and then average them to get to an overall rating, or you could just pick the overall_rating characteristic provided by the dataset. \n\n* I chose to go with the overall_rating dataset since it resulted in better results in comparison to actual world 11 released by fifa","06ca8dd6":"* This outputs the Visualization and the Data in a tabular format. You can use the dropdown widget to see the World 11 for any particular year. Just for context, find the link to the official World 11, https:\/\/www.squawka.com\/en\/fifpro-xi-every-side-2005\/","67d97e80":"* We now want to showcase the results for the World 11 in an interactive widget. \n\n* We will start of by creating a function that sorts a list. This will be used to sort years for which we have the data and use this in a drop down widget from which a person could select any year and the World 11 for that year will be outputted","edabde80":"* We will create another function that, when provided with a year, will output the top 11 players for that particular year based on overall_rating using the Top_N_Players function\n\n* I have specifically choosen a 4-3-3 formation. You can change it to choose any you want. ","ac46af22":"* To make things easier, we will convert the positions to a shorter form, namely, ['Midfielder','GoalKeeper','Defender','Forward']","9781b229":"* We now create the function that will create a pitch visualization and add circles representing each of the 11 players corresponding to their positions on the pitch. We will use our output widgets to catch the results of this function","6484ff05":"* We will define another function that will call our main 'common filtering' function, providing it with the change attribute which allows to capture output for all of the years that we have and display it according to what is selected in the dropdown widget","97fa766a":"* For further computation we would require date columns to be recognized as date columns by python therefore we will convert the following columns to date using the to_datetime pandas method","171a4dde":"* We can now test our function for a particular year","06a9234e":"We now need to determine the world 11 for each year. We will make a function that will take 4 arguments. \n1. The first argument will be the relevant dataset\n2. The second will be the position of the player\n3. The third argument will be the year for which you wish to determine the top players\n4. Will be the count of players you need for that particular positoion","d8d3dd2e":"* We can see that the player positions are categorical columns containing numbers with each number, 1 to 5, representing the order of preference of the postition for that player with 1 being the primary position.\n\n* We therefore pick the position corresponding to where the number 1 is for each player and make a new column called \"Positions\" by transposing the column headers so that they are within the newly created column \n\n* We would also fill any empty positions with \"None\". There is no significance for this but just to keep the data clean","b9deadc2":"* This outputs the dropdown","8416983a":"**Unfortunately, interactive widgets are not supported in Kaggle so find below the output for the Year 2016. However, feel free to run the code on your end in order to interact with the drop down widget and see the Fifa Wolrd 11 for all years included in the dataset. (2007 - 2016) as of the date this was done.**","3dec093c":"* Lets start by exploring the positions dataset since this will be crucial in determining which position each top player would be playing in","320fdfa0":"In this notebook we will explore the European Soccer Database and determine the FifaWorld 11 for the years (2007 - 2016). \n\n* We will be using a pitch visualization to depict our results using the mplsoccer package.\n* We will also be using the ipywidgets to create interactive visualizations. ","676985e9":"* Now we need to get the player attributes so that we can choose our World 11. We will combine the PlayerPos dataset that we created with the Player attributes dataset to get player rating oin different characteristics","37027b14":"We will create two variables that allow capturing outputs.\n1. The first output variable will be used to catch the dropdown widget\n2. The second output widget will be used to capture the visualization for our World 11 in a pitch like graph"}}