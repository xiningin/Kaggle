{"cell_type":{"2ff9e9fd":"code","75376b7c":"code","b35daeaf":"code","2c6272b6":"code","eb6db16e":"code","301cb0bc":"code","74c932f0":"code","2920395d":"code","8d12f07d":"code","9b1215b2":"code","7dd5c980":"code","6ede9c52":"code","acdb8987":"code","984bbd24":"code","4a7a9c4f":"code","ad44646b":"code","c7e95ae2":"code","46a4fb77":"code","5a37998d":"code","4d87bf41":"markdown","f9b47dc4":"markdown","678e0f42":"markdown","4dab4d73":"markdown","a4bb316c":"markdown","35505655":"markdown","8bd8fca2":"markdown","0950c8cd":"markdown","4e802505":"markdown","1ec9a7ca":"markdown"},"source":{"2ff9e9fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75376b7c":"# Import libraries\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n%config InlineBackend.figure_formats = {'png', 'retina'}\nsns.set(color_codes=True)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nfrom sklearn.inspection import permutation_importance\n\nimport warnings\nwarnings.simplefilter('ignore')","b35daeaf":"# Load dataset\ndf = pd.read_csv(\"\/kaggle\/input\/bike-sharing-system-washington-dc\/train_bikes.csv\")\nprint(\"Data Shape: \", df.shape)\ndf.head()","2c6272b6":"df.info()","eb6db16e":"df.describe()","301cb0bc":"# Visualize the frequency of categorical values\nfig, ax = plt.subplots(nrows=1, ncols=4, sharey=True, figsize=(14,4))\nsns.countplot(x='season', data=df, palette='winter', ax=ax[0])\nsns.countplot(x='holiday', data=df, palette='winter', ax=ax[1])\nsns.countplot(x='workingday', data=df, palette='winter', ax=ax[2])\nsns.countplot(x='weather', data=df, palette='winter', ax=ax[3])\nplt.tight_layout() \nplt.show()","74c932f0":"# Visualize the probability density of continuous variables\nfig, ax = plt.subplots(nrows=2, ncols=4, sharey=True, figsize=(14,6))\nsns.distplot(df['temp'], color='royalblue', ax=ax[0][0])\nsns.distplot(df['atemp'], color='royalblue', ax=ax[0][1])\nsns.distplot(df['windspeed'], color='royalblue', ax=ax[0][2])\nsns.distplot(df['humidity'], color='royalblue', ax=ax[0][3])\nsns.distplot(df['casual'], color='royalblue', ax=ax[1][0])\nsns.distplot(df['registered'], color='royalblue', ax=ax[1][1])\nsns.distplot(df['count'], color='royalblue', ax=ax[1][2])\nplt.tight_layout() \nplt.show()","2920395d":"# Visualize bike counts by each categorical variable\nfig, ax = plt.subplots(nrows=1, ncols=4, sharey=True, figsize=(16,4))\nsns.boxenplot(x='season', y='count', data=df, palette='winter', linewidth=0.1, ax=ax[0])\nsns.boxenplot(x='holiday', y='count', data=df, palette='winter', linewidth=0.1, ax=ax[1])\nsns.boxenplot(x='workingday', y='count', data=df, palette='winter', linewidth=0.1, ax=ax[2])\nsns.boxenplot(x='weather', y='count', data=df, palette='winter', linewidth=0.1, ax=ax[3])\nplt.tight_layout() \nplt.show()","8d12f07d":"# Visualize the relationship between the continuous variables and bike counts\nfig, ax = plt.subplots(nrows=2, ncols=3, sharey=True, figsize=(16,8))\nsns.scatterplot(x='temp', y='count', data=df, color='royalblue', ax=ax[0][0])\nsns.scatterplot(x='atemp', y='count', data=df, color='royalblue', ax=ax[0][1])\nsns.scatterplot(x='windspeed', y='count', data=df, color='royalblue', ax=ax[0][2])\nsns.scatterplot(x='humidity', y='count', data=df, color='royalblue', ax=ax[1][0])\nsns.scatterplot(x='casual', y='count', data=df, color='royalblue', ax=ax[1][1])\nsns.scatterplot(x='registered', y='count', data=df, color='royalblue', ax=ax[1][2])\nplt.tight_layout() \nplt.show()","9b1215b2":"# Get dummies for categorical variables\ndf_dummies = pd.get_dummies(df, drop_first=True, columns=['season','holiday','workingday','weather'])\n# Drop variables without useful information\ndf_dummies = df_dummies.drop(['datetime','casual', 'registered'], axis=1)\ndf_dummies.head()","7dd5c980":"# Visualize the correlationship between variables\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(8, 8))\n\n# Draw the heatmap with correct aspect ratio\nsns.heatmap(df_dummies.corr(), cmap=\"coolwarm\", vmax=.3, center=0, square=True, linewidths=2.5, \n            cbar_kws={\"shrink\": .5}, annot=False, fmt=\"1.1f\")","6ede9c52":"# split into input X variables and output y variable\nX = df_dummies.drop(['count'], axis=1)\ny = df_dummies['count']","acdb8987":"# split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","984bbd24":"# Standardize X\n\ncols = X.columns\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform (X_test)\n\nX_train = pd.DataFrame(X_train)\nX_test = pd.DataFrame(X_test)\n\nX_train.columns = cols\nX_test.columns = cols","4a7a9c4f":"def reg_model():\n    model = Sequential()\n    model.add(Dense(20, input_dim=X_train.shape[1], activation='relu'))\n    model.add(Dense(20, activation='relu'))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model","ad44646b":"# Initiate DNN\ndnn = KerasRegressor(build_fn=reg_model, epochs=5000, batch_size=20, verbose=1)\n\n# Fit DNN\ndnn_history = dnn.fit(X_train, y_train)","c7e95ae2":"# Visualize the DNN learning\nloss_train = dnn_history.history['loss']\nepochs = range(1,5001)\nplt.figure(figsize=(8,6))\nplt.plot(epochs, loss_train, 'royalblue', label='Training loss', linewidth=3)\nplt.title('Training loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","46a4fb77":"# Make predictions\ndnn_y_pred = dnn.predict(X_test)\n\n# Performance metrics\ndnn_r2 = r2_score(y_test, dnn_y_pred)\ndnn_mae = mean_absolute_error(y_test, dnn_y_pred)\ndnn_mse = mean_squared_error(y_test, dnn_y_pred)\n\n# Show the model performance\nprint(\"DNN R2: \", dnn_r2)\nprint(\"DNN MAE: \", dnn_mae)\nprint(\"DNN MSE: \", dnn_mse)","5a37998d":"# perform permutation importance\nresults = permutation_importance(dnn, X, y, scoring='neg_mean_squared_error')\n# get importance\nimportance = results.importances_mean\n\n# Plot feature importance\ndf_importance = pd.DataFrame(importance)\ndf_importance.columns = ['feature_importance']\ndf_importance['features'] = X.columns\nsns.barplot(x='feature_importance', y='features', data=df_importance)","4d87bf41":"## Regression by Deep Neural Network","f9b47dc4":"### Bivariate Analysis","678e0f42":"## Data Preprocessing","4dab4d73":"### Univariate Analysis","a4bb316c":"### Model Evaluation","35505655":"## Loar and Explore Dataset","8bd8fca2":"## Import Libraries","0950c8cd":"### Segmented Univariate Analysis","4e802505":"### Feature Importance","1ec9a7ca":"### Define and Train DNN model"}}