{"cell_type":{"e116c7d6":"code","4a43e302":"code","1bfa1f0e":"code","865f45c3":"code","5bfefd4c":"code","d974e761":"code","26e2be3e":"code","a194c105":"code","645c78ff":"code","26e585b5":"code","2c15bbf1":"code","59043f19":"code","6f8f0d7c":"code","75a4816e":"code","bfc8aede":"code","926027ce":"code","cd39d343":"code","0e066ff9":"code","0146b3f5":"code","1281c1f7":"code","c0e98895":"code","c7e15b4f":"code","bd71ae5b":"code","715d2848":"code","a6f5a0dc":"code","e952ba74":"code","1d8045fd":"markdown","2be5c8d2":"markdown","78890455":"markdown","114f627c":"markdown","1664fd0d":"markdown","8bd56f02":"markdown","40219889":"markdown","b2f2d5d0":"markdown","989ede8c":"markdown","d2ce5572":"markdown","3c1618e2":"markdown","924afdd3":"markdown","d4e79e2a":"markdown","82108ffb":"markdown","d4b7854d":"markdown","75403c90":"markdown","4e02037f":"markdown","292e8720":"markdown","84511d06":"markdown"},"source":{"e116c7d6":"# Some libraries that I will use\n!pip install pycaret\n!pip install dabl","4a43e302":"import numpy as np \nimport pandas as pd \nimport pandas_profiling as pp\nimport dabl\nfrom pycaret import regression\nimport os","1bfa1f0e":"# Load data\ndf_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_train","865f45c3":"# some info\ndf_train.info()","5bfefd4c":"#prof = pp.ProfileReport(df_train)\n#prof.to_file('profile01.html')","d974e761":"# REMOVE COLUMNS\n# Cols to rem\nrem_cols = ['Id', 'Street', 'Alley', 'Utilities', 'Condition2', 'RoofMatl', 'Heating', 'LowQualFinSF', '3SsnPorch',\n           'ScreenPorch', 'PoolArea', 'PoolQC', 'MiscFeature', 'MiscVal']\ndf_train.drop(columns=rem_cols, inplace=True)\n\n#################################################\n# INPUT VALUES\n\n# Fill LotFrontage with median\nlot_frontage_median = df_train['LotFrontage'].median()\ndf_train['LotFrontage'] = df_train['LotFrontage'].fillna(lot_frontage_median)\n\n# Cols to fill with constant 'Not Informed'\nfill_constant = ['BsmtQual', 'BsmtExposure', 'BsmtFinType1',\n                'GarageType', 'GarageFinish']\n\nfor f in fill_constant:\n    df_train[f].fillna('Not Informed', inplace=True)\n\n\n#################################################\n# DATA TRANSFORMATION\n# MSSubClass: transform to categorical\ndf_train['MSSubClass'] = df_train['MSSubClass'].astype('category')\n\n\n#################################################\n# Feature engineering\n\n# Change columns to boolean version\nfe = [\n    ('MSZoning_Boolean', 'MSZoning', 'RL'),\n    ('LotShape_Boolean', 'LotShape', 'Reg'),\n    ('LandContour_Boolean', 'LandContour', 'Lvl'),\n    ('LotConfig_Boolean', 'LotConfig', 'Inside'),\n    ('LandSlope_Boolean', 'LandSlope', 'Gtl'),\n    ('Condition1_Boolean', 'Condition1', 'Norm'),\n    ('BldgType_Boolean', 'BldgType', '1Fam'),\n    ('RoofStyle_Boolean', 'RoofStyle', 'Gable'),\n    ('ExterCond_Boolean', 'ExterCond', 'TA'),\n    ('BsmtCond_Boolean', 'BsmtCond', 'TA'),\n    ('BsmtFinType2_Boolean', 'BsmtFinType2', 'Unf'),\n    ('Electrical_Boolean', 'Electrical', 'SBrkr'),\n    ('BsmtHalfBath_Boolean', 'BsmtHalfBath', 0),\n    ('HalfBath_Boolean', 'HalfBath', 0),\n    ('KitchenAbvGr_Boolean', 'KitchenAbvGr', 1),\n    ('Functional_Boolean', 'Functional', 'Typ'),\n    ('GarageQual_Boolean', 'GarageQual', 'TA'),\n    ('GarageCond_Boolean', 'GarageCond', 'TA'),\n    ('SaleType_Boolean', 'SaleType', 'WD'),\n    ('SaleCondition_Boolean', 'SaleCondition', 'Normal'),\n]\n\nfor f in fe:\n    df_train[f[0]] = df_train[f[1]].apply(lambda x: True if x == f[2] else False)\n    df_train.drop(columns=[f[1]], inplace=True) \n","26e2be3e":"# New profile\n#prof = pp.ProfileReport(df_train)\n#prof.to_file('profile02.html')","a194c105":"dabl.plot(df_train, target_col=\"SalePrice\")","645c78ff":"reg = regression.setup(df_train, target = 'SalePrice',  silent = True, feature_selection=True,\n                      ignore_low_variance = True, remove_outliers=True, create_clusters=True,\n                      normalize = True, imputation_type='iterative', transformation=True,\n                      remove_multicollinearity=True)","26e585b5":"top3 = regression.compare_models(n_select = 3, sort='RMSE')","2c15bbf1":"model = regression.create_model('catboost')","59043f19":"model = regression.tune_model(model, optimize='RMSE', choose_better=True)","6f8f0d7c":"regression.plot_model(model, 'residuals')","75a4816e":"regression.plot_model(model, 'error')","bfc8aede":"regression.plot_model(model, 'parameter')","926027ce":"regression.plot_model(model, 'cooks')","cd39d343":"regression.plot_model(model, 'learning')","0e066ff9":"regression.plot_model(model, 'vc')","0146b3f5":"regression.plot_model(model, 'manifold')","1281c1f7":"regression.plot_model(model, 'feature')","c0e98895":"regression.interpret_model(model, 'summary')","c7e15b4f":"model_blending = regression.blend_models(top3, optimize='RMSE')","bd71ae5b":"# Load test data\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test","715d2848":"# Saving the Id list for later use ...\n\nid_list = df_test['Id']\n\n# Applying the transformation to the test data...\n# REMOVE COLUMNS\n# Cols to rem\nrem_cols = ['Id', 'Street', 'Alley', 'Utilities', 'Condition2', 'RoofMatl', 'Heating', 'LowQualFinSF', '3SsnPorch',\n           'ScreenPorch', 'PoolArea', 'PoolQC', 'MiscFeature', 'MiscVal']\ndf_test.drop(columns=rem_cols, inplace=True)\n\n#################################################\n# INPUT VALUES\n\n# Fill LotFrontage with median\ndf_test['LotFrontage'] = df_test['LotFrontage'].fillna(lot_frontage_median)\n\n# Cols to fill with constant 'Not Informed'\nfill_constant = ['BsmtQual', 'BsmtExposure', 'BsmtFinType1',\n                'GarageType', 'GarageFinish']\n\nfor f in fill_constant:\n    df_test[f].fillna('Not Informed', inplace=True)\n\n\n#################################################\n# DATA TRANSFORMATION\n# MSSubClass: transform to categorical\ndf_test['MSSubClass'] = df_test['MSSubClass'].astype('category')\n\n\n#################################################\n# Feature engineering\n\n# Change columns to boolean version\nfe = [\n    ('MSZoning_Boolean', 'MSZoning', 'RL'),\n    ('LotShape_Boolean', 'LotShape', 'Reg'),\n    ('LandContour_Boolean', 'LandContour', 'Lvl'),\n    ('LotConfig_Boolean', 'LotConfig', 'Inside'),\n    ('LandSlope_Boolean', 'LandSlope', 'Gtl'),\n    ('Condition1_Boolean', 'Condition1', 'Norm'),\n    ('BldgType_Boolean', 'BldgType', '1Fam'),\n    ('RoofStyle_Boolean', 'RoofStyle', 'Gable'),\n    ('ExterCond_Boolean', 'ExterCond', 'TA'),\n    ('BsmtCond_Boolean', 'BsmtCond', 'TA'),\n    ('BsmtFinType2_Boolean', 'BsmtFinType2', 'Unf'),\n    ('Electrical_Boolean', 'Electrical', 'SBrkr'),\n    ('BsmtHalfBath_Boolean', 'BsmtHalfBath', 0),\n    ('HalfBath_Boolean', 'HalfBath', 0),\n    ('KitchenAbvGr_Boolean', 'KitchenAbvGr', 1),\n    ('Functional_Boolean', 'Functional', 'Typ'),\n    ('GarageQual_Boolean', 'GarageQual', 'TA'),\n    ('GarageCond_Boolean', 'GarageCond', 'TA'),\n    ('SaleType_Boolean', 'SaleType', 'WD'),\n    ('SaleCondition_Boolean', 'SaleCondition', 'Normal'),\n]\n\nfor f in fe:\n    df_test[f[0]] = df_test[f[1]].apply(lambda x: True if x == f[2] else False)\n    df_test.drop(columns=[f[1]], inplace=True) ","a6f5a0dc":"y_pred = regression.predict_model(model, data=df_test)\nprice = y_pred['Label'].tolist()\n\nresult = {\n    'Id':id_list,\n    'SalePrice':price\n}\n\nresult_df = pd.DataFrame(result)\nresult_df","e952ba74":"# Save submission\nresult_df.to_csv('submission.csv', index=False, header=True)","1d8045fd":"# 5. Finalize model","2be5c8d2":"# 2. Baseline model","78890455":"# Wanna buy my house?\n\n![](https:\/\/i.pinimg.com\/originals\/79\/7e\/59\/797e5978396a6acb12fc2efaf9c65ef5.jpg)\n\n\n## Need statement\n\n### Given a set of characteristics of a particular house, create a predictive model capable of calculating its price.\n\n## Disclaimer\n\n### this is a 'just for fun' notebook used to train data science skills and to experiment some new python libraries. I don't mean to be competitive, okay?","114f627c":"## Prediction Error Plot","1664fd0d":"### Using the result of the 'pandas profile' I will perform the following actions:\n\n#### Drop columns:\n* Id (of course...)\n* Street: It is practically constant: 1454 Pave \/ only 6 Grvl\n* Alley (93.8% missing)\n* Utilities: It is practically constant: 1459 AllPub \/ only 1 NoSeWa\n* Condition2: It is practically constant: 1445 Norm \/ only 15 for others\n* RoofMatl: It is practically constant: 1434 Norm \/ only 26 for others\n* BsmtFinType2: It is practically constant: 88.6% zero values\n* Heating: It is practically constant: 1428 GasA \/ only 32 for others\n* LowQualFinSF: It is practically constant: 98.2% zero values\n* 3SsnPorch: It is practically constant: 98.4% zero values\n* ScreenPorch: It is practically constant: 92.1% zero values\n* PoolArea: It is practically constant: 99.5% zero values\n* PoolQC: (99.5% missing)\n* MiscFeature (96.3% missing)\n* MiscVal (96.4% zeros)\n\n\n### Input values\n* LotFrontage (17% missing \/ fill with median)\n* BsmtQual \/ BsmtExposure \/ BsmtFinType1 (~2.5% missing \/ fill with 'Not Informed' constant value)\n* GarageType \/ GarageYrBlt \/ GarageFinish (~5.5% missing \/ fill with 'Not Informed' constant value)\n\n### Data transformation\n* MSSubClass: transform to categorical\n\n### Feature engineering\n* MSZoning: Create MSZoning_Boolean (True for RL value, False otherwise)\n* LotShape: Create LotShape_Boolean (True for Reg value, False otherwise)\n* LandContour: Create LandContour_Boolean (True for Lvl value, False otherwise)\n* LotConfig: Create LotConfig_Boolean (True for Inside value, False otherwise)\n* LandSlope: Create LandSlope_Boolean (True for Gtl value, False otherwise)\n* Condition1: Create Condition1_Boolean (True for Norm value, False otherwise)\n* BldgType: Create BldgType_Boolean (True for 1Fam value, False otherwise)\n* RoofStyle: Create RoofStyle_Boolean (True for Gable value, False otherwise)\n* ExterCond: Create ExterCond_Boolean (True for TA value, False otherwise)\n* BsmtCond: Create BsmtCond_Boolean (True for TA value, False otherwise)\n* BsmtFinType2: Create BsmtFinType2_Boolean (True for TA value, False otherwise)\n* Eletrical: Create Eletrical_Boolean (True for SBkrk value, False otherwise)\n* BsmtHalfBath: Create BsmtHalfBath_Boolean (True for 0 value, False otherwise)\n* HalfBath: Create HalfBath_Boolean (True for 0 value, False otherwise)\n* KitchenAbvGr: Create KitchenAbvGr_Boolean (True for 1 value, False otherwise)\n* Functional: Create Functional_Boolean (True for Typ value, False otherwise)\n* GarageQual: Create GarageQual_Boolean (True for TA value, False otherwise)\n* GarageCond: Create GarageQual_Boolean (True for TA value, False otherwise)\n* Fence: Create Fence_Boolean (True for not missing value, False otherwise)\n* SaleType: Create SaleType_Boolean (True for WD value, False otherwise)\n* SaleCondition: Create SaleCondition_Boolean (True for Normal value, False otherwise)\n","8bd56f02":"## Model Hyperparameter","40219889":"### Generating the prediction for the test data","b2f2d5d0":"![](https:\/\/i.redd.it\/l78s3zzpsax21.png)","989ede8c":"# 3. Results \n\n\n![](https:\/\/images3.memedroid.com\/images\/UPLOADED197\/5d0bae9a5411b.jpeg)","d2ce5572":"## 1.2 Data visualization using dabl library (a library under construction, but with potential)","3c1618e2":"##  Learning Curve","924afdd3":"## Residuals Plot","d4e79e2a":"# 4. Improve results (at least I'll try)","82108ffb":"## Cooks Distance Plot\n\nref.: https:\/\/medium.com\/@lymielynn\/a-little-closer-to-cooks-distance-e8cc923a3250","d4b7854d":"# 1. Exploratory Data Analysis\n## 1.1 With pandas profiling\n\nThe result is available in the profile01.html output file\n\n![](https:\/\/i.imgflip.com\/3gz991.jpg)","75403c90":"## Blending models","4e02037f":"##  Validation Curve","292e8720":"## Feature Importance","84511d06":"## Manifold Learning\n\nref.: https:\/\/prateekvjoshi.com\/2014\/06\/21\/what-is-manifold-learning\/"}}