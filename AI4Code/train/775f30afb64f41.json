{"cell_type":{"9bc9c616":"code","2968a5d3":"code","0a7824c3":"code","090c73a1":"code","ac615df2":"code","f97a4f61":"code","d61bf1b8":"code","2bc3293c":"code","8814a7de":"code","073271c6":"code","90f4eb84":"code","fd7c020f":"code","002eaca9":"code","f57972f7":"markdown","2085e683":"markdown","a2f3198d":"markdown","7f11b9e5":"markdown","3ed43b43":"markdown","7aee944d":"markdown","60f091ec":"markdown","f771de43":"markdown","7af47ceb":"markdown"},"source":{"9bc9c616":"import numpy as np\nimport pandas as pd\nimport os\nimport sqlite3","2968a5d3":"# View files available for reading\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0a7824c3":"# Create a database connection\ncon = sqlite3.connect('\/kaggle\/input\/formula-1-race-data-sqlite\/Formula1_4tables.sqlite')\n\n# Create a cursor that uses the connection\ncursor = con.cursor()","090c73a1":"# List the database tables\n# SQLite files have an sqlite_master table with this information\n# See https:\/\/www.kite.com\/python\/answers\/how-to-list-tables-using-sqlite3-in-python\n\nquery = '''\n        SELECT name\n        FROM sqlite_master\n        WHERE type='table';\n        '''\ncursor.execute(query)\ncursor.fetchall()","ac615df2":"# Create dataframe from query of drivers table\nquery = '''\n        SELECT *\n        FROM drivers\n        LIMIT 3;\n        '''\ndrivers = pd.read_sql_query(query, con)\ndrivers","f97a4f61":"query = '''\n        SELECT *\n        FROM races\n        LIMIT 3;\n        '''\nraces = pd.read_sql_query(query, con)\nraces","d61bf1b8":"query = '''\n        SELECT *\n        FROM circuits\n        LIMIT 3;\n        '''\ncircuits = pd.read_sql_query(query, con)\ncircuits","2bc3293c":"query = '''\n        SELECT * \n        FROM results\n        LIMIT 3;\n        '''\nresults = pd.read_sql_query(query, con)\nresults","8814a7de":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name',\n        races.name AS 'race name', races.date AS 'race date', results.positionOrder AS 'finish'\n        FROM results\n        JOIN drivers ON results.driverId = drivers.driverId\n        JOIN races ON results.raceId = races.raceId\n        WHERE results.positionOrder = 1;\n        '''\nrace_winners = pd.read_sql_query(query, con)\nrace_winners.head()","073271c6":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name', \n        drivers.dob AS 'birthday', drivers.nationality, SUM(results.points) AS 'all-time points'\n        FROM drivers\n        JOIN results ON drivers.driverId = results.driverId\n        GROUP BY drivers.driverId\n        ORDER BY SUM(results.points) DESC;\n        '''\ntotal_points_by_driver = pd.read_sql_query(query, con)\ntotal_points_by_driver.head()","90f4eb84":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name', \n        drivers.dob AS 'birth_date', COUNT(*) AS 'no. of wins'\n        FROM results\n        JOIN drivers ON results.driverId = drivers.driverId\n        JOIN races ON results.raceId = races.raceId\n        WHERE results.positionOrder = 1\n        GROUP BY drivers.driverId\n        ORDER BY COUNT(*) DESC;\n        '''\ntotal_wins_by_driver = pd.read_sql_query(query, con)\ntotal_wins_by_driver.head()","fd7c020f":"query = '''\n        SELECT drivers.forename AS 'first_name', drivers.surname AS 'last_name',\n        races.name AS 'race name', races.date AS 'race date', results.positionOrder AS 'finish'\n        FROM results\n        JOIN drivers ON results.driverId = drivers.driverId\n        JOIN races ON results.raceId = races.raceId\n        WHERE results.positionOrder = 1 AND drivers.surname = 'Schumacher' AND drivers.forename = 'Michael';\n        '''\nschumacher_test = pd.read_sql_query(query, con)\nschumacher_test","002eaca9":"query = '''\n        SELECT drivers.nationality, SUM(results.points) AS 'total points'\n        FROM drivers\n        JOIN results ON drivers.driverId = results.driverId\n        GROUP BY drivers.nationality\n        HAVING SUM(results.points) > 0\n        ORDER BY SUM(results.points) DESC;\n        '''\ntotal_points_by_nation = pd.read_sql_query(query, con)\ntotal_points_by_nation.head()","f57972f7":"## List all time winningest drivers","2085e683":"## List winner of each race, with race name and date","a2f3198d":"## List all of the individual race wins for the winningest driver","7f11b9e5":"# Sample Queries","3ed43b43":"## List the highest point scoring countries","7aee944d":"## List all time points leaders, with birthday and nationality","60f091ec":"# View database schema\n\nUsing pandas `read_sql_query`\n\nSee: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_sql_query.html\n\n","f771de43":"# Formula 1 Sample Queries\n\n### This notebook will integrate SQL and Python by demonstrating how SQL queries can be used to create pandas dataframes, which can in turn be used for Exploratory Data Analysis with Python\/pandas. ","7af47ceb":"# Read and Review Data using SQL"}}