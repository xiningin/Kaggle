{"cell_type":{"5d93915b":"code","66a71f6c":"code","4478d64c":"code","a16bc268":"code","6b0eeaa3":"code","a1e07609":"code","712bb244":"code","d6201dcf":"code","aa4452a1":"code","445e4ed8":"markdown","c2efc7b6":"markdown","7ef6fe05":"markdown","13141bef":"markdown","c5fa5b57":"markdown"},"source":{"5d93915b":"predictionfile = '..\/input\/2018predictions\/Finalpredictions.csv'","66a71f6c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\n","4478d64c":"#BASED ON ESPN.COM\nround_scores = {\n            1:10,\n            2:20,\n            3:40,\n            4:80,\n            5:160,\n            6:360\n        }\nregion_pairings = ( ('east', 'west'), ('midwest', 'south') )\nseed_pairs_by_round = {\n    1 : {\n        1:16,\n        8:9,\n        5:12,\n        4:13,\n        6:11,\n        3:14,\n        7:10,\n        2:15,\n    },\n    2 : {\n        1:8,\n        4:5,\n        3:6,\n        2:7,\n    },\n    3 : {\n        1:4,\n        2:3,\n    },\n    4 : {\n        1:2,\n    },\n}","a16bc268":"team1 = []\nteam2 = []\nprob = []\ndelim='beats'\nfor line in open(predictionfile,'r').readlines():\n    team1.append(line.split(delim)[0])\n    team2.append(line.split(delim)[1].split(':')[0])\n    prob.append(float(line.strip().split(':')[1]))\n\nteam1 = np.array(team1)\nteam2 = np.array(team2)\nprobs = np.array(prob)\n\n\nsubmission_dict = {} #this will store the probabilites from Finalpredictions.csv\nfor team1i in team1:\n    submission_dict[team1i.strip()] = {}\nfor team1i,team2i,prob in zip(team1,team2,probs):\n    submission_dict[team1i.strip()][team2i.strip()] = prob\n","6b0eeaa3":"def get_starting_bracket():\n    #Makes an empty bracket based on 2018 Tournament. Will be updated for 2019 when available.\n    starting_bracket = {1:{},2:{},3:{},4:{},5:{},'Final':[],'Winner':None}\n    for rnd in [1,2,3,4,5]:\n        starting_bracket[rnd] = { 'east':{}, 'west':{}, 'midwest':{}, 'south':{} }\n\n    rnd = 1\n    starting_bracket[rnd][loc][1] = 'Virginia'\n    starting_bracket[rnd][loc][2] = 'Tennessee'\n    starting_bracket[rnd][loc][3] = 'Purdue'\n    starting_bracket[rnd][loc][4] = 'Kansas St'\n    starting_bracket[rnd][loc][5] = 'Wisconsin'\n    starting_bracket[rnd][loc][6] = 'Villanova'\n    starting_bracket[rnd][loc][7] = 'Cincinnati'\n    starting_bracket[rnd][loc][8] = 'Mississippi'\n    starting_bracket[rnd][loc][9] = 'Oklahoma'\n    starting_bracket[rnd][loc][10] = 'Iowa'\n    starting_bracket[rnd][loc][11] = \"St Mary's CA\"\n    starting_bracket[rnd][loc][12] = 'Oregon'\n    starting_bracket[rnd][loc][13] = 'UC Irvine'\n    starting_bracket[rnd][loc][14] = 'Old Dominion'\n    starting_bracket[rnd][loc][15] = 'Colgate'\n    starting_bracket[rnd][loc][16] = 'Gardner Webb'\n\n    loc = 'west'\n    starting_bracket[rnd][loc][1] = 'Gonzaga'\n    starting_bracket[rnd][loc][2] = 'Michigan'\n    starting_bracket[rnd][loc][3] = 'Texas Tech'\n    starting_bracket[rnd][loc][4] = 'Florida St'\n    starting_bracket[rnd][loc][5] = 'Marquette'\n    starting_bracket[rnd][loc][6] = 'Buffalo'\n    starting_bracket[rnd][loc][7] = 'Nevada'\n    starting_bracket[rnd][loc][8] = 'Syracuse'\n    starting_bracket[rnd][loc][9] = 'Baylor'\n    starting_bracket[rnd][loc][10] = 'Florida'\n    starting_bracket[rnd][loc][11] = 'Arizona St'\n    starting_bracket[rnd][loc][12] = 'Murray St'\n    starting_bracket[rnd][loc][13] = 'Vermont'\n    starting_bracket[rnd][loc][14] = 'N Kentucky'\n    starting_bracket[rnd][loc][15] = 'Montana'\n    starting_bracket[rnd][loc][16] = 'F Dickinson'\n\n    loc = 'east'\n    starting_bracket[rnd][loc][1] = 'Duke'\n    starting_bracket[rnd][loc][2] = 'Michigan St'\n    starting_bracket[rnd][loc][3] = 'LSU'\n    starting_bracket[rnd][loc][4] = 'Virginia Tech'\n    starting_bracket[rnd][loc][5] = 'Mississippi St'\n    starting_bracket[rnd][loc][6] = 'Maryland'\n    starting_bracket[rnd][loc][7] = 'Louisville'\n    starting_bracket[rnd][loc][8] = 'VA Commonwealth'\n    starting_bracket[rnd][loc][9] = 'UCF'\n    starting_bracket[rnd][loc][10] = 'Minnesota'\n    starting_bracket[rnd][loc][11] = 'Belmont'\n    starting_bracket[rnd][loc][12] = 'Liberty'\n    starting_bracket[rnd][loc][13] = 'St Louis'\n    starting_bracket[rnd][loc][14] = 'Yale'\n    starting_bracket[rnd][loc][15] = 'Bradley'\n    starting_bracket[rnd][loc][16] = 'N Dakota St'\n\n    loc = 'midwest'\n    starting_bracket[rnd][loc][1] = 'North Carolina'\n    starting_bracket[rnd][loc][2] = 'Kentucky'\n    starting_bracket[rnd][loc][3] = 'Houston'\n    starting_bracket[rnd][loc][4] = 'Kansas'\n    starting_bracket[rnd][loc][5] = 'Auburn'\n    starting_bracket[rnd][loc][6] = 'Iowa St'\n    starting_bracket[rnd][loc][7] = 'Wofford'\n    starting_bracket[rnd][loc][8] = 'Utah St'\n    starting_bracket[rnd][loc][9] = 'Washington'\n    starting_bracket[rnd][loc][10] = 'Seton Hall'\n    starting_bracket[rnd][loc][11] = 'Ohio St'\n    starting_bracket[rnd][loc][12] = 'New Mexico St'\n    starting_bracket[rnd][loc][13] = 'Northeastern'\n    starting_bracket[rnd][loc][14] = 'Georgia St'\n    starting_bracket[rnd][loc][15] = 'Abilene Chr'\n    starting_bracket[rnd][loc][16] = 'Iona'\n    return starting_bracket\n","a1e07609":"def scoreBracket(realization,mlbracket):\n    #takes in a given realization\n    #and mlbracket which is your best bracket that you will be posting on ESPN.com (or other)\n    \n    score = 0\n    for rnd in [2,3,4,5]:\n        rnd_ml = []\n        rnd_real = []\n        for region in realization[rnd].keys():\n            for team in realization[rnd][region].values():\n                rnd_real.append(team)\n            for team in mlbracket[rnd][region].values():\n                rnd_ml.append(team)\n        num_correct = 0\n        for team in rnd_ml:\n            if team in rnd_real:\n                num_correct += 1\n        score += num_correct*round_scores[rnd-1]\n\n    num_correct = 0\n    for team in mlbracket['Final']:\n        if team in realization['Final']:\n            num_correct += 1\n    score += num_correct*round_scores[5]\n    \n    if mlbracket['Winner'] == realization['Winner']:\n        score += round_scores[6]\n\n    return score","712bb244":"\ndef one_realization(predictions):\n    # takes in all possible matchups and generates a random realization of the tournament\n    \n    bracket = get_starting_bracket()\n    for rnd in [1,2,3,4]:\n        for region in bracket[1].keys():\n            for s1,s2 in seed_pairs_by_round[rnd].items():\n                rand = np.random.uniform(0,1)\n                team1,team2 = bracket[rnd][region][s1],bracket[rnd][region][s2]\n                try:\n                #print(team1,team2)\n                    prob = predictions[team1][team2]\n                    flip = False\n                except:\n                    prob = predictions[team2][team1]\n                    flip = True\n                if flip:\n                    prob = 1.-prob\n                if rand < prob:\n                    bracket[rnd+1][region][s1] = team1\n                else:\n                    bracket[rnd+1][region][s1] = team2                   \n    \n    #############################################################\n    #Final Four\n    rand = np.random.uniform(0,1)\n    team1,team2 = bracket[5]['south'][1],bracket[5]['west'][1]\n    try:\n        prob = predictions[team1][team2]\n        flip = False\n    except:\n        prob = predictions[team2][team1]\n        flip = True\n    if flip:\n        prob = 1.-prob\n    if rand < prob:\n        bracket['Final'].append(team1)\n    else:\n        bracket['Final'].append(team2)                   \n\n    rand = np.random.uniform(0,1)\n    team1,team2 = bracket[5]['east'][1],bracket[5]['midwest'][1]\n    try:\n        prob = predictions[team1][team2]\n        flip = False\n    except:\n        prob = predictions[team2][team1]\n        flip = True\n    if flip:\n        prob = 1.-prob\n    if rand < prob:\n        bracket['Final'].append(team1)\n    else:\n        bracket['Final'].append(team2)             \n\n\n\n    #############################################################\n    #Final\n    rand = np.random.uniform(0,1)\n    team1,team2 =bracket['Final'][0],bracket['Final'][1]\n    \n    try:\n        prob = predictions[team1][team2]\n        flip = False\n    except:\n        prob = predictions[team2][team1]\n        flip = True\n\n    if flip:\n        prob = 1.-prob\n    if rand < prob:\n        bracket['Winner']=team1\n    else:\n        bracket['Winner']=team2  \n    \n    return bracket","d6201dcf":"#This is where we create our best possible bracket (mlbracket) to submit to ESPN.com (or other site)\n#its just rounding our probabilities to take the team with highest probability as winner\nrounded_submission_dict = {}\nfor team1i in team1:\n    rounded_submission_dict[team1i.strip()] = {}\nfor team1i,team2i,prob in zip(team1,team2,probs):\n    rounded_submission_dict[team1i.strip()][team2i.strip()] = round(prob)\nmlbracket = one_realization(rounded_submission_dict)","aa4452a1":"winners = []\nfinalsteams = []\nscores = []\ngotwinnerright = []\n\nnumRealizations = 100000\nfor i in range(numRealizations):\n    realization = one_realization(submission_dict)\n    score = scoreBracket(realization,mlbracket)\n    winners.append(realization['Winner'])\n    finalsteams.append(realization['Final'])\n    scores.append(score)\n    if realization['Winner'] == mlbracket['Winner']:\n        gotwinnerright.append(1)\n    else:\n        gotwinnerright.append(0)    \n\nscores = np.array(scores)\ngotwinnerright = np.array(gotwinnerright,dtype='int')\ncorrect_champ_scores = scores[gotwinnerright==1]\nwrong_champ_scores = scores[gotwinnerright==0]\n    \nwinners = np.array(winners,dtype='str')\nwinteams = []\nwincounts = []\nfor t in np.unique(winners):\n    winteams.append(t)\n    wincounts.append(len(winners[winners==t]))\nwinteams = np.array(winteams,dtype='str')\nwincounts = np.array(wincounts,dtype='float')\n\nargsort = np.argsort(wincounts)\n\nx = np.arange(len(winteams))\n\nplt.figure(figsize=(12,7))\nplt.title('Tournament Winning Teams for each Realization',fontsize=25)\nplt.ylabel('Fraction of Simulated Tournaments Won',fontsize=20)\nplt.bar(x[-15:], height= wincounts[argsort][-15:]\/numRealizations) \nplt.xticks(x[-15:], winteams[argsort][-15:],rotation=90) # no need to add .5 anymore\nplt.gcf().subplots_adjust(bottom=0.25)\nplt.show()\n\n\n\nplt.clf()\nplt.figure(figsize=(12,7))\n# We split up by correct champion or not because that is worth a lot of points \n# and makes the distribution strongly bimodal\nplt.title('Predicted Champion (%s) in %d Percent of Realizations'%(mlbracket['Winner'],\n          (100*float(wincounts[winteams==mlbracket['Winner']])\/numRealizations)),fontsize=25)\nplt.hist(wrong_champ_scores,bins=np.linspace(min(scores),max(scores),200),\n         label='Wrong Champion \\nMean: %d \\nStd: %d'%(np.mean(wrong_champ_scores),\n                                                    np.std(wrong_champ_scores)),alpha=.8)\nplt.hist(correct_champ_scores,bins=np.linspace(min(scores),max(scores),200),\n         label='Correct Champion! \\nMean: %d \\nStd: %d'%(np.mean(correct_champ_scores),\n                                                    np.std(correct_champ_scores)),alpha=.8)\nplt.xlabel('ESPN.com Score',fontsize=20)\nplt.ylabel('# Realizations',fontsize=20)\nplt.legend()\nplt.show()\n","445e4ed8":"![results2](https:\/\/www.dropbox.com\/s\/g8jxlmjv081a88n\/results2.png?dl=1)","c2efc7b6":"![ranks](https:\/\/www.dropbox.com\/s\/uwh2qgszcqmcj27\/simulated_2019_tourney.png?dl=1)","7ef6fe05":"# Now we begin simulating realizations of the tournament\n## Remember that this all depends on your probabilities being accurate so it is your responsibility to check that for your self (on your test dataset).","13141bef":"**Grab your probabilities for all possible matchups**","c5fa5b57":"# Code to simulate realizations of the tournament based on your Finalsubmission.csv\n## Will give you distribution of expected winners\/final four teams etc... and relative probabilities (like fivethirtyeight)\n## Will also give you your expectation value for the score your braket will get.\n## All you have to do is replace with your Finalpredictions.csv below"}}