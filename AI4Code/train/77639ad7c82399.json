{"cell_type":{"b3c61dda":"code","9740be86":"code","c9f94037":"code","0dd0156a":"code","84eaa539":"code","6334ebd8":"code","690708c9":"code","4775a41c":"code","48cf2127":"code","c19ae787":"code","3d5e2d45":"code","e22aa412":"code","99f1ce9f":"code","3185e448":"code","a7c52fcd":"code","92193641":"code","561ee460":"code","842c1c78":"code","d1b93153":"code","f8153994":"code","620e831e":"code","e3635e09":"code","363e1088":"code","2461b248":"code","1eaf4e2f":"code","4a6fabb9":"code","d72a26d6":"code","b36ba4fb":"code","eacf4ee2":"code","537301db":"markdown","4f10c4bb":"markdown","5df56492":"markdown","90108f8e":"markdown","0d8e95b8":"markdown","895e77cb":"markdown","f34b0136":"markdown","3af34568":"markdown","9980d564":"markdown","95e55c04":"markdown","bf416966":"markdown","684d6bc9":"markdown","648705f3":"markdown","df270b30":"markdown"},"source":{"b3c61dda":"import pandas as pd\nimport seaborn as sns\nimport missingno\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn.model_selection import train_test_split\n\nfrom scipy.stats import skew\nfrom sklearn.metrics import accuracy_score, r2_score, mean_squared_error, mean_absolute_error\nfrom sklearn.metrics import mean_squared_log_error\nimport math","9740be86":"train_df = pd.read_csv(r\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\", parse_dates=True)\ntest_df = pd.read_csv(r\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\", parse_dates=True)\nsample_submission_df = pd.read_csv(r\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\", parse_dates=True)\n\nall_data = pd.concat((train_df.loc[:,'MSSubClass':'SaleCondition'],test_df.loc[:,'MSSubClass':'SaleCondition']))\n\nprint(train_df.shape)\nprint(test_df.shape)\nprint(all_data.shape)\nprint(sample_submission_df.shape)","c9f94037":"all_data[all_data.select_dtypes(['object']).columns] = all_data.select_dtypes(['object']).apply(lambda x: x.astype('category'))","0dd0156a":"train_df.info()","84eaa539":"category_cols = train_df.select_dtypes(['category', 'object']).columns\nprint(\"{0} categorical columns found: {1} \".format(len(category_cols),category_cols))\nnumerical_cols = train_df.select_dtypes(['int', 'float64', 'int64']).columns[1:]\nprint(\"{0} Numerical columns found: {1} \".format(len(numerical_cols),numerical_cols))","6334ebd8":"col_desc ={\n\"SalePrice\":\"The property's sale price in dollars. This is the target variable that you're trying to predict.\",\n\"MSSubClass\":\"The building class\",\n\"MSZoning\":\"The general zoning classification\",\n\"LotFrontage\":\"Linear feet of street connected to property\",\n\"LotArea\":\"Lot size in square feet\",\n\"Street\":\"Type of road access\",\n\"Alley\":\"Type of alley access\",\n\"LotShape\":\"General shape of property\",\n\"LandContour\":\"Flatness of the property\",\n\"Utilities\":\"Type of utilities available\",\n\"LotConfig\":\"Lot configuration\",\n\"LandSlope\":\"Slope of property\",\n\"Neighborhood\":\"Physical locations within Ames city limits\",\n\"Condition1\":\"Proximity to main road or railroad\",\n\"Condition2\":\"Proximity to main road or railroad (if a second is present)\",\n\"BldgType\":\"Type of dwelling\",\n\"HouseStyle\":\"Style of dwelling\",\n\"OverallQual\":\"Overall material and finish quality\",\n\"OverallCond\":\"Overall condition rating\",\n\"YearBuilt\":\"Original construction date\",\n\"YearRemodAdd\":\"Remodel date\",\n\"RoofStyle\":\"Type of roof\",\n\"RoofMatl\":\"Roof material\",\n\"Exterior1st\":\"Exterior covering on house\",\n\"Exterior2nd\":\"Exterior covering on house (if more than one material)\",\n\"MasVnrType\":\"Masonry veneer type\",\n\"MasVnrArea\":\"Masonry veneer area in square feet\",\n\"ExterQual\":\"Exterior material quality\",\n\"ExterCond\":\"Present condition of the material on the exterior\",\n\"Foundation\":\"Type of foundation\",\n\"BsmtQual\":\"Height of the basement\",\n\"BsmtCond\":\"General condition of the basement\",\n\"BsmtExposure\":\"Walkout or garden level basement walls\",\n\"BsmtFinType1\":\"Quality of basement finished area\",\n\"BsmtFinSF1\":\"Type 1 finished square feet\",\n\"BsmtFinType2\":\"Quality of second finished area (if present)\",\n\"BsmtFinSF2\":\"Type 2 finished square feet\",\n\"BsmtUnfSF\":\"Unfinished square feet of basement area\",\n\"TotalBsmtSF\":\"Total square feet of basement area\",\n\"Heating\":\"Type of heating\",\n\"HeatingQC\":\"Heating quality and condition\",\n\"CentralAir\":\"Central air conditioning\",\n\"Electrical\":\"Electrical system\",\n\"1stFlrSF\":\"First Floor square feet\",\n\"2ndFlrSF\":\"Second floor square feet\",\n\"LowQualFinSF\":\"Low quality finished square feet (all floors)\",\n\"GrLivArea\":\"Above grade (ground) living area square feet\",\n\"BsmtFullBath\":\"Basement full bathrooms\",\n\"BsmtHalfBath\":\"Basement half bathrooms\",\n\"FullBath\":\"Full bathrooms above grade\",\n\"HalfBath\":\"Half baths above grade\",\n\"Bedroom\":\"Number of bedrooms above basement level\",\n\"Kitchen\":\"Number of kitchens\",\n\"KitchenQual\":\"Kitchen quality\",\n\"TotRmsAbvGrd\":\"Total rooms above grade (does not include bathrooms)\",\n\"Functional\":\"Home functionality rating\",\n\"Fireplaces\":\"Number of fireplaces\",\n\"FireplaceQu\":\"Fireplace quality\",\n\"GarageType\":\"Garage location\",\n\"GarageYrBlt\":\"Year garage was built\",\n\"GarageFinish\":\"Interior finish of the garage\",\n\"GarageCars\":\"Size of garage in car capacity\",\n\"GarageArea\":\"Size of garage in square feet\",\n\"GarageQual\":\"Garage quality\",\n\"GarageCond\":\"Garage condition\",\n\"PavedDrive\":\"Paved driveway\",\n\"WoodDeckSF\":\"Wood deck area in square feet\",\n\"OpenPorchSF\":\"Open porch area in square feet\",\n\"EnclosedPorch\":\"Enclosed porch area in square feet\",\n\"3SsnPorch\":\"Three season porch area in square feet\",\n\"ScreenPorch\":\"Screen porch area in square feet\",\n\"PoolArea\":\"Pool area in square feet\",\n\"PoolQC\":\"Pool quality\",\n\"Fence\":\"Fence quality\",\n\"MiscFeature\":\"Miscellaneous feature not covered in other categories\",\n\"MiscVal\":\"$Value of miscellaneous feature\",\n\"MoSold\":\"Month Sold\",\n\"YrSold\":\"Year Sold\",\n\"SaleType\":\"Type of sale\",\n\"SaleCondition\":\"Condition of sale\"\n}","690708c9":"# count plot of all categorical columns\n\nf, axes = plt.subplots(13,3,figsize=(20,70), sharex=False)\nfor f,ax in zip(category_cols, axes.ravel()):\n    sns.countplot(train_df[f], ax=ax)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\n    ax.set_title(f + \" = \" +col_desc[f])\n    \nplt.tight_layout()\nplt.show()","4775a41c":"# nulls in columns\nnull_data = train_df.isnull().sum(axis=0).reset_index()\nnull_data = null_data.rename(columns={0:'null_count'})\nnull_data = null_data[null_data.null_count > 0].sort_values(by=\"null_count\", ascending=False)\nsns.set(rc={'figure.figsize':(30,8)})\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title(\"Nulls in Columns\")\nsns.barplot(data=null_data, x =\"index\", y ='null_count')","48cf2127":"from scipy import stats  ","c19ae787":"f, axes = plt.subplots(36,2,figsize=(20,80), sharex=False, sharey=False)\nfor f,ax in zip(numerical_cols, axes):\n    sns.boxplot(data=train_df[f], ax=ax[0], orient=\"h\")\n    sns.violinplot(data=train_df, x=f, ax=ax[1])\n    ax[0].set_title(f + \" = \" +col_desc[f] if f in col_desc.keys() else \"\") \n    ax[1].set_title(f + \" = \" +col_desc[f] if f in col_desc.keys() else \"\") \nplt.tight_layout()\nplt.show()","3d5e2d45":"sns.set(rc={'figure.figsize':(30,2)})\nsns.boxplot(data=train_df, x=\"SalePrice\")\nplt.show()\nsns.violinplot(data=train_df, x=\"SalePrice\")\nplt.show()","e22aa412":"print(\"Skew before\",skew(train_df[\"SalePrice\"]))\nlog_transformed_target = np.log1p(train_df[\"SalePrice\"])\n\nprint(\"Skew After\",skew(log_transformed_target))\nsns.kdeplot(data=train_df[\"SalePrice\"])\nplt.show()\nsns.kdeplot(data=log_transformed_target)","99f1ce9f":"prices = pd.DataFrame({\"price\":train_df[\"SalePrice\"], \"Transformed SalePrice\":np.log1p(train_df[\"SalePrice\"])})\nprices.hist()","3185e448":"# converting object to category columns\nall_data[all_data.select_dtypes(['object']).columns] = all_data.select_dtypes(['object']).apply(lambda x: x.astype('category'))","a7c52fcd":"#log transform skewed numeric features:\n\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"category\"].index\n\nskewed_feats = train_df[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.5]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","92193641":"# generate dummies for categorical columns\nall_data = pd.get_dummies(all_data)","561ee460":"# fill missing data with mean of train\nall_data = all_data.fillna(all_data.mean())","842c1c78":"all_data.shape","d1b93153":"# splitting back to train and test shape\ntrain_df_engineered = all_data[:train_df.shape[0]]\ntest_df_engineered = all_data[train_df.shape[0]:]\nprint(train_df_engineered.shape)\nprint(test_df_engineered.shape)","f8153994":"lr_model = ElasticNetCV(alphas = [1, 0.1, 0.001, 0.0005], max_iter=10000, n_jobs=-1, positive=True, l1_ratio=0.85)","620e831e":"Y = \"Transformed SalePrice\"","e3635e09":"X_train, X_test, y_train, y_test = train_test_split(train_df_engineered,prices[Y], test_size=0.20, random_state=42)\nprint(\"X_train\",X_train.shape)\nprint(\"y_train\",y_train.shape)\n\nprint(\"X_test\",X_test.shape)\nprint(\"y_test\",y_test.shape)","363e1088":"# Traing\nlr_model.fit(X_train, y_train)\n\ny_train_predicted = lr_model.predict(X_train)\n\nprint(lr_model.score(X_train, y_train))\nprint(np.sqrt(mean_squared_log_error(y_train, y_train_predicted)))","2461b248":"y_test_predicted = np.expm1(lr_model.predict(X_test))\ny_test_predicted.shape","1eaf4e2f":"r2_train = r2_score(y_train, y_train_predicted)\nr2_test = r2_score(y_test, y_test_predicted)","4a6fabb9":"# Model Accuracy\nprint('The Accuracy  on the training dataset is: {:.3%}'.format(lr_model.score(X_train, y_train)))\nprint('The Accuracy r2  on the training dataset is: {:.3%}'.format(r2_train))\n# print(\"\")\n\nprint('The Accuracy  on the testing dataset is: {:.1%}'.format(lr_model.score(X_test, y_test_predicted)))\nprint('The Accuracy r2 on the testing dataset is: {:.1%}'.format(r2_test))\nprint(\"\")\n\n# The Root Mean Squared Error (RMSE)\nprint('The RMSE  on the training dataset is: {:.8}'.format(math.sqrt(mean_squared_error(y_train,y_train_predicted))))\nprint('The RMSE  on the testing dataset is: {:.8}'.format(math.sqrt(mean_squared_error(y_test,y_test_predicted))))\nprint(\"\")\n\n# The Mean Absolute Error (MAE)\nprint('The MAE  on the training dataset is: {:.8}'.format(mean_absolute_error(y_train,y_train_predicted)))\nprint('The MAE  on the testing dataset is: {:.8}'.format(mean_absolute_error(y_test,y_test_predicted)))","d72a26d6":"# plot forecasted vs actuals","b36ba4fb":"data = pd.DataFrame({\"Actual\":np.expm1(y_test), \"Predicted\" : y_test_predicted})\nsns.set(rc={'figure.figsize':(10,5)})\nsns.scatterplot(data=data)","eacf4ee2":"# build model on full data\nlr_model.fit(train_df_engineered, prices[Y])\nprint(\"model is build on full data with {:.1%} accuracy\".format(lr_model.score(train_df_engineered, prices[Y])))\n\nsample_submission_df[\"SalePrice\"] = np.expm1(lr_model.predict(test_df_engineered))\nsample_submission_df.to_csv(\"submission.csv\", index=False)","537301db":"# Imports","4f10c4bb":"#### getting back dataframes after preprocessing","5df56492":"#### Continuous variable","90108f8e":"#### Transform target variable","0d8e95b8":"### Univariate analysis","895e77cb":"# Finding and best model building","f34b0136":"### Evaluation - Checking performance","3af34568":"# Data preprocessing","9980d564":"#### feature engineering for both data set mixed","95e55c04":"### categoical variables","bf416966":"# Data Reads","684d6bc9":"#### target variable understanding","648705f3":"# Predicting \/ Scoring\nModel will be build on full train data and predicted for test data for submission","df270b30":"# EDA"}}