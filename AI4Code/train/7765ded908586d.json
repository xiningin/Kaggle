{"cell_type":{"dabe4bb5":"code","ff62e1ae":"code","eede66b9":"code","ca46b2fe":"code","feacb1d8":"code","920bacad":"code","cb7bf0f9":"code","72e4e7db":"code","47b46344":"code","8913fa90":"code","917067f3":"code","a2fdb26b":"code","18bc86cb":"code","b19f757b":"code","726c7327":"code","bbc715af":"code","754e57a9":"code","bd8a593f":"markdown","716fbcfc":"markdown","5b18fda9":"markdown","03ed90fc":"markdown","1f7f3173":"markdown","1d056e9f":"markdown","f973521d":"markdown","fb5c9482":"markdown","aeed38cd":"markdown","8a04257e":"markdown","026ff831":"markdown","80599da7":"markdown"},"source":{"dabe4bb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff62e1ae":"import numpy as np\nimport pandas as pd\nimport os\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras import optimizers\nimport seaborn as sns\n\n%matplotlib inline","eede66b9":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","ca46b2fe":"train.head()","feacb1d8":"train['LastName'] = train['Name'].str.split(',', expand=True)[0]\ntest['LastName'] = test['Name'].str.split(',', expand=True)[0]\nds = pd.concat([train, test])\n\nsur = []\ndied = []\nfor index, row in ds.iterrows():\n    s = ds[(ds['LastName']==row['LastName']) & (ds['Survived']==1)]\n    d = ds[(ds['LastName']==row['LastName']) & (ds['Survived']==0)]\n    s=len(s)\n    if row['Survived'] == 1:\n        s-=1\n    d=len(d)\n    if row['Survived'] == 0:\n        d-=1\n    sur.append(s)\n    died.append(d)\nds['FamilySurvived'] = sur\nds['FamilyDied'] = died\n\nds['FamilySize'] = ds['SibSp'] + ds['Parch'] + 1\nds['IsAlone'] = 0\nds.loc[ds['FamilySize'] == 1, 'IsAlone'] = 1\nds['Fare'] = ds['Fare'].fillna(train['Fare'].median())\nds['Embarked'] = ds['Embarked'].fillna('Q')\n\ntrain = ds[ds['Survived'].notnull()]\ntest = ds[ds['Survived'].isnull()]\ntest = test.drop(['Survived'], axis=1)\n\ntrain['rich_woman'] = 0\ntest['rich_woman'] = 0\ntrain['men_3'] = 0\ntest['men_3'] = 0\n\ntrain.loc[(train['Pclass']<=2) & (train['Sex']=='female'), 'rich_woman'] = 1\ntest.loc[(test['Pclass']<=2) & (test['Sex']=='female'), 'rich_woman'] = 1\ntrain.loc[(train['Pclass']==3) & (train['Sex']=='male'), 'men_3'] = 1\ntest.loc[(test['Pclass']==3) & (test['Sex']=='male'), 'men_3'] = 1\n\ntrain['rich_woman'] = train['rich_woman'].astype(np.int8)\ntest['rich_woman'] = test['rich_woman'].astype(np.int8)\n\ntrain[\"Cabin\"] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in train['Cabin']])\ntest['Cabin'] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in test['Cabin']])\n\ntrain = train.drop(['PassengerId', 'Ticket', 'LastName', 'SibSp', 'Parch'], axis=1)\ntest = test.drop(['PassengerId', 'Ticket', 'LastName', 'SibSp', 'Parch'], axis=1)\n\ncategorical = ['Pclass', 'Sex', 'Embarked', 'Cabin']\nfor cat in categorical:\n    train = pd.concat([train, pd.get_dummies(train[cat], prefix=cat)], axis=1)\n    train = train.drop([cat], axis=1)\n    test = pd.concat([test, pd.get_dummies(test[cat], prefix=cat)], axis=1)\n    test = test.drop([cat], axis=1)\n    \ntrain = train.drop(['Sex_male', 'Name'], axis=1)\ntest =  test.drop(['Sex_male', 'Name'], axis=1)\n\ntrain = train.fillna(-1)\ntest = test.fillna(-1)\ntrain.head()","920bacad":"y = train['Survived']\nX = train.drop(['Survived', 'Cabin_T'], axis=1)\nX_test = test.copy()\n\nX_train, X_test1, y_train, y_test = train_test_split(X, y, random_state=4, test_size=0.2, shuffle=True)","cb7bf0f9":"print ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test1.shape,  y_test.shape)","72e4e7db":"model = tf.keras.Sequential([\nkeras.layers.Dense(512 , activation='relu' , input_shape=[23]),\nkeras.layers.Dense(512 , activation='relu'),\nkeras.layers.Dense(512 , activation='relu'),\nkeras.layers.Dense(512 , activation='relu'),\nkeras.layers.Dense(512 , activation='relu'),\n  \n\nkeras.layers.Dense(1 ) ])","47b46344":"model.compile(loss=('mse','mae'),optimizer='adam',metrics=['mse','accuracy'])","8913fa90":"history=model.fit( X_train,y_train ,epochs = 500,  validation_data=(X_test1,y_test),verbose=1 )","917067f3":"yhat_test=model.predict(X_test1)\nyhat_train=model.predict(X_train)","a2fdb26b":"width = 12\nheight = 10\nplt.figure(figsize=(width, height))\nplt.xlabel('Epoch Number')\nplt.ylabel(\"Loss Magnitude\")\nplt.plot(history.history['loss'])\nplt.show()","18bc86cb":"plt.figure(figsize=(width, height))\n\nax1 = sns.distplot(y_train, hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(yhat_train, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n\nplt.title('Actual vs Fitted Values for Price')\n\n\nplt.show()\nplt.close()","b19f757b":"plt.figure(figsize=(width, height))\n\nax2 = sns.distplot(y_test, hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(yhat_test, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax2)\n\nplt.title('Actual vs Fitted Values for Price')\n\n\nplt.show()\nplt.close()","726c7327":"preds = model.predict(X_test)\npreds = preds.astype(np.int16)\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = preds\nsubmission.to_csv('submission.csv', index=False)","bbc715af":"#Loading the data set\nreal = pd.read_csv('\/kaggle\/input\/titanic-leaked\/titanic.csv')","754e57a9":"a=submission[['Survived']].to_numpy()\nb=real[['Survived']].to_numpy()\nacc =1- (np.square(np.subtract(b, a)).mean())\nprint('Model Accuracy =',acc)","bd8a593f":"# PLOTTING LOSS Function","716fbcfc":"# Data Preprocessing","5b18fda9":"# Predicting on Training and Testing Data","03ed90fc":"# DISTRIBUTION PLOT Training","1f7f3173":"# Splitting Data into Training and Testing Datasets","1d056e9f":"# Building Deep Learning Model","f973521d":"# Compiling The Model","fb5c9482":"# Checking Accuracy against Actual Value","aeed38cd":"# Importing Libraries","8a04257e":"# Fitting Data Into The Model","026ff831":"# DISTRIBUTION PLOT Testing","80599da7":"# Predicting on TEST Dataset"}}