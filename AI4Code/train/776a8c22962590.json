{"cell_type":{"df72813c":"code","eb385101":"code","a8c6e711":"code","0e3d7911":"code","7d2c3b9a":"code","dfc99c47":"code","9f34886f":"code","def1e69e":"code","ad82870d":"code","69a83f6d":"code","dad025fd":"code","e7d24e58":"code","1b0879bd":"code","dfb03342":"code","9e20db49":"code","e78829e5":"code","c9be6024":"code","bcfa0b15":"code","b0ca30af":"code","b3f514ec":"code","daea62eb":"markdown","f8af1f6e":"markdown","68065666":"markdown","1c57931f":"markdown","66640914":"markdown","ca7fc33d":"markdown","c3b44966":"markdown"},"source":{"df72813c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","eb385101":"import numpy as np \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D","a8c6e711":"# Egitim verileri y\u00fcklenir \ntrain = pd.read_csv(\"..\/input\/digitrecognizer\/train.csv\")\nX_train, X_test, y_train, y_test = train_test_split(train.drop('label',axis = 1), train.label, \n                                                 test_size=10000, random_state=123, \n                                                 stratify=train.label)\n\nX_train, X_test = X_train.to_numpy(), X_test.to_numpy()\nprint(train.shape)\ntrain.head()","0e3d7911":"X_train = [np.reshape(x, (28,28)) for x in X_train]\nX_test = [np.reshape(x, (28,28)) for x in X_test]\nfig = plt.figure(figsize = (15,8))\nfor i, image in enumerate(X_train[:10]):\n    ax = fig.add_subplot(2, 5, i+1)\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(np.uint8(image))\nplt.show()","7d2c3b9a":"# Test verileri y\u00fcklenir\ntest= pd.read_csv(\"..\/input\/digitrecognizer\/test.csv\")\nprint(test.shape)\ntest.head()","dfc99c47":"# Egitimdeki labellar\u0131 al\u0131p Y_train elde edilir\nY_train = train[\"label\"]\n# Labellar\u0131n c\u0131kar\u0131lm\u0131\u015f hali\nX_train = train.drop(labels = [\"label\"],axis = 1) ","9f34886f":"# Veri dag\u0131l\u0131mlar\u0131 g\u00f6zlemlenir(Mesela;1 say\u0131s\u0131ndan ka\u00e7 adet var, 2 say\u0131s\u0131ndan ka\u00e7 adet var)\nplt.figure(figsize=(15,7))\ng=sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Rakamlar\u0131n da\u011f\u0131l\u0131mlar\u0131\")\nY_train.value_counts()","def1e69e":"# Veriler normalize edilir(Gri skalada g\u00f6sterilir)\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","ad82870d":"# 28x28x1 3D  4 boyutlu matris haline getirir(Reshape)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","69a83f6d":"# Rakamlar\u0131 kod kar\u015f\u0131l\u0131g\u0131na d\u00f6n\u00fcst\u00fcr\u00fcr \nfrom keras.utils.np_utils import to_categorical \nY_train = to_categorical(Y_train, num_classes = 10)","dad025fd":"# egitim ve dogrulama verileri fit edilir\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","e7d24e58":"# \u00d6rnek g\u00f6sterim\nplt.imshow(X_train[2][:,:,0],cmap='gray')\nplt.show()","1b0879bd":"# Keras k\u00fct\u00fcphanesi metodlar\u0131\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()                        #Model olu\u015fturma komutu\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))         #8 adet 5x5'lik filtre kullan\u0131lm\u0131\u015ft\u0131r\nmodel.add(MaxPool2D(pool_size=(2,2)))                                 # 2x2'lik maxpool kullan\u0131ld\u0131\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same',  #16 adet 3x3'l\u00fck filtre kullan\u0131ld\u0131\n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))                  #2 basamak atlayarak pool'u gezdirdi\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","dfb03342":"# \u00d6grenme oran\u0131 optimize edilir\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","9e20db49":"# Modeli derleme\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","e78829e5":"epochs = 10 \nbatch_size = 250","c9be6024":"# veriyi yeniden \u00fcretme\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=5,                       #resmin rastgele d\u00f6n\u00fc\u015f oran\u0131 5 derece\n        zoom_range = 0.1,                       #resme %1'lik zoom yap\u0131l\u0131yor\n        width_shift_range=0.1,                  #resmi rastgele yatayda %1'lik oranda hareket ettirir\n        height_shift_range=0.1,                 #resmi rastgele dikeyde %1'lik oranda hareket ettirir\n        horizontal_flip=False,                  #resmi rastgele yatayda \u00e7evirir\n        vertical_flip=False)                    #resmi rastgele dikeyde \u00e7evirir\n\ndatagen.fit(X_train)","bcfa0b15":"# Fit Modeli fit etme\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","b0ca30af":"# Test Kay\u0131plar\u0131n\u0131n G\u00f6rselle\u015ftirilmesi \nplt.plot(history.history['val_loss'], color='g', label=\"do\u011frulama kayb\u0131\")\nplt.title(\"Test Kayiplari\")\nplt.xlabel(\"Epoch Sayisi\")\nplt.ylabel(\"Kayiplar\")\nplt.legend()\nplt.show()","b3f514ec":"\nimport seaborn as sns\nY_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(Y_val,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Reds\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Tahmin edilen say\u0131\")\nplt.ylabel(\"Ger\u00e7ek de\u011fer\")\nplt.title(\"Tahmin-Ger\u00e7ek Tablosu\")\nplt.show()","daea62eb":"# Model Olu\u015fturma","f8af1f6e":"# Verilerin 28x28 Boyutunda \u00c7izdirilmesi","68065666":"# Verileri Yeniden \u00dcretme\n\nOverfitting engelleniyor\n","1c57931f":"# **Veriseti Y\u00fckleme**\n*Bu b\u00f6l\u00fcmde verileri y\u00fckleyip g\u00f6rselle\u015ftiriyoruz*","66640914":"# **Normalizasyon i\u015flemleri**\n","ca7fc33d":"# ","c3b44966":"# **Verilerin %'lik oalarak ka\u00e7ta ka\u00e7\u0131 test veya egitim verisi olduguna karar verilir:**\n test verisi %10\n \n egitim verisi %90\n"}}