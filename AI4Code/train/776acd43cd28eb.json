{"cell_type":{"5865ae29":"code","a29b66be":"code","7cf55ef6":"code","c54e4a33":"code","ce5b90a3":"code","d8d0c6b7":"code","dd2d5763":"code","3470c0ad":"code","1b5e3d5e":"code","5b0fcc71":"code","37ebf004":"code","0fdcdf19":"code","46f01120":"code","b7355aff":"code","cb0276d8":"code","a0c1dfb2":"code","45f6aa3f":"code","92e94e72":"code","482a613a":"code","4ea58c2b":"code","79f7015e":"code","bff055ff":"code","c4327e08":"code","f1522149":"code","85057048":"code","37e5a3ab":"code","3a3b385a":"code","9c472ff8":"code","e24d2711":"code","43404f94":"code","316ac49e":"code","3388d519":"code","5e314184":"code","7a1091d5":"code","1ad06cdd":"code","7706a783":"code","b69beb38":"code","ecedf88f":"code","4120a217":"code","fe5134d8":"code","886f5c9f":"code","ff9bdc24":"code","cd173d8f":"code","7c783a08":"code","5b3fa9e1":"code","f4b85b60":"code","5606717e":"code","640c2756":"code","7024f8d4":"code","6f3b1248":"code","b06ee629":"code","e29bda75":"code","51735118":"code","a489c3b3":"code","b7505fb0":"code","d43ee59c":"code","126e72d1":"code","b17cbbde":"code","845a6643":"code","e64ae157":"code","b41504ce":"code","5fd26b16":"code","3ec95552":"code","0d1cf6e8":"code","472e7bba":"code","377b4368":"code","1ed3f9dc":"code","09c8d860":"code","e2a4d809":"code","f4551b28":"markdown","e3138ad7":"markdown","76ff1ccb":"markdown","55c13900":"markdown","308d44af":"markdown","a5c582ef":"markdown","02d8892a":"markdown","ddec4d64":"markdown","7a8909a4":"markdown","421da397":"markdown","7afc8964":"markdown","d1e12075":"markdown","14101455":"markdown","97782516":"markdown","98ceddaa":"markdown","53406b4f":"markdown","3f001769":"markdown","7766e4b7":"markdown","fa5fce15":"markdown","dfa18eb6":"markdown","568ef34f":"markdown","49fa70b4":"markdown","3d363702":"markdown","18d7a0db":"markdown","8b4b2835":"markdown","ee999cd2":"markdown","5fcf4257":"markdown","0eac6f85":"markdown","2d5ae054":"markdown","e61f9dd5":"markdown","5e656607":"markdown","c5104911":"markdown","65076e0f":"markdown","3cd4d9cf":"markdown","260b4d8f":"markdown","6ee375e9":"markdown","f03607e6":"markdown","eab53fa0":"markdown","343d49c7":"markdown","ffaca34c":"markdown","9263c8d6":"markdown","33e8e259":"markdown","70ffe09a":"markdown"},"source":{"5865ae29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a29b66be":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom PIL import Image\nimport gc","7cf55ef6":"train_df = pd.read_csv(\"..\/input\/train\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test\/test.csv\")","c54e4a33":"print(\"train.csv shape is {}\".format(train_df.shape))\nprint(\"test.csv shape is {}\".format(test_df.shape))","ce5b90a3":"train_df.head()","d8d0c6b7":"test_df.head()","dd2d5763":"train_df.isnull().sum()","3470c0ad":"test_df.isnull().sum()","1b5e3d5e":"fig, ax = plt.subplots(figsize=(6, 5))\nax.set_title(\"AdoptionSpeed count in train\")\nsns.countplot(x=\"AdoptionSpeed\", data=train_df, ax=ax)","5b0fcc71":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.set_title(\"Type count in train data\")\n#ax1.patch.set_facecolor(\"blue\")\n#ax1.patch.set_alpha(0.3)\nax2.set_title(\"Type count in test data\")\n#ax2.patch.set_facecolor(\"yellow\")\n#ax2.patch.set_alpha(0.3)\ng = sns.catplot(data=train_df, x=\"Type\", kind=\"count\", ax=ax1)\nplt.close(g.fig)\ng = sns.catplot(data=test_df, x=\"Type\", kind=\"count\", ax=ax2)\nplt.close(g.fig)","37ebf004":"fig, ax1 = plt.subplots(figsize=(8, 5))\n#ax1.set_title(\"train data\")\n#ax1.patch.set_facecolor(\"blue\")\n#ax1.patch.set_alpha(0.3)\ng = sns.catplot(data=train_df, x=\"Type\", hue=\"AdoptionSpeed\", kind=\"count\", ax=ax1)\nplt.close(g.fig)","0fdcdf19":"print(\"The amount of unique Name is {} in train\".format(train_df.Name.nunique()))\nprint(\"train shape is {}\".format(train_df.shape))\nprint(\"The amount of unique Name is {} in test\".format(test_df.Name.nunique()))\nprint(\"test shape is {}\".format(test_df.shape))","46f01120":"train_df.Name","b7355aff":"print(\"Age in train\")\nprint(train_df.Age.describe())\nprint(\"\\n\\n\")\nprint(\"Age in test\")\nprint(test_df.Age.describe())","cb0276d8":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True) \nsns.distplot(train_df.Age, ax=ax1, bins=20, kde=False)\nsns.distplot(test_df.Age, ax=ax2, bins=20, kde=False)\nax1.set_title(\"Age histgram(bin=10) in train data\", fontsize=15)\nax2.set_title(\"Age histgram(bin=10) in test data\", fontsize=15)\nax1.tick_params(labelsize=14)\nax2.tick_params(labelsize=14)","a0c1dfb2":"fig, ax = plt.subplots(figsize=(8, 5))\nax = sns.stripplot(x=\"AdoptionSpeed\", y=\"Age\", data=train_df, ax=ax)","45f6aa3f":"train_df.loc[:, [\"Breed1\", \"Breed2\"]].head(10)","92e94e72":"train_df.loc[:, [\"Breed1\", \"Breed2\"]].describe()","482a613a":"test_df.loc[:, [\"Breed1\", \"Breed2\"]].describe()","4ea58c2b":"print(\"The number of mixed in train: {}({:.2%})\".format(train_df.query(\"Breed2 != 0\").Type.count(), train_df.query(\"Breed2 != 0\").Type.count()\/len(train_df)))\nprint(\"The number of mixed in test: {}({:.2%})\".format(test_df.query(\"Breed2 != 0\").Type.count(), test_df.query(\"Breed2 != 0\").Type.count()\/len(test_df)))","79f7015e":"breed_df = pd.read_csv(\"..\/input\/breed_labels.csv\")\nbreed_df.head()","bff055ff":"breed_df.tail()","c4327e08":"fig, ax = plt.subplots()\nsns.countplot(x=\"Type\", data=breed_df, ax=ax)\ng = ax.set_title(\"Breeder type count\")","f1522149":"print(\"The number of Breed1=0 in train: {}\".format(train_df.query(\"Breed1 == 0\").Type.count()))\nprint(\"The number of Breed1=0 in test: {}\".format(test_df.query(\"Breed1 == 0\").Type.count()))\nprint(\"The number of Breed1=307 in train: {}\".format(train_df.query(\"Breed1 == 307\").Type.count()))\nprint(\"The number of Breed1=307 in test: {}\".format(test_df.query(\"Breed1 == 307\").Type.count()))","85057048":"train_df.query(\"Breed1 == 0\")","37e5a3ab":"train_df.query(\"Breed1 == 307\").head()","3a3b385a":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nsns.countplot(x=\"Gender\", data=train_df, ax=ax1)\nsns.countplot(x=\"Gender\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each Gender in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each Gender in test data\", fontsize=15)","9c472ff8":"fig, ax = plt.subplots(figsize=(8, 5))\nax = sns.countplot(x=\"Gender\", data=train_df, ax=ax, hue=\"AdoptionSpeed\")","e24d2711":"train_df.loc[:, [\"Color1\", \"Color2\", \"Color3\"]].head(10)","43404f94":"train_df.loc[:, [\"Color1\", \"Color2\", \"Color3\"]].describe()","316ac49e":"test_df.loc[:, [\"Color1\", \"Color2\", \"Color3\"]].describe()","3388d519":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\nax1 = sns.countplot(x=\"Color1\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"Color1\", data=test_df, ax=ax2)","5e314184":"color_df = pd.read_csv(\"..\/input\/color_labels.csv\")","7a1091d5":"color_df","1ad06cdd":"print(\"The number of nothing color(color1,2,3 == 0) pet: {}\".format(train_df.query(\"Color1==0 & Color2==0 & Color3==0\").shape[0]))","7706a783":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.countplot(x=\"MaturitySize\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"MaturitySize\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each MaturitySize in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each MaturitySize in test data\", fontsize=15)","b69beb38":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.countplot(x=\"FurLength\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"FurLength\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each FurLength in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each FurLength in test data\", fontsize=15)","ecedf88f":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.countplot(x=\"Vaccinated\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"Vaccinated\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each Vaccinated in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each Vaccinated in test data\", fontsize=15)","4120a217":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.countplot(x=\"Dewormed\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"Dewormed\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each Dewormed in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each Dewormed in test data\", fontsize=15)","fe5134d8":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.countplot(x=\"Sterilized\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"Sterilized\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each Sterilized in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each Sterilized in test data\", fontsize=15)","886f5c9f":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.countplot(x=\"Health\", data=train_df, hue=\"AdoptionSpeed\", ax=ax1)\nax2 = sns.countplot(x=\"Health\", data=test_df, ax=ax2)\nax1.set_title(\"The amount of each Health in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of each Health in test data\", fontsize=15)","ff9bdc24":"train_df.Quantity.describe()","cd173d8f":"test_df.Quantity.describe()","7c783a08":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.distplot(train_df.Quantity, kde=False, bins=20, ax=ax1)\nax2 = sns.distplot(test_df.Quantity, kde=False, bins=20, ax=ax2)\nax1.set_title(\"The amount of Quantity in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of Quantity in test data\", fontsize=15)","5b3fa9e1":"fig, ax = plt.subplots(figsize=(8, 5))\nax = sns.stripplot(x=\"Quantity\", y=\"AdoptionSpeed\", data=train_df, ax=ax)","f4b85b60":"train_df.Fee.describe()","5606717e":"test_df.Fee.describe()","640c2756":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1 = sns.distplot(train_df.Fee, kde=False, bins=20, ax=ax1)\nax2 = sns.distplot(test_df.Fee, kde=False, bins=20, ax=ax2)\nax1.set_title(\"The amount of Fee in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of Fee in test data\", fontsize=15)","7024f8d4":"fig, ax = plt.subplots(figsize=(8, 5))\nax = sns.stripplot(x=\"Fee\", y=\"AdoptionSpeed\", data=train_df, ax=ax)\n#ax.set_xticks(np.arange(0, 10))","6f3b1248":"train_df.State.head(10)","b06ee629":"test_df.State.head(10)","e29bda75":"state_df = pd.read_csv(\"..\/input\/state_labels.csv\")\nstate_df.head()","51735118":"print(\"StateID min in train: {}\".format(train_df.State.min()))\nprint(\"StateID max in train: {}\".format(train_df.State.max()))\nprint(\"StateID min in test: {}\".format(test_df.State.min()))\nprint(\"StateID max in test: {}\".format(test_df.State.max()))\nprint(\"StateID min in state_labels: {}\".format(state_df.StateID.min()))\nprint(\"StateID max in state_labels: {}\".format(state_df.StateID.max()))","a489c3b3":"print(\"train data num is {}, the number of unique RescureID is {}\".format(train_df.shape[0], train_df.RescuerID.nunique()))\nprint(\"test data num is {}, the number of unique RescureID is {}\".format(test_df.shape[0], test_df.RescuerID.nunique()))","b7505fb0":"sorted(train_df.groupby([\"RescuerID\"]).Type.count().values, reverse=True)[:15]","d43ee59c":"train_df.VideoAmt.describe()","126e72d1":"test_df.VideoAmt.describe()","b17cbbde":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), sharex=True)\nax1 = sns.distplot(train_df.VideoAmt, kde=False, bins=9, ax=ax1)\nax2 = sns.distplot(test_df.VideoAmt, kde=False, bins=9, ax=ax2)\nax1.set_title(\"The amount of VideoAmt in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of VideoAmt in test data\", fontsize=15)","845a6643":"fig, ax = plt.subplots(figsize=(8, 5))\nax = sns.stripplot(x=\"VideoAmt\", y=\"AdoptionSpeed\", data=train_df, ax=ax)\n#ax.set_xticks(np.arange(0, 10))","e64ae157":"train_df.PhotoAmt.describe()","b41504ce":"test_df.PhotoAmt.describe()","5fd26b16":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5), sharex=True)\nax1 = sns.distplot(train_df.PhotoAmt, kde=False, bins=30, ax=ax1)\nax2 = sns.distplot(test_df.PhotoAmt, kde=False, bins=30, ax=ax2)\nax1.set_title(\"The amount of PhotoAmt in train data\", fontsize=15)\ng = ax2.set_title(\"The amount of PhotoAmt in test data\", fontsize=15)","3ec95552":"fig, ax = plt.subplots(figsize=(8, 5))\nax = sns.stripplot(x=\"PhotoAmt\", y=\"AdoptionSpeed\", data=train_df, ax=ax)\n#ax.set_xticks(np.arange(0, 10))","0d1cf6e8":"train_df.Description.head()","472e7bba":"test_df.Description.head()","377b4368":"g = pd.plotting.scatter_matrix(train_df, alpha=0.8, figsize=(12,12), range_padding=0.5)","1ed3f9dc":"fig, ax = plt.subplots(figsize=(12, 9)) \nax = sns.heatmap(train_df.corr(), square=True, vmax=1, vmin=-1, center=0)","09c8d860":"fig, axes = plt.subplots(4,3, figsize=(15, 20))\nimages_train = os.listdir(\"..\/input\/train_images\/\")\nfig.suptitle(\"train images\")\nfor i, img in enumerate(np.random.choice(images_train, 12)):\n    image = Image.open(\"..\/input\/train_images\/\" + img)\n    axes[i\/\/3, i%3].imshow(image)","e2a4d809":"fig, axes = plt.subplots(4,3, figsize=(15, 20))\nimages_train = os.listdir(\"..\/input\/test_images\/\")\nfig.suptitle(\"test images\")\nfor i, img in enumerate(np.random.choice(images_train, 12)):\n    image = Image.open(\"..\/input\/test_images\/\" + img)\n    axes[i\/\/3, i%3].imshow(image)","f4551b28":"## FurLength\nFur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)","e3138ad7":"## RescuerID\nUnique hash ID of rescuer","76ff1ccb":"## Dewormed(\u866b\u4e0b\u3057)\nPet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)","55c13900":"Most pet is under 100 months old(abount 8)  \nbut Max is 255 months old(about 21)  \nwe can show a weak correlation  ","308d44af":"### Let's check breed label\n* breed_labels.csv - Contains Type, and BreedName for each BreedID. Type 1 is dog, 2 is cat.","a5c582ef":"## AdoptionSpeed (Target)\nContestants are required to predict this value.  \nThe value is determined by how quickly, if at all, a pet is adopted. \nThe values are determined in the following way:   \n0 - Pet was adopted on the same day as it was listed.   \n1 - Pet was adopted between 1 and 7 days (1st week) after being listed.   \n2 - Pet was adopted between 8 and 30 days (1st month) after being listed.   \n3 - Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed.   \n4 - No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days).  ","02d8892a":"Some name is duplicated  \nAnd we can see many type of names  \nNaN is not Named  \nBut \"No Name Yet\" and \"No Name\" is name like the book \"I am a CAT\"?  ","ddec4d64":"### Let's check color labels\n* Contains ColorName for each ColorID","7a8909a4":"some rescuer rescued too many times","421da397":"there are same distribution in train\/test","7afc8964":"The number of Type=1(Dog) is more than Type=2(Cat) in train  \ntest show a reverse trend  \nBut this different is not big  ","d1e12075":"# train\/test.csv  \nTabular\/text data for the training set  \n\n## Data Fields\n* PetID - Unique hash ID of pet profile\n* AdoptionSpeed - Categorical speed of adoption. **Lower is faster.** <font color=\"red\">This is the value to predict. <\/font> See below section for more info.\n* Type - Type of animal (1 = Dog, 2 = Cat)\n* Name - Name of pet (Empty if not named)\n* Age - Age of pet when listed, in months\n* Breed1 - Primary breed of pet (Refer to BreedLabels dictionary)\n* Breed2 - Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)\n* Gender - Gender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)\n* Color1 - Color 1 of pet (Refer to ColorLabels dictionary)\n* Color2 - Color 2 of pet (Refer to ColorLabels dictionary)\n* Color3 - Color 3 of pet (Refer to ColorLabels dictionary)\n* MaturitySize - Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)\n* FurLength - Fur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)\n* Vaccinated - Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)\n* Dewormed - Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)\n* Sterilized - Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)\n* Health - Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)\n* Quantity - Number of pets represented in profile\n* Fee - Adoption fee (0 = Free)\n* State - State location in Malaysia (Refer to StateLabels dictionary)\n* RescuerID - Unique hash ID of rescuer\n* VideoAmt - Total uploaded videos for this pet\n* PhotoAmt - Total uploaded photos for this pet\n* Description - Profile write-up for this pet. The primary language used is English, with some in Malay or Chinese.","14101455":"# Let's predict the adoptability of pets!\nPlease tell me if I make mistake\n\n## Notes\nIn this competition you will **predict the speed at which a pet is adopted**, based on the pet\u2019s listing on PetFinder.   \nSometimes a profile represents a group of pets. In this case, the speed of adoption is determined by the speed at which all of the pets are adopted.  \n**The data included text, tabular, and image data**. See below for details.   \nThis is a Kernels-only competition.  \nAt the end of the competition, test data will be replaced in their entirety with new data of approximately the same size, and **your kernels will be rerun on the new data**.  \n\n## File descriptions\n* train.csv - Tabular\/text data for the training set\n* test.csv - Tabular\/text data for the test set\n* sample_submission.csv - A sample submission file in the correct format\n* breed_labels.csv - Contains Type, and BreedName for each BreedID. Type 1 is dog, 2 is cat.\n* color_labels.csv - Contains ColorName for each ColorID\n* state_labels.csv - Contains StateName for each StateID","97782516":"## Color1 ,2 ,3\n* Color1 -  Color 1 of pet (Refer to ColorLabels dictionary)\n* Color2 - Color 2 of pet (Refer to ColorLabels dictionary)\n* Color3 - Color 3 of pet (Refer to ColorLabels dictionary)","98ceddaa":"# Images","53406b4f":"## Name\nName of pet (Empty if not named)","3f001769":"## Health\nHealth Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)","7766e4b7":"## State\nState location in Malaysia (Refer to StateLabels dictionary)","fa5fce15":"## Description\nProfile write-up for this pet. The primary language used is English, with some in Malay or Chinese.","dfa18eb6":"## Vaccinated(\u4e88\u9632\u63a5\u7a2e)\nPet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)","568ef34f":"## correlation headmap","49fa70b4":"Many quantity is not fast AdoptionSpeed","3d363702":"## Gender \nGender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)","18d7a0db":"Most pet is good Health  \nNot Healty pet is not fast adoption speed","8b4b2835":"## Quantity\nNumber of pets represented in profile","ee999cd2":"BreedID starts from 1  to 306  \nbut some pet's Breed1 is 0  \nthis means the pet primary breed is unknow?  \nand some pet's Breed1 is 307  \nBreedID:307 is not in breed label  \nso BreedID = 0 or 307 means unknown?  ","5fcf4257":"## MaturitySize \nSize at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)","0eac6f85":"## Fee\nAdoption fee (0 = Free)","2d5ae054":"## VideoAmt\nTotal uploaded videos for this pet","e61f9dd5":"## check Null","5e656607":"Late adoption speed pet is high ratio in sterilized  \nAdoption speed ==2 pet is high ration in not sterilized  ","c5104911":"## Type\nType of animal (1 = Dog, 2 = Cat) ","65076e0f":"## PhotoAmt\nTotal uploaded photos for this pet","3cd4d9cf":"train and test data have **some null in Name and Desctiption columns**  ","260b4d8f":"### Let's check StateLabels\n* state_labels.csv - Contains StateName for each StateID","6ee375e9":"Thank you for watching my kernel.  \nI hope you will find the kernel useful.  \n# In Progress...\n* add contemt  \n* make baseline model\n* fix figure axis error","f03607e6":"# So Cute!!!!!","eab53fa0":"## Breed1,2(\u7a2e\u985e\uff0c\u72ac\u7a2e)\n* Breed1 - Primary breed of pet (Refer to BreedLabels dictionary)\n* Breed2 - Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)","343d49c7":"## Sterilized(\u4e0d\u598a\u624b\u8853)\nPet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)","ffaca34c":"## Age\nAge of pet when listed, in months  ","9263c8d6":"FurLength == 0(Not Specified) is not exist  ","33e8e259":"## PairPlot","70ffe09a":"MaturitySize == 0(Not Specified) is not exist  "}}