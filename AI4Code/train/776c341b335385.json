{"cell_type":{"c54751ea":"code","1ec54130":"code","6b4bf6e2":"code","b7474920":"code","e21e90ef":"code","34467764":"code","6be489bd":"code","9d8280d9":"code","f593525c":"code","7137d805":"code","5976385c":"code","3ac5f9d1":"code","d96a1956":"code","3d8f4437":"code","1535cab7":"code","431a4aef":"code","e773b7c7":"code","e7ed10c7":"code","83e8b156":"code","af94f51f":"code","9730b27d":"code","14414a99":"code","2526ebd2":"code","6a277849":"markdown","078cd237":"markdown","c1e47615":"markdown","d1b4c128":"markdown","5d168794":"markdown","5c3b68fe":"markdown","614a84cd":"markdown","91567958":"markdown","03f41280":"markdown","97e5688c":"markdown","12325e73":"markdown","3e8a5a8d":"markdown"},"source":{"c54751ea":"class Car:                                  #class\n    def __init__(self,name,color,age):      #method\n        self.name = name                    #variable\n        self.color = color\n        self.age = age\n    def statement(self):\n        return '{}\\'s favorite color is {} and his\/her age is {}'.format(self.name,self.color,self.age)","1ec54130":"car1 = Car('Bhavya','black',21)              #object","6b4bf6e2":"car1.statement()","b7474920":"car2 = Car('Vaishali','blue',24)\ncar2.statement()","e21e90ef":"#All class variables are public\nclass Car():\n    def __init__(self, windows, doors, enginetype):\n        self.windows = windows\n        self.doors = doors\n        self.enginetype = enginetype","34467764":"audi = Car(4,5,'Diesel')","6be489bd":"dir(audi)","9d8280d9":"audi.windows = 5\nprint(audi.windows)","f593525c":"#All class variables are protected\nclass Car1():\n    def __init__(self, windows, doors, enginetype):\n        self._windows = windows\n        self._doors = doors\n        self._enginetype = enginetype","7137d805":"class Truck(Car1):\n    def __init__(self, windows, doors, enginetype, horsepower):\n        super().__init__(windows, doors, enginetype)\n        self.horsepower = horsepower","5976385c":"truck = Truck(4,4,'Diesel',4000)\ndir(truck)","3ac5f9d1":"truck._doors = 5\nprint(truck._doors)","d96a1956":"bmw = Car1(4,4,'Diesel')","3d8f4437":"dir(bmw)","1535cab7":"#All class variables are private\nclass Car():\n    def __init__(self, windows, doors, enginetype):\n        self.__windows = windows\n        self.__doors = doors\n        self.__enginetype = enginetype","431a4aef":"nano = Car(3,3,'Petrol')","e773b7c7":"dir(nano)","e7ed10c7":"#All class variables are public\nclass Car():\n    def __init__(self, windows, doors, enginetype):\n        self.windows = windows\n        self.doors = doors\n        self.enginetype = enginetype\n    def drive(self):\n        print('The person is driving')","83e8b156":"car = Car(4,4,'Diesel')","af94f51f":"car.drive()","9730b27d":"class bmw(Car):\n    def __init__(self, windows, doors, enginetype, enableai):\n        super().__init__(windows, doors, enginetype)\n        self.enableai = enableai\n    def selfDriving(self):\n        print('Bmw supports aut driving')\n        ","14414a99":"bmw1 = bmw(4,5,'Diesel',True)","2526ebd2":"dir(bmw1)","6a277849":"### Class, method, variable and object ","078cd237":"Creating class methods and variables","c1e47615":"Here, Car1 is the parent class, Truck is child class. This is known as inheritance as the truck class is inheriting the functionality of other class\n\nIn the output of the below code, \n\nwe can see that windows, doors, enginetype are protected whereas horsepower which belongs to truck is public","d1b4c128":"### Python OOPS - Public, Protected and Private","5d168794":"In the below output we can see the first three members are private ","5c3b68fe":"Protected variable are those data members of the class that can be accessed within the class and the classes derived from that class\n\nThey are denoted by '_' <br>\n*Example: self._windows*\n\nNote that python language does not restrict the usage of these variables like other languages. It is just to indicate the coder that protected variable are supposed t be called in that particular class or other classes derived from that class","614a84cd":"Creating an object of the above class","91567958":"### Python - OOPS Inheritance ","03f41280":"When we declare data member as private it means they are accessible only side the class and are inaccessible outside the class. The technique of making a variable or method private is called data mangling.\n\nPrivate variables are declared using '__ ' <br>\n*For example: self.__ windows*\n\n","97e5688c":"Variables that are public can be accessed anywhere","12325e73":"Calling the function of the class","3e8a5a8d":"In the output shown below for dir(audi), at the end we can find doors, enginetype, windows as they are public"}}