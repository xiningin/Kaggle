{"cell_type":{"e29dcb9f":"code","0953fe91":"code","36c18ec3":"code","f1fd0ea7":"code","defa87ef":"code","71965f44":"code","2d437d8c":"code","7b9fd961":"code","06081fa1":"code","c9590f39":"code","223916be":"code","7139c1a6":"code","297e1c3d":"code","1e00b2d8":"code","e03acf2b":"code","c866a3b0":"code","c9bf5754":"code","0a250e01":"code","42a948b2":"code","df0401a3":"code","e3d771da":"code","86c6e91b":"code","142ac14c":"code","2e111aa0":"code","e8587d43":"code","52da9a93":"code","e4476eec":"code","ceff37d4":"code","36e87481":"code","a11c249f":"code","797877b4":"code","21cdbcac":"code","2164d651":"code","160ce3f8":"code","ac5d1ca1":"code","6e0b1f1a":"code","307dfa4f":"code","ef04fe7a":"code","deb433fc":"code","01b411e7":"code","0fdfbfab":"markdown","9d615d2c":"markdown"},"source":{"e29dcb9f":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# ML Packages\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB\nfrom sklearn.metrics import accuracy_score, hamming_loss, classification_report","0953fe91":"# Split DataSet\nfrom sklearn.model_selection import train_test_split\n\n# Feature Engineering\nfrom sklearn.feature_extraction.text import TfidfVectorizer","36c18ec3":"# Multi Label Packages\nfrom skmultilearn.problem_transform import BinaryRelevance, ClassifierChain, LabelPowerset\nfrom skmultilearn.adapt import MLkNN","f1fd0ea7":"df = pd.read_csv(\"..\/input\/multilabel-sample-dataset\/multilabel_dataset.csv\")","defa87ef":"df.head()","71965f44":"df.loc[0].title","2d437d8c":"df.dtypes","7b9fd961":"# Convert to Float\ndf['mysql'] = df['mysql'].astype(float)","06081fa1":"df.dtypes","c9590f39":"# Value Count\nsns.countplot(df['python'])\nplt.show()","223916be":"# Value Count\nsns.countplot(df['php'])\nplt.show()","7139c1a6":"df.php.value_counts()","297e1c3d":"df.php.value_counts().plot(kind = 'bar')","1e00b2d8":"!pip install neattext","e03acf2b":"# Text Preprocessing\nimport neattext as nt\nimport neattext.functions as nfx","c866a3b0":"# Explore Noise\ndf.title.apply(lambda x:nt.TextFrame(x).noise_scan())","c9bf5754":"dir(nfx)","0a250e01":"df.title.apply(nfx.remove_stopwords)","42a948b2":"corpus = df.title.apply(nfx.remove_stopwords)","df0401a3":"tfidf = TfidfVectorizer()","e3d771da":"tfidf","86c6e91b":"X = tfidf.fit_transform(corpus).toarray()","142ac14c":"X","2e111aa0":"y = df[['mysql', 'python', 'php']]","e8587d43":"# Split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99)","52da9a93":"# MOdel\nimport skmultilearn","e4476eec":"# COnvert multilabel problem to multiclass \nbinary_rel_clf = BinaryRelevance(MultinomialNB())","ceff37d4":"binary_rel_clf.fit(X_train, y_train)","36e87481":"pred_br = binary_rel_clf.predict(X_valid)","a11c249f":"pred_br","797877b4":"# Convert to Array\npred_br.toarray()","21cdbcac":"# Accuracy\naccuracy_score(y_valid, pred_br)","2164d651":"# Hamming Loss : Incorrect Predicitions\n# Lower the value, better the model\nhamming_loss(y_valid, pred_br)","160ce3f8":"# Define a function to train a model\ndef build_model(model, mlb_estimator, X_train, y_train, X_valid, y_valid):\n    # Create an instance\n    clf = mlb_estimator(model)\n    clf.fit(X_train, y_train)\n    \n    # Predict\n    pred_clf = clf.predict(X_valid)\n    \n    # CHeck for Accuracy\n    acc = accuracy_score(y_valid, pred_clf)\n    ham = hamming_loss(y_valid, pred_clf)\n    \n    result = {\"Accuracy\" : acc, \"Hamming Loss\" : ham}\n    return result","ac5d1ca1":"# Classifier Chains : It preserve label correlation\nmodel_chains = build_model(MultinomialNB(), ClassifierChain, X_train, y_train, X_valid, y_valid )","6e0b1f1a":"model_chains","307dfa4f":"# LabelPowerset\nmodel_labelps = build_model(MultinomialNB(), LabelPowerset, X_train, y_train, X_valid, y_valid )\nmodel_labelps","ef04fe7a":"df['title'].iloc[0]","deb433fc":"# Vectorized\nex1 = df['title'].iloc[0]\nvec_example = tfidf.transform([ex1])\nvec_example","01b411e7":"binary_rel_clf.predict(vec_example).toarray()","0fdfbfab":"# test","9d615d2c":"# Feature Engineering"}}