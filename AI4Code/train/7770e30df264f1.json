{"cell_type":{"61b1dbc9":"code","fb52e2a1":"code","d5d19053":"code","349b3369":"code","4dbcbce1":"code","67d9967f":"code","d5585711":"code","3fe664b7":"code","7aa47700":"code","1cb98fa2":"code","c24b8c08":"code","608bf21b":"code","a4aede67":"markdown"},"source":{"61b1dbc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fb52e2a1":"data=pd.read_csv(\"..\/input\/column_2C_weka.csv\")","d5d19053":"data.head()","349b3369":"data.info()","4dbcbce1":"data=data.rename(columns={\"class\": \"degree\"})\ndata.head()","67d9967f":"A=data[data.degree==\"Abnormal\"]\nN=data[data.degree==\"Normal\"]","d5585711":"#scatter plot\nplt.scatter(A.pelvic_radius,A.lumbar_lordosis_angle,color=\"red\",label=\"anormal\")\nplt.scatter(N.pelvic_radius,N.lumbar_lordosis_angle,color=\"green\",label=\"normal\")\nplt.xlabel(\"pelvic_radius\")\nplt.ylabel(\"lumbar_lordosis_angle\")\nplt.legend()\nplt.show()","3fe664b7":"#binary sisteme \u00e7evir\ndata.degree=[1 if each==\"Normal\" else 0 for each in data.degree]\nx_data=data.drop([\"degree\"],axis=1)\ny=data.degree.values","7aa47700":"#normalization\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))","1cb98fa2":"#train test split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)","c24b8c08":"#knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)# n_neighbors=k\nknn.fit(x_train,y_train)\nprediction=knn.predict(x_test)\nprint(\" {} nn score: {}\".format(3,knn.score(x_test,y_test)))","608bf21b":"#en iyi de\u011fer\n\nscore_list=[]\nfor each in range(1,50):\n    knn= KNeighborsClassifier(n_neighbors=each) # n_neighbors=k\n    knn.fit(x_train,y_train)\n    score_list.append(knn.score(x_test,y_test))\n    \nplt.plot(range(1,50),score_list)\nplt.xlabel(\"k de\u011ferleri\")\nplt.ylabel(\"ba\u015far\u0131 de\u011ferleri\")\nplt.show()","a4aede67":"# knn\n* import dateset\n* dataset tan\u0131t\u0131m\n* dataset g\u00f6rselle\u015ftirme\n* knn with skelearn\n"}}