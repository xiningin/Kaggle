{"cell_type":{"bac78f17":"code","c20c108c":"code","92313b39":"code","a2adc33f":"code","9d9c0eed":"code","e81f4eef":"code","207e246f":"code","9b7f79ba":"code","17d0fed7":"code","89310026":"code","54560bf6":"code","8b962f35":"code","71c0cf87":"code","4af43813":"code","d240f34f":"code","8b8549bc":"code","7e99307f":"code","9a4b7c32":"code","92333881":"code","75e2ea6d":"markdown","b0a510be":"markdown","57509701":"markdown"},"source":{"bac78f17":"import numpy as np\nimport pandas as pd","c20c108c":"df = pd.read_csv(\"..\/input\/mushrooms.csv\")\nprint(df.shape)\nfor col in df.columns:\n    df.rename(columns={col:col.capitalize()}, inplace=True)   #I just like it capitalized\ndf.describe()","92313b39":"def SporeNamer(x):\n    if x == 'k':\n        return 'Black'\n    if x == 'n':\n        return 'Brown'\n    if x == 'b':\n        return 'Buff'\n    if x == 'h':\n        return 'Chocolate'\n    if x == 'r':\n        return 'Green'\n    if x == 'o':\n        return 'Orange'\n    if x == 'u':\n        return 'Purple'\n    if x == 'w':\n        return 'White'\n    return 'Yellow'\ndef OdorNamer(x):\n    if x == 'a':\n        return 'Almond'\n    if x == 'l':\n        return 'Anise'\n    if x == 'c':\n        return 'Creosote'\n    if x == 'y':\n        return 'Fishy'\n    if x == 'f':\n        return 'Foul'\n    if x == 'm':\n        return 'Musty'\n    if x == 'n':\n        return 'None'\n    if x == 'p':\n        return 'Pungent'\n    return 'Spicy'\ndef GillNamer(x):\n    if x == 'k':\n        return 'Black'\n    if x == 'n':\n        return 'Brown'\n    if x == 'b':\n        return 'Buff'\n    if x == 'h':\n        return 'Chocolate'\n    if x == 'r':\n        return 'Green'\n    if x == 'o':\n        return 'Orange'\n    if x == 'p':\n        return 'Pink'\n    if x == 'e':\n        return 'Red'\n    if x == 'u':\n        return 'Purple'\n    if x == 'w':\n        return 'White'\n    return 'Yellow'\ndef PopNamer(x):\n    if x == 'a':\n        return 'Abundant'\n    if x == 'c':\n        return 'Clustered'\n    if x == 'n':\n        return 'Numerous'\n    if x == 's':\n        return 'Scattered'\n    if x == 'v':\n        return 'Several'\n    return 'Solitary'","a2adc33f":"df['Class'] = df['Class'].apply(lambda x: 'Edible' if x == 'e' else 'Poisonous')\ndf['Bruises'] = (df['Bruises'] == 't')\n\ndf['Odor'] = df['Odor'].apply(OdorNamer)\ndf['Spore-print-color'] = df['Spore-print-color'].apply(SporeNamer)\ndf['Gill-color'] = df['Population'].apply(GillNamer)\ndf['Population'] = df['Population'].apply(PopNamer)\ndf.rename(columns={'Class':'Edible'}, inplace=True)\ndf.drop('Veil-type',axis=1,  inplace=True)\ndf.head()","9d9c0eed":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()\ndfEncoded = df.apply(lambda col: LE.fit_transform(col))\ndfEncoded.head()","e81f4eef":"dfEncoded.describe()","207e246f":"# Classification\nfrom sklearn.ensemble import RandomForestClassifier,BaggingClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Modelling Helpers :\nfrom sklearn.model_selection import train_test_split","9b7f79ba":"RFC = RandomForestClassifier(n_estimators=666, random_state=82)\nKNN = KNeighborsClassifier(n_neighbors = 1)\nBAG = BaggingClassifier(random_state = 222, n_estimators=92)\nGradBost = GradientBoostingClassifier(random_state = 15)\nADA = AdaBoostClassifier(random_state = 37)\nDT = DecisionTreeClassifier(random_state=12)","17d0fed7":"x = dfEncoded.copy()\ny = x.pop('Edible')\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 37)","89310026":"RFC.fit(x_train,y_train)\nRFC_pred = RFC.predict(x_test)\nprint(\"accuracy: {} %\".format((RFC.score(x_test,y_test)*100)))\nfor Counter, i in enumerate(RFC.feature_importances_):\n    if i > 0.10:\n        print(\"{} makes up {} % of the decision making process\".format(x.columns[Counter], (\"%.2f\" % (i*100))))","54560bf6":"DT.fit(x_train,y_train)\nDT_pred = DT.predict(x_test)\nprint(\"accuracy: \"+ str(DT.score(x_test,y_test)*100) + \"%\")\nfor Counter, i in enumerate(DT.feature_importances_):\n    if i > 0.10:\n        print(\"{} makes up {} % of the decision making process\".format(x.columns[Counter], (\"%.2f\" % (i*100))))","8b962f35":"ADA.fit(x_train,y_train)\nADA_pred = ADA.predict(x_test)\nprint(\"accuracy: \"+ str(ADA.score(x_test,y_test)*100) + \"%\")\nfor Counter, i in enumerate(ADA.feature_importances_):\n    if i > 0.10:\n        print(\"{} makes up {} % of the decision making process\".format(x.columns[Counter], (\"%.2f\" % (i*100))))","71c0cf87":"GradBost.fit(x_train,y_train)\nGradBost_pred = GradBost.predict(x_test)\nprint(\"accuracy: \"+ str((\"%.2f\" %(GradBost.score(x_test,y_test)*100))) + \"%\")\nfor Counter, i in enumerate(GradBost.feature_importances_):\n    if i > 0.10:\n        print(\"{} makes up {} % of the decision making process\".format(x.columns[Counter], (\"%.2f\" % (i*100))))","4af43813":"BAG.fit(x_train,y_train)\nBAG_pred = BAG.predict(x_test)\nprint(\"accuracy: \"+ str(BAG.score(x_test,y_test)*100) + \"%\")","d240f34f":"KNN.fit(x_train,y_train)\nKNN_pred = KNN.predict(x_test)\nprint(\"accuracy: \"+ str(KNN.score(x_test,y_test)*100) + \"%\")","8b8549bc":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfig, ax = plt.subplots(figsize=(18,6))\ng = sns.countplot(df[\"Spore-print-color\"], ax=ax, data = df[[\"Spore-print-color\", 'Edible']],\n                  hue='Edible', palette='hls')","7e99307f":"fig, ax = plt.subplots(figsize=(18,6))\ng = sns.countplot(df[\"Odor\"], ax=ax, data = df[[\"Odor\", 'Edible']], hue='Edible', palette='hls')","9a4b7c32":"fig, ax = plt.subplots(figsize=(18,6))\ng = sns.countplot(df[\"Gill-color\"], ax=ax, data = df[[\"Gill-color\", 'Edible']], hue='Edible', palette='hls')","92333881":"fig, ax = plt.subplots(figsize=(18,6))\ng = sns.countplot(df[\"Population\"], ax=ax, data = df[[\"Population\", 'Edible']], hue='Edible', palette='hls')","75e2ea6d":"Class, Bruises and Gill-size only have 2 unique values\n\nClass will be called Edible\n\n**Veil-Type always p so it will be dropped**","b0a510be":"In conclusion, look for:\n\nOdor\n\nSpore-print-color\n\nGill-color\n\nPopulation","57509701":"class: edible=e, poisonous=p\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d"}}