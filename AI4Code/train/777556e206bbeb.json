{"cell_type":{"ff42aae1":"code","390e3311":"code","8f8d4be6":"code","b4214a8e":"code","2df26141":"code","428cb37b":"code","c7aa1396":"code","66d7b4f4":"code","7df1efe9":"code","d2487ab3":"markdown","04c47f31":"markdown","b659834d":"markdown","3828f750":"markdown","070851fa":"markdown","e795c534":"markdown","3d915f93":"markdown","8aacd057":"markdown"},"source":{"ff42aae1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","390e3311":"train = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv')\ntrain.shape","8f8d4be6":"import numpy as np\nimport pandas as pd\nimport scipy.spatial as spatial\nimport matplotlib.pyplot as plt\nimport matplotlib.path as path\nimport matplotlib as mpl\nfrom scipy.spatial import Voronoi\nimport math\n%matplotlib inline","b4214a8e":"#correct the team names\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('ARI','ARZ')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('ARI','ARZ')\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('BAL','BLT')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('BAL','BLT')\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('CLE','CLV')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('CLE','CLV')\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('HOU','HST')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('HOU','HST')\n\n# Player is on offense\ntrain['home_possession'] = (train['PossessionTeam'] == train['HomeTeamAbbr'])\ntrain['team_binary'] = [True if i==\"home\" else False for i in train['Team']]\ntrain['on_offense'] = (train['team_binary'] == train['home_possession'])\n\n#correct X Y and Dir\nmask = train[\"PlayDirection\"] != \"right\"\ntrain.loc[mask, \"X\"] = 120 - train.loc[mask, \"X\"]\ntrain[\"X\"] -= 10\ntrain.loc[mask, \"Y\"] = 160\/3 - train.loc[mask, \"Y\"]\ntrain.loc[mask, \"Dir\"] = (train.loc[mask, \"Dir\"] + 180) % 360\ntrain.loc[mask, \"Orientation\"] = np.mod(180 + train.loc[mask, 'Orientation'], 360)\n\n#Yrds from own goal\ntrain['YardsFromOwnGoal'] = train['YardLine']\ntrain.loc[(train.FieldPosition!=train.PossessionTeam), 'YardsFromOwnGoal'] = (50 + (50 - train.loc[(train.FieldPosition!=train.PossessionTeam), 'YardsFromOwnGoal']))\ntrain.loc[(train.YardLine==50), 'YardsFromOwnGoal'] = 50\n\n#is Rusher\ntrain['isRusher'] = (train['NflIdRusher'] == train['NflId'])","2df26141":"def voronoi_finite_polygons_2d(vor, radius=None):\n    \"\"\"\n    Reconstruct infinite voronoi regions in a 2D diagram to finite\n    regions.\n\n    Parameters\n    ----------\n    vor : Voronoi\n        Input diagram\n    radius : float, optional\n        Distance to 'points at infinity'.\n\n    Returns\n    -------\n    regions : list of tuples\n        Indices of vertices in each revised Voronoi regions.\n    vertices : list of tuples\n        Coordinates for revised Voronoi vertices. Same as coordinates\n        of input vertices, with 'points at infinity' appended to the\n        end.\n\n    \"\"\"\n\n    if vor.points.shape[1] != 2:\n        raise ValueError(\"Requires 2D input\")\n\n    new_regions = []\n    new_vertices = vor.vertices.tolist()\n\n    center = vor.points.mean(axis=0)\n    if radius is None:\n        radius = vor.points.ptp().max()\n\n    # Construct a map containing all ridges for a given point\n    all_ridges = {}\n    for (p1, p2), (v1, v2) in zip(vor.ridge_points, vor.ridge_vertices):\n        all_ridges.setdefault(p1, []).append((p2, v1, v2))\n        all_ridges.setdefault(p2, []).append((p1, v1, v2))\n\n    # Reconstruct infinite regions\n    for p1, region in enumerate(vor.point_region):\n        vertices = vor.regions[region]\n\n        if all(v >= 0 for v in vertices):\n            # finite region\n            new_regions.append(vertices)\n            continue\n\n        # reconstruct a non-finite region\n        ridges = all_ridges[p1]\n        new_region = [v for v in vertices if v >= 0]\n\n        for p2, v1, v2 in ridges:\n            if v2 < 0:\n                v1, v2 = v2, v1\n            if v1 >= 0:\n                # finite ridge: already in the region\n                continue\n\n            # Compute the missing endpoint of an infinite ridge\n            t = vor.points[p2] - vor.points[p1] # tangent\n            t \/= np.linalg.norm(t)\n            n = np.array([-t[1], t[0]])  # normal\n\n            midpoint = vor.points[[p1, p2]].mean(axis=0)\n            direction = np.sign(np.dot(midpoint - center, n)) * n\n            far_point = vor.vertices[v2] + direction * radius * 10\n\n            new_region.append(len(new_vertices))\n            new_vertices.append(far_point.tolist())\n\n        # sort region counterclockwise\n        vs = np.asarray([new_vertices[v] for v in new_region])\n        c = vs.mean(axis=0)\n        angles = np.arctan2(vs[:,1] - c[1], vs[:,0] - c[0])\n        new_region = np.array(new_region)[np.argsort(angles)]\n\n        # finish\n        new_regions.append(new_region.tolist())\n\n    return new_regions, np.asarray(new_vertices)\n\ndef get_dx_dy(angle, dist):\n    cartesianAngleRadians = (450-angle)*math.pi\/180.0\n    dx = dist * math.cos(cartesianAngleRadians)\n    dy = dist * math.sin(cartesianAngleRadians)\n    return dx, dy","428cb37b":"#Sort values as subsets will be used in the code\ntrain = train.sort_values(['on_offense','PlayId','isRusher'])","c7aa1396":"play = train[train.PlayId==20181007011551]\nX = play['X']\nY = play['Y']\n\n# make up data points\nnp.random.seed(1234)\npoints = np.c_[X, Y]\n\n# compute Voronoi\nvor = Voronoi(points)\n\n# get regions and vertices (nodes)\nregions, vertices = voronoi_finite_polygons_2d(vor)\n\n# colorize\nfor region in regions:\n    polygon = vertices[region]\n    plt.fill(*zip(*polygon))\n    \nplt.plot(points[:,0], points[:,1], 'o',color='black',zorder=1)\n\nplt.ylim(0 ,57)\nplt.xlim(0, 117)\nplt.axis('off')\n\nplt.show()","66d7b4f4":"play = train[train.PlayId==20181007011551]\nprint('Yards:',play.Yards.iloc[0])\nX = play['X']\nY = play['Y']\n\n# make up data points\nnp.random.seed(1234)\npoints = np.c_[X, Y]\n\n# compute Voronoi\nvor = Voronoi(points)\n\n# plot\nregions, vertices = voronoi_finite_polygons_2d(vor)\n\n# colorize\ncount=0\nfor region in regions:\n    count+=1\n    polygon = vertices[region]\n    if count<12:#this is why we have sorted the dataframe before\n        plt.fill(*zip(*polygon), \"lightblue\")\n    elif count<22: \n        plt.fill(*zip(*polygon), \"grey\")\n    else:\n        plt.fill(*zip(*polygon), \"pink\")\n\n\n\nplt.plot(points[:11,0], points[:11,1], 'o',color='black',zorder=1)#this is also the reason why we have sorted the dataframe before\nplt.plot(points[11:21,0], points[11:21,1], 'o',color='orange',zorder=2)\nplt.plot(points[21,0], points[21,1], 'o',color='red',zorder=3)\n\nrusher_row = play[play.isRusher==True]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\nrusher_x = rusher_row[\"X\"].values[0]\nrusher_y = rusher_row[\"Y\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\nplt.arrow(rusher_x, rusher_y , dx, dy, width=.5, color='red',length_includes_head=True, zorder=4)\n\nyardline = rusher_row[\"YardsFromOwnGoal\"].values[0]\nplt.vlines(yardline, 0, 60, color='green', linestyles='solid')\n\nplt.ylim(0 ,57)\nplt.xlim(0, 117)\nplt.axis('off')\n\nplt.show()","7df1efe9":"for i in train.PlayId.unique().tolist()[:20]:\n    play = train[train.PlayId==i]\n    print('Yards:',play.Yards.iloc[0])\n    print(i)\n    X = play['X']\n    Y = play['Y']\n\n    # make up data points\n    np.random.seed(1234)\n    points = np.c_[X, Y]\n\n    # compute Voronoi\n    vor = Voronoi(points)\n\n    # plot\n    regions, vertices = voronoi_finite_polygons_2d(vor)\n\n    # colorize\n    count=0\n    for region in regions:\n        count+=1\n        polygon = vertices[region]\n        if count<12:\n            plt.fill(*zip(*polygon), \"lightblue\")\n        elif count<22: \n            plt.fill(*zip(*polygon), \"grey\")\n        else:\n            plt.fill(*zip(*polygon), \"pink\")\n\n\n\n    plt.plot(points[:11,0], points[:11,1], 'o',color='black',zorder=1)\n    plt.plot(points[11:21,0], points[11:21,1], 'o',color='orange',zorder=2)\n    plt.plot(points[21,0], points[21,1], 'o',color='red',zorder=3)\n\n    rusher_row = play[play.isRusher==True]\n    rusher_dir = rusher_row[\"Dir\"].values[0]\n    rusher_speed = rusher_row[\"S\"].values[0]\n    rusher_x = rusher_row[\"X\"].values[0]\n    rusher_y = rusher_row[\"Y\"].values[0]\n    dx, dy = get_dx_dy(rusher_dir, rusher_speed)\n    plt.arrow(rusher_x,rusher_y, dx,  dy,  width=.5, color='red',length_includes_head=True, zorder=4)\n    \n    yardline = rusher_row[\"YardsFromOwnGoal\"].values[0]\n    plt.vlines(yardline, 0, 60, color='green', linestyles='solid')\n\n    plt.ylim(0 ,57)\n    plt.xlim(0, 117)\n    plt.axis('off')\n\n    plt.show()\n    ","d2487ab3":"Add a color per team, and a different color and an arrow for the rusher (also adding the Yardline):\n- Orange: Offensive players\n- Red: Rusher\n- Red arrow: direction of the rusher, and length proportional the speed\n- Black: Players on defense\n- Green: Yardline","04c47f31":"Code to compute the regions and vertices","b659834d":"# Voronoi diagram implementation in Python","3828f750":"### Voronoi","070851fa":"### Handle Data:\n- Creating on_offense variable (is player on offense?)\n- Correcting team names\n- Normalize X and Y\n- Create Yards_from_own_goal variable\n- Create player is Rusher variable","e795c534":"The first 20 plays","3d915f93":"### Importing data and libraries","8aacd057":"Plot the points from player coordinates, and the voronoi polygons"}}