{"cell_type":{"49ff3620":"code","bdd45724":"code","1f112e40":"code","726a959e":"code","9060b800":"code","2c87c392":"code","a9d99b9f":"code","11b98d34":"code","57402b4b":"code","9d8a50f9":"code","797107c0":"code","54ac87fc":"code","8006adef":"code","7c1d21a2":"code","2ac2e2b2":"code","4203a0db":"code","3604fc6b":"code","d445d851":"code","4770b37e":"code","e0c86e85":"code","c5319deb":"code","ed42b273":"code","8a0fa83b":"code","796fd7cf":"code","3dc50e34":"code","0d526a1a":"code","c2a61adf":"code","3190c09a":"code","0e1a70ce":"code","e12481e2":"code","014b345d":"code","26c4f6e8":"code","4d0f9047":"code","1f6d8e5d":"code","73310345":"code","6910ffe4":"code","39ca5bde":"code","e98f5081":"code","6d84b4dd":"code","13a5abef":"code","9aaec229":"code","246be0ec":"code","bc272a2e":"code","81df6a17":"code","d4552f73":"code","82d05796":"code","8bedef89":"code","a193a2db":"code","e08a8f49":"code","55e82c91":"code","c03b7103":"markdown","339d6f06":"markdown","ae862ab2":"markdown","6b977808":"markdown","a0431348":"markdown","7458250e":"markdown","bf2267c7":"markdown","83d7ea20":"markdown","74e90066":"markdown","bc2919ac":"markdown","6dc656ae":"markdown","60e6e459":"markdown","73013d7d":"markdown","f1f34aac":"markdown","7becad03":"markdown","f7049f94":"markdown","17a0dc1b":"markdown","f84cb6d7":"markdown","72d71c2f":"markdown","d77c685c":"markdown","54952a76":"markdown","c2e58d1a":"markdown","0a9467eb":"markdown","fdbf84c3":"markdown","fcd360fd":"markdown","e4a8059e":"markdown"},"source":{"49ff3620":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline","bdd45724":"Hpriceframe_Test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nHpriceframe_Train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","1f112e40":"with open('..\/input\/house-prices-advanced-regression-techniques\/data_description.txt') as f:\n    print(f.read())","726a959e":"Hpriceframe_Train.corr()['SalePrice'].sort_values()","9060b800":"sns.scatterplot(data=Hpriceframe_Train,x='OverallQual', y='SalePrice')\nplt.axhline(y=520000, color='r')\nplt.axhline(y=200000, color='r')","2c87c392":"HighOutSalePrice = Hpriceframe_Train[(Hpriceframe_Train['SalePrice']>520000) &\n                  (Hpriceframe_Train['OverallQual']>7)][['SalePrice','OverallQual']]","a9d99b9f":"LowOutSalePrice = Hpriceframe_Train[(Hpriceframe_Train['SalePrice']<200000) &\n                  (Hpriceframe_Train['OverallQual']>8)][['SalePrice','OverallQual']]","11b98d34":"index_drop = HighOutSalePrice.index\nHpriceframe_Train = Hpriceframe_Train.drop(index_drop, axis=0)","57402b4b":"index_drop = LowOutSalePrice.index\nHpriceframe_Train = Hpriceframe_Train.drop(index_drop, axis=0)","9d8a50f9":"sns.scatterplot(data=Hpriceframe_Train,x='OverallQual', y='SalePrice')\nplt.axhline(y=520000, color='r')\nplt.axhline(y=200000, color='r')","797107c0":"MissedDataSum = Hpriceframe_Train.isnull().sum()\nMissedDataSum.sort_values()[MissedDataSum>0]","54ac87fc":"def missing_percent(df):\n    nan_percent = 100 * (df.isnull().sum() \/ len(df))\n    nan_percent = nan_percent[nan_percent>0].sort_values()\n    return nan_percent","8006adef":"nan_percent = missing_percent(Hpriceframe_Train)","7c1d21a2":"plt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)","2ac2e2b2":"plt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)\nplt.ylim(0,1)","4203a0db":"nan_percent[nan_percent<1]","3604fc6b":"Hpriceframe_Train = Hpriceframe_Train.dropna(axis=0,subset=['Electrical','MasVnrType','MasVnrArea'])","d445d851":"nan_percent = missing_percent(Hpriceframe_Train)\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)","4770b37e":"bsmt_str_cols=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2']\nHpriceframe_Train[bsmt_str_cols] = Hpriceframe_Train[bsmt_str_cols].fillna('NA')","e0c86e85":"nan_percent = missing_percent(Hpriceframe_Train)\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)","c5319deb":"Gra_num_cols=['GarageType','GarageFinish','GarageQual','GarageCond']\nHpriceframe_Train[Gra_num_cols] = Hpriceframe_Train[Gra_num_cols].fillna('NA')\nGra_str_cols=['GarageYrBlt']\nHpriceframe_Train[Gra_str_cols] = Hpriceframe_Train[Gra_str_cols].fillna(0)","ed42b273":"nan_percent = missing_percent(Hpriceframe_Train)\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)","8a0fa83b":"Hpriceframe_Train = Hpriceframe_Train.drop(['Fence','PoolQC','Alley','MiscFeature'],axis=1)","796fd7cf":"nan_percent = missing_percent(Hpriceframe_Train)\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)","3dc50e34":"Hpriceframe_Train['FireplaceQu'] = Hpriceframe_Train['FireplaceQu'].fillna('NA')","0d526a1a":"nan_percent = missing_percent(Hpriceframe_Train)\nplt.figure(figsize=(12,6))\nsns.barplot(x=nan_percent.index, y=nan_percent)\nplt.xticks(rotation= 90)","c2a61adf":"plt.figure(figsize=(8,12))\nsns.boxplot(data=Hpriceframe_Train, x='LotFrontage',y='Neighborhood')","3190c09a":"Hpriceframe_Train['LotFrontage'] = Hpriceframe_Train.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))","0e1a70ce":"plt.figure(figsize=(8,12))\nsns.boxplot(data=Hpriceframe_Train, x='LotFrontage',y='Neighborhood')","e12481e2":"df_num = Hpriceframe_Train.select_dtypes(exclude='object')\ndf_obj = Hpriceframe_Train.select_dtypes(include='object')","014b345d":"df_num.info()","26c4f6e8":"df_obj = pd.get_dummies(df_obj,drop_first=True)","4d0f9047":"df_obj.shape","1f6d8e5d":"Final_df = pd.concat([df_num,df_obj],axis=1)","73310345":"X = Final_df.drop('SalePrice',axis=1)\ny = Final_df['SalePrice']","6910ffe4":"# from sklearn.preprocessing import PolynomialFeatures\n# polynomial_converter= PolynomialFeatures(degree = 2,include_bias=False)\n# polyFeatures = polynomial_converter.fit_transform(X)\n# polyFeatures.shape","39ca5bde":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nlinearModel = LinearRegression()\nlinearModel.fit(X_train,y_train)","e98f5081":"y_pred = linearModel.predict(X_test)","6d84b4dd":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test  = scaler.transform(X_test)","13a5abef":"from sklearn.linear_model import LassoCV","9aaec229":"lasso_cv_model = LassoCV(eps=0.01, n_alphas=50, cv=5)\nlasso_cv_model.fit(X_train,y_train)\nlasso_cv_model.alpha_","246be0ec":"from sklearn.metrics import mean_squared_error,mean_absolute_error\ny_pred_lasso = lasso_cv_model.predict(X_test)\nMAE = mean_absolute_error(y_test,y_pred_lasso)\nMSE = mean_squared_error(y_test, y_pred_lasso)\nRMSE = np.sqrt(MSE)","bc272a2e":"pd.DataFrame({'Ridge Metrics':[MAE,MSE,RMSE]},index=['MAE','MSE','RMSE'])","81df6a17":"from sklearn.linear_model import RidgeCV\nridge_cv_model = RidgeCV(alphas = (0.1,1.0,10), scoring='neg_mean_absolute_error')\nridge_cv_model.fit(X_train,y_train)\nridge_cv_model.alpha_","d4552f73":"from sklearn.metrics import mean_squared_error,mean_absolute_error\ny_pred_ridge = ridge_cv_model.predict(X_test)\nMAE = mean_absolute_error(y_test,y_pred_ridge)\nMSE = mean_squared_error(y_test, y_pred_ridge)\nRMSE = np.sqrt(MSE)","82d05796":"pd.DataFrame({'Ridge Metrics':[MAE,MSE,RMSE]},index=['MAE','MSE','RMSE'])","8bedef89":"from sklearn.linear_model import ElasticNetCV","a193a2db":"elastic_model = ElasticNetCV(l1_ratio=[.1, .5, .7,.9, .95, .99, 1], cv=5, max_iter=100000)\nelastic_model.fit(X_train, y_train)","e08a8f49":"y_pred_elastic = elastic_model.predict(X_test)\nMAE = mean_absolute_error(y_test,y_pred_elastic)\nMSE = mean_squared_error(y_test, y_pred_elastic)\nRMSE = np.sqrt(MSE)","55e82c91":"pd.DataFrame({'Ridge Metrics':[MAE,MSE,RMSE]},index=['MAE','MSE','RMSE'])","c03b7103":"# Missing Data","339d6f06":"# filling missing data\n### we findout this features have some missingData\n### on this line we fill this missing Data with NA","ae862ab2":"#### it's better to get rid of these few data\n#### because, might hit to our probability ","6b977808":"### now we can have a scatter plot of the correlation of our new data","a0431348":"# L2: Ridge Regression","7458250e":"#### First of all we have to know about the count of Missing data","bf2267c7":"# Combines L1 and L2: Elastic Net\u00b6","83d7ea20":"# L1: Lasso Regression","74e90066":"# Finish Fixing Missing Data","bc2919ac":"### Now our filling is finished","6dc656ae":"#### this plot helps us to see missing data","60e6e459":"## **Determin the feature & Target valriable(Label)**","73013d7d":"#### it's better to show missing data with percentage","f1f34aac":"### get Information about this Data Set","7becad03":"### this List of correlation helps us","f7049f94":"# Outliers\n### we have to check the Outliers and get rid of them","17a0dc1b":"## I Can't do Polynomial Regression\n## because of my low resources","f84cb6d7":"#### so we figured out the outliers of OverallQual\n#### And now go to drop them","72d71c2f":"#### and now we zoomed on the lower data missed","d77c685c":"# Regularization","54952a76":"### we can see the outliers of OverallQual were dropped","c2e58d1a":"#### this plot shows us, our improving","0a9467eb":"# Categorical Data","fdbf84c3":"### now we can see our this features haven't any missing data","fcd360fd":"# Scaling the Data","e4a8059e":"# Regularization"}}