{"cell_type":{"14864a46":"code","0c044f24":"code","8ff1bd1f":"code","49b89774":"code","6b8da261":"code","45c4b3f6":"code","7ddeb403":"code","6bec5bc6":"code","a53d88e1":"code","eb123252":"code","22136b69":"code","8b839856":"code","030b2f3f":"code","5f2f2ce2":"code","6960fadf":"code","ada2c2b0":"code","98e06cac":"code","e83966e2":"code","c7fa991a":"code","e28731f1":"code","3ad63f47":"code","9068c3b3":"code","09b344e1":"code","7ba08886":"code","4dd5f67d":"code","142d9fbc":"code","d27ff53e":"code","eee0fb01":"code","ee762d9a":"code","465be997":"markdown","caa41a69":"markdown","b11d30a6":"markdown","9e8a0495":"markdown","1a98a7d6":"markdown","ae24ccde":"markdown"},"source":{"14864a46":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms, models # add models to the list\nfrom torchvision.utils import make_grid\nimport os\nimport random\nfrom sklearn.model_selection import train_test_split\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0c044f24":"import tensorflow as tf\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","8ff1bd1f":"train_transform=transforms.Compose([\n        transforms.RandomRotation(10),      # rotate +\/- 10 degrees\n        transforms.RandomHorizontalFlip(),  # reverse 50% of images\n        transforms.Resize(224),             # resize shortest side to 224 pixels\n        transforms.CenterCrop(224),         # crop longest side to 224 pixels at center\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406],\n                             [0.229, 0.224, 0.225])\n])","49b89774":"test_transform=transforms.Compose([\n    transforms.Resize(224),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize([0.485,0.456,0.406],\n                         [0.229,0.224,0.225])\n])","6b8da261":"train_data=datasets.ImageFolder(root=(\"..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training\"),transform=train_transform)\ntest_data=datasets.ImageFolder(root=(\"..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Test\"),transform=train_transform)","45c4b3f6":"class_names=train_data.classes\nprint(class_names)\nprint(len(class_names))","7ddeb403":"train_loader=DataLoader(train_data,batch_size=10,shuffle=True)\ntest_loader=DataLoader(test_data,batch_size=10)","6bec5bc6":"print(len(train_data))\nprint(len(test_data))","a53d88e1":"for images, labels in train_loader:\n    break\n#print the labels\nprint('Label:', labels.numpy())\nprint('Class:', *np.array([class_names[i] for i in labels]))\n\nim=make_grid(images,nrow=5)","eb123252":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","22136b69":"inv_normalize=transforms.Normalize(mean=[-0.485\/0.229,-0.456\/0.224,-0.406\/0.225],\n                                     std=[1\/0.229,1\/0.224,1\/0.225])\nim=inv_normalize(im)","8b839856":"plt.figure(figsize=(10,10))\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","030b2f3f":"class ConvolutionalNetwork(nn.Module): #Building our own convolutional neural network\n    def __init__(self):\n        super().__init__()\n        self.conv1=nn.Conv2d(3,6,3,1)\n        self.conv2=nn.Conv2d(6,16,3,1)\n        self.fc1=nn.Linear(16*54*54,1200)  \n        self.fc2=nn.Linear(1200,600)\n        self.fc3=nn.Linear(600,300)\n        self.fc4=nn.Linear(300,131)\n    def forward(self,X):\n        X=F.relu(self.conv1(X))\n        X=F.max_pool2d(X,2,2)\n        X=F.relu(self.conv2(X))\n        X=F.max_pool2d(X,2,2)\n        X=X.view(-1,16*54*54)\n        X=F.relu(self.fc1(X))\n        X=F.relu(self.fc2(X))\n        X=F.relu(self.fc3(X))\n        X=self.fc4(X)\n        \n        return F.log_softmax(X, dim=1)","5f2f2ce2":"CNNmodel=ConvolutionalNetwork()\ncriterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(CNNmodel.parameters(),lr=0.001)","6960fadf":"CNNmodel","ada2c2b0":"def count_parameters(model):\n    params = [p.numel() for p in model.parameters() if p.requires_grad]\n    for item in params:\n        print(f'{item:>8}')\n    print(f'________\\n{sum(params):>8}')\ncount_parameters(CNNmodel)","98e06cac":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrain_correct=[]\ntest_correct=[]\nepochs=2\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader): \n        b+=1                                              \n        y_pred=CNNmodel(X_train)\n        loss=criterion(y_pred,y_train)\n\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+=batch_corr\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        if b%200==0:\n            print(f\"epoch: {i} loss: {loss.item} batch: {b} accuracy: {trn_corr.item()*100\/(10*b):7.3f}%\")\n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n    \n    \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            y_val=CNNmodel(X_test)\n            loss=criterion(y_val,y_test)\n            \n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n            \n        loss=loss.detach().numpy()\n        test_losses.append(loss)\n        test_correct.append(tst_corr)\n        \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')    ","e83966e2":"plt.plot(train_losses,label=\"train_losses\")\nplt.plot(test_losses,label=\"test_losses\")\nplt.legend()","c7fa991a":"alexnetmodel= models.alexnet(pretrained=True)","e28731f1":"alexnetmodel","3ad63f47":"for param in alexnetmodel.parameters():\n    param.requires_grad=False","9068c3b3":"torch.manual_seed(42)\n\nalexnetmodel.classifier=nn.Sequential(nn.Linear(9216,1024),\n                                     nn.ReLU(),\n                                     nn.Dropout(p=0.5),\n                                     nn.Linear(1024,131),\n                                     nn.LogSoftmax(dim=1))\nalexnetmodel","09b344e1":"count_parameters(alexnetmodel)","7ba08886":"criterion=nn.CrossEntropyLoss()\noptimizer=torch.optim.Adam(alexnetmodel.classifier.parameters(),lr=0.001)","4dd5f67d":"import time\nstart_time=time.time()\ntrain_losses=[]\ntest_losses=[]\ntrn_correct=[]\ntst_correct=[]\n\nepochs=2\nfor i in range(epochs):\n    trn_corr=0\n    tst_corr=0\n    for b, (X_train,y_train) in enumerate(train_loader):\n        b+=1\n        \n        y_pred=alexnetmodel(X_train)\n        loss=criterion(y_pred,y_train)       \n        #Update parameters\n        predicted=torch.max(y_pred.data,1)[1]\n        batch_corr=(predicted==y_train).sum()\n        trn_corr+= batch_corr\n        \n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        if b%200==0:\n            print(f'epoch: {i:2}  batch: {b:4} [{10*b:6}\/8000]  loss: {loss.item():10.8f}  \\\naccuracy: {trn_corr.item()*100\/(10*b):7.3f}%')\n    \n    loss=loss.detach().numpy()\n    train_losses.append(loss)\n    train_correct.append(trn_corr)\n                  \n    with torch.no_grad():\n        for b, (X_test,y_test) in enumerate(test_loader):\n            b+=1\n                  \n            y_val=alexnetmodel(X_test)\n            predicted=torch.max(y_val.data,1)[1]\n            btach_corr=(predicted==y_test).sum()\n            tst_corr+=btach_corr\n\n    loss=criterion(y_val,y_test)\n    loss=loss.detach().numpy()\n    test_losses.append(loss)\n    test_correct.append(tst_corr)\n                  \nprint(f'\\nDuration: {time.time() - start_time:.0f} seconds')        ","142d9fbc":"x=2021\nim = inv_normalize(test_data[x][0])\nplt.imshow(np.transpose(im.numpy(),(1,2,0)))","d27ff53e":"test_data[x][0].shape","eee0fb01":"CNNmodel.eval()\nwith torch.no_grad():\n    new_pred=CNNmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","ee762d9a":"alexnetmodel.eval()\nwith torch.no_grad():\n    new_pred_1=alexnetmodel(test_data[x][0].view(1,3,224,224)).argmax()\nprint(f'Predicted value: {new_pred.item()} {class_names[new_pred.item()]}')","465be997":"---\n# Torch with CNN Model and AlexNetModel\n* cf. https:\/\/www.kaggle.com\/stpeteishii\/four-shapes-classify-torch-cnn-alexnet\n---","caa41a69":"# CNN Model","b11d30a6":"# Check Images and Labels","9e8a0495":"# Prediction","1a98a7d6":"# Train and Test Setting","ae24ccde":"# AlexNetModel"}}