{"cell_type":{"5c14a79b":"code","578b3cb1":"code","c6988762":"code","26a3b298":"code","86ea3766":"code","ef2d3135":"code","6fc42cff":"code","f6dda1e2":"code","76ad65f2":"code","86dfe7e5":"code","364c499b":"code","1cff09c8":"code","ffbc2ae7":"code","9037ebbd":"code","b3d56331":"code","b90a3648":"code","a53fe9ce":"code","a1a4e252":"code","fd5cbade":"code","88619a80":"code","979d2381":"code","593cf288":"code","6c2380a0":"code","df3bb272":"code","534fcc05":"code","b2f16b91":"code","db3dc376":"code","df3029ce":"code","456e4e87":"code","ee3fe4d7":"code","3233520e":"code","14c55a4b":"code","d4957ae2":"code","748363ad":"code","530309dc":"code","40e47c10":"code","a70cd6df":"code","6656d157":"code","ca7a500e":"code","78cfb78d":"code","538f0d58":"markdown","85fe6c3b":"markdown","932c0d3d":"markdown","39ca3033":"markdown","f90ea11c":"markdown","58819b88":"markdown","7efcd762":"markdown","e8514b97":"markdown","197cc32f":"markdown","621406b5":"markdown","6f33b4f0":"markdown","33821aad":"markdown","54eec48c":"markdown","c8c7362c":"markdown","d2aa2a3e":"markdown","7e70aae4":"markdown","8be2b8ab":"markdown","3983d7b2":"markdown","e3151639":"markdown","bac4ae1b":"markdown","29cf81fe":"markdown","83a252ba":"markdown","77c2b097":"markdown","9dc3e38a":"markdown","51c63e6e":"markdown","90bd01e3":"markdown","1cd2a7a9":"markdown","d2bae5e6":"markdown","cda1af19":"markdown","bd11c1ef":"markdown","f4a3e891":"markdown","eec6dd50":"markdown","d6fa06a8":"markdown"},"source":{"5c14a79b":"'''Ignore deprecation and future, and user warnings.'''\nimport warnings as wrn\nwrn.filterwarnings('ignore', category = DeprecationWarning) \nwrn.filterwarnings('ignore', category = FutureWarning) \nwrn.filterwarnings('ignore', category = UserWarning) \n\n'''Import basic modules.'''\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\n\n'''Customize visualization\nSeaborn and matplotlib visualization.'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\n\n'''Special Visualization'''\nfrom wordcloud import WordCloud \nimport missingno as msno\n\n'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\nimport cufflinks as cf #importing plotly and cufflinks in offline mode  \nimport plotly.offline  \ncf.go_offline()  \ncf.set_config_file(offline=False, world_readable=True)\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))","578b3cb1":"'''Reading the data from csv files'''\ndata = pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')\ndisplay(data.head(3))\nprint('Dimension of data:', data.shape)","c6988762":"'''Droping unwanted variable'''\ndata.drop(['URL', 'ID'], axis = 1, inplace = True)","26a3b298":"'''Variable Description'''\ndef description(df):\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.iloc[0].values\n    summary['Second Value'] = df.iloc[1].values\n    summary['Third Value'] = df.iloc[2].values\n    return summary","86ea3766":"bold('**Variable Description of Data:**')\ndescription(data)","ef2d3135":"'''Visualization of missing variable'''\nmsno.matrix(data)\nplt.show()","6fc42cff":"%%time\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\nfig, ax = plt.subplots(10,10, figsize=(12,12))\n\nfor i in range(100):\n    r = requests.get(data['Icon URL'][i])\n    im = Image.open(BytesIO(r.content))\n    ax[i\/\/10][i%10].imshow(im)\n    ax[i\/\/10][i%10].axis('off')\nplt.show()","f6dda1e2":"bold('**THE MOST FREQUENT RATING IS 4.5 MEASURED**')\nplt.rcParams['figure.figsize'] = (18, 10)\nax = sns.countplot(data = data, x ='Average User Rating', palette = 'gray', alpha = 0.7, linewidth=4, edgecolor= 'black')\nax.set_ylabel('Count', fontsize = 20)\nax.set_xlabel('Average User Rating', fontsize = 20)\nplt.show()","76ad65f2":"bold('**USER RATING COUNT IS HIGHLY POSITIVE SKEWED**')\nplt.rcParams['figure.figsize'] = (18, 10)\nax = sns.kdeplot(data['User Rating Count'], shade = True, linewidth = 5, color = 'k')\nax.set_ylabel('Count', fontsize = 20)\nax.set_xlabel('User Rating Count', fontsize = 20)\nplt.show()","86dfe7e5":"bold('**MOST OF THE APPS PRICES BETWEEN 0 TO 10 DOLLARS**')\nplt.rcParams['figure.figsize'] = (18, 10)\nax = sns.kdeplot(data['Price'], shade = True, linewidth = 5, color = 'm')\nax.set_ylabel('Count', fontsize = 20)\nax.set_xlabel('Price', fontsize = 20)\nplt.show()","364c499b":"data['Size2'] = round(data['Size']\/1000000,1)","1cff09c8":"bold('**MOST OF THE APPS HAVE SIZE BETWEEN 0 TO 500 MEGABYTES**')\nplt.rcParams['figure.figsize'] = (18, 10)\nax = sns.kdeplot(data['Size2'], shade = True, linewidth = 5, color = 'teal')\nax.set_ylabel('Count', fontsize = 20)\nax.set_xlabel('Size', fontsize = 20)\nplt.show()","ffbc2ae7":"Size_Less_250MB = data[data.Size2 <250]\nSize_More_250MB = data[(data.Size2 >=250) & (data.Size2 <1000)]\nSize_More_1GB = data[data.Size2 >=1000]","9037ebbd":"f, axes = plt.subplots (1,3, figsize=(18,10))\nax1 = sns.distplot(Size_Less_250MB.Size2, bins= 20, kde=False,ax=axes[0], color = 'teal')\nax2 = sns.distplot(Size_More_250MB.Size2, bins= 20, kde=False,ax=axes[1], color = 'teal')\nax3 = sns.distplot(Size_More_1GB.Size2, bins= 20, kde=False,ax=axes[2], color = 'teal')\nax1.set(xlabel='Game Size in MB',ylabel='Number of Games')\nax2.set(xlabel='Game Size in MB',ylabel='Number of Games')\nax3.set(xlabel='Game Size in MB',ylabel='Number of Games')\naxes[0].set_title('No. of Games Below 250MB')\naxes[1].set_title('No. of Games B\/W 250MB and 1GB')\naxes[2].set_title('No. of Games Above 1GB')\nplt.subplots_adjust(wspace=0.2)\nplt.show()","b3d56331":"plt.rcParams['figure.figsize'] = (18, 10)\ndata.Developer.value_counts()[:20].plot(kind='bar',color = 'gray', alpha = 0.7, linewidth=4, edgecolor= 'black')\nplt.xlabel(\"Developers\", fontsize=20)\nplt.ylabel(\"Count\", fontsize=20)\nplt.title(\"TOP 20 Most Commmon Developers \", fontsize=22)\nplt.xticks(rotation=90, fontsize = 13) \nplt.show()","b90a3648":"bold('**MOST COMMON NAME USED BY GAME DEVELOPERS ARE BATTLE, WAR, PUZZLE**')\nfig, ax = plt.subplots(1, 2, figsize=(16,32))\nwordcloud = WordCloud(background_color='white',width=800, height=800).generate(' '.join(data['Name']))\nwordcloud_sub = WordCloud(background_color='white',width=800, height=800).generate(' '.join(data['Subtitle'].dropna().astype(str)) )\nax[0].imshow(wordcloud)\nax[0].axis('off')\nax[0].set_title('Wordcloud(Name)')\nax[1].imshow(wordcloud_sub)\nax[1].axis('off')\nax[1].set_title('Wordcloud(Subtitle)')\nplt.show()","a53fe9ce":"'''A Function To Plot Pie Plot using Plotly'''\n\ndef pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\n\nbold('**MOST OF THE APPS HAVE 4+ AGE RATING**')\npy.iplot([pie_plot(data['Age Rating'].value_counts(), ['cyan', 'gold', 'red'], 'Age Rating')])","a1a4e252":"bold('**ENTERTAINMENT AND PUZZULE ARE THE MOST POPULAR GAME TPYE IN STRATEGY GAME**')\nimport squarify\n\ndata['Genreslist'] = data['Genres'].str.extract('([A-Z]\\w{5,})', expand=True)\ntemp_df = data['Genreslist'].value_counts().reset_index()\n\nsizes=np.array(temp_df['Genreslist'])\nlabels=temp_df['index']\ncolors = [plt.cm.Spectral(i\/float(len(labels))) for i in range(len(labels))]\nplt.figure(figsize=(12,8), dpi= 100)\nsquarify.plot(sizes=sizes, label=labels, color = colors, alpha=.5, edgecolor=\"black\", linewidth=3, text_kwargs={'fontsize':15})\nplt.title('Treemap of Strategy Game Genres on App Store', fontsize = 12)\nplt.axis('off')\nplt.show()","fd5cbade":"bold('**THERE IS NO RELATIONSHIP BETWEEN PRICE AND AVERGE USER RATING**')\nplt.figure(figsize=(18,10), dpi= 100)\nax = sns.regplot(data=data, x='Price', y='Average User Rating', color = 'teal')\nax.set_ylabel('Average User Rating', fontsize = 20)\nax.set_xlabel('Price', fontsize = 20)\nplt.show()","88619a80":"bold('**THERE IS LITTLE POSITIVE RELATIONSHIP BETWEEN SIZE AND AVERGE USER RATING**')\nplt.figure(figsize=(18,10), dpi= 100)\nax = sns.regplot(data=data, x='Size', y='Average User Rating', color = 'darkred')\nax.set_ylabel('Average User Rating', fontsize = 20)\nax.set_xlabel('Size', fontsize = 20)\nplt.show()","979d2381":"bold('**AVERAGE RATING BASED BY AGE GROUP**')\nax = sns.FacetGrid(data, col=\"Age Rating\", col_wrap=2, height=6, aspect=2,  sharey=False)\nax.map(sns.countplot, 'Average User Rating', color=\"teal\", alpha = 0.7, linewidth=4, edgecolor= 'black')\nplt.subplots_adjust(hspace=0.45)\nplt.show()","593cf288":"bold('**AVERAGE RATING DISTRIBUTION BY APP SIZE GROUP**')\nf, axes = plt.subplots (1,3, figsize=(18,10))\nax1 = sns.boxplot( data = Size_Less_250MB, x = 'Average User Rating', y = 'Size2',  ax=axes[0],color = 'teal')\nax2 = sns.boxplot( data = Size_More_250MB, x = 'Average User Rating', y = 'Size2', ax=axes[1], color = 'teal')\nax3 = sns.boxplot( data = Size_More_1GB, x = 'Average User Rating', y = 'Size2', ax=axes[2], color = 'teal')\nax1.set(xlabel='Average User Rating',ylabel='Game Size in MB')\nax2.set(xlabel='Average User Rating',ylabel='Game Size in MB')\nax3.set(xlabel='Average User Rating',ylabel='Game Size in MB')\naxes[0].set_title('No. of Games Below 250MB')\naxes[1].set_title('No. of Games Between 250MB and 1GB')\naxes[2].set_title('No. of Games Above 1GB')\nplt.subplots_adjust(wspace=0.2)\nplt.show()","6c2380a0":"paid = data[data['Price']>0]\nfree = data[data['Price']==0]\nfig, ax = plt.subplots(1, 2, figsize=(15,8))\nsns.countplot(data=paid, y='Average User Rating', ax=ax[0], palette='plasma')\nax[0].set_title('Paid Games')\nax[0].set_xlim([0, 1000])\n\nsns.countplot(data=free, y='Average User Rating', ax=ax[1], palette='viridis')\nax[1].set_title('Free Games')\nax[1].set_xlim([0,2000])\nplt.tight_layout();\nplt.show()","df3bb272":"data[\"Original Release Date\"] = pd.to_datetime(data[\"Original Release Date\"])\ndata[\"year\"] = data[\"Original Release Date\"].dt.year","534fcc05":"bold('**SIZE OF THE APPS IS INCREASING OVER TIME**')\nplt.rcParams['figure.figsize'] = (18,10)\ntemp_df = data.groupby(['Original Release Date']).Size.sum().reset_index()\nax = sns.lineplot(data = temp_df, x = 'Original Release Date', y = 'Size', color = 'cornflowerblue')\nplt.xlabel('Original Release year', fontsize = 15)\nplt.ylabel('Size')\nplt.show()","b2f16b91":"data[\"Current Version Release Date\"] = pd.to_datetime(data[\"Current Version Release Date\"])\ndata[\"month\"] = data[\"Current Version Release Date\"].dt.month_name() ","db3dc376":"bold('**MOST GAMES HAVE BEEN UPDATED IN JULY**')\nplt.rcParams['figure.figsize'] = (18, 15)\nax = sns.boxplot(data = data, x ='month', y = np.log1p(data['User Rating Count']), color = 'skyblue')\nax.set_xlabel('Month', fontsize = 20)\nax.set_ylabel('User Rating Count', fontsize = 20)\nplt.show()","df3029ce":"bold('**4+ AGE RATING IS HAVING THE HIGEST PROPORTION OF APPS**')\ntop_genres = list(data[\"Primary Genre\"].value_counts().head(10).index)\nct_genre_agerating = pd.crosstab(data[data[\"Primary Genre\"].isin(top_genres)][\"Primary Genre\"], data[\"Age Rating\"], normalize=0)\nct_genre_agerating.plot.bar(stacked=True, figsize=(18,10))\nplt.title(\"Primary Genre repartition by Age Rating\", fontsize = 15)\nplt.show()","456e4e87":"bold('**NO SINGNIFICANT CHANGE IN THE PROPORTION OF PRICE RANGE IN ALL AGE RATING**')\ndata[\"Price Range\"] = data[\"Price\"].dropna().map(lambda x: \"Free\" if x == 0.00 else(\"Low Price\" if 0.99 <= x <= 4.99 else(\"Medium Price\" if 5.99 <= x <= 19.99 else \"High Price\")))\n\nct_agerating_pricerange = pd.crosstab(data[\"Age Rating\"], data[\"Price Range\"], normalize=0)\nct_agerating_pricerange.plot.bar(stacked=True, figsize=(18,10))\nplt.xticks(rotation=0)\nplt.title(\"Age Rating repartioned by Price Range\", fontsize = 15)\nplt.show()","ee3fe4d7":"plt.rcParams['figure.figsize'] = (18,10)\nsns.heatmap(data.corr(), vmin=-1, vmax=1, center=0,\n            square=True, annot = True, cmap = 'RdYlGn')\nplt.show()","3233520e":"data['GenreList'] = data['Genres'].apply(lambda s : s.replace('Games','').replace('&',' ').replace(',', ' ').split()) \ndata['GenreList'].head()","14c55a4b":"from sklearn.preprocessing import MultiLabelBinarizer # Similar to One-Hot Encoding\n\ntest = data['GenreList']\nmlb = MultiLabelBinarizer()\nres = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)","d4957ae2":"corr = res.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(15, 14))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","748363ad":"import networkx as nx\n\nstocks = corr.index.values\ncor_matrix = np.asmatrix(corr)\nG = nx.from_numpy_matrix(cor_matrix)\nG = nx.relabel_nodes(G,lambda x: stocks[x])\nG.edges(data=True)\n\ndef create_corr_network(G, corr_direction, min_correlation):\n    H = G.copy()\n    for stock1, stock2, weight in G.edges(data=True):\n        if corr_direction == \"positive\":\n            if weight[\"weight\"] <0 or weight[\"weight\"] < min_correlation:\n                H.remove_edge(stock1, stock2)\n        else:\n            if weight[\"weight\"] >=0 or weight[\"weight\"] > min_correlation:\n                H.remove_edge(stock1, stock2)\n                \n    edges,weights = zip(*nx.get_edge_attributes(H,'weight').items())\n    weights = tuple([(1+abs(x))**2 for x in weights])\n    d = nx.degree(H)\n    nodelist, node_sizes = zip(*d)\n    positions=nx.circular_layout(H)\n    \n    plt.figure(figsize=(10,10), dpi=72)\n\n    nx.draw_networkx_nodes(H,positions,node_color='#DA70D6',nodelist=nodelist,\n                           node_size=tuple([x**2 for x in node_sizes]),alpha=0.8)\n    \n    nx.draw_networkx_labels(H, positions, font_size=8, \n                            font_family='sans-serif')\n    \n    if corr_direction == \"positive\": edge_colour = plt.cm.GnBu \n    else: edge_colour = plt.cm.PuRd\n        \n    nx.draw_networkx_edges(H, positions, edge_list=edges,style='solid',\n                          width=weights, edge_color = weights, edge_cmap = edge_colour,\n                          edge_vmin = min(weights), edge_vmax=max(weights))\n    plt.axis('off')\n    plt.show() \n    \ncreate_corr_network(G, 'positive', 0.3)\ncreate_corr_network(G, 'positive', -0.3)","530309dc":"review = data.sort_values(by='User Rating Count', ascending=False)[['Name', 'Price', 'Average User Rating', 'Size', 'User Rating Count', 'Icon URL']].head(10)\nreview.iloc[:, 0:-1]","40e47c10":"import urllib.request\nfrom PIL import Image\n\nplt.figure(figsize=(6,3))\nplt.subplot(131)\nimage = Image.open(urllib.request.urlopen(review.iloc[0,-1]))\nplt.title('1. Clash Of Clans')\nplt.imshow(image)\nplt.axis('off')\n\nplt.subplot(132)\nimage = Image.open(urllib.request.urlopen(review.iloc[1,-1]))\nplt.title('2.Clash Royale')\nplt.imshow(image)\nplt.axis('off')\n\nplt.subplot(133)\nimage = Image.open(urllib.request.urlopen(review.iloc[2,-1]))\nplt.title('3. PUBG Mobile')\nplt.imshow(image)\nplt.axis('off')\n\nplt.show()","a70cd6df":"data.dropna(inplace = True)\nprice = data.sort_values(by='Price', ascending=False)[['Name', 'Price', 'Average User Rating', 'Size', 'Icon URL']].head(10)\nprice.iloc[:, 0:-1]","6656d157":"import urllib.request\nfrom PIL import Image\n\nplt.figure(figsize=(6,3))\nplt.subplot(121)\nimage = Image.open(urllib.request.urlopen(price.iloc[0,-1]))\nplt.title('1. Finabase: realtime stocks')\nplt.imshow(image)\nplt.axis('off')\n\nplt.subplot(122)\nimage = Image.open(urllib.request.urlopen(price.iloc[1,-1]))\nplt.title('2. Tarot - Single and Multiplayer ')\nplt.imshow(image)\nplt.axis('off')\n\n\nplt.show()","ca7a500e":"best = data.sort_values(by=['Average User Rating', 'User Rating Count'], ascending=False)[['Name', 'Average User Rating', 'User Rating Count', 'Size', \n                                                                                         'Price', 'Developer',  'Icon URL',]].head(10)\nbest.iloc[:, 0:-1]","78cfb78d":"bold('**Cash, Inc. Fame & Fortune Game Develop by Lion Studios**')\nplt.figure(figsize=(5,5))\nimage = Image.open(urllib.request.urlopen(best.iloc[0, -1]))\nplt.axis('off')\nplt.title('Cash, Inc. Fame & Fortune Game')\nplt.imshow(image)\nplt.show()\nbold('**--Cash, Inc. Fame & Fortune Game turns out to be best overall game with 5.0 rating and 374772 reviews -- There are also a lot of other Games with 5.0 rating and healthy number of reviews**')","538f0d58":"## ## <font color='darkgreen'>Paid Games vs Free Games<\/font>","85fe6c3b":"* ***As expected free games have more download and rating than paid games.***\n* ***Most of the Games are rated quite good around 4.0-5.0***\n* ***It doesn't seem like price has an impact on the ratings as both free and paid games have almost same ratings***","932c0d3d":"## ## <font color='darkgreen'>Popular Genres<\/font>","39ca3033":"**It is normal most of user never give the rating to app, therefore we have more missing variable in the averge user rating and user rating count.**","f90ea11c":"## ## <font color='darkgreen'>Age Rating<\/font>","58819b88":"# Introduction\nAccording to Newzoo, the mobile gaming industry is expected to top $100 billion by 2021, achieving a decade of double-digit growth. And it generated more than 50 per-cent of the global games market last year.1 How did such a young industry grow so fast? One way was by offering more payment options, some of which don\u2019t even require a purchase.\n\nAccording to eMarketer, mobile is expected to top TV in terms of daily screen time this year.2 Many of us will spend that time gaming. Those of us who use gaming apps spend an average of 6.5 hours a week on them, and 78 per-cent use them daily.3 Most say they play to \u201cpass the time.\u201d4 That\u2019s where mobile has a clear advantage: Unlike TV, we can take our phones anywhere.\n\nThe mobile games industry is worth billions of dollars, with companies spending vast amounts of money on the development and marketing of these games to an equally large market. Using this data set, insights can be gained into a sub-market of this market, strategy games. This sub-market includes titles such as Clash of Clans, Plants vs Zombies and Pokemon GO.\n\n![](https:\/\/www.thinkwithgoogle.com\/feature\/mobile-gaming-genres\/static\/img\/gamers-mmo.fa2a6c5.gif)","7efcd762":"## ## <font color='darkgreen'>Heatmap (Correlation)<\/font>","e8514b97":"## ## <font color='darkgreen'>User Rating Count<\/font>","197cc32f":"## ## <font color='darkgreen'>Name & Subtitle<\/font>","621406b5":"## ## <font color='chocolate'>Most Reviewed & Popular Game<\/font>","6f33b4f0":"# <font color='firebrick'>Exploratory Data Analysis<\/font>","33821aad":"**We can observe that most of the apps are free and some of are high cost between 175 to 200 dollars.**","54eec48c":"## ## <font color='chocolate'>Most Expensive Game<\/font>","c8c7362c":"## ## <font color='darkgreen'>Developer<\/font>","d2aa2a3e":"![](https:\/\/miro.medium.com\/max\/600\/1*hL_NaHfGU3udOdWU2dRCFg.gif)","7e70aae4":"# 2. Bivariate Analysis \n***Being the most important part, bivariate analysis tries to find the relationship between two variables. We will look for correlation or association between our predictor and target variables. Bivariate analysis is performed for any combination of categorical and numerical variables. The combination can be: Numerical & Numerical, Numerical & Categorical and Categorical & Categorical.***","8be2b8ab":"## ## <font color='darkgreen'> Average User Rating<\/font>","3983d7b2":"## ## <font color='darkgreen'>Averge User Rating vs Price<\/font>","e3151639":"## ## <font color='darkgreen'>Average Rating vs App Size<\/font>","bac4ae1b":"## ## <font color='darkgreen'>Average Rating vs Age Group<\/font>","29cf81fe":"## ## <font color='darkgreen'>Age Rating vs Primary Genre<\/font>","83a252ba":"## ## <font color='darkgreen'>Date vs App Size<\/font>","77c2b097":"## ## <font color='darkgreen'>Age Rating vs Price<\/font>","9dc3e38a":"## ## <font color='darkgreen'>Size<\/font>","51c63e6e":"## ## <font color='darkgreen'>Price<\/font>","90bd01e3":"## 1. Univariate Analysis \n***Univariate analysis separately explores the distribution of each variable in a data set. It looks at the range of values, as well as the central tendency of the values. Univariate data analysis does not look at relationships between various variables (like bivariate and multivariate analysis) rather it summarises each variable on its own.***\n\n***Methods to perform univariate analysis will depend on whether the variable is categorical or numerical. For numerical variable, we would explore its shape of distribution (distribution can either be symmetric or skewed) using histogram and density plots. For categorical variables, we would use bar plots to visualize the absolute.***","1cd2a7a9":"# Icon Url \nThis data is provided as a URL. In this case, you can get it by crawling. Please check your internet connection.\n\n* single url crawling: 0.5 sec\n* total : 17000 * 0.5 = 8500 s = over 2 hour.. OMG\n* just testing sample code (100 image)","d2bae5e6":"# Importing Packages and Collecting Data ","cda1af19":"## ## <font color='darkgreen'>User Rating Count vs Current Version Release Date<\/font>","bd11c1ef":"# Objective \nTo find out what factor make a successful game.\n\n# Ideas\nUse the number of ratings as a proxy indicator for the overall success of a game","f4a3e891":"# <font color='steelblue'>Give me your feedback and if you find my kernel helpful please UPVOTE will be appreciated<\/font>\n\n## --Thank You for Reading","eec6dd50":"## ## <font color='darkgreen'>Networkx (Correlation)<\/font>\nSource:\n* [Visualising stocks correlations with Networkx](https:\/\/towardsdatascience.com\/visualising-stocks-correlations-with-networkx-88f2ee25362e)\n* [I. Road to Viz Expert - Unusual tools](https:\/\/www.kaggle.com\/subinium\/road-to-viz-expert-1-unusual-tools)","d6fa06a8":"## ## <font color='chocolate'>Best Overall Game in App Store<\/font>\n"}}