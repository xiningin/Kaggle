{"cell_type":{"7d1ca646":"code","7522e894":"code","49301393":"code","3e683daa":"code","a1d746e9":"code","f3c4958d":"code","cf8f014f":"code","eba0d326":"code","2da931b6":"code","89d47cee":"code","d3e09051":"code","cceb2d2f":"code","434728b0":"code","54a6b814":"code","ce1d6b0b":"code","8f3e272e":"code","bb4c1b70":"code","0db20418":"code","54fd328f":"markdown","ecc5feab":"markdown","996f434b":"markdown","44bc0a21":"markdown","d34e82de":"markdown"},"source":{"7d1ca646":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7522e894":"import random","49301393":"def random_kid():\n    return random.choice([\"boy\", \"girl\"])\nboth_girls = 0\nolder_girl = 0\neither_girl = 0\nrandom.seed(0)\nfor _ in range(10000):\n    younger = random_kid()\n    older = random_kid()\n    if older == \"girl\":\n        older_girl += 1\n    if older == \"girl\" and younger == \"girl\":\n         both_girls += 1\n    if older == \"girl\" or younger == \"girl\":\n         either_girl += 1\n            \nprint(\"P(both | older):\", both_girls \/ older_girl) # 0.514 ~ 1\/2\nprint(\"P(both | either): \", both_girls \/ either_girl) # 0.342 ~ 1\/3","3e683daa":"def uniform_pdf(x):\n    return 1 if x >= 0 and x < 1 else 0\n\ndef uniform_cdf(x):\n    \"returns the probability that a uniform random variable is <= x\"\n    if x < 0: return 0 # uniform random is never less than 0\n    elif x < 1: return x # e.g. P(X <= 0.4) = 0.4\n    else: return 1 # uniform random is always less than 1","a1d746e9":"for _ in np.arange(-1,5,0.1):\n    print(uniform_pdf(_))","f3c4958d":"for _ in np.arange(-1,5,0.1):\n    print(uniform_cdf(_))","cf8f014f":"import matplotlib.pyplot as plt","eba0d326":"#Plotting Uniform PDF\nxs = np.arange(-1,5,0.1)\nplt.plot(xs,[uniform_pdf(x) for x in xs],'-',label='Uniform PDF')\nplt.legend()\nplt.title(\"Uniform Probability Distribution Function\")\nplt.show()","2da931b6":"#Plotting Uniform CDF\nxs = np.arange(-1,5,0.1)\nplt.plot(xs,[uniform_cdf(x) for x in xs],'-',label='Uniform CDF')\nplt.legend()\nplt.title(\"Uniform Cumulative Distribution Function\")\nplt.show()","89d47cee":"import math","d3e09051":"def normal_pdf(x, mu=0, sigma=1):\n    sqrt_two_pi = math.sqrt(2 * math.pi)\n    return (math.exp(-(x-mu) ** 2 \/ 2 \/ sigma ** 2) \/ (sqrt_two_pi * sigma))\n","cceb2d2f":"xs = [x \/ 10.0 for x in range(-50, 50)]\nplt.plot(xs,[normal_pdf(x,sigma=1) for x in xs],'-',label='mu=0,sigma=1')\nplt.plot(xs,[normal_pdf(x,sigma=2) for x in xs],'--',label='mu=0,sigma=2')\nplt.plot(xs,[normal_pdf(x,sigma=0.5) for x in xs],':',label='mu=0,sigma=0.5')\nplt.plot(xs,[normal_pdf(x,mu=-1) for x in xs],'-.',label='mu=-1,sigma=1')\nplt.legend()\nplt.title(\"Various Normal pdfs\")\nplt.show()\n","434728b0":"def normal_cdf(x, mu=0,sigma=1):\n    return (1 + math.erf((x - mu) \/ math.sqrt(2) \/ sigma)) \/ 2","54a6b814":"xs = [x \/ 10.0 for x in range(-50, 50)]\nplt.plot(xs,[normal_cdf(x,sigma=1) for x in xs],'-',label='mu=0,sigma=1')\nplt.plot(xs,[normal_cdf(x,sigma=2) for x in xs],'--',label='mu=0,sigma=2')\nplt.plot(xs,[normal_cdf(x,sigma=0.5) for x in xs],':',label='mu=0,sigma=0.5')\nplt.plot(xs,[normal_cdf(x,mu=-1) for x in xs],'-.',label='mu=-1,sigma=1')\nplt.legend(loc=4) # bottom right\nplt.title(\"Various Normal cdfs\")\nplt.show()\n","ce1d6b0b":"#Using Python 3.8 Features xD\ndef bernoulli_trial(p: float) -> int:\n    \"\"\"Returns 1 with probability p and 0 with probability 1-p\"\"\"\n    return 1 if random.random() < p else 0\n\ndef binomial(n: int, p: float) -> int:\n    \"\"\"Returns the sum of n bernoulli(p) trials\"\"\"\n    return sum(bernoulli_trial(p) for _ in range(n))","8f3e272e":"from collections import Counter","bb4c1b70":"def binomial_histogram(p: float, n: int, num_points: int) -> None:\n    \"\"\"Picks points from a Binomial(n, p) and plots their histogram\"\"\"\n    data = [binomial(n, p) for _ in range(num_points)]\n\n    # use a bar chart to show the actual binomial samples\n    histogram = Counter(data)\n    plt.bar([x - 0.4 for x in histogram.keys()],\n            [v \/ num_points for v in histogram.values()],\n            0.8,\n            color='0.75')\n\n    mu = p * n\n    sigma = math.sqrt(n * p * (1 - p))\n\n    # use a line chart to show the normal approximation\n    xs = range(min(data), max(data) + 1)\n    ys = [normal_cdf(i + 0.5, mu, sigma) - normal_cdf(i - 0.5, mu, sigma)\n          for i in xs]\n    plt.plot(xs,ys)\n    plt.title(\"Binomial Distribution vs. Normal Approximation\")","0db20418":"binomial_histogram(0.75,100,10000)","54fd328f":"> Thus for large values of n we see that Binomial Distribution approximates to Normal Distribution ","ecc5feab":"**Normal Distributions**\n","996f434b":"**Error \/ Sigmoid Function**","44bc0a21":"**Conditional Probability **\n\n1. Both children are girls and the older child is a girl\n2. Both children are girls and at least one of the children is a girl","d34e82de":"**Continuous Distribution**"}}