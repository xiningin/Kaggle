{"cell_type":{"932b43e3":"code","9cc4e897":"code","477de14d":"code","b82ac28f":"code","2e77b327":"code","6df49f22":"code","f352ac79":"code","b3cd973d":"code","ad769760":"code","8df6d8cf":"code","fab469da":"code","1aabfae3":"code","64baa242":"code","42d3b6af":"code","5c5edfee":"code","cab087f6":"code","50f10690":"code","8bbec203":"code","08366300":"code","5ce94eef":"code","23831a0c":"code","6bd81f61":"code","78ec0c10":"code","1ca37d2c":"code","843139ed":"code","09956ca9":"code","93d0fb61":"code","49c0a7cd":"code","85112fe9":"code","a8404039":"code","7dce7ed7":"code","64a727c2":"code","4ecf833d":"code","55a31b83":"code","0caba314":"code","bfc7fa5b":"code","3ba2a32b":"code","7ac54b4c":"code","28c136ee":"markdown","5d8438f0":"markdown","aaf6cd4b":"markdown","41d54276":"markdown","067f1b30":"markdown","37c8b84e":"markdown","a48722b0":"markdown","f787862c":"markdown","e610f31c":"markdown","01970f2e":"markdown","c5015678":"markdown","5ac64884":"markdown","5e7bb284":"markdown","06e7f844":"markdown","686d331d":"markdown","2640271b":"markdown","a1a3a255":"markdown","948062cd":"markdown","1d973e8f":"markdown","d906f5ed":"markdown","6eb53571":"markdown","e861cf18":"markdown","fca2d120":"markdown","3b2b3c31":"markdown","857832d5":"markdown","22811d6d":"markdown","64d13db7":"markdown","0f478c68":"markdown","c02595de":"markdown","76ba4d6c":"markdown","a1d69198":"markdown","957682c3":"markdown","0dac5d3e":"markdown","fe2e2704":"markdown","7c1efee7":"markdown","940fa3d2":"markdown","09935ddd":"markdown"},"source":{"932b43e3":"#import libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#configure jupyter to allow each cell to display multiple outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","9cc4e897":"#loads CardioGoodFitness dataset and displays 10 sampled rows\ndataset = pd.read_csv('..\/input\/cardiogoodfitness\/CardioGoodFitness.csv')\ndataset.sample(10)","477de14d":"#check dataset\ndataset.info()","b82ac28f":"#check distribution of numerical data\ndataset.describe()","2e77b327":"#check skew\ndataset.skew()","6df49f22":"#create counts of data for plotting categorical variables\nproducts = np.unique(dataset['Product'], return_counts=True)\ngender = np.unique(dataset['Gender'], return_counts=True)\nmarital_stat = np.unique(dataset['MaritalStatus'], return_counts=True)\nprint('products = {}\\n'.format(products))\nprint('gender = {}\\n'.format(gender))\nprint('marital_stat = {}\\n'.format(marital_stat))","f352ac79":"# create fontdicts for formatting figure text\naxtitle_dict = {'family': 'serif',\n        'color':  'darkred',\n        'weight': 'bold',\n        'size': 16\n        }\n\naxlab_dict = {'family': 'serif',\n              'color': 'black',\n              'size': 14\n              }\n\n#create figure with 3 x 3 grid of subplots\nfig = plt.figure(figsize=[16,12])\nfig.suptitle(\"SPREAD OF DATA\", fontsize=18, fontweight='bold')\nfig.subplots_adjust(top=0.92)\nfig.subplots_adjust(hspace=0.5, wspace=0.4)\n\n#load plots into subplots, and set plot parameters\nax0 = fig.add_subplot(3, 3, 1)\nsns.barplot(x=list(products[0]), y=list(products[1]), ax=ax0, color='teal')\nax0.text(0.3, 70, '{}%' .format(str(round(products[1][0]\/sum(products[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax0.text(1.3, 50, '{}%' .format(str(round(products[1][1]\/sum(products[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax0.text(2.3, 30, '{}%' .format(str(round(products[1][2]\/sum(products[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax0.set_title('Model No.', fontdict=axtitle_dict)\nax0.set_xlabel('Categorical', fontdict=axlab_dict)\nax0.set_ylabel('Count', fontdict=axlab_dict)\n\nax1 = fig.add_subplot(3, 3, 2)\nsns.distplot(dataset['Age'], ax=ax1, color='dodgerblue');\nax1.axvline(dataset['Age'].quantile(q=0.25),color='green',linestyle='--',label='25% Quartile')\nax1.axvline(dataset['Age'].mean(),color='red',linestyle='--',label='Mean')\nax1.axvline(dataset['Age'].median(),color='black',linestyle='--',label='Median')\nax1.axvline(dataset['Age'].quantile(q=0.75),color='blue',linestyle='--',label='75% Quartile')\nax1.text(58, 0.04, 'skewness: {}' .format(str(round(dataset['Age'].skew(),3))), ha='right', va='center', size=11)\nax1.set_title('Age', fontdict=axtitle_dict)\nax1.set_xlabel('Age [yrs]', fontdict=axlab_dict)\nax1.set_ylabel('Probability per Unit', fontdict=axlab_dict)\nax1.legend(fontsize=11)\n\nax2 = fig.add_subplot(3, 3, 3)\nsns.barplot(x=list(gender[0]), y=list(gender[1]), ax=ax2, color='coral')\nax2.text(0.2, 62, '{}%' .format(str(round(gender[1][0]\/sum(gender[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax2.text(1.2, 90, '{}%' .format(str(round(gender[1][1]\/sum(gender[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax2.set_title('Gender', fontdict=axtitle_dict)\nax2.set_xlabel('Gender', fontdict=axlab_dict)\nax2.set_ylabel('Count', fontdict=axlab_dict)\n\nax3 = fig.add_subplot(3, 3, 4)\nsns.countplot(dataset['Education'], ax=ax3, color='limegreen')\nax3.set_title('Education (in years)', fontdict=axtitle_dict)\nax3.set_xlabel('Integer Categorical', fontdict=axlab_dict)\nax3.set_ylabel('Count', fontdict=axlab_dict)\n\nax4 = fig.add_subplot(3, 3, 5)\nsns.barplot(x=list(marital_stat[0]), y=list(marital_stat[1]), ax=ax4, color='orchid')\nax4.text(0.2, 92, '{}%' .format(str(round(marital_stat[1][0]\/sum(marital_stat[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax4.text(1.2, 58, '{}%' .format(str(round(marital_stat[1][1]\/sum(marital_stat[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nax4.set_title('Marital Status', fontdict=axtitle_dict)\nax4.set_xlabel('Integer Categorical', fontdict=axlab_dict)\nax4.set_ylabel('Count', fontdict=axlab_dict)\n\nax5 = fig.add_subplot(3, 3, 6)\nsns.countplot(dataset['Usage'], ax=ax5, color='gold')\nax5.set_title('Expected Usage (freq.)', fontdict=axtitle_dict)\nax5.set_xlabel('Integer Categorical', fontdict=axlab_dict)\nax5.set_ylabel('Count', fontdict=axlab_dict)\n\nax6 = fig.add_subplot(3, 3, 7)\nsns.countplot(dataset['Fitness'], ax=ax6, color='tomato')\nax6.set_title('Fitness (Self-rated)', fontdict=axtitle_dict)\nax6.set_xlabel('Integer Categorical', fontdict=axlab_dict)\nax6.set_ylabel('Count', fontdict=axlab_dict)\n\nax7 = fig.add_subplot(3, 3, 8)\nsns.distplot(dataset['Income'], ax=ax7, color='slateblue')\nax7.axvline(dataset['Income'].quantile(q=0.25),color='green',linestyle='--',label='25% Quartile')\nax7.axvline(dataset['Income'].mean(),color='red',linestyle='--',label='Mean')\nax7.axvline(dataset['Income'].median(),color='black',linestyle='--',label='Median')\nax7.axvline(dataset['Income'].quantile(q=0.75),color='blue',linestyle='--',label='75% Quartile')\nax7.text(118000, 1.8e-5, 'skewness: {}' .format(str(round(dataset['Income'].skew(),3))), ha='right', va='center', size=11)\nax7.set_title('Income', fontdict=axtitle_dict)\nax7.set_xlabel('Annual Income [$USD]', fontdict=axlab_dict)\nax7.set_ylabel('Probability per Unit', fontdict=axlab_dict)\nax7.legend(fontsize=11)\n\nax8 = fig.add_subplot(3, 3, 9)\nsns.distplot(dataset['Miles'], ax=ax8, color='peru');\nax8.axvline(dataset['Miles'].quantile(q=0.25),color='green',linestyle='--',label='25% Quartile')\nax8.axvline(dataset['Miles'].mean(),color='red',linestyle='--',label='Mean')\nax8.axvline(dataset['Miles'].median(),color='black',linestyle='--',label='Median')\nax8.axvline(dataset['Miles'].quantile(q=0.75),color='blue',linestyle='--',label='75% Quartile')\nax8.text(400, 0.006, 'skewness: {}' .format(str(round(dataset['Miles'].skew(),3))), ha='right', va='center', size=11)\nax8.set_title('Expected Miles', fontdict=axtitle_dict)\nax8.set_xlabel('Distance [miles]', fontdict=axlab_dict)\nax8.set_ylabel('Probability per Unit', fontdict=axlab_dict)\nax8.legend(fontsize=11)\n\nfig.show();","b3cd973d":"#create fontdict for axis labels\naxlab2 = {'family': 'serif',\n              'color': 'black',\n              'weight': 'bold',\n              'size': 16\n         }\n#create subplot layout\nfig = plt.figure(figsize=[10,10]);\ngrid = plt.GridSpec(6, 1, wspace=0.3, hspace=1.2);\nx = ['Age', 'Education', 'Usage', 'Fitness', 'Income', 'Miles'];\ncol = ['forestgreen','dodgerblue','goldenrod', 'coral', 'burlywood','thistle'];\n\n#loop to populate boxplots within subplots\nfor i in np.arange(0,6):\n    for j in np.arange(0,1): \n        exec(f'ax{i}{j} = plt.subplot(grid[i,j]);')\n        exec(f'sns.boxplot(x=dataset[x[{i}]], ax=ax{i}{j}, color=col[{i}]);')\n        exec(f'ax{i}{j}.set_title(x[{i}], fontdict=axlab2);')\n        exec(f'ax{i}{j}.set_xlabel(\"\", fontdict=axlab2);')\n        exec(f'a{i} = ax{i}{j}.axvline(dataset[x[{i}]].mean(),color= \"red\", linestyle=\"--\", label=\"mean\")')\n        exec(f'b{i} = ax{i}{j}.axvline(dataset[x[{i}]].mean()+ 3 * dataset[x[{i}]].std(),color= \"orange\", linestyle=\"--\", label=\"3sigma\")')\n        exec(f'ax{i}{j}.axvline(max([dataset[x[{i}]].mean()- 3 * dataset[x[{i}]].std(), 0]),color= \"orange\", linestyle=\"--\")')\n        exec(f'c{i} = ax{i}{j}.axvline(dataset[x[{i}]].mean()+ 2 * dataset[x[{i}]].std(),color= \"slategrey\", linestyle=\"--\", label=\"2sigma\")')\n        exec(f'ax{i}{j}.axvline(max([dataset[x[{i}]].mean()- 2 * dataset[x[{i}]].std(), 0]),color= \"slategrey\", linestyle=\"--\")')\n        plt.xticks(fontsize=14);\n\nplt.legend([a0, c0, b0], ['mean','2sigma','3sigma'], loc='upper center', bbox_to_anchor=(0.9, 14), fontsize=14)        \nfig.show();","ad769760":"#create fontdict for axis labels\naxlab2 = {'family': 'serif',\n              'color': 'black',\n              'weight': 'bold',\n              'size': 16\n         }\n#create subplot layout\nfig = plt.figure(figsize=[20,10]);\ngrid = plt.GridSpec(6, 3, wspace=0.1, hspace=1.2);\nx = ['Age', 'Education', 'Usage', 'Fitness', 'Income', 'Miles'];\ncol = ['forestgreen','dodgerblue','goldenrod', 'coral', 'burlywood','thistle'];\nprod = ['TM195', 'TM498', 'TM798']\n\n#loop to populate boxplots within subplots\nfor i in np.arange(0,6):\n    for j in np.arange(0,3): \n        exec(f'ax{i}{j} = plt.subplot(grid[i,j]);')\n        exec(f'sns.boxplot(x=dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]], ax=ax{i}{j}, color=col[{i}]);')\n        blah = x[i] + ' - ' + prod[j]\n        exec(f'ax{i}{j}.set_title(blah, fontdict=axlab2);')\n        exec(f'ax{i}{j}.set_xlabel(\"\", fontdict=axlab2);')\n        exec(f'a{i}{j} = ax{i}{j}.axvline(dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].mean(),color= \"red\", linestyle=\"--\", label=\"mean\")')\n        exec(f'b{i}{j} = ax{i}{j}.axvline(dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].mean()+ 3 * dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].std(),color= \"orange\", linestyle=\"--\", label=\"3sigma\")')\n        exec(f'ax{i}{j}.axvline(max([dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].mean()- 3 * dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].std(), 0]),color= \"orange\", linestyle=\"--\")')\n        exec(f'c{i}{j} = ax{i}{j}.axvline(dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].mean()+ 2 * dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].std(),color= \"slategrey\", linestyle=\"--\", label=\"2sigma\")')\n        exec(f'ax{i}{j}.axvline(max([dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].mean()- 2 * dataset.loc[dataset[\"Product\"] == prod[{j}], x[{i}]].std(), 0]),color= \"slategrey\", linestyle=\"--\")')\n        plt.xticks(fontsize=14);\n\nplt.legend([a00, c00, b00], ['mean','2sigma','3sigma'], loc='upper center', bbox_to_anchor=(0.9, 14), fontsize=14)        \nfig.show();","8df6d8cf":"#plot Age - TM798 boxplot\nfig = plt.figure(figsize=[16,4])\nsns.boxplot(x=dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'], color='forestgreen');\nplt.title('Age - TM798', fontdict=axlab2);\nplt.xlabel(\"\", fontdict=axlab2);\nplt.axvline(dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].mean(),color= \"red\", linestyle=\"--\", label=\"mean\")\nplt.axvline(dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].mean()+ 3 * dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].std(),color= \"orange\", linestyle=\"--\", label=\"3sigma\")\nplt.axvline(max([dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].mean()- 3 * dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].std(), 0]),color= \"orange\", linestyle=\"--\")\nplt.axvline(dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].mean()+ 2 * dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].std(),color= \"slategrey\", linestyle=\"--\", label=\"2sigma\")\nplt.axvline(max([dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].mean()- 2 * dataset.loc[dataset[\"Product\"] == 'TM798', 'Age'].std(), 0]),color= \"slategrey\", linestyle=\"--\")\nplt.xticks(fontsize=14);\nplt.legend(loc='upper center', bbox_to_anchor=(0.88, 1), fontsize=14);       ","fab469da":"#create dummies of categorical features so that correlation may be analyzed\ndum_dataset= pd.get_dummies(dataset, prefix='Prod', columns=['Product'])\ndum_dataset= pd.get_dummies(dum_dataset, prefix='Mar', columns=['MaritalStatus'])\ndum_dataset= pd.get_dummies(dum_dataset, prefix='Gen', columns=['Gender'])\ndum_dataset.head(10)","1aabfae3":"#plot correlation matrix heatmap\nfig, ax = plt.subplots(figsize=[13,10])\nsns.heatmap(dum_dataset.corr(), ax=ax,  annot=True, linewidths=0.05, fmt= '.2f',cmap=\"RdBu\")\nax.tick_params(axis='both', which='major', labelsize=14)\nax.set_title('Dataset Correlation Matrix', fontdict={'family': 'serif', 'color': 'black', 'size': 18, 'weight': 'bold'})\nfig.show();","64baa242":"#find which features have significant correlation (>0.5) \nblah = dum_dataset.corr()>0.5\n\n#disregard identity\nfor i in np.arange(0,len(blah)):\n    blah.iloc[i,i] = False\n\n#create table of correlation relationships by index values\ncorr_val = []\nfor i in np.arange(0,len(blah.iloc[0,:])):\n    for j in np.arange(0,len(blah.iloc[:,0])):\n        if blah.iloc[i,j] == True:\n            corr_val.append([blah.index.values[j], blah.columns.values[i]])\n\n#drop rows in table in which relationships are duplicated in table (x vs. y and y vs. x)            \nx = []\nfor i in np.arange(0,len(corr_val)):\n    x.append(str(i))\ncorr_val = pd.DataFrame(corr_val, columns=[\"\",\"\"], index=x)\ndel blah, x\nfor i in corr_val.index:\n    for j in corr_val.index:\n        if any(corr_val.index == i) == True:\n            a, b = corr_val.loc[i]\n            if i != j:\n                if np.logical_and((corr_val.loc[j][0] == b) == True, (corr_val.loc[j][1] == a) == True) == True:\n                    corr_val.drop(j, inplace=True);\ncorr_val.reset_index(drop=True, inplace=True)\n\nprint('The following features in the data are significantly correlated (coef. > 0.5):\\n {}' .format(corr_val))","42d3b6af":"sns.pairplot(dataset, corner=True);","5c5edfee":"#create fontdict for axis labels\naxlab2 = {'family': 'serif',\n              'color': 'black',\n              'weight': 'bold',\n              'size': 16\n         }\n\n# create figure with 4 subplots\nfig = plt.figure(figsize=[20,8])\nfig.suptitle(\"Fitness, Usage, Miles, and Income are Highly Correlated Features of the Data\", fontsize=20, fontweight='bold', color='darkred')\ngrid = plt.GridSpec(2, 3, wspace=0.3, hspace=0.4)\n\nax0 = plt.subplot(grid[0, 0])\nsns.violinplot(data=dataset, x='Usage', y='Fitness', ax=ax0)\nax0.text(4.75, 0.5, 'Corr. Ceof.: {}' .format(str(round(dataset.corr().iloc[3,2],2))), ha='right', va='center', size=14)\nax0.set_xlabel('Expected Usage', fontdict=axlab2)\nax0.set_ylabel('Fitness (Self-rated)', fontdict=axlab2)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax1 = plt.subplot(grid[0, 1])\nsns.violinplot(data=dataset, x='Usage', y='Miles', ax=ax1)\nax1.text(4.75, 8, 'Corr. Ceof.: {}' .format(str(round(dataset.corr().iloc[5,2],2))), ha='right', va='center', size=14)\nax1.set_xlabel('Expected Usage', fontdict=axlab2)\nax1.set_ylabel('Expected Miles', fontdict=axlab2)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax2 = plt.subplot(grid[:3, 2])\nsns.violinplot(data=dataset, x='Fitness', y='Miles', ax=ax2)\nax2.text(3.75, -20, 'Corr. Ceof.: {}' .format(str(round(dataset.corr().iloc[5,3],2))), ha='right', va='center', size=14)\nax2.set_xlabel('Fitness (Self-rated)',fontdict=axlab2)\nax2.set_ylabel('Expected Miles', fontdict=axlab2)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax3 = plt.subplot(grid[1, :2])\nsns.pointplot(data=dataset, x='Usage', y='Income', ax=ax3, color='salmon')\nax3.text(5, 45000, 'Corr. Ceof.: {}' .format(str(round(dataset.corr().iloc[2,4],2))), ha='right', va='center', size=14)\nax3.set_xlabel('Expected Usage',fontdict=axlab2)\nax3.set_ylabel('Annual Income [USD]', fontdict=axlab2)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nfig.show();","cab087f6":"#create boxplot of education by product\nfig = plt.figure();\nsns.boxplot(data=dataset, x='Product', y='Education');\nplt.xlabel('Product', fontsize=14, fontweight='bold');\nplt.ylabel('Education', fontsize=14, fontweight='bold');\nplt.title('Education Level by Product', fontsize=16, fontweight='bold');","50f10690":"plt.figure();\nsns.pointplot(data=dataset, x='Education', y='Income');","8bbec203":"#create barplot of total products sold\nfig = plt.figure();\nsns.barplot(x=list(products[0]), y=list(products[1]), palette=['dodgerblue','salmon','limegreen']);\nplt.text(0.2, 70, '{}%' .format(str(round(products[1][0]\/sum(products[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nplt.text(1.2, 50, '{}%' .format(str(round(products[1][1]\/sum(products[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nplt.text(2.2, 30, '{}%' .format(str(round(products[1][2]\/sum(products[1])*100,1))), ha='right', va='center', size=13, fontdict={'weight': 'bold'})\nplt.xlabel('Product', fontsize=14, fontweight='bold');\nplt.ylabel('Count', fontsize=14, fontweight='bold');\nplt.title('Total Products Sold', fontsize=14, fontweight='bold');","08366300":"#function to display percent alongside count\ndef spec(x):\n    return '{:.1f}%\\n({:.0f})'.format(x, np.sum(products[1])*x\/100);\n\n#create pie chart of products sold\nfig = plt.figure(figsize=[5,5]);\npatches, texts, autotexts = plt.pie(list(products[1]),labels=list(products[0]), autopct=spec, shadow=True, startangle=90);\ntexts[0].set_fontsize(14)\ntexts[1].set_fontsize(14)\ntexts[2].set_fontsize(14)\nautotexts[0].set_fontsize(14)\nautotexts[1].set_fontsize(14)\nautotexts[2].set_fontsize(14)\nplt.title('Total Products Sold', fontsize=16, fontweight='bold');","5ce94eef":"#Create bins for single and partnered per product, then create sub-bins for male customers within single or partnered\n# Normalize data by Product for comparability across products\nblah = np.zeros([3,2])\nhah = np.zeros([3,2])\nfor i in np.arange(0,len(dataset['Product'])):\n    if np.logical_and(dataset.loc[i, 'Product'] == 'TM195', dataset.loc[i, 'MaritalStatus'] == 'Single')==True:\n        blah[0,0] += 1\n        if dataset.loc[i, 'Gender'] == 'Male':\n            hah[0,0] += 1\n    elif np.logical_and(dataset.loc[i, 'Product'] == 'TM195', dataset.loc[i, 'MaritalStatus'] == 'Partnered')==True:\n        blah[0,1] += 1\n        if dataset.loc[i, 'Gender'] == 'Male':\n            hah[0,1] += 1\n    elif np.logical_and(dataset.loc[i, 'Product'] == 'TM498', dataset.loc[i, 'MaritalStatus'] == 'Single')==True:\n        blah[1,0] += 1\n        if dataset.loc[i, 'Gender'] == 'Male':\n            hah[1,0] += 1\n    elif np.logical_and(dataset.loc[i, 'Product'] == 'TM498', dataset.loc[i, 'MaritalStatus'] == 'Partnered')==True:\n        blah[1,1] += 1\n        if dataset.loc[i, 'Gender'] == 'Male':\n            hah[1,1] += 1\n    elif np.logical_and(dataset.loc[i, 'Product'] == 'TM798', dataset.loc[i, 'MaritalStatus'] == 'Single')==True:\n        blah[2,0] += 1\n        if dataset.loc[i, 'Gender'] == 'Male':\n            hah[2,0] += 1\n    elif np.logical_and(dataset.loc[i, 'Product'] == 'TM798', dataset.loc[i, 'MaritalStatus'] == 'Partnered')==True:\n        blah[2,1] += 1\n        if dataset.loc[i, 'Gender'] == 'Male':\n            hah[2,1] += 1\nms_v_prod = pd.DataFrame(blah, columns=['Single','Partnered'], index=['TM195','TM498','TM798'])\n\n#normalize data by product\nblah = ms_v_prod.copy()\nblah.iloc[0,:] = np.round(ms_v_prod.iloc[0,:]\/ms_v_prod.iloc[0,:].sum(),2)\nblah.iloc[1,:] = np.round(ms_v_prod.iloc[1,:]\/ms_v_prod.iloc[1,:].sum(),2)\nblah.iloc[2,:] = np.round(ms_v_prod.iloc[2,:]\/ms_v_prod.iloc[2,:].sum(),2)\nms_v_prod1 = blah\nms_g_v_prod = pd.DataFrame(hah, columns=['S_male','P_male'], index=['TM195','TM498','TM798'])\nhah = ms_g_v_prod.copy()\nhah.iloc[0,:] = np.round(ms_g_v_prod.iloc[0,:]\/ms_v_prod.iloc[0,:].sum(),2)\nhah.iloc[1,:] = np.round(ms_g_v_prod.iloc[1,:]\/ms_v_prod.iloc[1,:].sum(),2)\nhah.iloc[2,:] = np.round(ms_g_v_prod.iloc[2,:]\/ms_v_prod.iloc[2,:].sum(),2)\nhaha = hah.copy()\n#for i in [0,1,2]:\n#    for j in [0,1]:\n#        haha.iloc[i,j] = np.round(hah.iloc[i,j]*blah.iloc[i,j],2)\nms_g_v_prod1 = haha\n\n# create an overlayed and grouped barplot\nfig = plt.figure(figsize=[12,10])\nax1 = fig.add_subplot(111)\nax2 = ax1.twiny()\nbarWidth = 0.25\n \n# set height of bar\nbars1 = list(ms_v_prod1['Single'])\nbars2 = list(ms_v_prod1['Partnered'])\nbars3 = list(ms_g_v_prod1['S_male'])\nbars4 = list(ms_g_v_prod1['P_male'])\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1 + 0.05]\n \n# Make the plot\nax1.bar(r1, bars1, color='salmon', width=barWidth, edgecolor='white', label='Female')\nax1.bar(r1, bars3, color='dodgerblue', width=barWidth, edgecolor='white', label='Male')\nax1.bar(r2, bars2, color='salmon', width=barWidth, edgecolor='white')\nax1.bar(r2, bars4, color='dodgerblue', width=barWidth, edgecolor='white')\nax1.axvline(0.65,color='grey',linestyle='--')\nax1.axvline(1.65,color='grey',linestyle='--')\n\n# Label the plot and make it look good\nax1.set_ylabel('Normalized by Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_yticks(np.arange(0,0.8,0.1))\nax1.set_xticks([-0.09, 0.177, 0.92, 1.177, 1.92, 2.177])\nax1.set_xticklabels(['Single', 'Partnered','Single', 'Partnered','Single', 'Partnered'], fontdict={'color': 'black', 'size': 16, 'rotation': 45})\nax1.set_yticklabels(np.round(np.arange(0,0.8,0.1),1), fontdict={'color': 'black', 'size': 14})\nax1.legend(fontsize=14)\nax1.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\n\nax2.set_xlim(ax1.get_xlim())\nax2.set_xticks([r + barWidth - 0.1 for r in range(len(bars1))])\nax2.set_xticklabels(['TM195','TM498','TM798'],fontdict={'color': 'black', 'size': 14})\nax2.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\nax1.text(0.1, 0.77, 'Product:', ha='right', va='center', size=16, fontweight='bold')\n\nfig.show();","23831a0c":"#calculate fraction of males in each group in the above plot and then store in pandas dataframe\n#normalize by product to allow comparability across products\nnah = blah.copy()\nfor i in [0,1,2]:\n    for j in [0,1]:\n        nah.iloc[i,j] = np.round(haha.iloc[i,j]\/blah.iloc[i,j],2)\nfrac_male = nah\n\n#create grouped bar plot\nfig = plt.figure(figsize=[10,8])\nfig.suptitle(\"Percent Female Customers\", fontsize=18, fontweight='bold')\nfig.subplots_adjust(top=0.92)\nax1 = fig.add_subplot(111)\nbarWidth = 0.25\n \n# set height of bar\nbars1 = list(1-frac_male['Single'])\nbars2 = list(1-frac_male['Partnered'])\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1 + 0.05]\n \n# Make the plot\nax1.bar(r1, bars1, color='mediumseagreen', width=barWidth, edgecolor='white', label='Single')\nax1.bar(r2, bars2, color='cornflowerblue', width=barWidth, edgecolor='white', label='Parterned')\nax1.axvline(0.65,color='grey',linestyle='--')\nax1.axvline(1.65,color='grey',linestyle='--')\nax1.set_ylabel('Normalized by Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xlabel('Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xticks([0.15, 1.15, 2.15])\nax1.set_yticks(np.arange(0,0.9,0.1))\nax1.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\nax1.set_xticklabels(['TM195','TM498','TM798'],fontdict={'color': 'black', 'size': 14})\nax1.set_yticklabels(np.round(np.arange(0,0.9,0.1),1), fontdict={'color': 'black', 'size': 14})\nfig.legend(loc='upper center', bbox_to_anchor=(0.25, 0.9), fontsize=14)\nfig.show();","6bd81f61":"print('The percent of females as depicted in the above plot is as follows:\\n\\n{}'.format(1-frac_male))","78ec0c10":"#create fontdict for axis labels\naxlab2 = {'family': 'serif',\n              'color': 'black',\n              'weight': 'bold',\n              'size': 16\n         }\n\n# create figure with 4 subplots\nfig = plt.figure(figsize=[10,10])\ngrid = plt.GridSpec(3, 2, wspace=0.2, hspace=0.2)\n\nax0 = plt.subplot(grid[0, 0])\nsns.violinplot(data=dataset, x='Gender', y='Fitness', ax=ax0)\nax0.set_ylabel('Fitness', fontdict=axlab2)\nax0.set(xticklabels=[], xlabel=None)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax1 = plt.subplot(grid[0, 1])\nsns.violinplot(data=dataset, x='MaritalStatus', y='Fitness', ax=ax1, palette=['forestgreen','firebrick'])\nax1.set(xticklabels=[], xlabel=None, ylabel=None)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax2 = plt.subplot(grid[1, 0])\nsns.violinplot(data=dataset, x='Gender', y='Usage', ax=ax2)\nax2.set_ylabel('Expected Usage', fontdict=axlab2)\nax2.set(xticklabels=[], xlabel=None)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax3 = plt.subplot(grid[1, 1])\nsns.violinplot(data=dataset, x='MaritalStatus', y='Usage', ax=ax3, palette=['forestgreen','firebrick'])\nax3.set(xticklabels=[], xlabel=None, ylabel=None)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax4 = plt.subplot(grid[2, 0])\nsns.violinplot(data=dataset, x='Gender', y='Miles', ax=ax4)\nax4.set_xlabel('Gender', fontdict=axlab2)\nax4.set_ylabel('Expected Miles', fontdict=axlab2)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax5 = plt.subplot(grid[2, 1])\nsns.violinplot(data=dataset, x='MaritalStatus', y='Miles', ax=ax5, palette=['forestgreen','firebrick'])\nax5.set_xlabel('Marital Status', fontdict=axlab2)\nax5.set(ylabel=None)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show();","1ca37d2c":"#create fontdict for axis labels\naxlab2 = {'family': 'serif',\n              'color': 'black',\n              'weight': 'bold',\n              'size': 16\n         }\n\n# create figure with 4 subplots\nfig = plt.figure(figsize=[14,8])\n#fig.suptitle(\"Title\", fontsize=18, fontweight='bold', color='darkred')\ngrid = plt.GridSpec(1, 5, wspace=0.2)\n\nax0 = plt.subplot(grid[0, 0:2])\nsns.barplot(data=dataset, x='Product', y='Income', hue='Fitness', ax=ax0);\nax0.set_ylabel('Income', fontdict=axlab2)\nax0.set(ylim=(0, 120000))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax1 = plt.subplot(grid[0, 2:4])\nsns.barplot(data=dataset, x='Product', y='Income', hue='Usage', ax=ax1);\nax1.set(yticklabels=[], ylabel=None)\nax1.set(ylim=(0, 120000))\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nax2 = plt.subplot(grid[0, 4])\nsns.violinplot(data=dataset, y='Income', ax=ax2, palette=['mediumaquamarine']);\nax2.set(ylim=(0, 120000))\nax2.yaxis.tick_right()\nax2.yaxis.set_label_position(\"right\")\nax2.set_ylabel('Income', fontdict=axlab2)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show();","843139ed":"# create jointplot figure\nfig = plt.figure(figsize=[14,8]);\n\na = sns.jointplot(data=dataset, x='Age', y='Miles', kind='hex');\na.set_axis_labels('Age', 'Miles', fontsize=16, fontweight='bold');\nfig.show();","09956ca9":"#create probability density plot of customer annual income by product\nplt.figure(figsize=[10,8]);\n\nsns.distplot(dataset['Age'].where(dataset['Product']=='TM195'), hist=None, label='TM195', kde_kws=dict(linewidth=5, color='royalblue'));\nsns.distplot(dataset['Age'].where(dataset['Product']=='TM498'), hist=None, label='TM498', kde_kws=dict(linewidth=5, color='darkorange'));\nsns.distplot(dataset['Age'].where(dataset['Product']=='TM798'), hist=None, label='TM798', kde_kws=dict(linewidth=5, color='forestgreen'));\n#annotate with mean, median, and mode\nplt.text(61, 0.06, '            Mean     Median    Mode\\nTM195    {}          {}     {}\\nTM498    {}          {}     {}\\nTM798    {}          {}     {}'.format(round(dataset['Age'].where(dataset['Product']=='TM195').mean(),1),dataset['Age'].where(dataset['Product']=='TM195').median(),dataset['Age'].where(dataset['Product']=='TM195').mode()[0],round(dataset['Age'].where(dataset['Product']=='TM498').mean(),1),dataset['Age'].where(dataset['Product']=='TM498').median(),dataset['Age'].where(dataset['Product']=='TM498').mode()[0],round(dataset['Age'].where(dataset['Product']=='TM798').mean(),1),dataset['Age'].where(dataset['Product']=='TM798').median(),dataset['Age'].where(dataset['Product']=='TM798').mode()[0]), ha='right', va='center', size=12)\n\nplt.legend(fontsize=14, );\n\nplt.title('Customer Ages by Product', fontsize=16, fontweight='bold');\nplt.xlabel('Customer Age', fontsize=14, fontweight='bold');\nplt.ylabel('Percent Density per Unit', fontsize=14, fontweight='bold');","93d0fb61":"#bin age into groups with values normalized by product for comparability across products\nhah = [np.sum(dataset['Product']=='TM195'),np.sum(dataset['Product']=='TM498'),np.sum(dataset['Product']=='TM798')]\nblah = np.zeros([3,4])\nblah[0,0]=np.sum((dataset['Age']<=20) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,1]=np.sum((dataset['Age']>20) & (dataset['Age']<=30) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,2]=np.sum((dataset['Age']>30) & (dataset['Age']<=40) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,3]=np.sum((dataset['Age']>40) & (dataset['Age']<=50) & (dataset['Product']=='TM195'))\/hah[0]\nblah[1,0]=np.sum((dataset['Age']<=20) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,1]=np.sum((dataset['Age']>20) & (dataset['Age']<=30) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,2]=np.sum((dataset['Age']>30) & (dataset['Age']<=40) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,3]=np.sum((dataset['Age']>40) & (dataset['Age']<=50) & (dataset['Product']=='TM498'))\/hah[1]\nblah[2,0]=np.sum((dataset['Age']<=20) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,1]=np.sum((dataset['Age']>20) & (dataset['Age']<=30) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,2]=np.sum((dataset['Age']>30) & (dataset['Age']<=40) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,3]=np.sum((dataset['Age']>40) & (dataset['Age']<=50) & (dataset['Product']=='TM798'))\/hah[2]\n\nage_prod = pd.DataFrame(blah, index=['TM195','TM498','TM798'],columns=['20','30','40','50'])\n\n#create grouped bar plot\nfig = plt.figure(figsize=[8,6])\nfig.suptitle(\"Customer Age Group by Product\", fontsize=18, fontweight='bold')\nfig.subplots_adjust(top=0.92)\nax1 = fig.add_subplot(111)\nbarWidth = 0.15\n \n# set height of bar\nbars1 = list(age_prod['20'])\nbars2 = list(age_prod['30'])\nbars3 = list(age_prod['40'])\nbars4 = list(age_prod['50'])\n\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1)) \nr2 = [x + 0.05 + barWidth for x in r1]\nr3 = [x + 0.05 + barWidth for x in r2]\nr4 = [x + 0.05 + barWidth for x in r3]\n \n# Make the plot\nax1.bar(r1, bars1, color='mediumseagreen', width=barWidth, edgecolor='white', label='Age <= 20')\nax1.bar(r2, bars2, color='cornflowerblue', width=barWidth, edgecolor='white', label='20 < Age <= 30')\nax1.bar(r3, bars3, color='salmon', width=barWidth, edgecolor='white', label=\"30 < Age <= 40\")\nax1.bar(r4, bars4, color='orange', width=barWidth, edgecolor='white', label=\"40 < Age <= 50\")\nax1.set_ylabel('Normalized by Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xlabel('Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xticks([0.3, 1.3, 2.3])\nax1.set_yticks(np.arange(0,1.1,0.1))\nax1.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\nax1.set_xticklabels(['TM195','TM498','TM798'],fontdict={'color': 'black', 'size': 14})\nax1.set_yticklabels(np.round(np.arange(0,1.1,0.1),1), fontdict={'color': 'black', 'size': 14})\nfig.legend(loc='upper center', bbox_to_anchor=(0.27, 0.93), fontsize=14)\nfig.show();","49c0a7cd":"#create table of mean, median, and mode values by product\nblah = pd.DataFrame(np.zeros([3,3]), columns=['mean','median','mode'], index=['TM195','TM498','TM798'])\nblah['mean']= [dataset['Age'].where(dataset['Product']=='TM195').mean(),dataset['Age'].where(dataset['Product']=='TM498').mean(),dataset['Age'].where(dataset['Product']=='TM798').mean()]\nblah['median']= [dataset['Age'].where(dataset['Product']=='TM195').median(),dataset['Age'].where(dataset['Product']=='TM498').median(),dataset['Age'].where(dataset['Product']=='TM798').median()]\nblah['mode']= [dataset['Age'].where(dataset['Product']=='TM195').mode()[0],dataset['Age'].where(dataset['Product']=='TM498').mode()[0],dataset['Age'].where(dataset['Product']=='TM798').mode()[0]]\nprint(str(blah))","85112fe9":"#create probability density plot of customer annual income by product\nplt.figure(figsize=[10,8]);\n\nsns.distplot(dataset['Fitness'].where(dataset['Product']=='TM195'), hist=None, label='TM195', kde_kws=dict(linewidth=5, color='royalblue'));\nsns.distplot(dataset['Fitness'].where(dataset['Product']=='TM498'), hist=None, label='TM498', kde_kws=dict(linewidth=5, color='darkorange'));\nsns.distplot(dataset['Fitness'].where(dataset['Product']=='TM798'), hist=None, label='TM798', kde_kws=dict(linewidth=5, color='forestgreen'));\n#annotate with mean, median, and mode\nplt.text(2, 0.6, '            Mean   Median    Mode\\nTM195     {}         {}       {}\\nTM498     {}         {}       {}\\nTM798     {}         {}       {}'.format(round(dataset['Fitness'].where(dataset['Product']=='TM195').mean(),1),dataset['Fitness'].where(dataset['Product']=='TM195').median(),dataset['Fitness'].where(dataset['Product']=='TM195').mode()[0],round(dataset['Fitness'].where(dataset['Product']=='TM498').mean(),1),dataset['Fitness'].where(dataset['Product']=='TM498').median(),dataset['Fitness'].where(dataset['Product']=='TM498').mode()[0],round(dataset['Fitness'].where(dataset['Product']=='TM798').mean(),1),dataset['Fitness'].where(dataset['Product']=='TM798').median(),dataset['Fitness'].where(dataset['Product']=='TM798').mode()[0]), ha='right', va='center', size=12)\n\nplt.legend(fontsize=14);\n\nplt.title('Density of Customer Fitness by Product', fontsize=16, fontweight='bold');\nplt.xlabel('Customer Fitness (Self-Assessed)', fontsize=14, fontweight='bold');\nplt.ylabel('Density per Unit', fontsize=14, fontweight='bold');","a8404039":"#bin fitness into groups with values normalized by product\nhah = [np.sum(dataset['Product']=='TM195'),np.sum(dataset['Product']=='TM498'),np.sum(dataset['Product']=='TM798')]\nblah = np.zeros([3,3])\nblah[0,0]=np.sum((dataset['Fitness']<=2) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,1]=np.sum((dataset['Fitness']>2) & (dataset['Fitness']<=4) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,2]=np.sum((dataset['Fitness']==5) & (dataset['Product']=='TM195'))\/hah[0]\nblah[1,0]=np.sum((dataset['Fitness']<=2) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,1]=np.sum((dataset['Fitness']>2) & (dataset['Fitness']<=4) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,2]=np.sum((dataset['Fitness']==5) & (dataset['Product']=='TM498'))\/hah[1]\nblah[2,0]=np.sum((dataset['Fitness']<=2) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,1]=np.sum((dataset['Fitness']>2) & (dataset['Fitness']<=4) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,2]=np.sum((dataset['Fitness']==5) & (dataset['Product']=='TM798'))\/hah[2]\nfit_prod = pd.DataFrame(blah, index=['TM195','TM498','TM798'],columns=['Fitness <= 2','2 < Fitness <= 4', 'Fitness = 5'])\n\n#create grouped bar plot\nfig = plt.figure(figsize=[8,6])\nfig.suptitle(\"Self-Rated Fitness Level\", fontsize=18, fontweight='bold')\nfig.subplots_adjust(top=0.92)\nax1 = fig.add_subplot(111)\nbarWidth = 0.15\n \n# set height of bar\nbars1 = list(fit_prod['Fitness <= 2'])\nbars2 = list(fit_prod['2 < Fitness <= 4'])\nbars3 = list(fit_prod['Fitness = 5'])\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1)) \nr2 = [x + 0.05 + barWidth for x in r1]\nr3 = [x + 0.05 + barWidth for x in r2]\n \n# Make the plot\nax1.bar(r1, bars1, color='mediumseagreen', width=barWidth, edgecolor='white', label='Unfit')\nax1.bar(r2, bars2, color='cornflowerblue', width=barWidth, edgecolor='white', label='Fit')\nax1.bar(r3, bars3, color='salmon', width=barWidth, edgecolor='white', label=\"Very Fit\")\nax1.set_ylabel('Normalized by Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xlabel('Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xticks([0.2, 1.2, 2.2])\nax1.set_yticks(np.arange(0,1.1,0.1))\nax1.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\nax1.set_xticklabels(['TM195','TM498','TM798'],fontdict={'color': 'black', 'size': 14})\nax1.set_yticklabels(np.round(np.arange(0,1.1,0.1),1), fontdict={'color': 'black', 'size': 14})\nfig.legend(loc='upper center', bbox_to_anchor=(0.805, 0.93), fontsize=14)\nfig.show();","7dce7ed7":"#create probability density plot of customer annual income by product\nplt.figure(figsize=[10,8]);\n\nsns.distplot(dataset['Usage'].where(dataset['Product']=='TM195').dropna(), hist=None, label='TM195', kde_kws=dict(linewidth=5, color='royalblue'));\nsns.distplot(dataset['Usage'].where(dataset['Product']=='TM498').dropna(), hist=None, label='TM498', kde_kws=dict(linewidth=5, color='darkorange'));\nsns.distplot(dataset['Usage'].where(dataset['Product']=='TM798').dropna(), hist=None, label='TM798', kde_kws=dict(linewidth=5, color='forestgreen'));\n#annotate with mean, median, and mode\nplt.text(8.3, 0.4, '            Mean   Median    Mode\\nTM195     {}         {}       {}\\nTM498     {}         {}       {}\\nTM798     {}         {}       {}'.format(round(dataset['Usage'].where(dataset['Product']=='TM195').mean(),1),dataset['Usage'].where(dataset['Product']=='TM195').median(),dataset['Usage'].where(dataset['Product']=='TM195').mode()[0],round(dataset['Usage'].where(dataset['Product']=='TM498').mean(),1),dataset['Usage'].where(dataset['Product']=='TM498').median(),dataset['Usage'].where(dataset['Product']=='TM498').mode()[0],round(dataset['Usage'].where(dataset['Product']=='TM798').mean(),1),dataset['Usage'].where(dataset['Product']=='TM798').median(),dataset['Usage'].where(dataset['Product']=='TM798').mode()[0]), ha='right', va='center', size=12)\n\nplt.legend(fontsize=14);\n\nplt.title('Density of Expected Usage by Product', fontsize=16, fontweight='bold');\nplt.xlabel('Expected Usage [days\/wk]', fontsize=14, fontweight='bold');\nplt.ylabel('Density per Unit', fontsize=14, fontweight='bold');","64a727c2":"#bin usage into three groups with values normalized by product to allow comparison\nhah = [np.sum(dataset['Product']=='TM195'),np.sum(dataset['Product']=='TM498'),np.sum(dataset['Product']=='TM798')]\nblah = np.zeros([3,3])\nblah[0,0]=np.sum((dataset['Usage']<=3) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,1]=np.sum((dataset['Usage']>3) & (dataset['Usage']<=5) & (dataset['Product']=='TM195'))\/hah[0]\nblah[0,2]=np.sum((dataset['Usage']>5) & (dataset['Product']=='TM195'))\/hah[0]\nblah[1,0]=np.sum((dataset['Usage']<=3) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,1]=np.sum((dataset['Usage']>3) & (dataset['Usage']<=5) & (dataset['Product']=='TM498'))\/hah[1]\nblah[1,2]=np.sum((dataset['Usage']>5) & (dataset['Product']=='TM498'))\/hah[1]\nblah[2,0]=np.sum((dataset['Usage']<=3) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,1]=np.sum((dataset['Usage']>3) & (dataset['Usage']<=5) & (dataset['Product']=='TM798'))\/hah[2]\nblah[2,2]=np.sum((dataset['Usage']>5) & (dataset['Product']=='TM798'))\/hah[2]\nuse_prod = pd.DataFrame(blah, index=['TM195','TM498','TM798'],columns=['Usage <= 3','3 < Usage <= 5', 'Usage > 5'])\n\n#create grouped bar plot\nfig = plt.figure(figsize=[8,6])\nfig.suptitle(\"Expected Use per Week\", fontsize=18, fontweight='bold')\nfig.subplots_adjust(top=0.92)\nax1 = fig.add_subplot(111)\nbarWidth = 0.25\n \n# set height of bar\nbars1 = list(use_prod['Usage <= 3'])\nbars2 = list(use_prod['3 < Usage <= 5'])\nbars3 = list(use_prod['Usage > 5'])\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1)) \nr2 = [x + 0.05 + barWidth for x in r1]\nr3 = [x + 0.05 + barWidth for x in r2]\n \n# Make the plot\nax1.bar(r1, bars1, color='mediumseagreen', width=barWidth, edgecolor='white', label='Days <= 3')\nax1.bar(r2, bars2, color='cornflowerblue', width=barWidth, edgecolor='white', label='3 < Days <= 5')\nax1.bar(r3, bars3, color='salmon', width=barWidth, edgecolor='white', label=\"Days > 5\")\nax1.set_ylabel('Normalized by Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xlabel('Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xticks([0.3, 1.3, 2.3])\nax1.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\nax1.set_xticklabels(['TM195','TM498','TM798'],fontdict={'color': 'black', 'size': 14})\nax1.set_yticks(np.arange(0,1.1,0.1))\nax1.set_yticklabels(np.round(np.arange(0,1.1,0.1),1), fontdict={'color': 'black', 'size': 14})\nfig.legend(loc='upper center', bbox_to_anchor=(0.77, 0.93), fontsize=14)\nfig.show();","4ecf833d":"sns.violinplot(data=dataset, y='Product', x='Usage');","55a31b83":"#create probability density plot of customer annual income by product\nplt.figure(figsize=[10,8]);\n\nsns.distplot(dataset['Income'].where(dataset['Product']=='TM195'), hist=None, label='TM195', kde_kws=dict(linewidth=5, color='royalblue'));\nsns.distplot(dataset['Income'].where(dataset['Product']=='TM498'), hist=None, label='TM498', kde_kws=dict(linewidth=5, color='darkorange'));\nsns.distplot(dataset['Income'].where(dataset['Product']=='TM798'), hist=None, label='TM798', kde_kws=dict(linewidth=5, color='forestgreen'));\n#annotate with mean, median, and mode\nplt.text(135000, 3.5e-5, '            Mean         Median          Mode\\nTM195     {}       {}      {}\\nTM498     {}       {}      {}\\nTM798     {}       {}      {}'.format(round(dataset['Income'].where(dataset['Product']=='TM195').mean(),1),dataset['Income'].where(dataset['Product']=='TM195').median(),dataset['Income'].where(dataset['Product']=='TM195').mode()[0],round(dataset['Income'].where(dataset['Product']=='TM498').mean(),1),dataset['Income'].where(dataset['Product']=='TM498').median(),dataset['Income'].where(dataset['Product']=='TM498').mode()[0],round(dataset['Income'].where(dataset['Product']=='TM798').mean(),1),dataset['Income'].where(dataset['Product']=='TM798').median(),dataset['Income'].where(dataset['Product']=='TM798').mode()[0]), ha='right', va='center', size=12)\n\nplt.legend(fontsize=14);\n\nplt.title('Density of Customer Annual Income by Product', fontsize=16, fontweight='bold');\nplt.xlabel('Annual Income [$USD]', fontsize=14, fontweight='bold');\nplt.ylabel('Density per Unit', fontsize=14, fontweight='bold');","0caba314":"#create violinplot of customer income by product\nsns.set(font_scale = 1.3);\nsns.set_style(\"ticks\");\nfig = plt.figure(figsize=[8,4]);\nax = sns.violinplot(data=dataset, y='Product', x='Income');\nplt.xlabel('Annual Income [$USD]',fontsize=16,fontweight='bold');\nplt.ylabel('Product',fontsize=16,fontweight='bold');\nplt.title('Customer Income by Product', fontsize=18, fontweight='bold');\nax.set_xticks(np.arange(0,140001,15000));\nfig.show();","bfc7fa5b":"#setup subplots\nfig = plt.figure(figsize=[10,6]);\ngrid = plt.GridSpec(3, 1, wspace=0.3, hspace=1);\n\n#plot boxplots of income by product\nax0=plt.subplot(grid[0, 0]);\nsns.boxplot(dataset.loc[(dataset['Product']=='TM195'),'Income'], ax=ax0, color='forestgreen');\nax0.axvline(dataset.loc[(dataset['Product']=='TM195'),'Income'].mean(),color= \"red\", linestyle=\"--\", label=\"mean\")\nax0.axvline(dataset.loc[(dataset['Product']=='TM195'),'Income'].mean()+ 2 * dataset.loc[(dataset['Product']=='TM195'),'Income'].std(),color= \"slategrey\", linestyle=\"--\", label=\"2sigma\")\nax0.axvline(max(dataset.loc[(dataset['Product']=='TM195'),'Income'].mean()- 3 * dataset.loc[(dataset['Product']=='TM195'),'Income'].std(), 0),color= \"orange\", linestyle=\"--\")\nax0.axvline(max(dataset.loc[(dataset['Product']=='TM195'),'Income'].mean()- 2 * dataset.loc[(dataset['Product']=='TM195'),'Income'].std(), 0),color= \"slategrey\", linestyle=\"--\")\nax0.axvline(dataset.loc[(dataset['Product']=='TM195'),'Income'].mean()+ 3 * dataset.loc[(dataset['Product']=='TM195'),'Income'].std(),color= \"orange\", linestyle=\"--\", label=\"3sigma\")\nax0.set_xlabel('',fontdict=axlab2);\nax0.set_xticks(np.arange(0,140001,15000));\nax0.set_title('TM195', fontsize=14, fontweight='bold')\n\n\nax1=plt.subplot(grid[1, 0]);\nsns.boxplot(dataset.loc[(dataset['Product']=='TM498'),'Income'], ax=ax1, color='dodgerblue');\nax1.axvline(dataset.loc[(dataset['Product']=='TM498'),'Income'].mean(),color= \"red\", linestyle=\"--\")\nax1.axvline(dataset.loc[(dataset['Product']=='TM498'),'Income'].mean()+ 2 * dataset.loc[(dataset['Product']=='TM498'),'Income'].std(),color= \"slategrey\", linestyle=\"--\")\nax1.axvline(max(dataset.loc[(dataset['Product']=='TM498'),'Income'].mean()- 3 * dataset.loc[(dataset['Product']=='TM498'),'Income'].std(), 0),color= \"orange\", linestyle=\"--\")\nax1.axvline(max(dataset.loc[(dataset['Product']=='TM498'),'Income'].mean()- 2 * dataset.loc[(dataset['Product']=='TM498'),'Income'].std(), 0),color= \"slategrey\", linestyle=\"--\")\nax1.axvline(dataset.loc[(dataset['Product']=='TM498'),'Income'].mean()+ 3 * dataset.loc[(dataset['Product']=='TM498'),'Income'].std(),color= \"orange\", linestyle=\"--\")\nax1.set_xlabel('',fontdict=axlab2);\nax1.set_xticks(np.arange(0,140001,15000));\nax1.set_title('TM498', fontsize=14, fontweight='bold')\n\nax2=plt.subplot(grid[2, 0]);\nsns.boxplot(dataset.loc[(dataset['Product']=='TM798'),'Income'], ax=ax2, color='coral');\nax2.axvline(dataset.loc[(dataset['Product']=='TM798'),'Income'].mean(),color= \"red\", linestyle=\"--\")\nax2.axvline(dataset.loc[(dataset['Product']=='TM798'),'Income'].mean()+ 2 * dataset.loc[(dataset['Product']=='TM798'),'Income'].std(),color= \"slategrey\", linestyle=\"--\")\nax2.axvline(max(dataset.loc[(dataset['Product']=='TM798'),'Income'].mean()- 3 * dataset.loc[(dataset['Product']=='TM798'),'Income'].std(), 0),color= \"orange\", linestyle=\"--\")\nax2.axvline(max(dataset.loc[(dataset['Product']=='TM798'),'Income'].mean()- 2 * dataset.loc[(dataset['Product']=='TM798'),'Income'].std(), 0),color= \"slategrey\", linestyle=\"--\")\nax2.axvline(dataset.loc[(dataset['Product']=='TM798'),'Income'].mean()+ 3 * dataset.loc[(dataset['Product']=='TM798'),'Income'].std(),color= \"orange\", linestyle=\"--\")\nax2.set_xlabel('Annual Income [$USD]',fontdict=axlab2);\nax2.set_xticks(np.arange(0,140001,15000));\nax2.set_title('TM798', fontsize=14, fontweight='bold')\n\nplt.xticks(fontsize=14);\nplt.yticks(fontsize=14);\nfig.legend(loc='upper center', bbox_to_anchor=(0.8, 0.9), fontsize=14)        \nfig.show();","3ba2a32b":"#create probability density plot of customer annual income by product\nplt.figure(figsize=[10,8]);\n\nsns.distplot(dataset['Education'].where(dataset['Product']=='TM195'), hist=None, label='TM195', kde_kws=dict(linewidth=5, color='royalblue'));\nsns.distplot(dataset['Education'].where(dataset['Product']=='TM498'), hist=None, label='TM498', kde_kws=dict(linewidth=5, color='darkorange'));\nsns.distplot(dataset['Education'].where(dataset['Product']=='TM798'), hist=None, label='TM798', kde_kws=dict(linewidth=5, color='forestgreen'));\n#annotate with mean, median, and mode\nplt.text(23.5, 0.28, '            Mean   Median    Mode\\nTM195     {}       {}      {}\\nTM498     {}       {}      {}\\nTM798     {}       {}      {}'.format(round(dataset['Education'].where(dataset['Product']=='TM195').mean(),1),dataset['Education'].where(dataset['Product']=='TM195').median(),dataset['Education'].where(dataset['Product']=='TM195').mode()[0],round(dataset['Education'].where(dataset['Product']=='TM498').mean(),1),dataset['Education'].where(dataset['Product']=='TM498').median(),dataset['Education'].where(dataset['Product']=='TM498').mode()[0],round(dataset['Education'].where(dataset['Product']=='TM798').mean(),1),dataset['Education'].where(dataset['Product']=='TM798').median(),dataset['Education'].where(dataset['Product']=='TM798').mode()[0]), ha='right', va='center', size=12);\n\nplt.legend(fontsize=14);\n\nplt.title('Density of Customer Education by Product', fontsize=16, fontweight='bold');\nplt.xlabel('Education [yrs]', fontsize=14, fontweight='bold');\nplt.ylabel('Density per Unit', fontsize=14, fontweight='bold');\nplt.show();","7ac54b4c":"#create barplot of education level (High School, Some College, Bachelors, Advanced) by product\n#first bin data and normalize by product\nhah = [np.sum(dataset['Product']=='TM195'),np.sum(dataset['Product']=='TM498'),np.sum(dataset['Product']=='TM798')]\nblah = np.zeros([3,4])\nfor i in np.arange(0,len(dataset['Product'])):\n    if dataset.loc[i,'Education'] == 12:\n        if dataset.loc[i,'Product']=='TM195':\n            blah[0,0] += 1\n        if dataset.loc[i,'Product']=='TM498':\n            blah[1,0] += 1\n        if dataset.loc[i,'Product']==\"TM798\":\n            blah[2,0] += 1\n    if np.logical_and(dataset.loc[i,'Education'] > 12, dataset.loc[i,'Education'] < 16):\n        if dataset.loc[i,'Product']=='TM195':\n            blah[0,1] += 1\n        if dataset.loc[i,'Product']=='TM498':\n            blah[1,1] += 1\n        if dataset.loc[i,'Product']==\"TM798\":\n            blah[2,1] += 1\n    if np.logical_and(dataset.loc[i,'Education'] >= 16, dataset.loc[i,'Education'] < 18):\n        if dataset.loc[i,'Product']=='TM195':\n            blah[0,2] += 1\n        if dataset.loc[i,'Product']=='TM498':\n            blah[1,2] += 1\n        if dataset.loc[i,'Product']==\"TM798\":\n            blah[2,2] += 1\n    if dataset.loc[i,'Education'] >= 18:\n        if dataset.loc[i,'Product']=='TM195':\n            blah[0,3] += 1\n        if dataset.loc[i,'Product']=='TM498':\n            blah[1,3] += 1\n        if dataset.loc[i,'Product']==\"TM798\":\n            blah[2,3] += 1\nprod_ed = pd.DataFrame(blah, columns=['High School','Some College','Bachelors','Advanced'], index=['TM195','TM498','TM798'])\n\n#normalize data by product\nprod_ed.loc['TM195',:] = prod_ed.loc['TM195',:]\/hah[0]\nprod_ed.loc['TM498',:] = prod_ed.loc['TM498',:]\/hah[1]\nprod_ed.loc['TM798',:] = prod_ed.loc['TM798',:]\/hah[2]\n\n#create grouped bar plot\nfig = plt.figure(figsize=[8,6])\nfig.suptitle(\"Products Sold by Degree\", fontsize=18, fontweight='bold')\nfig.subplots_adjust(top=0.92)\nax1 = fig.add_subplot(111)\nbarWidth = 0.15\n \n# set height of bar\nbars1 = list(prod_ed['High School'])\nbars2 = list(prod_ed['Some College'])\nbars3 = list(prod_ed['Bachelors'])\nbars4 = list(prod_ed['Advanced'])\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1)) \nr2 = [x + 0.05 + barWidth for x in r1]\nr3 = [x + 0.05 + barWidth for x in r2]\nr4 = [x + 0.05 + barWidth for x in r3]\n \n# Make the plot\nax1.bar(r1, bars1, color='mediumseagreen', width=barWidth, edgecolor='white', label='High School')\nax1.bar(r2, bars2, color='cornflowerblue', width=barWidth, edgecolor='white', label='Some College')\nax1.bar(r3, bars3, color='lightcoral', width=barWidth, edgecolor='white', label=\"Bachelor's\")\nax1.bar(r4, bars4, color='orange', width=barWidth, edgecolor='white', label='Advanced')\nax1.set_ylabel('Normalized by Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xlabel('Product', fontdict={'weight': 'bold', 'color': 'black', 'size': 16})\nax1.set_xticks([0.3, 1.3, 2.3])\nax1.set_yticks(np.arange(0,1,0.1))\nax1.tick_params(axis = \"x\", which = \"both\", bottom = False, top = False)\nax1.set_xticklabels(['TM195','TM498','TM798'],fontdict={'color': 'black', 'size': 14})\nax1.set_yticklabels(np.round(np.arange(0,1,0.1),1), fontdict={'color': 'black', 'size': 14})\nfig.legend(loc='upper center', bbox_to_anchor=(0.775, 0.93), fontsize=14)\nfig.show();","28c136ee":"Observation\n\nAs would be expected, Customer annual incomes are positevely correlated with education level.","5d8438f0":"### Perform Analysis of Correlation","aaf6cd4b":"Observation:\n\nCustomers who purchased the TM798 tended to rate themselves as being more fit than customers who purchased the TM195 or TM498, as indicated by the right-shift in the distribution for TM798.\n\n","41d54276":"Observations:\n\n1. Higher income customers tended to purchase the TM798.\n2. Lower income customers tended to purchase the TM498 or TM195.\n3. Customers who rated their fitness level higher and\/or expected to use the treadmill more days\/week tended to purchase the TM798.","067f1b30":"### Look at relationship between Product, MaritalStatus, and Gender","37c8b84e":"Observation:\n\nCustomers who bought the TM798 model tended to be more educated that customers that bought other models.","a48722b0":"Observation:\n\nCustomers who bought the TM798 tend to be more educated then customers who bought the TM195 or TM498\n\n","f787862c":"Observation:\n\nCustomers who purchased the TM798 tended to rate themselves as being more fit than customers who purchased the TM195 or TM498\n\n","e610f31c":"Observations:\n1. Age, Education, and Usage are moderately positively skewed (0.5 < x < 1.0).\n2. Income and Miles are highly positively skewed (x > 1.0).","01970f2e":"### Check quantitative data stats","c5015678":"# Conclusion\n\n### TM195 Demographic:\n- Most purchased model \n- Predominately in 20s with secondary group in 30s\n- Annual income less than $75,000 \n- Primarily some college or bachelor\u2019s\n- 40\/60 single vs. partnered.\n- Predominately male for single and female for partnered\n- Mostly average fitness, with some unfit\n- Expect to use 3-4 days per week\n\n### TM498 Demographic:\n- Predominately in 20s with close second group in 30s\n- Annual income less than $75,000 \n- Primarily some college or bachelor\u2019s\n- 40\/60 single vs. partnered\n- Predominately female for single and male for partnered\n- Mostly average fitness, with some unfit\n- Expect to use 3-4 days per week\n\n### TM798 Demographic:\n- Least purchased model\n- Mostly in 20s with secondary 30-50 demographic\n- Not income specific but with higher earners\n- Primarily advanced education\n- Super majority male\n- Mostly very fit with some average fitness\n- Expect to use 4-5 days per week","5ac64884":"Observations:\n\n1. TM195 was purchased more than TM498 and TM498 was purchased more than TM798.\n2. Customer ages appear to be skewed to young.\n3. More males (57.8%) purchased treadmills than females (42.2%).\n4. Majority of customers have either some college or a bachelors.\n5. Majority of customers are partnered (59.4%) rather than single (40.6%).\n6. Majority of customers expect to use between 3-4 days per week.\n7. Majority of customers self-rated their fitness as average.\n8. Customer incomes appear to be skewed toward lower annual pay.\n9. Majority of customers expect to run less than 100 miles on treadmill.","5e7bb284":"### Create figures to investigate correlation between features","06e7f844":" Observation:\n\n3. TM195 & TM798 - Income less than 75k\/yr\n4. TM798 - not income specific\n\n","686d331d":"Observation:\n\n1. The majority of customers are in their 20s or thirties.\n2. Customers in their 30s are more likely to purchase a TM498 or TM195 than a TM798.\n3. Customers who purchased a TM798 were predominately in their 20s.","2640271b":"Observation:\n\nTM798 customers tend to use the treadmill more times per week then customers who purchased the TM195 or TM498\n","a1a3a255":"Observation:\n\n1. This plot shows that two specific groups, approximately mid-20s, and approximately  mid-30s, make up the primary age groups of customers.\n2. Customers in their mid-20s tend to expect to run between 50-100 miles.\n3. Customers in their mid-30s tend to expect to run about 100 miles without much variability.","948062cd":"Observation:\n\n1. Single male more likely to purchase TM195 than single female; partnered female more likely to purchase TM195 than partnered male.\n2. Single females tend to be much more likely to purchase TM498 than single males. \n3. Partnered males tend to be much more likely to purchase TM498 than partnered females.\n4. Across marital status, males make up super majority of customers for TM798.","1d973e8f":"Observations:\n\n1. Customers who expect to use their treadmill for more days\/week tended to rate their fitness level higher.\n2. Customers who expect to use their treadmill for more days\/week also tended to expect to run more miles.\n3. Customers who expected to use their treadmill for more days\/week tended to make more money per year.\n4. Customers who self-rated their fitness level higher tended to expect to run more miles.","d906f5ed":"Observations:\n\nBy looking at the overall data, it appears that there might be some outliers in Income and Miles, however, after looking at the spread by product, it seems that such outliers are not significant.\n\nThere appears to be some significant outliers in Age for TM798 - more than likely indicating some untapped sales potential in the 40s and beyond age groups.","6eb53571":"### Import packages","e861cf18":"### Scatter plots","fca2d120":"### Check skew of quantitative variables","3b2b3c31":"### Check structure of dataset","857832d5":"# Cardio Good Fitness - Analysis of Customer Demographics\n\nAnalyst: Jordan Rich\n\nKaggle ID: JordanRich\n\n# Project Objective:\n\n- Preliminary Data Analysis. Explore the dataset and extract basic observations about the data. \n\n- Come up with a customer profile (characteristics of a customer) for the different products\n- Perform uni-variate and multi-variate analyses\n- Generate a set of insights and recommendations that will help the company in targeting new customers\n\n# Context:\n\nThe data is for customers of the treadmill product(s) of a retail store called Cardio Good Fitness. It contains the following variables:\n\n- Product - the model no. of the treadmill\n\n- Age - in no of years, of the customer\n\n- Gender - of the customer\n\n- Education - in no. of years, of the customer\n\n- Marital Status - of the customer\n\n- Usage - Avg. # times the customer wants to use the treadmill every week\n\n- Fitness - Self rated fitness score of the customer (5 - very fit, 1 - very unfit)\n\n- Income - of the customer\n\n- Miles- expected to run\n","22811d6d":"Observations:\n1. The Cardio Good Fitness dataset contains 9 Features, \n2. Each feature contains 180 entries.\n3. There is no null values. \n4. Six of the features are numerical and Three of the features are objects (categorical).","64d13db7":"Observations:\n1. For all products, Partnered Customers tend to be more likely to buy a treadmill than Single Customers\n2. It appears that Single females tend to be more likely to buy a TM498 than single males (this will be expanded upon below).\n3. Males make up a super majority of TM798 customers.","0f478c68":"### Load data and display sample","c02595de":"### Create figure to display spread of data","76ba4d6c":"Observations:\n1. Mean Customer age is about 29 years old, and customer ages concentrate between 24 and 33.\n2. Mean Customer education is approxiamtely 16 years (Bachelor's Degree), with IQR ranging between 14-16 years.\n3. Majority of customers expect to use the treadmill 3 or 4 days\/week.\n4. Majority of customers rate themselves to be in average to fit physical fitness level.\n5. Majority of customers have annual incomes between approx. 45k-60k.\n6. Customers expect to run between 66 - 115 miles on their treadmill, with average customer expecting to run 103 miles.","a1d69198":"Observation:\n    \nThe TM195 and TM498 appear to appeal to lower income cusdtomers. The TM798 appears to appeal to higher income Customers, but does not appear to be a driving factor.","957682c3":"Observation:\n\nTM798 customers tend to use the treadmill more times per week then custoemrs who purchased the TM195 or TM498","0dac5d3e":"Observation:\n\nTM798 customers tend to use the treadmill more times per week then customers who purchased the TM195 or TM498 as  indicated by the right shift in the distribution for the TM798. \n\n** There is clearly a problem with the represented scale for the TM498 distribution. This distribution should have similar scale as the TM195 distribution. (The riemann sum should equal 1).\n\n","fe2e2704":"Observations:\n\n1. Customers who self-rated as very fit (>=5) were male and this is true regardless of marital status.\n2. In general, customers who expect to use their treadmill > 3 days per week tended to be single, males or (with less likelyhood), partnered males.\n3. There does not appear to be a significant difference in the expected miles run across gender or marital status.","7c1efee7":"Observations:\n\n1. Customers with higher education levels tend to purchase the TM798 as indicated by the right-shift in the distribution for the TM798. \n2. Customers who purchased the TM195 or TM498 tended to be college educated or pursuing a college degree as indicated by the two local maximums for their distributions.\n\n","940fa3d2":"### Look at outliers","09935ddd":"# Recommendations\n\n### For Better Insights:\n- Look at profit by product model to better understand sales percentages\n- Gather information on fitness goals: lose weight, better cardio health, maintain, etc.\n- Gather information on partner to gain second half of story on partnered customers.\n\n### To Target New Customers:\n- For TM195: Concentrate advertising broadly across gender and marital status towards individuals with annual income less than $75,000, with some college education or a bachelor\u2019s degree, who are unfit or average fitness and in their 20s or 30s.\n\n- For TM498: Concentrate advertising broadly across gender and marital status towards individuals with annual income less than $75,000, with some college education or a bachelor\u2019s degree, who are unfit or average fitness and in their 20s or 30s.\n\n- For TM798: Concentrate advertising towards males who are average fitness to very fit, have a bachelors degree or advanced education, and are in their 20s or 30s.\n\n- <b>There may be untapped potential for targeting customers in the 40s and beyond age group, which appear to be an underserved population. Analysis indicates more than just outlying purchases of TM798.<\/b>\n\n- <b>Individuals with only a high school education also appear to be an underserved population. Likely best candidates for TM195 or TM498 due to annual income constraints.<\/b>"}}