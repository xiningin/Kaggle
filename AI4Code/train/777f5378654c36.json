{"cell_type":{"fe42df71":"code","62ef62c9":"code","74688ce9":"code","2226bdff":"code","67a03fa2":"code","95ed3ed4":"code","9517c38f":"code","3dc6dd63":"code","86a0f434":"code","2e03384b":"code","80a22a80":"code","c8aea83e":"code","cf570b4c":"code","0c827d2e":"code","000b7558":"code","8101ac63":"code","0c3fa044":"code","c0f7011a":"code","c0ecffd4":"code","d5c3c9d8":"code","e9ad0c00":"code","b44d5e31":"code","d83aa399":"code","93c6e006":"code","68019d3c":"code","73db7210":"code","6f04a46e":"code","8a07d2d4":"code","54bfd38f":"code","0b4675d5":"code","0f9b55c9":"code","8d059503":"code","fd95e235":"code","a1b9dd4b":"code","74fde0f8":"code","a6b4c163":"code","16bd5059":"markdown","7745e576":"markdown","c4cb203d":"markdown","199d502a":"markdown","4c2c4822":"markdown","2db244d9":"markdown","4f3bde9d":"markdown","deed577d":"markdown","10a8085d":"markdown","1b6d123b":"markdown","69ff74b6":"markdown","82b42332":"markdown","d6a45e46":"markdown","dd5aafcc":"markdown","ebf1459e":"markdown","58cbd734":"markdown","41d3cbd9":"markdown","764f5abb":"markdown","89c1f120":"markdown","eecaaf0c":"markdown","240c2187":"markdown","e0323e45":"markdown","414283e7":"markdown","7b9dedc9":"markdown","72ab32d0":"markdown"},"source":{"fe42df71":"!pip install calmap","62ef62c9":"'''Import basic modules.'''\nimport pandas as pd\nimport numpy as np\n\n\n'''Customize visualization\nSeaborn and matplotlib visualization.'''\nimport altair as alt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\nimport folium \nimport calmap\nfrom IPython.core.display import HTML\nimport urllib.request\nfrom PIL import Image\nfrom wordcloud import WordCloud ,STOPWORDS\n\n\n'''Plotly visualization .'''\nimport plotly.express as px\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))\n\nimport warnings\nwarnings.filterwarnings('ignore')","74688ce9":"# Data cleaning\ndf = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndata = df.copy()\ndata['Date'] = data['Date'].apply(pd.to_datetime)\ndata.drop(['Sno', 'Time'],axis=1,inplace=True)\n\n# collect present data\nfrom datetime import date\ndata_apr = data[data['Date'] > pd.Timestamp(date(2020,4,25))]\n\n# prepaing data state wise\nstate_cases = data_apr.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)","2226bdff":"bold(\"** Present Condition in India: Confirmed cases, Deaths, Recovered of 2019-nCoV**\")\nprint('Total Confirmed Cases: ',state_cases['Confirmed'].sum())\nprint('Total Deaths: ',state_cases['Deaths'].sum())\nprint('Total Cured Cases: ',state_cases['Cured'].sum())\nprint('Death Rate (per 100): ',np.round(100*state_cases['Deaths'].sum()\/state_cases['Confirmed'].sum(),2))","67a03fa2":"bold(\"** STATE WISE CONFIRMED, DEATH AND CURED CASES of 2019-nCoV**\")\nstate_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Death Rate (per 100)\"])","95ed3ed4":"fig = px.bar(state_cases.sort_values('Confirmed', ascending= False).sort_values('Confirmed', ascending=True), \n             x=\"Confirmed\", y=\"State\/UnionTerritory\", \n             title='Total Confirmed Cases', \n             text='Confirmed', \n             orientation='h', \n             width=700, height=1000)\nfig.update_traces(marker_color='#FFA500', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","9517c38f":"fig = px.bar(state_cases.sort_values('Deaths', ascending= False).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"State\/UnionTerritory\", \n             title='Total Deaths Cases', \n             text='Deaths', \n             orientation='h', \n             width=700, height=1000)\nfig.update_traces(marker_color='#FF0000', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","3dc6dd63":"fig = px.bar(state_cases.sort_values('Cured', ascending= False).sort_values('Cured', ascending=True), \n             x=\"Cured\", y=\"State\/UnionTerritory\", \n             title='Total Cured Cases', \n             text='Cured', \n             orientation='h', \n             width=700, height=1000)\nfig.update_traces(marker_color='#008000', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","86a0f434":"fig = px.bar(state_cases.sort_values('Active', ascending= False).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"State\/UnionTerritory\", \n             title='Total Active Cases', \n             text='Active', \n             orientation='h', \n             width=700, height=1000)\nfig.update_traces(marker_color='#0000FF', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","2e03384b":"fig = px.bar(state_cases.sort_values('Death Rate (per 100)', ascending= False).sort_values('Death Rate (per 100)', ascending=True), \n             x=\"Death Rate (per 100)\", y=\"State\/UnionTerritory\", \n             title='Death Rate (per 100)', \n             text='Death Rate (per 100)', \n             orientation='h', \n             width=700, height=1000)\nfig.update_traces(marker_color='#800080', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","80a22a80":"df_individual = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv', usecols = ['detected_city', 'notes'])\ndetected_city = df_individual['detected_city'].value_counts().reset_index()\ndetected_city.rename(columns={\"index\":\"Cities\",\n                            \"detected_city\": \"Counts\"}, inplace=True)\nfig = px.bar(detected_city.sort_values('Counts', ascending=True).sort_values('Counts', ascending=False).head(15), \n             y=\"Counts\", x=\"Cities\", color= \"Cities\",\n             title='Hotspot Cities Detected With Most cases', \n             orientation='v',\n             color_discrete_sequence = px.colors.cyclical.IceFire,\n             width=700, height=600)\nfig.update_traces(opacity=0.8)\n\nfig.update_layout(template = 'plotly_white')\nfig.show()","c8aea83e":"india_map = pd.DataFrame({\n    'States':list(state_cases['State\/UnionTerritory']),\n    'lat':[11.667026,14.750429,27.100399,26.749981,25.785414,30.719997,22.090420,28.669993,15.491997,22.258700,28.450006,31.100025,33.450000,\n            23.800393,12.570381,8.900373,34.100000,21.300391,19.250232,24.799971,23.710399,19.820430,11.934994,31.519974,26.449999,\n            12.920386,18.112400,23.9408, 27.599981,30.320409,22.580390],\n    'long':[92.735983,78.570026,93.616601,94.216667,87.479973,76.780006,82.159987,77.230004,\n            73.818001,71.192400,77.019991,77.166597,76.240000,86.419986,76.919997,76.569993,\n            77.340000,76.130019,73.160175,93.950017,92.720015,85.900017,79.830000,75.980003,\n            74.639981,79.150042,79.019300,91.9882, 78.050006,78.050006,88.329947],\n    'Confirmed':list(state_cases['Confirmed']),\n    'Recovered':list(state_cases['Cured']),\n    'Deaths':list(state_cases['Deaths'])\n})","cf570b4c":"_map = folium.Map(location=[23,80], tiles=\"Stamen Toner\", zoom_start=4)\n\nfor lat, lon, value, name in zip(india_map['lat'], india_map['long'], india_map['Confirmed'], india_map['States']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*3,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='#ff6600',\n                        \n                        fill_color='#ff8533',\n                        fill_opacity=0.8 ).add_to(_map)\n_map","0c827d2e":"HTML('''<div class=\"flourish-embed flourish-map\" data-src=\"visualisation\/2086857\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2086857\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","000b7558":"# data preparation\nspread = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\",)\nspread['ObservationDate'] = spread['ObservationDate'].apply(pd.to_datetime)\nspread = spread[spread['ObservationDate'] > pd.Timestamp(date(2020,1,20))]\nindia_spread = spread[spread['Country\/Region']=='India'].reset_index(drop=True)\nindia_spread['Active'] = india_spread['Confirmed'] - (india_spread['Deaths'] + india_spread['Recovered'])\n\n# Daily cases\nindia_spread['Confirmed_diff'] = india_spread['Confirmed'].diff()\nindia_spread['Death_diff'] = india_spread['Deaths'].diff()\nindia_spread['Recovered_diff'] = india_spread['Recovered'].diff()\n\n# growth rate of confirmed cases\nindia_spread['Confirmed_gr'] = np.round(india_spread['Confirmed_diff'].pct_change(), 2)","8101ac63":"#ploting spread over time\ndate_india_spread = india_spread.groupby('ObservationDate')['Confirmed','Deaths','Recovered', 'Active'].sum().reset_index()\n\ntrace1 = go.Scatter(\n                x=date_india_spread['ObservationDate'],\n                y=date_india_spread['Confirmed'],\n                name=\"Confirmed\",\n                mode='lines+markers',\n                line_color='orange')\ntrace2 = go.Scatter(\n                x=date_india_spread['ObservationDate'],\n                y=date_india_spread['Deaths'],\n                name=\"Deaths\",\n                mode='lines+markers',\n                line_color='red')\n\ntrace3 = go.Scatter(\n                x=date_india_spread['ObservationDate'],\n                y=date_india_spread['Recovered'],\n                name=\"Recovered\",\n                mode='lines+markers',\n                line_color='green')\ntrace4 = go.Scatter(\n                x=date_india_spread['ObservationDate'],\n                y=date_india_spread['Active'],\n                name=\"Active\",\n                mode='lines+markers',\n                line_color='blue')\n\nlayout = go.Layout(template=\"ggplot2\", width=700, height=500, title_text = '<b>Spread of the Coronavirus In India Over Time <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1,trace2,trace3, trace4], layout = layout)\nfig.show()\n\n\n\n# plot daily cases\ncolors = ['#FFA500']*85\ncolors[-5] = 'crimson'\nfig = px.bar(india_spread, \n             x=\"ObservationDate\", y=\"Confirmed_diff\", \n             title='<b>New Confirm Cases Per Day In India<\/b>', \n             orientation='v', \n             width=700, height=600)\nfig.update_traces(marker_color=colors, opacity=0.8)\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"First Lockdown\", x='2020-03-24', y=1400, arrowhead=1, showarrow=True\n)\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"Extended Lockdown\", x='2020-04-14', y=1400, arrowhead=1, showarrow=True\n)\nfig.add_shape(\n        # Line Vertical\n        dict(\n            type=\"line\",\n            x0='2020-03-24',\n            y0=0,\n            x1='2020-03-24',\n            y1=1800,\n            line=dict(\n                color=\"RoyalBlue\",\n                width=1,\n                dash=\"dashdot\"\n            )))\n\nfig.add_shape(\n        # Line Vertical\n        dict(\n            type=\"line\",\n            x0='2020-04-14',\n            y0=0,\n            x1='2020-04-14',\n            y1=1800,\n            line=dict(\n                color=\"RoyalBlue\",\n                width=1,\n                dash=\"dashdot\"\n            )))\n\n\nfig.update_layout(template = 'plotly_white',font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()\n\n\n# plot of growth rate of confirmed cases\nfig1 = px.scatter(india_spread, \n                 x='ObservationDate', \n                  y=\"Confirmed_gr\", \n                  text='Confirmed_gr',\n                  range_x=['2020-03-05','2020-04-22'])\nfig1.update_traces(marker=dict(size=3,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                  marker_color='#4169e1',\n                  mode='text+lines+markers',textposition='top center', )\n\nfig1.update_layout(template = 'plotly_white', width=700, height=700, title_text = '<b>Growth percent in number of total<br>COVID-19 cases in India on each day<br>compared to the previous day<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig1.show()","0c3fa044":"f = plt.figure(figsize=(20,10))\nf.add_subplot(2,1,1)\ncalmap.yearplot(spread.groupby('ObservationDate')['Confirmed'].sum().diff(), fillcolor='whitesmoke', cmap='YlOrBr', linewidth=1,linecolor=\"#fafafa\",year=2020,)\nplt.title(\"Daily Confirmed Cases\",fontsize=20)\nplt.tick_params(labelsize=15)\n\nf.add_subplot(2,1,2)\ncalmap.yearplot(spread.groupby('ObservationDate')['Deaths'].sum().diff(), fillcolor='whitesmoke', cmap='Reds', linewidth=1,linecolor=\"#fafafa\",year=2020,)\nplt.title(\"Daily Deaths Cases\",fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()","c0f7011a":"age = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=2)\ncolors = ['gold', 'darkorange', 'crimson','mediumturquoise', 'sandybrown', 'grey',  'lightgreen','navy','deeppink','purple']\ntrace1 = go.Pie(\n                labels=age.AgeGroup,\n                values=age.TotalCases,\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Number People Affected By Covid-19 in India <br> Distribution By Age Group<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\ncolors = ['lightslategray']*10 \ncolors[2] = 'crimson'\ntrace2 = go.Bar(\n            x=age.AgeGroup, \n            y=age.TotalCases,\n            text=age.TotalCases,\n            textposition='auto',\n            marker_color=colors)\nlayout = go.Layout(template=\"ggplot2\",width=700, height=500, )\n\nfig = go.Figure(data = [trace2], layout = layout)\nfig.show()","c0ecffd4":"pop = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\npop.rename(columns={'State \/ Union Territory': 'State\/UnionTerritory'}, inplace=True)\n\npop_case = state_cases.merge(pop[['State\/UnionTerritory', 'Population']], on='State\/UnionTerritory')\npop_case['MortalityRate (per million)'] = np.round(1000000*pop_case[\"Deaths\"]\/pop_case[\"Population\"],2)","d5c3c9d8":"bold(\"**Mortality Rate of States**\")\npop_case[['State\/UnionTerritory','MortalityRate (per million)']].sort_values('MortalityRate (per million)', ascending= False).style.background_gradient(cmap='Purples',subset=[\"MortalityRate (per million)\"])","e9ad0c00":"from bokeh.layouts import column, row\nfrom bokeh.plotting import ColumnDataSource, figure, output_notebook, show\n\noutput_notebook()\n\nsource_1 = ColumnDataSource(data = dict(\n    state = pop_case['State\/UnionTerritory'].values,\n    population = pop_case['Population'].values \/ 1000000,\n    cases = pop_case['Confirmed'].values,\n    deaths = pop_case['Deaths'].values,\n    death_rate = pop_case['MortalityRate (per million)'].values\n))\n\ntooltips_1 = [\n    (\"State\", \"@state\"),\n    (\"Population\", \"@population{0.00} M\"),\n    (\"Confirmed\", \"@cases\")\n]\n\ntooltips_2 = [\n    (\"State\", \"@state\"),\n    (\"Population\", \"@population{0.00} M\"),\n    (\"Deaths\", \"@deaths\")\n]\n\ntooltips_3 = [\n    (\"State\", \"@state\"),\n    (\"Population\", \"@population{0.00} M\"),\n    (\"Mortality Rate\", \"@death_rate{0.000}\")\n]\n\nv1 = figure(plot_width = 250, plot_height = 250, tooltips = tooltips_1, title = \"Population vs Confirmed by State\")\nv1.circle(\"population\", \"cases\", source = source_1, size = 13, color = \"orange\", alpha = 0.41)\nv1.xaxis.axis_label = \"Population\"\nv1.yaxis.axis_label = \"Cases\"\n\nv2 = figure(plot_width = 250, plot_height = 250, tooltips = tooltips_2, title = \"Population vs Deaths by State\")\nv2.circle(\"population\", \"deaths\", source = source_1, size = 13, color = \"red\", alpha = 0.41)\nv2.xaxis.axis_label = \"Population\"\nv2.yaxis.axis_label = \"Deaths\"\n\nv3 = figure(plot_width = 250, plot_height = 250, tooltips = tooltips_3, title = \"Population vs MortalityRate by State\")\nv3.circle(\"population\", \"death_rate\", source = source_1, size = 13, color = \"purple\", alpha = 0.41)\nv3.xaxis.axis_label = \"Population\"\nv3.yaxis.axis_label = \"Death Rate\"\n\nshow(row(v1, v2, v3))","b44d5e31":"import requests\nindiatest = pd.io.json.json_normalize(requests.get('https:\/\/api.rootnet.in\/covid19-in\/stats\/testing\/history').json()['data'])\nindiatest.drop(['totalIndividualsTested','source'], axis=1, inplace=True)\nindiatest['day'] = indiatest['day'].apply(pd.to_datetime)\n\nindiatest[\"totalSamplesTested_diff\"] = indiatest[\"totalSamplesTested\"].diff()\nindiatest[\"totalPositiveCases_diff\"] = indiatest[\"totalPositiveCases\"].diff()\nindiatest[\"p2t_ratio\"]= np.round(100*indiatest[\"totalPositiveCases_diff\"]\/indiatest[\"totalSamplesTested_diff\"],2)","d83aa399":"bold(\"** Present Sample Tested for COVID-19 in India**\")\nprint('Total Sample Tested: ',indiatest['totalSamplesTested'].max())\nprint('Total Positive to Test Ratio:',np.round(100*indiatest[\"totalPositiveCases\"].max()\/indiatest[\"totalSamplesTested\"].max(),2))\nprint('Tests Per Million Peoples:', np.round(100000*indiatest[\"totalSamplesTested\"].max()\/pop_case[\"Population\"].sum(),2))","93c6e006":"fig1 = go.Figure(data=[go.Bar(\n            x=indiatest.day, \n            y=indiatest.totalSamplesTested_diff,\n            name='Test Negetive Case',\n            marker_color='#000000'),\n            \n            go.Bar(\n            x=indiatest.day, \n            y=indiatest.totalPositiveCases_diff,\n            name='Test (Positve Case)',\n            marker_color='#FF0000')])\n\n# Change the bar mode\nfig1.update_layout(barmode='stack', template=\"ggplot2\",width=700, height=500, title_text = '<b>Sample Tested for COVID-19 in India (Day Wise)<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig1.show()","68019d3c":"#https:\/\/www.kaggle.com\/rohanrao\/india-s-fight-against-covid-19-april-2020\nlab = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_lab = pd.pivot_table(lab, values = \"lab\", index = \"state\", columns = \"type\", aggfunc = \"count\", fill_value = 0).reset_index()\nstate_lab[\"labs\"] = state_lab.sum(axis = 1)\nstate_lab = state_lab.sort_values(\"labs\", ascending = False).head(10)\n\ncity_lab = pd.pivot_table(lab, values = \"lab\", index = \"city\", columns = \"type\", aggfunc = \"count\", fill_value = 0).reset_index()\ncity_lab[\"labs\"] = city_lab.sum(axis = 1)\ncity_lab = city_lab.sort_values(\"labs\", ascending = False).head(10)","73db7210":"from plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=2, subplot_titles=('Top 10 States', 'Top 10 Cities'))\ntrace1 = go.Bar(\n            x=state_lab.state, \n            y=state_lab['Collection Site'],\n            name='Collection Site',\n            marker_color='#0000FF'\n)\ntrace2 = go.Bar(\n            x=state_lab.state, \n            y=state_lab['Government Laboratory'],\n            name='Government Laboratory',\n            marker_color='#FF8040'\n)\n\ntrace3 = go.Bar(\n            x=state_lab.state, \n            y=state_lab['Private Laboratory'],\n            name='Private Laboratory',\n            marker_color='#A52A2A'\n)\n\ntrace4 = go.Bar(\n            x=city_lab.city, \n            y=city_lab['Collection Site'],\n             showlegend=False,\n            marker_color='#FFFF00'\n)\ntrace5 = go.Bar(\n            x=city_lab.city, \n            y=city_lab['Government Laboratory'],\n             showlegend=False,\n            marker_color='#FF8040'\n)\n\ntrace6 = go.Bar(\n            x=city_lab.city, \n            y=city_lab['Private Laboratory'],\n             showlegend=False,\n            marker_color='#A52A2A'\n)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 1)\nfig.append_trace(trace3, 1, 1)\n\nfig.append_trace(trace4, 1, 2)\nfig.append_trace(trace5, 1, 2)\nfig.append_trace(trace6, 1, 2)\n\n\nfig.update_layout(barmode = 'stack',template=\"ggplot2\", width=700, height=500, title_text = '<b>Sample Tested for COVID-19 in India (State and City Wise)<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\n\nfig.show()","6f04a46e":"# Preparing data\ntotal_test = pd.read_csv('..\/input\/covid19-testing-data\/full-list-total-tests-for-covid-19.csv')\ntotal_test['Date'] = total_test['Date'].apply(pd.to_datetime)\ntotal_test.set_index([\"Entity\"], inplace = True)\ntotal_test = total_test.loc[['Italy', 'Japan','India', 'South Korea', 'United States']]\ntotal_test.reset_index(inplace = True)\ntotal_test.sort_values('Date', ascending= True,inplace=True)\n\n# plot\nfig = px.scatter(total_test, \n                 x='Date', \n                 y='Total tests', \n                 color='Entity')\nfig.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers')\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"South Korea cases tested <br>at increase rate\", x='2020-03-01', y=100000, arrowhead=1, showarrow=True\n)\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"Testing start very late <br>and slow in US\", x='2020-03-17', y=100000, arrowhead=4, ax=0,\n            ay=-60,showarrow=True\n)\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"India Going Slow\", x='2020-04-18', y=370000, arrowhead=1, ax=0,\n            ay=-60,showarrow=True\n)\n\n\nfig.update_layout(template = 'plotly_white',width=700, height=500, title_text = '<b>Total Tests for COVID-19<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","8a07d2d4":"total_test_per1000 = pd.read_csv('..\/input\/covid19-testing-data\/full-list-cumulative-total-tests-per-thousand.csv')\ntotal_test_per1000['Date'] = total_test_per1000['Date'].apply(pd.to_datetime)\ntotal_test_per1000.set_index([\"Entity\"], inplace = True)\ntotal_test_per1000 = total_test_per1000.loc[['Italy', 'Japan','India', 'South Korea', 'United States']]\ntotal_test_per1000.reset_index(inplace = True)\ntotal_test_per1000.sort_values('Date', ascending= True,inplace=True)\n\n#plot\nfig = px.scatter(total_test_per1000, \n                 x='Date', \n                 y='Total tests per thousand', \n                 color='Entity')\nfig.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers')\n\nfig.add_annotation( # add a text callout with arrow\n    text=\"Significantly low\", x='2020-04-18', y=0.07, arrowhead=1, showarrow=True\n)\n\n\nfig.update_layout(template = 'plotly_white',width=700, height=500, title_text = '<b>Total Tests For COVID-19 Per Thousand People<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","54bfd38f":"total_test_perday = pd.read_csv('..\/input\/covid19-testing-data\/full-list-covid-19-tests-per-day.csv')\ntotal_test_perday['Date'] = total_test_perday['Date'].apply(pd.to_datetime)\ntotal_test_perday.set_index([\"Entity\"], inplace = True)\ntotal_test_perday = total_test_perday.loc[['Italy', 'Japan','India', 'South Korea', 'United States']]\ntotal_test_perday.reset_index(inplace = True)\ntotal_test_perday.sort_values('Date', ascending= True,inplace=True)\n\n#plot\nfig = px.scatter(total_test_perday, \n                 x='Date', \n                 y='Daily change in total tests', \n                 color='Entity')\nfig.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers')\n\nfig.update_layout(template = 'plotly_white',width=700, height=500, title_text = '<b>COVID-19 Tests Per Day<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","0b4675d5":"daily_test_per1000 = pd.read_csv('..\/input\/covid19-testing-data\/full-list-daily-covid-19-tests-per-thousand.csv')\ndaily_test_per1000['Date'] = daily_test_per1000['Date'].apply(pd.to_datetime)\ndaily_test_per1000.set_index([\"Entity\"], inplace = True)\ndaily_test_per1000 = daily_test_per1000.loc[['Italy', 'Japan','India', 'South Korea', 'United States']]\ndaily_test_per1000.reset_index(inplace = True)\ndaily_test_per1000.sort_values('Date', ascending= True,inplace=True)\n\n#plot\nfig = px.scatter(daily_test_per1000, \n                 x='Date', \n                 y='Daily change in total tests per thousand', \n                 color='Entity')\nfig.update_traces(marker=dict(size=3.5),\n                  mode='lines+markers')\n\nfig.update_layout(template = 'plotly_white',width=700, height=500, title_text = '<b>Daily COVID-19 Tests Per Thousand People<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","0f9b55c9":"# data preparation\nmed = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\n#med.drop(columns=['Sno',\"Unnamed: 12\",\"Unnamed: 13\"],axis=1, inplace=True)\nmed.drop([36], inplace=True)\nmed.fillna('0', inplace=True)\nmed['NumPrimaryHealthCenters_HMIS'] = med['NumPrimaryHealthCenters_HMIS'].str.replace(',', '').astype(int)\nmed['NumCommunityHealthCenters_HMIS'] = med['NumCommunityHealthCenters_HMIS'].replace(',', '').astype(int)\nmed['NumSubDistrictHospitals_HMIS'] = med['NumSubDistrictHospitals_HMIS'].replace(',', '').astype(int)\nmed['NumDistrictHospitals_HMIS'] = med['NumDistrictHospitals_HMIS'].replace(',', '').astype(int)\nmed['TotalPublicHealthFacilities_HMIS'] = med['TotalPublicHealthFacilities_HMIS'].replace(',', '').astype(int)\nmed['NumPublicBeds_HMIS'] = med['NumPublicBeds_HMIS'].replace(',', '').astype(int)\nmed['TotalBeds'] = med[['NumPublicBeds_HMIS', 'NumRuralBeds_NHP18', 'NumUrbanBeds_NHP18']].sum(axis=1)\n\nmed.rename(columns={'State\/UT': 'State\/UnionTerritory'}, inplace=True)\nmed_pop = med.merge(pop[['State\/UnionTerritory', 'Population']], on='State\/UnionTerritory')\n\nmed_pop['Num Beds Per 1000 person'] = np.round(1000*med_pop[\"TotalBeds\"]\/med_pop[\"Population\"],2)","8d059503":"fig1 = go.Figure(data=[go.Bar(\n            x=med_pop['State\/UnionTerritory'], \n            y=med_pop.NumPrimaryHealthCenters_HMIS,\n            name='Primary Health Centers',\n            marker_color='#0000FF'),\n            \n            go.Bar(\n            x=med_pop['State\/UnionTerritory'], \n            y=med_pop.NumCommunityHealthCenters_HMIS,\n            name='Community HealthCenters',\n            marker_color='#8B0000'),\n            \n            go.Bar(\n            x=med_pop['State\/UnionTerritory'], \n            y=med_pop.NumDistrictHospitals_HMIS,\n            name='District Hospitals',\n            marker_color='#228B22'),\n\n            go.Bar(\n            x=med_pop['State\/UnionTerritory'], \n            y=med_pop.NumSubDistrictHospitals_HMIS,\n            name='Sub-District Hospitals',\n            marker_color='#FFD700')])\n\n\n# Change the bar mode\nfig1.update_layout(barmode='stack', template=\"ggplot2\",width=700, height=700, title_text = '<b>Total Public Health Facilities<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig1.show()","fd95e235":"fig = px.bar(med_pop, \n             x='State\/UnionTerritory', y=\"TotalBeds\",  \n             text='TotalBeds', \n             orientation='v')\nfig.update_traces(marker_color='#FF1493', opacity=0.8, textposition='inside')\n\nfig.update_layout(template=\"ggplot2\",width=700, height=700, title_text = '<b>Total Hospital Beds<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()\n\nfig1 = px.scatter(med_pop, \n             x='State\/UnionTerritory', y=\"Num Beds Per 1000 person\")\nfig1.update_traces(marker=dict(size=12,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                  marker_color='#FF1493',\n                  mode='lines+markers')\n\nfig1.update_layout(template=\"plotly_white\",width=700, height=700, title_text = '<b>Number of Hospital Beds Available For Every 1000 Person<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig1.show()","a1b9dd4b":"HTML('''<div class=\"flourish-embed\" data-src=\"story\/258632\" data-url=\"https:\/\/flo.uri.sh\/story\/258632\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","74fde0f8":"# function\ndef logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\n\nimport datetime\nimport scipy\n\np0 = (0,0,0)\ndef plot_logistic_fit_data(date_india_spread, title, p0=p0):\n    date_india_spread['x'] = np.arange(len(date_india_spread)) + 1\n    date_india_spread['y'] = date_india_spread['Confirmed']\n\n    x = date_india_spread['x']\n    y = date_india_spread['y']\n\n    c2 = scipy.optimize.curve_fit(logistic,  x,  y,  p0=p0 )\n    #y = logistic(x, L, k, x0)\n    popt, pcov = c2\n\n    x = range(1,date_india_spread.shape[0] + int(popt[2]))\n    y_fit = logistic(x, *popt)\n    \n    p_df = pd.DataFrame()\n    p_df['x'] = x\n    p_df['y'] = y_fit.astype(int)\n    \n    print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\n    print(\"Predicted k (growth rate): \" + str(float(popt[1])))\n    print(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")\n\n    x0 = int(popt[2])\n    \n    traceC = go.Scatter(\n        x=date_india_spread['x'], y=date_india_spread['y'],\n        name=\"Confirmed\",\n        marker=dict(color=\"#FF4500\"),\n        mode = \"markers+lines\",\n        text=date_india_spread['Confirmed'],\n    )\n\n    traceP = go.Scatter(\n        x=p_df['x'], y=p_df['y'],\n        name=\"Predicted\",\n        marker=dict(color=\"blue\"),\n        mode = \"lines\",\n        text=p_df['y'],\n    )\n    \n    trace_x0 = go.Scatter(\n        x = [x0, x0], y = [0, p_df.loc[p_df['x']==x0,'y'].values[0]],\n        name = \"X0 - Inflexion point\",\n        marker=dict(color=\"black\"),\n        mode = \"lines\",\n        text = \"X0 - Inflexion point\"\n    )\n\n    data = [traceC, traceP, trace_x0]\n\n    layout = go.Layout(template = 'plotly_white',width=700, height=500, title = 'Cumulative Conformed cases and logistic curve projection',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'),\n                  xaxis = dict(title = 'Day since first case', showticklabels=True), \n                  yaxis = dict(title = 'Number of cases'),\n                  hovermode = 'closest'\n         )\n    #layout = go.Layout(template=\"ggplot2\",width=700, height=500, )\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()\n    \n\n# plot\nL = 250000\nk = 0.25\nx0 = 100\np0 = (L, k, x0)\nplot_logistic_fit_data(date_india_spread, 'India')","a6b4c163":"p0 = (0,0)\ndef plot_exponential_fit_data(date_india_spread, title, delta, p0):\n    #date_india_spread['x'] = np.arange(len(date_india_spread)) + 1\n    #date_india_spread['y'] = date_india_spread['confirmed']\n\n    x = date_india_spread['x'][:-delta]\n    y = date_india_spread['y'][:-delta]\n\n    c2 = scipy.optimize.curve_fit(lambda t,a,b: a*np.exp(b*t),  x,  y,  p0=p0)\n\n    A, B = c2[0]\n    print(f'(y = Ae^(Bx)) A: {A}, B: {B}')\n    x = range(1,date_india_spread.shape[0] + 1)\n    y_fit = A * np.exp(B * x)\n    \n    traceC = go.Scatter(\n        x=date_india_spread['x'][:-delta], y=date_india_spread['y'][:-delta],\n        name=\"Confirmed (included for fit)\",\n        marker=dict(color=\"#FF4500\"),\n        mode = \"markers+lines\",\n        text=date_india_spread['Confirmed'],\n    )\n\n    traceV = go.Scatter(\n        x=date_india_spread['x'][-delta-1:], y=date_india_spread['y'][-delta-1:],\n        name=\"Confirmed (validation)\",\n        marker=dict(color=\"blue\"),\n        mode = \"markers+lines\",\n        text=date_india_spread['Confirmed'],\n    )\n    \n    traceP = go.Scatter(\n        x=np.array(x), y=y_fit,\n        name=\"Projected values (fit curve)\",\n        marker=dict(color=\"green\"),\n        mode = \"lines\",\n        text=y_fit,\n    )\n\n    data = [traceC, traceV, traceP]\n\n    layout = go.Layout(template = 'plotly_white',width=700, height=500,title = 'Cumulative Conformed cases and exponential curve projection',\n                       font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'),\n                        xaxis = dict(title = 'Day since first case', showticklabels=True), \n                        yaxis = dict(title = 'Number of cases'),\n                        hovermode = 'closest'\n         )\n \n    #layout = go.Layout(template=\"ggplot2\",width=700, height=500, )\n    fig = go.Figure(data = data, layout = layout)\n    fig.show()\n    \np0 = (40, 0.2)\nplot_exponential_fit_data(date_india_spread, 'India', 7, p0)","16bd5059":" ## #StayHome,SaveLives\n ## <font color='red'>Give me your feedback and if you find my kernel helpful please UPVOTE will be appreciated.<\/font>","7745e576":"# <font face=\"Arial Black\">COVID-19 India: Analysis, Visualization, And Comparison<\/font>\n#### Last Update - 25\/04\/2020\n<b face=\"Arial\">#StayHome,SaveLives<\/b>\n![](https:\/\/thespinoff.co.nz\/wp-content\/uploads\/2020\/03\/Covid-19-Handshake-Alternatives-v3.gif)\nImage Source: greenpeace.org","c4cb203d":"**Disclaimer note: this analysis is not intended as a prediction or forecast, is just studying how the evolution will be if we try to fit the data with an exponential curve. The assumption is most probably not accurate, as it is shown from the comparison of the projected values and real values, used in the validation (for the last week).**","199d502a":"### Projection Map","4c2c4822":"Every circle represent a state's position based on its population and a Covid-19 metric (cases, deaths and mortality-rate for the three plots).\n\nNothing very clear to take away from this. Instead we can look at the relative ranks of the population of states against the respective ranks in Covid-19 metrics.\n\n\n## 2. Not testing enough\nIndia has only tested about 47,951 persons. Capacity utilisation across 126 Indian Council of Medical Research (ICMR) laboratories so far stands at 38 percent. We also have narrow testing, i.e. we test only those with travel history to affected areas or those who came into contact with a COVID-19 positive case.\n\nICMR expanded the criteria on March 20 to include symptomatic healthcare workers and family members who are taking care of COVID-19 positive patients. The narrow criteria helps in reducing the burden on the public healthcare system, but clearly India is not testing enough. [source](https:\/\/www.moneycontrol.com\/news\/trends\/health-trends\/explainer-why-india-has-less-number-of-covid-19-cases-5097641.html)\n\n#### Dataset:\nThis dataset is provided by https:\/\/api.rootnet.in\/\n\n#### Let's analysis of Tests done in India and Comparission with South Korea","2db244d9":"# COVID-19 Cases By Indian Neighbour Countries\n<hr><\/hr>\n### SAARC trade officials\nThis discussed the impact of travel restrictions and the larger Covid-19 situation on intra-regional trade. Some specific issues addressed at the video conference included facilitation of trade through pragmatic solutions such as provisional clearance of imports at preferential duty with suitable conditions, provisional acceptance of digitally signed certificates of origin, acceptance of scanned copies of documents for clearance of imports by customs and release of payments by banks, resolving issues being faced for exports\/imports at land customs stations on land border.[source](https:\/\/economictimes.indiatimes.com\/news\/politics-and-nation\/saarc-trade-officials-sans-pakistan-meet-to-discuss-pragmatic-solutions\/articleshow\/75053684.cms)","4f3bde9d":"The maximum number of people affected by covid-19 in India are in the age group of 21-40, While the elderly are said to be the most vulnerable to the disease, people above 60 years accounted for only 17% of total cases in the country. The 9% of positive cases are in between 0- 20 years, 42% cases are in the age group of 21-40, 33% in 41-60 and 17% in the people above 60 years of age.","deed577d":"# Age Profile Analysis: Going Against Trend, Most Patients In India Are Millennials\n<hr><\/hr>","10a8085d":"# Introduction\n<hr><\/hr>\n\n## First case in India \nOn January 30, India reported its first case of COVID-19 in Kerala, which rose to three cases by February 3; all were students who had returned from Wuhan, China.The transmission escalated in the month of March, after several cases were reported all over the country, most of which were linked to people with a travel history to affected countries. On 12 March, a 76-year-old man who had returned from Saudi Arabia became the first victim of the virus in the country. Confirmed cases crossed 100 on 15 March, 1,000 on 28 March and 2,000 on 2 April and 3,000 on 4 April. The death toll crossed 50 on 1 April.\n\n![](https:\/\/imgur.com\/6wtDrrQ.png)","1b6d123b":"## India needs to ramp up COVID-19 testing, learn from South Korea & avoid US\u2019 mistakes\nTesting is important in controling the spread. As it helps controls further spread of disease by any individual once the suspect found positive, by isolation or quarantine. This section, provides insights based on the data provided by https:\/\/ourworldindata.org\/covid-testing.","69ff74b6":"The second stage of an outbreak is when there are cases of local transmission in the country, the report explains. This means that the person from whom the infection spread to another person is from the country itself. In this stage, the trajectory of the virus can be identified from the source to all the infected individuals. [Source](https:\/\/www.financialexpress.com\/lifestyle\/health\/coronavirus-outbreak-what-are-the-different-stages-of-a-pandemic\/1906629\/)","82b42332":"**This Notebook Inspired by Following Kernels :**\n* [Coronavirus: An Exploratory Study W\/ Detail Report](https:\/\/www.kaggle.com\/vikassingh1996\/coronavirus-an-exploratory-study-w-detail-report) ~ @vikassingh1996\n* [Tracking-india-s-coronavirus-spread-wip](https:\/\/www.kaggle.com\/parulpandey\/tracking-india-s-coronavirus-spread-wip) ~@parulpandey\n* [COVID-19 Case Study - Analysis, Viz & Comparisons](https:\/\/www.kaggle.com\/tarunkr\/covid-19-case-study-analysis-viz-comparisons) ~@tarunkr\n* [India's fight against Covid-19: April 2020](https:\/\/www.kaggle.com\/rohanrao\/india-s-fight-against-covid-19-april-2020) ~@rohanrao","d6a45e46":"# India is currently in Stage 2 of the pandemic, according to the Indian Council of Medical Research.\n<hr><\/hr>\n","dd5aafcc":"# Why India Has Relatively Lesser Number of COVID-19 Cases Against It's Population.\n<hr><\/hr>\nAccording to Worldometer - India has one COVID-19 confirmed case and 0.03 deaths for every 1 million population while the global average is 113.2 cases and 5.7 deaths.\n\n## 1. Due To Lockdown\nIndia is imposing one of the world's largest lockdown, asking people to stay home and practice social distancing. The aim of the lockdown is to cut the possible human to human transmission and reduce the number of cases. These are too early days to judge the impact of the lockdown, but could still playout by helping in reducing number of cases.\n\n#### Let's compare the Indian state population to its no. of confirm cases","ebf1459e":"**Disclaimer note: this analysis is not intended as a prediction or forecast, is just studying how the evolution will be if we try to fit the data with a logistic curve. The assumption is most probably not accurate.**\n\n### Fitting an exponential curve\nDisclaimer: this should not be interpreted as a prediction, since this data has a very dynamic characteristic and there are a lot of unknowns governing this dynamic.\n\nWe are making here an extremely simplified assumption, i.e. that the evolution follows an exponential curve, and we are fitting this exponential curve.\n\nThe parameters for the curve are:\n\nA - the constant multiplier for the exponential\nB - the multiplier for the exponent\nThe curve is thus:\n\ny=AeBx","58cbd734":"#### GOVT DENIES INDIA IN COMMUNITY TRANSMISSION STAGE\nThe Union Health Ministry in its daily briefing said the Covid-19 is still in local transmission stage in India and it took 12 days for cases of infection to rise from 100 to 1,000 at a rate of increase slower than some of the developed countries. \n[source](https:\/\/www.indiatoday.in\/india\/story\/covid-19-india-records-biggest-single-day-spike-as-cases-reach-1300-nizamuddin-gathering-leaves-6-dead-1661561-2020-03-31)","41d3cbd9":"#### Measures Taken By The Indian Government To Overcome Overburdened Health System\nIndia turns trains into isolation wards as COVID-19 cases rise and About 20,000 coaches and several stadiums across the country to be modified into medical facilities.\n","764f5abb":"# Lack of Equipment Forces Doctors To Fight Covid-19\n<hr><\/hr>\n**OVERBURDENED HEALTH SYSTEM**\n\nThe plight of doctors in the pandemic has cast a light on a dilapidated and overburdened public health system that has for years been starved of funds and an overhaul. India spends about 1.3% of its GDP on public health, among the lowest in the world. [Source](https:\/\/www.indiatoday.in\/india\/story\/coronavirus-in-india-doctors-face-equipment-shotages-1661773-2020-03-31)\n\n**Let's analysis the present condition of medical resources in India:**","89c1f120":"### Map Visualization: Confirmed Cases","eecaaf0c":"***Death Rate = number of deaths \/ number of cases x 100***","240c2187":"# Prediction \n<hr><\/hr>\n\n### Evolution projection\nDisclaimer: this should not be interpreted as a prediction, since this data has a very dynamic characteristic and there are a lot of unknowns governing this dynamic.\n\nWe are making here an extremely simplified assumption, i.e. that the evolution follows a logistic curve, and we are fitting a logistic curve.\n\nFit a logistic curve\nLet's try to fit a Logistic curve for predicting future behavior of the cumulative number of confirmed cases.\n\nI took the formulae from @oriano and @gpreda Kernel: https:\/\/www.kaggle.com\/orianao\/covid-19-logistic-curve-prediction and https:\/\/www.kaggle.com\/gpreda\/sars-ncov-2-in-romania\/data\n\n* L (the maximum number of confirmed cases) = 250000 taken from the US example (this is from long time obsolete now)\n* k (growth rate) = 0.25 approximated value from most of the countries\n* x0 (the day of the inflexion) = 80 approximated\n* The curve being: y=L1+e\u2212k(x\u2212x0)+1","e0323e45":"***MortalityRate (per million) = Total nuber of Deaths cases \/ Total population of states x 1, 000,000***","414283e7":"#### What South Korea did\nOne of the most efficient responses to COVID-19 came from South Korea. The epidemic there started in mid-February, and the government quickly scaled testing services by involving the private sector.\n\nIt was able to do 10,000 tests daily at the peak of the epidemic, used these to identify the infected individuals, and then isolated and treated them, also putting in control measures. This ensured the situation was brought under control swiftly.\n\nSouth Korea has reported 8,162 cases with 75 deaths, translating to a death rate of less than 1 per cent compared to 3.7 per cent globally.\n\n#### What US did\nIn contrast, the US bungled the testing availability at multiple points \u2014 it did not initially accept World Health Organization approved tests, the tests it sent to states were flawed, and it did not let the private sector play a role in testing.\n\nIn the meantime, the epidemic simmered, which has now led the US to declare a national emergency. It is now trying to rectify the mistakes by buying bulk test kits from Roche, and giving grants to private labs to develop similar tests.\n\nUntil 15 March, the US has reported 1,678 cases with 41 deaths (death rate 2.4 per cent). With community spread confirmed in the country, there are probably many infections that are not being diagnosed due to a shortage of test kits. Absence of evidence (no\/inadequate testing) should not be construed as evidence of absence (no infection\/epidemic).\n\n#### The testing situation in India\nThe National Institute of Virology (NIV) is the nodal reference laboratory for COVID-19 testing in India. Additionally, 51 testing labs and 56 collection labs are currently functional.\n\nFor instance, the sample from the patient from Kalaburgi was collected on 9 March, but results were only available on 11 March. By this time, reportedly, 34 people in Telangana and 44 in Karnataka had come in contact with the patient.\n\nFor confirmed cases of COVID-19, hospital authorities have to usually wait for two negative results before discharging a patient. Delays in receiving these test results will mean that beds are unnecessarily occupied, and new COVID-19 patients would not be able to access these when there is a surge in demand. **[SOURCE](https:\/\/theprint.in\/health\/india-needs-to-ramp-up-covid-19-testing-learn-from-south-korea-avoid-us-mistakes\/381876\/)**","7b9dedc9":"#  Present Condition in India\n<hr><\/hr>","72ab32d0":"**HIGHLIGHTS**\n* Prime Minister Narendra Modi chaired a joint meeting of the Empowered Groups (04 April) constituted for planning and ensuring implementation of COVID-19 response activities in the country.\n* ICMR to collaborate in the global WHO Solidarity Trial \u2013 an international randomized trial of treatment of COVID-19 in hospitalized patients.\n* MoHFW issued an order for insurance cover for all health workers for a period of 90 days through 'Pradhan Mantri Garib Kalyan Package: Insurance Scheme for Health Workers Fighting COVID-I9'.\n* Government of India launched a mobile app ArogyaSetu (02 April) through a public-private partnership to enable people to assess their risk of COVID infection (in line with privacy and data security parameters).\n* WHO Country office for India is working closely with Ministry of Health and Family Welfare (MoHFW) to strengthen COVID-19 Special Surveillance System (S3) through the Integrated Health Information Platform (IHIP).\n\n**INDIA SITUATION** \n* As of 5 April 2020 (18:00 PM), according to MoHFW, a total of 3577 COVID19 cases, (including 65 foreign nationals) have been reported in 29 states\/union territories. These include 274 who have been cured\/discharged, 1 who has migrated and 83 deaths. \n\n<p>**source** [India Situation Report WHO](https:\/\/www.who.int\/india\/emergencies\/india-situation-report)<\/p>"}}