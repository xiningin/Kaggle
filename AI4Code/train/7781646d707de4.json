{"cell_type":{"c9f80989":"code","be60f112":"code","fb418844":"code","0518622b":"code","f4039682":"code","ea1a2fd9":"code","3bb79f73":"code","28f5e555":"markdown","82dccdc7":"markdown","6c7bae45":"markdown","495b1cc5":"markdown","3943d2cc":"markdown","bceeb34a":"markdown"},"source":{"c9f80989":"import altair as alt\nimport numpy as np\nimport pandas as pd","be60f112":"rand = np.random.RandomState(578493)\ndata = pd.DataFrame({\n    'x': pd.date_range('2012-01-01', freq='D', periods=365),\n    'y1': rand.randn(365).cumsum(),\n    'y2': rand.randn(365).cumsum(),\n    'y3': rand.randn(365).cumsum()\n})\n\ndata = data.melt('x')\ndata.head()","fb418844":"chart = alt.Chart(data).mark_line().encode(\n    x='x:T',\n    y='value:Q',\n    color='variable:N'\n).interactive(bind_y=False)","0518622b":"alt.renderers.enable('notebook')\nchart","f4039682":"# Define and register a kaggle renderer for Altair\n\nimport altair as alt\nimport json\nfrom IPython.display import HTML\n\nKAGGLE_HTML_TEMPLATE = \"\"\"\n<style>\n.vega-actions a {{\n    margin-right: 12px;\n    color: #757575;\n    font-weight: normal;\n    font-size: 13px;\n}}\n.error {{\n    color: red;\n}}\n<\/style>\n<div id=\"{output_div}\"><\/div>\n<script>\nrequirejs.config({{\n    \"paths\": {{\n        \"vega\": \"{base_url}\/vega@{vega_version}?noext\",\n        \"vega-lib\": \"{base_url}\/vega-lib?noext\",\n        \"vega-lite\": \"{base_url}\/vega-lite@{vegalite_version}?noext\",\n        \"vega-embed\": \"{base_url}\/vega-embed@{vegaembed_version}?noext\",\n    }}\n}});\nfunction showError(el, error){{\n    el.innerHTML = ('<div class=\"error\">'\n                    + '<p>JavaScript Error: ' + error.message + '<\/p>'\n                    + \"<p>This usually means there's a typo in your chart specification. \"\n                    + \"See the javascript console for the full traceback.<\/p>\"\n                    + '<\/div>');\n    throw error;\n}}\nrequire([\"vega-embed\"], function(vegaEmbed) {{\n    const spec = {spec};\n    const embed_opt = {embed_opt};\n    const el = document.getElementById('{output_div}');\n    vegaEmbed(\"#{output_div}\", spec, embed_opt)\n      .catch(error => showError(el, error));\n}});\n<\/script>\n\"\"\"\n\nclass KaggleHtml(object):\n    def __init__(self, base_url='https:\/\/cdn.jsdelivr.net\/npm'):\n        self.chart_count = 0\n        self.base_url = base_url\n        \n    @property\n    def output_div(self):\n        return \"vega-chart-{}\".format(self.chart_count)\n        \n    def __call__(self, spec, embed_options=None, json_kwds=None):\n        # we need to increment the div, because all charts live in the same document\n        self.chart_count += 1\n        embed_options = embed_options or {}\n        json_kwds = json_kwds or {}\n        html = KAGGLE_HTML_TEMPLATE.format(\n            spec=json.dumps(spec, **json_kwds),\n            embed_opt=json.dumps(embed_options),\n            output_div=self.output_div,\n            base_url=self.base_url,\n            vega_version=alt.VEGA_VERSION,\n            vegalite_version=alt.VEGALITE_VERSION,\n            vegaembed_version=alt.VEGAEMBED_VERSION\n        )\n        return {\"text\/html\": html}\n    \nalt.renderers.register('kaggle', KaggleHtml())\nprint(\"Define and register the kaggle renderer. Enable with\\n\\n\"\n      \"    alt.renderers.enable('kaggle')\")","ea1a2fd9":"alt.renderers.enable('kaggle')\nchart","3bb79f73":"chart.mark_circle()","28f5e555":"# Rendering Altair Plots in Kaggle\n\nBackground: [Altair](http:\/\/altair-viz.github.io) is a visualization library in Python... kaggle supports it, but the plots do not render in static views.\n\nThere is a popular workaround published here: https:\/\/www.kaggle.com\/notslush\/altair-visualization-2018-stackoverflow-survey\n\nIt would be better if there were a built-in rendering solution that didn't involve all that copying and pasting.","82dccdc7":"Multiple renderings in one notebook work:","6c7bae45":"## Notebook renderer\n\nAltair ships with a notebook renderer that uses the [ipyvega](http:\/\/github.com\/vega\/ipyvega) package and jupyter extension to render plots.\n\nThis works in Kaggle if you are using a live kernel, but the plot does not show up when looking at the static view. I suspect this is because it accesses JS resources from the Jupyter kernel extension, which is not available in the static view:","495b1cc5":"## Simple Chart definition\n\nLet's create a dataframe and visualize it with Altair:","3943d2cc":"## Kaggle Renderer \n\nA workaround has been published by a kaggle user at https:\/\/www.kaggle.com\/notslush\/altair-visualization-2018-stackoverflow-survey\/. This defines a ``render()`` function that loads resources from an external CDN that is available in both the executed and in the static view (note that it is the frontend accessing the resources rather than the backend, so it's fine even if the internet is blocked).\n\nI've adapted the approach there to define and register an altair renderer, so that users just have to run ``alt.renderers.enable('kaggle')``. Source is here:","bceeb34a":"We should think about where to host this so that users can use Altair in kaggle without any copying and pasting required."}}