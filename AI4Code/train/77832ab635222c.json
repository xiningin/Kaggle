{"cell_type":{"61654974":"code","437b295e":"code","cd4f4a33":"code","1876269e":"code","407a5dcf":"code","d5993985":"code","e9884e7d":"code","a5828283":"code","37c210db":"code","5ae8ecc1":"code","367f8322":"code","8f5cc62e":"code","5cea362e":"code","af671de1":"code","198c7228":"code","e38b7702":"code","b346df7f":"code","d5fea444":"code","07f02fc1":"code","468f3b18":"code","6a9f2067":"markdown","facf147e":"markdown","1c1be357":"markdown","f653d4d2":"markdown","9259cf10":"markdown","dc6b6a2c":"markdown","0bd7d305":"markdown","e495afd3":"markdown","09928834":"markdown","d84b0f61":"markdown","26515796":"markdown","11c7f56f":"markdown","4d554913":"markdown","d0cd5d4e":"markdown"},"source":{"61654974":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","437b295e":"dataCountries=pd.read_csv('..\/input\/countries-of-the-world\/countries of the world.csv')","cd4f4a33":"dataCountries.head()","1876269e":"dataCountries.info()","407a5dcf":"regions=dataCountries.Region.unique()\ndataCountries['Pop. Density (per sq. mi.)']=([float(each.replace(',','.')) for each in dataCountries['Pop. Density (per sq. mi.)']])\npopulation=[]\npop_density=[]\nfor i in regions:\n    x=dataCountries[dataCountries.Region==i]\n    population.append(sum(x.Population))\n    pop_density.append(sum(x['Pop. Density (per sq. mi.)']))\npop_reg=pd.DataFrame({\"Regions\":regions,\n                    \"Population\":population,\n                    \"PopulationDensity\":pop_density})\npop_reg.sort_values(by=['Population'],inplace=True,ascending=False)\n","d5993985":"population_bar=go.Bar(x=pop_reg.Regions,\n                      y=pop_reg.Population,\n                     name=\"Population\",\n                     marker = dict(color = 'rgba(50, 134, 55, 0.5)',\n                     line=dict(color='rgb(0,0,0)',width=1.5)),\n                     text=pop_reg.Regions,\n                     )\nlayout=go.Layout(title='Population by Regions',)\nfig=go.Figure(data=population_bar,layout=layout)\niplot(fig)","e9884e7d":"pop_den=pop_reg.sort_values(by=['PopulationDensity'],ascending=False)\npop_density_bar=go.Bar(x=pop_den.Regions,\n                      y=pop_den.PopulationDensity,\n                     name=\"Population Density\",\n                     marker = dict(color = 'rgba(50, 134, 55, 0.5)',\n                     line=dict(color='rgb(0,0,0)',width=1.5)),\n                     text=pop_den.Regions,\n                     )\nlayout=go.Layout(title='Population Density by Regions (per sq. mi.)',)\nfig=go.Figure(data=pop_density_bar,layout=layout)\niplot(fig)","a5828283":"population_pie={\n  \"data\": [\n    {\n      \"values\": pop_reg.Population,\n      \"labels\": pop_reg.Regions,\n      \"domain\": {\"x\": [0, .8],\n                \"y\": [0, .8]},\n      \"name\": \"Population Rate of Regions\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .2,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Population Rate of Regions\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Population Rate of Regions\",\n                \"x\": 0.27,\n                \"y\": 1\n            },\n        ]\n    }\n}\n    \niplot(population_pie)\n\n","37c210db":"pop= go.Scatter(\n                    x = dataCountries.Country,\n                    y = dataCountries.Population,\n                    mode = \"lines+markers\",\n                    name = \"Population\",\n                    marker = dict(color = 'rgba(80, 26, 255, 0.8)'),\n                    text= dataCountries.Country)\ndata = [pop]\nlayout = dict(title = 'Population by Country',\n              xaxis= dict(title= 'Country',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","5ae8ecc1":"data_pop=dataCountries.loc[:,['Country','Population']]\ndata_pop.sort_values(by=['Population'],inplace=True,ascending=False)\npop_bar=px.bar(data_pop[:10],x='Country',y='Population',title=\"Top 10 Countries with the Most Population\")\npop_bar.show()","367f8322":"pop_den_con= go.Scatter(\n                    x = dataCountries.Country,\n                    y = dataCountries['Pop. Density (per sq. mi.)'],\n                    mode = \"lines+markers\",\n                    name = \"Population Density\",\n                    marker = dict(color = 'rgba(80, 26, 255, 0.8)'),\n                    text= dataCountries.Country)\ndata = [pop_den_con]\nlayout = dict(title = 'Population Density (per sq. mi.)  by Country',\n              xaxis= dict(title= 'Country',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","8f5cc62e":"data_infant_morality=dataCountries.loc[:,['Country','Infant mortality (per 1000 births)']]\ndata_infant_morality.dropna(inplace=True)\ndata_infant_morality['Infant mortality (per 1000 births)']=[float(each.replace(',','.')) for each in data_infant_morality['Infant mortality (per 1000 births)']]","5cea362e":"infantMortality= go.Scatter(\n                    x = data_infant_morality.Country,\n                    y = data_infant_morality['Infant mortality (per 1000 births)'],\n                    mode = \"lines+markers\",\n                    name = \"Infant Mortality Rates\",\n                    marker = dict(color = 'rgba(80, 26, 255, 0.8)'),\n                    text= data_infant_morality.Country)\ndata = [infantMortality]\nlayout = dict(title = 'Infant Mortality Rates by Country (per 1000 births)',\n              xaxis= dict(title= 'Country',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","af671de1":"data_infant_morality.sort_values(by=['Infant mortality (per 1000 births)'],inplace=True,ascending=False)\ninf_mor_bar=px.bar(data_infant_morality[:10],x='Country',y='Infant mortality (per 1000 births)',title=\"Top 10 Countries with Highest Infant Mortality Rates\")\ninf_mor_bar.show()","198c7228":"birthrate = go.Scatter(\n    x = dataCountries.index,\n    y = dataCountries.Birthrate,\n    mode = 'lines+markers',\n    name = 'Birthrate',\n    marker = dict(color = 'rgba(10, 255, 10, 0.5)'),\n    text = dataCountries.Country)\n\ndeathrate = go.Scatter(\n    x = dataCountries.index,\n    y = dataCountries.Deathrate,\n    mode = 'lines+markers',\n    name = 'Deathrate',\n    marker = dict(color = 'rgba(255, 10, 10, 0.5)'),\n    text = dataCountries.Country)\n\nlayout = dict(title = 'Birth and Death Rate of Countries',\n             xaxis= dict(zeroline= False)\n             )\n\ndata = [birthrate, deathrate]\nfig = dict(data = data, layout = layout)\n\niplot(fig)","e38b7702":"\nliteracy=dataCountries.loc[:,['Country','Literacy (%)']]\nliteracy.dropna(inplace=True)\nliteracy['Literacy (%)']=([float(each.replace(',','.')) for each in literacy['Literacy (%)']])\nliteracy.columns=['Country','Literacy']\nhighest_literacy=literacy.sort_values(by='Literacy',ascending=False)[:10]","b346df7f":"literacy_of_countries = highest_literacy.Country\nplt.subplots(figsize=(8,8))\nliteracy_wordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(literacy_of_countries))\nplt.imshow(literacy_wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","d5fea444":"\ndataSector=dataCountries.loc[:,['Country','Agriculture','Industry','Service','GDP ($ per capita)']]\ndataSector.dropna(inplace=True)\ndataSector.Agriculture=[float(each.replace(',','.')) for each in dataSector.Agriculture]\ndataSector.Industry=[float(each.replace(',','.')) for each in dataSector.Industry]\ndataSector.Service=[float(each.replace(',','.')) for each in dataSector.Service]\n\nsector_scatter = px.scatter_3d(dataSector, x='Agriculture', y='Industry', z='Service',\n                    color='Country',\n                    title='Sectoral Distribution',  \n                   )\nsector_scatter.show()","07f02fc1":"#editting data\nagr=list(dataSector.Agriculture)\nind=list(dataSector.Industry)\nserv=list(dataSector.Service)\ngdp=list(dataSector['GDP ($ per capita)'])\nleading_sector=[]\nfor i in range(211):\n    x=max(agr[i],ind[i],serv[i])\n    if x== agr[i]:\n        leading_sector.append('Agriculture')\n    elif x==ind[i]:\n        leading_sector.append('Industry')\n    elif x==serv[i]:\n        leading_sector.append('Service')\ndataSector2=pd.DataFrame({\"Country\":dataSector.Country,\n                         \"Agriculture\":agr,\n                         \"Industry\":ind,\n                         \"Service\":serv,\n                         \"LeadingSector\":leading_sector,\n                         \"GDP\":gdp})\nfig = px.scatter(dataSector2, x=\"Country\", y=\"GDP\",color=\"LeadingSector\")\nfig.show()\n","468f3b18":"df_arable=dataCountries.loc[:,['Country','Arable (%)']]\ndf_arable.dropna(inplace=True)\ndf_arable['Arable (%)']=([float(each.replace(',','.')) for each in df_arable['Arable (%)']])\ndf_arable=df_arable.sort_values(by='Arable (%)',ascending=False)\n\narable_bar=px.bar(df_arable[:10],x='Country',y='Arable (%)')\narable_bar.show()\n","6a9f2067":"# Infant Mortality Rates by Country","facf147e":"# Introduce\n\n\n**The following data were visualized with this study:**\n\n1-) Population by Regions\n\n2-) Population Density by Regions\n\n3-) Distribution of World Population by Regions\n\n4-) Population by Country\n\n5-) Top 10 Countries with the Most Population\n\n6-) Population Density by Country\n\n7-) Infant Mortality Rates by Country\n\n8-) Top 10 Countries with Highest Infant Mortality Rates\n\n9-) Birth and Death Rates of Countries\n\n10-) Top 10 Countries with the Highest Literacy Rate\n\n11-) Sectoral Distribution by Country\n\n12-) Countries' GDP Values (USA dollar per capita) and Leading Sectors\n\n13-) Top 10 Most Arable(%) Countries","1c1be357":"# Top 10 Countries with the Highest Literacy Rate","f653d4d2":"# Sectoral Distribution by Country","9259cf10":"# Population Density by Country","dc6b6a2c":"# Birth and Death Rates of Countries","0bd7d305":"# Top 10 Most Arable(%) Countries","e495afd3":"# Top 10 Countries with the Most Population","09928834":"# Population by Regions","d84b0f61":"# Population by Country","26515796":"# Distribution of World Population by Regions","11c7f56f":"# Population Density by Regions","4d554913":"# Countries' GDP Values  (USA dollar per capita) and Leading Sectors\n\n\n(**Gross domestic product (GDP)** is a monetary measure of the market value of all the final goods and services produced in a specific time period)","d0cd5d4e":"# Top 10 Countries with Highest Infant Mortality Rates"}}