{"cell_type":{"f45a49b7":"code","49d927a2":"code","5befe078":"code","cbc59223":"code","42999922":"code","d5523ad4":"code","31fbaf33":"code","5afaed50":"code","5691af53":"code","acdf51e5":"code","83f52388":"code","7b9797fd":"code","061ada36":"code","76cc33b9":"code","a00ccfbb":"code","bbf55c6d":"markdown","251dacba":"markdown","04cb6c44":"markdown","2e84948c":"markdown","f791a6bd":"markdown","ddc1535d":"markdown","d628615d":"markdown","ec3107a8":"markdown","e229a2e2":"markdown"},"source":{"f45a49b7":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport tensorflow as tf \nimport random\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.random import set_seed # for setting the random seed \nfrom tensorflow.keras import Sequential # tensorflow sequential api \nfrom tensorflow.keras.layers import Flatten, Dense # layers \nfrom tensorflow.keras.activations import relu, softmax # activation functions.\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy # loss functions \nfrom tensorflow.keras.optimizers import Adam # optimizers ","49d927a2":"train_path = '..\/input\/digit-recognizer\/train.csv'\ntest_path = '..\/input\/digit-recognizer\/test.csv'\ntrain_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)","5befe078":"len(train_df), len(test_df)","cbc59223":"X = train_df.drop('label', axis = 1) \/ 255\ny = train_df['label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","42999922":"index = list(test_df.index) # for submission","d5523ad4":"def plot_random_digit(X):\n    number = random.randint(1, len(X))\n    digit = np.array(X.iloc[number, :]).reshape((28,28))\n    plt.imshow(digit, cmap = plt.cm.binary)\n    plt.title(y[number])\n    plt.axis(False)","31fbaf33":"plot_random_digit(X)","5afaed50":"set_seed(42)\n\nmodel = Sequential([\n  Dense(100, activation=relu),\n  Dense(10, activation=softmax)\n])\n\nmodel.compile(\n    loss = SparseCategoricalCrossentropy(), # loss functions CategoricalCrossentropy(),\n    optimizer = Adam(),\n    metrics = ['accuracy']\n)\n\nhistory = model.fit(\n    X_train, \n    y_train, \n    epochs = 5,\n    validation_data = (X_test, y_test)\n)","5691af53":"model.evaluate(X_test, y_test)","acdf51e5":"test_df = test_df \/ 255 ","83f52388":"pred_probs = model.predict(test_df)","7b9797fd":"predictions = []\nfor array in pred_probs:\n    predictions.append(array.argmax())","061ada36":"sample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsample_submission","76cc33b9":"d = {\n    'ImageId': sample_submission.ImageId,\n    'Label': predictions\n}\n\ndf = pd.DataFrame(d)\ndf.shape","a00ccfbb":"filename = 'submission.csv'\ndf.to_csv(filename, index = False)","bbf55c6d":"### Importing the libraries","251dacba":"### Model predictions","04cb6c44":"### Model Evaluation","2e84948c":"### Splitting the data into training and test sets","f791a6bd":"# Thank you","ddc1535d":"### A function to plot a random digit","d628615d":"# Handwritten digit classifier","ec3107a8":"### Model Building","e229a2e2":"### Importing the datasets"}}