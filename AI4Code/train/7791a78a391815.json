{"cell_type":{"a82bd7c8":"code","987f5d53":"code","a8a8e659":"code","94d152b9":"code","7586bfb4":"code","4a307f20":"code","3e9070e2":"code","40c75573":"code","c7aa6025":"code","56e0ed67":"code","a579ed60":"code","4d00cc2d":"code","0e3c0395":"code","4ce86389":"code","ba7178fc":"markdown","3867de12":"markdown","73a88d48":"markdown","8bac0aa0":"markdown","15dc9ba5":"markdown","0ed46dae":"markdown","8de0184e":"markdown","6f7e327a":"markdown","c8781211":"markdown","9a4a0e60":"markdown","bd7c097d":"markdown","2bbcdfbb":"markdown","5bc919cf":"markdown"},"source":{"a82bd7c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","987f5d53":"import pandas as pd\n\n# Request functionalities from a bunch of different services\nimport pandas_datareader.data as web\n\n# Plot library... \"as\" creates an alias\nimport matplotlib.pyplot as plt\n\n# Helps with dates and times\nimport datetime as dt\n\n# Some modules from Google that were recommended\nimport math\nimport seaborn as sns\n\ndf = Food_Establishment_Inspection_Data = pd.read_csv(\"..\/input\/king-county-food-inspection\/Food_Establishment_Inspection_Data.csv\")","a8a8e659":"df.head(5)","94d152b9":"four_col = df[['Program Identifier', 'Inspection Date', 'Inspection Result', 'Violation Description']]\nfour_col","7586bfb4":"# From above, this is the code to consolidate the table into three rows\n# three_col = df[['Program Identifier', 'Inspection Result', 'Violation Description']]\n# three_col\n\n# And this is the code to identify rows with \"Fremont Bowl\". \n# df_filter = df['Program Identifier'].isin(['FREMONT BOWL'])\n# df[df_filter]\n\ndf_filter = four_col['Program Identifier'].isin(['CAFE SELAM'])\nfour_col[df_filter]","4a307f20":"four_col.tail(5)","3e9070e2":"# Let's drill this down to two columns\ntwo_col = df[['Inspection Date', 'Inspection Result']]\ntwo_col\n\n# And let's see what the other results could be\ntwo_col.head(20)\n# Seems like there are only four kinds of inspection results","40c75573":"def inspections(results):\n    if (results == \"Complete\"):\n        return \"Completed\"\n    elif (results == \"Satisfactory\"):\n        return \"Passed\"\n    elif (results == \"Incomplete\"):\n        return \"Incomplete\"\n    elif (results == \"Unsatisfactory\"):\n        return \"Unsatisfactory\"\n    else:\n        return \"Unknown\"\n\ndf['Inspection Result'].apply(inspections).value_counts().plot(kind='bar',rot=0)","c7aa6025":"# Let's get that date converted to date-time\ndf['Inspection Date'] = pd.to_datetime(df['Inspection Date'])\n\n# And this will just keep the date and get rid of the rest\n# Thanks for the help, Hannah! \ndf['Inspection Date'] = df['Inspection Date'].map(lambda x: x.year).fillna(\"\")\n\ndf['Inspection Date']","56e0ed67":"df['Inspection Date'].value_counts().plot(kind='bar', figsize=(10,10), rot = 0)","a579ed60":"df['Inspection Date'].value_counts().plot(kind='line', figsize=(10,10))","4d00cc2d":"# This should do the trick...\nc = df['Inspection Date'].value_counts()\nprint (c)","0e3c0395":"a = df['Inspection Result'].apply(inspections).value_counts()\nb = df['Inspection Date'].value_counts()\n\ndf.plot(x=[a, b], kind=\"bar\")","4ce86389":"a = df['Inspection Result'].apply(inspections).value_counts()\nc = df['Inspection Date'].value_counts()\n\ndf2 = pd.DataFrame({\n    'year':['2006','2007','2008','2009','2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020'],\n    'inspections':[12245,12901,13339,13447,15583,17044,19165, 19849, 22665, 22769, 23579, 25709, 27578, 27752, 3191],\n})\n\ndf2.plot(kind='bar',x='year',y='inspections',rot=0, figsize=(10,10))\nplt.show()","ba7178fc":"Now I want to do the following...\n\n* Have a chart for each year\n* Graph the inspection result as the x axis and the # of inspection for said year\n\nIn other words, how many results were \"Complete\" in 2019? How many results were \"Unsatisfactory\" in 2018? For the total inspections in 2019, how many went into which categories?","3867de12":"This is more data than I need. Let's consolidate the rows.","73a88d48":"This is exactly what I want (and - aside from the floats - is identical to what I did earlier), but I'd like to have the breakdown of inspection results as well per year. However, due to the incompatility of the dates as floats, I don't think this is possible (or, at least, is limited by my foundational knowledge of pandas).","8bac0aa0":"Great, it looks like that worked. Now I'll see if I can plot these two data points together.\n\nIn plain English, I want a bar chart that will show the Inspection Rating for each Inspection Date (or, in this case, Year).\n\nSo first, let me plot the years out.","15dc9ba5":"Well, that looks good. But the dates are still saved as floats. Out of curiosity, what are the number of inspections per year?","0ed46dae":"Great! Now I want this format but also look up the specific business name.","8de0184e":"So it's kind of odd for the years to be floats - especially since I converted the floats into integers (well, objects) previously.\n\nLet's try this as a line graph.","6f7e327a":"Now let's do some data visualization!\n\nI'd like to see what the inspection results in 2020 are. I'll break this down into smaller chunks.","c8781211":"This probably should've done the trick. Unfortunately, I'm getting this cryptic error that I'm getting blocked on. I believe this still has something to do with the \"Inspection Date\" :(\n\nWhat happens when I do this manually? And yes - I know, this defeats the whole purpose of this exercise. But I have to see what this would look like...","9a4a0e60":"Good news is that this worked! Bad news is that... yikes, there are a LOT of unsatisfactory inspection results. Now how can I do this with the addition of the year?\n\nFirst, let's convert the inspection date to a more consumable format. Currently, it reads as \"NaN\".","bd7c097d":"Gosh, this looks like a huge dataset! I'll use \".tail()\" to see where it ends.","2bbcdfbb":"Let's see what this data looks like. I'll print out the first few rows to get a good idea of what's there.","5bc919cf":"The smiley face-based rating system that Seattle uses for restaurant inspections has always fascinated me. I've also been particularly intrigued by this system as there have been a few restaurants that I've liked that have received very poor marks in the past.\n\nI'd love to dig into this data and see what it's all about!\n\nFirst, let's import the data."}}