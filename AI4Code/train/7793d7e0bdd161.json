{"cell_type":{"26ea8091":"code","6f826fca":"code","70eaa1fb":"code","afff3467":"code","58484692":"code","7cb7576c":"code","a8635f3c":"code","5d8a5902":"code","243e5841":"code","75e51877":"code","81f90119":"code","1d9c1526":"code","884609e6":"code","3f7142be":"code","ee4a448e":"code","15983765":"code","5f09c7bc":"code","e971984e":"code","b368c1cc":"code","5e3ecbd7":"code","b2a609f4":"code","9805f661":"code","c52d7734":"code","4cc3ac14":"code","23989353":"code","8fbe3fd6":"code","35659a44":"code","f5f49798":"code","d4d3ff65":"code","bfb2b9a7":"code","2dfd98bd":"code","8991bcfa":"code","9b1ff3a3":"code","24ce340a":"code","c891498b":"code","a6eb5623":"code","951475eb":"code","a2f92fc3":"code","d7e473a7":"code","2cbd9ce0":"code","323f3d4b":"code","ed0c6779":"code","aa5dd791":"code","b027c8dd":"code","46262542":"code","9fe61c1d":"code","ee36f701":"code","aa968f0c":"code","4ef092a8":"markdown","98e0b2b4":"markdown","2f59b7da":"markdown","b668b4dd":"markdown","206afd09":"markdown","89df3de1":"markdown","e3c3dd8a":"markdown","68aeaf20":"markdown"},"source":{"26ea8091":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f826fca":"!conda install r -y","70eaa1fb":"!conda install -c r rpy2=2.9.4 -y","afff3467":"!pip install thresholdmodeling","58484692":"import sys\nsys.path.insert(1, '..\/input\/newlmoment')","7cb7576c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.legend_handler import HandlerLine2D\nimport seaborn\nfrom scipy import stats\nimport lmoment\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15, 8\n\nfrom rpy2.robjects.packages import importr\nimport rpy2.robjects.packages as rpackages\n\nbase = importr('base')\nutils = importr('utils')\nutils.chooseCRANmirror(ind=1)\nutils.install_packages('POT')\n\nfrom thresholdmodeling import thresh_modeling","a8635f3c":"df = pd.read_csv(\"\/kaggle\/input\/windanalysisjulian\/WIND_ANALYSIS.csv\", index_col=0)","5d8a5902":"df.drop(np.nan,axis=0,inplace=True)","243e5841":"df[['Date','Time']] = df.Calender_datetime.str.split(\" \",expand=True)","75e51877":"df.drop(['Calender_datetime','CCYYMM','DDHHmm','Date'], axis=1, inplace=True)","81f90119":"df['Date'] = pd.to_datetime(df['Julian.1'] + ' ' + df['Time'])","1d9c1526":"df['YYYY'] = pd.to_datetime(df['Julian.1']).dt.year\ndf['MM'] = pd.to_datetime(df['Julian.1']).dt.month\ndf['DD'] = pd.to_datetime(df['Julian.1']).dt.day","884609e6":"df = df[['Date','Julian.1','YYYY','MM','DD','Time', 'WD', 'WS', 'ETOT', 'TP', 'VMD', 'ETTSea', 'TPSea', 'VMDSea','ETTSw', 'TPSw', 'VMDSw', 'MO1', 'MO2', 'HS', 'DMDIR', 'ANGSPR','INLINE', 'HSURt', 'CSt', 'CDt']]","3f7142be":"df.drop(['Julian.1'],axis=1,inplace=True)","ee4a448e":"df.drop(['ETOT', 'TP', 'VMD', 'ETTSea', 'TPSea', 'VMDSea',\n       'ETTSw', 'TPSw', 'VMDSw', 'MO1', 'MO2', 'HS', 'DMDIR', 'ANGSPR',\n       'INLINE', 'HSURt', 'CSt', 'CDt'],axis=1, inplace=True)","15983765":"df.isnull().sum()","5f09c7bc":"df['WD'] = df['WD'].astype(float)\ndf['WS'] = df['WS'].astype(float)","e971984e":"df1 = df.groupby(\"YYYY\").WS.max()\nplt.plot(df1)\nplt.title(\"Maximum Wind Speed in different years(1983-2009)\")","b368c1cc":"!pip install git+https:\/\/github.com\/OpenHydrology\/lmoments3.git\n!pip install git+https:\/\/github.com\/kikocorreoso\/scikit-extremes.git","5e3ecbd7":"import skextremes as ske","b2a609f4":"print(\"MRL PLOT\")\nthresh_modeling.MRL(df['WS'], 0.05)","9805f661":"print(\"Shape Stability Plot\")\nthresh_modeling.Parameter_Stability_plot(df['WS'], 0.05)","c52d7734":"threshold_value = 8\nvalues_per_year = 8760","4cc3ac14":"thresh_modeling.gpdfit(df['WS'], threshold_value, 'mle')","23989353":"thresh_modeling.gpdpdf(df['WS'], threshold_value, 'mle', 'sturges', 0.05)","8fbe3fd6":"thresh_modeling.gpdcdf(df['WS'], threshold_value, 'mle', 0.05)","35659a44":"thresh_modeling.qqplot(df['WS'],threshold_value, 'mle', 0.05)","f5f49798":"thresh_modeling.ppplot(df['WS'], threshold_value, 'mle', 0.05)","d4d3ff65":"return_period = [1,5,10,20,25,50,75,100,200,500,1000]\nfor i in return_period:\n    print(\"Return Period:\",i)\n    thresh_modeling.return_value(df['WS'], threshold_value, 0.05, values_per_year, values_per_year*i, 'mle')","bfb2b9a7":"model = ske.models.classic.GEV(df['WS'], fit_method='lmoments', ci=0, ci_method=None, frec = 8760,return_periods=np.array([1,10,20,25,50,100,200]).all())","2dfd98bd":"model.plot_summary()","8991bcfa":"modelGum = ske.models.classic.Gumbel(df['WS'], fit_method='lmoments', ci=0, ci_method=None,frec = 8760, return_periods=np.array([1,10,20,25,50,100,200]).all())","9b1ff3a3":"modelGum.plot_summary()","24ce340a":"LMU = lmoment.samlmu(df['WS'])\nLMU","c891498b":"weifit = lmoment.pelwei(LMU)","a6eb5623":"weifit","951475eb":"gevfit = lmoment.pelgev(LMU)","a2f92fc3":"gumfit = lmoment.pelgum(LMU)","d7e473a7":"T = np.array([1,5,10,20,25,50,75,100,200,500,1000])\ngevres = []\nweires = []\ngumres = []\nfor i in T:       \n        gevST = lmoment.quagev(1.0-(1.\/i), gevfit)\n        gevres.append(gevST)\n        weiST = lmoment.quawei(1.0-(1.\/i), weifit)\n        weires.append(weiST)\n        gumST = lmoment.quagum(1.0-(1.\/i), gumfit)\n        gumres.append(gumST)","2cbd9ce0":"plt.xscale('log')\nplt.xlabel('Average Return Interval (Year)')\nplt.ylabel('Wind Speed')\n\n \n\n# draw extreme values from GEV distribution\nline1, = plt.plot(T, gevres, 'red',linewidth=5, label='GEV')\nline2, = plt.plot(T, weires, 'yellow', linewidth=5, label='WEI')\nline3, = plt.plot(T, gumres, 'green', linewidth=5, label='GUM')\n\nlabels = [1,5,10,20,25,50,75,100,200,500,1000]\nplt.xticks(labels) \n\n# draw extreme values from observations(empirical distribution)\nN    = np.r_[1:len(df['WS'].index)+1]*1.0 #must *1.0 to convert int to float\nNmax = max(N) \n\nplt.scatter(Nmax\/N, sorted(df['WS'])[::-1], color = 'black', facecolors='none', label='Empirical')\nplt.legend(handler_map={line2: HandlerLine2D(numpoints=4)})","323f3d4b":"# prepare probabilites according to observations\nN    = np.r_[1:len(df['WS'].index)+1]*1.0 #must *1.0 to convert int to float\nNmax = max(N)   \nP0   = (N-1.)\/Nmax\nP    = np.delete(P0,0)\n\nobs = sorted(df1)[1:]\n\ngevres2 = []\nweires2 = []\ngumres2 = []\nfor i in P:\n    gevSTo = lmoment.quagev(i, gevfit)\n    gevres2.append(gevSTo)\n    weiSTo = lmoment.quawei(i, weifit)\n    weires2.append(weiSTo)\n    gumSTo = lmoment.quagum(i, gumfit)\n    gumres2.append(gumSTo)\n\n# do ks test\nks = [('GEV', stats.ks_2samp(obs, gevres2)), ('GUM', stats.ks_2samp(obs, gumres2)), ('WEI', stats.ks_2samp(obs, weires2))]\n\nlabels = ['Distribution', 'KS (statistics, pvalue)']\npd.DataFrame(ks, columns=labels)","ed0c6779":"plt.xscale('log')\nplt.xlabel('Average Return Interval (Year)')\nplt.ylabel('Wind Speed')\nline1, = plt.plot(T, weires, 'yellow', label='WEI',linewidth=3)\nlabels = [1,5,10,20,25,50,75,100,200,500,1000]\nplt.xticks(labels)\n\n# draw extreme values from observations(empirical distribution)\nN    = np.r_[1:len(df['WS'].index)+1]*1.0 #must *1.0 to convert int to float\nNmax = max(N)\n\nplt.scatter(Nmax\/N, sorted(df['WS'])[::-1], color = 'black', facecolors='none', label='Empirical')\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})","aa5dd791":"plt.xscale('log')\nplt.xlabel('Average Return Interval (Year)')\nplt.ylabel('Wind Speed')\nline1, = plt.plot(T, gumres, 'g', label='GUM',linewidth=3)\n\n# draw extreme values from observations(empirical distribution)\nN    = np.r_[1:len(df['WS'].index)+1]*1.0 #must *1.0 to convert int to float\nNmax = max(N)\n\nlabels = [1,5,10,20,25,50,75,100,200,500,1000]\nplt.xticks(labels)\n\nplt.scatter(Nmax\/N, sorted(df['WS'])[::-1], color = 'black', facecolors='none', label='Empirical')\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})","b027c8dd":"plt.xscale('log')\nplt.xlabel('Average Return Interval (Year)')\nplt.ylabel('Wind Speed')\nline1, = plt.plot(T, gevres, 'red', label='GEV',linewidth=3)\n\n# draw extreme values from observations(empirical distribution)\nN    = np.r_[1:len(df['WS'].index)+1]*1.0 #must *1.0 to convert int to float\nNmax = max(N)\n\nlabels = [1,5,10,20,25,50,75,100,200,500,1000]\nplt.xticks(labels)\n\nplt.scatter(Nmax\/N, sorted(df['WS'])[::-1], color = 'black', facecolors='none', label='Empirical')\nplt.legend(handler_map={line1: HandlerLine2D(numpoints=4)})","46262542":"return_weibull = pd.DataFrame({\"Return Period\":T,\"Weibull Fit(all)\":weires})","9fe61c1d":"return_weibull = return_weibull.set_index(\"Return Period\")","ee36f701":"wind_directions = [22.5,67.5,112.5,157.5,202.5,247.5,292.5]\nfor i in wind_directions:\n    if((i-45)<0):\n        result = df[(df['WD']<=i) | (df['WD']>=337.5)]\n        a = 337.5\n    else:\n        result = df[(df['WD']<=i+45) & (df['WD']>=i)] \n        a = i+45\n    LMU = lmoment.samlmu(result['WS'])\n    weifit = lmoment.pelwei(LMU)\n    T = np.array([1,5,10,20,25,50,75,100,200,500,1000])\n    weires = []\n    for j in T:\n        weiST = lmoment.quawei(1.0-(1.\/j), weifit)\n        weires.append(weiST)\n    if((i-45)<0):\n        name = \"Direction:\"+ str(a)+ \"-\"+str(i)\n    else:\n        name =  \"Direction:\"+ str(i)+ \"-\"+str(a)\n        #name = str(i)+\"-\"+str(a)             \n    return_weibull[name] = weires","aa968f0c":"return_weibull","4ef092a8":"`GEV Analysis`","98e0b2b4":"## GEV REPRESENTATION","2f59b7da":"## ThreshModelling - GPDfit using POT","b668b4dd":"`Weibull Fit`","206afd09":"`Creating Moments`","89df3de1":"- `From above plots, we infer that threshold value can be selected as '8'`","e3c3dd8a":"`Gumbel`","68aeaf20":"## Gumbel Representation"}}