{"cell_type":{"598aeae6":"code","c92b189a":"code","05d65ac0":"code","2d035254":"code","c7dbec09":"code","5c2307ee":"code","1a8b40f6":"code","92b94411":"code","8f609d9d":"code","69f46824":"code","c4b4da5f":"code","67de89b7":"code","9aee9e99":"code","4dc0a013":"code","dd45f842":"code","9f580872":"code","9d060f82":"code","c8f5e1b3":"code","7f5d51aa":"code","ae6173cb":"code","ccabb6c1":"code","7e3ef29f":"code","5413c3d9":"code","bff1c757":"code","4c55bc0a":"markdown","2c7e3215":"markdown","fac14afe":"markdown","177ca918":"markdown","61b59ef8":"markdown","2a4ab7d9":"markdown","0cb3be02":"markdown","9931a90f":"markdown","bc2195c7":"markdown","300e5d78":"markdown","649bb75a":"markdown","36926690":"markdown","e0e4cd86":"markdown","fd083ee2":"markdown","5b157138":"markdown","d2cba3ba":"markdown"},"source":{"598aeae6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c92b189a":"import folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap\nimport warnings\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nimport tensorflow as tf\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","05d65ac0":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","2d035254":"# Let's check the train dataset\n\ntrain.head()","c7dbec09":"# Let's check the test dataset\n\ntest.head()","5c2307ee":"# Checking for the missing elements on the dataset\n\ncount_NaN = train.isna().sum()\ncount_NaN","1a8b40f6":"# Embark towns of the Titanic Passengers\n\nplt.figure(figsize=(15,8))\nsplot = sns.countplot(data=train, x='Embarked')\nplt.ylabel(\"Number of the Passengers\", fontsize=12)\nplt.xlabel(\"Embark Towns\", fontsize=12)\nplt.title(\"Embark Towns of the Titanic Passengers\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')","92b94411":"# Age Distribution of the Titanic Passengers\n\nplt.figure(figsize=(15,8))\nsns.countplot(data=train, x='Age')\nplt.ylabel(\"Number of the Passengers\", fontsize=12)\nplt.xticks(rotation=90)\nplt.title(\"Age Distribution of the Titanic Passengers\", fontsize=16)","8f609d9d":"# Gender Distribution of the Titanic Passengers\n\ntrain['Sex'] = np.where(train['Sex'] == 'male', 'Male', 'Female')\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='Sex')\nplt.ylabel(\"Number of the Passengers\", fontsize=12)\nplt.xlabel(\"Genders\", fontsize=12)\nplt.title(\"Gender Distribution of the Titanic Passengers\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')","69f46824":"# Survival Distribution of the Titanic Passengers\n\ntrain['Survived'] = np.where(train['Survived'] == 1, 'Survived', 'Dead')\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='Survived')\nplt.ylabel(\"Number of the Passengers\", fontsize=12)\nplt.title(\"Survival Distribution of the Titanic Passengers\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')","c4b4da5f":"# Ticket Class Distribution of the Titanic Passengers\ntrain.loc[(train.Pclass == 3), 'Pclass'] = 'Third Class'\ntrain.loc[(train.Pclass == 2), 'Pclass'] = 'Second Class'\ntrain.loc[(train.Pclass == 1), 'Pclass'] = 'First Class'\nplt.figure(figsize=(15, 8))\nsplot = sns.countplot(data=train, x='Pclass')\nplt.ylabel(\"Number of the Passengers\", fontsize=12)\nplt.title(\"Class Distribution of the Titanic Passengers\", fontsize=16)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'),\n                   (p.get_x() + p.get_width() \/ 2., p.get_height()),\n                   ha='center', va='center',\n                   xytext=(0, 9),\n                   textcoords='offset points')\n","67de89b7":"count_towns = train.groupby(\n    pd.Grouper(key='Embarked')).size().reset_index(name='count')\n\nlatitude_embark = ['50.897', '49.6423', ' 51.84914']\nlongitude_embark = ['-1.404', '-1.62551', '-8.2975265']\n\ncount_towns['latitude_embark'] = latitude_embark\ncount_towns['longitude_embark'] = longitude_embark\n\nm = folium.Map([49.922935, -6.068136], zoom_start=6, width='%100', height='%100')\n\nheat_data = count_towns.groupby([\"latitude_embark\", \"longitude_embark\"])['count'].mean().reset_index().values.tolist()\nfolium.plugins.HeatMap(heat_data).add_to(m)\nm","9aee9e99":"train = pd.read_csv('..\/input\/titanic\/train.csv')\n\ntrain['Survived'] = np.where(train['Survived'] == 1, 'Survived', 'Dead')\ntrain.loc[(train.Pclass == 3), 'Pclass'] = 'Third Class'\ntrain.loc[(train.Pclass == 2), 'Pclass'] = 'Second Class'\ntrain.loc[(train.Pclass == 1), 'Pclass'] = 'First Class'\ntrain['Sex'] = np.where(train['Sex'] == 'male', 'Male', 'Female')\n\nfig = px.sunburst(data_frame=train, # Our dataset\n                  path=[\"Pclass\", \"Sex\", \"Survived\"],  # Root, Branches, Leaves\n                  color=\"Pclass\",\n                  color_discrete_map={'First Class': 'rgb(246,207,113)',\n                                      'Second Class': 'rgb(248,156,116)',\n                                      'Third Class': 'rgb(102,197,204)'},  # Colours (could be changed easily)\n                  maxdepth=-1,\n                  branchvalues='total',\n                  hover_name='Pclass',  # Hover name for chosen column\n                  hover_data={'Pclass': False},\n                  title='Visualization of the Titanic Dataset', template='ggplot2'# Title and the template \n                  )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(font=dict(size=16))\nfig.show()","4dc0a013":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain['Sex'] = np.where(train['Sex'] == 'male', 1, 0) # 1 = Male and 0 = Female for this scenario\n\nplt.figure(figsize=(15,8))\nheatmap = sns.heatmap(train.corr(), vmin=-1, vmax=1, annot=True)\nheatmap.set_title('Correlation Graph of the Training Dataset', fontdict={'fontsize': 24})","dd45f842":"train = pd.read_csv('..\/input\/titanic\/train.csv')\n\n# Male = 1 and Female = 0 for numerical representation\ntrain['Sex'] = np.where(train['Sex'] == 'male', 1, 0)\n\n\n# Dealing with the Age missing values\ntrain_male = train[train['Sex'] == 1]  # Dataset for only male\ntrain_female = train[train['Sex'] == 0]  # Dataset for only female\n\n# NaN values replaced with the median age of their sex\ntrain_male['Age'].fillna(train_male['Age'].median(), inplace=True)\ntrain_female['Age'].fillna(train_female['Age'].median(), inplace=True)\n\ntrain = pd.concat([train_male, train_female], axis=0)\ntrain = train.sort_values(by='PassengerId')","9f580872":"# Let's check the new form of the dataset. As you can see, the Sex column has 1 or 0 values now.\ntrain.head()","9d060f82":"# Replacing the NaN embarked data point with the 'S' because it has the high majority\ntrain['Embarked'].fillna('S', inplace=True)\n\n# Encoding the Embark locations. Now S = 1, C = 2 and Q = 3\ntrain.loc[(train.Embarked == 'S'), 'Embarked'] = 1\ntrain.loc[(train.Embarked == 'C'), 'Embarked'] = 2\ntrain.loc[(train.Embarked == 'Q'), 'Embarked'] = 3","c8f5e1b3":"#S = 1, C = 2 and Q = 3\n# Let's check the new form of the dataset. As seen from the below, the Embarked column has 1, 2 or 3 values now.\ntrain.head()","7f5d51aa":"# Finally, I will use this form of the dataset as below. The PassengerId, Name, Ticket and Cabin columns will be dropped. I will not use these columns.\n\ntrain = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\ntrain.head()","ae6173cb":"# y are the values I want to predict\ny = train['Survived']\nX = train.drop('Survived', axis=1)\nX","ccabb6c1":"# Train and Test Split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=13)","7e3ef29f":"# Random Forest Classifier\nrf = RandomForestClassifier(max_depth=10).fit(X_train, y_train)\npredictions_rf = rf.predict(X_val)","5413c3d9":"acc_rf = accuracy_score(y_val, predictions_rf)\nprint('Accuracy Random Forest: %', 100 * acc_rf)","bff1c757":"plt.figure(figsize=(15, 8))\nconf_mat = confusion_matrix(y_true=y_val, y_pred=predictions_rf)\nsns.heatmap(conf_mat, annot=True, fmt='g')\nplt.title('Confusion Matrix of the Random Forest Classifier', fontsize=14)\nplt.ylabel('Real Class', fontsize=12)\nplt.xlabel('Predicted Class', fontsize=12)\nplt.show()","4c55bc0a":"# Feature Visualization of the Dataset","2c7e3215":"# Aim of the Notebook","fac14afe":"# Heatmap of the Titanic Embark Towns\n\n**In this part, I will show the embark towns of the Titanic Passengers on the heatmap. According to the dataset, there are 3 different embark locations as you can see below.**\n\n**Most of the passengers embarked from Southampton, and the following two towns have slightly the same passenger distributions.**","177ca918":"# Checking for the Missing Elements\n\n**As you can see from the output, the Age section has 177 missing values and almost all of the Cabin elements are missing.**","61b59ef8":"# Reading the Train and Test Datasets","2a4ab7d9":"# Random Forest Classifier","0cb3be02":"**As you can see above, the model is not bad for the first try. I believe, I would improve this model for the next time or use different classification models for the best results.**\n\n**Thank you if you followed me this far!**\n\n**I am open to your feedbacks and suggestions, feel free to contact me!**","9931a90f":"# Plotly Sunburst Visualization\n\n**As you can see from the visualization below, the Female survival rate is higher for the First Class. Unfortunately, when the Class is decreased, the Female survival rate is decreasing.**\n\n**The Third Class passengers have the majority on the Titanic and the number of Second and First class passenger are close to each other.**\n\n**(This visualization is interactive, you can click the desired Class and Sex for more information. It is also available for you to see how many passengers are covered by this specific area.)**","bc2195c7":"**This model has %85.82 accuracy when I ran it. It may change if you run it on your computer due to stochastic nature of the models. I think this is not bad for the first shot.**","300e5d78":"# Importing the Libraries","649bb75a":"# Let's Check the Accuracy","36926690":"**Hello everyone, I will join the competition of the Titanic Dataset with a simple Random Forest Classifier. This will be my first submission for this competition.**\n\n**I will start with the simple dataset visualization and analysis. I will use Seaborn, Plotly, and Folium libraries for the visualization.**\n\n**In the next step, I will clear the data and use a simple Random Forest Classifier for the predictions.**\n\n**Finally, I will analyze the results of the model and send the prediction results for the competition.**\n\n**I am open to feedback and suggestions, feel free to comment your feedback and suggestions on the comment section or contact me.**\n\n**Thank you and let's get started!**","e0e4cd86":"# Confusion Matrix","fd083ee2":"# Correlation Analysis of the Dataset\n\n**It is easy to see the relation between the Survive vs Class and Sex from the Sunburst plot but, let's see check the correlation graph of the dataset.**","5b157138":"# Data Preprocess\n\n**In this part, I will try to make dataset better input for the Random Forest Classifier**","d2cba3ba":"**As you can see from the Correlation Graph of the Training Dataset, the Survive is slightly correlated with the Pclass. As seen from the Sunburst graph, it makes sense.**\n\n**For the Survive and Sex analysis, these two features have a negative correlation. This is because of my assignment which is the '1 = Male and 0 = Female'. So, we can say that when the Survive is increasing, the Sex is decreasing strongly. That means the female survival is pretty high for this scenario. It makes sense due to the Sunburst plot above. As seen from the Sunburst plot, for the First and Second class passengers, the survival rate is pretty high for females.**\n\n**It is also clear that the Parch and Survive have almost no relationship between them.**\n\n**And, we can also observe that the Pclass and Fare have a negative correlation. It makes sense again because when the Fare increases, the ticket class increases to First Class ticket.**\n\n**This analysis would help me to choose the best features for my Artificial Neural Network (ANN) model.**"}}