{"cell_type":{"56805858":"code","56ecdb31":"code","49ceb29d":"code","76666c42":"code","c65db7e7":"code","932060dc":"code","464e9acf":"code","a86502f0":"code","92e58607":"code","309b8793":"code","37bb2152":"code","ced944f0":"code","6ee4df86":"code","a7061f79":"code","dc5548d5":"code","877d24b3":"code","baf9e453":"code","696f3e4d":"code","97c4b844":"code","27c0dffe":"code","15e8a5fd":"code","c95ebe39":"code","7551ea88":"code","f380484e":"code","23d02975":"code","ad515680":"code","c1542ee7":"code","627c5953":"code","232e7295":"code","9c9feb5e":"markdown","8af95eae":"markdown","dc1c0f56":"markdown","46703091":"markdown","cbe0917e":"markdown","a6c1a26c":"markdown","68e4070b":"markdown","4c2745d8":"markdown","dd511b4d":"markdown","b4517b14":"markdown","b7ceba52":"markdown","09fd0544":"markdown","f0bf002d":"markdown","fb458c8d":"markdown","4e21124d":"markdown","a3275724":"markdown","fa9eb6ff":"markdown","4689dc02":"markdown","f847e819":"markdown","c775ea07":"markdown","38a3f49c":"markdown","9de383ae":"markdown","0bb51d7b":"markdown","22192a04":"markdown","59b222f4":"markdown","4f79f62b":"markdown","e44bb52e":"markdown","56d230e1":"markdown","fe60533f":"markdown","e938aac0":"markdown","48d0708c":"markdown","9d20227f":"markdown","7220898f":"markdown","4bb63250":"markdown"},"source":{"56805858":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport pandas_profiling","56ecdb31":"train_data= pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntest_data = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\ntrain_targets_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntrain_targets_non_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_nonscored.csv')","49ceb29d":"print(\"Train Data: \")\nprint(\"Shape:\"+str(train_data.shape))\ntrain_data.head(3)","76666c42":"print(\"Test Data\\nShape:\"+str(test_data.shape))\ntest_data.head(3)","c65db7e7":"print(\"Targets Scored:\\nShape:\"+str(train_targets_scored.shape))\ntrain_targets_scored.head(3)","932060dc":"print(\"Targets Non scored:\\nShape:\"+str(train_targets_non_scored.shape))\ntrain_targets_non_scored.head(3)","464e9acf":"train_gs = train_data.iloc[:,train_data.columns.map(lambda x: x[0:2])=='g-']\ntrain_cs = train_data.iloc[:,train_data.columns.map(lambda x: x[0:2])=='c-']\nprint(\"Gene expression data Number of columns: \"+str(train_gs.shape[1]))\nprint(\"cell viability data Number of columns: \"+ str(train_cs.shape[1]))","a86502f0":"print(\"Mean:\"+str(pd.concat([train_gs,train_cs],axis=1).values.mean()))\nprint(\"Std:\"+str(pd.concat([train_gs,train_cs],axis=1).values.std()))\nplt.figure(figsize=(5,5))\nsns.distplot(pd.concat([train_gs,train_cs],axis=1).values)\nplt.title('combined gene expression and cell viability')\nplt.figure(figsize=(12,12))\nplt.subplot(2,2,1)\nsns.distplot(train_gs['g-0'],color='pink')\nplt.title('g-0')\nplt.subplot(2,2,2)\nsns.distplot(train_gs['g-100'],color='pink')\nplt.title('g-100')\nplt.subplot(2,2,3)\nsns.distplot(train_cs['c-1'],color='pink')\nplt.title('c-0')\nplt.subplot(2,2,4)\nsns.distplot(train_cs['c-80'],color='pink')\nplt.title('c-80')","92e58607":"print(\"Gene expression data statistics: \")\nprint(\"  Mean: \"+str(train_gs.values.mean()))\nprint(\"  Std: \"+str(train_gs.values.std()))\nprint(\"  Max: \"+str(train_gs.values.max()))\nprint(\"  Min: \"+str(train_gs.values.min()))\nprint('\\nCell viability data statistics: ')\nprint(\"  Mean: \"+str(train_cs.values.mean()))\nprint(\"  Std: \"+str(train_cs.values.std()))\nprint(\"  Max: \"+str(train_cs.values.max()))\nprint(\"  Min: \"+str(train_cs.values.min()))","309b8793":"plt.figure(figsize=(5,12))\nplt.subplot(3,1,1)\nsplot = sns.countplot(train_data[\"cp_type\"])\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\nplt.title('cp_type')\nplt.subplot(3,1,2)\nsns.countplot(train_data['cp_time'],hue=train_data['cp_type'])\nplt.title('cp_time vs cp_type')\nplt.subplot(3,1,3)\nsns.countplot(train_data['cp_dose'],hue=train_data['cp_type'])\nplt.title('cp_dose vs cp_type')\nplt.tight_layout()","37bb2152":"print(\"Number of scored targets: \"+str(train_targets_scored.shape[1]))","ced944f0":"out = dict()\narr=train_targets_scored.drop('sig_id',axis=1).values==1\nfor a in range(len(arr)):\n    o=np.sum(arr[a])\n    if o not in out.keys():\n        out[o]=1\n    else:\n        out[o]+=1\nlength = 23814\nplt.figure(figsize=(7,7))\nsplot = sns.barplot(x=list(out.keys()),y=list(out.values()))\nfor p in splot.patches:\n    splot.annotate(format(p.get_height()*100\/length, '.1f')+'%', \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\nplt.xlabel('Number of MoAs in sample')\nplt.ylabel('Count')\nplt.title('Percentage of samples with MoA counts')","6ee4df86":"cor = train_targets_scored.drop('sig_id',axis=1).corr()","a7061f79":"cor = train_targets_scored.drop('sig_id',axis=1).corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(cor)","dc5548d5":"df = pd.DataFrame(columns=['drug_a','drug_b','corr'])\nfor j in range(len(cor)):\n    for i in range(len(cor)):\n        if cor.iloc[i,j]>=0.7 and cor.iloc[i,j]!=1.0:\n            df = pd.concat([df,pd.DataFrame({'drug_a':[cor.columns[j]],'drug_b':[cor.columns[i]],'corr':[cor.iloc[i,j]]})],axis=0)\ndf","877d24b3":"print(\"Number of non scored targets: \"+str(train_targets_non_scored.shape[1]))","baf9e453":"\nout = dict()\narr=pd.concat([train_targets_scored.drop('sig_id',axis=1),train_targets_non_scored.drop('sig_id',axis=1)],axis=1).values==1\nfor a in range(len(arr)):\n    o=np.sum(arr[a])\n    if o not in out.keys():\n        out[o]=1\n    else:\n        out[o]+=1\nlength = 23814\nplt.figure(figsize=(7,7))\nsplot = sns.barplot(x=list(out.keys()),y=list(out.values()))\nfor p in splot.patches:\n    splot.annotate(format(p.get_height()*100\/length, '.1f')+'%', \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\nplt.xlabel('Number of MoAs in sample')\nplt.ylabel('Count')\nplt.title('Percentage of samples with MoA counts')","696f3e4d":"genes = [col for col in train_data if col.startswith('g-')]\ncells = [col for col in train_data if col.startswith('c-')]","97c4b844":"plt.figure(figsize=(8,8))\nsns.heatmap(train_data.loc[:,genes].corr(),cmap='viridis')","27c0dffe":"plt.figure(figsize=(8,8))\nsns.heatmap(train_data.loc[:,cells].corr(),cmap='viridis')","15e8a5fd":"plt.plot(train_cs.iloc[1,:])\nplt.title('cell viability data for second sample')","c95ebe39":"cor = train_gs.corr()","7551ea88":"df = pd.DataFrame(columns=['gene_a','gene_b','corr'])\nfor j in range(len(cor)):\n    for i in range(len(cor)):\n        if cor.iloc[i,j]<=-0.8 and cor.iloc[i,j]!=1.0:\n            df = pd.concat([df,pd.DataFrame({'gene_a':[cor.columns[j]],'gene_b':[cor.columns[i]],'corr':[cor.iloc[i,j]]})],axis=0)\ndf","f380484e":"cp_1 = train_data[train_data['cp_type']=='trt_cp']\ncp_2 = train_data[train_data['cp_type']!='trt_cp']\nplt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(cp_1['g-0'],color='orange',hist=False)\nsns.distplot(cp_2['g-0'],color='cyan',hist=False)\nplt.title('g-0')\nplt.subplot(2,2,2)\nsns.distplot(cp_1['g-100'],color='orange',hist=False)\nsns.distplot(cp_2['g-100'],color='cyan',hist=False)\nplt.title('g-100')\nplt.subplot(2,2,3)\nsns.distplot(cp_1['g-500'],color='orange',hist=False)\nsns.distplot(cp_2['g-500'],color='cyan',hist=False)\nplt.title('g-500')\nplt.subplot(2,2,4)\nsns.distplot(cp_1['g-600'],color='orange',hist=False)\nsns.distplot(cp_2['g-600'],color='cyan',hist=False)\nplt.title('g-600')","23d02975":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(cp_1['c-1'],color='orange',hist=False)\nsns.distplot(cp_2['c-1'],color='cyan',hist=False)\nplt.title('c-1')\nplt.subplot(2,2,2)\nsns.distplot(cp_1['c-20'],color='orange',hist=False)\nsns.distplot(cp_2['c-20'],color='cyan',hist=False)\nplt.title('c-20')\nplt.subplot(2,2,3)\nsns.distplot(cp_1['c-40'],color='orange',hist=False)\nsns.distplot(cp_2['c-40'],color='cyan',hist=False)\nplt.title('c-40')\nplt.subplot(2,2,4)\nsns.distplot(cp_1['c-50'],color='orange',hist=False)\nsns.distplot(cp_2['c-50'],color='cyan',hist=False)\nplt.title('c-50')","ad515680":"cp_1 = train_data[train_data['cp_time']==24]\ncp_2 = train_data[train_data['cp_type']!=48]\ncp_3 = train_data[train_data['cp_type']!=72]\nplt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(cp_1['g-0'],color='orange',hist=False)\nsns.distplot(cp_2['g-0'],color='cyan',hist=False)\nsns.distplot(cp_3['g-0'],color='blue',hist=False)\nplt.title('g-0')\nplt.subplot(2,2,2)\nsns.distplot(cp_1['g-100'],color='orange',hist=False)\nsns.distplot(cp_2['g-100'],color='cyan',hist=False)\nsns.distplot(cp_3['g-100'],color='blue',hist=False)\nplt.title('g-100')\nplt.subplot(2,2,3)\nsns.distplot(cp_1['g-500'],color='orange',hist=False)\nsns.distplot(cp_2['g-500'],color='cyan',hist=False)\nsns.distplot(cp_3['g-500'],color='blue',hist=False)\nplt.title('g-500')\nplt.subplot(2,2,4)\nsns.distplot(cp_1['g-600'],color='orange',hist=False)\nsns.distplot(cp_2['g-600'],color='cyan',hist=False)\nsns.distplot(cp_3['g-600'],color='blue',hist=False)\nplt.title('g-600')","c1542ee7":"\nplt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(cp_1['c-1'],color='orange',hist=False)\nsns.distplot(cp_2['c-1'],color='cyan',hist=False)\nsns.distplot(cp_3['c-1'],color='blue',hist=False)\nplt.title('c-1')\nplt.subplot(2,2,2)\nsns.distplot(cp_1['c-20'],color='orange',hist=False)\nsns.distplot(cp_2['c-20'],color='cyan',hist=False)\nsns.distplot(cp_3['c-20'],color='blue',hist=False)\nplt.title('c-20')\nplt.subplot(2,2,3)\nsns.distplot(cp_1['c-40'],color='orange',hist=False)\nsns.distplot(cp_2['c-40'],color='cyan',hist=False)\nsns.distplot(cp_3['c-40'],color='blue',hist=False)\nplt.title('c-40')\nplt.subplot(2,2,4)\nsns.distplot(cp_1['c-50'],color='orange',hist=False)\nsns.distplot(cp_2['c-50'],color='cyan',hist=False)\nsns.distplot(cp_3['c-50'],color='blue',hist=False)\nplt.title('c-50')","627c5953":"cp_1 = train_data[train_data['cp_dose']=='D0']\ncp_2 = train_data[train_data['cp_dose']!='D1']\nplt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(cp_1['g-0'],color='orange',hist=False)\nsns.distplot(cp_2['g-0'],color='cyan',hist=False)\nplt.title('g-0')\nplt.subplot(2,2,2)\nsns.distplot(cp_1['g-100'],color='orange',hist=False)\nsns.distplot(cp_2['g-100'],color='cyan',hist=False)\nplt.title('g-100')\nplt.subplot(2,2,3)\nsns.distplot(cp_1['g-500'],color='orange',hist=False)\nsns.distplot(cp_2['g-500'],color='cyan',hist=False)\nplt.title('g-500')\nplt.subplot(2,2,4)\nsns.distplot(cp_1['g-600'],color='orange',hist=False)\nsns.distplot(cp_2['g-600'],color='cyan',hist=False)\nplt.title('g-600')","232e7295":"plt.figure(figsize=(10,10))\nplt.subplot(2,2,1)\nsns.distplot(cp_1['c-1'],color='orange',hist=False)\nsns.distplot(cp_2['c-1'],color='cyan',hist=False)\nplt.title('c-1')\nplt.subplot(2,2,2)\nsns.distplot(cp_1['c-20'],color='orange',hist=False)\nsns.distplot(cp_2['c-20'],color='cyan',hist=False)\nplt.title('c-20')\nplt.subplot(2,2,3)\nsns.distplot(cp_1['c-40'],color='orange',hist=False)\nsns.distplot(cp_2['c-40'],color='cyan',hist=False)\nplt.title('c-40')\nplt.subplot(2,2,4)\nsns.distplot(cp_1['c-50'],color='orange',hist=False)\nsns.distplot(cp_2['c-50'],color='cyan',hist=False)\nplt.title('c-50')","9c9feb5e":"### Non Scored Targets","8af95eae":"A very important aspect of this data is to determine why the rows corresponding to control perturbation are provided. The discussion by [Matthew Masters](https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/184005) is informative in this regard. The following may or may not be the use of these rows\n* The trt_cp rows may be normalized using ctl_vehicle rows provided we know the underlying pairing, meaning the data of which control sample was used for which treatment sample.\n* Let's have another look at the countplot for cp_type this time with both train and test set combined:\n![image.png](attachment:image.png) \n* What is interesting to note here is looking at the values for this plot 25572\/2224 is rougly 11.5(let's say 12). Now if a drug sample is applied at different doses (D0 and D1) and let's say for each dose the data was collected at times 24,48 and 72 hrs, then each drug sample should 6 corresponding rows ( may be some other factor is also present owing to which the number of rows may be more or less).\n* Therefore finding a way to associate each sample with corresponding control sample is important. Discussions suggest the use of KNN search for the same. However I haven't found a way to do so effectively. This might prove to be a crucial aspect of the competition.","dc1c0f56":"****cell viability and gene expression of some samples coloured with respect to dose:**** cyan represents D0 and orange D1","46703091":"It is observed that most drugs are not at all correlated with the exception of a few pairs","cbe0917e":"### Scored Targets","a6c1a26c":"The following is an analysis of the data in the MOA-challenge. The aim of this challenge is to classify drugs based on their biological activity. The given data consists of gene expression data and cell viability data. We are to predict the mechanism of action response(s) for different samples. This is a multi-label classification problem where one sample might have multiple MoAs. The evaluation metric for this challenge is column wise logloss.","68e4070b":"Looking at the plot for cell viability data of a sample, it does not appear to be completely random and thus might have interdependence. Thus sequential models may be used to process the cell viability data.","4c2745d8":"39.3% of the training samples have 0 MoA activation. A majority of samples(52.6%) have one MoA activation. At max a sample has 7 MoA activations. ","dd511b4d":"It is observed that the all gene expression and cell viabiity columns fit a normal distribution. Also the cell viability data appears to be clipped at -10 and gene expression data at -10 and 10 respectively. This is evident from the peaks observed in the distribution graph","b4517b14":"In the case of the gene expression profile, in the work published in American Society for Microbiology journal, [Hutter et. al.](https:\/\/aac.asm.org\/content\/48\/8\/2838) conclude that after treatment with a particular sample, a linear svm may be used to classify the MoA based on the gene expression profile data. A linear svm per class of MoA was used in their work. In our case however the number of scored MoA classes are large. Therfore perhaps a deep neural net might perform well in predicting the MoA classes.","b7ceba52":"# Areas that require attention","09fd0544":"**Cell viability for some samples coloured with respect to treatment type:** cyan represents trt_vehicle and orange trt_cp","f0bf002d":"# Feature Relationships","fb458c8d":"With a combination of the scored and non scored targets we see that 23.2% of the samples have no MoA activation. Out of this 7% of samples are accounted for by the fact that their cp_type is control perturbation and hence no MoA is expected.","4e21124d":"We observe that the dataset consists of 772 columns for gene expression data and 100 columns for cell viability data. In addition cp_type indicate the type of treatment, whether the sample was treated with a compound (cp_vehicle) or with a control perturbation (ctrl_vehicle). Control perturbations have no MoAs. cp_time and cp_dose indicate treatment duration (24, 48, 72 hours) and dose (high or low).","a3275724":"**Some gene expressions coloured with respect to treatment type:** cyan represents trt-vehicle and orange trt_cp","fa9eb6ff":"## Genes correlation","4689dc02":"## Analysing the targets","f847e819":"![deug_act.jpg](attachment:deug_act.jpg)","c775ea07":"### **Note: The above discussion is my take on the data. Some of the observation may not be correct. Any advice or suggestion is welcome.**","38a3f49c":"**Some gene expressions coloured with respect to treatment duration:** cyan represents 24, orange 48 and blue 72","9de383ae":"## Cell correlations","0bb51d7b":"The drug pairs that have a correlation higher than 0.7 are as follows","22192a04":"**cell viability of some samples coloured with respect to treatment duration:** cyan represents 24, orange 48 and blue 72","59b222f4":"# Take away points","4f79f62b":"### cp_time, cp_type and cp_dose","e44bb52e":"The data is given to us in the form of train.csv and train_targets_scored.csv. The target MoAs in this file need to be predicted and are scored. In addition we also have have a file with additional MoA targets that are not scored but can be used for context analysis.\nA link to my model for this competition may be found [here](https:\/\/www.kaggle.com\/bibhash123\/moa-simple-transfer-model-using-tensorflow-keras)","56d230e1":"**Note:** The above conclusion is purely based on speculation. A verification from someone with domain knowledge is appreciated","fe60533f":"## First look on the data","e938aac0":"* Many cell viabilities have high correlation with each other","48d0708c":"It is also observed that certain gene pairs have high negative correlation","9d20227f":"# About","7220898f":"* Since samples with cp_type \"trt_vehicle\" don't have any MoA activation, after prediction those sample targets can manually be set to 0. However the important point here is that the columns with cp_type \"trt_vehicle\"\n* The gene expression and cell viability combined, appear to follow a normal distribution as do individual columns. This may be because the data has already been normalized. On another hand it may also bear some significance in perspective of the domain (Unsure about this).\n* The cell viability data show some kind of uniformity which might imply that sequential models may perform well on this part. (Again requires a review from someone with domain knowledge).\n* For gene expression with respect to treatment type the distributions for gene expression have slighty more variance compared to the same plot for cell viability.\n* From similar plots to those mentioned in previous point, for cp_time and cp_dose it is observed that identical distributions are obtained for each category.\n* Most drug pairs are not at all correlated with the exception of a few pairs.\n* Certain gene pairs are highly correlated with each other","4bb63250":"For gene expression with respect to treatment type the distributions for gene expression have slighty more variance compared to the same plot for cell viability."}}