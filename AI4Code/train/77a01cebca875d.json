{"cell_type":{"b915df90":"code","732a07eb":"code","25e298f0":"code","73ed0041":"code","ea52cbee":"code","09d28c52":"code","5828b8fa":"code","d787ecc5":"code","fef73fc8":"code","a4556f86":"code","d5a67ad0":"code","992f7bd2":"code","78fec8b3":"markdown","1e8853f7":"markdown","f2a0509b":"markdown","5b8ceb2d":"markdown","1019d46d":"markdown","eafd2f01":"markdown","36b71da8":"markdown"},"source":{"b915df90":"import os\nimport random\n\nimport numpy as np\nimport cv2\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm_notebook as tqdm\nfrom PIL import Image ","732a07eb":"TEST_DATA_DIR = '..\/input\/fruits\/fruits-360\/Test\/'\n","25e298f0":"fruits_list = os.listdir(TEST_DATA_DIR)\nfruits_list[:5]","73ed0041":"def get_random_fruit_image():\n    fruit_class = np.random.choice(list(fruits_list), size=1)[0]\n    fruit_class_path = os.path.join(TEST_DATA_DIR, fruit_class)\n\n    image_names = os.listdir(fruit_class_path)\n    image_name = np.random.choice(image_names, size=1)[0]\n\n    image_path = os.path.join(fruit_class_path, image_name)\n    image = cv2.imread(image_path)\n#     image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    \n    return image, fruit_class","ea52cbee":"image, fruit_class = get_random_fruit_image()\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\nplt.title(f'Fruit class: {fruit_class}')\nplt.imshow(image)","09d28c52":"fig, axs = plt.subplots(5, 6, figsize=(20, 15))\naxs = axs.flatten()\n\nfor ax in axs:\n    image, fruit_class = get_random_fruit_image()\n\n    ax.set_title(f'Fruit class: {fruit_class}')\n    \n    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n    ax.imshow(image)\n    \nplt.tight_layout()","5828b8fa":"def remove_background(img, threshold):\n    \"\"\"\n    This method removes background from your image\n    \n    :param img: cv2 image\n    :type img: np.array\n    :param threshold: threshold value for cv2.threshold\n    :type threshold: float\n    :return: RGBA image\n    :rtype: np.ndarray\n    \"\"\"\n    \n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    _, threshed = cv2.threshold(gray, threshold, 255, cv2.THRESH_BINARY_INV)\n\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11, 11))\n    morphed = cv2.morphologyEx(threshed, cv2.MORPH_CLOSE, kernel)\n\n    cnts = cv2.findContours(morphed, \n                            cv2.RETR_EXTERNAL,\n                            cv2.CHAIN_APPROX_SIMPLE)[0]\n\n    cnt = sorted(cnts, key=cv2.contourArea)[-1]\n\n    mask = cv2.drawContours(threshed, cnt, 0, (0, 255, 0), 0)\n    masked_data = cv2.bitwise_and(img, img, mask=mask)\n\n    x, y, w, h = cv2.boundingRect(cnt)\n    dst = masked_data[y: y + h, x: x + w]\n\n    dst_gray = cv2.cvtColor(dst, cv2.COLOR_BGR2GRAY)\n    _, alpha = cv2.threshold(dst_gray, 0, 255, cv2.THRESH_BINARY)\n    b, g, r = cv2.split(dst)\n\n    rgba = [r, g, b, alpha]\n    dst = cv2.merge(rgba, 4)\n\n    return dst","d787ecc5":"fig, axs = plt.subplots(3, 2, figsize=(12, 8))\nfig.suptitle('Background removal result', fontsize=14)\n\nfor ax in axs:\n    image, fruit_class = get_random_fruit_image()\n    \n    ax[0].set_title(f'Fruit class: {fruit_class}. Original image.')\n    ax[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    \n    image = remove_background(image, threshold=250.)\n    \n    ax[1].set_title(f'Fruit class: {fruit_class}. With no backgound.')\n    ax[1].imshow(image)\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])","fef73fc8":"def create_blank_image(height, width, rgb_color=(0, 0, 255)):\n    \"\"\"\n    Creates np.array, each channel of which is filled with value from rgb_color\n    \n    Was stolen from:\n    :source: https:\/\/stackoverflow.com\/questions\/4337902\/how-to-fill-opencv-image-with-one-solid-color\n    \"\"\"\n    \n    image = np.zeros((height, width, 3), np.uint8)\n    color = tuple(reversed(rgb_color))\n    \n    image[:] = color\n    \n    return image","a4556f86":"fig, axs = plt.subplots(1, 3, figsize=(20, 10))\nfig.suptitle('Blank images', fontsize=14)\n\naxs = axs.flatten()\n\nCOLORS = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\n\nfor idx, ax in enumerate(axs):\n    image = create_blank_image(100, 100, rgb_color=COLORS[idx])\n    \n    ax.set_title(f'Blank image with color: {COLORS[idx]}')\n    ax.imshow(image)","d5a67ad0":"def add_backgound(image):\n    \"\"\"\n    Adds background to given image using PIL\n    \"\"\"\n    \n    image_shape = image.shape\n    image_height = image_shape[0]\n    image_width = image_shape[1]\n    \n    backgound = create_blank_image(image_height, \n                                   image_width,\n                                   rgb_color=(0, 0, 255))\n    \n    background = Image.fromarray(backgound)\n    image = Image.fromarray(image)\n    \n    background.paste(image,\n                     (0, 0),\n                     image)\n    \n    return background","992f7bd2":"fig, axs = plt.subplots(6, 3, figsize=(16, 12))\nfig.suptitle('Background adding result', fontsize=14)\n\nfor ax in axs:\n    image, fruit_class = get_random_fruit_image()\n    \n    ax[0].set_title(f'Fruit class: {fruit_class}. Original image.')\n    ax[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    \n    image = remove_background(image, threshold=250.)\n    \n    ax[1].set_title(f'Fruit class: {fruit_class}. With no backgound.')\n    ax[1].imshow(image)\n    \n    image = add_backgound(image)\n\n    ax[2].set_title(f'Fruit class: {fruit_class}. With new backgound.')\n    ax[2].imshow(image)\n    \nplt.tight_layout(rect=[0, 0.03, 1, 0.95])","78fec8b3":"## First look on images","1e8853f7":"## Background removal","f2a0509b":"Let's plot more!","5b8ceb2d":"You can play with `threshold` value by yourself and find which suits more to your dataset. Good luck!","1019d46d":"## Result","eafd2f01":"## Imports","36b71da8":"Background is the same everywhere, it is good."}}